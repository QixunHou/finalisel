digraph "CDFG for'func' function" {
	Node0x55b602fadf20[shape=record, label="  %call = tail call i32 @puts(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0))"]
	Node0x55b602fae0d8[shape=record, label="  %call1 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i64 0, i64 0), i32 %a, i32 %y, i32 %z)"]
	Node0x55b602faea60[shape=record, label="  %puts = tail call i32 @puts(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.17, i64 0, i64 0))"]
	Node0x55b602faebd0[shape=record, label="  %puts50 = tail call i32 @puts(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.16, i64 0, i64 0))"]
	Node0x55b602fa7440[shape=record, label="  %call4 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0), i32 0, i32 %a, i32 0, i32 0)"]
	Node0x55b602fab3c8[shape=record, label="  br label %while.cond"]
	Node0x55b602faee98[shape=record, label="  %a.addr.0 = phi i32 [ %a, %entry ], [ %a.addr.1, %if.end18 ]"]
	Node0x55b602faefb8[shape=record, label="  %b.0 = phi i32 [ 0, %entry ], [ %b.1, %if.end18 ]"]
	Node0x55b602faf268[shape=record, label="  %c.0 = phi i32 [ 0, %entry ], [ %c.1, %if.end18 ]"]
	Node0x55b602faf3d8[shape=record, label="  %j.0 = phi i32 [ 1, %entry ], [ %inc19, %if.end18 ]"]
	Node0x55b602faf4a8[shape=record, label="  %0 = load i32, i32* @i, align 4, !tbaa !2"]
	Node0x55b602faf540[shape=record, label="  %cmp = icmp eq i32 %a.addr.0, %0"]
	Node0x55b602faf798[shape=record, label="  br i1 %cmp, label %lor.rhs, label %while.body"]
	Node0x55b602faf810[shape=record, label="  %cmp5 = icmp eq i32 %b.0, %a.addr.0"]
	Node0x55b602faf8a0[shape=record, label="  %cmp6 = icmp eq i32 %c.0, %a.addr.0"]
	Node0x55b602faf930[shape=record, label="  %or.cond = or i1 %cmp5, %cmp6"]
	Node0x55b602fafa58[shape=record, label="  br i1 %or.cond, label %while.end, label %while.body"]
	Node0x55b602fafad0[shape=record, label="  %tobool = icmp eq i32 %b.0, 0"]
	Node0x55b602faffd8[shape=record, label="  br i1 %tobool, label %if.then, label %if.else"]
	Node0x55b602fb0050[shape=record, label="  %sub = sub nsw i32 %a.addr.0, %y"]
	Node0x55b602faf708[shape=record, label="  br label %if.end18"]
	Node0x55b602fb00e0[shape=record, label="  %cmp7 = icmp eq i32 %c.0, %z"]
	Node0x55b602fb02e8[shape=record, label="  br i1 %cmp7, label %if.then8, label %if.else9"]
	Node0x55b602fb0360[shape=record, label="  %add = add nsw i32 %a.addr.0, %z"]
	Node0x55b602faff48[shape=record, label="  br label %if.end18"]
	Node0x55b602fb03f0[shape=record, label="  %sub10 = sub nsw i32 %z, %c.0"]
	Node0x55b602fb0480[shape=record, label="  %cmp11 = icmp sgt i32 %b.0, %sub10"]
	Node0x55b602fb0688[shape=record, label="  br i1 %cmp11, label %if.then12, label %if.else15"]
	Node0x55b602fb0700[shape=record, label="  %sub14 = sub nsw i32 %b.0, %sub10"]
	Node0x55b602fb0258[shape=record, label="  br label %if.end18"]
	Node0x55b602fb0790[shape=record, label="  %add16 = add nsw i32 %c.0, %b.0"]
	Node0x55b602fb05f8[shape=record, label="  br label %if.end18"]
	Node0x55b602fb07f8[shape=record, label="  %a.addr.1 = phi i32 [ %add, %if.then8 ], [ %a.addr.0, %if.then12 ], [ %a.addr.0, %if.else15 ], [ %sub, %if.then ]"]
	Node0x55b602fb08d8[shape=record, label="  %b.1 = phi i32 [ %b.0, %if.then8 ], [ %sub14, %if.then12 ], [ 0, %if.else15 ], [ %y, %if.then ]"]
	Node0x55b602fb09b8[shape=record, label="  %c.1 = phi i32 [ 0, %if.then8 ], [ %z, %if.then12 ], [ %add16, %if.else15 ], [ %c.0, %if.then ]"]
	Node0x55b602fb0ac0[shape=record, label="  %inc19 = add nuw nsw i32 %j.0, 1"]
	Node0x55b602fadd70[shape=record, label="  %call20 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0), i32 %j.0, i32 %a.addr.1, i32 %b.1, i32 %c.1)"]
	Node0x55b602faf388[shape=record, label="  br label %while.cond"]
	Node0x55b602fb0bc0[shape=record, label="  %puts51 = tail call i32 @puts(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.17, i64 0, i64 0))"]
	Node0x55b602fb0c60[shape=record, label="  ret void"]
	Node0x55b602fadf20 -> Node0x55b602fae0d8
	Node0x55b602fae0d8 -> Node0x55b602faea60
	Node0x55b602faea60 -> Node0x55b602faebd0
	Node0x55b602faebd0 -> Node0x55b602fa7440
	Node0x55b602fa7440 -> Node0x55b602fab3c8
	Node0x55b602fab3c8 -> Node0x55b602faee98
	Node0x55b602faee98 -> Node0x55b602faefb8
	Node0x55b602faefb8 -> Node0x55b602faf268
	Node0x55b602faf268 -> Node0x55b602faf3d8
	Node0x55b602faf3d8 -> Node0x55b602faf4a8
	Node0x55b602faf4a8 -> Node0x55b602faf540
	Node0x55b602faf540 -> Node0x55b602faf798
	Node0x55b602faf798 -> Node0x55b602faf810
	Node0x55b602faf798 -> Node0x55b602fafad0
	Node0x55b602faf810 -> Node0x55b602faf8a0
	Node0x55b602faf8a0 -> Node0x55b602faf930
	Node0x55b602faf930 -> Node0x55b602fafa58
	Node0x55b602fafa58 -> Node0x55b602fb0bc0
	Node0x55b602fafa58 -> Node0x55b602fafad0
	Node0x55b602fafad0 -> Node0x55b602faffd8
	Node0x55b602faffd8 -> Node0x55b602fb0050
	Node0x55b602faffd8 -> Node0x55b602fb00e0
	Node0x55b602fb0050 -> Node0x55b602faf708
	Node0x55b602faf708 -> Node0x55b602fb07f8
	Node0x55b602fb00e0 -> Node0x55b602fb02e8
	Node0x55b602fb02e8 -> Node0x55b602fb0360
	Node0x55b602fb02e8 -> Node0x55b602fb03f0
	Node0x55b602fb0360 -> Node0x55b602faff48
	Node0x55b602faff48 -> Node0x55b602fb07f8
	Node0x55b602fb03f0 -> Node0x55b602fb0480
	Node0x55b602fb0480 -> Node0x55b602fb0688
	Node0x55b602fb0688 -> Node0x55b602fb0700
	Node0x55b602fb0688 -> Node0x55b602fb0790
	Node0x55b602fb0700 -> Node0x55b602fb0258
	Node0x55b602fb0258 -> Node0x55b602fb07f8
	Node0x55b602fb0790 -> Node0x55b602fb05f8
	Node0x55b602fb05f8 -> Node0x55b602fb07f8
	Node0x55b602fb07f8 -> Node0x55b602fb08d8
	Node0x55b602fb08d8 -> Node0x55b602fb09b8
	Node0x55b602fb09b8 -> Node0x55b602fb0ac0
	Node0x55b602fb0ac0 -> Node0x55b602fadd70
	Node0x55b602fadd70 -> Node0x55b602faf388
	Node0x55b602faf388 -> Node0x55b602faee98
	Node0x55b602fb0bc0 -> Node0x55b602fb0c60
edge [color=red]
	Node0x55b602fb07f8 -> Node0x55b602faee98[label="1"]
	Node0x55b602fb08d8 -> Node0x55b602faefb8[label="2"]
	Node0x55b602fb09b8 -> Node0x55b602faf268[label="3"]
	Node0x55b602fb0ac0 -> Node0x55b602faf3d8[label="4"]
	Node0x55b602fa88b8 -> Node0x55b602faf4a8[label="5"]
	Node0x55b602faee98 -> Node0x55b602faf540[label="6"]
	Node0x55b602faf4a8 -> Node0x55b602faf540[label="7"]
	Node0x55b602faf540 -> Node0x55b602faf798[label="8"]
	Node0x55b602faefb8 -> Node0x55b602faf810[label="9"]
	Node0x55b602faee98 -> Node0x55b602faf810[label="10"]
	Node0x55b602faf268 -> Node0x55b602faf8a0[label="11"]
	Node0x55b602faee98 -> Node0x55b602faf8a0[label="12"]
	Node0x55b602faf810 -> Node0x55b602faf930[label="13"]
	Node0x55b602faf8a0 -> Node0x55b602faf930[label="14"]
	Node0x55b602faf930 -> Node0x55b602fafa58[label="15"]
	Node0x55b602faefb8 -> Node0x55b602fafad0[label="16"]
	Node0x55b602fafad0 -> Node0x55b602faffd8[label="17"]
	Node0x55b602faee98 -> Node0x55b602fb0050[label="18"]
	Node0x55b602faf268 -> Node0x55b602fb00e0[label="19"]
	Node0x55b602fb00e0 -> Node0x55b602fb02e8[label="20"]
	Node0x55b602faee98 -> Node0x55b602fb0360[label="21"]
	Node0x55b602faf268 -> Node0x55b602fb03f0[label="22"]
	Node0x55b602faefb8 -> Node0x55b602fb0480[label="23"]
	Node0x55b602fb03f0 -> Node0x55b602fb0480[label="24"]
	Node0x55b602fb0480 -> Node0x55b602fb0688[label="25"]
	Node0x55b602faefb8 -> Node0x55b602fb0700[label="26"]
	Node0x55b602fb03f0 -> Node0x55b602fb0700[label="27"]
	Node0x55b602faf268 -> Node0x55b602fb0790[label="28"]
	Node0x55b602faefb8 -> Node0x55b602fb0790[label="29"]
	Node0x55b602fb0360 -> Node0x55b602fb07f8[label="30"]
	Node0x55b602faee98 -> Node0x55b602fb07f8[label="31"]
	Node0x55b602faee98 -> Node0x55b602fb07f8[label="32"]
	Node0x55b602fb0050 -> Node0x55b602fb07f8[label="33"]
	Node0x55b602faefb8 -> Node0x55b602fb08d8[label="34"]
	Node0x55b602fb0700 -> Node0x55b602fb08d8[label="35"]
	Node0x55b602fb0790 -> Node0x55b602fb09b8[label="36"]
	Node0x55b602faf268 -> Node0x55b602fb09b8[label="37"]
	Node0x55b602faf3d8 -> Node0x55b602fb0ac0[label="38"]
	Node0x55b602faf3d8 -> Node0x55b602fadd70[label="39"]
	Node0x55b602fb07f8 -> Node0x55b602fadd70[label="40"]
	Node0x55b602fb08d8 -> Node0x55b602fadd70[label="41"]
	Node0x55b602fb09b8 -> Node0x55b602fadd70[label="42"]
}
