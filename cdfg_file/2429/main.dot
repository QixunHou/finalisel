digraph "CDFG for'main' function" {
	Node0x55bdef8f6a38[shape=record, label="  %a = alloca i32, align 4"]
	Node0x55bdef8f6ab8[shape=record, label="  %b = alloca i32, align 4"]
	Node0x55bdef8f6b38[shape=record, label="  %0 = bitcast i32* %a to i8*"]
	Node0x55bdef8f6d78[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #4"]
	Node0x55bdef8f6e38[shape=record, label="  %1 = bitcast i32* %b to i8*"]
	Node0x55bdef8f6ee8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #4"]
	Node0x55bdef8f7360[shape=record, label="  %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %a, i32* nonnull %b)"]
	Node0x55bdef8f7418[shape=record, label="  %2 = load i32, i32* %a, align 4, !tbaa !2"]
	Node0x55bdef8f8338[shape=record, label="  %3 = load i32, i32* %b, align 4, !tbaa !2"]
	Node0x55bdef8f8a88[shape=record, label="  br label %while.cond.i"]
	Node0x55bdef8f8b08[shape=record, label="  %b.addr.0.i = phi i32 [ %3, %entry ], [ %rem.i, %while.cond.i ]"]
	Node0x55bdef8f8bd8[shape=record, label="  %a.addr.0.i = phi i32 [ %2, %entry ], [ %b.addr.0.i, %while.cond.i ]"]
	Node0x55bdef8f8cd0[shape=record, label="  %rem.i = srem i32 %a.addr.0.i, %b.addr.0.i"]
	Node0x55bdef8f8d40[shape=record, label="  %tobool.i = icmp eq i32 %rem.i, 0"]
	Node0x55bdef8f8e48[shape=record, label="  br i1 %tobool.i, label %func.exit, label %while.cond.i"]
	Node0x55bdef8f9038[shape=record, label="  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %b.addr.0.i)"]
	Node0x55bdef8f9208[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #4"]
	Node0x55bdef8f9318[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #4"]
	Node0x55bdef8f93d8[shape=record, label="  ret i32 0"]
	Node0x55bdef8f6a38 -> Node0x55bdef8f6ab8
	Node0x55bdef8f6ab8 -> Node0x55bdef8f6b38
	Node0x55bdef8f6b38 -> Node0x55bdef8f6d78
	Node0x55bdef8f6d78 -> Node0x55bdef8f6e38
	Node0x55bdef8f6e38 -> Node0x55bdef8f6ee8
	Node0x55bdef8f6ee8 -> Node0x55bdef8f7360
	Node0x55bdef8f7360 -> Node0x55bdef8f7418
	Node0x55bdef8f7418 -> Node0x55bdef8f8338
	Node0x55bdef8f8338 -> Node0x55bdef8f8a88
	Node0x55bdef8f8a88 -> Node0x55bdef8f8b08
	Node0x55bdef8f8b08 -> Node0x55bdef8f8bd8
	Node0x55bdef8f8bd8 -> Node0x55bdef8f8cd0
	Node0x55bdef8f8cd0 -> Node0x55bdef8f8d40
	Node0x55bdef8f8d40 -> Node0x55bdef8f8e48
	Node0x55bdef8f8e48 -> Node0x55bdef8f9038
	Node0x55bdef8f8e48 -> Node0x55bdef8f8b08
	Node0x55bdef8f9038 -> Node0x55bdef8f9208
	Node0x55bdef8f9208 -> Node0x55bdef8f9318
	Node0x55bdef8f9318 -> Node0x55bdef8f93d8
edge [color=red]
	Node0x55bdef8f6a38 -> Node0x55bdef8f6b38[label="1"]
	Node0x55bdef8f6b38 -> Node0x55bdef8f6d78[label="2"]
	Node0x55bdef8f6ab8 -> Node0x55bdef8f6e38[label="3"]
	Node0x55bdef8f6e38 -> Node0x55bdef8f6ee8[label="4"]
	Node0x55bdef8f6a38 -> Node0x55bdef8f7360[label="5"]
	Node0x55bdef8f6ab8 -> Node0x55bdef8f7360[label="6"]
	Node0x55bdef8f6a38 -> Node0x55bdef8f7418[label="7"]
	Node0x55bdef8f6ab8 -> Node0x55bdef8f8338[label="8"]
	Node0x55bdef8f8338 -> Node0x55bdef8f8b08[label="9"]
	Node0x55bdef8f8cd0 -> Node0x55bdef8f8b08[label="10"]
	Node0x55bdef8f7418 -> Node0x55bdef8f8bd8[label="11"]
	Node0x55bdef8f8b08 -> Node0x55bdef8f8bd8[label="12"]
	Node0x55bdef8f8bd8 -> Node0x55bdef8f8cd0[label="13"]
	Node0x55bdef8f8b08 -> Node0x55bdef8f8cd0[label="14"]
	Node0x55bdef8f8cd0 -> Node0x55bdef8f8d40[label="15"]
	Node0x55bdef8f8d40 -> Node0x55bdef8f8e48[label="16"]
	Node0x55bdef8f8b08 -> Node0x55bdef8f9038[label="17"]
	Node0x55bdef8f6e38 -> Node0x55bdef8f9208[label="18"]
	Node0x55bdef8f6b38 -> Node0x55bdef8f9318[label="19"]
}
