digraph "CDFG for'func' function" {
	Node0x558100689838[shape=record, label="  %idx.ext = sext i32 %n to i64"]
	Node0x5581006898d0[shape=record, label="  %add.ptr = getelementptr inbounds i32, i32* %apt, i64 %idx.ext"]
	Node0x558100689970[shape=record, label="  %cmp8 = icmp sgt i32 %n, 0"]
	Node0x558100610c98[shape=record, label="  br i1 %cmp8, label %for.body, label %cleanup"]
	Node0x558100689cb8[shape=record, label="  %p.09 = phi i32* [ %incdec.ptr, %for.inc ], [ %apt, %entry ]"]
	Node0x558100689d88[shape=record, label="  %0 = load i32, i32* %p.09, align 4, !tbaa !2"]
	Node0x55810068acd0[shape=record, label="  %cmp1 = icmp eq i32 %0, %key"]
	Node0x55810061c228[shape=record, label="  br i1 %cmp1, label %if.then, label %for.inc"]
	Node0x55810068af58[shape=record, label="  %sub.ptr.lhs.cast = ptrtoint i32* %p.09 to i64"]
	Node0x55810068b018[shape=record, label="  %sub.ptr.rhs.cast = ptrtoint i32* %apt to i64"]
	Node0x55810068b120[shape=record, label="  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast"]
	Node0x55810068b190[shape=record, label="  %1 = lshr exact i64 %sub.ptr.sub, 2"]
	Node0x55810068b208[shape=record, label="  %conv = trunc i64 %1 to i32"]
	Node0x55810068b268[shape=record, label="  br label %cleanup"]
	Node0x55810068b2e0[shape=record, label="  %incdec.ptr = getelementptr inbounds i32, i32* %p.09, i64 1"]
	Node0x55810068b360[shape=record, label="  %cmp = icmp ult i32* %incdec.ptr, %add.ptr"]
	Node0x55810061c348[shape=record, label="  br i1 %cmp, label %for.body, label %cleanup"]
	Node0x55810068b3c8[shape=record, label="  %retval.0 = phi i32 [ %conv, %if.then ], [ -1, %entry ], [ -1, %for.inc ]"]
	Node0x558100689b38[shape=record, label="  ret i32 %retval.0"]
	Node0x558100689838 -> Node0x5581006898d0
	Node0x5581006898d0 -> Node0x558100689970
	Node0x558100689970 -> Node0x558100610c98
	Node0x558100610c98 -> Node0x558100689cb8
	Node0x558100610c98 -> Node0x55810068b3c8
	Node0x558100689cb8 -> Node0x558100689d88
	Node0x558100689d88 -> Node0x55810068acd0
	Node0x55810068acd0 -> Node0x55810061c228
	Node0x55810061c228 -> Node0x55810068af58
	Node0x55810061c228 -> Node0x55810068b2e0
	Node0x55810068af58 -> Node0x55810068b018
	Node0x55810068b018 -> Node0x55810068b120
	Node0x55810068b120 -> Node0x55810068b190
	Node0x55810068b190 -> Node0x55810068b208
	Node0x55810068b208 -> Node0x55810068b268
	Node0x55810068b268 -> Node0x55810068b3c8
	Node0x55810068b2e0 -> Node0x55810068b360
	Node0x55810068b360 -> Node0x55810061c348
	Node0x55810061c348 -> Node0x558100689cb8
	Node0x55810061c348 -> Node0x55810068b3c8
	Node0x55810068b3c8 -> Node0x558100689b38
edge [color=red]
	Node0x558100689838 -> Node0x5581006898d0[label="1"]
	Node0x558100689970 -> Node0x558100610c98[label="2"]
	Node0x55810068b2e0 -> Node0x558100689cb8[label="3"]
	Node0x558100689cb8 -> Node0x558100689d88[label="4"]
	Node0x558100689d88 -> Node0x55810068acd0[label="5"]
	Node0x55810068acd0 -> Node0x55810061c228[label="6"]
	Node0x558100689cb8 -> Node0x55810068af58[label="7"]
	Node0x55810068af58 -> Node0x55810068b120[label="8"]
	Node0x55810068b018 -> Node0x55810068b120[label="9"]
	Node0x55810068b120 -> Node0x55810068b190[label="10"]
	Node0x55810068b190 -> Node0x55810068b208[label="11"]
	Node0x558100689cb8 -> Node0x55810068b2e0[label="12"]
	Node0x55810068b2e0 -> Node0x55810068b360[label="13"]
	Node0x5581006898d0 -> Node0x55810068b360[label="14"]
	Node0x55810068b360 -> Node0x55810061c348[label="15"]
	Node0x55810068b208 -> Node0x55810068b3c8[label="16"]
	Node0x55810068b3c8 -> Node0x558100689b38[label="17"]
}
