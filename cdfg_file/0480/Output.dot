digraph "CDFG for'Output' function" {
	Node0x55568afcaa48[shape=record, label="  %0 = load i32, i32* %minS, align 4, !tbaa !2"]
	Node0x55568afcaac8[shape=record, label="  %idxprom = sext i32 %0 to i64"]
	Node0x55568afcab78[shape=record, label="  %top.i.i = getelementptr inbounds %struct.SeqStack, %struct.SeqStack* %H, i64 %idxprom, i32 1"]
	Node0x55568afcac08[shape=record, label="  %1 = load i32, i32* %top.i.i, align 4, !tbaa !6"]
	Node0x55568afcaca0[shape=record, label="  %cmp.i.i = icmp eq i32 %1, -1"]
	Node0x55568afcaeb8[shape=record, label="  br i1 %cmp.i.i, label %if.then.i, label %if.end.i"]
	Node0x55568afcaf50[shape=record, label="  %call1.i = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0)) #6"]
	Node0x55568afcb248[shape=record, label="  br label %Pop.exit"]
	Node0x55568afcb2c0[shape=record, label="  %dec.i = add nsw i32 %1, -1"]
	Node0x55568afcb350[shape=record, label="  store i32 %dec.i, i32* %top.i.i, align 4, !tbaa !6"]
	Node0x55568afcae28[shape=record, label="  br label %Pop.exit"]
	Node0x55568afcad48[shape=record, label="  %2 = load i32, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afcb3e8[shape=record, label="  %3 = load i32, i32* %minS, align 4, !tbaa !2"]
	Node0x55568afcb510[shape=record, label="  %call1 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i32 %2, i32 %3)"]
	Node0x55568afcb5e0[shape=record, label="  %add = add nsw i32 %n, 2"]
	Node0x55568afcb670[shape=record, label="  store i32 %add, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afcb6f0[shape=record, label="  %cmp29 = icmp slt i32 %k, 1"]
	Node0x55568afcb998[shape=record, label="  br i1 %cmp29, label %for.end, label %for.body.preheader"]
	Node0x55568afcba40[shape=record, label="  %4 = add i32 %k, 1"]
	Node0x55568afcbb00[shape=record, label="  %5 = and i32 %4, 1"]
	Node0x55568afcbb70[shape=record, label="  %6 = xor i32 %5, 1"]
	Node0x55568afcbbe0[shape=record, label="  %7 = icmp eq i32 %4, 2"]
	Node0x55568afcbdd8[shape=record, label="  br i1 %7, label %for.end.loopexit.unr-lcssa, label %for.body.preheader.new"]
	Node0x55568afcbd48[shape=record, label="  %xtraiter = zext i32 %6 to i64"]
	Node0x55568afcbe38[shape=record, label="  %wide.trip.count = zext i32 %4 to i64"]
	Node0x55568afcbf10[shape=record, label="  %8 = xor i64 %xtraiter, -1"]
	Node0x55568afcc040[shape=record, label="  %unroll_iter = add nsw i64 %8, %wide.trip.count"]
	Node0x55568afcc448[shape=record, label="  br label %for.body"]
	Node0x55568afcc5a8[shape=record, label="  %indvars.iv = phi i64 [ 1, %for.body.preheader.new ], [ %indvars.iv.next.1, %for.inc.1 ]"]
	Node0x55568afcc738[shape=record, label="  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]"]
	Node0x55568afcc838[shape=record, label="  %top.i = getelementptr inbounds %struct.SeqStack, %struct.SeqStack* %H, i64 %indvars.iv, i32 1"]
	Node0x55568afcc8c8[shape=record, label="  %9 = load i32, i32* %top.i, align 4, !tbaa !6"]
	Node0x55568afcc940[shape=record, label="  %cmp.i = icmp eq i32 %9, -1"]
	Node0x55568afccb98[shape=record, label="  br i1 %cmp.i, label %for.inc, label %Top.exit"]
	Node0x55568afccb08[shape=record, label="  %idxprom.i26 = sext i32 %9 to i64"]
	Node0x55568afccc70[shape=record, label="  %arrayidx.i27 = getelementptr inbounds %struct.SeqStack, %struct.SeqStack* %H, i64 %indvars.iv, i32 0, i64 %idxprom.i26"]
	Node0x55568afccd08[shape=record, label="  %10 = load i32, i32* %arrayidx.i27, align 4, !tbaa !2"]
	Node0x55568afccd68[shape=record, label="  %11 = load i32, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afccde0[shape=record, label="  %cmp8 = icmp slt i32 %10, %11"]
	Node0x55568afccf58[shape=record, label="  br i1 %cmp8, label %if.then, label %for.inc"]
	Node0x55568afccfd0[shape=record, label="  store i32 %10, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afccec8[shape=record, label="  %12 = trunc i64 %indvars.iv to i32"]
	Node0x55568afcd050[shape=record, label="  store i32 %12, i32* %minS, align 4, !tbaa !2"]
	Node0x55568afcd0b8[shape=record, label="  br label %for.inc"]
	Node0x55568afcd130[shape=record, label="  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1"]
	Node0x55568afcd218[shape=record, label="  %top.i.1 = getelementptr inbounds %struct.SeqStack, %struct.SeqStack* %H, i64 %indvars.iv.next, i32 1"]
	Node0x55568afcca28[shape=record, label="  %13 = load i32, i32* %top.i.1, align 4, !tbaa !6"]
	Node0x55568afcd2c0[shape=record, label="  %cmp.i.1 = icmp eq i32 %13, -1"]
	Node0x55568afcd418[shape=record, label="  br i1 %cmp.i.1, label %for.inc.1, label %Top.exit.1"]
	Node0x55568afcd4c8[shape=record, label="  %indvars.iv.unr = phi i64 [ 1, %for.body.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]"]
	Node0x55568afcd590[shape=record, label="  %lcmp.mod = icmp eq i32 %6, 0"]
	Node0x55568afcd698[shape=record, label="  br i1 %lcmp.mod, label %for.end, label %for.body.epil"]
	Node0x55568afcd728[shape=record, label="  %top.i.epil = getelementptr inbounds %struct.SeqStack, %struct.SeqStack* %H, i64 %indvars.iv.unr, i32 1"]
	Node0x55568afcb8e8[shape=record, label="  %14 = load i32, i32* %top.i.epil, align 4, !tbaa !6"]
	Node0x55568afcd7b0[shape=record, label="  %cmp.i.epil = icmp eq i32 %14, -1"]
	Node0x55568afcd948[shape=record, label="  br i1 %cmp.i.epil, label %for.end, label %Top.exit.epil"]
	Node0x55568afcd8b8[shape=record, label="  %idxprom.i26.epil = sext i32 %14 to i64"]
	Node0x55568afcdab0[shape=record, label="  %arrayidx.i27.epil = getelementptr inbounds %struct.SeqStack, %struct.SeqStack* %H, i64 %indvars.iv.unr, i32 0, i64 %idxprom.i26.epil"]
	Node0x55568afcdb48[shape=record, label="  %15 = load i32, i32* %arrayidx.i27.epil, align 4, !tbaa !2"]
	Node0x55568afcdba8[shape=record, label="  %16 = load i32, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afcdc20[shape=record, label="  %cmp8.epil = icmp slt i32 %15, %16"]
	Node0x55568afcbf98[shape=record, label="  br i1 %cmp8.epil, label %if.then.epil, label %for.end"]
	Node0x55568afce360[shape=record, label="  store i32 %15, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afce2e8[shape=record, label="  %17 = trunc i64 %indvars.iv.unr to i32"]
	Node0x55568afce3e0[shape=record, label="  store i32 %17, i32* %minS, align 4, !tbaa !2"]
	Node0x55568afce448[shape=record, label="  br label %for.end"]
	Node0x55568afce490[shape=record, label="  ret void"]
	Node0x55568afcd388[shape=record, label="  %idxprom.i26.1 = sext i32 %13 to i64"]
	Node0x55568afce560[shape=record, label="  %arrayidx.i27.1 = getelementptr inbounds %struct.SeqStack, %struct.SeqStack* %H, i64 %indvars.iv.next, i32 0, i64 %idxprom.i26.1"]
	Node0x55568afcb7d8[shape=record, label="  %18 = load i32, i32* %arrayidx.i27.1, align 4, !tbaa !2"]
	Node0x55568afce5c8[shape=record, label="  %19 = load i32, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afce640[shape=record, label="  %cmp8.1 = icmp slt i32 %18, %19"]
	Node0x55568afce7c8[shape=record, label="  br i1 %cmp8.1, label %if.then.1, label %for.inc.1"]
	Node0x55568afce840[shape=record, label="  store i32 %18, i32* %minH, align 4, !tbaa !2"]
	Node0x55568afce738[shape=record, label="  %20 = trunc i64 %indvars.iv.next to i32"]
	Node0x55568afce8f0[shape=record, label="  store i32 %20, i32* %minS, align 4, !tbaa !2"]
	Node0x55568afce958[shape=record, label="  br label %for.inc.1"]
	Node0x55568afcea00[shape=record, label="  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2"]
	Node0x55568afcea70[shape=record, label="  %niter.nsub.1 = add i64 %niter, -2"]
	Node0x55568afceae0[shape=record, label="  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0"]
	Node0x55568afcebc8[shape=record, label="  br i1 %niter.ncmp.1, label %for.end.loopexit.unr-lcssa, label %for.body"]
	Node0x55568afcaa48 -> Node0x55568afcaac8
	Node0x55568afcaac8 -> Node0x55568afcab78
	Node0x55568afcab78 -> Node0x55568afcac08
	Node0x55568afcac08 -> Node0x55568afcaca0
	Node0x55568afcaca0 -> Node0x55568afcaeb8
	Node0x55568afcaeb8 -> Node0x55568afcaf50
	Node0x55568afcaeb8 -> Node0x55568afcb2c0
	Node0x55568afcaf50 -> Node0x55568afcb248
	Node0x55568afcb248 -> Node0x55568afcad48
	Node0x55568afcb2c0 -> Node0x55568afcb350
	Node0x55568afcb350 -> Node0x55568afcae28
	Node0x55568afcae28 -> Node0x55568afcad48
	Node0x55568afcad48 -> Node0x55568afcb3e8
	Node0x55568afcb3e8 -> Node0x55568afcb510
	Node0x55568afcb510 -> Node0x55568afcb5e0
	Node0x55568afcb5e0 -> Node0x55568afcb670
	Node0x55568afcb670 -> Node0x55568afcb6f0
	Node0x55568afcb6f0 -> Node0x55568afcb998
	Node0x55568afcb998 -> Node0x55568afce490
	Node0x55568afcb998 -> Node0x55568afcba40
	Node0x55568afcba40 -> Node0x55568afcbb00
	Node0x55568afcbb00 -> Node0x55568afcbb70
	Node0x55568afcbb70 -> Node0x55568afcbbe0
	Node0x55568afcbbe0 -> Node0x55568afcbdd8
	Node0x55568afcbdd8 -> Node0x55568afcd4c8
	Node0x55568afcbdd8 -> Node0x55568afcbd48
	Node0x55568afcbd48 -> Node0x55568afcbe38
	Node0x55568afcbe38 -> Node0x55568afcbf10
	Node0x55568afcbf10 -> Node0x55568afcc040
	Node0x55568afcc040 -> Node0x55568afcc448
	Node0x55568afcc448 -> Node0x55568afcc5a8
	Node0x55568afcc5a8 -> Node0x55568afcc738
	Node0x55568afcc738 -> Node0x55568afcc838
	Node0x55568afcc838 -> Node0x55568afcc8c8
	Node0x55568afcc8c8 -> Node0x55568afcc940
	Node0x55568afcc940 -> Node0x55568afccb98
	Node0x55568afccb98 -> Node0x55568afcd130
	Node0x55568afccb98 -> Node0x55568afccb08
	Node0x55568afccb08 -> Node0x55568afccc70
	Node0x55568afccc70 -> Node0x55568afccd08
	Node0x55568afccd08 -> Node0x55568afccd68
	Node0x55568afccd68 -> Node0x55568afccde0
	Node0x55568afccde0 -> Node0x55568afccf58
	Node0x55568afccf58 -> Node0x55568afccfd0
	Node0x55568afccf58 -> Node0x55568afcd130
	Node0x55568afccfd0 -> Node0x55568afccec8
	Node0x55568afccec8 -> Node0x55568afcd050
	Node0x55568afcd050 -> Node0x55568afcd0b8
	Node0x55568afcd0b8 -> Node0x55568afcd130
	Node0x55568afcd130 -> Node0x55568afcd218
	Node0x55568afcd218 -> Node0x55568afcca28
	Node0x55568afcca28 -> Node0x55568afcd2c0
	Node0x55568afcd2c0 -> Node0x55568afcd418
	Node0x55568afcd418 -> Node0x55568afcea00
	Node0x55568afcd418 -> Node0x55568afcd388
	Node0x55568afcd4c8 -> Node0x55568afcd590
	Node0x55568afcd590 -> Node0x55568afcd698
	Node0x55568afcd698 -> Node0x55568afce490
	Node0x55568afcd698 -> Node0x55568afcd728
	Node0x55568afcd728 -> Node0x55568afcb8e8
	Node0x55568afcb8e8 -> Node0x55568afcd7b0
	Node0x55568afcd7b0 -> Node0x55568afcd948
	Node0x55568afcd948 -> Node0x55568afce490
	Node0x55568afcd948 -> Node0x55568afcd8b8
	Node0x55568afcd8b8 -> Node0x55568afcdab0
	Node0x55568afcdab0 -> Node0x55568afcdb48
	Node0x55568afcdb48 -> Node0x55568afcdba8
	Node0x55568afcdba8 -> Node0x55568afcdc20
	Node0x55568afcdc20 -> Node0x55568afcbf98
	Node0x55568afcbf98 -> Node0x55568afce360
	Node0x55568afcbf98 -> Node0x55568afce490
	Node0x55568afce360 -> Node0x55568afce2e8
	Node0x55568afce2e8 -> Node0x55568afce3e0
	Node0x55568afce3e0 -> Node0x55568afce448
	Node0x55568afce448 -> Node0x55568afce490
	Node0x55568afcd388 -> Node0x55568afce560
	Node0x55568afce560 -> Node0x55568afcb7d8
	Node0x55568afcb7d8 -> Node0x55568afce5c8
	Node0x55568afce5c8 -> Node0x55568afce640
	Node0x55568afce640 -> Node0x55568afce7c8
	Node0x55568afce7c8 -> Node0x55568afce840
	Node0x55568afce7c8 -> Node0x55568afcea00
	Node0x55568afce840 -> Node0x55568afce738
	Node0x55568afce738 -> Node0x55568afce8f0
	Node0x55568afce8f0 -> Node0x55568afce958
	Node0x55568afce958 -> Node0x55568afcea00
	Node0x55568afcea00 -> Node0x55568afcea70
	Node0x55568afcea70 -> Node0x55568afceae0
	Node0x55568afceae0 -> Node0x55568afcebc8
	Node0x55568afcebc8 -> Node0x55568afcd4c8
	Node0x55568afcebc8 -> Node0x55568afcc5a8
edge [color=red]
	Node0x55568afca808 -> Node0x55568afcaa48[label="1"]
	Node0x55568afcaa48 -> Node0x55568afcaac8[label="2"]
	Node0x55568afcaac8 -> Node0x55568afcab78[label="3"]
	Node0x55568afcab78 -> Node0x55568afcac08[label="4"]
	Node0x55568afcac08 -> Node0x55568afcaca0[label="5"]
	Node0x55568afcaca0 -> Node0x55568afcaeb8[label="6"]
	Node0x55568afcac08 -> Node0x55568afcb2c0[label="7"]
	Node0x55568afcb2c0 -> Node0x55568afcb350[label="8"]
	Node0x55568afcb350 -> Node0x55568afcab78[label="9"]
	Node0x55568afca7e0 -> Node0x55568afcad48[label="10"]
	Node0x55568afca808 -> Node0x55568afcb3e8[label="11"]
	Node0x55568afcad48 -> Node0x55568afcb510[label="12"]
	Node0x55568afcb3e8 -> Node0x55568afcb510[label="13"]
	Node0x55568afcb5e0 -> Node0x55568afcb670[label="14"]
	Node0x55568afcb670 -> Node0x55568afca7e0[label="15"]
	Node0x55568afcb6f0 -> Node0x55568afcb998[label="16"]
	Node0x55568afcba40 -> Node0x55568afcbb00[label="17"]
	Node0x55568afcbb00 -> Node0x55568afcbb70[label="18"]
	Node0x55568afcba40 -> Node0x55568afcbbe0[label="19"]
	Node0x55568afcbbe0 -> Node0x55568afcbdd8[label="20"]
	Node0x55568afcbb70 -> Node0x55568afcbd48[label="21"]
	Node0x55568afcba40 -> Node0x55568afcbe38[label="22"]
	Node0x55568afcbd48 -> Node0x55568afcbf10[label="23"]
	Node0x55568afcbf10 -> Node0x55568afcc040[label="24"]
	Node0x55568afcbe38 -> Node0x55568afcc040[label="25"]
	Node0x55568afcea00 -> Node0x55568afcc5a8[label="26"]
	Node0x55568afcc040 -> Node0x55568afcc738[label="27"]
	Node0x55568afcea70 -> Node0x55568afcc738[label="28"]
	Node0x55568afcc5a8 -> Node0x55568afcc838[label="29"]
	Node0x55568afcc838 -> Node0x55568afcc8c8[label="30"]
	Node0x55568afcc8c8 -> Node0x55568afcc940[label="31"]
	Node0x55568afcc940 -> Node0x55568afccb98[label="32"]
	Node0x55568afcc8c8 -> Node0x55568afccb08[label="33"]
	Node0x55568afcc5a8 -> Node0x55568afccc70[label="34"]
	Node0x55568afccb08 -> Node0x55568afccc70[label="35"]
	Node0x55568afccc70 -> Node0x55568afccd08[label="36"]
	Node0x55568afca7e0 -> Node0x55568afccd68[label="37"]
	Node0x55568afccd08 -> Node0x55568afccde0[label="38"]
	Node0x55568afccd68 -> Node0x55568afccde0[label="39"]
	Node0x55568afccde0 -> Node0x55568afccf58[label="40"]
	Node0x55568afccd08 -> Node0x55568afccfd0[label="41"]
	Node0x55568afccfd0 -> Node0x55568afca7e0[label="42"]
	Node0x55568afcc5a8 -> Node0x55568afccec8[label="43"]
	Node0x55568afccec8 -> Node0x55568afcd050[label="44"]
	Node0x55568afcd050 -> Node0x55568afca808[label="45"]
	Node0x55568afcc5a8 -> Node0x55568afcd130[label="46"]
	Node0x55568afcd130 -> Node0x55568afcd218[label="47"]
	Node0x55568afcd218 -> Node0x55568afcca28[label="48"]
	Node0x55568afcca28 -> Node0x55568afcd2c0[label="49"]
	Node0x55568afcd2c0 -> Node0x55568afcd418[label="50"]
	Node0x55568afcea00 -> Node0x55568afcd4c8[label="51"]
	Node0x55568afcbb70 -> Node0x55568afcd590[label="52"]
	Node0x55568afcd590 -> Node0x55568afcd698[label="53"]
	Node0x55568afcd4c8 -> Node0x55568afcd728[label="54"]
	Node0x55568afcd728 -> Node0x55568afcb8e8[label="55"]
	Node0x55568afcb8e8 -> Node0x55568afcd7b0[label="56"]
	Node0x55568afcd7b0 -> Node0x55568afcd948[label="57"]
	Node0x55568afcb8e8 -> Node0x55568afcd8b8[label="58"]
	Node0x55568afcd4c8 -> Node0x55568afcdab0[label="59"]
	Node0x55568afcd8b8 -> Node0x55568afcdab0[label="60"]
	Node0x55568afcdab0 -> Node0x55568afcdb48[label="61"]
	Node0x55568afca7e0 -> Node0x55568afcdba8[label="62"]
	Node0x55568afcdb48 -> Node0x55568afcdc20[label="63"]
	Node0x55568afcdba8 -> Node0x55568afcdc20[label="64"]
	Node0x55568afcdc20 -> Node0x55568afcbf98[label="65"]
	Node0x55568afcdb48 -> Node0x55568afce360[label="66"]
	Node0x55568afce360 -> Node0x55568afca7e0[label="67"]
	Node0x55568afcd4c8 -> Node0x55568afce2e8[label="68"]
	Node0x55568afce2e8 -> Node0x55568afce3e0[label="69"]
	Node0x55568afce3e0 -> Node0x55568afca808[label="70"]
	Node0x55568afcca28 -> Node0x55568afcd388[label="71"]
	Node0x55568afcd130 -> Node0x55568afce560[label="72"]
	Node0x55568afcd388 -> Node0x55568afce560[label="73"]
	Node0x55568afce560 -> Node0x55568afcb7d8[label="74"]
	Node0x55568afca7e0 -> Node0x55568afce5c8[label="75"]
	Node0x55568afcb7d8 -> Node0x55568afce640[label="76"]
	Node0x55568afce5c8 -> Node0x55568afce640[label="77"]
	Node0x55568afce640 -> Node0x55568afce7c8[label="78"]
	Node0x55568afcb7d8 -> Node0x55568afce840[label="79"]
	Node0x55568afce840 -> Node0x55568afca7e0[label="80"]
	Node0x55568afcd130 -> Node0x55568afce738[label="81"]
	Node0x55568afce738 -> Node0x55568afce8f0[label="82"]
	Node0x55568afce8f0 -> Node0x55568afca808[label="83"]
	Node0x55568afcc5a8 -> Node0x55568afcea00[label="84"]
	Node0x55568afcc738 -> Node0x55568afcea70[label="85"]
	Node0x55568afcea70 -> Node0x55568afceae0[label="86"]
	Node0x55568afceae0 -> Node0x55568afcebc8[label="87"]
}
