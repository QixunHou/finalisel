digraph "CDFG for'main' function" {
	Node0x56180c7eca38[shape=record, label="  %a = alloca i32, align 4"]
	Node0x56180c7ecab8[shape=record, label="  %b = alloca i32, align 4"]
	Node0x56180c7ecb38[shape=record, label="  %0 = bitcast i32* %a to i8*"]
	Node0x56180c7ecd78[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #4"]
	Node0x56180c7ece38[shape=record, label="  %1 = bitcast i32* %b to i8*"]
	Node0x56180c7ecee8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #4"]
	Node0x56180c7ed360[shape=record, label="  %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %a, i32* nonnull %b)"]
	Node0x56180c7ed418[shape=record, label="  %2 = load i32, i32* %a, align 4, !tbaa !2"]
	Node0x56180c7ee338[shape=record, label="  %3 = load i32, i32* %b, align 4, !tbaa !2"]
	Node0x56180c7eea88[shape=record, label="  br label %while.cond.i"]
	Node0x56180c7eeb08[shape=record, label="  %b.addr.0.i = phi i32 [ %3, %entry ], [ %rem.i, %while.cond.i ]"]
	Node0x56180c7eebd8[shape=record, label="  %a.addr.0.i = phi i32 [ %2, %entry ], [ %b.addr.0.i, %while.cond.i ]"]
	Node0x56180c7eecd0[shape=record, label="  %rem.i = srem i32 %a.addr.0.i, %b.addr.0.i"]
	Node0x56180c7eed40[shape=record, label="  %tobool.i = icmp eq i32 %rem.i, 0"]
	Node0x56180c7eee48[shape=record, label="  br i1 %tobool.i, label %func.exit, label %while.cond.i"]
	Node0x56180c7ef038[shape=record, label="  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %b.addr.0.i)"]
	Node0x56180c7ef208[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #4"]
	Node0x56180c7ef318[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #4"]
	Node0x56180c7ef3d8[shape=record, label="  ret i32 0"]
	Node0x56180c7eca38 -> Node0x56180c7ecab8
	Node0x56180c7ecab8 -> Node0x56180c7ecb38
	Node0x56180c7ecb38 -> Node0x56180c7ecd78
	Node0x56180c7ecd78 -> Node0x56180c7ece38
	Node0x56180c7ece38 -> Node0x56180c7ecee8
	Node0x56180c7ecee8 -> Node0x56180c7ed360
	Node0x56180c7ed360 -> Node0x56180c7ed418
	Node0x56180c7ed418 -> Node0x56180c7ee338
	Node0x56180c7ee338 -> Node0x56180c7eea88
	Node0x56180c7eea88 -> Node0x56180c7eeb08
	Node0x56180c7eeb08 -> Node0x56180c7eebd8
	Node0x56180c7eebd8 -> Node0x56180c7eecd0
	Node0x56180c7eecd0 -> Node0x56180c7eed40
	Node0x56180c7eed40 -> Node0x56180c7eee48
	Node0x56180c7eee48 -> Node0x56180c7ef038
	Node0x56180c7eee48 -> Node0x56180c7eeb08
	Node0x56180c7ef038 -> Node0x56180c7ef208
	Node0x56180c7ef208 -> Node0x56180c7ef318
	Node0x56180c7ef318 -> Node0x56180c7ef3d8
edge [color=red]
	Node0x56180c7eca38 -> Node0x56180c7ecb38[label="1"]
	Node0x56180c7ecb38 -> Node0x56180c7ecd78[label="2"]
	Node0x56180c7ecab8 -> Node0x56180c7ece38[label="3"]
	Node0x56180c7ece38 -> Node0x56180c7ecee8[label="4"]
	Node0x56180c7eca38 -> Node0x56180c7ed360[label="5"]
	Node0x56180c7ecab8 -> Node0x56180c7ed360[label="6"]
	Node0x56180c7eca38 -> Node0x56180c7ed418[label="7"]
	Node0x56180c7ecab8 -> Node0x56180c7ee338[label="8"]
	Node0x56180c7ee338 -> Node0x56180c7eeb08[label="9"]
	Node0x56180c7eecd0 -> Node0x56180c7eeb08[label="10"]
	Node0x56180c7ed418 -> Node0x56180c7eebd8[label="11"]
	Node0x56180c7eeb08 -> Node0x56180c7eebd8[label="12"]
	Node0x56180c7eebd8 -> Node0x56180c7eecd0[label="13"]
	Node0x56180c7eeb08 -> Node0x56180c7eecd0[label="14"]
	Node0x56180c7eecd0 -> Node0x56180c7eed40[label="15"]
	Node0x56180c7eed40 -> Node0x56180c7eee48[label="16"]
	Node0x56180c7eeb08 -> Node0x56180c7ef038[label="17"]
	Node0x56180c7ece38 -> Node0x56180c7ef208[label="18"]
	Node0x56180c7ecb38 -> Node0x56180c7ef318[label="19"]
}
