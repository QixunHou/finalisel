digraph "CDFG for'func' function" {
	Node0x56128f6bf618[shape=record, label="  br label %for.body"]
	Node0x56128f6c01e8[shape=record, label="  %s.013 = phi float [ 1.000000e+00, %entry ], [ %add.1, %for.body.1 ]"]
	Node0x56128f6c09a8[shape=record, label="  %i.011.int = phi i32 [ 2, %entry ], [ %inc.int.1, %for.body.1 ]"]
	Node0x56128f6c0a88[shape=record, label="  %indvar.conv = sitofp i32 %i.011.int to float"]
	Node0x56128f6c0b90[shape=record, label="  %mul1 = fdiv float -1.000000e+00, %indvar.conv"]
	Node0x56128f6c0c00[shape=record, label="  %add = fadd float %s.013, %mul1"]
	Node0x56128f6c0cc0[shape=record, label="  %inc.int = or i32 %i.011.int, 1"]
	Node0x56128f6c0d80[shape=record, label="  %exitcond = icmp eq i32 %inc.int, 101"]
	Node0x56128f649c98[shape=record, label="  br i1 %exitcond, label %for.end, label %for.body.1"]
	Node0x56128f6c0e78[shape=record, label="  %conv2 = fpext float %add to double"]
	Node0x56128f6c1298[shape=record, label="  %call = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %conv2)"]
	Node0x56128f6c1500[shape=record, label="  ret void"]
	Node0x56128f6c0198[shape=record, label="  %indvar.conv.1 = sitofp i32 %inc.int to float"]
	Node0x56128f6c15c0[shape=record, label="  %div.1 = fdiv float 1.000000e+00, %indvar.conv.1"]
	Node0x56128f6c1630[shape=record, label="  %add.1 = fadd float %add, %div.1"]
	Node0x56128f6c16a0[shape=record, label="  %inc.int.1 = add nuw nsw i32 %i.011.int, 2"]
	Node0x56128f6c0958[shape=record, label="  br label %for.body"]
	Node0x56128f6bf618 -> Node0x56128f6c01e8
	Node0x56128f6c01e8 -> Node0x56128f6c09a8
	Node0x56128f6c09a8 -> Node0x56128f6c0a88
	Node0x56128f6c0a88 -> Node0x56128f6c0b90
	Node0x56128f6c0b90 -> Node0x56128f6c0c00
	Node0x56128f6c0c00 -> Node0x56128f6c0cc0
	Node0x56128f6c0cc0 -> Node0x56128f6c0d80
	Node0x56128f6c0d80 -> Node0x56128f649c98
	Node0x56128f649c98 -> Node0x56128f6c0e78
	Node0x56128f649c98 -> Node0x56128f6c0198
	Node0x56128f6c0e78 -> Node0x56128f6c1298
	Node0x56128f6c1298 -> Node0x56128f6c1500
	Node0x56128f6c0198 -> Node0x56128f6c15c0
	Node0x56128f6c15c0 -> Node0x56128f6c1630
	Node0x56128f6c1630 -> Node0x56128f6c16a0
	Node0x56128f6c16a0 -> Node0x56128f6c0958
	Node0x56128f6c0958 -> Node0x56128f6c01e8
edge [color=red]
	Node0x56128f6c1630 -> Node0x56128f6c01e8[label="1"]
	Node0x56128f6c16a0 -> Node0x56128f6c09a8[label="2"]
	Node0x56128f6c09a8 -> Node0x56128f6c0a88[label="3"]
	Node0x56128f6c0a88 -> Node0x56128f6c0b90[label="4"]
	Node0x56128f6c01e8 -> Node0x56128f6c0c00[label="5"]
	Node0x56128f6c0b90 -> Node0x56128f6c0c00[label="6"]
	Node0x56128f6c09a8 -> Node0x56128f6c0cc0[label="7"]
	Node0x56128f6c0cc0 -> Node0x56128f6c0d80[label="8"]
	Node0x56128f6c0d80 -> Node0x56128f649c98[label="9"]
	Node0x56128f6c0c00 -> Node0x56128f6c0e78[label="10"]
	Node0x56128f6c0e78 -> Node0x56128f6c1298[label="11"]
	Node0x56128f6c0cc0 -> Node0x56128f6c0198[label="12"]
	Node0x56128f6c0198 -> Node0x56128f6c15c0[label="13"]
	Node0x56128f6c0c00 -> Node0x56128f6c1630[label="14"]
	Node0x56128f6c15c0 -> Node0x56128f6c1630[label="15"]
	Node0x56128f6c09a8 -> Node0x56128f6c16a0[label="16"]
}
