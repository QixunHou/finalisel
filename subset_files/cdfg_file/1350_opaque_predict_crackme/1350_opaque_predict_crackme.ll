; ModuleID = '../.././c_source_file/1350_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1350_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = or i32 %9, %11
  %13 = xor i32 %1, -1
  %14 = and i32 %13, %2
  %15 = and i32 %14, %0
  %16 = xor i32 %2, %1
  %17 = or i32 %16, %0
  %18 = xor i32 %15, %17
  %19 = sub i32 %18, %12
  %20 = xor i32 %5, %4
  %21 = and i32 %20, %3
  %22 = sub i32 %19, %21
  %23 = and i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = and i32 %7, %24
  %26 = and i32 %13, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %2, %0
  %29 = and i32 %28, %27
  %30 = or i32 %2, %0
  %31 = and i32 %30, %10
  %32 = or i32 %2, %1
  %33 = or i32 %32, %0
  %34 = xor i32 %16, -1
  %35 = and i32 %34, %0
  %36 = and i32 %7, %0
  %37 = or i32 %36, %1
  %38 = or i32 %7, %1
  %39 = xor i32 %38, %0
  %40 = xor i32 %28, -1
  %41 = or i32 %40, %11
  %42 = xor i32 %0, -1
  %43 = or i32 %13, %2
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %0
  %46 = xor i32 %15, %45
  %47 = and i32 %40, %13
  %48 = xor i32 %38, %23
  %49 = and i32 %38, %42
  %50 = or i32 %13, %0
  %51 = and i32 %50, %7
  %52 = and i32 %28, %11
  %53 = and i32 %16, %0
  %54 = xor i32 %50, %2
  %55 = xor i32 %32, %0
  %56 = and i32 %8, %13
  %57 = shl i32 %56, 1
  %58 = and i32 %2, %1
  %59 = or i32 %58, %42
  %60 = xor i32 %16, %0
  %61 = xor i32 %0, 2147483647
  %62 = xor i32 %61, %43
  %63 = xor i32 %62, %15
  %64 = shl i32 %63, 1
  %65 = and i32 %11, %2
  %66 = and i32 %24, %2
  %67 = and i32 %2, %0
  %68 = or i32 %1, %0
  %69 = xor i32 %68, -1
  %70 = or i32 %67, %69
  %71 = or i32 %28, %11
  %72 = shl i32 %71, 1
  %73 = xor i32 %26, %2
  %74 = xor i32 %36, 2147483647
  %75 = and i32 %74, %13
  %76 = or i32 %34, %42
  %77 = xor i32 %68, %2
  %78 = and i32 %16, %42
  %79 = and i32 %58, %42
  %80 = xor i32 %53, -1
  %81 = xor i32 %79, %80
  %82 = and i32 %28, %10
  %83 = xor i32 %32, -1
  %84 = or i32 %23, %83
  %85 = and i32 %14, %42
  %86 = and i32 %43, %0
  %87 = or i32 %85, %86
  %88 = or i32 %83, %42
  %89 = or i32 %9, %1
  %90 = and i32 %58, %0
  %91 = xor i32 %55, -1
  %92 = xor i32 %90, %91
  %93 = and i32 %7, %1
  %94 = xor i32 %93, %27
  %95 = xor i32 %17, -1
  %96 = or i32 %15, %95
  %97 = or i32 %67, %83
  %98 = or i32 %83, %0
  %99 = xor i32 %8, %23
  %100 = or i32 %9, %13
  %101 = and i32 %16, %50
  %102 = xor i32 %23, %2
  %103 = xor i32 %30, -1
  %104 = or i32 %103, %13
  %105 = or i32 %23, %40
  %106 = or i32 %38, %42
  %107 = xor i32 %58, -1
  %108 = or i32 %107, %42
  %109 = and i32 %32, %42
  %110 = or i32 %90, %109
  %111 = and i32 %32, %0
  %112 = or i32 %79, %111
  %113 = or i32 %67, %10
  %114 = shl i32 %113, 2
  %115 = xor i32 %24, %2
  %116 = and i32 %16, %24
  %117 = and i32 %83, %42
  %118 = and i32 %93, %42
  %119 = and i32 %83, %0
  %120 = and i32 %93, %0
  %121 = mul i32 %120, -10
  %122 = xor i32 %38, -1
  %123 = and i32 %122, %42
  %124 = xor i32 %5, -1
  %125 = and i32 %4, %3
  %126 = xor i32 %125, -1
  %127 = and i32 %124, %126
  %128 = shl i32 %127, 1
  %129 = xor i32 %4, -1
  %130 = xor i32 %3, -1
  %131 = and i32 %130, %5
  %132 = and i32 %131, %129
  %133 = xor i32 %5, %3
  %134 = or i32 %133, %129
  %135 = xor i32 %132, %134
  %136 = and i32 %5, %3
  %137 = and i32 %136, %4
  %138 = xor i32 %133, 2147483647
  %139 = or i32 %138, %4
  %140 = xor i32 %139, %137
  %141 = shl i32 %140, 1
  %142 = or i32 %5, %4
  %143 = xor i32 %142, -1
  %144 = or i32 %125, %143
  %145 = xor i32 %133, -1
  %146 = or i32 %145, %4
  %147 = add i32 %4, 1
  %148 = and i32 %5, %4
  %149 = xor i32 %148, -1
  %150 = and i32 %149, %3
  %151 = xor i32 %133, %4
  %152 = xor i32 %137, %151
  %153 = and i32 %124, %3
  %154 = xor i32 %153, -1
  %155 = and i32 %154, %129
  %156 = or i32 %124, %3
  %157 = xor i32 %156, -1
  %158 = xor i32 %157, %4
  %159 = or i32 %130, %4
  %160 = and i32 %20, %159
  %161 = shl i32 %160, 1
  %162 = or i32 %4, %3
  %163 = and i32 %162, %124
  %164 = and i32 %130, %4
  %165 = xor i32 %164, -1
  %166 = and i32 %124, %165
  %167 = xor i32 %162, -1
  %168 = or i32 %133, %167
  %169 = or i32 %5, %3
  %170 = xor i32 %148, %169
  %171 = xor i32 %136, -1
  %172 = and i32 %171, %4
  %173 = and i32 %131, %4
  %174 = or i32 %133, %4
  %175 = xor i32 %174, -1
  %176 = or i32 %173, %175
  %177 = xor i32 %159, -1
  %178 = or i32 %124, %177
  %179 = or i32 %124, %4
  %180 = or i32 %136, %164
  %181 = and i32 %136, %129
  %182 = and i32 %133, %4
  %183 = xor i32 %181, -1
  %184 = xor i32 %182, %183
  %185 = or i32 %169, %129
  %186 = and i32 %169, %129
  %187 = or i32 %148, %177
  %188 = shl i32 %187, 2
  %189 = or i32 %148, %167
  %190 = shl i32 %143, 1
  %191 = and i32 %124, %4
  %192 = xor i32 %191, %156
  %193 = xor i32 %4, %3
  %194 = xor i32 %193, -1
  %195 = and i32 %142, %194
  %196 = or i32 %148, %194
  %197 = xor i32 %191, -1
  %198 = and i32 %193, %197
  %199 = or i32 %164, %5
  %200 = shl i32 %199, 1
  %201 = or i32 %20, %193
  %202 = and i32 %169, %4
  %203 = xor i32 %169, -1
  %204 = add i32 %169, 1
  %205 = or i32 %148, %203
  %206 = shl i32 %205, 1
  %207 = xor i32 %20, -1
  %208 = or i32 %207, %130
  %209 = and i32 %179, %193
  %210 = xor i32 %148, %159
  %211 = or i32 %203, %129
  %212 = shl i32 %211, 1
  %213 = and i32 %154, %4
  %214 = or i32 %181, %202
  %215 = or i32 %193, %124
  %216 = and i32 %20, %194
  %217 = shl i32 %216, 1
  %218 = or i32 %193, %143
  %219 = or i32 %191, %130
  %220 = or i32 %20, %177
  %221 = and i32 %145, %165
  %222 = and i32 %207, %3
  %223 = or i32 %137, %186
  %224 = or i32 %148, %3
  %225 = xor i32 %224, -1
  %226 = and i32 %197, %130
  %227 = or i32 %124, %167
  %228 = and i32 %145, %4
  %229 = and i32 %20, %126
  %230 = xor i32 %167, %5
  %231 = and i32 %149, %194
  %232 = xor i32 %126, %5
  %233 = xor i32 %202, %183
  %234 = xor i32 %148, %154
  %235 = or i32 %191, %194
  %236 = or i32 %143, %3
  %237 = or i32 %207, %177
  %238 = or i32 %148, %193
  %239 = or i32 %207, %167
  %240 = or i32 %207, %194
  %241 = xor i32 %142, %3
  %242 = and i32 %207, %194
  %243 = or i32 %191, %3
  %244 = shl i32 %243, 1
  %245 = and i32 %133, %126
  %246 = or i32 %193, %5
  %247 = or i32 %20, %167
  %248 = and i32 %197, %194
  %249 = or i32 %164, %207
  %250 = shl i32 %249, 1
  %251 = xor i32 %159, %5
  %252 = xor i32 %134, 2147483647
  %253 = or i32 %252, %132
  %254 = shl i32 %253, 1
  %255 = or i32 %130, %5
  %256 = xor i32 %4, 2147483647
  %257 = xor i32 %256, %255
  %258 = xor i32 %257, %173
  %259 = and i32 %203, %129
  %260 = shl i32 %259, 2
  %261 = and i32 %153, %129
  %262 = and i32 %203, %4
  %263 = mul i32 %262, 12
  %264 = and i32 %153, %4
  %265 = mul i32 %264, -7
  %266 = and i32 %157, %129
  %267 = and i32 %157, %4
  %268 = shl i32 %267, 2
  %269 = add i32 %90, %66
  %270 = sub i32 %79, %269
  %271 = add i32 %270, %33
  %272 = sub i32 %271, %110
  %273 = sub i32 %272, %151
  %274 = add i32 %273, %242
  %275 = add i32 %274, %185
  %276 = mul i32 %275, 5
  %277 = add i32 %115, %2
  %278 = add i32 %277, %119
  %279 = add i32 %278, %75
  %280 = add i32 %279, %232
  %281 = add i32 %280, %171
  %282 = add i32 %281, %258
  %283 = shl i32 %282, 1
  %284 = add i32 %230, %246
  %285 = sub i32 %284, %238
  %286 = add i32 %285, %266
  %287 = mul i32 %286, 3
  %288 = or i32 %118, %23
  %289 = shl i32 %288, 2
  %290 = sub i32 1, %26
  %291 = sub i32 %290, %25
  %292 = sub i32 %291, %51
  %293 = add i32 %292, %54
  %294 = add i32 %293, %65
  %295 = add i32 %294, %73
  %296 = add i32 %295, %40
  %297 = sub i32 %296, %77
  %298 = add i32 %297, %102
  %299 = sub i32 %298, %29
  %300 = sub i32 %299, %31
  %301 = add i32 %300, %35
  %302 = add i32 %301, %37
  %303 = add i32 %302, %39
  %304 = add i32 %303, %41
  %305 = sub i32 %304, %47
  %306 = add i32 %305, %48
  %307 = sub i32 %306, %49
  %308 = add i32 %307, %52
  %309 = add i32 %308, %53
  %310 = sub i32 %309, %55
  %311 = sub i32 %310, %59
  %312 = sub i32 %311, %60
  %313 = add i32 %312, %70
  %314 = add i32 %313, %76
  %315 = sub i32 %314, %78
  %316 = add i32 %315, %82
  %317 = sub i32 %316, %84
  %318 = add i32 %317, %88
  %319 = add i32 %318, %89
  %320 = sub i32 %319, %94
  %321 = sub i32 %320, %97
  %322 = add i32 %321, %98
  %323 = add i32 %322, %99
  %324 = add i32 %323, %100
  %325 = sub i32 %324, %101
  %326 = sub i32 %325, %104
  %327 = sub i32 %326, %105
  %328 = add i32 %327, %106
  %329 = sub i32 %328, %108
  %330 = add i32 %329, %116
  %331 = sub i32 %330, %117
  %332 = add i32 %331, %123
  %333 = add i32 %332, %147
  %334 = add i32 %333, %46
  %335 = sub i32 %334, %57
  %336 = sub i32 %335, %72
  %337 = sub i32 %336, %81
  %338 = add i32 %337, %87
  %339 = add i32 %338, %92
  %340 = sub i32 %339, %96
  %341 = sub i32 %340, %112
  %342 = sub i32 %341, %114
  %343 = add i32 %342, %121
  %344 = add i32 %343, %124
  %345 = add i32 %344, %163
  %346 = sub i32 %345, %166
  %347 = add i32 %346, %178
  %348 = add i32 %347, %179
  %349 = add i32 %348, %153
  %350 = add i32 %349, %204
  %351 = add i32 %350, %215
  %352 = add i32 %351, %227
  %353 = sub i32 %352, %20
  %354 = add i32 %353, %148
  %355 = sub i32 %354, %251
  %356 = add i32 %355, %289
  %357 = sub i32 %356, %64
  %358 = sub i32 %357, %128
  %359 = sub i32 %358, %144
  %360 = add i32 %359, %146
  %361 = add i32 %360, %150
  %362 = add i32 %361, %155
  %363 = sub i32 %362, %158
  %364 = add i32 %363, %168
  %365 = sub i32 %364, %170
  %366 = sub i32 %365, %172
  %367 = sub i32 %366, %180
  %368 = add i32 %367, %186
  %369 = add i32 %368, %189
  %370 = sub i32 %369, %190
  %371 = sub i32 %370, %192
  %372 = sub i32 %371, %195
  %373 = sub i32 %372, %196
  %374 = add i32 %373, %198
  %375 = sub i32 %374, %200
  %376 = add i32 %375, %201
  %377 = add i32 %376, %202
  %378 = add i32 %377, %208
  %379 = add i32 %378, %209
  %380 = add i32 %379, %210
  %381 = sub i32 %380, %213
  %382 = add i32 %381, %218
  %383 = add i32 %382, %174
  %384 = sub i32 %383, %219
  %385 = add i32 %384, %220
  %386 = sub i32 %385, %221
  %387 = add i32 %386, %222
  %388 = add i32 %387, %225
  %389 = sub i32 %388, %226
  %390 = add i32 %389, %228
  %391 = add i32 %390, %229
  %392 = add i32 %391, %231
  %393 = sub i32 %392, %234
  %394 = add i32 %393, %235
  %395 = sub i32 %394, %236
  %396 = add i32 %395, %237
  %397 = sub i32 %396, %239
  %398 = add i32 %397, %240
  %399 = sub i32 %398, %241
  %400 = add i32 %399, %245
  %401 = add i32 %400, %247
  %402 = sub i32 %401, %248
  %403 = sub i32 %402, %261
  %404 = add i32 %403, %137
  %405 = sub i32 %404, %135
  %406 = sub i32 %405, %152
  %407 = sub i32 %406, %161
  %408 = sub i32 %407, %176
  %409 = sub i32 %408, %184
  %410 = sub i32 %409, %188
  %411 = sub i32 %410, %206
  %412 = sub i32 %411, %212
  %413 = add i32 %412, %214
  %414 = sub i32 %413, %217
  %415 = add i32 %414, %223
  %416 = sub i32 %415, %233
  %417 = sub i32 %416, %244
  %418 = sub i32 %417, %250
  %419 = sub i32 %418, %260
  %420 = add i32 %419, %263
  %421 = add i32 %420, %265
  %422 = sub i32 %421, %268
  %423 = sub i32 %422, %141
  %424 = sub i32 %423, %254
  %425 = add i32 %424, %287
  %426 = add i32 %425, %276
  %427 = add i32 %426, %283
  %428 = icmp eq i32 %22, %427
  %429 = select i1 %428, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %430 = tail call i32 @puts(i8* nonnull dereferenceable(1) %429)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
