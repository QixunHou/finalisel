; ModuleID = '../.././c_source_file/1722_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1722_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %5, %8
  %10 = and i32 %1, %0
  %11 = or i32 %6, %10
  %12 = add i32 %9, %11
  %13 = sub i32 0, %12
  %14 = or i32 %1, %0
  %15 = and i32 %14, %2
  %16 = xor i32 %0, -1
  %17 = xor i32 %2, -1
  %18 = and i32 %17, %1
  %19 = or i32 %18, %16
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %0
  %22 = or i32 %21, %2
  %23 = and i32 %20, %2
  %24 = and i32 %23, %0
  %25 = xor i32 %24, %8
  %26 = or i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %10, %27
  %29 = and i32 %4, %16
  %30 = and i32 %26, %0
  %31 = or i32 %29, %30
  %32 = xor i32 %6, -1
  %33 = xor i32 %32, %0
  %34 = shl i32 %33, 1
  %35 = xor i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %2, %0
  %38 = and i32 %37, %36
  %39 = or i32 %2, %0
  %40 = and i32 %39, %36
  %41 = xor i32 %5, %7
  %42 = xor i32 %21, -1
  %43 = and i32 %2, %0
  %44 = or i32 %43, %27
  %45 = or i32 %20, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %46, %2
  %48 = or i32 %21, %17
  %49 = or i32 %17, %0
  %50 = xor i32 %49, %10
  %51 = xor i32 %37, -1
  %52 = and i32 %51, %20
  %53 = or i32 %4, %0
  %54 = or i32 %17, %1
  %55 = xor i32 %54, %10
  %56 = shl i32 %55, 1
  %57 = xor i32 %39, %1
  %58 = and i32 %37, %45
  %59 = and i32 %37, %42
  %60 = and i32 %23, %16
  %61 = or i32 %6, %16
  %62 = xor i32 %61, -1
  %63 = or i32 %60, %62
  %64 = and i32 %39, %20
  %65 = or i32 %20, %2
  %66 = and i32 %65, %16
  %67 = or i32 %24, %66
  %68 = shl i32 %67, 1
  %69 = xor i32 %18, -1
  %70 = xor i32 %26, %0
  %71 = or i32 %10, %2
  %72 = and i32 %32, %42
  %73 = xor i32 %43, %69
  %74 = or i32 %35, %17
  %75 = shl i32 %74, 1
  %76 = and i32 %6, %0
  %77 = xor i32 %29, -1
  %78 = xor i32 %76, %77
  %79 = xor i32 %4, -1
  %80 = xor i32 %79, %0
  %81 = shl i32 %80, 2
  %82 = or i32 %69, %16
  %83 = or i32 %37, %36
  %84 = and i32 %17, %0
  %85 = xor i32 %84, -1
  %86 = and i32 %35, %85
  %87 = or i32 %6, %0
  %88 = xor i32 %87, -1
  %89 = or i32 %24, %88
  %90 = add i32 %45, 1
  %91 = and i32 %14, %32
  %92 = or i32 %35, %51
  %93 = or i32 %79, %16
  %94 = xor i32 %4, %0
  %95 = or i32 %32, %16
  %96 = xor i32 %10, -1
  %97 = and i32 %6, %96
  %98 = or i32 %32, %46
  %99 = shl i32 %98, 1
  %100 = or i32 %54, %0
  %101 = xor i32 %60, %61
  %102 = xor i32 %54, %0
  %103 = or i32 %32, %0
  %104 = or i32 %43, %46
  %105 = xor i32 %54, -1
  %106 = xor i32 %105, %0
  %107 = or i32 %43, %18
  %108 = shl i32 %107, 1
  %109 = xor i32 %14, -1
  %110 = or i32 %37, %109
  %111 = and i32 %6, %16
  %112 = xor i32 %43, -1
  %113 = and i32 %35, %112
  %114 = or i32 %10, %32
  %115 = xor i32 %111, -1
  %116 = xor i32 %5, %115
  %117 = xor i32 %27, %0
  %118 = xor i32 %49, -1
  %119 = xor i32 %118, %1
  %120 = or i32 %5, %111
  %121 = or i32 %21, %51
  %122 = xor i32 %42, %2
  %123 = or i32 %109, %2
  %124 = or i32 %37, %21
  %125 = or i32 %37, %46
  %126 = xor i32 %21, %69
  %127 = shl i32 %126, 1
  %128 = and i32 %51, %42
  %129 = xor i32 %43, %26
  %130 = or i32 %18, %21
  %131 = shl i32 %130, 1
  %132 = and i32 %32, %16
  %133 = shl i32 %132, 1
  %134 = or i32 %27, %16
  %135 = and i32 %69, %0
  %136 = and i32 %37, %96
  %137 = or i32 %118, %36
  %138 = xor i32 %39, -1
  %139 = or i32 %10, %138
  %140 = or i32 %118, %1
  %141 = and i32 %51, %1
  %142 = or i32 %84, %36
  %143 = shl i32 %18, 1
  %144 = or i32 %51, %46
  %145 = and i32 %6, %14
  %146 = shl i32 %145, 2
  %147 = xor i32 %21, %2
  %148 = and i32 %49, %36
  %149 = and i32 %14, %51
  %150 = and i32 %37, %20
  %151 = or i32 %10, %105
  %152 = or i32 %24, %7
  %153 = xor i32 %65, %0
  %154 = xor i32 %24, -1
  %155 = xor i32 %153, %154
  %156 = xor i32 %30, %77
  %157 = or i32 %84, %1
  %158 = and i32 %45, %17
  %159 = or i32 %79, %0
  %160 = and i32 %45, %51
  %161 = or i32 %4, %21
  %162 = xor i32 %10, %2
  %163 = or i32 %43, %20
  %164 = and i32 %35, %2
  %165 = or i32 %18, %0
  %166 = shl i32 %165, 1
  %167 = or i32 %17, %36
  %168 = or i32 %17, %109
  %169 = or i32 %37, %20
  %170 = add i32 %2, 1
  %171 = xor i32 %24, %87
  %172 = xor i32 %109, %2
  %173 = or i32 %43, %109
  %174 = or i32 %105, %0
  %175 = add i32 %84, 1
  %176 = xor i32 %43, %1
  %177 = xor i32 %43, %45
  %178 = xor i32 %84, %54
  %179 = or i32 %51, %1
  %180 = and i32 %51, %96
  %181 = and i32 %37, %1
  %182 = or i32 %43, %1
  %183 = and i32 %49, %20
  %184 = and i32 %6, %45
  %185 = or i32 %24, %153
  %186 = and i32 %32, %96
  %187 = xor i32 %69, %0
  %188 = and i32 %85, %20
  %189 = or i32 %105, %16
  %190 = and i32 %37, %14
  %191 = or i32 %29, %76
  %192 = xor i32 %84, %79
  %193 = xor i32 %85, %1
  %194 = or i32 %84, %20
  %195 = or i32 %36, %2
  %196 = xor i32 %21, %79
  %197 = and i32 %51, %36
  %198 = xor i32 %66, %154
  %199 = or i32 %54, %16
  %200 = and i32 %17, %42
  %201 = shl i32 %200, 1
  %202 = and i32 %26, %16
  %203 = or i32 %5, %202
  %204 = and i32 %35, %51
  %205 = or i32 %32, %109
  %206 = or i32 %26, %16
  %207 = or i32 %84, %105
  %208 = or i32 %4, %16
  %209 = or i32 %138, %20
  %210 = shl i32 %209, 1
  %211 = and i32 %96, %2
  %212 = or i32 %6, %46
  %213 = shl i32 %212, 1
  %214 = add i32 %10, 1
  %215 = and i32 %54, %16
  %216 = and i32 %35, %17
  %217 = or i32 %6, %109
  %218 = shl i32 %217, 1
  %219 = and i32 %17, %36
  %220 = xor i32 %45, %2
  %221 = or i32 %138, %1
  %222 = and i32 %27, %16
  %223 = shl i32 %222, 2
  %224 = and i32 %18, %16
  %225 = and i32 %105, %16
  %226 = mul i32 %225, -7
  %227 = shl i32 %29, 2
  %228 = and i32 %105, %0
  %229 = shl i32 %228, 3
  %230 = shl i32 %5, 4
  %231 = add i32 %216, %36
  %232 = add i32 %231, %211
  %233 = add i32 %232, %6
  %234 = add i32 %233, %202
  %235 = add i32 %234, %215
  %236 = add i32 %235, %208
  %237 = add i32 %236, %174
  %238 = add i32 %237, %159
  %239 = add i32 %238, %150
  %240 = add i32 %239, %141
  %241 = add i32 %240, %134
  %242 = add i32 %241, %61
  %243 = add i32 %242, %125
  %244 = add i32 %243, %117
  %245 = add i32 %244, %95
  %246 = add i32 %245, %59
  %247 = add i32 %246, %53
  %248 = add i32 %247, %31
  %249 = add i32 %248, %101
  %250 = shl i32 %249, 1
  %251 = sub i32 %180, %181
  %252 = add i32 %251, %91
  %253 = mul i32 %252, 5
  %254 = sub i32 %0, %224
  %255 = mul i32 %254, 3
  %256 = sub i32 -2, %0
  %257 = add i32 %256, %42
  %258 = sub i32 %257, %35
  %259 = add i32 %258, %90
  %260 = sub i32 %259, %2
  %261 = add i32 %260, %10
  %262 = add i32 %261, %170
  %263 = add i32 %262, %45
  %264 = add i32 %263, %109
  %265 = add i32 %264, %214
  %266 = sub i32 %265, %15
  %267 = sub i32 %266, %22
  %268 = sub i32 %267, %47
  %269 = add i32 %268, %48
  %270 = add i32 %269, %69
  %271 = sub i32 %270, %71
  %272 = add i32 %271, %32
  %273 = sub i32 %272, %49
  %274 = add i32 %273, %122
  %275 = sub i32 %274, %123
  %276 = add i32 %275, %84
  %277 = sub i32 %276, %147
  %278 = sub i32 %277, %37
  %279 = sub i32 %278, %158
  %280 = add i32 %279, %51
  %281 = add i32 %280, %162
  %282 = add i32 %281, %164
  %283 = sub i32 %282, %167
  %284 = sub i32 %283, %168
  %285 = sub i32 %284, %172
  %286 = add i32 %285, %175
  %287 = add i32 %286, %39
  %288 = add i32 %287, %118
  %289 = sub i32 %288, %195
  %290 = add i32 %289, %219
  %291 = sub i32 %290, %220
  %292 = add i32 %291, %19
  %293 = sub i32 %292, %28
  %294 = sub i32 %293, %38
  %295 = sub i32 %294, %40
  %296 = sub i32 %295, %44
  %297 = add i32 %296, %50
  %298 = sub i32 %297, %52
  %299 = sub i32 %298, %57
  %300 = sub i32 %299, %58
  %301 = sub i32 %300, %64
  %302 = add i32 %301, %70
  %303 = sub i32 %302, %72
  %304 = add i32 %303, %73
  %305 = sub i32 %304, %75
  %306 = add i32 %305, %82
  %307 = add i32 %306, %83
  %308 = add i32 %307, %86
  %309 = sub i32 %308, %92
  %310 = sub i32 %309, %93
  %311 = sub i32 %310, %94
  %312 = sub i32 %311, %97
  %313 = add i32 %312, %100
  %314 = sub i32 %313, %102
  %315 = sub i32 %314, %103
  %316 = add i32 %315, %104
  %317 = add i32 %316, %106
  %318 = add i32 %317, %110
  %319 = sub i32 %318, %111
  %320 = sub i32 %319, %113
  %321 = add i32 %320, %114
  %322 = add i32 %321, %119
  %323 = sub i32 %322, %121
  %324 = add i32 %323, %124
  %325 = sub i32 %324, %128
  %326 = sub i32 %325, %129
  %327 = sub i32 %326, %135
  %328 = sub i32 %327, %136
  %329 = sub i32 %328, %137
  %330 = sub i32 %329, %139
  %331 = add i32 %330, %140
  %332 = add i32 %331, %142
  %333 = sub i32 %332, %143
  %334 = sub i32 %333, %144
  %335 = sub i32 %334, %76
  %336 = add i32 %335, %148
  %337 = add i32 %336, %149
  %338 = sub i32 %337, %151
  %339 = sub i32 %338, %7
  %340 = add i32 %339, %157
  %341 = sub i32 %340, %160
  %342 = sub i32 %341, %161
  %343 = add i32 %342, %163
  %344 = sub i32 %343, %169
  %345 = add i32 %344, %173
  %346 = sub i32 %345, %176
  %347 = add i32 %346, %177
  %348 = add i32 %347, %178
  %349 = add i32 %348, %179
  %350 = add i32 %349, %182
  %351 = add i32 %350, %183
  %352 = sub i32 %351, %184
  %353 = sub i32 %352, %186
  %354 = add i32 %353, %187
  %355 = add i32 %354, %188
  %356 = sub i32 %355, %189
  %357 = add i32 %356, %190
  %358 = sub i32 %357, %192
  %359 = sub i32 %358, %193
  %360 = sub i32 %359, %194
  %361 = add i32 %360, %196
  %362 = sub i32 %361, %197
  %363 = sub i32 %362, %199
  %364 = sub i32 %363, %201
  %365 = add i32 %364, %204
  %366 = sub i32 %365, %205
  %367 = add i32 %366, %206
  %368 = sub i32 %367, %207
  %369 = add i32 %368, %221
  %370 = sub i32 %369, %25
  %371 = sub i32 %370, %34
  %372 = sub i32 %371, %41
  %373 = sub i32 %372, %56
  %374 = sub i32 %373, %63
  %375 = sub i32 %374, %78
  %376 = add i32 %375, %81
  %377 = add i32 %376, %89
  %378 = sub i32 %377, %99
  %379 = sub i32 %378, %108
  %380 = sub i32 %379, %116
  %381 = sub i32 %380, %120
  %382 = sub i32 %381, %127
  %383 = sub i32 %382, %131
  %384 = sub i32 %383, %133
  %385 = sub i32 %384, %146
  %386 = sub i32 %385, %152
  %387 = add i32 %386, %155
  %388 = add i32 %387, %156
  %389 = sub i32 %388, %166
  %390 = sub i32 %389, %171
  %391 = sub i32 %390, %185
  %392 = add i32 %391, %191
  %393 = add i32 %392, %198
  %394 = sub i32 %393, %203
  %395 = sub i32 %394, %210
  %396 = sub i32 %395, %213
  %397 = sub i32 %396, %218
  %398 = sub i32 %397, %223
  %399 = add i32 %398, %226
  %400 = sub i32 %399, %227
  %401 = add i32 %400, %229
  %402 = sub i32 %401, %230
  %403 = sub i32 %402, %68
  %404 = add i32 %403, %255
  %405 = add i32 %404, %253
  %406 = add i32 %405, %250
  %407 = icmp eq i32 %406, %13
  %408 = select i1 %407, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %409 = tail call i32 @puts(i8* nonnull dereferenceable(1) %408)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
