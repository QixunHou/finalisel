digraph "DFG for'crackme' function" {
	Node0x1703a90[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x1703b00[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1703bc0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x1703c30[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x1703ca0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1703d10[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0x1703db0[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0x1703e20[shape=record, label="  %10 = and i32 %3, %1"];
	Node0x1703ec0[shape=record, label="  %11 = mul i32 %10, -3"];
	Node0x1703f60[shape=record, label="  %12 = shl i32 %5, 1"];
	Node0x1703fd0[shape=record, label="  %13 = shl i32 %6, 2"];
	Node0x1704040[shape=record, label="  %14 = sub i32 -3, %5"];
	Node0x17040b0[shape=record, label="  %15 = add i32 %14, %6"];
	Node0x1704120[shape=record, label="  %16 = sub i32 %15, %7"];
	Node0x1704190[shape=record, label="  %17 = add i32 %16, %11"];
	Node0x1704200[shape=record, label="  %18 = sub i32 %17, %12"];
	Node0x1704270[shape=record, label="  %19 = sub i32 %18, %13"];
	Node0x17042e0[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0x1704350[shape=record, label="  %21 = icmp eq i32 %20, 1"];
	Node0x16a4268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x17047f0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x1704840[shape=record, label="  ret void"];
	Node0x1703a90 -> Node0x1703b00;
	Node0x1703b00 -> Node0x1703bc0;
	Node0x1703bc0 -> Node0x1703c30;
	Node0x1703c30 -> Node0x1703ca0;
	Node0x1703ca0 -> Node0x1703d10;
	Node0x1703d10 -> Node0x1703db0;
	Node0x1703db0 -> Node0x1703e20;
	Node0x1703e20 -> Node0x1703ec0;
	Node0x1703ec0 -> Node0x1703f60;
	Node0x1703f60 -> Node0x1703fd0;
	Node0x1703fd0 -> Node0x1704040;
	Node0x1704040 -> Node0x17040b0;
	Node0x17040b0 -> Node0x1704120;
	Node0x1704120 -> Node0x1704190;
	Node0x1704190 -> Node0x1704200;
	Node0x1704200 -> Node0x1704270;
	Node0x1704270 -> Node0x17042e0;
	Node0x17042e0 -> Node0x1704350;
	Node0x1704350 -> Node0x16a4268;
	Node0x16a4268 -> Node0x17047f0;
	Node0x17047f0 -> Node0x1704840;
edge [color=red]
	Node0x1703b00 -> Node0x1703bc0;
	Node0x1703ca0 -> Node0x1703d10;
	Node0x1703d10 -> Node0x1703db0;
	Node0x1703a90 -> Node0x1703e20;
	Node0x1703e20 -> Node0x1703ec0;
	Node0x1703bc0 -> Node0x1703f60;
	Node0x1703c30 -> Node0x1703fd0;
	Node0x1703bc0 -> Node0x1704040;
	Node0x1704040 -> Node0x17040b0;
	Node0x1703c30 -> Node0x17040b0;
	Node0x17040b0 -> Node0x1704120;
	Node0x1703ca0 -> Node0x1704120;
	Node0x1704120 -> Node0x1704190;
	Node0x1703ec0 -> Node0x1704190;
	Node0x1704190 -> Node0x1704200;
	Node0x1703f60 -> Node0x1704200;
	Node0x1704200 -> Node0x1704270;
	Node0x1703fd0 -> Node0x1704270;
	Node0x1704270 -> Node0x17042e0;
	Node0x1703db0 -> Node0x17042e0;
	Node0x17042e0 -> Node0x1704350;
	Node0x1704350 -> Node0x16a4268;
	Node0x16a4268 -> Node0x17047f0;
}
