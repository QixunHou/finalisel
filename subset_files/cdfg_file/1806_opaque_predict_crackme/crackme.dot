digraph "DFG for'crackme' function" {
	Node0x61c570[shape=record, label="  %4 = and i32 %2, %0"];
	Node0x61c630[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x61c6a0[shape=record, label="  %6 = or i32 %4, %5"];
	Node0x61cd20[shape=record, label="  %7 = add i32 %6, 1"];
	Node0x61cd90[shape=record, label="  %8 = or i32 %4, %1"];
	Node0x61ce00[shape=record, label="  %9 = add i32 %7, %8"];
	Node0x61ce70[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x61cf10[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x61cf80[shape=record, label="  %12 = xor i32 %2, -1"];
	Node0x61cff0[shape=record, label="  %13 = or i32 %5, %12"];
	Node0x61d060[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x61d0d0[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x61d140[shape=record, label="  %16 = xor i32 %15, %2"];
	Node0x61d1b0[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x61d220[shape=record, label="  %18 = and i32 %17, %0"];
	Node0x61d290[shape=record, label="  %19 = xor i32 %2, %1"];
	Node0x61d300[shape=record, label="  %20 = and i32 %19, %15"];
	Node0x61d370[shape=record, label="  %21 = or i32 %18, %20"];
	Node0x61d3e0[shape=record, label="  %22 = and i32 %11, %15"];
	Node0x61d480[shape=record, label="  %23 = mul i32 %22, -5"];
	Node0x61d4f0[shape=record, label="  %24 = and i32 %12, %1"];
	Node0x61d560[shape=record, label="  %25 = and i32 %24, %15"];
	Node0x61d600[shape=record, label="  %26 = mul i32 %25, -3"];
	Node0x61d670[shape=record, label="  %27 = and i32 %11, %0"];
	Node0x61d6e0[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x61d750[shape=record, label="  %29 = and i32 %24, %0"];
	Node0x61d7c0[shape=record, label="  %30 = xor i32 %1, -1"];
	Node0x61d830[shape=record, label="  %31 = and i32 %30, %2"];
	Node0x61d8a0[shape=record, label="  %32 = and i32 %31, %15"];
	Node0x61db20[shape=record, label="  %33 = shl i32 %32, 1"];
	Node0x61db90[shape=record, label="  %34 = and i32 %17, %15"];
	Node0x61dc00[shape=record, label="  %35 = and i32 %31, %0"];
	Node0x61dc70[shape=record, label="  %36 = sub i32 %11, %0"];
	Node0x61dce0[shape=record, label="  %37 = add i32 %36, %16"];
	Node0x61dd50[shape=record, label="  %38 = add i32 %37, %14"];
	Node0x61ddc0[shape=record, label="  %39 = sub i32 %38, %29"];
	Node0x61de30[shape=record, label="  %40 = sub i32 %39, %34"];
	Node0x61dea0[shape=record, label="  %41 = sub i32 %40, %35"];
	Node0x61df10[shape=record, label="  %42 = add i32 %41, %21"];
	Node0x61df80[shape=record, label="  %43 = add i32 %42, %23"];
	Node0x61dff0[shape=record, label="  %44 = add i32 %43, %26"];
	Node0x61e060[shape=record, label="  %45 = sub i32 %44, %28"];
	Node0x61e0d0[shape=record, label="  %46 = sub i32 %45, %33"];
	Node0x61e140[shape=record, label="  %47 = icmp eq i32 %9, %46"];
	Node0x5bd268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x61e5e0[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0x61e630[shape=record, label="  ret void"];
	Node0x61c570 -> Node0x61c630;
	Node0x61c630 -> Node0x61c6a0;
	Node0x61c6a0 -> Node0x61cd20;
	Node0x61cd20 -> Node0x61cd90;
	Node0x61cd90 -> Node0x61ce00;
	Node0x61ce00 -> Node0x61ce70;
	Node0x61ce70 -> Node0x61cf10;
	Node0x61cf10 -> Node0x61cf80;
	Node0x61cf80 -> Node0x61cff0;
	Node0x61cff0 -> Node0x61d060;
	Node0x61d060 -> Node0x61d0d0;
	Node0x61d0d0 -> Node0x61d140;
	Node0x61d140 -> Node0x61d1b0;
	Node0x61d1b0 -> Node0x61d220;
	Node0x61d220 -> Node0x61d290;
	Node0x61d290 -> Node0x61d300;
	Node0x61d300 -> Node0x61d370;
	Node0x61d370 -> Node0x61d3e0;
	Node0x61d3e0 -> Node0x61d480;
	Node0x61d480 -> Node0x61d4f0;
	Node0x61d4f0 -> Node0x61d560;
	Node0x61d560 -> Node0x61d600;
	Node0x61d600 -> Node0x61d670;
	Node0x61d670 -> Node0x61d6e0;
	Node0x61d6e0 -> Node0x61d750;
	Node0x61d750 -> Node0x61d7c0;
	Node0x61d7c0 -> Node0x61d830;
	Node0x61d830 -> Node0x61d8a0;
	Node0x61d8a0 -> Node0x61db20;
	Node0x61db20 -> Node0x61db90;
	Node0x61db90 -> Node0x61dc00;
	Node0x61dc00 -> Node0x61dc70;
	Node0x61dc70 -> Node0x61dce0;
	Node0x61dce0 -> Node0x61dd50;
	Node0x61dd50 -> Node0x61ddc0;
	Node0x61ddc0 -> Node0x61de30;
	Node0x61de30 -> Node0x61dea0;
	Node0x61dea0 -> Node0x61df10;
	Node0x61df10 -> Node0x61df80;
	Node0x61df80 -> Node0x61dff0;
	Node0x61dff0 -> Node0x61e060;
	Node0x61e060 -> Node0x61e0d0;
	Node0x61e0d0 -> Node0x61e140;
	Node0x61e140 -> Node0x5bd268;
	Node0x5bd268 -> Node0x61e5e0;
	Node0x61e5e0 -> Node0x61e630;
edge [color=red]
	Node0x61c570 -> Node0x61c6a0;
	Node0x61c630 -> Node0x61c6a0;
	Node0x61c6a0 -> Node0x61cd20;
	Node0x61c570 -> Node0x61cd90;
	Node0x61cd20 -> Node0x61ce00;
	Node0x61cd90 -> Node0x61ce00;
	Node0x61ce70 -> Node0x61cf10;
	Node0x61c630 -> Node0x61cff0;
	Node0x61cf80 -> Node0x61cff0;
	Node0x61cff0 -> Node0x61d060;
	Node0x61d0d0 -> Node0x61d140;
	Node0x61d1b0 -> Node0x61d220;
	Node0x61d290 -> Node0x61d300;
	Node0x61d0d0 -> Node0x61d300;
	Node0x61d220 -> Node0x61d370;
	Node0x61d300 -> Node0x61d370;
	Node0x61cf10 -> Node0x61d3e0;
	Node0x61d0d0 -> Node0x61d3e0;
	Node0x61d3e0 -> Node0x61d480;
	Node0x61cf80 -> Node0x61d4f0;
	Node0x61d4f0 -> Node0x61d560;
	Node0x61d0d0 -> Node0x61d560;
	Node0x61d560 -> Node0x61d600;
	Node0x61cf10 -> Node0x61d670;
	Node0x61d670 -> Node0x61d6e0;
	Node0x61d4f0 -> Node0x61d750;
	Node0x61d7c0 -> Node0x61d830;
	Node0x61d830 -> Node0x61d8a0;
	Node0x61d0d0 -> Node0x61d8a0;
	Node0x61d8a0 -> Node0x61db20;
	Node0x61d1b0 -> Node0x61db90;
	Node0x61d0d0 -> Node0x61db90;
	Node0x61d830 -> Node0x61dc00;
	Node0x61cf10 -> Node0x61dc70;
	Node0x61dc70 -> Node0x61dce0;
	Node0x61d140 -> Node0x61dce0;
	Node0x61dce0 -> Node0x61dd50;
	Node0x61d060 -> Node0x61dd50;
	Node0x61dd50 -> Node0x61ddc0;
	Node0x61d750 -> Node0x61ddc0;
	Node0x61ddc0 -> Node0x61de30;
	Node0x61db90 -> Node0x61de30;
	Node0x61de30 -> Node0x61dea0;
	Node0x61dc00 -> Node0x61dea0;
	Node0x61dea0 -> Node0x61df10;
	Node0x61d370 -> Node0x61df10;
	Node0x61df10 -> Node0x61df80;
	Node0x61d480 -> Node0x61df80;
	Node0x61df80 -> Node0x61dff0;
	Node0x61d600 -> Node0x61dff0;
	Node0x61dff0 -> Node0x61e060;
	Node0x61d6e0 -> Node0x61e060;
	Node0x61e060 -> Node0x61e0d0;
	Node0x61db20 -> Node0x61e0d0;
	Node0x61ce00 -> Node0x61e140;
	Node0x61e0d0 -> Node0x61e140;
	Node0x61e140 -> Node0x5bd268;
	Node0x5bd268 -> Node0x61e5e0;
}
