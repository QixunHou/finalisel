digraph "DFG for'crackme' function" {
	Node0x2370b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2370b90[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x2370c50[shape=record, label="  %5 = add i32 %4, 1"];
	Node0x2370cc0[shape=record, label="  %6 = shl i32 %3, 1"];
	Node0x2370d30[shape=record, label="  %7 = add i32 %5, %6"];
	Node0x2370da0[shape=record, label="  %8 = or i32 %3, %0"];
	Node0x2370e10[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x2370e80[shape=record, label="  %10 = shl i32 %1, 1"];
	Node0x2370ef0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x2370f60[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x2371000[shape=record, label="  %13 = mul i32 %12, 6"];
	Node0x2371070[shape=record, label="  %14 = xor i32 %8, -1"];
	Node0x2371110[shape=record, label="  %15 = mul i32 %4, 7"];
	Node0x2371180[shape=record, label="  %16 = add i32 %9, %14"];
	Node0x2371220[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x23712c0[shape=record, label="  %18 = sub i32 4, %8"];
	Node0x2371330[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x23713a0[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0x2371410[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x2371480[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x23714f0[shape=record, label="  %23 = add i32 %22, %17"];
	Node0x2371560[shape=record, label="  %24 = icmp eq i32 %7, %23"];
	Node0x2311268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2371a00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x2371a50[shape=record, label="  ret void"];
	Node0x2370b20 -> Node0x2370b90;
	Node0x2370b90 -> Node0x2370c50;
	Node0x2370c50 -> Node0x2370cc0;
	Node0x2370cc0 -> Node0x2370d30;
	Node0x2370d30 -> Node0x2370da0;
	Node0x2370da0 -> Node0x2370e10;
	Node0x2370e10 -> Node0x2370e80;
	Node0x2370e80 -> Node0x2370ef0;
	Node0x2370ef0 -> Node0x2370f60;
	Node0x2370f60 -> Node0x2371000;
	Node0x2371000 -> Node0x2371070;
	Node0x2371070 -> Node0x2371110;
	Node0x2371110 -> Node0x2371180;
	Node0x2371180 -> Node0x2371220;
	Node0x2371220 -> Node0x23712c0;
	Node0x23712c0 -> Node0x2371330;
	Node0x2371330 -> Node0x23713a0;
	Node0x23713a0 -> Node0x2371410;
	Node0x2371410 -> Node0x2371480;
	Node0x2371480 -> Node0x23714f0;
	Node0x23714f0 -> Node0x2371560;
	Node0x2371560 -> Node0x2311268;
	Node0x2311268 -> Node0x2371a00;
	Node0x2371a00 -> Node0x2371a50;
edge [color=red]
	Node0x2370b20 -> Node0x2370b90;
	Node0x2370b90 -> Node0x2370c50;
	Node0x2370b20 -> Node0x2370cc0;
	Node0x2370c50 -> Node0x2370d30;
	Node0x2370cc0 -> Node0x2370d30;
	Node0x2370b20 -> Node0x2370da0;
	Node0x2370ef0 -> Node0x2370f60;
	Node0x2370f60 -> Node0x2371000;
	Node0x2370da0 -> Node0x2371070;
	Node0x2370b90 -> Node0x2371110;
	Node0x2370e10 -> Node0x2371180;
	Node0x2371070 -> Node0x2371180;
	Node0x2371180 -> Node0x2371220;
	Node0x2370da0 -> Node0x23712c0;
	Node0x23712c0 -> Node0x2371330;
	Node0x2370e10 -> Node0x2371330;
	Node0x2371330 -> Node0x23713a0;
	Node0x2370e80 -> Node0x23713a0;
	Node0x23713a0 -> Node0x2371410;
	Node0x2371000 -> Node0x2371410;
	Node0x2371410 -> Node0x2371480;
	Node0x2371110 -> Node0x2371480;
	Node0x2371480 -> Node0x23714f0;
	Node0x2371220 -> Node0x23714f0;
	Node0x2370d30 -> Node0x2371560;
	Node0x23714f0 -> Node0x2371560;
	Node0x2371560 -> Node0x2311268;
	Node0x2311268 -> Node0x2371a00;
}
