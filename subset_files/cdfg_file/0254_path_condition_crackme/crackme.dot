digraph "DFG for'crackme' function" {
	Node0x1c7d2d0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1c7d980[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1c7da40[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x1c7dab0[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1c7db20[shape=record, label="  %7 = sub i32 %6, %3"];
	Node0x1c7db90[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1c7dc00[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1c7dc70[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1c7dce0[shape=record, label="  %11 = add i32 %8, %10"];
	Node0x1c7dd50[shape=record, label="  %12 = sub i32 %11, %5"];
	Node0x1c7ddc0[shape=record, label="  %13 = icmp eq i32 %7, %12"];
	Node0x1c1e388[shape=record, label="  %14 = select i1 %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c7e230[shape=record, label="  %15 = tail call i32 @puts(i8* nonnull dereferenceable(1) %14)"];
	Node0x1c7e280[shape=record, label="  ret void"];
	Node0x1c7d2d0 -> Node0x1c7d980;
	Node0x1c7d980 -> Node0x1c7da40;
	Node0x1c7da40 -> Node0x1c7dab0;
	Node0x1c7dab0 -> Node0x1c7db20;
	Node0x1c7db20 -> Node0x1c7db90;
	Node0x1c7db90 -> Node0x1c7dc00;
	Node0x1c7dc00 -> Node0x1c7dc70;
	Node0x1c7dc70 -> Node0x1c7dce0;
	Node0x1c7dce0 -> Node0x1c7dd50;
	Node0x1c7dd50 -> Node0x1c7ddc0;
	Node0x1c7ddc0 -> Node0x1c1e388;
	Node0x1c1e388 -> Node0x1c7e230;
	Node0x1c7e230 -> Node0x1c7e280;
edge [color=red]
	Node0x1c7d980 -> Node0x1c7da40;
	Node0x1c7da40 -> Node0x1c7dab0;
	Node0x1c7dab0 -> Node0x1c7db20;
	Node0x1c7d2d0 -> Node0x1c7db20;
	Node0x1c7dc00 -> Node0x1c7dc70;
	Node0x1c7db90 -> Node0x1c7dce0;
	Node0x1c7dc70 -> Node0x1c7dce0;
	Node0x1c7dce0 -> Node0x1c7dd50;
	Node0x1c7da40 -> Node0x1c7dd50;
	Node0x1c7db20 -> Node0x1c7ddc0;
	Node0x1c7dd50 -> Node0x1c7ddc0;
	Node0x1c7ddc0 -> Node0x1c1e388;
	Node0x1c1e388 -> Node0x1c7e230;
}
