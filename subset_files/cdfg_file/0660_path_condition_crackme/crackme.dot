digraph "DFG for'crackme' function" {
	Node0x21d3d30[shape=record, label="  %5 = shl i32 %2, 1"];
	Node0x21d3da0[shape=record, label="  %6 = add i32 %5, %1"];
	Node0x21d3e40[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x21d3eb0[shape=record, label="  %8 = or i32 %7, %3"];
	Node0x21d3f20[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x21d3f90[shape=record, label="  %10 = sub i32 %6, %9"];
	Node0x21d4000[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x21d4070[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x21d40e0[shape=record, label="  %13 = and i32 %11, %1"];
	Node0x21d4150[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x21d41c0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x21d4230[shape=record, label="  %16 = or i32 %11, %1"];
	Node0x21d42a0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x21d4310[shape=record, label="  %18 = shl i32 %13, 1"];
	Node0x21d4380[shape=record, label="  %19 = or i32 %3, %0"];
	Node0x21d43f0[shape=record, label="  %20 = shl i32 %3, 1"];
	Node0x21d4460[shape=record, label="  %21 = add i32 %3, 1"];
	Node0x21d44d0[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x21d4540[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x21d45b0[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x21d4650[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x21d46c0[shape=record, label="  %26 = xor i32 %8, -1"];
	Node0x21d4730[shape=record, label="  %27 = and i32 %7, %3"];
	Node0x21d47a0[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x21d4840[shape=record, label="  %29 = shl i32 %23, 2"];
	Node0x21d48b0[shape=record, label="  %30 = add i32 %14, %21"];
	Node0x21d4920[shape=record, label="  %31 = add i32 %30, %26"];
	Node0x21d49c0[shape=record, label="  %32 = mul i32 %31, 3"];
	Node0x21d4c40[shape=record, label="  %33 = add i32 %22, %12"];
	Node0x21d4cb0[shape=record, label="  %34 = shl i32 %33, 1"];
	Node0x21d4d20[shape=record, label="  %35 = sub i32 3, %0"];
	Node0x21d4d90[shape=record, label="  %36 = add i32 %35, %7"];
	Node0x21d4e00[shape=record, label="  %37 = add i32 %36, %11"];
	Node0x21d4e70[shape=record, label="  %38 = add i32 %37, %13"];
	Node0x21d4ee0[shape=record, label="  %39 = add i32 %38, %15"];
	Node0x21d4f50[shape=record, label="  %40 = add i32 %39, %16"];
	Node0x21d4fc0[shape=record, label="  %41 = sub i32 %40, %17"];
	Node0x21d5030[shape=record, label="  %42 = sub i32 %41, %18"];
	Node0x21d50a0[shape=record, label="  %43 = sub i32 %42, %19"];
	Node0x21d5110[shape=record, label="  %44 = sub i32 %43, %20"];
	Node0x21d5180[shape=record, label="  %45 = sub i32 %44, %28"];
	Node0x21d51f0[shape=record, label="  %46 = add i32 %45, %29"];
	Node0x21d5260[shape=record, label="  %47 = add i32 %46, %25"];
	Node0x21d52d0[shape=record, label="  %48 = add i32 %47, %34"];
	Node0x21d5340[shape=record, label="  %49 = add i32 %48, %32"];
	Node0x21d53b0[shape=record, label="  %50 = icmp eq i32 %10, %49"];
	Node0x2174268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x21d5850[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x21d58a0[shape=record, label="  ret void"];
	Node0x21d3d30 -> Node0x21d3da0;
	Node0x21d3da0 -> Node0x21d3e40;
	Node0x21d3e40 -> Node0x21d3eb0;
	Node0x21d3eb0 -> Node0x21d3f20;
	Node0x21d3f20 -> Node0x21d3f90;
	Node0x21d3f90 -> Node0x21d4000;
	Node0x21d4000 -> Node0x21d4070;
	Node0x21d4070 -> Node0x21d40e0;
	Node0x21d40e0 -> Node0x21d4150;
	Node0x21d4150 -> Node0x21d41c0;
	Node0x21d41c0 -> Node0x21d4230;
	Node0x21d4230 -> Node0x21d42a0;
	Node0x21d42a0 -> Node0x21d4310;
	Node0x21d4310 -> Node0x21d4380;
	Node0x21d4380 -> Node0x21d43f0;
	Node0x21d43f0 -> Node0x21d4460;
	Node0x21d4460 -> Node0x21d44d0;
	Node0x21d44d0 -> Node0x21d4540;
	Node0x21d4540 -> Node0x21d45b0;
	Node0x21d45b0 -> Node0x21d4650;
	Node0x21d4650 -> Node0x21d46c0;
	Node0x21d46c0 -> Node0x21d4730;
	Node0x21d4730 -> Node0x21d47a0;
	Node0x21d47a0 -> Node0x21d4840;
	Node0x21d4840 -> Node0x21d48b0;
	Node0x21d48b0 -> Node0x21d4920;
	Node0x21d4920 -> Node0x21d49c0;
	Node0x21d49c0 -> Node0x21d4c40;
	Node0x21d4c40 -> Node0x21d4cb0;
	Node0x21d4cb0 -> Node0x21d4d20;
	Node0x21d4d20 -> Node0x21d4d90;
	Node0x21d4d90 -> Node0x21d4e00;
	Node0x21d4e00 -> Node0x21d4e70;
	Node0x21d4e70 -> Node0x21d4ee0;
	Node0x21d4ee0 -> Node0x21d4f50;
	Node0x21d4f50 -> Node0x21d4fc0;
	Node0x21d4fc0 -> Node0x21d5030;
	Node0x21d5030 -> Node0x21d50a0;
	Node0x21d50a0 -> Node0x21d5110;
	Node0x21d5110 -> Node0x21d5180;
	Node0x21d5180 -> Node0x21d51f0;
	Node0x21d51f0 -> Node0x21d5260;
	Node0x21d5260 -> Node0x21d52d0;
	Node0x21d52d0 -> Node0x21d5340;
	Node0x21d5340 -> Node0x21d53b0;
	Node0x21d53b0 -> Node0x2174268;
	Node0x2174268 -> Node0x21d5850;
	Node0x21d5850 -> Node0x21d58a0;
edge [color=red]
	Node0x21d3d30 -> Node0x21d3da0;
	Node0x21d3e40 -> Node0x21d3eb0;
	Node0x21d3eb0 -> Node0x21d3f20;
	Node0x21d3da0 -> Node0x21d3f90;
	Node0x21d3f20 -> Node0x21d3f90;
	Node0x21d4000 -> Node0x21d40e0;
	Node0x21d4150 -> Node0x21d41c0;
	Node0x21d4000 -> Node0x21d4230;
	Node0x21d4230 -> Node0x21d42a0;
	Node0x21d40e0 -> Node0x21d4310;
	Node0x21d4540 -> Node0x21d45b0;
	Node0x21d45b0 -> Node0x21d4650;
	Node0x21d3eb0 -> Node0x21d46c0;
	Node0x21d3e40 -> Node0x21d4730;
	Node0x21d4730 -> Node0x21d47a0;
	Node0x21d4540 -> Node0x21d4840;
	Node0x21d4150 -> Node0x21d48b0;
	Node0x21d4460 -> Node0x21d48b0;
	Node0x21d48b0 -> Node0x21d4920;
	Node0x21d46c0 -> Node0x21d4920;
	Node0x21d4920 -> Node0x21d49c0;
	Node0x21d44d0 -> Node0x21d4c40;
	Node0x21d4070 -> Node0x21d4c40;
	Node0x21d4c40 -> Node0x21d4cb0;
	Node0x21d4d20 -> Node0x21d4d90;
	Node0x21d3e40 -> Node0x21d4d90;
	Node0x21d4d90 -> Node0x21d4e00;
	Node0x21d4000 -> Node0x21d4e00;
	Node0x21d4e00 -> Node0x21d4e70;
	Node0x21d40e0 -> Node0x21d4e70;
	Node0x21d4e70 -> Node0x21d4ee0;
	Node0x21d41c0 -> Node0x21d4ee0;
	Node0x21d4ee0 -> Node0x21d4f50;
	Node0x21d4230 -> Node0x21d4f50;
	Node0x21d4f50 -> Node0x21d4fc0;
	Node0x21d42a0 -> Node0x21d4fc0;
	Node0x21d4fc0 -> Node0x21d5030;
	Node0x21d4310 -> Node0x21d5030;
	Node0x21d5030 -> Node0x21d50a0;
	Node0x21d4380 -> Node0x21d50a0;
	Node0x21d50a0 -> Node0x21d5110;
	Node0x21d43f0 -> Node0x21d5110;
	Node0x21d5110 -> Node0x21d5180;
	Node0x21d47a0 -> Node0x21d5180;
	Node0x21d5180 -> Node0x21d51f0;
	Node0x21d4840 -> Node0x21d51f0;
	Node0x21d51f0 -> Node0x21d5260;
	Node0x21d4650 -> Node0x21d5260;
	Node0x21d5260 -> Node0x21d52d0;
	Node0x21d4cb0 -> Node0x21d52d0;
	Node0x21d52d0 -> Node0x21d5340;
	Node0x21d49c0 -> Node0x21d5340;
	Node0x21d3f90 -> Node0x21d53b0;
	Node0x21d5340 -> Node0x21d53b0;
	Node0x21d53b0 -> Node0x2174268;
	Node0x2174268 -> Node0x21d5850;
}
