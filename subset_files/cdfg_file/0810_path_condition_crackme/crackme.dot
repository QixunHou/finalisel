digraph "DFG for'crackme' function" {
	Node0x16ea570[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x16eac20[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x16eace0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x16ead50[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x16eadc0[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x16eae30[shape=record, label="  %8 = xor i32 %7, %1"];
	Node0x16eaea0[shape=record, label="  %9 = or i32 %4, %0"];
	Node0x16eaf10[shape=record, label="  %10 = shl i32 %4, 1"];
	Node0x16eaf80[shape=record, label="  %11 = shl i32 %3, 1"];
	Node0x16eb020[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x16eb090[shape=record, label="  %13 = shl i32 %9, 1"];
	Node0x16eb100[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x16eb170[shape=record, label="  %15 = shl i32 %5, 1"];
	Node0x16eb1e0[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x16eb280[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0x16eb2f0[shape=record, label="  %18 = add i32 %7, %1"];
	Node0x16eb360[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x16eb3d0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x16eb440[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x16eb4b0[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x16eb520[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x16eb590[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x16eb600[shape=record, label="  %25 = sub i32 %24, %12"];
	Node0x16eb670[shape=record, label="  %26 = sub i32 %25, %14"];
	Node0x16eb6e0[shape=record, label="  %27 = icmp eq i32 %3, %26"];
	Node0x168b268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16ebb80[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x16ebbd0[shape=record, label="  ret void"];
	Node0x16ea570 -> Node0x16eac20;
	Node0x16eac20 -> Node0x16eace0;
	Node0x16eace0 -> Node0x16ead50;
	Node0x16ead50 -> Node0x16eadc0;
	Node0x16eadc0 -> Node0x16eae30;
	Node0x16eae30 -> Node0x16eaea0;
	Node0x16eaea0 -> Node0x16eaf10;
	Node0x16eaf10 -> Node0x16eaf80;
	Node0x16eaf80 -> Node0x16eb020;
	Node0x16eb020 -> Node0x16eb090;
	Node0x16eb090 -> Node0x16eb100;
	Node0x16eb100 -> Node0x16eb170;
	Node0x16eb170 -> Node0x16eb1e0;
	Node0x16eb1e0 -> Node0x16eb280;
	Node0x16eb280 -> Node0x16eb2f0;
	Node0x16eb2f0 -> Node0x16eb360;
	Node0x16eb360 -> Node0x16eb3d0;
	Node0x16eb3d0 -> Node0x16eb440;
	Node0x16eb440 -> Node0x16eb4b0;
	Node0x16eb4b0 -> Node0x16eb520;
	Node0x16eb520 -> Node0x16eb590;
	Node0x16eb590 -> Node0x16eb600;
	Node0x16eb600 -> Node0x16eb670;
	Node0x16eb670 -> Node0x16eb6e0;
	Node0x16eb6e0 -> Node0x168b268;
	Node0x168b268 -> Node0x16ebb80;
	Node0x16ebb80 -> Node0x16ebbd0;
edge [color=red]
	Node0x16eac20 -> Node0x16eace0;
	Node0x16eace0 -> Node0x16ead50;
	Node0x16eadc0 -> Node0x16eae30;
	Node0x16eac20 -> Node0x16eaea0;
	Node0x16eac20 -> Node0x16eaf10;
	Node0x16ea570 -> Node0x16eaf80;
	Node0x16eaf80 -> Node0x16eb020;
	Node0x16eaea0 -> Node0x16eb090;
	Node0x16eb090 -> Node0x16eb100;
	Node0x16eace0 -> Node0x16eb170;
	Node0x16eb1e0 -> Node0x16eb280;
	Node0x16eadc0 -> Node0x16eb2f0;
	Node0x16eb2f0 -> Node0x16eb360;
	Node0x16ead50 -> Node0x16eb360;
	Node0x16eb360 -> Node0x16eb3d0;
	Node0x16eae30 -> Node0x16eb3d0;
	Node0x16eb3d0 -> Node0x16eb440;
	Node0x16eaea0 -> Node0x16eb440;
	Node0x16eb440 -> Node0x16eb4b0;
	Node0x16eaf10 -> Node0x16eb4b0;
	Node0x16eb4b0 -> Node0x16eb520;
	Node0x16eb170 -> Node0x16eb520;
	Node0x16eb520 -> Node0x16eb590;
	Node0x16eb280 -> Node0x16eb590;
	Node0x16eb590 -> Node0x16eb600;
	Node0x16eb020 -> Node0x16eb600;
	Node0x16eb600 -> Node0x16eb670;
	Node0x16eb100 -> Node0x16eb670;
	Node0x16ea570 -> Node0x16eb6e0;
	Node0x16eb670 -> Node0x16eb6e0;
	Node0x16eb6e0 -> Node0x168b268;
	Node0x168b268 -> Node0x16ebb80;
}
