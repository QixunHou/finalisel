digraph "DFG for'crackme' function" {
	Node0x20b3010[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x20b30b0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x20b3120[shape=record, label="  %7 = and i32 %2, %1"];
	Node0x20b3190[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x20b3200[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x20b3270[shape=record, label="  %10 = shl i32 %3, 1"];
	Node0x20b32e0[shape=record, label="  %11 = sub i32 %9, %10"];
	Node0x20b3380[shape=record, label="  %12 = xor i32 %1, 2147483647"];
	Node0x20b33f0[shape=record, label="  %13 = and i32 %12, %2"];
	Node0x20b3460[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x20b34d0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x20b3570[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x20b35e0[shape=record, label="  %17 = and i32 %5, %1"];
	Node0x20b3680[shape=record, label="  %18 = shl i32 %17, 2"];
	Node0x20b36f0[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0x20b3760[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x20b37d0[shape=record, label="  %21 = and i32 %20, %3"];
	Node0x20b3840[shape=record, label="  %22 = xor i32 %3, -1"];
	Node0x20b38b0[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x20b3920[shape=record, label="  %24 = shl i32 %21, 2"];
	Node0x20b3990[shape=record, label="  %25 = sub i32 %13, %0"];
	Node0x20b3a00[shape=record, label="  %26 = add i32 %25, %23"];
	Node0x20b3a70[shape=record, label="  %27 = add i32 %26, %19"];
	Node0x20b3ae0[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x20b3b50[shape=record, label="  %29 = sub i32 1, %14"];
	Node0x20b3bc0[shape=record, label="  %30 = add i32 %29, %7"];
	Node0x20b3c30[shape=record, label="  %31 = add i32 %30, %22"];
	Node0x20b3ca0[shape=record, label="  %32 = add i32 %31, %16"];
	Node0x20b3f20[shape=record, label="  %33 = add i32 %32, %18"];
	Node0x20b3f90[shape=record, label="  %34 = add i32 %33, %21"];
	Node0x20b4000[shape=record, label="  %35 = sub i32 %34, %23"];
	Node0x20b4070[shape=record, label="  %36 = sub i32 %35, %24"];
	Node0x20b40e0[shape=record, label="  %37 = add i32 %36, %28"];
	Node0x20b4150[shape=record, label="  %38 = icmp eq i32 %11, %37"];
	Node0x2053268[shape=record, label="  %39 = select i1 %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x20b45f0[shape=record, label="  %40 = tail call i32 @puts(i8* nonnull dereferenceable(1) %39)"];
	Node0x20b4640[shape=record, label="  ret void"];
	Node0x20b3010 -> Node0x20b30b0;
	Node0x20b30b0 -> Node0x20b3120;
	Node0x20b3120 -> Node0x20b3190;
	Node0x20b3190 -> Node0x20b3200;
	Node0x20b3200 -> Node0x20b3270;
	Node0x20b3270 -> Node0x20b32e0;
	Node0x20b32e0 -> Node0x20b3380;
	Node0x20b3380 -> Node0x20b33f0;
	Node0x20b33f0 -> Node0x20b3460;
	Node0x20b3460 -> Node0x20b34d0;
	Node0x20b34d0 -> Node0x20b3570;
	Node0x20b3570 -> Node0x20b35e0;
	Node0x20b35e0 -> Node0x20b3680;
	Node0x20b3680 -> Node0x20b36f0;
	Node0x20b36f0 -> Node0x20b3760;
	Node0x20b3760 -> Node0x20b37d0;
	Node0x20b37d0 -> Node0x20b3840;
	Node0x20b3840 -> Node0x20b38b0;
	Node0x20b38b0 -> Node0x20b3920;
	Node0x20b3920 -> Node0x20b3990;
	Node0x20b3990 -> Node0x20b3a00;
	Node0x20b3a00 -> Node0x20b3a70;
	Node0x20b3a70 -> Node0x20b3ae0;
	Node0x20b3ae0 -> Node0x20b3b50;
	Node0x20b3b50 -> Node0x20b3bc0;
	Node0x20b3bc0 -> Node0x20b3c30;
	Node0x20b3c30 -> Node0x20b3ca0;
	Node0x20b3ca0 -> Node0x20b3f20;
	Node0x20b3f20 -> Node0x20b3f90;
	Node0x20b3f90 -> Node0x20b4000;
	Node0x20b4000 -> Node0x20b4070;
	Node0x20b4070 -> Node0x20b40e0;
	Node0x20b40e0 -> Node0x20b4150;
	Node0x20b4150 -> Node0x2053268;
	Node0x2053268 -> Node0x20b45f0;
	Node0x20b45f0 -> Node0x20b4640;
edge [color=red]
	Node0x20b3010 -> Node0x20b30b0;
	Node0x20b3120 -> Node0x20b3190;
	Node0x20b30b0 -> Node0x20b3200;
	Node0x20b3190 -> Node0x20b3200;
	Node0x20b3200 -> Node0x20b32e0;
	Node0x20b3270 -> Node0x20b32e0;
	Node0x20b3380 -> Node0x20b33f0;
	Node0x20b3460 -> Node0x20b34d0;
	Node0x20b34d0 -> Node0x20b3570;
	Node0x20b3010 -> Node0x20b35e0;
	Node0x20b35e0 -> Node0x20b3680;
	Node0x20b3760 -> Node0x20b37d0;
	Node0x20b37d0 -> Node0x20b3920;
	Node0x20b33f0 -> Node0x20b3990;
	Node0x20b3990 -> Node0x20b3a00;
	Node0x20b38b0 -> Node0x20b3a00;
	Node0x20b3a00 -> Node0x20b3a70;
	Node0x20b36f0 -> Node0x20b3a70;
	Node0x20b3a70 -> Node0x20b3ae0;
	Node0x20b3460 -> Node0x20b3b50;
	Node0x20b3b50 -> Node0x20b3bc0;
	Node0x20b3120 -> Node0x20b3bc0;
	Node0x20b3bc0 -> Node0x20b3c30;
	Node0x20b3840 -> Node0x20b3c30;
	Node0x20b3c30 -> Node0x20b3ca0;
	Node0x20b3570 -> Node0x20b3ca0;
	Node0x20b3ca0 -> Node0x20b3f20;
	Node0x20b3680 -> Node0x20b3f20;
	Node0x20b3f20 -> Node0x20b3f90;
	Node0x20b37d0 -> Node0x20b3f90;
	Node0x20b3f90 -> Node0x20b4000;
	Node0x20b38b0 -> Node0x20b4000;
	Node0x20b4000 -> Node0x20b4070;
	Node0x20b3920 -> Node0x20b4070;
	Node0x20b4070 -> Node0x20b40e0;
	Node0x20b3ae0 -> Node0x20b40e0;
	Node0x20b32e0 -> Node0x20b4150;
	Node0x20b40e0 -> Node0x20b4150;
	Node0x20b4150 -> Node0x2053268;
	Node0x2053268 -> Node0x20b45f0;
}
