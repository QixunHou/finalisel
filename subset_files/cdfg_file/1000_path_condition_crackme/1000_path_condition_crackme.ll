; ModuleID = '../.././c_source_file/1000_path_condition_crackme.c'
source_filename = "../.././c_source_file/1000_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %2, %1
  %11 = and i32 %10, %9
  %12 = xor i32 %2, -1
  %13 = or i32 %12, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %14, %1
  %16 = sub i32 %11, %15
  %17 = xor i32 %3, -1
  %18 = or i32 %17, %4
  %19 = and i32 %18, %5
  %20 = sub i32 %16, %19
  %21 = xor i32 %5, -1
  %22 = and i32 %21, %4
  %23 = xor i32 %22, -1
  %24 = xor i32 %4, %3
  %25 = xor i32 %24, -1
  %26 = and i32 %23, %25
  %27 = sub i32 %20, %26
  %28 = and i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %29, %2
  %31 = or i32 %12, %1
  %32 = or i32 %31, %0
  %33 = or i32 %1, %0
  %34 = xor i32 %10, -1
  %35 = and i32 %33, %34
  %36 = xor i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %29
  %39 = xor i32 %1, %0
  %40 = and i32 %39, %12
  %41 = and i32 %2, %0
  %42 = or i32 %41, %7
  %43 = xor i32 %0, -1
  %44 = and i32 %12, %1
  %45 = or i32 %44, %43
  %46 = and i32 %12, %0
  %47 = xor i32 %46, -1
  %48 = add i32 %46, 1
  %49 = and i32 %7, %2
  %50 = and i32 %49, %0
  %51 = or i32 %10, %0
  %52 = xor i32 %50, %51
  %53 = xor i32 %39, -1
  %54 = and i32 %47, %53
  %55 = and i32 %33, %2
  %56 = or i32 %36, %7
  %57 = xor i32 %44, -1
  %58 = xor i32 %8, %57
  %59 = shl i32 %58, 1
  %60 = and i32 %2, %1
  %61 = or i32 %60, %0
  %62 = and i32 %29, %2
  %63 = or i32 %2, %0
  %64 = xor i32 %63, %28
  %65 = and i32 %60, %0
  %66 = or i32 %2, %1
  %67 = and i32 %66, %43
  %68 = xor i32 %67, -1
  %69 = xor i32 %65, %68
  %70 = or i32 %7, %0
  %71 = and i32 %70, %12
  %72 = xor i32 %33, -1
  %73 = or i32 %72, %2
  %74 = and i32 %39, %2
  %75 = xor i32 %63, -1
  %76 = xor i32 %75, %1
  %77 = and i32 %34, %43
  %78 = and i32 %36, %39
  %79 = and i32 %37, %7
  %80 = and i32 %53, %2
  %81 = or i32 %36, %8
  %82 = and i32 %39, %47
  %83 = xor i32 %70, -1
  %84 = shl i32 %83, 1
  %85 = or i32 %28, %37
  %86 = xor i32 %66, -1
  %87 = add i32 %66, 1
  %88 = and i32 %36, %33
  %89 = xor i32 %9, %2
  %90 = or i32 %41, %39
  %91 = and i32 %34, %29
  %92 = or i32 %41, %1
  %93 = or i32 %46, %39
  %94 = xor i32 %46, %31
  %95 = xor i32 %60, -1
  %96 = and i32 %95, %43
  %97 = or i32 %46, %1
  %98 = or i32 %14, %1
  %99 = or i32 %8, %37
  %100 = xor i32 %31, -1
  %101 = or i32 %36, %83
  %102 = and i32 %63, %1
  %103 = or i32 %37, %72
  %104 = or i32 %66, %43
  %105 = xor i32 %41, -1
  %106 = and i32 %105, %7
  %107 = or i32 %39, %14
  %108 = or i32 %10, %72
  %109 = or i32 %28, %2
  %110 = xor i32 %70, %2
  %111 = or i32 %46, %60
  %112 = shl i32 %111, 1
  %113 = or i32 %28, %86
  %114 = or i32 %8, %34
  %115 = xor i32 %10, %0
  %116 = xor i32 %115, -1
  %117 = xor i32 %50, %116
  %118 = or i32 %10, %8
  %119 = or i32 %37, %7
  %120 = and i32 %95, %0
  %121 = and i32 %12, %29
  %122 = shl i32 %121, 1
  %123 = or i32 %57, %43
  %124 = or i32 %75, %1
  %125 = or i32 %86, %0
  %126 = xor i32 %86, %0
  %127 = and i32 %60, %43
  %128 = and i32 %10, %0
  %129 = or i32 %127, %128
  %130 = shl i32 %36, 1
  %131 = or i32 %10, %43
  %132 = and i32 %70, %34
  %133 = and i32 %33, %12
  %134 = or i32 %7, %2
  %135 = and i32 %134, %43
  %136 = or i32 %50, %135
  %137 = shl i32 %136, 1
  %138 = xor i32 %46, %95
  %139 = or i32 %39, %75
  %140 = and i32 %9, %2
  %141 = or i32 %44, %0
  %142 = or i32 %36, %1
  %143 = or i32 %14, %53
  %144 = and i32 %49, %43
  %145 = and i32 %134, %0
  %146 = xor i32 %145, 2147483647
  %147 = xor i32 %146, %144
  %148 = or i32 %100, %43
  %149 = and i32 %47, %1
  %150 = and i32 %33, %37
  %151 = or i32 %12, %72
  %152 = shl i32 %151, 1
  %153 = or i32 %36, %28
  %154 = or i32 %39, %2
  %155 = or i32 %53, %2
  %156 = xor i32 %33, %2
  %157 = xor i32 %28, %2
  %158 = xor i32 %66, %0
  %159 = or i32 %46, %53
  %160 = xor i32 %31, %28
  %161 = and i32 %66, %0
  %162 = xor i32 %41, %57
  %163 = or i32 %60, %8
  %164 = or i32 %37, %53
  %165 = xor i32 %66, %28
  %166 = shl i32 %165, 1
  %167 = or i32 %36, %53
  %168 = or i32 %36, %39
  %169 = xor i32 %161, -1
  %170 = xor i32 %127, %169
  %171 = and i32 %39, %37
  %172 = and i32 %105, %1
  %173 = add i32 %63, 1
  %174 = or i32 %95, %43
  %175 = or i32 %12, %53
  %176 = shl i32 %175, 1
  %177 = or i32 %14, %7
  %178 = add i32 %44, 1
  %179 = and i32 %86, %43
  %180 = mul i32 %179, 12
  %181 = and i32 %86, %0
  %182 = and i32 %44, %0
  %183 = mul i32 %182, -18
  %184 = and i32 %100, %43
  %185 = and i32 %100, %0
  %186 = mul i32 %65, -20
  %187 = or i32 %5, %4
  %188 = and i32 %187, %24
  %189 = xor i32 %18, -1
  %190 = xor i32 %5, %3
  %191 = or i32 %190, %189
  %192 = and i32 %5, %4
  %193 = or i32 %5, %3
  %194 = xor i32 %192, %193
  %195 = and i32 %5, %3
  %196 = xor i32 %195, -1
  %197 = xor i32 %196, %4
  %198 = and i32 %4, %3
  %199 = xor i32 %190, -1
  %200 = or i32 %198, %199
  %201 = or i32 %21, %3
  %202 = xor i32 %201, -1
  %203 = or i32 %22, %202
  %204 = xor i32 %198, -1
  %205 = xor i32 %5, %4
  %206 = and i32 %205, %204
  %207 = or i32 %199, %189
  %208 = and i32 %21, %3
  %209 = xor i32 %208, %4
  %210 = xor i32 %208, -1
  %211 = xor i32 %192, %210
  %212 = and i32 %205, %24
  %213 = and i32 %195, %4
  %214 = xor i32 %4, -1
  %215 = and i32 %190, %214
  %216 = xor i32 %213, -1
  %217 = xor i32 %215, %216
  %218 = or i32 %21, %4
  %219 = and i32 %218, %17
  %220 = xor i32 %205, -1
  %221 = and i32 %18, %220
  %222 = and i32 %195, %214
  %223 = and i32 %193, %4
  %224 = or i32 %222, %223
  %225 = or i32 %205, %25
  %226 = and i32 %220, %17
  %227 = and i32 %220, %3
  %228 = and i32 %17, %4
  %229 = or i32 %208, %228
  %230 = xor i32 %192, %3
  %231 = or i32 %210, %4
  %232 = and i32 %190, %18
  %233 = xor i32 %218, -1
  %234 = add i32 %218, 1
  %235 = or i32 %22, %195
  %236 = and i32 %17, %5
  %237 = and i32 %236, %4
  %238 = or i32 %17, %5
  %239 = xor i32 %238, %4
  %240 = or i32 %237, %239
  %241 = xor i32 %198, %5
  %242 = xor i32 %237, -1
  %243 = xor i32 %239, %242
  %244 = xor i32 %199, %4
  %245 = or i32 %228, %220
  %246 = xor i32 %22, %201
  %247 = or i32 %190, %228
  %248 = xor i32 %193, %4
  %249 = or i32 %201, %4
  %250 = and i32 %23, %3
  %251 = or i32 %22, %3
  %252 = or i32 %196, %214
  %253 = or i32 %196, %4
  %254 = and i32 %236, %214
  %255 = and i32 %238, %4
  %256 = or i32 %254, %255
  %257 = and i32 %190, %4
  %258 = or i32 %24, %220
  %259 = or i32 %192, %25
  %260 = shl i32 %259, 1
  %261 = or i32 %21, %25
  %262 = xor i32 %22, %3
  %263 = xor i32 %190, %4
  %264 = or i32 %192, %3
  %265 = and i32 %238, %214
  %266 = xor i32 %265, %242
  %267 = and i32 %205, %25
  %268 = and i32 %24, %220
  %269 = and i32 %199, %4
  %270 = and i32 %205, %17
  %271 = or i32 %190, %4
  %272 = xor i32 %237, %271
  %273 = or i32 %22, %24
  %274 = shl i32 %273, 1
  %275 = xor i32 %228, %210
  %276 = xor i32 %187, -1
  %277 = xor i32 %276, %3
  %278 = or i32 %205, %3
  %279 = or i32 %21, %189
  %280 = or i32 %195, %228
  %281 = xor i32 %22, %196
  %282 = xor i32 %193, -1
  %283 = or i32 %192, %282
  %284 = xor i32 %222, -1
  %285 = xor i32 %223, %284
  %286 = or i32 %4, %3
  %287 = xor i32 %286, -1
  %288 = or i32 %287, %5
  %289 = add i32 %286, 1
  %290 = xor i32 %228, -1
  %291 = and i32 %205, %290
  %292 = or i32 %198, %5
  %293 = xor i32 %213, %263
  %294 = and i32 %190, %290
  %295 = xor i32 %282, %4
  %296 = or i32 %237, %265
  %297 = or i32 %208, %4
  %298 = or i32 %220, %25
  %299 = or i32 %199, %214
  %300 = and i32 %196, %214
  %301 = add i32 %201, 1
  %302 = and i32 %220, %204
  %303 = and i32 %187, %3
  %304 = or i32 %190, %214
  %305 = xor i32 %304, -1
  %306 = or i32 %254, %305
  %307 = xor i32 %257, %284
  %308 = or i32 %220, %189
  %309 = or i32 %202, %214
  %310 = or i32 %220, %287
  %311 = xor i32 %189, %5
  %312 = or i32 %282, %214
  %313 = and i32 %201, %4
  %314 = shl i32 %313, 1
  %315 = xor i32 %193, %198
  %316 = or i32 %195, %4
  %317 = shl i32 %316, 1
  %318 = xor i32 %271, -1
  %319 = or i32 %237, %318
  %320 = or i32 %198, %282
  %321 = or i32 %193, %214
  %322 = or i32 %213, %215
  %323 = or i32 %228, %5
  %324 = shl i32 %323, 1
  %325 = or i32 %190, %287
  %326 = or i32 %21, %287
  %327 = xor i32 %248, %216
  %328 = or i32 %233, %3
  %329 = and i32 %187, %17
  %330 = xor i32 %228, %196
  %331 = and i32 %218, %25
  %332 = and i32 %199, %214
  %333 = xor i32 %192, -1
  %334 = and i32 %24, %333
  %335 = or i32 %210, %214
  %336 = or i32 %193, %4
  %337 = shl i32 %336, 1
  %338 = or i32 %222, %257
  %339 = or i32 %276, %3
  %340 = and i32 %24, %23
  %341 = xor i32 %287, %5
  %342 = or i32 %276, %25
  %343 = shl i32 %342, 1
  %344 = or i32 %192, %287
  %345 = or i32 %205, %189
  %346 = and i32 %220, %25
  %347 = xor i32 %218, %198
  %348 = or i32 %228, %199
  %349 = and i32 %218, %3
  %350 = and i32 %25, %5
  %351 = and i32 %220, %290
  %352 = and i32 %286, %21
  %353 = shl i32 %352, 1
  %354 = and i32 %218, %24
  %355 = or i32 %205, %228
  %356 = and i32 %24, %5
  %357 = xor i32 %187, %198
  %358 = and i32 %205, %3
  %359 = and i32 %23, %17
  %360 = and i32 %187, %25
  %361 = or i32 %22, %25
  %362 = or i32 %195, %214
  %363 = and i32 %282, %214
  %364 = mul i32 %363, -15
  %365 = and i32 %208, %214
  %366 = and i32 %282, %4
  %367 = mul i32 %366, 9
  %368 = and i32 %208, %4
  %369 = and i32 %202, %214
  %370 = shl i32 %369, 2
  %371 = sub i32 %181, %215
  %372 = add i32 %371, %329
  %373 = sub i32 %372, %309
  %374 = sub i32 %373, %225
  %375 = add i32 %374, %293
  %376 = sub i32 %375, %322
  %377 = mul i32 %376, 3
  %378 = add i32 %123, %9
  %379 = sub i32 %378, %119
  %380 = add i32 %379, %321
  %381 = add i32 %380, %365
  %382 = add i32 %381, %267
  %383 = add i32 %382, %232
  %384 = mul i32 %383, 5
  %385 = add i32 %143, %109
  %386 = add i32 %385, %355
  %387 = shl i32 %386, 2
  %388 = sub i32 %222, %185
  %389 = mul i32 %388, 10
  %390 = sub i32 %213, %127
  %391 = mul i32 %390, 14
  %392 = add i32 %157, -1
  %393 = add i32 %392, %74
  %394 = sub i32 %393, %30
  %395 = add i32 %394, %153
  %396 = add i32 %395, %150
  %397 = add i32 %396, %132
  %398 = add i32 %397, %118
  %399 = add i32 %398, %114
  %400 = add i32 %399, %92
  %401 = add i32 %400, %290
  %402 = add i32 %401, %52
  %403 = add i32 %402, %282
  %404 = add i32 %403, %350
  %405 = add i32 %404, %220
  %406 = add i32 %405, %22
  %407 = add i32 %406, %147
  %408 = add i32 %407, %347
  %409 = add i32 %408, %271
  %410 = add i32 %409, %325
  %411 = add i32 %410, %299
  %412 = add i32 %411, %283
  %413 = add i32 %412, %258
  %414 = add i32 %413, %244
  %415 = add i32 %414, %296
  %416 = shl i32 %415, 1
  %417 = sub i32 1, %28
  %418 = sub i32 %417, %70
  %419 = sub i32 %418, %40
  %420 = add i32 %419, %48
  %421 = add i32 %420, %55
  %422 = add i32 %421, %62
  %423 = add i32 %422, %71
  %424 = add i32 %423, %73
  %425 = add i32 %424, %41
  %426 = sub i32 %425, %44
  %427 = add i32 %426, %13
  %428 = sub i32 %427, %80
  %429 = sub i32 %428, %84
  %430 = add i32 %429, %87
  %431 = sub i32 %430, %89
  %432 = sub i32 %431, %46
  %433 = add i32 %432, %110
  %434 = add i32 %433, %133
  %435 = sub i32 %434, %140
  %436 = add i32 %435, %154
  %437 = add i32 %436, %155
  %438 = add i32 %437, %156
  %439 = add i32 %438, %173
  %440 = add i32 %439, %60
  %441 = add i32 %440, %178
  %442 = sub i32 %441, %3
  %443 = add i32 %442, %17
  %444 = add i32 %443, %32
  %445 = add i32 %444, %35
  %446 = sub i32 %445, %38
  %447 = sub i32 %446, %42
  %448 = sub i32 %447, %45
  %449 = sub i32 %448, %54
  %450 = sub i32 %449, %56
  %451 = sub i32 %450, %61
  %452 = sub i32 %451, %64
  %453 = sub i32 %452, %76
  %454 = sub i32 %453, %77
  %455 = add i32 %454, %78
  %456 = sub i32 %455, %79
  %457 = sub i32 %456, %67
  %458 = add i32 %457, %81
  %459 = sub i32 %458, %82
  %460 = add i32 %459, %85
  %461 = add i32 %460, %88
  %462 = add i32 %461, %90
  %463 = sub i32 %462, %91
  %464 = add i32 %463, %93
  %465 = add i32 %464, %94
  %466 = sub i32 %465, %96
  %467 = add i32 %466, %97
  %468 = add i32 %467, %98
  %469 = sub i32 %468, %99
  %470 = add i32 %469, %101
  %471 = sub i32 %470, %102
  %472 = add i32 %471, %103
  %473 = add i32 %472, %104
  %474 = sub i32 %473, %106
  %475 = sub i32 %474, %107
  %476 = add i32 %475, %108
  %477 = add i32 %476, %113
  %478 = add i32 %477, %120
  %479 = sub i32 %478, %122
  %480 = sub i32 %479, %124
  %481 = sub i32 %480, %125
  %482 = add i32 %481, %126
  %483 = sub i32 %482, %130
  %484 = add i32 %483, %131
  %485 = sub i32 %484, %138
  %486 = add i32 %485, %139
  %487 = add i32 %486, %141
  %488 = sub i32 %487, %142
  %489 = sub i32 %488, %148
  %490 = sub i32 %489, %149
  %491 = sub i32 %490, %152
  %492 = add i32 %491, %51
  %493 = add i32 %492, %158
  %494 = sub i32 %493, %159
  %495 = sub i32 %494, %160
  %496 = add i32 %495, %161
  %497 = add i32 %496, %162
  %498 = sub i32 %497, %163
  %499 = sub i32 %498, %164
  %500 = sub i32 %499, %167
  %501 = sub i32 %500, %168
  %502 = sub i32 %501, %171
  %503 = sub i32 %502, %172
  %504 = sub i32 %503, %174
  %505 = sub i32 %504, %176
  %506 = sub i32 %505, %177
  %507 = add i32 %506, %115
  %508 = sub i32 %507, %184
  %509 = sub i32 %508, %4
  %510 = add i32 %509, %214
  %511 = sub i32 %510, %59
  %512 = sub i32 %511, %69
  %513 = sub i32 %512, %112
  %514 = sub i32 %513, %117
  %515 = sub i32 %514, %129
  %516 = sub i32 %515, %166
  %517 = sub i32 %516, %170
  %518 = add i32 %517, %180
  %519 = add i32 %518, %183
  %520 = add i32 %519, %186
  %521 = sub i32 %520, %228
  %522 = sub i32 %521, %5
  %523 = add i32 %522, %289
  %524 = sub i32 %523, %18
  %525 = sub i32 %524, %286
  %526 = sub i32 %525, %137
  %527 = sub i32 %526, %208
  %528 = add i32 %527, %234
  %529 = sub i32 %528, %241
  %530 = add i32 %529, %261
  %531 = sub i32 %530, %195
  %532 = sub i32 %531, %218
  %533 = add i32 %532, %279
  %534 = add i32 %533, %288
  %535 = add i32 %534, %292
  %536 = add i32 %535, %301
  %537 = sub i32 %536, %311
  %538 = add i32 %537, %205
  %539 = add i32 %538, %326
  %540 = sub i32 %539, %192
  %541 = sub i32 %540, %341
  %542 = add i32 %541, %276
  %543 = sub i32 %542, %356
  %544 = add i32 %543, %188
  %545 = sub i32 %544, %191
  %546 = sub i32 %545, %194
  %547 = sub i32 %546, %197
  %548 = sub i32 %547, %200
  %549 = sub i32 %548, %203
  %550 = add i32 %549, %206
  %551 = add i32 %550, %207
  %552 = add i32 %551, %209
  %553 = sub i32 %552, %211
  %554 = sub i32 %553, %212
  %555 = sub i32 %554, %219
  %556 = sub i32 %555, %221
  %557 = add i32 %556, %226
  %558 = add i32 %557, %227
  %559 = sub i32 %558, %229
  %560 = add i32 %559, %230
  %561 = sub i32 %560, %231
  %562 = sub i32 %561, %235
  %563 = sub i32 %562, %245
  %564 = add i32 %563, %246
  %565 = sub i32 %564, %223
  %566 = sub i32 %565, %247
  %567 = sub i32 %566, %248
  %568 = sub i32 %567, %249
  %569 = sub i32 %568, %250
  %570 = add i32 %569, %251
  %571 = add i32 %570, %252
  %572 = add i32 %571, %253
  %573 = sub i32 %572, %257
  %574 = sub i32 %573, %262
  %575 = sub i32 %574, %263
  %576 = sub i32 %575, %264
  %577 = sub i32 %576, %268
  %578 = sub i32 %577, %269
  %579 = sub i32 %578, %270
  %580 = sub i32 %579, %275
  %581 = add i32 %580, %277
  %582 = add i32 %581, %278
  %583 = sub i32 %582, %280
  %584 = add i32 %583, %281
  %585 = sub i32 %584, %291
  %586 = sub i32 %585, %294
  %587 = add i32 %586, %295
  %588 = sub i32 %587, %297
  %589 = sub i32 %588, %298
  %590 = add i32 %589, %300
  %591 = add i32 %590, %302
  %592 = add i32 %591, %303
  %593 = sub i32 %592, %308
  %594 = add i32 %593, %310
  %595 = sub i32 %594, %312
  %596 = sub i32 %595, %315
  %597 = sub i32 %596, %320
  %598 = sub i32 %597, %324
  %599 = sub i32 %598, %328
  %600 = add i32 %599, %330
  %601 = sub i32 %600, %331
  %602 = sub i32 %601, %332
  %603 = add i32 %602, %334
  %604 = sub i32 %603, %335
  %605 = add i32 %604, %339
  %606 = sub i32 %605, %340
  %607 = sub i32 %606, %304
  %608 = sub i32 %607, %344
  %609 = sub i32 %608, %345
  %610 = sub i32 %609, %346
  %611 = sub i32 %610, %348
  %612 = add i32 %611, %349
  %613 = add i32 %612, %351
  %614 = sub i32 %613, %353
  %615 = sub i32 %614, %354
  %616 = sub i32 %615, %357
  %617 = sub i32 %616, %358
  %618 = sub i32 %617, %359
  %619 = add i32 %618, %360
  %620 = add i32 %619, %361
  %621 = add i32 %620, %362
  %622 = sub i32 %621, %368
  %623 = add i32 %622, %217
  %624 = add i32 %623, %224
  %625 = sub i32 %624, %240
  %626 = sub i32 %625, %243
  %627 = add i32 %626, %256
  %628 = sub i32 %627, %260
  %629 = sub i32 %628, %266
  %630 = sub i32 %629, %272
  %631 = sub i32 %630, %274
  %632 = sub i32 %631, %285
  %633 = sub i32 %632, %306
  %634 = sub i32 %633, %307
  %635 = sub i32 %634, %314
  %636 = sub i32 %635, %317
  %637 = add i32 %636, %319
  %638 = add i32 %637, %327
  %639 = sub i32 %638, %337
  %640 = sub i32 %639, %338
  %641 = sub i32 %640, %343
  %642 = add i32 %641, %364
  %643 = add i32 %642, %367
  %644 = sub i32 %643, %370
  %645 = add i32 %644, %389
  %646 = add i32 %645, %391
  %647 = add i32 %646, %387
  %648 = add i32 %647, %384
  %649 = add i32 %648, %377
  %650 = add i32 %649, %416
  %651 = icmp eq i32 %27, %650
  %652 = select i1 %651, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %653 = tail call i32 @puts(i8* nonnull dereferenceable(1) %652)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
