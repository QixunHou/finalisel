digraph "DFG for'crackme' function" {
	Node0x607bb0[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x608230[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x6082a0[shape=record, label="  %7 = and i32 %6, %3"];
	Node0x608310[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x608380[shape=record, label="  %9 = sub i32 %8, %5"];
	Node0x6083f0[shape=record, label="  %10 = or i32 %3, %0"];
	Node0x608460[shape=record, label="  %11 = add i32 %9, %10"];
	Node0x6084d0[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x608570[shape=record, label="  %13 = xor i32 %2, 2147483647"];
	Node0x608610[shape=record, label="  %14 = shl i32 %2, 2"];
	Node0x608680[shape=record, label="  %15 = or i32 %13, %1"];
	Node0x608720[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x608790[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x608800[shape=record, label="  %18 = shl i32 %1, 1"];
	Node0x6088a0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x608910[shape=record, label="  %20 = or i32 %2, %1"];
	Node0x6089b0[shape=record, label="  %21 = shl i32 %12, 3"];
	Node0x608a20[shape=record, label="  %22 = xor i32 %6, %3"];
	Node0x608a90[shape=record, label="  %23 = shl i32 %0, 1"];
	Node0x608b00[shape=record, label="  %24 = or i32 %6, %3"];
	Node0x608b70[shape=record, label="  %25 = xor i32 %10, -1"];
	Node0x608be0[shape=record, label="  %26 = shl i32 %24, 2"];
	Node0x608c80[shape=record, label="  %27 = xor i32 %26, -4"];
	Node0x608cf0[shape=record, label="  %28 = shl i32 %7, 1"];
	Node0x608d60[shape=record, label="  %29 = and i32 %3, %0"];
	Node0x608dd0[shape=record, label="  %30 = shl i32 %29, 2"];
	Node0x608e40[shape=record, label="  %31 = sub i32 1, %1"];
	Node0x608eb0[shape=record, label="  %32 = sub i32 %31, %23"];
	Node0x609130[shape=record, label="  %33 = sub i32 %32, %2"];
	Node0x6091a0[shape=record, label="  %34 = sub i32 %33, %12"];
	Node0x609210[shape=record, label="  %35 = add i32 %34, %5"];
	Node0x609280[shape=record, label="  %36 = sub i32 %35, %14"];
	Node0x6092f0[shape=record, label="  %37 = add i32 %36, %19"];
	Node0x609360[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x6093d0[shape=record, label="  %39 = add i32 %38, %17"];
	Node0x609440[shape=record, label="  %40 = add i32 %39, %21"];
	Node0x6094b0[shape=record, label="  %41 = add i32 %40, %22"];
	Node0x609520[shape=record, label="  %42 = sub i32 %41, %24"];
	Node0x609590[shape=record, label="  %43 = add i32 %42, %25"];
	Node0x609600[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x609670[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x6096e0[shape=record, label="  %46 = add i32 %45, %27"];
	Node0x609750[shape=record, label="  %47 = icmp eq i32 %11, %46"];
	Node0x5a8268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x609bf0[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0x609c40[shape=record, label="  ret void"];
	Node0x607bb0 -> Node0x608230;
	Node0x608230 -> Node0x6082a0;
	Node0x6082a0 -> Node0x608310;
	Node0x608310 -> Node0x608380;
	Node0x608380 -> Node0x6083f0;
	Node0x6083f0 -> Node0x608460;
	Node0x608460 -> Node0x6084d0;
	Node0x6084d0 -> Node0x608570;
	Node0x608570 -> Node0x608610;
	Node0x608610 -> Node0x608680;
	Node0x608680 -> Node0x608720;
	Node0x608720 -> Node0x608790;
	Node0x608790 -> Node0x608800;
	Node0x608800 -> Node0x6088a0;
	Node0x6088a0 -> Node0x608910;
	Node0x608910 -> Node0x6089b0;
	Node0x6089b0 -> Node0x608a20;
	Node0x608a20 -> Node0x608a90;
	Node0x608a90 -> Node0x608b00;
	Node0x608b00 -> Node0x608b70;
	Node0x608b70 -> Node0x608be0;
	Node0x608be0 -> Node0x608c80;
	Node0x608c80 -> Node0x608cf0;
	Node0x608cf0 -> Node0x608d60;
	Node0x608d60 -> Node0x608dd0;
	Node0x608dd0 -> Node0x608e40;
	Node0x608e40 -> Node0x608eb0;
	Node0x608eb0 -> Node0x609130;
	Node0x609130 -> Node0x6091a0;
	Node0x6091a0 -> Node0x609210;
	Node0x609210 -> Node0x609280;
	Node0x609280 -> Node0x6092f0;
	Node0x6092f0 -> Node0x609360;
	Node0x609360 -> Node0x6093d0;
	Node0x6093d0 -> Node0x609440;
	Node0x609440 -> Node0x6094b0;
	Node0x6094b0 -> Node0x609520;
	Node0x609520 -> Node0x609590;
	Node0x609590 -> Node0x609600;
	Node0x609600 -> Node0x609670;
	Node0x609670 -> Node0x6096e0;
	Node0x6096e0 -> Node0x609750;
	Node0x609750 -> Node0x5a8268;
	Node0x5a8268 -> Node0x609bf0;
	Node0x609bf0 -> Node0x609c40;
edge [color=red]
	Node0x608230 -> Node0x6082a0;
	Node0x6082a0 -> Node0x608310;
	Node0x608310 -> Node0x608380;
	Node0x607bb0 -> Node0x608380;
	Node0x608380 -> Node0x608460;
	Node0x6083f0 -> Node0x608460;
	Node0x608570 -> Node0x608680;
	Node0x608680 -> Node0x608720;
	Node0x608720 -> Node0x608790;
	Node0x608800 -> Node0x6088a0;
	Node0x6084d0 -> Node0x6089b0;
	Node0x608230 -> Node0x608a20;
	Node0x608230 -> Node0x608b00;
	Node0x6083f0 -> Node0x608b70;
	Node0x608b00 -> Node0x608be0;
	Node0x608be0 -> Node0x608c80;
	Node0x6082a0 -> Node0x608cf0;
	Node0x608d60 -> Node0x608dd0;
	Node0x608e40 -> Node0x608eb0;
	Node0x608a90 -> Node0x608eb0;
	Node0x608eb0 -> Node0x609130;
	Node0x609130 -> Node0x6091a0;
	Node0x6084d0 -> Node0x6091a0;
	Node0x6091a0 -> Node0x609210;
	Node0x607bb0 -> Node0x609210;
	Node0x609210 -> Node0x609280;
	Node0x608610 -> Node0x609280;
	Node0x609280 -> Node0x6092f0;
	Node0x6088a0 -> Node0x6092f0;
	Node0x6092f0 -> Node0x609360;
	Node0x608910 -> Node0x609360;
	Node0x609360 -> Node0x6093d0;
	Node0x608790 -> Node0x6093d0;
	Node0x6093d0 -> Node0x609440;
	Node0x6089b0 -> Node0x609440;
	Node0x609440 -> Node0x6094b0;
	Node0x608a20 -> Node0x6094b0;
	Node0x6094b0 -> Node0x609520;
	Node0x608b00 -> Node0x609520;
	Node0x609520 -> Node0x609590;
	Node0x608b70 -> Node0x609590;
	Node0x609590 -> Node0x609600;
	Node0x608cf0 -> Node0x609600;
	Node0x609600 -> Node0x609670;
	Node0x608dd0 -> Node0x609670;
	Node0x609670 -> Node0x6096e0;
	Node0x608c80 -> Node0x6096e0;
	Node0x608460 -> Node0x609750;
	Node0x6096e0 -> Node0x609750;
	Node0x609750 -> Node0x5a8268;
	Node0x5a8268 -> Node0x609bf0;
}
