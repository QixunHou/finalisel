digraph "DFG for'crackme' function" {
	Node0x1904d80[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x1904df0[shape=record, label="  %6 = add i32 %5, %1"];
	Node0x1904e60[shape=record, label="  %7 = sub i32 %2, %6"];
	Node0x1904ed0[shape=record, label="  %8 = xor i32 %2, %1"];
	Node0x1904f40[shape=record, label="  %9 = or i32 %2, %1"];
	Node0x1904fb0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1905020[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x1905090[shape=record, label="  %12 = shl i32 %1, 1"];
	Node0x1905130[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x19051d0[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x1905240[shape=record, label="  %15 = or i32 %14, %1"];
	Node0x19052b0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x1905320[shape=record, label="  %17 = xor i32 %15, -1"];
	Node0x1905390[shape=record, label="  %18 = and i32 %14, %1"];
	Node0x1905400[shape=record, label="  %19 = shl i32 %3, 1"];
	Node0x1905470[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x19054e0[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x1905550[shape=record, label="  %22 = xor i32 %0, -1"];
	Node0x19055c0[shape=record, label="  %23 = and i32 %22, %3"];
	Node0x1905630[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x19056a0[shape=record, label="  %25 = or i32 %3, %0"];
	Node0x1905710[shape=record, label="  %26 = or i32 %22, %3"];
	Node0x1905780[shape=record, label="  %27 = shl i32 %25, 1"];
	Node0x19057f0[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x1905860[shape=record, label="  %29 = xor i32 %26, -1"];
	Node0x19058d0[shape=record, label="  %30 = add i32 %29, %3"];
	Node0x1905970[shape=record, label="  %31 = mul i32 %30, -9"];
	Node0x19059e0[shape=record, label="  %32 = add i32 %25, %18"];
	Node0x1905c90[shape=record, label="  %33 = mul i32 %32, 5"];
	Node0x1905d00[shape=record, label="  %34 = add i32 %11, %17"];
	Node0x1905da0[shape=record, label="  %35 = mul i32 %34, 3"];
	Node0x1905e10[shape=record, label="  %36 = add i32 %21, %26"];
	Node0x1905e80[shape=record, label="  %37 = shl i32 %36, 1"];
	Node0x1905f20[shape=record, label="  %38 = sub i32 2, %8"];
	Node0x1905f90[shape=record, label="  %39 = add i32 %38, %11"];
	Node0x1906000[shape=record, label="  %40 = add i32 %39, %13"];
	Node0x1906070[shape=record, label="  %41 = sub i32 %40, %8"];
	Node0x19060e0[shape=record, label="  %42 = add i32 %41, %3"];
	Node0x1906150[shape=record, label="  %43 = sub i32 %42, %10"];
	Node0x19061c0[shape=record, label="  %44 = sub i32 %43, %16"];
	Node0x1906230[shape=record, label="  %45 = add i32 %44, %23"];
	Node0x19062a0[shape=record, label="  %46 = add i32 %45, %24"];
	Node0x1906310[shape=record, label="  %47 = add i32 %46, %20"];
	Node0x1906380[shape=record, label="  %48 = add i32 %47, %35"];
	Node0x19063f0[shape=record, label="  %49 = sub i32 %48, %28"];
	Node0x1906460[shape=record, label="  %50 = add i32 %49, %33"];
	Node0x19064d0[shape=record, label="  %51 = add i32 %50, %37"];
	Node0x1906540[shape=record, label="  %52 = add i32 %51, %31"];
	Node0x19065b0[shape=record, label="  %53 = icmp eq i32 %7, %52"];
	Node0x18a5268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1906a50[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x1906aa0[shape=record, label="  ret void"];
	Node0x1904d80 -> Node0x1904df0;
	Node0x1904df0 -> Node0x1904e60;
	Node0x1904e60 -> Node0x1904ed0;
	Node0x1904ed0 -> Node0x1904f40;
	Node0x1904f40 -> Node0x1904fb0;
	Node0x1904fb0 -> Node0x1905020;
	Node0x1905020 -> Node0x1905090;
	Node0x1905090 -> Node0x1905130;
	Node0x1905130 -> Node0x19051d0;
	Node0x19051d0 -> Node0x1905240;
	Node0x1905240 -> Node0x19052b0;
	Node0x19052b0 -> Node0x1905320;
	Node0x1905320 -> Node0x1905390;
	Node0x1905390 -> Node0x1905400;
	Node0x1905400 -> Node0x1905470;
	Node0x1905470 -> Node0x19054e0;
	Node0x19054e0 -> Node0x1905550;
	Node0x1905550 -> Node0x19055c0;
	Node0x19055c0 -> Node0x1905630;
	Node0x1905630 -> Node0x19056a0;
	Node0x19056a0 -> Node0x1905710;
	Node0x1905710 -> Node0x1905780;
	Node0x1905780 -> Node0x19057f0;
	Node0x19057f0 -> Node0x1905860;
	Node0x1905860 -> Node0x19058d0;
	Node0x19058d0 -> Node0x1905970;
	Node0x1905970 -> Node0x19059e0;
	Node0x19059e0 -> Node0x1905c90;
	Node0x1905c90 -> Node0x1905d00;
	Node0x1905d00 -> Node0x1905da0;
	Node0x1905da0 -> Node0x1905e10;
	Node0x1905e10 -> Node0x1905e80;
	Node0x1905e80 -> Node0x1905f20;
	Node0x1905f20 -> Node0x1905f90;
	Node0x1905f90 -> Node0x1906000;
	Node0x1906000 -> Node0x1906070;
	Node0x1906070 -> Node0x19060e0;
	Node0x19060e0 -> Node0x1906150;
	Node0x1906150 -> Node0x19061c0;
	Node0x19061c0 -> Node0x1906230;
	Node0x1906230 -> Node0x19062a0;
	Node0x19062a0 -> Node0x1906310;
	Node0x1906310 -> Node0x1906380;
	Node0x1906380 -> Node0x19063f0;
	Node0x19063f0 -> Node0x1906460;
	Node0x1906460 -> Node0x19064d0;
	Node0x19064d0 -> Node0x1906540;
	Node0x1906540 -> Node0x19065b0;
	Node0x19065b0 -> Node0x18a5268;
	Node0x18a5268 -> Node0x1906a50;
	Node0x1906a50 -> Node0x1906aa0;
edge [color=red]
	Node0x1904d80 -> Node0x1904df0;
	Node0x1904df0 -> Node0x1904e60;
	Node0x1904f40 -> Node0x1904fb0;
	Node0x1905090 -> Node0x1905130;
	Node0x19051d0 -> Node0x1905240;
	Node0x1905240 -> Node0x19052b0;
	Node0x1905240 -> Node0x1905320;
	Node0x19051d0 -> Node0x1905390;
	Node0x1905400 -> Node0x1905470;
	Node0x1905550 -> Node0x19055c0;
	Node0x1905550 -> Node0x1905710;
	Node0x19056a0 -> Node0x1905780;
	Node0x1905780 -> Node0x19057f0;
	Node0x1905710 -> Node0x1905860;
	Node0x1905860 -> Node0x19058d0;
	Node0x19058d0 -> Node0x1905970;
	Node0x19056a0 -> Node0x19059e0;
	Node0x1905390 -> Node0x19059e0;
	Node0x19059e0 -> Node0x1905c90;
	Node0x1905020 -> Node0x1905d00;
	Node0x1905320 -> Node0x1905d00;
	Node0x1905d00 -> Node0x1905da0;
	Node0x19054e0 -> Node0x1905e10;
	Node0x1905710 -> Node0x1905e10;
	Node0x1905e10 -> Node0x1905e80;
	Node0x1904ed0 -> Node0x1905f20;
	Node0x1905f20 -> Node0x1905f90;
	Node0x1905020 -> Node0x1905f90;
	Node0x1905f90 -> Node0x1906000;
	Node0x1905130 -> Node0x1906000;
	Node0x1906000 -> Node0x1906070;
	Node0x1904ed0 -> Node0x1906070;
	Node0x1906070 -> Node0x19060e0;
	Node0x19060e0 -> Node0x1906150;
	Node0x1904fb0 -> Node0x1906150;
	Node0x1906150 -> Node0x19061c0;
	Node0x19052b0 -> Node0x19061c0;
	Node0x19061c0 -> Node0x1906230;
	Node0x19055c0 -> Node0x1906230;
	Node0x1906230 -> Node0x19062a0;
	Node0x1905630 -> Node0x19062a0;
	Node0x19062a0 -> Node0x1906310;
	Node0x1905470 -> Node0x1906310;
	Node0x1906310 -> Node0x1906380;
	Node0x1905da0 -> Node0x1906380;
	Node0x1906380 -> Node0x19063f0;
	Node0x19057f0 -> Node0x19063f0;
	Node0x19063f0 -> Node0x1906460;
	Node0x1905c90 -> Node0x1906460;
	Node0x1906460 -> Node0x19064d0;
	Node0x1905e80 -> Node0x19064d0;
	Node0x19064d0 -> Node0x1906540;
	Node0x1905970 -> Node0x1906540;
	Node0x1904e60 -> Node0x19065b0;
	Node0x1906540 -> Node0x19065b0;
	Node0x19065b0 -> Node0x18a5268;
	Node0x18a5268 -> Node0x1906a50;
}
