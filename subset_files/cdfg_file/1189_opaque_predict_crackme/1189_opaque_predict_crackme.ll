; ModuleID = '../.././c_source_file/1189_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1189_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = and i32 %2, %1
  %6 = and i32 %5, %4
  %7 = or i32 %2, %1
  %8 = and i32 %7, %0
  %9 = or i32 %6, %8
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = and i32 %14, %12
  %16 = or i32 %10, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %1, %0
  %19 = or i32 %13, %18
  %20 = xor i32 %2, -1
  %21 = and i32 %20, %0
  %22 = or i32 %21, %1
  %23 = and i32 %18, %20
  %24 = xor i32 %18, -1
  %25 = or i32 %21, %24
  %26 = xor i32 %5, -1
  %27 = or i32 %26, %0
  %28 = shl i32 %27, 1
  %29 = or i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %10
  %32 = and i32 %13, %16
  %33 = and i32 %26, %0
  %34 = or i32 %20, %0
  %35 = and i32 %34, %24
  %36 = and i32 %34, %1
  %37 = and i32 %18, %14
  %38 = and i32 %10, %2
  %39 = and i32 %38, %0
  %40 = or i32 %10, %2
  %41 = xor i32 %40, %0
  %42 = xor i32 %39, -1
  %43 = xor i32 %41, %42
  %44 = or i32 %20, %1
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %0
  %47 = or i32 %5, %0
  %48 = and i32 %1, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %20, %49
  %51 = xor i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %11, %52
  %54 = or i32 %30, %24
  %55 = or i32 %1, %0
  %56 = and i32 %55, %52
  %57 = shl i32 %56, 1
  %58 = or i32 %48, %2
  %59 = and i32 %20, %1
  %60 = or i32 %59, %11
  %61 = and i32 %40, %4
  %62 = xor i32 %61, %42
  %63 = or i32 %14, %17
  %64 = and i32 %51, %55
  %65 = and i32 %55, %14
  %66 = or i32 %51, %48
  %67 = xor i32 %21, -1
  %68 = and i32 %67, %10
  %69 = and i32 %34, %10
  %70 = and i32 %38, %4
  %71 = or i32 %51, %4
  %72 = xor i32 %71, -1
  %73 = or i32 %70, %72
  %74 = xor i32 %59, -1
  %75 = xor i32 %74, %0
  %76 = and i32 %2, %0
  %77 = xor i32 %76, -1
  %78 = and i32 %77, %24
  %79 = xor i32 %21, %44
  %80 = xor i32 %8, -1
  %81 = xor i32 %6, %80
  %82 = or i32 %48, %52
  %83 = and i32 %74, %4
  %84 = xor i32 %34, -1
  %85 = or i32 %18, %84
  %86 = and i32 %5, %0
  %87 = and i32 %7, %4
  %88 = or i32 %86, %87
  %89 = xor i32 %44, %48
  %90 = or i32 %51, %11
  %91 = or i32 %51, %0
  %92 = and i32 %13, %18
  %93 = and i32 %52, %0
  %94 = xor i32 %7, -1
  %95 = or i32 %48, %94
  %96 = and i32 %77, %10
  %97 = shl i32 %96, 1
  %98 = or i32 %44, %0
  %99 = shl i32 %98, 1
  %100 = xor i32 %84, %1
  %101 = add i32 %51, 1
  %102 = xor i32 %55, -1
  %103 = or i32 %51, %102
  %104 = xor i32 %7, %0
  %105 = xor i32 %86, -1
  %106 = xor i32 %104, %105
  %107 = and i32 %51, %0
  %108 = xor i32 %107, 2147483647
  %109 = xor i32 %108, %6
  %110 = xor i32 %34, %48
  %111 = or i32 %39, %61
  %112 = and i32 %40, %0
  %113 = or i32 %70, %112
  %114 = and i32 %44, %4
  %115 = or i32 %74, %0
  %116 = shl i32 %115, 1
  %117 = or i32 %11, %20
  %118 = or i32 %76, %10
  %119 = or i32 %11, %14
  %120 = shl i32 %119, 1
  %121 = or i32 %76, %102
  %122 = shl i32 %121, 1
  %123 = and i32 %34, %18
  %124 = or i32 %76, %1
  %125 = xor i32 %51, %4
  %126 = xor i32 %39, %125
  %127 = or i32 %76, %24
  %128 = shl i32 %127, 2
  %129 = and i32 %13, %10
  %130 = and i32 %67, %1
  %131 = and i32 %67, %24
  %132 = xor i32 %11, %26
  %133 = or i32 %13, %17
  %134 = or i32 %21, %10
  %135 = or i32 %14, %10
  %136 = xor i32 %48, %2
  %137 = or i32 %20, %17
  %138 = or i32 %13, %102
  %139 = or i32 %48, %45
  %140 = shl i32 %139, 1
  %141 = or i32 %84, %24
  %142 = or i32 %48, %20
  %143 = or i32 %94, %0
  %144 = xor i32 %87, %105
  %145 = xor i32 %44, %0
  %146 = xor i32 %102, %2
  %147 = or i32 %20, %24
  %148 = or i32 %13, %10
  %149 = shl i32 %104, 1
  %150 = or i32 %102, %2
  %151 = or i32 %14, %24
  %152 = and i32 %55, %20
  %153 = add i32 %18, 1
  %154 = and i32 %13, %12
  %155 = and i32 %16, %20
  %156 = and i32 %20, %24
  %157 = or i32 %7, %4
  %158 = xor i32 %76, %16
  %159 = and i32 %16, %14
  %160 = or i32 %94, %4
  %161 = or i32 %76, %59
  %162 = and i32 %77, %1
  %163 = add i32 %2, 1
  %164 = or i32 %52, %4
  %165 = or i32 %39, %41
  %166 = xor i32 %12, %2
  %167 = xor i32 %49, %2
  %168 = and i32 %13, %55
  %169 = or i32 %30, %1
  %170 = xor i32 %76, %1
  %171 = and i32 %26, %4
  %172 = or i32 %76, %18
  %173 = or i32 %48, %30
  %174 = and i32 %18, %77
  %175 = xor i32 %112, -1
  %176 = xor i32 %70, %175
  %177 = and i32 %51, %4
  %178 = xor i32 %77, %1
  %179 = or i32 %13, %1
  %180 = shl i32 %179, 1
  %181 = or i32 %21, %18
  %182 = shl i32 %67, 1
  %183 = and i32 %51, %49
  %184 = and i32 %13, %1
  %185 = and i32 %49, %2
  %186 = or i32 %52, %0
  %187 = xor i32 %91, -1
  %188 = or i32 %39, %187
  %189 = and i32 %16, %2
  %190 = or i32 %18, %14
  %191 = xor i32 %94, %0
  %192 = shl i32 %191, 1
  %193 = xor i32 %21, %26
  %194 = or i32 %52, %17
  %195 = and i32 %12, %2
  %196 = shl i32 %195, 1
  %197 = xor i32 %30, %1
  %198 = xor i32 %45, %0
  %199 = and i32 %55, %2
  %200 = or i32 %59, %0
  %201 = or i32 %18, %30
  %202 = and i32 %74, %0
  %203 = shl i32 %202, 1
  %204 = or i32 %13, %24
  %205 = and i32 %18, %2
  %206 = or i32 %76, %94
  %207 = shl i32 %206, 1
  %208 = or i32 %84, %10
  %209 = xor i32 %39, %91
  %210 = xor i32 %11, %74
  %211 = or i32 %51, %17
  %212 = xor i32 %76, %7
  %213 = xor i32 %21, %1
  %214 = and i32 %52, %4
  %215 = or i32 %18, %20
  %216 = or i32 %21, %45
  %217 = or i32 %86, %125
  %218 = or i32 %26, %4
  %219 = shl i32 %218, 1
  %220 = xor i32 %16, %2
  %221 = or i32 %7, %0
  %222 = shl i32 %55, 1
  %223 = and i32 %14, %1
  %224 = and i32 %24, %2
  %225 = or i32 %74, %4
  %226 = xor i32 %55, %2
  %227 = shl i32 %226, 1
  %228 = xor i32 %7, %48
  %229 = shl i32 %228, 1
  %230 = and i32 %94, %4
  %231 = and i32 %59, %4
  %232 = mul i32 %231, -12
  %233 = and i32 %94, %0
  %234 = shl i32 %233, 3
  %235 = and i32 %59, %0
  %236 = mul i32 %235, -6
  %237 = and i32 %45, %4
  %238 = mul i32 %6, -22
  %239 = and i32 %45, %0
  %240 = mul i32 %239, 20
  %241 = add i32 %215, %220
  %242 = add i32 %241, %77
  %243 = add i32 %242, %136
  %244 = add i32 %243, %23
  %245 = add i32 %244, %86
  %246 = add i32 %245, %213
  %247 = add i32 %246, %212
  %248 = add i32 %247, %208
  %249 = add i32 %248, %186
  %250 = add i32 %249, %173
  %251 = add i32 %250, %164
  %252 = add i32 %251, %158
  %253 = add i32 %252, %154
  %254 = add i32 %253, %100
  %255 = add i32 %254, %89
  %256 = add i32 %255, %82
  %257 = add i32 %256, %46
  %258 = add i32 %257, %31
  %259 = add i32 %258, %25
  %260 = add i32 %259, %109
  %261 = shl i32 %260, 1
  %262 = sub i32 %79, %230
  %263 = sub i32 %262, %69
  %264 = mul i32 %263, 5
  %265 = mul i32 %197, 3
  %266 = add i32 %265, -3
  %267 = sub i32 -2, %16
  %268 = add i32 %267, %153
  %269 = sub i32 %268, %2
  %270 = add i32 %269, %48
  %271 = add i32 %270, %163
  %272 = add i32 %271, %12
  %273 = add i32 %272, %18
  %274 = sub i32 %273, %50
  %275 = sub i32 %274, %58
  %276 = add i32 %275, %29
  %277 = add i32 %276, %44
  %278 = add i32 %277, %101
  %279 = sub i32 %278, %117
  %280 = sub i32 %279, %137
  %281 = sub i32 %280, %142
  %282 = add i32 %281, %14
  %283 = sub i32 %282, %146
  %284 = sub i32 %283, %147
  %285 = add i32 %284, %74
  %286 = add i32 %285, %150
  %287 = add i32 %286, %152
  %288 = sub i32 %287, %155
  %289 = add i32 %288, %156
  %290 = sub i32 %289, %13
  %291 = add i32 %290, %166
  %292 = add i32 %291, %167
  %293 = sub i32 %292, %185
  %294 = sub i32 %293, %189
  %295 = sub i32 %294, %51
  %296 = add i32 %295, %199
  %297 = add i32 %296, %205
  %298 = sub i32 %297, %21
  %299 = sub i32 %298, %222
  %300 = add i32 %299, %224
  %301 = sub i32 %300, %15
  %302 = add i32 %301, %19
  %303 = sub i32 %302, %22
  %304 = sub i32 %303, %32
  %305 = add i32 %304, %33
  %306 = sub i32 %305, %35
  %307 = sub i32 %306, %36
  %308 = sub i32 %307, %37
  %309 = add i32 %308, %47
  %310 = add i32 %309, %53
  %311 = add i32 %310, %54
  %312 = sub i32 %311, %60
  %313 = sub i32 %312, %63
  %314 = add i32 %313, %64
  %315 = add i32 %314, %65
  %316 = sub i32 %315, %66
  %317 = add i32 %316, %68
  %318 = sub i32 %317, %75
  %319 = sub i32 %318, %78
  %320 = add i32 %319, %83
  %321 = add i32 %320, %85
  %322 = sub i32 %321, %90
  %323 = add i32 %322, %91
  %324 = add i32 %323, %92
  %325 = sub i32 %324, %93
  %326 = sub i32 %325, %95
  %327 = sub i32 %326, %103
  %328 = sub i32 %327, %110
  %329 = add i32 %328, %114
  %330 = add i32 %329, %118
  %331 = add i32 %330, %123
  %332 = sub i32 %331, %124
  %333 = sub i32 %332, %129
  %334 = add i32 %333, %130
  %335 = add i32 %334, %131
  %336 = add i32 %335, %132
  %337 = add i32 %336, %133
  %338 = sub i32 %337, %134
  %339 = sub i32 %338, %135
  %340 = add i32 %339, %138
  %341 = sub i32 %340, %141
  %342 = sub i32 %341, %143
  %343 = sub i32 %342, %87
  %344 = sub i32 %343, %145
  %345 = add i32 %344, %148
  %346 = sub i32 %345, %151
  %347 = add i32 %346, %157
  %348 = add i32 %347, %159
  %349 = add i32 %348, %160
  %350 = sub i32 %349, %161
  %351 = add i32 %350, %162
  %352 = sub i32 %351, %168
  %353 = add i32 %352, %169
  %354 = sub i32 %353, %170
  %355 = sub i32 %354, %171
  %356 = sub i32 %355, %172
  %357 = add i32 %356, %174
  %358 = add i32 %357, %177
  %359 = sub i32 %358, %178
  %360 = add i32 %359, %181
  %361 = sub i32 %360, %182
  %362 = add i32 %361, %183
  %363 = add i32 %362, %184
  %364 = sub i32 %363, %190
  %365 = sub i32 %364, %193
  %366 = add i32 %365, %194
  %367 = sub i32 %366, %196
  %368 = sub i32 %367, %71
  %369 = add i32 %368, %198
  %370 = add i32 %369, %200
  %371 = add i32 %370, %201
  %372 = add i32 %371, %204
  %373 = add i32 %372, %210
  %374 = add i32 %373, %211
  %375 = sub i32 %374, %107
  %376 = sub i32 %375, %214
  %377 = add i32 %376, %216
  %378 = sub i32 %377, %221
  %379 = sub i32 %378, %223
  %380 = sub i32 %379, %225
  %381 = sub i32 %380, %227
  %382 = add i32 %381, %237
  %383 = sub i32 %382, %28
  %384 = add i32 %383, %43
  %385 = sub i32 %384, %57
  %386 = add i32 %385, %62
  %387 = add i32 %386, %73
  %388 = add i32 %387, %81
  %389 = sub i32 %388, %88
  %390 = sub i32 %389, %97
  %391 = sub i32 %390, %99
  %392 = add i32 %391, %106
  %393 = sub i32 %392, %111
  %394 = sub i32 %393, %113
  %395 = sub i32 %394, %116
  %396 = sub i32 %395, %120
  %397 = sub i32 %396, %122
  %398 = sub i32 %397, %126
  %399 = sub i32 %398, %128
  %400 = sub i32 %399, %140
  %401 = add i32 %400, %144
  %402 = sub i32 %401, %149
  %403 = sub i32 %402, %165
  %404 = sub i32 %403, %176
  %405 = sub i32 %404, %180
  %406 = add i32 %405, %188
  %407 = sub i32 %406, %192
  %408 = sub i32 %407, %203
  %409 = sub i32 %408, %207
  %410 = add i32 %409, %209
  %411 = add i32 %410, %217
  %412 = sub i32 %411, %219
  %413 = sub i32 %412, %229
  %414 = add i32 %413, %232
  %415 = sub i32 %414, %234
  %416 = add i32 %415, %236
  %417 = add i32 %416, %238
  %418 = add i32 %417, %240
  %419 = add i32 %418, %266
  %420 = add i32 %419, %264
  %421 = add i32 %420, %261
  %422 = icmp eq i32 %9, %421
  %423 = select i1 %422, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %424 = tail call i32 @puts(i8* nonnull dereferenceable(1) %423)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
