; ModuleID = '../.././c_source_file/1851_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1851_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %6, %1
  %8 = sub i32 0, %7
  %9 = and i32 %2, %1
  %10 = or i32 %9, %0
  %11 = xor i32 %1, -1
  %12 = or i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %4, %13
  %15 = and i32 %11, %0
  %16 = or i32 %15, %2
  %17 = xor i32 %0, -1
  %18 = or i32 %2, %1
  %19 = or i32 %18, %17
  %20 = and i32 %4, %1
  %21 = shl i32 %20, 1
  %22 = xor i32 %2, %1
  %23 = xor i32 %22, -1
  %24 = or i32 %23, %0
  %25 = xor i32 %9, -1
  %26 = or i32 %25, %0
  %27 = shl i32 %26, 1
  %28 = or i32 %13, %2
  %29 = and i32 %11, %2
  %30 = and i32 %29, %17
  %31 = or i32 %22, %17
  %32 = xor i32 %31, -1
  %33 = or i32 %30, %32
  %34 = or i32 %4, %0
  %35 = xor i32 %1, %0
  %36 = and i32 %34, %35
  %37 = xor i32 %2, %0
  %38 = or i32 %37, %15
  %39 = and i32 %9, %0
  %40 = xor i32 %18, %0
  %41 = xor i32 %39, -1
  %42 = xor i32 %40, %41
  %43 = or i32 %4, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %0
  %46 = or i32 %1, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %2
  %49 = xor i32 %34, -1
  %50 = add i32 %34, 1
  %51 = xor i32 %15, -1
  %52 = and i32 %51, %2
  %53 = add i32 %22, 1
  %54 = or i32 %2, %0
  %55 = xor i32 %35, -1
  %56 = and i32 %54, %55
  %57 = shl i32 %37, 1
  %58 = or i32 %49, %1
  %59 = xor i32 %37, -1
  %60 = and i32 %59, %1
  %61 = or i32 %9, %15
  %62 = or i32 %5, %1
  %63 = xor i32 %51, %2
  %64 = or i32 %55, %2
  %65 = xor i32 %20, -1
  %66 = and i32 %65, %17
  %67 = and i32 %23, %51
  %68 = and i32 %1, %0
  %69 = xor i32 %68, -1
  %70 = and i32 %69, %2
  %71 = and i32 %35, %6
  %72 = add i32 %20, 1
  %73 = and i32 %29, %0
  %74 = or i32 %22, %0
  %75 = xor i32 %74, -1
  %76 = or i32 %73, %75
  %77 = or i32 %65, %0
  %78 = and i32 %59, %51
  %79 = and i32 %2, %0
  %80 = xor i32 %79, %1
  %81 = or i32 %37, %68
  %82 = and i32 %37, %69
  %83 = and i32 %6, %11
  %84 = shl i32 %83, 1
  %85 = xor i32 %79, -1
  %86 = and i32 %85, %55
  %87 = add i32 %37, 1
  %88 = xor i32 %79, %12
  %89 = and i32 %12, %59
  %90 = and i32 %18, %17
  %91 = xor i32 %90, %41
  %92 = or i32 %9, %17
  %93 = or i32 %22, %15
  %94 = shl i32 %93, 1
  %95 = xor i32 %9, %0
  %96 = and i32 %37, %46
  %97 = and i32 %85, %1
  %98 = and i32 %43, %0
  %99 = and i32 %55, %2
  %100 = xor i32 %22, %0
  %101 = xor i32 %100, -1
  %102 = or i32 %39, %101
  %103 = xor i32 %65, %0
  %104 = or i32 %43, %0
  %105 = xor i32 %5, %25
  %106 = and i32 %25, %0
  %107 = and i32 %46, %2
  %108 = xor i32 %23, %0
  %109 = xor i32 %68, %2
  %110 = or i32 %22, %47
  %111 = xor i32 %15, %25
  %112 = and i32 %34, %55
  %113 = xor i32 %18, -1
  %114 = or i32 %35, %2
  %115 = and i32 %22, %12
  %116 = or i32 %37, %55
  %117 = shl i32 %116, 1
  %118 = or i32 %79, %35
  %119 = and i32 %22, %46
  %120 = shl i32 %119, 1
  %121 = or i32 %11, %2
  %122 = xor i32 %121, %0
  %123 = or i32 %73, %122
  %124 = and i32 %121, %17
  %125 = or i32 %73, %124
  %126 = xor i32 %54, -1
  %127 = or i32 %126, %1
  %128 = and i32 %6, %55
  %129 = and i32 %25, %17
  %130 = and i32 %34, %11
  %131 = or i32 %22, %13
  %132 = and i32 %46, %23
  %133 = and i32 %37, %51
  %134 = and i32 %37, %55
  %135 = or i32 %59, %55
  %136 = xor i32 %49, %1
  %137 = shl i32 %136, 2
  %138 = and i32 %23, %0
  %139 = and i32 %37, %11
  %140 = xor i32 %43, %68
  %141 = or i32 %4, %55
  %142 = and i32 %46, %59
  %143 = or i32 %68, %2
  %144 = or i32 %23, %47
  %145 = and i32 %59, %69
  %146 = or i32 %25, %17
  %147 = or i32 %49, %55
  %148 = xor i32 %15, %65
  %149 = xor i32 %73, -1
  %150 = xor i32 %124, %149
  %151 = xor i32 %54, %68
  %152 = or i32 %20, %0
  %153 = or i32 %113, %0
  %154 = and i32 %22, %51
  %155 = and i32 %22, %17
  %156 = and i32 %59, %55
  %157 = and i32 %59, %11
  %158 = or i32 %79, %113
  %159 = and i32 %54, %1
  %160 = xor i32 %79, %18
  %161 = or i32 %68, %23
  %162 = or i32 %49, %11
  %163 = and i32 %35, %4
  %164 = and i32 %54, %11
  %165 = or i32 %79, %20
  %166 = or i32 %44, %17
  %167 = or i32 %35, %59
  %168 = or i32 %59, %47
  %169 = and i32 %37, %12
  %170 = or i32 %5, %35
  %171 = xor i32 %34, %1
  %172 = or i32 %39, %90
  %173 = and i32 %35, %2
  %174 = xor i32 %12, %2
  %175 = or i32 %43, %17
  %176 = xor i32 %30, %31
  %177 = xor i32 %73, %101
  %178 = or i32 %79, %47
  %179 = xor i32 %79, %65
  %180 = or i32 %35, %126
  %181 = shl i32 %180, 1
  %182 = xor i32 %20, %0
  %183 = shl i32 %182, 1
  %184 = or i32 %68, %59
  %185 = add i32 %15, 1
  %186 = xor i32 %5, %1
  %187 = shl i32 %186, 1
  %188 = xor i32 %39, %100
  %189 = xor i32 %73, %74
  %190 = and i32 %35, %85
  %191 = xor i32 %54, %1
  %192 = or i32 %59, %13
  %193 = and i32 %12, %4
  %194 = and i32 %9, %17
  %195 = and i32 %22, %0
  %196 = or i32 %194, %195
  %197 = or i32 %126, %11
  %198 = or i32 %5, %9
  %199 = shl i32 %198, 1
  %200 = and i32 %18, %0
  %201 = or i32 %194, %200
  %202 = add i32 %79, 1
  %203 = and i32 %54, %35
  %204 = and i32 %4, %55
  %205 = and i32 %12, %23
  %206 = or i32 %15, %23
  %207 = xor i32 %79, %46
  %208 = and i32 %43, %17
  %209 = xor i32 %15, %2
  %210 = shl i32 %209, 1
  %211 = or i32 %15, %4
  %212 = or i32 %22, %68
  %213 = xor i32 %122, %149
  %214 = add i32 %12, 1
  %215 = or i32 %79, %11
  %216 = and i32 %12, %2
  %217 = xor i32 %46, %2
  %218 = and i32 %23, %69
  %219 = xor i32 %155, %41
  %220 = or i32 %4, %47
  %221 = or i32 %35, %49
  %222 = or i32 %20, %17
  %223 = shl i32 %222, 1
  %224 = or i32 %23, %17
  %225 = or i32 %18, %0
  %226 = or i32 %5, %11
  %227 = add i32 %46, 1
  %228 = xor i32 %194, -1
  %229 = xor i32 %200, %228
  %230 = and i32 %22, %69
  %231 = or i32 %5, %44
  %232 = xor i32 %34, %68
  %233 = xor i32 %18, %68
  %234 = or i32 %68, %126
  %235 = and i32 %4, %51
  %236 = or i32 %35, %4
  %237 = xor i32 %113, %0
  %238 = and i32 %121, %0
  %239 = or i32 %30, %238
  %240 = or i32 %37, %13
  %241 = or i32 %37, %1
  %242 = or i32 %73, %100
  %243 = add i32 %43, 1
  %244 = xor i32 %44, %0
  %245 = and i32 %23, %17
  %246 = or i32 %5, %55
  %247 = xor i32 %6, %1
  %248 = and i32 %37, %1
  %249 = xor i32 %47, %2
  %250 = xor i32 %43, %0
  %251 = shl i32 %69, 2
  %252 = and i32 %85, %11
  %253 = xor i32 %195, %228
  %254 = xor i32 %126, %1
  %255 = or i32 %65, %17
  %256 = and i32 %34, %1
  %257 = xor i32 %25, %0
  %258 = xor i32 %69, %2
  %259 = and i32 %113, %17
  %260 = shl i32 %259, 1
  %261 = and i32 %20, %17
  %262 = shl i32 %261, 3
  %263 = and i32 %113, %0
  %264 = and i32 %20, %0
  %265 = mul i32 %264, -7
  %266 = and i32 %44, %17
  %267 = and i32 %44, %0
  %268 = mul i32 %267, -12
  %269 = shl i32 %39, 3
  %270 = add i32 %15, -1
  %271 = add i32 %270, %249
  %272 = add i32 %271, %25
  %273 = add i32 %272, %174
  %274 = add i32 %273, %143
  %275 = add i32 %274, %141
  %276 = add i32 %275, %99
  %277 = add i32 %276, %226
  %278 = add i32 %277, %255
  %279 = add i32 %278, %218
  %280 = add i32 %279, %208
  %281 = add i32 %280, %206
  %282 = add i32 %281, %203
  %283 = add i32 %282, %191
  %284 = add i32 %283, %166
  %285 = add i32 %284, %160
  %286 = add i32 %285, %154
  %287 = add i32 %286, %153
  %288 = add i32 %287, %130
  %289 = add i32 %288, %111
  %290 = add i32 %289, %108
  %291 = add i32 %290, %80
  %292 = add i32 %291, %19
  %293 = shl i32 %292, 1
  %294 = add i32 %266, %204
  %295 = add i32 %294, %194
  %296 = sub i32 %215, %295
  %297 = add i32 %296, %97
  %298 = mul i32 %297, 5
  %299 = sub i32 %53, %197
  %300 = add i32 %299, %207
  %301 = add i32 %300, %146
  %302 = mul i32 %301, 3
  %303 = sub i32 %17, %1
  %304 = add i32 %303, %11
  %305 = sub i32 %304, %46
  %306 = add i32 %305, %12
  %307 = sub i32 %306, %68
  %308 = add i32 %307, %185
  %309 = add i32 %308, %214
  %310 = add i32 %309, %227
  %311 = add i32 %310, %4
  %312 = sub i32 %311, %14
  %313 = add i32 %312, %16
  %314 = add i32 %313, %28
  %315 = sub i32 %314, %48
  %316 = add i32 %315, %50
  %317 = sub i32 %316, %52
  %318 = sub i32 %317, %63
  %319 = sub i32 %318, %64
  %320 = sub i32 %319, %70
  %321 = add i32 %320, %72
  %322 = sub i32 %321, %9
  %323 = sub i32 %322, %34
  %324 = add i32 %323, %87
  %325 = add i32 %324, %22
  %326 = add i32 %325, %107
  %327 = sub i32 %326, %109
  %328 = add i32 %327, %79
  %329 = add i32 %328, %114
  %330 = add i32 %329, %126
  %331 = add i32 %330, %163
  %332 = sub i32 %331, %173
  %333 = sub i32 %332, %193
  %334 = add i32 %333, %202
  %335 = add i32 %334, %43
  %336 = add i32 %335, %6
  %337 = add i32 %336, %211
  %338 = add i32 %337, %216
  %339 = sub i32 %338, %217
  %340 = sub i32 %339, %220
  %341 = sub i32 %340, %235
  %342 = sub i32 %341, %236
  %343 = add i32 %342, %243
  %344 = sub i32 %343, %251
  %345 = sub i32 %344, %54
  %346 = sub i32 %345, %5
  %347 = add i32 %346, %258
  %348 = sub i32 %347, %10
  %349 = sub i32 %348, %21
  %350 = sub i32 %349, %24
  %351 = sub i32 %350, %36
  %352 = add i32 %351, %38
  %353 = add i32 %352, %45
  %354 = add i32 %353, %56
  %355 = sub i32 %354, %57
  %356 = add i32 %355, %58
  %357 = sub i32 %356, %60
  %358 = sub i32 %357, %61
  %359 = add i32 %358, %62
  %360 = add i32 %359, %66
  %361 = add i32 %360, %67
  %362 = add i32 %361, %71
  %363 = add i32 %362, %77
  %364 = sub i32 %363, %78
  %365 = sub i32 %364, %81
  %366 = sub i32 %365, %82
  %367 = sub i32 %366, %86
  %368 = sub i32 %367, %88
  %369 = add i32 %368, %89
  %370 = sub i32 %369, %92
  %371 = sub i32 %370, %95
  %372 = sub i32 %371, %96
  %373 = add i32 %372, %98
  %374 = sub i32 %373, %103
  %375 = sub i32 %374, %104
  %376 = sub i32 %375, %105
  %377 = sub i32 %376, %106
  %378 = sub i32 %377, %110
  %379 = add i32 %378, %112
  %380 = add i32 %379, %115
  %381 = sub i32 %380, %118
  %382 = sub i32 %381, %31
  %383 = sub i32 %382, %127
  %384 = sub i32 %383, %128
  %385 = sub i32 %384, %129
  %386 = sub i32 %385, %131
  %387 = add i32 %386, %132
  %388 = add i32 %387, %133
  %389 = sub i32 %388, %134
  %390 = sub i32 %389, %135
  %391 = sub i32 %390, %138
  %392 = add i32 %391, %139
  %393 = sub i32 %392, %140
  %394 = add i32 %393, %142
  %395 = sub i32 %394, %144
  %396 = sub i32 %395, %145
  %397 = add i32 %396, %147
  %398 = sub i32 %397, %148
  %399 = add i32 %398, %151
  %400 = add i32 %399, %152
  %401 = add i32 %400, %155
  %402 = add i32 %401, %156
  %403 = sub i32 %402, %157
  %404 = sub i32 %403, %158
  %405 = sub i32 %404, %159
  %406 = sub i32 %405, %161
  %407 = sub i32 %406, %162
  %408 = sub i32 %407, %90
  %409 = add i32 %408, %164
  %410 = add i32 %409, %165
  %411 = sub i32 %410, %167
  %412 = add i32 %411, %168
  %413 = add i32 %412, %169
  %414 = add i32 %413, %170
  %415 = add i32 %414, %171
  %416 = add i32 %415, %175
  %417 = sub i32 %416, %178
  %418 = sub i32 %417, %179
  %419 = add i32 %418, %184
  %420 = sub i32 %419, %190
  %421 = sub i32 %420, %100
  %422 = sub i32 %421, %192
  %423 = sub i32 %422, %74
  %424 = add i32 %423, %205
  %425 = sub i32 %424, %210
  %426 = sub i32 %425, %195
  %427 = sub i32 %426, %212
  %428 = sub i32 %427, %221
  %429 = add i32 %428, %224
  %430 = sub i32 %429, %225
  %431 = sub i32 %430, %230
  %432 = add i32 %431, %231
  %433 = add i32 %432, %232
  %434 = add i32 %433, %233
  %435 = sub i32 %434, %234
  %436 = add i32 %435, %237
  %437 = add i32 %436, %240
  %438 = add i32 %437, %241
  %439 = add i32 %438, %244
  %440 = add i32 %439, %245
  %441 = sub i32 %440, %246
  %442 = sub i32 %441, %247
  %443 = add i32 %442, %248
  %444 = add i32 %443, %250
  %445 = add i32 %444, %252
  %446 = add i32 %445, %254
  %447 = sub i32 %446, %40
  %448 = add i32 %447, %256
  %449 = add i32 %448, %257
  %450 = sub i32 %449, %263
  %451 = sub i32 %450, %27
  %452 = add i32 %451, %33
  %453 = add i32 %452, %42
  %454 = add i32 %453, %76
  %455 = sub i32 %454, %84
  %456 = sub i32 %455, %91
  %457 = sub i32 %456, %94
  %458 = add i32 %457, %102
  %459 = sub i32 %458, %117
  %460 = sub i32 %459, %120
  %461 = sub i32 %460, %123
  %462 = sub i32 %461, %125
  %463 = add i32 %462, %137
  %464 = sub i32 %463, %150
  %465 = add i32 %464, %172
  %466 = add i32 %465, %176
  %467 = sub i32 %466, %177
  %468 = sub i32 %467, %181
  %469 = sub i32 %468, %183
  %470 = sub i32 %469, %187
  %471 = add i32 %470, %188
  %472 = sub i32 %471, %189
  %473 = add i32 %472, %196
  %474 = sub i32 %473, %199
  %475 = sub i32 %474, %201
  %476 = add i32 %475, %213
  %477 = add i32 %476, %219
  %478 = sub i32 %477, %223
  %479 = add i32 %478, %229
  %480 = sub i32 %479, %239
  %481 = sub i32 %480, %242
  %482 = sub i32 %481, %253
  %483 = sub i32 %482, %260
  %484 = sub i32 %483, %262
  %485 = add i32 %484, %265
  %486 = add i32 %485, %268
  %487 = sub i32 %486, %269
  %488 = add i32 %487, %302
  %489 = add i32 %488, %298
  %490 = add i32 %489, %293
  %491 = icmp eq i32 %490, %8
  %492 = select i1 %491, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %493 = tail call i32 @puts(i8* nonnull dereferenceable(1) %492)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
