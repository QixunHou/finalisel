; ModuleID = '../.././c_source_file/1925_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1925_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %2
  %6 = and i32 %5, %0
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, %0
  %9 = or i32 %6, %8
  %10 = xor i32 %7, -1
  %11 = sub i32 %10, %9
  %12 = xor i32 %1, %0
  %13 = xor i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %12, %14
  %16 = and i32 %4, %0
  %17 = xor i32 %16, %2
  %18 = shl i32 %17, 1
  %19 = xor i32 %2, -1
  %20 = and i32 %19, %1
  %21 = or i32 %20, %16
  %22 = shl i32 %21, 1
  %23 = and i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %24, %1
  %26 = shl i32 %25, 1
  %27 = or i32 %19, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %12, %28
  %30 = or i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %14, %1
  %33 = xor i32 %20, -1
  %34 = add i32 %20, 1
  %35 = xor i32 %0, -1
  %36 = or i32 %2, %1
  %37 = or i32 %36, %35
  %38 = xor i32 %12, -1
  %39 = and i32 %13, %38
  %40 = or i32 %19, %1
  %41 = or i32 %40, %0
  %42 = and i32 %27, %1
  %43 = xor i32 %36, -1
  %44 = or i32 %43, %0
  %45 = or i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %14, %46
  %48 = and i32 %2, %1
  %49 = xor i32 %48, -1
  %50 = and i32 %49, %0
  %51 = or i32 %14, %1
  %52 = and i32 %19, %0
  %53 = xor i32 %52, -1
  %54 = xor i32 %53, %1
  %55 = shl i32 %54, 1
  %56 = or i32 %4, %0
  %57 = and i32 %7, %56
  %58 = xor i32 %56, -1
  %59 = or i32 %10, %58
  %60 = xor i32 %40, -1
  %61 = add i32 %40, 1
  %62 = and i32 %12, %24
  %63 = and i32 %1, %0
  %64 = or i32 %7, %63
  %65 = xor i32 %43, %0
  %66 = xor i32 %20, %0
  %67 = or i32 %58, %2
  %68 = and i32 %48, %0
  %69 = xor i32 %8, -1
  %70 = or i32 %68, %69
  %71 = xor i32 %28, %1
  %72 = xor i32 %36, %0
  %73 = or i32 %68, %72
  %74 = and i32 %24, %4
  %75 = or i32 %38, %2
  %76 = xor i32 %27, %63
  %77 = and i32 %48, %35
  %78 = and i32 %7, %0
  %79 = xor i32 %78, 2147483647
  %80 = xor i32 %79, %77
  %81 = or i32 %7, %0
  %82 = xor i32 %81, -1
  %83 = or i32 %6, %82
  %84 = and i32 %56, %10
  %85 = and i32 %53, %1
  %86 = and i32 %5, %35
  %87 = or i32 %4, %2
  %88 = and i32 %87, %0
  %89 = xor i32 %88, -1
  %90 = xor i32 %86, %89
  %91 = or i32 %48, %16
  %92 = and i32 %14, %4
  %93 = or i32 %12, %19
  %94 = xor i32 %23, %33
  %95 = shl i32 %7, 1
  %96 = and i32 %10, %0
  %97 = or i32 %14, %4
  %98 = xor i32 %63, -1
  %99 = and i32 %19, %98
  %100 = shl i32 %99, 1
  %101 = and i32 %19, %38
  %102 = and i32 %56, %2
  %103 = and i32 %13, %45
  %104 = and i32 %13, %56
  %105 = or i32 %52, %12
  %106 = or i32 %48, %35
  %107 = or i32 %12, %31
  %108 = xor i32 %40, %63
  %109 = or i32 %16, %10
  %110 = or i32 %20, %35
  %111 = and i32 %38, %2
  %112 = and i32 %12, %53
  %113 = or i32 %23, %38
  %114 = and i32 %24, %38
  %115 = add i32 %63, 1
  %116 = xor i32 %33, %0
  %117 = and i32 %30, %12
  %118 = or i32 %23, %20
  %119 = or i32 %43, %35
  %120 = add i32 %48, 1
  %121 = or i32 %49, %0
  %122 = shl i32 %121, 2
  %123 = xor i32 %6, %81
  %124 = or i32 %48, %0
  %125 = shl i32 %124, 1
  %126 = or i32 %16, %14
  %127 = or i32 %23, %58
  %128 = and i32 %30, %38
  %129 = or i32 %13, %63
  %130 = xor i32 %27, %1
  %131 = add i32 %52, 1
  %132 = or i32 %23, %4
  %133 = xor i32 %45, %2
  %134 = and i32 %10, %35
  %135 = and i32 %56, %19
  %136 = or i32 %7, %58
  %137 = add i32 %12, 1
  %138 = and i32 %45, %10
  %139 = shl i32 %138, 1
  %140 = and i32 %24, %1
  %141 = and i32 %7, %35
  %142 = xor i32 %141, -1
  %143 = xor i32 %68, %142
  %144 = xor i32 %49, %0
  %145 = or i32 %52, %1
  %146 = or i32 %13, %16
  %147 = or i32 %31, %1
  %148 = or i32 %19, %58
  %149 = and i32 %13, %12
  %150 = and i32 %27, %12
  %151 = or i32 %68, %141
  %152 = or i32 %63, %10
  %153 = xor i32 %36, %63
  %154 = xor i32 %87, %0
  %155 = or i32 %6, %154
  %156 = or i32 %63, %28
  %157 = xor i32 %16, -1
  %158 = and i32 %7, %157
  %159 = or i32 %33, %0
  %160 = or i32 %49, %35
  %161 = shl i32 %160, 1
  %162 = or i32 %13, %12
  %163 = or i32 %63, %14
  %164 = xor i32 %52, %49
  %165 = and i32 %13, %157
  %166 = and i32 %13, %4
  %167 = shl i32 %166, 1
  %168 = or i32 %28, %38
  %169 = or i32 %20, %0
  %170 = or i32 %86, %96
  %171 = xor i32 %48, %0
  %172 = or i32 %13, %4
  %173 = shl i32 %172, 1
  %174 = xor i32 %87, -1
  %175 = or i32 %174, %0
  %176 = xor i32 %6, %175
  %177 = xor i32 %31, %1
  %178 = and i32 %7, %98
  %179 = and i32 %27, %4
  %180 = shl i32 %179, 1
  %181 = or i32 %52, %60
  %182 = xor i32 %6, %69
  %183 = or i32 %13, %58
  %184 = xor i32 %23, %1
  %185 = shl i32 %184, 1
  %186 = or i32 %19, %46
  %187 = xor i32 %16, %49
  %188 = and i32 %14, %157
  %189 = and i32 %53, %38
  %190 = add i32 %45, 1
  %191 = and i32 %40, %0
  %192 = xor i32 %10, %0
  %193 = and i32 %30, %1
  %194 = and i32 %12, %14
  %195 = or i32 %52, %48
  %196 = and i32 %27, %38
  %197 = or i32 %63, %43
  %198 = xor i32 %58, %2
  %199 = and i32 %13, %98
  %200 = xor i32 %46, %2
  %201 = and i32 %40, %35
  %202 = shl i32 %201, 1
  %203 = xor i32 %30, %1
  %204 = xor i32 %23, %45
  %205 = and i32 %10, %98
  %206 = and i32 %33, %35
  %207 = shl i32 %206, 1
  %208 = xor i32 %98, %2
  %209 = or i32 %40, %35
  %210 = shl i32 %209, 1
  %211 = xor i32 %56, %2
  %212 = and i32 %10, %157
  %213 = xor i32 %36, 2147483647
  %214 = or i32 %213, %0
  %215 = xor i32 %214, %68
  %216 = shl i32 %215, 1
  %217 = xor i32 %154, -1
  %218 = xor i32 %6, %217
  %219 = and i32 %43, %35
  %220 = and i32 %20, %35
  %221 = and i32 %43, %0
  %222 = mul i32 %221, 10
  %223 = and i32 %20, %0
  %224 = and i32 %60, %35
  %225 = mul i32 %77, 13
  %226 = and i32 %60, %0
  %227 = mul i32 %226, 14
  %228 = mul i32 %68, -9
  %229 = sub i32 %104, %109
  %230 = sub i32 %229, %29
  %231 = mul i32 %230, 5
  %232 = add i32 %224, %220
  %233 = mul i32 %232, -11
  %234 = sub i32 %219, %223
  %235 = mul i32 %234, 12
  %236 = add i32 %83, %107
  %237 = mul i32 %236, -3
  %238 = add i32 %182, %12
  %239 = shl i32 %238, 2
  %240 = sub i32 -2, %0
  %241 = add i32 %240, %56
  %242 = add i32 %241, %208
  %243 = add i32 %242, %24
  %244 = add i32 %243, %141
  %245 = add i32 %244, %163
  %246 = add i32 %245, %159
  %247 = add i32 %246, %128
  %248 = add i32 %247, %118
  %249 = add i32 %248, %65
  %250 = add i32 %249, %57
  %251 = add i32 %250, %80
  %252 = shl i32 %251, 1
  %253 = add i32 %0, 1
  %254 = add i32 %253, %45
  %255 = add i32 %254, %115
  %256 = add i32 %255, %58
  %257 = add i32 %256, %137
  %258 = sub i32 %257, %63
  %259 = sub i32 %258, %16
  %260 = add i32 %259, %190
  %261 = add i32 %260, %157
  %262 = add i32 %261, %34
  %263 = add i32 %262, %20
  %264 = add i32 %263, %61
  %265 = add i32 %264, %67
  %266 = add i32 %265, %75
  %267 = add i32 %266, %93
  %268 = sub i32 %267, %101
  %269 = add i32 %268, %102
  %270 = add i32 %269, %14
  %271 = add i32 %270, %111
  %272 = add i32 %271, %43
  %273 = add i32 %272, %120
  %274 = add i32 %273, %23
  %275 = add i32 %274, %131
  %276 = add i32 %275, %133
  %277 = add i32 %276, %135
  %278 = add i32 %277, %148
  %279 = add i32 %278, %186
  %280 = sub i32 %279, %198
  %281 = add i32 %280, %200
  %282 = add i32 %281, %211
  %283 = sub i32 %282, %15
  %284 = add i32 %283, %18
  %285 = add i32 %284, %32
  %286 = add i32 %285, %37
  %287 = add i32 %286, %39
  %288 = sub i32 %287, %41
  %289 = add i32 %288, %42
  %290 = sub i32 %289, %44
  %291 = sub i32 %290, %47
  %292 = add i32 %291, %50
  %293 = add i32 %292, %51
  %294 = add i32 %293, %59
  %295 = sub i32 %294, %62
  %296 = add i32 %295, %64
  %297 = sub i32 %296, %66
  %298 = add i32 %297, %71
  %299 = add i32 %298, %74
  %300 = sub i32 %299, %76
  %301 = sub i32 %300, %84
  %302 = sub i32 %301, %85
  %303 = add i32 %302, %91
  %304 = add i32 %303, %92
  %305 = add i32 %304, %94
  %306 = sub i32 %305, %95
  %307 = sub i32 %306, %96
  %308 = add i32 %307, %97
  %309 = sub i32 %308, %100
  %310 = sub i32 %309, %103
  %311 = add i32 %310, %105
  %312 = sub i32 %311, %106
  %313 = add i32 %312, %108
  %314 = sub i32 %313, %110
  %315 = add i32 %314, %112
  %316 = sub i32 %315, %113
  %317 = add i32 %316, %114
  %318 = sub i32 %317, %116
  %319 = sub i32 %318, %117
  %320 = add i32 %319, %119
  %321 = add i32 %320, %126
  %322 = add i32 %321, %127
  %323 = add i32 %322, %129
  %324 = sub i32 %323, %130
  %325 = sub i32 %324, %132
  %326 = sub i32 %325, %134
  %327 = sub i32 %326, %136
  %328 = sub i32 %327, %140
  %329 = sub i32 %328, %78
  %330 = add i32 %329, %144
  %331 = sub i32 %330, %145
  %332 = sub i32 %331, %146
  %333 = sub i32 %332, %147
  %334 = add i32 %333, %149
  %335 = add i32 %334, %150
  %336 = sub i32 %335, %152
  %337 = sub i32 %336, %153
  %338 = add i32 %337, %156
  %339 = add i32 %338, %158
  %340 = add i32 %339, %162
  %341 = add i32 %340, %164
  %342 = sub i32 %341, %165
  %343 = add i32 %342, %168
  %344 = add i32 %343, %169
  %345 = sub i32 %344, %171
  %346 = add i32 %345, %177
  %347 = add i32 %346, %178
  %348 = add i32 %347, %181
  %349 = add i32 %348, %183
  %350 = add i32 %349, %187
  %351 = add i32 %350, %188
  %352 = sub i32 %351, %189
  %353 = sub i32 %352, %191
  %354 = sub i32 %353, %192
  %355 = sub i32 %354, %193
  %356 = add i32 %355, %194
  %357 = add i32 %356, %195
  %358 = sub i32 %357, %196
  %359 = add i32 %358, %197
  %360 = sub i32 %359, %199
  %361 = add i32 %360, %203
  %362 = add i32 %361, %204
  %363 = add i32 %362, %205
  %364 = sub i32 %363, %212
  %365 = sub i32 %364, %22
  %366 = sub i32 %365, %26
  %367 = sub i32 %366, %55
  %368 = add i32 %367, %70
  %369 = add i32 %368, %73
  %370 = sub i32 %369, %90
  %371 = sub i32 %370, %122
  %372 = sub i32 %371, %123
  %373 = sub i32 %372, %125
  %374 = sub i32 %373, %139
  %375 = sub i32 %374, %143
  %376 = add i32 %375, %151
  %377 = add i32 %376, %155
  %378 = sub i32 %377, %161
  %379 = sub i32 %378, %167
  %380 = add i32 %379, %170
  %381 = sub i32 %380, %173
  %382 = sub i32 %381, %176
  %383 = sub i32 %382, %180
  %384 = sub i32 %383, %185
  %385 = sub i32 %384, %202
  %386 = sub i32 %385, %207
  %387 = sub i32 %386, %210
  %388 = sub i32 %387, %218
  %389 = add i32 %388, %222
  %390 = add i32 %389, %225
  %391 = add i32 %390, %227
  %392 = add i32 %391, %228
  %393 = add i32 %392, %233
  %394 = add i32 %393, %235
  %395 = sub i32 %394, %216
  %396 = add i32 %395, %231
  %397 = add i32 %396, %237
  %398 = add i32 %397, %239
  %399 = add i32 %398, %252
  %400 = icmp eq i32 %11, %399
  %401 = select i1 %400, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %402 = tail call i32 @puts(i8* nonnull dereferenceable(1) %401)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
