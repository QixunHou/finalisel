digraph "DFG for'crackme' function" {
	Node0x1051d50[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1051dc0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1051e30[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1051ea0[shape=record, label="  %8 = and i32 %7, %3"];
	Node0x1051f10[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1051fb0[shape=record, label="  %10 = shl i32 %7, 1"];
	Node0x1052020[shape=record, label="  %11 = add i32 %1, 1"];
	Node0x1052090[shape=record, label="  %12 = add i32 %11, %10"];
	Node0x1052100[shape=record, label="  %13 = sub i32 %12, %6"];
	Node0x1052170[shape=record, label="  %14 = add i32 %13, %9"];
	Node0x10521e0[shape=record, label="  %15 = and i32 %5, %1"];
	Node0x1052250[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x10522c0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x1052330[shape=record, label="  %18 = and i32 %2, %1"];
	Node0x10523a0[shape=record, label="  %19 = shl i32 %15, 1"];
	Node0x1052410[shape=record, label="  %20 = and i32 %3, %0"];
	Node0x1052480[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x1052520[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x1052590[shape=record, label="  %23 = xor i32 %3, %0"];
	Node0x1052600[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x1052670[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x10526e0[shape=record, label="  %26 = or i32 %3, %0"];
	Node0x1052750[shape=record, label="  %27 = or i32 %7, %3"];
	Node0x10527f0[shape=record, label="  %28 = shl i32 %26, 2"];
	Node0x1052890[shape=record, label="  %29 = xor i32 %28, -4"];
	Node0x1052900[shape=record, label="  %30 = shl i32 %27, 2"];
	Node0x1052970[shape=record, label="  %31 = xor i32 %30, -4"];
	Node0x10529e0[shape=record, label="  %32 = shl i32 %8, 2"];
	Node0x1052c60[shape=record, label="  %33 = add i32 %20, %18"];
	Node0x1052d00[shape=record, label="  %34 = mul i32 %33, -3"];
	Node0x1052d70[shape=record, label="  %35 = add i32 %11, %2"];
	Node0x1052de0[shape=record, label="  %36 = add i32 %35, %15"];
	Node0x1052e50[shape=record, label="  %37 = add i32 %36, %18"];
	Node0x1052ec0[shape=record, label="  %38 = sub i32 %37, %16"];
	Node0x1052f30[shape=record, label="  %39 = add i32 %38, %6"];
	Node0x1052fa0[shape=record, label="  %40 = add i32 %39, %17"];
	Node0x1053010[shape=record, label="  %41 = sub i32 %40, %19"];
	Node0x1053080[shape=record, label="  %42 = sub i32 %41, %26"];
	Node0x10530f0[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x1053160[shape=record, label="  %44 = add i32 %43, %24"];
	Node0x10531d0[shape=record, label="  %45 = sub i32 %44, %32"];
	Node0x1053240[shape=record, label="  %46 = add i32 %45, %22"];
	Node0x10532b0[shape=record, label="  %47 = add i32 %46, %25"];
	Node0x1053320[shape=record, label="  %48 = sub i32 %47, %29"];
	Node0x1053390[shape=record, label="  %49 = sub i32 %48, %31"];
	Node0x1053400[shape=record, label="  %50 = add i32 %49, %34"];
	Node0x1053470[shape=record, label="  %51 = icmp eq i32 %14, %50"];
	Node0xff2268[shape=record, label="  %52 = select i1 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1053910[shape=record, label="  %53 = tail call i32 @puts(i8* nonnull dereferenceable(1) %52)"];
	Node0x1053960[shape=record, label="  ret void"];
	Node0x1051d50 -> Node0x1051dc0;
	Node0x1051dc0 -> Node0x1051e30;
	Node0x1051e30 -> Node0x1051ea0;
	Node0x1051ea0 -> Node0x1051f10;
	Node0x1051f10 -> Node0x1051fb0;
	Node0x1051fb0 -> Node0x1052020;
	Node0x1052020 -> Node0x1052090;
	Node0x1052090 -> Node0x1052100;
	Node0x1052100 -> Node0x1052170;
	Node0x1052170 -> Node0x10521e0;
	Node0x10521e0 -> Node0x1052250;
	Node0x1052250 -> Node0x10522c0;
	Node0x10522c0 -> Node0x1052330;
	Node0x1052330 -> Node0x10523a0;
	Node0x10523a0 -> Node0x1052410;
	Node0x1052410 -> Node0x1052480;
	Node0x1052480 -> Node0x1052520;
	Node0x1052520 -> Node0x1052590;
	Node0x1052590 -> Node0x1052600;
	Node0x1052600 -> Node0x1052670;
	Node0x1052670 -> Node0x10526e0;
	Node0x10526e0 -> Node0x1052750;
	Node0x1052750 -> Node0x10527f0;
	Node0x10527f0 -> Node0x1052890;
	Node0x1052890 -> Node0x1052900;
	Node0x1052900 -> Node0x1052970;
	Node0x1052970 -> Node0x10529e0;
	Node0x10529e0 -> Node0x1052c60;
	Node0x1052c60 -> Node0x1052d00;
	Node0x1052d00 -> Node0x1052d70;
	Node0x1052d70 -> Node0x1052de0;
	Node0x1052de0 -> Node0x1052e50;
	Node0x1052e50 -> Node0x1052ec0;
	Node0x1052ec0 -> Node0x1052f30;
	Node0x1052f30 -> Node0x1052fa0;
	Node0x1052fa0 -> Node0x1053010;
	Node0x1053010 -> Node0x1053080;
	Node0x1053080 -> Node0x10530f0;
	Node0x10530f0 -> Node0x1053160;
	Node0x1053160 -> Node0x10531d0;
	Node0x10531d0 -> Node0x1053240;
	Node0x1053240 -> Node0x10532b0;
	Node0x10532b0 -> Node0x1053320;
	Node0x1053320 -> Node0x1053390;
	Node0x1053390 -> Node0x1053400;
	Node0x1053400 -> Node0x1053470;
	Node0x1053470 -> Node0xff2268;
	Node0xff2268 -> Node0x1053910;
	Node0x1053910 -> Node0x1053960;
edge [color=red]
	Node0x1051d50 -> Node0x1051dc0;
	Node0x1051e30 -> Node0x1051ea0;
	Node0x1051ea0 -> Node0x1051f10;
	Node0x1051e30 -> Node0x1051fb0;
	Node0x1052020 -> Node0x1052090;
	Node0x1051fb0 -> Node0x1052090;
	Node0x1052090 -> Node0x1052100;
	Node0x1051dc0 -> Node0x1052100;
	Node0x1052100 -> Node0x1052170;
	Node0x1051f10 -> Node0x1052170;
	Node0x1051d50 -> Node0x10521e0;
	Node0x1052250 -> Node0x10522c0;
	Node0x10521e0 -> Node0x10523a0;
	Node0x1052410 -> Node0x1052480;
	Node0x1052480 -> Node0x1052520;
	Node0x1052590 -> Node0x1052600;
	Node0x1052600 -> Node0x1052670;
	Node0x1051e30 -> Node0x1052750;
	Node0x10526e0 -> Node0x10527f0;
	Node0x10527f0 -> Node0x1052890;
	Node0x1052750 -> Node0x1052900;
	Node0x1052900 -> Node0x1052970;
	Node0x1051ea0 -> Node0x10529e0;
	Node0x1052410 -> Node0x1052c60;
	Node0x1052330 -> Node0x1052c60;
	Node0x1052c60 -> Node0x1052d00;
	Node0x1052020 -> Node0x1052d70;
	Node0x1052d70 -> Node0x1052de0;
	Node0x10521e0 -> Node0x1052de0;
	Node0x1052de0 -> Node0x1052e50;
	Node0x1052330 -> Node0x1052e50;
	Node0x1052e50 -> Node0x1052ec0;
	Node0x1052250 -> Node0x1052ec0;
	Node0x1052ec0 -> Node0x1052f30;
	Node0x1051dc0 -> Node0x1052f30;
	Node0x1052f30 -> Node0x1052fa0;
	Node0x10522c0 -> Node0x1052fa0;
	Node0x1052fa0 -> Node0x1053010;
	Node0x10523a0 -> Node0x1053010;
	Node0x1053010 -> Node0x1053080;
	Node0x10526e0 -> Node0x1053080;
	Node0x1053080 -> Node0x10530f0;
	Node0x1052750 -> Node0x10530f0;
	Node0x10530f0 -> Node0x1053160;
	Node0x1052600 -> Node0x1053160;
	Node0x1053160 -> Node0x10531d0;
	Node0x10529e0 -> Node0x10531d0;
	Node0x10531d0 -> Node0x1053240;
	Node0x1052520 -> Node0x1053240;
	Node0x1053240 -> Node0x10532b0;
	Node0x1052670 -> Node0x10532b0;
	Node0x10532b0 -> Node0x1053320;
	Node0x1052890 -> Node0x1053320;
	Node0x1053320 -> Node0x1053390;
	Node0x1052970 -> Node0x1053390;
	Node0x1053390 -> Node0x1053400;
	Node0x1052d00 -> Node0x1053400;
	Node0x1052170 -> Node0x1053470;
	Node0x1053400 -> Node0x1053470;
	Node0x1053470 -> Node0xff2268;
	Node0xff2268 -> Node0x1053910;
}
