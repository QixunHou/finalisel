; ModuleID = '../.././c_source_file/1995_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1995_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = shl i32 %6, 1
  %8 = or i32 %4, %3
  %9 = and i32 %1, %0
  %10 = xor i32 %2, %1
  %11 = or i32 %10, %9
  %12 = or i32 %1, %0
  %13 = xor i32 %10, -1
  %14 = and i32 %12, %13
  %15 = add i32 %14, %11
  %16 = add i32 %15, %8
  %17 = sub i32 %7, %16
  %18 = xor i32 %4, -1
  %19 = or i32 %18, %3
  %20 = xor i32 %3, -1
  %21 = or i32 %20, %4
  %22 = and i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = add i32 %8, 1
  %25 = add i32 %19, 1
  %26 = xor i32 %1, -1
  %27 = and i32 %26, %0
  %28 = xor i32 %2, -1
  %29 = and i32 %28, %1
  %30 = or i32 %29, %27
  %31 = xor i32 %1, %0
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %31, %33
  %35 = or i32 %26, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %10, %36
  %38 = shl i32 %13, 1
  %39 = xor i32 %0, -1
  %40 = and i32 %26, %2
  %41 = and i32 %40, %39
  %42 = or i32 %26, %2
  %43 = and i32 %42, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %41, %44
  %46 = xor i32 %27, %2
  %47 = and i32 %2, %0
  %48 = xor i32 %31, -1
  %49 = or i32 %47, %48
  %50 = or i32 %28, %1
  %51 = and i32 %50, %0
  %52 = or i32 %47, %29
  %53 = or i32 %27, %33
  %54 = and i32 %2, %1
  %55 = and i32 %54, %0
  %56 = xor i32 %10, %0
  %57 = xor i32 %55, %56
  %58 = xor i32 %9, -1
  %59 = or i32 %2, %1
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %39
  %62 = shl i32 %61, 2
  %63 = or i32 %28, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %64, %1
  %66 = and i32 %54, %39
  %67 = and i32 %59, %0
  %68 = or i32 %66, %67
  %69 = xor i32 %59, %0
  %70 = or i32 %54, %27
  %71 = xor i32 %29, -1
  %72 = xor i32 %71, %0
  %73 = and i32 %10, %12
  %74 = and i32 %35, %33
  %75 = and i32 %10, %0
  %76 = xor i32 %75, 2147483647
  %77 = xor i32 %76, %66
  %78 = or i32 %47, %26
  %79 = or i32 %10, %39
  %80 = xor i32 %41, %79
  %81 = or i32 %66, %75
  %82 = xor i32 %36, %2
  %83 = xor i32 %59, %9
  %84 = and i32 %12, %33
  %85 = and i32 %28, %0
  %86 = xor i32 %85, -1
  %87 = and i32 %86, %1
  %88 = and i32 %58, %2
  %89 = xor i32 %54, -1
  %90 = or i32 %89, %39
  %91 = or i32 %64, %26
  %92 = shl i32 %91, 1
  %93 = xor i32 %89, %0
  %94 = xor i32 %58, %2
  %95 = or i32 %50, %39
  %96 = or i32 %33, %48
  %97 = and i32 %32, %48
  %98 = and i32 %40, %0
  %99 = or i32 %98, %56
  %100 = or i32 %10, %0
  %101 = xor i32 %100, -1
  %102 = or i32 %98, %101
  %103 = shl i32 %64, 1
  %104 = or i32 %85, %54
  %105 = or i32 %2, %0
  %106 = or i32 %36, %2
  %107 = and i32 %89, %39
  %108 = and i32 %32, %31
  %109 = or i32 %71, %39
  %110 = or i32 %59, %39
  %111 = and i32 %13, %39
  %112 = and i32 %105, %26
  %113 = and i32 %10, %58
  %114 = shl i32 %113, 1
  %115 = xor i32 %85, %50
  %116 = xor i32 %12, -1
  %117 = xor i32 %98, %100
  %118 = or i32 %32, %27
  %119 = shl i32 %56, 1
  %120 = xor i32 %105, -1
  %121 = or i32 %120, %26
  %122 = xor i32 %116, %2
  %123 = xor i32 %27, -1
  %124 = add i32 %27, 1
  %125 = or i32 %9, %2
  %126 = shl i32 %2, 1
  %127 = or i32 %9, %64
  %128 = and i32 %59, %39
  %129 = or i32 %55, %128
  %130 = or i32 %13, %39
  %131 = shl i32 %130, 1
  %132 = and i32 %105, %1
  %133 = and i32 %12, %2
  %134 = or i32 %47, %116
  %135 = xor i32 %47, %12
  %136 = or i32 %28, %116
  %137 = and i32 %63, %1
  %138 = xor i32 %47, -1
  %139 = and i32 %138, %1
  %140 = add i32 %2, 1
  %141 = and i32 %32, %1
  %142 = or i32 %32, %116
  %143 = and i32 %32, %26
  %144 = or i32 %31, %33
  %145 = or i32 %29, %39
  %146 = xor i32 %55, 2147483647
  %147 = xor i32 %146, %69
  %148 = or i32 %54, %0
  %149 = and i32 %10, %39
  %150 = or i32 %55, %149
  %151 = or i32 %32, %36
  %152 = and i32 %35, %28
  %153 = or i32 %9, %28
  %154 = or i32 %31, %2
  %155 = and i32 %42, %39
  %156 = xor i32 %155, -1
  %157 = xor i32 %98, %156
  %158 = or i32 %120, %1
  %159 = and i32 %33, %48
  %160 = xor i32 %123, %2
  %161 = xor i32 %54, %0
  %162 = or i32 %27, %2
  %163 = and i32 %31, %86
  %164 = xor i32 %47, %59
  %165 = xor i32 %146, %128
  %166 = and i32 %31, %2
  %167 = xor i32 %29, %0
  %168 = and i32 %32, %12
  %169 = or i32 %60, %0
  %170 = or i32 %54, %39
  %171 = xor i32 %13, %0
  %172 = or i32 %71, %0
  %173 = xor i32 %149, -1
  %174 = xor i32 %55, %173
  %175 = or i32 %31, %120
  %176 = and i32 %138, %48
  %177 = xor i32 %27, %89
  %178 = xor i32 %47, %35
  %179 = or i32 %85, %26
  %180 = or i32 %33, %116
  %181 = or i32 %59, %0
  %182 = and i32 %12, %28
  %183 = and i32 %31, %138
  %184 = and i32 %86, %26
  %185 = or i32 %33, %1
  %186 = or i32 %47, %1
  %187 = shl i32 %186, 1
  %188 = xor i32 %35, %2
  %189 = and i32 %13, %123
  %190 = or i32 %31, %64
  %191 = or i32 %32, %26
  %192 = xor i32 %60, %0
  %193 = xor i32 %50, -1
  %194 = add i32 %105, 1
  %195 = or i32 %98, %155
  %196 = or i32 %64, %48
  %197 = shl i32 %149, 1
  %198 = or i32 %32, %9
  %199 = and i32 %28, %58
  %200 = or i32 %10, %116
  %201 = or i32 %13, %116
  %202 = and i32 %60, %39
  %203 = mul i32 %202, -18
  %204 = and i32 %29, %39
  %205 = shl i32 %204, 2
  %206 = and i32 %60, %0
  %207 = mul i32 %206, -15
  %208 = and i32 %29, %0
  %209 = mul i32 %208, -7
  %210 = and i32 %193, %39
  %211 = mul i32 %210, -20
  %212 = and i32 %193, %0
  %213 = mul i32 %212, -44
  %214 = mul i32 %55, -27
  %215 = add i32 %58, %116
  %216 = add i32 %215, %182
  %217 = add i32 %216, %88
  %218 = add i32 %217, %181
  %219 = add i32 %218, %180
  %220 = add i32 %219, %158
  %221 = add i32 %220, %142
  %222 = add i32 %221, %134
  %223 = add i32 %222, %84
  %224 = add i32 %223, %74
  %225 = add i32 %224, %147
  %226 = add i32 %225, %165
  %227 = add i32 %226, %77
  %228 = shl i32 %227, 1
  %229 = sub i32 %12, %151
  %230 = add i32 %229, %25
  %231 = add i32 %230, %99
  %232 = add i32 %231, %24
  %233 = add i32 %232, %23
  %234 = mul i32 %233, 3
  %235 = add i32 %175, %82
  %236 = add i32 %235, %66
  %237 = sub i32 %236, %115
  %238 = add i32 %237, %49
  %239 = mul i32 %238, 5
  %240 = add i32 %0, 2
  %241 = sub i32 %240, %1
  %242 = add i32 %241, %48
  %243 = add i32 %242, %124
  %244 = add i32 %243, %140
  %245 = sub i32 %244, %3
  %246 = sub i32 %245, %46
  %247 = sub i32 %246, %94
  %248 = sub i32 %247, %105
  %249 = add i32 %248, %106
  %250 = sub i32 %249, %122
  %251 = add i32 %250, %60
  %252 = add i32 %251, %125
  %253 = sub i32 %252, %126
  %254 = add i32 %253, %133
  %255 = sub i32 %254, %136
  %256 = sub i32 %255, %152
  %257 = sub i32 %256, %153
  %258 = add i32 %257, %154
  %259 = add i32 %258, %160
  %260 = add i32 %259, %162
  %261 = sub i32 %260, %32
  %262 = sub i32 %261, %166
  %263 = sub i32 %262, %85
  %264 = sub i32 %263, %188
  %265 = add i32 %264, %193
  %266 = add i32 %265, %194
  %267 = sub i32 %266, %199
  %268 = sub i32 %267, %30
  %269 = add i32 %268, %34
  %270 = sub i32 %269, %37
  %271 = sub i32 %270, %38
  %272 = add i32 %271, %51
  %273 = sub i32 %272, %52
  %274 = add i32 %273, %53
  %275 = add i32 %274, %65
  %276 = sub i32 %275, %69
  %277 = add i32 %276, %70
  %278 = sub i32 %277, %72
  %279 = sub i32 %278, %73
  %280 = add i32 %279, %78
  %281 = sub i32 %280, %83
  %282 = add i32 %281, %87
  %283 = sub i32 %282, %90
  %284 = add i32 %283, %93
  %285 = add i32 %284, %95
  %286 = add i32 %285, %96
  %287 = add i32 %286, %97
  %288 = sub i32 %287, %103
  %289 = sub i32 %288, %104
  %290 = sub i32 %289, %107
  %291 = add i32 %290, %108
  %292 = add i32 %291, %109
  %293 = add i32 %292, %110
  %294 = add i32 %293, %100
  %295 = add i32 %294, %111
  %296 = add i32 %295, %112
  %297 = add i32 %296, %118
  %298 = add i32 %297, %121
  %299 = add i32 %298, %67
  %300 = add i32 %299, %127
  %301 = add i32 %300, %132
  %302 = sub i32 %301, %135
  %303 = add i32 %302, %137
  %304 = sub i32 %303, %139
  %305 = add i32 %304, %141
  %306 = sub i32 %305, %143
  %307 = add i32 %306, %144
  %308 = sub i32 %307, %145
  %309 = add i32 %308, %148
  %310 = sub i32 %309, %159
  %311 = sub i32 %310, %161
  %312 = sub i32 %311, %163
  %313 = sub i32 %312, %164
  %314 = sub i32 %313, %167
  %315 = sub i32 %314, %168
  %316 = add i32 %315, %169
  %317 = sub i32 %316, %170
  %318 = sub i32 %317, %171
  %319 = add i32 %318, %172
  %320 = add i32 %319, %176
  %321 = sub i32 %320, %177
  %322 = sub i32 %321, %178
  %323 = add i32 %322, %179
  %324 = sub i32 %323, %183
  %325 = sub i32 %324, %184
  %326 = sub i32 %325, %185
  %327 = sub i32 %326, %189
  %328 = add i32 %327, %190
  %329 = add i32 %328, %191
  %330 = add i32 %329, %192
  %331 = sub i32 %330, %196
  %332 = sub i32 %331, %198
  %333 = sub i32 %332, %200
  %334 = add i32 %333, %201
  %335 = sub i32 %334, %19
  %336 = add i32 %335, %21
  %337 = sub i32 %336, %45
  %338 = add i32 %337, %57
  %339 = add i32 %338, %62
  %340 = add i32 %339, %68
  %341 = add i32 %340, %80
  %342 = sub i32 %341, %81
  %343 = sub i32 %342, %92
  %344 = add i32 %343, %102
  %345 = sub i32 %344, %114
  %346 = add i32 %345, %117
  %347 = sub i32 %346, %119
  %348 = sub i32 %347, %129
  %349 = sub i32 %348, %131
  %350 = sub i32 %349, %150
  %351 = sub i32 %350, %157
  %352 = sub i32 %351, %174
  %353 = sub i32 %352, %187
  %354 = add i32 %353, %195
  %355 = sub i32 %354, %197
  %356 = add i32 %355, %203
  %357 = sub i32 %356, %205
  %358 = add i32 %357, %207
  %359 = add i32 %358, %209
  %360 = add i32 %359, %211
  %361 = add i32 %360, %213
  %362 = add i32 %361, %214
  %363 = add i32 %362, %239
  %364 = add i32 %363, %234
  %365 = add i32 %364, %228
  %366 = icmp eq i32 %17, %365
  %367 = select i1 %366, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %368 = tail call i32 @puts(i8* nonnull dereferenceable(1) %367)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
