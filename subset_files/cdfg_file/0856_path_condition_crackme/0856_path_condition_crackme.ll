; ModuleID = '../.././c_source_file/0856_path_condition_crackme.c'
source_filename = "../.././c_source_file/0856_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %1
  %8 = or i32 %7, %0
  %9 = xor i32 %3, -1
  %10 = or i32 %5, %4
  %11 = xor i32 %10, -1
  %12 = or i32 %11, %9
  %13 = add i32 %12, %8
  %14 = xor i32 %2, -1
  %15 = and i32 %14, %0
  %16 = or i32 %14, %1
  %17 = xor i32 %16, -1
  %18 = or i32 %15, %17
  %19 = and i32 %2, %1
  %20 = xor i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = add i32 %20, 1
  %23 = xor i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = and i32 %24, %2
  %26 = or i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %2
  %29 = xor i32 %1, -1
  %30 = and i32 %29, %0
  %31 = xor i32 %0, -1
  %32 = and i32 %14, %1
  %33 = xor i32 %32, -1
  %34 = or i32 %33, %31
  %35 = or i32 %29, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %7, -1
  %38 = or i32 %37, %36
  %39 = and i32 %19, %0
  %40 = or i32 %2, %1
  %41 = and i32 %40, %31
  %42 = or i32 %39, %41
  %43 = or i32 %16, %31
  %44 = or i32 %32, %31
  %45 = and i32 %19, %31
  %46 = and i32 %40, %0
  %47 = or i32 %45, %46
  %48 = or i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %49, %24
  %51 = and i32 %7, %0
  %52 = xor i32 %45, -1
  %53 = xor i32 %51, %52
  %54 = and i32 %26, %14
  %55 = or i32 %14, %0
  %56 = xor i32 %55, -1
  %57 = xor i32 %56, %1
  %58 = and i32 %29, %2
  %59 = and i32 %58, %0
  %60 = or i32 %29, %2
  %61 = and i32 %60, %31
  %62 = or i32 %59, %61
  %63 = or i32 %21, %36
  %64 = and i32 %26, %21
  %65 = shl i32 %64, 1
  %66 = or i32 %7, %27
  %67 = and i32 %1, %0
  %68 = or i32 %20, %67
  %69 = shl i32 %68, 1
  %70 = xor i32 %46, %52
  %71 = and i32 %21, %24
  %72 = xor i32 %59, %8
  %73 = xor i32 %7, %0
  %74 = xor i32 %73, 2147483647
  %75 = or i32 %74, %39
  %76 = shl i32 %75, 1
  %77 = and i32 %2, %0
  %78 = xor i32 %77, -1
  %79 = add i32 %77, 1
  %80 = or i32 %23, %14
  %81 = or i32 %21, %27
  %82 = xor i32 %39, -1
  %83 = xor i32 %41, %82
  %84 = or i32 %7, %30
  %85 = xor i32 %8, -1
  %86 = or i32 %59, %85
  %87 = or i32 %7, %67
  %88 = xor i32 %30, -1
  %89 = or i32 %67, %21
  %90 = or i32 %67, %49
  %91 = xor i32 %67, -1
  %92 = and i32 %91, %2
  %93 = and i32 %48, %24
  %94 = xor i32 %40, %67
  %95 = shl i32 %94, 1
  %96 = and i32 %7, %26
  %97 = xor i32 %19, -1
  %98 = xor i32 %97, %0
  %99 = or i32 %30, %37
  %100 = xor i32 %40, -1
  %101 = or i32 %77, %100
  %102 = and i32 %7, %88
  %103 = or i32 %77, %23
  %104 = and i32 %55, %23
  %105 = xor i32 %39, %73
  %106 = or i32 %37, %0
  %107 = or i32 %17, %31
  %108 = shl i32 %107, 1
  %109 = and i32 %35, %2
  %110 = xor i32 %48, %1
  %111 = or i32 %20, %29
  %112 = shl i32 %111, 1
  %113 = and i32 %20, %26
  %114 = and i32 %20, %29
  %115 = shl i32 %114, 1
  %116 = or i32 %23, %2
  %117 = and i32 %33, %31
  %118 = or i32 %67, %14
  %119 = and i32 %58, %31
  %120 = and i32 %60, %0
  %121 = xor i32 %120, 2147483647
  %122 = xor i32 %121, %119
  %123 = xor i32 %19, %0
  %124 = shl i32 %123, 1
  %125 = shl i32 %15, 1
  %126 = xor i32 %40, %0
  %127 = xor i32 %126, %82
  %128 = or i32 %97, %0
  %129 = or i32 %20, %30
  %130 = or i32 %97, %31
  %131 = xor i32 %100, %0
  %132 = xor i32 %15, %1
  %133 = and i32 %48, %1
  %134 = or i32 %67, %37
  %135 = xor i32 %30, %33
  %136 = or i32 %20, %27
  %137 = xor i32 %67, %2
  %138 = shl i32 %137, 1
  %139 = or i32 %20, %1
  %140 = and i32 %26, %2
  %141 = and i32 %37, %91
  %142 = or i32 %37, %27
  %143 = or i32 %15, %24
  %144 = xor i32 %16, %0
  %145 = shl i32 %1, 1
  %146 = or i32 %100, %31
  %147 = add i32 %35, 1
  %148 = and i32 %35, %37
  %149 = or i32 %20, %23
  %150 = and i32 %55, %1
  %151 = or i32 %77, %24
  %152 = xor i32 %77, %35
  %153 = shl i32 %152, 1
  %154 = and i32 %14, %24
  %155 = xor i32 %78, %1
  %156 = or i32 %37, %31
  %157 = and i32 %33, %0
  %158 = or i32 %40, %0
  %159 = or i32 %77, %29
  %160 = xor i32 %91, %2
  %161 = and i32 %14, %88
  %162 = or i32 %15, %23
  %163 = and i32 %7, %31
  %164 = or i32 %56, %24
  %165 = and i32 %16, %0
  %166 = or i32 %23, %56
  %167 = or i32 %20, %36
  %168 = shl i32 %167, 1
  %169 = or i32 %14, %27
  %170 = xor i32 %61, 2147483647
  %171 = xor i32 %170, %59
  %172 = or i32 %15, %19
  %173 = or i32 %49, %29
  %174 = or i32 %100, %0
  %175 = or i32 %21, %29
  %176 = or i32 %15, %29
  %177 = xor i32 %33, %0
  %178 = or i32 %77, %32
  %179 = and i32 %16, %31
  %180 = and i32 %20, %35
  %181 = or i32 %19, %31
  %182 = or i32 %21, %1
  %183 = xor i32 %48, %67
  %184 = shl i32 %56, 1
  %185 = and i32 %20, %88
  %186 = or i32 %20, %24
  %187 = or i32 %32, %30
  %188 = xor i32 %77, %1
  %189 = xor i32 %15, -1
  %190 = and i32 %189, %24
  %191 = or i32 %33, %0
  %192 = or i32 %23, %49
  %193 = and i32 %37, %31
  %194 = or i32 %45, %51
  %195 = shl i32 %194, 1
  %196 = xor i32 %36, %2
  %197 = xor i32 %77, %33
  %198 = xor i32 %55, %1
  %199 = xor i32 %60, %31
  %200 = xor i32 %199, %59
  %201 = or i32 %14, %24
  %202 = and i32 %14, %91
  %203 = or i32 %56, %1
  %204 = xor i32 %15, %16
  %205 = and i32 %189, %29
  %206 = or i32 %7, %31
  %207 = shl i32 %206, 1
  %208 = and i32 %189, %1
  %209 = or i32 %30, %21
  %210 = and i32 %20, %23
  %211 = and i32 %35, %21
  %212 = and i32 %35, %14
  %213 = and i32 %100, %31
  %214 = mul i32 %213, -33
  %215 = and i32 %32, %31
  %216 = and i32 %100, %0
  %217 = mul i32 %216, -17
  %218 = and i32 %32, %0
  %219 = and i32 %17, %31
  %220 = and i32 %17, %0
  %221 = shl i32 %220, 2
  %222 = and i32 %4, %3
  %223 = xor i32 %222, -1
  %224 = and i32 %223, %5
  %225 = xor i32 %5, -1
  %226 = and i32 %225, %3
  %227 = xor i32 %226, -1
  %228 = and i32 %227, %4
  %229 = and i32 %9, %4
  %230 = or i32 %4, %3
  %231 = xor i32 %5, %3
  %232 = xor i32 %231, -1
  %233 = and i32 %230, %232
  %234 = and i32 %225, %4
  %235 = and i32 %5, %3
  %236 = xor i32 %235, -1
  %237 = xor i32 %234, %236
  %238 = xor i32 %5, %4
  %239 = and i32 %238, %3
  %240 = and i32 %5, %4
  %241 = xor i32 %230, -1
  %242 = or i32 %240, %241
  %243 = xor i32 %240, %227
  %244 = xor i32 %4, -1
  %245 = and i32 %9, %5
  %246 = and i32 %245, %244
  %247 = and i32 %232, %4
  %248 = or i32 %246, %247
  %249 = or i32 %5, %3
  %250 = or i32 %249, %4
  %251 = or i32 %222, %11
  %252 = and i32 %235, %4
  %253 = xor i32 %231, %4
  %254 = xor i32 %252, %253
  %255 = xor i32 %238, -1
  %256 = or i32 %229, %255
  %257 = or i32 %225, %3
  %258 = xor i32 %257, %4
  %259 = or i32 %238, %222
  %260 = shl i32 %259, 2
  %261 = or i32 %234, %3
  %262 = and i32 %225, %223
  %263 = xor i32 %240, -1
  %264 = xor i32 %229, -1
  %265 = and i32 %225, %264
  %266 = shl i32 %265, 2
  %267 = xor i32 %4, %3
  %268 = and i32 %267, %263
  %269 = or i32 %236, %244
  %270 = shl i32 %269, 1
  %271 = and i32 %267, %5
  %272 = shl i32 %271, 1
  %273 = add i32 %238, 1
  %274 = or i32 %255, %3
  %275 = and i32 %255, %3
  %276 = xor i32 %267, -1
  %277 = and i32 %238, %276
  %278 = or i32 %240, %9
  %279 = xor i32 %249, -1
  %280 = or i32 %279, %4
  %281 = xor i32 %11, %3
  %282 = or i32 %222, %5
  %283 = or i32 %249, %244
  %284 = and i32 %245, %4
  %285 = or i32 %9, %5
  %286 = xor i32 %285, %244
  %287 = xor i32 %286, %284
  %288 = xor i32 %257, -1
  %289 = or i32 %288, %4
  %290 = xor i32 %226, %4
  %291 = shl i32 %290, 1
  %292 = or i32 %231, %4
  %293 = xor i32 %292, -1
  %294 = or i32 %284, %293
  %295 = or i32 %238, %9
  %296 = or i32 %222, %279
  %297 = or i32 %234, %9
  %298 = or i32 %9, %4
  %299 = and i32 %298, %5
  %300 = or i32 %235, %244
  %301 = xor i32 %229, %236
  %302 = and i32 %238, %9
  %303 = or i32 %225, %4
  %304 = xor i32 %303, -1
  %305 = xor i32 %304, %3
  %306 = or i32 %241, %5
  %307 = and i32 %267, %255
  %308 = and i32 %231, %298
  %309 = xor i32 %222, %5
  %310 = xor i32 %279, %4
  %311 = shl i32 %310, 1
  %312 = and i32 %249, %244
  %313 = xor i32 %312, -1
  %314 = xor i32 %252, %313
  %315 = or i32 %226, %4
  %316 = xor i32 %298, -1
  %317 = or i32 %225, %316
  %318 = xor i32 %253, -1
  %319 = or i32 %252, %318
  %320 = and i32 %236, %4
  %321 = or i32 %11, %276
  %322 = add i32 %4, 1
  %323 = and i32 %231, %223
  %324 = and i32 %257, %4
  %325 = or i32 %252, %312
  %326 = or i32 %276, %5
  %327 = or i32 %240, %279
  %328 = and i32 %238, %267
  %329 = xor i32 %263, %3
  %330 = and i32 %255, %264
  %331 = xor i32 %303, %3
  %332 = or i32 %288, %244
  %333 = shl i32 %332, 1
  %334 = or i32 %267, %304
  %335 = or i32 %255, %241
  %336 = or i32 %240, %276
  %337 = and i32 %264, %5
  %338 = xor i32 %227, %4
  %339 = xor i32 %232, %4
  %340 = add i32 %298, 1
  %341 = or i32 %279, %244
  %342 = and i32 %231, %244
  %343 = or i32 %229, %232
  %344 = or i32 %238, %241
  %345 = or i32 %257, %244
  %346 = and i32 %298, %225
  %347 = and i32 %227, %244
  %348 = and i32 %303, %276
  %349 = xor i32 %249, %222
  %350 = or i32 %238, %267
  %351 = and i32 %285, %244
  %352 = or i32 %284, %351
  %353 = xor i32 %235, %4
  %354 = add i32 %303, 1
  %355 = or i32 %225, %241
  %356 = and i32 %231, %230
  %357 = and i32 %263, %3
  %358 = or i32 %222, %225
  %359 = xor i32 %249, %4
  %360 = or i32 %252, %359
  %361 = and i32 %10, %267
  %362 = or i32 %316, %5
  %363 = or i32 %234, %235
  %364 = or i32 %232, %241
  %365 = xor i32 %257, %222
  %366 = or i32 %252, %342
  %367 = and i32 %303, %267
  %368 = and i32 %279, %244
  %369 = mul i32 %368, -15
  %370 = and i32 %226, %244
  %371 = mul i32 %370, 12
  %372 = and i32 %279, %4
  %373 = and i32 %288, %244
  %374 = and i32 %235, %244
  %375 = and i32 %288, %4
  %376 = mul i32 %252, 6
  %377 = add i32 %45, %9
  %378 = add i32 %377, %81
  %379 = sub i32 %378, %373
  %380 = sub i32 %379, %360
  %381 = mul i32 %380, 5
  %382 = add i32 %219, %54
  %383 = add i32 %382, %41
  %384 = sub i32 %383, %224
  %385 = add i32 %384, %279
  %386 = mul i32 %385, 3
  %387 = add i32 %118, %202
  %388 = add i32 %387, %296
  %389 = shl i32 %388, 2
  %390 = sub i32 %375, %372
  %391 = mul i32 %390, 7
  %392 = or i32 %39, %215
  %393 = mul i32 %392, -18
  %394 = add i32 %35, -1
  %395 = add i32 %394, %196
  %396 = add i32 %395, %154
  %397 = add i32 %396, %116
  %398 = add i32 %397, %19
  %399 = add i32 %398, %211
  %400 = add i32 %399, %186
  %401 = add i32 %400, %157
  %402 = add i32 %401, %151
  %403 = add i32 %402, %131
  %404 = add i32 %403, %103
  %405 = add i32 %404, %98
  %406 = add i32 %405, %90
  %407 = add i32 %406, %89
  %408 = add i32 %407, %63
  %409 = sub i32 %408, %18
  %410 = add i32 %409, %62
  %411 = add i32 %410, %171
  %412 = add i32 %411, %122
  %413 = add i32 %412, %374
  %414 = add i32 %413, %353
  %415 = add i32 %414, %345
  %416 = add i32 %415, %321
  %417 = add i32 %416, %300
  %418 = add i32 %417, %283
  %419 = add i32 %418, %352
  %420 = shl i32 %419, 1
  %421 = sub i32 %23, %1
  %422 = sub i32 %421, %145
  %423 = add i32 %422, %147
  %424 = add i32 %423, %67
  %425 = add i32 %424, %22
  %426 = sub i32 %425, %25
  %427 = add i32 %426, %28
  %428 = add i32 %427, %79
  %429 = add i32 %428, %80
  %430 = sub i32 %429, %92
  %431 = add i32 %430, %97
  %432 = sub i32 %431, %109
  %433 = sub i32 %432, %16
  %434 = sub i32 %433, %77
  %435 = sub i32 %434, %140
  %436 = add i32 %435, %32
  %437 = sub i32 %436, %160
  %438 = sub i32 %437, %161
  %439 = add i32 %438, %169
  %440 = add i32 %439, %55
  %441 = sub i32 %440, %201
  %442 = add i32 %441, %212
  %443 = add i32 %442, %34
  %444 = add i32 %443, %38
  %445 = add i32 %444, %43
  %446 = sub i32 %445, %44
  %447 = sub i32 %446, %50
  %448 = sub i32 %447, %57
  %449 = sub i32 %448, %66
  %450 = sub i32 %449, %71
  %451 = add i32 %450, %84
  %452 = add i32 %451, %87
  %453 = sub i32 %452, %93
  %454 = add i32 %453, %96
  %455 = add i32 %454, %99
  %456 = add i32 %455, %101
  %457 = add i32 %456, %102
  %458 = add i32 %457, %104
  %459 = add i32 %458, %106
  %460 = sub i32 %459, %51
  %461 = sub i32 %460, %110
  %462 = add i32 %461, %113
  %463 = add i32 %462, %117
  %464 = sub i32 %463, %125
  %465 = sub i32 %464, %128
  %466 = sub i32 %465, %129
  %467 = add i32 %466, %130
  %468 = sub i32 %467, %132
  %469 = sub i32 %468, %133
  %470 = sub i32 %469, %134
  %471 = add i32 %470, %135
  %472 = add i32 %471, %136
  %473 = sub i32 %472, %138
  %474 = sub i32 %473, %139
  %475 = add i32 %474, %141
  %476 = add i32 %475, %142
  %477 = sub i32 %476, %143
  %478 = sub i32 %477, %144
  %479 = add i32 %478, %146
  %480 = add i32 %479, %148
  %481 = sub i32 %480, %149
  %482 = sub i32 %481, %150
  %483 = add i32 %482, %155
  %484 = add i32 %483, %156
  %485 = add i32 %484, %158
  %486 = sub i32 %485, %159
  %487 = sub i32 %486, %126
  %488 = add i32 %487, %162
  %489 = add i32 %488, %163
  %490 = sub i32 %489, %164
  %491 = add i32 %490, %165
  %492 = sub i32 %491, %166
  %493 = sub i32 %492, %172
  %494 = add i32 %493, %173
  %495 = sub i32 %494, %174
  %496 = sub i32 %495, %175
  %497 = sub i32 %496, %176
  %498 = add i32 %497, %177
  %499 = sub i32 %498, %178
  %500 = add i32 %499, %179
  %501 = add i32 %500, %180
  %502 = sub i32 %501, %181
  %503 = add i32 %502, %182
  %504 = sub i32 %503, %183
  %505 = sub i32 %504, %184
  %506 = add i32 %505, %185
  %507 = sub i32 %506, %187
  %508 = sub i32 %507, %188
  %509 = sub i32 %508, %190
  %510 = add i32 %509, %191
  %511 = add i32 %510, %192
  %512 = sub i32 %511, %193
  %513 = add i32 %512, %197
  %514 = add i32 %513, %198
  %515 = sub i32 %514, %203
  %516 = sub i32 %515, %204
  %517 = sub i32 %516, %205
  %518 = sub i32 %517, %208
  %519 = sub i32 %518, %209
  %520 = add i32 %519, %210
  %521 = add i32 %520, %218
  %522 = add i32 %521, %322
  %523 = add i32 %522, %4
  %524 = sub i32 %523, %42
  %525 = sub i32 %524, %47
  %526 = add i32 %525, %53
  %527 = sub i32 %526, %65
  %528 = sub i32 %527, %69
  %529 = sub i32 %528, %70
  %530 = add i32 %529, %72
  %531 = sub i32 %530, %83
  %532 = sub i32 %531, %86
  %533 = sub i32 %532, %95
  %534 = sub i32 %533, %105
  %535 = sub i32 %534, %108
  %536 = sub i32 %535, %112
  %537 = sub i32 %536, %115
  %538 = sub i32 %537, %124
  %539 = add i32 %538, %127
  %540 = sub i32 %539, %153
  %541 = sub i32 %540, %168
  %542 = sub i32 %541, %200
  %543 = sub i32 %542, %207
  %544 = add i32 %543, %214
  %545 = add i32 %544, %217
  %546 = sub i32 %545, %221
  %547 = sub i32 %546, %229
  %548 = sub i32 %547, %222
  %549 = sub i32 %548, %5
  %550 = add i32 %549, %340
  %551 = sub i32 %550, %195
  %552 = sub i32 %551, %262
  %553 = add i32 %552, %263
  %554 = add i32 %553, %273
  %555 = sub i32 %554, %231
  %556 = sub i32 %555, %282
  %557 = sub i32 %556, %299
  %558 = add i32 %557, %306
  %559 = add i32 %558, %309
  %560 = add i32 %559, %317
  %561 = sub i32 %560, %326
  %562 = add i32 %561, %337
  %563 = add i32 %562, %346
  %564 = add i32 %563, %354
  %565 = add i32 %564, %355
  %566 = sub i32 %565, %358
  %567 = add i32 %566, %238
  %568 = add i32 %567, %362
  %569 = add i32 %568, %11
  %570 = add i32 %569, %288
  %571 = add i32 %570, %393
  %572 = sub i32 %571, %76
  %573 = add i32 %572, %228
  %574 = add i32 %573, %233
  %575 = sub i32 %574, %237
  %576 = add i32 %575, %239
  %577 = sub i32 %576, %242
  %578 = add i32 %577, %243
  %579 = add i32 %578, %250
  %580 = sub i32 %579, %251
  %581 = add i32 %580, %256
  %582 = sub i32 %581, %258
  %583 = sub i32 %582, %261
  %584 = sub i32 %583, %266
  %585 = add i32 %584, %268
  %586 = sub i32 %585, %272
  %587 = add i32 %586, %274
  %588 = sub i32 %587, %275
  %589 = add i32 %588, %277
  %590 = sub i32 %589, %278
  %591 = sub i32 %590, %280
  %592 = sub i32 %591, %281
  %593 = sub i32 %592, %289
  %594 = add i32 %593, %295
  %595 = sub i32 %594, %297
  %596 = add i32 %595, %301
  %597 = sub i32 %596, %302
  %598 = add i32 %597, %305
  %599 = sub i32 %598, %307
  %600 = add i32 %599, %308
  %601 = sub i32 %600, %315
  %602 = add i32 %601, %320
  %603 = sub i32 %602, %323
  %604 = add i32 %603, %324
  %605 = sub i32 %604, %327
  %606 = sub i32 %605, %328
  %607 = add i32 %606, %329
  %608 = add i32 %607, %330
  %609 = add i32 %608, %331
  %610 = add i32 %609, %334
  %611 = add i32 %610, %335
  %612 = sub i32 %611, %336
  %613 = add i32 %612, %338
  %614 = sub i32 %613, %339
  %615 = add i32 %614, %341
  %616 = add i32 %615, %342
  %617 = add i32 %616, %343
  %618 = sub i32 %617, %344
  %619 = add i32 %618, %347
  %620 = sub i32 %619, %348
  %621 = add i32 %620, %349
  %622 = sub i32 %621, %350
  %623 = sub i32 %622, %356
  %624 = sub i32 %623, %357
  %625 = sub i32 %624, %361
  %626 = sub i32 %625, %363
  %627 = add i32 %626, %364
  %628 = sub i32 %627, %365
  %629 = sub i32 %628, %367
  %630 = add i32 %629, %248
  %631 = add i32 %630, %254
  %632 = sub i32 %631, %260
  %633 = sub i32 %632, %270
  %634 = sub i32 %633, %287
  %635 = sub i32 %634, %291
  %636 = add i32 %635, %294
  %637 = sub i32 %636, %311
  %638 = add i32 %637, %314
  %639 = add i32 %638, %319
  %640 = sub i32 %639, %325
  %641 = sub i32 %640, %333
  %642 = sub i32 %641, %366
  %643 = add i32 %642, %369
  %644 = add i32 %643, %371
  %645 = add i32 %644, %376
  %646 = add i32 %645, %391
  %647 = add i32 %646, %389
  %648 = add i32 %647, %386
  %649 = add i32 %648, %381
  %650 = add i32 %649, %420
  %651 = icmp eq i32 %13, %650
  %652 = select i1 %651, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %653 = tail call i32 @puts(i8* nonnull dereferenceable(1) %652)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
