digraph "DFG for'crackme' function" {
	Node0x7d6d80[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x7d6df0[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x7d6e60[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x7d6ed0[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x7d6f40[shape=record, label="  %9 = or i32 %8, %3"];
	Node0x7d6fe0[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x7d7050[shape=record, label="  %11 = xor i32 %3, -1"];
	Node0x7d70c0[shape=record, label="  %12 = add i32 %11, %7"];
	Node0x7d7130[shape=record, label="  %13 = add i32 %12, %10"];
	Node0x7d71a0[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x7d7210[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x7d7280[shape=record, label="  %16 = xor i32 %1, -1"];
	Node0x7d72f0[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x7d7360[shape=record, label="  %18 = xor i32 %2, %1"];
	Node0x7d7400[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x7d7470[shape=record, label="  %20 = xor i32 %18, -1"];
	Node0x7d74e0[shape=record, label="  %21 = shl i32 %17, 2"];
	Node0x7d7580[shape=record, label="  %22 = or i32 %21, 3"];
	Node0x7d7620[shape=record, label="  %23 = xor i32 %1, 2147483647"];
	Node0x7d7690[shape=record, label="  %24 = and i32 %23, %2"];
	Node0x7d7700[shape=record, label="  %25 = and i32 %8, %3"];
	Node0x7d7770[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x7d7810[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x7d7880[shape=record, label="  %28 = or i32 %3, %0"];
	Node0x7d78f0[shape=record, label="  %29 = xor i32 %28, -1"];
	Node0x7d7960[shape=record, label="  %30 = and i32 %3, %0"];
	Node0x7d79d0[shape=record, label="  %31 = add i32 %14, %29"];
	Node0x7d7a40[shape=record, label="  %32 = add i32 %31, %25"];
	Node0x7d7cf0[shape=record, label="  %33 = mul i32 %32, 6"];
	Node0x7d7d60[shape=record, label="  %34 = add i32 %30, %24"];
	Node0x7d7dd0[shape=record, label="  %35 = shl i32 %34, 1"];
	Node0x7d7e40[shape=record, label="  %36 = sub i32 %6, %1"];
	Node0x7d7ee0[shape=record, label="  %37 = mul i32 %36, 5"];
	Node0x7d7f50[shape=record, label="  %38 = shl i32 %0, 1"];
	Node0x7d7fc0[shape=record, label="  %39 = add i32 %38, 3"];
	Node0x7d8030[shape=record, label="  %40 = add i32 %39, %16"];
	Node0x7d80a0[shape=record, label="  %41 = sub i32 %40, %2"];
	Node0x7d8110[shape=record, label="  %42 = add i32 %41, %5"];
	Node0x7d8180[shape=record, label="  %43 = add i32 %42, %15"];
	Node0x7d81f0[shape=record, label="  %44 = sub i32 %43, %17"];
	Node0x7d8260[shape=record, label="  %45 = add i32 %44, %20"];
	Node0x7d82d0[shape=record, label="  %46 = add i32 %45, %3"];
	Node0x7d8340[shape=record, label="  %47 = sub i32 %46, %19"];
	Node0x7d83b0[shape=record, label="  %48 = add i32 %47, %22"];
	Node0x7d8420[shape=record, label="  %49 = add i32 %48, %37"];
	Node0x7d8490[shape=record, label="  %50 = add i32 %49, %27"];
	Node0x7d8500[shape=record, label="  %51 = add i32 %50, %35"];
	Node0x7d8570[shape=record, label="  %52 = add i32 %51, %33"];
	Node0x7d85e0[shape=record, label="  %53 = icmp eq i32 %13, %52"];
	Node0x777268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7d8a80[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x7d8ad0[shape=record, label="  ret void"];
	Node0x7d6d80 -> Node0x7d6df0;
	Node0x7d6df0 -> Node0x7d6e60;
	Node0x7d6e60 -> Node0x7d6ed0;
	Node0x7d6ed0 -> Node0x7d6f40;
	Node0x7d6f40 -> Node0x7d6fe0;
	Node0x7d6fe0 -> Node0x7d7050;
	Node0x7d7050 -> Node0x7d70c0;
	Node0x7d70c0 -> Node0x7d7130;
	Node0x7d7130 -> Node0x7d71a0;
	Node0x7d71a0 -> Node0x7d7210;
	Node0x7d7210 -> Node0x7d7280;
	Node0x7d7280 -> Node0x7d72f0;
	Node0x7d72f0 -> Node0x7d7360;
	Node0x7d7360 -> Node0x7d7400;
	Node0x7d7400 -> Node0x7d7470;
	Node0x7d7470 -> Node0x7d74e0;
	Node0x7d74e0 -> Node0x7d7580;
	Node0x7d7580 -> Node0x7d7620;
	Node0x7d7620 -> Node0x7d7690;
	Node0x7d7690 -> Node0x7d7700;
	Node0x7d7700 -> Node0x7d7770;
	Node0x7d7770 -> Node0x7d7810;
	Node0x7d7810 -> Node0x7d7880;
	Node0x7d7880 -> Node0x7d78f0;
	Node0x7d78f0 -> Node0x7d7960;
	Node0x7d7960 -> Node0x7d79d0;
	Node0x7d79d0 -> Node0x7d7a40;
	Node0x7d7a40 -> Node0x7d7cf0;
	Node0x7d7cf0 -> Node0x7d7d60;
	Node0x7d7d60 -> Node0x7d7dd0;
	Node0x7d7dd0 -> Node0x7d7e40;
	Node0x7d7e40 -> Node0x7d7ee0;
	Node0x7d7ee0 -> Node0x7d7f50;
	Node0x7d7f50 -> Node0x7d7fc0;
	Node0x7d7fc0 -> Node0x7d8030;
	Node0x7d8030 -> Node0x7d80a0;
	Node0x7d80a0 -> Node0x7d8110;
	Node0x7d8110 -> Node0x7d8180;
	Node0x7d8180 -> Node0x7d81f0;
	Node0x7d81f0 -> Node0x7d8260;
	Node0x7d8260 -> Node0x7d82d0;
	Node0x7d82d0 -> Node0x7d8340;
	Node0x7d8340 -> Node0x7d83b0;
	Node0x7d83b0 -> Node0x7d8420;
	Node0x7d8420 -> Node0x7d8490;
	Node0x7d8490 -> Node0x7d8500;
	Node0x7d8500 -> Node0x7d8570;
	Node0x7d8570 -> Node0x7d85e0;
	Node0x7d85e0 -> Node0x777268;
	Node0x777268 -> Node0x7d8a80;
	Node0x7d8a80 -> Node0x7d8ad0;
edge [color=red]
	Node0x7d6d80 -> Node0x7d6df0;
	Node0x7d6df0 -> Node0x7d6e60;
	Node0x7d6ed0 -> Node0x7d6f40;
	Node0x7d6f40 -> Node0x7d6fe0;
	Node0x7d7050 -> Node0x7d70c0;
	Node0x7d6e60 -> Node0x7d70c0;
	Node0x7d70c0 -> Node0x7d7130;
	Node0x7d6fe0 -> Node0x7d7130;
	Node0x7d71a0 -> Node0x7d7210;
	Node0x7d7360 -> Node0x7d7400;
	Node0x7d7360 -> Node0x7d7470;
	Node0x7d72f0 -> Node0x7d74e0;
	Node0x7d74e0 -> Node0x7d7580;
	Node0x7d7620 -> Node0x7d7690;
	Node0x7d6ed0 -> Node0x7d7700;
	Node0x7d7700 -> Node0x7d7770;
	Node0x7d7770 -> Node0x7d7810;
	Node0x7d7880 -> Node0x7d78f0;
	Node0x7d71a0 -> Node0x7d79d0;
	Node0x7d78f0 -> Node0x7d79d0;
	Node0x7d79d0 -> Node0x7d7a40;
	Node0x7d7700 -> Node0x7d7a40;
	Node0x7d7a40 -> Node0x7d7cf0;
	Node0x7d7960 -> Node0x7d7d60;
	Node0x7d7690 -> Node0x7d7d60;
	Node0x7d7d60 -> Node0x7d7dd0;
	Node0x7d6df0 -> Node0x7d7e40;
	Node0x7d7e40 -> Node0x7d7ee0;
	Node0x7d7f50 -> Node0x7d7fc0;
	Node0x7d7fc0 -> Node0x7d8030;
	Node0x7d7280 -> Node0x7d8030;
	Node0x7d8030 -> Node0x7d80a0;
	Node0x7d80a0 -> Node0x7d8110;
	Node0x7d6d80 -> Node0x7d8110;
	Node0x7d8110 -> Node0x7d8180;
	Node0x7d7210 -> Node0x7d8180;
	Node0x7d8180 -> Node0x7d81f0;
	Node0x7d72f0 -> Node0x7d81f0;
	Node0x7d81f0 -> Node0x7d8260;
	Node0x7d7470 -> Node0x7d8260;
	Node0x7d8260 -> Node0x7d82d0;
	Node0x7d82d0 -> Node0x7d8340;
	Node0x7d7400 -> Node0x7d8340;
	Node0x7d8340 -> Node0x7d83b0;
	Node0x7d7580 -> Node0x7d83b0;
	Node0x7d83b0 -> Node0x7d8420;
	Node0x7d7ee0 -> Node0x7d8420;
	Node0x7d8420 -> Node0x7d8490;
	Node0x7d7810 -> Node0x7d8490;
	Node0x7d8490 -> Node0x7d8500;
	Node0x7d7dd0 -> Node0x7d8500;
	Node0x7d8500 -> Node0x7d8570;
	Node0x7d7cf0 -> Node0x7d8570;
	Node0x7d7130 -> Node0x7d85e0;
	Node0x7d8570 -> Node0x7d85e0;
	Node0x7d85e0 -> Node0x777268;
	Node0x777268 -> Node0x7d8a80;
}
