; ModuleID = '../.././c_source_file/0491_path_condition_crackme.c'
source_filename = "../.././c_source_file/0491_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %1
  %10 = or i32 %9, %8
  %11 = and i32 %5, %4
  %12 = xor i32 %11, -1
  %13 = xor i32 %4, %3
  %14 = xor i32 %13, -1
  %15 = and i32 %12, %14
  %16 = add i32 %15, %10
  %17 = and i32 %1, %0
  %18 = xor i32 %9, -1
  %19 = or i32 %17, %18
  %20 = xor i32 %2, -1
  %21 = or i32 %20, %1
  %22 = xor i32 %21, -1
  %23 = or i32 %17, %22
  %24 = xor i32 %1, -1
  %25 = xor i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %24
  %28 = and i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %29, %24
  %31 = xor i32 %1, %0
  %32 = and i32 %31, %2
  %33 = and i32 %7, %2
  %34 = or i32 %24, %0
  %35 = and i32 %34, %18
  %36 = and i32 %31, %26
  %37 = xor i32 %31, -1
  %38 = and i32 %20, %37
  %39 = or i32 %2, %0
  %40 = and i32 %39, %1
  %41 = or i32 %20, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %37
  %44 = and i32 %20, %0
  %45 = and i32 %2, %1
  %46 = or i32 %44, %45
  %47 = and i32 %34, %20
  %48 = or i32 %2, %1
  %49 = or i32 %48, %0
  %50 = or i32 %17, %42
  %51 = and i32 %24, %0
  %52 = or i32 %51, %18
  %53 = xor i32 %0, -1
  %54 = or i32 %21, %53
  %55 = shl i32 %54, 1
  %56 = and i32 %45, %53
  %57 = and i32 %48, %0
  %58 = xor i32 %57, -1
  %59 = xor i32 %56, %58
  %60 = xor i32 %41, %17
  %61 = xor i32 %45, -1
  %62 = and i32 %61, %53
  %63 = xor i32 %48, -1
  %64 = or i32 %17, %63
  %65 = and i32 %20, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %0
  %68 = or i32 %20, %37
  %69 = and i32 %63, %53
  %70 = and i32 %65, %53
  %71 = and i32 %63, %0
  %72 = and i32 %65, %0
  %73 = and i32 %22, %53
  %74 = and i32 %22, %0
  %75 = shl i32 %74, 2
  %76 = and i32 %45, %0
  %77 = mul i32 %76, -7
  %78 = xor i32 %3, -1
  %79 = and i32 %78, %4
  %80 = xor i32 %5, -1
  %81 = and i32 %80, %3
  %82 = xor i32 %81, -1
  %83 = xor i32 %79, %82
  %84 = or i32 %5, %4
  %85 = xor i32 %84, -1
  %86 = or i32 %85, %14
  %87 = xor i32 %5, %4
  %88 = xor i32 %87, -1
  %89 = or i32 %88, %3
  %90 = and i32 %4, %3
  %91 = or i32 %90, %88
  %92 = or i32 %78, %4
  %93 = and i32 %92, %88
  %94 = and i32 %87, %92
  %95 = or i32 %80, %4
  %96 = xor i32 %95, -1
  %97 = or i32 %96, %14
  %98 = or i32 %80, %3
  %99 = shl i32 %98, 1
  %100 = xor i32 %95, %3
  %101 = xor i32 %4, -1
  %102 = and i32 %78, %5
  %103 = and i32 %102, %101
  %104 = xor i32 %5, %3
  %105 = or i32 %104, %101
  %106 = xor i32 %103, %105
  %107 = or i32 %13, %80
  %108 = xor i32 %92, -1
  %109 = or i32 %87, %108
  %110 = or i32 %78, %5
  %111 = and i32 %110, %4
  %112 = xor i32 %111, -1
  %113 = xor i32 %103, %112
  %114 = or i32 %13, %5
  %115 = and i32 %80, %4
  %116 = xor i32 %115, -1
  %117 = xor i32 %116, %3
  %118 = and i32 %92, %5
  %119 = shl i32 %118, 1
  %120 = or i32 %88, %78
  %121 = or i32 %104, %79
  %122 = xor i32 %104, -1
  %123 = and i32 %122, %4
  %124 = or i32 %98, %101
  %125 = or i32 %87, %3
  %126 = or i32 %87, %14
  %127 = shl i32 %126, 1
  %128 = or i32 %79, %122
  %129 = or i32 %122, %4
  %130 = xor i32 %98, %90
  %131 = or i32 %4, %3
  %132 = xor i32 %131, -1
  %133 = or i32 %80, %132
  %134 = and i32 %104, %131
  %135 = xor i32 %122, %4
  %136 = or i32 %11, %108
  %137 = xor i32 %79, -1
  %138 = and i32 %104, %137
  %139 = and i32 %5, %3
  %140 = or i32 %115, %139
  %141 = and i32 %102, %4
  %142 = or i32 %104, %4
  %143 = xor i32 %142, 2147483647
  %144 = or i32 %143, %141
  %145 = shl i32 %144, 1
  %146 = or i32 %85, %3
  %147 = or i32 %5, %3
  %148 = xor i32 %147, %4
  %149 = shl i32 %148, 1
  %150 = xor i32 %11, %92
  %151 = and i32 %131, %80
  %152 = or i32 %104, %132
  %153 = shl i32 %152, 1
  %154 = xor i32 %104, %4
  %155 = shl i32 %154, 2
  %156 = and i32 %13, %88
  %157 = xor i32 %90, -1
  %158 = xor i32 %157, %5
  %159 = xor i32 %147, -1
  %160 = or i32 %11, %159
  %161 = and i32 %95, %13
  %162 = shl i32 %161, 1
  %163 = and i32 %87, %13
  %164 = or i32 %79, %5
  %165 = xor i32 %139, -1
  %166 = xor i32 %115, %165
  %167 = and i32 %13, %116
  %168 = xor i32 %141, %142
  %169 = shl i32 %168, 1
  %170 = and i32 %82, %4
  %171 = xor i32 %11, %131
  %172 = and i32 %84, %3
  %173 = or i32 %81, %101
  %174 = or i32 %90, %80
  %175 = or i32 %87, %90
  %176 = and i32 %13, %12
  %177 = shl i32 %176, 1
  %178 = or i32 %79, %88
  %179 = and i32 %12, %78
  %180 = or i32 %96, %3
  %181 = shl i32 %180, 1
  %182 = xor i32 %95, %90
  %183 = or i32 %132, %5
  %184 = and i32 %157, %5
  %185 = and i32 %137, %5
  %186 = xor i32 %98, -1
  %187 = and i32 %116, %14
  %188 = or i32 %104, %108
  %189 = shl i32 %85, 1
  %190 = and i32 %12, %3
  %191 = and i32 %122, %137
  %192 = or i32 %141, %154
  %193 = or i32 %159, %4
  %194 = or i32 %90, %5
  %195 = or i32 %13, %85
  %196 = shl i32 %13, 1
  %197 = or i32 %11, %78
  %198 = shl i32 %197, 2
  %199 = xor i32 %137, %5
  %200 = and i32 %80, %14
  %201 = and i32 %104, %157
  %202 = xor i32 %92, %5
  %203 = or i32 %87, %79
  %204 = or i32 %165, %101
  %205 = or i32 %90, %96
  %206 = shl i32 %205, 1
  %207 = or i32 %186, %4
  %208 = or i32 %90, %85
  %209 = or i32 %186, %101
  %210 = or i32 %165, %4
  %211 = xor i32 %85, %3
  %212 = xor i32 %139, %4
  %213 = and i32 %131, %5
  %214 = add i32 %104, 1
  %215 = or i32 %139, %4
  %216 = or i32 %115, %186
  %217 = xor i32 %110, %4
  %218 = or i32 %141, %217
  %219 = or i32 %87, %78
  %220 = shl i32 %82, 2
  %221 = or i32 %13, %88
  %222 = shl i32 %221, 1
  %223 = or i32 %139, %101
  %224 = xor i32 %186, %4
  %225 = shl i32 %224, 1
  %226 = and i32 %104, %92
  %227 = and i32 %87, %14
  %228 = and i32 %147, %4
  %229 = xor i32 %159, %4
  %230 = xor i32 %115, %3
  %231 = or i32 %90, %122
  %232 = or i32 %82, %4
  %233 = and i32 %139, %4
  %234 = and i32 %104, %101
  %235 = or i32 %233, %234
  %236 = shl i32 %235, 1
  %237 = and i32 %82, %101
  %238 = and i32 %14, %5
  %239 = xor i32 %132, %5
  %240 = or i32 %88, %14
  %241 = or i32 %122, %101
  %242 = and i32 %87, %137
  %243 = shl i32 %115, 1
  %244 = and i32 %88, %78
  %245 = or i32 %96, %78
  %246 = and i32 %80, %157
  %247 = shl i32 %246, 1
  %248 = and i32 %98, %101
  %249 = or i32 %115, %3
  %250 = and i32 %122, %157
  %251 = or i32 %139, %79
  %252 = shl i32 %251, 1
  %253 = xor i32 %79, %5
  %254 = and i32 %98, %4
  %255 = xor i32 %108, %5
  %256 = and i32 %147, %101
  %257 = xor i32 %256, -1
  %258 = xor i32 %233, %257
  %259 = xor i32 %82, %4
  %260 = and i32 %104, %4
  %261 = or i32 %87, %13
  %262 = or i32 %85, %78
  %263 = and i32 %87, %78
  %264 = or i32 %90, %159
  %265 = or i32 %11, %132
  %266 = and i32 %13, %80
  %267 = and i32 %131, %88
  %268 = shl i32 %12, 1
  %269 = and i32 %139, %101
  %270 = or i32 %269, %228
  %271 = or i32 %88, %132
  %272 = or i32 %14, %5
  %273 = xor i32 %154, -1
  %274 = or i32 %233, %273
  %275 = xor i32 %79, %165
  %276 = or i32 %269, %260
  %277 = and i32 %95, %3
  %278 = or i32 %108, %5
  %279 = shl i32 %278, 2
  %280 = and i32 %88, %157
  %281 = add i32 %4, 1
  %282 = add i32 %95, 1
  %283 = shl i32 %105, 1
  %284 = xor i32 %228, -1
  %285 = xor i32 %269, %284
  %286 = or i32 %122, %132
  %287 = and i32 %131, %122
  %288 = or i32 %147, %4
  %289 = xor i32 %98, %4
  %290 = or i32 %11, %81
  %291 = xor i32 %96, %3
  %292 = xor i32 %11, %3
  %293 = or i32 %87, %132
  %294 = or i32 %90, %186
  %295 = or i32 %104, %90
  %296 = xor i32 %84, %3
  %297 = shl i32 %296, 2
  %298 = and i32 %13, %5
  %299 = xor i32 %147, %90
  %300 = shl i32 %299, 1
  %301 = xor i32 %217, -1
  %302 = xor i32 %141, %301
  %303 = xor i32 %12, %3
  %304 = and i32 %84, %13
  %305 = add i32 %13, 1
  %306 = and i32 %84, %78
  %307 = or i32 %81, %79
  %308 = shl i32 %307, 1
  %309 = xor i32 %81, %4
  %310 = xor i32 %141, %273
  %311 = and i32 %116, %3
  %312 = xor i32 %131, %5
  %313 = and i32 %92, %122
  %314 = or i32 %159, %101
  %315 = shl i32 %314, 1
  %316 = and i32 %88, %3
  %317 = shl i32 %316, 1
  %318 = and i32 %92, %80
  %319 = xor i32 %148, 2147483647
  %320 = xor i32 %319, %233
  %321 = shl i32 %320, 1
  %322 = and i32 %87, %131
  %323 = xor i32 %165, %4
  %324 = or i32 %233, %148
  %325 = or i32 %115, %14
  %326 = and i32 %110, %101
  %327 = or i32 %141, %326
  %328 = or i32 %11, %14
  %329 = add i32 %90, 1
  %330 = and i32 %95, %78
  %331 = or i32 %115, %13
  %332 = xor i32 %90, %5
  %333 = or i32 %13, %96
  %334 = or i32 %11, %3
  %335 = and i32 %88, %137
  %336 = shl i32 %108, 1
  %337 = or i32 %79, %80
  %338 = or i32 %88, %108
  %339 = and i32 %87, %3
  %340 = shl i32 %339, 1
  %341 = and i32 %95, %14
  %342 = and i32 %88, %14
  %343 = xor i32 %233, %154
  %344 = or i32 %80, %108
  %345 = or i32 %98, %4
  %346 = and i32 %159, %101
  %347 = and i32 %81, %101
  %348 = and i32 %159, %4
  %349 = shl i32 %348, 3
  %350 = and i32 %81, %4
  %351 = and i32 %186, %101
  %352 = mul i32 %269, 25
  %353 = and i32 %186, %4
  %354 = mul i32 %353, 17
  %355 = mul i32 %233, 15
  %356 = add i32 %49, %50
  %357 = add i32 %356, %318
  %358 = add i32 %357, %87
  %359 = add i32 %358, %84
  %360 = add i32 %359, %151
  %361 = add i32 %360, %114
  %362 = add i32 %361, %290
  %363 = add i32 %362, %234
  %364 = add i32 %363, %260
  %365 = add i32 %364, %249
  %366 = add i32 %365, %228
  %367 = add i32 %366, %226
  %368 = add i32 %367, %212
  %369 = add i32 %368, %135
  %370 = add i32 %369, %125
  %371 = add i32 %370, %124
  %372 = add i32 %371, %109
  %373 = add i32 %372, %94
  %374 = add i32 %373, %91
  %375 = add i32 %374, %106
  %376 = shl i32 %375, 1
  %377 = add i32 %70, %159
  %378 = add i32 %377, %245
  %379 = add i32 %378, %350
  %380 = sub i32 %379, %204
  %381 = sub i32 %380, %150
  %382 = sub i32 %381, %117
  %383 = mul i32 %382, 5
  %384 = add i32 %71, %73
  %385 = add i32 %384, %62
  %386 = sub i32 %200, %385
  %387 = sub i32 %386, %294
  %388 = sub i32 %387, %338
  %389 = add i32 %388, %86
  %390 = mul i32 %389, 3
  %391 = add i32 %351, %347
  %392 = add i32 %391, %346
  %393 = mul i32 %392, 30
  %394 = or i32 %56, %72
  %395 = mul i32 %394, -6
  %396 = sub i32 1, %2
  %397 = add i32 %396, %32
  %398 = add i32 %397, %33
  %399 = add i32 %398, %38
  %400 = sub i32 %399, %47
  %401 = add i32 %400, %25
  %402 = add i32 %401, %68
  %403 = add i32 %402, %78
  %404 = sub i32 %403, %3
  %405 = add i32 %404, %23
  %406 = add i32 %405, %19
  %407 = add i32 %406, %27
  %408 = add i32 %407, %30
  %409 = sub i32 %408, %35
  %410 = sub i32 %409, %36
  %411 = sub i32 %410, %40
  %412 = add i32 %411, %43
  %413 = sub i32 %412, %46
  %414 = add i32 %413, %52
  %415 = sub i32 %414, %60
  %416 = add i32 %415, %64
  %417 = add i32 %416, %67
  %418 = add i32 %417, %69
  %419 = add i32 %418, %4
  %420 = add i32 %419, %281
  %421 = sub i32 %420, %55
  %422 = sub i32 %421, %59
  %423 = sub i32 %422, %75
  %424 = add i32 %423, %77
  %425 = sub i32 %424, %79
  %426 = add i32 %425, %137
  %427 = add i32 %426, %92
  %428 = add i32 %427, %90
  %429 = add i32 %428, %132
  %430 = add i32 %429, %5
  %431 = add i32 %430, %305
  %432 = add i32 %431, %329
  %433 = sub i32 %432, %131
  %434 = sub i32 %433, %107
  %435 = sub i32 %434, %81
  %436 = add i32 %435, %133
  %437 = add i32 %436, %158
  %438 = sub i32 %437, %164
  %439 = add i32 %438, %174
  %440 = add i32 %439, %95
  %441 = add i32 %440, %183
  %442 = add i32 %441, %184
  %443 = add i32 %442, %185
  %444 = add i32 %443, %186
  %445 = add i32 %444, %194
  %446 = sub i32 %445, %196
  %447 = sub i32 %446, %199
  %448 = add i32 %447, %202
  %449 = sub i32 %448, %147
  %450 = add i32 %449, %213
  %451 = add i32 %450, %214
  %452 = add i32 %451, %104
  %453 = add i32 %452, %238
  %454 = sub i32 %453, %239
  %455 = sub i32 %454, %253
  %456 = sub i32 %455, %139
  %457 = add i32 %456, %255
  %458 = add i32 %457, %116
  %459 = add i32 %458, %88
  %460 = add i32 %459, %266
  %461 = sub i32 %460, %272
  %462 = add i32 %461, %282
  %463 = sub i32 %462, %298
  %464 = sub i32 %463, %11
  %465 = add i32 %464, %312
  %466 = add i32 %465, %332
  %467 = sub i32 %466, %336
  %468 = sub i32 %467, %337
  %469 = sub i32 %468, %344
  %470 = add i32 %469, %395
  %471 = add i32 %470, %83
  %472 = add i32 %471, %89
  %473 = add i32 %472, %93
  %474 = add i32 %473, %97
  %475 = sub i32 %474, %99
  %476 = sub i32 %475, %100
  %477 = sub i32 %476, %119
  %478 = sub i32 %477, %120
  %479 = sub i32 %478, %121
  %480 = add i32 %479, %123
  %481 = sub i32 %480, %128
  %482 = sub i32 %481, %129
  %483 = sub i32 %482, %130
  %484 = sub i32 %483, %134
  %485 = add i32 %484, %136
  %486 = sub i32 %485, %138
  %487 = add i32 %486, %140
  %488 = add i32 %487, %146
  %489 = add i32 %488, %156
  %490 = sub i32 %489, %160
  %491 = add i32 %490, %163
  %492 = sub i32 %491, %166
  %493 = add i32 %492, %167
  %494 = add i32 %493, %170
  %495 = sub i32 %494, %171
  %496 = add i32 %495, %172
  %497 = sub i32 %496, %173
  %498 = add i32 %497, %175
  %499 = add i32 %498, %178
  %500 = sub i32 %499, %179
  %501 = sub i32 %500, %182
  %502 = add i32 %501, %187
  %503 = sub i32 %502, %188
  %504 = sub i32 %503, %189
  %505 = sub i32 %504, %190
  %506 = sub i32 %505, %191
  %507 = add i32 %506, %193
  %508 = add i32 %507, %195
  %509 = add i32 %508, %142
  %510 = sub i32 %509, %201
  %511 = add i32 %510, %203
  %512 = sub i32 %511, %207
  %513 = add i32 %512, %208
  %514 = sub i32 %513, %209
  %515 = sub i32 %514, %210
  %516 = add i32 %515, %211
  %517 = add i32 %516, %215
  %518 = add i32 %517, %216
  %519 = sub i32 %518, %219
  %520 = sub i32 %519, %220
  %521 = add i32 %520, %223
  %522 = add i32 %521, %227
  %523 = sub i32 %522, %229
  %524 = add i32 %523, %230
  %525 = sub i32 %524, %231
  %526 = add i32 %525, %232
  %527 = sub i32 %526, %237
  %528 = sub i32 %527, %240
  %529 = sub i32 %528, %241
  %530 = add i32 %529, %242
  %531 = sub i32 %530, %243
  %532 = sub i32 %531, %244
  %533 = sub i32 %532, %247
  %534 = add i32 %533, %248
  %535 = add i32 %534, %250
  %536 = add i32 %535, %254
  %537 = sub i32 %536, %259
  %538 = add i32 %537, %261
  %539 = add i32 %538, %262
  %540 = add i32 %539, %263
  %541 = sub i32 %540, %264
  %542 = sub i32 %541, %265
  %543 = add i32 %542, %267
  %544 = sub i32 %543, %268
  %545 = sub i32 %544, %271
  %546 = add i32 %545, %275
  %547 = sub i32 %546, %277
  %548 = sub i32 %547, %279
  %549 = add i32 %548, %280
  %550 = add i32 %549, %286
  %551 = sub i32 %550, %287
  %552 = add i32 %551, %288
  %553 = add i32 %552, %289
  %554 = sub i32 %553, %291
  %555 = sub i32 %554, %292
  %556 = sub i32 %555, %293
  %557 = sub i32 %556, %295
  %558 = add i32 %557, %303
  %559 = add i32 %558, %304
  %560 = add i32 %559, %306
  %561 = add i32 %560, %309
  %562 = add i32 %561, %311
  %563 = sub i32 %562, %313
  %564 = sub i32 %563, %322
  %565 = sub i32 %564, %256
  %566 = sub i32 %565, %323
  %567 = add i32 %566, %325
  %568 = sub i32 %567, %328
  %569 = add i32 %568, %330
  %570 = add i32 %569, %331
  %571 = add i32 %570, %333
  %572 = sub i32 %571, %334
  %573 = add i32 %572, %335
  %574 = add i32 %573, %341
  %575 = sub i32 %574, %342
  %576 = add i32 %575, %345
  %577 = sub i32 %576, %113
  %578 = sub i32 %577, %127
  %579 = sub i32 %578, %149
  %580 = sub i32 %579, %153
  %581 = sub i32 %580, %155
  %582 = sub i32 %581, %162
  %583 = sub i32 %582, %177
  %584 = sub i32 %583, %181
  %585 = sub i32 %584, %192
  %586 = sub i32 %585, %198
  %587 = sub i32 %586, %206
  %588 = sub i32 %587, %218
  %589 = sub i32 %588, %222
  %590 = sub i32 %589, %225
  %591 = sub i32 %590, %252
  %592 = add i32 %591, %258
  %593 = add i32 %592, %270
  %594 = sub i32 %593, %274
  %595 = add i32 %594, %276
  %596 = sub i32 %595, %283
  %597 = sub i32 %596, %285
  %598 = add i32 %597, %297
  %599 = sub i32 %598, %300
  %600 = sub i32 %599, %302
  %601 = sub i32 %600, %308
  %602 = sub i32 %601, %310
  %603 = sub i32 %602, %315
  %604 = sub i32 %603, %317
  %605 = sub i32 %604, %324
  %606 = sub i32 %605, %327
  %607 = sub i32 %606, %340
  %608 = add i32 %607, %343
  %609 = add i32 %608, %349
  %610 = add i32 %609, %352
  %611 = add i32 %610, %354
  %612 = add i32 %611, %355
  %613 = sub i32 %612, %169
  %614 = sub i32 %613, %236
  %615 = sub i32 %614, %145
  %616 = sub i32 %615, %321
  %617 = add i32 %616, %393
  %618 = add i32 %617, %383
  %619 = add i32 %618, %390
  %620 = add i32 %619, %376
  %621 = icmp eq i32 %16, %620
  %622 = select i1 %621, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %623 = tail call i32 @puts(i8* nonnull dereferenceable(1) %622)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
