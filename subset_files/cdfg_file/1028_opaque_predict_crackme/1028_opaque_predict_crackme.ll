; ModuleID = '../.././c_source_file/1028_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1028_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = and i32 %2, %1
  %6 = and i32 %5, %4
  %7 = xor i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %6, %9
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = xor i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = and i32 %13, %15
  %17 = add i32 %10, %16
  %18 = sub i32 0, %17
  %19 = and i32 %1, %0
  %20 = or i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %19, %21
  %23 = and i32 %20, %0
  %24 = xor i32 %5, -1
  %25 = and i32 %24, %0
  %26 = xor i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %14, %27
  %29 = xor i32 %1, -1
  %30 = or i32 %2, %0
  %31 = and i32 %30, %29
  %32 = or i32 %11, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %33, %1
  %35 = or i32 %11, %1
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %4
  %38 = shl i32 %37, 1
  %39 = xor i32 %30, %1
  %40 = xor i32 %19, -1
  %41 = and i32 %26, %40
  %42 = and i32 %14, %27
  %43 = and i32 %2, %0
  %44 = or i32 %29, %0
  %45 = xor i32 %43, %44
  %46 = or i32 %26, %14
  %47 = and i32 %5, %0
  %48 = and i32 %20, %4
  %49 = xor i32 %48, 2147483647
  %50 = xor i32 %49, %47
  %51 = shl i32 %50, 1
  %52 = xor i32 %19, %2
  %53 = and i32 %11, %1
  %54 = xor i32 %53, -1
  %55 = and i32 %54, %4
  %56 = and i32 %30, %15
  %57 = and i32 %29, %0
  %58 = or i32 %57, %11
  %59 = or i32 %5, %57
  %60 = and i32 %27, %29
  %61 = shl i32 %60, 1
  %62 = or i32 %33, %1
  %63 = or i32 %35, %4
  %64 = shl i32 %63, 1
  %65 = xor i32 %44, -1
  %66 = xor i32 %65, %2
  %67 = or i32 %43, %65
  %68 = or i32 %1, %0
  %69 = and i32 %7, %68
  %70 = xor i32 %30, -1
  %71 = or i32 %70, %29
  %72 = or i32 %43, %14
  %73 = xor i32 %68, -1
  %74 = or i32 %26, %73
  %75 = or i32 %27, %29
  %76 = shl i32 %75, 1
  %77 = or i32 %21, %4
  %78 = shl i32 %26, 1
  %79 = and i32 %26, %68
  %80 = or i32 %26, %19
  %81 = and i32 %26, %1
  %82 = or i32 %36, %0
  %83 = or i32 %11, %65
  %84 = or i32 %19, %36
  %85 = xor i32 %35, %0
  %86 = and i32 %29, %2
  %87 = and i32 %86, %4
  %88 = or i32 %7, %4
  %89 = xor i32 %87, %88
  %90 = xor i32 %57, -1
  %91 = xor i32 %90, %2
  %92 = shl i32 %91, 1
  %93 = and i32 %14, %2
  %94 = xor i32 %7, -1
  %95 = and i32 %94, %0
  %96 = shl i32 %95, 2
  %97 = and i32 %30, %1
  %98 = shl i32 %97, 1
  %99 = or i32 %7, %73
  %100 = or i32 %21, %0
  %101 = or i32 %11, %15
  %102 = or i32 %12, %5
  %103 = or i32 %53, %4
  %104 = shl i32 %103, 1
  %105 = or i32 %12, %29
  %106 = xor i32 %20, %0
  %107 = and i32 %26, %90
  %108 = and i32 %94, %90
  %109 = or i32 %94, %65
  %110 = and i32 %86, %0
  %111 = xor i32 %7, %0
  %112 = or i32 %110, %111
  %113 = or i32 %7, %19
  %114 = or i32 %14, %70
  %115 = or i32 %29, %2
  %116 = xor i32 %115, %0
  %117 = or i32 %110, %116
  %118 = xor i32 %12, %35
  %119 = or i32 %15, %2
  %120 = and i32 %27, %40
  %121 = or i32 %12, %15
  %122 = and i32 %7, %40
  %123 = and i32 %44, %94
  %124 = xor i32 %57, %2
  %125 = or i32 %19, %2
  %126 = or i32 %7, %65
  %127 = and i32 %94, %40
  %128 = or i32 %43, %29
  %129 = add i32 %68, 1
  %130 = or i32 %26, %29
  %131 = xor i32 %43, %54
  %132 = and i32 %27, %1
  %133 = xor i32 %35, %19
  %134 = or i32 %7, %0
  %135 = xor i32 %110, %134
  %136 = or i32 %47, %106
  %137 = xor i32 %13, %1
  %138 = xor i32 %111, -1
  %139 = or i32 %47, %138
  %140 = or i32 %94, %73
  %141 = or i32 %35, %0
  %142 = and i32 %7, %4
  %143 = or i32 %47, %142
  %144 = xor i32 %47, %111
  %145 = xor i32 %43, %20
  %146 = and i32 %24, %4
  %147 = or i32 %12, %1
  %148 = or i32 %11, %73
  %149 = xor i32 %70, %1
  %150 = or i32 %43, %1
  %151 = shl i32 %150, 1
  %152 = xor i32 %36, %0
  %153 = and i32 %32, %1
  %154 = and i32 %14, %13
  %155 = and i32 %11, %15
  %156 = or i32 %27, %65
  %157 = or i32 %12, %14
  %158 = or i32 %20, %4
  %159 = or i32 %27, %1
  %160 = xor i32 %43, %68
  %161 = or i32 %20, %0
  %162 = xor i32 %24, %0
  %163 = or i32 %12, %36
  %164 = xor i32 %88, -1
  %165 = or i32 %87, %164
  %166 = xor i32 %106, -1
  %167 = xor i32 %47, %166
  %168 = or i32 %14, %11
  %169 = xor i32 %21, %0
  %170 = and i32 %40, %2
  %171 = add i32 %32, 1
  %172 = and i32 %115, %0
  %173 = or i32 %87, %172
  %174 = xor i32 %57, %24
  %175 = or i32 %53, %57
  %176 = xor i32 %12, %1
  %177 = and i32 %11, %90
  %178 = xor i32 %94, %0
  %179 = or i32 %57, %27
  %180 = and i32 %35, %0
  %181 = xor i32 %57, %54
  %182 = or i32 %14, %2
  %183 = or i32 %57, %2
  %184 = shl i32 %183, 2
  %185 = and i32 %7, %90
  %186 = or i32 %19, %33
  %187 = and i32 %68, %94
  %188 = or i32 %70, %1
  %189 = and i32 %68, %11
  %190 = and i32 %115, %4
  %191 = or i32 %110, %190
  %192 = or i32 %54, %0
  %193 = shl i32 %192, 1
  %194 = or i32 %47, %48
  %195 = or i32 %26, %57
  %196 = xor i32 %134, -1
  %197 = or i32 %110, %196
  %198 = or i32 %43, %15
  %199 = and i32 %27, %90
  %200 = or i32 %19, %11
  %201 = and i32 %11, %40
  %202 = or i32 %94, %4
  %203 = or i32 %5, %4
  %204 = and i32 %26, %15
  %205 = and i32 %26, %44
  %206 = xor i32 %43, %1
  %207 = or i32 %24, %4
  %208 = xor i32 %43, -1
  %209 = and i32 %208, %15
  %210 = and i32 %94, %4
  %211 = shl i32 %210, 1
  %212 = and i32 %32, %14
  %213 = xor i32 %44, %2
  %214 = or i32 %70, %15
  %215 = shl i32 %214, 2
  %216 = xor i32 %20, %19
  %217 = and i32 %90, %2
  %218 = and i32 %68, %27
  %219 = shl i32 %218, 1
  %220 = and i32 %15, %2
  %221 = or i32 %54, %4
  %222 = and i32 %27, %15
  %223 = shl i32 %2, 1
  %224 = and i32 %13, %29
  %225 = xor i32 %53, %0
  %226 = shl i32 %225, 1
  %227 = or i32 %7, %57
  %228 = and i32 %14, %208
  %229 = or i32 %19, %27
  %230 = and i32 %44, %11
  %231 = xor i32 %40, %2
  %232 = or i32 %6, %8
  %233 = and i32 %35, %4
  %234 = and i32 %54, %0
  %235 = or i32 %33, %15
  %236 = or i32 %43, %53
  %237 = xor i32 %110, %138
  %238 = add i32 %43, 1
  %239 = or i32 %57, %94
  %240 = xor i32 %32, %1
  %241 = or i32 %43, %73
  %242 = xor i32 %32, %19
  %243 = add i32 %12, 1
  %244 = xor i32 %208, %1
  %245 = xor i32 %30, %19
  %246 = and i32 %30, %14
  %247 = and i32 %21, %4
  %248 = mul i32 %247, 6
  %249 = and i32 %53, %4
  %250 = mul i32 %249, 19
  %251 = and i32 %21, %0
  %252 = shl i32 %251, 1
  %253 = and i32 %53, %0
  %254 = mul i32 %253, 11
  %255 = and i32 %36, %4
  %256 = and i32 %36, %0
  %257 = mul i32 %47, 18
  %258 = add i32 %201, %36
  %259 = add i32 %258, %30
  %260 = add i32 %259, %125
  %261 = add i32 %260, %83
  %262 = add i32 %261, %178
  %263 = add i32 %262, %175
  %264 = add i32 %263, %147
  %265 = add i32 %264, %140
  %266 = add i32 %265, %133
  %267 = add i32 %266, %130
  %268 = add i32 %267, %74
  %269 = add i32 %268, %55
  %270 = add i32 %269, %25
  %271 = add i32 %270, %143
  %272 = shl i32 %271, 1
  %273 = add i32 %224, %200
  %274 = add i32 %273, %6
  %275 = sub i32 %274, %185
  %276 = add i32 %275, %41
  %277 = mul i32 %276, 3
  %278 = add i32 %256, %255
  %279 = mul i32 %278, 13
  %280 = add i32 %137, %131
  %281 = shl i32 %280, 2
  %282 = add i32 %100, %101
  %283 = mul i32 %282, -5
  %284 = sub i32 %1, %0
  %285 = add i32 %284, %1
  %286 = add i32 %285, %14
  %287 = add i32 %286, %129
  %288 = add i32 %287, 1
  %289 = sub i32 %288, %19
  %290 = add i32 %289, %27
  %291 = add i32 %290, %52
  %292 = sub i32 %291, %35
  %293 = add i32 %292, %58
  %294 = add i32 %293, %66
  %295 = add i32 %294, %53
  %296 = add i32 %295, %5
  %297 = add i32 %296, %93
  %298 = sub i32 %297, %43
  %299 = add i32 %298, %119
  %300 = sub i32 %299, %124
  %301 = add i32 %300, %32
  %302 = sub i32 %301, %148
  %303 = add i32 %302, %155
  %304 = sub i32 %303, %168
  %305 = sub i32 %304, %170
  %306 = add i32 %305, %171
  %307 = sub i32 %306, %177
  %308 = sub i32 %307, %182
  %309 = add i32 %308, %189
  %310 = add i32 %309, %213
  %311 = sub i32 %310, %217
  %312 = sub i32 %311, %220
  %313 = sub i32 %312, %223
  %314 = sub i32 %313, %230
  %315 = add i32 %314, %231
  %316 = add i32 %315, %70
  %317 = add i32 %316, %238
  %318 = add i32 %317, %243
  %319 = sub i32 %318, %23
  %320 = sub i32 %319, %22
  %321 = sub i32 %320, %28
  %322 = sub i32 %321, %31
  %323 = sub i32 %322, %34
  %324 = sub i32 %323, %39
  %325 = add i32 %324, %42
  %326 = sub i32 %325, %45
  %327 = sub i32 %326, %46
  %328 = add i32 %327, %56
  %329 = add i32 %328, %59
  %330 = sub i32 %329, %62
  %331 = sub i32 %330, %67
  %332 = sub i32 %331, %69
  %333 = sub i32 %332, %71
  %334 = add i32 %333, %72
  %335 = sub i32 %334, %77
  %336 = sub i32 %335, %78
  %337 = add i32 %336, %79
  %338 = add i32 %337, %80
  %339 = add i32 %338, %81
  %340 = add i32 %339, %82
  %341 = sub i32 %340, %84
  %342 = add i32 %341, %85
  %343 = sub i32 %342, %92
  %344 = add i32 %343, %99
  %345 = sub i32 %344, %102
  %346 = sub i32 %345, %105
  %347 = sub i32 %346, %106
  %348 = add i32 %347, %107
  %349 = sub i32 %348, %108
  %350 = sub i32 %349, %109
  %351 = sub i32 %350, %88
  %352 = add i32 %351, %113
  %353 = sub i32 %352, %114
  %354 = add i32 %353, %118
  %355 = add i32 %354, %120
  %356 = add i32 %355, %121
  %357 = sub i32 %356, %122
  %358 = add i32 %357, %123
  %359 = sub i32 %358, %126
  %360 = add i32 %359, %127
  %361 = add i32 %360, %128
  %362 = add i32 %361, %132
  %363 = sub i32 %362, %8
  %364 = sub i32 %363, %141
  %365 = sub i32 %364, %145
  %366 = sub i32 %365, %146
  %367 = sub i32 %366, %149
  %368 = add i32 %367, %152
  %369 = sub i32 %368, %153
  %370 = add i32 %369, %154
  %371 = add i32 %370, %156
  %372 = sub i32 %371, %157
  %373 = sub i32 %372, %158
  %374 = sub i32 %373, %159
  %375 = sub i32 %374, %160
  %376 = add i32 %375, %161
  %377 = sub i32 %376, %162
  %378 = sub i32 %377, %163
  %379 = add i32 %378, %169
  %380 = sub i32 %379, %48
  %381 = sub i32 %380, %174
  %382 = add i32 %381, %176
  %383 = sub i32 %382, %179
  %384 = add i32 %383, %180
  %385 = sub i32 %384, %181
  %386 = sub i32 %385, %184
  %387 = add i32 %386, %186
  %388 = add i32 %387, %187
  %389 = add i32 %388, %188
  %390 = sub i32 %389, %195
  %391 = add i32 %390, %198
  %392 = add i32 %391, %199
  %393 = add i32 %392, %111
  %394 = sub i32 %393, %202
  %395 = add i32 %394, %203
  %396 = sub i32 %395, %204
  %397 = add i32 %396, %205
  %398 = add i32 %397, %206
  %399 = add i32 %398, %207
  %400 = add i32 %399, %209
  %401 = sub i32 %400, %212
  %402 = sub i32 %401, %216
  %403 = add i32 %402, %221
  %404 = sub i32 %403, %222
  %405 = add i32 %404, %227
  %406 = add i32 %405, %228
  %407 = sub i32 %406, %229
  %408 = sub i32 %407, %233
  %409 = add i32 %408, %234
  %410 = sub i32 %409, %235
  %411 = add i32 %410, %236
  %412 = add i32 %411, %239
  %413 = sub i32 %412, %240
  %414 = sub i32 %413, %241
  %415 = add i32 %414, %242
  %416 = add i32 %415, %142
  %417 = add i32 %416, %244
  %418 = sub i32 %417, %245
  %419 = add i32 %418, %246
  %420 = sub i32 %419, %38
  %421 = sub i32 %420, %61
  %422 = sub i32 %421, %64
  %423 = sub i32 %422, %76
  %424 = sub i32 %423, %89
  %425 = sub i32 %424, %96
  %426 = sub i32 %425, %98
  %427 = sub i32 %426, %104
  %428 = sub i32 %427, %112
  %429 = add i32 %428, %117
  %430 = add i32 %429, %135
  %431 = sub i32 %430, %136
  %432 = add i32 %431, %139
  %433 = add i32 %432, %144
  %434 = sub i32 %433, %151
  %435 = add i32 %434, %165
  %436 = sub i32 %435, %167
  %437 = add i32 %436, %173
  %438 = sub i32 %437, %191
  %439 = sub i32 %438, %193
  %440 = sub i32 %439, %194
  %441 = add i32 %440, %197
  %442 = sub i32 %441, %211
  %443 = sub i32 %442, %215
  %444 = sub i32 %443, %219
  %445 = sub i32 %444, %226
  %446 = sub i32 %445, %232
  %447 = add i32 %446, %237
  %448 = add i32 %447, %248
  %449 = add i32 %448, %250
  %450 = sub i32 %449, %252
  %451 = add i32 %450, %254
  %452 = add i32 %451, %257
  %453 = add i32 %452, %279
  %454 = add i32 %453, %281
  %455 = add i32 %454, %283
  %456 = sub i32 %455, %51
  %457 = add i32 %456, %277
  %458 = add i32 %457, %272
  %459 = icmp eq i32 %458, %18
  %460 = select i1 %459, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %461 = tail call i32 @puts(i8* nonnull dereferenceable(1) %460)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
