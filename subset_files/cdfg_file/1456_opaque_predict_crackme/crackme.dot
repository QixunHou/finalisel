digraph "DFG for'crackme' function" {
	Node0x1c024b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1c02b60[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1c02c20[shape=record, label="  %5 = mul i32 %4, -4"];
	Node0x1c02cc0[shape=record, label="  %6 = shl i32 %1, 1"];
	Node0x1c02d30[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1c02dd0[shape=record, label="  %8 = xor i32 %6, -2"];
	Node0x1c02e40[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x1c02eb0[shape=record, label="  %10 = or i32 %9, %1"];
	Node0x1c02f50[shape=record, label="  %11 = shl i32 %7, 2"];
	Node0x1c02fc0[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1c03030[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x1c030a0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1c03110[shape=record, label="  %15 = sub i32 1, %0"];
	Node0x1c03180[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x1c031f0[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0x1c03260[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x1c032d0[shape=record, label="  %19 = add i32 %18, %3"];
	Node0x1c03340[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0x1c033b0[shape=record, label="  %21 = sub i32 %20, %14"];
	Node0x1c03420[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0x1c03490[shape=record, label="  %23 = icmp eq i32 %5, %22"];
	Node0x1ba3268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c03930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1c03980[shape=record, label="  ret void"];
	Node0x1c024b0 -> Node0x1c02b60;
	Node0x1c02b60 -> Node0x1c02c20;
	Node0x1c02c20 -> Node0x1c02cc0;
	Node0x1c02cc0 -> Node0x1c02d30;
	Node0x1c02d30 -> Node0x1c02dd0;
	Node0x1c02dd0 -> Node0x1c02e40;
	Node0x1c02e40 -> Node0x1c02eb0;
	Node0x1c02eb0 -> Node0x1c02f50;
	Node0x1c02f50 -> Node0x1c02fc0;
	Node0x1c02fc0 -> Node0x1c03030;
	Node0x1c03030 -> Node0x1c030a0;
	Node0x1c030a0 -> Node0x1c03110;
	Node0x1c03110 -> Node0x1c03180;
	Node0x1c03180 -> Node0x1c031f0;
	Node0x1c031f0 -> Node0x1c03260;
	Node0x1c03260 -> Node0x1c032d0;
	Node0x1c032d0 -> Node0x1c03340;
	Node0x1c03340 -> Node0x1c033b0;
	Node0x1c033b0 -> Node0x1c03420;
	Node0x1c03420 -> Node0x1c03490;
	Node0x1c03490 -> Node0x1ba3268;
	Node0x1ba3268 -> Node0x1c03930;
	Node0x1c03930 -> Node0x1c03980;
edge [color=red]
	Node0x1c024b0 -> Node0x1c02b60;
	Node0x1c02b60 -> Node0x1c02c20;
	Node0x1c02cc0 -> Node0x1c02dd0;
	Node0x1c02e40 -> Node0x1c02eb0;
	Node0x1c02d30 -> Node0x1c02f50;
	Node0x1c02f50 -> Node0x1c02fc0;
	Node0x1c03030 -> Node0x1c030a0;
	Node0x1c03110 -> Node0x1c03180;
	Node0x1c02cc0 -> Node0x1c03180;
	Node0x1c03180 -> Node0x1c031f0;
	Node0x1c02d30 -> Node0x1c031f0;
	Node0x1c031f0 -> Node0x1c03260;
	Node0x1c02dd0 -> Node0x1c03260;
	Node0x1c03260 -> Node0x1c032d0;
	Node0x1c024b0 -> Node0x1c032d0;
	Node0x1c032d0 -> Node0x1c03340;
	Node0x1c02eb0 -> Node0x1c03340;
	Node0x1c03340 -> Node0x1c033b0;
	Node0x1c030a0 -> Node0x1c033b0;
	Node0x1c033b0 -> Node0x1c03420;
	Node0x1c02fc0 -> Node0x1c03420;
	Node0x1c02c20 -> Node0x1c03490;
	Node0x1c03420 -> Node0x1c03490;
	Node0x1c03490 -> Node0x1ba3268;
	Node0x1ba3268 -> Node0x1c03930;
}
