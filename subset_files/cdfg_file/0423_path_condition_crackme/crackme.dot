digraph "DFG for'crackme' function" {
	Node0x21cc100[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x21cc170[shape=record, label="  %6 = xor i32 %5, %1"];
	Node0x21cc210[shape=record, label="  %7 = sub i32 1, %0"];
	Node0x21cc280[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x21cc320[shape=record, label="  %9 = xor i32 %2, 2147483647"];
	Node0x21cc390[shape=record, label="  %10 = and i32 %9, %1"];
	Node0x21cc400[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x21cc470[shape=record, label="  %12 = shl i32 %3, 1"];
	Node0x21cc510[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x21cc580[shape=record, label="  %14 = xor i32 %3, %0"];
	Node0x21cc5f0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x21cc690[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x21cc700[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x21cc770[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x21cc7e0[shape=record, label="  %19 = and i32 %18, %3"];
	Node0x21cc850[shape=record, label="  %20 = or i32 %18, %3"];
	Node0x21cc8c0[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x21cc930[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x21cc9d0[shape=record, label="  %23 = mul i32 %22, -7"];
	Node0x21cca40[shape=record, label="  %24 = xor i32 %20, -1"];
	Node0x21ccae0[shape=record, label="  %25 = shl i32 %17, 3"];
	Node0x21ccb50[shape=record, label="  %26 = add i32 %19, %24"];
	Node0x21ccbf0[shape=record, label="  %27 = mul i32 %26, -3"];
	Node0x21ccc60[shape=record, label="  %28 = sub i32 %10, %1"];
	Node0x21cccd0[shape=record, label="  %29 = add i32 %28, %11"];
	Node0x21ccd40[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x21ccde0[shape=record, label="  %31 = add i32 %6, 2"];
	Node0x21cce50[shape=record, label="  %32 = add i32 %31, %3"];
	Node0x21cd0d0[shape=record, label="  %33 = add i32 %32, %17"];
	Node0x21cd140[shape=record, label="  %34 = add i32 %33, %14"];
	Node0x21cd1b0[shape=record, label="  %35 = add i32 %34, %19"];
	Node0x21cd220[shape=record, label="  %36 = add i32 %35, %20"];
	Node0x21cd290[shape=record, label="  %37 = add i32 %36, %13"];
	Node0x21cd300[shape=record, label="  %38 = add i32 %37, %16"];
	Node0x21cd370[shape=record, label="  %39 = add i32 %38, %23"];
	Node0x21cd3e0[shape=record, label="  %40 = sub i32 %39, %25"];
	Node0x21cd450[shape=record, label="  %41 = add i32 %40, %27"];
	Node0x21cd4c0[shape=record, label="  %42 = add i32 %41, %30"];
	Node0x21cd530[shape=record, label="  %43 = icmp eq i32 %8, %42"];
	Node0x216c268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x21cd9d0[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x21cda20[shape=record, label="  ret void"];
	Node0x21cc100 -> Node0x21cc170;
	Node0x21cc170 -> Node0x21cc210;
	Node0x21cc210 -> Node0x21cc280;
	Node0x21cc280 -> Node0x21cc320;
	Node0x21cc320 -> Node0x21cc390;
	Node0x21cc390 -> Node0x21cc400;
	Node0x21cc400 -> Node0x21cc470;
	Node0x21cc470 -> Node0x21cc510;
	Node0x21cc510 -> Node0x21cc580;
	Node0x21cc580 -> Node0x21cc5f0;
	Node0x21cc5f0 -> Node0x21cc690;
	Node0x21cc690 -> Node0x21cc700;
	Node0x21cc700 -> Node0x21cc770;
	Node0x21cc770 -> Node0x21cc7e0;
	Node0x21cc7e0 -> Node0x21cc850;
	Node0x21cc850 -> Node0x21cc8c0;
	Node0x21cc8c0 -> Node0x21cc930;
	Node0x21cc930 -> Node0x21cc9d0;
	Node0x21cc9d0 -> Node0x21cca40;
	Node0x21cca40 -> Node0x21ccae0;
	Node0x21ccae0 -> Node0x21ccb50;
	Node0x21ccb50 -> Node0x21ccbf0;
	Node0x21ccbf0 -> Node0x21ccc60;
	Node0x21ccc60 -> Node0x21cccd0;
	Node0x21cccd0 -> Node0x21ccd40;
	Node0x21ccd40 -> Node0x21ccde0;
	Node0x21ccde0 -> Node0x21cce50;
	Node0x21cce50 -> Node0x21cd0d0;
	Node0x21cd0d0 -> Node0x21cd140;
	Node0x21cd140 -> Node0x21cd1b0;
	Node0x21cd1b0 -> Node0x21cd220;
	Node0x21cd220 -> Node0x21cd290;
	Node0x21cd290 -> Node0x21cd300;
	Node0x21cd300 -> Node0x21cd370;
	Node0x21cd370 -> Node0x21cd3e0;
	Node0x21cd3e0 -> Node0x21cd450;
	Node0x21cd450 -> Node0x21cd4c0;
	Node0x21cd4c0 -> Node0x21cd530;
	Node0x21cd530 -> Node0x216c268;
	Node0x216c268 -> Node0x21cd9d0;
	Node0x21cd9d0 -> Node0x21cda20;
edge [color=red]
	Node0x21cc100 -> Node0x21cc170;
	Node0x21cc210 -> Node0x21cc280;
	Node0x21cc170 -> Node0x21cc280;
	Node0x21cc320 -> Node0x21cc390;
	Node0x21cc470 -> Node0x21cc510;
	Node0x21cc580 -> Node0x21cc5f0;
	Node0x21cc5f0 -> Node0x21cc690;
	Node0x21cc770 -> Node0x21cc7e0;
	Node0x21cc770 -> Node0x21cc850;
	Node0x21cc8c0 -> Node0x21cc930;
	Node0x21cc930 -> Node0x21cc9d0;
	Node0x21cc850 -> Node0x21cca40;
	Node0x21cc700 -> Node0x21ccae0;
	Node0x21cc7e0 -> Node0x21ccb50;
	Node0x21cca40 -> Node0x21ccb50;
	Node0x21ccb50 -> Node0x21ccbf0;
	Node0x21cc390 -> Node0x21ccc60;
	Node0x21ccc60 -> Node0x21cccd0;
	Node0x21cc400 -> Node0x21cccd0;
	Node0x21cccd0 -> Node0x21ccd40;
	Node0x21cc170 -> Node0x21ccde0;
	Node0x21ccde0 -> Node0x21cce50;
	Node0x21cce50 -> Node0x21cd0d0;
	Node0x21cc700 -> Node0x21cd0d0;
	Node0x21cd0d0 -> Node0x21cd140;
	Node0x21cc580 -> Node0x21cd140;
	Node0x21cd140 -> Node0x21cd1b0;
	Node0x21cc7e0 -> Node0x21cd1b0;
	Node0x21cd1b0 -> Node0x21cd220;
	Node0x21cc850 -> Node0x21cd220;
	Node0x21cd220 -> Node0x21cd290;
	Node0x21cc510 -> Node0x21cd290;
	Node0x21cd290 -> Node0x21cd300;
	Node0x21cc690 -> Node0x21cd300;
	Node0x21cd300 -> Node0x21cd370;
	Node0x21cc9d0 -> Node0x21cd370;
	Node0x21cd370 -> Node0x21cd3e0;
	Node0x21ccae0 -> Node0x21cd3e0;
	Node0x21cd3e0 -> Node0x21cd450;
	Node0x21ccbf0 -> Node0x21cd450;
	Node0x21cd450 -> Node0x21cd4c0;
	Node0x21ccd40 -> Node0x21cd4c0;
	Node0x21cc280 -> Node0x21cd530;
	Node0x21cd4c0 -> Node0x21cd530;
	Node0x21cd530 -> Node0x216c268;
	Node0x216c268 -> Node0x21cd9d0;
}
