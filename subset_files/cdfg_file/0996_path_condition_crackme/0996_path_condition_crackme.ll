; ModuleID = '../.././c_source_file/0996_path_condition_crackme.c'
source_filename = "../.././c_source_file/0996_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = shl i32 %6, 1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %0
  %10 = or i32 %9, %1
  %11 = add i32 %7, %10
  %12 = xor i32 %4, -1
  %13 = or i32 %12, %3
  %14 = xor i32 %3, -1
  %15 = or i32 %14, %4
  %16 = or i32 %4, %3
  %17 = shl i32 %16, 1
  %18 = add i32 %16, 1
  %19 = add i32 %13, 1
  %20 = and i32 %4, %3
  %21 = shl i32 %20, 2
  %22 = xor i32 %0, -1
  %23 = and i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %22
  %26 = xor i32 %1, %0
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %26, %28
  %30 = and i32 %2, %0
  %31 = xor i32 %1, -1
  %32 = or i32 %31, %0
  %33 = xor i32 %30, %32
  %34 = xor i32 %32, -1
  %35 = or i32 %27, %34
  %36 = or i32 %2, %1
  %37 = and i32 %27, %1
  %38 = shl i32 %37, 1
  %39 = and i32 %28, %31
  %40 = and i32 %31, %0
  %41 = xor i32 %40, %24
  %42 = and i32 %26, %28
  %43 = or i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %30, %44
  %46 = xor i32 %30, -1
  %47 = add i32 %30, 1
  %48 = and i32 %24, %0
  %49 = or i32 %8, %1
  %50 = and i32 %49, %0
  %51 = xor i32 %2, %1
  %52 = or i32 %51, %0
  %53 = and i32 %1, %0
  %54 = xor i32 %49, %53
  %55 = or i32 %26, %2
  %56 = or i32 %27, %44
  %57 = and i32 %31, %2
  %58 = and i32 %57, %0
  %59 = xor i32 %58, %52
  %60 = xor i32 %40, -1
  %61 = and i32 %51, %60
  %62 = and i32 %60, %2
  %63 = shl i32 %62, 1
  %64 = xor i32 %43, %2
  %65 = or i32 %53, %8
  %66 = or i32 %51, %44
  %67 = xor i32 %53, -1
  %68 = and i32 %8, %67
  %69 = or i32 %51, %22
  %70 = or i32 %53, %28
  %71 = shl i32 %70, 1
  %72 = and i32 %27, %26
  %73 = and i32 %8, %1
  %74 = or i32 %73, %40
  %75 = xor i32 %73, -1
  %76 = xor i32 %75, %0
  %77 = or i32 %28, %31
  %78 = and i32 %23, %0
  %79 = xor i32 %51, %0
  %80 = xor i32 %78, %79
  %81 = xor i32 %51, -1
  %82 = and i32 %32, %81
  %83 = and i32 %43, %28
  %84 = and i32 %51, %22
  %85 = or i32 %36, %22
  %86 = or i32 %8, %0
  %87 = xor i32 %86, -1
  %88 = or i32 %53, %87
  %89 = and i32 %81, %67
  %90 = and i32 %43, %2
  %91 = and i32 %51, %43
  %92 = and i32 %23, %22
  %93 = and i32 %36, %0
  %94 = or i32 %92, %93
  %95 = or i32 %2, %0
  %96 = and i32 %95, %26
  %97 = and i32 %57, %22
  %98 = or i32 %31, %2
  %99 = and i32 %98, %0
  %100 = or i32 %97, %99
  %101 = xor i32 %23, %0
  %102 = and i32 %36, %22
  %103 = or i32 %78, %102
  %104 = and i32 %32, %2
  %105 = or i32 %26, %8
  %106 = or i32 %34, %2
  %107 = xor i32 %73, %0
  %108 = shl i32 %107, 2
  %109 = or i32 %23, %40
  %110 = and i32 %81, %0
  %111 = or i32 %27, %1
  %112 = xor i32 %49, -1
  %113 = and i32 %8, %60
  %114 = xor i32 %26, -1
  %115 = add i32 %26, 1
  %116 = and i32 %28, %114
  %117 = or i32 %30, %31
  %118 = or i32 %49, %0
  %119 = xor i32 %9, %1
  %120 = xor i32 %30, %36
  %121 = or i32 %8, %114
  %122 = and i32 %43, %81
  %123 = xor i32 %30, %75
  %124 = or i32 %40, %8
  %125 = xor i32 %9, -1
  %126 = and i32 %26, %125
  %127 = or i32 %28, %44
  %128 = xor i32 %60, %2
  %129 = or i32 %73, %0
  %130 = and i32 %27, %43
  %131 = or i32 %81, %0
  %132 = or i32 %53, %112
  %133 = and i32 %98, %22
  %134 = xor i32 %133, -1
  %135 = xor i32 %58, %134
  %136 = xor i32 %32, %2
  %137 = or i32 %87, %1
  %138 = shl i32 %137, 1
  %139 = and i32 %75, %0
  %140 = or i32 %58, %133
  %141 = and i32 %51, %67
  %142 = or i32 %8, %44
  %143 = xor i32 %36, %53
  %144 = shl i32 %143, 1
  %145 = xor i32 %95, -1
  %146 = xor i32 %145, %1
  %147 = or i32 %28, %1
  %148 = or i32 %51, %53
  %149 = or i32 %75, %22
  %150 = or i32 %23, %22
  %151 = or i32 %87, %114
  %152 = shl i32 %151, 1
  %153 = and i32 %32, %8
  %154 = or i32 %27, %53
  %155 = or i32 %53, %145
  %156 = shl i32 %34, 1
  %157 = or i32 %81, %44
  %158 = or i32 %87, %31
  %159 = and i32 %49, %22
  %160 = or i32 %75, %0
  %161 = or i32 %81, %34
  %162 = xor i32 %36, -1
  %163 = xor i32 %162, %0
  %164 = and i32 %86, %31
  %165 = shl i32 %28, 2
  %166 = or i32 %28, %34
  %167 = or i32 %78, %84
  %168 = shl i32 %167, 1
  %169 = or i32 %30, %26
  %170 = xor i32 %97, %69
  %171 = or i32 %53, %2
  %172 = and i32 %24, %22
  %173 = xor i32 %9, %24
  %174 = and i32 %32, %28
  %175 = xor i32 %24, %0
  %176 = and i32 %26, %46
  %177 = xor i32 %36, %0
  %178 = or i32 %78, %177
  %179 = and i32 %51, %0
  %180 = or i32 %92, %179
  %181 = xor i32 %125, %1
  %182 = or i32 %30, %1
  %183 = and i32 %86, %26
  %184 = or i32 %81, %22
  %185 = xor i32 %34, %2
  %186 = or i32 %112, %0
  %187 = xor i32 %99, -1
  %188 = xor i32 %97, %187
  %189 = or i32 %73, %22
  %190 = or i32 %27, %31
  %191 = and i32 %46, %114
  %192 = shl i32 %191, 1
  %193 = xor i32 %67, %2
  %194 = xor i32 %95, %53
  %195 = and i32 %26, %8
  %196 = xor i32 %86, %1
  %197 = add i32 %36, 1
  %198 = or i32 %44, %2
  %199 = and i32 %27, %32
  %200 = shl i32 %199, 2
  %201 = xor i32 %78, 2147483647
  %202 = xor i32 %201, %102
  %203 = or i32 %30, %114
  %204 = or i32 %8, %34
  %205 = or i32 %162, %22
  %206 = shl i32 %205, 1
  %207 = xor i32 %95, %1
  %208 = xor i32 %9, %49
  %209 = shl i32 %208, 1
  %210 = and i32 %125, %1
  %211 = or i32 %162, %0
  %212 = and i32 %28, %1
  %213 = shl i32 %212, 1
  %214 = and i32 %27, %60
  %215 = add i32 %9, 1
  %216 = and i32 %81, %60
  %217 = and i32 %125, %31
  %218 = xor i32 %86, %53
  %219 = shl i32 %218, 1
  %220 = and i32 %26, %2
  %221 = xor i32 %40, %75
  %222 = and i32 %51, %32
  %223 = xor i32 %87, %1
  %224 = xor i32 %49, %0
  %225 = or i32 %9, %26
  %226 = xor i32 %84, -1
  %227 = xor i32 %78, %226
  %228 = or i32 %30, %162
  %229 = or i32 %28, %114
  %230 = shl i32 %229, 1
  %231 = or i32 %9, %23
  %232 = xor i32 %52, -1
  %233 = or i32 %58, %232
  %234 = or i32 %112, %22
  %235 = xor i32 %179, -1
  %236 = xor i32 %92, %235
  %237 = or i32 %114, %2
  %238 = xor i32 %44, %2
  %239 = and i32 %27, %31
  %240 = shl i32 %239, 1
  %241 = or i32 %36, %0
  %242 = shl i32 %241, 1
  %243 = or i32 %9, %114
  %244 = and i32 %67, %2
  %245 = and i32 %27, %114
  %246 = or i32 %145, %1
  %247 = and i32 %28, %67
  %248 = and i32 %81, %22
  %249 = and i32 %95, %114
  %250 = shl i32 %249, 2
  %251 = xor i32 %81, %0
  %252 = and i32 %86, %114
  %253 = xor i32 %201, %177
  %254 = and i32 %75, %22
  %255 = and i32 %162, %22
  %256 = and i32 %73, %22
  %257 = mul i32 %256, 21
  %258 = and i32 %162, %0
  %259 = and i32 %73, %0
  %260 = and i32 %112, %22
  %261 = mul i32 %260, 11
  %262 = mul i32 %92, 7
  %263 = and i32 %112, %0
  %264 = mul i32 %263, -14
  %265 = shl i32 %78, 1
  %266 = add i32 %8, %0
  %267 = add i32 %266, %124
  %268 = add i32 %267, %121
  %269 = add i32 %268, %112
  %270 = add i32 %269, %3
  %271 = add i32 %270, %248
  %272 = add i32 %271, %231
  %273 = add i32 %272, %186
  %274 = add i32 %273, %160
  %275 = add i32 %274, %159
  %276 = add i32 %275, %149
  %277 = add i32 %276, %84
  %278 = add i32 %277, %76
  %279 = add i32 %278, %72
  %280 = add i32 %279, %66
  %281 = add i32 %280, %178
  %282 = add i32 %281, %202
  %283 = add i32 %282, %253
  %284 = shl i32 %283, 1
  %285 = sub i32 %127, %258
  %286 = add i32 %285, %4
  %287 = add i32 %286, %18
  %288 = add i32 %287, %19
  %289 = mul i32 %288, 3
  %290 = sub i32 %47, %175
  %291 = add i32 %290, %252
  %292 = sub i32 %291, %111
  %293 = add i32 %292, %83
  %294 = mul i32 %293, 5
  %295 = add i32 %259, %255
  %296 = mul i32 %295, -13
  %297 = add i32 %1, -2
  %298 = add i32 %297, %44
  %299 = add i32 %298, %115
  %300 = sub i32 %299, %53
  %301 = add i32 %300, %60
  %302 = add i32 %301, %2
  %303 = add i32 %302, %14
  %304 = sub i32 %303, %36
  %305 = add i32 %304, %23
  %306 = sub i32 %305, %55
  %307 = sub i32 %306, %64
  %308 = sub i32 %307, %65
  %309 = sub i32 %308, %68
  %310 = add i32 %309, %81
  %311 = add i32 %310, %90
  %312 = add i32 %311, %104
  %313 = add i32 %312, %105
  %314 = sub i32 %313, %106
  %315 = sub i32 %314, %113
  %316 = add i32 %315, %128
  %317 = add i32 %316, %136
  %318 = add i32 %317, %73
  %319 = add i32 %318, %142
  %320 = add i32 %319, %153
  %321 = sub i32 %320, %156
  %322 = add i32 %321, %171
  %323 = add i32 %322, %185
  %324 = add i32 %323, %9
  %325 = sub i32 %324, %193
  %326 = sub i32 %325, %195
  %327 = add i32 %326, %197
  %328 = sub i32 %327, %198
  %329 = sub i32 %328, %204
  %330 = add i32 %329, %49
  %331 = add i32 %330, %215
  %332 = sub i32 %331, %220
  %333 = sub i32 %332, %30
  %334 = add i32 %333, %27
  %335 = add i32 %334, %237
  %336 = add i32 %335, %238
  %337 = add i32 %336, %145
  %338 = sub i32 %337, %244
  %339 = sub i32 %338, %95
  %340 = add i32 %339, %12
  %341 = sub i32 %340, %25
  %342 = sub i32 %341, %29
  %343 = sub i32 %342, %33
  %344 = sub i32 %343, %35
  %345 = sub i32 %344, %39
  %346 = add i32 %345, %41
  %347 = sub i32 %346, %42
  %348 = add i32 %347, %45
  %349 = add i32 %348, %48
  %350 = add i32 %349, %50
  %351 = add i32 %350, %52
  %352 = add i32 %351, %54
  %353 = sub i32 %352, %56
  %354 = add i32 %353, %61
  %355 = sub i32 %354, %63
  %356 = add i32 %355, %69
  %357 = add i32 %356, %74
  %358 = add i32 %357, %77
  %359 = add i32 %358, %82
  %360 = sub i32 %359, %85
  %361 = add i32 %360, %88
  %362 = add i32 %361, %89
  %363 = sub i32 %362, %91
  %364 = sub i32 %363, %96
  %365 = sub i32 %364, %101
  %366 = sub i32 %365, %109
  %367 = sub i32 %366, %110
  %368 = add i32 %367, %116
  %369 = sub i32 %368, %117
  %370 = sub i32 %369, %118
  %371 = add i32 %370, %119
  %372 = add i32 %371, %120
  %373 = sub i32 %372, %122
  %374 = add i32 %373, %123
  %375 = sub i32 %374, %126
  %376 = add i32 %375, %129
  %377 = sub i32 %376, %130
  %378 = add i32 %377, %131
  %379 = sub i32 %378, %102
  %380 = add i32 %379, %132
  %381 = sub i32 %380, %139
  %382 = sub i32 %381, %141
  %383 = add i32 %382, %146
  %384 = add i32 %383, %147
  %385 = sub i32 %384, %148
  %386 = sub i32 %385, %150
  %387 = sub i32 %386, %154
  %388 = sub i32 %387, %93
  %389 = add i32 %388, %155
  %390 = add i32 %389, %157
  %391 = sub i32 %390, %158
  %392 = add i32 %391, %161
  %393 = add i32 %392, %163
  %394 = sub i32 %393, %164
  %395 = sub i32 %394, %165
  %396 = add i32 %395, %166
  %397 = add i32 %396, %169
  %398 = sub i32 %397, %172
  %399 = add i32 %398, %173
  %400 = add i32 %399, %174
  %401 = sub i32 %400, %176
  %402 = add i32 %401, %181
  %403 = add i32 %402, %182
  %404 = add i32 %403, %183
  %405 = add i32 %404, %184
  %406 = sub i32 %405, %189
  %407 = add i32 %406, %190
  %408 = add i32 %407, %79
  %409 = sub i32 %408, %194
  %410 = sub i32 %409, %196
  %411 = sub i32 %410, %203
  %412 = add i32 %411, %207
  %413 = add i32 %412, %210
  %414 = add i32 %413, %211
  %415 = add i32 %414, %214
  %416 = add i32 %415, %216
  %417 = sub i32 %416, %217
  %418 = sub i32 %417, %221
  %419 = add i32 %418, %222
  %420 = add i32 %419, %223
  %421 = add i32 %420, %224
  %422 = sub i32 %421, %225
  %423 = add i32 %422, %228
  %424 = add i32 %423, %234
  %425 = add i32 %424, %243
  %426 = sub i32 %425, %245
  %427 = sub i32 %426, %246
  %428 = sub i32 %427, %247
  %429 = sub i32 %428, %251
  %430 = sub i32 %429, %254
  %431 = sub i32 %430, %13
  %432 = add i32 %431, %15
  %433 = add i32 %432, %6
  %434 = sub i32 %433, %38
  %435 = sub i32 %434, %59
  %436 = sub i32 %435, %71
  %437 = sub i32 %436, %80
  %438 = add i32 %437, %94
  %439 = add i32 %438, %100
  %440 = add i32 %439, %103
  %441 = sub i32 %440, %108
  %442 = sub i32 %441, %135
  %443 = sub i32 %442, %138
  %444 = add i32 %443, %140
  %445 = sub i32 %444, %144
  %446 = sub i32 %445, %152
  %447 = sub i32 %446, %170
  %448 = add i32 %447, %180
  %449 = sub i32 %448, %188
  %450 = sub i32 %449, %192
  %451 = add i32 %450, %200
  %452 = sub i32 %451, %206
  %453 = sub i32 %452, %209
  %454 = sub i32 %453, %213
  %455 = sub i32 %454, %219
  %456 = add i32 %455, %227
  %457 = sub i32 %456, %230
  %458 = add i32 %457, %233
  %459 = sub i32 %458, %236
  %460 = sub i32 %459, %240
  %461 = sub i32 %460, %242
  %462 = sub i32 %461, %250
  %463 = add i32 %462, %257
  %464 = add i32 %463, %261
  %465 = add i32 %464, %262
  %466 = add i32 %465, %264
  %467 = sub i32 %466, %265
  %468 = sub i32 %467, %17
  %469 = sub i32 %468, %21
  %470 = sub i32 %469, %168
  %471 = add i32 %470, %296
  %472 = add i32 %471, %294
  %473 = add i32 %472, %289
  %474 = add i32 %473, %284
  %475 = icmp eq i32 %11, %474
  %476 = select i1 %475, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %477 = tail call i32 @puts(i8* nonnull dereferenceable(1) %476)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
