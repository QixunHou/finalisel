digraph "DFG for'crackme' function" {
	Node0x236f4e0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x236fb90[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x236fc50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x236fcc0[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x236fd30[shape=record, label="  %7 = sub i32 %4, %6"];
	Node0x236fda0[shape=record, label="  %8 = and i32 %5, %0"];
	Node0x236fe10[shape=record, label="  %9 = add i32 %8, 1"];
	Node0x236fe80[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x236fef0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x236ff60[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0x236ffd0[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x2370070[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x23700e0[shape=record, label="  %15 = add i32 %12, %11"];
	Node0x2370150[shape=record, label="  %16 = add i32 %15, %9"];
	Node0x23701f0[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x2370260[shape=record, label="  %18 = sub i32 1, %0"];
	Node0x23702d0[shape=record, label="  %19 = add i32 %18, %1"];
	Node0x2370340[shape=record, label="  %20 = add i32 %19, %3"];
	Node0x23703b0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x2370420[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x2370490[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x2370500[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x2370570[shape=record, label="  %25 = icmp eq i32 %7, %24"];
	Node0x2310268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2370a10[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x2370a60[shape=record, label="  ret void"];
	Node0x236f4e0 -> Node0x236fb90;
	Node0x236fb90 -> Node0x236fc50;
	Node0x236fc50 -> Node0x236fcc0;
	Node0x236fcc0 -> Node0x236fd30;
	Node0x236fd30 -> Node0x236fda0;
	Node0x236fda0 -> Node0x236fe10;
	Node0x236fe10 -> Node0x236fe80;
	Node0x236fe80 -> Node0x236fef0;
	Node0x236fef0 -> Node0x236ff60;
	Node0x236ff60 -> Node0x236ffd0;
	Node0x236ffd0 -> Node0x2370070;
	Node0x2370070 -> Node0x23700e0;
	Node0x23700e0 -> Node0x2370150;
	Node0x2370150 -> Node0x23701f0;
	Node0x23701f0 -> Node0x2370260;
	Node0x2370260 -> Node0x23702d0;
	Node0x23702d0 -> Node0x2370340;
	Node0x2370340 -> Node0x23703b0;
	Node0x23703b0 -> Node0x2370420;
	Node0x2370420 -> Node0x2370490;
	Node0x2370490 -> Node0x2370500;
	Node0x2370500 -> Node0x2370570;
	Node0x2370570 -> Node0x2310268;
	Node0x2310268 -> Node0x2370a10;
	Node0x2370a10 -> Node0x2370a60;
edge [color=red]
	Node0x236f4e0 -> Node0x236fb90;
	Node0x236fc50 -> Node0x236fcc0;
	Node0x236fb90 -> Node0x236fd30;
	Node0x236fcc0 -> Node0x236fd30;
	Node0x236fc50 -> Node0x236fda0;
	Node0x236fda0 -> Node0x236fe10;
	Node0x236fe80 -> Node0x236fef0;
	Node0x236fcc0 -> Node0x236ff60;
	Node0x236ffd0 -> Node0x2370070;
	Node0x236ff60 -> Node0x23700e0;
	Node0x236fef0 -> Node0x23700e0;
	Node0x23700e0 -> Node0x2370150;
	Node0x236fe10 -> Node0x2370150;
	Node0x2370150 -> Node0x23701f0;
	Node0x2370260 -> Node0x23702d0;
	Node0x23702d0 -> Node0x2370340;
	Node0x236f4e0 -> Node0x2370340;
	Node0x2370340 -> Node0x23703b0;
	Node0x236fe80 -> Node0x23703b0;
	Node0x23703b0 -> Node0x2370420;
	Node0x236fda0 -> Node0x2370420;
	Node0x2370420 -> Node0x2370490;
	Node0x2370070 -> Node0x2370490;
	Node0x2370490 -> Node0x2370500;
	Node0x23701f0 -> Node0x2370500;
	Node0x236fd30 -> Node0x2370570;
	Node0x2370500 -> Node0x2370570;
	Node0x2370570 -> Node0x2310268;
	Node0x2310268 -> Node0x2370a10;
}
