digraph "DFG for'crackme' function" {
	Node0xa695a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xa69c50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xa69d10[shape=record, label="  %5 = or i32 %4, %0"];
	Node0xa69d80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xa69df0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xa69e60[shape=record, label="  %8 = or i32 %1, %0"];
	Node0xa69ed0[shape=record, label="  %9 = and i32 %4, %0"];
	Node0xa69f40[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xa69fb0[shape=record, label="  %11 = shl i32 %5, 2"];
	Node0xa6a050[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0xa6a0c0[shape=record, label="  %13 = shl i32 %9, 2"];
	Node0xa6a130[shape=record, label="  %14 = shl i32 %6, 2"];
	Node0xa6a1a0[shape=record, label="  %15 = add i32 %3, %8"];
	Node0xa6a240[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0xa6a2b0[shape=record, label="  %17 = add i32 %0, 2"];
	Node0xa6a320[shape=record, label="  %18 = add i32 %17, %1"];
	Node0xa6a390[shape=record, label="  %19 = sub i32 %18, %3"];
	Node0xa6a400[shape=record, label="  %20 = add i32 %19, %5"];
	Node0xa6a470[shape=record, label="  %21 = add i32 %20, %7"];
	Node0xa6a4e0[shape=record, label="  %22 = add i32 %21, %10"];
	Node0xa6a550[shape=record, label="  %23 = add i32 %22, %8"];
	Node0xa6a5c0[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0xa6a630[shape=record, label="  %25 = sub i32 %24, %14"];
	Node0xa6a6a0[shape=record, label="  %26 = sub i32 %25, %12"];
	Node0xa6a710[shape=record, label="  %27 = add i32 %26, %16"];
	Node0xa6a780[shape=record, label="  %28 = icmp eq i32 %27, -1"];
	Node0xa0a268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa6ac20[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xa6ac70[shape=record, label="  ret void"];
	Node0xa695a0 -> Node0xa69c50;
	Node0xa69c50 -> Node0xa69d10;
	Node0xa69d10 -> Node0xa69d80;
	Node0xa69d80 -> Node0xa69df0;
	Node0xa69df0 -> Node0xa69e60;
	Node0xa69e60 -> Node0xa69ed0;
	Node0xa69ed0 -> Node0xa69f40;
	Node0xa69f40 -> Node0xa69fb0;
	Node0xa69fb0 -> Node0xa6a050;
	Node0xa6a050 -> Node0xa6a0c0;
	Node0xa6a0c0 -> Node0xa6a130;
	Node0xa6a130 -> Node0xa6a1a0;
	Node0xa6a1a0 -> Node0xa6a240;
	Node0xa6a240 -> Node0xa6a2b0;
	Node0xa6a2b0 -> Node0xa6a320;
	Node0xa6a320 -> Node0xa6a390;
	Node0xa6a390 -> Node0xa6a400;
	Node0xa6a400 -> Node0xa6a470;
	Node0xa6a470 -> Node0xa6a4e0;
	Node0xa6a4e0 -> Node0xa6a550;
	Node0xa6a550 -> Node0xa6a5c0;
	Node0xa6a5c0 -> Node0xa6a630;
	Node0xa6a630 -> Node0xa6a6a0;
	Node0xa6a6a0 -> Node0xa6a710;
	Node0xa6a710 -> Node0xa6a780;
	Node0xa6a780 -> Node0xa0a268;
	Node0xa0a268 -> Node0xa6ac20;
	Node0xa6ac20 -> Node0xa6ac70;
edge [color=red]
	Node0xa69c50 -> Node0xa69d10;
	Node0xa69d80 -> Node0xa69df0;
	Node0xa69c50 -> Node0xa69ed0;
	Node0xa69ed0 -> Node0xa69f40;
	Node0xa69d10 -> Node0xa69fb0;
	Node0xa69fb0 -> Node0xa6a050;
	Node0xa69ed0 -> Node0xa6a0c0;
	Node0xa69d80 -> Node0xa6a130;
	Node0xa695a0 -> Node0xa6a1a0;
	Node0xa69e60 -> Node0xa6a1a0;
	Node0xa6a1a0 -> Node0xa6a240;
	Node0xa6a2b0 -> Node0xa6a320;
	Node0xa6a320 -> Node0xa6a390;
	Node0xa695a0 -> Node0xa6a390;
	Node0xa6a390 -> Node0xa6a400;
	Node0xa69d10 -> Node0xa6a400;
	Node0xa6a400 -> Node0xa6a470;
	Node0xa69df0 -> Node0xa6a470;
	Node0xa6a470 -> Node0xa6a4e0;
	Node0xa69f40 -> Node0xa6a4e0;
	Node0xa6a4e0 -> Node0xa6a550;
	Node0xa69e60 -> Node0xa6a550;
	Node0xa6a550 -> Node0xa6a5c0;
	Node0xa6a0c0 -> Node0xa6a5c0;
	Node0xa6a5c0 -> Node0xa6a630;
	Node0xa6a130 -> Node0xa6a630;
	Node0xa6a630 -> Node0xa6a6a0;
	Node0xa6a050 -> Node0xa6a6a0;
	Node0xa6a6a0 -> Node0xa6a710;
	Node0xa6a240 -> Node0xa6a710;
	Node0xa6a710 -> Node0xa6a780;
	Node0xa6a780 -> Node0xa0a268;
	Node0xa0a268 -> Node0xa6ac20;
}
