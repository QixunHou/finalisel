; ModuleID = '../.././c_source_file/1640_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1640_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %1, %0
  %9 = and i32 %8, %2
  %10 = add i32 %3, 1
  %11 = add i32 %10, %9
  %12 = sub i32 %11, %7
  %13 = and i32 %4, %3
  %14 = and i32 %6, %3
  %15 = or i32 %4, %3
  %16 = add i32 %4, 1
  %17 = xor i32 %15, -1
  %18 = shl i32 %7, 1
  %19 = xor i32 %18, -2
  %20 = xor i32 %0, -1
  %21 = xor i32 %1, -1
  %22 = and i32 %21, %2
  %23 = and i32 %22, %20
  %24 = xor i32 %2, %1
  %25 = or i32 %24, %20
  %26 = xor i32 %25, -1
  %27 = or i32 %23, %26
  %28 = xor i32 %2, -1
  %29 = or i32 %8, %28
  %30 = or i32 %21, %2
  %31 = and i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %23, %32
  %34 = or i32 %28, %0
  %35 = and i32 %34, %21
  %36 = xor i32 %34, -1
  %37 = or i32 %36, %1
  %38 = or i32 %28, %1
  %39 = or i32 %38, %20
  %40 = and i32 %21, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %2
  %43 = and i32 %1, %0
  %44 = xor i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %43, %45
  %47 = and i32 %38, %0
  %48 = or i32 %40, %28
  %49 = shl i32 %48, 1
  %50 = or i32 %2, %1
  %51 = and i32 %28, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %0
  %54 = or i32 %52, %20
  %55 = xor i32 %43, -1
  %56 = and i32 %28, %55
  %57 = and i32 %50, %0
  %58 = shl i32 %57, 1
  %59 = or i32 %43, %2
  %60 = shl i32 %59, 1
  %61 = and i32 %2, %1
  %62 = and i32 %61, %20
  %63 = and i32 %24, %0
  %64 = xor i32 %63, 2147483647
  %65 = xor i32 %64, %62
  %66 = shl i32 %65, 1
  %67 = xor i32 %8, -1
  %68 = or i32 %67, %2
  %69 = or i32 %23, %31
  %70 = and i32 %22, %0
  %71 = xor i32 %24, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %70, %72
  %74 = and i32 %61, %0
  %75 = or i32 %74, %72
  %76 = or i32 %1, %0
  %77 = and i32 %76, %45
  %78 = and i32 %45, %41
  %79 = xor i32 %76, -1
  %80 = or i32 %79, %2
  %81 = xor i32 %57, -1
  %82 = xor i32 %62, %81
  %83 = and i32 %38, %20
  %84 = or i32 %45, %21
  %85 = xor i32 %61, -1
  %86 = or i32 %85, %20
  %87 = xor i32 %30, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %70, %88
  %90 = and i32 %24, %20
  %91 = or i32 %44, %43
  %92 = xor i32 %24, -1
  %93 = or i32 %40, %92
  %94 = or i32 %24, %79
  %95 = and i32 %50, %20
  %96 = shl i32 %85, 2
  %97 = or i32 %2, %0
  %98 = and i32 %97, %8
  %99 = shl i32 %98, 1
  %100 = xor i32 %43, %2
  %101 = xor i32 %74, -1
  %102 = xor i32 %90, %101
  %103 = and i32 %2, %0
  %104 = or i32 %103, %79
  %105 = xor i32 %103, -1
  %106 = and i32 %8, %105
  %107 = and i32 %28, %0
  %108 = xor i32 %107, %38
  %109 = and i32 %41, %2
  %110 = and i32 %52, %20
  %111 = and i32 %28, %41
  %112 = add i32 %103, 1
  %113 = and i32 %85, %0
  %114 = or i32 %28, %79
  %115 = or i32 %70, %87
  %116 = xor i32 %50, -1
  %117 = or i32 %116, %20
  %118 = xor i32 %74, %71
  %119 = and i32 %76, %92
  %120 = and i32 %44, %8
  %121 = and i32 %44, %21
  %122 = xor i32 %97, -1
  %123 = or i32 %8, %122
  %124 = shl i32 %123, 1
  %125 = xor i32 %51, %0
  %126 = or i32 %44, %40
  %127 = or i32 %44, %8
  %128 = and i32 %34, %8
  %129 = and i32 %45, %67
  %130 = xor i32 %97, %43
  %131 = xor i32 %38, %0
  %132 = or i32 %70, %71
  %133 = shl i32 %132, 1
  %134 = or i32 %122, %67
  %135 = and i32 %44, %76
  %136 = and i32 %44, %67
  %137 = or i32 %24, %0
  %138 = xor i32 %137, -1
  %139 = or i32 %70, %138
  %140 = xor i32 %34, %43
  %141 = xor i32 %103, %76
  %142 = or i32 %116, %0
  %143 = shl i32 %142, 1
  %144 = and i32 %105, %21
  %145 = xor i32 %116, %0
  %146 = shl i32 %145, 1
  %147 = or i32 %107, %67
  %148 = xor i32 %103, %52
  %149 = xor i32 %105, %1
  %150 = and i32 %30, %20
  %151 = xor i32 %150, 2147483647
  %152 = xor i32 %151, %70
  %153 = and i32 %85, %20
  %154 = shl i32 %153, 1
  %155 = xor i32 %40, %52
  %156 = or i32 %43, %28
  %157 = shl i32 %156, 1
  %158 = xor i32 %40, %85
  %159 = or i32 %21, %0
  %160 = and i32 %159, %2
  %161 = shl i32 %160, 1
  %162 = xor i32 %38, -1
  %163 = or i32 %107, %162
  %164 = or i32 %103, %51
  %165 = shl i32 %164, 1
  %166 = and i32 %24, %76
  %167 = xor i32 %107, -1
  %168 = and i32 %8, %167
  %169 = and i32 %159, %28
  %170 = and i32 %44, %1
  %171 = or i32 %45, %79
  %172 = or i32 %43, %122
  %173 = and i32 %44, %55
  %174 = or i32 %103, %8
  %175 = and i32 %44, %41
  %176 = or i32 %122, %1
  %177 = and i32 %97, %21
  %178 = and i32 %92, %0
  %179 = xor i32 %50, %0
  %180 = xor i32 %179, %101
  %181 = xor i32 %36, %1
  %182 = and i32 %55, %2
  %183 = or i32 %74, %95
  %184 = or i32 %44, %67
  %185 = shl i32 %184, 1
  %186 = or i32 %74, %90
  %187 = or i32 %74, %179
  %188 = and i32 %76, %2
  %189 = and i32 %92, %55
  %190 = xor i32 %103, %1
  %191 = and i32 %34, %67
  %192 = xor i32 %159, -1
  %193 = or i32 %28, %192
  %194 = xor i32 %95, %101
  %195 = or i32 %8, %36
  %196 = shl i32 %195, 1
  %197 = xor i32 %103, %159
  %198 = and i32 %44, %159
  %199 = or i32 %45, %1
  %200 = and i32 %45, %21
  %201 = shl i32 %200, 1
  %202 = and i32 %159, %45
  %203 = xor i32 %107, %1
  %204 = or i32 %62, %57
  %205 = and i32 %167, %21
  %206 = or i32 %107, %1
  %207 = shl i32 %206, 1
  %208 = xor i32 %92, %0
  %209 = shl i32 %208, 1
  %210 = xor i32 %107, %85
  %211 = xor i32 %76, %2
  %212 = shl i32 %211, 1
  %213 = or i32 %51, %0
  %214 = and i32 %45, %55
  %215 = or i32 %44, %1
  %216 = xor i32 %192, %2
  %217 = and i32 %24, %159
  %218 = or i32 %162, %0
  %219 = xor i32 %55, %2
  %220 = xor i32 %85, %0
  %221 = or i32 %103, %21
  %222 = or i32 %40, %2
  %223 = and i32 %34, %1
  %224 = or i32 %103, %192
  %225 = shl i32 %38, 1
  %226 = or i32 %103, %67
  %227 = or i32 %92, %0
  %228 = xor i32 %167, %1
  %229 = shl i32 %228, 1
  %230 = xor i32 %159, %2
  %231 = and i32 %24, %55
  %232 = or i32 %61, %40
  %233 = xor i32 %23, %25
  %234 = shl i32 %51, 1
  %235 = and i32 %92, %20
  %236 = or i32 %61, %0
  %237 = xor i32 %97, %1
  %238 = xor i32 %50, %43
  %239 = and i32 %67, %2
  %240 = and i32 %76, %28
  %241 = or i32 %8, %45
  %242 = or i32 %50, %20
  %243 = and i32 %97, %67
  %244 = or i32 %62, %63
  %245 = or i32 %36, %21
  %246 = or i32 %122, %21
  %247 = or i32 %70, %150
  %248 = or i32 %36, %67
  %249 = and i32 %97, %1
  %250 = xor i32 %162, %0
  %251 = or i32 %103, %116
  %252 = and i32 %8, %28
  %253 = xor i32 %34, %1
  %254 = or i32 %50, %0
  %255 = or i32 %44, %192
  %256 = or i32 %61, %20
  %257 = shl i32 %256, 1
  %258 = and i32 %45, %1
  %259 = xor i32 %79, %2
  %260 = or i32 %43, %92
  %261 = or i32 %92, %20
  %262 = and i32 %92, %41
  %263 = and i32 %28, %67
  %264 = or i32 %107, %8
  %265 = or i32 %107, %61
  %266 = xor i32 %38, %43
  %267 = or i32 %103, %1
  %268 = or i32 %92, %192
  %269 = or i32 %44, %79
  %270 = shl i32 %269, 2
  %271 = or i32 %45, %67
  %272 = shl i32 %271, 1
  %273 = or i32 %51, %40
  %274 = xor i32 %70, %137
  %275 = or i32 %85, %0
  %276 = xor i32 %122, %1
  %277 = and i32 %8, %45
  %278 = or i32 %45, %192
  %279 = and i32 %105, %67
  %280 = or i32 %28, %67
  %281 = xor i32 %103, %50
  %282 = shl i32 %281, 1
  %283 = and i32 %167, %1
  %284 = and i32 %52, %0
  %285 = or i32 %38, %0
  %286 = or i32 %24, %43
  %287 = shl i32 %162, 1
  %288 = or i32 %24, %192
  %289 = or i32 %92, %79
  %290 = and i32 %116, %20
  %291 = mul i32 %290, 15
  %292 = and i32 %51, %20
  %293 = and i32 %116, %0
  %294 = and i32 %51, %0
  %295 = and i32 %162, %20
  %296 = mul i32 %62, -12
  %297 = and i32 %162, %0
  %298 = mul i32 %74, -14
  %299 = add i32 %263, %8
  %300 = add i32 %299, %240
  %301 = add i32 %300, %188
  %302 = add i32 %301, %109
  %303 = add i32 %302, %50
  %304 = add i32 %303, %283
  %305 = add i32 %304, %248
  %306 = add i32 %305, %71
  %307 = add i32 %306, %172
  %308 = add i32 %307, %163
  %309 = add i32 %308, %158
  %310 = add i32 %309, %155
  %311 = add i32 %310, %149
  %312 = add i32 %311, %144
  %313 = add i32 %312, %136
  %314 = add i32 %313, %130
  %315 = add i32 %314, %120
  %316 = add i32 %315, %78
  %317 = add i32 %316, %274
  %318 = add i32 %317, %187
  %319 = add i32 %318, %183
  %320 = sub i32 %294, %292
  %321 = sub i32 %320, %221
  %322 = add i32 %321, %137
  %323 = add i32 %322, %173
  %324 = sub i32 %323, %115
  %325 = mul i32 %324, 3
  %326 = sub i32 %275, %246
  %327 = sub i32 %326, %203
  %328 = add i32 %327, %102
  %329 = mul i32 %328, 5
  %330 = add i32 %319, %14
  %331 = add i32 %330, %152
  %332 = shl i32 %331, 1
  %333 = add i32 %40, 1073741823
  %334 = add i32 %333, %295
  %335 = add i32 %334, %297
  %336 = add i32 %335, %273
  %337 = add i32 %336, %190
  %338 = shl i32 %337, 2
  %339 = add i32 %0, 4
  %340 = add i32 %339, %1
  %341 = add i32 %340, %79
  %342 = add i32 %341, %67
  %343 = add i32 %342, %41
  %344 = sub i32 %343, %76
  %345 = add i32 %344, %3
  %346 = sub i32 %345, %29
  %347 = add i32 %346, %42
  %348 = add i32 %347, %56
  %349 = sub i32 %348, %68
  %350 = sub i32 %349, %80
  %351 = add i32 %350, %52
  %352 = add i32 %351, %100
  %353 = sub i32 %352, %111
  %354 = add i32 %353, %112
  %355 = sub i32 %354, %114
  %356 = add i32 %355, %92
  %357 = sub i32 %356, %97
  %358 = sub i32 %357, %107
  %359 = add i32 %358, %169
  %360 = add i32 %359, %182
  %361 = add i32 %360, %116
  %362 = sub i32 %361, %193
  %363 = add i32 %362, %44
  %364 = add i32 %363, %216
  %365 = sub i32 %364, %219
  %366 = add i32 %365, %222
  %367 = add i32 %366, %230
  %368 = add i32 %367, %167
  %369 = add i32 %368, %103
  %370 = add i32 %369, %239
  %371 = add i32 %370, %252
  %372 = sub i32 %371, %24
  %373 = sub i32 %372, %259
  %374 = add i32 %373, %61
  %375 = add i32 %374, %280
  %376 = add i32 %375, %16
  %377 = sub i32 %376, %35
  %378 = sub i32 %377, %37
  %379 = add i32 %378, %39
  %380 = add i32 %379, %46
  %381 = sub i32 %380, %47
  %382 = sub i32 %381, %49
  %383 = add i32 %382, %53
  %384 = add i32 %383, %54
  %385 = sub i32 %384, %60
  %386 = add i32 %385, %77
  %387 = add i32 %386, %83
  %388 = sub i32 %387, %84
  %389 = sub i32 %388, %86
  %390 = sub i32 %389, %90
  %391 = sub i32 %390, %91
  %392 = add i32 %391, %93
  %393 = sub i32 %392, %94
  %394 = add i32 %393, %95
  %395 = sub i32 %394, %96
  %396 = add i32 %395, %104
  %397 = add i32 %396, %106
  %398 = sub i32 %397, %108
  %399 = sub i32 %398, %110
  %400 = add i32 %399, %63
  %401 = sub i32 %400, %113
  %402 = sub i32 %401, %117
  %403 = sub i32 %402, %119
  %404 = sub i32 %403, %121
  %405 = sub i32 %404, %125
  %406 = sub i32 %405, %126
  %407 = sub i32 %406, %127
  %408 = add i32 %407, %128
  %409 = add i32 %408, %129
  %410 = add i32 %409, %131
  %411 = sub i32 %410, %134
  %412 = sub i32 %411, %135
  %413 = add i32 %412, %140
  %414 = add i32 %413, %141
  %415 = sub i32 %414, %147
  %416 = add i32 %415, %148
  %417 = sub i32 %416, %157
  %418 = sub i32 %417, %161
  %419 = sub i32 %418, %166
  %420 = add i32 %419, %168
  %421 = sub i32 %420, %170
  %422 = add i32 %421, %171
  %423 = sub i32 %422, %174
  %424 = sub i32 %423, %175
  %425 = add i32 %424, %176
  %426 = sub i32 %425, %177
  %427 = add i32 %426, %178
  %428 = add i32 %427, %181
  %429 = add i32 %428, %189
  %430 = sub i32 %429, %191
  %431 = sub i32 %430, %197
  %432 = add i32 %431, %198
  %433 = sub i32 %432, %199
  %434 = sub i32 %433, %202
  %435 = sub i32 %434, %205
  %436 = sub i32 %435, %210
  %437 = sub i32 %436, %212
  %438 = add i32 %437, %213
  %439 = add i32 %438, %214
  %440 = add i32 %439, %215
  %441 = sub i32 %440, %217
  %442 = add i32 %441, %218
  %443 = add i32 %442, %220
  %444 = add i32 %443, %179
  %445 = sub i32 %444, %223
  %446 = add i32 %445, %224
  %447 = sub i32 %446, %225
  %448 = add i32 %447, %226
  %449 = add i32 %448, %227
  %450 = add i32 %449, %231
  %451 = sub i32 %450, %232
  %452 = sub i32 %451, %234
  %453 = add i32 %452, %235
  %454 = sub i32 %453, %236
  %455 = sub i32 %454, %237
  %456 = add i32 %455, %238
  %457 = sub i32 %456, %241
  %458 = add i32 %457, %242
  %459 = sub i32 %458, %243
  %460 = sub i32 %459, %245
  %461 = add i32 %460, %249
  %462 = add i32 %461, %250
  %463 = sub i32 %462, %251
  %464 = add i32 %463, %253
  %465 = add i32 %464, %254
  %466 = sub i32 %465, %255
  %467 = sub i32 %466, %258
  %468 = sub i32 %467, %260
  %469 = add i32 %468, %261
  %470 = add i32 %469, %262
  %471 = sub i32 %470, %264
  %472 = add i32 %471, %265
  %473 = add i32 %472, %266
  %474 = add i32 %473, %267
  %475 = sub i32 %474, %268
  %476 = sub i32 %475, %276
  %477 = sub i32 %476, %277
  %478 = add i32 %477, %278
  %479 = sub i32 %478, %279
  %480 = add i32 %479, %25
  %481 = add i32 %480, %284
  %482 = sub i32 %481, %285
  %483 = sub i32 %482, %286
  %484 = sub i32 %483, %287
  %485 = add i32 %484, %288
  %486 = sub i32 %485, %289
  %487 = add i32 %486, %293
  %488 = add i32 %487, %13
  %489 = sub i32 %488, %15
  %490 = add i32 %489, %17
  %491 = add i32 %490, %27
  %492 = sub i32 %491, %33
  %493 = sub i32 %492, %58
  %494 = sub i32 %493, %69
  %495 = sub i32 %494, %73
  %496 = add i32 %495, %75
  %497 = sub i32 %496, %82
  %498 = sub i32 %497, %89
  %499 = sub i32 %498, %99
  %500 = sub i32 %499, %118
  %501 = sub i32 %500, %124
  %502 = sub i32 %501, %139
  %503 = sub i32 %502, %143
  %504 = sub i32 %503, %146
  %505 = sub i32 %504, %154
  %506 = sub i32 %505, %165
  %507 = add i32 %506, %180
  %508 = sub i32 %507, %185
  %509 = add i32 %508, %186
  %510 = add i32 %509, %194
  %511 = sub i32 %510, %196
  %512 = sub i32 %511, %201
  %513 = add i32 %512, %204
  %514 = sub i32 %513, %207
  %515 = sub i32 %514, %209
  %516 = sub i32 %515, %229
  %517 = add i32 %516, %233
  %518 = add i32 %517, %244
  %519 = sub i32 %518, %247
  %520 = sub i32 %519, %257
  %521 = sub i32 %520, %270
  %522 = sub i32 %521, %272
  %523 = sub i32 %522, %282
  %524 = add i32 %523, %291
  %525 = add i32 %524, %296
  %526 = add i32 %525, %298
  %527 = sub i32 %526, %133
  %528 = add i32 %527, %19
  %529 = sub i32 %528, %66
  %530 = add i32 %529, %329
  %531 = add i32 %530, %338
  %532 = add i32 %531, %325
  %533 = add i32 %532, %332
  %534 = icmp eq i32 %12, %533
  %535 = select i1 %534, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %536 = tail call i32 @puts(i8* nonnull dereferenceable(1) %535)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
