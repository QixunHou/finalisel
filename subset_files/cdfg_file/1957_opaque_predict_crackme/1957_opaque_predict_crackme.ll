; ModuleID = '../.././c_source_file/1957_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1957_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = or i32 %7, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = shl i32 %11, 1
  %13 = and i32 %2, %1
  %14 = add i32 %12, %13
  %15 = xor i32 %5, -1
  %16 = and i32 %15, %4
  %17 = and i32 %5, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %16, %18
  %20 = sub i32 %14, %19
  %21 = and i32 %17, %4
  %22 = xor i32 %5, %3
  %23 = xor i32 %22, %4
  %24 = xor i32 %23, -1
  %25 = or i32 %21, %24
  %26 = sub i32 %20, %25
  %27 = or i32 %1, %0
  %28 = xor i32 %2, %1
  %29 = and i32 %28, %27
  %30 = xor i32 %2, %0
  %31 = or i32 %30, %1
  %32 = xor i32 %1, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %34, %2
  %36 = and i32 %2, %0
  %37 = or i32 %36, %34
  %38 = and i32 %1, %0
  %39 = or i32 %9, %0
  %40 = xor i32 %27, -1
  %41 = or i32 %28, %40
  %42 = xor i32 %36, %27
  %43 = and i32 %27, %7
  %44 = or i32 %7, %0
  %45 = xor i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %44, %46
  %48 = xor i32 %30, -1
  %49 = and i32 %45, %48
  %50 = shl i32 %49, 1
  %51 = and i32 %13, %0
  %52 = xor i32 %0, -1
  %53 = and i32 %28, %52
  %54 = or i32 %51, %53
  %55 = or i32 %48, %40
  %56 = shl i32 %34, 1
  %57 = xor i32 %28, -1
  %58 = or i32 %38, %57
  %59 = or i32 %2, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %45, %60
  %62 = and i32 %45, %7
  %63 = xor i32 %40, %2
  %64 = and i32 %7, %1
  %65 = or i32 %64, %0
  %66 = xor i32 %36, -1
  %67 = xor i32 %66, %1
  %68 = or i32 %10, %52
  %69 = or i32 %28, %38
  %70 = and i32 %32, %0
  %71 = or i32 %64, %70
  %72 = or i32 %45, %48
  %73 = xor i32 %8, %1
  %74 = or i32 %57, %40
  %75 = and i32 %45, %66
  %76 = xor i32 %13, -1
  %77 = or i32 %76, %0
  %78 = or i32 %36, %40
  %79 = shl i32 %78, 1
  %80 = or i32 %2, %1
  %81 = xor i32 %80, -1
  %82 = or i32 %38, %81
  %83 = and i32 %76, %52
  %84 = and i32 %59, %46
  %85 = or i32 %13, %52
  %86 = and i32 %59, %1
  %87 = and i32 %76, %0
  %88 = xor i32 %70, -1
  %89 = add i32 %70, 1
  %90 = xor i32 %28, %0
  %91 = xor i32 %90, %51
  %92 = xor i32 %33, %2
  %93 = and i32 %32, %2
  %94 = and i32 %93, %0
  %95 = or i32 %32, %2
  %96 = and i32 %95, %52
  %97 = or i32 %94, %96
  %98 = or i32 %45, %2
  %99 = and i32 %9, %0
  %100 = or i32 %48, %32
  %101 = and i32 %33, %2
  %102 = xor i32 %88, %2
  %103 = or i32 %13, %70
  %104 = xor i32 %64, -1
  %105 = or i32 %104, %0
  %106 = and i32 %13, %52
  %107 = and i32 %80, %0
  %108 = xor i32 %107, -1
  %109 = xor i32 %106, %108
  %110 = or i32 %36, %46
  %111 = and i32 %48, %46
  %112 = or i32 %30, %38
  %113 = or i32 %13, %0
  %114 = or i32 %36, %64
  %115 = and i32 %93, %52
  %116 = and i32 %95, %0
  %117 = or i32 %115, %116
  %118 = xor i32 %38, -1
  %119 = xor i32 %118, %2
  %120 = and i32 %57, %118
  %121 = or i32 %36, %45
  %122 = or i32 %8, %46
  %123 = xor i32 %70, %76
  %124 = xor i32 %76, %0
  %125 = and i32 %7, %118
  %126 = or i32 %28, %52
  %127 = xor i32 %115, %126
  %128 = and i32 %46, %2
  %129 = shl i32 %128, 1
  %130 = and i32 %48, %118
  %131 = and i32 %48, %32
  %132 = or i32 %8, %1
  %133 = or i32 %70, %48
  %134 = and i32 %59, %32
  %135 = or i32 %36, %81
  %136 = xor i32 %8, -1
  %137 = and i32 %45, %136
  %138 = or i32 %10, %0
  %139 = xor i32 %38, %2
  %140 = xor i32 %126, -1
  %141 = or i32 %115, %140
  %142 = xor i32 %80, %0
  %143 = and i32 %7, %88
  %144 = shl i32 %143, 1
  %145 = xor i32 %53, -1
  %146 = xor i32 %51, %145
  %147 = and i32 %28, %0
  %148 = or i32 %106, %147
  %149 = or i32 %60, %32
  %150 = or i32 %30, %32
  %151 = or i32 %106, %107
  %152 = xor i32 %27, %2
  %153 = shl i32 %152, 1
  %154 = or i32 %48, %1
  %155 = and i32 %30, %1
  %156 = or i32 %36, %1
  %157 = shl i32 %156, 1
  %158 = or i32 %7, %46
  %159 = and i32 %48, %1
  %160 = and i32 %44, %1
  %161 = shl i32 %160, 1
  %162 = and i32 %80, %52
  %163 = or i32 %64, %52
  %164 = or i32 %38, %10
  %165 = shl i32 %164, 1
  %166 = and i32 %30, %33
  %167 = or i32 %40, %2
  %168 = shl i32 %167, 1
  %169 = xor i32 %70, %2
  %170 = or i32 %28, %0
  %171 = xor i32 %170, -1
  %172 = or i32 %94, %171
  %173 = and i32 %136, %32
  %174 = or i32 %38, %2
  %175 = or i32 %70, %7
  %176 = xor i32 %116, -1
  %177 = xor i32 %115, %176
  %178 = xor i32 %44, -1
  %179 = xor i32 %178, %1
  %180 = xor i32 %36, %1
  %181 = xor i32 %36, %104
  %182 = and i32 %57, %0
  %183 = or i32 %80, %52
  %184 = and i32 %27, %2
  %185 = and i32 %66, %32
  %186 = or i32 %57, %0
  %187 = and i32 %104, %52
  %188 = and i32 %136, %1
  %189 = or i32 %80, %0
  %190 = and i32 %28, %118
  %191 = and i32 %7, %46
  %192 = or i32 %51, %142
  %193 = shl i32 %192, 1
  %194 = xor i32 %36, %33
  %195 = or i32 %45, %7
  %196 = or i32 %38, %7
  %197 = xor i32 %136, %1
  %198 = or i32 %28, %70
  %199 = shl i32 %198, 1
  %200 = or i32 %38, %178
  %201 = or i32 %70, %2
  %202 = or i32 %28, %34
  %203 = add i32 %64, 1
  %204 = xor i32 %162, 2147483647
  %205 = xor i32 %204, %51
  %206 = shl i32 %205, 1
  %207 = or i32 %30, %46
  %208 = shl i32 %207, 2
  %209 = or i32 %9, %52
  %210 = or i32 %104, %52
  %211 = and i32 %57, %52
  %212 = or i32 %48, %46
  %213 = and i32 %28, %33
  %214 = or i32 %7, %40
  %215 = and i32 %104, %0
  %216 = or i32 %8, %13
  %217 = xor i32 %59, %38
  %218 = xor i32 %0, 2147483647
  %219 = xor i32 %218, %95
  %220 = xor i32 %219, %94
  %221 = shl i32 %220, 1
  %222 = or i32 %45, %178
  %223 = and i32 %118, %2
  %224 = add i32 %2, 1
  %225 = xor i32 %57, %0
  %226 = or i32 %178, %32
  %227 = shl i32 %226, 1
  %228 = or i32 %76, %52
  %229 = add i32 %30, 1
  %230 = xor i32 %44, %1
  %231 = or i32 %30, %45
  %232 = and i32 %45, %2
  %233 = xor i32 %9, %38
  %234 = and i32 %81, %52
  %235 = mul i32 %234, -25
  %236 = and i32 %64, %52
  %237 = mul i32 %236, -28
  %238 = and i32 %81, %0
  %239 = mul i32 %238, -14
  %240 = and i32 %64, %0
  %241 = and i32 %10, %52
  %242 = mul i32 %241, -10
  %243 = mul i32 %106, -13
  %244 = and i32 %10, %0
  %245 = and i32 %4, %3
  %246 = xor i32 %5, %4
  %247 = xor i32 %246, -1
  %248 = or i32 %245, %247
  %249 = or i32 %5, %4
  %250 = xor i32 %3, -1
  %251 = or i32 %250, %4
  %252 = xor i32 %251, %5
  %253 = and i32 %5, %4
  %254 = xor i32 %253, -1
  %255 = and i32 %254, %250
  %256 = and i32 %250, %5
  %257 = and i32 %256, %4
  %258 = xor i32 %4, -1
  %259 = or i32 %250, %5
  %260 = xor i32 %259, 2147483647
  %261 = or i32 %260, %4
  %262 = xor i32 %261, %257
  %263 = or i32 %5, %3
  %264 = xor i32 %263, %4
  %265 = or i32 %21, %264
  %266 = shl i32 %265, 2
  %267 = and i32 %15, %3
  %268 = xor i32 %267, -1
  %269 = xor i32 %263, -1
  %270 = or i32 %253, %269
  %271 = and i32 %250, %4
  %272 = or i32 %271, %5
  %273 = xor i32 %268, %4
  %274 = xor i32 %4, %3
  %275 = xor i32 %274, -1
  %276 = or i32 %247, %275
  %277 = or i32 %4, %3
  %278 = and i32 %246, %277
  %279 = xor i32 %277, -1
  %280 = or i32 %15, %279
  %281 = or i32 %15, %3
  %282 = xor i32 %281, -1
  %283 = or i32 %245, %282
  %284 = or i32 %253, %250
  %285 = or i32 %246, %245
  %286 = xor i32 %249, -1
  %287 = xor i32 %286, %3
  %288 = shl i32 %287, 1
  %289 = and i32 %249, %274
  %290 = or i32 %15, %4
  %291 = xor i32 %290, -1
  %292 = xor i32 %291, %3
  %293 = and i32 %274, %5
  %294 = shl i32 %293, 1
  %295 = and i32 %251, %5
  %296 = shl i32 %295, 1
  %297 = or i32 %16, %17
  %298 = add i32 %17, 1
  %299 = or i32 %22, %271
  %300 = or i32 %245, %269
  %301 = or i32 %246, %274
  %302 = xor i32 %271, %5
  %303 = shl i32 %302, 1
  %304 = or i32 %246, %279
  %305 = xor i32 %253, %263
  %306 = and i32 %249, %3
  %307 = xor i32 %253, %277
  %308 = or i32 %22, %279
  %309 = and i32 %256, %258
  %310 = and i32 %259, %4
  %311 = xor i32 %310, 2147483647
  %312 = xor i32 %311, %309
  %313 = shl i32 %312, 1
  %314 = or i32 %291, %275
  %315 = and i32 %268, %258
  %316 = or i32 %16, %282
  %317 = xor i32 %249, %245
  %318 = shl i32 %317, 1
  %319 = add i32 %274, 1
  %320 = xor i32 %16, -1
  %321 = and i32 %320, %250
  %322 = shl i32 %321, 1
  %323 = and i32 %247, %275
  %324 = or i32 %247, %279
  %325 = and i32 %18, %258
  %326 = or i32 %246, %275
  %327 = xor i32 %259, %4
  %328 = or i32 %257, %327
  %329 = and i32 %22, %258
  %330 = or i32 %257, %23
  %331 = xor i32 %245, -1
  %332 = and i32 %246, %331
  %333 = or i32 %267, %271
  %334 = or i32 %267, %258
  %335 = xor i32 %253, %3
  %336 = or i32 %274, %15
  %337 = or i32 %22, %4
  %338 = xor i32 %257, %337
  %339 = and i32 %22, %251
  %340 = and i32 %247, %331
  %341 = and i32 %263, %4
  %342 = and i32 %17, %258
  %343 = and i32 %22, %4
  %344 = xor i32 %342, -1
  %345 = xor i32 %343, %344
  %346 = xor i32 %22, -1
  %347 = and i32 %346, %331
  %348 = and i32 %275, %5
  %349 = or i32 %291, %3
  %350 = and i32 %246, %274
  %351 = or i32 %16, %275
  %352 = shl i32 %351, 1
  %353 = and i32 %268, %4
  %354 = xor i32 %251, -1
  %355 = or i32 %354, %5
  %356 = shl i32 %355, 1
  %357 = or i32 %15, %354
  %358 = and i32 %22, %331
  %359 = or i32 %286, %3
  %360 = shl i32 %254, 1
  %361 = and i32 %277, %346
  %362 = and i32 %246, %250
  %363 = or i32 %346, %258
  %364 = or i32 %246, %250
  %365 = xor i32 %18, %4
  %366 = xor i32 %263, %245
  %367 = or i32 %342, %341
  %368 = or i32 %309, %310
  %369 = or i32 %16, %274
  %370 = and i32 %274, %254
  %371 = shl i32 %370, 1
  %372 = and i32 %246, %3
  %373 = xor i32 %16, %3
  %374 = or i32 %271, %247
  %375 = shl i32 %374, 1
  %376 = or i32 %21, %329
  %377 = shl i32 %376, 1
  %378 = or i32 %246, %271
  %379 = and i32 %290, %275
  %380 = or i32 %245, %346
  %381 = or i32 %263, %258
  %382 = xor i32 %271, -1
  %383 = and i32 %346, %382
  %384 = xor i32 %341, %344
  %385 = and i32 %267, %258
  %386 = and i32 %269, %4
  %387 = and i32 %267, %4
  %388 = mul i32 %387, -7
  %389 = and i32 %282, %258
  %390 = mul i32 %389, 20
  %391 = mul i32 %342, 6
  %392 = and i32 %282, %4
  %393 = shl i32 %392, 3
  %394 = add i32 %169, %175
  %395 = add i32 %394, %158
  %396 = add i32 %395, %8
  %397 = add i32 %396, %188
  %398 = add i32 %397, %185
  %399 = add i32 %398, %181
  %400 = add i32 %399, %133
  %401 = add i32 %400, %124
  %402 = add i32 %401, %103
  %403 = add i32 %402, %85
  %404 = add i32 %403, %84
  %405 = add i32 %404, %55
  %406 = add i32 %405, %31
  %407 = add i32 %406, %151
  %408 = add i32 %407, %252
  %409 = add i32 %408, %381
  %410 = add i32 %409, %358
  %411 = add i32 %410, %323
  %412 = add i32 %411, %338
  %413 = add i32 %412, %262
  %414 = shl i32 %413, 1
  %415 = add i32 %119, %184
  %416 = sub i32 %415, %244
  %417 = add i32 %416, %179
  %418 = add i32 %417, %162
  %419 = sub i32 %418, %149
  %420 = sub i32 %419, %58
  %421 = add i32 %420, %47
  %422 = add i32 %421, %298
  %423 = add i32 %422, %307
  %424 = add i32 %423, %369
  %425 = mul i32 %424, 3
  %426 = sub i32 %66, %139
  %427 = add i32 %426, %100
  %428 = add i32 %427, %61
  %429 = sub i32 %428, %383
  %430 = sub i32 %429, %386
  %431 = mul i32 %430, 5
  %432 = add i32 %166, %136
  %433 = add i32 %432, %268
  %434 = add i32 %433, %248
  %435 = shl i32 %434, 2
  %436 = sub i32 %240, %51
  %437 = mul i32 %436, 9
  %438 = sub i32 -5, %0
  %439 = sub i32 %438, %27
  %440 = sub i32 %439, %38
  %441 = add i32 %440, %89
  %442 = sub i32 %441, %45
  %443 = add i32 %442, %224
  %444 = sub i32 %443, %35
  %445 = sub i32 %444, %43
  %446 = sub i32 %445, %56
  %447 = sub i32 %446, %62
  %448 = add i32 %447, %30
  %449 = sub i32 %448, %63
  %450 = sub i32 %449, %92
  %451 = add i32 %450, %98
  %452 = add i32 %451, %101
  %453 = sub i32 %452, %59
  %454 = sub i32 %453, %102
  %455 = add i32 %454, %36
  %456 = add i32 %455, %125
  %457 = add i32 %456, %64
  %458 = sub i32 %457, %174
  %459 = add i32 %458, %191
  %460 = sub i32 %459, %195
  %461 = sub i32 %460, %196
  %462 = add i32 %461, %9
  %463 = add i32 %462, %201
  %464 = add i32 %463, %203
  %465 = sub i32 %464, %214
  %466 = add i32 %465, %44
  %467 = add i32 %466, %76
  %468 = add i32 %467, %223
  %469 = add i32 %468, %229
  %470 = add i32 %469, %28
  %471 = sub i32 %470, %232
  %472 = sub i32 %471, %3
  %473 = add i32 %472, %29
  %474 = sub i32 %473, %37
  %475 = add i32 %474, %39
  %476 = add i32 %475, %41
  %477 = add i32 %476, %42
  %478 = sub i32 %477, %65
  %479 = add i32 %478, %67
  %480 = add i32 %479, %68
  %481 = add i32 %480, %69
  %482 = add i32 %481, %71
  %483 = add i32 %482, %72
  %484 = sub i32 %483, %73
  %485 = add i32 %484, %74
  %486 = add i32 %485, %75
  %487 = sub i32 %486, %77
  %488 = sub i32 %487, %82
  %489 = sub i32 %488, %83
  %490 = sub i32 %489, %86
  %491 = sub i32 %490, %87
  %492 = add i32 %491, %99
  %493 = sub i32 %492, %105
  %494 = add i32 %493, %110
  %495 = add i32 %494, %111
  %496 = sub i32 %495, %112
  %497 = sub i32 %496, %113
  %498 = add i32 %497, %114
  %499 = add i32 %498, %120
  %500 = sub i32 %499, %121
  %501 = sub i32 %500, %122
  %502 = sub i32 %501, %123
  %503 = sub i32 %502, %129
  %504 = add i32 %503, %130
  %505 = add i32 %504, %131
  %506 = sub i32 %505, %132
  %507 = sub i32 %506, %134
  %508 = sub i32 %507, %135
  %509 = add i32 %508, %137
  %510 = sub i32 %509, %138
  %511 = add i32 %510, %142
  %512 = sub i32 %511, %144
  %513 = add i32 %512, %126
  %514 = sub i32 %513, %150
  %515 = sub i32 %514, %153
  %516 = sub i32 %515, %154
  %517 = sub i32 %516, %155
  %518 = sub i32 %517, %159
  %519 = sub i32 %518, %163
  %520 = sub i32 %519, %168
  %521 = add i32 %520, %173
  %522 = add i32 %521, %180
  %523 = add i32 %522, %182
  %524 = add i32 %523, %183
  %525 = sub i32 %524, %186
  %526 = sub i32 %525, %187
  %527 = sub i32 %526, %189
  %528 = sub i32 %527, %190
  %529 = add i32 %528, %194
  %530 = sub i32 %529, %53
  %531 = sub i32 %530, %197
  %532 = sub i32 %531, %200
  %533 = add i32 %532, %202
  %534 = sub i32 %533, %209
  %535 = add i32 %534, %210
  %536 = add i32 %535, %211
  %537 = sub i32 %536, %212
  %538 = sub i32 %537, %213
  %539 = add i32 %538, %215
  %540 = add i32 %539, %216
  %541 = sub i32 %540, %217
  %542 = add i32 %541, %222
  %543 = add i32 %542, %225
  %544 = add i32 %543, %228
  %545 = add i32 %544, %230
  %546 = add i32 %545, %231
  %547 = add i32 %546, %233
  %548 = add i32 %547, %4
  %549 = sub i32 %548, %50
  %550 = sub i32 %549, %54
  %551 = sub i32 %550, %79
  %552 = add i32 %551, %91
  %553 = sub i32 %552, %97
  %554 = sub i32 %553, %109
  %555 = sub i32 %554, %117
  %556 = sub i32 %555, %127
  %557 = sub i32 %556, %141
  %558 = sub i32 %557, %146
  %559 = sub i32 %558, %148
  %560 = sub i32 %559, %157
  %561 = sub i32 %560, %161
  %562 = sub i32 %561, %165
  %563 = add i32 %562, %172
  %564 = add i32 %563, %177
  %565 = sub i32 %564, %199
  %566 = sub i32 %565, %208
  %567 = sub i32 %566, %227
  %568 = add i32 %567, %235
  %569 = add i32 %568, %237
  %570 = add i32 %569, %239
  %571 = add i32 %570, %242
  %572 = add i32 %571, %243
  %573 = add i32 %572, %5
  %574 = add i32 %573, %319
  %575 = add i32 %574, %277
  %576 = sub i32 %575, %271
  %577 = sub i32 %576, %193
  %578 = sub i32 %577, %249
  %579 = add i32 %578, %272
  %580 = sub i32 %579, %22
  %581 = sub i32 %580, %263
  %582 = add i32 %581, %280
  %583 = sub i32 %582, %16
  %584 = add i32 %583, %336
  %585 = sub i32 %584, %17
  %586 = add i32 %585, %320
  %587 = sub i32 %586, %348
  %588 = add i32 %587, %281
  %589 = sub i32 %588, %357
  %590 = add i32 %589, %247
  %591 = add i32 %590, %437
  %592 = sub i32 %591, %206
  %593 = sub i32 %592, %221
  %594 = sub i32 %593, %255
  %595 = add i32 %594, %270
  %596 = sub i32 %595, %273
  %597 = sub i32 %596, %276
  %598 = add i32 %597, %278
  %599 = sub i32 %598, %283
  %600 = add i32 %599, %284
  %601 = add i32 %600, %285
  %602 = add i32 %601, %289
  %603 = sub i32 %602, %292
  %604 = sub i32 %603, %294
  %605 = sub i32 %604, %296
  %606 = add i32 %605, %297
  %607 = add i32 %606, %299
  %608 = add i32 %607, %300
  %609 = add i32 %608, %301
  %610 = sub i32 %609, %303
  %611 = add i32 %610, %304
  %612 = sub i32 %611, %305
  %613 = add i32 %612, %306
  %614 = add i32 %613, %308
  %615 = sub i32 %614, %314
  %616 = sub i32 %615, %315
  %617 = sub i32 %616, %316
  %618 = sub i32 %617, %324
  %619 = sub i32 %618, %325
  %620 = sub i32 %619, %326
  %621 = sub i32 %620, %329
  %622 = sub i32 %621, %332
  %623 = sub i32 %622, %333
  %624 = add i32 %623, %334
  %625 = sub i32 %624, %335
  %626 = sub i32 %625, %23
  %627 = add i32 %626, %339
  %628 = add i32 %627, %340
  %629 = add i32 %628, %341
  %630 = add i32 %629, %347
  %631 = add i32 %630, %349
  %632 = add i32 %631, %350
  %633 = add i32 %632, %353
  %634 = sub i32 %633, %356
  %635 = add i32 %634, %359
  %636 = sub i32 %635, %360
  %637 = add i32 %636, %361
  %638 = sub i32 %637, %362
  %639 = sub i32 %638, %363
  %640 = sub i32 %639, %364
  %641 = add i32 %640, %365
  %642 = sub i32 %641, %366
  %643 = sub i32 %642, %372
  %644 = add i32 %643, %373
  %645 = sub i32 %644, %378
  %646 = sub i32 %645, %379
  %647 = sub i32 %646, %380
  %648 = sub i32 %647, %385
  %649 = sub i32 %648, %288
  %650 = sub i32 %649, %318
  %651 = sub i32 %650, %322
  %652 = add i32 %651, %328
  %653 = sub i32 %652, %330
  %654 = add i32 %653, %345
  %655 = sub i32 %654, %352
  %656 = add i32 %655, %367
  %657 = add i32 %656, %368
  %658 = sub i32 %657, %371
  %659 = sub i32 %658, %375
  %660 = add i32 %659, %384
  %661 = add i32 %660, %388
  %662 = add i32 %661, %390
  %663 = add i32 %662, %391
  %664 = sub i32 %663, %393
  %665 = sub i32 %664, %266
  %666 = sub i32 %665, %377
  %667 = sub i32 %666, %313
  %668 = add i32 %667, %435
  %669 = add i32 %668, %431
  %670 = add i32 %669, %425
  %671 = add i32 %670, %414
  %672 = icmp eq i32 %26, %671
  %673 = select i1 %672, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %674 = tail call i32 @puts(i8* nonnull dereferenceable(1) %673)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
