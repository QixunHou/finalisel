; ModuleID = '../.././c_source_file/1781_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1781_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = and i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %1
  %10 = xor i32 %1, -1
  %11 = or i32 %10, %0
  %12 = and i32 %11, %2
  %13 = sub i32 %6, %12
  %14 = add i32 %13, %9
  %15 = xor i32 %4, -1
  %16 = or i32 %15, %3
  %17 = shl i32 %4, 1
  %18 = xor i32 %4, %3
  %19 = shl i32 %18, 1
  %20 = xor i32 %19, -2
  %21 = or i32 %4, %3
  %22 = shl i32 %21, 2
  %23 = xor i32 %22, -4
  %24 = xor i32 %16, -1
  %25 = and i32 %4, %3
  %26 = or i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %10
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %1
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %0
  %34 = or i32 %33, %1
  %35 = and i32 %2, %1
  %36 = and i32 %35, %0
  %37 = xor i32 %0, -1
  %38 = xor i32 %2, %1
  %39 = and i32 %38, %37
  %40 = or i32 %36, %39
  %41 = shl i32 %35, 1
  %42 = and i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %43, %2
  %45 = and i32 %30, %43
  %46 = or i32 %1, %0
  %47 = and i32 %46, %2
  %48 = and i32 %10, %0
  %49 = and i32 %32, %1
  %50 = xor i32 %49, -1
  %51 = xor i32 %48, %50
  %52 = shl i32 %51, 1
  %53 = xor i32 %42, %2
  %54 = or i32 %32, %0
  %55 = xor i32 %54, %42
  %56 = and i32 %10, %2
  %57 = and i32 %56, %0
  %58 = or i32 %10, %2
  %59 = and i32 %58, %37
  %60 = xor i32 %57, -1
  %61 = xor i32 %59, %60
  %62 = and i32 %50, %37
  %63 = xor i32 %26, %42
  %64 = and i32 %38, %11
  %65 = or i32 %32, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %33, %66
  %68 = xor i32 %54, -1
  %69 = or i32 %68, %1
  %70 = shl i32 %69, 1
  %71 = add i32 %29, 1
  %72 = and i32 %11, %32
  %73 = or i32 %2, %1
  %74 = xor i32 %73, %0
  %75 = xor i32 %74, -1
  %76 = xor i32 %36, %75
  %77 = xor i32 %46, -1
  %78 = or i32 %29, %77
  %79 = shl i32 %78, 1
  %80 = xor i32 %1, %0
  %81 = xor i32 %80, -1
  %82 = or i32 %7, %81
  %83 = or i32 %29, %48
  %84 = xor i32 %48, %2
  %85 = and i32 %29, %43
  %86 = or i32 %80, %68
  %87 = and i32 %30, %81
  %88 = or i32 %35, %48
  %89 = shl i32 %88, 1
  %90 = or i32 %49, %0
  %91 = xor i32 %38, %0
  %92 = or i32 %57, %91
  %93 = or i32 %33, %10
  %94 = xor i32 %33, -1
  %95 = and i32 %94, %1
  %96 = or i32 %7, %80
  %97 = xor i32 %36, %91
  %98 = xor i32 %11, -1
  %99 = xor i32 %98, %2
  %100 = and i32 %80, %94
  %101 = and i32 %26, %10
  %102 = or i32 %30, %98
  %103 = shl i32 %102, 1
  %104 = and i32 %8, %10
  %105 = add i32 %33, 1
  %106 = xor i32 %7, %50
  %107 = xor i32 %7, %1
  %108 = or i32 %42, %2
  %109 = or i32 %81, %2
  %110 = or i32 %29, %81
  %111 = xor i32 %73, 1073741823
  %112 = or i32 %111, %0
  %113 = xor i32 %112, %36
  %114 = or i32 %48, %30
  %115 = or i32 %48, %32
  %116 = shl i32 %115, 2
  %117 = xor i32 %35, -1
  %118 = and i32 %117, %0
  %119 = xor i32 %65, %0
  %120 = or i32 %30, %10
  %121 = xor i32 %48, -1
  %122 = and i32 %121, %2
  %123 = or i32 %42, %32
  %124 = and i32 %32, %43
  %125 = or i32 %73, %0
  %126 = or i32 %29, %1
  %127 = xor i32 %38, -1
  %128 = add i32 %38, 1
  %129 = or i32 %38, %77
  %130 = and i32 %46, %127
  %131 = or i32 %127, %0
  %132 = or i32 %30, %77
  %133 = xor i32 %33, %117
  %134 = or i32 %32, %81
  %135 = or i32 %65, %0
  %136 = and i32 %29, %80
  %137 = and i32 %54, %80
  %138 = xor i32 %33, %65
  %139 = xor i32 %94, %1
  %140 = shl i32 %139, 1
  %141 = and i32 %38, %46
  %142 = and i32 %56, %37
  %143 = and i32 %58, %0
  %144 = or i32 %142, %143
  %145 = or i32 %42, %68
  %146 = shl i32 %10, 1
  %147 = or i32 %42, %30
  %148 = shl i32 %77, 1
  %149 = or i32 %7, %98
  %150 = or i32 %77, %2
  %151 = or i32 %68, %10
  %152 = xor i32 %54, %1
  %153 = xor i32 %49, %0
  %154 = xor i32 %73, -1
  %155 = xor i32 %154, %0
  %156 = and i32 %29, %10
  %157 = xor i32 %27, %1
  %158 = xor i32 %33, %1
  %159 = or i32 %29, %98
  %160 = xor i32 %77, %2
  %161 = or i32 %27, %1
  %162 = or i32 %38, %37
  %163 = xor i32 %142, %162
  %164 = xor i32 %162, 2147483647
  %165 = or i32 %164, %142
  %166 = shl i32 %165, 1
  %167 = and i32 %73, %0
  %168 = add i32 %54, 1
  %169 = xor i32 %127, %0
  %170 = shl i32 %169, 1
  %171 = or i32 %66, %0
  %172 = or i32 %66, %37
  %173 = or i32 %38, %48
  %174 = and i32 %35, %37
  %175 = or i32 %174, %167
  %176 = and i32 %80, %30
  %177 = shl i32 %176, 2
  %178 = and i32 %50, %0
  %179 = and i32 %30, %10
  %180 = xor i32 %26, %1
  %181 = or i32 %7, %1
  %182 = add i32 %48, 1
  %183 = or i32 %80, %30
  %184 = or i32 %42, %154
  %185 = xor i32 %7, %73
  %186 = or i32 %80, %32
  %187 = shl i32 %186, 1
  %188 = or i32 %48, %127
  %189 = or i32 %7, %49
  %190 = or i32 %127, %37
  %191 = and i32 %94, %10
  %192 = xor i32 %91, %60
  %193 = or i32 %57, %59
  %194 = xor i32 %39, 2147483647
  %195 = xor i32 %194, %36
  %196 = shl i32 %195, 1
  %197 = or i32 %127, %77
  %198 = and i32 %38, %121
  %199 = or i32 %27, %81
  %200 = and i32 %81, %2
  %201 = and i32 %65, %0
  %202 = xor i32 %66, %0
  %203 = and i32 %29, %1
  %204 = and i32 %127, %121
  %205 = shl i32 %204, 1
  %206 = xor i32 %167, 2147483647
  %207 = xor i32 %206, %174
  %208 = shl i32 %207, 1
  %209 = or i32 %50, %0
  %210 = or i32 %42, %66
  %211 = and i32 %29, %121
  %212 = and i32 %54, %10
  %213 = xor i32 %46, %2
  %214 = or i32 %7, %10
  %215 = and i32 %94, %81
  %216 = or i32 %154, %0
  %217 = or i32 %7, %77
  %218 = xor i32 %60, %0
  %219 = xor i32 %218, %58
  %220 = or i32 %117, %0
  %221 = shl i32 %220, 1
  %222 = or i32 %32, %77
  %223 = and i32 %154, %37
  %224 = mul i32 %223, 11
  %225 = and i32 %49, %37
  %226 = mul i32 %225, 34
  %227 = and i32 %154, %0
  %228 = and i32 %49, %0
  %229 = and i32 %66, %37
  %230 = shl i32 %229, 1
  %231 = mul i32 %36, 6
  %232 = add i32 %2, %0
  %233 = add i32 %232, %65
  %234 = add i32 %233, %200
  %235 = add i32 %234, %109
  %236 = add i32 %235, %49
  %237 = add i32 %236, %53
  %238 = add i32 %237, %217
  %239 = add i32 %238, %203
  %240 = add i32 %239, %197
  %241 = add i32 %240, %167
  %242 = add i32 %241, %149
  %243 = add i32 %242, %138
  %244 = add i32 %243, %135
  %245 = add i32 %244, %104
  %246 = add i32 %245, %82
  %247 = add i32 %246, %193
  %248 = shl i32 %247, 1
  %249 = add i32 %83, %100
  %250 = add i32 %249, %25
  %251 = add i32 %250, %113
  %252 = shl i32 %251, 2
  %253 = sub i32 %105, %134
  %254 = add i32 %253, %62
  %255 = sub i32 %254, %174
  %256 = mul i32 %255, 3
  %257 = sub i32 %110, %1
  %258 = add i32 %257, %131
  %259 = sub i32 %258, %34
  %260 = mul i32 %259, 5
  %261 = add i32 %228, %227
  %262 = mul i32 %261, 7
  %263 = add i32 %46, %146
  %264 = sub i32 %98, %263
  %265 = add i32 %264, %182
  %266 = add i32 %265, %81
  %267 = sub i32 %266, %44
  %268 = sub i32 %267, %47
  %269 = sub i32 %268, %26
  %270 = add i32 %269, %71
  %271 = sub i32 %270, %72
  %272 = add i32 %271, %84
  %273 = sub i32 %272, %99
  %274 = sub i32 %273, %108
  %275 = add i32 %274, %122
  %276 = add i32 %275, %123
  %277 = sub i32 %276, %124
  %278 = add i32 %277, %128
  %279 = sub i32 %278, %33
  %280 = sub i32 %279, %148
  %281 = sub i32 %280, %73
  %282 = sub i32 %281, %150
  %283 = sub i32 %282, %160
  %284 = add i32 %283, %50
  %285 = add i32 %284, %168
  %286 = add i32 %285, %154
  %287 = sub i32 %286, %54
  %288 = add i32 %287, %38
  %289 = add i32 %288, %29
  %290 = sub i32 %289, %213
  %291 = sub i32 %290, %222
  %292 = add i32 %291, %4
  %293 = sub i32 %292, %28
  %294 = sub i32 %293, %31
  %295 = sub i32 %294, %41
  %296 = sub i32 %295, %45
  %297 = sub i32 %296, %55
  %298 = add i32 %297, %63
  %299 = add i32 %298, %64
  %300 = add i32 %299, %67
  %301 = add i32 %300, %85
  %302 = add i32 %301, %86
  %303 = sub i32 %302, %87
  %304 = sub i32 %303, %90
  %305 = sub i32 %304, %93
  %306 = add i32 %305, %95
  %307 = add i32 %306, %96
  %308 = sub i32 %307, %101
  %309 = add i32 %308, %106
  %310 = add i32 %309, %107
  %311 = add i32 %310, %114
  %312 = sub i32 %311, %116
  %313 = sub i32 %312, %118
  %314 = sub i32 %313, %119
  %315 = sub i32 %314, %120
  %316 = sub i32 %315, %125
  %317 = sub i32 %316, %126
  %318 = sub i32 %317, %129
  %319 = sub i32 %318, %130
  %320 = add i32 %319, %132
  %321 = add i32 %320, %133
  %322 = add i32 %321, %136
  %323 = sub i32 %322, %137
  %324 = add i32 %323, %141
  %325 = sub i32 %324, %145
  %326 = sub i32 %325, %147
  %327 = add i32 %326, %151
  %328 = sub i32 %327, %152
  %329 = add i32 %328, %74
  %330 = add i32 %329, %153
  %331 = add i32 %330, %155
  %332 = sub i32 %331, %156
  %333 = sub i32 %332, %157
  %334 = add i32 %333, %158
  %335 = sub i32 %334, %159
  %336 = sub i32 %335, %161
  %337 = add i32 %336, %171
  %338 = add i32 %337, %172
  %339 = add i32 %338, %173
  %340 = add i32 %339, %178
  %341 = add i32 %340, %179
  %342 = sub i32 %341, %180
  %343 = add i32 %342, %181
  %344 = sub i32 %343, %183
  %345 = add i32 %344, %184
  %346 = sub i32 %345, %185
  %347 = sub i32 %346, %187
  %348 = add i32 %347, %188
  %349 = sub i32 %348, %189
  %350 = sub i32 %349, %190
  %351 = sub i32 %350, %191
  %352 = sub i32 %351, %198
  %353 = add i32 %352, %199
  %354 = sub i32 %353, %201
  %355 = add i32 %354, %202
  %356 = add i32 %355, %209
  %357 = add i32 %356, %210
  %358 = sub i32 %357, %211
  %359 = sub i32 %358, %212
  %360 = add i32 %359, %214
  %361 = add i32 %360, %215
  %362 = sub i32 %361, %216
  %363 = sub i32 %362, %17
  %364 = sub i32 %363, %16
  %365 = add i32 %364, %18
  %366 = add i32 %365, %24
  %367 = sub i32 %366, %40
  %368 = sub i32 %367, %52
  %369 = add i32 %368, %61
  %370 = sub i32 %369, %70
  %371 = sub i32 %370, %76
  %372 = sub i32 %371, %79
  %373 = sub i32 %372, %89
  %374 = sub i32 %373, %92
  %375 = sub i32 %374, %97
  %376 = sub i32 %375, %103
  %377 = sub i32 %376, %140
  %378 = sub i32 %377, %144
  %379 = sub i32 %378, %163
  %380 = sub i32 %379, %170
  %381 = sub i32 %380, %175
  %382 = sub i32 %381, %177
  %383 = add i32 %382, %192
  %384 = sub i32 %383, %205
  %385 = add i32 %384, %219
  %386 = sub i32 %385, %221
  %387 = add i32 %386, %224
  %388 = add i32 %387, %226
  %389 = sub i32 %388, %230
  %390 = add i32 %389, %231
  %391 = add i32 %390, %262
  %392 = sub i32 %391, %20
  %393 = add i32 %392, %23
  %394 = sub i32 %393, %166
  %395 = sub i32 %394, %196
  %396 = sub i32 %395, %208
  %397 = add i32 %396, %256
  %398 = add i32 %397, %260
  %399 = add i32 %398, %252
  %400 = add i32 %399, %248
  %401 = icmp eq i32 %14, %400
  %402 = select i1 %401, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %403 = tail call i32 @puts(i8* nonnull dereferenceable(1) %402)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
