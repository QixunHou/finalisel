; ModuleID = '../.././c_source_file/0235_path_condition_crackme.c'
source_filename = "../.././c_source_file/0235_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = and i32 %1, %0
  %9 = xor i32 %2, -1
  %10 = or i32 %9, %1
  %11 = xor i32 %10, -1
  %12 = or i32 %8, %11
  %13 = xor i32 %2, %0
  %14 = or i32 %13, %1
  %15 = sub i32 %12, %14
  %16 = add i32 %15, %7
  %17 = xor i32 %4, %3
  %18 = or i32 %4, %3
  %19 = and i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = xor i32 %3, -1
  %23 = or i32 %22, %4
  %24 = xor i32 %18, -1
  %25 = shl i32 %7, 1
  %26 = xor i32 %25, -2
  %27 = and i32 %2, %1
  %28 = and i32 %27, %0
  %29 = or i32 %2, %1
  %30 = xor i32 %29, %0
  %31 = or i32 %28, %30
  %32 = xor i32 %13, -1
  %33 = or i32 %8, %32
  %34 = or i32 %11, %0
  %35 = xor i32 %1, -1
  %36 = and i32 %35, %2
  %37 = and i32 %36, %0
  %38 = xor i32 %2, %1
  %39 = or i32 %38, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %37, %40
  %42 = xor i32 %29, -1
  %43 = xor i32 %37, %39
  %44 = and i32 %2, %0
  %45 = and i32 %9, %1
  %46 = or i32 %44, %45
  %47 = or i32 %9, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %48, %1
  %50 = xor i32 %0, -1
  %51 = or i32 %35, %2
  %52 = and i32 %51, %50
  %53 = or i32 %37, %52
  %54 = xor i32 %10, %8
  %55 = or i32 %44, %42
  %56 = or i32 %1, %0
  %57 = xor i32 %56, -1
  %58 = add i32 %56, 1
  %59 = and i32 %9, %0
  %60 = xor i32 %59, -1
  %61 = and i32 %60, %1
  %62 = and i32 %38, %50
  %63 = or i32 %28, %62
  %64 = or i32 %59, %35
  %65 = xor i32 %44, %56
  %66 = or i32 %13, %8
  %67 = or i32 %35, %0
  %68 = xor i32 %67, -1
  %69 = xor i32 %38, -1
  %70 = or i32 %69, %68
  %71 = or i32 %2, %0
  %72 = xor i32 %71, -1
  %73 = or i32 %72, %35
  %74 = or i32 %45, %0
  %75 = shl i32 %74, 1
  %76 = xor i32 %1, %0
  %77 = xor i32 %76, -1
  %78 = or i32 %9, %77
  %79 = and i32 %71, %76
  %80 = or i32 %8, %2
  %81 = xor i32 %27, %0
  %82 = xor i32 %44, %67
  %83 = shl i32 %9, 1
  %84 = xor i32 %47, %8
  %85 = xor i32 %42, %0
  %86 = xor i32 %59, %1
  %87 = or i32 %38, %8
  %88 = xor i32 %51, %0
  %89 = xor i32 %37, -1
  %90 = xor i32 %88, %89
  %91 = or i32 %72, %1
  %92 = shl i32 %91, 1
  %93 = xor i32 %8, -1
  %94 = add i32 %8, 1
  %95 = or i32 %38, %68
  %96 = and i32 %60, %77
  %97 = and i32 %35, %0
  %98 = or i32 %27, %97
  %99 = xor i32 %44, -1
  %100 = and i32 %99, %1
  %101 = and i32 %36, %50
  %102 = and i32 %51, %0
  %103 = or i32 %101, %102
  %104 = or i32 %59, %1
  %105 = or i32 %69, %57
  %106 = shl i32 %105, 1
  %107 = xor i32 %27, -1
  %108 = or i32 %107, %50
  %109 = and i32 %38, %0
  %110 = and i32 %56, %9
  %111 = or i32 %9, %57
  %112 = xor i32 %28, -1
  %113 = xor i32 %62, %112
  %114 = and i32 %69, %0
  %115 = shl i32 %114, 1
  %116 = add i32 %59, 1
  %117 = xor i32 %71, %8
  %118 = or i32 %97, %32
  %119 = and i32 %56, %69
  %120 = or i32 %10, %50
  %121 = or i32 %76, %48
  %122 = and i32 %71, %1
  %123 = xor i32 %97, -1
  %124 = and i32 %9, %123
  %125 = xor i32 %93, %2
  %126 = shl i32 %59, 1
  %127 = xor i32 %123, %2
  %128 = or i32 %48, %35
  %129 = xor i32 %45, -1
  %130 = or i32 %129, %0
  %131 = or i32 %59, %11
  %132 = shl i32 %131, 2
  %133 = and i32 %76, %9
  %134 = and i32 %129, %0
  %135 = or i32 %32, %35
  %136 = or i32 %13, %57
  %137 = xor i32 %69, %0
  %138 = xor i32 %107, %0
  %139 = and i32 %107, %0
  %140 = and i32 %123, %2
  %141 = xor i32 %72, %1
  %142 = xor i32 %57, %2
  %143 = or i32 %42, %50
  %144 = xor i32 %71, %1
  %145 = or i32 %76, %2
  %146 = shl i32 %145, 1
  %147 = and i32 %67, %32
  %148 = xor i32 %38, %0
  %149 = xor i32 %28, %148
  %150 = add i32 %47, 1
  %151 = xor i32 %52, %89
  %152 = and i32 %69, %50
  %153 = or i32 %8, %9
  %154 = and i32 %76, %60
  %155 = or i32 %32, %1
  %156 = and i32 %32, %123
  %157 = and i32 %67, %69
  %158 = or i32 %13, %97
  %159 = or i32 %37, %88
  %160 = or i32 %8, %72
  %161 = or i32 %27, %50
  %162 = or i32 %44, %77
  %163 = and i32 %47, %77
  %164 = and i32 %76, %2
  %165 = and i32 %67, %9
  %166 = or i32 %57, %2
  %167 = or i32 %76, %32
  %168 = and i32 %56, %2
  %169 = or i32 %32, %77
  %170 = or i32 %38, %97
  %171 = and i32 %13, %76
  %172 = or i32 %38, %50
  %173 = xor i32 %172, -1
  %174 = or i32 %101, %173
  %175 = or i32 %59, %27
  %176 = and i32 %47, %1
  %177 = shl i32 %176, 1
  %178 = or i32 %72, %77
  %179 = xor i32 %11, %0
  %180 = xor i32 %68, %2
  %181 = or i32 %76, %72
  %182 = and i32 %32, %77
  %183 = xor i32 %48, %1
  %184 = xor i32 %99, %1
  %185 = and i32 %76, %99
  %186 = xor i32 %44, %29
  %187 = shl i32 %186, 1
  %188 = add i32 %97, 1
  %189 = xor i32 %10, %0
  %190 = or i32 %44, %57
  %191 = shl i32 %190, 1
  %192 = and i32 %71, %77
  %193 = xor i32 %97, %2
  %194 = xor i32 %59, %10
  %195 = xor i32 %60, %1
  %196 = xor i32 %30, 2147483647
  %197 = xor i32 %196, %28
  %198 = shl i32 %197, 1
  %199 = or i32 %8, %69
  %200 = and i32 %13, %77
  %201 = or i32 %27, %0
  %202 = and i32 %47, %76
  %203 = or i32 %37, %148
  %204 = shl i32 %203, 1
  %205 = and i32 %29, %0
  %206 = and i32 %38, %67
  %207 = or i32 %77, %2
  %208 = or i32 %29, %0
  %209 = and i32 %99, %35
  %210 = and i32 %27, %50
  %211 = xor i32 %109, -1
  %212 = xor i32 %210, %211
  %213 = and i32 %69, %123
  %214 = and i32 %38, %93
  %215 = or i32 %45, %97
  %216 = or i32 %44, %76
  %217 = and i32 %29, %50
  %218 = xor i32 %217, %112
  %219 = xor i32 %56, %2
  %220 = or i32 %13, %76
  %221 = or i32 %9, %68
  %222 = and i32 %99, %77
  %223 = and i32 %32, %93
  %224 = and i32 %32, %35
  %225 = add i32 %44, 1
  %226 = xor i32 %8, %2
  %227 = xor i32 %29, %8
  %228 = and i32 %13, %1
  %229 = and i32 %13, %67
  %230 = or i32 %42, %0
  %231 = and i32 %107, %50
  %232 = shl i32 %231, 1
  %233 = xor i32 %148, -1
  %234 = or i32 %28, %233
  %235 = or i32 %28, %217
  %236 = and i32 %32, %1
  %237 = or i32 %13, %68
  %238 = shl i32 %237, 1
  %239 = or i32 %69, %0
  %240 = and i32 %56, %32
  %241 = xor i32 %101, %172
  %242 = xor i32 %97, %107
  %243 = shl i32 %242, 1
  %244 = xor i32 %59, %107
  %245 = or i32 %97, %9
  %246 = or i32 %8, %48
  %247 = or i32 %11, %50
  %248 = or i32 %13, %77
  %249 = and i32 %77, %2
  %250 = or i32 %76, %9
  %251 = shl i32 %250, 1
  %252 = or i32 %97, %69
  %253 = or i32 %107, %0
  %254 = and i32 %67, %2
  %255 = or i32 %97, %2
  %256 = and i32 %38, %56
  %257 = xor i32 %45, %0
  %258 = shl i32 %257, 1
  %259 = and i32 %38, %123
  %260 = or i32 %13, %35
  %261 = or i32 %38, %57
  %262 = xor i32 %44, %129
  %263 = shl i32 %262, 1
  %264 = or i32 %44, %68
  %265 = and i32 %9, %93
  %266 = shl i32 %265, 1
  %267 = or i32 %32, %57
  %268 = shl i32 %267, 1
  %269 = or i32 %129, %50
  %270 = and i32 %76, %32
  %271 = xor i32 %67, %2
  %272 = and i32 %69, %93
  %273 = and i32 %13, %35
  %274 = shl i32 %273, 1
  %275 = shl i32 %8, 1
  %276 = and i32 %60, %35
  %277 = and i32 %10, %0
  %278 = and i32 %13, %56
  %279 = or i32 %210, %205
  %280 = and i32 %42, %50
  %281 = mul i32 %280, 19
  %282 = and i32 %45, %50
  %283 = and i32 %42, %0
  %284 = and i32 %45, %0
  %285 = mul i32 %284, 13
  %286 = and i32 %11, %50
  %287 = mul i32 %286, 9
  %288 = shl i32 %210, 1
  %289 = add i32 %29, %71
  %290 = add i32 %289, %125
  %291 = sub i32 %39, %245
  %292 = add i32 %291, %282
  %293 = add i32 %292, %206
  %294 = sub i32 %293, %182
  %295 = add i32 %294, %162
  %296 = mul i32 %295, 3
  %297 = add i32 %254, %226
  %298 = sub i32 %11, %297
  %299 = mul i32 %298, 5
  %300 = add i32 %290, %3
  %301 = add i32 %300, %28
  %302 = add i32 %301, %276
  %303 = add i32 %302, %269
  %304 = add i32 %303, %252
  %305 = add i32 %304, %148
  %306 = add i32 %305, %181
  %307 = add i32 %306, %155
  %308 = add i32 %307, %118
  %309 = add i32 %308, %117
  %310 = add i32 %309, %85
  %311 = add i32 %310, %66
  %312 = add i32 %311, %65
  %313 = add i32 %312, %46
  %314 = add i32 %313, %149
  %315 = add i32 %314, %159
  %316 = shl i32 %315, 1
  %317 = shl i32 %2, 2
  %318 = add i32 %317, -4
  %319 = sub i32 2, %0
  %320 = add i32 %319, %50
  %321 = add i32 %320, %35
  %322 = add i32 %321, %58
  %323 = add i32 %322, %94
  %324 = add i32 %323, %97
  %325 = add i32 %324, %188
  %326 = add i32 %325, %42
  %327 = add i32 %326, %78
  %328 = add i32 %327, %44
  %329 = add i32 %328, %80
  %330 = sub i32 %329, %83
  %331 = sub i32 %330, %110
  %332 = add i32 %331, %111
  %333 = add i32 %332, %116
  %334 = add i32 %333, %124
  %335 = sub i32 %334, %127
  %336 = sub i32 %335, %133
  %337 = sub i32 %336, %140
  %338 = sub i32 %337, %142
  %339 = add i32 %338, %150
  %340 = add i32 %339, %153
  %341 = sub i32 %340, %164
  %342 = add i32 %341, %165
  %343 = sub i32 %342, %166
  %344 = sub i32 %343, %168
  %345 = sub i32 %344, %47
  %346 = sub i32 %345, %180
  %347 = sub i32 %346, %193
  %348 = add i32 %347, %207
  %349 = add i32 %348, %219
  %350 = add i32 %349, %221
  %351 = add i32 %350, %225
  %352 = add i32 %351, %38
  %353 = add i32 %352, %249
  %354 = add i32 %353, %255
  %355 = add i32 %354, %271
  %356 = add i32 %355, %10
  %357 = sub i32 %356, %275
  %358 = add i32 %357, 1
  %359 = sub i32 %358, %33
  %360 = sub i32 %359, %34
  %361 = add i32 %360, %49
  %362 = sub i32 %361, %54
  %363 = add i32 %362, %55
  %364 = add i32 %363, %61
  %365 = sub i32 %364, %64
  %366 = add i32 %365, %62
  %367 = add i32 %366, %70
  %368 = sub i32 %367, %73
  %369 = add i32 %368, %79
  %370 = sub i32 %369, %81
  %371 = add i32 %370, %82
  %372 = add i32 %371, %84
  %373 = add i32 %372, %86
  %374 = sub i32 %373, %87
  %375 = sub i32 %374, %95
  %376 = add i32 %375, %96
  %377 = sub i32 %376, %98
  %378 = add i32 %377, %100
  %379 = add i32 %378, %104
  %380 = add i32 %379, %108
  %381 = sub i32 %380, %109
  %382 = add i32 %381, %119
  %383 = sub i32 %382, %120
  %384 = sub i32 %383, %121
  %385 = add i32 %384, %122
  %386 = sub i32 %385, %126
  %387 = add i32 %386, %128
  %388 = sub i32 %387, %130
  %389 = add i32 %388, %134
  %390 = sub i32 %389, %135
  %391 = sub i32 %390, %136
  %392 = sub i32 %391, %137
  %393 = sub i32 %392, %138
  %394 = sub i32 %393, %139
  %395 = sub i32 %394, %141
  %396 = sub i32 %395, %143
  %397 = add i32 %396, %144
  %398 = sub i32 %397, %146
  %399 = sub i32 %398, %147
  %400 = add i32 %399, %152
  %401 = add i32 %400, %154
  %402 = add i32 %401, %156
  %403 = add i32 %402, %157
  %404 = sub i32 %403, %158
  %405 = sub i32 %404, %160
  %406 = add i32 %405, %161
  %407 = sub i32 %406, %163
  %408 = sub i32 %407, %167
  %409 = sub i32 %408, %169
  %410 = add i32 %409, %170
  %411 = add i32 %410, %171
  %412 = add i32 %411, %175
  %413 = add i32 %412, %178
  %414 = sub i32 %413, %30
  %415 = sub i32 %414, %179
  %416 = sub i32 %415, %183
  %417 = sub i32 %416, %184
  %418 = add i32 %417, %185
  %419 = sub i32 %418, %189
  %420 = sub i32 %419, %192
  %421 = sub i32 %420, %194
  %422 = sub i32 %421, %195
  %423 = add i32 %422, %199
  %424 = sub i32 %423, %200
  %425 = add i32 %424, %201
  %426 = add i32 %425, %202
  %427 = add i32 %426, %205
  %428 = add i32 %427, %208
  %429 = sub i32 %428, %209
  %430 = sub i32 %429, %213
  %431 = add i32 %430, %214
  %432 = add i32 %431, %215
  %433 = sub i32 %432, %216
  %434 = add i32 %433, %220
  %435 = sub i32 %434, %222
  %436 = sub i32 %435, %223
  %437 = add i32 %436, %224
  %438 = add i32 %437, %227
  %439 = sub i32 %438, %228
  %440 = add i32 %439, %229
  %441 = sub i32 %440, %230
  %442 = sub i32 %441, %236
  %443 = sub i32 %442, %239
  %444 = add i32 %443, %240
  %445 = sub i32 %444, %244
  %446 = add i32 %445, %246
  %447 = sub i32 %446, %247
  %448 = sub i32 %447, %248
  %449 = sub i32 %448, %251
  %450 = add i32 %449, %253
  %451 = sub i32 %450, %256
  %452 = sub i32 %451, %259
  %453 = sub i32 %452, %217
  %454 = sub i32 %453, %260
  %455 = add i32 %454, %261
  %456 = sub i32 %455, %264
  %457 = sub i32 %456, %266
  %458 = add i32 %457, %270
  %459 = sub i32 %458, %272
  %460 = sub i32 %459, %277
  %461 = add i32 %460, %278
  %462 = add i32 %461, %283
  %463 = add i32 %462, %318
  %464 = sub i32 %463, %17
  %465 = sub i32 %464, %18
  %466 = sub i32 %465, %23
  %467 = add i32 %466, %24
  %468 = sub i32 %467, %31
  %469 = add i32 %468, %41
  %470 = add i32 %469, %43
  %471 = sub i32 %470, %53
  %472 = sub i32 %471, %63
  %473 = sub i32 %472, %75
  %474 = add i32 %473, %90
  %475 = sub i32 %474, %92
  %476 = add i32 %475, %103
  %477 = sub i32 %476, %106
  %478 = sub i32 %477, %113
  %479 = sub i32 %478, %115
  %480 = sub i32 %479, %132
  %481 = sub i32 %480, %151
  %482 = sub i32 %481, %174
  %483 = sub i32 %482, %177
  %484 = sub i32 %483, %187
  %485 = sub i32 %484, %191
  %486 = add i32 %485, %212
  %487 = sub i32 %486, %218
  %488 = sub i32 %487, %232
  %489 = sub i32 %488, %234
  %490 = add i32 %489, %235
  %491 = sub i32 %490, %238
  %492 = add i32 %491, %241
  %493 = sub i32 %492, %243
  %494 = sub i32 %493, %258
  %495 = sub i32 %494, %263
  %496 = sub i32 %495, %268
  %497 = sub i32 %496, %274
  %498 = add i32 %497, %279
  %499 = add i32 %498, %281
  %500 = add i32 %499, %285
  %501 = add i32 %500, %287
  %502 = sub i32 %501, %288
  %503 = add i32 %502, %20
  %504 = sub i32 %503, %204
  %505 = add i32 %504, %299
  %506 = add i32 %505, %21
  %507 = add i32 %506, %26
  %508 = sub i32 %507, %198
  %509 = add i32 %508, %296
  %510 = add i32 %509, %316
  %511 = icmp eq i32 %16, %510
  %512 = select i1 %511, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %513 = tail call i32 @puts(i8* nonnull dereferenceable(1) %512)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
