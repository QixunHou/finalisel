; ModuleID = '../.././c_source_file/0012_path_condition_crackme.c'
source_filename = "../.././c_source_file/0012_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %1
  %5 = xor i32 %4, -1
  %6 = or i32 %5, %0
  %7 = mul i32 %6, 3
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = and i32 %10, %0
  %12 = and i32 %2, %0
  %13 = or i32 %12, %1
  %14 = xor i32 %1, -1
  %15 = and i32 %14, %0
  %16 = xor i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = or i32 %15, %17
  %19 = or i32 %1, %0
  %20 = and i32 %19, %8
  %21 = shl i32 %20, 1
  %22 = xor i32 %2, %1
  %23 = xor i32 %22, -1
  %24 = or i32 %23, %0
  %25 = and i32 %8, %0
  %26 = or i32 %8, %1
  %27 = xor i32 %25, %26
  %28 = or i32 %8, %0
  %29 = xor i32 %28, %1
  %30 = and i32 %16, %1
  %31 = and i32 %16, %19
  %32 = xor i32 %19, %2
  %33 = and i32 %17, %1
  %34 = shl i32 %33, 1
  %35 = and i32 %2, %1
  %36 = or i32 %35, %15
  %37 = shl i32 %36, 1
  %38 = and i32 %19, %23
  %39 = xor i32 %9, %0
  %40 = xor i32 %25, -1
  %41 = xor i32 %1, %0
  %42 = and i32 %41, %40
  %43 = or i32 %25, %1
  %44 = shl i32 %43, 1
  %45 = xor i32 %0, -1
  %46 = and i32 %14, %2
  %47 = and i32 %46, %45
  %48 = or i32 %22, %45
  %49 = xor i32 %47, %48
  %50 = and i32 %19, %2
  %51 = xor i32 %15, %2
  %52 = and i32 %1, %0
  %53 = xor i32 %4, %52
  %54 = shl i32 %53, 2
  %55 = and i32 %35, %0
  %56 = and i32 %4, %45
  %57 = xor i32 %55, 2147483647
  %58 = xor i32 %57, %56
  %59 = and i32 %40, %14
  %60 = xor i32 %19, -1
  %61 = or i32 %17, %60
  %62 = xor i32 %15, -1
  %63 = xor i32 %62, %2
  %64 = and i32 %46, %0
  %65 = or i32 %14, %2
  %66 = xor i32 %65, %0
  %67 = or i32 %64, %66
  %68 = and i32 %4, %0
  %69 = xor i32 %41, -1
  %70 = or i32 %69, %2
  %71 = and i32 %28, %14
  %72 = and i32 %22, %45
  %73 = xor i32 %57, %72
  %74 = or i32 %8, %69
  %75 = xor i32 %40, %1
  %76 = xor i32 %26, -1
  %77 = or i32 %76, %45
  %78 = or i32 %52, %8
  %79 = and i32 %65, %0
  %80 = xor i32 %79, 2147483647
  %81 = xor i32 %80, %47
  %82 = xor i32 %4, %0
  %83 = xor i32 %35, %0
  %84 = shl i32 %83, 2
  %85 = xor i32 %12, %19
  %86 = or i32 %14, %0
  %87 = xor i32 %86, -1
  %88 = or i32 %22, %87
  %89 = or i32 %16, %1
  %90 = or i32 %41, %8
  %91 = shl i32 %90, 1
  %92 = xor i32 %28, -1
  %93 = or i32 %92, %69
  %94 = or i32 %22, %52
  %95 = or i32 %8, %87
  %96 = or i32 %16, %60
  %97 = or i32 %55, %56
  %98 = or i32 %55, %82
  %99 = and i32 %22, %19
  %100 = shl i32 %99, 1
  %101 = or i32 %22, %60
  %102 = xor i32 %35, -1
  %103 = or i32 %102, %45
  %104 = and i32 %23, %45
  %105 = xor i32 %52, -1
  %106 = and i32 %22, %105
  %107 = shl i32 %106, 1
  %108 = xor i32 %22, %0
  %109 = or i32 %64, %108
  %110 = or i32 %12, %41
  %111 = shl i32 %110, 1
  %112 = and i32 %22, %0
  %113 = or i32 %2, %0
  %114 = xor i32 %113, -1
  %115 = or i32 %114, %1
  %116 = and i32 %41, %17
  %117 = and i32 %23, %62
  %118 = xor i32 %10, %0
  %119 = xor i32 %92, %1
  %120 = xor i32 %12, -1
  %121 = shl i32 %120, 1
  %122 = or i32 %17, %1
  %123 = or i32 %114, %14
  %124 = and i32 %65, %45
  %125 = xor i32 %124, -1
  %126 = xor i32 %64, %125
  %127 = and i32 %26, %0
  %128 = xor i32 %12, %4
  %129 = or i32 %15, %8
  %130 = or i32 %35, %0
  %131 = or i32 %22, %0
  %132 = xor i32 %55, %108
  %133 = xor i32 %86, %2
  %134 = or i32 %9, %45
  %135 = or i32 %16, %41
  %136 = and i32 %17, %62
  %137 = shl i32 %136, 1
  %138 = xor i32 %113, %52
  %139 = or i32 %25, %69
  %140 = shl i32 %139, 1
  %141 = or i32 %12, %9
  %142 = and i32 %69, %2
  %143 = shl i32 %142, 1
  %144 = or i32 %25, %41
  %145 = and i32 %16, %86
  %146 = and i32 %19, %17
  %147 = and i32 %16, %69
  %148 = shl i32 %147, 1
  %149 = xor i32 %25, %102
  %150 = and i32 %28, %41
  %151 = or i32 %87, %2
  %152 = or i32 %55, %72
  %153 = xor i32 %26, %0
  %154 = shl i32 %8, 1
  %155 = or i32 %41, %17
  %156 = or i32 %52, %114
  %157 = and i32 %17, %14
  %158 = or i32 %17, %14
  %159 = xor i32 %82, -1
  %160 = xor i32 %55, %159
  %161 = xor i32 %48, -1
  %162 = or i32 %47, %161
  %163 = and i32 %17, %105
  %164 = or i32 %15, %23
  %165 = and i32 %102, %0
  %166 = and i32 %28, %1
  %167 = and i32 %16, %62
  %168 = and i32 %35, %45
  %169 = or i32 %168, %68
  %170 = or i32 %25, %35
  %171 = xor i32 %120, %1
  %172 = shl i32 %171, 1
  %173 = xor i32 %60, %2
  %174 = or i32 %52, %17
  %175 = and i32 %113, %14
  %176 = or i32 %64, %124
  %177 = or i32 %168, %112
  %178 = and i32 %113, %41
  %179 = and i32 %40, %1
  %180 = xor i32 %68, 2147483647
  %181 = xor i32 %180, %168
  %182 = and i32 %86, %2
  %183 = xor i32 %66, 2147483647
  %184 = xor i32 %183, %64
  %185 = shl i32 %184, 1
  %186 = or i32 %23, %60
  %187 = or i32 %12, %87
  %188 = or i32 %16, %87
  %189 = or i32 %52, %92
  %190 = or i32 %52, %23
  %191 = and i32 %5, %45
  %192 = mul i32 %191, -22
  %193 = and i32 %9, %45
  %194 = and i32 %5, %0
  %195 = shl i32 %194, 1
  %196 = and i32 %9, %0
  %197 = shl i32 %196, 2
  %198 = and i32 %76, %45
  %199 = shl i32 %198, 3
  %200 = mul i32 %168, -25
  %201 = and i32 %76, %0
  %202 = mul i32 %201, -20
  %203 = mul i32 %55, -10
  %204 = add i32 %17, %102
  %205 = add i32 %204, %23
  %206 = add i32 %205, %188
  %207 = add i32 %206, %165
  %208 = add i32 %207, %155
  %209 = add i32 %208, %138
  %210 = add i32 %209, %134
  %211 = add i32 %210, %127
  %212 = add i32 %211, %29
  %213 = add i32 %212, %24
  %214 = add i32 %213, %98
  %215 = add i32 %214, %67
  %216 = add i32 %215, %81
  %217 = add i32 %216, %181
  %218 = add i32 %217, %73
  %219 = add i32 %218, %58
  %220 = shl i32 %219, 1
  %221 = add i32 %68, %18
  %222 = mul i32 %221, 5
  %223 = sub i32 %173, %193
  %224 = mul i32 %223, 3
  %225 = add i32 %0, %2
  %226 = add i32 %225, %87
  %227 = sub i32 %226, %15
  %228 = add i32 %227, %32
  %229 = add i32 %228, %50
  %230 = add i32 %229, %51
  %231 = sub i32 %230, %63
  %232 = sub i32 %231, %70
  %233 = add i32 %232, %12
  %234 = sub i32 %233, %74
  %235 = add i32 %234, %78
  %236 = sub i32 %235, %95
  %237 = sub i32 %236, %22
  %238 = add i32 %237, %4
  %239 = sub i32 %238, %129
  %240 = add i32 %239, %133
  %241 = add i32 %240, %9
  %242 = sub i32 %241, %113
  %243 = add i32 %242, %40
  %244 = add i32 %243, %151
  %245 = sub i32 %244, %16
  %246 = sub i32 %245, %154
  %247 = add i32 %246, %28
  %248 = sub i32 %247, %182
  %249 = sub i32 %248, %13
  %250 = sub i32 %249, %11
  %251 = sub i32 %250, %21
  %252 = sub i32 %251, %27
  %253 = add i32 %252, %30
  %254 = sub i32 %253, %31
  %255 = sub i32 %254, %38
  %256 = add i32 %255, %39
  %257 = sub i32 %256, %42
  %258 = add i32 %257, %59
  %259 = add i32 %258, %61
  %260 = sub i32 %259, %71
  %261 = add i32 %260, %75
  %262 = add i32 %261, %77
  %263 = add i32 %262, %82
  %264 = add i32 %263, %85
  %265 = sub i32 %264, %88
  %266 = add i32 %265, %89
  %267 = sub i32 %266, %91
  %268 = add i32 %267, %93
  %269 = sub i32 %268, %94
  %270 = add i32 %269, %96
  %271 = add i32 %270, %101
  %272 = sub i32 %271, %103
  %273 = sub i32 %272, %104
  %274 = add i32 %273, %112
  %275 = sub i32 %274, %115
  %276 = sub i32 %275, %116
  %277 = add i32 %276, %117
  %278 = sub i32 %277, %118
  %279 = sub i32 %278, %119
  %280 = sub i32 %279, %121
  %281 = sub i32 %280, %72
  %282 = sub i32 %281, %122
  %283 = sub i32 %282, %123
  %284 = add i32 %283, %128
  %285 = add i32 %284, %130
  %286 = add i32 %285, %48
  %287 = sub i32 %286, %131
  %288 = sub i32 %287, %135
  %289 = sub i32 %288, %141
  %290 = sub i32 %289, %143
  %291 = add i32 %290, %144
  %292 = sub i32 %291, %145
  %293 = sub i32 %292, %56
  %294 = sub i32 %293, %146
  %295 = add i32 %294, %149
  %296 = sub i32 %295, %150
  %297 = add i32 %296, %153
  %298 = add i32 %297, %156
  %299 = sub i32 %298, %157
  %300 = sub i32 %299, %158
  %301 = add i32 %300, %163
  %302 = add i32 %301, %164
  %303 = add i32 %302, %166
  %304 = sub i32 %303, %167
  %305 = sub i32 %304, %170
  %306 = sub i32 %305, %174
  %307 = add i32 %306, %175
  %308 = sub i32 %307, %178
  %309 = add i32 %308, %179
  %310 = add i32 %309, %186
  %311 = add i32 %310, %187
  %312 = add i32 %311, %189
  %313 = add i32 %312, %190
  %314 = sub i32 %313, %34
  %315 = sub i32 %314, %37
  %316 = sub i32 %315, %44
  %317 = add i32 %316, %49
  %318 = add i32 %317, %54
  %319 = sub i32 %318, %84
  %320 = add i32 %319, %97
  %321 = sub i32 %320, %100
  %322 = sub i32 %321, %107
  %323 = sub i32 %322, %109
  %324 = sub i32 %323, %111
  %325 = sub i32 %324, %126
  %326 = add i32 %325, %132
  %327 = sub i32 %326, %137
  %328 = sub i32 %327, %140
  %329 = sub i32 %328, %148
  %330 = sub i32 %329, %152
  %331 = add i32 %330, %160
  %332 = add i32 %331, %162
  %333 = add i32 %332, %169
  %334 = sub i32 %333, %172
  %335 = sub i32 %334, %176
  %336 = add i32 %335, %177
  %337 = add i32 %336, %192
  %338 = sub i32 %337, %195
  %339 = sub i32 %338, %197
  %340 = sub i32 %339, %199
  %341 = add i32 %340, %200
  %342 = add i32 %341, %202
  %343 = add i32 %342, %203
  %344 = add i32 %343, %222
  %345 = add i32 %344, %224
  %346 = sub i32 %345, %185
  %347 = add i32 %346, %220
  %348 = icmp eq i32 %7, %347
  %349 = select i1 %348, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %350 = tail call i32 @puts(i8* nonnull dereferenceable(1) %349)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
