digraph "DFG for'crackme' function" {
	Node0x9b5030[shape=record, label="  %5 = add i32 %1, 1"];
	Node0x9b50d0[shape=record, label="  %6 = xor i32 %2, -1"];
	Node0x9b5140[shape=record, label="  %7 = and i32 %6, %1"];
	Node0x9b51b0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x9b5250[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x9b52c0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x9b5330[shape=record, label="  %11 = or i32 %6, %1"];
	Node0x9b53a0[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x9b5410[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x9b5480[shape=record, label="  %14 = xor i32 %0, -1"];
	Node0x9b54f0[shape=record, label="  %15 = and i32 %3, %0"];
	Node0x9b5560[shape=record, label="  %16 = or i32 %3, %0"];
	Node0x9b55d0[shape=record, label="  %17 = and i32 %14, %3"];
	Node0x9b5640[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x9b56b0[shape=record, label="  %19 = xor i32 %16, -1"];
	Node0x9b5720[shape=record, label="  %20 = xor i32 %3, -1"];
	Node0x9b5790[shape=record, label="  %21 = and i32 %20, %0"];
	Node0x9b5830[shape=record, label="  %22 = shl i32 %15, 2"];
	Node0x9b58a0[shape=record, label="  %23 = add i32 %19, %13"];
	Node0x9b5910[shape=record, label="  %24 = add i32 %23, %21"];
	Node0x9b59b0[shape=record, label="  %25 = mul i32 %24, -3"];
	Node0x9b5a20[shape=record, label="  %26 = sub i32 %0, %2"];
	Node0x9b5a90[shape=record, label="  %27 = add i32 %26, %11"];
	Node0x9b5b00[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x9b5b70[shape=record, label="  %29 = sub i32 %10, %0"];
	Node0x9b5be0[shape=record, label="  %30 = sub i32 %29, %7"];
	Node0x9b5c50[shape=record, label="  %31 = add i32 %30, %15"];
	Node0x9b5cc0[shape=record, label="  %32 = sub i32 %31, %16"];
	Node0x9b5f40[shape=record, label="  %33 = add i32 %32, %18"];
	Node0x9b5fb0[shape=record, label="  %34 = sub i32 %33, %17"];
	Node0x9b6020[shape=record, label="  %35 = add i32 %34, %9"];
	Node0x9b6090[shape=record, label="  %36 = sub i32 %35, %22"];
	Node0x9b6100[shape=record, label="  %37 = add i32 %36, %28"];
	Node0x9b6170[shape=record, label="  %38 = add i32 %37, %25"];
	Node0x9b61e0[shape=record, label="  %39 = icmp eq i32 %5, %38"];
	Node0x955268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x9b6680[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x9b66d0[shape=record, label="  ret void"];
	Node0x9b5030 -> Node0x9b50d0;
	Node0x9b50d0 -> Node0x9b5140;
	Node0x9b5140 -> Node0x9b51b0;
	Node0x9b51b0 -> Node0x9b5250;
	Node0x9b5250 -> Node0x9b52c0;
	Node0x9b52c0 -> Node0x9b5330;
	Node0x9b5330 -> Node0x9b53a0;
	Node0x9b53a0 -> Node0x9b5410;
	Node0x9b5410 -> Node0x9b5480;
	Node0x9b5480 -> Node0x9b54f0;
	Node0x9b54f0 -> Node0x9b5560;
	Node0x9b5560 -> Node0x9b55d0;
	Node0x9b55d0 -> Node0x9b5640;
	Node0x9b5640 -> Node0x9b56b0;
	Node0x9b56b0 -> Node0x9b5720;
	Node0x9b5720 -> Node0x9b5790;
	Node0x9b5790 -> Node0x9b5830;
	Node0x9b5830 -> Node0x9b58a0;
	Node0x9b58a0 -> Node0x9b5910;
	Node0x9b5910 -> Node0x9b59b0;
	Node0x9b59b0 -> Node0x9b5a20;
	Node0x9b5a20 -> Node0x9b5a90;
	Node0x9b5a90 -> Node0x9b5b00;
	Node0x9b5b00 -> Node0x9b5b70;
	Node0x9b5b70 -> Node0x9b5be0;
	Node0x9b5be0 -> Node0x9b5c50;
	Node0x9b5c50 -> Node0x9b5cc0;
	Node0x9b5cc0 -> Node0x9b5f40;
	Node0x9b5f40 -> Node0x9b5fb0;
	Node0x9b5fb0 -> Node0x9b6020;
	Node0x9b6020 -> Node0x9b6090;
	Node0x9b6090 -> Node0x9b6100;
	Node0x9b6100 -> Node0x9b6170;
	Node0x9b6170 -> Node0x9b61e0;
	Node0x9b61e0 -> Node0x955268;
	Node0x955268 -> Node0x9b6680;
	Node0x9b6680 -> Node0x9b66d0;
edge [color=red]
	Node0x9b50d0 -> Node0x9b5140;
	Node0x9b5140 -> Node0x9b51b0;
	Node0x9b51b0 -> Node0x9b5250;
	Node0x9b50d0 -> Node0x9b5330;
	Node0x9b53a0 -> Node0x9b5410;
	Node0x9b5480 -> Node0x9b55d0;
	Node0x9b55d0 -> Node0x9b5640;
	Node0x9b5560 -> Node0x9b56b0;
	Node0x9b5720 -> Node0x9b5790;
	Node0x9b54f0 -> Node0x9b5830;
	Node0x9b56b0 -> Node0x9b58a0;
	Node0x9b5410 -> Node0x9b58a0;
	Node0x9b58a0 -> Node0x9b5910;
	Node0x9b5790 -> Node0x9b5910;
	Node0x9b5910 -> Node0x9b59b0;
	Node0x9b5a20 -> Node0x9b5a90;
	Node0x9b5330 -> Node0x9b5a90;
	Node0x9b5a90 -> Node0x9b5b00;
	Node0x9b52c0 -> Node0x9b5b70;
	Node0x9b5b70 -> Node0x9b5be0;
	Node0x9b5140 -> Node0x9b5be0;
	Node0x9b5be0 -> Node0x9b5c50;
	Node0x9b54f0 -> Node0x9b5c50;
	Node0x9b5c50 -> Node0x9b5cc0;
	Node0x9b5560 -> Node0x9b5cc0;
	Node0x9b5cc0 -> Node0x9b5f40;
	Node0x9b5640 -> Node0x9b5f40;
	Node0x9b5f40 -> Node0x9b5fb0;
	Node0x9b55d0 -> Node0x9b5fb0;
	Node0x9b5fb0 -> Node0x9b6020;
	Node0x9b5250 -> Node0x9b6020;
	Node0x9b6020 -> Node0x9b6090;
	Node0x9b5830 -> Node0x9b6090;
	Node0x9b6090 -> Node0x9b6100;
	Node0x9b5b00 -> Node0x9b6100;
	Node0x9b6100 -> Node0x9b6170;
	Node0x9b59b0 -> Node0x9b6170;
	Node0x9b5030 -> Node0x9b61e0;
	Node0x9b6170 -> Node0x9b61e0;
	Node0x9b61e0 -> Node0x955268;
	Node0x955268 -> Node0x9b6680;
}
