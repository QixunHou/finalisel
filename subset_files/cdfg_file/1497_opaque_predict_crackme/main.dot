digraph "DFG for'main' function" {
	Node0x987ef8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x987f78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x988008[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x988068[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x988118[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x988548[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x988628[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x988728[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x9887e8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x988898[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x988958[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x988a08[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x982c00[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x988c08[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x989b78[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x98a1e8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x98a248[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x98a2c0[shape=record, label="  %14 = xor i32 %12, %11"];
	Node0x98a330[shape=record, label="  %15 = xor i32 %10, -1"];
	Node0x98a3a0[shape=record, label="  %16 = sub i32 %14, %10"];
	Node0x98a410[shape=record, label="  %17 = xor i32 %13, %10"];
	Node0x98a480[shape=record, label="  %18 = add i32 %16, %17"];
	Node0x98a4f0[shape=record, label="  %19 = xor i32 %12, -1"];
	Node0x98a560[shape=record, label="  %20 = or i32 %12, %11"];
	Node0x98a5d0[shape=record, label="  %21 = shl i32 %11, 1"];
	Node0x98a640[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x98a6b0[shape=record, label="  %23 = or i32 %11, %19"];
	Node0x98a720[shape=record, label="  %24 = and i32 %12, %11"];
	Node0x98a790[shape=record, label="  %25 = xor i32 %20, -1"];
	Node0x98a800[shape=record, label="  %26 = mul i32 %25, -5"];
	Node0x98a870[shape=record, label="  %27 = or i32 %13, %15"];
	Node0x98a8e0[shape=record, label="  %28 = shl i32 %13, 2"];
	Node0x98a950[shape=record, label="  %29 = or i32 %13, %10"];
	Node0x98a9c0[shape=record, label="  %30 = and i32 %13, %15"];
	Node0x98aa30[shape=record, label="  %31 = and i32 %13, %10"];
	Node0x98aaa0[shape=record, label="  %32 = shl i32 %29, 2"];
	Node0x98ab10[shape=record, label="  %33 = xor i32 %32, -4"];
	Node0x98ab80[shape=record, label="  %34 = shl i32 %27, 2"];
	Node0x98abf0[shape=record, label="  %35 = xor i32 %34, -4"];
	Node0x98ac60[shape=record, label="  %36 = shl i32 %30, 3"];
	Node0x98acd0[shape=record, label="  %37 = mul i32 %31, 6"];
	Node0x98ad40[shape=record, label="  %38 = add i32 %10, 4"];
	Node0x98adb0[shape=record, label="  %39 = sub i32 %38, %11"];
	Node0x98ae20[shape=record, label="  %40 = add i32 %39, %19"];
	Node0x98ae90[shape=record, label="  %41 = sub i32 %40, %12"];
	Node0x98af00[shape=record, label="  %42 = sub i32 %41, %20"];
	Node0x98af70[shape=record, label="  %43 = add i32 %42, %22"];
	Node0x98afe0[shape=record, label="  %44 = add i32 %43, %23"];
	Node0x98b050[shape=record, label="  %45 = add i32 %44, %24"];
	Node0x98b0c0[shape=record, label="  %46 = add i32 %45, %26"];
	Node0x98b130[shape=record, label="  %47 = add i32 %46, %27"];
	Node0x98b1a0[shape=record, label="  %48 = add i32 %47, %17"];
	Node0x98b210[shape=record, label="  %49 = sub i32 %48, %28"];
	Node0x98b280[shape=record, label="  %50 = sub i32 %49, %29"];
	Node0x98b2f0[shape=record, label="  %51 = add i32 %50, %30"];
	Node0x98b360[shape=record, label="  %52 = add i32 %51, %31"];
	Node0x98b3d0[shape=record, label="  %53 = add i32 %52, %36"];
	Node0x98b440[shape=record, label="  %54 = add i32 %53, %37"];
	Node0x98b4b0[shape=record, label="  %55 = add i32 %54, %33"];
	Node0x98b520[shape=record, label="  %56 = add i32 %55, %35"];
	Node0x98b590[shape=record, label="  %57 = icmp eq i32 %18, %56"];
	Node0x9278b8[shape=record, label="  %58 = select i1 %57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x98b620[shape=record, label="  %59 = call i32 @puts(i8* nonnull dereferenceable(1) %58) #5"];
	Node0x98b8c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x98ba28[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x98bb38[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x98bc48[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x98bd08[shape=record, label="  ret i32 0"];
	Node0x987ef8 -> Node0x987f78;
	Node0x987f78 -> Node0x988008;
	Node0x988008 -> Node0x988068;
	Node0x988068 -> Node0x988118;
	Node0x988118 -> Node0x988548;
	Node0x988548 -> Node0x988628;
	Node0x988628 -> Node0x988728;
	Node0x988728 -> Node0x9887e8;
	Node0x9887e8 -> Node0x988898;
	Node0x988898 -> Node0x988958;
	Node0x988958 -> Node0x988a08;
	Node0x988a08 -> Node0x982c00;
	Node0x982c00 -> Node0x988c08;
	Node0x988c08 -> Node0x989b78;
	Node0x989b78 -> Node0x98a1e8;
	Node0x98a1e8 -> Node0x98a248;
	Node0x98a248 -> Node0x98a2c0;
	Node0x98a2c0 -> Node0x98a330;
	Node0x98a330 -> Node0x98a3a0;
	Node0x98a3a0 -> Node0x98a410;
	Node0x98a410 -> Node0x98a480;
	Node0x98a480 -> Node0x98a4f0;
	Node0x98a4f0 -> Node0x98a560;
	Node0x98a560 -> Node0x98a5d0;
	Node0x98a5d0 -> Node0x98a640;
	Node0x98a640 -> Node0x98a6b0;
	Node0x98a6b0 -> Node0x98a720;
	Node0x98a720 -> Node0x98a790;
	Node0x98a790 -> Node0x98a800;
	Node0x98a800 -> Node0x98a870;
	Node0x98a870 -> Node0x98a8e0;
	Node0x98a8e0 -> Node0x98a950;
	Node0x98a950 -> Node0x98a9c0;
	Node0x98a9c0 -> Node0x98aa30;
	Node0x98aa30 -> Node0x98aaa0;
	Node0x98aaa0 -> Node0x98ab10;
	Node0x98ab10 -> Node0x98ab80;
	Node0x98ab80 -> Node0x98abf0;
	Node0x98abf0 -> Node0x98ac60;
	Node0x98ac60 -> Node0x98acd0;
	Node0x98acd0 -> Node0x98ad40;
	Node0x98ad40 -> Node0x98adb0;
	Node0x98adb0 -> Node0x98ae20;
	Node0x98ae20 -> Node0x98ae90;
	Node0x98ae90 -> Node0x98af00;
	Node0x98af00 -> Node0x98af70;
	Node0x98af70 -> Node0x98afe0;
	Node0x98afe0 -> Node0x98b050;
	Node0x98b050 -> Node0x98b0c0;
	Node0x98b0c0 -> Node0x98b130;
	Node0x98b130 -> Node0x98b1a0;
	Node0x98b1a0 -> Node0x98b210;
	Node0x98b210 -> Node0x98b280;
	Node0x98b280 -> Node0x98b2f0;
	Node0x98b2f0 -> Node0x98b360;
	Node0x98b360 -> Node0x98b3d0;
	Node0x98b3d0 -> Node0x98b440;
	Node0x98b440 -> Node0x98b4b0;
	Node0x98b4b0 -> Node0x98b520;
	Node0x98b520 -> Node0x98b590;
	Node0x98b590 -> Node0x9278b8;
	Node0x9278b8 -> Node0x98b620;
	Node0x98b620 -> Node0x98b8c8;
	Node0x98b8c8 -> Node0x98ba28;
	Node0x98ba28 -> Node0x98bb38;
	Node0x98bb38 -> Node0x98bc48;
	Node0x98bc48 -> Node0x98bd08;
edge [color=red]
	Node0x987ef8 -> Node0x988118;
	Node0x988118 -> Node0x988548;
	Node0x987f78 -> Node0x988628;
	Node0x988628 -> Node0x988728;
	Node0x988008 -> Node0x9887e8;
	Node0x9887e8 -> Node0x988898;
	Node0x988068 -> Node0x988958;
	Node0x988958 -> Node0x988a08;
	Node0x987ef8 -> Node0x982c00;
	Node0x987f78 -> Node0x982c00;
	Node0x988008 -> Node0x982c00;
	Node0x988068 -> Node0x982c00;
	Node0x987ef8 -> Node0x988c08;
	Node0x987f78 -> Node0x989b78;
	Node0x988008 -> Node0x98a1e8;
	Node0x988068 -> Node0x98a248;
	Node0x98a1e8 -> Node0x98a2c0;
	Node0x989b78 -> Node0x98a2c0;
	Node0x988c08 -> Node0x98a330;
	Node0x98a2c0 -> Node0x98a3a0;
	Node0x988c08 -> Node0x98a3a0;
	Node0x98a248 -> Node0x98a410;
	Node0x988c08 -> Node0x98a410;
	Node0x98a3a0 -> Node0x98a480;
	Node0x98a410 -> Node0x98a480;
	Node0x98a1e8 -> Node0x98a4f0;
	Node0x98a1e8 -> Node0x98a560;
	Node0x989b78 -> Node0x98a560;
	Node0x989b78 -> Node0x98a5d0;
	Node0x98a5d0 -> Node0x98a640;
	Node0x989b78 -> Node0x98a6b0;
	Node0x98a4f0 -> Node0x98a6b0;
	Node0x98a1e8 -> Node0x98a720;
	Node0x989b78 -> Node0x98a720;
	Node0x98a560 -> Node0x98a790;
	Node0x98a790 -> Node0x98a800;
	Node0x98a248 -> Node0x98a870;
	Node0x98a330 -> Node0x98a870;
	Node0x98a248 -> Node0x98a8e0;
	Node0x98a248 -> Node0x98a950;
	Node0x988c08 -> Node0x98a950;
	Node0x98a248 -> Node0x98a9c0;
	Node0x98a330 -> Node0x98a9c0;
	Node0x98a248 -> Node0x98aa30;
	Node0x988c08 -> Node0x98aa30;
	Node0x98a950 -> Node0x98aaa0;
	Node0x98aaa0 -> Node0x98ab10;
	Node0x98a870 -> Node0x98ab80;
	Node0x98ab80 -> Node0x98abf0;
	Node0x98a9c0 -> Node0x98ac60;
	Node0x98aa30 -> Node0x98acd0;
	Node0x988c08 -> Node0x98ad40;
	Node0x98ad40 -> Node0x98adb0;
	Node0x989b78 -> Node0x98adb0;
	Node0x98adb0 -> Node0x98ae20;
	Node0x98a4f0 -> Node0x98ae20;
	Node0x98ae20 -> Node0x98ae90;
	Node0x98a1e8 -> Node0x98ae90;
	Node0x98ae90 -> Node0x98af00;
	Node0x98a560 -> Node0x98af00;
	Node0x98af00 -> Node0x98af70;
	Node0x98a640 -> Node0x98af70;
	Node0x98af70 -> Node0x98afe0;
	Node0x98a6b0 -> Node0x98afe0;
	Node0x98afe0 -> Node0x98b050;
	Node0x98a720 -> Node0x98b050;
	Node0x98b050 -> Node0x98b0c0;
	Node0x98a800 -> Node0x98b0c0;
	Node0x98b0c0 -> Node0x98b130;
	Node0x98a870 -> Node0x98b130;
	Node0x98b130 -> Node0x98b1a0;
	Node0x98a410 -> Node0x98b1a0;
	Node0x98b1a0 -> Node0x98b210;
	Node0x98a8e0 -> Node0x98b210;
	Node0x98b210 -> Node0x98b280;
	Node0x98a950 -> Node0x98b280;
	Node0x98b280 -> Node0x98b2f0;
	Node0x98a9c0 -> Node0x98b2f0;
	Node0x98b2f0 -> Node0x98b360;
	Node0x98aa30 -> Node0x98b360;
	Node0x98b360 -> Node0x98b3d0;
	Node0x98ac60 -> Node0x98b3d0;
	Node0x98b3d0 -> Node0x98b440;
	Node0x98acd0 -> Node0x98b440;
	Node0x98b440 -> Node0x98b4b0;
	Node0x98ab10 -> Node0x98b4b0;
	Node0x98b4b0 -> Node0x98b520;
	Node0x98abf0 -> Node0x98b520;
	Node0x98a480 -> Node0x98b590;
	Node0x98b520 -> Node0x98b590;
	Node0x98b590 -> Node0x9278b8;
	Node0x9278b8 -> Node0x98b620;
	Node0x988958 -> Node0x98b8c8;
	Node0x9887e8 -> Node0x98ba28;
	Node0x988628 -> Node0x98bb38;
	Node0x988118 -> Node0x98bc48;
}
