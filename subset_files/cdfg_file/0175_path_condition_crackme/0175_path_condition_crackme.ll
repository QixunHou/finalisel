; ModuleID = '../.././c_source_file/0175_path_condition_crackme.c'
source_filename = "../.././c_source_file/0175_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = mul i32 %7, 3
  %9 = and i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %10
  %14 = add i32 %8, %13
  %15 = shl i32 %3, 1
  %16 = or i32 %15, 1
  %17 = xor i32 %4, -1
  %18 = xor i32 %17, %3
  %19 = or i32 %4, %3
  %20 = shl i32 %19, 2
  %21 = xor i32 %20, -4
  %22 = and i32 %17, %3
  %23 = mul i32 %6, -6
  %24 = xor i32 %2, -1
  %25 = and i32 %24, %0
  %26 = or i32 %24, %1
  %27 = xor i32 %25, %26
  %28 = xor i32 %1, %0
  %29 = or i32 %28, %24
  %30 = and i32 %2, %1
  %31 = and i32 %30, %0
  %32 = xor i32 %0, -1
  %33 = or i32 %2, %1
  %34 = and i32 %33, %32
  %35 = xor i32 %31, -1
  %36 = xor i32 %34, %35
  %37 = or i32 %2, %0
  %38 = xor i32 %37, %9
  %39 = xor i32 %2, %1
  %40 = xor i32 %39, -1
  %41 = or i32 %9, %40
  %42 = xor i32 %1, -1
  %43 = or i32 %42, %0
  %44 = and i32 %43, %12
  %45 = xor i32 %40, %0
  %46 = or i32 %30, %0
  %47 = xor i32 %43, -1
  %48 = or i32 %12, %47
  %49 = shl i32 %48, 1
  %50 = and i32 %24, %1
  %51 = xor i32 %50, %0
  %52 = shl i32 %51, 1
  %53 = and i32 %39, %43
  %54 = shl i32 %53, 1
  %55 = or i32 %24, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %42
  %58 = shl i32 %57, 1
  %59 = or i32 %39, %0
  %60 = and i32 %26, %0
  %61 = and i32 %2, %0
  %62 = or i32 %61, %28
  %63 = xor i32 %33, -1
  %64 = xor i32 %63, %0
  %65 = xor i32 %55, %9
  %66 = xor i32 %28, -1
  %67 = or i32 %12, %66
  %68 = and i32 %39, %0
  %69 = or i32 %25, %1
  %70 = and i32 %42, %0
  %71 = xor i32 %50, -1
  %72 = xor i32 %70, %71
  %73 = xor i32 %39, %0
  %74 = and i32 %39, %10
  %75 = xor i32 %37, -1
  %76 = xor i32 %75, %1
  %77 = or i32 %1, %0
  %78 = and i32 %77, %40
  %79 = or i32 %28, %2
  %80 = and i32 %39, %77
  %81 = shl i32 %80, 1
  %82 = xor i32 %25, -1
  %83 = and i32 %11, %1
  %84 = xor i32 %26, -1
  %85 = or i32 %25, %84
  %86 = or i32 %61, %1
  %87 = xor i32 %70, -1
  %88 = and i32 %24, %87
  %89 = and i32 %28, %2
  %90 = xor i32 %47, %2
  %91 = add i32 %9, 1
  %92 = and i32 %12, %1
  %93 = xor i32 %55, %1
  %94 = xor i32 %71, %0
  %95 = or i32 %84, %32
  %96 = and i32 %11, %10
  %97 = or i32 %24, %47
  %98 = and i32 %40, %0
  %99 = xor i32 %26, %9
  %100 = and i32 %42, %2
  %101 = and i32 %100, %0
  %102 = xor i32 %59, -1
  %103 = or i32 %101, %102
  %104 = or i32 %39, %70
  %105 = or i32 %63, %32
  %106 = or i32 %11, %42
  %107 = shl i32 %106, 2
  %108 = xor i32 %33, %0
  %109 = xor i32 %108, %35
  %110 = and i32 %100, %32
  %111 = or i32 %39, %32
  %112 = xor i32 %110, %111
  %113 = or i32 %70, %12
  %114 = or i32 %12, %1
  %115 = add i32 %70, 1
  %116 = or i32 %66, %2
  %117 = shl i32 %116, 1
  %118 = or i32 %61, %66
  %119 = xor i32 %30, -1
  %120 = and i32 %119, %0
  %121 = xor i32 %25, %1
  %122 = or i32 %12, %42
  %123 = and i32 %40, %32
  %124 = and i32 %11, %43
  %125 = and i32 %82, %42
  %126 = or i32 %25, %30
  %127 = or i32 %42, %2
  %128 = and i32 %127, %32
  %129 = xor i32 %101, -1
  %130 = xor i32 %128, %129
  %131 = and i32 %24, %66
  %132 = or i32 %70, %24
  %133 = or i32 %11, %1
  %134 = or i32 %71, %32
  %135 = or i32 %61, %50
  %136 = and i32 %77, %2
  %137 = or i32 %28, %75
  %138 = or i32 %47, %2
  %139 = shl i32 %138, 1
  %140 = xor i32 %9, %2
  %141 = xor i32 %37, %1
  %142 = and i32 %11, %66
  %143 = xor i32 %61, -1
  %144 = add i32 %61, 1
  %145 = and i32 %12, %66
  %146 = or i32 %25, %66
  %147 = shl i32 %108, 1
  %148 = and i32 %39, %32
  %149 = or i32 %9, %2
  %150 = xor i32 %73, -1
  %151 = xor i32 %101, %150
  %152 = xor i32 %84, %0
  %153 = or i32 %39, %9
  %154 = xor i32 %26, %0
  %155 = or i32 %31, %34
  %156 = shl i32 %155, 1
  %157 = or i32 %56, %1
  %158 = and i32 %71, %32
  %159 = or i32 %25, %28
  %160 = or i32 %71, %0
  %161 = or i32 %61, %47
  %162 = shl i32 %161, 1
  %163 = or i32 %75, %1
  %164 = or i32 %11, %70
  %165 = or i32 %101, %73
  %166 = and i32 %39, %87
  %167 = xor i32 %70, %119
  %168 = and i32 %143, %42
  %169 = and i32 %127, %0
  %170 = or i32 %110, %169
  %171 = xor i32 %77, -1
  %172 = or i32 %24, %171
  %173 = or i32 %11, %47
  %174 = and i32 %77, %24
  %175 = shl i32 %174, 1
  %176 = xor i32 %127, %0
  %177 = xor i32 %176, %129
  %178 = or i32 %11, %9
  %179 = or i32 %11, %28
  %180 = add i32 %26, 1
  %181 = and i32 %143, %1
  %182 = xor i32 %61, %43
  %183 = or i32 %26, %0
  %184 = xor i32 %10, %2
  %185 = or i32 %24, %66
  %186 = shl i32 %71, 1
  %187 = or i32 %33, %0
  %188 = and i32 %11, %28
  %189 = xor i32 %111, -1
  %190 = or i32 %110, %189
  %191 = xor i32 %82, %1
  %192 = and i32 %12, %42
  %193 = and i32 %24, %10
  %194 = or i32 %40, %47
  %195 = and i32 %30, %32
  %196 = and i32 %33, %0
  %197 = xor i32 %195, -1
  %198 = xor i32 %196, %197
  %199 = or i32 %50, %70
  %200 = and i32 %82, %1
  %201 = and i32 %55, %42
  %202 = xor i32 %119, %0
  %203 = or i32 %28, %56
  %204 = or i32 %195, %196
  %205 = and i32 %82, %66
  %206 = and i32 %43, %40
  %207 = xor i32 %169, -1
  %208 = xor i32 %110, %207
  %209 = xor i32 %31, %73
  %210 = or i32 %11, %171
  %211 = xor i32 %61, %33
  %212 = xor i32 %143, %1
  %213 = add i32 %43, 1
  %214 = or i32 %39, %171
  %215 = xor i32 %61, %71
  %216 = and i32 %26, %32
  %217 = or i32 %39, %47
  %218 = or i32 %61, %63
  %219 = or i32 %50, %0
  %220 = or i32 %56, %66
  %221 = and i32 %12, %87
  %222 = or i32 %28, %12
  %223 = and i32 %55, %1
  %224 = xor i32 %30, %0
  %225 = and i32 %28, %143
  %226 = and i32 %143, %66
  %227 = and i32 %119, %32
  %228 = or i32 %9, %12
  %229 = or i32 %40, %32
  %230 = and i32 %11, %42
  %231 = or i32 %31, %108
  %232 = or i32 %61, %42
  %233 = or i32 %63, %0
  %234 = or i32 %70, %40
  %235 = or i32 %75, %42
  %236 = shl i32 %235, 1
  %237 = and i32 %66, %2
  %238 = or i32 %26, %32
  %239 = shl i32 %12, 1
  %240 = xor i32 %33, %9
  %241 = shl i32 %240, 1
  %242 = xor i32 %56, %1
  %243 = or i32 %61, %171
  %244 = or i32 %30, %70
  %245 = xor i32 %68, %197
  %246 = xor i32 %171, %2
  %247 = or i32 %9, %63
  %248 = and i32 %28, %82
  %249 = shl i32 %248, 1
  %250 = and i32 %40, %10
  %251 = or i32 %171, %2
  %252 = or i32 %11, %66
  %253 = or i32 %30, %32
  %254 = and i32 %37, %66
  %255 = or i32 %40, %171
  %256 = or i32 %31, %148
  %257 = and i32 %37, %1
  %258 = and i32 %37, %42
  %259 = xor i32 %148, %35
  %260 = and i32 %55, %66
  %261 = shl i32 %260, 1
  %262 = and i32 %40, %87
  %263 = or i32 %119, %32
  %264 = or i32 %101, %176
  %265 = xor i32 %25, %119
  %266 = or i32 %40, %0
  %267 = or i32 %9, %75
  %268 = and i32 %28, %12
  %269 = and i32 %71, %0
  %270 = shl i32 %269, 1
  %271 = or i32 %101, %128
  %272 = shl i32 %271, 1
  %273 = and i32 %11, %87
  %274 = and i32 %77, %12
  %275 = and i32 %43, %24
  %276 = shl i32 %275, 1
  %277 = or i32 %31, %150
  %278 = xor i32 %43, %2
  %279 = and i32 %10, %2
  %280 = or i32 %9, %56
  %281 = and i32 %55, %28
  %282 = or i32 %9, %24
  %283 = and i32 %63, %32
  %284 = mul i32 %283, 21
  %285 = and i32 %50, %32
  %286 = mul i32 %285, 22
  %287 = and i32 %63, %0
  %288 = mul i32 %287, 17
  %289 = and i32 %50, %0
  %290 = and i32 %84, %32
  %291 = mul i32 %290, 12
  %292 = and i32 %84, %0
  %293 = mul i32 %31, -18
  %294 = add i32 %70, -1
  %295 = add i32 %294, %279
  %296 = add i32 %295, %149
  %297 = add i32 %296, %136
  %298 = add i32 %297, %132
  %299 = add i32 %298, %203
  %300 = add i32 %299, %274
  %301 = add i32 %300, %182
  %302 = add i32 %301, %181
  %303 = add i32 %302, %157
  %304 = add i32 %303, %142
  %305 = add i32 %304, %114
  %306 = add i32 %305, %76
  %307 = add i32 %306, %46
  %308 = shl i32 %307, 1
  %309 = sub i32 %140, %184
  %310 = sub i32 %309, %211
  %311 = sub i32 %310, %210
  %312 = add i32 %311, %177
  %313 = mul i32 %312, 3
  %314 = sub i32 %213, %173
  %315 = add i32 %314, %183
  %316 = sub i32 %315, %105
  %317 = add i32 %316, %62
  %318 = mul i32 %317, 5
  %319 = or i32 %292, %195
  %320 = mul i32 %319, 9
  %321 = add i32 %280, 1073741823
  %322 = add i32 %321, %231
  %323 = add i32 %322, %256
  %324 = shl i32 %323, 2
  %325 = sub i32 1, %0
  %326 = add i32 %325, %1
  %327 = add i32 %326, %91
  %328 = add i32 %327, %115
  %329 = sub i32 %328, %77
  %330 = add i32 %329, %171
  %331 = sub i32 %330, %29
  %332 = sub i32 %331, %39
  %333 = sub i32 %332, %79
  %334 = sub i32 %333, %88
  %335 = sub i32 %334, %89
  %336 = add i32 %335, %90
  %337 = sub i32 %336, %97
  %338 = add i32 %337, %131
  %339 = add i32 %338, %144
  %340 = add i32 %339, %56
  %341 = add i32 %340, %172
  %342 = add i32 %341, %180
  %343 = add i32 %342, %185
  %344 = sub i32 %343, %26
  %345 = sub i32 %344, %193
  %346 = add i32 %345, %119
  %347 = sub i32 %346, %61
  %348 = sub i32 %347, %50
  %349 = sub i32 %348, %237
  %350 = add i32 %349, %132
  %351 = add i32 %350, %246
  %352 = sub i32 %351, %251
  %353 = sub i32 %352, %55
  %354 = add i32 %353, %11
  %355 = sub i32 %354, %278
  %356 = sub i32 %355, %282
  %357 = add i32 %356, %4
  %358 = add i32 %357, %27
  %359 = sub i32 %358, %38
  %360 = add i32 %359, %41
  %361 = add i32 %360, %44
  %362 = sub i32 %361, %45
  %363 = add i32 %362, %59
  %364 = sub i32 %363, %60
  %365 = add i32 %364, %64
  %366 = sub i32 %365, %65
  %367 = add i32 %366, %67
  %368 = add i32 %367, %68
  %369 = sub i32 %368, %69
  %370 = add i32 %369, %72
  %371 = add i32 %370, %73
  %372 = sub i32 %371, %74
  %373 = add i32 %372, %78
  %374 = sub i32 %373, %83
  %375 = sub i32 %374, %85
  %376 = sub i32 %375, %86
  %377 = sub i32 %376, %92
  %378 = sub i32 %377, %93
  %379 = add i32 %378, %94
  %380 = sub i32 %379, %95
  %381 = sub i32 %380, %96
  %382 = sub i32 %381, %98
  %383 = sub i32 %382, %99
  %384 = sub i32 %383, %104
  %385 = sub i32 %384, %113
  %386 = sub i32 %385, %117
  %387 = add i32 %386, %118
  %388 = sub i32 %387, %120
  %389 = sub i32 %388, %121
  %390 = sub i32 %389, %122
  %391 = add i32 %390, %123
  %392 = sub i32 %391, %124
  %393 = add i32 %392, %125
  %394 = sub i32 %393, %126
  %395 = add i32 %394, %133
  %396 = sub i32 %395, %134
  %397 = sub i32 %396, %135
  %398 = add i32 %397, %137
  %399 = sub i32 %398, %139
  %400 = sub i32 %399, %141
  %401 = add i32 %400, %145
  %402 = sub i32 %401, %146
  %403 = sub i32 %402, %148
  %404 = sub i32 %403, %152
  %405 = add i32 %404, %153
  %406 = sub i32 %405, %154
  %407 = sub i32 %406, %158
  %408 = add i32 %407, %159
  %409 = sub i32 %408, %160
  %410 = sub i32 %409, %163
  %411 = add i32 %410, %164
  %412 = sub i32 %411, %166
  %413 = add i32 %412, %167
  %414 = add i32 %413, %168
  %415 = sub i32 %414, %175
  %416 = add i32 %415, %178
  %417 = add i32 %416, %179
  %418 = sub i32 %417, %186
  %419 = add i32 %418, %187
  %420 = sub i32 %419, %188
  %421 = add i32 %420, %191
  %422 = sub i32 %421, %192
  %423 = add i32 %422, %194
  %424 = sub i32 %423, %199
  %425 = sub i32 %424, %200
  %426 = sub i32 %425, %201
  %427 = sub i32 %426, %202
  %428 = sub i32 %427, %205
  %429 = add i32 %428, %206
  %430 = sub i32 %429, %212
  %431 = sub i32 %430, %214
  %432 = add i32 %431, %196
  %433 = add i32 %432, %215
  %434 = add i32 %433, %216
  %435 = add i32 %434, %217
  %436 = add i32 %435, %218
  %437 = sub i32 %436, %219
  %438 = sub i32 %437, %220
  %439 = sub i32 %438, %221
  %440 = sub i32 %439, %222
  %441 = sub i32 %440, %223
  %442 = sub i32 %441, %224
  %443 = add i32 %442, %225
  %444 = sub i32 %443, %226
  %445 = add i32 %444, %227
  %446 = add i32 %445, %228
  %447 = add i32 %446, %229
  %448 = sub i32 %447, %230
  %449 = sub i32 %448, %232
  %450 = sub i32 %449, %111
  %451 = add i32 %450, %233
  %452 = add i32 %451, %234
  %453 = sub i32 %452, %238
  %454 = sub i32 %453, %239
  %455 = sub i32 %454, %242
  %456 = sub i32 %455, %243
  %457 = sub i32 %456, %244
  %458 = add i32 %457, %247
  %459 = add i32 %458, %34
  %460 = sub i32 %459, %250
  %461 = add i32 %460, %252
  %462 = sub i32 %461, %253
  %463 = sub i32 %462, %254
  %464 = add i32 %463, %255
  %465 = add i32 %464, %257
  %466 = sub i32 %465, %258
  %467 = sub i32 %466, %262
  %468 = add i32 %467, %263
  %469 = sub i32 %468, %265
  %470 = add i32 %469, %266
  %471 = add i32 %470, %267
  %472 = add i32 %471, %268
  %473 = sub i32 %472, %273
  %474 = sub i32 %473, %276
  %475 = add i32 %474, %281
  %476 = add i32 %475, %289
  %477 = add i32 %476, %18
  %478 = add i32 %477, %16
  %479 = sub i32 %478, %22
  %480 = sub i32 %479, %36
  %481 = sub i32 %480, %49
  %482 = sub i32 %481, %52
  %483 = sub i32 %482, %54
  %484 = sub i32 %483, %58
  %485 = sub i32 %484, %81
  %486 = add i32 %485, %103
  %487 = sub i32 %486, %107
  %488 = sub i32 %487, %109
  %489 = sub i32 %488, %112
  %490 = sub i32 %489, %130
  %491 = sub i32 %490, %147
  %492 = sub i32 %491, %151
  %493 = sub i32 %492, %162
  %494 = add i32 %493, %165
  %495 = add i32 %494, %170
  %496 = add i32 %495, %190
  %497 = sub i32 %496, %198
  %498 = add i32 %497, %204
  %499 = add i32 %498, %208
  %500 = add i32 %499, %209
  %501 = sub i32 %500, %236
  %502 = sub i32 %501, %241
  %503 = add i32 %502, %245
  %504 = sub i32 %503, %249
  %505 = sub i32 %504, %259
  %506 = sub i32 %505, %261
  %507 = add i32 %506, %264
  %508 = sub i32 %507, %270
  %509 = add i32 %508, %277
  %510 = add i32 %509, %284
  %511 = add i32 %510, %286
  %512 = add i32 %511, %288
  %513 = add i32 %512, %291
  %514 = add i32 %513, %293
  %515 = add i32 %514, %20
  %516 = add i32 %515, %23
  %517 = sub i32 %516, %156
  %518 = sub i32 %517, %272
  %519 = add i32 %518, %320
  %520 = add i32 %519, %21
  %521 = add i32 %520, %318
  %522 = add i32 %521, %324
  %523 = add i32 %522, %313
  %524 = add i32 %523, %308
  %525 = icmp eq i32 %14, %524
  %526 = select i1 %525, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %527 = tail call i32 @puts(i8* nonnull dereferenceable(1) %526)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
