digraph "DFG for'main' function" {
	Node0x110cd88[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x110ce08[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x110ce98[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x110d2f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x110d3d8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x110d4f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x110d730[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x110d7e8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x110e758[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x110ede0[shape=record, label="  %8 = or i32 %7, %6"];
	Node0x110ee50[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x110eec0[shape=record, label="  %10 = sub i32 0, %9"];
	Node0x110ef30[shape=record, label="  %11 = xor i32 %7, -1"];
	Node0x110efa0[shape=record, label="  %12 = and i32 %6, %11"];
	Node0x110f010[shape=record, label="  %13 = and i32 %7, %6"];
	Node0x110f080[shape=record, label="  %14 = or i32 %6, %11"];
	Node0x110f0f0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x110f160[shape=record, label="  %16 = xor i32 %7, %6"];
	Node0x110f1d0[shape=record, label="  %17 = shl i32 %16, 2"];
	Node0x110f240[shape=record, label="  %18 = xor i32 %17, -4"];
	Node0x110f2b0[shape=record, label="  %19 = xor i32 %8, -1"];
	Node0x110f320[shape=record, label="  %20 = mul i32 %19, 5"];
	Node0x110f390[shape=record, label="  %21 = shl i32 %13, 2"];
	Node0x110f400[shape=record, label="  %22 = mul i32 %12, -2"];
	Node0x110f470[shape=record, label="  %23 = sub i32 %6, %7"];
	Node0x110f4e0[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0x110f550[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x110f5c0[shape=record, label="  %26 = sub i32 %25, %15"];
	Node0x110f630[shape=record, label="  %27 = add i32 %26, %20"];
	Node0x110f6a0[shape=record, label="  %28 = add i32 %27, %21"];
	Node0x110f710[shape=record, label="  %29 = add i32 %28, %22"];
	Node0x110f780[shape=record, label="  %30 = sub i32 %29, %18"];
	Node0x110f7f0[shape=record, label="  %31 = icmp eq i32 %30, %10"];
	Node0x10ad9d8[shape=record, label="  %32 = select i1 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x110fa90[shape=record, label="  %33 = call i32 @puts(i8* nonnull dereferenceable(1) %32) #5"];
	Node0x110fce8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x110fe48[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x110ff08[shape=record, label="  ret i32 0"];
	Node0x110cd88 -> Node0x110ce08;
	Node0x110ce08 -> Node0x110ce98;
	Node0x110ce98 -> Node0x110d2f8;
	Node0x110d2f8 -> Node0x110d3d8;
	Node0x110d3d8 -> Node0x110d4f8;
	Node0x110d4f8 -> Node0x110d730;
	Node0x110d730 -> Node0x110d7e8;
	Node0x110d7e8 -> Node0x110e758;
	Node0x110e758 -> Node0x110ede0;
	Node0x110ede0 -> Node0x110ee50;
	Node0x110ee50 -> Node0x110eec0;
	Node0x110eec0 -> Node0x110ef30;
	Node0x110ef30 -> Node0x110efa0;
	Node0x110efa0 -> Node0x110f010;
	Node0x110f010 -> Node0x110f080;
	Node0x110f080 -> Node0x110f0f0;
	Node0x110f0f0 -> Node0x110f160;
	Node0x110f160 -> Node0x110f1d0;
	Node0x110f1d0 -> Node0x110f240;
	Node0x110f240 -> Node0x110f2b0;
	Node0x110f2b0 -> Node0x110f320;
	Node0x110f320 -> Node0x110f390;
	Node0x110f390 -> Node0x110f400;
	Node0x110f400 -> Node0x110f470;
	Node0x110f470 -> Node0x110f4e0;
	Node0x110f4e0 -> Node0x110f550;
	Node0x110f550 -> Node0x110f5c0;
	Node0x110f5c0 -> Node0x110f630;
	Node0x110f630 -> Node0x110f6a0;
	Node0x110f6a0 -> Node0x110f710;
	Node0x110f710 -> Node0x110f780;
	Node0x110f780 -> Node0x110f7f0;
	Node0x110f7f0 -> Node0x10ad9d8;
	Node0x10ad9d8 -> Node0x110fa90;
	Node0x110fa90 -> Node0x110fce8;
	Node0x110fce8 -> Node0x110fe48;
	Node0x110fe48 -> Node0x110ff08;
edge [color=red]
	Node0x110cd88 -> Node0x110ce98;
	Node0x110ce98 -> Node0x110d2f8;
	Node0x110ce08 -> Node0x110d3d8;
	Node0x110d3d8 -> Node0x110d4f8;
	Node0x110cd88 -> Node0x110d730;
	Node0x110ce08 -> Node0x110d730;
	Node0x110cd88 -> Node0x110d7e8;
	Node0x110ce08 -> Node0x110e758;
	Node0x110e758 -> Node0x110ede0;
	Node0x110d7e8 -> Node0x110ede0;
	Node0x110d7e8 -> Node0x110ee50;
	Node0x110ede0 -> Node0x110ee50;
	Node0x110ee50 -> Node0x110eec0;
	Node0x110e758 -> Node0x110ef30;
	Node0x110d7e8 -> Node0x110efa0;
	Node0x110ef30 -> Node0x110efa0;
	Node0x110e758 -> Node0x110f010;
	Node0x110d7e8 -> Node0x110f010;
	Node0x110d7e8 -> Node0x110f080;
	Node0x110ef30 -> Node0x110f080;
	Node0x110f080 -> Node0x110f0f0;
	Node0x110e758 -> Node0x110f160;
	Node0x110d7e8 -> Node0x110f160;
	Node0x110f160 -> Node0x110f1d0;
	Node0x110f1d0 -> Node0x110f240;
	Node0x110ede0 -> Node0x110f2b0;
	Node0x110f2b0 -> Node0x110f320;
	Node0x110f010 -> Node0x110f390;
	Node0x110efa0 -> Node0x110f400;
	Node0x110d7e8 -> Node0x110f470;
	Node0x110e758 -> Node0x110f470;
	Node0x110f470 -> Node0x110f4e0;
	Node0x110f010 -> Node0x110f4e0;
	Node0x110f4e0 -> Node0x110f550;
	Node0x110f080 -> Node0x110f550;
	Node0x110f550 -> Node0x110f5c0;
	Node0x110f0f0 -> Node0x110f5c0;
	Node0x110f5c0 -> Node0x110f630;
	Node0x110f320 -> Node0x110f630;
	Node0x110f630 -> Node0x110f6a0;
	Node0x110f390 -> Node0x110f6a0;
	Node0x110f6a0 -> Node0x110f710;
	Node0x110f400 -> Node0x110f710;
	Node0x110f710 -> Node0x110f780;
	Node0x110f240 -> Node0x110f780;
	Node0x110f780 -> Node0x110f7f0;
	Node0x110eec0 -> Node0x110f7f0;
	Node0x110f7f0 -> Node0x10ad9d8;
	Node0x10ad9d8 -> Node0x110fa90;
	Node0x110d3d8 -> Node0x110fce8;
	Node0x110ce98 -> Node0x110fe48;
}
