digraph "DFG for'crackme' function" {
	Node0x110b540[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x110b5b0[shape=record, label="  %4 = add i32 %3, %0"];
	Node0x110bc80[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x110bd20[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x110bd90[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x110be00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x110be70[shape=record, label="  %9 = or i32 %6, %0"];
	Node0x110bf10[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x110bf80[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0x110c020[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0x110c0c0[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x110c130[shape=record, label="  %14 = xor i32 %3, -1"];
	Node0x110c1d0[shape=record, label="  %15 = mul i32 %14, 5"];
	Node0x110c240[shape=record, label="  %16 = shl i32 %8, 2"];
	Node0x110c2e0[shape=record, label="  %17 = mul i32 %7, -2"];
	Node0x110c350[shape=record, label="  %18 = sub i32 %0, %1"];
	Node0x110c3c0[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0x110c430[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x110c4a0[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0x110c510[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x110c580[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x110c5f0[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x110c660[shape=record, label="  %25 = sub i32 %24, %13"];
	Node0x110c6d0[shape=record, label="  %26 = icmp eq i32 %25, %5"];
	Node0x10ac268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x110cb70[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x110cbc0[shape=record, label="  ret void"];
	Node0x110b540 -> Node0x110b5b0;
	Node0x110b5b0 -> Node0x110bc80;
	Node0x110bc80 -> Node0x110bd20;
	Node0x110bd20 -> Node0x110bd90;
	Node0x110bd90 -> Node0x110be00;
	Node0x110be00 -> Node0x110be70;
	Node0x110be70 -> Node0x110bf10;
	Node0x110bf10 -> Node0x110bf80;
	Node0x110bf80 -> Node0x110c020;
	Node0x110c020 -> Node0x110c0c0;
	Node0x110c0c0 -> Node0x110c130;
	Node0x110c130 -> Node0x110c1d0;
	Node0x110c1d0 -> Node0x110c240;
	Node0x110c240 -> Node0x110c2e0;
	Node0x110c2e0 -> Node0x110c350;
	Node0x110c350 -> Node0x110c3c0;
	Node0x110c3c0 -> Node0x110c430;
	Node0x110c430 -> Node0x110c4a0;
	Node0x110c4a0 -> Node0x110c510;
	Node0x110c510 -> Node0x110c580;
	Node0x110c580 -> Node0x110c5f0;
	Node0x110c5f0 -> Node0x110c660;
	Node0x110c660 -> Node0x110c6d0;
	Node0x110c6d0 -> Node0x10ac268;
	Node0x10ac268 -> Node0x110cb70;
	Node0x110cb70 -> Node0x110cbc0;
edge [color=red]
	Node0x110b540 -> Node0x110b5b0;
	Node0x110b5b0 -> Node0x110bc80;
	Node0x110bd20 -> Node0x110bd90;
	Node0x110bd20 -> Node0x110be70;
	Node0x110be70 -> Node0x110bf10;
	Node0x110bf80 -> Node0x110c020;
	Node0x110c020 -> Node0x110c0c0;
	Node0x110b540 -> Node0x110c130;
	Node0x110c130 -> Node0x110c1d0;
	Node0x110be00 -> Node0x110c240;
	Node0x110bd90 -> Node0x110c2e0;
	Node0x110c350 -> Node0x110c3c0;
	Node0x110be00 -> Node0x110c3c0;
	Node0x110c3c0 -> Node0x110c430;
	Node0x110be70 -> Node0x110c430;
	Node0x110c430 -> Node0x110c4a0;
	Node0x110bf10 -> Node0x110c4a0;
	Node0x110c4a0 -> Node0x110c510;
	Node0x110c1d0 -> Node0x110c510;
	Node0x110c510 -> Node0x110c580;
	Node0x110c240 -> Node0x110c580;
	Node0x110c580 -> Node0x110c5f0;
	Node0x110c2e0 -> Node0x110c5f0;
	Node0x110c5f0 -> Node0x110c660;
	Node0x110c0c0 -> Node0x110c660;
	Node0x110c660 -> Node0x110c6d0;
	Node0x110bc80 -> Node0x110c6d0;
	Node0x110c6d0 -> Node0x10ac268;
	Node0x10ac268 -> Node0x110cb70;
}
