digraph "DFG for'crackme' function" {
	Node0x1a29a60[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1a2a0e0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x1a2a150[shape=record, label="  %7 = and i32 %6, %3"];
	Node0x1a2a1c0[shape=record, label="  %8 = add i32 %0, %1"];
	Node0x1a2a230[shape=record, label="  %9 = sub i32 %5, %8"];
	Node0x1a2a2a0[shape=record, label="  %10 = add i32 %9, %7"];
	Node0x1a2a310[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x1a2a380[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x1a2a3f0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1a2a460[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x1a2a4d0[shape=record, label="  %15 = and i32 %14, %2"];
	Node0x1a2a570[shape=record, label="  %16 = mul i32 %12, 3"];
	Node0x1a2a5e0[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x1a2a650[shape=record, label="  %18 = xor i32 %3, %0"];
	Node0x1a2a6f0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1a2a760[shape=record, label="  %20 = or i32 %19, 1"];
	Node0x1a2a7d0[shape=record, label="  %21 = xor i32 %3, -1"];
	Node0x1a2a840[shape=record, label="  %22 = and i32 %21, %0"];
	Node0x1a2a8b0[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x1a2a920[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x1a2a9c0[shape=record, label="  %25 = mul i32 %22, -5"];
	Node0x1a2aa30[shape=record, label="  %26 = add i32 %0, 1"];
	Node0x1a2aaa0[shape=record, label="  %27 = sub i32 %26, %1"];
	Node0x1a2ab10[shape=record, label="  %28 = add i32 %27, %2"];
	Node0x1a2ab80[shape=record, label="  %29 = sub i32 %28, %5"];
	Node0x1a2abf0[shape=record, label="  %30 = add i32 %29, %13"];
	Node0x1a2ac60[shape=record, label="  %31 = add i32 %30, %15"];
	Node0x1a2acd0[shape=record, label="  %32 = sub i32 %31, %17"];
	Node0x1a2af50[shape=record, label="  %33 = add i32 %32, %16"];
	Node0x1a2afc0[shape=record, label="  %34 = add i32 %33, %22"];
	Node0x1a2b030[shape=record, label="  %35 = add i32 %34, %24"];
	Node0x1a2b0a0[shape=record, label="  %36 = sub i32 %35, %7"];
	Node0x1a2b110[shape=record, label="  %37 = sub i32 %36, %23"];
	Node0x1a2b180[shape=record, label="  %38 = add i32 %37, %25"];
	Node0x1a2b1f0[shape=record, label="  %39 = add i32 %38, %20"];
	Node0x1a2b260[shape=record, label="  %40 = icmp eq i32 %10, %39"];
	Node0x19ca268[shape=record, label="  %41 = select i1 %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a2b700[shape=record, label="  %42 = tail call i32 @puts(i8* nonnull dereferenceable(1) %41)"];
	Node0x1a2b750[shape=record, label="  ret void"];
	Node0x1a29a60 -> Node0x1a2a0e0;
	Node0x1a2a0e0 -> Node0x1a2a150;
	Node0x1a2a150 -> Node0x1a2a1c0;
	Node0x1a2a1c0 -> Node0x1a2a230;
	Node0x1a2a230 -> Node0x1a2a2a0;
	Node0x1a2a2a0 -> Node0x1a2a310;
	Node0x1a2a310 -> Node0x1a2a380;
	Node0x1a2a380 -> Node0x1a2a3f0;
	Node0x1a2a3f0 -> Node0x1a2a460;
	Node0x1a2a460 -> Node0x1a2a4d0;
	Node0x1a2a4d0 -> Node0x1a2a570;
	Node0x1a2a570 -> Node0x1a2a5e0;
	Node0x1a2a5e0 -> Node0x1a2a650;
	Node0x1a2a650 -> Node0x1a2a6f0;
	Node0x1a2a6f0 -> Node0x1a2a760;
	Node0x1a2a760 -> Node0x1a2a7d0;
	Node0x1a2a7d0 -> Node0x1a2a840;
	Node0x1a2a840 -> Node0x1a2a8b0;
	Node0x1a2a8b0 -> Node0x1a2a920;
	Node0x1a2a920 -> Node0x1a2a9c0;
	Node0x1a2a9c0 -> Node0x1a2aa30;
	Node0x1a2aa30 -> Node0x1a2aaa0;
	Node0x1a2aaa0 -> Node0x1a2ab10;
	Node0x1a2ab10 -> Node0x1a2ab80;
	Node0x1a2ab80 -> Node0x1a2abf0;
	Node0x1a2abf0 -> Node0x1a2ac60;
	Node0x1a2ac60 -> Node0x1a2acd0;
	Node0x1a2acd0 -> Node0x1a2af50;
	Node0x1a2af50 -> Node0x1a2afc0;
	Node0x1a2afc0 -> Node0x1a2b030;
	Node0x1a2b030 -> Node0x1a2b0a0;
	Node0x1a2b0a0 -> Node0x1a2b110;
	Node0x1a2b110 -> Node0x1a2b180;
	Node0x1a2b180 -> Node0x1a2b1f0;
	Node0x1a2b1f0 -> Node0x1a2b260;
	Node0x1a2b260 -> Node0x19ca268;
	Node0x19ca268 -> Node0x1a2b700;
	Node0x1a2b700 -> Node0x1a2b750;
edge [color=red]
	Node0x1a2a0e0 -> Node0x1a2a150;
	Node0x1a29a60 -> Node0x1a2a230;
	Node0x1a2a1c0 -> Node0x1a2a230;
	Node0x1a2a230 -> Node0x1a2a2a0;
	Node0x1a2a150 -> Node0x1a2a2a0;
	Node0x1a2a310 -> Node0x1a2a380;
	Node0x1a2a380 -> Node0x1a2a3f0;
	Node0x1a2a460 -> Node0x1a2a4d0;
	Node0x1a2a380 -> Node0x1a2a570;
	Node0x1a2a650 -> Node0x1a2a6f0;
	Node0x1a2a6f0 -> Node0x1a2a760;
	Node0x1a2a7d0 -> Node0x1a2a840;
	Node0x1a2a8b0 -> Node0x1a2a920;
	Node0x1a2a840 -> Node0x1a2a9c0;
	Node0x1a2aa30 -> Node0x1a2aaa0;
	Node0x1a2aaa0 -> Node0x1a2ab10;
	Node0x1a2ab10 -> Node0x1a2ab80;
	Node0x1a29a60 -> Node0x1a2ab80;
	Node0x1a2ab80 -> Node0x1a2abf0;
	Node0x1a2a3f0 -> Node0x1a2abf0;
	Node0x1a2abf0 -> Node0x1a2ac60;
	Node0x1a2a4d0 -> Node0x1a2ac60;
	Node0x1a2ac60 -> Node0x1a2acd0;
	Node0x1a2a5e0 -> Node0x1a2acd0;
	Node0x1a2acd0 -> Node0x1a2af50;
	Node0x1a2a570 -> Node0x1a2af50;
	Node0x1a2af50 -> Node0x1a2afc0;
	Node0x1a2a840 -> Node0x1a2afc0;
	Node0x1a2afc0 -> Node0x1a2b030;
	Node0x1a2a920 -> Node0x1a2b030;
	Node0x1a2b030 -> Node0x1a2b0a0;
	Node0x1a2a150 -> Node0x1a2b0a0;
	Node0x1a2b0a0 -> Node0x1a2b110;
	Node0x1a2a8b0 -> Node0x1a2b110;
	Node0x1a2b110 -> Node0x1a2b180;
	Node0x1a2a9c0 -> Node0x1a2b180;
	Node0x1a2b180 -> Node0x1a2b1f0;
	Node0x1a2a760 -> Node0x1a2b1f0;
	Node0x1a2a2a0 -> Node0x1a2b260;
	Node0x1a2b1f0 -> Node0x1a2b260;
	Node0x1a2b260 -> Node0x19ca268;
	Node0x19ca268 -> Node0x1a2b700;
}
