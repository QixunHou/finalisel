digraph "DFG for'main' function" {
	Node0x1a2b918[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1a2b998[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1a2ba28[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1a2ba88[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x1a2bb38[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x1a2bf68[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1a2c048[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x1a2c148[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1a2c208[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x1a2c2b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1a2c378[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x1a2c428[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1a26a90[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x1a2c628[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1a2d598[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1a2dc08[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1a2dc68[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x1a2dce0[shape=record, label="  %14 = xor i32 %12, %11"];
	Node0x1a2dd50[shape=record, label="  %15 = xor i32 %10, -1"];
	Node0x1a2ddc0[shape=record, label="  %16 = and i32 %13, %15"];
	Node0x1a2de30[shape=record, label="  %17 = add i32 %11, %10"];
	Node0x1a2dea0[shape=record, label="  %18 = sub i32 %14, %17"];
	Node0x1a2df10[shape=record, label="  %19 = add i32 %18, %16"];
	Node0x1a2df80[shape=record, label="  %20 = xor i32 %12, -1"];
	Node0x1a2dff0[shape=record, label="  %21 = and i32 %11, %20"];
	Node0x1a2e060[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x1a2e0d0[shape=record, label="  %23 = xor i32 %11, -1"];
	Node0x1a2e140[shape=record, label="  %24 = and i32 %12, %23"];
	Node0x1a2e1b0[shape=record, label="  %25 = mul i32 %21, 3"];
	Node0x1a2e220[shape=record, label="  %26 = and i32 %12, %11"];
	Node0x1a2e290[shape=record, label="  %27 = xor i32 %13, %10"];
	Node0x1a2e300[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x1a2e370[shape=record, label="  %29 = or i32 %28, 1"];
	Node0x1a2e3e0[shape=record, label="  %30 = xor i32 %13, -1"];
	Node0x1a2e450[shape=record, label="  %31 = and i32 %10, %30"];
	Node0x1a2e4c0[shape=record, label="  %32 = and i32 %13, %10"];
	Node0x1a2e530[shape=record, label="  %33 = xor i32 %32, -1"];
	Node0x1a2e5a0[shape=record, label="  %34 = mul i32 %31, -5"];
	Node0x1a2e610[shape=record, label="  %35 = add i32 %10, 1"];
	Node0x1a2e680[shape=record, label="  %36 = sub i32 %35, %11"];
	Node0x1a2e6f0[shape=record, label="  %37 = add i32 %36, %12"];
	Node0x1a2e760[shape=record, label="  %38 = sub i32 %37, %14"];
	Node0x1a2e7d0[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x1a2e840[shape=record, label="  %40 = add i32 %39, %24"];
	Node0x1a2e8b0[shape=record, label="  %41 = sub i32 %40, %26"];
	Node0x1a2e920[shape=record, label="  %42 = add i32 %41, %25"];
	Node0x1a2e990[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x1a2ea00[shape=record, label="  %44 = add i32 %43, %33"];
	Node0x1a2ea70[shape=record, label="  %45 = sub i32 %44, %16"];
	Node0x1a2eae0[shape=record, label="  %46 = sub i32 %45, %32"];
	Node0x1a2eb50[shape=record, label="  %47 = add i32 %46, %34"];
	Node0x1a2ebc0[shape=record, label="  %48 = add i32 %47, %29"];
	Node0x1a2ec30[shape=record, label="  %49 = icmp eq i32 %19, %48"];
	Node0x19cb8b8[shape=record, label="  %50 = select i1 %49, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a2ecc0[shape=record, label="  %51 = call i32 @puts(i8* nonnull dereferenceable(1) %50) #5"];
	Node0x1a2ef68[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1a2f0c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1a2f1d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1a2f2e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1a2f3a8[shape=record, label="  ret i32 0"];
	Node0x1a2b918 -> Node0x1a2b998;
	Node0x1a2b998 -> Node0x1a2ba28;
	Node0x1a2ba28 -> Node0x1a2ba88;
	Node0x1a2ba88 -> Node0x1a2bb38;
	Node0x1a2bb38 -> Node0x1a2bf68;
	Node0x1a2bf68 -> Node0x1a2c048;
	Node0x1a2c048 -> Node0x1a2c148;
	Node0x1a2c148 -> Node0x1a2c208;
	Node0x1a2c208 -> Node0x1a2c2b8;
	Node0x1a2c2b8 -> Node0x1a2c378;
	Node0x1a2c378 -> Node0x1a2c428;
	Node0x1a2c428 -> Node0x1a26a90;
	Node0x1a26a90 -> Node0x1a2c628;
	Node0x1a2c628 -> Node0x1a2d598;
	Node0x1a2d598 -> Node0x1a2dc08;
	Node0x1a2dc08 -> Node0x1a2dc68;
	Node0x1a2dc68 -> Node0x1a2dce0;
	Node0x1a2dce0 -> Node0x1a2dd50;
	Node0x1a2dd50 -> Node0x1a2ddc0;
	Node0x1a2ddc0 -> Node0x1a2de30;
	Node0x1a2de30 -> Node0x1a2dea0;
	Node0x1a2dea0 -> Node0x1a2df10;
	Node0x1a2df10 -> Node0x1a2df80;
	Node0x1a2df80 -> Node0x1a2dff0;
	Node0x1a2dff0 -> Node0x1a2e060;
	Node0x1a2e060 -> Node0x1a2e0d0;
	Node0x1a2e0d0 -> Node0x1a2e140;
	Node0x1a2e140 -> Node0x1a2e1b0;
	Node0x1a2e1b0 -> Node0x1a2e220;
	Node0x1a2e220 -> Node0x1a2e290;
	Node0x1a2e290 -> Node0x1a2e300;
	Node0x1a2e300 -> Node0x1a2e370;
	Node0x1a2e370 -> Node0x1a2e3e0;
	Node0x1a2e3e0 -> Node0x1a2e450;
	Node0x1a2e450 -> Node0x1a2e4c0;
	Node0x1a2e4c0 -> Node0x1a2e530;
	Node0x1a2e530 -> Node0x1a2e5a0;
	Node0x1a2e5a0 -> Node0x1a2e610;
	Node0x1a2e610 -> Node0x1a2e680;
	Node0x1a2e680 -> Node0x1a2e6f0;
	Node0x1a2e6f0 -> Node0x1a2e760;
	Node0x1a2e760 -> Node0x1a2e7d0;
	Node0x1a2e7d0 -> Node0x1a2e840;
	Node0x1a2e840 -> Node0x1a2e8b0;
	Node0x1a2e8b0 -> Node0x1a2e920;
	Node0x1a2e920 -> Node0x1a2e990;
	Node0x1a2e990 -> Node0x1a2ea00;
	Node0x1a2ea00 -> Node0x1a2ea70;
	Node0x1a2ea70 -> Node0x1a2eae0;
	Node0x1a2eae0 -> Node0x1a2eb50;
	Node0x1a2eb50 -> Node0x1a2ebc0;
	Node0x1a2ebc0 -> Node0x1a2ec30;
	Node0x1a2ec30 -> Node0x19cb8b8;
	Node0x19cb8b8 -> Node0x1a2ecc0;
	Node0x1a2ecc0 -> Node0x1a2ef68;
	Node0x1a2ef68 -> Node0x1a2f0c8;
	Node0x1a2f0c8 -> Node0x1a2f1d8;
	Node0x1a2f1d8 -> Node0x1a2f2e8;
	Node0x1a2f2e8 -> Node0x1a2f3a8;
edge [color=red]
	Node0x1a2b918 -> Node0x1a2bb38;
	Node0x1a2bb38 -> Node0x1a2bf68;
	Node0x1a2b998 -> Node0x1a2c048;
	Node0x1a2c048 -> Node0x1a2c148;
	Node0x1a2ba28 -> Node0x1a2c208;
	Node0x1a2c208 -> Node0x1a2c2b8;
	Node0x1a2ba88 -> Node0x1a2c378;
	Node0x1a2c378 -> Node0x1a2c428;
	Node0x1a2b918 -> Node0x1a26a90;
	Node0x1a2b998 -> Node0x1a26a90;
	Node0x1a2ba28 -> Node0x1a26a90;
	Node0x1a2ba88 -> Node0x1a26a90;
	Node0x1a2b918 -> Node0x1a2c628;
	Node0x1a2b998 -> Node0x1a2d598;
	Node0x1a2ba28 -> Node0x1a2dc08;
	Node0x1a2ba88 -> Node0x1a2dc68;
	Node0x1a2dc08 -> Node0x1a2dce0;
	Node0x1a2d598 -> Node0x1a2dce0;
	Node0x1a2c628 -> Node0x1a2dd50;
	Node0x1a2dc68 -> Node0x1a2ddc0;
	Node0x1a2dd50 -> Node0x1a2ddc0;
	Node0x1a2d598 -> Node0x1a2de30;
	Node0x1a2c628 -> Node0x1a2de30;
	Node0x1a2dce0 -> Node0x1a2dea0;
	Node0x1a2de30 -> Node0x1a2dea0;
	Node0x1a2dea0 -> Node0x1a2df10;
	Node0x1a2ddc0 -> Node0x1a2df10;
	Node0x1a2dc08 -> Node0x1a2df80;
	Node0x1a2d598 -> Node0x1a2dff0;
	Node0x1a2df80 -> Node0x1a2dff0;
	Node0x1a2dff0 -> Node0x1a2e060;
	Node0x1a2d598 -> Node0x1a2e0d0;
	Node0x1a2dc08 -> Node0x1a2e140;
	Node0x1a2e0d0 -> Node0x1a2e140;
	Node0x1a2dff0 -> Node0x1a2e1b0;
	Node0x1a2dc08 -> Node0x1a2e220;
	Node0x1a2d598 -> Node0x1a2e220;
	Node0x1a2dc68 -> Node0x1a2e290;
	Node0x1a2c628 -> Node0x1a2e290;
	Node0x1a2e290 -> Node0x1a2e300;
	Node0x1a2e300 -> Node0x1a2e370;
	Node0x1a2dc68 -> Node0x1a2e3e0;
	Node0x1a2c628 -> Node0x1a2e450;
	Node0x1a2e3e0 -> Node0x1a2e450;
	Node0x1a2dc68 -> Node0x1a2e4c0;
	Node0x1a2c628 -> Node0x1a2e4c0;
	Node0x1a2e4c0 -> Node0x1a2e530;
	Node0x1a2e450 -> Node0x1a2e5a0;
	Node0x1a2c628 -> Node0x1a2e610;
	Node0x1a2e610 -> Node0x1a2e680;
	Node0x1a2d598 -> Node0x1a2e680;
	Node0x1a2e680 -> Node0x1a2e6f0;
	Node0x1a2dc08 -> Node0x1a2e6f0;
	Node0x1a2e6f0 -> Node0x1a2e760;
	Node0x1a2dce0 -> Node0x1a2e760;
	Node0x1a2e760 -> Node0x1a2e7d0;
	Node0x1a2e060 -> Node0x1a2e7d0;
	Node0x1a2e7d0 -> Node0x1a2e840;
	Node0x1a2e140 -> Node0x1a2e840;
	Node0x1a2e840 -> Node0x1a2e8b0;
	Node0x1a2e220 -> Node0x1a2e8b0;
	Node0x1a2e8b0 -> Node0x1a2e920;
	Node0x1a2e1b0 -> Node0x1a2e920;
	Node0x1a2e920 -> Node0x1a2e990;
	Node0x1a2e450 -> Node0x1a2e990;
	Node0x1a2e990 -> Node0x1a2ea00;
	Node0x1a2e530 -> Node0x1a2ea00;
	Node0x1a2ea00 -> Node0x1a2ea70;
	Node0x1a2ddc0 -> Node0x1a2ea70;
	Node0x1a2ea70 -> Node0x1a2eae0;
	Node0x1a2e4c0 -> Node0x1a2eae0;
	Node0x1a2eae0 -> Node0x1a2eb50;
	Node0x1a2e5a0 -> Node0x1a2eb50;
	Node0x1a2eb50 -> Node0x1a2ebc0;
	Node0x1a2e370 -> Node0x1a2ebc0;
	Node0x1a2df10 -> Node0x1a2ec30;
	Node0x1a2ebc0 -> Node0x1a2ec30;
	Node0x1a2ec30 -> Node0x19cb8b8;
	Node0x19cb8b8 -> Node0x1a2ecc0;
	Node0x1a2c378 -> Node0x1a2ef68;
	Node0x1a2c208 -> Node0x1a2f0c8;
	Node0x1a2c048 -> Node0x1a2f1d8;
	Node0x1a2bb38 -> Node0x1a2f2e8;
}
