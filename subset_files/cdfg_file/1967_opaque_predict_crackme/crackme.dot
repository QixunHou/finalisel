digraph "DFG for'crackme' function" {
	Node0x143e460[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x143eb10[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x143ebd0[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x143ec40[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x143ece0[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x143ed80[shape=record, label="  %8 = xor i32 %1, 2147483647"];
	Node0x143edf0[shape=record, label="  %9 = or i32 %8, %0"];
	Node0x143ee60[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x143eed0[shape=record, label="  %11 = or i32 %5, %1"];
	Node0x143ef70[shape=record, label="  %12 = xor i32 %7, -2"];
	Node0x143efe0[shape=record, label="  %13 = shl i32 %9, 1"];
	Node0x143f080[shape=record, label="  %14 = sub i32 5, %0"];
	Node0x143f0f0[shape=record, label="  %15 = add i32 %14, %3"];
	Node0x143f160[shape=record, label="  %16 = add i32 %15, %10"];
	Node0x143f1d0[shape=record, label="  %17 = add i32 %16, %11"];
	Node0x143f240[shape=record, label="  %18 = add i32 %17, %7"];
	Node0x143f2b0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x143f320[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x143f390[shape=record, label="  %21 = icmp eq i32 %20, %4"];
	Node0x13df268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x143f830[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x143f880[shape=record, label="  ret void"];
	Node0x143e460 -> Node0x143eb10;
	Node0x143eb10 -> Node0x143ebd0;
	Node0x143ebd0 -> Node0x143ec40;
	Node0x143ec40 -> Node0x143ece0;
	Node0x143ece0 -> Node0x143ed80;
	Node0x143ed80 -> Node0x143edf0;
	Node0x143edf0 -> Node0x143ee60;
	Node0x143ee60 -> Node0x143eed0;
	Node0x143eed0 -> Node0x143ef70;
	Node0x143ef70 -> Node0x143efe0;
	Node0x143efe0 -> Node0x143f080;
	Node0x143f080 -> Node0x143f0f0;
	Node0x143f0f0 -> Node0x143f160;
	Node0x143f160 -> Node0x143f1d0;
	Node0x143f1d0 -> Node0x143f240;
	Node0x143f240 -> Node0x143f2b0;
	Node0x143f2b0 -> Node0x143f320;
	Node0x143f320 -> Node0x143f390;
	Node0x143f390 -> Node0x13df268;
	Node0x13df268 -> Node0x143f830;
	Node0x143f830 -> Node0x143f880;
edge [color=red]
	Node0x143e460 -> Node0x143eb10;
	Node0x143ec40 -> Node0x143ece0;
	Node0x143ed80 -> Node0x143edf0;
	Node0x143ebd0 -> Node0x143eed0;
	Node0x143ece0 -> Node0x143ef70;
	Node0x143edf0 -> Node0x143efe0;
	Node0x143f080 -> Node0x143f0f0;
	Node0x143e460 -> Node0x143f0f0;
	Node0x143f0f0 -> Node0x143f160;
	Node0x143ee60 -> Node0x143f160;
	Node0x143f160 -> Node0x143f1d0;
	Node0x143eed0 -> Node0x143f1d0;
	Node0x143f1d0 -> Node0x143f240;
	Node0x143ece0 -> Node0x143f240;
	Node0x143f240 -> Node0x143f2b0;
	Node0x143efe0 -> Node0x143f2b0;
	Node0x143f2b0 -> Node0x143f320;
	Node0x143ef70 -> Node0x143f320;
	Node0x143f320 -> Node0x143f390;
	Node0x143eb10 -> Node0x143f390;
	Node0x143f390 -> Node0x13df268;
	Node0x13df268 -> Node0x143f830;
}
