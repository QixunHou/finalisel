digraph "DFG for'crackme' function" {
	Node0x195dbb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x195dc20[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x195dce0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x195dd50[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x195ddc0[shape=record, label="  %7 = add i32 %4, %6"];
	Node0x195de30[shape=record, label="  %8 = shl i32 %5, 2"];
	Node0x195dea0[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x195df10[shape=record, label="  %10 = and i32 %3, %0"];
	Node0x195df80[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x195e020[shape=record, label="  %12 = shl i32 %1, 1"];
	Node0x195e090[shape=record, label="  %13 = shl i32 %4, 1"];
	Node0x195e130[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x195e1a0[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x195e210[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x195e2b0[shape=record, label="  %17 = mul i32 %10, 3"];
	Node0x195e320[shape=record, label="  %18 = and i32 %1, %0"];
	Node0x195e3c0[shape=record, label="  %19 = mul i32 %18, -6"];
	Node0x195e430[shape=record, label="  %20 = add i32 %7, %11"];
	Node0x195e4a0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x195e510[shape=record, label="  %22 = sub i32 %21, %16"];
	Node0x195e580[shape=record, label="  %23 = add i32 %22, %9"];
	Node0x195e5f0[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x195e660[shape=record, label="  %25 = add i32 %24, %19"];
	Node0x195e6d0[shape=record, label="  %26 = sub i32 %25, %14"];
	Node0x195e740[shape=record, label="  %27 = icmp eq i32 %26, %3"];
	Node0x18fe268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x195ebe0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x195ec30[shape=record, label="  ret void"];
	Node0x195dbb0 -> Node0x195dc20;
	Node0x195dc20 -> Node0x195dce0;
	Node0x195dce0 -> Node0x195dd50;
	Node0x195dd50 -> Node0x195ddc0;
	Node0x195ddc0 -> Node0x195de30;
	Node0x195de30 -> Node0x195dea0;
	Node0x195dea0 -> Node0x195df10;
	Node0x195df10 -> Node0x195df80;
	Node0x195df80 -> Node0x195e020;
	Node0x195e020 -> Node0x195e090;
	Node0x195e090 -> Node0x195e130;
	Node0x195e130 -> Node0x195e1a0;
	Node0x195e1a0 -> Node0x195e210;
	Node0x195e210 -> Node0x195e2b0;
	Node0x195e2b0 -> Node0x195e320;
	Node0x195e320 -> Node0x195e3c0;
	Node0x195e3c0 -> Node0x195e430;
	Node0x195e430 -> Node0x195e4a0;
	Node0x195e4a0 -> Node0x195e510;
	Node0x195e510 -> Node0x195e580;
	Node0x195e580 -> Node0x195e5f0;
	Node0x195e5f0 -> Node0x195e660;
	Node0x195e660 -> Node0x195e6d0;
	Node0x195e6d0 -> Node0x195e740;
	Node0x195e740 -> Node0x18fe268;
	Node0x18fe268 -> Node0x195ebe0;
	Node0x195ebe0 -> Node0x195ec30;
edge [color=red]
	Node0x195dce0 -> Node0x195dd50;
	Node0x195dc20 -> Node0x195ddc0;
	Node0x195dd50 -> Node0x195ddc0;
	Node0x195dce0 -> Node0x195de30;
	Node0x195de30 -> Node0x195dea0;
	Node0x195dbb0 -> Node0x195df10;
	Node0x195df10 -> Node0x195df80;
	Node0x195dc20 -> Node0x195e090;
	Node0x195e090 -> Node0x195e130;
	Node0x195e1a0 -> Node0x195e210;
	Node0x195df10 -> Node0x195e2b0;
	Node0x195e320 -> Node0x195e3c0;
	Node0x195ddc0 -> Node0x195e430;
	Node0x195df80 -> Node0x195e430;
	Node0x195e430 -> Node0x195e4a0;
	Node0x195e020 -> Node0x195e4a0;
	Node0x195e4a0 -> Node0x195e510;
	Node0x195e210 -> Node0x195e510;
	Node0x195e510 -> Node0x195e580;
	Node0x195dea0 -> Node0x195e580;
	Node0x195e580 -> Node0x195e5f0;
	Node0x195e2b0 -> Node0x195e5f0;
	Node0x195e5f0 -> Node0x195e660;
	Node0x195e3c0 -> Node0x195e660;
	Node0x195e660 -> Node0x195e6d0;
	Node0x195e130 -> Node0x195e6d0;
	Node0x195e6d0 -> Node0x195e740;
	Node0x195dbb0 -> Node0x195e740;
	Node0x195e740 -> Node0x18fe268;
	Node0x18fe268 -> Node0x195ebe0;
}
