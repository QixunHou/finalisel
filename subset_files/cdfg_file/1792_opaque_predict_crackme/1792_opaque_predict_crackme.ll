; ModuleID = '../.././c_source_file/1792_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1792_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %4, %3
  %8 = and i32 %1, %0
  %9 = or i32 %8, %2
  %10 = add i32 %9, 2
  %11 = add i32 %10, %4
  %12 = add i32 %11, %7
  %13 = or i32 %6, %3
  %14 = and i32 %6, %3
  %15 = shl i32 %14, 1
  %16 = xor i32 %15, -2
  %17 = xor i32 %3, -1
  %18 = or i32 %4, %3
  %19 = xor i32 %18, -1
  %20 = add i32 %18, 1
  %21 = add i32 %13, 1
  %22 = and i32 %4, %3
  %23 = xor i32 %1, %0
  %24 = xor i32 %2, %0
  %25 = and i32 %24, %23
  %26 = xor i32 %2, -1
  %27 = and i32 %26, %0
  %28 = and i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = xor i32 %27, %29
  %31 = or i32 %23, %2
  %32 = or i32 %26, %1
  %33 = xor i32 %32, -1
  %34 = or i32 %33, %0
  %35 = shl i32 %34, 1
  %36 = xor i32 %23, -1
  %37 = or i32 %26, %0
  %38 = xor i32 %37, -1
  %39 = shl i32 %38, 1
  %40 = xor i32 %0, -1
  %41 = or i32 %29, %40
  %42 = xor i32 %1, -1
  %43 = or i32 %42, %0
  %44 = and i32 %43, %26
  %45 = and i32 %28, %40
  %46 = or i32 %2, %1
  %47 = and i32 %46, %0
  %48 = or i32 %45, %47
  %49 = or i32 %36, %2
  %50 = or i32 %33, %40
  %51 = shl i32 %50, 1
  %52 = xor i32 %24, -1
  %53 = or i32 %52, %42
  %54 = xor i32 %8, -1
  %55 = and i32 %54, %2
  %56 = or i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %57, %42
  %59 = and i32 %26, %1
  %60 = xor i32 %59, -1
  %61 = and i32 %60, %40
  %62 = and i32 %42, %0
  %63 = xor i32 %62, -1
  %64 = and i32 %24, %63
  %65 = and i32 %2, %0
  %66 = xor i32 %65, %46
  %67 = or i32 %8, %26
  %68 = or i32 %8, %52
  %69 = or i32 %29, %0
  %70 = or i32 %1, %0
  %71 = xor i32 %70, %2
  %72 = xor i32 %2, %1
  %73 = xor i32 %72, -1
  %74 = or i32 %73, %0
  %75 = or i32 %72, %8
  %76 = or i32 %52, %1
  %77 = or i32 %57, %36
  %78 = and i32 %29, %0
  %79 = and i32 %63, %2
  %80 = xor i32 %43, -1
  %81 = or i32 %27, %1
  %82 = and i32 %42, %2
  %83 = and i32 %82, %40
  %84 = or i32 %72, %40
  %85 = xor i32 %84, -1
  %86 = or i32 %83, %85
  %87 = and i32 %28, %0
  %88 = and i32 %72, %40
  %89 = xor i32 %87, -1
  %90 = xor i32 %88, %89
  %91 = or i32 %27, %33
  %92 = or i32 %23, %38
  %93 = xor i32 %65, -1
  %94 = xor i32 %28, %0
  %95 = shl i32 %65, 1
  %96 = and i32 %82, %0
  %97 = or i32 %42, %2
  %98 = and i32 %97, %40
  %99 = or i32 %96, %98
  %100 = or i32 %38, %36
  %101 = xor i32 %70, -1
  %102 = or i32 %24, %101
  %103 = and i32 %46, %40
  %104 = xor i32 %103, %89
  %105 = xor i32 %93, %1
  %106 = and i32 %29, %40
  %107 = xor i32 %101, %2
  %108 = or i32 %32, %0
  %109 = and i32 %24, %42
  %110 = and i32 %37, %42
  %111 = or i32 %62, %26
  %112 = shl i32 %111, 1
  %113 = and i32 %93, %1
  %114 = and i32 %43, %2
  %115 = xor i32 %27, -1
  %116 = xor i32 %115, %1
  %117 = xor i32 %73, %0
  %118 = xor i32 %46, %0
  %119 = or i32 %87, %118
  %120 = or i32 %65, %1
  %121 = and i32 %37, %36
  %122 = xor i32 %65, %43
  %123 = and i32 %24, %54
  %124 = and i32 %72, %54
  %125 = and i32 %70, %2
  %126 = and i32 %32, %40
  %127 = and i32 %73, %40
  %128 = and i32 %72, %0
  %129 = or i32 %45, %128
  %130 = or i32 %24, %23
  %131 = or i32 %62, %52
  %132 = and i32 %24, %36
  %133 = and i32 %23, %26
  %134 = xor i32 %54, %2
  %135 = shl i32 %134, 1
  %136 = xor i32 %72, %0
  %137 = xor i32 %136, -1
  %138 = or i32 %87, %137
  %139 = or i32 %62, %2
  %140 = and i32 %93, %42
  %141 = shl i32 %140, 1
  %142 = or i32 %27, %36
  %143 = xor i32 %8, %2
  %144 = and i32 %70, %52
  %145 = and i32 %56, %36
  %146 = or i32 %65, %36
  %147 = and i32 %26, %36
  %148 = or i32 %24, %1
  %149 = or i32 %52, %80
  %150 = or i32 %65, %42
  %151 = or i32 %65, %101
  %152 = shl i32 %151, 1
  %153 = xor i32 %45, -1
  %154 = xor i32 %47, %153
  %155 = or i32 %24, %80
  %156 = xor i32 %37, %1
  %157 = shl i32 %156, 1
  %158 = xor i32 %118, %89
  %159 = and i32 %72, %63
  %160 = or i32 %87, %103
  %161 = xor i32 %46, -1
  %162 = or i32 %8, %161
  %163 = and i32 %43, %73
  %164 = xor i32 %57, %1
  %165 = or i32 %26, %80
  %166 = shl i32 %165, 1
  %167 = or i32 %65, %23
  %168 = or i32 %161, %40
  %169 = or i32 %26, %101
  %170 = or i32 %52, %101
  %171 = xor i32 %59, %0
  %172 = and i32 %52, %42
  %173 = and i32 %52, %54
  %174 = shl i32 %173, 1
  %175 = xor i32 %43, %2
  %176 = xor i32 %60, %0
  %177 = xor i32 %65, %70
  %178 = or i32 %24, %36
  %179 = shl i32 %178, 1
  %180 = shl i32 %29, 1
  %181 = shl i32 %118, 1
  %182 = and i32 %56, %1
  %183 = xor i32 %83, %84
  %184 = or i32 %52, %36
  %185 = xor i32 %128, %153
  %186 = or i32 %24, %62
  %187 = shl i32 %186, 1
  %188 = or i32 %72, %80
  %189 = and i32 %60, %0
  %190 = shl i32 %189, 1
  %191 = xor i32 %87, %136
  %192 = xor i32 %63, %2
  %193 = and i32 %32, %0
  %194 = or i32 %46, %0
  %195 = and i32 %70, %73
  %196 = and i32 %23, %93
  %197 = and i32 %56, %23
  %198 = or i32 %80, %2
  %199 = and i32 %52, %36
  %200 = and i32 %26, %63
  %201 = or i32 %23, %57
  %202 = add i32 %8, 1
  %203 = or i32 %96, %136
  %204 = and i32 %56, %42
  %205 = and i32 %23, %115
  %206 = or i32 %57, %1
  %207 = or i32 %59, %62
  %208 = or i32 %60, %40
  %209 = xor i32 %27, %32
  %210 = or i32 %23, %52
  %211 = or i32 %62, %73
  %212 = shl i32 %211, 2
  %213 = xor i32 %62, %60
  %214 = or i32 %59, %40
  %215 = or i32 %87, %88
  %216 = or i32 %161, %0
  %217 = or i32 %28, %0
  %218 = add i32 %2, 1
  %219 = or i32 %8, %33
  %220 = xor i32 %97, %40
  %221 = xor i32 %220, %96
  %222 = and i32 %115, %36
  %223 = or i32 %72, %0
  %224 = or i32 %73, %40
  %225 = or i32 %101, %2
  %226 = xor i32 %96, -1
  %227 = xor i32 %98, %226
  %228 = and i32 %161, %40
  %229 = and i32 %59, %40
  %230 = shl i32 %229, 3
  %231 = and i32 %161, %0
  %232 = mul i32 %231, 22
  %233 = and i32 %59, %0
  %234 = and i32 %33, %40
  %235 = and i32 %33, %0
  %236 = add i32 %42, %0
  %237 = add i32 %236, %63
  %238 = add i32 %237, %225
  %239 = add i32 %238, %114
  %240 = add i32 %239, %60
  %241 = add i32 %240, %71
  %242 = sub i32 %241, %3
  %243 = add i32 %242, %210
  %244 = add i32 %243, %168
  %245 = add i32 %244, %163
  %246 = add i32 %245, %124
  %247 = add i32 %246, %110
  %248 = add i32 %247, %58
  %249 = add i32 %248, %48
  %250 = shl i32 %249, 1
  %251 = add i32 %234, %200
  %252 = add i32 %251, %228
  %253 = sub i32 %252, %199
  %254 = sub i32 %253, %130
  %255 = add i32 %254, %21
  %256 = sub i32 %255, %22
  %257 = mul i32 %256, 3
  %258 = add i32 %28, %20
  %259 = mul i32 %258, 7
  %260 = add i32 %223, %192
  %261 = sub i32 %260, %224
  %262 = mul i32 %261, 5
  %263 = sub i32 %235, %233
  %264 = mul i32 %263, 6
  %265 = add i32 %213, %122
  %266 = shl i32 %265, 2
  %267 = sub i32 -2, %23
  %268 = sub i32 %267, %8
  %269 = add i32 %268, %80
  %270 = add i32 %269, %202
  %271 = add i32 %270, %218
  %272 = add i32 %271, %17
  %273 = add i32 %272, %31
  %274 = sub i32 %273, %44
  %275 = add i32 %274, %49
  %276 = sub i32 %275, %55
  %277 = sub i32 %276, %67
  %278 = add i32 %277, %24
  %279 = add i32 %278, %79
  %280 = add i32 %279, %93
  %281 = sub i32 %280, %107
  %282 = sub i32 %281, %125
  %283 = sub i32 %282, %133
  %284 = sub i32 %283, %139
  %285 = add i32 %284, %143
  %286 = add i32 %285, %56
  %287 = add i32 %286, %147
  %288 = add i32 %287, %115
  %289 = sub i32 %288, %169
  %290 = sub i32 %289, %175
  %291 = add i32 %290, %198
  %292 = add i32 %291, %46
  %293 = add i32 %292, %4
  %294 = add i32 %293, %25
  %295 = add i32 %294, %30
  %296 = sub i32 %295, %39
  %297 = sub i32 %296, %41
  %298 = sub i32 %297, %53
  %299 = sub i32 %298, %61
  %300 = add i32 %299, %64
  %301 = add i32 %300, %66
  %302 = add i32 %301, %68
  %303 = sub i32 %302, %69
  %304 = add i32 %303, %74
  %305 = sub i32 %304, %75
  %306 = add i32 %305, %76
  %307 = sub i32 %306, %77
  %308 = sub i32 %307, %78
  %309 = add i32 %308, %81
  %310 = sub i32 %309, %91
  %311 = sub i32 %310, %92
  %312 = sub i32 %311, %94
  %313 = sub i32 %312, %95
  %314 = sub i32 %313, %100
  %315 = add i32 %314, %102
  %316 = sub i32 %315, %105
  %317 = sub i32 %316, %106
  %318 = add i32 %317, %108
  %319 = add i32 %318, %109
  %320 = sub i32 %319, %112
  %321 = add i32 %320, %113
  %322 = add i32 %321, %116
  %323 = add i32 %322, %117
  %324 = sub i32 %323, %120
  %325 = sub i32 %324, %121
  %326 = sub i32 %325, %123
  %327 = sub i32 %326, %126
  %328 = add i32 %327, %127
  %329 = sub i32 %328, %131
  %330 = sub i32 %329, %132
  %331 = sub i32 %330, %135
  %332 = add i32 %331, %142
  %333 = sub i32 %332, %144
  %334 = sub i32 %333, %145
  %335 = sub i32 %334, %146
  %336 = add i32 %335, %148
  %337 = add i32 %336, %149
  %338 = sub i32 %337, %150
  %339 = sub i32 %338, %155
  %340 = sub i32 %339, %159
  %341 = sub i32 %340, %162
  %342 = add i32 %341, %164
  %343 = sub i32 %342, %166
  %344 = sub i32 %343, %167
  %345 = sub i32 %344, %103
  %346 = sub i32 %345, %136
  %347 = add i32 %346, %170
  %348 = add i32 %347, %171
  %349 = sub i32 %348, %172
  %350 = add i32 %349, %176
  %351 = sub i32 %350, %177
  %352 = sub i32 %351, %180
  %353 = add i32 %352, %182
  %354 = sub i32 %353, %184
  %355 = sub i32 %354, %188
  %356 = add i32 %355, %88
  %357 = sub i32 %356, %193
  %358 = sub i32 %357, %194
  %359 = add i32 %358, %195
  %360 = sub i32 %359, %196
  %361 = add i32 %360, %197
  %362 = sub i32 %361, %201
  %363 = sub i32 %362, %204
  %364 = sub i32 %363, %205
  %365 = sub i32 %364, %206
  %366 = add i32 %365, %207
  %367 = add i32 %366, %208
  %368 = sub i32 %367, %209
  %369 = add i32 %368, %84
  %370 = add i32 %369, %47
  %371 = add i32 %370, %214
  %372 = add i32 %371, %216
  %373 = sub i32 %372, %217
  %374 = sub i32 %373, %219
  %375 = add i32 %374, %222
  %376 = sub i32 %375, %7
  %377 = add i32 %376, %13
  %378 = add i32 %377, %19
  %379 = add i32 %378, %14
  %380 = sub i32 %379, %35
  %381 = sub i32 %380, %51
  %382 = sub i32 %381, %86
  %383 = add i32 %382, %90
  %384 = sub i32 %383, %99
  %385 = sub i32 %384, %104
  %386 = sub i32 %385, %119
  %387 = sub i32 %386, %129
  %388 = sub i32 %387, %138
  %389 = sub i32 %388, %141
  %390 = sub i32 %389, %152
  %391 = sub i32 %390, %154
  %392 = sub i32 %391, %157
  %393 = add i32 %392, %158
  %394 = add i32 %393, %160
  %395 = sub i32 %394, %174
  %396 = sub i32 %395, %179
  %397 = sub i32 %396, %181
  %398 = sub i32 %397, %183
  %399 = sub i32 %398, %185
  %400 = sub i32 %399, %187
  %401 = sub i32 %400, %190
  %402 = add i32 %401, %191
  %403 = sub i32 %402, %203
  %404 = sub i32 %403, %212
  %405 = sub i32 %404, %215
  %406 = add i32 %405, %221
  %407 = sub i32 %406, %227
  %408 = add i32 %407, %230
  %409 = add i32 %408, %232
  %410 = add i32 %409, %264
  %411 = add i32 %410, %266
  %412 = add i32 %411, %16
  %413 = add i32 %412, %262
  %414 = add i32 %413, %259
  %415 = add i32 %414, %257
  %416 = add i32 %415, %250
  %417 = icmp eq i32 %12, %416
  %418 = select i1 %417, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %419 = tail call i32 @puts(i8* nonnull dereferenceable(1) %418)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
