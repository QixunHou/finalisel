; ModuleID = '../.././c_source_file/1753_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1753_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = xor i32 %2, %1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %9, %12
  %14 = xor i32 %2, -1
  %15 = and i32 %14, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %1, %0
  %18 = xor i32 %17, -1
  %19 = and i32 %16, %18
  %20 = sub i32 %6, %19
  %21 = sub i32 %20, %13
  %22 = xor i32 %4, %3
  %23 = and i32 %4, %3
  %24 = xor i32 %3, 2147483647
  %25 = and i32 %24, %4
  %26 = shl i32 %25, 1
  %27 = and i32 %1, %0
  %28 = or i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %27, %29
  %31 = and i32 %28, %0
  %32 = xor i32 %8, -1
  %33 = and i32 %32, %0
  %34 = xor i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %17, %35
  %37 = xor i32 %1, -1
  %38 = or i32 %2, %0
  %39 = and i32 %38, %37
  %40 = or i32 %14, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %1
  %43 = or i32 %14, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %7
  %46 = shl i32 %45, 1
  %47 = xor i32 %38, %1
  %48 = xor i32 %27, -1
  %49 = and i32 %34, %48
  %50 = and i32 %17, %35
  %51 = and i32 %2, %0
  %52 = or i32 %37, %0
  %53 = xor i32 %51, %52
  %54 = or i32 %34, %17
  %55 = and i32 %8, %0
  %56 = and i32 %28, %7
  %57 = xor i32 %56, 2147483647
  %58 = xor i32 %57, %55
  %59 = shl i32 %58, 1
  %60 = xor i32 %27, %2
  %61 = and i32 %14, %1
  %62 = xor i32 %61, -1
  %63 = and i32 %62, %7
  %64 = and i32 %38, %18
  %65 = and i32 %37, %0
  %66 = or i32 %65, %14
  %67 = or i32 %8, %65
  %68 = and i32 %35, %37
  %69 = shl i32 %68, 1
  %70 = or i32 %41, %1
  %71 = or i32 %43, %7
  %72 = shl i32 %71, 1
  %73 = xor i32 %52, -1
  %74 = xor i32 %73, %2
  %75 = or i32 %51, %73
  %76 = or i32 %1, %0
  %77 = and i32 %10, %76
  %78 = xor i32 %38, -1
  %79 = or i32 %78, %37
  %80 = or i32 %51, %17
  %81 = xor i32 %76, -1
  %82 = or i32 %34, %81
  %83 = or i32 %35, %37
  %84 = shl i32 %83, 1
  %85 = or i32 %29, %7
  %86 = shl i32 %34, 1
  %87 = and i32 %34, %76
  %88 = or i32 %34, %27
  %89 = and i32 %34, %1
  %90 = or i32 %44, %0
  %91 = or i32 %14, %73
  %92 = or i32 %27, %44
  %93 = xor i32 %43, %0
  %94 = and i32 %37, %2
  %95 = and i32 %94, %7
  %96 = or i32 %10, %7
  %97 = xor i32 %95, %96
  %98 = xor i32 %65, -1
  %99 = xor i32 %98, %2
  %100 = shl i32 %99, 1
  %101 = and i32 %17, %2
  %102 = xor i32 %10, -1
  %103 = and i32 %102, %0
  %104 = shl i32 %103, 2
  %105 = and i32 %38, %1
  %106 = shl i32 %105, 1
  %107 = or i32 %10, %81
  %108 = or i32 %29, %0
  %109 = or i32 %14, %18
  %110 = or i32 %15, %8
  %111 = or i32 %61, %7
  %112 = shl i32 %111, 1
  %113 = or i32 %15, %37
  %114 = xor i32 %28, %0
  %115 = and i32 %34, %98
  %116 = and i32 %102, %98
  %117 = or i32 %102, %73
  %118 = and i32 %94, %0
  %119 = xor i32 %10, %0
  %120 = or i32 %118, %119
  %121 = or i32 %10, %27
  %122 = or i32 %17, %78
  %123 = or i32 %37, %2
  %124 = xor i32 %123, %0
  %125 = or i32 %118, %124
  %126 = xor i32 %15, %43
  %127 = or i32 %18, %2
  %128 = and i32 %35, %48
  %129 = or i32 %15, %18
  %130 = and i32 %10, %48
  %131 = and i32 %52, %102
  %132 = xor i32 %65, %2
  %133 = or i32 %27, %2
  %134 = or i32 %10, %73
  %135 = and i32 %102, %48
  %136 = or i32 %51, %37
  %137 = add i32 %76, 1
  %138 = or i32 %34, %37
  %139 = xor i32 %51, %62
  %140 = add i32 %1, 1
  %141 = and i32 %35, %1
  %142 = xor i32 %43, %27
  %143 = or i32 %10, %0
  %144 = xor i32 %118, %143
  %145 = or i32 %55, %114
  %146 = xor i32 %16, %1
  %147 = xor i32 %119, -1
  %148 = or i32 %55, %147
  %149 = or i32 %102, %81
  %150 = or i32 %43, %0
  %151 = and i32 %10, %7
  %152 = or i32 %55, %151
  %153 = xor i32 %55, %119
  %154 = xor i32 %51, %28
  %155 = and i32 %32, %7
  %156 = or i32 %15, %1
  %157 = or i32 %14, %81
  %158 = xor i32 %78, %1
  %159 = or i32 %51, %1
  %160 = shl i32 %159, 1
  %161 = xor i32 %44, %0
  %162 = and i32 %40, %1
  %163 = and i32 %17, %16
  %164 = and i32 %14, %18
  %165 = or i32 %35, %73
  %166 = or i32 %15, %17
  %167 = or i32 %28, %7
  %168 = or i32 %35, %1
  %169 = xor i32 %51, %76
  %170 = or i32 %28, %0
  %171 = xor i32 %32, %0
  %172 = or i32 %15, %44
  %173 = xor i32 %96, -1
  %174 = or i32 %95, %173
  %175 = xor i32 %114, -1
  %176 = xor i32 %55, %175
  %177 = or i32 %17, %14
  %178 = xor i32 %29, %0
  %179 = and i32 %48, %2
  %180 = add i32 %40, 1
  %181 = and i32 %123, %0
  %182 = or i32 %95, %181
  %183 = xor i32 %65, %32
  %184 = or i32 %61, %65
  %185 = xor i32 %15, %1
  %186 = and i32 %14, %98
  %187 = xor i32 %102, %0
  %188 = or i32 %65, %35
  %189 = and i32 %43, %0
  %190 = xor i32 %65, %62
  %191 = or i32 %17, %2
  %192 = or i32 %65, %2
  %193 = shl i32 %192, 2
  %194 = and i32 %10, %98
  %195 = or i32 %27, %41
  %196 = and i32 %76, %102
  %197 = or i32 %78, %1
  %198 = and i32 %76, %14
  %199 = and i32 %123, %7
  %200 = or i32 %118, %199
  %201 = or i32 %62, %0
  %202 = shl i32 %201, 1
  %203 = or i32 %55, %56
  %204 = or i32 %34, %65
  %205 = xor i32 %143, -1
  %206 = or i32 %118, %205
  %207 = or i32 %51, %18
  %208 = and i32 %35, %98
  %209 = or i32 %27, %14
  %210 = and i32 %14, %48
  %211 = or i32 %102, %7
  %212 = or i32 %8, %7
  %213 = and i32 %34, %18
  %214 = and i32 %34, %52
  %215 = xor i32 %51, %1
  %216 = or i32 %32, %7
  %217 = xor i32 %51, -1
  %218 = and i32 %217, %18
  %219 = and i32 %102, %7
  %220 = shl i32 %219, 1
  %221 = and i32 %40, %17
  %222 = xor i32 %52, %2
  %223 = or i32 %78, %18
  %224 = shl i32 %223, 2
  %225 = xor i32 %28, %27
  %226 = and i32 %98, %2
  %227 = and i32 %76, %35
  %228 = shl i32 %227, 1
  %229 = and i32 %18, %2
  %230 = or i32 %62, %7
  %231 = and i32 %35, %18
  %232 = shl i32 %2, 1
  %233 = and i32 %16, %37
  %234 = xor i32 %61, %0
  %235 = shl i32 %234, 1
  %236 = or i32 %10, %65
  %237 = and i32 %17, %217
  %238 = or i32 %27, %35
  %239 = and i32 %52, %14
  %240 = xor i32 %48, %2
  %241 = or i32 %9, %11
  %242 = and i32 %43, %7
  %243 = and i32 %62, %0
  %244 = or i32 %41, %18
  %245 = or i32 %51, %61
  %246 = xor i32 %118, %147
  %247 = add i32 %51, 1
  %248 = or i32 %65, %102
  %249 = xor i32 %40, %1
  %250 = or i32 %51, %81
  %251 = xor i32 %40, %27
  %252 = add i32 %15, 1
  %253 = xor i32 %217, %1
  %254 = xor i32 %38, %27
  %255 = and i32 %38, %17
  %256 = and i32 %29, %7
  %257 = mul i32 %256, 6
  %258 = and i32 %61, %7
  %259 = mul i32 %258, 19
  %260 = and i32 %29, %0
  %261 = shl i32 %260, 1
  %262 = and i32 %61, %0
  %263 = mul i32 %262, 11
  %264 = and i32 %44, %7
  %265 = and i32 %44, %0
  %266 = mul i32 %55, 18
  %267 = add i32 %9, %209
  %268 = add i32 %267, %233
  %269 = sub i32 %268, %194
  %270 = add i32 %269, %49
  %271 = add i32 %270, %23
  %272 = mul i32 %271, 3
  %273 = add i32 %265, %264
  %274 = mul i32 %273, 13
  %275 = add i32 %146, %139
  %276 = shl i32 %275, 2
  %277 = add i32 %108, %109
  %278 = mul i32 %277, -5
  %279 = sub i32 -2, %43
  %280 = add i32 %279, %210
  %281 = add i32 %280, %38
  %282 = add i32 %281, %133
  %283 = add i32 %282, %91
  %284 = add i32 %283, %187
  %285 = add i32 %284, %184
  %286 = add i32 %285, %156
  %287 = add i32 %286, %149
  %288 = add i32 %287, %142
  %289 = add i32 %288, %138
  %290 = add i32 %289, %82
  %291 = add i32 %290, %63
  %292 = add i32 %291, %33
  %293 = add i32 %292, %152
  %294 = add i32 %293, %22
  %295 = shl i32 %294, 1
  %296 = sub i32 2, %0
  %297 = add i32 %296, %140
  %298 = add i32 %297, %1
  %299 = add i32 %298, %17
  %300 = add i32 %299, %137
  %301 = add i32 %300, 1
  %302 = sub i32 %301, %27
  %303 = sub i32 %302, %3
  %304 = add i32 %303, %35
  %305 = add i32 %304, %60
  %306 = sub i32 %305, %43
  %307 = add i32 %306, %66
  %308 = add i32 %307, %74
  %309 = add i32 %308, %61
  %310 = add i32 %309, %8
  %311 = add i32 %310, %101
  %312 = sub i32 %311, %51
  %313 = add i32 %312, %127
  %314 = sub i32 %313, %132
  %315 = add i32 %314, %40
  %316 = sub i32 %315, %157
  %317 = add i32 %316, %164
  %318 = sub i32 %317, %177
  %319 = sub i32 %318, %179
  %320 = add i32 %319, %180
  %321 = sub i32 %320, %186
  %322 = sub i32 %321, %191
  %323 = add i32 %322, %198
  %324 = add i32 %323, %222
  %325 = sub i32 %324, %226
  %326 = sub i32 %325, %229
  %327 = sub i32 %326, %232
  %328 = sub i32 %327, %239
  %329 = add i32 %328, %240
  %330 = add i32 %329, %78
  %331 = add i32 %330, %247
  %332 = add i32 %331, %252
  %333 = sub i32 %332, %30
  %334 = sub i32 %333, %31
  %335 = sub i32 %334, %36
  %336 = sub i32 %335, %39
  %337 = sub i32 %336, %42
  %338 = sub i32 %337, %47
  %339 = add i32 %338, %50
  %340 = sub i32 %339, %53
  %341 = sub i32 %340, %54
  %342 = add i32 %341, %64
  %343 = add i32 %342, %67
  %344 = sub i32 %343, %70
  %345 = sub i32 %344, %75
  %346 = sub i32 %345, %77
  %347 = sub i32 %346, %79
  %348 = add i32 %347, %80
  %349 = sub i32 %348, %85
  %350 = sub i32 %349, %86
  %351 = add i32 %350, %87
  %352 = add i32 %351, %88
  %353 = add i32 %352, %89
  %354 = add i32 %353, %90
  %355 = sub i32 %354, %92
  %356 = add i32 %355, %93
  %357 = sub i32 %356, %100
  %358 = add i32 %357, %107
  %359 = sub i32 %358, %110
  %360 = sub i32 %359, %113
  %361 = sub i32 %360, %114
  %362 = add i32 %361, %115
  %363 = sub i32 %362, %116
  %364 = sub i32 %363, %117
  %365 = sub i32 %364, %96
  %366 = add i32 %365, %121
  %367 = sub i32 %366, %122
  %368 = add i32 %367, %126
  %369 = add i32 %368, %128
  %370 = add i32 %369, %129
  %371 = sub i32 %370, %130
  %372 = add i32 %371, %131
  %373 = sub i32 %372, %134
  %374 = add i32 %373, %135
  %375 = add i32 %374, %136
  %376 = add i32 %375, %141
  %377 = sub i32 %376, %11
  %378 = sub i32 %377, %150
  %379 = sub i32 %378, %154
  %380 = sub i32 %379, %155
  %381 = sub i32 %380, %158
  %382 = add i32 %381, %161
  %383 = sub i32 %382, %162
  %384 = add i32 %383, %163
  %385 = add i32 %384, %165
  %386 = sub i32 %385, %166
  %387 = sub i32 %386, %167
  %388 = sub i32 %387, %168
  %389 = sub i32 %388, %169
  %390 = add i32 %389, %170
  %391 = sub i32 %390, %171
  %392 = sub i32 %391, %172
  %393 = add i32 %392, %178
  %394 = sub i32 %393, %56
  %395 = sub i32 %394, %183
  %396 = add i32 %395, %185
  %397 = sub i32 %396, %188
  %398 = add i32 %397, %189
  %399 = sub i32 %398, %190
  %400 = sub i32 %399, %193
  %401 = add i32 %400, %195
  %402 = add i32 %401, %196
  %403 = add i32 %402, %197
  %404 = sub i32 %403, %204
  %405 = add i32 %404, %207
  %406 = add i32 %405, %208
  %407 = add i32 %406, %119
  %408 = sub i32 %407, %211
  %409 = add i32 %408, %212
  %410 = sub i32 %409, %213
  %411 = add i32 %410, %214
  %412 = add i32 %411, %215
  %413 = add i32 %412, %216
  %414 = add i32 %413, %218
  %415 = sub i32 %414, %221
  %416 = sub i32 %415, %225
  %417 = add i32 %416, %230
  %418 = sub i32 %417, %231
  %419 = add i32 %418, %236
  %420 = add i32 %419, %237
  %421 = sub i32 %420, %238
  %422 = sub i32 %421, %242
  %423 = add i32 %422, %243
  %424 = sub i32 %423, %244
  %425 = add i32 %424, %245
  %426 = add i32 %425, %248
  %427 = sub i32 %426, %249
  %428 = sub i32 %427, %250
  %429 = add i32 %428, %251
  %430 = add i32 %429, %151
  %431 = add i32 %430, %253
  %432 = sub i32 %431, %254
  %433 = add i32 %432, %255
  %434 = sub i32 %433, %23
  %435 = sub i32 %434, %46
  %436 = sub i32 %435, %69
  %437 = sub i32 %436, %72
  %438 = sub i32 %437, %84
  %439 = sub i32 %438, %97
  %440 = sub i32 %439, %104
  %441 = sub i32 %440, %106
  %442 = sub i32 %441, %112
  %443 = sub i32 %442, %120
  %444 = add i32 %443, %125
  %445 = add i32 %444, %144
  %446 = sub i32 %445, %145
  %447 = add i32 %446, %148
  %448 = add i32 %447, %153
  %449 = sub i32 %448, %160
  %450 = add i32 %449, %174
  %451 = sub i32 %450, %176
  %452 = add i32 %451, %182
  %453 = sub i32 %452, %200
  %454 = sub i32 %453, %202
  %455 = sub i32 %454, %203
  %456 = add i32 %455, %206
  %457 = sub i32 %456, %220
  %458 = sub i32 %457, %224
  %459 = sub i32 %458, %228
  %460 = sub i32 %459, %235
  %461 = sub i32 %460, %241
  %462 = add i32 %461, %246
  %463 = add i32 %462, %257
  %464 = add i32 %463, %259
  %465 = sub i32 %464, %261
  %466 = add i32 %465, %263
  %467 = add i32 %466, %266
  %468 = sub i32 %467, %26
  %469 = add i32 %468, %274
  %470 = add i32 %469, %276
  %471 = add i32 %470, %278
  %472 = sub i32 %471, %59
  %473 = add i32 %472, %272
  %474 = add i32 %473, %295
  %475 = icmp eq i32 %21, %474
  %476 = select i1 %475, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %477 = tail call i32 @puts(i8* nonnull dereferenceable(1) %476)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
