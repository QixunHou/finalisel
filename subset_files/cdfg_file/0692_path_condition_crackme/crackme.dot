digraph "DFG for'crackme' function" {
	Node0x59a450[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x59a4c0[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x59a580[shape=record, label="  %5 = sub i32 %4, %3"];
	Node0x59ac00[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x59ac70[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x59ace0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x59ad50[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x59adc0[shape=record, label="  %10 = or i32 %6, %0"];
	Node0x59ae60[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0x59af00[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x59afa0[shape=record, label="  %13 = mul i32 %7, -3"];
	Node0x59b010[shape=record, label="  %14 = add i32 %8, %0"];
	Node0x59b080[shape=record, label="  %15 = add i32 %14, %9"];
	Node0x59b0f0[shape=record, label="  %16 = sub i32 %15, %10"];
	Node0x59b160[shape=record, label="  %17 = add i32 %16, %3"];
	Node0x59b1d0[shape=record, label="  %18 = sub i32 %17, %4"];
	Node0x59b240[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x59b2b0[shape=record, label="  %20 = sub i32 %19, %12"];
	Node0x59b320[shape=record, label="  %21 = icmp eq i32 %5, %20"];
	Node0x53b268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x59b7c0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x59b810[shape=record, label="  ret void"];
	Node0x59a450 -> Node0x59a4c0;
	Node0x59a4c0 -> Node0x59a580;
	Node0x59a580 -> Node0x59ac00;
	Node0x59ac00 -> Node0x59ac70;
	Node0x59ac70 -> Node0x59ace0;
	Node0x59ace0 -> Node0x59ad50;
	Node0x59ad50 -> Node0x59adc0;
	Node0x59adc0 -> Node0x59ae60;
	Node0x59ae60 -> Node0x59af00;
	Node0x59af00 -> Node0x59afa0;
	Node0x59afa0 -> Node0x59b010;
	Node0x59b010 -> Node0x59b080;
	Node0x59b080 -> Node0x59b0f0;
	Node0x59b0f0 -> Node0x59b160;
	Node0x59b160 -> Node0x59b1d0;
	Node0x59b1d0 -> Node0x59b240;
	Node0x59b240 -> Node0x59b2b0;
	Node0x59b2b0 -> Node0x59b320;
	Node0x59b320 -> Node0x53b268;
	Node0x53b268 -> Node0x59b7c0;
	Node0x59b7c0 -> Node0x59b810;
edge [color=red]
	Node0x59a4c0 -> Node0x59a580;
	Node0x59a450 -> Node0x59a580;
	Node0x59ac00 -> Node0x59ac70;
	Node0x59ac70 -> Node0x59ace0;
	Node0x59ac00 -> Node0x59adc0;
	Node0x59adc0 -> Node0x59ae60;
	Node0x59ae60 -> Node0x59af00;
	Node0x59ac70 -> Node0x59afa0;
	Node0x59ace0 -> Node0x59b010;
	Node0x59b010 -> Node0x59b080;
	Node0x59ad50 -> Node0x59b080;
	Node0x59b080 -> Node0x59b0f0;
	Node0x59adc0 -> Node0x59b0f0;
	Node0x59b0f0 -> Node0x59b160;
	Node0x59a450 -> Node0x59b160;
	Node0x59b160 -> Node0x59b1d0;
	Node0x59a4c0 -> Node0x59b1d0;
	Node0x59b1d0 -> Node0x59b240;
	Node0x59afa0 -> Node0x59b240;
	Node0x59b240 -> Node0x59b2b0;
	Node0x59af00 -> Node0x59b2b0;
	Node0x59a580 -> Node0x59b320;
	Node0x59b2b0 -> Node0x59b320;
	Node0x59b320 -> Node0x53b268;
	Node0x53b268 -> Node0x59b7c0;
}
