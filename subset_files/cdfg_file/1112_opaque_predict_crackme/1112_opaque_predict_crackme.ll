; ModuleID = '../.././c_source_file/1112_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1112_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %2, %0
  %6 = or i32 %5, %4
  %7 = xor i32 %0, -1
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %2
  %10 = and i32 %9, %7
  %11 = xor i32 %2, %1
  %12 = or i32 %11, %7
  %13 = xor i32 %12, 2147483647
  %14 = or i32 %13, %10
  %15 = xor i32 %5, -1
  %16 = and i32 %15, %8
  %17 = and i32 %9, %0
  %18 = or i32 %8, %2
  %19 = and i32 %18, %7
  %20 = or i32 %17, %19
  %21 = xor i32 %2, -1
  %22 = or i32 %21, %0
  %23 = xor i32 %22, -1
  %24 = or i32 %23, %1
  %25 = xor i32 %11, -1
  %26 = and i32 %25, %7
  %27 = and i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %0
  %30 = shl i32 %29, 1
  %31 = shl i32 %27, 1
  %32 = or i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %33, %8
  %35 = shl i32 %34, 1
  %36 = and i32 %2, %0
  %37 = and i32 %21, %1
  %38 = xor i32 %37, -1
  %39 = xor i32 %36, %38
  %40 = shl i32 %39, 2
  %41 = xor i32 %17, -1
  %42 = xor i32 %19, %41
  %43 = and i32 %8, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %44, %2
  %46 = shl i32 %23, 1
  %47 = xor i32 %4, -1
  %48 = and i32 %32, %47
  %49 = or i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %0
  %52 = and i32 %21, %0
  %53 = xor i32 %52, %1
  %54 = and i32 %1, %0
  %55 = or i32 %54, %33
  %56 = and i32 %27, %0
  %57 = and i32 %11, %7
  %58 = or i32 %56, %57
  %59 = or i32 %15, %47
  %60 = shl i32 %59, 2
  %61 = xor i32 %54, -1
  %62 = and i32 %15, %61
  %63 = xor i32 %33, %1
  %64 = or i32 %1, %0
  %65 = xor i32 %64, %2
  %66 = or i32 %21, %1
  %67 = or i32 %66, %0
  %68 = and i32 %25, %0
  %69 = and i32 %49, %7
  %70 = xor i32 %57, -1
  %71 = xor i32 %56, %70
  %72 = and i32 %21, %47
  %73 = or i32 %8, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %25, %74
  %76 = xor i32 %18, %0
  %77 = or i32 %17, %76
  %78 = or i32 %38, %7
  %79 = or i32 %15, %8
  %80 = and i32 %64, %25
  %81 = and i32 %5, %73
  %82 = xor i32 %64, -1
  %83 = or i32 %5, %82
  %84 = xor i32 %66, %0
  %85 = xor i32 %25, %0
  %86 = and i32 %11, %64
  %87 = or i32 %5, %74
  %88 = or i32 %82, %2
  %89 = or i32 %21, %74
  %90 = and i32 %22, %8
  %91 = xor i32 %11, %0
  %92 = or i32 %17, %91
  %93 = or i32 %36, %47
  %94 = and i32 %18, %0
  %95 = or i32 %10, %94
  %96 = or i32 %4, %33
  %97 = and i32 %22, %4
  %98 = xor i32 %36, -1
  %99 = and i32 %98, %1
  %100 = shl i32 %99, 1
  %101 = or i32 %5, %1
  %102 = xor i32 %76, %41
  %103 = shl i32 %43, 1
  %104 = xor i32 %36, %73
  %105 = shl i32 %104, 1
  %106 = shl i32 %0, 1
  %107 = xor i32 %52, %66
  %108 = or i32 %27, %7
  %109 = or i32 %43, %21
  %110 = and i32 %5, %47
  %111 = and i32 %27, %7
  %112 = and i32 %49, %0
  %113 = or i32 %111, %112
  %114 = or i32 %4, %2
  %115 = or i32 %54, %21
  %116 = or i32 %56, %69
  %117 = xor i32 %10, %12
  %118 = xor i32 %66, -1
  %119 = xor i32 %118, %0
  %120 = xor i32 %32, %54
  %121 = or i32 %5, %43
  %122 = shl i32 %121, 1
  %123 = or i32 %54, %15
  %124 = add i32 %5, 1
  %125 = or i32 %74, %2
  %126 = or i32 %52, %27
  %127 = or i32 %52, %4
  %128 = and i32 %22, %47
  %129 = and i32 %98, %47
  %130 = and i32 %15, %1
  %131 = xor i32 %52, -1
  %132 = xor i32 %131, %1
  %133 = and i32 %11, %0
  %134 = and i32 %64, %2
  %135 = xor i32 %56, %91
  %136 = and i32 %28, %7
  %137 = xor i32 %37, %7
  %138 = xor i32 %74, %2
  %139 = shl i32 %138, 1
  %140 = xor i32 %61, %2
  %141 = or i32 %52, %8
  %142 = or i32 %11, %0
  %143 = shl i32 %142, 1
  %144 = xor i32 %69, 2147483647
  %145 = xor i32 %144, %56
  %146 = or i32 %43, %25
  %147 = or i32 %36, %74
  %148 = and i32 %5, %44
  %149 = xor i32 %36, %1
  %150 = and i32 %5, %61
  %151 = and i32 %73, %21
  %152 = shl i32 %151, 1
  %153 = add i32 %27, 1
  %154 = or i32 %52, %1
  %155 = and i32 %131, %47
  %156 = or i32 %118, %0
  %157 = shl i32 %73, 1
  %158 = and i32 %131, %1
  %159 = and i32 %64, %15
  %160 = xor i32 %32, %1
  %161 = and i32 %47, %2
  %162 = and i32 %98, %8
  %163 = or i32 %25, %7
  %164 = xor i32 %27, %0
  %165 = or i32 %118, %7
  %166 = shl i32 %165, 1
  %167 = xor i32 %94, -1
  %168 = xor i32 %10, %167
  %169 = or i32 %54, %50
  %170 = or i32 %15, %1
  %171 = or i32 %4, %23
  %172 = or i32 %36, %8
  %173 = shl i32 %52, 1
  %174 = or i32 %54, %2
  %175 = shl i32 %174, 2
  %176 = or i32 %15, %74
  %177 = or i32 %37, %0
  %178 = and i32 %32, %1
  %179 = or i32 %25, %0
  %180 = or i32 %11, %74
  %181 = and i32 %131, %8
  %182 = and i32 %32, %4
  %183 = and i32 %38, %7
  %184 = shl i32 %183, 1
  %185 = and i32 %32, %8
  %186 = shl i32 %185, 1
  %187 = or i32 %27, %0
  %188 = and i32 %11, %61
  %189 = xor i32 %73, %2
  %190 = or i32 %23, %47
  %191 = or i32 %33, %1
  %192 = or i32 %38, %0
  %193 = shl i32 %192, 1
  %194 = or i32 %43, %2
  %195 = and i32 %5, %8
  %196 = or i32 %37, %43
  %197 = and i32 %25, %61
  %198 = shl i32 %197, 1
  %199 = xor i32 %91, -1
  %200 = or i32 %56, %199
  %201 = or i32 %21, %82
  %202 = or i32 %50, %7
  %203 = or i32 %47, %2
  %204 = xor i32 %36, %49
  %205 = xor i32 %43, %28
  %206 = xor i32 %22, %54
  %207 = or i32 %54, %23
  %208 = or i32 %11, %54
  %209 = and i32 %66, %0
  %210 = shl i32 %37, 1
  %211 = and i32 %37, %7
  %212 = and i32 %50, %0
  %213 = and i32 %37, %0
  %214 = mul i32 %213, 9
  %215 = and i32 %118, %7
  %216 = add i32 %32, %50
  %217 = add i32 %216, %125
  %218 = add i32 %217, %114
  %219 = add i32 %218, %109
  %220 = add i32 %219, %89
  %221 = add i32 %220, %65
  %222 = add i32 %221, %206
  %223 = add i32 %222, %176
  %224 = add i32 %223, %172
  %225 = add i32 %224, %149
  %226 = add i32 %225, %12
  %227 = add i32 %226, %91
  %228 = add i32 %227, %108
  %229 = add i32 %228, %97
  %230 = add i32 %229, %69
  %231 = add i32 %230, %53
  %232 = add i32 %231, %14
  %233 = add i32 %232, %145
  %234 = shl i32 %233, 1
  %235 = sub i32 %212, %56
  %236 = sub i32 %235, %170
  %237 = add i32 %236, %158
  %238 = add i32 %237, %155
  %239 = mul i32 %238, 3
  %240 = sub i32 %21, %55
  %241 = sub i32 %240, %215
  %242 = mul i32 %241, 5
  %243 = add i32 %111, %211
  %244 = mul i32 %243, -12
  %245 = sub i32 -2, %0
  %246 = sub i32 %245, %106
  %247 = sub i32 %246, %4
  %248 = add i32 %247, %82
  %249 = sub i32 %248, %54
  %250 = add i32 %249, %61
  %251 = sub i32 %250, %2
  %252 = add i32 %251, %11
  %253 = sub i32 %252, %45
  %254 = sub i32 %253, %72
  %255 = add i32 %254, %88
  %256 = sub i32 %255, %103
  %257 = sub i32 %256, %5
  %258 = add i32 %257, %115
  %259 = add i32 %258, %124
  %260 = add i32 %259, %38
  %261 = sub i32 %260, %66
  %262 = add i32 %261, %134
  %263 = add i32 %262, %140
  %264 = add i32 %263, %153
  %265 = sub i32 %264, %157
  %266 = add i32 %265, %161
  %267 = add i32 %266, %36
  %268 = add i32 %267, %118
  %269 = sub i32 %268, %189
  %270 = sub i32 %269, %194
  %271 = sub i32 %270, %201
  %272 = add i32 %271, %22
  %273 = add i32 %272, %203
  %274 = add i32 %273, %16
  %275 = add i32 %274, %24
  %276 = add i32 %275, %26
  %277 = sub i32 %276, %31
  %278 = sub i32 %277, %46
  %279 = sub i32 %278, %48
  %280 = add i32 %279, %51
  %281 = sub i32 %280, %62
  %282 = sub i32 %281, %63
  %283 = sub i32 %282, %67
  %284 = sub i32 %283, %68
  %285 = sub i32 %284, %75
  %286 = sub i32 %285, %78
  %287 = sub i32 %286, %79
  %288 = sub i32 %287, %80
  %289 = sub i32 %288, %81
  %290 = add i32 %289, %83
  %291 = add i32 %290, %84
  %292 = add i32 %291, %85
  %293 = sub i32 %292, %86
  %294 = add i32 %293, %87
  %295 = sub i32 %294, %90
  %296 = sub i32 %295, %93
  %297 = add i32 %296, %96
  %298 = add i32 %297, %101
  %299 = sub i32 %298, %107
  %300 = sub i32 %299, %110
  %301 = add i32 %300, %119
  %302 = add i32 %301, %120
  %303 = add i32 %302, %123
  %304 = add i32 %303, %126
  %305 = sub i32 %304, %127
  %306 = sub i32 %305, %128
  %307 = add i32 %306, %129
  %308 = add i32 %307, %130
  %309 = sub i32 %308, %132
  %310 = sub i32 %309, %133
  %311 = add i32 %310, %136
  %312 = add i32 %311, %137
  %313 = sub i32 %312, %139
  %314 = add i32 %313, %141
  %315 = sub i32 %314, %146
  %316 = sub i32 %315, %147
  %317 = sub i32 %316, %148
  %318 = sub i32 %317, %150
  %319 = sub i32 %318, %152
  %320 = sub i32 %319, %154
  %321 = sub i32 %320, %57
  %322 = add i32 %321, %156
  %323 = add i32 %322, %159
  %324 = sub i32 %323, %160
  %325 = sub i32 %324, %162
  %326 = add i32 %325, %163
  %327 = add i32 %326, %164
  %328 = add i32 %327, %169
  %329 = sub i32 %328, %171
  %330 = sub i32 %329, %173
  %331 = add i32 %330, %175
  %332 = sub i32 %331, %177
  %333 = add i32 %332, %178
  %334 = add i32 %333, %179
  %335 = add i32 %334, %180
  %336 = sub i32 %335, %181
  %337 = sub i32 %336, %182
  %338 = sub i32 %337, %187
  %339 = add i32 %338, %188
  %340 = sub i32 %339, %190
  %341 = add i32 %340, %191
  %342 = sub i32 %341, %195
  %343 = add i32 %342, %196
  %344 = add i32 %343, %202
  %345 = add i32 %344, %204
  %346 = add i32 %345, %205
  %347 = add i32 %346, %207
  %348 = sub i32 %347, %208
  %349 = sub i32 %348, %209
  %350 = sub i32 %349, %210
  %351 = add i32 %350, %20
  %352 = sub i32 %351, %30
  %353 = sub i32 %352, %35
  %354 = sub i32 %353, %40
  %355 = sub i32 %354, %42
  %356 = sub i32 %355, %58
  %357 = sub i32 %356, %60
  %358 = add i32 %357, %71
  %359 = add i32 %358, %77
  %360 = add i32 %359, %92
  %361 = add i32 %360, %95
  %362 = sub i32 %361, %100
  %363 = sub i32 %362, %102
  %364 = sub i32 %363, %105
  %365 = add i32 %364, %113
  %366 = add i32 %365, %116
  %367 = sub i32 %366, %117
  %368 = sub i32 %367, %122
  %369 = add i32 %368, %135
  %370 = sub i32 %369, %143
  %371 = sub i32 %370, %166
  %372 = add i32 %371, %168
  %373 = sub i32 %372, %184
  %374 = sub i32 %373, %186
  %375 = sub i32 %374, %193
  %376 = sub i32 %375, %198
  %377 = sub i32 %376, %200
  %378 = add i32 %377, %214
  %379 = add i32 %378, %244
  %380 = add i32 %379, %242
  %381 = add i32 %380, %239
  %382 = add i32 %381, %234
  %383 = icmp eq i32 %6, %382
  %384 = select i1 %383, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %385 = tail call i32 @puts(i8* nonnull dereferenceable(1) %384)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
