; ModuleID = '../.././c_source_file/1890_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1890_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = xor i32 %0, -1
  %13 = and i32 %2, %1
  %14 = or i32 %13, %12
  %15 = sub i32 %11, %14
  %16 = xor i32 %5, -1
  %17 = or i32 %16, %4
  %18 = xor i32 %4, %3
  %19 = and i32 %17, %18
  %20 = sub i32 %15, %19
  %21 = and i32 %2, %0
  %22 = xor i32 %21, %1
  %23 = xor i32 %2, -1
  %24 = and i32 %23, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %25, %1
  %27 = xor i32 %21, -1
  %28 = add i32 %21, 1
  %29 = or i32 %2, %1
  %30 = or i32 %29, %12
  %31 = or i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %32, %2
  %34 = xor i32 %2, %0
  %35 = or i32 %34, %7
  %36 = xor i32 %34, -1
  %37 = or i32 %36, %1
  %38 = xor i32 %8, -1
  %39 = or i32 %36, %38
  %40 = xor i32 %13, -1
  %41 = xor i32 %40, %0
  %42 = or i32 %23, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %43, %45
  %47 = and i32 %34, %45
  %48 = and i32 %23, %1
  %49 = xor i32 %48, %0
  %50 = xor i32 %29, -1
  %51 = or i32 %50, %0
  %52 = and i32 %7, %0
  %53 = or i32 %9, %52
  %54 = xor i32 %52, -1
  %55 = or i32 %43, %7
  %56 = or i32 %34, %1
  %57 = shl i32 %56, 1
  %58 = or i32 %52, %36
  %59 = and i32 %34, %31
  %60 = or i32 %23, %1
  %61 = and i32 %60, %0
  %62 = or i32 %2, %0
  %63 = and i32 %62, %7
  %64 = and i32 %13, %12
  %65 = and i32 %9, %0
  %66 = or i32 %64, %65
  %67 = xor i32 %48, -1
  %68 = and i32 %67, %0
  %69 = or i32 %24, %1
  %70 = and i32 %29, %0
  %71 = or i32 %64, %70
  %72 = and i32 %42, %45
  %73 = and i32 %1, %0
  %74 = xor i32 %62, -1
  %75 = or i32 %73, %74
  %76 = or i32 %23, %38
  %77 = shl i32 %29, 1
  %78 = and i32 %34, %54
  %79 = or i32 %36, %45
  %80 = shl i32 %79, 1
  %81 = or i32 %45, %2
  %82 = and i32 %7, %2
  %83 = and i32 %82, %0
  %84 = xor i32 %9, %0
  %85 = xor i32 %83, -1
  %86 = xor i32 %84, %85
  %87 = or i32 %73, %36
  %88 = shl i32 %87, 1
  %89 = and i32 %27, %7
  %90 = shl i32 %89, 1
  %91 = xor i32 %60, -1
  %92 = or i32 %73, %23
  %93 = or i32 %7, %2
  %94 = xor i32 %93, %0
  %95 = xor i32 %94, %85
  %96 = or i32 %38, %2
  %97 = xor i32 %42, %73
  %98 = shl i32 %97, 1
  %99 = and i32 %36, %1
  %100 = and i32 %40, %12
  %101 = and i32 %34, %8
  %102 = and i32 %67, %12
  %103 = and i32 %60, %12
  %104 = and i32 %82, %12
  %105 = or i32 %9, %12
  %106 = xor i32 %105, 2147483647
  %107 = or i32 %106, %104
  %108 = shl i32 %107, 1
  %109 = or i32 %52, %10
  %110 = or i32 %74, %1
  %111 = add i32 %48, 1
  %112 = or i32 %34, %45
  %113 = xor i32 %42, %1
  %114 = xor i32 %50, %0
  %115 = xor i32 %64, -1
  %116 = xor i32 %70, %115
  %117 = xor i32 %24, %60
  %118 = shl i32 %117, 1
  %119 = or i32 %24, %7
  %120 = and i32 %10, %0
  %121 = or i32 %9, %0
  %122 = xor i32 %121, -1
  %123 = or i32 %83, %122
  %124 = and i32 %13, %0
  %125 = and i32 %9, %12
  %126 = or i32 %124, %125
  %127 = or i32 %73, %91
  %128 = or i32 %23, %32
  %129 = or i32 %73, %10
  %130 = or i32 %34, %38
  %131 = shl i32 %130, 1
  %132 = or i32 %36, %7
  %133 = and i32 %31, %10
  %134 = shl i32 %133, 1
  %135 = xor i32 %65, %115
  %136 = or i32 %48, %52
  %137 = xor i32 %73, -1
  %138 = and i32 %137, %2
  %139 = add i32 %9, 1
  %140 = and i32 %62, %44
  %141 = or i32 %44, %23
  %142 = and i32 %23, %137
  %143 = or i32 %60, %12
  %144 = xor i32 %93, -1
  %145 = or i32 %144, %0
  %146 = xor i32 %83, %145
  %147 = or i32 %21, %48
  %148 = and i32 %44, %23
  %149 = shl i32 %148, 1
  %150 = xor i32 %21, %31
  %151 = xor i32 %31, %2
  %152 = and i32 %25, %7
  %153 = or i32 %24, %13
  %154 = and i32 %23, %45
  %155 = xor i32 %10, %0
  %156 = or i32 %44, %36
  %157 = or i32 %52, %23
  %158 = xor i32 %29, %0
  %159 = xor i32 %158, -1
  %160 = xor i32 %124, %159
  %161 = and i32 %44, %25
  %162 = or i32 %43, %1
  %163 = and i32 %44, %27
  %164 = or i32 %40, %12
  %165 = or i32 %73, %2
  %166 = shl i32 %165, 1
  %167 = or i32 %34, %73
  %168 = or i32 %83, %94
  %169 = and i32 %36, %54
  %170 = and i32 %31, %36
  %171 = xor i32 %29, %73
  %172 = xor i32 %52, %40
  %173 = shl i32 %172, 1
  %174 = or i32 %9, %38
  %175 = or i32 %124, %158
  %176 = or i32 %24, %91
  %177 = or i32 %24, %45
  %178 = xor i32 %24, %40
  %179 = or i32 %10, %12
  %180 = xor i32 %67, %0
  %181 = or i32 %73, %50
  %182 = or i32 %21, %1
  %183 = and i32 %9, %137
  %184 = and i32 %62, %1
  %185 = shl i32 %184, 1
  %186 = and i32 %42, %1
  %187 = shl i32 %52, 2
  %188 = xor i32 %62, %73
  %189 = shl i32 %188, 1
  %190 = and i32 %31, %2
  %191 = and i32 %54, %2
  %192 = shl i32 %191, 1
  %193 = xor i32 %62, %1
  %194 = or i32 %24, %44
  %195 = xor i32 %52, %2
  %196 = xor i32 %25, %1
  %197 = xor i32 %83, %121
  %198 = add i32 %73, 1
  %199 = or i32 %52, %2
  %200 = and i32 %25, %45
  %201 = or i32 %83, %84
  %202 = and i32 %10, %12
  %203 = add i32 %34, 1
  %204 = xor i32 %21, %29
  %205 = xor i32 %24, %1
  %206 = or i32 %9, %32
  %207 = shl i32 %206, 1
  %208 = and i32 %34, %1
  %209 = shl i32 %208, 1
  %210 = and i32 %40, %0
  %211 = and i32 %9, %8
  %212 = or i32 %44, %2
  %213 = or i32 %91, %12
  %214 = and i32 %29, %12
  %215 = or i32 %124, %214
  %216 = and i32 %50, %12
  %217 = and i32 %48, %12
  %218 = mul i32 %217, 13
  %219 = and i32 %50, %0
  %220 = mul i32 %219, 17
  %221 = and i32 %48, %0
  %222 = mul i32 %221, 9
  %223 = and i32 %91, %12
  %224 = and i32 %91, %0
  %225 = xor i32 %17, -1
  %226 = or i32 %225, %3
  %227 = shl i32 %226, 1
  %228 = or i32 %5, %3
  %229 = xor i32 %228, -1
  %230 = add i32 %228, 1
  %231 = xor i32 %4, -1
  %232 = xor i32 %5, %3
  %233 = or i32 %232, %231
  %234 = xor i32 %5, %4
  %235 = and i32 %234, %18
  %236 = or i32 %229, %231
  %237 = and i32 %5, %4
  %238 = xor i32 %3, -1
  %239 = or i32 %238, %4
  %240 = xor i32 %239, -1
  %241 = or i32 %237, %240
  %242 = and i32 %238, %4
  %243 = xor i32 %234, -1
  %244 = or i32 %242, %243
  %245 = or i32 %232, %240
  %246 = and i32 %239, %16
  %247 = or i32 %234, %238
  %248 = and i32 %4, %3
  %249 = xor i32 %248, -1
  %250 = and i32 %243, %249
  %251 = and i32 %16, %4
  %252 = xor i32 %242, -1
  %253 = and i32 %16, %252
  %254 = or i32 %237, %3
  %255 = and i32 %16, %3
  %256 = xor i32 %255, -1
  %257 = and i32 %256, %4
  %258 = shl i32 %257, 1
  %259 = xor i32 %251, -1
  %260 = and i32 %18, %259
  %261 = add i32 %5, 1
  %262 = and i32 %234, %239
  %263 = xor i32 %228, %4
  %264 = or i32 %5, %4
  %265 = and i32 %264, %3
  %266 = and i32 %5, %3
  %267 = xor i32 %266, -1
  %268 = or i32 %267, %231
  %269 = xor i32 %232, -1
  %270 = and i32 %269, %4
  %271 = xor i32 %229, %4
  %272 = or i32 %234, %3
  %273 = and i32 %238, %5
  %274 = and i32 %273, %231
  %275 = or i32 %238, %5
  %276 = and i32 %275, %4
  %277 = or i32 %274, %276
  %278 = add i32 %234, 1
  %279 = or i32 %266, %231
  %280 = and i32 %243, %3
  %281 = or i32 %240, %5
  %282 = xor i32 %18, -1
  %283 = or i32 %237, %282
  %284 = and i32 %243, %252
  %285 = and i32 %266, %4
  %286 = xor i32 %285, -1
  %287 = xor i32 %263, %286
  %288 = xor i32 %237, -1
  %289 = xor i32 %288, %3
  %290 = shl i32 %289, 1
  %291 = xor i32 %237, %3
  %292 = and i32 %288, %282
  %293 = or i32 %248, %229
  %294 = and i32 %273, %4
  %295 = xor i32 %232, %4
  %296 = or i32 %294, %295
  %297 = or i32 %225, %238
  %298 = and i32 %17, %282
  %299 = or i32 %4, %3
  %300 = xor i32 %299, -1
  %301 = xor i32 %300, %5
  %302 = or i32 %269, %231
  %303 = and i32 %228, %231
  %304 = xor i32 %303, %286
  %305 = or i32 %269, %240
  %306 = xor i32 %240, %5
  %307 = and i32 %16, %282
  %308 = xor i32 %251, %267
  %309 = shl i32 %308, 1
  %310 = or i32 %285, %263
  %311 = and i32 %267, %4
  %312 = and i32 %234, %299
  %313 = or i32 %243, %3
  %314 = shl i32 %313, 1
  %315 = or i32 %225, %282
  %316 = xor i32 %239, %5
  %317 = and i32 %288, %238
  %318 = and i32 %234, %249
  %319 = or i32 %16, %240
  %320 = or i32 %243, %240
  %321 = and i32 %234, %252
  %322 = or i32 %248, %5
  %323 = xor i32 %252, %5
  %324 = or i32 %285, %303
  %325 = or i32 %16, %3
  %326 = xor i32 %325, %4
  %327 = or i32 %237, %229
  %328 = or i32 %255, %231
  %329 = and i32 %266, %231
  %330 = and i32 %232, %4
  %331 = or i32 %329, %330
  %332 = or i32 %251, %238
  %333 = xor i32 %264, -1
  %334 = or i32 %333, %282
  %335 = shl i32 %334, 1
  %336 = or i32 %242, %269
  %337 = and i32 %17, %3
  %338 = or i32 %237, %238
  %339 = shl i32 %256, 1
  %340 = shl i32 %242, 1
  %341 = and i32 %18, %288
  %342 = and i32 %299, %16
  %343 = or i32 %267, %4
  %344 = or i32 %232, %300
  %345 = xor i32 %249, %5
  %346 = add i32 %4, 1
  %347 = xor i32 %242, %5
  %348 = and i32 %259, %282
  %349 = or i32 %251, %18
  %350 = or i32 %229, %4
  %351 = xor i32 %325, %248
  %352 = or i32 %234, %240
  %353 = and i32 %269, %252
  %354 = and i32 %243, %238
  %355 = or i32 %242, %16
  %356 = and i32 %232, %239
  %357 = xor i32 %325, -1
  %358 = or i32 %357, %231
  %359 = shl i32 %358, 2
  %360 = or i32 %256, %231
  %361 = and i32 %232, %249
  %362 = or i32 %234, %18
  %363 = or i32 %232, %4
  %364 = xor i32 %294, %363
  %365 = and i32 %239, %243
  %366 = xor i32 %357, %4
  %367 = xor i32 %237, %256
  %368 = shl i32 %367, 1
  %369 = xor i32 %266, %4
  %370 = shl i32 %369, 1
  %371 = xor i32 %276, -1
  %372 = xor i32 %274, %371
  %373 = xor i32 %275, -1
  %374 = or i32 %373, %4
  %375 = xor i32 %294, %374
  %376 = and i32 %232, %231
  %377 = or i32 %285, %376
  %378 = xor i32 %17, %3
  %379 = or i32 %269, %4
  %380 = or i32 %232, %248
  %381 = and i32 %259, %3
  %382 = or i32 %248, %357
  %383 = shl i32 %239, 1
  %384 = and i32 %232, %252
  %385 = or i32 %333, %3
  %386 = shl i32 %385, 2
  %387 = xor i32 %237, %228
  %388 = and i32 %229, %231
  %389 = and i32 %255, %231
  %390 = and i32 %229, %4
  %391 = and i32 %255, %4
  %392 = and i32 %357, %231
  %393 = and i32 %357, %4
  %394 = add i32 %124, %212
  %395 = add i32 %394, %224
  %396 = add i32 %395, %178
  %397 = add i32 %396, %69
  %398 = add i32 %397, %63
  %399 = add i32 %398, %59
  %400 = add i32 %399, %51
  %401 = add i32 %400, %41
  %402 = add i32 %401, %26
  %403 = add i32 %402, %248
  %404 = add i32 %403, %325
  %405 = add i32 %404, %330
  %406 = add i32 %405, %362
  %407 = add i32 %406, %351
  %408 = add i32 %407, %327
  %409 = add i32 %408, %315
  %410 = add i32 %409, %305
  %411 = add i32 %410, %272
  %412 = add i32 %411, %260
  %413 = add i32 %412, %364
  %414 = shl i32 %413, 1
  %415 = add i32 %102, %8
  %416 = sub i32 %415, %47
  %417 = add i32 %416, %282
  %418 = add i32 %417, %390
  %419 = add i32 %418, %389
  %420 = sub i32 %419, %377
  %421 = mul i32 %420, 5
  %422 = add i32 %164, %64
  %423 = sub i32 %281, %422
  %424 = sub i32 %423, %349
  %425 = add i32 %424, %310
  %426 = mul i32 %425, 3
  %427 = add i32 %25, %1
  %428 = add i32 %427, %288
  %429 = add i32 %428, %285
  %430 = shl i32 %429, 2
  %431 = add i32 %391, %216
  %432 = add i32 %431, %392
  %433 = mul i32 %432, -6
  %434 = add i32 %393, %388
  %435 = mul i32 %434, 12
  %436 = sub i32 1, %0
  %437 = add i32 %436, %54
  %438 = add i32 %437, %32
  %439 = add i32 %438, %44
  %440 = add i32 %439, %2
  %441 = add i32 %440, %198
  %442 = add i32 %441, %28
  %443 = add i32 %442, %33
  %444 = sub i32 %443, %76
  %445 = add i32 %444, %81
  %446 = add i32 %445, %91
  %447 = sub i32 %446, %92
  %448 = add i32 %447, %96
  %449 = add i32 %448, %111
  %450 = sub i32 %449, %128
  %451 = add i32 %450, %138
  %452 = add i32 %451, %139
  %453 = add i32 %452, %141
  %454 = add i32 %453, %48
  %455 = sub i32 %454, %142
  %456 = sub i32 %455, %60
  %457 = add i32 %456, %50
  %458 = add i32 %457, %151
  %459 = add i32 %458, %154
  %460 = add i32 %459, %157
  %461 = sub i32 %460, %42
  %462 = sub i32 %461, %187
  %463 = sub i32 %462, %24
  %464 = add i32 %463, %190
  %465 = sub i32 %464, %195
  %466 = add i32 %465, %199
  %467 = add i32 %466, %203
  %468 = add i32 %467, %238
  %469 = add i32 %468, %22
  %470 = add i32 %469, %30
  %471 = add i32 %470, %35
  %472 = sub i32 %471, %37
  %473 = sub i32 %472, %39
  %474 = sub i32 %473, %46
  %475 = add i32 %474, %49
  %476 = add i32 %475, %53
  %477 = sub i32 %476, %55
  %478 = add i32 %477, %58
  %479 = sub i32 %478, %61
  %480 = add i32 %479, %68
  %481 = sub i32 %480, %72
  %482 = add i32 %481, %75
  %483 = sub i32 %482, %77
  %484 = add i32 %483, %78
  %485 = sub i32 %484, %99
  %486 = add i32 %485, %100
  %487 = add i32 %486, %101
  %488 = add i32 %487, %103
  %489 = sub i32 %488, %109
  %490 = add i32 %489, %105
  %491 = add i32 %490, %110
  %492 = sub i32 %491, %112
  %493 = add i32 %492, %113
  %494 = add i32 %493, %114
  %495 = add i32 %494, %119
  %496 = add i32 %495, %120
  %497 = add i32 %496, %127
  %498 = add i32 %497, %129
  %499 = sub i32 %498, %132
  %500 = add i32 %499, %136
  %501 = sub i32 %500, %140
  %502 = add i32 %501, %143
  %503 = sub i32 %502, %147
  %504 = sub i32 %503, %149
  %505 = sub i32 %504, %150
  %506 = sub i32 %505, %152
  %507 = add i32 %506, %153
  %508 = sub i32 %507, %155
  %509 = sub i32 %508, %156
  %510 = sub i32 %509, %161
  %511 = add i32 %510, %162
  %512 = sub i32 %511, %163
  %513 = sub i32 %512, %166
  %514 = add i32 %513, %167
  %515 = add i32 %514, %169
  %516 = sub i32 %515, %170
  %517 = add i32 %516, %171
  %518 = sub i32 %517, %174
  %519 = sub i32 %518, %176
  %520 = sub i32 %519, %177
  %521 = sub i32 %520, %179
  %522 = add i32 %521, %180
  %523 = sub i32 %522, %181
  %524 = sub i32 %523, %182
  %525 = sub i32 %524, %183
  %526 = sub i32 %525, %186
  %527 = sub i32 %526, %192
  %528 = sub i32 %527, %193
  %529 = sub i32 %528, %194
  %530 = add i32 %529, %196
  %531 = add i32 %530, %200
  %532 = add i32 %531, %202
  %533 = sub i32 %532, %65
  %534 = sub i32 %533, %204
  %535 = sub i32 %534, %205
  %536 = add i32 %535, %210
  %537 = sub i32 %536, %211
  %538 = sub i32 %537, %213
  %539 = add i32 %538, %223
  %540 = add i32 %539, %346
  %541 = sub i32 %540, %57
  %542 = add i32 %541, %66
  %543 = add i32 %542, %71
  %544 = sub i32 %543, %80
  %545 = add i32 %544, %86
  %546 = sub i32 %545, %88
  %547 = sub i32 %546, %90
  %548 = sub i32 %547, %95
  %549 = sub i32 %548, %98
  %550 = add i32 %549, %116
  %551 = sub i32 %550, %118
  %552 = add i32 %551, %123
  %553 = sub i32 %552, %126
  %554 = sub i32 %553, %131
  %555 = sub i32 %554, %134
  %556 = add i32 %555, %135
  %557 = add i32 %556, %146
  %558 = sub i32 %557, %160
  %559 = add i32 %558, %168
  %560 = sub i32 %559, %173
  %561 = add i32 %560, %175
  %562 = sub i32 %561, %185
  %563 = sub i32 %562, %189
  %564 = sub i32 %563, %197
  %565 = sub i32 %564, %201
  %566 = sub i32 %565, %207
  %567 = sub i32 %566, %209
  %568 = sub i32 %567, %215
  %569 = add i32 %568, %218
  %570 = add i32 %569, %220
  %571 = add i32 %570, %222
  %572 = add i32 %571, %261
  %573 = add i32 %572, %240
  %574 = sub i32 %573, %18
  %575 = add i32 %574, %230
  %576 = sub i32 %575, %246
  %577 = add i32 %576, %251
  %578 = add i32 %577, %253
  %579 = add i32 %578, %278
  %580 = add i32 %579, %301
  %581 = add i32 %580, %306
  %582 = add i32 %581, %307
  %583 = sub i32 %582, %316
  %584 = sub i32 %583, %319
  %585 = add i32 %584, %322
  %586 = sub i32 %585, %323
  %587 = sub i32 %586, %340
  %588 = sub i32 %587, %342
  %589 = add i32 %588, %345
  %590 = sub i32 %589, %347
  %591 = add i32 %590, %355
  %592 = sub i32 %591, %383
  %593 = sub i32 %592, %108
  %594 = add i32 %593, %233
  %595 = sub i32 %594, %235
  %596 = sub i32 %595, %236
  %597 = add i32 %596, %241
  %598 = sub i32 %597, %244
  %599 = add i32 %598, %245
  %600 = add i32 %599, %247
  %601 = sub i32 %600, %250
  %602 = sub i32 %601, %254
  %603 = sub i32 %602, %262
  %604 = add i32 %603, %263
  %605 = add i32 %604, %265
  %606 = sub i32 %605, %268
  %607 = sub i32 %606, %270
  %608 = sub i32 %607, %271
  %609 = sub i32 %608, %279
  %610 = sub i32 %609, %280
  %611 = add i32 %610, %283
  %612 = add i32 %611, %284
  %613 = sub i32 %612, %291
  %614 = sub i32 %613, %292
  %615 = sub i32 %614, %293
  %616 = add i32 %615, %297
  %617 = add i32 %616, %298
  %618 = add i32 %617, %302
  %619 = sub i32 %618, %311
  %620 = add i32 %619, %312
  %621 = add i32 %620, %317
  %622 = sub i32 %621, %318
  %623 = sub i32 %622, %320
  %624 = add i32 %623, %321
  %625 = add i32 %624, %326
  %626 = sub i32 %625, %328
  %627 = add i32 %626, %332
  %628 = sub i32 %627, %336
  %629 = sub i32 %628, %337
  %630 = sub i32 %629, %338
  %631 = sub i32 %630, %339
  %632 = sub i32 %631, %341
  %633 = sub i32 %632, %343
  %634 = sub i32 %633, %344
  %635 = sub i32 %634, %348
  %636 = sub i32 %635, %350
  %637 = add i32 %636, %352
  %638 = add i32 %637, %353
  %639 = sub i32 %638, %354
  %640 = add i32 %639, %356
  %641 = sub i32 %640, %360
  %642 = add i32 %641, %361
  %643 = sub i32 %642, %365
  %644 = add i32 %643, %366
  %645 = sub i32 %644, %378
  %646 = add i32 %645, %379
  %647 = add i32 %646, %380
  %648 = sub i32 %647, %381
  %649 = sub i32 %648, %382
  %650 = add i32 %649, %384
  %651 = add i32 %650, %387
  %652 = sub i32 %651, %329
  %653 = sub i32 %652, %227
  %654 = sub i32 %653, %258
  %655 = sub i32 %654, %277
  %656 = add i32 %655, %287
  %657 = sub i32 %656, %290
  %658 = add i32 %657, %296
  %659 = add i32 %658, %304
  %660 = sub i32 %659, %309
  %661 = sub i32 %660, %314
  %662 = add i32 %661, %324
  %663 = sub i32 %662, %331
  %664 = sub i32 %663, %335
  %665 = sub i32 %664, %359
  %666 = sub i32 %665, %368
  %667 = sub i32 %666, %370
  %668 = sub i32 %667, %372
  %669 = sub i32 %668, %375
  %670 = sub i32 %669, %386
  %671 = add i32 %670, %435
  %672 = add i32 %671, %433
  %673 = add i32 %672, %430
  %674 = add i32 %673, %426
  %675 = add i32 %674, %421
  %676 = add i32 %675, %414
  %677 = icmp eq i32 %20, %676
  %678 = select i1 %677, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %679 = tail call i32 @puts(i8* nonnull dereferenceable(1) %678)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
