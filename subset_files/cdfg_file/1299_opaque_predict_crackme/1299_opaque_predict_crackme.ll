; ModuleID = '../.././c_source_file/1299_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1299_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = and i32 %2, %0
  %9 = or i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = sub i32 %7, %11
  %13 = and i32 %4, %3
  %14 = xor i32 %13, %5
  %15 = sub i32 %12, %14
  %16 = or i32 %4, %3
  %17 = xor i32 %5, %4
  %18 = and i32 %17, %16
  %19 = add i32 %15, %18
  %20 = xor i32 %2, %0
  %21 = and i32 %20, %9
  %22 = xor i32 %2, %1
  %23 = xor i32 %22, %0
  %24 = xor i32 %1, -1
  %25 = or i32 %20, %24
  %26 = and i32 %24, %0
  %27 = xor i32 %2, -1
  %28 = and i32 %27, %1
  %29 = or i32 %28, %26
  %30 = or i32 %10, %2
  %31 = shl i32 %30, 1
  %32 = xor i32 %20, -1
  %33 = and i32 %32, %24
  %34 = and i32 %1, %0
  %35 = or i32 %34, %27
  %36 = or i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %1
  %39 = or i32 %24, %0
  %40 = and i32 %39, %32
  %41 = or i32 %34, %32
  %42 = xor i32 %28, -1
  %43 = and i32 %42, %0
  %44 = shl i32 %43, 1
  %45 = or i32 %34, %37
  %46 = and i32 %2, %1
  %47 = and i32 %46, %0
  %48 = xor i32 %0, -1
  %49 = or i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %0
  %52 = xor i32 %47, %51
  %53 = or i32 %27, %0
  %54 = xor i32 %34, -1
  %55 = and i32 %20, %54
  %56 = or i32 %20, %34
  %57 = or i32 %22, %26
  %58 = or i32 %20, %1
  %59 = or i32 %7, %37
  %60 = or i32 %42, %48
  %61 = xor i32 %7, -1
  %62 = or i32 %20, %61
  %63 = and i32 %27, %0
  %64 = xor i32 %46, -1
  %65 = xor i32 %63, %64
  %66 = shl i32 %65, 1
  %67 = and i32 %54, %2
  %68 = xor i32 %34, %2
  %69 = or i32 %27, %1
  %70 = or i32 %69, %0
  %71 = add i32 %7, 1
  %72 = xor i32 %69, -1
  %73 = or i32 %34, %72
  %74 = and i32 %24, %2
  %75 = and i32 %74, %48
  %76 = or i32 %24, %2
  %77 = and i32 %76, %0
  %78 = xor i32 %77, -1
  %79 = xor i32 %75, %78
  %80 = xor i32 %53, -1
  %81 = or i32 %80, %1
  %82 = and i32 %20, %61
  %83 = shl i32 %82, 2
  %84 = xor i32 %63, -1
  %85 = and i32 %84, %61
  %86 = shl i32 %85, 1
  %87 = or i32 %61, %2
  %88 = or i32 %34, %80
  %89 = or i32 %8, %24
  %90 = and i32 %22, %9
  %91 = xor i32 %22, -1
  %92 = and i32 %9, %91
  %93 = and i32 %36, %24
  %94 = xor i32 %26, -1
  %95 = and i32 %22, %94
  %96 = or i32 %64, %48
  %97 = or i32 %26, %2
  %98 = and i32 %91, %94
  %99 = shl i32 %98, 1
  %100 = and i32 %22, %48
  %101 = or i32 %47, %100
  %102 = and i32 %61, %2
  %103 = and i32 %36, %1
  %104 = and i32 %46, %48
  %105 = and i32 %22, %0
  %106 = or i32 %104, %105
  %107 = and i32 %69, %48
  %108 = and i32 %49, %0
  %109 = xor i32 %104, -1
  %110 = xor i32 %108, %109
  %111 = or i32 %32, %1
  %112 = shl i32 %111, 1
  %113 = xor i32 %8, %39
  %114 = and i32 %74, %0
  %115 = or i32 %22, %0
  %116 = xor i32 %115, -1
  %117 = or i32 %114, %116
  %118 = or i32 %63, %46
  %119 = xor i32 %64, %0
  %120 = xor i32 %8, %49
  %121 = add i32 %9, 1
  %122 = xor i32 %8, -1
  %123 = add i32 %8, 1
  %124 = or i32 %49, %48
  %125 = or i32 %80, %24
  %126 = shl i32 %125, 1
  %127 = and i32 %122, %24
  %128 = or i32 %28, %48
  %129 = or i32 %8, %61
  %130 = or i32 %8, %7
  %131 = or i32 %27, %61
  %132 = or i32 %63, %61
  %133 = or i32 %8, %1
  %134 = shl i32 %133, 1
  %135 = xor i32 %39, -1
  %136 = xor i32 %135, %2
  %137 = xor i32 %8, %42
  %138 = xor i32 %23, -1
  %139 = or i32 %47, %138
  %140 = and i32 %42, %48
  %141 = and i32 %94, %2
  %142 = shl i32 %141, 1
  %143 = xor i32 %63, %69
  %144 = shl i32 %143, 1
  %145 = and i32 %22, %39
  %146 = and i32 %7, %27
  %147 = or i32 %27, %10
  %148 = xor i32 %9, %2
  %149 = or i32 %91, %10
  %150 = shl i32 %149, 1
  %151 = xor i32 %84, %1
  %152 = or i32 %50, %48
  %153 = xor i32 %91, %0
  %154 = and i32 %32, %54
  %155 = and i32 %64, %48
  %156 = and i32 %9, %2
  %157 = and i32 %84, %1
  %158 = and i32 %69, %0
  %159 = or i32 %32, %10
  %160 = shl i32 %159, 1
  %161 = or i32 %72, %48
  %162 = or i32 %63, %24
  %163 = or i32 %91, %0
  %164 = xor i32 %53, %34
  %165 = shl i32 %164, 1
  %166 = shl i32 %115, 1
  %167 = and i32 %91, %0
  %168 = shl i32 %167, 1
  %169 = or i32 %32, %135
  %170 = and i32 %20, %39
  %171 = xor i32 %36, %1
  %172 = xor i32 %114, %138
  %173 = or i32 %37, %61
  %174 = and i32 %20, %94
  %175 = or i32 %72, %0
  %176 = and i32 %20, %1
  %177 = xor i32 %42, %0
  %178 = or i32 %22, %34
  %179 = xor i32 %122, %1
  %180 = xor i32 %114, %115
  %181 = or i32 %7, %27
  %182 = shl i32 %181, 1
  %183 = and i32 %27, %61
  %184 = shl i32 %183, 1
  %185 = and i32 %64, %0
  %186 = xor i32 %100, -1
  %187 = xor i32 %47, %186
  %188 = or i32 %22, %48
  %189 = xor i32 %188, -1
  %190 = or i32 %75, %189
  %191 = and i32 %39, %91
  %192 = xor i32 %47, %23
  %193 = shl i32 %135, 2
  %194 = and i32 %9, %27
  %195 = or i32 %20, %7
  %196 = xor i32 %63, %1
  %197 = shl i32 %196, 1
  %198 = or i32 %32, %24
  %199 = and i32 %9, %32
  %200 = and i32 %53, %1
  %201 = or i32 %34, %50
  %202 = and i32 %7, %2
  %203 = xor i32 %80, %1
  %204 = and i32 %7, %32
  %205 = or i32 %49, %0
  %206 = xor i32 %50, %0
  %207 = xor i32 %49, %0
  %208 = or i32 %47, %207
  %209 = xor i32 %69, %0
  %210 = shl i32 %209, 1
  %211 = and i32 %36, %61
  %212 = xor i32 %53, %1
  %213 = shl i32 %212, 1
  %214 = and i32 %22, %54
  %215 = shl i32 %214, 2
  %216 = or i32 %63, %72
  %217 = shl i32 %216, 1
  %218 = and i32 %91, %48
  %219 = or i32 %46, %0
  %220 = and i32 %53, %24
  %221 = or i32 %80, %61
  %222 = shl i32 %221, 1
  %223 = and i32 %36, %7
  %224 = or i32 %135, %2
  %225 = or i32 %8, %28
  %226 = and i32 %39, %27
  %227 = or i32 %20, %26
  %228 = or i32 %37, %24
  %229 = xor i32 %72, %0
  %230 = xor i32 %8, %1
  %231 = xor i32 %10, %2
  %232 = or i32 %64, %0
  %233 = xor i32 %105, %109
  %234 = xor i32 %26, %2
  %235 = and i32 %27, %54
  %236 = and i32 %32, %94
  %237 = or i32 %8, %135
  %238 = shl i32 %237, 1
  %239 = and i32 %84, %24
  %240 = xor i32 %76, %48
  %241 = xor i32 %240, %114
  %242 = or i32 %8, %50
  %243 = and i32 %76, %48
  %244 = or i32 %114, %243
  %245 = and i32 %50, %48
  %246 = and i32 %28, %48
  %247 = and i32 %50, %0
  %248 = mul i32 %247, -14
  %249 = and i32 %28, %0
  %250 = and i32 %72, %48
  %251 = mul i32 %104, 19
  %252 = and i32 %72, %0
  %253 = mul i32 %252, 25
  %254 = mul i32 %47, -6
  %255 = xor i32 %3, -1
  %256 = or i32 %255, %4
  %257 = xor i32 %5, %3
  %258 = and i32 %257, %256
  %259 = shl i32 %258, 2
  %260 = or i32 %5, %4
  %261 = xor i32 %4, %3
  %262 = xor i32 %261, -1
  %263 = and i32 %260, %262
  %264 = shl i32 %263, 1
  %265 = xor i32 %16, -1
  %266 = or i32 %257, %265
  %267 = or i32 %5, %3
  %268 = and i32 %267, %4
  %269 = shl i32 %268, 1
  %270 = and i32 %257, %16
  %271 = and i32 %5, %3
  %272 = and i32 %271, %4
  %273 = xor i32 %257, %4
  %274 = xor i32 %272, %273
  %275 = and i32 %255, %4
  %276 = xor i32 %275, -1
  %277 = add i32 %275, 1
  %278 = and i32 %5, %4
  %279 = xor i32 %278, -1
  %280 = xor i32 %279, %3
  %281 = xor i32 %5, -1
  %282 = and i32 %281, %4
  %283 = xor i32 %282, -1
  %284 = and i32 %283, %262
  %285 = and i32 %279, %3
  %286 = or i32 %281, %4
  %287 = and i32 %286, %255
  %288 = or i32 %281, %3
  %289 = xor i32 %288, %4
  %290 = and i32 %276, %5
  %291 = xor i32 %267, -1
  %292 = or i32 %291, %4
  %293 = xor i32 %257, -1
  %294 = or i32 %275, %293
  %295 = and i32 %279, %262
  %296 = xor i32 %271, 2147483647
  %297 = xor i32 %296, %282
  %298 = xor i32 %260, -1
  %299 = or i32 %13, %298
  %300 = and i32 %275, %5
  %301 = xor i32 %273, 2147483647
  %302 = xor i32 %301, %300
  %303 = xor i32 %288, -1
  %304 = or i32 %13, %303
  %305 = and i32 %279, %255
  %306 = or i32 %13, %281
  %307 = and i32 %286, %261
  %308 = xor i32 %4, -1
  %309 = or i32 %293, %4
  %310 = xor i32 %272, %309
  %311 = xor i32 %17, -1
  %312 = or i32 %261, %311
  %313 = or i32 %17, %262
  %314 = and i32 %262, %5
  %315 = or i32 %278, %265
  %316 = and i32 %267, %308
  %317 = xor i32 %13, -1
  %318 = and i32 %281, %317
  %319 = or i32 %300, %273
  %320 = or i32 %13, %5
  %321 = and i32 %311, %276
  %322 = xor i32 %286, %255
  %323 = add i32 %5, 1
  %324 = and i32 %281, %3
  %325 = xor i32 %324, -1
  %326 = or i32 %325, %308
  %327 = or i32 %17, %255
  %328 = or i32 %261, %298
  %329 = xor i32 %256, -1
  %330 = or i32 %17, %329
  %331 = and i32 %16, %293
  %332 = and i32 %17, %317
  %333 = xor i32 %267, %4
  %334 = or i32 %272, %333
  %335 = or i32 %293, %265
  %336 = and i32 %17, %255
  %337 = and i32 %286, %262
  %338 = and i32 %291, %308
  %339 = shl i32 %338, 3
  %340 = and i32 %324, %308
  %341 = and i32 %291, %4
  %342 = and i32 %324, %4
  %343 = and i32 %303, %308
  %344 = mul i32 %343, 7
  %345 = and i32 %271, %308
  %346 = shl i32 %345, 1
  %347 = and i32 %303, %4
  %348 = add i32 %234, %24
  %349 = add i32 %348, %37
  %350 = add i32 %349, %249
  %351 = add i32 %350, %232
  %352 = add i32 %351, %225
  %353 = add i32 %352, %205
  %354 = add i32 %353, %201
  %355 = add i32 %354, %179
  %356 = add i32 %355, %157
  %357 = add i32 %356, %118
  %358 = add i32 %357, %113
  %359 = add i32 %358, %59
  %360 = add i32 %359, %58
  %361 = add i32 %360, %57
  %362 = add i32 %361, %38
  %363 = add i32 %362, %29
  %364 = sub i32 %363, %21
  %365 = add i32 %364, %16
  %366 = add i32 %365, %106
  %367 = add i32 %366, %101
  %368 = add i32 %367, %314
  %369 = add i32 %368, %341
  %370 = add i32 %369, %312
  %371 = add i32 %370, %292
  %372 = add i32 %371, %297
  %373 = add i32 %372, %302
  %374 = shl i32 %373, 1
  %375 = sub i32 %147, %107
  %376 = sub i32 %375, %241
  %377 = add i32 %376, %233
  %378 = sub i32 %377, %272
  %379 = mul i32 %378, 5
  %380 = add i32 %36, %194
  %381 = add i32 %380, %250
  %382 = add i32 %381, %52
  %383 = add i32 %347, %382
  %384 = add i32 %236, %246
  %385 = add i32 %384, %229
  %386 = add i32 %385, %180
  %387 = shl i32 %386, 2
  %388 = add i32 %342, %245
  %389 = mul i32 %388, 9
  %390 = xor i32 %383, -1
  %391 = mul i32 %390, 3
  %392 = add i32 %0, 3
  %393 = sub i32 %392, %9
  %394 = add i32 %393, %71
  %395 = add i32 %394, %26
  %396 = add i32 %395, %121
  %397 = sub i32 %396, %2
  %398 = sub i32 %397, %35
  %399 = sub i32 %398, %53
  %400 = add i32 %399, %67
  %401 = add i32 %400, %68
  %402 = add i32 %401, %87
  %403 = add i32 %402, %97
  %404 = sub i32 %403, %28
  %405 = sub i32 %404, %102
  %406 = add i32 %405, %91
  %407 = add i32 %406, %123
  %408 = sub i32 %407, %131
  %409 = sub i32 %408, %20
  %410 = sub i32 %409, %136
  %411 = sub i32 %410, %146
  %412 = sub i32 %411, %148
  %413 = sub i32 %412, %156
  %414 = add i32 %413, %46
  %415 = sub i32 %414, %193
  %416 = add i32 %415, %202
  %417 = add i32 %416, %69
  %418 = add i32 %417, %224
  %419 = add i32 %418, %226
  %420 = sub i32 %419, %231
  %421 = add i32 %420, %235
  %422 = sub i32 %421, %23
  %423 = sub i32 %422, %25
  %424 = sub i32 %423, %31
  %425 = sub i32 %424, %33
  %426 = add i32 %425, %40
  %427 = add i32 %426, %41
  %428 = sub i32 %427, %45
  %429 = add i32 %428, %55
  %430 = add i32 %429, %56
  %431 = add i32 %430, %60
  %432 = sub i32 %431, %62
  %433 = add i32 %432, %70
  %434 = sub i32 %433, %73
  %435 = add i32 %434, %81
  %436 = add i32 %435, %88
  %437 = add i32 %436, %89
  %438 = add i32 %437, %90
  %439 = add i32 %438, %92
  %440 = add i32 %439, %93
  %441 = sub i32 %440, %95
  %442 = add i32 %441, %96
  %443 = sub i32 %442, %103
  %444 = add i32 %443, %119
  %445 = sub i32 %444, %120
  %446 = add i32 %445, %124
  %447 = add i32 %446, %127
  %448 = add i32 %447, %128
  %449 = sub i32 %448, %129
  %450 = add i32 %449, %130
  %451 = add i32 %450, %132
  %452 = sub i32 %451, %137
  %453 = add i32 %452, %140
  %454 = sub i32 %453, %142
  %455 = sub i32 %454, %145
  %456 = sub i32 %455, %151
  %457 = add i32 %456, %152
  %458 = sub i32 %457, %153
  %459 = sub i32 %458, %154
  %460 = add i32 %459, %155
  %461 = add i32 %460, %108
  %462 = add i32 %461, %158
  %463 = sub i32 %462, %161
  %464 = add i32 %463, %162
  %465 = add i32 %464, %163
  %466 = sub i32 %465, %169
  %467 = add i32 %466, %170
  %468 = sub i32 %467, %171
  %469 = sub i32 %468, %173
  %470 = add i32 %469, %174
  %471 = sub i32 %470, %175
  %472 = sub i32 %471, %176
  %473 = sub i32 %472, %177
  %474 = sub i32 %473, %178
  %475 = sub i32 %474, %182
  %476 = sub i32 %475, %184
  %477 = sub i32 %476, %185
  %478 = add i32 %477, %191
  %479 = add i32 %478, %195
  %480 = add i32 %479, %198
  %481 = add i32 %480, %199
  %482 = add i32 %481, %200
  %483 = sub i32 %482, %105
  %484 = sub i32 %483, %203
  %485 = sub i32 %484, %204
  %486 = sub i32 %485, %51
  %487 = sub i32 %486, %206
  %488 = sub i32 %487, %211
  %489 = add i32 %488, %218
  %490 = add i32 %489, %219
  %491 = add i32 %490, %220
  %492 = sub i32 %491, %223
  %493 = sub i32 %492, %227
  %494 = add i32 %493, %228
  %495 = add i32 %494, %230
  %496 = add i32 %495, %100
  %497 = sub i32 %496, %239
  %498 = sub i32 %497, %242
  %499 = sub i32 %498, %188
  %500 = add i32 %499, %4
  %501 = sub i32 %500, %44
  %502 = sub i32 %501, %66
  %503 = sub i32 %502, %79
  %504 = sub i32 %503, %83
  %505 = sub i32 %504, %86
  %506 = sub i32 %505, %99
  %507 = sub i32 %506, %110
  %508 = sub i32 %507, %112
  %509 = sub i32 %508, %117
  %510 = sub i32 %509, %126
  %511 = sub i32 %510, %134
  %512 = add i32 %511, %139
  %513 = sub i32 %512, %144
  %514 = sub i32 %513, %150
  %515 = sub i32 %514, %160
  %516 = sub i32 %515, %165
  %517 = sub i32 %516, %166
  %518 = sub i32 %517, %168
  %519 = add i32 %518, %172
  %520 = sub i32 %519, %187
  %521 = sub i32 %520, %190
  %522 = add i32 %521, %192
  %523 = sub i32 %522, %197
  %524 = add i32 %523, %208
  %525 = sub i32 %524, %210
  %526 = sub i32 %525, %213
  %527 = sub i32 %526, %215
  %528 = sub i32 %527, %217
  %529 = sub i32 %528, %222
  %530 = sub i32 %529, %238
  %531 = sub i32 %530, %244
  %532 = add i32 %531, %248
  %533 = add i32 %532, %251
  %534 = add i32 %533, %253
  %535 = add i32 %534, %254
  %536 = add i32 %535, %277
  %537 = add i32 %536, %323
  %538 = sub i32 %537, %256
  %539 = add i32 %538, %290
  %540 = sub i32 %539, %288
  %541 = sub i32 %540, %306
  %542 = add i32 %541, %318
  %543 = sub i32 %542, %320
  %544 = add i32 %543, %271
  %545 = sub i32 %544, %266
  %546 = sub i32 %545, %270
  %547 = add i32 %546, %280
  %548 = sub i32 %547, %284
  %549 = sub i32 %548, %285
  %550 = add i32 %549, %287
  %551 = add i32 %550, %289
  %552 = add i32 %551, %294
  %553 = sub i32 %552, %295
  %554 = add i32 %553, %299
  %555 = add i32 %554, %304
  %556 = sub i32 %555, %305
  %557 = sub i32 %556, %307
  %558 = add i32 %557, %313
  %559 = add i32 %558, %315
  %560 = add i32 %559, %316
  %561 = add i32 %560, %321
  %562 = sub i32 %561, %322
  %563 = add i32 %562, %326
  %564 = add i32 %563, %327
  %565 = sub i32 %564, %328
  %566 = sub i32 %565, %330
  %567 = sub i32 %566, %331
  %568 = sub i32 %567, %332
  %569 = sub i32 %568, %333
  %570 = sub i32 %569, %335
  %571 = sub i32 %570, %336
  %572 = add i32 %571, %337
  %573 = add i32 %572, %340
  %574 = sub i32 %573, %259
  %575 = sub i32 %574, %264
  %576 = sub i32 %575, %269
  %577 = add i32 %576, %274
  %578 = sub i32 %577, %310
  %579 = sub i32 %578, %319
  %580 = sub i32 %579, %334
  %581 = sub i32 %580, %339
  %582 = add i32 %581, %344
  %583 = sub i32 %582, %346
  %584 = add i32 %583, %387
  %585 = add i32 %584, %389
  %586 = add i32 %585, %379
  %587 = add i32 %586, %391
  %588 = add i32 %587, %374
  %589 = icmp eq i32 %19, %588
  %590 = select i1 %589, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %591 = tail call i32 @puts(i8* nonnull dereferenceable(1) %590)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
