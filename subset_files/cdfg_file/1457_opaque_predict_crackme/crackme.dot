digraph "DFG for'crackme' function" {
	Node0x100c800[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x100ce80[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x100cef0[shape=record, label="  %7 = sub i32 %6, %1"];
	Node0x100cf60[shape=record, label="  %8 = sub i32 %7, %5"];
	Node0x100cfd0[shape=record, label="  %9 = xor i32 %2, -1"];
	Node0x100d040[shape=record, label="  %10 = and i32 %9, %1"];
	Node0x100d0b0[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x100d120[shape=record, label="  %12 = or i32 %9, %1"];
	Node0x100d1c0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x100d230[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0x100d2d0[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0x100d370[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0x100d3e0[shape=record, label="  %17 = xor i32 %5, -1"];
	Node0x100d480[shape=record, label="  %18 = mul i32 %17, 5"];
	Node0x100d4f0[shape=record, label="  %19 = shl i32 %11, 2"];
	Node0x100d560[shape=record, label="  %20 = or i32 %6, %3"];
	Node0x100d5d0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x100d640[shape=record, label="  %22 = shl i32 %3, 1"];
	Node0x100d6b0[shape=record, label="  %23 = xor i32 %3, %0"];
	Node0x100d720[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x100d790[shape=record, label="  %25 = shl i32 %23, 1"];
	Node0x100d800[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x100d870[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x100d910[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x100d980[shape=record, label="  %29 = or i32 %3, %0"];
	Node0x100d9f0[shape=record, label="  %30 = and i32 %6, %3"];
	Node0x100da60[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x100dad0[shape=record, label="  %32 = xor i32 %31, -2"];
	Node0x100dd50[shape=record, label="  %33 = or i32 %22, 1"];
	Node0x100ddc0[shape=record, label="  %34 = xor i32 %29, -1"];
	Node0x100de60[shape=record, label="  %35 = mul i32 %34, 3"];
	Node0x100ded0[shape=record, label="  %36 = xor i32 %21, -2"];
	Node0x100df70[shape=record, label="  %37 = mul i32 %30, 7"];
	Node0x100dfe0[shape=record, label="  %38 = mul i32 %10, -2"];
	Node0x100e050[shape=record, label="  %39 = sub i32 %1, %2"];
	Node0x100e0c0[shape=record, label="  %40 = sub i32 %39, %11"];
	Node0x100e130[shape=record, label="  %41 = add i32 %40, %12"];
	Node0x100e1a0[shape=record, label="  %42 = sub i32 %41, %13"];
	Node0x100e210[shape=record, label="  %43 = add i32 %42, %18"];
	Node0x100e280[shape=record, label="  %44 = add i32 %43, %19"];
	Node0x100e2f0[shape=record, label="  %45 = sub i32 %44, %22"];
	Node0x100e360[shape=record, label="  %46 = add i32 %45, %24"];
	Node0x100e3d0[shape=record, label="  %47 = add i32 %46, %29"];
	Node0x100e440[shape=record, label="  %48 = sub i32 %47, %26"];
	Node0x100e4b0[shape=record, label="  %49 = add i32 %48, %38"];
	Node0x100e520[shape=record, label="  %50 = sub i32 %49, %16"];
	Node0x100e590[shape=record, label="  %51 = sub i32 %50, %21"];
	Node0x100e600[shape=record, label="  %52 = sub i32 %51, %25"];
	Node0x100e670[shape=record, label="  %53 = add i32 %52, %33"];
	Node0x100e6e0[shape=record, label="  %54 = add i32 %53, %35"];
	Node0x100e750[shape=record, label="  %55 = add i32 %54, %37"];
	Node0x100e7c0[shape=record, label="  %56 = sub i32 %55, %28"];
	Node0x100e830[shape=record, label="  %57 = add i32 %56, %32"];
	Node0x100e8a0[shape=record, label="  %58 = add i32 %57, %36"];
	Node0x100e910[shape=record, label="  %59 = icmp eq i32 %8, %58"];
	Node0xfad268[shape=record, label="  %60 = select i1 %59, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x100edb0[shape=record, label="  %61 = tail call i32 @puts(i8* nonnull dereferenceable(1) %60)"];
	Node0x100ee00[shape=record, label="  ret void"];
	Node0x100c800 -> Node0x100ce80;
	Node0x100ce80 -> Node0x100cef0;
	Node0x100cef0 -> Node0x100cf60;
	Node0x100cf60 -> Node0x100cfd0;
	Node0x100cfd0 -> Node0x100d040;
	Node0x100d040 -> Node0x100d0b0;
	Node0x100d0b0 -> Node0x100d120;
	Node0x100d120 -> Node0x100d1c0;
	Node0x100d1c0 -> Node0x100d230;
	Node0x100d230 -> Node0x100d2d0;
	Node0x100d2d0 -> Node0x100d370;
	Node0x100d370 -> Node0x100d3e0;
	Node0x100d3e0 -> Node0x100d480;
	Node0x100d480 -> Node0x100d4f0;
	Node0x100d4f0 -> Node0x100d560;
	Node0x100d560 -> Node0x100d5d0;
	Node0x100d5d0 -> Node0x100d640;
	Node0x100d640 -> Node0x100d6b0;
	Node0x100d6b0 -> Node0x100d720;
	Node0x100d720 -> Node0x100d790;
	Node0x100d790 -> Node0x100d800;
	Node0x100d800 -> Node0x100d870;
	Node0x100d870 -> Node0x100d910;
	Node0x100d910 -> Node0x100d980;
	Node0x100d980 -> Node0x100d9f0;
	Node0x100d9f0 -> Node0x100da60;
	Node0x100da60 -> Node0x100dad0;
	Node0x100dad0 -> Node0x100dd50;
	Node0x100dd50 -> Node0x100ddc0;
	Node0x100ddc0 -> Node0x100de60;
	Node0x100de60 -> Node0x100ded0;
	Node0x100ded0 -> Node0x100df70;
	Node0x100df70 -> Node0x100dfe0;
	Node0x100dfe0 -> Node0x100e050;
	Node0x100e050 -> Node0x100e0c0;
	Node0x100e0c0 -> Node0x100e130;
	Node0x100e130 -> Node0x100e1a0;
	Node0x100e1a0 -> Node0x100e210;
	Node0x100e210 -> Node0x100e280;
	Node0x100e280 -> Node0x100e2f0;
	Node0x100e2f0 -> Node0x100e360;
	Node0x100e360 -> Node0x100e3d0;
	Node0x100e3d0 -> Node0x100e440;
	Node0x100e440 -> Node0x100e4b0;
	Node0x100e4b0 -> Node0x100e520;
	Node0x100e520 -> Node0x100e590;
	Node0x100e590 -> Node0x100e600;
	Node0x100e600 -> Node0x100e670;
	Node0x100e670 -> Node0x100e6e0;
	Node0x100e6e0 -> Node0x100e750;
	Node0x100e750 -> Node0x100e7c0;
	Node0x100e7c0 -> Node0x100e830;
	Node0x100e830 -> Node0x100e8a0;
	Node0x100e8a0 -> Node0x100e910;
	Node0x100e910 -> Node0xfad268;
	Node0xfad268 -> Node0x100edb0;
	Node0x100edb0 -> Node0x100ee00;
edge [color=red]
	Node0x100ce80 -> Node0x100cef0;
	Node0x100cef0 -> Node0x100cf60;
	Node0x100c800 -> Node0x100cf60;
	Node0x100cfd0 -> Node0x100d040;
	Node0x100cfd0 -> Node0x100d120;
	Node0x100d120 -> Node0x100d1c0;
	Node0x100d230 -> Node0x100d2d0;
	Node0x100d2d0 -> Node0x100d370;
	Node0x100c800 -> Node0x100d3e0;
	Node0x100d3e0 -> Node0x100d480;
	Node0x100d0b0 -> Node0x100d4f0;
	Node0x100ce80 -> Node0x100d560;
	Node0x100d560 -> Node0x100d5d0;
	Node0x100d6b0 -> Node0x100d720;
	Node0x100d6b0 -> Node0x100d790;
	Node0x100d800 -> Node0x100d870;
	Node0x100d870 -> Node0x100d910;
	Node0x100ce80 -> Node0x100d9f0;
	Node0x100d9f0 -> Node0x100da60;
	Node0x100da60 -> Node0x100dad0;
	Node0x100d640 -> Node0x100dd50;
	Node0x100d980 -> Node0x100ddc0;
	Node0x100ddc0 -> Node0x100de60;
	Node0x100d5d0 -> Node0x100ded0;
	Node0x100d9f0 -> Node0x100df70;
	Node0x100d040 -> Node0x100dfe0;
	Node0x100e050 -> Node0x100e0c0;
	Node0x100d0b0 -> Node0x100e0c0;
	Node0x100e0c0 -> Node0x100e130;
	Node0x100d120 -> Node0x100e130;
	Node0x100e130 -> Node0x100e1a0;
	Node0x100d1c0 -> Node0x100e1a0;
	Node0x100e1a0 -> Node0x100e210;
	Node0x100d480 -> Node0x100e210;
	Node0x100e210 -> Node0x100e280;
	Node0x100d4f0 -> Node0x100e280;
	Node0x100e280 -> Node0x100e2f0;
	Node0x100d640 -> Node0x100e2f0;
	Node0x100e2f0 -> Node0x100e360;
	Node0x100d720 -> Node0x100e360;
	Node0x100e360 -> Node0x100e3d0;
	Node0x100d980 -> Node0x100e3d0;
	Node0x100e3d0 -> Node0x100e440;
	Node0x100d800 -> Node0x100e440;
	Node0x100e440 -> Node0x100e4b0;
	Node0x100dfe0 -> Node0x100e4b0;
	Node0x100e4b0 -> Node0x100e520;
	Node0x100d370 -> Node0x100e520;
	Node0x100e520 -> Node0x100e590;
	Node0x100d5d0 -> Node0x100e590;
	Node0x100e590 -> Node0x100e600;
	Node0x100d790 -> Node0x100e600;
	Node0x100e600 -> Node0x100e670;
	Node0x100dd50 -> Node0x100e670;
	Node0x100e670 -> Node0x100e6e0;
	Node0x100de60 -> Node0x100e6e0;
	Node0x100e6e0 -> Node0x100e750;
	Node0x100df70 -> Node0x100e750;
	Node0x100e750 -> Node0x100e7c0;
	Node0x100d910 -> Node0x100e7c0;
	Node0x100e7c0 -> Node0x100e830;
	Node0x100dad0 -> Node0x100e830;
	Node0x100e830 -> Node0x100e8a0;
	Node0x100ded0 -> Node0x100e8a0;
	Node0x100cf60 -> Node0x100e910;
	Node0x100e8a0 -> Node0x100e910;
	Node0x100e910 -> Node0xfad268;
	Node0xfad268 -> Node0x100edb0;
}
