; ModuleID = '../.././c_source_file/0633_path_condition_crackme.c'
source_filename = "../.././c_source_file/0633_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = mul i32 %3, -2
  %7 = and i32 %4, %3
  %8 = xor i32 %7, -1
  %9 = and i32 %2, %0
  %10 = xor i32 %9, -1
  %11 = add i32 %6, %10
  %12 = add i32 %11, %8
  %13 = xor i32 %4, %3
  %14 = xor i32 %4, -1
  %15 = and i32 %14, %3
  %16 = xor i32 %15, -1
  %17 = or i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = shl i32 %14, 1
  %20 = or i32 %14, %3
  %21 = xor i32 %17, -1
  %22 = xor i32 %20, -1
  %23 = shl i32 %7, 1
  %24 = and i32 %1, %0
  %25 = or i32 %24, %2
  %26 = or i32 %1, %0
  %27 = xor i32 %2, %0
  %28 = and i32 %27, %26
  %29 = xor i32 %2, -1
  %30 = xor i32 %26, -1
  %31 = or i32 %29, %30
  %32 = or i32 %2, %0
  %33 = xor i32 %32, %24
  %34 = or i32 %29, %1
  %35 = xor i32 %34, -1
  %36 = xor i32 %35, %0
  %37 = shl i32 %36, 1
  %38 = xor i32 %0, -1
  %39 = and i32 %34, %38
  %40 = xor i32 %2, %1
  %41 = xor i32 %40, -1
  %42 = xor i32 %32, -1
  %43 = xor i32 %1, %0
  %44 = or i32 %43, %42
  %45 = and i32 %29, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %46, %1
  %48 = xor i32 %1, -1
  %49 = and i32 %46, %48
  %50 = and i32 %29, %1
  %51 = xor i32 %50, -1
  %52 = or i32 %51, %38
  %53 = and i32 %48, %0
  %54 = xor i32 %53, -1
  %55 = and i32 %29, %54
  %56 = or i32 %42, %48
  %57 = shl i32 %56, 1
  %58 = xor i32 %45, %34
  %59 = or i32 %2, %1
  %60 = and i32 %59, %0
  %61 = or i32 %24, %41
  %62 = shl i32 %61, 1
  %63 = xor i32 %50, %0
  %64 = or i32 %48, %0
  %65 = xor i32 %64, -1
  %66 = or i32 %40, %65
  %67 = or i32 %34, %0
  %68 = or i32 %29, %0
  %69 = and i32 %48, %2
  %70 = and i32 %69, %38
  %71 = or i32 %48, %2
  %72 = and i32 %71, %0
  %73 = xor i32 %72, -1
  %74 = xor i32 %70, %73
  %75 = and i32 %40, %38
  %76 = xor i32 %27, -1
  %77 = and i32 %76, %48
  %78 = or i32 %9, %30
  %79 = and i32 %41, %0
  %80 = and i32 %69, %0
  %81 = and i32 %71, %38
  %82 = or i32 %80, %81
  %83 = xor i32 %53, %2
  %84 = xor i32 %68, -1
  %85 = xor i32 %43, -1
  %86 = or i32 %84, %85
  %87 = or i32 %40, %0
  %88 = xor i32 %87, 2147483647
  %89 = or i32 %88, %80
  %90 = shl i32 %89, 1
  %91 = and i32 %27, %1
  %92 = and i32 %10, %48
  %93 = and i32 %2, %1
  %94 = and i32 %93, %0
  %95 = xor i32 %75, 2147483647
  %96 = xor i32 %95, %94
  %97 = shl i32 %96, 1
  %98 = and i32 %27, %85
  %99 = and i32 %59, %38
  %100 = xor i32 %94, -1
  %101 = xor i32 %99, %100
  %102 = and i32 %26, %29
  %103 = and i32 %26, %41
  %104 = xor i32 %93, %0
  %105 = and i32 %32, %43
  %106 = shl i32 %105, 1
  %107 = xor i32 %93, -1
  %108 = or i32 %107, %0
  %109 = or i32 %107, %38
  %110 = or i32 %93, %38
  %111 = xor i32 %45, %1
  %112 = shl i32 %111, 1
  %113 = xor i32 %46, %1
  %114 = xor i32 %24, -1
  %115 = and i32 %40, %114
  %116 = or i32 %76, %65
  %117 = shl i32 %116, 1
  %118 = or i32 %9, %85
  %119 = xor i32 %59, -1
  %120 = xor i32 %119, %0
  %121 = xor i32 %32, %1
  %122 = or i32 %53, %2
  %123 = and i32 %32, %85
  %124 = and i32 %54, %2
  %125 = xor i32 %71, %0
  %126 = xor i32 %80, 2147483647
  %127 = xor i32 %126, %125
  %128 = shl i32 %127, 1
  %129 = and i32 %114, %2
  %130 = xor i32 %45, %107
  %131 = or i32 %43, %76
  %132 = xor i32 %54, %2
  %133 = and i32 %27, %54
  %134 = xor i32 %30, %2
  %135 = and i32 %26, %76
  %136 = shl i32 %135, 1
  %137 = and i32 %68, %85
  %138 = add i32 %93, 1
  %139 = or i32 %9, %1
  %140 = or i32 %53, %41
  %141 = or i32 %24, %35
  %142 = or i32 %35, %38
  %143 = xor i32 %26, %2
  %144 = or i32 %50, %53
  %145 = or i32 %70, %79
  %146 = and i32 %64, %2
  %147 = or i32 %27, %24
  %148 = or i32 %27, %43
  %149 = and i32 %43, %10
  %150 = add i32 %64, 1
  %151 = and i32 %64, %29
  %152 = or i32 %24, %42
  %153 = or i32 %29, %85
  %154 = and i32 %43, %2
  %155 = and i32 %29, %114
  %156 = or i32 %45, %43
  %157 = or i32 %35, %0
  %158 = or i32 %9, %119
  %159 = xor i32 %9, %59
  %160 = and i32 %26, %2
  %161 = xor i32 %53, %51
  %162 = or i32 %45, %35
  %163 = xor i32 %59, %0
  %164 = or i32 %93, %53
  %165 = and i32 %46, %85
  %166 = or i32 %59, %38
  %167 = or i32 %41, %30
  %168 = and i32 %41, %114
  %169 = or i32 %94, %163
  %170 = xor i32 %65, %2
  %171 = or i32 %40, %53
  %172 = and i32 %43, %76
  %173 = xor i32 %80, %87
  %174 = shl i32 %173, 1
  %175 = and i32 %43, %29
  %176 = add i32 %50, 1
  %177 = or i32 %45, %85
  %178 = xor i32 %114, %2
  %179 = xor i32 %9, %64
  %180 = or i32 %41, %65
  %181 = or i32 %24, %76
  %182 = xor i32 %163, %100
  %183 = and i32 %107, %0
  %184 = shl i32 %183, 1
  %185 = or i32 %53, %29
  %186 = and i32 %41, %54
  %187 = or i32 %85, %2
  %188 = xor i32 %9, %1
  %189 = or i32 %76, %30
  %190 = shl i32 %59, 1
  %191 = xor i32 %84, %1
  %192 = and i32 %76, %114
  %193 = or i32 %45, %93
  %194 = or i32 %30, %2
  %195 = and i32 %93, %38
  %196 = and i32 %40, %0
  %197 = or i32 %195, %196
  %198 = and i32 %34, %0
  %199 = shl i32 %198, 1
  %200 = and i32 %51, %38
  %201 = xor i32 %68, %24
  %202 = and i32 %32, %1
  %203 = or i32 %24, %29
  %204 = and i32 %43, %46
  %205 = and i32 %76, %1
  %206 = xor i32 %40, %0
  %207 = xor i32 %126, %206
  %208 = shl i32 %207, 1
  %209 = or i32 %59, %0
  %210 = or i32 %94, %75
  %211 = xor i32 %24, %2
  %212 = or i32 %65, %2
  %213 = or i32 %80, %125
  %214 = xor i32 %59, %24
  %215 = or i32 %45, %1
  %216 = shl i32 %215, 1
  %217 = xor i32 %81, -1
  %218 = xor i32 %80, %217
  %219 = xor i32 %196, -1
  %220 = xor i32 %195, %219
  %221 = and i32 %27, %64
  %222 = xor i32 %34, %0
  %223 = xor i32 %10, %1
  %224 = and i32 %51, %0
  %225 = or i32 %76, %48
  %226 = and i32 %27, %48
  %227 = or i32 %53, %76
  %228 = and i32 %68, %43
  %229 = and i32 %68, %1
  %230 = or i32 %51, %0
  %231 = or i32 %40, %30
  %232 = xor i32 %41, %0
  %233 = xor i32 %94, %206
  %234 = or i32 %76, %85
  %235 = or i32 %27, %65
  %236 = or i32 %41, %0
  %237 = xor i32 %34, %24
  %238 = and i32 %119, %38
  %239 = mul i32 %238, -24
  %240 = and i32 %50, %38
  %241 = and i32 %119, %0
  %242 = mul i32 %241, 9
  %243 = and i32 %50, %0
  %244 = shl i32 %243, 3
  %245 = and i32 %35, %38
  %246 = mul i32 %245, -31
  %247 = and i32 %35, %0
  %248 = mul i32 %247, -14
  %249 = sub i32 %32, %43
  %250 = sub i32 %249, %45
  %251 = add i32 %250, %31
  %252 = add i32 %251, %22
  %253 = add i32 %252, %82
  %254 = add i32 %253, %21
  %255 = mul i32 %254, 3
  %256 = sub i32 %178, %240
  %257 = add i32 %256, %15
  %258 = add i32 %257, %74
  %259 = mul i32 %258, 5
  %260 = add i32 %192, %122
  %261 = shl i32 %260, 2
  %262 = add i32 %13, %24
  %263 = add i32 %54, %1
  %264 = add i32 %263, %30
  %265 = add i32 %264, %76
  %266 = add i32 %265, %32
  %267 = add i32 %266, %143
  %268 = add i32 %267, %129
  %269 = add i32 %268, %68
  %270 = add i32 %269, %55
  %271 = add i32 %270, %41
  %272 = add i32 %271, %186
  %273 = add i32 %272, %214
  %274 = add i32 %273, %157
  %275 = add i32 %274, %123
  %276 = add i32 %275, %121
  %277 = add i32 %276, %118
  %278 = add i32 %277, %75
  %279 = sub i32 %278, %262
  %280 = shl i32 %279, 1
  %281 = sub i32 %2, %1
  %282 = add i32 %281, %150
  %283 = add i32 %282, %64
  %284 = add i32 %283, %43
  %285 = add i32 %284, %3
  %286 = sub i32 %285, %25
  %287 = add i32 %286, %35
  %288 = sub i32 %287, %9
  %289 = sub i32 %288, %83
  %290 = sub i32 %289, %102
  %291 = add i32 %290, %124
  %292 = sub i32 %291, %132
  %293 = add i32 %292, %84
  %294 = add i32 %293, %134
  %295 = add i32 %294, %138
  %296 = add i32 %295, %146
  %297 = add i32 %296, %119
  %298 = add i32 %297, %151
  %299 = add i32 %298, %153
  %300 = sub i32 %299, %154
  %301 = add i32 %300, %155
  %302 = sub i32 %301, %160
  %303 = add i32 %302, %170
  %304 = add i32 %303, %175
  %305 = add i32 %304, %176
  %306 = sub i32 %305, %185
  %307 = add i32 %306, %187
  %308 = add i32 %307, %194
  %309 = add i32 %308, %203
  %310 = add i32 %309, %211
  %311 = sub i32 %310, %212
  %312 = add i32 %311, %4
  %313 = sub i32 %312, %28
  %314 = add i32 %313, %33
  %315 = sub i32 %314, %39
  %316 = sub i32 %315, %44
  %317 = sub i32 %316, %47
  %318 = sub i32 %317, %49
  %319 = add i32 %318, %52
  %320 = sub i32 %319, %58
  %321 = sub i32 %320, %60
  %322 = sub i32 %321, %63
  %323 = sub i32 %322, %66
  %324 = sub i32 %323, %67
  %325 = sub i32 %324, %77
  %326 = add i32 %325, %78
  %327 = sub i32 %326, %79
  %328 = add i32 %327, %86
  %329 = sub i32 %328, %91
  %330 = sub i32 %329, %92
  %331 = add i32 %330, %98
  %332 = sub i32 %331, %103
  %333 = sub i32 %332, %104
  %334 = add i32 %333, %108
  %335 = add i32 %334, %109
  %336 = sub i32 %335, %110
  %337 = add i32 %336, %113
  %338 = add i32 %337, %115
  %339 = add i32 %338, %120
  %340 = add i32 %339, %130
  %341 = sub i32 %340, %131
  %342 = sub i32 %341, %133
  %343 = sub i32 %342, %137
  %344 = add i32 %343, %139
  %345 = add i32 %344, %140
  %346 = add i32 %345, %141
  %347 = add i32 %346, %142
  %348 = add i32 %347, %144
  %349 = sub i32 %348, %147
  %350 = sub i32 %349, %148
  %351 = add i32 %350, %149
  %352 = sub i32 %351, %152
  %353 = add i32 %352, %156
  %354 = add i32 %353, %158
  %355 = add i32 %354, %159
  %356 = add i32 %355, %161
  %357 = sub i32 %356, %162
  %358 = sub i32 %357, %163
  %359 = sub i32 %358, %164
  %360 = sub i32 %359, %165
  %361 = sub i32 %360, %166
  %362 = sub i32 %361, %167
  %363 = sub i32 %362, %168
  %364 = sub i32 %363, %171
  %365 = sub i32 %364, %172
  %366 = sub i32 %365, %177
  %367 = add i32 %366, %179
  %368 = sub i32 %367, %180
  %369 = add i32 %368, %99
  %370 = sub i32 %369, %181
  %371 = add i32 %370, %188
  %372 = sub i32 %371, %189
  %373 = sub i32 %372, %190
  %374 = add i32 %373, %191
  %375 = sub i32 %374, %193
  %376 = add i32 %375, %200
  %377 = sub i32 %376, %201
  %378 = add i32 %377, %202
  %379 = sub i32 %378, %204
  %380 = sub i32 %379, %205
  %381 = sub i32 %380, %209
  %382 = add i32 %381, %221
  %383 = sub i32 %382, %222
  %384 = sub i32 %383, %223
  %385 = sub i32 %384, %206
  %386 = sub i32 %385, %224
  %387 = add i32 %386, %225
  %388 = add i32 %387, %226
  %389 = add i32 %388, %227
  %390 = add i32 %389, %228
  %391 = add i32 %390, %229
  %392 = sub i32 %391, %230
  %393 = sub i32 %392, %231
  %394 = add i32 %393, %232
  %395 = add i32 %394, %234
  %396 = add i32 %395, %235
  %397 = add i32 %396, %196
  %398 = add i32 %397, %236
  %399 = add i32 %398, %237
  %400 = add i32 %399, %195
  %401 = add i32 %400, %16
  %402 = sub i32 %401, %19
  %403 = sub i32 %402, %20
  %404 = sub i32 %403, %37
  %405 = sub i32 %404, %57
  %406 = sub i32 %405, %62
  %407 = add i32 %406, %101
  %408 = sub i32 %407, %106
  %409 = sub i32 %408, %112
  %410 = sub i32 %409, %117
  %411 = sub i32 %410, %136
  %412 = add i32 %411, %145
  %413 = sub i32 %412, %169
  %414 = add i32 %413, %182
  %415 = sub i32 %414, %184
  %416 = add i32 %415, %197
  %417 = sub i32 %416, %199
  %418 = sub i32 %417, %210
  %419 = sub i32 %418, %213
  %420 = sub i32 %419, %216
  %421 = sub i32 %420, %218
  %422 = sub i32 %421, %220
  %423 = sub i32 %422, %233
  %424 = add i32 %423, %239
  %425 = add i32 %424, %242
  %426 = sub i32 %425, %244
  %427 = add i32 %426, %246
  %428 = add i32 %427, %248
  %429 = sub i32 %428, %18
  %430 = sub i32 %429, %23
  %431 = sub i32 %430, %174
  %432 = add i32 %431, %261
  %433 = sub i32 %432, %90
  %434 = sub i32 %433, %97
  %435 = sub i32 %434, %128
  %436 = sub i32 %435, %208
  %437 = add i32 %436, %259
  %438 = add i32 %437, %255
  %439 = add i32 %438, %280
  %440 = icmp eq i32 %12, %439
  %441 = select i1 %440, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %442 = tail call i32 @puts(i8* nonnull dereferenceable(1) %441)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
