; ModuleID = '../.././c_source_file/1564_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1564_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %2, %0
  %8 = or i32 %7, %1
  %9 = sub i32 %6, %8
  %10 = xor i32 %3, -1
  %11 = xor i32 %4, -1
  %12 = or i32 %4, %3
  %13 = or i32 %11, %3
  %14 = shl i32 %12, 2
  %15 = xor i32 %14, -4
  %16 = and i32 %11, %3
  %17 = and i32 %4, %3
  %18 = xor i32 %2, -1
  %19 = and i32 %18, %0
  %20 = or i32 %18, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %19, %21
  %23 = or i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %7, %24
  %26 = xor i32 %19, %1
  %27 = shl i32 %26, 1
  %28 = xor i32 %1, -1
  %29 = and i32 %28, %2
  %30 = and i32 %29, %0
  %31 = xor i32 %2, %1
  %32 = or i32 %31, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %30, %33
  %35 = xor i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %2
  %38 = shl i32 %24, 1
  %39 = or i32 %2, %0
  %40 = xor i32 %39, %1
  %41 = and i32 %2, %0
  %42 = xor i32 %41, %1
  %43 = or i32 %18, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %1, %0
  %46 = or i32 %45, %21
  %47 = or i32 %24, %2
  %48 = or i32 %28, %0
  %49 = xor i32 %41, %48
  %50 = xor i32 %19, -1
  %51 = and i32 %50, %36
  %52 = xor i32 %31, -1
  %53 = and i32 %48, %52
  %54 = xor i32 %7, -1
  %55 = and i32 %54, %1
  %56 = and i32 %31, %48
  %57 = and i32 %2, %1
  %58 = and i32 %31, %23
  %59 = shl i32 %58, 1
  %60 = xor i32 %45, -1
  %61 = and i32 %60, %2
  %62 = and i32 %28, %0
  %63 = or i32 %62, %18
  %64 = shl i32 %63, 1
  %65 = xor i32 %0, -1
  %66 = and i32 %52, %65
  %67 = or i32 %2, %1
  %68 = xor i32 %67, %45
  %69 = or i32 %28, %2
  %70 = xor i32 %69, -1
  %71 = or i32 %70, %0
  %72 = xor i32 %30, %71
  %73 = and i32 %57, %0
  %74 = and i32 %31, %65
  %75 = or i32 %73, %74
  %76 = shl i32 %75, 1
  %77 = xor i32 %67, -1
  %78 = xor i32 %77, %0
  %79 = and i32 %35, %54
  %80 = and i32 %43, %1
  %81 = shl i32 %80, 1
  %82 = and i32 %18, %1
  %83 = xor i32 %82, -1
  %84 = and i32 %83, %65
  %85 = xor i32 %31, %0
  %86 = xor i32 %73, %85
  %87 = and i32 %39, %28
  %88 = or i32 %62, %54
  %89 = and i32 %7, %23
  %90 = shl i32 %89, 1
  %91 = xor i32 %20, %45
  %92 = and i32 %39, %1
  %93 = and i32 %20, %0
  %94 = and i32 %54, %36
  %95 = or i32 %19, %28
  %96 = xor i32 %24, %2
  %97 = xor i32 %45, %2
  %98 = xor i32 %39, %45
  %99 = or i32 %19, %57
  %100 = shl i32 %19, 1
  %101 = xor i32 %57, -1
  %102 = xor i32 %19, %101
  %103 = and i32 %7, %28
  %104 = or i32 %54, %36
  %105 = and i32 %52, %0
  %106 = or i32 %41, %1
  %107 = xor i32 %43, %1
  %108 = and i32 %23, %18
  %109 = or i32 %62, %2
  %110 = xor i32 %41, %83
  %111 = xor i32 %41, -1
  %112 = and i32 %111, %1
  %113 = and i32 %54, %28
  %114 = and i32 %20, %65
  %115 = and i32 %57, %65
  %116 = and i32 %67, %0
  %117 = or i32 %115, %116
  %118 = and i32 %39, %35
  %119 = or i32 %54, %24
  %120 = shl i32 %119, 2
  %121 = xor i32 %39, -1
  %122 = or i32 %121, %36
  %123 = and i32 %35, %111
  %124 = or i32 %35, %18
  %125 = or i32 %83, %0
  %126 = and i32 %111, %28
  %127 = and i32 %29, %65
  %128 = and i32 %69, %0
  %129 = or i32 %127, %128
  %130 = or i32 %52, %65
  %131 = xor i32 %48, -1
  %132 = or i32 %7, %131
  %133 = or i32 %54, %1
  %134 = xor i32 %41, %67
  %135 = or i32 %31, %62
  %136 = or i32 %35, %54
  %137 = xor i32 %21, %0
  %138 = and i32 %31, %0
  %139 = xor i32 %44, %1
  %140 = or i32 %20, %65
  %141 = or i32 %45, %52
  %142 = xor i32 %41, %23
  %143 = or i32 %7, %45
  %144 = xor i32 %115, -1
  %145 = xor i32 %138, %144
  %146 = xor i32 %69, %0
  %147 = or i32 %30, %146
  %148 = or i32 %121, %28
  %149 = or i32 %35, %121
  %150 = xor i32 %62, %83
  %151 = xor i32 %52, %0
  %152 = or i32 %77, %0
  %153 = or i32 %18, %24
  %154 = xor i32 %85, -1
  %155 = xor i32 %30, %154
  %156 = or i32 %21, %0
  %157 = and i32 %101, %0
  %158 = and i32 %83, %0
  %159 = or i32 %21, %65
  %160 = xor i32 %128, -1
  %161 = xor i32 %127, %160
  %162 = xor i32 %67, %0
  %163 = or i32 %73, %162
  %164 = or i32 %41, %28
  %165 = or i32 %35, %44
  %166 = xor i32 %62, %2
  %167 = shl i32 %166, 1
  %168 = and i32 %43, %36
  %169 = xor i32 %62, -1
  %170 = and i32 %169, %2
  %171 = and i32 %111, %36
  %172 = add i32 %62, 1
  %173 = or i32 %101, %0
  %174 = or i32 %7, %36
  %175 = and i32 %35, %2
  %176 = and i32 %50, %28
  %177 = shl i32 %176, 1
  %178 = and i32 %54, %60
  %179 = xor i32 %82, %0
  %180 = or i32 %41, %131
  %181 = add i32 %39, 1
  %182 = or i32 %67, %0
  %183 = xor i32 %121, %1
  %184 = xor i32 %19, %20
  %185 = and i32 %35, %50
  %186 = xor i32 %57, %0
  %187 = or i32 %41, %82
  %188 = xor i32 %162, -1
  %189 = xor i32 %73, %188
  %190 = or i32 %73, %154
  %191 = or i32 %31, %65
  %192 = or i32 %82, %0
  %193 = shl i32 %192, 1
  %194 = and i32 %48, %18
  %195 = and i32 %52, %60
  %196 = and i32 %50, %1
  %197 = and i32 %18, %169
  %198 = xor i32 %146, -1
  %199 = xor i32 %30, %198
  %200 = xor i32 %60, %2
  %201 = or i32 %52, %131
  %202 = or i32 %54, %131
  %203 = and i32 %101, %65
  %204 = and i32 %7, %35
  %205 = and i32 %7, %36
  %206 = and i32 %43, %35
  %207 = and i32 %23, %2
  %208 = shl i32 %207, 1
  %209 = or i32 %82, %65
  %210 = or i32 %101, %65
  %211 = or i32 %45, %2
  %212 = and i32 %23, %54
  %213 = xor i32 %83, %0
  %214 = xor i32 %191, -1
  %215 = or i32 %127, %214
  %216 = or i32 %57, %62
  %217 = shl i32 %216, 1
  %218 = or i32 %83, %65
  %219 = or i32 %82, %62
  %220 = or i32 %19, %35
  %221 = add i32 %41, 1
  %222 = or i32 %57, %65
  %223 = xor i32 %131, %2
  %224 = and i32 %31, %60
  %225 = or i32 %45, %77
  %226 = xor i32 %74, 2147483647
  %227 = xor i32 %226, %73
  %228 = or i32 %52, %0
  %229 = and i32 %18, %36
  %230 = or i32 %41, %35
  %231 = or i32 %18, %131
  %232 = and i32 %54, %169
  %233 = and i32 %7, %169
  %234 = or i32 %20, %0
  %235 = xor i32 %62, %101
  %236 = or i32 %7, %28
  %237 = shl i32 %236, 1
  %238 = xor i32 %127, %191
  %239 = and i32 %52, %169
  %240 = or i32 %45, %121
  %241 = add i32 %1, 1
  %242 = xor i32 %101, %0
  %243 = xor i32 %20, %0
  %244 = and i32 %23, %52
  %245 = or i32 %41, %77
  %246 = and i32 %36, %2
  %247 = or i32 %31, %24
  %248 = shl i32 %85, 2
  %249 = xor i32 %116, %144
  %250 = and i32 %67, %65
  %251 = or i32 %67, %65
  %252 = shl i32 %251, 1
  %253 = and i32 %35, %18
  %254 = xor i32 %169, %2
  %255 = and i32 %48, %2
  %256 = or i32 %44, %36
  %257 = shl i32 %256, 1
  %258 = add i32 %20, 1
  %259 = and i32 %77, %65
  %260 = and i32 %82, %65
  %261 = mul i32 %260, -13
  %262 = and i32 %77, %0
  %263 = mul i32 %262, -15
  %264 = and i32 %82, %0
  %265 = mul i32 %264, 12
  %266 = and i32 %21, %65
  %267 = shl i32 %115, 1
  %268 = and i32 %21, %0
  %269 = mul i32 %268, 9
  %270 = add i32 %23, %62
  %271 = add i32 %270, %254
  %272 = add i32 %271, %77
  %273 = add i32 %272, %20
  %274 = add i32 %273, %83
  %275 = add i32 %274, %170
  %276 = add i32 %275, %44
  %277 = add i32 %276, %218
  %278 = add i32 %277, %195
  %279 = add i32 %278, %191
  %280 = add i32 %279, %178
  %281 = add i32 %280, %173
  %282 = add i32 %281, %148
  %283 = add i32 %282, %130
  %284 = add i32 %283, %104
  %285 = add i32 %284, %99
  %286 = add i32 %285, %68
  %287 = sub i32 %286, %4
  %288 = add i32 %287, %227
  %289 = shl i32 %288, 1
  %290 = add i32 %211, %246
  %291 = sub i32 %54, %290
  %292 = sub i32 %291, %67
  %293 = add i32 %292, %266
  %294 = add i32 %293, %73
  %295 = sub i32 %294, %259
  %296 = sub i32 %295, %183
  %297 = mul i32 %296, 5
  %298 = add i32 %223, %0
  %299 = sub i32 %298, %41
  %300 = sub i32 %299, %16
  %301 = add i32 %300, %161
  %302 = mul i32 %301, 3
  %303 = add i32 %241, %0
  %304 = add i32 %303, %48
  %305 = add i32 %304, %45
  %306 = add i32 %305, %18
  %307 = add i32 %306, %172
  %308 = add i32 %307, %10
  %309 = add i32 %308, %37
  %310 = sub i32 %309, %38
  %311 = add i32 %310, %47
  %312 = add i32 %311, %50
  %313 = add i32 %312, %57
  %314 = sub i32 %313, %61
  %315 = sub i32 %314, %96
  %316 = sub i32 %315, %97
  %317 = add i32 %316, %108
  %318 = add i32 %317, %109
  %319 = sub i32 %318, %124
  %320 = sub i32 %319, %153
  %321 = add i32 %320, %175
  %322 = add i32 %321, %181
  %323 = sub i32 %322, %43
  %324 = sub i32 %323, %194
  %325 = sub i32 %324, %197
  %326 = sub i32 %325, %200
  %327 = add i32 %326, %82
  %328 = add i32 %327, %221
  %329 = sub i32 %328, %229
  %330 = sub i32 %329, %231
  %331 = sub i32 %330, %253
  %332 = sub i32 %331, %255
  %333 = add i32 %332, %258
  %334 = add i32 %333, %39
  %335 = add i32 %334, %11
  %336 = add i32 %335, %22
  %337 = add i32 %336, %25
  %338 = sub i32 %337, %40
  %339 = add i32 %338, %42
  %340 = sub i32 %339, %46
  %341 = add i32 %340, %32
  %342 = sub i32 %341, %49
  %343 = sub i32 %342, %51
  %344 = sub i32 %343, %53
  %345 = sub i32 %344, %55
  %346 = sub i32 %345, %56
  %347 = sub i32 %346, %64
  %348 = add i32 %347, %66
  %349 = sub i32 %348, %78
  %350 = sub i32 %349, %79
  %351 = sub i32 %350, %84
  %352 = sub i32 %351, %87
  %353 = add i32 %352, %88
  %354 = sub i32 %353, %91
  %355 = sub i32 %354, %92
  %356 = add i32 %355, %93
  %357 = add i32 %356, %94
  %358 = sub i32 %357, %95
  %359 = sub i32 %358, %98
  %360 = sub i32 %359, %100
  %361 = sub i32 %360, %102
  %362 = sub i32 %361, %103
  %363 = sub i32 %362, %105
  %364 = add i32 %363, %106
  %365 = sub i32 %364, %107
  %366 = add i32 %365, %110
  %367 = add i32 %366, %112
  %368 = add i32 %367, %113
  %369 = sub i32 %368, %114
  %370 = add i32 %369, %118
  %371 = add i32 %370, %122
  %372 = add i32 %371, %123
  %373 = sub i32 %372, %125
  %374 = sub i32 %373, %126
  %375 = sub i32 %374, %132
  %376 = add i32 %375, %133
  %377 = add i32 %376, %134
  %378 = add i32 %377, %135
  %379 = add i32 %378, %136
  %380 = sub i32 %379, %137
  %381 = sub i32 %380, %138
  %382 = add i32 %381, %139
  %383 = add i32 %382, %140
  %384 = sub i32 %383, %141
  %385 = sub i32 %384, %142
  %386 = add i32 %385, %143
  %387 = sub i32 %386, %149
  %388 = add i32 %387, %150
  %389 = add i32 %388, %151
  %390 = sub i32 %389, %152
  %391 = add i32 %390, %156
  %392 = sub i32 %391, %157
  %393 = sub i32 %392, %158
  %394 = add i32 %393, %159
  %395 = add i32 %394, %164
  %396 = add i32 %395, %165
  %397 = sub i32 %396, %167
  %398 = add i32 %397, %168
  %399 = add i32 %398, %171
  %400 = add i32 %399, %174
  %401 = sub i32 %400, %179
  %402 = add i32 %401, %180
  %403 = sub i32 %402, %182
  %404 = sub i32 %403, %184
  %405 = sub i32 %404, %185
  %406 = add i32 %405, %186
  %407 = sub i32 %406, %187
  %408 = add i32 %407, %196
  %409 = add i32 %408, %201
  %410 = sub i32 %409, %202
  %411 = sub i32 %410, %203
  %412 = add i32 %411, %204
  %413 = sub i32 %412, %205
  %414 = sub i32 %413, %206
  %415 = sub i32 %414, %208
  %416 = sub i32 %415, %209
  %417 = sub i32 %416, %210
  %418 = sub i32 %417, %212
  %419 = add i32 %418, %213
  %420 = add i32 %419, %219
  %421 = add i32 %420, %220
  %422 = add i32 %421, %222
  %423 = add i32 %422, %224
  %424 = add i32 %423, %225
  %425 = sub i32 %424, %228
  %426 = add i32 %425, %74
  %427 = add i32 %426, %230
  %428 = add i32 %427, %232
  %429 = add i32 %428, %233
  %430 = sub i32 %429, %234
  %431 = add i32 %430, %235
  %432 = add i32 %431, %239
  %433 = sub i32 %432, %116
  %434 = sub i32 %433, %240
  %435 = sub i32 %434, %242
  %436 = sub i32 %435, %243
  %437 = add i32 %436, %244
  %438 = add i32 %437, %245
  %439 = add i32 %438, %247
  %440 = sub i32 %439, %250
  %441 = add i32 %440, %12
  %442 = add i32 %441, %13
  %443 = sub i32 %442, %17
  %444 = sub i32 %443, %27
  %445 = add i32 %444, %34
  %446 = sub i32 %445, %59
  %447 = add i32 %446, %72
  %448 = sub i32 %447, %81
  %449 = add i32 %448, %86
  %450 = sub i32 %449, %90
  %451 = sub i32 %450, %117
  %452 = sub i32 %451, %120
  %453 = sub i32 %452, %129
  %454 = add i32 %453, %145
  %455 = sub i32 %454, %147
  %456 = add i32 %455, %155
  %457 = sub i32 %456, %163
  %458 = sub i32 %457, %177
  %459 = sub i32 %458, %189
  %460 = sub i32 %459, %190
  %461 = sub i32 %460, %193
  %462 = add i32 %461, %199
  %463 = add i32 %462, %215
  %464 = sub i32 %463, %217
  %465 = sub i32 %464, %237
  %466 = sub i32 %465, %238
  %467 = add i32 %466, %248
  %468 = add i32 %467, %249
  %469 = sub i32 %468, %252
  %470 = sub i32 %469, %257
  %471 = add i32 %470, %261
  %472 = add i32 %471, %263
  %473 = add i32 %472, %265
  %474 = sub i32 %473, %267
  %475 = add i32 %474, %269
  %476 = sub i32 %475, %76
  %477 = sub i32 %476, %15
  %478 = add i32 %477, %302
  %479 = add i32 %478, %297
  %480 = add i32 %479, %289
  %481 = icmp eq i32 %9, %480
  %482 = select i1 %481, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %483 = tail call i32 @puts(i8* nonnull dereferenceable(1) %482)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
