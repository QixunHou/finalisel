digraph "DFG for'main' function" {
	Node0x203ce68[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x203cee8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x203cf78[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x203cfd8[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x203d088[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x203d4b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x203d598[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x203d698[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x203d758[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x203d808[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x203d8c8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x203d978[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x20377f0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x203db78[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x203eae8[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x203f158[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x203f1b8[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x203f2c8[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0x203f528[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x203f688[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x203f798[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x203f8a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x203f968[shape=record, label="  ret i32 0"];
	Node0x203ce68 -> Node0x203cee8;
	Node0x203cee8 -> Node0x203cf78;
	Node0x203cf78 -> Node0x203cfd8;
	Node0x203cfd8 -> Node0x203d088;
	Node0x203d088 -> Node0x203d4b8;
	Node0x203d4b8 -> Node0x203d598;
	Node0x203d598 -> Node0x203d698;
	Node0x203d698 -> Node0x203d758;
	Node0x203d758 -> Node0x203d808;
	Node0x203d808 -> Node0x203d8c8;
	Node0x203d8c8 -> Node0x203d978;
	Node0x203d978 -> Node0x20377f0;
	Node0x20377f0 -> Node0x203db78;
	Node0x203db78 -> Node0x203eae8;
	Node0x203eae8 -> Node0x203f158;
	Node0x203f158 -> Node0x203f1b8;
	Node0x203f1b8 -> Node0x203f2c8;
	Node0x203f2c8 -> Node0x203f528;
	Node0x203f528 -> Node0x203f688;
	Node0x203f688 -> Node0x203f798;
	Node0x203f798 -> Node0x203f8a8;
	Node0x203f8a8 -> Node0x203f968;
edge [color=red]
	Node0x203ce68 -> Node0x203d088;
	Node0x203d088 -> Node0x203d4b8;
	Node0x203cee8 -> Node0x203d598;
	Node0x203d598 -> Node0x203d698;
	Node0x203cf78 -> Node0x203d758;
	Node0x203d758 -> Node0x203d808;
	Node0x203cfd8 -> Node0x203d8c8;
	Node0x203d8c8 -> Node0x203d978;
	Node0x203ce68 -> Node0x20377f0;
	Node0x203cee8 -> Node0x20377f0;
	Node0x203cf78 -> Node0x20377f0;
	Node0x203cfd8 -> Node0x20377f0;
	Node0x203ce68 -> Node0x203db78;
	Node0x203cee8 -> Node0x203eae8;
	Node0x203cf78 -> Node0x203f158;
	Node0x203cfd8 -> Node0x203f1b8;
	Node0x203db78 -> Node0x203f2c8;
	Node0x203eae8 -> Node0x203f2c8;
	Node0x203f158 -> Node0x203f2c8;
	Node0x203f1b8 -> Node0x203f2c8;
	Node0x203d8c8 -> Node0x203f528;
	Node0x203d758 -> Node0x203f688;
	Node0x203d598 -> Node0x203f798;
	Node0x203d088 -> Node0x203f8a8;
}
