digraph "DFG for'crackme' function" {
	Node0x203a7c0[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x203a830[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0x203a8a0[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x203af20[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x203af90[shape=record, label="  %9 = and i32 %8, %3"];
	Node0x203b000[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x203b070[shape=record, label="  %11 = add i32 %7, %10"];
	Node0x203b0e0[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x203b180[shape=record, label="  %13 = shl i32 %1, 1"];
	Node0x203b220[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x203b290[shape=record, label="  %15 = xor i32 %2, %1"];
	Node0x203b330[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x203b3a0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x203b410[shape=record, label="  %18 = xor i32 %2, -1"];
	Node0x203b480[shape=record, label="  %19 = or i32 %18, %1"];
	Node0x203b4f0[shape=record, label="  %20 = shl i32 %15, 1"];
	Node0x203b560[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x203b5d0[shape=record, label="  %22 = xor i32 %5, -1"];
	Node0x203b670[shape=record, label="  %23 = mul i32 %22, -6"];
	Node0x203b6e0[shape=record, label="  %24 = xor i32 %19, -1"];
	Node0x203b750[shape=record, label="  %25 = and i32 %18, %1"];
	Node0x203b7f0[shape=record, label="  %26 = mul i32 %12, -5"];
	Node0x203b860[shape=record, label="  %27 = xor i32 %6, -1"];
	Node0x203b8d0[shape=record, label="  %28 = or i32 %3, %0"];
	Node0x203b940[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x203b9b0[shape=record, label="  %30 = add i32 %28, 1"];
	Node0x203ba50[shape=record, label="  %31 = xor i32 %3, 2147483647"];
	Node0x203bac0[shape=record, label="  %32 = and i32 %31, %0"];
	Node0x203bd40[shape=record, label="  %33 = shl i32 %9, 1"];
	Node0x203bdb0[shape=record, label="  %34 = and i32 %3, %0"];
	Node0x203be20[shape=record, label="  %35 = shl i32 %34, 1"];
	Node0x203be90[shape=record, label="  %36 = add i32 %25, %24"];
	Node0x203bf00[shape=record, label="  %37 = add i32 %36, %30"];
	Node0x203bfa0[shape=record, label="  %38 = mul i32 %37, 3"];
	Node0x203c010[shape=record, label="  %39 = add i32 %32, %3"];
	Node0x203c080[shape=record, label="  %40 = shl i32 %39, 1"];
	Node0x203c120[shape=record, label="  %41 = sub i32 -3, %0"];
	Node0x203c190[shape=record, label="  %42 = add i32 %41, %1"];
	Node0x203c200[shape=record, label="  %43 = add i32 %42, %12"];
	Node0x203c270[shape=record, label="  %44 = add i32 %43, %14"];
	Node0x203c2e0[shape=record, label="  %45 = add i32 %44, %19"];
	Node0x203c350[shape=record, label="  %46 = add i32 %45, %17"];
	Node0x203c3c0[shape=record, label="  %47 = add i32 %46, %23"];
	Node0x203c430[shape=record, label="  %48 = add i32 %47, %26"];
	Node0x203c4a0[shape=record, label="  %49 = add i32 %48, %27"];
	Node0x203c510[shape=record, label="  %50 = add i32 %49, %21"];
	Node0x203c580[shape=record, label="  %51 = sub i32 %50, %29"];
	Node0x203c5f0[shape=record, label="  %52 = sub i32 %51, %33"];
	Node0x203c660[shape=record, label="  %53 = sub i32 %52, %35"];
	Node0x203c6d0[shape=record, label="  %54 = add i32 %53, %38"];
	Node0x203c740[shape=record, label="  %55 = add i32 %54, %40"];
	Node0x203c7b0[shape=record, label="  %56 = icmp eq i32 %11, %55"];
	Node0x1fdb268[shape=record, label="  %57 = select i1 %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x203cc50[shape=record, label="  %58 = tail call i32 @puts(i8* nonnull dereferenceable(1) %57)"];
	Node0x203cca0[shape=record, label="  ret void"];
	Node0x203a7c0 -> Node0x203a830;
	Node0x203a830 -> Node0x203a8a0;
	Node0x203a8a0 -> Node0x203af20;
	Node0x203af20 -> Node0x203af90;
	Node0x203af90 -> Node0x203b000;
	Node0x203b000 -> Node0x203b070;
	Node0x203b070 -> Node0x203b0e0;
	Node0x203b0e0 -> Node0x203b180;
	Node0x203b180 -> Node0x203b220;
	Node0x203b220 -> Node0x203b290;
	Node0x203b290 -> Node0x203b330;
	Node0x203b330 -> Node0x203b3a0;
	Node0x203b3a0 -> Node0x203b410;
	Node0x203b410 -> Node0x203b480;
	Node0x203b480 -> Node0x203b4f0;
	Node0x203b4f0 -> Node0x203b560;
	Node0x203b560 -> Node0x203b5d0;
	Node0x203b5d0 -> Node0x203b670;
	Node0x203b670 -> Node0x203b6e0;
	Node0x203b6e0 -> Node0x203b750;
	Node0x203b750 -> Node0x203b7f0;
	Node0x203b7f0 -> Node0x203b860;
	Node0x203b860 -> Node0x203b8d0;
	Node0x203b8d0 -> Node0x203b940;
	Node0x203b940 -> Node0x203b9b0;
	Node0x203b9b0 -> Node0x203ba50;
	Node0x203ba50 -> Node0x203bac0;
	Node0x203bac0 -> Node0x203bd40;
	Node0x203bd40 -> Node0x203bdb0;
	Node0x203bdb0 -> Node0x203be20;
	Node0x203be20 -> Node0x203be90;
	Node0x203be90 -> Node0x203bf00;
	Node0x203bf00 -> Node0x203bfa0;
	Node0x203bfa0 -> Node0x203c010;
	Node0x203c010 -> Node0x203c080;
	Node0x203c080 -> Node0x203c120;
	Node0x203c120 -> Node0x203c190;
	Node0x203c190 -> Node0x203c200;
	Node0x203c200 -> Node0x203c270;
	Node0x203c270 -> Node0x203c2e0;
	Node0x203c2e0 -> Node0x203c350;
	Node0x203c350 -> Node0x203c3c0;
	Node0x203c3c0 -> Node0x203c430;
	Node0x203c430 -> Node0x203c4a0;
	Node0x203c4a0 -> Node0x203c510;
	Node0x203c510 -> Node0x203c580;
	Node0x203c580 -> Node0x203c5f0;
	Node0x203c5f0 -> Node0x203c660;
	Node0x203c660 -> Node0x203c6d0;
	Node0x203c6d0 -> Node0x203c740;
	Node0x203c740 -> Node0x203c7b0;
	Node0x203c7b0 -> Node0x1fdb268;
	Node0x1fdb268 -> Node0x203cc50;
	Node0x203cc50 -> Node0x203cca0;
edge [color=red]
	Node0x203a830 -> Node0x203a8a0;
	Node0x203a7c0 -> Node0x203a8a0;
	Node0x203af20 -> Node0x203af90;
	Node0x203af90 -> Node0x203b000;
	Node0x203a8a0 -> Node0x203b070;
	Node0x203b000 -> Node0x203b070;
	Node0x203b180 -> Node0x203b220;
	Node0x203b290 -> Node0x203b330;
	Node0x203b330 -> Node0x203b3a0;
	Node0x203b410 -> Node0x203b480;
	Node0x203b290 -> Node0x203b4f0;
	Node0x203b4f0 -> Node0x203b560;
	Node0x203a7c0 -> Node0x203b5d0;
	Node0x203b5d0 -> Node0x203b670;
	Node0x203b480 -> Node0x203b6e0;
	Node0x203b410 -> Node0x203b750;
	Node0x203b0e0 -> Node0x203b7f0;
	Node0x203a830 -> Node0x203b860;
	Node0x203b8d0 -> Node0x203b940;
	Node0x203b8d0 -> Node0x203b9b0;
	Node0x203ba50 -> Node0x203bac0;
	Node0x203af90 -> Node0x203bd40;
	Node0x203bdb0 -> Node0x203be20;
	Node0x203b750 -> Node0x203be90;
	Node0x203b6e0 -> Node0x203be90;
	Node0x203be90 -> Node0x203bf00;
	Node0x203b9b0 -> Node0x203bf00;
	Node0x203bf00 -> Node0x203bfa0;
	Node0x203bac0 -> Node0x203c010;
	Node0x203c010 -> Node0x203c080;
	Node0x203c120 -> Node0x203c190;
	Node0x203c190 -> Node0x203c200;
	Node0x203b0e0 -> Node0x203c200;
	Node0x203c200 -> Node0x203c270;
	Node0x203b220 -> Node0x203c270;
	Node0x203c270 -> Node0x203c2e0;
	Node0x203b480 -> Node0x203c2e0;
	Node0x203c2e0 -> Node0x203c350;
	Node0x203b3a0 -> Node0x203c350;
	Node0x203c350 -> Node0x203c3c0;
	Node0x203b670 -> Node0x203c3c0;
	Node0x203c3c0 -> Node0x203c430;
	Node0x203b7f0 -> Node0x203c430;
	Node0x203c430 -> Node0x203c4a0;
	Node0x203b860 -> Node0x203c4a0;
	Node0x203c4a0 -> Node0x203c510;
	Node0x203b560 -> Node0x203c510;
	Node0x203c510 -> Node0x203c580;
	Node0x203b940 -> Node0x203c580;
	Node0x203c580 -> Node0x203c5f0;
	Node0x203bd40 -> Node0x203c5f0;
	Node0x203c5f0 -> Node0x203c660;
	Node0x203be20 -> Node0x203c660;
	Node0x203c660 -> Node0x203c6d0;
	Node0x203bfa0 -> Node0x203c6d0;
	Node0x203c6d0 -> Node0x203c740;
	Node0x203c080 -> Node0x203c740;
	Node0x203b070 -> Node0x203c7b0;
	Node0x203c740 -> Node0x203c7b0;
	Node0x203c7b0 -> Node0x1fdb268;
	Node0x1fdb268 -> Node0x203cc50;
}
