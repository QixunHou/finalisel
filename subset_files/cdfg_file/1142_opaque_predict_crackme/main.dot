digraph "DFG for'main' function" {
	Node0x8bec08[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x8bec88[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x8bed18[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x8bed78[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x8bee28[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x8bf258[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x8bf338[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x8bf438[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x8bf4f8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x8bf5a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x8bf668[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x8bf718[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x8b9780[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x8bf918[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x8c0888[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x8c0ef8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x8c0f58[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x8c1068[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0x8c12c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x8c1428[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x8c1538[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x8c1648[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x8c1708[shape=record, label="  ret i32 0"];
	Node0x8bec08 -> Node0x8bec88;
	Node0x8bec88 -> Node0x8bed18;
	Node0x8bed18 -> Node0x8bed78;
	Node0x8bed78 -> Node0x8bee28;
	Node0x8bee28 -> Node0x8bf258;
	Node0x8bf258 -> Node0x8bf338;
	Node0x8bf338 -> Node0x8bf438;
	Node0x8bf438 -> Node0x8bf4f8;
	Node0x8bf4f8 -> Node0x8bf5a8;
	Node0x8bf5a8 -> Node0x8bf668;
	Node0x8bf668 -> Node0x8bf718;
	Node0x8bf718 -> Node0x8b9780;
	Node0x8b9780 -> Node0x8bf918;
	Node0x8bf918 -> Node0x8c0888;
	Node0x8c0888 -> Node0x8c0ef8;
	Node0x8c0ef8 -> Node0x8c0f58;
	Node0x8c0f58 -> Node0x8c1068;
	Node0x8c1068 -> Node0x8c12c8;
	Node0x8c12c8 -> Node0x8c1428;
	Node0x8c1428 -> Node0x8c1538;
	Node0x8c1538 -> Node0x8c1648;
	Node0x8c1648 -> Node0x8c1708;
edge [color=red]
	Node0x8bec08 -> Node0x8bee28;
	Node0x8bee28 -> Node0x8bf258;
	Node0x8bec88 -> Node0x8bf338;
	Node0x8bf338 -> Node0x8bf438;
	Node0x8bed18 -> Node0x8bf4f8;
	Node0x8bf4f8 -> Node0x8bf5a8;
	Node0x8bed78 -> Node0x8bf668;
	Node0x8bf668 -> Node0x8bf718;
	Node0x8bec08 -> Node0x8b9780;
	Node0x8bec88 -> Node0x8b9780;
	Node0x8bed18 -> Node0x8b9780;
	Node0x8bed78 -> Node0x8b9780;
	Node0x8bec08 -> Node0x8bf918;
	Node0x8bec88 -> Node0x8c0888;
	Node0x8bed18 -> Node0x8c0ef8;
	Node0x8bed78 -> Node0x8c0f58;
	Node0x8bf918 -> Node0x8c1068;
	Node0x8c0888 -> Node0x8c1068;
	Node0x8c0ef8 -> Node0x8c1068;
	Node0x8c0f58 -> Node0x8c1068;
	Node0x8bf668 -> Node0x8c12c8;
	Node0x8bf4f8 -> Node0x8c1428;
	Node0x8bf338 -> Node0x8c1538;
	Node0x8bee28 -> Node0x8c1648;
}
