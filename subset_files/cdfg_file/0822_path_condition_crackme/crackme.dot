digraph "DFG for'crackme' function" {
	Node0x1ed1b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1ed1b90[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1ed1c50[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x1ed1cc0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x1ed1d30[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1ed1dd0[shape=record, label="  %8 = or i32 %6, 1"];
	Node0x1ed1e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1ed1ee0[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x1ed1f80[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0x1ed1ff0[shape=record, label="  %12 = xor i32 %7, %1"];
	Node0x1ed2060[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x1ed20d0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1ed2140[shape=record, label="  %15 = add i32 %9, %14"];
	Node0x1ed21e0[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x1ed2250[shape=record, label="  %17 = add i32 %4, %3"];
	Node0x1ed22c0[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1ed2330[shape=record, label="  %19 = sub i32 %7, %0"];
	Node0x1ed23a0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x1ed2410[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0x1ed2480[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x1ed24f0[shape=record, label="  %23 = add i32 %22, %18"];
	Node0x1ed2560[shape=record, label="  %24 = icmp eq i32 %8, %23"];
	Node0x1e72268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ed2a00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1ed2a50[shape=record, label="  ret void"];
	Node0x1ed1b20 -> Node0x1ed1b90;
	Node0x1ed1b90 -> Node0x1ed1c50;
	Node0x1ed1c50 -> Node0x1ed1cc0;
	Node0x1ed1cc0 -> Node0x1ed1d30;
	Node0x1ed1d30 -> Node0x1ed1dd0;
	Node0x1ed1dd0 -> Node0x1ed1e40;
	Node0x1ed1e40 -> Node0x1ed1ee0;
	Node0x1ed1ee0 -> Node0x1ed1f80;
	Node0x1ed1f80 -> Node0x1ed1ff0;
	Node0x1ed1ff0 -> Node0x1ed2060;
	Node0x1ed2060 -> Node0x1ed20d0;
	Node0x1ed20d0 -> Node0x1ed2140;
	Node0x1ed2140 -> Node0x1ed21e0;
	Node0x1ed21e0 -> Node0x1ed2250;
	Node0x1ed2250 -> Node0x1ed22c0;
	Node0x1ed22c0 -> Node0x1ed2330;
	Node0x1ed2330 -> Node0x1ed23a0;
	Node0x1ed23a0 -> Node0x1ed2410;
	Node0x1ed2410 -> Node0x1ed2480;
	Node0x1ed2480 -> Node0x1ed24f0;
	Node0x1ed24f0 -> Node0x1ed2560;
	Node0x1ed2560 -> Node0x1e72268;
	Node0x1e72268 -> Node0x1ed2a00;
	Node0x1ed2a00 -> Node0x1ed2a50;
edge [color=red]
	Node0x1ed1b20 -> Node0x1ed1b90;
	Node0x1ed1b90 -> Node0x1ed1c50;
	Node0x1ed1c50 -> Node0x1ed1cc0;
	Node0x1ed1cc0 -> Node0x1ed1dd0;
	Node0x1ed1e40 -> Node0x1ed1ee0;
	Node0x1ed1ee0 -> Node0x1ed1f80;
	Node0x1ed1d30 -> Node0x1ed1ff0;
	Node0x1ed2060 -> Node0x1ed20d0;
	Node0x1ed1e40 -> Node0x1ed2140;
	Node0x1ed20d0 -> Node0x1ed2140;
	Node0x1ed2140 -> Node0x1ed21e0;
	Node0x1ed1b90 -> Node0x1ed2250;
	Node0x1ed1b20 -> Node0x1ed2250;
	Node0x1ed2250 -> Node0x1ed22c0;
	Node0x1ed1d30 -> Node0x1ed2330;
	Node0x1ed2330 -> Node0x1ed23a0;
	Node0x1ed1ff0 -> Node0x1ed23a0;
	Node0x1ed23a0 -> Node0x1ed2410;
	Node0x1ed1f80 -> Node0x1ed2410;
	Node0x1ed2410 -> Node0x1ed2480;
	Node0x1ed21e0 -> Node0x1ed2480;
	Node0x1ed2480 -> Node0x1ed24f0;
	Node0x1ed22c0 -> Node0x1ed24f0;
	Node0x1ed1dd0 -> Node0x1ed2560;
	Node0x1ed24f0 -> Node0x1ed2560;
	Node0x1ed2560 -> Node0x1e72268;
	Node0x1e72268 -> Node0x1ed2a00;
}
