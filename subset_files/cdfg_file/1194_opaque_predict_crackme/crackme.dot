digraph "DFG for'crackme' function" {
	Node0x10bab50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x10babc0[shape=record, label="  %4 = xor i32 %3, %0"];
	Node0x10bac80[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0x10bacf0[shape=record, label="  %6 = sub i32 %5, %3"];
	Node0x10bad60[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x10badd0[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x10bae40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x10baeb0[shape=record, label="  %10 = or i32 %3, %0"];
	Node0x10baf20[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x10bafc0[shape=record, label="  %12 = shl i32 %8, 1"];
	Node0x10bb030[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x10bb0a0[shape=record, label="  %14 = or i32 %12, 1"];
	Node0x10bb110[shape=record, label="  %15 = add i32 %7, %11"];
	Node0x10bb180[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x10bb220[shape=record, label="  %17 = add i32 %0, 3"];
	Node0x10bb290[shape=record, label="  %18 = sub i32 %17, %8"];
	Node0x10bb300[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x10bb370[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x10bb3e0[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0x10bb450[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x10bb4c0[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x10bb530[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x10bb5a0[shape=record, label="  %25 = icmp eq i32 %6, %24"];
	Node0x105b268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10bba40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x10bba90[shape=record, label="  ret void"];
	Node0x10bab50 -> Node0x10babc0;
	Node0x10babc0 -> Node0x10bac80;
	Node0x10bac80 -> Node0x10bacf0;
	Node0x10bacf0 -> Node0x10bad60;
	Node0x10bad60 -> Node0x10badd0;
	Node0x10badd0 -> Node0x10bae40;
	Node0x10bae40 -> Node0x10baeb0;
	Node0x10baeb0 -> Node0x10baf20;
	Node0x10baf20 -> Node0x10bafc0;
	Node0x10bafc0 -> Node0x10bb030;
	Node0x10bb030 -> Node0x10bb0a0;
	Node0x10bb0a0 -> Node0x10bb110;
	Node0x10bb110 -> Node0x10bb180;
	Node0x10bb180 -> Node0x10bb220;
	Node0x10bb220 -> Node0x10bb290;
	Node0x10bb290 -> Node0x10bb300;
	Node0x10bb300 -> Node0x10bb370;
	Node0x10bb370 -> Node0x10bb3e0;
	Node0x10bb3e0 -> Node0x10bb450;
	Node0x10bb450 -> Node0x10bb4c0;
	Node0x10bb4c0 -> Node0x10bb530;
	Node0x10bb530 -> Node0x10bb5a0;
	Node0x10bb5a0 -> Node0x105b268;
	Node0x105b268 -> Node0x10bba40;
	Node0x10bba40 -> Node0x10bba90;
edge [color=red]
	Node0x10bab50 -> Node0x10babc0;
	Node0x10babc0 -> Node0x10bac80;
	Node0x10bac80 -> Node0x10bacf0;
	Node0x10bab50 -> Node0x10bacf0;
	Node0x10bab50 -> Node0x10bad60;
	Node0x10bab50 -> Node0x10baeb0;
	Node0x10baeb0 -> Node0x10baf20;
	Node0x10badd0 -> Node0x10bafc0;
	Node0x10bafc0 -> Node0x10bb030;
	Node0x10bafc0 -> Node0x10bb0a0;
	Node0x10bad60 -> Node0x10bb110;
	Node0x10baf20 -> Node0x10bb110;
	Node0x10bb110 -> Node0x10bb180;
	Node0x10bb220 -> Node0x10bb290;
	Node0x10badd0 -> Node0x10bb290;
	Node0x10bb290 -> Node0x10bb300;
	Node0x10bae40 -> Node0x10bb300;
	Node0x10bb300 -> Node0x10bb370;
	Node0x10baf20 -> Node0x10bb370;
	Node0x10bb370 -> Node0x10bb3e0;
	Node0x10baeb0 -> Node0x10bb3e0;
	Node0x10bb3e0 -> Node0x10bb450;
	Node0x10bb0a0 -> Node0x10bb450;
	Node0x10bb450 -> Node0x10bb4c0;
	Node0x10bb030 -> Node0x10bb4c0;
	Node0x10bb4c0 -> Node0x10bb530;
	Node0x10bb180 -> Node0x10bb530;
	Node0x10bacf0 -> Node0x10bb5a0;
	Node0x10bb530 -> Node0x10bb5a0;
	Node0x10bb5a0 -> Node0x105b268;
	Node0x105b268 -> Node0x10bba40;
}
