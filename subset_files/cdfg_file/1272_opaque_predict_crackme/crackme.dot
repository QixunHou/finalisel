digraph "DFG for'crackme' function" {
	Node0x11d8540[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x11d8bf0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x11d8cb0[shape=record, label="  %5 = add i32 %1, 1"];
	Node0x11d8d20[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x11d8d90[shape=record, label="  %7 = and i32 %4, %0"];
	Node0x11d8e00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x11d8e70[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x11d8f10[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x11d8f80[shape=record, label="  %11 = xor i32 %6, -1"];
	Node0x11d9020[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x11d9090[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x11d9100[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x11d9170[shape=record, label="  %15 = shl i32 %7, 1"];
	Node0x11d91e0[shape=record, label="  %16 = shl i32 %0, 1"];
	Node0x11d9250[shape=record, label="  %17 = add i32 %16, %5"];
	Node0x11d92c0[shape=record, label="  %18 = add i32 %17, %3"];
	Node0x11d9330[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x11d93a0[shape=record, label="  %20 = add i32 %19, %7"];
	Node0x11d9410[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x11d9480[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x11d94f0[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0x11d9560[shape=record, label="  %24 = sub i32 %23, %9"];
	Node0x11d95d0[shape=record, label="  %25 = sub i32 %24, %10"];
	Node0x11d9640[shape=record, label="  %26 = icmp eq i32 %25, %1"];
	Node0x1179268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x11d9ae0[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x11d9b30[shape=record, label="  ret void"];
	Node0x11d8540 -> Node0x11d8bf0;
	Node0x11d8bf0 -> Node0x11d8cb0;
	Node0x11d8cb0 -> Node0x11d8d20;
	Node0x11d8d20 -> Node0x11d8d90;
	Node0x11d8d90 -> Node0x11d8e00;
	Node0x11d8e00 -> Node0x11d8e70;
	Node0x11d8e70 -> Node0x11d8f10;
	Node0x11d8f10 -> Node0x11d8f80;
	Node0x11d8f80 -> Node0x11d9020;
	Node0x11d9020 -> Node0x11d9090;
	Node0x11d9090 -> Node0x11d9100;
	Node0x11d9100 -> Node0x11d9170;
	Node0x11d9170 -> Node0x11d91e0;
	Node0x11d91e0 -> Node0x11d9250;
	Node0x11d9250 -> Node0x11d92c0;
	Node0x11d92c0 -> Node0x11d9330;
	Node0x11d9330 -> Node0x11d93a0;
	Node0x11d93a0 -> Node0x11d9410;
	Node0x11d9410 -> Node0x11d9480;
	Node0x11d9480 -> Node0x11d94f0;
	Node0x11d94f0 -> Node0x11d9560;
	Node0x11d9560 -> Node0x11d95d0;
	Node0x11d95d0 -> Node0x11d9640;
	Node0x11d9640 -> Node0x1179268;
	Node0x1179268 -> Node0x11d9ae0;
	Node0x11d9ae0 -> Node0x11d9b30;
edge [color=red]
	Node0x11d8bf0 -> Node0x11d8d90;
	Node0x11d8e00 -> Node0x11d8e70;
	Node0x11d8e70 -> Node0x11d8f10;
	Node0x11d8d20 -> Node0x11d8f80;
	Node0x11d8f80 -> Node0x11d9020;
	Node0x11d9090 -> Node0x11d9100;
	Node0x11d8d90 -> Node0x11d9170;
	Node0x11d91e0 -> Node0x11d9250;
	Node0x11d8cb0 -> Node0x11d9250;
	Node0x11d9250 -> Node0x11d92c0;
	Node0x11d8540 -> Node0x11d92c0;
	Node0x11d92c0 -> Node0x11d9330;
	Node0x11d8d20 -> Node0x11d9330;
	Node0x11d9330 -> Node0x11d93a0;
	Node0x11d8d90 -> Node0x11d93a0;
	Node0x11d93a0 -> Node0x11d9410;
	Node0x11d9100 -> Node0x11d9410;
	Node0x11d9410 -> Node0x11d9480;
	Node0x11d9020 -> Node0x11d9480;
	Node0x11d9480 -> Node0x11d94f0;
	Node0x11d9170 -> Node0x11d94f0;
	Node0x11d94f0 -> Node0x11d9560;
	Node0x11d8e70 -> Node0x11d9560;
	Node0x11d9560 -> Node0x11d95d0;
	Node0x11d8f10 -> Node0x11d95d0;
	Node0x11d95d0 -> Node0x11d9640;
	Node0x11d9640 -> Node0x1179268;
	Node0x1179268 -> Node0x11d9ae0;
}
