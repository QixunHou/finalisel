; ModuleID = '../.././c_source_file/0035_path_condition_crackme.c'
source_filename = "../.././c_source_file/0035_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %2, -1
  %7 = and i32 %6, %0
  %8 = or i32 %7, %1
  %9 = shl i32 %8, 1
  %10 = sub i32 3, %9
  %11 = or i32 %4, %3
  %12 = xor i32 %4, -1
  %13 = and i32 %12, %3
  %14 = xor i32 %13, -1
  %15 = shl i32 %3, 1
  %16 = or i32 %12, %3
  %17 = xor i32 %11, -1
  %18 = mul i32 %17, -6
  %19 = shl i32 %16, 2
  %20 = xor i32 %19, -4
  %21 = shl i32 %13, 1
  %22 = and i32 %4, %3
  %23 = shl i32 %22, 2
  %24 = or i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %25
  %29 = and i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = xor i32 %7, %30
  %32 = shl i32 %31, 1
  %33 = or i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %1
  %36 = shl i32 %27, 1
  %37 = and i32 %2, %0
  %38 = and i32 %6, %1
  %39 = or i32 %37, %38
  %40 = shl i32 %39, 1
  %41 = xor i32 %2, %1
  %42 = or i32 %41, %25
  %43 = shl i32 %42, 1
  %44 = and i32 %1, %0
  %45 = or i32 %44, %2
  %46 = shl i32 %45, 2
  %47 = or i32 %6, %1
  %48 = xor i32 %47, -1
  %49 = shl i32 %48, 1
  %50 = xor i32 %0, -1
  %51 = or i32 %2, %1
  %52 = or i32 %51, %50
  %53 = xor i32 %1, -1
  %54 = or i32 %53, %0
  %55 = xor i32 %54, -1
  %56 = add i32 %54, 1
  %57 = xor i32 %1, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %48, %0
  %60 = and i32 %26, %53
  %61 = shl i32 %60, 1
  %62 = or i32 %34, %53
  %63 = xor i32 %38, -1
  %64 = xor i32 %37, %63
  %65 = or i32 %58, %2
  %66 = or i32 %26, %53
  %67 = and i32 %53, %0
  %68 = or i32 %26, %67
  %69 = and i32 %63, %50
  %70 = or i32 %26, %44
  %71 = xor i32 %67, -1
  %72 = and i32 %41, %71
  %73 = xor i32 %7, -1
  %74 = add i32 %7, 1
  %75 = add i32 %38, 1
  %76 = or i32 %26, %55
  %77 = or i32 %7, %48
  %78 = or i32 %37, %55
  %79 = xor i32 %48, %0
  %80 = xor i32 %41, -1
  %81 = or i32 %80, %25
  %82 = xor i32 %51, -1
  %83 = or i32 %44, %82
  %84 = and i32 %53, %2
  %85 = and i32 %84, %50
  %86 = or i32 %41, %50
  %87 = xor i32 %86, -1
  %88 = or i32 %85, %87
  %89 = and i32 %26, %1
  %90 = and i32 %84, %0
  %91 = or i32 %41, %0
  %92 = xor i32 %90, %91
  %93 = or i32 %53, %2
  %94 = and i32 %93, %0
  %95 = xor i32 %94, -1
  %96 = xor i32 %85, %95
  %97 = and i32 %54, %6
  %98 = or i32 %41, %67
  %99 = shl i32 %98, 1
  %100 = xor i32 %51, %0
  %101 = xor i32 %44, -1
  %102 = and i32 %80, %101
  %103 = or i32 %44, %48
  %104 = or i32 %7, %57
  %105 = and i32 %54, %2
  %106 = shl i32 %105, 1
  %107 = or i32 %67, %2
  %108 = and i32 %29, %0
  %109 = and i32 %41, %50
  %110 = xor i32 %109, -1
  %111 = xor i32 %108, %110
  %112 = xor i32 %85, %86
  %113 = and i32 %26, %58
  %114 = and i32 %33, %58
  %115 = and i32 %30, %0
  %116 = and i32 %27, %53
  %117 = or i32 %41, %44
  %118 = xor i32 %38, %0
  %119 = or i32 %47, %50
  %120 = or i32 %6, %0
  %121 = xor i32 %120, -1
  %122 = or i32 %121, %58
  %123 = or i32 %29, %50
  %124 = shl i32 %123, 2
  %125 = and i32 %41, %54
  %126 = xor i32 %37, -1
  %127 = and i32 %57, %126
  %128 = shl i32 %127, 1
  %129 = and i32 %24, %80
  %130 = xor i32 %91, -1
  %131 = or i32 %90, %130
  %132 = xor i32 %82, %0
  %133 = and i32 %126, %53
  %134 = and i32 %29, %50
  %135 = and i32 %41, %0
  %136 = or i32 %134, %135
  %137 = or i32 %57, %27
  %138 = and i32 %54, %27
  %139 = xor i32 %41, %0
  %140 = xor i32 %139, -1
  %141 = or i32 %108, %140
  %142 = and i32 %63, %0
  %143 = and i32 %27, %1
  %144 = and i32 %80, %71
  %145 = or i32 %47, %0
  %146 = and i32 %120, %1
  %147 = or i32 %38, %67
  %148 = and i32 %54, %80
  %149 = or i32 %82, %50
  %150 = xor i32 %7, %1
  %151 = xor i32 %121, %1
  %152 = xor i32 %63, %0
  %153 = or i32 %38, %50
  %154 = and i32 %57, %2
  %155 = and i32 %51, %0
  %156 = or i32 %134, %155
  %157 = or i32 %80, %55
  %158 = or i32 %7, %58
  %159 = and i32 %26, %57
  %160 = or i32 %48, %50
  %161 = xor i32 %47, %0
  %162 = shl i32 %161, 1
  %163 = add i32 %67, 1
  %164 = xor i32 %7, %47
  %165 = xor i32 %93, -1
  %166 = or i32 %165, %0
  %167 = xor i32 %90, %166
  %168 = or i32 %25, %2
  %169 = or i32 %6, %25
  %170 = xor i32 %55, %2
  %171 = and i32 %6, %58
  %172 = or i32 %57, %34
  %173 = or i32 %38, %0
  %174 = or i32 %57, %121
  %175 = xor i32 %126, %1
  %176 = or i32 %121, %53
  %177 = or i32 %90, %139
  %178 = xor i32 %25, %2
  %179 = or i32 %26, %25
  %180 = xor i32 %37, %24
  %181 = and i32 %120, %53
  %182 = or i32 %27, %1
  %183 = shl i32 %182, 1
  %184 = xor i32 %33, %1
  %185 = and i32 %47, %50
  %186 = or i32 %44, %27
  %187 = shl i32 %186, 1
  %188 = or i32 %26, %1
  %189 = or i32 %37, %58
  %190 = xor i32 %73, %1
  %191 = and i32 %26, %71
  %192 = or i32 %27, %53
  %193 = and i32 %24, %6
  %194 = and i32 %6, %101
  %195 = or i32 %44, %121
  %196 = and i32 %24, %2
  %197 = xor i32 %71, %2
  %198 = and i32 %57, %6
  %199 = and i32 %27, %71
  %200 = and i32 %57, %73
  %201 = xor i32 %33, %44
  %202 = or i32 %82, %0
  %203 = xor i32 %51, %44
  %204 = or i32 %44, %80
  %205 = or i32 %108, %100
  %206 = and i32 %30, %50
  %207 = and i32 %41, %101
  %208 = add i32 %37, 1
  %209 = and i32 %41, %24
  %210 = or i32 %41, %55
  %211 = or i32 %7, %29
  %212 = xor i32 %37, %54
  %213 = or i32 %26, %57
  %214 = shl i32 %213, 1
  %215 = and i32 %24, %27
  %216 = shl i32 %215, 1
  %217 = and i32 %58, %2
  %218 = or i32 %37, %1
  %219 = add i32 %33, 1
  %220 = and i32 %26, %24
  %221 = or i32 %85, %94
  %222 = or i32 %34, %58
  %223 = xor i32 %93, %0
  %224 = or i32 %90, %223
  %225 = and i32 %73, %1
  %226 = and i32 %26, %101
  %227 = xor i32 %51, 2147483647
  %228 = or i32 %227, %0
  %229 = xor i32 %228, %108
  %230 = shl i32 %229, 1
  %231 = xor i32 %47, %44
  %232 = and i32 %126, %1
  %233 = or i32 %29, %0
  %234 = and i32 %71, %2
  %235 = shl i32 %234, 1
  %236 = or i32 %37, %82
  %237 = and i32 %33, %53
  %238 = shl i32 %237, 1
  %239 = and i32 %33, %1
  %240 = xor i32 %44, %2
  %241 = xor i32 %223, -1
  %242 = xor i32 %90, %241
  %243 = and i32 %6, %71
  %244 = or i32 %37, %53
  %245 = xor i32 %34, %1
  %246 = or i32 %37, %57
  %247 = or i32 %63, %50
  %248 = or i32 %63, %0
  %249 = xor i32 %37, %51
  %250 = shl i32 %249, 1
  %251 = xor i32 %24, %2
  %252 = or i32 %80, %50
  %253 = xor i32 %37, %1
  %254 = or i32 %108, %109
  %255 = xor i32 %108, %139
  %256 = and i32 %38, %50
  %257 = and i32 %82, %0
  %258 = and i32 %38, %0
  %259 = and i32 %48, %50
  %260 = mul i32 %259, 9
  %261 = and i32 %48, %0
  %262 = mul i32 %261, 15
  %263 = shl i32 %108, 3
  %264 = add i32 %258, %158
  %265 = sub i32 %138, %264
  %266 = sub i32 %265, %137
  %267 = add i32 %266, %122
  %268 = mul i32 %267, 3
  %269 = or i32 %134, %257
  %270 = sub i32 %256, %269
  %271 = mul i32 %270, 11
  %272 = add i32 %232, %74
  %273 = add i32 %272, %112
  %274 = mul i32 %273, 5
  %275 = sub i32 -2, %2
  %276 = add i32 %275, %198
  %277 = add i32 %276, %193
  %278 = add i32 %277, %154
  %279 = add i32 %278, %121
  %280 = add i32 %279, %107
  %281 = add i32 %280, %248
  %282 = add i32 %281, %246
  %283 = add i32 %282, %220
  %284 = add i32 %283, %211
  %285 = add i32 %284, %204
  %286 = add i32 %285, %201
  %287 = add i32 %286, %185
  %288 = add i32 %287, %132
  %289 = add i32 %288, %79
  %290 = add i32 %289, %77
  %291 = add i32 %290, %72
  %292 = add i32 %291, %69
  %293 = add i32 %292, %4
  %294 = add i32 %293, %92
  %295 = add i32 %294, %136
  %296 = add i32 %295, %16
  %297 = shl i32 %296, 1
  %298 = sub i32 2, %1
  %299 = add i32 %298, %56
  %300 = sub i32 %299, %2
  %301 = add i32 %300, %101
  %302 = add i32 %301, %24
  %303 = add i32 %302, %163
  %304 = add i32 %303, %54
  %305 = add i32 %304, %38
  %306 = sub i32 %305, %65
  %307 = add i32 %306, %75
  %308 = add i32 %307, %37
  %309 = add i32 %308, %97
  %310 = sub i32 %309, %51
  %311 = sub i32 %310, %26
  %312 = sub i32 %311, %168
  %313 = sub i32 %312, %169
  %314 = sub i32 %313, %170
  %315 = sub i32 %314, %171
  %316 = add i32 %315, %178
  %317 = sub i32 %316, %194
  %318 = sub i32 %317, %196
  %319 = sub i32 %318, %197
  %320 = sub i32 %319, %41
  %321 = sub i32 %320, %7
  %322 = add i32 %321, %208
  %323 = sub i32 %322, %217
  %324 = add i32 %323, %219
  %325 = add i32 %324, %240
  %326 = sub i32 %325, %243
  %327 = add i32 %326, %251
  %328 = sub i32 %327, %15
  %329 = add i32 %328, %12
  %330 = add i32 %329, %28
  %331 = sub i32 %330, %35
  %332 = sub i32 %331, %36
  %333 = sub i32 %332, %46
  %334 = sub i32 %333, %49
  %335 = add i32 %334, %52
  %336 = add i32 %335, %59
  %337 = add i32 %336, %62
  %338 = add i32 %337, %64
  %339 = add i32 %338, %66
  %340 = add i32 %339, %68
  %341 = sub i32 %340, %70
  %342 = add i32 %341, %76
  %343 = add i32 %342, %78
  %344 = add i32 %343, %81
  %345 = add i32 %344, %83
  %346 = add i32 %345, %89
  %347 = sub i32 %346, %100
  %348 = sub i32 %347, %102
  %349 = sub i32 %348, %103
  %350 = add i32 %349, %104
  %351 = sub i32 %350, %106
  %352 = sub i32 %351, %113
  %353 = add i32 %352, %114
  %354 = sub i32 %353, %115
  %355 = sub i32 %354, %116
  %356 = sub i32 %355, %117
  %357 = sub i32 %356, %118
  %358 = sub i32 %357, %119
  %359 = sub i32 %358, %125
  %360 = sub i32 %359, %129
  %361 = sub i32 %360, %133
  %362 = add i32 %361, %142
  %363 = sub i32 %362, %143
  %364 = add i32 %363, %144
  %365 = sub i32 %364, %145
  %366 = sub i32 %365, %146
  %367 = sub i32 %366, %147
  %368 = sub i32 %367, %148
  %369 = add i32 %368, %149
  %370 = sub i32 %369, %150
  %371 = add i32 %370, %151
  %372 = sub i32 %371, %152
  %373 = sub i32 %372, %153
  %374 = add i32 %373, %157
  %375 = add i32 %374, %159
  %376 = add i32 %375, %160
  %377 = sub i32 %376, %164
  %378 = add i32 %377, %172
  %379 = sub i32 %378, %173
  %380 = sub i32 %379, %174
  %381 = sub i32 %380, %175
  %382 = add i32 %381, %176
  %383 = sub i32 %382, %179
  %384 = sub i32 %383, %180
  %385 = sub i32 %384, %139
  %386 = add i32 %385, %181
  %387 = add i32 %386, %184
  %388 = add i32 %387, %188
  %389 = add i32 %388, %189
  %390 = sub i32 %389, %190
  %391 = sub i32 %390, %191
  %392 = add i32 %391, %192
  %393 = sub i32 %392, %195
  %394 = sub i32 %393, %199
  %395 = add i32 %394, %155
  %396 = sub i32 %395, %200
  %397 = add i32 %396, %202
  %398 = add i32 %397, %203
  %399 = add i32 %398, %206
  %400 = sub i32 %399, %207
  %401 = add i32 %400, %109
  %402 = sub i32 %401, %209
  %403 = sub i32 %402, %210
  %404 = sub i32 %403, %91
  %405 = sub i32 %404, %212
  %406 = add i32 %405, %218
  %407 = add i32 %406, %222
  %408 = sub i32 %407, %225
  %409 = add i32 %408, %226
  %410 = add i32 %409, %231
  %411 = sub i32 %410, %233
  %412 = sub i32 %411, %235
  %413 = add i32 %412, %236
  %414 = sub i32 %413, %239
  %415 = sub i32 %414, %244
  %416 = add i32 %415, %245
  %417 = sub i32 %416, %247
  %418 = add i32 %417, %86
  %419 = sub i32 %418, %252
  %420 = sub i32 %419, %253
  %421 = sub i32 %420, %11
  %422 = add i32 %421, %14
  %423 = sub i32 %422, %32
  %424 = sub i32 %423, %40
  %425 = sub i32 %424, %43
  %426 = sub i32 %425, %61
  %427 = add i32 %426, %88
  %428 = add i32 %427, %96
  %429 = sub i32 %428, %99
  %430 = sub i32 %429, %111
  %431 = add i32 %430, %124
  %432 = sub i32 %431, %128
  %433 = sub i32 %432, %131
  %434 = sub i32 %433, %141
  %435 = add i32 %434, %156
  %436 = sub i32 %435, %162
  %437 = sub i32 %436, %167
  %438 = add i32 %437, %177
  %439 = sub i32 %438, %183
  %440 = sub i32 %439, %187
  %441 = sub i32 %440, %205
  %442 = sub i32 %441, %214
  %443 = sub i32 %442, %216
  %444 = add i32 %443, %221
  %445 = add i32 %444, %224
  %446 = sub i32 %445, %238
  %447 = add i32 %446, %242
  %448 = sub i32 %447, %250
  %449 = add i32 %448, %254
  %450 = add i32 %449, %255
  %451 = add i32 %450, %260
  %452 = add i32 %451, %262
  %453 = add i32 %452, %263
  %454 = add i32 %453, %18
  %455 = sub i32 %454, %21
  %456 = sub i32 %455, %23
  %457 = sub i32 %456, %20
  %458 = sub i32 %457, %230
  %459 = add i32 %458, %271
  %460 = add i32 %459, %274
  %461 = add i32 %460, %268
  %462 = add i32 %461, %297
  %463 = icmp eq i32 %10, %462
  %464 = select i1 %463, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %465 = tail call i32 @puts(i8* nonnull dereferenceable(1) %464)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
