digraph "DFG for'crackme' function" {
	Node0x105ca00[shape=record, label="  %5 = or i32 %3, %0"];
	Node0x105ca70[shape=record, label="  %6 = sub i32 %1, %5"];
	Node0x105d0f0[shape=record, label="  %7 = xor i32 %2, -1"];
	Node0x105d160[shape=record, label="  %8 = xor i32 %2, %1"];
	Node0x105d1d0[shape=record, label="  %9 = and i32 %7, %1"];
	Node0x105d240[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x105d2e0[shape=record, label="  %11 = xor i32 %10, 2147483647"];
	Node0x105d350[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x105d3f0[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0x105d460[shape=record, label="  %14 = and i32 %3, %0"];
	Node0x105d4d0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x105d540[shape=record, label="  %16 = xor i32 %0, -1"];
	Node0x105d5b0[shape=record, label="  %17 = xor i32 %3, %0"];
	Node0x105d620[shape=record, label="  %18 = and i32 %16, %3"];
	Node0x105d690[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x105d700[shape=record, label="  %20 = xor i32 %5, -1"];
	Node0x105d770[shape=record, label="  %21 = xor i32 %3, -1"];
	Node0x105d7e0[shape=record, label="  %22 = and i32 %21, %0"];
	Node0x105d850[shape=record, label="  %23 = add i32 %9, %11"];
	Node0x105d8f0[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x105d990[shape=record, label="  %25 = sub i32 5, %1"];
	Node0x105da00[shape=record, label="  %26 = add i32 %25, %2"];
	Node0x105da70[shape=record, label="  %27 = add i32 %26, %8"];
	Node0x105dae0[shape=record, label="  %28 = add i32 %27, %9"];
	Node0x105db50[shape=record, label="  %29 = add i32 %28, %3"];
	Node0x105dbc0[shape=record, label="  %30 = add i32 %29, %13"];
	Node0x105dc30[shape=record, label="  %31 = add i32 %30, %15"];
	Node0x105dca0[shape=record, label="  %32 = add i32 %31, %17"];
	Node0x105df20[shape=record, label="  %33 = add i32 %32, %19"];
	Node0x105df90[shape=record, label="  %34 = add i32 %33, %20"];
	Node0x105e000[shape=record, label="  %35 = sub i32 %34, %22"];
	Node0x105e070[shape=record, label="  %36 = sub i32 %35, %18"];
	Node0x105e0e0[shape=record, label="  %37 = add i32 %36, %24"];
	Node0x105e150[shape=record, label="  %38 = icmp eq i32 %6, %37"];
	Node0xffd268[shape=record, label="  %39 = select i1 %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x105e5f0[shape=record, label="  %40 = tail call i32 @puts(i8* nonnull dereferenceable(1) %39)"];
	Node0x105e640[shape=record, label="  ret void"];
	Node0x105ca00 -> Node0x105ca70;
	Node0x105ca70 -> Node0x105d0f0;
	Node0x105d0f0 -> Node0x105d160;
	Node0x105d160 -> Node0x105d1d0;
	Node0x105d1d0 -> Node0x105d240;
	Node0x105d240 -> Node0x105d2e0;
	Node0x105d2e0 -> Node0x105d350;
	Node0x105d350 -> Node0x105d3f0;
	Node0x105d3f0 -> Node0x105d460;
	Node0x105d460 -> Node0x105d4d0;
	Node0x105d4d0 -> Node0x105d540;
	Node0x105d540 -> Node0x105d5b0;
	Node0x105d5b0 -> Node0x105d620;
	Node0x105d620 -> Node0x105d690;
	Node0x105d690 -> Node0x105d700;
	Node0x105d700 -> Node0x105d770;
	Node0x105d770 -> Node0x105d7e0;
	Node0x105d7e0 -> Node0x105d850;
	Node0x105d850 -> Node0x105d8f0;
	Node0x105d8f0 -> Node0x105d990;
	Node0x105d990 -> Node0x105da00;
	Node0x105da00 -> Node0x105da70;
	Node0x105da70 -> Node0x105dae0;
	Node0x105dae0 -> Node0x105db50;
	Node0x105db50 -> Node0x105dbc0;
	Node0x105dbc0 -> Node0x105dc30;
	Node0x105dc30 -> Node0x105dca0;
	Node0x105dca0 -> Node0x105df20;
	Node0x105df20 -> Node0x105df90;
	Node0x105df90 -> Node0x105e000;
	Node0x105e000 -> Node0x105e070;
	Node0x105e070 -> Node0x105e0e0;
	Node0x105e0e0 -> Node0x105e150;
	Node0x105e150 -> Node0xffd268;
	Node0xffd268 -> Node0x105e5f0;
	Node0x105e5f0 -> Node0x105e640;
edge [color=red]
	Node0x105ca00 -> Node0x105ca70;
	Node0x105d0f0 -> Node0x105d1d0;
	Node0x105d240 -> Node0x105d2e0;
	Node0x105d350 -> Node0x105d3f0;
	Node0x105d460 -> Node0x105d4d0;
	Node0x105d540 -> Node0x105d620;
	Node0x105d620 -> Node0x105d690;
	Node0x105ca00 -> Node0x105d700;
	Node0x105d770 -> Node0x105d7e0;
	Node0x105d1d0 -> Node0x105d850;
	Node0x105d2e0 -> Node0x105d850;
	Node0x105d850 -> Node0x105d8f0;
	Node0x105d990 -> Node0x105da00;
	Node0x105da00 -> Node0x105da70;
	Node0x105d160 -> Node0x105da70;
	Node0x105da70 -> Node0x105dae0;
	Node0x105d1d0 -> Node0x105dae0;
	Node0x105dae0 -> Node0x105db50;
	Node0x105db50 -> Node0x105dbc0;
	Node0x105d3f0 -> Node0x105dbc0;
	Node0x105dbc0 -> Node0x105dc30;
	Node0x105d4d0 -> Node0x105dc30;
	Node0x105dc30 -> Node0x105dca0;
	Node0x105d5b0 -> Node0x105dca0;
	Node0x105dca0 -> Node0x105df20;
	Node0x105d690 -> Node0x105df20;
	Node0x105df20 -> Node0x105df90;
	Node0x105d700 -> Node0x105df90;
	Node0x105df90 -> Node0x105e000;
	Node0x105d7e0 -> Node0x105e000;
	Node0x105e000 -> Node0x105e070;
	Node0x105d620 -> Node0x105e070;
	Node0x105e070 -> Node0x105e0e0;
	Node0x105d8f0 -> Node0x105e0e0;
	Node0x105ca70 -> Node0x105e150;
	Node0x105e0e0 -> Node0x105e150;
	Node0x105e150 -> Node0xffd268;
	Node0xffd268 -> Node0x105e5f0;
}
