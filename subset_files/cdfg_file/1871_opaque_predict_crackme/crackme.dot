digraph "DFG for'crackme' function" {
	Node0x709ae0[shape=record, label="  %5 = add i32 %3, %1"];
	Node0x70a160[shape=record, label="  %6 = sub i32 0, %5"];
	Node0x70a200[shape=record, label="  %7 = xor i32 %2, -1"];
	Node0x70a270[shape=record, label="  %8 = and i32 %7, %1"];
	Node0x70a2e0[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x70a350[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x70a3f0[shape=record, label="  %11 = shl i32 %2, 1"];
	Node0x70a460[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x70a4d0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x70a570[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x70a5e0[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x70a650[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x70a6c0[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x70a730[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x70a7a0[shape=record, label="  %19 = xor i32 %0, -1"];
	Node0x70a810[shape=record, label="  %20 = and i32 %19, %3"];
	Node0x70a880[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x70a8f0[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x70a960[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x70a9d0[shape=record, label="  %24 = add i32 %23, 1"];
	Node0x70aa40[shape=record, label="  %25 = xor i32 %3, -1"];
	Node0x70aab0[shape=record, label="  %26 = and i32 %25, %0"];
	Node0x70ab50[shape=record, label="  %27 = shl i32 %17, 2"];
	Node0x70abc0[shape=record, label="  %28 = sub i32 %8, %26"];
	Node0x70ac30[shape=record, label="  %29 = sub i32 %28, %20"];
	Node0x70aca0[shape=record, label="  %30 = add i32 %29, %24"];
	Node0x70ad40[shape=record, label="  %31 = mul i32 %30, 3"];
	Node0x70adb0[shape=record, label="  %32 = add i32 %2, 3"];
	Node0x70b030[shape=record, label="  %33 = add i32 %32, %9"];
	Node0x70b0a0[shape=record, label="  %34 = sub i32 %33, %10"];
	Node0x70b110[shape=record, label="  %35 = add i32 %34, %11"];
	Node0x70b180[shape=record, label="  %36 = add i32 %35, %3"];
	Node0x70b1f0[shape=record, label="  %37 = sub i32 %36, %16"];
	Node0x70b260[shape=record, label="  %38 = add i32 %37, %18"];
	Node0x70b2d0[shape=record, label="  %39 = add i32 %38, %14"];
	Node0x70b340[shape=record, label="  %40 = sub i32 %39, %27"];
	Node0x70b3b0[shape=record, label="  %41 = add i32 %40, %22"];
	Node0x70b420[shape=record, label="  %42 = add i32 %41, %31"];
	Node0x70b490[shape=record, label="  %43 = icmp eq i32 %42, %6"];
	Node0x6aa268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x70b930[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x70b980[shape=record, label="  ret void"];
	Node0x709ae0 -> Node0x70a160;
	Node0x70a160 -> Node0x70a200;
	Node0x70a200 -> Node0x70a270;
	Node0x70a270 -> Node0x70a2e0;
	Node0x70a2e0 -> Node0x70a350;
	Node0x70a350 -> Node0x70a3f0;
	Node0x70a3f0 -> Node0x70a460;
	Node0x70a460 -> Node0x70a4d0;
	Node0x70a4d0 -> Node0x70a570;
	Node0x70a570 -> Node0x70a5e0;
	Node0x70a5e0 -> Node0x70a650;
	Node0x70a650 -> Node0x70a6c0;
	Node0x70a6c0 -> Node0x70a730;
	Node0x70a730 -> Node0x70a7a0;
	Node0x70a7a0 -> Node0x70a810;
	Node0x70a810 -> Node0x70a880;
	Node0x70a880 -> Node0x70a8f0;
	Node0x70a8f0 -> Node0x70a960;
	Node0x70a960 -> Node0x70a9d0;
	Node0x70a9d0 -> Node0x70aa40;
	Node0x70aa40 -> Node0x70aab0;
	Node0x70aab0 -> Node0x70ab50;
	Node0x70ab50 -> Node0x70abc0;
	Node0x70abc0 -> Node0x70ac30;
	Node0x70ac30 -> Node0x70aca0;
	Node0x70aca0 -> Node0x70ad40;
	Node0x70ad40 -> Node0x70adb0;
	Node0x70adb0 -> Node0x70b030;
	Node0x70b030 -> Node0x70b0a0;
	Node0x70b0a0 -> Node0x70b110;
	Node0x70b110 -> Node0x70b180;
	Node0x70b180 -> Node0x70b1f0;
	Node0x70b1f0 -> Node0x70b260;
	Node0x70b260 -> Node0x70b2d0;
	Node0x70b2d0 -> Node0x70b340;
	Node0x70b340 -> Node0x70b3b0;
	Node0x70b3b0 -> Node0x70b420;
	Node0x70b420 -> Node0x70b490;
	Node0x70b490 -> Node0x6aa268;
	Node0x6aa268 -> Node0x70b930;
	Node0x70b930 -> Node0x70b980;
edge [color=red]
	Node0x709ae0 -> Node0x70a160;
	Node0x70a200 -> Node0x70a270;
	Node0x70a270 -> Node0x70a2e0;
	Node0x70a460 -> Node0x70a4d0;
	Node0x70a4d0 -> Node0x70a570;
	Node0x70a5e0 -> Node0x70a650;
	Node0x70a6c0 -> Node0x70a730;
	Node0x70a7a0 -> Node0x70a810;
	Node0x70a810 -> Node0x70a880;
	Node0x70a880 -> Node0x70a8f0;
	Node0x70a960 -> Node0x70a9d0;
	Node0x70aa40 -> Node0x70aab0;
	Node0x70a6c0 -> Node0x70ab50;
	Node0x70a270 -> Node0x70abc0;
	Node0x70aab0 -> Node0x70abc0;
	Node0x70abc0 -> Node0x70ac30;
	Node0x70a810 -> Node0x70ac30;
	Node0x70ac30 -> Node0x70aca0;
	Node0x70a9d0 -> Node0x70aca0;
	Node0x70aca0 -> Node0x70ad40;
	Node0x70adb0 -> Node0x70b030;
	Node0x70a2e0 -> Node0x70b030;
	Node0x70b030 -> Node0x70b0a0;
	Node0x70a350 -> Node0x70b0a0;
	Node0x70b0a0 -> Node0x70b110;
	Node0x70a3f0 -> Node0x70b110;
	Node0x70b110 -> Node0x70b180;
	Node0x70b180 -> Node0x70b1f0;
	Node0x70a650 -> Node0x70b1f0;
	Node0x70b1f0 -> Node0x70b260;
	Node0x70a730 -> Node0x70b260;
	Node0x70b260 -> Node0x70b2d0;
	Node0x70a570 -> Node0x70b2d0;
	Node0x70b2d0 -> Node0x70b340;
	Node0x70ab50 -> Node0x70b340;
	Node0x70b340 -> Node0x70b3b0;
	Node0x70a8f0 -> Node0x70b3b0;
	Node0x70b3b0 -> Node0x70b420;
	Node0x70ad40 -> Node0x70b420;
	Node0x70b420 -> Node0x70b490;
	Node0x70a160 -> Node0x70b490;
	Node0x70b490 -> Node0x6aa268;
	Node0x6aa268 -> Node0x70b930;
}
