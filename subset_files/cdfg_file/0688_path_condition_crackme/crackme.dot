digraph "DFG for'crackme' function" {
	Node0x65ab50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x65abc0[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0x65ac80[shape=record, label="  %5 = or i32 %4, %1"];
	Node0x65acf0[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x65ad60[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x65add0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x65ae40[shape=record, label="  %9 = shl i32 %8, 2"];
	Node0x65aee0[shape=record, label="  %10 = xor i32 %9, -4"];
	Node0x65af50[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x65afc0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x65b030[shape=record, label="  %13 = xor i32 %6, -1"];
	Node0x65b0d0[shape=record, label="  %14 = mul i32 %13, 6"];
	Node0x65b140[shape=record, label="  %15 = add i32 %12, %0"];
	Node0x65b1e0[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x65b250[shape=record, label="  %17 = add i32 %1, %0"];
	Node0x65b2c0[shape=record, label="  %18 = sub i32 %3, %17"];
	Node0x65b330[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x65b3a0[shape=record, label="  %20 = add i32 %19, %6"];
	Node0x65b410[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0x65b480[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x65b4f0[shape=record, label="  %23 = sub i32 %22, %10"];
	Node0x65b560[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x65b5d0[shape=record, label="  %25 = icmp eq i32 %24, %5"];
	Node0x5fb268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x65ba70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x65bac0[shape=record, label="  ret void"];
	Node0x65ab50 -> Node0x65abc0;
	Node0x65abc0 -> Node0x65ac80;
	Node0x65ac80 -> Node0x65acf0;
	Node0x65acf0 -> Node0x65ad60;
	Node0x65ad60 -> Node0x65add0;
	Node0x65add0 -> Node0x65ae40;
	Node0x65ae40 -> Node0x65aee0;
	Node0x65aee0 -> Node0x65af50;
	Node0x65af50 -> Node0x65afc0;
	Node0x65afc0 -> Node0x65b030;
	Node0x65b030 -> Node0x65b0d0;
	Node0x65b0d0 -> Node0x65b140;
	Node0x65b140 -> Node0x65b1e0;
	Node0x65b1e0 -> Node0x65b250;
	Node0x65b250 -> Node0x65b2c0;
	Node0x65b2c0 -> Node0x65b330;
	Node0x65b330 -> Node0x65b3a0;
	Node0x65b3a0 -> Node0x65b410;
	Node0x65b410 -> Node0x65b480;
	Node0x65b480 -> Node0x65b4f0;
	Node0x65b4f0 -> Node0x65b560;
	Node0x65b560 -> Node0x65b5d0;
	Node0x65b5d0 -> Node0x5fb268;
	Node0x5fb268 -> Node0x65ba70;
	Node0x65ba70 -> Node0x65bac0;
edge [color=red]
	Node0x65abc0 -> Node0x65ac80;
	Node0x65ab50 -> Node0x65acf0;
	Node0x65add0 -> Node0x65ae40;
	Node0x65ae40 -> Node0x65aee0;
	Node0x65af50 -> Node0x65afc0;
	Node0x65acf0 -> Node0x65b030;
	Node0x65b030 -> Node0x65b0d0;
	Node0x65afc0 -> Node0x65b140;
	Node0x65b140 -> Node0x65b1e0;
	Node0x65ab50 -> Node0x65b2c0;
	Node0x65b250 -> Node0x65b2c0;
	Node0x65b2c0 -> Node0x65b330;
	Node0x65ad60 -> Node0x65b330;
	Node0x65b330 -> Node0x65b3a0;
	Node0x65acf0 -> Node0x65b3a0;
	Node0x65b3a0 -> Node0x65b410;
	Node0x65af50 -> Node0x65b410;
	Node0x65b410 -> Node0x65b480;
	Node0x65b0d0 -> Node0x65b480;
	Node0x65b480 -> Node0x65b4f0;
	Node0x65aee0 -> Node0x65b4f0;
	Node0x65b4f0 -> Node0x65b560;
	Node0x65b1e0 -> Node0x65b560;
	Node0x65b560 -> Node0x65b5d0;
	Node0x65ac80 -> Node0x65b5d0;
	Node0x65b5d0 -> Node0x5fb268;
	Node0x5fb268 -> Node0x65ba70;
}
