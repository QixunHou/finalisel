digraph "DFG for'crackme' function" {
	Node0x780ac0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x780b30[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x780bf0[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x780c60[shape=record, label="  %6 = sub i32 %3, %5"];
	Node0x780cd0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x780d40[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0x780db0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x780e20[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x780ec0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x780f30[shape=record, label="  %12 = xor i32 %5, -1"];
	Node0x780fd0[shape=record, label="  %13 = mul i32 %12, -3"];
	Node0x781040[shape=record, label="  %14 = and i32 %4, %0"];
	Node0x7810b0[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x781120[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x781190[shape=record, label="  %17 = add i32 %8, %9"];
	Node0x781200[shape=record, label="  %18 = sub i32 %17, %14"];
	Node0x781270[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x7812e0[shape=record, label="  %20 = add i32 %19, %16"];
	Node0x781350[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0x7813f0[shape=record, label="  %22 = icmp eq i32 %21, 2"];
	Node0x721268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x781890[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x7818e0[shape=record, label="  ret void"];
	Node0x780ac0 -> Node0x780b30;
	Node0x780b30 -> Node0x780bf0;
	Node0x780bf0 -> Node0x780c60;
	Node0x780c60 -> Node0x780cd0;
	Node0x780cd0 -> Node0x780d40;
	Node0x780d40 -> Node0x780db0;
	Node0x780db0 -> Node0x780e20;
	Node0x780e20 -> Node0x780ec0;
	Node0x780ec0 -> Node0x780f30;
	Node0x780f30 -> Node0x780fd0;
	Node0x780fd0 -> Node0x781040;
	Node0x781040 -> Node0x7810b0;
	Node0x7810b0 -> Node0x781120;
	Node0x781120 -> Node0x781190;
	Node0x781190 -> Node0x781200;
	Node0x781200 -> Node0x781270;
	Node0x781270 -> Node0x7812e0;
	Node0x7812e0 -> Node0x781350;
	Node0x781350 -> Node0x7813f0;
	Node0x7813f0 -> Node0x721268;
	Node0x721268 -> Node0x781890;
	Node0x781890 -> Node0x7818e0;
edge [color=red]
	Node0x780b30 -> Node0x780bf0;
	Node0x780ac0 -> Node0x780c60;
	Node0x780bf0 -> Node0x780c60;
	Node0x780c60 -> Node0x780d40;
	Node0x780cd0 -> Node0x780d40;
	Node0x780db0 -> Node0x780e20;
	Node0x780e20 -> Node0x780ec0;
	Node0x780bf0 -> Node0x780f30;
	Node0x780f30 -> Node0x780fd0;
	Node0x780b30 -> Node0x781040;
	Node0x7810b0 -> Node0x781120;
	Node0x780d40 -> Node0x781190;
	Node0x780db0 -> Node0x781190;
	Node0x781190 -> Node0x781200;
	Node0x781040 -> Node0x781200;
	Node0x781200 -> Node0x781270;
	Node0x780fd0 -> Node0x781270;
	Node0x781270 -> Node0x7812e0;
	Node0x781120 -> Node0x7812e0;
	Node0x7812e0 -> Node0x781350;
	Node0x780ec0 -> Node0x781350;
	Node0x781350 -> Node0x7813f0;
	Node0x7813f0 -> Node0x721268;
	Node0x721268 -> Node0x781890;
}
