digraph "DFG for'crackme' function" {
	Node0x2490b70[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x2490be0[shape=record, label="  %6 = add i32 %5, %2"];
	Node0x2490c50[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x24912d0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x2491370[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x24913e0[shape=record, label="  %10 = sub i32 %9, %6"];
	Node0x2491450[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x24914c0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x2491530[shape=record, label="  %13 = shl i32 %5, 1"];
	Node0x24915a0[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x2491610[shape=record, label="  %15 = xor i32 %12, -2"];
	Node0x24916b0[shape=record, label="  %16 = xor i32 %2, 2147483647"];
	Node0x2491750[shape=record, label="  %17 = xor i32 %1, 1073741823"];
	Node0x24917c0[shape=record, label="  %18 = and i32 %17, %2"];
	Node0x2491860[shape=record, label="  %19 = shl i32 %18, 2"];
	Node0x24918d0[shape=record, label="  %20 = and i32 %16, %1"];
	Node0x2491940[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x24919b0[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x2491a20[shape=record, label="  %23 = xor i32 %0, 2147483647"];
	Node0x2491a90[shape=record, label="  %24 = or i32 %23, %3"];
	Node0x2491b00[shape=record, label="  %25 = or i32 %3, %0"];
	Node0x2491ba0[shape=record, label="  %26 = xor i32 %3, -1"];
	Node0x2491c10[shape=record, label="  %27 = or i32 %26, %0"];
	Node0x2491c80[shape=record, label="  %28 = xor i32 %25, -1"];
	Node0x2491d20[shape=record, label="  %29 = mul i32 %28, 3"];
	Node0x2491d90[shape=record, label="  %30 = sub i32 %24, %1"];
	Node0x2491e00[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x2491ea0[shape=record, label="  %32 = add i32 %0, 4"];
	Node0x2492120[shape=record, label="  %33 = add i32 %32, %1"];
	Node0x2492190[shape=record, label="  %34 = add i32 %33, %12"];
	Node0x2492200[shape=record, label="  %35 = sub i32 %34, %19"];
	Node0x2492270[shape=record, label="  %36 = add i32 %35, %22"];
	Node0x24922e0[shape=record, label="  %37 = add i32 %36, %25"];
	Node0x2492350[shape=record, label="  %38 = add i32 %37, %7"];
	Node0x24923c0[shape=record, label="  %39 = add i32 %38, %27"];
	Node0x2492430[shape=record, label="  %40 = sub i32 %39, %14"];
	Node0x24924a0[shape=record, label="  %41 = add i32 %40, %15"];
	Node0x2492510[shape=record, label="  %42 = sub i32 %41, %21"];
	Node0x2492580[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x24925f0[shape=record, label="  %44 = add i32 %43, %31"];
	Node0x2492660[shape=record, label="  %45 = icmp eq i32 %10, %44"];
	Node0x2431268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2492b00[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x2492b50[shape=record, label="  ret void"];
	Node0x2490b70 -> Node0x2490be0;
	Node0x2490be0 -> Node0x2490c50;
	Node0x2490c50 -> Node0x24912d0;
	Node0x24912d0 -> Node0x2491370;
	Node0x2491370 -> Node0x24913e0;
	Node0x24913e0 -> Node0x2491450;
	Node0x2491450 -> Node0x24914c0;
	Node0x24914c0 -> Node0x2491530;
	Node0x2491530 -> Node0x24915a0;
	Node0x24915a0 -> Node0x2491610;
	Node0x2491610 -> Node0x24916b0;
	Node0x24916b0 -> Node0x2491750;
	Node0x2491750 -> Node0x24917c0;
	Node0x24917c0 -> Node0x2491860;
	Node0x2491860 -> Node0x24918d0;
	Node0x24918d0 -> Node0x2491940;
	Node0x2491940 -> Node0x24919b0;
	Node0x24919b0 -> Node0x2491a20;
	Node0x2491a20 -> Node0x2491a90;
	Node0x2491a90 -> Node0x2491b00;
	Node0x2491b00 -> Node0x2491ba0;
	Node0x2491ba0 -> Node0x2491c10;
	Node0x2491c10 -> Node0x2491c80;
	Node0x2491c80 -> Node0x2491d20;
	Node0x2491d20 -> Node0x2491d90;
	Node0x2491d90 -> Node0x2491e00;
	Node0x2491e00 -> Node0x2491ea0;
	Node0x2491ea0 -> Node0x2492120;
	Node0x2492120 -> Node0x2492190;
	Node0x2492190 -> Node0x2492200;
	Node0x2492200 -> Node0x2492270;
	Node0x2492270 -> Node0x24922e0;
	Node0x24922e0 -> Node0x2492350;
	Node0x2492350 -> Node0x24923c0;
	Node0x24923c0 -> Node0x2492430;
	Node0x2492430 -> Node0x24924a0;
	Node0x24924a0 -> Node0x2492510;
	Node0x2492510 -> Node0x2492580;
	Node0x2492580 -> Node0x24925f0;
	Node0x24925f0 -> Node0x2492660;
	Node0x2492660 -> Node0x2431268;
	Node0x2431268 -> Node0x2492b00;
	Node0x2492b00 -> Node0x2492b50;
edge [color=red]
	Node0x2490b70 -> Node0x2490be0;
	Node0x2490c50 -> Node0x24912d0;
	Node0x24912d0 -> Node0x2491370;
	Node0x2491370 -> Node0x24913e0;
	Node0x2490be0 -> Node0x24913e0;
	Node0x2491450 -> Node0x24914c0;
	Node0x2490b70 -> Node0x2491530;
	Node0x2491530 -> Node0x24915a0;
	Node0x24914c0 -> Node0x2491610;
	Node0x2491750 -> Node0x24917c0;
	Node0x24917c0 -> Node0x2491860;
	Node0x24916b0 -> Node0x24918d0;
	Node0x24918d0 -> Node0x2491940;
	Node0x2491a20 -> Node0x2491a90;
	Node0x2491ba0 -> Node0x2491c10;
	Node0x2491b00 -> Node0x2491c80;
	Node0x2491c80 -> Node0x2491d20;
	Node0x2491a90 -> Node0x2491d90;
	Node0x2491d90 -> Node0x2491e00;
	Node0x2491ea0 -> Node0x2492120;
	Node0x2492120 -> Node0x2492190;
	Node0x24914c0 -> Node0x2492190;
	Node0x2492190 -> Node0x2492200;
	Node0x2491860 -> Node0x2492200;
	Node0x2492200 -> Node0x2492270;
	Node0x24919b0 -> Node0x2492270;
	Node0x2492270 -> Node0x24922e0;
	Node0x2491b00 -> Node0x24922e0;
	Node0x24922e0 -> Node0x2492350;
	Node0x2490c50 -> Node0x2492350;
	Node0x2492350 -> Node0x24923c0;
	Node0x2491c10 -> Node0x24923c0;
	Node0x24923c0 -> Node0x2492430;
	Node0x24915a0 -> Node0x2492430;
	Node0x2492430 -> Node0x24924a0;
	Node0x2491610 -> Node0x24924a0;
	Node0x24924a0 -> Node0x2492510;
	Node0x2491940 -> Node0x2492510;
	Node0x2492510 -> Node0x2492580;
	Node0x2491d20 -> Node0x2492580;
	Node0x2492580 -> Node0x24925f0;
	Node0x2491e00 -> Node0x24925f0;
	Node0x24913e0 -> Node0x2492660;
	Node0x24925f0 -> Node0x2492660;
	Node0x2492660 -> Node0x2431268;
	Node0x2431268 -> Node0x2492b00;
}
