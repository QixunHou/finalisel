digraph "DFG for'crackme' function" {
	Node0x1b40420[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1b40ad0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1b40b90[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x1b40c00[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1b40c70[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1b40ce0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1b40d50[shape=record, label="  %9 = and i32 %7, %0"];
	Node0x1b40dc0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1b40e30[shape=record, label="  %11 = xor i32 %0, -1"];
	Node0x1b40ea0[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x1b40f10[shape=record, label="  %13 = add i32 %0, 2"];
	Node0x1b40f80[shape=record, label="  %14 = add i32 %13, %6"];
	Node0x1b40ff0[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x1b41060[shape=record, label="  %16 = add i32 %15, %10"];
	Node0x1b410d0[shape=record, label="  %17 = add i32 %16, %4"];
	Node0x1b41140[shape=record, label="  %18 = sub i32 %17, %12"];
	Node0x1b411b0[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x1b41220[shape=record, label="  %20 = icmp eq i32 %19, %4"];
	Node0x1ae1268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b416c0[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1b41710[shape=record, label="  ret void"];
	Node0x1b40420 -> Node0x1b40ad0;
	Node0x1b40ad0 -> Node0x1b40b90;
	Node0x1b40b90 -> Node0x1b40c00;
	Node0x1b40c00 -> Node0x1b40c70;
	Node0x1b40c70 -> Node0x1b40ce0;
	Node0x1b40ce0 -> Node0x1b40d50;
	Node0x1b40d50 -> Node0x1b40dc0;
	Node0x1b40dc0 -> Node0x1b40e30;
	Node0x1b40e30 -> Node0x1b40ea0;
	Node0x1b40ea0 -> Node0x1b40f10;
	Node0x1b40f10 -> Node0x1b40f80;
	Node0x1b40f80 -> Node0x1b40ff0;
	Node0x1b40ff0 -> Node0x1b41060;
	Node0x1b41060 -> Node0x1b410d0;
	Node0x1b410d0 -> Node0x1b41140;
	Node0x1b41140 -> Node0x1b411b0;
	Node0x1b411b0 -> Node0x1b41220;
	Node0x1b41220 -> Node0x1ae1268;
	Node0x1ae1268 -> Node0x1b416c0;
	Node0x1b416c0 -> Node0x1b41710;
edge [color=red]
	Node0x1b40420 -> Node0x1b40ad0;
	Node0x1b40b90 -> Node0x1b40c00;
	Node0x1b40c70 -> Node0x1b40d50;
	Node0x1b40d50 -> Node0x1b40dc0;
	Node0x1b40e30 -> Node0x1b40ea0;
	Node0x1b40f10 -> Node0x1b40f80;
	Node0x1b40c00 -> Node0x1b40f80;
	Node0x1b40f80 -> Node0x1b40ff0;
	Node0x1b40ce0 -> Node0x1b40ff0;
	Node0x1b40ff0 -> Node0x1b41060;
	Node0x1b40dc0 -> Node0x1b41060;
	Node0x1b41060 -> Node0x1b410d0;
	Node0x1b40ad0 -> Node0x1b410d0;
	Node0x1b410d0 -> Node0x1b41140;
	Node0x1b40ea0 -> Node0x1b41140;
	Node0x1b41140 -> Node0x1b411b0;
	Node0x1b40d50 -> Node0x1b411b0;
	Node0x1b411b0 -> Node0x1b41220;
	Node0x1b40ad0 -> Node0x1b41220;
	Node0x1b41220 -> Node0x1ae1268;
	Node0x1ae1268 -> Node0x1b416c0;
}
