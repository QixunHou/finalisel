digraph "DFG for'main' function" {
	Node0x1b418d8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1b41988[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1b41a18[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1b41e78[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1b41f58[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1b42078[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b422b0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1b42368[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1b432d8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1b43960[shape=record, label="  %8 = or i32 %7, %6"];
	Node0x1b439d0[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1b43a40[shape=record, label="  %10 = and i32 %7, %6"];
	Node0x1b43ab0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1b43b20[shape=record, label="  %12 = xor i32 %7, -1"];
	Node0x1b43b90[shape=record, label="  %13 = xor i32 %7, %6"];
	Node0x1b43c00[shape=record, label="  %14 = and i32 %6, %12"];
	Node0x1b43c70[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1b43ce0[shape=record, label="  %16 = xor i32 %6, -1"];
	Node0x1b43d50[shape=record, label="  %17 = and i32 %7, %16"];
	Node0x1b43dc0[shape=record, label="  %18 = add i32 %6, 2"];
	Node0x1b43e30[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x1b43ea0[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1b43f10[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x1b43f80[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x1b43ff0[shape=record, label="  %23 = sub i32 %22, %17"];
	Node0x1b44060[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0x1b440d0[shape=record, label="  %25 = icmp eq i32 %24, %9"];
	Node0x1ae29d8[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b44160[shape=record, label="  %27 = call i32 @puts(i8* nonnull dereferenceable(1) %26) #5"];
	Node0x1b443b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b44518[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1b445d8[shape=record, label="  ret i32 0"];
	Node0x1b418d8 -> Node0x1b41988;
	Node0x1b41988 -> Node0x1b41a18;
	Node0x1b41a18 -> Node0x1b41e78;
	Node0x1b41e78 -> Node0x1b41f58;
	Node0x1b41f58 -> Node0x1b42078;
	Node0x1b42078 -> Node0x1b422b0;
	Node0x1b422b0 -> Node0x1b42368;
	Node0x1b42368 -> Node0x1b432d8;
	Node0x1b432d8 -> Node0x1b43960;
	Node0x1b43960 -> Node0x1b439d0;
	Node0x1b439d0 -> Node0x1b43a40;
	Node0x1b43a40 -> Node0x1b43ab0;
	Node0x1b43ab0 -> Node0x1b43b20;
	Node0x1b43b20 -> Node0x1b43b90;
	Node0x1b43b90 -> Node0x1b43c00;
	Node0x1b43c00 -> Node0x1b43c70;
	Node0x1b43c70 -> Node0x1b43ce0;
	Node0x1b43ce0 -> Node0x1b43d50;
	Node0x1b43d50 -> Node0x1b43dc0;
	Node0x1b43dc0 -> Node0x1b43e30;
	Node0x1b43e30 -> Node0x1b43ea0;
	Node0x1b43ea0 -> Node0x1b43f10;
	Node0x1b43f10 -> Node0x1b43f80;
	Node0x1b43f80 -> Node0x1b43ff0;
	Node0x1b43ff0 -> Node0x1b44060;
	Node0x1b44060 -> Node0x1b440d0;
	Node0x1b440d0 -> Node0x1ae29d8;
	Node0x1ae29d8 -> Node0x1b44160;
	Node0x1b44160 -> Node0x1b443b8;
	Node0x1b443b8 -> Node0x1b44518;
	Node0x1b44518 -> Node0x1b445d8;
edge [color=red]
	Node0x1b418d8 -> Node0x1b41a18;
	Node0x1b41a18 -> Node0x1b41e78;
	Node0x1b41988 -> Node0x1b41f58;
	Node0x1b41f58 -> Node0x1b42078;
	Node0x1b418d8 -> Node0x1b422b0;
	Node0x1b41988 -> Node0x1b422b0;
	Node0x1b418d8 -> Node0x1b42368;
	Node0x1b41988 -> Node0x1b432d8;
	Node0x1b432d8 -> Node0x1b43960;
	Node0x1b42368 -> Node0x1b43960;
	Node0x1b43960 -> Node0x1b439d0;
	Node0x1b432d8 -> Node0x1b43a40;
	Node0x1b42368 -> Node0x1b43a40;
	Node0x1b43a40 -> Node0x1b43ab0;
	Node0x1b432d8 -> Node0x1b43b20;
	Node0x1b432d8 -> Node0x1b43b90;
	Node0x1b42368 -> Node0x1b43b90;
	Node0x1b42368 -> Node0x1b43c00;
	Node0x1b43b20 -> Node0x1b43c00;
	Node0x1b43c00 -> Node0x1b43c70;
	Node0x1b42368 -> Node0x1b43ce0;
	Node0x1b432d8 -> Node0x1b43d50;
	Node0x1b43ce0 -> Node0x1b43d50;
	Node0x1b42368 -> Node0x1b43dc0;
	Node0x1b43dc0 -> Node0x1b43e30;
	Node0x1b43ab0 -> Node0x1b43e30;
	Node0x1b43e30 -> Node0x1b43ea0;
	Node0x1b43b90 -> Node0x1b43ea0;
	Node0x1b43ea0 -> Node0x1b43f10;
	Node0x1b43c70 -> Node0x1b43f10;
	Node0x1b43f10 -> Node0x1b43f80;
	Node0x1b439d0 -> Node0x1b43f80;
	Node0x1b43f80 -> Node0x1b43ff0;
	Node0x1b43d50 -> Node0x1b43ff0;
	Node0x1b43ff0 -> Node0x1b44060;
	Node0x1b43c00 -> Node0x1b44060;
	Node0x1b44060 -> Node0x1b440d0;
	Node0x1b439d0 -> Node0x1b440d0;
	Node0x1b440d0 -> Node0x1ae29d8;
	Node0x1ae29d8 -> Node0x1b44160;
	Node0x1b41f58 -> Node0x1b443b8;
	Node0x1b41a18 -> Node0x1b44518;
}
