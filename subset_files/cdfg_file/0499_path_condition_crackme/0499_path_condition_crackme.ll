; ModuleID = '../.././c_source_file/0499_path_condition_crackme.c'
source_filename = "../.././c_source_file/0499_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, 2147483647
  %7 = or i32 %6, %4
  %8 = xor i32 %2, -1
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = sub i32 %7, %11
  %13 = shl i32 %12, 1
  %14 = or i32 %4, %3
  %15 = xor i32 %3, -1
  %16 = xor i32 %4, %3
  %17 = and i32 %4, %3
  %18 = or i32 %8, %0
  %19 = and i32 %18, %9
  %20 = xor i32 %1, -1
  %21 = and i32 %2, %0
  %22 = or i32 %21, %20
  %23 = and i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, %1
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %24
  %28 = and i32 %20, %2
  %29 = and i32 %28, %0
  %30 = xor i32 %25, %0
  %31 = xor i32 %30, -1
  %32 = xor i32 %29, %31
  %33 = and i32 %8, %1
  %34 = xor i32 %33, %0
  %35 = or i32 %2, %0
  %36 = xor i32 %35, %23
  %37 = add i32 %23, 1
  %38 = and i32 %20, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %26, %39
  %41 = and i32 %8, %0
  %42 = or i32 %41, %20
  %43 = and i32 %2, %1
  %44 = xor i32 %43, -1
  %45 = xor i32 %41, %44
  %46 = xor i32 %35, -1
  %47 = or i32 %46, %10
  %48 = shl i32 %47, 1
  %49 = or i32 %20, %0
  %50 = xor i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = and i32 %49, %51
  %53 = xor i32 %0, -1
  %54 = xor i32 %33, -1
  %55 = or i32 %54, %53
  %56 = and i32 %35, %10
  %57 = and i32 %25, %24
  %58 = and i32 %43, %0
  %59 = or i32 %58, %31
  %60 = or i32 %43, %38
  %61 = add i32 %9, 1
  %62 = and i32 %50, %9
  %63 = or i32 %46, %1
  %64 = and i32 %49, %26
  %65 = xor i32 %23, %2
  %66 = or i32 %23, %46
  %67 = or i32 %25, %23
  %68 = and i32 %49, %2
  %69 = or i32 %8, %1
  %70 = xor i32 %41, %69
  %71 = shl i32 %70, 1
  %72 = or i32 %1, %0
  %73 = xor i32 %72, -1
  %74 = or i32 %8, %73
  %75 = shl i32 %74, 1
  %76 = or i32 %23, %8
  %77 = and i32 %50, %39
  %78 = xor i32 %58, %30
  %79 = or i32 %2, %1
  %80 = xor i32 %79, %0
  %81 = or i32 %58, %80
  %82 = and i32 %25, %53
  %83 = or i32 %58, %82
  %84 = or i32 %51, %73
  %85 = or i32 %50, %1
  %86 = xor i32 %38, %44
  %87 = xor i32 %18, %1
  %88 = or i32 %46, %20
  %89 = xor i32 %49, -1
  %90 = add i32 %49, 1
  %91 = and i32 %28, %53
  %92 = or i32 %25, %53
  %93 = xor i32 %92, 2147483647
  %94 = or i32 %93, %91
  %95 = or i32 %23, %51
  %96 = or i32 %9, %51
  %97 = or i32 %69, %53
  %98 = xor i32 %18, -1
  %99 = or i32 %98, %10
  %100 = shl i32 %99, 1
  %101 = or i32 %25, %0
  %102 = xor i32 %101, 2147483647
  %103 = or i32 %102, %29
  %104 = shl i32 %103, 1
  %105 = and i32 %8, %10
  %106 = or i32 %43, %0
  %107 = or i32 %21, %89
  %108 = and i32 %8, %24
  %109 = and i32 %44, %0
  %110 = or i32 %21, %10
  %111 = xor i32 %79, -1
  %112 = or i32 %111, %0
  %113 = or i32 %8, %89
  %114 = and i32 %8, %39
  %115 = and i32 %72, %8
  %116 = and i32 %9, %2
  %117 = xor i32 %21, -1
  %118 = and i32 %117, %1
  %119 = or i32 %50, %23
  %120 = xor i32 %49, %2
  %121 = shl i32 %21, 1
  %122 = and i32 %25, %49
  %123 = xor i32 %18, %23
  %124 = or i32 %21, %9
  %125 = or i32 %20, %2
  %126 = xor i32 %125, %0
  %127 = xor i32 %126, -1
  %128 = xor i32 %29, %127
  %129 = and i32 %18, %20
  %130 = or i32 %51, %20
  %131 = or i32 %41, %43
  %132 = xor i32 %69, -1
  %133 = or i32 %132, %0
  %134 = and i32 %9, %51
  %135 = or i32 %33, %0
  %136 = and i32 %39, %2
  %137 = xor i32 %21, %54
  %138 = shl i32 %137, 2
  %139 = and i32 %50, %1
  %140 = or i32 %9, %2
  %141 = and i32 %51, %1
  %142 = shl i32 %141, 1
  %143 = xor i32 %73, %2
  %144 = or i32 %23, %2
  %145 = or i32 %98, %1
  %146 = shl i32 %145, 1
  %147 = or i32 %33, %53
  %148 = xor i32 %91, %92
  %149 = or i32 %132, %53
  %150 = or i32 %26, %53
  %151 = and i32 %117, %10
  %152 = shl i32 %151, 1
  %153 = or i32 %44, %0
  %154 = and i32 %25, %72
  %155 = xor i32 %41, -1
  %156 = and i32 %25, %39
  %157 = shl i32 %156, 1
  %158 = shl i32 %23, 1
  %159 = or i32 %50, %10
  %160 = or i32 %33, %38
  %161 = and i32 %50, %49
  %162 = or i32 %29, %30
  %163 = xor i32 %111, %0
  %164 = add i32 %2, 1
  %165 = and i32 %72, %2
  %166 = or i32 %51, %10
  %167 = or i32 %25, %89
  %168 = xor i32 %21, %49
  %169 = and i32 %35, %20
  %170 = xor i32 %21, %72
  %171 = and i32 %35, %9
  %172 = and i32 %9, %8
  %173 = or i32 %21, %1
  %174 = xor i32 %29, %101
  %175 = xor i32 %69, %23
  %176 = or i32 %38, %51
  %177 = and i32 %51, %39
  %178 = and i32 %26, %0
  %179 = xor i32 %46, %1
  %180 = shl i32 %179, 1
  %181 = and i32 %51, %10
  %182 = xor i32 %35, %1
  %183 = and i32 %117, %20
  %184 = xor i32 %54, %0
  %185 = or i32 %73, %2
  %186 = xor i32 %89, %2
  %187 = or i32 %26, %73
  %188 = xor i32 %125, -1
  %189 = or i32 %188, %0
  %190 = xor i32 %29, %189
  %191 = and i32 %69, %0
  %192 = and i32 %18, %1
  %193 = or i32 %23, %98
  %194 = xor i32 %41, %1
  %195 = or i32 %26, %89
  %196 = or i32 %23, %111
  %197 = shl i32 %117, 1
  %198 = and i32 %9, %117
  %199 = and i32 %50, %10
  %200 = shl i32 %199, 1
  %201 = and i32 %44, %53
  %202 = shl i32 %201, 1
  %203 = or i32 %54, %0
  %204 = and i32 %69, %53
  %205 = and i32 %155, %1
  %206 = or i32 %51, %1
  %207 = or i32 %41, %10
  %208 = shl i32 %207, 1
  %209 = and i32 %79, %53
  %210 = xor i32 %58, -1
  %211 = xor i32 %209, %210
  %212 = or i32 %9, %98
  %213 = or i32 %21, %33
  %214 = and i32 %51, %20
  %215 = shl i32 %214, 1
  %216 = add i32 %41, 1
  %217 = xor i32 %38, %2
  %218 = or i32 %41, %1
  %219 = xor i32 %79, %23
  %220 = shl i32 %219, 2
  %221 = and i32 %54, %0
  %222 = and i32 %51, %24
  %223 = shl i32 %222, 1
  %224 = or i32 %44, %53
  %225 = and i32 %43, %53
  %226 = and i32 %79, %0
  %227 = or i32 %225, %226
  %228 = shl i32 %227, 1
  %229 = or i32 %79, %53
  %230 = or i32 %21, %111
  %231 = or i32 %38, %26
  %232 = xor i32 %26, %0
  %233 = or i32 %41, %9
  %234 = or i32 %111, %53
  %235 = shl i32 %53, 1
  %236 = add i32 %50, 1
  %237 = add i32 %38, 1
  %238 = and i32 %25, %0
  %239 = or i32 %225, %238
  %240 = or i32 %23, %132
  %241 = xor i32 %80, %210
  %242 = and i32 %125, %0
  %243 = xor i32 %242, -1
  %244 = xor i32 %91, %243
  %245 = or i32 %29, %126
  %246 = xor i32 %24, %2
  %247 = or i32 %38, %2
  %248 = xor i32 %21, %1
  %249 = or i32 %25, %73
  %250 = add i32 %72, 1
  %251 = or i32 %98, %20
  %252 = and i32 %35, %1
  %253 = or i32 %69, %0
  %254 = shl i32 %54, 1
  %255 = xor i32 %155, %1
  %256 = and i32 %10, %2
  %257 = shl i32 %256, 1
  %258 = and i32 %18, %10
  %259 = and i32 %111, %53
  %260 = mul i32 %259, -12
  %261 = and i32 %33, %53
  %262 = and i32 %111, %0
  %263 = mul i32 %262, -25
  %264 = and i32 %33, %0
  %265 = mul i32 %264, -18
  %266 = and i32 %132, %53
  %267 = mul i32 %225, -7
  %268 = and i32 %132, %0
  %269 = shl i32 %268, 4
  %270 = add i32 %68, -1
  %271 = add i32 %270, %261
  %272 = add i32 %271, %240
  %273 = add i32 %272, %232
  %274 = add i32 %273, %218
  %275 = add i32 %274, %198
  %276 = add i32 %275, %181
  %277 = add i32 %276, %178
  %278 = add i32 %277, %176
  %279 = add i32 %278, %173
  %280 = add i32 %279, %123
  %281 = add i32 %280, %77
  %282 = add i32 %281, %56
  %283 = add i32 %282, %36
  %284 = add i32 %283, %27
  %285 = add i32 %284, %245
  %286 = add i32 %285, %239
  %287 = add i32 %286, %174
  %288 = add i32 %287, %59
  %289 = add i32 %288, %94
  %290 = shl i32 %289, 1
  %291 = sub i32 %175, %58
  %292 = add i32 %291, %167
  %293 = sub i32 %292, %67
  %294 = add i32 %293, %42
  %295 = mul i32 %294, 5
  %296 = add i32 %149, %133
  %297 = shl i32 %296, 2
  %298 = sub i32 %207, %212
  %299 = add i32 %298, %135
  %300 = add i32 %299, %96
  %301 = mul i32 %300, 3
  %302 = sub i32 1, %0
  %303 = add i32 %302, %20
  %304 = sub i32 %303, %1
  %305 = sub i32 %304, %235
  %306 = add i32 %305, %37
  %307 = add i32 %306, %61
  %308 = sub i32 %307, %72
  %309 = add i32 %308, %9
  %310 = add i32 %309, %49
  %311 = add i32 %310, %90
  %312 = add i32 %311, %2
  %313 = sub i32 %312, %38
  %314 = add i32 %313, %164
  %315 = add i32 %314, %237
  %316 = add i32 %315, %250
  %317 = add i32 %316, %15
  %318 = sub i32 %317, %3
  %319 = add i32 %318, %65
  %320 = add i32 %319, %76
  %321 = sub i32 %320, %41
  %322 = add i32 %321, %105
  %323 = add i32 %322, %26
  %324 = sub i32 %323, %108
  %325 = add i32 %324, %113
  %326 = sub i32 %325, %114
  %327 = add i32 %326, %115
  %328 = add i32 %327, %116
  %329 = add i32 %328, %120
  %330 = sub i32 %329, %136
  %331 = add i32 %330, %33
  %332 = sub i32 %331, %140
  %333 = add i32 %332, %132
  %334 = sub i32 %333, %143
  %335 = add i32 %334, %144
  %336 = sub i32 %335, %25
  %337 = sub i32 %336, %158
  %338 = sub i32 %337, %165
  %339 = sub i32 %338, %172
  %340 = add i32 %339, %185
  %341 = add i32 %340, %186
  %342 = add i32 %341, %216
  %343 = add i32 %342, %217
  %344 = add i32 %343, %236
  %345 = add i32 %344, %246
  %346 = sub i32 %345, %247
  %347 = add i32 %346, %19
  %348 = add i32 %347, %22
  %349 = add i32 %348, %34
  %350 = add i32 %349, %40
  %351 = add i32 %350, %45
  %352 = add i32 %351, %52
  %353 = add i32 %352, %55
  %354 = sub i32 %353, %57
  %355 = add i32 %354, %60
  %356 = sub i32 %355, %62
  %357 = add i32 %356, %63
  %358 = sub i32 %357, %64
  %359 = add i32 %358, %66
  %360 = sub i32 %359, %75
  %361 = sub i32 %360, %84
  %362 = sub i32 %361, %85
  %363 = add i32 %362, %86
  %364 = sub i32 %363, %87
  %365 = sub i32 %364, %88
  %366 = sub i32 %365, %95
  %367 = sub i32 %366, %97
  %368 = sub i32 %367, %106
  %369 = sub i32 %368, %107
  %370 = add i32 %369, %109
  %371 = add i32 %370, %110
  %372 = add i32 %371, %112
  %373 = add i32 %372, %101
  %374 = add i32 %373, %118
  %375 = add i32 %374, %119
  %376 = sub i32 %375, %121
  %377 = sub i32 %376, %122
  %378 = sub i32 %377, %80
  %379 = sub i32 %378, %124
  %380 = add i32 %379, %129
  %381 = sub i32 %380, %130
  %382 = add i32 %381, %131
  %383 = add i32 %382, %134
  %384 = sub i32 %383, %139
  %385 = add i32 %384, %147
  %386 = add i32 %385, %150
  %387 = add i32 %386, %153
  %388 = add i32 %387, %154
  %389 = add i32 %388, %159
  %390 = sub i32 %389, %160
  %391 = sub i32 %390, %30
  %392 = add i32 %391, %161
  %393 = sub i32 %392, %163
  %394 = add i32 %393, %166
  %395 = sub i32 %394, %168
  %396 = sub i32 %395, %169
  %397 = add i32 %396, %170
  %398 = sub i32 %397, %171
  %399 = sub i32 %398, %82
  %400 = add i32 %399, %177
  %401 = add i32 %400, %182
  %402 = add i32 %401, %183
  %403 = add i32 %402, %184
  %404 = add i32 %403, %187
  %405 = sub i32 %404, %191
  %406 = add i32 %405, %192
  %407 = sub i32 %406, %193
  %408 = sub i32 %407, %194
  %409 = sub i32 %408, %195
  %410 = add i32 %409, %196
  %411 = sub i32 %410, %197
  %412 = add i32 %411, %203
  %413 = sub i32 %412, %204
  %414 = add i32 %413, %205
  %415 = sub i32 %414, %206
  %416 = add i32 %415, %213
  %417 = sub i32 %416, %221
  %418 = sub i32 %417, %224
  %419 = sub i32 %418, %229
  %420 = add i32 %419, %209
  %421 = sub i32 %420, %230
  %422 = sub i32 %421, %231
  %423 = sub i32 %422, %233
  %424 = add i32 %423, %234
  %425 = sub i32 %424, %248
  %426 = add i32 %425, %249
  %427 = add i32 %426, %251
  %428 = sub i32 %427, %252
  %429 = add i32 %428, %253
  %430 = sub i32 %429, %254
  %431 = sub i32 %430, %255
  %432 = sub i32 %431, %257
  %433 = sub i32 %432, %258
  %434 = add i32 %433, %266
  %435 = add i32 %434, %14
  %436 = sub i32 %435, %16
  %437 = add i32 %436, %17
  %438 = add i32 %437, %32
  %439 = sub i32 %438, %48
  %440 = sub i32 %439, %71
  %441 = sub i32 %440, %78
  %442 = sub i32 %441, %81
  %443 = sub i32 %442, %83
  %444 = sub i32 %443, %100
  %445 = add i32 %444, %128
  %446 = sub i32 %445, %138
  %447 = sub i32 %446, %142
  %448 = sub i32 %447, %146
  %449 = add i32 %448, %148
  %450 = sub i32 %449, %152
  %451 = sub i32 %450, %157
  %452 = sub i32 %451, %162
  %453 = sub i32 %452, %180
  %454 = sub i32 %453, %190
  %455 = sub i32 %454, %200
  %456 = sub i32 %455, %202
  %457 = sub i32 %456, %208
  %458 = sub i32 %457, %211
  %459 = sub i32 %458, %215
  %460 = sub i32 %459, %220
  %461 = sub i32 %460, %223
  %462 = sub i32 %461, %241
  %463 = add i32 %462, %244
  %464 = add i32 %463, %260
  %465 = add i32 %464, %263
  %466 = add i32 %465, %265
  %467 = add i32 %466, %267
  %468 = sub i32 %467, %269
  %469 = sub i32 %468, %228
  %470 = add i32 %469, %297
  %471 = sub i32 %470, %104
  %472 = add i32 %471, %295
  %473 = add i32 %472, %301
  %474 = add i32 %473, %290
  %475 = icmp eq i32 %13, %474
  %476 = select i1 %475, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %477 = tail call i32 @puts(i8* nonnull dereferenceable(1) %476)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
