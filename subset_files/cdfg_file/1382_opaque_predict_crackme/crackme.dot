digraph "DFG for'crackme' function" {
	Node0x1e3cba0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1e3cc10[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1e3ccd0[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x1e3cd40[shape=record, label="  %6 = xor i32 %5, %1"];
	Node0x1e3cdb0[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x1e3ce20[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1e3ce90[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1e3cf00[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1e3cf70[shape=record, label="  %11 = shl i32 %9, 1"];
	Node0x1e3d010[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1e3d0b0[shape=record, label="  %13 = shl i32 %4, 2"];
	Node0x1e3d150[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x1e3d1c0[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x1e3d260[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x1e3d2d0[shape=record, label="  %17 = add i32 %7, %1"];
	Node0x1e3d340[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1e3d3b0[shape=record, label="  %19 = sub i32 %1, %0"];
	Node0x1e3d420[shape=record, label="  %20 = add i32 %19, %6"];
	Node0x1e3d490[shape=record, label="  %21 = add i32 %20, %8"];
	Node0x1e3d500[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x1e3d570[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x1e3d5e0[shape=record, label="  %24 = sub i32 %23, %12"];
	Node0x1e3d650[shape=record, label="  %25 = sub i32 %24, %14"];
	Node0x1e3d6c0[shape=record, label="  %26 = add i32 %25, %18"];
	Node0x1e3d730[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x1ddd268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e3dbd0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1e3dc20[shape=record, label="  ret void"];
	Node0x1e3cba0 -> Node0x1e3cc10;
	Node0x1e3cc10 -> Node0x1e3ccd0;
	Node0x1e3ccd0 -> Node0x1e3cd40;
	Node0x1e3cd40 -> Node0x1e3cdb0;
	Node0x1e3cdb0 -> Node0x1e3ce20;
	Node0x1e3ce20 -> Node0x1e3ce90;
	Node0x1e3ce90 -> Node0x1e3cf00;
	Node0x1e3cf00 -> Node0x1e3cf70;
	Node0x1e3cf70 -> Node0x1e3d010;
	Node0x1e3d010 -> Node0x1e3d0b0;
	Node0x1e3d0b0 -> Node0x1e3d150;
	Node0x1e3d150 -> Node0x1e3d1c0;
	Node0x1e3d1c0 -> Node0x1e3d260;
	Node0x1e3d260 -> Node0x1e3d2d0;
	Node0x1e3d2d0 -> Node0x1e3d340;
	Node0x1e3d340 -> Node0x1e3d3b0;
	Node0x1e3d3b0 -> Node0x1e3d420;
	Node0x1e3d420 -> Node0x1e3d490;
	Node0x1e3d490 -> Node0x1e3d500;
	Node0x1e3d500 -> Node0x1e3d570;
	Node0x1e3d570 -> Node0x1e3d5e0;
	Node0x1e3d5e0 -> Node0x1e3d650;
	Node0x1e3d650 -> Node0x1e3d6c0;
	Node0x1e3d6c0 -> Node0x1e3d730;
	Node0x1e3d730 -> Node0x1ddd268;
	Node0x1ddd268 -> Node0x1e3dbd0;
	Node0x1e3dbd0 -> Node0x1e3dc20;
edge [color=red]
	Node0x1e3cba0 -> Node0x1e3cc10;
	Node0x1e3ccd0 -> Node0x1e3cd40;
	Node0x1e3cba0 -> Node0x1e3cdb0;
	Node0x1e3cdb0 -> Node0x1e3ce20;
	Node0x1e3ce90 -> Node0x1e3cf00;
	Node0x1e3ce90 -> Node0x1e3cf70;
	Node0x1e3cf70 -> Node0x1e3d010;
	Node0x1e3cc10 -> Node0x1e3d0b0;
	Node0x1e3d0b0 -> Node0x1e3d150;
	Node0x1e3d1c0 -> Node0x1e3d260;
	Node0x1e3cdb0 -> Node0x1e3d2d0;
	Node0x1e3d2d0 -> Node0x1e3d340;
	Node0x1e3d3b0 -> Node0x1e3d420;
	Node0x1e3cd40 -> Node0x1e3d420;
	Node0x1e3d420 -> Node0x1e3d490;
	Node0x1e3ce20 -> Node0x1e3d490;
	Node0x1e3d490 -> Node0x1e3d500;
	Node0x1e3cf00 -> Node0x1e3d500;
	Node0x1e3d500 -> Node0x1e3d570;
	Node0x1e3d260 -> Node0x1e3d570;
	Node0x1e3d570 -> Node0x1e3d5e0;
	Node0x1e3d010 -> Node0x1e3d5e0;
	Node0x1e3d5e0 -> Node0x1e3d650;
	Node0x1e3d150 -> Node0x1e3d650;
	Node0x1e3d650 -> Node0x1e3d6c0;
	Node0x1e3d340 -> Node0x1e3d6c0;
	Node0x1e3cc10 -> Node0x1e3d730;
	Node0x1e3d6c0 -> Node0x1e3d730;
	Node0x1e3d730 -> Node0x1ddd268;
	Node0x1ddd268 -> Node0x1e3dbd0;
}
