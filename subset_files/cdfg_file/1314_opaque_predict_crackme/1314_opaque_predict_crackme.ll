; ModuleID = '../.././c_source_file/1314_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1314_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = shl i32 %6, 1
  %8 = xor i32 %2, -1
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = and i32 %2, %0
  %13 = or i32 %2, %1
  %14 = xor i32 %12, %13
  %15 = sub i32 %14, %11
  %16 = add i32 %15, %7
  %17 = xor i32 %4, %3
  %18 = and i32 %4, %3
  %19 = xor i32 %18, -1
  %20 = shl i32 %3, 1
  %21 = xor i32 %20, -2
  %22 = or i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = xor i32 %3, -1
  %25 = and i32 %24, %4
  %26 = and i32 %6, %3
  %27 = shl i32 %26, 2
  %28 = xor i32 %1, -1
  %29 = xor i32 %2, %0
  %30 = and i32 %29, %28
  %31 = or i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %32, %2
  %34 = xor i32 %29, -1
  %35 = and i32 %9, %34
  %36 = and i32 %8, %0
  %37 = or i32 %8, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %36, %38
  %40 = and i32 %28, %0
  %41 = or i32 %40, %2
  %42 = shl i32 %37, 1
  %43 = or i32 %2, %0
  %44 = and i32 %43, %9
  %45 = and i32 %28, %2
  %46 = and i32 %45, %0
  %47 = xor i32 %2, %1
  %48 = xor i32 %47, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %46, %49
  %51 = and i32 %2, %1
  %52 = and i32 %51, %0
  %53 = xor i32 %0, -1
  %54 = and i32 %13, %53
  %55 = xor i32 %52, 2147483647
  %56 = xor i32 %55, %54
  %57 = shl i32 %56, 1
  %58 = xor i32 %40, -1
  %59 = xor i32 %47, -1
  %60 = and i32 %59, %58
  %61 = and i32 %1, %0
  %62 = xor i32 %43, %61
  %63 = xor i32 %43, -1
  %64 = add i32 %43, 1
  %65 = or i32 %28, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %29, %66
  %68 = or i32 %28, %2
  %69 = xor i32 %68, %0
  %70 = xor i32 %69, -1
  %71 = xor i32 %46, %70
  %72 = and i32 %8, %1
  %73 = xor i32 %72, %0
  %74 = add i32 %47, 1
  %75 = or i32 %47, %61
  %76 = or i32 %37, %0
  %77 = xor i32 %12, -1
  %78 = and i32 %77, %28
  %79 = xor i32 %38, %0
  %80 = or i32 %34, %1
  %81 = xor i32 %58, %2
  %82 = or i32 %38, %0
  %83 = and i32 %68, %53
  %84 = or i32 %46, %83
  %85 = and i32 %65, %8
  %86 = xor i32 %52, %48
  %87 = shl i32 %86, 1
  %88 = or i32 %46, %69
  %89 = or i32 %38, %53
  %90 = xor i32 %13, %0
  %91 = or i32 %8, %0
  %92 = xor i32 %91, -1
  %93 = or i32 %92, %1
  %94 = and i32 %59, %53
  %95 = add i32 %9, 1
  %96 = or i32 %61, %59
  %97 = or i32 %8, %66
  %98 = or i32 %36, %1
  %99 = and i32 %10, %2
  %100 = and i32 %37, %53
  %101 = xor i32 %31, %2
  %102 = and i32 %47, %53
  %103 = or i32 %52, %102
  %104 = or i32 %34, %28
  %105 = or i32 %47, %0
  %106 = xor i32 %105, 2147483647
  %107 = or i32 %106, %46
  %108 = or i32 %29, %40
  %109 = and i32 %65, %34
  %110 = or i32 %52, %54
  %111 = and i32 %9, %77
  %112 = xor i32 %12, %31
  %113 = xor i32 %13, -1
  %114 = shl i32 %113, 2
  %115 = or i32 %113, %0
  %116 = xor i32 %61, -1
  %117 = and i32 %59, %116
  %118 = xor i32 %90, -1
  %119 = xor i32 %52, %118
  %120 = or i32 %63, %28
  %121 = or i32 %66, %2
  %122 = xor i32 %36, %1
  %123 = and i32 %31, %2
  %124 = or i32 %29, %28
  %125 = or i32 %12, %113
  %126 = xor i32 %12, %1
  %127 = and i32 %116, %2
  %128 = or i32 %34, %66
  %129 = xor i32 %63, %1
  %130 = xor i32 %36, -1
  %131 = and i32 %130, %1
  %132 = or i32 %40, %8
  %133 = shl i32 %132, 1
  %134 = and i32 %43, %28
  %135 = or i32 %9, %63
  %136 = xor i32 %91, %61
  %137 = xor i32 %92, %1
  %138 = or i32 %36, %51
  %139 = or i32 %9, %8
  %140 = shl i32 %12, 1
  %141 = and i32 %77, %10
  %142 = or i32 %9, %34
  %143 = and i32 %77, %1
  %144 = shl i32 %143, 1
  %145 = xor i32 %72, -1
  %146 = and i32 %145, %53
  %147 = or i32 %61, %92
  %148 = xor i32 %130, %1
  %149 = or i32 %29, %1
  %150 = and i32 %31, %59
  %151 = or i32 %47, %32
  %152 = or i32 %34, %32
  %153 = or i32 %72, %53
  %154 = xor i32 %40, %2
  %155 = or i32 %92, %10
  %156 = shl i32 %155, 1
  %157 = or i32 %12, %1
  %158 = xor i32 %77, %1
  %159 = xor i32 %51, %0
  %160 = shl i32 %159, 1
  %161 = xor i32 %51, -1
  %162 = add i32 %51, 1
  %163 = or i32 %10, %2
  %164 = and i32 %51, %53
  %165 = and i32 %13, %0
  %166 = or i32 %164, %165
  %167 = or i32 %12, %28
  %168 = and i32 %65, %2
  %169 = or i32 %46, %48
  %170 = and i32 %29, %116
  %171 = or i32 %13, %53
  %172 = shl i32 %171, 1
  %173 = xor i32 %113, %0
  %174 = and i32 %29, %9
  %175 = or i32 %161, %0
  %176 = and i32 %45, %53
  %177 = and i32 %68, %0
  %178 = xor i32 %177, 2147483647
  %179 = xor i32 %178, %176
  %180 = shl i32 %179, 1
  %181 = and i32 %9, %2
  %182 = shl i32 %181, 1
  %183 = or i32 %36, %10
  %184 = shl i32 %183, 1
  %185 = and i32 %29, %10
  %186 = or i32 %29, %9
  %187 = or i32 %8, %32
  %188 = xor i32 %12, %145
  %189 = and i32 %47, %116
  %190 = or i32 %145, %53
  %191 = and i32 %43, %1
  %192 = or i32 %40, %34
  %193 = shl i32 %192, 1
  %194 = and i32 %43, %10
  %195 = shl i32 %31, 1
  %196 = or i32 %52, %49
  %197 = and i32 %91, %28
  %198 = or i32 %63, %1
  %199 = or i32 %61, %113
  %200 = and i32 %47, %58
  %201 = or i32 %72, %0
  %202 = or i32 %51, %53
  %203 = shl i32 %202, 1
  %204 = and i32 %59, %0
  %205 = or i32 %29, %10
  %206 = and i32 %130, %10
  %207 = xor i32 %40, %145
  %208 = or i32 %61, %63
  %209 = or i32 %59, %0
  %210 = or i32 %36, %28
  %211 = or i32 %13, %0
  %212 = or i32 %59, %66
  %213 = and i32 %145, %0
  %214 = and i32 %47, %0
  %215 = xor i32 %32, %2
  %216 = or i32 %164, %214
  %217 = or i32 %113, %53
  %218 = or i32 %37, %53
  %219 = and i32 %91, %10
  %220 = shl i32 %43, 1
  %221 = xor i32 %91, %1
  %222 = xor i32 %40, %161
  %223 = or i32 %92, %28
  %224 = xor i32 %161, %0
  %225 = and i32 %8, %10
  %226 = or i32 %9, %92
  %227 = xor i32 %66, %2
  %228 = and i32 %8, %116
  %229 = and i32 %9, %8
  %230 = shl i32 %229, 1
  %231 = and i32 %91, %9
  %232 = and i32 %161, %0
  %233 = shl i32 %61, 1
  %234 = or i32 %12, %66
  %235 = xor i32 %46, %105
  %236 = or i32 %29, %32
  %237 = shl i32 %236, 1
  %238 = or i32 %161, %53
  %239 = xor i32 %37, %0
  %240 = or i32 %51, %0
  %241 = or i32 %29, %61
  %242 = or i32 %176, %177
  %243 = and i32 %9, %130
  %244 = xor i32 %37, %61
  %245 = xor i32 %165, -1
  %246 = xor i32 %164, %245
  %247 = or i32 %47, %66
  %248 = add i32 %72, 1
  %249 = and i32 %29, %65
  %250 = or i32 %9, %2
  %251 = and i32 %29, %58
  %252 = xor i32 %12, %65
  %253 = and i32 %29, %1
  %254 = shl i32 %253, 1
  %255 = or i32 %61, %38
  %256 = xor i32 %55, %102
  %257 = and i32 %34, %28
  %258 = shl i32 %257, 1
  %259 = or i32 %12, %10
  %260 = or i32 %59, %53
  %261 = or i32 %12, %72
  %262 = or i32 %145, %0
  %263 = and i32 %161, %53
  %264 = and i32 %91, %1
  %265 = shl i32 %264, 1
  %266 = xor i32 %59, %0
  %267 = xor i32 %145, %0
  %268 = xor i32 %65, %2
  %269 = and i32 %31, %8
  %270 = xor i32 %36, %161
  %271 = xor i32 %61, %2
  %272 = shl i32 %271, 1
  %273 = or i32 %40, %59
  %274 = or i32 %12, %32
  %275 = xor i32 %13, %61
  %276 = or i32 %47, %40
  %277 = shl i32 %276, 1
  %278 = and i32 %37, %0
  %279 = and i32 %47, %31
  %280 = or i32 %63, %10
  %281 = xor i32 %43, %1
  %282 = and i32 %65, %59
  %283 = or i32 %61, %8
  %284 = and i32 %8, %58
  %285 = or i32 %61, %34
  %286 = or i32 %59, %32
  %287 = and i32 %29, %31
  %288 = xor i32 %287, -1
  %289 = or i32 %34, %10
  %290 = or i32 %52, %90
  %291 = and i32 %34, %116
  %292 = or i32 %47, %53
  %293 = and i32 %31, %34
  %294 = and i32 %34, %10
  %295 = shl i32 %294, 1
  %296 = xor i32 %116, %2
  %297 = or i32 %51, %40
  %298 = xor i32 %176, %292
  %299 = xor i32 %292, -1
  %300 = or i32 %176, %299
  %301 = shl i32 %116, 1
  %302 = shl i32 %77, 1
  %303 = and i32 %34, %58
  %304 = shl i32 %303, 1
  %305 = or i32 %12, %9
  %306 = or i32 %36, %9
  %307 = xor i32 %36, %37
  %308 = and i32 %113, %53
  %309 = and i32 %72, %53
  %310 = and i32 %113, %0
  %311 = shl i32 %310, 3
  %312 = and i32 %72, %0
  %313 = and i32 %38, %53
  %314 = mul i32 %313, -21
  %315 = mul i32 %164, -10
  %316 = and i32 %38, %0
  %317 = shl i32 %316, 2
  %318 = mul i32 %52, -12
  %319 = add i32 %269, %0
  %320 = add i32 %319, %38
  %321 = add i32 %320, %72
  %322 = add i32 %321, %121
  %323 = add i32 %322, %81
  %324 = add i32 %323, %285
  %325 = add i32 %324, %274
  %326 = add i32 %325, %260
  %327 = add i32 %326, %249
  %328 = add i32 %327, %247
  %329 = add i32 %328, %241
  %330 = add i32 %329, %238
  %331 = add i32 %330, %221
  %332 = add i32 %331, %207
  %333 = add i32 %332, %204
  %334 = add i32 %333, %197
  %335 = add i32 %334, %148
  %336 = add i32 %335, %137
  %337 = add i32 %336, %129
  %338 = add i32 %337, %117
  %339 = add i32 %338, %111
  %340 = add i32 %339, %235
  %341 = sub i32 %212, %292
  %342 = add i32 %341, %185
  %343 = add i32 %342, %157
  %344 = add i32 %343, %138
  %345 = sub i32 %344, %18
  %346 = sub i32 %345, %169
  %347 = sub i32 %346, %25
  %348 = mul i32 %347, 3
  %349 = add i32 %308, %93
  %350 = add i32 %349, %82
  %351 = add i32 %350, %30
  %352 = mul i32 %351, 5
  %353 = sub i32 %312, %309
  %354 = mul i32 %353, 11
  %355 = add i32 %340, %17
  %356 = add i32 %355, %107
  %357 = add i32 %356, %256
  %358 = shl i32 %357, 1
  %359 = add i32 %48, 1073741823
  %360 = add i32 %359, %104
  %361 = shl i32 %360, 2
  %362 = add i32 %32, %0
  %363 = add i32 %362, %95
  %364 = add i32 %363, %8
  %365 = add i32 %364, %66
  %366 = sub i32 %365, %2
  %367 = add i32 %366, %9
  %368 = sub i32 %367, %65
  %369 = add i32 %368, %3
  %370 = sub i32 %369, %33
  %371 = sub i32 %370, %41
  %372 = add i32 %371, %64
  %373 = add i32 %372, %47
  %374 = add i32 %373, %74
  %375 = sub i32 %374, %85
  %376 = sub i32 %375, %13
  %377 = add i32 %376, %97
  %378 = sub i32 %377, %99
  %379 = add i32 %378, %101
  %380 = add i32 %379, %123
  %381 = add i32 %380, %127
  %382 = add i32 %381, %51
  %383 = add i32 %382, %139
  %384 = sub i32 %383, %154
  %385 = add i32 %384, %162
  %386 = add i32 %385, %163
  %387 = sub i32 %386, %168
  %388 = sub i32 %387, %187
  %389 = sub i32 %388, %195
  %390 = add i32 %389, %215
  %391 = add i32 %390, %225
  %392 = add i32 %391, %227
  %393 = add i32 %392, %228
  %394 = sub i32 %393, %233
  %395 = add i32 %394, %248
  %396 = add i32 %395, %250
  %397 = sub i32 %396, %268
  %398 = add i32 %397, %283
  %399 = sub i32 %398, %284
  %400 = sub i32 %399, %296
  %401 = sub i32 %400, %301
  %402 = add i32 %401, %35
  %403 = sub i32 %402, %39
  %404 = sub i32 %403, %42
  %405 = sub i32 %404, %44
  %406 = sub i32 %405, %60
  %407 = sub i32 %406, %62
  %408 = sub i32 %407, %67
  %409 = sub i32 %408, %73
  %410 = add i32 %409, %75
  %411 = sub i32 %410, %76
  %412 = add i32 %411, %78
  %413 = sub i32 %412, %79
  %414 = add i32 %413, %80
  %415 = add i32 %414, %89
  %416 = sub i32 %415, %90
  %417 = add i32 %416, %94
  %418 = sub i32 %417, %96
  %419 = sub i32 %418, %98
  %420 = sub i32 %419, %100
  %421 = add i32 %420, %108
  %422 = sub i32 %421, %109
  %423 = sub i32 %422, %112
  %424 = sub i32 %423, %114
  %425 = add i32 %424, %115
  %426 = add i32 %425, %120
  %427 = add i32 %426, %122
  %428 = sub i32 %427, %124
  %429 = sub i32 %428, %125
  %430 = sub i32 %429, %126
  %431 = sub i32 %430, %105
  %432 = add i32 %431, %128
  %433 = sub i32 %432, %131
  %434 = sub i32 %433, %133
  %435 = sub i32 %434, %134
  %436 = add i32 %435, %135
  %437 = sub i32 %436, %136
  %438 = sub i32 %437, %140
  %439 = sub i32 %438, %141
  %440 = add i32 %439, %142
  %441 = sub i32 %440, %146
  %442 = add i32 %441, %147
  %443 = add i32 %442, %149
  %444 = sub i32 %443, %150
  %445 = sub i32 %444, %151
  %446 = sub i32 %445, %152
  %447 = add i32 %446, %153
  %448 = add i32 %447, %158
  %449 = add i32 %448, %167
  %450 = add i32 %449, %170
  %451 = sub i32 %450, %173
  %452 = sub i32 %451, %174
  %453 = sub i32 %452, %175
  %454 = sub i32 %453, %182
  %455 = add i32 %454, %54
  %456 = sub i32 %455, %186
  %457 = add i32 %456, %102
  %458 = sub i32 %457, %188
  %459 = sub i32 %458, %189
  %460 = add i32 %459, %190
  %461 = sub i32 %460, %191
  %462 = sub i32 %461, %194
  %463 = add i32 %462, %165
  %464 = add i32 %463, %198
  %465 = sub i32 %464, %199
  %466 = sub i32 %465, %200
  %467 = sub i32 %466, %201
  %468 = sub i32 %467, %205
  %469 = add i32 %468, %206
  %470 = sub i32 %469, %208
  %471 = sub i32 %470, %209
  %472 = add i32 %471, %210
  %473 = add i32 %472, %211
  %474 = add i32 %473, %213
  %475 = sub i32 %474, %214
  %476 = add i32 %475, %217
  %477 = add i32 %476, %218
  %478 = sub i32 %477, %219
  %479 = sub i32 %478, %220
  %480 = add i32 %479, %222
  %481 = sub i32 %480, %223
  %482 = add i32 %481, %224
  %483 = add i32 %482, %226
  %484 = sub i32 %483, %230
  %485 = sub i32 %484, %231
  %486 = sub i32 %485, %232
  %487 = add i32 %486, %234
  %488 = add i32 %487, %239
  %489 = sub i32 %488, %240
  %490 = add i32 %489, %243
  %491 = sub i32 %490, %244
  %492 = sub i32 %491, %251
  %493 = add i32 %492, %252
  %494 = add i32 %493, %255
  %495 = sub i32 %494, %259
  %496 = sub i32 %495, %261
  %497 = sub i32 %496, %262
  %498 = sub i32 %497, %263
  %499 = add i32 %498, %266
  %500 = sub i32 %499, %267
  %501 = add i32 %500, %270
  %502 = sub i32 %501, %272
  %503 = add i32 %502, %273
  %504 = add i32 %503, %275
  %505 = sub i32 %504, %278
  %506 = sub i32 %505, %279
  %507 = sub i32 %506, %280
  %508 = add i32 %507, %281
  %509 = sub i32 %508, %282
  %510 = add i32 %509, %286
  %511 = add i32 %510, %288
  %512 = sub i32 %511, %289
  %513 = sub i32 %512, %291
  %514 = sub i32 %513, %293
  %515 = add i32 %514, %297
  %516 = sub i32 %515, %302
  %517 = add i32 %516, %305
  %518 = sub i32 %517, %306
  %519 = add i32 %518, %307
  %520 = add i32 %519, %19
  %521 = sub i32 %520, %21
  %522 = add i32 %521, %23
  %523 = add i32 %522, %50
  %524 = sub i32 %523, %71
  %525 = add i32 %524, %84
  %526 = sub i32 %525, %88
  %527 = sub i32 %526, %103
  %528 = sub i32 %527, %110
  %529 = sub i32 %528, %119
  %530 = sub i32 %529, %144
  %531 = sub i32 %530, %156
  %532 = sub i32 %531, %160
  %533 = sub i32 %532, %166
  %534 = sub i32 %533, %172
  %535 = sub i32 %534, %184
  %536 = sub i32 %535, %193
  %537 = add i32 %536, %196
  %538 = sub i32 %537, %203
  %539 = add i32 %538, %216
  %540 = sub i32 %539, %237
  %541 = sub i32 %540, %242
  %542 = add i32 %541, %246
  %543 = sub i32 %542, %254
  %544 = sub i32 %543, %258
  %545 = sub i32 %544, %265
  %546 = sub i32 %545, %277
  %547 = add i32 %546, %290
  %548 = sub i32 %547, %295
  %549 = sub i32 %548, %298
  %550 = add i32 %549, %300
  %551 = sub i32 %550, %304
  %552 = sub i32 %551, %311
  %553 = add i32 %552, %314
  %554 = add i32 %553, %315
  %555 = sub i32 %554, %317
  %556 = add i32 %555, %318
  %557 = sub i32 %556, %27
  %558 = sub i32 %557, %87
  %559 = add i32 %558, %354
  %560 = sub i32 %559, %57
  %561 = sub i32 %560, %180
  %562 = add i32 %561, %361
  %563 = add i32 %562, %352
  %564 = add i32 %563, %348
  %565 = add i32 %564, %358
  %566 = icmp eq i32 %16, %565
  %567 = select i1 %566, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %568 = tail call i32 @puts(i8* nonnull dereferenceable(1) %567)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
