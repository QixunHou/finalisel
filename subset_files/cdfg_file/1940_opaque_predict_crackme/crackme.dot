digraph "DFG for'crackme' function" {
	Node0x15c5af0[shape=record, label="  %3 = add i32 %0, 1"];
	Node0x15c5b90[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x15c5c50[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x15c5cc0[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x15c5d30[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x15c5da0[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x15c5e10[shape=record, label="  %9 = shl i32 %1, 1"];
	Node0x15c5e80[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0x15c5f20[shape=record, label="  %11 = mul i32 %10, 5"];
	Node0x15c5f90[shape=record, label="  %12 = and i32 %4, %0"];
	Node0x15c6030[shape=record, label="  %13 = shl i32 %6, 2"];
	Node0x15c60a0[shape=record, label="  %14 = add i32 %12, %4"];
	Node0x15c6110[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x15c6180[shape=record, label="  %16 = sub i32 2, %0"];
	Node0x15c61f0[shape=record, label="  %17 = add i32 %16, %5"];
	Node0x15c6260[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0x15c62d0[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x15c6340[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x15c63b0[shape=record, label="  %21 = sub i32 %20, %8"];
	Node0x15c6420[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x15c6490[shape=record, label="  %23 = icmp eq i32 %3, %22"];
	Node0x1566268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x15c6930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x15c6980[shape=record, label="  ret void"];
	Node0x15c5af0 -> Node0x15c5b90;
	Node0x15c5b90 -> Node0x15c5c50;
	Node0x15c5c50 -> Node0x15c5cc0;
	Node0x15c5cc0 -> Node0x15c5d30;
	Node0x15c5d30 -> Node0x15c5da0;
	Node0x15c5da0 -> Node0x15c5e10;
	Node0x15c5e10 -> Node0x15c5e80;
	Node0x15c5e80 -> Node0x15c5f20;
	Node0x15c5f20 -> Node0x15c5f90;
	Node0x15c5f90 -> Node0x15c6030;
	Node0x15c6030 -> Node0x15c60a0;
	Node0x15c60a0 -> Node0x15c6110;
	Node0x15c6110 -> Node0x15c6180;
	Node0x15c6180 -> Node0x15c61f0;
	Node0x15c61f0 -> Node0x15c6260;
	Node0x15c6260 -> Node0x15c62d0;
	Node0x15c62d0 -> Node0x15c6340;
	Node0x15c6340 -> Node0x15c63b0;
	Node0x15c63b0 -> Node0x15c6420;
	Node0x15c6420 -> Node0x15c6490;
	Node0x15c6490 -> Node0x1566268;
	Node0x1566268 -> Node0x15c6930;
	Node0x15c6930 -> Node0x15c6980;
edge [color=red]
	Node0x15c5b90 -> Node0x15c5c50;
	Node0x15c5cc0 -> Node0x15c5d30;
	Node0x15c5d30 -> Node0x15c5da0;
	Node0x15c5c50 -> Node0x15c5e80;
	Node0x15c5e80 -> Node0x15c5f20;
	Node0x15c5b90 -> Node0x15c5f90;
	Node0x15c5cc0 -> Node0x15c6030;
	Node0x15c5f90 -> Node0x15c60a0;
	Node0x15c5b90 -> Node0x15c60a0;
	Node0x15c60a0 -> Node0x15c6110;
	Node0x15c6180 -> Node0x15c61f0;
	Node0x15c5c50 -> Node0x15c61f0;
	Node0x15c61f0 -> Node0x15c6260;
	Node0x15c5e10 -> Node0x15c6260;
	Node0x15c6260 -> Node0x15c62d0;
	Node0x15c5f20 -> Node0x15c62d0;
	Node0x15c62d0 -> Node0x15c6340;
	Node0x15c6030 -> Node0x15c6340;
	Node0x15c6340 -> Node0x15c63b0;
	Node0x15c5da0 -> Node0x15c63b0;
	Node0x15c63b0 -> Node0x15c6420;
	Node0x15c6110 -> Node0x15c6420;
	Node0x15c5af0 -> Node0x15c6490;
	Node0x15c6420 -> Node0x15c6490;
	Node0x15c6490 -> Node0x1566268;
	Node0x1566268 -> Node0x15c6930;
}
