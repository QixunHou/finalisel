; ModuleID = '../.././c_source_file/0741_path_condition_crackme.c'
source_filename = "../.././c_source_file/0741_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = or i32 %2, %1
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = sub i32 0, %7
  %9 = xor i32 %0, -1
  %10 = and i32 %2, %1
  %11 = and i32 %10, %9
  %12 = xor i32 %2, %1
  %13 = and i32 %12, %0
  %14 = xor i32 %13, 2147483647
  %15 = xor i32 %11, %14
  %16 = and i32 %10, %0
  %17 = and i32 %12, %9
  %18 = xor i32 %17, -1
  %19 = xor i32 %16, %18
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %2, %0
  %24 = and i32 %23, %22
  %25 = xor i32 %23, -1
  %26 = and i32 %25, %1
  %27 = xor i32 %2, -1
  %28 = and i32 %27, %0
  %29 = xor i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %28, %30
  %32 = xor i32 %4, -1
  %33 = and i32 %29, %32
  %34 = and i32 %1, %0
  %35 = or i32 %34, %2
  %36 = and i32 %27, %1
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %0
  %39 = xor i32 %34, -1
  %40 = and i32 %27, %39
  %41 = or i32 %2, %0
  %42 = xor i32 %41, %1
  %43 = or i32 %1, %0
  %44 = and i32 %43, %27
  %45 = xor i32 %12, -1
  %46 = xor i32 %45, %0
  %47 = xor i32 %39, %2
  %48 = or i32 %20, %0
  %49 = and i32 %48, %25
  %50 = and i32 %29, %25
  %51 = shl i32 %50, 1
  %52 = or i32 %28, %10
  %53 = and i32 %48, %27
  %54 = xor i32 %28, -1
  %55 = xor i32 %41, -1
  %56 = or i32 %55, %30
  %57 = and i32 %25, %39
  %58 = or i32 %27, %1
  %59 = xor i32 %58, %34
  %60 = or i32 %6, %0
  %61 = shl i32 %60, 1
  %62 = xor i32 %48, -1
  %63 = or i32 %4, %62
  %64 = or i32 %5, %9
  %65 = or i32 %27, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %20
  %68 = shl i32 %67, 1
  %69 = or i32 %58, %0
  %70 = and i32 %5, %0
  %71 = xor i32 %70, 1073741823
  %72 = xor i32 %71, %11
  %73 = add i32 %1, 1
  %74 = and i32 %20, %2
  %75 = and i32 %74, %0
  %76 = or i32 %20, %2
  %77 = and i32 %76, %9
  %78 = xor i32 %77, 2147483647
  %79 = xor i32 %78, %75
  %80 = or i32 %75, %77
  %81 = xor i32 %21, %37
  %82 = and i32 %65, %29
  %83 = or i32 %10, %0
  %84 = xor i32 %58, -1
  %85 = or i32 %34, %84
  %86 = shl i32 %85, 1
  %87 = and i32 %25, %20
  %88 = and i32 %23, %20
  %89 = or i32 %23, %1
  %90 = add i32 %34, 1
  %91 = or i32 %12, %0
  %92 = xor i32 %91, 2147483647
  %93 = or i32 %92, %75
  %94 = shl i32 %93, 1
  %95 = or i32 %55, %20
  %96 = or i32 %4, %20
  %97 = and i32 %32, %20
  %98 = or i32 %58, %9
  %99 = or i32 %4, %1
  %100 = or i32 %16, %17
  %101 = and i32 %23, %48
  %102 = xor i32 %6, %0
  %103 = and i32 %74, %9
  %104 = and i32 %76, %0
  %105 = xor i32 %104, -1
  %106 = xor i32 %103, %105
  %107 = or i32 %27, %30
  %108 = shl i32 %107, 1
  %109 = or i32 %12, %9
  %110 = and i32 %37, %9
  %111 = or i32 %34, %27
  %112 = or i32 %45, %0
  %113 = xor i32 %28, %1
  %114 = or i32 %10, %21
  %115 = xor i32 %10, -1
  %116 = or i32 %115, %0
  %117 = or i32 %29, %2
  %118 = xor i32 %43, -1
  %119 = xor i32 %118, %2
  %120 = xor i32 %43, %2
  %121 = and i32 %45, %9
  %122 = xor i32 %76, %0
  %123 = xor i32 %122, -1
  %124 = xor i32 %75, %123
  %125 = and i32 %32, %1
  %126 = or i32 %12, %118
  %127 = xor i32 %36, %0
  %128 = or i32 %36, %21
  %129 = or i32 %4, %30
  %130 = or i32 %66, %30
  %131 = xor i32 %32, %1
  %132 = or i32 %36, %0
  %133 = and i32 %29, %27
  %134 = xor i32 %62, %2
  %135 = xor i32 %12, %0
  %136 = or i32 %25, %20
  %137 = and i32 %5, %9
  %138 = or i32 %23, %118
  %139 = or i32 %28, %20
  %140 = or i32 %75, %122
  %141 = shl i32 %140, 1
  %142 = xor i32 %41, %34
  %143 = or i32 %12, %34
  %144 = or i32 %36, %9
  %145 = or i32 %45, %9
  %146 = or i32 %28, %84
  %147 = shl i32 %146, 1
  %148 = or i32 %29, %55
  %149 = add i32 %58, 1
  %150 = or i32 %34, %55
  %151 = and i32 %27, %30
  %152 = or i32 %23, %29
  %153 = or i32 %29, %27
  %154 = and i32 %22, %2
  %155 = or i32 %12, %21
  %156 = or i32 %25, %30
  %157 = or i32 %23, %30
  %158 = xor i32 %84, %0
  %159 = or i32 %34, %45
  %160 = or i32 %23, %21
  %161 = or i32 %28, %29
  %162 = or i32 %25, %62
  %163 = or i32 %21, %25
  %164 = and i32 %58, %0
  %165 = or i32 %34, %6
  %166 = xor i32 %4, %37
  %167 = and i32 %23, %43
  %168 = shl i32 %167, 1
  %169 = xor i32 %5, %0
  %170 = or i32 %16, %169
  %171 = shl i32 %170, 1
  %172 = or i32 %29, %66
  %173 = and i32 %54, %30
  %174 = xor i32 %135, -1
  %175 = or i32 %16, %174
  %176 = xor i32 %4, %48
  %177 = and i32 %23, %30
  %178 = and i32 %115, %9
  %179 = or i32 %16, %137
  %180 = and i32 %39, %2
  %181 = and i32 %25, %30
  %182 = and i32 %115, %0
  %183 = or i32 %118, %2
  %184 = and i32 %12, %22
  %185 = xor i32 %5, %34
  %186 = and i32 %41, %20
  %187 = or i32 %45, %118
  %188 = and i32 %29, %2
  %189 = and i32 %32, %30
  %190 = and i32 %41, %30
  %191 = or i32 %27, %118
  %192 = shl i32 %191, 1
  %193 = xor i32 %21, %2
  %194 = and i32 %43, %45
  %195 = or i32 %34, %66
  %196 = xor i32 %21, %115
  %197 = shl i32 %196, 2
  %198 = and i32 %27, %22
  %199 = or i32 %21, %27
  %200 = and i32 %45, %39
  %201 = xor i32 %66, %1
  %202 = xor i32 %4, %5
  %203 = and i32 %58, %9
  %204 = shl i32 %203, 1
  %205 = add i32 %4, 1
  %206 = xor i32 %4, %43
  %207 = shl i32 %206, 1
  %208 = or i32 %21, %2
  %209 = and i32 %43, %2
  %210 = xor i32 %34, %2
  %211 = add i32 %23, 1
  %212 = and i32 %29, %54
  %213 = or i32 %5, %0
  %214 = and i32 %54, %20
  %215 = or i32 %103, %104
  %216 = and i32 %6, %9
  %217 = and i32 %36, %9
  %218 = mul i32 %217, -14
  %219 = and i32 %6, %0
  %220 = mul i32 %219, -9
  %221 = and i32 %36, %0
  %222 = and i32 %84, %9
  %223 = mul i32 %222, -12
  %224 = and i32 %84, %0
  %225 = mul i32 %16, -25
  %226 = add i32 %199, %30
  %227 = add i32 %226, %35
  %228 = add i32 %227, %213
  %229 = add i32 %228, %178
  %230 = add i32 %229, %177
  %231 = add i32 %230, %70
  %232 = add i32 %231, %165
  %233 = add i32 %232, %135
  %234 = add i32 %233, %121
  %235 = add i32 %234, %114
  %236 = add i32 %235, %113
  %237 = add i32 %236, %82
  %238 = add i32 %237, %100
  %239 = sub i32 %238, %15
  %240 = add i32 %239, %79
  %241 = shl i32 %240, 1
  %242 = or i32 %11, %221
  %243 = add i32 %242, %216
  %244 = add i32 %243, %185
  %245 = mul i32 %244, -5
  %246 = sub i32 %64, %58
  %247 = add i32 %246, %83
  %248 = mul i32 %247, 3
  %249 = add i32 %72, %224
  %250 = shl i32 %249, 2
  %251 = sub i32 -2, %0
  %252 = sub i32 %251, %0
  %253 = add i32 %252, %73
  %254 = add i32 %253, %43
  %255 = add i32 %254, %90
  %256 = add i32 %255, %22
  %257 = sub i32 %256, %48
  %258 = add i32 %257, %40
  %259 = add i32 %258, %44
  %260 = sub i32 %259, %47
  %261 = add i32 %260, %41
  %262 = add i32 %261, %37
  %263 = sub i32 %262, %53
  %264 = add i32 %263, %54
  %265 = sub i32 %264, %111
  %266 = sub i32 %265, %36
  %267 = sub i32 %266, %117
  %268 = sub i32 %267, %119
  %269 = sub i32 %268, %120
  %270 = sub i32 %269, %133
  %271 = sub i32 %270, %134
  %272 = add i32 %271, %115
  %273 = add i32 %272, %149
  %274 = sub i32 %273, %151
  %275 = sub i32 %274, %153
  %276 = add i32 %275, %154
  %277 = add i32 %276, %180
  %278 = sub i32 %277, %10
  %279 = add i32 %278, %183
  %280 = sub i32 %279, %188
  %281 = add i32 %280, %45
  %282 = add i32 %281, %193
  %283 = sub i32 %282, %198
  %284 = add i32 %283, %205
  %285 = sub i32 %284, %208
  %286 = sub i32 %285, %209
  %287 = sub i32 %286, %210
  %288 = add i32 %287, %211
  %289 = sub i32 %288, %24
  %290 = sub i32 %289, %26
  %291 = add i32 %290, %31
  %292 = sub i32 %291, %33
  %293 = add i32 %292, %38
  %294 = add i32 %293, %42
  %295 = sub i32 %294, %46
  %296 = add i32 %295, %49
  %297 = add i32 %296, %52
  %298 = add i32 %297, %56
  %299 = add i32 %298, %57
  %300 = add i32 %299, %59
  %301 = add i32 %300, %63
  %302 = sub i32 %301, %69
  %303 = add i32 %302, %81
  %304 = sub i32 %303, %87
  %305 = sub i32 %304, %88
  %306 = add i32 %305, %89
  %307 = add i32 %306, %95
  %308 = add i32 %307, %96
  %309 = add i32 %308, %97
  %310 = add i32 %309, %98
  %311 = add i32 %310, %99
  %312 = add i32 %311, %101
  %313 = add i32 %312, %102
  %314 = sub i32 %313, %108
  %315 = sub i32 %314, %109
  %316 = add i32 %315, %110
  %317 = add i32 %316, %112
  %318 = sub i32 %317, %116
  %319 = add i32 %318, %125
  %320 = add i32 %319, %126
  %321 = add i32 %320, %127
  %322 = add i32 %321, %128
  %323 = sub i32 %322, %129
  %324 = add i32 %323, %130
  %325 = sub i32 %324, %131
  %326 = add i32 %325, %132
  %327 = add i32 %326, %136
  %328 = add i32 %327, %137
  %329 = add i32 %328, %138
  %330 = sub i32 %329, %139
  %331 = sub i32 %330, %142
  %332 = sub i32 %331, %143
  %333 = add i32 %332, %144
  %334 = add i32 %333, %145
  %335 = add i32 %334, %148
  %336 = add i32 %335, %150
  %337 = add i32 %336, %152
  %338 = add i32 %337, %155
  %339 = add i32 %338, %17
  %340 = add i32 %339, %156
  %341 = sub i32 %340, %91
  %342 = sub i32 %341, %157
  %343 = add i32 %342, %158
  %344 = sub i32 %343, %159
  %345 = sub i32 %344, %160
  %346 = sub i32 %345, %161
  %347 = add i32 %346, %162
  %348 = sub i32 %347, %163
  %349 = add i32 %348, %164
  %350 = add i32 %349, %166
  %351 = add i32 %350, %172
  %352 = add i32 %351, %173
  %353 = sub i32 %352, %176
  %354 = sub i32 %353, %181
  %355 = sub i32 %354, %182
  %356 = add i32 %355, %169
  %357 = add i32 %356, %184
  %358 = sub i32 %357, %186
  %359 = sub i32 %358, %187
  %360 = add i32 %359, %189
  %361 = add i32 %360, %190
  %362 = sub i32 %361, %192
  %363 = add i32 %362, %194
  %364 = sub i32 %363, %195
  %365 = add i32 %364, %200
  %366 = add i32 %365, %201
  %367 = add i32 %366, %202
  %368 = sub i32 %367, %212
  %369 = add i32 %368, %214
  %370 = sub i32 %369, %19
  %371 = sub i32 %370, %51
  %372 = sub i32 %371, %61
  %373 = sub i32 %372, %68
  %374 = sub i32 %373, %80
  %375 = sub i32 %374, %86
  %376 = add i32 %375, %106
  %377 = add i32 %376, %124
  %378 = sub i32 %377, %147
  %379 = sub i32 %378, %168
  %380 = sub i32 %379, %175
  %381 = sub i32 %380, %179
  %382 = sub i32 %381, %197
  %383 = sub i32 %382, %204
  %384 = sub i32 %383, %207
  %385 = sub i32 %384, %215
  %386 = add i32 %385, %218
  %387 = add i32 %386, %220
  %388 = add i32 %387, %223
  %389 = add i32 %388, %225
  %390 = sub i32 %389, %141
  %391 = sub i32 %390, %171
  %392 = sub i32 %391, %94
  %393 = add i32 %392, %248
  %394 = add i32 %393, %245
  %395 = add i32 %394, %250
  %396 = add i32 %395, %241
  %397 = icmp eq i32 %396, %8
  %398 = select i1 %397, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %399 = tail call i32 @puts(i8* nonnull dereferenceable(1) %398)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
