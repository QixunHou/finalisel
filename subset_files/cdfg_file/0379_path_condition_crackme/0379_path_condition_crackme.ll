; ModuleID = '../.././c_source_file/0379_path_condition_crackme.c'
source_filename = "../.././c_source_file/0379_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = xor i32 %2, -1
  %8 = or i32 %1, %0
  %9 = and i32 %8, %7
  %10 = sub i32 %9, %6
  %11 = xor i32 %4, %3
  %12 = and i32 %4, %3
  %13 = xor i32 %12, -1
  %14 = xor i32 %4, -1
  %15 = and i32 %14, %3
  %16 = xor i32 %15, -1
  %17 = or i32 %14, %3
  %18 = shl i32 %3, 1
  %19 = xor i32 %18, -2
  %20 = shl i32 %17, 2
  %21 = xor i32 %20, -4
  %22 = shl i32 %15, 1
  %23 = mul i32 %12, -7
  %24 = xor i32 %1, %0
  %25 = and i32 %24, %2
  %26 = shl i32 %25, 1
  %27 = and i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %1
  %30 = and i32 %29, %28
  %31 = xor i32 %1, -1
  %32 = and i32 %31, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %2, %0
  %35 = and i32 %34, %33
  %36 = xor i32 %24, -1
  %37 = xor i32 %34, -1
  %38 = and i32 %37, %36
  %39 = or i32 %31, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %7, %40
  %42 = and i32 %2, %0
  %43 = or i32 %42, %40
  %44 = and i32 %31, %2
  %45 = and i32 %44, %0
  %46 = xor i32 %29, %0
  %47 = or i32 %45, %46
  %48 = or i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %49, %36
  %51 = xor i32 %42, -1
  %52 = and i32 %51, %1
  %53 = and i32 %7, %0
  %54 = xor i32 %53, -1
  %55 = and i32 %54, %36
  %56 = xor i32 %0, -1
  %57 = and i32 %44, %56
  %58 = or i32 %31, %2
  %59 = and i32 %58, %0
  %60 = or i32 %57, %59
  %61 = or i32 %32, %2
  %62 = and i32 %2, %1
  %63 = xor i32 %62, -1
  %64 = and i32 %63, %0
  %65 = or i32 %62, %32
  %66 = and i32 %7, %1
  %67 = xor i32 %66, -1
  %68 = and i32 %67, %56
  %69 = xor i32 %29, -1
  %70 = shl i32 %69, 1
  %71 = and i32 %7, %36
  %72 = or i32 %7, %1
  %73 = xor i32 %72, -1
  %74 = or i32 %49, %1
  %75 = shl i32 %74, 1
  %76 = or i32 %29, %56
  %77 = xor i32 %76, 2147483647
  %78 = or i32 %77, %57
  %79 = shl i32 %78, 1
  %80 = or i32 %69, %40
  %81 = shl i32 %80, 1
  %82 = and i32 %58, %56
  %83 = or i32 %45, %82
  %84 = xor i32 %8, -1
  %85 = or i32 %29, %84
  %86 = and i32 %33, %2
  %87 = or i32 %34, %1
  %88 = or i32 %69, %0
  %89 = or i32 %37, %36
  %90 = or i32 %32, %69
  %91 = or i32 %2, %1
  %92 = and i32 %91, %0
  %93 = and i32 %62, %56
  %94 = and i32 %29, %0
  %95 = or i32 %93, %94
  %96 = or i32 %53, %73
  %97 = and i32 %48, %36
  %98 = xor i32 %32, %67
  %99 = or i32 %66, %56
  %100 = shl i32 %99, 1
  %101 = xor i32 %51, %1
  %102 = or i32 %73, %56
  %103 = xor i32 %42, %1
  %104 = xor i32 %42, %39
  %105 = or i32 %7, %0
  %106 = xor i32 %105, -1
  %107 = or i32 %27, %106
  %108 = and i32 %62, %0
  %109 = and i32 %91, %56
  %110 = or i32 %108, %109
  %111 = shl i32 %110, 1
  %112 = or i32 %106, %31
  %113 = shl i32 %112, 1
  %114 = and i32 %34, %36
  %115 = or i32 %37, %1
  %116 = and i32 %34, %24
  %117 = shl i32 %116, 1
  %118 = and i32 %8, %2
  %119 = or i32 %53, %31
  %120 = and i32 %24, %37
  %121 = or i32 %34, %27
  %122 = or i32 %106, %1
  %123 = or i32 %34, %24
  %124 = or i32 %42, %1
  %125 = or i32 %34, %36
  %126 = or i32 %42, %36
  %127 = xor i32 %91, -1
  %128 = or i32 %127, %56
  %129 = or i32 %53, %36
  %130 = xor i32 %73, %0
  %131 = or i32 %42, %127
  %132 = or i32 %69, %84
  %133 = or i32 %67, %56
  %134 = and i32 %63, %56
  %135 = and i32 %54, %1
  %136 = xor i32 %58, %0
  %137 = xor i32 %45, -1
  %138 = xor i32 %136, %137
  %139 = and i32 %8, %37
  %140 = xor i32 %72, %0
  %141 = and i32 %29, %56
  %142 = or i32 %108, %141
  %143 = xor i32 %32, %2
  %144 = or i32 %127, %0
  %145 = or i32 %29, %0
  %146 = xor i32 %46, -1
  %147 = xor i32 %45, %146
  %148 = xor i32 %91, %27
  %149 = xor i32 %63, %0
  %150 = and i32 %34, %8
  %151 = or i32 %24, %2
  %152 = xor i32 %27, %2
  %153 = or i32 %106, %36
  %154 = shl i32 %153, 1
  %155 = xor i32 %105, %1
  %156 = or i32 %42, %66
  %157 = or i32 %27, %73
  %158 = xor i32 %127, %0
  %159 = xor i32 %72, %27
  %160 = and i32 %29, %33
  %161 = shl i32 %160, 1
  %162 = and i32 %8, %69
  %163 = and i32 %48, %24
  %164 = or i32 %40, %2
  %165 = xor i32 %108, -1
  %166 = xor i32 %109, %165
  %167 = or i32 %27, %69
  %168 = or i32 %73, %0
  %169 = and i32 %29, %8
  %170 = and i32 %37, %1
  %171 = xor i32 %48, %27
  %172 = or i32 %53, %62
  %173 = and i32 %69, %0
  %174 = or i32 %67, %0
  %175 = and i32 %72, %56
  %176 = xor i32 %105, %27
  %177 = xor i32 %91, %0
  %178 = xor i32 %108, %46
  %179 = and i32 %69, %56
  %180 = or i32 %24, %106
  %181 = add i32 %8, 1
  %182 = and i32 %51, %31
  %183 = or i32 %63, %0
  %184 = add i32 %105, 1
  %185 = or i32 %24, %37
  %186 = or i32 %24, %7
  %187 = or i32 %45, %136
  %188 = or i32 %37, %31
  %189 = or i32 %24, %49
  %190 = or i32 %42, %84
  %191 = or i32 %36, %2
  %192 = add i32 %48, 1
  %193 = and i32 %39, %7
  %194 = add i32 %62, 1
  %195 = or i32 %34, %84
  %196 = or i32 %29, %32
  %197 = or i32 %84, %2
  %198 = xor i32 %84, %2
  %199 = or i32 %42, %31
  %200 = or i32 %29, %40
  %201 = or i32 %27, %7
  %202 = or i32 %27, %37
  %203 = shl i32 %202, 1
  %204 = and i32 %105, %36
  %205 = or i32 %62, %56
  %206 = shl i32 %205, 1
  %207 = xor i32 %40, %2
  %208 = and i32 %105, %24
  %209 = and i32 %7, %33
  %210 = or i32 %37, %40
  %211 = or i32 %49, %31
  %212 = xor i32 %28, %2
  %213 = and i32 %28, %2
  %214 = or i32 %42, %24
  %215 = and i32 %67, %0
  %216 = or i32 %66, %32
  %217 = or i32 %7, %84
  %218 = or i32 %63, %56
  %219 = or i32 %72, %0
  %220 = or i32 %37, %84
  %221 = and i32 %39, %37
  %222 = or i32 %93, %92
  %223 = and i32 %69, %28
  %224 = shl i32 %223, 1
  %225 = and i32 %48, %31
  %226 = or i32 %27, %2
  %227 = xor i32 %42, %91
  %228 = xor i32 %45, %145
  %229 = xor i32 %141, 2147483647
  %230 = xor i32 %229, %108
  %231 = and i32 %34, %31
  %232 = or i32 %69, %56
  %233 = or i32 %34, %32
  %234 = xor i32 %42, %8
  %235 = and i32 %54, %31
  %236 = xor i32 %8, %2
  %237 = xor i32 %53, %1
  %238 = and i32 %39, %2
  %239 = xor i32 %66, %0
  %240 = or i32 %91, %56
  %241 = and i32 %69, %33
  %242 = xor i32 %32, %63
  %243 = or i32 %62, %0
  %244 = or i32 %91, %0
  %245 = and i32 %105, %31
  %246 = and i32 %24, %54
  %247 = or i32 %66, %0
  %248 = or i32 %7, %36
  %249 = and i32 %72, %0
  %250 = and i32 %37, %28
  %251 = xor i32 %82, %137
  %252 = xor i32 %62, %0
  %253 = xor i32 %33, %2
  %254 = shl i32 %253, 1
  %255 = and i32 %48, %1
  %256 = xor i32 %53, %72
  %257 = shl i32 %91, 1
  %258 = xor i32 %106, %1
  %259 = xor i32 %42, %67
  %260 = or i32 %29, %27
  %261 = and i32 %34, %28
  %262 = xor i32 %67, %0
  %263 = shl i32 %262, 1
  %264 = and i32 %36, %2
  %265 = or i32 %32, %37
  %266 = xor i32 %53, %63
  %267 = and i32 %34, %39
  %268 = xor i32 %94, -1
  %269 = xor i32 %93, %268
  %270 = and i32 %37, %31
  %271 = and i32 %24, %7
  %272 = xor i32 %39, %2
  %273 = shl i32 %272, 1
  %274 = xor i32 %69, %0
  %275 = or i32 %53, %1
  %276 = shl i32 %275, 1
  %277 = or i32 %32, %7
  %278 = xor i32 %54, %1
  %279 = shl i32 %105, 1
  %280 = xor i32 %59, 2147483647
  %281 = xor i32 %280, %57
  %282 = shl i32 %281, 1
  %283 = xor i32 %49, %1
  %284 = and i32 %24, %51
  %285 = xor i32 %177, %165
  %286 = and i32 %51, %36
  %287 = and i32 %105, %1
  %288 = xor i32 %145, 2147483647
  %289 = or i32 %288, %45
  %290 = shl i32 %289, 1
  %291 = and i32 %34, %1
  %292 = shl i32 %291, 1
  %293 = or i32 %27, %127
  %294 = or i32 %34, %40
  %295 = and i32 %39, %69
  %296 = and i32 %37, %33
  %297 = or i32 %108, %177
  %298 = or i32 %72, %56
  %299 = xor i32 %48, %1
  %300 = shl i32 %299, 1
  %301 = or i32 %108, %146
  %302 = and i32 %29, %39
  %303 = and i32 %66, %56
  %304 = mul i32 %303, 10
  %305 = and i32 %127, %0
  %306 = mul i32 %305, -13
  %307 = and i32 %66, %0
  %308 = mul i32 %307, 15
  %309 = and i32 %73, %56
  %310 = mul i32 %309, -11
  %311 = and i32 %73, %0
  %312 = mul i32 %311, -21
  %313 = mul i32 %108, -25
  %314 = add i32 %31, %0
  %315 = add i32 %314, %24
  %316 = add i32 %315, %118
  %317 = add i32 %316, %86
  %318 = add i32 %317, %265
  %319 = add i32 %318, %233
  %320 = add i32 %319, %225
  %321 = add i32 %320, %221
  %322 = add i32 %321, %216
  %323 = add i32 %322, %204
  %324 = add i32 %323, %185
  %325 = add i32 %324, %177
  %326 = add i32 %325, %175
  %327 = add i32 %326, %167
  %328 = add i32 %327, %159
  %329 = add i32 %328, %150
  %330 = add i32 %329, %122
  %331 = add i32 %330, %115
  %332 = add i32 %331, %97
  %333 = add i32 %332, %64
  %334 = add i32 %333, %50
  %335 = add i32 %334, %38
  %336 = add i32 %335, %301
  %337 = add i32 %336, %222
  %338 = add i32 %337, %230
  %339 = shl i32 %338, 1
  %340 = add i32 %213, %238
  %341 = add i32 %340, %132
  %342 = add i32 %341, %156
  %343 = add i32 %342, %4
  %344 = shl i32 %343, 2
  %345 = sub i32 %51, %72
  %346 = add i32 %345, %129
  %347 = add i32 %346, %93
  %348 = mul i32 %347, 3
  %349 = add i32 %35, %186
  %350 = sub i32 %109, %349
  %351 = mul i32 %350, 5
  %352 = sub i32 %1, %0
  %353 = add i32 %352, %27
  %354 = add i32 %353, %181
  %355 = sub i32 %354, %32
  %356 = add i32 %355, %27
  %357 = add i32 %356, %24
  %358 = add i32 %357, 3
  %359 = add i32 %358, %33
  %360 = add i32 %359, %8
  %361 = sub i32 %360, %41
  %362 = sub i32 %361, %61
  %363 = add i32 %362, %34
  %364 = add i32 %363, %71
  %365 = sub i32 %364, %53
  %366 = add i32 %365, %73
  %367 = add i32 %366, %143
  %368 = add i32 %367, %151
  %369 = add i32 %368, %152
  %370 = sub i32 %369, %62
  %371 = add i32 %370, %164
  %372 = sub i32 %371, %29
  %373 = add i32 %372, %184
  %374 = add i32 %373, %191
  %375 = add i32 %374, %192
  %376 = add i32 %375, %193
  %377 = add i32 %376, %194
  %378 = sub i32 %377, %197
  %379 = sub i32 %378, %198
  %380 = add i32 %379, %67
  %381 = sub i32 %380, %201
  %382 = add i32 %381, %207
  %383 = sub i32 %382, %209
  %384 = add i32 %383, %127
  %385 = sub i32 %384, %212
  %386 = add i32 %385, %217
  %387 = sub i32 %386, %226
  %388 = sub i32 %387, %236
  %389 = add i32 %388, %248
  %390 = sub i32 %389, %42
  %391 = add i32 %390, %264
  %392 = add i32 %391, %48
  %393 = add i32 %392, %271
  %394 = sub i32 %393, %277
  %395 = add i32 %394, %54
  %396 = sub i32 %395, %66
  %397 = sub i32 %396, %26
  %398 = add i32 %397, %30
  %399 = add i32 %398, %43
  %400 = sub i32 %399, %52
  %401 = sub i32 %400, %55
  %402 = add i32 %401, %65
  %403 = add i32 %402, %68
  %404 = sub i32 %403, %70
  %405 = add i32 %404, %85
  %406 = sub i32 %405, %87
  %407 = sub i32 %406, %88
  %408 = add i32 %407, %89
  %409 = add i32 %408, %90
  %410 = sub i32 %409, %92
  %411 = add i32 %410, %96
  %412 = add i32 %411, %98
  %413 = add i32 %412, %101
  %414 = sub i32 %413, %102
  %415 = add i32 %414, %103
  %416 = add i32 %415, %104
  %417 = sub i32 %416, %107
  %418 = sub i32 %417, %114
  %419 = add i32 %418, %119
  %420 = add i32 %419, %120
  %421 = sub i32 %420, %121
  %422 = sub i32 %421, %123
  %423 = sub i32 %422, %124
  %424 = sub i32 %423, %76
  %425 = sub i32 %424, %125
  %426 = sub i32 %425, %126
  %427 = sub i32 %426, %128
  %428 = add i32 %427, %130
  %429 = add i32 %428, %131
  %430 = sub i32 %429, %133
  %431 = sub i32 %430, %134
  %432 = add i32 %431, %135
  %433 = add i32 %432, %139
  %434 = sub i32 %433, %140
  %435 = sub i32 %434, %144
  %436 = sub i32 %435, %145
  %437 = sub i32 %436, %148
  %438 = sub i32 %437, %149
  %439 = add i32 %438, %155
  %440 = sub i32 %439, %157
  %441 = add i32 %440, %158
  %442 = add i32 %441, %162
  %443 = sub i32 %442, %163
  %444 = sub i32 %443, %168
  %445 = sub i32 %444, %169
  %446 = sub i32 %445, %170
  %447 = sub i32 %446, %171
  %448 = add i32 %447, %172
  %449 = add i32 %448, %173
  %450 = add i32 %449, %174
  %451 = add i32 %450, %176
  %452 = sub i32 %451, %179
  %453 = add i32 %452, %180
  %454 = sub i32 %453, %182
  %455 = add i32 %454, %183
  %456 = add i32 %455, %94
  %457 = sub i32 %456, %188
  %458 = sub i32 %457, %189
  %459 = add i32 %458, %190
  %460 = sub i32 %459, %195
  %461 = sub i32 %460, %196
  %462 = sub i32 %461, %199
  %463 = sub i32 %462, %200
  %464 = add i32 %463, %208
  %465 = add i32 %464, %210
  %466 = sub i32 %465, %211
  %467 = add i32 %466, %214
  %468 = add i32 %467, %215
  %469 = sub i32 %468, %141
  %470 = sub i32 %469, %218
  %471 = add i32 %470, %219
  %472 = add i32 %471, %220
  %473 = sub i32 %472, %227
  %474 = sub i32 %473, %231
  %475 = add i32 %474, %232
  %476 = sub i32 %475, %234
  %477 = add i32 %476, %235
  %478 = add i32 %477, %237
  %479 = sub i32 %478, %239
  %480 = add i32 %479, %240
  %481 = add i32 %480, %241
  %482 = add i32 %481, %242
  %483 = sub i32 %482, %243
  %484 = add i32 %483, %244
  %485 = add i32 %484, %245
  %486 = sub i32 %485, %246
  %487 = sub i32 %486, %247
  %488 = sub i32 %487, %249
  %489 = add i32 %488, %250
  %490 = add i32 %489, %252
  %491 = sub i32 %490, %254
  %492 = sub i32 %491, %255
  %493 = add i32 %492, %256
  %494 = sub i32 %493, %257
  %495 = add i32 %494, %258
  %496 = add i32 %495, %259
  %497 = sub i32 %496, %260
  %498 = add i32 %497, %261
  %499 = add i32 %498, %266
  %500 = add i32 %499, %267
  %501 = sub i32 %500, %270
  %502 = sub i32 %501, %273
  %503 = sub i32 %502, %274
  %504 = sub i32 %503, %278
  %505 = sub i32 %504, %279
  %506 = add i32 %505, %283
  %507 = add i32 %506, %284
  %508 = sub i32 %507, %286
  %509 = sub i32 %508, %287
  %510 = add i32 %509, %293
  %511 = add i32 %510, %294
  %512 = sub i32 %511, %295
  %513 = sub i32 %512, %296
  %514 = sub i32 %513, %298
  %515 = sub i32 %514, %302
  %516 = sub i32 %515, %11
  %517 = add i32 %516, %13
  %518 = add i32 %517, %16
  %519 = add i32 %518, %17
  %520 = sub i32 %519, %19
  %521 = add i32 %520, %6
  %522 = sub i32 %521, %47
  %523 = add i32 %522, %60
  %524 = sub i32 %523, %75
  %525 = sub i32 %524, %81
  %526 = add i32 %525, %83
  %527 = sub i32 %526, %95
  %528 = sub i32 %527, %100
  %529 = sub i32 %528, %113
  %530 = sub i32 %529, %117
  %531 = sub i32 %530, %138
  %532 = sub i32 %531, %142
  %533 = sub i32 %532, %147
  %534 = sub i32 %533, %154
  %535 = sub i32 %534, %161
  %536 = add i32 %535, %166
  %537 = add i32 %536, %178
  %538 = sub i32 %537, %187
  %539 = sub i32 %538, %203
  %540 = sub i32 %539, %206
  %541 = sub i32 %540, %224
  %542 = add i32 %541, %228
  %543 = sub i32 %542, %251
  %544 = sub i32 %543, %263
  %545 = add i32 %544, %269
  %546 = sub i32 %545, %276
  %547 = add i32 %546, %285
  %548 = sub i32 %547, %292
  %549 = sub i32 %548, %297
  %550 = sub i32 %549, %300
  %551 = add i32 %550, %304
  %552 = add i32 %551, %306
  %553 = add i32 %552, %308
  %554 = add i32 %553, %310
  %555 = add i32 %554, %312
  %556 = add i32 %555, %313
  %557 = sub i32 %556, %22
  %558 = add i32 %557, %23
  %559 = sub i32 %558, %111
  %560 = sub i32 %559, %21
  %561 = sub i32 %560, %79
  %562 = sub i32 %561, %282
  %563 = sub i32 %562, %290
  %564 = add i32 %563, %351
  %565 = add i32 %564, %348
  %566 = add i32 %565, %344
  %567 = add i32 %566, %339
  %568 = icmp eq i32 %10, %567
  %569 = select i1 %568, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %570 = tail call i32 @puts(i8* nonnull dereferenceable(1) %569)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
