; ModuleID = '../.././c_source_file/0000_path_condition_crackme.c'
source_filename = "../.././c_source_file/0000_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %1, %0
  %10 = and i32 %8, %9
  %11 = or i32 %5, %4
  %12 = xor i32 %4, %3
  %13 = xor i32 %12, -1
  %14 = and i32 %11, %13
  %15 = sub i32 %14, %10
  %16 = xor i32 %5, -1
  %17 = and i32 %16, %4
  %18 = or i32 %17, %3
  %19 = sub i32 %15, %18
  %20 = and i32 %1, %0
  %21 = or i32 %2, %1
  %22 = xor i32 %21, -1
  %23 = or i32 %20, %22
  %24 = xor i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = and i32 %25, %0
  %27 = xor i32 %2, %0
  %28 = or i32 %27, %9
  %29 = or i32 %1, %0
  %30 = and i32 %24, %29
  %31 = and i32 %21, %0
  %32 = xor i32 %0, -1
  %33 = and i32 %22, %32
  %34 = and i32 %7, %1
  %35 = and i32 %34, %32
  %36 = shl i32 %35, 1
  %37 = and i32 %22, %0
  %38 = and i32 %34, %0
  %39 = xor i32 %1, -1
  %40 = and i32 %39, %2
  %41 = and i32 %40, %32
  %42 = and i32 %40, %0
  %43 = shl i32 %42, 1
  %44 = and i32 %20, %2
  %45 = and i32 %5, %4
  %46 = xor i32 %3, -1
  %47 = or i32 %46, %4
  %48 = xor i32 %45, %47
  %49 = or i32 %4, %3
  %50 = xor i32 %5, %4
  %51 = and i32 %50, %49
  %52 = and i32 %13, %5
  %53 = xor i32 %49, -1
  %54 = xor i32 %5, %3
  %55 = and i32 %54, %47
  %56 = shl i32 %55, 2
  %57 = and i32 %4, %3
  %58 = or i32 %16, %3
  %59 = xor i32 %58, -1
  %60 = or i32 %57, %59
  %61 = and i32 %5, %3
  %62 = and i32 %61, %4
  %63 = xor i32 %4, -1
  %64 = and i32 %54, %63
  %65 = or i32 %62, %64
  %66 = shl i32 %65, 1
  %67 = xor i32 %11, -1
  %68 = or i32 %67, %13
  %69 = shl i32 %68, 1
  %70 = and i32 %61, %63
  %71 = or i32 %5, %3
  %72 = and i32 %71, %4
  %73 = xor i32 %70, -1
  %74 = xor i32 %72, %73
  %75 = xor i32 %50, -1
  %76 = and i32 %47, %75
  %77 = xor i32 %62, -1
  %78 = xor i32 %64, %77
  %79 = and i32 %46, %4
  %80 = or i32 %61, %79
  %81 = and i32 %50, %47
  %82 = or i32 %71, %4
  %83 = or i32 %45, %46
  %84 = and i32 %46, %5
  %85 = and i32 %84, %4
  %86 = or i32 %46, %5
  %87 = and i32 %86, %63
  %88 = xor i32 %87, 2147483647
  %89 = xor i32 %88, %85
  %90 = shl i32 %89, 1
  %91 = xor i32 %79, -1
  %92 = add i32 %79, 1
  %93 = or i32 %79, %75
  %94 = or i32 %58, %63
  %95 = and i32 %91, %5
  %96 = or i32 %17, %12
  %97 = shl i32 %96, 1
  %98 = xor i32 %47, -1
  %99 = or i32 %45, %98
  %100 = and i32 %16, %3
  %101 = xor i32 %100, -1
  %102 = add i32 %100, 1
  %103 = xor i32 %54, -1
  %104 = or i32 %103, %4
  %105 = or i32 %100, %63
  %106 = xor i32 %57, -1
  %107 = and i32 %16, %106
  %108 = or i32 %54, %98
  %109 = shl i32 %108, 2
  %110 = and i32 %75, %3
  %111 = xor i32 %17, -1
  %112 = add i32 %17, 1
  %113 = xor i32 %61, -1
  %114 = xor i32 %79, %113
  %115 = xor i32 %71, %57
  %116 = xor i32 %54, %4
  %117 = xor i32 %116, -1
  %118 = or i32 %62, %117
  %119 = and i32 %54, %49
  %120 = xor i32 %85, %117
  %121 = or i32 %70, %72
  %122 = and i32 %101, %4
  %123 = or i32 %79, %5
  %124 = and i32 %75, %46
  %125 = shl i32 %124, 1
  %126 = xor i32 %125, -1
  %127 = or i32 %16, %4
  %128 = xor i32 %127, -1
  %129 = or i32 %128, %3
  %130 = or i32 %103, %98
  %131 = or i32 %54, %79
  %132 = shl i32 %131, 1
  %133 = and i32 %101, %63
  %134 = or i32 %50, %98
  %135 = xor i32 %45, %49
  %136 = and i32 %113, %4
  %137 = and i32 %111, %46
  %138 = or i32 %13, %5
  %139 = shl i32 %138, 1
  %140 = and i32 %11, %46
  %141 = or i32 %85, %116
  %142 = and i32 %75, %91
  %143 = and i32 %11, %3
  %144 = or i32 %75, %13
  %145 = and i32 %111, %13
  %146 = or i32 %12, %75
  %147 = xor i32 %45, %101
  %148 = xor i32 %61, %4
  %149 = xor i32 %62, %116
  %150 = or i32 %16, %53
  %151 = and i32 %54, %4
  %152 = or i32 %45, %3
  %153 = xor i32 %100, %4
  %154 = xor i32 %59, %4
  %155 = shl i32 %154, 1
  %156 = xor i32 %106, %5
  %157 = or i32 %45, %12
  %158 = shl i32 %157, 1
  %159 = xor i32 %71, %4
  %160 = and i32 %50, %91
  %161 = and i32 %71, %63
  %162 = and i32 %75, %13
  %163 = and i32 %127, %3
  %164 = xor i32 %58, %57
  %165 = and i32 %16, %13
  %166 = or i32 %57, %5
  %167 = shl i32 %166, 1
  %168 = or i32 %98, %5
  %169 = shl i32 %168, 1
  %170 = add i32 %50, 1
  %171 = and i32 %50, %46
  %172 = or i32 %54, %57
  %173 = xor i32 %17, %113
  %174 = xor i32 %45, -1
  %175 = xor i32 %174, %3
  %176 = or i32 %128, %13
  %177 = xor i32 %91, %5
  %178 = and i32 %174, %3
  %179 = or i32 %12, %67
  %180 = or i32 %57, %16
  %181 = shl i32 %180, 1
  %182 = xor i32 %45, %3
  %183 = xor i32 %49, %5
  %184 = or i32 %75, %3
  %185 = add i32 %45, 1
  %186 = and i32 %58, %63
  %187 = or i32 %17, %46
  %188 = and i32 %50, %106
  %189 = or i32 %71, %63
  %190 = or i32 %16, %13
  %191 = or i32 %61, %4
  %192 = xor i32 %79, %101
  %193 = or i32 %12, %5
  %194 = or i32 %113, %63
  %195 = and i32 %84, %63
  %196 = or i32 %54, %63
  %197 = xor i32 %195, %196
  %198 = and i32 %12, %174
  %199 = or i32 %75, %53
  %200 = and i32 %103, %63
  %201 = or i32 %50, %57
  %202 = or i32 %113, %4
  %203 = xor i32 %71, -1
  %204 = or i32 %57, %203
  %205 = xor i32 %111, %3
  %206 = or i32 %75, %46
  %207 = xor i32 %45, %71
  %208 = and i32 %113, %63
  %209 = shl i32 %208, 1
  %210 = or i32 %50, %12
  %211 = xor i32 %58, %4
  %212 = and i32 %127, %46
  %213 = xor i32 %57, %5
  %214 = and i32 %49, %75
  %215 = or i32 %12, %128
  %216 = and i32 %49, %103
  %217 = or i32 %79, %103
  %218 = xor i32 %113, %4
  %219 = or i32 %203, %63
  %220 = shl i32 %219, 1
  %221 = xor i32 %17, %3
  %222 = or i32 %17, %13
  %223 = or i32 %100, %79
  %224 = shl i32 %223, 1
  %225 = and i32 %86, %4
  %226 = xor i32 %225, -1
  %227 = xor i32 %195, %226
  %228 = and i32 %12, %16
  %229 = xor i32 %79, %5
  %230 = and i32 %12, %5
  %231 = add i32 %71, 1
  %232 = and i32 %47, %103
  %233 = or i32 %50, %53
  %234 = shl i32 %233, 1
  %235 = or i32 %62, %159
  %236 = and i32 %50, %13
  %237 = and i32 %127, %12
  %238 = or i32 %45, %203
  %239 = xor i32 %196, -1
  %240 = or i32 %195, %239
  %241 = or i32 %101, %63
  %242 = and i32 %54, %91
  %243 = shl i32 %242, 1
  %244 = and i32 %12, %111
  %245 = or i32 %50, %13
  %246 = add i32 %3, 1
  %247 = xor i32 %86, %63
  %248 = xor i32 %247, %85
  %249 = or i32 %100, %4
  %250 = or i32 %59, %63
  %251 = or i32 %58, %4
  %252 = or i32 %75, %98
  %253 = or i32 %50, %46
  %254 = xor i32 %47, %5
  %255 = or i32 %57, %75
  %256 = and i32 %50, %12
  %257 = and i32 %174, %46
  %258 = and i32 %12, %75
  %259 = or i32 %62, %161
  %260 = and i32 %11, %12
  %261 = or i32 %54, %4
  %262 = xor i32 %261, -1
  %263 = or i32 %85, %262
  %264 = and i32 %47, %16
  %265 = xor i32 %11, %57
  %266 = and i32 %75, %106
  %267 = and i32 %111, %3
  %268 = or i32 %50, %79
  %269 = and i32 %127, %13
  %270 = or i32 %17, %59
  %271 = xor i32 %11, %3
  %272 = xor i32 %159, %77
  %273 = xor i32 %151, %73
  %274 = or i32 %128, %46
  %275 = xor i32 %127, %57
  %276 = and i32 %103, %106
  %277 = or i32 %79, %16
  %278 = or i32 %12, %16
  %279 = xor i32 %161, 2147483647
  %280 = xor i32 %279, %62
  %281 = xor i32 %17, %58
  %282 = shl i32 %281, 1
  %283 = xor i32 %98, %5
  %284 = or i32 %103, %53
  %285 = or i32 %101, %4
  %286 = or i32 %85, %87
  %287 = xor i32 %127, %3
  %288 = and i32 %49, %16
  %289 = or i32 %203, %4
  %290 = or i32 %45, %13
  %291 = shl i32 %290, 1
  %292 = xor i32 %85, %261
  %293 = or i32 %45, %100
  %294 = and i32 %16, %91
  %295 = and i32 %103, %91
  %296 = and i32 %106, %5
  %297 = and i32 %54, %106
  %298 = or i32 %67, %46
  %299 = and i32 %49, %5
  %300 = or i32 %195, %225
  %301 = or i32 %57, %103
  %302 = and i32 %103, %4
  %303 = and i32 %203, %63
  %304 = mul i32 %303, -7
  %305 = and i32 %100, %63
  %306 = mul i32 %305, 13
  %307 = and i32 %203, %4
  %308 = mul i32 %307, -21
  %309 = and i32 %100, %4
  %310 = mul i32 %309, 18
  %311 = and i32 %59, %63
  %312 = and i32 %59, %4
  %313 = mul i32 %62, 6
  %314 = add i32 %37, %53
  %315 = sub i32 %314, %58
  %316 = sub i32 %315, %295
  %317 = add i32 %316, %70
  %318 = mul i32 %317, 3
  %319 = add i32 %33, %44
  %320 = add i32 %319, %183
  %321 = add i32 %320, %122
  %322 = add i32 %321, %175
  %323 = shl i32 %322, 2
  %324 = sub i32 %92, %95
  %325 = add i32 %324, %186
  %326 = mul i32 %325, 5
  %327 = sub i32 -2, %4
  %328 = sub i32 %327, %23
  %329 = add i32 %328, %229
  %330 = add i32 %329, %113
  %331 = add i32 %330, %17
  %332 = add i32 %331, %59
  %333 = add i32 %332, %311
  %334 = add i32 %333, %276
  %335 = add i32 %334, %267
  %336 = add i32 %335, %255
  %337 = add i32 %336, %222
  %338 = add i32 %337, %221
  %339 = add i32 %338, %217
  %340 = add i32 %339, %210
  %341 = add i32 %340, %191
  %342 = add i32 %341, %162
  %343 = add i32 %342, %134
  %344 = add i32 %343, %64
  %345 = add i32 %344, %93
  %346 = add i32 %345, %280
  %347 = shl i32 %346, 1
  %348 = add i32 %1, 2
  %349 = sub i32 %348, %20
  %350 = add i32 %349, %3
  %351 = add i32 %350, %246
  %352 = sub i32 %351, %26
  %353 = add i32 %352, %28
  %354 = add i32 %353, %30
  %355 = add i32 %354, %31
  %356 = add i32 %355, %38
  %357 = add i32 %356, %41
  %358 = sub i32 %357, %36
  %359 = sub i32 %358, %43
  %360 = add i32 %359, %57
  %361 = sub i32 %360, %5
  %362 = add i32 %361, %16
  %363 = sub i32 %362, %49
  %364 = sub i32 %363, %79
  %365 = sub i32 %364, %52
  %366 = add i32 %365, %102
  %367 = sub i32 %366, %107
  %368 = add i32 %367, %112
  %369 = add i32 %368, %123
  %370 = add i32 %369, %71
  %371 = add i32 %370, %150
  %372 = sub i32 %371, %156
  %373 = sub i32 %372, %165
  %374 = add i32 %373, %170
  %375 = add i32 %374, %177
  %376 = sub i32 %375, %127
  %377 = add i32 %376, %185
  %378 = sub i32 %377, %190
  %379 = add i32 %378, %193
  %380 = sub i32 %379, %50
  %381 = add i32 %380, %213
  %382 = sub i32 %381, %228
  %383 = sub i32 %382, %230
  %384 = add i32 %383, %231
  %385 = add i32 %384, 1
  %386 = add i32 %385, %254
  %387 = add i32 %386, %264
  %388 = sub i32 %387, %277
  %389 = sub i32 %388, %278
  %390 = sub i32 %389, %283
  %391 = sub i32 %390, %45
  %392 = sub i32 %391, %288
  %393 = add i32 %392, %61
  %394 = sub i32 %393, %294
  %395 = sub i32 %394, %296
  %396 = add i32 %395, %299
  %397 = add i32 %396, %48
  %398 = add i32 %397, %51
  %399 = sub i32 %398, %60
  %400 = add i32 %399, %76
  %401 = add i32 %400, %80
  %402 = add i32 %401, %81
  %403 = sub i32 %402, %82
  %404 = add i32 %403, %83
  %405 = add i32 %404, %94
  %406 = sub i32 %405, %99
  %407 = add i32 %406, %104
  %408 = add i32 %407, %105
  %409 = sub i32 %408, %110
  %410 = sub i32 %409, %114
  %411 = sub i32 %410, %115
  %412 = sub i32 %411, %119
  %413 = sub i32 %412, %129
  %414 = sub i32 %413, %130
  %415 = sub i32 %414, %133
  %416 = sub i32 %415, %135
  %417 = sub i32 %416, %136
  %418 = add i32 %417, %137
  %419 = sub i32 %418, %139
  %420 = add i32 %419, %140
  %421 = add i32 %420, %142
  %422 = sub i32 %421, %143
  %423 = add i32 %422, %144
  %424 = sub i32 %423, %145
  %425 = sub i32 %424, %146
  %426 = sub i32 %425, %147
  %427 = sub i32 %426, %148
  %428 = add i32 %427, %151
  %429 = add i32 %428, %152
  %430 = add i32 %429, %153
  %431 = add i32 %430, %159
  %432 = sub i32 %431, %160
  %433 = add i32 %432, %161
  %434 = sub i32 %433, %163
  %435 = add i32 %434, %164
  %436 = sub i32 %435, %167
  %437 = sub i32 %436, %169
  %438 = sub i32 %437, %171
  %439 = add i32 %438, %172
  %440 = add i32 %439, %173
  %441 = add i32 %440, %176
  %442 = sub i32 %441, %178
  %443 = sub i32 %442, %179
  %444 = sub i32 %443, %181
  %445 = add i32 %444, %72
  %446 = sub i32 %445, %182
  %447 = sub i32 %446, %116
  %448 = sub i32 %447, %184
  %449 = sub i32 %448, %187
  %450 = add i32 %449, %188
  %451 = add i32 %450, %189
  %452 = sub i32 %451, %192
  %453 = add i32 %452, %194
  %454 = add i32 %453, %198
  %455 = add i32 %454, %199
  %456 = sub i32 %455, %200
  %457 = add i32 %456, %201
  %458 = sub i32 %457, %202
  %459 = sub i32 %458, %204
  %460 = sub i32 %459, %205
  %461 = add i32 %460, %206
  %462 = sub i32 %461, %207
  %463 = sub i32 %462, %211
  %464 = add i32 %463, %212
  %465 = sub i32 %464, %214
  %466 = add i32 %465, %215
  %467 = add i32 %466, %216
  %468 = add i32 %467, %218
  %469 = sub i32 %468, %232
  %470 = add i32 %469, %236
  %471 = add i32 %470, %237
  %472 = add i32 %471, %238
  %473 = add i32 %472, %241
  %474 = sub i32 %473, %244
  %475 = add i32 %474, %245
  %476 = add i32 %475, %249
  %477 = add i32 %476, %250
  %478 = add i32 %477, %251
  %479 = add i32 %478, %252
  %480 = add i32 %479, %253
  %481 = sub i32 %480, %196
  %482 = sub i32 %481, %256
  %483 = add i32 %482, %257
  %484 = sub i32 %483, %258
  %485 = add i32 %484, %260
  %486 = sub i32 %485, %265
  %487 = sub i32 %486, %266
  %488 = add i32 %487, %268
  %489 = add i32 %488, %269
  %490 = sub i32 %489, %270
  %491 = sub i32 %490, %271
  %492 = add i32 %491, %274
  %493 = sub i32 %492, %275
  %494 = add i32 %493, %284
  %495 = sub i32 %494, %285
  %496 = sub i32 %495, %287
  %497 = sub i32 %496, %289
  %498 = sub i32 %497, %293
  %499 = add i32 %498, %297
  %500 = add i32 %499, %298
  %501 = sub i32 %500, %301
  %502 = sub i32 %501, %302
  %503 = add i32 %502, %312
  %504 = sub i32 %503, %56
  %505 = sub i32 %504, %69
  %506 = sub i32 %505, %74
  %507 = add i32 %506, %78
  %508 = sub i32 %507, %97
  %509 = sub i32 %508, %109
  %510 = sub i32 %509, %118
  %511 = add i32 %510, %120
  %512 = add i32 %511, %121
  %513 = add i32 %512, %126
  %514 = sub i32 %513, %132
  %515 = add i32 %514, %141
  %516 = add i32 %515, %149
  %517 = sub i32 %516, %155
  %518 = sub i32 %517, %158
  %519 = add i32 %518, %197
  %520 = sub i32 %519, %209
  %521 = sub i32 %520, %220
  %522 = sub i32 %521, %224
  %523 = add i32 %522, %227
  %524 = sub i32 %523, %234
  %525 = add i32 %524, %235
  %526 = add i32 %525, %240
  %527 = sub i32 %526, %243
  %528 = sub i32 %527, %248
  %529 = add i32 %528, %259
  %530 = add i32 %529, %263
  %531 = add i32 %530, %272
  %532 = add i32 %531, %273
  %533 = sub i32 %532, %282
  %534 = add i32 %533, %286
  %535 = sub i32 %534, %291
  %536 = sub i32 %535, %292
  %537 = add i32 %536, %300
  %538 = add i32 %537, %304
  %539 = add i32 %538, %306
  %540 = add i32 %539, %308
  %541 = add i32 %540, %310
  %542 = add i32 %541, %313
  %543 = sub i32 %542, %66
  %544 = sub i32 %543, %90
  %545 = add i32 %544, %326
  %546 = add i32 %545, %318
  %547 = add i32 %546, %323
  %548 = add i32 %547, %347
  %549 = icmp eq i32 %19, %548
  %550 = select i1 %549, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %551 = tail call i32 @puts(i8* nonnull dereferenceable(1) %550)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
