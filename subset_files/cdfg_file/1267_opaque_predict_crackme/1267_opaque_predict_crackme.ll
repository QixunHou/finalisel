; ModuleID = '../.././c_source_file/1267_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1267_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = or i32 %7, %5
  %9 = sub i32 0, %8
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %1
  %14 = and i32 %1, %0
  %15 = or i32 %10, %1
  %16 = xor i32 %15, %14
  %17 = xor i32 %2, %0
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %5
  %20 = shl i32 %19, 1
  %21 = or i32 %10, %0
  %22 = xor i32 %14, -1
  %23 = and i32 %22, %2
  %24 = xor i32 %0, -1
  %25 = xor i32 %1, -1
  %26 = and i32 %25, %2
  %27 = and i32 %26, %24
  %28 = and i32 %7, %0
  %29 = or i32 %27, %28
  %30 = and i32 %2, %1
  %31 = and i32 %30, %0
  %32 = or i32 %2, %1
  %33 = xor i32 %32, %0
  %34 = xor i32 %31, 2147483647
  %35 = xor i32 %34, %33
  %36 = shl i32 %35, 1
  %37 = or i32 %25, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %7, %38
  %40 = xor i32 %30, %0
  %41 = and i32 %2, %0
  %42 = or i32 %41, %38
  %43 = xor i32 %41, -1
  %44 = shl i32 %43, 1
  %45 = or i32 %17, %1
  %46 = mul i32 %45, 5
  %47 = and i32 %25, %0
  %48 = or i32 %47, %2
  %49 = or i32 %15, %0
  %50 = or i32 %5, %2
  %51 = and i32 %37, %10
  %52 = shl i32 %5, 1
  %53 = xor i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %18, %54
  %56 = and i32 %26, %0
  %57 = or i32 %25, %2
  %58 = and i32 %57, %24
  %59 = or i32 %56, %58
  %60 = and i32 %30, %24
  %61 = and i32 %32, %0
  %62 = or i32 %60, %61
  %63 = or i32 %17, %47
  %64 = or i32 %47, %10
  %65 = and i32 %10, %1
  %66 = xor i32 %65, %0
  %67 = or i32 %2, %0
  %68 = xor i32 %67, -1
  %69 = or i32 %53, %68
  %70 = or i32 %30, %47
  %71 = xor i32 %65, -1
  %72 = xor i32 %47, %71
  %73 = and i32 %10, %54
  %74 = xor i32 %15, -1
  %75 = or i32 %74, %24
  %76 = and i32 %71, %24
  %77 = xor i32 %21, -1
  %78 = or i32 %77, %54
  %79 = xor i32 %47, -1
  %80 = and i32 %18, %79
  %81 = xor i32 %43, %1
  %82 = xor i32 %7, %0
  %83 = add i32 %47, 1
  %84 = and i32 %17, %53
  %85 = shl i32 %84, 1
  %86 = or i32 %65, %24
  %87 = or i32 %10, %5
  %88 = and i32 %32, %24
  %89 = xor i32 %34, %88
  %90 = shl i32 %65, 1
  %91 = or i32 %6, %38
  %92 = shl i32 %91, 1
  %93 = xor i32 %41, %1
  %94 = or i32 %32, %0
  %95 = or i32 %6, %47
  %96 = and i32 %21, %54
  %97 = or i32 %68, %54
  %98 = or i32 %15, %24
  %99 = and i32 %53, %10
  %100 = shl i32 %99, 2
  %101 = xor i32 %71, %0
  %102 = add i32 %14, 1
  %103 = or i32 %31, %33
  %104 = xor i32 %32, -1
  %105 = or i32 %104, %0
  %106 = or i32 %41, %25
  %107 = and i32 %17, %1
  %108 = and i32 %57, %0
  %109 = xor i32 %108, -1
  %110 = xor i32 %27, %109
  %111 = and i32 %17, %79
  %112 = and i32 %12, %54
  %113 = xor i32 %41, %71
  %114 = xor i32 %74, %0
  %115 = shl i32 %41, 1
  %116 = or i32 %6, %0
  %117 = xor i32 %56, %116
  %118 = shl i32 %117, 1
  %119 = and i32 %79, %2
  %120 = or i32 %17, %54
  %121 = xor i32 %104, %0
  %122 = and i32 %17, %54
  %123 = or i32 %14, %2
  %124 = or i32 %38, %2
  %125 = or i32 %77, %25
  %126 = add i32 %6, 1
  %127 = and i32 %6, %24
  %128 = or i32 %31, %127
  %129 = shl i32 %61, 1
  %130 = xor i32 %12, %1
  %131 = or i32 %41, %53
  %132 = or i32 %47, %7
  %133 = shl i32 %132, 1
  %134 = or i32 %14, %77
  %135 = xor i32 %14, %2
  %136 = shl i32 %135, 1
  %137 = and i32 %12, %25
  %138 = and i32 %17, %25
  %139 = or i32 %41, %54
  %140 = and i32 %6, %37
  %141 = xor i32 %37, %2
  %142 = or i32 %68, %25
  %143 = xor i32 %6, %0
  %144 = xor i32 %31, %143
  %145 = or i32 %31, %88
  %146 = or i32 %7, %0
  %147 = and i32 %4, %10
  %148 = shl i32 %147, 1
  %149 = xor i32 %41, %4
  %150 = or i32 %7, %24
  %151 = shl i32 %150, 1
  %152 = or i32 %11, %53
  %153 = shl i32 %152, 1
  %154 = add i32 %17, 1
  %155 = xor i32 %47, %2
  %156 = xor i32 %79, %2
  %157 = xor i32 %32, %14
  %158 = or i32 %53, %2
  %159 = or i32 %14, %7
  %160 = and i32 %6, %4
  %161 = and i32 %17, %37
  %162 = and i32 %43, %54
  %163 = or i32 %11, %25
  %164 = or i32 %47, %18
  %165 = xor i32 %22, %2
  %166 = add i32 %21, 1
  %167 = and i32 %4, %18
  %168 = xor i32 %41, %32
  %169 = or i32 %56, %143
  %170 = and i32 %6, %79
  %171 = and i32 %54, %2
  %172 = xor i32 %127, -1
  %173 = xor i32 %31, %172
  %174 = xor i32 %57, %0
  %175 = or i32 %56, %174
  %176 = or i32 %41, %65
  %177 = xor i32 %67, %1
  %178 = shl i32 %177, 1
  %179 = and i32 %104, %24
  %180 = and i32 %65, %24
  %181 = and i32 %104, %0
  %182 = and i32 %65, %0
  %183 = mul i32 %182, -6
  %184 = and i32 %74, %24
  %185 = mul i32 %184, 10
  %186 = mul i32 %60, 11
  %187 = and i32 %74, %0
  %188 = mul i32 %187, 9
  %189 = add i32 %121, %51
  %190 = add i32 %189, %105
  %191 = add i32 %190, %97
  %192 = add i32 %191, %96
  %193 = add i32 %192, %86
  %194 = add i32 %193, %144
  %195 = add i32 %194, %128
  %196 = add i32 %195, %89
  %197 = shl i32 %196, 1
  %198 = sub i32 %181, %31
  %199 = sub i32 %198, %145
  %200 = mul i32 %199, 3
  %201 = add i32 %180, %176
  %202 = add i32 %201, %168
  %203 = shl i32 %202, 2
  %204 = add i32 %0, 2
  %205 = sub i32 %204, %14
  %206 = add i32 %205, %83
  %207 = sub i32 %206, %37
  %208 = add i32 %207, %102
  %209 = sub i32 %208, %4
  %210 = sub i32 %209, %2
  %211 = add i32 %210, %21
  %212 = sub i32 %211, %23
  %213 = add i32 %212, %48
  %214 = add i32 %213, %50
  %215 = sub i32 %214, %52
  %216 = add i32 %215, %64
  %217 = sub i32 %216, %6
  %218 = sub i32 %217, %73
  %219 = add i32 %218, %30
  %220 = sub i32 %219, %11
  %221 = add i32 %220, %87
  %222 = sub i32 %221, %67
  %223 = add i32 %222, %119
  %224 = sub i32 %223, %123
  %225 = add i32 %224, %124
  %226 = add i32 %225, %126
  %227 = add i32 %226, %68
  %228 = add i32 %227, %141
  %229 = add i32 %228, %154
  %230 = sub i32 %229, %155
  %231 = add i32 %230, %156
  %232 = add i32 %231, %158
  %233 = sub i32 %232, %165
  %234 = add i32 %233, %166
  %235 = add i32 %234, %171
  %236 = sub i32 %235, %16
  %237 = sub i32 %236, %13
  %238 = sub i32 %237, %39
  %239 = sub i32 %238, %40
  %240 = add i32 %239, %42
  %241 = sub i32 %240, %44
  %242 = add i32 %241, %49
  %243 = sub i32 %242, %55
  %244 = sub i32 %243, %63
  %245 = add i32 %244, %66
  %246 = sub i32 %245, %69
  %247 = add i32 %246, %70
  %248 = add i32 %247, %72
  %249 = sub i32 %248, %75
  %250 = sub i32 %249, %76
  %251 = sub i32 %250, %78
  %252 = add i32 %251, %80
  %253 = add i32 %252, %81
  %254 = add i32 %253, %82
  %255 = sub i32 %254, %90
  %256 = add i32 %255, %93
  %257 = add i32 %256, %94
  %258 = add i32 %257, %95
  %259 = sub i32 %258, %98
  %260 = sub i32 %259, %100
  %261 = add i32 %260, %101
  %262 = add i32 %261, %106
  %263 = add i32 %262, %107
  %264 = sub i32 %263, %111
  %265 = sub i32 %264, %112
  %266 = add i32 %265, %113
  %267 = sub i32 %266, %114
  %268 = sub i32 %267, %115
  %269 = add i32 %268, %120
  %270 = sub i32 %269, %122
  %271 = add i32 %270, %125
  %272 = sub i32 %271, %130
  %273 = add i32 %272, %131
  %274 = sub i32 %273, %134
  %275 = sub i32 %274, %136
  %276 = sub i32 %275, %137
  %277 = add i32 %276, %138
  %278 = sub i32 %277, %139
  %279 = add i32 %278, %140
  %280 = add i32 %279, %142
  %281 = sub i32 %280, %146
  %282 = sub i32 %281, %148
  %283 = add i32 %282, %149
  %284 = sub i32 %283, %157
  %285 = add i32 %284, %159
  %286 = add i32 %285, %160
  %287 = add i32 %286, %161
  %288 = add i32 %287, %162
  %289 = add i32 %288, %163
  %290 = sub i32 %289, %164
  %291 = add i32 %290, %167
  %292 = sub i32 %291, %170
  %293 = add i32 %292, %179
  %294 = sub i32 %293, %20
  %295 = add i32 %294, %29
  %296 = add i32 %295, %46
  %297 = sub i32 %296, %59
  %298 = add i32 %297, %62
  %299 = sub i32 %298, %85
  %300 = sub i32 %299, %92
  %301 = sub i32 %300, %103
  %302 = add i32 %301, %110
  %303 = sub i32 %302, %129
  %304 = sub i32 %303, %133
  %305 = sub i32 %304, %151
  %306 = sub i32 %305, %153
  %307 = sub i32 %306, %169
  %308 = sub i32 %307, %173
  %309 = sub i32 %308, %175
  %310 = sub i32 %309, %178
  %311 = add i32 %310, %183
  %312 = add i32 %311, %185
  %313 = add i32 %312, %186
  %314 = add i32 %313, %188
  %315 = sub i32 %314, %118
  %316 = sub i32 %315, %36
  %317 = add i32 %316, %203
  %318 = add i32 %317, %200
  %319 = add i32 %318, %197
  %320 = icmp eq i32 %319, %9
  %321 = select i1 %320, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %322 = tail call i32 @puts(i8* nonnull dereferenceable(1) %321)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
