; ModuleID = '../.././c_source_file/1002_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1002_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %0, -1
  %8 = shl i32 %7, 2
  %9 = sub i32 %8, %1
  %10 = add i32 %9, %4
  %11 = xor i32 %4, %3
  %12 = shl i32 %11, 1
  %13 = or i32 %12, 1
  %14 = and i32 %4, %3
  %15 = xor i32 %14, -1
  %16 = and i32 %6, %3
  %17 = xor i32 %1, -1
  %18 = and i32 %17, %0
  %19 = xor i32 %2, -1
  %20 = and i32 %19, %1
  %21 = or i32 %20, %18
  %22 = xor i32 %1, %0
  %23 = or i32 %22, %2
  %24 = xor i32 %2, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %25, %1
  %27 = and i32 %19, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %28, %17
  %30 = or i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %31, %1
  %33 = or i32 %31, %17
  %34 = and i32 %28, %1
  %35 = or i32 %1, %0
  %36 = and i32 %35, %2
  %37 = xor i32 %22, -1
  %38 = and i32 %19, %37
  %39 = xor i32 %18, -1
  %40 = and i32 %24, %39
  %41 = and i32 %17, %2
  %42 = and i32 %41, %0
  %43 = or i32 %17, %2
  %44 = and i32 %43, %7
  %45 = or i32 %42, %44
  %46 = and i32 %1, %0
  %47 = or i32 %24, %46
  %48 = or i32 %17, %0
  %49 = xor i32 %2, %1
  %50 = and i32 %49, %48
  %51 = and i32 %22, %19
  %52 = and i32 %41, %7
  %53 = and i32 %43, %0
  %54 = or i32 %52, %53
  %55 = shl i32 %39, 1
  %56 = xor i32 %20, -1
  %57 = or i32 %56, %7
  %58 = and i32 %49, %0
  %59 = or i32 %2, %1
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %7
  %62 = and i32 %2, %1
  %63 = and i32 %62, %7
  %64 = or i32 %63, %58
  %65 = xor i32 %62, -1
  %66 = or i32 %65, %0
  %67 = or i32 %19, %0
  %68 = and i32 %67, %37
  %69 = xor i32 %48, -1
  %70 = or i32 %24, %69
  %71 = shl i32 %70, 1
  %72 = or i32 %19, %37
  %73 = xor i32 %49, -1
  %74 = and i32 %35, %73
  %75 = xor i32 %35, %2
  %76 = or i32 %18, %73
  %77 = or i32 %19, %1
  %78 = and i32 %77, %0
  %79 = xor i32 %35, -1
  %80 = or i32 %49, %79
  %81 = xor i32 %18, %2
  %82 = or i32 %19, %69
  %83 = and i32 %62, %0
  %84 = and i32 %49, %7
  %85 = or i32 %83, %84
  %86 = or i32 %49, %0
  %87 = xor i32 %42, %86
  %88 = and i32 %73, %39
  %89 = xor i32 %67, %46
  %90 = or i32 %46, %60
  %91 = xor i32 %31, %1
  %92 = or i32 %59, %0
  %93 = and i32 %25, %17
  %94 = xor i32 %67, %1
  %95 = xor i32 %46, -1
  %96 = and i32 %95, %2
  %97 = and i32 %59, %7
  %98 = shl i32 %97, 1
  %99 = or i32 %20, %0
  %100 = and i32 %24, %1
  %101 = and i32 %30, %17
  %102 = and i32 %30, %1
  %103 = xor i32 %63, -1
  %104 = xor i32 %58, %103
  %105 = add i32 %27, 1
  %106 = and i32 %24, %17
  %107 = xor i32 %60, %0
  %108 = or i32 %49, %7
  %109 = xor i32 %108, -1
  %110 = or i32 %52, %109
  %111 = xor i32 %77, %46
  %112 = and i32 %24, %35
  %113 = or i32 %46, %25
  %114 = xor i32 %59, %0
  %115 = xor i32 %83, -1
  %116 = xor i32 %114, %115
  %117 = or i32 %65, %7
  %118 = and i32 %30, %37
  %119 = and i32 %30, %22
  %120 = xor i32 %65, %0
  %121 = or i32 %62, %7
  %122 = or i32 %19, %79
  %123 = xor i32 %77, -1
  %124 = or i32 %123, %7
  %125 = or i32 %60, %0
  %126 = shl i32 %35, 1
  %127 = and i32 %24, %48
  %128 = xor i32 %95, %2
  %129 = or i32 %46, %31
  %130 = and i32 %22, %28
  %131 = and i32 %49, %39
  %132 = or i32 %49, %18
  %133 = xor i32 %46, %2
  %134 = shl i32 %133, 1
  %135 = and i32 %2, %0
  %136 = xor i32 %135, -1
  %137 = xor i32 %136, %1
  %138 = or i32 %27, %1
  %139 = or i32 %24, %37
  %140 = and i32 %48, %2
  %141 = xor i32 %30, %46
  %142 = and i32 %136, %37
  %143 = shl i32 %142, 1
  %144 = or i32 %135, %1
  %145 = and i32 %56, %7
  %146 = or i32 %24, %18
  %147 = xor i32 %84, %115
  %148 = or i32 %123, %0
  %149 = xor i32 %67, -1
  %150 = xor i32 %149, %1
  %151 = or i32 %31, %37
  %152 = or i32 %27, %37
  %153 = or i32 %25, %17
  %154 = shl i32 %108, 1
  %155 = and i32 %67, %22
  %156 = xor i32 %39, %2
  %157 = shl i32 %156, 1
  %158 = and i32 %39, %2
  %159 = shl i32 %114, 1
  %160 = or i32 %18, %25
  %161 = xor i32 %62, %0
  %162 = and i32 %73, %95
  %163 = or i32 %83, %97
  %164 = or i32 %149, %1
  %165 = and i32 %49, %35
  %166 = and i32 %24, %37
  %167 = or i32 %25, %37
  %168 = xor i32 %18, %65
  %169 = or i32 %25, %79
  %170 = and i32 %28, %37
  %171 = and i32 %136, %1
  %172 = shl i32 %171, 1
  %173 = xor i32 %52, %108
  %174 = or i32 %46, %2
  %175 = or i32 %149, %17
  %176 = or i32 %73, %0
  %177 = or i32 %135, %37
  %178 = shl i32 %177, 2
  %179 = or i32 %24, %17
  %180 = shl i32 %179, 1
  %181 = and i32 %37, %2
  %182 = xor i32 %59, %46
  %183 = or i32 %46, %123
  %184 = or i32 %27, %17
  %185 = xor i32 %135, %56
  %186 = or i32 %135, %69
  %187 = and i32 %49, %95
  %188 = and i32 %56, %0
  %189 = or i32 %24, %79
  %190 = and i32 %59, %0
  %191 = xor i32 %190, %103
  %192 = or i32 %22, %31
  %193 = and i32 %22, %136
  %194 = xor i32 %135, %59
  %195 = or i32 %73, %7
  %196 = shl i32 %195, 1
  %197 = and i32 %48, %73
  %198 = xor i32 %18, %56
  %199 = or i32 %79, %2
  %200 = or i32 %135, %60
  %201 = xor i32 %48, %2
  %202 = or i32 %46, %149
  %203 = and i32 %35, %19
  %204 = xor i32 %42, -1
  %205 = xor i32 %44, %204
  %206 = xor i32 %49, %0
  %207 = xor i32 %83, %206
  %208 = xor i32 %20, %0
  %209 = xor i32 %123, %0
  %210 = or i32 %49, %46
  %211 = or i32 %62, %0
  %212 = or i32 %22, %19
  %213 = and i32 %22, %2
  %214 = or i32 %49, %69
  %215 = or i32 %135, %17
  %216 = or i32 %135, %20
  %217 = and i32 %24, %95
  %218 = or i32 %83, %114
  %219 = xor i32 %30, %1
  %220 = xor i32 %79, %2
  %221 = shl i32 %220, 1
  %222 = and i32 %73, %7
  %223 = or i32 %77, %7
  %224 = or i32 %46, %73
  %225 = or i32 %24, %22
  %226 = shl i32 %225, 2
  %227 = or i32 %135, %22
  %228 = and i32 %24, %22
  %229 = or i32 %27, %123
  %230 = shl i32 %229, 1
  %231 = or i32 %59, %7
  %232 = or i32 %135, %79
  %233 = or i32 %22, %149
  %234 = or i32 %62, %18
  %235 = shl i32 %234, 1
  %236 = xor i32 %43, %0
  %237 = xor i32 %236, %204
  %238 = and i32 %67, %1
  %239 = shl i32 %238, 1
  %240 = or i32 %37, %2
  %241 = or i32 %42, %236
  %242 = xor i32 %135, %35
  %243 = or i32 %149, %37
  %244 = or i32 %27, %62
  %245 = or i32 %77, %0
  %246 = xor i32 %206, -1
  %247 = or i32 %83, %246
  %248 = and i32 %77, %7
  %249 = xor i32 %56, %0
  %250 = and i32 %25, %95
  %251 = shl i32 %250, 1
  %252 = add i32 %22, 1
  %253 = or i32 %18, %19
  %254 = xor i32 %135, %48
  %255 = xor i32 %97, %115
  %256 = or i32 %69, %2
  %257 = and i32 %136, %17
  %258 = and i32 %67, %17
  %259 = or i32 %73, %79
  %260 = xor i32 %27, %65
  %261 = xor i32 %135, %1
  %262 = and i32 %60, %7
  %263 = mul i32 %262, -17
  %264 = and i32 %20, %7
  %265 = mul i32 %264, -13
  %266 = and i32 %60, %0
  %267 = and i32 %20, %0
  %268 = mul i32 %267, -11
  %269 = and i32 %123, %7
  %270 = shl i32 %269, 2
  %271 = mul i32 %63, -9
  %272 = and i32 %123, %0
  %273 = shl i32 %272, 1
  %274 = mul i32 %83, -26
  %275 = add i32 %22, %0
  %276 = add i32 %275, %31
  %277 = add i32 %276, %212
  %278 = add i32 %277, %203
  %279 = add i32 %278, %158
  %280 = add i32 %279, %60
  %281 = add i32 %280, %65
  %282 = add i32 %281, %82
  %283 = add i32 %282, %36
  %284 = sub i32 %25, %253
  %285 = add i32 %284, %72
  %286 = sub i32 %285, %132
  %287 = add i32 %286, %120
  %288 = sub i32 %287, %16
  %289 = mul i32 %288, 3
  %290 = add i32 %266, %21
  %291 = mul i32 %290, -5
  %292 = add i32 %283, %3
  %293 = add i32 %292, %245
  %294 = add i32 %293, %228
  %295 = add i32 %294, %214
  %296 = add i32 %295, %167
  %297 = add i32 %296, %155
  %298 = add i32 %297, %150
  %299 = add i32 %298, %121
  %300 = add i32 %299, %106
  %301 = add i32 %300, %99
  %302 = add i32 %301, %29
  %303 = add i32 %302, %64
  %304 = add i32 %303, %163
  %305 = shl i32 %304, 1
  %306 = add i32 %244, 1073741823
  %307 = add i32 %306, %249
  %308 = shl i32 %307, 2
  %309 = add i32 %48, 2
  %310 = add i32 %309, %79
  %311 = add i32 %310, %252
  %312 = add i32 %311, %23
  %313 = sub i32 %312, %38
  %314 = add i32 %313, %51
  %315 = sub i32 %314, %55
  %316 = add i32 %315, %75
  %317 = sub i32 %316, %81
  %318 = add i32 %317, %96
  %319 = add i32 %318, %105
  %320 = sub i32 %319, %24
  %321 = add i32 %320, %56
  %322 = sub i32 %321, %122
  %323 = sub i32 %322, %126
  %324 = add i32 %323, %128
  %325 = sub i32 %324, %140
  %326 = add i32 %325, %136
  %327 = add i32 %326, %30
  %328 = add i32 %327, %62
  %329 = sub i32 %328, %174
  %330 = sub i32 %329, %181
  %331 = sub i32 %330, %199
  %332 = sub i32 %331, %201
  %333 = sub i32 %332, %27
  %334 = sub i32 %333, %213
  %335 = sub i32 %334, %67
  %336 = add i32 %335, %240
  %337 = sub i32 %336, %20
  %338 = add i32 %337, %256
  %339 = sub i32 %338, %59
  %340 = add i32 %339, %26
  %341 = sub i32 %340, %32
  %342 = add i32 %341, %33
  %343 = sub i32 %342, %34
  %344 = sub i32 %343, %40
  %345 = add i32 %344, %47
  %346 = sub i32 %345, %50
  %347 = add i32 %346, %57
  %348 = add i32 %347, %58
  %349 = sub i32 %348, %61
  %350 = sub i32 %349, %66
  %351 = add i32 %350, %68
  %352 = add i32 %351, %74
  %353 = add i32 %352, %76
  %354 = add i32 %353, %78
  %355 = add i32 %354, %80
  %356 = add i32 %355, %88
  %357 = sub i32 %356, %89
  %358 = add i32 %357, %90
  %359 = sub i32 %358, %91
  %360 = sub i32 %359, %92
  %361 = sub i32 %360, %93
  %362 = add i32 %361, %94
  %363 = add i32 %362, %100
  %364 = sub i32 %363, %101
  %365 = add i32 %364, %102
  %366 = sub i32 %365, %107
  %367 = sub i32 %366, %111
  %368 = sub i32 %367, %112
  %369 = add i32 %368, %113
  %370 = sub i32 %369, %117
  %371 = sub i32 %370, %118
  %372 = sub i32 %371, %119
  %373 = sub i32 %372, %124
  %374 = add i32 %373, %125
  %375 = sub i32 %374, %127
  %376 = add i32 %375, %129
  %377 = add i32 %376, %130
  %378 = add i32 %377, %131
  %379 = sub i32 %378, %134
  %380 = sub i32 %379, %137
  %381 = sub i32 %380, %138
  %382 = add i32 %381, %139
  %383 = add i32 %382, %141
  %384 = add i32 %383, %144
  %385 = add i32 %384, %145
  %386 = sub i32 %385, %146
  %387 = sub i32 %386, %148
  %388 = add i32 %387, %151
  %389 = add i32 %388, %152
  %390 = sub i32 %389, %153
  %391 = sub i32 %390, %157
  %392 = sub i32 %391, %160
  %393 = add i32 %392, %161
  %394 = sub i32 %393, %162
  %395 = add i32 %394, %164
  %396 = add i32 %395, %165
  %397 = add i32 %396, %166
  %398 = sub i32 %397, %84
  %399 = add i32 %398, %168
  %400 = add i32 %399, %169
  %401 = sub i32 %400, %170
  %402 = add i32 %401, %175
  %403 = sub i32 %402, %176
  %404 = add i32 %403, %182
  %405 = add i32 %404, %183
  %406 = add i32 %405, %184
  %407 = sub i32 %406, %185
  %408 = sub i32 %407, %186
  %409 = add i32 %408, %187
  %410 = sub i32 %409, %188
  %411 = add i32 %410, %189
  %412 = add i32 %411, %192
  %413 = sub i32 %412, %193
  %414 = add i32 %413, %194
  %415 = add i32 %414, %197
  %416 = sub i32 %415, %198
  %417 = sub i32 %416, %200
  %418 = add i32 %417, %202
  %419 = sub i32 %418, %208
  %420 = sub i32 %419, %209
  %421 = add i32 %420, %210
  %422 = sub i32 %421, %211
  %423 = add i32 %422, %215
  %424 = add i32 %423, %216
  %425 = sub i32 %424, %217
  %426 = sub i32 %425, %219
  %427 = sub i32 %426, %221
  %428 = sub i32 %427, %222
  %429 = sub i32 %428, %223
  %430 = add i32 %429, %224
  %431 = add i32 %430, %227
  %432 = add i32 %431, %231
  %433 = add i32 %432, %232
  %434 = add i32 %433, %233
  %435 = add i32 %434, %242
  %436 = add i32 %435, %243
  %437 = add i32 %436, %206
  %438 = add i32 %437, %248
  %439 = add i32 %438, %254
  %440 = sub i32 %439, %257
  %441 = add i32 %440, %258
  %442 = add i32 %441, %259
  %443 = add i32 %442, %260
  %444 = add i32 %443, %261
  %445 = add i32 %444, %15
  %446 = sub i32 %445, %11
  %447 = sub i32 %446, %45
  %448 = sub i32 %447, %54
  %449 = sub i32 %448, %71
  %450 = add i32 %449, %85
  %451 = add i32 %450, %87
  %452 = sub i32 %451, %98
  %453 = add i32 %452, %104
  %454 = sub i32 %453, %110
  %455 = sub i32 %454, %116
  %456 = sub i32 %455, %143
  %457 = add i32 %456, %147
  %458 = sub i32 %457, %154
  %459 = sub i32 %458, %159
  %460 = sub i32 %459, %172
  %461 = add i32 %460, %173
  %462 = sub i32 %461, %178
  %463 = sub i32 %462, %180
  %464 = sub i32 %463, %191
  %465 = sub i32 %464, %196
  %466 = add i32 %465, %205
  %467 = add i32 %466, %207
  %468 = sub i32 %467, %218
  %469 = sub i32 %468, %226
  %470 = sub i32 %469, %230
  %471 = sub i32 %470, %235
  %472 = sub i32 %471, %237
  %473 = sub i32 %472, %239
  %474 = add i32 %473, %241
  %475 = sub i32 %474, %247
  %476 = sub i32 %475, %251
  %477 = add i32 %476, %255
  %478 = add i32 %477, %263
  %479 = add i32 %478, %265
  %480 = add i32 %479, %268
  %481 = sub i32 %480, %270
  %482 = add i32 %481, %271
  %483 = sub i32 %482, %273
  %484 = add i32 %483, %274
  %485 = add i32 %484, %291
  %486 = add i32 %485, %13
  %487 = add i32 %486, %308
  %488 = add i32 %487, %289
  %489 = add i32 %488, %305
  %490 = icmp eq i32 %10, %489
  %491 = select i1 %490, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %492 = tail call i32 @puts(i8* nonnull dereferenceable(1) %491)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
