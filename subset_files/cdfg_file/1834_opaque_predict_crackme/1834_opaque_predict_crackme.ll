; ModuleID = '../.././c_source_file/1834_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1834_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = xor i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = shl i32 %9, 1
  %11 = add i32 %10, %7
  %12 = or i32 %4, %3
  %13 = xor i32 %4, -1
  %14 = or i32 %13, %3
  %15 = xor i32 %3, -1
  %16 = xor i32 %12, -1
  %17 = and i32 %13, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %15, %4
  %20 = add i32 %12, 1
  %21 = xor i32 %2, -1
  %22 = and i32 %21, %1
  %23 = xor i32 %22, -1
  %24 = xor i32 %23, %0
  %25 = xor i32 %0, -1
  %26 = or i32 %2, %1
  %27 = and i32 %26, %25
  %28 = and i32 %2, %0
  %29 = xor i32 %28, %26
  %30 = xor i32 %1, -1
  %31 = and i32 %30, %2
  %32 = and i32 %31, %25
  %33 = xor i32 %2, %1
  %34 = or i32 %33, %25
  %35 = xor i32 %34, -1
  %36 = or i32 %32, %35
  %37 = or i32 %28, %22
  %38 = and i32 %1, %0
  %39 = or i32 %21, %0
  %40 = xor i32 %39, %38
  %41 = and i32 %21, %9
  %42 = or i32 %2, %0
  %43 = and i32 %42, %30
  %44 = and i32 %2, %1
  %45 = and i32 %44, %25
  %46 = and i32 %33, %0
  %47 = or i32 %45, %46
  %48 = add i32 %1, 1
  %49 = and i32 %21, %0
  %50 = xor i32 %44, -1
  %51 = xor i32 %49, %50
  %52 = or i32 %1, %0
  %53 = xor i32 %52, %2
  %54 = or i32 %21, %1
  %55 = xor i32 %54, -1
  %56 = or i32 %55, %0
  %57 = shl i32 %56, 1
  %58 = xor i32 %49, -1
  %59 = and i32 %58, %30
  %60 = xor i32 %39, -1
  %61 = or i32 %8, %60
  %62 = or i32 %30, %0
  %63 = and i32 %62, %2
  %64 = or i32 %26, %0
  %65 = or i32 %22, %0
  %66 = shl i32 %65, 1
  %67 = xor i32 %42, -1
  %68 = xor i32 %67, %1
  %69 = add i32 %39, 1
  %70 = xor i32 %26, %38
  %71 = shl i32 %70, 1
  %72 = xor i32 %52, -1
  %73 = and i32 %30, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %60, %9
  %76 = xor i32 %2, %0
  %77 = or i32 %76, %38
  %78 = and i32 %74, %2
  %79 = and i32 %50, %25
  %80 = and i32 %42, %1
  %81 = and i32 %39, %30
  %82 = shl i32 %81, 1
  %83 = xor i32 %38, -1
  %84 = xor i32 %76, -1
  %85 = and i32 %84, %83
  %86 = xor i32 %33, -1
  %87 = and i32 %86, %74
  %88 = xor i32 %28, %23
  %89 = xor i32 %54, %0
  %90 = or i32 %9, %2
  %91 = shl i32 %54, 1
  %92 = or i32 %54, %0
  %93 = or i32 %67, %30
  %94 = shl i32 %93, 1
  %95 = or i32 %60, %30
  %96 = and i32 %39, %9
  %97 = or i32 %76, %72
  %98 = xor i32 %72, %2
  %99 = or i32 %73, %86
  %100 = or i32 %76, %1
  %101 = and i32 %84, %74
  %102 = shl i32 %28, 1
  %103 = xor i32 %62, -1
  %104 = xor i32 %103, %2
  %105 = and i32 %84, %9
  %106 = and i32 %76, %1
  %107 = and i32 %44, %0
  %108 = xor i32 %107, -1
  %109 = xor i32 %27, %108
  %110 = and i32 %52, %2
  %111 = xor i32 %38, %2
  %112 = shl i32 %38, 2
  %113 = or i32 %8, %67
  %114 = shl i32 %113, 1
  %115 = and i32 %54, %0
  %116 = and i32 %52, %86
  %117 = or i32 %28, %30
  %118 = and i32 %33, %52
  %119 = shl i32 %118, 1
  %120 = and i32 %54, %25
  %121 = or i32 %50, %25
  %122 = or i32 %8, %84
  %123 = or i32 %38, %84
  %124 = or i32 %30, %2
  %125 = and i32 %124, %0
  %126 = or i32 %32, %125
  %127 = or i32 %44, %73
  %128 = xor i32 %26, %0
  %129 = or i32 %107, %128
  %130 = xor i32 %33, %0
  %131 = xor i32 %107, %130
  %132 = xor i32 %74, %2
  %133 = xor i32 %28, -1
  %134 = and i32 %8, %133
  %135 = and i32 %42, %9
  %136 = xor i32 %22, %0
  %137 = and i32 %23, %25
  %138 = and i32 %58, %1
  %139 = or i32 %38, %60
  %140 = xor i32 %39, %1
  %141 = xor i32 %42, %1
  %142 = and i32 %33, %25
  %143 = or i32 %107, %142
  %144 = or i32 %76, %30
  %145 = and i32 %31, %0
  %146 = or i32 %33, %0
  %147 = xor i32 %146, -1
  %148 = or i32 %145, %147
  %149 = shl i32 %55, 1
  %150 = xor i32 %62, %2
  %151 = or i32 %49, %55
  %152 = shl i32 %151, 1
  %153 = and i32 %50, %0
  %154 = xor i32 %49, %1
  %155 = shl i32 %154, 1
  %156 = and i32 %9, %2
  %157 = or i32 %33, %38
  %158 = or i32 %28, %1
  %159 = shl i32 %158, 1
  %160 = shl i32 %62, 1
  %161 = or i32 %145, %130
  %162 = or i32 %73, %21
  %163 = xor i32 %142, %108
  %164 = or i32 %54, %25
  %165 = or i32 %38, %67
  %166 = xor i32 %73, %2
  %167 = or i32 %86, %103
  %168 = or i32 %73, %84
  %169 = and i32 %76, %9
  %170 = or i32 %28, %8
  %171 = xor i32 %128, %108
  %172 = xor i32 %133, %1
  %173 = and i32 %58, %9
  %174 = add i32 %33, 1
  %175 = and i32 %62, %86
  %176 = xor i32 %26, -1
  %177 = xor i32 %176, %0
  %178 = or i32 %49, %9
  %179 = and i32 %52, %21
  %180 = or i32 %86, %0
  %181 = and i32 %8, %21
  %182 = and i32 %124, %25
  %183 = or i32 %145, %182
  %184 = and i32 %76, %52
  %185 = and i32 %8, %84
  %186 = xor i32 %28, %52
  %187 = and i32 %133, %9
  %188 = or i32 %21, %9
  %189 = or i32 %84, %103
  %190 = and i32 %133, %30
  %191 = or i32 %67, %9
  %192 = shl i32 %191, 1
  %193 = and i32 %62, %21
  %194 = or i32 %72, %2
  %195 = or i32 %107, %27
  %196 = or i32 %49, %1
  %197 = or i32 %21, %72
  %198 = or i32 %28, %176
  %199 = or i32 %67, %1
  %200 = or i32 %44, %0
  %201 = shl i32 %200, 1
  %202 = shl i32 %146, 1
  %203 = or i32 %49, %30
  %204 = or i32 %49, %8
  %205 = xor i32 %42, %38
  %206 = shl i32 %205, 1
  %207 = xor i32 %46, 2147483647
  %208 = xor i32 %207, %45
  %209 = shl i32 %208, 1
  %210 = and i32 %83, %2
  %211 = or i32 %76, %73
  %212 = and i32 %26, %0
  %213 = xor i32 %212, -1
  %214 = xor i32 %45, %213
  %215 = or i32 %38, %21
  %216 = and i32 %21, %74
  %217 = or i32 %44, %25
  %218 = and i32 %76, %8
  %219 = xor i32 %54, %38
  %220 = or i32 %22, %73
  %221 = or i32 %84, %72
  %222 = and i32 %8, %2
  %223 = or i32 %38, %176
  %224 = or i32 %76, %103
  %225 = and i32 %8, %58
  %226 = and i32 %76, %30
  %227 = xor i32 %83, %2
  %228 = or i32 %33, %73
  %229 = shl i32 %228, 2
  %230 = and i32 %33, %62
  %231 = or i32 %86, %72
  %232 = or i32 %8, %2
  %233 = add i32 %44, 1
  %234 = and i32 %76, %74
  %235 = or i32 %176, %25
  %236 = xor i32 %130, -1
  %237 = or i32 %107, %236
  %238 = shl i32 %33, 1
  %239 = xor i32 %32, %34
  %240 = or i32 %28, %9
  %241 = shl i32 %240, 1
  %242 = or i32 %50, %0
  %243 = xor i32 %60, %1
  %244 = xor i32 %145, %236
  %245 = shl i32 %2, 1
  %246 = or i32 %86, %25
  %247 = xor i32 %124, %0
  %248 = or i32 %145, %247
  %249 = or i32 %33, %103
  %250 = or i32 %73, %2
  %251 = or i32 %38, %86
  %252 = and i32 %42, %8
  %253 = or i32 %8, %21
  %254 = and i32 %76, %83
  %255 = add i32 %26, 1
  %256 = xor i32 %44, %0
  %257 = xor i32 %58, %1
  %258 = and i32 %33, %83
  %259 = or i32 %22, %25
  %260 = shl i32 %259, 1
  %261 = or i32 %26, %25
  %262 = and i32 %86, %0
  %263 = xor i32 %73, %23
  %264 = xor i32 %28, %62
  %265 = or i32 %76, %9
  %266 = or i32 %55, %25
  %267 = or i32 %45, %212
  %268 = and i32 %84, %30
  %269 = and i32 %86, %83
  %270 = or i32 %33, %72
  %271 = and i32 %52, %84
  %272 = and i32 %33, %74
  %273 = or i32 %38, %2
  %274 = xor i32 %49, %54
  %275 = or i32 %38, %55
  %276 = or i32 %23, %25
  %277 = shl i32 %276, 1
  %278 = xor i32 %28, %1
  %279 = xor i32 %73, %50
  %280 = or i32 %60, %1
  %281 = and i32 %21, %83
  %282 = shl i32 %23, 2
  %283 = and i32 %76, %62
  %284 = or i32 %23, %0
  %285 = shl i32 %284, 1
  %286 = or i32 %28, %103
  %287 = or i32 %49, %44
  %288 = xor i32 %55, %0
  %289 = and i32 %176, %25
  %290 = mul i32 %289, 26
  %291 = and i32 %22, %25
  %292 = mul i32 %291, 7
  %293 = and i32 %176, %0
  %294 = and i32 %22, %0
  %295 = mul i32 %294, 23
  %296 = and i32 %55, %25
  %297 = mul i32 %296, 36
  %298 = and i32 %55, %0
  %299 = mul i32 %298, 24
  %300 = mul i32 %107, 37
  %301 = add i32 %52, %0
  %302 = add i32 %301, %67
  %303 = add i32 %302, %268
  %304 = add i32 %303, %288
  %305 = add i32 %304, %261
  %306 = add i32 %305, %258
  %307 = add i32 %306, %252
  %308 = add i32 %307, %243
  %309 = add i32 %308, %218
  %310 = add i32 %309, %196
  %311 = add i32 %310, %189
  %312 = add i32 %311, %140
  %313 = add i32 %312, %135
  %314 = add i32 %313, %134
  %315 = add i32 %314, %122
  %316 = add i32 %315, %80
  %317 = add i32 %316, %59
  %318 = add i32 %317, %51
  %319 = add i32 %318, %43
  %320 = add i32 %270, %63
  %321 = sub i32 %220, %320
  %322 = sub i32 %321, %186
  %323 = add i32 %322, %20
  %324 = add i32 %323, %171
  %325 = mul i32 %324, 5
  %326 = sub i32 %2, %28
  %327 = sub i32 %326, %215
  %328 = sub i32 %327, %6
  %329 = mul i32 %328, 3
  %330 = or i32 %45, %293
  %331 = mul i32 %330, 18
  %332 = add i32 %319, %14
  %333 = shl i32 %332, 1
  %334 = sub i32 1, %0
  %335 = add i32 %334, %48
  %336 = add i32 %335, %1
  %337 = add i32 %336, %72
  %338 = add i32 %337, %74
  %339 = add i32 %338, %8
  %340 = sub i32 %339, %73
  %341 = add i32 %340, %83
  %342 = add i32 %341, %103
  %343 = add i32 %342, %15
  %344 = sub i32 %343, %41
  %345 = add i32 %344, %53
  %346 = add i32 %345, %69
  %347 = sub i32 %346, %78
  %348 = sub i32 %347, %90
  %349 = sub i32 %348, %98
  %350 = sub i32 %349, %104
  %351 = sub i32 %350, %110
  %352 = sub i32 %351, %111
  %353 = sub i32 %352, %112
  %354 = sub i32 %353, %132
  %355 = add i32 %354, %150
  %356 = sub i32 %355, %156
  %357 = sub i32 %356, %160
  %358 = add i32 %357, %162
  %359 = sub i32 %358, %166
  %360 = add i32 %359, %174
  %361 = add i32 %360, %179
  %362 = add i32 %361, %181
  %363 = sub i32 %362, %188
  %364 = add i32 %363, %193
  %365 = sub i32 %364, %194
  %366 = add i32 %365, %197
  %367 = add i32 %366, %84
  %368 = add i32 %367, %210
  %369 = sub i32 %368, %44
  %370 = sub i32 %369, %39
  %371 = sub i32 %370, %76
  %372 = sub i32 %371, %216
  %373 = sub i32 %372, %222
  %374 = sub i32 %373, %42
  %375 = add i32 %374, %227
  %376 = sub i32 %375, %232
  %377 = add i32 %376, %233
  %378 = add i32 %377, %58
  %379 = sub i32 %378, %245
  %380 = add i32 %379, %250
  %381 = add i32 %380, %253
  %382 = add i32 %381, %255
  %383 = add i32 %382, %273
  %384 = sub i32 %383, %281
  %385 = sub i32 %384, %26
  %386 = add i32 %385, %13
  %387 = sub i32 %386, %24
  %388 = sub i32 %387, %27
  %389 = sub i32 %388, %29
  %390 = add i32 %389, %37
  %391 = add i32 %390, %40
  %392 = add i32 %391, %61
  %393 = add i32 %392, %64
  %394 = sub i32 %393, %68
  %395 = sub i32 %394, %75
  %396 = sub i32 %395, %77
  %397 = add i32 %396, %79
  %398 = sub i32 %397, %85
  %399 = add i32 %398, %87
  %400 = sub i32 %399, %88
  %401 = sub i32 %400, %89
  %402 = sub i32 %401, %91
  %403 = add i32 %402, %92
  %404 = sub i32 %403, %95
  %405 = sub i32 %404, %96
  %406 = add i32 %405, %97
  %407 = sub i32 %406, %99
  %408 = add i32 %407, %100
  %409 = add i32 %408, %101
  %410 = sub i32 %409, %102
  %411 = add i32 %410, %105
  %412 = add i32 %411, %106
  %413 = sub i32 %412, %115
  %414 = add i32 %413, %116
  %415 = sub i32 %414, %117
  %416 = add i32 %415, %120
  %417 = sub i32 %416, %121
  %418 = sub i32 %417, %123
  %419 = sub i32 %418, %127
  %420 = sub i32 %419, %136
  %421 = add i32 %420, %137
  %422 = add i32 %421, %138
  %423 = sub i32 %422, %139
  %424 = add i32 %423, %141
  %425 = sub i32 %424, %144
  %426 = sub i32 %425, %149
  %427 = add i32 %426, %153
  %428 = add i32 %427, %157
  %429 = add i32 %428, %130
  %430 = add i32 %429, %164
  %431 = add i32 %430, %165
  %432 = sub i32 %431, %167
  %433 = sub i32 %432, %168
  %434 = add i32 %433, %169
  %435 = add i32 %434, %170
  %436 = sub i32 %435, %172
  %437 = add i32 %436, %173
  %438 = sub i32 %437, %175
  %439 = add i32 %438, %177
  %440 = sub i32 %439, %178
  %441 = add i32 %440, %180
  %442 = sub i32 %441, %184
  %443 = add i32 %442, %185
  %444 = sub i32 %443, %187
  %445 = sub i32 %444, %190
  %446 = add i32 %445, %198
  %447 = sub i32 %446, %199
  %448 = sub i32 %447, %203
  %449 = sub i32 %448, %204
  %450 = sub i32 %449, %211
  %451 = sub i32 %450, %217
  %452 = sub i32 %451, %219
  %453 = sub i32 %452, %221
  %454 = sub i32 %453, %223
  %455 = sub i32 %454, %224
  %456 = sub i32 %455, %225
  %457 = add i32 %456, %226
  %458 = sub i32 %457, %230
  %459 = add i32 %458, %231
  %460 = add i32 %459, %234
  %461 = sub i32 %460, %235
  %462 = sub i32 %461, %238
  %463 = sub i32 %462, %242
  %464 = sub i32 %463, %246
  %465 = sub i32 %464, %249
  %466 = sub i32 %465, %212
  %467 = add i32 %466, %251
  %468 = add i32 %467, %254
  %469 = add i32 %468, %256
  %470 = add i32 %469, %257
  %471 = sub i32 %470, %142
  %472 = add i32 %471, %262
  %473 = sub i32 %472, %128
  %474 = sub i32 %473, %263
  %475 = sub i32 %474, %264
  %476 = add i32 %475, %265
  %477 = sub i32 %476, %266
  %478 = add i32 %477, %269
  %479 = add i32 %478, %271
  %480 = sub i32 %479, %272
  %481 = sub i32 %480, %274
  %482 = add i32 %481, %275
  %483 = add i32 %482, %278
  %484 = add i32 %483, %279
  %485 = add i32 %484, %280
  %486 = sub i32 %485, %282
  %487 = sub i32 %486, %283
  %488 = sub i32 %487, %286
  %489 = sub i32 %488, %287
  %490 = add i32 %489, %16
  %491 = add i32 %490, %18
  %492 = add i32 %491, %19
  %493 = sub i32 %492, %17
  %494 = sub i32 %493, %36
  %495 = sub i32 %494, %47
  %496 = sub i32 %495, %57
  %497 = sub i32 %496, %66
  %498 = sub i32 %497, %71
  %499 = sub i32 %498, %82
  %500 = sub i32 %499, %94
  %501 = add i32 %500, %109
  %502 = sub i32 %501, %114
  %503 = sub i32 %502, %119
  %504 = add i32 %503, %126
  %505 = add i32 %504, %129
  %506 = add i32 %505, %131
  %507 = sub i32 %506, %143
  %508 = sub i32 %507, %148
  %509 = sub i32 %508, %152
  %510 = sub i32 %509, %155
  %511 = sub i32 %510, %159
  %512 = add i32 %511, %161
  %513 = sub i32 %512, %163
  %514 = add i32 %513, %183
  %515 = sub i32 %514, %192
  %516 = add i32 %515, %195
  %517 = sub i32 %516, %201
  %518 = sub i32 %517, %202
  %519 = sub i32 %518, %206
  %520 = add i32 %519, %214
  %521 = add i32 %520, %229
  %522 = sub i32 %521, %237
  %523 = add i32 %522, %239
  %524 = sub i32 %523, %241
  %525 = add i32 %524, %244
  %526 = add i32 %525, %248
  %527 = sub i32 %526, %260
  %528 = add i32 %527, %267
  %529 = sub i32 %528, %277
  %530 = sub i32 %529, %285
  %531 = add i32 %530, %290
  %532 = add i32 %531, %292
  %533 = add i32 %532, %295
  %534 = add i32 %533, %297
  %535 = add i32 %534, %299
  %536 = add i32 %535, %300
  %537 = add i32 %536, %331
  %538 = sub i32 %537, %209
  %539 = add i32 %538, %329
  %540 = add i32 %539, %325
  %541 = add i32 %540, %333
  %542 = icmp eq i32 %11, %541
  %543 = select i1 %542, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %544 = tail call i32 @puts(i8* nonnull dereferenceable(1) %543)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
