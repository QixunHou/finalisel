; ModuleID = '../.././c_source_file/0333_path_condition_crackme.c'
source_filename = "../.././c_source_file/0333_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %1, -1
  %9 = xor i32 %2, %0
  %10 = and i32 %9, %8
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %1
  %13 = xor i32 %12, -1
  %14 = xor i32 %13, %0
  %15 = sub i32 %14, %10
  %16 = add i32 %15, %7
  %17 = shl i32 %3, 2
  %18 = xor i32 %17, -4
  %19 = xor i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = and i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = or i32 %4, %3
  %25 = xor i32 %24, -1
  %26 = mul i32 %25, -6
  %27 = shl i32 %7, 3
  %28 = xor i32 %27, -8
  %29 = and i32 %6, %3
  %30 = shl i32 %22, 1
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %11, %32
  %34 = or i32 %31, %11
  %35 = and i32 %8, %0
  %36 = and i32 %9, %32
  %37 = and i32 %2, %1
  %38 = xor i32 %37, -1
  %39 = and i32 %38, %0
  %40 = or i32 %8, %0
  %41 = xor i32 %40, -1
  %42 = shl i32 %41, 2
  %43 = xor i32 %12, %0
  %44 = or i32 %2, %0
  %45 = and i32 %44, %31
  %46 = and i32 %11, %0
  %47 = xor i32 %46, -1
  %48 = add i32 %46, 1
  %49 = xor i32 %9, -1
  %50 = and i32 %49, %1
  %51 = or i32 %9, %32
  %52 = xor i32 %0, -1
  %53 = and i32 %37, %52
  %54 = or i32 %2, %1
  %55 = and i32 %54, %0
  %56 = xor i32 %55, -1
  %57 = xor i32 %53, %56
  %58 = and i32 %1, %0
  %59 = xor i32 %44, -1
  %60 = or i32 %58, %59
  %61 = or i32 %11, %1
  %62 = xor i32 %61, -1
  %63 = or i32 %62, %52
  %64 = or i32 %1, %0
  %65 = xor i32 %64, %2
  %66 = or i32 %62, %0
  %67 = xor i32 %54, %0
  %68 = xor i32 %35, -1
  %69 = xor i32 %2, %1
  %70 = and i32 %69, %68
  %71 = or i32 %46, %37
  %72 = and i32 %2, %0
  %73 = or i32 %72, %31
  %74 = or i32 %53, %55
  %75 = shl i32 %74, 2
  %76 = and i32 %37, %0
  %77 = xor i32 %69, %0
  %78 = xor i32 %77, -1
  %79 = or i32 %76, %78
  %80 = or i32 %69, %58
  %81 = and i32 %64, %2
  %82 = xor i32 %58, -1
  %83 = and i32 %82, %2
  %84 = and i32 %69, %40
  %85 = xor i32 %69, -1
  %86 = or i32 %58, %85
  %87 = shl i32 %77, 2
  %88 = and i32 %31, %47
  %89 = xor i32 %61, %0
  %90 = and i32 %85, %82
  %91 = shl i32 %49, 1
  %92 = xor i32 %85, %0
  %93 = and i32 %69, %0
  %94 = xor i32 %76, %77
  %95 = or i32 %85, %41
  %96 = xor i32 %72, %13
  %97 = xor i32 %35, %38
  %98 = and i32 %54, %52
  %99 = or i32 %76, %98
  %100 = add i32 %1, 1
  %101 = or i32 %69, %52
  %102 = or i32 %35, %85
  %103 = or i32 %49, %8
  %104 = or i32 %76, %67
  %105 = shl i32 %104, 1
  %106 = and i32 %31, %11
  %107 = or i32 %11, %0
  %108 = xor i32 %107, -1
  %109 = xor i32 %108, %1
  %110 = xor i32 %54, -1
  %111 = or i32 %110, %52
  %112 = or i32 %54, %52
  %113 = or i32 %59, %32
  %114 = or i32 %38, %52
  %115 = and i32 %107, %32
  %116 = xor i32 %110, %0
  %117 = or i32 %11, %41
  %118 = xor i32 %64, -1
  %119 = or i32 %85, %118
  %120 = shl i32 %119, 1
  %121 = xor i32 %72, -1
  %122 = xor i32 %121, %1
  %123 = shl i32 %122, 1
  %124 = or i32 %85, %0
  %125 = or i32 %69, %35
  %126 = xor i32 %44, %1
  %127 = and i32 %49, %68
  %128 = or i32 %35, %11
  %129 = or i32 %31, %49
  %130 = or i32 %54, %0
  %131 = add i32 %107, 1
  %132 = and i32 %8, %2
  %133 = and i32 %132, %0
  %134 = or i32 %8, %2
  %135 = xor i32 %134, %0
  %136 = xor i32 %135, -1
  %137 = xor i32 %133, %136
  %138 = and i32 %61, %52
  %139 = and i32 %40, %2
  %140 = xor i32 %72, %54
  %141 = shl i32 %140, 1
  %142 = or i32 %46, %1
  %143 = and i32 %69, %64
  %144 = xor i32 %82, %2
  %145 = shl i32 %144, 1
  %146 = xor i32 %72, %1
  %147 = and i32 %132, %52
  %148 = and i32 %134, %0
  %149 = or i32 %147, %148
  %150 = shl i32 %149, 1
  %151 = or i32 %61, %0
  %152 = shl i32 %151, 1
  %153 = xor i32 %46, %1
  %154 = and i32 %11, %68
  %155 = and i32 %69, %52
  %156 = or i32 %58, %49
  %157 = shl i32 %156, 1
  %158 = and i32 %9, %68
  %159 = and i32 %9, %64
  %160 = or i32 %58, %108
  %161 = shl i32 %160, 1
  %162 = or i32 %108, %8
  %163 = xor i32 %101, -1
  %164 = or i32 %147, %163
  %165 = and i32 %9, %31
  %166 = xor i32 %35, %13
  %167 = xor i32 %68, %2
  %168 = shl i32 %167, 1
  %169 = shl i32 %11, 1
  %170 = xor i32 %44, %58
  %171 = and i32 %121, %8
  %172 = or i32 %49, %41
  %173 = or i32 %72, %32
  %174 = or i32 %46, %62
  %175 = or i32 %76, %155
  %176 = or i32 %12, %35
  %177 = shl i32 %176, 1
  %178 = xor i32 %133, %78
  %179 = shl i32 %178, 1
  %180 = or i32 %108, %1
  %181 = xor i32 %46, %38
  %182 = xor i32 %107, %58
  %183 = shl i32 %182, 1
  %184 = xor i32 %72, %40
  %185 = xor i32 %118, %2
  %186 = or i32 %35, %2
  %187 = or i32 %11, %118
  %188 = or i32 %9, %8
  %189 = xor i32 %107, %1
  %190 = and i32 %44, %8
  %191 = and i32 %61, %0
  %192 = xor i32 %62, %0
  %193 = or i32 %38, %0
  %194 = or i32 %72, %1
  %195 = or i32 %9, %118
  %196 = xor i32 %148, -1
  %197 = xor i32 %147, %196
  %198 = xor i32 %54, %58
  %199 = and i32 %13, %0
  %200 = or i32 %110, %0
  %201 = or i32 %31, %108
  %202 = xor i32 %76, -1
  %203 = xor i32 %155, %202
  %204 = xor i32 %147, %101
  %205 = or i32 %133, %135
  %206 = or i32 %49, %1
  %207 = or i32 %46, %32
  %208 = and i32 %47, %1
  %209 = or i32 %11, %32
  %210 = and i32 %121, %32
  %211 = xor i32 %98, %202
  %212 = or i32 %69, %118
  %213 = xor i32 %67, 1073741823
  %214 = xor i32 %213, %76
  %215 = xor i32 %59, %1
  %216 = and i32 %85, %68
  %217 = or i32 %9, %1
  %218 = or i32 %133, %77
  %219 = or i32 %72, %12
  %220 = and i32 %38, %52
  %221 = or i32 %31, %59
  %222 = or i32 %72, %8
  %223 = and i32 %32, %2
  %224 = and i32 %64, %11
  %225 = add i32 %61, 1
  %226 = xor i32 %58, %2
  %227 = or i32 %72, %41
  %228 = or i32 %53, %93
  %229 = or i32 %12, %0
  %230 = shl i32 %229, 1
  %231 = and i32 %31, %49
  %232 = and i32 %31, %121
  %233 = and i32 %85, %52
  %234 = xor i32 %40, %2
  %235 = and i32 %44, %32
  %236 = and i32 %44, %1
  %237 = xor i32 %61, %58
  %238 = add i32 %37, 1
  %239 = or i32 %46, %31
  %240 = xor i32 %72, %64
  %241 = or i32 %9, %31
  %242 = and i32 %134, %52
  %243 = or i32 %133, %242
  %244 = or i32 %37, %52
  %245 = xor i32 %37, %0
  %246 = or i32 %49, %118
  %247 = or i32 %108, %32
  %248 = and i32 %47, %8
  %249 = and i32 %107, %1
  %250 = or i32 %58, %62
  %251 = and i32 %49, %8
  %252 = shl i32 %55, 1
  %253 = or i32 %69, %0
  %254 = xor i32 %133, %253
  %255 = and i32 %13, %52
  %256 = or i32 %59, %8
  %257 = and i32 %9, %82
  %258 = or i32 %37, %35
  %259 = and i32 %110, %52
  %260 = mul i32 %259, 12
  %261 = and i32 %12, %52
  %262 = shl i32 %261, 3
  %263 = and i32 %12, %0
  %264 = mul i32 %263, -11
  %265 = and i32 %62, %52
  %266 = and i32 %62, %0
  %267 = mul i32 %266, 19
  %268 = add i32 %59, %118
  %269 = add i32 %268, %83
  %270 = add i32 %269, %34
  %271 = add i32 %270, %247
  %272 = add i32 %271, %240
  %273 = add i32 %272, %222
  %274 = add i32 %273, %219
  %275 = add i32 %274, %200
  %276 = add i32 %275, %180
  %277 = add i32 %276, %142
  %278 = add i32 %277, %114
  %279 = add i32 %278, %109
  %280 = add i32 %279, %71
  %281 = add i32 %280, %51
  %282 = add i32 %281, %4
  %283 = add i32 %282, %99
  %284 = shl i32 %283, 1
  %285 = add i32 %248, %106
  %286 = add i32 %285, %265
  %287 = sub i32 %216, %286
  %288 = add i32 %287, %70
  %289 = add i32 %288, %67
  %290 = mul i32 %289, 3
  %291 = sub i32 %234, %81
  %292 = sub i32 %291, %102
  %293 = sub i32 %292, %53
  %294 = sub i32 %293, %60
  %295 = mul i32 %294, 5
  %296 = add i32 %43, %76
  %297 = add i32 %296, %214
  %298 = shl i32 %297, 2
  %299 = add i32 %100, %0
  %300 = add i32 %299, %1
  %301 = sub i32 %300, %35
  %302 = add i32 %301, %40
  %303 = add i32 %302, %64
  %304 = add i32 %303, %32
  %305 = sub i32 %304, %31
  %306 = add i32 %305, %2
  %307 = sub i32 %306, %3
  %308 = add i32 %307, %33
  %309 = sub i32 %308, %42
  %310 = add i32 %309, %48
  %311 = add i32 %310, %65
  %312 = add i32 %311, %44
  %313 = add i32 %312, %69
  %314 = add i32 %313, %37
  %315 = add i32 %314, %117
  %316 = sub i32 %315, %128
  %317 = add i32 %316, %131
  %318 = add i32 %317, %139
  %319 = add i32 %318, %46
  %320 = add i32 %319, %72
  %321 = sub i32 %320, %154
  %322 = add i32 %321, %107
  %323 = sub i32 %322, %169
  %324 = sub i32 %323, %185
  %325 = sub i32 %324, %186
  %326 = add i32 %325, %61
  %327 = sub i32 %326, %187
  %328 = sub i32 %327, %209
  %329 = add i32 %328, %223
  %330 = sub i32 %329, %224
  %331 = add i32 %330, %225
  %332 = add i32 %331, %226
  %333 = add i32 %332, %238
  %334 = add i32 %333, %4
  %335 = sub i32 %334, %36
  %336 = add i32 %335, %39
  %337 = sub i32 %336, %45
  %338 = add i32 %337, %50
  %339 = sub i32 %338, %63
  %340 = sub i32 %339, %66
  %341 = sub i32 %340, %73
  %342 = sub i32 %341, %80
  %343 = add i32 %342, %84
  %344 = sub i32 %343, %86
  %345 = add i32 %344, %88
  %346 = add i32 %345, %89
  %347 = add i32 %346, %90
  %348 = sub i32 %347, %91
  %349 = add i32 %348, %92
  %350 = add i32 %349, %93
  %351 = add i32 %350, %95
  %352 = sub i32 %351, %96
  %353 = sub i32 %352, %97
  %354 = sub i32 %353, %101
  %355 = add i32 %354, %103
  %356 = add i32 %355, %111
  %357 = sub i32 %356, %112
  %358 = add i32 %357, %113
  %359 = sub i32 %358, %115
  %360 = add i32 %359, %116
  %361 = add i32 %360, %124
  %362 = add i32 %361, %125
  %363 = add i32 %362, %126
  %364 = add i32 %363, %127
  %365 = sub i32 %364, %129
  %366 = add i32 %365, %130
  %367 = add i32 %366, %138
  %368 = sub i32 %367, %143
  %369 = sub i32 %368, %145
  %370 = sub i32 %369, %146
  %371 = sub i32 %370, %153
  %372 = sub i32 %371, %155
  %373 = sub i32 %372, %158
  %374 = sub i32 %373, %159
  %375 = sub i32 %374, %162
  %376 = add i32 %375, %165
  %377 = add i32 %376, %166
  %378 = sub i32 %377, %168
  %379 = add i32 %378, %170
  %380 = sub i32 %379, %171
  %381 = sub i32 %380, %172
  %382 = sub i32 %381, %173
  %383 = add i32 %382, %174
  %384 = sub i32 %383, %181
  %385 = sub i32 %384, %184
  %386 = add i32 %385, %188
  %387 = sub i32 %386, %189
  %388 = add i32 %387, %190
  %389 = sub i32 %388, %191
  %390 = add i32 %389, %192
  %391 = add i32 %390, %193
  %392 = add i32 %391, %194
  %393 = add i32 %392, %195
  %394 = sub i32 %393, %198
  %395 = sub i32 %394, %199
  %396 = sub i32 %395, %201
  %397 = add i32 %396, %206
  %398 = sub i32 %397, %207
  %399 = add i32 %398, %208
  %400 = add i32 %399, %210
  %401 = sub i32 %400, %212
  %402 = add i32 %401, %215
  %403 = sub i32 %402, %217
  %404 = sub i32 %403, %220
  %405 = add i32 %404, %221
  %406 = sub i32 %405, %227
  %407 = sub i32 %406, %231
  %408 = add i32 %407, %232
  %409 = sub i32 %408, %233
  %410 = sub i32 %409, %235
  %411 = add i32 %410, %236
  %412 = add i32 %411, %237
  %413 = add i32 %412, %239
  %414 = add i32 %413, %241
  %415 = add i32 %414, %244
  %416 = sub i32 %415, %245
  %417 = add i32 %416, %246
  %418 = sub i32 %417, %249
  %419 = add i32 %418, %250
  %420 = sub i32 %419, %251
  %421 = add i32 %420, %255
  %422 = sub i32 %421, %256
  %423 = sub i32 %422, %257
  %424 = add i32 %423, %258
  %425 = add i32 %424, %18
  %426 = add i32 %425, %23
  %427 = add i32 %426, %19
  %428 = sub i32 %427, %24
  %429 = add i32 %428, %29
  %430 = sub i32 %429, %57
  %431 = sub i32 %430, %79
  %432 = sub i32 %431, %87
  %433 = add i32 %432, %94
  %434 = sub i32 %433, %120
  %435 = sub i32 %434, %123
  %436 = add i32 %435, %137
  %437 = sub i32 %436, %141
  %438 = sub i32 %437, %152
  %439 = sub i32 %438, %157
  %440 = sub i32 %439, %161
  %441 = add i32 %440, %164
  %442 = add i32 %441, %175
  %443 = sub i32 %442, %177
  %444 = sub i32 %443, %183
  %445 = add i32 %444, %197
  %446 = sub i32 %445, %203
  %447 = sub i32 %446, %204
  %448 = sub i32 %447, %205
  %449 = sub i32 %448, %211
  %450 = sub i32 %449, %218
  %451 = add i32 %450, %228
  %452 = sub i32 %451, %230
  %453 = sub i32 %452, %243
  %454 = sub i32 %453, %252
  %455 = add i32 %454, %254
  %456 = add i32 %455, %260
  %457 = add i32 %456, %262
  %458 = add i32 %457, %264
  %459 = add i32 %458, %267
  %460 = add i32 %459, %26
  %461 = sub i32 %460, %30
  %462 = sub i32 %461, %75
  %463 = sub i32 %462, %105
  %464 = sub i32 %463, %150
  %465 = sub i32 %464, %179
  %466 = add i32 %465, %21
  %467 = sub i32 %466, %28
  %468 = add i32 %467, %295
  %469 = add i32 %468, %298
  %470 = add i32 %469, %290
  %471 = add i32 %470, %284
  %472 = icmp eq i32 %16, %471
  %473 = select i1 %472, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %474 = tail call i32 @puts(i8* nonnull dereferenceable(1) %473)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
