; ModuleID = '../.././c_source_file/1728_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1728_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = mul i32 %4, -2
  %7 = xor i32 %4, %3
  %8 = and i32 %2, %1
  %9 = and i32 %8, %0
  %10 = xor i32 %0, -1
  %11 = xor i32 %2, %1
  %12 = and i32 %11, %10
  %13 = or i32 %9, %12
  %14 = or i32 %2, %1
  %15 = and i32 %14, %10
  %16 = add i32 %7, %15
  %17 = sub i32 %6, %16
  %18 = add i32 %17, %13
  %19 = xor i32 %4, -1
  %20 = and i32 %19, %3
  %21 = shl i32 %3, 1
  %22 = or i32 %4, %3
  %23 = shl i32 %7, 1
  %24 = xor i32 %23, -2
  %25 = or i32 %19, %3
  %26 = shl i32 %25, 1
  %27 = and i32 %4, %3
  %28 = add i32 %25, 1
  %29 = xor i32 %1, -1
  %30 = xor i32 %2, -1
  %31 = and i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %32, %29
  %34 = or i32 %29, %0
  %35 = xor i32 %34, %2
  %36 = or i32 %2, %0
  %37 = and i32 %36, %1
  %38 = xor i32 %32, %1
  %39 = shl i32 %38, 1
  %40 = and i32 %29, %2
  %41 = and i32 %40, %10
  %42 = or i32 %11, %10
  %43 = xor i32 %42, -1
  %44 = or i32 %41, %43
  %45 = and i32 %32, %1
  %46 = and i32 %1, %0
  %47 = xor i32 %36, -1
  %48 = or i32 %46, %47
  %49 = or i32 %14, %0
  %50 = add i32 %36, 1
  %51 = xor i32 %1, %0
  %52 = xor i32 %51, -1
  %53 = xor i32 %2, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %54, %52
  %56 = and i32 %29, %0
  %57 = xor i32 %8, -1
  %58 = xor i32 %56, %57
  %59 = and i32 %14, %0
  %60 = shl i32 %59, 1
  %61 = and i32 %2, %0
  %62 = and i32 %30, %1
  %63 = xor i32 %62, -1
  %64 = xor i32 %61, %63
  %65 = or i32 %61, %51
  %66 = shl i32 %65, 1
  %67 = or i32 %31, %52
  %68 = and i32 %36, %51
  %69 = and i32 %57, %0
  %70 = or i32 %8, %56
  %71 = xor i32 %14, -1
  %72 = or i32 %46, %71
  %73 = and i32 %53, %1
  %74 = and i32 %34, %54
  %75 = and i32 %40, %0
  %76 = xor i32 %11, %0
  %77 = or i32 %75, %76
  %78 = and i32 %52, %2
  %79 = xor i32 %46, -1
  %80 = and i32 %54, %79
  %81 = and i32 %54, %29
  %82 = xor i32 %34, -1
  %83 = or i32 %30, %82
  %84 = or i32 %1, %0
  %85 = xor i32 %11, -1
  %86 = and i32 %84, %85
  %87 = or i32 %31, %51
  %88 = shl i32 %87, 2
  %89 = or i32 %30, %0
  %90 = and i32 %89, %29
  %91 = or i32 %61, %52
  %92 = xor i32 %61, -1
  %93 = and i32 %51, %92
  %94 = or i32 %57, %10
  %95 = and i32 %53, %29
  %96 = and i32 %34, %85
  %97 = or i32 %46, %30
  %98 = xor i32 %47, %1
  %99 = and i32 %8, %10
  %100 = and i32 %11, %0
  %101 = or i32 %99, %100
  %102 = or i32 %53, %51
  %103 = or i32 %53, %52
  %104 = or i32 %62, %56
  %105 = shl i32 %2, 1
  %106 = add i32 %53, 1
  %107 = add i32 %11, 1
  %108 = xor i32 %76, -1
  %109 = or i32 %9, %108
  %110 = xor i32 %56, -1
  %111 = and i32 %110, %2
  %112 = or i32 %62, %0
  %113 = xor i32 %79, %2
  %114 = xor i32 %63, %0
  %115 = and i32 %89, %51
  %116 = or i32 %63, %10
  %117 = xor i32 %8, %0
  %118 = xor i32 %14, %46
  %119 = add i32 %34, 1
  %120 = xor i32 %15, 2147483647
  %121 = xor i32 %120, %9
  %122 = shl i32 %121, 1
  %123 = xor i32 %89, -1
  %124 = or i32 %123, %1
  %125 = xor i32 %61, %84
  %126 = or i32 %53, %29
  %127 = xor i32 %84, -1
  %128 = or i32 %127, %2
  %129 = xor i32 %89, %46
  %130 = and i32 %32, %52
  %131 = or i32 %54, %29
  %132 = and i32 %84, %30
  %133 = or i32 %29, %2
  %134 = xor i32 %133, %0
  %135 = xor i32 %75, -1
  %136 = xor i32 %134, %135
  %137 = and i32 %34, %2
  %138 = or i32 %30, %1
  %139 = xor i32 %138, %0
  %140 = shl i32 %110, 1
  %141 = and i32 %133, %10
  %142 = or i32 %75, %141
  %143 = xor i32 %123, %1
  %144 = xor i32 %61, %1
  %145 = xor i32 %138, -1
  %146 = or i32 %145, %10
  %147 = shl i32 %146, 1
  %148 = and i32 %30, %52
  %149 = or i32 %47, %1
  %150 = and i32 %30, %110
  %151 = or i32 %9, %15
  %152 = xor i32 %41, %42
  %153 = or i32 %31, %145
  %154 = or i32 %85, %127
  %155 = and i32 %85, %110
  %156 = shl i32 %155, 1
  %157 = or i32 %54, %1
  %158 = or i32 %11, %127
  %159 = or i32 %8, %0
  %160 = or i32 %11, %0
  %161 = xor i32 %75, %160
  %162 = xor i32 %110, %2
  %163 = or i32 %145, %0
  %164 = and i32 %53, %34
  %165 = shl i32 %32, 1
  %166 = and i32 %54, %110
  %167 = xor i32 %56, %63
  %168 = or i32 %52, %2
  %169 = or i32 %71, %10
  %170 = and i32 %11, %110
  %171 = shl i32 %170, 1
  %172 = or i32 %47, %29
  %173 = or i32 %85, %10
  %174 = xor i32 %138, %46
  %175 = and i32 %36, %29
  %176 = or i32 %85, %82
  %177 = and i32 %51, %54
  %178 = and i32 %54, %52
  %179 = or i32 %14, %10
  %180 = and i32 %30, %79
  %181 = or i32 %31, %1
  %182 = and i32 %53, %84
  %183 = or i32 %46, %54
  %184 = shl i32 %183, 1
  %185 = or i32 %56, %54
  %186 = shl i32 %185, 1
  %187 = add i32 %62, 1
  %188 = or i32 %53, %82
  %189 = and i32 %36, %52
  %190 = shl i32 %189, 1
  %191 = or i32 %54, %82
  %192 = shl i32 %191, 1
  %193 = or i32 %47, %52
  %194 = or i32 %53, %56
  %195 = and i32 %63, %0
  %196 = and i32 %138, %10
  %197 = xor i32 %92, %1
  %198 = xor i32 %31, %57
  %199 = or i32 %31, %29
  %200 = xor i32 %141, %135
  %201 = and i32 %85, %79
  %202 = or i32 %54, %127
  %203 = and i32 %84, %2
  %204 = or i32 %61, %127
  %205 = or i32 %63, %0
  %206 = and i32 %63, %10
  %207 = and i32 %11, %79
  %208 = or i32 %51, %2
  %209 = or i32 %138, %10
  %210 = add i32 %89, 1
  %211 = or i32 %11, %46
  %212 = or i32 %61, %82
  %213 = xor i32 %14, %0
  %214 = or i32 %9, %213
  %215 = add i32 %61, 1
  %216 = shl i32 %62, 1
  %217 = and i32 %34, %30
  %218 = or i32 %138, %0
  %219 = or i32 %11, %56
  %220 = shl i32 %219, 1
  %221 = or i32 %51, %30
  %222 = and i32 %53, %110
  %223 = and i32 %11, %34
  %224 = shl i32 %223, 1
  %225 = and i32 %57, %10
  %226 = and i32 %53, %79
  %227 = and i32 %138, %0
  %228 = shl i32 %227, 1
  %229 = xor i32 %9, -1
  %230 = xor i32 %213, %229
  %231 = and i32 %92, %29
  %232 = shl i32 %127, 1
  %233 = and i32 %92, %52
  %234 = xor i32 %84, %2
  %235 = or i32 %56, %85
  %236 = or i32 %8, %10
  %237 = and i32 %51, %2
  %238 = or i32 %62, %10
  %239 = or i32 %51, %47
  %240 = and i32 %54, %1
  %241 = add i32 %14, 1
  %242 = xor i32 %12, %229
  %243 = xor i32 %61, %34
  %244 = xor i32 %57, %0
  %245 = or i32 %53, %127
  %246 = xor i32 %127, %2
  %247 = xor i32 %9, %76
  %248 = or i32 %57, %0
  %249 = and i32 %53, %52
  %250 = or i32 %46, %123
  %251 = mul i32 %250, 5
  %252 = or i32 %85, %0
  %253 = shl i32 %252, 1
  %254 = or i32 %75, %134
  %255 = xor i32 %31, %1
  %256 = and i32 %79, %2
  %257 = xor i32 %85, %0
  %258 = or i32 %46, %85
  %259 = and i32 %92, %1
  %260 = and i32 %11, %84
  %261 = xor i32 %99, -1
  %262 = xor i32 %100, %261
  %263 = and i32 %89, %52
  %264 = shl i32 %263, 1
  %265 = xor i32 %31, %138
  %266 = or i32 %61, %71
  %267 = and i32 %51, %30
  %268 = or i32 %46, %145
  %269 = and i32 %53, %51
  %270 = or i32 %82, %2
  %271 = xor i32 %160, -1
  %272 = or i32 %75, %271
  %273 = xor i32 %59, %261
  %274 = or i32 %46, %2
  %275 = or i32 %31, %8
  %276 = xor i32 %56, %2
  %277 = xor i32 %82, %2
  %278 = add i32 %8, 1
  %279 = and i32 %133, %0
  %280 = xor i32 %279, 1073741823
  %281 = xor i32 %280, %41
  %282 = or i32 %53, %1
  %283 = xor i32 %36, %1
  %284 = or i32 %99, %59
  %285 = or i32 %61, %29
  %286 = shl i32 %285, 1
  %287 = or i32 %30, %127
  %288 = or i32 %51, %54
  %289 = and i32 %71, %10
  %290 = and i32 %62, %10
  %291 = and i32 %71, %0
  %292 = mul i32 %291, -10
  %293 = and i32 %62, %0
  %294 = mul i32 %293, -21
  %295 = and i32 %145, %10
  %296 = mul i32 %99, -23
  %297 = and i32 %145, %0
  %298 = mul i32 %9, 13
  %299 = add i32 %51, %0
  %300 = add i32 %299, %148
  %301 = add i32 %300, %269
  %302 = add i32 %301, %265
  %303 = add i32 %302, %248
  %304 = add i32 %303, %222
  %305 = add i32 %304, %212
  %306 = add i32 %305, %206
  %307 = add i32 %306, %188
  %308 = add i32 %307, %157
  %309 = add i32 %308, %144
  %310 = add i32 %309, %129
  %311 = add i32 %310, %124
  %312 = add i32 %311, %102
  %313 = add i32 %312, %90
  %314 = add i32 %313, %73
  %315 = add i32 %314, %68
  %316 = add i32 %297, %187
  %317 = add i32 %316, %295
  %318 = add i32 %317, %245
  %319 = add i32 %318, %154
  %320 = sub i32 %319, %118
  %321 = sub i32 %320, %95
  %322 = add i32 %321, %28
  %323 = mul i32 %322, 3
  %324 = add i32 %290, %289
  %325 = mul i32 %324, 6
  %326 = add i32 %281, %104
  %327 = shl i32 %326, 2
  %328 = add i32 %315, %42
  %329 = add i32 %328, %20
  %330 = shl i32 %329, 1
  %331 = add i32 %0, 2
  %332 = add i32 %331, %1
  %333 = add i32 %332, %119
  %334 = sub i32 %333, %46
  %335 = add i32 %334, %34
  %336 = sub i32 %335, %56
  %337 = add i32 %336, %52
  %338 = add i32 %337, %84
  %339 = sub i32 %338, %3
  %340 = add i32 %339, %35
  %341 = add i32 %340, %50
  %342 = add i32 %341, %78
  %343 = sub i32 %342, %83
  %344 = sub i32 %343, %97
  %345 = add i32 %344, %53
  %346 = sub i32 %345, %105
  %347 = add i32 %346, %106
  %348 = add i32 %347, %107
  %349 = add i32 %348, %111
  %350 = add i32 %349, %113
  %351 = sub i32 %350, %14
  %352 = add i32 %351, %89
  %353 = sub i32 %352, %128
  %354 = add i32 %353, %132
  %355 = add i32 %354, %137
  %356 = sub i32 %355, %140
  %357 = sub i32 %356, %31
  %358 = sub i32 %357, %150
  %359 = add i32 %358, %162
  %360 = sub i32 %359, %168
  %361 = sub i32 %360, %180
  %362 = sub i32 %361, %203
  %363 = add i32 %362, %208
  %364 = add i32 %363, %210
  %365 = add i32 %364, %215
  %366 = add i32 %365, %217
  %367 = sub i32 %366, %221
  %368 = add i32 %367, %11
  %369 = sub i32 %368, %232
  %370 = add i32 %369, %234
  %371 = add i32 %370, %237
  %372 = add i32 %371, %241
  %373 = sub i32 %372, %246
  %374 = sub i32 %373, %256
  %375 = add i32 %374, %61
  %376 = add i32 %375, %8
  %377 = add i32 %376, %267
  %378 = sub i32 %377, %270
  %379 = add i32 %378, %274
  %380 = sub i32 %379, %138
  %381 = add i32 %380, %276
  %382 = add i32 %381, %277
  %383 = add i32 %382, %278
  %384 = sub i32 %383, %287
  %385 = add i32 %384, %19
  %386 = sub i32 %385, %21
  %387 = add i32 %386, %33
  %388 = sub i32 %387, %37
  %389 = add i32 %388, %45
  %390 = sub i32 %389, %48
  %391 = sub i32 %390, %49
  %392 = sub i32 %391, %55
  %393 = add i32 %392, %58
  %394 = add i32 %393, %64
  %395 = add i32 %394, %67
  %396 = add i32 %395, %69
  %397 = sub i32 %396, %70
  %398 = add i32 %397, %72
  %399 = add i32 %398, %74
  %400 = sub i32 %399, %80
  %401 = add i32 %400, %81
  %402 = add i32 %401, %86
  %403 = add i32 %402, %91
  %404 = add i32 %403, %93
  %405 = add i32 %404, %94
  %406 = add i32 %405, %96
  %407 = sub i32 %406, %98
  %408 = add i32 %407, %103
  %409 = sub i32 %408, %112
  %410 = add i32 %409, %114
  %411 = add i32 %410, %115
  %412 = sub i32 %411, %116
  %413 = add i32 %412, %117
  %414 = add i32 %413, %125
  %415 = sub i32 %414, %126
  %416 = sub i32 %415, %130
  %417 = sub i32 %416, %131
  %418 = sub i32 %417, %139
  %419 = sub i32 %418, %143
  %420 = sub i32 %419, %76
  %421 = sub i32 %420, %149
  %422 = add i32 %421, %153
  %423 = add i32 %422, %158
  %424 = sub i32 %423, %159
  %425 = sub i32 %424, %163
  %426 = sub i32 %425, %164
  %427 = sub i32 %426, %165
  %428 = sub i32 %427, %166
  %429 = add i32 %428, %167
  %430 = add i32 %429, %100
  %431 = sub i32 %430, %169
  %432 = sub i32 %431, %172
  %433 = add i32 %432, %173
  %434 = add i32 %433, %174
  %435 = add i32 %434, %175
  %436 = sub i32 %435, %176
  %437 = add i32 %436, %177
  %438 = sub i32 %437, %178
  %439 = add i32 %438, %179
  %440 = add i32 %439, %181
  %441 = sub i32 %440, %182
  %442 = add i32 %441, %193
  %443 = add i32 %442, %194
  %444 = add i32 %443, %195
  %445 = add i32 %444, %196
  %446 = add i32 %445, %197
  %447 = sub i32 %446, %198
  %448 = add i32 %447, %199
  %449 = sub i32 %448, %201
  %450 = add i32 %449, %202
  %451 = sub i32 %450, %204
  %452 = add i32 %451, %205
  %453 = add i32 %452, %207
  %454 = add i32 %453, %209
  %455 = sub i32 %454, %211
  %456 = sub i32 %455, %216
  %457 = sub i32 %456, %218
  %458 = sub i32 %457, %225
  %459 = sub i32 %458, %226
  %460 = sub i32 %459, %12
  %461 = add i32 %460, %231
  %462 = add i32 %461, %233
  %463 = add i32 %462, %235
  %464 = sub i32 %463, %236
  %465 = sub i32 %464, %238
  %466 = add i32 %465, %239
  %467 = sub i32 %466, %240
  %468 = sub i32 %467, %243
  %469 = add i32 %468, %244
  %470 = sub i32 %469, %249
  %471 = add i32 %470, %255
  %472 = add i32 %471, %257
  %473 = add i32 %472, %258
  %474 = add i32 %473, %259
  %475 = add i32 %474, %260
  %476 = sub i32 %475, %266
  %477 = sub i32 %476, %268
  %478 = sub i32 %477, %275
  %479 = add i32 %478, %282
  %480 = add i32 %479, %283
  %481 = sub i32 %480, %160
  %482 = sub i32 %481, %288
  %483 = add i32 %482, %20
  %484 = add i32 %483, %22
  %485 = add i32 %484, %27
  %486 = sub i32 %485, %39
  %487 = sub i32 %486, %44
  %488 = sub i32 %487, %60
  %489 = sub i32 %488, %66
  %490 = sub i32 %489, %77
  %491 = sub i32 %490, %88
  %492 = add i32 %491, %101
  %493 = add i32 %492, %109
  %494 = sub i32 %493, %136
  %495 = add i32 %494, %142
  %496 = sub i32 %495, %147
  %497 = sub i32 %496, %151
  %498 = sub i32 %497, %152
  %499 = sub i32 %498, %156
  %500 = add i32 %499, %161
  %501 = sub i32 %500, %171
  %502 = sub i32 %501, %184
  %503 = sub i32 %502, %186
  %504 = sub i32 %503, %190
  %505 = sub i32 %504, %192
  %506 = add i32 %505, %200
  %507 = add i32 %506, %214
  %508 = sub i32 %507, %220
  %509 = sub i32 %508, %224
  %510 = sub i32 %509, %228
  %511 = add i32 %510, %230
  %512 = add i32 %511, %242
  %513 = sub i32 %512, %247
  %514 = add i32 %513, %251
  %515 = sub i32 %514, %253
  %516 = add i32 %515, %254
  %517 = sub i32 %516, %262
  %518 = sub i32 %517, %264
  %519 = sub i32 %518, %272
  %520 = sub i32 %519, %273
  %521 = add i32 %520, %284
  %522 = sub i32 %521, %286
  %523 = add i32 %522, %292
  %524 = add i32 %523, %294
  %525 = add i32 %524, %296
  %526 = add i32 %525, %298
  %527 = sub i32 %526, %26
  %528 = add i32 %527, %325
  %529 = add i32 %528, %24
  %530 = sub i32 %529, %122
  %531 = add i32 %530, %327
  %532 = add i32 %531, %323
  %533 = add i32 %532, %330
  %534 = icmp eq i32 %18, %533
  %535 = select i1 %534, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %536 = tail call i32 @puts(i8* nonnull dereferenceable(1) %535)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
