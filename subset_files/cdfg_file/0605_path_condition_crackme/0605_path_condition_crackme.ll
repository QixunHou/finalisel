; ModuleID = '../.././c_source_file/0605_path_condition_crackme.c'
source_filename = "../.././c_source_file/0605_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %0, -1
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %2
  %10 = and i32 %9, %7
  %11 = or i32 %8, %2
  %12 = and i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = xor i32 %10, %13
  %15 = sub i32 %6, %14
  %16 = and i32 %4, %3
  %17 = xor i32 %4, %3
  %18 = and i32 %6, %3
  %19 = or i32 %4, %3
  %20 = xor i32 %19, -1
  %21 = xor i32 %3, -1
  %22 = and i32 %21, %4
  %23 = and i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, %0
  %26 = and i32 %25, %24
  %27 = xor i32 %1, %0
  %28 = xor i32 %25, -1
  %29 = and i32 %27, %28
  %30 = xor i32 %2, -1
  %31 = and i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = add i32 %31, 1
  %34 = and i32 %2, %0
  %35 = or i32 %2, %1
  %36 = xor i32 %34, %35
  %37 = xor i32 %27, -1
  %38 = or i32 %31, %37
  %39 = or i32 %2, %0
  %40 = and i32 %39, %8
  %41 = and i32 %8, %0
  %42 = or i32 %41, %2
  %43 = xor i32 %24, %2
  %44 = xor i32 %2, %1
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %7
  %47 = or i32 %44, %41
  %48 = xor i32 %39, -1
  %49 = or i32 %27, %48
  %50 = and i32 %30, %24
  %51 = add i32 %44, 1
  %52 = or i32 %8, %0
  %53 = xor i32 %52, %2
  %54 = or i32 %23, %48
  %55 = or i32 %30, %0
  %56 = xor i32 %55, -1
  %57 = and i32 %2, %1
  %58 = or i32 %57, %0
  %59 = or i32 %41, %30
  %60 = and i32 %55, %1
  %61 = or i32 %56, %8
  %62 = xor i32 %52, -1
  %63 = or i32 %44, %62
  %64 = or i32 %44, %7
  %65 = xor i32 %44, %0
  %66 = xor i32 %48, %1
  %67 = or i32 %30, %1
  %68 = and i32 %67, %0
  %69 = and i32 %55, %8
  %70 = or i32 %35, %0
  %71 = or i32 %48, %37
  %72 = or i32 %28, %1
  %73 = or i32 %1, %0
  %74 = and i32 %73, %28
  %75 = and i32 %27, %30
  %76 = xor i32 %35, -1
  %77 = or i32 %23, %76
  %78 = or i32 %27, %56
  %79 = or i32 %27, %2
  %80 = xor i32 %76, %0
  %81 = xor i32 %41, -1
  %82 = xor i32 %81, %2
  %83 = xor i32 %34, -1
  %84 = add i32 %34, 1
  %85 = and i32 %57, %0
  %86 = xor i32 %65, -1
  %87 = or i32 %85, %86
  %88 = or i32 %57, %41
  %89 = and i32 %30, %1
  %90 = xor i32 %89, -1
  %91 = add i32 %89, 1
  %92 = or i32 %31, %27
  %93 = or i32 %34, %1
  %94 = or i32 %37, %2
  %95 = and i32 %9, %0
  %96 = and i32 %11, %7
  %97 = or i32 %95, %96
  %98 = xor i32 %67, -1
  %99 = or i32 %31, %98
  %100 = and i32 %28, %81
  %101 = and i32 %30, %81
  %102 = xor i32 %57, -1
  %103 = or i32 %102, %7
  %104 = and i32 %81, %2
  %105 = or i32 %44, %0
  %106 = xor i32 %105, -1
  %107 = or i32 %95, %106
  %108 = xor i32 %96, -1
  %109 = xor i32 %95, %108
  %110 = and i32 %52, %45
  %111 = or i32 %25, %23
  %112 = xor i32 %57, %0
  %113 = xor i32 %73, -1
  %114 = or i32 %34, %113
  %115 = xor i32 %67, %23
  %116 = or i32 %25, %41
  %117 = or i32 %28, %37
  %118 = or i32 %30, %113
  %119 = or i32 %98, %7
  %120 = add i32 %67, 1
  %121 = or i32 %23, %56
  %122 = xor i32 %39, %23
  %123 = and i32 %83, %1
  %124 = and i32 %32, %37
  %125 = and i32 %90, %0
  %126 = or i32 %23, %28
  %127 = or i32 %89, %41
  %128 = and i32 %28, %37
  %129 = or i32 %89, %7
  %130 = and i32 %27, %32
  %131 = or i32 %23, %30
  %132 = or i32 %25, %37
  %133 = and i32 %35, %7
  %134 = xor i32 %67, %0
  %135 = shl i32 %134, 1
  %136 = xor i32 %31, %67
  %137 = and i32 %44, %7
  %138 = or i32 %85, %137
  %139 = or i32 %31, %57
  %140 = shl i32 %139, 1
  %141 = or i32 %67, %0
  %142 = and i32 %83, %37
  %143 = and i32 %73, %2
  %144 = and i32 %73, %30
  %145 = and i32 %57, %7
  %146 = and i32 %44, %0
  %147 = xor i32 %145, -1
  %148 = xor i32 %146, %147
  %149 = and i32 %25, %1
  %150 = or i32 %57, %7
  %151 = xor i32 %55, %23
  %152 = xor i32 %41, %102
  %153 = xor i32 %35, %0
  %154 = or i32 %85, %153
  %155 = xor i32 %41, %2
  %156 = or i32 %23, %45
  %157 = xor i32 %45, %0
  %158 = or i32 %113, %2
  %159 = or i32 %25, %62
  %160 = or i32 %27, %30
  %161 = shl i32 %160, 1
  %162 = xor i32 %56, %1
  %163 = xor i32 %90, %0
  %164 = or i32 %89, %0
  %165 = or i32 %10, %12
  %166 = or i32 %30, %37
  %167 = add i32 %39, 1
  %168 = or i32 %25, %8
  %169 = add i32 %27, 1
  %170 = and i32 %25, %52
  %171 = and i32 %39, %1
  %172 = xor i32 %23, %2
  %173 = or i32 %76, %7
  %174 = and i32 %28, %24
  %175 = or i32 %44, %113
  %176 = xor i32 %95, %105
  %177 = shl i32 %176, 1
  %178 = and i32 %35, %0
  %179 = xor i32 %178, %147
  %180 = or i32 %25, %113
  %181 = and i32 %25, %37
  %182 = and i32 %32, %1
  %183 = xor i32 %55, %1
  %184 = mul i32 %183, -3
  %185 = xor i32 %35, %23
  %186 = and i32 %25, %81
  %187 = xor i32 %113, %2
  %188 = and i32 %44, %81
  %189 = xor i32 %32, %1
  %190 = or i32 %27, %28
  %191 = shl i32 %190, 1
  %192 = and i32 %32, %8
  %193 = and i32 %76, %7
  %194 = shl i32 %193, 1
  %195 = and i32 %89, %7
  %196 = mul i32 %195, -11
  %197 = and i32 %76, %0
  %198 = and i32 %89, %0
  %199 = shl i32 %198, 2
  %200 = and i32 %98, %7
  %201 = shl i32 %145, 1
  %202 = and i32 %98, %0
  %203 = shl i32 %85, 1
  %204 = add i32 %82, %94
  %205 = add i32 %204, %189
  %206 = add i32 %205, %133
  %207 = add i32 %206, %132
  %208 = add i32 %207, %122
  %209 = add i32 %208, %112
  %210 = add i32 %209, %99
  %211 = add i32 %202, %200
  %212 = add i32 %211, %197
  %213 = mul i32 %212, -6
  %214 = add i32 %138, %18
  %215 = shl i32 %214, 2
  %216 = add i32 %16, %20
  %217 = mul i32 %216, 7
  %218 = sub i32 %22, %61
  %219 = mul i32 %218, 5
  %220 = add i32 %210, %115
  %221 = add i32 %220, %17
  %222 = add i32 %221, %97
  %223 = shl i32 %222, 1
  %224 = sub i32 4, %0
  %225 = sub i32 %224, %27
  %226 = add i32 %225, %30
  %227 = add i32 %226, %41
  %228 = add i32 %227, %169
  %229 = add i32 %228, %33
  %230 = add i32 %229, %42
  %231 = add i32 %230, %43
  %232 = sub i32 %231, %50
  %233 = add i32 %232, %51
  %234 = add i32 %233, %53
  %235 = add i32 %234, %56
  %236 = sub i32 %235, %59
  %237 = add i32 %236, %75
  %238 = add i32 %237, %79
  %239 = add i32 %238, %84
  %240 = add i32 %239, %91
  %241 = add i32 %240, %101
  %242 = sub i32 %241, %104
  %243 = sub i32 %242, %118
  %244 = add i32 %243, %120
  %245 = add i32 %244, %131
  %246 = add i32 %245, %102
  %247 = sub i32 %246, %143
  %248 = sub i32 %247, %144
  %249 = add i32 %248, %155
  %250 = sub i32 %249, %44
  %251 = add i32 %250, %158
  %252 = add i32 %251, %67
  %253 = sub i32 %252, %166
  %254 = add i32 %253, %167
  %255 = sub i32 %254, %172
  %256 = sub i32 %255, %57
  %257 = add i32 %256, %187
  %258 = sub i32 %257, %4
  %259 = sub i32 %258, %26
  %260 = sub i32 %259, %29
  %261 = add i32 %260, %36
  %262 = sub i32 %261, %38
  %263 = add i32 %262, %40
  %264 = add i32 %263, %46
  %265 = sub i32 %264, %47
  %266 = add i32 %265, %49
  %267 = sub i32 %266, %54
  %268 = sub i32 %267, %58
  %269 = add i32 %268, %60
  %270 = sub i32 %269, %63
  %271 = sub i32 %270, %64
  %272 = add i32 %271, %65
  %273 = sub i32 %272, %66
  %274 = sub i32 %273, %68
  %275 = add i32 %274, %69
  %276 = sub i32 %275, %70
  %277 = sub i32 %276, %71
  %278 = add i32 %277, %72
  %279 = sub i32 %278, %74
  %280 = add i32 %279, %77
  %281 = add i32 %280, %78
  %282 = sub i32 %281, %80
  %283 = add i32 %282, %88
  %284 = sub i32 %283, %92
  %285 = add i32 %284, %93
  %286 = add i32 %285, %100
  %287 = add i32 %286, %103
  %288 = sub i32 %287, %110
  %289 = sub i32 %288, %111
  %290 = sub i32 %289, %114
  %291 = add i32 %290, %116
  %292 = add i32 %291, %117
  %293 = add i32 %292, %119
  %294 = add i32 %293, %121
  %295 = sub i32 %294, %123
  %296 = sub i32 %295, %124
  %297 = add i32 %296, %125
  %298 = add i32 %297, %126
  %299 = add i32 %298, %127
  %300 = sub i32 %299, %128
  %301 = add i32 %300, %129
  %302 = sub i32 %301, %130
  %303 = add i32 %302, %136
  %304 = add i32 %303, %141
  %305 = sub i32 %304, %142
  %306 = add i32 %305, %149
  %307 = sub i32 %306, %150
  %308 = add i32 %307, %151
  %309 = sub i32 %308, %152
  %310 = add i32 %309, %156
  %311 = add i32 %310, %157
  %312 = add i32 %311, %159
  %313 = sub i32 %312, %161
  %314 = sub i32 %313, %162
  %315 = sub i32 %314, %163
  %316 = add i32 %315, %164
  %317 = sub i32 %316, %168
  %318 = add i32 %317, %170
  %319 = sub i32 %318, %171
  %320 = add i32 %319, %173
  %321 = add i32 %320, %174
  %322 = sub i32 %321, %175
  %323 = sub i32 %322, %180
  %324 = add i32 %323, %181
  %325 = add i32 %324, %182
  %326 = sub i32 %325, %185
  %327 = sub i32 %326, %186
  %328 = add i32 %327, %188
  %329 = add i32 %328, %192
  %330 = add i32 %329, %16
  %331 = add i32 %330, %18
  %332 = sub i32 %331, %19
  %333 = add i32 %332, %17
  %334 = sub i32 %333, %87
  %335 = add i32 %334, %107
  %336 = add i32 %335, %109
  %337 = sub i32 %336, %135
  %338 = sub i32 %337, %140
  %339 = sub i32 %338, %148
  %340 = sub i32 %339, %154
  %341 = add i32 %340, %165
  %342 = add i32 %341, %179
  %343 = add i32 %342, %184
  %344 = sub i32 %343, %191
  %345 = sub i32 %344, %194
  %346 = add i32 %345, %196
  %347 = sub i32 %346, %199
  %348 = sub i32 %347, %201
  %349 = sub i32 %348, %203
  %350 = sub i32 %349, %177
  %351 = add i32 %350, %213
  %352 = add i32 %351, %215
  %353 = add i32 %352, %217
  %354 = add i32 %353, %219
  %355 = add i32 %354, %223
  %356 = icmp eq i32 %15, %355
  %357 = select i1 %356, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %358 = tail call i32 @puts(i8* nonnull dereferenceable(1) %357)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
