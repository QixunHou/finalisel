; ModuleID = '../.././c_source_file/0666_path_condition_crackme.c'
source_filename = "../.././c_source_file/0666_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = add i32 %4, 1
  %7 = xor i32 %1, -1
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %0
  %10 = and i32 %9, %7
  %11 = sub i32 %6, %10
  %12 = and i32 %7, %2
  %13 = and i32 %12, %0
  %14 = xor i32 %2, %1
  %15 = or i32 %14, %0
  %16 = xor i32 %15, -1
  %17 = or i32 %13, %16
  %18 = xor i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %19
  %23 = or i32 %7, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %14, %24
  %26 = or i32 %8, %1
  %27 = xor i32 %0, -1
  %28 = and i32 %12, %27
  %29 = or i32 %7, %2
  %30 = and i32 %29, %0
  %31 = or i32 %28, %30
  %32 = shl i32 %31, 1
  %33 = xor i32 %14, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %13, %34
  %36 = and i32 %7, %0
  %37 = xor i32 %36, -1
  %38 = add i32 %36, 1
  %39 = and i32 %8, %0
  %40 = xor i32 %39, -1
  %41 = and i32 %40, %1
  %42 = and i32 %8, %19
  %43 = or i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %44, %2
  %46 = and i32 %43, %2
  %47 = and i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = xor i32 %37, %2
  %50 = shl i32 %49, 1
  %51 = and i32 %2, %1
  %52 = and i32 %51, %0
  %53 = and i32 %14, %27
  %54 = xor i32 %52, -1
  %55 = xor i32 %53, %54
  %56 = or i32 %18, %8
  %57 = and i32 %18, %48
  %58 = shl i32 %57, 1
  %59 = or i32 %2, %1
  %60 = or i32 %59, %27
  %61 = xor i32 %59, -1
  %62 = or i32 %61, %0
  %63 = shl i32 %62, 1
  %64 = xor i32 %47, %59
  %65 = and i32 %1, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %14, -1
  %68 = and i32 %67, %66
  %69 = and i32 %43, %8
  %70 = and i32 %21, %7
  %71 = xor i32 %51, -1
  %72 = or i32 %51, %36
  %73 = or i32 %20, %44
  %74 = xor i32 %9, %65
  %75 = shl i32 %74, 1
  %76 = or i32 %47, %44
  %77 = and i32 %4, %7
  %78 = and i32 %8, %1
  %79 = or i32 %67, %27
  %80 = and i32 %21, %66
  %81 = and i32 %59, %27
  %82 = or i32 %52, %81
  %83 = xor i32 %59, %0
  %84 = or i32 %52, %83
  %85 = xor i32 %66, %2
  %86 = xor i32 %4, %65
  %87 = and i32 %48, %1
  %88 = and i32 %23, %21
  %89 = xor i32 %29, 2147483647
  %90 = or i32 %89, %0
  %91 = xor i32 %90, %13
  %92 = xor i32 %39, %1
  %93 = or i32 %65, %21
  %94 = xor i32 %48, %1
  %95 = and i32 %8, %66
  %96 = and i32 %26, %0
  %97 = or i32 %19, %2
  %98 = or i32 %21, %19
  %99 = or i32 %20, %19
  %100 = xor i32 %9, -1
  %101 = or i32 %100, %1
  %102 = and i32 %71, %27
  %103 = shl i32 %102, 1
  %104 = and i32 %51, %27
  %105 = and i32 %59, %0
  %106 = or i32 %104, %105
  %107 = and i32 %18, %8
  %108 = or i32 %65, %100
  %109 = or i32 %78, %0
  %110 = xor i32 %26, -1
  %111 = or i32 %110, %27
  %112 = or i32 %47, %61
  %113 = shl i32 %112, 1
  %114 = or i32 %14, %44
  %115 = and i32 %4, %1
  %116 = or i32 %65, %2
  %117 = shl i32 %116, 1
  %118 = or i32 %67, %0
  %119 = and i32 %14, %23
  %120 = xor i32 %29, %0
  %121 = xor i32 %120, -1
  %122 = xor i32 %13, %121
  %123 = or i32 %5, %19
  %124 = xor i32 %78, -1
  %125 = or i32 %124, %0
  %126 = xor i32 %81, 2147483647
  %127 = xor i32 %126, %52
  %128 = shl i32 %127, 1
  %129 = xor i32 %43, %2
  %130 = or i32 %52, %53
  %131 = or i32 %8, %24
  %132 = or i32 %13, %120
  %133 = xor i32 %59, %65
  %134 = xor i32 %36, %71
  %135 = and i32 %124, %27
  %136 = and i32 %26, %27
  %137 = xor i32 %83, %54
  %138 = xor i32 %47, %23
  %139 = and i32 %14, %43
  %140 = xor i32 %78, %0
  %141 = and i32 %21, %1
  %142 = add i32 %39, 1
  %143 = or i32 %47, %78
  %144 = or i32 %18, %2
  %145 = shl i32 %144, 2
  %146 = and i32 %43, %21
  %147 = shl i32 %146, 1
  %148 = xor i32 %61, %0
  %149 = shl i32 %148, 1
  %150 = or i32 %47, %18
  %151 = or i32 %20, %65
  %152 = xor i32 %23, %2
  %153 = or i32 %5, %7
  %154 = xor i32 %104, -1
  %155 = xor i32 %105, %154
  %156 = or i32 %67, %24
  %157 = or i32 %20, %36
  %158 = and i32 %67, %0
  %159 = and i32 %8, %37
  %160 = or i32 %39, %1
  %161 = and i32 %124, %0
  %162 = and i32 %71, %0
  %163 = and i32 %37, %2
  %164 = and i32 %14, %66
  %165 = or i32 %65, %8
  %166 = and i32 %40, %19
  %167 = add i32 %78, 1
  %168 = and i32 %14, %37
  %169 = or i32 %100, %19
  %170 = or i32 %47, %7
  %171 = or i32 %59, %0
  %172 = or i32 %5, %1
  %173 = or i32 %20, %24
  %174 = and i32 %18, %2
  %175 = or i32 %8, %44
  %176 = xor i32 %5, %1
  %177 = or i32 %14, %65
  %178 = or i32 %21, %44
  %179 = and i32 %67, %37
  %180 = and i32 %67, %27
  %181 = xor i32 %4, %1
  %182 = or i32 %124, %27
  %183 = xor i32 %47, %124
  %184 = shl i32 %183, 1
  %185 = or i32 %24, %2
  %186 = and i32 %18, %40
  %187 = xor i32 %71, %0
  %188 = and i32 %4, %19
  %189 = or i32 %14, %27
  %190 = or i32 %65, %61
  %191 = and i32 %20, %43
  %192 = or i32 %52, %34
  %193 = xor i32 %52, %33
  %194 = xor i32 %51, %0
  %195 = xor i32 %26, %0
  %196 = and i32 %14, %0
  %197 = or i32 %36, %2
  %198 = xor i32 %36, %2
  %199 = and i32 %20, %66
  %200 = xor i32 %24, %2
  %201 = shl i32 %200, 1
  %202 = xor i32 %36, %124
  %203 = xor i32 %39, %71
  %204 = or i32 %47, %19
  %205 = xor i32 %9, %1
  %206 = or i32 %100, %7
  %207 = and i32 %9, %1
  %208 = xor i32 %189, -1
  %209 = or i32 %28, %208
  %210 = and i32 %23, %2
  %211 = or i32 %39, %18
  %212 = xor i32 %47, %43
  %213 = or i32 %78, %27
  %214 = xor i32 %196, %154
  %215 = and i32 %21, %37
  %216 = or i32 %51, %0
  %217 = or i32 %8, %19
  %218 = or i32 %20, %7
  %219 = xor i32 %13, %15
  %220 = or i32 %65, %110
  %221 = xor i32 %40, %1
  %222 = shl i32 %19, 1
  %223 = and i32 %20, %23
  %224 = or i32 %65, %67
  %225 = or i32 %26, %27
  %226 = or i32 %39, %110
  %227 = or i32 %61, %27
  %228 = and i32 %61, %27
  %229 = shl i32 %228, 2
  %230 = and i32 %78, %27
  %231 = and i32 %61, %0
  %232 = and i32 %78, %0
  %233 = and i32 %110, %27
  %234 = mul i32 %233, -17
  %235 = and i32 %110, %0
  %236 = shl i32 %235, 4
  %237 = add i32 %227, %185
  %238 = add i32 %237, %226
  %239 = add i32 %238, %191
  %240 = add i32 %239, %189
  %241 = add i32 %240, %188
  %242 = add i32 %241, %173
  %243 = add i32 %242, %150
  %244 = add i32 %243, %135
  %245 = add i32 %244, %134
  %246 = add i32 %245, %123
  %247 = add i32 %246, %119
  %248 = add i32 %247, %86
  %249 = add i32 %248, %91
  %250 = shl i32 %249, 1
  %251 = sub i32 %142, %159
  %252 = sub i32 %251, %69
  %253 = add i32 %252, %232
  %254 = add i32 %253, %52
  %255 = add i32 %254, %203
  %256 = mul i32 %255, 5
  %257 = sub i32 %104, %4
  %258 = sub i32 %257, %157
  %259 = add i32 %258, %22
  %260 = sub i32 %259, %122
  %261 = mul i32 %260, 3
  %262 = add i32 %202, %179
  %263 = shl i32 %262, 2
  %264 = shl i32 %0, 1
  %265 = add i32 %264, 3
  %266 = add i32 %265, %7
  %267 = add i32 %266, %38
  %268 = add i32 %267, %18
  %269 = sub i32 %268, %43
  %270 = add i32 %269, %8
  %271 = sub i32 %270, %2
  %272 = sub i32 %271, %65
  %273 = sub i32 %272, %26
  %274 = sub i32 %273, %42
  %275 = sub i32 %274, %45
  %276 = sub i32 %275, %46
  %277 = add i32 %276, %48
  %278 = add i32 %277, %56
  %279 = add i32 %278, %14
  %280 = add i32 %279, %71
  %281 = add i32 %280, %78
  %282 = add i32 %281, %85
  %283 = add i32 %282, %95
  %284 = sub i32 %283, %97
  %285 = sub i32 %284, %107
  %286 = add i32 %285, %110
  %287 = add i32 %286, %61
  %288 = sub i32 %287, %129
  %289 = sub i32 %288, %131
  %290 = add i32 %289, %152
  %291 = sub i32 %290, %163
  %292 = add i32 %291, %165
  %293 = add i32 %292, %167
  %294 = sub i32 %293, %174
  %295 = sub i32 %294, %175
  %296 = add i32 %295, %20
  %297 = sub i32 %296, %197
  %298 = add i32 %297, %198
  %299 = add i32 %298, %210
  %300 = sub i32 %299, %47
  %301 = add i32 %300, %217
  %302 = sub i32 %301, %222
  %303 = add i32 %302, %25
  %304 = add i32 %303, %41
  %305 = sub i32 %304, %50
  %306 = sub i32 %305, %60
  %307 = sub i32 %306, %64
  %308 = add i32 %307, %68
  %309 = add i32 %308, %70
  %310 = sub i32 %309, %72
  %311 = add i32 %310, %73
  %312 = sub i32 %311, %76
  %313 = add i32 %312, %77
  %314 = add i32 %313, %79
  %315 = add i32 %314, %80
  %316 = sub i32 %315, %87
  %317 = add i32 %316, %88
  %318 = sub i32 %317, %92
  %319 = add i32 %318, %93
  %320 = add i32 %319, %94
  %321 = sub i32 %320, %96
  %322 = add i32 %321, %98
  %323 = sub i32 %322, %99
  %324 = add i32 %323, %101
  %325 = sub i32 %324, %108
  %326 = add i32 %325, %109
  %327 = sub i32 %326, %111
  %328 = sub i32 %327, %114
  %329 = add i32 %328, %115
  %330 = add i32 %329, %53
  %331 = sub i32 %330, %117
  %332 = sub i32 %331, %118
  %333 = add i32 %332, %125
  %334 = add i32 %333, %133
  %335 = sub i32 %334, %136
  %336 = sub i32 %335, %81
  %337 = add i32 %336, %138
  %338 = sub i32 %337, %139
  %339 = sub i32 %338, %140
  %340 = sub i32 %339, %141
  %341 = add i32 %340, %83
  %342 = sub i32 %341, %143
  %343 = sub i32 %342, %145
  %344 = sub i32 %343, %105
  %345 = sub i32 %344, %151
  %346 = sub i32 %345, %153
  %347 = sub i32 %346, %156
  %348 = add i32 %347, %158
  %349 = add i32 %348, %160
  %350 = add i32 %349, %161
  %351 = sub i32 %350, %162
  %352 = sub i32 %351, %164
  %353 = sub i32 %352, %166
  %354 = add i32 %353, %168
  %355 = add i32 %354, %169
  %356 = sub i32 %355, %170
  %357 = add i32 %356, %171
  %358 = sub i32 %357, %172
  %359 = sub i32 %358, %176
  %360 = add i32 %359, %177
  %361 = add i32 %360, %178
  %362 = sub i32 %361, %180
  %363 = add i32 %362, %181
  %364 = add i32 %363, %182
  %365 = add i32 %364, %186
  %366 = add i32 %365, %187
  %367 = add i32 %366, %190
  %368 = add i32 %367, %194
  %369 = add i32 %368, %195
  %370 = add i32 %369, %196
  %371 = sub i32 %370, %199
  %372 = sub i32 %371, %201
  %373 = sub i32 %372, %204
  %374 = sub i32 %373, %205
  %375 = add i32 %374, %206
  %376 = add i32 %375, %207
  %377 = sub i32 %376, %211
  %378 = sub i32 %377, %212
  %379 = add i32 %378, %213
  %380 = add i32 %379, %215
  %381 = add i32 %380, %216
  %382 = sub i32 %381, %218
  %383 = add i32 %382, %220
  %384 = sub i32 %383, %221
  %385 = add i32 %384, %223
  %386 = add i32 %385, %224
  %387 = add i32 %386, %225
  %388 = sub i32 %387, %230
  %389 = add i32 %388, %231
  %390 = sub i32 %389, %17
  %391 = sub i32 %390, %35
  %392 = sub i32 %391, %55
  %393 = sub i32 %392, %58
  %394 = sub i32 %393, %63
  %395 = sub i32 %394, %75
  %396 = add i32 %395, %82
  %397 = add i32 %396, %84
  %398 = sub i32 %397, %103
  %399 = add i32 %398, %106
  %400 = sub i32 %399, %113
  %401 = sub i32 %400, %130
  %402 = add i32 %401, %132
  %403 = sub i32 %402, %137
  %404 = sub i32 %403, %147
  %405 = sub i32 %404, %149
  %406 = add i32 %405, %155
  %407 = sub i32 %406, %184
  %408 = add i32 %407, %192
  %409 = add i32 %408, %193
  %410 = add i32 %409, %209
  %411 = add i32 %410, %214
  %412 = add i32 %411, %219
  %413 = sub i32 %412, %229
  %414 = add i32 %413, %234
  %415 = add i32 %414, %236
  %416 = sub i32 %415, %32
  %417 = add i32 %416, %263
  %418 = sub i32 %417, %128
  %419 = add i32 %418, %256
  %420 = add i32 %419, %261
  %421 = add i32 %420, %250
  %422 = icmp eq i32 %11, %421
  %423 = select i1 %422, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %424 = tail call i32 @puts(i8* nonnull dereferenceable(1) %423)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
