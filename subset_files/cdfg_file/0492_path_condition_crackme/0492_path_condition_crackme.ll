; ModuleID = '../.././c_source_file/0492_path_condition_crackme.c'
source_filename = "../.././c_source_file/0492_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %2, %1
  %8 = or i32 %7, %6
  %9 = mul i32 %8, -5
  %10 = and i32 %1, %0
  %11 = or i32 %7, %10
  %12 = shl i32 %11, 1
  %13 = sub i32 %9, %12
  %14 = xor i32 %2, -1
  %15 = or i32 %14, %0
  %16 = xor i32 %1, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %15, %17
  %19 = and i32 %2, %0
  %20 = or i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %19, %21
  %23 = xor i32 %0, -1
  %24 = or i32 %2, %1
  %25 = or i32 %24, %23
  %26 = and i32 %4, %0
  %27 = and i32 %2, %1
  %28 = or i32 %27, %26
  %29 = and i32 %27, %0
  %30 = xor i32 %7, %0
  %31 = xor i32 %29, %30
  %32 = and i32 %14, %1
  %33 = or i32 %32, %0
  %34 = xor i32 %27, -1
  %35 = xor i32 %34, %0
  %36 = or i32 %7, %21
  %37 = xor i32 %2, %0
  %38 = and i32 %37, %1
  %39 = and i32 %34, %0
  %40 = shl i32 %39, 2
  %41 = xor i32 %10, -1
  %42 = xor i32 %7, -1
  %43 = or i32 %42, %21
  %44 = or i32 %14, %1
  %45 = and i32 %27, %23
  %46 = and i32 %7, %0
  %47 = or i32 %45, %46
  %48 = or i32 %2, %0
  %49 = and i32 %48, %1
  %50 = xor i32 %19, -1
  %51 = xor i32 %50, %1
  %52 = shl i32 %26, 1
  %53 = and i32 %14, %17
  %54 = xor i32 %32, %0
  %55 = shl i32 %54, 1
  %56 = or i32 %19, %32
  %57 = and i32 %16, %14
  %58 = xor i32 %19, %20
  %59 = xor i32 %15, -1
  %60 = or i32 %10, %59
  %61 = xor i32 %37, -1
  %62 = and i32 %61, %4
  %63 = and i32 %41, %2
  %64 = or i32 %14, %21
  %65 = shl i32 %21, 1
  %66 = and i32 %14, %0
  %67 = or i32 %66, %16
  %68 = and i32 %50, %4
  %69 = and i32 %24, %23
  %70 = shl i32 %69, 1
  %71 = xor i32 %66, %1
  %72 = xor i32 %32, -1
  %73 = or i32 %72, %0
  %74 = and i32 %50, %1
  %75 = xor i32 %46, 1073741823
  %76 = xor i32 %75, %45
  %77 = shl i32 %76, 2
  %78 = or i32 %21, %2
  %79 = and i32 %37, %17
  %80 = xor i32 %24, %0
  %81 = or i32 %29, %80
  %82 = and i32 %42, %41
  %83 = and i32 %20, %2
  %84 = and i32 %24, %0
  %85 = or i32 %26, %2
  %86 = or i32 %61, %1
  %87 = xor i32 %26, -1
  %88 = and i32 %42, %87
  %89 = or i32 %61, %17
  %90 = and i32 %37, %41
  %91 = xor i32 %41, %2
  %92 = and i32 %4, %2
  %93 = and i32 %92, %0
  %94 = or i32 %4, %2
  %95 = and i32 %94, %23
  %96 = xor i32 %93, -1
  %97 = xor i32 %95, %96
  %98 = and i32 %7, %41
  %99 = and i32 %5, %61
  %100 = xor i32 %26, %34
  %101 = xor i32 %66, -1
  %102 = and i32 %101, %1
  %103 = or i32 %45, %84
  %104 = shl i32 %103, 1
  %105 = or i32 %26, %42
  %106 = shl i32 %105, 1
  %107 = and i32 %5, %14
  %108 = and i32 %15, %1
  %109 = xor i32 %24, -1
  %110 = xor i32 %109, %0
  %111 = or i32 %42, %6
  %112 = and i32 %61, %1
  %113 = and i32 %92, %23
  %114 = or i32 %7, %23
  %115 = xor i32 %113, %114
  %116 = and i32 %37, %5
  %117 = xor i32 %48, -1
  %118 = xor i32 %117, %1
  %119 = or i32 %10, %109
  %120 = shl i32 %119, 1
  %121 = xor i32 %5, %2
  %122 = xor i32 %66, %34
  %123 = add i32 %15, 1
  %124 = and i32 %20, %61
  %125 = xor i32 %94, %0
  %126 = or i32 %93, %125
  %127 = xor i32 %26, %2
  %128 = xor i32 %44, -1
  %129 = or i32 %10, %128
  %130 = or i32 %26, %61
  %131 = or i32 %66, %128
  %132 = xor i32 %15, %1
  %133 = and i32 %16, %50
  %134 = and i32 %61, %87
  %135 = or i32 %117, %4
  %136 = and i32 %7, %87
  %137 = xor i32 %29, 2147483647
  %138 = xor i32 %137, %69
  %139 = shl i32 %138, 1
  %140 = and i32 %34, %23
  %141 = and i32 %72, %0
  %142 = or i32 %59, %17
  %143 = or i32 %61, %21
  %144 = and i32 %94, %0
  %145 = or i32 %113, %144
  %146 = or i32 %37, %10
  %147 = or i32 %32, %26
  %148 = shl i32 %147, 1
  %149 = and i32 %37, %87
  %150 = or i32 %19, %4
  %151 = or i32 %7, %0
  %152 = xor i32 %93, %151
  %153 = xor i32 %48, %1
  %154 = or i32 %14, %17
  %155 = xor i32 %144, 2147483647
  %156 = xor i32 %155, %113
  %157 = shl i32 %156, 1
  %158 = or i32 %109, %23
  %159 = and i32 %5, %42
  %160 = shl i32 %159, 1
  %161 = or i32 %42, %23
  %162 = shl i32 %161, 1
  %163 = and i32 %16, %2
  %164 = or i32 %16, %2
  %165 = xor i32 %19, %5
  %166 = or i32 %17, %2
  %167 = or i32 %66, %4
  %168 = xor i32 %114, -1
  %169 = or i32 %113, %168
  %170 = xor i32 %24, %10
  %171 = xor i32 %44, %10
  %172 = and i32 %50, %17
  %173 = xor i32 %19, %24
  %174 = and i32 %44, %23
  %175 = or i32 %37, %16
  %176 = xor i32 %66, %44
  %177 = or i32 %37, %21
  %178 = and i32 %37, %4
  %179 = and i32 %5, %2
  %180 = xor i32 %59, %1
  %181 = or i32 %29, %69
  %182 = and i32 %61, %41
  %183 = shl i32 %182, 1
  %184 = or i32 %128, %0
  %185 = or i32 %10, %14
  %186 = xor i32 %26, %72
  %187 = or i32 %59, %4
  %188 = or i32 %128, %23
  %189 = and i32 %44, %0
  %190 = or i32 %10, %2
  %191 = or i32 %10, %61
  %192 = and i32 %48, %4
  %193 = shl i32 %192, 1
  %194 = xor i32 %27, %0
  %195 = and i32 %15, %4
  %196 = or i32 %32, %23
  %197 = or i32 %37, %26
  %198 = xor i32 %87, %2
  %199 = and i32 %16, %101
  %200 = shl i32 %199, 1
  %201 = or i32 %37, %1
  %202 = or i32 %27, %0
  %203 = or i32 %44, %23
  %204 = or i32 %16, %117
  %205 = shl i32 %204, 1
  %206 = and i32 %87, %2
  %207 = shl i32 %206, 1
  %208 = or i32 %16, %14
  %209 = or i32 %34, %23
  %210 = xor i32 %72, %0
  %211 = or i32 %72, %23
  %212 = or i32 %117, %1
  %213 = or i32 %44, %0
  %214 = or i32 %37, %6
  %215 = and i32 %20, %14
  %216 = xor i32 %10, %2
  %217 = and i32 %72, %23
  %218 = shl i32 %217, 1
  %219 = xor i32 %125, %96
  %220 = or i32 %93, %30
  %221 = and i32 %61, %17
  %222 = add i32 %16, 1
  %223 = or i32 %37, %17
  %224 = and i32 %20, %42
  %225 = xor i32 %30, -1
  %226 = or i32 %29, %225
  %227 = and i32 %48, %16
  %228 = and i32 %37, %16
  %229 = or i32 %61, %6
  %230 = or i32 %16, %61
  %231 = shl i32 %230, 1
  %232 = and i32 %42, %0
  %233 = and i32 %7, %23
  %234 = xor i32 %137, %233
  %235 = add i32 %48, 1
  %236 = xor i32 %20, %2
  %237 = xor i32 %6, %2
  %238 = or i32 %29, %233
  %239 = or i32 %14, %6
  %240 = xor i32 %80, -1
  %241 = xor i32 %29, %240
  %242 = xor i32 %151, -1
  %243 = or i32 %93, %242
  %244 = or i32 %16, %59
  %245 = or i32 %19, %16
  %246 = or i32 %66, %17
  %247 = or i32 %19, %6
  %248 = or i32 %24, %0
  %249 = xor i32 %48, %10
  %250 = and i32 %101, %4
  %251 = and i32 %42, %23
  %252 = or i32 %19, %109
  %253 = or i32 %26, %14
  %254 = xor i32 %15, %10
  %255 = or i32 %34, %0
  %256 = shl i32 %255, 1
  %257 = or i32 %19, %17
  %258 = or i32 %7, %26
  %259 = and i32 %17, %2
  %260 = or i32 %27, %23
  %261 = or i32 %42, %0
  %262 = or i32 %93, %95
  %263 = or i32 %10, %42
  %264 = and i32 %7, %5
  %265 = and i32 %109, %23
  %266 = mul i32 %265, 10
  %267 = and i32 %32, %23
  %268 = shl i32 %267, 3
  %269 = and i32 %109, %0
  %270 = mul i32 %269, -12
  %271 = and i32 %32, %0
  %272 = shl i32 %271, 1
  %273 = and i32 %128, %23
  %274 = shl i32 %273, 3
  %275 = mul i32 %45, 7
  %276 = and i32 %128, %0
  %277 = mul i32 %29, 6
  %278 = add i32 %215, %6
  %279 = add i32 %278, %42
  %280 = add i32 %279, %127
  %281 = add i32 %280, %83
  %282 = add i32 %281, %258
  %283 = add i32 %282, %232
  %284 = add i32 %283, %151
  %285 = add i32 %284, %189
  %286 = add i32 %285, %46
  %287 = add i32 %286, %187
  %288 = add i32 %287, %186
  %289 = add i32 %288, %116
  %290 = add i32 %289, %110
  %291 = add i32 %290, %99
  %292 = add i32 %291, %43
  %293 = add i32 %292, %25
  %294 = add i32 %293, %238
  %295 = add i32 %294, %234
  %296 = shl i32 %295, 1
  %297 = add i32 %41, %1
  %298 = sub i32 %297, %259
  %299 = sub i32 %298, %174
  %300 = add i32 %299, %276
  %301 = sub i32 %300, %149
  %302 = mul i32 %301, 5
  %303 = sub i32 -2, %27
  %304 = add i32 %303, %249
  %305 = sub i32 %304, %167
  %306 = sub i32 %305, %38
  %307 = sub i32 %306, %226
  %308 = mul i32 %307, 3
  %309 = add i32 %0, 2
  %310 = add i32 %309, %4
  %311 = sub i32 %310, %20
  %312 = sub i32 %311, %5
  %313 = add i32 %312, %222
  %314 = sub i32 %313, %44
  %315 = sub i32 %314, %52
  %316 = add i32 %315, %53
  %317 = add i32 %316, %57
  %318 = sub i32 %317, %15
  %319 = sub i32 %318, %63
  %320 = add i32 %319, %64
  %321 = sub i32 %320, %65
  %322 = sub i32 %321, %78
  %323 = sub i32 %322, %85
  %324 = sub i32 %323, %91
  %325 = add i32 %324, %107
  %326 = sub i32 %325, %121
  %327 = add i32 %326, %123
  %328 = sub i32 %327, %154
  %329 = sub i32 %328, %163
  %330 = sub i32 %329, %164
  %331 = sub i32 %330, %166
  %332 = sub i32 %331, %179
  %333 = add i32 %332, %185
  %334 = sub i32 %333, %190
  %335 = add i32 %334, %198
  %336 = sub i32 %335, %208
  %337 = add i32 %336, %50
  %338 = add i32 %337, %7
  %339 = sub i32 %338, %216
  %340 = add i32 %339, %27
  %341 = sub i32 %340, %19
  %342 = add i32 %341, %235
  %343 = add i32 %342, %236
  %344 = sub i32 %343, %237
  %345 = sub i32 %344, %239
  %346 = add i32 %345, %109
  %347 = add i32 %346, %61
  %348 = add i32 %347, %253
  %349 = sub i32 %348, %37
  %350 = add i32 %349, %128
  %351 = sub i32 %350, %22
  %352 = sub i32 %351, %18
  %353 = add i32 %352, %28
  %354 = sub i32 %353, %33
  %355 = add i32 %354, %35
  %356 = sub i32 %355, %36
  %357 = sub i32 %356, %49
  %358 = sub i32 %357, %51
  %359 = sub i32 %358, %56
  %360 = sub i32 %359, %58
  %361 = add i32 %360, %60
  %362 = sub i32 %361, %62
  %363 = add i32 %362, %67
  %364 = sub i32 %363, %68
  %365 = sub i32 %364, %71
  %366 = sub i32 %365, %73
  %367 = sub i32 %366, %74
  %368 = add i32 %367, %79
  %369 = add i32 %368, %82
  %370 = sub i32 %369, %84
  %371 = add i32 %370, %86
  %372 = sub i32 %371, %88
  %373 = add i32 %372, %89
  %374 = add i32 %373, %90
  %375 = add i32 %374, %98
  %376 = add i32 %375, %100
  %377 = add i32 %376, %102
  %378 = sub i32 %377, %108
  %379 = add i32 %378, %111
  %380 = sub i32 %379, %112
  %381 = add i32 %380, %118
  %382 = add i32 %381, %122
  %383 = add i32 %382, %124
  %384 = add i32 %383, %129
  %385 = add i32 %384, %130
  %386 = sub i32 %385, %131
  %387 = add i32 %386, %132
  %388 = sub i32 %387, %133
  %389 = add i32 %388, %134
  %390 = sub i32 %389, %135
  %391 = sub i32 %390, %136
  %392 = add i32 %391, %140
  %393 = sub i32 %392, %141
  %394 = sub i32 %393, %142
  %395 = sub i32 %394, %143
  %396 = add i32 %395, %146
  %397 = sub i32 %396, %150
  %398 = add i32 %397, %153
  %399 = add i32 %398, %158
  %400 = add i32 %399, %165
  %401 = add i32 %400, %170
  %402 = sub i32 %401, %171
  %403 = add i32 %402, %172
  %404 = add i32 %403, %173
  %405 = add i32 %404, %175
  %406 = add i32 %405, %176
  %407 = add i32 %406, %177
  %408 = add i32 %407, %178
  %409 = sub i32 %408, %180
  %410 = sub i32 %409, %184
  %411 = sub i32 %410, %188
  %412 = add i32 %411, %191
  %413 = sub i32 %412, %114
  %414 = add i32 %413, %194
  %415 = add i32 %414, %195
  %416 = add i32 %415, %196
  %417 = add i32 %416, %197
  %418 = add i32 %417, %201
  %419 = add i32 %418, %202
  %420 = sub i32 %419, %203
  %421 = sub i32 %420, %207
  %422 = sub i32 %421, %209
  %423 = add i32 %422, %210
  %424 = sub i32 %423, %211
  %425 = sub i32 %424, %212
  %426 = sub i32 %425, %213
  %427 = add i32 %426, %214
  %428 = add i32 %427, %221
  %429 = sub i32 %428, %223
  %430 = add i32 %429, %224
  %431 = add i32 %430, %227
  %432 = add i32 %431, %228
  %433 = sub i32 %432, %229
  %434 = add i32 %433, %30
  %435 = sub i32 %434, %244
  %436 = add i32 %435, %245
  %437 = add i32 %436, %246
  %438 = sub i32 %437, %247
  %439 = add i32 %438, %248
  %440 = sub i32 %439, %250
  %441 = add i32 %440, %251
  %442 = add i32 %441, %252
  %443 = add i32 %442, %254
  %444 = sub i32 %443, %257
  %445 = sub i32 %444, %260
  %446 = sub i32 %445, %80
  %447 = add i32 %446, %261
  %448 = sub i32 %447, %263
  %449 = sub i32 %448, %264
  %450 = sub i32 %449, %31
  %451 = sub i32 %450, %40
  %452 = add i32 %451, %47
  %453 = sub i32 %452, %55
  %454 = sub i32 %453, %70
  %455 = sub i32 %454, %81
  %456 = sub i32 %455, %97
  %457 = sub i32 %456, %106
  %458 = sub i32 %457, %115
  %459 = sub i32 %458, %120
  %460 = add i32 %459, %126
  %461 = add i32 %460, %145
  %462 = sub i32 %461, %148
  %463 = add i32 %462, %152
  %464 = sub i32 %463, %160
  %465 = sub i32 %464, %162
  %466 = sub i32 %465, %169
  %467 = sub i32 %466, %181
  %468 = sub i32 %467, %183
  %469 = sub i32 %468, %193
  %470 = sub i32 %469, %200
  %471 = sub i32 %470, %205
  %472 = sub i32 %471, %218
  %473 = sub i32 %472, %219
  %474 = add i32 %473, %220
  %475 = sub i32 %474, %231
  %476 = sub i32 %475, %241
  %477 = sub i32 %476, %243
  %478 = sub i32 %477, %256
  %479 = sub i32 %478, %262
  %480 = add i32 %479, %266
  %481 = sub i32 %480, %268
  %482 = add i32 %481, %270
  %483 = sub i32 %482, %272
  %484 = sub i32 %483, %274
  %485 = add i32 %484, %275
  %486 = add i32 %485, %277
  %487 = sub i32 %486, %104
  %488 = add i32 %487, %77
  %489 = sub i32 %488, %139
  %490 = sub i32 %489, %157
  %491 = add i32 %490, %302
  %492 = add i32 %491, %308
  %493 = add i32 %492, %296
  %494 = icmp eq i32 %13, %493
  %495 = select i1 %494, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %496 = tail call i32 @puts(i8* nonnull dereferenceable(1) %495)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
