digraph "DFG for'crackme' function" {
	Node0xb3faf0[shape=record, label="  %3 = sub i32 0, %0"];
	Node0xb3fb60[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0xb3fc20[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0xb3fcc0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0xb3fd30[shape=record, label="  %7 = and i32 %1, %0"];
	Node0xb3fdd0[shape=record, label="  %8 = shl i32 %0, 2"];
	Node0xb3fe70[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0xb3fee0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0xb3ff50[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0xb3ffc0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xb40060[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0xb400d0[shape=record, label="  %14 = and i32 %13, %1"];
	Node0xb40170[shape=record, label="  %15 = mul i32 %14, 5"];
	Node0xb401e0[shape=record, label="  %16 = shl i32 %7, 2"];
	Node0xb40250[shape=record, label="  %17 = sub i32 %7, %4"];
	Node0xb402c0[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0xb40330[shape=record, label="  %19 = add i32 %18, %15"];
	Node0xb403a0[shape=record, label="  %20 = sub i32 %19, %16"];
	Node0xb40410[shape=record, label="  %21 = add i32 %20, %6"];
	Node0xb40480[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xb404f0[shape=record, label="  %23 = icmp eq i32 %22, %3"];
	Node0xae0268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb40990[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xb409e0[shape=record, label="  ret void"];
	Node0xb3faf0 -> Node0xb3fb60;
	Node0xb3fb60 -> Node0xb3fc20;
	Node0xb3fc20 -> Node0xb3fcc0;
	Node0xb3fcc0 -> Node0xb3fd30;
	Node0xb3fd30 -> Node0xb3fdd0;
	Node0xb3fdd0 -> Node0xb3fe70;
	Node0xb3fe70 -> Node0xb3fee0;
	Node0xb3fee0 -> Node0xb3ff50;
	Node0xb3ff50 -> Node0xb3ffc0;
	Node0xb3ffc0 -> Node0xb40060;
	Node0xb40060 -> Node0xb400d0;
	Node0xb400d0 -> Node0xb40170;
	Node0xb40170 -> Node0xb401e0;
	Node0xb401e0 -> Node0xb40250;
	Node0xb40250 -> Node0xb402c0;
	Node0xb402c0 -> Node0xb40330;
	Node0xb40330 -> Node0xb403a0;
	Node0xb403a0 -> Node0xb40410;
	Node0xb40410 -> Node0xb40480;
	Node0xb40480 -> Node0xb404f0;
	Node0xb404f0 -> Node0xae0268;
	Node0xae0268 -> Node0xb40990;
	Node0xb40990 -> Node0xb409e0;
edge [color=red]
	Node0xb3fb60 -> Node0xb3fc20;
	Node0xb3fc20 -> Node0xb3fcc0;
	Node0xb3fdd0 -> Node0xb3fe70;
	Node0xb3fee0 -> Node0xb3ff50;
	Node0xb3ff50 -> Node0xb3ffc0;
	Node0xb40060 -> Node0xb400d0;
	Node0xb400d0 -> Node0xb40170;
	Node0xb3fd30 -> Node0xb401e0;
	Node0xb3fd30 -> Node0xb40250;
	Node0xb3fb60 -> Node0xb40250;
	Node0xb40250 -> Node0xb402c0;
	Node0xb3fe70 -> Node0xb402c0;
	Node0xb402c0 -> Node0xb40330;
	Node0xb40170 -> Node0xb40330;
	Node0xb40330 -> Node0xb403a0;
	Node0xb401e0 -> Node0xb403a0;
	Node0xb403a0 -> Node0xb40410;
	Node0xb3fcc0 -> Node0xb40410;
	Node0xb40410 -> Node0xb40480;
	Node0xb3ffc0 -> Node0xb40480;
	Node0xb40480 -> Node0xb404f0;
	Node0xb3faf0 -> Node0xb404f0;
	Node0xb404f0 -> Node0xae0268;
	Node0xae0268 -> Node0xb40990;
}
