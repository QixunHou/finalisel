; ModuleID = '../.././c_source_file/0228_path_condition_crackme.c'
source_filename = "../.././c_source_file/0228_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %1
  %9 = or i32 %8, %0
  %10 = xor i32 %1, -1
  %11 = and i32 %7, %0
  %12 = or i32 %11, %10
  %13 = shl i32 %12, 1
  %14 = sub i32 %13, %9
  %15 = xor i32 %5, %4
  %16 = or i32 %15, %3
  %17 = add i32 %14, %16
  %18 = or i32 %2, %1
  %19 = xor i32 %18, %0
  %20 = and i32 %2, %0
  %21 = and i32 %7, %1
  %22 = or i32 %20, %21
  %23 = xor i32 %20, -1
  %24 = and i32 %23, %10
  %25 = shl i32 %24, 1
  %26 = and i32 %1, %0
  %27 = or i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %26, %28
  %30 = xor i32 %2, %1
  %31 = or i32 %30, %26
  %32 = xor i32 %1, %0
  %33 = and i32 %32, %23
  %34 = or i32 %7, %0
  %35 = xor i32 %32, -1
  %36 = and i32 %34, %35
  %37 = xor i32 %34, -1
  %38 = or i32 %37, %10
  %39 = and i32 %27, %1
  %40 = shl i32 %39, 1
  %41 = or i32 %10, %0
  %42 = and i32 %41, %7
  %43 = shl i32 %32, 1
  %44 = and i32 %2, %1
  %45 = and i32 %44, %0
  %46 = xor i32 %0, -1
  %47 = and i32 %30, %46
  %48 = xor i32 %47, -1
  %49 = xor i32 %45, %48
  %50 = and i32 %10, %2
  %51 = and i32 %50, %0
  %52 = xor i32 %30, %0
  %53 = or i32 %51, %52
  %54 = or i32 %21, %46
  %55 = xor i32 %41, -1
  %56 = xor i32 %2, %0
  %57 = or i32 %56, %55
  %58 = or i32 %30, %46
  %59 = xor i32 %45, %52
  %60 = or i32 %10, %2
  %61 = and i32 %60, %46
  %62 = or i32 %51, %61
  %63 = or i32 %56, %10
  %64 = and i32 %34, %10
  %65 = or i32 %1, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %66, %2
  %68 = and i32 %30, %65
  %69 = xor i32 %18, %26
  %70 = xor i32 %26, -1
  %71 = and i32 %70, %2
  %72 = and i32 %27, %32
  %73 = and i32 %56, %35
  %74 = xor i32 %37, %1
  %75 = or i32 %11, %32
  %76 = or i32 %32, %2
  %77 = xor i32 %56, -1
  %78 = or i32 %77, %35
  %79 = and i32 %10, %0
  %80 = and i32 %18, %46
  %81 = shl i32 %80, 1
  %82 = xor i32 %11, -1
  %83 = and i32 %82, %1
  %84 = and i32 %50, %46
  %85 = xor i32 %84, %58
  %86 = xor i32 %20, %1
  %87 = shl i32 %86, 1
  %88 = xor i32 %21, -1
  %89 = add i32 %21, 1
  %90 = xor i32 %79, -1
  %91 = and i32 %7, %90
  %92 = shl i32 %91, 1
  %93 = or i32 %45, %47
  %94 = xor i32 %8, %26
  %95 = and i32 %82, %35
  %96 = and i32 %56, %32
  %97 = xor i32 %20, %88
  %98 = xor i32 %60, %0
  %99 = or i32 %51, %98
  %100 = or i32 %30, %66
  %101 = or i32 %44, %0
  %102 = shl i32 %101, 1
  %103 = and i32 %77, %70
  %104 = shl i32 %103, 1
  %105 = and i32 %8, %0
  %106 = and i32 %60, %0
  %107 = or i32 %84, %106
  %108 = xor i32 %11, %1
  %109 = xor i32 %88, %0
  %110 = xor i32 %51, -1
  %111 = xor i32 %61, %110
  %112 = or i32 %88, %46
  %113 = xor i32 %30, -1
  %114 = and i32 %65, %113
  %115 = shl i32 %114, 1
  %116 = and i32 %65, %77
  %117 = and i32 %30, %0
  %118 = shl i32 %117, 1
  %119 = or i32 %56, %1
  %120 = or i32 %113, %66
  %121 = and i32 %8, %46
  %122 = xor i32 %82, %1
  %123 = or i32 %30, %79
  %124 = and i32 %90, %2
  %125 = xor i32 %52, %110
  %126 = or i32 %28, %35
  %127 = or i32 %55, %2
  %128 = or i32 %79, %77
  %129 = and i32 %56, %70
  %130 = or i32 %18, %46
  %131 = or i32 %45, %19
  %132 = add i32 %32, 1
  %133 = xor i32 %34, %1
  %134 = xor i32 %58, -1
  %135 = or i32 %84, %134
  %136 = xor i32 %18, -1
  %137 = or i32 %136, %0
  %138 = and i32 %136, %46
  %139 = mul i32 %138, -10
  %140 = and i32 %136, %0
  %141 = and i32 %21, %0
  %142 = xor i32 %8, -1
  %143 = and i32 %142, %46
  %144 = mul i32 %143, -6
  %145 = and i32 %44, %46
  %146 = mul i32 %145, -12
  %147 = and i32 %142, %0
  %148 = xor i32 %4, %3
  %149 = xor i32 %148, -1
  %150 = xor i32 %15, -1
  %151 = and i32 %150, %149
  %152 = xor i32 %5, -1
  %153 = or i32 %152, %3
  %154 = or i32 %153, %4
  %155 = shl i32 %154, 2
  %156 = xor i32 %3, -1
  %157 = or i32 %5, %4
  %158 = and i32 %157, %156
  %159 = xor i32 %4, -1
  %160 = shl i32 %159, 1
  %161 = and i32 %152, %3
  %162 = xor i32 %161, -1
  %163 = or i32 %162, %4
  %164 = and i32 %5, %3
  %165 = and i32 %164, %159
  %166 = xor i32 %5, %3
  %167 = and i32 %166, %4
  %168 = xor i32 %165, -1
  %169 = xor i32 %167, %168
  %170 = xor i32 %166, -1
  %171 = or i32 %5, %3
  %172 = xor i32 %171, -1
  %173 = or i32 %172, %159
  %174 = and i32 %148, %152
  %175 = and i32 %150, %3
  %176 = xor i32 %164, -1
  %177 = and i32 %176, %4
  %178 = and i32 %5, %4
  %179 = or i32 %156, %4
  %180 = and i32 %15, %179
  %181 = and i32 %152, %4
  %182 = or i32 %181, %156
  %183 = xor i32 %178, -1
  %184 = and i32 %148, %183
  %185 = or i32 %178, %3
  %186 = and i32 %156, %4
  %187 = or i32 %186, %150
  %188 = and i32 %156, %5
  %189 = and i32 %188, %4
  %190 = or i32 %156, %5
  %191 = and i32 %190, %159
  %192 = or i32 %189, %191
  %193 = or i32 %152, %4
  %194 = and i32 %193, %148
  %195 = xor i32 %181, -1
  %196 = and i32 %195, %3
  %197 = add i32 %15, 1
  %198 = or i32 %178, %148
  %199 = or i32 %150, %149
  %200 = shl i32 %199, 1
  %201 = and i32 %4, %3
  %202 = xor i32 %201, -1
  %203 = and i32 %150, %202
  %204 = and i32 %188, %159
  %205 = and i32 %190, %4
  %206 = or i32 %204, %205
  %207 = shl i32 %206, 1
  %208 = or i32 %152, %149
  %209 = and i32 %148, %195
  %210 = or i32 %186, %170
  %211 = or i32 %201, %152
  %212 = and i32 %164, %4
  %213 = xor i32 %166, %4
  %214 = xor i32 %213, %212
  %215 = xor i32 %186, -1
  %216 = and i32 %215, %5
  %217 = and i32 %153, %4
  %218 = shl i32 %217, 1
  %219 = xor i32 %178, %179
  %220 = xor i32 %162, %4
  %221 = or i32 %15, %186
  %222 = xor i32 %170, %4
  %223 = or i32 %166, %186
  %224 = and i32 %166, %179
  %225 = or i32 %4, %3
  %226 = xor i32 %178, %225
  %227 = or i32 %181, %149
  %228 = and i32 %183, %3
  %229 = and i32 %153, %159
  %230 = xor i32 %193, -1
  %231 = or i32 %201, %230
  %232 = or i32 %172, %4
  %233 = add i32 %5, 1
  %234 = xor i32 %179, -1
  %235 = or i32 %178, %234
  %236 = xor i32 %225, -1
  %237 = or i32 %236, %5
  %238 = and i32 %150, %156
  %239 = and i32 %171, %4
  %240 = xor i32 %239, %168
  %241 = xor i32 %171, %4
  %242 = xor i32 %195, %3
  %243 = or i32 %148, %5
  %244 = shl i32 %243, 1
  %245 = and i32 %172, %159
  %246 = and i32 %161, %159
  %247 = and i32 %172, %4
  %248 = and i32 %161, %4
  %249 = xor i32 %153, -1
  %250 = and i32 %249, %159
  %251 = shl i32 %250, 3
  %252 = shl i32 %165, 1
  %253 = and i32 %249, %4
  %254 = add i32 %54, %140
  %255 = add i32 %254, %149
  %256 = add i32 %255, %224
  %257 = add i32 %256, %247
  %258 = mul i32 %257, 5
  %259 = add i32 %62, %75
  %260 = add i32 %259, %235
  %261 = mul i32 %260, 3
  %262 = add i32 %246, %59
  %263 = shl i32 %262, 2
  %264 = add i32 %45, %147
  %265 = mul i32 %264, 7
  %266 = add i32 %44, %124
  %267 = add i32 %266, %141
  %268 = add i32 %267, %133
  %269 = add i32 %268, %130
  %270 = add i32 %269, %126
  %271 = add i32 %270, %72
  %272 = add i32 %271, %174
  %273 = add i32 %272, %170
  %274 = add i32 %273, %196
  %275 = add i32 %274, %253
  %276 = add i32 %275, %180
  %277 = add i32 %276, %158
  %278 = shl i32 %277, 1
  %279 = add i32 %1, 2
  %280 = sub i32 %279, %79
  %281 = add i32 %280, %26
  %282 = add i32 %281, %132
  %283 = sub i32 %282, %27
  %284 = add i32 %283, %18
  %285 = add i32 %284, %42
  %286 = sub i32 %285, %43
  %287 = add i32 %286, %67
  %288 = sub i32 %287, %71
  %289 = sub i32 %288, %76
  %290 = add i32 %289, %89
  %291 = add i32 %290, %82
  %292 = sub i32 %291, %127
  %293 = sub i32 %292, %22
  %294 = sub i32 %293, %19
  %295 = sub i32 %294, %29
  %296 = sub i32 %295, %31
  %297 = add i32 %296, %33
  %298 = add i32 %297, %36
  %299 = add i32 %298, %38
  %300 = sub i32 %299, %57
  %301 = add i32 %300, %58
  %302 = add i32 %301, %63
  %303 = sub i32 %302, %64
  %304 = sub i32 %303, %68
  %305 = add i32 %304, %69
  %306 = sub i32 %305, %73
  %307 = sub i32 %306, %74
  %308 = add i32 %307, %78
  %309 = sub i32 %308, %83
  %310 = sub i32 %309, %92
  %311 = add i32 %310, %94
  %312 = add i32 %311, %95
  %313 = add i32 %312, %96
  %314 = add i32 %313, %97
  %315 = sub i32 %314, %100
  %316 = sub i32 %315, %105
  %317 = add i32 %316, %108
  %318 = add i32 %317, %109
  %319 = sub i32 %318, %112
  %320 = sub i32 %319, %116
  %321 = add i32 %320, %119
  %322 = add i32 %321, %120
  %323 = sub i32 %322, %121
  %324 = add i32 %323, %122
  %325 = add i32 %324, %123
  %326 = sub i32 %325, %128
  %327 = sub i32 %326, %129
  %328 = sub i32 %327, %137
  %329 = sub i32 %328, %25
  %330 = sub i32 %329, %40
  %331 = sub i32 %330, %49
  %332 = add i32 %331, %53
  %333 = sub i32 %332, %81
  %334 = add i32 %333, %85
  %335 = sub i32 %334, %87
  %336 = sub i32 %335, %93
  %337 = sub i32 %336, %99
  %338 = sub i32 %337, %102
  %339 = sub i32 %338, %104
  %340 = sub i32 %339, %107
  %341 = sub i32 %340, %111
  %342 = sub i32 %341, %115
  %343 = sub i32 %342, %118
  %344 = add i32 %343, %125
  %345 = sub i32 %344, %131
  %346 = sub i32 %345, %135
  %347 = add i32 %346, %139
  %348 = add i32 %347, %144
  %349 = add i32 %348, %146
  %350 = sub i32 %349, %160
  %351 = add i32 %350, %233
  %352 = sub i32 %351, %178
  %353 = add i32 %352, %197
  %354 = add i32 %353, %166
  %355 = sub i32 %354, %208
  %356 = add i32 %355, %211
  %357 = add i32 %356, %216
  %358 = sub i32 %357, %15
  %359 = add i32 %358, %162
  %360 = add i32 %359, %237
  %361 = add i32 %360, %265
  %362 = sub i32 %361, %151
  %363 = sub i32 %362, %163
  %364 = add i32 %363, %173
  %365 = sub i32 %364, %175
  %366 = sub i32 %365, %177
  %367 = sub i32 %366, %182
  %368 = add i32 %367, %184
  %369 = sub i32 %368, %185
  %370 = add i32 %369, %187
  %371 = sub i32 %370, %194
  %372 = add i32 %371, %198
  %373 = add i32 %372, %203
  %374 = add i32 %373, %209
  %375 = add i32 %374, %210
  %376 = sub i32 %375, %219
  %377 = add i32 %376, %220
  %378 = add i32 %377, %221
  %379 = sub i32 %378, %222
  %380 = sub i32 %379, %223
  %381 = sub i32 %380, %226
  %382 = add i32 %381, %227
  %383 = add i32 %382, %228
  %384 = sub i32 %383, %229
  %385 = add i32 %384, %231
  %386 = sub i32 %385, %232
  %387 = sub i32 %386, %238
  %388 = sub i32 %387, %241
  %389 = add i32 %388, %242
  %390 = sub i32 %389, %244
  %391 = add i32 %390, %245
  %392 = add i32 %391, %248
  %393 = sub i32 %392, %212
  %394 = sub i32 %393, %155
  %395 = add i32 %394, %169
  %396 = sub i32 %395, %192
  %397 = sub i32 %396, %200
  %398 = sub i32 %397, %214
  %399 = sub i32 %398, %218
  %400 = add i32 %399, %240
  %401 = sub i32 %400, %251
  %402 = sub i32 %401, %252
  %403 = sub i32 %402, %207
  %404 = add i32 %403, %263
  %405 = add i32 %404, %261
  %406 = add i32 %405, %258
  %407 = add i32 %406, %278
  %408 = icmp eq i32 %17, %407
  %409 = select i1 %408, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %410 = tail call i32 @puts(i8* nonnull dereferenceable(1) %409)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
