; ModuleID = '../.././c_source_file/1862_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1862_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = or i32 %1, %0
  %8 = xor i32 %2, %0
  %9 = and i32 %8, %7
  %10 = add i32 %6, %9
  %11 = xor i32 %4, -1
  %12 = and i32 %11, %3
  %13 = xor i32 %12, -1
  %14 = xor i32 %3, -1
  %15 = or i32 %4, %3
  %16 = shl i32 %15, 1
  %17 = add i32 %4, 1
  %18 = xor i32 %16, -2
  %19 = and i32 %14, %4
  %20 = and i32 %4, %3
  %21 = xor i32 %2, %1
  %22 = xor i32 %21, -1
  %23 = and i32 %7, %22
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %0
  %26 = or i32 %21, %25
  %27 = and i32 %1, %0
  %28 = or i32 %8, %27
  %29 = xor i32 %27, -1
  %30 = xor i32 %25, -1
  %31 = xor i32 %30, %2
  %32 = xor i32 %2, -1
  %33 = xor i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %32, %34
  %36 = and i32 %32, %0
  %37 = xor i32 %36, %1
  %38 = xor i32 %8, -1
  %39 = and i32 %38, %30
  %40 = and i32 %2, %1
  %41 = and i32 %40, %0
  %42 = xor i32 %0, -1
  %43 = or i32 %2, %1
  %44 = and i32 %43, %42
  %45 = xor i32 %44, -1
  %46 = xor i32 %41, %45
  %47 = and i32 %21, %30
  %48 = and i32 %40, %42
  %49 = and i32 %43, %0
  %50 = or i32 %48, %49
  %51 = xor i32 %36, -1
  %52 = and i32 %51, %1
  %53 = xor i32 %43, %0
  %54 = xor i32 %53, 2147483647
  %55 = xor i32 %54, %41
  %56 = shl i32 %55, 1
  %57 = or i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %27, %58
  %60 = and i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = and i32 %33, %61
  %63 = or i32 %8, %25
  %64 = add i32 %60, 1
  %65 = or i32 %24, %0
  %66 = or i32 %41, %44
  %67 = and i32 %34, %2
  %68 = and i32 %38, %1
  %69 = and i32 %32, %1
  %70 = or i32 %69, %42
  %71 = and i32 %57, %33
  %72 = or i32 %25, %2
  %73 = or i32 %25, %22
  %74 = xor i32 %61, %1
  %75 = xor i32 %65, -1
  %76 = or i32 %32, %75
  %77 = xor i32 %40, -1
  %78 = add i32 %40, 1
  %79 = or i32 %32, %0
  %80 = xor i32 %79, %27
  %81 = and i32 %24, %2
  %82 = and i32 %81, %0
  %83 = or i32 %21, %0
  %84 = xor i32 %83, -1
  %85 = or i32 %82, %84
  %86 = xor i32 %57, %27
  %87 = xor i32 %82, %83
  %88 = and i32 %61, %34
  %89 = xor i32 %60, %7
  %90 = and i32 %8, %24
  %91 = or i32 %24, %2
  %92 = and i32 %91, %42
  %93 = or i32 %82, %92
  %94 = or i32 %32, %1
  %95 = xor i32 %94, -1
  %96 = xor i32 %79, -1
  %97 = or i32 %27, %96
  %98 = or i32 %25, %38
  %99 = shl i32 %98, 1
  %100 = and i32 %21, %0
  %101 = xor i32 %100, -1
  %102 = xor i32 %48, %101
  %103 = xor i32 %7, -1
  %104 = or i32 %8, %103
  %105 = shl i32 %104, 1
  %106 = or i32 %27, %38
  %107 = or i32 %43, %42
  %108 = xor i32 %69, -1
  %109 = xor i32 %60, %108
  %110 = or i32 %60, %69
  %111 = or i32 %36, %40
  %112 = add i32 %69, 1
  %113 = xor i32 %21, %0
  %114 = or i32 %82, %113
  %115 = xor i32 %108, %0
  %116 = or i32 %96, %1
  %117 = and i32 %81, %42
  %118 = and i32 %22, %0
  %119 = or i32 %117, %118
  %120 = xor i32 %25, %77
  %121 = and i32 %108, %42
  %122 = and i32 %8, %29
  %123 = or i32 %38, %75
  %124 = xor i32 %69, %0
  %125 = or i32 %27, %32
  %126 = or i32 %77, %42
  %127 = add i32 %25, 1
  %128 = xor i32 %94, %0
  %129 = and i32 %33, %38
  %130 = or i32 %8, %75
  %131 = and i32 %29, %2
  %132 = and i32 %79, %34
  %133 = and i32 %94, %42
  %134 = and i32 %38, %29
  %135 = xor i32 %60, %1
  %136 = or i32 %21, %103
  %137 = xor i32 %43, %27
  %138 = or i32 %60, %1
  %139 = and i32 %22, %29
  %140 = shl i32 %25, 1
  %141 = or i32 %27, %2
  %142 = or i32 %40, %42
  %143 = and i32 %22, %30
  %144 = shl i32 %113, 1
  %145 = and i32 %94, %0
  %146 = or i32 %36, %1
  %147 = shl i32 %146, 1
  %148 = xor i32 %92, -1
  %149 = xor i32 %82, %148
  %150 = or i32 %38, %24
  %151 = or i32 %8, %24
  %152 = shl i32 %151, 1
  %153 = or i32 %32, %34
  %154 = or i32 %36, %33
  %155 = shl i32 %7, 1
  %156 = shl i32 %75, 1
  %157 = or i32 %21, %75
  %158 = and i32 %65, %38
  %159 = add i32 %33, 1
  %160 = and i32 %30, %2
  %161 = or i32 %77, %0
  %162 = shl i32 %161, 1
  %163 = or i32 %95, %42
  %164 = or i32 %33, %58
  %165 = shl i32 %164, 1
  %166 = or i32 %41, %53
  %167 = or i32 %60, %75
  %168 = and i32 %8, %34
  %169 = or i32 %22, %0
  %170 = xor i32 %36, %94
  %171 = or i32 %94, %42
  %172 = xor i32 %40, %0
  %173 = or i32 %8, %33
  %174 = xor i32 %91, %0
  %175 = or i32 %82, %174
  %176 = and i32 %21, %65
  %177 = xor i32 %7, %2
  %178 = or i32 %22, %103
  %179 = and i32 %21, %29
  %180 = and i32 %57, %1
  %181 = and i32 %108, %0
  %182 = and i32 %91, %0
  %183 = or i32 %117, %182
  %184 = and i32 %33, %2
  %185 = and i32 %65, %2
  %186 = and i32 %51, %24
  %187 = or i32 %38, %103
  %188 = and i32 %57, %24
  %189 = or i32 %69, %0
  %190 = xor i32 %25, %108
  %191 = xor i32 %60, %65
  %192 = xor i32 %113, -1
  %193 = xor i32 %82, %192
  %194 = or i32 %41, %192
  %195 = or i32 %22, %42
  %196 = xor i32 %43, -1
  %197 = or i32 %27, %196
  %198 = and i32 %8, %1
  %199 = or i32 %36, %95
  %200 = or i32 %36, %34
  %201 = and i32 %22, %42
  %202 = or i32 %21, %27
  %203 = and i32 %33, %32
  %204 = xor i32 %58, %1
  %205 = xor i32 %174, 2147483647
  %206 = xor i32 %205, %82
  %207 = or i32 %60, %24
  %208 = or i32 %40, %0
  %209 = and i32 %61, %1
  %210 = or i32 %33, %38
  %211 = or i32 %8, %34
  %212 = or i32 %33, %2
  %213 = or i32 %103, %2
  %214 = and i32 %196, %42
  %215 = mul i32 %214, 6
  %216 = and i32 %69, %42
  %217 = mul i32 %216, 13
  %218 = and i32 %196, %0
  %219 = shl i32 %218, 2
  %220 = and i32 %69, %0
  %221 = and i32 %95, %42
  %222 = mul i32 %221, -10
  %223 = shl i32 %48, 3
  %224 = and i32 %95, %0
  %225 = add i32 %212, %33
  %226 = add i32 %225, %185
  %227 = add i32 %226, %160
  %228 = add i32 %227, %200
  %229 = add i32 %228, %199
  %230 = add i32 %229, %197
  %231 = add i32 %230, %189
  %232 = add i32 %231, %188
  %233 = add i32 %232, %179
  %234 = add i32 %233, %176
  %235 = add i32 %234, %171
  %236 = add i32 %235, %143
  %237 = add i32 %236, %106
  %238 = add i32 %237, %74
  %239 = add i32 %238, %194
  %240 = add i32 %239, %206
  %241 = shl i32 %240, 1
  %242 = add i32 %79, %141
  %243 = add i32 %242, %224
  %244 = sub i32 %121, %243
  %245 = sub i32 %244, %88
  %246 = add i32 %245, %13
  %247 = mul i32 %246, 3
  %248 = add i32 %12, %172
  %249 = mul i32 %248, 5
  %250 = sub i32 %1, %27
  %251 = add i32 %250, %65
  %252 = add i32 %251, %127
  %253 = add i32 %252, %103
  %254 = add i32 %253, %159
  %255 = sub i32 %254, %27
  %256 = sub i32 %255, %3
  %257 = add i32 %256, %14
  %258 = sub i32 %257, %31
  %259 = add i32 %258, %35
  %260 = add i32 %259, %64
  %261 = add i32 %260, %67
  %262 = sub i32 %261, %72
  %263 = sub i32 %262, %76
  %264 = add i32 %263, %78
  %265 = add i32 %264, %38
  %266 = add i32 %265, %95
  %267 = add i32 %266, %112
  %268 = add i32 %267, %125
  %269 = sub i32 %268, %131
  %270 = sub i32 %269, %140
  %271 = sub i32 %270, %153
  %272 = sub i32 %271, %155
  %273 = sub i32 %272, %156
  %274 = add i32 %273, %177
  %275 = sub i32 %274, %184
  %276 = add i32 %275, %40
  %277 = sub i32 %276, %203
  %278 = add i32 %277, %213
  %279 = add i32 %278, %17
  %280 = sub i32 %279, %23
  %281 = sub i32 %280, %26
  %282 = add i32 %281, %28
  %283 = sub i32 %282, %37
  %284 = add i32 %283, %39
  %285 = add i32 %284, %47
  %286 = sub i32 %285, %52
  %287 = sub i32 %286, %59
  %288 = add i32 %287, %62
  %289 = add i32 %288, %63
  %290 = sub i32 %289, %68
  %291 = add i32 %290, %70
  %292 = sub i32 %291, %71
  %293 = add i32 %292, %73
  %294 = add i32 %293, %80
  %295 = add i32 %294, %86
  %296 = add i32 %295, %89
  %297 = add i32 %296, %90
  %298 = add i32 %297, %97
  %299 = add i32 %298, %107
  %300 = sub i32 %299, %109
  %301 = sub i32 %300, %110
  %302 = add i32 %301, %111
  %303 = add i32 %302, %115
  %304 = sub i32 %303, %116
  %305 = sub i32 %304, %120
  %306 = add i32 %305, %122
  %307 = sub i32 %306, %123
  %308 = sub i32 %307, %124
  %309 = sub i32 %308, %126
  %310 = sub i32 %309, %128
  %311 = add i32 %310, %129
  %312 = sub i32 %311, %130
  %313 = sub i32 %312, %132
  %314 = add i32 %313, %133
  %315 = sub i32 %314, %134
  %316 = sub i32 %315, %135
  %317 = add i32 %316, %136
  %318 = add i32 %317, %137
  %319 = add i32 %318, %138
  %320 = add i32 %319, %139
  %321 = sub i32 %320, %142
  %322 = sub i32 %321, %145
  %323 = sub i32 %322, %150
  %324 = sub i32 %323, %154
  %325 = add i32 %324, %157
  %326 = sub i32 %325, %158
  %327 = add i32 %326, %163
  %328 = add i32 %327, %167
  %329 = add i32 %328, %168
  %330 = sub i32 %329, %49
  %331 = add i32 %330, %169
  %332 = sub i32 %331, %170
  %333 = add i32 %332, %173
  %334 = add i32 %333, %178
  %335 = add i32 %334, %180
  %336 = add i32 %335, %181
  %337 = sub i32 %336, %186
  %338 = sub i32 %337, %187
  %339 = sub i32 %338, %190
  %340 = sub i32 %339, %191
  %341 = sub i32 %340, %195
  %342 = sub i32 %341, %198
  %343 = add i32 %342, %201
  %344 = sub i32 %343, %202
  %345 = sub i32 %344, %204
  %346 = sub i32 %345, %207
  %347 = add i32 %346, %208
  %348 = sub i32 %347, %209
  %349 = sub i32 %348, %210
  %350 = add i32 %349, %211
  %351 = sub i32 %350, %220
  %352 = add i32 %351, %41
  %353 = add i32 %352, %6
  %354 = sub i32 %353, %19
  %355 = add i32 %354, %20
  %356 = add i32 %355, %46
  %357 = sub i32 %356, %50
  %358 = sub i32 %357, %66
  %359 = add i32 %358, %85
  %360 = add i32 %359, %87
  %361 = sub i32 %360, %93
  %362 = sub i32 %361, %99
  %363 = sub i32 %362, %102
  %364 = sub i32 %363, %105
  %365 = sub i32 %364, %114
  %366 = sub i32 %365, %119
  %367 = sub i32 %366, %144
  %368 = sub i32 %367, %147
  %369 = add i32 %368, %149
  %370 = sub i32 %369, %152
  %371 = sub i32 %370, %162
  %372 = sub i32 %371, %165
  %373 = add i32 %372, %166
  %374 = add i32 %373, %175
  %375 = add i32 %374, %183
  %376 = add i32 %375, %193
  %377 = add i32 %376, %215
  %378 = add i32 %377, %217
  %379 = sub i32 %378, %219
  %380 = add i32 %379, %222
  %381 = sub i32 %380, %223
  %382 = sub i32 %381, %16
  %383 = sub i32 %382, %18
  %384 = sub i32 %383, %56
  %385 = add i32 %384, %249
  %386 = add i32 %385, %247
  %387 = add i32 %386, %241
  %388 = icmp eq i32 %10, %387
  %389 = select i1 %388, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %390 = tail call i32 @puts(i8* nonnull dereferenceable(1) %389)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
