digraph "DFG for'crackme' function" {
	Node0x5190c0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x519160[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0x5191d0[shape=record, label="  %7 = or i32 %6, 1"];
	Node0x519240[shape=record, label="  %8 = add i32 %7, %2"];
	Node0x5192b0[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0x519320[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x5193c0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x519430[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x5194a0[shape=record, label="  %13 = and i32 %5, %1"];
	Node0x519510[shape=record, label="  %14 = or i32 %5, %1"];
	Node0x519580[shape=record, label="  %15 = xor i32 %12, -1"];
	Node0x519620[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x519690[shape=record, label="  %17 = shl i32 %13, 1"];
	Node0x519700[shape=record, label="  %18 = and i32 %2, %1"];
	Node0x519770[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x5197e0[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x519850[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x5198c0[shape=record, label="  %22 = or i32 %20, %3"];
	Node0x519930[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x5199a0[shape=record, label="  %24 = and i32 %20, %3"];
	Node0x519a10[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x519a80[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x519af0[shape=record, label="  %27 = add i32 %26, %20"];
	Node0x519b60[shape=record, label="  %28 = add i32 %27, %21"];
	Node0x519bd0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x519c70[shape=record, label="  %30 = sub i32 2, %1"];
	Node0x519ce0[shape=record, label="  %31 = add i32 %30, %12"];
	Node0x519d50[shape=record, label="  %32 = add i32 %31, %13"];
	Node0x519fd0[shape=record, label="  %33 = add i32 %32, %14"];
	Node0x51a040[shape=record, label="  %34 = add i32 %33, %16"];
	Node0x51a0b0[shape=record, label="  %35 = sub i32 %34, %17"];
	Node0x51a120[shape=record, label="  %36 = sub i32 %35, %19"];
	Node0x51a190[shape=record, label="  %37 = sub i32 %36, %22"];
	Node0x51a200[shape=record, label="  %38 = add i32 %37, %23"];
	Node0x51a270[shape=record, label="  %39 = add i32 %38, %11"];
	Node0x51a2e0[shape=record, label="  %40 = sub i32 %39, %25"];
	Node0x51a350[shape=record, label="  %41 = add i32 %40, %29"];
	Node0x51a3c0[shape=record, label="  %42 = icmp eq i32 %8, %41"];
	Node0x4b9268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x51a860[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x51a8b0[shape=record, label="  ret void"];
	Node0x5190c0 -> Node0x519160;
	Node0x519160 -> Node0x5191d0;
	Node0x5191d0 -> Node0x519240;
	Node0x519240 -> Node0x5192b0;
	Node0x5192b0 -> Node0x519320;
	Node0x519320 -> Node0x5193c0;
	Node0x5193c0 -> Node0x519430;
	Node0x519430 -> Node0x5194a0;
	Node0x5194a0 -> Node0x519510;
	Node0x519510 -> Node0x519580;
	Node0x519580 -> Node0x519620;
	Node0x519620 -> Node0x519690;
	Node0x519690 -> Node0x519700;
	Node0x519700 -> Node0x519770;
	Node0x519770 -> Node0x5197e0;
	Node0x5197e0 -> Node0x519850;
	Node0x519850 -> Node0x5198c0;
	Node0x5198c0 -> Node0x519930;
	Node0x519930 -> Node0x5199a0;
	Node0x5199a0 -> Node0x519a10;
	Node0x519a10 -> Node0x519a80;
	Node0x519a80 -> Node0x519af0;
	Node0x519af0 -> Node0x519b60;
	Node0x519b60 -> Node0x519bd0;
	Node0x519bd0 -> Node0x519c70;
	Node0x519c70 -> Node0x519ce0;
	Node0x519ce0 -> Node0x519d50;
	Node0x519d50 -> Node0x519fd0;
	Node0x519fd0 -> Node0x51a040;
	Node0x51a040 -> Node0x51a0b0;
	Node0x51a0b0 -> Node0x51a120;
	Node0x51a120 -> Node0x51a190;
	Node0x51a190 -> Node0x51a200;
	Node0x51a200 -> Node0x51a270;
	Node0x51a270 -> Node0x51a2e0;
	Node0x51a2e0 -> Node0x51a350;
	Node0x51a350 -> Node0x51a3c0;
	Node0x51a3c0 -> Node0x4b9268;
	Node0x4b9268 -> Node0x51a860;
	Node0x51a860 -> Node0x51a8b0;
edge [color=red]
	Node0x519160 -> Node0x5191d0;
	Node0x5191d0 -> Node0x519240;
	Node0x5192b0 -> Node0x519320;
	Node0x519320 -> Node0x5193c0;
	Node0x5190c0 -> Node0x5194a0;
	Node0x5190c0 -> Node0x519510;
	Node0x519430 -> Node0x519580;
	Node0x519580 -> Node0x519620;
	Node0x5194a0 -> Node0x519690;
	Node0x519700 -> Node0x519770;
	Node0x5197e0 -> Node0x5198c0;
	Node0x5198c0 -> Node0x519930;
	Node0x5197e0 -> Node0x5199a0;
	Node0x5199a0 -> Node0x519a10;
	Node0x519a80 -> Node0x519af0;
	Node0x5197e0 -> Node0x519af0;
	Node0x519af0 -> Node0x519b60;
	Node0x519850 -> Node0x519b60;
	Node0x519b60 -> Node0x519bd0;
	Node0x519c70 -> Node0x519ce0;
	Node0x519430 -> Node0x519ce0;
	Node0x519ce0 -> Node0x519d50;
	Node0x5194a0 -> Node0x519d50;
	Node0x519d50 -> Node0x519fd0;
	Node0x519510 -> Node0x519fd0;
	Node0x519fd0 -> Node0x51a040;
	Node0x519620 -> Node0x51a040;
	Node0x51a040 -> Node0x51a0b0;
	Node0x519690 -> Node0x51a0b0;
	Node0x51a0b0 -> Node0x51a120;
	Node0x519770 -> Node0x51a120;
	Node0x51a120 -> Node0x51a190;
	Node0x5198c0 -> Node0x51a190;
	Node0x51a190 -> Node0x51a200;
	Node0x519930 -> Node0x51a200;
	Node0x51a200 -> Node0x51a270;
	Node0x5193c0 -> Node0x51a270;
	Node0x51a270 -> Node0x51a2e0;
	Node0x519a10 -> Node0x51a2e0;
	Node0x51a2e0 -> Node0x51a350;
	Node0x519bd0 -> Node0x51a350;
	Node0x519240 -> Node0x51a3c0;
	Node0x51a350 -> Node0x51a3c0;
	Node0x51a3c0 -> Node0x4b9268;
	Node0x4b9268 -> Node0x51a860;
}
