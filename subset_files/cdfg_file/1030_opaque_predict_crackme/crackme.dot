digraph "DFG for'crackme' function" {
	Node0xcf9bb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xcf9c20[shape=record, label="  %4 = and i32 %3, %0"];
	Node0xcf9ce0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0xcf9d50[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xcf9dc0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xcf9e30[shape=record, label="  %8 = mul i32 %7, -5"];
	Node0xcf9ea0[shape=record, label="  %9 = add i32 %8, %5"];
	Node0xcf9f10[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0xcf9fb0[shape=record, label="  %11 = mul i32 %1, 5"];
	Node0xcfa020[shape=record, label="  %12 = or i32 %3, %0"];
	Node0xcfa090[shape=record, label="  %13 = or i32 %1, %0"];
	Node0xcfa130[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0xcfa1d0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xcfa240[shape=record, label="  %16 = xor i32 %12, -1"];
	Node0xcfa2e0[shape=record, label="  %17 = mul i32 %16, -7"];
	Node0xcfa350[shape=record, label="  %18 = shl i32 %10, 1"];
	Node0xcfa3c0[shape=record, label="  %19 = add i32 %1, 5"];
	Node0xcfa430[shape=record, label="  %20 = add i32 %19, %11"];
	Node0xcfa4a0[shape=record, label="  %21 = sub i32 %20, %12"];
	Node0xcfa510[shape=record, label="  %22 = sub i32 %21, %4"];
	Node0xcfa580[shape=record, label="  %23 = add i32 %22, %6"];
	Node0xcfa5f0[shape=record, label="  %24 = add i32 %23, %17"];
	Node0xcfa660[shape=record, label="  %25 = add i32 %24, %18"];
	Node0xcfa6d0[shape=record, label="  %26 = add i32 %25, %15"];
	Node0xcfa740[shape=record, label="  %27 = icmp eq i32 %9, %26"];
	Node0xc9a268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xcfabe0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0xcfac30[shape=record, label="  ret void"];
	Node0xcf9bb0 -> Node0xcf9c20;
	Node0xcf9c20 -> Node0xcf9ce0;
	Node0xcf9ce0 -> Node0xcf9d50;
	Node0xcf9d50 -> Node0xcf9dc0;
	Node0xcf9dc0 -> Node0xcf9e30;
	Node0xcf9e30 -> Node0xcf9ea0;
	Node0xcf9ea0 -> Node0xcf9f10;
	Node0xcf9f10 -> Node0xcf9fb0;
	Node0xcf9fb0 -> Node0xcfa020;
	Node0xcfa020 -> Node0xcfa090;
	Node0xcfa090 -> Node0xcfa130;
	Node0xcfa130 -> Node0xcfa1d0;
	Node0xcfa1d0 -> Node0xcfa240;
	Node0xcfa240 -> Node0xcfa2e0;
	Node0xcfa2e0 -> Node0xcfa350;
	Node0xcfa350 -> Node0xcfa3c0;
	Node0xcfa3c0 -> Node0xcfa430;
	Node0xcfa430 -> Node0xcfa4a0;
	Node0xcfa4a0 -> Node0xcfa510;
	Node0xcfa510 -> Node0xcfa580;
	Node0xcfa580 -> Node0xcfa5f0;
	Node0xcfa5f0 -> Node0xcfa660;
	Node0xcfa660 -> Node0xcfa6d0;
	Node0xcfa6d0 -> Node0xcfa740;
	Node0xcfa740 -> Node0xc9a268;
	Node0xc9a268 -> Node0xcfabe0;
	Node0xcfabe0 -> Node0xcfac30;
edge [color=red]
	Node0xcf9bb0 -> Node0xcf9c20;
	Node0xcf9c20 -> Node0xcf9ce0;
	Node0xcf9d50 -> Node0xcf9dc0;
	Node0xcf9dc0 -> Node0xcf9e30;
	Node0xcf9e30 -> Node0xcf9ea0;
	Node0xcf9ce0 -> Node0xcf9ea0;
	Node0xcf9bb0 -> Node0xcfa020;
	Node0xcfa090 -> Node0xcfa130;
	Node0xcfa130 -> Node0xcfa1d0;
	Node0xcfa020 -> Node0xcfa240;
	Node0xcfa240 -> Node0xcfa2e0;
	Node0xcf9f10 -> Node0xcfa350;
	Node0xcfa3c0 -> Node0xcfa430;
	Node0xcf9fb0 -> Node0xcfa430;
	Node0xcfa430 -> Node0xcfa4a0;
	Node0xcfa020 -> Node0xcfa4a0;
	Node0xcfa4a0 -> Node0xcfa510;
	Node0xcf9c20 -> Node0xcfa510;
	Node0xcfa510 -> Node0xcfa580;
	Node0xcf9d50 -> Node0xcfa580;
	Node0xcfa580 -> Node0xcfa5f0;
	Node0xcfa2e0 -> Node0xcfa5f0;
	Node0xcfa5f0 -> Node0xcfa660;
	Node0xcfa350 -> Node0xcfa660;
	Node0xcfa660 -> Node0xcfa6d0;
	Node0xcfa1d0 -> Node0xcfa6d0;
	Node0xcf9ea0 -> Node0xcfa740;
	Node0xcfa6d0 -> Node0xcfa740;
	Node0xcfa740 -> Node0xc9a268;
	Node0xc9a268 -> Node0xcfabe0;
}
