digraph "DFG for'main' function" {
	Node0x1c47a18[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1c47a98[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1c47b28[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1c47b88[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x1c47c38[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x1c48068[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1c48148[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x1c48248[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1c48308[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x1c483b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1c48478[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x1c48528[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1c42ac0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x1c48728[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1c49698[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1c49d08[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1c49d68[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x1c49de0[shape=record, label="  %14 = xor i32 %12, -1"];
	Node0x1c49e50[shape=record, label="  %15 = or i32 %11, %14"];
	Node0x1c49ec0[shape=record, label="  %16 = xor i32 %13, -1"];
	Node0x1c49f30[shape=record, label="  %17 = sub i32 %16, %15"];
	Node0x1c49fa0[shape=record, label="  %18 = or i32 %12, %11"];
	Node0x1c4a010[shape=record, label="  %19 = xor i32 %12, %11"];
	Node0x1c4a080[shape=record, label="  %20 = and i32 %11, %14"];
	Node0x1c4a0f0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x1c4a160[shape=record, label="  %22 = or i32 %13, %10"];
	Node0x1c4a1d0[shape=record, label="  %23 = xor i32 %10, -1"];
	Node0x1c4a240[shape=record, label="  %24 = and i32 %13, %23"];
	Node0x1c4a2b0[shape=record, label="  %25 = xor i32 %24, -1"];
	Node0x1c4a320[shape=record, label="  %26 = and i32 %13, %10"];
	Node0x1c4a390[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x1c4a400[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x1c4a470[shape=record, label="  %29 = xor i32 %13, %10"];
	Node0x1c4a4e0[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x1c4a550[shape=record, label="  %31 = shl i32 %22, 1"];
	Node0x1c4a5c0[shape=record, label="  %32 = or i32 %31, 1"];
	Node0x1c4a630[shape=record, label="  %33 = xor i32 %13, 1073741823"];
	Node0x1c4a6a0[shape=record, label="  %34 = and i32 %33, %10"];
	Node0x1c4a710[shape=record, label="  %35 = shl i32 %34, 2"];
	Node0x1c4a780[shape=record, label="  %36 = mul i32 %24, -3"];
	Node0x1c4a7f0[shape=record, label="  %37 = add i32 %10, 2"];
	Node0x1c4a860[shape=record, label="  %38 = sub i32 %37, %12"];
	Node0x1c4a8d0[shape=record, label="  %39 = add i32 %38, %18"];
	Node0x1c4a940[shape=record, label="  %40 = add i32 %39, %19"];
	Node0x1c4a9b0[shape=record, label="  %41 = sub i32 %40, %21"];
	Node0x1c4aa20[shape=record, label="  %42 = sub i32 %41, %22"];
	Node0x1c4aa90[shape=record, label="  %43 = add i32 %42, %25"];
	Node0x1c4ab00[shape=record, label="  %44 = sub i32 %43, %26"];
	Node0x1c4ab70[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x1c4abe0[shape=record, label="  %46 = add i32 %45, %36"];
	Node0x1c4ac50[shape=record, label="  %47 = add i32 %46, %28"];
	Node0x1c4acc0[shape=record, label="  %48 = add i32 %47, %32"];
	Node0x1c4ad30[shape=record, label="  %49 = sub i32 %48, %35"];
	Node0x1c4ada0[shape=record, label="  %50 = icmp eq i32 %17, %49"];
	Node0x1be78b8[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c4ae30[shape=record, label="  %52 = call i32 @puts(i8* nonnull dereferenceable(1) %51) #5"];
	Node0x1c4b0d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1c4b238[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1c4b348[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1c4b458[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1c4b518[shape=record, label="  ret i32 0"];
	Node0x1c47a18 -> Node0x1c47a98;
	Node0x1c47a98 -> Node0x1c47b28;
	Node0x1c47b28 -> Node0x1c47b88;
	Node0x1c47b88 -> Node0x1c47c38;
	Node0x1c47c38 -> Node0x1c48068;
	Node0x1c48068 -> Node0x1c48148;
	Node0x1c48148 -> Node0x1c48248;
	Node0x1c48248 -> Node0x1c48308;
	Node0x1c48308 -> Node0x1c483b8;
	Node0x1c483b8 -> Node0x1c48478;
	Node0x1c48478 -> Node0x1c48528;
	Node0x1c48528 -> Node0x1c42ac0;
	Node0x1c42ac0 -> Node0x1c48728;
	Node0x1c48728 -> Node0x1c49698;
	Node0x1c49698 -> Node0x1c49d08;
	Node0x1c49d08 -> Node0x1c49d68;
	Node0x1c49d68 -> Node0x1c49de0;
	Node0x1c49de0 -> Node0x1c49e50;
	Node0x1c49e50 -> Node0x1c49ec0;
	Node0x1c49ec0 -> Node0x1c49f30;
	Node0x1c49f30 -> Node0x1c49fa0;
	Node0x1c49fa0 -> Node0x1c4a010;
	Node0x1c4a010 -> Node0x1c4a080;
	Node0x1c4a080 -> Node0x1c4a0f0;
	Node0x1c4a0f0 -> Node0x1c4a160;
	Node0x1c4a160 -> Node0x1c4a1d0;
	Node0x1c4a1d0 -> Node0x1c4a240;
	Node0x1c4a240 -> Node0x1c4a2b0;
	Node0x1c4a2b0 -> Node0x1c4a320;
	Node0x1c4a320 -> Node0x1c4a390;
	Node0x1c4a390 -> Node0x1c4a400;
	Node0x1c4a400 -> Node0x1c4a470;
	Node0x1c4a470 -> Node0x1c4a4e0;
	Node0x1c4a4e0 -> Node0x1c4a550;
	Node0x1c4a550 -> Node0x1c4a5c0;
	Node0x1c4a5c0 -> Node0x1c4a630;
	Node0x1c4a630 -> Node0x1c4a6a0;
	Node0x1c4a6a0 -> Node0x1c4a710;
	Node0x1c4a710 -> Node0x1c4a780;
	Node0x1c4a780 -> Node0x1c4a7f0;
	Node0x1c4a7f0 -> Node0x1c4a860;
	Node0x1c4a860 -> Node0x1c4a8d0;
	Node0x1c4a8d0 -> Node0x1c4a940;
	Node0x1c4a940 -> Node0x1c4a9b0;
	Node0x1c4a9b0 -> Node0x1c4aa20;
	Node0x1c4aa20 -> Node0x1c4aa90;
	Node0x1c4aa90 -> Node0x1c4ab00;
	Node0x1c4ab00 -> Node0x1c4ab70;
	Node0x1c4ab70 -> Node0x1c4abe0;
	Node0x1c4abe0 -> Node0x1c4ac50;
	Node0x1c4ac50 -> Node0x1c4acc0;
	Node0x1c4acc0 -> Node0x1c4ad30;
	Node0x1c4ad30 -> Node0x1c4ada0;
	Node0x1c4ada0 -> Node0x1be78b8;
	Node0x1be78b8 -> Node0x1c4ae30;
	Node0x1c4ae30 -> Node0x1c4b0d8;
	Node0x1c4b0d8 -> Node0x1c4b238;
	Node0x1c4b238 -> Node0x1c4b348;
	Node0x1c4b348 -> Node0x1c4b458;
	Node0x1c4b458 -> Node0x1c4b518;
edge [color=red]
	Node0x1c47a18 -> Node0x1c47c38;
	Node0x1c47c38 -> Node0x1c48068;
	Node0x1c47a98 -> Node0x1c48148;
	Node0x1c48148 -> Node0x1c48248;
	Node0x1c47b28 -> Node0x1c48308;
	Node0x1c48308 -> Node0x1c483b8;
	Node0x1c47b88 -> Node0x1c48478;
	Node0x1c48478 -> Node0x1c48528;
	Node0x1c47a18 -> Node0x1c42ac0;
	Node0x1c47a98 -> Node0x1c42ac0;
	Node0x1c47b28 -> Node0x1c42ac0;
	Node0x1c47b88 -> Node0x1c42ac0;
	Node0x1c47a18 -> Node0x1c48728;
	Node0x1c47a98 -> Node0x1c49698;
	Node0x1c47b28 -> Node0x1c49d08;
	Node0x1c47b88 -> Node0x1c49d68;
	Node0x1c49d08 -> Node0x1c49de0;
	Node0x1c49698 -> Node0x1c49e50;
	Node0x1c49de0 -> Node0x1c49e50;
	Node0x1c49d68 -> Node0x1c49ec0;
	Node0x1c49ec0 -> Node0x1c49f30;
	Node0x1c49e50 -> Node0x1c49f30;
	Node0x1c49d08 -> Node0x1c49fa0;
	Node0x1c49698 -> Node0x1c49fa0;
	Node0x1c49d08 -> Node0x1c4a010;
	Node0x1c49698 -> Node0x1c4a010;
	Node0x1c49698 -> Node0x1c4a080;
	Node0x1c49de0 -> Node0x1c4a080;
	Node0x1c4a080 -> Node0x1c4a0f0;
	Node0x1c49d68 -> Node0x1c4a160;
	Node0x1c48728 -> Node0x1c4a160;
	Node0x1c48728 -> Node0x1c4a1d0;
	Node0x1c49d68 -> Node0x1c4a240;
	Node0x1c4a1d0 -> Node0x1c4a240;
	Node0x1c4a240 -> Node0x1c4a2b0;
	Node0x1c49d68 -> Node0x1c4a320;
	Node0x1c48728 -> Node0x1c4a320;
	Node0x1c4a320 -> Node0x1c4a390;
	Node0x1c4a390 -> Node0x1c4a400;
	Node0x1c49d68 -> Node0x1c4a470;
	Node0x1c48728 -> Node0x1c4a470;
	Node0x1c4a470 -> Node0x1c4a4e0;
	Node0x1c4a160 -> Node0x1c4a550;
	Node0x1c4a550 -> Node0x1c4a5c0;
	Node0x1c49d68 -> Node0x1c4a630;
	Node0x1c4a630 -> Node0x1c4a6a0;
	Node0x1c48728 -> Node0x1c4a6a0;
	Node0x1c4a6a0 -> Node0x1c4a710;
	Node0x1c4a240 -> Node0x1c4a780;
	Node0x1c48728 -> Node0x1c4a7f0;
	Node0x1c4a7f0 -> Node0x1c4a860;
	Node0x1c49d08 -> Node0x1c4a860;
	Node0x1c4a860 -> Node0x1c4a8d0;
	Node0x1c49fa0 -> Node0x1c4a8d0;
	Node0x1c4a8d0 -> Node0x1c4a940;
	Node0x1c4a010 -> Node0x1c4a940;
	Node0x1c4a940 -> Node0x1c4a9b0;
	Node0x1c4a0f0 -> Node0x1c4a9b0;
	Node0x1c4a9b0 -> Node0x1c4aa20;
	Node0x1c4a160 -> Node0x1c4aa20;
	Node0x1c4aa20 -> Node0x1c4aa90;
	Node0x1c4a2b0 -> Node0x1c4aa90;
	Node0x1c4aa90 -> Node0x1c4ab00;
	Node0x1c4a320 -> Node0x1c4ab00;
	Node0x1c4ab00 -> Node0x1c4ab70;
	Node0x1c4a4e0 -> Node0x1c4ab70;
	Node0x1c4ab70 -> Node0x1c4abe0;
	Node0x1c4a780 -> Node0x1c4abe0;
	Node0x1c4abe0 -> Node0x1c4ac50;
	Node0x1c4a400 -> Node0x1c4ac50;
	Node0x1c4ac50 -> Node0x1c4acc0;
	Node0x1c4a5c0 -> Node0x1c4acc0;
	Node0x1c4acc0 -> Node0x1c4ad30;
	Node0x1c4a710 -> Node0x1c4ad30;
	Node0x1c49f30 -> Node0x1c4ada0;
	Node0x1c4ad30 -> Node0x1c4ada0;
	Node0x1c4ada0 -> Node0x1be78b8;
	Node0x1be78b8 -> Node0x1c4ae30;
	Node0x1c48478 -> Node0x1c4b0d8;
	Node0x1c48308 -> Node0x1c4b238;
	Node0x1c48148 -> Node0x1c4b348;
	Node0x1c47c38 -> Node0x1c4b458;
}
