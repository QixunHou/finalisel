digraph "DFG for'crackme' function" {
	Node0x1c460a0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1c46110[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1c46180[shape=record, label="  %7 = xor i32 %3, -1"];
	Node0x1c461f0[shape=record, label="  %8 = sub i32 %7, %6"];
	Node0x1c46260[shape=record, label="  %9 = or i32 %2, %1"];
	Node0x1c462d0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x1c46340[shape=record, label="  %11 = and i32 %5, %1"];
	Node0x1c463e0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1c46450[shape=record, label="  %13 = or i32 %3, %0"];
	Node0x1c464c0[shape=record, label="  %14 = xor i32 %0, -1"];
	Node0x1c46530[shape=record, label="  %15 = and i32 %14, %3"];
	Node0x1c465a0[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x1c46610[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x1c46680[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1c46720[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1c46790[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x1c46800[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x1c46870[shape=record, label="  %22 = shl i32 %13, 1"];
	Node0x1c468e0[shape=record, label="  %23 = or i32 %22, 1"];
	Node0x1c46980[shape=record, label="  %24 = xor i32 %3, 1073741823"];
	Node0x1c469f0[shape=record, label="  %25 = and i32 %24, %0"];
	Node0x1c46a90[shape=record, label="  %26 = shl i32 %25, 2"];
	Node0x1c46b30[shape=record, label="  %27 = mul i32 %15, -3"];
	Node0x1c46ba0[shape=record, label="  %28 = add i32 %0, 2"];
	Node0x1c46c10[shape=record, label="  %29 = sub i32 %28, %2"];
	Node0x1c46c80[shape=record, label="  %30 = add i32 %29, %9"];
	Node0x1c46cf0[shape=record, label="  %31 = add i32 %30, %10"];
	Node0x1c46d60[shape=record, label="  %32 = sub i32 %31, %12"];
	Node0x1c46fe0[shape=record, label="  %33 = sub i32 %32, %13"];
	Node0x1c47050[shape=record, label="  %34 = add i32 %33, %16"];
	Node0x1c470c0[shape=record, label="  %35 = sub i32 %34, %17"];
	Node0x1c47130[shape=record, label="  %36 = add i32 %35, %21"];
	Node0x1c471a0[shape=record, label="  %37 = add i32 %36, %27"];
	Node0x1c47210[shape=record, label="  %38 = add i32 %37, %19"];
	Node0x1c47280[shape=record, label="  %39 = add i32 %38, %23"];
	Node0x1c472f0[shape=record, label="  %40 = sub i32 %39, %26"];
	Node0x1c47360[shape=record, label="  %41 = icmp eq i32 %8, %40"];
	Node0x1be6268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c47800[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0x1c47850[shape=record, label="  ret void"];
	Node0x1c460a0 -> Node0x1c46110;
	Node0x1c46110 -> Node0x1c46180;
	Node0x1c46180 -> Node0x1c461f0;
	Node0x1c461f0 -> Node0x1c46260;
	Node0x1c46260 -> Node0x1c462d0;
	Node0x1c462d0 -> Node0x1c46340;
	Node0x1c46340 -> Node0x1c463e0;
	Node0x1c463e0 -> Node0x1c46450;
	Node0x1c46450 -> Node0x1c464c0;
	Node0x1c464c0 -> Node0x1c46530;
	Node0x1c46530 -> Node0x1c465a0;
	Node0x1c465a0 -> Node0x1c46610;
	Node0x1c46610 -> Node0x1c46680;
	Node0x1c46680 -> Node0x1c46720;
	Node0x1c46720 -> Node0x1c46790;
	Node0x1c46790 -> Node0x1c46800;
	Node0x1c46800 -> Node0x1c46870;
	Node0x1c46870 -> Node0x1c468e0;
	Node0x1c468e0 -> Node0x1c46980;
	Node0x1c46980 -> Node0x1c469f0;
	Node0x1c469f0 -> Node0x1c46a90;
	Node0x1c46a90 -> Node0x1c46b30;
	Node0x1c46b30 -> Node0x1c46ba0;
	Node0x1c46ba0 -> Node0x1c46c10;
	Node0x1c46c10 -> Node0x1c46c80;
	Node0x1c46c80 -> Node0x1c46cf0;
	Node0x1c46cf0 -> Node0x1c46d60;
	Node0x1c46d60 -> Node0x1c46fe0;
	Node0x1c46fe0 -> Node0x1c47050;
	Node0x1c47050 -> Node0x1c470c0;
	Node0x1c470c0 -> Node0x1c47130;
	Node0x1c47130 -> Node0x1c471a0;
	Node0x1c471a0 -> Node0x1c47210;
	Node0x1c47210 -> Node0x1c47280;
	Node0x1c47280 -> Node0x1c472f0;
	Node0x1c472f0 -> Node0x1c47360;
	Node0x1c47360 -> Node0x1be6268;
	Node0x1be6268 -> Node0x1c47800;
	Node0x1c47800 -> Node0x1c47850;
edge [color=red]
	Node0x1c460a0 -> Node0x1c46110;
	Node0x1c46180 -> Node0x1c461f0;
	Node0x1c46110 -> Node0x1c461f0;
	Node0x1c460a0 -> Node0x1c46340;
	Node0x1c46340 -> Node0x1c463e0;
	Node0x1c464c0 -> Node0x1c46530;
	Node0x1c46530 -> Node0x1c465a0;
	Node0x1c46610 -> Node0x1c46680;
	Node0x1c46680 -> Node0x1c46720;
	Node0x1c46790 -> Node0x1c46800;
	Node0x1c46450 -> Node0x1c46870;
	Node0x1c46870 -> Node0x1c468e0;
	Node0x1c46980 -> Node0x1c469f0;
	Node0x1c469f0 -> Node0x1c46a90;
	Node0x1c46530 -> Node0x1c46b30;
	Node0x1c46ba0 -> Node0x1c46c10;
	Node0x1c46c10 -> Node0x1c46c80;
	Node0x1c46260 -> Node0x1c46c80;
	Node0x1c46c80 -> Node0x1c46cf0;
	Node0x1c462d0 -> Node0x1c46cf0;
	Node0x1c46cf0 -> Node0x1c46d60;
	Node0x1c463e0 -> Node0x1c46d60;
	Node0x1c46d60 -> Node0x1c46fe0;
	Node0x1c46450 -> Node0x1c46fe0;
	Node0x1c46fe0 -> Node0x1c47050;
	Node0x1c465a0 -> Node0x1c47050;
	Node0x1c47050 -> Node0x1c470c0;
	Node0x1c46610 -> Node0x1c470c0;
	Node0x1c470c0 -> Node0x1c47130;
	Node0x1c46800 -> Node0x1c47130;
	Node0x1c47130 -> Node0x1c471a0;
	Node0x1c46b30 -> Node0x1c471a0;
	Node0x1c471a0 -> Node0x1c47210;
	Node0x1c46720 -> Node0x1c47210;
	Node0x1c47210 -> Node0x1c47280;
	Node0x1c468e0 -> Node0x1c47280;
	Node0x1c47280 -> Node0x1c472f0;
	Node0x1c46a90 -> Node0x1c472f0;
	Node0x1c461f0 -> Node0x1c47360;
	Node0x1c472f0 -> Node0x1c47360;
	Node0x1c47360 -> Node0x1be6268;
	Node0x1be6268 -> Node0x1c47800;
}
