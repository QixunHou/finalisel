digraph "DFG for'crackme' function" {
	Node0x1667bb0[shape=record, label="  %3 = add i32 %0, 1"];
	Node0x1667c50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1667d10[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x1667d80[shape=record, label="  %6 = mul i32 %5, 3"];
	Node0x1667df0[shape=record, label="  %7 = add i32 %3, %6"];
	Node0x1667e60[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1667ed0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x1667f40[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1667fb0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1668020[shape=record, label="  %12 = and i32 %4, %0"];
	Node0x1668090[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1668100[shape=record, label="  %14 = xor i32 %11, -1"];
	Node0x16681a0[shape=record, label="  %15 = mul i32 %14, 7"];
	Node0x1668240[shape=record, label="  %16 = shl i32 %12, 2"];
	Node0x16682e0[shape=record, label="  %17 = mul i32 %8, 5"];
	Node0x1668380[shape=record, label="  %18 = add i32 %0, 6"];
	Node0x16683f0[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x1668460[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x16684d0[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x1668540[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x16685b0[shape=record, label="  %23 = add i32 %22, %10"];
	Node0x1668620[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x1668690[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x1668700[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x1668770[shape=record, label="  %27 = icmp eq i32 %7, %26"];
	Node0x1608268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1668c10[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1668c60[shape=record, label="  ret void"];
	Node0x1667bb0 -> Node0x1667c50;
	Node0x1667c50 -> Node0x1667d10;
	Node0x1667d10 -> Node0x1667d80;
	Node0x1667d80 -> Node0x1667df0;
	Node0x1667df0 -> Node0x1667e60;
	Node0x1667e60 -> Node0x1667ed0;
	Node0x1667ed0 -> Node0x1667f40;
	Node0x1667f40 -> Node0x1667fb0;
	Node0x1667fb0 -> Node0x1668020;
	Node0x1668020 -> Node0x1668090;
	Node0x1668090 -> Node0x1668100;
	Node0x1668100 -> Node0x16681a0;
	Node0x16681a0 -> Node0x1668240;
	Node0x1668240 -> Node0x16682e0;
	Node0x16682e0 -> Node0x1668380;
	Node0x1668380 -> Node0x16683f0;
	Node0x16683f0 -> Node0x1668460;
	Node0x1668460 -> Node0x16684d0;
	Node0x16684d0 -> Node0x1668540;
	Node0x1668540 -> Node0x16685b0;
	Node0x16685b0 -> Node0x1668620;
	Node0x1668620 -> Node0x1668690;
	Node0x1668690 -> Node0x1668700;
	Node0x1668700 -> Node0x1668770;
	Node0x1668770 -> Node0x1608268;
	Node0x1608268 -> Node0x1668c10;
	Node0x1668c10 -> Node0x1668c60;
edge [color=red]
	Node0x1667c50 -> Node0x1667d10;
	Node0x1667d10 -> Node0x1667d80;
	Node0x1667bb0 -> Node0x1667df0;
	Node0x1667d80 -> Node0x1667df0;
	Node0x1667ed0 -> Node0x1667f40;
	Node0x1667c50 -> Node0x1668020;
	Node0x1668020 -> Node0x1668090;
	Node0x1667fb0 -> Node0x1668100;
	Node0x1668100 -> Node0x16681a0;
	Node0x1668020 -> Node0x1668240;
	Node0x1667e60 -> Node0x16682e0;
	Node0x1668380 -> Node0x16683f0;
	Node0x1667e60 -> Node0x16683f0;
	Node0x16683f0 -> Node0x1668460;
	Node0x1667fb0 -> Node0x1668460;
	Node0x1668460 -> Node0x16684d0;
	Node0x1668090 -> Node0x16684d0;
	Node0x16684d0 -> Node0x1668540;
	Node0x1667ed0 -> Node0x1668540;
	Node0x1668540 -> Node0x16685b0;
	Node0x1667f40 -> Node0x16685b0;
	Node0x16685b0 -> Node0x1668620;
	Node0x16681a0 -> Node0x1668620;
	Node0x1668620 -> Node0x1668690;
	Node0x1668240 -> Node0x1668690;
	Node0x1668690 -> Node0x1668700;
	Node0x16682e0 -> Node0x1668700;
	Node0x1667df0 -> Node0x1668770;
	Node0x1668700 -> Node0x1668770;
	Node0x1668770 -> Node0x1608268;
	Node0x1608268 -> Node0x1668c10;
}
