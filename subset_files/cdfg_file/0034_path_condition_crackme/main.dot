digraph "DFG for'main' function" {
	Node0x8c8af8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x8c8b78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x8c8c08[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x8c8c68[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x8c8d18[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x8c9148[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x8c9228[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x8c9328[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x8c93e8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x8c9498[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x8c9558[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x8c9608[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x8c3750[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x8c9808[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x8ca778[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x8cade8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x8cae48[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x8caf58[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0x8cb1b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x8cb318[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x8cb428[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x8cb538[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x8cb5f8[shape=record, label="  ret i32 0"];
	Node0x8c8af8 -> Node0x8c8b78;
	Node0x8c8b78 -> Node0x8c8c08;
	Node0x8c8c08 -> Node0x8c8c68;
	Node0x8c8c68 -> Node0x8c8d18;
	Node0x8c8d18 -> Node0x8c9148;
	Node0x8c9148 -> Node0x8c9228;
	Node0x8c9228 -> Node0x8c9328;
	Node0x8c9328 -> Node0x8c93e8;
	Node0x8c93e8 -> Node0x8c9498;
	Node0x8c9498 -> Node0x8c9558;
	Node0x8c9558 -> Node0x8c9608;
	Node0x8c9608 -> Node0x8c3750;
	Node0x8c3750 -> Node0x8c9808;
	Node0x8c9808 -> Node0x8ca778;
	Node0x8ca778 -> Node0x8cade8;
	Node0x8cade8 -> Node0x8cae48;
	Node0x8cae48 -> Node0x8caf58;
	Node0x8caf58 -> Node0x8cb1b8;
	Node0x8cb1b8 -> Node0x8cb318;
	Node0x8cb318 -> Node0x8cb428;
	Node0x8cb428 -> Node0x8cb538;
	Node0x8cb538 -> Node0x8cb5f8;
edge [color=red]
	Node0x8c8af8 -> Node0x8c8d18;
	Node0x8c8d18 -> Node0x8c9148;
	Node0x8c8b78 -> Node0x8c9228;
	Node0x8c9228 -> Node0x8c9328;
	Node0x8c8c08 -> Node0x8c93e8;
	Node0x8c93e8 -> Node0x8c9498;
	Node0x8c8c68 -> Node0x8c9558;
	Node0x8c9558 -> Node0x8c9608;
	Node0x8c8af8 -> Node0x8c3750;
	Node0x8c8b78 -> Node0x8c3750;
	Node0x8c8c08 -> Node0x8c3750;
	Node0x8c8c68 -> Node0x8c3750;
	Node0x8c8af8 -> Node0x8c9808;
	Node0x8c8b78 -> Node0x8ca778;
	Node0x8c8c08 -> Node0x8cade8;
	Node0x8c8c68 -> Node0x8cae48;
	Node0x8c9808 -> Node0x8caf58;
	Node0x8ca778 -> Node0x8caf58;
	Node0x8cade8 -> Node0x8caf58;
	Node0x8cae48 -> Node0x8caf58;
	Node0x8c9558 -> Node0x8cb1b8;
	Node0x8c93e8 -> Node0x8cb318;
	Node0x8c9228 -> Node0x8cb428;
	Node0x8c8d18 -> Node0x8cb538;
}
