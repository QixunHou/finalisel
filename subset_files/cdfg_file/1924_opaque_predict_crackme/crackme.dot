digraph "DFG for'crackme' function" {
	Node0xe745d0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xe74c80[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0xe74d40[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xe74db0[shape=record, label="  %6 = mul i32 %3, -5"];
	Node0xe74e20[shape=record, label="  %7 = and i32 %1, %0"];
	Node0xe74ec0[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0xe74f60[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0xe75000[shape=record, label="  %10 = shl i32 %1, 1"];
	Node0xe75070[shape=record, label="  %11 = xor i32 %1, -1"];
	Node0xe750e0[shape=record, label="  %12 = and i32 %11, %0"];
	Node0xe75150[shape=record, label="  %13 = or i32 %11, %0"];
	Node0xe751c0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0xe75230[shape=record, label="  %15 = add i32 %1, 1"];
	Node0xe752a0[shape=record, label="  %16 = shl i32 %13, 2"];
	Node0xe75310[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0xe75380[shape=record, label="  %18 = shl i32 %12, 2"];
	Node0xe75420[shape=record, label="  %19 = mul i32 %7, 6"];
	Node0xe75490[shape=record, label="  %20 = sub i32 %15, %5"];
	Node0xe75500[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0xe75570[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xe755e0[shape=record, label="  %23 = add i32 %22, %6"];
	Node0xe75650[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0xe756c0[shape=record, label="  %25 = add i32 %24, %18"];
	Node0xe75730[shape=record, label="  %26 = add i32 %25, %19"];
	Node0xe757a0[shape=record, label="  %27 = add i32 %26, %9"];
	Node0xe75810[shape=record, label="  %28 = add i32 %27, %17"];
	Node0xe75880[shape=record, label="  %29 = icmp eq i32 %28, %4"];
	Node0xe15268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xe75d20[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0xe75d70[shape=record, label="  ret void"];
	Node0xe745d0 -> Node0xe74c80;
	Node0xe74c80 -> Node0xe74d40;
	Node0xe74d40 -> Node0xe74db0;
	Node0xe74db0 -> Node0xe74e20;
	Node0xe74e20 -> Node0xe74ec0;
	Node0xe74ec0 -> Node0xe74f60;
	Node0xe74f60 -> Node0xe75000;
	Node0xe75000 -> Node0xe75070;
	Node0xe75070 -> Node0xe750e0;
	Node0xe750e0 -> Node0xe75150;
	Node0xe75150 -> Node0xe751c0;
	Node0xe751c0 -> Node0xe75230;
	Node0xe75230 -> Node0xe752a0;
	Node0xe752a0 -> Node0xe75310;
	Node0xe75310 -> Node0xe75380;
	Node0xe75380 -> Node0xe75420;
	Node0xe75420 -> Node0xe75490;
	Node0xe75490 -> Node0xe75500;
	Node0xe75500 -> Node0xe75570;
	Node0xe75570 -> Node0xe755e0;
	Node0xe755e0 -> Node0xe75650;
	Node0xe75650 -> Node0xe756c0;
	Node0xe756c0 -> Node0xe75730;
	Node0xe75730 -> Node0xe757a0;
	Node0xe757a0 -> Node0xe75810;
	Node0xe75810 -> Node0xe75880;
	Node0xe75880 -> Node0xe15268;
	Node0xe15268 -> Node0xe75d20;
	Node0xe75d20 -> Node0xe75d70;
edge [color=red]
	Node0xe745d0 -> Node0xe74c80;
	Node0xe745d0 -> Node0xe74db0;
	Node0xe74e20 -> Node0xe74ec0;
	Node0xe74ec0 -> Node0xe74f60;
	Node0xe75070 -> Node0xe750e0;
	Node0xe75070 -> Node0xe75150;
	Node0xe75150 -> Node0xe751c0;
	Node0xe75150 -> Node0xe752a0;
	Node0xe752a0 -> Node0xe75310;
	Node0xe750e0 -> Node0xe75380;
	Node0xe74e20 -> Node0xe75420;
	Node0xe75230 -> Node0xe75490;
	Node0xe74d40 -> Node0xe75490;
	Node0xe75490 -> Node0xe75500;
	Node0xe75000 -> Node0xe75500;
	Node0xe75500 -> Node0xe75570;
	Node0xe750e0 -> Node0xe75570;
	Node0xe75570 -> Node0xe755e0;
	Node0xe74db0 -> Node0xe755e0;
	Node0xe755e0 -> Node0xe75650;
	Node0xe751c0 -> Node0xe75650;
	Node0xe75650 -> Node0xe756c0;
	Node0xe75380 -> Node0xe756c0;
	Node0xe756c0 -> Node0xe75730;
	Node0xe75420 -> Node0xe75730;
	Node0xe75730 -> Node0xe757a0;
	Node0xe74f60 -> Node0xe757a0;
	Node0xe757a0 -> Node0xe75810;
	Node0xe75310 -> Node0xe75810;
	Node0xe75810 -> Node0xe75880;
	Node0xe74c80 -> Node0xe75880;
	Node0xe75880 -> Node0xe15268;
	Node0xe15268 -> Node0xe75d20;
}
