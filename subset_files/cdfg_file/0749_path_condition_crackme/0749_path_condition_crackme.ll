; ModuleID = '../.././c_source_file/0749_path_condition_crackme.c'
source_filename = "../.././c_source_file/0749_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %10, %8
  %12 = xor i32 %2, -1
  %13 = and i32 %12, %0
  %14 = and i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = xor i32 %13, %15
  %17 = shl i32 %16, 2
  %18 = sub i32 %11, %17
  %19 = xor i32 %4, -1
  %20 = and i32 %5, %3
  %21 = and i32 %20, %19
  %22 = or i32 %5, %3
  %23 = and i32 %22, %4
  %24 = or i32 %21, %23
  %25 = sub i32 %18, %24
  %26 = xor i32 %3, -1
  %27 = and i32 %26, %4
  %28 = xor i32 %5, -1
  %29 = and i32 %28, %3
  %30 = or i32 %29, %27
  %31 = mul i32 %30, 3
  %32 = add i32 %25, %31
  %33 = and i32 %12, %1
  %34 = xor i32 %1, -1
  %35 = and i32 %10, %34
  %36 = xor i32 %0, -1
  %37 = or i32 %33, %36
  %38 = xor i32 %33, -1
  %39 = and i32 %38, %0
  %40 = and i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %1
  %43 = shl i32 %42, 1
  %44 = or i32 %33, %0
  %45 = or i32 %2, %1
  %46 = and i32 %45, %36
  %47 = or i32 %12, %0
  %48 = xor i32 %47, -1
  %49 = add i32 %47, 1
  %50 = and i32 %14, %0
  %51 = xor i32 %2, %1
  %52 = xor i32 %51, %0
  %53 = xor i32 %50, %52
  %54 = or i32 %38, %36
  %55 = and i32 %1, %0
  %56 = or i32 %55, %2
  %57 = shl i32 %56, 1
  %58 = and i32 %34, %0
  %59 = or i32 %9, %58
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = or i32 %55, %61
  %63 = or i32 %40, %33
  %64 = xor i32 %8, %2
  %65 = xor i32 %1, %0
  %66 = and i32 %60, %65
  %67 = xor i32 %65, -1
  %68 = and i32 %47, %67
  %69 = shl i32 %68, 1
  %70 = and i32 %9, %65
  %71 = xor i32 %45, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %50, %72
  %74 = or i32 %34, %0
  %75 = xor i32 %40, %74
  %76 = and i32 %34, %2
  %77 = and i32 %76, %36
  %78 = or i32 %51, %36
  %79 = xor i32 %77, %78
  %80 = or i32 %61, %34
  %81 = shl i32 %80, 1
  %82 = xor i32 %51, -1
  %83 = xor i32 %82, %0
  %84 = and i32 %10, %67
  %85 = xor i32 %78, -1
  %86 = or i32 %77, %85
  %87 = or i32 %9, %8
  %88 = or i32 %55, %82
  %89 = shl i32 %88, 1
  %90 = shl i32 %60, 1
  %91 = xor i32 %47, %55
  %92 = and i32 %47, %65
  %93 = shl i32 %41, 1
  %94 = or i32 %12, %1
  %95 = xor i32 %94, -1
  %96 = or i32 %95, %36
  %97 = or i32 %9, %55
  %98 = xor i32 %58, -1
  %99 = and i32 %82, %98
  %100 = xor i32 %94, %55
  %101 = or i32 %14, %36
  %102 = xor i32 %95, %0
  %103 = or i32 %33, %58
  %104 = xor i32 %55, -1
  %105 = and i32 %12, %104
  %106 = shl i32 %105, 1
  %107 = and i32 %94, %0
  %108 = and i32 %65, %12
  %109 = or i32 %48, %34
  %110 = or i32 %8, %2
  %111 = xor i32 %60, %55
  %112 = and i32 %76, %0
  %113 = or i32 %51, %0
  %114 = xor i32 %113, -1
  %115 = or i32 %112, %114
  %116 = and i32 %9, %1
  %117 = or i32 %9, %67
  %118 = xor i32 %112, -1
  %119 = xor i32 %52, %118
  %120 = or i32 %34, %2
  %121 = and i32 %120, %36
  %122 = or i32 %112, %121
  %123 = xor i32 %13, -1
  %124 = and i32 %123, %34
  %125 = shl i32 %124, 2
  %126 = and i32 %65, %10
  %127 = xor i32 %118, %0
  %128 = xor i32 %127, %120
  %129 = and i32 %12, %98
  %130 = xor i32 %123, %1
  %131 = xor i32 %74, %2
  %132 = and i32 %74, %10
  %133 = xor i32 %60, %1
  %134 = or i32 %65, %61
  %135 = and i32 %15, %0
  %136 = xor i32 %112, %113
  %137 = or i32 %82, %36
  %138 = and i32 %7, %2
  %139 = xor i32 %33, %0
  %140 = or i32 %61, %1
  %141 = and i32 %123, %1
  %142 = xor i32 %38, %0
  %143 = and i32 %51, %74
  %144 = or i32 %10, %67
  %145 = xor i32 %58, %38
  %146 = and i32 %82, %36
  %147 = xor i32 %15, %0
  %148 = and i32 %7, %82
  %149 = xor i32 %121, %118
  %150 = and i32 %74, %2
  %151 = or i32 %48, %1
  %152 = and i32 %47, %34
  %153 = or i32 %40, %34
  %154 = and i32 %12, %67
  %155 = and i32 %120, %0
  %156 = or i32 %77, %155
  %157 = or i32 %9, %1
  %158 = xor i32 %40, %45
  %159 = or i32 %58, %12
  %160 = and i32 %7, %10
  %161 = add i32 %7, 1
  %162 = or i32 %14, %58
  %163 = and i32 %51, %7
  %164 = and i32 %9, %98
  %165 = and i32 %60, %67
  %166 = xor i32 %61, %1
  %167 = add i32 %65, 1
  %168 = or i32 %13, %95
  %169 = and i32 %14, %36
  %170 = and i32 %51, %0
  %171 = or i32 %169, %170
  %172 = or i32 %40, %1
  %173 = and i32 %65, %2
  %174 = and i32 %45, %0
  %175 = or i32 %169, %174
  %176 = shl i32 %175, 1
  %177 = or i32 %95, %0
  %178 = xor i32 %47, %1
  %179 = xor i32 %74, -1
  %180 = or i32 %12, %179
  %181 = or i32 %15, %36
  %182 = or i32 %50, %71
  %183 = or i32 %45, %0
  %184 = and i32 %10, %98
  %185 = and i32 %38, %36
  %186 = or i32 %65, %10
  %187 = shl i32 %36, 1
  %188 = or i32 %40, %8
  %189 = or i32 %51, %58
  %190 = xor i32 %104, %2
  %191 = xor i32 %58, %15
  %192 = and i32 %9, %74
  %193 = or i32 %65, %2
  %194 = xor i32 %179, %2
  %195 = add i32 %33, 1
  %196 = or i32 %82, %179
  %197 = and i32 %9, %7
  %198 = add i32 %13, 1
  %199 = or i32 %55, %10
  %200 = or i32 %50, %46
  %201 = shl i32 %200, 1
  %202 = xor i32 %55, %2
  %203 = or i32 %14, %0
  %204 = xor i32 %45, -1
  %205 = or i32 %40, %204
  %206 = shl i32 %205, 1
  %207 = or i32 %13, %14
  %208 = and i32 %123, %67
  %209 = and i32 %204, %36
  %210 = and i32 %33, %36
  %211 = and i32 %204, %0
  %212 = and i32 %33, %0
  %213 = and i32 %95, %36
  %214 = mul i32 %213, 25
  %215 = and i32 %95, %0
  %216 = mul i32 %215, 10
  %217 = mul i32 %50, 20
  %218 = or i32 %5, %4
  %219 = xor i32 %218, -1
  %220 = shl i32 %219, 1
  %221 = or i32 %28, %3
  %222 = or i32 %28, %4
  %223 = xor i32 %222, %3
  %224 = xor i32 %5, %4
  %225 = or i32 %224, %27
  %226 = shl i32 %225, 1
  %227 = and i32 %28, %4
  %228 = xor i32 %221, -1
  %229 = or i32 %227, %228
  %230 = or i32 %4, %3
  %231 = and i32 %230, %28
  %232 = and i32 %20, %4
  %233 = xor i32 %5, %3
  %234 = xor i32 %233, %4
  %235 = xor i32 %232, %234
  %236 = and i32 %4, %3
  %237 = xor i32 %233, -1
  %238 = or i32 %236, %237
  %239 = xor i32 %221, %4
  %240 = xor i32 %4, %3
  %241 = xor i32 %240, -1
  %242 = xor i32 %224, -1
  %243 = or i32 %242, %241
  %244 = and i32 %5, %4
  %245 = or i32 %244, %240
  %246 = xor i32 %29, -1
  %247 = add i32 %29, 1
  %248 = or i32 %26, %4
  %249 = and i32 %248, %5
  %250 = or i32 %236, %242
  %251 = and i32 %222, %26
  %252 = xor i32 %227, -1
  %253 = and i32 %252, %3
  %254 = or i32 %29, %4
  %255 = or i32 %233, %4
  %256 = and i32 %242, %3
  %257 = xor i32 %27, -1
  %258 = and i32 %237, %257
  %259 = and i32 %218, %241
  %260 = and i32 %26, %5
  %261 = and i32 %260, %19
  %262 = or i32 %233, %19
  %263 = xor i32 %261, %262
  %264 = xor i32 %257, %5
  %265 = or i32 %20, %4
  %266 = or i32 %221, %4
  %267 = or i32 %240, %219
  %268 = xor i32 %230, %5
  %269 = xor i32 %244, -1
  %270 = and i32 %269, %241
  %271 = and i32 %237, %19
  %272 = xor i32 %230, -1
  %273 = or i32 %242, %272
  %274 = or i32 %246, %19
  %275 = and i32 %248, %237
  %276 = shl i32 %22, 1
  %277 = or i32 %241, %5
  %278 = shl i32 %277, 1
  %279 = and i32 %224, %3
  %280 = and i32 %260, %4
  %281 = or i32 %26, %5
  %282 = and i32 %281, %19
  %283 = or i32 %280, %282
  %284 = or i32 %233, %27
  %285 = xor i32 %227, %3
  %286 = or i32 %242, %26
  %287 = and i32 %233, %19
  %288 = xor i32 %20, -1
  %289 = or i32 %288, %4
  %290 = shl i32 %289, 1
  %291 = xor i32 %22, -1
  %292 = or i32 %291, %4
  %293 = or i32 %227, %26
  %294 = xor i32 %218, %236
  %295 = or i32 %244, %26
  %296 = xor i32 %236, -1
  %297 = and i32 %296, %5
  %298 = and i32 %252, %241
  %299 = or i32 %244, %3
  %300 = or i32 %28, %241
  %301 = or i32 %291, %19
  %302 = or i32 %219, %241
  %303 = xor i32 %222, -1
  %304 = or i32 %240, %303
  %305 = xor i32 %248, -1
  %306 = or i32 %305, %5
  %307 = xor i32 %27, %246
  %308 = and i32 %233, %4
  %309 = and i32 %242, %296
  %310 = or i32 %228, %4
  %311 = xor i32 %234, -1
  %312 = xor i32 %280, %311
  %313 = and i32 %28, %257
  %314 = and i32 %237, %296
  %315 = xor i32 %27, %5
  %316 = xor i32 %219, %3
  %317 = and i32 %221, %19
  %318 = xor i32 %22, %4
  %319 = xor i32 %318, -1
  %320 = xor i32 %232, %319
  %321 = or i32 %237, %272
  %322 = xor i32 %227, %288
  %323 = xor i32 %272, %5
  %324 = shl i32 %323, 1
  %325 = xor i32 %324, -1
  %326 = and i32 %218, %3
  %327 = xor i32 %246, %4
  %328 = and i32 %242, %241
  %329 = or i32 %221, %19
  %330 = and i32 %242, %257
  %331 = and i32 %288, %4
  %332 = and i32 %252, %26
  %333 = xor i32 %248, %5
  %334 = or i32 %233, %236
  %335 = or i32 %242, %305
  %336 = xor i32 %281, %4
  %337 = xor i32 %280, -1
  %338 = xor i32 %336, %337
  %339 = and i32 %242, %26
  %340 = add i32 %236, 1
  %341 = or i32 %303, %3
  %342 = add i32 %27, 1
  %343 = or i32 %303, %241
  %344 = shl i32 %343, 1
  %345 = and i32 %269, %26
  %346 = or i32 %280, %234
  %347 = or i32 %28, %305
  %348 = and i32 %224, %248
  %349 = and i32 %248, %28
  %350 = and i32 %224, %241
  %351 = or i32 %224, %3
  %352 = or i32 %224, %236
  %353 = xor i32 %27, %288
  %354 = or i32 %228, %19
  %355 = or i32 %219, %26
  %356 = or i32 %224, %240
  %357 = and i32 %224, %240
  %358 = and i32 %233, %257
  %359 = and i32 %281, %4
  %360 = xor i32 %359, -1
  %361 = xor i32 %261, %360
  %362 = xor i32 %22, %236
  %363 = xor i32 %237, %4
  %364 = xor i32 %269, %3
  %365 = or i32 %233, %272
  %366 = shl i32 %365, 2
  %367 = or i32 %232, %311
  %368 = or i32 %224, %272
  %369 = or i32 %237, %305
  %370 = shl i32 %369, 1
  %371 = or i32 %261, %359
  %372 = and i32 %22, %19
  %373 = or i32 %232, %372
  %374 = and i32 %218, %26
  %375 = or i32 %21, %308
  %376 = xor i32 %23, -1
  %377 = xor i32 %21, %376
  %378 = or i32 %236, %228
  %379 = or i32 %227, %3
  %380 = or i32 %29, %19
  %381 = xor i32 %291, %4
  %382 = shl i32 %381, 1
  %383 = and i32 %224, %257
  %384 = or i32 %232, %318
  %385 = or i32 %227, %20
  %386 = and i32 %288, %19
  %387 = add i32 %22, 1
  %388 = xor i32 %296, %5
  %389 = or i32 %242, %3
  %390 = and i32 %230, %5
  %391 = or i32 %240, %242
  %392 = xor i32 %228, %4
  %393 = and i32 %240, %252
  %394 = or i32 %244, %272
  %395 = xor i32 %221, %236
  %396 = or i32 %280, %336
  %397 = and i32 %240, %5
  %398 = or i32 %240, %28
  %399 = and i32 %233, %248
  %400 = or i32 %224, %26
  %401 = xor i32 %236, %5
  %402 = or i32 %22, %19
  %403 = shl i32 %262, 1
  %404 = and i32 %246, %19
  %405 = and i32 %222, %240
  %406 = and i32 %233, %230
  %407 = xor i32 %308, 2147483647
  %408 = xor i32 %407, %21
  %409 = shl i32 %408, 1
  %410 = or i32 %240, %5
  %411 = shl i32 %410, 1
  %412 = xor i32 %280, %255
  %413 = xor i32 %282, %337
  %414 = and i32 %218, %240
  %415 = xor i32 %218, %3
  %416 = and i32 %291, %19
  %417 = and i32 %29, %19
  %418 = mul i32 %417, -15
  %419 = and i32 %291, %4
  %420 = mul i32 %419, -12
  %421 = and i32 %29, %4
  %422 = and i32 %228, %19
  %423 = and i32 %228, %4
  %424 = mul i32 %232, -14
  %425 = sub i32 %129, %194
  %426 = sub i32 %425, %209
  %427 = add i32 %426, %75
  %428 = sub i32 %427, %236
  %429 = sub i32 %428, %20
  %430 = add i32 %429, %252
  %431 = add i32 %430, %286
  %432 = add i32 %431, %412
  %433 = mul i32 %432, 5
  %434 = sub i32 %168, %185
  %435 = add i32 %434, %146
  %436 = add i32 %435, %136
  %437 = sub i32 %436, %122
  %438 = add i32 %437, %79
  %439 = sub i32 %438, %362
  %440 = add i32 %439, %416
  %441 = mul i32 %440, 3
  %442 = sub i32 %423, %422
  %443 = add i32 %442, %421
  %444 = mul i32 %443, 7
  %445 = add i32 %300, %203
  %446 = add i32 %445, %330
  %447 = shl i32 %446, 2
  %448 = sub i32 %21, %212
  %449 = mul i32 %448, 6
  %450 = sub i32 -2, %9
  %451 = add i32 %450, %95
  %452 = add i32 %451, %131
  %453 = add i32 %452, %169
  %454 = add i32 %453, %211
  %455 = add i32 %454, %210
  %456 = add i32 %455, %196
  %457 = add i32 %456, %178
  %458 = add i32 %457, %166
  %459 = add i32 %458, %164
  %460 = add i32 %459, %153
  %461 = add i32 %460, %101
  %462 = add i32 %461, %66
  %463 = add i32 %462, %397
  %464 = add i32 %463, %390
  %465 = add i32 %464, %224
  %466 = add i32 %465, %415
  %467 = add i32 %466, %391
  %468 = add i32 %467, %318
  %469 = add i32 %468, %379
  %470 = add i32 %469, %354
  %471 = add i32 %470, %345
  %472 = add i32 %471, %314
  %473 = add i32 %472, %302
  %474 = add i32 %473, %239
  %475 = add i32 %474, %371
  %476 = add i32 %475, %373
  %477 = add i32 %476, %346
  %478 = shl i32 %477, 1
  %479 = sub i32 2, %0
  %480 = sub i32 %479, %187
  %481 = sub i32 %480, %2
  %482 = sub i32 %481, %74
  %483 = add i32 %482, %98
  %484 = add i32 %483, %161
  %485 = add i32 %484, %12
  %486 = add i32 %485, %167
  %487 = sub i32 %486, %58
  %488 = sub i32 %487, %55
  %489 = sub i32 %488, %33
  %490 = add i32 %489, %49
  %491 = sub i32 %490, %64
  %492 = add i32 %491, %82
  %493 = sub i32 %492, %108
  %494 = add i32 %493, %13
  %495 = add i32 %494, %110
  %496 = sub i32 %495, %138
  %497 = sub i32 %496, %150
  %498 = sub i32 %497, %154
  %499 = add i32 %498, %61
  %500 = sub i32 %499, %159
  %501 = sub i32 %500, %173
  %502 = sub i32 %501, %47
  %503 = add i32 %502, %180
  %504 = sub i32 %503, %190
  %505 = add i32 %504, %193
  %506 = add i32 %505, %195
  %507 = add i32 %506, %198
  %508 = add i32 %507, %202
  %509 = add i32 %508, %3
  %510 = sub i32 %509, %35
  %511 = add i32 %510, %37
  %512 = sub i32 %511, %39
  %513 = add i32 %512, %44
  %514 = add i32 %513, %46
  %515 = sub i32 %514, %54
  %516 = sub i32 %515, %57
  %517 = sub i32 %516, %59
  %518 = add i32 %517, %62
  %519 = sub i32 %518, %63
  %520 = sub i32 %519, %70
  %521 = sub i32 %520, %83
  %522 = add i32 %521, %84
  %523 = sub i32 %522, %87
  %524 = sub i32 %523, %90
  %525 = add i32 %524, %91
  %526 = sub i32 %525, %92
  %527 = sub i32 %526, %93
  %528 = add i32 %527, %96
  %529 = sub i32 %528, %97
  %530 = sub i32 %529, %99
  %531 = sub i32 %530, %100
  %532 = sub i32 %531, %102
  %533 = sub i32 %532, %103
  %534 = sub i32 %533, %106
  %535 = add i32 %534, %107
  %536 = add i32 %535, %109
  %537 = add i32 %536, %111
  %538 = sub i32 %537, %116
  %539 = sub i32 %538, %117
  %540 = add i32 %539, %126
  %541 = sub i32 %540, %130
  %542 = sub i32 %541, %132
  %543 = sub i32 %542, %133
  %544 = add i32 %543, %134
  %545 = add i32 %544, %135
  %546 = sub i32 %545, %137
  %547 = sub i32 %546, %139
  %548 = add i32 %547, %140
  %549 = sub i32 %548, %141
  %550 = sub i32 %549, %142
  %551 = sub i32 %550, %143
  %552 = sub i32 %551, %144
  %553 = sub i32 %552, %145
  %554 = sub i32 %553, %147
  %555 = add i32 %554, %148
  %556 = sub i32 %555, %151
  %557 = add i32 %556, %152
  %558 = sub i32 %557, %157
  %559 = sub i32 %558, %158
  %560 = sub i32 %559, %160
  %561 = add i32 %560, %162
  %562 = sub i32 %561, %163
  %563 = add i32 %562, %165
  %564 = add i32 %563, %172
  %565 = add i32 %564, %177
  %566 = add i32 %565, %174
  %567 = add i32 %566, %181
  %568 = sub i32 %567, %183
  %569 = add i32 %568, %184
  %570 = add i32 %569, %186
  %571 = add i32 %570, %188
  %572 = sub i32 %571, %189
  %573 = add i32 %572, %191
  %574 = sub i32 %573, %192
  %575 = add i32 %574, %197
  %576 = add i32 %575, %199
  %577 = sub i32 %576, %207
  %578 = add i32 %577, %208
  %579 = add i32 %578, 1
  %580 = sub i32 %579, %43
  %581 = sub i32 %580, %53
  %582 = sub i32 %581, %69
  %583 = sub i32 %582, %73
  %584 = sub i32 %583, %81
  %585 = sub i32 %584, %86
  %586 = sub i32 %585, %89
  %587 = add i32 %586, %115
  %588 = add i32 %587, %119
  %589 = sub i32 %588, %125
  %590 = add i32 %589, %128
  %591 = sub i32 %590, %149
  %592 = sub i32 %591, %156
  %593 = add i32 %592, %171
  %594 = sub i32 %593, %182
  %595 = sub i32 %594, %206
  %596 = add i32 %595, %214
  %597 = add i32 %596, %216
  %598 = add i32 %597, %217
  %599 = add i32 %598, %340
  %600 = add i32 %599, %342
  %601 = add i32 %600, %272
  %602 = sub i32 %601, %176
  %603 = sub i32 %602, %201
  %604 = add i32 %603, %221
  %605 = add i32 %604, %231
  %606 = add i32 %605, %247
  %607 = add i32 %606, %249
  %608 = add i32 %607, %264
  %609 = sub i32 %608, %268
  %610 = sub i32 %609, %297
  %611 = add i32 %610, %306
  %612 = add i32 %611, %313
  %613 = sub i32 %612, %315
  %614 = sub i32 %613, %333
  %615 = sub i32 %614, %347
  %616 = sub i32 %615, %349
  %617 = sub i32 %616, %218
  %618 = add i32 %617, %387
  %619 = sub i32 %618, %388
  %620 = add i32 %619, %398
  %621 = add i32 %620, %227
  %622 = sub i32 %621, %401
  %623 = sub i32 %622, %220
  %624 = sub i32 %623, %223
  %625 = sub i32 %624, %229
  %626 = sub i32 %625, %238
  %627 = add i32 %626, %243
  %628 = sub i32 %627, %245
  %629 = sub i32 %628, %250
  %630 = add i32 %629, %251
  %631 = add i32 %630, %253
  %632 = add i32 %631, %254
  %633 = sub i32 %632, %255
  %634 = add i32 %633, %256
  %635 = add i32 %634, %258
  %636 = add i32 %635, %259
  %637 = add i32 %636, %23
  %638 = sub i32 %637, %265
  %639 = sub i32 %638, %266
  %640 = sub i32 %639, %267
  %641 = add i32 %640, %270
  %642 = add i32 %641, %271
  %643 = sub i32 %642, %273
  %644 = sub i32 %643, %274
  %645 = add i32 %644, %275
  %646 = sub i32 %645, %276
  %647 = sub i32 %646, %278
  %648 = add i32 %647, %279
  %649 = add i32 %648, %284
  %650 = add i32 %649, %285
  %651 = sub i32 %650, %287
  %652 = add i32 %651, %292
  %653 = add i32 %652, %293
  %654 = add i32 %653, %294
  %655 = add i32 %654, %295
  %656 = sub i32 %655, %298
  %657 = add i32 %656, %299
  %658 = add i32 %657, %301
  %659 = add i32 %658, %304
  %660 = sub i32 %659, %307
  %661 = sub i32 %660, %308
  %662 = sub i32 %661, %309
  %663 = sub i32 %662, %310
  %664 = sub i32 %663, %316
  %665 = sub i32 %664, %317
  %666 = add i32 %665, %321
  %667 = sub i32 %666, %322
  %668 = add i32 %667, %325
  %669 = add i32 %668, %326
  %670 = add i32 %669, %327
  %671 = sub i32 %670, %328
  %672 = sub i32 %671, %329
  %673 = add i32 %672, %331
  %674 = sub i32 %673, %332
  %675 = sub i32 %674, %334
  %676 = add i32 %675, %335
  %677 = add i32 %676, %339
  %678 = add i32 %677, %341
  %679 = sub i32 %678, %348
  %680 = sub i32 %679, %350
  %681 = add i32 %680, %351
  %682 = add i32 %681, %352
  %683 = sub i32 %682, %353
  %684 = add i32 %683, %355
  %685 = sub i32 %684, %356
  %686 = sub i32 %685, %357
  %687 = add i32 %686, %358
  %688 = sub i32 %687, %363
  %689 = sub i32 %688, %364
  %690 = add i32 %689, %368
  %691 = sub i32 %690, %374
  %692 = add i32 %691, %378
  %693 = sub i32 %692, %380
  %694 = sub i32 %693, %383
  %695 = add i32 %694, %385
  %696 = sub i32 %695, %386
  %697 = add i32 %696, %389
  %698 = add i32 %697, %392
  %699 = sub i32 %698, %393
  %700 = sub i32 %699, %394
  %701 = sub i32 %700, %395
  %702 = add i32 %701, %372
  %703 = add i32 %702, %399
  %704 = sub i32 %703, %400
  %705 = add i32 %704, %402
  %706 = sub i32 %705, %404
  %707 = sub i32 %706, %405
  %708 = sub i32 %707, %406
  %709 = sub i32 %708, %411
  %710 = sub i32 %709, %414
  %711 = sub i32 %710, %226
  %712 = add i32 %711, %235
  %713 = sub i32 %712, %263
  %714 = sub i32 %713, %283
  %715 = sub i32 %714, %290
  %716 = sub i32 %715, %312
  %717 = add i32 %716, %320
  %718 = add i32 %717, %338
  %719 = sub i32 %718, %344
  %720 = add i32 %719, %361
  %721 = sub i32 %720, %366
  %722 = sub i32 %721, %367
  %723 = sub i32 %722, %370
  %724 = sub i32 %723, %375
  %725 = sub i32 %724, %377
  %726 = sub i32 %725, %382
  %727 = sub i32 %726, %384
  %728 = add i32 %727, %396
  %729 = sub i32 %728, %403
  %730 = sub i32 %729, %413
  %731 = add i32 %730, %418
  %732 = add i32 %731, %420
  %733 = add i32 %732, %424
  %734 = add i32 %733, %449
  %735 = sub i32 %734, %409
  %736 = add i32 %735, %444
  %737 = add i32 %736, %447
  %738 = add i32 %737, %441
  %739 = add i32 %738, %433
  %740 = add i32 %739, %478
  %741 = icmp eq i32 %32, %740
  %742 = select i1 %741, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %743 = tail call i32 @puts(i8* nonnull dereferenceable(1) %742)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
