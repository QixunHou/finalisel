digraph "DFG for'crackme' function" {
	Node0x1b91b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1b91bc0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1b91c80[shape=record, label="  %5 = add i32 %4, 1"];
	Node0x1b91cf0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1b91d60[shape=record, label="  %7 = shl i32 %3, 1"];
	Node0x1b91dd0[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x1b91e40[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1b91eb0[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x1b91f20[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1b91f90[shape=record, label="  %12 = add i32 %8, 1"];
	Node0x1b92000[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x1b92070[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x1b920e0[shape=record, label="  %15 = add i32 %10, %12"];
	Node0x1b92180[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x1b921f0[shape=record, label="  %17 = sub i32 1, %1"];
	Node0x1b92260[shape=record, label="  %18 = add i32 %17, %6"];
	Node0x1b922d0[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x1b92340[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x1b923b0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x1b92420[shape=record, label="  %22 = sub i32 %21, %4"];
	Node0x1b92490[shape=record, label="  %23 = sub i32 %22, %9"];
	Node0x1b92500[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1b92570[shape=record, label="  %25 = icmp eq i32 %5, %24"];
	Node0x1b32268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b92a10[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1b92a60[shape=record, label="  ret void"];
	Node0x1b91b50 -> Node0x1b91bc0;
	Node0x1b91bc0 -> Node0x1b91c80;
	Node0x1b91c80 -> Node0x1b91cf0;
	Node0x1b91cf0 -> Node0x1b91d60;
	Node0x1b91d60 -> Node0x1b91dd0;
	Node0x1b91dd0 -> Node0x1b91e40;
	Node0x1b91e40 -> Node0x1b91eb0;
	Node0x1b91eb0 -> Node0x1b91f20;
	Node0x1b91f20 -> Node0x1b91f90;
	Node0x1b91f90 -> Node0x1b92000;
	Node0x1b92000 -> Node0x1b92070;
	Node0x1b92070 -> Node0x1b920e0;
	Node0x1b920e0 -> Node0x1b92180;
	Node0x1b92180 -> Node0x1b921f0;
	Node0x1b921f0 -> Node0x1b92260;
	Node0x1b92260 -> Node0x1b922d0;
	Node0x1b922d0 -> Node0x1b92340;
	Node0x1b92340 -> Node0x1b923b0;
	Node0x1b923b0 -> Node0x1b92420;
	Node0x1b92420 -> Node0x1b92490;
	Node0x1b92490 -> Node0x1b92500;
	Node0x1b92500 -> Node0x1b92570;
	Node0x1b92570 -> Node0x1b32268;
	Node0x1b32268 -> Node0x1b92a10;
	Node0x1b92a10 -> Node0x1b92a60;
edge [color=red]
	Node0x1b91b50 -> Node0x1b91bc0;
	Node0x1b91bc0 -> Node0x1b91c80;
	Node0x1b91b50 -> Node0x1b91d60;
	Node0x1b91dd0 -> Node0x1b91e40;
	Node0x1b91eb0 -> Node0x1b91f20;
	Node0x1b91dd0 -> Node0x1b91f90;
	Node0x1b92000 -> Node0x1b92070;
	Node0x1b91eb0 -> Node0x1b920e0;
	Node0x1b91f90 -> Node0x1b920e0;
	Node0x1b920e0 -> Node0x1b92180;
	Node0x1b921f0 -> Node0x1b92260;
	Node0x1b91cf0 -> Node0x1b92260;
	Node0x1b92260 -> Node0x1b922d0;
	Node0x1b91d60 -> Node0x1b922d0;
	Node0x1b922d0 -> Node0x1b92340;
	Node0x1b91f20 -> Node0x1b92340;
	Node0x1b92340 -> Node0x1b923b0;
	Node0x1b92070 -> Node0x1b923b0;
	Node0x1b923b0 -> Node0x1b92420;
	Node0x1b91bc0 -> Node0x1b92420;
	Node0x1b92420 -> Node0x1b92490;
	Node0x1b91e40 -> Node0x1b92490;
	Node0x1b92490 -> Node0x1b92500;
	Node0x1b92180 -> Node0x1b92500;
	Node0x1b91c80 -> Node0x1b92570;
	Node0x1b92500 -> Node0x1b92570;
	Node0x1b92570 -> Node0x1b32268;
	Node0x1b32268 -> Node0x1b92a10;
}
