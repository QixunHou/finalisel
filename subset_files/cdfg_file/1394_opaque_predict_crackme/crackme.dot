digraph "DFG for'crackme' function" {
	Node0xaaf3f0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0xaaf460[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0xaafb30[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0xaafbd0[shape=record, label="  %6 = mul i32 %5, 5"];
	Node0xaafc40[shape=record, label="  %7 = and i32 %1, %0"];
	Node0xaafce0[shape=record, label="  %8 = shl i32 %4, 1"];
	Node0xaafd50[shape=record, label="  %9 = xor i32 %3, -1"];
	Node0xaafdc0[shape=record, label="  %10 = mul i32 %9, 5"];
	Node0xaafe30[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xaafed0[shape=record, label="  %12 = shl i32 %7, 2"];
	Node0xaaff40[shape=record, label="  %13 = sub i32 1, %3"];
	Node0xaaffb0[shape=record, label="  %14 = add i32 %13, %7"];
	Node0xab0020[shape=record, label="  %15 = add i32 %14, %6"];
	Node0xab0090[shape=record, label="  %16 = add i32 %15, %8"];
	Node0xab0100[shape=record, label="  %17 = add i32 %16, %11"];
	Node0xab0170[shape=record, label="  %18 = sub i32 %17, %12"];
	Node0xab01e0[shape=record, label="  %19 = icmp eq i32 %3, %18"];
	Node0xa50268[shape=record, label="  %20 = select i1 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xab0680[shape=record, label="  %21 = tail call i32 @puts(i8* nonnull dereferenceable(1) %20)"];
	Node0xab06d0[shape=record, label="  ret void"];
	Node0xaaf3f0 -> Node0xaaf460;
	Node0xaaf460 -> Node0xaafb30;
	Node0xaafb30 -> Node0xaafbd0;
	Node0xaafbd0 -> Node0xaafc40;
	Node0xaafc40 -> Node0xaafce0;
	Node0xaafce0 -> Node0xaafd50;
	Node0xaafd50 -> Node0xaafdc0;
	Node0xaafdc0 -> Node0xaafe30;
	Node0xaafe30 -> Node0xaafed0;
	Node0xaafed0 -> Node0xaaff40;
	Node0xaaff40 -> Node0xaaffb0;
	Node0xaaffb0 -> Node0xab0020;
	Node0xab0020 -> Node0xab0090;
	Node0xab0090 -> Node0xab0100;
	Node0xab0100 -> Node0xab0170;
	Node0xab0170 -> Node0xab01e0;
	Node0xab01e0 -> Node0xa50268;
	Node0xa50268 -> Node0xab0680;
	Node0xab0680 -> Node0xab06d0;
edge [color=red]
	Node0xaaf460 -> Node0xaafb30;
	Node0xaafb30 -> Node0xaafbd0;
	Node0xaaf460 -> Node0xaafce0;
	Node0xaaf3f0 -> Node0xaafd50;
	Node0xaafd50 -> Node0xaafdc0;
	Node0xaafdc0 -> Node0xaafe30;
	Node0xaafc40 -> Node0xaafed0;
	Node0xaaf3f0 -> Node0xaaff40;
	Node0xaaff40 -> Node0xaaffb0;
	Node0xaafc40 -> Node0xaaffb0;
	Node0xaaffb0 -> Node0xab0020;
	Node0xaafbd0 -> Node0xab0020;
	Node0xab0020 -> Node0xab0090;
	Node0xaafce0 -> Node0xab0090;
	Node0xab0090 -> Node0xab0100;
	Node0xaafe30 -> Node0xab0100;
	Node0xab0100 -> Node0xab0170;
	Node0xaafed0 -> Node0xab0170;
	Node0xaaf3f0 -> Node0xab01e0;
	Node0xab0170 -> Node0xab01e0;
	Node0xab01e0 -> Node0xa50268;
	Node0xa50268 -> Node0xab0680;
}
