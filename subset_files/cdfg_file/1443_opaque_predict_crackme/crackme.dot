digraph "DFG for'crackme' function" {
	Node0x4f72a0[shape=record, label="  %3 = sub i32 %0, %1"];
	Node0x4f7950[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x4f7a10[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x4f7a80[shape=record, label="  %6 = mul i32 %5, 3"];
	Node0x4f7af0[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x4f7b60[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x4f7bd0[shape=record, label="  %9 = add i32 %7, %0"];
	Node0x4f7c40[shape=record, label="  %10 = sub i32 %8, %9"];
	Node0x4f7cb0[shape=record, label="  %11 = add i32 %10, %6"];
	Node0x4f7d20[shape=record, label="  %12 = icmp eq i32 %3, %11"];
	Node0x498388[shape=record, label="  %13 = select i1 %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x4f81c0[shape=record, label="  %14 = tail call i32 @puts(i8* nonnull dereferenceable(1) %13)"];
	Node0x4f8210[shape=record, label="  ret void"];
	Node0x4f72a0 -> Node0x4f7950;
	Node0x4f7950 -> Node0x4f7a10;
	Node0x4f7a10 -> Node0x4f7a80;
	Node0x4f7a80 -> Node0x4f7af0;
	Node0x4f7af0 -> Node0x4f7b60;
	Node0x4f7b60 -> Node0x4f7bd0;
	Node0x4f7bd0 -> Node0x4f7c40;
	Node0x4f7c40 -> Node0x4f7cb0;
	Node0x4f7cb0 -> Node0x4f7d20;
	Node0x4f7d20 -> Node0x498388;
	Node0x498388 -> Node0x4f81c0;
	Node0x4f81c0 -> Node0x4f8210;
edge [color=red]
	Node0x4f7950 -> Node0x4f7a10;
	Node0x4f7a10 -> Node0x4f7a80;
	Node0x4f7af0 -> Node0x4f7bd0;
	Node0x4f7b60 -> Node0x4f7c40;
	Node0x4f7bd0 -> Node0x4f7c40;
	Node0x4f7c40 -> Node0x4f7cb0;
	Node0x4f7a80 -> Node0x4f7cb0;
	Node0x4f72a0 -> Node0x4f7d20;
	Node0x4f7cb0 -> Node0x4f7d20;
	Node0x4f7d20 -> Node0x498388;
	Node0x498388 -> Node0x4f81c0;
}
