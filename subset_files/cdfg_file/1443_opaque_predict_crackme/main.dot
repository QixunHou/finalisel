digraph "DFG for'main' function" {
	Node0x4f83d8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x4f8488[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x4f8518[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x4f8978[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x4f8a58[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x4f8b78[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x4f8db0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x4f8e68[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x4f9dd8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x4fa460[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0x4fa4d0[shape=record, label="  %9 = xor i32 %7, -1"];
	Node0x4fa540[shape=record, label="  %10 = and i32 %6, %9"];
	Node0x4fa5b0[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x4fa620[shape=record, label="  %12 = xor i32 %7, %6"];
	Node0x4fa690[shape=record, label="  %13 = and i32 %7, %6"];
	Node0x4fa700[shape=record, label="  %14 = add i32 %12, %6"];
	Node0x4fa770[shape=record, label="  %15 = sub i32 %13, %14"];
	Node0x4fa7e0[shape=record, label="  %16 = add i32 %15, %11"];
	Node0x4fa850[shape=record, label="  %17 = icmp eq i32 %8, %16"];
	Node0x4999d8[shape=record, label="  %18 = select i1 %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x4fa8e0[shape=record, label="  %19 = call i32 @puts(i8* nonnull dereferenceable(1) %18) #5"];
	Node0x4fab38[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x4fac98[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x4fad58[shape=record, label="  ret i32 0"];
	Node0x4f83d8 -> Node0x4f8488;
	Node0x4f8488 -> Node0x4f8518;
	Node0x4f8518 -> Node0x4f8978;
	Node0x4f8978 -> Node0x4f8a58;
	Node0x4f8a58 -> Node0x4f8b78;
	Node0x4f8b78 -> Node0x4f8db0;
	Node0x4f8db0 -> Node0x4f8e68;
	Node0x4f8e68 -> Node0x4f9dd8;
	Node0x4f9dd8 -> Node0x4fa460;
	Node0x4fa460 -> Node0x4fa4d0;
	Node0x4fa4d0 -> Node0x4fa540;
	Node0x4fa540 -> Node0x4fa5b0;
	Node0x4fa5b0 -> Node0x4fa620;
	Node0x4fa620 -> Node0x4fa690;
	Node0x4fa690 -> Node0x4fa700;
	Node0x4fa700 -> Node0x4fa770;
	Node0x4fa770 -> Node0x4fa7e0;
	Node0x4fa7e0 -> Node0x4fa850;
	Node0x4fa850 -> Node0x4999d8;
	Node0x4999d8 -> Node0x4fa8e0;
	Node0x4fa8e0 -> Node0x4fab38;
	Node0x4fab38 -> Node0x4fac98;
	Node0x4fac98 -> Node0x4fad58;
edge [color=red]
	Node0x4f83d8 -> Node0x4f8518;
	Node0x4f8518 -> Node0x4f8978;
	Node0x4f8488 -> Node0x4f8a58;
	Node0x4f8a58 -> Node0x4f8b78;
	Node0x4f83d8 -> Node0x4f8db0;
	Node0x4f8488 -> Node0x4f8db0;
	Node0x4f83d8 -> Node0x4f8e68;
	Node0x4f8488 -> Node0x4f9dd8;
	Node0x4f8e68 -> Node0x4fa460;
	Node0x4f9dd8 -> Node0x4fa460;
	Node0x4f9dd8 -> Node0x4fa4d0;
	Node0x4f8e68 -> Node0x4fa540;
	Node0x4fa4d0 -> Node0x4fa540;
	Node0x4fa540 -> Node0x4fa5b0;
	Node0x4f9dd8 -> Node0x4fa620;
	Node0x4f8e68 -> Node0x4fa620;
	Node0x4f9dd8 -> Node0x4fa690;
	Node0x4f8e68 -> Node0x4fa690;
	Node0x4fa620 -> Node0x4fa700;
	Node0x4f8e68 -> Node0x4fa700;
	Node0x4fa690 -> Node0x4fa770;
	Node0x4fa700 -> Node0x4fa770;
	Node0x4fa770 -> Node0x4fa7e0;
	Node0x4fa5b0 -> Node0x4fa7e0;
	Node0x4fa460 -> Node0x4fa850;
	Node0x4fa7e0 -> Node0x4fa850;
	Node0x4fa850 -> Node0x4999d8;
	Node0x4999d8 -> Node0x4fa8e0;
	Node0x4f8a58 -> Node0x4fab38;
	Node0x4f8518 -> Node0x4fac98;
}
