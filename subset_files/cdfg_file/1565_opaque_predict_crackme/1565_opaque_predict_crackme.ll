; ModuleID = '../.././c_source_file/1565_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1565_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %1
  %10 = and i32 %9, %8
  %11 = mul i32 %10, -2
  %12 = xor i32 %5, -1
  %13 = or i32 %12, %4
  %14 = xor i32 %4, %3
  %15 = and i32 %13, %14
  %16 = sub i32 %11, %15
  %17 = or i32 %2, %1
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %0
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %22, %2
  %24 = shl i32 %23, 1
  %25 = and i32 %2, %1
  %26 = and i32 %25, %0
  %27 = xor i32 %17, %0
  %28 = xor i32 %26, -1
  %29 = xor i32 %27, %28
  %30 = and i32 %2, %0
  %31 = or i32 %30, %18
  %32 = or i32 %25, %0
  %33 = xor i32 %25, -1
  %34 = xor i32 %33, %0
  %35 = xor i32 %1, %0
  %36 = or i32 %30, %35
  %37 = shl i32 %36, 1
  %38 = xor i32 %0, -1
  %39 = or i32 %25, %38
  %40 = xor i32 %9, -1
  %41 = or i32 %7, %40
  %42 = xor i32 %2, -1
  %43 = or i32 %42, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %0
  %46 = and i32 %9, %38
  %47 = xor i32 %46, %28
  %48 = or i32 %42, %0
  %49 = and i32 %48, %1
  %50 = xor i32 %2, %0
  %51 = and i32 %50, %20
  %52 = and i32 %17, %0
  %53 = and i32 %42, %1
  %54 = xor i32 %48, -1
  %55 = or i32 %7, %54
  %56 = xor i32 %43, %0
  %57 = and i32 %33, %0
  %58 = shl i32 %57, 1
  %59 = xor i32 %50, -1
  %60 = or i32 %59, %20
  %61 = add i32 %50, 1
  %62 = and i32 %59, %1
  %63 = or i32 %20, %0
  %64 = and i32 %9, %63
  %65 = xor i32 %18, %0
  %66 = or i32 %2, %0
  %67 = xor i32 %66, -1
  %68 = xor i32 %35, -1
  %69 = or i32 %67, %68
  %70 = and i32 %50, %1
  %71 = or i32 %30, %68
  %72 = or i32 %21, %42
  %73 = and i32 %8, %2
  %74 = or i32 %54, %68
  %75 = or i32 %40, %38
  %76 = and i32 %42, %0
  %77 = xor i32 %76, -1
  %78 = and i32 %77, %68
  %79 = and i32 %25, %38
  %80 = and i32 %9, %0
  %81 = xor i32 %79, -1
  %82 = xor i32 %80, %81
  %83 = xor i32 %66, %1
  %84 = or i32 %76, %35
  %85 = and i32 %66, %35
  %86 = xor i32 %53, -1
  %87 = or i32 %33, %38
  %88 = or i32 %1, %0
  %89 = xor i32 %88, -1
  %90 = or i32 %35, %54
  %91 = and i32 %20, %2
  %92 = and i32 %91, %0
  %93 = xor i32 %9, %0
  %94 = or i32 %92, %93
  %95 = or i32 %53, %21
  %96 = and i32 %88, %59
  %97 = shl i32 %96, 1
  %98 = xor i32 %63, -1
  %99 = or i32 %9, %98
  %100 = or i32 %67, %20
  %101 = shl i32 %98, 2
  %102 = and i32 %35, %42
  %103 = and i32 %22, %2
  %104 = or i32 %9, %7
  %105 = and i32 %43, %38
  %106 = xor i32 %93, -1
  %107 = or i32 %26, %106
  %108 = and i32 %50, %8
  %109 = and i32 %88, %2
  %110 = and i32 %33, %38
  %111 = xor i32 %25, %0
  %112 = or i32 %59, %89
  %113 = or i32 %50, %21
  %114 = xor i32 %40, %0
  %115 = xor i32 %86, %0
  %116 = xor i32 %89, %2
  %117 = shl i32 %116, 1
  %118 = and i32 %42, %8
  %119 = xor i32 %67, %1
  %120 = or i32 %9, %38
  %121 = or i32 %42, %68
  %122 = or i32 %68, %2
  %123 = or i32 %30, %1
  %124 = and i32 %17, %38
  %125 = or i32 %26, %124
  %126 = and i32 %42, %22
  %127 = shl i32 %126, 1
  %128 = or i32 %89, %2
  %129 = and i32 %50, %22
  %130 = add i32 %66, 1
  %131 = xor i32 %52, %81
  %132 = or i32 %50, %20
  %133 = or i32 %7, %2
  %134 = and i32 %66, %68
  %135 = add i32 %2, 1
  %136 = or i32 %98, %2
  %137 = shl i32 %38, 1
  %138 = xor i32 %92, %106
  %139 = or i32 %53, %0
  %140 = xor i32 %44, %0
  %141 = or i32 %50, %68
  %142 = add i32 %7, 1
  %143 = xor i32 %77, %1
  %144 = or i32 %44, %38
  %145 = or i32 %17, %0
  %146 = shl i32 %48, 1
  %147 = xor i32 %30, -1
  %148 = and i32 %35, %147
  %149 = and i32 %48, %68
  %150 = or i32 %76, %68
  %151 = and i32 %42, %68
  %152 = or i32 %43, %38
  %153 = and i32 %88, %42
  %154 = xor i32 %30, %1
  %155 = and i32 %77, %1
  %156 = or i32 %7, %67
  %157 = or i32 %76, %20
  %158 = or i32 %59, %68
  %159 = xor i32 %7, %2
  %160 = and i32 %147, %20
  %161 = or i32 %7, %42
  %162 = and i32 %50, %35
  %163 = or i32 %42, %89
  %164 = xor i32 %30, %86
  %165 = or i32 %9, %0
  %166 = and i32 %91, %38
  %167 = xor i32 %120, -1
  %168 = or i32 %166, %167
  %169 = xor i32 %8, %2
  %170 = and i32 %63, %42
  %171 = or i32 %26, %27
  %172 = or i32 %86, %0
  %173 = shl i32 %50, 1
  %174 = xor i32 %98, %2
  %175 = shl i32 %174, 1
  %176 = or i32 %18, %38
  %177 = and i32 %88, %40
  %178 = shl i32 %177, 1
  %179 = or i32 %7, %18
  %180 = add i32 %17, 1
  %181 = or i32 %35, %42
  %182 = and i32 %18, %38
  %183 = and i32 %53, %38
  %184 = shl i32 %183, 3
  %185 = and i32 %18, %0
  %186 = mul i32 %185, 9
  %187 = and i32 %53, %0
  %188 = and i32 %44, %38
  %189 = mul i32 %79, 11
  %190 = and i32 %44, %0
  %191 = shl i32 %190, 4
  %192 = xor i32 %13, -1
  %193 = or i32 %192, %3
  %194 = shl i32 %193, 1
  %195 = or i32 %5, %3
  %196 = xor i32 %195, -1
  %197 = add i32 %195, 1
  %198 = xor i32 %4, -1
  %199 = xor i32 %5, %3
  %200 = or i32 %199, %198
  %201 = xor i32 %5, %4
  %202 = and i32 %201, %14
  %203 = or i32 %196, %198
  %204 = and i32 %5, %4
  %205 = xor i32 %3, -1
  %206 = or i32 %205, %4
  %207 = xor i32 %206, -1
  %208 = or i32 %204, %207
  %209 = and i32 %205, %4
  %210 = xor i32 %201, -1
  %211 = or i32 %209, %210
  %212 = or i32 %199, %207
  %213 = and i32 %206, %12
  %214 = or i32 %201, %205
  %215 = and i32 %4, %3
  %216 = xor i32 %215, -1
  %217 = and i32 %210, %216
  %218 = and i32 %12, %4
  %219 = xor i32 %209, -1
  %220 = and i32 %12, %219
  %221 = or i32 %204, %3
  %222 = and i32 %12, %3
  %223 = xor i32 %222, -1
  %224 = and i32 %223, %4
  %225 = shl i32 %224, 1
  %226 = xor i32 %218, -1
  %227 = and i32 %14, %226
  %228 = add i32 %5, 1
  %229 = and i32 %201, %206
  %230 = xor i32 %195, %4
  %231 = or i32 %5, %4
  %232 = and i32 %231, %3
  %233 = and i32 %5, %3
  %234 = xor i32 %233, -1
  %235 = or i32 %234, %198
  %236 = xor i32 %199, -1
  %237 = and i32 %236, %4
  %238 = xor i32 %196, %4
  %239 = or i32 %201, %3
  %240 = and i32 %205, %5
  %241 = and i32 %240, %198
  %242 = or i32 %205, %5
  %243 = and i32 %242, %4
  %244 = or i32 %241, %243
  %245 = add i32 %201, 1
  %246 = or i32 %233, %198
  %247 = and i32 %210, %3
  %248 = or i32 %207, %5
  %249 = xor i32 %14, -1
  %250 = or i32 %204, %249
  %251 = and i32 %210, %219
  %252 = and i32 %233, %4
  %253 = xor i32 %252, -1
  %254 = xor i32 %230, %253
  %255 = xor i32 %204, -1
  %256 = xor i32 %255, %3
  %257 = shl i32 %256, 1
  %258 = xor i32 %204, %3
  %259 = and i32 %255, %249
  %260 = or i32 %215, %196
  %261 = and i32 %240, %4
  %262 = xor i32 %199, %4
  %263 = or i32 %261, %262
  %264 = or i32 %192, %205
  %265 = and i32 %13, %249
  %266 = or i32 %4, %3
  %267 = xor i32 %266, -1
  %268 = xor i32 %267, %5
  %269 = or i32 %236, %198
  %270 = and i32 %195, %198
  %271 = xor i32 %270, %253
  %272 = or i32 %236, %207
  %273 = xor i32 %207, %5
  %274 = and i32 %12, %249
  %275 = xor i32 %218, %234
  %276 = shl i32 %275, 1
  %277 = or i32 %252, %230
  %278 = and i32 %234, %4
  %279 = and i32 %201, %266
  %280 = or i32 %210, %3
  %281 = shl i32 %280, 1
  %282 = or i32 %192, %249
  %283 = xor i32 %206, %5
  %284 = and i32 %255, %205
  %285 = and i32 %201, %216
  %286 = or i32 %12, %207
  %287 = or i32 %210, %207
  %288 = and i32 %201, %219
  %289 = or i32 %215, %5
  %290 = xor i32 %219, %5
  %291 = or i32 %252, %270
  %292 = or i32 %12, %3
  %293 = xor i32 %292, %4
  %294 = or i32 %204, %196
  %295 = or i32 %222, %198
  %296 = and i32 %233, %198
  %297 = and i32 %199, %4
  %298 = or i32 %296, %297
  %299 = or i32 %218, %205
  %300 = xor i32 %231, -1
  %301 = or i32 %300, %249
  %302 = shl i32 %301, 1
  %303 = or i32 %209, %236
  %304 = and i32 %13, %3
  %305 = or i32 %204, %205
  %306 = shl i32 %223, 1
  %307 = shl i32 %209, 1
  %308 = and i32 %14, %255
  %309 = and i32 %266, %12
  %310 = or i32 %234, %4
  %311 = or i32 %199, %267
  %312 = xor i32 %216, %5
  %313 = add i32 %4, 1
  %314 = xor i32 %209, %5
  %315 = and i32 %226, %249
  %316 = or i32 %218, %14
  %317 = or i32 %196, %4
  %318 = xor i32 %292, %215
  %319 = or i32 %201, %207
  %320 = and i32 %236, %219
  %321 = and i32 %210, %205
  %322 = or i32 %209, %12
  %323 = and i32 %199, %206
  %324 = xor i32 %292, -1
  %325 = or i32 %324, %198
  %326 = shl i32 %325, 2
  %327 = or i32 %223, %198
  %328 = and i32 %199, %216
  %329 = or i32 %201, %14
  %330 = or i32 %199, %4
  %331 = xor i32 %261, %330
  %332 = and i32 %206, %210
  %333 = xor i32 %324, %4
  %334 = xor i32 %204, %223
  %335 = shl i32 %334, 1
  %336 = xor i32 %233, %4
  %337 = shl i32 %336, 1
  %338 = xor i32 %243, -1
  %339 = xor i32 %241, %338
  %340 = xor i32 %242, -1
  %341 = or i32 %340, %4
  %342 = xor i32 %261, %341
  %343 = and i32 %199, %198
  %344 = or i32 %252, %343
  %345 = xor i32 %13, %3
  %346 = or i32 %236, %4
  %347 = or i32 %199, %215
  %348 = and i32 %226, %3
  %349 = or i32 %215, %324
  %350 = shl i32 %206, 1
  %351 = and i32 %199, %219
  %352 = or i32 %300, %3
  %353 = shl i32 %352, 2
  %354 = xor i32 %204, %195
  %355 = and i32 %196, %198
  %356 = and i32 %222, %198
  %357 = and i32 %196, %4
  %358 = and i32 %222, %4
  %359 = and i32 %324, %198
  %360 = and i32 %324, %4
  %361 = add i32 %68, %20
  %362 = add i32 %361, %2
  %363 = add i32 %362, %169
  %364 = add i32 %363, %103
  %365 = add i32 %364, %72
  %366 = add i32 %365, %93
  %367 = add i32 %366, %158
  %368 = add i32 %367, %111
  %369 = add i32 %368, %110
  %370 = add i32 %369, %105
  %371 = add i32 %370, %60
  %372 = add i32 %371, %39
  %373 = add i32 %372, %215
  %374 = add i32 %373, %94
  %375 = add i32 %374, %292
  %376 = add i32 %375, %297
  %377 = add i32 %376, %329
  %378 = add i32 %377, %318
  %379 = add i32 %378, %294
  %380 = add i32 %379, %282
  %381 = add i32 %380, %272
  %382 = add i32 %381, %239
  %383 = add i32 %382, %227
  %384 = add i32 %383, %331
  %385 = shl i32 %384, 1
  %386 = sub i32 %142, %26
  %387 = add i32 %386, %249
  %388 = add i32 %387, %357
  %389 = add i32 %388, %356
  %390 = sub i32 %389, %344
  %391 = mul i32 %390, 5
  %392 = add i32 %115, %119
  %393 = add i32 %392, %255
  %394 = add i32 %393, %252
  %395 = shl i32 %394, 2
  %396 = add i32 %359, %358
  %397 = mul i32 %396, -6
  %398 = add i32 %360, %355
  %399 = mul i32 %398, 12
  %400 = add i32 %188, %182
  %401 = mul i32 %400, -7
  %402 = add i32 %185, %248
  %403 = sub i32 %402, %316
  %404 = add i32 %403, %277
  %405 = mul i32 %404, 3
  %406 = sub i32 2, %137
  %407 = add i32 %406, %89
  %408 = sub i32 %407, %7
  %409 = add i32 %408, %135
  %410 = sub i32 %409, %53
  %411 = sub i32 %410, %17
  %412 = sub i32 %411, %25
  %413 = add i32 %412, %61
  %414 = add i32 %413, %73
  %415 = add i32 %414, %86
  %416 = add i32 %415, %54
  %417 = sub i32 %416, %101
  %418 = add i32 %417, %102
  %419 = sub i32 %418, %109
  %420 = add i32 %419, %118
  %421 = add i32 %420, %121
  %422 = add i32 %421, %122
  %423 = sub i32 %422, %128
  %424 = add i32 %423, %130
  %425 = sub i32 %424, %76
  %426 = sub i32 %425, %133
  %427 = add i32 %426, %136
  %428 = add i32 %427, %151
  %429 = sub i32 %428, %153
  %430 = sub i32 %429, %159
  %431 = add i32 %430, %161
  %432 = add i32 %431, %163
  %433 = sub i32 %432, %170
  %434 = add i32 %433, %33
  %435 = add i32 %434, %180
  %436 = sub i32 %435, %181
  %437 = add i32 %436, %205
  %438 = sub i32 %437, %24
  %439 = add i32 %438, %19
  %440 = sub i32 %439, %31
  %441 = add i32 %440, %32
  %442 = sub i32 %441, %34
  %443 = add i32 %442, %41
  %444 = sub i32 %443, %45
  %445 = sub i32 %444, %49
  %446 = add i32 %445, %51
  %447 = sub i32 %446, %52
  %448 = add i32 %447, %55
  %449 = sub i32 %448, %56
  %450 = add i32 %449, %62
  %451 = sub i32 %450, %64
  %452 = add i32 %451, %65
  %453 = sub i32 %452, %69
  %454 = add i32 %453, %70
  %455 = sub i32 %454, %71
  %456 = sub i32 %455, %74
  %457 = add i32 %456, %75
  %458 = add i32 %457, %78
  %459 = sub i32 %458, %83
  %460 = sub i32 %459, %84
  %461 = sub i32 %460, %85
  %462 = add i32 %461, %87
  %463 = sub i32 %462, %90
  %464 = add i32 %463, %95
  %465 = add i32 %464, %99
  %466 = sub i32 %465, %100
  %467 = add i32 %466, %46
  %468 = add i32 %467, %104
  %469 = sub i32 %468, %108
  %470 = add i32 %469, %112
  %471 = sub i32 %470, %113
  %472 = add i32 %471, %114
  %473 = sub i32 %472, %117
  %474 = add i32 %473, %120
  %475 = sub i32 %474, %123
  %476 = sub i32 %475, %127
  %477 = sub i32 %476, %129
  %478 = sub i32 %477, %132
  %479 = add i32 %478, %134
  %480 = add i32 %479, %139
  %481 = sub i32 %480, %140
  %482 = add i32 %481, %141
  %483 = sub i32 %482, %143
  %484 = sub i32 %483, %144
  %485 = sub i32 %484, %145
  %486 = sub i32 %485, %146
  %487 = sub i32 %486, %148
  %488 = sub i32 %487, %149
  %489 = add i32 %488, %150
  %490 = add i32 %489, %152
  %491 = add i32 %490, %154
  %492 = sub i32 %491, %155
  %493 = add i32 %492, %156
  %494 = sub i32 %493, %157
  %495 = sub i32 %494, %160
  %496 = sub i32 %495, %162
  %497 = sub i32 %496, %164
  %498 = sub i32 %497, %165
  %499 = add i32 %498, %27
  %500 = sub i32 %499, %172
  %501 = sub i32 %500, %173
  %502 = sub i32 %501, %175
  %503 = add i32 %502, %176
  %504 = add i32 %503, %179
  %505 = add i32 %504, %187
  %506 = add i32 %505, %313
  %507 = sub i32 %506, %29
  %508 = sub i32 %507, %37
  %509 = sub i32 %508, %47
  %510 = sub i32 %509, %58
  %511 = sub i32 %510, %82
  %512 = sub i32 %511, %97
  %513 = add i32 %512, %107
  %514 = sub i32 %513, %125
  %515 = sub i32 %514, %131
  %516 = sub i32 %515, %138
  %517 = sub i32 %516, %168
  %518 = sub i32 %517, %171
  %519 = sub i32 %518, %178
  %520 = add i32 %519, %184
  %521 = add i32 %520, %186
  %522 = add i32 %521, %189
  %523 = add i32 %522, %191
  %524 = add i32 %523, %228
  %525 = add i32 %524, %207
  %526 = sub i32 %525, %14
  %527 = add i32 %526, %197
  %528 = sub i32 %527, %213
  %529 = add i32 %528, %218
  %530 = add i32 %529, %220
  %531 = add i32 %530, %245
  %532 = add i32 %531, %268
  %533 = add i32 %532, %273
  %534 = add i32 %533, %274
  %535 = sub i32 %534, %283
  %536 = sub i32 %535, %286
  %537 = add i32 %536, %289
  %538 = sub i32 %537, %290
  %539 = sub i32 %538, %307
  %540 = sub i32 %539, %309
  %541 = add i32 %540, %312
  %542 = sub i32 %541, %314
  %543 = add i32 %542, %322
  %544 = sub i32 %543, %350
  %545 = add i32 %544, %401
  %546 = add i32 %545, %200
  %547 = sub i32 %546, %202
  %548 = sub i32 %547, %203
  %549 = add i32 %548, %208
  %550 = sub i32 %549, %211
  %551 = add i32 %550, %212
  %552 = add i32 %551, %214
  %553 = sub i32 %552, %217
  %554 = sub i32 %553, %221
  %555 = sub i32 %554, %229
  %556 = add i32 %555, %230
  %557 = add i32 %556, %232
  %558 = sub i32 %557, %235
  %559 = sub i32 %558, %237
  %560 = sub i32 %559, %238
  %561 = sub i32 %560, %246
  %562 = sub i32 %561, %247
  %563 = add i32 %562, %250
  %564 = add i32 %563, %251
  %565 = sub i32 %564, %258
  %566 = sub i32 %565, %259
  %567 = sub i32 %566, %260
  %568 = add i32 %567, %264
  %569 = add i32 %568, %265
  %570 = add i32 %569, %269
  %571 = sub i32 %570, %278
  %572 = add i32 %571, %279
  %573 = add i32 %572, %284
  %574 = sub i32 %573, %285
  %575 = sub i32 %574, %287
  %576 = add i32 %575, %288
  %577 = add i32 %576, %293
  %578 = sub i32 %577, %295
  %579 = add i32 %578, %299
  %580 = sub i32 %579, %303
  %581 = sub i32 %580, %304
  %582 = sub i32 %581, %305
  %583 = sub i32 %582, %306
  %584 = sub i32 %583, %308
  %585 = sub i32 %584, %310
  %586 = sub i32 %585, %311
  %587 = sub i32 %586, %315
  %588 = sub i32 %587, %317
  %589 = add i32 %588, %319
  %590 = add i32 %589, %320
  %591 = sub i32 %590, %321
  %592 = add i32 %591, %323
  %593 = sub i32 %592, %327
  %594 = add i32 %593, %328
  %595 = sub i32 %594, %332
  %596 = add i32 %595, %333
  %597 = sub i32 %596, %345
  %598 = add i32 %597, %346
  %599 = add i32 %598, %347
  %600 = sub i32 %599, %348
  %601 = sub i32 %600, %349
  %602 = add i32 %601, %351
  %603 = add i32 %602, %354
  %604 = sub i32 %603, %296
  %605 = sub i32 %604, %194
  %606 = sub i32 %605, %225
  %607 = sub i32 %606, %244
  %608 = add i32 %607, %254
  %609 = sub i32 %608, %257
  %610 = add i32 %609, %263
  %611 = add i32 %610, %271
  %612 = sub i32 %611, %276
  %613 = sub i32 %612, %281
  %614 = add i32 %613, %291
  %615 = sub i32 %614, %298
  %616 = sub i32 %615, %302
  %617 = sub i32 %616, %326
  %618 = sub i32 %617, %335
  %619 = sub i32 %618, %337
  %620 = sub i32 %619, %339
  %621 = sub i32 %620, %342
  %622 = sub i32 %621, %353
  %623 = add i32 %622, %397
  %624 = add i32 %623, %399
  %625 = add i32 %624, %395
  %626 = add i32 %625, %405
  %627 = add i32 %626, %391
  %628 = add i32 %627, %385
  %629 = icmp eq i32 %16, %628
  %630 = select i1 %629, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %631 = tail call i32 @puts(i8* nonnull dereferenceable(1) %630)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
