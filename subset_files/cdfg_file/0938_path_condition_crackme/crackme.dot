digraph "DFG for'crackme' function" {
	Node0x20b13f0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x20b1aa0[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x20b1b60[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x20b1bd0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x20b1c40[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x20b1cb0[shape=record, label="  %8 = or i32 %5, 1"];
	Node0x20b1d20[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x20b1d90[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x20b1e00[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x20b1ea0[shape=record, label="  %12 = mul i32 %0, -5"];
	Node0x20b1f10[shape=record, label="  %13 = sub i32 %0, %1"];
	Node0x20b1f80[shape=record, label="  %14 = add i32 %13, %7"];
	Node0x20b1ff0[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x20b2060[shape=record, label="  %16 = add i32 %15, %9"];
	Node0x20b20d0[shape=record, label="  %17 = add i32 %16, %11"];
	Node0x20b2140[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x20b21b0[shape=record, label="  %19 = icmp eq i32 %4, %18"];
	Node0x2052268[shape=record, label="  %20 = select i1 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x20b2650[shape=record, label="  %21 = tail call i32 @puts(i8* nonnull dereferenceable(1) %20)"];
	Node0x20b26a0[shape=record, label="  ret void"];
	Node0x20b13f0 -> Node0x20b1aa0;
	Node0x20b1aa0 -> Node0x20b1b60;
	Node0x20b1b60 -> Node0x20b1bd0;
	Node0x20b1bd0 -> Node0x20b1c40;
	Node0x20b1c40 -> Node0x20b1cb0;
	Node0x20b1cb0 -> Node0x20b1d20;
	Node0x20b1d20 -> Node0x20b1d90;
	Node0x20b1d90 -> Node0x20b1e00;
	Node0x20b1e00 -> Node0x20b1ea0;
	Node0x20b1ea0 -> Node0x20b1f10;
	Node0x20b1f10 -> Node0x20b1f80;
	Node0x20b1f80 -> Node0x20b1ff0;
	Node0x20b1ff0 -> Node0x20b2060;
	Node0x20b2060 -> Node0x20b20d0;
	Node0x20b20d0 -> Node0x20b2140;
	Node0x20b2140 -> Node0x20b21b0;
	Node0x20b21b0 -> Node0x2052268;
	Node0x2052268 -> Node0x20b2650;
	Node0x20b2650 -> Node0x20b26a0;
edge [color=red]
	Node0x20b13f0 -> Node0x20b1aa0;
	Node0x20b1bd0 -> Node0x20b1c40;
	Node0x20b1b60 -> Node0x20b1cb0;
	Node0x20b1d90 -> Node0x20b1e00;
	Node0x20b1f10 -> Node0x20b1f80;
	Node0x20b1c40 -> Node0x20b1f80;
	Node0x20b1f80 -> Node0x20b1ff0;
	Node0x20b1cb0 -> Node0x20b1ff0;
	Node0x20b1ff0 -> Node0x20b2060;
	Node0x20b1d20 -> Node0x20b2060;
	Node0x20b2060 -> Node0x20b20d0;
	Node0x20b1e00 -> Node0x20b20d0;
	Node0x20b20d0 -> Node0x20b2140;
	Node0x20b1ea0 -> Node0x20b2140;
	Node0x20b1aa0 -> Node0x20b21b0;
	Node0x20b2140 -> Node0x20b21b0;
	Node0x20b21b0 -> Node0x2052268;
	Node0x2052268 -> Node0x20b2650;
}
