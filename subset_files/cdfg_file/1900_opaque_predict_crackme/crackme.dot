digraph "DFG for'crackme' function" {
	Node0x1153570[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1153c20[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x1153ce0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x1153d50[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1153dc0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1153e30[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x1153ea0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1153f40[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1153fb0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x1154020[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1154090[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1154100[shape=record, label="  %14 = or i32 %7, %0"];
	Node0x1154170[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x11541e0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x1154280[shape=record, label="  %17 = mul i32 %8, -5"];
	Node0x1154320[shape=record, label="  %18 = add i32 %3, 2"];
	Node0x1154390[shape=record, label="  %19 = add i32 %18, %14"];
	Node0x1154400[shape=record, label="  %20 = add i32 %19, %5"];
	Node0x1154470[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0x11544e0[shape=record, label="  %22 = add i32 %21, %6"];
	Node0x1154550[shape=record, label="  %23 = add i32 %22, %17"];
	Node0x11545c0[shape=record, label="  %24 = sub i32 %23, %10"];
	Node0x1154630[shape=record, label="  %25 = add i32 %24, %13"];
	Node0x11546a0[shape=record, label="  %26 = sub i32 %25, %16"];
	Node0x1154710[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x10f4268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1154bb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1154c00[shape=record, label="  ret void"];
	Node0x1153570 -> Node0x1153c20;
	Node0x1153c20 -> Node0x1153ce0;
	Node0x1153ce0 -> Node0x1153d50;
	Node0x1153d50 -> Node0x1153dc0;
	Node0x1153dc0 -> Node0x1153e30;
	Node0x1153e30 -> Node0x1153ea0;
	Node0x1153ea0 -> Node0x1153f40;
	Node0x1153f40 -> Node0x1153fb0;
	Node0x1153fb0 -> Node0x1154020;
	Node0x1154020 -> Node0x1154090;
	Node0x1154090 -> Node0x1154100;
	Node0x1154100 -> Node0x1154170;
	Node0x1154170 -> Node0x11541e0;
	Node0x11541e0 -> Node0x1154280;
	Node0x1154280 -> Node0x1154320;
	Node0x1154320 -> Node0x1154390;
	Node0x1154390 -> Node0x1154400;
	Node0x1154400 -> Node0x1154470;
	Node0x1154470 -> Node0x11544e0;
	Node0x11544e0 -> Node0x1154550;
	Node0x1154550 -> Node0x11545c0;
	Node0x11545c0 -> Node0x1154630;
	Node0x1154630 -> Node0x11546a0;
	Node0x11546a0 -> Node0x1154710;
	Node0x1154710 -> Node0x10f4268;
	Node0x10f4268 -> Node0x1154bb0;
	Node0x1154bb0 -> Node0x1154c00;
edge [color=red]
	Node0x1153570 -> Node0x1153c20;
	Node0x1153ce0 -> Node0x1153d50;
	Node0x1153dc0 -> Node0x1153e30;
	Node0x1153e30 -> Node0x1153ea0;
	Node0x1153ea0 -> Node0x1153f40;
	Node0x1153fb0 -> Node0x1154020;
	Node0x1154020 -> Node0x1154090;
	Node0x1153dc0 -> Node0x1154100;
	Node0x1154100 -> Node0x1154170;
	Node0x1154170 -> Node0x11541e0;
	Node0x1153e30 -> Node0x1154280;
	Node0x1153570 -> Node0x1154320;
	Node0x1154320 -> Node0x1154390;
	Node0x1154100 -> Node0x1154390;
	Node0x1154390 -> Node0x1154400;
	Node0x1153ce0 -> Node0x1154400;
	Node0x1154400 -> Node0x1154470;
	Node0x1153fb0 -> Node0x1154470;
	Node0x1154470 -> Node0x11544e0;
	Node0x1153d50 -> Node0x11544e0;
	Node0x11544e0 -> Node0x1154550;
	Node0x1154280 -> Node0x1154550;
	Node0x1154550 -> Node0x11545c0;
	Node0x1153f40 -> Node0x11545c0;
	Node0x11545c0 -> Node0x1154630;
	Node0x1154090 -> Node0x1154630;
	Node0x1154630 -> Node0x11546a0;
	Node0x11541e0 -> Node0x11546a0;
	Node0x1153c20 -> Node0x1154710;
	Node0x11546a0 -> Node0x1154710;
	Node0x1154710 -> Node0x10f4268;
	Node0x10f4268 -> Node0x1154bb0;
}
