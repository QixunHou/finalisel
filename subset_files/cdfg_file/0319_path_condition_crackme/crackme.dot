digraph "DFG for'crackme' function" {
	Node0x81ebe0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x81ec50[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x81ed10[shape=record, label="  %5 = add i32 %4, %3"];
	Node0x81ed80[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x81edf0[shape=record, label="  %7 = shl i32 %0, 2"];
	Node0x81ee60[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x81eed0[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x81ef40[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x81efb0[shape=record, label="  %11 = shl i32 %8, 2"];
	Node0x81f050[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x81f0c0[shape=record, label="  %13 = shl i32 %6, 2"];
	Node0x81f130[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x81f1d0[shape=record, label="  %15 = shl i32 %9, 3"];
	Node0x81f270[shape=record, label="  %16 = mul i32 %10, 6"];
	Node0x81f310[shape=record, label="  %17 = add i32 %1, 4"];
	Node0x81f380[shape=record, label="  %18 = sub i32 %17, %7"];
	Node0x81f3f0[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x81f460[shape=record, label="  %20 = add i32 %19, %4"];
	Node0x81f4d0[shape=record, label="  %21 = sub i32 %20, %8"];
	Node0x81f540[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x81f5b0[shape=record, label="  %23 = add i32 %22, %10"];
	Node0x81f620[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x81f690[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x81f700[shape=record, label="  %26 = add i32 %25, %12"];
	Node0x81f770[shape=record, label="  %27 = add i32 %26, %14"];
	Node0x81f7e0[shape=record, label="  %28 = icmp eq i32 %5, %27"];
	Node0x7bf268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x81fc80[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x81fcd0[shape=record, label="  ret void"];
	Node0x81ebe0 -> Node0x81ec50;
	Node0x81ec50 -> Node0x81ed10;
	Node0x81ed10 -> Node0x81ed80;
	Node0x81ed80 -> Node0x81edf0;
	Node0x81edf0 -> Node0x81ee60;
	Node0x81ee60 -> Node0x81eed0;
	Node0x81eed0 -> Node0x81ef40;
	Node0x81ef40 -> Node0x81efb0;
	Node0x81efb0 -> Node0x81f050;
	Node0x81f050 -> Node0x81f0c0;
	Node0x81f0c0 -> Node0x81f130;
	Node0x81f130 -> Node0x81f1d0;
	Node0x81f1d0 -> Node0x81f270;
	Node0x81f270 -> Node0x81f310;
	Node0x81f310 -> Node0x81f380;
	Node0x81f380 -> Node0x81f3f0;
	Node0x81f3f0 -> Node0x81f460;
	Node0x81f460 -> Node0x81f4d0;
	Node0x81f4d0 -> Node0x81f540;
	Node0x81f540 -> Node0x81f5b0;
	Node0x81f5b0 -> Node0x81f620;
	Node0x81f620 -> Node0x81f690;
	Node0x81f690 -> Node0x81f700;
	Node0x81f700 -> Node0x81f770;
	Node0x81f770 -> Node0x81f7e0;
	Node0x81f7e0 -> Node0x7bf268;
	Node0x7bf268 -> Node0x81fc80;
	Node0x81fc80 -> Node0x81fcd0;
edge [color=red]
	Node0x81ec50 -> Node0x81ed10;
	Node0x81ebe0 -> Node0x81ed10;
	Node0x81ebe0 -> Node0x81ed80;
	Node0x81ebe0 -> Node0x81eed0;
	Node0x81ee60 -> Node0x81efb0;
	Node0x81efb0 -> Node0x81f050;
	Node0x81ed80 -> Node0x81f0c0;
	Node0x81f0c0 -> Node0x81f130;
	Node0x81eed0 -> Node0x81f1d0;
	Node0x81ef40 -> Node0x81f270;
	Node0x81f310 -> Node0x81f380;
	Node0x81edf0 -> Node0x81f380;
	Node0x81f380 -> Node0x81f3f0;
	Node0x81ed80 -> Node0x81f3f0;
	Node0x81f3f0 -> Node0x81f460;
	Node0x81ec50 -> Node0x81f460;
	Node0x81f460 -> Node0x81f4d0;
	Node0x81ee60 -> Node0x81f4d0;
	Node0x81f4d0 -> Node0x81f540;
	Node0x81eed0 -> Node0x81f540;
	Node0x81f540 -> Node0x81f5b0;
	Node0x81ef40 -> Node0x81f5b0;
	Node0x81f5b0 -> Node0x81f620;
	Node0x81f1d0 -> Node0x81f620;
	Node0x81f620 -> Node0x81f690;
	Node0x81f270 -> Node0x81f690;
	Node0x81f690 -> Node0x81f700;
	Node0x81f050 -> Node0x81f700;
	Node0x81f700 -> Node0x81f770;
	Node0x81f130 -> Node0x81f770;
	Node0x81ed10 -> Node0x81f7e0;
	Node0x81f770 -> Node0x81f7e0;
	Node0x81f7e0 -> Node0x7bf268;
	Node0x7bf268 -> Node0x81fc80;
}
