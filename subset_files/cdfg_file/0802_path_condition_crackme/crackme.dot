digraph "DFG for'crackme' function" {
	Node0xa20b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xa20b90[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xa20c50[shape=record, label="  %5 = and i32 %3, %0"];
	Node0xa20cc0[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0xa20d30[shape=record, label="  %7 = or i32 %1, %0"];
	Node0xa20da0[shape=record, label="  %8 = shl i32 %3, 2"];
	Node0xa20e10[shape=record, label="  %9 = xor i32 %3, %0"];
	Node0xa20e80[shape=record, label="  %10 = and i32 %1, %0"];
	Node0xa20ef0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xa20f90[shape=record, label="  %12 = shl i32 %7, 3"];
	Node0xa21030[shape=record, label="  %13 = xor i32 %12, -8"];
	Node0xa210d0[shape=record, label="  %14 = mul i32 %5, -5"];
	Node0xa21140[shape=record, label="  %15 = add i32 %4, %3"];
	Node0xa211b0[shape=record, label="  %16 = add i32 %15, %6"];
	Node0xa21220[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0xa21290[shape=record, label="  %18 = add i32 %17, %8"];
	Node0xa21300[shape=record, label="  %19 = add i32 %18, %9"];
	Node0xa21370[shape=record, label="  %20 = add i32 %19, %11"];
	Node0xa213e0[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0xa21450[shape=record, label="  %22 = add i32 %21, %14"];
	Node0xa214c0[shape=record, label="  %23 = sub i32 %22, %13"];
	Node0xa21530[shape=record, label="  %24 = icmp eq i32 %23, -1"];
	Node0x9c1268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa219d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0xa21a20[shape=record, label="  ret void"];
	Node0xa20b20 -> Node0xa20b90;
	Node0xa20b90 -> Node0xa20c50;
	Node0xa20c50 -> Node0xa20cc0;
	Node0xa20cc0 -> Node0xa20d30;
	Node0xa20d30 -> Node0xa20da0;
	Node0xa20da0 -> Node0xa20e10;
	Node0xa20e10 -> Node0xa20e80;
	Node0xa20e80 -> Node0xa20ef0;
	Node0xa20ef0 -> Node0xa20f90;
	Node0xa20f90 -> Node0xa21030;
	Node0xa21030 -> Node0xa210d0;
	Node0xa210d0 -> Node0xa21140;
	Node0xa21140 -> Node0xa211b0;
	Node0xa211b0 -> Node0xa21220;
	Node0xa21220 -> Node0xa21290;
	Node0xa21290 -> Node0xa21300;
	Node0xa21300 -> Node0xa21370;
	Node0xa21370 -> Node0xa213e0;
	Node0xa213e0 -> Node0xa21450;
	Node0xa21450 -> Node0xa214c0;
	Node0xa214c0 -> Node0xa21530;
	Node0xa21530 -> Node0x9c1268;
	Node0x9c1268 -> Node0xa219d0;
	Node0xa219d0 -> Node0xa21a20;
edge [color=red]
	Node0xa20b20 -> Node0xa20b90;
	Node0xa20b20 -> Node0xa20c50;
	Node0xa20c50 -> Node0xa20cc0;
	Node0xa20b20 -> Node0xa20da0;
	Node0xa20b20 -> Node0xa20e10;
	Node0xa20e80 -> Node0xa20ef0;
	Node0xa20d30 -> Node0xa20f90;
	Node0xa20f90 -> Node0xa21030;
	Node0xa20c50 -> Node0xa210d0;
	Node0xa20b90 -> Node0xa21140;
	Node0xa20b20 -> Node0xa21140;
	Node0xa21140 -> Node0xa211b0;
	Node0xa20cc0 -> Node0xa211b0;
	Node0xa211b0 -> Node0xa21220;
	Node0xa20d30 -> Node0xa21220;
	Node0xa21220 -> Node0xa21290;
	Node0xa20da0 -> Node0xa21290;
	Node0xa21290 -> Node0xa21300;
	Node0xa20e10 -> Node0xa21300;
	Node0xa21300 -> Node0xa21370;
	Node0xa20ef0 -> Node0xa21370;
	Node0xa21370 -> Node0xa213e0;
	Node0xa20e80 -> Node0xa213e0;
	Node0xa213e0 -> Node0xa21450;
	Node0xa210d0 -> Node0xa21450;
	Node0xa21450 -> Node0xa214c0;
	Node0xa21030 -> Node0xa214c0;
	Node0xa214c0 -> Node0xa21530;
	Node0xa21530 -> Node0x9c1268;
	Node0x9c1268 -> Node0xa219d0;
}
