digraph "DFG for'crackme' function" {
	Node0x83c4e0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x83cb90[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x83cc50[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x83ccf0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x83cd90[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x83ce00[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x83ce70[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x83cee0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x83cf50[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x83cff0[shape=record, label="  %12 = mul i32 %8, -5"];
	Node0x83d060[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x83d0d0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x83d170[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x83d1e0[shape=record, label="  %16 = add i32 %7, %0"];
	Node0x83d250[shape=record, label="  %17 = sub i32 %16, %3"];
	Node0x83d2c0[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0x83d330[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x83d3a0[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0x83d410[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x83d480[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0x83d4f0[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x83d560[shape=record, label="  %24 = icmp eq i32 %23, %4"];
	Node0x7dd268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x83da00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x83da50[shape=record, label="  ret void"];
	Node0x83c4e0 -> Node0x83cb90;
	Node0x83cb90 -> Node0x83cc50;
	Node0x83cc50 -> Node0x83ccf0;
	Node0x83ccf0 -> Node0x83cd90;
	Node0x83cd90 -> Node0x83ce00;
	Node0x83ce00 -> Node0x83ce70;
	Node0x83ce70 -> Node0x83cee0;
	Node0x83cee0 -> Node0x83cf50;
	Node0x83cf50 -> Node0x83cff0;
	Node0x83cff0 -> Node0x83d060;
	Node0x83d060 -> Node0x83d0d0;
	Node0x83d0d0 -> Node0x83d170;
	Node0x83d170 -> Node0x83d1e0;
	Node0x83d1e0 -> Node0x83d250;
	Node0x83d250 -> Node0x83d2c0;
	Node0x83d2c0 -> Node0x83d330;
	Node0x83d330 -> Node0x83d3a0;
	Node0x83d3a0 -> Node0x83d410;
	Node0x83d410 -> Node0x83d480;
	Node0x83d480 -> Node0x83d4f0;
	Node0x83d4f0 -> Node0x83d560;
	Node0x83d560 -> Node0x7dd268;
	Node0x7dd268 -> Node0x83da00;
	Node0x83da00 -> Node0x83da50;
edge [color=red]
	Node0x83c4e0 -> Node0x83cb90;
	Node0x83cc50 -> Node0x83ccf0;
	Node0x83cd90 -> Node0x83ce00;
	Node0x83ce70 -> Node0x83cee0;
	Node0x83cee0 -> Node0x83cf50;
	Node0x83ce00 -> Node0x83cff0;
	Node0x83d060 -> Node0x83d0d0;
	Node0x83d0d0 -> Node0x83d170;
	Node0x83cd90 -> Node0x83d1e0;
	Node0x83d1e0 -> Node0x83d250;
	Node0x83c4e0 -> Node0x83d250;
	Node0x83d250 -> Node0x83d2c0;
	Node0x83ccf0 -> Node0x83d2c0;
	Node0x83d2c0 -> Node0x83d330;
	Node0x83ce00 -> Node0x83d330;
	Node0x83d330 -> Node0x83d3a0;
	Node0x83ce70 -> Node0x83d3a0;
	Node0x83d3a0 -> Node0x83d410;
	Node0x83cff0 -> Node0x83d410;
	Node0x83d410 -> Node0x83d480;
	Node0x83cf50 -> Node0x83d480;
	Node0x83d480 -> Node0x83d4f0;
	Node0x83d170 -> Node0x83d4f0;
	Node0x83d4f0 -> Node0x83d560;
	Node0x83cb90 -> Node0x83d560;
	Node0x83d560 -> Node0x7dd268;
	Node0x7dd268 -> Node0x83da00;
}
