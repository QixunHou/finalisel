digraph "DFG for'crackme' function" {
	Node0x2208580[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x2208c30[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x2208cf0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x2208d60[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x2208e00[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x2208e70[shape=record, label="  %8 = add i32 %7, %3"];
	Node0x2208ee0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x2208f50[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x2208fc0[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0x2209030[shape=record, label="  %12 = or i32 %11, 1"];
	Node0x22090d0[shape=record, label="  %13 = shl i32 %3, 2"];
	Node0x2209170[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x2209210[shape=record, label="  %15 = xor i32 %0, 1073741823"];
	Node0x2209280[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x22092f0[shape=record, label="  %17 = shl i32 %16, 2"];
	Node0x2209390[shape=record, label="  %18 = mul i32 %10, 3"];
	Node0x2209400[shape=record, label="  %19 = sub i32 1, %0"];
	Node0x2209470[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x22094e0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x2209550[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x22095c0[shape=record, label="  %23 = add i32 %22, %5"];
	Node0x2209630[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x22096a0[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x2209710[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x2209780[shape=record, label="  %27 = icmp eq i32 %8, %26"];
	Node0x21a9268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2209c20[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x2209c70[shape=record, label="  ret void"];
	Node0x2208580 -> Node0x2208c30;
	Node0x2208c30 -> Node0x2208cf0;
	Node0x2208cf0 -> Node0x2208d60;
	Node0x2208d60 -> Node0x2208e00;
	Node0x2208e00 -> Node0x2208e70;
	Node0x2208e70 -> Node0x2208ee0;
	Node0x2208ee0 -> Node0x2208f50;
	Node0x2208f50 -> Node0x2208fc0;
	Node0x2208fc0 -> Node0x2209030;
	Node0x2209030 -> Node0x22090d0;
	Node0x22090d0 -> Node0x2209170;
	Node0x2209170 -> Node0x2209210;
	Node0x2209210 -> Node0x2209280;
	Node0x2209280 -> Node0x22092f0;
	Node0x22092f0 -> Node0x2209390;
	Node0x2209390 -> Node0x2209400;
	Node0x2209400 -> Node0x2209470;
	Node0x2209470 -> Node0x22094e0;
	Node0x22094e0 -> Node0x2209550;
	Node0x2209550 -> Node0x22095c0;
	Node0x22095c0 -> Node0x2209630;
	Node0x2209630 -> Node0x22096a0;
	Node0x22096a0 -> Node0x2209710;
	Node0x2209710 -> Node0x2209780;
	Node0x2209780 -> Node0x21a9268;
	Node0x21a9268 -> Node0x2209c20;
	Node0x2209c20 -> Node0x2209c70;
edge [color=red]
	Node0x2208c30 -> Node0x2208cf0;
	Node0x2208cf0 -> Node0x2208d60;
	Node0x2208d60 -> Node0x2208e00;
	Node0x2208e00 -> Node0x2208e70;
	Node0x2208580 -> Node0x2208e70;
	Node0x2208fc0 -> Node0x2209030;
	Node0x2208580 -> Node0x22090d0;
	Node0x22090d0 -> Node0x2209170;
	Node0x2209210 -> Node0x2209280;
	Node0x2209280 -> Node0x22092f0;
	Node0x2208f50 -> Node0x2209390;
	Node0x2209400 -> Node0x2209470;
	Node0x2208ee0 -> Node0x2209470;
	Node0x2209470 -> Node0x22094e0;
	Node0x2208f50 -> Node0x22094e0;
	Node0x22094e0 -> Node0x2209550;
	Node0x2209030 -> Node0x2209550;
	Node0x2209550 -> Node0x22095c0;
	Node0x2208cf0 -> Node0x22095c0;
	Node0x22095c0 -> Node0x2209630;
	Node0x22092f0 -> Node0x2209630;
	Node0x2209630 -> Node0x22096a0;
	Node0x2209390 -> Node0x22096a0;
	Node0x22096a0 -> Node0x2209710;
	Node0x2209170 -> Node0x2209710;
	Node0x2208e70 -> Node0x2209780;
	Node0x2209710 -> Node0x2209780;
	Node0x2209780 -> Node0x21a9268;
	Node0x21a9268 -> Node0x2209c20;
}
