digraph "DFG for'crackme' function" {
	Node0x73f450[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x73fb00[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x73fbc0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x73fc30[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x73fcd0[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x73fd40[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x73fdb0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x73fe20[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x73fec0[shape=record, label="  %11 = mul i32 %3, -5"];
	Node0x73ff30[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0x73ffa0[shape=record, label="  %13 = or i32 %12, %1"];
	Node0x740010[shape=record, label="  %14 = add i32 %13, %0"];
	Node0x740080[shape=record, label="  %15 = add i32 %14, %3"];
	Node0x7400f0[shape=record, label="  %16 = add i32 %15, %8"];
	Node0x740160[shape=record, label="  %17 = sub i32 %16, %6"];
	Node0x7401d0[shape=record, label="  %18 = add i32 %17, %7"];
	Node0x740240[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0x7402b0[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x740320[shape=record, label="  %21 = icmp eq i32 %20, %4"];
	Node0x6e0268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7407c0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x740810[shape=record, label="  ret void"];
	Node0x73f450 -> Node0x73fb00;
	Node0x73fb00 -> Node0x73fbc0;
	Node0x73fbc0 -> Node0x73fc30;
	Node0x73fc30 -> Node0x73fcd0;
	Node0x73fcd0 -> Node0x73fd40;
	Node0x73fd40 -> Node0x73fdb0;
	Node0x73fdb0 -> Node0x73fe20;
	Node0x73fe20 -> Node0x73fec0;
	Node0x73fec0 -> Node0x73ff30;
	Node0x73ff30 -> Node0x73ffa0;
	Node0x73ffa0 -> Node0x740010;
	Node0x740010 -> Node0x740080;
	Node0x740080 -> Node0x7400f0;
	Node0x7400f0 -> Node0x740160;
	Node0x740160 -> Node0x7401d0;
	Node0x7401d0 -> Node0x740240;
	Node0x740240 -> Node0x7402b0;
	Node0x7402b0 -> Node0x740320;
	Node0x740320 -> Node0x6e0268;
	Node0x6e0268 -> Node0x7407c0;
	Node0x7407c0 -> Node0x740810;
edge [color=red]
	Node0x73f450 -> Node0x73fb00;
	Node0x73fbc0 -> Node0x73fc30;
	Node0x73fc30 -> Node0x73fcd0;
	Node0x73fd40 -> Node0x73fdb0;
	Node0x73fdb0 -> Node0x73fe20;
	Node0x73f450 -> Node0x73fec0;
	Node0x73ff30 -> Node0x73ffa0;
	Node0x73ffa0 -> Node0x740010;
	Node0x740010 -> Node0x740080;
	Node0x73f450 -> Node0x740080;
	Node0x740080 -> Node0x7400f0;
	Node0x73fd40 -> Node0x7400f0;
	Node0x7400f0 -> Node0x740160;
	Node0x73fc30 -> Node0x740160;
	Node0x740160 -> Node0x7401d0;
	Node0x73fcd0 -> Node0x7401d0;
	Node0x7401d0 -> Node0x740240;
	Node0x73fe20 -> Node0x740240;
	Node0x740240 -> Node0x7402b0;
	Node0x73fec0 -> Node0x7402b0;
	Node0x7402b0 -> Node0x740320;
	Node0x73fb00 -> Node0x740320;
	Node0x740320 -> Node0x6e0268;
	Node0x6e0268 -> Node0x7407c0;
}
