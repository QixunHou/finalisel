digraph "DFG for'crackme' function" {
	Node0x78faf0[shape=record, label="  %3 = sub i32 0, %0"];
	Node0x78fb90[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x78fc50[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x78fcc0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x78fd30[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x78fdd0[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0x78fe40[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x78fee0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x78ff50[shape=record, label="  %11 = xor i32 %7, -1"];
	Node0x78fff0[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x790060[shape=record, label="  %13 = or i32 %4, %0"];
	Node0x7900d0[shape=record, label="  %14 = xor i32 %0, -1"];
	Node0x790140[shape=record, label="  %15 = add i32 %0, 1"];
	Node0x7901b0[shape=record, label="  %16 = or i32 %14, %1"];
	Node0x790220[shape=record, label="  %17 = sub i32 %15, %13"];
	Node0x790290[shape=record, label="  %18 = sub i32 %17, %16"];
	Node0x790300[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x790370[shape=record, label="  %20 = add i32 %19, %6"];
	Node0x7903e0[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0x790450[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x7904c0[shape=record, label="  %23 = icmp eq i32 %22, %3"];
	Node0x730268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x790960[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x7909b0[shape=record, label="  ret void"];
	Node0x78faf0 -> Node0x78fb90;
	Node0x78fb90 -> Node0x78fc50;
	Node0x78fc50 -> Node0x78fcc0;
	Node0x78fcc0 -> Node0x78fd30;
	Node0x78fd30 -> Node0x78fdd0;
	Node0x78fdd0 -> Node0x78fe40;
	Node0x78fe40 -> Node0x78fee0;
	Node0x78fee0 -> Node0x78ff50;
	Node0x78ff50 -> Node0x78fff0;
	Node0x78fff0 -> Node0x790060;
	Node0x790060 -> Node0x7900d0;
	Node0x7900d0 -> Node0x790140;
	Node0x790140 -> Node0x7901b0;
	Node0x7901b0 -> Node0x790220;
	Node0x790220 -> Node0x790290;
	Node0x790290 -> Node0x790300;
	Node0x790300 -> Node0x790370;
	Node0x790370 -> Node0x7903e0;
	Node0x7903e0 -> Node0x790450;
	Node0x790450 -> Node0x7904c0;
	Node0x7904c0 -> Node0x730268;
	Node0x730268 -> Node0x790960;
	Node0x790960 -> Node0x7909b0;
edge [color=red]
	Node0x78fb90 -> Node0x78fc50;
	Node0x78fc50 -> Node0x78fcc0;
	Node0x78fd30 -> Node0x78fdd0;
	Node0x78fe40 -> Node0x78fee0;
	Node0x78fd30 -> Node0x78ff50;
	Node0x78ff50 -> Node0x78fff0;
	Node0x78fb90 -> Node0x790060;
	Node0x7900d0 -> Node0x7901b0;
	Node0x790140 -> Node0x790220;
	Node0x790060 -> Node0x790220;
	Node0x790220 -> Node0x790290;
	Node0x7901b0 -> Node0x790290;
	Node0x790290 -> Node0x790300;
	Node0x78fdd0 -> Node0x790300;
	Node0x790300 -> Node0x790370;
	Node0x78fcc0 -> Node0x790370;
	Node0x790370 -> Node0x7903e0;
	Node0x78fee0 -> Node0x7903e0;
	Node0x7903e0 -> Node0x790450;
	Node0x78fff0 -> Node0x790450;
	Node0x790450 -> Node0x7904c0;
	Node0x78faf0 -> Node0x7904c0;
	Node0x7904c0 -> Node0x730268;
	Node0x730268 -> Node0x790960;
}
