; ModuleID = '../.././c_source_file/1597_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1597_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %10, %8
  %12 = or i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %13, %1
  %15 = sub i32 %14, %11
  %16 = add i32 %15, %6
  %17 = xor i32 %4, -1
  %18 = or i32 %17, %3
  %19 = and i32 %17, %3
  %20 = or i32 %4, %3
  %21 = xor i32 %20, -1
  %22 = mul i32 %21, 7
  %23 = xor i32 %18, -1
  %24 = xor i32 %0, -1
  %25 = and i32 %2, %1
  %26 = and i32 %25, %24
  %27 = xor i32 %2, %1
  %28 = and i32 %27, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %26, %29
  %31 = xor i32 %1, -1
  %32 = xor i32 %2, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %31
  %36 = and i32 %32, %0
  %37 = or i32 %36, %31
  %38 = or i32 %10, %31
  %39 = or i32 %32, %1
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %24
  %42 = and i32 %2, %0
  %43 = or i32 %42, %1
  %44 = and i32 %31, %0
  %45 = or i32 %44, %10
  %46 = or i32 %1, %0
  %47 = and i32 %9, %46
  %48 = and i32 %8, %2
  %49 = xor i32 %33, %1
  %50 = and i32 %9, %31
  %51 = xor i32 %42, -1
  %52 = and i32 %51, %8
  %53 = and i32 %25, %0
  %54 = and i32 %27, %24
  %55 = xor i32 %54, 2147483647
  %56 = xor i32 %55, %53
  %57 = or i32 %13, %8
  %58 = shl i32 %57, 1
  %59 = and i32 %31, %2
  %60 = and i32 %59, %0
  %61 = or i32 %31, %2
  %62 = and i32 %61, %24
  %63 = xor i32 %62, 2147483647
  %64 = xor i32 %63, %60
  %65 = shl i32 %64, 1
  %66 = and i32 %59, %24
  %67 = and i32 %61, %0
  %68 = or i32 %66, %67
  %69 = or i32 %2, %1
  %70 = xor i32 %69, -1
  %71 = xor i32 %27, %0
  %72 = xor i32 %53, %71
  %73 = xor i32 %44, -1
  %74 = and i32 %32, %73
  %75 = or i32 %31, %0
  %76 = xor i32 %75, -1
  %77 = or i32 %32, %76
  %78 = or i32 %44, %32
  %79 = or i32 %9, %44
  %80 = xor i32 %46, -1
  %81 = and i32 %1, %0
  %82 = xor i32 %69, %81
  %83 = xor i32 %42, %46
  %84 = shl i32 %83, 1
  %85 = or i32 %10, %76
  %86 = and i32 %33, %8
  %87 = or i32 %9, %76
  %88 = xor i32 %27, -1
  %89 = or i32 %88, %80
  %90 = xor i32 %39, %81
  %91 = or i32 %10, %1
  %92 = shl i32 %69, 2
  %93 = or i32 %53, %54
  %94 = xor i32 %71, -1
  %95 = xor i32 %60, %94
  %96 = and i32 %10, %31
  %97 = and i32 %75, %2
  %98 = and i32 %32, %1
  %99 = or i32 %98, %0
  %100 = or i32 %26, %28
  %101 = and i32 %27, %75
  %102 = or i32 %9, %1
  %103 = shl i32 %102, 2
  %104 = or i32 %36, %1
  %105 = and i32 %7, %51
  %106 = shl i32 %105, 1
  %107 = and i32 %12, %1
  %108 = and i32 %9, %7
  %109 = xor i32 %69, %0
  %110 = shl i32 %42, 1
  %111 = or i32 %25, %44
  %112 = or i32 %9, %81
  %113 = shl i32 %112, 1
  %114 = or i32 %70, %0
  %115 = or i32 %13, %31
  %116 = xor i32 %98, -1
  %117 = add i32 %98, 1
  %118 = and i32 %39, %0
  %119 = xor i32 %76, %2
  %120 = xor i32 %44, %2
  %121 = and i32 %51, %1
  %122 = or i32 %25, %24
  %123 = shl i32 %122, 1
  %124 = or i32 %53, %94
  %125 = or i32 %42, %76
  %126 = and i32 %7, %32
  %127 = and i32 %46, %32
  %128 = or i32 %81, %88
  %129 = or i32 %8, %2
  %130 = xor i32 %42, %116
  %131 = or i32 %88, %24
  %132 = xor i32 %46, %2
  %133 = and i32 %32, %8
  %134 = and i32 %9, %75
  %135 = or i32 %27, %44
  %136 = xor i32 %25, -1
  %137 = and i32 %136, %0
  %138 = or i32 %42, %7
  %139 = xor i32 %36, %136
  %140 = xor i32 %73, %2
  %141 = xor i32 %81, -1
  %142 = and i32 %9, %141
  %143 = and i32 %88, %141
  %144 = or i32 %27, %0
  %145 = xor i32 %144, 2147483647
  %146 = or i32 %145, %60
  %147 = and i32 %116, %24
  %148 = or i32 %81, %10
  %149 = and i32 %88, %24
  %150 = or i32 %34, %1
  %151 = xor i32 %81, %2
  %152 = or i32 %42, %80
  %153 = or i32 %40, %0
  %154 = and i32 %10, %141
  %155 = add i32 %39, 1
  %156 = and i32 %69, %24
  %157 = or i32 %9, %8
  %158 = xor i32 %36, %39
  %159 = xor i32 %67, -1
  %160 = xor i32 %66, %159
  %161 = xor i32 %141, %2
  %162 = and i32 %32, %141
  %163 = shl i32 %144, 1
  %164 = or i32 %69, %24
  %165 = or i32 %7, %2
  %166 = xor i32 %25, %0
  %167 = xor i32 %70, %0
  %168 = or i32 %81, %13
  %169 = and i32 %12, %7
  %170 = or i32 %10, %80
  %171 = shl i32 %170, 1
  %172 = or i32 %53, %109
  %173 = shl i32 %172, 1
  %174 = and i32 %46, %88
  %175 = and i32 %33, %7
  %176 = xor i32 %12, %1
  %177 = xor i32 %88, %0
  %178 = or i32 %39, %0
  %179 = or i32 %7, %10
  %180 = xor i32 %33, %81
  %181 = and i32 %75, %32
  %182 = or i32 %7, %13
  %183 = or i32 %42, %31
  %184 = shl i32 %183, 1
  %185 = or i32 %98, %44
  %186 = shl i32 %185, 1
  %187 = or i32 %25, %0
  %188 = or i32 %88, %76
  %189 = or i32 %42, %8
  %190 = and i32 %75, %88
  %191 = and i32 %141, %2
  %192 = xor i32 %98, %0
  %193 = or i32 %81, %40
  %194 = shl i32 %12, 1
  %195 = or i32 %7, %32
  %196 = or i32 %39, %24
  %197 = and i32 %27, %46
  %198 = shl i32 %197, 1
  %199 = and i32 %88, %73
  %200 = shl i32 %199, 1
  %201 = or i32 %36, %8
  %202 = or i32 %76, %2
  %203 = shl i32 %202, 1
  %204 = or i32 %36, %7
  %205 = or i32 %42, %70
  %206 = and i32 %88, %0
  %207 = xor i32 %60, %144
  %208 = xor i32 %51, %1
  %209 = shl i32 %208, 1
  %210 = xor i32 %12, %81
  %211 = shl i32 %210, 1
  %212 = xor i32 %53, -1
  %213 = xor i32 %109, %212
  %214 = and i32 %7, %10
  %215 = shl i32 %54, 1
  %216 = or i32 %116, %0
  %217 = shl i32 %216, 1
  %218 = xor i32 %156, %212
  %219 = and i32 %7, %2
  %220 = or i32 %116, %24
  %221 = xor i32 %42, %75
  %222 = or i32 %9, %80
  %223 = or i32 %9, %31
  %224 = xor i32 %75, %2
  %225 = and i32 %39, %24
  %226 = or i32 %27, %81
  %227 = or i32 %88, %0
  %228 = xor i32 %39, %0
  %229 = or i32 %60, %62
  %230 = shl i32 %88, 1
  %231 = xor i32 %42, %1
  %232 = shl i32 %231, 1
  %233 = xor i32 %36, %31
  %234 = xor i32 %44, %136
  %235 = and i32 %69, %0
  %236 = xor i32 %235, 2147483647
  %237 = xor i32 %236, %26
  %238 = shl i32 %237, 1
  %239 = xor i32 %61, %24
  %240 = xor i32 %239, %60
  %241 = xor i32 %40, %0
  %242 = and i32 %27, %141
  %243 = or i32 %98, %24
  %244 = or i32 %136, %24
  %245 = and i32 %70, %24
  %246 = mul i32 %245, 6
  %247 = and i32 %98, %24
  %248 = mul i32 %247, 24
  %249 = and i32 %70, %0
  %250 = mul i32 %249, 17
  %251 = and i32 %98, %0
  %252 = and i32 %40, %24
  %253 = mul i32 %252, 56
  %254 = and i32 %40, %0
  %255 = mul i32 %254, 15
  %256 = mul i32 %53, 33
  %257 = add i32 %44, %76
  %258 = add i32 %257, %8
  %259 = add i32 %258, %34
  %260 = add i32 %259, %140
  %261 = add i32 %260, %132
  %262 = add i32 %261, %127
  %263 = add i32 %262, %214
  %264 = add i32 %263, %182
  %265 = add i32 %264, %179
  %266 = add i32 %265, %169
  %267 = add i32 %266, %138
  %268 = add i32 %267, %104
  %269 = add i32 %268, %96
  %270 = add i32 %269, %17
  %271 = add i32 %270, %93
  %272 = add i32 %271, %56
  %273 = add i32 %272, %146
  %274 = shl i32 %273, 1
  %275 = add i32 %77, %9
  %276 = sub i32 %275, %48
  %277 = add i32 %276, %178
  %278 = sub i32 %277, %174
  %279 = add i32 %278, %23
  %280 = sub i32 %279, %229
  %281 = mul i32 %280, 5
  %282 = add i32 %27, %7
  %283 = sub i32 %190, %282
  %284 = sub i32 %283, %131
  %285 = sub i32 %284, %18
  %286 = sub i32 %285, %160
  %287 = mul i32 %286, 3
  %288 = shl i32 %3, 3
  %289 = or i32 %26, %251
  %290 = mul i32 %289, 14
  %291 = add i32 %1, %2
  %292 = add i32 %291, 9
  %293 = add i32 %292, %80
  %294 = sub i32 %293, %46
  %295 = sub i32 %294, %81
  %296 = add i32 %295, %70
  %297 = add i32 %296, %74
  %298 = sub i32 %297, %78
  %299 = add i32 %298, %39
  %300 = sub i32 %299, %97
  %301 = add i32 %300, %117
  %302 = add i32 %301, %119
  %303 = add i32 %302, %120
  %304 = add i32 %303, %126
  %305 = sub i32 %304, %129
  %306 = sub i32 %305, %33
  %307 = sub i32 %306, %133
  %308 = add i32 %307, %136
  %309 = add i32 %308, %151
  %310 = add i32 %309, %10
  %311 = add i32 %310, %155
  %312 = sub i32 %311, %161
  %313 = sub i32 %312, %162
  %314 = sub i32 %313, %25
  %315 = add i32 %314, %165
  %316 = sub i32 %315, %181
  %317 = sub i32 %316, %98
  %318 = add i32 %317, %191
  %319 = add i32 %318, %195
  %320 = add i32 %319, %219
  %321 = sub i32 %320, %36
  %322 = add i32 %321, %224
  %323 = add i32 %322, %4
  %324 = add i32 %323, %35
  %325 = sub i32 %324, %37
  %326 = sub i32 %325, %38
  %327 = sub i32 %326, %41
  %328 = sub i32 %327, %43
  %329 = add i32 %328, %45
  %330 = add i32 %329, %47
  %331 = sub i32 %330, %49
  %332 = add i32 %331, %50
  %333 = sub i32 %332, %52
  %334 = sub i32 %333, %79
  %335 = sub i32 %334, %82
  %336 = add i32 %335, %85
  %337 = sub i32 %336, %86
  %338 = sub i32 %337, %87
  %339 = add i32 %338, %89
  %340 = add i32 %339, %90
  %341 = sub i32 %340, %91
  %342 = sub i32 %341, %92
  %343 = add i32 %342, %99
  %344 = sub i32 %343, %101
  %345 = sub i32 %344, %107
  %346 = sub i32 %345, %108
  %347 = sub i32 %346, %109
  %348 = sub i32 %347, %110
  %349 = sub i32 %348, %111
  %350 = add i32 %349, %114
  %351 = sub i32 %350, %115
  %352 = add i32 %351, %118
  %353 = add i32 %352, %121
  %354 = add i32 %353, %125
  %355 = add i32 %354, %128
  %356 = sub i32 %355, %130
  %357 = sub i32 %356, %134
  %358 = add i32 %357, %135
  %359 = sub i32 %358, %137
  %360 = sub i32 %359, %139
  %361 = sub i32 %360, %142
  %362 = add i32 %361, %143
  %363 = sub i32 %362, %147
  %364 = add i32 %363, %148
  %365 = add i32 %364, %149
  %366 = add i32 %365, %150
  %367 = add i32 %366, %152
  %368 = sub i32 %367, %153
  %369 = sub i32 %368, %154
  %370 = add i32 %369, %156
  %371 = sub i32 %370, %157
  %372 = sub i32 %371, %158
  %373 = sub i32 %372, %71
  %374 = add i32 %373, %164
  %375 = add i32 %374, %166
  %376 = add i32 %375, %167
  %377 = add i32 %376, %168
  %378 = sub i32 %377, %175
  %379 = sub i32 %378, %176
  %380 = sub i32 %379, %177
  %381 = sub i32 %380, %180
  %382 = add i32 %381, %187
  %383 = add i32 %382, %188
  %384 = add i32 %383, %189
  %385 = sub i32 %384, %192
  %386 = sub i32 %385, %193
  %387 = sub i32 %386, %194
  %388 = sub i32 %387, %196
  %389 = sub i32 %388, %201
  %390 = sub i32 %389, %203
  %391 = add i32 %390, %204
  %392 = add i32 %391, %205
  %393 = add i32 %392, %206
  %394 = sub i32 %393, %220
  %395 = sub i32 %394, %221
  %396 = add i32 %395, %222
  %397 = sub i32 %396, %223
  %398 = add i32 %397, %225
  %399 = sub i32 %398, %226
  %400 = add i32 %399, %227
  %401 = add i32 %400, %228
  %402 = sub i32 %401, %230
  %403 = add i32 %402, %233
  %404 = sub i32 %403, %234
  %405 = add i32 %404, %241
  %406 = add i32 %405, %242
  %407 = sub i32 %406, %243
  %408 = add i32 %407, %244
  %409 = sub i32 %408, %19
  %410 = add i32 %409, %6
  %411 = sub i32 %410, %30
  %412 = sub i32 %411, %58
  %413 = sub i32 %412, %68
  %414 = sub i32 %413, %72
  %415 = sub i32 %414, %84
  %416 = sub i32 %415, %95
  %417 = add i32 %416, %100
  %418 = sub i32 %417, %103
  %419 = sub i32 %418, %106
  %420 = sub i32 %419, %113
  %421 = sub i32 %420, %123
  %422 = add i32 %421, %124
  %423 = sub i32 %422, %163
  %424 = sub i32 %423, %171
  %425 = sub i32 %424, %184
  %426 = sub i32 %425, %186
  %427 = sub i32 %426, %198
  %428 = sub i32 %427, %200
  %429 = sub i32 %428, %207
  %430 = sub i32 %429, %209
  %431 = sub i32 %430, %211
  %432 = add i32 %431, %213
  %433 = sub i32 %432, %215
  %434 = sub i32 %433, %217
  %435 = sub i32 %434, %218
  %436 = sub i32 %435, %232
  %437 = add i32 %436, %240
  %438 = add i32 %437, %246
  %439 = add i32 %438, %248
  %440 = add i32 %439, %250
  %441 = add i32 %440, %253
  %442 = add i32 %441, %255
  %443 = add i32 %442, %256
  %444 = add i32 %443, %22
  %445 = sub i32 %444, %173
  %446 = add i32 %445, %290
  %447 = sub i32 %446, %65
  %448 = sub i32 %447, %238
  %449 = add i32 %448, %288
  %450 = add i32 %449, %287
  %451 = add i32 %450, %281
  %452 = add i32 %451, %274
  %453 = icmp eq i32 %16, %452
  %454 = select i1 %453, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %455 = tail call i32 @puts(i8* nonnull dereferenceable(1) %454)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
