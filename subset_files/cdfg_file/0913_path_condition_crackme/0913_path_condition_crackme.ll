; ModuleID = '../.././c_source_file/0913_path_condition_crackme.c'
source_filename = "../.././c_source_file/0913_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %2, %1
  %7 = and i32 %6, %0
  %8 = xor i32 %0, -1
  %9 = or i32 %2, %1
  %10 = and i32 %9, %8
  %11 = or i32 %7, %10
  %12 = sub i32 %4, %11
  %13 = xor i32 %4, %3
  %14 = xor i32 %4, -1
  %15 = add i32 %4, 1
  %16 = or i32 %14, %3
  %17 = and i32 %14, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %1, %0
  %20 = xor i32 %19, -1
  %21 = and i32 %20, %2
  %22 = xor i32 %2, %1
  %23 = and i32 %22, %0
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %0
  %26 = xor i32 %25, -1
  %27 = mul i32 %26, 3
  %28 = xor i32 %27, -1
  %29 = shl i32 %22, 1
  %30 = xor i32 %2, -1
  %31 = and i32 %30, %1
  %32 = xor i32 %31, -1
  %33 = xor i32 %32, %0
  %34 = xor i32 %26, %2
  %35 = or i32 %24, %0
  %36 = xor i32 %22, -1
  %37 = and i32 %35, %36
  %38 = shl i32 %0, 1
  %39 = or i32 %30, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %20
  %42 = and i32 %30, %0
  %43 = xor i32 %42, -1
  %44 = and i32 %19, %43
  %45 = or i32 %36, %0
  %46 = xor i32 %7, %45
  %47 = and i32 %1, %0
  %48 = xor i32 %47, -1
  %49 = xor i32 %2, %0
  %50 = xor i32 %49, -1
  %51 = and i32 %50, %48
  %52 = shl i32 %51, 1
  %53 = xor i32 %6, -1
  %54 = and i32 %2, %0
  %55 = or i32 %54, %1
  %56 = xor i32 %36, %0
  %57 = and i32 %49, %24
  %58 = or i32 %19, %2
  %59 = xor i32 %35, -1
  %60 = or i32 %54, %59
  %61 = or i32 %2, %0
  %62 = and i32 %61, %19
  %63 = and i32 %36, %26
  %64 = or i32 %30, %59
  %65 = and i32 %49, %35
  %66 = or i32 %1, %0
  %67 = xor i32 %66, -1
  %68 = or i32 %50, %67
  %69 = and i32 %22, %26
  %70 = and i32 %24, %2
  %71 = and i32 %70, %8
  %72 = or i32 %22, %8
  %73 = xor i32 %72, -1
  %74 = or i32 %71, %73
  %75 = or i32 %50, %20
  %76 = xor i32 %10, -1
  %77 = xor i32 %7, %76
  %78 = and i32 %70, %0
  %79 = or i32 %24, %2
  %80 = xor i32 %79, %0
  %81 = xor i32 %80, -1
  %82 = xor i32 %78, %81
  %83 = or i32 %47, %36
  %84 = xor i32 %71, %72
  %85 = shl i32 %84, 1
  %86 = xor i32 %48, %2
  %87 = or i32 %59, %2
  %88 = or i32 %30, %1
  %89 = xor i32 %88, %47
  %90 = xor i32 %39, %47
  %91 = shl i32 %90, 1
  %92 = or i32 %54, %19
  %93 = xor i32 %47, %2
  %94 = and i32 %43, %20
  %95 = or i32 %49, %59
  %96 = and i32 %66, %36
  %97 = xor i32 %9, -1
  %98 = or i32 %54, %97
  %99 = and i32 %66, %30
  %100 = or i32 %22, %25
  %101 = xor i32 %43, %1
  %102 = or i32 %31, %8
  %103 = or i32 %22, %0
  %104 = and i32 %50, %20
  %105 = and i32 %53, %8
  %106 = and i32 %88, %8
  %107 = xor i32 %54, -1
  %108 = xor i32 %107, %1
  %109 = and i32 %36, %0
  %110 = shl i32 %10, 1
  %111 = xor i32 %25, %32
  %112 = xor i32 %54, %32
  %113 = or i32 %49, %19
  %114 = and i32 %107, %24
  %115 = and i32 %39, %1
  %116 = add i32 %54, 1
  %117 = or i32 %30, %20
  %118 = shl i32 %117, 1
  %119 = or i32 %47, %97
  %120 = or i32 %49, %47
  %121 = or i32 %42, %1
  %122 = shl i32 %121, 1
  %123 = xor i32 %9, %47
  %124 = shl i32 %19, 1
  %125 = or i32 %50, %59
  %126 = xor i32 %42, %1
  %127 = and i32 %9, %0
  %128 = or i32 %49, %1
  %129 = xor i32 %9, %0
  %130 = or i32 %25, %2
  %131 = shl i32 %130, 1
  %132 = or i32 %50, %1
  %133 = xor i32 %6, %0
  %134 = shl i32 %133, 1
  %135 = and i32 %49, %26
  %136 = xor i32 %35, %2
  %137 = xor i32 %61, -1
  %138 = or i32 %47, %137
  %139 = and i32 %61, %1
  %140 = or i32 %22, %47
  %141 = shl i32 %140, 1
  %142 = and i32 %61, %24
  %143 = or i32 %6, %0
  %144 = and i32 %35, %2
  %145 = xor i32 %137, %1
  %146 = xor i32 %103, -1
  %147 = or i32 %78, %146
  %148 = shl i32 %25, 1
  %149 = or i32 %78, %80
  %150 = xor i32 %22, %8
  %151 = xor i32 %78, %150
  %152 = and i32 %43, %24
  %153 = and i32 %79, %0
  %154 = or i32 %71, %153
  %155 = or i32 %49, %67
  %156 = xor i32 %54, %35
  %157 = xor i32 %42, %53
  %158 = and i32 %22, %35
  %159 = or i32 %36, %59
  %160 = xor i32 %39, %1
  %161 = or i32 %137, %20
  %162 = or i32 %31, %25
  %163 = or i32 %7, %129
  %164 = and i32 %88, %0
  %165 = or i32 %19, %50
  %166 = xor i32 %40, %1
  %167 = or i32 %20, %2
  %168 = or i32 %19, %40
  %169 = or i32 %47, %30
  %170 = or i32 %137, %1
  %171 = and i32 %66, %50
  %172 = xor i32 %88, -1
  %173 = or i32 %172, %0
  %174 = shl i32 %173, 1
  %175 = and i32 %19, %30
  %176 = xor i32 %25, %53
  %177 = and i32 %32, %0
  %178 = shl i32 %177, 1
  %179 = shl i32 %67, 1
  %180 = xor i32 %88, %0
  %181 = xor i32 %79, -1
  %182 = or i32 %181, %0
  %183 = xor i32 %78, %182
  %184 = or i32 %54, %31
  %185 = or i32 %47, %2
  %186 = or i32 %54, %67
  %187 = xor i32 %59, %2
  %188 = or i32 %7, %150
  %189 = xor i32 %42, %88
  %190 = or i32 %6, %25
  %191 = and i32 %6, %8
  %192 = xor i32 %23, -1
  %193 = xor i32 %191, %192
  %194 = or i32 %6, %8
  %195 = or i32 %19, %137
  %196 = and i32 %39, %19
  %197 = xor i32 %54, %66
  %198 = or i32 %49, %24
  %199 = or i32 %49, %20
  %200 = xor i32 %153, -1
  %201 = xor i32 %71, %200
  %202 = or i32 %53, %0
  %203 = xor i32 %78, %103
  %204 = xor i32 %61, %47
  %205 = and i32 %49, %20
  %206 = shl i32 %205, 1
  %207 = and i32 %22, %66
  %208 = or i32 %88, %0
  %209 = shl i32 %208, 2
  %210 = and i32 %35, %50
  %211 = and i32 %97, %8
  %212 = shl i32 %211, 1
  %213 = and i32 %31, %8
  %214 = mul i32 %213, 7
  %215 = and i32 %97, %0
  %216 = and i32 %31, %0
  %217 = and i32 %172, %8
  %218 = shl i32 %217, 4
  %219 = and i32 %172, %0
  %220 = add i32 %185, %47
  %221 = add i32 %220, %43
  %222 = add i32 %221, %34
  %223 = add i32 %222, %157
  %224 = add i32 %223, %156
  %225 = add i32 %224, %135
  %226 = add i32 %225, %123
  %227 = add i32 %226, %89
  %228 = add i32 %227, %63
  %229 = add i32 %228, %60
  %230 = add i32 %229, %203
  %231 = shl i32 %230, 1
  %232 = sub i32 %219, %191
  %233 = add i32 %232, %216
  %234 = sub i32 %233, %171
  %235 = add i32 %234, %162
  %236 = sub i32 %235, %105
  %237 = sub i32 %236, %100
  %238 = add i32 %237, %201
  %239 = mul i32 %238, 5
  %240 = add i32 %7, %215
  %241 = mul i32 %240, 14
  %242 = sub i32 %144, %56
  %243 = mul i32 %242, 3
  %244 = sub i32 %8, %38
  %245 = sub i32 %244, %1
  %246 = add i32 %245, %20
  %247 = sub i32 %246, %35
  %248 = sub i32 %247, %21
  %249 = add i32 %248, %28
  %250 = add i32 %249, %53
  %251 = sub i32 %250, %58
  %252 = add i32 %251, %64
  %253 = sub i32 %252, %54
  %254 = add i32 %253, %31
  %255 = add i32 %254, %86
  %256 = add i32 %255, %87
  %257 = sub i32 %256, %93
  %258 = add i32 %257, %39
  %259 = sub i32 %258, %99
  %260 = add i32 %259, %9
  %261 = add i32 %260, %116
  %262 = sub i32 %261, %124
  %263 = add i32 %262, %136
  %264 = add i32 %263, %61
  %265 = sub i32 %264, %148
  %266 = add i32 %265, %36
  %267 = sub i32 %266, %167
  %268 = sub i32 %267, %169
  %269 = sub i32 %268, %175
  %270 = sub i32 %269, %179
  %271 = add i32 %270, %187
  %272 = add i32 %271, %15
  %273 = add i32 %272, %23
  %274 = sub i32 %273, %29
  %275 = sub i32 %274, %33
  %276 = sub i32 %275, %37
  %277 = sub i32 %276, %41
  %278 = add i32 %277, %44
  %279 = add i32 %278, %55
  %280 = add i32 %279, %57
  %281 = add i32 %280, %62
  %282 = add i32 %281, %65
  %283 = sub i32 %282, %68
  %284 = add i32 %283, %69
  %285 = add i32 %284, %75
  %286 = sub i32 %285, %83
  %287 = add i32 %286, %92
  %288 = add i32 %287, %94
  %289 = add i32 %288, %95
  %290 = sub i32 %289, %96
  %291 = sub i32 %290, %98
  %292 = add i32 %291, %101
  %293 = sub i32 %292, %102
  %294 = sub i32 %293, %103
  %295 = sub i32 %294, %104
  %296 = sub i32 %295, %106
  %297 = add i32 %296, %108
  %298 = sub i32 %297, %109
  %299 = add i32 %298, %111
  %300 = sub i32 %299, %112
  %301 = sub i32 %300, %113
  %302 = add i32 %301, %114
  %303 = sub i32 %302, %115
  %304 = sub i32 %303, %118
  %305 = add i32 %304, %119
  %306 = sub i32 %305, %120
  %307 = add i32 %306, %125
  %308 = sub i32 %307, %126
  %309 = sub i32 %308, %127
  %310 = sub i32 %309, %128
  %311 = add i32 %310, %129
  %312 = sub i32 %311, %131
  %313 = add i32 %312, %132
  %314 = sub i32 %313, %138
  %315 = sub i32 %314, %139
  %316 = sub i32 %315, %142
  %317 = add i32 %316, %143
  %318 = add i32 %317, %145
  %319 = add i32 %318, %152
  %320 = sub i32 %319, %155
  %321 = add i32 %320, %158
  %322 = sub i32 %321, %159
  %323 = add i32 %322, %160
  %324 = sub i32 %323, %161
  %325 = sub i32 %324, %164
  %326 = add i32 %325, %165
  %327 = sub i32 %326, %166
  %328 = sub i32 %327, %168
  %329 = sub i32 %328, %170
  %330 = add i32 %329, %176
  %331 = sub i32 %330, %180
  %332 = sub i32 %331, %184
  %333 = sub i32 %332, %186
  %334 = add i32 %333, %189
  %335 = sub i32 %334, %190
  %336 = sub i32 %335, %194
  %337 = add i32 %336, %195
  %338 = add i32 %337, %196
  %339 = add i32 %338, %197
  %340 = add i32 %339, %198
  %341 = sub i32 %340, %199
  %342 = sub i32 %341, %202
  %343 = sub i32 %342, %204
  %344 = add i32 %343, %207
  %345 = add i32 %344, %210
  %346 = add i32 %345, %13
  %347 = add i32 %346, %16
  %348 = add i32 %347, %17
  %349 = add i32 %348, %46
  %350 = sub i32 %349, %52
  %351 = add i32 %350, %74
  %352 = sub i32 %351, %77
  %353 = sub i32 %352, %82
  %354 = sub i32 %353, %91
  %355 = sub i32 %354, %110
  %356 = sub i32 %355, %122
  %357 = sub i32 %356, %134
  %358 = sub i32 %357, %141
  %359 = add i32 %358, %147
  %360 = sub i32 %359, %149
  %361 = sub i32 %360, %151
  %362 = sub i32 %361, %154
  %363 = sub i32 %362, %163
  %364 = sub i32 %363, %174
  %365 = sub i32 %364, %178
  %366 = add i32 %365, %183
  %367 = add i32 %366, %188
  %368 = sub i32 %367, %193
  %369 = sub i32 %368, %206
  %370 = add i32 %369, %209
  %371 = sub i32 %370, %212
  %372 = add i32 %371, %214
  %373 = add i32 %372, %218
  %374 = sub i32 %373, %18
  %375 = sub i32 %374, %85
  %376 = add i32 %375, %241
  %377 = add i32 %376, %243
  %378 = add i32 %377, %239
  %379 = add i32 %378, %231
  %380 = icmp eq i32 %12, %379
  %381 = select i1 %380, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %382 = tail call i32 @puts(i8* nonnull dereferenceable(1) %381)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
