digraph "DFG for'crackme' function" {
	Node0xa4da70[shape=record, label="  %5 = and i32 %2, %1"];
	Node0xa4dae0[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0xa4e160[shape=record, label="  %7 = sub i32 1, %5"];
	Node0xa4e1d0[shape=record, label="  %8 = add i32 %7, %6"];
	Node0xa4e240[shape=record, label="  %9 = or i32 %2, %1"];
	Node0xa4e2b0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xa4e350[shape=record, label="  %11 = xor i32 %2, 2147483647"];
	Node0xa4e3c0[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0xa4e430[shape=record, label="  %13 = and i32 %11, %1"];
	Node0xa4e4d0[shape=record, label="  %14 = shl i32 %9, 2"];
	Node0xa4e570[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0xa4e5e0[shape=record, label="  %16 = shl i32 %3, 1"];
	Node0xa4e650[shape=record, label="  %17 = or i32 %3, %0"];
	Node0xa4e6f0[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0xa4e760[shape=record, label="  %19 = xor i32 %3, -1"];
	Node0xa4e7d0[shape=record, label="  %20 = and i32 %19, %0"];
	Node0xa4e840[shape=record, label="  %21 = and i32 %18, %3"];
	Node0xa4e8b0[shape=record, label="  %22 = and i32 %3, %0"];
	Node0xa4e920[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0xa4e990[shape=record, label="  %24 = add i32 %17, %5"];
	Node0xa4ea30[shape=record, label="  %25 = mul i32 %24, 3"];
	Node0xa4eaa0[shape=record, label="  %26 = sub i32 %13, %1"];
	Node0xa4eb10[shape=record, label="  %27 = add i32 %26, %12"];
	Node0xa4eb80[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0xa4ec20[shape=record, label="  %29 = sub i32 5, %0"];
	Node0xa4ec90[shape=record, label="  %30 = add i32 %29, %3"];
	Node0xa4ed00[shape=record, label="  %31 = add i32 %30, %10"];
	Node0xa4ed70[shape=record, label="  %32 = sub i32 %31, %16"];
	Node0xa4eff0[shape=record, label="  %33 = sub i32 %32, %6"];
	Node0xa4f060[shape=record, label="  %34 = add i32 %33, %17"];
	Node0xa4f0d0[shape=record, label="  %35 = sub i32 %34, %20"];
	Node0xa4f140[shape=record, label="  %36 = sub i32 %35, %21"];
	Node0xa4f1b0[shape=record, label="  %37 = add i32 %36, %15"];
	Node0xa4f220[shape=record, label="  %38 = sub i32 %37, %23"];
	Node0xa4f290[shape=record, label="  %39 = add i32 %38, %25"];
	Node0xa4f300[shape=record, label="  %40 = add i32 %39, %28"];
	Node0xa4f370[shape=record, label="  %41 = icmp eq i32 %8, %40"];
	Node0x9ee268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa4f810[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0xa4f860[shape=record, label="  ret void"];
	Node0xa4da70 -> Node0xa4dae0;
	Node0xa4dae0 -> Node0xa4e160;
	Node0xa4e160 -> Node0xa4e1d0;
	Node0xa4e1d0 -> Node0xa4e240;
	Node0xa4e240 -> Node0xa4e2b0;
	Node0xa4e2b0 -> Node0xa4e350;
	Node0xa4e350 -> Node0xa4e3c0;
	Node0xa4e3c0 -> Node0xa4e430;
	Node0xa4e430 -> Node0xa4e4d0;
	Node0xa4e4d0 -> Node0xa4e570;
	Node0xa4e570 -> Node0xa4e5e0;
	Node0xa4e5e0 -> Node0xa4e650;
	Node0xa4e650 -> Node0xa4e6f0;
	Node0xa4e6f0 -> Node0xa4e760;
	Node0xa4e760 -> Node0xa4e7d0;
	Node0xa4e7d0 -> Node0xa4e840;
	Node0xa4e840 -> Node0xa4e8b0;
	Node0xa4e8b0 -> Node0xa4e920;
	Node0xa4e920 -> Node0xa4e990;
	Node0xa4e990 -> Node0xa4ea30;
	Node0xa4ea30 -> Node0xa4eaa0;
	Node0xa4eaa0 -> Node0xa4eb10;
	Node0xa4eb10 -> Node0xa4eb80;
	Node0xa4eb80 -> Node0xa4ec20;
	Node0xa4ec20 -> Node0xa4ec90;
	Node0xa4ec90 -> Node0xa4ed00;
	Node0xa4ed00 -> Node0xa4ed70;
	Node0xa4ed70 -> Node0xa4eff0;
	Node0xa4eff0 -> Node0xa4f060;
	Node0xa4f060 -> Node0xa4f0d0;
	Node0xa4f0d0 -> Node0xa4f140;
	Node0xa4f140 -> Node0xa4f1b0;
	Node0xa4f1b0 -> Node0xa4f220;
	Node0xa4f220 -> Node0xa4f290;
	Node0xa4f290 -> Node0xa4f300;
	Node0xa4f300 -> Node0xa4f370;
	Node0xa4f370 -> Node0x9ee268;
	Node0x9ee268 -> Node0xa4f810;
	Node0xa4f810 -> Node0xa4f860;
edge [color=red]
	Node0xa4da70 -> Node0xa4e160;
	Node0xa4e160 -> Node0xa4e1d0;
	Node0xa4dae0 -> Node0xa4e1d0;
	Node0xa4e240 -> Node0xa4e2b0;
	Node0xa4e350 -> Node0xa4e430;
	Node0xa4e240 -> Node0xa4e4d0;
	Node0xa4e4d0 -> Node0xa4e570;
	Node0xa4e760 -> Node0xa4e7d0;
	Node0xa4e6f0 -> Node0xa4e840;
	Node0xa4e8b0 -> Node0xa4e920;
	Node0xa4e650 -> Node0xa4e990;
	Node0xa4da70 -> Node0xa4e990;
	Node0xa4e990 -> Node0xa4ea30;
	Node0xa4e430 -> Node0xa4eaa0;
	Node0xa4eaa0 -> Node0xa4eb10;
	Node0xa4e3c0 -> Node0xa4eb10;
	Node0xa4eb10 -> Node0xa4eb80;
	Node0xa4ec20 -> Node0xa4ec90;
	Node0xa4ec90 -> Node0xa4ed00;
	Node0xa4e2b0 -> Node0xa4ed00;
	Node0xa4ed00 -> Node0xa4ed70;
	Node0xa4e5e0 -> Node0xa4ed70;
	Node0xa4ed70 -> Node0xa4eff0;
	Node0xa4dae0 -> Node0xa4eff0;
	Node0xa4eff0 -> Node0xa4f060;
	Node0xa4e650 -> Node0xa4f060;
	Node0xa4f060 -> Node0xa4f0d0;
	Node0xa4e7d0 -> Node0xa4f0d0;
	Node0xa4f0d0 -> Node0xa4f140;
	Node0xa4e840 -> Node0xa4f140;
	Node0xa4f140 -> Node0xa4f1b0;
	Node0xa4e570 -> Node0xa4f1b0;
	Node0xa4f1b0 -> Node0xa4f220;
	Node0xa4e920 -> Node0xa4f220;
	Node0xa4f220 -> Node0xa4f290;
	Node0xa4ea30 -> Node0xa4f290;
	Node0xa4f290 -> Node0xa4f300;
	Node0xa4eb80 -> Node0xa4f300;
	Node0xa4e1d0 -> Node0xa4f370;
	Node0xa4f300 -> Node0xa4f370;
	Node0xa4f370 -> Node0x9ee268;
	Node0x9ee268 -> Node0xa4f810;
}
