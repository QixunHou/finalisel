digraph "DFG for'crackme' function" {
	Node0x947510[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x947bc0[shape=record, label="  %4 = shl i32 %1, 1"];
	Node0x947c80[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x947cf0[shape=record, label="  %6 = shl i32 %5, 2"];
	Node0x947d90[shape=record, label="  %7 = xor i32 %6, -4"];
	Node0x947e00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x947e70[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x947f10[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x947fb0[shape=record, label="  %11 = xor i32 %1, -1"];
	Node0x948020[shape=record, label="  %12 = or i32 %11, %0"];
	Node0x948090[shape=record, label="  %13 = shl i32 %0, 1"];
	Node0x948100[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x9481a0[shape=record, label="  %15 = mul i32 %8, 7"];
	Node0x948210[shape=record, label="  %16 = sub i32 1, %0"];
	Node0x948280[shape=record, label="  %17 = sub i32 %16, %4"];
	Node0x9482f0[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x948360[shape=record, label="  %19 = add i32 %18, %14"];
	Node0x9483d0[shape=record, label="  %20 = sub i32 %19, %5"];
	Node0x948440[shape=record, label="  %21 = add i32 %20, %3"];
	Node0x9484b0[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x948520[shape=record, label="  %23 = sub i32 %22, %7"];
	Node0x948590[shape=record, label="  %24 = add i32 %23, %10"];
	Node0x948600[shape=record, label="  %25 = icmp eq i32 %3, %24"];
	Node0x8e8268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x948aa0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x948af0[shape=record, label="  ret void"];
	Node0x947510 -> Node0x947bc0;
	Node0x947bc0 -> Node0x947c80;
	Node0x947c80 -> Node0x947cf0;
	Node0x947cf0 -> Node0x947d90;
	Node0x947d90 -> Node0x947e00;
	Node0x947e00 -> Node0x947e70;
	Node0x947e70 -> Node0x947f10;
	Node0x947f10 -> Node0x947fb0;
	Node0x947fb0 -> Node0x948020;
	Node0x948020 -> Node0x948090;
	Node0x948090 -> Node0x948100;
	Node0x948100 -> Node0x9481a0;
	Node0x9481a0 -> Node0x948210;
	Node0x948210 -> Node0x948280;
	Node0x948280 -> Node0x9482f0;
	Node0x9482f0 -> Node0x948360;
	Node0x948360 -> Node0x9483d0;
	Node0x9483d0 -> Node0x948440;
	Node0x948440 -> Node0x9484b0;
	Node0x9484b0 -> Node0x948520;
	Node0x948520 -> Node0x948590;
	Node0x948590 -> Node0x948600;
	Node0x948600 -> Node0x8e8268;
	Node0x8e8268 -> Node0x948aa0;
	Node0x948aa0 -> Node0x948af0;
edge [color=red]
	Node0x947c80 -> Node0x947cf0;
	Node0x947cf0 -> Node0x947d90;
	Node0x947e00 -> Node0x947e70;
	Node0x947e70 -> Node0x947f10;
	Node0x947fb0 -> Node0x948020;
	Node0x948090 -> Node0x948100;
	Node0x947e00 -> Node0x9481a0;
	Node0x948210 -> Node0x948280;
	Node0x947bc0 -> Node0x948280;
	Node0x948280 -> Node0x9482f0;
	Node0x948020 -> Node0x9482f0;
	Node0x9482f0 -> Node0x948360;
	Node0x948100 -> Node0x948360;
	Node0x948360 -> Node0x9483d0;
	Node0x947c80 -> Node0x9483d0;
	Node0x9483d0 -> Node0x948440;
	Node0x947510 -> Node0x948440;
	Node0x948440 -> Node0x9484b0;
	Node0x9481a0 -> Node0x9484b0;
	Node0x9484b0 -> Node0x948520;
	Node0x947d90 -> Node0x948520;
	Node0x948520 -> Node0x948590;
	Node0x947f10 -> Node0x948590;
	Node0x947510 -> Node0x948600;
	Node0x948590 -> Node0x948600;
	Node0x948600 -> Node0x8e8268;
	Node0x8e8268 -> Node0x948aa0;
}
