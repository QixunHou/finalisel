digraph "DFG for'crackme' function" {
	Node0x162b420[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x162bad0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x162bb90[shape=record, label="  %5 = sub i32 %4, %3"];
	Node0x162bc00[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x162bc70[shape=record, label="  %7 = and i32 %4, %0"];
	Node0x162bce0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x162bd80[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x162bdf0[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x162be60[shape=record, label="  %11 = and i32 %6, %1"];
	Node0x162bf00[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x162bf70[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x162bfe0[shape=record, label="  %14 = sub i32 1, %0"];
	Node0x162c050[shape=record, label="  %15 = add i32 %14, %10"];
	Node0x162c0c0[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x162c130[shape=record, label="  %17 = sub i32 %16, %13"];
	Node0x162c1a0[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x162c210[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x162c280[shape=record, label="  %20 = icmp eq i32 %5, %19"];
	Node0x15cc268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x162c720[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x162c770[shape=record, label="  ret void"];
	Node0x162b420 -> Node0x162bad0;
	Node0x162bad0 -> Node0x162bb90;
	Node0x162bb90 -> Node0x162bc00;
	Node0x162bc00 -> Node0x162bc70;
	Node0x162bc70 -> Node0x162bce0;
	Node0x162bce0 -> Node0x162bd80;
	Node0x162bd80 -> Node0x162bdf0;
	Node0x162bdf0 -> Node0x162be60;
	Node0x162be60 -> Node0x162bf00;
	Node0x162bf00 -> Node0x162bf70;
	Node0x162bf70 -> Node0x162bfe0;
	Node0x162bfe0 -> Node0x162c050;
	Node0x162c050 -> Node0x162c0c0;
	Node0x162c0c0 -> Node0x162c130;
	Node0x162c130 -> Node0x162c1a0;
	Node0x162c1a0 -> Node0x162c210;
	Node0x162c210 -> Node0x162c280;
	Node0x162c280 -> Node0x15cc268;
	Node0x15cc268 -> Node0x162c720;
	Node0x162c720 -> Node0x162c770;
edge [color=red]
	Node0x162bad0 -> Node0x162bb90;
	Node0x162b420 -> Node0x162bb90;
	Node0x162bad0 -> Node0x162bc70;
	Node0x162bc70 -> Node0x162bce0;
	Node0x162bce0 -> Node0x162bd80;
	Node0x162bc00 -> Node0x162be60;
	Node0x162be60 -> Node0x162bf00;
	Node0x162bfe0 -> Node0x162c050;
	Node0x162bdf0 -> Node0x162c050;
	Node0x162c050 -> Node0x162c0c0;
	Node0x162bc70 -> Node0x162c0c0;
	Node0x162c0c0 -> Node0x162c130;
	Node0x162bf70 -> Node0x162c130;
	Node0x162c130 -> Node0x162c1a0;
	Node0x162bf00 -> Node0x162c1a0;
	Node0x162c1a0 -> Node0x162c210;
	Node0x162bd80 -> Node0x162c210;
	Node0x162bb90 -> Node0x162c280;
	Node0x162c210 -> Node0x162c280;
	Node0x162c280 -> Node0x15cc268;
	Node0x15cc268 -> Node0x162c720;
}
