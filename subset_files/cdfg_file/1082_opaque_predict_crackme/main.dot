digraph "DFG for'main' function" {
	Node0x9d3388[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x9d3408[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x9d3498[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x9d34f8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x9d3978[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x9d3a58[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x9d3b58[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x9d3c18[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x9d3cc8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x9d3f28[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x9d3fe8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x9d4148[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x9d41a8[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x9d5cf0[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x9d5ef8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x9d6058[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x9d6168[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x9d6228[shape=record, label="  ret i32 0"];
	Node0x9d3388 -> Node0x9d3408;
	Node0x9d3408 -> Node0x9d3498;
	Node0x9d3498 -> Node0x9d34f8;
	Node0x9d34f8 -> Node0x9d3978;
	Node0x9d3978 -> Node0x9d3a58;
	Node0x9d3a58 -> Node0x9d3b58;
	Node0x9d3b58 -> Node0x9d3c18;
	Node0x9d3c18 -> Node0x9d3cc8;
	Node0x9d3cc8 -> Node0x9d3f28;
	Node0x9d3f28 -> Node0x9d3fe8;
	Node0x9d3fe8 -> Node0x9d4148;
	Node0x9d4148 -> Node0x9d41a8;
	Node0x9d41a8 -> Node0x9d5cf0;
	Node0x9d5cf0 -> Node0x9d5ef8;
	Node0x9d5ef8 -> Node0x9d6058;
	Node0x9d6058 -> Node0x9d6168;
	Node0x9d6168 -> Node0x9d6228;
edge [color=red]
	Node0x9d3388 -> Node0x9d34f8;
	Node0x9d34f8 -> Node0x9d3978;
	Node0x9d3408 -> Node0x9d3a58;
	Node0x9d3a58 -> Node0x9d3b58;
	Node0x9d3498 -> Node0x9d3c18;
	Node0x9d3c18 -> Node0x9d3cc8;
	Node0x9d3388 -> Node0x9d3f28;
	Node0x9d3408 -> Node0x9d3f28;
	Node0x9d3498 -> Node0x9d3f28;
	Node0x9d3388 -> Node0x9d3fe8;
	Node0x9d3408 -> Node0x9d4148;
	Node0x9d3498 -> Node0x9d41a8;
	Node0x9d3fe8 -> Node0x9d5cf0;
	Node0x9d4148 -> Node0x9d5cf0;
	Node0x9d41a8 -> Node0x9d5cf0;
	Node0x9d3c18 -> Node0x9d5ef8;
	Node0x9d3a58 -> Node0x9d6058;
	Node0x9d34f8 -> Node0x9d6168;
}
