; ModuleID = '../.././c_source_file/1398_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1398_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = or i32 %4, %3
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %1, %0
  %12 = xor i32 %11, -1
  %13 = or i32 %10, %12
  %14 = and i32 %12, %2
  %15 = shl i32 %14, 1
  %16 = add i32 %13, 1
  %17 = add i32 %16, %15
  %18 = add i32 %17, %7
  %19 = sub i32 %18, %8
  %20 = add i32 %4, 1
  %21 = or i32 %6, %3
  %22 = xor i32 %4, %3
  %23 = add i32 %21, 1
  %24 = and i32 %4, %3
  %25 = and i32 %9, %1
  %26 = xor i32 %25, %0
  %27 = and i32 %11, %2
  %28 = xor i32 %1, -1
  %29 = or i32 %28, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %9, %30
  %32 = xor i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = and i32 %29, %33
  %35 = or i32 %9, %1
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %0
  %38 = shl i32 %37, 1
  %39 = or i32 %9, %0
  %40 = or i32 %10, %11
  %41 = and i32 %2, %0
  %42 = or i32 %41, %1
  %43 = and i32 %28, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %33, %44
  %46 = xor i32 %25, -1
  %47 = or i32 %46, %0
  %48 = xor i32 %0, -1
  %49 = and i32 %2, %1
  %50 = and i32 %49, %48
  %51 = or i32 %2, %1
  %52 = and i32 %51, %0
  %53 = xor i32 %50, -1
  %54 = xor i32 %52, %53
  %55 = xor i32 %2, %0
  %56 = and i32 %55, %29
  %57 = or i32 %1, %0
  %58 = and i32 %57, %2
  %59 = or i32 %2, %0
  %60 = xor i32 %59, %1
  %61 = or i32 %25, %0
  %62 = xor i32 %36, %0
  %63 = and i32 %32, %44
  %64 = and i32 %51, %48
  %65 = or i32 %25, %43
  %66 = xor i32 %55, -1
  %67 = or i32 %66, %12
  %68 = xor i32 %39, -1
  %69 = or i32 %68, %1
  %70 = and i32 %49, %0
  %71 = and i32 %32, %48
  %72 = or i32 %70, %71
  %73 = and i32 %32, %0
  %74 = xor i32 %73, %53
  %75 = and i32 %32, %29
  %76 = and i32 %46, %48
  %77 = shl i32 %76, 1
  %78 = xor i32 %51, %0
  %79 = or i32 %70, %78
  %80 = xor i32 %44, %2
  %81 = and i32 %1, %0
  %82 = or i32 %81, %33
  %83 = or i32 %11, %2
  %84 = xor i32 %43, %2
  %85 = and i32 %28, %2
  %86 = and i32 %85, %0
  %87 = or i32 %32, %0
  %88 = xor i32 %87, 2147483647
  %89 = or i32 %88, %86
  %90 = shl i32 %89, 1
  %91 = or i32 %25, %48
  %92 = or i32 %55, %1
  %93 = shl i32 %92, 1
  %94 = or i32 %50, %52
  %95 = or i32 %41, %25
  %96 = and i32 %11, %66
  %97 = shl i32 %96, 1
  %98 = or i32 %81, %9
  %99 = xor i32 %57, -1
  %100 = or i32 %9, %99
  %101 = xor i32 %10, %1
  %102 = and i32 %44, %2
  %103 = or i32 %55, %99
  %104 = or i32 %50, %73
  %105 = and i32 %66, %12
  %106 = xor i32 %43, %46
  %107 = and i32 %9, %44
  %108 = and i32 %35, %48
  %109 = xor i32 %35, %81
  %110 = or i32 %81, %68
  %111 = or i32 %49, %43
  %112 = or i32 %33, %30
  %113 = or i32 %51, %0
  %114 = or i32 %11, %66
  %115 = xor i32 %33, %0
  %116 = xor i32 %49, -1
  %117 = or i32 %116, %0
  %118 = or i32 %10, %49
  %119 = shl i32 %118, 1
  %120 = xor i32 %51, -1
  %121 = xor i32 %120, %0
  %122 = xor i32 %32, %0
  %123 = xor i32 %122, -1
  %124 = xor i32 %86, %123
  %125 = xor i32 %43, %116
  %126 = or i32 %41, %12
  %127 = xor i32 %29, %2
  %128 = xor i32 %10, -1
  %129 = xor i32 %128, %1
  %130 = and i32 %29, %9
  %131 = or i32 %81, %36
  %132 = shl i32 %131, 1
  %133 = xor i32 %116, %0
  %134 = xor i32 %81, -1
  %135 = and i32 %32, %134
  %136 = xor i32 %35, %0
  %137 = and i32 %59, %11
  %138 = or i32 %32, %48
  %139 = shl i32 %138, 1
  %140 = and i32 %35, %0
  %141 = and i32 %128, %12
  %142 = or i32 %81, %120
  %143 = and i32 %57, %9
  %144 = xor i32 %59, %81
  %145 = shl i32 %144, 1
  %146 = xor i32 %134, %2
  %147 = or i32 %81, %2
  %148 = or i32 %81, %66
  %149 = xor i32 %41, -1
  %150 = xor i32 %149, %1
  %151 = shl i32 %30, 1
  %152 = or i32 %120, %0
  %153 = xor i32 %59, -1
  %154 = or i32 %81, %153
  %155 = xor i32 %41, %46
  %156 = and i32 %66, %1
  %157 = and i32 %59, %12
  %158 = or i32 %43, %66
  %159 = or i32 %41, %11
  %160 = shl i32 %35, 1
  %161 = add i32 %51, 1
  %162 = and i32 %59, %1
  %163 = or i32 %11, %9
  %164 = xor i32 %70, %122
  %165 = and i32 %29, %66
  %166 = and i32 %85, %48
  %167 = or i32 %28, %2
  %168 = and i32 %167, %0
  %169 = or i32 %166, %168
  %170 = add i32 %25, 1
  %171 = and i32 %46, %0
  %172 = and i32 %39, %1
  %173 = and i32 %149, %12
  %174 = or i32 %32, %43
  %175 = shl i32 %11, 2
  %176 = and i32 %66, %28
  %177 = and i32 %55, %134
  %178 = or i32 %68, %28
  %179 = or i32 %49, %48
  %180 = or i32 %46, %48
  %181 = or i32 %41, %30
  %182 = xor i32 %10, %116
  %183 = xor i32 %167, %0
  %184 = xor i32 %183, -1
  %185 = xor i32 %86, %184
  %186 = or i32 %11, %68
  %187 = xor i32 %49, %0
  %188 = or i32 %66, %30
  %189 = xor i32 %138, 2147483647
  %190 = or i32 %189, %166
  %191 = or i32 %66, %28
  %192 = or i32 %33, %0
  %193 = or i32 %55, %81
  %194 = or i32 %51, %48
  %195 = or i32 %33, %99
  %196 = or i32 %43, %9
  %197 = and i32 %167, %48
  %198 = or i32 %86, %197
  %199 = and i32 %39, %12
  %200 = and i32 %149, %1
  %201 = xor i32 %99, %2
  %202 = or i32 %9, %12
  %203 = shl i32 %202, 1
  %204 = or i32 %10, %1
  %205 = shl i32 %204, 2
  %206 = xor i32 %57, %2
  %207 = or i32 %55, %30
  %208 = and i32 %55, %11
  %209 = and i32 %149, %28
  %210 = or i32 %10, %28
  %211 = and i32 %59, %28
  %212 = or i32 %43, %2
  %213 = and i32 %39, %28
  %214 = or i32 %116, %48
  %215 = xor i32 %41, %51
  %216 = or i32 %41, %120
  %217 = shl i32 %216, 1
  %218 = and i32 %33, %0
  %219 = and i32 %55, %44
  %220 = or i32 %36, %48
  %221 = and i32 %55, %28
  %222 = or i32 %43, %33
  %223 = shl i32 %122, 1
  %224 = or i32 %99, %2
  %225 = xor i32 %168, -1
  %226 = xor i32 %166, %225
  %227 = xor i32 %41, %1
  %228 = and i32 %33, %48
  %229 = and i32 %57, %66
  %230 = and i32 %11, %128
  %231 = and i32 %33, %134
  %232 = and i32 %66, %134
  %233 = shl i32 %232, 1
  %234 = or i32 %68, %12
  %235 = add i32 %81, 1
  %236 = and i32 %11, %149
  %237 = xor i32 %39, %1
  %238 = or i32 %70, %123
  %239 = or i32 %55, %11
  %240 = and i32 %128, %28
  %241 = or i32 %35, %48
  %242 = add i32 %32, 1
  %243 = and i32 %116, %48
  %244 = or i32 %55, %43
  %245 = or i32 %41, %28
  %246 = and i32 %66, %44
  %247 = shl i32 %246, 1
  %248 = or i32 %32, %81
  %249 = xor i32 %70, -1
  %250 = xor i32 %71, %249
  %251 = xor i32 %39, %81
  %252 = or i32 %66, %1
  %253 = or i32 %120, %48
  %254 = and i32 %134, %2
  %255 = or i32 %86, %122
  %256 = and i32 %128, %1
  %257 = xor i32 %81, %2
  %258 = and i32 %9, %134
  %259 = and i32 %55, %57
  %260 = or i32 %12, %2
  %261 = xor i32 %41, %29
  %262 = add i32 %35, 1
  %263 = xor i32 %68, %1
  %264 = and i32 %39, %11
  %265 = shl i32 %153, 1
  %266 = or i32 %153, %12
  %267 = or i32 %70, %64
  %268 = or i32 %86, %183
  %269 = or i32 %11, %153
  %270 = xor i32 %64, %249
  %271 = or i32 %55, %12
  %272 = and i32 %9, %12
  %273 = xor i32 %10, %35
  %274 = and i32 %55, %1
  %275 = xor i32 %86, %87
  %276 = or i32 %49, %0
  %277 = add i32 %1, 1
  %278 = xor i32 %46, %0
  %279 = or i32 %153, %1
  %280 = and i32 %55, %12
  %281 = shl i32 %280, 1
  %282 = or i32 %35, %0
  %283 = or i32 %33, %48
  %284 = or i32 %153, %28
  %285 = or i32 %66, %99
  %286 = add i32 %55, 1
  %287 = and i32 %57, %33
  %288 = xor i32 %78, %249
  %289 = and i32 %120, %48
  %290 = and i32 %25, %48
  %291 = and i32 %120, %0
  %292 = mul i32 %291, -6
  %293 = and i32 %25, %0
  %294 = and i32 %36, %48
  %295 = mul i32 %294, -15
  %296 = and i32 %36, %0
  %297 = mul i32 %296, -20
  %298 = add i32 %260, %68
  %299 = add i32 %298, %206
  %300 = add i32 %299, %143
  %301 = add i32 %300, %127
  %302 = add i32 %301, %282
  %303 = add i32 %302, %278
  %304 = add i32 %303, %274
  %305 = add i32 %304, %253
  %306 = add i32 %305, %244
  %307 = add i32 %306, %239
  %308 = add i32 %307, %221
  %309 = add i32 %308, %220
  %310 = add i32 %309, %213
  %311 = add i32 %310, %208
  %312 = add i32 %311, %193
  %313 = add i32 %312, %181
  %314 = add i32 %313, %178
  %315 = add i32 %314, %159
  %316 = add i32 %315, %78
  %317 = add i32 %316, %91
  %318 = add i32 %317, %75
  %319 = add i32 %318, %238
  %320 = add i32 %319, %79
  %321 = add i32 %320, %190
  %322 = shl i32 %321, 1
  %323 = add i32 %161, %201
  %324 = sub i32 %323, %215
  %325 = add i32 %324, %188
  %326 = sub i32 %325, %114
  %327 = sub i32 %326, %24
  %328 = add i32 %327, %270
  %329 = mul i32 %328, 3
  %330 = add i32 %266, %290
  %331 = add i32 %330, %137
  %332 = sub i32 %331, %64
  %333 = add i32 %332, %23
  %334 = sub i32 %333, %74
  %335 = mul i32 %334, 5
  %336 = or i32 %50, %293
  %337 = mul i32 %336, -31
  %338 = add i32 %70, %289
  %339 = mul i32 %338, -7
  %340 = add i32 %56, %48
  %341 = shl i32 %340, 2
  %342 = add i32 %48, %1
  %343 = add i32 %342, %277
  %344 = add i32 %343, %99
  %345 = sub i32 %344, %2
  %346 = add i32 %345, %9
  %347 = sub i32 %346, %29
  %348 = add i32 %347, %12
  %349 = add i32 %348, %235
  %350 = add i32 %349, %81
  %351 = sub i32 %350, %57
  %352 = add i32 %351, %27
  %353 = sub i32 %352, %31
  %354 = sub i32 %353, %39
  %355 = sub i32 %354, %10
  %356 = add i32 %355, %58
  %357 = sub i32 %356, %41
  %358 = add i32 %357, %55
  %359 = add i32 %358, %80
  %360 = sub i32 %359, %83
  %361 = add i32 %360, %84
  %362 = add i32 %361, %98
  %363 = sub i32 %362, %100
  %364 = add i32 %363, %102
  %365 = add i32 %364, %107
  %366 = sub i32 %365, %130
  %367 = add i32 %366, %146
  %368 = add i32 %367, %147
  %369 = add i32 %368, %149
  %370 = sub i32 %369, %151
  %371 = sub i32 %370, %51
  %372 = add i32 %371, %163
  %373 = add i32 %372, %170
  %374 = sub i32 %373, %175
  %375 = sub i32 %374, %196
  %376 = add i32 %375, %128
  %377 = add i32 %376, %49
  %378 = add i32 %377, %212
  %379 = sub i32 %378, %224
  %380 = add i32 %379, %242
  %381 = add i32 %380, %25
  %382 = add i32 %381, %254
  %383 = add i32 %382, %257
  %384 = sub i32 %383, %258
  %385 = add i32 %384, %262
  %386 = sub i32 %385, %272
  %387 = add i32 %386, %286
  %388 = add i32 %387, %4
  %389 = add i32 %388, %20
  %390 = add i32 %389, %26
  %391 = sub i32 %390, %34
  %392 = sub i32 %391, %40
  %393 = add i32 %392, %42
  %394 = add i32 %393, %45
  %395 = sub i32 %394, %47
  %396 = sub i32 %395, %60
  %397 = add i32 %396, %61
  %398 = add i32 %397, %62
  %399 = add i32 %398, %63
  %400 = add i32 %399, %65
  %401 = add i32 %400, %67
  %402 = add i32 %401, %69
  %403 = sub i32 %402, %82
  %404 = add i32 %403, %95
  %405 = add i32 %404, %52
  %406 = sub i32 %405, %73
  %407 = sub i32 %406, %101
  %408 = sub i32 %407, %103
  %409 = sub i32 %408, %105
  %410 = sub i32 %409, %106
  %411 = add i32 %410, %108
  %412 = add i32 %411, %109
  %413 = sub i32 %412, %110
  %414 = add i32 %413, %111
  %415 = sub i32 %414, %112
  %416 = add i32 %415, %71
  %417 = add i32 %416, %113
  %418 = add i32 %417, %115
  %419 = sub i32 %418, %117
  %420 = add i32 %419, %121
  %421 = sub i32 %420, %125
  %422 = add i32 %421, %126
  %423 = sub i32 %422, %129
  %424 = add i32 %423, %133
  %425 = add i32 %424, %135
  %426 = add i32 %425, %136
  %427 = sub i32 %426, %140
  %428 = add i32 %427, %141
  %429 = sub i32 %428, %142
  %430 = sub i32 %429, %148
  %431 = sub i32 %430, %150
  %432 = add i32 %431, %152
  %433 = add i32 %432, %154
  %434 = sub i32 %433, %155
  %435 = sub i32 %434, %156
  %436 = add i32 %435, %157
  %437 = sub i32 %436, %158
  %438 = sub i32 %437, %160
  %439 = add i32 %438, %162
  %440 = add i32 %439, %165
  %441 = add i32 %440, %171
  %442 = sub i32 %441, %172
  %443 = add i32 %442, %173
  %444 = add i32 %443, %174
  %445 = add i32 %444, %176
  %446 = add i32 %445, %177
  %447 = sub i32 %446, %179
  %448 = sub i32 %447, %180
  %449 = add i32 %448, %182
  %450 = sub i32 %449, %186
  %451 = add i32 %450, %187
  %452 = add i32 %451, %191
  %453 = add i32 %452, %192
  %454 = add i32 %453, %194
  %455 = add i32 %454, %195
  %456 = add i32 %455, %199
  %457 = add i32 %456, %200
  %458 = sub i32 %457, %203
  %459 = sub i32 %458, %207
  %460 = sub i32 %459, %209
  %461 = sub i32 %460, %210
  %462 = add i32 %461, %211
  %463 = add i32 %462, %214
  %464 = add i32 %463, %218
  %465 = sub i32 %464, %219
  %466 = add i32 %465, %222
  %467 = sub i32 %466, %227
  %468 = add i32 %467, %228
  %469 = add i32 %468, %229
  %470 = sub i32 %469, %230
  %471 = sub i32 %470, %231
  %472 = add i32 %471, %87
  %473 = add i32 %472, %234
  %474 = sub i32 %473, %236
  %475 = add i32 %474, %237
  %476 = sub i32 %475, %240
  %477 = add i32 %476, %241
  %478 = sub i32 %477, %243
  %479 = sub i32 %478, %245
  %480 = sub i32 %479, %248
  %481 = sub i32 %480, %251
  %482 = sub i32 %481, %252
  %483 = add i32 %482, %256
  %484 = sub i32 %483, %259
  %485 = add i32 %484, %261
  %486 = sub i32 %485, %263
  %487 = add i32 %486, %264
  %488 = sub i32 %487, %265
  %489 = sub i32 %488, %269
  %490 = add i32 %489, %271
  %491 = sub i32 %490, %273
  %492 = add i32 %491, %276
  %493 = sub i32 %492, %279
  %494 = add i32 %493, %283
  %495 = sub i32 %494, %284
  %496 = sub i32 %495, %285
  %497 = add i32 %496, %287
  %498 = sub i32 %497, %21
  %499 = add i32 %498, %22
  %500 = sub i32 %499, %7
  %501 = sub i32 %500, %38
  %502 = add i32 %501, %54
  %503 = sub i32 %502, %72
  %504 = sub i32 %503, %77
  %505 = sub i32 %504, %93
  %506 = add i32 %505, %94
  %507 = sub i32 %506, %97
  %508 = add i32 %507, %104
  %509 = sub i32 %508, %119
  %510 = add i32 %509, %124
  %511 = sub i32 %510, %132
  %512 = sub i32 %511, %139
  %513 = sub i32 %512, %145
  %514 = add i32 %513, %164
  %515 = sub i32 %514, %169
  %516 = sub i32 %515, %185
  %517 = sub i32 %516, %198
  %518 = sub i32 %517, %205
  %519 = sub i32 %518, %217
  %520 = sub i32 %519, %223
  %521 = add i32 %520, %226
  %522 = sub i32 %521, %233
  %523 = sub i32 %522, %247
  %524 = add i32 %523, %250
  %525 = add i32 %524, %255
  %526 = add i32 %525, %267
  %527 = sub i32 %526, %268
  %528 = add i32 %527, %275
  %529 = sub i32 %528, %281
  %530 = add i32 %529, %288
  %531 = add i32 %530, %292
  %532 = add i32 %531, %295
  %533 = add i32 %532, %297
  %534 = add i32 %533, %337
  %535 = add i32 %534, %339
  %536 = add i32 %535, %341
  %537 = sub i32 %536, %90
  %538 = add i32 %537, %335
  %539 = add i32 %538, %329
  %540 = add i32 %539, %322
  %541 = icmp eq i32 %19, %540
  %542 = select i1 %541, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %543 = tail call i32 @puts(i8* nonnull dereferenceable(1) %542)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
