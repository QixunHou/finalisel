; ModuleID = '../.././c_source_file/1589_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1589_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = and i32 %2, %1
  %7 = or i32 %6, %5
  %8 = mul i32 %7, -2
  %9 = xor i32 %5, -1
  %10 = shl i32 %9, 1
  %11 = sub i32 %8, %10
  %12 = xor i32 %0, -1
  %13 = or i32 %6, %12
  %14 = xor i32 %2, -1
  %15 = and i32 %14, %1
  %16 = or i32 %4, %0
  %17 = xor i32 %16, %2
  %18 = or i32 %14, %0
  %19 = and i32 %18, %4
  %20 = xor i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %12
  %23 = and i32 %18, %1
  %24 = and i32 %6, %12
  %25 = and i32 %20, %0
  %26 = or i32 %24, %25
  %27 = and i32 %2, %0
  %28 = xor i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %27, %29
  %31 = xor i32 %9, %2
  %32 = xor i32 %18, -1
  %33 = or i32 %27, %15
  %34 = xor i32 %25, -1
  %35 = xor i32 %24, %34
  %36 = or i32 %2, %1
  %37 = and i32 %36, %0
  %38 = or i32 %28, %2
  %39 = xor i32 %2, %0
  %40 = and i32 %39, %1
  %41 = shl i32 %40, 1
  %42 = xor i32 %15, %0
  %43 = shl i32 %4, 1
  %44 = or i32 %1, %0
  %45 = and i32 %44, %14
  %46 = xor i32 %16, -1
  %47 = or i32 %39, %46
  %48 = and i32 %20, %44
  %49 = and i32 %16, %14
  %50 = or i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %51, %1
  %53 = xor i32 %39, -1
  %54 = or i32 %53, %29
  %55 = and i32 %39, %44
  %56 = and i32 %4, %2
  %57 = and i32 %56, %0
  %58 = or i32 %4, %2
  %59 = xor i32 %58, %0
  %60 = or i32 %57, %59
  %61 = or i32 %53, %4
  %62 = xor i32 %51, %1
  %63 = shl i32 %62, 1
  %64 = xor i32 %27, %16
  %65 = xor i32 %6, -1
  %66 = xor i32 %65, %0
  %67 = shl i32 %66, 1
  %68 = or i32 %20, %46
  %69 = or i32 %51, %29
  %70 = and i32 %14, %0
  %71 = xor i32 %70, %65
  %72 = xor i32 %46, %2
  %73 = or i32 %20, %12
  %74 = or i32 %20, %0
  %75 = xor i32 %27, -1
  %76 = and i32 %75, %29
  %77 = and i32 %56, %12
  %78 = xor i32 %77, %73
  %79 = or i32 %14, %1
  %80 = xor i32 %79, -1
  %81 = or i32 %80, %0
  %82 = and i32 %1, %0
  %83 = xor i32 %82, -1
  %84 = and i32 %20, %83
  %85 = xor i32 %79, %82
  %86 = or i32 %70, %4
  %87 = add i32 %28, 1
  %88 = xor i32 %36, %82
  %89 = or i32 %39, %4
  %90 = and i32 %50, %29
  %91 = shl i32 %90, 1
  %92 = xor i32 %15, -1
  %93 = or i32 %92, %12
  %94 = or i32 %70, %28
  %95 = and i32 %75, %4
  %96 = or i32 %32, %29
  %97 = shl i32 %96, 1
  %98 = xor i32 %74, -1
  %99 = or i32 %57, %98
  %100 = xor i32 %70, -1
  %101 = and i32 %50, %1
  %102 = and i32 %9, %2
  %103 = xor i32 %21, %0
  %104 = or i32 %36, %12
  %105 = xor i32 %5, %65
  %106 = and i32 %100, %1
  %107 = or i32 %70, %80
  %108 = shl i32 %107, 1
  %109 = xor i32 %83, %2
  %110 = or i32 %5, %2
  %111 = and i32 %29, %2
  %112 = and i32 %92, %12
  %113 = xor i32 %59, 2147483647
  %114 = xor i32 %113, %57
  %115 = and i32 %21, %83
  %116 = xor i32 %44, -1
  %117 = or i32 %39, %116
  %118 = or i32 %65, %12
  %119 = or i32 %27, %116
  %120 = xor i32 %36, %0
  %121 = shl i32 %120, 1
  %122 = and i32 %50, %28
  %123 = shl i32 %122, 1
  %124 = and i32 %14, %83
  %125 = xor i32 %5, %92
  %126 = xor i32 %50, %1
  %127 = or i32 %32, %4
  %128 = or i32 %5, %21
  %129 = shl i32 %128, 1
  %130 = and i32 %75, %1
  %131 = or i32 %14, %46
  %132 = and i32 %39, %28
  %133 = and i32 %16, %53
  %134 = shl i32 %133, 1
  %135 = or i32 %27, %46
  %136 = xor i32 %36, -1
  %137 = or i32 %136, %12
  %138 = xor i32 %57, %74
  %139 = or i32 %79, %0
  %140 = or i32 %27, %136
  %141 = and i32 %18, %28
  %142 = and i32 %58, %0
  %143 = or i32 %77, %142
  %144 = xor i32 %142, -1
  %145 = xor i32 %77, %144
  %146 = or i32 %20, %82
  %147 = xor i32 %73, -1
  %148 = or i32 %77, %147
  %149 = or i32 %46, %2
  %150 = shl i32 %149, 1
  %151 = and i32 %20, %12
  %152 = xor i32 %44, %2
  %153 = or i32 %82, %21
  %154 = and i32 %58, %12
  %155 = or i32 %57, %154
  %156 = and i32 %14, %29
  %157 = xor i32 %27, %1
  %158 = or i32 %5, %53
  %159 = and i32 %28, %14
  %160 = and i32 %53, %29
  %161 = or i32 %39, %1
  %162 = and i32 %21, %0
  %163 = or i32 %82, %32
  %164 = xor i32 %20, %0
  %165 = and i32 %18, %29
  %166 = or i32 %70, %1
  %167 = add i32 %6, 1
  %168 = or i32 %24, %37
  %169 = and i32 %53, %4
  %170 = and i32 %44, %53
  %171 = xor i32 %70, %79
  %172 = add i32 %27, 1
  %173 = xor i32 %136, %0
  %174 = xor i32 %164, -1
  %175 = xor i32 %57, %174
  %176 = or i32 %15, %0
  %177 = shl i32 %176, 1
  %178 = and i32 %6, %0
  %179 = xor i32 %178, -1
  %180 = xor i32 %120, %179
  %181 = and i32 %79, %12
  %182 = or i32 %53, %46
  %183 = xor i32 %79, %0
  %184 = or i32 %28, %51
  %185 = or i32 %82, %14
  %186 = and i32 %65, %0
  %187 = or i32 %65, %0
  %188 = or i32 %27, %4
  %189 = or i32 %79, %12
  %190 = xor i32 %27, %44
  %191 = xor i32 %50, %82
  %192 = or i32 %39, %29
  %193 = and i32 %16, %2
  %194 = and i32 %36, %12
  %195 = xor i32 %194, %179
  %196 = or i32 %39, %82
  %197 = shl i32 %196, 1
  %198 = and i32 %92, %0
  %199 = and i32 %44, %21
  %200 = and i32 %79, %0
  %201 = or i32 %29, %2
  %202 = or i32 %80, %12
  %203 = or i32 %27, %28
  %204 = and i32 %53, %1
  %205 = and i32 %50, %4
  %206 = or i32 %53, %1
  %207 = or i32 %178, %174
  %208 = xor i32 %178, %164
  %209 = and i32 %39, %9
  %210 = and i32 %100, %29
  %211 = shl i32 %210, 1
  %212 = or i32 %36, %0
  %213 = shl i32 %212, 1
  %214 = or i32 %82, %51
  %215 = xor i32 %92, %0
  %216 = shl i32 %215, 2
  %217 = xor i32 %82, %2
  %218 = shl i32 %217, 1
  %219 = xor i32 %32, %1
  %220 = or i32 %82, %80
  %221 = or i32 %178, %120
  %222 = or i32 %14, %29
  %223 = shl i32 %222, 1
  %224 = xor i32 %116, %2
  %225 = xor i32 %18, %1
  %226 = shl i32 %225, 2
  %227 = or i32 %15, %5
  %228 = and i32 %39, %29
  %229 = xor i32 %75, %1
  %230 = or i32 %21, %46
  %231 = or i32 %178, %194
  %232 = or i32 %136, %0
  %233 = or i32 %178, %151
  %234 = or i32 %20, %116
  %235 = xor i32 %70, %1
  %236 = shl i32 %53, 1
  %237 = or i32 %14, %116
  %238 = or i32 %53, %116
  %239 = shl i32 %116, 1
  %240 = and i32 %39, %4
  %241 = or i32 %6, %0
  %242 = or i32 %116, %2
  %243 = or i32 %51, %4
  %244 = and i32 %44, %2
  %245 = shl i32 %244, 1
  %246 = and i32 %28, %2
  %247 = xor i32 %151, 2147483647
  %248 = xor i32 %247, %178
  %249 = and i32 %28, %100
  %250 = or i32 %28, %53
  %251 = or i32 %28, %32
  %252 = and i32 %53, %9
  %253 = or i32 %39, %5
  %254 = or i32 %57, %164
  %255 = shl i32 %254, 1
  %256 = or i32 %70, %6
  %257 = and i32 %14, %9
  %258 = xor i32 %100, %1
  %259 = and i32 %136, %12
  %260 = and i32 %15, %12
  %261 = and i32 %136, %0
  %262 = and i32 %15, %0
  %263 = shl i32 %262, 4
  %264 = and i32 %80, %12
  %265 = mul i32 %264, 13
  %266 = mul i32 %24, -11
  %267 = and i32 %80, %0
  %268 = shl i32 %267, 2
  %269 = add i32 %224, %246
  %270 = add i32 %269, %201
  %271 = add i32 %270, %51
  %272 = add i32 %271, %110
  %273 = add i32 %272, %205
  %274 = add i32 %273, %199
  %275 = add i32 %274, %191
  %276 = add i32 %275, %173
  %277 = add i32 %276, %125
  %278 = add i32 %277, %106
  %279 = add i32 %278, %30
  %280 = add i32 %279, %23
  %281 = add i32 %280, %233
  %282 = add i32 %281, %221
  %283 = add i32 %282, %114
  %284 = add i32 %283, %248
  %285 = shl i32 %284, 1
  %286 = sub i32 %261, %260
  %287 = add i32 %286, %85
  %288 = sub i32 %287, %47
  %289 = mul i32 %288, 5
  %290 = add i32 %249, %206
  %291 = shl i32 %290, 2
  %292 = add i32 %249, %178
  %293 = sub i32 %292, %137
  %294 = sub i32 %293, %48
  %295 = mul i32 %294, 3
  %296 = add i32 %2, %1
  %297 = add i32 %296, %43
  %298 = sub i32 %87, %297
  %299 = add i32 %298, %46
  %300 = add i32 %299, %5
  %301 = add i32 %300, %14
  %302 = add i32 %301, %28
  %303 = sub i32 %302, %82
  %304 = sub i32 %303, %15
  %305 = sub i32 %304, %17
  %306 = add i32 %305, %31
  %307 = add i32 %306, %32
  %308 = sub i32 %307, %38
  %309 = sub i32 %308, %45
  %310 = sub i32 %309, %49
  %311 = sub i32 %310, %27
  %312 = sub i32 %311, %72
  %313 = add i32 %312, %100
  %314 = sub i32 %313, %102
  %315 = sub i32 %314, %109
  %316 = add i32 %315, %111
  %317 = sub i32 %316, %124
  %318 = add i32 %317, %131
  %319 = sub i32 %318, %152
  %320 = add i32 %319, %156
  %321 = sub i32 %320, %159
  %322 = sub i32 %321, %39
  %323 = add i32 %322, %167
  %324 = add i32 %323, %172
  %325 = add i32 %324, %185
  %326 = sub i32 %325, %70
  %327 = add i32 %326, %193
  %328 = add i32 %327, %6
  %329 = add i32 %328, %237
  %330 = sub i32 %329, %239
  %331 = sub i32 %330, %242
  %332 = sub i32 %331, %257
  %333 = sub i32 %332, %13
  %334 = add i32 %333, %19
  %335 = sub i32 %334, %22
  %336 = sub i32 %335, %33
  %337 = add i32 %336, %37
  %338 = sub i32 %337, %42
  %339 = sub i32 %338, %52
  %340 = add i32 %339, %54
  %341 = add i32 %340, %55
  %342 = sub i32 %341, %61
  %343 = add i32 %342, %64
  %344 = sub i32 %343, %68
  %345 = add i32 %344, %69
  %346 = add i32 %345, %71
  %347 = add i32 %346, %73
  %348 = sub i32 %347, %74
  %349 = add i32 %348, %76
  %350 = add i32 %349, %81
  %351 = add i32 %350, %84
  %352 = add i32 %351, %86
  %353 = add i32 %352, %88
  %354 = sub i32 %353, %89
  %355 = add i32 %354, %93
  %356 = add i32 %355, %94
  %357 = add i32 %356, %95
  %358 = add i32 %357, %101
  %359 = sub i32 %358, %103
  %360 = sub i32 %359, %104
  %361 = add i32 %360, %105
  %362 = add i32 %361, %112
  %363 = add i32 %362, %115
  %364 = sub i32 %363, %117
  %365 = add i32 %364, %118
  %366 = add i32 %365, %119
  %367 = add i32 %366, %126
  %368 = add i32 %367, %127
  %369 = sub i32 %368, %130
  %370 = add i32 %369, %132
  %371 = add i32 %370, %135
  %372 = add i32 %371, %139
  %373 = add i32 %372, %140
  %374 = sub i32 %373, %141
  %375 = sub i32 %374, %146
  %376 = sub i32 %375, %150
  %377 = sub i32 %376, %151
  %378 = sub i32 %377, %153
  %379 = add i32 %378, %157
  %380 = sub i32 %379, %158
  %381 = sub i32 %380, %160
  %382 = add i32 %381, %161
  %383 = add i32 %382, %162
  %384 = sub i32 %383, %163
  %385 = sub i32 %384, %164
  %386 = add i32 %385, %165
  %387 = sub i32 %386, %166
  %388 = sub i32 %387, %169
  %389 = add i32 %388, %170
  %390 = add i32 %389, %171
  %391 = add i32 %390, %181
  %392 = sub i32 %391, %182
  %393 = add i32 %392, %183
  %394 = sub i32 %393, %184
  %395 = add i32 %394, %186
  %396 = add i32 %395, %187
  %397 = sub i32 %396, %188
  %398 = sub i32 %397, %189
  %399 = add i32 %398, %190
  %400 = add i32 %399, %192
  %401 = sub i32 %400, %198
  %402 = sub i32 %401, %200
  %403 = add i32 %402, %202
  %404 = sub i32 %403, %203
  %405 = sub i32 %404, %204
  %406 = add i32 %405, %209
  %407 = sub i32 %406, %214
  %408 = sub i32 %407, %218
  %409 = add i32 %408, %219
  %410 = add i32 %409, %220
  %411 = sub i32 %410, %25
  %412 = sub i32 %411, %223
  %413 = add i32 %412, %227
  %414 = sub i32 %413, %228
  %415 = add i32 %414, %229
  %416 = add i32 %415, %230
  %417 = sub i32 %416, %232
  %418 = add i32 %417, %234
  %419 = add i32 %418, %235
  %420 = sub i32 %419, %236
  %421 = sub i32 %420, %238
  %422 = add i32 %421, %240
  %423 = sub i32 %422, %241
  %424 = sub i32 %423, %243
  %425 = sub i32 %424, %245
  %426 = add i32 %425, %250
  %427 = add i32 %426, %251
  %428 = sub i32 %427, %252
  %429 = add i32 %428, %253
  %430 = add i32 %429, %256
  %431 = sub i32 %430, %258
  %432 = add i32 %431, %259
  %433 = sub i32 %432, %26
  %434 = add i32 %433, %35
  %435 = sub i32 %434, %41
  %436 = sub i32 %435, %60
  %437 = sub i32 %436, %63
  %438 = sub i32 %437, %67
  %439 = sub i32 %438, %78
  %440 = sub i32 %439, %91
  %441 = sub i32 %440, %97
  %442 = sub i32 %441, %99
  %443 = sub i32 %442, %108
  %444 = sub i32 %443, %121
  %445 = sub i32 %444, %123
  %446 = sub i32 %445, %129
  %447 = sub i32 %446, %134
  %448 = add i32 %447, %138
  %449 = add i32 %448, %143
  %450 = add i32 %449, %145
  %451 = sub i32 %450, %148
  %452 = add i32 %451, %155
  %453 = add i32 %452, %168
  %454 = add i32 %453, %175
  %455 = sub i32 %454, %177
  %456 = sub i32 %455, %180
  %457 = add i32 %456, %195
  %458 = sub i32 %457, %197
  %459 = sub i32 %458, %207
  %460 = sub i32 %459, %208
  %461 = sub i32 %460, %211
  %462 = sub i32 %461, %213
  %463 = sub i32 %462, %216
  %464 = sub i32 %463, %226
  %465 = add i32 %464, %231
  %466 = add i32 %465, %263
  %467 = add i32 %466, %265
  %468 = add i32 %467, %266
  %469 = sub i32 %468, %268
  %470 = sub i32 %469, %255
  %471 = add i32 %470, %291
  %472 = add i32 %471, %289
  %473 = add i32 %472, %295
  %474 = add i32 %473, %285
  %475 = icmp eq i32 %11, %474
  %476 = select i1 %475, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %477 = tail call i32 @puts(i8* nonnull dereferenceable(1) %476)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
