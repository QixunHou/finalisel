digraph "DFG for'crackme' function" {
	Node0x555510[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x555bc0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x555c80[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x555cf0[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x555d60[shape=record, label="  %7 = add i32 %3, %6"];
	Node0x555dd0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x555e40[shape=record, label="  %9 = shl i32 %4, 1"];
	Node0x555eb0[shape=record, label="  %10 = or i32 %4, %0"];
	Node0x555f50[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0x555fc0[shape=record, label="  %12 = xor i32 %3, -1"];
	Node0x556030[shape=record, label="  %13 = xor i32 %10, -1"];
	Node0x5560d0[shape=record, label="  %14 = mul i32 %13, 3"];
	Node0x556140[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x5561b0[shape=record, label="  %16 = shl i32 %8, 1"];
	Node0x556220[shape=record, label="  %17 = sub i32 2, %1"];
	Node0x556290[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0x556300[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x556370[shape=record, label="  %20 = sub i32 %19, %5"];
	Node0x5563e0[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x556450[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x5564c0[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x556530[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x5565a0[shape=record, label="  %25 = icmp eq i32 %7, %24"];
	Node0x4f6268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x556a40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x556a90[shape=record, label="  ret void"];
	Node0x555510 -> Node0x555bc0;
	Node0x555bc0 -> Node0x555c80;
	Node0x555c80 -> Node0x555cf0;
	Node0x555cf0 -> Node0x555d60;
	Node0x555d60 -> Node0x555dd0;
	Node0x555dd0 -> Node0x555e40;
	Node0x555e40 -> Node0x555eb0;
	Node0x555eb0 -> Node0x555f50;
	Node0x555f50 -> Node0x555fc0;
	Node0x555fc0 -> Node0x556030;
	Node0x556030 -> Node0x5560d0;
	Node0x5560d0 -> Node0x556140;
	Node0x556140 -> Node0x5561b0;
	Node0x5561b0 -> Node0x556220;
	Node0x556220 -> Node0x556290;
	Node0x556290 -> Node0x556300;
	Node0x556300 -> Node0x556370;
	Node0x556370 -> Node0x5563e0;
	Node0x5563e0 -> Node0x556450;
	Node0x556450 -> Node0x5564c0;
	Node0x5564c0 -> Node0x556530;
	Node0x556530 -> Node0x5565a0;
	Node0x5565a0 -> Node0x4f6268;
	Node0x4f6268 -> Node0x556a40;
	Node0x556a40 -> Node0x556a90;
edge [color=red]
	Node0x555bc0 -> Node0x555c80;
	Node0x555c80 -> Node0x555cf0;
	Node0x555510 -> Node0x555d60;
	Node0x555cf0 -> Node0x555d60;
	Node0x555bc0 -> Node0x555e40;
	Node0x555bc0 -> Node0x555eb0;
	Node0x555eb0 -> Node0x555f50;
	Node0x555510 -> Node0x555fc0;
	Node0x555eb0 -> Node0x556030;
	Node0x556030 -> Node0x5560d0;
	Node0x555dd0 -> Node0x5561b0;
	Node0x556220 -> Node0x556290;
	Node0x555e40 -> Node0x556290;
	Node0x556290 -> Node0x556300;
	Node0x555fc0 -> Node0x556300;
	Node0x556300 -> Node0x556370;
	Node0x555c80 -> Node0x556370;
	Node0x556370 -> Node0x5563e0;
	Node0x556140 -> Node0x5563e0;
	Node0x5563e0 -> Node0x556450;
	Node0x555f50 -> Node0x556450;
	Node0x556450 -> Node0x5564c0;
	Node0x5560d0 -> Node0x5564c0;
	Node0x5564c0 -> Node0x556530;
	Node0x5561b0 -> Node0x556530;
	Node0x555d60 -> Node0x5565a0;
	Node0x556530 -> Node0x5565a0;
	Node0x5565a0 -> Node0x4f6268;
	Node0x4f6268 -> Node0x556a40;
}
