digraph "DFG for'crackme' function" {
	Node0x1620970[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x16209e0[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0x1620aa0[shape=record, label="  %5 = add i32 %3, %4"];
	Node0x1620b10[shape=record, label="  %6 = or i32 %4, %1"];
	Node0x1620b80[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1620bf0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1620c60[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x1620cd0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1620d40[shape=record, label="  %11 = or i32 %3, %0"];
	Node0x1620db0[shape=record, label="  %12 = add i32 %6, %11"];
	Node0x1620e20[shape=record, label="  %13 = sub i32 %12, %8"];
	Node0x1620e90[shape=record, label="  %14 = add i32 %13, %10"];
	Node0x1620f00[shape=record, label="  %15 = icmp eq i32 %5, %14"];
	Node0x15c1388[shape=record, label="  %16 = select i1 %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16213a0[shape=record, label="  %17 = tail call i32 @puts(i8* nonnull dereferenceable(1) %16)"];
	Node0x16213f0[shape=record, label="  ret void"];
	Node0x1620970 -> Node0x16209e0;
	Node0x16209e0 -> Node0x1620aa0;
	Node0x1620aa0 -> Node0x1620b10;
	Node0x1620b10 -> Node0x1620b80;
	Node0x1620b80 -> Node0x1620bf0;
	Node0x1620bf0 -> Node0x1620c60;
	Node0x1620c60 -> Node0x1620cd0;
	Node0x1620cd0 -> Node0x1620d40;
	Node0x1620d40 -> Node0x1620db0;
	Node0x1620db0 -> Node0x1620e20;
	Node0x1620e20 -> Node0x1620e90;
	Node0x1620e90 -> Node0x1620f00;
	Node0x1620f00 -> Node0x15c1388;
	Node0x15c1388 -> Node0x16213a0;
	Node0x16213a0 -> Node0x16213f0;
edge [color=red]
	Node0x1620970 -> Node0x1620aa0;
	Node0x16209e0 -> Node0x1620aa0;
	Node0x16209e0 -> Node0x1620b10;
	Node0x1620b80 -> Node0x1620bf0;
	Node0x1620c60 -> Node0x1620cd0;
	Node0x1620970 -> Node0x1620d40;
	Node0x1620b10 -> Node0x1620db0;
	Node0x1620d40 -> Node0x1620db0;
	Node0x1620db0 -> Node0x1620e20;
	Node0x1620bf0 -> Node0x1620e20;
	Node0x1620e20 -> Node0x1620e90;
	Node0x1620cd0 -> Node0x1620e90;
	Node0x1620aa0 -> Node0x1620f00;
	Node0x1620e90 -> Node0x1620f00;
	Node0x1620f00 -> Node0x15c1388;
	Node0x15c1388 -> Node0x16213a0;
}
