; ModuleID = '../.././c_source_file/1666_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1666_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = mul i32 %6, -2
  %8 = or i32 %7, 1
  %9 = xor i32 %2, -1
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %0
  %12 = or i32 %11, %9
  %13 = shl i32 %12, 1
  %14 = xor i32 %2, %0
  %15 = xor i32 %14, -1
  %16 = and i32 %15, %10
  %17 = add i32 %16, %13
  %18 = add i32 %17, %8
  %19 = xor i32 %6, %3
  %20 = shl i32 %4, 1
  %21 = and i32 %6, %3
  %22 = and i32 %4, %3
  %23 = shl i32 %22, 2
  %24 = xor i32 %23, -4
  %25 = or i32 %4, %3
  %26 = xor i32 %25, -1
  %27 = xor i32 %3, 2147483647
  %28 = and i32 %27, %4
  %29 = shl i32 %28, 1
  %30 = and i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %15, %31
  %33 = xor i32 %0, -1
  %34 = xor i32 %2, %1
  %35 = and i32 %34, %33
  %36 = and i32 %2, %0
  %37 = and i32 %9, %1
  %38 = xor i32 %37, -1
  %39 = xor i32 %36, %38
  %40 = or i32 %14, %30
  %41 = xor i32 %37, %0
  %42 = or i32 %10, %0
  %43 = and i32 %42, %15
  %44 = xor i32 %11, -1
  %45 = xor i32 %34, -1
  %46 = and i32 %45, %44
  %47 = or i32 %2, %1
  %48 = xor i32 %47, -1
  %49 = or i32 %30, %48
  %50 = and i32 %10, %2
  %51 = and i32 %50, %33
  %52 = or i32 %10, %2
  %53 = and i32 %52, %0
  %54 = xor i32 %53, -1
  %55 = xor i32 %51, %54
  %56 = and i32 %14, %1
  %57 = and i32 %50, %0
  %58 = xor i32 %52, %33
  %59 = xor i32 %58, %57
  %60 = and i32 %14, %42
  %61 = and i32 %2, %1
  %62 = and i32 %61, %0
  %63 = and i32 %47, %33
  %64 = xor i32 %62, -1
  %65 = xor i32 %63, %64
  %66 = or i32 %34, %11
  %67 = mul i32 %66, 5
  %68 = or i32 %2, %0
  %69 = xor i32 %1, %0
  %70 = and i32 %68, %69
  %71 = or i32 %69, %15
  %72 = or i32 %9, %0
  %73 = and i32 %72, %69
  %74 = shl i32 %73, 1
  %75 = or i32 %34, %0
  %76 = xor i32 %75, -1
  %77 = or i32 %57, %76
  %78 = or i32 %48, %33
  %79 = shl i32 %78, 1
  %80 = xor i32 %36, -1
  %81 = and i32 %80, %1
  %82 = or i32 %1, %0
  %83 = or i32 %9, %1
  %84 = and i32 %83, %33
  %85 = or i32 %14, %10
  %86 = xor i32 %36, %42
  %87 = and i32 %9, %0
  %88 = xor i32 %87, -1
  %89 = and i32 %88, %1
  %90 = xor i32 %69, -1
  %91 = and i32 %72, %90
  %92 = or i32 %36, %48
  %93 = and i32 %61, %33
  %94 = and i32 %34, %0
  %95 = or i32 %93, %94
  %96 = and i32 %68, %90
  %97 = add i32 %34, 1
  %98 = or i32 %37, %33
  %99 = and i32 %68, %1
  %100 = or i32 %36, %90
  %101 = xor i32 %42, -1
  %102 = or i32 %9, %101
  %103 = or i32 %34, %33
  %104 = xor i32 %103, 2147483647
  %105 = or i32 %104, %51
  %106 = shl i32 %105, 1
  %107 = and i32 %47, %0
  %108 = or i32 %93, %107
  %109 = xor i32 %101, %2
  %110 = xor i32 %82, -1
  %111 = xor i32 %110, %2
  %112 = or i32 %87, %69
  %113 = xor i32 %68, -1
  %114 = or i32 %113, %10
  %115 = or i32 %14, %110
  %116 = xor i32 %80, %1
  %117 = xor i32 %34, %0
  %118 = xor i32 %62, %117
  %119 = and i32 %9, %90
  %120 = or i32 %36, %101
  %121 = shl i32 %120, 1
  %122 = xor i32 %72, -1
  %123 = xor i32 %122, %1
  %124 = and i32 %15, %44
  %125 = and i32 %69, %80
  %126 = xor i32 %68, %30
  %127 = or i32 %62, %63
  %128 = xor i32 %36, %82
  %129 = add i32 %69, 1
  %130 = or i32 %48, %0
  %131 = xor i32 %36, %1
  %132 = and i32 %52, %33
  %133 = or i32 %57, %132
  %134 = or i32 %30, %2
  %135 = xor i32 %83, %30
  %136 = shl i32 %135, 1
  %137 = or i32 %45, %33
  %138 = and i32 %72, %1
  %139 = xor i32 %47, %30
  %140 = xor i32 %36, %47
  %141 = and i32 %15, %1
  %142 = or i32 %9, %110
  %143 = xor i32 %44, %2
  %144 = xor i32 %87, %83
  %145 = or i32 %87, %90
  %146 = and i32 %88, %10
  %147 = or i32 %47, %33
  %148 = or i32 %38, %33
  %149 = shl i32 %10, 1
  %150 = and i32 %14, %69
  %151 = and i32 %42, %2
  %152 = shl i32 %151, 2
  %153 = or i32 %110, %2
  %154 = shl i32 %153, 1
  %155 = or i32 %113, %90
  %156 = or i32 %34, %30
  %157 = xor i32 %57, %75
  %158 = xor i32 %51, %103
  %159 = or i32 %30, %113
  %160 = and i32 %88, %90
  %161 = or i32 %36, %69
  %162 = shl i32 %161, 1
  %163 = xor i32 %87, %1
  %164 = shl i32 %113, 1
  %165 = and i32 %9, %31
  %166 = shl i32 %165, 1
  %167 = xor i32 %117, 2147483647
  %168 = or i32 %167, %62
  %169 = and i32 %69, %2
  %170 = or i32 %38, %0
  %171 = shl i32 %170, 1
  %172 = or i32 %87, %1
  %173 = or i32 %14, %90
  %174 = or i32 %69, %2
  %175 = or i32 %11, %2
  %176 = and i32 %14, %90
  %177 = or i32 %90, %2
  %178 = xor i32 %61, -1
  %179 = or i32 %178, %0
  %180 = and i32 %14, %44
  %181 = and i32 %178, %0
  %182 = or i32 %45, %0
  %183 = xor i32 %30, %2
  %184 = xor i32 %38, %0
  %185 = and i32 %34, %44
  %186 = xor i32 %72, %30
  %187 = and i32 %14, %82
  %188 = shl i32 %187, 1
  %189 = and i32 %34, %42
  %190 = and i32 %14, %10
  %191 = and i32 %34, %82
  %192 = or i32 %69, %122
  %193 = or i32 %15, %90
  %194 = xor i32 %35, %64
  %195 = xor i32 %94, -1
  %196 = xor i32 %93, %195
  %197 = and i32 %45, %0
  %198 = and i32 %48, %33
  %199 = and i32 %37, %33
  %200 = mul i32 %199, -14
  %201 = and i32 %48, %0
  %202 = mul i32 %201, -12
  %203 = and i32 %37, %0
  %204 = mul i32 %203, -17
  %205 = xor i32 %83, -1
  %206 = and i32 %205, %33
  %207 = mul i32 %206, -6
  %208 = or i32 %82, %2
  %209 = add i32 %208, %197
  %210 = add i32 %209, %192
  %211 = add i32 %210, %190
  %212 = add i32 %211, %138
  %213 = add i32 %212, %130
  %214 = add i32 %213, %98
  %215 = add i32 %214, %91
  %216 = add i32 %215, %70
  %217 = add i32 %216, %43
  %218 = add i32 %217, %168
  %219 = shl i32 %218, 1
  %220 = add i32 %198, %62
  %221 = add i32 %220, %26
  %222 = add i32 %221, %21
  %223 = mul i32 %222, -7
  %224 = add i32 %31, %44
  %225 = add i32 %224, %157
  %226 = shl i32 %225, 2
  %227 = or i32 %11, %37
  %228 = add i32 %227, %144
  %229 = mul i32 %228, 3
  %230 = add i32 %0, 3
  %231 = add i32 %230, %1
  %232 = sub i32 %231, %30
  %233 = add i32 %232, %129
  %234 = sub i32 %233, %149
  %235 = add i32 %234, 1
  %236 = sub i32 %235, %47
  %237 = add i32 %236, %97
  %238 = add i32 %237, %102
  %239 = add i32 %238, %109
  %240 = sub i32 %239, %111
  %241 = add i32 %240, %38
  %242 = add i32 %241, %119
  %243 = sub i32 %242, %134
  %244 = add i32 %243, %142
  %245 = sub i32 %244, %143
  %246 = add i32 %245, %169
  %247 = sub i32 %246, %174
  %248 = add i32 %247, %175
  %249 = sub i32 %248, %177
  %250 = sub i32 %249, %183
  %251 = sub i32 %250, %32
  %252 = add i32 %251, %35
  %253 = sub i32 %252, %39
  %254 = add i32 %253, %40
  %255 = add i32 %254, %41
  %256 = add i32 %255, %46
  %257 = sub i32 %256, %49
  %258 = sub i32 %257, %56
  %259 = add i32 %258, %60
  %260 = add i32 %259, %71
  %261 = add i32 %260, %81
  %262 = add i32 %261, %84
  %263 = sub i32 %262, %63
  %264 = add i32 %263, %85
  %265 = add i32 %264, %86
  %266 = sub i32 %265, %89
  %267 = add i32 %266, %92
  %268 = add i32 %267, %75
  %269 = sub i32 %268, %96
  %270 = sub i32 %269, %99
  %271 = sub i32 %270, %100
  %272 = sub i32 %271, %112
  %273 = add i32 %272, %114
  %274 = sub i32 %273, %115
  %275 = sub i32 %274, %116
  %276 = sub i32 %275, %123
  %277 = add i32 %276, %124
  %278 = sub i32 %277, %125
  %279 = sub i32 %278, %126
  %280 = add i32 %279, %128
  %281 = sub i32 %280, %131
  %282 = sub i32 %281, %137
  %283 = sub i32 %282, %139
  %284 = sub i32 %283, %140
  %285 = sub i32 %284, %141
  %286 = sub i32 %285, %145
  %287 = sub i32 %286, %146
  %288 = add i32 %287, %147
  %289 = sub i32 %288, %148
  %290 = add i32 %289, %150
  %291 = sub i32 %290, %152
  %292 = sub i32 %291, %154
  %293 = add i32 %292, %155
  %294 = sub i32 %293, %117
  %295 = add i32 %294, %156
  %296 = add i32 %295, %159
  %297 = add i32 %296, %160
  %298 = sub i32 %297, %163
  %299 = sub i32 %298, %164
  %300 = sub i32 %299, %166
  %301 = sub i32 %300, %172
  %302 = add i32 %301, %173
  %303 = sub i32 %302, %176
  %304 = sub i32 %303, %179
  %305 = add i32 %304, %180
  %306 = add i32 %305, %181
  %307 = add i32 %306, %182
  %308 = add i32 %307, %184
  %309 = add i32 %308, %185
  %310 = add i32 %309, %186
  %311 = sub i32 %310, %189
  %312 = sub i32 %311, %191
  %313 = sub i32 %312, %193
  %314 = sub i32 %313, %93
  %315 = sub i32 %314, %20
  %316 = add i32 %315, %19
  %317 = add i32 %316, %21
  %318 = add i32 %317, %22
  %319 = add i32 %318, %55
  %320 = add i32 %319, %59
  %321 = add i32 %320, %65
  %322 = add i32 %321, %67
  %323 = sub i32 %322, %74
  %324 = add i32 %323, %77
  %325 = sub i32 %324, %79
  %326 = sub i32 %325, %95
  %327 = add i32 %326, %108
  %328 = add i32 %327, %118
  %329 = sub i32 %328, %121
  %330 = add i32 %329, %127
  %331 = add i32 %330, %133
  %332 = sub i32 %331, %136
  %333 = sub i32 %332, %158
  %334 = sub i32 %333, %162
  %335 = sub i32 %334, %171
  %336 = sub i32 %335, %188
  %337 = sub i32 %336, %194
  %338 = add i32 %337, %196
  %339 = add i32 %338, %200
  %340 = add i32 %339, %202
  %341 = add i32 %340, %204
  %342 = add i32 %341, %207
  %343 = sub i32 %342, %29
  %344 = add i32 %343, %24
  %345 = sub i32 %344, %106
  %346 = add i32 %345, %229
  %347 = add i32 %346, %226
  %348 = add i32 %347, %223
  %349 = add i32 %348, %219
  %350 = icmp eq i32 %18, %349
  %351 = select i1 %350, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %352 = tail call i32 @puts(i8* nonnull dereferenceable(1) %351)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
