digraph "DFG for'crackme' function" {
	Node0x691ac0[shape=record, label="  %3 = add i32 %1, 1"];
	Node0x691b30[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x691bf0[shape=record, label="  %5 = add i32 %4, 1"];
	Node0x691c60[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x691cd0[shape=record, label="  %7 = or i32 %6, %1"];
	Node0x691d40[shape=record, label="  %8 = xor i32 %6, %1"];
	Node0x691db0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x691e20[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x691ec0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x691f30[shape=record, label="  %12 = and i32 %6, %1"];
	Node0x691fd0[shape=record, label="  %13 = mul i32 %12, 5"];
	Node0x692040[shape=record, label="  %14 = add i32 %5, %0"];
	Node0x6920b0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x692120[shape=record, label="  %16 = sub i32 1, %1"];
	Node0x692190[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0x692200[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x692270[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x6922e0[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x692350[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x6923c0[shape=record, label="  %22 = icmp eq i32 %3, %21"];
	Node0x632268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x692860[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x6928b0[shape=record, label="  ret void"];
	Node0x691ac0 -> Node0x691b30;
	Node0x691b30 -> Node0x691bf0;
	Node0x691bf0 -> Node0x691c60;
	Node0x691c60 -> Node0x691cd0;
	Node0x691cd0 -> Node0x691d40;
	Node0x691d40 -> Node0x691db0;
	Node0x691db0 -> Node0x691e20;
	Node0x691e20 -> Node0x691ec0;
	Node0x691ec0 -> Node0x691f30;
	Node0x691f30 -> Node0x691fd0;
	Node0x691fd0 -> Node0x692040;
	Node0x692040 -> Node0x6920b0;
	Node0x6920b0 -> Node0x692120;
	Node0x692120 -> Node0x692190;
	Node0x692190 -> Node0x692200;
	Node0x692200 -> Node0x692270;
	Node0x692270 -> Node0x6922e0;
	Node0x6922e0 -> Node0x692350;
	Node0x692350 -> Node0x6923c0;
	Node0x6923c0 -> Node0x632268;
	Node0x632268 -> Node0x692860;
	Node0x692860 -> Node0x6928b0;
edge [color=red]
	Node0x691b30 -> Node0x691bf0;
	Node0x691c60 -> Node0x691cd0;
	Node0x691c60 -> Node0x691d40;
	Node0x691db0 -> Node0x691e20;
	Node0x691e20 -> Node0x691ec0;
	Node0x691c60 -> Node0x691f30;
	Node0x691f30 -> Node0x691fd0;
	Node0x691bf0 -> Node0x692040;
	Node0x692040 -> Node0x6920b0;
	Node0x692120 -> Node0x692190;
	Node0x691cd0 -> Node0x692190;
	Node0x692190 -> Node0x692200;
	Node0x691d40 -> Node0x692200;
	Node0x692200 -> Node0x692270;
	Node0x691fd0 -> Node0x692270;
	Node0x692270 -> Node0x6922e0;
	Node0x691ec0 -> Node0x6922e0;
	Node0x6922e0 -> Node0x692350;
	Node0x6920b0 -> Node0x692350;
	Node0x691ac0 -> Node0x6923c0;
	Node0x692350 -> Node0x6923c0;
	Node0x6923c0 -> Node0x632268;
	Node0x632268 -> Node0x692860;
}
