digraph "DFG for'crackme' function" {
	Node0x1d7f730[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1d7f7a0[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x1d7fe20[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1d7fe90[shape=record, label="  %8 = xor i32 %7, %3"];
	Node0x1d7ff30[shape=record, label="  %9 = sub i32 1, %2"];
	Node0x1d7ffa0[shape=record, label="  %10 = sub i32 %9, %5"];
	Node0x1d80010[shape=record, label="  %11 = add i32 %10, %6"];
	Node0x1d80080[shape=record, label="  %12 = add i32 %11, %8"];
	Node0x1d800f0[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x1d80160[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1d801d0[shape=record, label="  %15 = xor i32 %5, -1"];
	Node0x1d80240[shape=record, label="  %16 = shl i32 %1, 1"];
	Node0x1d802e0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x1d80350[shape=record, label="  %18 = or i32 %2, %1"];
	Node0x1d803f0[shape=record, label="  %19 = shl i32 %18, 2"];
	Node0x1d80490[shape=record, label="  %20 = xor i32 %19, -4"];
	Node0x1d80530[shape=record, label="  %21 = xor i32 %1, 2147483647"];
	Node0x1d805a0[shape=record, label="  %22 = and i32 %21, %2"];
	Node0x1d80610[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x1d80680[shape=record, label="  %24 = and i32 %13, %1"];
	Node0x1d806f0[shape=record, label="  %25 = shl i32 %14, 1"];
	Node0x1d80760[shape=record, label="  %26 = and i32 %7, %3"];
	Node0x1d807d0[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x1d80840[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x1d808b0[shape=record, label="  %29 = or i32 %3, %0"];
	Node0x1d80920[shape=record, label="  %30 = shl i32 %3, 1"];
	Node0x1d80990[shape=record, label="  %31 = xor i32 %30, -2"];
	Node0x1d80a30[shape=record, label="  %32 = mul i32 %6, 5"];
	Node0x1d80ce0[shape=record, label="  %33 = sub i32 3, %0"];
	Node0x1d80d50[shape=record, label="  %34 = sub i32 %33, %0"];
	Node0x1d80dc0[shape=record, label="  %35 = add i32 %34, %1"];
	Node0x1d80e30[shape=record, label="  %36 = add i32 %35, %2"];
	Node0x1d80ea0[shape=record, label="  %37 = add i32 %36, %14"];
	Node0x1d80f10[shape=record, label="  %38 = add i32 %37, %15"];
	Node0x1d80f80[shape=record, label="  %39 = sub i32 %38, %17"];
	Node0x1d80ff0[shape=record, label="  %40 = add i32 %39, %24"];
	Node0x1d81060[shape=record, label="  %41 = sub i32 %40, %3"];
	Node0x1d810d0[shape=record, label="  %42 = add i32 %41, %23"];
	Node0x1d81140[shape=record, label="  %43 = sub i32 %42, %25"];
	Node0x1d811b0[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x1d81220[shape=record, label="  %45 = sub i32 %44, %26"];
	Node0x1d81290[shape=record, label="  %46 = add i32 %45, %20"];
	Node0x1d81300[shape=record, label="  %47 = add i32 %46, %31"];
	Node0x1d81370[shape=record, label="  %48 = add i32 %47, %32"];
	Node0x1d813e0[shape=record, label="  %49 = sub i32 %48, %28"];
	Node0x1d81450[shape=record, label="  %50 = icmp eq i32 %12, %49"];
	Node0x1d20268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d818f0[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x1d81940[shape=record, label="  ret void"];
	Node0x1d7f730 -> Node0x1d7f7a0;
	Node0x1d7f7a0 -> Node0x1d7fe20;
	Node0x1d7fe20 -> Node0x1d7fe90;
	Node0x1d7fe90 -> Node0x1d7ff30;
	Node0x1d7ff30 -> Node0x1d7ffa0;
	Node0x1d7ffa0 -> Node0x1d80010;
	Node0x1d80010 -> Node0x1d80080;
	Node0x1d80080 -> Node0x1d800f0;
	Node0x1d800f0 -> Node0x1d80160;
	Node0x1d80160 -> Node0x1d801d0;
	Node0x1d801d0 -> Node0x1d80240;
	Node0x1d80240 -> Node0x1d802e0;
	Node0x1d802e0 -> Node0x1d80350;
	Node0x1d80350 -> Node0x1d803f0;
	Node0x1d803f0 -> Node0x1d80490;
	Node0x1d80490 -> Node0x1d80530;
	Node0x1d80530 -> Node0x1d805a0;
	Node0x1d805a0 -> Node0x1d80610;
	Node0x1d80610 -> Node0x1d80680;
	Node0x1d80680 -> Node0x1d806f0;
	Node0x1d806f0 -> Node0x1d80760;
	Node0x1d80760 -> Node0x1d807d0;
	Node0x1d807d0 -> Node0x1d80840;
	Node0x1d80840 -> Node0x1d808b0;
	Node0x1d808b0 -> Node0x1d80920;
	Node0x1d80920 -> Node0x1d80990;
	Node0x1d80990 -> Node0x1d80a30;
	Node0x1d80a30 -> Node0x1d80ce0;
	Node0x1d80ce0 -> Node0x1d80d50;
	Node0x1d80d50 -> Node0x1d80dc0;
	Node0x1d80dc0 -> Node0x1d80e30;
	Node0x1d80e30 -> Node0x1d80ea0;
	Node0x1d80ea0 -> Node0x1d80f10;
	Node0x1d80f10 -> Node0x1d80f80;
	Node0x1d80f80 -> Node0x1d80ff0;
	Node0x1d80ff0 -> Node0x1d81060;
	Node0x1d81060 -> Node0x1d810d0;
	Node0x1d810d0 -> Node0x1d81140;
	Node0x1d81140 -> Node0x1d811b0;
	Node0x1d811b0 -> Node0x1d81220;
	Node0x1d81220 -> Node0x1d81290;
	Node0x1d81290 -> Node0x1d81300;
	Node0x1d81300 -> Node0x1d81370;
	Node0x1d81370 -> Node0x1d813e0;
	Node0x1d813e0 -> Node0x1d81450;
	Node0x1d81450 -> Node0x1d20268;
	Node0x1d20268 -> Node0x1d818f0;
	Node0x1d818f0 -> Node0x1d81940;
edge [color=red]
	Node0x1d7fe20 -> Node0x1d7fe90;
	Node0x1d7ff30 -> Node0x1d7ffa0;
	Node0x1d7f730 -> Node0x1d7ffa0;
	Node0x1d7ffa0 -> Node0x1d80010;
	Node0x1d7f7a0 -> Node0x1d80010;
	Node0x1d80010 -> Node0x1d80080;
	Node0x1d7fe90 -> Node0x1d80080;
	Node0x1d7f730 -> Node0x1d801d0;
	Node0x1d80240 -> Node0x1d802e0;
	Node0x1d80350 -> Node0x1d803f0;
	Node0x1d803f0 -> Node0x1d80490;
	Node0x1d80530 -> Node0x1d805a0;
	Node0x1d805a0 -> Node0x1d80610;
	Node0x1d800f0 -> Node0x1d80680;
	Node0x1d80160 -> Node0x1d806f0;
	Node0x1d7fe20 -> Node0x1d80760;
	Node0x1d80760 -> Node0x1d807d0;
	Node0x1d807d0 -> Node0x1d80840;
	Node0x1d80920 -> Node0x1d80990;
	Node0x1d7f7a0 -> Node0x1d80a30;
	Node0x1d80ce0 -> Node0x1d80d50;
	Node0x1d80d50 -> Node0x1d80dc0;
	Node0x1d80dc0 -> Node0x1d80e30;
	Node0x1d80e30 -> Node0x1d80ea0;
	Node0x1d80160 -> Node0x1d80ea0;
	Node0x1d80ea0 -> Node0x1d80f10;
	Node0x1d801d0 -> Node0x1d80f10;
	Node0x1d80f10 -> Node0x1d80f80;
	Node0x1d802e0 -> Node0x1d80f80;
	Node0x1d80f80 -> Node0x1d80ff0;
	Node0x1d80680 -> Node0x1d80ff0;
	Node0x1d80ff0 -> Node0x1d81060;
	Node0x1d81060 -> Node0x1d810d0;
	Node0x1d80610 -> Node0x1d810d0;
	Node0x1d810d0 -> Node0x1d81140;
	Node0x1d806f0 -> Node0x1d81140;
	Node0x1d81140 -> Node0x1d811b0;
	Node0x1d808b0 -> Node0x1d811b0;
	Node0x1d811b0 -> Node0x1d81220;
	Node0x1d80760 -> Node0x1d81220;
	Node0x1d81220 -> Node0x1d81290;
	Node0x1d80490 -> Node0x1d81290;
	Node0x1d81290 -> Node0x1d81300;
	Node0x1d80990 -> Node0x1d81300;
	Node0x1d81300 -> Node0x1d81370;
	Node0x1d80a30 -> Node0x1d81370;
	Node0x1d81370 -> Node0x1d813e0;
	Node0x1d80840 -> Node0x1d813e0;
	Node0x1d80080 -> Node0x1d81450;
	Node0x1d813e0 -> Node0x1d81450;
	Node0x1d81450 -> Node0x1d20268;
	Node0x1d20268 -> Node0x1d818f0;
}
