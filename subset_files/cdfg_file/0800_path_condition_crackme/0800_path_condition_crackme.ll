; ModuleID = '../.././c_source_file/0800_path_condition_crackme.c'
source_filename = "../.././c_source_file/0800_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %2, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %4, %6
  %8 = xor i32 %0, -1
  %9 = or i32 %2, %1
  %10 = and i32 %9, %8
  %11 = xor i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %2, -1
  %14 = and i32 %1, %0
  %15 = or i32 %14, %13
  %16 = xor i32 %4, -1
  %17 = and i32 %2, %1
  %18 = xor i32 %1, -1
  %19 = add i32 %1, 1
  %20 = and i32 %18, %2
  %21 = and i32 %20, %8
  %22 = or i32 %18, %2
  %23 = and i32 %22, %0
  %24 = or i32 %21, %23
  %25 = or i32 %18, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %5, %26
  %28 = or i32 %1, %0
  %29 = xor i32 %28, %2
  %30 = xor i32 %9, -1
  %31 = or i32 %14, %30
  %32 = or i32 %13, %1
  %33 = xor i32 %32, -1
  %34 = or i32 %33, %8
  %35 = and i32 %18, %0
  %36 = or i32 %35, %6
  %37 = and i32 %2, %0
  %38 = or i32 %37, %4
  %39 = or i32 %2, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %40, %1
  %42 = and i32 %13, %1
  %43 = xor i32 %42, -1
  %44 = xor i32 %43, %0
  %45 = and i32 %17, %8
  %46 = and i32 %11, %0
  %47 = or i32 %45, %46
  %48 = and i32 %39, %18
  %49 = or i32 %13, %26
  %50 = xor i32 %28, -1
  %51 = or i32 %5, %50
  %52 = and i32 %13, %0
  %53 = or i32 %52, %16
  %54 = add i32 %2, 1
  %55 = and i32 %43, %8
  %56 = shl i32 %55, 1
  %57 = or i32 %37, %42
  %58 = or i32 %40, %1
  %59 = and i32 %11, %8
  %60 = and i32 %20, %0
  %61 = xor i32 %22, %0
  %62 = xor i32 %60, -1
  %63 = xor i32 %61, %62
  %64 = or i32 %11, %0
  %65 = xor i32 %60, %64
  %66 = or i32 %11, %26
  %67 = xor i32 %52, -1
  %68 = and i32 %67, %18
  %69 = or i32 %13, %0
  %70 = and i32 %12, %8
  %71 = and i32 %25, %2
  %72 = xor i32 %39, %1
  %73 = xor i32 %17, -1
  %74 = or i32 %73, %0
  %75 = and i32 %17, %0
  %76 = xor i32 %75, -1
  %77 = xor i32 %59, %76
  %78 = or i32 %9, %8
  %79 = shl i32 %78, 1
  %80 = or i32 %14, %12
  %81 = or i32 %35, %13
  %82 = xor i32 %37, -1
  %83 = and i32 %4, %82
  %84 = and i32 %5, %1
  %85 = and i32 %13, %16
  %86 = xor i32 %35, -1
  %87 = and i32 %13, %86
  %88 = or i32 %5, %16
  %89 = or i32 %17, %35
  %90 = and i32 %5, %4
  %91 = and i32 %22, %8
  %92 = xor i32 %91, %62
  %93 = or i32 %16, %2
  %94 = and i32 %4, %13
  %95 = and i32 %4, %67
  %96 = or i32 %11, %8
  %97 = xor i32 %96, 2147483647
  %98 = or i32 %97, %21
  %99 = xor i32 %32, %0
  %100 = xor i32 %35, %43
  %101 = or i32 %11, %35
  %102 = and i32 %5, %16
  %103 = xor i32 %9, %8
  %104 = xor i32 %103, %75
  %105 = or i32 %5, %35
  %106 = and i32 %12, %0
  %107 = or i32 %43, %8
  %108 = shl i32 %107, 1
  %109 = xor i32 %11, %0
  %110 = xor i32 %75, %109
  %111 = or i32 %60, %61
  %112 = shl i32 %111, 1
  %113 = or i32 %40, %16
  %114 = and i32 %4, %2
  %115 = add i32 %28, 1
  %116 = or i32 %11, %14
  %117 = xor i32 %21, %96
  %118 = add i32 %37, 1
  %119 = xor i32 %37, %1
  %120 = xor i32 %69, -1
  %121 = xor i32 %120, %1
  %122 = and i32 %25, %13
  %123 = or i32 %120, %16
  %124 = or i32 %6, %50
  %125 = or i32 %42, %0
  %126 = or i32 %52, %4
  %127 = and i32 %5, %86
  %128 = or i32 %37, %50
  %129 = xor i32 %14, -1
  %130 = add i32 %14, 1
  %131 = xor i32 %17, %0
  %132 = or i32 %5, %1
  %133 = shl i32 %132, 1
  %134 = and i32 %9, %0
  %135 = xor i32 %134, -1
  %136 = xor i32 %45, %135
  %137 = or i32 %4, %120
  %138 = or i32 %5, %14
  %139 = xor i32 %109, -1
  %140 = or i32 %75, %139
  %141 = and i32 %43, %0
  %142 = shl i32 %141, 1
  %143 = xor i32 %12, %0
  %144 = xor i32 %39, %14
  %145 = xor i32 %23, 2147483647
  %146 = xor i32 %145, %21
  %147 = and i32 %67, %1
  %148 = or i32 %17, %0
  %149 = and i32 %28, %6
  %150 = and i32 %69, %1
  %151 = or i32 %75, %10
  %152 = or i32 %60, %109
  %153 = xor i32 %50, %2
  %154 = or i32 %35, %2
  %155 = xor i32 %26, %2
  %156 = and i32 %12, %86
  %157 = and i32 %82, %1
  %158 = shl i32 %157, 1
  %159 = or i32 %43, %0
  %160 = or i32 %30, %0
  %161 = or i32 %52, %18
  %162 = xor i32 %52, %73
  %163 = or i32 %37, %18
  %164 = or i32 %33, %0
  %165 = and i32 %11, %86
  %166 = or i32 %35, %12
  %167 = or i32 %120, %18
  %168 = or i32 %6, %18
  %169 = and i32 %6, %129
  %170 = shl i32 %169, 1
  %171 = and i32 %28, %2
  %172 = and i32 %86, %2
  %173 = and i32 %25, %6
  %174 = xor i32 %37, %25
  %175 = or i32 %42, %35
  %176 = or i32 %60, %91
  %177 = or i32 %52, %17
  %178 = or i32 %37, %16
  %179 = shl i32 %109, 1
  %180 = and i32 %82, %18
  %181 = xor i32 %14, %2
  %182 = and i32 %13, %129
  %183 = add i32 %17, 1
  %184 = or i32 %45, %134
  %185 = xor i32 %73, %0
  %186 = or i32 %73, %8
  %187 = or i32 %6, %26
  %188 = and i32 %69, %18
  %189 = or i32 %6, %16
  %190 = or i32 %9, %0
  %191 = shl i32 %190, 1
  %192 = xor i32 %35, %73
  %193 = or i32 %4, %6
  %194 = xor i32 %69, %1
  %195 = or i32 %14, %6
  %196 = or i32 %52, %1
  %197 = shl i32 %196, 1
  %198 = and i32 %16, %2
  %199 = shl i32 %198, 1
  %200 = and i32 %73, %8
  %201 = or i32 %40, %18
  %202 = or i32 %13, %16
  %203 = and i32 %129, %2
  %204 = and i32 %5, %18
  %205 = xor i32 %52, %32
  %206 = or i32 %14, %40
  %207 = or i32 %14, %33
  %208 = and i32 %30, %8
  %209 = mul i32 %208, -28
  %210 = and i32 %42, %8
  %211 = and i32 %42, %0
  %212 = mul i32 %211, -30
  %213 = and i32 %33, %8
  %214 = mul i32 %213, -20
  %215 = mul i32 %45, -26
  %216 = and i32 %33, %0
  %217 = mul i32 %216, -23
  %218 = mul i32 %75, -34
  %219 = add i32 %86, %26
  %220 = add i32 %219, %181
  %221 = add i32 %220, %6
  %222 = add i32 %221, %85
  %223 = add i32 %222, %67
  %224 = add i32 %223, %195
  %225 = add i32 %224, %193
  %226 = add i32 %225, %186
  %227 = add i32 %226, %178
  %228 = add i32 %227, %174
  %229 = add i32 %228, %164
  %230 = add i32 %229, %161
  %231 = add i32 %230, %147
  %232 = add i32 %231, %144
  %233 = add i32 %232, %128
  %234 = add i32 %233, %74
  %235 = add i32 %234, %66
  %236 = add i32 %235, %98
  %237 = add i32 %236, %146
  %238 = shl i32 %237, 1
  %239 = add i32 %172, %37
  %240 = sub i32 %239, %81
  %241 = sub i32 %240, %210
  %242 = mul i32 %241, 3
  %243 = sub i32 %177, %15
  %244 = sub i32 %243, %185
  %245 = add i32 %244, %100
  %246 = mul i32 %245, 5
  %247 = add i32 %134, %41
  %248 = shl i32 %247, 2
  %249 = add i32 %19, %0
  %250 = add i32 %249, %1
  %251 = add i32 %250, %16
  %252 = add i32 %251, %54
  %253 = sub i32 %252, %28
  %254 = add i32 %253, %2
  %255 = add i32 %254, %115
  %256 = add i32 %255, %35
  %257 = add i32 %256, %130
  %258 = add i32 %257, %12
  %259 = sub i32 %258, %17
  %260 = add i32 %259, %29
  %261 = sub i32 %260, %39
  %262 = add i32 %261, %49
  %263 = sub i32 %262, %69
  %264 = sub i32 %263, %71
  %265 = sub i32 %264, %87
  %266 = sub i32 %265, %93
  %267 = sub i32 %266, %94
  %268 = sub i32 %267, %114
  %269 = add i32 %268, %118
  %270 = add i32 %269, %122
  %271 = add i32 %270, %153
  %272 = add i32 %271, %154
  %273 = add i32 %272, %155
  %274 = add i32 %273, %171
  %275 = add i32 %274, %40
  %276 = add i32 %275, %182
  %277 = add i32 %276, %183
  %278 = sub i32 %277, %52
  %279 = add i32 %278, %202
  %280 = sub i32 %279, %203
  %281 = add i32 %280, %10
  %282 = sub i32 %281, %27
  %283 = add i32 %282, %31
  %284 = add i32 %283, %34
  %285 = add i32 %284, %36
  %286 = add i32 %285, %38
  %287 = add i32 %286, %44
  %288 = sub i32 %287, %48
  %289 = add i32 %288, %51
  %290 = add i32 %289, %53
  %291 = add i32 %290, %57
  %292 = add i32 %291, %58
  %293 = sub i32 %292, %59
  %294 = add i32 %293, %68
  %295 = add i32 %294, %70
  %296 = sub i32 %295, %72
  %297 = add i32 %296, %80
  %298 = add i32 %297, %83
  %299 = sub i32 %298, %84
  %300 = add i32 %299, %88
  %301 = sub i32 %300, %89
  %302 = sub i32 %301, %90
  %303 = add i32 %302, %95
  %304 = add i32 %303, %99
  %305 = sub i32 %304, %101
  %306 = add i32 %305, %102
  %307 = add i32 %306, %105
  %308 = add i32 %307, %106
  %309 = add i32 %308, %113
  %310 = sub i32 %309, %116
  %311 = add i32 %310, %119
  %312 = add i32 %311, %121
  %313 = sub i32 %312, %123
  %314 = add i32 %313, %124
  %315 = add i32 %314, %125
  %316 = sub i32 %315, %126
  %317 = add i32 %316, %127
  %318 = sub i32 %317, %131
  %319 = sub i32 %318, %137
  %320 = sub i32 %319, %138
  %321 = add i32 %320, %143
  %322 = sub i32 %321, %148
  %323 = sub i32 %322, %149
  %324 = add i32 %323, %150
  %325 = add i32 %324, %46
  %326 = sub i32 %325, %156
  %327 = add i32 %326, %159
  %328 = add i32 %327, %160
  %329 = add i32 %328, %162
  %330 = sub i32 %329, %163
  %331 = add i32 %330, %165
  %332 = sub i32 %331, %166
  %333 = sub i32 %332, %167
  %334 = sub i32 %333, %168
  %335 = add i32 %334, %173
  %336 = add i32 %335, %175
  %337 = add i32 %336, %180
  %338 = add i32 %337, %187
  %339 = add i32 %338, %188
  %340 = add i32 %339, %189
  %341 = add i32 %340, %192
  %342 = sub i32 %341, %194
  %343 = sub i32 %342, %199
  %344 = sub i32 %343, %200
  %345 = sub i32 %344, %201
  %346 = sub i32 %345, %204
  %347 = add i32 %346, %205
  %348 = sub i32 %347, %206
  %349 = add i32 %348, %207
  %350 = add i32 %349, %24
  %351 = add i32 %350, %47
  %352 = sub i32 %351, %56
  %353 = sub i32 %352, %63
  %354 = add i32 %353, %65
  %355 = sub i32 %354, %77
  %356 = sub i32 %355, %79
  %357 = sub i32 %356, %92
  %358 = sub i32 %357, %104
  %359 = sub i32 %358, %108
  %360 = add i32 %359, %110
  %361 = add i32 %360, %117
  %362 = sub i32 %361, %133
  %363 = add i32 %362, %136
  %364 = add i32 %363, %140
  %365 = sub i32 %364, %142
  %366 = sub i32 %365, %151
  %367 = add i32 %366, %152
  %368 = sub i32 %367, %158
  %369 = sub i32 %368, %170
  %370 = add i32 %369, %176
  %371 = sub i32 %370, %179
  %372 = sub i32 %371, %184
  %373 = sub i32 %372, %191
  %374 = sub i32 %373, %197
  %375 = add i32 %374, %209
  %376 = add i32 %375, %212
  %377 = add i32 %376, %214
  %378 = add i32 %377, %215
  %379 = add i32 %378, %217
  %380 = add i32 %379, %218
  %381 = sub i32 %380, %112
  %382 = add i32 %381, %248
  %383 = add i32 %382, %242
  %384 = add i32 %383, %246
  %385 = add i32 %384, %238
  %386 = icmp eq i32 %7, %385
  %387 = select i1 %386, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %388 = tail call i32 @puts(i8* nonnull dereferenceable(1) %387)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
