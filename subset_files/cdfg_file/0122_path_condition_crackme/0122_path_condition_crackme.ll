; ModuleID = '../.././c_source_file/0122_path_condition_crackme.c'
source_filename = "../.././c_source_file/0122_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = xor i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %8, %1
  %10 = shl i32 %9, 1
  %11 = add i32 %6, %10
  %12 = xor i32 %4, -1
  %13 = xor i32 %4, %3
  %14 = and i32 %12, %3
  %15 = or i32 %4, %3
  %16 = xor i32 %15, 2147483647
  %17 = and i32 %4, %3
  %18 = xor i32 %1, -1
  %19 = xor i32 %2, -1
  %20 = or i32 %19, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %18
  %23 = and i32 %18, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, %1
  %26 = and i32 %25, %24
  %27 = and i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %0
  %30 = shl i32 %29, 1
  %31 = and i32 %18, %2
  %32 = and i32 %31, %0
  %33 = xor i32 %25, %0
  %34 = or i32 %32, %33
  %35 = and i32 %27, %0
  %36 = xor i32 %0, -1
  %37 = or i32 %2, %1
  %38 = and i32 %37, %36
  %39 = xor i32 %38, -1
  %40 = xor i32 %35, %39
  %41 = or i32 %2, %0
  %42 = xor i32 %41, %1
  %43 = xor i32 %25, -1
  %44 = xor i32 %43, %0
  %45 = xor i32 %1, %0
  %46 = or i32 %45, %8
  %47 = and i32 %19, %0
  %48 = or i32 %19, %1
  %49 = xor i32 %47, %48
  %50 = xor i32 %41, -1
  %51 = or i32 %45, %50
  %52 = or i32 %18, %2
  %53 = xor i32 %52, %0
  %54 = xor i32 %32, -1
  %55 = xor i32 %53, %54
  %56 = and i32 %1, %0
  %57 = or i32 %56, %43
  %58 = or i32 %18, %0
  %59 = xor i32 %58, %2
  %60 = xor i32 %45, -1
  %61 = and i32 %19, %60
  %62 = xor i32 %47, %1
  %63 = or i32 %45, %21
  %64 = and i32 %19, %1
  %65 = xor i32 %64, -1
  %66 = xor i32 %65, %0
  %67 = or i32 %8, %60
  %68 = and i32 %2, %0
  %69 = xor i32 %68, -1
  %70 = and i32 %45, %69
  %71 = and i32 %37, %0
  %72 = xor i32 %56, -1
  %73 = and i32 %43, %72
  %74 = and i32 %28, %0
  %75 = or i32 %45, %2
  %76 = shl i32 %75, 1
  %77 = or i32 %27, %0
  %78 = and i32 %27, %36
  %79 = and i32 %25, %0
  %80 = xor i32 %79, 2147483647
  %81 = xor i32 %80, %78
  %82 = xor i32 %68, %65
  %83 = and i32 %7, %58
  %84 = or i32 %48, %36
  %85 = or i32 %23, %8
  %86 = or i32 %64, %0
  %87 = xor i32 %35, %33
  %88 = or i32 %23, %2
  %89 = or i32 %7, %56
  %90 = and i32 %8, %1
  %91 = or i32 %43, %36
  %92 = xor i32 %68, %37
  %93 = add i32 %56, 1
  %94 = or i32 %50, %1
  %95 = and i32 %31, %36
  %96 = or i32 %25, %36
  %97 = xor i32 %96, -1
  %98 = or i32 %95, %97
  %99 = and i32 %60, %2
  %100 = xor i32 %41, %56
  %101 = or i32 %48, %0
  %102 = and i32 %58, %43
  %103 = or i32 %25, %0
  %104 = xor i32 %32, %103
  %105 = and i32 %7, %24
  %106 = xor i32 %95, %96
  %107 = or i32 %23, %19
  %108 = or i32 %78, %79
  %109 = and i32 %72, %2
  %110 = and i32 %52, %36
  %111 = or i32 %32, %110
  %112 = and i32 %19, %72
  %113 = xor i32 %56, %2
  %114 = or i32 %56, %21
  %115 = and i32 %19, %24
  %116 = and i32 %48, %0
  %117 = or i32 %47, %45
  %118 = or i32 %32, %53
  %119 = or i32 %19, %60
  %120 = and i32 %43, %24
  %121 = xor i32 %71, -1
  %122 = xor i32 %78, %121
  %123 = and i32 %25, %36
  %124 = or i32 %21, %1
  %125 = or i32 %64, %23
  %126 = and i32 %20, %60
  %127 = and i32 %69, %60
  %128 = shl i32 %127, 1
  %129 = add i32 %25, 1
  %130 = and i32 %7, %60
  %131 = xor i32 %37, -1
  %132 = or i32 %56, %131
  %133 = or i32 %27, %23
  %134 = xor i32 %48, -1
  %135 = or i32 %134, %36
  %136 = or i32 %50, %18
  %137 = xor i32 %58, -1
  %138 = or i32 %43, %137
  %139 = xor i32 %103, -1
  %140 = or i32 %32, %139
  %141 = or i32 %7, %45
  %142 = or i32 %1, %0
  %143 = xor i32 %68, %142
  %144 = or i32 %37, %0
  %145 = shl i32 %28, 2
  %146 = xor i32 %134, %0
  %147 = and i32 %7, %18
  %148 = xor i32 %142, -1
  %149 = or i32 %8, %148
  %150 = and i32 %52, %0
  %151 = or i32 %95, %150
  %152 = and i32 %20, %1
  %153 = or i32 %65, %36
  %154 = or i32 %35, %38
  %155 = or i32 %7, %60
  %156 = or i32 %64, %36
  %157 = and i32 %142, %19
  %158 = and i32 %45, %19
  %159 = xor i32 %47, -1
  %160 = and i32 %159, %18
  %161 = shl i32 %8, 1
  %162 = xor i32 %20, %56
  %163 = and i32 %20, %18
  %164 = or i32 %25, %56
  %165 = shl i32 %164, 1
  %166 = xor i32 %68, %58
  %167 = and i32 %43, %36
  %168 = shl i32 %167, 1
  %169 = or i32 %50, %60
  %170 = xor i32 %69, %1
  %171 = or i32 %27, %36
  %172 = xor i32 %150, -1
  %173 = xor i32 %95, %172
  %174 = or i32 %78, %71
  %175 = shl i32 %174, 1
  %176 = and i32 %7, %45
  %177 = xor i32 %148, %2
  %178 = or i32 %43, %0
  %179 = xor i32 %20, %1
  %180 = or i32 %137, %2
  %181 = shl i32 %180, 1
  %182 = add i32 %23, 1
  %183 = xor i32 %64, %0
  %184 = and i32 %25, %142
  %185 = and i32 %25, %72
  %186 = shl i32 %185, 1
  %187 = or i32 %56, %134
  %188 = and i32 %65, %36
  %189 = shl i32 %188, 1
  %190 = and i32 %20, %45
  %191 = add i32 %142, 1
  %192 = or i32 %68, %131
  %193 = and i32 %159, %1
  %194 = or i32 %47, %18
  %195 = xor i32 %37, %0
  %196 = and i32 %48, %36
  %197 = or i32 %28, %0
  %198 = shl i32 %65, 1
  %199 = xor i32 %33, %54
  %200 = xor i32 %159, %1
  %201 = shl i32 %60, 1
  %202 = xor i32 %23, %2
  %203 = xor i32 %21, %1
  %204 = add i32 %37, 1
  %205 = or i32 %65, %0
  %206 = and i32 %7, %142
  %207 = and i32 %58, %19
  %208 = or i32 %134, %0
  %209 = or i32 %45, %19
  %210 = or i32 %35, %123
  %211 = or i32 %56, %8
  %212 = and i32 %41, %45
  %213 = or i32 %148, %2
  %214 = and i32 %131, %36
  %215 = mul i32 %214, 10
  %216 = and i32 %64, %36
  %217 = mul i32 %216, -7
  %218 = and i32 %131, %0
  %219 = shl i32 %218, 3
  %220 = and i32 %64, %0
  %221 = and i32 %134, %36
  %222 = mul i32 %221, 17
  %223 = mul i32 %78, 18
  %224 = and i32 %134, %0
  %225 = mul i32 %35, -6
  %226 = add i32 %23, %1
  %227 = add i32 %226, %61
  %228 = add i32 %227, %212
  %229 = add i32 %228, %103
  %230 = add i32 %229, %195
  %231 = add i32 %230, %178
  %232 = add i32 %231, %170
  %233 = add i32 %232, %156
  %234 = add i32 %233, %141
  %235 = add i32 %234, %117
  %236 = add i32 %235, %101
  %237 = add i32 %236, %94
  %238 = add i32 %237, %86
  %239 = add i32 %238, %85
  %240 = add i32 %239, %22
  %241 = add i32 %240, %14
  %242 = sub i32 %56, %202
  %243 = sub i32 %242, %220
  %244 = add i32 %243, %55
  %245 = mul i32 %244, 5
  %246 = sub i32 %58, %224
  %247 = add i32 %246, %17
  %248 = sub i32 %247, %173
  %249 = mul i32 %248, 3
  %250 = add i32 %151, %190
  %251 = shl i32 %250, 2
  %252 = add i32 %241, %16
  %253 = add i32 %252, %81
  %254 = shl i32 %253, 1
  %255 = sub i32 3, %0
  %256 = add i32 %255, %36
  %257 = add i32 %256, %93
  %258 = sub i32 %257, %45
  %259 = add i32 %258, %137
  %260 = add i32 %259, %182
  %261 = add i32 %260, %191
  %262 = add i32 %261, %142
  %263 = sub i32 %262, %3
  %264 = sub i32 %263, %59
  %265 = add i32 %264, %88
  %266 = sub i32 %265, %99
  %267 = sub i32 %266, %37
  %268 = sub i32 %267, %107
  %269 = sub i32 %268, %109
  %270 = add i32 %269, %112
  %271 = sub i32 %270, %113
  %272 = sub i32 %271, %7
  %273 = add i32 %272, %115
  %274 = add i32 %273, %119
  %275 = add i32 %274, %68
  %276 = add i32 %275, %129
  %277 = sub i32 %276, %27
  %278 = sub i32 %277, %25
  %279 = sub i32 %278, %157
  %280 = sub i32 %279, %158
  %281 = add i32 %280, %50
  %282 = sub i32 %281, %177
  %283 = sub i32 %282, %64
  %284 = sub i32 %283, %201
  %285 = add i32 %284, %204
  %286 = sub i32 %285, %207
  %287 = sub i32 %286, %209
  %288 = sub i32 %287, %213
  %289 = add i32 %288, %4
  %290 = sub i32 %289, %26
  %291 = sub i32 %290, %42
  %292 = sub i32 %291, %44
  %293 = sub i32 %292, %46
  %294 = add i32 %293, %49
  %295 = sub i32 %294, %51
  %296 = add i32 %295, %57
  %297 = sub i32 %296, %62
  %298 = add i32 %297, %63
  %299 = add i32 %298, %66
  %300 = add i32 %299, %67
  %301 = add i32 %300, %70
  %302 = add i32 %301, %71
  %303 = sub i32 %302, %73
  %304 = add i32 %303, %74
  %305 = sub i32 %304, %76
  %306 = sub i32 %305, %77
  %307 = sub i32 %306, %82
  %308 = sub i32 %307, %83
  %309 = sub i32 %308, %84
  %310 = sub i32 %309, %89
  %311 = add i32 %310, %90
  %312 = add i32 %311, %91
  %313 = add i32 %312, %92
  %314 = add i32 %313, %100
  %315 = sub i32 %314, %102
  %316 = sub i32 %315, %105
  %317 = sub i32 %316, %114
  %318 = add i32 %317, %116
  %319 = sub i32 %318, %120
  %320 = add i32 %319, %123
  %321 = add i32 %320, %124
  %322 = add i32 %321, %125
  %323 = add i32 %322, %126
  %324 = add i32 %323, %38
  %325 = add i32 %324, %130
  %326 = add i32 %325, %132
  %327 = add i32 %326, %133
  %328 = add i32 %327, %135
  %329 = sub i32 %328, %136
  %330 = sub i32 %329, %138
  %331 = sub i32 %330, %143
  %332 = sub i32 %331, %144
  %333 = sub i32 %332, %145
  %334 = add i32 %333, %146
  %335 = add i32 %334, %147
  %336 = add i32 %335, %149
  %337 = add i32 %336, %152
  %338 = sub i32 %337, %153
  %339 = sub i32 %338, %155
  %340 = sub i32 %339, %160
  %341 = sub i32 %340, %161
  %342 = sub i32 %341, %162
  %343 = add i32 %342, %163
  %344 = add i32 %343, %166
  %345 = add i32 %344, %169
  %346 = add i32 %345, %171
  %347 = sub i32 %346, %176
  %348 = add i32 %347, %179
  %349 = sub i32 %348, %181
  %350 = sub i32 %349, %183
  %351 = add i32 %350, %184
  %352 = add i32 %351, %187
  %353 = sub i32 %352, %192
  %354 = sub i32 %353, %193
  %355 = sub i32 %354, %194
  %356 = add i32 %355, %196
  %357 = add i32 %356, %197
  %358 = sub i32 %357, %198
  %359 = sub i32 %358, %200
  %360 = sub i32 %359, %203
  %361 = sub i32 %360, %205
  %362 = sub i32 %361, %206
  %363 = add i32 %362, %208
  %364 = add i32 %363, %211
  %365 = add i32 %364, %13
  %366 = add i32 %365, %14
  %367 = sub i32 %366, %30
  %368 = sub i32 %367, %34
  %369 = sub i32 %368, %40
  %370 = sub i32 %369, %87
  %371 = sub i32 %370, %98
  %372 = sub i32 %371, %104
  %373 = add i32 %372, %106
  %374 = sub i32 %373, %108
  %375 = sub i32 %374, %111
  %376 = add i32 %375, %118
  %377 = sub i32 %376, %122
  %378 = sub i32 %377, %128
  %379 = add i32 %378, %140
  %380 = sub i32 %379, %154
  %381 = sub i32 %380, %165
  %382 = sub i32 %381, %168
  %383 = sub i32 %382, %186
  %384 = sub i32 %383, %189
  %385 = sub i32 %384, %199
  %386 = sub i32 %385, %210
  %387 = add i32 %386, %215
  %388 = add i32 %387, %217
  %389 = sub i32 %388, %219
  %390 = add i32 %389, %222
  %391 = add i32 %390, %223
  %392 = add i32 %391, %225
  %393 = sub i32 %392, %175
  %394 = add i32 %393, %251
  %395 = add i32 %394, %245
  %396 = add i32 %395, %249
  %397 = add i32 %396, %254
  %398 = icmp eq i32 %11, %397
  %399 = select i1 %398, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %400 = tail call i32 @puts(i8* nonnull dereferenceable(1) %399)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
