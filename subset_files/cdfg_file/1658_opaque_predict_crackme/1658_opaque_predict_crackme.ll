; ModuleID = '../.././c_source_file/1658_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1658_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = and i32 %2, %1
  %6 = and i32 %5, %4
  %7 = or i32 %2, %1
  %8 = and i32 %7, %0
  %9 = or i32 %6, %8
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %1
  %12 = shl i32 %11, 1
  %13 = sub i32 %12, %9
  %14 = xor i32 %2, %1
  %15 = xor i32 %14, %0
  %16 = or i32 %1, %0
  %17 = and i32 %16, %2
  %18 = and i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = and i32 %10, %19
  %21 = xor i32 %14, -1
  %22 = and i32 %16, %21
  %23 = xor i32 %11, -1
  %24 = or i32 %18, %23
  %25 = xor i32 %1, %0
  %26 = or i32 %25, %2
  %27 = or i32 %10, %0
  %28 = xor i32 %25, -1
  %29 = and i32 %27, %28
  %30 = and i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %28
  %33 = xor i32 %1, -1
  %34 = and i32 %33, %2
  %35 = and i32 %34, %0
  %36 = or i32 %33, %2
  %37 = and i32 %36, %4
  %38 = or i32 %35, %37
  %39 = or i32 %2, %0
  %40 = and i32 %39, %28
  %41 = xor i32 %5, -1
  %42 = and i32 %41, %4
  %43 = xor i32 %36, %0
  %44 = or i32 %35, %43
  %45 = and i32 %10, %1
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %0
  %48 = shl i32 %47, 1
  %49 = xor i32 %23, %0
  %50 = xor i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %51, %33
  %53 = and i32 %25, %2
  %54 = or i32 %51, %28
  %55 = and i32 %10, %0
  %56 = or i32 %55, %28
  %57 = or i32 %18, %21
  %58 = shl i32 %57, 1
  %59 = and i32 %14, %16
  %60 = or i32 %55, %1
  %61 = xor i32 %30, %1
  %62 = and i32 %50, %33
  %63 = or i32 %14, %0
  %64 = and i32 %5, %0
  %65 = and i32 %14, %4
  %66 = or i32 %64, %65
  %67 = and i32 %51, %28
  %68 = and i32 %10, %28
  %69 = and i32 %25, %51
  %70 = and i32 %51, %33
  %71 = or i32 %21, %0
  %72 = or i32 %50, %25
  %73 = shl i32 %72, 1
  %74 = xor i32 %45, %0
  %75 = shl i32 %74, 1
  %76 = and i32 %33, %0
  %77 = xor i32 %76, -1
  %78 = and i32 %50, %77
  %79 = or i32 %55, %25
  %80 = xor i32 %27, %1
  %81 = shl i32 %80, 1
  %82 = xor i32 %19, %2
  %83 = and i32 %39, %33
  %84 = and i32 %27, %1
  %85 = or i32 %7, %4
  %86 = or i32 %18, %2
  %87 = shl i32 %86, 1
  %88 = add i32 %30, 1
  %89 = or i32 %50, %33
  %90 = xor i32 %30, %16
  %91 = or i32 %25, %10
  %92 = xor i32 %76, %41
  %93 = xor i32 %16, -1
  %94 = xor i32 %93, %2
  %95 = or i32 %76, %2
  %96 = xor i32 %7, -1
  %97 = or i32 %30, %96
  %98 = and i32 %7, %4
  %99 = or i32 %64, %98
  %100 = or i32 %33, %0
  %101 = and i32 %100, %51
  %102 = and i32 %31, %33
  %103 = xor i32 %55, -1
  %104 = and i32 %103, %1
  %105 = or i32 %50, %1
  %106 = or i32 %5, %76
  %107 = and i32 %34, %4
  %108 = or i32 %14, %4
  %109 = xor i32 %107, %108
  %110 = or i32 %30, %28
  %111 = xor i32 %103, %1
  %112 = xor i32 %64, -1
  %113 = xor i32 %98, %112
  %114 = and i32 %50, %16
  %115 = shl i32 %114, 1
  %116 = or i32 %93, %2
  %117 = and i32 %36, %0
  %118 = or i32 %107, %117
  %119 = shl i32 %118, 1
  %120 = add i32 %16, 1
  %121 = or i32 %50, %18
  %122 = and i32 %50, %19
  %123 = and i32 %51, %19
  %124 = or i32 %25, %51
  %125 = xor i32 %46, %0
  %126 = shl i32 %125, 2
  %127 = and i32 %25, %103
  %128 = add i32 %7, 1
  %129 = and i32 %51, %1
  %130 = xor i32 %100, -1
  %131 = or i32 %30, %130
  %132 = xor i32 %16, %2
  %133 = xor i32 %39, %18
  %134 = xor i32 %30, %46
  %135 = xor i32 %117, -1
  %136 = xor i32 %107, %135
  %137 = xor i32 %39, -1
  %138 = xor i32 %137, %1
  %139 = and i32 %39, %25
  %140 = xor i32 %31, %1
  %141 = xor i32 %43, 2147483647
  %142 = xor i32 %141, %35
  %143 = and i32 %19, %2
  %144 = xor i32 %100, %2
  %145 = xor i32 %108, -1
  %146 = or i32 %107, %145
  %147 = or i32 %50, %93
  %148 = or i32 %45, %76
  %149 = and i32 %50, %28
  %150 = shl i32 %149, 1
  %151 = xor i32 %11, %18
  %152 = and i32 %50, %25
  %153 = or i32 %130, %2
  %154 = xor i32 %64, %15
  %155 = or i32 %21, %4
  %156 = shl i32 %155, 1
  %157 = and i32 %21, %0
  %158 = or i32 %11, %4
  %159 = xor i32 %7, %0
  %160 = or i32 %64, %159
  %161 = and i32 %27, %33
  %162 = shl i32 %161, 1
  %163 = xor i32 %27, -1
  %164 = or i32 %25, %163
  %165 = or i32 %23, %4
  %166 = and i32 %100, %10
  %167 = xor i32 %35, -1
  %168 = xor i32 %15, %167
  %169 = or i32 %25, %137
  %170 = and i32 %51, %77
  %171 = xor i32 %18, %2
  %172 = or i32 %55, %23
  %173 = and i32 %21, %19
  %174 = shl i32 %173, 1
  %175 = xor i32 %55, %1
  %176 = xor i32 %7, %18
  %177 = xor i32 %76, %46
  %178 = xor i32 %163, %1
  %179 = shl i32 %178, 2
  %180 = or i32 %5, %4
  %181 = xor i32 %77, %2
  %182 = or i32 %10, %93
  %183 = or i32 %14, %130
  %184 = xor i32 %37, %167
  %185 = or i32 %96, %4
  %186 = xor i32 %65, %112
  %187 = xor i32 %35, %63
  %188 = xor i32 %55, %41
  %189 = add i32 %11, 1
  %190 = or i32 %28, %2
  %191 = and i32 %77, %2
  %192 = xor i32 %159, %112
  %193 = or i32 %51, %1
  %194 = and i32 %100, %2
  %195 = or i32 %21, %93
  %196 = or i32 %45, %4
  %197 = and i32 %28, %2
  %198 = or i32 %35, %15
  %199 = or i32 %163, %1
  %200 = or i32 %5, %0
  %201 = or i32 %137, %28
  %202 = and i32 %14, %0
  %203 = xor i32 %63, 2147483647
  %204 = or i32 %203, %35
  %205 = add i32 %50, 1
  %206 = xor i32 %41, %0
  %207 = and i32 %10, %77
  %208 = xor i32 %5, %0
  %209 = or i32 %30, %1
  %210 = and i32 %25, %31
  %211 = or i32 %41, %0
  %212 = and i32 %103, %33
  %213 = or i32 %45, %0
  %214 = and i32 %16, %51
  %215 = or i32 %76, %10
  %216 = or i32 %55, %5
  %217 = or i32 %18, %10
  %218 = and i32 %21, %4
  %219 = shl i32 %218, 1
  %220 = and i32 %50, %100
  %221 = or i32 %51, %130
  %222 = shl i32 %221, 1
  %223 = and i32 %103, %28
  %224 = or i32 %14, %93
  %225 = xor i32 %21, %0
  %226 = and i32 %50, %1
  %227 = or i32 %96, %0
  %228 = or i32 %163, %28
  %229 = or i32 %30, %25
  %230 = or i32 %18, %163
  %231 = and i32 %14, %77
  %232 = add i32 %27, 1
  %233 = xor i32 %6, -1
  %234 = xor i32 %8, %233
  %235 = or i32 %50, %76
  %236 = and i32 %11, %4
  %237 = and i32 %31, %1
  %238 = or i32 %18, %51
  %239 = xor i32 %202, %233
  %240 = add i32 %76, 1
  %241 = xor i32 %39, %1
  %242 = shl i32 %241, 2
  %243 = or i32 %30, %33
  %244 = and i32 %96, %4
  %245 = mul i32 %244, -29
  %246 = and i32 %45, %4
  %247 = and i32 %96, %0
  %248 = shl i32 %247, 3
  %249 = and i32 %45, %0
  %250 = shl i32 %249, 1
  %251 = and i32 %23, %4
  %252 = mul i32 %6, 25
  %253 = and i32 %23, %0
  %254 = mul i32 %253, 12
  %255 = add i32 %10, %1
  %256 = add i32 %255, %217
  %257 = add i32 %256, %207
  %258 = add i32 %257, %190
  %259 = add i32 %258, %182
  %260 = add i32 %259, %116
  %261 = add i32 %260, %82
  %262 = add i32 %261, %237
  %263 = add i32 %262, %213
  %264 = add i32 %263, %185
  %265 = add i32 %264, %170
  %266 = add i32 %265, %151
  %267 = add i32 %266, %110
  %268 = add i32 %267, %38
  %269 = add i32 %268, %142
  %270 = add i32 %269, %204
  %271 = shl i32 %270, 1
  %272 = sub i32 %197, %5
  %273 = sub i32 %272, %246
  %274 = sub i32 %273, %175
  %275 = add i32 %274, %138
  %276 = sub i32 %275, %129
  %277 = sub i32 %276, %59
  %278 = sub i32 %277, %198
  %279 = mul i32 %278, 3
  %280 = add i32 %251, %227
  %281 = add i32 %280, %212
  %282 = add i32 %281, %199
  %283 = add i32 %282, %101
  %284 = shl i32 %283, 2
  %285 = sub i32 %28, %53
  %286 = add i32 %285, %20
  %287 = sub i32 %286, %64
  %288 = mul i32 %287, 5
  %289 = add i32 %120, %25
  %290 = add i32 %289, %18
  %291 = add i32 %290, %240
  %292 = sub i32 %291, %17
  %293 = add i32 %292, %26
  %294 = sub i32 %293, %68
  %295 = add i32 %294, %88
  %296 = sub i32 %295, %91
  %297 = sub i32 %296, %94
  %298 = sub i32 %297, %95
  %299 = add i32 %298, %128
  %300 = add i32 %299, %21
  %301 = add i32 %300, %132
  %302 = add i32 %301, %143
  %303 = sub i32 %302, %144
  %304 = sub i32 %303, %27
  %305 = sub i32 %304, %153
  %306 = add i32 %305, %166
  %307 = sub i32 %306, %171
  %308 = add i32 %307, %41
  %309 = sub i32 %308, %50
  %310 = add i32 %309, %181
  %311 = add i32 %310, %7
  %312 = sub i32 %311, %55
  %313 = add i32 %312, %189
  %314 = sub i32 %313, %191
  %315 = sub i32 %314, %194
  %316 = add i32 %315, %205
  %317 = add i32 %316, %215
  %318 = sub i32 %317, %45
  %319 = add i32 %318, %232
  %320 = sub i32 %319, %15
  %321 = add i32 %320, %22
  %322 = add i32 %321, %24
  %323 = add i32 %322, %29
  %324 = add i32 %323, %32
  %325 = add i32 %324, %40
  %326 = add i32 %325, %42
  %327 = add i32 %326, %49
  %328 = add i32 %327, %52
  %329 = sub i32 %328, %54
  %330 = add i32 %329, %56
  %331 = sub i32 %330, %60
  %332 = add i32 %331, %61
  %333 = add i32 %332, %62
  %334 = add i32 %333, %63
  %335 = add i32 %334, %67
  %336 = add i32 %335, %69
  %337 = sub i32 %336, %70
  %338 = sub i32 %337, %71
  %339 = sub i32 %338, %78
  %340 = sub i32 %339, %79
  %341 = add i32 %340, %83
  %342 = sub i32 %341, %84
  %343 = add i32 %342, %85
  %344 = sub i32 %343, %87
  %345 = add i32 %344, %89
  %346 = add i32 %345, %90
  %347 = add i32 %346, %92
  %348 = sub i32 %347, %97
  %349 = add i32 %348, %102
  %350 = sub i32 %349, %104
  %351 = sub i32 %350, %105
  %352 = sub i32 %351, %106
  %353 = add i32 %352, %111
  %354 = sub i32 %353, %121
  %355 = add i32 %354, %122
  %356 = sub i32 %355, %123
  %357 = add i32 %356, %124
  %358 = add i32 %357, %127
  %359 = add i32 %358, %131
  %360 = sub i32 %359, %133
  %361 = sub i32 %360, %134
  %362 = add i32 %361, %139
  %363 = add i32 %362, %140
  %364 = add i32 %363, %108
  %365 = add i32 %364, %147
  %366 = sub i32 %365, %148
  %367 = sub i32 %366, %152
  %368 = sub i32 %367, %157
  %369 = add i32 %368, %158
  %370 = add i32 %369, %164
  %371 = sub i32 %370, %165
  %372 = add i32 %371, %169
  %373 = add i32 %372, %172
  %374 = sub i32 %373, %176
  %375 = sub i32 %374, %177
  %376 = sub i32 %375, %180
  %377 = sub i32 %376, %183
  %378 = sub i32 %377, %188
  %379 = add i32 %378, %193
  %380 = add i32 %379, %195
  %381 = add i32 %380, %159
  %382 = sub i32 %381, %196
  %383 = add i32 %382, %200
  %384 = add i32 %383, %201
  %385 = sub i32 %384, %202
  %386 = add i32 %385, %206
  %387 = sub i32 %386, %8
  %388 = sub i32 %387, %208
  %389 = add i32 %388, %209
  %390 = sub i32 %389, %210
  %391 = sub i32 %390, %211
  %392 = sub i32 %391, %98
  %393 = add i32 %392, %214
  %394 = sub i32 %393, %216
  %395 = sub i32 %394, %220
  %396 = add i32 %395, %223
  %397 = sub i32 %396, %224
  %398 = add i32 %397, %225
  %399 = add i32 %398, %226
  %400 = sub i32 %399, %228
  %401 = add i32 %400, %229
  %402 = sub i32 %401, %230
  %403 = sub i32 %402, %231
  %404 = sub i32 %403, %235
  %405 = add i32 %404, %236
  %406 = sub i32 %405, %238
  %407 = sub i32 %406, %243
  %408 = sub i32 %407, %44
  %409 = sub i32 %408, %48
  %410 = sub i32 %409, %58
  %411 = sub i32 %410, %66
  %412 = sub i32 %411, %73
  %413 = sub i32 %412, %75
  %414 = sub i32 %413, %81
  %415 = sub i32 %414, %99
  %416 = sub i32 %415, %109
  %417 = sub i32 %416, %113
  %418 = sub i32 %417, %115
  %419 = sub i32 %418, %126
  %420 = add i32 %419, %136
  %421 = sub i32 %420, %146
  %422 = sub i32 %421, %150
  %423 = sub i32 %422, %154
  %424 = sub i32 %423, %156
  %425 = sub i32 %424, %160
  %426 = sub i32 %425, %162
  %427 = sub i32 %426, %168
  %428 = sub i32 %427, %174
  %429 = sub i32 %428, %179
  %430 = sub i32 %429, %184
  %431 = sub i32 %430, %186
  %432 = add i32 %431, %187
  %433 = sub i32 %432, %192
  %434 = sub i32 %433, %219
  %435 = sub i32 %434, %222
  %436 = add i32 %435, %234
  %437 = add i32 %436, %239
  %438 = sub i32 %437, %242
  %439 = add i32 %438, %245
  %440 = add i32 %439, %248
  %441 = sub i32 %440, %250
  %442 = add i32 %441, %252
  %443 = add i32 %442, %254
  %444 = sub i32 %443, %119
  %445 = add i32 %444, %288
  %446 = add i32 %445, %284
  %447 = add i32 %446, %279
  %448 = add i32 %447, %271
  %449 = icmp eq i32 %13, %448
  %450 = select i1 %449, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %451 = tail call i32 @puts(i8* nonnull dereferenceable(1) %450)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
