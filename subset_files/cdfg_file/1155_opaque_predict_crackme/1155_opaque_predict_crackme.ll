; ModuleID = '../.././c_source_file/1155_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1155_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = mul i32 %9, -3
  %11 = xor i32 %0, -1
  %12 = xor i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %11
  %15 = add i32 %14, %10
  %16 = and i32 %4, %3
  %17 = xor i32 %5, -1
  %18 = or i32 %17, %4
  %19 = xor i32 %18, %16
  %20 = add i32 %15, %19
  %21 = or i32 %7, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %22, %2
  %24 = shl i32 %23, 1
  %25 = xor i32 %2, -1
  %26 = and i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %1, %0
  %29 = and i32 %28, %27
  %30 = or i32 %22, %2
  %31 = or i32 %12, %8
  %32 = and i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %28, -1
  %35 = and i32 %33, %34
  %36 = and i32 %25, %1
  %37 = xor i32 %36, -1
  %38 = xor i32 %37, %0
  %39 = xor i32 %13, %0
  %40 = and i32 %2, %1
  %41 = and i32 %40, %0
  %42 = xor i32 %12, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %41, %43
  %45 = or i32 %25, %0
  %46 = and i32 %45, %7
  %47 = xor i32 %8, %2
  %48 = xor i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %8, %49
  %51 = xor i32 %36, %0
  %52 = or i32 %1, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %32, %53
  %55 = or i32 %37, %11
  %56 = and i32 %7, %2
  %57 = and i32 %56, %0
  %58 = or i32 %7, %2
  %59 = xor i32 %58, %11
  %60 = xor i32 %59, %57
  %61 = and i32 %27, %1
  %62 = and i32 %58, %11
  %63 = or i32 %57, %62
  %64 = or i32 %2, %1
  %65 = and i32 %37, %0
  %66 = xor i32 %45, -1
  %67 = or i32 %66, %34
  %68 = shl i32 %67, 1
  %69 = or i32 %25, %53
  %70 = and i32 %12, %52
  %71 = shl i32 %42, 1
  %72 = or i32 %53, %2
  %73 = xor i32 %26, %1
  %74 = and i32 %12, %9
  %75 = and i32 %48, %34
  %76 = xor i32 %40, -1
  %77 = or i32 %76, %0
  %78 = and i32 %1, %0
  %79 = xor i32 %64, %78
  %80 = and i32 %12, %11
  %81 = and i32 %56, %11
  %82 = and i32 %58, %0
  %83 = or i32 %81, %82
  %84 = and i32 %33, %1
  %85 = or i32 %12, %0
  %86 = xor i32 %57, %85
  %87 = add i32 %40, 1
  %88 = or i32 %12, %53
  %89 = and i32 %40, %11
  %90 = and i32 %12, %0
  %91 = xor i32 %90, 2147483647
  %92 = xor i32 %91, %89
  %93 = shl i32 %92, 1
  %94 = and i32 %52, %13
  %95 = or i32 %32, %1
  %96 = and i32 %25, %9
  %97 = or i32 %12, %11
  %98 = and i32 %49, %1
  %99 = and i32 %33, %7
  %100 = add i32 %48, 1
  %101 = or i32 %32, %7
  %102 = or i32 %2, %0
  %103 = and i32 %102, %34
  %104 = xor i32 %33, %1
  %105 = and i32 %49, %7
  %106 = xor i32 %57, -1
  %107 = xor i32 %62, %106
  %108 = or i32 %28, %49
  %109 = shl i32 %108, 1
  %110 = xor i32 %41, %42
  %111 = or i32 %48, %28
  %112 = or i32 %49, %22
  %113 = or i32 %48, %22
  %114 = and i32 %48, %28
  %115 = and i32 %64, %11
  %116 = or i32 %25, %1
  %117 = and i32 %116, %11
  %118 = xor i32 %8, %76
  %119 = shl i32 %118, 1
  %120 = xor i32 %9, %2
  %121 = and i32 %45, %1
  %122 = and i32 %28, %49
  %123 = xor i32 %102, -1
  %124 = or i32 %78, %123
  %125 = or i32 %48, %34
  %126 = xor i32 %32, %37
  %127 = or i32 %76, %11
  %128 = xor i32 %57, %43
  %129 = or i32 %28, %66
  %130 = xor i32 %102, %1
  %131 = and i32 %21, %2
  %132 = or i32 %66, %7
  %133 = xor i32 %64, -1
  %134 = or i32 %78, %133
  %135 = and i32 %37, %11
  %136 = and i32 %13, %0
  %137 = or i32 %28, %123
  %138 = and i32 %28, %25
  %139 = xor i32 %32, %1
  %140 = and i32 %48, %21
  %141 = and i32 %48, %52
  %142 = or i32 %133, %11
  %143 = or i32 %37, %0
  %144 = xor i32 %66, %1
  %145 = xor i32 %78, -1
  %146 = and i32 %48, %145
  %147 = or i32 %26, %40
  %148 = or i32 %78, %2
  %149 = xor i32 %78, %2
  %150 = and i32 %102, %7
  %151 = and i32 %9, %2
  %152 = or i32 %49, %34
  %153 = xor i32 %8, %37
  %154 = xor i32 %133, %0
  %155 = and i32 %12, %21
  %156 = shl i32 %155, 1
  %157 = xor i32 %82, -1
  %158 = xor i32 %81, %157
  %159 = and i32 %145, %2
  %160 = or i32 %25, %34
  %161 = or i32 %78, %13
  %162 = xor i32 %116, %78
  %163 = shl i32 %162, 1
  %164 = and i32 %64, %0
  %165 = or i32 %89, %164
  %166 = or i32 %116, %11
  %167 = and i32 %45, %34
  %168 = shl i32 %12, 1
  %169 = and i32 %49, %9
  %170 = and i32 %48, %9
  %171 = xor i32 %64, %0
  %172 = or i32 %32, %28
  %173 = xor i32 %32, %52
  %174 = xor i32 %145, %2
  %175 = or i32 %13, %11
  %176 = or i32 %78, %66
  %177 = shl i32 %53, 1
  %178 = xor i32 %116, -1
  %179 = or i32 %178, %0
  %180 = xor i32 %85, -1
  %181 = or i32 %57, %180
  %182 = or i32 %64, %11
  %183 = shl i32 %182, 1
  %184 = or i32 %26, %1
  %185 = shl i32 %184, 1
  %186 = and i32 %48, %7
  %187 = or i32 %49, %1
  %188 = or i32 %78, %49
  %189 = or i32 %26, %34
  %190 = xor i32 %81, %97
  %191 = and i32 %102, %28
  %192 = and i32 %76, %11
  %193 = and i32 %45, %28
  %194 = xor i32 %123, %1
  %195 = or i32 %89, %90
  %196 = and i32 %48, %1
  %197 = and i32 %25, %145
  %198 = xor i32 %102, %78
  %199 = or i32 %28, %2
  %200 = or i32 %78, %25
  %201 = and i32 %13, %9
  %202 = and i32 %21, %25
  %203 = and i32 %28, %33
  %204 = xor i32 %32, %21
  %205 = or i32 %41, %80
  %206 = xor i32 %32, %64
  %207 = or i32 %34, %2
  %208 = shl i32 %178, 1
  %209 = xor i32 %76, %0
  %210 = and i32 %49, %34
  %211 = and i32 %102, %1
  %212 = or i32 %66, %1
  %213 = xor i32 %41, -1
  %214 = xor i32 %115, %213
  %215 = or i32 %26, %178
  %216 = shl i32 %215, 1
  %217 = and i32 %28, %2
  %218 = or i32 %48, %1
  %219 = or i32 %36, %0
  %220 = or i32 %123, %7
  %221 = xor i32 %45, %1
  %222 = and i32 %13, %145
  %223 = or i32 %41, %171
  %224 = xor i32 %164, -1
  %225 = xor i32 %89, %224
  %226 = or i32 %40, %11
  %227 = shl i32 %226, 1
  %228 = or i32 %48, %78
  %229 = or i32 %8, %25
  %230 = xor i32 %178, %0
  %231 = add i32 %12, 1
  %232 = or i32 %13, %53
  %233 = xor i32 %26, %116
  %234 = shl i32 %233, 1
  %235 = and i32 %34, %2
  %236 = or i32 %178, %11
  %237 = xor i32 %116, %0
  %238 = shl i32 %237, 1
  %239 = xor i32 %40, %0
  %240 = or i32 %32, %34
  %241 = shl i32 %240, 1
  %242 = or i32 %32, %36
  %243 = xor i32 %242, -1
  %244 = xor i32 %52, %2
  %245 = xor i32 %97, -1
  %246 = or i32 %81, %245
  %247 = add i32 %32, 1
  %248 = and i32 %27, %7
  %249 = or i32 %32, %22
  %250 = xor i32 %21, %2
  %251 = or i32 %26, %7
  %252 = xor i32 %27, %1
  %253 = or i32 %40, %8
  %254 = or i32 %64, %0
  %255 = or i32 %123, %34
  %256 = or i32 %8, %2
  %257 = and i32 %21, %49
  %258 = or i32 %48, %7
  %259 = and i32 %76, %0
  %260 = or i32 %57, %42
  %261 = or i32 %133, %0
  %262 = and i32 %52, %2
  %263 = or i32 %36, %8
  %264 = or i32 %41, %115
  %265 = and i32 %116, %0
  %266 = or i32 %26, %28
  %267 = and i32 %25, %34
  %268 = shl i32 %267, 2
  %269 = xor i32 %171, %213
  %270 = or i32 %48, %53
  %271 = or i32 %13, %0
  %272 = or i32 %49, %53
  %273 = xor i32 %26, %76
  %274 = or i32 %12, %22
  %275 = or i32 %40, %0
  %276 = or i32 %78, %178
  %277 = or i32 %49, %7
  %278 = or i32 %36, %11
  %279 = and i32 %21, %13
  %280 = or i32 %123, %1
  %281 = and i32 %49, %145
  %282 = shl i32 %281, 1
  %283 = or i32 %25, %22
  %284 = shl i32 %283, 1
  %285 = and i32 %133, %11
  %286 = and i32 %133, %0
  %287 = mul i32 %286, -21
  %288 = and i32 %36, %0
  %289 = mul i32 %288, -14
  %290 = and i32 %178, %11
  %291 = mul i32 %290, -15
  %292 = mul i32 %89, -23
  %293 = and i32 %178, %0
  %294 = mul i32 %293, -17
  %295 = xor i32 %4, -1
  %296 = and i32 %17, %3
  %297 = or i32 %296, %295
  %298 = xor i32 %4, %3
  %299 = and i32 %298, %5
  %300 = xor i32 %5, %4
  %301 = xor i32 %300, -1
  %302 = and i32 %301, %3
  %303 = or i32 %4, %3
  %304 = xor i32 %303, -1
  %305 = xor i32 %304, %5
  %306 = xor i32 %5, %3
  %307 = xor i32 %306, %4
  %308 = or i32 %306, %4
  %309 = or i32 %298, %301
  %310 = or i32 %306, %304
  %311 = and i32 %5, %4
  %312 = xor i32 %311, -1
  %313 = xor i32 %298, -1
  %314 = and i32 %312, %313
  %315 = or i32 %5, %3
  %316 = xor i32 %315, -1
  %317 = or i32 %16, %316
  %318 = xor i32 %3, -1
  %319 = or i32 %318, %4
  %320 = xor i32 %319, -1
  %321 = or i32 %17, %320
  %322 = and i32 %5, %3
  %323 = and i32 %322, %4
  %324 = and i32 %306, %295
  %325 = xor i32 %324, -1
  %326 = xor i32 %323, %325
  %327 = and i32 %301, %313
  %328 = xor i32 %306, -1
  %329 = and i32 %319, %328
  %330 = or i32 %311, %320
  %331 = or i32 %298, %5
  %332 = or i32 %16, %17
  %333 = xor i32 %16, %5
  %334 = or i32 %300, %304
  %335 = or i32 %300, %313
  %336 = or i32 %320, %5
  %337 = and i32 %17, %4
  %338 = xor i32 %337, -1
  %339 = and i32 %338, %318
  %340 = xor i32 %18, -1
  %341 = and i32 %318, %4
  %342 = or i32 %341, %17
  %343 = shl i32 %342, 1
  %344 = or i32 %17, %3
  %345 = xor i32 %344, -1
  %346 = shl i32 %345, 1
  %347 = or i32 %300, %16
  %348 = xor i32 %311, %3
  %349 = and i32 %318, %5
  %350 = and i32 %349, %4
  %351 = or i32 %350, %307
  %352 = or i32 %328, %304
  %353 = xor i32 %320, %5
  %354 = and i32 %312, %3
  %355 = and i32 %301, %318
  %356 = or i32 %341, %5
  %357 = or i32 %301, %320
  %358 = xor i32 %323, %307
  %359 = shl i32 %296, 1
  %360 = xor i32 %328, %4
  %361 = and i32 %319, %5
  %362 = and i32 %322, %295
  %363 = and i32 %315, %4
  %364 = xor i32 %362, 2147483647
  %365 = xor i32 %364, %363
  %366 = shl i32 %365, 1
  %367 = or i32 %341, %328
  %368 = or i32 %311, %304
  %369 = and i32 %306, %4
  %370 = xor i32 %364, %369
  %371 = or i32 %300, %320
  %372 = xor i32 %322, -1
  %373 = xor i32 %372, %4
  %374 = or i32 %344, %295
  %375 = xor i32 %341, -1
  %376 = xor i32 %375, %5
  %377 = and i32 %303, %328
  %378 = shl i32 %301, 1
  %379 = xor i32 %16, -1
  %380 = and i32 %300, %379
  %381 = or i32 %17, %304
  %382 = and i32 %328, %4
  %383 = and i32 %18, %313
  %384 = shl i32 %318, 1
  %385 = or i32 %311, %296
  %386 = xor i32 %337, %372
  %387 = or i32 %322, %4
  %388 = add i32 %337, 1
  %389 = shl i32 %328, 1
  %390 = or i32 %337, %345
  %391 = or i32 %322, %341
  %392 = and i32 %17, %375
  %393 = shl i32 %392, 1
  %394 = or i32 %300, %341
  %395 = or i32 %337, %313
  %396 = or i32 %345, %295
  %397 = and i32 %300, %298
  %398 = or i32 %322, %295
  %399 = xor i32 %379, %5
  %400 = or i32 %17, %313
  %401 = or i32 %5, %4
  %402 = xor i32 %401, %3
  %403 = and i32 %349, %295
  %404 = or i32 %306, %295
  %405 = xor i32 %403, %404
  %406 = and i32 %401, %313
  %407 = or i32 %323, %324
  %408 = shl i32 %407, 1
  %409 = or i32 %16, %345
  %410 = shl i32 %409, 1
  %411 = and i32 %316, %295
  %412 = and i32 %296, %295
  %413 = and i32 %316, %4
  %414 = and i32 %296, %4
  %415 = and i32 %345, %295
  %416 = shl i32 %362, 3
  %417 = and i32 %345, %4
  %418 = add i32 %8, %145
  %419 = add i32 %418, %25
  %420 = add i32 %419, %244
  %421 = add i32 %420, %229
  %422 = add i32 %421, %174
  %423 = add i32 %422, %48
  %424 = add i32 %423, %96
  %425 = add i32 %424, %253
  %426 = add i32 %425, %220
  %427 = add i32 %426, %203
  %428 = add i32 %427, %127
  %429 = add i32 %428, %115
  %430 = add i32 %429, %104
  %431 = add i32 %430, %319
  %432 = add i32 %431, %17
  %433 = add i32 %432, %110
  %434 = add i32 %433, %63
  %435 = add i32 %434, %44
  %436 = add i32 %435, %305
  %437 = add i32 %436, %411
  %438 = add i32 %437, %383
  %439 = add i32 %438, %382
  %440 = add i32 %439, %377
  %441 = add i32 %440, %371
  %442 = add i32 %441, %367
  %443 = add i32 %442, %355
  %444 = add i32 %443, %348
  %445 = add i32 %444, %314
  %446 = add i32 %445, %370
  %447 = shl i32 %446, 1
  %448 = add i32 %149, %250
  %449 = add i32 %448, %275
  %450 = sub i32 %449, %158
  %451 = sub i32 %450, %381
  %452 = add i32 %451, %417
  %453 = mul i32 %452, 5
  %454 = sub i32 %415, %414
  %455 = add i32 %454, %412
  %456 = mul i32 %455, 9
  %457 = add i32 %90, %200
  %458 = add i32 %457, %248
  %459 = shl i32 %458, 2
  %460 = sub i32 %41, %413
  %461 = mul i32 %460, 6
  %462 = add i32 %139, %33
  %463 = add i32 %462, %117
  %464 = sub i32 %463, %83
  %465 = add i32 %464, %321
  %466 = add i32 %465, %385
  %467 = sub i32 %466, %323
  %468 = add i32 %467, %347
  %469 = mul i32 %468, 3
  %470 = add i32 %78, %0
  %471 = add i32 %470, %52
  %472 = sub i32 %2, %471
  %473 = add i32 %472, %22
  %474 = sub i32 %473, %30
  %475 = sub i32 %474, %47
  %476 = sub i32 %475, %64
  %477 = sub i32 %476, %69
  %478 = add i32 %477, %72
  %479 = add i32 %478, %40
  %480 = add i32 %479, %87
  %481 = add i32 %480, %100
  %482 = sub i32 %481, %120
  %483 = add i32 %482, %37
  %484 = sub i32 %483, %131
  %485 = sub i32 %484, %138
  %486 = add i32 %485, %148
  %487 = add i32 %486, %151
  %488 = add i32 %487, %159
  %489 = sub i32 %488, %160
  %490 = sub i32 %489, %177
  %491 = sub i32 %490, %197
  %492 = add i32 %491, %199
  %493 = sub i32 %492, %202
  %494 = sub i32 %493, %207
  %495 = sub i32 %494, %36
  %496 = sub i32 %495, %116
  %497 = sub i32 %496, %217
  %498 = add i32 %497, %133
  %499 = add i32 %498, %231
  %500 = sub i32 %499, %235
  %501 = sub i32 %500, %102
  %502 = sub i32 %501, %26
  %503 = add i32 %502, %247
  %504 = add i32 %503, %256
  %505 = sub i32 %504, %262
  %506 = add i32 %505, %123
  %507 = add i32 %506, %3
  %508 = sub i32 %507, %29
  %509 = add i32 %508, %24
  %510 = add i32 %509, %31
  %511 = sub i32 %510, %35
  %512 = add i32 %511, %38
  %513 = sub i32 %512, %39
  %514 = sub i32 %513, %46
  %515 = add i32 %514, %50
  %516 = add i32 %515, %51
  %517 = add i32 %516, %54
  %518 = sub i32 %517, %55
  %519 = sub i32 %518, %61
  %520 = sub i32 %519, %65
  %521 = sub i32 %520, %70
  %522 = sub i32 %521, %73
  %523 = add i32 %522, %74
  %524 = add i32 %523, %75
  %525 = sub i32 %524, %77
  %526 = add i32 %525, %79
  %527 = sub i32 %526, %80
  %528 = sub i32 %527, %84
  %529 = sub i32 %528, %88
  %530 = sub i32 %529, %94
  %531 = add i32 %530, %95
  %532 = sub i32 %531, %97
  %533 = sub i32 %532, %98
  %534 = add i32 %533, %99
  %535 = sub i32 %534, %101
  %536 = sub i32 %535, %103
  %537 = add i32 %536, %105
  %538 = add i32 %537, %111
  %539 = add i32 %538, %112
  %540 = sub i32 %539, %113
  %541 = sub i32 %540, %114
  %542 = add i32 %541, %121
  %543 = add i32 %542, %122
  %544 = add i32 %543, %124
  %545 = sub i32 %544, %125
  %546 = add i32 %545, %126
  %547 = sub i32 %546, %129
  %548 = sub i32 %547, %130
  %549 = add i32 %548, %132
  %550 = add i32 %549, %134
  %551 = add i32 %550, %135
  %552 = sub i32 %551, %136
  %553 = add i32 %552, %137
  %554 = sub i32 %553, %140
  %555 = add i32 %554, %141
  %556 = sub i32 %555, %142
  %557 = sub i32 %556, %143
  %558 = sub i32 %557, %144
  %559 = sub i32 %558, %146
  %560 = sub i32 %559, %147
  %561 = add i32 %560, %150
  %562 = sub i32 %561, %152
  %563 = sub i32 %562, %153
  %564 = add i32 %563, %154
  %565 = sub i32 %564, %161
  %566 = sub i32 %565, %166
  %567 = add i32 %566, %167
  %568 = sub i32 %567, %168
  %569 = add i32 %568, %169
  %570 = add i32 %569, %170
  %571 = add i32 %570, %171
  %572 = add i32 %571, %172
  %573 = add i32 %572, %173
  %574 = add i32 %573, %175
  %575 = add i32 %574, %176
  %576 = add i32 %575, %179
  %577 = add i32 %576, %186
  %578 = add i32 %577, %187
  %579 = add i32 %578, %188
  %580 = sub i32 %579, %189
  %581 = add i32 %580, %191
  %582 = add i32 %581, %192
  %583 = sub i32 %582, %193
  %584 = sub i32 %583, %194
  %585 = add i32 %584, %196
  %586 = add i32 %585, %198
  %587 = sub i32 %586, %201
  %588 = sub i32 %587, %204
  %589 = add i32 %588, %206
  %590 = sub i32 %589, %208
  %591 = add i32 %590, %209
  %592 = sub i32 %591, %210
  %593 = sub i32 %592, %211
  %594 = add i32 %593, %212
  %595 = sub i32 %594, %85
  %596 = add i32 %595, %218
  %597 = sub i32 %596, %219
  %598 = sub i32 %597, %221
  %599 = add i32 %598, %222
  %600 = add i32 %599, %228
  %601 = add i32 %600, %230
  %602 = add i32 %601, %232
  %603 = sub i32 %602, %236
  %604 = sub i32 %603, %239
  %605 = add i32 %604, %243
  %606 = sub i32 %605, %249
  %607 = add i32 %606, %251
  %608 = add i32 %607, %252
  %609 = add i32 %608, %254
  %610 = sub i32 %609, %255
  %611 = sub i32 %610, %257
  %612 = add i32 %611, %258
  %613 = add i32 %612, %259
  %614 = sub i32 %613, %261
  %615 = add i32 %614, %263
  %616 = add i32 %615, %265
  %617 = sub i32 %616, %266
  %618 = sub i32 %617, %268
  %619 = add i32 %618, %270
  %620 = sub i32 %619, %271
  %621 = add i32 %620, %272
  %622 = sub i32 %621, %273
  %623 = sub i32 %622, %274
  %624 = add i32 %623, %276
  %625 = sub i32 %624, %277
  %626 = add i32 %625, %278
  %627 = add i32 %626, %279
  %628 = sub i32 %627, %280
  %629 = sub i32 %628, %284
  %630 = sub i32 %629, %285
  %631 = sub i32 %630, %384
  %632 = add i32 %631, %60
  %633 = sub i32 %632, %68
  %634 = sub i32 %633, %71
  %635 = add i32 %634, %86
  %636 = sub i32 %635, %107
  %637 = sub i32 %636, %109
  %638 = sub i32 %637, %119
  %639 = sub i32 %638, %128
  %640 = sub i32 %639, %156
  %641 = sub i32 %640, %163
  %642 = add i32 %641, %165
  %643 = sub i32 %642, %181
  %644 = sub i32 %643, %183
  %645 = sub i32 %644, %185
  %646 = add i32 %645, %190
  %647 = add i32 %646, %195
  %648 = sub i32 %647, %205
  %649 = add i32 %648, %214
  %650 = sub i32 %649, %216
  %651 = add i32 %650, %223
  %652 = sub i32 %651, %225
  %653 = sub i32 %652, %227
  %654 = sub i32 %653, %234
  %655 = sub i32 %654, %238
  %656 = sub i32 %655, %241
  %657 = add i32 %656, %246
  %658 = sub i32 %657, %260
  %659 = add i32 %658, %264
  %660 = add i32 %659, %269
  %661 = sub i32 %660, %282
  %662 = add i32 %661, %287
  %663 = add i32 %662, %289
  %664 = add i32 %663, %291
  %665 = add i32 %664, %292
  %666 = add i32 %665, %294
  %667 = add i32 %666, %5
  %668 = add i32 %667, %299
  %669 = sub i32 %668, %331
  %670 = add i32 %669, %332
  %671 = sub i32 %670, %333
  %672 = sub i32 %671, %336
  %673 = add i32 %672, %340
  %674 = sub i32 %673, %353
  %675 = sub i32 %674, %356
  %676 = sub i32 %675, %361
  %677 = sub i32 %676, %322
  %678 = add i32 %677, %376
  %679 = add i32 %678, %388
  %680 = add i32 %679, %296
  %681 = add i32 %680, %399
  %682 = add i32 %681, %400
  %683 = sub i32 %682, %93
  %684 = add i32 %683, %297
  %685 = sub i32 %684, %302
  %686 = sub i32 %685, %307
  %687 = sub i32 %686, %308
  %688 = sub i32 %687, %309
  %689 = add i32 %688, %310
  %690 = sub i32 %689, %317
  %691 = add i32 %690, %327
  %692 = add i32 %691, %329
  %693 = sub i32 %692, %330
  %694 = sub i32 %693, %334
  %695 = sub i32 %694, %335
  %696 = add i32 %695, %339
  %697 = sub i32 %696, %343
  %698 = sub i32 %697, %346
  %699 = add i32 %698, %352
  %700 = add i32 %699, %354
  %701 = sub i32 %700, %357
  %702 = sub i32 %701, %359
  %703 = sub i32 %702, %360
  %704 = add i32 %703, %368
  %705 = sub i32 %704, %373
  %706 = add i32 %705, %374
  %707 = sub i32 %706, %378
  %708 = add i32 %707, %380
  %709 = sub i32 %708, %386
  %710 = add i32 %709, %387
  %711 = sub i32 %710, %389
  %712 = add i32 %711, %390
  %713 = add i32 %712, %391
  %714 = sub i32 %713, %393
  %715 = add i32 %714, %394
  %716 = sub i32 %715, %395
  %717 = sub i32 %716, %396
  %718 = sub i32 %717, %397
  %719 = sub i32 %718, %398
  %720 = add i32 %719, %402
  %721 = sub i32 %720, %406
  %722 = add i32 %721, %459
  %723 = sub i32 %722, %326
  %724 = sub i32 %723, %351
  %725 = add i32 %724, %358
  %726 = sub i32 %725, %405
  %727 = sub i32 %726, %410
  %728 = sub i32 %727, %416
  %729 = sub i32 %728, %408
  %730 = add i32 %729, %461
  %731 = sub i32 %730, %366
  %732 = add i32 %731, %456
  %733 = add i32 %732, %453
  %734 = add i32 %733, %469
  %735 = add i32 %734, %447
  %736 = icmp eq i32 %20, %735
  %737 = select i1 %736, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %738 = tail call i32 @puts(i8* nonnull dereferenceable(1) %737)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
