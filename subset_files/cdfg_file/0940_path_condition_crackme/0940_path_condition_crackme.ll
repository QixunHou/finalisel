; ModuleID = '../.././c_source_file/0940_path_condition_crackme.c'
source_filename = "../.././c_source_file/0940_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = or i32 %2, %1
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = xor i32 %2, -1
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = sub i32 %7, %11
  %13 = xor i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %4, %14
  %16 = xor i32 %1, -1
  %17 = and i32 %16, %0
  %18 = xor i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = or i32 %17, %19
  %21 = and i32 %2, %1
  %22 = and i32 %21, %0
  %23 = xor i32 %5, %0
  %24 = xor i32 %22, 2147483647
  %25 = xor i32 %24, %23
  %26 = shl i32 %25, 1
  %27 = or i32 %6, %0
  %28 = or i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %8, %29
  %31 = or i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %32, %1
  %34 = and i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %35, %1
  %37 = or i32 %8, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %16
  %40 = xor i32 %17, -1
  %41 = and i32 %13, %10
  %42 = shl i32 %41, 1
  %43 = and i32 %13, %1
  %44 = or i32 %18, %29
  %45 = xor i32 %4, -1
  %46 = xor i32 %0, -1
  %47 = xor i32 %5, %4
  %48 = shl i32 %47, 1
  %49 = or i32 %16, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %13, %50
  %52 = xor i32 %50, %2
  %53 = and i32 %8, %0
  %54 = or i32 %53, %21
  %55 = and i32 %37, %9
  %56 = xor i32 %53, -1
  %57 = and i32 %9, %56
  %58 = shl i32 %57, 2
  %59 = and i32 %56, %16
  %60 = or i32 %21, %0
  %61 = or i32 %53, %1
  %62 = and i32 %40, %2
  %63 = and i32 %18, %46
  %64 = or i32 %22, %63
  %65 = shl i32 %64, 1
  %66 = and i32 %37, %1
  %67 = or i32 %8, %50
  %68 = or i32 %4, %8
  %69 = shl i32 %68, 1
  %70 = and i32 %8, %1
  %71 = xor i32 %70, -1
  %72 = and i32 %21, %46
  %73 = and i32 %5, %0
  %74 = xor i32 %73, -1
  %75 = xor i32 %72, %74
  %76 = xor i32 %37, %1
  %77 = and i32 %16, %2
  %78 = and i32 %77, %0
  %79 = or i32 %18, %0
  %80 = xor i32 %79, 2147483647
  %81 = or i32 %80, %78
  %82 = or i32 %71, %46
  %83 = or i32 %4, %32
  %84 = and i32 %77, %46
  %85 = or i32 %18, %46
  %86 = xor i32 %85, -1
  %87 = or i32 %84, %86
  %88 = xor i32 %21, -1
  %89 = xor i32 %88, %0
  %90 = or i32 %16, %2
  %91 = xor i32 %90, %0
  %92 = or i32 %78, %91
  %93 = and i32 %19, %40
  %94 = xor i32 %78, %79
  %95 = and i32 %14, %10
  %96 = shl i32 %95, 1
  %97 = or i32 %8, %1
  %98 = xor i32 %97, %0
  %99 = or i32 %34, %6
  %100 = xor i32 %97, -1
  %101 = or i32 %4, %100
  %102 = or i32 %38, %1
  %103 = or i32 %13, %9
  %104 = or i32 %19, %0
  %105 = and i32 %14, %1
  %106 = and i32 %19, %0
  %107 = xor i32 %91, -1
  %108 = xor i32 %78, %107
  %109 = and i32 %28, %8
  %110 = and i32 %71, %46
  %111 = or i32 %53, %10
  %112 = shl i32 %111, 1
  %113 = or i32 %5, %0
  %114 = shl i32 %113, 1
  %115 = add i32 %53, 1
  %116 = xor i32 %4, %2
  %117 = and i32 %31, %16
  %118 = or i32 %13, %29
  %119 = or i32 %13, %1
  %120 = shl i32 %1, 1
  %121 = and i32 %49, %8
  %122 = or i32 %9, %38
  %123 = xor i32 %34, %28
  %124 = or i32 %71, %0
  %125 = or i32 %70, %0
  %126 = or i32 %34, %70
  %127 = and i32 %18, %40
  %128 = and i32 %14, %40
  %129 = xor i32 %71, %0
  %130 = and i32 %90, %0
  %131 = xor i32 %130, 2147483647
  %132 = xor i32 %131, %84
  %133 = or i32 %14, %29
  %134 = and i32 %31, %1
  %135 = xor i32 %84, %85
  %136 = xor i32 %49, %2
  %137 = and i32 %37, %16
  %138 = or i32 %70, %17
  %139 = xor i32 %17, %71
  %140 = or i32 %34, %29
  %141 = shl i32 %140, 1
  %142 = or i32 %19, %46
  %143 = and i32 %8, %40
  %144 = or i32 %97, %0
  %145 = xor i32 %18, %0
  %146 = or i32 %78, %145
  %147 = and i32 %31, %9
  %148 = and i32 %13, %40
  %149 = shl i32 %148, 1
  %150 = or i32 %32, %16
  %151 = and i32 %14, %16
  %152 = and i32 %37, %10
  %153 = shl i32 %152, 1
  %154 = and i32 %88, %46
  %155 = xor i32 %70, %0
  %156 = xor i32 %29, %2
  %157 = or i32 %18, %4
  %158 = or i32 %6, %46
  %159 = shl i32 %158, 1
  %160 = and i32 %56, %10
  %161 = xor i32 %17, %2
  %162 = xor i32 %21, %0
  %163 = and i32 %56, %1
  %164 = or i32 %34, %50
  %165 = or i32 %34, %16
  %166 = and i32 %97, %46
  %167 = and i32 %5, %46
  %168 = or i32 %22, %167
  %169 = xor i32 %24, %63
  %170 = and i32 %28, %14
  %171 = and i32 %18, %0
  %172 = or i32 %50, %2
  %173 = xor i32 %17, %88
  %174 = and i32 %9, %35
  %175 = and i32 %8, %45
  %176 = or i32 %53, %9
  %177 = shl i32 %176, 1
  %178 = or i32 %17, %14
  %179 = or i32 %34, %10
  %180 = shl i32 %179, 1
  %181 = xor i32 %40, %2
  %182 = or i32 %17, %8
  %183 = xor i32 %34, %49
  %184 = shl i32 %183, 2
  %185 = or i32 %70, %46
  %186 = or i32 %13, %17
  %187 = and i32 %18, %28
  %188 = and i32 %14, %45
  %189 = or i32 %88, %0
  %190 = xor i32 %97, %4
  %191 = xor i32 %53, %88
  %192 = and i32 %18, %49
  %193 = or i32 %9, %8
  %194 = or i32 %100, %0
  %195 = or i32 %19, %50
  %196 = and i32 %31, %10
  %197 = shl i32 %13, 1
  %198 = xor i32 %53, %97
  %199 = xor i32 %28, %2
  %200 = or i32 %4, %19
  %201 = xor i32 %167, -1
  %202 = xor i32 %22, %201
  %203 = and i32 %13, %16
  %204 = xor i32 %32, %1
  %205 = or i32 %29, %2
  %206 = and i32 %35, %1
  %207 = xor i32 %53, %1
  %208 = and i32 %49, %19
  %209 = or i32 %38, %10
  %210 = shl i32 %209, 1
  %211 = xor i32 %19, %0
  %212 = or i32 %9, %14
  %213 = xor i32 %145, -1
  %214 = or i32 %22, %213
  %215 = and i32 %28, %19
  %216 = and i32 %49, %2
  %217 = add i32 %97, 1
  %218 = or i32 %34, %1
  %219 = or i32 %18, %17
  %220 = or i32 %4, %2
  %221 = shl i32 %220, 1
  %222 = or i32 %100, %46
  %223 = or i32 %9, %32
  %224 = add i32 %34, 1
  %225 = or i32 %4, %38
  %226 = and i32 %97, %0
  %227 = or i32 %53, %100
  %228 = xor i32 %34, %1
  %229 = or i32 %10, %2
  %230 = xor i32 %56, %1
  %231 = and i32 %10, %2
  %232 = or i32 %21, %17
  %233 = and i32 %13, %9
  %234 = or i32 %84, %130
  %235 = and i32 %35, %16
  %236 = and i32 %13, %49
  %237 = or i32 %14, %10
  %238 = and i32 %49, %14
  %239 = xor i32 %31, %1
  %240 = or i32 %18, %50
  %241 = xor i32 %22, %145
  %242 = and i32 %45, %2
  %243 = and i32 %9, %2
  %244 = or i32 %9, %2
  %245 = or i32 %17, %2
  %246 = and i32 %19, %45
  %247 = shl i32 %246, 1
  %248 = and i32 %71, %0
  %249 = xor i32 %34, %71
  %250 = or i32 %97, %46
  %251 = or i32 %14, %1
  %252 = or i32 %19, %29
  %253 = or i32 %14, %50
  %254 = shl i32 %253, 1
  %255 = or i32 %32, %10
  %256 = add i32 %49, 1
  %257 = xor i32 %38, %1
  %258 = xor i32 %90, -1
  %259 = or i32 %258, %0
  %260 = xor i32 %78, %259
  %261 = or i32 %14, %16
  %262 = shl i32 %261, 1
  %263 = xor i32 %31, %4
  %264 = xor i32 %100, %0
  %265 = or i32 %13, %16
  %266 = xor i32 %6, %0
  %267 = and i32 %6, %46
  %268 = and i32 %70, %46
  %269 = and i32 %6, %0
  %270 = mul i32 %269, -26
  %271 = and i32 %70, %0
  %272 = mul i32 %271, 6
  %273 = and i32 %100, %46
  %274 = shl i32 %273, 2
  %275 = and i32 %100, %0
  %276 = mul i32 %275, -25
  %277 = mul i32 %22, -10
  %278 = add i32 %37, %2
  %279 = add i32 %278, %205
  %280 = add i32 %279, %109
  %281 = add i32 %280, %52
  %282 = add i32 %281, %255
  %283 = add i32 %282, %239
  %284 = add i32 %283, %233
  %285 = add i32 %284, %226
  %286 = add i32 %285, %188
  %287 = add i32 %286, %162
  %288 = add i32 %287, %138
  %289 = add i32 %288, %133
  %290 = add i32 %289, %98
  %291 = add i32 %290, %76
  %292 = add i32 %291, %54
  %293 = add i32 %292, %20
  %294 = add i32 %5, %46
  %295 = sub i32 %294, %143
  %296 = add i32 %295, %238
  %297 = add i32 %296, %196
  %298 = add i32 %297, %260
  %299 = mul i32 %298, 3
  %300 = sub i32 %219, %248
  %301 = add i32 %300, %200
  %302 = sub i32 %301, %185
  %303 = mul i32 %302, 5
  %304 = add i32 %72, %268
  %305 = add i32 %304, %267
  %306 = mul i32 %305, -13
  %307 = add i32 %44, %172
  %308 = shl i32 %307, 2
  %309 = add i32 %293, %15
  %310 = add i32 %309, %146
  %311 = add i32 %310, %132
  %312 = add i32 %311, %169
  %313 = add i32 %312, %81
  %314 = shl i32 %313, 1
  %315 = sub i32 %1, %0
  %316 = add i32 %315, %40
  %317 = sub i32 %316, %120
  %318 = sub i32 %317, %2
  %319 = sub i32 %318, %4
  %320 = sub i32 %319, %17
  %321 = add i32 %320, %45
  %322 = add i32 %321, %256
  %323 = sub i32 %322, %30
  %324 = sub i32 %323, %62
  %325 = add i32 %324, %67
  %326 = add i32 %325, %71
  %327 = add i32 %326, %19
  %328 = add i32 %327, %38
  %329 = add i32 %328, %115
  %330 = add i32 %329, %116
  %331 = sub i32 %330, %121
  %332 = add i32 %331, %14
  %333 = sub i32 %332, %136
  %334 = add i32 %333, %156
  %335 = add i32 %334, %161
  %336 = sub i32 %335, %31
  %337 = add i32 %336, %6
  %338 = sub i32 %337, %70
  %339 = add i32 %338, %175
  %340 = sub i32 %339, %181
  %341 = add i32 %340, %182
  %342 = add i32 %341, %34
  %343 = sub i32 %342, %193
  %344 = sub i32 %343, %199
  %345 = add i32 %344, %97
  %346 = sub i32 %345, %216
  %347 = add i32 %346, %217
  %348 = add i32 %347, %224
  %349 = add i32 %348, %32
  %350 = add i32 %349, %229
  %351 = sub i32 %350, %231
  %352 = sub i32 %351, %242
  %353 = sub i32 %352, %243
  %354 = sub i32 %353, %244
  %355 = add i32 %354, %245
  %356 = sub i32 %355, %27
  %357 = sub i32 %356, %33
  %358 = sub i32 %357, %36
  %359 = add i32 %358, %39
  %360 = sub i32 %359, %43
  %361 = sub i32 %360, %51
  %362 = sub i32 %361, %55
  %363 = add i32 %362, %59
  %364 = sub i32 %363, %60
  %365 = add i32 %364, %61
  %366 = sub i32 %365, %66
  %367 = sub i32 %366, %69
  %368 = sub i32 %367, %82
  %369 = add i32 %368, %83
  %370 = sub i32 %369, %89
  %371 = add i32 %370, %93
  %372 = add i32 %371, %99
  %373 = sub i32 %372, %101
  %374 = sub i32 %373, %102
  %375 = add i32 %374, %103
  %376 = add i32 %375, %104
  %377 = sub i32 %376, %105
  %378 = sub i32 %377, %106
  %379 = add i32 %378, %110
  %380 = add i32 %379, %73
  %381 = add i32 %380, %117
  %382 = add i32 %381, %118
  %383 = sub i32 %382, %119
  %384 = add i32 %383, %122
  %385 = sub i32 %384, %79
  %386 = sub i32 %385, %123
  %387 = add i32 %386, %124
  %388 = add i32 %387, %125
  %389 = sub i32 %388, %126
  %390 = add i32 %389, %127
  %391 = add i32 %390, %128
  %392 = sub i32 %391, %129
  %393 = add i32 %392, %134
  %394 = add i32 %393, %137
  %395 = sub i32 %394, %139
  %396 = add i32 %395, %142
  %397 = sub i32 %396, %144
  %398 = add i32 %397, %147
  %399 = add i32 %398, %150
  %400 = sub i32 %399, %151
  %401 = sub i32 %400, %154
  %402 = add i32 %401, %155
  %403 = sub i32 %402, %157
  %404 = sub i32 %403, %160
  %405 = sub i32 %404, %85
  %406 = add i32 %405, %163
  %407 = sub i32 %406, %164
  %408 = add i32 %407, %165
  %409 = sub i32 %408, %166
  %410 = sub i32 %409, %170
  %411 = sub i32 %410, %171
  %412 = sub i32 %411, %173
  %413 = add i32 %412, %174
  %414 = add i32 %413, %178
  %415 = add i32 %414, %186
  %416 = sub i32 %415, %187
  %417 = sub i32 %416, %189
  %418 = add i32 %417, %190
  %419 = add i32 %418, %191
  %420 = add i32 %419, %192
  %421 = sub i32 %420, %194
  %422 = add i32 %421, %195
  %423 = sub i32 %422, %197
  %424 = sub i32 %423, %198
  %425 = add i32 %424, %203
  %426 = sub i32 %425, %204
  %427 = sub i32 %426, %206
  %428 = add i32 %427, %207
  %429 = sub i32 %428, %208
  %430 = add i32 %429, %211
  %431 = add i32 %430, %23
  %432 = sub i32 %431, %212
  %433 = add i32 %432, %215
  %434 = add i32 %433, %218
  %435 = sub i32 %434, %221
  %436 = sub i32 %435, %222
  %437 = add i32 %436, %223
  %438 = add i32 %437, %225
  %439 = add i32 %438, %227
  %440 = sub i32 %439, %228
  %441 = sub i32 %440, %63
  %442 = add i32 %441, %230
  %443 = add i32 %442, %232
  %444 = add i32 %443, %235
  %445 = add i32 %444, %236
  %446 = add i32 %445, %237
  %447 = sub i32 %446, %240
  %448 = add i32 %447, %249
  %449 = sub i32 %448, %250
  %450 = add i32 %449, %251
  %451 = sub i32 %450, %252
  %452 = add i32 %451, %257
  %453 = add i32 %452, %167
  %454 = sub i32 %453, %263
  %455 = sub i32 %454, %264
  %456 = add i32 %455, %265
  %457 = add i32 %456, %266
  %458 = sub i32 %457, %42
  %459 = sub i32 %458, %48
  %460 = sub i32 %459, %58
  %461 = add i32 %460, %75
  %462 = add i32 %461, %87
  %463 = add i32 %462, %92
  %464 = sub i32 %463, %94
  %465 = sub i32 %464, %96
  %466 = add i32 %465, %108
  %467 = sub i32 %466, %112
  %468 = sub i32 %467, %114
  %469 = sub i32 %468, %135
  %470 = sub i32 %469, %141
  %471 = sub i32 %470, %149
  %472 = sub i32 %471, %153
  %473 = sub i32 %472, %159
  %474 = add i32 %473, %168
  %475 = sub i32 %474, %177
  %476 = sub i32 %475, %180
  %477 = sub i32 %476, %184
  %478 = sub i32 %477, %202
  %479 = sub i32 %478, %210
  %480 = sub i32 %479, %214
  %481 = sub i32 %480, %234
  %482 = add i32 %481, %241
  %483 = sub i32 %482, %247
  %484 = sub i32 %483, %254
  %485 = sub i32 %484, %262
  %486 = add i32 %485, %270
  %487 = add i32 %486, %272
  %488 = sub i32 %487, %274
  %489 = add i32 %488, %276
  %490 = add i32 %489, %277
  %491 = sub i32 %490, %65
  %492 = add i32 %491, %308
  %493 = sub i32 %492, %26
  %494 = add i32 %493, %306
  %495 = add i32 %494, %303
  %496 = add i32 %495, %299
  %497 = add i32 %496, %314
  %498 = icmp eq i32 %12, %497
  %499 = select i1 %498, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %500 = tail call i32 @puts(i8* nonnull dereferenceable(1) %499)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
