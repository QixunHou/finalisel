digraph "DFG for'crackme' function" {
	Node0x1901bb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1901c50[shape=record, label="  %4 = mul i32 %3, 5"];
	Node0x1901d10[shape=record, label="  %5 = add i32 %4, -1"];
	Node0x1901d80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x1901df0[shape=record, label="  %7 = add i32 %1, 1"];
	Node0x1901e60[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x1901ed0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x1901f40[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1901fb0[shape=record, label="  %11 = add i32 %8, %10"];
	Node0x1902020[shape=record, label="  %12 = sub i32 %11, %9"];
	Node0x1902090[shape=record, label="  %13 = or i32 %3, %0"];
	Node0x1902100[shape=record, label="  %14 = add i32 %12, %13"];
	Node0x1902170[shape=record, label="  %15 = or i32 %1, %0"];
	Node0x19021e0[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x1902250[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x19022c0[shape=record, label="  %18 = add i32 %14, %17"];
	Node0x1902330[shape=record, label="  %19 = shl i32 %13, 1"];
	Node0x19023d0[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x1902440[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x19024e0[shape=record, label="  %22 = mul i32 %21, 7"];
	Node0x1902550[shape=record, label="  %23 = shl i32 %6, 1"];
	Node0x19025c0[shape=record, label="  %24 = add i32 %18, %22"];
	Node0x1902630[shape=record, label="  %25 = sub i32 %24, %23"];
	Node0x19026a0[shape=record, label="  %26 = add i32 %25, %20"];
	Node0x1902710[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0x18a2268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1902bb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1902c00[shape=record, label="  ret void"];
	Node0x1901bb0 -> Node0x1901c50;
	Node0x1901c50 -> Node0x1901d10;
	Node0x1901d10 -> Node0x1901d80;
	Node0x1901d80 -> Node0x1901df0;
	Node0x1901df0 -> Node0x1901e60;
	Node0x1901e60 -> Node0x1901ed0;
	Node0x1901ed0 -> Node0x1901f40;
	Node0x1901f40 -> Node0x1901fb0;
	Node0x1901fb0 -> Node0x1902020;
	Node0x1902020 -> Node0x1902090;
	Node0x1902090 -> Node0x1902100;
	Node0x1902100 -> Node0x1902170;
	Node0x1902170 -> Node0x19021e0;
	Node0x19021e0 -> Node0x1902250;
	Node0x1902250 -> Node0x19022c0;
	Node0x19022c0 -> Node0x1902330;
	Node0x1902330 -> Node0x19023d0;
	Node0x19023d0 -> Node0x1902440;
	Node0x1902440 -> Node0x19024e0;
	Node0x19024e0 -> Node0x1902550;
	Node0x1902550 -> Node0x19025c0;
	Node0x19025c0 -> Node0x1902630;
	Node0x1902630 -> Node0x19026a0;
	Node0x19026a0 -> Node0x1902710;
	Node0x1902710 -> Node0x18a2268;
	Node0x18a2268 -> Node0x1902bb0;
	Node0x1902bb0 -> Node0x1902c00;
edge [color=red]
	Node0x1901bb0 -> Node0x1901c50;
	Node0x1901c50 -> Node0x1901d10;
	Node0x1901df0 -> Node0x1901e60;
	Node0x1901d80 -> Node0x1901e60;
	Node0x1901ed0 -> Node0x1901f40;
	Node0x1901e60 -> Node0x1901fb0;
	Node0x1901f40 -> Node0x1901fb0;
	Node0x1901fb0 -> Node0x1902020;
	Node0x1901ed0 -> Node0x1902020;
	Node0x1901bb0 -> Node0x1902090;
	Node0x1902020 -> Node0x1902100;
	Node0x1902090 -> Node0x1902100;
	Node0x1902170 -> Node0x19021e0;
	Node0x19021e0 -> Node0x1902250;
	Node0x1902100 -> Node0x19022c0;
	Node0x1902250 -> Node0x19022c0;
	Node0x1902090 -> Node0x1902330;
	Node0x1902330 -> Node0x19023d0;
	Node0x1901bb0 -> Node0x1902440;
	Node0x1902440 -> Node0x19024e0;
	Node0x1901d80 -> Node0x1902550;
	Node0x19022c0 -> Node0x19025c0;
	Node0x19024e0 -> Node0x19025c0;
	Node0x19025c0 -> Node0x1902630;
	Node0x1902550 -> Node0x1902630;
	Node0x1902630 -> Node0x19026a0;
	Node0x19023d0 -> Node0x19026a0;
	Node0x1901d10 -> Node0x1902710;
	Node0x19026a0 -> Node0x1902710;
	Node0x1902710 -> Node0x18a2268;
	Node0x18a2268 -> Node0x1902bb0;
}
