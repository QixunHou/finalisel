digraph "DFG for'main' function" {
	Node0x58db08[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x58db88[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x58dc18[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x58dc78[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x58dd28[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x58e158[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x58e238[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x58e338[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x58e3f8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x58e4a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x58e568[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x58e618[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x588ae0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x58e818[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x58f788[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x58fdf8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x58fe58[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x58fed0[shape=record, label="  %14 = xor i32 %12, %11"];
	Node0x58ff40[shape=record, label="  %15 = xor i32 %10, -1"];
	Node0x58ffb0[shape=record, label="  %16 = or i32 %13, %15"];
	Node0x590020[shape=record, label="  %17 = shl i32 %10, 1"];
	Node0x590090[shape=record, label="  %18 = sub i32 %17, %14"];
	Node0x590100[shape=record, label="  %19 = sub i32 %18, %16"];
	Node0x590170[shape=record, label="  %20 = xor i32 %12, -1"];
	Node0x5901e0[shape=record, label="  %21 = or i32 %11, %20"];
	Node0x590250[shape=record, label="  %22 = and i32 %12, %11"];
	Node0x5902c0[shape=record, label="  %23 = or i32 %12, %11"];
	Node0x590330[shape=record, label="  %24 = and i32 %11, %20"];
	Node0x5903a0[shape=record, label="  %25 = shl i32 %23, 2"];
	Node0x590410[shape=record, label="  %26 = xor i32 %25, -4"];
	Node0x590480[shape=record, label="  %27 = xor i32 %21, -1"];
	Node0x5904f0[shape=record, label="  %28 = mul i32 %27, 5"];
	Node0x590560[shape=record, label="  %29 = mul i32 %22, 6"];
	Node0x5905d0[shape=record, label="  %30 = xor i32 %13, %10"];
	Node0x590640[shape=record, label="  %31 = or i32 %13, %10"];
	Node0x5906b0[shape=record, label="  %32 = and i32 %13, %15"];
	Node0x590720[shape=record, label="  %33 = shl i32 %16, 2"];
	Node0x590790[shape=record, label="  %34 = xor i32 %33, -4"];
	Node0x590800[shape=record, label="  %35 = sub i32 %24, %30"];
	Node0x590870[shape=record, label="  %36 = mul i32 %35, 3"];
	Node0x5908e0[shape=record, label="  %37 = sub i32 %32, %12"];
	Node0x590950[shape=record, label="  %38 = shl i32 %37, 1"];
	Node0x5909c0[shape=record, label="  %39 = add i32 %10, 4"];
	Node0x590a30[shape=record, label="  %40 = sub i32 %39, %21"];
	Node0x590aa0[shape=record, label="  %41 = add i32 %40, %22"];
	Node0x590b10[shape=record, label="  %42 = sub i32 %41, %23"];
	Node0x590b80[shape=record, label="  %43 = add i32 %42, %24"];
	Node0x590bf0[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x590c60[shape=record, label="  %45 = add i32 %44, %29"];
	Node0x590cd0[shape=record, label="  %46 = add i32 %45, %31"];
	Node0x590d40[shape=record, label="  %47 = add i32 %46, %26"];
	Node0x590db0[shape=record, label="  %48 = add i32 %47, %34"];
	Node0x590e20[shape=record, label="  %49 = add i32 %48, %36"];
	Node0x590e90[shape=record, label="  %50 = add i32 %49, %38"];
	Node0x590f00[shape=record, label="  %51 = icmp eq i32 %19, %50"];
	Node0x52d8b8[shape=record, label="  %52 = select i1 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x590f90[shape=record, label="  %53 = call i32 @puts(i8* nonnull dereferenceable(1) %52) #5"];
	Node0x591238[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x591398[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x5914a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x5915b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x591678[shape=record, label="  ret i32 0"];
	Node0x58db08 -> Node0x58db88;
	Node0x58db88 -> Node0x58dc18;
	Node0x58dc18 -> Node0x58dc78;
	Node0x58dc78 -> Node0x58dd28;
	Node0x58dd28 -> Node0x58e158;
	Node0x58e158 -> Node0x58e238;
	Node0x58e238 -> Node0x58e338;
	Node0x58e338 -> Node0x58e3f8;
	Node0x58e3f8 -> Node0x58e4a8;
	Node0x58e4a8 -> Node0x58e568;
	Node0x58e568 -> Node0x58e618;
	Node0x58e618 -> Node0x588ae0;
	Node0x588ae0 -> Node0x58e818;
	Node0x58e818 -> Node0x58f788;
	Node0x58f788 -> Node0x58fdf8;
	Node0x58fdf8 -> Node0x58fe58;
	Node0x58fe58 -> Node0x58fed0;
	Node0x58fed0 -> Node0x58ff40;
	Node0x58ff40 -> Node0x58ffb0;
	Node0x58ffb0 -> Node0x590020;
	Node0x590020 -> Node0x590090;
	Node0x590090 -> Node0x590100;
	Node0x590100 -> Node0x590170;
	Node0x590170 -> Node0x5901e0;
	Node0x5901e0 -> Node0x590250;
	Node0x590250 -> Node0x5902c0;
	Node0x5902c0 -> Node0x590330;
	Node0x590330 -> Node0x5903a0;
	Node0x5903a0 -> Node0x590410;
	Node0x590410 -> Node0x590480;
	Node0x590480 -> Node0x5904f0;
	Node0x5904f0 -> Node0x590560;
	Node0x590560 -> Node0x5905d0;
	Node0x5905d0 -> Node0x590640;
	Node0x590640 -> Node0x5906b0;
	Node0x5906b0 -> Node0x590720;
	Node0x590720 -> Node0x590790;
	Node0x590790 -> Node0x590800;
	Node0x590800 -> Node0x590870;
	Node0x590870 -> Node0x5908e0;
	Node0x5908e0 -> Node0x590950;
	Node0x590950 -> Node0x5909c0;
	Node0x5909c0 -> Node0x590a30;
	Node0x590a30 -> Node0x590aa0;
	Node0x590aa0 -> Node0x590b10;
	Node0x590b10 -> Node0x590b80;
	Node0x590b80 -> Node0x590bf0;
	Node0x590bf0 -> Node0x590c60;
	Node0x590c60 -> Node0x590cd0;
	Node0x590cd0 -> Node0x590d40;
	Node0x590d40 -> Node0x590db0;
	Node0x590db0 -> Node0x590e20;
	Node0x590e20 -> Node0x590e90;
	Node0x590e90 -> Node0x590f00;
	Node0x590f00 -> Node0x52d8b8;
	Node0x52d8b8 -> Node0x590f90;
	Node0x590f90 -> Node0x591238;
	Node0x591238 -> Node0x591398;
	Node0x591398 -> Node0x5914a8;
	Node0x5914a8 -> Node0x5915b8;
	Node0x5915b8 -> Node0x591678;
edge [color=red]
	Node0x58db08 -> Node0x58dd28;
	Node0x58dd28 -> Node0x58e158;
	Node0x58db88 -> Node0x58e238;
	Node0x58e238 -> Node0x58e338;
	Node0x58dc18 -> Node0x58e3f8;
	Node0x58e3f8 -> Node0x58e4a8;
	Node0x58dc78 -> Node0x58e568;
	Node0x58e568 -> Node0x58e618;
	Node0x58db08 -> Node0x588ae0;
	Node0x58db88 -> Node0x588ae0;
	Node0x58dc18 -> Node0x588ae0;
	Node0x58dc78 -> Node0x588ae0;
	Node0x58db08 -> Node0x58e818;
	Node0x58db88 -> Node0x58f788;
	Node0x58dc18 -> Node0x58fdf8;
	Node0x58dc78 -> Node0x58fe58;
	Node0x58fdf8 -> Node0x58fed0;
	Node0x58f788 -> Node0x58fed0;
	Node0x58e818 -> Node0x58ff40;
	Node0x58fe58 -> Node0x58ffb0;
	Node0x58ff40 -> Node0x58ffb0;
	Node0x58e818 -> Node0x590020;
	Node0x590020 -> Node0x590090;
	Node0x58fed0 -> Node0x590090;
	Node0x590090 -> Node0x590100;
	Node0x58ffb0 -> Node0x590100;
	Node0x58fdf8 -> Node0x590170;
	Node0x58f788 -> Node0x5901e0;
	Node0x590170 -> Node0x5901e0;
	Node0x58fdf8 -> Node0x590250;
	Node0x58f788 -> Node0x590250;
	Node0x58fdf8 -> Node0x5902c0;
	Node0x58f788 -> Node0x5902c0;
	Node0x58f788 -> Node0x590330;
	Node0x590170 -> Node0x590330;
	Node0x5902c0 -> Node0x5903a0;
	Node0x5903a0 -> Node0x590410;
	Node0x5901e0 -> Node0x590480;
	Node0x590480 -> Node0x5904f0;
	Node0x590250 -> Node0x590560;
	Node0x58fe58 -> Node0x5905d0;
	Node0x58e818 -> Node0x5905d0;
	Node0x58fe58 -> Node0x590640;
	Node0x58e818 -> Node0x590640;
	Node0x58fe58 -> Node0x5906b0;
	Node0x58ff40 -> Node0x5906b0;
	Node0x58ffb0 -> Node0x590720;
	Node0x590720 -> Node0x590790;
	Node0x590330 -> Node0x590800;
	Node0x5905d0 -> Node0x590800;
	Node0x590800 -> Node0x590870;
	Node0x5906b0 -> Node0x5908e0;
	Node0x58fdf8 -> Node0x5908e0;
	Node0x5908e0 -> Node0x590950;
	Node0x58e818 -> Node0x5909c0;
	Node0x5909c0 -> Node0x590a30;
	Node0x5901e0 -> Node0x590a30;
	Node0x590a30 -> Node0x590aa0;
	Node0x590250 -> Node0x590aa0;
	Node0x590aa0 -> Node0x590b10;
	Node0x5902c0 -> Node0x590b10;
	Node0x590b10 -> Node0x590b80;
	Node0x590330 -> Node0x590b80;
	Node0x590b80 -> Node0x590bf0;
	Node0x5904f0 -> Node0x590bf0;
	Node0x590bf0 -> Node0x590c60;
	Node0x590560 -> Node0x590c60;
	Node0x590c60 -> Node0x590cd0;
	Node0x590640 -> Node0x590cd0;
	Node0x590cd0 -> Node0x590d40;
	Node0x590410 -> Node0x590d40;
	Node0x590d40 -> Node0x590db0;
	Node0x590790 -> Node0x590db0;
	Node0x590db0 -> Node0x590e20;
	Node0x590870 -> Node0x590e20;
	Node0x590e20 -> Node0x590e90;
	Node0x590950 -> Node0x590e90;
	Node0x590100 -> Node0x590f00;
	Node0x590e90 -> Node0x590f00;
	Node0x590f00 -> Node0x52d8b8;
	Node0x52d8b8 -> Node0x590f90;
	Node0x58e568 -> Node0x591238;
	Node0x58e3f8 -> Node0x591398;
	Node0x58e238 -> Node0x5914a8;
	Node0x58dd28 -> Node0x5915b8;
}
