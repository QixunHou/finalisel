digraph "DFG for'crackme' function" {
	Node0x58bab0[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x58c130[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x58c1a0[shape=record, label="  %7 = or i32 %6, %3"];
	Node0x58c240[shape=record, label="  %8 = shl i32 %0, 1"];
	Node0x58c2b0[shape=record, label="  %9 = sub i32 %8, %5"];
	Node0x58c320[shape=record, label="  %10 = sub i32 %9, %7"];
	Node0x58c390[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x58c400[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x58c470[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x58c4e0[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x58c550[shape=record, label="  %15 = and i32 %11, %1"];
	Node0x58c5f0[shape=record, label="  %16 = shl i32 %14, 2"];
	Node0x58c690[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0x58c700[shape=record, label="  %18 = xor i32 %12, -1"];
	Node0x58c7a0[shape=record, label="  %19 = mul i32 %18, 5"];
	Node0x58c840[shape=record, label="  %20 = mul i32 %13, 6"];
	Node0x58c8b0[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x58c920[shape=record, label="  %22 = or i32 %3, %0"];
	Node0x58c990[shape=record, label="  %23 = and i32 %6, %3"];
	Node0x58ca00[shape=record, label="  %24 = shl i32 %7, 2"];
	Node0x58ca70[shape=record, label="  %25 = xor i32 %24, -4"];
	Node0x58cae0[shape=record, label="  %26 = sub i32 %15, %21"];
	Node0x58cb80[shape=record, label="  %27 = mul i32 %26, 3"];
	Node0x58cbf0[shape=record, label="  %28 = sub i32 %23, %2"];
	Node0x58cc60[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x58cd00[shape=record, label="  %30 = add i32 %0, 4"];
	Node0x58cd70[shape=record, label="  %31 = sub i32 %30, %12"];
	Node0x58cde0[shape=record, label="  %32 = add i32 %31, %13"];
	Node0x58d060[shape=record, label="  %33 = sub i32 %32, %14"];
	Node0x58d0d0[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x58d140[shape=record, label="  %35 = add i32 %34, %19"];
	Node0x58d1b0[shape=record, label="  %36 = add i32 %35, %20"];
	Node0x58d220[shape=record, label="  %37 = add i32 %36, %22"];
	Node0x58d290[shape=record, label="  %38 = add i32 %37, %17"];
	Node0x58d300[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x58d370[shape=record, label="  %40 = add i32 %39, %27"];
	Node0x58d3e0[shape=record, label="  %41 = add i32 %40, %29"];
	Node0x58d450[shape=record, label="  %42 = icmp eq i32 %10, %41"];
	Node0x52c268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x58d8f0[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x58d940[shape=record, label="  ret void"];
	Node0x58bab0 -> Node0x58c130;
	Node0x58c130 -> Node0x58c1a0;
	Node0x58c1a0 -> Node0x58c240;
	Node0x58c240 -> Node0x58c2b0;
	Node0x58c2b0 -> Node0x58c320;
	Node0x58c320 -> Node0x58c390;
	Node0x58c390 -> Node0x58c400;
	Node0x58c400 -> Node0x58c470;
	Node0x58c470 -> Node0x58c4e0;
	Node0x58c4e0 -> Node0x58c550;
	Node0x58c550 -> Node0x58c5f0;
	Node0x58c5f0 -> Node0x58c690;
	Node0x58c690 -> Node0x58c700;
	Node0x58c700 -> Node0x58c7a0;
	Node0x58c7a0 -> Node0x58c840;
	Node0x58c840 -> Node0x58c8b0;
	Node0x58c8b0 -> Node0x58c920;
	Node0x58c920 -> Node0x58c990;
	Node0x58c990 -> Node0x58ca00;
	Node0x58ca00 -> Node0x58ca70;
	Node0x58ca70 -> Node0x58cae0;
	Node0x58cae0 -> Node0x58cb80;
	Node0x58cb80 -> Node0x58cbf0;
	Node0x58cbf0 -> Node0x58cc60;
	Node0x58cc60 -> Node0x58cd00;
	Node0x58cd00 -> Node0x58cd70;
	Node0x58cd70 -> Node0x58cde0;
	Node0x58cde0 -> Node0x58d060;
	Node0x58d060 -> Node0x58d0d0;
	Node0x58d0d0 -> Node0x58d140;
	Node0x58d140 -> Node0x58d1b0;
	Node0x58d1b0 -> Node0x58d220;
	Node0x58d220 -> Node0x58d290;
	Node0x58d290 -> Node0x58d300;
	Node0x58d300 -> Node0x58d370;
	Node0x58d370 -> Node0x58d3e0;
	Node0x58d3e0 -> Node0x58d450;
	Node0x58d450 -> Node0x52c268;
	Node0x52c268 -> Node0x58d8f0;
	Node0x58d8f0 -> Node0x58d940;
edge [color=red]
	Node0x58c130 -> Node0x58c1a0;
	Node0x58c240 -> Node0x58c2b0;
	Node0x58bab0 -> Node0x58c2b0;
	Node0x58c2b0 -> Node0x58c320;
	Node0x58c1a0 -> Node0x58c320;
	Node0x58c390 -> Node0x58c400;
	Node0x58c390 -> Node0x58c550;
	Node0x58c4e0 -> Node0x58c5f0;
	Node0x58c5f0 -> Node0x58c690;
	Node0x58c400 -> Node0x58c700;
	Node0x58c700 -> Node0x58c7a0;
	Node0x58c470 -> Node0x58c840;
	Node0x58c130 -> Node0x58c990;
	Node0x58c1a0 -> Node0x58ca00;
	Node0x58ca00 -> Node0x58ca70;
	Node0x58c550 -> Node0x58cae0;
	Node0x58c8b0 -> Node0x58cae0;
	Node0x58cae0 -> Node0x58cb80;
	Node0x58c990 -> Node0x58cbf0;
	Node0x58cbf0 -> Node0x58cc60;
	Node0x58cd00 -> Node0x58cd70;
	Node0x58c400 -> Node0x58cd70;
	Node0x58cd70 -> Node0x58cde0;
	Node0x58c470 -> Node0x58cde0;
	Node0x58cde0 -> Node0x58d060;
	Node0x58c4e0 -> Node0x58d060;
	Node0x58d060 -> Node0x58d0d0;
	Node0x58c550 -> Node0x58d0d0;
	Node0x58d0d0 -> Node0x58d140;
	Node0x58c7a0 -> Node0x58d140;
	Node0x58d140 -> Node0x58d1b0;
	Node0x58c840 -> Node0x58d1b0;
	Node0x58d1b0 -> Node0x58d220;
	Node0x58c920 -> Node0x58d220;
	Node0x58d220 -> Node0x58d290;
	Node0x58c690 -> Node0x58d290;
	Node0x58d290 -> Node0x58d300;
	Node0x58ca70 -> Node0x58d300;
	Node0x58d300 -> Node0x58d370;
	Node0x58cb80 -> Node0x58d370;
	Node0x58d370 -> Node0x58d3e0;
	Node0x58cc60 -> Node0x58d3e0;
	Node0x58c320 -> Node0x58d450;
	Node0x58d3e0 -> Node0x58d450;
	Node0x58d450 -> Node0x52c268;
	Node0x52c268 -> Node0x58d8f0;
}
