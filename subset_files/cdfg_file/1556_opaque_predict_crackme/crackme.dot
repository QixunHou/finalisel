digraph "DFG for'crackme' function" {
	Node0x190dac0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x190db30[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x190dbf0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x190dc60[shape=record, label="  %6 = add i32 %5, %3"];
	Node0x190dcd0[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x190dd40[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x190ddb0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x190de20[shape=record, label="  %10 = xor i32 %8, -1"];
	Node0x190de90[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x190df00[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0x190df70[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x190e010[shape=record, label="  %14 = shl i32 %7, 1"];
	Node0x190e080[shape=record, label="  %15 = sub i32 1, %0"];
	Node0x190e0f0[shape=record, label="  %16 = add i32 %15, %1"];
	Node0x190e160[shape=record, label="  %17 = add i32 %16, %8"];
	Node0x190e1d0[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x190e240[shape=record, label="  %19 = sub i32 %18, %13"];
	Node0x190e2b0[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x190e320[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x190e390[shape=record, label="  %22 = icmp eq i32 %6, %21"];
	Node0x18ae268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x190e830[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x190e880[shape=record, label="  ret void"];
	Node0x190dac0 -> Node0x190db30;
	Node0x190db30 -> Node0x190dbf0;
	Node0x190dbf0 -> Node0x190dc60;
	Node0x190dc60 -> Node0x190dcd0;
	Node0x190dcd0 -> Node0x190dd40;
	Node0x190dd40 -> Node0x190ddb0;
	Node0x190ddb0 -> Node0x190de20;
	Node0x190de20 -> Node0x190de90;
	Node0x190de90 -> Node0x190df00;
	Node0x190df00 -> Node0x190df70;
	Node0x190df70 -> Node0x190e010;
	Node0x190e010 -> Node0x190e080;
	Node0x190e080 -> Node0x190e0f0;
	Node0x190e0f0 -> Node0x190e160;
	Node0x190e160 -> Node0x190e1d0;
	Node0x190e1d0 -> Node0x190e240;
	Node0x190e240 -> Node0x190e2b0;
	Node0x190e2b0 -> Node0x190e320;
	Node0x190e320 -> Node0x190e390;
	Node0x190e390 -> Node0x18ae268;
	Node0x18ae268 -> Node0x190e830;
	Node0x190e830 -> Node0x190e880;
edge [color=red]
	Node0x190db30 -> Node0x190dbf0;
	Node0x190dbf0 -> Node0x190dc60;
	Node0x190dac0 -> Node0x190dc60;
	Node0x190dac0 -> Node0x190dcd0;
	Node0x190dd40 -> Node0x190de20;
	Node0x190de20 -> Node0x190de90;
	Node0x190df00 -> Node0x190df70;
	Node0x190dcd0 -> Node0x190e010;
	Node0x190e080 -> Node0x190e0f0;
	Node0x190e0f0 -> Node0x190e160;
	Node0x190dd40 -> Node0x190e160;
	Node0x190e160 -> Node0x190e1d0;
	Node0x190ddb0 -> Node0x190e1d0;
	Node0x190e1d0 -> Node0x190e240;
	Node0x190df70 -> Node0x190e240;
	Node0x190e240 -> Node0x190e2b0;
	Node0x190de90 -> Node0x190e2b0;
	Node0x190e2b0 -> Node0x190e320;
	Node0x190e010 -> Node0x190e320;
	Node0x190dc60 -> Node0x190e390;
	Node0x190e320 -> Node0x190e390;
	Node0x190e390 -> Node0x18ae268;
	Node0x18ae268 -> Node0x190e830;
}
