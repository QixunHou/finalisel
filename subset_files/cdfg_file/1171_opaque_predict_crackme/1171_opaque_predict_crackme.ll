; ModuleID = '../.././c_source_file/1171_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1171_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %1
  %8 = or i32 %7, %0
  %9 = mul i32 %8, -5
  %10 = xor i32 %3, -1
  %11 = or i32 %10, %4
  %12 = xor i32 %11, -1
  %13 = xor i32 %5, %3
  %14 = or i32 %13, %12
  %15 = add i32 %14, %9
  %16 = and i32 %5, %4
  %17 = or i32 %16, %12
  %18 = shl i32 %17, 1
  %19 = sub i32 %15, %18
  %20 = or i32 %2, %0
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %20, %22
  %24 = xor i32 %2, -1
  %25 = and i32 %24, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %22
  %28 = xor i32 %20, -1
  %29 = or i32 %28, %1
  %30 = and i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = xor i32 %2, %0
  %33 = and i32 %32, %31
  %34 = xor i32 %0, -1
  %35 = and i32 %7, %34
  %36 = xor i32 %1, -1
  %37 = or i32 %36, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %2
  %40 = xor i32 %37, %2
  %41 = shl i32 %40, 1
  %42 = and i32 %2, %1
  %43 = and i32 %42, %0
  %44 = xor i32 %35, 2147483647
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 1
  %47 = xor i32 %42, -1
  %48 = add i32 %42, 1
  %49 = or i32 %21, %2
  %50 = and i32 %32, %37
  %51 = and i32 %24, %1
  %52 = or i32 %51, %0
  %53 = shl i32 %52, 2
  %54 = or i32 %24, %0
  %55 = and i32 %54, %21
  %56 = and i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = and i32 %57, %22
  %59 = xor i32 %54, -1
  %60 = or i32 %59, %22
  %61 = or i32 %43, %35
  %62 = and i32 %7, %37
  %63 = and i32 %36, %0
  %64 = xor i32 %63, -1
  %65 = and i32 %64, %2
  %66 = xor i32 %7, -1
  %67 = xor i32 %66, %0
  %68 = xor i32 %42, %0
  %69 = or i32 %1, %0
  %70 = xor i32 %32, -1
  %71 = and i32 %69, %70
  %72 = or i32 %47, %34
  %73 = and i32 %66, %0
  %74 = or i32 %2, %1
  %75 = xor i32 %74, -1
  %76 = or i32 %75, %0
  %77 = and i32 %66, %64
  %78 = shl i32 %77, 1
  %79 = xor i32 %30, %2
  %80 = and i32 %32, %36
  %81 = or i32 %32, %63
  %82 = and i32 %24, %22
  %83 = and i32 %36, %2
  %84 = and i32 %83, %0
  %85 = or i32 %36, %2
  %86 = and i32 %85, %34
  %87 = xor i32 %84, -1
  %88 = xor i32 %86, %87
  %89 = or i32 %25, %1
  %90 = and i32 %57, %36
  %91 = shl i32 %90, 1
  %92 = and i32 %21, %70
  %93 = and i32 %54, %22
  %94 = and i32 %42, %34
  %95 = and i32 %7, %0
  %96 = xor i32 %95, -1
  %97 = xor i32 %94, %96
  %98 = add i32 %30, 1
  %99 = xor i32 %7, %34
  %100 = xor i32 %99, %84
  %101 = xor i32 %51, -1
  %102 = and i32 %101, %34
  %103 = xor i32 %69, -1
  %104 = or i32 %24, %103
  %105 = add i32 %7, 1
  %106 = or i32 %101, %0
  %107 = or i32 %63, %2
  %108 = or i32 %103, %2
  %109 = and i32 %74, %34
  %110 = or i32 %32, %38
  %111 = or i32 %7, %38
  %112 = xor i32 %63, %47
  %113 = or i32 %70, %38
  %114 = shl i32 %75, 1
  %115 = or i32 %59, %36
  %116 = and i32 %69, %66
  %117 = or i32 %83, %0
  %118 = or i32 %56, %38
  %119 = and i32 %70, %31
  %120 = shl i32 %119, 1
  %121 = or i32 %70, %103
  %122 = xor i32 %31, %2
  %123 = shl i32 %122, 1
  %124 = and i32 %57, %1
  %125 = or i32 %84, %86
  %126 = and i32 %101, %0
  %127 = shl i32 %126, 1
  %128 = and i32 %37, %2
  %129 = or i32 %43, %109
  %130 = and i32 %83, %34
  %131 = and i32 %85, %0
  %132 = or i32 %130, %131
  %133 = or i32 %21, %70
  %134 = and i32 %75, %34
  %135 = and i32 %51, %34
  %136 = mul i32 %135, -10
  %137 = and i32 %75, %0
  %138 = shl i32 %137, 1
  %139 = and i32 %51, %0
  %140 = shl i32 %94, 2
  %141 = mul i32 %43, -7
  %142 = xor i32 %5, -1
  %143 = and i32 %142, %3
  %144 = xor i32 %143, -1
  %145 = shl i32 %144, 1
  %146 = xor i32 %16, %10
  %147 = or i32 %5, %4
  %148 = xor i32 %147, -1
  %149 = xor i32 %148, %3
  %150 = and i32 %5, %3
  %151 = and i32 %150, %4
  %152 = xor i32 %4, -1
  %153 = and i32 %13, %152
  %154 = or i32 %151, %153
  %155 = xor i32 %4, %3
  %156 = xor i32 %5, %4
  %157 = xor i32 %156, -1
  %158 = or i32 %155, %157
  %159 = and i32 %10, %4
  %160 = xor i32 %159, -1
  %161 = xor i32 %13, -1
  %162 = and i32 %161, %160
  %163 = or i32 %142, %4
  %164 = xor i32 %163, -1
  %165 = xor i32 %164, %3
  %166 = and i32 %4, %3
  %167 = xor i32 %166, -1
  %168 = and i32 %161, %167
  %169 = or i32 %150, %152
  %170 = or i32 %164, %3
  %171 = or i32 %16, %3
  %172 = shl i32 %171, 1
  %173 = or i32 %159, %5
  %174 = or i32 %4, %3
  %175 = xor i32 %174, -1
  %176 = or i32 %175, %5
  %177 = shl i32 %176, 1
  %178 = xor i32 %16, %3
  %179 = and i32 %13, %167
  %180 = add i32 %166, 1
  %181 = or i32 %156, %175
  %182 = shl i32 %181, 2
  %183 = or i32 %143, %159
  %184 = shl i32 %183, 1
  %185 = and i32 %10, %5
  %186 = and i32 %185, %152
  %187 = or i32 %10, %5
  %188 = and i32 %187, %4
  %189 = xor i32 %188, -1
  %190 = xor i32 %186, %189
  %191 = xor i32 %13, %152
  %192 = or i32 %151, %191
  %193 = or i32 %150, %4
  %194 = xor i32 %147, %3
  %195 = xor i32 %144, %4
  %196 = add i32 %5, 1
  %197 = and i32 %156, %11
  %198 = or i32 %186, %188
  %199 = or i32 %12, %5
  %200 = or i32 %5, %3
  %201 = and i32 %200, %152
  %202 = xor i32 %201, -1
  %203 = xor i32 %151, %202
  %204 = and i32 %147, %155
  %205 = xor i32 %155, -1
  %206 = or i32 %205, %5
  %207 = and i32 %147, %10
  %208 = xor i32 %163, %3
  %209 = and i32 %11, %142
  %210 = or i32 %143, %152
  %211 = or i32 %148, %3
  %212 = and i32 %185, %4
  %213 = and i32 %187, %152
  %214 = or i32 %212, %213
  %215 = xor i32 %200, %4
  %216 = xor i32 %150, -1
  %217 = xor i32 %216, %4
  %218 = shl i32 %217, 1
  %219 = and i32 %155, %157
  %220 = and i32 %142, %4
  %221 = or i32 %220, %155
  %222 = or i32 %142, %175
  %223 = and i32 %11, %161
  %224 = xor i32 %16, %144
  %225 = or i32 %166, %157
  %226 = shl i32 %225, 1
  %227 = xor i32 %16, %11
  %228 = or i32 %13, %152
  %229 = and i32 %156, %174
  %230 = or i32 %156, %3
  %231 = or i32 %143, %4
  %232 = or i32 %156, %166
  %233 = and i32 %13, %160
  %234 = or i32 %144, %4
  %235 = and i32 %155, %5
  %236 = or i32 %151, %201
  %237 = shl i32 %236, 2
  %238 = and i32 %142, %167
  %239 = xor i32 %220, -1
  %240 = and i32 %239, %3
  %241 = add i32 %163, 1
  %242 = or i32 %166, %161
  %243 = or i32 %157, %10
  %244 = or i32 %156, %10
  %245 = shl i32 %244, 1
  %246 = or i32 %161, %12
  %247 = xor i32 %200, -1
  %248 = and i32 %247, %152
  %249 = and i32 %143, %152
  %250 = shl i32 %249, 1
  %251 = and i32 %247, %4
  %252 = and i32 %143, %4
  %253 = mul i32 %252, 14
  %254 = and i32 %150, %152
  %255 = mul i32 %254, 18
  %256 = mul i32 %212, 6
  %257 = mul i32 %151, 12
  %258 = add i32 %124, %130
  %259 = add i32 %258, %93
  %260 = add i32 %259, %92
  %261 = add i32 %260, %238
  %262 = add i32 %261, %216
  %263 = add i32 %262, %158
  %264 = add i32 %263, %162
  %265 = shl i32 %264, 1
  %266 = sub i32 %100, %102
  %267 = sub i32 %266, %229
  %268 = mul i32 %267, 3
  %269 = sub i32 %115, %62
  %270 = add i32 %269, %179
  %271 = mul i32 %270, 5
  %272 = or i32 %186, %251
  %273 = mul i32 %272, 9
  %274 = add i32 %248, %134
  %275 = shl i32 %274, 3
  %276 = sub i32 %1, %0
  %277 = add i32 %276, %2
  %278 = add i32 %277, %98
  %279 = add i32 %278, %39
  %280 = add i32 %279, %48
  %281 = add i32 %280, %49
  %282 = add i32 %281, %65
  %283 = sub i32 %282, %79
  %284 = sub i32 %283, %20
  %285 = add i32 %284, %32
  %286 = add i32 %285, %82
  %287 = add i32 %286, %104
  %288 = add i32 %287, %105
  %289 = sub i32 %288, %107
  %290 = add i32 %289, %108
  %291 = sub i32 %290, %128
  %292 = sub i32 %291, %23
  %293 = add i32 %292, %27
  %294 = add i32 %293, %29
  %295 = add i32 %294, %33
  %296 = sub i32 %295, %35
  %297 = sub i32 %296, %41
  %298 = add i32 %297, %50
  %299 = sub i32 %298, %55
  %300 = sub i32 %299, %58
  %301 = sub i32 %300, %60
  %302 = sub i32 %301, %67
  %303 = add i32 %302, %68
  %304 = add i32 %303, %71
  %305 = add i32 %304, %72
  %306 = add i32 %305, %73
  %307 = sub i32 %306, %76
  %308 = sub i32 %307, %80
  %309 = add i32 %308, %81
  %310 = sub i32 %309, %89
  %311 = sub i32 %310, %106
  %312 = sub i32 %311, %109
  %313 = add i32 %312, %110
  %314 = sub i32 %313, %111
  %315 = sub i32 %314, %112
  %316 = add i32 %315, %113
  %317 = sub i32 %316, %114
  %318 = add i32 %317, %116
  %319 = sub i32 %318, %117
  %320 = sub i32 %319, %118
  %321 = add i32 %320, %121
  %322 = sub i32 %321, %123
  %323 = add i32 %322, %133
  %324 = sub i32 %323, %139
  %325 = sub i32 %324, %84
  %326 = add i32 %325, %152
  %327 = add i32 %326, %53
  %328 = sub i32 %327, %61
  %329 = sub i32 %328, %78
  %330 = sub i32 %329, %88
  %331 = sub i32 %330, %91
  %332 = add i32 %331, %97
  %333 = sub i32 %332, %120
  %334 = sub i32 %333, %125
  %335 = sub i32 %334, %127
  %336 = add i32 %335, %129
  %337 = add i32 %336, %132
  %338 = add i32 %337, %136
  %339 = sub i32 %338, %138
  %340 = sub i32 %339, %140
  %341 = add i32 %340, %141
  %342 = add i32 %341, %180
  %343 = add i32 %342, %5
  %344 = add i32 %343, %196
  %345 = add i32 %344, %12
  %346 = add i32 %345, %205
  %347 = sub i32 %346, %173
  %348 = sub i32 %347, %199
  %349 = add i32 %348, %206
  %350 = sub i32 %349, %200
  %351 = add i32 %350, %209
  %352 = add i32 %351, %222
  %353 = sub i32 %352, %235
  %354 = add i32 %353, %241
  %355 = sub i32 %354, %46
  %356 = sub i32 %355, %145
  %357 = sub i32 %356, %146
  %358 = sub i32 %357, %149
  %359 = sub i32 %358, %165
  %360 = sub i32 %359, %168
  %361 = add i32 %360, %169
  %362 = add i32 %361, %170
  %363 = sub i32 %362, %177
  %364 = add i32 %363, %178
  %365 = sub i32 %364, %193
  %366 = add i32 %365, %194
  %367 = sub i32 %366, %195
  %368 = add i32 %367, %197
  %369 = add i32 %368, %204
  %370 = sub i32 %369, %207
  %371 = sub i32 %370, %208
  %372 = sub i32 %371, %210
  %373 = sub i32 %372, %211
  %374 = add i32 %373, %215
  %375 = sub i32 %374, %219
  %376 = add i32 %375, %221
  %377 = add i32 %376, %223
  %378 = add i32 %377, %224
  %379 = add i32 %378, %201
  %380 = add i32 %379, %227
  %381 = sub i32 %380, %228
  %382 = sub i32 %381, %230
  %383 = sub i32 %382, %231
  %384 = sub i32 %383, %232
  %385 = add i32 %384, %233
  %386 = sub i32 %385, %234
  %387 = add i32 %386, %240
  %388 = sub i32 %387, %242
  %389 = sub i32 %388, %243
  %390 = sub i32 %389, %246
  %391 = add i32 %390, %154
  %392 = sub i32 %391, %172
  %393 = sub i32 %392, %182
  %394 = sub i32 %393, %184
  %395 = add i32 %394, %190
  %396 = add i32 %395, %192
  %397 = add i32 %396, %198
  %398 = add i32 %397, %203
  %399 = sub i32 %398, %214
  %400 = sub i32 %399, %218
  %401 = sub i32 %400, %226
  %402 = sub i32 %401, %245
  %403 = sub i32 %402, %250
  %404 = add i32 %403, %253
  %405 = add i32 %404, %255
  %406 = add i32 %405, %256
  %407 = add i32 %406, %257
  %408 = sub i32 %407, %237
  %409 = add i32 %408, %273
  %410 = add i32 %409, %275
  %411 = add i32 %410, %268
  %412 = add i32 %411, %271
  %413 = add i32 %412, %265
  %414 = icmp eq i32 %19, %413
  %415 = select i1 %414, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %416 = tail call i32 @puts(i8* nonnull dereferenceable(1) %415)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
