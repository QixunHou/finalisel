digraph "DFG for'crackme' function" {
	Node0x679b60[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x67a1e0[shape=record, label="  %6 = add i32 %1, 1"];
	Node0x67a250[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x67a2f0[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x67a390[shape=record, label="  %9 = mul i32 %8, 3"];
	Node0x67a400[shape=record, label="  %10 = add i32 %7, %9"];
	Node0x67a470[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x67a4e0[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x67a550[shape=record, label="  %13 = add i32 %2, 1"];
	Node0x67a5c0[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0x67a630[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x67a6a0[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x67a710[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x67a7b0[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x67a820[shape=record, label="  %19 = xor i32 %0, -1"];
	Node0x67a890[shape=record, label="  %20 = and i32 %19, %3"];
	Node0x67a900[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x67a970[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x67a9e0[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x67aa50[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x67aac0[shape=record, label="  %25 = or i32 %3, %0"];
	Node0x67ab30[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x67aba0[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x67ac40[shape=record, label="  %28 = mul i32 %24, -3"];
	Node0x67acb0[shape=record, label="  %29 = add i32 %22, %12"];
	Node0x67ad20[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x67ad90[shape=record, label="  %31 = add i32 %0, 3"];
	Node0x67ae00[shape=record, label="  %32 = add i32 %31, %1"];
	Node0x67b080[shape=record, label="  %33 = add i32 %32, %13"];
	Node0x67b0f0[shape=record, label="  %34 = sub i32 %33, %12"];
	Node0x67b160[shape=record, label="  %35 = add i32 %34, %14"];
	Node0x67b1d0[shape=record, label="  %36 = sub i32 %35, %15"];
	Node0x67b240[shape=record, label="  %37 = add i32 %36, %17"];
	Node0x67b2b0[shape=record, label="  %38 = add i32 %37, %21"];
	Node0x67b320[shape=record, label="  %39 = add i32 %38, %23"];
	Node0x67b390[shape=record, label="  %40 = add i32 %39, %24"];
	Node0x67b400[shape=record, label="  %41 = sub i32 %40, %20"];
	Node0x67b470[shape=record, label="  %42 = add i32 %41, %18"];
	Node0x67b4e0[shape=record, label="  %43 = add i32 %42, %28"];
	Node0x67b550[shape=record, label="  %44 = add i32 %43, %27"];
	Node0x67b5c0[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x67b630[shape=record, label="  %46 = icmp eq i32 %10, %45"];
	Node0x61a268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x67bad0[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x67bb20[shape=record, label="  ret void"];
	Node0x679b60 -> Node0x67a1e0;
	Node0x67a1e0 -> Node0x67a250;
	Node0x67a250 -> Node0x67a2f0;
	Node0x67a2f0 -> Node0x67a390;
	Node0x67a390 -> Node0x67a400;
	Node0x67a400 -> Node0x67a470;
	Node0x67a470 -> Node0x67a4e0;
	Node0x67a4e0 -> Node0x67a550;
	Node0x67a550 -> Node0x67a5c0;
	Node0x67a5c0 -> Node0x67a630;
	Node0x67a630 -> Node0x67a6a0;
	Node0x67a6a0 -> Node0x67a710;
	Node0x67a710 -> Node0x67a7b0;
	Node0x67a7b0 -> Node0x67a820;
	Node0x67a820 -> Node0x67a890;
	Node0x67a890 -> Node0x67a900;
	Node0x67a900 -> Node0x67a970;
	Node0x67a970 -> Node0x67a9e0;
	Node0x67a9e0 -> Node0x67aa50;
	Node0x67aa50 -> Node0x67aac0;
	Node0x67aac0 -> Node0x67ab30;
	Node0x67ab30 -> Node0x67aba0;
	Node0x67aba0 -> Node0x67ac40;
	Node0x67ac40 -> Node0x67acb0;
	Node0x67acb0 -> Node0x67ad20;
	Node0x67ad20 -> Node0x67ad90;
	Node0x67ad90 -> Node0x67ae00;
	Node0x67ae00 -> Node0x67b080;
	Node0x67b080 -> Node0x67b0f0;
	Node0x67b0f0 -> Node0x67b160;
	Node0x67b160 -> Node0x67b1d0;
	Node0x67b1d0 -> Node0x67b240;
	Node0x67b240 -> Node0x67b2b0;
	Node0x67b2b0 -> Node0x67b320;
	Node0x67b320 -> Node0x67b390;
	Node0x67b390 -> Node0x67b400;
	Node0x67b400 -> Node0x67b470;
	Node0x67b470 -> Node0x67b4e0;
	Node0x67b4e0 -> Node0x67b550;
	Node0x67b550 -> Node0x67b5c0;
	Node0x67b5c0 -> Node0x67b630;
	Node0x67b630 -> Node0x61a268;
	Node0x61a268 -> Node0x67bad0;
	Node0x67bad0 -> Node0x67bb20;
edge [color=red]
	Node0x67a1e0 -> Node0x67a250;
	Node0x679b60 -> Node0x67a250;
	Node0x67a2f0 -> Node0x67a390;
	Node0x67a250 -> Node0x67a400;
	Node0x67a390 -> Node0x67a400;
	Node0x67a470 -> Node0x67a4e0;
	Node0x67a5c0 -> Node0x67a630;
	Node0x67a6a0 -> Node0x67a710;
	Node0x67a710 -> Node0x67a7b0;
	Node0x67a820 -> Node0x67a890;
	Node0x67a890 -> Node0x67a900;
	Node0x67a970 -> Node0x67a9e0;
	Node0x67aac0 -> Node0x67ab30;
	Node0x67ab30 -> Node0x67aba0;
	Node0x67aa50 -> Node0x67ac40;
	Node0x67a970 -> Node0x67acb0;
	Node0x67a4e0 -> Node0x67acb0;
	Node0x67acb0 -> Node0x67ad20;
	Node0x67ad90 -> Node0x67ae00;
	Node0x67ae00 -> Node0x67b080;
	Node0x67a550 -> Node0x67b080;
	Node0x67b080 -> Node0x67b0f0;
	Node0x67a4e0 -> Node0x67b0f0;
	Node0x67b0f0 -> Node0x67b160;
	Node0x67a5c0 -> Node0x67b160;
	Node0x67b160 -> Node0x67b1d0;
	Node0x67a630 -> Node0x67b1d0;
	Node0x67b1d0 -> Node0x67b240;
	Node0x67a710 -> Node0x67b240;
	Node0x67b240 -> Node0x67b2b0;
	Node0x67a900 -> Node0x67b2b0;
	Node0x67b2b0 -> Node0x67b320;
	Node0x67a9e0 -> Node0x67b320;
	Node0x67b320 -> Node0x67b390;
	Node0x67aa50 -> Node0x67b390;
	Node0x67b390 -> Node0x67b400;
	Node0x67a890 -> Node0x67b400;
	Node0x67b400 -> Node0x67b470;
	Node0x67a7b0 -> Node0x67b470;
	Node0x67b470 -> Node0x67b4e0;
	Node0x67ac40 -> Node0x67b4e0;
	Node0x67b4e0 -> Node0x67b550;
	Node0x67aba0 -> Node0x67b550;
	Node0x67b550 -> Node0x67b5c0;
	Node0x67ad20 -> Node0x67b5c0;
	Node0x67a400 -> Node0x67b630;
	Node0x67b5c0 -> Node0x67b630;
	Node0x67b630 -> Node0x61a268;
	Node0x61a268 -> Node0x67bad0;
}
