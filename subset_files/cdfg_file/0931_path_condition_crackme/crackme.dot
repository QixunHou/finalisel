digraph "DFG for'crackme' function" {
	Node0x11b4a80[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x11b4af0[shape=record, label="  %6 = and i32 %2, %1"];
	Node0x11b5170[shape=record, label="  %7 = add i32 %5, 1"];
	Node0x11b51e0[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x11b5280[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x11b52f0[shape=record, label="  %10 = or i32 %9, %3"];
	Node0x11b5360[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x11b53d0[shape=record, label="  %12 = sub i32 %8, %11"];
	Node0x11b5440[shape=record, label="  %13 = xor i32 %1, -1"];
	Node0x11b54e0[shape=record, label="  %14 = mul i32 %13, 5"];
	Node0x11b5550[shape=record, label="  %15 = xor i32 %2, -1"];
	Node0x11b55c0[shape=record, label="  %16 = or i32 %15, %1"];
	Node0x11b5630[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x11b56a0[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x11b5740[shape=record, label="  %19 = mul i32 %18, -7"];
	Node0x11b57e0[shape=record, label="  %20 = shl i32 %16, 3"];
	Node0x11b5880[shape=record, label="  %21 = xor i32 %20, -8"];
	Node0x11b58f0[shape=record, label="  %22 = and i32 %15, %1"];
	Node0x11b5960[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x11b59d0[shape=record, label="  %24 = shl i32 %6, 1"];
	Node0x11b5a40[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x11b5ab0[shape=record, label="  %26 = and i32 %9, %3"];
	Node0x11b5b20[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x11b5b90[shape=record, label="  %28 = and i32 %3, %0"];
	Node0x11b5c00[shape=record, label="  %29 = xor i32 %16, -1"];
	Node0x11b5c70[shape=record, label="  %30 = add i32 %14, %29"];
	Node0x11b5ce0[shape=record, label="  %31 = add i32 %30, %17"];
	Node0x11b5d50[shape=record, label="  %32 = add i32 %31, %3"];
	Node0x11b5fd0[shape=record, label="  %33 = add i32 %32, %19"];
	Node0x11b6040[shape=record, label="  %34 = sub i32 %33, %23"];
	Node0x11b60b0[shape=record, label="  %35 = sub i32 %34, %24"];
	Node0x11b6120[shape=record, label="  %36 = add i32 %35, %25"];
	Node0x11b6190[shape=record, label="  %37 = sub i32 %36, %10"];
	Node0x11b6200[shape=record, label="  %38 = sub i32 %37, %28"];
	Node0x11b6270[shape=record, label="  %39 = sub i32 %38, %21"];
	Node0x11b62e0[shape=record, label="  %40 = sub i32 %39, %27"];
	Node0x11b6350[shape=record, label="  %41 = icmp eq i32 %12, %40"];
	Node0x1155268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x11b67f0[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0x11b6840[shape=record, label="  ret void"];
	Node0x11b4a80 -> Node0x11b4af0;
	Node0x11b4af0 -> Node0x11b5170;
	Node0x11b5170 -> Node0x11b51e0;
	Node0x11b51e0 -> Node0x11b5280;
	Node0x11b5280 -> Node0x11b52f0;
	Node0x11b52f0 -> Node0x11b5360;
	Node0x11b5360 -> Node0x11b53d0;
	Node0x11b53d0 -> Node0x11b5440;
	Node0x11b5440 -> Node0x11b54e0;
	Node0x11b54e0 -> Node0x11b5550;
	Node0x11b5550 -> Node0x11b55c0;
	Node0x11b55c0 -> Node0x11b5630;
	Node0x11b5630 -> Node0x11b56a0;
	Node0x11b56a0 -> Node0x11b5740;
	Node0x11b5740 -> Node0x11b57e0;
	Node0x11b57e0 -> Node0x11b5880;
	Node0x11b5880 -> Node0x11b58f0;
	Node0x11b58f0 -> Node0x11b5960;
	Node0x11b5960 -> Node0x11b59d0;
	Node0x11b59d0 -> Node0x11b5a40;
	Node0x11b5a40 -> Node0x11b5ab0;
	Node0x11b5ab0 -> Node0x11b5b20;
	Node0x11b5b20 -> Node0x11b5b90;
	Node0x11b5b90 -> Node0x11b5c00;
	Node0x11b5c00 -> Node0x11b5c70;
	Node0x11b5c70 -> Node0x11b5ce0;
	Node0x11b5ce0 -> Node0x11b5d50;
	Node0x11b5d50 -> Node0x11b5fd0;
	Node0x11b5fd0 -> Node0x11b6040;
	Node0x11b6040 -> Node0x11b60b0;
	Node0x11b60b0 -> Node0x11b6120;
	Node0x11b6120 -> Node0x11b6190;
	Node0x11b6190 -> Node0x11b6200;
	Node0x11b6200 -> Node0x11b6270;
	Node0x11b6270 -> Node0x11b62e0;
	Node0x11b62e0 -> Node0x11b6350;
	Node0x11b6350 -> Node0x1155268;
	Node0x1155268 -> Node0x11b67f0;
	Node0x11b67f0 -> Node0x11b6840;
edge [color=red]
	Node0x11b4a80 -> Node0x11b5170;
	Node0x11b5170 -> Node0x11b51e0;
	Node0x11b4af0 -> Node0x11b51e0;
	Node0x11b5280 -> Node0x11b52f0;
	Node0x11b52f0 -> Node0x11b5360;
	Node0x11b51e0 -> Node0x11b53d0;
	Node0x11b5360 -> Node0x11b53d0;
	Node0x11b5440 -> Node0x11b54e0;
	Node0x11b5550 -> Node0x11b55c0;
	Node0x11b5630 -> Node0x11b56a0;
	Node0x11b56a0 -> Node0x11b5740;
	Node0x11b55c0 -> Node0x11b57e0;
	Node0x11b57e0 -> Node0x11b5880;
	Node0x11b5550 -> Node0x11b58f0;
	Node0x11b58f0 -> Node0x11b5960;
	Node0x11b4af0 -> Node0x11b59d0;
	Node0x11b5280 -> Node0x11b5ab0;
	Node0x11b5ab0 -> Node0x11b5b20;
	Node0x11b55c0 -> Node0x11b5c00;
	Node0x11b54e0 -> Node0x11b5c70;
	Node0x11b5c00 -> Node0x11b5c70;
	Node0x11b5c70 -> Node0x11b5ce0;
	Node0x11b5630 -> Node0x11b5ce0;
	Node0x11b5ce0 -> Node0x11b5d50;
	Node0x11b5d50 -> Node0x11b5fd0;
	Node0x11b5740 -> Node0x11b5fd0;
	Node0x11b5fd0 -> Node0x11b6040;
	Node0x11b5960 -> Node0x11b6040;
	Node0x11b6040 -> Node0x11b60b0;
	Node0x11b59d0 -> Node0x11b60b0;
	Node0x11b60b0 -> Node0x11b6120;
	Node0x11b5a40 -> Node0x11b6120;
	Node0x11b6120 -> Node0x11b6190;
	Node0x11b52f0 -> Node0x11b6190;
	Node0x11b6190 -> Node0x11b6200;
	Node0x11b5b90 -> Node0x11b6200;
	Node0x11b6200 -> Node0x11b6270;
	Node0x11b5880 -> Node0x11b6270;
	Node0x11b6270 -> Node0x11b62e0;
	Node0x11b5b20 -> Node0x11b62e0;
	Node0x11b53d0 -> Node0x11b6350;
	Node0x11b62e0 -> Node0x11b6350;
	Node0x11b6350 -> Node0x1155268;
	Node0x1155268 -> Node0x11b67f0;
}
