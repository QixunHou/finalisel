digraph "DFG for'crackme' function" {
	Node0x7230c0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x723130[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x7231a0[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x723240[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0x7232e0[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0x723350[shape=record, label="  %10 = add i32 %6, %3"];
	Node0x7233c0[shape=record, label="  %11 = add i32 %10, %9"];
	Node0x723460[shape=record, label="  %12 = sub i32 0, %11"];
	Node0x7234d0[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x723540[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x7235b0[shape=record, label="  %15 = xor i32 %5, %1"];
	Node0x723620[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x7236c0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x723760[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x7237d0[shape=record, label="  %19 = shl i32 %3, 1"];
	Node0x723840[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x7238b0[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x723920[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x723990[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x723a00[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x723a70[shape=record, label="  %25 = xor i32 %0, -1"];
	Node0x723ae0[shape=record, label="  %26 = xor i32 %3, -1"];
	Node0x723b50[shape=record, label="  %27 = and i32 %26, %0"];
	Node0x723bf0[shape=record, label="  %28 = mul i32 %27, -6"];
	Node0x723c60[shape=record, label="  %29 = and i32 %25, %3"];
	Node0x723cd0[shape=record, label="  %30 = add i32 %29, %24"];
	Node0x723d70[shape=record, label="  %31 = mul i32 %30, -5"];
	Node0x723de0[shape=record, label="  %32 = sub i32 2, %1"];
	Node0x724060[shape=record, label="  %33 = add i32 %32, %14"];
	Node0x7240d0[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x724140[shape=record, label="  %35 = sub i32 %34, %23"];
	Node0x7241b0[shape=record, label="  %36 = add i32 %35, %7"];
	Node0x724220[shape=record, label="  %37 = sub i32 %36, %18"];
	Node0x724290[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x724300[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x724370[shape=record, label="  %40 = add i32 %39, %28"];
	Node0x7243e0[shape=record, label="  %41 = add i32 %40, %31"];
	Node0x724450[shape=record, label="  %42 = icmp eq i32 %41, %12"];
	Node0x6c3268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7248f0[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x724940[shape=record, label="  ret void"];
	Node0x7230c0 -> Node0x723130;
	Node0x723130 -> Node0x7231a0;
	Node0x7231a0 -> Node0x723240;
	Node0x723240 -> Node0x7232e0;
	Node0x7232e0 -> Node0x723350;
	Node0x723350 -> Node0x7233c0;
	Node0x7233c0 -> Node0x723460;
	Node0x723460 -> Node0x7234d0;
	Node0x7234d0 -> Node0x723540;
	Node0x723540 -> Node0x7235b0;
	Node0x7235b0 -> Node0x723620;
	Node0x723620 -> Node0x7236c0;
	Node0x7236c0 -> Node0x723760;
	Node0x723760 -> Node0x7237d0;
	Node0x7237d0 -> Node0x723840;
	Node0x723840 -> Node0x7238b0;
	Node0x7238b0 -> Node0x723920;
	Node0x723920 -> Node0x723990;
	Node0x723990 -> Node0x723a00;
	Node0x723a00 -> Node0x723a70;
	Node0x723a70 -> Node0x723ae0;
	Node0x723ae0 -> Node0x723b50;
	Node0x723b50 -> Node0x723bf0;
	Node0x723bf0 -> Node0x723c60;
	Node0x723c60 -> Node0x723cd0;
	Node0x723cd0 -> Node0x723d70;
	Node0x723d70 -> Node0x723de0;
	Node0x723de0 -> Node0x724060;
	Node0x724060 -> Node0x7240d0;
	Node0x7240d0 -> Node0x724140;
	Node0x724140 -> Node0x7241b0;
	Node0x7241b0 -> Node0x724220;
	Node0x724220 -> Node0x724290;
	Node0x724290 -> Node0x724300;
	Node0x724300 -> Node0x724370;
	Node0x724370 -> Node0x7243e0;
	Node0x7243e0 -> Node0x724450;
	Node0x724450 -> Node0x6c3268;
	Node0x6c3268 -> Node0x7248f0;
	Node0x7248f0 -> Node0x724940;
edge [color=red]
	Node0x7230c0 -> Node0x723130;
	Node0x7231a0 -> Node0x723240;
	Node0x723240 -> Node0x7232e0;
	Node0x723130 -> Node0x723350;
	Node0x723350 -> Node0x7233c0;
	Node0x7232e0 -> Node0x7233c0;
	Node0x7233c0 -> Node0x723460;
	Node0x7234d0 -> Node0x723540;
	Node0x7230c0 -> Node0x7235b0;
	Node0x723620 -> Node0x7236c0;
	Node0x7236c0 -> Node0x723760;
	Node0x7237d0 -> Node0x723840;
	Node0x7238b0 -> Node0x723920;
	Node0x723990 -> Node0x723a00;
	Node0x723ae0 -> Node0x723b50;
	Node0x723b50 -> Node0x723bf0;
	Node0x723a70 -> Node0x723c60;
	Node0x723c60 -> Node0x723cd0;
	Node0x723a00 -> Node0x723cd0;
	Node0x723cd0 -> Node0x723d70;
	Node0x723de0 -> Node0x724060;
	Node0x723540 -> Node0x724060;
	Node0x724060 -> Node0x7240d0;
	Node0x7235b0 -> Node0x7240d0;
	Node0x7240d0 -> Node0x724140;
	Node0x723990 -> Node0x724140;
	Node0x724140 -> Node0x7241b0;
	Node0x7231a0 -> Node0x7241b0;
	Node0x7241b0 -> Node0x724220;
	Node0x723760 -> Node0x724220;
	Node0x724220 -> Node0x724290;
	Node0x723840 -> Node0x724290;
	Node0x724290 -> Node0x724300;
	Node0x723920 -> Node0x724300;
	Node0x724300 -> Node0x724370;
	Node0x723bf0 -> Node0x724370;
	Node0x724370 -> Node0x7243e0;
	Node0x723d70 -> Node0x7243e0;
	Node0x7243e0 -> Node0x724450;
	Node0x723460 -> Node0x724450;
	Node0x724450 -> Node0x6c3268;
	Node0x6c3268 -> Node0x7248f0;
}
