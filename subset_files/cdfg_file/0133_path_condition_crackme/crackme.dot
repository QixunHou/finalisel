digraph "DFG for'crackme' function" {
	Node0x12c9b80[shape=record, label="  %3 = shl i32 %1, 1"];
	Node0x12c9bf0[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x12c9cb0[shape=record, label="  %5 = add i32 %3, %4"];
	Node0x12c9d20[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x12c9d90[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x12c9e00[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x12c9e70[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x12c9f10[shape=record, label="  %10 = mul i32 %9, 5"];
	Node0x12c9f80[shape=record, label="  %11 = and i32 %9, %0"];
	Node0x12c9ff0[shape=record, label="  %12 = xor i32 %4, -1"];
	Node0x12ca090[shape=record, label="  %13 = mul i32 %12, -7"];
	Node0x12ca130[shape=record, label="  %14 = xor i32 %0, 2147483647"];
	Node0x12ca1a0[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x12ca240[shape=record, label="  %16 = mul i32 %11, -6"];
	Node0x12ca2b0[shape=record, label="  %17 = add i32 %7, %15"];
	Node0x12ca320[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x12ca390[shape=record, label="  %19 = xor i32 %6, -1"];
	Node0x12ca400[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x12ca470[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x12ca4e0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x12ca550[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x12ca5c0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x12ca630[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x12ca6a0[shape=record, label="  %26 = icmp eq i32 %5, %25"];
	Node0x126a268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x12cab40[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x12cab90[shape=record, label="  ret void"];
	Node0x12c9b80 -> Node0x12c9bf0;
	Node0x12c9bf0 -> Node0x12c9cb0;
	Node0x12c9cb0 -> Node0x12c9d20;
	Node0x12c9d20 -> Node0x12c9d90;
	Node0x12c9d90 -> Node0x12c9e00;
	Node0x12c9e00 -> Node0x12c9e70;
	Node0x12c9e70 -> Node0x12c9f10;
	Node0x12c9f10 -> Node0x12c9f80;
	Node0x12c9f80 -> Node0x12c9ff0;
	Node0x12c9ff0 -> Node0x12ca090;
	Node0x12ca090 -> Node0x12ca130;
	Node0x12ca130 -> Node0x12ca1a0;
	Node0x12ca1a0 -> Node0x12ca240;
	Node0x12ca240 -> Node0x12ca2b0;
	Node0x12ca2b0 -> Node0x12ca320;
	Node0x12ca320 -> Node0x12ca390;
	Node0x12ca390 -> Node0x12ca400;
	Node0x12ca400 -> Node0x12ca470;
	Node0x12ca470 -> Node0x12ca4e0;
	Node0x12ca4e0 -> Node0x12ca550;
	Node0x12ca550 -> Node0x12ca5c0;
	Node0x12ca5c0 -> Node0x12ca630;
	Node0x12ca630 -> Node0x12ca6a0;
	Node0x12ca6a0 -> Node0x126a268;
	Node0x126a268 -> Node0x12cab40;
	Node0x12cab40 -> Node0x12cab90;
edge [color=red]
	Node0x12c9b80 -> Node0x12c9cb0;
	Node0x12c9bf0 -> Node0x12c9cb0;
	Node0x12c9d90 -> Node0x12c9e00;
	Node0x12c9e70 -> Node0x12c9f10;
	Node0x12c9e70 -> Node0x12c9f80;
	Node0x12c9bf0 -> Node0x12c9ff0;
	Node0x12c9ff0 -> Node0x12ca090;
	Node0x12ca130 -> Node0x12ca1a0;
	Node0x12c9f80 -> Node0x12ca240;
	Node0x12c9d90 -> Node0x12ca2b0;
	Node0x12ca1a0 -> Node0x12ca2b0;
	Node0x12ca2b0 -> Node0x12ca320;
	Node0x12c9d20 -> Node0x12ca390;
	Node0x12ca390 -> Node0x12ca400;
	Node0x12c9e00 -> Node0x12ca400;
	Node0x12ca400 -> Node0x12ca470;
	Node0x12c9f10 -> Node0x12ca470;
	Node0x12ca470 -> Node0x12ca4e0;
	Node0x12c9f80 -> Node0x12ca4e0;
	Node0x12ca4e0 -> Node0x12ca550;
	Node0x12ca090 -> Node0x12ca550;
	Node0x12ca550 -> Node0x12ca5c0;
	Node0x12ca240 -> Node0x12ca5c0;
	Node0x12ca5c0 -> Node0x12ca630;
	Node0x12ca320 -> Node0x12ca630;
	Node0x12c9cb0 -> Node0x12ca6a0;
	Node0x12ca630 -> Node0x12ca6a0;
	Node0x12ca6a0 -> Node0x126a268;
	Node0x126a268 -> Node0x12cab40;
}
