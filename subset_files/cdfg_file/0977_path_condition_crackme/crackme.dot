digraph "DFG for'crackme' function" {
	Node0x19d2450[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x19d2b00[shape=record, label="  %4 = mul i32 %1, -2"];
	Node0x19d2bc0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x19d2c30[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x19d2ca0[shape=record, label="  %7 = or i32 %5, %0"];
	Node0x19d2d40[shape=record, label="  %8 = shl i32 %6, 2"];
	Node0x19d2de0[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0x19d2e50[shape=record, label="  %10 = and i32 %5, %0"];
	Node0x19d2ef0[shape=record, label="  %11 = mul i32 %10, -3"];
	Node0x19d2f60[shape=record, label="  %12 = and i32 %1, %0"];
	Node0x19d2fd0[shape=record, label="  %13 = sub i32 -2, %0"];
	Node0x19d3040[shape=record, label="  %14 = add i32 %13, %5"];
	Node0x19d30b0[shape=record, label="  %15 = add i32 %14, %4"];
	Node0x19d3120[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x19d3190[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x19d3200[shape=record, label="  %18 = sub i32 %17, %12"];
	Node0x19d3270[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x19d32e0[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0x19d3350[shape=record, label="  %21 = icmp eq i32 %3, %20"];
	Node0x1973268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x19d37f0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x19d3840[shape=record, label="  ret void"];
	Node0x19d2450 -> Node0x19d2b00;
	Node0x19d2b00 -> Node0x19d2bc0;
	Node0x19d2bc0 -> Node0x19d2c30;
	Node0x19d2c30 -> Node0x19d2ca0;
	Node0x19d2ca0 -> Node0x19d2d40;
	Node0x19d2d40 -> Node0x19d2de0;
	Node0x19d2de0 -> Node0x19d2e50;
	Node0x19d2e50 -> Node0x19d2ef0;
	Node0x19d2ef0 -> Node0x19d2f60;
	Node0x19d2f60 -> Node0x19d2fd0;
	Node0x19d2fd0 -> Node0x19d3040;
	Node0x19d3040 -> Node0x19d30b0;
	Node0x19d30b0 -> Node0x19d3120;
	Node0x19d3120 -> Node0x19d3190;
	Node0x19d3190 -> Node0x19d3200;
	Node0x19d3200 -> Node0x19d3270;
	Node0x19d3270 -> Node0x19d32e0;
	Node0x19d32e0 -> Node0x19d3350;
	Node0x19d3350 -> Node0x1973268;
	Node0x1973268 -> Node0x19d37f0;
	Node0x19d37f0 -> Node0x19d3840;
edge [color=red]
	Node0x19d2bc0 -> Node0x19d2ca0;
	Node0x19d2c30 -> Node0x19d2d40;
	Node0x19d2d40 -> Node0x19d2de0;
	Node0x19d2bc0 -> Node0x19d2e50;
	Node0x19d2e50 -> Node0x19d2ef0;
	Node0x19d2fd0 -> Node0x19d3040;
	Node0x19d2bc0 -> Node0x19d3040;
	Node0x19d3040 -> Node0x19d30b0;
	Node0x19d2b00 -> Node0x19d30b0;
	Node0x19d30b0 -> Node0x19d3120;
	Node0x19d2c30 -> Node0x19d3120;
	Node0x19d3120 -> Node0x19d3190;
	Node0x19d2ca0 -> Node0x19d3190;
	Node0x19d3190 -> Node0x19d3200;
	Node0x19d2f60 -> Node0x19d3200;
	Node0x19d3200 -> Node0x19d3270;
	Node0x19d2ef0 -> Node0x19d3270;
	Node0x19d3270 -> Node0x19d32e0;
	Node0x19d2de0 -> Node0x19d32e0;
	Node0x19d2450 -> Node0x19d3350;
	Node0x19d32e0 -> Node0x19d3350;
	Node0x19d3350 -> Node0x1973268;
	Node0x1973268 -> Node0x19d37f0;
}
