digraph "DFG for'crackme' function" {
	Node0xc56c20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xc56cc0[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0xc56d80[shape=record, label="  %5 = add i32 %4, %0"];
	Node0xc56df0[shape=record, label="  %6 = sub i32 0, %5"];
	Node0xc56e60[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0xc56ed0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xc56f40[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0xc56fb0[shape=record, label="  %10 = shl i32 %7, 1"];
	Node0xc57050[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0xc570c0[shape=record, label="  %12 = or i32 %1, %0"];
	Node0xc57130[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0xc571d0[shape=record, label="  %14 = xor i32 %0, 2147483647"];
	Node0xc57240[shape=record, label="  %15 = and i32 %14, %1"];
	Node0xc572b0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0xc57320[shape=record, label="  %17 = and i32 %3, %0"];
	Node0xc573c0[shape=record, label="  %18 = mul i32 %8, -6"];
	Node0xc57430[shape=record, label="  %19 = add i32 %17, %13"];
	Node0xc574d0[shape=record, label="  %20 = mul i32 %19, -5"];
	Node0xc57540[shape=record, label="  %21 = add i32 %1, %0"];
	Node0xc575b0[shape=record, label="  %22 = sub i32 %21, %7"];
	Node0xc57620[shape=record, label="  %23 = add i32 %22, %9"];
	Node0xc57690[shape=record, label="  %24 = add i32 %23, %12"];
	Node0xc57700[shape=record, label="  %25 = sub i32 %24, %16"];
	Node0xc57770[shape=record, label="  %26 = add i32 %25, %18"];
	Node0xc577e0[shape=record, label="  %27 = add i32 %26, %11"];
	Node0xc57850[shape=record, label="  %28 = add i32 %27, %20"];
	Node0xc578c0[shape=record, label="  %29 = icmp eq i32 %28, %6"];
	Node0xbf7268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc57d60[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0xc57db0[shape=record, label="  ret void"];
	Node0xc56c20 -> Node0xc56cc0;
	Node0xc56cc0 -> Node0xc56d80;
	Node0xc56d80 -> Node0xc56df0;
	Node0xc56df0 -> Node0xc56e60;
	Node0xc56e60 -> Node0xc56ed0;
	Node0xc56ed0 -> Node0xc56f40;
	Node0xc56f40 -> Node0xc56fb0;
	Node0xc56fb0 -> Node0xc57050;
	Node0xc57050 -> Node0xc570c0;
	Node0xc570c0 -> Node0xc57130;
	Node0xc57130 -> Node0xc571d0;
	Node0xc571d0 -> Node0xc57240;
	Node0xc57240 -> Node0xc572b0;
	Node0xc572b0 -> Node0xc57320;
	Node0xc57320 -> Node0xc573c0;
	Node0xc573c0 -> Node0xc57430;
	Node0xc57430 -> Node0xc574d0;
	Node0xc574d0 -> Node0xc57540;
	Node0xc57540 -> Node0xc575b0;
	Node0xc575b0 -> Node0xc57620;
	Node0xc57620 -> Node0xc57690;
	Node0xc57690 -> Node0xc57700;
	Node0xc57700 -> Node0xc57770;
	Node0xc57770 -> Node0xc577e0;
	Node0xc577e0 -> Node0xc57850;
	Node0xc57850 -> Node0xc578c0;
	Node0xc578c0 -> Node0xbf7268;
	Node0xbf7268 -> Node0xc57d60;
	Node0xc57d60 -> Node0xc57db0;
edge [color=red]
	Node0xc56c20 -> Node0xc56cc0;
	Node0xc56cc0 -> Node0xc56d80;
	Node0xc56d80 -> Node0xc56df0;
	Node0xc56ed0 -> Node0xc56f40;
	Node0xc56e60 -> Node0xc56fb0;
	Node0xc56fb0 -> Node0xc57050;
	Node0xc570c0 -> Node0xc57130;
	Node0xc571d0 -> Node0xc57240;
	Node0xc57240 -> Node0xc572b0;
	Node0xc56c20 -> Node0xc57320;
	Node0xc56ed0 -> Node0xc573c0;
	Node0xc57320 -> Node0xc57430;
	Node0xc57130 -> Node0xc57430;
	Node0xc57430 -> Node0xc574d0;
	Node0xc57540 -> Node0xc575b0;
	Node0xc56e60 -> Node0xc575b0;
	Node0xc575b0 -> Node0xc57620;
	Node0xc56f40 -> Node0xc57620;
	Node0xc57620 -> Node0xc57690;
	Node0xc570c0 -> Node0xc57690;
	Node0xc57690 -> Node0xc57700;
	Node0xc572b0 -> Node0xc57700;
	Node0xc57700 -> Node0xc57770;
	Node0xc573c0 -> Node0xc57770;
	Node0xc57770 -> Node0xc577e0;
	Node0xc57050 -> Node0xc577e0;
	Node0xc577e0 -> Node0xc57850;
	Node0xc574d0 -> Node0xc57850;
	Node0xc57850 -> Node0xc578c0;
	Node0xc56df0 -> Node0xc578c0;
	Node0xc578c0 -> Node0xbf7268;
	Node0xbf7268 -> Node0xc57d60;
}
