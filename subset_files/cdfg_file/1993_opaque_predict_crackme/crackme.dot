digraph "DFG for'crackme' function" {
	Node0x18abb10[shape=record, label="  %5 = and i32 %3, %0"];
	Node0x18abb80[shape=record, label="  %6 = xor i32 %2, %1"];
	Node0x18ac200[shape=record, label="  %7 = xor i32 %2, -1"];
	Node0x18ac270[shape=record, label="  %8 = and i32 %2, %1"];
	Node0x18ac2e0[shape=record, label="  %9 = and i32 %7, %1"];
	Node0x18ac350[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x18ac3f0[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0x18ac490[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x18ac500[shape=record, label="  %13 = xor i32 %1, -1"];
	Node0x18ac570[shape=record, label="  %14 = and i32 %13, %2"];
	Node0x18ac5e0[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x18ac650[shape=record, label="  %16 = and i32 %15, %3"];
	Node0x18ac6f0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x18ac790[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x18ac800[shape=record, label="  %19 = or i32 %15, %3"];
	Node0x18ac870[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x18ac8e0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x18ac950[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x18ac9c0[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x18aca30[shape=record, label="  %24 = add i32 %19, 1"];
	Node0x18acaa0[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x18acb10[shape=record, label="  %26 = sub i32 %25, %16"];
	Node0x18acbb0[shape=record, label="  %27 = mul i32 %26, 3"];
	Node0x18acc20[shape=record, label="  %28 = shl i32 %1, 2"];
	Node0x18acc90[shape=record, label="  %29 = add i32 %6, %3"];
	Node0x18acd00[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x18acd70[shape=record, label="  %31 = sub i32 3, %0"];
	Node0x18acde0[shape=record, label="  %32 = add i32 %31, %8"];
	Node0x18ad060[shape=record, label="  %33 = sub i32 %32, %9"];
	Node0x18ad0d0[shape=record, label="  %34 = sub i32 %33, %10"];
	Node0x18ad140[shape=record, label="  %35 = sub i32 %34, %19"];
	Node0x18ad1b0[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x18ad220[shape=record, label="  %37 = sub i32 %36, %5"];
	Node0x18ad290[shape=record, label="  %38 = add i32 %37, %12"];
	Node0x18ad300[shape=record, label="  %39 = add i32 %38, %28"];
	Node0x18ad370[shape=record, label="  %40 = add i32 %39, %30"];
	Node0x18ad3e0[shape=record, label="  %41 = add i32 %40, %18"];
	Node0x18ad450[shape=record, label="  %42 = sub i32 %41, %22"];
	Node0x18ad4c0[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x18ad530[shape=record, label="  %44 = icmp eq i32 %5, %43"];
	Node0x184c268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18ad9d0[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x18ada20[shape=record, label="  ret void"];
	Node0x18abb10 -> Node0x18abb80;
	Node0x18abb80 -> Node0x18ac200;
	Node0x18ac200 -> Node0x18ac270;
	Node0x18ac270 -> Node0x18ac2e0;
	Node0x18ac2e0 -> Node0x18ac350;
	Node0x18ac350 -> Node0x18ac3f0;
	Node0x18ac3f0 -> Node0x18ac490;
	Node0x18ac490 -> Node0x18ac500;
	Node0x18ac500 -> Node0x18ac570;
	Node0x18ac570 -> Node0x18ac5e0;
	Node0x18ac5e0 -> Node0x18ac650;
	Node0x18ac650 -> Node0x18ac6f0;
	Node0x18ac6f0 -> Node0x18ac790;
	Node0x18ac790 -> Node0x18ac800;
	Node0x18ac800 -> Node0x18ac870;
	Node0x18ac870 -> Node0x18ac8e0;
	Node0x18ac8e0 -> Node0x18ac950;
	Node0x18ac950 -> Node0x18ac9c0;
	Node0x18ac9c0 -> Node0x18aca30;
	Node0x18aca30 -> Node0x18acaa0;
	Node0x18acaa0 -> Node0x18acb10;
	Node0x18acb10 -> Node0x18acbb0;
	Node0x18acbb0 -> Node0x18acc20;
	Node0x18acc20 -> Node0x18acc90;
	Node0x18acc90 -> Node0x18acd00;
	Node0x18acd00 -> Node0x18acd70;
	Node0x18acd70 -> Node0x18acde0;
	Node0x18acde0 -> Node0x18ad060;
	Node0x18ad060 -> Node0x18ad0d0;
	Node0x18ad0d0 -> Node0x18ad140;
	Node0x18ad140 -> Node0x18ad1b0;
	Node0x18ad1b0 -> Node0x18ad220;
	Node0x18ad220 -> Node0x18ad290;
	Node0x18ad290 -> Node0x18ad300;
	Node0x18ad300 -> Node0x18ad370;
	Node0x18ad370 -> Node0x18ad3e0;
	Node0x18ad3e0 -> Node0x18ad450;
	Node0x18ad450 -> Node0x18ad4c0;
	Node0x18ad4c0 -> Node0x18ad530;
	Node0x18ad530 -> Node0x184c268;
	Node0x184c268 -> Node0x18ad9d0;
	Node0x18ad9d0 -> Node0x18ada20;
edge [color=red]
	Node0x18ac200 -> Node0x18ac2e0;
	Node0x18ac350 -> Node0x18ac3f0;
	Node0x18ac3f0 -> Node0x18ac490;
	Node0x18ac500 -> Node0x18ac570;
	Node0x18ac5e0 -> Node0x18ac650;
	Node0x18ac650 -> Node0x18ac6f0;
	Node0x18ac6f0 -> Node0x18ac790;
	Node0x18ac5e0 -> Node0x18ac800;
	Node0x18ac870 -> Node0x18ac8e0;
	Node0x18ac8e0 -> Node0x18ac950;
	Node0x18ac800 -> Node0x18aca30;
	Node0x18aca30 -> Node0x18acaa0;
	Node0x18ac570 -> Node0x18acaa0;
	Node0x18acaa0 -> Node0x18acb10;
	Node0x18ac650 -> Node0x18acb10;
	Node0x18acb10 -> Node0x18acbb0;
	Node0x18abb80 -> Node0x18acc90;
	Node0x18acc90 -> Node0x18acd00;
	Node0x18acd70 -> Node0x18acde0;
	Node0x18ac270 -> Node0x18acde0;
	Node0x18acde0 -> Node0x18ad060;
	Node0x18ac2e0 -> Node0x18ad060;
	Node0x18ad060 -> Node0x18ad0d0;
	Node0x18ac350 -> Node0x18ad0d0;
	Node0x18ad0d0 -> Node0x18ad140;
	Node0x18ac800 -> Node0x18ad140;
	Node0x18ad140 -> Node0x18ad1b0;
	Node0x18ac9c0 -> Node0x18ad1b0;
	Node0x18ad1b0 -> Node0x18ad220;
	Node0x18abb10 -> Node0x18ad220;
	Node0x18ad220 -> Node0x18ad290;
	Node0x18ac490 -> Node0x18ad290;
	Node0x18ad290 -> Node0x18ad300;
	Node0x18acc20 -> Node0x18ad300;
	Node0x18ad300 -> Node0x18ad370;
	Node0x18acd00 -> Node0x18ad370;
	Node0x18ad370 -> Node0x18ad3e0;
	Node0x18ac790 -> Node0x18ad3e0;
	Node0x18ad3e0 -> Node0x18ad450;
	Node0x18ac950 -> Node0x18ad450;
	Node0x18ad450 -> Node0x18ad4c0;
	Node0x18acbb0 -> Node0x18ad4c0;
	Node0x18abb10 -> Node0x18ad530;
	Node0x18ad4c0 -> Node0x18ad530;
	Node0x18ad530 -> Node0x184c268;
	Node0x184c268 -> Node0x18ad9d0;
}
