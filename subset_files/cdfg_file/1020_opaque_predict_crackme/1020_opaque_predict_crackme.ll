; ModuleID = '../.././c_source_file/1020_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1020_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = add i32 %7, 1
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %1, %0
  %13 = and i32 %11, %12
  %14 = add i32 %9, %13
  %15 = xor i32 %4, -1
  %16 = xor i32 %5, %3
  %17 = or i32 %16, %15
  %18 = add i32 %14, %17
  %19 = or i32 %5, %3
  %20 = and i32 %19, %4
  %21 = add i32 %18, %20
  %22 = xor i32 %0, -1
  %23 = and i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = and i32 %24, %22
  %26 = or i32 %22, %2
  %27 = and i32 %26, %12
  %28 = xor i32 %1, -1
  %29 = and i32 %8, %28
  %30 = and i32 %28, %0
  %31 = or i32 %30, %2
  %32 = xor i32 %30, %2
  %33 = or i32 %23, %0
  %34 = and i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = and i32 %35, %2
  %37 = xor i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %1
  %40 = or i32 %2, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %22
  %43 = and i32 %23, %0
  %44 = xor i32 %40, 2147483647
  %45 = or i32 %44, %0
  %46 = xor i32 %45, %43
  %47 = or i32 %2, %0
  %48 = and i32 %47, %12
  %49 = xor i32 %2, %1
  %50 = or i32 %49, %22
  %51 = xor i32 %7, %40
  %52 = shl i32 %51, 1
  %53 = xor i32 %12, -1
  %54 = or i32 %37, %53
  %55 = or i32 %1, %0
  %56 = xor i32 %55, 2147483647
  %57 = xor i32 %56, %2
  %58 = shl i32 %57, 1
  %59 = xor i32 %49, 2147483647
  %60 = or i32 %59, %30
  %61 = xor i32 %49, %0
  %62 = or i32 %38, %53
  %63 = shl i32 %62, 1
  %64 = and i32 %22, %1
  %65 = xor i32 %64, %2
  %66 = xor i32 %47, -1
  %67 = or i32 %66, %1
  %68 = and i32 %41, %22
  %69 = shl i32 %68, 2
  %70 = and i32 %41, %0
  %71 = and i32 %34, %10
  %72 = and i32 %28, %2
  %73 = and i32 %72, %22
  %74 = shl i32 %73, 1
  %75 = and i32 %23, %22
  %76 = and i32 %72, %0
  %77 = shl i32 %43, 1
  %78 = or i32 %4, %3
  %79 = xor i32 %5, %4
  %80 = and i32 %79, %78
  %81 = and i32 %4, %3
  %82 = xor i32 %81, -1
  %83 = and i32 %79, %82
  %84 = and i32 %19, %15
  %85 = and i32 %5, %3
  %86 = xor i32 %3, -1
  %87 = and i32 %86, %4
  %88 = xor i32 %87, -1
  %89 = xor i32 %16, -1
  %90 = and i32 %89, %88
  %91 = xor i32 %85, -1
  %92 = and i32 %91, %15
  %93 = and i32 %85, %15
  %94 = and i32 %16, %4
  %95 = or i32 %93, %94
  %96 = xor i32 %5, -1
  %97 = and i32 %78, %96
  %98 = or i32 %96, %3
  %99 = xor i32 %98, %4
  %100 = shl i32 %15, 1
  %101 = xor i32 %79, -1
  %102 = or i32 %81, %101
  %103 = and i32 %96, %3
  %104 = or i32 %103, %87
  %105 = or i32 %85, %15
  %106 = or i32 %86, %4
  %107 = and i32 %106, %96
  %108 = xor i32 %4, %3
  %109 = xor i32 %108, -1
  %110 = and i32 %96, %109
  %111 = and i32 %16, %106
  %112 = shl i32 %111, 1
  %113 = and i32 %96, %4
  %114 = or i32 %113, %3
  %115 = and i32 %86, %5
  %116 = and i32 %115, %15
  %117 = xor i32 %17, 1073741823
  %118 = or i32 %117, %116
  %119 = shl i32 %118, 2
  %120 = or i32 %101, %3
  %121 = and i32 %85, %4
  %122 = xor i32 %16, %15
  %123 = or i32 %121, %122
  %124 = and i32 %106, %101
  %125 = xor i32 %106, -1
  %126 = shl i32 %125, 1
  %127 = or i32 %113, %108
  %128 = or i32 %101, %125
  %129 = and i32 %79, %109
  %130 = or i32 %79, %109
  %131 = shl i32 %130, 1
  %132 = or i32 %87, %96
  %133 = xor i32 %91, %4
  %134 = shl i32 %133, 2
  %135 = or i32 %96, %4
  %136 = and i32 %135, %3
  %137 = and i32 %16, %82
  %138 = xor i32 %98, -1
  %139 = xor i32 %138, %4
  %140 = mul i32 %139, -3
  %141 = and i32 %79, %106
  %142 = shl i32 %141, 1
  %143 = or i32 %85, %4
  %144 = or i32 %79, %108
  %145 = and i32 %5, %4
  %146 = xor i32 %145, -1
  %147 = add i32 %145, 1
  %148 = or i32 %5, %4
  %149 = xor i32 %148, -1
  %150 = or i32 %108, %149
  %151 = shl i32 %150, 1
  %152 = xor i32 %146, %3
  %153 = shl i32 %152, 1
  %154 = xor i32 %106, %5
  %155 = and i32 %108, %101
  %156 = xor i32 %78, -1
  %157 = or i32 %96, %156
  %158 = or i32 %81, %149
  %159 = or i32 %98, %15
  %160 = or i32 %89, %15
  %161 = xor i32 %103, -1
  %162 = or i32 %161, %15
  %163 = xor i32 %85, %4
  %164 = xor i32 %148, %3
  %165 = shl i32 %164, 1
  %166 = and i32 %146, %86
  %167 = shl i32 %166, 1
  %168 = add i32 %87, 1
  %169 = xor i32 %135, -1
  %170 = add i32 %135, 1
  %171 = or i32 %138, %4
  %172 = shl i32 %171, 1
  %173 = or i32 %79, %86
  %174 = or i32 %79, %81
  %175 = or i32 %103, %15
  %176 = or i32 %101, %86
  %177 = and i32 %96, %82
  %178 = and i32 %115, %4
  %179 = or i32 %86, %5
  %180 = xor i32 %179, %15
  %181 = xor i32 %180, %178
  %182 = and i32 %78, %101
  %183 = and i32 %82, %5
  %184 = and i32 %146, %3
  %185 = and i32 %101, %3
  %186 = or i32 %81, %5
  %187 = shl i32 %186, 2
  %188 = or i32 %16, %156
  %189 = xor i32 %113, -1
  %190 = and i32 %108, %189
  %191 = xor i32 %116, %17
  %192 = and i32 %79, %3
  %193 = xor i32 %87, %161
  %194 = or i32 %101, %156
  %195 = or i32 %16, %81
  %196 = or i32 %87, %101
  %197 = xor i32 %178, %122
  %198 = or i32 %149, %86
  %199 = xor i32 %169, %3
  %200 = shl i32 %199, 1
  %201 = or i32 %169, %3
  %202 = xor i32 %189, %3
  %203 = and i32 %101, %88
  %204 = and i32 %96, %88
  %205 = xor i32 %19, -1
  %206 = or i32 %205, %15
  %207 = shl i32 %79, 1
  %208 = or i32 %108, %96
  %209 = and i32 %78, %5
  %210 = xor i32 %87, %5
  %211 = or i32 %108, %5
  %212 = and i32 %89, %4
  %213 = xor i32 %87, %91
  %214 = and i32 %98, %4
  %215 = or i32 %16, %125
  %216 = or i32 %169, %109
  %217 = and i32 %16, %88
  %218 = and i32 %189, %3
  %219 = or i32 %169, %86
  %220 = or i32 %145, %156
  %221 = add i32 %108, 1
  %222 = or i32 %145, %103
  %223 = xor i32 %135, %81
  %224 = or i32 %91, %15
  %225 = xor i32 %20, 2147483647
  %226 = xor i32 %225, %93
  %227 = shl i32 %226, 1
  %228 = and i32 %108, %96
  %229 = and i32 %179, %4
  %230 = xor i32 %229, -1
  %231 = xor i32 %116, %230
  %232 = or i32 %81, %96
  %233 = xor i32 %161, %4
  %234 = shl i32 %233, 1
  %235 = or i32 %161, %4
  %236 = or i32 %89, %125
  %237 = and i32 %148, %108
  %238 = xor i32 %84, -1
  %239 = xor i32 %121, %238
  %240 = or i32 %205, %4
  %241 = and i32 %205, %15
  %242 = and i32 %103, %15
  %243 = and i32 %205, %4
  %244 = mul i32 %243, 11
  %245 = and i32 %103, %4
  %246 = and i32 %138, %15
  %247 = mul i32 %246, 23
  %248 = mul i32 %93, -10
  %249 = and i32 %138, %4
  %250 = add i32 %228, %60
  %251 = add i32 %250, %210
  %252 = add i32 %251, %46
  %253 = add i32 %252, %241
  %254 = add i32 %253, %249
  %255 = add i32 %254, %235
  %256 = add i32 %255, %215
  %257 = add i32 %256, %206
  %258 = add i32 %257, %203
  %259 = add i32 %258, %182
  %260 = add i32 %259, %127
  %261 = add i32 %260, %105
  %262 = shl i32 %261, 1
  %263 = add i32 %90, %184
  %264 = add i32 %263, %123
  %265 = shl i32 %264, 2
  %266 = sub i32 %86, %242
  %267 = add i32 %266, %245
  %268 = mul i32 %267, 5
  %269 = sub i32 %121, %70
  %270 = mul i32 %269, 7
  %271 = add i32 %31, -1
  %272 = add i32 %271, %32
  %273 = sub i32 %272, %36
  %274 = sub i32 %273, %37
  %275 = add i32 %274, %65
  %276 = sub i32 %275, %3
  %277 = sub i32 %276, %27
  %278 = add i32 %277, %25
  %279 = sub i32 %278, %29
  %280 = sub i32 %279, %33
  %281 = sub i32 %280, %39
  %282 = add i32 %281, %42
  %283 = add i32 %282, %48
  %284 = add i32 %283, %50
  %285 = add i32 %284, %54
  %286 = add i32 %285, %61
  %287 = add i32 %286, %67
  %288 = add i32 %287, %71
  %289 = sub i32 %288, %75
  %290 = add i32 %289, %76
  %291 = sub i32 %290, %52
  %292 = sub i32 %291, %58
  %293 = sub i32 %292, %63
  %294 = sub i32 %293, %69
  %295 = sub i32 %294, %74
  %296 = sub i32 %295, %77
  %297 = sub i32 %296, %100
  %298 = add i32 %297, %168
  %299 = add i32 %298, %221
  %300 = add i32 %299, %85
  %301 = add i32 %300, %97
  %302 = sub i32 %301, %107
  %303 = add i32 %302, %110
  %304 = sub i32 %303, %126
  %305 = add i32 %304, %132
  %306 = add i32 %305, %147
  %307 = add i32 %306, %154
  %308 = add i32 %307, %157
  %309 = sub i32 %308, %145
  %310 = add i32 %309, %170
  %311 = sub i32 %310, %177
  %312 = sub i32 %311, %183
  %313 = add i32 %312, %113
  %314 = sub i32 %313, %204
  %315 = sub i32 %314, %208
  %316 = sub i32 %315, %209
  %317 = add i32 %316, %211
  %318 = sub i32 %317, %232
  %319 = sub i32 %318, %80
  %320 = add i32 %319, %83
  %321 = add i32 %320, %84
  %322 = add i32 %321, %92
  %323 = add i32 %322, %99
  %324 = sub i32 %323, %102
  %325 = sub i32 %324, %104
  %326 = sub i32 %325, %114
  %327 = add i32 %326, %120
  %328 = sub i32 %327, %124
  %329 = add i32 %328, %128
  %330 = add i32 %329, %129
  %331 = add i32 %330, %136
  %332 = sub i32 %331, %137
  %333 = add i32 %332, %143
  %334 = add i32 %333, %144
  %335 = sub i32 %334, %155
  %336 = add i32 %335, %158
  %337 = sub i32 %336, %159
  %338 = add i32 %337, %160
  %339 = add i32 %338, %162
  %340 = sub i32 %339, %163
  %341 = add i32 %340, %173
  %342 = add i32 %341, %174
  %343 = add i32 %342, %175
  %344 = add i32 %343, %176
  %345 = sub i32 %344, %185
  %346 = sub i32 %345, %94
  %347 = sub i32 %346, %187
  %348 = sub i32 %347, %188
  %349 = add i32 %348, %190
  %350 = add i32 %349, %192
  %351 = sub i32 %350, %193
  %352 = sub i32 %351, %194
  %353 = add i32 %352, %195
  %354 = sub i32 %353, %196
  %355 = sub i32 %354, %198
  %356 = add i32 %355, %201
  %357 = add i32 %356, %202
  %358 = sub i32 %357, %207
  %359 = sub i32 %358, %212
  %360 = add i32 %359, %213
  %361 = add i32 %360, %214
  %362 = sub i32 %361, %216
  %363 = sub i32 %362, %217
  %364 = add i32 %363, %218
  %365 = sub i32 %364, %219
  %366 = sub i32 %365, %220
  %367 = add i32 %366, %222
  %368 = sub i32 %367, %223
  %369 = sub i32 %368, %224
  %370 = sub i32 %369, %236
  %371 = sub i32 %370, %237
  %372 = sub i32 %371, %240
  %373 = sub i32 %372, %95
  %374 = sub i32 %373, %112
  %375 = sub i32 %374, %131
  %376 = sub i32 %375, %134
  %377 = add i32 %376, %140
  %378 = sub i32 %377, %142
  %379 = sub i32 %378, %151
  %380 = sub i32 %379, %153
  %381 = sub i32 %380, %165
  %382 = sub i32 %381, %167
  %383 = sub i32 %382, %172
  %384 = add i32 %383, %181
  %385 = add i32 %384, %191
  %386 = sub i32 %385, %197
  %387 = sub i32 %386, %200
  %388 = add i32 %387, %231
  %389 = sub i32 %388, %234
  %390 = add i32 %389, %239
  %391 = add i32 %390, %244
  %392 = add i32 %391, %247
  %393 = add i32 %392, %248
  %394 = add i32 %393, %270
  %395 = sub i32 %394, %119
  %396 = sub i32 %395, %227
  %397 = add i32 %396, %268
  %398 = add i32 %397, %265
  %399 = add i32 %398, %262
  %400 = icmp eq i32 %21, %399
  %401 = select i1 %400, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %402 = tail call i32 @puts(i8* nonnull dereferenceable(1) %401)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
