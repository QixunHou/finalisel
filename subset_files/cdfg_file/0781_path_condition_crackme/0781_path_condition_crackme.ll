; ModuleID = '../.././c_source_file/0781_path_condition_crackme.c'
source_filename = "../.././c_source_file/0781_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = sub i32 0, %7
  %9 = and i32 %2, %1
  %10 = or i32 %9, %0
  %11 = xor i32 %0, -1
  %12 = and i32 %9, %11
  %13 = or i32 %2, %1
  %14 = and i32 %13, %0
  %15 = xor i32 %14, 2147483647
  %16 = xor i32 %15, %12
  %17 = shl i32 %16, 1
  %18 = and i32 %1, %0
  %19 = or i32 %2, %0
  %20 = xor i32 %19, %18
  %21 = xor i32 %2, -1
  %22 = and i32 %21, %0
  %23 = xor i32 %22, -1
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %23, %25
  %27 = xor i32 %2, %1
  %28 = and i32 %27, %0
  %29 = or i32 %12, %28
  %30 = shl i32 %29, 1
  %31 = xor i32 %1, -1
  %32 = and i32 %31, %2
  %33 = and i32 %32, %0
  %34 = xor i32 %27, %0
  %35 = or i32 %33, %34
  %36 = or i32 %21, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %37, %1
  %39 = and i32 %6, %4
  %40 = shl i32 %39, 1
  %41 = and i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %33, -1
  %44 = xor i32 %34, %43
  %45 = xor i32 %13, -1
  %46 = or i32 %41, %45
  %47 = and i32 %42, %25
  %48 = xor i32 %19, -1
  %49 = xor i32 %48, %1
  %50 = or i32 %13, %0
  %51 = and i32 %42, %31
  %52 = xor i32 %9, -1
  %53 = xor i32 %22, %52
  %54 = and i32 %31, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %27, %55
  %57 = and i32 %21, %1
  %58 = xor i32 %57, %0
  %59 = xor i32 %5, %2
  %60 = shl i32 %59, 1
  %61 = xor i32 %27, -1
  %62 = or i32 %54, %61
  %63 = xor i32 %36, %18
  %64 = xor i32 %18, -1
  %65 = and i32 %64, %2
  %66 = and i32 %9, %0
  %67 = xor i32 %13, %0
  %68 = xor i32 %67, -1
  %69 = xor i32 %66, %68
  %70 = or i32 %31, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %21, %71
  %73 = xor i32 %27, 2147483647
  %74 = or i32 %73, %0
  %75 = xor i32 %74, %66
  %76 = or i32 %48, %31
  %77 = or i32 %21, %1
  %78 = xor i32 %77, -1
  %79 = or i32 %78, %11
  %80 = shl i32 %79, 1
  %81 = and i32 %61, %0
  %82 = xor i32 %23, %1
  %83 = xor i32 %6, -1
  %84 = and i32 %24, %83
  %85 = shl i32 %84, 1
  %86 = or i32 %61, %71
  %87 = shl i32 %86, 2
  %88 = and i32 %77, %11
  %89 = or i32 %31, %2
  %90 = xor i32 %89, %0
  %91 = xor i32 %90, %43
  %92 = and i32 %83, %1
  %93 = or i32 %18, %61
  %94 = xor i32 %54, %2
  %95 = xor i32 %61, %0
  %96 = xor i32 %9, %0
  %97 = and i32 %24, %42
  %98 = or i32 %18, %83
  %99 = xor i32 %52, %0
  %100 = or i32 %18, %78
  %101 = and i32 %32, %11
  %102 = and i32 %89, %0
  %103 = xor i32 %102, -1
  %104 = xor i32 %101, %103
  %105 = shl i32 %36, 1
  %106 = and i32 %61, %55
  %107 = and i32 %24, %2
  %108 = or i32 %71, %2
  %109 = or i32 %48, %25
  %110 = or i32 %48, %1
  %111 = or i32 %83, %71
  %112 = xor i32 %71, %2
  %113 = and i32 %36, %24
  %114 = or i32 %33, %90
  %115 = and i32 %83, %64
  %116 = shl i32 %115, 1
  %117 = xor i32 %42, %1
  %118 = or i32 %66, %67
  %119 = or i32 %21, %25
  %120 = or i32 %18, %21
  %121 = or i32 %83, %31
  %122 = or i32 %24, %37
  %123 = or i32 %83, %5
  %124 = shl i32 %123, 1
  %125 = or i32 %54, %2
  %126 = xor i32 %77, %0
  %127 = add i32 %18, 1
  %128 = or i32 %61, %11
  %129 = and i32 %36, %25
  %130 = and i32 %83, %25
  %131 = or i32 %5, %2
  %132 = or i32 %6, %24
  %133 = or i32 %37, %1
  %134 = and i32 %83, %31
  %135 = add i32 %22, 1
  %136 = and i32 %6, %24
  %137 = or i32 %41, %25
  %138 = or i32 %57, %11
  %139 = xor i32 %36, %1
  %140 = or i32 %77, %0
  %141 = and i32 %27, %70
  %142 = and i32 %70, %61
  %143 = and i32 %36, %1
  %144 = and i32 %4, %61
  %145 = or i32 %54, %83
  %146 = and i32 %4, %2
  %147 = or i32 %18, %2
  %148 = shl i32 %147, 1
  %149 = or i32 %22, %25
  %150 = and i32 %70, %83
  %151 = or i32 %41, %24
  %152 = or i32 %21, %5
  %153 = and i32 %19, %1
  %154 = or i32 %41, %71
  %155 = and i32 %23, %31
  %156 = shl i32 %77, 1
  %157 = or i32 %52, %0
  %158 = or i32 %57, %54
  %159 = or i32 %83, %25
  %160 = xor i32 %4, %2
  %161 = and i32 %19, %25
  %162 = xor i32 %70, %2
  %163 = or i32 %45, %11
  %164 = shl i32 %163, 1
  %165 = or i32 %27, %0
  %166 = xor i32 %165, -1
  %167 = or i32 %33, %166
  %168 = xor i32 %66, %34
  %169 = and i32 %24, %23
  %170 = and i32 %21, %55
  %171 = and i32 %19, %31
  %172 = or i32 %22, %78
  %173 = or i32 %83, %1
  %174 = and i32 %70, %2
  %175 = shl i32 %174, 1
  %176 = or i32 %77, %11
  %177 = xor i32 %64, %2
  %178 = and i32 %27, %4
  %179 = or i32 %9, %11
  %180 = or i32 %12, %14
  %181 = shl i32 %180, 1
  %182 = and i32 %52, %0
  %183 = and i32 %13, %11
  %184 = or i32 %22, %1
  %185 = and i32 %45, %11
  %186 = and i32 %57, %11
  %187 = mul i32 %186, 15
  %188 = and i32 %45, %0
  %189 = shl i32 %188, 3
  %190 = and i32 %57, %0
  %191 = shl i32 %190, 1
  %192 = mul i32 %12, 7
  %193 = and i32 %78, %0
  %194 = add i32 %27, %25
  %195 = add i32 %194, %52
  %196 = add i32 %195, %45
  %197 = add i32 %196, %65
  %198 = add i32 %197, %193
  %199 = add i32 %198, %185
  %200 = add i32 %199, %157
  %201 = add i32 %200, %151
  %202 = add i32 %201, %145
  %203 = add i32 %202, %139
  %204 = add i32 %203, %117
  %205 = add i32 %204, %111
  %206 = add i32 %205, %99
  %207 = add i32 %206, %26
  %208 = add i32 %207, %75
  %209 = shl i32 %208, 1
  %210 = sub i32 %95, %126
  %211 = add i32 %210, %50
  %212 = mul i32 %211, 5
  %213 = add i32 %188, %66
  %214 = sub i32 %213, %161
  %215 = mul i32 %214, 3
  %216 = add i32 %4, %21
  %217 = add i32 %216, %127
  %218 = sub i32 %217, %2
  %219 = add i32 %218, %37
  %220 = sub i32 %219, %72
  %221 = sub i32 %220, %94
  %222 = sub i32 %221, %107
  %223 = sub i32 %222, %108
  %224 = add i32 %223, %61
  %225 = add i32 %224, %112
  %226 = add i32 %225, %22
  %227 = sub i32 %226, %119
  %228 = sub i32 %227, %120
  %229 = add i32 %228, %125
  %230 = add i32 %229, %131
  %231 = add i32 %230, %135
  %232 = add i32 %231, %146
  %233 = sub i32 %232, %152
  %234 = sub i32 %233, %160
  %235 = add i32 %234, %162
  %236 = add i32 %235, %170
  %237 = sub i32 %236, %177
  %238 = add i32 %237, %48
  %239 = add i32 %238, %10
  %240 = sub i32 %239, %20
  %241 = sub i32 %240, %38
  %242 = add i32 %241, %46
  %243 = add i32 %242, %47
  %244 = add i32 %243, %49
  %245 = sub i32 %244, %51
  %246 = add i32 %245, %53
  %247 = add i32 %246, %56
  %248 = sub i32 %247, %58
  %249 = sub i32 %248, %60
  %250 = add i32 %249, %62
  %251 = sub i32 %250, %63
  %252 = add i32 %251, %76
  %253 = sub i32 %252, %81
  %254 = add i32 %253, %82
  %255 = sub i32 %254, %88
  %256 = add i32 %255, %92
  %257 = sub i32 %256, %93
  %258 = add i32 %257, %96
  %259 = sub i32 %258, %97
  %260 = add i32 %259, %98
  %261 = sub i32 %260, %100
  %262 = sub i32 %261, %105
  %263 = add i32 %262, %106
  %264 = sub i32 %263, %109
  %265 = sub i32 %264, %110
  %266 = sub i32 %265, %113
  %267 = sub i32 %266, %121
  %268 = add i32 %267, %122
  %269 = add i32 %268, %128
  %270 = sub i32 %269, %129
  %271 = add i32 %270, %130
  %272 = sub i32 %271, %132
  %273 = sub i32 %272, %133
  %274 = sub i32 %273, %134
  %275 = add i32 %274, %136
  %276 = add i32 %275, %137
  %277 = sub i32 %276, %138
  %278 = add i32 %277, %140
  %279 = sub i32 %278, %141
  %280 = sub i32 %279, %142
  %281 = add i32 %280, %143
  %282 = add i32 %281, %144
  %283 = sub i32 %282, %148
  %284 = sub i32 %283, %149
  %285 = sub i32 %284, %150
  %286 = add i32 %285, %153
  %287 = sub i32 %286, %154
  %288 = sub i32 %287, %155
  %289 = sub i32 %288, %156
  %290 = sub i32 %289, %158
  %291 = sub i32 %290, %159
  %292 = sub i32 %291, %169
  %293 = add i32 %292, %171
  %294 = sub i32 %293, %172
  %295 = sub i32 %294, %173
  %296 = sub i32 %295, %175
  %297 = add i32 %296, %176
  %298 = add i32 %297, %178
  %299 = sub i32 %298, %179
  %300 = sub i32 %299, %14
  %301 = sub i32 %300, %182
  %302 = add i32 %301, %165
  %303 = sub i32 %302, %183
  %304 = sub i32 %303, %184
  %305 = add i32 %304, %35
  %306 = sub i32 %305, %40
  %307 = sub i32 %306, %44
  %308 = add i32 %307, %69
  %309 = sub i32 %308, %80
  %310 = sub i32 %309, %85
  %311 = sub i32 %310, %87
  %312 = sub i32 %311, %91
  %313 = add i32 %312, %104
  %314 = sub i32 %313, %114
  %315 = sub i32 %314, %116
  %316 = add i32 %315, %118
  %317 = sub i32 %316, %124
  %318 = sub i32 %317, %164
  %319 = sub i32 %318, %167
  %320 = add i32 %319, %168
  %321 = add i32 %320, %187
  %322 = sub i32 %321, %189
  %323 = sub i32 %322, %191
  %324 = add i32 %323, %192
  %325 = sub i32 %324, %30
  %326 = sub i32 %325, %181
  %327 = sub i32 %326, %17
  %328 = add i32 %327, %212
  %329 = add i32 %328, %215
  %330 = add i32 %329, %209
  %331 = icmp eq i32 %330, %8
  %332 = select i1 %331, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %333 = tail call i32 @puts(i8* nonnull dereferenceable(1) %332)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
