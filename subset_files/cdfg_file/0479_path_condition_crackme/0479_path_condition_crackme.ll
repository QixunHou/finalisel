; ModuleID = '../.././c_source_file/0479_path_condition_crackme.c'
source_filename = "../.././c_source_file/0479_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %6, %3
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %0
  %12 = and i32 %1, %0
  %13 = or i32 %2, %1
  %14 = xor i32 %13, -1
  %15 = or i32 %12, %14
  %16 = add i32 %15, %11
  %17 = sub i32 %7, %16
  %18 = and i32 %6, %3
  %19 = or i32 %6, %3
  %20 = shl i32 %3, 1
  %21 = or i32 %4, %3
  %22 = xor i32 %21, -1
  %23 = shl i32 %19, 1
  %24 = xor i32 %23, -2
  %25 = and i32 %4, %3
  %26 = and i32 %2, %0
  %27 = or i32 %26, %1
  %28 = xor i32 %1, -1
  %29 = and i32 %28, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %2
  %32 = and i32 %2, %1
  %33 = and i32 %32, %0
  %34 = xor i32 %2, %1
  %35 = xor i32 %34, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %33, %36
  %38 = or i32 %8, %0
  %39 = xor i32 %2, %0
  %40 = or i32 %39, %28
  %41 = xor i32 %1, %0
  %42 = and i32 %10, %0
  %43 = or i32 %26, %9
  %44 = and i32 %28, %2
  %45 = and i32 %44, %0
  %46 = xor i32 %45, %36
  %47 = or i32 %34, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %45, %48
  %50 = xor i32 %0, -1
  %51 = or i32 %32, %50
  %52 = xor i32 %12, -1
  %53 = and i32 %39, %52
  %54 = or i32 %14, %0
  %55 = or i32 %41, %8
  %56 = or i32 %8, %1
  %57 = xor i32 %56, -1
  %58 = add i32 %56, 1
  %59 = xor i32 %57, %0
  %60 = or i32 %28, %2
  %61 = xor i32 %60, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %45, %62
  %64 = and i32 %8, %0
  %65 = xor i32 %64, -1
  %66 = xor i32 %41, -1
  %67 = and i32 %65, %66
  %68 = and i32 %65, %28
  %69 = and i32 %39, %66
  %70 = xor i32 %39, -1
  %71 = or i32 %12, %70
  %72 = or i32 %2, %0
  %73 = xor i32 %72, -1
  %74 = or i32 %12, %73
  %75 = xor i32 %65, %1
  %76 = shl i32 %75, 1
  %77 = xor i32 %32, -1
  %78 = and i32 %77, %0
  %79 = and i32 %44, %50
  %80 = or i32 %34, %50
  %81 = xor i32 %79, %80
  %82 = and i32 %56, %0
  %83 = or i32 %12, %57
  %84 = or i32 %39, %41
  %85 = xor i32 %38, -1
  %86 = or i32 %85, %66
  %87 = and i32 %8, %66
  %88 = or i32 %39, %29
  %89 = xor i32 %29, %10
  %90 = xor i32 %13, %0
  %91 = or i32 %33, %90
  %92 = and i32 %32, %50
  %93 = and i32 %34, %0
  %94 = or i32 %92, %93
  %95 = and i32 %38, %41
  %96 = or i32 %10, %50
  %97 = xor i32 %73, %1
  %98 = shl i32 %97, 1
  %99 = xor i32 %34, -1
  %100 = and i32 %99, %50
  %101 = or i32 %28, %0
  %102 = and i32 %101, %70
  %103 = and i32 %8, %52
  %104 = or i32 %39, %12
  %105 = and i32 %8, %30
  %106 = xor i32 %26, -1
  %107 = xor i32 %14, %0
  %108 = and i32 %65, %1
  %109 = or i32 %64, %28
  %110 = and i32 %34, %50
  %111 = or i32 %33, %110
  %112 = xor i32 %99, %0
  %113 = or i32 %39, %1
  %114 = or i32 %1, %0
  %115 = and i32 %114, %70
  %116 = or i32 %13, %0
  %117 = xor i32 %72, %1
  %118 = xor i32 %114, -1
  %119 = or i32 %45, %61
  %120 = or i32 %41, %2
  %121 = or i32 %26, %14
  %122 = xor i32 %45, %47
  %123 = and i32 %41, %2
  %124 = or i32 %66, %2
  %125 = shl i32 %124, 1
  %126 = and i32 %13, %0
  %127 = xor i32 %126, 2147483647
  %128 = xor i32 %127, %92
  %129 = or i32 %70, %28
  %130 = shl i32 %129, 1
  %131 = and i32 %114, %2
  %132 = xor i32 %64, %56
  %133 = or i32 %56, %0
  %134 = shl i32 %133, 2
  %135 = xor i32 %32, %0
  %136 = and i32 %39, %41
  %137 = or i32 %99, %50
  %138 = and i32 %60, %0
  %139 = xor i32 %138, -1
  %140 = xor i32 %79, %139
  %141 = or i32 %26, %66
  %142 = shl i32 %141, 1
  %143 = or i32 %8, %118
  %144 = and i32 %34, %101
  %145 = xor i32 %13, %12
  %146 = or i32 %12, %99
  %147 = and i32 %60, %50
  %148 = or i32 %45, %147
  %149 = shl i32 %148, 1
  %150 = xor i32 %147, 1073741823
  %151 = xor i32 %150, %45
  %152 = and i32 %38, %66
  %153 = or i32 %39, %66
  %154 = shl i32 %153, 1
  %155 = or i32 %14, %50
  %156 = or i32 %70, %118
  %157 = or i32 %26, %118
  %158 = or i32 %41, %85
  %159 = and i32 %39, %114
  %160 = xor i32 %38, %1
  %161 = or i32 %70, %1
  %162 = or i32 %56, %50
  %163 = shl i32 %162, 1
  %164 = xor i32 %26, %1
  %165 = xor i32 %26, %10
  %166 = or i32 %12, %8
  %167 = or i32 %34, %29
  %168 = xor i32 %93, -1
  %169 = xor i32 %92, %168
  %170 = or i32 %41, %73
  %171 = or i32 %29, %2
  %172 = shl i32 %171, 1
  %173 = and i32 %99, %30
  %174 = xor i32 %26, %13
  %175 = shl i32 %174, 1
  %176 = or i32 %99, %118
  %177 = shl i32 %176, 1
  %178 = or i32 %64, %41
  %179 = or i32 %57, %0
  %180 = xor i32 %26, %101
  %181 = or i32 %77, %0
  %182 = shl i32 %181, 1
  %183 = or i32 %29, %99
  %184 = and i32 %13, %50
  %185 = shl i32 %184, 1
  %186 = or i32 %118, %2
  %187 = shl i32 %186, 1
  %188 = xor i32 %80, -1
  %189 = or i32 %79, %188
  %190 = and i32 %56, %50
  %191 = and i32 %106, %1
  %192 = or i32 %57, %50
  %193 = xor i32 %33, %35
  %194 = or i32 %99, %0
  %195 = and i32 %41, %65
  %196 = and i32 %66, %2
  %197 = or i32 %64, %57
  %198 = xor i32 %118, %2
  %199 = and i32 %106, %66
  %200 = add i32 %34, 1
  %201 = or i32 %9, %50
  %202 = or i32 %70, %66
  %203 = or i32 %8, %66
  %204 = shl i32 %203, 1
  %205 = and i32 %72, %66
  %206 = xor i32 %29, %77
  %207 = and i32 %70, %1
  %208 = or i32 %34, %12
  %209 = shl i32 %208, 1
  %210 = xor i32 %101, %2
  %211 = and i32 %99, %52
  %212 = and i32 %101, %2
  %213 = or i32 %29, %8
  %214 = or i32 %13, %50
  %215 = xor i32 %38, %12
  %216 = shl i32 %28, 2
  %217 = or i32 %9, %29
  %218 = and i32 %38, %28
  %219 = and i32 %77, %50
  %220 = shl i32 %219, 1
  %221 = and i32 %41, %8
  %222 = shl i32 %221, 1
  %223 = or i32 %73, %1
  %224 = shl i32 %223, 1
  %225 = and i32 %114, %8
  %226 = or i32 %92, %126
  %227 = shl i32 %35, 1
  %228 = xor i32 %77, %0
  %229 = or i32 %33, %184
  %230 = xor i32 %12, %2
  %231 = and i32 %41, %70
  %232 = or i32 %12, %2
  %233 = and i32 %72, %41
  %234 = xor i32 %72, %12
  %235 = xor i32 %101, -1
  %236 = or i32 %39, %235
  %237 = and i32 %41, %106
  %238 = shl i32 %237, 1
  %239 = and i32 %10, %50
  %240 = xor i32 %56, %12
  %241 = xor i32 %235, %2
  %242 = and i32 %52, %2
  %243 = or i32 %29, %70
  %244 = xor i32 %114, %2
  %245 = xor i32 %85, %1
  %246 = xor i32 %90, -1
  %247 = xor i32 %33, %246
  %248 = xor i32 %52, %2
  %249 = or i32 %64, %66
  %250 = and i32 %34, %114
  %251 = and i32 %39, %28
  %252 = and i32 %39, %101
  %253 = add i32 %101, 1
  %254 = and i32 %99, %0
  %255 = shl i32 %254, 1
  %256 = or i32 %34, %235
  %257 = or i32 %70, %235
  %258 = and i32 %114, %99
  %259 = or i32 %45, %35
  %260 = or i32 %85, %28
  %261 = shl i32 %260, 1
  %262 = shl i32 %90, 1
  %263 = add i32 %72, 1
  %264 = or i32 %26, %235
  %265 = and i32 %72, %28
  %266 = xor i32 %106, %1
  %267 = shl i32 %266, 1
  %268 = or i32 %8, %235
  %269 = xor i32 %9, %0
  %270 = xor i32 %30, %2
  %271 = shl i32 %270, 1
  %272 = add i32 %9, 1
  %273 = xor i32 %26, %114
  %274 = and i32 %14, %50
  %275 = mul i32 %274, 9
  %276 = and i32 %9, %50
  %277 = mul i32 %276, 14
  %278 = and i32 %14, %0
  %279 = mul i32 %278, 12
  %280 = and i32 %9, %0
  %281 = mul i32 %280, -19
  %282 = and i32 %57, %50
  %283 = mul i32 %282, 6
  %284 = mul i32 %92, 20
  %285 = and i32 %57, %0
  %286 = mul i32 %285, 18
  %287 = add i32 %118, %1
  %288 = add i32 %287, %41
  %289 = add i32 %288, %9
  %290 = add i32 %289, %77
  %291 = add i32 %290, %56
  %292 = add i32 %291, %228
  %293 = add i32 %292, %207
  %294 = add i32 %293, %206
  %295 = add i32 %294, %180
  %296 = add i32 %295, %146
  %297 = add i32 %296, %83
  %298 = add i32 %297, %74
  %299 = add i32 %298, %59
  %300 = add i32 %299, %53
  %301 = add i32 %300, %119
  %302 = add i32 %301, %37
  %303 = add i32 %302, %18
  %304 = add i32 %303, %128
  %305 = shl i32 %304, 1
  %306 = sub i32 %196, %264
  %307 = sub i32 %306, %269
  %308 = add i32 %307, %126
  %309 = mul i32 %308, 5
  %310 = add i32 %33, %0
  %311 = add i32 %310, %151
  %312 = shl i32 %311, 2
  %313 = add i32 %114, -1
  %314 = add i32 %313, %248
  %315 = add i32 %314, %256
  %316 = sub i32 %315, %95
  %317 = add i32 %316, %89
  %318 = add i32 %317, %22
  %319 = add i32 %318, %25
  %320 = mul i32 %319, 3
  %321 = sub i32 4, %0
  %322 = sub i32 %321, %216
  %323 = add i32 %322, %253
  %324 = add i32 %323, %3
  %325 = add i32 %324, %31
  %326 = sub i32 %325, %38
  %327 = sub i32 %326, %32
  %328 = add i32 %327, %55
  %329 = add i32 %328, %58
  %330 = sub i32 %329, %87
  %331 = add i32 %330, %103
  %332 = sub i32 %331, %105
  %333 = add i32 %332, %106
  %334 = add i32 %333, %120
  %335 = add i32 %334, %123
  %336 = add i32 %335, %131
  %337 = sub i32 %336, %143
  %338 = sub i32 %337, %26
  %339 = sub i32 %338, %64
  %340 = add i32 %339, %166
  %341 = sub i32 %340, %198
  %342 = add i32 %341, %200
  %343 = sub i32 %342, %210
  %344 = sub i32 %343, %39
  %345 = sub i32 %344, %212
  %346 = add i32 %345, %213
  %347 = add i32 %346, %225
  %348 = add i32 %347, %230
  %349 = sub i32 %348, %232
  %350 = sub i32 %349, %241
  %351 = sub i32 %350, %242
  %352 = add i32 %351, %244
  %353 = add i32 %352, %34
  %354 = add i32 %353, %263
  %355 = add i32 %354, %268
  %356 = add i32 %355, %272
  %357 = add i32 %356, %4
  %358 = sub i32 %357, %20
  %359 = sub i32 %358, %27
  %360 = add i32 %359, %40
  %361 = add i32 %360, %42
  %362 = add i32 %361, %43
  %363 = sub i32 %362, %51
  %364 = add i32 %363, %54
  %365 = add i32 %364, %67
  %366 = add i32 %365, %68
  %367 = add i32 %366, %69
  %368 = add i32 %367, %71
  %369 = add i32 %368, %78
  %370 = sub i32 %369, %82
  %371 = add i32 %370, %84
  %372 = sub i32 %371, %86
  %373 = add i32 %372, %88
  %374 = sub i32 %373, %96
  %375 = add i32 %374, %100
  %376 = add i32 %375, %102
  %377 = add i32 %376, %104
  %378 = sub i32 %377, %107
  %379 = sub i32 %378, %108
  %380 = sub i32 %379, %109
  %381 = add i32 %380, %112
  %382 = add i32 %381, %113
  %383 = sub i32 %382, %115
  %384 = sub i32 %383, %116
  %385 = add i32 %384, %117
  %386 = sub i32 %385, %121
  %387 = sub i32 %386, %125
  %388 = sub i32 %387, %132
  %389 = sub i32 %388, %135
  %390 = sub i32 %389, %47
  %391 = sub i32 %390, %136
  %392 = add i32 %391, %137
  %393 = add i32 %392, %144
  %394 = add i32 %393, %145
  %395 = sub i32 %394, %152
  %396 = sub i32 %395, %155
  %397 = add i32 %396, %156
  %398 = add i32 %397, %157
  %399 = sub i32 %398, %158
  %400 = add i32 %399, %159
  %401 = sub i32 %400, %160
  %402 = add i32 %401, %161
  %403 = sub i32 %402, %164
  %404 = add i32 %403, %165
  %405 = sub i32 %404, %167
  %406 = add i32 %405, %170
  %407 = sub i32 %406, %172
  %408 = add i32 %407, %110
  %409 = sub i32 %408, %173
  %410 = add i32 %409, %178
  %411 = sub i32 %410, %179
  %412 = add i32 %411, %183
  %413 = sub i32 %412, %187
  %414 = sub i32 %413, %190
  %415 = add i32 %414, %191
  %416 = add i32 %415, %192
  %417 = add i32 %416, %194
  %418 = sub i32 %417, %195
  %419 = add i32 %418, %197
  %420 = add i32 %419, %199
  %421 = sub i32 %420, %201
  %422 = add i32 %421, %202
  %423 = sub i32 %422, %204
  %424 = sub i32 %423, %205
  %425 = add i32 %424, %211
  %426 = sub i32 %425, %214
  %427 = sub i32 %426, %215
  %428 = sub i32 %427, %217
  %429 = sub i32 %428, %218
  %430 = sub i32 %429, %222
  %431 = sub i32 %430, %231
  %432 = sub i32 %431, %233
  %433 = sub i32 %432, %234
  %434 = add i32 %433, %80
  %435 = sub i32 %434, %236
  %436 = add i32 %435, %239
  %437 = sub i32 %436, %240
  %438 = add i32 %437, %243
  %439 = add i32 %438, %245
  %440 = add i32 %439, %249
  %441 = sub i32 %440, %250
  %442 = add i32 %441, %251
  %443 = sub i32 %442, %252
  %444 = sub i32 %443, %257
  %445 = add i32 %444, %258
  %446 = sub i32 %445, %265
  %447 = sub i32 %446, %271
  %448 = sub i32 %447, %273
  %449 = add i32 %448, %18
  %450 = add i32 %449, %19
  %451 = sub i32 %450, %46
  %452 = add i32 %451, %49
  %453 = add i32 %452, %63
  %454 = sub i32 %453, %76
  %455 = sub i32 %454, %81
  %456 = sub i32 %455, %91
  %457 = sub i32 %456, %94
  %458 = sub i32 %457, %98
  %459 = add i32 %458, %111
  %460 = add i32 %459, %122
  %461 = sub i32 %460, %130
  %462 = sub i32 %461, %134
  %463 = sub i32 %462, %140
  %464 = sub i32 %463, %142
  %465 = sub i32 %464, %154
  %466 = sub i32 %465, %163
  %467 = sub i32 %466, %169
  %468 = sub i32 %467, %175
  %469 = sub i32 %468, %177
  %470 = sub i32 %469, %182
  %471 = sub i32 %470, %185
  %472 = sub i32 %471, %189
  %473 = sub i32 %472, %193
  %474 = sub i32 %473, %209
  %475 = sub i32 %474, %220
  %476 = sub i32 %475, %224
  %477 = sub i32 %476, %226
  %478 = sub i32 %477, %227
  %479 = sub i32 %478, %229
  %480 = sub i32 %479, %238
  %481 = add i32 %480, %247
  %482 = sub i32 %481, %255
  %483 = add i32 %482, %259
  %484 = sub i32 %483, %261
  %485 = sub i32 %484, %262
  %486 = sub i32 %485, %267
  %487 = add i32 %486, %275
  %488 = add i32 %487, %277
  %489 = add i32 %488, %279
  %490 = add i32 %489, %281
  %491 = add i32 %490, %283
  %492 = add i32 %491, %284
  %493 = add i32 %492, %286
  %494 = sub i32 %493, %149
  %495 = add i32 %494, %24
  %496 = add i32 %495, %309
  %497 = add i32 %496, %312
  %498 = add i32 %497, %320
  %499 = add i32 %498, %305
  %500 = icmp eq i32 %17, %499
  %501 = select i1 %500, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %502 = tail call i32 @puts(i8* nonnull dereferenceable(1) %501)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
