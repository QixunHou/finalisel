digraph "DFG for'crackme' function" {
	Node0x24135a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x2413c50[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x2413d10[shape=record, label="  %5 = sub i32 %4, %0"];
	Node0x2413d80[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x2413df0[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x2413e90[shape=record, label="  %8 = mul i32 %7, -2"];
	Node0x2413f00[shape=record, label="  %9 = xor i32 %4, -2"];
	Node0x2413f70[shape=record, label="  %10 = sub i32 %8, %9"];
	Node0x2413fe0[shape=record, label="  %11 = or i32 %10, 1"];
	Node0x2414050[shape=record, label="  %12 = and i32 %1, %0"];
	Node0x24140c0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x2414130[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x24141a0[shape=record, label="  %15 = or i32 %1, %0"];
	Node0x2414210[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x2414280[shape=record, label="  %17 = xor i32 %7, -1"];
	Node0x24142f0[shape=record, label="  %18 = and i32 %6, %0"];
	Node0x2414360[shape=record, label="  %19 = add i32 %18, %17"];
	Node0x2414400[shape=record, label="  %20 = mul i32 %19, 3"];
	Node0x2414470[shape=record, label="  %21 = add i32 %12, %16"];
	Node0x2414510[shape=record, label="  %22 = mul i32 %21, 5"];
	Node0x24145b0[shape=record, label="  %23 = add i32 %0, 2"];
	Node0x2414620[shape=record, label="  %24 = add i32 %23, %14"];
	Node0x2414690[shape=record, label="  %25 = add i32 %24, %20"];
	Node0x2414700[shape=record, label="  %26 = add i32 %25, %22"];
	Node0x2414770[shape=record, label="  %27 = add i32 %26, %11"];
	Node0x24147e0[shape=record, label="  %28 = icmp eq i32 %5, %27"];
	Node0x23b4268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2414c80[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x2414cd0[shape=record, label="  ret void"];
	Node0x24135a0 -> Node0x2413c50;
	Node0x2413c50 -> Node0x2413d10;
	Node0x2413d10 -> Node0x2413d80;
	Node0x2413d80 -> Node0x2413df0;
	Node0x2413df0 -> Node0x2413e90;
	Node0x2413e90 -> Node0x2413f00;
	Node0x2413f00 -> Node0x2413f70;
	Node0x2413f70 -> Node0x2413fe0;
	Node0x2413fe0 -> Node0x2414050;
	Node0x2414050 -> Node0x24140c0;
	Node0x24140c0 -> Node0x2414130;
	Node0x2414130 -> Node0x24141a0;
	Node0x24141a0 -> Node0x2414210;
	Node0x2414210 -> Node0x2414280;
	Node0x2414280 -> Node0x24142f0;
	Node0x24142f0 -> Node0x2414360;
	Node0x2414360 -> Node0x2414400;
	Node0x2414400 -> Node0x2414470;
	Node0x2414470 -> Node0x2414510;
	Node0x2414510 -> Node0x24145b0;
	Node0x24145b0 -> Node0x2414620;
	Node0x2414620 -> Node0x2414690;
	Node0x2414690 -> Node0x2414700;
	Node0x2414700 -> Node0x2414770;
	Node0x2414770 -> Node0x24147e0;
	Node0x24147e0 -> Node0x23b4268;
	Node0x23b4268 -> Node0x2414c80;
	Node0x2414c80 -> Node0x2414cd0;
edge [color=red]
	Node0x24135a0 -> Node0x2413c50;
	Node0x2413c50 -> Node0x2413d10;
	Node0x2413d80 -> Node0x2413df0;
	Node0x2413df0 -> Node0x2413e90;
	Node0x2413c50 -> Node0x2413f00;
	Node0x2413e90 -> Node0x2413f70;
	Node0x2413f00 -> Node0x2413f70;
	Node0x2413f70 -> Node0x2413fe0;
	Node0x2414050 -> Node0x24140c0;
	Node0x24140c0 -> Node0x2414130;
	Node0x24141a0 -> Node0x2414210;
	Node0x2413df0 -> Node0x2414280;
	Node0x2413d80 -> Node0x24142f0;
	Node0x24142f0 -> Node0x2414360;
	Node0x2414280 -> Node0x2414360;
	Node0x2414360 -> Node0x2414400;
	Node0x2414050 -> Node0x2414470;
	Node0x2414210 -> Node0x2414470;
	Node0x2414470 -> Node0x2414510;
	Node0x24145b0 -> Node0x2414620;
	Node0x2414130 -> Node0x2414620;
	Node0x2414620 -> Node0x2414690;
	Node0x2414400 -> Node0x2414690;
	Node0x2414690 -> Node0x2414700;
	Node0x2414510 -> Node0x2414700;
	Node0x2414700 -> Node0x2414770;
	Node0x2413fe0 -> Node0x2414770;
	Node0x2413d10 -> Node0x24147e0;
	Node0x2414770 -> Node0x24147e0;
	Node0x24147e0 -> Node0x23b4268;
	Node0x23b4268 -> Node0x2414c80;
}
