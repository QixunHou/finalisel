digraph "DFG for'main' function" {
	Node0x1d02cc8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1d02d48[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1d02dd8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1d03238[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d03318[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1d03438[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d03670[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1d03728[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1d04698[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1d04d20[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x1d04d90[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1d04e00[shape=record, label="  %10 = xor i32 %7, -1"];
	Node0x1d04e70[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1d04ee0[shape=record, label="  %12 = add i32 %11, %9"];
	Node0x1d04f50[shape=record, label="  %13 = and i32 %7, %6"];
	Node0x1d04fc0[shape=record, label="  %14 = or i32 %7, %6"];
	Node0x1d05030[shape=record, label="  %15 = and i32 %6, %10"];
	Node0x1d050a0[shape=record, label="  %16 = xor i32 %14, -1"];
	Node0x1d05110[shape=record, label="  %17 = mul i32 %16, 7"];
	Node0x1d05180[shape=record, label="  %18 = xor i32 %6, 2147483647"];
	Node0x1d051f0[shape=record, label="  %19 = and i32 %18, %7"];
	Node0x1d05260[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x1d052d0[shape=record, label="  %21 = shl i32 %6, 2"];
	Node0x1d05340[shape=record, label="  %22 = sub i32 4, %6"];
	Node0x1d053b0[shape=record, label="  %23 = add i32 %22, %21"];
	Node0x1d05420[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x1d05490[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x1d05500[shape=record, label="  %26 = add i32 %25, %8"];
	Node0x1d05570[shape=record, label="  %27 = add i32 %26, %15"];
	Node0x1d055e0[shape=record, label="  %28 = add i32 %27, %17"];
	Node0x1d05650[shape=record, label="  %29 = add i32 %28, %20"];
	Node0x1d056c0[shape=record, label="  %30 = icmp eq i32 %12, %29"];
	Node0x1ca39d8[shape=record, label="  %31 = select i1 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d05750[shape=record, label="  %32 = call i32 @puts(i8* nonnull dereferenceable(1) %31) #5"];
	Node0x1d05bb8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d05d18[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d05dd8[shape=record, label="  ret i32 0"];
	Node0x1d02cc8 -> Node0x1d02d48;
	Node0x1d02d48 -> Node0x1d02dd8;
	Node0x1d02dd8 -> Node0x1d03238;
	Node0x1d03238 -> Node0x1d03318;
	Node0x1d03318 -> Node0x1d03438;
	Node0x1d03438 -> Node0x1d03670;
	Node0x1d03670 -> Node0x1d03728;
	Node0x1d03728 -> Node0x1d04698;
	Node0x1d04698 -> Node0x1d04d20;
	Node0x1d04d20 -> Node0x1d04d90;
	Node0x1d04d90 -> Node0x1d04e00;
	Node0x1d04e00 -> Node0x1d04e70;
	Node0x1d04e70 -> Node0x1d04ee0;
	Node0x1d04ee0 -> Node0x1d04f50;
	Node0x1d04f50 -> Node0x1d04fc0;
	Node0x1d04fc0 -> Node0x1d05030;
	Node0x1d05030 -> Node0x1d050a0;
	Node0x1d050a0 -> Node0x1d05110;
	Node0x1d05110 -> Node0x1d05180;
	Node0x1d05180 -> Node0x1d051f0;
	Node0x1d051f0 -> Node0x1d05260;
	Node0x1d05260 -> Node0x1d052d0;
	Node0x1d052d0 -> Node0x1d05340;
	Node0x1d05340 -> Node0x1d053b0;
	Node0x1d053b0 -> Node0x1d05420;
	Node0x1d05420 -> Node0x1d05490;
	Node0x1d05490 -> Node0x1d05500;
	Node0x1d05500 -> Node0x1d05570;
	Node0x1d05570 -> Node0x1d055e0;
	Node0x1d055e0 -> Node0x1d05650;
	Node0x1d05650 -> Node0x1d056c0;
	Node0x1d056c0 -> Node0x1ca39d8;
	Node0x1ca39d8 -> Node0x1d05750;
	Node0x1d05750 -> Node0x1d05bb8;
	Node0x1d05bb8 -> Node0x1d05d18;
	Node0x1d05d18 -> Node0x1d05dd8;
edge [color=red]
	Node0x1d02cc8 -> Node0x1d02dd8;
	Node0x1d02dd8 -> Node0x1d03238;
	Node0x1d02d48 -> Node0x1d03318;
	Node0x1d03318 -> Node0x1d03438;
	Node0x1d02cc8 -> Node0x1d03670;
	Node0x1d02d48 -> Node0x1d03670;
	Node0x1d02cc8 -> Node0x1d03728;
	Node0x1d02d48 -> Node0x1d04698;
	Node0x1d04698 -> Node0x1d04d20;
	Node0x1d03728 -> Node0x1d04d20;
	Node0x1d04d20 -> Node0x1d04d90;
	Node0x1d04698 -> Node0x1d04e00;
	Node0x1d04e00 -> Node0x1d04e70;
	Node0x1d04e70 -> Node0x1d04ee0;
	Node0x1d04d90 -> Node0x1d04ee0;
	Node0x1d04698 -> Node0x1d04f50;
	Node0x1d03728 -> Node0x1d04f50;
	Node0x1d04698 -> Node0x1d04fc0;
	Node0x1d03728 -> Node0x1d04fc0;
	Node0x1d03728 -> Node0x1d05030;
	Node0x1d04e00 -> Node0x1d05030;
	Node0x1d04fc0 -> Node0x1d050a0;
	Node0x1d050a0 -> Node0x1d05110;
	Node0x1d03728 -> Node0x1d05180;
	Node0x1d05180 -> Node0x1d051f0;
	Node0x1d04698 -> Node0x1d051f0;
	Node0x1d051f0 -> Node0x1d05260;
	Node0x1d03728 -> Node0x1d052d0;
	Node0x1d03728 -> Node0x1d05340;
	Node0x1d05340 -> Node0x1d053b0;
	Node0x1d052d0 -> Node0x1d053b0;
	Node0x1d053b0 -> Node0x1d05420;
	Node0x1d04f50 -> Node0x1d05420;
	Node0x1d05420 -> Node0x1d05490;
	Node0x1d04fc0 -> Node0x1d05490;
	Node0x1d05490 -> Node0x1d05500;
	Node0x1d04d20 -> Node0x1d05500;
	Node0x1d05500 -> Node0x1d05570;
	Node0x1d05030 -> Node0x1d05570;
	Node0x1d05570 -> Node0x1d055e0;
	Node0x1d05110 -> Node0x1d055e0;
	Node0x1d055e0 -> Node0x1d05650;
	Node0x1d05260 -> Node0x1d05650;
	Node0x1d04ee0 -> Node0x1d056c0;
	Node0x1d05650 -> Node0x1d056c0;
	Node0x1d056c0 -> Node0x1ca39d8;
	Node0x1ca39d8 -> Node0x1d05750;
	Node0x1d03318 -> Node0x1d05bb8;
	Node0x1d02dd8 -> Node0x1d05d18;
}
