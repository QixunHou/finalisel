digraph "DFG for'crackme' function" {
	Node0x1d01520[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1d01bd0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1d01c90[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1d01d00[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1d01d70[shape=record, label="  %7 = add i32 %6, %4"];
	Node0x1d01de0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1d01e50[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1d01ec0[shape=record, label="  %10 = and i32 %5, %0"];
	Node0x1d01f30[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0x1d01fd0[shape=record, label="  %12 = mul i32 %11, 7"];
	Node0x1d02070[shape=record, label="  %13 = xor i32 %0, 2147483647"];
	Node0x1d020e0[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x1d02150[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x1d021f0[shape=record, label="  %16 = shl i32 %0, 2"];
	Node0x1d02290[shape=record, label="  %17 = sub i32 4, %0"];
	Node0x1d02300[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x1d02370[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x1d023e0[shape=record, label="  %20 = add i32 %19, %3"];
	Node0x1d02450[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x1d024c0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x1d02530[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x1d025a0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1d02610[shape=record, label="  %25 = icmp eq i32 %7, %24"];
	Node0x1ca2268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d02ab0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1d02b00[shape=record, label="  ret void"];
	Node0x1d01520 -> Node0x1d01bd0;
	Node0x1d01bd0 -> Node0x1d01c90;
	Node0x1d01c90 -> Node0x1d01d00;
	Node0x1d01d00 -> Node0x1d01d70;
	Node0x1d01d70 -> Node0x1d01de0;
	Node0x1d01de0 -> Node0x1d01e50;
	Node0x1d01e50 -> Node0x1d01ec0;
	Node0x1d01ec0 -> Node0x1d01f30;
	Node0x1d01f30 -> Node0x1d01fd0;
	Node0x1d01fd0 -> Node0x1d02070;
	Node0x1d02070 -> Node0x1d020e0;
	Node0x1d020e0 -> Node0x1d02150;
	Node0x1d02150 -> Node0x1d021f0;
	Node0x1d021f0 -> Node0x1d02290;
	Node0x1d02290 -> Node0x1d02300;
	Node0x1d02300 -> Node0x1d02370;
	Node0x1d02370 -> Node0x1d023e0;
	Node0x1d023e0 -> Node0x1d02450;
	Node0x1d02450 -> Node0x1d024c0;
	Node0x1d024c0 -> Node0x1d02530;
	Node0x1d02530 -> Node0x1d025a0;
	Node0x1d025a0 -> Node0x1d02610;
	Node0x1d02610 -> Node0x1ca2268;
	Node0x1ca2268 -> Node0x1d02ab0;
	Node0x1d02ab0 -> Node0x1d02b00;
edge [color=red]
	Node0x1d01520 -> Node0x1d01bd0;
	Node0x1d01c90 -> Node0x1d01d00;
	Node0x1d01d00 -> Node0x1d01d70;
	Node0x1d01bd0 -> Node0x1d01d70;
	Node0x1d01c90 -> Node0x1d01ec0;
	Node0x1d01e50 -> Node0x1d01f30;
	Node0x1d01f30 -> Node0x1d01fd0;
	Node0x1d02070 -> Node0x1d020e0;
	Node0x1d020e0 -> Node0x1d02150;
	Node0x1d02290 -> Node0x1d02300;
	Node0x1d01de0 -> Node0x1d02300;
	Node0x1d02300 -> Node0x1d02370;
	Node0x1d01e50 -> Node0x1d02370;
	Node0x1d02370 -> Node0x1d023e0;
	Node0x1d01520 -> Node0x1d023e0;
	Node0x1d023e0 -> Node0x1d02450;
	Node0x1d01ec0 -> Node0x1d02450;
	Node0x1d02450 -> Node0x1d024c0;
	Node0x1d01fd0 -> Node0x1d024c0;
	Node0x1d024c0 -> Node0x1d02530;
	Node0x1d02150 -> Node0x1d02530;
	Node0x1d02530 -> Node0x1d025a0;
	Node0x1d021f0 -> Node0x1d025a0;
	Node0x1d01d70 -> Node0x1d02610;
	Node0x1d025a0 -> Node0x1d02610;
	Node0x1d02610 -> Node0x1ca2268;
	Node0x1ca2268 -> Node0x1d02ab0;
}
