; ModuleID = '../.././c_source_file/1766_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1766_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = shl i32 %6, 1
  %8 = or i32 %7, 1
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %0
  %11 = and i32 %2, %1
  %12 = or i32 %11, %10
  %13 = shl i32 %12, 1
  %14 = xor i32 %0, -1
  %15 = and i32 %9, %2
  %16 = and i32 %15, %14
  %17 = or i32 %9, %2
  %18 = and i32 %17, %0
  %19 = or i32 %16, %18
  %20 = sub i32 %3, %13
  %21 = sub i32 %20, %19
  %22 = add i32 %21, %8
  %23 = xor i32 %4, -1
  %24 = or i32 %23, %3
  %25 = shl i32 %24, 1
  %26 = or i32 %4, %3
  %27 = and i32 %4, %3
  %28 = xor i32 %27, -1
  %29 = shl i32 %26, 3
  %30 = or i32 %29, 7
  %31 = xor i32 %25, -2
  %32 = and i32 %23, %3
  %33 = shl i32 %27, 2
  %34 = xor i32 %2, -1
  %35 = and i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %34, %36
  %38 = and i32 %34, %0
  %39 = or i32 %38, %1
  %40 = or i32 %35, %34
  %41 = xor i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = xor i32 %42, %0
  %44 = or i32 %10, %2
  %45 = or i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %2
  %48 = add i32 %41, 1
  %49 = or i32 %2, %0
  %50 = xor i32 %49, %35
  %51 = xor i32 %11, -1
  %52 = or i32 %51, %14
  %53 = xor i32 %2, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %10, %54
  %56 = xor i32 %1, %0
  %57 = or i32 %56, %34
  %58 = shl i32 %57, 1
  %59 = or i32 %9, %0
  %60 = and i32 %41, %59
  %61 = or i32 %34, %1
  %62 = or i32 %34, %0
  %63 = and i32 %62, %56
  %64 = and i32 %53, %56
  %65 = xor i32 %49, -1
  %66 = xor i32 %65, %1
  %67 = or i32 %2, %1
  %68 = xor i32 %67, %0
  %69 = and i32 %11, %14
  %70 = and i32 %41, %0
  %71 = or i32 %69, %70
  %72 = xor i32 %56, -1
  %73 = or i32 %34, %72
  %74 = xor i32 %51, %0
  %75 = or i32 %41, %14
  %76 = xor i32 %16, %75
  %77 = xor i32 %10, %2
  %78 = xor i32 %62, -1
  %79 = xor i32 %78, %1
  %80 = and i32 %15, %0
  %81 = and i32 %17, %14
  %82 = xor i32 %80, -1
  %83 = xor i32 %81, %82
  %84 = and i32 %51, %14
  %85 = xor i32 %61, -1
  %86 = xor i32 %85, %0
  %87 = or i32 %53, %56
  %88 = and i32 %2, %0
  %89 = xor i32 %88, %1
  %90 = or i32 %85, %0
  %91 = or i32 %54, %46
  %92 = or i32 %38, %56
  %93 = xor i32 %38, %1
  %94 = and i32 %42, %14
  %95 = and i32 %34, %1
  %96 = xor i32 %95, -1
  %97 = and i32 %96, %14
  %98 = and i32 %45, %34
  %99 = shl i32 %98, 1
  %100 = xor i32 %10, -1
  %101 = or i32 %41, %35
  %102 = xor i32 %45, %2
  %103 = xor i32 %88, %67
  %104 = shl i32 %103, 1
  %105 = and i32 %96, %0
  %106 = and i32 %49, %1
  %107 = xor i32 %49, %1
  %108 = xor i32 %59, -1
  %109 = xor i32 %108, %2
  %110 = add i32 %2, 1
  %111 = xor i32 %95, %0
  %112 = or i32 %54, %9
  %113 = or i32 %56, %78
  %114 = xor i32 %88, -1
  %115 = and i32 %56, %114
  %116 = shl i32 %115, 2
  %117 = and i32 %59, %42
  %118 = or i32 %53, %35
  %119 = xor i32 %38, -1
  %120 = and i32 %119, %1
  %121 = shl i32 %120, 1
  %122 = or i32 %53, %1
  %123 = and i32 %53, %36
  %124 = xor i32 %11, %0
  %125 = shl i32 %124, 1
  %126 = and i32 %54, %1
  %127 = or i32 %96, %0
  %128 = or i32 %41, %46
  %129 = or i32 %54, %72
  %130 = and i32 %45, %54
  %131 = and i32 %41, %36
  %132 = or i32 %108, %2
  %133 = and i32 %119, %9
  %134 = xor i32 %75, 2147483647
  %135 = or i32 %134, %16
  %136 = shl i32 %135, 1
  %137 = or i32 %38, %85
  %138 = or i32 %88, %72
  %139 = or i32 %42, %0
  %140 = and i32 %53, %59
  %141 = or i32 %53, %72
  %142 = shl i32 %141, 2
  %143 = xor i32 %96, %0
  %144 = and i32 %49, %9
  %145 = and i32 %114, %9
  %146 = or i32 %88, %9
  %147 = or i32 %53, %9
  %148 = and i32 %114, %72
  %149 = or i32 %11, %14
  %150 = or i32 %38, %11
  %151 = and i32 %53, %1
  %152 = shl i32 %151, 1
  %153 = xor i32 %67, -1
  %154 = xor i32 %153, %0
  %155 = or i32 %41, %10
  %156 = and i32 %11, %0
  %157 = xor i32 %41, %0
  %158 = xor i32 %156, %157
  %159 = or i32 %65, %1
  %160 = shl i32 %159, 1
  %161 = and i32 %59, %34
  %162 = or i32 %35, %78
  %163 = and i32 %54, %9
  %164 = or i32 %78, %9
  %165 = xor i32 %156, -1
  %166 = xor i32 %68, %165
  %167 = and i32 %34, %100
  %168 = xor i32 %61, %0
  %169 = add i32 %56, 1
  %170 = and i32 %42, %0
  %171 = or i32 %56, %2
  %172 = or i32 %67, %0
  %173 = and i32 %41, %100
  %174 = or i32 %38, %9
  %175 = xor i32 %10, %51
  %176 = and i32 %54, %100
  %177 = shl i32 %176, 2
  %178 = and i32 %72, %2
  %179 = xor i32 %35, %2
  %180 = shl i32 %179, 1
  %181 = or i32 %85, %14
  %182 = or i32 %35, %42
  %183 = or i32 %10, %34
  %184 = and i32 %34, %72
  %185 = or i32 %88, %108
  %186 = and i32 %41, %45
  %187 = and i32 %119, %72
  %188 = shl i32 %187, 1
  %189 = add i32 %53, 1
  %190 = or i32 %80, %81
  %191 = shl i32 %88, 1
  %192 = xor i32 %46, %2
  %193 = and i32 %49, %72
  %194 = or i32 %95, %10
  %195 = or i32 %42, %108
  %196 = and i32 %51, %0
  %197 = and i32 %114, %1
  %198 = xor i32 %62, %1
  %199 = and i32 %42, %36
  %200 = and i32 %67, %14
  %201 = xor i32 %200, 2147483647
  %202 = xor i32 %201, %156
  %203 = shl i32 %202, 1
  %204 = and i32 %62, %9
  %205 = or i32 %41, %0
  %206 = xor i32 %205, -1
  %207 = or i32 %80, %206
  %208 = or i32 %51, %0
  %209 = xor i32 %10, %96
  %210 = or i32 %156, %200
  %211 = and i32 %67, %0
  %212 = and i32 %61, %0
  %213 = shl i32 %212, 1
  %214 = and i32 %42, %100
  %215 = shl i32 %214, 1
  %216 = or i32 %38, %72
  %217 = and i32 %53, %72
  %218 = or i32 %88, %153
  %219 = or i32 %153, %0
  %220 = shl i32 %219, 1
  %221 = xor i32 %36, %2
  %222 = or i32 %11, %0
  %223 = or i32 %80, %157
  %224 = or i32 %65, %72
  %225 = shl i32 %224, 1
  %226 = and i32 %53, %9
  %227 = xor i32 %119, %1
  %228 = and i32 %54, %36
  %229 = and i32 %41, %14
  %230 = xor i32 %229, %165
  %231 = xor i32 %69, -1
  %232 = xor i32 %211, %231
  %233 = and i32 %59, %54
  %234 = xor i32 %88, %96
  %235 = shl i32 %114, 1
  %236 = or i32 %54, %108
  %237 = or i32 %54, %1
  %238 = xor i32 %67, %35
  %239 = xor i32 %88, %59
  %240 = or i32 %153, %14
  %241 = and i32 %56, %2
  %242 = or i32 %56, %65
  %243 = or i32 %96, %14
  %244 = shl i32 %243, 1
  %245 = or i32 %88, %1
  %246 = or i32 %156, %68
  %247 = and i32 %45, %42
  %248 = or i32 %34, %46
  %249 = or i32 %67, %14
  %250 = or i32 %61, %0
  %251 = and i32 %62, %72
  %252 = xor i32 %59, %2
  %253 = xor i32 %61, %35
  %254 = xor i32 %157, %82
  %255 = and i32 %45, %2
  %256 = and i32 %54, %72
  %257 = add i32 %67, 1
  %258 = or i32 %56, %54
  %259 = and i32 %56, %119
  %260 = or i32 %78, %72
  %261 = xor i32 %70, %231
  %262 = or i32 %41, %108
  %263 = and i32 %100, %2
  %264 = shl i32 %263, 1
  %265 = or i32 %72, %2
  %266 = or i32 %42, %46
  %267 = xor i32 %100, %2
  %268 = and i32 %62, %1
  %269 = add i32 %38, 1
  %270 = or i32 %88, %46
  %271 = or i32 %42, %14
  %272 = or i32 %34, %108
  %273 = or i32 %35, %85
  %274 = and i32 %61, %14
  %275 = and i32 %36, %2
  %276 = or i32 %35, %65
  %277 = and i32 %56, %54
  %278 = shl i32 %277, 1
  %279 = or i32 %95, %14
  %280 = and i32 %56, %34
  %281 = and i32 %49, %56
  %282 = or i32 %53, %108
  %283 = and i32 %53, %100
  %284 = xor i32 %62, %35
  %285 = xor i32 %88, %45
  %286 = add i32 %11, 1
  %287 = shl i32 %56, 1
  %288 = add i32 %62, 1
  %289 = xor i32 %38, %51
  %290 = or i32 %53, %10
  %291 = or i32 %35, %2
  %292 = or i32 %156, %229
  %293 = or i32 %53, %46
  %294 = xor i32 %114, %1
  %295 = or i32 %88, %95
  %296 = or i32 %65, %9
  %297 = or i32 %35, %153
  %298 = or i32 %88, %56
  %299 = and i32 %59, %2
  %300 = or i32 %69, %211
  %301 = xor i32 %80, %205
  %302 = or i32 %10, %42
  %303 = xor i32 %0, 2147483647
  %304 = xor i32 %303, %17
  %305 = xor i32 %304, %80
  %306 = xor i32 %38, %61
  %307 = and i32 %153, %14
  %308 = and i32 %95, %14
  %309 = mul i32 %308, -12
  %310 = and i32 %153, %0
  %311 = and i32 %95, %0
  %312 = and i32 %85, %14
  %313 = mul i32 %312, 14
  %314 = shl i32 %69, 3
  %315 = and i32 %85, %0
  %316 = mul i32 %315, -35
  %317 = mul i32 %156, 17
  %318 = add i32 %100, %46
  %319 = add i32 %318, %184
  %320 = add i32 %319, %132
  %321 = add i32 %320, %102
  %322 = add i32 %321, %73
  %323 = add i32 %322, %289
  %324 = add i32 %323, %205
  %325 = add i32 %324, %250
  %326 = add i32 %325, %242
  %327 = add i32 %326, %228
  %328 = add i32 %327, %204
  %329 = add i32 %328, %194
  %330 = add i32 %329, %174
  %331 = add i32 %330, %75
  %332 = add i32 %331, %138
  %333 = add i32 %332, %128
  %334 = add i32 %333, %105
  %335 = add i32 %334, %87
  %336 = add i32 %335, %305
  %337 = shl i32 %336, 1
  %338 = add i32 %307, %167
  %339 = add i32 %338, %295
  %340 = sub i32 %339, %279
  %341 = sub i32 %340, %226
  %342 = add i32 %341, %254
  %343 = mul i32 %342, 5
  %344 = sub i32 %43, %109
  %345 = sub i32 %344, %126
  %346 = add i32 %345, %23
  %347 = mul i32 %346, 3
  %348 = add i32 %310, %285
  %349 = add i32 %348, %186
  %350 = shl i32 %349, 2
  %351 = add i32 %32, %311
  %352 = mul i32 %351, -6
  %353 = sub i32 1, %35
  %354 = sub i32 %353, %2
  %355 = sub i32 %354, %35
  %356 = add i32 %355, %110
  %357 = add i32 %356, %10
  %358 = add i32 %357, %169
  %359 = add i32 %358, %108
  %360 = sub i32 %359, %45
  %361 = sub i32 %360, %59
  %362 = add i32 %361, %37
  %363 = sub i32 %362, %40
  %364 = sub i32 %363, %44
  %365 = sub i32 %364, %47
  %366 = add i32 %365, %48
  %367 = sub i32 %366, %61
  %368 = add i32 %367, %77
  %369 = sub i32 %368, %38
  %370 = add i32 %369, %85
  %371 = sub i32 %370, %161
  %372 = add i32 %371, %41
  %373 = sub i32 %372, %53
  %374 = add i32 %373, %171
  %375 = sub i32 %374, %178
  %376 = sub i32 %375, %11
  %377 = add i32 %376, %183
  %378 = add i32 %377, %189
  %379 = add i32 %378, %192
  %380 = sub i32 %379, %221
  %381 = add i32 %380, %95
  %382 = add i32 %381, %67
  %383 = sub i32 %382, %241
  %384 = sub i32 %383, %248
  %385 = add i32 %384, %252
  %386 = add i32 %385, %62
  %387 = add i32 %386, %255
  %388 = add i32 %387, %257
  %389 = add i32 %388, %265
  %390 = sub i32 %389, %267
  %391 = add i32 %390, %269
  %392 = add i32 %391, %272
  %393 = add i32 %392, %275
  %394 = add i32 %393, %280
  %395 = add i32 %394, %286
  %396 = sub i32 %395, %287
  %397 = add i32 %396, %288
  %398 = add i32 %397, %291
  %399 = add i32 %398, %299
  %400 = add i32 %399, %39
  %401 = add i32 %400, %50
  %402 = sub i32 %401, %52
  %403 = add i32 %402, %55
  %404 = sub i32 %403, %58
  %405 = add i32 %404, %60
  %406 = add i32 %405, %63
  %407 = sub i32 %406, %64
  %408 = sub i32 %407, %66
  %409 = sub i32 %408, %68
  %410 = sub i32 %409, %74
  %411 = add i32 %410, %79
  %412 = sub i32 %411, %84
  %413 = add i32 %412, %86
  %414 = add i32 %413, %89
  %415 = sub i32 %414, %90
  %416 = add i32 %415, %91
  %417 = add i32 %416, %92
  %418 = sub i32 %417, %93
  %419 = sub i32 %418, %94
  %420 = add i32 %419, %97
  %421 = sub i32 %420, %99
  %422 = sub i32 %421, %101
  %423 = sub i32 %422, %106
  %424 = add i32 %423, %107
  %425 = sub i32 %424, %111
  %426 = add i32 %425, %112
  %427 = add i32 %426, %113
  %428 = sub i32 %427, %117
  %429 = add i32 %428, %118
  %430 = add i32 %429, %122
  %431 = sub i32 %430, %123
  %432 = add i32 %431, %127
  %433 = add i32 %432, %129
  %434 = sub i32 %433, %130
  %435 = add i32 %434, %131
  %436 = sub i32 %435, %133
  %437 = sub i32 %436, %137
  %438 = sub i32 %437, %139
  %439 = sub i32 %438, %140
  %440 = sub i32 %439, %143
  %441 = add i32 %440, %144
  %442 = sub i32 %441, %145
  %443 = sub i32 %442, %146
  %444 = sub i32 %443, %147
  %445 = sub i32 %444, %148
  %446 = sub i32 %445, %149
  %447 = add i32 %446, %150
  %448 = sub i32 %447, %154
  %449 = sub i32 %448, %155
  %450 = add i32 %449, %162
  %451 = sub i32 %450, %163
  %452 = sub i32 %451, %164
  %453 = sub i32 %452, %168
  %454 = add i32 %453, %170
  %455 = add i32 %454, %172
  %456 = add i32 %455, %173
  %457 = sub i32 %456, %175
  %458 = sub i32 %457, %180
  %459 = add i32 %458, %181
  %460 = sub i32 %459, %182
  %461 = add i32 %460, %185
  %462 = sub i32 %461, %191
  %463 = add i32 %462, %193
  %464 = add i32 %463, %195
  %465 = sub i32 %464, %196
  %466 = sub i32 %465, %197
  %467 = add i32 %466, %198
  %468 = add i32 %467, %199
  %469 = add i32 %468, %208
  %470 = sub i32 %469, %209
  %471 = add i32 %470, %211
  %472 = add i32 %471, %216
  %473 = sub i32 %472, %217
  %474 = add i32 %473, %218
  %475 = sub i32 %474, %222
  %476 = add i32 %475, %227
  %477 = add i32 %476, %233
  %478 = add i32 %477, %234
  %479 = sub i32 %478, %235
  %480 = add i32 %479, %236
  %481 = add i32 %480, %237
  %482 = add i32 %481, %238
  %483 = add i32 %482, %200
  %484 = add i32 %483, %239
  %485 = sub i32 %484, %240
  %486 = sub i32 %485, %245
  %487 = add i32 %486, %247
  %488 = add i32 %487, %249
  %489 = add i32 %488, %251
  %490 = add i32 %489, %253
  %491 = sub i32 %490, %70
  %492 = add i32 %491, %256
  %493 = add i32 %492, %258
  %494 = sub i32 %493, %259
  %495 = sub i32 %494, %260
  %496 = sub i32 %495, %262
  %497 = sub i32 %496, %264
  %498 = add i32 %497, %266
  %499 = sub i32 %498, %268
  %500 = sub i32 %499, %270
  %501 = sub i32 %500, %271
  %502 = sub i32 %501, %273
  %503 = add i32 %502, %274
  %504 = sub i32 %503, %276
  %505 = add i32 %504, %281
  %506 = add i32 %505, %229
  %507 = sub i32 %506, %282
  %508 = sub i32 %507, %283
  %509 = add i32 %508, %284
  %510 = sub i32 %509, %157
  %511 = add i32 %510, %290
  %512 = sub i32 %511, %293
  %513 = sub i32 %512, %294
  %514 = sub i32 %513, %296
  %515 = sub i32 %514, %297
  %516 = add i32 %515, %298
  %517 = add i32 %516, %302
  %518 = sub i32 %517, %306
  %519 = add i32 %518, %26
  %520 = add i32 %519, %28
  %521 = add i32 %520, %71
  %522 = add i32 %521, %76
  %523 = sub i32 %522, %83
  %524 = sub i32 %523, %104
  %525 = sub i32 %524, %116
  %526 = sub i32 %525, %121
  %527 = sub i32 %526, %125
  %528 = sub i32 %527, %142
  %529 = sub i32 %528, %152
  %530 = add i32 %529, %158
  %531 = sub i32 %530, %160
  %532 = sub i32 %531, %166
  %533 = sub i32 %532, %177
  %534 = sub i32 %533, %188
  %535 = sub i32 %534, %190
  %536 = add i32 %535, %207
  %537 = sub i32 %536, %210
  %538 = sub i32 %537, %213
  %539 = sub i32 %538, %215
  %540 = sub i32 %539, %220
  %541 = add i32 %540, %223
  %542 = sub i32 %541, %225
  %543 = sub i32 %542, %230
  %544 = add i32 %543, %232
  %545 = sub i32 %544, %244
  %546 = sub i32 %545, %246
  %547 = sub i32 %546, %261
  %548 = sub i32 %547, %278
  %549 = sub i32 %548, %292
  %550 = add i32 %549, %300
  %551 = add i32 %550, %301
  %552 = add i32 %551, %309
  %553 = add i32 %552, %313
  %554 = add i32 %553, %314
  %555 = add i32 %554, %316
  %556 = add i32 %555, %317
  %557 = add i32 %556, %25
  %558 = sub i32 %557, %33
  %559 = add i32 %558, %30
  %560 = sub i32 %559, %31
  %561 = sub i32 %560, %136
  %562 = sub i32 %561, %203
  %563 = add i32 %562, %350
  %564 = add i32 %563, %352
  %565 = add i32 %564, %347
  %566 = add i32 %565, %343
  %567 = add i32 %566, %337
  %568 = icmp eq i32 %22, %567
  %569 = select i1 %568, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %570 = tail call i32 @puts(i8* nonnull dereferenceable(1) %569)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
