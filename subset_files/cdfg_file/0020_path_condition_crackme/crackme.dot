digraph "DFG for'crackme' function" {
	Node0x1afcb20[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x1afcb90[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1afcc50[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x1afccc0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1afcd30[shape=record, label="  %7 = add i32 %6, %3"];
	Node0x1afcda0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1afce10[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1afce80[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1afcef0[shape=record, label="  %11 = xor i32 %5, -1"];
	Node0x1afcf90[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x1afd000[shape=record, label="  %13 = and i32 %4, %0"];
	Node0x1afd070[shape=record, label="  %14 = and i32 %1, %0"];
	Node0x1afd110[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0x1afd180[shape=record, label="  %16 = add i32 %13, %10"];
	Node0x1afd220[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x1afd290[shape=record, label="  %18 = sub i32 2, %0"];
	Node0x1afd300[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0x1afd370[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x1afd3e0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x1afd450[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x1afd4c0[shape=record, label="  %23 = add i32 %22, %17"];
	Node0x1afd530[shape=record, label="  %24 = icmp eq i32 %7, %23"];
	Node0x1a9d268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1afd9d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1afda20[shape=record, label="  ret void"];
	Node0x1afcb20 -> Node0x1afcb90;
	Node0x1afcb90 -> Node0x1afcc50;
	Node0x1afcc50 -> Node0x1afccc0;
	Node0x1afccc0 -> Node0x1afcd30;
	Node0x1afcd30 -> Node0x1afcda0;
	Node0x1afcda0 -> Node0x1afce10;
	Node0x1afce10 -> Node0x1afce80;
	Node0x1afce80 -> Node0x1afcef0;
	Node0x1afcef0 -> Node0x1afcf90;
	Node0x1afcf90 -> Node0x1afd000;
	Node0x1afd000 -> Node0x1afd070;
	Node0x1afd070 -> Node0x1afd110;
	Node0x1afd110 -> Node0x1afd180;
	Node0x1afd180 -> Node0x1afd220;
	Node0x1afd220 -> Node0x1afd290;
	Node0x1afd290 -> Node0x1afd300;
	Node0x1afd300 -> Node0x1afd370;
	Node0x1afd370 -> Node0x1afd3e0;
	Node0x1afd3e0 -> Node0x1afd450;
	Node0x1afd450 -> Node0x1afd4c0;
	Node0x1afd4c0 -> Node0x1afd530;
	Node0x1afd530 -> Node0x1a9d268;
	Node0x1a9d268 -> Node0x1afd9d0;
	Node0x1afd9d0 -> Node0x1afda20;
edge [color=red]
	Node0x1afcb90 -> Node0x1afcc50;
	Node0x1afcc50 -> Node0x1afccc0;
	Node0x1afccc0 -> Node0x1afcd30;
	Node0x1afcb20 -> Node0x1afcd30;
	Node0x1afce10 -> Node0x1afce80;
	Node0x1afcc50 -> Node0x1afcef0;
	Node0x1afcef0 -> Node0x1afcf90;
	Node0x1afcb90 -> Node0x1afd000;
	Node0x1afd070 -> Node0x1afd110;
	Node0x1afd000 -> Node0x1afd180;
	Node0x1afce80 -> Node0x1afd180;
	Node0x1afd180 -> Node0x1afd220;
	Node0x1afd290 -> Node0x1afd300;
	Node0x1afcda0 -> Node0x1afd300;
	Node0x1afd300 -> Node0x1afd370;
	Node0x1afce10 -> Node0x1afd370;
	Node0x1afd370 -> Node0x1afd3e0;
	Node0x1afcf90 -> Node0x1afd3e0;
	Node0x1afd3e0 -> Node0x1afd450;
	Node0x1afd110 -> Node0x1afd450;
	Node0x1afd450 -> Node0x1afd4c0;
	Node0x1afd220 -> Node0x1afd4c0;
	Node0x1afcd30 -> Node0x1afd530;
	Node0x1afd4c0 -> Node0x1afd530;
	Node0x1afd530 -> Node0x1a9d268;
	Node0x1a9d268 -> Node0x1afd9d0;
}
