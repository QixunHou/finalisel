; ModuleID = '../.././c_source_file/0248_path_condition_crackme.c'
source_filename = "../.././c_source_file/0248_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = sub i32 -2, %3
  %7 = or i32 %1, %0
  %8 = xor i32 %7, %2
  %9 = sub i32 %6, %8
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = shl i32 %12, 1
  %14 = sub i32 %9, %13
  %15 = xor i32 %4, %3
  %16 = and i32 %4, %3
  %17 = xor i32 %16, -1
  %18 = or i32 %4, %3
  %19 = xor i32 %4, -1
  %20 = or i32 %19, %3
  %21 = shl i32 %20, 1
  %22 = shl i32 %18, 1
  %23 = xor i32 %22, -2
  %24 = and i32 %19, %3
  %25 = xor i32 %0, -1
  %26 = or i32 %11, %25
  %27 = and i32 %2, %0
  %28 = or i32 %2, %1
  %29 = xor i32 %27, %28
  %30 = and i32 %1, %0
  %31 = or i32 %10, %0
  %32 = xor i32 %31, %30
  %33 = shl i32 %32, 1
  %34 = or i32 %2, %0
  %35 = xor i32 %12, %0
  %36 = and i32 %2, %1
  %37 = xor i32 %36, -1
  %38 = xor i32 %34, -1
  %39 = xor i32 %36, %0
  %40 = xor i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %1
  %43 = and i32 %10, %1
  %44 = xor i32 %43, %0
  %45 = xor i32 %1, -1
  %46 = or i32 %45, %0
  %47 = xor i32 %2, %1
  %48 = xor i32 %47, -1
  %49 = and i32 %46, %48
  %50 = shl i32 %49, 1
  %51 = and i32 %45, %0
  %52 = xor i32 %51, -1
  %53 = and i32 %40, %52
  %54 = and i32 %10, %0
  %55 = and i32 %36, %0
  %56 = xor i32 %47, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %55, %57
  %59 = xor i32 %43, -1
  %60 = xor i32 %59, %0
  %61 = xor i32 %1, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %38, %62
  %64 = add i32 %61, 1
  %65 = and i32 %46, %41
  %66 = shl i32 %10, 1
  %67 = or i32 %12, %0
  %68 = xor i32 %54, %11
  %69 = or i32 %43, %51
  %70 = or i32 %28, %25
  %71 = and i32 %47, %52
  %72 = and i32 %36, %25
  %73 = and i32 %28, %0
  %74 = or i32 %72, %73
  %75 = and i32 %47, %46
  %76 = or i32 %47, %51
  %77 = shl i32 %76, 1
  %78 = xor i32 %28, -1
  %79 = or i32 %78, %25
  %80 = and i32 %7, %10
  %81 = or i32 %27, %61
  %82 = or i32 %36, %0
  %83 = xor i32 %7, -1
  %84 = or i32 %40, %83
  %85 = and i32 %28, %25
  %86 = or i32 %55, %85
  %87 = and i32 %45, %2
  %88 = and i32 %87, %25
  %89 = or i32 %45, %2
  %90 = and i32 %89, %0
  %91 = xor i32 %90, -1
  %92 = xor i32 %88, %91
  %93 = or i32 %61, %41
  %94 = xor i32 %46, -1
  %95 = or i32 %94, %2
  %96 = or i32 %61, %38
  %97 = and i32 %62, %2
  %98 = and i32 %10, %62
  %99 = and i32 %47, %25
  %100 = or i32 %55, %99
  %101 = or i32 %48, %83
  %102 = and i32 %46, %10
  %103 = and i32 %48, %0
  %104 = or i32 %36, %51
  %105 = or i32 %59, %25
  %106 = and i32 %87, %0
  %107 = xor i32 %89, %0
  %108 = xor i32 %107, -1
  %109 = xor i32 %106, %108
  %110 = or i32 %10, %94
  %111 = xor i32 %30, -1
  %112 = xor i32 %111, %2
  %113 = or i32 %27, %1
  %114 = and i32 %41, %111
  %115 = and i32 %37, %0
  %116 = add i32 %30, 1
  %117 = xor i32 %31, -1
  %118 = xor i32 %117, %1
  %119 = xor i32 %28, %30
  %120 = add i32 %1, 1
  %121 = xor i32 %11, %30
  %122 = and i32 %40, %46
  %123 = shl i32 %122, 1
  %124 = xor i32 %27, -1
  %125 = and i32 %124, %1
  %126 = and i32 %89, %25
  %127 = or i32 %106, %126
  %128 = and i32 %7, %41
  %129 = or i32 %117, %45
  %130 = and i32 %124, %62
  %131 = or i32 %106, %56
  %132 = or i32 %54, %45
  %133 = and i32 %40, %61
  %134 = and i32 %41, %45
  %135 = and i32 %59, %0
  %136 = xor i32 %51, %59
  %137 = or i32 %47, %83
  %138 = and i32 %48, %111
  %139 = or i32 %51, %2
  %140 = shl i32 %139, 1
  %141 = or i32 %37, %0
  %142 = and i32 %61, %10
  %143 = or i32 %59, %0
  %144 = or i32 %38, %45
  %145 = or i32 %28, %0
  %146 = xor i32 %28, %0
  %147 = xor i32 %146, 2147483647
  %148 = xor i32 %147, %55
  %149 = or i32 %43, %0
  %150 = or i32 %43, %25
  %151 = or i32 %40, %45
  %152 = xor i32 %124, %1
  %153 = xor i32 %34, %1
  %154 = or i32 %27, %94
  %155 = and i32 %48, %52
  %156 = xor i32 %55, -1
  %157 = xor i32 %99, %156
  %158 = or i32 %83, %2
  %159 = or i32 %41, %45
  %160 = shl i32 %159, 1
  %161 = or i32 %27, %62
  %162 = or i32 %78, %0
  %163 = and i32 %31, %45
  %164 = or i32 %41, %62
  %165 = or i32 %30, %2
  %166 = shl i32 %40, 1
  %167 = xor i32 %51, %2
  %168 = shl i32 %167, 2
  %169 = and i32 %47, %7
  %170 = or i32 %51, %41
  %171 = xor i32 %106, %57
  %172 = shl i32 %52, 2
  %173 = and i32 %11, %25
  %174 = or i32 %88, %90
  %175 = xor i32 %94, %2
  %176 = or i32 %30, %48
  %177 = or i32 %117, %62
  %178 = xor i32 %55, %56
  %179 = xor i32 %27, %46
  %180 = xor i32 %83, %2
  %181 = and i32 %47, %0
  %182 = or i32 %72, %181
  %183 = and i32 %40, %111
  %184 = or i32 %41, %94
  %185 = and i32 %10, %111
  %186 = or i32 %51, %10
  %187 = xor i32 %51, %37
  %188 = and i32 %52, %2
  %189 = or i32 %47, %25
  %190 = or i32 %62, %2
  %191 = xor i32 %27, %1
  %192 = or i32 %10, %62
  %193 = xor i32 %54, -1
  %194 = and i32 %193, %62
  %195 = or i32 %54, %12
  %196 = shl i32 %83, 1
  %197 = xor i32 %34, %30
  %198 = shl i32 %197, 1
  %199 = xor i32 %78, %0
  %200 = and i32 %124, %45
  %201 = or i32 %30, %38
  %202 = or i32 %11, %0
  %203 = or i32 %61, %117
  %204 = or i32 %40, %61
  %205 = xor i32 %38, %1
  %206 = and i32 %40, %62
  %207 = xor i32 %193, %1
  %208 = and i32 %111, %2
  %209 = and i32 %61, %124
  %210 = and i32 %7, %48
  %211 = and i32 %46, %2
  %212 = and i32 %61, %41
  %213 = and i32 %7, %2
  %214 = or i32 %41, %83
  %215 = and i32 %11, %0
  %216 = shl i32 %215, 1
  %217 = add i32 %46, 1
  %218 = and i32 %61, %2
  %219 = shl i32 %218, 1
  %220 = and i32 %47, %111
  %221 = and i32 %41, %1
  %222 = and i32 %31, %1
  %223 = or i32 %27, %43
  %224 = xor i32 %72, -1
  %225 = xor i32 %73, %224
  %226 = or i32 %54, %1
  %227 = or i32 %48, %25
  %228 = or i32 %27, %45
  %229 = or i32 %40, %51
  %230 = shl i32 %229, 1
  %231 = or i32 %48, %94
  %232 = or i32 %30, %12
  %233 = shl i32 %232, 1
  %234 = xor i32 %31, %1
  %235 = or i32 %30, %41
  %236 = and i32 %37, %25
  %237 = or i32 %47, %0
  %238 = and i32 %41, %52
  %239 = and i32 %34, %61
  %240 = and i32 %48, %25
  %241 = or i32 %48, %0
  %242 = or i32 %40, %94
  %243 = or i32 %30, %78
  %244 = xor i32 %54, %1
  %245 = and i32 %31, %62
  %246 = and i32 %34, %45
  %247 = and i32 %193, %1
  %248 = xor i32 %88, %189
  %249 = and i32 %193, %45
  %250 = or i32 %12, %25
  %251 = or i32 %27, %83
  %252 = or i32 %36, %25
  %253 = add i32 %54, 1
  %254 = add i32 %47, 1
  %255 = xor i32 %237, -1
  %256 = or i32 %106, %255
  %257 = or i32 %54, %62
  %258 = xor i32 %46, %2
  %259 = xor i32 %48, %0
  %260 = shl i32 %259, 1
  %261 = or i32 %30, %117
  %262 = and i32 %40, %45
  %263 = or i32 %37, %25
  %264 = shl i32 %263, 1
  %265 = xor i32 %11, %0
  %266 = or i32 %54, %36
  %267 = or i32 %27, %78
  %268 = xor i32 %126, 2147483647
  %269 = xor i32 %268, %106
  %270 = shl i32 %269, 1
  %271 = or i32 %61, %10
  %272 = or i32 %106, %107
  %273 = or i32 %40, %62
  %274 = and i32 %34, %62
  %275 = or i32 %38, %1
  %276 = xor i32 %27, %7
  %277 = shl i32 %276, 1
  %278 = shl i32 %30, 1
  %279 = and i32 %40, %7
  %280 = shl i32 %279, 1
  %281 = or i32 %47, %94
  %282 = and i32 %10, %52
  %283 = and i32 %61, %193
  %284 = or i32 %40, %30
  %285 = and i32 %41, %62
  %286 = xor i32 %37, %0
  %287 = or i32 %54, %61
  %288 = and i32 %40, %1
  %289 = xor i32 %54, %37
  %290 = xor i32 %30, %2
  %291 = or i32 %30, %10
  %292 = or i32 %47, %30
  %293 = or i32 %40, %1
  %294 = or i32 %61, %2
  %295 = and i32 %34, %1
  %296 = and i32 %59, %25
  %297 = xor i32 %106, %237
  %298 = or i32 %117, %1
  %299 = shl i32 %298, 1
  %300 = xor i32 %181, %224
  %301 = xor i32 %85, %156
  %302 = xor i32 %27, %59
  %303 = shl i32 %302, 1
  %304 = or i32 %51, %48
  %305 = xor i32 %52, %2
  %306 = xor i32 %189, -1
  %307 = or i32 %88, %306
  %308 = add i32 %27, 1
  %309 = and i32 %31, %61
  %310 = and i32 %78, %25
  %311 = and i32 %43, %25
  %312 = mul i32 %311, -20
  %313 = and i32 %78, %0
  %314 = mul i32 %313, -7
  %315 = and i32 %43, %0
  %316 = mul i32 %315, 12
  %317 = and i32 %12, %25
  %318 = shl i32 %317, 4
  %319 = mul i32 %72, -14
  %320 = and i32 %12, %0
  %321 = mul i32 %320, -18
  %322 = add i32 %112, %11
  %323 = add i32 %322, %110
  %324 = add i32 %323, %227
  %325 = add i32 %324, %222
  %326 = add i32 %325, %210
  %327 = add i32 %326, %184
  %328 = add i32 %327, %162
  %329 = add i32 %328, %152
  %330 = add i32 %329, %145
  %331 = add i32 %330, %137
  %332 = add i32 %331, %104
  %333 = add i32 %332, %44
  %334 = add i32 %333, %148
  %335 = shl i32 %334, 1
  %336 = add i32 %55, %180
  %337 = sub i32 %141, %336
  %338 = sub i32 %337, %130
  %339 = add i32 %338, %16
  %340 = mul i32 %339, 3
  %341 = sub i32 %95, %118
  %342 = add i32 %341, %204
  %343 = mul i32 %342, 5
  %344 = add i32 %154, 1073741823
  %345 = add i32 %344, %310
  %346 = add i32 %345, %105
  %347 = add i32 %346, %35
  %348 = shl i32 %347, 2
  %349 = shl i32 %0, 1
  %350 = sub i32 %120, %349
  %351 = add i32 %350, %1
  %352 = add i32 %351, %64
  %353 = sub i32 %352, %46
  %354 = add i32 %353, %116
  %355 = add i32 %354, %7
  %356 = add i32 %355, %2
  %357 = add i32 %356, %61
  %358 = add i32 %357, %217
  %359 = sub i32 %358, %51
  %360 = add i32 %359, %37
  %361 = add i32 %360, %54
  %362 = sub i32 %361, %66
  %363 = add i32 %362, %80
  %364 = add i32 %363, %47
  %365 = add i32 %364, %97
  %366 = sub i32 %365, %98
  %367 = add i32 %366, %102
  %368 = add i32 %367, %41
  %369 = add i32 %368, %117
  %370 = sub i32 %369, %142
  %371 = sub i32 %370, %36
  %372 = add i32 %371, %158
  %373 = add i32 %372, %165
  %374 = sub i32 %373, %172
  %375 = sub i32 %374, %175
  %376 = sub i32 %375, %185
  %377 = add i32 %376, %186
  %378 = sub i32 %377, %188
  %379 = add i32 %378, %190
  %380 = sub i32 %379, %192
  %381 = sub i32 %380, %196
  %382 = add i32 %381, %27
  %383 = sub i32 %382, %208
  %384 = sub i32 %383, %211
  %385 = add i32 %384, %213
  %386 = add i32 %385, %253
  %387 = add i32 %386, %254
  %388 = sub i32 %387, %258
  %389 = add i32 %388, %271
  %390 = sub i32 %389, %278
  %391 = sub i32 %390, %282
  %392 = add i32 %391, %290
  %393 = sub i32 %392, %291
  %394 = sub i32 %393, %294
  %395 = add i32 %394, %305
  %396 = add i32 %395, %308
  %397 = sub i32 %396, %26
  %398 = sub i32 %397, %29
  %399 = add i32 %398, %39
  %400 = sub i32 %399, %42
  %401 = add i32 %400, %53
  %402 = sub i32 %401, %60
  %403 = sub i32 %402, %63
  %404 = add i32 %403, %65
  %405 = sub i32 %404, %67
  %406 = sub i32 %405, %68
  %407 = sub i32 %406, %69
  %408 = add i32 %407, %70
  %409 = add i32 %408, %71
  %410 = add i32 %409, %75
  %411 = add i32 %410, %79
  %412 = add i32 %411, %81
  %413 = add i32 %412, %82
  %414 = add i32 %413, %84
  %415 = add i32 %414, %93
  %416 = add i32 %415, %96
  %417 = sub i32 %416, %101
  %418 = add i32 %417, %103
  %419 = sub i32 %418, %56
  %420 = sub i32 %419, %113
  %421 = add i32 %420, %114
  %422 = sub i32 %421, %115
  %423 = sub i32 %422, %99
  %424 = sub i32 %423, %119
  %425 = add i32 %424, %121
  %426 = add i32 %425, %125
  %427 = sub i32 %426, %85
  %428 = add i32 %427, %128
  %429 = sub i32 %428, %129
  %430 = add i32 %429, %132
  %431 = add i32 %430, %133
  %432 = add i32 %431, %134
  %433 = sub i32 %432, %135
  %434 = sub i32 %433, %136
  %435 = sub i32 %434, %138
  %436 = sub i32 %435, %140
  %437 = add i32 %436, %143
  %438 = sub i32 %437, %144
  %439 = sub i32 %438, %149
  %440 = add i32 %439, %150
  %441 = sub i32 %440, %151
  %442 = add i32 %441, %153
  %443 = add i32 %442, %155
  %444 = sub i32 %443, %161
  %445 = add i32 %444, %163
  %446 = sub i32 %445, %164
  %447 = sub i32 %446, %166
  %448 = sub i32 %447, %168
  %449 = add i32 %448, %169
  %450 = sub i32 %449, %170
  %451 = add i32 %450, %173
  %452 = add i32 %451, %176
  %453 = sub i32 %452, %177
  %454 = sub i32 %453, %179
  %455 = add i32 %454, %183
  %456 = add i32 %455, %187
  %457 = add i32 %456, %189
  %458 = sub i32 %457, %191
  %459 = sub i32 %458, %194
  %460 = sub i32 %459, %195
  %461 = sub i32 %460, %199
  %462 = sub i32 %461, %200
  %463 = sub i32 %462, %201
  %464 = add i32 %463, %202
  %465 = sub i32 %464, %203
  %466 = sub i32 %465, %73
  %467 = add i32 %466, %205
  %468 = add i32 %467, %206
  %469 = sub i32 %468, %207
  %470 = add i32 %469, %209
  %471 = add i32 %470, %212
  %472 = add i32 %471, %214
  %473 = sub i32 %472, %219
  %474 = sub i32 %473, %220
  %475 = add i32 %474, %221
  %476 = add i32 %475, %223
  %477 = sub i32 %476, %226
  %478 = add i32 %477, %228
  %479 = add i32 %478, %231
  %480 = sub i32 %479, %234
  %481 = sub i32 %480, %235
  %482 = sub i32 %481, %236
  %483 = add i32 %482, %237
  %484 = sub i32 %483, %238
  %485 = sub i32 %484, %239
  %486 = add i32 %485, %240
  %487 = add i32 %486, %241
  %488 = add i32 %487, %242
  %489 = add i32 %488, %243
  %490 = add i32 %489, %244
  %491 = sub i32 %490, %245
  %492 = add i32 %491, %246
  %493 = add i32 %492, %247
  %494 = sub i32 %493, %181
  %495 = sub i32 %494, %249
  %496 = add i32 %495, %250
  %497 = sub i32 %496, %251
  %498 = sub i32 %497, %252
  %499 = sub i32 %498, %257
  %500 = add i32 %499, %261
  %501 = add i32 %500, %262
  %502 = add i32 %501, %265
  %503 = add i32 %502, %266
  %504 = sub i32 %503, %267
  %505 = sub i32 %504, %273
  %506 = sub i32 %505, %274
  %507 = sub i32 %506, %275
  %508 = sub i32 %507, %281
  %509 = sub i32 %508, %283
  %510 = add i32 %509, %284
  %511 = sub i32 %510, %285
  %512 = add i32 %511, %286
  %513 = sub i32 %512, %146
  %514 = add i32 %513, %287
  %515 = sub i32 %514, %288
  %516 = sub i32 %515, %289
  %517 = sub i32 %516, %292
  %518 = sub i32 %517, %293
  %519 = add i32 %518, %295
  %520 = add i32 %519, %296
  %521 = add i32 %520, %304
  %522 = add i32 %521, %309
  %523 = add i32 %522, %15
  %524 = add i32 %523, %17
  %525 = sub i32 %524, %18
  %526 = add i32 %525, %24
  %527 = sub i32 %526, %33
  %528 = sub i32 %527, %50
  %529 = sub i32 %528, %58
  %530 = sub i32 %529, %74
  %531 = sub i32 %530, %77
  %532 = add i32 %531, %86
  %533 = add i32 %532, %92
  %534 = sub i32 %533, %100
  %535 = sub i32 %534, %109
  %536 = sub i32 %535, %123
  %537 = add i32 %536, %127
  %538 = sub i32 %537, %131
  %539 = sub i32 %538, %157
  %540 = sub i32 %539, %160
  %541 = add i32 %540, %171
  %542 = add i32 %541, %174
  %543 = add i32 %542, %178
  %544 = sub i32 %543, %182
  %545 = sub i32 %544, %198
  %546 = sub i32 %545, %216
  %547 = add i32 %546, %225
  %548 = sub i32 %547, %230
  %549 = sub i32 %548, %233
  %550 = add i32 %549, %248
  %551 = add i32 %550, %256
  %552 = sub i32 %551, %260
  %553 = sub i32 %552, %264
  %554 = sub i32 %553, %272
  %555 = sub i32 %554, %277
  %556 = sub i32 %555, %280
  %557 = add i32 %556, %297
  %558 = sub i32 %557, %299
  %559 = sub i32 %558, %300
  %560 = add i32 %559, %301
  %561 = sub i32 %560, %303
  %562 = add i32 %561, %307
  %563 = add i32 %562, %312
  %564 = add i32 %563, %314
  %565 = add i32 %564, %316
  %566 = add i32 %565, %318
  %567 = add i32 %566, %319
  %568 = add i32 %567, %321
  %569 = sub i32 %568, %21
  %570 = add i32 %569, %23
  %571 = sub i32 %570, %270
  %572 = add i32 %571, %343
  %573 = add i32 %572, %348
  %574 = add i32 %573, %340
  %575 = add i32 %574, %335
  %576 = icmp eq i32 %14, %575
  %577 = select i1 %576, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %578 = tail call i32 @puts(i8* nonnull dereferenceable(1) %577)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
