digraph "DFG for'crackme' function" {
	Node0x18f35a0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x18f3c50[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x18f3d10[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x18f3d80[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x18f3e20[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x18f3e90[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x18f3f00[shape=record, label="  %9 = or i32 %7, %0"];
	Node0x18f3f70[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x18f3fe0[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0x18f4050[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x18f40f0[shape=record, label="  %13 = shl i32 %11, 2"];
	Node0x18f4190[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x18f4230[shape=record, label="  %15 = shl i32 %10, 3"];
	Node0x18f42d0[shape=record, label="  %16 = xor i32 %15, -8"];
	Node0x18f4370[shape=record, label="  %17 = mul i32 %3, -5"];
	Node0x18f43e0[shape=record, label="  %18 = shl i32 %9, 1"];
	Node0x18f4450[shape=record, label="  %19 = add i32 %1, 1"];
	Node0x18f44c0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x18f4530[shape=record, label="  %21 = add i32 %20, %6"];
	Node0x18f45a0[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x18f4610[shape=record, label="  %23 = sub i32 %22, %12"];
	Node0x18f4680[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x18f46f0[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x18f4760[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x18f47d0[shape=record, label="  %27 = sub i32 %26, %16"];
	Node0x18f4840[shape=record, label="  %28 = icmp eq i32 %4, %27"];
	Node0x1894268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18f4ce0[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x18f4d30[shape=record, label="  ret void"];
	Node0x18f35a0 -> Node0x18f3c50;
	Node0x18f3c50 -> Node0x18f3d10;
	Node0x18f3d10 -> Node0x18f3d80;
	Node0x18f3d80 -> Node0x18f3e20;
	Node0x18f3e20 -> Node0x18f3e90;
	Node0x18f3e90 -> Node0x18f3f00;
	Node0x18f3f00 -> Node0x18f3f70;
	Node0x18f3f70 -> Node0x18f3fe0;
	Node0x18f3fe0 -> Node0x18f4050;
	Node0x18f4050 -> Node0x18f40f0;
	Node0x18f40f0 -> Node0x18f4190;
	Node0x18f4190 -> Node0x18f4230;
	Node0x18f4230 -> Node0x18f42d0;
	Node0x18f42d0 -> Node0x18f4370;
	Node0x18f4370 -> Node0x18f43e0;
	Node0x18f43e0 -> Node0x18f4450;
	Node0x18f4450 -> Node0x18f44c0;
	Node0x18f44c0 -> Node0x18f4530;
	Node0x18f4530 -> Node0x18f45a0;
	Node0x18f45a0 -> Node0x18f4610;
	Node0x18f4610 -> Node0x18f4680;
	Node0x18f4680 -> Node0x18f46f0;
	Node0x18f46f0 -> Node0x18f4760;
	Node0x18f4760 -> Node0x18f47d0;
	Node0x18f47d0 -> Node0x18f4840;
	Node0x18f4840 -> Node0x1894268;
	Node0x1894268 -> Node0x18f4ce0;
	Node0x18f4ce0 -> Node0x18f4d30;
edge [color=red]
	Node0x18f35a0 -> Node0x18f3c50;
	Node0x18f3d10 -> Node0x18f3d80;
	Node0x18f3e20 -> Node0x18f3e90;
	Node0x18f3e20 -> Node0x18f3f00;
	Node0x18f3fe0 -> Node0x18f4050;
	Node0x18f3fe0 -> Node0x18f40f0;
	Node0x18f40f0 -> Node0x18f4190;
	Node0x18f3f70 -> Node0x18f4230;
	Node0x18f4230 -> Node0x18f42d0;
	Node0x18f35a0 -> Node0x18f4370;
	Node0x18f3f00 -> Node0x18f43e0;
	Node0x18f4450 -> Node0x18f44c0;
	Node0x18f3e90 -> Node0x18f44c0;
	Node0x18f44c0 -> Node0x18f4530;
	Node0x18f3d80 -> Node0x18f4530;
	Node0x18f4530 -> Node0x18f45a0;
	Node0x18f3f70 -> Node0x18f45a0;
	Node0x18f45a0 -> Node0x18f4610;
	Node0x18f4050 -> Node0x18f4610;
	Node0x18f4610 -> Node0x18f4680;
	Node0x18f4370 -> Node0x18f4680;
	Node0x18f4680 -> Node0x18f46f0;
	Node0x18f43e0 -> Node0x18f46f0;
	Node0x18f46f0 -> Node0x18f4760;
	Node0x18f4190 -> Node0x18f4760;
	Node0x18f4760 -> Node0x18f47d0;
	Node0x18f42d0 -> Node0x18f47d0;
	Node0x18f3c50 -> Node0x18f4840;
	Node0x18f47d0 -> Node0x18f4840;
	Node0x18f4840 -> Node0x1894268;
	Node0x1894268 -> Node0x18f4ce0;
}
