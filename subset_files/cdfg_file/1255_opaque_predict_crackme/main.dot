digraph "DFG for'main' function" {
	Node0x15d02d8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x15d0358[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x15d03e8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x15d0448[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x15d08c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x15d09a8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x15d0aa8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x15d0b68[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x15d0c18[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x15d0e78[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x15d0f38[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x15d1098[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x15d10f8[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x15d29a0[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x15d2ba8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x15d2d08[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x15d2e18[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x15d2ed8[shape=record, label="  ret i32 0"];
	Node0x15d02d8 -> Node0x15d0358;
	Node0x15d0358 -> Node0x15d03e8;
	Node0x15d03e8 -> Node0x15d0448;
	Node0x15d0448 -> Node0x15d08c8;
	Node0x15d08c8 -> Node0x15d09a8;
	Node0x15d09a8 -> Node0x15d0aa8;
	Node0x15d0aa8 -> Node0x15d0b68;
	Node0x15d0b68 -> Node0x15d0c18;
	Node0x15d0c18 -> Node0x15d0e78;
	Node0x15d0e78 -> Node0x15d0f38;
	Node0x15d0f38 -> Node0x15d1098;
	Node0x15d1098 -> Node0x15d10f8;
	Node0x15d10f8 -> Node0x15d29a0;
	Node0x15d29a0 -> Node0x15d2ba8;
	Node0x15d2ba8 -> Node0x15d2d08;
	Node0x15d2d08 -> Node0x15d2e18;
	Node0x15d2e18 -> Node0x15d2ed8;
edge [color=red]
	Node0x15d02d8 -> Node0x15d0448;
	Node0x15d0448 -> Node0x15d08c8;
	Node0x15d0358 -> Node0x15d09a8;
	Node0x15d09a8 -> Node0x15d0aa8;
	Node0x15d03e8 -> Node0x15d0b68;
	Node0x15d0b68 -> Node0x15d0c18;
	Node0x15d02d8 -> Node0x15d0e78;
	Node0x15d0358 -> Node0x15d0e78;
	Node0x15d03e8 -> Node0x15d0e78;
	Node0x15d02d8 -> Node0x15d0f38;
	Node0x15d0358 -> Node0x15d1098;
	Node0x15d03e8 -> Node0x15d10f8;
	Node0x15d0f38 -> Node0x15d29a0;
	Node0x15d1098 -> Node0x15d29a0;
	Node0x15d10f8 -> Node0x15d29a0;
	Node0x15d0b68 -> Node0x15d2ba8;
	Node0x15d09a8 -> Node0x15d2d08;
	Node0x15d0448 -> Node0x15d2e18;
}
