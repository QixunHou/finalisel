digraph "DFG for'crackme' function" {
	Node0x1a7bca0[shape=record, label="  %3 = sub i32 0, %0"];
	Node0x1a7bd40[shape=record, label="  %4 = shl i32 %0, 1"];
	Node0x1a7be00[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0x1a7bea0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1a7bf10[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x1a7bf80[shape=record, label="  %8 = and i32 %6, %0"];
	Node0x1a7bff0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1a7c060[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1a7c0d0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x1a7c140[shape=record, label="  %12 = xor i32 %7, -1"];
	Node0x1a7c1b0[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x1a7c220[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1a7c290[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1a7c300[shape=record, label="  %16 = xor i32 %0, -1"];
	Node0x1a7c370[shape=record, label="  %17 = and i32 %16, %1"];
	Node0x1a7c410[shape=record, label="  %18 = mul i32 %17, 5"];
	Node0x1a7c480[shape=record, label="  %19 = sub i32 %12, %11"];
	Node0x1a7c520[shape=record, label="  %20 = mul i32 %19, 3"];
	Node0x1a7c5c0[shape=record, label="  %21 = sub i32 2, %1"];
	Node0x1a7c630[shape=record, label="  %22 = add i32 %21, %6"];
	Node0x1a7c6a0[shape=record, label="  %23 = sub i32 %22, %5"];
	Node0x1a7c710[shape=record, label="  %24 = sub i32 %23, %7"];
	Node0x1a7c780[shape=record, label="  %25 = add i32 %24, %11"];
	Node0x1a7c7f0[shape=record, label="  %26 = sub i32 %25, %13"];
	Node0x1a7c860[shape=record, label="  %27 = add i32 %26, %18"];
	Node0x1a7c8d0[shape=record, label="  %28 = add i32 %27, %9"];
	Node0x1a7c940[shape=record, label="  %29 = add i32 %28, %10"];
	Node0x1a7c9b0[shape=record, label="  %30 = sub i32 %29, %15"];
	Node0x1a7ca20[shape=record, label="  %31 = add i32 %30, %20"];
	Node0x1a7ca90[shape=record, label="  %32 = icmp eq i32 %31, %3"];
	Node0x1a1c268[shape=record, label="  %33 = select i1 %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a7d140[shape=record, label="  %34 = tail call i32 @puts(i8* nonnull dereferenceable(1) %33)"];
	Node0x1a7d190[shape=record, label="  ret void"];
	Node0x1a7bca0 -> Node0x1a7bd40;
	Node0x1a7bd40 -> Node0x1a7be00;
	Node0x1a7be00 -> Node0x1a7bea0;
	Node0x1a7bea0 -> Node0x1a7bf10;
	Node0x1a7bf10 -> Node0x1a7bf80;
	Node0x1a7bf80 -> Node0x1a7bff0;
	Node0x1a7bff0 -> Node0x1a7c060;
	Node0x1a7c060 -> Node0x1a7c0d0;
	Node0x1a7c0d0 -> Node0x1a7c140;
	Node0x1a7c140 -> Node0x1a7c1b0;
	Node0x1a7c1b0 -> Node0x1a7c220;
	Node0x1a7c220 -> Node0x1a7c290;
	Node0x1a7c290 -> Node0x1a7c300;
	Node0x1a7c300 -> Node0x1a7c370;
	Node0x1a7c370 -> Node0x1a7c410;
	Node0x1a7c410 -> Node0x1a7c480;
	Node0x1a7c480 -> Node0x1a7c520;
	Node0x1a7c520 -> Node0x1a7c5c0;
	Node0x1a7c5c0 -> Node0x1a7c630;
	Node0x1a7c630 -> Node0x1a7c6a0;
	Node0x1a7c6a0 -> Node0x1a7c710;
	Node0x1a7c710 -> Node0x1a7c780;
	Node0x1a7c780 -> Node0x1a7c7f0;
	Node0x1a7c7f0 -> Node0x1a7c860;
	Node0x1a7c860 -> Node0x1a7c8d0;
	Node0x1a7c8d0 -> Node0x1a7c940;
	Node0x1a7c940 -> Node0x1a7c9b0;
	Node0x1a7c9b0 -> Node0x1a7ca20;
	Node0x1a7ca20 -> Node0x1a7ca90;
	Node0x1a7ca90 -> Node0x1a1c268;
	Node0x1a1c268 -> Node0x1a7d140;
	Node0x1a7d140 -> Node0x1a7d190;
edge [color=red]
	Node0x1a7bd40 -> Node0x1a7be00;
	Node0x1a7bea0 -> Node0x1a7bf80;
	Node0x1a7bf80 -> Node0x1a7bff0;
	Node0x1a7bff0 -> Node0x1a7c060;
	Node0x1a7bf10 -> Node0x1a7c140;
	Node0x1a7c1b0 -> Node0x1a7c220;
	Node0x1a7c220 -> Node0x1a7c290;
	Node0x1a7c300 -> Node0x1a7c370;
	Node0x1a7c370 -> Node0x1a7c410;
	Node0x1a7c140 -> Node0x1a7c480;
	Node0x1a7c0d0 -> Node0x1a7c480;
	Node0x1a7c480 -> Node0x1a7c520;
	Node0x1a7c5c0 -> Node0x1a7c630;
	Node0x1a7bea0 -> Node0x1a7c630;
	Node0x1a7c630 -> Node0x1a7c6a0;
	Node0x1a7be00 -> Node0x1a7c6a0;
	Node0x1a7c6a0 -> Node0x1a7c710;
	Node0x1a7bf10 -> Node0x1a7c710;
	Node0x1a7c710 -> Node0x1a7c780;
	Node0x1a7c0d0 -> Node0x1a7c780;
	Node0x1a7c780 -> Node0x1a7c7f0;
	Node0x1a7c1b0 -> Node0x1a7c7f0;
	Node0x1a7c7f0 -> Node0x1a7c860;
	Node0x1a7c410 -> Node0x1a7c860;
	Node0x1a7c860 -> Node0x1a7c8d0;
	Node0x1a7bff0 -> Node0x1a7c8d0;
	Node0x1a7c8d0 -> Node0x1a7c940;
	Node0x1a7c060 -> Node0x1a7c940;
	Node0x1a7c940 -> Node0x1a7c9b0;
	Node0x1a7c290 -> Node0x1a7c9b0;
	Node0x1a7c9b0 -> Node0x1a7ca20;
	Node0x1a7c520 -> Node0x1a7ca20;
	Node0x1a7ca20 -> Node0x1a7ca90;
	Node0x1a7bca0 -> Node0x1a7ca90;
	Node0x1a7ca90 -> Node0x1a1c268;
	Node0x1a1c268 -> Node0x1a7d140;
}
