; ModuleID = '../.././c_source_file/0420_path_condition_crackme.c'
source_filename = "../.././c_source_file/0420_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = or i32 %4, %2
  %6 = mul i32 %5, -2
  %7 = xor i32 %2, -1
  %8 = and i32 %1, %0
  %9 = or i32 %8, %7
  %10 = xor i32 %0, -1
  %11 = and i32 %7, %1
  %12 = or i32 %11, %10
  %13 = or i32 %7, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %8, %14
  %16 = shl i32 %15, 1
  %17 = or i32 %1, %0
  %18 = xor i32 %17, -1
  %19 = xor i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = or i32 %20, %18
  %22 = xor i32 %1, -1
  %23 = and i32 %20, %22
  %24 = and i32 %2, %0
  %25 = or i32 %22, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %24, %26
  %28 = shl i32 %27, 1
  %29 = or i32 %19, %4
  %30 = or i32 %20, %1
  %31 = xor i32 %24, %1
  %32 = xor i32 %8, -1
  %33 = and i32 %20, %32
  %34 = xor i32 %24, -1
  %35 = and i32 %4, %34
  %36 = shl i32 %35, 1
  %37 = xor i32 %4, -1
  %38 = and i32 %34, %37
  %39 = and i32 %7, %0
  %40 = or i32 %39, %1
  %41 = xor i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = and i32 %25, %42
  %44 = or i32 %41, %0
  %45 = and i32 %22, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %46, %2
  %48 = xor i32 %39, -1
  %49 = and i32 %48, %37
  %50 = or i32 %19, %26
  %51 = and i32 %22, %2
  %52 = and i32 %51, %0
  %53 = xor i32 %44, -1
  %54 = or i32 %52, %53
  %55 = and i32 %17, %20
  %56 = and i32 %2, %1
  %57 = or i32 %56, %10
  %58 = shl i32 %57, 2
  %59 = and i32 %13, %22
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = or i32 %4, %61
  %63 = or i32 %56, %45
  %64 = xor i32 %34, %1
  %65 = xor i32 %41, %0
  %66 = or i32 %52, %65
  %67 = and i32 %19, %22
  %68 = or i32 %2, %1
  %69 = or i32 %68, %0
  %70 = shl i32 %69, 1
  %71 = and i32 %41, %32
  %72 = and i32 %51, %10
  %73 = or i32 %41, %10
  %74 = xor i32 %73, -1
  %75 = or i32 %72, %74
  %76 = xor i32 %56, %0
  %77 = add i32 %4, 1
  %78 = or i32 %24, %4
  %79 = and i32 %13, %1
  %80 = and i32 %13, %4
  %81 = and i32 %4, %7
  %82 = and i32 %41, %25
  %83 = or i32 %20, %26
  %84 = or i32 %7, %1
  %85 = xor i32 %84, -1
  %86 = xor i32 %68, -1
  %87 = xor i32 %86, %0
  %88 = and i32 %7, %37
  %89 = xor i32 %68, %8
  %90 = xor i32 %84, %0
  %91 = or i32 %61, %37
  %92 = and i32 %56, %10
  %93 = and i32 %68, %0
  %94 = or i32 %92, %93
  %95 = shl i32 %94, 1
  %96 = xor i32 %24, %25
  %97 = add i32 %41, 1
  %98 = or i32 %22, %2
  %99 = and i32 %98, %0
  %100 = or i32 %72, %99
  %101 = or i32 %20, %37
  %102 = and i32 %46, %2
  %103 = or i32 %8, %2
  %104 = xor i32 %52, %44
  %105 = or i32 %24, %86
  %106 = xor i32 %11, -1
  %107 = or i32 %106, %10
  %108 = or i32 %26, %2
  %109 = or i32 %39, %85
  %110 = or i32 %24, %1
  %111 = or i32 %41, %18
  %112 = xor i32 %60, %1
  %113 = or i32 %41, %26
  %114 = and i32 %48, %22
  %115 = or i32 %14, %1
  %116 = xor i32 %61, %1
  %117 = or i32 %19, %45
  %118 = xor i32 %98, %0
  %119 = or i32 %52, %118
  %120 = or i32 %106, %0
  %121 = or i32 %39, %37
  %122 = and i32 %25, %20
  %123 = xor i32 %32, %2
  %124 = and i32 %17, %2
  %125 = or i32 %24, %11
  %126 = and i32 %41, %0
  %127 = add i32 %39, 1
  %128 = or i32 %45, %7
  %129 = xor i32 %56, -1
  %130 = xor i32 %39, %129
  %131 = or i32 %61, %22
  %132 = shl i32 %60, 1
  %133 = and i32 %19, %4
  %134 = add i32 %60, 1
  %135 = and i32 %42, %0
  %136 = shl i32 %26, 1
  %137 = or i32 %24, %22
  %138 = shl i32 %137, 1
  %139 = xor i32 %25, %2
  %140 = shl i32 %0, 1
  %141 = and i32 %4, %48
  %142 = and i32 %4, %20
  %143 = xor i32 %129, %0
  %144 = and i32 %25, %7
  %145 = or i32 %85, %10
  %146 = or i32 %4, %14
  %147 = and i32 %98, %10
  %148 = or i32 %52, %147
  %149 = and i32 %60, %22
  %150 = xor i32 %52, -1
  %151 = xor i32 %147, %150
  %152 = and i32 %129, %0
  %153 = shl i32 %152, 1
  %154 = or i32 %85, %0
  %155 = xor i32 %14, %1
  %156 = xor i32 %24, %106
  %157 = and i32 %20, %1
  %158 = and i32 %34, %22
  %159 = and i32 %106, %10
  %160 = or i32 %45, %2
  %161 = or i32 %19, %1
  %162 = and i32 %56, %0
  %163 = xor i32 %68, %0
  %164 = or i32 %162, %163
  %165 = or i32 %7, %37
  %166 = shl i32 %165, 1
  %167 = or i32 %19, %18
  %168 = xor i32 %162, -1
  %169 = xor i32 %163, %168
  %170 = and i32 %17, %42
  %171 = or i32 %61, %1
  %172 = or i32 %8, %42
  %173 = and i32 %19, %17
  %174 = or i32 %19, %37
  %175 = or i32 %39, %56
  %176 = shl i32 %175, 1
  %177 = or i32 %11, %0
  %178 = xor i32 %18, %2
  %179 = xor i32 %48, %1
  %180 = xor i32 %106, %0
  %181 = or i32 %86, %0
  %182 = xor i32 %99, -1
  %183 = xor i32 %72, %182
  %184 = or i32 %45, %20
  %185 = xor i32 %17, %2
  %186 = xor i32 %84, %8
  %187 = xor i32 %11, %0
  %188 = shl i32 %187, 1
  %189 = xor i32 %26, %2
  %190 = or i32 %19, %8
  %191 = xor i32 %39, %1
  %192 = or i32 %8, %20
  %193 = or i32 %4, %20
  %194 = and i32 %129, %10
  %195 = or i32 %84, %10
  %196 = or i32 %86, %10
  %197 = or i32 %8, %61
  %198 = xor i32 %24, %68
  %199 = xor i32 %13, %8
  %200 = and i32 %42, %32
  %201 = and i32 %4, %2
  %202 = and i32 %19, %1
  %203 = and i32 %84, %0
  %204 = and i32 %34, %1
  %205 = and i32 %7, %46
  %206 = xor i32 %92, -1
  %207 = xor i32 %93, %206
  %208 = or i32 %84, %0
  %209 = and i32 %60, %4
  %210 = shl i32 %209, 1
  %211 = and i32 %7, %32
  %212 = shl i32 %211, 1
  %213 = xor i32 %45, %2
  %214 = or i32 %14, %37
  %215 = or i32 %4, %7
  %216 = or i32 %39, %22
  %217 = xor i32 %162, %65
  %218 = and i32 %19, %46
  %219 = and i32 %17, %7
  %220 = or i32 %129, %10
  %221 = or i32 %37, %2
  %222 = and i32 %19, %32
  %223 = xor i32 %118, %150
  %224 = and i32 %60, %37
  %225 = shl i32 %224, 1
  %226 = xor i32 %65, -1
  %227 = or i32 %162, %226
  %228 = and i32 %41, %10
  %229 = or i32 %39, %4
  %230 = or i32 %42, %0
  %231 = or i32 %41, %45
  %232 = and i32 %41, %17
  %233 = xor i32 %126, %206
  %234 = or i32 %14, %22
  %235 = or i32 %68, %10
  %236 = shl i32 %235, 1
  %237 = xor i32 %228, %168
  %238 = and i32 %60, %1
  %239 = xor i32 %8, %2
  %240 = and i32 %68, %10
  %241 = xor i32 %240, %168
  %242 = and i32 %42, %10
  %243 = xor i32 %85, %0
  %244 = xor i32 %24, %17
  %245 = and i32 %20, %46
  %246 = and i32 %48, %1
  %247 = or i32 %42, %26
  %248 = shl i32 %247, 1
  %249 = and i32 %25, %2
  %250 = or i32 %41, %8
  %251 = shl i32 %250, 1
  %252 = xor i32 %42, %0
  %253 = xor i32 %45, %106
  %254 = and i32 %84, %10
  %255 = or i32 %42, %18
  %256 = or i32 %11, %45
  %257 = or i32 %45, %42
  %258 = xor i32 %72, %73
  %259 = or i32 %129, %0
  %260 = shl i32 %259, 1
  %261 = or i32 %8, %85
  %262 = or i32 %24, %18
  %263 = or i32 %8, %86
  %264 = xor i32 %39, %84
  %265 = and i32 %41, %46
  %266 = or i32 %19, %22
  %267 = or i32 %7, %26
  %268 = and i32 %37, %2
  %269 = or i32 %56, %0
  %270 = xor i32 %52, %226
  %271 = and i32 %13, %37
  %272 = and i32 %19, %37
  %273 = or i32 %7, %18
  %274 = or i32 %42, %10
  %275 = and i32 %32, %2
  %276 = or i32 %162, %240
  %277 = and i32 %106, %0
  %278 = shl i32 %277, 1
  %279 = shl i32 %41, 1
  %280 = or i32 %162, %228
  %281 = or i32 %18, %2
  %282 = and i32 %20, %37
  %283 = and i32 %86, %10
  %284 = mul i32 %283, -18
  %285 = and i32 %11, %10
  %286 = and i32 %86, %0
  %287 = mul i32 %286, -9
  %288 = and i32 %11, %0
  %289 = mul i32 %288, -30
  %290 = and i32 %85, %10
  %291 = shl i32 %290, 1
  %292 = mul i32 %92, -14
  %293 = and i32 %85, %0
  %294 = mul i32 %162, 6
  %295 = add i32 %219, %39
  %296 = add i32 %295, %24
  %297 = add i32 %296, %85
  %298 = add i32 %297, %285
  %299 = add i32 %298, %264
  %300 = add i32 %299, %254
  %301 = add i32 %300, %253
  %302 = add i32 %301, %242
  %303 = add i32 %302, %218
  %304 = add i32 %303, %202
  %305 = add i32 %304, %193
  %306 = add i32 %305, %192
  %307 = add i32 %306, %93
  %308 = add i32 %307, %157
  %309 = add i32 %308, %141
  %310 = add i32 %309, %122
  %311 = add i32 %310, %117
  %312 = add i32 %311, %113
  %313 = add i32 %312, %105
  %314 = add i32 %313, %62
  %315 = add i32 %314, %119
  %316 = shl i32 %315, 1
  %317 = sub i32 %252, %160
  %318 = sub i32 %317, %293
  %319 = sub i32 %318, %220
  %320 = sub i32 %319, %203
  %321 = add i32 %320, %170
  %322 = add i32 %321, %131
  %323 = add i32 %322, %80
  %324 = mul i32 %323, 3
  %325 = add i32 %198, %47
  %326 = shl i32 %325, 2
  %327 = add i32 %45, -1
  %328 = add i32 %327, %86
  %329 = add i32 %328, %134
  %330 = add i32 %329, %103
  %331 = add i32 %330, %174
  %332 = sub i32 %331, %184
  %333 = sub i32 %332, %90
  %334 = mul i32 %333, 5
  %335 = add i32 %0, 2
  %336 = sub i32 %335, %140
  %337 = add i32 %336, %77
  %338 = add i32 %337, %4
  %339 = add i32 %338, %46
  %340 = add i32 %339, %25
  %341 = add i32 %340, 1
  %342 = add i32 %341, %9
  %343 = sub i32 %342, %81
  %344 = add i32 %343, %88
  %345 = add i32 %344, %34
  %346 = add i32 %345, %97
  %347 = add i32 %346, %102
  %348 = add i32 %347, %108
  %349 = add i32 %348, %123
  %350 = sub i32 %349, %124
  %351 = add i32 %350, %127
  %352 = sub i32 %351, %128
  %353 = sub i32 %352, %136
  %354 = add i32 %353, %139
  %355 = add i32 %354, %144
  %356 = sub i32 %355, %56
  %357 = sub i32 %356, %178
  %358 = add i32 %357, %185
  %359 = add i32 %358, %189
  %360 = add i32 %359, %84
  %361 = add i32 %360, %201
  %362 = add i32 %361, %129
  %363 = add i32 %362, %205
  %364 = sub i32 %363, %13
  %365 = add i32 %364, %213
  %366 = sub i32 %365, %215
  %367 = add i32 %366, %221
  %368 = sub i32 %367, %239
  %369 = sub i32 %368, %249
  %370 = add i32 %369, %267
  %371 = add i32 %370, %268
  %372 = sub i32 %371, %273
  %373 = add i32 %372, %275
  %374 = sub i32 %373, %281
  %375 = add i32 %374, %12
  %376 = sub i32 %375, %21
  %377 = add i32 %376, %23
  %378 = sub i32 %377, %29
  %379 = add i32 %378, %30
  %380 = add i32 %379, %31
  %381 = add i32 %380, %33
  %382 = add i32 %381, %38
  %383 = add i32 %382, %40
  %384 = sub i32 %383, %43
  %385 = sub i32 %384, %44
  %386 = sub i32 %385, %49
  %387 = add i32 %386, %50
  %388 = sub i32 %387, %55
  %389 = add i32 %388, %59
  %390 = add i32 %389, %63
  %391 = sub i32 %390, %64
  %392 = sub i32 %391, %67
  %393 = sub i32 %392, %71
  %394 = add i32 %393, %76
  %395 = add i32 %394, %78
  %396 = add i32 %395, %79
  %397 = sub i32 %396, %82
  %398 = add i32 %397, %83
  %399 = add i32 %398, %87
  %400 = sub i32 %399, %89
  %401 = add i32 %400, %91
  %402 = sub i32 %401, %96
  %403 = sub i32 %402, %101
  %404 = sub i32 %403, %107
  %405 = add i32 %404, %109
  %406 = add i32 %405, %110
  %407 = add i32 %406, %111
  %408 = add i32 %407, %112
  %409 = sub i32 %408, %114
  %410 = sub i32 %409, %115
  %411 = sub i32 %410, %116
  %412 = sub i32 %411, %120
  %413 = add i32 %412, %121
  %414 = sub i32 %413, %125
  %415 = sub i32 %414, %126
  %416 = sub i32 %415, %130
  %417 = sub i32 %416, %132
  %418 = add i32 %417, %133
  %419 = sub i32 %418, %135
  %420 = sub i32 %419, %142
  %421 = sub i32 %420, %143
  %422 = sub i32 %421, %145
  %423 = sub i32 %422, %146
  %424 = sub i32 %423, %149
  %425 = sub i32 %424, %154
  %426 = add i32 %425, %155
  %427 = sub i32 %426, %156
  %428 = sub i32 %427, %158
  %429 = sub i32 %428, %159
  %430 = sub i32 %429, %161
  %431 = sub i32 %430, %73
  %432 = sub i32 %431, %166
  %433 = add i32 %432, %167
  %434 = add i32 %433, %171
  %435 = sub i32 %434, %172
  %436 = sub i32 %435, %173
  %437 = sub i32 %436, %177
  %438 = add i32 %437, %179
  %439 = add i32 %438, %180
  %440 = add i32 %439, %181
  %441 = sub i32 %440, %186
  %442 = add i32 %441, %190
  %443 = add i32 %442, %191
  %444 = add i32 %443, %194
  %445 = sub i32 %444, %195
  %446 = sub i32 %445, %196
  %447 = add i32 %446, %197
  %448 = add i32 %447, %199
  %449 = sub i32 %448, %200
  %450 = add i32 %449, %204
  %451 = sub i32 %450, %208
  %452 = sub i32 %451, %212
  %453 = add i32 %452, %214
  %454 = add i32 %453, %216
  %455 = add i32 %454, %65
  %456 = sub i32 %455, %222
  %457 = sub i32 %456, %228
  %458 = sub i32 %457, %229
  %459 = add i32 %458, %230
  %460 = add i32 %459, %231
  %461 = sub i32 %460, %232
  %462 = add i32 %461, %234
  %463 = sub i32 %462, %238
  %464 = add i32 %463, %243
  %465 = sub i32 %464, %240
  %466 = sub i32 %465, %244
  %467 = sub i32 %466, %245
  %468 = sub i32 %467, %246
  %469 = add i32 %468, %255
  %470 = add i32 %469, %256
  %471 = add i32 %470, %257
  %472 = sub i32 %471, %261
  %473 = sub i32 %472, %262
  %474 = add i32 %473, %263
  %475 = add i32 %474, %265
  %476 = sub i32 %475, %266
  %477 = sub i32 %476, %269
  %478 = add i32 %477, %271
  %479 = add i32 %478, %272
  %480 = add i32 %479, %274
  %481 = sub i32 %480, %279
  %482 = sub i32 %481, %282
  %483 = sub i32 %482, %16
  %484 = sub i32 %483, %28
  %485 = sub i32 %484, %36
  %486 = add i32 %485, %54
  %487 = sub i32 %486, %58
  %488 = add i32 %487, %66
  %489 = sub i32 %488, %70
  %490 = add i32 %489, %75
  %491 = sub i32 %490, %100
  %492 = add i32 %491, %104
  %493 = sub i32 %492, %138
  %494 = sub i32 %493, %148
  %495 = add i32 %494, %151
  %496 = sub i32 %495, %153
  %497 = sub i32 %496, %164
  %498 = add i32 %497, %169
  %499 = sub i32 %498, %176
  %500 = add i32 %499, %183
  %501 = sub i32 %500, %188
  %502 = add i32 %501, %207
  %503 = sub i32 %502, %210
  %504 = add i32 %503, %217
  %505 = add i32 %504, %223
  %506 = sub i32 %505, %225
  %507 = add i32 %506, %227
  %508 = add i32 %507, %233
  %509 = sub i32 %508, %236
  %510 = add i32 %509, %237
  %511 = sub i32 %510, %241
  %512 = sub i32 %511, %248
  %513 = sub i32 %512, %251
  %514 = sub i32 %513, %258
  %515 = sub i32 %514, %260
  %516 = add i32 %515, %270
  %517 = add i32 %516, %276
  %518 = sub i32 %517, %278
  %519 = sub i32 %518, %280
  %520 = add i32 %519, %284
  %521 = add i32 %520, %287
  %522 = add i32 %521, %289
  %523 = sub i32 %522, %291
  %524 = add i32 %523, %292
  %525 = add i32 %524, %294
  %526 = sub i32 %525, %95
  %527 = add i32 %526, %326
  %528 = add i32 %527, %324
  %529 = add i32 %528, %334
  %530 = add i32 %529, %316
  %531 = icmp eq i32 %6, %530
  %532 = select i1 %531, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %533 = tail call i32 @puts(i8* nonnull dereferenceable(1) %532)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
