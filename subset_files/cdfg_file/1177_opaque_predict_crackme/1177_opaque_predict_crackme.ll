; ModuleID = '../.././c_source_file/1177_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1177_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = xor i32 %0, -1
  %9 = and i32 %8, %2
  %10 = xor i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = or i32 %9, %11
  %13 = xor i32 %5, -1
  %14 = and i32 %13, %4
  %15 = xor i32 %4, %3
  %16 = or i32 %14, %15
  %17 = shl i32 %16, 1
  %18 = xor i32 %15, -1
  %19 = and i32 %18, %5
  %20 = add i32 %19, %12
  %21 = sub i32 %20, %17
  %22 = and i32 %7, %0
  %23 = and i32 %2, %1
  %24 = or i32 %22, %23
  %25 = and i32 %1, %0
  %26 = or i32 %2, %0
  %27 = xor i32 %26, %25
  %28 = or i32 %8, %1
  %29 = and i32 %28, %2
  %30 = or i32 %22, %10
  %31 = or i32 %22, %1
  %32 = or i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = and i32 %33, %8
  %35 = and i32 %7, %1
  %36 = and i32 %35, %8
  %37 = shl i32 %36, 1
  %38 = and i32 %33, %0
  %39 = shl i32 %38, 1
  %40 = and i32 %35, %0
  %41 = shl i32 %40, 1
  %42 = xor i32 %1, -1
  %43 = and i32 %9, %42
  %44 = xor i32 %3, -1
  %45 = or i32 %44, %4
  %46 = xor i32 %45, -1
  %47 = xor i32 %46, %5
  %48 = or i32 %4, %3
  %49 = xor i32 %5, %3
  %50 = and i32 %49, %48
  %51 = and i32 %5, %4
  %52 = xor i32 %51, -1
  %53 = and i32 %15, %52
  %54 = or i32 %14, %3
  %55 = or i32 %51, %44
  %56 = or i32 %13, %3
  %57 = xor i32 %56, -1
  %58 = or i32 %57, %4
  %59 = and i32 %44, %4
  %60 = xor i32 %49, -1
  %61 = or i32 %59, %60
  %62 = or i32 %13, %4
  %63 = and i32 %62, %3
  %64 = xor i32 %14, -1
  %65 = and i32 %64, %44
  %66 = xor i32 %48, -1
  %67 = or i32 %51, %66
  %68 = xor i32 %48, %5
  %69 = and i32 %13, %18
  %70 = and i32 %4, %3
  %71 = xor i32 %70, -1
  %72 = xor i32 %5, %4
  %73 = xor i32 %72, -1
  %74 = and i32 %73, %71
  %75 = xor i32 %4, -1
  %76 = and i32 %44, %5
  %77 = and i32 %76, %75
  %78 = or i32 %44, %5
  %79 = and i32 %78, %4
  %80 = xor i32 %79, -1
  %81 = xor i32 %77, %80
  %82 = or i32 %46, %5
  %83 = xor i32 %62, -1
  %84 = or i32 %83, %3
  %85 = shl i32 %84, 1
  %86 = or i32 %51, %46
  %87 = shl i32 %86, 1
  %88 = or i32 %5, %4
  %89 = xor i32 %88, %70
  %90 = and i32 %5, %3
  %91 = xor i32 %90, -1
  %92 = add i32 %90, 1
  %93 = or i32 %72, %18
  %94 = and i32 %48, %13
  %95 = shl i32 %94, 1
  %96 = or i32 %60, %46
  %97 = or i32 %49, %4
  %98 = shl i32 %97, 2
  %99 = or i32 %72, %3
  %100 = xor i32 %91, %4
  %101 = or i32 %51, %18
  %102 = xor i32 %59, -1
  %103 = and i32 %60, %102
  %104 = add i32 %59, 1
  %105 = xor i32 %56, %4
  %106 = or i32 %91, %75
  %107 = or i32 %72, %70
  %108 = and i32 %88, %15
  %109 = shl i32 %108, 1
  %110 = xor i32 %52, %3
  %111 = and i32 %45, %13
  %112 = or i32 %5, %3
  %113 = xor i32 %112, %70
  %114 = or i32 %14, %18
  %115 = or i32 %72, %66
  %116 = or i32 %77, %79
  %117 = or i32 %70, %73
  %118 = and i32 %13, %3
  %119 = xor i32 %118, %4
  %120 = or i32 %72, %44
  %121 = or i32 %70, %57
  %122 = xor i32 %118, -1
  %123 = add i32 %118, 1
  %124 = and i32 %90, %75
  %125 = and i32 %112, %4
  %126 = xor i32 %124, -1
  %127 = xor i32 %125, %126
  %128 = and i32 %88, %44
  %129 = or i32 %66, %5
  %130 = xor i32 %112, -1
  %131 = or i32 %51, %130
  %132 = and i32 %112, %75
  %133 = add i32 %49, 1
  %134 = xor i32 %66, %5
  %135 = or i32 %15, %73
  %136 = add i32 %112, 1
  %137 = or i32 %130, %75
  %138 = and i32 %90, %4
  %139 = and i32 %49, %75
  %140 = or i32 %138, %139
  %141 = xor i32 %59, %5
  %142 = and i32 %49, %71
  %143 = or i32 %49, %70
  %144 = and i32 %73, %44
  %145 = or i32 %72, %46
  %146 = and i32 %48, %5
  %147 = and i32 %15, %73
  %148 = xor i32 %88, -1
  %149 = or i32 %15, %148
  %150 = shl i32 %149, 1
  %151 = xor i32 %49, %4
  %152 = xor i32 %151, -1
  %153 = or i32 %138, %152
  %154 = and i32 %13, %102
  %155 = xor i32 %112, %4
  %156 = or i32 %138, %155
  %157 = and i32 %49, %45
  %158 = or i32 %49, %46
  %159 = xor i32 %14, %56
  %160 = or i32 %15, %83
  %161 = xor i32 %138, %151
  %162 = xor i32 %14, %91
  %163 = shl i32 %162, 1
  %164 = xor i32 %51, %45
  %165 = shl i32 %164, 1
  %166 = and i32 %76, %4
  %167 = xor i32 %166, %152
  %168 = xor i32 %102, %5
  %169 = shl i32 %168, 1
  %170 = or i32 %70, %13
  %171 = or i32 %49, %66
  %172 = and i32 %78, %75
  %173 = or i32 %166, %172
  %174 = xor i32 %51, %112
  %175 = or i32 %60, %66
  %176 = or i32 %122, %75
  %177 = or i32 %83, %44
  %178 = shl i32 %177, 1
  %179 = and i32 %45, %73
  %180 = and i32 %15, %5
  %181 = or i32 %13, %18
  %182 = or i32 %118, %59
  %183 = xor i32 %155, -1
  %184 = xor i32 %138, %183
  %185 = or i32 %73, %66
  %186 = xor i32 %60, %4
  %187 = xor i32 %64, %3
  %188 = shl i32 %187, 1
  %189 = or i32 %148, %44
  %190 = xor i32 %14, %3
  %191 = or i32 %59, %5
  %192 = xor i32 %78, %4
  %193 = or i32 %166, %192
  %194 = and i32 %60, %71
  %195 = add i32 %62, 1
  %196 = xor i32 %71, %5
  %197 = or i32 %73, %3
  %198 = and i32 %15, %64
  %199 = or i32 %90, %75
  %200 = and i32 %52, %3
  %201 = shl i32 %200, 1
  %202 = or i32 %49, %75
  %203 = shl i32 %202, 1
  %204 = or i32 %73, %46
  %205 = xor i32 %138, 2147483647
  %206 = xor i32 %205, %132
  %207 = or i32 %72, %15
  %208 = and i32 %48, %73
  %209 = or i32 %166, %151
  %210 = or i32 %60, %75
  %211 = or i32 %70, %83
  %212 = or i32 %73, %18
  %213 = and i32 %45, %5
  %214 = xor i32 %57, %4
  %215 = and i32 %72, %45
  %216 = xor i32 %202, -1
  %217 = or i32 %77, %216
  %218 = and i32 %88, %3
  %219 = xor i32 %51, %3
  %220 = and i32 %72, %44
  %221 = xor i32 %122, %4
  %222 = or i32 %72, %59
  %223 = and i32 %49, %4
  %224 = or i32 %124, %223
  %225 = or i32 %59, %73
  %226 = and i32 %52, %18
  %227 = xor i32 %148, %3
  %228 = or i32 %83, %18
  %229 = xor i32 %62, %70
  %230 = or i32 %51, %15
  %231 = or i32 %70, %60
  %232 = and i32 %72, %15
  %233 = add i32 %70, 1
  %234 = and i32 %72, %18
  %235 = or i32 %112, %4
  %236 = or i32 %56, %75
  %237 = and i32 %64, %18
  %238 = and i32 %56, %75
  %239 = xor i32 %166, -1
  %240 = xor i32 %172, %239
  %241 = and i32 %62, %44
  %242 = or i32 %51, %118
  %243 = or i32 %14, %44
  %244 = or i32 %148, %3
  %245 = xor i32 %130, %4
  %246 = shl i32 %245, 1
  %247 = or i32 %13, %46
  %248 = or i32 %14, %57
  %249 = and i32 %88, %18
  %250 = or i32 %90, %4
  %251 = xor i32 %205, %139
  %252 = shl i32 %251, 1
  %253 = and i32 %48, %60
  %254 = shl i32 %253, 1
  %255 = and i32 %122, %75
  %256 = shl i32 %255, 1
  %257 = and i32 %71, %5
  %258 = and i32 %91, %75
  %259 = xor i32 %70, %5
  %260 = or i32 %15, %5
  %261 = add i32 %15, 1
  %262 = or i32 %59, %13
  %263 = and i32 %73, %102
  %264 = xor i32 %51, %122
  %265 = and i32 %13, %71
  %266 = xor i32 %97, -1
  %267 = or i32 %166, %266
  %268 = or i32 %57, %75
  %269 = xor i32 %192, %239
  %270 = and i32 %15, %13
  %271 = and i32 %49, %102
  %272 = and i32 %64, %3
  %273 = shl i32 %272, 1
  %274 = or i32 %70, %5
  %275 = or i32 %14, %90
  %276 = and i32 %52, %44
  %277 = or i32 %60, %4
  %278 = or i32 %15, %13
  %279 = and i32 %62, %15
  %280 = xor i32 %223, %126
  %281 = and i32 %60, %4
  %282 = or i32 %138, %132
  %283 = or i32 %148, %18
  %284 = and i32 %72, %102
  %285 = or i32 %122, %4
  %286 = or i32 %118, %75
  %287 = or i32 %118, %4
  %288 = or i32 %56, %4
  %289 = and i32 %73, %18
  %290 = and i32 %73, %3
  %291 = or i32 %124, %125
  %292 = xor i32 %59, %122
  %293 = xor i32 %166, %97
  %294 = or i32 %73, %44
  %295 = add i32 %5, 1
  %296 = and i32 %62, %18
  %297 = or i32 %91, %4
  %298 = shl i32 %297, 1
  %299 = and i32 %45, %60
  %300 = and i32 %102, %5
  %301 = or i32 %130, %4
  %302 = shl i32 %301, 1
  %303 = shl i32 %72, 1
  %304 = or i32 %112, %75
  %305 = xor i32 %88, %3
  %306 = shl i32 %305, 1
  %307 = or i32 %70, %130
  %308 = and i32 %72, %48
  %309 = or i32 %13, %66
  %310 = xor i32 %62, %3
  %311 = or i32 %70, %148
  %312 = or i32 %49, %59
  %313 = shl i32 %312, 1
  %314 = or i32 %51, %3
  %315 = shl i32 %314, 1
  %316 = xor i32 %51, %48
  %317 = or i32 %90, %59
  %318 = shl i32 %317, 1
  %319 = xor i32 %45, %5
  %320 = shl i32 %62, 1
  %321 = xor i32 %83, %3
  %322 = xor i32 %59, %91
  %323 = and i32 %130, %75
  %324 = shl i32 %323, 1
  %325 = and i32 %118, %75
  %326 = shl i32 %325, 2
  %327 = and i32 %130, %4
  %328 = and i32 %118, %4
  %329 = mul i32 %328, 30
  %330 = and i32 %57, %75
  %331 = mul i32 %330, 19
  %332 = mul i32 %124, 12
  %333 = and i32 %57, %4
  %334 = add i32 %43, %46
  %335 = add i32 %334, %299
  %336 = sub i32 %335, %316
  %337 = sub i32 %336, %204
  %338 = sub i32 %337, %53
  %339 = mul i32 %338, 3
  %340 = sub i32 %92, %275
  %341 = add i32 %340, %311
  %342 = add i32 %341, %212
  %343 = add i32 %342, %137
  %344 = mul i32 %343, 5
  %345 = add i32 %117, %278
  %346 = add i32 %345, %116
  %347 = shl i32 %346, 2
  %348 = add i32 %333, %327
  %349 = mul i32 %348, 17
  %350 = add i32 %48, -1
  %351 = add i32 %350, %51
  %352 = add i32 %351, %265
  %353 = add i32 %352, %146
  %354 = add i32 %353, %88
  %355 = add i32 %354, %82
  %356 = add i32 %355, %138
  %357 = add i32 %356, %310
  %358 = add i32 %357, %290
  %359 = add i32 %358, %289
  %360 = add i32 %359, %288
  %361 = add i32 %360, %268
  %362 = add i32 %361, %243
  %363 = add i32 %362, %230
  %364 = add i32 %363, %229
  %365 = add i32 %364, %222
  %366 = add i32 %365, %215
  %367 = add i32 %366, %179
  %368 = add i32 %367, %176
  %369 = add i32 %368, %145
  %370 = add i32 %369, %135
  %371 = add i32 %370, %106
  %372 = add i32 %371, %103
  %373 = add i32 %372, %282
  %374 = add i32 %373, %206
  %375 = shl i32 %374, 1
  %376 = sub i32 4, %29
  %377 = sub i32 %376, %27
  %378 = add i32 %377, %24
  %379 = add i32 %378, %30
  %380 = add i32 %379, %31
  %381 = add i32 %380, %34
  %382 = sub i32 %381, %37
  %383 = sub i32 %382, %39
  %384 = sub i32 %383, %41
  %385 = add i32 %384, %15
  %386 = add i32 %385, %104
  %387 = sub i32 %386, %45
  %388 = add i32 %387, %5
  %389 = add i32 %388, %66
  %390 = add i32 %389, %233
  %391 = add i32 %390, %261
  %392 = add i32 %391, %59
  %393 = add i32 %392, %70
  %394 = add i32 %393, %295
  %395 = add i32 %394, %47
  %396 = add i32 %395, %52
  %397 = sub i32 %396, %68
  %398 = add i32 %397, %69
  %399 = add i32 %398, %73
  %400 = add i32 %399, %111
  %401 = add i32 %400, %123
  %402 = sub i32 %401, %129
  %403 = add i32 %402, %133
  %404 = add i32 %403, %134
  %405 = add i32 %404, %136
  %406 = add i32 %405, %141
  %407 = sub i32 %406, %118
  %408 = add i32 %407, %154
  %409 = add i32 %408, %112
  %410 = sub i32 %409, %90
  %411 = add i32 %410, %170
  %412 = add i32 %411, %180
  %413 = sub i32 %412, %181
  %414 = sub i32 %413, %191
  %415 = add i32 %414, %195
  %416 = sub i32 %415, %196
  %417 = sub i32 %416, %14
  %418 = sub i32 %417, %213
  %419 = add i32 %418, %56
  %420 = add i32 %419, %247
  %421 = add i32 %420, %148
  %422 = add i32 %421, %257
  %423 = sub i32 %422, %259
  %424 = add i32 %423, %64
  %425 = add i32 %424, %260
  %426 = add i32 %425, %262
  %427 = add i32 %426, %270
  %428 = sub i32 %427, %274
  %429 = sub i32 %428, %300
  %430 = add i32 %429, %309
  %431 = sub i32 %430, %319
  %432 = add i32 %431, %50
  %433 = sub i32 %432, %54
  %434 = sub i32 %433, %55
  %435 = sub i32 %434, %58
  %436 = add i32 %435, %61
  %437 = sub i32 %436, %63
  %438 = sub i32 %437, %65
  %439 = add i32 %438, %67
  %440 = sub i32 %439, %74
  %441 = sub i32 %440, %89
  %442 = add i32 %441, %93
  %443 = sub i32 %442, %95
  %444 = add i32 %443, %96
  %445 = add i32 %444, %99
  %446 = sub i32 %445, %100
  %447 = add i32 %446, %101
  %448 = sub i32 %447, %105
  %449 = sub i32 %448, %107
  %450 = add i32 %449, %110
  %451 = add i32 %450, %113
  %452 = sub i32 %451, %114
  %453 = sub i32 %452, %115
  %454 = add i32 %453, %119
  %455 = sub i32 %454, %120
  %456 = sub i32 %455, %121
  %457 = sub i32 %456, %128
  %458 = sub i32 %457, %131
  %459 = add i32 %458, %132
  %460 = sub i32 %459, %142
  %461 = sub i32 %460, %143
  %462 = sub i32 %461, %144
  %463 = sub i32 %462, %147
  %464 = add i32 %463, %155
  %465 = sub i32 %464, %157
  %466 = sub i32 %465, %158
  %467 = sub i32 %466, %159
  %468 = add i32 %467, %160
  %469 = sub i32 %468, %169
  %470 = sub i32 %469, %171
  %471 = sub i32 %470, %174
  %472 = sub i32 %471, %175
  %473 = sub i32 %472, %182
  %474 = sub i32 %473, %185
  %475 = sub i32 %474, %186
  %476 = sub i32 %475, %189
  %477 = add i32 %476, %190
  %478 = sub i32 %477, %194
  %479 = sub i32 %478, %197
  %480 = add i32 %479, %198
  %481 = sub i32 %480, %199
  %482 = sub i32 %481, %207
  %483 = add i32 %482, %208
  %484 = sub i32 %483, %210
  %485 = sub i32 %484, %211
  %486 = add i32 %485, %214
  %487 = sub i32 %486, %125
  %488 = sub i32 %487, %218
  %489 = add i32 %488, %219
  %490 = add i32 %489, %220
  %491 = add i32 %490, %221
  %492 = sub i32 %491, %225
  %493 = sub i32 %492, %226
  %494 = sub i32 %493, %227
  %495 = sub i32 %494, %228
  %496 = add i32 %495, %231
  %497 = sub i32 %496, %232
  %498 = sub i32 %497, %234
  %499 = sub i32 %498, %235
  %500 = sub i32 %499, %236
  %501 = add i32 %500, %237
  %502 = add i32 %501, %238
  %503 = add i32 %502, %241
  %504 = sub i32 %503, %242
  %505 = add i32 %504, %244
  %506 = sub i32 %505, %248
  %507 = add i32 %506, %249
  %508 = sub i32 %507, %250
  %509 = sub i32 %508, %258
  %510 = sub i32 %509, %263
  %511 = add i32 %510, %264
  %512 = add i32 %511, %271
  %513 = add i32 %512, %276
  %514 = sub i32 %513, %277
  %515 = sub i32 %514, %279
  %516 = sub i32 %515, %281
  %517 = add i32 %516, %283
  %518 = sub i32 %517, %284
  %519 = sub i32 %518, %285
  %520 = sub i32 %519, %286
  %521 = add i32 %520, %287
  %522 = sub i32 %521, %151
  %523 = add i32 %522, %292
  %524 = sub i32 %523, %294
  %525 = add i32 %524, %296
  %526 = sub i32 %525, %139
  %527 = sub i32 %526, %303
  %528 = sub i32 %527, %304
  %529 = sub i32 %528, %307
  %530 = sub i32 %529, %308
  %531 = sub i32 %530, %320
  %532 = add i32 %531, %321
  %533 = add i32 %532, %322
  %534 = add i32 %533, %81
  %535 = sub i32 %534, %85
  %536 = sub i32 %535, %87
  %537 = sub i32 %536, %98
  %538 = sub i32 %537, %109
  %539 = sub i32 %538, %127
  %540 = add i32 %539, %140
  %541 = sub i32 %540, %150
  %542 = sub i32 %541, %153
  %543 = add i32 %542, %156
  %544 = add i32 %543, %161
  %545 = sub i32 %544, %163
  %546 = sub i32 %545, %165
  %547 = add i32 %546, %167
  %548 = sub i32 %547, %173
  %549 = sub i32 %548, %178
  %550 = sub i32 %549, %184
  %551 = sub i32 %550, %188
  %552 = add i32 %551, %193
  %553 = sub i32 %552, %201
  %554 = sub i32 %553, %203
  %555 = sub i32 %554, %209
  %556 = sub i32 %555, %217
  %557 = sub i32 %556, %224
  %558 = sub i32 %557, %240
  %559 = sub i32 %558, %246
  %560 = sub i32 %559, %254
  %561 = sub i32 %560, %256
  %562 = sub i32 %561, %267
  %563 = sub i32 %562, %269
  %564 = sub i32 %563, %273
  %565 = add i32 %564, %280
  %566 = add i32 %565, %291
  %567 = add i32 %566, %293
  %568 = sub i32 %567, %298
  %569 = sub i32 %568, %302
  %570 = sub i32 %569, %306
  %571 = sub i32 %570, %313
  %572 = sub i32 %571, %315
  %573 = sub i32 %572, %318
  %574 = sub i32 %573, %324
  %575 = sub i32 %574, %326
  %576 = add i32 %575, %329
  %577 = add i32 %576, %331
  %578 = add i32 %577, %332
  %579 = add i32 %578, %349
  %580 = sub i32 %579, %252
  %581 = add i32 %580, %347
  %582 = add i32 %581, %344
  %583 = add i32 %582, %339
  %584 = add i32 %583, %375
  %585 = icmp eq i32 %21, %584
  %586 = select i1 %585, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %587 = tail call i32 @puts(i8* nonnull dereferenceable(1) %586)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
