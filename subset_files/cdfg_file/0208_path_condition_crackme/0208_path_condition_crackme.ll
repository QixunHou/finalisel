; ModuleID = '../.././c_source_file/0208_path_condition_crackme.c'
source_filename = "../.././c_source_file/0208_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = and i32 %4, %2
  %6 = and i32 %1, %0
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %6, %9
  %11 = xor i32 %0, -1
  %12 = and i32 %8, %1
  %13 = xor i32 %1, -1
  %14 = and i32 %13, %2
  %15 = and i32 %14, %11
  %16 = xor i32 %2, %1
  %17 = or i32 %16, %11
  %18 = xor i32 %17, -1
  %19 = or i32 %15, %18
  %20 = xor i32 %16, -1
  %21 = or i32 %20, %11
  %22 = and i32 %2, %1
  %23 = and i32 %22, %11
  %24 = or i32 %2, %1
  %25 = and i32 %24, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %23, %26
  %28 = or i32 %6, %2
  %29 = xor i32 %2, %0
  %30 = and i32 %29, %1
  %31 = xor i32 %8, %6
  %32 = xor i32 %1, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %8, %33
  %35 = and i32 %22, %0
  %36 = xor i32 %24, %0
  %37 = xor i32 %35, -1
  %38 = xor i32 %36, %37
  %39 = and i32 %20, %0
  %40 = and i32 %2, %0
  %41 = xor i32 %4, -1
  %42 = or i32 %40, %41
  %43 = or i32 %2, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %6, %44
  %46 = and i32 %14, %0
  %47 = or i32 %16, %0
  %48 = xor i32 %46, %47
  %49 = and i32 %16, %11
  %50 = xor i32 %49, %37
  %51 = or i32 %13, %0
  %52 = and i32 %51, %7
  %53 = shl i32 %52, 1
  %54 = xor i32 %51, -1
  %55 = xor i32 %29, -1
  %56 = or i32 %55, %54
  %57 = or i32 %9, %33
  %58 = or i32 %7, %1
  %59 = xor i32 %58, -1
  %60 = and i32 %13, %0
  %61 = and i32 %7, %1
  %62 = xor i32 %61, -1
  %63 = xor i32 %60, %62
  %64 = xor i32 %6, -1
  %65 = and i32 %20, %64
  %66 = xor i32 %58, %0
  %67 = or i32 %16, %54
  %68 = or i32 %58, %11
  %69 = shl i32 %68, 1
  %70 = or i32 %62, %0
  %71 = xor i32 %16, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %46, %72
  %74 = xor i32 %40, %1
  %75 = shl i32 %74, 1
  %76 = xor i32 %51, %2
  %77 = and i32 %7, %0
  %78 = or i32 %77, %59
  %79 = and i32 %4, %55
  %80 = xor i32 %60, -1
  %81 = and i32 %20, %80
  %82 = shl i32 %81, 1
  %83 = xor i32 %22, -1
  %84 = and i32 %83, %11
  %85 = shl i32 %84, 1
  %86 = or i32 %35, %36
  %87 = or i32 %55, %13
  %88 = or i32 %60, %20
  %89 = xor i32 %77, %58
  %90 = or i32 %33, %2
  %91 = or i32 %22, %60
  %92 = and i32 %4, %7
  %93 = xor i32 %4, %2
  %94 = xor i32 %83, %0
  %95 = xor i32 %64, %2
  %96 = shl i32 %95, 1
  %97 = and i32 %29, %80
  %98 = shl i32 %97, 1
  %99 = xor i32 %43, %1
  %100 = or i32 %7, %41
  %101 = or i32 %44, %33
  %102 = or i32 %29, %54
  %103 = xor i32 %15, %17
  %104 = add i32 %51, 1
  %105 = or i32 %59, %11
  %106 = and i32 %55, %64
  %107 = and i32 %80, %2
  %108 = xor i32 %40, %62
  %109 = or i32 %32, %7
  %110 = xor i32 %58, %6
  %111 = or i32 %32, %55
  %112 = or i32 %9, %1
  %113 = and i32 %7, %33
  %114 = or i32 %55, %41
  %115 = shl i32 %114, 1
  %116 = or i32 %20, %54
  %117 = and i32 %7, %80
  %118 = or i32 %35, %72
  %119 = xor i32 %6, %2
  %120 = xor i32 %41, %2
  %121 = and i32 %16, %80
  %122 = and i32 %51, %55
  %123 = xor i32 %77, -1
  %124 = shl i32 %60, 1
  %125 = or i32 %6, %20
  %126 = and i32 %43, %13
  %127 = and i32 %64, %2
  %128 = or i32 %13, %2
  %129 = and i32 %128, %11
  %130 = or i32 %46, %129
  %131 = or i32 %58, %0
  %132 = and i32 %20, %11
  %133 = and i32 %16, %0
  %134 = and i32 %58, %11
  %135 = and i32 %8, %13
  %136 = xor i32 %24, -1
  %137 = or i32 %136, %11
  %138 = xor i32 %128, %0
  %139 = xor i32 %138, -1
  %140 = xor i32 %46, %139
  %141 = and i32 %29, %64
  %142 = or i32 %29, %1
  %143 = or i32 %16, %60
  %144 = shl i32 %143, 1
  %145 = xor i32 %61, %0
  %146 = shl i32 %9, 1
  %147 = or i32 %60, %7
  %148 = and i32 %83, %0
  %149 = or i32 %32, %44
  %150 = or i32 %35, %49
  %151 = and i32 %24, %11
  %152 = or i32 %35, %151
  %153 = xor i32 %44, %1
  %154 = or i32 %23, %25
  %155 = shl i32 %32, 1
  %156 = and i32 %32, %123
  %157 = and i32 %7, %64
  %158 = or i32 %40, %136
  %159 = shl i32 %158, 1
  %160 = or i32 %62, %11
  %161 = xor i32 %40, -1
  %162 = xor i32 %161, %1
  %163 = or i32 %40, %1
  %164 = and i32 %55, %1
  %165 = xor i32 %77, %1
  %166 = and i32 %43, %33
  %167 = or i32 %16, %6
  %168 = xor i32 %123, %1
  %169 = xor i32 %40, %51
  %170 = and i32 %123, %1
  %171 = or i32 %29, %60
  %172 = or i32 %24, %11
  %173 = or i32 %6, %59
  %174 = or i32 %40, %61
  %175 = and i32 %32, %55
  %176 = xor i32 %20, %0
  %177 = or i32 %40, %33
  %178 = and i32 %32, %7
  %179 = and i32 %8, %32
  %180 = or i32 %7, %54
  %181 = or i32 %24, %0
  %182 = xor i32 %8, %1
  %183 = add i32 %43, 1
  %184 = or i32 %29, %32
  %185 = add i32 %16, 1
  %186 = xor i32 %47, -1
  %187 = or i32 %46, %186
  %188 = xor i32 %59, %0
  %189 = or i32 %77, %22
  %190 = xor i32 %133, 1073741823
  %191 = xor i32 %190, %23
  %192 = shl i32 %191, 2
  %193 = or i32 %7, %33
  %194 = and i32 %55, %33
  %195 = shl i32 %194, 1
  %196 = and i32 %33, %2
  %197 = shl i32 %196, 1
  %198 = and i32 %161, %1
  %199 = and i32 %128, %0
  %200 = or i32 %15, %199
  %201 = or i32 %22, %11
  %202 = and i32 %16, %64
  %203 = and i32 %62, %0
  %204 = and i32 %29, %4
  %205 = or i32 %77, %13
  %206 = and i32 %29, %51
  %207 = or i32 %61, %0
  %208 = or i32 %77, %1
  %209 = shl i32 %208, 1
  %210 = or i32 %61, %11
  %211 = xor i32 %60, %2
  %212 = or i32 %20, %0
  %213 = or i32 %61, %60
  %214 = xor i32 %40, %24
  %215 = shl i32 %61, 1
  %216 = xor i32 %80, %2
  %217 = or i32 %16, %41
  %218 = xor i32 %62, %0
  %219 = add i32 %60, 1
  %220 = and i32 %55, %80
  %221 = or i32 %136, %0
  %222 = add i32 %32, 1
  %223 = or i32 %46, %71
  %224 = or i32 %40, %54
  %225 = or i32 %40, %13
  %226 = xor i32 %151, 2147483647
  %227 = xor i32 %226, %35
  %228 = or i32 %77, %33
  %229 = and i32 %55, %13
  %230 = or i32 %77, %32
  %231 = or i32 %20, %41
  %232 = or i32 %59, %0
  %233 = and i32 %123, %13
  %234 = and i32 %29, %33
  %235 = and i32 %161, %33
  %236 = and i32 %32, %161
  %237 = and i32 %29, %32
  %238 = or i32 %40, %32
  %239 = or i32 %44, %1
  %240 = xor i32 %60, %83
  %241 = xor i32 %9, %1
  %242 = or i32 %29, %6
  %243 = xor i32 %35, %71
  %244 = and i32 %43, %1
  %245 = or i32 %54, %2
  %246 = and i32 %32, %2
  %247 = or i32 %46, %138
  %248 = and i32 %58, %0
  %249 = and i32 %136, %11
  %250 = and i32 %61, %11
  %251 = and i32 %61, %0
  %252 = mul i32 %251, 7
  %253 = and i32 %59, %11
  %254 = mul i32 %253, -6
  %255 = and i32 %59, %0
  %256 = mul i32 %255, -15
  %257 = add i32 %117, %16
  %258 = add i32 %257, %107
  %259 = add i32 %258, %76
  %260 = add i32 %259, %233
  %261 = add i32 %260, %220
  %262 = add i32 %261, %202
  %263 = add i32 %262, %111
  %264 = add i32 %263, %89
  %265 = add i32 %264, %87
  %266 = add i32 %265, %79
  %267 = add i32 %266, %78
  %268 = add i32 %267, %67
  %269 = add i32 %268, %39
  %270 = add i32 %269, %223
  %271 = add i32 %270, %152
  %272 = add i32 %271, %150
  %273 = add i32 %272, %227
  %274 = shl i32 %273, 1
  %275 = sub i32 %183, %248
  %276 = add i32 %275, %184
  %277 = sub i32 %276, %47
  %278 = add i32 %277, %21
  %279 = sub i32 %278, %19
  %280 = mul i32 %279, 5
  %281 = add i32 %131, %49
  %282 = shl i32 %281, 2
  %283 = sub i32 %79, %23
  %284 = sub i32 %283, %212
  %285 = add i32 %284, %168
  %286 = add i32 %285, %162
  %287 = sub i32 %286, %99
  %288 = mul i32 %287, 3
  %289 = add i32 %0, -1
  %290 = add i32 %289, %0
  %291 = add i32 %290, %1
  %292 = sub i32 %291, %4
  %293 = add i32 %292, %104
  %294 = sub i32 %293, %6
  %295 = add i32 %294, %51
  %296 = add i32 %295, %219
  %297 = add i32 %296, %222
  %298 = sub i32 %297, %28
  %299 = add i32 %298, %59
  %300 = add i32 %299, %90
  %301 = add i32 %300, %92
  %302 = add i32 %301, %93
  %303 = sub i32 %302, %100
  %304 = sub i32 %303, %43
  %305 = sub i32 %304, %109
  %306 = add i32 %305, %113
  %307 = sub i32 %306, %119
  %308 = sub i32 %307, %120
  %309 = add i32 %308, 1
  %310 = sub i32 %309, %124
  %311 = add i32 %310, %127
  %312 = add i32 %311, %147
  %313 = sub i32 %312, %155
  %314 = sub i32 %313, %157
  %315 = sub i32 %314, %178
  %316 = sub i32 %315, %180
  %317 = add i32 %316, %185
  %318 = sub i32 %317, %193
  %319 = add i32 %318, %62
  %320 = add i32 %319, %136
  %321 = sub i32 %320, %58
  %322 = sub i32 %321, %211
  %323 = sub i32 %322, %216
  %324 = sub i32 %323, %8
  %325 = add i32 %324, %245
  %326 = sub i32 %325, %246
  %327 = sub i32 %326, %10
  %328 = sub i32 %327, %12
  %329 = add i32 %328, %30
  %330 = sub i32 %329, %31
  %331 = add i32 %330, %34
  %332 = add i32 %331, %42
  %333 = add i32 %332, %45
  %334 = sub i32 %333, %53
  %335 = sub i32 %334, %56
  %336 = sub i32 %335, %57
  %337 = sub i32 %336, %63
  %338 = add i32 %337, %65
  %339 = add i32 %338, %66
  %340 = add i32 %339, %70
  %341 = add i32 %340, %88
  %342 = sub i32 %341, %71
  %343 = add i32 %342, %91
  %344 = add i32 %343, %94
  %345 = sub i32 %344, %96
  %346 = add i32 %345, %101
  %347 = sub i32 %346, %102
  %348 = sub i32 %347, %105
  %349 = add i32 %348, %106
  %350 = add i32 %349, %108
  %351 = add i32 %350, %110
  %352 = sub i32 %351, %112
  %353 = add i32 %352, %116
  %354 = sub i32 %353, %121
  %355 = sub i32 %354, %122
  %356 = add i32 %355, %125
  %357 = add i32 %356, %126
  %358 = sub i32 %357, %132
  %359 = sub i32 %358, %133
  %360 = sub i32 %359, %134
  %361 = add i32 %360, %135
  %362 = sub i32 %361, %137
  %363 = sub i32 %362, %141
  %364 = sub i32 %363, %142
  %365 = add i32 %364, %145
  %366 = sub i32 %365, %146
  %367 = add i32 %366, %148
  %368 = add i32 %367, %149
  %369 = sub i32 %368, %153
  %370 = sub i32 %369, %36
  %371 = add i32 %370, %156
  %372 = sub i32 %371, %160
  %373 = add i32 %372, %163
  %374 = sub i32 %373, %164
  %375 = add i32 %374, %165
  %376 = add i32 %375, %166
  %377 = sub i32 %376, %167
  %378 = sub i32 %377, %169
  %379 = sub i32 %378, %170
  %380 = sub i32 %379, %171
  %381 = add i32 %380, %172
  %382 = add i32 %381, %173
  %383 = add i32 %382, %174
  %384 = sub i32 %383, %175
  %385 = add i32 %384, %176
  %386 = sub i32 %385, %177
  %387 = add i32 %386, %179
  %388 = add i32 %387, %181
  %389 = sub i32 %388, %182
  %390 = sub i32 %389, %188
  %391 = add i32 %390, %189
  %392 = sub i32 %391, %197
  %393 = sub i32 %392, %198
  %394 = add i32 %393, %201
  %395 = add i32 %394, %203
  %396 = add i32 %395, %204
  %397 = add i32 %396, %205
  %398 = sub i32 %397, %206
  %399 = add i32 %398, %207
  %400 = add i32 %399, %210
  %401 = sub i32 %400, %213
  %402 = add i32 %401, %214
  %403 = sub i32 %402, %215
  %404 = sub i32 %403, %217
  %405 = sub i32 %404, %218
  %406 = sub i32 %405, %221
  %407 = sub i32 %406, %224
  %408 = add i32 %407, %225
  %409 = add i32 %408, %228
  %410 = sub i32 %409, %229
  %411 = sub i32 %410, %230
  %412 = add i32 %411, %231
  %413 = sub i32 %412, %232
  %414 = add i32 %413, %234
  %415 = sub i32 %414, %235
  %416 = add i32 %415, %236
  %417 = add i32 %416, %237
  %418 = sub i32 %417, %25
  %419 = add i32 %418, %238
  %420 = sub i32 %419, %239
  %421 = sub i32 %420, %240
  %422 = add i32 %421, %241
  %423 = add i32 %422, %242
  %424 = add i32 %423, %244
  %425 = sub i32 %424, %151
  %426 = sub i32 %425, %249
  %427 = sub i32 %426, %250
  %428 = add i32 %427, %35
  %429 = add i32 %428, %27
  %430 = sub i32 %429, %38
  %431 = add i32 %430, %48
  %432 = add i32 %431, %50
  %433 = sub i32 %432, %69
  %434 = add i32 %433, %73
  %435 = sub i32 %434, %75
  %436 = sub i32 %435, %82
  %437 = sub i32 %436, %85
  %438 = sub i32 %437, %86
  %439 = sub i32 %438, %98
  %440 = sub i32 %439, %103
  %441 = sub i32 %440, %115
  %442 = add i32 %441, %118
  %443 = sub i32 %442, %130
  %444 = sub i32 %443, %140
  %445 = sub i32 %444, %144
  %446 = sub i32 %445, %154
  %447 = sub i32 %446, %159
  %448 = sub i32 %447, %187
  %449 = sub i32 %448, %195
  %450 = add i32 %449, %200
  %451 = sub i32 %450, %209
  %452 = add i32 %451, %243
  %453 = add i32 %452, %247
  %454 = add i32 %453, %252
  %455 = add i32 %454, %254
  %456 = add i32 %455, %256
  %457 = add i32 %456, %282
  %458 = sub i32 %457, %192
  %459 = add i32 %458, %280
  %460 = add i32 %459, %288
  %461 = add i32 %460, %274
  %462 = icmp eq i32 %5, %461
  %463 = select i1 %462, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %464 = tail call i32 @puts(i8* nonnull dereferenceable(1) %463)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
