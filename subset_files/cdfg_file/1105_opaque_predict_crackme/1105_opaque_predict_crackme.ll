; ModuleID = '../.././c_source_file/1105_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1105_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = xor i32 %2, -1
  %13 = and i32 %8, %12
  %14 = sub i32 1, %13
  %15 = add i32 %14, %4
  %16 = sub i32 %15, %11
  %17 = xor i32 %4, %3
  %18 = and i32 %4, %3
  %19 = or i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = xor i32 %3, 2147483647
  %23 = and i32 %22, %4
  %24 = and i32 %6, %3
  %25 = xor i32 %0, -1
  %26 = or i32 %10, %25
  %27 = and i32 %12, %1
  %28 = or i32 %27, %0
  %29 = xor i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %32, %30
  %34 = and i32 %2, %1
  %35 = and i32 %34, %0
  %36 = xor i32 %9, %0
  %37 = xor i32 %35, %36
  %38 = and i32 %7, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %9, %39
  %41 = shl i32 %40, 1
  %42 = and i32 %29, %32
  %43 = and i32 %1, %0
  %44 = or i32 %43, %10
  %45 = and i32 %2, %0
  %46 = or i32 %1, %0
  %47 = xor i32 %45, %46
  %48 = or i32 %45, %29
  %49 = shl i32 %48, 2
  %50 = or i32 %12, %1
  %51 = or i32 %50, %25
  %52 = shl i32 %51, 1
  %53 = xor i32 %43, -1
  %54 = and i32 %10, %53
  %55 = xor i32 %8, -1
  %56 = or i32 %9, %55
  %57 = or i32 %2, %1
  %58 = xor i32 %57, %43
  %59 = shl i32 %58, 1
  %60 = or i32 %12, %0
  %61 = xor i32 %60, %1
  %62 = xor i32 %46, %2
  %63 = or i32 %50, %0
  %64 = xor i32 %46, -1
  %65 = or i32 %64, %2
  %66 = xor i32 %53, %2
  %67 = or i32 %31, %43
  %68 = xor i32 %57, %0
  %69 = xor i32 %68, -1
  %70 = xor i32 %35, %69
  %71 = or i32 %31, %29
  %72 = or i32 %29, %32
  %73 = xor i32 %27, %0
  %74 = xor i32 %45, -1
  %75 = and i32 %74, %1
  %76 = xor i32 %27, -1
  %77 = xor i32 %45, %76
  %78 = or i32 %32, %1
  %79 = or i32 %30, %2
  %80 = and i32 %7, %2
  %81 = and i32 %80, %25
  %82 = and i32 %10, %0
  %83 = or i32 %81, %82
  %84 = and i32 %12, %0
  %85 = xor i32 %50, -1
  %86 = or i32 %84, %85
  %87 = or i32 %31, %1
  %88 = and i32 %39, %2
  %89 = or i32 %12, %64
  %90 = shl i32 %89, 1
  %91 = xor i32 %8, %2
  %92 = xor i32 %34, -1
  %93 = and i32 %92, %25
  %94 = and i32 %50, %0
  %95 = and i32 %80, %0
  %96 = or i32 %95, %36
  %97 = xor i32 %84, -1
  %98 = and i32 %97, %1
  %99 = or i32 %38, %12
  %100 = and i32 %32, %53
  %101 = xor i32 %45, %1
  %102 = or i32 %45, %55
  %103 = and i32 %50, %25
  %104 = and i32 %34, %25
  %105 = and i32 %9, %0
  %106 = xor i32 %105, 2147483647
  %107 = xor i32 %106, %104
  %108 = shl i32 %107, 1
  %109 = or i32 %34, %25
  %110 = or i32 %45, %64
  %111 = add i32 %34, 1
  %112 = or i32 %104, %105
  %113 = xor i32 %97, %1
  %114 = or i32 %57, %25
  %115 = or i32 %32, %55
  %116 = or i32 %12, %55
  %117 = xor i32 %60, -1
  %118 = or i32 %117, %7
  %119 = xor i32 %76, %0
  %120 = shl i32 %0, 1
  %121 = or i32 %85, %25
  %122 = or i32 %7, %2
  %123 = and i32 %122, %0
  %124 = or i32 %81, %123
  %125 = or i32 %2, %0
  %126 = xor i32 %125, -1
  %127 = or i32 %29, %126
  %128 = or i32 %31, %55
  %129 = or i32 %117, %1
  %130 = shl i32 %38, 1
  %131 = or i32 %45, %1
  %132 = and i32 %60, %1
  %133 = or i32 %29, %12
  %134 = and i32 %31, %8
  %135 = and i32 %31, %1
  %136 = shl i32 %135, 1
  %137 = or i32 %43, %12
  %138 = and i32 %31, %7
  %139 = or i32 %9, %38
  %140 = xor i32 %43, %2
  %141 = xor i32 %64, %2
  %142 = or i32 %27, %25
  %143 = shl i32 %142, 2
  %144 = or i32 %43, %126
  %145 = xor i32 %123, 2147483647
  %146 = xor i32 %145, %81
  %147 = xor i32 %34, %0
  %148 = shl i32 %147, 1
  %149 = xor i32 %84, %50
  %150 = or i32 %10, %0
  %151 = and i32 %31, %39
  %152 = xor i32 %55, %2
  %153 = shl i32 %152, 1
  %154 = and i32 %60, %7
  %155 = xor i32 %92, %0
  %156 = and i32 %57, %0
  %157 = or i32 %104, %156
  %158 = and i32 %8, %32
  %159 = xor i32 %125, %43
  %160 = and i32 %32, %7
  %161 = shl i32 %160, 1
  %162 = xor i32 %45, %57
  %163 = and i32 %10, %25
  %164 = and i32 %57, %25
  %165 = and i32 %125, %29
  %166 = shl i32 %165, 1
  %167 = or i32 %92, %0
  %168 = and i32 %32, %1
  %169 = or i32 %31, %64
  %170 = and i32 %60, %30
  %171 = xor i32 %164, 2147483647
  %172 = xor i32 %171, %35
  %173 = shl i32 %172, 1
  %174 = or i32 %34, %0
  %175 = or i32 %76, %0
  %176 = or i32 %43, %85
  %177 = and i32 %31, %29
  %178 = or i32 %126, %1
  %179 = shl i32 %53, 1
  %180 = and i32 %29, %97
  %181 = and i32 %32, %39
  %182 = or i32 %9, %43
  %183 = or i32 %126, %30
  %184 = or i32 %12, %30
  %185 = and i32 %122, %25
  %186 = or i32 %95, %185
  %187 = xor i32 %117, %1
  %188 = add i32 %29, 1
  %189 = or i32 %9, %0
  %190 = add i32 %84, 1
  %191 = and i32 %29, %2
  %192 = and i32 %8, %2
  %193 = xor i32 %50, %43
  %194 = and i32 %92, %0
  %195 = and i32 %76, %25
  %196 = shl i32 %195, 1
  %197 = or i32 %10, %55
  %198 = and i32 %9, %25
  %199 = or i32 %35, %198
  %200 = xor i32 %57, -1
  %201 = and i32 %200, %25
  %202 = mul i32 %201, -7
  %203 = and i32 %27, %25
  %204 = and i32 %200, %0
  %205 = mul i32 %204, 13
  %206 = and i32 %27, %0
  %207 = mul i32 %206, 9
  %208 = and i32 %85, %25
  %209 = and i32 %85, %0
  %210 = mul i32 %35, -12
  %211 = add i32 %167, %187
  %212 = add i32 %211, %121
  %213 = add i32 %212, %113
  %214 = add i32 %213, %110
  %215 = add i32 %214, %100
  %216 = add i32 %215, %87
  %217 = add i32 %216, %78
  %218 = add i32 %217, %56
  %219 = add i32 %218, %33
  %220 = add i32 %219, %18
  %221 = add i32 %220, %23
  %222 = add i32 %221, %146
  %223 = shl i32 %222, 1
  %224 = or i32 %209, %104
  %225 = mul i32 %224, -10
  %226 = sub i32 %186, %175
  %227 = mul i32 %226, 5
  %228 = add i32 %208, %117
  %229 = mul i32 %228, 3
  %230 = add i32 %0, 2
  %231 = sub i32 %230, %120
  %232 = sub i32 %231, %43
  %233 = sub i32 %232, %2
  %234 = add i32 %233, %8
  %235 = add i32 %234, %188
  %236 = sub i32 %235, %62
  %237 = add i32 %236, %65
  %238 = add i32 %237, %66
  %239 = add i32 %238, %79
  %240 = add i32 %239, %88
  %241 = sub i32 %240, %91
  %242 = sub i32 %241, %99
  %243 = add i32 %242, %111
  %244 = sub i32 %243, %116
  %245 = sub i32 %244, %130
  %246 = add i32 %245, %133
  %247 = sub i32 %246, %137
  %248 = add i32 %247, %10
  %249 = sub i32 %248, %27
  %250 = sub i32 %249, %45
  %251 = add i32 %250, %140
  %252 = sub i32 %251, %141
  %253 = sub i32 %252, %57
  %254 = sub i32 %253, %60
  %255 = sub i32 %254, %179
  %256 = add i32 %255, %184
  %257 = add i32 %256, %84
  %258 = add i32 %257, %190
  %259 = add i32 %258, %191
  %260 = add i32 %259, %192
  %261 = sub i32 %260, %26
  %262 = sub i32 %261, %28
  %263 = add i32 %262, %42
  %264 = add i32 %263, %44
  %265 = sub i32 %264, %47
  %266 = add i32 %265, %54
  %267 = add i32 %266, %61
  %268 = sub i32 %267, %63
  %269 = add i32 %268, %67
  %270 = sub i32 %269, %71
  %271 = add i32 %270, %72
  %272 = add i32 %271, %73
  %273 = sub i32 %272, %75
  %274 = sub i32 %273, %77
  %275 = sub i32 %274, %86
  %276 = sub i32 %275, %90
  %277 = sub i32 %276, %93
  %278 = sub i32 %277, %94
  %279 = add i32 %278, %98
  %280 = sub i32 %279, %101
  %281 = sub i32 %280, %102
  %282 = add i32 %281, %103
  %283 = sub i32 %282, %109
  %284 = add i32 %283, %114
  %285 = sub i32 %284, %115
  %286 = add i32 %285, %118
  %287 = sub i32 %286, %119
  %288 = sub i32 %287, %68
  %289 = add i32 %288, %127
  %290 = sub i32 %289, %128
  %291 = add i32 %290, %129
  %292 = sub i32 %291, %105
  %293 = add i32 %292, %131
  %294 = add i32 %293, %132
  %295 = sub i32 %294, %82
  %296 = sub i32 %295, %134
  %297 = add i32 %296, %138
  %298 = add i32 %297, %139
  %299 = add i32 %298, %144
  %300 = add i32 %299, %149
  %301 = sub i32 %300, %150
  %302 = add i32 %301, %151
  %303 = sub i32 %302, %153
  %304 = add i32 %303, %154
  %305 = add i32 %304, %155
  %306 = add i32 %305, %158
  %307 = add i32 %306, %159
  %308 = add i32 %307, %162
  %309 = add i32 %308, %163
  %310 = add i32 %309, %164
  %311 = add i32 %310, %168
  %312 = sub i32 %311, %169
  %313 = add i32 %312, %170
  %314 = add i32 %313, %174
  %315 = add i32 %314, %176
  %316 = add i32 %315, %177
  %317 = add i32 %316, %178
  %318 = sub i32 %317, %156
  %319 = add i32 %318, %180
  %320 = add i32 %319, %181
  %321 = sub i32 %320, %182
  %322 = sub i32 %321, %183
  %323 = sub i32 %322, %36
  %324 = add i32 %323, %189
  %325 = add i32 %324, %193
  %326 = add i32 %325, %194
  %327 = sub i32 %326, %197
  %328 = sub i32 %327, %203
  %329 = add i32 %328, %17
  %330 = add i32 %329, %18
  %331 = add i32 %330, %24
  %332 = sub i32 %331, %37
  %333 = sub i32 %332, %41
  %334 = add i32 %333, %49
  %335 = sub i32 %334, %52
  %336 = sub i32 %335, %59
  %337 = add i32 %336, %70
  %338 = sub i32 %337, %83
  %339 = sub i32 %338, %96
  %340 = add i32 %339, %112
  %341 = add i32 %340, %124
  %342 = sub i32 %341, %136
  %343 = sub i32 %342, %143
  %344 = sub i32 %343, %148
  %345 = add i32 %344, %157
  %346 = sub i32 %345, %161
  %347 = sub i32 %346, %166
  %348 = sub i32 %347, %196
  %349 = add i32 %348, %199
  %350 = add i32 %349, %202
  %351 = add i32 %350, %205
  %352 = add i32 %351, %207
  %353 = add i32 %352, %210
  %354 = add i32 %353, %225
  %355 = add i32 %354, %229
  %356 = add i32 %355, %21
  %357 = sub i32 %356, %108
  %358 = sub i32 %357, %173
  %359 = add i32 %358, %227
  %360 = add i32 %359, %223
  %361 = icmp eq i32 %16, %360
  %362 = select i1 %361, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %363 = tail call i32 @puts(i8* nonnull dereferenceable(1) %362)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
