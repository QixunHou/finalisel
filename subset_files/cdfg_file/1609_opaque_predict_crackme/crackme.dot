digraph "DFG for'crackme' function" {
	Node0x215db40[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x215e1c0[shape=record, label="  %6 = add i32 %5, 1"];
	Node0x215e260[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x215e2d0[shape=record, label="  %8 = or i32 %7, %3"];
	Node0x215e340[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x215e3b0[shape=record, label="  %10 = sub i32 %6, %9"];
	Node0x215e420[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x215e490[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x215e500[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x215e570[shape=record, label="  %14 = or i32 %13, %1"];
	Node0x215e5e0[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x215e650[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x215e6f0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x215e760[shape=record, label="  %18 = and i32 %13, %1"];
	Node0x215e7d0[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0x215e840[shape=record, label="  %20 = or i32 %3, %0"];
	Node0x215e8b0[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x215e920[shape=record, label="  %22 = and i32 %7, %3"];
	Node0x215e990[shape=record, label="  %23 = shl i32 %20, 1"];
	Node0x215ea00[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x215ea70[shape=record, label="  %25 = xor i32 %9, -2"];
	Node0x215eae0[shape=record, label="  %26 = add i32 %22, %18"];
	Node0x215eb80[shape=record, label="  %27 = mul i32 %26, -3"];
	Node0x215ebf0[shape=record, label="  %28 = add i32 %19, %3"];
	Node0x215ec60[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x215ed00[shape=record, label="  %30 = add i32 %1, 5"];
	Node0x215ed70[shape=record, label="  %31 = sub i32 %30, %2"];
	Node0x215ede0[shape=record, label="  %32 = add i32 %31, %12"];
	Node0x215f060[shape=record, label="  %33 = add i32 %32, %14"];
	Node0x215f0d0[shape=record, label="  %34 = add i32 %33, %5"];
	Node0x215f140[shape=record, label="  %35 = sub i32 %34, %11"];
	Node0x215f1b0[shape=record, label="  %36 = sub i32 %35, %20"];
	Node0x215f220[shape=record, label="  %37 = add i32 %36, %21"];
	Node0x215f290[shape=record, label="  %38 = add i32 %37, %19"];
	Node0x215f300[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x215f370[shape=record, label="  %40 = sub i32 %39, %17"];
	Node0x215f3e0[shape=record, label="  %41 = add i32 %40, %24"];
	Node0x215f450[shape=record, label="  %42 = add i32 %41, %25"];
	Node0x215f4c0[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x215f530[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x215f5a0[shape=record, label="  %45 = icmp eq i32 %10, %44"];
	Node0x20fe268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x215fa40[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x215fa90[shape=record, label="  ret void"];
	Node0x215db40 -> Node0x215e1c0;
	Node0x215e1c0 -> Node0x215e260;
	Node0x215e260 -> Node0x215e2d0;
	Node0x215e2d0 -> Node0x215e340;
	Node0x215e340 -> Node0x215e3b0;
	Node0x215e3b0 -> Node0x215e420;
	Node0x215e420 -> Node0x215e490;
	Node0x215e490 -> Node0x215e500;
	Node0x215e500 -> Node0x215e570;
	Node0x215e570 -> Node0x215e5e0;
	Node0x215e5e0 -> Node0x215e650;
	Node0x215e650 -> Node0x215e6f0;
	Node0x215e6f0 -> Node0x215e760;
	Node0x215e760 -> Node0x215e7d0;
	Node0x215e7d0 -> Node0x215e840;
	Node0x215e840 -> Node0x215e8b0;
	Node0x215e8b0 -> Node0x215e920;
	Node0x215e920 -> Node0x215e990;
	Node0x215e990 -> Node0x215ea00;
	Node0x215ea00 -> Node0x215ea70;
	Node0x215ea70 -> Node0x215eae0;
	Node0x215eae0 -> Node0x215eb80;
	Node0x215eb80 -> Node0x215ebf0;
	Node0x215ebf0 -> Node0x215ec60;
	Node0x215ec60 -> Node0x215ed00;
	Node0x215ed00 -> Node0x215ed70;
	Node0x215ed70 -> Node0x215ede0;
	Node0x215ede0 -> Node0x215f060;
	Node0x215f060 -> Node0x215f0d0;
	Node0x215f0d0 -> Node0x215f140;
	Node0x215f140 -> Node0x215f1b0;
	Node0x215f1b0 -> Node0x215f220;
	Node0x215f220 -> Node0x215f290;
	Node0x215f290 -> Node0x215f300;
	Node0x215f300 -> Node0x215f370;
	Node0x215f370 -> Node0x215f3e0;
	Node0x215f3e0 -> Node0x215f450;
	Node0x215f450 -> Node0x215f4c0;
	Node0x215f4c0 -> Node0x215f530;
	Node0x215f530 -> Node0x215f5a0;
	Node0x215f5a0 -> Node0x20fe268;
	Node0x20fe268 -> Node0x215fa40;
	Node0x215fa40 -> Node0x215fa90;
edge [color=red]
	Node0x215db40 -> Node0x215e1c0;
	Node0x215e260 -> Node0x215e2d0;
	Node0x215e2d0 -> Node0x215e340;
	Node0x215e1c0 -> Node0x215e3b0;
	Node0x215e340 -> Node0x215e3b0;
	Node0x215e420 -> Node0x215e490;
	Node0x215e500 -> Node0x215e570;
	Node0x215e5e0 -> Node0x215e650;
	Node0x215e650 -> Node0x215e6f0;
	Node0x215e500 -> Node0x215e760;
	Node0x215e260 -> Node0x215e920;
	Node0x215e840 -> Node0x215e990;
	Node0x215e990 -> Node0x215ea00;
	Node0x215e340 -> Node0x215ea70;
	Node0x215e920 -> Node0x215eae0;
	Node0x215e760 -> Node0x215eae0;
	Node0x215eae0 -> Node0x215eb80;
	Node0x215e7d0 -> Node0x215ebf0;
	Node0x215ebf0 -> Node0x215ec60;
	Node0x215ed00 -> Node0x215ed70;
	Node0x215ed70 -> Node0x215ede0;
	Node0x215e490 -> Node0x215ede0;
	Node0x215ede0 -> Node0x215f060;
	Node0x215e570 -> Node0x215f060;
	Node0x215f060 -> Node0x215f0d0;
	Node0x215db40 -> Node0x215f0d0;
	Node0x215f0d0 -> Node0x215f140;
	Node0x215e420 -> Node0x215f140;
	Node0x215f140 -> Node0x215f1b0;
	Node0x215e840 -> Node0x215f1b0;
	Node0x215f1b0 -> Node0x215f220;
	Node0x215e8b0 -> Node0x215f220;
	Node0x215f220 -> Node0x215f290;
	Node0x215e7d0 -> Node0x215f290;
	Node0x215f290 -> Node0x215f300;
	Node0x215e920 -> Node0x215f300;
	Node0x215f300 -> Node0x215f370;
	Node0x215e6f0 -> Node0x215f370;
	Node0x215f370 -> Node0x215f3e0;
	Node0x215ea00 -> Node0x215f3e0;
	Node0x215f3e0 -> Node0x215f450;
	Node0x215ea70 -> Node0x215f450;
	Node0x215f450 -> Node0x215f4c0;
	Node0x215eb80 -> Node0x215f4c0;
	Node0x215f4c0 -> Node0x215f530;
	Node0x215ec60 -> Node0x215f530;
	Node0x215e3b0 -> Node0x215f5a0;
	Node0x215f530 -> Node0x215f5a0;
	Node0x215f5a0 -> Node0x20fe268;
	Node0x20fe268 -> Node0x215fa40;
}
