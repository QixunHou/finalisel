digraph "DFG for'crackme' function" {
	Node0xa484a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xa48b50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xa48c10[shape=record, label="  %5 = add i32 %1, 1"];
	Node0xa48c80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xa48cf0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xa48d90[shape=record, label="  %8 = mul i32 %7, 3"];
	Node0xa48e00[shape=record, label="  %9 = or i32 %1, %0"];
	Node0xa48ea0[shape=record, label="  %10 = xor i32 %0, 1073741823"];
	Node0xa48f10[shape=record, label="  %11 = and i32 %10, %1"];
	Node0xa48fb0[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0xa49020[shape=record, label="  %13 = and i32 %4, %0"];
	Node0xa49090[shape=record, label="  %14 = sub i32 1, %0"];
	Node0xa49100[shape=record, label="  %15 = add i32 %14, %5"];
	Node0xa49170[shape=record, label="  %16 = add i32 %15, %1"];
	Node0xa491e0[shape=record, label="  %17 = add i32 %16, %3"];
	Node0xa49250[shape=record, label="  %18 = add i32 %17, %9"];
	Node0xa492c0[shape=record, label="  %19 = sub i32 %18, %13"];
	Node0xa49330[shape=record, label="  %20 = add i32 %19, %6"];
	Node0xa493a0[shape=record, label="  %21 = add i32 %20, %8"];
	Node0xa49410[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0xa49480[shape=record, label="  %23 = icmp eq i32 %22, -1"];
	Node0x9e9268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa49920[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xa49970[shape=record, label="  ret void"];
	Node0xa484a0 -> Node0xa48b50;
	Node0xa48b50 -> Node0xa48c10;
	Node0xa48c10 -> Node0xa48c80;
	Node0xa48c80 -> Node0xa48cf0;
	Node0xa48cf0 -> Node0xa48d90;
	Node0xa48d90 -> Node0xa48e00;
	Node0xa48e00 -> Node0xa48ea0;
	Node0xa48ea0 -> Node0xa48f10;
	Node0xa48f10 -> Node0xa48fb0;
	Node0xa48fb0 -> Node0xa49020;
	Node0xa49020 -> Node0xa49090;
	Node0xa49090 -> Node0xa49100;
	Node0xa49100 -> Node0xa49170;
	Node0xa49170 -> Node0xa491e0;
	Node0xa491e0 -> Node0xa49250;
	Node0xa49250 -> Node0xa492c0;
	Node0xa492c0 -> Node0xa49330;
	Node0xa49330 -> Node0xa493a0;
	Node0xa493a0 -> Node0xa49410;
	Node0xa49410 -> Node0xa49480;
	Node0xa49480 -> Node0x9e9268;
	Node0x9e9268 -> Node0xa49920;
	Node0xa49920 -> Node0xa49970;
edge [color=red]
	Node0xa48c80 -> Node0xa48cf0;
	Node0xa48cf0 -> Node0xa48d90;
	Node0xa48ea0 -> Node0xa48f10;
	Node0xa48f10 -> Node0xa48fb0;
	Node0xa48b50 -> Node0xa49020;
	Node0xa49090 -> Node0xa49100;
	Node0xa48c10 -> Node0xa49100;
	Node0xa49100 -> Node0xa49170;
	Node0xa49170 -> Node0xa491e0;
	Node0xa484a0 -> Node0xa491e0;
	Node0xa491e0 -> Node0xa49250;
	Node0xa48e00 -> Node0xa49250;
	Node0xa49250 -> Node0xa492c0;
	Node0xa49020 -> Node0xa492c0;
	Node0xa492c0 -> Node0xa49330;
	Node0xa48c80 -> Node0xa49330;
	Node0xa49330 -> Node0xa493a0;
	Node0xa48d90 -> Node0xa493a0;
	Node0xa493a0 -> Node0xa49410;
	Node0xa48fb0 -> Node0xa49410;
	Node0xa49410 -> Node0xa49480;
	Node0xa49480 -> Node0x9e9268;
	Node0x9e9268 -> Node0xa49920;
}
