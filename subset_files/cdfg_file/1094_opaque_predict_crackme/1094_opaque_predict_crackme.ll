; ModuleID = '../.././c_source_file/1094_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1094_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %0
  %10 = shl i32 %9, 1
  %11 = add i32 %6, %10
  %12 = sub i32 0, %11
  %13 = xor i32 %3, -1
  %14 = or i32 %4, %3
  %15 = shl i32 %14, 1
  %16 = xor i32 %4, 2147483647
  %17 = or i32 %16, %3
  %18 = and i32 %4, %3
  %19 = or i32 %13, %4
  %20 = xor i32 %15, -2
  %21 = xor i32 %1, %0
  %22 = xor i32 %2, %0
  %23 = xor i32 %22, -1
  %24 = and i32 %21, %23
  %25 = or i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %2
  %28 = or i32 %7, %0
  %29 = xor i32 %1, -1
  %30 = and i32 %29, %2
  %31 = and i32 %30, %0
  %32 = xor i32 %7, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %31, %33
  %35 = xor i32 %0, -1
  %36 = xor i32 %2, -1
  %37 = or i32 %36, %1
  %38 = or i32 %37, %35
  %39 = or i32 %36, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %21, %40
  %42 = and i32 %36, %1
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %0
  %45 = and i32 %2, %0
  %46 = or i32 %45, %42
  %47 = and i32 %43, %35
  %48 = and i32 %2, %1
  %49 = and i32 %48, %0
  %50 = or i32 %49, %33
  %51 = shl i32 %50, 1
  %52 = or i32 %8, %35
  %53 = and i32 %29, %0
  %54 = xor i32 %53, %43
  %55 = shl i32 %54, 2
  %56 = or i32 %22, %29
  %57 = xor i32 %21, -1
  %58 = or i32 %22, %57
  %59 = xor i32 %53, -1
  %60 = and i32 %36, %59
  %61 = or i32 %40, %57
  %62 = or i32 %2, %1
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %35
  %65 = and i32 %1, %0
  %66 = or i32 %7, %65
  %67 = or i32 %65, %40
  %68 = or i32 %29, %0
  %69 = xor i32 %68, -1
  %70 = or i32 %7, %69
  %71 = or i32 %7, %53
  %72 = and i32 %23, %1
  %73 = xor i32 %39, %1
  %74 = shl i32 %73, 1
  %75 = or i32 %65, %23
  %76 = and i32 %21, %2
  %77 = shl i32 %76, 2
  %78 = or i32 %40, %29
  %79 = or i32 %65, %63
  %80 = add i32 %22, 1
  %81 = or i32 %22, %69
  %82 = and i32 %7, %25
  %83 = xor i32 %49, %32
  %84 = and i32 %8, %59
  %85 = or i32 %29, %2
  %86 = xor i32 %85, %0
  %87 = or i32 %31, %86
  %88 = shl i32 %87, 1
  %89 = xor i32 %62, %65
  %90 = shl i32 %89, 1
  %91 = and i32 %25, %2
  %92 = or i32 %2, %0
  %93 = and i32 %92, %29
  %94 = and i32 %36, %0
  %95 = or i32 %94, %48
  %96 = xor i32 %45, %62
  %97 = shl i32 %96, 1
  %98 = and i32 %25, %8
  %99 = or i32 %22, %21
  %100 = and i32 %39, %1
  %101 = or i32 %57, %2
  %102 = and i32 %22, %59
  %103 = add i32 %53, 1
  %104 = and i32 %92, %1
  %105 = xor i32 %94, -1
  %106 = and i32 %21, %105
  %107 = or i32 %42, %0
  %108 = xor i32 %92, -1
  %109 = or i32 %65, %108
  %110 = or i32 %48, %53
  %111 = or i32 %43, %35
  %112 = xor i32 %94, %1
  %113 = xor i32 %48, -1
  %114 = or i32 %113, %0
  %115 = xor i32 %31, %28
  %116 = xor i32 %45, -1
  %117 = and i32 %116, %29
  %118 = or i32 %31, %32
  %119 = or i32 %36, %57
  %120 = shl i32 %119, 1
  %121 = xor i32 %37, -1
  %122 = or i32 %65, %121
  %123 = xor i32 %37, %65
  %124 = or i32 %45, %21
  %125 = xor i32 %45, %25
  %126 = or i32 %45, %1
  %127 = add i32 %21, 1
  %128 = and i32 %48, %35
  %129 = and i32 %7, %0
  %130 = xor i32 %129, -1
  %131 = xor i32 %128, %130
  %132 = xor i32 %65, -1
  %133 = and i32 %7, %132
  %134 = or i32 %69, %2
  %135 = or i32 %128, %129
  %136 = xor i32 %37, %0
  %137 = or i32 %53, %36
  %138 = and i32 %68, %23
  %139 = or i32 %65, %36
  %140 = shl i32 %139, 1
  %141 = and i32 %59, %2
  %142 = shl i32 %141, 1
  %143 = and i32 %22, %25
  %144 = and i32 %8, %132
  %145 = and i32 %105, %1
  %146 = and i32 %21, %36
  %147 = xor i32 %108, %1
  %148 = xor i32 %59, %2
  %149 = xor i32 %62, %0
  %150 = xor i32 %149, -1
  %151 = xor i32 %49, %150
  %152 = xor i32 %92, %65
  %153 = and i32 %30, %35
  %154 = and i32 %85, %0
  %155 = xor i32 %154, -1
  %156 = xor i32 %153, %155
  %157 = or i32 %23, %57
  %158 = or i32 %8, %0
  %159 = shl i32 %158, 1
  %160 = add i32 %62, 1
  %161 = or i32 %7, %35
  %162 = xor i32 %161, -1
  %163 = or i32 %153, %162
  %164 = xor i32 %153, %161
  %165 = or i32 %94, %1
  %166 = and i32 %22, %1
  %167 = and i32 %68, %2
  %168 = or i32 %94, %121
  %169 = shl i32 %168, 1
  %170 = and i32 %39, %29
  %171 = shl i32 %170, 2
  %172 = or i32 %113, %35
  %173 = and i32 %62, %35
  %174 = or i32 %49, %173
  %175 = or i32 %49, %149
  %176 = xor i32 %94, %113
  %177 = shl i32 %176, 1
  %178 = or i32 %45, %69
  %179 = add i32 %37, 1
  %180 = xor i32 %26, %2
  %181 = and i32 %68, %8
  %182 = and i32 %85, %35
  %183 = or i32 %31, %182
  %184 = or i32 %48, %0
  %185 = or i32 %53, %8
  %186 = shl i32 %185, 1
  %187 = or i32 %23, %29
  %188 = or i32 %48, %35
  %189 = or i32 %94, %21
  %190 = or i32 %53, %23
  %191 = or i32 %62, %0
  %192 = add i32 %42, 1
  %193 = or i32 %7, %26
  %194 = xor i32 %69, %2
  %195 = and i32 %7, %59
  %196 = and i32 %7, %68
  %197 = shl i32 %196, 1
  %198 = and i32 %37, %0
  %199 = xor i32 %68, %2
  %200 = and i32 %92, %21
  %201 = shl i32 %200, 1
  %202 = and i32 %23, %59
  %203 = or i32 %43, %0
  %204 = xor i32 %53, %2
  %205 = and i32 %113, %0
  %206 = xor i32 %45, %68
  %207 = or i32 %23, %69
  %208 = or i32 %45, %29
  %209 = and i32 %23, %132
  %210 = shl i32 %209, 1
  %211 = xor i32 %28, -1
  %212 = or i32 %31, %211
  %213 = or i32 %22, %65
  %214 = or i32 %108, %1
  %215 = and i32 %39, %21
  %216 = or i32 %42, %53
  %217 = or i32 %21, %23
  %218 = and i32 %62, %0
  %219 = or i32 %128, %218
  %220 = and i32 %113, %35
  %221 = or i32 %45, %63
  %222 = xor i32 %116, %1
  %223 = shl i32 %222, 1
  %224 = and i32 %116, %57
  %225 = add i32 %25, 1
  %226 = and i32 %7, %35
  %227 = or i32 %8, %26
  %228 = xor i32 %86, 2147483647
  %229 = xor i32 %228, %31
  %230 = or i32 %40, %1
  %231 = or i32 %45, %57
  %232 = xor i32 %94, %37
  %233 = and i32 %36, %57
  %234 = shl i32 %233, 1
  %235 = xor i32 %25, %2
  %236 = or i32 %65, %8
  %237 = or i32 %108, %29
  %238 = and i32 %63, %35
  %239 = mul i32 %238, 18
  %240 = and i32 %42, %35
  %241 = and i32 %63, %0
  %242 = mul i32 %241, -24
  %243 = and i32 %42, %0
  %244 = and i32 %121, %35
  %245 = mul i32 %128, 11
  %246 = and i32 %121, %0
  %247 = mul i32 %246, 17
  %248 = mul i32 %49, 10
  %249 = add i32 %224, %194
  %250 = sub i32 %244, %249
  %251 = add i32 %250, %78
  %252 = add i32 %251, %28
  %253 = mul i32 %252, 5
  %254 = sub i32 %103, %204
  %255 = add i32 %254, %191
  %256 = add i32 %255, %227
  %257 = mul i32 %256, 3
  %258 = add i32 %92, -1
  %259 = add i32 %258, %42
  %260 = add i32 %259, %94
  %261 = add i32 %260, %243
  %262 = add i32 %261, %240
  %263 = add i32 %262, %203
  %264 = add i32 %263, %165
  %265 = add i32 %264, %152
  %266 = add i32 %265, %117
  %267 = add i32 %266, %67
  %268 = add i32 %267, %17
  %269 = add i32 %268, %229
  %270 = shl i32 %269, 1
  %271 = sub i32 2, %1
  %272 = add i32 %271, %127
  %273 = add i32 %272, %132
  %274 = sub i32 %273, %25
  %275 = add i32 %274, %21
  %276 = add i32 %275, %225
  %277 = add i32 %276, %13
  %278 = sub i32 %277, %27
  %279 = add i32 %278, %8
  %280 = add i32 %279, %60
  %281 = add i32 %280, %80
  %282 = sub i32 %281, %91
  %283 = sub i32 %282, %101
  %284 = add i32 %283, %134
  %285 = sub i32 %284, %37
  %286 = add i32 %285, %137
  %287 = add i32 %286, %105
  %288 = add i32 %287, %146
  %289 = add i32 %288, %148
  %290 = add i32 %289, %160
  %291 = add i32 %290, %167
  %292 = add i32 %291, %179
  %293 = sub i32 %292, %180
  %294 = add i32 %293, %192
  %295 = add i32 %294, %113
  %296 = add i32 %295, %199
  %297 = sub i32 %296, %45
  %298 = add i32 %297, %235
  %299 = add i32 %298, 1
  %300 = add i32 %299, %24
  %301 = add i32 %300, %38
  %302 = sub i32 %301, %41
  %303 = sub i32 %302, %44
  %304 = add i32 %303, %46
  %305 = sub i32 %304, %47
  %306 = add i32 %305, %52
  %307 = sub i32 %306, %56
  %308 = add i32 %307, %58
  %309 = add i32 %308, %61
  %310 = sub i32 %309, %64
  %311 = sub i32 %310, %66
  %312 = sub i32 %311, %70
  %313 = sub i32 %312, %71
  %314 = add i32 %313, %72
  %315 = sub i32 %314, %75
  %316 = sub i32 %315, %77
  %317 = add i32 %316, %79
  %318 = add i32 %317, %81
  %319 = sub i32 %318, %82
  %320 = sub i32 %319, %84
  %321 = add i32 %320, %93
  %322 = add i32 %321, %95
  %323 = add i32 %322, %98
  %324 = add i32 %323, %99
  %325 = add i32 %324, %100
  %326 = sub i32 %325, %102
  %327 = sub i32 %326, %104
  %328 = sub i32 %327, %106
  %329 = sub i32 %328, %107
  %330 = sub i32 %329, %109
  %331 = add i32 %330, %110
  %332 = add i32 %331, %111
  %333 = sub i32 %332, %112
  %334 = add i32 %333, %114
  %335 = sub i32 %334, %120
  %336 = add i32 %335, %122
  %337 = add i32 %336, %123
  %338 = sub i32 %337, %124
  %339 = add i32 %338, %125
  %340 = sub i32 %339, %126
  %341 = add i32 %340, %133
  %342 = add i32 %341, %136
  %343 = add i32 %342, %138
  %344 = sub i32 %343, %140
  %345 = sub i32 %344, %142
  %346 = add i32 %345, %143
  %347 = sub i32 %346, %144
  %348 = sub i32 %347, %145
  %349 = add i32 %348, %147
  %350 = sub i32 %349, %157
  %351 = sub i32 %350, %166
  %352 = add i32 %351, %172
  %353 = sub i32 %352, %178
  %354 = add i32 %353, %181
  %355 = sub i32 %354, %184
  %356 = sub i32 %355, %187
  %357 = sub i32 %356, %188
  %358 = sub i32 %357, %189
  %359 = add i32 %358, %190
  %360 = add i32 %359, %193
  %361 = sub i32 %360, %195
  %362 = sub i32 %361, %198
  %363 = sub i32 %362, %32
  %364 = sub i32 %363, %202
  %365 = add i32 %364, %205
  %366 = sub i32 %365, %206
  %367 = sub i32 %366, %207
  %368 = sub i32 %367, %208
  %369 = add i32 %368, %213
  %370 = sub i32 %369, %214
  %371 = sub i32 %370, %215
  %372 = add i32 %371, %216
  %373 = add i32 %372, %217
  %374 = add i32 %373, %220
  %375 = sub i32 %374, %221
  %376 = add i32 %375, %226
  %377 = sub i32 %376, %230
  %378 = add i32 %377, %231
  %379 = sub i32 %378, %232
  %380 = sub i32 %379, %234
  %381 = add i32 %380, %236
  %382 = sub i32 %381, %237
  %383 = add i32 %382, %6
  %384 = add i32 %383, %18
  %385 = add i32 %384, %19
  %386 = add i32 %385, %34
  %387 = sub i32 %386, %55
  %388 = sub i32 %387, %74
  %389 = sub i32 %388, %83
  %390 = sub i32 %389, %90
  %391 = sub i32 %390, %97
  %392 = sub i32 %391, %115
  %393 = add i32 %392, %118
  %394 = add i32 %393, %131
  %395 = sub i32 %394, %135
  %396 = sub i32 %395, %151
  %397 = add i32 %396, %156
  %398 = sub i32 %397, %159
  %399 = add i32 %398, %163
  %400 = sub i32 %399, %164
  %401 = sub i32 %400, %169
  %402 = sub i32 %401, %171
  %403 = sub i32 %402, %174
  %404 = add i32 %403, %175
  %405 = sub i32 %404, %177
  %406 = add i32 %405, %183
  %407 = sub i32 %406, %186
  %408 = sub i32 %407, %197
  %409 = sub i32 %408, %201
  %410 = sub i32 %409, %210
  %411 = add i32 %410, %212
  %412 = sub i32 %411, %219
  %413 = sub i32 %412, %223
  %414 = add i32 %413, %239
  %415 = add i32 %414, %242
  %416 = add i32 %415, %245
  %417 = add i32 %416, %247
  %418 = add i32 %417, %248
  %419 = add i32 %418, %15
  %420 = sub i32 %419, %51
  %421 = sub i32 %420, %88
  %422 = add i32 %421, %20
  %423 = add i32 %422, %257
  %424 = add i32 %423, %253
  %425 = add i32 %424, %270
  %426 = icmp eq i32 %425, %12
  %427 = select i1 %426, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %428 = tail call i32 @puts(i8* nonnull dereferenceable(1) %427)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
