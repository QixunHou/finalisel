; ModuleID = '../.././c_source_file/0182_path_condition_crackme.c'
source_filename = "../.././c_source_file/0182_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %1, %0
  %7 = xor i32 %6, -1
  %8 = and i32 %7, %2
  %9 = sub i32 1, %8
  %10 = xor i32 %4, -1
  %11 = or i32 %10, %3
  %12 = shl i32 %11, 2
  %13 = xor i32 %4, %3
  %14 = xor i32 %13, -1
  %15 = and i32 %10, %3
  %16 = xor i32 %15, -1
  %17 = or i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = shl i32 %11, 1
  %20 = xor i32 %19, -2
  %21 = xor i32 %1, -1
  %22 = or i32 %21, %0
  %23 = xor i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = and i32 %22, %24
  %26 = xor i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %2
  %29 = xor i32 %2, %0
  %30 = or i32 %29, %1
  %31 = xor i32 %22, -1
  %32 = add i32 %22, 1
  %33 = or i32 %29, %27
  %34 = xor i32 %0, -1
  %35 = or i32 %23, %34
  %36 = and i32 %21, %0
  %37 = and i32 %2, %1
  %38 = xor i32 %37, -1
  %39 = xor i32 %36, %38
  %40 = or i32 %2, %1
  %41 = xor i32 %40, %0
  %42 = or i32 %1, %0
  %43 = and i32 %29, %42
  %44 = xor i32 %23, %0
  %45 = xor i32 %2, -1
  %46 = and i32 %45, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %0
  %49 = or i32 %24, %31
  %50 = and i32 %2, %0
  %51 = xor i32 %50, %47
  %52 = and i32 %40, %34
  %53 = and i32 %37, %0
  %54 = or i32 %24, %0
  %55 = xor i32 %53, %54
  %56 = or i32 %23, %36
  %57 = or i32 %29, %26
  %58 = xor i32 %29, -1
  %59 = and i32 %58, %1
  %60 = and i32 %29, %7
  %61 = and i32 %58, %21
  %62 = and i32 %23, %42
  %63 = or i32 %29, %36
  %64 = and i32 %45, %7
  %65 = and i32 %23, %0
  %66 = add i32 %26, 1
  %67 = or i32 %2, %0
  %68 = xor i32 %67, -1
  %69 = or i32 %68, %21
  %70 = and i32 %42, %24
  %71 = or i32 %45, %0
  %72 = xor i32 %71, -1
  %73 = or i32 %72, %1
  %74 = xor i32 %42, -1
  %75 = or i32 %50, %74
  %76 = and i32 %42, %58
  %77 = shl i32 %76, 1
  %78 = or i32 %74, %2
  %79 = shl i32 %78, 1
  %80 = xor i32 %36, -1
  %81 = and i32 %23, %80
  %82 = xor i32 %80, %2
  %83 = and i32 %38, %34
  %84 = or i32 %26, %72
  %85 = and i32 %29, %22
  %86 = shl i32 %85, 1
  %87 = or i32 %47, %34
  %88 = and i32 %45, %0
  %89 = xor i32 %88, -1
  %90 = and i32 %89, %21
  %91 = or i32 %45, %1
  %92 = and i32 %91, %0
  %93 = and i32 %21, %2
  %94 = and i32 %93, %34
  %95 = xor i32 %35, 2147483647
  %96 = or i32 %95, %94
  %97 = shl i32 %96, 1
  %98 = and i32 %37, %34
  %99 = and i32 %40, %0
  %100 = or i32 %98, %99
  %101 = and i32 %29, %21
  %102 = or i32 %23, %0
  %103 = and i32 %58, %80
  %104 = and i32 %24, %0
  %105 = or i32 %40, %0
  %106 = xor i32 %40, %6
  %107 = shl i32 %106, 1
  %108 = or i32 %72, %21
  %109 = and i32 %29, %26
  %110 = or i32 %21, %2
  %111 = and i32 %110, %0
  %112 = or i32 %94, %111
  %113 = shl i32 %112, 1
  %114 = xor i32 %22, %2
  %115 = and i32 %93, %0
  %116 = xor i32 %115, %102
  %117 = and i32 %110, %34
  %118 = xor i32 %117, -1
  %119 = xor i32 %115, %118
  %120 = or i32 %37, %0
  %121 = or i32 %68, %1
  %122 = xor i32 %40, -1
  %123 = or i32 %122, %34
  %124 = and i32 %24, %7
  %125 = xor i32 %50, -1
  %126 = and i32 %125, %27
  %127 = or i32 %26, %58
  %128 = shl i32 %127, 1
  %129 = or i32 %88, %37
  %130 = or i32 %46, %0
  %131 = and i32 %29, %80
  %132 = and i32 %47, %34
  %133 = or i32 %24, %74
  %134 = and i32 %125, %21
  %135 = xor i32 %65, -1
  %136 = xor i32 %98, %135
  %137 = or i32 %36, %45
  %138 = or i32 %26, %68
  %139 = and i32 %24, %34
  %140 = or i32 %6, %122
  %141 = xor i32 %88, %91
  %142 = xor i32 %94, %35
  %143 = or i32 %36, %2
  %144 = or i32 %36, %24
  %145 = shl i32 %144, 1
  %146 = and i32 %45, %27
  %147 = xor i32 %50, %1
  %148 = or i32 %45, %74
  %149 = xor i32 %102, -1
  %150 = or i32 %115, %149
  %151 = or i32 %23, %74
  %152 = shl i32 %151, 1
  %153 = or i32 %24, %34
  %154 = or i32 %115, %44
  %155 = or i32 %47, %0
  %156 = shl i32 %155, 2
  %157 = xor i32 %36, %47
  %158 = or i32 %50, %26
  %159 = xor i32 %89, %1
  %160 = or i32 %46, %34
  %161 = and i32 %42, %2
  %162 = or i32 %58, %74
  %163 = add i32 %2, 1
  %164 = and i32 %67, %26
  %165 = or i32 %50, %1
  %166 = xor i32 %91, -1
  %167 = or i32 %166, %34
  %168 = or i32 %6, %72
  %169 = xor i32 %46, %0
  %170 = and i32 %67, %21
  %171 = xor i32 %52, 1073741823
  %172 = xor i32 %171, %53
  %173 = shl i32 %172, 2
  %174 = and i32 %22, %58
  %175 = or i32 %45, %27
  %176 = xor i32 %6, %2
  %177 = xor i32 %44, -1
  %178 = or i32 %53, %177
  %179 = xor i32 %71, %6
  %180 = and i32 %89, %27
  %181 = and i32 %26, %125
  %182 = or i32 %6, %24
  %183 = or i32 %29, %74
  %184 = xor i32 %67, %1
  %185 = shl i32 %184, 1
  %186 = or i32 %29, %31
  %187 = xor i32 %71, %1
  %188 = xor i32 %50, %22
  %189 = or i32 %23, %31
  %190 = xor i32 %125, %1
  %191 = or i32 %29, %6
  %192 = and i32 %80, %2
  %193 = and i32 %27, %2
  %194 = and i32 %26, %58
  %195 = and i32 %45, %80
  %196 = xor i32 %111, -1
  %197 = xor i32 %94, %196
  %198 = and i32 %58, %27
  %199 = and i32 %58, %7
  %200 = or i32 %58, %27
  %201 = or i32 %88, %21
  %202 = or i32 %88, %27
  %203 = or i32 %98, %65
  %204 = and i32 %26, %2
  %205 = and i32 %71, %1
  %206 = or i32 %115, %117
  %207 = or i32 %29, %21
  %208 = xor i32 %37, %0
  %209 = shl i32 %2, 1
  %210 = xor i32 %91, %6
  %211 = or i32 %37, %34
  %212 = and i32 %71, %26
  %213 = or i32 %68, %27
  %214 = or i32 %91, %34
  %215 = xor i32 %115, %177
  %216 = shl i32 %215, 1
  %217 = shl i32 %67, 1
  %218 = or i32 %46, %36
  %219 = or i32 %53, %41
  %220 = or i32 %23, %6
  %221 = shl i32 %220, 1
  %222 = or i32 %37, %36
  %223 = and i32 %42, %45
  %224 = shl i32 %223, 1
  %225 = or i32 %58, %31
  %226 = shl i32 %225, 1
  %227 = and i32 %71, %21
  %228 = or i32 %50, %46
  %229 = shl i32 %228, 1
  %230 = and i32 %67, %1
  %231 = or i32 %122, %0
  %232 = and i32 %47, %0
  %233 = xor i32 %50, %40
  %234 = shl i32 %233, 1
  %235 = add i32 %1, 1
  %236 = or i32 %91, %0
  %237 = and i32 %71, %27
  %238 = shl i32 %237, 1
  %239 = or i32 %72, %27
  %240 = shl i32 %239, 1
  %241 = or i32 %40, %34
  %242 = xor i32 %91, %0
  %243 = xor i32 %42, %2
  %244 = and i32 %23, %7
  %245 = xor i32 %74, %2
  %246 = xor i32 %67, %6
  %247 = or i32 %26, %2
  %248 = xor i32 %72, %1
  %249 = and i32 %125, %1
  %250 = shl i32 %249, 1
  %251 = xor i32 %68, %1
  %252 = or i32 %50, %122
  %253 = and i32 %26, %45
  %254 = and i32 %122, %34
  %255 = mul i32 %254, -9
  %256 = and i32 %46, %34
  %257 = and i32 %122, %0
  %258 = mul i32 %257, 22
  %259 = and i32 %46, %0
  %260 = and i32 %166, %34
  %261 = mul i32 %260, 10
  %262 = and i32 %166, %0
  %263 = mul i32 %262, 6
  %264 = mul i32 %53, 19
  %265 = add i32 %68, %74
  %266 = add i32 %265, %40
  %267 = add i32 %266, %236
  %268 = add i32 %267, %256
  %269 = add i32 %268, %227
  %270 = add i32 %269, %213
  %271 = add i32 %270, %212
  %272 = add i32 %271, %160
  %273 = add i32 %272, %120
  %274 = add i32 %273, %109
  %275 = add i32 %274, %108
  %276 = add i32 %275, %87
  %277 = add i32 %276, %83
  %278 = add i32 %277, %75
  %279 = add i32 %278, %61
  %280 = shl i32 %279, 1
  %281 = add i32 %102, %114
  %282 = add i32 %281, %133
  %283 = sub i32 %35, %282
  %284 = mul i32 %283, 5
  %285 = add i32 %190, %146
  %286 = add i32 %285, %15
  %287 = shl i32 %286, 2
  %288 = or i32 %98, %259
  %289 = mul i32 %288, 13
  %290 = xor i32 %247, -1
  %291 = sub i32 %290, %148
  %292 = add i32 %291, %90
  %293 = add i32 %292, %169
  %294 = mul i32 %293, 3
  %295 = sub i32 %34, %0
  %296 = add i32 %295, %235
  %297 = add i32 %296, %32
  %298 = add i32 %297, %66
  %299 = add i32 %298, %80
  %300 = add i32 %299, %7
  %301 = sub i32 %300, %6
  %302 = add i32 %301, %163
  %303 = add i32 %302, %22
  %304 = sub i32 %303, %42
  %305 = add i32 %304, %28
  %306 = sub i32 %305, %64
  %307 = sub i32 %306, %82
  %308 = add i32 %307, %137
  %309 = add i32 %308, %143
  %310 = sub i32 %309, %46
  %311 = sub i32 %310, %23
  %312 = add i32 %311, %161
  %313 = add i32 %312, %175
  %314 = sub i32 %313, %176
  %315 = add i32 %314, %47
  %316 = add i32 %315, %192
  %317 = add i32 %316, %193
  %318 = sub i32 %317, %195
  %319 = sub i32 %318, %88
  %320 = sub i32 %319, %204
  %321 = sub i32 %320, %209
  %322 = add i32 %321, %91
  %323 = add i32 %322, %243
  %324 = sub i32 %323, %245
  %325 = sub i32 %324, %253
  %326 = add i32 %325, %4
  %327 = add i32 %326, %25
  %328 = add i32 %327, %30
  %329 = sub i32 %328, %33
  %330 = sub i32 %329, %39
  %331 = sub i32 %330, %41
  %332 = add i32 %331, %43
  %333 = sub i32 %332, %44
  %334 = add i32 %333, %48
  %335 = sub i32 %334, %49
  %336 = add i32 %335, %51
  %337 = sub i32 %336, %52
  %338 = add i32 %337, %56
  %339 = add i32 %338, %57
  %340 = sub i32 %339, %59
  %341 = sub i32 %340, %60
  %342 = add i32 %341, %62
  %343 = sub i32 %342, %63
  %344 = add i32 %343, %65
  %345 = add i32 %344, %69
  %346 = sub i32 %345, %70
  %347 = add i32 %346, %73
  %348 = sub i32 %347, %79
  %349 = sub i32 %348, %81
  %350 = sub i32 %349, %84
  %351 = add i32 %350, %92
  %352 = add i32 %351, %101
  %353 = add i32 %352, %103
  %354 = add i32 %353, %104
  %355 = add i32 %354, %105
  %356 = add i32 %355, %121
  %357 = sub i32 %356, %123
  %358 = add i32 %357, %124
  %359 = add i32 %358, %126
  %360 = sub i32 %359, %129
  %361 = sub i32 %360, %130
  %362 = sub i32 %361, %131
  %363 = sub i32 %362, %132
  %364 = sub i32 %363, %134
  %365 = add i32 %364, %138
  %366 = add i32 %365, %139
  %367 = add i32 %366, %140
  %368 = sub i32 %367, %141
  %369 = add i32 %368, %147
  %370 = sub i32 %369, %153
  %371 = sub i32 %370, %157
  %372 = add i32 %371, %158
  %373 = add i32 %372, %159
  %374 = add i32 %373, %162
  %375 = add i32 %374, %164
  %376 = add i32 %375, %165
  %377 = sub i32 %376, %167
  %378 = add i32 %377, %168
  %379 = add i32 %378, %170
  %380 = sub i32 %379, %174
  %381 = sub i32 %380, %179
  %382 = add i32 %381, %180
  %383 = add i32 %382, %181
  %384 = sub i32 %383, %182
  %385 = sub i32 %384, %99
  %386 = sub i32 %385, %183
  %387 = add i32 %386, %186
  %388 = sub i32 %387, %187
  %389 = add i32 %388, %188
  %390 = add i32 %389, %189
  %391 = sub i32 %390, %191
  %392 = sub i32 %391, %194
  %393 = sub i32 %392, %198
  %394 = add i32 %393, %199
  %395 = add i32 %394, %200
  %396 = add i32 %395, %201
  %397 = sub i32 %396, %202
  %398 = add i32 %397, %205
  %399 = sub i32 %398, %207
  %400 = sub i32 %399, %208
  %401 = add i32 %400, %210
  %402 = add i32 %401, %211
  %403 = add i32 %402, %214
  %404 = sub i32 %403, %217
  %405 = add i32 %404, %218
  %406 = add i32 %405, %222
  %407 = sub i32 %406, %224
  %408 = add i32 %407, %230
  %409 = add i32 %408, %231
  %410 = sub i32 %409, %232
  %411 = sub i32 %410, %241
  %412 = add i32 %411, %242
  %413 = sub i32 %412, %244
  %414 = sub i32 %413, %246
  %415 = add i32 %414, %248
  %416 = sub i32 %415, %251
  %417 = sub i32 %416, %252
  %418 = add i32 %417, %14
  %419 = sub i32 %418, %13
  %420 = add i32 %419, %16
  %421 = add i32 %420, %18
  %422 = add i32 %421, %55
  %423 = sub i32 %422, %77
  %424 = sub i32 %423, %86
  %425 = sub i32 %424, %100
  %426 = sub i32 %425, %107
  %427 = sub i32 %426, %116
  %428 = sub i32 %427, %119
  %429 = sub i32 %428, %128
  %430 = sub i32 %429, %136
  %431 = add i32 %430, %142
  %432 = sub i32 %431, %145
  %433 = sub i32 %432, %150
  %434 = sub i32 %433, %152
  %435 = sub i32 %434, %154
  %436 = sub i32 %435, %156
  %437 = add i32 %436, %178
  %438 = sub i32 %437, %185
  %439 = add i32 %438, %197
  %440 = sub i32 %439, %203
  %441 = sub i32 %440, %206
  %442 = sub i32 %441, %219
  %443 = sub i32 %442, %221
  %444 = sub i32 %443, %226
  %445 = sub i32 %444, %229
  %446 = sub i32 %445, %234
  %447 = sub i32 %446, %238
  %448 = sub i32 %447, %240
  %449 = sub i32 %448, %250
  %450 = add i32 %449, %255
  %451 = add i32 %450, %258
  %452 = add i32 %451, %261
  %453 = add i32 %452, %263
  %454 = add i32 %453, %264
  %455 = sub i32 %454, %12
  %456 = sub i32 %455, %113
  %457 = sub i32 %456, %216
  %458 = add i32 %457, %289
  %459 = sub i32 %458, %20
  %460 = sub i32 %459, %97
  %461 = sub i32 %460, %173
  %462 = add i32 %461, %284
  %463 = add i32 %462, %287
  %464 = add i32 %463, %294
  %465 = add i32 %464, %280
  %466 = icmp eq i32 %9, %465
  %467 = select i1 %466, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %468 = tail call i32 @puts(i8* nonnull dereferenceable(1) %467)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
