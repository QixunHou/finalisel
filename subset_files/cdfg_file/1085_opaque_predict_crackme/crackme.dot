digraph "DFG for'crackme' function" {
	Node0xdbcac0[shape=record, label="  %3 = sub i32 -2, %0"];
	Node0xdbcb30[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0xdbcbf0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0xdbcc60[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0xdbccd0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0xdbcd40[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0xdbcdb0[shape=record, label="  %9 = or i32 %8, %0"];
	Node0xdbce50[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xdbcec0[shape=record, label="  %11 = shl i32 %7, 1"];
	Node0xdbcf30[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xdbcfa0[shape=record, label="  %13 = and i32 %8, %0"];
	Node0xdbd040[shape=record, label="  %14 = mul i32 %5, 3"];
	Node0xdbd0b0[shape=record, label="  %15 = add i32 %4, -1"];
	Node0xdbd120[shape=record, label="  %16 = add i32 %15, %6"];
	Node0xdbd190[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0xdbd200[shape=record, label="  %18 = add i32 %17, %13"];
	Node0xdbd270[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0xdbd2e0[shape=record, label="  %20 = add i32 %19, %14"];
	Node0xdbd350[shape=record, label="  %21 = add i32 %20, %12"];
	Node0xdbd3c0[shape=record, label="  %22 = icmp eq i32 %3, %21"];
	Node0xd5d268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xdbd860[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0xdbd8b0[shape=record, label="  ret void"];
	Node0xdbcac0 -> Node0xdbcb30;
	Node0xdbcb30 -> Node0xdbcbf0;
	Node0xdbcbf0 -> Node0xdbcc60;
	Node0xdbcc60 -> Node0xdbccd0;
	Node0xdbccd0 -> Node0xdbcd40;
	Node0xdbcd40 -> Node0xdbcdb0;
	Node0xdbcdb0 -> Node0xdbce50;
	Node0xdbce50 -> Node0xdbcec0;
	Node0xdbcec0 -> Node0xdbcf30;
	Node0xdbcf30 -> Node0xdbcfa0;
	Node0xdbcfa0 -> Node0xdbd040;
	Node0xdbd040 -> Node0xdbd0b0;
	Node0xdbd0b0 -> Node0xdbd120;
	Node0xdbd120 -> Node0xdbd190;
	Node0xdbd190 -> Node0xdbd200;
	Node0xdbd200 -> Node0xdbd270;
	Node0xdbd270 -> Node0xdbd2e0;
	Node0xdbd2e0 -> Node0xdbd350;
	Node0xdbd350 -> Node0xdbd3c0;
	Node0xdbd3c0 -> Node0xd5d268;
	Node0xd5d268 -> Node0xdbd860;
	Node0xdbd860 -> Node0xdbd8b0;
edge [color=red]
	Node0xdbcbf0 -> Node0xdbcc60;
	Node0xdbcd40 -> Node0xdbcdb0;
	Node0xdbcdb0 -> Node0xdbce50;
	Node0xdbccd0 -> Node0xdbcec0;
	Node0xdbcec0 -> Node0xdbcf30;
	Node0xdbcd40 -> Node0xdbcfa0;
	Node0xdbcbf0 -> Node0xdbd040;
	Node0xdbcb30 -> Node0xdbd0b0;
	Node0xdbd0b0 -> Node0xdbd120;
	Node0xdbcc60 -> Node0xdbd120;
	Node0xdbd120 -> Node0xdbd190;
	Node0xdbccd0 -> Node0xdbd190;
	Node0xdbd190 -> Node0xdbd200;
	Node0xdbcfa0 -> Node0xdbd200;
	Node0xdbd200 -> Node0xdbd270;
	Node0xdbce50 -> Node0xdbd270;
	Node0xdbd270 -> Node0xdbd2e0;
	Node0xdbd040 -> Node0xdbd2e0;
	Node0xdbd2e0 -> Node0xdbd350;
	Node0xdbcf30 -> Node0xdbd350;
	Node0xdbcac0 -> Node0xdbd3c0;
	Node0xdbd350 -> Node0xdbd3c0;
	Node0xdbd3c0 -> Node0xd5d268;
	Node0xd5d268 -> Node0xdbd860;
}
