; ModuleID = '../.././c_source_file/0925_path_condition_crackme.c'
source_filename = "../.././c_source_file/0925_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = xor i32 %5, %3
  %13 = sub i32 %11, %12
  %14 = or i32 %2, %0
  %15 = xor i32 %14, %1
  %16 = and i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %17, %1
  %19 = xor i32 %2, -1
  %20 = and i32 %19, %1
  %21 = xor i32 %0, -1
  %22 = xor i32 %20, %21
  %23 = or i32 %2, %1
  %24 = xor i32 %16, %23
  %25 = xor i32 %1, %0
  %26 = shl i32 %25, 1
  %27 = or i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %28
  %32 = and i32 %27, %10
  %33 = and i32 %9, %25
  %34 = and i32 %7, %2
  %35 = and i32 %34, %0
  %36 = or i32 %7, %2
  %37 = xor i32 %36, %0
  %38 = or i32 %35, %37
  %39 = xor i32 %25, -1
  %40 = and i32 %17, %39
  %41 = or i32 %8, %19
  %42 = or i32 %29, %28
  %43 = xor i32 %8, -1
  %44 = and i32 %10, %43
  %45 = and i32 %36, %21
  %46 = or i32 %35, %45
  %47 = xor i32 %29, %0
  %48 = and i32 %21, %2
  %49 = or i32 %48, %39
  %50 = or i32 %10, %1
  %51 = and i32 %30, %0
  %52 = or i32 %30, %21
  %53 = shl i32 %52, 1
  %54 = or i32 %29, %8
  %55 = and i32 %1, %0
  %56 = xor i32 %14, -1
  %57 = or i32 %55, %56
  %58 = and i32 %9, %39
  %59 = or i32 %23, %0
  %60 = and i32 %19, %0
  %61 = or i32 %60, %7
  %62 = xor i32 %37, -1
  %63 = xor i32 %35, %62
  %64 = and i32 %9, %1
  %65 = or i32 %9, %8
  %66 = shl i32 %65, 1
  %67 = and i32 %30, %21
  %68 = shl i32 %67, 1
  %69 = or i32 %19, %28
  %70 = or i32 %7, %0
  %71 = and i32 %29, %70
  %72 = xor i32 %14, %55
  %73 = and i32 %2, %1
  %74 = xor i32 %73, -1
  %75 = or i32 %74, %21
  %76 = xor i32 %60, -1
  %77 = and i32 %76, %1
  %78 = or i32 %48, %1
  %79 = or i32 %25, %56
  %80 = or i32 %20, %8
  %81 = or i32 %19, %1
  %82 = xor i32 %60, %81
  %83 = and i32 %73, %21
  %84 = and i32 %29, %0
  %85 = xor i32 %84, -1
  %86 = xor i32 %83, %85
  %87 = and i32 %9, %43
  %88 = and i32 %76, %7
  %89 = and i32 %29, %27
  %90 = and i32 %14, %25
  %91 = xor i32 %81, -1
  %92 = or i32 %60, %91
  %93 = and i32 %29, %43
  %94 = and i32 %74, %21
  %95 = and i32 %34, %21
  %96 = or i32 %95, %51
  %97 = or i32 %55, %10
  %98 = and i32 %36, %0
  %99 = or i32 %95, %98
  %100 = shl i32 %99, 1
  %101 = or i32 %91, %21
  %102 = xor i32 %55, -1
  %103 = and i32 %102, %2
  %104 = and i32 %29, %21
  %105 = shl i32 %104, 1
  %106 = or i32 %16, %1
  %107 = xor i32 %23, -1
  %108 = and i32 %107, %21
  %109 = and i32 %20, %21
  %110 = mul i32 %109, 7
  %111 = and i32 %107, %0
  %112 = and i32 %20, %0
  %113 = shl i32 %112, 2
  %114 = and i32 %91, %21
  %115 = and i32 %91, %0
  %116 = and i32 %73, %0
  %117 = and i32 %4, %3
  %118 = xor i32 %117, %5
  %119 = xor i32 %5, -1
  %120 = and i32 %119, %4
  %121 = xor i32 %120, -1
  %122 = xor i32 %4, %3
  %123 = and i32 %122, %121
  %124 = and i32 %5, %4
  %125 = xor i32 %124, -1
  %126 = and i32 %122, %125
  %127 = xor i32 %3, -1
  %128 = or i32 %127, %4
  %129 = xor i32 %5, %4
  %130 = and i32 %129, %128
  %131 = or i32 %119, %4
  %132 = xor i32 %131, -1
  %133 = or i32 %132, %3
  %134 = and i32 %127, %4
  %135 = and i32 %5, %3
  %136 = xor i32 %135, -1
  %137 = xor i32 %134, %136
  %138 = xor i32 %129, -1
  %139 = or i32 %134, %138
  %140 = or i32 %122, %138
  %141 = or i32 %5, %4
  %142 = xor i32 %141, -1
  %143 = or i32 %142, %3
  %144 = xor i32 %128, -1
  %145 = or i32 %144, %5
  %146 = shl i32 %145, 2
  %147 = or i32 %138, %127
  %148 = xor i32 %122, -1
  %149 = or i32 %120, %148
  %150 = or i32 %124, %122
  %151 = and i32 %138, %148
  %152 = or i32 %4, %3
  %153 = xor i32 %152, -1
  %154 = or i32 %138, %153
  %155 = or i32 %124, %153
  %156 = or i32 %119, %144
  %157 = xor i32 %117, -1
  %158 = xor i32 %157, %5
  %159 = or i32 %124, %148
  %160 = or i32 %119, %3
  %161 = xor i32 %160, %117
  %162 = and i32 %119, %3
  %163 = xor i32 %162, %4
  %164 = or i32 %129, %122
  %165 = and i32 %127, %5
  %166 = and i32 %165, %4
  %167 = or i32 %127, %5
  %168 = xor i32 %167, %4
  %169 = xor i32 %166, -1
  %170 = xor i32 %168, %169
  %171 = or i32 %5, %3
  %172 = or i32 %129, %148
  %173 = xor i32 %134, -1
  %174 = add i32 %134, 1
  %175 = xor i32 %12, -1
  %176 = or i32 %117, %175
  %177 = or i32 %12, %134
  %178 = and i32 %135, %4
  %179 = xor i32 %171, %4
  %180 = or i32 %178, %179
  %181 = xor i32 %4, -1
  %182 = and i32 %171, %181
  %183 = xor i32 %162, -1
  %184 = and i32 %183, %4
  %185 = and i32 %141, %122
  %186 = xor i32 %132, %3
  %187 = or i32 %12, %144
  %188 = shl i32 %187, 2
  %189 = and i32 %152, %5
  %190 = shl i32 %189, 1
  %191 = or i32 %124, %127
  %192 = and i32 %122, %5
  %193 = and i32 %129, %157
  %194 = xor i32 %124, %183
  %195 = and i32 %175, %181
  %196 = or i32 %166, %168
  %197 = xor i32 %171, -1
  %198 = or i32 %120, %122
  %199 = or i32 %175, %4
  %200 = or i32 %171, %181
  %201 = or i32 %197, %181
  %202 = or i32 %175, %144
  %203 = xor i32 %171, %117
  %204 = and i32 %12, %4
  %205 = or i32 %197, %4
  %206 = and i32 %129, %3
  %207 = and i32 %135, %181
  %208 = or i32 %207, %204
  %209 = xor i32 %12, %4
  %210 = xor i32 %178, %209
  %211 = or i32 %129, %3
  %212 = xor i32 %124, %171
  %213 = or i32 %117, %142
  %214 = xor i32 %134, %183
  %215 = or i32 %129, %144
  %216 = and i32 %165, %181
  %217 = and i32 %175, %4
  %218 = or i32 %216, %217
  %219 = or i32 %132, %127
  %220 = and i32 %171, %4
  %221 = xor i32 %220, -1
  %222 = xor i32 %207, %221
  %223 = and i32 %167, %181
  %224 = xor i32 %223, %169
  %225 = and i32 %141, %148
  %226 = or i32 %117, %119
  %227 = xor i32 %152, %5
  %228 = and i32 %138, %127
  %229 = xor i32 %120, %3
  %230 = and i32 %138, %173
  %231 = and i32 %129, %152
  %232 = and i32 %160, %181
  %233 = or i32 %134, %119
  %234 = xor i32 %209, -1
  %235 = or i32 %178, %234
  %236 = add i32 %141, 1
  %237 = xor i32 %160, -1
  %238 = add i32 %160, 1
  %239 = or i32 %132, %148
  %240 = or i32 %12, %4
  %241 = xor i32 %166, %240
  %242 = or i32 %142, %127
  %243 = or i32 %124, %162
  %244 = or i32 %183, %4
  %245 = or i32 %124, %197
  %246 = xor i32 %141, %117
  %247 = xor i32 %141, %3
  %248 = xor i32 %134, %5
  %249 = or i32 %134, %175
  %250 = and i32 %128, %5
  %251 = or i32 %117, %237
  %252 = or i32 %148, %5
  %253 = and i32 %128, %175
  %254 = or i32 %178, %182
  %255 = or i32 %166, %223
  %256 = or i32 %120, %3
  %257 = and i32 %12, %152
  %258 = or i32 %138, %144
  %259 = or i32 %12, %153
  %260 = or i32 %160, %181
  %261 = or i32 %135, %181
  %262 = or i32 %162, %4
  %263 = or i32 %12, %117
  %264 = xor i32 %173, %5
  %265 = and i32 %131, %3
  %266 = shl i32 %265, 1
  %267 = or i32 %119, %148
  %268 = and i32 %175, %157
  %269 = or i32 %166, %209
  %270 = or i32 %153, %5
  %271 = xor i32 %144, %5
  %272 = and i32 %157, %5
  %273 = and i32 %129, %127
  %274 = and i32 %128, %138
  %275 = or i32 %122, %142
  %276 = shl i32 %275, 1
  %277 = add i32 %12, 1
  %278 = and i32 %125, %148
  %279 = xor i32 %120, %160
  %280 = and i32 %152, %175
  %281 = shl i32 %280, 1
  %282 = or i32 %119, %153
  %283 = or i32 %136, %181
  %284 = or i32 %117, %138
  %285 = or i32 %117, %132
  %286 = and i32 %197, %181
  %287 = shl i32 %286, 1
  %288 = and i32 %162, %181
  %289 = mul i32 %288, 17
  %290 = and i32 %197, %4
  %291 = and i32 %162, %4
  %292 = and i32 %237, %181
  %293 = shl i32 %207, 2
  %294 = and i32 %237, %4
  %295 = add i32 %88, %106
  %296 = add i32 %295, %33
  %297 = add i32 %296, %15
  %298 = add i32 %297, %122
  %299 = add i32 %298, %202
  %300 = add i32 %299, %239
  %301 = add i32 %300, %193
  %302 = add i32 %301, %123
  %303 = shl i32 %302, 1
  %304 = sub i32 %108, %267
  %305 = sub i32 %304, %283
  %306 = mul i32 %305, 3
  %307 = add i32 %291, %290
  %308 = mul i32 %307, 9
  %309 = sub i32 %139, %233
  %310 = mul i32 %309, 5
  %311 = sub i32 %8, %26
  %312 = sub i32 %311, %41
  %313 = sub i32 %312, %29
  %314 = sub i32 %313, %69
  %315 = sub i32 %314, %103
  %316 = sub i32 %315, %3
  %317 = add i32 %316, %127
  %318 = add i32 %317, %18
  %319 = sub i32 %318, %22
  %320 = sub i32 %319, %24
  %321 = add i32 %320, %31
  %322 = add i32 %321, %32
  %323 = add i32 %322, %40
  %324 = sub i32 %323, %42
  %325 = sub i32 %324, %44
  %326 = sub i32 %325, %47
  %327 = add i32 %326, %49
  %328 = sub i32 %327, %50
  %329 = sub i32 %328, %51
  %330 = sub i32 %329, %54
  %331 = add i32 %330, %57
  %332 = add i32 %331, %58
  %333 = add i32 %332, %59
  %334 = add i32 %333, %61
  %335 = add i32 %334, %64
  %336 = sub i32 %335, %71
  %337 = add i32 %336, %72
  %338 = add i32 %337, %75
  %339 = sub i32 %338, %77
  %340 = add i32 %339, %78
  %341 = sub i32 %340, %79
  %342 = add i32 %341, %80
  %343 = add i32 %342, %82
  %344 = add i32 %343, %87
  %345 = add i32 %344, %89
  %346 = sub i32 %345, %90
  %347 = add i32 %346, %92
  %348 = sub i32 %347, %93
  %349 = sub i32 %348, %94
  %350 = sub i32 %349, %97
  %351 = sub i32 %350, %101
  %352 = add i32 %351, %111
  %353 = add i32 %352, %114
  %354 = add i32 %353, %115
  %355 = sub i32 %354, %116
  %356 = add i32 %355, %181
  %357 = sub i32 %356, %4
  %358 = add i32 %357, %38
  %359 = add i32 %358, %46
  %360 = sub i32 %359, %53
  %361 = add i32 %360, %63
  %362 = sub i32 %361, %66
  %363 = sub i32 %362, %68
  %364 = add i32 %363, %86
  %365 = add i32 %364, %96
  %366 = sub i32 %365, %105
  %367 = add i32 %366, %110
  %368 = sub i32 %367, %113
  %369 = add i32 %368, %148
  %370 = add i32 %369, %174
  %371 = add i32 %370, %5
  %372 = sub i32 %371, %100
  %373 = sub i32 %372, %118
  %374 = add i32 %373, %121
  %375 = sub i32 %374, %156
  %376 = sub i32 %375, %158
  %377 = add i32 %376, %135
  %378 = sub i32 %377, %171
  %379 = sub i32 %378, %192
  %380 = sub i32 %379, %162
  %381 = add i32 %380, %197
  %382 = add i32 %381, %124
  %383 = sub i32 %382, %120
  %384 = sub i32 %383, %226
  %385 = sub i32 %384, %227
  %386 = add i32 %385, %236
  %387 = add i32 %386, %238
  %388 = sub i32 %387, %248
  %389 = add i32 %388, %250
  %390 = add i32 %389, %252
  %391 = add i32 %390, %183
  %392 = add i32 %391, %264
  %393 = sub i32 %392, %270
  %394 = sub i32 %393, %271
  %395 = sub i32 %394, %131
  %396 = add i32 %395, %272
  %397 = add i32 %396, %277
  %398 = add i32 %397, %282
  %399 = add i32 %398, %126
  %400 = add i32 %399, %130
  %401 = add i32 %400, %133
  %402 = sub i32 %401, %137
  %403 = sub i32 %402, %140
  %404 = sub i32 %403, %143
  %405 = sub i32 %404, %146
  %406 = add i32 %405, %147
  %407 = sub i32 %406, %149
  %408 = add i32 %407, %150
  %409 = sub i32 %408, %151
  %410 = sub i32 %409, %154
  %411 = add i32 %410, %155
  %412 = add i32 %411, %159
  %413 = sub i32 %412, %161
  %414 = sub i32 %413, %163
  %415 = sub i32 %414, %164
  %416 = sub i32 %415, %172
  %417 = add i32 %416, %176
  %418 = add i32 %417, %177
  %419 = sub i32 %418, %182
  %420 = sub i32 %419, %184
  %421 = sub i32 %420, %185
  %422 = sub i32 %421, %186
  %423 = sub i32 %422, %190
  %424 = add i32 %423, %191
  %425 = sub i32 %424, %194
  %426 = sub i32 %425, %195
  %427 = add i32 %426, %198
  %428 = add i32 %427, %199
  %429 = add i32 %428, %200
  %430 = add i32 %429, %201
  %431 = add i32 %430, %203
  %432 = add i32 %431, %204
  %433 = add i32 %432, %205
  %434 = sub i32 %433, %206
  %435 = sub i32 %434, %211
  %436 = add i32 %435, %212
  %437 = add i32 %436, %213
  %438 = sub i32 %437, %214
  %439 = add i32 %438, %215
  %440 = add i32 %439, %219
  %441 = sub i32 %440, %225
  %442 = add i32 %441, %209
  %443 = add i32 %442, %228
  %444 = add i32 %443, %229
  %445 = sub i32 %444, %230
  %446 = sub i32 %445, %231
  %447 = add i32 %446, %232
  %448 = sub i32 %447, %242
  %449 = add i32 %448, %243
  %450 = add i32 %449, %244
  %451 = sub i32 %450, %245
  %452 = sub i32 %451, %246
  %453 = sub i32 %452, %247
  %454 = add i32 %453, %249
  %455 = add i32 %454, %251
  %456 = add i32 %455, %253
  %457 = add i32 %456, %256
  %458 = sub i32 %457, %257
  %459 = sub i32 %458, %258
  %460 = add i32 %459, %259
  %461 = add i32 %460, %260
  %462 = add i32 %461, %261
  %463 = sub i32 %462, %262
  %464 = sub i32 %463, %263
  %465 = sub i32 %464, %268
  %466 = sub i32 %465, %273
  %467 = add i32 %466, %274
  %468 = add i32 %467, %278
  %469 = sub i32 %468, %279
  %470 = add i32 %469, %284
  %471 = add i32 %470, %285
  %472 = add i32 %471, %292
  %473 = add i32 %472, %294
  %474 = add i32 %473, %178
  %475 = sub i32 %474, %170
  %476 = sub i32 %475, %180
  %477 = sub i32 %476, %188
  %478 = add i32 %477, %196
  %479 = add i32 %478, %208
  %480 = add i32 %479, %210
  %481 = add i32 %480, %218
  %482 = sub i32 %481, %222
  %483 = sub i32 %482, %224
  %484 = add i32 %483, %235
  %485 = add i32 %484, %241
  %486 = add i32 %485, %254
  %487 = sub i32 %486, %255
  %488 = sub i32 %487, %266
  %489 = sub i32 %488, %269
  %490 = sub i32 %489, %276
  %491 = sub i32 %490, %281
  %492 = sub i32 %491, %287
  %493 = add i32 %492, %289
  %494 = add i32 %493, %293
  %495 = add i32 %494, %308
  %496 = add i32 %495, %310
  %497 = add i32 %496, %306
  %498 = add i32 %497, %303
  %499 = icmp eq i32 %13, %498
  %500 = select i1 %499, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %501 = tail call i32 @puts(i8* nonnull dereferenceable(1) %500)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
