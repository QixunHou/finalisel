; ModuleID = '../.././c_source_file/1361_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1361_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %1
  %11 = xor i32 %1, %0
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %2
  %14 = sub i32 %10, %13
  %15 = xor i32 %5, -1
  %16 = and i32 %15, %3
  %17 = xor i32 %16, -1
  %18 = add i32 %14, %17
  %19 = xor i32 %1, -1
  %20 = or i32 %19, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %2, %1
  %23 = or i32 %22, %21
  %24 = xor i32 %0, -1
  %25 = or i32 %22, %24
  %26 = and i32 %2, %0
  %27 = xor i32 %26, %1
  %28 = xor i32 %22, -1
  %29 = and i32 %28, %24
  %30 = xor i32 %2, %0
  %31 = or i32 %30, %12
  %32 = or i32 %24, %2
  %33 = xor i32 %32, %1
  %34 = and i32 %2, %1
  %35 = and i32 %34, %0
  %36 = or i32 %2, %1
  %37 = and i32 %36, %24
  %38 = or i32 %35, %37
  %39 = xor i32 %35, -1
  %40 = xor i32 %37, %39
  %41 = and i32 %7, %1
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %24
  %44 = xor i32 %26, -1
  %45 = and i32 %44, %1
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, -1
  %48 = and i32 %1, %0
  %49 = and i32 %19, %2
  %50 = or i32 %49, %48
  %51 = shl i32 %50, 1
  %52 = and i32 %44, %12
  %53 = xor i32 %22, %0
  %54 = xor i32 %44, %1
  %55 = and i32 %22, %24
  %56 = or i32 %35, %55
  %57 = xor i32 %53, 1073741823
  %58 = or i32 %57, %35
  %59 = or i32 %1, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %28, %60
  %62 = xor i32 %30, -1
  %63 = and i32 %62, %19
  %64 = and i32 %34, %24
  %65 = and i32 %36, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %64, %66
  %68 = and i32 %30, %1
  %69 = and i32 %19, %0
  %70 = xor i32 %69, -1
  %71 = and i32 %7, %70
  %72 = or i32 %2, %0
  %73 = xor i32 %72, -1
  %74 = or i32 %48, %73
  %75 = or i32 %41, %69
  %76 = or i32 %7, %12
  %77 = xor i32 %26, %36
  %78 = xor i32 %36, %24
  %79 = xor i32 %78, %35
  %80 = xor i32 %35, %53
  %81 = or i32 %30, %21
  %82 = shl i32 %62, 1
  %83 = xor i32 %20, %2
  %84 = or i32 %62, %19
  %85 = or i32 %11, %7
  %86 = and i32 %8, %1
  %87 = and i32 %32, %19
  %88 = shl i32 %87, 1
  %89 = and i32 %49, %0
  %90 = or i32 %19, %2
  %91 = and i32 %90, %24
  %92 = or i32 %89, %91
  %93 = xor i32 %36, -1
  %94 = and i32 %93, %24
  %95 = shl i32 %94, 4
  %96 = and i32 %41, %24
  %97 = and i32 %93, %0
  %98 = mul i32 %97, -7
  %99 = and i32 %41, %0
  %100 = and i32 %49, %24
  %101 = shl i32 %100, 3
  %102 = mul i32 %64, -18
  %103 = shl i32 %89, 3
  %104 = and i32 %5, %3
  %105 = and i32 %104, %4
  %106 = xor i32 %5, %3
  %107 = xor i32 %106, %4
  %108 = xor i32 %105, %107
  %109 = xor i32 %3, -1
  %110 = or i32 %109, %4
  %111 = xor i32 %110, -1
  %112 = xor i32 %5, %4
  %113 = xor i32 %112, -1
  %114 = or i32 %113, %111
  %115 = and i32 %4, %3
  %116 = or i32 %15, %3
  %117 = xor i32 %116, %115
  %118 = xor i32 %4, %3
  %119 = and i32 %118, %15
  %120 = shl i32 %112, 2
  %121 = and i32 %15, %4
  %122 = or i32 %121, %3
  %123 = xor i32 %104, -1
  %124 = xor i32 %121, %123
  %125 = xor i32 %4, -1
  %126 = and i32 %106, %125
  %127 = xor i32 %105, -1
  %128 = xor i32 %126, %127
  %129 = or i32 %4, %3
  %130 = xor i32 %129, -1
  %131 = add i32 %129, 1
  %132 = or i32 %5, %3
  %133 = xor i32 %132, -1
  %134 = or i32 %115, %133
  %135 = and i32 %106, %129
  %136 = and i32 %5, %4
  %137 = xor i32 %136, -1
  %138 = or i32 %136, %118
  %139 = or i32 %15, %4
  %140 = and i32 %139, %109
  %141 = and i32 %112, %118
  %142 = xor i32 %137, %3
  %143 = and i32 %109, %4
  %144 = xor i32 %143, %17
  %145 = and i32 %112, %109
  %146 = or i32 %104, %4
  %147 = or i32 %123, %4
  %148 = or i32 %132, %4
  %149 = shl i32 %148, 1
  %150 = or i32 %106, %111
  %151 = and i32 %137, %3
  %152 = or i32 %136, %111
  %153 = shl i32 %152, 2
  %154 = xor i32 %136, %17
  %155 = or i32 %5, %4
  %156 = xor i32 %118, -1
  %157 = and i32 %155, %156
  %158 = xor i32 %116, -1
  %159 = or i32 %121, %158
  %160 = and i32 %17, %125
  %161 = and i32 %109, %5
  %162 = and i32 %161, %4
  %163 = or i32 %109, %5
  %164 = and i32 %163, %125
  %165 = xor i32 %164, -1
  %166 = xor i32 %162, %165
  %167 = and i32 %104, %125
  %168 = and i32 %132, %4
  %169 = xor i32 %167, -1
  %170 = xor i32 %168, %169
  %171 = xor i32 %16, %4
  %172 = xor i32 %155, %3
  %173 = xor i32 %106, -1
  %174 = and i32 %110, %173
  %175 = xor i32 %155, -1
  %176 = xor i32 %175, %3
  %177 = or i32 %15, %111
  %178 = or i32 %143, %5
  %179 = xor i32 %121, -1
  %180 = and i32 %179, %3
  %181 = add i32 %155, 1
  %182 = and i32 %113, %3
  %183 = xor i32 %136, %132
  %184 = xor i32 %115, -1
  %185 = and i32 %15, %184
  %186 = or i32 %118, %15
  %187 = xor i32 %110, %5
  %188 = and i32 %155, %3
  %189 = or i32 %143, %113
  %190 = or i32 %175, %109
  %191 = xor i32 %143, -1
  %192 = and i32 %173, %191
  %193 = and i32 %139, %3
  %194 = and i32 %139, %118
  %195 = or i32 %121, %104
  %196 = or i32 %158, %4
  %197 = and i32 %110, %5
  %198 = xor i32 %179, %3
  %199 = or i32 %162, %107
  %200 = or i32 %136, %109
  %201 = or i32 %162, %164
  %202 = or i32 %106, %4
  %203 = and i32 %118, %137
  %204 = shl i32 %203, 1
  %205 = or i32 %112, %143
  %206 = and i32 %191, %5
  %207 = shl i32 %133, 1
  %208 = and i32 %106, %191
  %209 = and i32 %161, %125
  %210 = and i32 %163, %4
  %211 = or i32 %209, %210
  %212 = or i32 %118, %113
  %213 = or i32 %143, %173
  %214 = and i32 %110, %113
  %215 = or i32 %143, %15
  %216 = xor i32 %163, %4
  %217 = or i32 %162, %216
  %218 = and i32 %15, %191
  %219 = and i32 %118, %179
  %220 = shl i32 %219, 1
  %221 = and i32 %184, %5
  %222 = and i32 %132, %125
  %223 = and i32 %129, %5
  %224 = or i32 %106, %125
  %225 = or i32 %112, %109
  %226 = xor i32 %121, %116
  %227 = and i32 %112, %129
  %228 = shl i32 %227, 1
  %229 = and i32 %112, %110
  %230 = or i32 %106, %130
  %231 = or i32 %105, %222
  %232 = or i32 %116, %125
  %233 = and i32 %137, %156
  %234 = shl i32 %233, 1
  %235 = or i32 %113, %109
  %236 = and i32 %116, %125
  %237 = or i32 %156, %5
  %238 = or i32 %113, %130
  %239 = xor i32 %184, %5
  %240 = xor i32 %224, -1
  %241 = or i32 %209, %240
  %242 = or i32 %133, %125
  %243 = and i32 %106, %4
  %244 = xor i32 %243, %169
  %245 = or i32 %115, %15
  %246 = xor i32 %132, %4
  %247 = xor i32 %246, %127
  %248 = xor i32 %111, %5
  %249 = or i32 %173, %111
  %250 = shl i32 %249, 1
  %251 = or i32 %105, %126
  %252 = xor i32 %139, %3
  %253 = or i32 %136, %130
  %254 = xor i32 %143, %123
  %255 = and i32 %156, %5
  %256 = xor i32 %191, %5
  %257 = xor i32 %136, %110
  %258 = shl i32 %132, 1
  %259 = or i32 %118, %5
  %260 = xor i32 %209, %224
  %261 = or i32 %175, %3
  %262 = or i32 %115, %113
  %263 = or i32 %173, %125
  %264 = and i32 %15, %156
  %265 = or i32 %113, %3
  %266 = and i32 %129, %15
  %267 = xor i32 %17, %4
  %268 = xor i32 %158, %4
  %269 = shl i32 %129, 1
  %270 = and i32 %112, %184
  %271 = xor i32 %104, %4
  %272 = or i32 %115, %173
  %273 = xor i32 %139, -1
  %274 = or i32 %118, %273
  %275 = xor i32 %129, %5
  %276 = and i32 %137, %109
  %277 = xor i32 %116, %4
  %278 = or i32 %105, %246
  %279 = and i32 %173, %184
  %280 = and i32 %123, %125
  %281 = or i32 %115, %273
  %282 = xor i32 %162, %202
  %283 = or i32 %273, %3
  %284 = or i32 %113, %156
  %285 = xor i32 %155, %115
  %286 = or i32 %167, %243
  %287 = or i32 %115, %175
  %288 = xor i32 %107, -1
  %289 = or i32 %105, %288
  %290 = or i32 %17, %4
  %291 = xor i32 %143, %5
  %292 = shl i32 %291, 1
  %293 = and i32 %17, %4
  %294 = add i32 %139, 1
  %295 = xor i32 %173, %4
  %296 = shl i32 %295, 1
  %297 = or i32 %111, %5
  %298 = or i32 %15, %130
  %299 = or i32 %121, %109
  %300 = xor i32 %123, %4
  %301 = or i32 %130, %5
  %302 = and i32 %133, %125
  %303 = shl i32 %302, 4
  %304 = and i32 %16, %125
  %305 = mul i32 %304, 14
  %306 = and i32 %133, %4
  %307 = mul i32 %306, 10
  %308 = and i32 %16, %4
  %309 = and i32 %158, %125
  %310 = and i32 %158, %4
  %311 = mul i32 %310, -26
  %312 = add i32 %32, %3
  %313 = add i32 %312, %77
  %314 = add i32 %313, %23
  %315 = add i32 %314, %123
  %316 = add i32 %315, %173
  %317 = add i32 %316, %167
  %318 = add i32 %317, %277
  %319 = add i32 %318, %274
  %320 = add i32 %319, %267
  %321 = add i32 %320, %253
  %322 = add i32 %321, %230
  %323 = add i32 %322, %212
  %324 = add i32 %323, %205
  %325 = add i32 %324, %174
  %326 = add i32 %325, %138
  %327 = add i32 %326, %135
  %328 = add i32 %327, %134
  %329 = add i32 %328, %124
  %330 = add i32 %329, %211
  %331 = add i32 %330, %217
  %332 = shl i32 %331, 1
  %333 = add i32 %109, %7
  %334 = sub i32 %333, %35
  %335 = add i32 %334, %143
  %336 = add i32 %335, %159
  %337 = add i32 %336, %235
  %338 = mul i32 %337, 3
  %339 = add i32 %25, %83
  %340 = add i32 %339, %58
  %341 = add i32 %340, %272
  %342 = shl i32 %341, 2
  %343 = sub i32 %289, %208
  %344 = mul i32 %343, 5
  %345 = add i32 %309, %99
  %346 = mul i32 %345, -15
  %347 = add i32 %105, %96
  %348 = mul i32 %347, -9
  %349 = sub i32 %24, %2
  %350 = add i32 %349, %71
  %351 = sub i32 %350, %76
  %352 = add i32 %351, %85
  %353 = add i32 %352, %27
  %354 = sub i32 %353, %29
  %355 = add i32 %354, %31
  %356 = add i32 %355, %33
  %357 = add i32 %356, %43
  %358 = add i32 %357, %52
  %359 = sub i32 %358, %53
  %360 = sub i32 %359, %54
  %361 = add i32 %360, %61
  %362 = add i32 %361, %63
  %363 = sub i32 %362, %68
  %364 = sub i32 %363, %74
  %365 = sub i32 %364, %75
  %366 = add i32 %365, %81
  %367 = sub i32 %366, %82
  %368 = add i32 %367, %84
  %369 = add i32 %368, %86
  %370 = sub i32 %369, %4
  %371 = add i32 %370, %125
  %372 = add i32 %371, %38
  %373 = sub i32 %372, %40
  %374 = add i32 %373, %47
  %375 = sub i32 %374, %51
  %376 = sub i32 %375, %56
  %377 = sub i32 %376, %67
  %378 = sub i32 %377, %79
  %379 = sub i32 %378, %80
  %380 = sub i32 %379, %88
  %381 = sub i32 %380, %92
  %382 = sub i32 %381, %95
  %383 = add i32 %382, %98
  %384 = sub i32 %383, %101
  %385 = add i32 %384, %102
  %386 = sub i32 %385, %103
  %387 = sub i32 %386, %118
  %388 = add i32 %387, %131
  %389 = sub i32 %388, %5
  %390 = add i32 %389, %111
  %391 = add i32 %390, %115
  %392 = sub i32 %391, %119
  %393 = sub i32 %392, %116
  %394 = add i32 %393, %137
  %395 = sub i32 %394, %177
  %396 = add i32 %395, %178
  %397 = sub i32 %396, %136
  %398 = add i32 %397, %181
  %399 = sub i32 %398, %185
  %400 = sub i32 %399, %186
  %401 = add i32 %400, %187
  %402 = add i32 %401, %155
  %403 = add i32 %402, %197
  %404 = add i32 %403, %206
  %405 = sub i32 %404, %215
  %406 = sub i32 %405, %218
  %407 = add i32 %406, %179
  %408 = add i32 %407, %221
  %409 = sub i32 %408, %223
  %410 = sub i32 %409, %237
  %411 = sub i32 %410, %239
  %412 = add i32 %411, %245
  %413 = add i32 %412, %248
  %414 = add i32 %413, %113
  %415 = add i32 %414, %255
  %416 = sub i32 %415, %256
  %417 = sub i32 %416, %259
  %418 = sub i32 %417, %264
  %419 = sub i32 %418, %266
  %420 = sub i32 %419, %269
  %421 = sub i32 %420, %275
  %422 = add i32 %421, %106
  %423 = add i32 %422, %294
  %424 = add i32 %423, %297
  %425 = sub i32 %424, %298
  %426 = sub i32 %425, %16
  %427 = add i32 %426, %301
  %428 = sub i32 %427, %114
  %429 = sub i32 %428, %117
  %430 = sub i32 %429, %120
  %431 = sub i32 %430, %122
  %432 = sub i32 %431, %140
  %433 = sub i32 %432, %141
  %434 = sub i32 %433, %142
  %435 = sub i32 %434, %144
  %436 = sub i32 %435, %145
  %437 = sub i32 %436, %146
  %438 = sub i32 %437, %147
  %439 = add i32 %438, %150
  %440 = sub i32 %439, %151
  %441 = add i32 %440, %154
  %442 = add i32 %441, %157
  %443 = add i32 %442, %160
  %444 = sub i32 %443, %171
  %445 = sub i32 %444, %172
  %446 = sub i32 %445, %176
  %447 = sub i32 %446, %180
  %448 = add i32 %447, %182
  %449 = add i32 %448, %183
  %450 = add i32 %449, %188
  %451 = sub i32 %450, %189
  %452 = sub i32 %451, %190
  %453 = add i32 %452, %192
  %454 = sub i32 %453, %193
  %455 = sub i32 %454, %194
  %456 = sub i32 %455, %195
  %457 = add i32 %456, %196
  %458 = sub i32 %457, %198
  %459 = add i32 %458, %200
  %460 = add i32 %459, %202
  %461 = sub i32 %460, %207
  %462 = sub i32 %461, %213
  %463 = add i32 %462, %214
  %464 = add i32 %463, %222
  %465 = add i32 %464, %224
  %466 = add i32 %465, %225
  %467 = sub i32 %466, %226
  %468 = add i32 %467, %229
  %469 = sub i32 %468, %232
  %470 = sub i32 %469, %236
  %471 = add i32 %470, %238
  %472 = sub i32 %471, %242
  %473 = sub i32 %472, %252
  %474 = add i32 %473, %254
  %475 = sub i32 %474, %257
  %476 = sub i32 %475, %258
  %477 = sub i32 %476, %261
  %478 = add i32 %477, %262
  %479 = sub i32 %478, %263
  %480 = add i32 %479, %265
  %481 = sub i32 %480, %268
  %482 = sub i32 %481, %270
  %483 = sub i32 %482, %271
  %484 = add i32 %483, %246
  %485 = add i32 %484, %276
  %486 = add i32 %485, %279
  %487 = add i32 %486, %280
  %488 = sub i32 %487, %281
  %489 = add i32 %488, %283
  %490 = sub i32 %489, %284
  %491 = sub i32 %490, %285
  %492 = sub i32 %491, %126
  %493 = sub i32 %492, %287
  %494 = sub i32 %493, %290
  %495 = sub i32 %494, %292
  %496 = add i32 %495, %293
  %497 = sub i32 %496, %299
  %498 = add i32 %497, %300
  %499 = add i32 %498, %308
  %500 = sub i32 %499, %108
  %501 = add i32 %500, %128
  %502 = sub i32 %501, %149
  %503 = sub i32 %502, %153
  %504 = sub i32 %503, %166
  %505 = sub i32 %504, %170
  %506 = add i32 %505, %199
  %507 = add i32 %506, %201
  %508 = sub i32 %507, %204
  %509 = sub i32 %508, %220
  %510 = sub i32 %509, %228
  %511 = add i32 %510, %231
  %512 = sub i32 %511, %234
  %513 = sub i32 %512, %241
  %514 = sub i32 %513, %244
  %515 = add i32 %514, %247
  %516 = sub i32 %515, %250
  %517 = sub i32 %516, %251
  %518 = add i32 %517, %260
  %519 = add i32 %518, %278
  %520 = add i32 %519, %282
  %521 = add i32 %520, %286
  %522 = sub i32 %521, %296
  %523 = sub i32 %522, %303
  %524 = add i32 %523, %305
  %525 = add i32 %524, %307
  %526 = add i32 %525, %311
  %527 = add i32 %526, %346
  %528 = add i32 %527, %348
  %529 = add i32 %528, %344
  %530 = add i32 %529, %342
  %531 = add i32 %530, %338
  %532 = add i32 %531, %332
  %533 = icmp eq i32 %18, %532
  %534 = select i1 %533, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %535 = tail call i32 @puts(i8* nonnull dereferenceable(1) %534)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
