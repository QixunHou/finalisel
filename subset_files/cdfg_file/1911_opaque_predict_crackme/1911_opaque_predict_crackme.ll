; ModuleID = '../.././c_source_file/1911_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1911_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %2
  %11 = mul i32 %10, -5
  %12 = sub i32 %6, %8
  %13 = shl i32 %12, 1
  %14 = add i32 %13, %11
  %15 = or i32 %4, %3
  %16 = xor i32 %4, -1
  %17 = and i32 %16, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %3, -1
  %20 = xor i32 %19, %4
  %21 = shl i32 %3, 1
  %22 = xor i32 %21, -2
  %23 = shl i32 %15, 1
  %24 = xor i32 %23, -2
  %25 = and i32 %19, %4
  %26 = shl i32 %17, 1
  %27 = xor i32 %2, -1
  %28 = or i32 %27, %1
  %29 = or i32 %28, %0
  %30 = and i32 %1, %0
  %31 = or i32 %27, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %30, %32
  %34 = xor i32 %0, -1
  %35 = and i32 %7, %2
  %36 = and i32 %35, %34
  %37 = or i32 %7, %2
  %38 = and i32 %37, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %36, %39
  %41 = or i32 %2, %0
  %42 = and i32 %41, %1
  %43 = and i32 %2, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %44, %46
  %48 = shl i32 %47, 1
  %49 = and i32 %27, %1
  %50 = xor i32 %49, -1
  %51 = xor i32 %8, %50
  %52 = xor i32 %49, %0
  %53 = xor i32 %41, -1
  %54 = add i32 %41, 1
  %55 = xor i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = and i32 %45, %56
  %58 = or i32 %53, %7
  %59 = xor i32 %2, %1
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %0
  %62 = shl i32 %61, 2
  %63 = or i32 %7, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %27, %64
  %66 = shl i32 %65, 1
  %67 = and i32 %27, %0
  %68 = xor i32 %67, -1
  %69 = and i32 %45, %68
  %70 = or i32 %2, %1
  %71 = or i32 %70, %34
  %72 = xor i32 %28, -1
  %73 = and i32 %2, %1
  %74 = and i32 %73, %34
  %75 = and i32 %59, %0
  %76 = xor i32 %74, -1
  %77 = xor i32 %75, %76
  %78 = and i32 %45, %44
  %79 = or i32 %64, %2
  %80 = or i32 %67, %72
  %81 = and i32 %70, %0
  %82 = xor i32 %81, %76
  %83 = xor i32 %73, -1
  %84 = add i32 %73, 1
  %85 = and i32 %56, %7
  %86 = or i32 %59, %0
  %87 = or i32 %1, %0
  %88 = and i32 %87, %27
  %89 = xor i32 %70, -1
  %90 = add i32 %70, 1
  %91 = or i32 %59, %30
  %92 = shl i32 %91, 1
  %93 = or i32 %83, %34
  %94 = shl i32 %28, 1
  %95 = xor i32 %63, %2
  %96 = or i32 %89, %34
  %97 = or i32 %67, %1
  %98 = and i32 %35, %0
  %99 = xor i32 %59, %0
  %100 = or i32 %98, %99
  %101 = and i32 %73, %0
  %102 = and i32 %70, %34
  %103 = xor i32 %102, 2147483647
  %104 = xor i32 %103, %101
  %105 = shl i32 %104, 1
  %106 = and i32 %31, %7
  %107 = shl i32 %49, 1
  %108 = or i32 %43, %45
  %109 = and i32 %37, %34
  %110 = xor i32 %98, -1
  %111 = xor i32 %109, %110
  %112 = and i32 %31, %1
  %113 = xor i32 %87, -1
  %114 = or i32 %43, %113
  %115 = or i32 %45, %2
  %116 = add i32 %2, 1
  %117 = xor i32 %87, %2
  %118 = or i32 %60, %34
  %119 = xor i32 %67, %28
  %120 = and i32 %28, %34
  %121 = xor i32 %70, %30
  %122 = or i32 %56, %7
  %123 = xor i32 %70, %0
  %124 = or i32 %101, %123
  %125 = or i32 %8, %2
  %126 = and i32 %27, %9
  %127 = xor i32 %28, %0
  %128 = xor i32 %44, %1
  %129 = and i32 %55, %46
  %130 = shl i32 %129, 1
  %131 = or i32 %45, %27
  %132 = or i32 %59, %113
  %133 = xor i32 %43, %87
  %134 = or i32 %67, %46
  %135 = and i32 %45, %2
  %136 = or i32 %101, %102
  %137 = or i32 %55, %113
  %138 = xor i32 %31, %30
  %139 = shl i32 %138, 1
  %140 = and i32 %68, %7
  %141 = xor i32 %30, %2
  %142 = and i32 %31, %46
  %143 = or i32 %55, %64
  %144 = xor i32 %50, %0
  %145 = and i32 %63, %27
  %146 = or i32 %43, %49
  %147 = shl i32 %45, 1
  %148 = and i32 %56, %46
  %149 = xor i32 %8, %83
  %150 = and i32 %55, %9
  %151 = and i32 %87, %60
  %152 = and i32 %68, %46
  %153 = xor i32 %30, -1
  %154 = and i32 %27, %153
  %155 = or i32 %55, %45
  %156 = shl i32 %155, 1
  %157 = and i32 %55, %63
  %158 = or i32 %98, %109
  %159 = and i32 %59, %63
  %160 = or i32 %28, %34
  %161 = or i32 %50, %34
  %162 = or i32 %67, %7
  %163 = xor i32 %113, %2
  %164 = xor i32 %32, %1
  %165 = or i32 %30, %56
  %166 = xor i32 %67, %83
  %167 = xor i32 %28, %30
  %168 = and i32 %55, %7
  %169 = or i32 %59, %34
  %170 = or i32 %32, %1
  %171 = shl i32 %170, 1
  %172 = or i32 %73, %8
  %173 = or i32 %27, %46
  %174 = or i32 %30, %2
  %175 = or i32 %72, %0
  %176 = or i32 %55, %8
  %177 = shl i32 %176, 2
  %178 = and i32 %50, %0
  %179 = xor i32 %99, %110
  %180 = or i32 %73, %34
  %181 = and i32 %87, %56
  %182 = or i32 %60, %113
  %183 = xor i32 %67, %1
  %184 = or i32 %30, %53
  %185 = shl i32 %184, 1
  %186 = and i32 %68, %1
  %187 = and i32 %9, %2
  %188 = and i32 %60, %153
  %189 = or i32 %27, %113
  %190 = or i32 %74, %75
  %191 = shl i32 %190, 1
  %192 = and i32 %41, %45
  %193 = and i32 %60, %34
  %194 = or i32 %43, %64
  %195 = and i32 %55, %153
  %196 = or i32 %46, %2
  %197 = and i32 %89, %34
  %198 = and i32 %49, %34
  %199 = shl i32 %198, 3
  %200 = and i32 %89, %0
  %201 = and i32 %49, %0
  %202 = mul i32 %201, 11
  %203 = and i32 %72, %34
  %204 = shl i32 %203, 1
  %205 = and i32 %72, %0
  %206 = mul i32 %205, -17
  %207 = add i32 %31, %46
  %208 = add i32 %207, %141
  %209 = add i32 %208, %135
  %210 = add i32 %209, %125
  %211 = add i32 %210, %95
  %212 = add i32 %211, %88
  %213 = add i32 %212, %194
  %214 = add i32 %213, %168
  %215 = add i32 %214, %152
  %216 = add i32 %215, %144
  %217 = add i32 %216, %143
  %218 = add i32 %217, %118
  %219 = add i32 %218, %106
  %220 = add i32 %219, %58
  %221 = add i32 %220, %52
  %222 = add i32 %221, %158
  %223 = shl i32 %222, 1
  %224 = add i32 %73, %200
  %225 = add i32 %224, %78
  %226 = mul i32 %225, -5
  %227 = sub i32 %172, %197
  %228 = add i32 %227, %133
  %229 = mul i32 %228, 3
  %230 = sub i32 %116, %1
  %231 = add i32 %230, %3
  %232 = add i32 %231, %54
  %233 = add i32 %232, %72
  %234 = add i32 %233, %79
  %235 = add i32 %234, %84
  %236 = add i32 %235, %90
  %237 = add i32 %236, %115
  %238 = sub i32 %237, %117
  %239 = add i32 %238, %44
  %240 = add i32 %239, %126
  %241 = add i32 %240, %131
  %242 = add i32 %241, %68
  %243 = sub i32 %242, %145
  %244 = sub i32 %243, %147
  %245 = add i32 %244, %154
  %246 = add i32 %245, %163
  %247 = add i32 %246, %173
  %248 = sub i32 %247, %174
  %249 = sub i32 %248, %55
  %250 = add i32 %249, %187
  %251 = add i32 %250, %189
  %252 = add i32 %251, %70
  %253 = sub i32 %252, %196
  %254 = sub i32 %253, %4
  %255 = sub i32 %254, %29
  %256 = add i32 %255, %33
  %257 = sub i32 %256, %42
  %258 = add i32 %257, %51
  %259 = add i32 %258, %57
  %260 = sub i32 %259, %66
  %261 = add i32 %260, %69
  %262 = sub i32 %261, %71
  %263 = add i32 %262, %80
  %264 = sub i32 %263, %85
  %265 = sub i32 %264, %86
  %266 = add i32 %265, %93
  %267 = sub i32 %266, %94
  %268 = sub i32 %267, %96
  %269 = sub i32 %268, %97
  %270 = sub i32 %269, %107
  %271 = sub i32 %270, %108
  %272 = add i32 %271, %99
  %273 = sub i32 %272, %112
  %274 = add i32 %273, %75
  %275 = sub i32 %274, %114
  %276 = add i32 %275, %119
  %277 = sub i32 %276, %120
  %278 = sub i32 %277, %121
  %279 = add i32 %278, %122
  %280 = sub i32 %279, %127
  %281 = add i32 %280, %128
  %282 = add i32 %281, %132
  %283 = sub i32 %282, %134
  %284 = sub i32 %283, %137
  %285 = sub i32 %284, %140
  %286 = sub i32 %285, %142
  %287 = add i32 %286, %146
  %288 = sub i32 %287, %148
  %289 = add i32 %288, %149
  %290 = add i32 %289, %150
  %291 = add i32 %290, %151
  %292 = sub i32 %291, %157
  %293 = sub i32 %292, %159
  %294 = sub i32 %293, %160
  %295 = add i32 %294, %161
  %296 = sub i32 %295, %162
  %297 = sub i32 %296, %164
  %298 = sub i32 %297, %165
  %299 = sub i32 %298, %166
  %300 = sub i32 %299, %167
  %301 = add i32 %300, %169
  %302 = add i32 %301, %81
  %303 = sub i32 %302, %175
  %304 = add i32 %303, %178
  %305 = sub i32 %304, %180
  %306 = sub i32 %305, %181
  %307 = sub i32 %306, %182
  %308 = add i32 %307, %183
  %309 = sub i32 %308, %186
  %310 = add i32 %309, %102
  %311 = add i32 %310, %188
  %312 = add i32 %311, %192
  %313 = sub i32 %312, %193
  %314 = add i32 %313, %195
  %315 = sub i32 %314, %15
  %316 = add i32 %315, %18
  %317 = add i32 %316, %20
  %318 = sub i32 %317, %22
  %319 = add i32 %318, %25
  %320 = sub i32 %319, %6
  %321 = sub i32 %320, %40
  %322 = sub i32 %321, %48
  %323 = add i32 %322, %62
  %324 = sub i32 %323, %77
  %325 = sub i32 %324, %82
  %326 = sub i32 %325, %92
  %327 = add i32 %326, %100
  %328 = sub i32 %327, %111
  %329 = sub i32 %328, %124
  %330 = sub i32 %329, %130
  %331 = sub i32 %330, %136
  %332 = sub i32 %331, %139
  %333 = sub i32 %332, %156
  %334 = sub i32 %333, %171
  %335 = sub i32 %334, %177
  %336 = add i32 %335, %179
  %337 = sub i32 %336, %185
  %338 = add i32 %337, %199
  %339 = add i32 %338, %202
  %340 = sub i32 %339, %204
  %341 = add i32 %340, %206
  %342 = sub i32 %341, %26
  %343 = sub i32 %342, %191
  %344 = sub i32 %343, %24
  %345 = sub i32 %344, %105
  %346 = add i32 %345, %229
  %347 = add i32 %346, %226
  %348 = add i32 %347, %223
  %349 = icmp eq i32 %14, %348
  %350 = select i1 %349, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %351 = tail call i32 @puts(i8* nonnull dereferenceable(1) %350)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
