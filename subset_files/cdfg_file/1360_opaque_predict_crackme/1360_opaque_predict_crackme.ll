; ModuleID = '../.././c_source_file/1360_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1360_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = or i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = add i32 %6, %8
  %10 = xor i32 %4, %3
  %11 = shl i32 %10, 2
  %12 = xor i32 %11, -4
  %13 = and i32 %4, %3
  %14 = xor i32 %13, -1
  %15 = or i32 %4, %3
  %16 = shl i32 %10, 1
  %17 = xor i32 %4, -1
  %18 = or i32 %17, %3
  %19 = add i32 %15, 1
  %20 = shl i32 %18, 1
  %21 = xor i32 %20, -2
  %22 = shl i32 %13, 2
  %23 = xor i32 %1, -1
  %24 = and i32 %23, %0
  %25 = and i32 %2, %1
  %26 = or i32 %25, %24
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %23
  %30 = and i32 %2, %0
  %31 = or i32 %30, %1
  %32 = or i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = xor i32 %33, %0
  %35 = or i32 %28, %1
  %36 = xor i32 %0, -1
  %37 = xor i32 %2, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %36
  %40 = xor i32 %2, -1
  %41 = and i32 %40, %0
  %42 = xor i32 %41, %1
  %43 = xor i32 %37, %0
  %44 = add i32 %27, 1
  %45 = and i32 %40, %1
  %46 = or i32 %45, %0
  %47 = or i32 %27, %23
  %48 = or i32 %1, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %49, %2
  %51 = and i32 %23, %2
  %52 = and i32 %51, %0
  %53 = or i32 %37, %0
  %54 = xor i32 %53, 2147483647
  %55 = or i32 %54, %52
  %56 = or i32 %8, %23
  %57 = or i32 %23, %0
  %58 = and i32 %57, %38
  %59 = and i32 %1, %0
  %60 = xor i32 %59, -1
  %61 = and i32 %60, %2
  %62 = xor i32 %25, -1
  %63 = or i32 %62, %0
  %64 = or i32 %40, %0
  %65 = xor i32 %1, %0
  %66 = and i32 %64, %65
  %67 = and i32 %25, %0
  %68 = xor i32 %67, %43
  %69 = and i32 %38, %0
  %70 = and i32 %28, %23
  %71 = xor i32 %65, -1
  %72 = or i32 %40, %71
  %73 = or i32 %40, %1
  %74 = xor i32 %73, -1
  %75 = or i32 %41, %74
  %76 = xor i32 %24, -1
  %77 = and i32 %40, %76
  %78 = or i32 %32, %36
  %79 = or i32 %41, %23
  %80 = or i32 %59, %38
  %81 = xor i32 %30, -1
  %82 = and i32 %81, %1
  %83 = xor i32 %81, %1
  %84 = and i32 %65, %2
  %85 = or i32 %74, %0
  %86 = and i32 %37, %36
  %87 = xor i32 %86, -1
  %88 = xor i32 %67, %87
  %89 = or i32 %23, %2
  %90 = and i32 %89, %36
  %91 = xor i32 %52, -1
  %92 = xor i32 %90, %91
  %93 = xor i32 %41, -1
  %94 = and i32 %93, %1
  %95 = or i32 %52, %43
  %96 = xor i32 %74, %0
  %97 = or i32 %30, %33
  %98 = or i32 %30, %23
  %99 = xor i32 %45, -1
  %100 = and i32 %99, %0
  %101 = shl i32 %100, 1
  %102 = and i32 %28, %76
  %103 = xor i32 %64, -1
  %104 = or i32 %103, %1
  %105 = and i32 %27, %65
  %106 = or i32 %8, %71
  %107 = shl i32 %106, 1
  %108 = or i32 %24, %40
  %109 = and i32 %27, %71
  %110 = and i32 %81, %71
  %111 = or i32 %41, %1
  %112 = xor i32 %64, %59
  %113 = and i32 %57, %28
  %114 = shl i32 %113, 1
  %115 = and i32 %48, %38
  %116 = or i32 %25, %36
  %117 = xor i32 %62, %0
  %118 = and i32 %57, %40
  %119 = or i32 %33, %0
  %120 = xor i32 %43, %91
  %121 = or i32 %27, %65
  %122 = xor i32 %32, %59
  %123 = and i32 %48, %28
  %124 = and i32 %57, %2
  %125 = or i32 %41, %71
  %126 = or i32 %25, %0
  %127 = xor i32 %25, %0
  %128 = shl i32 %127, 1
  %129 = or i32 %65, %8
  %130 = and i32 %37, %48
  %131 = and i32 %27, %48
  %132 = shl i32 %131, 1
  %133 = or i32 %73, %0
  %134 = or i32 %65, %40
  %135 = or i32 %38, %49
  %136 = or i32 %24, %28
  %137 = shl i32 %27, 1
  %138 = and i32 %40, %71
  %139 = shl i32 %138, 1
  %140 = xor i32 %7, %1
  %141 = shl i32 %140, 1
  %142 = xor i32 %60, %2
  %143 = xor i32 %64, %1
  %144 = or i32 %62, %36
  %145 = xor i32 %41, %62
  %146 = xor i32 %30, %99
  %147 = and i32 %37, %60
  %148 = and i32 %7, %23
  %149 = add i32 %65, 1
  %150 = xor i32 %30, %1
  %151 = or i32 %65, %103
  %152 = or i32 %38, %0
  %153 = and i32 %27, %57
  %154 = and i32 %40, %60
  %155 = and i32 %73, %36
  %156 = xor i32 %30, %57
  %157 = or i32 %103, %71
  %158 = or i32 %30, %65
  %159 = or i32 %45, %36
  %160 = shl i32 %159, 1
  %161 = or i32 %33, %36
  %162 = and i32 %32, %36
  %163 = or i32 %67, %162
  %164 = add i32 %48, 1
  %165 = or i32 %41, %25
  %166 = xor i32 %103, %1
  %167 = and i32 %51, %36
  %168 = and i32 %89, %0
  %169 = xor i32 %168, 1073741823
  %170 = xor i32 %169, %167
  %171 = shl i32 %170, 2
  %172 = and i32 %7, %65
  %173 = or i32 %52, %90
  %174 = xor i32 %57, -1
  %175 = or i32 %174, %2
  %176 = shl i32 %93, 1
  %177 = and i32 %73, %0
  %178 = and i32 %62, %0
  %179 = xor i32 %8, %1
  %180 = shl i32 %179, 1
  %181 = xor i32 %7, %59
  %182 = or i32 %73, %36
  %183 = or i32 %71, %2
  %184 = and i32 %37, %76
  %185 = or i32 %24, %38
  %186 = and i32 %62, %36
  %187 = or i32 %45, %24
  %188 = xor i32 %41, %73
  %189 = xor i32 %76, %2
  %190 = or i32 %28, %49
  %191 = and i32 %64, %23
  %192 = xor i32 %32, %0
  %193 = and i32 %28, %60
  %194 = xor i32 %93, %1
  %195 = and i32 %37, %57
  %196 = or i32 %41, %65
  %197 = and i32 %28, %71
  %198 = or i32 %40, %49
  %199 = and i32 %27, %1
  %200 = and i32 %65, %93
  %201 = xor i32 %24, %2
  %202 = or i32 %67, %86
  %203 = or i32 %59, %40
  %204 = and i32 %64, %71
  %205 = and i32 %33, %36
  %206 = mul i32 %205, 13
  %207 = and i32 %45, %36
  %208 = and i32 %33, %0
  %209 = mul i32 %208, -11
  %210 = and i32 %45, %0
  %211 = mul i32 %210, 18
  %212 = and i32 %74, %36
  %213 = and i32 %25, %36
  %214 = and i32 %74, %0
  %215 = add i32 %59, %36
  %216 = add i32 %215, %203
  %217 = add i32 %216, %61
  %218 = add i32 %217, %199
  %219 = add i32 %218, %197
  %220 = add i32 %219, %135
  %221 = add i32 %220, %133
  %222 = add i32 %221, %202
  %223 = add i32 %222, %55
  %224 = shl i32 %223, 1
  %225 = sub i32 %142, %213
  %226 = sub i32 %225, %67
  %227 = add i32 %226, %58
  %228 = mul i32 %227, 5
  %229 = add i32 %19, %207
  %230 = mul i32 %229, 3
  %231 = add i32 %201, %24
  %232 = shl i32 %231, 2
  %233 = add i32 %149, %2
  %234 = add i32 %233, %164
  %235 = sub i32 %234, %57
  %236 = add i32 %235, %3
  %237 = add i32 %236, %44
  %238 = sub i32 %237, %50
  %239 = sub i32 %238, %72
  %240 = sub i32 %239, %77
  %241 = sub i32 %240, %84
  %242 = sub i32 %241, %108
  %243 = add i32 %242, %118
  %244 = add i32 %243, %124
  %245 = sub i32 %244, %134
  %246 = sub i32 %245, %154
  %247 = add i32 %246, %103
  %248 = add i32 %247, %175
  %249 = add i32 %248, %183
  %250 = add i32 %249, %189
  %251 = add i32 %250, %198
  %252 = sub i32 %251, %4
  %253 = add i32 %252, %26
  %254 = sub i32 %253, %29
  %255 = sub i32 %254, %31
  %256 = sub i32 %255, %34
  %257 = add i32 %256, %35
  %258 = sub i32 %257, %39
  %259 = add i32 %258, %42
  %260 = add i32 %259, %43
  %261 = add i32 %260, %46
  %262 = sub i32 %261, %47
  %263 = add i32 %262, %56
  %264 = sub i32 %263, %63
  %265 = add i32 %264, %66
  %266 = sub i32 %265, %69
  %267 = add i32 %266, %70
  %268 = add i32 %267, %75
  %269 = sub i32 %268, %78
  %270 = sub i32 %269, %79
  %271 = sub i32 %270, %80
  %272 = sub i32 %271, %82
  %273 = sub i32 %272, %83
  %274 = add i32 %273, %85
  %275 = add i32 %274, %94
  %276 = add i32 %275, %96
  %277 = sub i32 %276, %97
  %278 = sub i32 %277, %98
  %279 = sub i32 %278, %102
  %280 = add i32 %279, %104
  %281 = sub i32 %280, %105
  %282 = add i32 %281, %109
  %283 = sub i32 %282, %110
  %284 = sub i32 %283, %111
  %285 = add i32 %284, %112
  %286 = sub i32 %285, %115
  %287 = sub i32 %286, %116
  %288 = sub i32 %287, %117
  %289 = sub i32 %288, %119
  %290 = add i32 %289, %121
  %291 = add i32 %290, %122
  %292 = sub i32 %291, %123
  %293 = sub i32 %292, %125
  %294 = add i32 %293, %126
  %295 = add i32 %294, %129
  %296 = sub i32 %295, %130
  %297 = add i32 %296, %136
  %298 = sub i32 %297, %137
  %299 = sub i32 %298, %139
  %300 = add i32 %299, %143
  %301 = add i32 %300, %144
  %302 = sub i32 %301, %145
  %303 = sub i32 %302, %146
  %304 = sub i32 %303, %147
  %305 = add i32 %304, %148
  %306 = add i32 %305, %150
  %307 = add i32 %306, %151
  %308 = sub i32 %307, %152
  %309 = add i32 %308, %153
  %310 = add i32 %309, %155
  %311 = sub i32 %310, %156
  %312 = sub i32 %311, %157
  %313 = sub i32 %312, %158
  %314 = add i32 %313, %161
  %315 = add i32 %314, %165
  %316 = sub i32 %315, %166
  %317 = sub i32 %316, %172
  %318 = sub i32 %317, %176
  %319 = add i32 %318, %177
  %320 = sub i32 %319, %178
  %321 = add i32 %320, %181
  %322 = add i32 %321, %182
  %323 = sub i32 %322, %184
  %324 = sub i32 %323, %185
  %325 = sub i32 %324, %186
  %326 = sub i32 %325, %187
  %327 = sub i32 %326, %188
  %328 = add i32 %327, %190
  %329 = add i32 %328, %191
  %330 = sub i32 %329, %192
  %331 = sub i32 %330, %193
  %332 = sub i32 %331, %194
  %333 = sub i32 %332, %195
  %334 = add i32 %333, %196
  %335 = add i32 %334, %200
  %336 = add i32 %335, %204
  %337 = add i32 %336, %212
  %338 = add i32 %337, %214
  %339 = add i32 %338, %14
  %340 = add i32 %339, %15
  %341 = sub i32 %340, %18
  %342 = add i32 %341, %68
  %343 = sub i32 %342, %88
  %344 = sub i32 %343, %92
  %345 = sub i32 %344, %95
  %346 = sub i32 %345, %101
  %347 = sub i32 %346, %107
  %348 = sub i32 %347, %114
  %349 = add i32 %348, %120
  %350 = sub i32 %349, %128
  %351 = sub i32 %350, %132
  %352 = sub i32 %351, %141
  %353 = sub i32 %352, %160
  %354 = add i32 %353, %163
  %355 = add i32 %354, %173
  %356 = sub i32 %355, %180
  %357 = add i32 %356, %206
  %358 = add i32 %357, %209
  %359 = add i32 %358, %211
  %360 = add i32 %359, %232
  %361 = sub i32 %360, %16
  %362 = sub i32 %361, %22
  %363 = add i32 %362, %12
  %364 = add i32 %363, %21
  %365 = sub i32 %364, %171
  %366 = add i32 %365, %230
  %367 = add i32 %366, %228
  %368 = add i32 %367, %224
  %369 = icmp eq i32 %9, %368
  %370 = select i1 %369, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %371 = tail call i32 @puts(i8* nonnull dereferenceable(1) %370)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
