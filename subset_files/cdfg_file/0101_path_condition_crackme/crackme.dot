digraph "DFG for'crackme' function" {
	Node0xd4dbe0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xd4dc50[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xd4dd10[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0xd4dd80[shape=record, label="  %6 = and i32 %3, %0"];
	Node0xd4de20[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0xd4de90[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0xd4df00[shape=record, label="  %9 = and i32 %1, %0"];
	Node0xd4df70[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xd4dfe0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0xd4e080[shape=record, label="  %12 = shl i32 %0, 2"];
	Node0xd4e120[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0xd4e190[shape=record, label="  %14 = xor i32 %11, -1"];
	Node0xd4e200[shape=record, label="  %15 = xor i32 %4, -1"];
	Node0xd4e2a0[shape=record, label="  %16 = mul i32 %6, -3"];
	Node0xd4e340[shape=record, label="  %17 = mul i32 %9, -5"];
	Node0xd4e3b0[shape=record, label="  %18 = add i32 %15, %14"];
	Node0xd4e450[shape=record, label="  %19 = mul i32 %18, -9"];
	Node0xd4e4c0[shape=record, label="  %20 = sub i32 %1, %0"];
	Node0xd4e530[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xd4e5a0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0xd4e610[shape=record, label="  %23 = add i32 %22, %13"];
	Node0xd4e680[shape=record, label="  %24 = add i32 %23, %16"];
	Node0xd4e6f0[shape=record, label="  %25 = add i32 %24, %17"];
	Node0xd4e760[shape=record, label="  %26 = add i32 %25, %8"];
	Node0xd4e7d0[shape=record, label="  %27 = add i32 %26, %19"];
	Node0xd4e840[shape=record, label="  %28 = icmp eq i32 %5, %27"];
	Node0xcee268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xd4ece0[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xd4ed30[shape=record, label="  ret void"];
	Node0xd4dbe0 -> Node0xd4dc50;
	Node0xd4dc50 -> Node0xd4dd10;
	Node0xd4dd10 -> Node0xd4dd80;
	Node0xd4dd80 -> Node0xd4de20;
	Node0xd4de20 -> Node0xd4de90;
	Node0xd4de90 -> Node0xd4df00;
	Node0xd4df00 -> Node0xd4df70;
	Node0xd4df70 -> Node0xd4dfe0;
	Node0xd4dfe0 -> Node0xd4e080;
	Node0xd4e080 -> Node0xd4e120;
	Node0xd4e120 -> Node0xd4e190;
	Node0xd4e190 -> Node0xd4e200;
	Node0xd4e200 -> Node0xd4e2a0;
	Node0xd4e2a0 -> Node0xd4e340;
	Node0xd4e340 -> Node0xd4e3b0;
	Node0xd4e3b0 -> Node0xd4e450;
	Node0xd4e450 -> Node0xd4e4c0;
	Node0xd4e4c0 -> Node0xd4e530;
	Node0xd4e530 -> Node0xd4e5a0;
	Node0xd4e5a0 -> Node0xd4e610;
	Node0xd4e610 -> Node0xd4e680;
	Node0xd4e680 -> Node0xd4e6f0;
	Node0xd4e6f0 -> Node0xd4e760;
	Node0xd4e760 -> Node0xd4e7d0;
	Node0xd4e7d0 -> Node0xd4e840;
	Node0xd4e840 -> Node0xcee268;
	Node0xcee268 -> Node0xd4ece0;
	Node0xd4ece0 -> Node0xd4ed30;
edge [color=red]
	Node0xd4dbe0 -> Node0xd4dc50;
	Node0xd4dc50 -> Node0xd4dd10;
	Node0xd4dbe0 -> Node0xd4dd80;
	Node0xd4dd80 -> Node0xd4de20;
	Node0xd4de20 -> Node0xd4de90;
	Node0xd4df00 -> Node0xd4df70;
	Node0xd4e080 -> Node0xd4e120;
	Node0xd4dfe0 -> Node0xd4e190;
	Node0xd4dc50 -> Node0xd4e200;
	Node0xd4dd80 -> Node0xd4e2a0;
	Node0xd4df00 -> Node0xd4e340;
	Node0xd4e200 -> Node0xd4e3b0;
	Node0xd4e190 -> Node0xd4e3b0;
	Node0xd4e3b0 -> Node0xd4e450;
	Node0xd4e4c0 -> Node0xd4e530;
	Node0xd4df70 -> Node0xd4e530;
	Node0xd4e530 -> Node0xd4e5a0;
	Node0xd4dfe0 -> Node0xd4e5a0;
	Node0xd4e5a0 -> Node0xd4e610;
	Node0xd4e120 -> Node0xd4e610;
	Node0xd4e610 -> Node0xd4e680;
	Node0xd4e2a0 -> Node0xd4e680;
	Node0xd4e680 -> Node0xd4e6f0;
	Node0xd4e340 -> Node0xd4e6f0;
	Node0xd4e6f0 -> Node0xd4e760;
	Node0xd4de90 -> Node0xd4e760;
	Node0xd4e760 -> Node0xd4e7d0;
	Node0xd4e450 -> Node0xd4e7d0;
	Node0xd4dd10 -> Node0xd4e840;
	Node0xd4e7d0 -> Node0xd4e840;
	Node0xd4e840 -> Node0xcee268;
	Node0xcee268 -> Node0xd4ece0;
}
