; ModuleID = '../.././c_source_file/0280_path_condition_crackme.c'
source_filename = "../.././c_source_file/0280_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = or i32 %5, %2
  %7 = shl i32 %6, 1
  %8 = xor i32 %2, -1
  %9 = and i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = add i32 %7, %11
  %13 = or i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %9, %14
  %16 = and i32 %2, %0
  %17 = and i32 %8, %1
  %18 = xor i32 %17, -1
  %19 = xor i32 %16, %18
  %20 = xor i32 %1, -1
  %21 = or i32 %20, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %22
  %26 = or i32 %23, %1
  %27 = xor i32 %4, %2
  %28 = xor i32 %0, -1
  %29 = xor i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %28
  %32 = xor i32 %1, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %13, %33
  %35 = and i32 %20, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %24, %36
  %38 = or i32 %8, %22
  %39 = and i32 %8, %33
  %40 = or i32 %8, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %28
  %43 = and i32 %2, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %28
  %46 = or i32 %29, %5
  %47 = and i32 %43, %0
  %48 = xor i32 %29, %0
  %49 = xor i32 %47, %48
  %50 = or i32 %16, %17
  %51 = or i32 %24, %5
  %52 = or i32 %43, %0
  %53 = and i32 %23, %33
  %54 = xor i32 %5, %2
  %55 = xor i32 %17, %0
  %56 = and i32 %40, %0
  %57 = and i32 %8, %0
  %58 = or i32 %57, %41
  %59 = and i32 %8, %36
  %60 = or i32 %16, %33
  %61 = or i32 %2, %1
  %62 = xor i32 %61, %0
  %63 = or i32 %47, %62
  %64 = xor i32 %57, -1
  %65 = xor i32 %64, %1
  %66 = or i32 %23, %22
  %67 = or i32 %17, %35
  %68 = and i32 %32, %24
  %69 = or i32 %9, %30
  %70 = add i32 %57, 1
  %71 = or i32 %30, %22
  %72 = xor i32 %16, -1
  %73 = or i32 %9, %24
  %74 = and i32 %21, %30
  %75 = and i32 %32, %72
  %76 = and i32 %29, %28
  %77 = or i32 %47, %76
  %78 = xor i32 %44, %0
  %79 = or i32 %9, %2
  %80 = or i32 %24, %20
  %81 = or i32 %57, %20
  %82 = and i32 %30, %36
  %83 = shl i32 %82, 1
  %84 = or i32 %14, %20
  %85 = xor i32 %48, -1
  %86 = or i32 %47, %85
  %87 = and i32 %32, %8
  %88 = or i32 %61, %28
  %89 = shl i32 %88, 1
  %90 = and i32 %21, %8
  %91 = and i32 %61, %28
  %92 = xor i32 %47, -1
  %93 = xor i32 %91, %92
  %94 = or i32 %8, %0
  %95 = xor i32 %94, -1
  %96 = or i32 %32, %95
  %97 = shl i32 %96, 1
  %98 = and i32 %44, %0
  %99 = xor i32 %16, %61
  %100 = xor i32 %57, %44
  %101 = and i32 %23, %1
  %102 = or i32 %95, %1
  %103 = or i32 %29, %28
  %104 = and i32 %43, %28
  %105 = and i32 %29, %0
  %106 = xor i32 %104, 2147483647
  %107 = xor i32 %106, %105
  %108 = shl i32 %107, 1
  %109 = or i32 %33, %2
  %110 = or i32 %40, %28
  %111 = xor i32 %35, %2
  %112 = or i32 %14, %1
  %113 = and i32 %23, %32
  %114 = shl i32 %113, 2
  %115 = and i32 %24, %20
  %116 = xor i32 %35, %44
  %117 = and i32 %23, %10
  %118 = add i32 %17, 1
  %119 = or i32 %29, %9
  %120 = xor i32 %14, %1
  %121 = and i32 %29, %36
  %122 = and i32 %24, %33
  %123 = or i32 %32, %2
  %124 = and i32 %40, %28
  %125 = or i32 %17, %28
  %126 = and i32 %35, %2
  %127 = or i32 %29, %0
  %128 = xor i32 %126, %127
  %129 = and i32 %29, %4
  %130 = shl i32 %91, 1
  %131 = and i32 %29, %10
  %132 = or i32 %23, %32
  %133 = shl i32 %132, 1
  %134 = xor i32 %61, -1
  %135 = or i32 %134, %28
  %136 = and i32 %61, %0
  %137 = or i32 %104, %136
  %138 = or i32 %43, %35
  %139 = add i32 %23, 1
  %140 = or i32 %41, %0
  %141 = and i32 %21, %2
  %142 = or i32 %9, %41
  %143 = shl i32 %142, 1
  %144 = or i32 %30, %0
  %145 = add i32 %43, 1
  %146 = xor i32 %57, %1
  %147 = xor i32 %30, %0
  %148 = and i32 %94, %33
  %149 = or i32 %18, %28
  %150 = or i32 %20, %2
  %151 = xor i32 %150, -1
  %152 = or i32 %151, %0
  %153 = xor i32 %126, %152
  %154 = or i32 %32, %8
  %155 = or i32 %30, %28
  %156 = and i32 %23, %36
  %157 = shl i32 %156, 2
  %158 = or i32 %35, %30
  %159 = xor i32 %10, %2
  %160 = or i32 %40, %0
  %161 = or i32 %18, %0
  %162 = and i32 %13, %20
  %163 = and i32 %33, %2
  %164 = or i32 %57, %1
  %165 = and i32 %23, %21
  %166 = and i32 %32, %64
  %167 = xor i32 %35, %18
  %168 = shl i32 %167, 1
  %169 = xor i32 %76, %92
  %170 = and i32 %21, %24
  %171 = xor i32 %13, %1
  %172 = or i32 %16, %1
  %173 = and i32 %72, %33
  %174 = shl i32 %173, 1
  %175 = and i32 %36, %2
  %176 = shl i32 %30, 1
  %177 = or i32 %16, %32
  %178 = xor i32 %62, %92
  %179 = xor i32 %106, %136
  %180 = shl i32 %179, 1
  %181 = or i32 %22, %2
  %182 = xor i32 %150, %0
  %183 = or i32 %126, %182
  %184 = shl i32 %14, 1
  %185 = xor i32 %94, %1
  %186 = xor i32 %22, %2
  %187 = and i32 %72, %1
  %188 = or i32 %47, %91
  %189 = xor i32 %16, %21
  %190 = and i32 %134, %28
  %191 = and i32 %17, %28
  %192 = mul i32 %191, -15
  %193 = and i32 %134, %0
  %194 = mul i32 %193, 14
  %195 = and i32 %17, %0
  %196 = mul i32 %195, 3
  %197 = and i32 %41, %28
  %198 = mul i32 %197, 9
  %199 = shl i32 %104, 3
  %200 = sub i32 %147, %47
  %201 = add i32 %200, %78
  %202 = mul i32 %201, 5
  %203 = add i32 %171, -1
  %204 = add i32 %203, %177
  %205 = add i32 %204, %124
  %206 = add i32 %205, %122
  %207 = add i32 %206, %120
  %208 = add i32 %207, %103
  %209 = add i32 %208, %51
  %210 = add i32 %209, %37
  %211 = add i32 %210, %26
  %212 = add i32 %211, %25
  %213 = shl i32 %212, 1
  %214 = add i32 %4, 2
  %215 = sub i32 %214, %2
  %216 = sub i32 %215, %9
  %217 = sub i32 %216, %32
  %218 = add i32 %217, %4
  %219 = sub i32 %218, %27
  %220 = add i32 %219, %38
  %221 = sub i32 %220, %39
  %222 = sub i32 %221, %54
  %223 = sub i32 %222, %59
  %224 = add i32 %223, %70
  %225 = add i32 %224, %79
  %226 = sub i32 %225, %87
  %227 = add i32 %226, %90
  %228 = sub i32 %227, %94
  %229 = sub i32 %228, %109
  %230 = add i32 %229, %111
  %231 = add i32 %230, %118
  %232 = sub i32 %231, %123
  %233 = add i32 %232, %13
  %234 = add i32 %233, %139
  %235 = sub i32 %234, %141
  %236 = add i32 %235, %145
  %237 = sub i32 %236, %17
  %238 = sub i32 %237, %154
  %239 = add i32 %238, %159
  %240 = sub i32 %239, %163
  %241 = sub i32 %240, %175
  %242 = add i32 %241, %181
  %243 = add i32 %242, %186
  %244 = sub i32 %243, %19
  %245 = add i32 %244, %15
  %246 = add i32 %245, %31
  %247 = add i32 %246, %34
  %248 = add i32 %247, %42
  %249 = sub i32 %248, %45
  %250 = add i32 %249, %46
  %251 = add i32 %250, %50
  %252 = sub i32 %251, %52
  %253 = add i32 %252, %53
  %254 = add i32 %253, %55
  %255 = add i32 %254, %56
  %256 = sub i32 %255, %58
  %257 = add i32 %256, %60
  %258 = add i32 %257, %65
  %259 = add i32 %258, %66
  %260 = add i32 %259, %67
  %261 = sub i32 %260, %68
  %262 = add i32 %261, %69
  %263 = add i32 %262, %71
  %264 = sub i32 %263, %73
  %265 = sub i32 %264, %74
  %266 = add i32 %265, %75
  %267 = add i32 %266, %80
  %268 = sub i32 %267, %81
  %269 = add i32 %268, %84
  %270 = sub i32 %269, %98
  %271 = sub i32 %270, %99
  %272 = add i32 %271, %100
  %273 = add i32 %272, %101
  %274 = add i32 %273, %102
  %275 = sub i32 %274, %110
  %276 = sub i32 %275, %112
  %277 = sub i32 %276, %115
  %278 = sub i32 %277, %116
  %279 = sub i32 %278, %117
  %280 = sub i32 %279, %119
  %281 = add i32 %280, %121
  %282 = add i32 %281, %125
  %283 = add i32 %282, %62
  %284 = add i32 %283, %129
  %285 = add i32 %284, %131
  %286 = sub i32 %285, %135
  %287 = sub i32 %286, %138
  %288 = sub i32 %287, %140
  %289 = add i32 %288, %144
  %290 = sub i32 %289, %146
  %291 = sub i32 %290, %148
  %292 = add i32 %291, %149
  %293 = add i32 %292, %155
  %294 = add i32 %293, %158
  %295 = sub i32 %294, %160
  %296 = sub i32 %295, %161
  %297 = sub i32 %296, %162
  %298 = sub i32 %297, %164
  %299 = add i32 %298, %165
  %300 = add i32 %299, %166
  %301 = add i32 %300, %76
  %302 = add i32 %301, %170
  %303 = add i32 %302, %172
  %304 = sub i32 %303, %176
  %305 = sub i32 %304, %184
  %306 = sub i32 %305, %185
  %307 = add i32 %306, %187
  %308 = sub i32 %307, %189
  %309 = add i32 %308, %190
  %310 = add i32 %309, %49
  %311 = add i32 %310, %63
  %312 = add i32 %311, %77
  %313 = sub i32 %312, %83
  %314 = add i32 %313, %86
  %315 = sub i32 %314, %89
  %316 = sub i32 %315, %93
  %317 = sub i32 %316, %97
  %318 = sub i32 %317, %114
  %319 = add i32 %318, %128
  %320 = sub i32 %319, %130
  %321 = sub i32 %320, %133
  %322 = sub i32 %321, %137
  %323 = sub i32 %322, %143
  %324 = sub i32 %323, %153
  %325 = sub i32 %324, %157
  %326 = sub i32 %325, %168
  %327 = sub i32 %326, %169
  %328 = sub i32 %327, %174
  %329 = add i32 %328, %178
  %330 = sub i32 %329, %183
  %331 = sub i32 %330, %188
  %332 = add i32 %331, %192
  %333 = add i32 %332, %194
  %334 = add i32 %333, %196
  %335 = add i32 %334, %198
  %336 = add i32 %335, %199
  %337 = sub i32 %336, %108
  %338 = sub i32 %337, %180
  %339 = add i32 %338, %202
  %340 = add i32 %339, %213
  %341 = icmp eq i32 %12, %340
  %342 = select i1 %341, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %343 = tail call i32 @puts(i8* nonnull dereferenceable(1) %342)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
