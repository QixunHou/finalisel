; ModuleID = '../.././c_source_file/1063_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1063_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = and i32 %8, %7
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %12, %0
  %14 = sub i32 %13, %9
  %15 = xor i32 %4, -1
  %16 = and i32 %5, %3
  %17 = and i32 %16, %15
  %18 = xor i32 %5, %3
  %19 = and i32 %18, %4
  %20 = xor i32 %19, -1
  %21 = xor i32 %17, %20
  %22 = sub i32 %14, %4
  %23 = add i32 %22, %21
  %24 = and i32 %10, %0
  %25 = xor i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %24, %26
  %28 = and i32 %1, %0
  %29 = or i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %28, %30
  %32 = or i32 %10, %0
  %33 = and i32 %32, %26
  %34 = xor i32 %32, -1
  %35 = or i32 %34, %26
  %36 = shl i32 %35, 1
  %37 = xor i32 %1, -1
  %38 = and i32 %37, %0
  %39 = xor i32 %0, -1
  %40 = xor i32 %7, -1
  %41 = xor i32 %32, %1
  %42 = or i32 %10, %1
  %43 = xor i32 %42, -1
  %44 = xor i32 %43, %0
  %45 = xor i32 %38, -1
  %46 = xor i32 %2, %0
  %47 = and i32 %46, %45
  %48 = or i32 %37, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %8, -1
  %51 = or i32 %50, %49
  %52 = xor i32 %46, -1
  %53 = and i32 %52, %1
  %54 = and i32 %2, %0
  %55 = or i32 %54, %30
  %56 = or i32 %46, %25
  %57 = and i32 %2, %1
  %58 = or i32 %30, %39
  %59 = and i32 %57, %39
  %60 = and i32 %8, %0
  %61 = or i32 %59, %60
  %62 = or i32 %46, %1
  %63 = xor i32 %60, -1
  %64 = xor i32 %59, %63
  %65 = or i32 %8, %40
  %66 = and i32 %8, %39
  %67 = xor i32 %54, %29
  %68 = xor i32 %8, %0
  %69 = or i32 %11, %0
  %70 = shl i32 %69, 1
  %71 = and i32 %8, %45
  %72 = xor i32 %38, %2
  %73 = or i32 %42, %0
  %74 = and i32 %57, %0
  %75 = xor i32 %0, 2147483647
  %76 = xor i32 %75, %29
  %77 = xor i32 %76, %74
  %78 = shl i32 %77, 1
  %79 = xor i32 %24, -1
  %80 = and i32 %79, %26
  %81 = and i32 %50, %39
  %82 = xor i32 %28, %10
  %83 = and i32 %48, %10
  %84 = or i32 %34, %37
  %85 = or i32 %24, %1
  %86 = and i32 %32, %25
  %87 = or i32 %46, %49
  %88 = shl i32 %87, 1
  %89 = or i32 %24, %57
  %90 = or i32 %2, %0
  %91 = xor i32 %90, -1
  %92 = or i32 %25, %91
  %93 = or i32 %38, %50
  %94 = and i32 %37, %39
  %95 = and i32 %94, %2
  %96 = or i32 %37, %2
  %97 = and i32 %96, %0
  %98 = or i32 %95, %97
  %99 = and i32 %25, %79
  %100 = or i32 %50, %39
  %101 = xor i32 %54, -1
  %102 = and i32 %101, %1
  %103 = and i32 %26, %2
  %104 = and i32 %90, %1
  %105 = xor i32 %29, %28
  %106 = shl i32 %105, 1
  %107 = and i32 %46, %48
  %108 = and i32 %48, %2
  %109 = and i32 %30, %39
  %110 = and i32 %11, %39
  %111 = shl i32 %110, 1
  %112 = and i32 %30, %0
  %113 = and i32 %11, %0
  %114 = shl i32 %113, 1
  %115 = and i32 %43, %39
  %116 = mul i32 %59, -9
  %117 = and i32 %43, %0
  %118 = mul i32 %117, -6
  %119 = xor i32 %3, -1
  %120 = and i32 %119, %4
  %121 = xor i32 %16, -1
  %122 = xor i32 %120, %121
  %123 = xor i32 %5, -1
  %124 = and i32 %123, %3
  %125 = or i32 %124, %15
  %126 = or i32 %121, %15
  %127 = xor i32 %4, %3
  %128 = or i32 %127, %123
  %129 = or i32 %4, %3
  %130 = xor i32 %129, -1
  %131 = or i32 %18, %130
  %132 = xor i32 %5, %4
  %133 = xor i32 %132, -1
  %134 = or i32 %133, %3
  %135 = xor i32 %124, -1
  %136 = and i32 %135, %4
  %137 = or i32 %123, %3
  %138 = xor i32 %18, -1
  %139 = xor i32 %120, -1
  %140 = and i32 %139, %5
  %141 = and i32 %4, %3
  %142 = xor i32 %137, %4
  %143 = or i32 %123, %4
  %144 = xor i32 %143, -1
  %145 = or i32 %141, %144
  %146 = and i32 %5, %4
  %147 = or i32 %5, %3
  %148 = xor i32 %147, -1
  %149 = or i32 %146, %148
  %150 = or i32 %138, %130
  %151 = and i32 %119, %5
  %152 = and i32 %151, %4
  %153 = xor i32 %18, %4
  %154 = or i32 %152, %153
  %155 = or i32 %5, %4
  %156 = xor i32 %155, -1
  %157 = xor i32 %156, %3
  %158 = and i32 %18, %129
  %159 = xor i32 %127, -1
  %160 = and i32 %159, %5
  %161 = and i32 %127, %5
  %162 = or i32 %146, %127
  %163 = xor i32 %135, %4
  %164 = or i32 %146, %159
  %165 = and i32 %121, %4
  %166 = or i32 %18, %4
  %167 = and i32 %129, %133
  %168 = xor i32 %146, -1
  %169 = and i32 %168, %119
  %170 = or i32 %147, %4
  %171 = xor i32 %137, -1
  %172 = or i32 %141, %171
  %173 = shl i32 %172, 1
  %174 = or i32 %171, %4
  %175 = and i32 %123, %4
  %176 = xor i32 %175, %3
  %177 = or i32 %119, %5
  %178 = and i32 %177, %15
  %179 = or i32 %152, %178
  %180 = shl i32 %179, 1
  %181 = or i32 %119, %4
  %182 = xor i32 %181, -1
  %183 = or i32 %182, %5
  %184 = or i32 %132, %159
  %185 = shl i32 %184, 1
  %186 = or i32 %156, %3
  %187 = or i32 %137, %15
  %188 = or i32 %132, %127
  %189 = add i32 %129, 1
  %190 = and i32 %151, %15
  %191 = and i32 %177, %4
  %192 = xor i32 %191, 2147483647
  %193 = xor i32 %192, %190
  %194 = shl i32 %193, 1
  %195 = or i32 %138, %15
  %196 = shl i32 %195, 1
  %197 = xor i32 %146, %135
  %198 = shl i32 %197, 1
  %199 = or i32 %18, %120
  %200 = shl i32 %199, 1
  %201 = xor i32 %143, %3
  %202 = or i32 %18, %15
  %203 = and i32 %155, %3
  %204 = add i32 %181, 1
  %205 = or i32 %127, %156
  %206 = or i32 %141, %5
  %207 = or i32 %120, %138
  %208 = shl i32 %207, 1
  %209 = xor i32 %141, %5
  %210 = xor i32 %146, %147
  %211 = and i32 %18, %15
  %212 = xor i32 %175, -1
  %213 = and i32 %127, %212
  %214 = and i32 %181, %133
  %215 = and i32 %135, %15
  %216 = xor i32 %120, %5
  %217 = and i32 %133, %139
  %218 = or i32 %175, %16
  %219 = shl i32 %218, 1
  %220 = or i32 %135, %15
  %221 = and i32 %16, %4
  %222 = and i32 %147, %15
  %223 = xor i32 %221, -1
  %224 = xor i32 %222, %223
  %225 = or i32 %175, %3
  %226 = or i32 %16, %120
  %227 = or i32 %133, %119
  %228 = add i32 %175, 1
  %229 = xor i32 %130, %5
  %230 = or i32 %141, %156
  %231 = shl i32 %230, 1
  %232 = or i32 %190, %191
  %233 = xor i32 %182, %5
  %234 = xor i32 %168, %3
  %235 = and i32 %212, %119
  %236 = or i32 %141, %138
  %237 = or i32 %123, %130
  %238 = or i32 %175, %171
  %239 = and i32 %129, %138
  %240 = xor i32 %175, %137
  %241 = or i32 %123, %159
  %242 = add i32 %5, 1
  %243 = or i32 %124, %4
  %244 = or i32 %138, %182
  %245 = xor i32 %181, %5
  %246 = or i32 %132, %141
  %247 = or i32 %120, %133
  %248 = xor i32 %144, %3
  %249 = xor i32 %177, %15
  %250 = xor i32 %249, %152
  %251 = or i32 %221, %222
  %252 = xor i32 %129, %5
  %253 = or i32 %130, %5
  %254 = shl i32 %253, 2
  %255 = and i32 %212, %3
  %256 = and i32 %137, %4
  %257 = and i32 %127, %133
  %258 = xor i32 %146, %181
  %259 = or i32 %146, %182
  %260 = xor i32 %124, %4
  %261 = xor i32 %138, %4
  %262 = xor i32 %141, -1
  %263 = add i32 %16, 1
  %264 = or i32 %144, %119
  %265 = xor i32 %147, %4
  %266 = or i32 %221, %265
  %267 = add i32 %143, 1
  %268 = xor i32 %202, -1
  %269 = or i32 %190, %268
  %270 = or i32 %147, %15
  %271 = xor i32 %148, %4
  %272 = xor i32 %137, %141
  %273 = or i32 %135, %4
  %274 = shl i32 %273, 2
  %275 = and i32 %132, %139
  %276 = and i32 %18, %139
  %277 = xor i32 %147, %141
  %278 = and i32 %155, %159
  %279 = or i32 %146, %119
  %280 = or i32 %146, %130
  %281 = shl i32 %280, 1
  %282 = and i32 %123, %139
  %283 = or i32 %159, %5
  %284 = add i32 %146, 1
  %285 = xor i32 %121, %4
  %286 = and i32 %155, %127
  %287 = shl i32 %286, 1
  %288 = and i32 %132, %127
  %289 = xor i32 %265, %223
  %290 = or i32 %175, %127
  %291 = xor i32 %155, %3
  %292 = or i32 %156, %119
  %293 = or i32 %124, %120
  %294 = xor i32 %16, %4
  %295 = xor i32 %221, %153
  %296 = and i32 %133, %3
  %297 = and i32 %148, %15
  %298 = mul i32 %297, -10
  %299 = and i32 %124, %15
  %300 = and i32 %148, %4
  %301 = and i32 %124, %4
  %302 = and i32 %171, %15
  %303 = mul i32 %302, -23
  %304 = and i32 %171, %4
  %305 = mul i32 %304, -12
  %306 = add i32 %38, %3
  %307 = add i32 %306, %90
  %308 = add i32 %307, %11
  %309 = add i32 %308, %92
  %310 = add i32 %309, %81
  %311 = add i32 %310, %80
  %312 = add i32 %311, %51
  %313 = add i32 %312, %133
  %314 = add i32 %313, %206
  %315 = add i32 %314, %128
  %316 = add i32 %315, %275
  %317 = add i32 %316, %291
  %318 = add i32 %317, %270
  %319 = add i32 %318, %264
  %320 = add i32 %319, %238
  %321 = add i32 %320, %234
  %322 = add i32 %321, %202
  %323 = add i32 %322, %176
  %324 = add i32 %323, %125
  %325 = shl i32 %324, 1
  %326 = sub i32 %104, %115
  %327 = add i32 %326, %216
  %328 = add i32 %327, %241
  %329 = add i32 %328, %138
  %330 = mul i32 %329, 5
  %331 = add i32 %98, %119
  %332 = add i32 %331, %155
  %333 = mul i32 %332, 3
  %334 = add i32 %221, %301
  %335 = mul i32 %334, -19
  %336 = add i32 %300, %74
  %337 = mul i32 %336, -18
  %338 = add i32 %17, %112
  %339 = mul i32 %338, -13
  %340 = add i32 %299, %109
  %341 = mul i32 %340, -7
  %342 = add i32 %7, %0
  %343 = add i32 %342, 3
  %344 = add i32 %343, %57
  %345 = add i32 %344, %12
  %346 = add i32 %345, %72
  %347 = sub i32 %346, %82
  %348 = add i32 %347, %83
  %349 = add i32 %348, %91
  %350 = add i32 %349, %103
  %351 = add i32 %350, %108
  %352 = sub i32 %351, %31
  %353 = sub i32 %352, %27
  %354 = add i32 %353, %33
  %355 = sub i32 %354, %41
  %356 = add i32 %355, %44
  %357 = add i32 %356, %47
  %358 = add i32 %357, %53
  %359 = sub i32 %358, %55
  %360 = sub i32 %359, %56
  %361 = add i32 %360, %58
  %362 = sub i32 %361, %62
  %363 = add i32 %362, %65
  %364 = add i32 %363, %66
  %365 = sub i32 %364, %67
  %366 = sub i32 %365, %68
  %367 = sub i32 %366, %71
  %368 = add i32 %367, %73
  %369 = add i32 %368, %84
  %370 = add i32 %369, %85
  %371 = add i32 %370, %86
  %372 = add i32 %371, %89
  %373 = add i32 %372, %93
  %374 = sub i32 %373, %99
  %375 = add i32 %374, %100
  %376 = sub i32 %375, %102
  %377 = add i32 %376, %107
  %378 = sub i32 %377, %36
  %379 = sub i32 %378, %61
  %380 = add i32 %379, %64
  %381 = sub i32 %380, %70
  %382 = sub i32 %381, %88
  %383 = sub i32 %382, %106
  %384 = sub i32 %383, %111
  %385 = sub i32 %384, %114
  %386 = add i32 %385, %116
  %387 = add i32 %386, %118
  %388 = sub i32 %387, %141
  %389 = add i32 %388, %189
  %390 = add i32 %389, %204
  %391 = add i32 %390, %129
  %392 = add i32 %391, %242
  %393 = add i32 %392, %262
  %394 = add i32 %393, %139
  %395 = add i32 %394, %159
  %396 = sub i32 %395, %137
  %397 = add i32 %396, %140
  %398 = add i32 %397, %160
  %399 = add i32 %398, %147
  %400 = sub i32 %399, %161
  %401 = add i32 %400, %183
  %402 = add i32 %401, %146
  %403 = add i32 %402, %209
  %404 = add i32 %403, %171
  %405 = add i32 %404, %228
  %406 = add i32 %405, %175
  %407 = add i32 %406, %229
  %408 = sub i32 %407, %233
  %409 = add i32 %408, %143
  %410 = sub i32 %409, %237
  %411 = sub i32 %410, %245
  %412 = sub i32 %411, %252
  %413 = add i32 %412, %16
  %414 = add i32 %413, %263
  %415 = add i32 %414, %267
  %416 = sub i32 %415, %18
  %417 = add i32 %416, %282
  %418 = add i32 %417, %283
  %419 = add i32 %418, %284
  %420 = sub i32 %419, %78
  %421 = add i32 %420, %122
  %422 = sub i32 %421, %126
  %423 = add i32 %422, %131
  %424 = sub i32 %423, %134
  %425 = sub i32 %424, %136
  %426 = add i32 %425, %142
  %427 = sub i32 %426, %145
  %428 = add i32 %427, %19
  %429 = sub i32 %428, %149
  %430 = add i32 %429, %150
  %431 = sub i32 %430, %157
  %432 = sub i32 %431, %158
  %433 = sub i32 %432, %162
  %434 = sub i32 %433, %163
  %435 = add i32 %434, %164
  %436 = add i32 %435, %165
  %437 = add i32 %436, %166
  %438 = sub i32 %437, %167
  %439 = sub i32 %438, %169
  %440 = sub i32 %439, %170
  %441 = sub i32 %440, %174
  %442 = sub i32 %441, %186
  %443 = add i32 %442, %187
  %444 = sub i32 %443, %188
  %445 = sub i32 %444, %201
  %446 = sub i32 %445, %203
  %447 = sub i32 %446, %205
  %448 = sub i32 %447, %210
  %449 = sub i32 %448, %211
  %450 = sub i32 %449, %213
  %451 = add i32 %450, %214
  %452 = sub i32 %451, %215
  %453 = add i32 %452, %217
  %454 = add i32 %453, %220
  %455 = add i32 %454, %225
  %456 = add i32 %455, %226
  %457 = add i32 %456, %227
  %458 = sub i32 %457, %235
  %459 = add i32 %458, %236
  %460 = sub i32 %459, %239
  %461 = add i32 %460, %240
  %462 = sub i32 %461, %243
  %463 = sub i32 %462, %244
  %464 = add i32 %463, %246
  %465 = sub i32 %464, %247
  %466 = add i32 %465, %248
  %467 = sub i32 %466, %254
  %468 = add i32 %467, %255
  %469 = sub i32 %468, %256
  %470 = add i32 %469, %257
  %471 = add i32 %470, %258
  %472 = sub i32 %471, %259
  %473 = sub i32 %472, %260
  %474 = add i32 %473, %261
  %475 = sub i32 %474, %271
  %476 = add i32 %475, %272
  %477 = add i32 %476, %276
  %478 = add i32 %477, %277
  %479 = add i32 %478, %278
  %480 = sub i32 %479, %279
  %481 = sub i32 %480, %285
  %482 = sub i32 %481, %288
  %483 = add i32 %482, %290
  %484 = add i32 %483, %292
  %485 = sub i32 %484, %293
  %486 = add i32 %485, %294
  %487 = add i32 %486, %296
  %488 = sub i32 %487, %154
  %489 = sub i32 %488, %173
  %490 = sub i32 %489, %185
  %491 = sub i32 %490, %196
  %492 = sub i32 %491, %198
  %493 = sub i32 %492, %200
  %494 = sub i32 %493, %208
  %495 = sub i32 %494, %219
  %496 = add i32 %495, %224
  %497 = sub i32 %496, %231
  %498 = add i32 %497, %232
  %499 = sub i32 %498, %250
  %500 = sub i32 %499, %251
  %501 = add i32 %500, %266
  %502 = add i32 %501, %269
  %503 = add i32 %502, %274
  %504 = sub i32 %503, %281
  %505 = sub i32 %504, %287
  %506 = add i32 %505, %289
  %507 = add i32 %506, %295
  %508 = add i32 %507, %298
  %509 = add i32 %508, %303
  %510 = add i32 %509, %305
  %511 = sub i32 %510, %180
  %512 = add i32 %511, %333
  %513 = add i32 %512, %335
  %514 = add i32 %513, %337
  %515 = add i32 %514, %339
  %516 = add i32 %515, %341
  %517 = sub i32 %516, %194
  %518 = add i32 %517, %330
  %519 = add i32 %518, %325
  %520 = icmp eq i32 %23, %519
  %521 = select i1 %520, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %522 = tail call i32 @puts(i8* nonnull dereferenceable(1) %521)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
