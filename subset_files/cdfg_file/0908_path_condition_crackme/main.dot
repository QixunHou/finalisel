digraph "DFG for'main' function" {
	Node0x1b32c58[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1b32cd8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1b32d68[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1b331c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1b332a8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1b333c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b33600[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1b336b8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1b34628[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1b34cb0[shape=record, label="  %8 = add i32 %6, -1"];
	Node0x1b34d20[shape=record, label="  %9 = or i32 %7, %6"];
	Node0x1b34d90[shape=record, label="  %10 = xor i32 %7, %6"];
	Node0x1b34e00[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1b34e70[shape=record, label="  %12 = xor i32 %7, -1"];
	Node0x1b34ee0[shape=record, label="  %13 = and i32 %6, %12"];
	Node0x1b34f50[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1b34fc0[shape=record, label="  %15 = or i32 %6, %12"];
	Node0x1b35030[shape=record, label="  %16 = and i32 %7, %6"];
	Node0x1b350a0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1b35110[shape=record, label="  %18 = shl i32 %15, 1"];
	Node0x1b35180[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1b351f0[shape=record, label="  %20 = shl i32 %13, 2"];
	Node0x1b35260[shape=record, label="  %21 = shl i32 %16, 1"];
	Node0x1b352d0[shape=record, label="  %22 = sub i32 %6, %9"];
	Node0x1b35340[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x1b353b0[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x1b35420[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x1b35490[shape=record, label="  %26 = sub i32 %25, %11"];
	Node0x1b35500[shape=record, label="  %27 = add i32 %26, %20"];
	Node0x1b35570[shape=record, label="  %28 = add i32 %27, %21"];
	Node0x1b355e0[shape=record, label="  %29 = add i32 %28, %19"];
	Node0x1b35650[shape=record, label="  %30 = icmp eq i32 %8, %29"];
	Node0x1ad39d8[shape=record, label="  %31 = select i1 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b356e0[shape=record, label="  %32 = call i32 @puts(i8* nonnull dereferenceable(1) %31) #5"];
	Node0x1b35b48[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b35ca8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1b35d68[shape=record, label="  ret i32 0"];
	Node0x1b32c58 -> Node0x1b32cd8;
	Node0x1b32cd8 -> Node0x1b32d68;
	Node0x1b32d68 -> Node0x1b331c8;
	Node0x1b331c8 -> Node0x1b332a8;
	Node0x1b332a8 -> Node0x1b333c8;
	Node0x1b333c8 -> Node0x1b33600;
	Node0x1b33600 -> Node0x1b336b8;
	Node0x1b336b8 -> Node0x1b34628;
	Node0x1b34628 -> Node0x1b34cb0;
	Node0x1b34cb0 -> Node0x1b34d20;
	Node0x1b34d20 -> Node0x1b34d90;
	Node0x1b34d90 -> Node0x1b34e00;
	Node0x1b34e00 -> Node0x1b34e70;
	Node0x1b34e70 -> Node0x1b34ee0;
	Node0x1b34ee0 -> Node0x1b34f50;
	Node0x1b34f50 -> Node0x1b34fc0;
	Node0x1b34fc0 -> Node0x1b35030;
	Node0x1b35030 -> Node0x1b350a0;
	Node0x1b350a0 -> Node0x1b35110;
	Node0x1b35110 -> Node0x1b35180;
	Node0x1b35180 -> Node0x1b351f0;
	Node0x1b351f0 -> Node0x1b35260;
	Node0x1b35260 -> Node0x1b352d0;
	Node0x1b352d0 -> Node0x1b35340;
	Node0x1b35340 -> Node0x1b353b0;
	Node0x1b353b0 -> Node0x1b35420;
	Node0x1b35420 -> Node0x1b35490;
	Node0x1b35490 -> Node0x1b35500;
	Node0x1b35500 -> Node0x1b35570;
	Node0x1b35570 -> Node0x1b355e0;
	Node0x1b355e0 -> Node0x1b35650;
	Node0x1b35650 -> Node0x1ad39d8;
	Node0x1ad39d8 -> Node0x1b356e0;
	Node0x1b356e0 -> Node0x1b35b48;
	Node0x1b35b48 -> Node0x1b35ca8;
	Node0x1b35ca8 -> Node0x1b35d68;
edge [color=red]
	Node0x1b32c58 -> Node0x1b32d68;
	Node0x1b32d68 -> Node0x1b331c8;
	Node0x1b32cd8 -> Node0x1b332a8;
	Node0x1b332a8 -> Node0x1b333c8;
	Node0x1b32c58 -> Node0x1b33600;
	Node0x1b32cd8 -> Node0x1b33600;
	Node0x1b32c58 -> Node0x1b336b8;
	Node0x1b32cd8 -> Node0x1b34628;
	Node0x1b336b8 -> Node0x1b34cb0;
	Node0x1b34628 -> Node0x1b34d20;
	Node0x1b336b8 -> Node0x1b34d20;
	Node0x1b34628 -> Node0x1b34d90;
	Node0x1b336b8 -> Node0x1b34d90;
	Node0x1b34d90 -> Node0x1b34e00;
	Node0x1b34628 -> Node0x1b34e70;
	Node0x1b336b8 -> Node0x1b34ee0;
	Node0x1b34e70 -> Node0x1b34ee0;
	Node0x1b34ee0 -> Node0x1b34f50;
	Node0x1b336b8 -> Node0x1b34fc0;
	Node0x1b34e70 -> Node0x1b34fc0;
	Node0x1b34628 -> Node0x1b35030;
	Node0x1b336b8 -> Node0x1b35030;
	Node0x1b35030 -> Node0x1b350a0;
	Node0x1b34fc0 -> Node0x1b35110;
	Node0x1b35110 -> Node0x1b35180;
	Node0x1b34ee0 -> Node0x1b351f0;
	Node0x1b35030 -> Node0x1b35260;
	Node0x1b336b8 -> Node0x1b352d0;
	Node0x1b34d20 -> Node0x1b352d0;
	Node0x1b352d0 -> Node0x1b35340;
	Node0x1b34f50 -> Node0x1b35340;
	Node0x1b35340 -> Node0x1b353b0;
	Node0x1b34fc0 -> Node0x1b353b0;
	Node0x1b353b0 -> Node0x1b35420;
	Node0x1b350a0 -> Node0x1b35420;
	Node0x1b35420 -> Node0x1b35490;
	Node0x1b34e00 -> Node0x1b35490;
	Node0x1b35490 -> Node0x1b35500;
	Node0x1b351f0 -> Node0x1b35500;
	Node0x1b35500 -> Node0x1b35570;
	Node0x1b35260 -> Node0x1b35570;
	Node0x1b35570 -> Node0x1b355e0;
	Node0x1b35180 -> Node0x1b355e0;
	Node0x1b34cb0 -> Node0x1b35650;
	Node0x1b355e0 -> Node0x1b35650;
	Node0x1b35650 -> Node0x1ad39d8;
	Node0x1ad39d8 -> Node0x1b356e0;
	Node0x1b332a8 -> Node0x1b35b48;
	Node0x1b32d68 -> Node0x1b35ca8;
}
