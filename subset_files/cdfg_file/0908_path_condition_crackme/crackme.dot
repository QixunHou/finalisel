digraph "DFG for'crackme' function" {
	Node0x1b31b50[shape=record, label="  %3 = add i32 %0, -1"];
	Node0x1b31bc0[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x1b31c80[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x1b31cf0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1b31d60[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1b31dd0[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x1b31e40[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1b31eb0[shape=record, label="  %10 = or i32 %7, %0"];
	Node0x1b31f20[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x1b31f90[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1b32000[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0x1b320a0[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x1b32140[shape=record, label="  %15 = shl i32 %8, 2"];
	Node0x1b321b0[shape=record, label="  %16 = shl i32 %11, 1"];
	Node0x1b32220[shape=record, label="  %17 = sub i32 %0, %4"];
	Node0x1b32290[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x1b32300[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0x1b32370[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x1b323e0[shape=record, label="  %21 = sub i32 %20, %6"];
	Node0x1b32450[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x1b324c0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x1b32530[shape=record, label="  %24 = add i32 %23, %14"];
	Node0x1b325a0[shape=record, label="  %25 = icmp eq i32 %3, %24"];
	Node0x1ad2268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b32a40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1b32a90[shape=record, label="  ret void"];
	Node0x1b31b50 -> Node0x1b31bc0;
	Node0x1b31bc0 -> Node0x1b31c80;
	Node0x1b31c80 -> Node0x1b31cf0;
	Node0x1b31cf0 -> Node0x1b31d60;
	Node0x1b31d60 -> Node0x1b31dd0;
	Node0x1b31dd0 -> Node0x1b31e40;
	Node0x1b31e40 -> Node0x1b31eb0;
	Node0x1b31eb0 -> Node0x1b31f20;
	Node0x1b31f20 -> Node0x1b31f90;
	Node0x1b31f90 -> Node0x1b32000;
	Node0x1b32000 -> Node0x1b320a0;
	Node0x1b320a0 -> Node0x1b32140;
	Node0x1b32140 -> Node0x1b321b0;
	Node0x1b321b0 -> Node0x1b32220;
	Node0x1b32220 -> Node0x1b32290;
	Node0x1b32290 -> Node0x1b32300;
	Node0x1b32300 -> Node0x1b32370;
	Node0x1b32370 -> Node0x1b323e0;
	Node0x1b323e0 -> Node0x1b32450;
	Node0x1b32450 -> Node0x1b324c0;
	Node0x1b324c0 -> Node0x1b32530;
	Node0x1b32530 -> Node0x1b325a0;
	Node0x1b325a0 -> Node0x1ad2268;
	Node0x1ad2268 -> Node0x1b32a40;
	Node0x1b32a40 -> Node0x1b32a90;
edge [color=red]
	Node0x1b31c80 -> Node0x1b31cf0;
	Node0x1b31d60 -> Node0x1b31dd0;
	Node0x1b31dd0 -> Node0x1b31e40;
	Node0x1b31d60 -> Node0x1b31eb0;
	Node0x1b31f20 -> Node0x1b31f90;
	Node0x1b31eb0 -> Node0x1b32000;
	Node0x1b32000 -> Node0x1b320a0;
	Node0x1b31dd0 -> Node0x1b32140;
	Node0x1b31f20 -> Node0x1b321b0;
	Node0x1b31bc0 -> Node0x1b32220;
	Node0x1b32220 -> Node0x1b32290;
	Node0x1b31e40 -> Node0x1b32290;
	Node0x1b32290 -> Node0x1b32300;
	Node0x1b31eb0 -> Node0x1b32300;
	Node0x1b32300 -> Node0x1b32370;
	Node0x1b31f90 -> Node0x1b32370;
	Node0x1b32370 -> Node0x1b323e0;
	Node0x1b31cf0 -> Node0x1b323e0;
	Node0x1b323e0 -> Node0x1b32450;
	Node0x1b32140 -> Node0x1b32450;
	Node0x1b32450 -> Node0x1b324c0;
	Node0x1b321b0 -> Node0x1b324c0;
	Node0x1b324c0 -> Node0x1b32530;
	Node0x1b320a0 -> Node0x1b32530;
	Node0x1b31b50 -> Node0x1b325a0;
	Node0x1b32530 -> Node0x1b325a0;
	Node0x1b325a0 -> Node0x1ad2268;
	Node0x1ad2268 -> Node0x1b32a40;
}
