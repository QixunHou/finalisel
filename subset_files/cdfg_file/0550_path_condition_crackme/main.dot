digraph "DFG for'main' function" {
	Node0x79b258[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x79b2d8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x79b368[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x79b3c8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x79f108[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x79f1e8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x79f2e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x79f3a8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x79f458[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x79f6b8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x79f778[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x7a06e8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x7a0d58[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x7a0e50[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x7a1058[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x7a11b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x7a12c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x7a1388[shape=record, label="  ret i32 0"];
	Node0x79b258 -> Node0x79b2d8;
	Node0x79b2d8 -> Node0x79b368;
	Node0x79b368 -> Node0x79b3c8;
	Node0x79b3c8 -> Node0x79f108;
	Node0x79f108 -> Node0x79f1e8;
	Node0x79f1e8 -> Node0x79f2e8;
	Node0x79f2e8 -> Node0x79f3a8;
	Node0x79f3a8 -> Node0x79f458;
	Node0x79f458 -> Node0x79f6b8;
	Node0x79f6b8 -> Node0x79f778;
	Node0x79f778 -> Node0x7a06e8;
	Node0x7a06e8 -> Node0x7a0d58;
	Node0x7a0d58 -> Node0x7a0e50;
	Node0x7a0e50 -> Node0x7a1058;
	Node0x7a1058 -> Node0x7a11b8;
	Node0x7a11b8 -> Node0x7a12c8;
	Node0x7a12c8 -> Node0x7a1388;
edge [color=red]
	Node0x79b258 -> Node0x79b3c8;
	Node0x79b3c8 -> Node0x79f108;
	Node0x79b2d8 -> Node0x79f1e8;
	Node0x79f1e8 -> Node0x79f2e8;
	Node0x79b368 -> Node0x79f3a8;
	Node0x79f3a8 -> Node0x79f458;
	Node0x79b258 -> Node0x79f6b8;
	Node0x79b2d8 -> Node0x79f6b8;
	Node0x79b368 -> Node0x79f6b8;
	Node0x79b258 -> Node0x79f778;
	Node0x79b2d8 -> Node0x7a06e8;
	Node0x79b368 -> Node0x7a0d58;
	Node0x79f778 -> Node0x7a0e50;
	Node0x7a06e8 -> Node0x7a0e50;
	Node0x7a0d58 -> Node0x7a0e50;
	Node0x79f3a8 -> Node0x7a1058;
	Node0x79f1e8 -> Node0x7a11b8;
	Node0x79b3c8 -> Node0x7a12c8;
}
