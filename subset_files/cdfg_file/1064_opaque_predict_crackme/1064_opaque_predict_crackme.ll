; ModuleID = '../.././c_source_file/1064_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1064_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = add i32 %3, 2
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, %0
  %11 = xor i32 %2, %0
  %12 = and i32 %11, %1
  %13 = add i32 %8, %10
  %14 = add i32 %13, %12
  %15 = add i32 %14, %7
  %16 = or i32 %6, %3
  %17 = xor i32 %4, %3
  %18 = or i32 %4, %3
  %19 = xor i32 %18, -1
  %20 = mul i32 %19, -6
  %21 = xor i32 %16, -1
  %22 = and i32 %4, %3
  %23 = shl i32 %22, 1
  %24 = xor i32 %1, -1
  %25 = or i32 %24, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %1, %0
  %28 = or i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %0
  %31 = and i32 %1, %0
  %32 = xor i32 %31, %2
  %33 = xor i32 %9, -1
  %34 = and i32 %25, %33
  %35 = xor i32 %2, -1
  %36 = or i32 %35, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %27, -1
  %39 = or i32 %37, %38
  %40 = and i32 %35, %0
  %41 = or i32 %35, %1
  %42 = xor i32 %40, %41
  %43 = xor i32 %0, -1
  %44 = and i32 %35, %1
  %45 = or i32 %44, %43
  %46 = xor i32 %11, -1
  %47 = or i32 %46, %26
  %48 = xor i32 %31, -1
  %49 = and i32 %35, %48
  %50 = and i32 %2, %0
  %51 = or i32 %50, %24
  %52 = and i32 %2, %1
  %53 = and i32 %52, %43
  %54 = and i32 %28, %0
  %55 = or i32 %53, %54
  %56 = or i32 %50, %1
  %57 = shl i32 %56, 1
  %58 = and i32 %24, %0
  %59 = or i32 %58, %35
  %60 = and i32 %27, %35
  %61 = and i32 %11, %38
  %62 = xor i32 %58, %2
  %63 = xor i32 %50, -1
  %64 = and i32 %27, %63
  %65 = and i32 %46, %38
  %66 = or i32 %1, %0
  %67 = xor i32 %66, -1
  %68 = or i32 %35, %67
  %69 = shl i32 %68, 1
  %70 = and i32 %66, %35
  %71 = shl i32 %70, 1
  %72 = and i32 %24, %2
  %73 = and i32 %72, %0
  %74 = xor i32 %10, -1
  %75 = xor i32 %73, %74
  %76 = and i32 %9, %25
  %77 = shl i32 %76, 1
  %78 = or i32 %50, %26
  %79 = xor i32 %58, -1
  %80 = and i32 %33, %79
  %81 = and i32 %63, %1
  %82 = or i32 %50, %38
  %83 = or i32 %33, %67
  %84 = or i32 %52, %0
  %85 = xor i32 %41, -1
  %86 = or i32 %85, %43
  %87 = xor i32 %66, %2
  %88 = or i32 %2, %0
  %89 = xor i32 %88, -1
  %90 = or i32 %27, %89
  %91 = or i32 %33, %43
  %92 = or i32 %31, %33
  %93 = xor i32 %54, -1
  %94 = xor i32 %53, %93
  %95 = xor i32 %50, %1
  %96 = xor i32 %28, %31
  %97 = and i32 %52, %0
  %98 = xor i32 %28, %0
  %99 = or i32 %97, %98
  %100 = and i32 %66, %2
  %101 = or i32 %31, %37
  %102 = or i32 %40, %27
  %103 = xor i32 %89, %1
  %104 = and i32 %88, %38
  %105 = or i32 %27, %2
  %106 = or i32 %11, %1
  %107 = xor i32 %52, %0
  %108 = xor i32 %88, %1
  %109 = or i32 %11, %38
  %110 = and i32 %88, %27
  %111 = xor i32 %37, %1
  %112 = and i32 %66, %46
  %113 = and i32 %9, %66
  %114 = or i32 %31, %85
  %115 = and i32 %9, %43
  %116 = or i32 %97, %115
  %117 = or i32 %73, %10
  %118 = and i32 %36, %24
  %119 = xor i32 %33, %0
  %120 = shl i32 %119, 1
  %121 = and i32 %11, %48
  %122 = or i32 %46, %67
  %123 = and i32 %28, %43
  %124 = xor i32 %123, -1
  %125 = xor i32 %97, %124
  %126 = or i32 %27, %35
  %127 = add i32 %31, 1
  %128 = or i32 %50, %29
  %129 = xor i32 %52, -1
  %130 = and i32 %129, %43
  %131 = or i32 %11, %24
  %132 = or i32 %9, %26
  %133 = or i32 %40, %52
  %134 = shl i32 %133, 2
  %135 = or i32 %11, %58
  %136 = shl i32 %135, 1
  %137 = and i32 %72, %43
  %138 = or i32 %9, %43
  %139 = xor i32 %137, %138
  %140 = xor i32 %44, -1
  %141 = xor i32 %140, %0
  %142 = or i32 %89, %1
  %143 = or i32 %44, %0
  %144 = and i32 %11, %66
  %145 = or i32 %9, %31
  %146 = xor i32 %40, -1
  %147 = and i32 %146, %1
  %148 = shl i32 %147, 1
  %149 = xor i32 %25, %2
  %150 = shl i32 %149, 1
  %151 = or i32 %44, %58
  %152 = shl i32 %44, 1
  %153 = add i32 %2, 1
  %154 = or i32 %9, %58
  %155 = or i32 %33, %26
  %156 = xor i32 %88, %31
  %157 = and i32 %46, %48
  %158 = and i32 %41, %43
  %159 = shl i32 %158, 1
  %160 = shl i32 %66, 1
  %161 = or i32 %85, %0
  %162 = or i32 %31, %35
  %163 = shl i32 %162, 1
  %164 = and i32 %25, %2
  %165 = and i32 %46, %24
  %166 = shl i32 %115, 1
  %167 = or i32 %52, %43
  %168 = or i32 %37, %24
  %169 = or i32 %35, %38
  %170 = shl i32 %169, 1
  %171 = or i32 %38, %2
  %172 = or i32 %40, %85
  %173 = xor i32 %50, %28
  %174 = xor i32 %98, 2147483647
  %175 = xor i32 %174, %97
  %176 = and i32 %11, %24
  %177 = or i32 %46, %1
  %178 = or i32 %46, %38
  %179 = or i32 %29, %43
  %180 = xor i32 %79, %2
  %181 = and i32 %33, %48
  %182 = shl i32 %24, 1
  %183 = or i32 %28, %43
  %184 = or i32 %27, %46
  %185 = or i32 %31, %89
  %186 = or i32 %11, %67
  %187 = xor i32 %44, %0
  %188 = xor i32 %40, %1
  %189 = xor i32 %63, %1
  %190 = shl i32 %189, 1
  %191 = or i32 %24, %2
  %192 = and i32 %191, %0
  %193 = xor i32 %192, -1
  %194 = xor i32 %137, %193
  %195 = or i32 %140, %0
  %196 = and i32 %66, %33
  %197 = shl i32 %196, 1
  %198 = or i32 %33, %0
  %199 = shl i32 %198, 1
  %200 = or i32 %9, %0
  %201 = xor i32 %200, -1
  %202 = or i32 %73, %201
  %203 = and i32 %38, %2
  %204 = and i32 %11, %25
  %205 = and i32 %46, %1
  %206 = xor i32 %36, %1
  %207 = xor i32 %85, %0
  %208 = and i32 %191, %43
  %209 = or i32 %73, %208
  %210 = and i32 %9, %48
  %211 = shl i32 %210, 2
  %212 = and i32 %27, %2
  %213 = or i32 %35, %26
  %214 = shl i32 %213, 1
  %215 = and i32 %88, %1
  %216 = xor i32 %191, %0
  %217 = or i32 %73, %216
  %218 = or i32 %89, %38
  %219 = or i32 %89, %24
  %220 = and i32 %41, %0
  %221 = or i32 %97, %74
  %222 = or i32 %52, %58
  %223 = and i32 %33, %43
  %224 = and i32 %35, %79
  %225 = or i32 %11, %27
  %226 = and i32 %46, %79
  %227 = or i32 %50, %27
  %228 = or i32 %140, %43
  %229 = and i32 %25, %35
  %230 = shl i32 %229, 1
  %231 = or i32 %41, %0
  %232 = or i32 %28, %0
  %233 = or i32 %27, %37
  %234 = or i32 %31, %2
  %235 = xor i32 %129, %0
  %236 = xor i32 %58, %140
  %237 = xor i32 %97, %10
  %238 = or i32 %11, %26
  %239 = and i32 %63, %24
  %240 = or i32 %9, %67
  %241 = xor i32 %216, -1
  %242 = xor i32 %73, %241
  %243 = and i32 %35, %38
  %244 = or i32 %97, %123
  %245 = xor i32 %67, %2
  %246 = and i32 %27, %146
  %247 = or i32 %137, %192
  %248 = shl i32 %247, 1
  %249 = and i32 %11, %27
  %250 = and i32 %9, %0
  %251 = xor i32 %250, 2147483647
  %252 = xor i32 %251, %53
  %253 = shl i32 %252, 1
  %254 = add i32 %66, 1
  %255 = and i32 %63, %38
  %256 = add i32 %52, 1
  %257 = add i32 %50, 1
  %258 = and i32 %29, %43
  %259 = and i32 %44, %43
  %260 = and i32 %29, %0
  %261 = and i32 %44, %0
  %262 = mul i32 %261, 36
  %263 = and i32 %85, %43
  %264 = mul i32 %97, 14
  %265 = add i32 %234, %245
  %266 = add i32 %265, %29
  %267 = add i32 %266, %59
  %268 = sub i32 %267, %3
  %269 = add i32 %268, %98
  %270 = add i32 %269, %225
  %271 = add i32 %270, %220
  %272 = add i32 %271, %165
  %273 = add i32 %272, %156
  %274 = add i32 %273, %130
  %275 = add i32 %274, %106
  %276 = add i32 %275, %96
  %277 = add i32 %276, %90
  %278 = add i32 %277, %84
  %279 = add i32 %278, %83
  %280 = add i32 %279, %78
  %281 = add i32 %280, %34
  %282 = add i32 %281, %99
  %283 = add i32 %282, %175
  %284 = shl i32 %283, 1
  %285 = add i32 %11, %203
  %286 = add i32 %285, %167
  %287 = add i32 %286, %185
  %288 = mul i32 %287, -5
  %289 = add i32 %206, %180
  %290 = add i32 %289, %21
  %291 = or i32 %260, %259
  %292 = mul i32 %291, 20
  %293 = add i32 %263, %258
  %294 = mul i32 %293, 13
  %295 = add i32 %176, %110
  %296 = shl i32 %295, 2
  %297 = xor i32 %290, -1
  %298 = mul i32 %297, 3
  %299 = sub i32 -2, %0
  %300 = add i32 %299, %1
  %301 = add i32 %300, %27
  %302 = sub i32 %301, %58
  %303 = add i32 %302, %127
  %304 = add i32 %303, %153
  %305 = sub i32 %304, %31
  %306 = sub i32 %305, %182
  %307 = add i32 %306, %254
  %308 = sub i32 %307, %32
  %309 = add i32 %308, %49
  %310 = sub i32 %309, %60
  %311 = sub i32 %310, %62
  %312 = add i32 %311, %87
  %313 = add i32 %312, %100
  %314 = sub i32 %313, %36
  %315 = add i32 %314, %105
  %316 = add i32 %315, %88
  %317 = add i32 %316, %126
  %318 = sub i32 %317, %160
  %319 = add i32 %318, %164
  %320 = sub i32 %319, %171
  %321 = sub i32 %320, %212
  %322 = add i32 %321, %46
  %323 = sub i32 %322, %41
  %324 = sub i32 %323, %224
  %325 = add i32 %324, %37
  %326 = add i32 %325, %243
  %327 = add i32 %326, %256
  %328 = add i32 %327, %257
  %329 = add i32 %328, %6
  %330 = add i32 %329, %30
  %331 = add i32 %330, %39
  %332 = add i32 %331, %42
  %333 = add i32 %332, %45
  %334 = sub i32 %333, %47
  %335 = add i32 %334, %51
  %336 = sub i32 %335, %61
  %337 = sub i32 %336, %64
  %338 = sub i32 %337, %65
  %339 = sub i32 %338, %69
  %340 = sub i32 %339, %71
  %341 = sub i32 %340, %54
  %342 = add i32 %341, %80
  %343 = sub i32 %342, %81
  %344 = sub i32 %343, %82
  %345 = add i32 %344, %86
  %346 = sub i32 %345, %91
  %347 = add i32 %346, %92
  %348 = add i32 %347, %95
  %349 = add i32 %348, %101
  %350 = add i32 %349, %102
  %351 = add i32 %350, %103
  %352 = sub i32 %351, %104
  %353 = add i32 %352, %107
  %354 = sub i32 %353, %108
  %355 = sub i32 %354, %109
  %356 = add i32 %355, %111
  %357 = sub i32 %356, %112
  %358 = sub i32 %357, %113
  %359 = add i32 %358, %114
  %360 = sub i32 %359, %118
  %361 = add i32 %360, %121
  %362 = add i32 %361, %122
  %363 = sub i32 %362, %128
  %364 = add i32 %363, %131
  %365 = sub i32 %364, %132
  %366 = add i32 %365, %141
  %367 = sub i32 %366, %142
  %368 = sub i32 %367, %143
  %369 = sub i32 %368, %144
  %370 = add i32 %369, %145
  %371 = sub i32 %370, %150
  %372 = sub i32 %371, %151
  %373 = sub i32 %372, %152
  %374 = add i32 %373, %154
  %375 = add i32 %374, %155
  %376 = sub i32 %375, %157
  %377 = sub i32 %376, %161
  %378 = sub i32 %377, %163
  %379 = add i32 %378, %168
  %380 = sub i32 %379, %170
  %381 = sub i32 %380, %172
  %382 = sub i32 %381, %173
  %383 = add i32 %382, %177
  %384 = sub i32 %383, %178
  %385 = add i32 %384, %179
  %386 = sub i32 %385, %181
  %387 = add i32 %386, %183
  %388 = add i32 %387, %184
  %389 = sub i32 %388, %186
  %390 = add i32 %389, %187
  %391 = sub i32 %390, %188
  %392 = sub i32 %391, %195
  %393 = sub i32 %392, %204
  %394 = add i32 %393, %205
  %395 = sub i32 %394, %207
  %396 = sub i32 %395, %214
  %397 = add i32 %396, %215
  %398 = add i32 %397, %218
  %399 = add i32 %398, %219
  %400 = sub i32 %399, %222
  %401 = add i32 %400, %223
  %402 = add i32 %401, %226
  %403 = add i32 %402, %227
  %404 = sub i32 %403, %228
  %405 = sub i32 %404, %230
  %406 = add i32 %405, %231
  %407 = sub i32 %406, %232
  %408 = sub i32 %407, %233
  %409 = add i32 %408, %235
  %410 = sub i32 %409, %236
  %411 = sub i32 %410, %238
  %412 = add i32 %411, %239
  %413 = sub i32 %412, %240
  %414 = sub i32 %413, %246
  %415 = sub i32 %414, %200
  %416 = sub i32 %415, %249
  %417 = sub i32 %416, %255
  %418 = sub i32 %417, %53
  %419 = add i32 %418, %16
  %420 = sub i32 %419, %17
  %421 = sub i32 %420, %7
  %422 = add i32 %421, %55
  %423 = sub i32 %422, %57
  %424 = add i32 %423, %75
  %425 = sub i32 %424, %77
  %426 = add i32 %425, %94
  %427 = add i32 %426, %116
  %428 = sub i32 %427, %117
  %429 = sub i32 %428, %120
  %430 = sub i32 %429, %125
  %431 = sub i32 %430, %134
  %432 = sub i32 %431, %136
  %433 = add i32 %432, %139
  %434 = sub i32 %433, %148
  %435 = sub i32 %434, %159
  %436 = sub i32 %435, %166
  %437 = sub i32 %436, %190
  %438 = sub i32 %437, %194
  %439 = sub i32 %438, %197
  %440 = sub i32 %439, %199
  %441 = sub i32 %440, %202
  %442 = add i32 %441, %209
  %443 = sub i32 %442, %211
  %444 = add i32 %443, %217
  %445 = add i32 %444, %221
  %446 = add i32 %445, %237
  %447 = sub i32 %446, %242
  %448 = add i32 %447, %244
  %449 = add i32 %448, %262
  %450 = add i32 %449, %264
  %451 = add i32 %450, %20
  %452 = sub i32 %451, %23
  %453 = sub i32 %452, %248
  %454 = add i32 %453, %292
  %455 = add i32 %454, %294
  %456 = add i32 %455, %296
  %457 = sub i32 %456, %253
  %458 = add i32 %457, %288
  %459 = add i32 %458, %298
  %460 = add i32 %459, %284
  %461 = icmp eq i32 %15, %460
  %462 = select i1 %461, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %463 = tail call i32 @puts(i8* nonnull dereferenceable(1) %462)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
