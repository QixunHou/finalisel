digraph "DFG for'crackme' function" {
	Node0x1dbed60[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1dbedd0[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x1dbee40[shape=record, label="  %7 = sub i32 %2, %6"];
	Node0x1dbeeb0[shape=record, label="  %8 = or i32 %5, %1"];
	Node0x1dbef20[shape=record, label="  %9 = and i32 %5, %1"];
	Node0x1dbefc0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1dbf060[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1dbf0d0[shape=record, label="  %12 = shl i32 %1, 1"];
	Node0x1dbf140[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1dbf1b0[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1dbf220[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1dbf290[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x1dbf300[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x1dbf370[shape=record, label="  %18 = xor i32 %5, %1"];
	Node0x1dbf3e0[shape=record, label="  %19 = xor i32 %17, -2"];
	Node0x1dbf480[shape=record, label="  %20 = mul i32 %9, -3"];
	Node0x1dbf4f0[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x1dbf560[shape=record, label="  %22 = or i32 %21, %3"];
	Node0x1dbf5d0[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x1dbf640[shape=record, label="  %24 = xor i32 %3, %0"];
	Node0x1dbf6b0[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1dbf720[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x1dbf790[shape=record, label="  %27 = xor i32 %3, -1"];
	Node0x1dbf830[shape=record, label="  %28 = shl i32 %23, 2"];
	Node0x1dbf8d0[shape=record, label="  %29 = xor i32 %28, -4"];
	Node0x1dbf940[shape=record, label="  %30 = shl i32 %22, 1"];
	Node0x1dbf9b0[shape=record, label="  %31 = xor i32 %30, -2"];
	Node0x1dbfa20[shape=record, label="  %32 = shl i32 %0, 1"];
	Node0x1dbfcd0[shape=record, label="  %33 = add i32 %32, 3"];
	Node0x1dbfd40[shape=record, label="  %34 = add i32 %33, %2"];
	Node0x1dbfdb0[shape=record, label="  %35 = sub i32 %34, %8"];
	Node0x1dbfe20[shape=record, label="  %36 = sub i32 %35, %13"];
	Node0x1dbfe90[shape=record, label="  %37 = add i32 %36, %15"];
	Node0x1dbff00[shape=record, label="  %38 = add i32 %37, %18"];
	Node0x1dbff70[shape=record, label="  %39 = sub i32 %38, %14"];
	Node0x1dbffe0[shape=record, label="  %40 = add i32 %39, %27"];
	Node0x1dc0050[shape=record, label="  %41 = add i32 %40, %17"];
	Node0x1dc00c0[shape=record, label="  %42 = add i32 %41, %20"];
	Node0x1dc0130[shape=record, label="  %43 = add i32 %42, %22"];
	Node0x1dc01a0[shape=record, label="  %44 = add i32 %43, %23"];
	Node0x1dc0210[shape=record, label="  %45 = add i32 %44, %6"];
	Node0x1dc0280[shape=record, label="  %46 = sub i32 %45, %11"];
	Node0x1dc02f0[shape=record, label="  %47 = add i32 %46, %19"];
	Node0x1dc0360[shape=record, label="  %48 = add i32 %47, %25"];
	Node0x1dc03d0[shape=record, label="  %49 = sub i32 %48, %26"];
	Node0x1dc0440[shape=record, label="  %50 = add i32 %49, %29"];
	Node0x1dc04b0[shape=record, label="  %51 = sub i32 %50, %31"];
	Node0x1dc0520[shape=record, label="  %52 = icmp eq i32 %7, %51"];
	Node0x1d5f268[shape=record, label="  %53 = select i1 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1dc09c0[shape=record, label="  %54 = tail call i32 @puts(i8* nonnull dereferenceable(1) %53)"];
	Node0x1dc0a10[shape=record, label="  ret void"];
	Node0x1dbed60 -> Node0x1dbedd0;
	Node0x1dbedd0 -> Node0x1dbee40;
	Node0x1dbee40 -> Node0x1dbeeb0;
	Node0x1dbeeb0 -> Node0x1dbef20;
	Node0x1dbef20 -> Node0x1dbefc0;
	Node0x1dbefc0 -> Node0x1dbf060;
	Node0x1dbf060 -> Node0x1dbf0d0;
	Node0x1dbf0d0 -> Node0x1dbf140;
	Node0x1dbf140 -> Node0x1dbf1b0;
	Node0x1dbf1b0 -> Node0x1dbf220;
	Node0x1dbf220 -> Node0x1dbf290;
	Node0x1dbf290 -> Node0x1dbf300;
	Node0x1dbf300 -> Node0x1dbf370;
	Node0x1dbf370 -> Node0x1dbf3e0;
	Node0x1dbf3e0 -> Node0x1dbf480;
	Node0x1dbf480 -> Node0x1dbf4f0;
	Node0x1dbf4f0 -> Node0x1dbf560;
	Node0x1dbf560 -> Node0x1dbf5d0;
	Node0x1dbf5d0 -> Node0x1dbf640;
	Node0x1dbf640 -> Node0x1dbf6b0;
	Node0x1dbf6b0 -> Node0x1dbf720;
	Node0x1dbf720 -> Node0x1dbf790;
	Node0x1dbf790 -> Node0x1dbf830;
	Node0x1dbf830 -> Node0x1dbf8d0;
	Node0x1dbf8d0 -> Node0x1dbf940;
	Node0x1dbf940 -> Node0x1dbf9b0;
	Node0x1dbf9b0 -> Node0x1dbfa20;
	Node0x1dbfa20 -> Node0x1dbfcd0;
	Node0x1dbfcd0 -> Node0x1dbfd40;
	Node0x1dbfd40 -> Node0x1dbfdb0;
	Node0x1dbfdb0 -> Node0x1dbfe20;
	Node0x1dbfe20 -> Node0x1dbfe90;
	Node0x1dbfe90 -> Node0x1dbff00;
	Node0x1dbff00 -> Node0x1dbff70;
	Node0x1dbff70 -> Node0x1dbffe0;
	Node0x1dbffe0 -> Node0x1dc0050;
	Node0x1dc0050 -> Node0x1dc00c0;
	Node0x1dc00c0 -> Node0x1dc0130;
	Node0x1dc0130 -> Node0x1dc01a0;
	Node0x1dc01a0 -> Node0x1dc0210;
	Node0x1dc0210 -> Node0x1dc0280;
	Node0x1dc0280 -> Node0x1dc02f0;
	Node0x1dc02f0 -> Node0x1dc0360;
	Node0x1dc0360 -> Node0x1dc03d0;
	Node0x1dc03d0 -> Node0x1dc0440;
	Node0x1dc0440 -> Node0x1dc04b0;
	Node0x1dc04b0 -> Node0x1dc0520;
	Node0x1dc0520 -> Node0x1d5f268;
	Node0x1d5f268 -> Node0x1dc09c0;
	Node0x1dc09c0 -> Node0x1dc0a10;
edge [color=red]
	Node0x1dbedd0 -> Node0x1dbee40;
	Node0x1dbed60 -> Node0x1dbeeb0;
	Node0x1dbed60 -> Node0x1dbef20;
	Node0x1dbef20 -> Node0x1dbefc0;
	Node0x1dbefc0 -> Node0x1dbf060;
	Node0x1dbf0d0 -> Node0x1dbf140;
	Node0x1dbf1b0 -> Node0x1dbf220;
	Node0x1dbf290 -> Node0x1dbf300;
	Node0x1dbed60 -> Node0x1dbf370;
	Node0x1dbf300 -> Node0x1dbf3e0;
	Node0x1dbef20 -> Node0x1dbf480;
	Node0x1dbf4f0 -> Node0x1dbf560;
	Node0x1dbf640 -> Node0x1dbf6b0;
	Node0x1dbf6b0 -> Node0x1dbf720;
	Node0x1dbf5d0 -> Node0x1dbf830;
	Node0x1dbf830 -> Node0x1dbf8d0;
	Node0x1dbf560 -> Node0x1dbf940;
	Node0x1dbf940 -> Node0x1dbf9b0;
	Node0x1dbfa20 -> Node0x1dbfcd0;
	Node0x1dbfcd0 -> Node0x1dbfd40;
	Node0x1dbfd40 -> Node0x1dbfdb0;
	Node0x1dbeeb0 -> Node0x1dbfdb0;
	Node0x1dbfdb0 -> Node0x1dbfe20;
	Node0x1dbf140 -> Node0x1dbfe20;
	Node0x1dbfe20 -> Node0x1dbfe90;
	Node0x1dbf220 -> Node0x1dbfe90;
	Node0x1dbfe90 -> Node0x1dbff00;
	Node0x1dbf370 -> Node0x1dbff00;
	Node0x1dbff00 -> Node0x1dbff70;
	Node0x1dbf1b0 -> Node0x1dbff70;
	Node0x1dbff70 -> Node0x1dbffe0;
	Node0x1dbf790 -> Node0x1dbffe0;
	Node0x1dbffe0 -> Node0x1dc0050;
	Node0x1dbf300 -> Node0x1dc0050;
	Node0x1dc0050 -> Node0x1dc00c0;
	Node0x1dbf480 -> Node0x1dc00c0;
	Node0x1dc00c0 -> Node0x1dc0130;
	Node0x1dbf560 -> Node0x1dc0130;
	Node0x1dc0130 -> Node0x1dc01a0;
	Node0x1dbf5d0 -> Node0x1dc01a0;
	Node0x1dc01a0 -> Node0x1dc0210;
	Node0x1dbedd0 -> Node0x1dc0210;
	Node0x1dc0210 -> Node0x1dc0280;
	Node0x1dbf060 -> Node0x1dc0280;
	Node0x1dc0280 -> Node0x1dc02f0;
	Node0x1dbf3e0 -> Node0x1dc02f0;
	Node0x1dc02f0 -> Node0x1dc0360;
	Node0x1dbf6b0 -> Node0x1dc0360;
	Node0x1dc0360 -> Node0x1dc03d0;
	Node0x1dbf720 -> Node0x1dc03d0;
	Node0x1dc03d0 -> Node0x1dc0440;
	Node0x1dbf8d0 -> Node0x1dc0440;
	Node0x1dc0440 -> Node0x1dc04b0;
	Node0x1dbf9b0 -> Node0x1dc04b0;
	Node0x1dbee40 -> Node0x1dc0520;
	Node0x1dc04b0 -> Node0x1dc0520;
	Node0x1dc0520 -> Node0x1d5f268;
	Node0x1d5f268 -> Node0x1dc09c0;
}
