; ModuleID = '../.././c_source_file/0292_path_condition_crackme.c'
source_filename = "../.././c_source_file/0292_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %1, %0
  %8 = shl i32 %7, 1
  %9 = xor i32 %2, -1
  %10 = and i32 %1, %0
  %11 = or i32 %10, %9
  %12 = or i32 %8, 1
  %13 = sub i32 %12, %11
  %14 = add i32 %13, %4
  %15 = or i32 %4, %3
  %16 = sub i32 %4, %15
  %17 = shl i32 %16, 1
  %18 = or i32 %17, 1
  %19 = xor i32 %3, -1
  %20 = and i32 %6, %3
  %21 = or i32 %6, %3
  %22 = shl i32 %15, 1
  %23 = xor i32 %22, -2
  %24 = shl i32 %21, 1
  %25 = xor i32 %24, -2
  %26 = xor i32 %1, -1
  %27 = or i32 %26, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %9, %28
  %30 = xor i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = or i32 %31, %0
  %33 = or i32 %30, %28
  %34 = shl i32 %33, 1
  %35 = and i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %1, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %36, %38
  %40 = or i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %37, %41
  %43 = and i32 %26, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %9, %44
  %46 = or i32 %2, %1
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %0
  %49 = or i32 %9, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %26
  %52 = and i32 %26, %2
  %53 = and i32 %52, %0
  %54 = xor i32 %30, %0
  %55 = or i32 %53, %54
  %56 = and i32 %2, %1
  %57 = and i32 %56, %0
  %58 = xor i32 %0, -1
  %59 = and i32 %46, %58
  %60 = or i32 %57, %59
  %61 = xor i32 %54, -1
  %62 = or i32 %57, %61
  %63 = shl i32 %62, 2
  %64 = xor i32 %28, %2
  %65 = and i32 %9, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %0
  %68 = xor i32 %2, %0
  %69 = or i32 %68, %10
  %70 = or i32 %68, %28
  %71 = or i32 %30, %0
  %72 = and i32 %40, %38
  %73 = or i32 %28, %2
  %74 = and i32 %52, %58
  %75 = or i32 %30, %58
  %76 = xor i32 %75, -1
  %77 = or i32 %74, %76
  %78 = xor i32 %56, -1
  %79 = shl i32 %78, 2
  %80 = and i32 %37, %36
  %81 = shl i32 %80, 1
  %82 = xor i32 %68, -1
  %83 = or i32 %37, %82
  %84 = and i32 %66, %58
  %85 = and i32 %49, %37
  %86 = xor i32 %35, %46
  %87 = and i32 %78, %58
  %88 = and i32 %30, %44
  %89 = and i32 %9, %0
  %90 = or i32 %9, %1
  %91 = xor i32 %89, %90
  %92 = and i32 %90, %0
  %93 = xor i32 %90, -1
  %94 = xor i32 %93, %0
  %95 = xor i32 %46, %0
  %96 = or i32 %57, %95
  %97 = xor i32 %10, -1
  %98 = and i32 %82, %97
  %99 = shl i32 %98, 1
  %100 = and i32 %82, %1
  %101 = shl i32 %100, 1
  %102 = and i32 %44, %2
  %103 = or i32 %30, %43
  %104 = or i32 %89, %93
  %105 = xor i32 %7, -1
  %106 = xor i32 %105, %2
  %107 = shl i32 %106, 1
  %108 = and i32 %56, %58
  %109 = and i32 %30, %0
  %110 = xor i32 %108, -1
  %111 = xor i32 %109, %110
  %112 = xor i32 %36, %1
  %113 = or i32 %46, %58
  %114 = or i32 %26, %2
  %115 = and i32 %114, %58
  %116 = or i32 %53, %115
  %117 = and i32 %31, %0
  %118 = or i32 %82, %38
  %119 = and i32 %68, %27
  %120 = and i32 %30, %58
  %121 = or i32 %57, %120
  %122 = shl i32 %121, 1
  %123 = xor i32 %44, %2
  %124 = or i32 %105, %2
  %125 = or i32 %35, %37
  %126 = or i32 %89, %56
  %127 = or i32 %68, %43
  %128 = and i32 %7, %2
  %129 = or i32 %47, %58
  %130 = or i32 %30, %105
  %131 = xor i32 %35, %66
  %132 = shl i32 %131, 1
  %133 = xor i32 %115, -1
  %134 = xor i32 %53, %133
  %135 = and i32 %27, %9
  %136 = or i32 %41, %1
  %137 = and i32 %30, %27
  %138 = shl i32 %44, 1
  %139 = xor i32 %56, %0
  %140 = xor i32 %90, %10
  %141 = xor i32 %40, %1
  %142 = and i32 %97, %2
  %143 = or i32 %56, %0
  %144 = or i32 %50, %38
  %145 = or i32 %35, %105
  %146 = add i32 %30, 1
  %147 = xor i32 %31, %0
  %148 = xor i32 %89, -1
  %149 = and i32 %148, %38
  %150 = and i32 %9, %38
  %151 = xor i32 %35, %27
  %152 = or i32 %37, %9
  %153 = or i32 %43, %82
  %154 = or i32 %43, %9
  %155 = and i32 %78, %0
  %156 = or i32 %82, %26
  %157 = add i32 %89, 1
  %158 = xor i32 %66, %0
  %159 = or i32 %65, %58
  %160 = or i32 %82, %28
  %161 = or i32 %35, %38
  %162 = or i32 %31, %28
  %163 = xor i32 %10, %2
  %164 = xor i32 %49, %10
  %165 = and i32 %31, %44
  %166 = and i32 %68, %26
  %167 = or i32 %89, %38
  %168 = or i32 %56, %43
  %169 = or i32 %43, %31
  %170 = or i32 %65, %43
  %171 = or i32 %10, %50
  %172 = and i32 %40, %26
  %173 = shl i32 %172, 1
  %174 = or i32 %41, %26
  %175 = shl i32 %174, 2
  %176 = and i32 %46, %0
  %177 = or i32 %108, %176
  %178 = or i32 %37, %2
  %179 = or i32 %56, %58
  %180 = or i32 %78, %0
  %181 = and i32 %82, %44
  %182 = or i32 %10, %47
  %183 = xor i32 %57, %54
  %184 = or i32 %66, %58
  %185 = xor i32 %57, -1
  %186 = xor i32 %120, %185
  %187 = xor i32 %114, %0
  %188 = or i32 %53, %187
  %189 = or i32 %89, %1
  %190 = shl i32 %189, 1
  %191 = or i32 %89, %37
  %192 = and i32 %68, %7
  %193 = or i32 %65, %0
  %194 = and i32 %31, %97
  %195 = and i32 %49, %26
  %196 = or i32 %68, %37
  %197 = or i32 %68, %105
  %198 = or i32 %9, %105
  %199 = and i32 %37, %82
  %200 = and i32 %68, %38
  %201 = and i32 %7, %9
  %202 = or i32 %31, %58
  %203 = shl i32 %202, 1
  %204 = or i32 %30, %10
  %205 = xor i32 %43, %66
  %206 = and i32 %148, %26
  %207 = and i32 %148, %1
  %208 = xor i32 %53, %61
  %209 = and i32 %31, %58
  %210 = and i32 %40, %37
  %211 = xor i32 %41, %1
  %212 = xor i32 %65, %0
  %213 = xor i32 %43, %78
  %214 = xor i32 %35, %1
  %215 = and i32 %37, %9
  %216 = shl i32 %215, 1
  %217 = and i32 %37, %148
  %218 = and i32 %68, %97
  %219 = or i32 %35, %28
  %220 = xor i32 %7, %2
  %221 = and i32 %7, %31
  %222 = shl i32 %221, 2
  %223 = or i32 %10, %41
  %224 = shl i32 %223, 1
  %225 = or i32 %82, %105
  %226 = or i32 %89, %26
  %227 = or i32 %90, %0
  %228 = xor i32 %40, %10
  %229 = or i32 %31, %105
  %230 = or i32 %37, %50
  %231 = shl i32 %230, 1
  %232 = and i32 %114, %0
  %233 = or i32 %74, %232
  %234 = and i32 %37, %2
  %235 = and i32 %68, %1
  %236 = or i32 %10, %31
  %237 = or i32 %68, %1
  %238 = xor i32 %95, %185
  %239 = add i32 %10, 1
  %240 = add i32 %49, 1
  %241 = and i32 %82, %26
  %242 = shl i32 %241, 1
  %243 = or i32 %10, %2
  %244 = or i32 %10, %93
  %245 = or i32 %93, %58
  %246 = or i32 %35, %47
  %247 = and i32 %68, %44
  %248 = and i32 %27, %31
  %249 = or i32 %43, %2
  %250 = xor i32 %176, %110
  %251 = and i32 %36, %1
  %252 = or i32 %50, %1
  %253 = or i32 %90, %58
  %254 = and i32 %27, %82
  %255 = xor i32 %232, -1
  %256 = xor i32 %74, %255
  %257 = xor i32 %47, %0
  %258 = xor i32 %89, %1
  %259 = xor i32 %97, %2
  %260 = xor i32 %50, %1
  %261 = and i32 %38, %2
  %262 = xor i32 %71, -1
  %263 = or i32 %53, %262
  %264 = add i32 %68, 1
  %265 = xor i32 %46, %10
  %266 = or i32 %41, %38
  %267 = shl i32 %266, 1
  %268 = xor i32 %59, %185
  %269 = and i32 %90, %58
  %270 = or i32 %35, %65
  %271 = shl i32 %270, 1
  %272 = and i32 %68, %37
  %273 = and i32 %40, %1
  %274 = and i32 %82, %38
  %275 = and i32 %36, %26
  %276 = and i32 %27, %2
  %277 = xor i32 %187, 2147483647
  %278 = xor i32 %277, %53
  %279 = shl i32 %278, 1
  %280 = or i32 %68, %38
  %281 = and i32 %9, %97
  %282 = xor i32 %74, %75
  %283 = or i32 %9, %38
  %284 = or i32 %46, %0
  %285 = and i32 %30, %7
  %286 = or i32 %78, %58
  %287 = add i32 %90, 1
  %288 = and i32 %30, %97
  %289 = and i32 %49, %1
  %290 = xor i32 %49, %1
  %291 = or i32 %35, %1
  %292 = shl i32 %291, 1
  %293 = xor i32 %148, %1
  %294 = and i32 %49, %38
  %295 = or i32 %108, %109
  %296 = xor i32 %35, %7
  %297 = xor i32 %43, %2
  %298 = and i32 %7, %82
  %299 = and i32 %47, %58
  %300 = and i32 %65, %58
  %301 = mul i32 %300, 27
  %302 = and i32 %47, %0
  %303 = mul i32 %302, 33
  %304 = and i32 %65, %0
  %305 = and i32 %93, %58
  %306 = mul i32 %305, -11
  %307 = mul i32 %108, 14
  %308 = and i32 %93, %0
  %309 = mul i32 %308, 18
  %310 = add i32 %276, %36
  %311 = add i32 %310, %289
  %312 = add i32 %311, %57
  %313 = add i32 %312, %95
  %314 = shl i32 %313, 2
  %315 = sub i32 %219, %73
  %316 = add i32 %315, %149
  %317 = add i32 %316, %145
  %318 = sub i32 %317, %55
  %319 = mul i32 %318, 3
  %320 = add i32 %49, %3
  %321 = add i32 %320, %258
  %322 = sub i32 %304, %321
  %323 = add i32 %322, %244
  %324 = mul i32 %323, 5
  %325 = mul i32 %3, 9
  %326 = add i32 %40, -1
  %327 = add i32 %326, %45
  %328 = add i32 %327, %273
  %329 = add i32 %328, %253
  %330 = add i32 %329, %246
  %331 = add i32 %330, %229
  %332 = add i32 %331, %180
  %333 = add i32 %332, %169
  %334 = add i32 %333, %168
  %335 = add i32 %334, %161
  %336 = add i32 %335, %84
  %337 = add i32 %336, %72
  %338 = add i32 %337, %116
  %339 = shl i32 %338, 1
  %340 = add i32 %0, 4
  %341 = sub i32 %340, %37
  %342 = add i32 %341, %10
  %343 = add i32 %342, %105
  %344 = add i32 %343, %239
  %345 = add i32 %344, %28
  %346 = sub i32 %345, %27
  %347 = add i32 %346, %38
  %348 = sub i32 %347, %43
  %349 = add i32 %348, %19
  %350 = sub i32 %349, %29
  %351 = add i32 %350, %64
  %352 = add i32 %351, %30
  %353 = add i32 %352, %47
  %354 = add i32 %353, %102
  %355 = sub i32 %354, %123
  %356 = sub i32 %355, %124
  %357 = add i32 %356, %128
  %358 = add i32 %357, %135
  %359 = add i32 %358, %89
  %360 = sub i32 %359, %46
  %361 = sub i32 %360, %138
  %362 = sub i32 %361, %142
  %363 = add i32 %362, %146
  %364 = add i32 %363, %150
  %365 = sub i32 %364, %152
  %366 = add i32 %365, %154
  %367 = add i32 %366, %157
  %368 = add i32 %367, %163
  %369 = add i32 %368, %66
  %370 = add i32 %369, %90
  %371 = add i32 %370, %178
  %372 = add i32 %371, %198
  %373 = sub i32 %372, %201
  %374 = add i32 %373, %35
  %375 = sub i32 %374, %220
  %376 = sub i32 %375, %65
  %377 = sub i32 %376, %234
  %378 = add i32 %377, %240
  %379 = sub i32 %378, %243
  %380 = add i32 %379, %41
  %381 = sub i32 %380, %249
  %382 = sub i32 %381, %259
  %383 = add i32 %382, %261
  %384 = add i32 %383, %264
  %385 = add i32 %384, %68
  %386 = sub i32 %385, %281
  %387 = add i32 %386, %283
  %388 = add i32 %387, %287
  %389 = add i32 %388, %56
  %390 = sub i32 %389, %297
  %391 = sub i32 %390, %32
  %392 = sub i32 %391, %39
  %393 = sub i32 %392, %42
  %394 = add i32 %393, %48
  %395 = sub i32 %394, %51
  %396 = add i32 %395, %67
  %397 = sub i32 %396, %69
  %398 = add i32 %397, %70
  %399 = sub i32 %398, %71
  %400 = sub i32 %399, %79
  %401 = add i32 %400, %83
  %402 = sub i32 %401, %85
  %403 = add i32 %402, %86
  %404 = add i32 %403, %87
  %405 = add i32 %404, %88
  %406 = sub i32 %405, %91
  %407 = add i32 %406, %92
  %408 = add i32 %407, %94
  %409 = add i32 %408, %103
  %410 = sub i32 %409, %104
  %411 = sub i32 %410, %107
  %412 = sub i32 %411, %112
  %413 = add i32 %412, %113
  %414 = add i32 %413, %75
  %415 = sub i32 %414, %117
  %416 = sub i32 %415, %118
  %417 = add i32 %416, %119
  %418 = sub i32 %417, %125
  %419 = sub i32 %418, %126
  %420 = sub i32 %419, %127
  %421 = sub i32 %420, %129
  %422 = add i32 %421, %130
  %423 = add i32 %422, %136
  %424 = sub i32 %423, %137
  %425 = add i32 %424, %120
  %426 = sub i32 %425, %139
  %427 = sub i32 %426, %140
  %428 = add i32 %427, %141
  %429 = sub i32 %428, %143
  %430 = sub i32 %429, %144
  %431 = add i32 %430, %147
  %432 = sub i32 %431, %151
  %433 = sub i32 %432, %153
  %434 = sub i32 %433, %155
  %435 = add i32 %434, %156
  %436 = sub i32 %435, %158
  %437 = sub i32 %436, %159
  %438 = add i32 %437, %160
  %439 = add i32 %438, %162
  %440 = add i32 %439, %164
  %441 = add i32 %440, %165
  %442 = add i32 %441, %166
  %443 = sub i32 %442, %167
  %444 = sub i32 %443, %170
  %445 = add i32 %444, %171
  %446 = add i32 %445, %59
  %447 = add i32 %446, %179
  %448 = add i32 %447, %181
  %449 = sub i32 %448, %182
  %450 = add i32 %449, %184
  %451 = sub i32 %450, %191
  %452 = sub i32 %451, %192
  %453 = sub i32 %452, %193
  %454 = sub i32 %453, %194
  %455 = add i32 %454, %195
  %456 = add i32 %455, %196
  %457 = sub i32 %456, %197
  %458 = sub i32 %457, %199
  %459 = add i32 %458, %200
  %460 = sub i32 %459, %204
  %461 = sub i32 %460, %205
  %462 = add i32 %461, %206
  %463 = sub i32 %462, %207
  %464 = add i32 %463, %209
  %465 = sub i32 %464, %210
  %466 = add i32 %465, %211
  %467 = add i32 %466, %212
  %468 = sub i32 %467, %213
  %469 = add i32 %468, %214
  %470 = sub i32 %469, %216
  %471 = add i32 %470, %217
  %472 = sub i32 %471, %218
  %473 = add i32 %472, %225
  %474 = sub i32 %473, %226
  %475 = add i32 %474, %227
  %476 = sub i32 %475, %228
  %477 = add i32 %476, %235
  %478 = sub i32 %477, %236
  %479 = sub i32 %478, %237
  %480 = add i32 %479, %245
  %481 = add i32 %480, %247
  %482 = add i32 %481, %248
  %483 = sub i32 %482, %251
  %484 = add i32 %483, %54
  %485 = sub i32 %484, %252
  %486 = sub i32 %485, %254
  %487 = sub i32 %486, %257
  %488 = add i32 %487, %176
  %489 = sub i32 %488, %260
  %490 = sub i32 %489, %265
  %491 = sub i32 %490, %269
  %492 = add i32 %491, %272
  %493 = sub i32 %492, %274
  %494 = sub i32 %493, %275
  %495 = sub i32 %494, %280
  %496 = sub i32 %495, %284
  %497 = sub i32 %496, %285
  %498 = add i32 %497, %286
  %499 = add i32 %498, %288
  %500 = add i32 %499, %290
  %501 = add i32 %500, %293
  %502 = add i32 %501, %294
  %503 = add i32 %502, %296
  %504 = add i32 %503, %298
  %505 = add i32 %504, %299
  %506 = add i32 %505, %20
  %507 = sub i32 %506, %21
  %508 = sub i32 %507, %34
  %509 = add i32 %508, %60
  %510 = add i32 %509, %77
  %511 = sub i32 %510, %81
  %512 = add i32 %511, %96
  %513 = sub i32 %512, %99
  %514 = sub i32 %513, %101
  %515 = sub i32 %514, %111
  %516 = sub i32 %515, %132
  %517 = sub i32 %516, %134
  %518 = sub i32 %517, %173
  %519 = sub i32 %518, %175
  %520 = add i32 %519, %177
  %521 = add i32 %520, %183
  %522 = sub i32 %521, %186
  %523 = sub i32 %522, %188
  %524 = sub i32 %523, %190
  %525 = sub i32 %524, %203
  %526 = add i32 %525, %208
  %527 = sub i32 %526, %222
  %528 = sub i32 %527, %224
  %529 = sub i32 %528, %231
  %530 = sub i32 %529, %233
  %531 = sub i32 %530, %238
  %532 = sub i32 %531, %242
  %533 = add i32 %532, %250
  %534 = add i32 %533, %256
  %535 = add i32 %534, %263
  %536 = sub i32 %535, %267
  %537 = add i32 %536, %268
  %538 = sub i32 %537, %271
  %539 = add i32 %538, %282
  %540 = sub i32 %539, %292
  %541 = sub i32 %540, %295
  %542 = add i32 %541, %301
  %543 = add i32 %542, %303
  %544 = add i32 %543, %306
  %545 = add i32 %544, %307
  %546 = add i32 %545, %309
  %547 = sub i32 %546, %63
  %548 = sub i32 %547, %122
  %549 = add i32 %548, %23
  %550 = add i32 %549, %25
  %551 = sub i32 %550, %279
  %552 = add i32 %551, %325
  %553 = add i32 %552, %18
  %554 = add i32 %553, %314
  %555 = add i32 %554, %324
  %556 = add i32 %555, %319
  %557 = add i32 %556, %339
  %558 = icmp eq i32 %14, %557
  %559 = select i1 %558, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %560 = tail call i32 @puts(i8* nonnull dereferenceable(1) %559)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
