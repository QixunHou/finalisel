digraph "DFG for'crackme' function" {
	Node0x16b67d0[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x16b6e50[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x16b6ef0[shape=record, label="  %7 = mul i32 %6, 3"];
	Node0x16b6f60[shape=record, label="  %8 = add i32 %5, %7"];
	Node0x16b6fd0[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x16b7070[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x16b7110[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x16b7180[shape=record, label="  %12 = sub i32 %8, %11"];
	Node0x16b71f0[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x16b7260[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x16b72d0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x16b7340[shape=record, label="  %16 = xor i32 %2, -1"];
	Node0x16b73b0[shape=record, label="  %17 = add i32 %2, 1"];
	Node0x16b7420[shape=record, label="  %18 = and i32 %16, %1"];
	Node0x16b7490[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x16b7500[shape=record, label="  %20 = or i32 %2, %1"];
	Node0x16b75a0[shape=record, label="  %21 = shl i32 %2, 2"];
	Node0x16b7610[shape=record, label="  %22 = shl i32 %20, 1"];
	Node0x16b7680[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x16b7720[shape=record, label="  %24 = xor i32 %1, 1073741823"];
	Node0x16b7790[shape=record, label="  %25 = and i32 %24, %2"];
	Node0x16b7800[shape=record, label="  %26 = shl i32 %25, 2"];
	Node0x16b7870[shape=record, label="  %27 = shl i32 %18, 1"];
	Node0x16b7910[shape=record, label="  %28 = mul i32 %13, -6"];
	Node0x16b7980[shape=record, label="  %29 = xor i32 %0, -1"];
	Node0x16b79f0[shape=record, label="  %30 = and i32 %29, %3"];
	Node0x16b7a60[shape=record, label="  %31 = or i32 %29, %3"];
	Node0x16b7ad0[shape=record, label="  %32 = or i32 %3, %0"];
	Node0x16b7d50[shape=record, label="  %33 = shl i32 %0, 1"];
	Node0x16b7dc0[shape=record, label="  %34 = shl i32 %31, 1"];
	Node0x16b7e30[shape=record, label="  %35 = xor i32 %34, -2"];
	Node0x16b7ed0[shape=record, label="  %36 = mul i32 %30, -3"];
	Node0x16b7f40[shape=record, label="  %37 = shl i32 %32, 1"];
	Node0x16b7fb0[shape=record, label="  %38 = add i32 %0, 2"];
	Node0x16b8020[shape=record, label="  %39 = add i32 %38, %1"];
	Node0x16b8090[shape=record, label="  %40 = sub i32 %39, %33"];
	Node0x16b8100[shape=record, label="  %41 = add i32 %40, %17"];
	Node0x16b8170[shape=record, label="  %42 = add i32 %41, %5"];
	Node0x16b81e0[shape=record, label="  %43 = add i32 %42, %19"];
	Node0x16b8250[shape=record, label="  %44 = add i32 %43, %20"];
	Node0x16b82c0[shape=record, label="  %45 = add i32 %44, %21"];
	Node0x16b8330[shape=record, label="  %46 = sub i32 %45, %26"];
	Node0x16b83a0[shape=record, label="  %47 = sub i32 %46, %27"];
	Node0x16b8410[shape=record, label="  %48 = add i32 %47, %28"];
	Node0x16b8480[shape=record, label="  %49 = add i32 %48, %30"];
	Node0x16b84f0[shape=record, label="  %50 = sub i32 %49, %31"];
	Node0x16b8560[shape=record, label="  %51 = add i32 %50, %9"];
	Node0x16b85d0[shape=record, label="  %52 = add i32 %51, %15"];
	Node0x16b8640[shape=record, label="  %53 = add i32 %52, %23"];
	Node0x16b86b0[shape=record, label="  %54 = add i32 %53, %36"];
	Node0x16b8720[shape=record, label="  %55 = add i32 %54, %37"];
	Node0x16b8790[shape=record, label="  %56 = sub i32 %55, %35"];
	Node0x16b8800[shape=record, label="  %57 = icmp eq i32 %12, %56"];
	Node0x1657268[shape=record, label="  %58 = select i1 %57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16b8ca0[shape=record, label="  %59 = tail call i32 @puts(i8* nonnull dereferenceable(1) %58)"];
	Node0x16b8cf0[shape=record, label="  ret void"];
	Node0x16b67d0 -> Node0x16b6e50;
	Node0x16b6e50 -> Node0x16b6ef0;
	Node0x16b6ef0 -> Node0x16b6f60;
	Node0x16b6f60 -> Node0x16b6fd0;
	Node0x16b6fd0 -> Node0x16b7070;
	Node0x16b7070 -> Node0x16b7110;
	Node0x16b7110 -> Node0x16b7180;
	Node0x16b7180 -> Node0x16b71f0;
	Node0x16b71f0 -> Node0x16b7260;
	Node0x16b7260 -> Node0x16b72d0;
	Node0x16b72d0 -> Node0x16b7340;
	Node0x16b7340 -> Node0x16b73b0;
	Node0x16b73b0 -> Node0x16b7420;
	Node0x16b7420 -> Node0x16b7490;
	Node0x16b7490 -> Node0x16b7500;
	Node0x16b7500 -> Node0x16b75a0;
	Node0x16b75a0 -> Node0x16b7610;
	Node0x16b7610 -> Node0x16b7680;
	Node0x16b7680 -> Node0x16b7720;
	Node0x16b7720 -> Node0x16b7790;
	Node0x16b7790 -> Node0x16b7800;
	Node0x16b7800 -> Node0x16b7870;
	Node0x16b7870 -> Node0x16b7910;
	Node0x16b7910 -> Node0x16b7980;
	Node0x16b7980 -> Node0x16b79f0;
	Node0x16b79f0 -> Node0x16b7a60;
	Node0x16b7a60 -> Node0x16b7ad0;
	Node0x16b7ad0 -> Node0x16b7d50;
	Node0x16b7d50 -> Node0x16b7dc0;
	Node0x16b7dc0 -> Node0x16b7e30;
	Node0x16b7e30 -> Node0x16b7ed0;
	Node0x16b7ed0 -> Node0x16b7f40;
	Node0x16b7f40 -> Node0x16b7fb0;
	Node0x16b7fb0 -> Node0x16b8020;
	Node0x16b8020 -> Node0x16b8090;
	Node0x16b8090 -> Node0x16b8100;
	Node0x16b8100 -> Node0x16b8170;
	Node0x16b8170 -> Node0x16b81e0;
	Node0x16b81e0 -> Node0x16b8250;
	Node0x16b8250 -> Node0x16b82c0;
	Node0x16b82c0 -> Node0x16b8330;
	Node0x16b8330 -> Node0x16b83a0;
	Node0x16b83a0 -> Node0x16b8410;
	Node0x16b8410 -> Node0x16b8480;
	Node0x16b8480 -> Node0x16b84f0;
	Node0x16b84f0 -> Node0x16b8560;
	Node0x16b8560 -> Node0x16b85d0;
	Node0x16b85d0 -> Node0x16b8640;
	Node0x16b8640 -> Node0x16b86b0;
	Node0x16b86b0 -> Node0x16b8720;
	Node0x16b8720 -> Node0x16b8790;
	Node0x16b8790 -> Node0x16b8800;
	Node0x16b8800 -> Node0x1657268;
	Node0x1657268 -> Node0x16b8ca0;
	Node0x16b8ca0 -> Node0x16b8cf0;
edge [color=red]
	Node0x16b6e50 -> Node0x16b6ef0;
	Node0x16b67d0 -> Node0x16b6f60;
	Node0x16b6ef0 -> Node0x16b6f60;
	Node0x16b6fd0 -> Node0x16b7070;
	Node0x16b7070 -> Node0x16b7110;
	Node0x16b6f60 -> Node0x16b7180;
	Node0x16b7110 -> Node0x16b7180;
	Node0x16b71f0 -> Node0x16b7260;
	Node0x16b7260 -> Node0x16b72d0;
	Node0x16b7340 -> Node0x16b7420;
	Node0x16b7420 -> Node0x16b7490;
	Node0x16b7500 -> Node0x16b7610;
	Node0x16b7610 -> Node0x16b7680;
	Node0x16b7720 -> Node0x16b7790;
	Node0x16b7790 -> Node0x16b7800;
	Node0x16b7420 -> Node0x16b7870;
	Node0x16b71f0 -> Node0x16b7910;
	Node0x16b7980 -> Node0x16b79f0;
	Node0x16b7980 -> Node0x16b7a60;
	Node0x16b7a60 -> Node0x16b7dc0;
	Node0x16b7dc0 -> Node0x16b7e30;
	Node0x16b79f0 -> Node0x16b7ed0;
	Node0x16b7ad0 -> Node0x16b7f40;
	Node0x16b7fb0 -> Node0x16b8020;
	Node0x16b8020 -> Node0x16b8090;
	Node0x16b7d50 -> Node0x16b8090;
	Node0x16b8090 -> Node0x16b8100;
	Node0x16b73b0 -> Node0x16b8100;
	Node0x16b8100 -> Node0x16b8170;
	Node0x16b67d0 -> Node0x16b8170;
	Node0x16b8170 -> Node0x16b81e0;
	Node0x16b7490 -> Node0x16b81e0;
	Node0x16b81e0 -> Node0x16b8250;
	Node0x16b7500 -> Node0x16b8250;
	Node0x16b8250 -> Node0x16b82c0;
	Node0x16b75a0 -> Node0x16b82c0;
	Node0x16b82c0 -> Node0x16b8330;
	Node0x16b7800 -> Node0x16b8330;
	Node0x16b8330 -> Node0x16b83a0;
	Node0x16b7870 -> Node0x16b83a0;
	Node0x16b83a0 -> Node0x16b8410;
	Node0x16b7910 -> Node0x16b8410;
	Node0x16b8410 -> Node0x16b8480;
	Node0x16b79f0 -> Node0x16b8480;
	Node0x16b8480 -> Node0x16b84f0;
	Node0x16b7a60 -> Node0x16b84f0;
	Node0x16b84f0 -> Node0x16b8560;
	Node0x16b6fd0 -> Node0x16b8560;
	Node0x16b8560 -> Node0x16b85d0;
	Node0x16b72d0 -> Node0x16b85d0;
	Node0x16b85d0 -> Node0x16b8640;
	Node0x16b7680 -> Node0x16b8640;
	Node0x16b8640 -> Node0x16b86b0;
	Node0x16b7ed0 -> Node0x16b86b0;
	Node0x16b86b0 -> Node0x16b8720;
	Node0x16b7f40 -> Node0x16b8720;
	Node0x16b8720 -> Node0x16b8790;
	Node0x16b7e30 -> Node0x16b8790;
	Node0x16b7180 -> Node0x16b8800;
	Node0x16b8790 -> Node0x16b8800;
	Node0x16b8800 -> Node0x1657268;
	Node0x1657268 -> Node0x16b8ca0;
}
