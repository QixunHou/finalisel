digraph "DFG for'crackme' function" {
	Node0x20691c0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2069230[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x20692a0[shape=record, label="  %7 = add i32 %5, %6"];
	Node0x2069310[shape=record, label="  %8 = and i32 %2, %1"];
	Node0x2069380[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x20693f0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x2069490[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x2069530[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x20695a0[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x2069640[shape=record, label="  %14 = xor i32 %1, 1073741823"];
	Node0x20696b0[shape=record, label="  %15 = and i32 %14, %2"];
	Node0x2069720[shape=record, label="  %16 = and i32 %13, %1"];
	Node0x2069790[shape=record, label="  %17 = shl i32 %0, 1"];
	Node0x2069800[shape=record, label="  %18 = xor i32 %3, %0"];
	Node0x2069870[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x20698e0[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x2069950[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x20699c0[shape=record, label="  %22 = and i32 %6, %3"];
	Node0x2069a30[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x2069aa0[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x2069b40[shape=record, label="  %25 = shl i32 %22, 2"];
	Node0x2069bb0[shape=record, label="  %26 = add i32 %8, %15"];
	Node0x2069c20[shape=record, label="  %27 = shl i32 %26, 2"];
	Node0x2069c90[shape=record, label="  %28 = sub i32 %24, %2"];
	Node0x2069d30[shape=record, label="  %29 = mul i32 %28, 3"];
	Node0x2069da0[shape=record, label="  %30 = add i32 %21, %3"];
	Node0x2069e10[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x2069e80[shape=record, label="  %32 = sub i32 2, %1"];
	Node0x206a100[shape=record, label="  %33 = sub i32 %32, %17"];
	Node0x206a170[shape=record, label="  %34 = add i32 %33, %9"];
	Node0x206a1e0[shape=record, label="  %35 = add i32 %34, %10"];
	Node0x206a250[shape=record, label="  %36 = add i32 %35, %16"];
	Node0x206a2c0[shape=record, label="  %37 = add i32 %36, %18"];
	Node0x206a330[shape=record, label="  %38 = sub i32 %37, %21"];
	Node0x206a3a0[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x206a410[shape=record, label="  %40 = add i32 %39, %23"];
	Node0x206a480[shape=record, label="  %41 = add i32 %40, %12"];
	Node0x206a4f0[shape=record, label="  %42 = sub i32 %41, %25"];
	Node0x206a560[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x206a5d0[shape=record, label="  %44 = sub i32 %43, %20"];
	Node0x206a640[shape=record, label="  %45 = add i32 %44, %29"];
	Node0x206a6b0[shape=record, label="  %46 = add i32 %45, %31"];
	Node0x206a720[shape=record, label="  %47 = icmp eq i32 %7, %46"];
	Node0x2009268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x206abc0[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0x206ac10[shape=record, label="  ret void"];
	Node0x20691c0 -> Node0x2069230;
	Node0x2069230 -> Node0x20692a0;
	Node0x20692a0 -> Node0x2069310;
	Node0x2069310 -> Node0x2069380;
	Node0x2069380 -> Node0x20693f0;
	Node0x20693f0 -> Node0x2069490;
	Node0x2069490 -> Node0x2069530;
	Node0x2069530 -> Node0x20695a0;
	Node0x20695a0 -> Node0x2069640;
	Node0x2069640 -> Node0x20696b0;
	Node0x20696b0 -> Node0x2069720;
	Node0x2069720 -> Node0x2069790;
	Node0x2069790 -> Node0x2069800;
	Node0x2069800 -> Node0x2069870;
	Node0x2069870 -> Node0x20698e0;
	Node0x20698e0 -> Node0x2069950;
	Node0x2069950 -> Node0x20699c0;
	Node0x20699c0 -> Node0x2069a30;
	Node0x2069a30 -> Node0x2069aa0;
	Node0x2069aa0 -> Node0x2069b40;
	Node0x2069b40 -> Node0x2069bb0;
	Node0x2069bb0 -> Node0x2069c20;
	Node0x2069c20 -> Node0x2069c90;
	Node0x2069c90 -> Node0x2069d30;
	Node0x2069d30 -> Node0x2069da0;
	Node0x2069da0 -> Node0x2069e10;
	Node0x2069e10 -> Node0x2069e80;
	Node0x2069e80 -> Node0x206a100;
	Node0x206a100 -> Node0x206a170;
	Node0x206a170 -> Node0x206a1e0;
	Node0x206a1e0 -> Node0x206a250;
	Node0x206a250 -> Node0x206a2c0;
	Node0x206a2c0 -> Node0x206a330;
	Node0x206a330 -> Node0x206a3a0;
	Node0x206a3a0 -> Node0x206a410;
	Node0x206a410 -> Node0x206a480;
	Node0x206a480 -> Node0x206a4f0;
	Node0x206a4f0 -> Node0x206a560;
	Node0x206a560 -> Node0x206a5d0;
	Node0x206a5d0 -> Node0x206a640;
	Node0x206a640 -> Node0x206a6b0;
	Node0x206a6b0 -> Node0x206a720;
	Node0x206a720 -> Node0x2009268;
	Node0x2009268 -> Node0x206abc0;
	Node0x206abc0 -> Node0x206ac10;
edge [color=red]
	Node0x20691c0 -> Node0x20692a0;
	Node0x2069230 -> Node0x20692a0;
	Node0x2069310 -> Node0x2069380;
	Node0x20693f0 -> Node0x2069490;
	Node0x2069490 -> Node0x2069530;
	Node0x2069640 -> Node0x20696b0;
	Node0x20695a0 -> Node0x2069720;
	Node0x2069800 -> Node0x2069870;
	Node0x2069870 -> Node0x20698e0;
	Node0x2069230 -> Node0x20699c0;
	Node0x2069a30 -> Node0x2069aa0;
	Node0x20699c0 -> Node0x2069b40;
	Node0x2069310 -> Node0x2069bb0;
	Node0x20696b0 -> Node0x2069bb0;
	Node0x2069bb0 -> Node0x2069c20;
	Node0x2069aa0 -> Node0x2069c90;
	Node0x2069c90 -> Node0x2069d30;
	Node0x2069950 -> Node0x2069da0;
	Node0x2069da0 -> Node0x2069e10;
	Node0x2069e80 -> Node0x206a100;
	Node0x2069790 -> Node0x206a100;
	Node0x206a100 -> Node0x206a170;
	Node0x2069380 -> Node0x206a170;
	Node0x206a170 -> Node0x206a1e0;
	Node0x20693f0 -> Node0x206a1e0;
	Node0x206a1e0 -> Node0x206a250;
	Node0x2069720 -> Node0x206a250;
	Node0x206a250 -> Node0x206a2c0;
	Node0x2069800 -> Node0x206a2c0;
	Node0x206a2c0 -> Node0x206a330;
	Node0x2069950 -> Node0x206a330;
	Node0x206a330 -> Node0x206a3a0;
	Node0x20699c0 -> Node0x206a3a0;
	Node0x206a3a0 -> Node0x206a410;
	Node0x2069a30 -> Node0x206a410;
	Node0x206a410 -> Node0x206a480;
	Node0x2069530 -> Node0x206a480;
	Node0x206a480 -> Node0x206a4f0;
	Node0x2069b40 -> Node0x206a4f0;
	Node0x206a4f0 -> Node0x206a560;
	Node0x2069c20 -> Node0x206a560;
	Node0x206a560 -> Node0x206a5d0;
	Node0x20698e0 -> Node0x206a5d0;
	Node0x206a5d0 -> Node0x206a640;
	Node0x2069d30 -> Node0x206a640;
	Node0x206a640 -> Node0x206a6b0;
	Node0x2069e10 -> Node0x206a6b0;
	Node0x20692a0 -> Node0x206a720;
	Node0x206a6b0 -> Node0x206a720;
	Node0x206a720 -> Node0x2009268;
	Node0x2009268 -> Node0x206abc0;
}
