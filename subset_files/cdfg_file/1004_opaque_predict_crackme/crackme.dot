digraph "DFG for'crackme' function" {
	Node0x1c9eb90[shape=record, label="  %3 = add i32 %0, 1"];
	Node0x1c9ec30[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1c9ecf0[shape=record, label="  %5 = add i32 %1, 1"];
	Node0x1c9ed60[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1c9edd0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1c9ee40[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0x1c9eee0[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0x1c9ef50[shape=record, label="  %10 = and i32 %4, %0"];
	Node0x1c9efc0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1c9f030[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1c9f0d0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1c9f140[shape=record, label="  %14 = xor i32 %0, -1"];
	Node0x1c9f1b0[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x1c9f220[shape=record, label="  %16 = shl i32 %10, 1"];
	Node0x1c9f290[shape=record, label="  %17 = shl i32 %7, 1"];
	Node0x1c9f300[shape=record, label="  %18 = sub i32 -2, %0"];
	Node0x1c9f370[shape=record, label="  %19 = add i32 %18, %5"];
	Node0x1c9f3e0[shape=record, label="  %20 = add i32 %19, %1"];
	Node0x1c9f450[shape=record, label="  %21 = add i32 %20, %6"];
	Node0x1c9f4c0[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x1c9f530[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0x1c9f5a0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1c9f610[shape=record, label="  %25 = sub i32 %24, %17"];
	Node0x1c9f680[shape=record, label="  %26 = sub i32 %25, %9"];
	Node0x1c9f6f0[shape=record, label="  %27 = add i32 %26, %13"];
	Node0x1c9f760[shape=record, label="  %28 = icmp eq i32 %3, %27"];
	Node0x1c3f268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c9fc00[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x1c9fc50[shape=record, label="  ret void"];
	Node0x1c9eb90 -> Node0x1c9ec30;
	Node0x1c9ec30 -> Node0x1c9ecf0;
	Node0x1c9ecf0 -> Node0x1c9ed60;
	Node0x1c9ed60 -> Node0x1c9edd0;
	Node0x1c9edd0 -> Node0x1c9ee40;
	Node0x1c9ee40 -> Node0x1c9eee0;
	Node0x1c9eee0 -> Node0x1c9ef50;
	Node0x1c9ef50 -> Node0x1c9efc0;
	Node0x1c9efc0 -> Node0x1c9f030;
	Node0x1c9f030 -> Node0x1c9f0d0;
	Node0x1c9f0d0 -> Node0x1c9f140;
	Node0x1c9f140 -> Node0x1c9f1b0;
	Node0x1c9f1b0 -> Node0x1c9f220;
	Node0x1c9f220 -> Node0x1c9f290;
	Node0x1c9f290 -> Node0x1c9f300;
	Node0x1c9f300 -> Node0x1c9f370;
	Node0x1c9f370 -> Node0x1c9f3e0;
	Node0x1c9f3e0 -> Node0x1c9f450;
	Node0x1c9f450 -> Node0x1c9f4c0;
	Node0x1c9f4c0 -> Node0x1c9f530;
	Node0x1c9f530 -> Node0x1c9f5a0;
	Node0x1c9f5a0 -> Node0x1c9f610;
	Node0x1c9f610 -> Node0x1c9f680;
	Node0x1c9f680 -> Node0x1c9f6f0;
	Node0x1c9f6f0 -> Node0x1c9f760;
	Node0x1c9f760 -> Node0x1c3f268;
	Node0x1c3f268 -> Node0x1c9fc00;
	Node0x1c9fc00 -> Node0x1c9fc50;
edge [color=red]
	Node0x1c9edd0 -> Node0x1c9ee40;
	Node0x1c9ee40 -> Node0x1c9eee0;
	Node0x1c9ec30 -> Node0x1c9ef50;
	Node0x1c9efc0 -> Node0x1c9f030;
	Node0x1c9f030 -> Node0x1c9f0d0;
	Node0x1c9f140 -> Node0x1c9f1b0;
	Node0x1c9ef50 -> Node0x1c9f220;
	Node0x1c9edd0 -> Node0x1c9f290;
	Node0x1c9f300 -> Node0x1c9f370;
	Node0x1c9ecf0 -> Node0x1c9f370;
	Node0x1c9f370 -> Node0x1c9f3e0;
	Node0x1c9f3e0 -> Node0x1c9f450;
	Node0x1c9ed60 -> Node0x1c9f450;
	Node0x1c9f450 -> Node0x1c9f4c0;
	Node0x1c9ef50 -> Node0x1c9f4c0;
	Node0x1c9f4c0 -> Node0x1c9f530;
	Node0x1c9f1b0 -> Node0x1c9f530;
	Node0x1c9f530 -> Node0x1c9f5a0;
	Node0x1c9f220 -> Node0x1c9f5a0;
	Node0x1c9f5a0 -> Node0x1c9f610;
	Node0x1c9f290 -> Node0x1c9f610;
	Node0x1c9f610 -> Node0x1c9f680;
	Node0x1c9eee0 -> Node0x1c9f680;
	Node0x1c9f680 -> Node0x1c9f6f0;
	Node0x1c9f0d0 -> Node0x1c9f6f0;
	Node0x1c9eb90 -> Node0x1c9f760;
	Node0x1c9f6f0 -> Node0x1c9f760;
	Node0x1c9f760 -> Node0x1c3f268;
	Node0x1c3f268 -> Node0x1c9fc00;
}
