; ModuleID = '../.././c_source_file/0738_path_condition_crackme.c'
source_filename = "../.././c_source_file/0738_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = mul i32 %6, -5
  %8 = xor i32 %3, -1
  %9 = xor i32 %1, -1
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %9
  %14 = sub i32 %8, %13
  %15 = add i32 %14, %7
  %16 = and i32 %4, %3
  %17 = shl i32 %16, 2
  %18 = xor i32 %17, -4
  %19 = or i32 %6, %3
  %20 = or i32 %4, %3
  %21 = add i32 %20, 1
  %22 = and i32 %6, %3
  %23 = xor i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %9
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = xor i32 %27, %0
  %29 = shl i32 %28, 1
  %30 = or i32 %2, %1
  %31 = and i32 %30, %0
  %32 = and i32 %1, %0
  %33 = or i32 %32, %2
  %34 = or i32 %10, %1
  %35 = or i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %2
  %38 = xor i32 %30, -1
  %39 = or i32 %38, %0
  %40 = xor i32 %0, -1
  %41 = and i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = and i32 %42, %40
  %44 = and i32 %41, %40
  %45 = and i32 %26, %0
  %46 = xor i32 %44, -1
  %47 = xor i32 %45, %46
  %48 = xor i32 %31, %46
  %49 = and i32 %9, %2
  %50 = and i32 %49, %40
  %51 = or i32 %26, %40
  %52 = xor i32 %50, %51
  %53 = or i32 %9, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %27, %54
  %56 = or i32 %26, %0
  %57 = xor i32 %53, %2
  %58 = and i32 %53, %2
  %59 = xor i32 %1, %0
  %60 = xor i32 %59, -1
  %61 = and i32 %10, %60
  %62 = and i32 %2, %0
  %63 = xor i32 %62, -1
  %64 = and i32 %63, %9
  %65 = or i32 %10, %36
  %66 = or i32 %42, %40
  %67 = or i32 %27, %40
  %68 = shl i32 %67, 2
  %69 = or i32 %10, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %59, %70
  %72 = and i32 %9, %0
  %73 = xor i32 %72, -1
  %74 = and i32 %26, %73
  %75 = xor i32 %62, %53
  %76 = xor i32 %51, 2147483647
  %77 = or i32 %76, %50
  %78 = xor i32 %32, -1
  %79 = and i32 %23, %78
  %80 = or i32 %26, %36
  %81 = and i32 %10, %1
  %82 = or i32 %62, %81
  %83 = xor i32 %81, -1
  %84 = and i32 %83, %0
  %85 = and i32 %34, %40
  %86 = and i32 %41, %0
  %87 = xor i32 %26, %0
  %88 = xor i32 %87, -1
  %89 = or i32 %86, %88
  %90 = shl i32 %89, 1
  %91 = xor i32 %78, %2
  %92 = or i32 %81, %40
  %93 = and i32 %30, %40
  %94 = or i32 %86, %93
  %95 = or i32 %26, %32
  %96 = or i32 %32, %24
  %97 = and i32 %27, %40
  %98 = shl i32 %97, 1
  %99 = or i32 %11, %9
  %100 = and i32 %49, %0
  %101 = xor i32 %56, -1
  %102 = or i32 %100, %101
  %103 = and i32 %24, %60
  %104 = shl i32 %103, 2
  %105 = or i32 %70, %9
  %106 = add i32 %35, 1
  %107 = or i32 %41, %40
  %108 = shl i32 %107, 1
  %109 = and i32 %34, %0
  %110 = shl i32 %109, 1
  %111 = or i32 %24, %1
  %112 = or i32 %9, %2
  %113 = xor i32 %112, %0
  %114 = xor i32 %113, 2147483647
  %115 = xor i32 %114, %100
  %116 = shl i32 %115, 1
  %117 = and i32 %53, %10
  %118 = xor i32 %54, %2
  %119 = or i32 %81, %72
  %120 = or i32 %2, %0
  %121 = xor i32 %120, -1
  %122 = or i32 %121, %60
  %123 = or i32 %32, %10
  %124 = and i32 %112, %0
  %125 = or i32 %50, %124
  %126 = and i32 %10, %78
  %127 = and i32 %35, %27
  %128 = xor i32 %120, %32
  %129 = xor i32 %36, %2
  %130 = and i32 %60, %2
  %131 = and i32 %26, %40
  %132 = or i32 %24, %36
  %133 = or i32 %32, %70
  %134 = or i32 %81, %0
  %135 = or i32 %70, %1
  %136 = shl i32 %135, 1
  %137 = or i32 %24, %60
  %138 = or i32 %72, %2
  %139 = xor i32 %34, -1
  %140 = or i32 %139, %0
  %141 = shl i32 %140, 1
  %142 = and i32 %35, %24
  %143 = xor i32 %72, %2
  %144 = xor i32 %72, %42
  %145 = or i32 %62, %9
  %146 = and i32 %35, %10
  %147 = and i32 %26, %78
  %148 = and i32 %23, %73
  %149 = add i32 %62, 1
  %150 = or i32 %32, %27
  %151 = or i32 %83, %0
  %152 = or i32 %59, %2
  %153 = xor i32 %124, -1
  %154 = xor i32 %50, %153
  %155 = shl i32 %81, 1
  %156 = add i32 %23, 1
  %157 = or i32 %11, %139
  %158 = xor i32 %86, %87
  %159 = or i32 %10, %54
  %160 = or i32 %23, %32
  %161 = or i32 %23, %59
  %162 = and i32 %12, %1
  %163 = or i32 %10, %60
  %164 = or i32 %60, %2
  %165 = xor i32 %70, %1
  %166 = or i32 %23, %36
  %167 = or i32 %42, %0
  %168 = xor i32 %34, %32
  %169 = or i32 %11, %41
  %170 = and i32 %27, %0
  %171 = shl i32 %170, 1
  %172 = xor i32 %38, %0
  %173 = or i32 %86, %131
  %174 = shl i32 %59, 1
  %175 = add i32 %11, 1
  %176 = and i32 %59, %24
  %177 = shl i32 %176, 1
  %178 = or i32 %62, %38
  %179 = or i32 %59, %24
  %180 = and i32 %24, %9
  %181 = or i32 %72, %24
  %182 = xor i32 %30, %0
  %183 = or i32 %86, %182
  %184 = and i32 %24, %73
  %185 = shl i32 %184, 1
  %186 = or i32 %26, %72
  %187 = xor i32 %34, %0
  %188 = xor i32 %86, -1
  %189 = xor i32 %93, %188
  %190 = or i32 %30, %40
  %191 = or i32 %11, %1
  %192 = xor i32 %30, %32
  %193 = and i32 %26, %35
  %194 = xor i32 %182, %188
  %195 = and i32 %120, %9
  %196 = and i32 %59, %12
  %197 = xor i32 %11, %42
  %198 = and i32 %59, %63
  %199 = xor i32 %131, 1073741823
  %200 = xor i32 %199, %86
  %201 = shl i32 %200, 2
  %202 = or i32 %26, %54
  %203 = and i32 %26, %53
  %204 = shl i32 %203, 1
  %205 = and i32 %42, %0
  %206 = and i32 %23, %9
  %207 = xor i32 %73, %2
  %208 = and i32 %63, %60
  %209 = and i32 %23, %60
  %210 = shl i32 %209, 1
  %211 = xor i32 %63, %1
  %212 = shl i32 %211, 1
  %213 = xor i32 %62, %1
  %214 = and i32 %120, %60
  %215 = shl i32 %214, 1
  %216 = xor i32 %11, %34
  %217 = and i32 %69, %60
  %218 = or i32 %100, %113
  %219 = and i32 %112, %40
  %220 = or i32 %100, %219
  %221 = add i32 %120, 1
  %222 = or i32 %62, %1
  %223 = xor i32 %69, %1
  %224 = add i32 %59, 1
  %225 = xor i32 %219, -1
  %226 = xor i32 %100, %225
  %227 = and i32 %69, %9
  %228 = xor i32 %120, %1
  %229 = and i32 %120, %1
  %230 = or i32 %23, %60
  %231 = or i32 %41, %72
  %232 = xor i32 %62, %30
  %233 = xor i32 %139, %0
  %234 = and i32 %23, %53
  %235 = or i32 %62, %36
  %236 = or i32 %100, %87
  %237 = and i32 %35, %2
  %238 = or i32 %72, %10
  %239 = and i32 %27, %73
  %240 = and i32 %24, %1
  %241 = xor i32 %100, %56
  %242 = xor i32 %32, %2
  %243 = shl i32 %242, 1
  %244 = or i32 %30, %0
  %245 = or i32 %59, %121
  %246 = or i32 %34, %40
  %247 = and i32 %23, %59
  %248 = and i32 %23, %1
  %249 = or i32 %38, %40
  %250 = or i32 %32, %38
  %251 = and i32 %23, %35
  %252 = or i32 %139, %40
  %253 = or i32 %62, %54
  %254 = and i32 %59, %2
  %255 = or i32 %62, %59
  %256 = or i32 %70, %60
  %257 = and i32 %69, %59
  %258 = xor i32 %100, %88
  %259 = xor i32 %81, %0
  %260 = and i32 %27, %78
  %261 = or i32 %44, %45
  %262 = or i32 %83, %40
  %263 = and i32 %63, %1
  %264 = or i32 %32, %139
  %265 = or i32 %23, %9
  %266 = or i32 %24, %54
  %267 = shl i32 %266, 1
  %268 = and i32 %53, %24
  %269 = add i32 %69, 1
  %270 = xor i32 %11, %1
  %271 = xor i32 %72, %83
  %272 = or i32 %23, %72
  %273 = and i32 %53, %27
  %274 = xor i32 %12, %1
  %275 = shl i32 %274, 1
  %276 = or i32 %11, %60
  %277 = xor i32 %121, %1
  %278 = and i32 %78, %2
  %279 = xor i32 %62, %83
  %280 = xor i32 %69, %32
  %281 = and i32 %73, %2
  %282 = add i32 %26, 1
  %283 = or i32 %54, %2
  %284 = or i32 %27, %36
  %285 = and i32 %59, %10
  %286 = and i32 %120, %59
  %287 = or i32 %121, %1
  %288 = or i32 %41, %0
  %289 = or i32 %32, %121
  %290 = add i32 %2, 1
  %291 = or i32 %121, %9
  %292 = or i32 %44, %31
  %293 = or i32 %59, %10
  %294 = and i32 %24, %78
  %295 = or i32 %11, %59
  %296 = xor i32 %83, %0
  %297 = or i32 %27, %0
  %298 = and i32 %69, %1
  %299 = and i32 %12, %60
  %300 = xor i32 %35, %2
  %301 = xor i32 %42, %0
  %302 = or i32 %23, %1
  %303 = or i32 %23, %54
  %304 = xor i32 %62, %35
  %305 = and i32 %83, %40
  %306 = or i32 %62, %60
  %307 = and i32 %10, %73
  %308 = and i32 %38, %40
  %309 = mul i32 %308, 15
  %310 = and i32 %81, %40
  %311 = shl i32 %310, 2
  %312 = and i32 %38, %0
  %313 = shl i32 %312, 4
  %314 = and i32 %139, %40
  %315 = and i32 %139, %0
  %316 = mul i32 %315, -6
  %317 = add i32 %295, %0
  %318 = sub i32 %317, %99
  %319 = add i32 %318, %31
  %320 = add i32 %319, %21
  %321 = sub i32 %320, %16
  %322 = mul i32 %321, 5
  %323 = sub i32 %86, %22
  %324 = mul i32 %323, 7
  %325 = sub i32 %44, %314
  %326 = mul i32 %325, 14
  %327 = sub i32 %183, %191
  %328 = mul i32 %327, 3
  %329 = add i32 %236, %165
  %330 = shl i32 %329, 2
  %331 = sub i32 -2, %1
  %332 = add i32 %331, %78
  %333 = add i32 %332, %73
  %334 = add i32 %333, %293
  %335 = add i32 %334, %38
  %336 = add i32 %335, %11
  %337 = add i32 %336, %117
  %338 = add i32 %337, %58
  %339 = add i32 %338, %304
  %340 = add i32 %339, %296
  %341 = add i32 %340, %291
  %342 = add i32 %341, %280
  %343 = add i32 %342, %246
  %344 = add i32 %343, %244
  %345 = add i32 %344, %235
  %346 = add i32 %345, %186
  %347 = add i32 %346, %179
  %348 = add i32 %347, %167
  %349 = add i32 %348, %166
  %350 = add i32 %349, %105
  %351 = add i32 %350, %64
  %352 = add i32 %351, %39
  %353 = add i32 %352, %77
  %354 = shl i32 %353, 1
  %355 = add i32 %1, %0
  %356 = sub i32 %355, %32
  %357 = add i32 %356, %106
  %358 = sub i32 %357, %2
  %359 = add i32 %358, %224
  %360 = sub i32 %359, %72
  %361 = add i32 %360, %290
  %362 = sub i32 %361, %35
  %363 = add i32 %362, %3
  %364 = sub i32 %363, %33
  %365 = add i32 %364, %37
  %366 = sub i32 %365, %57
  %367 = add i32 %366, %61
  %368 = add i32 %367, %65
  %369 = add i32 %368, %23
  %370 = sub i32 %369, %91
  %371 = sub i32 %370, %62
  %372 = sub i32 %371, %118
  %373 = add i32 %372, %123
  %374 = sub i32 %373, %126
  %375 = sub i32 %374, %129
  %376 = add i32 %375, %130
  %377 = add i32 %376, %138
  %378 = sub i32 %377, %143
  %379 = add i32 %378, %146
  %380 = add i32 %379, %149
  %381 = add i32 %380, %152
  %382 = add i32 %381, %156
  %383 = add i32 %382, %159
  %384 = add i32 %383, %83
  %385 = add i32 %384, %163
  %386 = sub i32 %385, %164
  %387 = sub i32 %386, %174
  %388 = add i32 %387, %175
  %389 = add i32 %388, %207
  %390 = add i32 %389, %221
  %391 = add i32 %390, %120
  %392 = sub i32 %391, %69
  %393 = add i32 %392, %237
  %394 = sub i32 %393, %238
  %395 = add i32 %394, %254
  %396 = add i32 %395, %269
  %397 = sub i32 %396, %278
  %398 = add i32 %397, %281
  %399 = add i32 %398, %282
  %400 = add i32 %399, %283
  %401 = add i32 %400, %285
  %402 = add i32 %401, %30
  %403 = add i32 %402, 1
  %404 = add i32 %403, %26
  %405 = add i32 %404, %300
  %406 = add i32 %405, %307
  %407 = sub i32 %406, %4
  %408 = add i32 %407, %25
  %409 = sub i32 %408, %43
  %410 = add i32 %409, %55
  %411 = add i32 %410, %56
  %412 = add i32 %411, %66
  %413 = sub i32 %412, %71
  %414 = add i32 %413, %74
  %415 = add i32 %414, %75
  %416 = add i32 %415, %79
  %417 = sub i32 %416, %80
  %418 = add i32 %417, %82
  %419 = sub i32 %418, %84
  %420 = add i32 %419, %85
  %421 = sub i32 %420, %92
  %422 = sub i32 %421, %95
  %423 = sub i32 %422, %96
  %424 = add i32 %423, %51
  %425 = add i32 %424, %111
  %426 = sub i32 %425, %119
  %427 = sub i32 %426, %122
  %428 = sub i32 %427, %127
  %429 = sub i32 %428, %128
  %430 = sub i32 %429, %131
  %431 = add i32 %430, %132
  %432 = sub i32 %431, %133
  %433 = sub i32 %432, %134
  %434 = add i32 %433, %137
  %435 = add i32 %434, %142
  %436 = sub i32 %435, %144
  %437 = add i32 %436, %145
  %438 = add i32 %437, %147
  %439 = sub i32 %438, %148
  %440 = sub i32 %439, %150
  %441 = add i32 %440, %151
  %442 = sub i32 %441, %155
  %443 = add i32 %442, %157
  %444 = add i32 %443, %160
  %445 = sub i32 %444, %161
  %446 = sub i32 %445, %162
  %447 = sub i32 %446, %168
  %448 = add i32 %447, %169
  %449 = add i32 %448, %172
  %450 = sub i32 %449, %178
  %451 = sub i32 %450, %180
  %452 = add i32 %451, %181
  %453 = sub i32 %452, %187
  %454 = sub i32 %453, %190
  %455 = sub i32 %454, %192
  %456 = sub i32 %455, %193
  %457 = sub i32 %456, %195
  %458 = sub i32 %457, %196
  %459 = add i32 %458, %197
  %460 = sub i32 %459, %198
  %461 = add i32 %460, %202
  %462 = add i32 %461, %205
  %463 = sub i32 %462, %206
  %464 = add i32 %463, %208
  %465 = sub i32 %464, %213
  %466 = sub i32 %465, %216
  %467 = sub i32 %466, %217
  %468 = sub i32 %467, %222
  %469 = sub i32 %468, %223
  %470 = sub i32 %469, %227
  %471 = add i32 %470, %228
  %472 = add i32 %471, %229
  %473 = sub i32 %472, %230
  %474 = add i32 %473, %231
  %475 = add i32 %474, %232
  %476 = sub i32 %475, %233
  %477 = sub i32 %476, %234
  %478 = add i32 %477, %239
  %479 = sub i32 %478, %240
  %480 = add i32 %479, %93
  %481 = sub i32 %480, %243
  %482 = add i32 %481, %245
  %483 = add i32 %482, %247
  %484 = sub i32 %483, %248
  %485 = add i32 %484, %249
  %486 = add i32 %485, %250
  %487 = sub i32 %486, %251
  %488 = sub i32 %487, %252
  %489 = add i32 %488, %253
  %490 = sub i32 %489, %255
  %491 = add i32 %490, %256
  %492 = add i32 %491, %257
  %493 = add i32 %492, %87
  %494 = sub i32 %493, %259
  %495 = sub i32 %494, %260
  %496 = sub i32 %495, %262
  %497 = sub i32 %496, %263
  %498 = sub i32 %497, %264
  %499 = sub i32 %498, %265
  %500 = add i32 %499, %268
  %501 = sub i32 %500, %270
  %502 = add i32 %501, %271
  %503 = add i32 %502, %272
  %504 = sub i32 %503, %273
  %505 = add i32 %504, %276
  %506 = sub i32 %505, %277
  %507 = add i32 %506, %279
  %508 = sub i32 %507, %45
  %509 = add i32 %508, %182
  %510 = sub i32 %509, %284
  %511 = sub i32 %510, %286
  %512 = sub i32 %511, %287
  %513 = sub i32 %512, %288
  %514 = sub i32 %513, %289
  %515 = sub i32 %514, %294
  %516 = sub i32 %515, %297
  %517 = add i32 %516, %298
  %518 = sub i32 %517, %299
  %519 = sub i32 %518, %301
  %520 = sub i32 %519, %302
  %521 = add i32 %520, %303
  %522 = add i32 %521, %305
  %523 = add i32 %522, %306
  %524 = sub i32 %523, %19
  %525 = sub i32 %524, %29
  %526 = sub i32 %525, %47
  %527 = sub i32 %526, %48
  %528 = add i32 %527, %52
  %529 = sub i32 %528, %68
  %530 = add i32 %529, %94
  %531 = sub i32 %530, %98
  %532 = add i32 %531, %102
  %533 = sub i32 %532, %104
  %534 = sub i32 %533, %108
  %535 = sub i32 %534, %110
  %536 = add i32 %535, %125
  %537 = sub i32 %536, %136
  %538 = sub i32 %537, %141
  %539 = add i32 %538, %154
  %540 = sub i32 %539, %158
  %541 = sub i32 %540, %171
  %542 = sub i32 %541, %173
  %543 = sub i32 %542, %177
  %544 = sub i32 %543, %185
  %545 = sub i32 %544, %189
  %546 = add i32 %545, %194
  %547 = sub i32 %546, %204
  %548 = sub i32 %547, %210
  %549 = sub i32 %548, %212
  %550 = sub i32 %549, %215
  %551 = sub i32 %550, %218
  %552 = sub i32 %551, %220
  %553 = sub i32 %552, %226
  %554 = add i32 %553, %241
  %555 = sub i32 %554, %258
  %556 = sub i32 %555, %261
  %557 = sub i32 %556, %267
  %558 = sub i32 %557, %275
  %559 = sub i32 %558, %292
  %560 = add i32 %559, %309
  %561 = sub i32 %560, %311
  %562 = sub i32 %561, %313
  %563 = add i32 %562, %316
  %564 = sub i32 %563, %90
  %565 = add i32 %564, %326
  %566 = sub i32 %565, %18
  %567 = sub i32 %566, %116
  %568 = sub i32 %567, %201
  %569 = add i32 %568, %324
  %570 = add i32 %569, %328
  %571 = add i32 %570, %330
  %572 = add i32 %571, %322
  %573 = add i32 %572, %354
  %574 = icmp eq i32 %15, %573
  %575 = select i1 %574, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %576 = tail call i32 @puts(i8* nonnull dereferenceable(1) %575)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
