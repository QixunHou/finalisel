; ModuleID = '../.././c_source_file/0409_path_condition_crackme.c'
source_filename = "../.././c_source_file/0409_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %0
  %10 = or i32 %9, %1
  %11 = add i32 %7, %10
  %12 = xor i32 %1, -1
  %13 = and i32 %12, %2
  %14 = and i32 %13, %0
  %15 = xor i32 %2, %1
  %16 = or i32 %15, %0
  %17 = xor i32 %16, -1
  %18 = or i32 %14, %17
  %19 = add i32 %11, %18
  %20 = or i32 %4, %3
  %21 = and i32 %6, %3
  %22 = xor i32 %21, -1
  %23 = and i32 %4, %3
  %24 = xor i32 %23, -1
  %25 = add i32 %20, 1
  %26 = shl i32 %7, 1
  %27 = xor i32 %26, -2
  %28 = or i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %12
  %31 = or i32 %12, %0
  %32 = xor i32 %15, -1
  %33 = and i32 %31, %32
  %34 = xor i32 %9, -1
  %35 = and i32 %34, %12
  %36 = or i32 %2, %1
  %37 = and i32 %36, %0
  %38 = and i32 %2, %0
  %39 = xor i32 %36, -1
  %40 = or i32 %38, %39
  %41 = shl i32 %40, 1
  %42 = xor i32 %0, -1
  %43 = and i32 %13, %42
  %44 = or i32 %15, %42
  %45 = xor i32 %44, -1
  %46 = or i32 %43, %45
  %47 = and i32 %12, %0
  %48 = or i32 %15, %47
  %49 = or i32 %1, %0
  %50 = xor i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = and i32 %49, %51
  %53 = xor i32 %38, %1
  %54 = shl i32 %53, 1
  %55 = and i32 %50, %49
  %56 = xor i32 %31, -1
  %57 = xor i32 %1, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %34, %58
  %60 = shl i32 %59, 1
  %61 = and i32 %1, %0
  %62 = xor i32 %61, -1
  %63 = and i32 %15, %62
  %64 = and i32 %8, %1
  %65 = xor i32 %64, -1
  %66 = or i32 %65, %0
  %67 = or i32 %8, %1
  %68 = xor i32 %67, -1
  %69 = xor i32 %31, %2
  %70 = or i32 %51, %1
  %71 = xor i32 %15, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %14, %72
  %74 = and i32 %2, %1
  %75 = and i32 %74, %42
  %76 = and i32 %15, %0
  %77 = or i32 %75, %76
  %78 = or i32 %8, %0
  %79 = xor i32 %78, -1
  %80 = or i32 %79, %1
  %81 = shl i32 %80, 1
  %82 = xor i32 %47, -1
  %83 = and i32 %15, %82
  %84 = xor i32 %38, %65
  %85 = and i32 %32, %0
  %86 = xor i32 %74, -1
  %87 = and i32 %86, %0
  %88 = and i32 %49, %8
  %89 = or i32 %15, %61
  %90 = and i32 %50, %1
  %91 = xor i32 %9, %1
  %92 = or i32 %12, %2
  %93 = and i32 %92, %42
  %94 = or i32 %14, %93
  %95 = or i32 %32, %0
  %96 = and i32 %65, %0
  %97 = xor i32 %9, %86
  %98 = and i32 %74, %0
  %99 = and i32 %36, %42
  %100 = xor i32 %98, -1
  %101 = xor i32 %99, %100
  %102 = xor i32 %68, %0
  %103 = add i32 %28, 1
  %104 = and i32 %8, %62
  %105 = or i32 %8, %56
  %106 = xor i32 %49, -1
  %107 = or i32 %38, %106
  %108 = and i32 %51, %62
  %109 = or i32 %61, %79
  %110 = and i32 %92, %0
  %111 = or i32 %43, %110
  %112 = and i32 %34, %1
  %113 = or i32 %51, %106
  %114 = or i32 %50, %12
  %115 = shl i32 %114, 1
  %116 = and i32 %67, %0
  %117 = or i32 %47, %51
  %118 = or i32 %50, %58
  %119 = or i32 %38, %64
  %120 = and i32 %50, %82
  %121 = shl i32 %120, 1
  %122 = or i32 %51, %12
  %123 = or i32 %38, %58
  %124 = and i32 %62, %2
  %125 = xor i32 %78, %61
  %126 = or i32 %64, %0
  %127 = xor i32 %39, %0
  %128 = and i32 %57, %2
  %129 = or i32 %61, %68
  %130 = add i32 %15, 1
  %131 = and i32 %78, %1
  %132 = xor i32 %29, %1
  %133 = and i32 %86, %42
  %134 = and i32 %31, %8
  %135 = or i32 %61, %39
  %136 = or i32 %79, %12
  %137 = and i32 %57, %51
  %138 = xor i32 %38, -1
  %139 = add i32 %38, 1
  %140 = and i32 %32, %82
  %141 = xor i32 %79, %1
  %142 = and i32 %51, %58
  %143 = xor i32 %67, %61
  %144 = and i32 %50, %57
  %145 = and i32 %58, %2
  %146 = xor i32 %49, %2
  %147 = shl i32 %146, 1
  %148 = shl i32 %0, 1
  %149 = or i32 %57, %8
  %150 = or i32 %32, %106
  %151 = shl i32 %150, 1
  %152 = xor i32 %92, %0
  %153 = or i32 %14, %152
  %154 = and i32 %15, %42
  %155 = xor i32 %47, %65
  %156 = shl i32 %155, 1
  %157 = or i32 %47, %8
  %158 = or i32 %32, %42
  %159 = shl i32 %51, 1
  %160 = or i32 %50, %61
  %161 = or i32 %51, %56
  %162 = xor i32 %36, %0
  %163 = xor i32 %162, 2147483647
  %164 = xor i32 %163, %98
  %165 = shl i32 %164, 1
  %166 = xor i32 %98, %71
  %167 = or i32 %57, %51
  %168 = and i32 %50, %12
  %169 = or i32 %79, %58
  %170 = and i32 %50, %31
  %171 = or i32 %9, %58
  %172 = and i32 %51, %82
  %173 = or i32 %38, %56
  %174 = and i32 %50, %62
  %175 = or i32 %98, %99
  %176 = shl i32 %175, 1
  %177 = and i32 %78, %12
  %178 = xor i32 %93, 2147483647
  %179 = xor i32 %178, %14
  %180 = shl i32 %179, 1
  %181 = and i32 %138, %12
  %182 = xor i32 %138, %1
  %183 = or i32 %36, %0
  %184 = xor i32 %36, %61
  %185 = or i32 %86, %0
  %186 = or i32 %57, %2
  %187 = xor i32 %61, %2
  %188 = shl i32 %187, 1
  %189 = and i32 %65, %42
  %190 = xor i32 %34, %1
  %191 = or i32 %39, %42
  %192 = or i32 %47, %32
  %193 = shl i32 %192, 1
  %194 = and i32 %50, %58
  %195 = xor i32 %82, %2
  %196 = or i32 %9, %74
  %197 = and i32 %57, %34
  %198 = shl i32 %197, 1
  %199 = or i32 %57, %29
  %200 = or i32 %74, %47
  %201 = and i32 %28, %1
  %202 = add i32 %64, 1
  %203 = or i32 %56, %2
  %204 = xor i32 %106, %2
  %205 = or i32 %50, %106
  %206 = or i32 %50, %47
  %207 = or i32 %86, %42
  %208 = or i32 %29, %1
  %209 = or i32 %61, %29
  %210 = shl i32 %209, 1
  %211 = or i32 %61, %51
  %212 = or i32 %9, %68
  %213 = shl i32 %212, 1
  %214 = or i32 %36, %42
  %215 = shl i32 %214, 1
  %216 = xor i32 %38, %36
  %217 = or i32 %61, %2
  %218 = and i32 %31, %2
  %219 = and i32 %67, %42
  %220 = or i32 %74, %42
  %221 = or i32 %67, %42
  %222 = xor i32 %9, %67
  %223 = xor i32 %78, %1
  %224 = and i32 %138, %58
  %225 = or i32 %68, %0
  %226 = shl i32 %225, 1
  %227 = and i32 %15, %49
  %228 = or i32 %47, %2
  %229 = shl i32 %228, 1
  %230 = and i32 %28, %12
  %231 = or i32 %65, %42
  %232 = or i32 %14, %71
  %233 = or i32 %51, %58
  %234 = or i32 %15, %106
  %235 = xor i32 %154, %100
  %236 = xor i32 %74, %0
  %237 = or i32 %57, %79
  %238 = and i32 %15, %31
  %239 = or i32 %38, %1
  %240 = and i32 %8, %58
  %241 = and i32 %32, %42
  %242 = shl i32 %241, 1
  %243 = or i32 %29, %58
  %244 = or i32 %32, %56
  %245 = or i32 %50, %1
  %246 = xor i32 %37, -1
  %247 = xor i32 %75, %246
  %248 = and i32 %28, %57
  %249 = and i32 %49, %2
  %250 = and i32 %78, %57
  %251 = and i32 %57, %138
  %252 = xor i32 %56, %2
  %253 = or i32 %8, %58
  %254 = shl i32 %253, 2
  %255 = or i32 %75, %37
  %256 = and i32 %82, %2
  %257 = shl i32 %256, 1
  %258 = or i32 %106, %2
  %259 = or i32 %9, %12
  %260 = and i32 %31, %51
  %261 = or i32 %64, %42
  %262 = or i32 %50, %56
  %263 = xor i32 %110, -1
  %264 = xor i32 %43, %263
  %265 = or i32 %38, %57
  %266 = and i32 %49, %32
  %267 = xor i32 %65, %0
  %268 = and i32 %57, %8
  %269 = or i32 %39, %0
  %270 = xor i32 %47, %2
  %271 = or i32 %98, %162
  %272 = xor i32 %28, %1
  %273 = xor i32 %62, %2
  %274 = and i32 %32, %62
  %275 = add i32 %74, 1
  %276 = and i32 %28, %58
  %277 = xor i32 %86, %0
  %278 = or i32 %15, %56
  %279 = xor i32 %152, -1
  %280 = xor i32 %14, %279
  %281 = or i32 %64, %47
  %282 = xor i32 %38, %31
  %283 = and i32 %51, %12
  %284 = or i32 %98, %72
  %285 = shl i32 %284, 1
  %286 = and i32 %51, %1
  %287 = xor i32 %38, %49
  %288 = shl i32 %287, 1
  %289 = or i32 %68, %42
  %290 = and i32 %78, %58
  %291 = or i32 %9, %57
  %292 = xor i32 %43, %44
  %293 = or i32 %38, %12
  %294 = xor i32 %14, %16
  %295 = xor i32 %67, %0
  %296 = and i32 %39, %42
  %297 = and i32 %64, %42
  %298 = and i32 %39, %0
  %299 = mul i32 %298, 6
  %300 = and i32 %64, %0
  %301 = mul i32 %300, 24
  %302 = and i32 %68, %42
  %303 = and i32 %68, %0
  %304 = mul i32 %303, 9
  %305 = add i32 %12, %42
  %306 = add i32 %305, %106
  %307 = add i32 %306, %270
  %308 = add i32 %307, %186
  %309 = add i32 %308, %36
  %310 = add i32 %309, %38
  %311 = add i32 %310, %104
  %312 = add i32 %311, %265
  %313 = add i32 %312, %274
  %314 = add i32 %313, %237
  %315 = add i32 %314, %233
  %316 = add i32 %315, %230
  %317 = add i32 %316, %181
  %318 = add i32 %317, %177
  %319 = add i32 %318, %99
  %320 = add i32 %319, %129
  %321 = add i32 %320, %107
  %322 = add i32 %321, %55
  %323 = shl i32 %322, 1
  %324 = add i32 %293, %50
  %325 = sub i32 %324, %168
  %326 = sub i32 %325, %119
  %327 = add i32 %326, %25
  %328 = add i32 %327, %73
  %329 = mul i32 %328, 3
  %330 = add i32 %98, %302
  %331 = mul i32 %330, 7
  %332 = add i32 %211, %8
  %333 = shl i32 %332, 2
  %334 = sub i32 %228, %296
  %335 = add i32 %334, %75
  %336 = sub i32 %335, %174
  %337 = add i32 %336, %158
  %338 = mul i32 %337, 5
  %339 = sub i32 %1, %148
  %340 = sub i32 %339, %61
  %341 = sub i32 %340, %57
  %342 = sub i32 %341, %61
  %343 = add i32 %342, %49
  %344 = sub i32 %343, %28
  %345 = add i32 %344, %69
  %346 = sub i32 %345, %88
  %347 = sub i32 %346, %64
  %348 = add i32 %347, %103
  %349 = add i32 %348, %105
  %350 = add i32 %349, %78
  %351 = add i32 %350, %124
  %352 = add i32 %351, %128
  %353 = add i32 %352, %130
  %354 = sub i32 %353, %134
  %355 = add i32 %354, %139
  %356 = add i32 %355, %74
  %357 = add i32 %356, %145
  %358 = add i32 %357, %39
  %359 = add i32 %358, %149
  %360 = sub i32 %359, %157
  %361 = add i32 %360, %195
  %362 = add i32 %361, %202
  %363 = add i32 %362, %203
  %364 = add i32 %363, %204
  %365 = sub i32 %364, %217
  %366 = sub i32 %365, %218
  %367 = add i32 %366, %240
  %368 = sub i32 %367, %249
  %369 = sub i32 %368, %252
  %370 = sub i32 %369, %258
  %371 = sub i32 %370, %268
  %372 = add i32 %371, %273
  %373 = add i32 %372, %275
  %374 = add i32 %373, %6
  %375 = add i32 %374, %30
  %376 = add i32 %375, %33
  %377 = sub i32 %376, %35
  %378 = sub i32 %377, %37
  %379 = add i32 %378, %48
  %380 = add i32 %379, %52
  %381 = add i32 %380, %63
  %382 = add i32 %381, %66
  %383 = sub i32 %382, %70
  %384 = sub i32 %383, %83
  %385 = add i32 %384, %84
  %386 = add i32 %385, %85
  %387 = sub i32 %386, %87
  %388 = add i32 %387, %89
  %389 = sub i32 %388, %90
  %390 = add i32 %389, %91
  %391 = sub i32 %390, %95
  %392 = sub i32 %391, %96
  %393 = add i32 %392, %97
  %394 = sub i32 %393, %102
  %395 = add i32 %394, %108
  %396 = sub i32 %395, %109
  %397 = add i32 %396, %112
  %398 = sub i32 %397, %113
  %399 = sub i32 %398, %116
  %400 = sub i32 %399, %117
  %401 = sub i32 %400, %118
  %402 = sub i32 %401, %122
  %403 = sub i32 %402, %123
  %404 = sub i32 %403, %125
  %405 = sub i32 %404, %126
  %406 = sub i32 %405, %127
  %407 = add i32 %406, %131
  %408 = add i32 %407, %132
  %409 = sub i32 %408, %133
  %410 = add i32 %409, %135
  %411 = sub i32 %410, %136
  %412 = add i32 %411, %137
  %413 = add i32 %412, %140
  %414 = add i32 %413, %141
  %415 = add i32 %414, %142
  %416 = sub i32 %415, %143
  %417 = sub i32 %416, %144
  %418 = sub i32 %417, %147
  %419 = add i32 %418, %154
  %420 = sub i32 %419, %159
  %421 = add i32 %420, %160
  %422 = sub i32 %421, %161
  %423 = sub i32 %422, %167
  %424 = sub i32 %423, %169
  %425 = sub i32 %424, %170
  %426 = add i32 %425, %171
  %427 = add i32 %426, %172
  %428 = sub i32 %427, %173
  %429 = add i32 %428, %16
  %430 = sub i32 %429, %182
  %431 = add i32 %430, %183
  %432 = sub i32 %431, %184
  %433 = sub i32 %432, %185
  %434 = sub i32 %433, %188
  %435 = add i32 %434, %189
  %436 = add i32 %435, %190
  %437 = add i32 %436, %191
  %438 = sub i32 %437, %194
  %439 = add i32 %438, %196
  %440 = sub i32 %439, %199
  %441 = sub i32 %440, %200
  %442 = add i32 %441, %201
  %443 = sub i32 %442, %205
  %444 = sub i32 %443, %206
  %445 = add i32 %444, %207
  %446 = add i32 %445, %208
  %447 = sub i32 %446, %216
  %448 = add i32 %447, %219
  %449 = add i32 %448, %220
  %450 = add i32 %449, %221
  %451 = sub i32 %450, %222
  %452 = sub i32 %451, %223
  %453 = sub i32 %452, %224
  %454 = sub i32 %453, %162
  %455 = sub i32 %454, %227
  %456 = sub i32 %455, %229
  %457 = sub i32 %456, %231
  %458 = add i32 %457, %234
  %459 = add i32 %458, %236
  %460 = sub i32 %459, %238
  %461 = add i32 %460, %239
  %462 = add i32 %461, %243
  %463 = add i32 %462, %244
  %464 = add i32 %463, %245
  %465 = sub i32 %464, %248
  %466 = sub i32 %465, %250
  %467 = sub i32 %466, %251
  %468 = sub i32 %467, %254
  %469 = sub i32 %468, %257
  %470 = sub i32 %469, %259
  %471 = add i32 %470, %260
  %472 = sub i32 %471, %261
  %473 = sub i32 %472, %262
  %474 = add i32 %473, %266
  %475 = add i32 %474, %267
  %476 = sub i32 %475, %269
  %477 = add i32 %476, %272
  %478 = sub i32 %477, %276
  %479 = add i32 %478, %277
  %480 = sub i32 %479, %71
  %481 = sub i32 %480, %278
  %482 = sub i32 %481, %281
  %483 = sub i32 %482, %282
  %484 = add i32 %483, %76
  %485 = add i32 %484, %283
  %486 = sub i32 %485, %286
  %487 = add i32 %486, %289
  %488 = sub i32 %487, %290
  %489 = add i32 %488, %291
  %490 = sub i32 %489, %295
  %491 = add i32 %490, %297
  %492 = sub i32 %491, %20
  %493 = add i32 %492, %22
  %494 = add i32 %493, %24
  %495 = sub i32 %494, %21
  %496 = sub i32 %495, %41
  %497 = sub i32 %496, %46
  %498 = sub i32 %497, %54
  %499 = sub i32 %498, %60
  %500 = add i32 %499, %77
  %501 = sub i32 %500, %81
  %502 = add i32 %501, %94
  %503 = add i32 %502, %101
  %504 = add i32 %503, %111
  %505 = sub i32 %504, %115
  %506 = sub i32 %505, %121
  %507 = sub i32 %506, %151
  %508 = sub i32 %507, %153
  %509 = sub i32 %508, %156
  %510 = add i32 %509, %166
  %511 = sub i32 %510, %193
  %512 = sub i32 %511, %198
  %513 = sub i32 %512, %210
  %514 = sub i32 %513, %213
  %515 = sub i32 %514, %215
  %516 = sub i32 %515, %226
  %517 = sub i32 %516, %232
  %518 = add i32 %517, %235
  %519 = sub i32 %518, %242
  %520 = sub i32 %519, %247
  %521 = add i32 %520, %255
  %522 = sub i32 %521, %264
  %523 = add i32 %522, %271
  %524 = sub i32 %523, %280
  %525 = sub i32 %524, %288
  %526 = sub i32 %525, %292
  %527 = add i32 %526, %294
  %528 = add i32 %527, %299
  %529 = add i32 %528, %301
  %530 = add i32 %529, %304
  %531 = sub i32 %530, %176
  %532 = sub i32 %531, %285
  %533 = add i32 %532, %331
  %534 = add i32 %533, %333
  %535 = sub i32 %534, %27
  %536 = sub i32 %535, %165
  %537 = sub i32 %536, %180
  %538 = add i32 %537, %338
  %539 = add i32 %538, %329
  %540 = add i32 %539, %323
  %541 = icmp eq i32 %19, %540
  %542 = select i1 %541, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %543 = tail call i32 @puts(i8* nonnull dereferenceable(1) %542)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
