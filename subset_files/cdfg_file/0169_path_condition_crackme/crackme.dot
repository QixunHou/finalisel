digraph "DFG for'crackme' function" {
	Node0xdb54a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xdb5b50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xdb5c10[shape=record, label="  %5 = add i32 %1, 2"];
	Node0xdb5c80[shape=record, label="  %6 = add i32 %5, %3"];
	Node0xdb5cf0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0xdb5d60[shape=record, label="  %8 = and i32 %4, %0"];
	Node0xdb5dd0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0xdb5e40[shape=record, label="  %10 = and i32 %9, %1"];
	Node0xdb5ee0[shape=record, label="  %11 = mul i32 %8, -5"];
	Node0xdb5f80[shape=record, label="  %12 = shl i32 %7, 1"];
	Node0xdb5ff0[shape=record, label="  %13 = add i32 %3, %0"];
	Node0xdb6060[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0xdb60d0[shape=record, label="  %15 = add i32 %0, 2"];
	Node0xdb6140[shape=record, label="  %16 = add i32 %15, %1"];
	Node0xdb61b0[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0xdb6220[shape=record, label="  %18 = add i32 %17, %8"];
	Node0xdb6290[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0xdb6300[shape=record, label="  %20 = add i32 %19, %11"];
	Node0xdb6370[shape=record, label="  %21 = sub i32 %20, %12"];
	Node0xdb63e0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0xdb6450[shape=record, label="  %23 = icmp eq i32 %6, %22"];
	Node0xd56268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xdb68f0[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xdb6940[shape=record, label="  ret void"];
	Node0xdb54a0 -> Node0xdb5b50;
	Node0xdb5b50 -> Node0xdb5c10;
	Node0xdb5c10 -> Node0xdb5c80;
	Node0xdb5c80 -> Node0xdb5cf0;
	Node0xdb5cf0 -> Node0xdb5d60;
	Node0xdb5d60 -> Node0xdb5dd0;
	Node0xdb5dd0 -> Node0xdb5e40;
	Node0xdb5e40 -> Node0xdb5ee0;
	Node0xdb5ee0 -> Node0xdb5f80;
	Node0xdb5f80 -> Node0xdb5ff0;
	Node0xdb5ff0 -> Node0xdb6060;
	Node0xdb6060 -> Node0xdb60d0;
	Node0xdb60d0 -> Node0xdb6140;
	Node0xdb6140 -> Node0xdb61b0;
	Node0xdb61b0 -> Node0xdb6220;
	Node0xdb6220 -> Node0xdb6290;
	Node0xdb6290 -> Node0xdb6300;
	Node0xdb6300 -> Node0xdb6370;
	Node0xdb6370 -> Node0xdb63e0;
	Node0xdb63e0 -> Node0xdb6450;
	Node0xdb6450 -> Node0xd56268;
	Node0xd56268 -> Node0xdb68f0;
	Node0xdb68f0 -> Node0xdb6940;
edge [color=red]
	Node0xdb5c10 -> Node0xdb5c80;
	Node0xdb54a0 -> Node0xdb5c80;
	Node0xdb5b50 -> Node0xdb5d60;
	Node0xdb5dd0 -> Node0xdb5e40;
	Node0xdb5d60 -> Node0xdb5ee0;
	Node0xdb5cf0 -> Node0xdb5f80;
	Node0xdb54a0 -> Node0xdb5ff0;
	Node0xdb5ff0 -> Node0xdb6060;
	Node0xdb60d0 -> Node0xdb6140;
	Node0xdb6140 -> Node0xdb61b0;
	Node0xdb5cf0 -> Node0xdb61b0;
	Node0xdb61b0 -> Node0xdb6220;
	Node0xdb5d60 -> Node0xdb6220;
	Node0xdb6220 -> Node0xdb6290;
	Node0xdb5e40 -> Node0xdb6290;
	Node0xdb6290 -> Node0xdb6300;
	Node0xdb5ee0 -> Node0xdb6300;
	Node0xdb6300 -> Node0xdb6370;
	Node0xdb5f80 -> Node0xdb6370;
	Node0xdb6370 -> Node0xdb63e0;
	Node0xdb6060 -> Node0xdb63e0;
	Node0xdb5c80 -> Node0xdb6450;
	Node0xdb63e0 -> Node0xdb6450;
	Node0xdb6450 -> Node0xd56268;
	Node0xd56268 -> Node0xdb68f0;
}
