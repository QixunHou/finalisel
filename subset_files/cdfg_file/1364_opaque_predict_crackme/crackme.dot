digraph "DFG for'crackme' function" {
	Node0x1a93a80[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1a93af0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1a93bb0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x1a93c20[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x1a93c90[shape=record, label="  %7 = add i32 %5, %6"];
	Node0x1a93d00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1a93d70[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1a93de0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1a93e50[shape=record, label="  %11 = or i32 %3, %0"];
	Node0x1a93ef0[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0x1a93f90[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x1a94000[shape=record, label="  %14 = and i32 %1, %0"];
	Node0x1a94070[shape=record, label="  %15 = xor i32 %8, -1"];
	Node0x1a940e0[shape=record, label="  %16 = add i32 %11, %15"];
	Node0x1a94150[shape=record, label="  %17 = add i32 %16, %4"];
	Node0x1a941c0[shape=record, label="  %18 = add i32 %17, %14"];
	Node0x1a94230[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0x1a942a0[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1a94310[shape=record, label="  %21 = icmp eq i32 %7, %20"];
	Node0x1a34268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a947b0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x1a94800[shape=record, label="  ret void"];
	Node0x1a93a80 -> Node0x1a93af0;
	Node0x1a93af0 -> Node0x1a93bb0;
	Node0x1a93bb0 -> Node0x1a93c20;
	Node0x1a93c20 -> Node0x1a93c90;
	Node0x1a93c90 -> Node0x1a93d00;
	Node0x1a93d00 -> Node0x1a93d70;
	Node0x1a93d70 -> Node0x1a93de0;
	Node0x1a93de0 -> Node0x1a93e50;
	Node0x1a93e50 -> Node0x1a93ef0;
	Node0x1a93ef0 -> Node0x1a93f90;
	Node0x1a93f90 -> Node0x1a94000;
	Node0x1a94000 -> Node0x1a94070;
	Node0x1a94070 -> Node0x1a940e0;
	Node0x1a940e0 -> Node0x1a94150;
	Node0x1a94150 -> Node0x1a941c0;
	Node0x1a941c0 -> Node0x1a94230;
	Node0x1a94230 -> Node0x1a942a0;
	Node0x1a942a0 -> Node0x1a94310;
	Node0x1a94310 -> Node0x1a34268;
	Node0x1a34268 -> Node0x1a947b0;
	Node0x1a947b0 -> Node0x1a94800;
edge [color=red]
	Node0x1a93a80 -> Node0x1a93af0;
	Node0x1a93af0 -> Node0x1a93bb0;
	Node0x1a93bb0 -> Node0x1a93c90;
	Node0x1a93c20 -> Node0x1a93c90;
	Node0x1a93d70 -> Node0x1a93de0;
	Node0x1a93a80 -> Node0x1a93e50;
	Node0x1a93e50 -> Node0x1a93ef0;
	Node0x1a93ef0 -> Node0x1a93f90;
	Node0x1a93d00 -> Node0x1a94070;
	Node0x1a93e50 -> Node0x1a940e0;
	Node0x1a94070 -> Node0x1a940e0;
	Node0x1a940e0 -> Node0x1a94150;
	Node0x1a93af0 -> Node0x1a94150;
	Node0x1a94150 -> Node0x1a941c0;
	Node0x1a94000 -> Node0x1a941c0;
	Node0x1a941c0 -> Node0x1a94230;
	Node0x1a93de0 -> Node0x1a94230;
	Node0x1a94230 -> Node0x1a942a0;
	Node0x1a93f90 -> Node0x1a942a0;
	Node0x1a93c90 -> Node0x1a94310;
	Node0x1a942a0 -> Node0x1a94310;
	Node0x1a94310 -> Node0x1a34268;
	Node0x1a34268 -> Node0x1a947b0;
}
