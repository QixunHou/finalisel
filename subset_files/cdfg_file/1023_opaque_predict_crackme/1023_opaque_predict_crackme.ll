; ModuleID = '../.././c_source_file/1023_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1023_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %1
  %11 = sub i32 %6, %10
  %12 = xor i32 %4, -1
  %13 = and i32 %12, %3
  %14 = xor i32 %12, %3
  %15 = or i32 %4, %3
  %16 = or i32 %12, %3
  %17 = and i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %15, -1
  %20 = shl i32 %16, 2
  %21 = xor i32 %20, -4
  %22 = and i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = xor i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = and i32 %25, %23
  %27 = and i32 %2, %0
  %28 = or i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %27, %29
  %31 = and i32 %7, %0
  %32 = and i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = xor i32 %31, %33
  %35 = or i32 %22, %25
  %36 = or i32 %7, %1
  %37 = xor i32 %36, -1
  %38 = xor i32 %37, %0
  %39 = xor i32 %1, -1
  %40 = or i32 %39, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %2
  %43 = xor i32 %1, %0
  %44 = and i32 %43, %7
  %45 = and i32 %39, %2
  %46 = and i32 %45, %0
  %47 = xor i32 %24, %0
  %48 = or i32 %46, %47
  %49 = and i32 %7, %1
  %50 = xor i32 %49, %0
  %51 = and i32 %39, %0
  %52 = xor i32 %51, -1
  %53 = xor i32 %52, %2
  %54 = and i32 %43, %2
  %55 = and i32 %28, %7
  %56 = or i32 %51, %2
  %57 = or i32 %2, %0
  %58 = and i32 %57, %1
  %59 = and i32 %32, %0
  %60 = or i32 %2, %1
  %61 = xor i32 %60, %0
  %62 = or i32 %59, %61
  %63 = and i32 %24, %23
  %64 = xor i32 %0, -1
  %65 = and i32 %45, %64
  %66 = or i32 %39, %2
  %67 = and i32 %66, %0
  %68 = xor i32 %67, -1
  %69 = xor i32 %65, %68
  %70 = xor i32 %43, -1
  %71 = or i32 %70, %2
  %72 = xor i32 %2, %0
  %73 = or i32 %72, %1
  %74 = and i32 %70, %2
  %75 = xor i32 %51, %2
  %76 = and i32 %72, %28
  %77 = xor i32 %72, -1
  %78 = and i32 %77, %70
  %79 = and i32 %77, %39
  %80 = and i32 %72, %39
  %81 = shl i32 %80, 1
  %82 = and i32 %40, %7
  %83 = or i32 %72, %43
  %84 = and i32 %72, %40
  %85 = and i32 %72, %23
  %86 = or i32 %72, %22
  %87 = and i32 %24, %64
  %88 = or i32 %59, %87
  %89 = shl i32 %88, 1
  %90 = or i32 %32, %64
  %91 = add i32 %32, 1
  %92 = xor i32 %29, %2
  %93 = xor i32 %57, -1
  %94 = or i32 %93, %39
  %95 = xor i32 %57, %1
  %96 = and i32 %28, %77
  %97 = and i32 %43, %77
  %98 = or i32 %36, %64
  %99 = add i32 %36, 1
  %100 = or i32 %49, %64
  %101 = and i32 %36, %0
  %102 = xor i32 %41, %2
  %103 = xor i32 %27, -1
  %104 = xor i32 %103, %1
  %105 = xor i32 %59, %47
  %106 = xor i32 %47, -1
  %107 = or i32 %59, %106
  %108 = or i32 %27, %41
  %109 = or i32 %31, %32
  %110 = xor i32 %32, %0
  %111 = xor i32 %27, %60
  %112 = or i32 %77, %70
  %113 = or i32 %31, %1
  %114 = xor i32 %113, -1
  %115 = or i32 %72, %51
  %116 = or i32 %77, %39
  %117 = xor i32 %49, -1
  %118 = or i32 %117, %0
  %119 = or i32 %72, %41
  %120 = or i32 %22, %93
  %121 = and i32 %60, %64
  %122 = or i32 %43, %7
  %123 = or i32 %72, %29
  %124 = and i32 %28, %25
  %125 = and i32 %25, %0
  %126 = and i32 %8, %43
  %127 = or i32 %9, %39
  %128 = add i32 %57, 1
  %129 = or i32 %24, %64
  %130 = xor i32 %65, %129
  %131 = xor i32 %59, -1
  %132 = xor i32 %61, %131
  %133 = or i32 %72, %70
  %134 = or i32 %27, %43
  %135 = shl i32 %134, 1
  %136 = and i32 %7, %23
  %137 = and i32 %32, %64
  %138 = and i32 %24, %0
  %139 = xor i32 %137, -1
  %140 = xor i32 %138, %139
  %141 = or i32 %25, %0
  %142 = or i32 %65, %67
  %143 = and i32 %8, %1
  %144 = and i32 %33, %0
  %145 = shl i32 %144, 1
  %146 = or i32 %24, %22
  %147 = or i32 %60, %0
  %148 = xor i32 %40, %2
  %149 = xor i32 %117, %0
  %150 = xor i32 %87, %131
  %151 = or i32 %93, %1
  %152 = shl i32 %151, 1
  %153 = or i32 %32, %51
  %154 = or i32 %49, %51
  %155 = or i32 %22, %9
  %156 = shl i32 %155, 1
  %157 = xor i32 %8, %1
  %158 = shl i32 %157, 2
  %159 = xor i32 %31, -1
  %160 = and i32 %57, %39
  %161 = shl i32 %160, 1
  %162 = or i32 %37, %0
  %163 = and i32 %33, %64
  %164 = or i32 %22, %37
  %165 = and i32 %159, %39
  %166 = xor i32 %159, %1
  %167 = or i32 %137, %138
  %168 = and i32 %43, %103
  %169 = shl i32 %49, 1
  %170 = xor i32 %25, %0
  %171 = shl i32 %170, 1
  %172 = or i32 %7, %70
  %173 = or i32 %33, %0
  %174 = and i32 %52, %2
  %175 = xor i32 %36, %0
  %176 = or i32 %25, %64
  %177 = and i32 %23, %2
  %178 = shl i32 %177, 1
  %179 = add i32 %1, 1
  %180 = add i32 %2, 1
  %181 = or i32 %43, %77
  %182 = and i32 %7, %52
  %183 = or i32 %77, %1
  %184 = or i32 %33, %64
  %185 = and i32 %24, %40
  %186 = xor i32 %57, %22
  %187 = or i32 %77, %29
  %188 = or i32 %24, %51
  %189 = or i32 %9, %70
  %190 = or i32 %43, %93
  %191 = xor i32 %93, %1
  %192 = or i32 %27, %39
  %193 = or i32 %36, %0
  %194 = and i32 %72, %1
  %195 = xor i32 %33, %0
  %196 = shl i32 %195, 1
  %197 = xor i32 %60, -1
  %198 = or i32 %197, %64
  %199 = and i32 %77, %1
  %200 = shl i32 %199, 1
  %201 = and i32 %77, %52
  %202 = or i32 %27, %197
  %203 = xor i32 %31, %36
  %204 = add i32 %60, 1
  %205 = or i32 %24, %0
  %206 = xor i32 %205, 2147483647
  %207 = or i32 %206, %46
  %208 = and i32 %25, %64
  %209 = and i32 %66, %64
  %210 = or i32 %46, %209
  %211 = shl i32 %210, 2
  %212 = and i32 %40, %2
  %213 = and i32 %36, %64
  %214 = xor i32 %22, %2
  %215 = and i32 %7, %70
  %216 = or i32 %31, %70
  %217 = shl i32 %29, 1
  %218 = xor i32 %28, %2
  %219 = shl i32 %218, 2
  %220 = or i32 %49, %0
  %221 = xor i32 %66, %0
  %222 = or i32 %46, %221
  %223 = and i32 %40, %77
  %224 = xor i32 %51, %117
  %225 = xor i32 %31, %1
  %226 = xor i32 %36, %22
  %227 = or i32 %31, %37
  %228 = and i32 %60, %0
  %229 = or i32 %43, %2
  %230 = and i32 %77, %23
  %231 = and i32 %72, %70
  %232 = or i32 %22, %2
  %233 = xor i32 %228, %139
  %234 = or i32 %22, %197
  %235 = and i32 %72, %52
  %236 = and i32 %57, %43
  %237 = or i32 %27, %1
  %238 = xor i32 %46, %205
  %239 = or i32 %25, %41
  %240 = xor i32 %129, 2147483647
  %241 = or i32 %240, %65
  %242 = or i32 %32, %0
  %243 = shl i32 %242, 2
  %244 = xor i32 %23, %2
  %245 = xor i32 %27, %1
  %246 = and i32 %24, %52
  %247 = or i32 %93, %70
  %248 = shl i32 %247, 1
  %249 = and i32 %57, %70
  %250 = and i32 %8, %70
  %251 = and i32 %40, %25
  %252 = and i32 %159, %1
  %253 = and i32 %117, %0
  %254 = or i32 %77, %41
  %255 = or i32 %22, %7
  %256 = xor i32 %46, %106
  %257 = xor i32 %121, %131
  %258 = and i32 %24, %28
  %259 = or i32 %31, %43
  %260 = xor i32 %27, %117
  %261 = xor i32 %46, -1
  %262 = xor i32 %209, %261
  %263 = and i32 %28, %2
  %264 = or i32 %197, %0
  %265 = or i32 %43, %9
  %266 = xor i32 %8, %22
  %267 = or i32 %31, %39
  %268 = and i32 %159, %70
  %269 = or i32 %37, %64
  %270 = shl i32 %103, 2
  %271 = and i32 %72, %43
  %272 = or i32 %24, %41
  %273 = or i32 %27, %49
  %274 = xor i32 %51, %33
  %275 = or i32 %59, %121
  %276 = or i32 %72, %39
  %277 = or i32 %27, %70
  %278 = xor i32 %197, %0
  %279 = shl i32 %278, 1
  %280 = or i32 %60, %64
  %281 = shl i32 %70, 1
  %282 = or i32 %137, %228
  %283 = or i32 %51, %77
  %284 = xor i32 %27, %28
  %285 = and i32 %8, %39
  %286 = or i32 %25, %29
  %287 = xor i32 %60, %22
  %288 = and i32 %117, %64
  %289 = or i32 %51, %7
  %290 = or i32 %22, %77
  %291 = and i32 %25, %52
  %292 = add i32 %49, 1
  %293 = or i32 %29, %2
  %294 = and i32 %103, %39
  %295 = xor i32 %27, %40
  %296 = or i32 %117, %64
  %297 = xor i32 %9, %1
  %298 = or i32 %7, %41
  %299 = or i32 %7, %29
  %300 = and i32 %43, %159
  %301 = shl i32 %300, 1
  %302 = and i32 %103, %1
  %303 = or i32 %51, %25
  %304 = and i32 %103, %70
  %305 = shl i32 %304, 1
  %306 = xor i32 %221, %261
  %307 = and i32 %197, %64
  %308 = shl i32 %307, 3
  %309 = and i32 %49, %64
  %310 = shl i32 %309, 3
  %311 = and i32 %197, %0
  %312 = and i32 %49, %0
  %313 = mul i32 %312, -19
  %314 = and i32 %37, %64
  %315 = mul i32 %137, -29
  %316 = and i32 %37, %0
  %317 = mul i32 %316, -14
  %318 = mul i32 %59, -22
  %319 = sub i32 %1, %299
  %320 = add i32 %319, %311
  %321 = sub i32 %320, %280
  %322 = add i32 %321, %223
  %323 = add i32 %322, %38
  %324 = sub i32 %323, %14
  %325 = add i32 %324, %19
  %326 = mul i32 %325, 5
  %327 = add i32 %125, %82
  %328 = add i32 %327, %47
  %329 = sub i32 %98, %328
  %330 = add i32 %329, %79
  %331 = sub i32 %330, %30
  %332 = mul i32 %331, 3
  %333 = add i32 %226, %57
  %334 = add i32 %333, %222
  %335 = shl i32 %334, 2
  %336 = add i32 %17, %314
  %337 = mul i32 %336, 11
  %338 = add i32 %0, -1
  %339 = add i32 %338, %23
  %340 = add i32 %339, %41
  %341 = add i32 %340, %60
  %342 = add i32 %341, %289
  %343 = add i32 %342, %215
  %344 = add i32 %343, %214
  %345 = add i32 %344, %75
  %346 = add i32 %345, %53
  %347 = add i32 %346, %27
  %348 = add i32 %347, %303
  %349 = add i32 %348, %284
  %350 = add i32 %349, %254
  %351 = add i32 %350, %253
  %352 = add i32 %351, %246
  %353 = add i32 %352, %194
  %354 = add i32 %353, %176
  %355 = add i32 %354, %164
  %356 = add i32 %355, %163
  %357 = add i32 %356, %129
  %358 = add i32 %357, %119
  %359 = add i32 %358, %115
  %360 = add i32 %359, %104
  %361 = add i32 %360, %96
  %362 = add i32 %361, %85
  %363 = add i32 %362, %35
  %364 = add i32 %363, %107
  %365 = add i32 %364, %13
  %366 = add i32 %365, %207
  %367 = add i32 %366, %241
  %368 = shl i32 %367, 1
  %369 = sub i32 2, %0
  %370 = add i32 %369, %179
  %371 = add i32 %370, %22
  %372 = sub i32 %371, %2
  %373 = add i32 %372, %28
  %374 = add i32 %373, %180
  %375 = sub i32 %374, %43
  %376 = sub i32 %375, %40
  %377 = add i32 %376, %42
  %378 = add i32 %377, %44
  %379 = sub i32 %378, %54
  %380 = add i32 %379, %55
  %381 = sub i32 %380, %56
  %382 = add i32 %381, %71
  %383 = add i32 %382, %74
  %384 = add i32 %383, %91
  %385 = sub i32 %384, %92
  %386 = add i32 %385, %99
  %387 = add i32 %386, %102
  %388 = sub i32 %387, %31
  %389 = add i32 %388, %122
  %390 = add i32 %389, %128
  %391 = add i32 %390, %136
  %392 = add i32 %391, %148
  %393 = add i32 %392, %159
  %394 = sub i32 %393, %172
  %395 = add i32 %394, %9
  %396 = add i32 %395, %174
  %397 = add i32 %396, %182
  %398 = add i32 %397, %204
  %399 = sub i32 %398, %212
  %400 = sub i32 %399, %72
  %401 = sub i32 %400, %217
  %402 = add i32 %401, %229
  %403 = add i32 %402, %36
  %404 = sub i32 %403, %232
  %405 = add i32 %404, %77
  %406 = add i32 %405, %244
  %407 = sub i32 %406, %255
  %408 = add i32 %407, %263
  %409 = sub i32 %408, %8
  %410 = sub i32 %409, %281
  %411 = add i32 %410, %292
  %412 = add i32 %411, %293
  %413 = sub i32 %412, %298
  %414 = add i32 %413, %32
  %415 = sub i32 %414, %4
  %416 = add i32 %415, %12
  %417 = add i32 %416, %26
  %418 = add i32 %417, %34
  %419 = sub i32 %418, %50
  %420 = sub i32 %419, %58
  %421 = sub i32 %420, %63
  %422 = add i32 %421, %73
  %423 = add i32 %422, %76
  %424 = add i32 %423, %78
  %425 = sub i32 %424, %83
  %426 = sub i32 %425, %84
  %427 = add i32 %426, %86
  %428 = add i32 %427, %90
  %429 = sub i32 %428, %94
  %430 = add i32 %429, %95
  %431 = sub i32 %430, %97
  %432 = add i32 %431, %100
  %433 = add i32 %432, %101
  %434 = sub i32 %433, %108
  %435 = sub i32 %434, %109
  %436 = sub i32 %435, %110
  %437 = sub i32 %436, %111
  %438 = add i32 %437, %112
  %439 = add i32 %438, %114
  %440 = add i32 %439, %116
  %441 = add i32 %440, %118
  %442 = add i32 %441, %120
  %443 = sub i32 %442, %121
  %444 = add i32 %443, %123
  %445 = add i32 %444, %124
  %446 = sub i32 %445, %126
  %447 = sub i32 %446, %127
  %448 = add i32 %447, %133
  %449 = add i32 %448, %141
  %450 = add i32 %449, %143
  %451 = sub i32 %450, %146
  %452 = add i32 %451, %147
  %453 = add i32 %452, %149
  %454 = sub i32 %453, %153
  %455 = add i32 %454, %154
  %456 = sub i32 %455, %162
  %457 = add i32 %456, %165
  %458 = sub i32 %457, %166
  %459 = sub i32 %458, %168
  %460 = sub i32 %459, %169
  %461 = sub i32 %460, %173
  %462 = sub i32 %461, %175
  %463 = sub i32 %462, %178
  %464 = sub i32 %463, %181
  %465 = sub i32 %464, %183
  %466 = add i32 %465, %184
  %467 = sub i32 %466, %185
  %468 = add i32 %467, %186
  %469 = add i32 %468, %187
  %470 = sub i32 %469, %188
  %471 = add i32 %470, %189
  %472 = add i32 %471, %190
  %473 = add i32 %472, %191
  %474 = sub i32 %473, %192
  %475 = add i32 %474, %193
  %476 = add i32 %475, %198
  %477 = add i32 %476, %201
  %478 = sub i32 %477, %202
  %479 = add i32 %478, %203
  %480 = add i32 %479, %61
  %481 = sub i32 %480, %208
  %482 = sub i32 %481, %213
  %483 = sub i32 %482, %216
  %484 = sub i32 %483, %205
  %485 = add i32 %484, %138
  %486 = sub i32 %485, %219
  %487 = add i32 %486, %220
  %488 = sub i32 %487, %224
  %489 = sub i32 %488, %225
  %490 = sub i32 %489, %227
  %491 = add i32 %490, %228
  %492 = add i32 %491, %230
  %493 = sub i32 %492, %231
  %494 = add i32 %493, %234
  %495 = add i32 %494, %235
  %496 = sub i32 %495, %236
  %497 = add i32 %496, %237
  %498 = sub i32 %497, %239
  %499 = add i32 %498, %245
  %500 = sub i32 %499, %249
  %501 = sub i32 %500, %250
  %502 = sub i32 %501, %251
  %503 = sub i32 %502, %252
  %504 = add i32 %503, %258
  %505 = add i32 %504, %259
  %506 = sub i32 %505, %260
  %507 = sub i32 %506, %264
  %508 = add i32 %507, %87
  %509 = sub i32 %508, %265
  %510 = sub i32 %509, %266
  %511 = add i32 %510, %267
  %512 = sub i32 %511, %268
  %513 = sub i32 %512, %269
  %514 = sub i32 %513, %270
  %515 = sub i32 %514, %271
  %516 = add i32 %515, %272
  %517 = add i32 %516, %273
  %518 = sub i32 %517, %274
  %519 = sub i32 %518, %276
  %520 = add i32 %519, %277
  %521 = add i32 %520, %283
  %522 = add i32 %521, %285
  %523 = add i32 %522, %286
  %524 = sub i32 %523, %287
  %525 = sub i32 %524, %288
  %526 = sub i32 %525, %290
  %527 = sub i32 %526, %291
  %528 = sub i32 %527, %294
  %529 = sub i32 %528, %295
  %530 = add i32 %529, %296
  %531 = sub i32 %530, %297
  %532 = sub i32 %531, %302
  %533 = add i32 %532, %13
  %534 = sub i32 %533, %15
  %535 = add i32 %534, %16
  %536 = add i32 %535, %18
  %537 = sub i32 %536, %48
  %538 = sub i32 %537, %62
  %539 = add i32 %538, %69
  %540 = sub i32 %539, %81
  %541 = sub i32 %540, %105
  %542 = add i32 %541, %130
  %543 = add i32 %542, %132
  %544 = sub i32 %543, %135
  %545 = add i32 %544, %140
  %546 = sub i32 %545, %142
  %547 = sub i32 %546, %145
  %548 = sub i32 %547, %150
  %549 = sub i32 %548, %152
  %550 = sub i32 %549, %156
  %551 = sub i32 %550, %158
  %552 = sub i32 %551, %161
  %553 = add i32 %552, %167
  %554 = sub i32 %553, %171
  %555 = sub i32 %554, %196
  %556 = sub i32 %555, %200
  %557 = sub i32 %556, %233
  %558 = sub i32 %557, %238
  %559 = sub i32 %558, %243
  %560 = sub i32 %559, %248
  %561 = sub i32 %560, %256
  %562 = add i32 %561, %257
  %563 = add i32 %562, %262
  %564 = sub i32 %563, %275
  %565 = sub i32 %564, %279
  %566 = add i32 %565, %282
  %567 = sub i32 %566, %301
  %568 = sub i32 %567, %305
  %569 = sub i32 %568, %306
  %570 = sub i32 %569, %308
  %571 = sub i32 %570, %310
  %572 = add i32 %571, %313
  %573 = add i32 %572, %315
  %574 = add i32 %573, %317
  %575 = add i32 %574, %318
  %576 = sub i32 %575, %89
  %577 = sub i32 %576, %211
  %578 = add i32 %577, %21
  %579 = add i32 %578, %337
  %580 = add i32 %579, %335
  %581 = add i32 %580, %332
  %582 = add i32 %581, %326
  %583 = add i32 %582, %368
  %584 = icmp eq i32 %11, %583
  %585 = select i1 %584, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %586 = tail call i32 @puts(i8* nonnull dereferenceable(1) %585)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
