; ModuleID = '../.././c_source_file/0360_path_condition_crackme.c'
source_filename = "../.././c_source_file/0360_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %4, %3
  %8 = and i32 %2, %1
  %9 = and i32 %8, %0
  %10 = xor i32 %0, -1
  %11 = or i32 %2, %1
  %12 = xor i32 %11, 2147483647
  %13 = or i32 %12, %0
  %14 = xor i32 %13, %9
  %15 = xor i32 %1, -1
  %16 = and i32 %15, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %17, %2
  %19 = add i32 %14, %18
  %20 = shl i32 %19, 1
  %21 = add i32 %4, 2
  %22 = add i32 %21, %7
  %23 = add i32 %22, %20
  %24 = xor i32 %4, %3
  %25 = and i32 %6, %3
  %26 = xor i32 %24, -1
  %27 = or i32 %4, %3
  %28 = add i32 %27, 1
  %29 = xor i32 %3, 2147483647
  %30 = and i32 %29, %4
  %31 = xor i32 %2, -1
  %32 = and i32 %1, %0
  %33 = or i32 %32, %31
  %34 = shl i32 %33, 1
  %35 = and i32 %15, %2
  %36 = and i32 %35, %10
  %37 = xor i32 %2, %1
  %38 = or i32 %37, %10
  %39 = xor i32 %36, %38
  %40 = shl i32 %39, 1
  %41 = xor i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %1
  %44 = or i32 %31, %1
  %45 = or i32 %44, %10
  %46 = xor i32 %17, %2
  %47 = and i32 %35, %0
  %48 = or i32 %37, %0
  %49 = xor i32 %47, %48
  %50 = and i32 %2, %0
  %51 = or i32 %1, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %50, %52
  %54 = xor i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %31, %55
  %57 = or i32 %50, %54
  %58 = xor i32 %11, %0
  %59 = and i32 %8, %10
  %60 = and i32 %37, %0
  %61 = or i32 %59, %60
  %62 = shl i32 %32, 1
  %63 = and i32 %37, %10
  %64 = xor i32 %32, -1
  %65 = and i32 %31, %64
  %66 = and i32 %31, %0
  %67 = xor i32 %66, -1
  %68 = xor i32 %50, -1
  %69 = and i32 %54, %68
  %70 = and i32 %31, %1
  %71 = xor i32 %70, -1
  %72 = xor i32 %71, %0
  %73 = shl i32 %72, 2
  %74 = xor i32 %37, -1
  %75 = or i32 %16, %74
  %76 = xor i32 %8, -1
  %77 = xor i32 %76, %0
  %78 = shl i32 %77, 1
  %79 = or i32 %41, %15
  %80 = xor i32 %48, 2147483647
  %81 = or i32 %80, %47
  %82 = or i32 %66, %8
  %83 = or i32 %2, %0
  %84 = xor i32 %83, -1
  %85 = and i32 %71, %10
  %86 = shl i32 %85, 1
  %87 = and i32 %51, %2
  %88 = or i32 %32, %2
  %89 = or i32 %31, %0
  %90 = and i32 %89, %15
  %91 = or i32 %70, %0
  %92 = and i32 %54, %31
  %93 = or i32 %15, %2
  %94 = and i32 %93, %0
  %95 = or i32 %36, %94
  %96 = xor i32 %59, -1
  %97 = xor i32 %60, %96
  %98 = or i32 %15, %0
  %99 = xor i32 %98, -1
  %100 = add i32 %98, 1
  %101 = xor i32 %94, -1
  %102 = xor i32 %36, %101
  %103 = or i32 %54, %42
  %104 = xor i32 %89, -1
  %105 = or i32 %32, %104
  %106 = and i32 %31, %55
  %107 = or i32 %54, %84
  %108 = shl i32 %107, 1
  %109 = or i32 %50, %55
  %110 = and i32 %67, %15
  %111 = and i32 %37, %64
  %112 = and i32 %71, %0
  %113 = or i32 %74, %0
  %114 = xor i32 %37, %0
  %115 = or i32 %47, %114
  %116 = or i32 %32, %84
  %117 = xor i32 %50, %51
  %118 = xor i32 %93, %10
  %119 = xor i32 %118, %47
  %120 = and i32 %41, %64
  %121 = or i32 %76, %10
  %122 = and i32 %51, %42
  %123 = or i32 %76, %0
  %124 = or i32 %52, %2
  %125 = shl i32 %124, 2
  %126 = and i32 %41, %51
  %127 = xor i32 %50, %11
  %128 = or i32 %42, %52
  %129 = xor i32 %11, -1
  %130 = add i32 %11, 1
  %131 = or i32 %44, %0
  %132 = and i32 %74, %17
  %133 = or i32 %84, %1
  %134 = or i32 %32, %74
  %135 = or i32 %84, %55
  %136 = and i32 %67, %55
  %137 = and i32 %41, %98
  %138 = xor i32 %38, 1073741823
  %139 = or i32 %138, %36
  %140 = shl i32 %139, 2
  %141 = or i32 %54, %2
  %142 = or i32 %37, %16
  %143 = xor i32 %8, %0
  %144 = and i32 %89, %55
  %145 = shl i32 %144, 1
  %146 = or i32 %37, %32
  %147 = and i32 %37, %17
  %148 = and i32 %54, %67
  %149 = xor i32 %104, %1
  %150 = xor i32 %44, -1
  %151 = add i32 %44, 1
  %152 = and i32 %67, %1
  %153 = shl i32 %152, 1
  %154 = or i32 %150, %0
  %155 = or i32 %16, %42
  %156 = and i32 %42, %1
  %157 = and i32 %68, %15
  %158 = xor i32 %98, %2
  %159 = xor i32 %129, %0
  %160 = and i32 %74, %10
  %161 = xor i32 %70, %0
  %162 = or i32 %55, %2
  %163 = shl i32 %162, 1
  %164 = and i32 %44, %0
  %165 = and i32 %76, %0
  %166 = or i32 %8, %10
  %167 = or i32 %8, %16
  %168 = or i32 %54, %31
  %169 = xor i32 %83, %1
  %170 = xor i32 %50, %71
  %171 = or i32 %70, %16
  %172 = and i32 %68, %55
  %173 = xor i32 %58, 2147483647
  %174 = xor i32 %173, %9
  %175 = xor i32 %114, -1
  %176 = or i32 %9, %175
  %177 = and i32 %51, %74
  %178 = shl i32 %177, 1
  %179 = xor i32 %44, %32
  %180 = or i32 %54, %104
  %181 = or i32 %31, %52
  %182 = and i32 %42, %15
  %183 = or i32 %66, %1
  %184 = and i32 %37, %98
  %185 = and i32 %64, %2
  %186 = and i32 %98, %31
  %187 = and i32 %89, %1
  %188 = xor i32 %74, %0
  %189 = and i32 %41, %15
  %190 = xor i32 %11, %32
  %191 = shl i32 %190, 1
  %192 = or i32 %8, %0
  %193 = or i32 %9, %63
  %194 = and i32 %83, %55
  %195 = or i32 %16, %2
  %196 = and i32 %42, %64
  %197 = and i32 %41, %54
  %198 = or i32 %41, %52
  %199 = and i32 %76, %10
  %200 = xor i32 %16, %76
  %201 = or i32 %74, %10
  %202 = xor i32 %99, %2
  %203 = or i32 %50, %70
  %204 = and i32 %44, %10
  %205 = or i32 %66, %54
  %206 = or i32 %32, %42
  %207 = and i32 %51, %31
  %208 = or i32 %41, %1
  %209 = or i32 %71, %0
  %210 = xor i32 %83, %32
  %211 = or i32 %74, %99
  %212 = or i32 %32, %150
  %213 = and i32 %83, %15
  %214 = and i32 %37, %51
  %215 = shl i32 %214, 1
  %216 = xor i32 %9, %114
  %217 = shl i32 %216, 1
  %218 = or i32 %50, %1
  %219 = shl i32 %218, 1
  %220 = and i32 %42, %17
  %221 = or i32 %31, %99
  %222 = xor i32 %89, %1
  %223 = xor i32 %84, %1
  %224 = or i32 %71, %10
  %225 = shl i32 %224, 1
  %226 = or i32 %70, %10
  %227 = or i32 %104, %1
  %228 = or i32 %66, %150
  %229 = and i32 %31, %17
  %230 = and i32 %11, %0
  %231 = xor i32 %230, %96
  %232 = and i32 %74, %64
  %233 = or i32 %50, %129
  %234 = or i32 %11, %0
  %235 = or i32 %66, %55
  %236 = or i32 %41, %16
  %237 = xor i32 %89, %32
  %238 = and i32 %54, %2
  %239 = and i32 %83, %54
  %240 = or i32 %41, %55
  %241 = shl i32 %240, 1
  %242 = shl i32 %89, 1
  %243 = or i32 %104, %15
  %244 = and i32 %129, %10
  %245 = and i32 %70, %10
  %246 = mul i32 %245, -11
  %247 = and i32 %129, %0
  %248 = and i32 %70, %0
  %249 = mul i32 %248, -28
  %250 = and i32 %150, %10
  %251 = shl i32 %250, 3
  %252 = shl i32 %59, 1
  %253 = and i32 %150, %0
  %254 = mul i32 %253, -23
  %255 = mul i32 %9, -20
  %256 = add i32 %195, -1
  %257 = add i32 %256, %11
  %258 = add i32 %257, %168
  %259 = add i32 %258, %44
  %260 = add i32 %259, %42
  %261 = add i32 %260, %67
  %262 = add i32 %261, %243
  %263 = add i32 %262, %212
  %264 = add i32 %263, %211
  %265 = add i32 %264, %209
  %266 = add i32 %265, %200
  %267 = add i32 %266, %184
  %268 = add i32 %267, %161
  %269 = add i32 %268, %159
  %270 = add i32 %269, %127
  %271 = add i32 %270, %105
  %272 = add i32 %271, %75
  %273 = add i32 %272, %48
  %274 = add i32 %165, %192
  %275 = sub i32 %274, %147
  %276 = add i32 %275, %38
  %277 = add i32 %276, %136
  %278 = sub i32 %277, %120
  %279 = add i32 %278, %113
  %280 = add i32 %279, %25
  %281 = add i32 %280, %7
  %282 = mul i32 %281, 3
  %283 = add i32 %157, %180
  %284 = sub i32 %126, %283
  %285 = sub i32 %284, %69
  %286 = add i32 %285, %63
  %287 = add i32 %286, %28
  %288 = add i32 %287, %95
  %289 = sub i32 %288, %27
  %290 = mul i32 %289, 5
  %291 = add i32 %247, %244
  %292 = mul i32 %291, -7
  %293 = add i32 %137, %82
  %294 = shl i32 %293, 2
  %295 = sub i32 %273, %3
  %296 = add i32 %295, %30
  %297 = add i32 %296, %81
  %298 = add i32 %297, %174
  %299 = shl i32 %298, 1
  %300 = shl i32 %1, 1
  %301 = add i32 %300, %100
  %302 = add i32 %301, %16
  %303 = add i32 %302, %55
  %304 = add i32 %303, %64
  %305 = add i32 %304, %46
  %306 = sub i32 %305, %56
  %307 = sub i32 %306, %62
  %308 = sub i32 %307, %65
  %309 = sub i32 %308, %8
  %310 = sub i32 %309, %66
  %311 = add i32 %310, %84
  %312 = add i32 %311, %87
  %313 = sub i32 %312, %88
  %314 = add i32 %313, %92
  %315 = add i32 %314, %106
  %316 = add i32 %315, %37
  %317 = add i32 %316, %104
  %318 = add i32 %317, %130
  %319 = sub i32 %318, %141
  %320 = add i32 %319, %151
  %321 = sub i32 %320, %158
  %322 = add i32 %321, %76
  %323 = add i32 %322, %181
  %324 = add i32 %323, %185
  %325 = sub i32 %324, %186
  %326 = sub i32 %325, %41
  %327 = add i32 %326, %202
  %328 = sub i32 %327, %207
  %329 = sub i32 %328, %221
  %330 = sub i32 %329, %229
  %331 = sub i32 %330, %238
  %332 = add i32 %331, %4
  %333 = sub i32 %332, %34
  %334 = add i32 %333, %43
  %335 = add i32 %334, %45
  %336 = sub i32 %335, %53
  %337 = add i32 %336, %57
  %338 = add i32 %337, %58
  %339 = sub i32 %338, %79
  %340 = add i32 %339, %90
  %341 = add i32 %340, %91
  %342 = sub i32 %341, %103
  %343 = add i32 %342, %109
  %344 = sub i32 %343, %110
  %345 = sub i32 %344, %111
  %346 = sub i32 %345, %112
  %347 = sub i32 %346, %116
  %348 = sub i32 %347, %117
  %349 = add i32 %348, %121
  %350 = add i32 %349, %122
  %351 = sub i32 %350, %123
  %352 = sub i32 %351, %125
  %353 = add i32 %352, %128
  %354 = add i32 %353, %131
  %355 = sub i32 %354, %132
  %356 = add i32 %355, %133
  %357 = add i32 %356, %134
  %358 = add i32 %357, %135
  %359 = sub i32 %358, %142
  %360 = sub i32 %359, %143
  %361 = add i32 %360, %146
  %362 = sub i32 %361, %148
  %363 = add i32 %362, %149
  %364 = sub i32 %363, %154
  %365 = add i32 %364, %155
  %366 = sub i32 %365, %156
  %367 = add i32 %366, %160
  %368 = sub i32 %367, %163
  %369 = sub i32 %368, %164
  %370 = add i32 %369, %166
  %371 = sub i32 %370, %167
  %372 = add i32 %371, %169
  %373 = sub i32 %372, %170
  %374 = add i32 %373, %171
  %375 = add i32 %374, %172
  %376 = add i32 %375, %179
  %377 = sub i32 %376, %114
  %378 = add i32 %377, %182
  %379 = sub i32 %378, %183
  %380 = add i32 %379, %187
  %381 = sub i32 %380, %188
  %382 = sub i32 %381, %189
  %383 = sub i32 %382, %194
  %384 = sub i32 %383, %196
  %385 = add i32 %384, %197
  %386 = add i32 %385, %198
  %387 = add i32 %386, %199
  %388 = sub i32 %387, %201
  %389 = sub i32 %388, %203
  %390 = add i32 %389, %204
  %391 = add i32 %390, %205
  %392 = sub i32 %391, %206
  %393 = add i32 %392, %208
  %394 = sub i32 %393, %210
  %395 = add i32 %394, %213
  %396 = add i32 %395, %220
  %397 = add i32 %396, %222
  %398 = add i32 %397, %223
  %399 = add i32 %398, %226
  %400 = sub i32 %399, %227
  %401 = add i32 %400, %228
  %402 = sub i32 %401, %232
  %403 = sub i32 %402, %233
  %404 = add i32 %403, %234
  %405 = add i32 %404, %235
  %406 = sub i32 %405, %236
  %407 = sub i32 %406, %237
  %408 = add i32 %407, %239
  %409 = sub i32 %408, %242
  %410 = sub i32 %409, %24
  %411 = add i32 %410, %25
  %412 = add i32 %411, %26
  %413 = add i32 %412, %49
  %414 = sub i32 %413, %61
  %415 = sub i32 %414, %73
  %416 = sub i32 %415, %78
  %417 = sub i32 %416, %86
  %418 = add i32 %417, %97
  %419 = add i32 %418, %102
  %420 = sub i32 %419, %108
  %421 = add i32 %420, %115
  %422 = add i32 %421, %119
  %423 = sub i32 %422, %145
  %424 = sub i32 %423, %153
  %425 = sub i32 %424, %176
  %426 = sub i32 %425, %178
  %427 = sub i32 %426, %191
  %428 = add i32 %427, %193
  %429 = sub i32 %428, %215
  %430 = sub i32 %429, %219
  %431 = sub i32 %430, %225
  %432 = sub i32 %431, %231
  %433 = sub i32 %432, %241
  %434 = add i32 %433, %246
  %435 = add i32 %434, %249
  %436 = sub i32 %435, %251
  %437 = sub i32 %436, %252
  %438 = add i32 %437, %254
  %439 = add i32 %438, %255
  %440 = sub i32 %439, %40
  %441 = sub i32 %440, %217
  %442 = add i32 %441, %292
  %443 = add i32 %442, %294
  %444 = sub i32 %443, %140
  %445 = add i32 %444, %290
  %446 = add i32 %445, %282
  %447 = add i32 %446, %299
  %448 = icmp eq i32 %23, %447
  %449 = select i1 %448, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %450 = tail call i32 @puts(i8* nonnull dereferenceable(1) %449)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
