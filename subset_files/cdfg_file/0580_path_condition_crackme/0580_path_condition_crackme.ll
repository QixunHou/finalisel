; ModuleID = '../.././c_source_file/0580_path_condition_crackme.c'
source_filename = "../.././c_source_file/0580_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %6, %1
  %8 = and i32 %4, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %1
  %11 = xor i32 %1, -1
  %12 = and i32 %11, %0
  %13 = xor i32 %2, %1
  %14 = or i32 %13, %12
  %15 = or i32 %2, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %16, %1
  %18 = and i32 %5, %1
  %19 = shl i32 %18, 1
  %20 = or i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %13, -1
  %23 = or i32 %22, %21
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %8, %25
  %27 = or i32 %11, %0
  %28 = xor i32 %27, %2
  %29 = and i32 %27, %22
  %30 = or i32 %13, %0
  %31 = and i32 %11, %2
  %32 = and i32 %31, %0
  %33 = xor i32 %13, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %32, %34
  %36 = or i32 %4, %1
  %37 = and i32 %36, %0
  %38 = shl i32 %37, 1
  %39 = and i32 %9, %25
  %40 = and i32 %5, %11
  %41 = xor i32 %0, -1
  %42 = and i32 %4, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %41
  %45 = and i32 %2, %0
  %46 = or i32 %45, %11
  %47 = and i32 %2, %1
  %48 = or i32 %47, %12
  %49 = shl i32 %48, 1
  %50 = or i32 %22, %41
  %51 = xor i32 %12, %43
  %52 = or i32 %47, %41
  %53 = or i32 %8, %1
  %54 = or i32 %13, %41
  %55 = and i32 %1, %0
  %56 = and i32 %20, %4
  %57 = xor i32 %2, %0
  %58 = and i32 %57, %25
  %59 = or i32 %6, %1
  %60 = or i32 %2, %1
  %61 = xor i32 %60, %55
  %62 = xor i32 %8, %36
  %63 = xor i32 %55, -1
  %64 = xor i32 %57, -1
  %65 = and i32 %64, %63
  %66 = and i32 %5, %25
  %67 = and i32 %15, %1
  %68 = and i32 %57, %20
  %69 = xor i32 %27, -1
  %70 = or i32 %45, %69
  %71 = and i32 %64, %1
  %72 = or i32 %12, %2
  %73 = xor i32 %60, -1
  %74 = or i32 %45, %73
  %75 = or i32 %42, %0
  %76 = xor i32 %45, -1
  %77 = and i32 %76, %1
  %78 = and i32 %36, %41
  %79 = or i32 %11, %2
  %80 = xor i32 %79, %0
  %81 = or i32 %32, %80
  %82 = and i32 %15, %11
  %83 = add i32 %15, 1
  %84 = xor i32 %30, -1
  %85 = or i32 %32, %84
  %86 = or i32 %57, %24
  %87 = or i32 %12, %64
  %88 = or i32 %12, %22
  %89 = and i32 %79, %41
  %90 = xor i32 %32, -1
  %91 = xor i32 %89, %90
  %92 = xor i32 %47, %0
  %93 = or i32 %43, %0
  %94 = xor i32 %12, -1
  %95 = xor i32 %94, %2
  %96 = and i32 %47, %0
  %97 = xor i32 %60, %0
  %98 = or i32 %96, %97
  %99 = or i32 %24, %64
  %100 = or i32 %22, %0
  %101 = xor i32 %69, %2
  %102 = and i32 %43, %41
  %103 = or i32 %55, %64
  %104 = and i32 %24, %2
  %105 = or i32 %55, %6
  %106 = or i32 %45, %42
  %107 = xor i32 %47, -1
  %108 = xor i32 %12, %107
  %109 = or i32 %45, %24
  %110 = shl i32 %109, 1
  %111 = xor i32 %5, %55
  %112 = or i32 %57, %11
  %113 = and i32 %5, %24
  %114 = shl i32 %113, 1
  %115 = xor i32 %42, %0
  %116 = or i32 %64, %1
  %117 = and i32 %76, %25
  %118 = and i32 %24, %64
  %119 = and i32 %13, %41
  %120 = xor i32 %96, -1
  %121 = xor i32 %119, %120
  %122 = xor i32 %55, %2
  %123 = and i32 %25, %2
  %124 = and i32 %64, %11
  %125 = or i32 %73, %0
  %126 = and i32 %43, %0
  %127 = shl i32 %126, 2
  %128 = shl i32 %13, 1
  %129 = add i32 %1, 1
  %130 = and i32 %27, %64
  %131 = and i32 %24, %76
  %132 = shl i32 %131, 1
  %133 = or i32 %57, %25
  %134 = and i32 %76, %11
  %135 = or i32 %57, %55
  %136 = xor i32 %15, %1
  %137 = xor i32 %80, %90
  %138 = xor i32 %36, -1
  %139 = and i32 %57, %11
  %140 = or i32 %60, %0
  %141 = and i32 %15, %24
  %142 = or i32 %13, %55
  %143 = or i32 %45, %25
  %144 = or i32 %42, %12
  %145 = or i32 %16, %1
  %146 = and i32 %57, %24
  %147 = shl i32 %146, 1
  %148 = and i32 %20, %2
  %149 = and i32 %60, %41
  %150 = add i32 %55, 1
  %151 = and i32 %4, %63
  %152 = or i32 %32, %89
  %153 = xor i32 %107, %0
  %154 = or i32 %55, %4
  %155 = or i32 %24, %4
  %156 = and i32 %22, %0
  %157 = xor i32 %36, %0
  %158 = or i32 %42, %41
  %159 = shl i32 %158, 1
  %160 = or i32 %4, %21
  %161 = or i32 %16, %25
  %162 = shl i32 %161, 1
  %163 = or i32 %45, %21
  %164 = and i32 %64, %94
  %165 = and i32 %27, %4
  %166 = and i32 %24, %9
  %167 = and i32 %31, %41
  %168 = and i32 %79, %0
  %169 = or i32 %167, %168
  %170 = and i32 %9, %1
  %171 = or i32 %25, %2
  %172 = and i32 %47, %41
  %173 = and i32 %13, %0
  %174 = or i32 %172, %173
  %175 = shl i32 %174, 1
  %176 = or i32 %55, %73
  %177 = and i32 %27, %2
  %178 = and i32 %60, %0
  %179 = xor i32 %178, 2147483647
  %180 = xor i32 %179, %172
  %181 = xor i32 %45, %27
  %182 = xor i32 %73, %0
  %183 = xor i32 %45, %60
  %184 = or i32 %107, %41
  %185 = or i32 %21, %2
  %186 = xor i32 %5, %1
  %187 = or i32 %12, %4
  %188 = or i32 %107, %0
  %189 = or i32 %4, %69
  %190 = shl i32 %189, 1
  %191 = or i32 %57, %12
  %192 = xor i32 %97, %120
  %193 = xor i32 %63, %2
  %194 = shl i32 %193, 1
  %195 = xor i32 %45, %20
  %196 = or i32 %24, %6
  %197 = shl i32 %196, 2
  %198 = or i32 %36, %0
  %199 = or i32 %64, %69
  %200 = or i32 %96, %34
  %201 = and i32 %107, %41
  %202 = shl i32 %201, 1
  %203 = or i32 %6, %11
  %204 = xor i32 %138, %0
  %205 = or i32 %96, %149
  %206 = xor i32 %8, %1
  %207 = xor i32 %76, %1
  %208 = or i32 %8, %138
  %209 = or i32 %60, %41
  %210 = and i32 %22, %94
  %211 = or i32 %4, %25
  %212 = and i32 %57, %1
  %213 = or i32 %24, %2
  %214 = and i32 %64, %25
  %215 = and i32 %20, %22
  %216 = or i32 %47, %0
  %217 = shl i32 %216, 1
  %218 = and i32 %4, %25
  %219 = or i32 %32, %33
  %220 = and i32 %57, %94
  %221 = shl i32 %0, 1
  %222 = and i32 %57, %63
  %223 = and i32 %9, %11
  %224 = shl i32 %223, 2
  %225 = xor i32 %168, -1
  %226 = xor i32 %167, %225
  %227 = and i32 %13, %94
  %228 = or i32 %96, %119
  %229 = and i32 %13, %63
  %230 = xor i32 %22, %0
  %231 = or i32 %55, %2
  %232 = xor i32 %12, %2
  %233 = or i32 %64, %21
  %234 = or i32 %16, %11
  %235 = and i32 %24, %4
  %236 = xor i32 %21, %2
  %237 = or i32 %6, %25
  %238 = or i32 %172, %178
  %239 = add i32 %60, 1
  %240 = xor i32 %32, %30
  %241 = or i32 %69, %2
  %242 = or i32 %57, %69
  %243 = xor i32 %45, %1
  %244 = shl i32 %138, 1
  %245 = xor i32 %45, %43
  %246 = or i32 %8, %11
  %247 = or i32 %13, %69
  %248 = shl i32 %247, 1
  %249 = or i32 %55, %22
  %250 = and i32 %15, %25
  %251 = or i32 %8, %24
  %252 = and i32 %22, %63
  %253 = and i32 %22, %41
  %254 = or i32 %138, %0
  %255 = or i32 %57, %21
  %256 = add i32 %27, 1
  %257 = and i32 %20, %64
  %258 = or i32 %55, %138
  %259 = xor i32 %8, %107
  %260 = shl i32 %259, 1
  %261 = add i32 %13, 1
  %262 = xor i32 %36, %55
  %263 = xor i32 %54, -1
  %264 = or i32 %167, %263
  %265 = and i32 %13, %20
  %266 = xor i32 %96, %33
  %267 = shl i32 %266, 1
  %268 = or i32 %22, %69
  %269 = or i32 %13, %21
  %270 = add i32 %42, 1
  %271 = xor i32 %43, %0
  %272 = or i32 %64, %11
  %273 = and i32 %107, %0
  %274 = shl i32 %76, 1
  %275 = xor i32 %15, %55
  %276 = and i32 %73, %41
  %277 = mul i32 %276, -7
  %278 = and i32 %42, %41
  %279 = shl i32 %278, 3
  %280 = and i32 %73, %0
  %281 = mul i32 %280, 6
  %282 = and i32 %42, %0
  %283 = mul i32 %282, -18
  %284 = mul i32 %172, 11
  %285 = and i32 %138, %0
  %286 = mul i32 %285, 22
  %287 = add i32 %4, %25
  %288 = add i32 %287, %57
  %289 = add i32 %288, %236
  %290 = add i32 %289, %9
  %291 = add i32 %290, %47
  %292 = add i32 %291, %5
  %293 = add i32 %292, %271
  %294 = add i32 %293, %214
  %295 = add i32 %294, %206
  %296 = add i32 %295, %142
  %297 = add i32 %296, %139
  %298 = add i32 %297, %136
  %299 = add i32 %298, %99
  %300 = add i32 %299, %92
  %301 = add i32 %300, %88
  %302 = add i32 %301, %71
  %303 = add i32 %302, %67
  %304 = add i32 %303, %65
  %305 = add i32 %304, %61
  %306 = add i32 %305, %39
  %307 = add i32 %306, %180
  %308 = shl i32 %307, 1
  %309 = sub i32 %5, %20
  %310 = sub i32 %309, %45
  %311 = sub i32 %310, %96
  %312 = sub i32 %311, %272
  %313 = sub i32 %312, %149
  %314 = add i32 %313, %91
  %315 = mul i32 %314, 5
  %316 = add i32 %220, %83
  %317 = sub i32 %316, %215
  %318 = add i32 %317, %46
  %319 = sub i32 %318, %81
  %320 = mul i32 %319, 3
  %321 = add i32 %82, %160
  %322 = add i32 %321, %186
  %323 = add i32 %322, %17
  %324 = shl i32 %323, 2
  %325 = add i32 %41, %1
  %326 = add i32 %325, %129
  %327 = sub i32 %326, %221
  %328 = sub i32 %327, %55
  %329 = add i32 %328, %2
  %330 = add i32 %329, %27
  %331 = add i32 %330, %150
  %332 = sub i32 %331, %20
  %333 = add i32 %332, %94
  %334 = sub i32 %333, %12
  %335 = add i32 %334, %256
  %336 = sub i32 %335, %28
  %337 = add i32 %336, %56
  %338 = sub i32 %337, %72
  %339 = add i32 %338, %95
  %340 = sub i32 %339, %101
  %341 = sub i32 %340, %104
  %342 = add i32 %341, %122
  %343 = add i32 %342, %123
  %344 = sub i32 %343, %148
  %345 = add i32 %344, %151
  %346 = add i32 %345, %154
  %347 = sub i32 %346, %155
  %348 = add i32 %347, %42
  %349 = add i32 %348, %165
  %350 = add i32 %349, %107
  %351 = add i32 %350, %171
  %352 = add i32 %351, %177
  %353 = add i32 %352, %185
  %354 = sub i32 %353, %8
  %355 = add i32 %354, %187
  %356 = sub i32 %355, %211
  %357 = sub i32 %356, %213
  %358 = sub i32 %357, %218
  %359 = add i32 %358, %60
  %360 = add i32 %359, %231
  %361 = add i32 %360, %15
  %362 = add i32 %361, %232
  %363 = sub i32 %362, %235
  %364 = add i32 %363, %239
  %365 = add i32 %364, %241
  %366 = add i32 %365, %261
  %367 = add i32 %366, %36
  %368 = add i32 %367, %270
  %369 = add i32 %368, %64
  %370 = add i32 %369, %14
  %371 = add i32 %370, %10
  %372 = sub i32 %371, %23
  %373 = sub i32 %372, %26
  %374 = add i32 %373, %29
  %375 = sub i32 %374, %30
  %376 = sub i32 %375, %40
  %377 = sub i32 %376, %44
  %378 = sub i32 %377, %50
  %379 = add i32 %378, %51
  %380 = sub i32 %379, %52
  %381 = sub i32 %380, %53
  %382 = add i32 %381, %54
  %383 = add i32 %382, %58
  %384 = sub i32 %383, %59
  %385 = add i32 %384, %62
  %386 = add i32 %385, %66
  %387 = add i32 %386, %68
  %388 = add i32 %387, %70
  %389 = add i32 %388, %74
  %390 = add i32 %389, %75
  %391 = add i32 %390, %77
  %392 = sub i32 %391, %78
  %393 = add i32 %392, %86
  %394 = sub i32 %393, %87
  %395 = sub i32 %394, %93
  %396 = add i32 %395, %33
  %397 = sub i32 %396, %100
  %398 = sub i32 %397, %102
  %399 = sub i32 %398, %103
  %400 = add i32 %399, %105
  %401 = add i32 %400, %106
  %402 = add i32 %401, %108
  %403 = sub i32 %402, %111
  %404 = add i32 %403, %112
  %405 = add i32 %404, %115
  %406 = sub i32 %405, %116
  %407 = sub i32 %406, %117
  %408 = add i32 %407, %118
  %409 = add i32 %408, %124
  %410 = sub i32 %409, %125
  %411 = sub i32 %410, %128
  %412 = sub i32 %411, %130
  %413 = sub i32 %412, %133
  %414 = sub i32 %413, %134
  %415 = sub i32 %414, %135
  %416 = add i32 %415, %37
  %417 = sub i32 %416, %140
  %418 = sub i32 %417, %141
  %419 = sub i32 %418, %143
  %420 = add i32 %419, %144
  %421 = add i32 %420, %145
  %422 = add i32 %421, %153
  %423 = add i32 %422, %156
  %424 = sub i32 %423, %157
  %425 = sub i32 %424, %163
  %426 = sub i32 %425, %164
  %427 = add i32 %426, %166
  %428 = sub i32 %427, %170
  %429 = add i32 %428, %176
  %430 = add i32 %429, %181
  %431 = sub i32 %430, %182
  %432 = add i32 %431, %183
  %433 = sub i32 %432, %184
  %434 = add i32 %433, %188
  %435 = sub i32 %434, %190
  %436 = add i32 %435, %191
  %437 = sub i32 %436, %194
  %438 = sub i32 %437, %195
  %439 = sub i32 %438, %198
  %440 = add i32 %439, %199
  %441 = add i32 %440, %203
  %442 = sub i32 %441, %204
  %443 = add i32 %442, %207
  %444 = sub i32 %443, %208
  %445 = sub i32 %444, %209
  %446 = sub i32 %445, %210
  %447 = sub i32 %446, %212
  %448 = add i32 %447, %222
  %449 = add i32 %448, %227
  %450 = sub i32 %449, %229
  %451 = sub i32 %450, %230
  %452 = sub i32 %451, %233
  %453 = sub i32 %452, %234
  %454 = add i32 %453, %237
  %455 = sub i32 %454, %119
  %456 = add i32 %455, %97
  %457 = add i32 %456, %242
  %458 = add i32 %457, %243
  %459 = sub i32 %458, %244
  %460 = sub i32 %459, %245
  %461 = sub i32 %460, %246
  %462 = add i32 %461, %249
  %463 = add i32 %462, %250
  %464 = sub i32 %463, %251
  %465 = add i32 %464, %252
  %466 = sub i32 %465, %253
  %467 = add i32 %466, %254
  %468 = sub i32 %467, %255
  %469 = sub i32 %468, %257
  %470 = sub i32 %469, %258
  %471 = sub i32 %470, %262
  %472 = add i32 %471, %265
  %473 = add i32 %472, %268
  %474 = add i32 %473, %269
  %475 = sub i32 %474, %273
  %476 = sub i32 %475, %274
  %477 = sub i32 %476, %275
  %478 = sub i32 %477, %19
  %479 = add i32 %478, %35
  %480 = sub i32 %479, %38
  %481 = sub i32 %480, %49
  %482 = add i32 %481, %85
  %483 = add i32 %482, %98
  %484 = sub i32 %483, %110
  %485 = sub i32 %484, %114
  %486 = add i32 %485, %121
  %487 = sub i32 %486, %127
  %488 = sub i32 %487, %132
  %489 = sub i32 %488, %137
  %490 = sub i32 %489, %147
  %491 = sub i32 %490, %152
  %492 = sub i32 %491, %159
  %493 = sub i32 %492, %162
  %494 = add i32 %493, %169
  %495 = sub i32 %494, %192
  %496 = sub i32 %495, %197
  %497 = sub i32 %496, %200
  %498 = sub i32 %497, %202
  %499 = sub i32 %498, %205
  %500 = sub i32 %499, %217
  %501 = sub i32 %500, %219
  %502 = sub i32 %501, %224
  %503 = add i32 %502, %226
  %504 = add i32 %503, %228
  %505 = sub i32 %504, %238
  %506 = add i32 %505, %240
  %507 = sub i32 %506, %248
  %508 = sub i32 %507, %260
  %509 = add i32 %508, %264
  %510 = add i32 %509, %277
  %511 = add i32 %510, %279
  %512 = add i32 %511, %281
  %513 = add i32 %512, %283
  %514 = add i32 %513, %284
  %515 = add i32 %514, %286
  %516 = sub i32 %515, %175
  %517 = sub i32 %516, %267
  %518 = add i32 %517, %324
  %519 = add i32 %518, %320
  %520 = add i32 %519, %315
  %521 = add i32 %520, %308
  %522 = icmp eq i32 %7, %521
  %523 = select i1 %522, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %524 = tail call i32 @puts(i8* nonnull dereferenceable(1) %523)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
