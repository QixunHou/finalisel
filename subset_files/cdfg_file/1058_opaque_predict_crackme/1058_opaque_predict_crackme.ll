; ModuleID = '../.././c_source_file/1058_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1058_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %1, %0
  %8 = or i32 %7, %6
  %9 = mul i32 %8, -2
  %10 = xor i32 %1, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %11, %13
  %15 = shl i32 %14, 1
  %16 = sub i32 %9, %15
  %17 = xor i32 %2, %0
  %18 = xor i32 %17, -1
  %19 = and i32 %18, %1
  %20 = xor i32 %0, -1
  %21 = and i32 %4, %1
  %22 = xor i32 %21, -1
  %23 = or i32 %22, %20
  %24 = shl i32 %23, 1
  %25 = and i32 %11, %4
  %26 = and i32 %1, %0
  %27 = or i32 %4, %1
  %28 = xor i32 %27, %26
  %29 = xor i32 %27, %0
  %30 = and i32 %4, %0
  %31 = and i32 %2, %1
  %32 = or i32 %30, %31
  %33 = xor i32 %27, -1
  %34 = xor i32 %33, %0
  %35 = or i32 %18, %10
  %36 = and i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %10
  %39 = shl i32 %38, 1
  %40 = xor i32 %7, -1
  %41 = and i32 %17, %40
  %42 = or i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %36, %43
  %45 = or i32 %2, %1
  %46 = xor i32 %45, %26
  %47 = shl i32 %46, 1
  %48 = or i32 %27, %20
  %49 = shl i32 %48, 1
  %50 = and i32 %5, %40
  %51 = and i32 %10, %0
  %52 = or i32 %31, %51
  %53 = and i32 %42, %2
  %54 = and i32 %12, %0
  %55 = shl i32 %54, 1
  %56 = xor i32 %30, -1
  %57 = and i32 %7, %56
  %58 = and i32 %10, %2
  %59 = and i32 %58, %20
  %60 = or i32 %10, %2
  %61 = and i32 %60, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %59, %62
  %64 = xor i32 %11, -1
  %65 = or i32 %36, %64
  %66 = shl i32 %65, 2
  %67 = and i32 %56, %10
  %68 = xor i32 %31, -1
  %69 = and i32 %17, %10
  %70 = xor i32 %45, -1
  %71 = or i32 %70, %0
  %72 = xor i32 %36, %11
  %73 = xor i32 %30, %27
  %74 = shl i32 %73, 1
  %75 = shl i32 %33, 1
  %76 = or i32 %4, %64
  %77 = xor i32 %13, %0
  %78 = or i32 %17, %40
  %79 = xor i32 %51, -1
  %80 = and i32 %17, %79
  %81 = or i32 %2, %0
  %82 = and i32 %81, %1
  %83 = xor i32 %37, %1
  %84 = and i32 %12, %79
  %85 = xor i32 %36, %45
  %86 = xor i32 %70, %0
  %87 = and i32 %18, %40
  %88 = or i32 %21, %20
  %89 = shl i32 %88, 1
  %90 = and i32 %31, %0
  %91 = xor i32 %45, %0
  %92 = or i32 %90, %91
  %93 = xor i32 %81, -1
  %94 = or i32 %93, %1
  %95 = shl i32 %94, 1
  %96 = and i32 %5, %1
  %97 = and i32 %81, %10
  %98 = or i32 %26, %18
  %99 = or i32 %12, %51
  %100 = xor i32 %90, -1
  %101 = xor i32 %91, %100
  %102 = or i32 %36, %40
  %103 = xor i32 %30, %68
  %104 = shl i32 %103, 1
  %105 = xor i32 %30, %1
  %106 = and i32 %22, %0
  %107 = xor i32 %22, %0
  %108 = or i32 %36, %7
  %109 = or i32 %17, %43
  %110 = and i32 %58, %0
  %111 = and i32 %60, %20
  %112 = xor i32 %111, -1
  %113 = xor i32 %110, %112
  %114 = and i32 %4, %79
  %115 = and i32 %68, %20
  %116 = or i32 %68, %20
  %117 = or i32 %17, %1
  %118 = and i32 %7, %4
  %119 = xor i32 %12, %0
  %120 = xor i32 %90, %119
  %121 = and i32 %5, %7
  %122 = and i32 %31, %20
  %123 = xor i32 %54, -1
  %124 = xor i32 %122, %123
  %125 = or i32 %36, %10
  %126 = shl i32 %125, 1
  %127 = and i32 %7, %37
  %128 = or i32 %4, %43
  %129 = xor i32 %12, 2147483647
  %130 = or i32 %129, %0
  %131 = xor i32 %130, %90
  %132 = or i32 %26, %70
  %133 = shl i32 %132, 1
  %134 = or i32 %45, %20
  %135 = or i32 %27, %0
  %136 = xor i32 %119, -1
  %137 = xor i32 %110, %136
  %138 = or i32 %13, %43
  %139 = or i32 %17, %51
  %140 = and i32 %17, %7
  %141 = or i32 %26, %2
  %142 = xor i32 %43, %2
  %143 = or i32 %30, %33
  %144 = or i32 %26, %6
  %145 = shl i32 %144, 1
  %146 = or i32 %90, %136
  %147 = or i32 %70, %20
  %148 = and i32 %45, %0
  %149 = and i32 %79, %2
  %150 = and i32 %42, %13
  %151 = or i32 %12, %0
  %152 = xor i32 %110, %151
  %153 = and i32 %81, %7
  %154 = shl i32 %153, 1
  %155 = and i32 %17, %11
  %156 = or i32 %110, %111
  %157 = and i32 %40, %2
  %158 = xor i32 %5, %1
  %159 = xor i32 %26, -1
  %160 = and i32 %13, %159
  %161 = and i32 %11, %18
  %162 = or i32 %13, %20
  %163 = or i32 %110, %119
  %164 = shl i32 %163, 1
  %165 = and i32 %18, %79
  %166 = or i32 %4, %40
  %167 = or i32 %30, %1
  %168 = or i32 %17, %10
  %169 = xor i32 %79, %2
  %170 = or i32 %33, %20
  %171 = xor i32 %36, %42
  %172 = or i32 %6, %10
  %173 = xor i32 %159, %2
  %174 = or i32 %30, %7
  %175 = shl i32 %174, 1
  %176 = and i32 %37, %40
  %177 = or i32 %26, %33
  %178 = or i32 %18, %1
  %179 = or i32 %51, %13
  %180 = and i32 %27, %0
  %181 = or i32 %12, %20
  %182 = xor i32 %181, 2147483647
  %183 = or i32 %182, %59
  %184 = shl i32 %183, 1
  %185 = or i32 %31, %20
  %186 = or i32 %18, %43
  %187 = or i32 %59, %61
  %188 = or i32 %26, %93
  %189 = and i32 %4, %40
  %190 = shl i32 %189, 1
  %191 = add i32 %51, 1
  %192 = xor i32 %81, %1
  %193 = and i32 %18, %159
  %194 = shl i32 %193, 1
  %195 = or i32 %36, %1
  %196 = and i32 %17, %159
  %197 = or i32 %7, %4
  %198 = xor i32 %31, %0
  %199 = or i32 %6, %40
  %200 = and i32 %4, %159
  %201 = shl i32 %31, 2
  %202 = and i32 %17, %1
  %203 = or i32 %7, %18
  %204 = or i32 %17, %26
  %205 = or i32 %30, %10
  %206 = or i32 %17, %7
  %207 = or i32 %122, %148
  %208 = or i32 %12, %26
  %209 = and i32 %13, %20
  %210 = or i32 %7, %2
  %211 = or i32 %122, %54
  %212 = shl i32 %211, 1
  %213 = or i32 %33, %0
  %214 = xor i32 %26, %2
  %215 = shl i32 %214, 1
  %216 = and i32 %81, %40
  %217 = and i32 %56, %40
  %218 = and i32 %12, %159
  %219 = or i32 %17, %64
  %220 = or i32 %12, %64
  %221 = and i32 %7, %18
  %222 = xor i32 %68, %0
  %223 = xor i32 %56, %1
  %224 = or i32 %64, %2
  %225 = xor i32 %36, %1
  %226 = and i32 %45, %20
  %227 = xor i32 %226, %100
  %228 = or i32 %22, %0
  %229 = and i32 %37, %1
  %230 = xor i32 %42, %2
  %231 = or i32 %13, %64
  %232 = xor i32 %59, %181
  %233 = or i32 %21, %0
  %234 = or i32 %90, %226
  %235 = xor i32 %60, %0
  %236 = or i32 %110, %235
  %237 = or i32 %51, %4
  %238 = and i32 %56, %1
  %239 = and i32 %70, %20
  %240 = and i32 %21, %20
  %241 = and i32 %70, %0
  %242 = and i32 %21, %0
  %243 = mul i32 %242, -18
  %244 = and i32 %33, %20
  %245 = mul i32 %122, 7
  %246 = and i32 %33, %0
  %247 = mul i32 %90, 13
  %248 = add i32 %118, %169
  %249 = add i32 %248, %76
  %250 = add i32 %249, %53
  %251 = add i32 %250, %246
  %252 = add i32 %251, %239
  %253 = add i32 %252, %225
  %254 = add i32 %253, %220
  %255 = add i32 %254, %209
  %256 = add i32 %255, %198
  %257 = add i32 %256, %186
  %258 = add i32 %257, %180
  %259 = add i32 %258, %165
  %260 = add i32 %259, %97
  %261 = add i32 %260, %82
  %262 = add i32 %261, %80
  %263 = add i32 %262, %232
  %264 = add i32 %263, %146
  %265 = add i32 %264, %131
  %266 = shl i32 %265, 1
  %267 = sub i32 %171, %210
  %268 = sub i32 %267, %203
  %269 = add i32 %268, %168
  %270 = sub i32 %269, %162
  %271 = sub i32 %270, %32
  %272 = mul i32 %271, 5
  %273 = sub i32 %244, %240
  %274 = mul i32 %273, 9
  %275 = and i32 %12, %20
  %276 = add i32 %35, %275
  %277 = mul i32 %276, 3
  %278 = sub i32 1, %0
  %279 = sub i32 %278, %1
  %280 = add i32 %279, %10
  %281 = sub i32 %280, %11
  %282 = add i32 %281, %26
  %283 = add i32 %282, %191
  %284 = sub i32 %283, %2
  %285 = sub i32 %284, %25
  %286 = add i32 %285, %68
  %287 = add i32 %286, %22
  %288 = sub i32 %287, %81
  %289 = add i32 %288, %114
  %290 = sub i32 %289, %128
  %291 = add i32 %290, %141
  %292 = sub i32 %291, %142
  %293 = sub i32 %292, %149
  %294 = sub i32 %293, %27
  %295 = sub i32 %294, %157
  %296 = add i32 %295, %166
  %297 = add i32 %296, %173
  %298 = sub i32 %297, %36
  %299 = add i32 %298, %6
  %300 = add i32 %299, %197
  %301 = add i32 %300, %200
  %302 = sub i32 %301, %21
  %303 = sub i32 %302, %224
  %304 = add i32 %303, %230
  %305 = sub i32 %304, %237
  %306 = sub i32 %305, %19
  %307 = sub i32 %306, %28
  %308 = sub i32 %307, %29
  %309 = add i32 %308, %34
  %310 = add i32 %309, %41
  %311 = sub i32 %310, %44
  %312 = add i32 %311, %50
  %313 = sub i32 %312, %52
  %314 = add i32 %313, %57
  %315 = sub i32 %314, %67
  %316 = sub i32 %315, %69
  %317 = add i32 %316, %71
  %318 = sub i32 %317, %72
  %319 = sub i32 %318, %75
  %320 = add i32 %319, %77
  %321 = add i32 %320, %78
  %322 = add i32 %321, %83
  %323 = sub i32 %322, %84
  %324 = add i32 %323, %85
  %325 = add i32 %324, %86
  %326 = sub i32 %325, %87
  %327 = sub i32 %326, %96
  %328 = add i32 %327, %98
  %329 = add i32 %328, %99
  %330 = sub i32 %329, %102
  %331 = add i32 %330, %105
  %332 = add i32 %331, %106
  %333 = add i32 %332, %107
  %334 = add i32 %333, %108
  %335 = add i32 %334, %109
  %336 = add i32 %335, %115
  %337 = sub i32 %336, %116
  %338 = sub i32 %337, %117
  %339 = sub i32 %338, %121
  %340 = add i32 %339, %127
  %341 = add i32 %340, %134
  %342 = add i32 %341, %135
  %343 = sub i32 %342, %138
  %344 = sub i32 %343, %139
  %345 = add i32 %344, %140
  %346 = add i32 %345, %143
  %347 = add i32 %346, %147
  %348 = add i32 %347, %148
  %349 = sub i32 %348, %150
  %350 = add i32 %349, %155
  %351 = add i32 %350, %158
  %352 = sub i32 %351, %160
  %353 = add i32 %352, %161
  %354 = add i32 %353, %167
  %355 = sub i32 %354, %170
  %356 = sub i32 %355, %172
  %357 = add i32 %356, %176
  %358 = sub i32 %357, %177
  %359 = add i32 %358, %178
  %360 = sub i32 %359, %179
  %361 = add i32 %360, %185
  %362 = add i32 %361, %188
  %363 = sub i32 %362, %190
  %364 = sub i32 %363, %91
  %365 = add i32 %364, %192
  %366 = add i32 %365, %195
  %367 = add i32 %366, %196
  %368 = sub i32 %367, %199
  %369 = sub i32 %368, %201
  %370 = add i32 %369, %202
  %371 = add i32 %370, %204
  %372 = sub i32 %371, %205
  %373 = sub i32 %372, %206
  %374 = add i32 %373, %208
  %375 = add i32 %374, %213
  %376 = sub i32 %375, %215
  %377 = add i32 %376, %216
  %378 = add i32 %377, %217
  %379 = sub i32 %378, %218
  %380 = add i32 %379, %219
  %381 = add i32 %380, %221
  %382 = add i32 %381, %222
  %383 = add i32 %382, %223
  %384 = sub i32 %383, %228
  %385 = sub i32 %384, %229
  %386 = add i32 %385, %231
  %387 = add i32 %386, %233
  %388 = add i32 %387, %238
  %389 = add i32 %388, %241
  %390 = sub i32 %389, %24
  %391 = sub i32 %390, %39
  %392 = sub i32 %391, %47
  %393 = sub i32 %392, %49
  %394 = sub i32 %393, %55
  %395 = sub i32 %394, %63
  %396 = add i32 %395, %66
  %397 = sub i32 %396, %74
  %398 = sub i32 %397, %89
  %399 = add i32 %398, %92
  %400 = sub i32 %399, %95
  %401 = sub i32 %400, %101
  %402 = sub i32 %401, %104
  %403 = sub i32 %402, %113
  %404 = add i32 %403, %120
  %405 = add i32 %404, %124
  %406 = sub i32 %405, %126
  %407 = sub i32 %406, %133
  %408 = add i32 %407, %137
  %409 = sub i32 %408, %145
  %410 = add i32 %409, %152
  %411 = sub i32 %410, %154
  %412 = sub i32 %411, %156
  %413 = sub i32 %412, %175
  %414 = sub i32 %413, %187
  %415 = sub i32 %414, %194
  %416 = add i32 %415, %207
  %417 = sub i32 %416, %227
  %418 = sub i32 %417, %234
  %419 = sub i32 %418, %236
  %420 = add i32 %419, %243
  %421 = add i32 %420, %245
  %422 = add i32 %421, %247
  %423 = sub i32 %422, %164
  %424 = sub i32 %423, %212
  %425 = add i32 %424, %274
  %426 = sub i32 %425, %184
  %427 = add i32 %426, %277
  %428 = add i32 %427, %272
  %429 = add i32 %428, %266
  %430 = icmp eq i32 %16, %429
  %431 = select i1 %430, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %432 = tail call i32 @puts(i8* nonnull dereferenceable(1) %431)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
