; ModuleID = '../.././c_source_file/1511_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1511_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = xor i32 %2, -1
  %6 = and i32 %5, %1
  %7 = or i32 %6, %4
  %8 = shl i32 %7, 1
  %9 = xor i32 %1, -1
  %10 = or i32 %9, %0
  %11 = and i32 %10, %5
  %12 = and i32 %1, %0
  %13 = or i32 %12, %2
  %14 = shl i32 %13, 1
  %15 = and i32 %9, %2
  %16 = and i32 %15, %0
  %17 = xor i32 %2, %1
  %18 = xor i32 %17, %4
  %19 = xor i32 %18, %16
  %20 = or i32 %5, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %17, -1
  %23 = xor i32 %22, %0
  %24 = xor i32 %12, %2
  %25 = and i32 %9, %0
  %26 = or i32 %25, %22
  %27 = or i32 %17, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %16, %28
  %30 = and i32 %17, %4
  %31 = or i32 %5, %1
  %32 = xor i32 %31, -1
  %33 = xor i32 %32, %0
  %34 = xor i32 %1, %0
  %35 = or i32 %34, %5
  %36 = and i32 %2, %1
  %37 = and i32 %36, %0
  %38 = or i32 %2, %1
  %39 = and i32 %38, %4
  %40 = xor i32 %37, -1
  %41 = xor i32 %39, %40
  %42 = xor i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %1
  %45 = or i32 %22, %0
  %46 = or i32 %9, %2
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %0
  %49 = xor i32 %16, %48
  %50 = or i32 %34, %21
  %51 = shl i32 %50, 2
  %52 = xor i32 %20, %12
  %53 = shl i32 %52, 1
  %54 = and i32 %5, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %55, %1
  %57 = shl i32 %56, 1
  %58 = xor i32 %36, -1
  %59 = xor i32 %54, %58
  %60 = and i32 %20, %9
  %61 = and i32 %2, %0
  %62 = xor i32 %61, %10
  %63 = or i32 %2, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %34, %64
  %66 = or i32 %38, %0
  %67 = xor i32 %25, -1
  %68 = and i32 %17, %67
  %69 = xor i32 %38, %0
  %70 = shl i32 %69, 1
  %71 = xor i32 %12, -1
  %72 = xor i32 %71, %2
  %73 = or i32 %1, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %5, %74
  %76 = xor i32 %6, -1
  %77 = or i32 %76, %4
  %78 = xor i32 %34, -1
  %79 = shl i32 %78, 1
  %80 = and i32 %55, %78
  %81 = or i32 %43, %78
  %82 = and i32 %63, %34
  %83 = xor i32 %46, %0
  %84 = or i32 %16, %83
  %85 = or i32 %12, %43
  %86 = shl i32 %85, 1
  %87 = or i32 %54, %36
  %88 = or i32 %42, %74
  %89 = xor i32 %25, %2
  %90 = and i32 %20, %34
  %91 = or i32 %12, %21
  %92 = and i32 %15, %4
  %93 = and i32 %22, %0
  %94 = or i32 %92, %93
  %95 = xor i32 %38, -1
  %96 = xor i32 %95, %0
  %97 = shl i32 %96, 1
  %98 = or i32 %54, %78
  %99 = and i32 %63, %9
  %100 = shl i32 %99, 1
  %101 = xor i32 %61, -1
  %102 = and i32 %101, %78
  %103 = or i32 %21, %78
  %104 = and i32 %20, %1
  %105 = and i32 %31, %4
  %106 = and i32 %42, %9
  %107 = and i32 %36, %4
  %108 = and i32 %38, %0
  %109 = xor i32 %107, -1
  %110 = xor i32 %108, %109
  %111 = xor i32 %58, %0
  %112 = xor i32 %31, %0
  %113 = shl i32 %112, 1
  %114 = and i32 %73, %43
  %115 = or i32 %31, %0
  %116 = or i32 %43, %9
  %117 = or i32 %37, %69
  %118 = or i32 %42, %78
  %119 = xor i32 %54, %1
  %120 = or i32 %22, %74
  %121 = shl i32 %120, 1
  %122 = or i32 %42, %25
  %123 = and i32 %76, %4
  %124 = or i32 %58, %4
  %125 = and i32 %55, %9
  %126 = add i32 %54, 1
  %127 = or i32 %21, %9
  %128 = and i32 %17, %0
  %129 = xor i32 %128, %109
  %130 = and i32 %20, %78
  %131 = xor i32 %31, %12
  %132 = shl i32 %131, 1
  %133 = and i32 %42, %1
  %134 = xor i32 %10, -1
  %135 = or i32 %43, %134
  %136 = xor i32 %10, %2
  %137 = xor i32 %76, %0
  %138 = and i32 %67, %2
  %139 = and i32 %31, %0
  %140 = and i32 %101, %1
  %141 = shl i32 %140, 1
  %142 = or i32 %32, %4
  %143 = or i32 %17, %25
  %144 = or i32 %25, %43
  %145 = and i32 %43, %78
  %146 = xor i32 %67, %2
  %147 = and i32 %42, %10
  %148 = xor i32 %83, 2147483647
  %149 = xor i32 %148, %16
  %150 = xor i32 %20, %1
  %151 = or i32 %74, %2
  %152 = or i32 %36, %0
  %153 = or i32 %61, %134
  %154 = or i32 %78, %2
  %155 = and i32 %73, %5
  %156 = and i32 %22, %4
  %157 = shl i32 %156, 1
  %158 = or i32 %61, %9
  %159 = shl i32 %158, 1
  %160 = and i32 %63, %1
  %161 = shl i32 %160, 1
  %162 = and i32 %43, %9
  %163 = or i32 %43, %1
  %164 = shl i32 %31, 1
  %165 = or i32 %12, %64
  %166 = or i32 %34, %2
  %167 = or i32 %64, %9
  %168 = or i32 %25, %5
  %169 = xor i32 %63, %12
  %170 = or i32 %6, %0
  %171 = and i32 %42, %78
  %172 = and i32 %58, %0
  %173 = and i32 %10, %2
  %174 = mul i32 %173, 3
  %175 = or i32 %61, %78
  %176 = xor i32 %69, %40
  %177 = and i32 %17, %10
  %178 = or i32 %107, %108
  %179 = or i32 %54, %32
  %180 = and i32 %22, %67
  %181 = xor i32 %101, %1
  %182 = or i32 %36, %4
  %183 = or i32 %42, %9
  %184 = and i32 %95, %4
  %185 = and i32 %6, %4
  %186 = and i32 %95, %0
  %187 = and i32 %6, %0
  %188 = and i32 %32, %4
  %189 = shl i32 %188, 3
  %190 = shl i32 %107, 3
  %191 = and i32 %32, %0
  %192 = mul i32 %191, -7
  %193 = add i32 %155, %74
  %194 = add i32 %193, %154
  %195 = add i32 %194, %21
  %196 = add i32 %195, %181
  %197 = add i32 %196, %172
  %198 = add i32 %197, %162
  %199 = add i32 %198, %127
  %200 = add i32 %199, %82
  %201 = add i32 %200, %81
  %202 = add i32 %201, %66
  %203 = add i32 %202, %30
  %204 = add i32 %203, %149
  %205 = shl i32 %204, 1
  %206 = sub i32 %146, %186
  %207 = mul i32 %206, 5
  %208 = add i32 %185, %4
  %209 = shl i32 %208, 2
  %210 = add i32 %67, %1
  %211 = add i32 %210, %71
  %212 = add i32 %211, %73
  %213 = add i32 %212, %34
  %214 = sub i32 %213, %11
  %215 = sub i32 %214, %24
  %216 = sub i32 %215, %35
  %217 = sub i32 %216, %17
  %218 = add i32 %217, %72
  %219 = add i32 %218, %75
  %220 = sub i32 %219, %79
  %221 = add i32 %220, %89
  %222 = sub i32 %221, %38
  %223 = add i32 %222, %32
  %224 = add i32 %223, %126
  %225 = add i32 %224, %20
  %226 = add i32 %225, %136
  %227 = add i32 %226, %138
  %228 = sub i32 %227, %151
  %229 = add i32 %228, %76
  %230 = sub i32 %229, %166
  %231 = sub i32 %230, %63
  %232 = add i32 %231, %168
  %233 = sub i32 %232, %14
  %234 = sub i32 %233, %23
  %235 = add i32 %234, %26
  %236 = add i32 %235, %33
  %237 = add i32 %236, %44
  %238 = sub i32 %237, %45
  %239 = sub i32 %238, %59
  %240 = add i32 %239, %60
  %241 = add i32 %240, %62
  %242 = sub i32 %241, %65
  %243 = sub i32 %242, %68
  %244 = sub i32 %243, %77
  %245 = add i32 %244, %80
  %246 = sub i32 %245, %87
  %247 = sub i32 %246, %88
  %248 = add i32 %247, %90
  %249 = sub i32 %248, %91
  %250 = add i32 %249, %98
  %251 = sub i32 %250, %102
  %252 = add i32 %251, %103
  %253 = sub i32 %252, %104
  %254 = sub i32 %253, %105
  %255 = add i32 %254, %106
  %256 = sub i32 %255, %111
  %257 = sub i32 %256, %114
  %258 = add i32 %257, %115
  %259 = sub i32 %258, %116
  %260 = add i32 %259, %118
  %261 = add i32 %260, %119
  %262 = add i32 %261, %122
  %263 = add i32 %262, %123
  %264 = add i32 %263, %124
  %265 = add i32 %264, %125
  %266 = sub i32 %265, %130
  %267 = sub i32 %266, %133
  %268 = add i32 %267, %135
  %269 = sub i32 %268, %137
  %270 = sub i32 %269, %139
  %271 = add i32 %270, %142
  %272 = add i32 %271, %143
  %273 = sub i32 %272, %144
  %274 = add i32 %273, %145
  %275 = add i32 %274, %147
  %276 = sub i32 %275, %150
  %277 = add i32 %276, %152
  %278 = add i32 %277, %153
  %279 = sub i32 %278, %163
  %280 = sub i32 %279, %164
  %281 = add i32 %280, %165
  %282 = sub i32 %281, %167
  %283 = add i32 %282, %169
  %284 = sub i32 %283, %170
  %285 = add i32 %284, %171
  %286 = add i32 %285, %174
  %287 = sub i32 %286, %175
  %288 = add i32 %287, %177
  %289 = add i32 %288, %179
  %290 = sub i32 %289, %39
  %291 = add i32 %290, %180
  %292 = add i32 %291, %182
  %293 = add i32 %292, %183
  %294 = sub i32 %293, %184
  %295 = sub i32 %294, %187
  %296 = add i32 %295, %37
  %297 = sub i32 %296, %19
  %298 = add i32 %297, %29
  %299 = sub i32 %298, %41
  %300 = add i32 %299, %49
  %301 = sub i32 %300, %51
  %302 = sub i32 %301, %53
  %303 = sub i32 %302, %57
  %304 = sub i32 %303, %70
  %305 = sub i32 %304, %84
  %306 = sub i32 %305, %86
  %307 = sub i32 %306, %94
  %308 = sub i32 %307, %97
  %309 = sub i32 %308, %100
  %310 = sub i32 %309, %110
  %311 = sub i32 %310, %113
  %312 = sub i32 %311, %117
  %313 = sub i32 %312, %121
  %314 = sub i32 %313, %129
  %315 = sub i32 %314, %132
  %316 = sub i32 %315, %141
  %317 = sub i32 %316, %157
  %318 = sub i32 %317, %159
  %319 = sub i32 %318, %161
  %320 = add i32 %319, %176
  %321 = add i32 %320, %178
  %322 = sub i32 %321, %189
  %323 = add i32 %322, %190
  %324 = add i32 %323, %192
  %325 = add i32 %324, %207
  %326 = add i32 %325, %209
  %327 = add i32 %326, %205
  %328 = icmp eq i32 %8, %327
  %329 = select i1 %328, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %330 = tail call i32 @puts(i8* nonnull dereferenceable(1) %329)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
