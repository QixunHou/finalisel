; ModuleID = '../.././c_source_file/0843_path_condition_crackme.c'
source_filename = "../.././c_source_file/0843_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = or i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = mul i32 %9, -5
  %11 = or i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = add i32 %10, %12
  %14 = add i32 %13, %7
  %15 = or i32 %4, %3
  %16 = shl i32 %15, 1
  %17 = xor i32 %4, 2147483647
  %18 = xor i32 %4, %3
  %19 = and i32 %17, %3
  %20 = shl i32 %15, 2
  %21 = xor i32 %20, -4
  %22 = xor i32 %2, -1
  %23 = and i32 %22, %0
  %24 = and i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = xor i32 %23, %25
  %27 = xor i32 %1, -1
  %28 = and i32 %27, %2
  %29 = and i32 %28, %0
  %30 = xor i32 %2, %1
  %31 = xor i32 %30, %0
  %32 = or i32 %29, %31
  %33 = shl i32 %32, 1
  %34 = and i32 %1, %0
  %35 = xor i32 %2, %0
  %36 = or i32 %35, %34
  %37 = xor i32 %1, %0
  %38 = and i32 %37, %22
  %39 = and i32 %2, %0
  %40 = xor i32 %39, -1
  %41 = and i32 %37, %40
  %42 = shl i32 %41, 1
  %43 = or i32 %22, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %37, -1
  %46 = or i32 %44, %45
  %47 = xor i32 %0, -1
  %48 = or i32 %22, %1
  %49 = or i32 %48, %47
  %50 = or i32 %45, %2
  %51 = and i32 %24, %0
  %52 = and i32 %30, %47
  %53 = xor i32 %52, -1
  %54 = xor i32 %51, %53
  %55 = and i32 %48, %47
  %56 = shl i32 %55, 1
  %57 = xor i32 %11, %34
  %58 = shl i32 %57, 1
  %59 = or i32 %39, %27
  %60 = xor i32 %23, -1
  %61 = and i32 %60, %45
  %62 = xor i32 %43, %34
  %63 = xor i32 %11, %0
  %64 = or i32 %51, %63
  %65 = xor i32 %8, %1
  %66 = and i32 %25, %0
  %67 = and i32 %22, %1
  %68 = xor i32 %67, -1
  %69 = xor i32 %39, %68
  %70 = or i32 %30, %47
  %71 = and i32 %35, %45
  %72 = or i32 %1, %0
  %73 = xor i32 %72, %2
  %74 = shl i32 %73, 1
  %75 = or i32 %24, %0
  %76 = xor i32 %72, -1
  %77 = or i32 %35, %76
  %78 = or i32 %68, %0
  %79 = or i32 %25, %0
  %80 = shl i32 %79, 1
  %81 = xor i32 %80, -1
  %82 = xor i32 %23, %48
  %83 = xor i32 %23, %1
  %84 = shl i32 %83, 2
  %85 = and i32 %8, %1
  %86 = shl i32 %85, 1
  %87 = or i32 %35, %27
  %88 = and i32 %28, %47
  %89 = xor i32 %70, -1
  %90 = or i32 %88, %89
  %91 = and i32 %48, %0
  %92 = and i32 %24, %47
  %93 = and i32 %30, %0
  %94 = or i32 %92, %93
  %95 = or i32 %9, %27
  %96 = and i32 %11, %47
  %97 = xor i32 %96, 2147483647
  %98 = xor i32 %97, %51
  %99 = shl i32 %98, 1
  %100 = and i32 %27, %0
  %101 = or i32 %100, %22
  %102 = xor i32 %34, -1
  %103 = and i32 %22, %102
  %104 = and i32 %11, %0
  %105 = or i32 %48, %0
  %106 = or i32 %30, %0
  %107 = xor i32 %30, -1
  %108 = and i32 %107, %102
  %109 = or i32 %39, %76
  %110 = xor i32 %68, %0
  %111 = or i32 %27, %0
  %112 = xor i32 %39, %111
  %113 = or i32 %23, %1
  %114 = xor i32 %111, -1
  %115 = or i32 %107, %114
  %116 = or i32 %27, %2
  %117 = and i32 %116, %47
  %118 = or i32 %29, %117
  %119 = or i32 %35, %45
  %120 = and i32 %68, %47
  %121 = xor i32 %35, -1
  %122 = and i32 %72, %121
  %123 = shl i32 %68, 1
  %124 = xor i32 %100, -1
  %125 = xor i32 %124, %2
  %126 = xor i32 %48, -1
  %127 = add i32 %48, 1
  %128 = and i32 %35, %111
  %129 = and i32 %121, %1
  %130 = shl i32 %129, 1
  %131 = or i32 %121, %27
  %132 = shl i32 %131, 1
  %133 = xor i32 %106, -1
  %134 = or i32 %29, %133
  %135 = xor i32 %126, %0
  %136 = xor i32 %8, %34
  %137 = xor i32 %100, %25
  %138 = xor i32 %29, %106
  %139 = and i32 %43, %45
  %140 = or i32 %39, %1
  %141 = xor i32 %24, %0
  %142 = or i32 %9, %1
  %143 = or i32 %30, %114
  %144 = and i32 %102, %2
  %145 = and i32 %8, %27
  %146 = shl i32 %145, 2
  %147 = and i32 %72, %22
  %148 = xor i32 %31, 2147483647
  %149 = xor i32 %148, %29
  %150 = shl i32 %149, 1
  %151 = or i32 %107, %47
  %152 = xor i32 %40, %1
  %153 = and i32 %60, %27
  %154 = or i32 %67, %47
  %155 = or i32 %39, %37
  %156 = xor i32 %43, %1
  %157 = or i32 %34, %9
  %158 = and i32 %116, %0
  %159 = xor i32 %158, -1
  %160 = xor i32 %88, %159
  %161 = or i32 %23, %37
  %162 = and i32 %30, %111
  %163 = and i32 %72, %107
  %164 = shl i32 %163, 1
  %165 = or i32 %37, %9
  %166 = and i32 %111, %2
  %167 = shl i32 %166, 1
  %168 = and i32 %37, %2
  %169 = shl i32 %168, 1
  %170 = xor i32 %114, %2
  %171 = or i32 %121, %114
  %172 = or i32 %34, %12
  %173 = and i32 %40, %27
  %174 = and i32 %111, %121
  %175 = xor i32 %76, %2
  %176 = xor i32 %116, %0
  %177 = or i32 %29, %176
  %178 = or i32 %121, %45
  %179 = shl i32 %178, 1
  %180 = or i32 %107, %0
  %181 = or i32 %22, %76
  %182 = xor i32 %51, %31
  %183 = or i32 %39, %67
  %184 = xor i32 %111, %2
  %185 = or i32 %34, %107
  %186 = and i32 %35, %37
  %187 = or i32 %24, %100
  %188 = and i32 %124, %2
  %189 = and i32 %107, %124
  %190 = or i32 %100, %2
  %191 = shl i32 %190, 1
  %192 = or i32 %51, %96
  %193 = shl i32 %72, 1
  %194 = or i32 %35, %1
  %195 = xor i32 %93, -1
  %196 = xor i32 %92, %195
  %197 = and i32 %8, %45
  %198 = xor i32 %44, %1
  %199 = and i32 %107, %47
  %200 = and i32 %121, %27
  %201 = or i32 %30, %34
  %202 = and i32 %37, %60
  %203 = or i32 %126, %0
  %204 = shl i32 %203, 1
  %205 = and i32 %12, %47
  %206 = shl i32 %205, 1
  %207 = and i32 %67, %47
  %208 = shl i32 %207, 3
  %209 = and i32 %12, %0
  %210 = mul i32 %209, 21
  %211 = and i32 %67, %0
  %212 = mul i32 %211, 11
  %213 = and i32 %126, %47
  %214 = mul i32 %213, 19
  %215 = and i32 %126, %0
  %216 = mul i32 %215, 6
  %217 = add i32 %38, %175
  %218 = add i32 %217, %8
  %219 = add i32 %218, %92
  %220 = add i32 %219, %201
  %221 = add i32 %220, %157
  %222 = add i32 %221, %153
  %223 = add i32 %222, %70
  %224 = add i32 %223, %36
  %225 = sub i32 %51, %147
  %226 = add i32 %225, %6
  %227 = mul i32 %226, 3
  %228 = sub i32 %171, %143
  %229 = mul i32 %228, 5
  %230 = sub i32 %224, %3
  %231 = add i32 %230, %64
  %232 = add i32 %231, %18
  %233 = add i32 %232, %19
  %234 = shl i32 %233, 1
  %235 = add i32 %1, 3
  %236 = add i32 %235, %37
  %237 = sub i32 %236, %2
  %238 = add i32 %237, %102
  %239 = add i32 %238, %50
  %240 = add i32 %239, %39
  %241 = add i32 %240, %101
  %242 = add i32 %241, %103
  %243 = add i32 %242, %125
  %244 = add i32 %243, %127
  %245 = add i32 %244, %23
  %246 = sub i32 %245, %30
  %247 = add i32 %246, %35
  %248 = add i32 %247, %144
  %249 = add i32 %248, %170
  %250 = sub i32 %249, %181
  %251 = sub i32 %250, %184
  %252 = sub i32 %251, %188
  %253 = sub i32 %252, %193
  %254 = add i32 %253, 1
  %255 = sub i32 %254, %26
  %256 = add i32 %255, %46
  %257 = sub i32 %256, %49
  %258 = add i32 %257, %59
  %259 = sub i32 %258, %61
  %260 = sub i32 %259, %62
  %261 = add i32 %260, %65
  %262 = sub i32 %261, %66
  %263 = add i32 %262, %69
  %264 = sub i32 %263, %71
  %265 = sub i32 %264, %74
  %266 = sub i32 %265, %75
  %267 = add i32 %266, %77
  %268 = add i32 %267, %78
  %269 = sub i32 %268, %82
  %270 = add i32 %269, %87
  %271 = add i32 %270, %91
  %272 = sub i32 %271, %95
  %273 = add i32 %272, %104
  %274 = sub i32 %273, %105
  %275 = add i32 %274, %106
  %276 = sub i32 %275, %108
  %277 = sub i32 %276, %109
  %278 = add i32 %277, %110
  %279 = sub i32 %278, %112
  %280 = sub i32 %279, %113
  %281 = add i32 %280, %31
  %282 = sub i32 %281, %115
  %283 = add i32 %282, %119
  %284 = sub i32 %283, %120
  %285 = add i32 %284, %122
  %286 = sub i32 %285, %123
  %287 = sub i32 %286, %128
  %288 = sub i32 %287, %135
  %289 = add i32 %288, %136
  %290 = sub i32 %289, %137
  %291 = add i32 %290, %139
  %292 = sub i32 %291, %140
  %293 = sub i32 %292, %141
  %294 = add i32 %293, %142
  %295 = sub i32 %294, %151
  %296 = sub i32 %295, %152
  %297 = sub i32 %296, %154
  %298 = sub i32 %297, %155
  %299 = sub i32 %298, %156
  %300 = add i32 %299, %161
  %301 = add i32 %300, %162
  %302 = add i32 %301, %165
  %303 = sub i32 %302, %167
  %304 = sub i32 %303, %169
  %305 = add i32 %304, %172
  %306 = sub i32 %305, %173
  %307 = add i32 %306, %174
  %308 = add i32 %307, %180
  %309 = add i32 %308, %183
  %310 = sub i32 %309, %185
  %311 = add i32 %310, %186
  %312 = sub i32 %311, %187
  %313 = add i32 %312, %63
  %314 = sub i32 %313, %189
  %315 = sub i32 %314, %191
  %316 = sub i32 %315, %194
  %317 = add i32 %316, %197
  %318 = sub i32 %317, %198
  %319 = add i32 %318, %199
  %320 = add i32 %319, %200
  %321 = add i32 %320, %202
  %322 = sub i32 %321, %52
  %323 = sub i32 %322, %42
  %324 = sub i32 %323, %54
  %325 = sub i32 %324, %56
  %326 = sub i32 %325, %58
  %327 = add i32 %326, %81
  %328 = add i32 %327, %84
  %329 = sub i32 %328, %86
  %330 = add i32 %329, %90
  %331 = add i32 %330, %94
  %332 = add i32 %331, %118
  %333 = sub i32 %332, %130
  %334 = sub i32 %333, %132
  %335 = add i32 %334, %134
  %336 = sub i32 %335, %138
  %337 = sub i32 %336, %146
  %338 = sub i32 %337, %160
  %339 = sub i32 %338, %164
  %340 = add i32 %339, %177
  %341 = sub i32 %340, %179
  %342 = sub i32 %341, %182
  %343 = add i32 %342, %192
  %344 = sub i32 %343, %196
  %345 = sub i32 %344, %204
  %346 = sub i32 %345, %206
  %347 = add i32 %346, %208
  %348 = add i32 %347, %210
  %349 = add i32 %348, %212
  %350 = add i32 %349, %214
  %351 = add i32 %350, %216
  %352 = add i32 %351, %16
  %353 = sub i32 %352, %33
  %354 = add i32 %353, %229
  %355 = add i32 %354, %21
  %356 = sub i32 %355, %99
  %357 = sub i32 %356, %150
  %358 = add i32 %357, %227
  %359 = add i32 %358, %234
  %360 = icmp eq i32 %14, %359
  %361 = select i1 %360, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %362 = tail call i32 @puts(i8* nonnull dereferenceable(1) %361)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
