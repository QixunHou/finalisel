digraph "DFG for'crackme' function" {
	Node0x1d12bb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1d12c20[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1d12ce0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x1d12d50[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x1d12dc0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1d12e30[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1d12ea0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1d12f10[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1d12fb0[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0x1d13050[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1d130f0[shape=record, label="  %13 = shl i32 %4, 3"];
	Node0x1d13190[shape=record, label="  %14 = xor i32 %13, -8"];
	Node0x1d13230[shape=record, label="  %15 = mul i32 %6, -3"];
	Node0x1d132a0[shape=record, label="  %16 = shl i32 %5, 2"];
	Node0x1d13310[shape=record, label="  %17 = sub i32 -4, %0"];
	Node0x1d13380[shape=record, label="  %18 = add i32 %17, %1"];
	Node0x1d133f0[shape=record, label="  %19 = sub i32 %18, %4"];
	Node0x1d13460[shape=record, label="  %20 = add i32 %19, %5"];
	Node0x1d134d0[shape=record, label="  %21 = add i32 %20, %7"];
	Node0x1d13540[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x1d135b0[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x1d13620[shape=record, label="  %24 = sub i32 %23, %16"];
	Node0x1d13690[shape=record, label="  %25 = sub i32 %24, %12"];
	Node0x1d13700[shape=record, label="  %26 = sub i32 %25, %14"];
	Node0x1d13770[shape=record, label="  %27 = icmp eq i32 %26, %0"];
	Node0x1cb3268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d13c10[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1d13c60[shape=record, label="  ret void"];
	Node0x1d12bb0 -> Node0x1d12c20;
	Node0x1d12c20 -> Node0x1d12ce0;
	Node0x1d12ce0 -> Node0x1d12d50;
	Node0x1d12d50 -> Node0x1d12dc0;
	Node0x1d12dc0 -> Node0x1d12e30;
	Node0x1d12e30 -> Node0x1d12ea0;
	Node0x1d12ea0 -> Node0x1d12f10;
	Node0x1d12f10 -> Node0x1d12fb0;
	Node0x1d12fb0 -> Node0x1d13050;
	Node0x1d13050 -> Node0x1d130f0;
	Node0x1d130f0 -> Node0x1d13190;
	Node0x1d13190 -> Node0x1d13230;
	Node0x1d13230 -> Node0x1d132a0;
	Node0x1d132a0 -> Node0x1d13310;
	Node0x1d13310 -> Node0x1d13380;
	Node0x1d13380 -> Node0x1d133f0;
	Node0x1d133f0 -> Node0x1d13460;
	Node0x1d13460 -> Node0x1d134d0;
	Node0x1d134d0 -> Node0x1d13540;
	Node0x1d13540 -> Node0x1d135b0;
	Node0x1d135b0 -> Node0x1d13620;
	Node0x1d13620 -> Node0x1d13690;
	Node0x1d13690 -> Node0x1d13700;
	Node0x1d13700 -> Node0x1d13770;
	Node0x1d13770 -> Node0x1cb3268;
	Node0x1cb3268 -> Node0x1d13c10;
	Node0x1d13c10 -> Node0x1d13c60;
edge [color=red]
	Node0x1d12bb0 -> Node0x1d12c20;
	Node0x1d12bb0 -> Node0x1d12d50;
	Node0x1d12d50 -> Node0x1d12dc0;
	Node0x1d12e30 -> Node0x1d12ea0;
	Node0x1d12f10 -> Node0x1d12fb0;
	Node0x1d12fb0 -> Node0x1d13050;
	Node0x1d12c20 -> Node0x1d130f0;
	Node0x1d130f0 -> Node0x1d13190;
	Node0x1d12d50 -> Node0x1d13230;
	Node0x1d12ce0 -> Node0x1d132a0;
	Node0x1d13310 -> Node0x1d13380;
	Node0x1d13380 -> Node0x1d133f0;
	Node0x1d12c20 -> Node0x1d133f0;
	Node0x1d133f0 -> Node0x1d13460;
	Node0x1d12ce0 -> Node0x1d13460;
	Node0x1d13460 -> Node0x1d134d0;
	Node0x1d12dc0 -> Node0x1d134d0;
	Node0x1d134d0 -> Node0x1d13540;
	Node0x1d12ea0 -> Node0x1d13540;
	Node0x1d13540 -> Node0x1d135b0;
	Node0x1d13230 -> Node0x1d135b0;
	Node0x1d135b0 -> Node0x1d13620;
	Node0x1d132a0 -> Node0x1d13620;
	Node0x1d13620 -> Node0x1d13690;
	Node0x1d13050 -> Node0x1d13690;
	Node0x1d13690 -> Node0x1d13700;
	Node0x1d13190 -> Node0x1d13700;
	Node0x1d13700 -> Node0x1d13770;
	Node0x1d13770 -> Node0x1cb3268;
	Node0x1cb3268 -> Node0x1d13c10;
}
