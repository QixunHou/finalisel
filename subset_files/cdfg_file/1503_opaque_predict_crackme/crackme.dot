digraph "DFG for'crackme' function" {
	Node0x1299640[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1299cf0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1299db0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1299e20[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x1299e90[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1299f00[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1299f70[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0x129a010[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x129a080[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x129a120[shape=record, label="  %12 = xor i32 %0, 2147483647"];
	Node0x129a190[shape=record, label="  %13 = or i32 %12, %1"];
	Node0x129a200[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x129a2a0[shape=record, label="  %15 = shl i32 %11, 2"];
	Node0x129a340[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0x129a3b0[shape=record, label="  %17 = shl i32 %6, 2"];
	Node0x129a420[shape=record, label="  %18 = xor i32 %17, -4"];
	Node0x129a4c0[shape=record, label="  %19 = mul i32 %7, 5"];
	Node0x129a530[shape=record, label="  %20 = add i32 %1, %0"];
	Node0x129a5a0[shape=record, label="  %21 = sub i32 %5, %20"];
	Node0x129a610[shape=record, label="  %22 = sub i32 %21, %3"];
	Node0x129a680[shape=record, label="  %23 = sub i32 %22, %6"];
	Node0x129a6f0[shape=record, label="  %24 = add i32 %23, %8"];
	Node0x129a760[shape=record, label="  %25 = sub i32 %24, %10"];
	Node0x129a7d0[shape=record, label="  %26 = add i32 %25, %11"];
	Node0x129a840[shape=record, label="  %27 = sub i32 %26, %14"];
	Node0x129a8b0[shape=record, label="  %28 = add i32 %27, %19"];
	Node0x129a920[shape=record, label="  %29 = add i32 %28, %16"];
	Node0x129a990[shape=record, label="  %30 = add i32 %29, %18"];
	Node0x129aa00[shape=record, label="  %31 = icmp eq i32 %30, %4"];
	Node0x123a268[shape=record, label="  %32 = select i1 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x129b0b0[shape=record, label="  %33 = tail call i32 @puts(i8* nonnull dereferenceable(1) %32)"];
	Node0x129b100[shape=record, label="  ret void"];
	Node0x1299640 -> Node0x1299cf0;
	Node0x1299cf0 -> Node0x1299db0;
	Node0x1299db0 -> Node0x1299e20;
	Node0x1299e20 -> Node0x1299e90;
	Node0x1299e90 -> Node0x1299f00;
	Node0x1299f00 -> Node0x1299f70;
	Node0x1299f70 -> Node0x129a010;
	Node0x129a010 -> Node0x129a080;
	Node0x129a080 -> Node0x129a120;
	Node0x129a120 -> Node0x129a190;
	Node0x129a190 -> Node0x129a200;
	Node0x129a200 -> Node0x129a2a0;
	Node0x129a2a0 -> Node0x129a340;
	Node0x129a340 -> Node0x129a3b0;
	Node0x129a3b0 -> Node0x129a420;
	Node0x129a420 -> Node0x129a4c0;
	Node0x129a4c0 -> Node0x129a530;
	Node0x129a530 -> Node0x129a5a0;
	Node0x129a5a0 -> Node0x129a610;
	Node0x129a610 -> Node0x129a680;
	Node0x129a680 -> Node0x129a6f0;
	Node0x129a6f0 -> Node0x129a760;
	Node0x129a760 -> Node0x129a7d0;
	Node0x129a7d0 -> Node0x129a840;
	Node0x129a840 -> Node0x129a8b0;
	Node0x129a8b0 -> Node0x129a920;
	Node0x129a920 -> Node0x129a990;
	Node0x129a990 -> Node0x129aa00;
	Node0x129aa00 -> Node0x123a268;
	Node0x123a268 -> Node0x129b0b0;
	Node0x129b0b0 -> Node0x129b100;
edge [color=red]
	Node0x1299640 -> Node0x1299cf0;
	Node0x1299db0 -> Node0x1299e20;
	Node0x1299e90 -> Node0x1299f00;
	Node0x1299f70 -> Node0x129a010;
	Node0x129a120 -> Node0x129a190;
	Node0x129a190 -> Node0x129a200;
	Node0x129a080 -> Node0x129a2a0;
	Node0x129a2a0 -> Node0x129a340;
	Node0x1299e20 -> Node0x129a3b0;
	Node0x129a3b0 -> Node0x129a420;
	Node0x1299e90 -> Node0x129a4c0;
	Node0x1299db0 -> Node0x129a5a0;
	Node0x129a530 -> Node0x129a5a0;
	Node0x129a5a0 -> Node0x129a610;
	Node0x1299640 -> Node0x129a610;
	Node0x129a610 -> Node0x129a680;
	Node0x1299e20 -> Node0x129a680;
	Node0x129a680 -> Node0x129a6f0;
	Node0x1299f00 -> Node0x129a6f0;
	Node0x129a6f0 -> Node0x129a760;
	Node0x129a010 -> Node0x129a760;
	Node0x129a760 -> Node0x129a7d0;
	Node0x129a080 -> Node0x129a7d0;
	Node0x129a7d0 -> Node0x129a840;
	Node0x129a200 -> Node0x129a840;
	Node0x129a840 -> Node0x129a8b0;
	Node0x129a4c0 -> Node0x129a8b0;
	Node0x129a8b0 -> Node0x129a920;
	Node0x129a340 -> Node0x129a920;
	Node0x129a920 -> Node0x129a990;
	Node0x129a420 -> Node0x129a990;
	Node0x129a990 -> Node0x129aa00;
	Node0x1299cf0 -> Node0x129aa00;
	Node0x129aa00 -> Node0x123a268;
	Node0x123a268 -> Node0x129b0b0;
}
