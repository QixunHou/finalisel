; ModuleID = '../.././c_source_file/0252_path_condition_crackme.c'
source_filename = "../.././c_source_file/0252_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %1
  %10 = and i32 %9, %7
  %11 = mul i32 %10, -2
  %12 = and i32 %8, %1
  %13 = xor i32 %12, -1
  %14 = xor i32 %13, %0
  %15 = add i32 %11, %14
  %16 = xor i32 %5, -1
  %17 = and i32 %16, %4
  %18 = or i32 %16, %3
  %19 = xor i32 %17, %18
  %20 = shl i32 %19, 2
  %21 = sub i32 %15, %20
  %22 = xor i32 %1, -1
  %23 = or i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %22
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %0
  %29 = shl i32 %28, 1
  %30 = or i32 %22, %0
  %31 = and i32 %30, %27
  %32 = and i32 %22, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %8, %33
  %35 = or i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %2
  %38 = and i32 %2, %0
  %39 = xor i32 %38, %13
  %40 = shl i32 %39, 1
  %41 = xor i32 %1, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %8, %42
  %44 = xor i32 %9, -1
  %45 = or i32 %44, %7
  %46 = and i32 %27, %33
  %47 = xor i32 %2, %0
  %48 = or i32 %47, %22
  %49 = and i32 %23, %22
  %50 = or i32 %2, %1
  %51 = and i32 %50, %7
  %52 = and i32 %47, %41
  %53 = or i32 %27, %7
  %54 = and i32 %26, %7
  %55 = xor i32 %47, -1
  %56 = or i32 %41, %55
  %57 = and i32 %55, %22
  %58 = xor i32 %38, %30
  %59 = and i32 %47, %22
  %60 = and i32 %8, %0
  %61 = or i32 %60, %22
  %62 = xor i32 %30, -1
  %63 = or i32 %55, %62
  %64 = shl i32 %63, 1
  %65 = or i32 %8, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %1
  %68 = or i32 %55, %1
  %69 = and i32 %22, %2
  %70 = and i32 %69, %0
  %71 = or i32 %22, %2
  %72 = and i32 %71, %7
  %73 = or i32 %70, %72
  %74 = or i32 %47, %41
  %75 = shl i32 %74, 1
  %76 = or i32 %60, %42
  %77 = and i32 %26, %0
  %78 = xor i32 %9, %0
  %79 = or i32 %41, %66
  %80 = xor i32 %36, %2
  %81 = xor i32 %44, %0
  %82 = and i32 %2, %1
  %83 = or i32 %82, %32
  %84 = or i32 %24, %1
  %85 = add i32 %2, 1
  %86 = xor i32 %38, %50
  %87 = and i32 %1, %0
  %88 = xor i32 %50, %87
  %89 = and i32 %41, %2
  %90 = and i32 %35, %8
  %91 = or i32 %9, %7
  %92 = xor i32 %26, %0
  %93 = xor i32 %92, -1
  %94 = xor i32 %70, %93
  %95 = xor i32 %82, -1
  %96 = and i32 %95, %0
  %97 = shl i32 %96, 1
  %98 = add i32 %9, 1
  %99 = xor i32 %30, %2
  %100 = shl i32 %99, 1
  %101 = and i32 %41, %8
  %102 = and i32 %26, %30
  %103 = or i32 %66, %22
  %104 = shl i32 %103, 1
  %105 = xor i32 %24, %1
  %106 = xor i32 %65, %1
  %107 = shl i32 %50, 2
  %108 = xor i32 %60, -1
  %109 = or i32 %38, %1
  %110 = and i32 %50, %0
  %111 = shl i32 %110, 1
  %112 = or i32 %27, %62
  %113 = shl i32 %112, 1
  %114 = add i32 %47, 1
  %115 = and i32 %82, %0
  %116 = or i32 %115, %51
  %117 = shl i32 %116, 2
  %118 = and i32 %55, %42
  %119 = or i32 %38, %36
  %120 = and i32 %69, %7
  %121 = or i32 %26, %7
  %122 = xor i32 %121, -1
  %123 = or i32 %120, %122
  %124 = and i32 %47, %33
  %125 = and i32 %47, %42
  %126 = xor i32 %38, -1
  %127 = and i32 %126, %1
  %128 = or i32 %55, %42
  %129 = or i32 %38, %41
  %130 = or i32 %44, %0
  %131 = or i32 %47, %32
  %132 = or i32 %87, %8
  %133 = xor i32 %60, %1
  %134 = or i32 %26, %0
  %135 = xor i32 %70, %134
  %136 = xor i32 %23, %1
  %137 = and i32 %108, %1
  %138 = and i32 %95, %7
  %139 = shl i32 %138, 1
  %140 = xor i32 %50, -1
  %141 = or i32 %38, %140
  %142 = or i32 %32, %27
  %143 = or i32 %26, %62
  %144 = and i32 %23, %1
  %145 = shl i32 %62, 1
  %146 = or i32 %32, %55
  %147 = xor i32 %38, %35
  %148 = or i32 %47, %87
  %149 = and i32 %65, %42
  %150 = or i32 %66, %42
  %151 = or i32 %13, %0
  %152 = xor i32 %62, %2
  %153 = xor i32 %87, -1
  %154 = and i32 %55, %153
  %155 = xor i32 %65, %87
  %156 = xor i32 %32, %2
  %157 = xor i32 %23, %87
  %158 = or i32 %26, %87
  %159 = xor i32 %71, %0
  %160 = xor i32 %70, -1
  %161 = xor i32 %159, %160
  %162 = xor i32 %35, %2
  %163 = xor i32 %50, %0
  %164 = and i32 %47, %35
  %165 = or i32 %47, %42
  %166 = and i32 %30, %8
  %167 = and i32 %82, %7
  %168 = xor i32 %110, -1
  %169 = xor i32 %167, %168
  %170 = and i32 %27, %0
  %171 = or i32 %38, %12
  %172 = xor i32 %12, %0
  %173 = and i32 %33, %2
  %174 = and i32 %30, %2
  %175 = and i32 %27, %7
  %176 = xor i32 %72, %160
  %177 = or i32 %27, %36
  %178 = and i32 %26, %153
  %179 = xor i32 %60, %95
  %180 = or i32 %55, %22
  %181 = and i32 %26, %35
  %182 = and i32 %126, %42
  %183 = or i32 %87, %44
  %184 = or i32 %26, %36
  %185 = or i32 %82, %7
  %186 = or i32 %140, %0
  %187 = xor i32 %60, %9
  %188 = and i32 %8, %42
  %189 = add i32 %26, 1
  %190 = xor i32 %77, 2147483647
  %191 = xor i32 %190, %167
  %192 = shl i32 %191, 1
  %193 = or i32 %60, %1
  %194 = or i32 %38, %22
  %195 = and i32 %153, %2
  %196 = or i32 %60, %44
  %197 = shl i32 %196, 1
  %198 = or i32 %13, %7
  %199 = or i32 %32, %8
  %200 = and i32 %41, %108
  %201 = and i32 %108, %42
  %202 = add i32 %87, 1
  %203 = or i32 %95, %7
  %204 = or i32 %87, %24
  %205 = or i32 %9, %0
  %206 = shl i32 %205, 1
  %207 = and i32 %47, %30
  %208 = or i32 %95, %0
  %209 = and i32 %26, %33
  %210 = shl i32 %209, 1
  %211 = xor i32 %134, -1
  %212 = or i32 %70, %211
  %213 = xor i32 %38, %1
  %214 = shl i32 %213, 1
  %215 = and i32 %27, %153
  %216 = or i32 %82, %0
  %217 = or i32 %62, %2
  %218 = xor i32 %33, %2
  %219 = or i32 %60, %41
  %220 = shl i32 %22, 1
  %221 = and i32 %65, %1
  %222 = or i32 %38, %62
  %223 = or i32 %50, %7
  %224 = xor i32 %27, %0
  %225 = xor i32 %108, %1
  %226 = and i32 %35, %55
  %227 = shl i32 %226, 1
  %228 = or i32 %41, %24
  %229 = xor i32 %54, -1
  %230 = xor i32 %115, %229
  %231 = or i32 %87, %27
  %232 = shl i32 %231, 2
  %233 = and i32 %108, %22
  %234 = and i32 %42, %2
  %235 = and i32 %41, %126
  %236 = and i32 %55, %1
  %237 = and i32 %23, %41
  %238 = xor i32 %153, %2
  %239 = shl i32 %238, 1
  %240 = or i32 %60, %82
  %241 = or i32 %41, %8
  %242 = xor i32 %82, %0
  %243 = xor i32 %120, %121
  %244 = or i32 %167, %77
  %245 = xor i32 %115, %92
  %246 = or i32 %140, %7
  %247 = xor i32 %9, %87
  %248 = or i32 %8, %36
  %249 = and i32 %65, %41
  %250 = and i32 %13, %0
  %251 = xor i32 %87, %2
  %252 = add i32 %41, 1
  %253 = or i32 %87, %55
  %254 = or i32 %42, %2
  %255 = or i32 %12, %7
  %256 = shl i32 %255, 1
  %257 = and i32 %35, %2
  %258 = and i32 %9, %0
  %259 = xor i32 %32, %95
  %260 = shl i32 %259, 1
  %261 = or i32 %70, %159
  %262 = xor i32 %32, %13
  %263 = or i32 %115, %93
  %264 = add i32 %82, 1
  %265 = or i32 %115, %163
  %266 = or i32 %50, %0
  %267 = add i32 %50, 1
  %268 = or i32 %26, %32
  %269 = and i32 %71, %0
  %270 = or i32 %120, %269
  %271 = shl i32 %270, 1
  %272 = shl i32 %12, 1
  %273 = and i32 %140, %7
  %274 = and i32 %12, %7
  %275 = mul i32 %274, 15
  %276 = and i32 %12, %0
  %277 = shl i32 %276, 1
  %278 = and i32 %44, %7
  %279 = and i32 %44, %0
  %280 = shl i32 %279, 1
  %281 = or i32 %5, %4
  %282 = xor i32 %281, -1
  %283 = add i32 %281, 1
  %284 = and i32 %4, %3
  %285 = xor i32 %284, %5
  %286 = xor i32 %4, -1
  %287 = and i32 %286, %5
  %288 = or i32 %287, %3
  %289 = and i32 %5, %3
  %290 = and i32 %289, %286
  %291 = xor i32 %5, %3
  %292 = and i32 %291, %4
  %293 = or i32 %290, %292
  %294 = xor i32 %3, -1
  %295 = or i32 %294, %4
  %296 = xor i32 %295, -1
  %297 = xor i32 %5, %4
  %298 = xor i32 %297, -1
  %299 = or i32 %298, %296
  %300 = and i32 %18, %286
  %301 = or i32 %5, %3
  %302 = xor i32 %291, -1
  %303 = xor i32 %302, %4
  %304 = or i32 %4, %3
  %305 = and i32 %304, %5
  %306 = and i32 %5, %4
  %307 = xor i32 %306, -1
  %308 = and i32 %295, %302
  %309 = or i32 %297, %3
  %310 = xor i32 %4, %3
  %311 = or i32 %310, %298
  %312 = xor i32 %284, -1
  %313 = and i32 %302, %312
  %314 = and i32 %16, %3
  %315 = xor i32 %314, -1
  %316 = xor i32 %315, %4
  %317 = xor i32 %310, -1
  %318 = and i32 %281, %317
  %319 = and i32 %294, %4
  %320 = and i32 %319, %5
  %321 = or i32 %294, %5
  %322 = xor i32 %321, %286
  %323 = xor i32 %322, %320
  %324 = or i32 %306, %294
  %325 = xor i32 %319, %315
  %326 = and i32 %298, %3
  %327 = or i32 %306, %296
  %328 = xor i32 %17, %3
  %329 = or i32 %297, %294
  %330 = add i32 %310, 1
  %331 = and i32 %301, %286
  %332 = or i32 %282, %317
  %333 = add i32 %297, 1
  %334 = or i32 %291, %284
  %335 = xor i32 %301, -1
  %336 = and i32 %335, %286
  %337 = shl i32 %336, 2
  %338 = and i32 %314, %286
  %339 = shl i32 %338, 2
  %340 = and i32 %335, %4
  %341 = shl i32 %340, 1
  %342 = and i32 %314, %4
  %343 = xor i32 %18, -1
  %344 = and i32 %343, %286
  %345 = and i32 %343, %4
  %346 = mul i32 %345, -6
  %347 = and i32 %289, %4
  %348 = shl i32 %347, 1
  %349 = add i32 %30, -1
  %350 = add i32 %349, %33
  %351 = add i32 %350, %241
  %352 = add i32 %351, %250
  %353 = add i32 %352, %242
  %354 = add i32 %353, %228
  %355 = add i32 %354, %208
  %356 = add i32 %355, %92
  %357 = add i32 %356, %194
  %358 = add i32 %357, %149
  %359 = add i32 %358, %144
  %360 = add i32 %359, %137
  %361 = add i32 %360, %48
  %362 = add i32 %361, %301
  %363 = shl i32 %362, 1
  %364 = sub i32 %273, %163
  %365 = add i32 %364, %150
  %366 = sub i32 %365, %147
  %367 = sub i32 %366, %344
  %368 = sub i32 %367, %290
  %369 = mul i32 %368, 5
  %370 = sub i32 %167, %115
  %371 = mul i32 %370, 14
  %372 = sub i32 %278, %342
  %373 = mul i32 %372, 11
  %374 = add i32 %0, -3
  %375 = sub i32 %374, %1
  %376 = add i32 %375, %85
  %377 = add i32 %376, %41
  %378 = add i32 %377, %87
  %379 = add i32 %378, %35
  %380 = add i32 %379, %2
  %381 = sub i32 %380, %32
  %382 = add i32 %381, %202
  %383 = sub i32 %382, %220
  %384 = add i32 %383, %252
  %385 = sub i32 %384, %34
  %386 = sub i32 %385, %37
  %387 = add i32 %386, %43
  %388 = add i32 %387, %80
  %389 = add i32 %388, %89
  %390 = sub i32 %389, %90
  %391 = add i32 %390, %98
  %392 = add i32 %391, %101
  %393 = add i32 %392, %114
  %394 = add i32 %393, %24
  %395 = add i32 %394, %132
  %396 = sub i32 %395, %23
  %397 = sub i32 %396, %145
  %398 = add i32 %397, %152
  %399 = sub i32 %398, %156
  %400 = add i32 %399, %162
  %401 = sub i32 %400, %166
  %402 = add i32 %401, %173
  %403 = sub i32 %402, %174
  %404 = sub i32 %403, %65
  %405 = sub i32 %404, %188
  %406 = add i32 %405, %189
  %407 = sub i32 %406, %195
  %408 = add i32 %407, %199
  %409 = sub i32 %408, %26
  %410 = sub i32 %409, %217
  %411 = sub i32 %410, %82
  %412 = sub i32 %411, %218
  %413 = sub i32 %412, %9
  %414 = sub i32 %413, %234
  %415 = sub i32 %414, %47
  %416 = add i32 %415, %248
  %417 = add i32 %416, %251
  %418 = sub i32 %417, %254
  %419 = sub i32 %418, %257
  %420 = add i32 %419, %264
  %421 = add i32 %420, %267
  %422 = sub i32 %421, %25
  %423 = add i32 %422, %31
  %424 = sub i32 %423, %45
  %425 = add i32 %424, %46
  %426 = sub i32 %425, %49
  %427 = sub i32 %426, %51
  %428 = sub i32 %427, %52
  %429 = add i32 %428, %53
  %430 = add i32 %429, %54
  %431 = sub i32 %430, %56
  %432 = add i32 %431, %57
  %433 = add i32 %432, %58
  %434 = add i32 %433, %59
  %435 = add i32 %434, %61
  %436 = add i32 %435, %67
  %437 = add i32 %436, %68
  %438 = sub i32 %437, %76
  %439 = add i32 %438, %77
  %440 = add i32 %439, %78
  %441 = add i32 %440, %79
  %442 = add i32 %441, %81
  %443 = add i32 %442, %83
  %444 = add i32 %443, %84
  %445 = sub i32 %444, %86
  %446 = sub i32 %445, %88
  %447 = add i32 %446, %91
  %448 = sub i32 %447, %100
  %449 = add i32 %448, %102
  %450 = sub i32 %449, %105
  %451 = add i32 %450, %106
  %452 = add i32 %451, %107
  %453 = add i32 %452, %109
  %454 = add i32 %453, %118
  %455 = sub i32 %454, %119
  %456 = sub i32 %455, %124
  %457 = add i32 %456, %125
  %458 = add i32 %457, %127
  %459 = sub i32 %458, %128
  %460 = sub i32 %459, %129
  %461 = add i32 %460, %130
  %462 = sub i32 %461, %131
  %463 = add i32 %462, %133
  %464 = add i32 %463, %136
  %465 = add i32 %464, %141
  %466 = add i32 %465, %142
  %467 = sub i32 %466, %143
  %468 = sub i32 %467, %146
  %469 = sub i32 %468, %148
  %470 = add i32 %469, %151
  %471 = sub i32 %470, %154
  %472 = add i32 %471, %155
  %473 = sub i32 %472, %157
  %474 = sub i32 %473, %158
  %475 = add i32 %474, %164
  %476 = sub i32 %475, %165
  %477 = sub i32 %476, %170
  %478 = sub i32 %477, %171
  %479 = sub i32 %478, %172
  %480 = sub i32 %479, %175
  %481 = add i32 %480, %177
  %482 = add i32 %481, %178
  %483 = sub i32 %482, %179
  %484 = add i32 %483, %180
  %485 = add i32 %484, %181
  %486 = sub i32 %485, %182
  %487 = add i32 %486, %183
  %488 = sub i32 %487, %184
  %489 = add i32 %488, %185
  %490 = add i32 %489, %186
  %491 = sub i32 %490, %187
  %492 = add i32 %491, %193
  %493 = sub i32 %492, %198
  %494 = sub i32 %493, %200
  %495 = add i32 %494, %134
  %496 = sub i32 %495, %201
  %497 = add i32 %496, %203
  %498 = add i32 %497, %204
  %499 = sub i32 %498, %207
  %500 = add i32 %499, %215
  %501 = add i32 %500, %216
  %502 = add i32 %501, %219
  %503 = sub i32 %502, %221
  %504 = sub i32 %503, %222
  %505 = sub i32 %504, %223
  %506 = add i32 %505, %224
  %507 = add i32 %506, %225
  %508 = add i32 %507, %121
  %509 = sub i32 %508, %233
  %510 = sub i32 %509, %235
  %511 = add i32 %510, %236
  %512 = add i32 %511, %237
  %513 = sub i32 %512, %239
  %514 = sub i32 %513, %240
  %515 = add i32 %514, %246
  %516 = add i32 %515, %247
  %517 = add i32 %516, %249
  %518 = add i32 %517, %253
  %519 = add i32 %518, %258
  %520 = add i32 %519, %262
  %521 = add i32 %520, %266
  %522 = add i32 %521, %268
  %523 = sub i32 %522, %272
  %524 = add i32 %523, %4
  %525 = add i32 %524, %29
  %526 = sub i32 %525, %40
  %527 = sub i32 %526, %64
  %528 = add i32 %527, %73
  %529 = sub i32 %528, %75
  %530 = sub i32 %529, %94
  %531 = sub i32 %530, %97
  %532 = sub i32 %531, %104
  %533 = sub i32 %532, %111
  %534 = sub i32 %533, %113
  %535 = add i32 %534, %123
  %536 = add i32 %535, %135
  %537 = sub i32 %536, %139
  %538 = add i32 %537, %161
  %539 = sub i32 %538, %169
  %540 = add i32 %539, %176
  %541 = sub i32 %540, %197
  %542 = sub i32 %541, %206
  %543 = sub i32 %542, %210
  %544 = sub i32 %543, %212
  %545 = sub i32 %544, %214
  %546 = sub i32 %545, %227
  %547 = sub i32 %546, %230
  %548 = sub i32 %547, %232
  %549 = sub i32 %548, %243
  %550 = sub i32 %549, %244
  %551 = add i32 %550, %245
  %552 = sub i32 %551, %256
  %553 = sub i32 %552, %260
  %554 = sub i32 %553, %261
  %555 = sub i32 %554, %263
  %556 = sub i32 %555, %265
  %557 = add i32 %556, %275
  %558 = sub i32 %557, %277
  %559 = sub i32 %558, %280
  %560 = add i32 %559, %330
  %561 = add i32 %560, %16
  %562 = sub i32 %561, %117
  %563 = sub i32 %562, %271
  %564 = add i32 %563, %283
  %565 = add i32 %564, %285
  %566 = sub i32 %565, %305
  %567 = add i32 %566, %307
  %568 = add i32 %567, %297
  %569 = sub i32 %568, %287
  %570 = add i32 %569, %333
  %571 = add i32 %570, %371
  %572 = sub i32 %571, %192
  %573 = add i32 %572, %288
  %574 = sub i32 %573, %299
  %575 = sub i32 %574, %300
  %576 = add i32 %575, %303
  %577 = sub i32 %576, %308
  %578 = sub i32 %577, %309
  %579 = add i32 %578, %311
  %580 = sub i32 %579, %313
  %581 = add i32 %580, %316
  %582 = sub i32 %581, %318
  %583 = add i32 %582, %324
  %584 = sub i32 %583, %325
  %585 = sub i32 %584, %326
  %586 = sub i32 %585, %327
  %587 = sub i32 %586, %328
  %588 = sub i32 %587, %329
  %589 = sub i32 %588, %331
  %590 = add i32 %589, %332
  %591 = add i32 %590, %334
  %592 = add i32 %591, %293
  %593 = sub i32 %592, %323
  %594 = sub i32 %593, %337
  %595 = sub i32 %594, %339
  %596 = sub i32 %595, %341
  %597 = add i32 %596, %346
  %598 = sub i32 %597, %348
  %599 = add i32 %598, %373
  %600 = add i32 %599, %369
  %601 = add i32 %600, %363
  %602 = icmp eq i32 %21, %601
  %603 = select i1 %602, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %604 = tail call i32 @puts(i8* nonnull dereferenceable(1) %603)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
