; ModuleID = '../.././c_source_file/1356_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1356_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = add i32 %7, 1
  %9 = or i32 %4, %3
  %10 = and i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %1
  %13 = and i32 %12, %11
  %14 = xor i32 %1, -1
  %15 = and i32 %14, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %16, %2
  %18 = shl i32 %17, 1
  %19 = add i32 %8, %13
  %20 = add i32 %19, %18
  %21 = add i32 %20, %9
  %22 = xor i32 %3, -1
  %23 = xor i32 %4, %3
  %24 = or i32 %6, %3
  %25 = add i32 %9, 1
  %26 = and i32 %4, %3
  %27 = shl i32 %26, 1
  %28 = xor i32 %2, -1
  %29 = and i32 %28, %11
  %30 = and i32 %28, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %14
  %33 = xor i32 %0, -1
  %34 = and i32 %2, %1
  %35 = and i32 %34, %33
  %36 = or i32 %2, %1
  %37 = and i32 %36, %0
  %38 = or i32 %35, %37
  %39 = or i32 %1, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %34, -1
  %42 = or i32 %2, %0
  %43 = xor i32 %1, %0
  %44 = and i32 %42, %43
  %45 = or i32 %28, %1
  %46 = xor i32 %45, -1
  %47 = or i32 %10, %46
  %48 = xor i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %43, -1
  %53 = and i32 %51, %52
  %54 = or i32 %28, %0
  %55 = and i32 %54, %43
  %56 = or i32 %50, %43
  %57 = xor i32 %36, -1
  %58 = or i32 %57, %33
  %59 = or i32 %12, %15
  %60 = shl i32 %59, 1
  %61 = and i32 %49, %52
  %62 = xor i32 %12, -1
  %63 = or i32 %62, %33
  %64 = shl i32 %63, 1
  %65 = xor i32 %50, %36
  %66 = or i32 %28, %40
  %67 = or i32 %48, %52
  %68 = or i32 %34, %33
  %69 = shl i32 %68, 1
  %70 = and i32 %12, %0
  %71 = or i32 %35, %70
  %72 = xor i32 %30, %41
  %73 = and i32 %28, %1
  %74 = xor i32 %73, -1
  %75 = and i32 %74, %0
  %76 = xor i32 %54, -1
  %77 = or i32 %10, %76
  %78 = shl i32 %77, 1
  %79 = xor i32 %37, 2147483647
  %80 = xor i32 %79, %35
  %81 = and i32 %51, %14
  %82 = or i32 %49, %52
  %83 = or i32 %15, %2
  %84 = and i32 %42, %14
  %85 = or i32 %15, %28
  %86 = or i32 %30, %46
  %87 = or i32 %34, %15
  %88 = shl i32 %87, 1
  %89 = and i32 %12, %16
  %90 = or i32 %45, %0
  %91 = xor i32 %40, %2
  %92 = xor i32 %15, %74
  %93 = or i32 %49, %1
  %94 = and i32 %54, %14
  %95 = shl i32 %94, 1
  %96 = shl i32 %50, 1
  %97 = xor i32 %54, %1
  %98 = or i32 %50, %1
  %99 = and i32 %14, %2
  %100 = and i32 %99, %33
  %101 = or i32 %14, %2
  %102 = and i32 %101, %0
  %103 = xor i32 %102, -1
  %104 = xor i32 %100, %103
  %105 = and i32 %31, %52
  %106 = add i32 %45, 1
  %107 = xor i32 %11, %2
  %108 = or i32 %30, %52
  %109 = and i32 %34, %0
  %110 = xor i32 %36, %0
  %111 = xor i32 %110, -1
  %112 = xor i32 %109, %111
  %113 = and i32 %48, %52
  %114 = add i32 %10, 1
  %115 = or i32 %36, %33
  %116 = and i32 %62, %16
  %117 = or i32 %74, %0
  %118 = and i32 %49, %14
  %119 = xor i32 %74, %0
  %120 = xor i32 %62, %0
  %121 = shl i32 %120, 1
  %122 = xor i32 %30, %1
  %123 = or i32 %46, %33
  %124 = or i32 %14, %0
  %125 = xor i32 %124, -1
  %126 = or i32 %48, %125
  %127 = shl i32 %126, 1
  %128 = xor i32 %42, -1
  %129 = or i32 %128, %14
  %130 = and i32 %43, %2
  %131 = xor i32 %125, %2
  %132 = xor i32 %39, %2
  %133 = and i32 %11, %2
  %134 = or i32 %49, %125
  %135 = or i32 %73, %33
  %136 = or i32 %43, %76
  %137 = or i32 %15, %62
  %138 = and i32 %48, %14
  %139 = xor i32 %50, %1
  %140 = or i32 %10, %28
  %141 = xor i32 %45, %0
  %142 = shl i32 %141, 1
  %143 = and i32 %41, %33
  %144 = and i32 %39, %2
  %145 = xor i32 %10, %2
  %146 = and i32 %43, %51
  %147 = or i32 %48, %43
  %148 = or i32 %10, %2
  %149 = or i32 %10, %128
  %150 = or i32 %43, %128
  %151 = or i32 %45, %33
  %152 = or i32 %62, %40
  %153 = or i32 %109, %110
  %154 = or i32 %62, %0
  %155 = and i32 %48, %39
  %156 = and i32 %48, %16
  %157 = xor i32 %124, %2
  %158 = xor i32 %51, %1
  %159 = shl i32 %0, 1
  %160 = xor i32 %31, %1
  %161 = or i32 %62, %125
  %162 = and i32 %52, %2
  %163 = and i32 %99, %0
  %164 = xor i32 %101, %0
  %165 = xor i32 %164, -1
  %166 = xor i32 %163, %165
  %167 = add i32 %15, 1
  %168 = or i32 %12, %0
  %169 = xor i32 %163, %168
  %170 = or i32 %30, %43
  %171 = or i32 %163, %164
  %172 = or i32 %50, %57
  %173 = xor i32 %168, -1
  %174 = or i32 %163, %173
  %175 = or i32 %12, %33
  %176 = and i32 %16, %2
  %177 = or i32 %50, %14
  %178 = or i32 %57, %0
  %179 = shl i32 %178, 1
  %180 = and i32 %39, %62
  %181 = and i32 %54, %52
  %182 = or i32 %76, %1
  %183 = and i32 %62, %0
  %184 = and i32 %74, %33
  %185 = xor i32 %175, -1
  %186 = or i32 %100, %185
  %187 = xor i32 %73, %0
  %188 = or i32 %73, %15
  %189 = or i32 %52, %2
  %190 = or i32 %34, %0
  %191 = or i32 %10, %49
  %192 = and i32 %28, %16
  %193 = or i32 %15, %49
  %194 = or i32 %10, %57
  %195 = and i32 %48, %124
  %196 = and i32 %31, %1
  %197 = and i32 %124, %28
  %198 = and i32 %39, %49
  %199 = shl i32 %198, 1
  %200 = xor i32 %41, %0
  %201 = xor i32 %12, %0
  %202 = xor i32 %201, -1
  %203 = or i32 %109, %202
  %204 = or i32 %43, %28
  %205 = and i32 %124, %2
  %206 = and i32 %12, %39
  %207 = and i32 %62, %11
  %208 = or i32 %50, %40
  %209 = shl i32 %208, 2
  %210 = or i32 %43, %2
  %211 = or i32 %74, %33
  %212 = or i32 %128, %52
  %213 = and i32 %54, %1
  %214 = and i32 %49, %16
  %215 = xor i32 %57, %0
  %216 = xor i32 %101, -1
  %217 = or i32 %216, %0
  %218 = xor i32 %163, %217
  %219 = and i32 %39, %28
  %220 = and i32 %45, %0
  %221 = shl i32 %52, 1
  %222 = xor i32 %42, %10
  %223 = or i32 %76, %52
  %224 = xor i32 %42, %1
  %225 = and i32 %48, %43
  %226 = or i32 %48, %1
  %227 = xor i32 %15, %2
  %228 = and i32 %51, %1
  %229 = or i32 %125, %2
  %230 = and i32 %28, %52
  %231 = and i32 %12, %124
  %232 = xor i32 %109, %201
  %233 = or i32 %36, %0
  %234 = shl i32 %233, 1
  %235 = or i32 %41, %33
  %236 = and i32 %45, %33
  %237 = xor i32 %54, %10
  %238 = xor i32 %45, %10
  %239 = or i32 %50, %125
  %240 = add i32 %124, 1
  %241 = or i32 %30, %14
  %242 = and i32 %43, %28
  %243 = xor i32 %100, %175
  %244 = xor i32 %50, %39
  %245 = or i32 %43, %49
  %246 = and i32 %62, %33
  %247 = or i32 %28, %125
  %248 = xor i32 %50, %74
  %249 = or i32 %48, %40
  %250 = xor i32 %36, 2147483647
  %251 = or i32 %250, %0
  %252 = xor i32 %251, %109
  %253 = shl i32 %252, 1
  %254 = or i32 %12, %10
  %255 = or i32 %30, %34
  %256 = shl i32 %255, 1
  %257 = and i32 %41, %0
  %258 = or i32 %48, %10
  %259 = or i32 %41, %0
  %260 = and i32 %12, %33
  %261 = or i32 %109, %260
  %262 = and i32 %49, %1
  %263 = shl i32 %262, 1
  %264 = and i32 %57, %33
  %265 = mul i32 %264, -31
  %266 = and i32 %73, %33
  %267 = mul i32 %266, -7
  %268 = and i32 %57, %0
  %269 = and i32 %73, %0
  %270 = and i32 %46, %33
  %271 = mul i32 %35, -15
  %272 = and i32 %46, %0
  %273 = mul i32 %272, -9
  %274 = mul i32 %109, -14
  %275 = add i32 %227, %33
  %276 = add i32 %275, %45
  %277 = add i32 %276, %197
  %278 = add i32 %277, %42
  %279 = add i32 %278, %29
  %280 = add i32 %279, %257
  %281 = add i32 %280, %246
  %282 = add i32 %281, %225
  %283 = add i32 %282, %223
  %284 = add i32 %283, %213
  %285 = add i32 %284, %190
  %286 = add i32 %285, %180
  %287 = add i32 %286, %161
  %288 = add i32 %287, %150
  %289 = add i32 %288, %139
  %290 = add i32 %289, %134
  %291 = add i32 %290, %108
  %292 = add i32 %291, %105
  %293 = add i32 %292, %81
  %294 = add i32 %293, %72
  %295 = add i32 %294, %169
  %296 = add i32 %91, %144
  %297 = add i32 %296, %160
  %298 = add i32 %297, %196
  %299 = shl i32 %298, 2
  %300 = add i32 %269, %268
  %301 = mul i32 %300, -13
  %302 = add i32 %191, %1
  %303 = mul i32 %302, 5
  %304 = add i32 %295, %24
  %305 = add i32 %304, %80
  %306 = shl i32 %305, 1
  %307 = add i32 %270, -1
  %308 = add i32 %307, %224
  %309 = sub i32 %308, %113
  %310 = sub i32 %309, %89
  %311 = sub i32 %310, %84
  %312 = sub i32 %311, %55
  %313 = add i32 %312, %25
  %314 = mul i32 %313, 3
  %315 = sub nuw nsw i32 -2, %159
  %316 = add i32 %315, %114
  %317 = add i32 %316, %167
  %318 = add i32 %317, %240
  %319 = add i32 %318, %15
  %320 = add i32 %319, %22
  %321 = sub i32 %320, %12
  %322 = sub i32 %321, %34
  %323 = add i32 %322, %66
  %324 = add i32 %323, %54
  %325 = sub i32 %324, %34
  %326 = sub i32 %325, %83
  %327 = add i32 %326, %85
  %328 = add i32 %327, %106
  %329 = add i32 %328, %107
  %330 = add i32 %329, %62
  %331 = sub i32 %330, %130
  %332 = sub i32 %331, %131
  %333 = sub i32 %332, %132
  %334 = add i32 %333, %133
  %335 = sub i32 %334, %140
  %336 = add i32 %335, %145
  %337 = sub i32 %336, %148
  %338 = sub i32 %337, %36
  %339 = add i32 %338, %157
  %340 = add i32 %339, %162
  %341 = sub i32 %340, %176
  %342 = add i32 %341, %189
  %343 = sub i32 %342, %192
  %344 = add i32 %343, %204
  %345 = sub i32 %344, %205
  %346 = add i32 %345, %128
  %347 = add i32 %346, %210
  %348 = sub i32 %347, %219
  %349 = sub i32 %348, %221
  %350 = sub i32 %349, %229
  %351 = add i32 %350, %230
  %352 = sub i32 %351, %242
  %353 = add i32 %352, %247
  %354 = add i32 %353, %4
  %355 = add i32 %354, %32
  %356 = add i32 %355, %44
  %357 = add i32 %356, %47
  %358 = sub i32 %357, %53
  %359 = sub i32 %358, %56
  %360 = add i32 %359, %58
  %361 = add i32 %360, %61
  %362 = add i32 %361, %65
  %363 = add i32 %362, %67
  %364 = add i32 %363, %75
  %365 = add i32 %364, %82
  %366 = add i32 %365, %86
  %367 = sub i32 %366, %90
  %368 = sub i32 %367, %92
  %369 = sub i32 %368, %93
  %370 = sub i32 %369, %96
  %371 = sub i32 %370, %97
  %372 = add i32 %371, %98
  %373 = add i32 %372, %115
  %374 = sub i32 %373, %116
  %375 = add i32 %374, %117
  %376 = add i32 %375, %118
  %377 = sub i32 %376, %119
  %378 = add i32 %377, %122
  %379 = sub i32 %378, %123
  %380 = add i32 %379, %129
  %381 = sub i32 %380, %135
  %382 = add i32 %381, %136
  %383 = add i32 %382, %137
  %384 = add i32 %383, %138
  %385 = sub i32 %384, %143
  %386 = sub i32 %385, %146
  %387 = sub i32 %386, %147
  %388 = add i32 %387, %37
  %389 = add i32 %388, %70
  %390 = sub i32 %389, %149
  %391 = sub i32 %390, %151
  %392 = add i32 %391, %152
  %393 = sub i32 %392, %154
  %394 = sub i32 %393, %155
  %395 = sub i32 %394, %156
  %396 = sub i32 %395, %158
  %397 = sub i32 %396, %170
  %398 = add i32 %397, %172
  %399 = add i32 %398, %175
  %400 = add i32 %399, %177
  %401 = add i32 %400, %181
  %402 = sub i32 %401, %182
  %403 = sub i32 %402, %183
  %404 = sub i32 %403, %184
  %405 = add i32 %404, %187
  %406 = sub i32 %405, %188
  %407 = sub i32 %406, %193
  %408 = sub i32 %407, %194
  %409 = add i32 %408, %195
  %410 = sub i32 %409, %200
  %411 = add i32 %410, %206
  %412 = sub i32 %411, %207
  %413 = add i32 %412, %211
  %414 = add i32 %413, %212
  %415 = add i32 %414, %214
  %416 = sub i32 %415, %215
  %417 = add i32 %416, %220
  %418 = sub i32 %417, %222
  %419 = sub i32 %418, %226
  %420 = sub i32 %419, %228
  %421 = sub i32 %420, %231
  %422 = add i32 %421, %235
  %423 = sub i32 %422, %236
  %424 = sub i32 %423, %237
  %425 = sub i32 %424, %238
  %426 = sub i32 %425, %239
  %427 = add i32 %426, %241
  %428 = add i32 %427, %244
  %429 = sub i32 %428, %245
  %430 = sub i32 %429, %110
  %431 = sub i32 %430, %248
  %432 = add i32 %431, %249
  %433 = sub i32 %432, %201
  %434 = sub i32 %433, %254
  %435 = sub i32 %434, %258
  %436 = add i32 %435, %259
  %437 = sub i32 %436, %23
  %438 = add i32 %437, %7
  %439 = sub i32 %438, %38
  %440 = sub i32 %439, %60
  %441 = sub i32 %440, %64
  %442 = sub i32 %441, %69
  %443 = sub i32 %442, %71
  %444 = sub i32 %443, %78
  %445 = sub i32 %444, %88
  %446 = sub i32 %445, %95
  %447 = add i32 %446, %104
  %448 = sub i32 %447, %112
  %449 = sub i32 %448, %121
  %450 = sub i32 %449, %127
  %451 = sub i32 %450, %142
  %452 = sub i32 %451, %153
  %453 = sub i32 %452, %166
  %454 = add i32 %453, %171
  %455 = add i32 %454, %174
  %456 = sub i32 %455, %179
  %457 = sub i32 %456, %186
  %458 = sub i32 %457, %199
  %459 = sub i32 %458, %203
  %460 = sub i32 %459, %209
  %461 = add i32 %460, %218
  %462 = sub i32 %461, %232
  %463 = sub i32 %462, %234
  %464 = add i32 %463, %243
  %465 = sub i32 %464, %256
  %466 = sub i32 %465, %261
  %467 = sub i32 %466, %263
  %468 = add i32 %467, %265
  %469 = add i32 %468, %267
  %470 = add i32 %469, %271
  %471 = add i32 %470, %273
  %472 = add i32 %471, %274
  %473 = sub i32 %472, %27
  %474 = add i32 %473, %301
  %475 = add i32 %474, %303
  %476 = sub i32 %475, %253
  %477 = add i32 %476, %299
  %478 = add i32 %477, %314
  %479 = add i32 %478, %306
  %480 = icmp eq i32 %21, %479
  %481 = select i1 %480, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %482 = tail call i32 @puts(i8* nonnull dereferenceable(1) %481)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
