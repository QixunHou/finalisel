digraph "DFG for'crackme' function" {
	Node0x1b57160[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1b571d0[shape=record, label="  %6 = xor i32 %2, -1"];
	Node0x1b57240[shape=record, label="  %7 = and i32 %6, %1"];
	Node0x1b572b0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1b57350[shape=record, label="  %9 = mul i32 %8, 5"];
	Node0x1b573c0[shape=record, label="  %10 = add i32 %9, %5"];
	Node0x1b57430[shape=record, label="  %11 = or i32 %3, %0"];
	Node0x1b574a0[shape=record, label="  %12 = sub i32 %10, %11"];
	Node0x1b57510[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x1b57580[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1b575f0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1b57660[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x1b576d0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1b57770[shape=record, label="  %18 = mul i32 %17, 6"];
	Node0x1b577e0[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0x1b57880[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x1b578f0[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x1b57960[shape=record, label="  %22 = shl i32 %11, 1"];
	Node0x1b57a00[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x1b57aa0[shape=record, label="  %24 = xor i32 %0, 1073741823"];
	Node0x1b57b10[shape=record, label="  %25 = xor i32 %3, -1"];
	Node0x1b57b80[shape=record, label="  %26 = and i32 %25, %0"];
	Node0x1b57bf0[shape=record, label="  %27 = and i32 %24, %3"];
	Node0x1b57c90[shape=record, label="  %28 = shl i32 %27, 2"];
	Node0x1b57d00[shape=record, label="  %29 = sub i32 %2, %26"];
	Node0x1b57d70[shape=record, label="  %30 = sub i32 %29, %21"];
	Node0x1b57de0[shape=record, label="  %31 = mul i32 %30, 5"];
	Node0x1b57e50[shape=record, label="  %32 = add i32 %5, %0"];
	Node0x1b580d0[shape=record, label="  %33 = add i32 %32, %2"];
	Node0x1b58140[shape=record, label="  %34 = sub i32 %33, %13"];
	Node0x1b581b0[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x1b58220[shape=record, label="  %36 = add i32 %35, %16"];
	Node0x1b58290[shape=record, label="  %37 = add i32 %36, %7"];
	Node0x1b58300[shape=record, label="  %38 = add i32 %37, %18"];
	Node0x1b58370[shape=record, label="  %39 = sub i32 %38, %19"];
	Node0x1b583e0[shape=record, label="  %40 = add i32 %39, %21"];
	Node0x1b58450[shape=record, label="  %41 = add i32 %40, %20"];
	Node0x1b584c0[shape=record, label="  %42 = sub i32 %41, %28"];
	Node0x1b58530[shape=record, label="  %43 = sub i32 %42, %23"];
	Node0x1b585a0[shape=record, label="  %44 = add i32 %43, %31"];
	Node0x1b58610[shape=record, label="  %45 = icmp eq i32 %12, %44"];
	Node0x1af7268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b58ab0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x1b58b00[shape=record, label="  ret void"];
	Node0x1b57160 -> Node0x1b571d0;
	Node0x1b571d0 -> Node0x1b57240;
	Node0x1b57240 -> Node0x1b572b0;
	Node0x1b572b0 -> Node0x1b57350;
	Node0x1b57350 -> Node0x1b573c0;
	Node0x1b573c0 -> Node0x1b57430;
	Node0x1b57430 -> Node0x1b574a0;
	Node0x1b574a0 -> Node0x1b57510;
	Node0x1b57510 -> Node0x1b57580;
	Node0x1b57580 -> Node0x1b575f0;
	Node0x1b575f0 -> Node0x1b57660;
	Node0x1b57660 -> Node0x1b576d0;
	Node0x1b576d0 -> Node0x1b57770;
	Node0x1b57770 -> Node0x1b577e0;
	Node0x1b577e0 -> Node0x1b57880;
	Node0x1b57880 -> Node0x1b578f0;
	Node0x1b578f0 -> Node0x1b57960;
	Node0x1b57960 -> Node0x1b57a00;
	Node0x1b57a00 -> Node0x1b57aa0;
	Node0x1b57aa0 -> Node0x1b57b10;
	Node0x1b57b10 -> Node0x1b57b80;
	Node0x1b57b80 -> Node0x1b57bf0;
	Node0x1b57bf0 -> Node0x1b57c90;
	Node0x1b57c90 -> Node0x1b57d00;
	Node0x1b57d00 -> Node0x1b57d70;
	Node0x1b57d70 -> Node0x1b57de0;
	Node0x1b57de0 -> Node0x1b57e50;
	Node0x1b57e50 -> Node0x1b580d0;
	Node0x1b580d0 -> Node0x1b58140;
	Node0x1b58140 -> Node0x1b581b0;
	Node0x1b581b0 -> Node0x1b58220;
	Node0x1b58220 -> Node0x1b58290;
	Node0x1b58290 -> Node0x1b58300;
	Node0x1b58300 -> Node0x1b58370;
	Node0x1b58370 -> Node0x1b583e0;
	Node0x1b583e0 -> Node0x1b58450;
	Node0x1b58450 -> Node0x1b584c0;
	Node0x1b584c0 -> Node0x1b58530;
	Node0x1b58530 -> Node0x1b585a0;
	Node0x1b585a0 -> Node0x1b58610;
	Node0x1b58610 -> Node0x1af7268;
	Node0x1af7268 -> Node0x1b58ab0;
	Node0x1b58ab0 -> Node0x1b58b00;
edge [color=red]
	Node0x1b571d0 -> Node0x1b57240;
	Node0x1b57240 -> Node0x1b572b0;
	Node0x1b572b0 -> Node0x1b57350;
	Node0x1b57350 -> Node0x1b573c0;
	Node0x1b57160 -> Node0x1b573c0;
	Node0x1b573c0 -> Node0x1b574a0;
	Node0x1b57430 -> Node0x1b574a0;
	Node0x1b57580 -> Node0x1b575f0;
	Node0x1b57660 -> Node0x1b576d0;
	Node0x1b576d0 -> Node0x1b57770;
	Node0x1b577e0 -> Node0x1b57880;
	Node0x1b57430 -> Node0x1b57960;
	Node0x1b57960 -> Node0x1b57a00;
	Node0x1b57b10 -> Node0x1b57b80;
	Node0x1b57aa0 -> Node0x1b57bf0;
	Node0x1b57bf0 -> Node0x1b57c90;
	Node0x1b57b80 -> Node0x1b57d00;
	Node0x1b57d00 -> Node0x1b57d70;
	Node0x1b578f0 -> Node0x1b57d70;
	Node0x1b57d70 -> Node0x1b57de0;
	Node0x1b57160 -> Node0x1b57e50;
	Node0x1b57e50 -> Node0x1b580d0;
	Node0x1b580d0 -> Node0x1b58140;
	Node0x1b57510 -> Node0x1b58140;
	Node0x1b58140 -> Node0x1b581b0;
	Node0x1b575f0 -> Node0x1b581b0;
	Node0x1b581b0 -> Node0x1b58220;
	Node0x1b57660 -> Node0x1b58220;
	Node0x1b58220 -> Node0x1b58290;
	Node0x1b57240 -> Node0x1b58290;
	Node0x1b58290 -> Node0x1b58300;
	Node0x1b57770 -> Node0x1b58300;
	Node0x1b58300 -> Node0x1b58370;
	Node0x1b577e0 -> Node0x1b58370;
	Node0x1b58370 -> Node0x1b583e0;
	Node0x1b578f0 -> Node0x1b583e0;
	Node0x1b583e0 -> Node0x1b58450;
	Node0x1b57880 -> Node0x1b58450;
	Node0x1b58450 -> Node0x1b584c0;
	Node0x1b57c90 -> Node0x1b584c0;
	Node0x1b584c0 -> Node0x1b58530;
	Node0x1b57a00 -> Node0x1b58530;
	Node0x1b58530 -> Node0x1b585a0;
	Node0x1b57de0 -> Node0x1b585a0;
	Node0x1b574a0 -> Node0x1b58610;
	Node0x1b585a0 -> Node0x1b58610;
	Node0x1b58610 -> Node0x1af7268;
	Node0x1af7268 -> Node0x1b58ab0;
}
