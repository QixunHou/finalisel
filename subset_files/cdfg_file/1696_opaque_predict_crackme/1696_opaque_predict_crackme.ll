; ModuleID = '../.././c_source_file/1696_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1696_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = xor i32 %4, -1
  %8 = or i32 %7, %3
  %9 = xor i32 %2, -1
  %10 = or i32 %1, %0
  %11 = and i32 %10, %9
  %12 = shl i32 %11, 1
  %13 = add i32 %6, %12
  %14 = sub i32 %8, %13
  %15 = shl i32 %6, 1
  %16 = or i32 %15, 1
  %17 = shl i32 %8, 1
  %18 = xor i32 %17, -2
  %19 = and i32 %7, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %1, -1
  %22 = and i32 %21, %0
  %23 = and i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = xor i32 %22, %24
  %26 = shl i32 %25, 1
  %27 = or i32 %9, %0
  %28 = and i32 %27, %1
  %29 = shl i32 %28, 1
  %30 = or i32 %21, %0
  %31 = xor i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %30, %32
  %34 = and i32 %9, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %1, %0
  %37 = and i32 %36, %35
  %38 = xor i32 %10, -1
  %39 = or i32 %38, %2
  %40 = or i32 %32, %38
  %41 = xor i32 %36, -1
  %42 = or i32 %34, %41
  %43 = xor i32 %24, %0
  %44 = xor i32 %2, %1
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %38
  %47 = xor i32 %0, -1
  %48 = and i32 %23, %47
  %49 = and i32 %44, %0
  %50 = xor i32 %48, -1
  %51 = xor i32 %49, %50
  %52 = or i32 %36, %2
  %53 = and i32 %21, %2
  %54 = and i32 %53, %47
  %55 = or i32 %44, %47
  %56 = xor i32 %55, -1
  %57 = or i32 %54, %56
  %58 = or i32 %2, %1
  %59 = and i32 %23, %0
  %60 = xor i32 %44, %0
  %61 = xor i32 %59, %60
  %62 = and i32 %9, %1
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %47
  %65 = xor i32 %54, %55
  %66 = or i32 %31, %21
  %67 = and i32 %44, %47
  %68 = xor i32 %67, 2147483647
  %69 = xor i32 %68, %59
  %70 = xor i32 %27, -1
  %71 = or i32 %70, %1
  %72 = xor i32 %22, -1
  %73 = and i32 %32, %72
  %74 = or i32 %2, %0
  %75 = and i32 %74, %41
  %76 = shl i32 %75, 1
  %77 = and i32 %35, %41
  %78 = xor i32 %30, -1
  %79 = or i32 %9, %78
  %80 = and i32 %10, %32
  %81 = xor i32 %74, %1
  %82 = xor i32 %38, %2
  %83 = shl i32 %82, 1
  %84 = and i32 %1, %0
  %85 = or i32 %44, %84
  %86 = and i32 %35, %21
  %87 = or i32 %84, %32
  %88 = or i32 %70, %41
  %89 = xor i32 %23, %0
  %90 = and i32 %74, %1
  %91 = and i32 %53, %0
  %92 = or i32 %44, %0
  %93 = xor i32 %91, %92
  %94 = and i32 %58, %47
  %95 = or i32 %59, %94
  %96 = and i32 %58, %0
  %97 = or i32 %48, %96
  %98 = and i32 %45, %47
  %99 = or i32 %9, %1
  %100 = xor i32 %34, %99
  %101 = or i32 %24, %47
  %102 = and i32 %10, %45
  %103 = or i32 %31, %41
  %104 = xor i32 %99, -1
  %105 = or i32 %34, %104
  %106 = and i32 %31, %1
  %107 = or i32 %34, %36
  %108 = xor i32 %60, -1
  %109 = or i32 %59, %108
  %110 = shl i32 %109, 1
  %111 = or i32 %22, %45
  %112 = shl i32 %111, 1
  %113 = xor i32 %84, -1
  %114 = xor i32 %113, %2
  %115 = and i32 %24, %0
  %116 = shl i32 %115, 1
  %117 = or i32 %45, %78
  %118 = and i32 %99, %47
  %119 = and i32 %45, %72
  %120 = and i32 %30, %9
  %121 = xor i32 %58, -1
  %122 = xor i32 %121, %0
  %123 = or i32 %36, %70
  %124 = and i32 %2, %0
  %125 = or i32 %124, %36
  %126 = xor i32 %70, %1
  %127 = or i32 %41, %2
  %128 = and i32 %44, %30
  %129 = or i32 %32, %41
  %130 = and i32 %10, %2
  %131 = xor i32 %22, %2
  %132 = and i32 %31, %72
  %133 = and i32 %31, %41
  %134 = or i32 %84, %70
  %135 = xor i32 %99, %84
  %136 = and i32 %31, %113
  %137 = xor i32 %63, %0
  %138 = shl i32 %137, 1
  %139 = or i32 %32, %78
  %140 = and i32 %27, %36
  %141 = and i32 %9, %113
  %142 = add i32 %44, 1
  %143 = or i32 %44, %22
  %144 = or i32 %22, %9
  %145 = and i32 %32, %21
  %146 = and i32 %45, %113
  %147 = or i32 %121, %47
  %148 = or i32 %124, %1
  %149 = shl i32 %148, 1
  %150 = or i32 %44, %38
  %151 = or i32 %104, %0
  %152 = shl i32 %9, 1
  %153 = xor i32 %35, %1
  %154 = xor i32 %34, %1
  %155 = and i32 %9, %72
  %156 = or i32 %31, %38
  %157 = xor i32 %124, %63
  %158 = or i32 %84, %121
  %159 = xor i32 %74, -1
  %160 = or i32 %159, %1
  %161 = and i32 %36, %9
  %162 = or i32 %45, %0
  %163 = and i32 %35, %1
  %164 = xor i32 %30, %2
  %165 = xor i32 %124, -1
  %166 = and i32 %165, %1
  %167 = or i32 %58, %47
  %168 = or i32 %48, %49
  %169 = xor i32 %92, -1
  %170 = or i32 %91, %169
  %171 = xor i32 %159, %1
  %172 = or i32 %124, %121
  %173 = and i32 %165, %21
  %174 = or i32 %104, %47
  %175 = xor i32 %59, -1
  %176 = xor i32 %94, %175
  %177 = xor i32 %58, %0
  %178 = xor i32 %177, %175
  %179 = xor i32 %124, %10
  %180 = or i32 %84, %2
  %181 = xor i32 %78, %2
  %182 = shl i32 %181, 1
  %183 = or i32 %34, %1
  %184 = and i32 %30, %45
  %185 = or i32 %36, %32
  %186 = or i32 %124, %41
  %187 = and i32 %30, %2
  %188 = xor i32 %165, %1
  %189 = or i32 %34, %23
  %190 = or i32 %22, %2
  %191 = xor i32 %124, %30
  %192 = or i32 %84, %104
  %193 = and i32 %24, %47
  %194 = shl i32 %193, 1
  %195 = or i32 %36, %9
  %196 = and i32 %31, %30
  %197 = xor i32 %104, %0
  %198 = shl i32 %159, 1
  %199 = add i32 %0, 1
  %200 = xor i32 %99, %0
  %201 = and i32 %36, %32
  %202 = shl i32 %201, 1
  %203 = or i32 %23, %47
  %204 = or i32 %36, %159
  %205 = shl i32 %204, 2
  %206 = or i32 %59, %67
  %207 = and i32 %99, %0
  %208 = shl i32 %207, 2
  %209 = or i32 %124, %78
  %210 = and i32 %44, %72
  %211 = shl i32 %210, 1
  %212 = and i32 %32, %1
  %213 = xor i32 %34, %24
  %214 = xor i32 %58, %84
  %215 = or i32 %78, %2
  %216 = xor i32 %62, %0
  %217 = and i32 %27, %41
  %218 = and i32 %9, %41
  %219 = or i32 %31, %22
  %220 = xor i32 %27, %84
  %221 = add i32 %30, 1
  %222 = or i32 %44, %78
  %223 = or i32 %91, %60
  %224 = or i32 %70, %21
  %225 = or i32 %84, %159
  %226 = or i32 %31, %78
  %227 = and i32 %74, %36
  %228 = xor i32 %91, %108
  %229 = and i32 %31, %21
  %230 = xor i32 %84, %2
  %231 = or i32 %21, %2
  %232 = xor i32 %231, %0
  %233 = xor i32 %232, -1
  %234 = xor i32 %91, %233
  %235 = or i32 %9, %41
  %236 = xor i32 %10, %2
  %237 = and i32 %113, %2
  %238 = or i32 %159, %21
  %239 = shl i32 %238, 1
  %240 = and i32 %231, %47
  %241 = xor i32 %240, 2147483647
  %242 = xor i32 %241, %91
  %243 = shl i32 %242, 1
  %244 = xor i32 %45, %0
  %245 = shl i32 %244, 1
  %246 = shl i32 %70, 1
  %247 = or i32 %34, %21
  %248 = and i32 %63, %47
  %249 = or i32 %121, %0
  %250 = or i32 %124, %38
  %251 = and i32 %32, %113
  %252 = or i32 %124, %21
  %253 = and i32 %31, %36
  %254 = and i32 %44, %113
  %255 = or i32 %22, %32
  %256 = xor i32 %124, %58
  %257 = shl i32 %256, 1
  %258 = or i32 %99, %47
  %259 = and i32 %36, %165
  %260 = or i32 %58, %0
  %261 = shl i32 %260, 1
  %262 = or i32 %62, %0
  %263 = shl i32 %262, 1
  %264 = or i32 %9, %38
  %265 = or i32 %62, %22
  %266 = and i32 %36, %2
  %267 = and i32 %45, %0
  %268 = xor i32 %96, %50
  %269 = or i32 %59, %177
  %270 = shl i32 %269, 1
  %271 = xor i32 %74, %84
  %272 = and i32 %231, %0
  %273 = or i32 %54, %272
  %274 = add i32 %99, 1
  %275 = or i32 %23, %22
  %276 = xor i32 %72, %2
  %277 = or i32 %63, %0
  %278 = or i32 %32, %1
  %279 = xor i32 %27, %1
  %280 = and i32 %72, %2
  %281 = and i32 %32, %41
  %282 = shl i32 %281, 1
  %283 = or i32 %91, %240
  %284 = shl i32 %283, 1
  %285 = or i32 %24, %0
  %286 = or i32 %99, %0
  %287 = or i32 %45, %47
  %288 = shl i32 %287, 1
  %289 = or i32 %62, %47
  %290 = or i32 %84, %45
  %291 = or i32 %159, %41
  %292 = or i32 %23, %0
  %293 = or i32 %91, %232
  %294 = xor i32 %124, %1
  %295 = shl i32 %34, 1
  %296 = and i32 %63, %0
  %297 = and i32 %31, %10
  %298 = or i32 %31, %36
  %299 = or i32 %31, %1
  %300 = shl i32 %299, 1
  %301 = and i32 %27, %21
  %302 = xor i32 %22, %63
  %303 = or i32 %31, %84
  %304 = or i32 %124, %62
  %305 = and i32 %121, %47
  %306 = shl i32 %305, 3
  %307 = and i32 %62, %47
  %308 = mul i32 %307, 19
  %309 = and i32 %121, %0
  %310 = and i32 %62, %0
  %311 = mul i32 %310, 10
  %312 = and i32 %104, %47
  %313 = mul i32 %312, 21
  %314 = mul i32 %48, 9
  %315 = and i32 %104, %0
  %316 = shl i32 %315, 3
  %317 = shl i32 %59, 4
  %318 = add i32 %140, %164
  %319 = sub i32 %318, %189
  %320 = sub i32 %319, %103
  %321 = sub i32 %320, %42
  %322 = mul i32 %321, 5
  %323 = add i32 %215, %165
  %324 = add i32 %323, %217
  %325 = add i32 %324, %301
  %326 = shl i32 %325, 2
  %327 = add i32 %57, %107
  %328 = mul i32 %327, 3
  %329 = add i32 %1, -2
  %330 = add i32 %329, %24
  %331 = add i32 %330, %218
  %332 = sub i32 %331, %3
  %333 = add i32 %332, %279
  %334 = add i32 %333, %49
  %335 = add i32 %334, %219
  %336 = add i32 %335, %177
  %337 = add i32 %336, %184
  %338 = add i32 %337, %173
  %339 = add i32 %338, %171
  %340 = add i32 %339, %150
  %341 = add i32 %340, %146
  %342 = add i32 %341, %143
  %343 = add i32 %342, %122
  %344 = add i32 %343, %118
  %345 = add i32 %344, %102
  %346 = add i32 %345, %90
  %347 = add i32 %346, %7
  %348 = add i32 %347, %228
  %349 = add i32 %348, %97
  %350 = add i32 %349, %69
  %351 = shl i32 %350, 1
  %352 = add i32 %199, %0
  %353 = add i32 %352, %21
  %354 = sub i32 %353, %30
  %355 = sub i32 %354, %36
  %356 = add i32 %355, %10
  %357 = add i32 %356, %113
  %358 = sub i32 %357, %84
  %359 = add i32 %358, %221
  %360 = sub i32 %359, %2
  %361 = add i32 %360, %41
  %362 = add i32 %361, %3
  %363 = sub i32 %362, %27
  %364 = sub i32 %363, %39
  %365 = sub i32 %364, %52
  %366 = sub i32 %365, %58
  %367 = sub i32 %366, %62
  %368 = sub i32 %367, %79
  %369 = add i32 %368, %114
  %370 = add i32 %369, %35
  %371 = add i32 %370, %120
  %372 = sub i32 %371, %127
  %373 = sub i32 %372, %124
  %374 = add i32 %373, %130
  %375 = add i32 %374, %131
  %376 = add i32 %375, %44
  %377 = sub i32 %376, %141
  %378 = add i32 %377, %142
  %379 = sub i32 %378, %144
  %380 = sub i32 %379, %152
  %381 = sub i32 %380, %155
  %382 = add i32 %381, %63
  %383 = sub i32 %382, %161
  %384 = add i32 %383, %180
  %385 = add i32 %384, %187
  %386 = sub i32 %385, %99
  %387 = add i32 %386, %190
  %388 = add i32 %387, %23
  %389 = sub i32 %388, %195
  %390 = sub i32 %389, %230
  %391 = sub i32 %390, %235
  %392 = add i32 %391, %236
  %393 = sub i32 %392, %237
  %394 = sub i32 %393, %74
  %395 = sub i32 %394, %264
  %396 = add i32 %395, %266
  %397 = add i32 %396, %274
  %398 = sub i32 %397, %276
  %399 = sub i32 %398, %280
  %400 = add i32 %399, %32
  %401 = sub i32 %400, %31
  %402 = add i32 %401, %33
  %403 = add i32 %402, %37
  %404 = sub i32 %403, %40
  %405 = add i32 %404, %43
  %406 = sub i32 %405, %46
  %407 = sub i32 %406, %64
  %408 = sub i32 %407, %66
  %409 = add i32 %408, %71
  %410 = sub i32 %409, %73
  %411 = sub i32 %410, %77
  %412 = add i32 %411, %80
  %413 = add i32 %412, %81
  %414 = sub i32 %413, %83
  %415 = add i32 %414, %85
  %416 = add i32 %415, %86
  %417 = sub i32 %416, %87
  %418 = add i32 %417, %55
  %419 = add i32 %418, %88
  %420 = sub i32 %419, %89
  %421 = add i32 %420, %98
  %422 = sub i32 %421, %100
  %423 = sub i32 %422, %101
  %424 = sub i32 %423, %105
  %425 = add i32 %424, %106
  %426 = sub i32 %425, %117
  %427 = sub i32 %426, %119
  %428 = sub i32 %427, %123
  %429 = sub i32 %428, %125
  %430 = sub i32 %429, %126
  %431 = sub i32 %430, %128
  %432 = sub i32 %431, %129
  %433 = sub i32 %432, %132
  %434 = add i32 %433, %133
  %435 = sub i32 %434, %134
  %436 = sub i32 %435, %135
  %437 = add i32 %436, %136
  %438 = add i32 %437, %139
  %439 = add i32 %438, %96
  %440 = sub i32 %439, %145
  %441 = sub i32 %440, %147
  %442 = add i32 %441, %151
  %443 = sub i32 %442, %153
  %444 = sub i32 %443, %154
  %445 = add i32 %444, %156
  %446 = sub i32 %445, %157
  %447 = sub i32 %446, %158
  %448 = sub i32 %447, %160
  %449 = add i32 %448, %162
  %450 = sub i32 %449, %163
  %451 = add i32 %450, %166
  %452 = sub i32 %451, %167
  %453 = add i32 %452, %172
  %454 = sub i32 %453, %174
  %455 = sub i32 %454, %179
  %456 = sub i32 %455, %182
  %457 = add i32 %456, %183
  %458 = sub i32 %457, %185
  %459 = sub i32 %458, %186
  %460 = sub i32 %459, %188
  %461 = add i32 %460, %191
  %462 = sub i32 %461, %192
  %463 = sub i32 %462, %196
  %464 = sub i32 %463, %197
  %465 = sub i32 %464, %198
  %466 = sub i32 %465, %200
  %467 = sub i32 %466, %203
  %468 = sub i32 %467, %209
  %469 = add i32 %468, %212
  %470 = sub i32 %469, %213
  %471 = sub i32 %470, %214
  %472 = add i32 %471, %216
  %473 = add i32 %472, %220
  %474 = add i32 %473, %67
  %475 = add i32 %474, %222
  %476 = add i32 %475, %224
  %477 = add i32 %476, %225
  %478 = add i32 %477, %226
  %479 = add i32 %478, %227
  %480 = sub i32 %479, %229
  %481 = add i32 %480, %60
  %482 = sub i32 %481, %246
  %483 = add i32 %482, %247
  %484 = add i32 %483, %248
  %485 = add i32 %484, %249
  %486 = add i32 %485, %250
  %487 = sub i32 %486, %251
  %488 = sub i32 %487, %252
  %489 = add i32 %488, %253
  %490 = add i32 %489, %92
  %491 = sub i32 %490, %254
  %492 = add i32 %491, %255
  %493 = add i32 %492, %258
  %494 = sub i32 %493, %259
  %495 = add i32 %494, %265
  %496 = add i32 %495, %267
  %497 = sub i32 %496, %271
  %498 = sub i32 %497, %275
  %499 = add i32 %498, %277
  %500 = add i32 %499, %278
  %501 = sub i32 %500, %285
  %502 = add i32 %501, %286
  %503 = sub i32 %502, %289
  %504 = add i32 %503, %290
  %505 = add i32 %504, %291
  %506 = add i32 %505, %292
  %507 = add i32 %506, %294
  %508 = sub i32 %507, %295
  %509 = add i32 %508, %296
  %510 = add i32 %509, %297
  %511 = sub i32 %510, %298
  %512 = add i32 %511, %302
  %513 = sub i32 %512, %303
  %514 = add i32 %513, %304
  %515 = sub i32 %514, %309
  %516 = sub i32 %515, %26
  %517 = sub i32 %516, %29
  %518 = add i32 %517, %51
  %519 = add i32 %518, %61
  %520 = sub i32 %519, %65
  %521 = sub i32 %520, %76
  %522 = sub i32 %521, %93
  %523 = sub i32 %522, %95
  %524 = sub i32 %523, %112
  %525 = sub i32 %524, %116
  %526 = sub i32 %525, %138
  %527 = sub i32 %526, %149
  %528 = sub i32 %527, %168
  %529 = add i32 %528, %170
  %530 = sub i32 %529, %176
  %531 = sub i32 %530, %178
  %532 = sub i32 %531, %194
  %533 = sub i32 %532, %202
  %534 = sub i32 %533, %205
  %535 = add i32 %534, %206
  %536 = sub i32 %535, %208
  %537 = sub i32 %536, %211
  %538 = add i32 %537, %223
  %539 = sub i32 %538, %234
  %540 = sub i32 %539, %239
  %541 = sub i32 %540, %245
  %542 = sub i32 %541, %257
  %543 = sub i32 %542, %261
  %544 = sub i32 %543, %263
  %545 = sub i32 %544, %268
  %546 = add i32 %545, %273
  %547 = sub i32 %546, %282
  %548 = sub i32 %547, %288
  %549 = add i32 %548, %293
  %550 = sub i32 %549, %300
  %551 = add i32 %550, %306
  %552 = add i32 %551, %308
  %553 = add i32 %552, %311
  %554 = add i32 %553, %313
  %555 = add i32 %554, %314
  %556 = sub i32 %555, %316
  %557 = add i32 %556, %317
  %558 = sub i32 %557, %20
  %559 = sub i32 %558, %110
  %560 = sub i32 %559, %270
  %561 = sub i32 %560, %284
  %562 = add i32 %561, %16
  %563 = sub i32 %562, %18
  %564 = sub i32 %563, %243
  %565 = add i32 %564, %328
  %566 = add i32 %565, %326
  %567 = add i32 %566, %322
  %568 = add i32 %567, %351
  %569 = icmp eq i32 %14, %568
  %570 = select i1 %569, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %571 = tail call i32 @puts(i8* nonnull dereferenceable(1) %570)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
