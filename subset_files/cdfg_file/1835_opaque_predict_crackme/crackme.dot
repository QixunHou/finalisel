digraph "DFG for'crackme' function" {
	Node0x14d7980[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x14d79f0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x14d7ab0[shape=record, label="  %5 = or i32 %3, %0"];
	Node0x14d7b20[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x14d7b90[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x14d7c00[shape=record, label="  %8 = shl i32 %5, 1"];
	Node0x14d7ca0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x14d7d10[shape=record, label="  %10 = shl i32 %4, 1"];
	Node0x14d7d80[shape=record, label="  %11 = shl i32 %6, 1"];
	Node0x14d7df0[shape=record, label="  %12 = shl i32 %4, 1"];
	Node0x14d7e60[shape=record, label="  %13 = sub i32 %12, %5"];
	Node0x14d7ed0[shape=record, label="  %14 = add i32 %13, %7"];
	Node0x14d7f40[shape=record, label="  %15 = sub i32 %14, %10"];
	Node0x14d7fb0[shape=record, label="  %16 = sub i32 %15, %9"];
	Node0x14d8020[shape=record, label="  %17 = add i32 %16, %11"];
	Node0x14d8090[shape=record, label="  %18 = icmp eq i32 %17, %0"];
	Node0x1478268[shape=record, label="  %19 = select i1 %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x14d8530[shape=record, label="  %20 = tail call i32 @puts(i8* nonnull dereferenceable(1) %19)"];
	Node0x14d8580[shape=record, label="  ret void"];
	Node0x14d7980 -> Node0x14d79f0;
	Node0x14d79f0 -> Node0x14d7ab0;
	Node0x14d7ab0 -> Node0x14d7b20;
	Node0x14d7b20 -> Node0x14d7b90;
	Node0x14d7b90 -> Node0x14d7c00;
	Node0x14d7c00 -> Node0x14d7ca0;
	Node0x14d7ca0 -> Node0x14d7d10;
	Node0x14d7d10 -> Node0x14d7d80;
	Node0x14d7d80 -> Node0x14d7df0;
	Node0x14d7df0 -> Node0x14d7e60;
	Node0x14d7e60 -> Node0x14d7ed0;
	Node0x14d7ed0 -> Node0x14d7f40;
	Node0x14d7f40 -> Node0x14d7fb0;
	Node0x14d7fb0 -> Node0x14d8020;
	Node0x14d8020 -> Node0x14d8090;
	Node0x14d8090 -> Node0x1478268;
	Node0x1478268 -> Node0x14d8530;
	Node0x14d8530 -> Node0x14d8580;
edge [color=red]
	Node0x14d7980 -> Node0x14d79f0;
	Node0x14d7980 -> Node0x14d7ab0;
	Node0x14d7b20 -> Node0x14d7b90;
	Node0x14d7ab0 -> Node0x14d7c00;
	Node0x14d7c00 -> Node0x14d7ca0;
	Node0x14d79f0 -> Node0x14d7d10;
	Node0x14d7b20 -> Node0x14d7d80;
	Node0x14d79f0 -> Node0x14d7df0;
	Node0x14d7df0 -> Node0x14d7e60;
	Node0x14d7ab0 -> Node0x14d7e60;
	Node0x14d7e60 -> Node0x14d7ed0;
	Node0x14d7b90 -> Node0x14d7ed0;
	Node0x14d7ed0 -> Node0x14d7f40;
	Node0x14d7d10 -> Node0x14d7f40;
	Node0x14d7f40 -> Node0x14d7fb0;
	Node0x14d7ca0 -> Node0x14d7fb0;
	Node0x14d7fb0 -> Node0x14d8020;
	Node0x14d7d80 -> Node0x14d8020;
	Node0x14d8020 -> Node0x14d8090;
	Node0x14d8090 -> Node0x1478268;
	Node0x1478268 -> Node0x14d8530;
}
