; ModuleID = '../.././c_source_file/1024_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1024_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %1, %0
  %7 = xor i32 %6, -1
  %8 = xor i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %7
  %11 = shl i32 %10, 1
  %12 = sub i32 %11, %4
  %13 = xor i32 %4, %3
  %14 = xor i32 %3, -1
  %15 = xor i32 %4, -1
  %16 = or i32 %15, %3
  %17 = or i32 %4, %3
  %18 = add i32 %4, 1
  %19 = shl i32 %17, 1
  %20 = xor i32 %19, -2
  %21 = shl i32 %16, 2
  %22 = xor i32 %21, -4
  %23 = xor i32 %0, -1
  %24 = and i32 %2, %1
  %25 = and i32 %24, %23
  %26 = or i32 %2, %1
  %27 = and i32 %26, %0
  %28 = or i32 %25, %27
  %29 = xor i32 %1, %0
  %30 = and i32 %29, %2
  %31 = and i32 %1, %0
  %32 = xor i32 %2, -1
  %33 = or i32 %32, %1
  %34 = xor i32 %33, %31
  %35 = and i32 %2, %0
  %36 = or i32 %35, %7
  %37 = or i32 %26, %23
  %38 = xor i32 %1, -1
  %39 = and i32 %38, %2
  %40 = and i32 %39, %0
  %41 = xor i32 %2, %1
  %42 = xor i32 %41, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %40, %43
  %45 = or i32 %41, %31
  %46 = and i32 %32, %1
  %47 = or i32 %46, %0
  %48 = or i32 %32, %0
  %49 = xor i32 %48, %31
  %50 = and i32 %8, %38
  %51 = shl i32 %50, 1
  %52 = xor i32 %41, -1
  %53 = and i32 %6, %52
  %54 = xor i32 %29, -1
  %55 = or i32 %8, %54
  %56 = and i32 %9, %1
  %57 = xor i32 %46, -1
  %58 = xor i32 %57, %0
  %59 = or i32 %41, %0
  %60 = xor i32 %40, %59
  %61 = or i32 %38, %0
  %62 = xor i32 %35, %61
  %63 = or i32 %38, %2
  %64 = and i32 %63, %23
  %65 = xor i32 %40, -1
  %66 = xor i32 %64, %65
  %67 = and i32 %38, %0
  %68 = or i32 %67, %2
  %69 = xor i32 %26, -1
  %70 = xor i32 %69, %0
  %71 = and i32 %57, %23
  %72 = and i32 %32, %0
  %73 = or i32 %72, %38
  %74 = or i32 %2, %0
  %75 = xor i32 %74, %1
  %76 = xor i32 %61, %2
  %77 = and i32 %41, %0
  %78 = xor i32 %25, -1
  %79 = xor i32 %77, %78
  %80 = xor i32 %72, -1
  %81 = xor i32 %80, %1
  %82 = and i32 %6, %32
  %83 = shl i32 %82, 1
  %84 = or i32 %25, %77
  %85 = xor i32 %67, -1
  %86 = xor i32 %85, %2
  %87 = xor i32 %48, -1
  %88 = or i32 %29, %87
  %89 = or i32 %24, %23
  %90 = or i32 %72, %1
  %91 = and i32 %39, %23
  %92 = or i32 %41, %23
  %93 = xor i32 %92, -1
  %94 = or i32 %91, %93
  %95 = or i32 %8, %1
  %96 = shl i32 %95, 1
  %97 = or i32 %32, %7
  %98 = or i32 %9, %1
  %99 = or i32 %67, %32
  %100 = xor i32 %52, %0
  %101 = shl i32 %100, 1
  %102 = or i32 %31, %9
  %103 = and i32 %24, %0
  %104 = xor i32 %26, %0
  %105 = or i32 %103, %104
  %106 = shl i32 %105, 1
  %107 = and i32 %8, %6
  %108 = or i32 %69, %23
  %109 = and i32 %74, %54
  %110 = and i32 %57, %0
  %111 = or i32 %8, %7
  %112 = and i32 %61, %32
  %113 = xor i32 %61, -1
  %114 = or i32 %35, %113
  %115 = and i32 %52, %23
  %116 = shl i32 %115, 1
  %117 = xor i32 %48, %1
  %118 = xor i32 %33, %0
  %119 = or i32 %46, %67
  %120 = xor i32 %24, -1
  %121 = xor i32 %120, %0
  %122 = xor i32 %67, %57
  %123 = or i32 %35, %38
  %124 = or i32 %35, %46
  %125 = xor i32 %24, %0
  %126 = xor i32 %103, -1
  %127 = xor i32 %104, %126
  %128 = or i32 %57, %23
  %129 = and i32 %61, %52
  %130 = xor i32 %46, %0
  %131 = xor i32 %35, %6
  %132 = or i32 %57, %0
  %133 = xor i32 %74, -1
  %134 = or i32 %29, %133
  %135 = or i32 %133, %54
  %136 = or i32 %8, %38
  %137 = xor i32 %35, -1
  %138 = and i32 %29, %137
  %139 = add i32 %48, 1
  %140 = or i32 %32, %54
  %141 = xor i32 %72, %1
  %142 = shl i32 %141, 1
  %143 = or i32 %54, %2
  %144 = shl i32 %143, 1
  %145 = or i32 %41, %113
  %146 = xor i32 %35, %57
  %147 = and i32 %48, %1
  %148 = and i32 %137, %1
  %149 = and i32 %120, %23
  %150 = and i32 %48, %38
  %151 = and i32 %85, %2
  %152 = and i32 %6, %9
  %153 = xor i32 %7, %2
  %154 = and i32 %52, %85
  %155 = shl i32 %154, 1
  %156 = or i32 %31, %69
  %157 = xor i32 %59, -1
  %158 = or i32 %40, %157
  %159 = and i32 %9, %38
  %160 = xor i32 %27, %78
  %161 = xor i32 %31, %2
  %162 = or i32 %41, %67
  %163 = xor i32 %33, -1
  %164 = or i32 %31, %163
  %165 = xor i32 %137, %1
  %166 = and i32 %9, %85
  %167 = xor i32 %26, %31
  %168 = or i32 %9, %54
  %169 = xor i32 %31, -1
  %170 = and i32 %8, %169
  %171 = shl i32 %170, 1
  %172 = and i32 %41, %23
  %173 = or i32 %103, %172
  %174 = and i32 %74, %38
  %175 = or i32 %69, %0
  %176 = and i32 %8, %61
  %177 = xor i32 %35, %26
  %178 = or i32 %72, %24
  %179 = and i32 %32, %169
  %180 = xor i32 %87, %1
  %181 = or i32 %35, %29
  %182 = or i32 %29, %9
  %183 = shl i32 %7, 1
  %184 = and i32 %32, %54
  %185 = or i32 %31, %32
  %186 = and i32 %63, %0
  %187 = xor i32 %186, -1
  %188 = xor i32 %91, %187
  %189 = xor i32 %6, %2
  %190 = shl i32 %189, 1
  %191 = or i32 %46, %23
  %192 = add i32 %67, 1
  %193 = or i32 %103, %43
  %194 = or i32 %72, %163
  %195 = or i32 %7, %2
  %196 = and i32 %48, %29
  %197 = or i32 %41, %7
  %198 = xor i32 %74, %31
  %199 = shl i32 %42, 1
  %200 = and i32 %137, %54
  %201 = and i32 %8, %54
  %202 = and i32 %33, %23
  %203 = and i32 %169, %2
  %204 = or i32 %87, %54
  %205 = shl i32 %204, 1
  %206 = xor i32 %63, %0
  %207 = or i32 %40, %206
  %208 = xor i32 %206, %65
  %209 = and i32 %6, %2
  %210 = and i32 %74, %1
  %211 = or i32 %9, %113
  %212 = or i32 %24, %0
  %213 = or i32 %91, %186
  %214 = and i32 %41, %169
  %215 = and i32 %41, %85
  %216 = and i32 %29, %80
  %217 = shl i32 %216, 1
  %218 = xor i32 %72, %120
  %219 = and i32 %26, %23
  %220 = xor i32 %219, %126
  %221 = and i32 %137, %38
  %222 = or i32 %8, %67
  %223 = or i32 %113, %2
  %224 = or i32 %8, %31
  %225 = or i32 %72, %29
  %226 = or i32 %163, %23
  %227 = or i32 %33, %23
  %228 = or i32 %35, %69
  %229 = and i32 %80, %38
  %230 = and i32 %9, %169
  %231 = or i32 %8, %113
  %232 = or i32 %29, %2
  %233 = or i32 %52, %23
  %234 = shl i32 %104, 1
  %235 = or i32 %67, %9
  %236 = and i32 %52, %169
  %237 = or i32 %72, %54
  %238 = or i32 %103, %219
  %239 = or i32 %163, %0
  %240 = xor i32 %35, %1
  %241 = xor i32 %169, %2
  %242 = shl i32 %241, 1
  %243 = xor i32 %72, %33
  %244 = or i32 %33, %0
  %245 = xor i32 %103, %42
  %246 = or i32 %40, %64
  %247 = or i32 %67, %52
  %248 = xor i32 %113, %2
  %249 = and i32 %48, %54
  %250 = or i32 %31, %2
  %251 = and i32 %29, %32
  %252 = xor i32 %133, %1
  %253 = and i32 %8, %1
  %254 = xor i32 %91, %92
  %255 = or i32 %8, %29
  %256 = and i32 %41, %61
  %257 = and i32 %80, %1
  %258 = shl i32 %257, 2
  %259 = and i32 %41, %6
  %260 = or i32 %24, %67
  %261 = xor i32 %172, %126
  %262 = or i32 %52, %7
  %263 = or i32 %26, %0
  %264 = or i32 %31, %52
  %265 = and i32 %120, %0
  %266 = or i32 %133, %38
  %267 = and i32 %61, %9
  %268 = or i32 %120, %23
  %269 = xor i32 %67, %2
  %270 = shl i32 %269, 1
  %271 = or i32 %31, %133
  %272 = and i32 %54, %2
  %273 = or i32 %32, %113
  %274 = shl i32 %273, 1
  %275 = or i32 %87, %38
  %276 = and i32 %8, %29
  %277 = or i32 %29, %32
  %278 = and i32 %80, %54
  %279 = and i32 %8, %85
  %280 = add i32 %2, 1
  %281 = or i32 %87, %1
  %282 = shl i32 %281, 1
  %283 = or i32 %31, %87
  %284 = or i32 %35, %1
  %285 = or i32 %120, %0
  %286 = and i32 %32, %85
  %287 = or i32 %52, %113
  %288 = and i32 %33, %0
  %289 = and i32 %9, %54
  %290 = and i32 %61, %2
  %291 = xor i32 %163, %0
  %292 = or i32 %133, %1
  %293 = or i32 %9, %38
  %294 = and i32 %52, %0
  %295 = xor i32 %67, %120
  %296 = and i32 %69, %23
  %297 = mul i32 %296, -26
  %298 = and i32 %46, %23
  %299 = mul i32 %298, 7
  %300 = and i32 %69, %0
  %301 = mul i32 %300, -6
  %302 = and i32 %46, %0
  %303 = mul i32 %302, -14
  %304 = and i32 %163, %23
  %305 = mul i32 %25, 10
  %306 = and i32 %163, %0
  %307 = mul i32 %306, -18
  %308 = sub i32 -2, %74
  %309 = add i32 %308, %185
  %310 = add i32 %309, %184
  %311 = add i32 %310, %153
  %312 = add i32 %311, %97
  %313 = add i32 %312, %103
  %314 = add i32 %313, %304
  %315 = add i32 %314, %293
  %316 = add i32 %315, %287
  %317 = add i32 %316, %283
  %318 = add i32 %317, %266
  %319 = add i32 %318, %256
  %320 = add i32 %319, %253
  %321 = add i32 %320, %236
  %322 = add i32 %321, %222
  %323 = add i32 %322, %212
  %324 = add i32 %323, %202
  %325 = add i32 %324, %147
  %326 = add i32 %325, %132
  %327 = add i32 %326, %122
  %328 = add i32 %327, %114
  %329 = add i32 %328, %108
  %330 = add i32 %329, %36
  %331 = add i32 %330, %213
  %332 = sub i32 %139, %0
  %333 = add i32 %332, %230
  %334 = add i32 %333, %265
  %335 = sub i32 %334, %178
  %336 = sub i32 %335, %174
  %337 = mul i32 %336, 3
  %338 = sub i32 %288, %145
  %339 = mul i32 %338, 5
  %340 = add i32 %331, %13
  %341 = shl i32 %340, 1
  %342 = add i32 %232, 1073741823
  %343 = add i32 %342, %252
  %344 = add i32 %343, %295
  %345 = shl i32 %344, 2
  %346 = add i32 %0, 8
  %347 = sub i32 %346, %31
  %348 = add i32 %347, %61
  %349 = sub i32 %348, %67
  %350 = sub i32 %349, %6
  %351 = add i32 %350, %192
  %352 = add i32 %351, %31
  %353 = add i32 %352, %61
  %354 = add i32 %353, 3
  %355 = add i32 %354, %2
  %356 = add i32 %355, %280
  %357 = add i32 %356, %14
  %358 = add i32 %357, %30
  %359 = sub i32 %358, %68
  %360 = sub i32 %359, %76
  %361 = add i32 %360, %86
  %362 = sub i32 %361, %26
  %363 = sub i32 %362, %41
  %364 = sub i32 %363, %99
  %365 = add i32 %364, %74
  %366 = add i32 %365, %112
  %367 = add i32 %366, %120
  %368 = add i32 %367, %9
  %369 = sub i32 %368, %140
  %370 = add i32 %369, %151
  %371 = sub i32 %370, %24
  %372 = sub i32 %371, %161
  %373 = sub i32 %372, %179
  %374 = sub i32 %373, %183
  %375 = sub i32 %374, %195
  %376 = sub i32 %375, %35
  %377 = add i32 %376, %203
  %378 = add i32 %377, %209
  %379 = sub i32 %378, %48
  %380 = sub i32 %379, %8
  %381 = add i32 %380, %69
  %382 = sub i32 %381, %223
  %383 = add i32 %382, %248
  %384 = add i32 %383, %250
  %385 = sub i32 %384, %251
  %386 = add i32 %385, %137
  %387 = sub i32 %386, %272
  %388 = add i32 %387, %277
  %389 = add i32 %388, %286
  %390 = sub i32 %389, %290
  %391 = add i32 %390, %18
  %392 = add i32 %391, %34
  %393 = sub i32 %392, %37
  %394 = add i32 %393, %45
  %395 = sub i32 %394, %47
  %396 = add i32 %395, %49
  %397 = sub i32 %396, %53
  %398 = sub i32 %397, %55
  %399 = add i32 %398, %56
  %400 = add i32 %399, %58
  %401 = add i32 %400, %62
  %402 = add i32 %401, %70
  %403 = sub i32 %402, %71
  %404 = sub i32 %403, %73
  %405 = add i32 %404, %75
  %406 = sub i32 %405, %81
  %407 = sub i32 %406, %83
  %408 = add i32 %407, %88
  %409 = sub i32 %408, %89
  %410 = add i32 %409, %90
  %411 = sub i32 %410, %98
  %412 = sub i32 %411, %102
  %413 = sub i32 %412, %59
  %414 = add i32 %413, %107
  %415 = add i32 %414, %109
  %416 = sub i32 %415, %110
  %417 = sub i32 %416, %111
  %418 = sub i32 %417, %117
  %419 = sub i32 %418, %118
  %420 = sub i32 %419, %119
  %421 = sub i32 %420, %121
  %422 = add i32 %421, %123
  %423 = add i32 %422, %124
  %424 = add i32 %423, %125
  %425 = add i32 %424, %128
  %426 = sub i32 %425, %129
  %427 = sub i32 %426, %130
  %428 = add i32 %427, %131
  %429 = add i32 %428, %134
  %430 = add i32 %429, %135
  %431 = add i32 %430, %136
  %432 = sub i32 %431, %138
  %433 = sub i32 %432, %144
  %434 = add i32 %433, %146
  %435 = sub i32 %434, %148
  %436 = sub i32 %435, %149
  %437 = add i32 %436, %150
  %438 = add i32 %437, %152
  %439 = add i32 %438, %156
  %440 = add i32 %439, %159
  %441 = sub i32 %440, %162
  %442 = add i32 %441, %164
  %443 = add i32 %442, %165
  %444 = sub i32 %443, %166
  %445 = add i32 %444, %167
  %446 = add i32 %445, %168
  %447 = add i32 %446, %175
  %448 = sub i32 %447, %176
  %449 = add i32 %448, %177
  %450 = sub i32 %449, %180
  %451 = sub i32 %450, %181
  %452 = sub i32 %451, %182
  %453 = sub i32 %452, %190
  %454 = add i32 %453, %191
  %455 = sub i32 %454, %194
  %456 = sub i32 %455, %196
  %457 = add i32 %456, %197
  %458 = add i32 %457, %198
  %459 = add i32 %458, %200
  %460 = sub i32 %459, %201
  %461 = sub i32 %460, %77
  %462 = sub i32 %461, %210
  %463 = add i32 %462, %211
  %464 = sub i32 %463, %214
  %465 = add i32 %464, %215
  %466 = add i32 %465, %218
  %467 = add i32 %466, %221
  %468 = add i32 %467, %224
  %469 = add i32 %468, %225
  %470 = add i32 %469, %226
  %471 = sub i32 %470, %227
  %472 = add i32 %471, %228
  %473 = add i32 %472, %229
  %474 = add i32 %473, %231
  %475 = sub i32 %474, %233
  %476 = add i32 %475, %235
  %477 = add i32 %476, %237
  %478 = add i32 %477, %239
  %479 = sub i32 %478, %240
  %480 = sub i32 %479, %242
  %481 = add i32 %480, %243
  %482 = sub i32 %481, %244
  %483 = add i32 %482, %247
  %484 = sub i32 %483, %249
  %485 = add i32 %484, %255
  %486 = sub i32 %485, %259
  %487 = sub i32 %486, %260
  %488 = sub i32 %487, %262
  %489 = sub i32 %488, %263
  %490 = sub i32 %489, %264
  %491 = sub i32 %490, %92
  %492 = sub i32 %491, %267
  %493 = sub i32 %492, %27
  %494 = add i32 %493, %268
  %495 = sub i32 %494, %270
  %496 = add i32 %495, %271
  %497 = sub i32 %496, %274
  %498 = add i32 %497, %275
  %499 = add i32 %498, %276
  %500 = add i32 %499, %219
  %501 = sub i32 %500, %278
  %502 = add i32 %501, %279
  %503 = add i32 %502, %284
  %504 = add i32 %503, %285
  %505 = sub i32 %504, %172
  %506 = add i32 %505, %289
  %507 = add i32 %506, %291
  %508 = sub i32 %507, %292
  %509 = add i32 %508, %294
  %510 = sub i32 %509, %16
  %511 = add i32 %510, %17
  %512 = add i32 %511, %28
  %513 = add i32 %512, %44
  %514 = sub i32 %513, %51
  %515 = add i32 %514, %60
  %516 = add i32 %515, %66
  %517 = sub i32 %516, %79
  %518 = add i32 %517, %84
  %519 = sub i32 %518, %94
  %520 = sub i32 %519, %96
  %521 = sub i32 %520, %101
  %522 = sub i32 %521, %116
  %523 = add i32 %522, %127
  %524 = sub i32 %523, %142
  %525 = sub i32 %524, %155
  %526 = sub i32 %525, %158
  %527 = sub i32 %526, %160
  %528 = sub i32 %527, %171
  %529 = sub i32 %528, %173
  %530 = sub i32 %529, %188
  %531 = sub i32 %530, %193
  %532 = sub i32 %531, %199
  %533 = sub i32 %532, %205
  %534 = sub i32 %533, %207
  %535 = add i32 %534, %208
  %536 = sub i32 %535, %217
  %537 = sub i32 %536, %220
  %538 = sub i32 %537, %234
  %539 = sub i32 %538, %238
  %540 = add i32 %539, %245
  %541 = add i32 %540, %246
  %542 = add i32 %541, %254
  %543 = sub i32 %542, %258
  %544 = add i32 %543, %261
  %545 = sub i32 %544, %282
  %546 = add i32 %545, %297
  %547 = add i32 %546, %299
  %548 = add i32 %547, %301
  %549 = add i32 %548, %303
  %550 = add i32 %549, %305
  %551 = add i32 %550, %307
  %552 = sub i32 %551, %106
  %553 = add i32 %552, %339
  %554 = add i32 %553, %20
  %555 = sub i32 %554, %22
  %556 = add i32 %555, %345
  %557 = add i32 %556, %337
  %558 = add i32 %557, %341
  %559 = icmp eq i32 %12, %558
  %560 = select i1 %559, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %561 = tail call i32 @puts(i8* nonnull dereferenceable(1) %560)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
