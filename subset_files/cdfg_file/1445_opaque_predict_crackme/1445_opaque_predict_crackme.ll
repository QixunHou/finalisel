; ModuleID = '../.././c_source_file/1445_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1445_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = or i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = mul i32 %10, -2
  %12 = or i32 %2, %0
  %13 = and i32 %12, %1
  %14 = add i32 %11, %13
  %15 = xor i32 %4, %3
  %16 = xor i32 %15, -1
  %17 = xor i32 %5, %4
  %18 = xor i32 %17, -1
  %19 = and i32 %18, %16
  %20 = sub i32 %14, %19
  %21 = and i32 %5, %4
  %22 = xor i32 %5, -1
  %23 = and i32 %22, %3
  %24 = or i32 %21, %23
  %25 = add i32 %20, %24
  %26 = xor i32 %0, -1
  %27 = xor i32 %1, -1
  %28 = and i32 %27, %2
  %29 = and i32 %28, %0
  %30 = or i32 %27, %2
  %31 = and i32 %30, %26
  %32 = or i32 %29, %31
  %33 = xor i32 %2, -1
  %34 = and i32 %33, %1
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %26
  %37 = and i32 %33, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %38, %27
  %40 = and i32 %27, %0
  %41 = and i32 %2, %1
  %42 = or i32 %41, %40
  %43 = or i32 %33, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %37, %44
  %46 = or i32 %33, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %1
  %49 = or i32 %1, %0
  %50 = xor i32 %49, -1
  %51 = add i32 %49, 1
  %52 = or i32 %43, %26
  %53 = or i32 %37, %41
  %54 = xor i32 %12, -1
  %55 = xor i32 %54, %1
  %56 = xor i32 %7, -1
  %57 = and i32 %56, %1
  %58 = xor i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = add i32 %58, 1
  %61 = and i32 %56, %27
  %62 = shl i32 %61, 1
  %63 = or i32 %27, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %2, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %64
  %68 = or i32 %43, %0
  %69 = xor i32 %66, %0
  %70 = xor i32 %37, %43
  %71 = and i32 %1, %0
  %72 = or i32 %71, %33
  %73 = and i32 %41, %0
  %74 = and i32 %8, %26
  %75 = xor i32 %74, -1
  %76 = xor i32 %73, %75
  %77 = or i32 %65, %64
  %78 = xor i32 %71, -1
  %79 = xor i32 %2, %0
  %80 = and i32 %79, %78
  %81 = and i32 %8, %0
  %82 = xor i32 %50, %2
  %83 = shl i32 %82, 1
  %84 = or i32 %58, %47
  %85 = or i32 %65, %40
  %86 = xor i32 %40, -1
  %87 = and i32 %66, %86
  %88 = xor i32 %49, %2
  %89 = xor i32 %38, %1
  %90 = and i32 %65, %78
  %91 = shl i32 %7, 1
  %92 = shl i32 %46, 1
  %93 = and i32 %79, %63
  %94 = or i32 %58, %54
  %95 = xor i32 %79, -1
  %96 = or i32 %40, %95
  %97 = and i32 %58, %33
  %98 = or i32 %8, %0
  %99 = or i32 %64, %2
  %100 = or i32 %65, %0
  %101 = xor i32 %29, %100
  %102 = and i32 %43, %0
  %103 = or i32 %7, %50
  %104 = and i32 %65, %0
  %105 = or i32 %79, %27
  %106 = or i32 %7, %1
  %107 = xor i32 %44, %0
  %108 = and i32 %35, %26
  %109 = add i32 %12, 1
  %110 = xor i32 %7, %1
  %111 = and i32 %49, %33
  %112 = and i32 %63, %33
  %113 = shl i32 %112, 1
  %114 = and i32 %66, %78
  %115 = and i32 %28, %26
  %116 = or i32 %65, %26
  %117 = xor i32 %115, %116
  %118 = and i32 %56, %59
  %119 = or i32 %50, %2
  %120 = and i32 %49, %66
  %121 = or i32 %35, %0
  %122 = xor i32 %31, 2147483647
  %123 = xor i32 %122, %29
  %124 = shl i32 %123, 1
  %125 = or i32 %58, %2
  %126 = or i32 %33, %50
  %127 = shl i32 %63, 1
  %128 = or i32 %41, %0
  %129 = xor i32 %41, -1
  %130 = xor i32 %129, %0
  %131 = and i32 %63, %2
  %132 = or i32 %95, %27
  %133 = or i32 %79, %64
  %134 = add i32 %63, 1
  %135 = add i32 %2, 1
  %136 = xor i32 %65, %0
  %137 = and i32 %66, %26
  %138 = or i32 %7, %58
  %139 = and i32 %12, %59
  %140 = and i32 %46, %58
  %141 = and i32 %95, %86
  %142 = and i32 %49, %95
  %143 = or i32 %47, %1
  %144 = and i32 %65, %86
  %145 = or i32 %71, %54
  %146 = and i32 %86, %2
  %147 = and i32 %79, %86
  %148 = and i32 %79, %58
  %149 = xor i32 %37, %129
  %150 = or i32 %47, %27
  %151 = or i32 %95, %1
  %152 = and i32 %95, %78
  %153 = or i32 %79, %50
  %154 = shl i32 %153, 1
  %155 = or i32 %66, %0
  %156 = and i32 %79, %59
  %157 = xor i32 %40, %35
  %158 = xor i32 %7, %35
  %159 = add i32 %41, 1
  %160 = and i32 %9, %26
  %161 = and i32 %34, %26
  %162 = and i32 %9, %0
  %163 = and i32 %44, %26
  %164 = and i32 %41, %26
  %165 = and i32 %44, %0
  %166 = shl i32 %165, 1
  %167 = mul i32 %73, 6
  %168 = or i32 %4, %3
  %169 = xor i32 %168, -1
  %170 = or i32 %18, %169
  %171 = xor i32 %3, -1
  %172 = or i32 %22, %4
  %173 = xor i32 %172, -1
  %174 = or i32 %173, %171
  %175 = xor i32 %5, %3
  %176 = and i32 %175, %168
  %177 = and i32 %172, %3
  %178 = shl i32 %177, 1
  %179 = or i32 %171, %4
  %180 = xor i32 %179, %5
  %181 = and i32 %171, %4
  %182 = and i32 %181, %5
  %183 = xor i32 %4, -1
  %184 = or i32 %171, %5
  %185 = xor i32 %184, -1
  %186 = or i32 %185, %4
  %187 = xor i32 %182, %186
  %188 = and i32 %172, %15
  %189 = shl i32 %188, 1
  %190 = or i32 %5, %3
  %191 = and i32 %190, %4
  %192 = or i32 %175, %183
  %193 = xor i32 %23, -1
  %194 = and i32 %16, %5
  %195 = xor i32 %181, -1
  %196 = and i32 %22, %195
  %197 = and i32 %4, %3
  %198 = xor i32 %197, -1
  %199 = xor i32 %198, %5
  %200 = or i32 %169, %5
  %201 = or i32 %21, %171
  %202 = xor i32 %190, %197
  %203 = or i32 %15, %173
  %204 = shl i32 %203, 1
  %205 = xor i32 %175, %4
  %206 = xor i32 %175, -1
  %207 = or i32 %206, %4
  %208 = and i32 %5, %3
  %209 = xor i32 %208, -1
  %210 = add i32 %208, 1
  %211 = or i32 %21, %3
  %212 = and i32 %208, %4
  %213 = and i32 %190, %183
  %214 = xor i32 %213, -1
  %215 = xor i32 %212, %214
  %216 = xor i32 %179, -1
  %217 = or i32 %206, %216
  %218 = or i32 %197, %22
  %219 = and i32 %172, %16
  %220 = or i32 %22, %216
  %221 = shl i32 %220, 1
  %222 = or i32 %22, %3
  %223 = or i32 %222, %183
  %224 = or i32 %16, %5
  %225 = or i32 %181, %5
  %226 = or i32 %175, %197
  %227 = shl i32 %226, 1
  %228 = xor i32 %195, %5
  %229 = and i32 %22, %4
  %230 = xor i32 %229, -1
  %231 = and i32 %230, %3
  %232 = and i32 %172, %171
  %233 = and i32 %175, %4
  %234 = or i32 %17, %3
  %235 = or i32 %21, %216
  %236 = shl i32 %235, 1
  %237 = or i32 %173, %3
  %238 = or i32 %17, %197
  %239 = or i32 %222, %4
  %240 = or i32 %21, %169
  %241 = and i32 %18, %171
  %242 = and i32 %209, %4
  %243 = xor i32 %212, %205
  %244 = xor i32 %230, %3
  %245 = or i32 %190, %183
  %246 = shl i32 %245, 1
  %247 = xor i32 %209, %4
  %248 = or i32 %175, %4
  %249 = and i32 %15, %22
  %250 = and i32 %17, %168
  %251 = or i32 %197, %18
  %252 = or i32 %5, %4
  %253 = and i32 %252, %171
  %254 = xor i32 %205, -1
  %255 = or i32 %212, %254
  %256 = or i32 %23, %181
  %257 = or i32 %206, %183
  %258 = and i32 %193, %183
  %259 = or i32 %190, %4
  %260 = and i32 %252, %16
  %261 = or i32 %18, %3
  %262 = and i32 %175, %198
  %263 = and i32 %18, %198
  %264 = or i32 %193, %183
  %265 = or i32 %197, %206
  %266 = and i32 %168, %206
  %267 = and i32 %15, %230
  %268 = xor i32 %21, %171
  %269 = xor i32 %190, -1
  %270 = and i32 %208, %183
  %271 = or i32 %270, %191
  %272 = or i32 %17, %15
  %273 = xor i32 %184, %4
  %274 = or i32 %182, %273
  %275 = xor i32 %21, %179
  %276 = and i32 %15, %18
  %277 = shl i32 %276, 1
  %278 = and i32 %168, %5
  %279 = or i32 %229, %171
  %280 = shl i32 %279, 1
  %281 = or i32 %270, %233
  %282 = shl i32 %281, 1
  %283 = xor i32 %222, -1
  %284 = add i32 %222, 1
  %285 = and i32 %175, %183
  %286 = or i32 %23, %183
  %287 = xor i32 %172, %197
  %288 = or i32 %21, %16
  %289 = or i32 %209, %4
  %290 = or i32 %212, %213
  %291 = xor i32 %252, -1
  %292 = or i32 %291, %16
  %293 = or i32 %283, %4
  %294 = and i32 %222, %4
  %295 = and i32 %206, %198
  %296 = or i32 %17, %171
  %297 = add i32 %252, 1
  %298 = xor i32 %206, %4
  %299 = xor i32 %233, 2147483647
  %300 = xor i32 %299, %270
  %301 = or i32 %182, %205
  %302 = xor i32 %273, -1
  %303 = xor i32 %182, %302
  %304 = and i32 %269, %183
  %305 = shl i32 %304, 4
  %306 = and i32 %23, %183
  %307 = mul i32 %306, 21
  %308 = and i32 %269, %4
  %309 = and i32 %23, %4
  %310 = and i32 %283, %183
  %311 = and i32 %283, %4
  %312 = add i32 %126, %86
  %313 = add i32 %312, %125
  %314 = add i32 %313, %111
  %315 = add i32 %314, %79
  %316 = add i32 %315, %143
  %317 = add i32 %316, %110
  %318 = add i32 %317, %103
  %319 = add i32 %318, %87
  %320 = add i32 %319, %39
  %321 = add i32 %320, %169
  %322 = add i32 %321, %278
  %323 = add i32 %322, %228
  %324 = add i32 %323, %224
  %325 = add i32 %324, %294
  %326 = add i32 %325, %292
  %327 = add i32 %326, %257
  %328 = add i32 %327, %240
  %329 = add i32 %328, %217
  %330 = add i32 %329, %201
  %331 = add i32 %330, %300
  %332 = shl i32 %331, 1
  %333 = sub i32 %162, %152
  %334 = sub i32 %333, %144
  %335 = sub i32 %334, %136
  %336 = add i32 %335, %105
  %337 = sub i32 %336, %199
  %338 = add i32 %337, %196
  %339 = sub i32 %338, %256
  %340 = add i32 %339, %270
  %341 = sub i32 %340, %250
  %342 = mul i32 %341, 5
  %343 = add i32 %160, %163
  %344 = add i32 %343, %108
  %345 = add i32 %344, %211
  %346 = shl i32 %345, 2
  %347 = add i32 %93, %97
  %348 = add i32 %347, %242
  %349 = add i32 %348, %289
  %350 = mul i32 %349, -3
  %351 = sub i32 %161, %164
  %352 = add i32 %351, %309
  %353 = mul i32 %352, 12
  %354 = add i32 %212, %310
  %355 = mul i32 %354, -9
  %356 = add i32 %311, %308
  %357 = shl i32 %356, 4
  %358 = sub i32 3, %0
  %359 = add i32 %358, %51
  %360 = add i32 %359, %60
  %361 = add i32 %360, %58
  %362 = add i32 %361, %2
  %363 = add i32 %362, %134
  %364 = add i32 %363, %135
  %365 = sub i32 %364, %34
  %366 = add i32 %365, %12
  %367 = sub i32 %366, %72
  %368 = sub i32 %367, %88
  %369 = sub i32 %368, %99
  %370 = add i32 %369, %109
  %371 = sub i32 %370, %119
  %372 = sub i32 %371, %127
  %373 = add i32 %372, %131
  %374 = add i32 %373, %37
  %375 = sub i32 %374, %146
  %376 = sub i32 %375, %65
  %377 = add i32 %376, %159
  %378 = sub i32 %377, %3
  %379 = add i32 %378, %36
  %380 = sub i32 %379, %42
  %381 = add i32 %380, %45
  %382 = add i32 %381, %48
  %383 = add i32 %382, %52
  %384 = add i32 %383, %53
  %385 = sub i32 %384, %55
  %386 = add i32 %385, %57
  %387 = add i32 %386, %67
  %388 = add i32 %387, %68
  %389 = add i32 %388, %69
  %390 = sub i32 %389, %70
  %391 = sub i32 %390, %77
  %392 = add i32 %391, %80
  %393 = sub i32 %392, %81
  %394 = sub i32 %393, %83
  %395 = sub i32 %394, %84
  %396 = add i32 %395, %85
  %397 = add i32 %396, %89
  %398 = sub i32 %397, %90
  %399 = sub i32 %398, %91
  %400 = sub i32 %399, %92
  %401 = add i32 %400, %94
  %402 = add i32 %401, %96
  %403 = sub i32 %402, %98
  %404 = add i32 %403, %102
  %405 = add i32 %404, %104
  %406 = sub i32 %405, %106
  %407 = add i32 %406, %107
  %408 = sub i32 %407, %113
  %409 = sub i32 %408, %114
  %410 = sub i32 %409, %118
  %411 = add i32 %410, %120
  %412 = sub i32 %411, %121
  %413 = add i32 %412, %128
  %414 = sub i32 %413, %130
  %415 = sub i32 %414, %132
  %416 = add i32 %415, %133
  %417 = sub i32 %416, %137
  %418 = add i32 %417, %74
  %419 = add i32 %418, %138
  %420 = add i32 %419, %139
  %421 = add i32 %420, %140
  %422 = add i32 %421, %141
  %423 = sub i32 %422, %142
  %424 = add i32 %423, %145
  %425 = sub i32 %424, %147
  %426 = sub i32 %425, %148
  %427 = add i32 %426, %149
  %428 = sub i32 %427, %150
  %429 = add i32 %428, %151
  %430 = sub i32 %429, %155
  %431 = add i32 %430, %156
  %432 = sub i32 %431, %157
  %433 = sub i32 %432, %158
  %434 = add i32 %433, %4
  %435 = sub i32 %434, %32
  %436 = sub i32 %435, %62
  %437 = add i32 %436, %76
  %438 = sub i32 %437, %101
  %439 = add i32 %438, %117
  %440 = sub i32 %439, %154
  %441 = sub i32 %440, %166
  %442 = add i32 %441, %167
  %443 = sub i32 %442, %5
  %444 = add i32 %443, %197
  %445 = sub i32 %444, %179
  %446 = add i32 %445, %16
  %447 = sub i32 %446, %15
  %448 = sub i32 %447, %180
  %449 = add i32 %448, %193
  %450 = add i32 %449, %194
  %451 = sub i32 %450, %190
  %452 = add i32 %451, %200
  %453 = add i32 %452, %210
  %454 = add i32 %453, %218
  %455 = add i32 %454, %225
  %456 = add i32 %455, %21
  %457 = add i32 %456, %175
  %458 = sub i32 %457, %249
  %459 = sub i32 %458, %172
  %460 = add i32 %459, %269
  %461 = add i32 %460, %222
  %462 = add i32 %461, %284
  %463 = sub i32 %462, %23
  %464 = add i32 %463, %297
  %465 = sub i32 %464, %124
  %466 = sub i32 %465, %170
  %467 = add i32 %466, %174
  %468 = sub i32 %467, %176
  %469 = add i32 %468, %191
  %470 = sub i32 %469, %192
  %471 = sub i32 %470, %202
  %472 = sub i32 %471, %205
  %473 = sub i32 %472, %207
  %474 = sub i32 %473, %219
  %475 = sub i32 %474, %221
  %476 = add i32 %475, %223
  %477 = sub i32 %476, %231
  %478 = add i32 %477, %232
  %479 = sub i32 %478, %233
  %480 = add i32 %479, %234
  %481 = sub i32 %480, %237
  %482 = add i32 %481, %238
  %483 = add i32 %482, %239
  %484 = sub i32 %483, %241
  %485 = add i32 %484, %244
  %486 = add i32 %485, %247
  %487 = sub i32 %486, %248
  %488 = add i32 %487, %251
  %489 = add i32 %488, %253
  %490 = add i32 %489, %258
  %491 = sub i32 %490, %259
  %492 = add i32 %491, %260
  %493 = sub i32 %492, %261
  %494 = add i32 %493, %262
  %495 = add i32 %494, %263
  %496 = add i32 %495, %264
  %497 = add i32 %496, %265
  %498 = sub i32 %497, %266
  %499 = sub i32 %498, %267
  %500 = sub i32 %499, %268
  %501 = add i32 %500, %272
  %502 = add i32 %501, %275
  %503 = add i32 %502, %285
  %504 = sub i32 %503, %286
  %505 = sub i32 %504, %287
  %506 = add i32 %505, %288
  %507 = add i32 %506, %293
  %508 = add i32 %507, %295
  %509 = sub i32 %508, %296
  %510 = add i32 %509, %298
  %511 = sub i32 %510, %178
  %512 = sub i32 %511, %187
  %513 = sub i32 %512, %189
  %514 = sub i32 %513, %204
  %515 = add i32 %514, %215
  %516 = sub i32 %515, %227
  %517 = sub i32 %516, %236
  %518 = sub i32 %517, %243
  %519 = sub i32 %518, %246
  %520 = sub i32 %519, %255
  %521 = sub i32 %520, %271
  %522 = add i32 %521, %274
  %523 = sub i32 %522, %277
  %524 = sub i32 %523, %280
  %525 = add i32 %524, %290
  %526 = sub i32 %525, %301
  %527 = add i32 %526, %303
  %528 = sub i32 %527, %305
  %529 = add i32 %528, %307
  %530 = sub i32 %529, %282
  %531 = add i32 %530, %355
  %532 = add i32 %531, %357
  %533 = add i32 %532, %353
  %534 = add i32 %533, %346
  %535 = add i32 %534, %350
  %536 = add i32 %535, %342
  %537 = add i32 %536, %332
  %538 = icmp eq i32 %25, %537
  %539 = select i1 %538, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %540 = tail call i32 @puts(i8* nonnull dereferenceable(1) %539)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
