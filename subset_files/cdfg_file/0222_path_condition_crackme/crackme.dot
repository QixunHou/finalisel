digraph "DFG for'crackme' function" {
	Node0x1d76540[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1d76bf0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1d76cb0[shape=record, label="  %5 = sub i32 %4, %3"];
	Node0x1d76d20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1d76d90[shape=record, label="  %7 = and i32 %4, %0"];
	Node0x1d76e00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1d76e70[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1d76ee0[shape=record, label="  %10 = or i32 %4, %0"];
	Node0x1d76f50[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1d76fc0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1d77030[shape=record, label="  %13 = xor i32 %3, -1"];
	Node0x1d770d0[shape=record, label="  %14 = mul i32 %13, 5"];
	Node0x1d77170[shape=record, label="  %15 = mul i32 %9, -3"];
	Node0x1d771e0[shape=record, label="  %16 = add i32 %7, %0"];
	Node0x1d77250[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x1d772f0[shape=record, label="  %18 = add i32 %1, 3"];
	Node0x1d77360[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0x1d773d0[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x1d77440[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x1d774b0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x1d77520[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x1d77590[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x1d77600[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x1d77670[shape=record, label="  %26 = icmp eq i32 %6, %25"];
	Node0x1d17268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d77b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1d77b60[shape=record, label="  ret void"];
	Node0x1d76540 -> Node0x1d76bf0;
	Node0x1d76bf0 -> Node0x1d76cb0;
	Node0x1d76cb0 -> Node0x1d76d20;
	Node0x1d76d20 -> Node0x1d76d90;
	Node0x1d76d90 -> Node0x1d76e00;
	Node0x1d76e00 -> Node0x1d76e70;
	Node0x1d76e70 -> Node0x1d76ee0;
	Node0x1d76ee0 -> Node0x1d76f50;
	Node0x1d76f50 -> Node0x1d76fc0;
	Node0x1d76fc0 -> Node0x1d77030;
	Node0x1d77030 -> Node0x1d770d0;
	Node0x1d770d0 -> Node0x1d77170;
	Node0x1d77170 -> Node0x1d771e0;
	Node0x1d771e0 -> Node0x1d77250;
	Node0x1d77250 -> Node0x1d772f0;
	Node0x1d772f0 -> Node0x1d77360;
	Node0x1d77360 -> Node0x1d773d0;
	Node0x1d773d0 -> Node0x1d77440;
	Node0x1d77440 -> Node0x1d774b0;
	Node0x1d774b0 -> Node0x1d77520;
	Node0x1d77520 -> Node0x1d77590;
	Node0x1d77590 -> Node0x1d77600;
	Node0x1d77600 -> Node0x1d77670;
	Node0x1d77670 -> Node0x1d17268;
	Node0x1d17268 -> Node0x1d77b10;
	Node0x1d77b10 -> Node0x1d77b60;
edge [color=red]
	Node0x1d76bf0 -> Node0x1d76cb0;
	Node0x1d76540 -> Node0x1d76cb0;
	Node0x1d76cb0 -> Node0x1d76d20;
	Node0x1d76bf0 -> Node0x1d76d90;
	Node0x1d76bf0 -> Node0x1d76ee0;
	Node0x1d76ee0 -> Node0x1d76f50;
	Node0x1d76f50 -> Node0x1d76fc0;
	Node0x1d76540 -> Node0x1d77030;
	Node0x1d77030 -> Node0x1d770d0;
	Node0x1d76e70 -> Node0x1d77170;
	Node0x1d76d90 -> Node0x1d771e0;
	Node0x1d771e0 -> Node0x1d77250;
	Node0x1d772f0 -> Node0x1d77360;
	Node0x1d76e00 -> Node0x1d77360;
	Node0x1d77360 -> Node0x1d773d0;
	Node0x1d76e70 -> Node0x1d773d0;
	Node0x1d773d0 -> Node0x1d77440;
	Node0x1d76ee0 -> Node0x1d77440;
	Node0x1d77440 -> Node0x1d774b0;
	Node0x1d76fc0 -> Node0x1d774b0;
	Node0x1d774b0 -> Node0x1d77520;
	Node0x1d770d0 -> Node0x1d77520;
	Node0x1d77520 -> Node0x1d77590;
	Node0x1d77170 -> Node0x1d77590;
	Node0x1d77590 -> Node0x1d77600;
	Node0x1d77250 -> Node0x1d77600;
	Node0x1d76d20 -> Node0x1d77670;
	Node0x1d77600 -> Node0x1d77670;
	Node0x1d77670 -> Node0x1d17268;
	Node0x1d17268 -> Node0x1d77b10;
}
