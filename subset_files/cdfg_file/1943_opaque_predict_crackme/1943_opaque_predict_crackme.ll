; ModuleID = '../.././c_source_file/1943_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1943_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, -1
  %6 = or i32 %5, %0
  %7 = xor i32 %6, -1
  %8 = or i32 %7, %4
  %9 = or i32 %2, %1
  %10 = and i32 %9, %0
  %11 = sub i32 %8, %10
  %12 = or i32 %1, %0
  %13 = xor i32 %2, %1
  %14 = xor i32 %13, -1
  %15 = and i32 %12, %14
  %16 = and i32 %1, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %14, %17
  %19 = or i32 %4, %0
  %20 = xor i32 %19, %2
  %21 = xor i32 %12, -1
  %22 = xor i32 %21, %2
  %23 = and i32 %2, %0
  %24 = or i32 %23, %4
  %25 = and i32 %4, %2
  %26 = and i32 %25, %0
  %27 = xor i32 %0, -1
  %28 = or i32 %4, %2
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %26, %30
  %32 = xor i32 %9, -1
  %33 = and i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = xor i32 %34, %0
  %36 = or i32 %2, %0
  %37 = xor i32 %1, %0
  %38 = and i32 %36, %37
  %39 = or i32 %5, %1
  %40 = xor i32 %39, -1
  %41 = or i32 %16, %40
  %42 = and i32 %13, %0
  %43 = xor i32 %2, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %37, %44
  %46 = xor i32 %23, -1
  %47 = and i32 %46, %4
  %48 = and i32 %33, %0
  %49 = xor i32 %9, %0
  %50 = xor i32 %49, 2147483647
  %51 = xor i32 %50, %48
  %52 = and i32 %19, %44
  %53 = or i32 %48, %49
  %54 = shl i32 %53, 1
  %55 = xor i32 %37, -1
  %56 = and i32 %43, %55
  %57 = and i32 %5, %1
  %58 = xor i32 %57, -1
  %59 = or i32 %58, %0
  %60 = or i32 %14, %27
  %61 = and i32 %19, %14
  %62 = and i32 %46, %1
  %63 = xor i32 %16, %2
  %64 = and i32 %4, %0
  %65 = xor i32 %64, -1
  %66 = and i32 %43, %65
  %67 = and i32 %33, %27
  %68 = or i32 %67, %10
  %69 = and i32 %6, %37
  %70 = xor i32 %28, %27
  %71 = xor i32 %70, %26
  %72 = or i32 %44, %55
  %73 = and i32 %5, %0
  %74 = xor i32 %73, -1
  %75 = and i32 %74, %1
  %76 = and i32 %39, %27
  %77 = or i32 %57, %64
  %78 = or i32 %43, %55
  %79 = xor i32 %14, %0
  %80 = and i32 %5, %55
  %81 = and i32 %13, %19
  %82 = or i32 %73, %33
  %83 = and i32 %12, %5
  %84 = xor i32 %19, -1
  %85 = or i32 %14, %84
  %86 = or i32 %13, %27
  %87 = or i32 %37, %7
  %88 = or i32 %33, %0
  %89 = or i32 %5, %55
  %90 = or i32 %37, %2
  %91 = or i32 %43, %64
  %92 = xor i32 %73, %39
  %93 = xor i32 %64, %2
  %94 = and i32 %13, %17
  %95 = and i32 %39, %0
  %96 = xor i32 %6, %1
  %97 = and i32 %55, %2
  %98 = or i32 %16, %32
  %99 = and i32 %6, %1
  %100 = and i32 %13, %65
  %101 = xor i32 %6, %16
  %102 = or i32 %13, %0
  %103 = xor i32 %26, %102
  %104 = and i32 %6, %55
  %105 = or i32 %14, %21
  %106 = or i32 %32, %0
  %107 = or i32 %34, %27
  %108 = or i32 %13, %64
  %109 = or i32 %7, %1
  %110 = shl i32 %109, 1
  %111 = and i32 %34, %27
  %112 = or i32 %64, %2
  %113 = and i32 %74, %55
  %114 = or i32 %84, %2
  %115 = or i32 %64, %5
  %116 = shl i32 %115, 1
  %117 = xor i32 %36, -1
  %118 = or i32 %117, %55
  %119 = or i32 %43, %21
  %120 = and i32 %9, %27
  %121 = or i32 %48, %120
  %122 = or i32 %40, %27
  %123 = or i32 %23, %55
  %124 = xor i32 %23, %12
  %125 = or i32 %14, %0
  %126 = or i32 %43, %84
  %127 = or i32 %64, %44
  %128 = and i32 %25, %27
  %129 = xor i32 %128, %86
  %130 = and i32 %5, %65
  %131 = and i32 %28, %0
  %132 = xor i32 %131, -1
  %133 = xor i32 %128, %132
  %134 = xor i32 %39, %0
  %135 = and i32 %43, %19
  %136 = and i32 %14, %0
  %137 = or i32 %37, %117
  %138 = xor i32 %73, %1
  %139 = xor i32 %64, %58
  %140 = and i32 %34, %0
  %141 = and i32 %13, %27
  %142 = and i32 %14, %65
  %143 = or i32 %67, %42
  %144 = xor i32 %84, %2
  %145 = xor i32 %58, %0
  %146 = xor i32 %13, %0
  %147 = or i32 %26, %146
  %148 = and i32 %43, %37
  %149 = and i32 %37, %2
  %150 = or i32 %44, %21
  %151 = or i32 %9, %27
  %152 = xor i32 %26, -1
  %153 = xor i32 %146, %152
  %154 = xor i32 %17, %2
  %155 = shl i32 %154, 1
  %156 = xor i32 %65, %2
  %157 = xor i32 %141, -1
  %158 = xor i32 %48, %157
  %159 = and i32 %37, %74
  %160 = shl i32 %65, 1
  %161 = and i32 %36, %4
  %162 = and i32 %37, %46
  %163 = xor i32 %9, %16
  %164 = or i32 %7, %55
  %165 = and i32 %37, %5
  %166 = xor i32 %12, %2
  %167 = xor i32 %42, -1
  %168 = xor i32 %67, %167
  %169 = and i32 %32, %27
  %170 = shl i32 %169, 3
  %171 = and i32 %57, %27
  %172 = mul i32 %171, -10
  %173 = and i32 %32, %0
  %174 = mul i32 %173, -25
  %175 = and i32 %57, %0
  %176 = mul i32 %175, -33
  %177 = and i32 %40, %27
  %178 = mul i32 %177, -11
  %179 = shl i32 %67, 3
  %180 = and i32 %40, %0
  %181 = mul i32 %180, -12
  %182 = shl i32 %48, 4
  %183 = add i32 %23, %1
  %184 = add i32 %183, %9
  %185 = add i32 %184, %58
  %186 = add i32 %185, %123
  %187 = add i32 %186, %107
  %188 = add i32 %187, %99
  %189 = add i32 %188, %88
  %190 = add i32 %189, %82
  %191 = add i32 %190, %52
  %192 = sub i32 %191, %15
  %193 = add i32 %192, %51
  %194 = shl i32 %193, 1
  %195 = add i32 %83, %57
  %196 = sub i32 %195, %69
  %197 = sub i32 %196, %133
  %198 = mul i32 %197, 5
  %199 = add i32 %165, %46
  %200 = add i32 %199, %102
  %201 = mul i32 %200, 3
  %202 = shl i32 %0, 1
  %203 = sub i32 %202, %16
  %204 = add i32 %203, %19
  %205 = sub i32 %204, %2
  %206 = add i32 %205, %21
  %207 = add i32 %206, %20
  %208 = add i32 %207, %22
  %209 = add i32 %208, %32
  %210 = add i32 %209, %14
  %211 = sub i32 %210, %63
  %212 = sub i32 %211, %80
  %213 = sub i32 %212, %89
  %214 = sub i32 %213, %90
  %215 = sub i32 %214, %93
  %216 = add i32 %215, %97
  %217 = sub i32 %216, %112
  %218 = sub i32 %217, %39
  %219 = add i32 %218, %114
  %220 = add i32 %219, %73
  %221 = sub i32 %220, %130
  %222 = sub i32 %221, %144
  %223 = sub i32 %222, %149
  %224 = sub i32 %223, %156
  %225 = sub i32 %224, %160
  %226 = add i32 %225, %166
  %227 = add i32 %226, %18
  %228 = sub i32 %227, %24
  %229 = add i32 %228, %35
  %230 = sub i32 %229, %38
  %231 = add i32 %230, %41
  %232 = sub i32 %231, %42
  %233 = sub i32 %232, %45
  %234 = add i32 %233, %47
  %235 = sub i32 %234, %56
  %236 = add i32 %235, %59
  %237 = add i32 %236, %60
  %238 = sub i32 %237, %61
  %239 = add i32 %238, %62
  %240 = add i32 %239, %66
  %241 = add i32 %240, %72
  %242 = add i32 %241, %75
  %243 = sub i32 %242, %76
  %244 = add i32 %243, %77
  %245 = add i32 %244, %78
  %246 = sub i32 %245, %79
  %247 = sub i32 %246, %81
  %248 = add i32 %247, %85
  %249 = add i32 %248, %86
  %250 = sub i32 %249, %87
  %251 = add i32 %250, %91
  %252 = add i32 %251, %92
  %253 = add i32 %252, %94
  %254 = add i32 %253, %95
  %255 = sub i32 %254, %96
  %256 = add i32 %255, %98
  %257 = sub i32 %256, %100
  %258 = add i32 %257, %101
  %259 = sub i32 %258, %104
  %260 = sub i32 %259, %105
  %261 = add i32 %260, %106
  %262 = sub i32 %261, %108
  %263 = add i32 %262, %49
  %264 = add i32 %263, %111
  %265 = sub i32 %264, %113
  %266 = sub i32 %265, %116
  %267 = sub i32 %266, %118
  %268 = add i32 %267, %119
  %269 = add i32 %268, %122
  %270 = add i32 %269, %124
  %271 = add i32 %270, %125
  %272 = add i32 %271, %126
  %273 = add i32 %272, %127
  %274 = add i32 %273, %134
  %275 = add i32 %274, %135
  %276 = add i32 %275, %136
  %277 = sub i32 %276, %137
  %278 = add i32 %277, %138
  %279 = add i32 %278, %139
  %280 = add i32 %279, %140
  %281 = sub i32 %280, %141
  %282 = sub i32 %281, %142
  %283 = add i32 %282, %145
  %284 = sub i32 %283, %148
  %285 = sub i32 %284, %150
  %286 = sub i32 %285, %151
  %287 = sub i32 %286, %155
  %288 = add i32 %287, %159
  %289 = add i32 %288, %161
  %290 = add i32 %289, %162
  %291 = sub i32 %290, %163
  %292 = add i32 %291, %164
  %293 = add i32 %292, %31
  %294 = sub i32 %293, %68
  %295 = sub i32 %294, %71
  %296 = add i32 %295, %103
  %297 = sub i32 %296, %110
  %298 = sub i32 %297, %121
  %299 = sub i32 %298, %129
  %300 = add i32 %299, %143
  %301 = sub i32 %300, %147
  %302 = sub i32 %301, %153
  %303 = add i32 %302, %158
  %304 = sub i32 %303, %168
  %305 = sub i32 %304, %170
  %306 = add i32 %305, %172
  %307 = add i32 %306, %174
  %308 = add i32 %307, %176
  %309 = add i32 %308, %178
  %310 = sub i32 %309, %179
  %311 = add i32 %310, %181
  %312 = sub i32 %311, %182
  %313 = sub i32 %312, %54
  %314 = add i32 %313, %201
  %315 = add i32 %314, %198
  %316 = add i32 %315, %194
  %317 = icmp eq i32 %11, %316
  %318 = select i1 %317, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %319 = tail call i32 @puts(i8* nonnull dereferenceable(1) %318)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
