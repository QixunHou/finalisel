; ModuleID = '../.././c_source_file/1690_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1690_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = or i32 %2, %1
  %9 = xor i32 %7, %8
  %10 = or i32 %1, %0
  %11 = xor i32 %5, -1
  %12 = and i32 %11, %4
  %13 = xor i32 %12, -1
  %14 = xor i32 %4, %3
  %15 = and i32 %14, %13
  %16 = and i32 %14, %5
  %17 = add i32 %15, %9
  %18 = shl i32 %17, 1
  %19 = sub i32 %10, %16
  %20 = add i32 %19, %18
  %21 = xor i32 %7, %10
  %22 = xor i32 %1, -1
  %23 = add i32 %1, 1
  %24 = or i32 %22, %0
  %25 = xor i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %24, %26
  %28 = and i32 %1, %0
  %29 = xor i32 %2, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %28, %31
  %33 = xor i32 %1, %0
  %34 = and i32 %33, %2
  %35 = and i32 %2, %1
  %36 = xor i32 %35, -1
  %37 = add i32 %35, 1
  %38 = xor i32 %28, -1
  %39 = and i32 %26, %38
  %40 = or i32 %2, %0
  %41 = or i32 %7, %22
  %42 = xor i32 %0, -1
  %43 = xor i32 %2, %1
  %44 = or i32 %43, %42
  %45 = xor i32 %33, -1
  %46 = or i32 %25, %45
  %47 = and i32 %22, %0
  %48 = or i32 %35, %47
  %49 = and i32 %22, %2
  %50 = and i32 %49, %42
  %51 = xor i32 %44, -1
  %52 = or i32 %50, %51
  %53 = or i32 %31, %45
  %54 = xor i32 %8, -1
  %55 = or i32 %54, %0
  %56 = shl i32 %55, 1
  %57 = or i32 %29, %1
  %58 = xor i32 %57, -1
  %59 = and i32 %57, %42
  %60 = or i32 %58, %42
  %61 = xor i32 %10, -1
  %62 = or i32 %29, %61
  %63 = and i32 %29, %1
  %64 = or i32 %7, %63
  %65 = xor i32 %36, %0
  %66 = and i32 %35, %0
  %67 = and i32 %8, %42
  %68 = xor i32 %66, -1
  %69 = xor i32 %67, %68
  %70 = xor i32 %40, %28
  %71 = and i32 %25, %1
  %72 = or i32 %28, %58
  %73 = xor i32 %63, -1
  %74 = and i32 %73, %42
  %75 = and i32 %43, %42
  %76 = xor i32 %40, -1
  %77 = xor i32 %43, -1
  %78 = and i32 %77, %42
  %79 = and i32 %29, %0
  %80 = xor i32 %79, -1
  %81 = and i32 %33, %80
  %82 = or i32 %22, %2
  %83 = and i32 %82, %0
  %84 = or i32 %50, %83
  %85 = and i32 %49, %0
  %86 = or i32 %43, %0
  %87 = xor i32 %85, %86
  %88 = shl i32 %87, 1
  %89 = and i32 %77, %38
  %90 = and i32 %35, %42
  %91 = and i32 %8, %0
  %92 = xor i32 %91, 2147483647
  %93 = xor i32 %92, %90
  %94 = shl i32 %93, 1
  %95 = or i32 %90, %91
  %96 = and i32 %26, %1
  %97 = and i32 %29, %38
  %98 = xor i32 %43, %0
  %99 = xor i32 %98, -1
  %100 = or i32 %66, %99
  %101 = xor i32 %82, %0
  %102 = xor i32 %101, -1
  %103 = xor i32 %85, %102
  %104 = and i32 %24, %29
  %105 = or i32 %66, %75
  %106 = or i32 %31, %1
  %107 = and i32 %30, %22
  %108 = xor i32 %8, %0
  %109 = or i32 %66, %108
  %110 = or i32 %28, %77
  %111 = shl i32 %110, 1
  %112 = and i32 %43, %0
  %113 = xor i32 %112, -1
  %114 = xor i32 %90, %113
  %115 = or i32 %66, %67
  %116 = and i32 %40, %45
  %117 = and i32 %33, %26
  %118 = shl i32 %117, 1
  %119 = xor i32 %7, %24
  %120 = or i32 %7, %61
  %121 = or i32 %26, %61
  %122 = or i32 %76, %1
  %123 = and i32 %25, %33
  %124 = or i32 %47, %29
  %125 = or i32 %7, %33
  %126 = and i32 %80, %45
  %127 = and i32 %57, %0
  %128 = and i32 %40, %22
  %129 = xor i32 %77, %0
  %130 = xor i32 %7, -1
  %131 = and i32 %33, %130
  %132 = xor i32 %57, %0
  %133 = xor i32 %47, %73
  %134 = or i32 %79, %45
  %135 = and i32 %26, %45
  %136 = or i32 %61, %2
  %137 = xor i32 %47, -1
  %138 = and i32 %26, %137
  %139 = xor i32 %57, %28
  %140 = shl i32 %139, 1
  %141 = and i32 %43, %24
  %142 = xor i32 %24, -1
  %143 = or i32 %43, %142
  %144 = shl i32 %143, 1
  %145 = add i32 %63, 1
  %146 = and i32 %25, %10
  %147 = and i32 %25, %45
  %148 = xor i32 %79, %57
  %149 = and i32 %10, %2
  %150 = or i32 %63, %0
  %151 = xor i32 %31, %1
  %152 = or i32 %77, %142
  %153 = or i32 %33, %26
  %154 = or i32 %26, %1
  %155 = xor i32 %7, %22
  %156 = xor i32 %83, 2147483647
  %157 = xor i32 %156, %50
  %158 = shl i32 %157, 1
  %159 = xor i32 %61, %2
  %160 = or i32 %47, %2
  %161 = and i32 %40, %1
  %162 = or i32 %79, %1
  %163 = add i32 %28, 1
  %164 = or i32 %57, %42
  %165 = or i32 %43, %28
  %166 = shl i32 %137, 1
  %167 = xor i32 %75, %68
  %168 = and i32 %29, %137
  %169 = or i32 %7, %45
  %170 = shl i32 %169, 1
  %171 = xor i32 %76, %1
  %172 = and i32 %26, %22
  %173 = add i32 %10, 1
  %174 = or i32 %28, %76
  %175 = xor i32 %30, %28
  %176 = and i32 %43, %38
  %177 = xor i32 %58, %0
  %178 = or i32 %26, %142
  %179 = or i32 %25, %142
  %180 = or i32 %7, %1
  %181 = shl i32 %180, 1
  %182 = shl i32 %86, 1
  %183 = xor i32 %142, %2
  %184 = or i32 %47, %26
  %185 = shl i32 %77, 1
  %186 = and i32 %80, %1
  %187 = add i32 %8, 1
  %188 = or i32 %47, %77
  %189 = and i32 %36, %0
  %190 = or i32 %33, %31
  %191 = xor i32 %130, %1
  %192 = or i32 %28, %54
  %193 = xor i32 %86, -1
  %194 = or i32 %85, %193
  %195 = xor i32 %80, %1
  %196 = and i32 %77, %137
  %197 = or i32 %85, %98
  %198 = xor i32 %47, %36
  %199 = xor i32 %79, %1
  %200 = shl i32 %199, 2
  %201 = xor i32 %54, %0
  %202 = xor i32 %73, %0
  %203 = xor i32 %50, %44
  %204 = and i32 %24, %2
  %205 = xor i32 %63, %0
  %206 = xor i32 %28, %2
  %207 = and i32 %77, %0
  %208 = or i32 %79, %22
  %209 = shl i32 %208, 1
  %210 = or i32 %25, %33
  %211 = or i32 %58, %0
  %212 = xor i32 %35, %0
  %213 = or i32 %35, %0
  %214 = xor i32 %85, %99
  %215 = and i32 %30, %1
  %216 = xor i32 %38, %2
  %217 = and i32 %25, %38
  %218 = or i32 %76, %22
  %219 = shl i32 %218, 2
  %220 = and i32 %30, %33
  %221 = xor i32 %137, %2
  %222 = or i32 %73, %42
  %223 = xor i32 %7, %73
  %224 = or i32 %43, %47
  %225 = xor i32 %24, %2
  %226 = shl i32 %225, 1
  %227 = and i32 %24, %77
  %228 = or i32 %57, %0
  %229 = or i32 %63, %47
  %230 = and i32 %10, %77
  %231 = or i32 %43, %61
  %232 = or i32 %25, %22
  %233 = shl i32 %232, 2
  %234 = and i32 %25, %22
  %235 = and i32 %80, %22
  %236 = shl i32 %7, 1
  %237 = or i32 %25, %47
  %238 = or i32 %77, %42
  %239 = and i32 %10, %26
  %240 = or i32 %7, %54
  %241 = or i32 %90, %112
  %242 = and i32 %25, %24
  %243 = or i32 %28, %29
  %244 = or i32 %36, %0
  %245 = shl i32 %79, 1
  %246 = or i32 %7, %142
  %247 = or i32 %77, %61
  %248 = shl i32 %91, 1
  %249 = xor i32 %30, %1
  %250 = and i32 %30, %45
  %251 = or i32 %85, %101
  %252 = add i32 %24, 1
  %253 = and i32 %43, %10
  %254 = and i32 %40, %33
  %255 = xor i32 %40, %1
  %256 = or i32 %28, %26
  %257 = or i32 %33, %2
  %258 = or i32 %33, %29
  %259 = and i32 %82, %42
  %260 = or i32 %85, %259
  %261 = shl i32 %260, 1
  %262 = or i32 %8, %0
  %263 = or i32 %73, %0
  %264 = and i32 %54, %42
  %265 = mul i32 %264, -13
  %266 = and i32 %63, %42
  %267 = and i32 %54, %0
  %268 = and i32 %63, %0
  %269 = and i32 %58, %42
  %270 = mul i32 %269, 18
  %271 = and i32 %58, %0
  %272 = and i32 %4, %3
  %273 = xor i32 %272, -1
  %274 = xor i32 %5, %4
  %275 = xor i32 %274, -1
  %276 = and i32 %275, %273
  %277 = and i32 %14, %275
  %278 = xor i32 %4, -1
  %279 = xor i32 %5, %3
  %280 = xor i32 %279, -1
  %281 = or i32 %280, %278
  %282 = or i32 %279, %4
  %283 = or i32 %4, %3
  %284 = xor i32 %283, -1
  %285 = xor i32 %284, %5
  %286 = xor i32 %14, -1
  %287 = or i32 %11, %286
  %288 = or i32 %12, %3
  %289 = and i32 %274, %3
  %290 = or i32 %279, %284
  %291 = or i32 %11, %3
  %292 = xor i32 %12, %291
  %293 = and i32 %5, %4
  %294 = xor i32 %3, -1
  %295 = or i32 %294, %4
  %296 = xor i32 %295, -1
  %297 = or i32 %293, %296
  %298 = and i32 %5, %3
  %299 = xor i32 %298, -1
  %300 = and i32 %299, %278
  %301 = or i32 %5, %4
  %302 = xor i32 %301, %3
  %303 = and i32 %294, %4
  %304 = or i32 %303, %280
  %305 = xor i32 %299, %4
  %306 = or i32 %275, %296
  %307 = xor i32 %303, -1
  %308 = and i32 %307, %5
  %309 = xor i32 %13, %3
  %310 = shl i32 %4, 1
  %311 = or i32 %5, %3
  %312 = xor i32 %311, -1
  %313 = or i32 %272, %312
  %314 = and i32 %13, %294
  %315 = xor i32 %273, %5
  %316 = and i32 %294, %5
  %317 = and i32 %316, %278
  %318 = or i32 %279, %278
  %319 = xor i32 %317, %318
  %320 = shl i32 %319, 2
  %321 = xor i32 %311, %4
  %322 = and i32 %298, %4
  %323 = or i32 %280, %4
  %324 = xor i32 %322, %323
  %325 = xor i32 %279, %4
  %326 = xor i32 %293, %283
  %327 = and i32 %11, %273
  %328 = and i32 %274, %286
  %329 = xor i32 %293, -1
  %330 = and i32 %329, %286
  %331 = and i32 %11, %286
  %332 = or i32 %298, %4
  %333 = shl i32 %332, 1
  %334 = xor i32 %303, %5
  %335 = or i32 %293, %14
  %336 = and i32 %279, %4
  %337 = add i32 %303, 1
  %338 = xor i32 %291, -1
  %339 = or i32 %338, %4
  %340 = shl i32 %339, 2
  %341 = or i32 %14, %11
  %342 = or i32 %280, %284
  %343 = and i32 %11, %3
  %344 = or i32 %343, %4
  %345 = and i32 %311, %4
  %346 = or i32 %312, %4
  %347 = xor i32 %322, %346
  %348 = or i32 %11, %4
  %349 = xor i32 %348, -1
  %350 = xor i32 %349, %3
  %351 = shl i32 %350, 1
  %352 = and i32 %295, %280
  %353 = or i32 %291, %278
  %354 = or i32 %272, %338
  %355 = add i32 %293, 1
  %356 = or i32 %293, %3
  %357 = or i32 %349, %294
  %358 = and i32 %11, %307
  %359 = or i32 %14, %5
  %360 = and i32 %13, %3
  %361 = xor i32 %293, %311
  %362 = shl i32 %361, 1
  %363 = or i32 %12, %298
  %364 = or i32 %293, %312
  %365 = add i32 %298, 1
  %366 = xor i32 %311, %272
  %367 = and i32 %274, %273
  %368 = and i32 %298, %278
  %369 = or i32 %368, %345
  %370 = or i32 %294, %5
  %371 = and i32 %370, %4
  %372 = xor i32 %371, -1
  %373 = xor i32 %317, %372
  %374 = add i32 %291, 1
  %375 = and i32 %279, %307
  %376 = shl i32 %346, 1
  %377 = or i32 %275, %3
  %378 = or i32 %11, %284
  %379 = and i32 %299, %4
  %380 = shl i32 %379, 1
  %381 = and i32 %291, %4
  %382 = or i32 %368, %336
  %383 = and i32 %301, %14
  %384 = shl i32 %343, 1
  %385 = or i32 %11, %296
  %386 = xor i32 %307, %5
  %387 = and i32 %14, %329
  %388 = xor i32 %322, %325
  %389 = or i32 %303, %11
  %390 = or i32 %293, %284
  %391 = xor i32 %298, %4
  %392 = and i32 %286, %5
  %393 = and i32 %329, %294
  %394 = add i32 %348, 1
  %395 = xor i32 %318, -1
  %396 = or i32 %317, %395
  %397 = xor i32 %343, -1
  %398 = xor i32 %293, %397
  %399 = add i32 %12, 1
  %400 = or i32 %293, %343
  %401 = and i32 %275, %294
  %402 = xor i32 %397, %4
  %403 = and i32 %275, %307
  %404 = and i32 %274, %307
  %405 = or i32 %275, %286
  %406 = xor i32 %293, %295
  %407 = and i32 %316, %4
  %408 = xor i32 %370, -1
  %409 = or i32 %408, %4
  %410 = xor i32 %407, %409
  %411 = and i32 %273, %5
  %412 = and i32 %275, %3
  %413 = shl i32 %278, 1
  %414 = xor i32 %338, %4
  %415 = or i32 %312, %278
  %416 = xor i32 %370, %4
  %417 = or i32 %407, %416
  %418 = or i32 %293, %286
  %419 = or i32 %343, %303
  %420 = xor i32 %325, -1
  %421 = xor i32 %407, %420
  %422 = xor i32 %336, 2147483647
  %423 = xor i32 %422, %368
  %424 = and i32 %295, %5
  %425 = xor i32 %301, -1
  %426 = or i32 %274, %303
  %427 = shl i32 %426, 1
  %428 = or i32 %343, %278
  %429 = and i32 %397, %278
  %430 = or i32 %397, %278
  %431 = and i32 %280, %307
  %432 = xor i32 %416, -1
  %433 = xor i32 %407, %432
  %434 = xor i32 %291, %4
  %435 = add i32 %283, 1
  %436 = or i32 %338, %278
  %437 = and i32 %283, %275
  %438 = or i32 %397, %4
  %439 = or i32 %275, %294
  %440 = or i32 %322, %420
  %441 = and i32 %348, %3
  %442 = shl i32 %5, 1
  %443 = or i32 %293, %294
  %444 = or i32 %274, %272
  %445 = and i32 %312, %278
  %446 = and i32 %343, %278
  %447 = and i32 %312, %4
  %448 = mul i32 %447, -10
  %449 = and i32 %343, %4
  %450 = and i32 %338, %278
  %451 = shl i32 %450, 3
  %452 = mul i32 %368, 23
  %453 = and i32 %338, %4
  %454 = add i32 %204, %26
  %455 = add i32 %454, %124
  %456 = add i32 %455, %97
  %457 = add i32 %456, %256
  %458 = add i32 %457, %108
  %459 = add i32 %458, %205
  %460 = add i32 %459, %191
  %461 = add i32 %460, %178
  %462 = add i32 %461, %162
  %463 = add i32 %462, %153
  %464 = add i32 %463, %152
  %465 = add i32 %464, %134
  %466 = add i32 %465, %131
  %467 = add i32 %466, %129
  %468 = add i32 %467, %89
  %469 = add i32 %468, %72
  %470 = add i32 %469, %64
  %471 = add i32 %470, %53
  %472 = add i32 %471, %48
  %473 = add i32 %472, %39
  %474 = add i32 %473, %32
  %475 = add i32 %474, %11
  %476 = add i32 %475, %286
  %477 = add i32 %476, %251
  %478 = add i32 %477, %203
  %479 = add i32 %478, %95
  %480 = add i32 %479, %411
  %481 = add i32 %480, %419
  %482 = add i32 %481, %400
  %483 = add i32 %482, %398
  %484 = add i32 %483, %390
  %485 = add i32 %484, %335
  %486 = add i32 %485, %297
  %487 = add i32 %486, %369
  %488 = add i32 %487, %423
  %489 = shl i32 %488, 1
  %490 = sub i32 %184, %213
  %491 = sub i32 %490, %175
  %492 = sub i32 %491, %141
  %493 = sub i32 %492, %105
  %494 = add i32 %493, %394
  %495 = add i32 %494, %312
  %496 = add i32 %495, %358
  %497 = add i32 %496, %406
  %498 = sub i32 %497, %428
  %499 = add i32 %498, %328
  %500 = mul i32 %499, 5
  %501 = sub i32 %268, %90
  %502 = sub i32 %501, %266
  %503 = mul i32 %502, 7
  %504 = add i32 %241, %210
  %505 = add i32 %504, %449
  %506 = shl i32 %505, 2
  %507 = add i32 %201, %164
  %508 = sub i32 %507, %44
  %509 = mul i32 %508, 3
  %510 = sub i32 %446, %445
  %511 = mul i32 %510, 6
  %512 = add i32 %66, %271
  %513 = mul i32 %512, -12
  %514 = add i32 %453, %267
  %515 = mul i32 %514, 15
  %516 = sub i32 %23, %24
  %517 = add i32 %516, %163
  %518 = sub i32 %517, %33
  %519 = add i32 %518, %173
  %520 = sub i32 %519, %28
  %521 = add i32 %520, %252
  %522 = add i32 %521, %34
  %523 = add i32 %522, %37
  %524 = sub i32 %523, %40
  %525 = sub i32 %524, %25
  %526 = add i32 %525, %58
  %527 = add i32 %526, %62
  %528 = add i32 %527, %76
  %529 = sub i32 %528, %104
  %530 = sub i32 %529, %63
  %531 = add i32 %530, %136
  %532 = add i32 %531, %145
  %533 = add i32 %532, %149
  %534 = add i32 %533, %159
  %535 = add i32 %534, %160
  %536 = sub i32 %535, %166
  %537 = add i32 %536, %168
  %538 = sub i32 %537, %183
  %539 = add i32 %538, %187
  %540 = sub i32 %539, %57
  %541 = sub i32 %540, %206
  %542 = add i32 %541, %216
  %543 = add i32 %542, %221
  %544 = sub i32 %543, %243
  %545 = sub i32 %544, %35
  %546 = add i32 %545, %43
  %547 = sub i32 %546, %257
  %548 = add i32 %547, %258
  %549 = add i32 %548, %21
  %550 = sub i32 %549, %27
  %551 = add i32 %550, %41
  %552 = sub i32 %551, %46
  %553 = sub i32 %552, %59
  %554 = add i32 %553, %60
  %555 = add i32 %554, %65
  %556 = sub i32 %555, %70
  %557 = add i32 %556, %71
  %558 = add i32 %557, %74
  %559 = sub i32 %558, %75
  %560 = add i32 %559, %78
  %561 = sub i32 %560, %81
  %562 = sub i32 %561, %96
  %563 = add i32 %562, %106
  %564 = sub i32 %563, %107
  %565 = add i32 %564, %116
  %566 = add i32 %565, %119
  %567 = sub i32 %566, %120
  %568 = add i32 %567, %121
  %569 = add i32 %568, %122
  %570 = sub i32 %569, %123
  %571 = sub i32 %570, %112
  %572 = add i32 %571, %125
  %573 = add i32 %572, %126
  %574 = sub i32 %573, %127
  %575 = sub i32 %574, %128
  %576 = add i32 %575, %132
  %577 = sub i32 %576, %133
  %578 = add i32 %577, %135
  %579 = add i32 %578, %138
  %580 = sub i32 %579, %146
  %581 = sub i32 %580, %147
  %582 = add i32 %581, %148
  %583 = add i32 %582, %150
  %584 = sub i32 %583, %151
  %585 = add i32 %584, %154
  %586 = add i32 %585, %155
  %587 = sub i32 %586, %161
  %588 = add i32 %587, %165
  %589 = sub i32 %588, %171
  %590 = sub i32 %589, %172
  %591 = add i32 %590, %174
  %592 = add i32 %591, %176
  %593 = add i32 %592, %177
  %594 = add i32 %593, %179
  %595 = sub i32 %594, %185
  %596 = sub i32 %595, %186
  %597 = add i32 %596, %188
  %598 = sub i32 %597, %189
  %599 = add i32 %598, %190
  %600 = sub i32 %599, %192
  %601 = add i32 %600, %195
  %602 = add i32 %601, %196
  %603 = sub i32 %602, %198
  %604 = add i32 %603, %202
  %605 = add i32 %604, %207
  %606 = add i32 %605, %211
  %607 = add i32 %606, %212
  %608 = sub i32 %607, %215
  %609 = sub i32 %608, %217
  %610 = sub i32 %609, %220
  %611 = add i32 %610, %222
  %612 = sub i32 %611, %223
  %613 = add i32 %612, %224
  %614 = sub i32 %613, %226
  %615 = add i32 %614, %227
  %616 = sub i32 %615, %98
  %617 = add i32 %616, %228
  %618 = sub i32 %617, %229
  %619 = add i32 %618, %230
  %620 = add i32 %619, %231
  %621 = add i32 %620, %234
  %622 = add i32 %621, %235
  %623 = sub i32 %622, %236
  %624 = sub i32 %623, %237
  %625 = sub i32 %624, %238
  %626 = add i32 %625, %239
  %627 = sub i32 %626, %240
  %628 = sub i32 %627, %242
  %629 = sub i32 %628, %244
  %630 = sub i32 %629, %245
  %631 = add i32 %630, %246
  %632 = sub i32 %631, %247
  %633 = add i32 %632, %249
  %634 = sub i32 %633, %250
  %635 = add i32 %634, %253
  %636 = add i32 %635, %254
  %637 = add i32 %636, %255
  %638 = add i32 %637, %262
  %639 = sub i32 %638, %263
  %640 = sub i32 %639, %52
  %641 = sub i32 %640, %56
  %642 = add i32 %641, %69
  %643 = add i32 %642, %84
  %644 = add i32 %643, %100
  %645 = add i32 %644, %103
  %646 = sub i32 %645, %109
  %647 = sub i32 %646, %111
  %648 = sub i32 %647, %114
  %649 = sub i32 %648, %115
  %650 = sub i32 %649, %118
  %651 = sub i32 %650, %140
  %652 = sub i32 %651, %144
  %653 = sub i32 %652, %167
  %654 = sub i32 %653, %170
  %655 = sub i32 %654, %181
  %656 = sub i32 %655, %182
  %657 = add i32 %656, %194
  %658 = sub i32 %657, %197
  %659 = sub i32 %658, %200
  %660 = sub i32 %659, %209
  %661 = add i32 %660, %214
  %662 = sub i32 %661, %219
  %663 = sub i32 %662, %233
  %664 = sub i32 %663, %248
  %665 = add i32 %664, %265
  %666 = add i32 %665, %270
  %667 = sub i32 %666, %310
  %668 = add i32 %667, %337
  %669 = sub i32 %668, %413
  %670 = add i32 %669, %435
  %671 = sub i32 %670, %88
  %672 = sub i32 %671, %261
  %673 = sub i32 %672, %285
  %674 = add i32 %673, %287
  %675 = add i32 %674, %308
  %676 = add i32 %675, %315
  %677 = sub i32 %676, %327
  %678 = sub i32 %677, %311
  %679 = sub i32 %678, %298
  %680 = add i32 %679, %331
  %681 = sub i32 %680, %334
  %682 = sub i32 %681, %293
  %683 = sub i32 %682, %341
  %684 = add i32 %683, %355
  %685 = add i32 %684, %359
  %686 = add i32 %685, %365
  %687 = sub i32 %686, %279
  %688 = add i32 %687, %374
  %689 = add i32 %688, %378
  %690 = add i32 %689, %385
  %691 = add i32 %690, %386
  %692 = sub i32 %691, %389
  %693 = sub i32 %692, %392
  %694 = add i32 %693, %399
  %695 = add i32 %694, %348
  %696 = add i32 %695, %424
  %697 = add i32 %696, %425
  %698 = add i32 %697, %275
  %699 = add i32 %698, %12
  %700 = sub i32 %699, %442
  %701 = add i32 %700, %513
  %702 = sub i32 %701, %94
  %703 = sub i32 %702, %158
  %704 = sub i32 %703, %276
  %705 = sub i32 %704, %277
  %706 = sub i32 %705, %281
  %707 = add i32 %706, %282
  %708 = add i32 %707, %288
  %709 = add i32 %708, %289
  %710 = sub i32 %709, %290
  %711 = sub i32 %710, %292
  %712 = sub i32 %711, %300
  %713 = sub i32 %712, %302
  %714 = sub i32 %713, %304
  %715 = sub i32 %714, %305
  %716 = add i32 %715, %306
  %717 = add i32 %716, %309
  %718 = sub i32 %717, %313
  %719 = add i32 %718, %314
  %720 = add i32 %719, %321
  %721 = add i32 %720, %325
  %722 = sub i32 %721, %326
  %723 = add i32 %722, %330
  %724 = add i32 %723, %336
  %725 = add i32 %724, %342
  %726 = add i32 %725, %344
  %727 = sub i32 %726, %345
  %728 = add i32 %727, %323
  %729 = add i32 %728, %352
  %730 = sub i32 %729, %353
  %731 = add i32 %730, %354
  %732 = sub i32 %731, %356
  %733 = sub i32 %732, %357
  %734 = sub i32 %733, %360
  %735 = add i32 %734, %363
  %736 = add i32 %735, %364
  %737 = sub i32 %736, %366
  %738 = add i32 %737, %367
  %739 = add i32 %738, %375
  %740 = sub i32 %739, %377
  %741 = sub i32 %740, %381
  %742 = sub i32 %741, %383
  %743 = sub i32 %742, %384
  %744 = add i32 %743, %387
  %745 = sub i32 %744, %391
  %746 = sub i32 %745, %318
  %747 = add i32 %746, %393
  %748 = add i32 %747, %401
  %749 = sub i32 %748, %402
  %750 = sub i32 %749, %403
  %751 = add i32 %750, %404
  %752 = sub i32 %751, %405
  %753 = add i32 %752, %412
  %754 = add i32 %753, %414
  %755 = add i32 %754, %415
  %756 = sub i32 %755, %418
  %757 = sub i32 %756, %429
  %758 = add i32 %757, %430
  %759 = sub i32 %758, %431
  %760 = sub i32 %759, %434
  %761 = add i32 %760, %436
  %762 = add i32 %761, %437
  %763 = sub i32 %762, %438
  %764 = add i32 %763, %439
  %765 = add i32 %764, %441
  %766 = sub i32 %765, %443
  %767 = add i32 %766, %444
  %768 = add i32 %767, %322
  %769 = add i32 %768, %503
  %770 = add i32 %769, %509
  %771 = add i32 %770, %324
  %772 = sub i32 %771, %333
  %773 = sub i32 %772, %340
  %774 = sub i32 %773, %347
  %775 = sub i32 %774, %351
  %776 = sub i32 %775, %362
  %777 = add i32 %776, %373
  %778 = sub i32 %777, %376
  %779 = sub i32 %778, %380
  %780 = sub i32 %779, %382
  %781 = sub i32 %780, %388
  %782 = sub i32 %781, %396
  %783 = sub i32 %782, %410
  %784 = add i32 %783, %417
  %785 = sub i32 %784, %421
  %786 = sub i32 %785, %427
  %787 = add i32 %786, %433
  %788 = add i32 %787, %440
  %789 = add i32 %788, %448
  %790 = add i32 %789, %451
  %791 = add i32 %790, %452
  %792 = sub i32 %791, %320
  %793 = add i32 %792, %511
  %794 = add i32 %793, %515
  %795 = add i32 %794, %506
  %796 = add i32 %795, %500
  %797 = add i32 %796, %489
  %798 = icmp eq i32 %20, %797
  %799 = select i1 %798, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %800 = tail call i32 @puts(i8* nonnull dereferenceable(1) %799)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
