digraph "DFG for'crackme' function" {
	Node0x1c57a80[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1c58100[shape=record, label="  %6 = xor i32 %3, -1"];
	Node0x1c58170[shape=record, label="  %7 = add i32 %5, %6"];
	Node0x1c581e0[shape=record, label="  %8 = xor i32 %2, -1"];
	Node0x1c58250[shape=record, label="  %9 = or i32 %8, %1"];
	Node0x1c582c0[shape=record, label="  %10 = and i32 %2, %1"];
	Node0x1c58360[shape=record, label="  %11 = shl i32 %5, 1"];
	Node0x1c58400[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1c58470[shape=record, label="  %13 = or i32 %2, %1"];
	Node0x1c584e0[shape=record, label="  %14 = shl i32 %1, 1"];
	Node0x1c58550[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1c585c0[shape=record, label="  %16 = shl i32 %13, 1"];
	Node0x1c58630[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x1c586a0[shape=record, label="  %18 = xor i32 %9, -1"];
	Node0x1c58710[shape=record, label="  %19 = and i32 %8, %1"];
	Node0x1c587b0[shape=record, label="  %20 = mul i32 %19, 3"];
	Node0x1c58850[shape=record, label="  %21 = mul i32 %10, 5"];
	Node0x1c588c0[shape=record, label="  %22 = xor i32 %0, -1"];
	Node0x1c58930[shape=record, label="  %23 = or i32 %22, %3"];
	Node0x1c589a0[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x1c58a10[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x1c58a80[shape=record, label="  %26 = and i32 %22, %3"];
	Node0x1c58af0[shape=record, label="  %27 = sub i32 %1, %0"];
	Node0x1c58b60[shape=record, label="  %28 = add i32 %27, 1"];
	Node0x1c58bd0[shape=record, label="  %29 = sub i32 %28, %9"];
	Node0x1c58c40[shape=record, label="  %30 = sub i32 %29, %10"];
	Node0x1c58cb0[shape=record, label="  %31 = sub i32 %30, %13"];
	Node0x1c58d20[shape=record, label="  %32 = add i32 %31, %15"];
	Node0x1c58fa0[shape=record, label="  %33 = add i32 %32, %18"];
	Node0x1c59010[shape=record, label="  %34 = add i32 %33, %20"];
	Node0x1c59080[shape=record, label="  %35 = add i32 %34, %21"];
	Node0x1c590f0[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x1c59160[shape=record, label="  %37 = sub i32 %36, %26"];
	Node0x1c591d0[shape=record, label="  %38 = sub i32 %37, %12"];
	Node0x1c59240[shape=record, label="  %39 = add i32 %38, %17"];
	Node0x1c592b0[shape=record, label="  %40 = add i32 %39, %25"];
	Node0x1c59320[shape=record, label="  %41 = icmp eq i32 %7, %40"];
	Node0x1bf8268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c597c0[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0x1c59810[shape=record, label="  ret void"];
	Node0x1c57a80 -> Node0x1c58100;
	Node0x1c58100 -> Node0x1c58170;
	Node0x1c58170 -> Node0x1c581e0;
	Node0x1c581e0 -> Node0x1c58250;
	Node0x1c58250 -> Node0x1c582c0;
	Node0x1c582c0 -> Node0x1c58360;
	Node0x1c58360 -> Node0x1c58400;
	Node0x1c58400 -> Node0x1c58470;
	Node0x1c58470 -> Node0x1c584e0;
	Node0x1c584e0 -> Node0x1c58550;
	Node0x1c58550 -> Node0x1c585c0;
	Node0x1c585c0 -> Node0x1c58630;
	Node0x1c58630 -> Node0x1c586a0;
	Node0x1c586a0 -> Node0x1c58710;
	Node0x1c58710 -> Node0x1c587b0;
	Node0x1c587b0 -> Node0x1c58850;
	Node0x1c58850 -> Node0x1c588c0;
	Node0x1c588c0 -> Node0x1c58930;
	Node0x1c58930 -> Node0x1c589a0;
	Node0x1c589a0 -> Node0x1c58a10;
	Node0x1c58a10 -> Node0x1c58a80;
	Node0x1c58a80 -> Node0x1c58af0;
	Node0x1c58af0 -> Node0x1c58b60;
	Node0x1c58b60 -> Node0x1c58bd0;
	Node0x1c58bd0 -> Node0x1c58c40;
	Node0x1c58c40 -> Node0x1c58cb0;
	Node0x1c58cb0 -> Node0x1c58d20;
	Node0x1c58d20 -> Node0x1c58fa0;
	Node0x1c58fa0 -> Node0x1c59010;
	Node0x1c59010 -> Node0x1c59080;
	Node0x1c59080 -> Node0x1c590f0;
	Node0x1c590f0 -> Node0x1c59160;
	Node0x1c59160 -> Node0x1c591d0;
	Node0x1c591d0 -> Node0x1c59240;
	Node0x1c59240 -> Node0x1c592b0;
	Node0x1c592b0 -> Node0x1c59320;
	Node0x1c59320 -> Node0x1bf8268;
	Node0x1bf8268 -> Node0x1c597c0;
	Node0x1c597c0 -> Node0x1c59810;
edge [color=red]
	Node0x1c57a80 -> Node0x1c58170;
	Node0x1c58100 -> Node0x1c58170;
	Node0x1c581e0 -> Node0x1c58250;
	Node0x1c57a80 -> Node0x1c58360;
	Node0x1c58360 -> Node0x1c58400;
	Node0x1c584e0 -> Node0x1c58550;
	Node0x1c58470 -> Node0x1c585c0;
	Node0x1c585c0 -> Node0x1c58630;
	Node0x1c58250 -> Node0x1c586a0;
	Node0x1c581e0 -> Node0x1c58710;
	Node0x1c58710 -> Node0x1c587b0;
	Node0x1c582c0 -> Node0x1c58850;
	Node0x1c588c0 -> Node0x1c58930;
	Node0x1c58930 -> Node0x1c589a0;
	Node0x1c589a0 -> Node0x1c58a10;
	Node0x1c588c0 -> Node0x1c58a80;
	Node0x1c58af0 -> Node0x1c58b60;
	Node0x1c58b60 -> Node0x1c58bd0;
	Node0x1c58250 -> Node0x1c58bd0;
	Node0x1c58bd0 -> Node0x1c58c40;
	Node0x1c582c0 -> Node0x1c58c40;
	Node0x1c58c40 -> Node0x1c58cb0;
	Node0x1c58470 -> Node0x1c58cb0;
	Node0x1c58cb0 -> Node0x1c58d20;
	Node0x1c58550 -> Node0x1c58d20;
	Node0x1c58d20 -> Node0x1c58fa0;
	Node0x1c586a0 -> Node0x1c58fa0;
	Node0x1c58fa0 -> Node0x1c59010;
	Node0x1c587b0 -> Node0x1c59010;
	Node0x1c59010 -> Node0x1c59080;
	Node0x1c58850 -> Node0x1c59080;
	Node0x1c59080 -> Node0x1c590f0;
	Node0x1c58930 -> Node0x1c590f0;
	Node0x1c590f0 -> Node0x1c59160;
	Node0x1c58a80 -> Node0x1c59160;
	Node0x1c59160 -> Node0x1c591d0;
	Node0x1c58400 -> Node0x1c591d0;
	Node0x1c591d0 -> Node0x1c59240;
	Node0x1c58630 -> Node0x1c59240;
	Node0x1c59240 -> Node0x1c592b0;
	Node0x1c58a10 -> Node0x1c592b0;
	Node0x1c58170 -> Node0x1c59320;
	Node0x1c592b0 -> Node0x1c59320;
	Node0x1c59320 -> Node0x1bf8268;
	Node0x1bf8268 -> Node0x1c597c0;
}
