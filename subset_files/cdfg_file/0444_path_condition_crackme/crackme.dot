digraph "DFG for'crackme' function" {
	Node0x2064770[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x2064df0[shape=record, label="  %6 = shl i32 %1, 1"];
	Node0x2064e90[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x2064f00[shape=record, label="  %8 = add i32 %5, %7"];
	Node0x2064fa0[shape=record, label="  %9 = xor i32 %3, -1"];
	Node0x2065010[shape=record, label="  %10 = sub i32 %9, %8"];
	Node0x2065080[shape=record, label="  %11 = xor i32 %0, -1"];
	Node0x20650f0[shape=record, label="  %12 = or i32 %11, %3"];
	Node0x2065160[shape=record, label="  %13 = sub i32 %10, %12"];
	Node0x20651d0[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x2065240[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x20652b0[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x2065320[shape=record, label="  %17 = xor i32 %2, %1"];
	Node0x2065390[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x2065400[shape=record, label="  %19 = and i32 %2, %1"];
	Node0x2065470[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x20654e0[shape=record, label="  %21 = or i32 %14, %1"];
	Node0x2065550[shape=record, label="  %22 = add i32 %2, 1"];
	Node0x20655c0[shape=record, label="  %23 = xor i32 %21, -1"];
	Node0x2065660[shape=record, label="  %24 = mul i32 %23, -7"];
	Node0x20656d0[shape=record, label="  %25 = and i32 %11, %3"];
	Node0x2065740[shape=record, label="  %26 = xor i32 %25, -1"];
	Node0x20657b0[shape=record, label="  %27 = xor i32 %11, %3"];
	Node0x2065820[shape=record, label="  %28 = or i32 %3, %0"];
	Node0x2065890[shape=record, label="  %29 = xor i32 %28, -1"];
	Node0x2065930[shape=record, label="  %30 = shl i32 %12, 2"];
	Node0x20659d0[shape=record, label="  %31 = xor i32 %30, -4"];
	Node0x2065a40[shape=record, label="  %32 = shl i32 %25, 1"];
	Node0x2065cc0[shape=record, label="  %33 = and i32 %3, %0"];
	Node0x2065d30[shape=record, label="  %34 = add i32 %15, %26"];
	Node0x2065dd0[shape=record, label="  %35 = mul i32 %34, -3"];
	Node0x2065e40[shape=record, label="  %36 = sub i32 1, %0"];
	Node0x2065eb0[shape=record, label="  %37 = add i32 %36, %1"];
	Node0x2065f20[shape=record, label="  %38 = add i32 %37, %22"];
	Node0x2065f90[shape=record, label="  %39 = add i32 %38, %16"];
	Node0x2066000[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x2066070[shape=record, label="  %41 = sub i32 %40, %21"];
	Node0x20660e0[shape=record, label="  %42 = add i32 %41, %17"];
	Node0x2066150[shape=record, label="  %43 = add i32 %42, %5"];
	Node0x20661c0[shape=record, label="  %44 = sub i32 %43, %19"];
	Node0x2066230[shape=record, label="  %45 = add i32 %44, %18"];
	Node0x20662a0[shape=record, label="  %46 = add i32 %45, %24"];
	Node0x2066310[shape=record, label="  %47 = add i32 %46, %27"];
	Node0x2066380[shape=record, label="  %48 = add i32 %47, %29"];
	Node0x20663f0[shape=record, label="  %49 = add i32 %48, %33"];
	Node0x2066460[shape=record, label="  %50 = sub i32 %49, %32"];
	Node0x20664d0[shape=record, label="  %51 = add i32 %50, %31"];
	Node0x2066540[shape=record, label="  %52 = add i32 %51, %35"];
	Node0x20665b0[shape=record, label="  %53 = icmp eq i32 %13, %52"];
	Node0x2005268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2066a50[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x2066aa0[shape=record, label="  ret void"];
	Node0x2064770 -> Node0x2064df0;
	Node0x2064df0 -> Node0x2064e90;
	Node0x2064e90 -> Node0x2064f00;
	Node0x2064f00 -> Node0x2064fa0;
	Node0x2064fa0 -> Node0x2065010;
	Node0x2065010 -> Node0x2065080;
	Node0x2065080 -> Node0x20650f0;
	Node0x20650f0 -> Node0x2065160;
	Node0x2065160 -> Node0x20651d0;
	Node0x20651d0 -> Node0x2065240;
	Node0x2065240 -> Node0x20652b0;
	Node0x20652b0 -> Node0x2065320;
	Node0x2065320 -> Node0x2065390;
	Node0x2065390 -> Node0x2065400;
	Node0x2065400 -> Node0x2065470;
	Node0x2065470 -> Node0x20654e0;
	Node0x20654e0 -> Node0x2065550;
	Node0x2065550 -> Node0x20655c0;
	Node0x20655c0 -> Node0x2065660;
	Node0x2065660 -> Node0x20656d0;
	Node0x20656d0 -> Node0x2065740;
	Node0x2065740 -> Node0x20657b0;
	Node0x20657b0 -> Node0x2065820;
	Node0x2065820 -> Node0x2065890;
	Node0x2065890 -> Node0x2065930;
	Node0x2065930 -> Node0x20659d0;
	Node0x20659d0 -> Node0x2065a40;
	Node0x2065a40 -> Node0x2065cc0;
	Node0x2065cc0 -> Node0x2065d30;
	Node0x2065d30 -> Node0x2065dd0;
	Node0x2065dd0 -> Node0x2065e40;
	Node0x2065e40 -> Node0x2065eb0;
	Node0x2065eb0 -> Node0x2065f20;
	Node0x2065f20 -> Node0x2065f90;
	Node0x2065f90 -> Node0x2066000;
	Node0x2066000 -> Node0x2066070;
	Node0x2066070 -> Node0x20660e0;
	Node0x20660e0 -> Node0x2066150;
	Node0x2066150 -> Node0x20661c0;
	Node0x20661c0 -> Node0x2066230;
	Node0x2066230 -> Node0x20662a0;
	Node0x20662a0 -> Node0x2066310;
	Node0x2066310 -> Node0x2066380;
	Node0x2066380 -> Node0x20663f0;
	Node0x20663f0 -> Node0x2066460;
	Node0x2066460 -> Node0x20664d0;
	Node0x20664d0 -> Node0x2066540;
	Node0x2066540 -> Node0x20665b0;
	Node0x20665b0 -> Node0x2005268;
	Node0x2005268 -> Node0x2066a50;
	Node0x2066a50 -> Node0x2066aa0;
edge [color=red]
	Node0x2064df0 -> Node0x2064e90;
	Node0x2064770 -> Node0x2064f00;
	Node0x2064e90 -> Node0x2064f00;
	Node0x2064fa0 -> Node0x2065010;
	Node0x2064f00 -> Node0x2065010;
	Node0x2065080 -> Node0x20650f0;
	Node0x2065010 -> Node0x2065160;
	Node0x20650f0 -> Node0x2065160;
	Node0x20651d0 -> Node0x2065240;
	Node0x2065240 -> Node0x20652b0;
	Node0x2065320 -> Node0x2065390;
	Node0x2065400 -> Node0x2065470;
	Node0x20651d0 -> Node0x20654e0;
	Node0x20654e0 -> Node0x20655c0;
	Node0x20655c0 -> Node0x2065660;
	Node0x2065080 -> Node0x20656d0;
	Node0x20656d0 -> Node0x2065740;
	Node0x2065080 -> Node0x20657b0;
	Node0x2065820 -> Node0x2065890;
	Node0x20650f0 -> Node0x2065930;
	Node0x2065930 -> Node0x20659d0;
	Node0x20656d0 -> Node0x2065a40;
	Node0x2065240 -> Node0x2065d30;
	Node0x2065740 -> Node0x2065d30;
	Node0x2065d30 -> Node0x2065dd0;
	Node0x2065e40 -> Node0x2065eb0;
	Node0x2065eb0 -> Node0x2065f20;
	Node0x2065550 -> Node0x2065f20;
	Node0x2065f20 -> Node0x2065f90;
	Node0x20652b0 -> Node0x2065f90;
	Node0x2065f90 -> Node0x2066000;
	Node0x2065470 -> Node0x2066000;
	Node0x2066000 -> Node0x2066070;
	Node0x20654e0 -> Node0x2066070;
	Node0x2066070 -> Node0x20660e0;
	Node0x2065320 -> Node0x20660e0;
	Node0x20660e0 -> Node0x2066150;
	Node0x2064770 -> Node0x2066150;
	Node0x2066150 -> Node0x20661c0;
	Node0x2065400 -> Node0x20661c0;
	Node0x20661c0 -> Node0x2066230;
	Node0x2065390 -> Node0x2066230;
	Node0x2066230 -> Node0x20662a0;
	Node0x2065660 -> Node0x20662a0;
	Node0x20662a0 -> Node0x2066310;
	Node0x20657b0 -> Node0x2066310;
	Node0x2066310 -> Node0x2066380;
	Node0x2065890 -> Node0x2066380;
	Node0x2066380 -> Node0x20663f0;
	Node0x2065cc0 -> Node0x20663f0;
	Node0x20663f0 -> Node0x2066460;
	Node0x2065a40 -> Node0x2066460;
	Node0x2066460 -> Node0x20664d0;
	Node0x20659d0 -> Node0x20664d0;
	Node0x20664d0 -> Node0x2066540;
	Node0x2065dd0 -> Node0x2066540;
	Node0x2065160 -> Node0x20665b0;
	Node0x2066540 -> Node0x20665b0;
	Node0x20665b0 -> Node0x2005268;
	Node0x2005268 -> Node0x2066a50;
}
