digraph "DFG for'crackme' function" {
	Node0x1a25b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1a25bc0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1a25c80[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x1a25cf0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1a25d60[shape=record, label="  %7 = mul i32 %6, -2"];
	Node0x1a25dd0[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1a25e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1a25eb0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1a25f20[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1a25fc0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1a26030[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1a260a0[shape=record, label="  %14 = and i32 %8, %1"];
	Node0x1a26110[shape=record, label="  %15 = shl i32 %4, 1"];
	Node0x1a261b0[shape=record, label="  %16 = mul i32 %9, -3"];
	Node0x1a26220[shape=record, label="  %17 = sub i32 -2, %6"];
	Node0x1a26290[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x1a26300[shape=record, label="  %19 = sub i32 %18, %14"];
	Node0x1a26370[shape=record, label="  %20 = add i32 %19, %7"];
	Node0x1a263e0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x1a26450[shape=record, label="  %22 = sub i32 %21, %15"];
	Node0x1a264c0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x1a26530[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0x1a265a0[shape=record, label="  %25 = icmp eq i32 %24, %5"];
	Node0x19c6268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a26a40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1a26a90[shape=record, label="  ret void"];
	Node0x1a25b50 -> Node0x1a25bc0;
	Node0x1a25bc0 -> Node0x1a25c80;
	Node0x1a25c80 -> Node0x1a25cf0;
	Node0x1a25cf0 -> Node0x1a25d60;
	Node0x1a25d60 -> Node0x1a25dd0;
	Node0x1a25dd0 -> Node0x1a25e40;
	Node0x1a25e40 -> Node0x1a25eb0;
	Node0x1a25eb0 -> Node0x1a25f20;
	Node0x1a25f20 -> Node0x1a25fc0;
	Node0x1a25fc0 -> Node0x1a26030;
	Node0x1a26030 -> Node0x1a260a0;
	Node0x1a260a0 -> Node0x1a26110;
	Node0x1a26110 -> Node0x1a261b0;
	Node0x1a261b0 -> Node0x1a26220;
	Node0x1a26220 -> Node0x1a26290;
	Node0x1a26290 -> Node0x1a26300;
	Node0x1a26300 -> Node0x1a26370;
	Node0x1a26370 -> Node0x1a263e0;
	Node0x1a263e0 -> Node0x1a26450;
	Node0x1a26450 -> Node0x1a264c0;
	Node0x1a264c0 -> Node0x1a26530;
	Node0x1a26530 -> Node0x1a265a0;
	Node0x1a265a0 -> Node0x19c6268;
	Node0x19c6268 -> Node0x1a26a40;
	Node0x1a26a40 -> Node0x1a26a90;
edge [color=red]
	Node0x1a25b50 -> Node0x1a25bc0;
	Node0x1a25bc0 -> Node0x1a25c80;
	Node0x1a25cf0 -> Node0x1a25d60;
	Node0x1a25e40 -> Node0x1a25eb0;
	Node0x1a25f20 -> Node0x1a25fc0;
	Node0x1a25fc0 -> Node0x1a26030;
	Node0x1a25dd0 -> Node0x1a260a0;
	Node0x1a25bc0 -> Node0x1a26110;
	Node0x1a25e40 -> Node0x1a261b0;
	Node0x1a25cf0 -> Node0x1a26220;
	Node0x1a26220 -> Node0x1a26290;
	Node0x1a25eb0 -> Node0x1a26290;
	Node0x1a26290 -> Node0x1a26300;
	Node0x1a260a0 -> Node0x1a26300;
	Node0x1a26300 -> Node0x1a26370;
	Node0x1a25d60 -> Node0x1a26370;
	Node0x1a26370 -> Node0x1a263e0;
	Node0x1a25fc0 -> Node0x1a263e0;
	Node0x1a263e0 -> Node0x1a26450;
	Node0x1a26110 -> Node0x1a26450;
	Node0x1a26450 -> Node0x1a264c0;
	Node0x1a261b0 -> Node0x1a264c0;
	Node0x1a264c0 -> Node0x1a26530;
	Node0x1a26030 -> Node0x1a26530;
	Node0x1a26530 -> Node0x1a265a0;
	Node0x1a25c80 -> Node0x1a265a0;
	Node0x1a265a0 -> Node0x19c6268;
	Node0x19c6268 -> Node0x1a26a40;
}
