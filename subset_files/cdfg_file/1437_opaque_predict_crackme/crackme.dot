digraph "DFG for'crackme' function" {
	Node0x1108020[shape=record, label="  %5 = mul i32 %2, -2"];
	Node0x11080c0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x1108130[shape=record, label="  %7 = or i32 %6, %3"];
	Node0x11081a0[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x1108210[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0x1108280[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x11082f0[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x1108390[shape=record, label="  %12 = add i32 %2, 1"];
	Node0x1108400[shape=record, label="  %13 = or i32 %11, %1"];
	Node0x1108470[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x11084e0[shape=record, label="  %15 = xor i32 %13, -1"];
	Node0x1108580[shape=record, label="  %16 = mul i32 %15, -5"];
	Node0x11085f0[shape=record, label="  %17 = xor i32 %3, -1"];
	Node0x1108660[shape=record, label="  %18 = and i32 %3, %0"];
	Node0x11086d0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1108740[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x11087b0[shape=record, label="  %21 = xor i32 %6, %3"];
	Node0x1108820[shape=record, label="  %22 = or i32 %3, %0"];
	Node0x11088c0[shape=record, label="  %23 = mul i32 %1, -3"];
	Node0x1108930[shape=record, label="  %24 = add i32 %10, %9"];
	Node0x11089a0[shape=record, label="  %25 = add i32 %24, %13"];
	Node0x1108a10[shape=record, label="  %26 = add i32 %25, %22"];
	Node0x1108a80[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x1108af0[shape=record, label="  %28 = shl i32 %0, 1"];
	Node0x1108b60[shape=record, label="  %29 = add i32 %28, %1"];
	Node0x1108bd0[shape=record, label="  %30 = sub i32 %12, %29"];
	Node0x1108c40[shape=record, label="  %31 = sub i32 %30, %14"];
	Node0x1108cb0[shape=record, label="  %32 = add i32 %31, %17"];
	Node0x1108f30[shape=record, label="  %33 = add i32 %32, %16"];
	Node0x1108fa0[shape=record, label="  %34 = add i32 %33, %21"];
	Node0x1109010[shape=record, label="  %35 = sub i32 %34, %18"];
	Node0x1109080[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x11090f0[shape=record, label="  %37 = sub i32 %36, %20"];
	Node0x1109160[shape=record, label="  %38 = add i32 %37, %27"];
	Node0x11091d0[shape=record, label="  %39 = icmp eq i32 %8, %38"];
	Node0x10a8268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1109670[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x11096c0[shape=record, label="  ret void"];
	Node0x1108020 -> Node0x11080c0;
	Node0x11080c0 -> Node0x1108130;
	Node0x1108130 -> Node0x11081a0;
	Node0x11081a0 -> Node0x1108210;
	Node0x1108210 -> Node0x1108280;
	Node0x1108280 -> Node0x11082f0;
	Node0x11082f0 -> Node0x1108390;
	Node0x1108390 -> Node0x1108400;
	Node0x1108400 -> Node0x1108470;
	Node0x1108470 -> Node0x11084e0;
	Node0x11084e0 -> Node0x1108580;
	Node0x1108580 -> Node0x11085f0;
	Node0x11085f0 -> Node0x1108660;
	Node0x1108660 -> Node0x11086d0;
	Node0x11086d0 -> Node0x1108740;
	Node0x1108740 -> Node0x11087b0;
	Node0x11087b0 -> Node0x1108820;
	Node0x1108820 -> Node0x11088c0;
	Node0x11088c0 -> Node0x1108930;
	Node0x1108930 -> Node0x11089a0;
	Node0x11089a0 -> Node0x1108a10;
	Node0x1108a10 -> Node0x1108a80;
	Node0x1108a80 -> Node0x1108af0;
	Node0x1108af0 -> Node0x1108b60;
	Node0x1108b60 -> Node0x1108bd0;
	Node0x1108bd0 -> Node0x1108c40;
	Node0x1108c40 -> Node0x1108cb0;
	Node0x1108cb0 -> Node0x1108f30;
	Node0x1108f30 -> Node0x1108fa0;
	Node0x1108fa0 -> Node0x1109010;
	Node0x1109010 -> Node0x1109080;
	Node0x1109080 -> Node0x11090f0;
	Node0x11090f0 -> Node0x1109160;
	Node0x1109160 -> Node0x11091d0;
	Node0x11091d0 -> Node0x10a8268;
	Node0x10a8268 -> Node0x1109670;
	Node0x1109670 -> Node0x11096c0;
edge [color=red]
	Node0x11080c0 -> Node0x1108130;
	Node0x1108130 -> Node0x11081a0;
	Node0x1108020 -> Node0x11081a0;
	Node0x11082f0 -> Node0x1108400;
	Node0x1108400 -> Node0x11084e0;
	Node0x11084e0 -> Node0x1108580;
	Node0x1108660 -> Node0x11086d0;
	Node0x11086d0 -> Node0x1108740;
	Node0x11080c0 -> Node0x11087b0;
	Node0x1108280 -> Node0x1108930;
	Node0x1108210 -> Node0x1108930;
	Node0x1108930 -> Node0x11089a0;
	Node0x1108400 -> Node0x11089a0;
	Node0x11089a0 -> Node0x1108a10;
	Node0x1108820 -> Node0x1108a10;
	Node0x1108a10 -> Node0x1108a80;
	Node0x1108af0 -> Node0x1108b60;
	Node0x1108390 -> Node0x1108bd0;
	Node0x1108b60 -> Node0x1108bd0;
	Node0x1108bd0 -> Node0x1108c40;
	Node0x1108470 -> Node0x1108c40;
	Node0x1108c40 -> Node0x1108cb0;
	Node0x11085f0 -> Node0x1108cb0;
	Node0x1108cb0 -> Node0x1108f30;
	Node0x1108580 -> Node0x1108f30;
	Node0x1108f30 -> Node0x1108fa0;
	Node0x11087b0 -> Node0x1108fa0;
	Node0x1108fa0 -> Node0x1109010;
	Node0x1108660 -> Node0x1109010;
	Node0x1109010 -> Node0x1109080;
	Node0x11088c0 -> Node0x1109080;
	Node0x1109080 -> Node0x11090f0;
	Node0x1108740 -> Node0x11090f0;
	Node0x11090f0 -> Node0x1109160;
	Node0x1108a80 -> Node0x1109160;
	Node0x11081a0 -> Node0x11091d0;
	Node0x1109160 -> Node0x11091d0;
	Node0x11091d0 -> Node0x10a8268;
	Node0x10a8268 -> Node0x1109670;
}
