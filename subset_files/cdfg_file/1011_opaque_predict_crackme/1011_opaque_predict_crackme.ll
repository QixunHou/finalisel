; ModuleID = '../.././c_source_file/1011_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1011_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = or i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = or i32 %5, %4
  %12 = and i32 %11, %3
  %13 = sub i32 %10, %12
  %14 = xor i32 %1, -1
  %15 = and i32 %2, %1
  %16 = xor i32 %0, -1
  %17 = or i32 %16, %1
  %18 = xor i32 %17, %15
  %19 = and i32 %16, %1
  %20 = or i32 %7, %19
  %21 = xor i32 %0, 2147483647
  %22 = xor i32 %21, %1
  %23 = or i32 %7, %22
  %24 = shl i32 %23, 1
  %25 = xor i32 %16, %2
  %26 = or i32 %25, %9
  %27 = and i32 %15, %0
  %28 = or i32 %2, %1
  %29 = xor i32 %28, %16
  %30 = xor i32 %29, %27
  %31 = xor i32 %28, 1073741823
  %32 = and i32 %31, %16
  %33 = xor i32 %2, -1
  %34 = and i32 %33, %1
  %35 = and i32 %34, %16
  %36 = and i32 %34, %0
  %37 = and i32 %14, %2
  %38 = and i32 %37, %16
  %39 = and i32 %15, %16
  %40 = and i32 %37, %0
  %41 = mul i32 %40, 6
  %42 = xor i32 %5, -1
  %43 = or i32 %42, %4
  %44 = xor i32 %4, %3
  %45 = and i32 %43, %44
  %46 = xor i32 %3, -1
  %47 = and i32 %46, %4
  %48 = xor i32 %47, -1
  %49 = and i32 %42, %48
  %50 = xor i32 %11, -1
  %51 = shl i32 %50, 2
  %52 = and i32 %5, %3
  %53 = xor i32 %52, -1
  %54 = add i32 %52, 1
  %55 = or i32 %46, %4
  %56 = xor i32 %5, %4
  %57 = xor i32 %56, -1
  %58 = and i32 %55, %57
  %59 = xor i32 %44, -1
  %60 = or i32 %56, %59
  %61 = xor i32 %4, -1
  %62 = or i32 %42, %3
  %63 = and i32 %62, %61
  %64 = and i32 %56, %3
  %65 = or i32 %57, %46
  %66 = and i32 %42, %4
  %67 = xor i32 %66, -1
  %68 = and i32 %67, %3
  %69 = and i32 %5, %4
  %70 = or i32 %69, %59
  %71 = or i32 %69, %46
  %72 = and i32 %42, %3
  %73 = or i32 %72, %61
  %74 = or i32 %5, %3
  %75 = xor i32 %74, -1
  %76 = xor i32 %75, %4
  %77 = or i32 %4, %3
  %78 = xor i32 %69, %77
  %79 = xor i32 %72, -1
  %80 = xor i32 %47, %79
  %81 = and i32 %4, %3
  %82 = xor i32 %5, %3
  %83 = xor i32 %82, -1
  %84 = or i32 %81, %83
  %85 = or i32 %82, %47
  %86 = xor i32 %43, -1
  %87 = or i32 %81, %86
  %88 = xor i32 %11, %81
  %89 = or i32 %81, %42
  %90 = or i32 %69, %75
  %91 = shl i32 %82, 1
  %92 = and i32 %59, %5
  %93 = and i32 %52, %4
  %94 = and i32 %82, %61
  %95 = or i32 %93, %94
  %96 = xor i32 %66, %53
  %97 = xor i32 %94, 2147483647
  %98 = xor i32 %97, %93
  %99 = shl i32 %98, 1
  %100 = xor i32 %86, %3
  %101 = xor i32 %81, -1
  %102 = xor i32 %101, %5
  %103 = and i32 %46, %5
  %104 = and i32 %103, %4
  %105 = or i32 %46, %5
  %106 = xor i32 %105, %4
  %107 = xor i32 %104, -1
  %108 = xor i32 %106, %107
  %109 = or i32 %44, %42
  %110 = and i32 %83, %61
  %111 = xor i32 %82, %4
  %112 = or i32 %104, %111
  %113 = xor i32 %62, -1
  %114 = or i32 %66, %113
  %115 = and i32 %83, %101
  %116 = shl i32 %115, 1
  %117 = xor i32 %67, %3
  %118 = xor i32 %55, -1
  %119 = or i32 %56, %118
  %120 = or i32 %82, %118
  %121 = and i32 %105, %61
  %122 = xor i32 %121, %107
  %123 = and i32 %83, %48
  %124 = or i32 %81, %113
  %125 = and i32 %82, %48
  %126 = xor i32 %77, -1
  %127 = or i32 %83, %126
  %128 = xor i32 %111, -1
  %129 = xor i32 %104, %128
  %130 = or i32 %42, %59
  %131 = and i32 %42, %59
  %132 = and i32 %56, %59
  %133 = or i32 %81, %75
  %134 = or i32 %66, %44
  %135 = or i32 %86, %46
  %136 = xor i32 %69, -1
  %137 = xor i32 %136, %3
  %138 = or i32 %42, %126
  %139 = or i32 %56, %126
  %140 = and i32 %79, %4
  %141 = shl i32 %140, 1
  %142 = and i32 %56, %48
  %143 = and i32 %82, %55
  %144 = and i32 %42, %101
  %145 = or i32 %82, %4
  %146 = xor i32 %104, %145
  %147 = xor i32 %53, %4
  %148 = shl i32 %147, 1
  %149 = or i32 %104, %121
  %150 = and i32 %44, %136
  %151 = or i32 %50, %46
  %152 = xor i32 %72, %4
  %153 = xor i32 %11, %3
  %154 = xor i32 %74, %61
  %155 = xor i32 %154, %93
  %156 = or i32 %66, %3
  %157 = shl i32 %48, 1
  %158 = and i32 %103, %61
  %159 = and i32 %105, %4
  %160 = xor i32 %159, 2147483647
  %161 = xor i32 %160, %158
  %162 = xor i32 %93, %111
  %163 = and i32 %52, %61
  %164 = and i32 %74, %4
  %165 = xor i32 %163, -1
  %166 = xor i32 %164, %165
  %167 = or i32 %82, %61
  %168 = shl i32 %167, 1
  %169 = and i32 %83, %4
  %170 = and i32 %77, %57
  %171 = and i32 %67, %46
  %172 = xor i32 %77, %5
  %173 = and i32 %53, %61
  %174 = or i32 %79, %61
  %175 = shl i32 %174, 1
  %176 = or i32 %163, %164
  %177 = and i32 %82, %4
  %178 = xor i32 %177, %165
  %179 = or i32 %44, %5
  %180 = and i32 %57, %101
  %181 = or i32 %44, %86
  %182 = or i32 %113, %4
  %183 = or i32 %75, %4
  %184 = or i32 %56, %47
  %185 = or i32 %56, %3
  %186 = xor i32 %69, %74
  %187 = xor i32 %66, %3
  %188 = or i32 %56, %44
  %189 = or i32 %93, %128
  %190 = and i32 %44, %57
  %191 = xor i32 %69, %3
  %192 = shl i32 %191, 1
  %193 = or i32 %86, %59
  %194 = or i32 %69, %44
  %195 = shl i32 %194, 1
  %196 = and i32 %56, %55
  %197 = shl i32 %196, 1
  %198 = or i32 %104, %106
  %199 = or i32 %158, %159
  %200 = or i32 %56, %81
  %201 = or i32 %59, %5
  %202 = or i32 %83, %61
  %203 = or i32 %74, %4
  %204 = xor i32 %62, %4
  %205 = xor i32 %50, %3
  %206 = and i32 %55, %42
  %207 = and i32 %57, %48
  %208 = or i32 %69, %118
  %209 = and i32 %43, %46
  %210 = and i32 %136, %59
  %211 = xor i32 %52, %4
  %212 = shl i32 %211, 1
  %213 = or i32 %53, %4
  %214 = xor i32 %113, %4
  %215 = or i32 %82, %81
  %216 = or i32 %69, %3
  %217 = and i32 %11, %59
  %218 = and i32 %79, %61
  %219 = or i32 %82, %126
  %220 = or i32 %118, %5
  %221 = shl i32 %62, 1
  %222 = or i32 %69, %126
  %223 = and i32 %82, %101
  %224 = shl i32 %223, 1
  %225 = and i32 %136, %3
  %226 = shl i32 %225, 1
  %227 = and i32 %77, %5
  %228 = xor i32 %47, %53
  %229 = or i32 %44, %50
  %230 = xor i32 %62, %81
  %231 = and i32 %11, %44
  %232 = or i32 %79, %4
  %233 = shl i32 %57, 1
  %234 = or i32 %66, %59
  %235 = xor i32 %79, %4
  %236 = and i32 %56, %44
  %237 = shl i32 %236, 1
  %238 = or i32 %53, %61
  %239 = or i32 %81, %5
  %240 = xor i32 %48, %5
  %241 = and i32 %55, %5
  %242 = or i32 %50, %59
  %243 = and i32 %48, %5
  %244 = and i32 %56, %101
  %245 = or i32 %126, %5
  %246 = shl i32 %67, 1
  %247 = and i32 %11, %46
  %248 = shl i32 %247, 1
  %249 = and i32 %82, %77
  %250 = xor i32 %66, %62
  %251 = shl i32 %250, 1
  %252 = xor i32 %145, -1
  %253 = or i32 %104, %252
  %254 = or i32 %57, %126
  %255 = xor i32 %69, %79
  %256 = or i32 %44, %57
  %257 = and i32 %74, %61
  %258 = or i32 %66, %52
  %259 = or i32 %72, %4
  %260 = and i32 %56, %77
  %261 = and i32 %57, %3
  %262 = or i32 %57, %59
  %263 = or i32 %52, %47
  %264 = and i32 %44, %5
  %265 = xor i32 %69, %55
  %266 = and i32 %67, %59
  %267 = and i32 %57, %46
  %268 = or i32 %50, %3
  %269 = or i32 %52, %4
  %270 = and i32 %53, %4
  %271 = or i32 %83, %4
  %272 = xor i32 %126, %5
  %273 = xor i32 %43, %81
  %274 = xor i32 %81, %5
  %275 = or i32 %74, %61
  %276 = and i32 %136, %46
  %277 = or i32 %47, %42
  %278 = xor i32 %55, %5
  %279 = shl i32 %118, 2
  %280 = xor i32 %158, %167
  %281 = or i32 %93, %257
  %282 = xor i32 %167, 1073741823
  %283 = or i32 %282, %158
  %284 = shl i32 %283, 2
  %285 = xor i32 %47, %5
  %286 = and i32 %44, %67
  %287 = or i32 %47, %83
  %288 = or i32 %62, %4
  %289 = and i32 %43, %59
  %290 = or i32 %83, %118
  %291 = shl i32 %290, 1
  %292 = and i32 %77, %42
  %293 = shl i32 %292, 1
  %294 = xor i32 %43, %3
  %295 = and i32 %57, %59
  %296 = shl i32 %295, 2
  %297 = or i32 %69, %72
  %298 = or i32 %66, %46
  %299 = shl i32 %298, 1
  %300 = and i32 %77, %83
  %301 = or i32 %57, %118
  %302 = or i32 %47, %5
  %303 = shl i32 %302, 1
  %304 = and i32 %75, %61
  %305 = mul i32 %304, 11
  %306 = and i32 %75, %4
  %307 = and i32 %72, %4
  %308 = shl i32 %307, 4
  %309 = and i32 %113, %61
  %310 = and i32 %113, %4
  %311 = mul i32 %310, 12
  %312 = add i32 %36, %4
  %313 = add i32 %312, %42
  %314 = add i32 %313, %285
  %315 = add i32 %314, %245
  %316 = add i32 %315, %265
  %317 = add i32 %316, %259
  %318 = add i32 %317, %256
  %319 = add i32 %318, %232
  %320 = add i32 %319, %214
  %321 = add i32 %320, %177
  %322 = add i32 %321, %188
  %323 = add i32 %322, %186
  %324 = add i32 %323, %185
  %325 = add i32 %324, %151
  %326 = add i32 %325, %124
  %327 = add i32 %326, %45
  %328 = add i32 %327, %280
  %329 = add i32 %328, %162
  %330 = add i32 %329, %146
  %331 = add i32 %330, %161
  %332 = shl i32 %331, 1
  %333 = add i32 %288, %27
  %334 = sub i32 %333, %287
  %335 = add i32 %334, %267
  %336 = add i32 %335, %78
  %337 = add i32 %336, %108
  %338 = mul i32 %337, 5
  %339 = add i32 %52, %306
  %340 = mul i32 %339, 7
  %341 = add i32 %218, %32
  %342 = shl i32 %341, 2
  %343 = add i32 %38, -1
  %344 = add i32 %343, %113
  %345 = add i32 %344, %74
  %346 = add i32 %345, %258
  %347 = add i32 %346, %309
  %348 = sub i32 %347, %213
  %349 = sub i32 %348, %119
  %350 = mul i32 %349, 3
  %351 = sub i32 %18, %20
  %352 = sub i32 %351, %26
  %353 = add i32 %352, %35
  %354 = add i32 %353, %39
  %355 = sub i32 %354, %24
  %356 = sub i32 %355, %30
  %357 = add i32 %356, %41
  %358 = sub i32 %357, %55
  %359 = sub i32 %358, %5
  %360 = sub i32 %359, %77
  %361 = sub i32 %360, %47
  %362 = sub i32 %361, %81
  %363 = add i32 %362, %77
  %364 = add i32 %363, 2
  %365 = sub i32 %364, %49
  %366 = add i32 %365, %54
  %367 = add i32 %366, %56
  %368 = sub i32 %367, %89
  %369 = add i32 %368, %66
  %370 = add i32 %369, %92
  %371 = sub i32 %370, %102
  %372 = add i32 %371, %109
  %373 = sub i32 %372, %69
  %374 = add i32 %373, %130
  %375 = sub i32 %374, %131
  %376 = sub i32 %375, %138
  %377 = add i32 %376, %136
  %378 = add i32 %377, %144
  %379 = sub i32 %378, %157
  %380 = add i32 %379, %172
  %381 = add i32 %380, %179
  %382 = sub i32 %381, %11
  %383 = sub i32 %382, %201
  %384 = add i32 %383, %206
  %385 = add i32 %384, %220
  %386 = sub i32 %385, %227
  %387 = add i32 %386, %239
  %388 = sub i32 %387, %240
  %389 = add i32 %388, %241
  %390 = sub i32 %389, %52
  %391 = sub i32 %390, %243
  %392 = add i32 %391, %75
  %393 = add i32 %392, %264
  %394 = add i32 %393, %272
  %395 = sub i32 %394, %274
  %396 = add i32 %395, %277
  %397 = add i32 %396, %278
  %398 = sub i32 %397, %279
  %399 = sub i32 %398, %51
  %400 = add i32 %399, %58
  %401 = add i32 %400, %60
  %402 = add i32 %401, %63
  %403 = sub i32 %402, %64
  %404 = add i32 %403, %65
  %405 = sub i32 %404, %68
  %406 = sub i32 %405, %70
  %407 = sub i32 %406, %71
  %408 = add i32 %407, %73
  %409 = add i32 %408, %76
  %410 = sub i32 %409, %80
  %411 = add i32 %410, %84
  %412 = add i32 %411, %85
  %413 = add i32 %412, %87
  %414 = sub i32 %413, %88
  %415 = add i32 %414, %90
  %416 = sub i32 %415, %91
  %417 = sub i32 %416, %96
  %418 = add i32 %417, %100
  %419 = sub i32 %418, %110
  %420 = sub i32 %419, %114
  %421 = add i32 %420, %117
  %422 = sub i32 %421, %120
  %423 = add i32 %422, %123
  %424 = add i32 %423, %125
  %425 = sub i32 %424, %127
  %426 = add i32 %425, %132
  %427 = sub i32 %426, %133
  %428 = sub i32 %427, %134
  %429 = sub i32 %428, %135
  %430 = add i32 %429, %137
  %431 = sub i32 %430, %139
  %432 = sub i32 %431, %142
  %433 = add i32 %432, %143
  %434 = add i32 %433, %150
  %435 = sub i32 %434, %152
  %436 = add i32 %435, %153
  %437 = add i32 %436, %156
  %438 = sub i32 %437, %169
  %439 = sub i32 %438, %170
  %440 = sub i32 %439, %171
  %441 = sub i32 %440, %173
  %442 = sub i32 %441, %180
  %443 = add i32 %442, %181
  %444 = sub i32 %443, %182
  %445 = sub i32 %444, %183
  %446 = sub i32 %445, %184
  %447 = add i32 %446, %187
  %448 = add i32 %447, %190
  %449 = sub i32 %448, %164
  %450 = sub i32 %449, %193
  %451 = sub i32 %450, %200
  %452 = sub i32 %451, %202
  %453 = sub i32 %452, %203
  %454 = add i32 %453, %204
  %455 = sub i32 %454, %205
  %456 = sub i32 %455, %207
  %457 = add i32 %456, %208
  %458 = sub i32 %457, %209
  %459 = sub i32 %458, %210
  %460 = sub i32 %459, %215
  %461 = sub i32 %460, %216
  %462 = add i32 %461, %217
  %463 = sub i32 %462, %219
  %464 = sub i32 %463, %221
  %465 = sub i32 %464, %222
  %466 = add i32 %465, %228
  %467 = sub i32 %466, %229
  %468 = sub i32 %467, %230
  %469 = sub i32 %468, %231
  %470 = sub i32 %469, %233
  %471 = add i32 %470, %234
  %472 = add i32 %471, %235
  %473 = sub i32 %472, %238
  %474 = add i32 %473, %242
  %475 = sub i32 %474, %244
  %476 = sub i32 %475, %246
  %477 = sub i32 %476, %249
  %478 = sub i32 %477, %254
  %479 = sub i32 %478, %255
  %480 = sub i32 %479, %257
  %481 = add i32 %480, %260
  %482 = sub i32 %481, %261
  %483 = add i32 %482, %262
  %484 = sub i32 %483, %263
  %485 = add i32 %484, %266
  %486 = add i32 %485, %268
  %487 = add i32 %486, %269
  %488 = sub i32 %487, %270
  %489 = sub i32 %488, %271
  %490 = add i32 %489, %273
  %491 = add i32 %490, %275
  %492 = sub i32 %491, %276
  %493 = add i32 %492, %286
  %494 = add i32 %493, %289
  %495 = sub i32 %494, %293
  %496 = sub i32 %495, %294
  %497 = sub i32 %496, %297
  %498 = sub i32 %497, %300
  %499 = add i32 %498, %301
  %500 = sub i32 %499, %145
  %501 = sub i32 %500, %303
  %502 = add i32 %501, %95
  %503 = sub i32 %502, %112
  %504 = sub i32 %503, %116
  %505 = sub i32 %504, %122
  %506 = add i32 %505, %129
  %507 = sub i32 %506, %141
  %508 = sub i32 %507, %148
  %509 = sub i32 %508, %149
  %510 = add i32 %509, %155
  %511 = sub i32 %510, %166
  %512 = sub i32 %511, %168
  %513 = sub i32 %512, %175
  %514 = sub i32 %513, %176
  %515 = add i32 %514, %178
  %516 = add i32 %515, %189
  %517 = sub i32 %516, %192
  %518 = sub i32 %517, %195
  %519 = sub i32 %518, %197
  %520 = add i32 %519, %198
  %521 = add i32 %520, %199
  %522 = sub i32 %521, %212
  %523 = sub i32 %522, %224
  %524 = sub i32 %523, %226
  %525 = sub i32 %524, %237
  %526 = sub i32 %525, %248
  %527 = sub i32 %526, %251
  %528 = add i32 %527, %253
  %529 = add i32 %528, %281
  %530 = sub i32 %529, %291
  %531 = sub i32 %530, %296
  %532 = sub i32 %531, %299
  %533 = add i32 %532, %305
  %534 = sub i32 %533, %308
  %535 = add i32 %534, %311
  %536 = add i32 %535, %342
  %537 = sub i32 %536, %99
  %538 = sub i32 %537, %284
  %539 = add i32 %538, %340
  %540 = add i32 %539, %338
  %541 = add i32 %540, %350
  %542 = add i32 %541, %332
  %543 = icmp eq i32 %13, %542
  %544 = select i1 %543, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %545 = tail call i32 @puts(i8* nonnull dereferenceable(1) %544)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
