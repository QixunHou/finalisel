digraph "DFG for'crackme' function" {
	Node0x1e76ac0[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1e77140[shape=record, label="  %6 = add i32 %5, 1"];
	Node0x1e771b0[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x1e77220[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0x1e77290[shape=record, label="  %9 = shl i32 %5, 1"];
	Node0x1e77300[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x1e773a0[shape=record, label="  %11 = xor i32 %2, 2147483647"];
	Node0x1e77440[shape=record, label="  %12 = xor i32 %1, -1"];
	Node0x1e774b0[shape=record, label="  %13 = and i32 %12, %2"];
	Node0x1e77520[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1e77590[shape=record, label="  %15 = shl i32 %7, 1"];
	Node0x1e77630[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x1e776a0[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x1e77710[shape=record, label="  %18 = xor i32 %3, -1"];
	Node0x1e77780[shape=record, label="  %19 = and i32 %17, %3"];
	Node0x1e777f0[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x1e77860[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x1e778d0[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x1e77940[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x1e779b0[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x1e77a20[shape=record, label="  %25 = add i32 %19, %13"];
	Node0x1e77ac0[shape=record, label="  %26 = mul i32 %25, 3"];
	Node0x1e77b30[shape=record, label="  %27 = add i32 %11, %1"];
	Node0x1e77ba0[shape=record, label="  %28 = add i32 %27, %10"];
	Node0x1e77c10[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x1e77cb0[shape=record, label="  %30 = sub i32 5, %1"];
	Node0x1e77d20[shape=record, label="  %31 = sub i32 %30, %14"];
	Node0x1e77d90[shape=record, label="  %32 = sub i32 %31, %3"];
	Node0x1e78010[shape=record, label="  %33 = add i32 %32, %18"];
	Node0x1e78080[shape=record, label="  %34 = sub i32 %33, %9"];
	Node0x1e780f0[shape=record, label="  %35 = add i32 %34, %20"];
	Node0x1e78160[shape=record, label="  %36 = sub i32 %35, %21"];
	Node0x1e781d0[shape=record, label="  %37 = add i32 %36, %24"];
	Node0x1e78240[shape=record, label="  %38 = add i32 %37, %16"];
	Node0x1e782b0[shape=record, label="  %39 = sub i32 %38, %23"];
	Node0x1e78320[shape=record, label="  %40 = add i32 %39, %26"];
	Node0x1e78390[shape=record, label="  %41 = add i32 %40, %29"];
	Node0x1e78400[shape=record, label="  %42 = icmp eq i32 %8, %41"];
	Node0x1e17268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e788a0[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x1e788f0[shape=record, label="  ret void"];
	Node0x1e76ac0 -> Node0x1e77140;
	Node0x1e77140 -> Node0x1e771b0;
	Node0x1e771b0 -> Node0x1e77220;
	Node0x1e77220 -> Node0x1e77290;
	Node0x1e77290 -> Node0x1e77300;
	Node0x1e77300 -> Node0x1e773a0;
	Node0x1e773a0 -> Node0x1e77440;
	Node0x1e77440 -> Node0x1e774b0;
	Node0x1e774b0 -> Node0x1e77520;
	Node0x1e77520 -> Node0x1e77590;
	Node0x1e77590 -> Node0x1e77630;
	Node0x1e77630 -> Node0x1e776a0;
	Node0x1e776a0 -> Node0x1e77710;
	Node0x1e77710 -> Node0x1e77780;
	Node0x1e77780 -> Node0x1e777f0;
	Node0x1e777f0 -> Node0x1e77860;
	Node0x1e77860 -> Node0x1e778d0;
	Node0x1e778d0 -> Node0x1e77940;
	Node0x1e77940 -> Node0x1e779b0;
	Node0x1e779b0 -> Node0x1e77a20;
	Node0x1e77a20 -> Node0x1e77ac0;
	Node0x1e77ac0 -> Node0x1e77b30;
	Node0x1e77b30 -> Node0x1e77ba0;
	Node0x1e77ba0 -> Node0x1e77c10;
	Node0x1e77c10 -> Node0x1e77cb0;
	Node0x1e77cb0 -> Node0x1e77d20;
	Node0x1e77d20 -> Node0x1e77d90;
	Node0x1e77d90 -> Node0x1e78010;
	Node0x1e78010 -> Node0x1e78080;
	Node0x1e78080 -> Node0x1e780f0;
	Node0x1e780f0 -> Node0x1e78160;
	Node0x1e78160 -> Node0x1e781d0;
	Node0x1e781d0 -> Node0x1e78240;
	Node0x1e78240 -> Node0x1e782b0;
	Node0x1e782b0 -> Node0x1e78320;
	Node0x1e78320 -> Node0x1e78390;
	Node0x1e78390 -> Node0x1e78400;
	Node0x1e78400 -> Node0x1e17268;
	Node0x1e17268 -> Node0x1e788a0;
	Node0x1e788a0 -> Node0x1e788f0;
edge [color=red]
	Node0x1e76ac0 -> Node0x1e77140;
	Node0x1e77140 -> Node0x1e77220;
	Node0x1e771b0 -> Node0x1e77220;
	Node0x1e76ac0 -> Node0x1e77290;
	Node0x1e77440 -> Node0x1e774b0;
	Node0x1e771b0 -> Node0x1e77590;
	Node0x1e77590 -> Node0x1e77630;
	Node0x1e776a0 -> Node0x1e77780;
	Node0x1e77780 -> Node0x1e777f0;
	Node0x1e77860 -> Node0x1e778d0;
	Node0x1e778d0 -> Node0x1e77940;
	Node0x1e77780 -> Node0x1e77a20;
	Node0x1e774b0 -> Node0x1e77a20;
	Node0x1e77a20 -> Node0x1e77ac0;
	Node0x1e773a0 -> Node0x1e77b30;
	Node0x1e77b30 -> Node0x1e77ba0;
	Node0x1e77300 -> Node0x1e77ba0;
	Node0x1e77ba0 -> Node0x1e77c10;
	Node0x1e77cb0 -> Node0x1e77d20;
	Node0x1e77520 -> Node0x1e77d20;
	Node0x1e77d20 -> Node0x1e77d90;
	Node0x1e77d90 -> Node0x1e78010;
	Node0x1e77710 -> Node0x1e78010;
	Node0x1e78010 -> Node0x1e78080;
	Node0x1e77290 -> Node0x1e78080;
	Node0x1e78080 -> Node0x1e780f0;
	Node0x1e777f0 -> Node0x1e780f0;
	Node0x1e780f0 -> Node0x1e78160;
	Node0x1e77860 -> Node0x1e78160;
	Node0x1e78160 -> Node0x1e781d0;
	Node0x1e779b0 -> Node0x1e781d0;
	Node0x1e781d0 -> Node0x1e78240;
	Node0x1e77630 -> Node0x1e78240;
	Node0x1e78240 -> Node0x1e782b0;
	Node0x1e77940 -> Node0x1e782b0;
	Node0x1e782b0 -> Node0x1e78320;
	Node0x1e77ac0 -> Node0x1e78320;
	Node0x1e78320 -> Node0x1e78390;
	Node0x1e77c10 -> Node0x1e78390;
	Node0x1e77220 -> Node0x1e78400;
	Node0x1e78390 -> Node0x1e78400;
	Node0x1e78400 -> Node0x1e17268;
	Node0x1e17268 -> Node0x1e788a0;
}
