digraph "DFG for'crackme' function" {
	Node0x1b964b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1b96b60[shape=record, label="  %4 = shl i32 %1, 1"];
	Node0x1b96c20[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x1b96c90[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1b96d00[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x1b96d70[shape=record, label="  %8 = shl i32 %5, 1"];
	Node0x1b96e10[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x1b96eb0[shape=record, label="  %10 = shl i32 %7, 2"];
	Node0x1b96f50[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0x1b96fc0[shape=record, label="  %12 = and i32 %6, %0"];
	Node0x1b97030[shape=record, label="  %13 = add i32 %3, %0"];
	Node0x1b970a0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1b97110[shape=record, label="  %15 = add i32 %3, 2"];
	Node0x1b97180[shape=record, label="  %16 = sub i32 %15, %4"];
	Node0x1b971f0[shape=record, label="  %17 = sub i32 %16, %5"];
	Node0x1b97260[shape=record, label="  %18 = sub i32 %17, %7"];
	Node0x1b972d0[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x1b97340[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x1b973b0[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x1b97420[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x1b97490[shape=record, label="  %23 = icmp eq i32 %22, 1"];
	Node0x1b37268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b97930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1b97980[shape=record, label="  ret void"];
	Node0x1b964b0 -> Node0x1b96b60;
	Node0x1b96b60 -> Node0x1b96c20;
	Node0x1b96c20 -> Node0x1b96c90;
	Node0x1b96c90 -> Node0x1b96d00;
	Node0x1b96d00 -> Node0x1b96d70;
	Node0x1b96d70 -> Node0x1b96e10;
	Node0x1b96e10 -> Node0x1b96eb0;
	Node0x1b96eb0 -> Node0x1b96f50;
	Node0x1b96f50 -> Node0x1b96fc0;
	Node0x1b96fc0 -> Node0x1b97030;
	Node0x1b97030 -> Node0x1b970a0;
	Node0x1b970a0 -> Node0x1b97110;
	Node0x1b97110 -> Node0x1b97180;
	Node0x1b97180 -> Node0x1b971f0;
	Node0x1b971f0 -> Node0x1b97260;
	Node0x1b97260 -> Node0x1b972d0;
	Node0x1b972d0 -> Node0x1b97340;
	Node0x1b97340 -> Node0x1b973b0;
	Node0x1b973b0 -> Node0x1b97420;
	Node0x1b97420 -> Node0x1b97490;
	Node0x1b97490 -> Node0x1b37268;
	Node0x1b37268 -> Node0x1b97930;
	Node0x1b97930 -> Node0x1b97980;
edge [color=red]
	Node0x1b96c90 -> Node0x1b96d00;
	Node0x1b96c20 -> Node0x1b96d70;
	Node0x1b96d70 -> Node0x1b96e10;
	Node0x1b96d00 -> Node0x1b96eb0;
	Node0x1b96eb0 -> Node0x1b96f50;
	Node0x1b96c90 -> Node0x1b96fc0;
	Node0x1b964b0 -> Node0x1b97030;
	Node0x1b97030 -> Node0x1b970a0;
	Node0x1b964b0 -> Node0x1b97110;
	Node0x1b97110 -> Node0x1b97180;
	Node0x1b96b60 -> Node0x1b97180;
	Node0x1b97180 -> Node0x1b971f0;
	Node0x1b96c20 -> Node0x1b971f0;
	Node0x1b971f0 -> Node0x1b97260;
	Node0x1b96d00 -> Node0x1b97260;
	Node0x1b97260 -> Node0x1b972d0;
	Node0x1b96fc0 -> Node0x1b972d0;
	Node0x1b972d0 -> Node0x1b97340;
	Node0x1b96e10 -> Node0x1b97340;
	Node0x1b97340 -> Node0x1b973b0;
	Node0x1b96f50 -> Node0x1b973b0;
	Node0x1b973b0 -> Node0x1b97420;
	Node0x1b970a0 -> Node0x1b97420;
	Node0x1b97420 -> Node0x1b97490;
	Node0x1b97490 -> Node0x1b37268;
	Node0x1b37268 -> Node0x1b97930;
}
