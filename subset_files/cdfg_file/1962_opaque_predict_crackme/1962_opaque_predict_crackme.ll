; ModuleID = '../.././c_source_file/1962_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1962_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %10, %7
  %12 = xor i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %0
  %15 = xor i32 %5, -1
  %16 = sub i32 %15, %11
  %17 = shl i32 %16, 1
  %18 = add i32 %17, %14
  %19 = and i32 %1, %0
  %20 = xor i32 %2, %0
  %21 = or i32 %20, %19
  %22 = xor i32 %9, %0
  %23 = or i32 %8, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %24, %1
  %26 = or i32 %1, %0
  %27 = and i32 %26, %13
  %28 = and i32 %2, %1
  %29 = and i32 %28, %0
  %30 = xor i32 %12, %0
  %31 = xor i32 %29, %30
  %32 = and i32 %23, %1
  %33 = xor i32 %1, -1
  %34 = and i32 %2, %0
  %35 = or i32 %34, %33
  %36 = xor i32 %1, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %20, %37
  %39 = add i32 %36, 1
  %40 = or i32 %28, %7
  %41 = and i32 %28, %7
  %42 = and i32 %12, %0
  %43 = or i32 %41, %42
  %44 = or i32 %2, %0
  %45 = xor i32 %44, %19
  %46 = or i32 %33, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %20, %47
  %49 = or i32 %9, %7
  %50 = xor i32 %26, -1
  %51 = xor i32 %50, %2
  %52 = and i32 %33, %2
  %53 = and i32 %52, %0
  %54 = or i32 %33, %2
  %55 = and i32 %54, %7
  %56 = or i32 %53, %55
  %57 = and i32 %20, %46
  %58 = and i32 %8, %0
  %59 = or i32 %58, %1
  %60 = or i32 %8, %50
  %61 = and i32 %20, %33
  %62 = or i32 %2, %1
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %0
  %65 = shl i32 %64, 1
  %66 = xor i32 %34, -1
  %67 = xor i32 %66, %1
  %68 = xor i32 %30, -1
  %69 = xor i32 %53, %68
  %70 = and i32 %33, %0
  %71 = xor i32 %70, -1
  %72 = and i32 %20, %71
  %73 = or i32 %28, %70
  %74 = and i32 %62, %7
  %75 = or i32 %29, %74
  %76 = xor i32 %20, -1
  %77 = or i32 %76, %47
  %78 = xor i32 %28, -1
  %79 = xor i32 %58, %78
  %80 = and i32 %8, %71
  %81 = or i32 %13, %0
  %82 = or i32 %12, %19
  %83 = shl i32 %82, 1
  %84 = and i32 %66, %33
  %85 = add i32 %1, 1
  %86 = or i32 %20, %33
  %87 = xor i32 %23, %19
  %88 = or i32 %78, %0
  %89 = and i32 %36, %2
  %90 = or i32 %9, %70
  %91 = shl i32 %90, 1
  %92 = and i32 %78, %7
  %93 = add i32 %12, 1
  %94 = and i32 %52, %7
  %95 = or i32 %94, %14
  %96 = or i32 %36, %2
  %97 = xor i32 %19, -1
  %98 = xor i32 %97, %2
  %99 = and i32 %76, %97
  %100 = xor i32 %23, %1
  %101 = xor i32 %0, 2147483647
  %102 = xor i32 %101, %54
  %103 = xor i32 %102, %53
  %104 = and i32 %44, %37
  %105 = xor i32 %34, %46
  %106 = or i32 %13, %47
  %107 = or i32 %24, %1
  %108 = and i32 %12, %26
  %109 = and i32 %23, %36
  %110 = or i32 %34, %50
  %111 = or i32 %24, %33
  %112 = xor i32 %58, -1
  %113 = and i32 %112, %33
  %114 = and i32 %23, %33
  %115 = or i32 %58, %37
  %116 = and i32 %76, %37
  %117 = xor i32 %26, %2
  %118 = shl i32 %117, 1
  %119 = add i32 %26, 1
  %120 = and i32 %12, %7
  %121 = or i32 %29, %120
  %122 = and i32 %20, %97
  %123 = add i32 %28, 1
  %124 = xor i32 %19, %2
  %125 = or i32 %34, %1
  %126 = or i32 %70, %76
  %127 = and i32 %20, %36
  %128 = or i32 %34, %36
  %129 = or i32 %8, %47
  %130 = and i32 %76, %33
  %131 = or i32 %53, %30
  %132 = shl i32 %131, 2
  %133 = and i32 %20, %26
  %134 = xor i32 %70, %10
  %135 = and i32 %63, %7
  %136 = mul i32 %135, -12
  %137 = and i32 %9, %7
  %138 = and i32 %9, %0
  %139 = shl i32 %138, 1
  %140 = mul i32 %41, -13
  %141 = or i32 %5, %4
  %142 = xor i32 %141, -1
  %143 = xor i32 %4, %3
  %144 = xor i32 %143, -1
  %145 = or i32 %142, %144
  %146 = shl i32 %141, 1
  %147 = xor i32 %4, -1
  %148 = or i32 %15, %3
  %149 = xor i32 %148, -1
  %150 = or i32 %149, %147
  %151 = and i32 %4, %3
  %152 = or i32 %151, %142
  %153 = and i32 %144, %5
  %154 = and i32 %15, %4
  %155 = xor i32 %154, -1
  %156 = and i32 %5, %3
  %157 = xor i32 %156, -1
  %158 = xor i32 %157, %4
  %159 = xor i32 %3, -1
  %160 = or i32 %159, %4
  %161 = xor i32 %5, %4
  %162 = and i32 %161, %160
  %163 = and i32 %159, %4
  %164 = and i32 %15, %3
  %165 = xor i32 %164, -1
  %166 = xor i32 %163, %165
  %167 = xor i32 %160, -1
  %168 = xor i32 %161, -1
  %169 = or i32 %168, %167
  %170 = or i32 %154, %149
  %171 = or i32 %15, %4
  %172 = and i32 %171, %159
  %173 = and i32 %159, %5
  %174 = and i32 %173, %4
  %175 = or i32 %159, %5
  %176 = and i32 %175, %147
  %177 = or i32 %174, %176
  %178 = or i32 %144, %5
  %179 = and i32 %5, %4
  %180 = or i32 %179, %144
  %181 = add i32 %156, 1
  %182 = or i32 %164, %4
  %183 = xor i32 %5, %3
  %184 = or i32 %183, %167
  %185 = xor i32 %163, -1
  %186 = xor i32 %185, %5
  %187 = or i32 %168, %3
  %188 = or i32 %183, %4
  %189 = xor i32 %188, -1
  %190 = or i32 %174, %189
  %191 = or i32 %4, %3
  %192 = xor i32 %191, -1
  %193 = add i32 %191, 1
  %194 = and i32 %165, %4
  %195 = and i32 %168, %144
  %196 = xor i32 %151, -1
  %197 = xor i32 %171, -1
  %198 = or i32 %197, %3
  %199 = and i32 %191, %168
  %200 = or i32 %151, %168
  %201 = or i32 %143, %197
  %202 = and i32 %155, %3
  %203 = and i32 %141, %3
  %204 = and i32 %196, %5
  %205 = shl i32 %204, 1
  %206 = or i32 %15, %167
  %207 = and i32 %148, %147
  %208 = and i32 %157, %147
  %209 = and i32 %161, %196
  %210 = or i32 %151, %15
  %211 = and i32 %173, %147
  %212 = and i32 %175, %4
  %213 = or i32 %211, %212
  %214 = xor i32 %148, %4
  %215 = and i32 %143, %155
  %216 = xor i32 %179, %160
  %217 = and i32 %183, %185
  %218 = shl i32 %217, 2
  %219 = xor i32 %174, %188
  %220 = xor i32 %163, %5
  %221 = shl i32 %220, 1
  %222 = or i32 %165, %4
  %223 = xor i32 %183, -1
  %224 = or i32 %223, %167
  %225 = and i32 %161, %143
  %226 = and i32 %161, %191
  %227 = shl i32 %226, 1
  %228 = or i32 %168, %144
  %229 = shl i32 %228, 1
  %230 = and i32 %168, %196
  %231 = shl i32 %230, 1
  %232 = or i32 %154, %143
  %233 = or i32 %142, %159
  %234 = xor i32 %149, %4
  %235 = and i32 %183, %191
  %236 = xor i32 %174, -1
  %237 = xor i32 %176, %236
  %238 = and i32 %160, %15
  %239 = and i32 %143, %5
  %240 = xor i32 %192, %5
  %241 = or i32 %183, %147
  %242 = xor i32 %241, 2147483647
  %243 = or i32 %242, %211
  %244 = shl i32 %243, 1
  %245 = or i32 %223, %147
  %246 = or i32 %5, %3
  %247 = xor i32 %246, %4
  %248 = or i32 %157, %147
  %249 = or i32 %179, %192
  %250 = or i32 %161, %3
  %251 = and i32 %168, %185
  %252 = and i32 %171, %144
  %253 = or i32 %163, %15
  %254 = or i32 %223, %192
  %255 = and i32 %183, %196
  %256 = or i32 %161, %144
  %257 = or i32 %197, %159
  %258 = and i32 %191, %15
  %259 = or i32 %15, %192
  %260 = or i32 %151, %149
  %261 = xor i32 %246, %151
  %262 = and i32 %160, %223
  %263 = xor i32 %164, %4
  %264 = xor i32 %171, %3
  %265 = and i32 %165, %147
  %266 = or i32 %183, %151
  %267 = or i32 %142, %3
  %268 = and i32 %143, %15
  %269 = xor i32 %179, %246
  %270 = or i32 %179, %167
  %271 = and i32 %155, %159
  %272 = or i32 %151, %197
  %273 = and i32 %15, %144
  %274 = xor i32 %183, %4
  %275 = or i32 %149, %4
  %276 = or i32 %151, %5
  %277 = xor i32 %175, %4
  %278 = or i32 %174, %277
  %279 = and i32 %156, %4
  %280 = xor i32 %279, %274
  %281 = shl i32 %280, 1
  %282 = and i32 %223, %4
  %283 = or i32 %161, %167
  %284 = xor i32 %179, -1
  %285 = and i32 %284, %3
  %286 = and i32 %183, %160
  %287 = and i32 %156, %147
  %288 = and i32 %246, %4
  %289 = xor i32 %288, -1
  %290 = xor i32 %287, %289
  %291 = or i32 %156, %163
  %292 = or i32 %167, %5
  %293 = xor i32 %191, %5
  %294 = xor i32 %155, %3
  %295 = and i32 %183, %147
  %296 = xor i32 %295, -1
  %297 = xor i32 %279, %296
  %298 = or i32 %223, %4
  %299 = or i32 %179, %143
  %300 = xor i32 %179, %191
  %301 = or i32 %154, %144
  %302 = xor i32 %163, %157
  %303 = shl i32 %295, 1
  %304 = xor i32 %246, -1
  %305 = or i32 %151, %304
  %306 = or i32 %246, %147
  %307 = xor i32 %154, %148
  %308 = xor i32 %141, %3
  %309 = and i32 %171, %143
  %310 = shl i32 %309, 1
  %311 = and i32 %141, %159
  %312 = and i32 %141, %143
  %313 = and i32 %148, %4
  %314 = or i32 %143, %168
  %315 = and i32 %223, %185
  %316 = and i32 %191, %5
  %317 = shl i32 %316, 1
  %318 = or i32 %163, %223
  %319 = xor i32 %141, %151
  %320 = and i32 %141, %144
  %321 = shl i32 %320, 1
  %322 = xor i32 %321, -1
  %323 = xor i32 %284, %3
  %324 = shl i32 %323, 1
  %325 = and i32 %161, %185
  %326 = and i32 %161, %3
  %327 = xor i32 %197, %3
  %328 = xor i32 %142, %3
  %329 = or i32 %179, %3
  %330 = and i32 %155, %144
  %331 = or i32 %246, %4
  %332 = xor i32 %154, %157
  %333 = and i32 %168, %3
  %334 = and i32 %160, %168
  %335 = and i32 %161, %144
  %336 = or i32 %148, %4
  %337 = or i32 %304, %4
  %338 = or i32 %15, %144
  %339 = and i32 %185, %5
  %340 = and i32 %223, %147
  %341 = and i32 %160, %5
  %342 = and i32 %161, %159
  %343 = shl i32 %342, 1
  %344 = xor i32 %277, %236
  %345 = xor i32 %156, %4
  %346 = or i32 %179, %159
  %347 = and i32 %246, %147
  %348 = and i32 %284, %159
  %349 = shl i32 %348, 1
  %350 = or i32 %156, %147
  %351 = and i32 %15, %196
  %352 = or i32 %287, %288
  %353 = or i32 %183, %163
  %354 = and i32 %304, %147
  %355 = and i32 %164, %147
  %356 = shl i32 %355, 2
  %357 = and i32 %304, %4
  %358 = mul i32 %357, -20
  %359 = and i32 %164, %4
  %360 = mul i32 %359, -17
  %361 = and i32 %149, %4
  %362 = shl i32 %361, 1
  %363 = mul i32 %279, -9
  %364 = add i32 %80, %159
  %365 = add i32 %364, %10
  %366 = add i32 %365, %35
  %367 = add i32 %366, %5
  %368 = add i32 %367, %160
  %369 = add i32 %368, %304
  %370 = add i32 %369, %276
  %371 = add i32 %370, %186
  %372 = add i32 %371, %103
  %373 = add i32 %372, %350
  %374 = add i32 %373, %331
  %375 = add i32 %374, %319
  %376 = add i32 %375, %313
  %377 = add i32 %376, %312
  %378 = add i32 %377, %298
  %379 = add i32 %378, %274
  %380 = add i32 %379, %260
  %381 = add i32 %380, %203
  %382 = add i32 %381, %198
  %383 = add i32 %382, %182
  %384 = add i32 %383, %278
  %385 = shl i32 %384, 1
  %386 = sub i32 %38, %256
  %387 = sub i32 %386, %354
  %388 = sub i32 %387, %215
  %389 = add i32 %388, %209
  %390 = mul i32 %389, 5
  %391 = add i32 %29, %53
  %392 = add i32 %391, %94
  %393 = add i32 %392, %137
  %394 = mul i32 %393, -7
  %395 = add i32 %88, %113
  %396 = add i32 %395, %75
  %397 = add i32 %396, %283
  %398 = shl i32 %397, 2
  %399 = sub i32 -2, %70
  %400 = sub i32 %399, %81
  %401 = add i32 %400, %253
  %402 = sub i32 %401, %240
  %403 = add i32 %402, %328
  %404 = sub i32 %403, %287
  %405 = add i32 %404, %305
  %406 = mul i32 %405, 3
  %407 = add i32 %85, %0
  %408 = add i32 %407, %39
  %409 = add i32 %408, %70
  %410 = add i32 %409, %119
  %411 = add i32 %410, %51
  %412 = sub i32 %411, %60
  %413 = sub i32 %412, %20
  %414 = add i32 %413, %89
  %415 = add i32 %414, %93
  %416 = sub i32 %415, %96
  %417 = sub i32 %416, %98
  %418 = add i32 %417, %123
  %419 = sub i32 %418, %124
  %420 = add i32 %419, %112
  %421 = add i32 %420, %129
  %422 = add i32 %421, %9
  %423 = sub i32 %422, %3
  %424 = sub i32 %423, %21
  %425 = add i32 %424, %22
  %426 = sub i32 %425, %25
  %427 = add i32 %426, %27
  %428 = add i32 %427, %32
  %429 = sub i32 %428, %40
  %430 = add i32 %429, %45
  %431 = add i32 %430, %48
  %432 = sub i32 %431, %49
  %433 = add i32 %432, %57
  %434 = sub i32 %433, %59
  %435 = sub i32 %434, %61
  %436 = sub i32 %435, %67
  %437 = add i32 %436, %72
  %438 = add i32 %437, %73
  %439 = add i32 %438, %77
  %440 = sub i32 %439, %79
  %441 = add i32 %440, %84
  %442 = sub i32 %441, %86
  %443 = add i32 %442, %87
  %444 = add i32 %443, %42
  %445 = sub i32 %444, %92
  %446 = add i32 %445, %99
  %447 = sub i32 %446, %100
  %448 = sub i32 %447, %104
  %449 = add i32 %448, %105
  %450 = add i32 %449, %106
  %451 = add i32 %450, %107
  %452 = add i32 %451, %108
  %453 = add i32 %452, %109
  %454 = sub i32 %453, %110
  %455 = add i32 %454, %111
  %456 = add i32 %455, %114
  %457 = sub i32 %456, %115
  %458 = sub i32 %457, %116
  %459 = sub i32 %458, %118
  %460 = sub i32 %459, %122
  %461 = sub i32 %460, %125
  %462 = sub i32 %461, %126
  %463 = sub i32 %462, %127
  %464 = sub i32 %463, %128
  %465 = sub i32 %464, %130
  %466 = sub i32 %465, %133
  %467 = sub i32 %466, %134
  %468 = sub i32 %467, %4
  %469 = sub i32 %468, %31
  %470 = add i32 %469, %43
  %471 = add i32 %470, %56
  %472 = sub i32 %471, %65
  %473 = add i32 %472, %69
  %474 = sub i32 %473, %83
  %475 = sub i32 %474, %91
  %476 = add i32 %475, %95
  %477 = add i32 %476, %121
  %478 = add i32 %477, %136
  %479 = sub i32 %478, %139
  %480 = add i32 %479, %140
  %481 = add i32 %480, %193
  %482 = add i32 %481, %167
  %483 = add i32 %482, %191
  %484 = sub i32 %483, %163
  %485 = add i32 %484, %144
  %486 = sub i32 %485, %132
  %487 = add i32 %486, %153
  %488 = add i32 %487, %155
  %489 = sub i32 %488, %178
  %490 = add i32 %489, %181
  %491 = add i32 %490, %206
  %492 = sub i32 %491, %210
  %493 = sub i32 %492, %183
  %494 = sub i32 %493, %179
  %495 = sub i32 %494, %238
  %496 = add i32 %495, %239
  %497 = add i32 %496, %161
  %498 = sub i32 %497, %156
  %499 = add i32 %498, %149
  %500 = sub i32 %499, %258
  %501 = add i32 %500, %259
  %502 = add i32 %501, %268
  %503 = sub i32 %502, %273
  %504 = sub i32 %503, %292
  %505 = add i32 %504, %293
  %506 = sub i32 %505, %154
  %507 = sub i32 %506, %246
  %508 = add i32 %507, %142
  %509 = sub i32 %508, %338
  %510 = add i32 %509, %339
  %511 = sub i32 %510, %341
  %512 = add i32 %511, %284
  %513 = sub i32 %512, %351
  %514 = sub i32 %513, %145
  %515 = sub i32 %514, %146
  %516 = sub i32 %515, %150
  %517 = sub i32 %516, %152
  %518 = add i32 %517, %158
  %519 = add i32 %518, %162
  %520 = sub i32 %519, %166
  %521 = sub i32 %520, %169
  %522 = sub i32 %521, %170
  %523 = add i32 %522, %172
  %524 = sub i32 %523, %180
  %525 = add i32 %524, %184
  %526 = sub i32 %525, %187
  %527 = sub i32 %526, %194
  %528 = sub i32 %527, %195
  %529 = add i32 %528, %199
  %530 = add i32 %529, %200
  %531 = add i32 %530, %201
  %532 = sub i32 %531, %202
  %533 = sub i32 %532, %205
  %534 = sub i32 %533, %207
  %535 = sub i32 %534, %208
  %536 = sub i32 %535, %214
  %537 = sub i32 %536, %216
  %538 = sub i32 %537, %221
  %539 = sub i32 %538, %222
  %540 = add i32 %539, %224
  %541 = sub i32 %540, %225
  %542 = sub i32 %541, %232
  %543 = add i32 %542, %233
  %544 = add i32 %543, %234
  %545 = sub i32 %544, %235
  %546 = sub i32 %545, %245
  %547 = add i32 %546, %247
  %548 = add i32 %547, %248
  %549 = sub i32 %548, %249
  %550 = add i32 %549, %250
  %551 = add i32 %550, %251
  %552 = add i32 %551, %252
  %553 = sub i32 %552, %254
  %554 = sub i32 %553, %255
  %555 = add i32 %554, %257
  %556 = sub i32 %555, %261
  %557 = add i32 %556, %262
  %558 = sub i32 %557, %263
  %559 = sub i32 %558, %264
  %560 = sub i32 %559, %265
  %561 = sub i32 %560, %266
  %562 = add i32 %561, %267
  %563 = sub i32 %562, %269
  %564 = add i32 %563, %270
  %565 = add i32 %564, %271
  %566 = sub i32 %565, %272
  %567 = add i32 %566, %275
  %568 = add i32 %567, %282
  %569 = sub i32 %568, %285
  %570 = sub i32 %569, %286
  %571 = sub i32 %570, %291
  %572 = add i32 %571, %294
  %573 = add i32 %572, %299
  %574 = add i32 %573, %300
  %575 = add i32 %574, %301
  %576 = add i32 %575, %302
  %577 = sub i32 %576, %306
  %578 = add i32 %577, %307
  %579 = sub i32 %578, %308
  %580 = sub i32 %579, %311
  %581 = sub i32 %580, %314
  %582 = sub i32 %581, %315
  %583 = sub i32 %582, %317
  %584 = sub i32 %583, %318
  %585 = sub i32 %584, %325
  %586 = sub i32 %585, %326
  %587 = sub i32 %586, %327
  %588 = add i32 %587, %329
  %589 = add i32 %588, %330
  %590 = add i32 %589, %332
  %591 = add i32 %590, %333
  %592 = add i32 %591, %334
  %593 = sub i32 %592, %335
  %594 = add i32 %593, %241
  %595 = sub i32 %594, %336
  %596 = add i32 %595, %337
  %597 = sub i32 %596, %340
  %598 = add i32 %597, %345
  %599 = add i32 %598, %346
  %600 = sub i32 %599, %347
  %601 = add i32 %600, %353
  %602 = sub i32 %601, %177
  %603 = sub i32 %602, %190
  %604 = sub i32 %603, %213
  %605 = sub i32 %604, %218
  %606 = add i32 %605, %219
  %607 = sub i32 %606, %227
  %608 = sub i32 %607, %229
  %609 = sub i32 %608, %231
  %610 = add i32 %609, %237
  %611 = add i32 %610, %290
  %612 = add i32 %611, %297
  %613 = sub i32 %612, %303
  %614 = sub i32 %613, %310
  %615 = add i32 %614, %322
  %616 = sub i32 %615, %324
  %617 = sub i32 %616, %343
  %618 = add i32 %617, %344
  %619 = sub i32 %618, %349
  %620 = add i32 %619, %352
  %621 = sub i32 %620, %356
  %622 = add i32 %621, %358
  %623 = add i32 %622, %360
  %624 = sub i32 %623, %362
  %625 = add i32 %624, %363
  %626 = add i32 %625, %394
  %627 = sub i32 %626, %281
  %628 = sub i32 %627, %244
  %629 = add i32 %628, %398
  %630 = add i32 %629, %390
  %631 = add i32 %630, %406
  %632 = add i32 %631, %385
  %633 = icmp eq i32 %18, %632
  %634 = select i1 %633, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %635 = tail call i32 @puts(i8* nonnull dereferenceable(1) %634)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
