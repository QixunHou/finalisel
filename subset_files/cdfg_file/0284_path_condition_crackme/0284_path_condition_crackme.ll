; ModuleID = '../.././c_source_file/0284_path_condition_crackme.c'
source_filename = "../.././c_source_file/0284_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = shl i32 %2, 1
  %9 = xor i32 %2, -1
  %10 = or i32 %9, %1
  %11 = xor i32 %10, %0
  %12 = or i32 %8, 1
  %13 = add i32 %12, %4
  %14 = add i32 %13, %11
  %15 = add i32 %14, %7
  %16 = and i32 %4, %3
  %17 = add i32 %16, 1
  %18 = shl i32 %6, 1
  %19 = or i32 %4, %3
  %20 = or i32 %6, %3
  %21 = xor i32 %4, %3
  %22 = shl i32 %21, 1
  %23 = xor i32 %22, -2
  %24 = shl i32 %19, 1
  %25 = xor i32 %24, -2
  %26 = xor i32 %20, -1
  %27 = shl i32 %7, 3
  %28 = xor i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %9, %29
  %31 = or i32 %2, %1
  %32 = or i32 %31, %0
  %33 = or i32 %9, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %28, %34
  %36 = and i32 %1, %0
  %37 = xor i32 %31, %36
  %38 = and i32 %2, %1
  %39 = and i32 %38, %0
  %40 = xor i32 %0, -1
  %41 = xor i32 %31, -1
  %42 = or i32 %41, %0
  %43 = xor i32 %39, %42
  %44 = xor i32 %1, -1
  %45 = and i32 %44, %2
  %46 = and i32 %45, %0
  %47 = xor i32 %2, %1
  %48 = xor i32 %47, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %46, %49
  %51 = and i32 %33, %1
  %52 = or i32 %2, %0
  %53 = xor i32 %52, %36
  %54 = or i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %47, %55
  %57 = xor i32 %34, %1
  %58 = and i32 %44, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %59, %2
  %61 = or i32 %44, %2
  %62 = and i32 %61, %40
  %63 = or i32 %46, %62
  %64 = xor i32 %38, -1
  %65 = or i32 %64, %0
  %66 = xor i32 %2, %0
  %67 = and i32 %66, %54
  %68 = and i32 %10, %0
  %69 = shl i32 %68, 1
  %70 = and i32 %9, %0
  %71 = xor i32 %70, -1
  %72 = and i32 %71, %29
  %73 = xor i32 %10, -1
  %74 = or i32 %70, %73
  %75 = and i32 %2, %0
  %76 = xor i32 %75, -1
  %77 = and i32 %76, %29
  %78 = xor i32 %36, -1
  %79 = xor i32 %33, %36
  %80 = and i32 %38, %40
  %81 = and i32 %47, %0
  %82 = or i32 %80, %81
  %83 = shl i32 %82, 1
  %84 = or i32 %41, %40
  %85 = add i32 %75, 1
  %86 = or i32 %9, %29
  %87 = or i32 %34, %1
  %88 = or i32 %75, %55
  %89 = and i32 %33, %44
  %90 = xor i32 %47, -1
  %91 = and i32 %90, %0
  %92 = or i32 %44, %0
  %93 = xor i32 %92, %2
  %94 = xor i32 %66, -1
  %95 = and i32 %92, %94
  %96 = xor i32 %92, -1
  %97 = xor i32 %96, %2
  %98 = shl i32 %97, 1
  %99 = and i32 %92, %9
  %100 = or i32 %75, %29
  %101 = shl i32 %100, 1
  %102 = or i32 %36, %2
  %103 = or i32 %66, %29
  %104 = xor i32 %55, %2
  %105 = or i32 %90, %0
  %106 = xor i32 %71, %1
  %107 = shl i32 %106, 1
  %108 = or i32 %10, %40
  %109 = and i32 %52, %44
  %110 = and i32 %66, %44
  %111 = or i32 %75, %28
  %112 = shl i32 %111, 1
  %113 = xor i32 %90, %0
  %114 = xor i32 %46, -1
  %115 = xor i32 %62, %114
  %116 = or i32 %73, %0
  %117 = and i32 %54, %94
  %118 = and i32 %52, %28
  %119 = shl i32 %118, 1
  %120 = and i32 %9, %1
  %121 = xor i32 %120, -1
  %122 = and i32 %121, %40
  %123 = shl i32 %122, 1
  %124 = and i32 %47, %78
  %125 = and i32 %52, %1
  %126 = or i32 %94, %29
  %127 = or i32 %120, %0
  %128 = and i32 %29, %2
  %129 = shl i32 %128, 1
  %130 = or i32 %70, %38
  %131 = and i32 %66, %28
  %132 = and i32 %90, %59
  %133 = or i32 %10, %0
  %134 = xor i32 %31, %0
  %135 = or i32 %39, %134
  %136 = or i32 %121, %40
  %137 = or i32 %36, %9
  %138 = or i32 %58, %94
  %139 = shl i32 %138, 1
  %140 = or i32 %36, %34
  %141 = or i32 %96, %2
  %142 = xor i32 %52, -1
  %143 = or i32 %142, %44
  %144 = or i32 %47, %36
  %145 = and i32 %33, %28
  %146 = and i32 %31, %0
  %147 = or i32 %80, %146
  %148 = and i32 %28, %76
  %149 = shl i32 %148, 1
  %150 = or i32 %66, %96
  %151 = xor i32 %75, %92
  %152 = and i32 %66, %1
  %153 = xor i32 %39, %48
  %154 = and i32 %54, %90
  %155 = or i32 %120, %58
  %156 = or i32 %46, %48
  %157 = and i32 %71, %1
  %158 = or i32 %38, %40
  %159 = or i32 %75, %1
  %160 = xor i32 %75, %1
  %161 = and i32 %76, %1
  %162 = xor i32 %38, %0
  %163 = xor i32 %70, %64
  %164 = or i32 %90, %40
  %165 = xor i32 %134, -1
  %166 = xor i32 %39, %165
  %167 = xor i32 %75, %31
  %168 = or i32 %66, %55
  %169 = or i32 %70, %28
  %170 = or i32 %38, %0
  %171 = and i32 %94, %59
  %172 = and i32 %54, %2
  %173 = or i32 %94, %55
  %174 = shl i32 %173, 1
  %175 = and i32 %64, %40
  %176 = or i32 %36, %94
  %177 = add i32 %58, 1
  %178 = or i32 %70, %1
  %179 = and i32 %9, %78
  %180 = xor i32 %54, %2
  %181 = xor i32 %52, %1
  %182 = and i32 %121, %0
  %183 = xor i32 %75, %54
  %184 = xor i32 %61, %40
  %185 = xor i32 %184, %46
  %186 = or i32 %142, %29
  %187 = or i32 %36, %41
  %188 = or i32 %28, %142
  %189 = or i32 %28, %94
  %190 = or i32 %28, %2
  %191 = xor i32 %73, %0
  %192 = xor i32 %121, %0
  %193 = or i32 %9, %96
  %194 = shl i32 %193, 1
  %195 = and i32 %66, %78
  %196 = and i32 %47, %40
  %197 = or i32 %39, %196
  %198 = xor i32 %36, %2
  %199 = or i32 %29, %2
  %200 = and i32 %94, %44
  %201 = or i32 %70, %44
  %202 = xor i32 %142, %1
  %203 = or i32 %36, %90
  %204 = and i32 %10, %40
  %205 = and i32 %66, %59
  %206 = or i32 %38, %58
  %207 = or i32 %73, %40
  %208 = xor i32 %58, %121
  %209 = and i32 %33, %29
  %210 = xor i32 %64, %0
  %211 = or i32 %66, %1
  %212 = and i32 %92, %2
  %213 = or i32 %47, %0
  %214 = and i32 %94, %29
  %215 = or i32 %47, %96
  %216 = shl i32 %142, 1
  %217 = and i32 %52, %29
  %218 = or i32 %66, %58
  %219 = or i32 %58, %9
  %220 = or i32 %66, %44
  %221 = or i32 %120, %40
  %222 = shl i32 %221, 1
  %223 = add i32 %33, 1
  %224 = and i32 %54, %9
  %225 = and i32 %28, %2
  %226 = or i32 %90, %55
  %227 = and i32 %90, %40
  %228 = or i32 %94, %44
  %229 = or i32 %9, %55
  %230 = and i32 %94, %78
  %231 = or i32 %39, %49
  %232 = or i32 %66, %36
  %233 = or i32 %94, %96
  %234 = add i32 %2, 1
  %235 = or i32 %94, %1
  %236 = or i32 %75, %41
  %237 = and i32 %28, %9
  %238 = xor i32 %78, %2
  %239 = and i32 %28, %94
  %240 = and i32 %47, %92
  %241 = or i32 %31, %40
  %242 = and i32 %90, %78
  %243 = or i32 %121, %0
  %244 = or i32 %47, %40
  %245 = xor i32 %46, %213
  %246 = shl i32 %245, 1
  %247 = and i32 %45, %40
  %248 = and i32 %61, %0
  %249 = xor i32 %248, 2147483647
  %250 = xor i32 %249, %247
  %251 = shl i32 %250, 1
  %252 = and i32 %66, %29
  %253 = and i32 %92, %90
  %254 = xor i32 %41, %0
  %255 = or i32 %75, %44
  %256 = or i32 %36, %73
  %257 = and i32 %59, %2
  %258 = shl i32 %257, 1
  %259 = xor i32 %10, %36
  %260 = shl i32 %259, 1
  %261 = or i32 %70, %29
  %262 = or i32 %247, %248
  %263 = and i32 %41, %40
  %264 = and i32 %120, %40
  %265 = and i32 %41, %0
  %266 = and i32 %120, %0
  %267 = shl i32 %266, 4
  %268 = and i32 %73, %40
  %269 = shl i32 %268, 2
  %270 = mul i32 %80, 12
  %271 = and i32 %73, %0
  %272 = mul i32 %271, 9
  %273 = mul i32 %39, -20
  %274 = add i32 %92, %29
  %275 = add i32 %274, %90
  %276 = add i32 %275, %264
  %277 = add i32 %276, %254
  %278 = add i32 %277, %253
  %279 = add i32 %278, %236
  %280 = add i32 %279, %235
  %281 = add i32 %280, %208
  %282 = add i32 %281, %171
  %283 = add i32 %282, %164
  %284 = add i32 %283, %127
  %285 = add i32 %284, %125
  %286 = add i32 %285, %116
  %287 = add i32 %286, %105
  %288 = add i32 %287, %89
  %289 = add i32 %288, %87
  %290 = add i32 %289, %17
  %291 = add i32 %290, %16
  %292 = shl i32 %291, 1
  %293 = sub i32 %71, %30
  %294 = sub i32 %293, %265
  %295 = add i32 %294, %243
  %296 = sub i32 %295, %140
  %297 = sub i32 %296, %19
  %298 = mul i32 %297, 3
  %299 = sub i32 %64, %54
  %300 = sub i32 %299, %201
  %301 = add i32 %300, %26
  %302 = sub i32 %301, %231
  %303 = mul i32 %302, 5
  %304 = add i32 %154, %86
  %305 = add i32 %304, %195
  %306 = shl i32 %305, 2
  %307 = shl i32 %1, 1
  %308 = add i32 %307, %36
  %309 = add i32 %308, 4
  %310 = add i32 %309, %55
  %311 = add i32 %310, %177
  %312 = sub i32 %311, %28
  %313 = add i32 %312, %58
  %314 = sub i32 %313, %36
  %315 = add i32 %314, %234
  %316 = sub i32 %315, %60
  %317 = add i32 %316, %73
  %318 = add i32 %317, %85
  %319 = add i32 %318, %75
  %320 = sub i32 %319, %93
  %321 = add i32 %320, %47
  %322 = add i32 %321, %99
  %323 = sub i32 %322, %102
  %324 = add i32 %323, %104
  %325 = sub i32 %324, %137
  %326 = add i32 %325, %141
  %327 = sub i32 %326, %70
  %328 = add i32 %327, %172
  %329 = add i32 %328, %179
  %330 = add i32 %329, %180
  %331 = sub i32 %330, %190
  %332 = sub i32 %331, %198
  %333 = add i32 %332, %199
  %334 = sub i32 %333, %10
  %335 = add i32 %334, %41
  %336 = sub i32 %335, %212
  %337 = sub i32 %336, %66
  %338 = add i32 %337, %219
  %339 = add i32 %338, %223
  %340 = add i32 %339, %224
  %341 = add i32 %340, %225
  %342 = add i32 %341, %120
  %343 = add i32 %342, %229
  %344 = sub i32 %343, %237
  %345 = add i32 %344, %238
  %346 = sub i32 %345, %33
  %347 = sub i32 %346, %32
  %348 = add i32 %347, %35
  %349 = add i32 %348, %37
  %350 = sub i32 %349, %51
  %351 = sub i32 %350, %53
  %352 = add i32 %351, %56
  %353 = add i32 %352, %57
  %354 = sub i32 %353, %65
  %355 = add i32 %354, %67
  %356 = add i32 %355, %72
  %357 = sub i32 %356, %74
  %358 = add i32 %357, %77
  %359 = sub i32 %358, %79
  %360 = sub i32 %359, %84
  %361 = sub i32 %360, %88
  %362 = add i32 %361, %91
  %363 = add i32 %362, %95
  %364 = sub i32 %363, %98
  %365 = add i32 %364, %103
  %366 = sub i32 %365, %108
  %367 = add i32 %366, %109
  %368 = sub i32 %367, %110
  %369 = sub i32 %368, %113
  %370 = add i32 %369, %117
  %371 = add i32 %370, %124
  %372 = add i32 %371, %126
  %373 = sub i32 %372, %129
  %374 = add i32 %373, %130
  %375 = sub i32 %374, %131
  %376 = sub i32 %375, %132
  %377 = sub i32 %376, %133
  %378 = add i32 %377, %136
  %379 = sub i32 %378, %143
  %380 = add i32 %379, %144
  %381 = add i32 %380, %145
  %382 = sub i32 %381, %150
  %383 = sub i32 %382, %151
  %384 = add i32 %383, %152
  %385 = sub i32 %384, %155
  %386 = add i32 %385, %157
  %387 = add i32 %386, %158
  %388 = add i32 %387, %159
  %389 = add i32 %388, %81
  %390 = add i32 %389, %160
  %391 = add i32 %390, %161
  %392 = sub i32 %391, %162
  %393 = sub i32 %392, %163
  %394 = add i32 %393, %167
  %395 = add i32 %394, %168
  %396 = sub i32 %395, %169
  %397 = add i32 %396, %170
  %398 = sub i32 %397, %175
  %399 = sub i32 %398, %176
  %400 = add i32 %399, %178
  %401 = sub i32 %400, %181
  %402 = sub i32 %401, %182
  %403 = add i32 %402, %183
  %404 = sub i32 %403, %186
  %405 = add i32 %404, %187
  %406 = add i32 %405, %188
  %407 = sub i32 %406, %189
  %408 = add i32 %407, %191
  %409 = add i32 %408, %192
  %410 = sub i32 %409, %194
  %411 = add i32 %410, %200
  %412 = add i32 %411, %202
  %413 = sub i32 %412, %203
  %414 = add i32 %413, %204
  %415 = sub i32 %414, %205
  %416 = add i32 %415, %206
  %417 = add i32 %416, %207
  %418 = add i32 %417, %209
  %419 = add i32 %418, %210
  %420 = sub i32 %419, %211
  %421 = sub i32 %420, %213
  %422 = add i32 %421, %214
  %423 = add i32 %422, %215
  %424 = sub i32 %423, %216
  %425 = sub i32 %424, %217
  %426 = add i32 %425, %134
  %427 = sub i32 %426, %218
  %428 = sub i32 %427, %146
  %429 = sub i32 %428, %220
  %430 = add i32 %429, %226
  %431 = sub i32 %430, %227
  %432 = add i32 %431, %228
  %433 = add i32 %432, %230
  %434 = add i32 %433, %232
  %435 = sub i32 %434, %233
  %436 = add i32 %435, %239
  %437 = add i32 %436, %240
  %438 = sub i32 %437, %241
  %439 = sub i32 %438, %242
  %440 = sub i32 %439, %244
  %441 = sub i32 %440, %42
  %442 = sub i32 %441, %252
  %443 = add i32 %442, %255
  %444 = add i32 %443, %256
  %445 = sub i32 %444, %258
  %446 = add i32 %445, %261
  %447 = add i32 %446, %263
  %448 = sub i32 %447, %18
  %449 = sub i32 %448, %20
  %450 = sub i32 %449, %43
  %451 = sub i32 %450, %50
  %452 = sub i32 %451, %63
  %453 = sub i32 %452, %69
  %454 = sub i32 %453, %101
  %455 = sub i32 %454, %107
  %456 = sub i32 %455, %112
  %457 = sub i32 %456, %115
  %458 = sub i32 %457, %119
  %459 = sub i32 %458, %123
  %460 = add i32 %459, %135
  %461 = sub i32 %460, %139
  %462 = sub i32 %461, %147
  %463 = sub i32 %462, %149
  %464 = sub i32 %463, %153
  %465 = add i32 %464, %156
  %466 = sub i32 %465, %166
  %467 = sub i32 %466, %174
  %468 = add i32 %467, %185
  %469 = add i32 %468, %197
  %470 = sub i32 %469, %222
  %471 = sub i32 %470, %260
  %472 = add i32 %471, %262
  %473 = add i32 %472, %267
  %474 = sub i32 %473, %269
  %475 = add i32 %474, %270
  %476 = add i32 %475, %272
  %477 = add i32 %476, %273
  %478 = add i32 %477, %27
  %479 = sub i32 %478, %83
  %480 = sub i32 %479, %246
  %481 = add i32 %480, %23
  %482 = add i32 %481, %25
  %483 = sub i32 %482, %251
  %484 = add i32 %483, %306
  %485 = add i32 %484, %303
  %486 = add i32 %485, %298
  %487 = add i32 %486, %292
  %488 = icmp eq i32 %15, %487
  %489 = select i1 %488, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %490 = tail call i32 @puts(i8* nonnull dereferenceable(1) %489)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
