; ModuleID = '../.././c_source_file/0445_path_condition_crackme.c'
source_filename = "../.././c_source_file/0445_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %2, %1
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = xor i32 %0, -1
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %2
  %11 = and i32 %10, %8
  %12 = or i32 %5, %8
  %13 = xor i32 %11, %12
  %14 = xor i32 %2, -1
  %15 = add i32 %13, %14
  %16 = shl i32 %15, 1
  %17 = and i32 %10, %0
  %18 = or i32 %5, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %17, %19
  %21 = and i32 %2, %1
  %22 = xor i32 %21, %0
  %23 = shl i32 %22, 1
  %24 = and i32 %9, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %2
  %27 = and i32 %21, %0
  %28 = or i32 %2, %1
  %29 = xor i32 %28, %0
  %30 = or i32 %27, %29
  %31 = or i32 %14, %1
  %32 = xor i32 %31, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %17, %18
  %35 = shl i32 %34, 1
  %36 = and i32 %2, %0
  %37 = xor i32 %1, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %36, %38
  %40 = or i32 %1, %0
  %41 = and i32 %5, %40
  %42 = or i32 %14, %38
  %43 = or i32 %2, %0
  %44 = and i32 %43, %37
  %45 = xor i32 %5, %0
  %46 = or i32 %9, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %14, %47
  %49 = and i32 %28, %8
  %50 = or i32 %27, %49
  %51 = xor i32 %2, %0
  %52 = xor i32 %51, -1
  %53 = and i32 %52, %25
  %54 = or i32 %9, %2
  %55 = and i32 %54, %0
  %56 = or i32 %11, %55
  %57 = xor i32 %28, -1
  %58 = or i32 %4, %57
  %59 = and i32 %5, %8
  %60 = or i32 %52, %38
  %61 = shl i32 %60, 1
  %62 = xor i32 %27, -1
  %63 = xor i32 %29, %62
  %64 = xor i32 %36, %1
  %65 = xor i32 %49, %62
  %66 = xor i32 %36, -1
  %67 = and i32 %37, %66
  %68 = and i32 %52, %38
  %69 = shl i32 %68, 2
  %70 = xor i32 %43, -1
  %71 = or i32 %4, %70
  %72 = and i32 %46, %14
  %73 = or i32 %36, %57
  %74 = xor i32 %21, -1
  %75 = and i32 %74, %8
  %76 = and i32 %51, %38
  %77 = and i32 %14, %0
  %78 = xor i32 %77, -1
  %79 = and i32 %78, %1
  %80 = and i32 %14, %25
  %81 = and i32 %38, %2
  %82 = xor i32 %47, %2
  %83 = and i32 %14, %1
  %84 = xor i32 %83, -1
  %85 = or i32 %84, %0
  %86 = xor i32 %40, -1
  %87 = or i32 %36, %86
  %88 = or i32 %47, %2
  %89 = or i32 %51, %24
  %90 = xor i32 %36, %84
  %91 = xor i32 %4, -1
  %92 = or i32 %83, %8
  %93 = or i32 %5, %24
  %94 = shl i32 %93, 1
  %95 = and i32 %74, %0
  %96 = and i32 %66, %9
  %97 = and i32 %43, %1
  %98 = shl i32 %97, 1
  %99 = xor i32 %59, %62
  %100 = and i32 %78, %38
  %101 = or i32 %14, %0
  %102 = xor i32 %101, -1
  %103 = or i32 %37, %14
  %104 = or i32 %77, %32
  %105 = and i32 %31, %8
  %106 = shl i32 %105, 1
  %107 = xor i32 %24, %74
  %108 = shl i32 %107, 1
  %109 = or i32 %52, %1
  %110 = or i32 %4, %14
  %111 = xor i32 %57, %0
  %112 = and i32 %6, %8
  %113 = xor i32 %101, %4
  %114 = and i32 %6, %25
  %115 = shl i32 %114, 1
  %116 = or i32 %36, %47
  %117 = or i32 %21, %24
  %118 = and i32 %31, %0
  %119 = and i32 %84, %0
  %120 = xor i32 %32, %0
  %121 = shl i32 %120, 1
  %122 = or i32 %24, %14
  %123 = shl i32 %122, 1
  %124 = or i32 %14, %86
  %125 = and i32 %5, %25
  %126 = and i32 %101, %38
  %127 = and i32 %21, %8
  %128 = and i32 %5, %0
  %129 = xor i32 %127, -1
  %130 = xor i32 %128, %129
  %131 = and i32 %25, %2
  %132 = and i32 %37, %78
  %133 = or i32 %57, %8
  %134 = and i32 %40, %2
  %135 = and i32 %46, %52
  %136 = shl i32 %135, 1
  %137 = or i32 %28, %8
  %138 = xor i32 %78, %1
  %139 = xor i32 %45, -1
  %140 = or i32 %27, %139
  %141 = or i32 %6, %86
  %142 = xor i32 %77, %31
  %143 = xor i32 %31, %4
  %144 = or i32 %77, %1
  %145 = or i32 %86, %2
  %146 = add i32 %21, 1
  %147 = and i32 %46, %2
  %148 = and i32 %78, %9
  %149 = shl i32 %51, 2
  %150 = or i32 %4, %52
  %151 = xor i32 %102, %1
  %152 = or i32 %6, %47
  %153 = xor i32 %4, %2
  %154 = or i32 %127, %128
  %155 = xor i32 %77, %74
  %156 = or i32 %21, %8
  %157 = shl i32 %156, 1
  %158 = or i32 %36, %1
  %159 = xor i32 %43, %4
  %160 = xor i32 %84, %0
  %161 = shl i32 %160, 1
  %162 = and i32 %46, %6
  %163 = and i32 %6, %0
  %164 = and i32 %51, %91
  %165 = xor i32 %28, %4
  %166 = and i32 %5, %46
  %167 = shl i32 %166, 1
  %168 = xor i32 %40, %2
  %169 = or i32 %6, %0
  %170 = xor i32 %31, %0
  %171 = or i32 %83, %0
  %172 = or i32 %32, %8
  %173 = and i32 %51, %37
  %174 = and i32 %28, %0
  %175 = or i32 %127, %174
  %176 = or i32 %17, %45
  %177 = or i32 %51, %37
  %178 = and i32 %51, %40
  %179 = or i32 %70, %1
  %180 = xor i32 %36, %46
  %181 = and i32 %37, %2
  %182 = or i32 %4, %2
  %183 = and i32 %101, %37
  %184 = or i32 %70, %38
  %185 = xor i32 %24, %84
  %186 = or i32 %77, %38
  %187 = or i32 %102, %9
  %188 = shl i32 %187, 1
  %189 = and i32 %37, %52
  %190 = or i32 %102, %38
  %191 = or i32 %51, %38
  %192 = or i32 %83, %24
  %193 = or i32 %36, %9
  %194 = or i32 %36, %83
  %195 = or i32 %21, %0
  %196 = and i32 %43, %38
  %197 = and i32 %101, %1
  %198 = xor i32 %83, %0
  %199 = or i32 %37, %102
  %200 = or i32 %74, %8
  %201 = and i32 %51, %46
  %202 = shl i32 %70, 1
  %203 = xor i32 %70, %1
  %204 = xor i32 %54, %0
  %205 = xor i32 %17, -1
  %206 = xor i32 %204, %205
  %207 = xor i32 %174, %129
  %208 = shl i32 %57, 1
  %209 = and i32 %66, %38
  %210 = or i32 %27, %59
  %211 = or i32 %37, %52
  %212 = xor i32 %46, %2
  %213 = and i32 %40, %52
  %214 = or i32 %38, %2
  %215 = shl i32 %214, 1
  %216 = or i32 %31, %0
  %217 = and i32 %51, %9
  %218 = and i32 %54, %8
  %219 = or i32 %17, %218
  %220 = shl i32 %219, 1
  %221 = xor i32 %218, %205
  %222 = or i32 %51, %4
  %223 = and i32 %84, %8
  %224 = and i32 %5, %91
  %225 = and i32 %66, %1
  %226 = or i32 %24, %2
  %227 = or i32 %28, %0
  %228 = or i32 %52, %9
  %229 = xor i32 %86, %2
  %230 = and i32 %6, %91
  %231 = shl i32 %230, 2
  %232 = or i32 %52, %86
  %233 = or i32 %17, %204
  %234 = and i32 %91, %2
  %235 = shl i32 %234, 2
  %236 = or i32 %5, %47
  %237 = shl i32 %236, 1
  %238 = or i32 %74, %0
  %239 = or i32 %36, %37
  %240 = or i32 %77, %37
  %241 = and i32 %14, %91
  %242 = or i32 %37, %70
  %243 = and i32 %52, %1
  %244 = or i32 %102, %1
  %245 = or i32 %37, %2
  %246 = or i32 %5, %4
  %247 = or i32 %52, %47
  %248 = or i32 %77, %9
  %249 = xor i32 %17, %139
  %250 = or i32 %70, %9
  %251 = and i32 %40, %14
  %252 = and i32 %51, %25
  %253 = and i32 %52, %91
  %254 = xor i32 %101, %1
  %255 = xor i32 %36, %28
  %256 = shl i32 %255, 1
  %257 = or i32 %51, %86
  %258 = and i32 %37, %14
  %259 = and i32 %101, %9
  %260 = and i32 %40, %6
  %261 = shl i32 %18, 1
  %262 = xor i32 %27, %45
  %263 = or i32 %77, %21
  %264 = or i32 %4, %32
  %265 = or i32 %57, %0
  %266 = and i32 %51, %1
  %267 = or i32 %51, %9
  %268 = or i32 %4, %102
  %269 = and i32 %14, %38
  %270 = or i32 %24, %52
  %271 = or i32 %31, %8
  %272 = xor i32 %6, %0
  %273 = or i32 %51, %47
  %274 = and i32 %57, %8
  %275 = mul i32 %274, 20
  %276 = and i32 %83, %8
  %277 = and i32 %57, %0
  %278 = and i32 %83, %0
  %279 = mul i32 %278, 9
  %280 = and i32 %32, %8
  %281 = mul i32 %280, 25
  %282 = mul i32 %127, 17
  %283 = and i32 %32, %0
  %284 = mul i32 %283, 21
  %285 = add i32 %269, %24
  %286 = add i32 %285, %78
  %287 = add i32 %286, %66
  %288 = add i32 %287, %52
  %289 = add i32 %288, %6
  %290 = add i32 %289, %82
  %291 = add i32 %290, %32
  %292 = add i32 %291, %263
  %293 = add i32 %292, %186
  %294 = add i32 %293, %185
  %295 = add i32 %294, %178
  %296 = add i32 %295, %89
  %297 = add i32 %296, %85
  %298 = add i32 %297, %154
  %299 = add i32 %298, %262
  %300 = add i32 %299, %30
  %301 = shl i32 %300, 1
  %302 = sub i32 %227, %181
  %303 = add i32 %302, %27
  %304 = sub i32 %303, %148
  %305 = mul i32 %304, 5
  %306 = add i32 %174, %125
  %307 = sub i32 %306, %113
  %308 = sub i32 %307, %96
  %309 = sub i32 %308, %73
  %310 = mul i32 %309, 3
  %311 = shl i32 %0, 1
  %312 = add i32 %311, 2
  %313 = add i32 %312, %25
  %314 = add i32 %313, %47
  %315 = add i32 %314, %91
  %316 = sub i32 %315, %46
  %317 = add i32 %316, %2
  %318 = sub i32 %317, %4
  %319 = add i32 %318, %26
  %320 = sub i32 %319, %42
  %321 = sub i32 %320, %48
  %322 = sub i32 %321, %28
  %323 = sub i32 %322, %72
  %324 = add i32 %323, %80
  %325 = sub i32 %324, %36
  %326 = add i32 %325, %81
  %327 = sub i32 %326, %43
  %328 = sub i32 %327, %88
  %329 = add i32 %328, %103
  %330 = sub i32 %329, %110
  %331 = sub i32 %330, %5
  %332 = add i32 %331, %124
  %333 = sub i32 %332, %131
  %334 = sub i32 %333, %134
  %335 = sub i32 %334, %145
  %336 = add i32 %335, %146
  %337 = add i32 %336, %147
  %338 = sub i32 %337, %153
  %339 = sub i32 %338, %83
  %340 = add i32 %339, %168
  %341 = sub i32 %340, %182
  %342 = add i32 %341, %77
  %343 = sub i32 %342, %212
  %344 = add i32 %343, %21
  %345 = sub i32 %344, %226
  %346 = sub i32 %345, %229
  %347 = sub i32 %346, %241
  %348 = add i32 %347, %245
  %349 = add i32 %348, %31
  %350 = add i32 %349, %251
  %351 = sub i32 %350, %258
  %352 = add i32 %351, %33
  %353 = add i32 %352, %39
  %354 = add i32 %353, %41
  %355 = add i32 %354, %44
  %356 = add i32 %355, %45
  %357 = add i32 %356, %53
  %358 = add i32 %357, %58
  %359 = add i32 %358, %59
  %360 = add i32 %359, %64
  %361 = add i32 %360, %67
  %362 = add i32 %361, %71
  %363 = sub i32 %362, %75
  %364 = sub i32 %363, %76
  %365 = sub i32 %364, %79
  %366 = add i32 %365, %87
  %367 = add i32 %366, %90
  %368 = add i32 %367, %92
  %369 = sub i32 %368, %95
  %370 = sub i32 %369, %100
  %371 = add i32 %370, %104
  %372 = sub i32 %371, %109
  %373 = add i32 %372, %111
  %374 = add i32 %373, %112
  %375 = sub i32 %374, %116
  %376 = sub i32 %375, %117
  %377 = sub i32 %376, %118
  %378 = sub i32 %377, %119
  %379 = sub i32 %378, %123
  %380 = sub i32 %379, %125
  %381 = add i32 %380, %126
  %382 = add i32 %381, %132
  %383 = sub i32 %382, %133
  %384 = add i32 %383, %137
  %385 = sub i32 %384, %138
  %386 = add i32 %385, %141
  %387 = add i32 %386, %128
  %388 = add i32 %387, %142
  %389 = add i32 %388, %143
  %390 = sub i32 %389, %144
  %391 = sub i32 %390, %149
  %392 = sub i32 %391, %150
  %393 = sub i32 %392, %151
  %394 = add i32 %393, %152
  %395 = sub i32 %394, %155
  %396 = add i32 %395, %158
  %397 = sub i32 %396, %159
  %398 = sub i32 %397, %162
  %399 = add i32 %398, %163
  %400 = add i32 %399, %164
  %401 = add i32 %400, %165
  %402 = sub i32 %401, %169
  %403 = add i32 %402, %170
  %404 = add i32 %403, %171
  %405 = sub i32 %404, %172
  %406 = add i32 %405, %173
  %407 = add i32 %406, %177
  %408 = add i32 %407, %179
  %409 = add i32 %408, %180
  %410 = add i32 %409, %183
  %411 = sub i32 %410, %184
  %412 = sub i32 %411, %189
  %413 = sub i32 %412, %190
  %414 = sub i32 %413, %191
  %415 = sub i32 %414, %192
  %416 = add i32 %415, %193
  %417 = add i32 %416, %194
  %418 = add i32 %417, %195
  %419 = sub i32 %418, %196
  %420 = sub i32 %419, %197
  %421 = sub i32 %420, %198
  %422 = add i32 %421, %199
  %423 = add i32 %422, %200
  %424 = sub i32 %423, %201
  %425 = sub i32 %424, %202
  %426 = sub i32 %425, %203
  %427 = sub i32 %426, %208
  %428 = sub i32 %427, %209
  %429 = sub i32 %428, %211
  %430 = sub i32 %429, %213
  %431 = sub i32 %430, %215
  %432 = add i32 %431, %216
  %433 = add i32 %432, %217
  %434 = sub i32 %433, %222
  %435 = add i32 %434, %223
  %436 = sub i32 %435, %224
  %437 = sub i32 %436, %225
  %438 = sub i32 %437, %49
  %439 = add i32 %438, %228
  %440 = sub i32 %439, %232
  %441 = sub i32 %440, %235
  %442 = add i32 %441, %238
  %443 = add i32 %442, %12
  %444 = sub i32 %443, %239
  %445 = add i32 %444, %240
  %446 = sub i32 %445, %242
  %447 = add i32 %446, %243
  %448 = add i32 %447, %244
  %449 = sub i32 %448, %246
  %450 = sub i32 %449, %247
  %451 = add i32 %450, %248
  %452 = sub i32 %451, %250
  %453 = sub i32 %452, %252
  %454 = add i32 %453, %253
  %455 = add i32 %454, %254
  %456 = add i32 %455, %257
  %457 = sub i32 %456, %259
  %458 = sub i32 %457, %260
  %459 = sub i32 %458, %264
  %460 = sub i32 %459, %265
  %461 = sub i32 %460, %29
  %462 = add i32 %461, %266
  %463 = add i32 %462, %267
  %464 = sub i32 %463, %268
  %465 = add i32 %464, %270
  %466 = add i32 %465, %271
  %467 = add i32 %466, %272
  %468 = sub i32 %467, %273
  %469 = add i32 %468, %276
  %470 = add i32 %469, %277
  %471 = sub i32 %470, %20
  %472 = sub i32 %471, %23
  %473 = sub i32 %472, %50
  %474 = add i32 %473, %56
  %475 = sub i32 %474, %61
  %476 = sub i32 %475, %63
  %477 = add i32 %476, %65
  %478 = add i32 %477, %69
  %479 = sub i32 %478, %94
  %480 = sub i32 %479, %98
  %481 = sub i32 %480, %99
  %482 = sub i32 %481, %106
  %483 = sub i32 %482, %108
  %484 = sub i32 %483, %115
  %485 = sub i32 %484, %121
  %486 = add i32 %485, %130
  %487 = sub i32 %486, %136
  %488 = sub i32 %487, %140
  %489 = sub i32 %488, %157
  %490 = sub i32 %489, %161
  %491 = sub i32 %490, %167
  %492 = sub i32 %491, %175
  %493 = sub i32 %492, %176
  %494 = sub i32 %493, %188
  %495 = add i32 %494, %206
  %496 = sub i32 %495, %207
  %497 = sub i32 %496, %210
  %498 = sub i32 %497, %221
  %499 = sub i32 %498, %231
  %500 = sub i32 %499, %233
  %501 = sub i32 %500, %237
  %502 = sub i32 %501, %249
  %503 = sub i32 %502, %256
  %504 = sub i32 %503, %261
  %505 = add i32 %504, %275
  %506 = add i32 %505, %279
  %507 = add i32 %506, %281
  %508 = add i32 %507, %282
  %509 = add i32 %508, %284
  %510 = sub i32 %509, %35
  %511 = sub i32 %510, %220
  %512 = add i32 %511, %16
  %513 = add i32 %512, %305
  %514 = add i32 %513, %310
  %515 = add i32 %514, %301
  %516 = icmp eq i32 %7, %515
  %517 = select i1 %516, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %518 = tail call i32 @puts(i8* nonnull dereferenceable(1) %517)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
