; ModuleID = '../.././c_source_file/0032_path_condition_crackme.c'
source_filename = "../.././c_source_file/0032_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = shl i32 %6, 1
  %8 = xor i32 %4, -1
  %9 = or i32 %8, %3
  %10 = or i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %0
  %13 = or i32 %12, %11
  %14 = shl i32 %13, 1
  %15 = sub i32 %9, %14
  %16 = add i32 %15, %7
  %17 = and i32 %8, %3
  %18 = xor i32 %17, -1
  %19 = and i32 %4, %3
  %20 = xor i32 %6, -1
  %21 = or i32 %4, %3
  %22 = shl i32 %21, 1
  %23 = xor i32 %22, -2
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %2, %0
  %27 = xor i32 %2, -1
  %28 = and i32 %27, %1
  %29 = xor i32 %28, -1
  %30 = xor i32 %26, %29
  %31 = xor i32 %2, %1
  %32 = or i32 %31, %11
  %33 = xor i32 %12, -1
  %34 = or i32 %33, %11
  %35 = or i32 %24, %33
  %36 = xor i32 %1, -1
  %37 = and i32 %36, %0
  %38 = xor i32 %37, -1
  %39 = xor i32 %31, -1
  %40 = and i32 %39, %38
  %41 = and i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = and i32 %42, %0
  %44 = shl i32 %43, 2
  %45 = or i32 %36, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %39, %46
  %48 = and i32 %25, %2
  %49 = and i32 %41, %0
  %50 = xor i32 %31, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %49, %51
  %53 = and i32 %27, %0
  %54 = xor i32 %53, -1
  %55 = and i32 %54, %25
  %56 = or i32 %27, %1
  %57 = xor i32 %56, -1
  %58 = or i32 %57, %0
  %59 = and i32 %31, %38
  %60 = shl i32 %59, 1
  %61 = xor i32 %0, -1
  %62 = and i32 %29, %61
  %63 = or i32 %53, %25
  %64 = or i32 %27, %0
  %65 = and i32 %64, %1
  %66 = xor i32 %64, -1
  %67 = or i32 %66, %36
  %68 = or i32 %12, %36
  %69 = shl i32 %68, 1
  %70 = and i32 %1, %0
  %71 = xor i32 %70, -1
  %72 = and i32 %39, %71
  %73 = or i32 %37, %2
  %74 = and i32 %31, %61
  %75 = or i32 %49, %74
  %76 = shl i32 %75, 1
  %77 = or i32 %2, %0
  %78 = xor i32 %77, -1
  %79 = xor i32 %26, -1
  %80 = or i32 %2, %1
  %81 = xor i32 %80, %0
  %82 = or i32 %49, %81
  %83 = and i32 %27, %38
  %84 = and i32 %36, %2
  %85 = and i32 %84, %61
  %86 = or i32 %31, %61
  %87 = xor i32 %86, -1
  %88 = or i32 %85, %87
  %89 = or i32 %27, %25
  %90 = shl i32 %89, 1
  %91 = xor i32 %80, -1
  %92 = or i32 %26, %91
  %93 = xor i32 %57, %0
  %94 = and i32 %77, %36
  %95 = or i32 %26, %24
  %96 = xor i32 %79, %1
  %97 = xor i32 %64, %70
  %98 = xor i32 %49, %50
  %99 = xor i32 %53, %42
  %100 = shl i32 %99, 1
  %101 = or i32 %31, %0
  %102 = xor i32 %46, %2
  %103 = xor i32 %85, %86
  %104 = or i32 %24, %2
  %105 = or i32 %29, %0
  %106 = or i32 %78, %25
  %107 = or i32 %37, %33
  %108 = xor i32 %64, %1
  %109 = or i32 %31, %37
  %110 = or i32 %11, %2
  %111 = or i32 %53, %24
  %112 = and i32 %33, %1
  %113 = and i32 %33, %38
  %114 = xor i32 %26, %10
  %115 = and i32 %31, %10
  %116 = and i32 %39, %61
  %117 = and i32 %41, %61
  %118 = and i32 %80, %0
  %119 = xor i32 %118, -1
  %120 = xor i32 %117, %119
  %121 = xor i32 %74, -1
  %122 = xor i32 %49, %121
  %123 = and i32 %84, %0
  %124 = or i32 %123, %50
  %125 = and i32 %27, %25
  %126 = xor i32 %77, %70
  %127 = or i32 %117, %118
  %128 = xor i32 %78, %1
  %129 = xor i32 %37, %29
  %130 = or i32 %78, %1
  %131 = or i32 %42, %61
  %132 = shl i32 %131, 1
  %133 = xor i32 %56, %0
  %134 = and i32 %45, %39
  %135 = and i32 %45, %33
  %136 = or i32 %33, %36
  %137 = and i32 %71, %2
  %138 = or i32 %28, %37
  %139 = xor i32 %56, %70
  %140 = xor i32 %38, %2
  %141 = add i32 %31, 1
  %142 = add i32 %45, 1
  %143 = xor i32 %29, %0
  %144 = xor i32 %26, %45
  %145 = and i32 %39, %0
  %146 = or i32 %53, %41
  %147 = and i32 %10, %33
  %148 = or i32 %66, %25
  %149 = xor i32 %42, %0
  %150 = shl i32 %149, 1
  %151 = or i32 %12, %25
  %152 = xor i32 %123, %51
  %153 = or i32 %24, %78
  %154 = or i32 %70, %91
  %155 = xor i32 %77, %1
  %156 = or i32 %70, %2
  %157 = and i32 %80, %61
  %158 = and i32 %79, %36
  %159 = shl i32 %158, 1
  %160 = or i32 %41, %37
  %161 = or i32 %70, %57
  %162 = or i32 %27, %46
  %163 = and i32 %31, %0
  %164 = or i32 %117, %163
  %165 = xor i32 %54, %1
  %166 = or i32 %37, %27
  %167 = and i32 %56, %61
  %168 = or i32 %12, %46
  %169 = or i32 %31, %70
  %170 = and i32 %54, %1
  %171 = and i32 %77, %24
  %172 = and i32 %12, %71
  %173 = or i32 %12, %70
  %174 = or i32 %12, %1
  %175 = or i32 %36, %2
  %176 = and i32 %175, %61
  %177 = or i32 %123, %176
  %178 = and i32 %45, %2
  %179 = shl i32 %77, 1
  %180 = or i32 %91, %61
  %181 = and i32 %10, %2
  %182 = or i32 %39, %11
  %183 = xor i32 %53, %1
  %184 = and i32 %24, %79
  %185 = or i32 %57, %61
  %186 = shl i32 %61, 1
  %187 = xor i32 %71, %2
  %188 = or i32 %56, %0
  %189 = and i32 %12, %25
  %190 = and i32 %56, %0
  %191 = or i32 %49, %157
  %192 = shl i32 %26, 1
  %193 = xor i32 %11, %2
  %194 = add i32 %1, 1
  %195 = and i32 %42, %61
  %196 = and i32 %77, %1
  %197 = xor i32 %41, %0
  %198 = or i32 %39, %0
  %199 = xor i32 %176, -1
  %200 = xor i32 %123, %199
  %201 = add i32 %53, 1
  %202 = or i32 %26, %36
  %203 = and i32 %38, %2
  %204 = and i32 %24, %27
  %205 = or i32 %28, %0
  %206 = shl i32 %205, 1
  %207 = and i32 %77, %25
  %208 = or i32 %31, %46
  %209 = or i32 %12, %24
  %210 = or i32 %56, %61
  %211 = and i32 %24, %54
  %212 = or i32 %24, %27
  %213 = xor i32 %28, %0
  %214 = and i32 %33, %25
  %215 = and i32 %45, %27
  %216 = or i32 %24, %66
  %217 = or i32 %41, %0
  %218 = and i32 %24, %2
  %219 = or i32 %12, %37
  %220 = or i32 %80, %0
  %221 = xor i32 %157, 2147483647
  %222 = xor i32 %221, %49
  %223 = shl i32 %222, 1
  %224 = and i32 %24, %33
  %225 = shl i32 %224, 1
  %226 = and i32 %27, %71
  %227 = xor i32 %37, %2
  %228 = and i32 %64, %25
  %229 = shl i32 %53, 1
  %230 = and i32 %29, %0
  %231 = xor i32 %101, -1
  %232 = or i32 %123, %231
  %233 = xor i32 %70, %2
  %234 = and i32 %91, %61
  %235 = mul i32 %234, -17
  %236 = and i32 %28, %61
  %237 = and i32 %91, %0
  %238 = and i32 %28, %0
  %239 = and i32 %57, %61
  %240 = mul i32 %117, -23
  %241 = and i32 %57, %0
  %242 = mul i32 %241, -13
  %243 = shl i32 %49, 2
  %244 = add i32 %104, %125
  %245 = add i32 %244, %73
  %246 = sub i32 %237, %204
  %247 = add i32 %246, %238
  %248 = sub i32 %247, %236
  %249 = sub i32 %248, %101
  %250 = add i32 %249, %58
  %251 = mul i32 %250, 3
  %252 = add i32 %193, %212
  %253 = add i32 %252, %141
  %254 = sub i32 %253, %190
  %255 = add i32 %254, %18
  %256 = sub i32 %255, %19
  %257 = mul i32 %256, 5
  %258 = add i32 %17, %110
  %259 = shl i32 %258, 2
  %260 = add i32 %245, %3
  %261 = add i32 %260, %230
  %262 = add i32 %261, %239
  %263 = add i32 %262, %220
  %264 = add i32 %263, %219
  %265 = add i32 %264, %183
  %266 = add i32 %265, %182
  %267 = add i32 %266, %165
  %268 = add i32 %267, %139
  %269 = add i32 %268, %133
  %270 = add i32 %269, %116
  %271 = add i32 %270, %115
  %272 = add i32 %271, %94
  %273 = add i32 %272, %65
  %274 = shl i32 %273, 1
  %275 = add i32 %1, 3
  %276 = sub i32 %275, %186
  %277 = add i32 %276, %194
  %278 = add i32 %277, %25
  %279 = sub i32 %278, %2
  %280 = add i32 %279, %142
  %281 = add i32 %280, %70
  %282 = add i32 %281, %37
  %283 = sub i32 %282, %45
  %284 = add i32 %283, %31
  %285 = add i32 %284, %48
  %286 = add i32 %285, %57
  %287 = add i32 %286, %78
  %288 = add i32 %287, %79
  %289 = add i32 %288, %83
  %290 = add i32 %289, %102
  %291 = add i32 %290, %91
  %292 = sub i32 %291, %137
  %293 = add i32 %292, %140
  %294 = add i32 %293, %28
  %295 = add i32 %294, %64
  %296 = sub i32 %295, %156
  %297 = add i32 %296, %162
  %298 = add i32 %297, %166
  %299 = sub i32 %298, %178
  %300 = sub i32 %299, %181
  %301 = add i32 %300, %187
  %302 = add i32 %301, %201
  %303 = add i32 %302, %203
  %304 = sub i32 %303, %215
  %305 = sub i32 %304, %218
  %306 = add i32 %305, %226
  %307 = sub i32 %306, %227
  %308 = sub i32 %307, %233
  %309 = add i32 %308, %30
  %310 = sub i32 %309, %32
  %311 = add i32 %310, %34
  %312 = sub i32 %311, %35
  %313 = sub i32 %312, %40
  %314 = sub i32 %313, %47
  %315 = add i32 %314, %55
  %316 = add i32 %315, %62
  %317 = sub i32 %316, %63
  %318 = add i32 %317, %67
  %319 = add i32 %318, %72
  %320 = sub i32 %319, %81
  %321 = sub i32 %320, %90
  %322 = sub i32 %321, %92
  %323 = sub i32 %322, %93
  %324 = add i32 %323, %95
  %325 = sub i32 %324, %96
  %326 = sub i32 %325, %97
  %327 = add i32 %326, %105
  %328 = sub i32 %327, %106
  %329 = add i32 %328, %107
  %330 = add i32 %329, %108
  %331 = add i32 %330, %109
  %332 = sub i32 %331, %111
  %333 = sub i32 %332, %112
  %334 = add i32 %333, %113
  %335 = add i32 %334, %114
  %336 = sub i32 %335, %126
  %337 = sub i32 %336, %128
  %338 = add i32 %337, %129
  %339 = sub i32 %338, %130
  %340 = sub i32 %339, %134
  %341 = add i32 %340, %135
  %342 = add i32 %341, %136
  %343 = sub i32 %342, %138
  %344 = sub i32 %343, %143
  %345 = sub i32 %344, %144
  %346 = sub i32 %345, %145
  %347 = sub i32 %346, %146
  %348 = add i32 %347, %147
  %349 = sub i32 %348, %148
  %350 = sub i32 %349, %151
  %351 = add i32 %350, %153
  %352 = sub i32 %351, %154
  %353 = sub i32 %352, %155
  %354 = sub i32 %353, %157
  %355 = add i32 %354, %160
  %356 = sub i32 %355, %161
  %357 = sub i32 %356, %167
  %358 = add i32 %357, %168
  %359 = sub i32 %358, %169
  %360 = sub i32 %359, %170
  %361 = sub i32 %360, %171
  %362 = add i32 %361, %172
  %363 = add i32 %362, %173
  %364 = add i32 %363, %174
  %365 = sub i32 %364, %179
  %366 = add i32 %365, %180
  %367 = add i32 %366, %184
  %368 = sub i32 %367, %185
  %369 = add i32 %368, %188
  %370 = add i32 %369, %189
  %371 = sub i32 %370, %192
  %372 = sub i32 %371, %195
  %373 = add i32 %372, %196
  %374 = sub i32 %373, %197
  %375 = add i32 %374, %198
  %376 = add i32 %375, %202
  %377 = add i32 %376, %207
  %378 = sub i32 %377, %208
  %379 = add i32 %378, %209
  %380 = sub i32 %379, %210
  %381 = add i32 %380, %211
  %382 = sub i32 %381, %163
  %383 = add i32 %382, %213
  %384 = add i32 %383, %214
  %385 = sub i32 %384, %216
  %386 = add i32 %385, %217
  %387 = add i32 %386, %228
  %388 = sub i32 %387, %229
  %389 = add i32 %388, %86
  %390 = add i32 %389, %19
  %391 = add i32 %390, %20
  %392 = sub i32 %391, %44
  %393 = add i32 %392, %52
  %394 = sub i32 %393, %60
  %395 = sub i32 %394, %69
  %396 = add i32 %395, %82
  %397 = sub i32 %396, %88
  %398 = sub i32 %397, %98
  %399 = sub i32 %398, %100
  %400 = sub i32 %399, %103
  %401 = add i32 %400, %120
  %402 = add i32 %401, %122
  %403 = sub i32 %402, %124
  %404 = add i32 %403, %127
  %405 = sub i32 %404, %132
  %406 = sub i32 %405, %150
  %407 = add i32 %406, %152
  %408 = sub i32 %407, %159
  %409 = sub i32 %408, %164
  %410 = add i32 %409, %177
  %411 = add i32 %410, %191
  %412 = sub i32 %411, %200
  %413 = sub i32 %412, %206
  %414 = sub i32 %413, %225
  %415 = sub i32 %414, %232
  %416 = add i32 %415, %235
  %417 = add i32 %416, %240
  %418 = add i32 %417, %242
  %419 = sub i32 %418, %243
  %420 = sub i32 %419, %76
  %421 = sub i32 %420, %23
  %422 = sub i32 %421, %223
  %423 = add i32 %422, %259
  %424 = add i32 %423, %251
  %425 = add i32 %424, %257
  %426 = add i32 %425, %274
  %427 = icmp eq i32 %16, %426
  %428 = select i1 %427, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %429 = tail call i32 @puts(i8* nonnull dereferenceable(1) %428)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
