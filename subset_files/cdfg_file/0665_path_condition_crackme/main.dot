digraph "DFG for'main' function" {
	Node0x563c18[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x563c98[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x563d28[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x563d88[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x564208[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x5642e8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x5643e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x5644a8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x564558[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x5647b8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x564878[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x5649d8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x564a38[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x568b90[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x568d98[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x568ef8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x569008[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x5690c8[shape=record, label="  ret i32 0"];
	Node0x563c18 -> Node0x563c98;
	Node0x563c98 -> Node0x563d28;
	Node0x563d28 -> Node0x563d88;
	Node0x563d88 -> Node0x564208;
	Node0x564208 -> Node0x5642e8;
	Node0x5642e8 -> Node0x5643e8;
	Node0x5643e8 -> Node0x5644a8;
	Node0x5644a8 -> Node0x564558;
	Node0x564558 -> Node0x5647b8;
	Node0x5647b8 -> Node0x564878;
	Node0x564878 -> Node0x5649d8;
	Node0x5649d8 -> Node0x564a38;
	Node0x564a38 -> Node0x568b90;
	Node0x568b90 -> Node0x568d98;
	Node0x568d98 -> Node0x568ef8;
	Node0x568ef8 -> Node0x569008;
	Node0x569008 -> Node0x5690c8;
edge [color=red]
	Node0x563c18 -> Node0x563d88;
	Node0x563d88 -> Node0x564208;
	Node0x563c98 -> Node0x5642e8;
	Node0x5642e8 -> Node0x5643e8;
	Node0x563d28 -> Node0x5644a8;
	Node0x5644a8 -> Node0x564558;
	Node0x563c18 -> Node0x5647b8;
	Node0x563c98 -> Node0x5647b8;
	Node0x563d28 -> Node0x5647b8;
	Node0x563c18 -> Node0x564878;
	Node0x563c98 -> Node0x5649d8;
	Node0x563d28 -> Node0x564a38;
	Node0x564878 -> Node0x568b90;
	Node0x5649d8 -> Node0x568b90;
	Node0x564a38 -> Node0x568b90;
	Node0x5644a8 -> Node0x568d98;
	Node0x5642e8 -> Node0x568ef8;
	Node0x563d88 -> Node0x569008;
}
