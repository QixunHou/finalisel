; ModuleID = '../.././c_source_file/0665_path_condition_crackme.c'
source_filename = "../.././c_source_file/0665_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %1
  %7 = or i32 %6, %5
  %8 = and i32 %2, %0
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %1
  %11 = or i32 %8, %10
  %12 = add i32 %7, %11
  %13 = and i32 %1, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %14, %2
  %16 = and i32 %2, %1
  %17 = xor i32 %16, -1
  %18 = xor i32 %17, %0
  %19 = and i32 %9, %0
  %20 = xor i32 %1, %0
  %21 = or i32 %19, %20
  %22 = xor i32 %19, -1
  %23 = xor i32 %20, -1
  %24 = and i32 %22, %23
  %25 = or i32 %20, %2
  %26 = xor i32 %2, %0
  %27 = or i32 %26, %23
  %28 = xor i32 %0, -1
  %29 = and i32 %17, %28
  %30 = xor i32 %8, %4
  %31 = or i32 %8, %23
  %32 = or i32 %9, %1
  %33 = xor i32 %10, -1
  %34 = or i32 %33, %0
  %35 = xor i32 %1, -1
  %36 = or i32 %35, %0
  %37 = xor i32 %26, -1
  %38 = or i32 %37, %23
  %39 = xor i32 %6, -1
  %40 = or i32 %13, %39
  %41 = shl i32 %40, 1
  %42 = and i32 %35, %2
  %43 = and i32 %42, %0
  %44 = xor i32 %6, %0
  %45 = xor i32 %44, 2147483647
  %46 = xor i32 %45, %43
  %47 = shl i32 %46, 1
  %48 = xor i32 %8, -1
  %49 = and i32 %48, %23
  %50 = and i32 %26, %4
  %51 = or i32 %6, %0
  %52 = xor i32 %32, %0
  %53 = or i32 %2, %1
  %54 = xor i32 %53, -1
  %55 = add i32 %53, 1
  %56 = and i32 %26, %23
  %57 = and i32 %16, %28
  %58 = and i32 %6, %0
  %59 = or i32 %57, %58
  %60 = or i32 %54, %28
  %61 = add i32 %6, 1
  %62 = and i32 %20, %48
  %63 = and i32 %42, %28
  %64 = or i32 %35, %2
  %65 = and i32 %64, %0
  %66 = or i32 %63, %65
  %67 = and i32 %53, %0
  %68 = xor i32 %22, %1
  %69 = xor i32 %36, -1
  %70 = or i32 %37, %69
  %71 = shl i32 %70, 1
  %72 = or i32 %19, %35
  %73 = shl i32 %72, 1
  %74 = xor i32 %16, %0
  %75 = and i32 %37, %14
  %76 = xor i32 %32, -1
  %77 = or i32 %19, %76
  %78 = or i32 %26, %1
  %79 = xor i32 %69, %2
  %80 = and i32 %26, %14
  %81 = and i32 %20, %22
  %82 = xor i32 %39, %0
  %83 = or i32 %32, %28
  %84 = and i32 %48, %35
  %85 = and i32 %22, %35
  %86 = shl i32 %85, 1
  %87 = or i32 %69, %2
  %88 = or i32 %8, %1
  %89 = or i32 %8, %20
  %90 = shl i32 %35, 1
  %91 = xor i32 %19, %17
  %92 = and i32 %33, %28
  %93 = or i32 %2, %0
  %94 = xor i32 %93, -1
  %95 = or i32 %13, %94
  %96 = or i32 %9, %0
  %97 = xor i32 %96, -1
  %98 = or i32 %97, %23
  %99 = and i32 %39, %14
  %100 = and i32 %35, %0
  %101 = or i32 %26, %100
  %102 = and i32 %16, %0
  %103 = and i32 %53, %28
  %104 = or i32 %102, %103
  %105 = shl i32 %104, 1
  %106 = xor i32 %100, %2
  %107 = or i32 %17, %28
  %108 = add i32 %96, 1
  %109 = and i32 %23, %2
  %110 = shl i32 %20, 1
  %111 = or i32 %13, %9
  %112 = xor i32 %53, %13
  %113 = shl i32 %112, 1
  %114 = or i32 %32, %0
  %115 = xor i32 %100, -1
  %116 = and i32 %26, %115
  %117 = or i32 %94, %23
  %118 = or i32 %94, %1
  %119 = or i32 %97, %1
  %120 = and i32 %32, %28
  %121 = or i32 %76, %28
  %122 = and i32 %6, %115
  %123 = or i32 %23, %2
  %124 = or i32 %6, %100
  %125 = or i32 %16, %28
  %126 = xor i32 %58, -1
  %127 = xor i32 %57, %126
  %128 = xor i32 %76, %0
  %129 = and i32 %93, %1
  %130 = shl i32 %129, 1
  %131 = add i32 %93, 1
  %132 = and i32 %4, %39
  %133 = and i32 %26, %20
  %134 = xor i32 %19, %32
  %135 = or i32 %20, %9
  %136 = xor i32 %51, -1
  %137 = or i32 %43, %136
  %138 = or i32 %6, %28
  %139 = xor i32 %138, -1
  %140 = or i32 %63, %139
  %141 = or i32 %13, %97
  %142 = and i32 %6, %36
  %143 = or i32 %13, %2
  %144 = shl i32 %143, 1
  %145 = or i32 %54, %0
  %146 = or i32 %37, %1
  %147 = and i32 %6, %28
  %148 = or i32 %102, %147
  %149 = and i32 %9, %14
  %150 = or i32 %94, %35
  %151 = xor i32 %96, %1
  %152 = and i32 %96, %20
  %153 = or i32 %39, %28
  %154 = or i32 %9, %69
  %155 = xor i32 %63, %138
  %156 = shl i32 %155, 1
  %157 = xor i32 %53, %28
  %158 = xor i32 %157, %102
  %159 = or i32 %39, %5
  %160 = or i32 %100, %39
  %161 = xor i32 %54, %0
  %162 = and i32 %9, %23
  %163 = xor i32 %94, %1
  %164 = xor i32 %43, %51
  %165 = and i32 %4, %37
  %166 = xor i32 %8, %1
  %167 = and i32 %96, %35
  %168 = shl i32 %167, 1
  %169 = and i32 %96, %1
  %170 = and i32 %37, %23
  %171 = or i32 %37, %35
  %172 = and i32 %39, %28
  %173 = and i32 %93, %20
  %174 = or i32 %20, %97
  %175 = xor i32 %102, -1
  %176 = xor i32 %103, %175
  %177 = or i32 %97, %35
  %178 = or i32 %13, %76
  %179 = or i32 %26, %69
  %180 = shl i32 %179, 1
  %181 = and i32 %26, %1
  %182 = shl i32 %181, 1
  %183 = xor i32 %48, %1
  %184 = or i32 %5, %2
  %185 = or i32 %10, %0
  %186 = or i32 %19, %16
  %187 = or i32 %13, %54
  %188 = xor i32 %32, %13
  %189 = shl i32 %188, 1
  %190 = or i32 %26, %5
  %191 = or i32 %10, %100
  %192 = and i32 %26, %35
  %193 = shl i32 %192, 1
  %194 = or i32 %10, %28
  %195 = xor i32 %65, -1
  %196 = xor i32 %63, %195
  %197 = or i32 %16, %0
  %198 = or i32 %9, %5
  %199 = add i32 %26, 1
  %200 = shl i32 %17, 1
  %201 = xor i32 %36, %2
  %202 = or i32 %100, %37
  %203 = and i32 %14, %2
  %204 = or i32 %26, %35
  %205 = and i32 %37, %35
  %206 = and i32 %54, %28
  %207 = and i32 %10, %28
  %208 = mul i32 %207, 11
  %209 = and i32 %10, %0
  %210 = and i32 %76, %28
  %211 = mul i32 %210, 6
  %212 = and i32 %76, %0
  %213 = sub i32 %106, %15
  %214 = add i32 %213, %187
  %215 = add i32 %214, %185
  %216 = add i32 %215, %177
  %217 = add i32 %216, %172
  %218 = add i32 %217, %121
  %219 = add i32 %218, %95
  %220 = add i32 %219, %78
  %221 = add i32 %220, %68
  %222 = add i32 %221, %50
  %223 = add i32 %222, %30
  %224 = add i32 %223, %59
  %225 = add i32 %224, %164
  %226 = shl i32 %225, 1
  %227 = add i32 %206, %51
  %228 = sub i32 %227, %38
  %229 = mul i32 %228, 3
  %230 = sub i32 %212, %102
  %231 = mul i32 %230, 7
  %232 = add i32 %57, %34
  %233 = shl i32 %232, 2
  %234 = sub i32 %5, %36
  %235 = add i32 %234, %9
  %236 = sub i32 %235, %90
  %237 = sub i32 %236, %13
  %238 = sub i32 %237, %2
  %239 = add i32 %238, %14
  %240 = sub i32 %239, %25
  %241 = add i32 %240, %32
  %242 = add i32 %241, %55
  %243 = add i32 %242, %61
  %244 = sub i32 %243, %79
  %245 = sub i32 %244, %87
  %246 = add i32 %245, %108
  %247 = add i32 %246, %109
  %248 = sub i32 %247, %110
  %249 = sub i32 %248, %111
  %250 = sub i32 %249, %6
  %251 = add i32 %250, %123
  %252 = add i32 %251, %22
  %253 = add i32 %252, %131
  %254 = sub i32 %253, %135
  %255 = add i32 %254, %53
  %256 = add i32 %255, %149
  %257 = add i32 %256, %154
  %258 = sub i32 %257, %8
  %259 = sub i32 %258, %162
  %260 = add i32 %259, %96
  %261 = sub i32 %260, %184
  %262 = add i32 %261, %198
  %263 = add i32 %262, %199
  %264 = sub i32 %263, %19
  %265 = sub i32 %264, %201
  %266 = add i32 %265, %203
  %267 = sub i32 %266, %18
  %268 = sub i32 %267, %21
  %269 = add i32 %268, %24
  %270 = add i32 %269, %27
  %271 = sub i32 %270, %29
  %272 = sub i32 %271, %31
  %273 = sub i32 %272, %49
  %274 = add i32 %273, %52
  %275 = sub i32 %274, %56
  %276 = sub i32 %275, %44
  %277 = sub i32 %276, %60
  %278 = sub i32 %277, %62
  %279 = add i32 %278, %67
  %280 = sub i32 %279, %74
  %281 = add i32 %280, %75
  %282 = add i32 %281, %77
  %283 = add i32 %282, %80
  %284 = sub i32 %283, %81
  %285 = add i32 %284, %82
  %286 = add i32 %285, %83
  %287 = sub i32 %286, %84
  %288 = sub i32 %287, %88
  %289 = add i32 %288, %89
  %290 = sub i32 %289, %91
  %291 = add i32 %290, %92
  %292 = sub i32 %291, %98
  %293 = add i32 %292, %99
  %294 = sub i32 %293, %101
  %295 = add i32 %294, %107
  %296 = sub i32 %295, %114
  %297 = sub i32 %296, %116
  %298 = add i32 %297, %117
  %299 = sub i32 %298, %118
  %300 = sub i32 %299, %119
  %301 = sub i32 %300, %120
  %302 = add i32 %301, %122
  %303 = sub i32 %302, %124
  %304 = add i32 %303, %125
  %305 = sub i32 %304, %128
  %306 = add i32 %305, %132
  %307 = sub i32 %306, %133
  %308 = add i32 %307, %134
  %309 = sub i32 %308, %141
  %310 = add i32 %309, %142
  %311 = sub i32 %310, %144
  %312 = add i32 %311, %145
  %313 = add i32 %312, %146
  %314 = sub i32 %313, %150
  %315 = add i32 %314, %151
  %316 = add i32 %315, %152
  %317 = add i32 %316, %153
  %318 = sub i32 %317, %159
  %319 = add i32 %318, %160
  %320 = add i32 %319, %161
  %321 = add i32 %320, %163
  %322 = add i32 %321, %165
  %323 = add i32 %322, %166
  %324 = add i32 %323, %169
  %325 = add i32 %324, %170
  %326 = add i32 %325, %171
  %327 = sub i32 %326, %173
  %328 = sub i32 %327, %174
  %329 = add i32 %328, %178
  %330 = add i32 %329, %183
  %331 = add i32 %330, %186
  %332 = add i32 %331, %190
  %333 = sub i32 %332, %191
  %334 = sub i32 %333, %194
  %335 = sub i32 %334, %197
  %336 = sub i32 %335, %200
  %337 = sub i32 %336, %202
  %338 = add i32 %337, %204
  %339 = add i32 %338, %205
  %340 = add i32 %339, %209
  %341 = sub i32 %340, %41
  %342 = add i32 %341, %66
  %343 = sub i32 %342, %71
  %344 = sub i32 %343, %73
  %345 = sub i32 %344, %86
  %346 = sub i32 %345, %113
  %347 = sub i32 %346, %127
  %348 = sub i32 %347, %130
  %349 = add i32 %348, %137
  %350 = sub i32 %349, %140
  %351 = add i32 %350, %148
  %352 = sub i32 %351, %158
  %353 = sub i32 %352, %168
  %354 = sub i32 %353, %176
  %355 = sub i32 %354, %180
  %356 = sub i32 %355, %182
  %357 = sub i32 %356, %189
  %358 = sub i32 %357, %193
  %359 = sub i32 %358, %196
  %360 = add i32 %359, %208
  %361 = add i32 %360, %211
  %362 = sub i32 %361, %105
  %363 = sub i32 %362, %156
  %364 = add i32 %363, %231
  %365 = add i32 %364, %233
  %366 = sub i32 %365, %47
  %367 = add i32 %366, %229
  %368 = add i32 %367, %226
  %369 = icmp eq i32 %12, %368
  %370 = select i1 %369, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %371 = tail call i32 @puts(i8* nonnull dereferenceable(1) %370)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
