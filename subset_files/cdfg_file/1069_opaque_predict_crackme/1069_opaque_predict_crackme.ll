; ModuleID = '../.././c_source_file/1069_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1069_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %1, -1
  %8 = xor i32 %2, %0
  %9 = and i32 %8, %7
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %12, %0
  %14 = sub i32 1, %9
  %15 = add i32 %14, %13
  %16 = add i32 %15, %6
  %17 = shl i32 %6, 1
  %18 = or i32 %4, %3
  %19 = xor i32 %4, -1
  %20 = or i32 %19, %3
  %21 = xor i32 %20, -1
  %22 = and i32 %19, %3
  %23 = and i32 %4, %3
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %10, %25
  %27 = or i32 %24, %10
  %28 = and i32 %7, %0
  %29 = and i32 %8, %25
  %30 = and i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %0
  %33 = or i32 %7, %0
  %34 = xor i32 %33, -1
  %35 = shl i32 %34, 2
  %36 = xor i32 %11, %0
  %37 = or i32 %2, %0
  %38 = and i32 %37, %24
  %39 = and i32 %10, %0
  %40 = xor i32 %39, -1
  %41 = add i32 %39, 1
  %42 = xor i32 %8, -1
  %43 = and i32 %42, %1
  %44 = or i32 %8, %25
  %45 = xor i32 %0, -1
  %46 = and i32 %30, %45
  %47 = or i32 %2, %1
  %48 = and i32 %47, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %46, %49
  %51 = and i32 %1, %0
  %52 = xor i32 %37, -1
  %53 = or i32 %51, %52
  %54 = or i32 %10, %1
  %55 = xor i32 %54, -1
  %56 = or i32 %55, %45
  %57 = or i32 %1, %0
  %58 = xor i32 %57, %2
  %59 = or i32 %55, %0
  %60 = xor i32 %47, %0
  %61 = xor i32 %28, -1
  %62 = xor i32 %2, %1
  %63 = and i32 %62, %61
  %64 = or i32 %39, %30
  %65 = and i32 %2, %0
  %66 = or i32 %65, %24
  %67 = or i32 %46, %48
  %68 = shl i32 %67, 2
  %69 = and i32 %30, %0
  %70 = xor i32 %62, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %69, %71
  %73 = or i32 %62, %51
  %74 = and i32 %57, %2
  %75 = xor i32 %51, -1
  %76 = and i32 %75, %2
  %77 = and i32 %62, %33
  %78 = xor i32 %62, -1
  %79 = or i32 %51, %78
  %80 = shl i32 %70, 2
  %81 = and i32 %24, %40
  %82 = xor i32 %54, %0
  %83 = and i32 %78, %75
  %84 = shl i32 %42, 1
  %85 = xor i32 %78, %0
  %86 = and i32 %62, %0
  %87 = xor i32 %69, %70
  %88 = or i32 %78, %34
  %89 = xor i32 %65, %12
  %90 = xor i32 %28, %31
  %91 = and i32 %47, %45
  %92 = or i32 %69, %91
  %93 = or i32 %62, %45
  %94 = or i32 %28, %78
  %95 = or i32 %42, %7
  %96 = or i32 %69, %60
  %97 = shl i32 %96, 1
  %98 = and i32 %24, %10
  %99 = or i32 %10, %0
  %100 = xor i32 %99, -1
  %101 = xor i32 %100, %1
  %102 = xor i32 %47, -1
  %103 = or i32 %102, %45
  %104 = or i32 %47, %45
  %105 = or i32 %52, %25
  %106 = or i32 %31, %45
  %107 = and i32 %99, %25
  %108 = xor i32 %102, %0
  %109 = or i32 %10, %34
  %110 = xor i32 %57, -1
  %111 = or i32 %78, %110
  %112 = shl i32 %111, 1
  %113 = xor i32 %65, -1
  %114 = xor i32 %113, %1
  %115 = shl i32 %114, 1
  %116 = or i32 %78, %0
  %117 = or i32 %62, %28
  %118 = xor i32 %37, %1
  %119 = and i32 %42, %61
  %120 = or i32 %28, %10
  %121 = or i32 %24, %42
  %122 = or i32 %47, %0
  %123 = add i32 %99, 1
  %124 = and i32 %7, %2
  %125 = and i32 %124, %0
  %126 = or i32 %7, %2
  %127 = xor i32 %126, %0
  %128 = xor i32 %127, -1
  %129 = xor i32 %125, %128
  %130 = and i32 %54, %45
  %131 = and i32 %33, %2
  %132 = xor i32 %65, %47
  %133 = shl i32 %132, 1
  %134 = or i32 %39, %1
  %135 = and i32 %62, %57
  %136 = xor i32 %75, %2
  %137 = shl i32 %136, 1
  %138 = xor i32 %65, %1
  %139 = and i32 %124, %45
  %140 = and i32 %126, %0
  %141 = or i32 %139, %140
  %142 = shl i32 %141, 1
  %143 = or i32 %54, %0
  %144 = shl i32 %143, 1
  %145 = xor i32 %39, %1
  %146 = and i32 %10, %61
  %147 = and i32 %62, %45
  %148 = or i32 %51, %42
  %149 = shl i32 %148, 1
  %150 = and i32 %8, %61
  %151 = and i32 %8, %57
  %152 = or i32 %51, %100
  %153 = shl i32 %152, 1
  %154 = or i32 %100, %7
  %155 = xor i32 %93, -1
  %156 = or i32 %139, %155
  %157 = and i32 %8, %24
  %158 = xor i32 %28, %12
  %159 = xor i32 %61, %2
  %160 = shl i32 %159, 1
  %161 = shl i32 %10, 1
  %162 = xor i32 %37, %51
  %163 = and i32 %113, %7
  %164 = or i32 %42, %34
  %165 = or i32 %65, %25
  %166 = or i32 %39, %55
  %167 = or i32 %69, %147
  %168 = or i32 %11, %28
  %169 = shl i32 %168, 1
  %170 = xor i32 %125, %71
  %171 = shl i32 %170, 1
  %172 = or i32 %100, %1
  %173 = xor i32 %39, %31
  %174 = xor i32 %99, %51
  %175 = shl i32 %174, 1
  %176 = xor i32 %65, %33
  %177 = xor i32 %110, %2
  %178 = or i32 %28, %2
  %179 = or i32 %10, %110
  %180 = or i32 %8, %7
  %181 = xor i32 %99, %1
  %182 = and i32 %37, %7
  %183 = and i32 %54, %0
  %184 = xor i32 %55, %0
  %185 = or i32 %31, %0
  %186 = or i32 %65, %1
  %187 = or i32 %8, %110
  %188 = xor i32 %140, -1
  %189 = xor i32 %139, %188
  %190 = xor i32 %47, %51
  %191 = and i32 %12, %0
  %192 = or i32 %102, %0
  %193 = or i32 %24, %100
  %194 = xor i32 %69, -1
  %195 = xor i32 %147, %194
  %196 = xor i32 %139, %93
  %197 = or i32 %125, %127
  %198 = or i32 %42, %1
  %199 = or i32 %39, %25
  %200 = and i32 %40, %1
  %201 = or i32 %10, %25
  %202 = and i32 %113, %25
  %203 = xor i32 %91, %194
  %204 = or i32 %62, %110
  %205 = xor i32 %60, 1073741823
  %206 = xor i32 %205, %69
  %207 = xor i32 %52, %1
  %208 = and i32 %78, %61
  %209 = or i32 %8, %1
  %210 = or i32 %125, %70
  %211 = or i32 %65, %11
  %212 = and i32 %31, %45
  %213 = or i32 %24, %52
  %214 = or i32 %65, %7
  %215 = and i32 %25, %2
  %216 = and i32 %57, %10
  %217 = add i32 %54, 1
  %218 = xor i32 %51, %2
  %219 = or i32 %65, %34
  %220 = or i32 %46, %86
  %221 = or i32 %11, %0
  %222 = shl i32 %221, 1
  %223 = and i32 %24, %42
  %224 = and i32 %24, %113
  %225 = and i32 %78, %45
  %226 = xor i32 %33, %2
  %227 = and i32 %37, %25
  %228 = and i32 %37, %1
  %229 = xor i32 %54, %51
  %230 = add i32 %30, 1
  %231 = or i32 %39, %24
  %232 = xor i32 %65, %57
  %233 = or i32 %8, %24
  %234 = and i32 %126, %45
  %235 = or i32 %125, %234
  %236 = or i32 %30, %45
  %237 = xor i32 %30, %0
  %238 = or i32 %42, %110
  %239 = or i32 %100, %25
  %240 = and i32 %40, %7
  %241 = and i32 %99, %1
  %242 = or i32 %51, %55
  %243 = and i32 %42, %7
  %244 = shl i32 %48, 1
  %245 = or i32 %62, %0
  %246 = xor i32 %125, %245
  %247 = and i32 %12, %45
  %248 = or i32 %52, %7
  %249 = and i32 %8, %75
  %250 = or i32 %30, %28
  %251 = and i32 %102, %45
  %252 = mul i32 %251, 12
  %253 = and i32 %11, %45
  %254 = shl i32 %253, 3
  %255 = and i32 %11, %0
  %256 = mul i32 %255, -11
  %257 = and i32 %55, %45
  %258 = and i32 %55, %0
  %259 = mul i32 %258, 19
  %260 = add i32 %52, %110
  %261 = add i32 %260, %76
  %262 = add i32 %261, %27
  %263 = add i32 %262, %239
  %264 = add i32 %263, %232
  %265 = add i32 %264, %214
  %266 = add i32 %265, %211
  %267 = add i32 %266, %192
  %268 = add i32 %267, %172
  %269 = add i32 %268, %134
  %270 = add i32 %269, %106
  %271 = add i32 %270, %101
  %272 = add i32 %271, %64
  %273 = add i32 %272, %44
  %274 = add i32 %273, %22
  %275 = add i32 %274, %92
  %276 = add i32 %275, %20
  %277 = add i32 %257, %98
  %278 = add i32 %277, %240
  %279 = sub i32 %208, %278
  %280 = add i32 %279, %63
  %281 = add i32 %280, %60
  %282 = add i32 %281, %21
  %283 = mul i32 %282, 3
  %284 = sub i32 %226, %74
  %285 = sub i32 %284, %94
  %286 = sub i32 %285, %46
  %287 = sub i32 %286, %53
  %288 = mul i32 %287, 5
  %289 = add i32 %36, %69
  %290 = add i32 %289, %206
  %291 = shl i32 %290, 2
  %292 = add i32 %276, %18
  %293 = shl i32 %292, 1
  %294 = add i32 %0, %1
  %295 = add i32 %294, 4
  %296 = add i32 %295, %1
  %297 = sub i32 %296, %28
  %298 = add i32 %297, %33
  %299 = add i32 %298, %57
  %300 = add i32 %299, %25
  %301 = sub i32 %300, %24
  %302 = add i32 %301, %2
  %303 = sub i32 %302, %3
  %304 = add i32 %303, %26
  %305 = sub i32 %304, %35
  %306 = add i32 %305, %41
  %307 = add i32 %306, %58
  %308 = add i32 %307, %37
  %309 = add i32 %308, %62
  %310 = add i32 %309, %30
  %311 = add i32 %310, %109
  %312 = sub i32 %311, %120
  %313 = add i32 %312, %123
  %314 = add i32 %313, %131
  %315 = add i32 %314, %39
  %316 = add i32 %315, %65
  %317 = sub i32 %316, %146
  %318 = add i32 %317, %99
  %319 = sub i32 %318, %161
  %320 = sub i32 %319, %177
  %321 = sub i32 %320, %178
  %322 = add i32 %321, %54
  %323 = sub i32 %322, %179
  %324 = sub i32 %323, %201
  %325 = add i32 %324, %215
  %326 = sub i32 %325, %216
  %327 = add i32 %326, %217
  %328 = add i32 %327, %218
  %329 = add i32 %328, %230
  %330 = sub i32 %329, %29
  %331 = add i32 %330, %32
  %332 = sub i32 %331, %38
  %333 = add i32 %332, %43
  %334 = sub i32 %333, %56
  %335 = sub i32 %334, %59
  %336 = sub i32 %335, %66
  %337 = sub i32 %336, %73
  %338 = add i32 %337, %77
  %339 = sub i32 %338, %79
  %340 = add i32 %339, %81
  %341 = add i32 %340, %82
  %342 = add i32 %341, %83
  %343 = sub i32 %342, %84
  %344 = add i32 %343, %85
  %345 = add i32 %344, %86
  %346 = add i32 %345, %88
  %347 = sub i32 %346, %89
  %348 = sub i32 %347, %90
  %349 = sub i32 %348, %93
  %350 = add i32 %349, %95
  %351 = add i32 %350, %103
  %352 = sub i32 %351, %104
  %353 = add i32 %352, %105
  %354 = sub i32 %353, %107
  %355 = add i32 %354, %108
  %356 = add i32 %355, %116
  %357 = add i32 %356, %117
  %358 = add i32 %357, %118
  %359 = add i32 %358, %119
  %360 = sub i32 %359, %121
  %361 = add i32 %360, %122
  %362 = add i32 %361, %130
  %363 = sub i32 %362, %135
  %364 = sub i32 %363, %137
  %365 = sub i32 %364, %138
  %366 = sub i32 %365, %145
  %367 = sub i32 %366, %147
  %368 = sub i32 %367, %150
  %369 = sub i32 %368, %151
  %370 = sub i32 %369, %154
  %371 = add i32 %370, %157
  %372 = add i32 %371, %158
  %373 = sub i32 %372, %160
  %374 = add i32 %373, %162
  %375 = sub i32 %374, %163
  %376 = sub i32 %375, %164
  %377 = sub i32 %376, %165
  %378 = add i32 %377, %166
  %379 = sub i32 %378, %173
  %380 = sub i32 %379, %176
  %381 = add i32 %380, %180
  %382 = sub i32 %381, %181
  %383 = add i32 %382, %182
  %384 = sub i32 %383, %183
  %385 = add i32 %384, %184
  %386 = add i32 %385, %185
  %387 = add i32 %386, %186
  %388 = add i32 %387, %187
  %389 = sub i32 %388, %190
  %390 = sub i32 %389, %191
  %391 = sub i32 %390, %193
  %392 = add i32 %391, %198
  %393 = sub i32 %392, %199
  %394 = add i32 %393, %200
  %395 = add i32 %394, %202
  %396 = sub i32 %395, %204
  %397 = add i32 %396, %207
  %398 = sub i32 %397, %209
  %399 = sub i32 %398, %212
  %400 = add i32 %399, %213
  %401 = sub i32 %400, %219
  %402 = sub i32 %401, %223
  %403 = add i32 %402, %224
  %404 = sub i32 %403, %225
  %405 = sub i32 %404, %227
  %406 = add i32 %405, %228
  %407 = add i32 %406, %229
  %408 = add i32 %407, %231
  %409 = add i32 %408, %233
  %410 = add i32 %409, %236
  %411 = sub i32 %410, %237
  %412 = add i32 %411, %238
  %413 = sub i32 %412, %241
  %414 = add i32 %413, %242
  %415 = sub i32 %414, %243
  %416 = add i32 %415, %247
  %417 = sub i32 %416, %248
  %418 = sub i32 %417, %249
  %419 = add i32 %418, %250
  %420 = sub i32 %419, %23
  %421 = sub i32 %420, %50
  %422 = sub i32 %421, %72
  %423 = sub i32 %422, %80
  %424 = add i32 %423, %87
  %425 = sub i32 %424, %112
  %426 = sub i32 %425, %115
  %427 = add i32 %426, %129
  %428 = sub i32 %427, %133
  %429 = sub i32 %428, %144
  %430 = sub i32 %429, %149
  %431 = sub i32 %430, %153
  %432 = add i32 %431, %156
  %433 = add i32 %432, %167
  %434 = sub i32 %433, %169
  %435 = sub i32 %434, %175
  %436 = add i32 %435, %189
  %437 = sub i32 %436, %195
  %438 = sub i32 %437, %196
  %439 = sub i32 %438, %197
  %440 = sub i32 %439, %203
  %441 = sub i32 %440, %210
  %442 = add i32 %441, %220
  %443 = sub i32 %442, %222
  %444 = sub i32 %443, %235
  %445 = sub i32 %444, %244
  %446 = add i32 %445, %246
  %447 = add i32 %446, %252
  %448 = add i32 %447, %254
  %449 = add i32 %448, %256
  %450 = add i32 %449, %259
  %451 = sub i32 %450, %17
  %452 = sub i32 %451, %68
  %453 = sub i32 %452, %97
  %454 = sub i32 %453, %142
  %455 = sub i32 %454, %171
  %456 = add i32 %455, %288
  %457 = add i32 %456, %291
  %458 = add i32 %457, %283
  %459 = add i32 %458, %293
  %460 = icmp eq i32 %16, %459
  %461 = select i1 %460, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %462 = tail call i32 @puts(i8* nonnull dereferenceable(1) %461)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
