; ModuleID = '../.././c_source_file/0674_path_condition_crackme.c'
source_filename = "../.././c_source_file/0674_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = shl i32 %7, 1
  %9 = or i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %6, %10
  %12 = or i32 %6, %4
  %13 = or i32 %2, %0
  %14 = and i32 %13, %4
  %15 = or i32 %6, %1
  %16 = and i32 %4, %2
  %17 = or i32 %2, %1
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %0
  %20 = shl i32 %19, 2
  %21 = and i32 %1, %0
  %22 = xor i32 %2, %1
  %23 = xor i32 %22, -1
  %24 = or i32 %21, %23
  %25 = shl i32 %24, 1
  %26 = xor i32 %0, -1
  %27 = xor i32 %2, -1
  %28 = or i32 %27, %1
  %29 = and i32 %28, %26
  %30 = and i32 %2, %1
  %31 = or i32 %30, %0
  %32 = xor i32 %6, -1
  %33 = or i32 %32, %10
  %34 = or i32 %17, %0
  %35 = xor i32 %1, -1
  %36 = and i32 %27, %0
  %37 = xor i32 %28, -1
  %38 = or i32 %36, %37
  %39 = and i32 %30, %26
  %40 = and i32 %17, %0
  %41 = or i32 %39, %40
  %42 = or i32 %27, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %1
  %45 = and i32 %27, %5
  %46 = and i32 %35, %2
  %47 = and i32 %46, %0
  %48 = or i32 %35, %2
  %49 = xor i32 %48, %0
  %50 = or i32 %47, %49
  %51 = and i32 %35, %0
  %52 = xor i32 %51, %2
  %53 = and i32 %2, %0
  %54 = or i32 %53, %35
  %55 = shl i32 %54, 1
  %56 = or i32 %21, %37
  %57 = xor i32 %53, %17
  %58 = and i32 %22, %0
  %59 = xor i32 %39, -1
  %60 = xor i32 %58, %59
  %61 = add i32 %42, 1
  %62 = xor i32 %22, %0
  %63 = and i32 %27, %1
  %64 = xor i32 %63, -1
  %65 = xor i32 %64, %0
  %66 = xor i32 %51, -1
  %67 = or i32 %43, %5
  %68 = and i32 %28, %0
  %69 = and i32 %46, %26
  %70 = and i32 %48, %0
  %71 = xor i32 %70, -1
  %72 = xor i32 %69, %71
  %73 = and i32 %64, %0
  %74 = and i32 %9, %32
  %75 = xor i32 %21, -1
  %76 = and i32 %22, %75
  %77 = or i32 %4, %2
  %78 = and i32 %6, %5
  %79 = or i32 %35, %0
  %80 = and i32 %79, %23
  %81 = and i32 %23, %26
  %82 = or i32 %6, %21
  %83 = xor i32 %30, -1
  %84 = xor i32 %36, %83
  %85 = or i32 %27, %10
  %86 = or i32 %53, %5
  %87 = or i32 %10, %2
  %88 = or i32 %5, %2
  %89 = and i32 %30, %0
  %90 = or i32 %23, %0
  %91 = xor i32 %89, %90
  %92 = or i32 %53, %1
  %93 = or i32 %23, %10
  %94 = xor i32 %36, -1
  %95 = and i32 %94, %5
  %96 = xor i32 %17, %0
  %97 = or i32 %89, %96
  %98 = shl i32 %97, 1
  %99 = or i32 %22, %51
  %100 = or i32 %47, %62
  %101 = or i32 %39, %58
  %102 = xor i32 %37, %0
  %103 = shl i32 %102, 1
  %104 = and i32 %9, %23
  %105 = xor i32 %79, -1
  %106 = or i32 %53, %105
  %107 = and i32 %6, %1
  %108 = and i32 %79, %27
  %109 = or i32 %22, %10
  %110 = or i32 %6, %51
  %111 = shl i32 %110, 1
  %112 = xor i32 %13, -1
  %113 = or i32 %112, %35
  %114 = shl i32 %113, 1
  %115 = or i32 %112, %5
  %116 = add i32 %22, 1
  %117 = and i32 %42, %35
  %118 = and i32 %79, %2
  %119 = and i32 %6, %75
  %120 = xor i32 %36, %28
  %121 = xor i32 %112, %1
  %122 = or i32 %4, %32
  %123 = and i32 %17, %26
  %124 = or i32 %89, %123
  %125 = xor i32 %28, %0
  %126 = and i32 %6, %4
  %127 = or i32 %22, %26
  %128 = or i32 %22, %21
  %129 = or i32 %37, %26
  %130 = shl i32 %129, 2
  %131 = or i32 %4, %43
  %132 = or i32 %30, %51
  %133 = and i32 %32, %75
  %134 = or i32 %64, %26
  %135 = or i32 %112, %1
  %136 = or i32 %21, %27
  %137 = or i32 %32, %1
  %138 = xor i32 %43, %1
  %139 = or i32 %22, %105
  %140 = xor i32 %53, -1
  %141 = xor i32 %62, -1
  %142 = xor i32 %47, %141
  %143 = or i32 %6, %105
  %144 = or i32 %32, %5
  %145 = xor i32 %23, %0
  %146 = or i32 %6, %35
  %147 = or i32 %23, %105
  %148 = xor i32 %123, 2147483647
  %149 = xor i32 %148, %89
  %150 = shl i32 %149, 1
  %151 = xor i32 %79, %2
  %152 = or i32 %83, %0
  %153 = shl i32 %112, 1
  %154 = or i32 %53, %18
  %155 = or i32 %21, %32
  %156 = or i32 %53, %4
  %157 = and i32 %22, %9
  %158 = xor i32 %30, %0
  %159 = and i32 %23, %75
  %160 = or i32 %21, %2
  %161 = xor i32 %40, %59
  %162 = xor i32 %63, %0
  %163 = shl i32 %162, 1
  %164 = xor i32 %42, %1
  %165 = or i32 %37, %0
  %166 = shl i32 %165, 1
  %167 = and i32 %140, %35
  %168 = add i32 %21, 1
  %169 = xor i32 %13, %1
  %170 = and i32 %23, %66
  %171 = and i32 %5, %2
  %172 = add i32 %2, 1
  %173 = and i32 %22, %66
  %174 = or i32 %32, %35
  %175 = shl i32 %174, 1
  %176 = xor i32 %96, -1
  %177 = xor i32 %89, %176
  %178 = or i32 %89, %141
  %179 = xor i32 %53, %79
  %180 = and i32 %32, %66
  %181 = or i32 %105, %2
  %182 = or i32 %21, %112
  %183 = or i32 %63, %51
  %184 = and i32 %23, %0
  %185 = and i32 %83, %26
  %186 = and i32 %48, %26
  %187 = or i32 %47, %186
  %188 = xor i32 %69, %127
  %189 = and i32 %4, %32
  %190 = and i32 %140, %1
  %191 = and i32 %79, %32
  %192 = shl i32 %191, 1
  %193 = and i32 %18, %26
  %194 = shl i32 %193, 2
  %195 = and i32 %63, %26
  %196 = and i32 %18, %0
  %197 = and i32 %63, %0
  %198 = and i32 %37, %26
  %199 = shl i32 %39, 3
  %200 = and i32 %37, %0
  %201 = add i32 %136, %53
  %202 = add i32 %201, %42
  %203 = add i32 %202, %16
  %204 = add i32 %203, %184
  %205 = add i32 %204, %196
  %206 = add i32 %205, %167
  %207 = add i32 %206, %156
  %208 = add i32 %207, %155
  %209 = add i32 %208, %144
  %210 = add i32 %209, %117
  %211 = add i32 %210, %115
  %212 = add i32 %211, %99
  %213 = add i32 %212, %78
  %214 = add i32 %213, %68
  %215 = add i32 %214, %65
  %216 = add i32 %215, %15
  %217 = shl i32 %216, 1
  %218 = add i32 %197, %9
  %219 = mul i32 %218, -5
  %220 = sub i32 %26, %44
  %221 = mul i32 %220, 3
  %222 = sub i32 %51, %1
  %223 = sub i32 %222, %2
  %224 = add i32 %223, %21
  %225 = add i32 %224, %168
  %226 = add i32 %225, %172
  %227 = sub i32 %226, %45
  %228 = sub i32 %227, %52
  %229 = add i32 %228, %28
  %230 = add i32 %229, %61
  %231 = sub i32 %230, %63
  %232 = add i32 %231, %77
  %233 = add i32 %232, %85
  %234 = add i32 %233, %87
  %235 = sub i32 %234, %88
  %236 = add i32 %235, %13
  %237 = sub i32 %236, %108
  %238 = add i32 %237, %116
  %239 = add i32 %238, %118
  %240 = add i32 %239, %140
  %241 = add i32 %240, %151
  %242 = add i32 %241, %160
  %243 = sub i32 %242, %171
  %244 = sub i32 %243, %181
  %245 = sub i32 %244, %11
  %246 = add i32 %245, %12
  %247 = sub i32 %246, %14
  %248 = sub i32 %247, %29
  %249 = sub i32 %248, %31
  %250 = add i32 %249, %33
  %251 = add i32 %250, %34
  %252 = add i32 %251, %38
  %253 = add i32 %252, %56
  %254 = add i32 %253, %57
  %255 = sub i32 %254, %62
  %256 = add i32 %255, %67
  %257 = add i32 %256, %73
  %258 = sub i32 %257, %74
  %259 = sub i32 %258, %76
  %260 = sub i32 %259, %80
  %261 = add i32 %260, %81
  %262 = sub i32 %261, %82
  %263 = sub i32 %262, %84
  %264 = add i32 %263, %86
  %265 = add i32 %264, %92
  %266 = add i32 %265, %93
  %267 = sub i32 %266, %95
  %268 = sub i32 %267, %104
  %269 = add i32 %268, %106
  %270 = add i32 %269, %107
  %271 = add i32 %270, %109
  %272 = sub i32 %271, %119
  %273 = add i32 %272, %120
  %274 = sub i32 %273, %121
  %275 = add i32 %274, %122
  %276 = add i32 %275, %125
  %277 = sub i32 %276, %126
  %278 = sub i32 %277, %127
  %279 = add i32 %278, %128
  %280 = add i32 %279, %131
  %281 = sub i32 %280, %132
  %282 = sub i32 %281, %133
  %283 = sub i32 %282, %134
  %284 = add i32 %283, %135
  %285 = sub i32 %284, %137
  %286 = sub i32 %285, %138
  %287 = add i32 %286, %139
  %288 = add i32 %287, %143
  %289 = sub i32 %288, %145
  %290 = sub i32 %289, %146
  %291 = add i32 %290, %147
  %292 = sub i32 %291, %152
  %293 = sub i32 %292, %153
  %294 = add i32 %293, %154
  %295 = add i32 %294, %157
  %296 = add i32 %295, %158
  %297 = add i32 %296, %159
  %298 = add i32 %297, %164
  %299 = add i32 %298, %123
  %300 = add i32 %299, %169
  %301 = add i32 %300, %170
  %302 = add i32 %301, %173
  %303 = add i32 %302, %179
  %304 = add i32 %303, %180
  %305 = sub i32 %304, %182
  %306 = sub i32 %305, %183
  %307 = add i32 %306, %185
  %308 = add i32 %307, %189
  %309 = sub i32 %308, %190
  %310 = sub i32 %309, %195
  %311 = add i32 %310, %198
  %312 = sub i32 %311, %200
  %313 = add i32 %312, %20
  %314 = sub i32 %313, %25
  %315 = sub i32 %314, %41
  %316 = sub i32 %315, %50
  %317 = sub i32 %316, %55
  %318 = add i32 %317, %60
  %319 = sub i32 %318, %72
  %320 = add i32 %319, %91
  %321 = sub i32 %320, %100
  %322 = sub i32 %321, %101
  %323 = sub i32 %322, %103
  %324 = sub i32 %323, %111
  %325 = sub i32 %324, %114
  %326 = sub i32 %325, %124
  %327 = sub i32 %326, %130
  %328 = sub i32 %327, %142
  %329 = sub i32 %328, %161
  %330 = sub i32 %329, %163
  %331 = sub i32 %330, %166
  %332 = sub i32 %331, %175
  %333 = sub i32 %332, %177
  %334 = add i32 %333, %178
  %335 = add i32 %334, %187
  %336 = sub i32 %335, %188
  %337 = sub i32 %336, %192
  %338 = sub i32 %337, %194
  %339 = add i32 %338, %199
  %340 = sub i32 %339, %98
  %341 = add i32 %340, %219
  %342 = add i32 %341, %221
  %343 = sub i32 %342, %150
  %344 = add i32 %343, %217
  %345 = icmp eq i32 %8, %344
  %346 = select i1 %345, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %347 = tail call i32 @puts(i8* nonnull dereferenceable(1) %346)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
