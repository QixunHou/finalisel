digraph "DFG for'crackme' function" {
	Node0xf1fa80[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0xf20100[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0xf20170[shape=record, label="  %7 = and i32 %3, %0"];
	Node0xf20210[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0xf202b0[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0xf20320[shape=record, label="  %10 = sub i32 %6, %9"];
	Node0xf20390[shape=record, label="  %11 = xor i32 %1, -1"];
	Node0xf20400[shape=record, label="  %12 = or i32 %11, %2"];
	Node0xf20470[shape=record, label="  %13 = or i32 %2, %1"];
	Node0xf204e0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0xf20550[shape=record, label="  %15 = or i32 %3, %0"];
	Node0xf205f0[shape=record, label="  %16 = mul i32 %0, -3"];
	Node0xf20660[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0xf206d0[shape=record, label="  %18 = shl i32 %17, 2"];
	Node0xf20740[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0xf207b0[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0xf20850[shape=record, label="  %21 = shl i32 %19, 1"];
	Node0xf208f0[shape=record, label="  %22 = shl i32 %15, 3"];
	Node0xf20990[shape=record, label="  %23 = xor i32 %22, -8"];
	Node0xf20a00[shape=record, label="  %24 = xor i32 %3, -1"];
	Node0xf20a70[shape=record, label="  %25 = and i32 %24, %0"];
	Node0xf20ae0[shape=record, label="  %26 = and i32 %17, %3"];
	Node0xf20b80[shape=record, label="  %27 = mul i32 %26, -6"];
	Node0xf20bf0[shape=record, label="  %28 = shl i32 %7, 1"];
	Node0xf20c60[shape=record, label="  %29 = add i32 %18, %16"];
	Node0xf20cd0[shape=record, label="  %30 = add i32 %29, %2"];
	Node0xf20d40[shape=record, label="  %31 = sub i32 %30, %5"];
	Node0xf20db0[shape=record, label="  %32 = sub i32 %31, %12"];
	Node0xf21030[shape=record, label="  %33 = add i32 %32, %14"];
	Node0xf210a0[shape=record, label="  %34 = add i32 %33, %15"];
	Node0xf21110[shape=record, label="  %35 = add i32 %34, %20"];
	Node0xf21180[shape=record, label="  %36 = add i32 %35, %25"];
	Node0xf211f0[shape=record, label="  %37 = sub i32 %36, %21"];
	Node0xf21260[shape=record, label="  %38 = add i32 %37, %27"];
	Node0xf212d0[shape=record, label="  %39 = add i32 %38, %28"];
	Node0xf21340[shape=record, label="  %40 = sub i32 %39, %23"];
	Node0xf213b0[shape=record, label="  %41 = icmp eq i32 %10, %40"];
	Node0xec0268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xf21850[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0xf218a0[shape=record, label="  ret void"];
	Node0xf1fa80 -> Node0xf20100;
	Node0xf20100 -> Node0xf20170;
	Node0xf20170 -> Node0xf20210;
	Node0xf20210 -> Node0xf202b0;
	Node0xf202b0 -> Node0xf20320;
	Node0xf20320 -> Node0xf20390;
	Node0xf20390 -> Node0xf20400;
	Node0xf20400 -> Node0xf20470;
	Node0xf20470 -> Node0xf204e0;
	Node0xf204e0 -> Node0xf20550;
	Node0xf20550 -> Node0xf205f0;
	Node0xf205f0 -> Node0xf20660;
	Node0xf20660 -> Node0xf206d0;
	Node0xf206d0 -> Node0xf20740;
	Node0xf20740 -> Node0xf207b0;
	Node0xf207b0 -> Node0xf20850;
	Node0xf20850 -> Node0xf208f0;
	Node0xf208f0 -> Node0xf20990;
	Node0xf20990 -> Node0xf20a00;
	Node0xf20a00 -> Node0xf20a70;
	Node0xf20a70 -> Node0xf20ae0;
	Node0xf20ae0 -> Node0xf20b80;
	Node0xf20b80 -> Node0xf20bf0;
	Node0xf20bf0 -> Node0xf20c60;
	Node0xf20c60 -> Node0xf20cd0;
	Node0xf20cd0 -> Node0xf20d40;
	Node0xf20d40 -> Node0xf20db0;
	Node0xf20db0 -> Node0xf21030;
	Node0xf21030 -> Node0xf210a0;
	Node0xf210a0 -> Node0xf21110;
	Node0xf21110 -> Node0xf21180;
	Node0xf21180 -> Node0xf211f0;
	Node0xf211f0 -> Node0xf21260;
	Node0xf21260 -> Node0xf212d0;
	Node0xf212d0 -> Node0xf21340;
	Node0xf21340 -> Node0xf213b0;
	Node0xf213b0 -> Node0xec0268;
	Node0xec0268 -> Node0xf21850;
	Node0xf21850 -> Node0xf218a0;
edge [color=red]
	Node0xf1fa80 -> Node0xf20100;
	Node0xf20170 -> Node0xf20210;
	Node0xf20210 -> Node0xf202b0;
	Node0xf20100 -> Node0xf20320;
	Node0xf202b0 -> Node0xf20320;
	Node0xf20390 -> Node0xf20400;
	Node0xf20470 -> Node0xf204e0;
	Node0xf20660 -> Node0xf206d0;
	Node0xf20740 -> Node0xf207b0;
	Node0xf20740 -> Node0xf20850;
	Node0xf20550 -> Node0xf208f0;
	Node0xf208f0 -> Node0xf20990;
	Node0xf20a00 -> Node0xf20a70;
	Node0xf20660 -> Node0xf20ae0;
	Node0xf20ae0 -> Node0xf20b80;
	Node0xf20170 -> Node0xf20bf0;
	Node0xf206d0 -> Node0xf20c60;
	Node0xf205f0 -> Node0xf20c60;
	Node0xf20c60 -> Node0xf20cd0;
	Node0xf20cd0 -> Node0xf20d40;
	Node0xf1fa80 -> Node0xf20d40;
	Node0xf20d40 -> Node0xf20db0;
	Node0xf20400 -> Node0xf20db0;
	Node0xf20db0 -> Node0xf21030;
	Node0xf204e0 -> Node0xf21030;
	Node0xf21030 -> Node0xf210a0;
	Node0xf20550 -> Node0xf210a0;
	Node0xf210a0 -> Node0xf21110;
	Node0xf207b0 -> Node0xf21110;
	Node0xf21110 -> Node0xf21180;
	Node0xf20a70 -> Node0xf21180;
	Node0xf21180 -> Node0xf211f0;
	Node0xf20850 -> Node0xf211f0;
	Node0xf211f0 -> Node0xf21260;
	Node0xf20b80 -> Node0xf21260;
	Node0xf21260 -> Node0xf212d0;
	Node0xf20bf0 -> Node0xf212d0;
	Node0xf212d0 -> Node0xf21340;
	Node0xf20990 -> Node0xf21340;
	Node0xf20320 -> Node0xf213b0;
	Node0xf21340 -> Node0xf213b0;
	Node0xf213b0 -> Node0xec0268;
	Node0xec0268 -> Node0xf21850;
}
