; ModuleID = '../.././c_source_file/1663_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1663_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %0, -1
  %10 = or i32 %2, %1
  %11 = and i32 %10, %9
  %12 = or i32 %8, %11
  %13 = xor i32 %5, -1
  %14 = and i32 %13, %4
  %15 = or i32 %13, %3
  %16 = xor i32 %14, %15
  %17 = sub i32 %16, %12
  %18 = and i32 %4, %3
  %19 = xor i32 %15, -1
  %20 = or i32 %18, %19
  %21 = add i32 %17, %20
  %22 = xor i32 %1, -1
  %23 = and i32 %22, %2
  %24 = and i32 %23, %0
  %25 = or i32 %22, %2
  %26 = xor i32 %25, %9
  %27 = xor i32 %26, %24
  %28 = or i32 %1, %0
  %29 = or i32 %2, %0
  %30 = xor i32 %29, 2147483647
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %30, %32
  %34 = and i32 %7, %9
  %35 = and i32 %10, %0
  %36 = or i32 %34, %35
  %37 = or i32 %22, %0
  %38 = xor i32 %2, %0
  %39 = and i32 %38, %37
  %40 = xor i32 %2, -1
  %41 = and i32 %22, %0
  %42 = or i32 %41, %40
  %43 = xor i32 %41, -1
  %44 = add i32 %41, 1
  %45 = xor i32 %2, %1
  %46 = xor i32 %45, -1
  %47 = and i32 %28, %46
  %48 = and i32 %1, %0
  %49 = or i32 %10, %0
  %50 = and i32 %2, %0
  %51 = and i32 %40, %0
  %52 = or i32 %51, %31
  %53 = xor i32 %38, -1
  %54 = or i32 %53, %32
  %55 = and i32 %37, %46
  %56 = shl i32 %55, 2
  %57 = and i32 %40, %1
  %58 = xor i32 %57, -1
  %59 = xor i32 %50, %58
  %60 = xor i32 %29, %1
  %61 = and i32 %53, %22
  %62 = xor i32 %28, 2147483647
  %63 = or i32 %50, %62
  %64 = or i32 %40, %1
  %65 = and i32 %64, %9
  %66 = xor i32 %48, -1
  %67 = xor i32 %66, %2
  %68 = and i32 %38, %31
  %69 = or i32 %58, %9
  %70 = and i32 %40, %66
  %71 = xor i32 %64, -1
  %72 = or i32 %48, %71
  %73 = xor i32 %7, 1073741823
  %74 = xor i32 %41, %73
  %75 = shl i32 %74, 2
  %76 = xor i32 %64, %0
  %77 = xor i32 %37, -1
  %78 = add i32 %37, 1
  %79 = xor i32 %10, %0
  %80 = or i32 %8, %79
  %81 = or i32 %40, %0
  %82 = xor i32 %81, -1
  %83 = or i32 %48, %82
  %84 = or i32 %45, %77
  %85 = or i32 %71, %9
  %86 = xor i32 %29, %48
  %87 = shl i32 %9, 1
  %88 = or i32 %50, %22
  %89 = and i32 %23, %9
  %90 = and i32 %25, %0
  %91 = or i32 %89, %90
  %92 = and i32 %40, %32
  %93 = add i32 %7, 1
  %94 = add i32 %45, 1
  %95 = or i32 %45, %0
  %96 = xor i32 %24, %95
  %97 = xor i32 %41, %58
  %98 = xor i32 %51, -1
  %99 = and i32 %31, %98
  %100 = xor i32 %50, -1
  %101 = xor i32 %100, %1
  %102 = shl i32 %101, 1
  %103 = and i32 %43, %2
  %104 = or i32 %82, %22
  %105 = xor i32 %11, -1
  %106 = xor i32 %8, %105
  %107 = xor i32 %43, %2
  %108 = xor i32 %98, %1
  %109 = and i32 %28, %40
  %110 = xor i32 %58, %0
  %111 = and i32 %31, %100
  %112 = and i32 %45, %0
  %113 = or i32 %34, %112
  %114 = and i32 %37, %2
  %115 = or i32 %40, %77
  %116 = and i32 %45, %43
  %117 = add i32 %50, 1
  %118 = xor i32 %45, 2147483647
  %119 = and i32 %118, %0
  %120 = or i32 %119, %89
  %121 = shl i32 %120, 1
  %122 = xor i32 %71, %0
  %123 = xor i32 %10, -1
  %124 = and i32 %123, %9
  %125 = and i32 %57, %9
  %126 = and i32 %123, %0
  %127 = and i32 %71, %9
  %128 = shl i32 %34, 3
  %129 = and i32 %71, %0
  %130 = and i32 %5, %3
  %131 = or i32 %14, %130
  %132 = or i32 %5, %3
  %133 = xor i32 %132, %18
  %134 = and i32 %13, %3
  %135 = xor i32 %134, -1
  %136 = xor i32 %135, %4
  %137 = xor i32 %3, -1
  %138 = or i32 %5, %4
  %139 = and i32 %138, %137
  %140 = shl i32 %3, 1
  %141 = xor i32 %14, %3
  %142 = and i32 %137, %4
  %143 = xor i32 %5, %3
  %144 = or i32 %143, %142
  %145 = and i32 %5, %4
  %146 = xor i32 %145, -1
  %147 = or i32 %19, %4
  %148 = xor i32 %130, -1
  %149 = xor i32 %142, %148
  %150 = xor i32 %138, -1
  %151 = or i32 %18, %150
  %152 = xor i32 %143, -1
  %153 = xor i32 %152, %4
  %154 = xor i32 %4, %3
  %155 = xor i32 %154, -1
  %156 = xor i32 %5, %4
  %157 = and i32 %156, %155
  %158 = or i32 %137, %4
  %159 = xor i32 %158, -1
  %160 = xor i32 %156, -1
  %161 = or i32 %160, %159
  %162 = or i32 %150, %155
  %163 = or i32 %4, %3
  %164 = and i32 %143, %163
  %165 = shl i32 %164, 1
  %166 = or i32 %145, %137
  %167 = add i32 %134, 1
  %168 = and i32 %158, %160
  %169 = or i32 %150, %3
  %170 = or i32 %156, %155
  %171 = and i32 %142, %5
  %172 = or i32 %137, %5
  %173 = xor i32 %172, %4
  %174 = or i32 %171, %173
  %175 = xor i32 %4, -1
  %176 = and i32 %130, %175
  %177 = and i32 %132, %4
  %178 = xor i32 %177, 2147483647
  %179 = xor i32 %178, %176
  %180 = shl i32 %179, 1
  %181 = xor i32 %145, %132
  %182 = or i32 %14, %137
  %183 = and i32 %138, %155
  %184 = and i32 %172, %175
  %185 = or i32 %171, %184
  %186 = xor i32 %142, -1
  %187 = and i32 %186, %5
  %188 = and i32 %13, %186
  %189 = shl i32 %188, 1
  %190 = or i32 %14, %3
  %191 = or i32 %143, %4
  %192 = xor i32 %171, %191
  %193 = and i32 %152, %175
  %194 = and i32 %156, %163
  %195 = or i32 %14, %155
  %196 = xor i32 %145, %135
  %197 = and i32 %156, %158
  %198 = xor i32 %132, -1
  %199 = or i32 %198, %175
  %200 = xor i32 %145, %163
  %201 = or i32 %160, %155
  %202 = xor i32 %134, %4
  %203 = and i32 %135, %175
  %204 = or i32 %143, %18
  %205 = and i32 %146, %3
  %206 = and i32 %130, %4
  %207 = xor i32 %132, %175
  %208 = xor i32 %207, %206
  %209 = or i32 %145, %198
  %210 = xor i32 %18, -1
  %211 = and i32 %143, %210
  %212 = or i32 %15, %4
  %213 = and i32 %13, %155
  %214 = xor i32 %138, %3
  %215 = xor i32 %186, %5
  %216 = or i32 %13, %4
  %217 = xor i32 %216, %18
  %218 = xor i32 %159, %5
  %219 = and i32 %148, %4
  %220 = and i32 %216, %3
  %221 = and i32 %216, %137
  %222 = or i32 %160, %3
  %223 = or i32 %145, %155
  %224 = add i32 %154, 1
  %225 = xor i32 %163, -1
  %226 = or i32 %143, %225
  %227 = and i32 %210, %5
  %228 = or i32 %19, %175
  %229 = or i32 %142, %160
  %230 = and i32 %146, %155
  %231 = and i32 %154, %13
  %232 = and i32 %143, %4
  %233 = or i32 %176, %232
  %234 = or i32 %18, %152
  %235 = or i32 %134, %4
  %236 = or i32 %148, %175
  %237 = shl i32 %236, 1
  %238 = and i32 %160, %155
  %239 = or i32 %156, %18
  %240 = and i32 %154, %146
  %241 = or i32 %13, %155
  %242 = and i32 %143, %175
  %243 = or i32 %142, %13
  %244 = shl i32 %243, 1
  %245 = or i32 %156, %3
  %246 = xor i32 %206, -1
  %247 = xor i32 %242, %246
  %248 = shl i32 %159, 1
  %249 = shl i32 %152, 1
  %250 = xor i32 %14, %137
  %251 = and i32 %146, %137
  %252 = or i32 %206, %242
  %253 = xor i32 %18, %5
  %254 = or i32 %13, %159
  %255 = xor i32 %150, %3
  %256 = or i32 %130, %175
  %257 = or i32 %18, %160
  %258 = xor i32 %216, -1
  %259 = or i32 %18, %258
  %260 = and i32 %156, %210
  %261 = or i32 %160, %225
  %262 = and i32 %163, %5
  %263 = xor i32 %143, %175
  %264 = xor i32 %171, %263
  %265 = or i32 %142, %5
  %266 = or i32 %148, %4
  %267 = and i32 %160, %210
  %268 = or i32 %154, %5
  %269 = or i32 %206, %263
  %270 = or i32 %225, %5
  %271 = or i32 %18, %5
  %272 = shl i32 %271, 1
  %273 = or i32 %154, %160
  %274 = shl i32 %273, 1
  %275 = or i32 %258, %3
  %276 = and i32 %198, %175
  %277 = mul i32 %276, -9
  %278 = and i32 %134, %175
  %279 = and i32 %198, %4
  %280 = mul i32 %279, -15
  %281 = and i32 %134, %4
  %282 = mul i32 %281, -18
  %283 = and i32 %19, %175
  %284 = mul i32 %176, 7
  %285 = and i32 %19, %4
  %286 = add i32 %109, %2
  %287 = add i32 %286, %71
  %288 = add i32 %287, %126
  %289 = add i32 %288, %122
  %290 = add i32 %289, %111
  %291 = add i32 %290, %97
  %292 = add i32 %291, %63
  %293 = add i32 %292, %36
  %294 = add i32 %293, %33
  %295 = add i32 %294, %270
  %296 = add i32 %295, %198
  %297 = add i32 %296, %241
  %298 = add i32 %297, %251
  %299 = add i32 %298, %255
  %300 = add i32 %299, %239
  %301 = add i32 %300, %220
  %302 = add i32 %301, %209
  %303 = add i32 %302, %170
  %304 = add i32 %303, %139
  %305 = shl i32 %304, 1
  %306 = sub i32 %124, %8
  %307 = add i32 %306, %285
  %308 = sub i32 %307, %206
  %309 = sub i32 %308, %283
  %310 = mul i32 %309, 6
  %311 = add i32 %125, %67
  %312 = sub i32 %311, %116
  %313 = add i32 %312, %202
  %314 = sub i32 %313, %275
  %315 = mul i32 %314, 3
  %316 = add i32 %161, %129
  %317 = sub i32 %278, %316
  %318 = add i32 %317, %151
  %319 = mul i32 %318, 5
  %320 = sub i32 1, %87
  %321 = add i32 %320, %28
  %322 = add i32 %321, %44
  %323 = sub i32 %322, %48
  %324 = add i32 %323, %78
  %325 = add i32 %324, %42
  %326 = add i32 %325, %50
  %327 = sub i32 %326, %70
  %328 = add i32 %327, %92
  %329 = add i32 %328, %93
  %330 = add i32 %329, %94
  %331 = add i32 %330, %64
  %332 = sub i32 %331, %81
  %333 = add i32 %332, %103
  %334 = add i32 %333, %107
  %335 = sub i32 %334, %114
  %336 = add i32 %335, %115
  %337 = add i32 %336, %117
  %338 = sub i32 %337, %39
  %339 = sub i32 %338, %47
  %340 = add i32 %339, %49
  %341 = sub i32 %340, %52
  %342 = add i32 %341, %54
  %343 = add i32 %342, %59
  %344 = add i32 %343, %60
  %345 = sub i32 %344, %61
  %346 = sub i32 %345, %65
  %347 = add i32 %346, %68
  %348 = sub i32 %347, %69
  %349 = sub i32 %348, %72
  %350 = sub i32 %349, %76
  %351 = add i32 %350, %83
  %352 = sub i32 %351, %84
  %353 = add i32 %352, %85
  %354 = add i32 %353, %86
  %355 = add i32 %354, %88
  %356 = sub i32 %355, %99
  %357 = sub i32 %356, %104
  %358 = sub i32 %357, %108
  %359 = add i32 %358, %110
  %360 = add i32 %359, %127
  %361 = sub i32 %360, %140
  %362 = sub i32 %361, %27
  %363 = sub i32 %362, %56
  %364 = sub i32 %363, %75
  %365 = add i32 %364, %80
  %366 = sub i32 %365, %91
  %367 = sub i32 %366, %96
  %368 = sub i32 %367, %102
  %369 = sub i32 %368, %106
  %370 = add i32 %369, %113
  %371 = sub i32 %370, %128
  %372 = add i32 %371, %158
  %373 = add i32 %372, %224
  %374 = add i32 %373, %163
  %375 = sub i32 %374, %142
  %376 = add i32 %375, %146
  %377 = add i32 %376, %167
  %378 = sub i32 %377, %187
  %379 = add i32 %378, %213
  %380 = add i32 %379, %215
  %381 = sub i32 %380, %218
  %382 = add i32 %381, %148
  %383 = add i32 %382, %227
  %384 = add i32 %383, %231
  %385 = sub i32 %384, %248
  %386 = sub i32 %385, %253
  %387 = add i32 %386, %254
  %388 = sub i32 %387, %262
  %389 = sub i32 %388, %265
  %390 = add i32 %389, %156
  %391 = sub i32 %390, %268
  %392 = sub i32 %391, %121
  %393 = sub i32 %392, %131
  %394 = add i32 %393, %133
  %395 = add i32 %394, %136
  %396 = add i32 %395, %141
  %397 = add i32 %396, %144
  %398 = add i32 %397, %147
  %399 = sub i32 %398, %149
  %400 = add i32 %399, %153
  %401 = add i32 %400, %157
  %402 = add i32 %401, %162
  %403 = add i32 %402, %166
  %404 = sub i32 %403, %168
  %405 = sub i32 %404, %169
  %406 = add i32 %405, %181
  %407 = add i32 %406, %182
  %408 = add i32 %407, %183
  %409 = sub i32 %408, %189
  %410 = add i32 %409, %190
  %411 = add i32 %410, %193
  %412 = add i32 %411, %194
  %413 = sub i32 %412, %195
  %414 = add i32 %413, %196
  %415 = add i32 %414, %197
  %416 = sub i32 %415, %199
  %417 = sub i32 %416, %200
  %418 = add i32 %417, %201
  %419 = sub i32 %418, %203
  %420 = sub i32 %419, %204
  %421 = add i32 %420, %205
  %422 = sub i32 %421, %211
  %423 = add i32 %422, %212
  %424 = add i32 %423, %214
  %425 = add i32 %424, %217
  %426 = sub i32 %425, %219
  %427 = sub i32 %426, %221
  %428 = add i32 %427, %222
  %429 = add i32 %428, %223
  %430 = add i32 %429, %226
  %431 = sub i32 %430, %228
  %432 = add i32 %431, %229
  %433 = sub i32 %432, %230
  %434 = add i32 %433, %234
  %435 = sub i32 %434, %235
  %436 = sub i32 %435, %238
  %437 = sub i32 %436, %240
  %438 = sub i32 %437, %242
  %439 = sub i32 %438, %244
  %440 = add i32 %439, %245
  %441 = sub i32 %440, %249
  %442 = add i32 %441, %250
  %443 = add i32 %442, %256
  %444 = add i32 %443, %257
  %445 = add i32 %444, %259
  %446 = sub i32 %445, %260
  %447 = sub i32 %446, %261
  %448 = add i32 %447, %266
  %449 = sub i32 %448, %191
  %450 = sub i32 %449, %267
  %451 = sub i32 %450, %272
  %452 = sub i32 %451, %177
  %453 = sub i32 %452, %165
  %454 = sub i32 %453, %174
  %455 = sub i32 %454, %185
  %456 = add i32 %455, %192
  %457 = sub i32 %456, %208
  %458 = add i32 %457, %233
  %459 = sub i32 %458, %237
  %460 = sub i32 %459, %247
  %461 = sub i32 %460, %252
  %462 = add i32 %461, %264
  %463 = add i32 %462, %269
  %464 = sub i32 %463, %274
  %465 = add i32 %464, %277
  %466 = add i32 %465, %280
  %467 = add i32 %466, %282
  %468 = add i32 %467, %284
  %469 = sub i32 %468, %180
  %470 = add i32 %469, %319
  %471 = add i32 %470, %310
  %472 = add i32 %471, %315
  %473 = add i32 %472, %305
  %474 = icmp eq i32 %21, %473
  %475 = select i1 %474, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %476 = tail call i32 @puts(i8* nonnull dereferenceable(1) %475)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
