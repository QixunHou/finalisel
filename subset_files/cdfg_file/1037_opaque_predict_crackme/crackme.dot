digraph "DFG for'crackme' function" {
	Node0x21055d0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x2105c80[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x2105d40[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2105de0[shape=record, label="  %6 = add i32 %1, 1"];
	Node0x2105e50[shape=record, label="  %7 = and i32 %5, %0"];
	Node0x2105ef0[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0x2105f90[shape=record, label="  %9 = xor i32 %8, -4"];
	Node0x2106000[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x2106070[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x21060e0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x2106180[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x21061f0[shape=record, label="  %14 = xor i32 %3, -1"];
	Node0x2106290[shape=record, label="  %15 = mul i32 %14, 12"];
	Node0x2106300[shape=record, label="  %16 = xor i32 %0, -1"];
	Node0x2106370[shape=record, label="  %17 = and i32 %16, %1"];
	Node0x2106410[shape=record, label="  %18 = mul i32 %7, 6"];
	Node0x2106480[shape=record, label="  %19 = shl i32 %11, 2"];
	Node0x21064f0[shape=record, label="  %20 = add i32 %17, %6"];
	Node0x2106590[shape=record, label="  %21 = mul i32 %20, 5"];
	Node0x2106600[shape=record, label="  %22 = add i32 %10, 1"];
	Node0x2106670[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x21066e0[shape=record, label="  %24 = add i32 %23, %18"];
	Node0x2106750[shape=record, label="  %25 = add i32 %24, %19"];
	Node0x21067c0[shape=record, label="  %26 = sub i32 %25, %9"];
	Node0x2106830[shape=record, label="  %27 = sub i32 %26, %13"];
	Node0x21068a0[shape=record, label="  %28 = add i32 %27, %21"];
	Node0x2106910[shape=record, label="  %29 = icmp eq i32 %28, %4"];
	Node0x20a6268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2106db0[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0x2106e00[shape=record, label="  ret void"];
	Node0x21055d0 -> Node0x2105c80;
	Node0x2105c80 -> Node0x2105d40;
	Node0x2105d40 -> Node0x2105de0;
	Node0x2105de0 -> Node0x2105e50;
	Node0x2105e50 -> Node0x2105ef0;
	Node0x2105ef0 -> Node0x2105f90;
	Node0x2105f90 -> Node0x2106000;
	Node0x2106000 -> Node0x2106070;
	Node0x2106070 -> Node0x21060e0;
	Node0x21060e0 -> Node0x2106180;
	Node0x2106180 -> Node0x21061f0;
	Node0x21061f0 -> Node0x2106290;
	Node0x2106290 -> Node0x2106300;
	Node0x2106300 -> Node0x2106370;
	Node0x2106370 -> Node0x2106410;
	Node0x2106410 -> Node0x2106480;
	Node0x2106480 -> Node0x21064f0;
	Node0x21064f0 -> Node0x2106590;
	Node0x2106590 -> Node0x2106600;
	Node0x2106600 -> Node0x2106670;
	Node0x2106670 -> Node0x21066e0;
	Node0x21066e0 -> Node0x2106750;
	Node0x2106750 -> Node0x21067c0;
	Node0x21067c0 -> Node0x2106830;
	Node0x2106830 -> Node0x21068a0;
	Node0x21068a0 -> Node0x2106910;
	Node0x2106910 -> Node0x20a6268;
	Node0x20a6268 -> Node0x2106db0;
	Node0x2106db0 -> Node0x2106e00;
edge [color=red]
	Node0x21055d0 -> Node0x2105c80;
	Node0x2105d40 -> Node0x2105e50;
	Node0x2105e50 -> Node0x2105ef0;
	Node0x2105ef0 -> Node0x2105f90;
	Node0x2106070 -> Node0x21060e0;
	Node0x21060e0 -> Node0x2106180;
	Node0x21055d0 -> Node0x21061f0;
	Node0x21061f0 -> Node0x2106290;
	Node0x2106300 -> Node0x2106370;
	Node0x2105e50 -> Node0x2106410;
	Node0x2106070 -> Node0x2106480;
	Node0x2106370 -> Node0x21064f0;
	Node0x2105de0 -> Node0x21064f0;
	Node0x21064f0 -> Node0x2106590;
	Node0x2106000 -> Node0x2106600;
	Node0x2106600 -> Node0x2106670;
	Node0x2106290 -> Node0x2106670;
	Node0x2106670 -> Node0x21066e0;
	Node0x2106410 -> Node0x21066e0;
	Node0x21066e0 -> Node0x2106750;
	Node0x2106480 -> Node0x2106750;
	Node0x2106750 -> Node0x21067c0;
	Node0x2105f90 -> Node0x21067c0;
	Node0x21067c0 -> Node0x2106830;
	Node0x2106180 -> Node0x2106830;
	Node0x2106830 -> Node0x21068a0;
	Node0x2106590 -> Node0x21068a0;
	Node0x21068a0 -> Node0x2106910;
	Node0x2105c80 -> Node0x2106910;
	Node0x2106910 -> Node0x20a6268;
	Node0x20a6268 -> Node0x2106db0;
}
