digraph "DFG for'crackme' function" {
	Node0xf74bf0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xf74c60[shape=record, label="  %4 = and i32 %3, %0"];
	Node0xf74d20[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0xf74d90[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0xf74e00[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0xf74e70[shape=record, label="  %8 = add i32 %7, %5"];
	Node0xf74ee0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0xf74f50[shape=record, label="  %10 = add i32 %1, 1"];
	Node0xf74fc0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0xf75030[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0xf750a0[shape=record, label="  %13 = or i32 %1, %0"];
	Node0xf75140[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0xf751e0[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0xf75280[shape=record, label="  %16 = xor i32 %0, 1073741823"];
	Node0xf752f0[shape=record, label="  %17 = and i32 %16, %1"];
	Node0xf75360[shape=record, label="  %18 = add i32 %4, %9"];
	Node0xf753d0[shape=record, label="  %19 = add i32 %18, %11"];
	Node0xf75470[shape=record, label="  %20 = mul i32 %19, -3"];
	Node0xf754e0[shape=record, label="  %21 = add i32 %17, %0"];
	Node0xf75550[shape=record, label="  %22 = shl i32 %21, 2"];
	Node0xf755c0[shape=record, label="  %23 = add i32 %6, %10"];
	Node0xf75630[shape=record, label="  %24 = add i32 %23, %12"];
	Node0xf756a0[shape=record, label="  %25 = add i32 %24, %15"];
	Node0xf75710[shape=record, label="  %26 = add i32 %25, %22"];
	Node0xf75780[shape=record, label="  %27 = add i32 %26, %20"];
	Node0xf757f0[shape=record, label="  %28 = icmp eq i32 %8, %27"];
	Node0xf15268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xf75c90[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xf75ce0[shape=record, label="  ret void"];
	Node0xf74bf0 -> Node0xf74c60;
	Node0xf74c60 -> Node0xf74d20;
	Node0xf74d20 -> Node0xf74d90;
	Node0xf74d90 -> Node0xf74e00;
	Node0xf74e00 -> Node0xf74e70;
	Node0xf74e70 -> Node0xf74ee0;
	Node0xf74ee0 -> Node0xf74f50;
	Node0xf74f50 -> Node0xf74fc0;
	Node0xf74fc0 -> Node0xf75030;
	Node0xf75030 -> Node0xf750a0;
	Node0xf750a0 -> Node0xf75140;
	Node0xf75140 -> Node0xf751e0;
	Node0xf751e0 -> Node0xf75280;
	Node0xf75280 -> Node0xf752f0;
	Node0xf752f0 -> Node0xf75360;
	Node0xf75360 -> Node0xf753d0;
	Node0xf753d0 -> Node0xf75470;
	Node0xf75470 -> Node0xf754e0;
	Node0xf754e0 -> Node0xf75550;
	Node0xf75550 -> Node0xf755c0;
	Node0xf755c0 -> Node0xf75630;
	Node0xf75630 -> Node0xf756a0;
	Node0xf756a0 -> Node0xf75710;
	Node0xf75710 -> Node0xf75780;
	Node0xf75780 -> Node0xf757f0;
	Node0xf757f0 -> Node0xf15268;
	Node0xf15268 -> Node0xf75c90;
	Node0xf75c90 -> Node0xf75ce0;
edge [color=red]
	Node0xf74bf0 -> Node0xf74c60;
	Node0xf74c60 -> Node0xf74d20;
	Node0xf74d90 -> Node0xf74e00;
	Node0xf74e00 -> Node0xf74e70;
	Node0xf74d20 -> Node0xf74e70;
	Node0xf74fc0 -> Node0xf75030;
	Node0xf750a0 -> Node0xf75140;
	Node0xf75140 -> Node0xf751e0;
	Node0xf75280 -> Node0xf752f0;
	Node0xf74c60 -> Node0xf75360;
	Node0xf74ee0 -> Node0xf75360;
	Node0xf75360 -> Node0xf753d0;
	Node0xf74fc0 -> Node0xf753d0;
	Node0xf753d0 -> Node0xf75470;
	Node0xf752f0 -> Node0xf754e0;
	Node0xf754e0 -> Node0xf75550;
	Node0xf74d90 -> Node0xf755c0;
	Node0xf74f50 -> Node0xf755c0;
	Node0xf755c0 -> Node0xf75630;
	Node0xf75030 -> Node0xf75630;
	Node0xf75630 -> Node0xf756a0;
	Node0xf751e0 -> Node0xf756a0;
	Node0xf756a0 -> Node0xf75710;
	Node0xf75550 -> Node0xf75710;
	Node0xf75710 -> Node0xf75780;
	Node0xf75470 -> Node0xf75780;
	Node0xf74e70 -> Node0xf757f0;
	Node0xf75780 -> Node0xf757f0;
	Node0xf757f0 -> Node0xf15268;
	Node0xf15268 -> Node0xf75c90;
}
