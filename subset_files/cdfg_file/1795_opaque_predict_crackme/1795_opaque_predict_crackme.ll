; ModuleID = '../.././c_source_file/1795_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1795_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = or i32 %2, %1
  %6 = or i32 %5, %4
  %7 = and i32 %2, %0
  %8 = or i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = and i32 %2, %1
  %12 = and i32 %11, %0
  %13 = and i32 %5, %4
  %14 = xor i32 %12, -1
  %15 = xor i32 %13, %14
  %16 = xor i32 %2, -1
  %17 = or i32 %16, %0
  %18 = xor i32 %17, -1
  %19 = xor i32 %1, %0
  %20 = xor i32 %19, -1
  %21 = or i32 %18, %20
  %22 = xor i32 %17, %1
  %23 = xor i32 %1, -1
  %24 = and i32 %23, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %5, %0
  %27 = xor i32 %26, %14
  %28 = and i32 %1, %0
  %29 = xor i32 %5, %28
  %30 = xor i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = xor i32 %28, %2
  %33 = xor i32 %2, %0
  %34 = and i32 %33, %23
  %35 = and i32 %33, %20
  %36 = and i32 %11, %4
  %37 = and i32 %5, %0
  %38 = xor i32 %36, -1
  %39 = xor i32 %37, %38
  %40 = or i32 %5, %0
  %41 = xor i32 %33, -1
  %42 = or i32 %12, %13
  %43 = and i32 %41, %23
  %44 = shl i32 %43, 1
  %45 = xor i32 %7, -1
  %46 = and i32 %19, %45
  %47 = or i32 %19, %16
  %48 = and i32 %16, %20
  %49 = xor i32 %9, %2
  %50 = or i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = add i32 %50, 1
  %53 = or i32 %33, %9
  %54 = or i32 %23, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %28, %18
  %57 = and i32 %33, %1
  %58 = shl i32 %57, 1
  %59 = or i32 %7, %23
  %60 = or i32 %16, %1
  %61 = or i32 %60, %4
  %62 = or i32 %18, %1
  %63 = and i32 %16, %1
  %64 = xor i32 %63, -1
  %65 = and i32 %64, %4
  %66 = and i32 %16, %0
  %67 = or i32 %66, %23
  %68 = shl i32 %67, 1
  %69 = and i32 %8, %16
  %70 = or i32 %30, %55
  %71 = shl i32 %70, 1
  %72 = xor i32 %5, -1
  %73 = or i32 %28, %72
  %74 = and i32 %54, %41
  %75 = or i32 %41, %55
  %76 = xor i32 %63, %0
  %77 = or i32 %16, %20
  %78 = and i32 %50, %1
  %79 = and i32 %54, %2
  %80 = or i32 %64, %0
  %81 = shl i32 %80, 1
  %82 = and i32 %23, %2
  %83 = and i32 %82, %0
  %84 = or i32 %30, %0
  %85 = xor i32 %84, -1
  %86 = or i32 %83, %85
  %87 = and i32 %19, %2
  %88 = or i32 %20, %2
  %89 = xor i32 %60, %0
  %90 = or i32 %41, %1
  %91 = xor i32 %30, %0
  %92 = xor i32 %12, %91
  %93 = xor i32 %66, -1
  %94 = and i32 %93, %23
  %95 = and i32 %17, %23
  %96 = or i32 %30, %4
  %97 = and i32 %30, %0
  %98 = or i32 %36, %97
  %99 = or i32 %41, %9
  %100 = and i32 %41, %25
  %101 = or i32 %19, %51
  %102 = xor i32 %11, -1
  %103 = and i32 %102, %0
  %104 = and i32 %41, %20
  %105 = xor i32 %93, %1
  %106 = shl i32 %105, 1
  %107 = or i32 %51, %1
  %108 = or i32 %16, %9
  %109 = and i32 %30, %4
  %110 = xor i32 %109, %14
  %111 = or i32 %102, %4
  %112 = add i32 %66, 1
  %113 = or i32 %41, %23
  %114 = or i32 %66, %1
  %115 = or i32 %63, %4
  %116 = xor i32 %7, %1
  %117 = and i32 %60, %4
  %118 = shl i32 %117, 1
  %119 = xor i32 %54, %2
  %120 = xor i32 %17, %28
  %121 = or i32 %24, %2
  %122 = shl i32 %121, 1
  %123 = and i32 %30, %8
  %124 = xor i32 %51, %1
  %125 = or i32 %11, %24
  %126 = or i32 %23, %2
  %127 = and i32 %126, %4
  %128 = or i32 %83, %127
  %129 = or i32 %7, %1
  %130 = xor i32 %28, -1
  %131 = and i32 %130, %2
  %132 = xor i32 %97, %38
  %133 = or i32 %41, %20
  %134 = or i32 %11, %0
  %135 = shl i32 %134, 1
  %136 = xor i32 %72, %0
  %137 = and i32 %50, %23
  %138 = and i32 %30, %130
  %139 = and i32 %33, %19
  %140 = or i32 %102, %0
  %141 = or i32 %33, %1
  %142 = or i32 %28, %31
  %143 = or i32 %64, %4
  %144 = and i32 %33, %54
  %145 = xor i32 %7, %8
  %146 = or i32 %19, %41
  %147 = and i32 %50, %19
  %148 = or i32 %31, %4
  %149 = or i32 %31, %0
  %150 = or i32 %83, %91
  %151 = and i32 %82, %4
  %152 = and i32 %126, %0
  %153 = or i32 %151, %152
  %154 = shl i32 %153, 1
  %155 = xor i32 %11, %0
  %156 = and i32 %8, %2
  %157 = or i32 %72, %4
  %158 = add i32 %8, 1
  %159 = and i32 %54, %31
  %160 = and i32 %45, %1
  %161 = and i32 %41, %130
  %162 = and i32 %8, %41
  %163 = and i32 %31, %4
  %164 = or i32 %18, %23
  %165 = shl i32 %164, 2
  %166 = and i32 %19, %41
  %167 = and i32 %31, %130
  %168 = or i32 %51, %20
  %169 = or i32 %7, %72
  %170 = and i32 %50, %20
  %171 = or i32 %72, %0
  %172 = xor i32 %60, -1
  %173 = or i32 %28, %172
  %174 = or i32 %33, %19
  %175 = and i32 %17, %19
  %176 = or i32 %66, %11
  %177 = shl i32 %176, 1
  %178 = xor i32 %151, %96
  %179 = xor i32 %152, -1
  %180 = xor i32 %151, %179
  %181 = xor i32 %83, %84
  %182 = and i32 %20, %2
  %183 = or i32 %63, %0
  %184 = and i32 %30, %54
  %185 = xor i32 %102, %0
  %186 = or i32 %172, %0
  %187 = or i32 %33, %55
  %188 = or i32 %12, %109
  %189 = xor i32 %24, %64
  %190 = and i32 %8, %31
  %191 = xor i32 %31, %0
  %192 = and i32 %45, %20
  %193 = or i32 %60, %0
  %194 = shl i32 %193, 1
  %195 = xor i32 %24, %102
  %196 = or i32 %36, %37
  %197 = and i32 %33, %25
  %198 = or i32 %55, %2
  %199 = xor i32 %91, -1
  %200 = xor i32 %83, %199
  %201 = xor i32 %172, %0
  %202 = shl i32 %201, 2
  %203 = or i32 %7, %63
  %204 = xor i32 %126, %0
  %205 = or i32 %83, %204
  %206 = shl i32 %97, 1
  %207 = or i32 %28, %16
  %208 = shl i32 %207, 1
  %209 = or i32 %19, %18
  %210 = add i32 %5, 1
  %211 = or i32 %28, %41
  %212 = and i32 %31, %25
  %213 = xor i32 %60, %28
  %214 = and i32 %17, %1
  %215 = add i32 %63, 1
  %216 = and i32 %64, %0
  %217 = or i32 %19, %2
  %218 = or i32 %172, %4
  %219 = or i32 %66, %172
  %220 = and i32 %93, %1
  %221 = or i32 %31, %9
  %222 = xor i32 %7, %64
  %223 = xor i32 %50, %28
  %224 = or i32 %30, %9
  %225 = and i32 %17, %20
  %226 = xor i32 %66, %1
  %227 = or i32 %66, %19
  %228 = or i32 %7, %55
  %229 = and i32 %45, %23
  %230 = or i32 %16, %55
  %231 = add i32 %17, 1
  %232 = and i32 %19, %93
  %233 = and i32 %60, %0
  %234 = or i32 %12, %199
  %235 = and i32 %102, %4
  %236 = or i32 %66, %20
  %237 = and i32 %41, %1
  %238 = and i32 %25, %2
  %239 = or i32 %33, %24
  %240 = and i32 %33, %8
  %241 = and i32 %31, %0
  %242 = or i32 %51, %23
  %243 = shl i32 %242, 1
  %244 = xor i32 %64, %0
  %245 = xor i32 %7, %54
  %246 = or i32 %31, %55
  %247 = xor i32 %130, %2
  %248 = or i32 %24, %16
  %249 = or i32 %33, %20
  %250 = or i32 %7, %19
  %251 = and i32 %16, %130
  %252 = xor i32 %127, -1
  %253 = xor i32 %83, %252
  %254 = shl i32 %28, 1
  %255 = or i32 %24, %41
  %256 = or i32 %30, %24
  %257 = or i32 %63, %24
  %258 = or i32 %33, %28
  %259 = and i32 %16, %25
  %260 = and i32 %72, %4
  %261 = mul i32 %260, 19
  %262 = and i32 %63, %4
  %263 = mul i32 %262, -9
  %264 = and i32 %72, %0
  %265 = mul i32 %264, 6
  %266 = and i32 %63, %0
  %267 = mul i32 %266, -13
  %268 = and i32 %172, %4
  %269 = mul i32 %268, 20
  %270 = and i32 %172, %0
  %271 = mul i32 %12, 18
  %272 = add i32 %238, %55
  %273 = add i32 %272, %102
  %274 = add i32 %273, %63
  %275 = add i32 %274, %47
  %276 = sub i32 %256, %77
  %277 = sub i32 %276, %157
  %278 = sub i32 %277, %59
  %279 = sub i32 %278, %42
  %280 = mul i32 %279, 5
  %281 = add i32 %166, %198
  %282 = shl i32 %281, 2
  %283 = add i32 %275, %33
  %284 = add i32 %283, %258
  %285 = add i32 %284, %37
  %286 = add i32 %285, %227
  %287 = add i32 %286, %224
  %288 = add i32 %287, %161
  %289 = add i32 %288, %160
  %290 = add i32 %289, %139
  %291 = add i32 %290, %124
  %292 = add i32 %291, %99
  %293 = add i32 %292, %74
  %294 = add i32 %293, %34
  %295 = add i32 %294, %22
  %296 = add i32 %295, %21
  %297 = add i32 %296, %196
  %298 = shl i32 %297, 1
  %299 = add i32 %48, %199
  %300 = sub i32 %299, %270
  %301 = mul i32 %300, 3
  %302 = shl i32 %19, 1
  %303 = add i32 %302, 2
  %304 = add i32 %303, %2
  %305 = add i32 %304, %158
  %306 = add i32 %305, %130
  %307 = sub i32 %306, %8
  %308 = sub i32 %307, %32
  %309 = sub i32 %308, %49
  %310 = add i32 %309, %52
  %311 = add i32 %310, %69
  %312 = sub i32 %311, %79
  %313 = sub i32 %312, %87
  %314 = add i32 %313, %88
  %315 = add i32 %314, %108
  %316 = add i32 %315, %112
  %317 = sub i32 %316, %119
  %318 = sub i32 %317, %131
  %319 = add i32 %318, %156
  %320 = sub i32 %319, %182
  %321 = add i32 %320, %60
  %322 = add i32 %321, %210
  %323 = add i32 %322, %215
  %324 = add i32 %323, %217
  %325 = sub i32 %324, %66
  %326 = add i32 %325, %230
  %327 = add i32 %326, %231
  %328 = add i32 %327, %50
  %329 = add i32 %328, %11
  %330 = add i32 %329, %247
  %331 = add i32 %330, %248
  %332 = sub i32 %331, %251
  %333 = sub i32 %332, %254
  %334 = sub i32 %333, %259
  %335 = add i32 %334, %10
  %336 = add i32 %335, %29
  %337 = add i32 %336, %35
  %338 = add i32 %337, %40
  %339 = add i32 %338, %46
  %340 = sub i32 %339, %53
  %341 = add i32 %340, %56
  %342 = add i32 %341, %61
  %343 = sub i32 %342, %62
  %344 = sub i32 %343, %65
  %345 = add i32 %344, %73
  %346 = sub i32 %345, %75
  %347 = sub i32 %346, %76
  %348 = sub i32 %347, %26
  %349 = sub i32 %348, %78
  %350 = sub i32 %349, %89
  %351 = sub i32 %350, %90
  %352 = add i32 %351, %94
  %353 = sub i32 %352, %95
  %354 = sub i32 %353, %96
  %355 = add i32 %354, %100
  %356 = add i32 %355, %101
  %357 = add i32 %356, %103
  %358 = add i32 %357, %104
  %359 = sub i32 %358, %107
  %360 = add i32 %359, %111
  %361 = sub i32 %360, %113
  %362 = sub i32 %361, %114
  %363 = sub i32 %362, %115
  %364 = add i32 %363, %116
  %365 = add i32 %364, %13
  %366 = add i32 %365, %120
  %367 = sub i32 %366, %122
  %368 = add i32 %367, %123
  %369 = sub i32 %368, %125
  %370 = add i32 %369, %129
  %371 = add i32 %370, %133
  %372 = sub i32 %371, %136
  %373 = add i32 %372, %137
  %374 = sub i32 %373, %138
  %375 = sub i32 %374, %140
  %376 = sub i32 %375, %141
  %377 = sub i32 %376, %142
  %378 = sub i32 %377, %143
  %379 = sub i32 %378, %144
  %380 = add i32 %379, %145
  %381 = sub i32 %380, %146
  %382 = sub i32 %381, %147
  %383 = sub i32 %382, %148
  %384 = add i32 %383, %149
  %385 = add i32 %384, %155
  %386 = add i32 %385, %159
  %387 = add i32 %386, %109
  %388 = add i32 %387, %162
  %389 = sub i32 %388, %163
  %390 = add i32 %389, %167
  %391 = add i32 %390, %168
  %392 = add i32 %391, %169
  %393 = sub i32 %392, %170
  %394 = add i32 %393, %171
  %395 = sub i32 %394, %173
  %396 = add i32 %395, %174
  %397 = sub i32 %396, %175
  %398 = add i32 %397, %183
  %399 = add i32 %398, %184
  %400 = sub i32 %399, %185
  %401 = add i32 %400, %186
  %402 = add i32 %401, %187
  %403 = add i32 %402, %189
  %404 = add i32 %403, %190
  %405 = sub i32 %404, %191
  %406 = add i32 %405, %192
  %407 = add i32 %406, %195
  %408 = add i32 %407, %197
  %409 = add i32 %408, %203
  %410 = sub i32 %409, %208
  %411 = add i32 %410, %209
  %412 = sub i32 %411, %211
  %413 = add i32 %412, %212
  %414 = add i32 %413, %213
  %415 = sub i32 %414, %214
  %416 = sub i32 %415, %216
  %417 = add i32 %416, %218
  %418 = sub i32 %417, %219
  %419 = add i32 %418, %220
  %420 = sub i32 %419, %221
  %421 = add i32 %420, %222
  %422 = sub i32 %421, %223
  %423 = sub i32 %422, %225
  %424 = add i32 %423, %226
  %425 = sub i32 %424, %228
  %426 = add i32 %425, %229
  %427 = sub i32 %426, %232
  %428 = add i32 %427, %233
  %429 = sub i32 %428, %235
  %430 = add i32 %429, %236
  %431 = sub i32 %430, %237
  %432 = add i32 %431, %239
  %433 = add i32 %432, %240
  %434 = add i32 %433, %241
  %435 = sub i32 %434, %244
  %436 = sub i32 %435, %245
  %437 = add i32 %436, %246
  %438 = add i32 %437, %249
  %439 = sub i32 %438, %250
  %440 = sub i32 %439, %255
  %441 = add i32 %440, %257
  %442 = sub i32 %441, %15
  %443 = add i32 %442, %27
  %444 = add i32 %443, %39
  %445 = sub i32 %444, %44
  %446 = sub i32 %445, %58
  %447 = sub i32 %446, %68
  %448 = sub i32 %447, %71
  %449 = sub i32 %448, %81
  %450 = sub i32 %449, %86
  %451 = sub i32 %450, %92
  %452 = add i32 %451, %98
  %453 = sub i32 %452, %106
  %454 = add i32 %453, %110
  %455 = sub i32 %454, %118
  %456 = sub i32 %455, %128
  %457 = sub i32 %456, %132
  %458 = sub i32 %457, %135
  %459 = sub i32 %458, %150
  %460 = sub i32 %459, %165
  %461 = sub i32 %460, %177
  %462 = add i32 %461, %178
  %463 = sub i32 %462, %180
  %464 = add i32 %463, %181
  %465 = sub i32 %464, %188
  %466 = sub i32 %465, %194
  %467 = sub i32 %466, %200
  %468 = sub i32 %467, %202
  %469 = sub i32 %468, %205
  %470 = sub i32 %469, %206
  %471 = sub i32 %470, %234
  %472 = sub i32 %471, %243
  %473 = add i32 %472, %253
  %474 = add i32 %473, %261
  %475 = add i32 %474, %263
  %476 = add i32 %475, %265
  %477 = add i32 %476, %267
  %478 = add i32 %477, %269
  %479 = add i32 %478, %271
  %480 = sub i32 %479, %154
  %481 = add i32 %480, %282
  %482 = add i32 %481, %301
  %483 = add i32 %482, %280
  %484 = add i32 %483, %298
  %485 = icmp eq i32 %6, %484
  %486 = select i1 %485, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %487 = tail call i32 @puts(i8* nonnull dereferenceable(1) %486)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
