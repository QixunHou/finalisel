digraph "DFG for'main' function" {
	Node0x1e7f638[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1e7f6b8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1e7f748[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1e7f7a8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x1e7fc28[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1e7fd08[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x1e7fe08[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1e7fec8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x1e7ff78[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1e801d8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x1e80298[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1e803f8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1e80458[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1e879f0[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x1e87bf8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1e87d58[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1e87e68[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1e87f28[shape=record, label="  ret i32 0"];
	Node0x1e7f638 -> Node0x1e7f6b8;
	Node0x1e7f6b8 -> Node0x1e7f748;
	Node0x1e7f748 -> Node0x1e7f7a8;
	Node0x1e7f7a8 -> Node0x1e7fc28;
	Node0x1e7fc28 -> Node0x1e7fd08;
	Node0x1e7fd08 -> Node0x1e7fe08;
	Node0x1e7fe08 -> Node0x1e7fec8;
	Node0x1e7fec8 -> Node0x1e7ff78;
	Node0x1e7ff78 -> Node0x1e801d8;
	Node0x1e801d8 -> Node0x1e80298;
	Node0x1e80298 -> Node0x1e803f8;
	Node0x1e803f8 -> Node0x1e80458;
	Node0x1e80458 -> Node0x1e879f0;
	Node0x1e879f0 -> Node0x1e87bf8;
	Node0x1e87bf8 -> Node0x1e87d58;
	Node0x1e87d58 -> Node0x1e87e68;
	Node0x1e87e68 -> Node0x1e87f28;
edge [color=red]
	Node0x1e7f638 -> Node0x1e7f7a8;
	Node0x1e7f7a8 -> Node0x1e7fc28;
	Node0x1e7f6b8 -> Node0x1e7fd08;
	Node0x1e7fd08 -> Node0x1e7fe08;
	Node0x1e7f748 -> Node0x1e7fec8;
	Node0x1e7fec8 -> Node0x1e7ff78;
	Node0x1e7f638 -> Node0x1e801d8;
	Node0x1e7f6b8 -> Node0x1e801d8;
	Node0x1e7f748 -> Node0x1e801d8;
	Node0x1e7f638 -> Node0x1e80298;
	Node0x1e7f6b8 -> Node0x1e803f8;
	Node0x1e7f748 -> Node0x1e80458;
	Node0x1e80298 -> Node0x1e879f0;
	Node0x1e803f8 -> Node0x1e879f0;
	Node0x1e80458 -> Node0x1e879f0;
	Node0x1e7fec8 -> Node0x1e87bf8;
	Node0x1e7fd08 -> Node0x1e87d58;
	Node0x1e7f7a8 -> Node0x1e87e68;
}
