digraph "DFG for'crackme' function" {
	Node0x179d510[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x179dbc0[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x179dc80[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0x179dd20[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x179dd90[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x179de00[shape=record, label="  %8 = add i32 %5, %7"];
	Node0x179de70[shape=record, label="  %9 = and i32 %6, %0"];
	Node0x179dee0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x179df50[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0x179dfc0[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x179e030[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x179e0a0[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x179e110[shape=record, label="  %15 = xor i32 %7, -1"];
	Node0x179e1b0[shape=record, label="  %16 = mul i32 %3, -3"];
	Node0x179e220[shape=record, label="  %17 = sub i32 %0, %1"];
	Node0x179e290[shape=record, label="  %18 = add i32 %17, %11"];
	Node0x179e300[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x179e370[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x179e3e0[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x179e450[shape=record, label="  %22 = sub i32 %21, %9"];
	Node0x179e4c0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x179e530[shape=record, label="  %24 = add i32 %23, %14"];
	Node0x179e5a0[shape=record, label="  %25 = icmp eq i32 %8, %24"];
	Node0x173e268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x179ea40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x179ea90[shape=record, label="  ret void"];
	Node0x179d510 -> Node0x179dbc0;
	Node0x179dbc0 -> Node0x179dc80;
	Node0x179dc80 -> Node0x179dd20;
	Node0x179dd20 -> Node0x179dd90;
	Node0x179dd90 -> Node0x179de00;
	Node0x179de00 -> Node0x179de70;
	Node0x179de70 -> Node0x179dee0;
	Node0x179dee0 -> Node0x179df50;
	Node0x179df50 -> Node0x179dfc0;
	Node0x179dfc0 -> Node0x179e030;
	Node0x179e030 -> Node0x179e0a0;
	Node0x179e0a0 -> Node0x179e110;
	Node0x179e110 -> Node0x179e1b0;
	Node0x179e1b0 -> Node0x179e220;
	Node0x179e220 -> Node0x179e290;
	Node0x179e290 -> Node0x179e300;
	Node0x179e300 -> Node0x179e370;
	Node0x179e370 -> Node0x179e3e0;
	Node0x179e3e0 -> Node0x179e450;
	Node0x179e450 -> Node0x179e4c0;
	Node0x179e4c0 -> Node0x179e530;
	Node0x179e530 -> Node0x179e5a0;
	Node0x179e5a0 -> Node0x173e268;
	Node0x173e268 -> Node0x179ea40;
	Node0x179ea40 -> Node0x179ea90;
edge [color=red]
	Node0x179d510 -> Node0x179dbc0;
	Node0x179dbc0 -> Node0x179dc80;
	Node0x179dd20 -> Node0x179dd90;
	Node0x179dc80 -> Node0x179de00;
	Node0x179dd90 -> Node0x179de00;
	Node0x179dd20 -> Node0x179de70;
	Node0x179de70 -> Node0x179dee0;
	Node0x179dfc0 -> Node0x179e030;
	Node0x179e030 -> Node0x179e0a0;
	Node0x179dd90 -> Node0x179e110;
	Node0x179d510 -> Node0x179e1b0;
	Node0x179e220 -> Node0x179e290;
	Node0x179df50 -> Node0x179e290;
	Node0x179e290 -> Node0x179e300;
	Node0x179dee0 -> Node0x179e300;
	Node0x179e300 -> Node0x179e370;
	Node0x179dfc0 -> Node0x179e370;
	Node0x179e370 -> Node0x179e3e0;
	Node0x179e110 -> Node0x179e3e0;
	Node0x179e3e0 -> Node0x179e450;
	Node0x179de70 -> Node0x179e450;
	Node0x179e450 -> Node0x179e4c0;
	Node0x179e1b0 -> Node0x179e4c0;
	Node0x179e4c0 -> Node0x179e530;
	Node0x179e0a0 -> Node0x179e530;
	Node0x179de00 -> Node0x179e5a0;
	Node0x179e530 -> Node0x179e5a0;
	Node0x179e5a0 -> Node0x173e268;
	Node0x173e268 -> Node0x179ea40;
}
