digraph "DFG for'crackme' function" {
	Node0x1ab0a10[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1ab0a80[shape=record, label="  %6 = and i32 %2, %1"];
	Node0x1ab1100[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1ab1170[shape=record, label="  %8 = sub i32 %7, %5"];
	Node0x1ab11e0[shape=record, label="  %9 = add i32 %8, %3"];
	Node0x1ab1250[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x1ab12c0[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x1ab1330[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x1ab13a0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1ab1410[shape=record, label="  %14 = or i32 %11, %1"];
	Node0x1ab1480[shape=record, label="  %15 = xor i32 %5, -1"];
	Node0x1ab1520[shape=record, label="  %16 = shl i32 %10, 1"];
	Node0x1ab15c0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x1ab1630[shape=record, label="  %18 = shl i32 %12, 1"];
	Node0x1ab16d0[shape=record, label="  %19 = mul i32 %6, -3"];
	Node0x1ab1740[shape=record, label="  %20 = xor i32 %3, -1"];
	Node0x1ab17b0[shape=record, label="  %21 = or i32 %20, %0"];
	Node0x1ab1820[shape=record, label="  %22 = xor i32 %0, -1"];
	Node0x1ab1890[shape=record, label="  %23 = xor i32 %22, %3"];
	Node0x1ab1900[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x1ab19a0[shape=record, label="  %25 = sub i32 2147483646, %2"];
	Node0x1ab1a10[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x1ab1a80[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x1ab1b20[shape=record, label="  %28 = add i32 %2, 5"];
	Node0x1ab1b90[shape=record, label="  %29 = add i32 %28, %13"];
	Node0x1ab1c00[shape=record, label="  %30 = add i32 %29, %10"];
	Node0x1ab1c70[shape=record, label="  %31 = add i32 %30, %15"];
	Node0x1ab1ce0[shape=record, label="  %32 = sub i32 %31, %18"];
	Node0x1ab1f60[shape=record, label="  %33 = add i32 %32, %19"];
	Node0x1ab1fd0[shape=record, label="  %34 = sub i32 %33, %21"];
	Node0x1ab2040[shape=record, label="  %35 = add i32 %34, %23"];
	Node0x1ab20b0[shape=record, label="  %36 = add i32 %35, %24"];
	Node0x1ab2120[shape=record, label="  %37 = sub i32 %36, %17"];
	Node0x1ab2190[shape=record, label="  %38 = add i32 %37, %27"];
	Node0x1ab2200[shape=record, label="  %39 = icmp eq i32 %9, %38"];
	Node0x1a51268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ab26a0[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x1ab26f0[shape=record, label="  ret void"];
	Node0x1ab0a10 -> Node0x1ab0a80;
	Node0x1ab0a80 -> Node0x1ab1100;
	Node0x1ab1100 -> Node0x1ab1170;
	Node0x1ab1170 -> Node0x1ab11e0;
	Node0x1ab11e0 -> Node0x1ab1250;
	Node0x1ab1250 -> Node0x1ab12c0;
	Node0x1ab12c0 -> Node0x1ab1330;
	Node0x1ab1330 -> Node0x1ab13a0;
	Node0x1ab13a0 -> Node0x1ab1410;
	Node0x1ab1410 -> Node0x1ab1480;
	Node0x1ab1480 -> Node0x1ab1520;
	Node0x1ab1520 -> Node0x1ab15c0;
	Node0x1ab15c0 -> Node0x1ab1630;
	Node0x1ab1630 -> Node0x1ab16d0;
	Node0x1ab16d0 -> Node0x1ab1740;
	Node0x1ab1740 -> Node0x1ab17b0;
	Node0x1ab17b0 -> Node0x1ab1820;
	Node0x1ab1820 -> Node0x1ab1890;
	Node0x1ab1890 -> Node0x1ab1900;
	Node0x1ab1900 -> Node0x1ab19a0;
	Node0x1ab19a0 -> Node0x1ab1a10;
	Node0x1ab1a10 -> Node0x1ab1a80;
	Node0x1ab1a80 -> Node0x1ab1b20;
	Node0x1ab1b20 -> Node0x1ab1b90;
	Node0x1ab1b90 -> Node0x1ab1c00;
	Node0x1ab1c00 -> Node0x1ab1c70;
	Node0x1ab1c70 -> Node0x1ab1ce0;
	Node0x1ab1ce0 -> Node0x1ab1f60;
	Node0x1ab1f60 -> Node0x1ab1fd0;
	Node0x1ab1fd0 -> Node0x1ab2040;
	Node0x1ab2040 -> Node0x1ab20b0;
	Node0x1ab20b0 -> Node0x1ab2120;
	Node0x1ab2120 -> Node0x1ab2190;
	Node0x1ab2190 -> Node0x1ab2200;
	Node0x1ab2200 -> Node0x1a51268;
	Node0x1a51268 -> Node0x1ab26a0;
	Node0x1ab26a0 -> Node0x1ab26f0;
edge [color=red]
	Node0x1ab0a80 -> Node0x1ab1100;
	Node0x1ab1100 -> Node0x1ab1170;
	Node0x1ab0a10 -> Node0x1ab1170;
	Node0x1ab1170 -> Node0x1ab11e0;
	Node0x1ab12c0 -> Node0x1ab1330;
	Node0x1ab1330 -> Node0x1ab13a0;
	Node0x1ab12c0 -> Node0x1ab1410;
	Node0x1ab0a10 -> Node0x1ab1480;
	Node0x1ab1250 -> Node0x1ab1520;
	Node0x1ab1520 -> Node0x1ab15c0;
	Node0x1ab1330 -> Node0x1ab1630;
	Node0x1ab0a80 -> Node0x1ab16d0;
	Node0x1ab1740 -> Node0x1ab17b0;
	Node0x1ab1820 -> Node0x1ab1890;
	Node0x1ab19a0 -> Node0x1ab1a10;
	Node0x1ab1410 -> Node0x1ab1a10;
	Node0x1ab1a10 -> Node0x1ab1a80;
	Node0x1ab1b20 -> Node0x1ab1b90;
	Node0x1ab13a0 -> Node0x1ab1b90;
	Node0x1ab1b90 -> Node0x1ab1c00;
	Node0x1ab1250 -> Node0x1ab1c00;
	Node0x1ab1c00 -> Node0x1ab1c70;
	Node0x1ab1480 -> Node0x1ab1c70;
	Node0x1ab1c70 -> Node0x1ab1ce0;
	Node0x1ab1630 -> Node0x1ab1ce0;
	Node0x1ab1ce0 -> Node0x1ab1f60;
	Node0x1ab16d0 -> Node0x1ab1f60;
	Node0x1ab1f60 -> Node0x1ab1fd0;
	Node0x1ab17b0 -> Node0x1ab1fd0;
	Node0x1ab1fd0 -> Node0x1ab2040;
	Node0x1ab1890 -> Node0x1ab2040;
	Node0x1ab2040 -> Node0x1ab20b0;
	Node0x1ab1900 -> Node0x1ab20b0;
	Node0x1ab20b0 -> Node0x1ab2120;
	Node0x1ab15c0 -> Node0x1ab2120;
	Node0x1ab2120 -> Node0x1ab2190;
	Node0x1ab1a80 -> Node0x1ab2190;
	Node0x1ab11e0 -> Node0x1ab2200;
	Node0x1ab2190 -> Node0x1ab2200;
	Node0x1ab2200 -> Node0x1a51268;
	Node0x1a51268 -> Node0x1ab26a0;
}
