; ModuleID = '../.././c_source_file/0912_path_condition_crackme.c'
source_filename = "../.././c_source_file/0912_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %1
  %8 = or i32 %7, %0
  %9 = add i32 %8, %5
  %10 = xor i32 %4, %3
  %11 = xor i32 %10, -1
  %12 = or i32 %11, %5
  %13 = add i32 %9, %12
  %14 = sub i32 0, %13
  %15 = or i32 %1, %0
  %16 = xor i32 %15, %2
  %17 = xor i32 %1, -1
  %18 = and i32 %17, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %19, %2
  %21 = shl i32 %20, 1
  %22 = or i32 %2, %0
  %23 = xor i32 %22, -1
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %23, %25
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %19
  %32 = xor i32 %0, -1
  %33 = and i32 %17, %2
  %34 = and i32 %33, %32
  %35 = or i32 %17, %2
  %36 = and i32 %35, %0
  %37 = or i32 %34, %36
  %38 = and i32 %1, %0
  %39 = or i32 %38, %23
  %40 = xor i32 %2, -1
  %41 = and i32 %40, %1
  %42 = or i32 %17, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %29, %43
  %45 = or i32 %40, %25
  %46 = or i32 %18, %30
  %47 = xor i32 %38, %2
  %48 = xor i32 %22, %1
  %49 = and i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %28, %17
  %52 = and i32 %42, %40
  %53 = add i32 %2, 1
  %54 = and i32 %40, %19
  %55 = or i32 %30, %43
  %56 = shl i32 %42, 1
  %57 = xor i32 %16, -1
  %58 = and i32 %29, %19
  %59 = xor i32 %36, 2147483647
  %60 = xor i32 %59, %34
  %61 = or i32 %40, %1
  %62 = or i32 %61, %0
  %63 = and i32 %42, %2
  %64 = or i32 %38, %40
  %65 = or i32 %43, %2
  %66 = or i32 %18, %2
  %67 = and i32 %33, %0
  %68 = xor i32 %29, %0
  %69 = xor i32 %68, -1
  %70 = xor i32 %67, %69
  %71 = xor i32 %38, -1
  %72 = and i32 %29, %71
  %73 = and i32 %40, %0
  %74 = xor i32 %73, -1
  %75 = and i32 %74, %17
  %76 = and i32 %32, %2
  %77 = xor i32 %76, %1
  %78 = and i32 %7, %32
  %79 = xor i32 %35, %0
  %80 = or i32 %67, %79
  %81 = and i32 %27, %25
  %82 = or i32 %76, %17
  %83 = and i32 %42, %30
  %84 = shl i32 %83, 1
  %85 = xor i32 %73, %61
  %86 = or i32 %27, %43
  %87 = and i32 %49, %0
  %88 = xor i32 %7, %32
  %89 = xor i32 %88, %87
  %90 = and i32 %2, %0
  %91 = or i32 %90, %17
  %92 = xor i32 %73, %1
  %93 = shl i32 %92, 1
  %94 = or i32 %29, %32
  %95 = xor i32 %49, %0
  %96 = and i32 %27, %1
  %97 = or i32 %29, %38
  %98 = and i32 %24, %28
  %99 = xor i32 %7, -1
  %100 = and i32 %99, %32
  %101 = and i32 %41, %32
  %102 = and i32 %99, %0
  %103 = and i32 %41, %0
  %104 = xor i32 %61, -1
  %105 = and i32 %104, %32
  %106 = mul i32 %105, 7
  %107 = and i32 %49, %32
  %108 = shl i32 %107, 3
  %109 = and i32 %104, %0
  %110 = mul i32 %87, 19
  %111 = and i32 %5, %3
  %112 = xor i32 %111, %4
  %113 = or i32 %5, %4
  %114 = and i32 %113, %11
  %115 = and i32 %111, %4
  %116 = xor i32 %4, -1
  %117 = or i32 %5, %3
  %118 = and i32 %117, %116
  %119 = or i32 %115, %118
  %120 = xor i32 %3, -1
  %121 = or i32 %120, %4
  %122 = xor i32 %121, -1
  %123 = xor i32 %5, %4
  %124 = or i32 %123, %122
  %125 = or i32 %4, %3
  %126 = and i32 %120, %5
  %127 = and i32 %126, %4
  %128 = xor i32 %5, %3
  %129 = xor i32 %128, %4
  %130 = or i32 %127, %129
  %131 = shl i32 %130, 1
  %132 = or i32 %120, %5
  %133 = and i32 %132, %116
  %134 = or i32 %127, %133
  %135 = xor i32 %117, %4
  %136 = or i32 %115, %135
  %137 = shl i32 %136, 1
  %138 = and i32 %120, %4
  %139 = or i32 %111, %138
  %140 = xor i32 %5, -1
  %141 = and i32 %10, %140
  %142 = xor i32 %123, -1
  %143 = or i32 %142, %120
  %144 = and i32 %140, %4
  %145 = or i32 %140, %3
  %146 = xor i32 %144, %145
  %147 = and i32 %140, %3
  %148 = xor i32 %147, -1
  %149 = xor i32 %148, %4
  %150 = and i32 %142, %3
  %151 = xor i32 %147, %4
  %152 = and i32 %121, %5
  %153 = shl i32 %152, 1
  %154 = xor i32 %128, -1
  %155 = add i32 %128, 1
  %156 = xor i32 %138, -1
  %157 = and i32 %142, %156
  %158 = xor i32 %117, -1
  %159 = or i32 %158, %4
  %160 = and i32 %154, %156
  %161 = xor i32 %144, -1
  %162 = and i32 %161, %3
  %163 = and i32 %121, %142
  %164 = xor i32 %129, -1
  %165 = xor i32 %127, %164
  %166 = or i32 %128, %116
  %167 = and i32 %128, %156
  %168 = shl i32 %120, 1
  %169 = and i32 %10, %5
  %170 = and i32 %123, %121
  %171 = and i32 %5, %4
  %172 = xor i32 %171, -1
  %173 = and i32 %172, %3
  %174 = and i32 %4, %3
  %175 = xor i32 %174, -1
  %176 = and i32 %128, %175
  %177 = add i32 %174, 1
  %178 = xor i32 %145, -1
  %179 = or i32 %178, %4
  %180 = or i32 %128, %4
  %181 = xor i32 %127, %180
  %182 = and i32 %125, %5
  %183 = shl i32 %182, 2
  %184 = or i32 %148, %4
  %185 = or i32 %154, %116
  %186 = xor i32 %172, %3
  %187 = shl i32 %186, 1
  %188 = and i32 %11, %5
  %189 = or i32 %140, %11
  %190 = or i32 %171, %120
  %191 = shl i32 %190, 1
  %192 = and i32 %142, %175
  %193 = shl i32 %192, 1
  %194 = xor i32 %113, -1
  %195 = xor i32 %194, %3
  %196 = xor i32 %115, -1
  %197 = xor i32 %135, %196
  %198 = xor i32 %174, %5
  %199 = or i32 %140, %4
  %200 = xor i32 %199, -1
  %201 = xor i32 %200, %3
  %202 = or i32 %142, %11
  %203 = xor i32 %171, %125
  %204 = or i32 %194, %120
  %205 = or i32 %123, %138
  %206 = and i32 %123, %11
  %207 = and i32 %128, %116
  %208 = or i32 %115, %207
  %209 = xor i32 %125, -1
  %210 = xor i32 %209, %5
  %211 = xor i32 %111, -1
  %212 = and i32 %211, %4
  %213 = or i32 %211, %116
  %214 = and i32 %140, %175
  %215 = xor i32 %138, %5
  %216 = or i32 %200, %11
  %217 = or i32 %147, %116
  %218 = and i32 %199, %120
  %219 = shl i32 %218, 2
  %220 = or i32 %154, %209
  %221 = or i32 %174, %200
  %222 = and i32 %161, %11
  %223 = xor i32 %207, %196
  %224 = and i32 %126, %116
  %225 = and i32 %132, %4
  %226 = or i32 %224, %225
  %227 = and i32 %113, %120
  %228 = or i32 %178, %116
  %229 = shl i32 %199, 1
  %230 = and i32 %172, %120
  %231 = and i32 %125, %140
  %232 = or i32 %171, %10
  %233 = xor i32 %199, %174
  %234 = and i32 %142, %11
  %235 = xor i32 %122, %5
  %236 = and i32 %211, %116
  %237 = xor i32 %154, %4
  %238 = or i32 %171, %3
  %239 = or i32 %171, %158
  %240 = and i32 %128, %4
  %241 = or i32 %194, %3
  %242 = xor i32 %166, -1
  %243 = or i32 %224, %242
  %244 = and i32 %125, %142
  %245 = and i32 %111, %116
  %246 = and i32 %117, %4
  %247 = or i32 %245, %246
  %248 = add i32 %199, 1
  %249 = or i32 %128, %122
  %250 = and i32 %10, %161
  %251 = shl i32 %250, 1
  %252 = and i32 %161, %120
  %253 = xor i32 %138, %148
  %254 = and i32 %199, %10
  %255 = shl i32 %254, 1
  %256 = and i32 %172, %11
  %257 = shl i32 %256, 1
  %258 = xor i32 %121, %5
  %259 = or i32 %174, %178
  %260 = or i32 %174, %158
  %261 = xor i32 %132, %4
  %262 = or i32 %127, %261
  %263 = or i32 %10, %200
  %264 = or i32 %144, %111
  %265 = or i32 %171, %11
  %266 = and i32 %113, %3
  %267 = or i32 %200, %3
  %268 = and i32 %123, %175
  %269 = or i32 %115, %164
  %270 = xor i32 %145, %174
  %271 = xor i32 %158, %4
  %272 = and i32 %142, %120
  %273 = and i32 %156, %5
  %274 = or i32 %147, %4
  %275 = or i32 %123, %120
  %276 = and i32 %199, %11
  %277 = or i32 %138, %140
  %278 = and i32 %123, %125
  %279 = or i32 %171, %209
  %280 = shl i32 %279, 1
  %281 = or i32 %123, %10
  %282 = or i32 %144, %178
  %283 = and i32 %140, %156
  %284 = and i32 %199, %3
  %285 = or i32 %10, %140
  %286 = xor i32 %145, %4
  %287 = and i32 %123, %10
  %288 = or i32 %142, %3
  %289 = or i32 %111, %4
  %290 = or i32 %148, %116
  %291 = and i32 %175, %5
  %292 = xor i32 %261, 2147483647
  %293 = xor i32 %292, %127
  %294 = and i32 %158, %116
  %295 = and i32 %147, %116
  %296 = mul i32 %295, -12
  %297 = and i32 %158, %4
  %298 = and i32 %147, %4
  %299 = and i32 %178, %116
  %300 = mul i32 %245, -14
  %301 = and i32 %178, %4
  %302 = mul i32 %301, 9
  %303 = shl i32 %115, 3
  %304 = add i32 %109, %32
  %305 = add i32 %304, %215
  %306 = add i32 %305, %169
  %307 = add i32 %306, %113
  %308 = add i32 %307, %60
  %309 = add i32 %308, %284
  %310 = add i32 %309, %274
  %311 = add i32 %310, %263
  %312 = add i32 %311, %237
  %313 = add i32 %312, %232
  %314 = add i32 %313, %201
  %315 = add i32 %314, %176
  %316 = add i32 %315, %167
  %317 = add i32 %316, %160
  %318 = add i32 %317, %124
  %319 = add i32 %318, %208
  %320 = add i32 %319, %293
  %321 = shl i32 %320, 1
  %322 = sub i32 %159, %125
  %323 = sub i32 %322, %269
  %324 = mul i32 %323, 3
  %325 = sub i32 %103, %66
  %326 = add i32 %325, %217
  %327 = mul i32 %326, 5
  %328 = sub i32 %297, %299
  %329 = mul i32 %328, 6
  %330 = sub i32 %102, %298
  %331 = mul i32 %330, 13
  %332 = sub i32 %17, %1
  %333 = add i32 %332, %24
  %334 = add i32 %333, %53
  %335 = add i32 %334, %57
  %336 = sub i32 %335, %15
  %337 = add i32 %336, %71
  %338 = sub i32 %337, %16
  %339 = add i32 %338, %28
  %340 = sub i32 %339, %41
  %341 = add i32 %340, %45
  %342 = add i32 %341, %47
  %343 = add i32 %342, %50
  %344 = sub i32 %343, %52
  %345 = add i32 %344, %54
  %346 = sub i32 %345, %56
  %347 = sub i32 %346, %63
  %348 = sub i32 %347, %64
  %349 = sub i32 %348, %65
  %350 = sub i32 %349, %76
  %351 = add i32 %350, %21
  %352 = sub i32 %351, %26
  %353 = sub i32 %352, %31
  %354 = add i32 %353, %39
  %355 = sub i32 %354, %44
  %356 = sub i32 %355, %46
  %357 = sub i32 %356, %48
  %358 = sub i32 %357, %51
  %359 = sub i32 %358, %55
  %360 = sub i32 %359, %58
  %361 = sub i32 %360, %62
  %362 = add i32 %361, %72
  %363 = add i32 %362, %68
  %364 = add i32 %363, %75
  %365 = sub i32 %364, %77
  %366 = sub i32 %365, %78
  %367 = sub i32 %366, %81
  %368 = add i32 %367, %82
  %369 = sub i32 %368, %85
  %370 = add i32 %369, %86
  %371 = sub i32 %370, %91
  %372 = add i32 %371, %94
  %373 = sub i32 %372, %95
  %374 = add i32 %373, %96
  %375 = sub i32 %374, %97
  %376 = add i32 %375, %98
  %377 = sub i32 %376, %100
  %378 = add i32 %377, %101
  %379 = sub i32 %378, %168
  %380 = add i32 %379, 1
  %381 = add i32 %380, %37
  %382 = sub i32 %381, %70
  %383 = sub i32 %382, %80
  %384 = sub i32 %383, %84
  %385 = add i32 %384, %89
  %386 = sub i32 %385, %93
  %387 = add i32 %386, %106
  %388 = add i32 %387, %108
  %389 = add i32 %388, %110
  %390 = add i32 %389, %177
  %391 = add i32 %390, %209
  %392 = add i32 %391, %174
  %393 = sub i32 %392, %138
  %394 = sub i32 %393, %141
  %395 = add i32 %394, %155
  %396 = sub i32 %395, %188
  %397 = sub i32 %396, %189
  %398 = sub i32 %397, %198
  %399 = sub i32 %398, %210
  %400 = add i32 %399, %214
  %401 = add i32 %400, %142
  %402 = sub i32 %401, %231
  %403 = add i32 %402, %235
  %404 = add i32 %403, %128
  %405 = add i32 %404, %248
  %406 = add i32 %405, %258
  %407 = sub i32 %406, %273
  %408 = add i32 %407, %277
  %409 = add i32 %408, %283
  %410 = sub i32 %409, %285
  %411 = add i32 %410, %291
  %412 = add i32 %411, %144
  %413 = sub i32 %412, %112
  %414 = add i32 %413, %114
  %415 = add i32 %414, %139
  %416 = add i32 %415, %143
  %417 = add i32 %416, %146
  %418 = sub i32 %417, %149
  %419 = sub i32 %418, %150
  %420 = add i32 %419, %151
  %421 = sub i32 %420, %153
  %422 = add i32 %421, %157
  %423 = sub i32 %422, %162
  %424 = sub i32 %423, %163
  %425 = sub i32 %424, %166
  %426 = add i32 %425, %170
  %427 = sub i32 %426, %173
  %428 = sub i32 %427, %179
  %429 = add i32 %428, %183
  %430 = add i32 %429, %184
  %431 = add i32 %430, %185
  %432 = add i32 %431, %195
  %433 = sub i32 %432, %202
  %434 = add i32 %433, %203
  %435 = add i32 %434, %204
  %436 = sub i32 %435, %205
  %437 = add i32 %436, %206
  %438 = add i32 %437, %212
  %439 = sub i32 %438, %213
  %440 = add i32 %439, %207
  %441 = sub i32 %440, %216
  %442 = add i32 %441, %220
  %443 = add i32 %442, %221
  %444 = sub i32 %443, %222
  %445 = sub i32 %444, %227
  %446 = sub i32 %445, %228
  %447 = sub i32 %446, %229
  %448 = add i32 %447, %230
  %449 = sub i32 %448, %233
  %450 = add i32 %449, %234
  %451 = add i32 %450, %236
  %452 = add i32 %451, %238
  %453 = sub i32 %452, %239
  %454 = sub i32 %453, %240
  %455 = add i32 %454, %241
  %456 = sub i32 %455, %244
  %457 = sub i32 %456, %249
  %458 = add i32 %457, %252
  %459 = sub i32 %458, %253
  %460 = sub i32 %459, %259
  %461 = add i32 %460, %260
  %462 = add i32 %461, %264
  %463 = sub i32 %462, %265
  %464 = sub i32 %463, %266
  %465 = add i32 %464, %267
  %466 = add i32 %465, %268
  %467 = sub i32 %466, %270
  %468 = sub i32 %467, %271
  %469 = add i32 %468, %272
  %470 = add i32 %469, %275
  %471 = add i32 %470, %276
  %472 = sub i32 %471, %278
  %473 = sub i32 %472, %281
  %474 = add i32 %473, %282
  %475 = sub i32 %474, %135
  %476 = add i32 %475, %286
  %477 = add i32 %476, %287
  %478 = add i32 %477, %288
  %479 = sub i32 %478, %289
  %480 = add i32 %479, %290
  %481 = add i32 %480, %294
  %482 = add i32 %481, %119
  %483 = add i32 %482, %134
  %484 = sub i32 %483, %165
  %485 = sub i32 %484, %181
  %486 = sub i32 %485, %187
  %487 = sub i32 %486, %191
  %488 = sub i32 %487, %193
  %489 = add i32 %488, %197
  %490 = sub i32 %489, %219
  %491 = sub i32 %490, %223
  %492 = sub i32 %491, %226
  %493 = sub i32 %492, %243
  %494 = add i32 %493, %247
  %495 = sub i32 %494, %251
  %496 = sub i32 %495, %255
  %497 = sub i32 %496, %257
  %498 = add i32 %497, %262
  %499 = sub i32 %498, %280
  %500 = add i32 %499, %296
  %501 = add i32 %500, %300
  %502 = add i32 %501, %302
  %503 = sub i32 %502, %303
  %504 = sub i32 %503, %131
  %505 = sub i32 %504, %137
  %506 = add i32 %505, %329
  %507 = add i32 %506, %331
  %508 = add i32 %507, %327
  %509 = add i32 %508, %324
  %510 = add i32 %509, %321
  %511 = icmp eq i32 %510, %14
  %512 = select i1 %511, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %513 = tail call i32 @puts(i8* nonnull dereferenceable(1) %512)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
