; ModuleID = '../.././c_source_file/0193_path_condition_crackme.c'
source_filename = "../.././c_source_file/0193_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %0
  %5 = xor i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %4, %6
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %0
  %10 = or i32 %9, %1
  %11 = sub i32 %7, %10
  %12 = and i32 %2, %0
  %13 = xor i32 %1, -1
  %14 = or i32 %13, %0
  %15 = xor i32 %12, %14
  %16 = or i32 %1, %0
  %17 = xor i32 %2, %0
  %18 = and i32 %17, %16
  %19 = and i32 %6, %2
  %20 = xor i32 %16, -1
  %21 = xor i32 %2, %1
  %22 = and i32 %21, %14
  %23 = shl i32 %22, 2
  %24 = and i32 %1, %0
  %25 = or i32 %8, %1
  %26 = xor i32 %25, -1
  %27 = or i32 %24, %26
  %28 = and i32 %2, %1
  %29 = and i32 %28, %0
  %30 = xor i32 %0, -1
  %31 = and i32 %21, %30
  %32 = or i32 %29, %31
  %33 = shl i32 %32, 1
  %34 = xor i32 %4, -1
  %35 = or i32 %34, %6
  %36 = shl i32 %35, 1
  %37 = and i32 %28, %30
  %38 = or i32 %2, %1
  %39 = and i32 %38, %0
  %40 = xor i32 %37, -1
  %41 = xor i32 %39, %40
  %42 = xor i32 %17, -1
  %43 = and i32 %14, %42
  %44 = xor i32 %29, -1
  %45 = xor i32 %31, %44
  %46 = and i32 %13, %0
  %47 = or i32 %28, %46
  %48 = and i32 %17, %14
  %49 = or i32 %38, %0
  %50 = or i32 %12, %13
  %51 = and i32 %13, %2
  %52 = and i32 %51, %0
  %53 = or i32 %13, %2
  %54 = and i32 %53, %30
  %55 = xor i32 %54, 2147483647
  %56 = xor i32 %55, %52
  %57 = shl i32 %56, 1
  %58 = xor i32 %46, -1
  %59 = add i32 %46, 1
  %60 = or i32 %46, %42
  %61 = or i32 %25, %30
  %62 = and i32 %58, %2
  %63 = or i32 %9, %5
  %64 = shl i32 %63, 1
  %65 = xor i32 %14, -1
  %66 = or i32 %12, %65
  %67 = and i32 %8, %1
  %68 = xor i32 %67, -1
  %69 = add i32 %67, 1
  %70 = xor i32 %21, -1
  %71 = or i32 %70, %0
  %72 = or i32 %67, %30
  %73 = xor i32 %24, -1
  %74 = and i32 %8, %73
  %75 = or i32 %21, %65
  %76 = shl i32 %75, 2
  %77 = and i32 %42, %1
  %78 = xor i32 %9, -1
  %79 = add i32 %9, 1
  %80 = xor i32 %28, -1
  %81 = xor i32 %46, %80
  %82 = xor i32 %38, %24
  %83 = xor i32 %21, %0
  %84 = xor i32 %83, -1
  %85 = or i32 %29, %84
  %86 = and i32 %21, %16
  %87 = xor i32 %52, %84
  %88 = or i32 %37, %39
  %89 = and i32 %68, %0
  %90 = or i32 %46, %2
  %91 = and i32 %42, %13
  %92 = shl i32 %91, 1
  %93 = xor i32 %92, -1
  %94 = or i32 %8, %0
  %95 = xor i32 %94, -1
  %96 = or i32 %95, %1
  %97 = or i32 %70, %65
  %98 = or i32 %21, %46
  %99 = shl i32 %98, 1
  %100 = and i32 %68, %30
  %101 = or i32 %17, %65
  %102 = xor i32 %12, %16
  %103 = and i32 %80, %0
  %104 = and i32 %78, %13
  %105 = or i32 %6, %2
  %106 = shl i32 %105, 1
  %107 = and i32 %4, %13
  %108 = or i32 %52, %83
  %109 = and i32 %42, %58
  %110 = and i32 %4, %1
  %111 = or i32 %42, %6
  %112 = and i32 %78, %6
  %113 = or i32 %5, %42
  %114 = xor i32 %12, %68
  %115 = xor i32 %28, %0
  %116 = xor i32 %29, %83
  %117 = or i32 %8, %20
  %118 = and i32 %21, %0
  %119 = or i32 %12, %1
  %120 = xor i32 %67, %0
  %121 = xor i32 %26, %0
  %122 = shl i32 %121, 1
  %123 = xor i32 %73, %2
  %124 = or i32 %12, %5
  %125 = shl i32 %124, 1
  %126 = xor i32 %38, %0
  %127 = and i32 %17, %58
  %128 = and i32 %38, %30
  %129 = and i32 %42, %6
  %130 = and i32 %94, %1
  %131 = xor i32 %25, %24
  %132 = and i32 %8, %6
  %133 = or i32 %24, %2
  %134 = shl i32 %133, 1
  %135 = or i32 %65, %2
  %136 = shl i32 %135, 1
  %137 = add i32 %17, 1
  %138 = and i32 %17, %13
  %139 = or i32 %21, %24
  %140 = xor i32 %9, %80
  %141 = xor i32 %12, -1
  %142 = xor i32 %141, %1
  %143 = or i32 %95, %6
  %144 = xor i32 %58, %2
  %145 = and i32 %141, %1
  %146 = or i32 %5, %34
  %147 = or i32 %24, %8
  %148 = shl i32 %147, 1
  %149 = xor i32 %12, %1
  %150 = xor i32 %16, %2
  %151 = or i32 %42, %1
  %152 = add i32 %12, 1
  %153 = and i32 %25, %30
  %154 = or i32 %9, %13
  %155 = and i32 %17, %73
  %156 = or i32 %38, %30
  %157 = or i32 %8, %6
  %158 = or i32 %28, %0
  %159 = xor i32 %46, %68
  %160 = or i32 %5, %2
  %161 = or i32 %80, %30
  %162 = and i32 %51, %30
  %163 = or i32 %21, %30
  %164 = xor i32 %162, %163
  %165 = and i32 %5, %141
  %166 = or i32 %42, %20
  %167 = and i32 %70, %30
  %168 = or i32 %17, %24
  %169 = or i32 %80, %0
  %170 = xor i32 %38, -1
  %171 = or i32 %24, %170
  %172 = xor i32 %78, %1
  %173 = or i32 %42, %13
  %174 = xor i32 %12, %38
  %175 = and i32 %80, %30
  %176 = shl i32 %175, 1
  %177 = or i32 %17, %5
  %178 = xor i32 %25, %0
  %179 = and i32 %94, %13
  %180 = xor i32 %24, %2
  %181 = and i32 %16, %42
  %182 = or i32 %5, %95
  %183 = and i32 %16, %70
  %184 = or i32 %46, %70
  %185 = xor i32 %80, %0
  %186 = or i32 %170, %30
  %187 = shl i32 %186, 1
  %188 = xor i32 %9, %1
  %189 = or i32 %9, %6
  %190 = or i32 %67, %46
  %191 = shl i32 %190, 1
  %192 = and i32 %53, %0
  %193 = xor i32 %192, -1
  %194 = xor i32 %162, %193
  %195 = and i32 %5, %8
  %196 = xor i32 %46, %2
  %197 = and i32 %5, %2
  %198 = add i32 %38, 1
  %199 = and i32 %14, %70
  %200 = or i32 %17, %20
  %201 = shl i32 %200, 1
  %202 = or i32 %29, %126
  %203 = and i32 %17, %6
  %204 = and i32 %94, %5
  %205 = or i32 %12, %170
  %206 = xor i32 %163, -1
  %207 = or i32 %162, %206
  %208 = or i32 %68, %30
  %209 = and i32 %21, %58
  %210 = shl i32 %209, 1
  %211 = and i32 %5, %78
  %212 = or i32 %17, %6
  %213 = add i32 %1, 1
  %214 = xor i32 %53, %30
  %215 = xor i32 %214, %52
  %216 = or i32 %67, %0
  %217 = or i32 %26, %30
  %218 = or i32 %25, %0
  %219 = or i32 %42, %65
  %220 = or i32 %17, %13
  %221 = xor i32 %14, %2
  %222 = or i32 %24, %42
  %223 = and i32 %17, %5
  %224 = and i32 %141, %13
  %225 = and i32 %5, %42
  %226 = or i32 %29, %128
  %227 = and i32 %4, %5
  %228 = or i32 %21, %0
  %229 = xor i32 %228, -1
  %230 = or i32 %52, %229
  %231 = and i32 %14, %8
  %232 = xor i32 %4, %24
  %233 = and i32 %42, %73
  %234 = and i32 %78, %1
  %235 = or i32 %17, %46
  %236 = and i32 %94, %6
  %237 = or i32 %9, %26
  %238 = xor i32 %4, %1
  %239 = xor i32 %126, %44
  %240 = xor i32 %118, %40
  %241 = or i32 %95, %13
  %242 = xor i32 %94, %24
  %243 = and i32 %70, %73
  %244 = or i32 %46, %8
  %245 = or i32 %5, %8
  %246 = xor i32 %128, 2147483647
  %247 = xor i32 %246, %29
  %248 = xor i32 %9, %25
  %249 = shl i32 %248, 1
  %250 = xor i32 %65, %2
  %251 = or i32 %70, %20
  %252 = or i32 %68, %0
  %253 = or i32 %52, %54
  %254 = xor i32 %94, %1
  %255 = and i32 %16, %8
  %256 = or i32 %170, %0
  %257 = or i32 %12, %6
  %258 = shl i32 %257, 1
  %259 = xor i32 %52, %228
  %260 = or i32 %12, %67
  %261 = and i32 %8, %58
  %262 = and i32 %70, %58
  %263 = and i32 %73, %2
  %264 = and i32 %21, %73
  %265 = or i32 %34, %13
  %266 = and i32 %16, %2
  %267 = or i32 %162, %192
  %268 = or i32 %24, %70
  %269 = and i32 %70, %0
  %270 = and i32 %170, %30
  %271 = mul i32 %270, -7
  %272 = and i32 %67, %30
  %273 = mul i32 %272, 13
  %274 = and i32 %170, %0
  %275 = mul i32 %274, -21
  %276 = and i32 %67, %0
  %277 = mul i32 %276, 18
  %278 = and i32 %26, %30
  %279 = and i32 %26, %0
  %280 = mul i32 %29, 6
  %281 = sub i32 %20, %25
  %282 = sub i32 %281, %262
  %283 = add i32 %282, %37
  %284 = mul i32 %283, 3
  %285 = add i32 %89, %150
  %286 = add i32 %285, %142
  %287 = shl i32 %286, 2
  %288 = sub i32 %59, %62
  %289 = add i32 %288, %153
  %290 = mul i32 %289, 5
  %291 = sub i32 -2, %0
  %292 = add i32 %291, %196
  %293 = add i32 %292, %80
  %294 = add i32 %293, %9
  %295 = add i32 %294, %26
  %296 = add i32 %295, %278
  %297 = add i32 %296, %243
  %298 = add i32 %297, %234
  %299 = add i32 %298, %222
  %300 = add i32 %299, %189
  %301 = add i32 %300, %188
  %302 = add i32 %301, %184
  %303 = add i32 %302, %177
  %304 = add i32 %303, %158
  %305 = add i32 %304, %129
  %306 = add i32 %305, %101
  %307 = add i32 %306, %31
  %308 = add i32 %307, %60
  %309 = add i32 %308, %247
  %310 = shl i32 %309, 1
  %311 = add i32 %213, %1
  %312 = add i32 %311, %24
  %313 = sub i32 %312, %2
  %314 = add i32 %313, %8
  %315 = sub i32 %314, %16
  %316 = sub i32 %315, %46
  %317 = sub i32 %316, %19
  %318 = add i32 %317, %69
  %319 = sub i32 %318, %74
  %320 = add i32 %319, %79
  %321 = add i32 %320, %90
  %322 = add i32 %321, %38
  %323 = add i32 %322, %117
  %324 = sub i32 %323, %123
  %325 = sub i32 %324, %132
  %326 = add i32 %325, %137
  %327 = add i32 %326, %144
  %328 = sub i32 %327, %94
  %329 = add i32 %328, %152
  %330 = sub i32 %329, %157
  %331 = add i32 %330, %160
  %332 = sub i32 %331, %17
  %333 = add i32 %332, %180
  %334 = sub i32 %333, %195
  %335 = sub i32 %334, %197
  %336 = add i32 %335, %198
  %337 = add i32 %336, 1
  %338 = add i32 %337, %221
  %339 = add i32 %338, %231
  %340 = sub i32 %339, %244
  %341 = sub i32 %340, %245
  %342 = sub i32 %341, %250
  %343 = sub i32 %342, %12
  %344 = sub i32 %343, %255
  %345 = add i32 %344, %28
  %346 = sub i32 %345, %261
  %347 = sub i32 %346, %263
  %348 = add i32 %347, %266
  %349 = add i32 %348, %18
  %350 = add i32 %349, %15
  %351 = sub i32 %350, %27
  %352 = add i32 %351, %43
  %353 = add i32 %352, %47
  %354 = add i32 %353, %48
  %355 = sub i32 %354, %49
  %356 = add i32 %355, %50
  %357 = add i32 %356, %61
  %358 = sub i32 %357, %66
  %359 = add i32 %358, %71
  %360 = add i32 %359, %72
  %361 = sub i32 %360, %77
  %362 = sub i32 %361, %81
  %363 = sub i32 %362, %82
  %364 = sub i32 %363, %86
  %365 = sub i32 %364, %96
  %366 = sub i32 %365, %97
  %367 = sub i32 %366, %100
  %368 = sub i32 %367, %102
  %369 = sub i32 %368, %103
  %370 = add i32 %369, %104
  %371 = sub i32 %370, %106
  %372 = add i32 %371, %107
  %373 = add i32 %372, %109
  %374 = sub i32 %373, %110
  %375 = add i32 %374, %111
  %376 = sub i32 %375, %112
  %377 = sub i32 %376, %113
  %378 = sub i32 %377, %114
  %379 = sub i32 %378, %115
  %380 = add i32 %379, %118
  %381 = add i32 %380, %119
  %382 = add i32 %381, %120
  %383 = add i32 %382, %126
  %384 = sub i32 %383, %127
  %385 = add i32 %384, %128
  %386 = sub i32 %385, %130
  %387 = add i32 %386, %131
  %388 = sub i32 %387, %134
  %389 = sub i32 %388, %136
  %390 = sub i32 %389, %138
  %391 = add i32 %390, %139
  %392 = add i32 %391, %140
  %393 = add i32 %392, %143
  %394 = sub i32 %393, %145
  %395 = sub i32 %394, %146
  %396 = sub i32 %395, %148
  %397 = add i32 %396, %39
  %398 = sub i32 %397, %149
  %399 = sub i32 %398, %83
  %400 = sub i32 %399, %151
  %401 = sub i32 %400, %154
  %402 = add i32 %401, %155
  %403 = add i32 %402, %156
  %404 = sub i32 %403, %159
  %405 = add i32 %404, %161
  %406 = add i32 %405, %165
  %407 = add i32 %406, %166
  %408 = sub i32 %407, %167
  %409 = add i32 %408, %168
  %410 = sub i32 %409, %169
  %411 = sub i32 %410, %171
  %412 = sub i32 %411, %172
  %413 = add i32 %412, %173
  %414 = sub i32 %413, %174
  %415 = sub i32 %414, %178
  %416 = add i32 %415, %179
  %417 = sub i32 %416, %181
  %418 = add i32 %417, %182
  %419 = add i32 %418, %183
  %420 = add i32 %419, %185
  %421 = sub i32 %420, %199
  %422 = add i32 %421, %203
  %423 = add i32 %422, %204
  %424 = add i32 %423, %205
  %425 = add i32 %424, %208
  %426 = sub i32 %425, %211
  %427 = add i32 %426, %212
  %428 = add i32 %427, %216
  %429 = add i32 %428, %217
  %430 = add i32 %429, %218
  %431 = add i32 %430, %219
  %432 = add i32 %431, %220
  %433 = sub i32 %432, %163
  %434 = sub i32 %433, %223
  %435 = add i32 %434, %224
  %436 = sub i32 %435, %225
  %437 = add i32 %436, %227
  %438 = sub i32 %437, %232
  %439 = sub i32 %438, %233
  %440 = add i32 %439, %235
  %441 = add i32 %440, %236
  %442 = sub i32 %441, %237
  %443 = sub i32 %442, %238
  %444 = add i32 %443, %241
  %445 = sub i32 %444, %242
  %446 = add i32 %445, %251
  %447 = sub i32 %446, %252
  %448 = sub i32 %447, %254
  %449 = sub i32 %448, %256
  %450 = sub i32 %449, %260
  %451 = add i32 %450, %264
  %452 = add i32 %451, %265
  %453 = sub i32 %452, %268
  %454 = sub i32 %453, %269
  %455 = add i32 %454, %279
  %456 = sub i32 %455, %23
  %457 = sub i32 %456, %36
  %458 = sub i32 %457, %41
  %459 = add i32 %458, %45
  %460 = sub i32 %459, %64
  %461 = sub i32 %460, %76
  %462 = sub i32 %461, %85
  %463 = add i32 %462, %87
  %464 = add i32 %463, %88
  %465 = add i32 %464, %93
  %466 = sub i32 %465, %99
  %467 = add i32 %466, %108
  %468 = add i32 %467, %116
  %469 = sub i32 %468, %122
  %470 = sub i32 %469, %125
  %471 = add i32 %470, %164
  %472 = sub i32 %471, %176
  %473 = sub i32 %472, %187
  %474 = sub i32 %473, %191
  %475 = add i32 %474, %194
  %476 = sub i32 %475, %201
  %477 = add i32 %476, %202
  %478 = add i32 %477, %207
  %479 = sub i32 %478, %210
  %480 = sub i32 %479, %215
  %481 = add i32 %480, %226
  %482 = add i32 %481, %230
  %483 = add i32 %482, %239
  %484 = add i32 %483, %240
  %485 = sub i32 %484, %249
  %486 = add i32 %485, %253
  %487 = sub i32 %486, %258
  %488 = sub i32 %487, %259
  %489 = add i32 %488, %267
  %490 = add i32 %489, %271
  %491 = add i32 %490, %273
  %492 = add i32 %491, %275
  %493 = add i32 %492, %277
  %494 = add i32 %493, %280
  %495 = sub i32 %494, %33
  %496 = sub i32 %495, %57
  %497 = add i32 %496, %287
  %498 = add i32 %497, %290
  %499 = add i32 %498, %284
  %500 = add i32 %499, %310
  %501 = icmp eq i32 %11, %500
  %502 = select i1 %501, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %503 = tail call i32 @puts(i8* nonnull dereferenceable(1) %502)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
