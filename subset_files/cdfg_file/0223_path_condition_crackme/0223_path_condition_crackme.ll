; ModuleID = '../.././c_source_file/0223_path_condition_crackme.c'
source_filename = "../.././c_source_file/0223_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = mul i32 %0, -2
  %8 = and i32 %2, %1
  %9 = xor i32 %8, %0
  %10 = shl i32 %9, 1
  %11 = sub i32 %7, %10
  %12 = xor i32 %5, %4
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %3
  %15 = shl i32 %14, 1
  %16 = sub i32 %11, %15
  %17 = or i32 %2, %0
  %18 = xor i32 %1, %0
  %19 = and i32 %17, %18
  %20 = and i32 %1, %0
  %21 = sub i32 %19, %20
  %22 = xor i32 %20, -1
  %23 = xor i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = and i32 %24, %22
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %0
  %29 = or i32 %1, %0
  %30 = or i32 %26, %0
  %31 = xor i32 %8, -1
  %32 = and i32 %31, %0
  %33 = xor i32 %2, -1
  %34 = or i32 %20, %33
  %35 = xor i32 %1, -1
  %36 = or i32 %35, %0
  %37 = and i32 %23, %36
  %38 = shl i32 %37, 1
  %39 = or i32 %33, %1
  %40 = xor i32 %39, %0
  %41 = or i32 %33, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %1
  %44 = xor i32 %17, %1
  %45 = xor i32 %18, -1
  %46 = and i32 %23, %45
  %47 = shl i32 %46, 1
  %48 = and i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = shl i32 %49, 1
  %51 = and i32 %33, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %0
  %54 = or i32 %18, %2
  %55 = xor i32 %0, -1
  %56 = or i32 %51, %55
  %57 = xor i32 %29, -1
  %58 = xor i32 %57, %2
  %59 = and i32 %49, %1
  %60 = and i32 %35, %2
  %61 = and i32 %60, %0
  %62 = or i32 %35, %2
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %0
  %65 = xor i32 %61, %64
  %66 = and i32 %33, %0
  %67 = xor i32 %66, -1
  %68 = and i32 %18, %67
  %69 = and i32 %24, %1
  %70 = and i32 %26, %29
  %71 = xor i32 %36, -1
  %72 = or i32 %71, %2
  %73 = xor i32 %48, %1
  %74 = and i32 %35, %0
  %75 = xor i32 %74, %31
  %76 = and i32 %8, %0
  %77 = or i32 %2, %1
  %78 = and i32 %77, %55
  %79 = xor i32 %78, -1
  %80 = xor i32 %76, %79
  %81 = or i32 %26, %71
  %82 = or i32 %48, %18
  %83 = xor i32 %26, %0
  %84 = xor i32 %83, -1
  %85 = or i32 %76, %84
  %86 = xor i32 %31, %0
  %87 = and i32 %41, %45
  %88 = or i32 %23, %57
  %89 = or i32 %74, %33
  %90 = xor i32 %77, %20
  %91 = xor i32 %67, %1
  %92 = xor i32 %48, %77
  %93 = shl i32 %92, 1
  %94 = or i32 %27, %55
  %95 = or i32 %42, %35
  %96 = xor i32 %74, -1
  %97 = and i32 %96, %2
  %98 = or i32 %66, %45
  %99 = or i32 %18, %33
  %100 = or i32 %66, %35
  %101 = shl i32 %31, 2
  %102 = or i32 %26, %55
  %103 = or i32 %27, %71
  %104 = shl i32 %103, 1
  %105 = and i32 %26, %55
  %106 = or i32 %76, %105
  %107 = or i32 %74, %27
  %108 = and i32 %77, %0
  %109 = and i32 %33, %22
  %110 = and i32 %17, %1
  %111 = xor i32 %39, -1
  %112 = or i32 %111, %55
  %113 = and i32 %26, %36
  %114 = or i32 %51, %74
  %115 = shl i32 %114, 1
  %116 = and i32 %18, %2
  %117 = or i32 %111, %0
  %118 = shl i32 %45, 1
  %119 = xor i32 %61, %84
  %120 = shl i32 %119, 1
  %121 = or i32 %20, %24
  %122 = or i32 %23, %20
  %123 = xor i32 %17, -1
  %124 = or i32 %123, %1
  %125 = or i32 %23, %74
  %126 = and i32 %23, %96
  %127 = and i32 %23, %18
  %128 = and i32 %60, %55
  %129 = and i32 %62, %0
  %130 = or i32 %128, %129
  %131 = or i32 %48, %57
  %132 = or i32 %8, %0
  %133 = and i32 %17, %45
  %134 = and i32 %52, %0
  %135 = or i32 %48, %71
  %136 = and i32 %22, %2
  %137 = shl i32 %136, 1
  %138 = or i32 %27, %0
  %139 = or i32 %33, %71
  %140 = or i32 %23, %1
  %141 = and i32 %41, %35
  %142 = and i32 %29, %24
  %143 = shl i32 %142, 1
  %144 = or i32 %23, %45
  %145 = xor i32 %66, %39
  %146 = shl i32 %145, 1
  %147 = xor i32 %102, -1
  %148 = or i32 %128, %147
  %149 = and i32 %36, %24
  %150 = xor i32 %49, %1
  %151 = or i32 %48, %35
  %152 = xor i32 %17, %20
  %153 = xor i32 %20, %2
  %154 = or i32 %123, %35
  %155 = shl i32 %154, 1
  %156 = or i32 %52, %55
  %157 = and i32 %52, %55
  %158 = or i32 %26, %57
  %159 = and i32 %67, %45
  %160 = xor i32 %66, %31
  %161 = and i32 %27, %22
  %162 = and i32 %23, %22
  %163 = xor i32 %71, %2
  %164 = shl i32 %78, 1
  %165 = or i32 %45, %2
  %166 = shl i32 %17, 1
  %167 = or i32 %39, %55
  %168 = and i32 %29, %2
  %169 = shl i32 %168, 1
  %170 = or i32 %33, %45
  %171 = add i32 %23, 1
  %172 = and i32 %36, %33
  %173 = and i32 %23, %1
  %174 = or i32 %27, %57
  %175 = shl i32 %174, 2
  %176 = and i32 %24, %45
  %177 = shl i32 %176, 1
  %178 = and i32 %33, %96
  %179 = xor i32 %77, -1
  %180 = and i32 %179, %55
  %181 = and i32 %51, %55
  %182 = and i32 %179, %0
  %183 = and i32 %51, %0
  %184 = and i32 %111, %55
  %185 = mul i32 %184, 9
  %186 = and i32 %8, %55
  %187 = and i32 %111, %0
  %188 = xor i32 %3, -1
  %189 = or i32 %188, %4
  %190 = and i32 %189, %13
  %191 = xor i32 %5, -1
  %192 = and i32 %191, %4
  %193 = or i32 %191, %3
  %194 = xor i32 %192, %193
  %195 = or i32 %5, %4
  %196 = xor i32 %195, %3
  %197 = and i32 %188, %4
  %198 = xor i32 %197, -1
  %199 = xor i32 %5, %3
  %200 = and i32 %199, %198
  %201 = and i32 %5, %4
  %202 = xor i32 %201, -1
  %203 = xor i32 %4, %3
  %204 = xor i32 %203, -1
  %205 = and i32 %202, %204
  %206 = shl i32 %191, 1
  %207 = and i32 %12, %204
  %208 = and i32 %5, %3
  %209 = and i32 %208, %4
  %210 = xor i32 %4, -1
  %211 = and i32 %199, %210
  %212 = xor i32 %211, 2147483647
  %213 = xor i32 %212, %209
  %214 = shl i32 %213, 1
  %215 = or i32 %191, %4
  %216 = and i32 %215, %3
  %217 = xor i32 %192, -1
  %218 = xor i32 %217, %3
  %219 = xor i32 %195, -1
  %220 = shl i32 %219, 1
  %221 = or i32 %203, %5
  %222 = and i32 %4, %3
  %223 = or i32 %222, %13
  %224 = xor i32 %222, %5
  %225 = or i32 %208, %4
  %226 = shl i32 %225, 1
  %227 = and i32 %191, %3
  %228 = or i32 %227, %4
  %229 = xor i32 %189, -1
  %230 = or i32 %191, %229
  %231 = or i32 %222, %219
  %232 = and i32 %203, %191
  %233 = xor i32 %227, -1
  %234 = shl i32 %233, 1
  %235 = or i32 %4, %3
  %236 = xor i32 %235, %5
  %237 = xor i32 %198, %5
  %238 = or i32 %199, %222
  %239 = xor i32 %197, %5
  %240 = xor i32 %193, %222
  %241 = or i32 %12, %188
  %242 = shl i32 %241, 1
  %243 = or i32 %5, %3
  %244 = and i32 %243, %4
  %245 = or i32 %197, %13
  %246 = or i32 %12, %204
  %247 = xor i32 %208, -1
  %248 = or i32 %247, %4
  %249 = and i32 %217, %204
  %250 = or i32 %203, %219
  %251 = or i32 %12, %3
  %252 = xor i32 %199, %4
  %253 = xor i32 %252, %209
  %254 = xor i32 %215, %3
  %255 = or i32 %191, %204
  %256 = xor i32 %222, -1
  %257 = and i32 %12, %256
  %258 = or i32 %13, %229
  %259 = xor i32 %199, -1
  %260 = or i32 %259, %4
  %261 = xor i32 %259, %4
  %262 = and i32 %188, %5
  %263 = and i32 %262, %210
  %264 = or i32 %199, %210
  %265 = xor i32 %263, %264
  %266 = xor i32 %193, -1
  %267 = or i32 %222, %266
  %268 = xor i32 %229, %5
  %269 = or i32 %199, %4
  %270 = and i32 %262, %4
  %271 = or i32 %188, %5
  %272 = xor i32 %271, -1
  %273 = or i32 %272, %4
  %274 = xor i32 %270, %273
  %275 = or i32 %13, %204
  %276 = xor i32 %201, %243
  %277 = or i32 %13, %188
  %278 = or i32 %208, %197
  %279 = and i32 %189, %191
  %280 = and i32 %189, %5
  %281 = and i32 %271, %4
  %282 = xor i32 %281, -1
  %283 = xor i32 %263, %282
  %284 = or i32 %209, %211
  %285 = or i32 %247, %210
  %286 = xor i32 %256, %5
  %287 = or i32 %222, %5
  %288 = and i32 %217, %188
  %289 = shl i32 %288, 2
  %290 = and i32 %202, %188
  %291 = and i32 %12, %188
  %292 = xor i32 %247, %4
  %293 = and i32 %195, %204
  %294 = and i32 %247, %4
  %295 = xor i32 %233, %4
  %296 = shl i32 %295, 1
  %297 = xor i32 %215, -1
  %298 = xor i32 %202, %3
  %299 = or i32 %297, %188
  %300 = and i32 %193, %210
  %301 = and i32 %12, %235
  %302 = or i32 %201, %188
  %303 = or i32 %266, %210
  %304 = and i32 %13, %198
  %305 = and i32 %256, %5
  %306 = shl i32 %201, 1
  %307 = or i32 %203, %13
  %308 = xor i32 %193, %4
  %309 = or i32 %201, %203
  %310 = or i32 %203, %297
  %311 = or i32 %192, %266
  %312 = and i32 %233, %4
  %313 = and i32 %189, %259
  %314 = or i32 %222, %297
  %315 = and i32 %203, %217
  %316 = xor i32 %235, -1
  %317 = or i32 %191, %316
  %318 = and i32 %198, %5
  %319 = or i32 %222, %191
  %320 = and i32 %193, %4
  %321 = or i32 %201, %316
  %322 = and i32 %191, %204
  %323 = shl i32 %322, 1
  %324 = and i32 %215, %203
  %325 = and i32 %12, %3
  %326 = and i32 %247, %210
  %327 = and i32 %217, %3
  %328 = shl i32 %327, 1
  %329 = or i32 %266, %4
  %330 = xor i32 %243, %4
  %331 = or i32 %193, %210
  %332 = or i32 %203, %191
  %333 = xor i32 %4, 2147483647
  %334 = xor i32 %333, %271
  %335 = xor i32 %334, %270
  %336 = shl i32 %335, 1
  %337 = or i32 %199, %229
  %338 = xor i32 %243, -1
  %339 = and i32 %338, %210
  %340 = mul i32 %339, 18
  %341 = and i32 %227, %210
  %342 = and i32 %338, %4
  %343 = and i32 %227, %4
  %344 = mul i32 %343, 6
  %345 = and i32 %266, %210
  %346 = shl i32 %345, 2
  %347 = and i32 %208, %210
  %348 = add i32 %33, %22
  %349 = add i32 %348, %153
  %350 = add i32 %349, %48
  %351 = add i32 %350, %140
  %352 = add i32 %351, %69
  %353 = add i32 %352, %59
  %354 = add i32 %353, %130
  %355 = add i32 %354, %85
  %356 = add i32 %355, %21
  %357 = add i32 %356, %332
  %358 = add i32 %357, %259
  %359 = add i32 %358, %268
  %360 = add i32 %359, %314
  %361 = add i32 %360, %331
  %362 = add i32 %361, %298
  %363 = add i32 %362, %292
  %364 = add i32 %363, %260
  %365 = add i32 %364, %244
  %366 = shl i32 %365, 1
  %367 = add i32 %180, %89
  %368 = add i32 %367, %113
  %369 = add i32 %368, %112
  %370 = sub i32 %369, %285
  %371 = mul i32 %370, 3
  %372 = add i32 %53, %181
  %373 = sub i32 %372, %231
  %374 = mul i32 %373, 5
  %375 = add i32 %347, %341
  %376 = mul i32 %375, -7
  %377 = sub i32 %76, %209
  %378 = mul i32 %377, 11
  %379 = sub i32 %186, %187
  %380 = mul i32 %379, 12
  %381 = sub i32 %55, %1
  %382 = sub i32 %381, %29
  %383 = sub i32 %382, %18
  %384 = sub i32 %383, %34
  %385 = sub i32 %384, %54
  %386 = add i32 %385, %58
  %387 = sub i32 %386, %72
  %388 = sub i32 %387, %97
  %389 = add i32 %388, %99
  %390 = sub i32 %389, %26
  %391 = sub i32 %390, %109
  %392 = add i32 %391, %116
  %393 = sub i32 %392, %118
  %394 = sub i32 %393, %66
  %395 = sub i32 %394, %139
  %396 = add i32 %395, %42
  %397 = sub i32 %396, %163
  %398 = sub i32 %397, %165
  %399 = sub i32 %398, %8
  %400 = add i32 %399, %170
  %401 = add i32 %400, %171
  %402 = sub i32 %401, %172
  %403 = add i32 %402, %178
  %404 = add i32 %403, %188
  %405 = add i32 %404, %25
  %406 = sub i32 %405, %28
  %407 = add i32 %406, %30
  %408 = add i32 %407, %32
  %409 = add i32 %408, %40
  %410 = add i32 %409, %43
  %411 = sub i32 %410, %44
  %412 = sub i32 %411, %50
  %413 = sub i32 %412, %56
  %414 = sub i32 %413, %68
  %415 = sub i32 %414, %70
  %416 = sub i32 %415, %73
  %417 = add i32 %416, %75
  %418 = add i32 %417, %81
  %419 = sub i32 %418, %82
  %420 = sub i32 %419, %86
  %421 = add i32 %420, %87
  %422 = sub i32 %421, %88
  %423 = sub i32 %422, %90
  %424 = sub i32 %423, %91
  %425 = sub i32 %424, %94
  %426 = sub i32 %425, %95
  %427 = sub i32 %426, %98
  %428 = sub i32 %427, %100
  %429 = add i32 %428, %101
  %430 = sub i32 %429, %102
  %431 = sub i32 %430, %107
  %432 = sub i32 %431, %108
  %433 = sub i32 %432, %110
  %434 = sub i32 %433, %117
  %435 = add i32 %434, %121
  %436 = sub i32 %435, %122
  %437 = sub i32 %436, %124
  %438 = sub i32 %437, %125
  %439 = sub i32 %438, %126
  %440 = sub i32 %439, %127
  %441 = add i32 %440, %131
  %442 = add i32 %441, %132
  %443 = add i32 %442, %133
  %444 = sub i32 %443, %134
  %445 = add i32 %444, %135
  %446 = sub i32 %445, %137
  %447 = add i32 %446, %138
  %448 = add i32 %447, %141
  %449 = sub i32 %448, %144
  %450 = sub i32 %449, %149
  %451 = add i32 %450, %150
  %452 = add i32 %451, %151
  %453 = add i32 %452, %152
  %454 = add i32 %453, %156
  %455 = add i32 %454, %157
  %456 = sub i32 %455, %158
  %457 = sub i32 %456, %159
  %458 = sub i32 %457, %160
  %459 = add i32 %458, %83
  %460 = add i32 %459, %161
  %461 = sub i32 %460, %162
  %462 = sub i32 %461, %166
  %463 = sub i32 %462, %167
  %464 = sub i32 %463, %169
  %465 = add i32 %464, %173
  %466 = add i32 %465, %182
  %467 = add i32 %466, %183
  %468 = sub i32 %467, %38
  %469 = sub i32 %468, %47
  %470 = add i32 %469, %65
  %471 = sub i32 %470, %80
  %472 = sub i32 %471, %93
  %473 = sub i32 %472, %104
  %474 = add i32 %473, %106
  %475 = sub i32 %474, %115
  %476 = sub i32 %475, %143
  %477 = sub i32 %476, %146
  %478 = add i32 %477, %148
  %479 = sub i32 %478, %155
  %480 = sub i32 %479, %164
  %481 = sub i32 %480, %175
  %482 = sub i32 %481, %177
  %483 = add i32 %482, %185
  %484 = add i32 %483, %203
  %485 = add i32 %484, %222
  %486 = sub i32 %485, %120
  %487 = sub i32 %486, %206
  %488 = add i32 %487, %221
  %489 = add i32 %488, %224
  %490 = add i32 %489, %230
  %491 = add i32 %490, %232
  %492 = add i32 %491, %236
  %493 = sub i32 %492, %237
  %494 = sub i32 %493, %239
  %495 = add i32 %494, %208
  %496 = sub i32 %495, %255
  %497 = sub i32 %496, %279
  %498 = add i32 %497, %280
  %499 = add i32 %498, %286
  %500 = add i32 %499, %287
  %501 = add i32 %500, %297
  %502 = add i32 %501, %193
  %503 = add i32 %502, %305
  %504 = sub i32 %503, %317
  %505 = sub i32 %504, %318
  %506 = sub i32 %505, %319
  %507 = add i32 %506, %380
  %508 = sub i32 %507, %190
  %509 = add i32 %508, %194
  %510 = sub i32 %509, %196
  %511 = add i32 %510, %200
  %512 = sub i32 %511, %205
  %513 = sub i32 %512, %207
  %514 = add i32 %513, %216
  %515 = add i32 %514, %218
  %516 = sub i32 %515, %220
  %517 = add i32 %516, %223
  %518 = add i32 %517, %228
  %519 = sub i32 %518, %234
  %520 = sub i32 %519, %238
  %521 = sub i32 %520, %240
  %522 = sub i32 %521, %245
  %523 = add i32 %522, %246
  %524 = add i32 %523, %248
  %525 = sub i32 %524, %249
  %526 = add i32 %525, %250
  %527 = add i32 %526, %251
  %528 = sub i32 %527, %254
  %529 = sub i32 %528, %257
  %530 = add i32 %529, %258
  %531 = sub i32 %530, %261
  %532 = add i32 %531, %267
  %533 = sub i32 %532, %269
  %534 = sub i32 %533, %275
  %535 = add i32 %534, %276
  %536 = add i32 %535, %277
  %537 = sub i32 %536, %278
  %538 = sub i32 %537, %290
  %539 = sub i32 %538, %291
  %540 = add i32 %539, %293
  %541 = sub i32 %540, %294
  %542 = add i32 %541, %299
  %543 = add i32 %542, %300
  %544 = add i32 %543, %301
  %545 = add i32 %544, %302
  %546 = add i32 %545, %303
  %547 = sub i32 %546, %304
  %548 = sub i32 %547, %306
  %549 = add i32 %548, %307
  %550 = sub i32 %549, %308
  %551 = add i32 %550, %309
  %552 = sub i32 %551, %310
  %553 = add i32 %552, %311
  %554 = add i32 %553, %312
  %555 = sub i32 %554, %313
  %556 = add i32 %555, %315
  %557 = sub i32 %556, %320
  %558 = sub i32 %557, %321
  %559 = sub i32 %558, %323
  %560 = add i32 %559, %324
  %561 = sub i32 %560, %325
  %562 = sub i32 %561, %326
  %563 = sub i32 %562, %329
  %564 = add i32 %563, %330
  %565 = add i32 %564, %337
  %566 = sub i32 %565, %342
  %567 = sub i32 %566, %226
  %568 = sub i32 %567, %242
  %569 = add i32 %568, %253
  %570 = sub i32 %569, %265
  %571 = add i32 %570, %274
  %572 = sub i32 %571, %283
  %573 = add i32 %572, %284
  %574 = sub i32 %573, %289
  %575 = sub i32 %574, %296
  %576 = sub i32 %575, %328
  %577 = add i32 %576, %340
  %578 = add i32 %577, %344
  %579 = sub i32 %578, %346
  %580 = add i32 %579, %376
  %581 = add i32 %580, %378
  %582 = sub i32 %581, %214
  %583 = sub i32 %582, %336
  %584 = add i32 %583, %374
  %585 = add i32 %584, %371
  %586 = add i32 %585, %366
  %587 = icmp eq i32 %16, %586
  %588 = select i1 %587, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %589 = tail call i32 @puts(i8* nonnull dereferenceable(1) %588)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
