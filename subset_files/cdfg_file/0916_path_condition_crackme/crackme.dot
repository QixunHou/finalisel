digraph "DFG for'crackme' function" {
	Node0xa405c0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xa40c70[shape=record, label="  %4 = sub i32 0, %3"];
	Node0xa40d30[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xa40da0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0xa40e40[shape=record, label="  %7 = add i32 %1, 1"];
	Node0xa40eb0[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0xa40f20[shape=record, label="  %9 = and i32 %6, %0"];
	Node0xa40f90[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xa41000[shape=record, label="  %11 = xor i32 %5, -1"];
	Node0xa410a0[shape=record, label="  %12 = mul i32 %11, -5"];
	Node0xa41140[shape=record, label="  %13 = xor i32 %0, 1073741823"];
	Node0xa411b0[shape=record, label="  %14 = and i32 %13, %1"];
	Node0xa41250[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0xa412c0[shape=record, label="  %16 = shl i32 %9, 1"];
	Node0xa41330[shape=record, label="  %17 = and i32 %1, %0"];
	Node0xa413a0[shape=record, label="  %18 = sub i32 %10, %1"];
	Node0xa41410[shape=record, label="  %19 = sub i32 %18, %17"];
	Node0xa414b0[shape=record, label="  %20 = mul i32 %19, 3"];
	Node0xa41550[shape=record, label="  %21 = sub i32 -2, %0"];
	Node0xa415c0[shape=record, label="  %22 = add i32 %21, %7"];
	Node0xa41630[shape=record, label="  %23 = add i32 %22, %5"];
	Node0xa416a0[shape=record, label="  %24 = add i32 %23, %8"];
	Node0xa41710[shape=record, label="  %25 = add i32 %24, %12"];
	Node0xa41780[shape=record, label="  %26 = sub i32 %25, %15"];
	Node0xa417f0[shape=record, label="  %27 = sub i32 %26, %16"];
	Node0xa41860[shape=record, label="  %28 = add i32 %27, %20"];
	Node0xa418d0[shape=record, label="  %29 = icmp eq i32 %28, %4"];
	Node0x9e1268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa41d70[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0xa41dc0[shape=record, label="  ret void"];
	Node0xa405c0 -> Node0xa40c70;
	Node0xa40c70 -> Node0xa40d30;
	Node0xa40d30 -> Node0xa40da0;
	Node0xa40da0 -> Node0xa40e40;
	Node0xa40e40 -> Node0xa40eb0;
	Node0xa40eb0 -> Node0xa40f20;
	Node0xa40f20 -> Node0xa40f90;
	Node0xa40f90 -> Node0xa41000;
	Node0xa41000 -> Node0xa410a0;
	Node0xa410a0 -> Node0xa41140;
	Node0xa41140 -> Node0xa411b0;
	Node0xa411b0 -> Node0xa41250;
	Node0xa41250 -> Node0xa412c0;
	Node0xa412c0 -> Node0xa41330;
	Node0xa41330 -> Node0xa413a0;
	Node0xa413a0 -> Node0xa41410;
	Node0xa41410 -> Node0xa414b0;
	Node0xa414b0 -> Node0xa41550;
	Node0xa41550 -> Node0xa415c0;
	Node0xa415c0 -> Node0xa41630;
	Node0xa41630 -> Node0xa416a0;
	Node0xa416a0 -> Node0xa41710;
	Node0xa41710 -> Node0xa41780;
	Node0xa41780 -> Node0xa417f0;
	Node0xa417f0 -> Node0xa41860;
	Node0xa41860 -> Node0xa418d0;
	Node0xa418d0 -> Node0x9e1268;
	Node0x9e1268 -> Node0xa41d70;
	Node0xa41d70 -> Node0xa41dc0;
edge [color=red]
	Node0xa405c0 -> Node0xa40c70;
	Node0xa405c0 -> Node0xa40eb0;
	Node0xa40da0 -> Node0xa40f20;
	Node0xa40f20 -> Node0xa40f90;
	Node0xa40d30 -> Node0xa41000;
	Node0xa41000 -> Node0xa410a0;
	Node0xa41140 -> Node0xa411b0;
	Node0xa411b0 -> Node0xa41250;
	Node0xa40f20 -> Node0xa412c0;
	Node0xa40f90 -> Node0xa413a0;
	Node0xa413a0 -> Node0xa41410;
	Node0xa41330 -> Node0xa41410;
	Node0xa41410 -> Node0xa414b0;
	Node0xa41550 -> Node0xa415c0;
	Node0xa40e40 -> Node0xa415c0;
	Node0xa415c0 -> Node0xa41630;
	Node0xa40d30 -> Node0xa41630;
	Node0xa41630 -> Node0xa416a0;
	Node0xa40eb0 -> Node0xa416a0;
	Node0xa416a0 -> Node0xa41710;
	Node0xa410a0 -> Node0xa41710;
	Node0xa41710 -> Node0xa41780;
	Node0xa41250 -> Node0xa41780;
	Node0xa41780 -> Node0xa417f0;
	Node0xa412c0 -> Node0xa417f0;
	Node0xa417f0 -> Node0xa41860;
	Node0xa414b0 -> Node0xa41860;
	Node0xa41860 -> Node0xa418d0;
	Node0xa40c70 -> Node0xa418d0;
	Node0xa418d0 -> Node0x9e1268;
	Node0x9e1268 -> Node0xa41d70;
}
