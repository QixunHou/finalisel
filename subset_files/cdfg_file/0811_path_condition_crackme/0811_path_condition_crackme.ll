; ModuleID = '../.././c_source_file/0811_path_condition_crackme.c'
source_filename = "../.././c_source_file/0811_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %6, %1
  %8 = xor i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = shl i32 %9, 1
  %11 = sub i32 %10, %7
  %12 = and i32 %4, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %0
  %15 = or i32 %1, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %2, %1
  %18 = or i32 %17, %16
  %19 = and i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %20, %1
  %22 = or i32 %17, %0
  %23 = and i32 %2, %1
  %24 = and i32 %23, %0
  %25 = or i32 %2, %1
  %26 = xor i32 %25, %0
  %27 = or i32 %24, %26
  %28 = xor i32 %1, -1
  %29 = and i32 %28, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %17, -1
  %32 = and i32 %31, %30
  %33 = xor i32 %15, %2
  %34 = or i32 %28, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %8, %35
  %37 = xor i32 %34, %2
  %38 = or i32 %12, %0
  %39 = xor i32 %23, %0
  %40 = and i32 %28, %2
  %41 = and i32 %40, %0
  %42 = xor i32 %0, -1
  %43 = or i32 %28, %2
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %0
  %46 = xor i32 %41, %45
  %47 = or i32 %4, %0
  %48 = and i32 %47, %1
  %49 = and i32 %1, %0
  %50 = xor i32 %25, %49
  %51 = and i32 %40, %42
  %52 = and i32 %43, %0
  %53 = or i32 %51, %52
  %54 = or i32 %25, %0
  %55 = or i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = xor i32 %1, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %56, %58
  %60 = and i32 %25, %0
  %61 = or i32 %8, %57
  %62 = or i32 %29, %4
  %63 = xor i32 %55, %1
  %64 = and i32 %47, %58
  %65 = and i32 %25, %42
  %66 = xor i32 %65, 2147483647
  %67 = xor i32 %66, %24
  %68 = and i32 %34, %4
  %69 = or i32 %4, %1
  %70 = and i32 %69, %0
  %71 = shl i32 %70, 1
  %72 = or i32 %49, %9
  %73 = or i32 %23, %42
  %74 = and i32 %23, %42
  %75 = or i32 %74, %60
  %76 = shl i32 %75, 1
  %77 = xor i32 %47, -1
  %78 = or i32 %77, %28
  %79 = shl i32 %19, 1
  %80 = or i32 %58, %2
  %81 = shl i32 %80, 1
  %82 = or i32 %29, %31
  %83 = shl i32 %82, 1
  %84 = or i32 %17, %42
  %85 = xor i32 %51, %84
  %86 = shl i32 %85, 2
  %87 = xor i32 %19, %25
  %88 = or i32 %31, %35
  %89 = xor i32 %25, -1
  %90 = or i32 %89, %0
  %91 = xor i32 %23, -1
  %92 = or i32 %91, %0
  %93 = shl i32 %92, 1
  %94 = xor i32 %6, %1
  %95 = xor i32 %13, %0
  %96 = or i32 %8, %16
  %97 = or i32 %24, %65
  %98 = and i32 %17, %42
  %99 = xor i32 %5, %69
  %100 = and i32 %34, %31
  %101 = shl i32 %91, 1
  %102 = xor i32 %19, %15
  %103 = or i32 %69, %0
  %104 = shl i32 %2, 1
  %105 = shl i32 %31, 1
  %106 = add i32 %25, 1
  %107 = or i32 %23, %29
  %108 = or i32 %19, %1
  %109 = shl i32 %108, 1
  %110 = xor i32 %74, -1
  %111 = xor i32 %60, %110
  %112 = or i32 %4, %35
  %113 = or i32 %19, %28
  %114 = or i32 %8, %29
  %115 = and i32 %9, %58
  %116 = or i32 %8, %49
  %117 = add i32 %15, 1
  %118 = xor i32 %91, %0
  %119 = and i32 %34, %9
  %120 = shl i32 %119, 1
  %121 = or i32 %4, %16
  %122 = and i32 %8, %57
  %123 = and i32 %91, %0
  %124 = or i32 %9, %16
  %125 = xor i32 %49, %2
  %126 = xor i32 %52, 2147483647
  %127 = xor i32 %126, %51
  %128 = and i32 %57, %2
  %129 = xor i32 %55, %49
  %130 = and i32 %20, %28
  %131 = and i32 %58, %2
  %132 = and i32 %8, %30
  %133 = shl i32 %4, 1
  %134 = and i32 %55, %1
  %135 = xor i32 %43, %0
  %136 = xor i32 %135, 2147483647
  %137 = xor i32 %136, %41
  %138 = or i32 %31, %0
  %139 = and i32 %31, %0
  %140 = or i32 %19, %35
  %141 = and i32 %17, %30
  %142 = xor i32 %77, %1
  %143 = add i32 %55, 1
  %144 = xor i32 %24, -1
  %145 = xor i32 %98, %144
  %146 = or i32 %57, %56
  %147 = and i32 %17, %0
  %148 = xor i32 %147, %110
  %149 = or i32 %89, %42
  %150 = or i32 %31, %42
  %151 = xor i32 %30, %2
  %152 = and i32 %8, %15
  %153 = or i32 %41, %135
  %154 = or i32 %8, %28
  %155 = and i32 %55, %58
  %156 = or i32 %49, %77
  %157 = or i32 %19, %12
  %158 = or i32 %57, %2
  %159 = or i32 %57, %4
  %160 = and i32 %91, %42
  %161 = xor i32 %29, %2
  %162 = or i32 %19, %58
  %163 = and i32 %8, %1
  %164 = or i32 %69, %42
  %165 = shl i32 %164, 1
  %166 = xor i32 %35, %2
  %167 = xor i32 %69, -1
  %168 = or i32 %5, %167
  %169 = shl i32 %42, 1
  %170 = and i32 %47, %57
  %171 = xor i32 %49, -1
  %172 = and i32 %171, %2
  %173 = xor i32 %19, %13
  %174 = and i32 %55, %28
  %175 = or i32 %77, %1
  %176 = and i32 %31, %42
  %177 = xor i32 %5, %91
  %178 = shl i32 %177, 2
  %179 = or i32 %49, %4
  %180 = or i32 %25, %42
  %181 = and i32 %20, %1
  %182 = or i32 %74, %147
  %183 = and i32 %8, %171
  %184 = or i32 %9, %58
  %185 = or i32 %17, %35
  %186 = xor i32 %17, %0
  %187 = or i32 %49, %89
  %188 = or i32 %77, %58
  %189 = and i32 %8, %34
  %190 = or i32 %5, %23
  %191 = and i32 %31, %171
  %192 = or i32 %16, %2
  %193 = shl i32 %192, 1
  %194 = or i32 %12, %29
  %195 = and i32 %4, %171
  %196 = xor i32 %47, %1
  %197 = shl i32 %196, 1
  %198 = or i32 %13, %42
  %199 = or i32 %9, %28
  %200 = and i32 %17, %15
  %201 = and i32 %69, %42
  %202 = xor i32 %47, %49
  %203 = and i32 %15, %31
  %204 = shl i32 %203, 1
  %205 = and i32 %55, %57
  %206 = shl i32 %205, 1
  %207 = and i32 %15, %9
  %208 = xor i32 %19, %1
  %209 = xor i32 %171, %2
  %210 = and i32 %15, %2
  %211 = or i32 %57, %9
  %212 = and i32 %30, %2
  %213 = or i32 %167, %42
  %214 = and i32 %6, %58
  %215 = or i32 %19, %57
  %216 = xor i32 %26, %144
  %217 = and i32 %9, %171
  %218 = shl i32 %217, 1
  %219 = and i32 %57, %6
  %220 = or i32 %49, %167
  %221 = xor i32 %29, %91
  %222 = xor i32 %186, -1
  %223 = or i32 %24, %222
  %224 = xor i32 %5, %1
  %225 = shl i32 %224, 1
  %226 = and i32 %47, %28
  %227 = xor i32 %167, %0
  %228 = or i32 %17, %29
  %229 = shl i32 %228, 1
  %230 = xor i32 %69, %0
  %231 = xor i32 %16, %2
  %232 = or i32 %5, %28
  %233 = and i32 %17, %171
  %234 = or i32 %57, %77
  %235 = and i32 %8, %58
  %236 = and i32 %8, %28
  %237 = or i32 %49, %56
  %238 = or i32 %56, %28
  %239 = or i32 %56, %1
  %240 = and i32 %57, %4
  %241 = or i32 %5, %1
  %242 = xor i32 %89, %0
  %243 = xor i32 %12, %0
  %244 = xor i32 %84, -1
  %245 = or i32 %51, %244
  %246 = or i32 %41, %186
  %247 = and i32 %34, %2
  %248 = shl i32 %84, 1
  %249 = and i32 %89, %42
  %250 = and i32 %12, %42
  %251 = and i32 %89, %0
  %252 = and i32 %12, %0
  %253 = mul i32 %252, 11
  %254 = and i32 %167, %42
  %255 = mul i32 %254, 14
  %256 = shl i32 %74, 1
  %257 = and i32 %167, %0
  %258 = mul i32 %257, 28
  %259 = add i32 %131, %30
  %260 = add i32 %259, %37
  %261 = add i32 %260, %12
  %262 = add i32 %261, %173
  %263 = add i32 %262, %170
  %264 = add i32 %263, %138
  %265 = add i32 %264, %90
  %266 = add i32 %265, %127
  %267 = add i32 %266, %137
  %268 = add i32 %267, %67
  %269 = shl i32 %268, 1
  %270 = add i32 %179, %171
  %271 = add i32 %270, %24
  %272 = sub i32 %271, %147
  %273 = add i32 %272, %14
  %274 = sub i32 %273, %246
  %275 = mul i32 %274, 5
  %276 = add i32 %249, %239
  %277 = add i32 %276, %122
  %278 = add i32 %277, %73
  %279 = shl i32 %278, 2
  %280 = sub i32 %250, %251
  %281 = mul i32 %280, 6
  %282 = add i32 %49, -1
  %283 = add i32 %282, %62
  %284 = sub i32 %283, %95
  %285 = sub i32 %284, %216
  %286 = mul i32 %285, 3
  %287 = add i32 %1, %0
  %288 = add i32 %287, %169
  %289 = sub i32 %117, %288
  %290 = add i32 %289, 1
  %291 = sub i32 %290, %33
  %292 = sub i32 %291, %17
  %293 = add i32 %292, %25
  %294 = add i32 %293, %5
  %295 = sub i32 %294, %68
  %296 = add i32 %295, %13
  %297 = sub i32 %296, %104
  %298 = add i32 %297, %106
  %299 = add i32 %298, %112
  %300 = sub i32 %299, %23
  %301 = sub i32 %300, %121
  %302 = add i32 %301, %125
  %303 = add i32 %302, %128
  %304 = sub i32 %303, %133
  %305 = add i32 %304, %143
  %306 = sub i32 %305, %151
  %307 = sub i32 %306, %55
  %308 = add i32 %307, %20
  %309 = sub i32 %308, %158
  %310 = add i32 %309, %159
  %311 = sub i32 %310, %161
  %312 = add i32 %311, %166
  %313 = add i32 %312, %167
  %314 = sub i32 %313, %172
  %315 = add i32 %314, %195
  %316 = add i32 %315, %8
  %317 = add i32 %316, %209
  %318 = add i32 %317, %210
  %319 = sub i32 %318, %212
  %320 = add i32 %319, %231
  %321 = add i32 %320, %240
  %322 = sub i32 %321, %69
  %323 = add i32 %322, %247
  %324 = sub i32 %323, %18
  %325 = add i32 %324, %21
  %326 = add i32 %325, %22
  %327 = sub i32 %326, %32
  %328 = sub i32 %327, %36
  %329 = add i32 %328, %26
  %330 = sub i32 %329, %38
  %331 = sub i32 %330, %39
  %332 = sub i32 %331, %48
  %333 = sub i32 %332, %50
  %334 = sub i32 %333, %54
  %335 = sub i32 %334, %59
  %336 = sub i32 %335, %60
  %337 = add i32 %336, %61
  %338 = sub i32 %337, %63
  %339 = add i32 %338, %64
  %340 = sub i32 %339, %72
  %341 = add i32 %340, %78
  %342 = sub i32 %341, %79
  %343 = sub i32 %342, %81
  %344 = sub i32 %343, %87
  %345 = add i32 %344, %88
  %346 = add i32 %345, %94
  %347 = sub i32 %346, %96
  %348 = sub i32 %347, %98
  %349 = sub i32 %348, %99
  %350 = sub i32 %349, %100
  %351 = sub i32 %350, %101
  %352 = add i32 %351, %102
  %353 = sub i32 %352, %103
  %354 = sub i32 %353, %105
  %355 = sub i32 %354, %107
  %356 = add i32 %355, %113
  %357 = add i32 %356, %114
  %358 = add i32 %357, %115
  %359 = add i32 %358, %116
  %360 = sub i32 %359, %118
  %361 = add i32 %360, %123
  %362 = add i32 %361, %124
  %363 = add i32 %362, %129
  %364 = add i32 %363, %130
  %365 = add i32 %364, %132
  %366 = add i32 %365, %134
  %367 = sub i32 %366, %139
  %368 = add i32 %367, %140
  %369 = add i32 %368, %141
  %370 = sub i32 %369, %142
  %371 = add i32 %370, %146
  %372 = sub i32 %371, %149
  %373 = add i32 %372, %150
  %374 = sub i32 %373, %152
  %375 = sub i32 %374, %154
  %376 = sub i32 %375, %155
  %377 = sub i32 %376, %156
  %378 = sub i32 %377, %157
  %379 = sub i32 %378, %160
  %380 = sub i32 %379, %162
  %381 = add i32 %380, %163
  %382 = sub i32 %381, %168
  %383 = add i32 %382, %174
  %384 = add i32 %383, %175
  %385 = sub i32 %384, %176
  %386 = add i32 %385, %180
  %387 = sub i32 %386, %181
  %388 = sub i32 %387, %183
  %389 = add i32 %388, %184
  %390 = sub i32 %389, %185
  %391 = add i32 %390, %186
  %392 = sub i32 %391, %187
  %393 = add i32 %392, %188
  %394 = sub i32 %393, %189
  %395 = sub i32 %394, %190
  %396 = add i32 %395, %191
  %397 = sub i32 %396, %193
  %398 = sub i32 %397, %194
  %399 = add i32 %398, %198
  %400 = sub i32 %399, %199
  %401 = sub i32 %400, %200
  %402 = add i32 %401, %201
  %403 = add i32 %402, %202
  %404 = sub i32 %403, %207
  %405 = add i32 %404, %208
  %406 = add i32 %405, %211
  %407 = add i32 %406, %213
  %408 = sub i32 %407, %214
  %409 = sub i32 %408, %215
  %410 = add i32 %409, %219
  %411 = add i32 %410, %220
  %412 = sub i32 %411, %221
  %413 = add i32 %412, %226
  %414 = add i32 %413, %227
  %415 = sub i32 %414, %230
  %416 = sub i32 %415, %232
  %417 = add i32 %416, %233
  %418 = sub i32 %417, %234
  %419 = add i32 %418, %235
  %420 = sub i32 %419, %236
  %421 = add i32 %420, %237
  %422 = sub i32 %421, %238
  %423 = add i32 %422, %241
  %424 = sub i32 %423, %242
  %425 = sub i32 %424, %243
  %426 = sub i32 %425, %27
  %427 = add i32 %426, %46
  %428 = sub i32 %427, %53
  %429 = sub i32 %428, %71
  %430 = sub i32 %429, %83
  %431 = sub i32 %430, %93
  %432 = add i32 %431, %97
  %433 = sub i32 %432, %109
  %434 = add i32 %433, %111
  %435 = sub i32 %434, %120
  %436 = sub i32 %435, %145
  %437 = sub i32 %436, %148
  %438 = add i32 %437, %153
  %439 = sub i32 %438, %165
  %440 = sub i32 %439, %178
  %441 = add i32 %440, %182
  %442 = sub i32 %441, %197
  %443 = sub i32 %442, %204
  %444 = sub i32 %443, %206
  %445 = sub i32 %444, %218
  %446 = add i32 %445, %223
  %447 = sub i32 %446, %225
  %448 = sub i32 %447, %229
  %449 = add i32 %448, %245
  %450 = sub i32 %449, %248
  %451 = add i32 %450, %253
  %452 = add i32 %451, %255
  %453 = sub i32 %452, %256
  %454 = add i32 %453, %258
  %455 = sub i32 %454, %76
  %456 = sub i32 %455, %86
  %457 = add i32 %456, %281
  %458 = add i32 %457, %279
  %459 = add i32 %458, %286
  %460 = add i32 %459, %275
  %461 = add i32 %460, %269
  %462 = icmp eq i32 %11, %461
  %463 = select i1 %462, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %464 = tail call i32 @puts(i8* nonnull dereferenceable(1) %463)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
