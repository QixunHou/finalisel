digraph "DFG for'crackme' function" {
	Node0x67eb20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x67eb90[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x67ec50[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x67ecf0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x67ed60[shape=record, label="  %7 = sub i32 %3, %6"];
	Node0x67edd0[shape=record, label="  %8 = or i32 %3, %0"];
	Node0x67ee40[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x67eeb0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x67ef20[shape=record, label="  %11 = xor i32 %0, -1"];
	Node0x67ef90[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x67f000[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x67f070[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x67f0e0[shape=record, label="  %15 = xor i32 %8, -1"];
	Node0x67f180[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x67f1f0[shape=record, label="  %17 = sub i32 %11, %8"];
	Node0x67f260[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x67f2d0[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x67f340[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x67f3b0[shape=record, label="  %21 = sub i32 %20, %4"];
	Node0x67f420[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x67f490[shape=record, label="  %23 = sub i32 %22, %14"];
	Node0x67f500[shape=record, label="  %24 = icmp eq i32 %7, %23"];
	Node0x61f268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x67f9a0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x67f9f0[shape=record, label="  ret void"];
	Node0x67eb20 -> Node0x67eb90;
	Node0x67eb90 -> Node0x67ec50;
	Node0x67ec50 -> Node0x67ecf0;
	Node0x67ecf0 -> Node0x67ed60;
	Node0x67ed60 -> Node0x67edd0;
	Node0x67edd0 -> Node0x67ee40;
	Node0x67ee40 -> Node0x67eeb0;
	Node0x67eeb0 -> Node0x67ef20;
	Node0x67ef20 -> Node0x67ef90;
	Node0x67ef90 -> Node0x67f000;
	Node0x67f000 -> Node0x67f070;
	Node0x67f070 -> Node0x67f0e0;
	Node0x67f0e0 -> Node0x67f180;
	Node0x67f180 -> Node0x67f1f0;
	Node0x67f1f0 -> Node0x67f260;
	Node0x67f260 -> Node0x67f2d0;
	Node0x67f2d0 -> Node0x67f340;
	Node0x67f340 -> Node0x67f3b0;
	Node0x67f3b0 -> Node0x67f420;
	Node0x67f420 -> Node0x67f490;
	Node0x67f490 -> Node0x67f500;
	Node0x67f500 -> Node0x61f268;
	Node0x61f268 -> Node0x67f9a0;
	Node0x67f9a0 -> Node0x67f9f0;
edge [color=red]
	Node0x67eb90 -> Node0x67ec50;
	Node0x67ec50 -> Node0x67ecf0;
	Node0x67eb20 -> Node0x67ed60;
	Node0x67ecf0 -> Node0x67ed60;
	Node0x67eb20 -> Node0x67edd0;
	Node0x67ee40 -> Node0x67eeb0;
	Node0x67ef90 -> Node0x67f000;
	Node0x67f000 -> Node0x67f070;
	Node0x67edd0 -> Node0x67f0e0;
	Node0x67f0e0 -> Node0x67f180;
	Node0x67ef20 -> Node0x67f1f0;
	Node0x67edd0 -> Node0x67f1f0;
	Node0x67f1f0 -> Node0x67f260;
	Node0x67eeb0 -> Node0x67f260;
	Node0x67f260 -> Node0x67f2d0;
	Node0x67ee40 -> Node0x67f2d0;
	Node0x67f2d0 -> Node0x67f340;
	Node0x67ef90 -> Node0x67f340;
	Node0x67f340 -> Node0x67f3b0;
	Node0x67eb90 -> Node0x67f3b0;
	Node0x67f3b0 -> Node0x67f420;
	Node0x67f180 -> Node0x67f420;
	Node0x67f420 -> Node0x67f490;
	Node0x67f070 -> Node0x67f490;
	Node0x67ed60 -> Node0x67f500;
	Node0x67f490 -> Node0x67f500;
	Node0x67f500 -> Node0x61f268;
	Node0x61f268 -> Node0x67f9a0;
}
