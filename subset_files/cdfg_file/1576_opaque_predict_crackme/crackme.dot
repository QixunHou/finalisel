digraph "DFG for'crackme' function" {
	Node0x1993550[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1993c00[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x1993cc0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x1993d30[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1993da0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1993e10[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x1993eb0[shape=record, label="  %9 = shl i32 %3, 1"];
	Node0x1993f50[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1993fc0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1994060[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0x1994100[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x19941a0[shape=record, label="  %14 = xor i32 %0, 1073741823"];
	Node0x1994210[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x1994280[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x1994320[shape=record, label="  %17 = mul i32 %0, -5"];
	Node0x1994390[shape=record, label="  %18 = add i32 %0, -1"];
	Node0x1994400[shape=record, label="  %19 = add i32 %18, %1"];
	Node0x1994470[shape=record, label="  %20 = add i32 %19, %6"];
	Node0x19944e0[shape=record, label="  %21 = add i32 %20, %8"];
	Node0x1994550[shape=record, label="  %22 = sub i32 %21, %16"];
	Node0x19945c0[shape=record, label="  %23 = add i32 %22, %10"];
	Node0x1994630[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0x19946a0[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x1994710[shape=record, label="  %26 = icmp eq i32 %25, %4"];
	Node0x1934268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1994bb0[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1994c00[shape=record, label="  ret void"];
	Node0x1993550 -> Node0x1993c00;
	Node0x1993c00 -> Node0x1993cc0;
	Node0x1993cc0 -> Node0x1993d30;
	Node0x1993d30 -> Node0x1993da0;
	Node0x1993da0 -> Node0x1993e10;
	Node0x1993e10 -> Node0x1993eb0;
	Node0x1993eb0 -> Node0x1993f50;
	Node0x1993f50 -> Node0x1993fc0;
	Node0x1993fc0 -> Node0x1994060;
	Node0x1994060 -> Node0x1994100;
	Node0x1994100 -> Node0x19941a0;
	Node0x19941a0 -> Node0x1994210;
	Node0x1994210 -> Node0x1994280;
	Node0x1994280 -> Node0x1994320;
	Node0x1994320 -> Node0x1994390;
	Node0x1994390 -> Node0x1994400;
	Node0x1994400 -> Node0x1994470;
	Node0x1994470 -> Node0x19944e0;
	Node0x19944e0 -> Node0x1994550;
	Node0x1994550 -> Node0x19945c0;
	Node0x19945c0 -> Node0x1994630;
	Node0x1994630 -> Node0x19946a0;
	Node0x19946a0 -> Node0x1994710;
	Node0x1994710 -> Node0x1934268;
	Node0x1934268 -> Node0x1994bb0;
	Node0x1994bb0 -> Node0x1994c00;
edge [color=red]
	Node0x1993550 -> Node0x1993c00;
	Node0x1993cc0 -> Node0x1993d30;
	Node0x1993da0 -> Node0x1993e10;
	Node0x1993550 -> Node0x1993eb0;
	Node0x1993eb0 -> Node0x1993f50;
	Node0x1993fc0 -> Node0x1994060;
	Node0x1994060 -> Node0x1994100;
	Node0x19941a0 -> Node0x1994210;
	Node0x1994210 -> Node0x1994280;
	Node0x1994390 -> Node0x1994400;
	Node0x1994400 -> Node0x1994470;
	Node0x1993d30 -> Node0x1994470;
	Node0x1994470 -> Node0x19944e0;
	Node0x1993e10 -> Node0x19944e0;
	Node0x19944e0 -> Node0x1994550;
	Node0x1994280 -> Node0x1994550;
	Node0x1994550 -> Node0x19945c0;
	Node0x1993f50 -> Node0x19945c0;
	Node0x19945c0 -> Node0x1994630;
	Node0x1994100 -> Node0x1994630;
	Node0x1994630 -> Node0x19946a0;
	Node0x1994320 -> Node0x19946a0;
	Node0x19946a0 -> Node0x1994710;
	Node0x1993c00 -> Node0x1994710;
	Node0x1994710 -> Node0x1934268;
	Node0x1934268 -> Node0x1994bb0;
}
