digraph "DFG for'crackme' function" {
	Node0xb13060[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0xb13100[shape=record, label="  %6 = add i32 %2, 1"];
	Node0xb13170[shape=record, label="  %7 = or i32 %5, %1"];
	Node0xb131e0[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0xb13250[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0xb132c0[shape=record, label="  %10 = or i32 %9, %3"];
	Node0xb13330[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0xb133a0[shape=record, label="  %12 = sub i32 %8, %11"];
	Node0xb13410[shape=record, label="  %13 = and i32 %2, %1"];
	Node0xb13480[shape=record, label="  %14 = shl i32 %1, 1"];
	Node0xb13520[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xb13590[shape=record, label="  %16 = or i32 %2, %1"];
	Node0xb13600[shape=record, label="  %17 = and i32 %5, %1"];
	Node0xb13670[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0xb136e0[shape=record, label="  %19 = xor i32 %16, -1"];
	Node0xb13780[shape=record, label="  %20 = mul i32 %19, -6"];
	Node0xb137f0[shape=record, label="  %21 = xor i32 %7, -1"];
	Node0xb13890[shape=record, label="  %22 = mul i32 %21, -3"];
	Node0xb13900[shape=record, label="  %23 = shl i32 %17, 1"];
	Node0xb13970[shape=record, label="  %24 = xor i32 %3, %0"];
	Node0xb139e0[shape=record, label="  %25 = and i32 %9, %3"];
	Node0xb13a50[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0xb13ac0[shape=record, label="  %27 = and i32 %3, %0"];
	Node0xb13b30[shape=record, label="  %28 = sub i32 %15, %13"];
	Node0xb13ba0[shape=record, label="  %29 = sub i32 %28, %16"];
	Node0xb13c10[shape=record, label="  %30 = add i32 %29, %18"];
	Node0xb13c80[shape=record, label="  %31 = sub i32 %30, %13"];
	Node0xb13cf0[shape=record, label="  %32 = add i32 %31, %3"];
	Node0xb13f70[shape=record, label="  %33 = add i32 %32, %20"];
	Node0xb13fe0[shape=record, label="  %34 = add i32 %33, %22"];
	Node0xb14050[shape=record, label="  %35 = sub i32 %34, %23"];
	Node0xb140c0[shape=record, label="  %36 = add i32 %35, %24"];
	Node0xb14130[shape=record, label="  %37 = sub i32 %36, %10"];
	Node0xb141a0[shape=record, label="  %38 = sub i32 %37, %27"];
	Node0xb14210[shape=record, label="  %39 = sub i32 %38, %26"];
	Node0xb14280[shape=record, label="  %40 = icmp eq i32 %12, %39"];
	Node0xab3268[shape=record, label="  %41 = select i1 %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb14720[shape=record, label="  %42 = tail call i32 @puts(i8* nonnull dereferenceable(1) %41)"];
	Node0xb14770[shape=record, label="  ret void"];
	Node0xb13060 -> Node0xb13100;
	Node0xb13100 -> Node0xb13170;
	Node0xb13170 -> Node0xb131e0;
	Node0xb131e0 -> Node0xb13250;
	Node0xb13250 -> Node0xb132c0;
	Node0xb132c0 -> Node0xb13330;
	Node0xb13330 -> Node0xb133a0;
	Node0xb133a0 -> Node0xb13410;
	Node0xb13410 -> Node0xb13480;
	Node0xb13480 -> Node0xb13520;
	Node0xb13520 -> Node0xb13590;
	Node0xb13590 -> Node0xb13600;
	Node0xb13600 -> Node0xb13670;
	Node0xb13670 -> Node0xb136e0;
	Node0xb136e0 -> Node0xb13780;
	Node0xb13780 -> Node0xb137f0;
	Node0xb137f0 -> Node0xb13890;
	Node0xb13890 -> Node0xb13900;
	Node0xb13900 -> Node0xb13970;
	Node0xb13970 -> Node0xb139e0;
	Node0xb139e0 -> Node0xb13a50;
	Node0xb13a50 -> Node0xb13ac0;
	Node0xb13ac0 -> Node0xb13b30;
	Node0xb13b30 -> Node0xb13ba0;
	Node0xb13ba0 -> Node0xb13c10;
	Node0xb13c10 -> Node0xb13c80;
	Node0xb13c80 -> Node0xb13cf0;
	Node0xb13cf0 -> Node0xb13f70;
	Node0xb13f70 -> Node0xb13fe0;
	Node0xb13fe0 -> Node0xb14050;
	Node0xb14050 -> Node0xb140c0;
	Node0xb140c0 -> Node0xb14130;
	Node0xb14130 -> Node0xb141a0;
	Node0xb141a0 -> Node0xb14210;
	Node0xb14210 -> Node0xb14280;
	Node0xb14280 -> Node0xab3268;
	Node0xab3268 -> Node0xb14720;
	Node0xb14720 -> Node0xb14770;
edge [color=red]
	Node0xb13060 -> Node0xb13170;
	Node0xb13100 -> Node0xb131e0;
	Node0xb13170 -> Node0xb131e0;
	Node0xb13250 -> Node0xb132c0;
	Node0xb132c0 -> Node0xb13330;
	Node0xb131e0 -> Node0xb133a0;
	Node0xb13330 -> Node0xb133a0;
	Node0xb13480 -> Node0xb13520;
	Node0xb13060 -> Node0xb13600;
	Node0xb13600 -> Node0xb13670;
	Node0xb13590 -> Node0xb136e0;
	Node0xb136e0 -> Node0xb13780;
	Node0xb13170 -> Node0xb137f0;
	Node0xb137f0 -> Node0xb13890;
	Node0xb13600 -> Node0xb13900;
	Node0xb13250 -> Node0xb139e0;
	Node0xb139e0 -> Node0xb13a50;
	Node0xb13520 -> Node0xb13b30;
	Node0xb13410 -> Node0xb13b30;
	Node0xb13b30 -> Node0xb13ba0;
	Node0xb13590 -> Node0xb13ba0;
	Node0xb13ba0 -> Node0xb13c10;
	Node0xb13670 -> Node0xb13c10;
	Node0xb13c10 -> Node0xb13c80;
	Node0xb13410 -> Node0xb13c80;
	Node0xb13c80 -> Node0xb13cf0;
	Node0xb13cf0 -> Node0xb13f70;
	Node0xb13780 -> Node0xb13f70;
	Node0xb13f70 -> Node0xb13fe0;
	Node0xb13890 -> Node0xb13fe0;
	Node0xb13fe0 -> Node0xb14050;
	Node0xb13900 -> Node0xb14050;
	Node0xb14050 -> Node0xb140c0;
	Node0xb13970 -> Node0xb140c0;
	Node0xb140c0 -> Node0xb14130;
	Node0xb132c0 -> Node0xb14130;
	Node0xb14130 -> Node0xb141a0;
	Node0xb13ac0 -> Node0xb141a0;
	Node0xb141a0 -> Node0xb14210;
	Node0xb13a50 -> Node0xb14210;
	Node0xb133a0 -> Node0xb14280;
	Node0xb14210 -> Node0xb14280;
	Node0xb14280 -> Node0xab3268;
	Node0xab3268 -> Node0xb14720;
}
