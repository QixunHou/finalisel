digraph "DFG for'crackme' function" {
	Node0xf57510[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xf57bc0[shape=record, label="  %4 = add i32 %1, 1"];
	Node0xf57c80[shape=record, label="  %5 = add i32 %4, %3"];
	Node0xf57cf0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0xf57d60[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0xf57dd0[shape=record, label="  %8 = or i32 %7, %0"];
	Node0xf57e40[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0xf57ee0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0xf57f50[shape=record, label="  %11 = and i32 %1, %0"];
	Node0xf57fc0[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0xf58030[shape=record, label="  %13 = xor i32 %8, -1"];
	Node0xf580a0[shape=record, label="  %14 = and i32 %7, %0"];
	Node0xf58110[shape=record, label="  %15 = add i32 %13, %12"];
	Node0xf581b0[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0xf58220[shape=record, label="  %17 = sub i32 %7, %0"];
	Node0xf58290[shape=record, label="  %18 = sub i32 %17, %8"];
	Node0xf58300[shape=record, label="  %19 = add i32 %18, %6"];
	Node0xf58370[shape=record, label="  %20 = add i32 %19, %10"];
	Node0xf583e0[shape=record, label="  %21 = add i32 %20, %11"];
	Node0xf58450[shape=record, label="  %22 = add i32 %21, %3"];
	Node0xf584c0[shape=record, label="  %23 = sub i32 %22, %14"];
	Node0xf58530[shape=record, label="  %24 = add i32 %23, %16"];
	Node0xf585a0[shape=record, label="  %25 = icmp eq i32 %5, %24"];
	Node0xef8268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xf58a40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0xf58a90[shape=record, label="  ret void"];
	Node0xf57510 -> Node0xf57bc0;
	Node0xf57bc0 -> Node0xf57c80;
	Node0xf57c80 -> Node0xf57cf0;
	Node0xf57cf0 -> Node0xf57d60;
	Node0xf57d60 -> Node0xf57dd0;
	Node0xf57dd0 -> Node0xf57e40;
	Node0xf57e40 -> Node0xf57ee0;
	Node0xf57ee0 -> Node0xf57f50;
	Node0xf57f50 -> Node0xf57fc0;
	Node0xf57fc0 -> Node0xf58030;
	Node0xf58030 -> Node0xf580a0;
	Node0xf580a0 -> Node0xf58110;
	Node0xf58110 -> Node0xf581b0;
	Node0xf581b0 -> Node0xf58220;
	Node0xf58220 -> Node0xf58290;
	Node0xf58290 -> Node0xf58300;
	Node0xf58300 -> Node0xf58370;
	Node0xf58370 -> Node0xf583e0;
	Node0xf583e0 -> Node0xf58450;
	Node0xf58450 -> Node0xf584c0;
	Node0xf584c0 -> Node0xf58530;
	Node0xf58530 -> Node0xf585a0;
	Node0xf585a0 -> Node0xef8268;
	Node0xef8268 -> Node0xf58a40;
	Node0xf58a40 -> Node0xf58a90;
edge [color=red]
	Node0xf57bc0 -> Node0xf57c80;
	Node0xf57510 -> Node0xf57c80;
	Node0xf57d60 -> Node0xf57dd0;
	Node0xf57e40 -> Node0xf57ee0;
	Node0xf57cf0 -> Node0xf57fc0;
	Node0xf57dd0 -> Node0xf58030;
	Node0xf57d60 -> Node0xf580a0;
	Node0xf58030 -> Node0xf58110;
	Node0xf57fc0 -> Node0xf58110;
	Node0xf58110 -> Node0xf581b0;
	Node0xf57d60 -> Node0xf58220;
	Node0xf58220 -> Node0xf58290;
	Node0xf57dd0 -> Node0xf58290;
	Node0xf58290 -> Node0xf58300;
	Node0xf57cf0 -> Node0xf58300;
	Node0xf58300 -> Node0xf58370;
	Node0xf57ee0 -> Node0xf58370;
	Node0xf58370 -> Node0xf583e0;
	Node0xf57f50 -> Node0xf583e0;
	Node0xf583e0 -> Node0xf58450;
	Node0xf57510 -> Node0xf58450;
	Node0xf58450 -> Node0xf584c0;
	Node0xf580a0 -> Node0xf584c0;
	Node0xf584c0 -> Node0xf58530;
	Node0xf581b0 -> Node0xf58530;
	Node0xf57c80 -> Node0xf585a0;
	Node0xf58530 -> Node0xf585a0;
	Node0xf585a0 -> Node0xef8268;
	Node0xef8268 -> Node0xf58a40;
}
