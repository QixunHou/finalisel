digraph "DFG for'crackme' function" {
	Node0x1fe4db0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1fe4e50[shape=record, label="  %6 = mul i32 %5, -4"];
	Node0x1fe4ef0[shape=record, label="  %7 = or i32 %6, 2"];
	Node0x1fe4f60[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1fe4fd0[shape=record, label="  %9 = add i32 %7, %8"];
	Node0x1fe5040[shape=record, label="  %10 = or i32 %5, %1"];
	Node0x1fe50e0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1fe5150[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x1fe51c0[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x1fe5230[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x1fe52a0[shape=record, label="  %15 = or i32 %14, %2"];
	Node0x1fe5310[shape=record, label="  %16 = xor i32 %14, %2"];
	Node0x1fe5380[shape=record, label="  %17 = shl i32 %12, 1"];
	Node0x1fe5420[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x1fe5490[shape=record, label="  %19 = xor i32 %10, -1"];
	Node0x1fe5500[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x1fe5570[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x1fe55e0[shape=record, label="  %22 = shl i32 %3, 1"];
	Node0x1fe5650[shape=record, label="  %23 = xor i32 %21, -2"];
	Node0x1fe56c0[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x1fe5730[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1fe57a0[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x1fe5810[shape=record, label="  %27 = xor i32 %22, -2"];
	Node0x1fe5880[shape=record, label="  %28 = or i32 %8, %3"];
	Node0x1fe5920[shape=record, label="  %29 = shl i32 %28, 3"];
	Node0x1fe59c0[shape=record, label="  %30 = xor i32 %29, -8"];
	Node0x1fe5a30[shape=record, label="  %31 = and i32 %8, %3"];
	Node0x1fe5ad0[shape=record, label="  %32 = mul i32 %31, -7"];
	Node0x1fe5d80[shape=record, label="  %33 = mul i32 %26, -6"];
	Node0x1fe5e20[shape=record, label="  %34 = add i32 %0, 4"];
	Node0x1fe5e90[shape=record, label="  %35 = add i32 %34, %1"];
	Node0x1fe5f00[shape=record, label="  %36 = add i32 %35, %2"];
	Node0x1fe5f70[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0x1fe5fe0[shape=record, label="  %38 = add i32 %37, %13"];
	Node0x1fe6050[shape=record, label="  %39 = add i32 %38, %15"];
	Node0x1fe60c0[shape=record, label="  %40 = add i32 %39, %16"];
	Node0x1fe6130[shape=record, label="  %41 = add i32 %40, %19"];
	Node0x1fe61a0[shape=record, label="  %42 = sub i32 %41, %11"];
	Node0x1fe6210[shape=record, label="  %43 = add i32 %42, %22"];
	Node0x1fe6280[shape=record, label="  %44 = add i32 %43, %26"];
	Node0x1fe62f0[shape=record, label="  %45 = add i32 %44, %28"];
	Node0x1fe6360[shape=record, label="  %46 = add i32 %45, %24"];
	Node0x1fe63d0[shape=record, label="  %47 = sub i32 %46, %18"];
	Node0x1fe6440[shape=record, label="  %48 = add i32 %47, %21"];
	Node0x1fe64b0[shape=record, label="  %49 = add i32 %48, %25"];
	Node0x1fe6520[shape=record, label="  %50 = add i32 %49, %27"];
	Node0x1fe6590[shape=record, label="  %51 = add i32 %50, %32"];
	Node0x1fe6600[shape=record, label="  %52 = add i32 %51, %33"];
	Node0x1fe6670[shape=record, label="  %53 = sub i32 %52, %23"];
	Node0x1fe66e0[shape=record, label="  %54 = sub i32 %53, %30"];
	Node0x1fe6750[shape=record, label="  %55 = icmp eq i32 %9, %54"];
	Node0x1f85268[shape=record, label="  %56 = select i1 %55, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1fe6bf0[shape=record, label="  %57 = tail call i32 @puts(i8* nonnull dereferenceable(1) %56)"];
	Node0x1fe6c40[shape=record, label="  ret void"];
	Node0x1fe4db0 -> Node0x1fe4e50;
	Node0x1fe4e50 -> Node0x1fe4ef0;
	Node0x1fe4ef0 -> Node0x1fe4f60;
	Node0x1fe4f60 -> Node0x1fe4fd0;
	Node0x1fe4fd0 -> Node0x1fe5040;
	Node0x1fe5040 -> Node0x1fe50e0;
	Node0x1fe50e0 -> Node0x1fe5150;
	Node0x1fe5150 -> Node0x1fe51c0;
	Node0x1fe51c0 -> Node0x1fe5230;
	Node0x1fe5230 -> Node0x1fe52a0;
	Node0x1fe52a0 -> Node0x1fe5310;
	Node0x1fe5310 -> Node0x1fe5380;
	Node0x1fe5380 -> Node0x1fe5420;
	Node0x1fe5420 -> Node0x1fe5490;
	Node0x1fe5490 -> Node0x1fe5500;
	Node0x1fe5500 -> Node0x1fe5570;
	Node0x1fe5570 -> Node0x1fe55e0;
	Node0x1fe55e0 -> Node0x1fe5650;
	Node0x1fe5650 -> Node0x1fe56c0;
	Node0x1fe56c0 -> Node0x1fe5730;
	Node0x1fe5730 -> Node0x1fe57a0;
	Node0x1fe57a0 -> Node0x1fe5810;
	Node0x1fe5810 -> Node0x1fe5880;
	Node0x1fe5880 -> Node0x1fe5920;
	Node0x1fe5920 -> Node0x1fe59c0;
	Node0x1fe59c0 -> Node0x1fe5a30;
	Node0x1fe5a30 -> Node0x1fe5ad0;
	Node0x1fe5ad0 -> Node0x1fe5d80;
	Node0x1fe5d80 -> Node0x1fe5e20;
	Node0x1fe5e20 -> Node0x1fe5e90;
	Node0x1fe5e90 -> Node0x1fe5f00;
	Node0x1fe5f00 -> Node0x1fe5f70;
	Node0x1fe5f70 -> Node0x1fe5fe0;
	Node0x1fe5fe0 -> Node0x1fe6050;
	Node0x1fe6050 -> Node0x1fe60c0;
	Node0x1fe60c0 -> Node0x1fe6130;
	Node0x1fe6130 -> Node0x1fe61a0;
	Node0x1fe61a0 -> Node0x1fe6210;
	Node0x1fe6210 -> Node0x1fe6280;
	Node0x1fe6280 -> Node0x1fe62f0;
	Node0x1fe62f0 -> Node0x1fe6360;
	Node0x1fe6360 -> Node0x1fe63d0;
	Node0x1fe63d0 -> Node0x1fe6440;
	Node0x1fe6440 -> Node0x1fe64b0;
	Node0x1fe64b0 -> Node0x1fe6520;
	Node0x1fe6520 -> Node0x1fe6590;
	Node0x1fe6590 -> Node0x1fe6600;
	Node0x1fe6600 -> Node0x1fe6670;
	Node0x1fe6670 -> Node0x1fe66e0;
	Node0x1fe66e0 -> Node0x1fe6750;
	Node0x1fe6750 -> Node0x1f85268;
	Node0x1f85268 -> Node0x1fe6bf0;
	Node0x1fe6bf0 -> Node0x1fe6c40;
edge [color=red]
	Node0x1fe4db0 -> Node0x1fe4e50;
	Node0x1fe4e50 -> Node0x1fe4ef0;
	Node0x1fe4ef0 -> Node0x1fe4fd0;
	Node0x1fe4f60 -> Node0x1fe4fd0;
	Node0x1fe4db0 -> Node0x1fe5040;
	Node0x1fe5040 -> Node0x1fe50e0;
	Node0x1fe5230 -> Node0x1fe52a0;
	Node0x1fe5230 -> Node0x1fe5310;
	Node0x1fe5150 -> Node0x1fe5380;
	Node0x1fe5380 -> Node0x1fe5420;
	Node0x1fe5040 -> Node0x1fe5490;
	Node0x1fe5500 -> Node0x1fe5570;
	Node0x1fe5570 -> Node0x1fe5650;
	Node0x1fe56c0 -> Node0x1fe5730;
	Node0x1fe55e0 -> Node0x1fe5810;
	Node0x1fe4f60 -> Node0x1fe5880;
	Node0x1fe5880 -> Node0x1fe5920;
	Node0x1fe5920 -> Node0x1fe59c0;
	Node0x1fe4f60 -> Node0x1fe5a30;
	Node0x1fe5a30 -> Node0x1fe5ad0;
	Node0x1fe57a0 -> Node0x1fe5d80;
	Node0x1fe5e20 -> Node0x1fe5e90;
	Node0x1fe5e90 -> Node0x1fe5f00;
	Node0x1fe5f00 -> Node0x1fe5f70;
	Node0x1fe5150 -> Node0x1fe5f70;
	Node0x1fe5f70 -> Node0x1fe5fe0;
	Node0x1fe51c0 -> Node0x1fe5fe0;
	Node0x1fe5fe0 -> Node0x1fe6050;
	Node0x1fe52a0 -> Node0x1fe6050;
	Node0x1fe6050 -> Node0x1fe60c0;
	Node0x1fe5310 -> Node0x1fe60c0;
	Node0x1fe60c0 -> Node0x1fe6130;
	Node0x1fe5490 -> Node0x1fe6130;
	Node0x1fe6130 -> Node0x1fe61a0;
	Node0x1fe50e0 -> Node0x1fe61a0;
	Node0x1fe61a0 -> Node0x1fe6210;
	Node0x1fe55e0 -> Node0x1fe6210;
	Node0x1fe6210 -> Node0x1fe6280;
	Node0x1fe57a0 -> Node0x1fe6280;
	Node0x1fe6280 -> Node0x1fe62f0;
	Node0x1fe5880 -> Node0x1fe62f0;
	Node0x1fe62f0 -> Node0x1fe6360;
	Node0x1fe56c0 -> Node0x1fe6360;
	Node0x1fe6360 -> Node0x1fe63d0;
	Node0x1fe5420 -> Node0x1fe63d0;
	Node0x1fe63d0 -> Node0x1fe6440;
	Node0x1fe5570 -> Node0x1fe6440;
	Node0x1fe6440 -> Node0x1fe64b0;
	Node0x1fe5730 -> Node0x1fe64b0;
	Node0x1fe64b0 -> Node0x1fe6520;
	Node0x1fe5810 -> Node0x1fe6520;
	Node0x1fe6520 -> Node0x1fe6590;
	Node0x1fe5ad0 -> Node0x1fe6590;
	Node0x1fe6590 -> Node0x1fe6600;
	Node0x1fe5d80 -> Node0x1fe6600;
	Node0x1fe6600 -> Node0x1fe6670;
	Node0x1fe5650 -> Node0x1fe6670;
	Node0x1fe6670 -> Node0x1fe66e0;
	Node0x1fe59c0 -> Node0x1fe66e0;
	Node0x1fe4fd0 -> Node0x1fe6750;
	Node0x1fe66e0 -> Node0x1fe6750;
	Node0x1fe6750 -> Node0x1f85268;
	Node0x1f85268 -> Node0x1fe6bf0;
}
