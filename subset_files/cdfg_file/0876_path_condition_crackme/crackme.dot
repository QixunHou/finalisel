digraph "DFG for'crackme' function" {
	Node0x1864030[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x18640a0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1864110[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x18641b0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1864220[shape=record, label="  %9 = add i32 %8, %6"];
	Node0x18642c0[shape=record, label="  %10 = sub i32 0, %9"];
	Node0x1864330[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x18643a0[shape=record, label="  %12 = and i32 %5, %1"];
	Node0x1864440[shape=record, label="  %13 = mul i32 %12, -3"];
	Node0x18644b0[shape=record, label="  %14 = or i32 %3, %0"];
	Node0x1864520[shape=record, label="  %15 = xor i32 %7, -1"];
	Node0x1864590[shape=record, label="  %16 = xor i32 %0, -1"];
	Node0x1864600[shape=record, label="  %17 = or i32 %16, %3"];
	Node0x1864670[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1864710[shape=record, label="  %19 = shl i32 %17, 2"];
	Node0x18647b0[shape=record, label="  %20 = xor i32 %19, -4"];
	Node0x1864820[shape=record, label="  %21 = and i32 %16, %3"];
	Node0x1864890[shape=record, label="  %22 = shl i32 %21, 2"];
	Node0x1864900[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x1864970[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x18649e0[shape=record, label="  %25 = add i32 %11, %16"];
	Node0x1864a50[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x1864ac0[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x1864b60[shape=record, label="  %28 = add i32 %0, 3"];
	Node0x1864bd0[shape=record, label="  %29 = add i32 %28, %12"];
	Node0x1864c40[shape=record, label="  %30 = add i32 %29, %6"];
	Node0x1864cb0[shape=record, label="  %31 = add i32 %30, %3"];
	Node0x1864d20[shape=record, label="  %32 = add i32 %31, %13"];
	Node0x1864fa0[shape=record, label="  %33 = add i32 %32, %15"];
	Node0x1865010[shape=record, label="  %34 = sub i32 %33, %18"];
	Node0x1865080[shape=record, label="  %35 = sub i32 %34, %22"];
	Node0x18650f0[shape=record, label="  %36 = sub i32 %35, %24"];
	Node0x1865160[shape=record, label="  %37 = sub i32 %36, %20"];
	Node0x18651d0[shape=record, label="  %38 = add i32 %37, %27"];
	Node0x1865240[shape=record, label="  %39 = icmp eq i32 %38, %10"];
	Node0x1804268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18656e0[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x1865730[shape=record, label="  ret void"];
	Node0x1864030 -> Node0x18640a0;
	Node0x18640a0 -> Node0x1864110;
	Node0x1864110 -> Node0x18641b0;
	Node0x18641b0 -> Node0x1864220;
	Node0x1864220 -> Node0x18642c0;
	Node0x18642c0 -> Node0x1864330;
	Node0x1864330 -> Node0x18643a0;
	Node0x18643a0 -> Node0x1864440;
	Node0x1864440 -> Node0x18644b0;
	Node0x18644b0 -> Node0x1864520;
	Node0x1864520 -> Node0x1864590;
	Node0x1864590 -> Node0x1864600;
	Node0x1864600 -> Node0x1864670;
	Node0x1864670 -> Node0x1864710;
	Node0x1864710 -> Node0x18647b0;
	Node0x18647b0 -> Node0x1864820;
	Node0x1864820 -> Node0x1864890;
	Node0x1864890 -> Node0x1864900;
	Node0x1864900 -> Node0x1864970;
	Node0x1864970 -> Node0x18649e0;
	Node0x18649e0 -> Node0x1864a50;
	Node0x1864a50 -> Node0x1864ac0;
	Node0x1864ac0 -> Node0x1864b60;
	Node0x1864b60 -> Node0x1864bd0;
	Node0x1864bd0 -> Node0x1864c40;
	Node0x1864c40 -> Node0x1864cb0;
	Node0x1864cb0 -> Node0x1864d20;
	Node0x1864d20 -> Node0x1864fa0;
	Node0x1864fa0 -> Node0x1865010;
	Node0x1865010 -> Node0x1865080;
	Node0x1865080 -> Node0x18650f0;
	Node0x18650f0 -> Node0x1865160;
	Node0x1865160 -> Node0x18651d0;
	Node0x18651d0 -> Node0x1865240;
	Node0x1865240 -> Node0x1804268;
	Node0x1804268 -> Node0x18656e0;
	Node0x18656e0 -> Node0x1865730;
edge [color=red]
	Node0x1864030 -> Node0x18640a0;
	Node0x1864110 -> Node0x18641b0;
	Node0x18641b0 -> Node0x1864220;
	Node0x18640a0 -> Node0x1864220;
	Node0x1864220 -> Node0x18642c0;
	Node0x1864030 -> Node0x18643a0;
	Node0x18643a0 -> Node0x1864440;
	Node0x1864110 -> Node0x1864520;
	Node0x1864590 -> Node0x1864600;
	Node0x1864600 -> Node0x1864670;
	Node0x1864600 -> Node0x1864710;
	Node0x1864710 -> Node0x18647b0;
	Node0x1864590 -> Node0x1864820;
	Node0x1864820 -> Node0x1864890;
	Node0x1864900 -> Node0x1864970;
	Node0x1864330 -> Node0x18649e0;
	Node0x1864590 -> Node0x18649e0;
	Node0x18649e0 -> Node0x1864a50;
	Node0x18644b0 -> Node0x1864a50;
	Node0x1864a50 -> Node0x1864ac0;
	Node0x1864b60 -> Node0x1864bd0;
	Node0x18643a0 -> Node0x1864bd0;
	Node0x1864bd0 -> Node0x1864c40;
	Node0x18640a0 -> Node0x1864c40;
	Node0x1864c40 -> Node0x1864cb0;
	Node0x1864cb0 -> Node0x1864d20;
	Node0x1864440 -> Node0x1864d20;
	Node0x1864d20 -> Node0x1864fa0;
	Node0x1864520 -> Node0x1864fa0;
	Node0x1864fa0 -> Node0x1865010;
	Node0x1864670 -> Node0x1865010;
	Node0x1865010 -> Node0x1865080;
	Node0x1864890 -> Node0x1865080;
	Node0x1865080 -> Node0x18650f0;
	Node0x1864970 -> Node0x18650f0;
	Node0x18650f0 -> Node0x1865160;
	Node0x18647b0 -> Node0x1865160;
	Node0x1865160 -> Node0x18651d0;
	Node0x1864ac0 -> Node0x18651d0;
	Node0x18651d0 -> Node0x1865240;
	Node0x18642c0 -> Node0x1865240;
	Node0x1865240 -> Node0x1804268;
	Node0x1804268 -> Node0x18656e0;
}
