; ModuleID = '../.././c_source_file/0179_path_condition_crackme.c'
source_filename = "../.././c_source_file/0179_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = xor i32 %1, -1
  %6 = and i32 %5, %2
  %7 = and i32 %6, %4
  %8 = or i32 %5, %2
  %9 = and i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %7, %10
  %12 = mul i32 %11, -2
  %13 = xor i32 %2, -1
  %14 = and i32 %13, %1
  %15 = xor i32 %14, -1
  %16 = and i32 %15, %0
  %17 = sub i32 %12, %16
  %18 = and i32 %2, %0
  %19 = xor i32 %18, %1
  %20 = or i32 %5, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %2
  %23 = and i32 %6, %0
  %24 = xor i32 %2, %1
  %25 = xor i32 %24, %0
  %26 = or i32 %23, %25
  %27 = or i32 %13, %1
  %28 = and i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %4
  %31 = and i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %24, %32
  %34 = xor i32 %1, %0
  %35 = or i32 %34, %13
  %36 = shl i32 %35, 2
  %37 = or i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %34, %38
  %40 = shl i32 %39, 2
  %41 = or i32 %24, %0
  %42 = or i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = add i32 %42, 1
  %45 = and i32 %13, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %46, %5
  %48 = or i32 %1, %0
  %49 = and i32 %48, %13
  %50 = shl i32 %49, 1
  %51 = or i32 %18, %43
  %52 = xor i32 %27, -1
  %53 = or i32 %52, %0
  %54 = xor i32 %2, %0
  %55 = and i32 %54, %5
  %56 = and i32 %28, %0
  %57 = and i32 %24, %4
  %58 = or i32 %56, %57
  %59 = and i32 %27, %4
  %60 = or i32 %13, %0
  %61 = xor i32 %60, -1
  %62 = or i32 %31, %61
  %63 = and i32 %42, %4
  %64 = and i32 %5, %0
  %65 = xor i32 %64, -1
  %66 = xor i32 %24, -1
  %67 = and i32 %66, %65
  %68 = xor i32 %54, -1
  %69 = or i32 %31, %68
  %70 = xor i32 %61, %1
  %71 = add i32 %45, 1
  %72 = and i32 %34, %46
  %73 = or i32 %68, %5
  %74 = or i32 %34, %68
  %75 = xor i32 %64, %29
  %76 = xor i32 %42, %0
  %77 = xor i32 %56, -1
  %78 = xor i32 %76, %77
  %79 = xor i32 %48, -1
  %80 = or i32 %13, %79
  %81 = and i32 %28, %4
  %82 = and i32 %42, %0
  %83 = xor i32 %82, 2147483647
  %84 = xor i32 %83, %81
  %85 = or i32 %34, %2
  %86 = or i32 %54, %34
  %87 = and i32 %34, %68
  %88 = xor i32 %15, %0
  %89 = xor i32 %34, -1
  %90 = or i32 %68, %89
  %91 = xor i32 %23, %41
  %92 = add i32 %34, 1
  %93 = and i32 %54, %34
  %94 = and i32 %68, %89
  %95 = or i32 %31, %52
  %96 = xor i32 %45, %1
  %97 = or i32 %28, %64
  %98 = and i32 %37, %89
  %99 = or i32 %79, %2
  %100 = or i32 %38, %89
  %101 = add i32 %20, 1
  %102 = xor i32 %41, -1
  %103 = or i32 %23, %102
  %104 = and i32 %24, %65
  %105 = and i32 %13, %89
  %106 = add i32 %28, 1
  %107 = or i32 %28, %4
  %108 = xor i32 %65, %2
  %109 = xor i32 %63, %77
  %110 = or i32 %81, %82
  %111 = and i32 %68, %65
  %112 = and i32 %89, %2
  %113 = and i32 %46, %89
  %114 = and i32 %54, %65
  %115 = xor i32 %32, %2
  %116 = add i32 %54, 1
  %117 = xor i32 %8, %0
  %118 = xor i32 %23, -1
  %119 = xor i32 %117, %118
  %120 = xor i32 %45, %29
  %121 = add i32 %60, 1
  %122 = xor i32 %37, %1
  %123 = or i32 %31, %66
  %124 = or i32 %24, %79
  %125 = or i32 %7, %9
  %126 = shl i32 %125, 1
  %127 = and i32 %24, %0
  %128 = or i32 %64, %13
  %129 = xor i32 %46, %1
  %130 = or i32 %54, %31
  %131 = or i32 %24, %4
  %132 = xor i32 %7, %131
  %133 = xor i32 %64, %2
  %134 = and i32 %24, %48
  %135 = or i32 %15, %4
  %136 = xor i32 %79, %2
  %137 = or i32 %45, %1
  %138 = xor i32 %18, -1
  %139 = and i32 %138, %1
  %140 = and i32 %8, %4
  %141 = xor i32 %140, %118
  %142 = or i32 %24, %64
  %143 = or i32 %68, %1
  %144 = or i32 %29, %0
  %145 = and i32 %37, %5
  %146 = xor i32 %60, %1
  %147 = xor i32 %18, %42
  %148 = xor i32 %43, %0
  %149 = or i32 %64, %66
  %150 = xor i32 %18, %20
  %151 = and i32 %66, %4
  %152 = or i32 %89, %2
  %153 = or i32 %18, %21
  %154 = xor i32 %27, %31
  %155 = and i32 %37, %1
  %156 = and i32 %29, %0
  %157 = xor i32 %31, %2
  %158 = and i32 %20, %68
  %159 = or i32 %61, %89
  %160 = or i32 %23, %117
  %161 = or i32 %54, %5
  %162 = shl i32 %161, 1
  %163 = shl i32 %0, 1
  %164 = or i32 %18, %34
  %165 = and i32 %54, %32
  %166 = xor i32 %48, %2
  %167 = and i32 %13, %32
  %168 = xor i32 %64, %15
  %169 = and i32 %60, %5
  %170 = and i32 %68, %1
  %171 = or i32 %43, %0
  %172 = xor i32 %21, %2
  %173 = or i32 %18, %89
  %174 = and i32 %54, %20
  %175 = xor i32 %14, %0
  %176 = and i32 %34, %13
  %177 = or i32 %56, %76
  %178 = or i32 %38, %1
  %179 = xor i32 %56, %25
  %180 = or i32 %14, %4
  %181 = shl i32 %180, 1
  %182 = or i32 %13, %89
  %183 = and i32 %60, %1
  %184 = xor i32 %18, %15
  %185 = xor i32 %25, -1
  %186 = xor i32 %23, %185
  %187 = and i32 %20, %13
  %188 = or i32 %66, %79
  %189 = or i32 %54, %64
  %190 = and i32 %32, %2
  %191 = and i32 %34, %2
  %192 = and i32 %65, %2
  %193 = xor i32 %29, %0
  %194 = or i32 %27, %4
  %195 = or i32 %38, %5
  %196 = and i32 %13, %65
  %197 = or i32 %14, %64
  %198 = or i32 %61, %5
  %199 = or i32 %34, %61
  %200 = and i32 %68, %5
  %201 = and i32 %54, %1
  %202 = and i32 %48, %68
  %203 = xor i32 %131, -1
  %204 = or i32 %7, %203
  %205 = xor i32 %28, %0
  %206 = shl i32 %205, 1
  %207 = xor i32 %60, %31
  %208 = and i32 %60, %34
  %209 = xor i32 %52, %0
  %210 = xor i32 %18, %48
  %211 = or i32 %31, %2
  %212 = or i32 %61, %1
  %213 = or i32 %64, %68
  %214 = and i32 %68, %32
  %215 = xor i32 %66, %0
  %216 = and i32 %20, %66
  %217 = or i32 %45, %34
  %218 = shl i32 %217, 1
  %219 = and i32 %27, %0
  %220 = or i32 %81, %127
  %221 = xor i32 %20, %2
  %222 = and i32 %54, %48
  %223 = or i32 %54, %79
  %224 = and i32 %66, %0
  %225 = shl i32 %224, 1
  %226 = or i32 %66, %4
  %227 = or i32 %66, %21
  %228 = or i32 %66, %0
  %229 = and i32 %60, %89
  %230 = xor i32 %45, %27
  %231 = and i32 %34, %138
  %232 = shl i32 %231, 1
  %233 = or i32 %24, %21
  %234 = or i32 %64, %2
  %235 = or i32 %56, %63
  %236 = and i32 %37, %34
  %237 = and i32 %66, %32
  %238 = and i32 %29, %4
  %239 = or i32 %45, %5
  %240 = and i32 %15, %4
  %241 = or i32 %31, %43
  %242 = or i32 %13, %21
  %243 = or i32 %56, %185
  %244 = or i32 %68, %21
  %245 = or i32 %15, %0
  %246 = add i32 %37, 1
  %247 = shl i32 %239, 1
  %248 = xor i32 %57, 2147483647
  %249 = xor i32 %248, %56
  %250 = shl i32 %249, 1
  %251 = or i32 %18, %1
  %252 = or i32 %24, %31
  %253 = or i32 %68, %79
  %254 = and i32 %48, %66
  %255 = or i32 %31, %38
  %256 = xor i32 %27, %0
  %257 = and i32 %54, %89
  %258 = xor i32 %37, %31
  %259 = or i32 %31, %13
  %260 = and i32 %138, %89
  %261 = or i32 %45, %28
  %262 = and i32 %48, %2
  %263 = or i32 %45, %89
  %264 = and i32 %20, %2
  %265 = xor i32 %42, %31
  %266 = or i32 %18, %5
  %267 = or i32 %28, %0
  %268 = xor i32 %138, %1
  %269 = shl i32 %268, 1
  %270 = or i32 %42, %4
  %271 = or i32 %23, %140
  %272 = or i32 %54, %21
  %273 = and i32 %43, %4
  %274 = shl i32 %273, 2
  %275 = and i32 %14, %4
  %276 = mul i32 %275, -17
  %277 = and i32 %43, %0
  %278 = mul i32 %277, 23
  %279 = and i32 %14, %0
  %280 = mul i32 %279, -18
  %281 = and i32 %52, %4
  %282 = mul i32 %281, -34
  %283 = mul i32 %81, -12
  %284 = and i32 %52, %0
  %285 = mul i32 %284, -20
  %286 = mul i32 %56, -14
  %287 = add i32 %22, %4
  %288 = add i32 %287, %264
  %289 = add i32 %288, %99
  %290 = add i32 %289, %37
  %291 = add i32 %290, %19
  %292 = add i32 %291, %266
  %293 = add i32 %292, %261
  %294 = add i32 %293, %260
  %295 = add i32 %294, %257
  %296 = add i32 %295, %256
  %297 = add i32 %296, %214
  %298 = add i32 %297, %212
  %299 = add i32 %298, %201
  %300 = add i32 %299, %170
  %301 = add i32 %300, %147
  %302 = add i32 %301, %130
  %303 = add i32 %302, %104
  %304 = add i32 %303, %72
  %305 = add i32 %304, %53
  %306 = add i32 %305, %220
  %307 = add i32 %306, %179
  %308 = add i32 %307, %160
  %309 = add i32 %308, %84
  %310 = shl i32 %309, 1
  %311 = add i32 %116, %172
  %312 = sub i32 %311, %27
  %313 = add i32 %312, %229
  %314 = sub i32 %313, %272
  %315 = mul i32 %314, 3
  %316 = add i32 %207, %144
  %317 = add i32 %316, %57
  %318 = shl i32 %317, 2
  %319 = add i32 %31, %68
  %320 = add i32 %319, %157
  %321 = sub i32 %320, %197
  %322 = mul i32 %321, 5
  %323 = sub i32 %92, %163
  %324 = add i32 %323, %32
  %325 = add i32 %324, %101
  %326 = sub i32 %325, %64
  %327 = add i32 %326, %65
  %328 = add i32 %327, %34
  %329 = sub i32 %328, %20
  %330 = add i32 %329, %44
  %331 = add i32 %330, %71
  %332 = add i32 %331, %80
  %333 = add i32 %332, %85
  %334 = sub i32 %333, %45
  %335 = sub i32 %334, %105
  %336 = add i32 %335, %106
  %337 = add i32 %336, %108
  %338 = sub i32 %337, %112
  %339 = sub i32 %338, %115
  %340 = add i32 %339, %121
  %341 = sub i32 %340, %128
  %342 = add i32 %341, %133
  %343 = add i32 %342, %24
  %344 = sub i32 %343, %136
  %345 = add i32 %344, %60
  %346 = sub i32 %345, %152
  %347 = add i32 %346, %166
  %348 = sub i32 %347, %167
  %349 = add i32 %348, %176
  %350 = add i32 %349, %182
  %351 = sub i32 %350, %187
  %352 = add i32 %351, %190
  %353 = add i32 %352, %191
  %354 = sub i32 %353, %192
  %355 = sub i32 %354, %196
  %356 = sub i32 %355, %42
  %357 = add i32 %356, %211
  %358 = add i32 %357, %52
  %359 = add i32 %358, %221
  %360 = add i32 %359, %234
  %361 = add i32 %360, %242
  %362 = add i32 %361, %246
  %363 = sub i32 %362, %259
  %364 = sub i32 %363, %28
  %365 = add i32 %364, %262
  %366 = add i32 %365, %30
  %367 = sub i32 %366, %33
  %368 = sub i32 %367, %36
  %369 = sub i32 %368, %41
  %370 = sub i32 %369, %47
  %371 = sub i32 %370, %50
  %372 = sub i32 %371, %51
  %373 = add i32 %372, %55
  %374 = add i32 %373, %59
  %375 = sub i32 %374, %62
  %376 = sub i32 %375, %63
  %377 = add i32 %376, %67
  %378 = sub i32 %377, %69
  %379 = add i32 %378, %70
  %380 = sub i32 %379, %73
  %381 = add i32 %380, %74
  %382 = sub i32 %381, %75
  %383 = add i32 %382, %86
  %384 = add i32 %383, %87
  %385 = add i32 %384, %88
  %386 = add i32 %385, %90
  %387 = add i32 %386, %93
  %388 = sub i32 %387, %94
  %389 = sub i32 %388, %95
  %390 = add i32 %389, %96
  %391 = sub i32 %390, %97
  %392 = sub i32 %391, %98
  %393 = add i32 %392, %100
  %394 = add i32 %393, %76
  %395 = sub i32 %394, %107
  %396 = sub i32 %395, %111
  %397 = sub i32 %396, %113
  %398 = sub i32 %397, %114
  %399 = add i32 %398, %120
  %400 = sub i32 %399, %122
  %401 = sub i32 %400, %123
  %402 = sub i32 %401, %124
  %403 = sub i32 %402, %127
  %404 = add i32 %403, %129
  %405 = add i32 %404, %134
  %406 = add i32 %405, %135
  %407 = add i32 %406, %137
  %408 = sub i32 %407, %139
  %409 = add i32 %408, %142
  %410 = sub i32 %409, %143
  %411 = add i32 %410, %145
  %412 = sub i32 %411, %146
  %413 = add i32 %412, %148
  %414 = sub i32 %413, %149
  %415 = add i32 %414, %150
  %416 = add i32 %415, %151
  %417 = sub i32 %416, %153
  %418 = sub i32 %417, %154
  %419 = add i32 %418, %155
  %420 = sub i32 %419, %156
  %421 = sub i32 %420, %158
  %422 = add i32 %421, %159
  %423 = add i32 %422, %164
  %424 = sub i32 %423, %25
  %425 = add i32 %424, %165
  %426 = sub i32 %425, %168
  %427 = add i32 %426, %169
  %428 = add i32 %427, %171
  %429 = add i32 %428, %173
  %430 = sub i32 %429, %174
  %431 = add i32 %430, %175
  %432 = sub i32 %431, %178
  %433 = sub i32 %432, %183
  %434 = sub i32 %433, %184
  %435 = sub i32 %434, %188
  %436 = sub i32 %435, %189
  %437 = sub i32 %436, %193
  %438 = add i32 %437, %194
  %439 = sub i32 %438, %195
  %440 = sub i32 %439, %198
  %441 = sub i32 %440, %199
  %442 = sub i32 %441, %200
  %443 = add i32 %442, %202
  %444 = sub i32 %443, %208
  %445 = add i32 %444, %209
  %446 = sub i32 %445, %210
  %447 = sub i32 %446, %213
  %448 = add i32 %447, %215
  %449 = add i32 %448, %216
  %450 = sub i32 %449, %219
  %451 = add i32 %450, %222
  %452 = add i32 %451, %223
  %453 = sub i32 %452, %226
  %454 = sub i32 %453, %227
  %455 = sub i32 %454, %228
  %456 = add i32 %455, %230
  %457 = add i32 %456, %233
  %458 = sub i32 %457, %236
  %459 = add i32 %458, %237
  %460 = add i32 %459, %238
  %461 = add i32 %460, %239
  %462 = add i32 %461, %240
  %463 = sub i32 %462, %241
  %464 = add i32 %463, %244
  %465 = sub i32 %464, %245
  %466 = add i32 %465, %251
  %467 = add i32 %466, %252
  %468 = sub i32 %467, %253
  %469 = sub i32 %468, %254
  %470 = add i32 %469, %255
  %471 = sub i32 %470, %258
  %472 = sub i32 %471, %82
  %473 = sub i32 %472, %263
  %474 = sub i32 %473, %265
  %475 = add i32 %474, %267
  %476 = add i32 %475, %270
  %477 = add i32 %476, %131
  %478 = add i32 %477, %26
  %479 = sub i32 %478, %40
  %480 = add i32 %479, %58
  %481 = add i32 %480, %78
  %482 = sub i32 %481, %91
  %483 = add i32 %482, %103
  %484 = add i32 %483, %109
  %485 = sub i32 %484, %110
  %486 = sub i32 %485, %119
  %487 = sub i32 %486, %132
  %488 = add i32 %487, %141
  %489 = sub i32 %488, %162
  %490 = sub i32 %489, %177
  %491 = sub i32 %490, %181
  %492 = sub i32 %491, %186
  %493 = sub i32 %492, %204
  %494 = sub i32 %493, %206
  %495 = sub i32 %494, %218
  %496 = sub i32 %495, %225
  %497 = sub i32 %496, %232
  %498 = sub i32 %497, %235
  %499 = add i32 %498, %243
  %500 = sub i32 %499, %247
  %501 = sub i32 %500, %269
  %502 = add i32 %501, %271
  %503 = sub i32 %502, %274
  %504 = add i32 %503, %276
  %505 = add i32 %504, %278
  %506 = add i32 %505, %280
  %507 = add i32 %506, %282
  %508 = add i32 %507, %283
  %509 = add i32 %508, %285
  %510 = add i32 %509, %286
  %511 = sub i32 %510, %126
  %512 = sub i32 %511, %250
  %513 = add i32 %512, %318
  %514 = add i32 %513, %315
  %515 = add i32 %514, %322
  %516 = add i32 %515, %310
  %517 = icmp eq i32 %17, %516
  %518 = select i1 %517, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %519 = tail call i32 @puts(i8* nonnull dereferenceable(1) %518)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
