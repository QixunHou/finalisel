digraph "DFG for'crackme' function" {
	Node0x9cb150[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x9cb1c0[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x9cb230[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x9cb2a0[shape=record, label="  %8 = sub i32 %3, %6"];
	Node0x9cb310[shape=record, label="  %9 = add i32 %8, %7"];
	Node0x9cb380[shape=record, label="  %10 = or i32 %5, %1"];
	Node0x9cb3f0[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x9cb490[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x9cb500[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x9cb570[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x9cb5e0[shape=record, label="  %15 = xor i32 %11, -1"];
	Node0x9cb650[shape=record, label="  %16 = xor i32 %10, -1"];
	Node0x9cb6f0[shape=record, label="  %17 = shl i32 %6, 2"];
	Node0x9cb760[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x9cb7d0[shape=record, label="  %19 = and i32 %18, %3"];
	Node0x9cb840[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x9cb8b0[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x9cb920[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x9cb990[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x9cba00[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x9cbaa0[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x9cbb10[shape=record, label="  %26 = shl i32 %19, 1"];
	Node0x9cbb80[shape=record, label="  %27 = add i32 %14, %16"];
	Node0x9cbbf0[shape=record, label="  %28 = add i32 %27, %15"];
	Node0x9cbc90[shape=record, label="  %29 = mul i32 %28, 5"];
	Node0x9cbd30[shape=record, label="  %30 = add i32 %0, 7"];
	Node0x9cbda0[shape=record, label="  %31 = add i32 %30, %1"];
	Node0x9cbe10[shape=record, label="  %32 = sub i32 %31, %10"];
	Node0x9cc090[shape=record, label="  %33 = add i32 %32, %13"];
	Node0x9cc100[shape=record, label="  %34 = add i32 %33, %14"];
	Node0x9cc170[shape=record, label="  %35 = add i32 %34, %3"];
	Node0x9cc1e0[shape=record, label="  %36 = sub i32 %35, %12"];
	Node0x9cc250[shape=record, label="  %37 = add i32 %36, %17"];
	Node0x9cc2c0[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x9cc330[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x9cc3a0[shape=record, label="  %40 = sub i32 %39, %22"];
	Node0x9cc410[shape=record, label="  %41 = add i32 %40, %24"];
	Node0x9cc480[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x9cc4f0[shape=record, label="  %43 = add i32 %42, %25"];
	Node0x9cc560[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x9cc5d0[shape=record, label="  %45 = icmp eq i32 %9, %44"];
	Node0x96b268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x9cca70[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x9ccac0[shape=record, label="  ret void"];
	Node0x9cb150 -> Node0x9cb1c0;
	Node0x9cb1c0 -> Node0x9cb230;
	Node0x9cb230 -> Node0x9cb2a0;
	Node0x9cb2a0 -> Node0x9cb310;
	Node0x9cb310 -> Node0x9cb380;
	Node0x9cb380 -> Node0x9cb3f0;
	Node0x9cb3f0 -> Node0x9cb490;
	Node0x9cb490 -> Node0x9cb500;
	Node0x9cb500 -> Node0x9cb570;
	Node0x9cb570 -> Node0x9cb5e0;
	Node0x9cb5e0 -> Node0x9cb650;
	Node0x9cb650 -> Node0x9cb6f0;
	Node0x9cb6f0 -> Node0x9cb760;
	Node0x9cb760 -> Node0x9cb7d0;
	Node0x9cb7d0 -> Node0x9cb840;
	Node0x9cb840 -> Node0x9cb8b0;
	Node0x9cb8b0 -> Node0x9cb920;
	Node0x9cb920 -> Node0x9cb990;
	Node0x9cb990 -> Node0x9cba00;
	Node0x9cba00 -> Node0x9cbaa0;
	Node0x9cbaa0 -> Node0x9cbb10;
	Node0x9cbb10 -> Node0x9cbb80;
	Node0x9cbb80 -> Node0x9cbbf0;
	Node0x9cbbf0 -> Node0x9cbc90;
	Node0x9cbc90 -> Node0x9cbd30;
	Node0x9cbd30 -> Node0x9cbda0;
	Node0x9cbda0 -> Node0x9cbe10;
	Node0x9cbe10 -> Node0x9cc090;
	Node0x9cc090 -> Node0x9cc100;
	Node0x9cc100 -> Node0x9cc170;
	Node0x9cc170 -> Node0x9cc1e0;
	Node0x9cc1e0 -> Node0x9cc250;
	Node0x9cc250 -> Node0x9cc2c0;
	Node0x9cc2c0 -> Node0x9cc330;
	Node0x9cc330 -> Node0x9cc3a0;
	Node0x9cc3a0 -> Node0x9cc410;
	Node0x9cc410 -> Node0x9cc480;
	Node0x9cc480 -> Node0x9cc4f0;
	Node0x9cc4f0 -> Node0x9cc560;
	Node0x9cc560 -> Node0x9cc5d0;
	Node0x9cc5d0 -> Node0x96b268;
	Node0x96b268 -> Node0x9cca70;
	Node0x9cca70 -> Node0x9ccac0;
edge [color=red]
	Node0x9cb150 -> Node0x9cb1c0;
	Node0x9cb1c0 -> Node0x9cb2a0;
	Node0x9cb2a0 -> Node0x9cb310;
	Node0x9cb230 -> Node0x9cb310;
	Node0x9cb150 -> Node0x9cb380;
	Node0x9cb3f0 -> Node0x9cb490;
	Node0x9cb3f0 -> Node0x9cb5e0;
	Node0x9cb380 -> Node0x9cb650;
	Node0x9cb1c0 -> Node0x9cb6f0;
	Node0x9cb760 -> Node0x9cb7d0;
	Node0x9cb7d0 -> Node0x9cb840;
	Node0x9cb8b0 -> Node0x9cb920;
	Node0x9cb990 -> Node0x9cba00;
	Node0x9cba00 -> Node0x9cbaa0;
	Node0x9cb7d0 -> Node0x9cbb10;
	Node0x9cb570 -> Node0x9cbb80;
	Node0x9cb650 -> Node0x9cbb80;
	Node0x9cbb80 -> Node0x9cbbf0;
	Node0x9cb5e0 -> Node0x9cbbf0;
	Node0x9cbbf0 -> Node0x9cbc90;
	Node0x9cbd30 -> Node0x9cbda0;
	Node0x9cbda0 -> Node0x9cbe10;
	Node0x9cb380 -> Node0x9cbe10;
	Node0x9cbe10 -> Node0x9cc090;
	Node0x9cb500 -> Node0x9cc090;
	Node0x9cc090 -> Node0x9cc100;
	Node0x9cb570 -> Node0x9cc100;
	Node0x9cc100 -> Node0x9cc170;
	Node0x9cc170 -> Node0x9cc1e0;
	Node0x9cb490 -> Node0x9cc1e0;
	Node0x9cc1e0 -> Node0x9cc250;
	Node0x9cb6f0 -> Node0x9cc250;
	Node0x9cc250 -> Node0x9cc2c0;
	Node0x9cb840 -> Node0x9cc2c0;
	Node0x9cc2c0 -> Node0x9cc330;
	Node0x9cb8b0 -> Node0x9cc330;
	Node0x9cc330 -> Node0x9cc3a0;
	Node0x9cb920 -> Node0x9cc3a0;
	Node0x9cc3a0 -> Node0x9cc410;
	Node0x9cba00 -> Node0x9cc410;
	Node0x9cc410 -> Node0x9cc480;
	Node0x9cbb10 -> Node0x9cc480;
	Node0x9cc480 -> Node0x9cc4f0;
	Node0x9cbaa0 -> Node0x9cc4f0;
	Node0x9cc4f0 -> Node0x9cc560;
	Node0x9cbc90 -> Node0x9cc560;
	Node0x9cb310 -> Node0x9cc5d0;
	Node0x9cc560 -> Node0x9cc5d0;
	Node0x9cc5d0 -> Node0x96b268;
	Node0x96b268 -> Node0x9cca70;
}
