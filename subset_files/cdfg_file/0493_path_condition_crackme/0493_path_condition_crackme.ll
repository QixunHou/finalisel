; ModuleID = '../.././c_source_file/0493_path_condition_crackme.c'
source_filename = "../.././c_source_file/0493_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = or i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = mul i32 %7, -2
  %9 = xor i32 %2, %1
  %10 = or i32 %9, %0
  %11 = add i32 %8, %10
  %12 = xor i32 %9, -1
  %13 = add i32 %9, 1
  %14 = xor i32 %1, -1
  %15 = xor i32 %2, -1
  %16 = or i32 %15, %0
  %17 = and i32 %16, %14
  %18 = xor i32 %2, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %19, %6
  %21 = and i32 %15, %0
  %22 = or i32 %15, %1
  %23 = xor i32 %21, %22
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %19, %25
  %27 = and i32 %2, %1
  %28 = xor i32 %0, -1
  %29 = xor i32 %27, -1
  %30 = or i32 %29, %28
  %31 = and i32 %15, %25
  %32 = or i32 %12, %6
  %33 = and i32 %9, %0
  %34 = xor i32 %16, %1
  %35 = and i32 %1, %0
  %36 = or i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %35, %37
  %39 = xor i32 %4, %5
  %40 = or i32 %14, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %18, %41
  %43 = and i32 %27, %28
  %44 = or i32 %2, %1
  %45 = and i32 %44, %0
  %46 = xor i32 %45, 2147483647
  %47 = xor i32 %46, %43
  %48 = and i32 %14, %0
  %49 = or i32 %18, %48
  %50 = xor i32 %9, %0
  %51 = xor i32 %22, %0
  %52 = or i32 %19, %14
  %53 = shl i32 %52, 2
  %54 = xor i32 %22, -1
  %55 = or i32 %21, %54
  %56 = or i32 %4, %1
  %57 = and i32 %12, %0
  %58 = xor i32 %48, -1
  %59 = and i32 %15, %58
  %60 = xor i32 %16, -1
  %61 = or i32 %35, %60
  %62 = shl i32 %4, 1
  %63 = or i32 %24, %19
  %64 = or i32 %9, %48
  %65 = and i32 %14, %2
  %66 = and i32 %65, %0
  %67 = xor i32 %66, %10
  %68 = xor i32 %6, %2
  %69 = or i32 %35, %2
  %70 = and i32 %40, %15
  %71 = and i32 %36, %24
  %72 = add i32 %36, 1
  %73 = or i32 %21, %25
  %74 = or i32 %35, %19
  %75 = xor i32 %36, %1
  %76 = and i32 %22, %0
  %77 = or i32 %44, %0
  %78 = and i32 %16, %24
  %79 = and i32 %27, %0
  %80 = xor i32 %44, %0
  %81 = or i32 %79, %80
  %82 = and i32 %24, %19
  %83 = shl i32 %82, 1
  %84 = xor i32 %44, -1
  %85 = or i32 %4, %84
  %86 = xor i32 %35, -1
  %87 = and i32 %86, %2
  %88 = and i32 %15, %1
  %89 = or i32 %88, %0
  %90 = shl i32 %89, 1
  %91 = or i32 %21, %1
  %92 = and i32 %65, %28
  %93 = or i32 %14, %2
  %94 = and i32 %93, %0
  %95 = or i32 %92, %94
  %96 = shl i32 %95, 1
  %97 = and i32 %44, %28
  %98 = or i32 %79, %97
  %99 = xor i32 %35, %2
  %100 = or i32 %21, %27
  %101 = xor i32 %4, -1
  %102 = and i32 %101, %1
  %103 = or i32 %60, %25
  %104 = or i32 %12, %0
  %105 = or i32 %35, %15
  %106 = xor i32 %33, -1
  %107 = xor i32 %43, %106
  %108 = or i32 %88, %28
  %109 = and i32 %18, %40
  %110 = or i32 %24, %2
  %111 = shl i32 %110, 1
  %112 = or i32 %18, %25
  %113 = xor i32 %80, 2147483647
  %114 = xor i32 %113, %79
  %115 = shl i32 %114, 1
  %116 = xor i32 %21, %1
  %117 = or i32 %19, %41
  %118 = or i32 %27, %0
  %119 = or i32 %60, %1
  %120 = add i32 %22, 1
  %121 = and i32 %24, %2
  %122 = xor i32 %50, -1
  %123 = or i32 %79, %122
  %124 = xor i32 %12, %0
  %125 = and i32 %29, %28
  %126 = shl i32 %125, 2
  %127 = or i32 %43, %45
  %128 = shl i32 %127, 1
  %129 = and i32 %5, %12
  %130 = xor i32 %60, %1
  %131 = shl i32 %130, 1
  %132 = and i32 %36, %14
  %133 = xor i32 %86, %2
  %134 = or i32 %9, %6
  %135 = or i32 %48, %15
  %136 = and i32 %18, %14
  %137 = or i32 %48, %2
  %138 = shl i32 %137, 2
  %139 = xor i32 %48, %29
  %140 = xor i32 %10, -1
  %141 = or i32 %66, %140
  %142 = or i32 %27, %48
  %143 = xor i32 %21, %29
  %144 = and i32 %12, %28
  %145 = xor i32 %88, -1
  %146 = or i32 %145, %28
  %147 = shl i32 %146, 1
  %148 = or i32 %4, %24
  %149 = or i32 %12, %28
  %150 = or i32 %92, %57
  %151 = add i32 %44, 1
  %152 = and i32 %58, %2
  %153 = shl i32 %152, 1
  %154 = and i32 %18, %25
  %155 = xor i32 %4, %40
  %156 = and i32 %9, %86
  %157 = or i32 %18, %14
  %158 = or i32 %44, %28
  %159 = and i32 %93, %28
  %160 = or i32 %66, %159
  %161 = and i32 %18, %86
  %162 = xor i32 %21, -1
  %163 = and i32 %24, %162
  %164 = or i32 %84, %0
  %165 = or i32 %37, %1
  %166 = or i32 %66, %50
  %167 = xor i32 %16, %35
  %168 = or i32 %22, %28
  %169 = or i32 %25, %2
  %170 = or i32 %27, %28
  %171 = xor i32 %41, %2
  %172 = shl i32 %171, 2
  %173 = add i32 %88, 1
  %174 = xor i32 %97, -1
  %175 = xor i32 %79, %174
  %176 = and i32 %18, %58
  %177 = and i32 %145, %28
  %178 = and i32 %9, %40
  %179 = and i32 %101, %25
  %180 = or i32 %6, %2
  %181 = and i32 %84, %28
  %182 = shl i32 %181, 4
  %183 = and i32 %88, %28
  %184 = mul i32 %183, 7
  %185 = and i32 %88, %0
  %186 = shl i32 %185, 1
  %187 = and i32 %54, %28
  %188 = shl i32 %187, 1
  %189 = mul i32 %43, -13
  %190 = and i32 %54, %0
  %191 = mul i32 %190, 14
  %192 = add i32 %149, %13
  %193 = add i32 %192, %102
  %194 = add i32 %193, %91
  %195 = add i32 %194, %64
  %196 = add i32 %195, %49
  %197 = add i32 %196, %81
  %198 = add i32 %197, %47
  %199 = shl i32 %198, 1
  %200 = sub i32 %79, %165
  %201 = sub i32 %200, %51
  %202 = mul i32 %201, 3
  %203 = sub i32 %77, %21
  %204 = mul i32 %203, 5
  %205 = add i32 %1, -1
  %206 = add i32 %205, %15
  %207 = add i32 %206, %6
  %208 = add i32 %207, %48
  %209 = sub i32 %208, %40
  %210 = add i32 %209, %27
  %211 = add i32 %210, %31
  %212 = sub i32 %211, %59
  %213 = add i32 %212, %68
  %214 = add i32 %213, %69
  %215 = add i32 %214, %70
  %216 = add i32 %215, %72
  %217 = sub i32 %216, %87
  %218 = sub i32 %217, %99
  %219 = sub i32 %218, %105
  %220 = add i32 %219, %120
  %221 = sub i32 %220, %121
  %222 = add i32 %221, %133
  %223 = sub i32 %222, %135
  %224 = add i32 %223, %151
  %225 = add i32 %224, %169
  %226 = add i32 %225, %173
  %227 = sub i32 %226, %180
  %228 = sub i32 %227, %17
  %229 = add i32 %228, %20
  %230 = sub i32 %229, %23
  %231 = sub i32 %230, %26
  %232 = sub i32 %231, %30
  %233 = sub i32 %232, %32
  %234 = sub i32 %233, %33
  %235 = sub i32 %234, %34
  %236 = add i32 %235, %38
  %237 = sub i32 %236, %39
  %238 = add i32 %237, %42
  %239 = sub i32 %238, %50
  %240 = sub i32 %239, %55
  %241 = add i32 %240, %56
  %242 = add i32 %241, %57
  %243 = add i32 %242, %61
  %244 = sub i32 %243, %62
  %245 = add i32 %244, %63
  %246 = sub i32 %245, %71
  %247 = add i32 %246, %73
  %248 = sub i32 %247, %74
  %249 = sub i32 %248, %75
  %250 = sub i32 %249, %76
  %251 = sub i32 %250, %78
  %252 = sub i32 %251, %85
  %253 = add i32 %252, %80
  %254 = add i32 %253, %100
  %255 = add i32 %254, %103
  %256 = sub i32 %255, %104
  %257 = add i32 %256, %108
  %258 = add i32 %257, %109
  %259 = sub i32 %258, %111
  %260 = add i32 %259, %112
  %261 = add i32 %260, %116
  %262 = add i32 %261, %117
  %263 = add i32 %262, %118
  %264 = sub i32 %263, %119
  %265 = sub i32 %264, %124
  %266 = add i32 %265, %129
  %267 = sub i32 %266, %132
  %268 = add i32 %267, %134
  %269 = add i32 %268, %136
  %270 = add i32 %269, %138
  %271 = sub i32 %270, %139
  %272 = add i32 %271, %142
  %273 = add i32 %272, %143
  %274 = sub i32 %273, %144
  %275 = add i32 %274, %148
  %276 = sub i32 %275, %153
  %277 = add i32 %276, %154
  %278 = add i32 %277, %155
  %279 = add i32 %278, %156
  %280 = sub i32 %279, %157
  %281 = add i32 %280, %158
  %282 = add i32 %281, %161
  %283 = add i32 %282, %163
  %284 = add i32 %283, %164
  %285 = add i32 %284, %167
  %286 = sub i32 %285, %168
  %287 = sub i32 %286, %170
  %288 = sub i32 %287, %172
  %289 = add i32 %288, %176
  %290 = add i32 %289, %177
  %291 = add i32 %290, %178
  %292 = sub i32 %291, %179
  %293 = sub i32 %292, %53
  %294 = sub i32 %293, %67
  %295 = sub i32 %294, %83
  %296 = sub i32 %295, %90
  %297 = add i32 %296, %98
  %298 = sub i32 %297, %107
  %299 = add i32 %298, %123
  %300 = sub i32 %299, %126
  %301 = sub i32 %300, %131
  %302 = add i32 %301, %141
  %303 = sub i32 %302, %147
  %304 = sub i32 %303, %150
  %305 = sub i32 %304, %160
  %306 = add i32 %305, %166
  %307 = sub i32 %306, %175
  %308 = add i32 %307, %182
  %309 = add i32 %308, %184
  %310 = sub i32 %309, %186
  %311 = sub i32 %310, %188
  %312 = add i32 %311, %189
  %313 = add i32 %312, %191
  %314 = sub i32 %313, %96
  %315 = sub i32 %314, %128
  %316 = add i32 %315, %204
  %317 = sub i32 %316, %115
  %318 = add i32 %317, %202
  %319 = add i32 %318, %199
  %320 = icmp eq i32 %11, %319
  %321 = select i1 %320, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %322 = tail call i32 @puts(i8* nonnull dereferenceable(1) %321)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
