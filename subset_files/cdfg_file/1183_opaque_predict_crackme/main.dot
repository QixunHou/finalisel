digraph "DFG for'main' function" {
	Node0xf37cb8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xf37d38[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xf37dc8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xf37e28[shape=record, label="  %4 = alloca i32, align 4"];
	Node0xf37ed8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0xf38308[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf383e8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0xf384e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf385a8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0xf38658[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xf38718[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0xf387c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xf32790[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0xf389c8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xf39938[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xf39fa8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xf3a008[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0xf3a118[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0xf3a378[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xf3a4d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xf3a5e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf3a6f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf3a7b8[shape=record, label="  ret i32 0"];
	Node0xf37cb8 -> Node0xf37d38;
	Node0xf37d38 -> Node0xf37dc8;
	Node0xf37dc8 -> Node0xf37e28;
	Node0xf37e28 -> Node0xf37ed8;
	Node0xf37ed8 -> Node0xf38308;
	Node0xf38308 -> Node0xf383e8;
	Node0xf383e8 -> Node0xf384e8;
	Node0xf384e8 -> Node0xf385a8;
	Node0xf385a8 -> Node0xf38658;
	Node0xf38658 -> Node0xf38718;
	Node0xf38718 -> Node0xf387c8;
	Node0xf387c8 -> Node0xf32790;
	Node0xf32790 -> Node0xf389c8;
	Node0xf389c8 -> Node0xf39938;
	Node0xf39938 -> Node0xf39fa8;
	Node0xf39fa8 -> Node0xf3a008;
	Node0xf3a008 -> Node0xf3a118;
	Node0xf3a118 -> Node0xf3a378;
	Node0xf3a378 -> Node0xf3a4d8;
	Node0xf3a4d8 -> Node0xf3a5e8;
	Node0xf3a5e8 -> Node0xf3a6f8;
	Node0xf3a6f8 -> Node0xf3a7b8;
edge [color=red]
	Node0xf37cb8 -> Node0xf37ed8;
	Node0xf37ed8 -> Node0xf38308;
	Node0xf37d38 -> Node0xf383e8;
	Node0xf383e8 -> Node0xf384e8;
	Node0xf37dc8 -> Node0xf385a8;
	Node0xf385a8 -> Node0xf38658;
	Node0xf37e28 -> Node0xf38718;
	Node0xf38718 -> Node0xf387c8;
	Node0xf37cb8 -> Node0xf32790;
	Node0xf37d38 -> Node0xf32790;
	Node0xf37dc8 -> Node0xf32790;
	Node0xf37e28 -> Node0xf32790;
	Node0xf37cb8 -> Node0xf389c8;
	Node0xf37d38 -> Node0xf39938;
	Node0xf37dc8 -> Node0xf39fa8;
	Node0xf37e28 -> Node0xf3a008;
	Node0xf389c8 -> Node0xf3a118;
	Node0xf39938 -> Node0xf3a118;
	Node0xf39fa8 -> Node0xf3a118;
	Node0xf3a008 -> Node0xf3a118;
	Node0xf38718 -> Node0xf3a378;
	Node0xf385a8 -> Node0xf3a4d8;
	Node0xf383e8 -> Node0xf3a5e8;
	Node0xf37ed8 -> Node0xf3a6f8;
}
