digraph "DFG for'crackme' function" {
	Node0x10da360[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x10da3d0[shape=record, label="  %4 = add i32 %3, %0"];
	Node0x10daaa0[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x10dab10[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x10dabb0[shape=record, label="  %7 = xor i32 %3, -1"];
	Node0x10dac50[shape=record, label="  %8 = mul i32 %7, 3"];
	Node0x10dacc0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x10dad30[shape=record, label="  %10 = and i32 %9, %1"];
	Node0x10dada0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x10dae10[shape=record, label="  %12 = add i32 %6, 3"];
	Node0x10dae80[shape=record, label="  %13 = add i32 %12, %10"];
	Node0x10daef0[shape=record, label="  %14 = add i32 %13, %11"];
	Node0x10daf60[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x10dafd0[shape=record, label="  %16 = icmp eq i32 %15, %5"];
	Node0x107b268[shape=record, label="  %17 = select i1 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10db470[shape=record, label="  %18 = tail call i32 @puts(i8* nonnull dereferenceable(1) %17)"];
	Node0x10db4c0[shape=record, label="  ret void"];
	Node0x10da360 -> Node0x10da3d0;
	Node0x10da3d0 -> Node0x10daaa0;
	Node0x10daaa0 -> Node0x10dab10;
	Node0x10dab10 -> Node0x10dabb0;
	Node0x10dabb0 -> Node0x10dac50;
	Node0x10dac50 -> Node0x10dacc0;
	Node0x10dacc0 -> Node0x10dad30;
	Node0x10dad30 -> Node0x10dada0;
	Node0x10dada0 -> Node0x10dae10;
	Node0x10dae10 -> Node0x10dae80;
	Node0x10dae80 -> Node0x10daef0;
	Node0x10daef0 -> Node0x10daf60;
	Node0x10daf60 -> Node0x10dafd0;
	Node0x10dafd0 -> Node0x107b268;
	Node0x107b268 -> Node0x10db470;
	Node0x10db470 -> Node0x10db4c0;
edge [color=red]
	Node0x10da360 -> Node0x10da3d0;
	Node0x10da3d0 -> Node0x10daaa0;
	Node0x10da360 -> Node0x10dabb0;
	Node0x10dabb0 -> Node0x10dac50;
	Node0x10dacc0 -> Node0x10dad30;
	Node0x10dab10 -> Node0x10dae10;
	Node0x10dae10 -> Node0x10dae80;
	Node0x10dad30 -> Node0x10dae80;
	Node0x10dae80 -> Node0x10daef0;
	Node0x10dada0 -> Node0x10daef0;
	Node0x10daef0 -> Node0x10daf60;
	Node0x10dac50 -> Node0x10daf60;
	Node0x10daf60 -> Node0x10dafd0;
	Node0x10daaa0 -> Node0x10dafd0;
	Node0x10dafd0 -> Node0x107b268;
	Node0x107b268 -> Node0x10db470;
}
