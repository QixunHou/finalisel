digraph "DFG for'crackme' function" {
	Node0x15dbbe0[shape=record, label="  %3 = shl i32 %1, 1"];
	Node0x15dbc50[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x15dbd10[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x15dbd80[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x15dbdf0[shape=record, label="  %7 = add i32 %6, %3"];
	Node0x15dbe90[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x15dbf00[shape=record, label="  %9 = or i32 %8, %0"];
	Node0x15dbf70[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x15dbfe0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x15dc050[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x15dc0c0[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x15dc130[shape=record, label="  %14 = or i32 %13, %1"];
	Node0x15dc1d0[shape=record, label="  %15 = mul i32 %14, -3"];
	Node0x15dc270[shape=record, label="  %16 = shl i32 %9, 3"];
	Node0x15dc310[shape=record, label="  %17 = xor i32 %16, -8"];
	Node0x15dc380[shape=record, label="  %18 = shl i32 %12, 1"];
	Node0x15dc3f0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x15dc460[shape=record, label="  %20 = add i32 %8, %0"];
	Node0x15dc4d0[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x15dc540[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x15dc5b0[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x15dc620[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x15dc690[shape=record, label="  %25 = add i32 %24, %5"];
	Node0x15dc700[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x15dc770[shape=record, label="  %27 = add i32 %26, %17"];
	Node0x15dc7e0[shape=record, label="  %28 = icmp eq i32 %7, %27"];
	Node0x157c268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x15dcc80[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x15dccd0[shape=record, label="  ret void"];
	Node0x15dbbe0 -> Node0x15dbc50;
	Node0x15dbc50 -> Node0x15dbd10;
	Node0x15dbd10 -> Node0x15dbd80;
	Node0x15dbd80 -> Node0x15dbdf0;
	Node0x15dbdf0 -> Node0x15dbe90;
	Node0x15dbe90 -> Node0x15dbf00;
	Node0x15dbf00 -> Node0x15dbf70;
	Node0x15dbf70 -> Node0x15dbfe0;
	Node0x15dbfe0 -> Node0x15dc050;
	Node0x15dc050 -> Node0x15dc0c0;
	Node0x15dc0c0 -> Node0x15dc130;
	Node0x15dc130 -> Node0x15dc1d0;
	Node0x15dc1d0 -> Node0x15dc270;
	Node0x15dc270 -> Node0x15dc310;
	Node0x15dc310 -> Node0x15dc380;
	Node0x15dc380 -> Node0x15dc3f0;
	Node0x15dc3f0 -> Node0x15dc460;
	Node0x15dc460 -> Node0x15dc4d0;
	Node0x15dc4d0 -> Node0x15dc540;
	Node0x15dc540 -> Node0x15dc5b0;
	Node0x15dc5b0 -> Node0x15dc620;
	Node0x15dc620 -> Node0x15dc690;
	Node0x15dc690 -> Node0x15dc700;
	Node0x15dc700 -> Node0x15dc770;
	Node0x15dc770 -> Node0x15dc7e0;
	Node0x15dc7e0 -> Node0x157c268;
	Node0x157c268 -> Node0x15dcc80;
	Node0x15dcc80 -> Node0x15dccd0;
edge [color=red]
	Node0x15dbc50 -> Node0x15dbd10;
	Node0x15dbd10 -> Node0x15dbd80;
	Node0x15dbd80 -> Node0x15dbdf0;
	Node0x15dbbe0 -> Node0x15dbdf0;
	Node0x15dbe90 -> Node0x15dbf00;
	Node0x15dbf70 -> Node0x15dbfe0;
	Node0x15dc0c0 -> Node0x15dc130;
	Node0x15dc130 -> Node0x15dc1d0;
	Node0x15dbf00 -> Node0x15dc270;
	Node0x15dc270 -> Node0x15dc310;
	Node0x15dc050 -> Node0x15dc380;
	Node0x15dc380 -> Node0x15dc3f0;
	Node0x15dbe90 -> Node0x15dc460;
	Node0x15dc460 -> Node0x15dc4d0;
	Node0x15dbf00 -> Node0x15dc4d0;
	Node0x15dc4d0 -> Node0x15dc540;
	Node0x15dbf70 -> Node0x15dc540;
	Node0x15dc540 -> Node0x15dc5b0;
	Node0x15dbfe0 -> Node0x15dc5b0;
	Node0x15dc5b0 -> Node0x15dc620;
	Node0x15dc1d0 -> Node0x15dc620;
	Node0x15dc620 -> Node0x15dc690;
	Node0x15dbd10 -> Node0x15dc690;
	Node0x15dc690 -> Node0x15dc700;
	Node0x15dc3f0 -> Node0x15dc700;
	Node0x15dc700 -> Node0x15dc770;
	Node0x15dc310 -> Node0x15dc770;
	Node0x15dbdf0 -> Node0x15dc7e0;
	Node0x15dc770 -> Node0x15dc7e0;
	Node0x15dc7e0 -> Node0x157c268;
	Node0x157c268 -> Node0x15dcc80;
}
