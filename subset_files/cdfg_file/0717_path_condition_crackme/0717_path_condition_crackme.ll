; ModuleID = '../.././c_source_file/0717_path_condition_crackme.c'
source_filename = "../.././c_source_file/0717_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = or i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %10, %8
  %12 = add i32 %6, %11
  %13 = xor i32 %4, %3
  %14 = xor i32 %4, -1
  %15 = and i32 %14, %3
  %16 = xor i32 %15, -1
  %17 = shl i32 %4, 1
  %18 = xor i32 %6, -1
  %19 = xor i32 %3, 2147483647
  %20 = and i32 %19, %4
  %21 = and i32 %4, %3
  %22 = and i32 %2, %1
  %23 = and i32 %22, %0
  %24 = xor i32 %0, -1
  %25 = or i32 %2, %1
  %26 = and i32 %25, %24
  %27 = or i32 %23, %26
  %28 = and i32 %9, %0
  %29 = and i32 %2, %0
  %30 = or i32 %29, %8
  %31 = shl i32 %30, 1
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %7, %33
  %35 = and i32 %32, %1
  %36 = xor i32 %2, -1
  %37 = and i32 %36, %1
  %38 = or i32 %37, %24
  %39 = shl i32 %38, 1
  %40 = or i32 %29, %37
  %41 = xor i32 %1, -1
  %42 = or i32 %41, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %10, %43
  %45 = xor i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %46, %2
  %48 = and i32 %41, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %32, %49
  %51 = or i32 %36, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %9, %48
  %54 = or i32 %10, %24
  %55 = xor i32 %29, -1
  %56 = and i32 %55, %1
  %57 = or i32 %36, %1
  %58 = xor i32 %57, %0
  %59 = or i32 %2, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %41
  %62 = shl i32 %10, 1
  %63 = xor i32 %7, %2
  %64 = and i32 %1, %0
  %65 = or i32 %64, %10
  %66 = shl i32 %65, 1
  %67 = and i32 %10, %24
  %68 = xor i32 %25, -1
  %69 = or i32 %64, %68
  %70 = xor i32 %49, %2
  %71 = and i32 %22, %24
  %72 = and i32 %25, %0
  %73 = xor i32 %72, -1
  %74 = xor i32 %71, %73
  %75 = and i32 %36, %0
  %76 = xor i32 %75, -1
  %77 = xor i32 %76, %1
  %78 = xor i32 %22, -1
  %79 = and i32 %78, %24
  %80 = shl i32 %79, 2
  %81 = and i32 %41, %2
  %82 = and i32 %81, %0
  %83 = or i32 %41, %2
  %84 = and i32 %83, %24
  %85 = or i32 %82, %84
  %86 = or i32 %64, %2
  %87 = shl i32 %86, 1
  %88 = or i32 %36, %43
  %89 = xor i32 %8, %2
  %90 = and i32 %7, %36
  %91 = or i32 %32, %43
  %92 = shl i32 %91, 1
  %93 = or i32 %22, %24
  %94 = or i32 %75, %1
  %95 = add i32 %25, 1
  %96 = or i32 %45, %33
  %97 = add i32 %29, 1
  %98 = and i32 %55, %41
  %99 = xor i32 %25, %24
  %100 = xor i32 %99, %23
  %101 = and i32 %81, %24
  %102 = and i32 %83, %0
  %103 = or i32 %101, %102
  %104 = and i32 %33, %41
  %105 = xor i32 %57, %64
  %106 = xor i32 %64, -1
  %107 = and i32 %32, %106
  %108 = add i32 %48, 1
  %109 = or i32 %33, %43
  %110 = or i32 %60, %46
  %111 = or i32 %37, %0
  %112 = or i32 %33, %1
  %113 = and i32 %33, %106
  %114 = or i32 %33, %46
  %115 = or i32 %48, %36
  %116 = or i32 %9, %64
  %117 = xor i32 %43, %2
  %118 = and i32 %32, %45
  %119 = or i32 %64, %60
  %120 = xor i32 %9, %0
  %121 = xor i32 %23, %120
  %122 = or i32 %64, %52
  %123 = xor i32 %83, %0
  %124 = or i32 %82, %123
  %125 = and i32 %42, %2
  %126 = xor i32 %59, %1
  %127 = or i32 %29, %1
  %128 = or i32 %57, %0
  %129 = or i32 %9, %0
  %130 = or i32 %45, %60
  %131 = or i32 %9, %24
  %132 = and i32 %45, %36
  %133 = and i32 %76, %46
  %134 = or i32 %29, %41
  %135 = add i32 %7, 1
  %136 = and i32 %76, %1
  %137 = shl i32 %136, 1
  %138 = and i32 %33, %46
  %139 = shl i32 %36, 1
  %140 = and i32 %59, %41
  %141 = xor i32 %75, %78
  %142 = and i32 %57, %0
  %143 = xor i32 %55, %1
  %144 = or i32 %52, %41
  %145 = xor i32 %129, -1
  %146 = or i32 %82, %145
  %147 = xor i32 %57, -1
  %148 = or i32 %147, %24
  %149 = or i32 %48, %10
  %150 = and i32 %45, %33
  %151 = or i32 %147, %0
  %152 = shl i32 %151, 1
  %153 = xor i32 %37, %49
  %154 = xor i32 %120, -1
  %155 = xor i32 %82, %154
  %156 = xor i32 %42, %2
  %157 = xor i32 %48, %78
  %158 = or i32 %29, %43
  %159 = or i32 %32, %46
  %160 = shl i32 %159, 1
  %161 = or i32 %75, %147
  %162 = or i32 %32, %45
  %163 = and i32 %51, %46
  %164 = or i32 %32, %64
  %165 = or i32 %37, %48
  %166 = shl i32 %165, 1
  %167 = and i32 %7, %2
  %168 = or i32 %78, %24
  %169 = and i32 %10, %0
  %170 = and i32 %32, %7
  %171 = or i32 %48, %2
  %172 = and i32 %45, %76
  %173 = and i32 %36, %49
  %174 = xor i32 %22, %0
  %175 = or i32 %45, %36
  %176 = or i32 %57, %24
  %177 = xor i32 %60, %1
  %178 = or i32 %75, %46
  %179 = and i32 %42, %33
  %180 = or i32 %9, %43
  %181 = and i32 %57, %24
  %182 = xor i32 %29, %1
  %183 = and i32 %36, %46
  %184 = xor i32 %131, 2147483647
  %185 = or i32 %184, %101
  %186 = shl i32 %185, 1
  %187 = or i32 %52, %1
  %188 = shl i32 %187, 2
  %189 = or i32 %64, %147
  %190 = xor i32 %37, %0
  %191 = and i32 %68, %24
  %192 = and i32 %37, %24
  %193 = and i32 %68, %0
  %194 = shl i32 %193, 3
  %195 = and i32 %37, %0
  %196 = mul i32 %195, 17
  %197 = and i32 %147, %24
  %198 = mul i32 %71, 15
  %199 = and i32 %147, %0
  %200 = mul i32 %199, -12
  %201 = add i32 %171, %173
  %202 = add i32 %201, %37
  %203 = add i32 %202, %70
  %204 = add i32 %203, %3
  %205 = sub i32 %95, %88
  %206 = add i32 %205, %107
  %207 = add i32 %206, %181
  %208 = sub i32 %207, %35
  %209 = mul i32 %208, 5
  %210 = add i32 %63, %117
  %211 = sub i32 %116, %210
  %212 = mul i32 %211, 3
  %213 = sub i32 %197, %192
  %214 = mul i32 %213, 6
  %215 = add i32 %191, %33
  %216 = shl i32 %215, 2
  %217 = add i32 %204, %132
  %218 = add i32 %217, %190
  %219 = add i32 %218, %180
  %220 = add i32 %219, %179
  %221 = add i32 %220, %157
  %222 = add i32 %221, %126
  %223 = add i32 %222, %104
  %224 = add i32 %223, %94
  %225 = add i32 %224, %69
  %226 = add i32 %225, %54
  %227 = add i32 %226, %20
  %228 = add i32 %227, %21
  %229 = add i32 %228, %13
  %230 = shl i32 %229, 1
  %231 = shl i32 %0, 1
  %232 = add i32 %231, 3
  %233 = add i32 %232, %41
  %234 = add i32 %233, %2
  %235 = add i32 %234, %46
  %236 = sub i32 %235, %42
  %237 = add i32 %236, %48
  %238 = add i32 %237, %108
  %239 = add i32 %238, %135
  %240 = add i32 %239, %64
  %241 = add i32 %240, %7
  %242 = add i32 %241, %47
  %243 = add i32 %242, %52
  %244 = add i32 %243, %9
  %245 = add i32 %244, %89
  %246 = add i32 %245, %90
  %247 = add i32 %246, %97
  %248 = add i32 %247, %75
  %249 = sub i32 %248, %115
  %250 = add i32 %249, %125
  %251 = sub i32 %250, %139
  %252 = add i32 %251, %78
  %253 = add i32 %252, %156
  %254 = add i32 %253, %60
  %255 = add i32 %254, %167
  %256 = add i32 %255, %147
  %257 = add i32 %256, %175
  %258 = sub i32 %257, %25
  %259 = sub i32 %258, %183
  %260 = sub i32 %259, %28
  %261 = add i32 %260, %34
  %262 = add i32 %261, %40
  %263 = add i32 %262, %44
  %264 = sub i32 %263, %50
  %265 = sub i32 %264, %53
  %266 = add i32 %265, %56
  %267 = add i32 %266, %58
  %268 = add i32 %267, %61
  %269 = sub i32 %268, %62
  %270 = sub i32 %269, %67
  %271 = add i32 %270, %77
  %272 = sub i32 %271, %87
  %273 = add i32 %272, %93
  %274 = add i32 %273, %96
  %275 = add i32 %274, %98
  %276 = sub i32 %275, %105
  %277 = add i32 %276, %109
  %278 = add i32 %277, %110
  %279 = sub i32 %278, %111
  %280 = add i32 %279, %112
  %281 = sub i32 %280, %113
  %282 = sub i32 %281, %114
  %283 = add i32 %282, %118
  %284 = add i32 %283, %119
  %285 = add i32 %284, %122
  %286 = sub i32 %285, %127
  %287 = sub i32 %286, %128
  %288 = sub i32 %287, %129
  %289 = sub i32 %288, %130
  %290 = sub i32 %289, %131
  %291 = sub i32 %290, %133
  %292 = add i32 %291, %134
  %293 = sub i32 %292, %138
  %294 = add i32 %293, %140
  %295 = add i32 %294, %141
  %296 = sub i32 %295, %142
  %297 = add i32 %296, %143
  %298 = sub i32 %297, %144
  %299 = sub i32 %298, %148
  %300 = sub i32 %299, %149
  %301 = add i32 %300, %150
  %302 = sub i32 %301, %153
  %303 = sub i32 %302, %158
  %304 = sub i32 %303, %161
  %305 = add i32 %304, %162
  %306 = add i32 %305, %163
  %307 = add i32 %306, %164
  %308 = sub i32 %307, %168
  %309 = sub i32 %308, %169
  %310 = sub i32 %309, %170
  %311 = add i32 %310, %172
  %312 = sub i32 %311, %174
  %313 = sub i32 %312, %176
  %314 = sub i32 %313, %177
  %315 = add i32 %314, %178
  %316 = sub i32 %315, %182
  %317 = sub i32 %316, %72
  %318 = add i32 %317, %189
  %319 = add i32 %318, %16
  %320 = sub i32 %319, %17
  %321 = add i32 %320, %18
  %322 = sub i32 %321, %15
  %323 = sub i32 %322, %27
  %324 = sub i32 %323, %31
  %325 = sub i32 %324, %39
  %326 = sub i32 %325, %66
  %327 = add i32 %326, %74
  %328 = sub i32 %327, %80
  %329 = sub i32 %328, %85
  %330 = sub i32 %329, %92
  %331 = sub i32 %330, %100
  %332 = sub i32 %331, %103
  %333 = add i32 %332, %121
  %334 = add i32 %333, %124
  %335 = sub i32 %334, %137
  %336 = sub i32 %335, %146
  %337 = sub i32 %336, %152
  %338 = add i32 %337, %155
  %339 = sub i32 %338, %160
  %340 = sub i32 %339, %166
  %341 = sub i32 %340, %188
  %342 = add i32 %341, %194
  %343 = add i32 %342, %196
  %344 = add i32 %343, %198
  %345 = add i32 %344, %200
  %346 = add i32 %345, %214
  %347 = add i32 %346, %216
  %348 = sub i32 %347, %186
  %349 = add i32 %348, %212
  %350 = add i32 %349, %209
  %351 = add i32 %350, %230
  %352 = icmp eq i32 %12, %351
  %353 = select i1 %352, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %354 = tail call i32 @puts(i8* nonnull dereferenceable(1) %353)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
