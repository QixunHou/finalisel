digraph "DFG for'main' function" {
	Node0x1f7aaa8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1f7ab28[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1f7abb8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1f7b018[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1f7b0f8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1f7b218[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1f7b450[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1f7b508[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1f7c478[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1f7cb00[shape=record, label="  %8 = or i32 %7, %6"];
	Node0x1f7cb70[shape=record, label="  %9 = shl i32 %6, 1"];
	Node0x1f7cbe0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1f7cc50[shape=record, label="  %11 = xor i32 %7, -1"];
	Node0x1f7ccc0[shape=record, label="  %12 = or i32 %6, %11"];
	Node0x1f7cd30[shape=record, label="  %13 = and i32 %6, %11"];
	Node0x1f7cda0[shape=record, label="  %14 = and i32 %7, %6"];
	Node0x1f7ce10[shape=record, label="  %15 = shl i32 %8, 2"];
	Node0x1f7ce80[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0x1f7cef0[shape=record, label="  %17 = add i32 %13, %11"];
	Node0x1f7cf60[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x1f7cfd0[shape=record, label="  %19 = add i32 %18, %14"];
	Node0x1f7d040[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x1f7d0b0[shape=record, label="  %21 = sub i32 2, %9"];
	Node0x1f7d120[shape=record, label="  %22 = add i32 %21, %7"];
	Node0x1f7d190[shape=record, label="  %23 = add i32 %22, %10"];
	Node0x1f7d200[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0x1f7d270[shape=record, label="  %25 = sub i32 %24, %16"];
	Node0x1f7d2e0[shape=record, label="  %26 = add i32 %25, %20"];
	Node0x1f7d350[shape=record, label="  %27 = icmp eq i32 %8, %26"];
	Node0x1f1b9d8[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f7d3e0[shape=record, label="  %29 = call i32 @puts(i8* nonnull dereferenceable(1) %28) #5"];
	Node0x1f7d638[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1f7d798[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1f7d858[shape=record, label="  ret i32 0"];
	Node0x1f7aaa8 -> Node0x1f7ab28;
	Node0x1f7ab28 -> Node0x1f7abb8;
	Node0x1f7abb8 -> Node0x1f7b018;
	Node0x1f7b018 -> Node0x1f7b0f8;
	Node0x1f7b0f8 -> Node0x1f7b218;
	Node0x1f7b218 -> Node0x1f7b450;
	Node0x1f7b450 -> Node0x1f7b508;
	Node0x1f7b508 -> Node0x1f7c478;
	Node0x1f7c478 -> Node0x1f7cb00;
	Node0x1f7cb00 -> Node0x1f7cb70;
	Node0x1f7cb70 -> Node0x1f7cbe0;
	Node0x1f7cbe0 -> Node0x1f7cc50;
	Node0x1f7cc50 -> Node0x1f7ccc0;
	Node0x1f7ccc0 -> Node0x1f7cd30;
	Node0x1f7cd30 -> Node0x1f7cda0;
	Node0x1f7cda0 -> Node0x1f7ce10;
	Node0x1f7ce10 -> Node0x1f7ce80;
	Node0x1f7ce80 -> Node0x1f7cef0;
	Node0x1f7cef0 -> Node0x1f7cf60;
	Node0x1f7cf60 -> Node0x1f7cfd0;
	Node0x1f7cfd0 -> Node0x1f7d040;
	Node0x1f7d040 -> Node0x1f7d0b0;
	Node0x1f7d0b0 -> Node0x1f7d120;
	Node0x1f7d120 -> Node0x1f7d190;
	Node0x1f7d190 -> Node0x1f7d200;
	Node0x1f7d200 -> Node0x1f7d270;
	Node0x1f7d270 -> Node0x1f7d2e0;
	Node0x1f7d2e0 -> Node0x1f7d350;
	Node0x1f7d350 -> Node0x1f1b9d8;
	Node0x1f1b9d8 -> Node0x1f7d3e0;
	Node0x1f7d3e0 -> Node0x1f7d638;
	Node0x1f7d638 -> Node0x1f7d798;
	Node0x1f7d798 -> Node0x1f7d858;
edge [color=red]
	Node0x1f7aaa8 -> Node0x1f7abb8;
	Node0x1f7abb8 -> Node0x1f7b018;
	Node0x1f7ab28 -> Node0x1f7b0f8;
	Node0x1f7b0f8 -> Node0x1f7b218;
	Node0x1f7aaa8 -> Node0x1f7b450;
	Node0x1f7ab28 -> Node0x1f7b450;
	Node0x1f7aaa8 -> Node0x1f7b508;
	Node0x1f7ab28 -> Node0x1f7c478;
	Node0x1f7c478 -> Node0x1f7cb00;
	Node0x1f7b508 -> Node0x1f7cb00;
	Node0x1f7b508 -> Node0x1f7cb70;
	Node0x1f7cb70 -> Node0x1f7cbe0;
	Node0x1f7c478 -> Node0x1f7cc50;
	Node0x1f7b508 -> Node0x1f7ccc0;
	Node0x1f7cc50 -> Node0x1f7ccc0;
	Node0x1f7b508 -> Node0x1f7cd30;
	Node0x1f7cc50 -> Node0x1f7cd30;
	Node0x1f7c478 -> Node0x1f7cda0;
	Node0x1f7b508 -> Node0x1f7cda0;
	Node0x1f7cb00 -> Node0x1f7ce10;
	Node0x1f7ce10 -> Node0x1f7ce80;
	Node0x1f7cd30 -> Node0x1f7cef0;
	Node0x1f7cc50 -> Node0x1f7cef0;
	Node0x1f7cef0 -> Node0x1f7cf60;
	Node0x1f7ccc0 -> Node0x1f7cf60;
	Node0x1f7cf60 -> Node0x1f7cfd0;
	Node0x1f7cda0 -> Node0x1f7cfd0;
	Node0x1f7cfd0 -> Node0x1f7d040;
	Node0x1f7cb70 -> Node0x1f7d0b0;
	Node0x1f7d0b0 -> Node0x1f7d120;
	Node0x1f7c478 -> Node0x1f7d120;
	Node0x1f7d120 -> Node0x1f7d190;
	Node0x1f7cbe0 -> Node0x1f7d190;
	Node0x1f7d190 -> Node0x1f7d200;
	Node0x1f7cd30 -> Node0x1f7d200;
	Node0x1f7d200 -> Node0x1f7d270;
	Node0x1f7ce80 -> Node0x1f7d270;
	Node0x1f7d270 -> Node0x1f7d2e0;
	Node0x1f7d040 -> Node0x1f7d2e0;
	Node0x1f7cb00 -> Node0x1f7d350;
	Node0x1f7d2e0 -> Node0x1f7d350;
	Node0x1f7d350 -> Node0x1f1b9d8;
	Node0x1f1b9d8 -> Node0x1f7d3e0;
	Node0x1f7b0f8 -> Node0x1f7d638;
	Node0x1f7abb8 -> Node0x1f7d798;
}
