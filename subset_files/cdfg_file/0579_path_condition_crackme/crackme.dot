digraph "DFG for'crackme' function" {
	Node0x1a876a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1a87d50[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x1a87e10[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1a87eb0[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0x1a87f50[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x1a87fc0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1a88030[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1a880a0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1a88110[shape=record, label="  %11 = and i32 %5, %0"];
	Node0x1a88180[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1a881f0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1a88260[shape=record, label="  %14 = or i32 %1, %0"];
	Node0x1a882d0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1a88370[shape=record, label="  %16 = xor i32 %0, 536870911"];
	Node0x1a883e0[shape=record, label="  %17 = and i32 %16, %1"];
	Node0x1a88480[shape=record, label="  %18 = shl i32 %17, 3"];
	Node0x1a88520[shape=record, label="  %19 = mul i32 %11, -3"];
	Node0x1a88590[shape=record, label="  %20 = shl i32 %1, 1"];
	Node0x1a88600[shape=record, label="  %21 = add i32 %8, %15"];
	Node0x1a886a0[shape=record, label="  %22 = mul i32 %21, -5"];
	Node0x1a88710[shape=record, label="  %23 = add i32 %0, 1"];
	Node0x1a88780[shape=record, label="  %24 = sub i32 %23, %3"];
	Node0x1a887f0[shape=record, label="  %25 = add i32 %24, %7"];
	Node0x1a88860[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x1a888d0[shape=record, label="  %27 = add i32 %26, %20"];
	Node0x1a88940[shape=record, label="  %28 = sub i32 %27, %18"];
	Node0x1a889b0[shape=record, label="  %29 = add i32 %28, %19"];
	Node0x1a88a20[shape=record, label="  %30 = add i32 %29, %10"];
	Node0x1a88a90[shape=record, label="  %31 = add i32 %30, %13"];
	Node0x1a88b00[shape=record, label="  %32 = add i32 %31, %22"];
	Node0x1a88d80[shape=record, label="  %33 = icmp eq i32 %32, %4"];
	Node0x1a28268[shape=record, label="  %34 = select i1 %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a89220[shape=record, label="  %35 = tail call i32 @puts(i8* nonnull dereferenceable(1) %34)"];
	Node0x1a89270[shape=record, label="  ret void"];
	Node0x1a876a0 -> Node0x1a87d50;
	Node0x1a87d50 -> Node0x1a87e10;
	Node0x1a87e10 -> Node0x1a87eb0;
	Node0x1a87eb0 -> Node0x1a87f50;
	Node0x1a87f50 -> Node0x1a87fc0;
	Node0x1a87fc0 -> Node0x1a88030;
	Node0x1a88030 -> Node0x1a880a0;
	Node0x1a880a0 -> Node0x1a88110;
	Node0x1a88110 -> Node0x1a88180;
	Node0x1a88180 -> Node0x1a881f0;
	Node0x1a881f0 -> Node0x1a88260;
	Node0x1a88260 -> Node0x1a882d0;
	Node0x1a882d0 -> Node0x1a88370;
	Node0x1a88370 -> Node0x1a883e0;
	Node0x1a883e0 -> Node0x1a88480;
	Node0x1a88480 -> Node0x1a88520;
	Node0x1a88520 -> Node0x1a88590;
	Node0x1a88590 -> Node0x1a88600;
	Node0x1a88600 -> Node0x1a886a0;
	Node0x1a886a0 -> Node0x1a88710;
	Node0x1a88710 -> Node0x1a88780;
	Node0x1a88780 -> Node0x1a887f0;
	Node0x1a887f0 -> Node0x1a88860;
	Node0x1a88860 -> Node0x1a888d0;
	Node0x1a888d0 -> Node0x1a88940;
	Node0x1a88940 -> Node0x1a889b0;
	Node0x1a889b0 -> Node0x1a88a20;
	Node0x1a88a20 -> Node0x1a88a90;
	Node0x1a88a90 -> Node0x1a88b00;
	Node0x1a88b00 -> Node0x1a88d80;
	Node0x1a88d80 -> Node0x1a28268;
	Node0x1a28268 -> Node0x1a89220;
	Node0x1a89220 -> Node0x1a89270;
edge [color=red]
	Node0x1a876a0 -> Node0x1a87d50;
	Node0x1a87eb0 -> Node0x1a87f50;
	Node0x1a87fc0 -> Node0x1a88030;
	Node0x1a88030 -> Node0x1a880a0;
	Node0x1a87e10 -> Node0x1a88110;
	Node0x1a88110 -> Node0x1a88180;
	Node0x1a88180 -> Node0x1a881f0;
	Node0x1a88260 -> Node0x1a882d0;
	Node0x1a88370 -> Node0x1a883e0;
	Node0x1a883e0 -> Node0x1a88480;
	Node0x1a88110 -> Node0x1a88520;
	Node0x1a87fc0 -> Node0x1a88600;
	Node0x1a882d0 -> Node0x1a88600;
	Node0x1a88600 -> Node0x1a886a0;
	Node0x1a88710 -> Node0x1a88780;
	Node0x1a876a0 -> Node0x1a88780;
	Node0x1a88780 -> Node0x1a887f0;
	Node0x1a87f50 -> Node0x1a887f0;
	Node0x1a887f0 -> Node0x1a88860;
	Node0x1a88260 -> Node0x1a88860;
	Node0x1a88860 -> Node0x1a888d0;
	Node0x1a88590 -> Node0x1a888d0;
	Node0x1a888d0 -> Node0x1a88940;
	Node0x1a88480 -> Node0x1a88940;
	Node0x1a88940 -> Node0x1a889b0;
	Node0x1a88520 -> Node0x1a889b0;
	Node0x1a889b0 -> Node0x1a88a20;
	Node0x1a880a0 -> Node0x1a88a20;
	Node0x1a88a20 -> Node0x1a88a90;
	Node0x1a881f0 -> Node0x1a88a90;
	Node0x1a88a90 -> Node0x1a88b00;
	Node0x1a886a0 -> Node0x1a88b00;
	Node0x1a88b00 -> Node0x1a88d80;
	Node0x1a87d50 -> Node0x1a88d80;
	Node0x1a88d80 -> Node0x1a28268;
	Node0x1a28268 -> Node0x1a89220;
}
