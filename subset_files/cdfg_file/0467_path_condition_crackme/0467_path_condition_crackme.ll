; ModuleID = '../.././c_source_file/0467_path_condition_crackme.c'
source_filename = "../.././c_source_file/0467_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = or i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %4
  %11 = sub i32 %10, %7
  %12 = xor i32 %2, -1
  %13 = or i32 %12, %1
  %14 = xor i32 %13, -1
  %15 = or i32 %14, %0
  %16 = and i32 %1, %0
  %17 = xor i32 %8, %16
  %18 = and i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = and i32 %19, %0
  %21 = and i32 %12, %1
  %22 = or i32 %4, %0
  %23 = xor i32 %22, -1
  %24 = or i32 %6, %23
  %25 = xor i32 %2, %1
  %26 = xor i32 %25, -1
  %27 = xor i32 %26, %0
  %28 = or i32 %1, %0
  %29 = and i32 %6, %28
  %30 = xor i32 %0, -1
  %31 = or i32 %13, %30
  %32 = xor i32 %28, -1
  %33 = xor i32 %32, %2
  %34 = or i32 %26, %30
  %35 = or i32 %12, %0
  %36 = and i32 %35, %1
  %37 = xor i32 %14, %0
  %38 = and i32 %25, %28
  %39 = and i32 %18, %30
  %40 = and i32 %25, %0
  %41 = or i32 %39, %40
  %42 = xor i32 %6, -1
  %43 = and i32 %42, %1
  %44 = and i32 %12, %0
  %45 = or i32 %44, %14
  %46 = xor i32 %5, -1
  %47 = and i32 %4, %2
  %48 = and i32 %47, %0
  %49 = or i32 %4, %2
  %50 = xor i32 %49, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %48, %51
  %53 = or i32 %21, %0
  %54 = xor i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %9, %55
  %57 = shl i32 %56, 1
  %58 = and i32 %6, %1
  %59 = or i32 %25, %32
  %60 = xor i32 %25, %0
  %61 = or i32 %2, %1
  %62 = and i32 %61, %0
  %63 = or i32 %39, %62
  %64 = or i32 %25, %16
  %65 = xor i32 %21, -1
  %66 = or i32 %65, %0
  %67 = xor i32 %35, -1
  %68 = and i32 %54, %12
  %69 = and i32 %2, %0
  %70 = xor i32 %69, %1
  %71 = and i32 %28, %26
  %72 = xor i32 %16, -1
  %73 = and i32 %42, %72
  %74 = or i32 %19, %0
  %75 = and i32 %8, %54
  %76 = shl i32 %75, 1
  %77 = or i32 %69, %23
  %78 = and i32 %47, %30
  %79 = and i32 %49, %0
  %80 = or i32 %78, %79
  %81 = or i32 %26, %0
  %82 = xor i32 %44, 1073741823
  %83 = add i32 %44, 1
  %84 = and i32 %42, %46
  %85 = or i32 %69, %54
  %86 = xor i32 %22, %2
  %87 = and i32 %55, %2
  %88 = and i32 %35, %55
  %89 = and i32 %22, %42
  %90 = shl i32 %65, 1
  %91 = xor i32 %18, %0
  %92 = xor i32 %69, -1
  %93 = and i32 %92, %4
  %94 = shl i32 %93, 1
  %95 = and i32 %49, %30
  %96 = or i32 %48, %95
  %97 = shl i32 %96, 2
  %98 = xor i32 %69, %22
  %99 = and i32 %28, %2
  %100 = xor i32 %79, -1
  %101 = xor i32 %78, %100
  %102 = and i32 %25, %72
  %103 = and i32 %18, %0
  %104 = and i32 %61, %30
  %105 = xor i32 %103, -1
  %106 = xor i32 %104, %105
  %107 = and i32 %25, %30
  %108 = or i32 %25, %30
  %109 = or i32 %103, %104
  %110 = xor i32 %72, %2
  %111 = or i32 %23, %2
  %112 = or i32 %61, %30
  %113 = xor i32 %5, %19
  %114 = shl i32 %113, 1
  %115 = or i32 %9, %1
  %116 = xor i32 %108, -1
  %117 = or i32 %78, %116
  %118 = and i32 %8, %1
  %119 = or i32 %44, %54
  %120 = and i32 %46, %2
  %121 = and i32 %6, %72
  %122 = or i32 %48, %50
  %123 = or i32 %5, %42
  %124 = add i32 %28, 1
  %125 = or i32 %54, %9
  %126 = or i32 %25, %0
  %127 = xor i32 %126, -1
  %128 = or i32 %48, %127
  %129 = or i32 %26, %23
  %130 = xor i32 %107, %105
  %131 = or i32 %67, %4
  %132 = xor i32 %61, -1
  %133 = or i32 %132, %30
  %134 = xor i32 %48, 2147483647
  %135 = xor i32 %134, %60
  %136 = shl i32 %135, 1
  %137 = xor i32 %16, %2
  %138 = or i32 %48, %60
  %139 = shl i32 %1, 1
  %140 = xor i32 %28, %2
  %141 = shl i32 %140, 1
  %142 = or i32 %42, %55
  %143 = xor i32 %69, %28
  %144 = or i32 %44, %1
  %145 = and i32 %54, %92
  %146 = and i32 %28, %12
  %147 = or i32 %42, %32
  %148 = or i32 %16, %9
  %149 = xor i32 %44, %1
  %150 = shl i32 %149, 1
  %151 = and i32 %8, %55
  %152 = add i32 %54, 1
  %153 = xor i32 %5, %65
  %154 = xor i32 %13, %16
  %155 = or i32 %25, %23
  %156 = or i32 %61, %0
  %157 = and i32 %82, %1
  %158 = shl i32 %157, 2
  %159 = and i32 %26, %0
  %160 = and i32 %35, %54
  %161 = xor i32 %40, -1
  %162 = xor i32 %39, %161
  %163 = or i32 %21, %30
  %164 = or i32 %55, %2
  %165 = and i32 %92, %55
  %166 = or i32 %6, %4
  %167 = or i32 %6, %54
  %168 = or i32 %32, %2
  %169 = shl i32 %69, 1
  %170 = and i32 %26, %30
  %171 = or i32 %44, %55
  %172 = or i32 %67, %1
  %173 = shl i32 %172, 1
  %174 = xor i32 %134, %95
  %175 = shl i32 %174, 1
  %176 = and i32 %132, %30
  %177 = shl i32 %176, 1
  %178 = and i32 %132, %0
  %179 = and i32 %14, %30
  %180 = shl i32 %39, 3
  %181 = and i32 %14, %0
  %182 = mul i32 %181, -10
  %183 = mul i32 %103, 13
  %184 = add i32 %26, %72
  %185 = add i32 %184, %14
  %186 = add i32 %185, %160
  %187 = add i32 %186, %165
  %188 = add i32 %187, %156
  %189 = add i32 %188, %155
  %190 = add i32 %189, %153
  %191 = add i32 %190, %98
  %192 = add i32 %191, %74
  %193 = add i32 %192, %73
  %194 = add i32 %193, %64
  %195 = add i32 %194, %60
  %196 = add i32 %195, %59
  %197 = add i32 %196, %45
  %198 = shl i32 %197, 1
  %199 = sub i32 %25, %164
  %200 = add i32 %199, %101
  %201 = mul i32 %200, 5
  %202 = add i32 %179, %178
  %203 = mul i32 %202, -6
  %204 = mul i32 %21, -11
  %205 = add i32 %5, %1
  %206 = add i32 %205, 5
  %207 = add i32 %206, %5
  %208 = add i32 %207, %124
  %209 = sub i32 %208, %139
  %210 = add i32 %209, %152
  %211 = add i32 %210, %28
  %212 = add i32 %211, %21
  %213 = sub i32 %212, %33
  %214 = add i32 %213, %67
  %215 = add i32 %214, %68
  %216 = add i32 %215, %9
  %217 = add i32 %216, %61
  %218 = add i32 %217, %83
  %219 = add i32 %218, %86
  %220 = sub i32 %219, %87
  %221 = add i32 %220, %99
  %222 = add i32 %221, %110
  %223 = add i32 %222, %44
  %224 = sub i32 %223, %111
  %225 = add i32 %224, %120
  %226 = sub i32 %225, %137
  %227 = sub i32 %226, %146
  %228 = sub i32 %227, %13
  %229 = sub i32 %228, %168
  %230 = sub i32 %229, %18
  %231 = sub i32 %230, %17
  %232 = sub i32 %231, %15
  %233 = sub i32 %232, %20
  %234 = sub i32 %233, %24
  %235 = add i32 %234, %27
  %236 = sub i32 %235, %29
  %237 = add i32 %236, %31
  %238 = add i32 %237, %34
  %239 = add i32 %238, %36
  %240 = add i32 %239, %37
  %241 = sub i32 %240, %38
  %242 = sub i32 %241, %43
  %243 = sub i32 %242, %53
  %244 = add i32 %243, %58
  %245 = add i32 %244, %66
  %246 = add i32 %245, %70
  %247 = add i32 %246, %71
  %248 = sub i32 %247, %77
  %249 = sub i32 %248, %81
  %250 = add i32 %249, %84
  %251 = add i32 %250, %85
  %252 = add i32 %251, %88
  %253 = sub i32 %252, %89
  %254 = sub i32 %253, %90
  %255 = add i32 %254, %91
  %256 = add i32 %255, %102
  %257 = add i32 %256, %107
  %258 = sub i32 %257, %108
  %259 = add i32 %258, %112
  %260 = add i32 %259, %115
  %261 = sub i32 %260, %118
  %262 = add i32 %261, %119
  %263 = sub i32 %262, %121
  %264 = add i32 %263, %123
  %265 = sub i32 %264, %125
  %266 = add i32 %265, %129
  %267 = add i32 %266, %131
  %268 = add i32 %267, %62
  %269 = add i32 %268, %133
  %270 = sub i32 %269, %141
  %271 = sub i32 %270, %142
  %272 = sub i32 %271, %143
  %273 = sub i32 %272, %144
  %274 = sub i32 %273, %145
  %275 = sub i32 %274, %147
  %276 = add i32 %275, %148
  %277 = add i32 %276, %151
  %278 = add i32 %277, %154
  %279 = sub i32 %278, %159
  %280 = add i32 %279, %163
  %281 = add i32 %280, %166
  %282 = add i32 %281, %167
  %283 = sub i32 %282, %169
  %284 = sub i32 %283, %170
  %285 = sub i32 %284, %171
  %286 = sub i32 %285, %41
  %287 = sub i32 %286, %52
  %288 = sub i32 %287, %57
  %289 = add i32 %288, %63
  %290 = sub i32 %289, %76
  %291 = add i32 %290, %80
  %292 = sub i32 %291, %94
  %293 = add i32 %292, %106
  %294 = sub i32 %293, %109
  %295 = sub i32 %294, %114
  %296 = add i32 %295, %117
  %297 = add i32 %296, %122
  %298 = add i32 %297, %128
  %299 = sub i32 %298, %130
  %300 = add i32 %299, %138
  %301 = sub i32 %300, %150
  %302 = sub i32 %301, %158
  %303 = sub i32 %302, %162
  %304 = sub i32 %303, %173
  %305 = sub i32 %304, %177
  %306 = add i32 %305, %180
  %307 = add i32 %306, %182
  %308 = add i32 %307, %183
  %309 = sub i32 %308, %97
  %310 = add i32 %309, %203
  %311 = add i32 %310, %204
  %312 = sub i32 %311, %136
  %313 = sub i32 %312, %175
  %314 = add i32 %313, %201
  %315 = add i32 %314, %198
  %316 = icmp eq i32 %11, %315
  %317 = select i1 %316, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %318 = tail call i32 @puts(i8* nonnull dereferenceable(1) %317)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
