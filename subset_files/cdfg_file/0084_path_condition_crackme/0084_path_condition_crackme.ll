; ModuleID = '../.././c_source_file/0084_path_condition_crackme.c'
source_filename = "../.././c_source_file/0084_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = sub i32 2, %3
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = or i32 %2, %1
  %11 = and i32 %10, %0
  %12 = or i32 %9, %11
  %13 = add i32 %6, %12
  %14 = xor i32 %4, -1
  %15 = and i32 %14, %3
  %16 = or i32 %14, %3
  %17 = or i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %4, %3
  %20 = add i32 %17, 1
  %21 = and i32 %4, %3
  %22 = xor i32 %1, -1
  %23 = and i32 %22, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %24
  %28 = or i32 %22, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %1, %0
  %31 = or i32 %25, %30
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %0
  %34 = or i32 %33, %1
  %35 = and i32 %30, %32
  %36 = xor i32 %30, -1
  %37 = or i32 %33, %36
  %38 = xor i32 %8, -1
  %39 = or i32 %38, %0
  %40 = shl i32 %39, 1
  %41 = or i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %22
  %44 = and i32 %25, %28
  %45 = and i32 %38, %0
  %46 = or i32 %32, %0
  %47 = and i32 %46, %36
  %48 = and i32 %46, %1
  %49 = and i32 %30, %26
  %50 = and i32 %22, %2
  %51 = and i32 %50, %0
  %52 = or i32 %22, %2
  %53 = xor i32 %52, %0
  %54 = xor i32 %51, -1
  %55 = xor i32 %53, %54
  %56 = or i32 %32, %1
  %57 = xor i32 %56, -1
  %58 = or i32 %57, %0
  %59 = or i32 %8, %0
  %60 = and i32 %1, %0
  %61 = xor i32 %60, -1
  %62 = and i32 %32, %61
  %63 = xor i32 %2, %1
  %64 = xor i32 %63, -1
  %65 = or i32 %23, %64
  %66 = or i32 %42, %36
  %67 = or i32 %1, %0
  %68 = and i32 %67, %64
  %69 = shl i32 %68, 1
  %70 = or i32 %60, %2
  %71 = and i32 %32, %1
  %72 = or i32 %71, %23
  %73 = and i32 %52, %7
  %74 = xor i32 %73, %54
  %75 = or i32 %26, %29
  %76 = and i32 %63, %67
  %77 = and i32 %67, %26
  %78 = or i32 %63, %60
  %79 = xor i32 %33, -1
  %80 = and i32 %79, %22
  %81 = and i32 %46, %22
  %82 = and i32 %50, %7
  %83 = or i32 %63, %7
  %84 = xor i32 %83, -1
  %85 = or i32 %82, %84
  %86 = xor i32 %71, -1
  %87 = xor i32 %86, %0
  %88 = and i32 %2, %0
  %89 = xor i32 %88, -1
  %90 = and i32 %89, %36
  %91 = xor i32 %33, %56
  %92 = xor i32 %11, -1
  %93 = xor i32 %9, %92
  %94 = or i32 %60, %64
  %95 = and i32 %86, %7
  %96 = xor i32 %46, -1
  %97 = or i32 %30, %96
  %98 = and i32 %8, %0
  %99 = and i32 %10, %7
  %100 = or i32 %98, %99
  %101 = xor i32 %56, %60
  %102 = or i32 %63, %23
  %103 = or i32 %63, %0
  %104 = and i32 %25, %30
  %105 = and i32 %64, %0
  %106 = xor i32 %10, -1
  %107 = or i32 %60, %106
  %108 = and i32 %89, %22
  %109 = shl i32 %108, 1
  %110 = or i32 %56, %0
  %111 = shl i32 %110, 1
  %112 = xor i32 %96, %1
  %113 = add i32 %63, 1
  %114 = xor i32 %67, -1
  %115 = or i32 %63, %114
  %116 = xor i32 %10, %0
  %117 = xor i32 %98, -1
  %118 = xor i32 %116, %117
  %119 = and i32 %63, %0
  %120 = xor i32 %119, 2147483647
  %121 = xor i32 %120, %9
  %122 = xor i32 %46, %60
  %123 = or i32 %51, %73
  %124 = and i32 %52, %0
  %125 = or i32 %82, %124
  %126 = and i32 %56, %7
  %127 = or i32 %86, %0
  %128 = shl i32 %127, 1
  %129 = or i32 %23, %32
  %130 = or i32 %88, %22
  %131 = or i32 %23, %26
  %132 = shl i32 %131, 1
  %133 = or i32 %88, %114
  %134 = shl i32 %133, 1
  %135 = and i32 %46, %30
  %136 = or i32 %88, %1
  %137 = xor i32 %63, %7
  %138 = xor i32 %51, %137
  %139 = or i32 %88, %36
  %140 = shl i32 %139, 2
  %141 = and i32 %25, %22
  %142 = and i32 %79, %1
  %143 = and i32 %79, %36
  %144 = xor i32 %23, %38
  %145 = or i32 %25, %29
  %146 = or i32 %33, %22
  %147 = or i32 %26, %22
  %148 = xor i32 %60, %2
  %149 = or i32 %32, %29
  %150 = or i32 %25, %114
  %151 = or i32 %60, %57
  %152 = shl i32 %151, 1
  %153 = or i32 %96, %36
  %154 = or i32 %60, %32
  %155 = or i32 %106, %0
  %156 = xor i32 %99, %117
  %157 = xor i32 %56, %0
  %158 = xor i32 %114, %2
  %159 = or i32 %32, %36
  %160 = or i32 %25, %22
  %161 = shl i32 %116, 1
  %162 = or i32 %114, %2
  %163 = or i32 %26, %36
  %164 = and i32 %67, %32
  %165 = add i32 %30, 1
  %166 = and i32 %25, %24
  %167 = and i32 %28, %32
  %168 = and i32 %32, %36
  %169 = or i32 %10, %7
  %170 = xor i32 %88, %28
  %171 = and i32 %28, %26
  %172 = or i32 %106, %7
  %173 = or i32 %88, %71
  %174 = and i32 %89, %1
  %175 = add i32 %2, 1
  %176 = or i32 %64, %7
  %177 = or i32 %51, %53
  %178 = xor i32 %24, %2
  %179 = xor i32 %61, %2
  %180 = and i32 %25, %67
  %181 = or i32 %42, %1
  %182 = xor i32 %88, %1
  %183 = and i32 %38, %7
  %184 = or i32 %88, %30
  %185 = or i32 %60, %42
  %186 = and i32 %30, %89
  %187 = xor i32 %124, -1
  %188 = xor i32 %82, %187
  %189 = and i32 %63, %7
  %190 = xor i32 %89, %1
  %191 = or i32 %25, %1
  %192 = shl i32 %191, 1
  %193 = or i32 %33, %30
  %194 = shl i32 %79, 1
  %195 = and i32 %63, %61
  %196 = and i32 %25, %1
  %197 = and i32 %61, %2
  %198 = or i32 %64, %0
  %199 = xor i32 %103, -1
  %200 = or i32 %51, %199
  %201 = and i32 %28, %2
  %202 = or i32 %30, %26
  %203 = xor i32 %106, %0
  %204 = shl i32 %203, 1
  %205 = xor i32 %33, %38
  %206 = or i32 %64, %29
  %207 = and i32 %24, %2
  %208 = shl i32 %207, 1
  %209 = xor i32 %42, %1
  %210 = xor i32 %57, %0
  %211 = and i32 %67, %2
  %212 = or i32 %71, %0
  %213 = or i32 %30, %42
  %214 = and i32 %86, %0
  %215 = shl i32 %214, 1
  %216 = or i32 %25, %36
  %217 = and i32 %30, %2
  %218 = or i32 %88, %106
  %219 = shl i32 %218, 1
  %220 = or i32 %96, %22
  %221 = xor i32 %51, %103
  %222 = xor i32 %23, %86
  %223 = or i32 %63, %29
  %224 = xor i32 %88, %10
  %225 = xor i32 %33, %1
  %226 = and i32 %64, %7
  %227 = or i32 %30, %32
  %228 = or i32 %33, %57
  %229 = or i32 %98, %137
  %230 = or i32 %38, %7
  %231 = shl i32 %230, 1
  %232 = xor i32 %28, %2
  %233 = or i32 %10, %0
  %234 = shl i32 %67, 1
  %235 = and i32 %26, %1
  %236 = and i32 %36, %2
  %237 = or i32 %86, %7
  %238 = xor i32 %67, %2
  %239 = shl i32 %238, 1
  %240 = xor i32 %10, %60
  %241 = shl i32 %240, 1
  %242 = and i32 %106, %7
  %243 = and i32 %71, %7
  %244 = mul i32 %243, -12
  %245 = and i32 %106, %0
  %246 = shl i32 %245, 3
  %247 = and i32 %71, %0
  %248 = mul i32 %247, -6
  %249 = and i32 %57, %7
  %250 = mul i32 %9, -22
  %251 = and i32 %57, %0
  %252 = mul i32 %251, 20
  %253 = add i32 %227, %232
  %254 = add i32 %253, %89
  %255 = add i32 %254, %148
  %256 = add i32 %255, %35
  %257 = add i32 %256, %98
  %258 = add i32 %257, %225
  %259 = add i32 %258, %224
  %260 = add i32 %259, %220
  %261 = add i32 %260, %198
  %262 = add i32 %261, %185
  %263 = add i32 %262, %176
  %264 = add i32 %263, %170
  %265 = add i32 %264, %166
  %266 = add i32 %265, %112
  %267 = add i32 %266, %101
  %268 = add i32 %267, %94
  %269 = add i32 %268, %58
  %270 = add i32 %269, %43
  %271 = add i32 %270, %37
  %272 = add i32 %271, %16
  %273 = add i32 %272, %121
  %274 = shl i32 %273, 1
  %275 = sub i32 %91, %242
  %276 = sub i32 %275, %81
  %277 = add i32 %276, %20
  %278 = sub i32 %277, %15
  %279 = mul i32 %278, 5
  %280 = xor i32 %21, -1
  %281 = add i32 %209, %280
  %282 = mul i32 %281, 3
  %283 = sub i32 -2, %28
  %284 = add i32 %283, %165
  %285 = sub i32 %284, %2
  %286 = add i32 %285, %60
  %287 = add i32 %286, %175
  %288 = add i32 %287, %24
  %289 = add i32 %288, %30
  %290 = add i32 %289, %3
  %291 = sub i32 %290, %62
  %292 = sub i32 %291, %70
  %293 = add i32 %292, %41
  %294 = add i32 %293, %56
  %295 = add i32 %294, %113
  %296 = sub i32 %295, %129
  %297 = sub i32 %296, %149
  %298 = sub i32 %297, %154
  %299 = add i32 %298, %26
  %300 = sub i32 %299, %158
  %301 = sub i32 %300, %159
  %302 = add i32 %301, %86
  %303 = add i32 %302, %162
  %304 = add i32 %303, %164
  %305 = sub i32 %304, %167
  %306 = add i32 %305, %168
  %307 = sub i32 %306, %25
  %308 = add i32 %307, %178
  %309 = add i32 %308, %179
  %310 = sub i32 %309, %197
  %311 = sub i32 %310, %201
  %312 = sub i32 %311, %63
  %313 = add i32 %312, %211
  %314 = add i32 %313, %217
  %315 = sub i32 %314, %33
  %316 = sub i32 %315, %234
  %317 = add i32 %316, %236
  %318 = add i32 %317, %14
  %319 = sub i32 %318, %4
  %320 = sub i32 %319, %27
  %321 = add i32 %320, %31
  %322 = sub i32 %321, %34
  %323 = sub i32 %322, %44
  %324 = add i32 %323, %45
  %325 = sub i32 %324, %47
  %326 = sub i32 %325, %48
  %327 = sub i32 %326, %49
  %328 = add i32 %327, %59
  %329 = add i32 %328, %65
  %330 = add i32 %329, %66
  %331 = sub i32 %330, %72
  %332 = sub i32 %331, %75
  %333 = add i32 %332, %76
  %334 = add i32 %333, %77
  %335 = sub i32 %334, %78
  %336 = add i32 %335, %80
  %337 = sub i32 %336, %87
  %338 = sub i32 %337, %90
  %339 = add i32 %338, %95
  %340 = add i32 %339, %97
  %341 = sub i32 %340, %102
  %342 = add i32 %341, %103
  %343 = add i32 %342, %104
  %344 = sub i32 %343, %105
  %345 = sub i32 %344, %107
  %346 = sub i32 %345, %115
  %347 = sub i32 %346, %122
  %348 = add i32 %347, %126
  %349 = add i32 %348, %130
  %350 = add i32 %349, %135
  %351 = sub i32 %350, %136
  %352 = sub i32 %351, %141
  %353 = add i32 %352, %142
  %354 = add i32 %353, %143
  %355 = add i32 %354, %144
  %356 = add i32 %355, %145
  %357 = sub i32 %356, %146
  %358 = sub i32 %357, %147
  %359 = add i32 %358, %150
  %360 = sub i32 %359, %153
  %361 = sub i32 %360, %155
  %362 = sub i32 %361, %99
  %363 = sub i32 %362, %157
  %364 = add i32 %363, %160
  %365 = sub i32 %364, %163
  %366 = add i32 %365, %169
  %367 = add i32 %366, %171
  %368 = add i32 %367, %172
  %369 = sub i32 %368, %173
  %370 = add i32 %369, %174
  %371 = sub i32 %370, %180
  %372 = add i32 %371, %181
  %373 = sub i32 %372, %182
  %374 = sub i32 %373, %183
  %375 = sub i32 %374, %184
  %376 = add i32 %375, %186
  %377 = add i32 %376, %189
  %378 = sub i32 %377, %190
  %379 = add i32 %378, %193
  %380 = sub i32 %379, %194
  %381 = add i32 %380, %195
  %382 = add i32 %381, %196
  %383 = sub i32 %382, %202
  %384 = sub i32 %383, %205
  %385 = add i32 %384, %206
  %386 = sub i32 %385, %208
  %387 = sub i32 %386, %83
  %388 = add i32 %387, %210
  %389 = add i32 %388, %212
  %390 = add i32 %389, %213
  %391 = add i32 %390, %216
  %392 = add i32 %391, %222
  %393 = add i32 %392, %223
  %394 = sub i32 %393, %119
  %395 = sub i32 %394, %226
  %396 = add i32 %395, %228
  %397 = sub i32 %396, %233
  %398 = sub i32 %397, %235
  %399 = sub i32 %398, %237
  %400 = sub i32 %399, %239
  %401 = add i32 %400, %249
  %402 = sub i32 %401, %15
  %403 = add i32 %402, %19
  %404 = sub i32 %403, %40
  %405 = add i32 %404, %55
  %406 = sub i32 %405, %69
  %407 = add i32 %406, %74
  %408 = add i32 %407, %85
  %409 = add i32 %408, %93
  %410 = sub i32 %409, %100
  %411 = sub i32 %410, %109
  %412 = sub i32 %411, %111
  %413 = add i32 %412, %118
  %414 = sub i32 %413, %123
  %415 = sub i32 %414, %125
  %416 = sub i32 %415, %128
  %417 = sub i32 %416, %132
  %418 = sub i32 %417, %134
  %419 = sub i32 %418, %138
  %420 = sub i32 %419, %140
  %421 = sub i32 %420, %152
  %422 = add i32 %421, %156
  %423 = sub i32 %422, %161
  %424 = sub i32 %423, %177
  %425 = sub i32 %424, %188
  %426 = sub i32 %425, %192
  %427 = add i32 %426, %200
  %428 = sub i32 %427, %204
  %429 = sub i32 %428, %215
  %430 = sub i32 %429, %219
  %431 = add i32 %430, %221
  %432 = add i32 %431, %229
  %433 = sub i32 %432, %231
  %434 = sub i32 %433, %241
  %435 = add i32 %434, %244
  %436 = sub i32 %435, %246
  %437 = add i32 %436, %248
  %438 = add i32 %437, %250
  %439 = add i32 %438, %252
  %440 = sub i32 %439, %18
  %441 = add i32 %440, %282
  %442 = add i32 %441, %279
  %443 = add i32 %442, %274
  %444 = icmp eq i32 %13, %443
  %445 = select i1 %444, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %446 = tail call i32 @puts(i8* nonnull dereferenceable(1) %445)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
