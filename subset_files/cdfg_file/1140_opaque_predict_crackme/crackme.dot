digraph "DFG for'crackme' function" {
	Node0x22024b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x2202b60[shape=record, label="  %4 = add i32 %3, -1"];
	Node0x2202c20[shape=record, label="  %5 = shl i32 %3, 1"];
	Node0x2202cc0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x2202d30[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x2202da0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x2202e10[shape=record, label="  %9 = sub i32 %6, %8"];
	Node0x2202e80[shape=record, label="  %10 = xor i32 %1, -1"];
	Node0x2202ef0[shape=record, label="  %11 = and i32 %10, %0"];
	Node0x2202f60[shape=record, label="  %12 = or i32 %9, 1"];
	Node0x2202fd0[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0x2203040[shape=record, label="  %14 = xor i32 %8, -2"];
	Node0x22030b0[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x2203150[shape=record, label="  %16 = mul i32 %3, 5"];
	Node0x22031c0[shape=record, label="  %17 = add i32 %11, %0"];
	Node0x2203230[shape=record, label="  %18 = sub i32 %17, %13"];
	Node0x22032a0[shape=record, label="  %19 = add i32 %18, %15"];
	Node0x2203310[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x2203380[shape=record, label="  %21 = add i32 %20, %16"];
	Node0x22033f0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x2203460[shape=record, label="  %23 = icmp eq i32 %4, %22"];
	Node0x21a3268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2203900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x2203950[shape=record, label="  ret void"];
	Node0x22024b0 -> Node0x2202b60;
	Node0x2202b60 -> Node0x2202c20;
	Node0x2202c20 -> Node0x2202cc0;
	Node0x2202cc0 -> Node0x2202d30;
	Node0x2202d30 -> Node0x2202da0;
	Node0x2202da0 -> Node0x2202e10;
	Node0x2202e10 -> Node0x2202e80;
	Node0x2202e80 -> Node0x2202ef0;
	Node0x2202ef0 -> Node0x2202f60;
	Node0x2202f60 -> Node0x2202fd0;
	Node0x2202fd0 -> Node0x2203040;
	Node0x2203040 -> Node0x22030b0;
	Node0x22030b0 -> Node0x2203150;
	Node0x2203150 -> Node0x22031c0;
	Node0x22031c0 -> Node0x2203230;
	Node0x2203230 -> Node0x22032a0;
	Node0x22032a0 -> Node0x2203310;
	Node0x2203310 -> Node0x2203380;
	Node0x2203380 -> Node0x22033f0;
	Node0x22033f0 -> Node0x2203460;
	Node0x2203460 -> Node0x21a3268;
	Node0x21a3268 -> Node0x2203900;
	Node0x2203900 -> Node0x2203950;
edge [color=red]
	Node0x22024b0 -> Node0x2202b60;
	Node0x22024b0 -> Node0x2202c20;
	Node0x2202c20 -> Node0x2202cc0;
	Node0x2202d30 -> Node0x2202da0;
	Node0x2202cc0 -> Node0x2202e10;
	Node0x2202da0 -> Node0x2202e10;
	Node0x2202e80 -> Node0x2202ef0;
	Node0x2202e10 -> Node0x2202f60;
	Node0x2202e80 -> Node0x2202fd0;
	Node0x2202da0 -> Node0x2203040;
	Node0x22024b0 -> Node0x2203150;
	Node0x2202ef0 -> Node0x22031c0;
	Node0x22031c0 -> Node0x2203230;
	Node0x2202fd0 -> Node0x2203230;
	Node0x2203230 -> Node0x22032a0;
	Node0x22030b0 -> Node0x22032a0;
	Node0x22032a0 -> Node0x2203310;
	Node0x2203040 -> Node0x2203310;
	Node0x2203310 -> Node0x2203380;
	Node0x2203150 -> Node0x2203380;
	Node0x2203380 -> Node0x22033f0;
	Node0x2202f60 -> Node0x22033f0;
	Node0x2202b60 -> Node0x2203460;
	Node0x22033f0 -> Node0x2203460;
	Node0x2203460 -> Node0x21a3268;
	Node0x21a3268 -> Node0x2203900;
}
