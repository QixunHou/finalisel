digraph "DFG for'crackme' function" {
	Node0x18fb4a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x18fbb50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x18fbc10[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x18fbc80[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x18fbcf0[shape=record, label="  %7 = sub i32 %6, %3"];
	Node0x18fbd60[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x18fbdd0[shape=record, label="  %9 = shl i32 %0, 2"];
	Node0x18fbe40[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x18fbee0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x18fbf80[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x18fbff0[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x18fc090[shape=record, label="  %14 = xor i32 %0, 2147483647"];
	Node0x18fc100[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x18fc170[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x18fc210[shape=record, label="  %17 = mul i32 %0, -3"];
	Node0x18fc280[shape=record, label="  %18 = add i32 %4, %5"];
	Node0x18fc2f0[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x18fc360[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x18fc3d0[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0x18fc440[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x18fc4b0[shape=record, label="  %23 = sub i32 %22, %12"];
	Node0x18fc520[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x18fc590[shape=record, label="  %25 = icmp eq i32 %7, %24"];
	Node0x189c268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18fca30[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x18fca80[shape=record, label="  ret void"];
	Node0x18fb4a0 -> Node0x18fbb50;
	Node0x18fbb50 -> Node0x18fbc10;
	Node0x18fbc10 -> Node0x18fbc80;
	Node0x18fbc80 -> Node0x18fbcf0;
	Node0x18fbcf0 -> Node0x18fbd60;
	Node0x18fbd60 -> Node0x18fbdd0;
	Node0x18fbdd0 -> Node0x18fbe40;
	Node0x18fbe40 -> Node0x18fbee0;
	Node0x18fbee0 -> Node0x18fbf80;
	Node0x18fbf80 -> Node0x18fbff0;
	Node0x18fbff0 -> Node0x18fc090;
	Node0x18fc090 -> Node0x18fc100;
	Node0x18fc100 -> Node0x18fc170;
	Node0x18fc170 -> Node0x18fc210;
	Node0x18fc210 -> Node0x18fc280;
	Node0x18fc280 -> Node0x18fc2f0;
	Node0x18fc2f0 -> Node0x18fc360;
	Node0x18fc360 -> Node0x18fc3d0;
	Node0x18fc3d0 -> Node0x18fc440;
	Node0x18fc440 -> Node0x18fc4b0;
	Node0x18fc4b0 -> Node0x18fc520;
	Node0x18fc520 -> Node0x18fc590;
	Node0x18fc590 -> Node0x189c268;
	Node0x189c268 -> Node0x18fca30;
	Node0x18fca30 -> Node0x18fca80;
edge [color=red]
	Node0x18fbc10 -> Node0x18fbc80;
	Node0x18fbc80 -> Node0x18fbcf0;
	Node0x18fb4a0 -> Node0x18fbcf0;
	Node0x18fb4a0 -> Node0x18fbd60;
	Node0x18fbe40 -> Node0x18fbee0;
	Node0x18fbee0 -> Node0x18fbf80;
	Node0x18fc090 -> Node0x18fc100;
	Node0x18fc100 -> Node0x18fc170;
	Node0x18fbb50 -> Node0x18fc280;
	Node0x18fbc10 -> Node0x18fc280;
	Node0x18fc280 -> Node0x18fc2f0;
	Node0x18fbdd0 -> Node0x18fc2f0;
	Node0x18fc2f0 -> Node0x18fc360;
	Node0x18fbd60 -> Node0x18fc360;
	Node0x18fc360 -> Node0x18fc3d0;
	Node0x18fbff0 -> Node0x18fc3d0;
	Node0x18fc3d0 -> Node0x18fc440;
	Node0x18fc170 -> Node0x18fc440;
	Node0x18fc440 -> Node0x18fc4b0;
	Node0x18fbf80 -> Node0x18fc4b0;
	Node0x18fc4b0 -> Node0x18fc520;
	Node0x18fc210 -> Node0x18fc520;
	Node0x18fbcf0 -> Node0x18fc590;
	Node0x18fc520 -> Node0x18fc590;
	Node0x18fc590 -> Node0x189c268;
	Node0x189c268 -> Node0x18fca30;
}
