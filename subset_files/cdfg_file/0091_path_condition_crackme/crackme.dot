digraph "DFG for'crackme' function" {
	Node0x52d460[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x52db10[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0x52dbd0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x52dc40[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x52dcb0[shape=record, label="  %7 = xor i32 %5, -1"];
	Node0x52dd20[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x52dd90[shape=record, label="  %9 = xor i32 %0, 2147483647"];
	Node0x52de00[shape=record, label="  %10 = or i32 %9, %1"];
	Node0x52dea0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x52df10[shape=record, label="  %12 = and i32 %4, %1"];
	Node0x52df80[shape=record, label="  %13 = shl i32 %8, 1"];
	Node0x52dff0[shape=record, label="  %14 = sub i32 %6, %0"];
	Node0x52e060[shape=record, label="  %15 = add i32 %14, %3"];
	Node0x52e0d0[shape=record, label="  %16 = sub i32 %15, %5"];
	Node0x52e140[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x52e1b0[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x52e220[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0x52e290[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x52e300[shape=record, label="  %21 = icmp eq i32 %20, %0"];
	Node0x4ce268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x52e7a0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x52e7f0[shape=record, label="  ret void"];
	Node0x52d460 -> Node0x52db10;
	Node0x52db10 -> Node0x52dbd0;
	Node0x52dbd0 -> Node0x52dc40;
	Node0x52dc40 -> Node0x52dcb0;
	Node0x52dcb0 -> Node0x52dd20;
	Node0x52dd20 -> Node0x52dd90;
	Node0x52dd90 -> Node0x52de00;
	Node0x52de00 -> Node0x52dea0;
	Node0x52dea0 -> Node0x52df10;
	Node0x52df10 -> Node0x52df80;
	Node0x52df80 -> Node0x52dff0;
	Node0x52dff0 -> Node0x52e060;
	Node0x52e060 -> Node0x52e0d0;
	Node0x52e0d0 -> Node0x52e140;
	Node0x52e140 -> Node0x52e1b0;
	Node0x52e1b0 -> Node0x52e220;
	Node0x52e220 -> Node0x52e290;
	Node0x52e290 -> Node0x52e300;
	Node0x52e300 -> Node0x4ce268;
	Node0x4ce268 -> Node0x52e7a0;
	Node0x52e7a0 -> Node0x52e7f0;
edge [color=red]
	Node0x52dbd0 -> Node0x52dcb0;
	Node0x52dd90 -> Node0x52de00;
	Node0x52de00 -> Node0x52dea0;
	Node0x52db10 -> Node0x52df10;
	Node0x52dd20 -> Node0x52df80;
	Node0x52dc40 -> Node0x52dff0;
	Node0x52dff0 -> Node0x52e060;
	Node0x52d460 -> Node0x52e060;
	Node0x52e060 -> Node0x52e0d0;
	Node0x52dbd0 -> Node0x52e0d0;
	Node0x52e0d0 -> Node0x52e140;
	Node0x52dcb0 -> Node0x52e140;
	Node0x52e140 -> Node0x52e1b0;
	Node0x52df10 -> Node0x52e1b0;
	Node0x52e1b0 -> Node0x52e220;
	Node0x52dea0 -> Node0x52e220;
	Node0x52e220 -> Node0x52e290;
	Node0x52df80 -> Node0x52e290;
	Node0x52e290 -> Node0x52e300;
	Node0x52e300 -> Node0x4ce268;
	Node0x4ce268 -> Node0x52e7a0;
}
