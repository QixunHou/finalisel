digraph "DFG for'crackme' function" {
	Node0x10a71b0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x10a7220[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x10a7290[shape=record, label="  %7 = or i32 %6, %3"];
	Node0x10a7300[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x10a7370[shape=record, label="  %9 = or i32 %5, %1"];
	Node0x10a73e0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x10a7450[shape=record, label="  %11 = and i32 %5, %1"];
	Node0x10a74c0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x10a7560[shape=record, label="  %13 = mul i32 %10, -5"];
	Node0x10a75d0[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x10a7670[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x10a76e0[shape=record, label="  %16 = xor i32 %14, -1"];
	Node0x10a7750[shape=record, label="  %17 = xor i32 %9, -1"];
	Node0x10a77f0[shape=record, label="  %18 = mul i32 %17, 6"];
	Node0x10a7890[shape=record, label="  %19 = mul i32 %11, 7"];
	Node0x10a7900[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x10a7970[shape=record, label="  %21 = and i32 %6, %3"];
	Node0x10a79e0[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x10a7a50[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x10a7ac0[shape=record, label="  %24 = shl i32 %20, 1"];
	Node0x10a7b60[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x10a7bd0[shape=record, label="  %26 = shl i32 %23, 1"];
	Node0x10a7c70[shape=record, label="  %27 = mul i32 %3, -3"];
	Node0x10a7d10[shape=record, label="  %28 = sub i32 4, %0"];
	Node0x10a7d80[shape=record, label="  %29 = add i32 %28, %1"];
	Node0x10a7df0[shape=record, label="  %30 = add i32 %29, %2"];
	Node0x10a7e60[shape=record, label="  %31 = add i32 %30, %9"];
	Node0x10a7ed0[shape=record, label="  %32 = add i32 %31, %10"];
	Node0x10a8150[shape=record, label="  %33 = add i32 %32, %12"];
	Node0x10a81c0[shape=record, label="  %34 = add i32 %33, %16"];
	Node0x10a8230[shape=record, label="  %35 = add i32 %34, %3"];
	Node0x10a82a0[shape=record, label="  %36 = add i32 %35, %13"];
	Node0x10a8310[shape=record, label="  %37 = sub i32 %36, %15"];
	Node0x10a8380[shape=record, label="  %38 = add i32 %37, %18"];
	Node0x10a83f0[shape=record, label="  %39 = add i32 %38, %19"];
	Node0x10a8460[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x10a84d0[shape=record, label="  %41 = add i32 %40, %21"];
	Node0x10a8540[shape=record, label="  %42 = add i32 %41, %22"];
	Node0x10a85b0[shape=record, label="  %43 = add i32 %42, %7"];
	Node0x10a8620[shape=record, label="  %44 = add i32 %43, %26"];
	Node0x10a8690[shape=record, label="  %45 = add i32 %44, %25"];
	Node0x10a8700[shape=record, label="  %46 = add i32 %45, %27"];
	Node0x10a8770[shape=record, label="  %47 = icmp eq i32 %8, %46"];
	Node0x1047268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10a8c10[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0x10a8c60[shape=record, label="  ret void"];
	Node0x10a71b0 -> Node0x10a7220;
	Node0x10a7220 -> Node0x10a7290;
	Node0x10a7290 -> Node0x10a7300;
	Node0x10a7300 -> Node0x10a7370;
	Node0x10a7370 -> Node0x10a73e0;
	Node0x10a73e0 -> Node0x10a7450;
	Node0x10a7450 -> Node0x10a74c0;
	Node0x10a74c0 -> Node0x10a7560;
	Node0x10a7560 -> Node0x10a75d0;
	Node0x10a75d0 -> Node0x10a7670;
	Node0x10a7670 -> Node0x10a76e0;
	Node0x10a76e0 -> Node0x10a7750;
	Node0x10a7750 -> Node0x10a77f0;
	Node0x10a77f0 -> Node0x10a7890;
	Node0x10a7890 -> Node0x10a7900;
	Node0x10a7900 -> Node0x10a7970;
	Node0x10a7970 -> Node0x10a79e0;
	Node0x10a79e0 -> Node0x10a7a50;
	Node0x10a7a50 -> Node0x10a7ac0;
	Node0x10a7ac0 -> Node0x10a7b60;
	Node0x10a7b60 -> Node0x10a7bd0;
	Node0x10a7bd0 -> Node0x10a7c70;
	Node0x10a7c70 -> Node0x10a7d10;
	Node0x10a7d10 -> Node0x10a7d80;
	Node0x10a7d80 -> Node0x10a7df0;
	Node0x10a7df0 -> Node0x10a7e60;
	Node0x10a7e60 -> Node0x10a7ed0;
	Node0x10a7ed0 -> Node0x10a8150;
	Node0x10a8150 -> Node0x10a81c0;
	Node0x10a81c0 -> Node0x10a8230;
	Node0x10a8230 -> Node0x10a82a0;
	Node0x10a82a0 -> Node0x10a8310;
	Node0x10a8310 -> Node0x10a8380;
	Node0x10a8380 -> Node0x10a83f0;
	Node0x10a83f0 -> Node0x10a8460;
	Node0x10a8460 -> Node0x10a84d0;
	Node0x10a84d0 -> Node0x10a8540;
	Node0x10a8540 -> Node0x10a85b0;
	Node0x10a85b0 -> Node0x10a8620;
	Node0x10a8620 -> Node0x10a8690;
	Node0x10a8690 -> Node0x10a8700;
	Node0x10a8700 -> Node0x10a8770;
	Node0x10a8770 -> Node0x1047268;
	Node0x1047268 -> Node0x10a8c10;
	Node0x10a8c10 -> Node0x10a8c60;
edge [color=red]
	Node0x10a7220 -> Node0x10a7290;
	Node0x10a7290 -> Node0x10a7300;
	Node0x10a71b0 -> Node0x10a7300;
	Node0x10a71b0 -> Node0x10a7370;
	Node0x10a71b0 -> Node0x10a7450;
	Node0x10a7450 -> Node0x10a74c0;
	Node0x10a73e0 -> Node0x10a7560;
	Node0x10a75d0 -> Node0x10a7670;
	Node0x10a75d0 -> Node0x10a76e0;
	Node0x10a7370 -> Node0x10a7750;
	Node0x10a7750 -> Node0x10a77f0;
	Node0x10a7450 -> Node0x10a7890;
	Node0x10a7220 -> Node0x10a7970;
	Node0x10a7900 -> Node0x10a7ac0;
	Node0x10a7ac0 -> Node0x10a7b60;
	Node0x10a7a50 -> Node0x10a7bd0;
	Node0x10a7d10 -> Node0x10a7d80;
	Node0x10a7d80 -> Node0x10a7df0;
	Node0x10a7df0 -> Node0x10a7e60;
	Node0x10a7370 -> Node0x10a7e60;
	Node0x10a7e60 -> Node0x10a7ed0;
	Node0x10a73e0 -> Node0x10a7ed0;
	Node0x10a7ed0 -> Node0x10a8150;
	Node0x10a74c0 -> Node0x10a8150;
	Node0x10a8150 -> Node0x10a81c0;
	Node0x10a76e0 -> Node0x10a81c0;
	Node0x10a81c0 -> Node0x10a8230;
	Node0x10a8230 -> Node0x10a82a0;
	Node0x10a7560 -> Node0x10a82a0;
	Node0x10a82a0 -> Node0x10a8310;
	Node0x10a7670 -> Node0x10a8310;
	Node0x10a8310 -> Node0x10a8380;
	Node0x10a77f0 -> Node0x10a8380;
	Node0x10a8380 -> Node0x10a83f0;
	Node0x10a7890 -> Node0x10a83f0;
	Node0x10a83f0 -> Node0x10a8460;
	Node0x10a7900 -> Node0x10a8460;
	Node0x10a8460 -> Node0x10a84d0;
	Node0x10a7970 -> Node0x10a84d0;
	Node0x10a84d0 -> Node0x10a8540;
	Node0x10a79e0 -> Node0x10a8540;
	Node0x10a8540 -> Node0x10a85b0;
	Node0x10a7290 -> Node0x10a85b0;
	Node0x10a85b0 -> Node0x10a8620;
	Node0x10a7bd0 -> Node0x10a8620;
	Node0x10a8620 -> Node0x10a8690;
	Node0x10a7b60 -> Node0x10a8690;
	Node0x10a8690 -> Node0x10a8700;
	Node0x10a7c70 -> Node0x10a8700;
	Node0x10a7300 -> Node0x10a8770;
	Node0x10a8700 -> Node0x10a8770;
	Node0x10a8770 -> Node0x1047268;
	Node0x1047268 -> Node0x10a8c10;
}
