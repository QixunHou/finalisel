digraph "DFG for'crackme' function" {
	Node0xf760b0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xf76120[shape=record, label="  %6 = sub i32 %5, %1"];
	Node0xf76190[shape=record, label="  %7 = xor i32 %3, -1"];
	Node0xf76200[shape=record, label="  %8 = add i32 %6, %7"];
	Node0xf76270[shape=record, label="  %9 = or i32 %2, %1"];
	Node0xf762e0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0xf76350[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0xf763c0[shape=record, label="  %12 = and i32 %11, %1"];
	Node0xf76430[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0xf764a0[shape=record, label="  %14 = and i32 %5, %2"];
	Node0xf76510[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0xf76580[shape=record, label="  %16 = and i32 %15, %3"];
	Node0xf765f0[shape=record, label="  %17 = xor i32 %3, %0"];
	Node0xf76690[shape=record, label="  %18 = shl i32 %3, 2"];
	Node0xf76700[shape=record, label="  %19 = or i32 %3, %0"];
	Node0xf76770[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0xf767e0[shape=record, label="  %21 = and i32 %7, %0"];
	Node0xf76880[shape=record, label="  %22 = mul i32 %21, 3"];
	Node0xf76920[shape=record, label="  %23 = mul i32 %16, -6"];
	Node0xf76990[shape=record, label="  %24 = and i32 %3, %0"];
	Node0xf76a00[shape=record, label="  %25 = add i32 %2, %1"];
	Node0xf76aa0[shape=record, label="  %26 = mul i32 %25, -2"];
	Node0xf76b40[shape=record, label="  %27 = mul i32 %0, -3"];
	Node0xf76bb0[shape=record, label="  %28 = add i32 %27, %2"];
	Node0xf76c20[shape=record, label="  %29 = add i32 %28, %10"];
	Node0xf76c90[shape=record, label="  %30 = add i32 %29, %13"];
	Node0xf76d00[shape=record, label="  %31 = add i32 %30, %9"];
	Node0xf76d70[shape=record, label="  %32 = sub i32 %31, %14"];
	Node0xf76ff0[shape=record, label="  %33 = sub i32 %32, %12"];
	Node0xf77060[shape=record, label="  %34 = add i32 %33, %16"];
	Node0xf770d0[shape=record, label="  %35 = add i32 %34, %17"];
	Node0xf77140[shape=record, label="  %36 = add i32 %35, %18"];
	Node0xf771b0[shape=record, label="  %37 = add i32 %36, %20"];
	Node0xf77220[shape=record, label="  %38 = sub i32 %37, %24"];
	Node0xf77290[shape=record, label="  %39 = add i32 %38, %22"];
	Node0xf77300[shape=record, label="  %40 = add i32 %39, %23"];
	Node0xf77370[shape=record, label="  %41 = add i32 %40, %26"];
	Node0xf773e0[shape=record, label="  %42 = icmp eq i32 %8, %41"];
	Node0xf16268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xf77880[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0xf778d0[shape=record, label="  ret void"];
	Node0xf760b0 -> Node0xf76120;
	Node0xf76120 -> Node0xf76190;
	Node0xf76190 -> Node0xf76200;
	Node0xf76200 -> Node0xf76270;
	Node0xf76270 -> Node0xf762e0;
	Node0xf762e0 -> Node0xf76350;
	Node0xf76350 -> Node0xf763c0;
	Node0xf763c0 -> Node0xf76430;
	Node0xf76430 -> Node0xf764a0;
	Node0xf764a0 -> Node0xf76510;
	Node0xf76510 -> Node0xf76580;
	Node0xf76580 -> Node0xf765f0;
	Node0xf765f0 -> Node0xf76690;
	Node0xf76690 -> Node0xf76700;
	Node0xf76700 -> Node0xf76770;
	Node0xf76770 -> Node0xf767e0;
	Node0xf767e0 -> Node0xf76880;
	Node0xf76880 -> Node0xf76920;
	Node0xf76920 -> Node0xf76990;
	Node0xf76990 -> Node0xf76a00;
	Node0xf76a00 -> Node0xf76aa0;
	Node0xf76aa0 -> Node0xf76b40;
	Node0xf76b40 -> Node0xf76bb0;
	Node0xf76bb0 -> Node0xf76c20;
	Node0xf76c20 -> Node0xf76c90;
	Node0xf76c90 -> Node0xf76d00;
	Node0xf76d00 -> Node0xf76d70;
	Node0xf76d70 -> Node0xf76ff0;
	Node0xf76ff0 -> Node0xf77060;
	Node0xf77060 -> Node0xf770d0;
	Node0xf770d0 -> Node0xf77140;
	Node0xf77140 -> Node0xf771b0;
	Node0xf771b0 -> Node0xf77220;
	Node0xf77220 -> Node0xf77290;
	Node0xf77290 -> Node0xf77300;
	Node0xf77300 -> Node0xf77370;
	Node0xf77370 -> Node0xf773e0;
	Node0xf773e0 -> Node0xf16268;
	Node0xf16268 -> Node0xf77880;
	Node0xf77880 -> Node0xf778d0;
edge [color=red]
	Node0xf760b0 -> Node0xf76120;
	Node0xf76120 -> Node0xf76200;
	Node0xf76190 -> Node0xf76200;
	Node0xf76350 -> Node0xf763c0;
	Node0xf763c0 -> Node0xf76430;
	Node0xf760b0 -> Node0xf764a0;
	Node0xf76510 -> Node0xf76580;
	Node0xf76700 -> Node0xf76770;
	Node0xf76190 -> Node0xf767e0;
	Node0xf767e0 -> Node0xf76880;
	Node0xf76580 -> Node0xf76920;
	Node0xf76a00 -> Node0xf76aa0;
	Node0xf76b40 -> Node0xf76bb0;
	Node0xf76bb0 -> Node0xf76c20;
	Node0xf762e0 -> Node0xf76c20;
	Node0xf76c20 -> Node0xf76c90;
	Node0xf76430 -> Node0xf76c90;
	Node0xf76c90 -> Node0xf76d00;
	Node0xf76270 -> Node0xf76d00;
	Node0xf76d00 -> Node0xf76d70;
	Node0xf764a0 -> Node0xf76d70;
	Node0xf76d70 -> Node0xf76ff0;
	Node0xf763c0 -> Node0xf76ff0;
	Node0xf76ff0 -> Node0xf77060;
	Node0xf76580 -> Node0xf77060;
	Node0xf77060 -> Node0xf770d0;
	Node0xf765f0 -> Node0xf770d0;
	Node0xf770d0 -> Node0xf77140;
	Node0xf76690 -> Node0xf77140;
	Node0xf77140 -> Node0xf771b0;
	Node0xf76770 -> Node0xf771b0;
	Node0xf771b0 -> Node0xf77220;
	Node0xf76990 -> Node0xf77220;
	Node0xf77220 -> Node0xf77290;
	Node0xf76880 -> Node0xf77290;
	Node0xf77290 -> Node0xf77300;
	Node0xf76920 -> Node0xf77300;
	Node0xf77300 -> Node0xf77370;
	Node0xf76aa0 -> Node0xf77370;
	Node0xf76200 -> Node0xf773e0;
	Node0xf77370 -> Node0xf773e0;
	Node0xf773e0 -> Node0xf16268;
	Node0xf16268 -> Node0xf77880;
}
