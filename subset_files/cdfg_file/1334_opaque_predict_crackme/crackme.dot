digraph "DFG for'crackme' function" {
	Node0x7ac4b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x7acb60[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x7acc20[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x7acc90[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x7acd00[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x7acd70[shape=record, label="  %8 = or i32 %7, %0"];
	Node0x7acde0[shape=record, label="  %9 = shl i32 %8, 2"];
	Node0x7ace80[shape=record, label="  %10 = xor i32 %9, -4"];
	Node0x7acef0[shape=record, label="  %11 = and i32 %7, %0"];
	Node0x7acf90[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x7ad000[shape=record, label="  %13 = add i32 %7, %0"];
	Node0x7ad070[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x7ad0e0[shape=record, label="  %15 = sub i32 2, %1"];
	Node0x7ad150[shape=record, label="  %16 = sub i32 %15, %5"];
	Node0x7ad1c0[shape=record, label="  %17 = add i32 %16, %6"];
	Node0x7ad230[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x7ad2a0[shape=record, label="  %19 = add i32 %18, %3"];
	Node0x7ad310[shape=record, label="  %20 = sub i32 %19, %12"];
	Node0x7ad380[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x7ad3f0[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x7ad460[shape=record, label="  %23 = icmp eq i32 %22, %4"];
	Node0x74d268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7ad900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x7ad950[shape=record, label="  ret void"];
	Node0x7ac4b0 -> Node0x7acb60;
	Node0x7acb60 -> Node0x7acc20;
	Node0x7acc20 -> Node0x7acc90;
	Node0x7acc90 -> Node0x7acd00;
	Node0x7acd00 -> Node0x7acd70;
	Node0x7acd70 -> Node0x7acde0;
	Node0x7acde0 -> Node0x7ace80;
	Node0x7ace80 -> Node0x7acef0;
	Node0x7acef0 -> Node0x7acf90;
	Node0x7acf90 -> Node0x7ad000;
	Node0x7ad000 -> Node0x7ad070;
	Node0x7ad070 -> Node0x7ad0e0;
	Node0x7ad0e0 -> Node0x7ad150;
	Node0x7ad150 -> Node0x7ad1c0;
	Node0x7ad1c0 -> Node0x7ad230;
	Node0x7ad230 -> Node0x7ad2a0;
	Node0x7ad2a0 -> Node0x7ad310;
	Node0x7ad310 -> Node0x7ad380;
	Node0x7ad380 -> Node0x7ad3f0;
	Node0x7ad3f0 -> Node0x7ad460;
	Node0x7ad460 -> Node0x74d268;
	Node0x74d268 -> Node0x7ad900;
	Node0x7ad900 -> Node0x7ad950;
edge [color=red]
	Node0x7ac4b0 -> Node0x7acb60;
	Node0x7acd00 -> Node0x7acd70;
	Node0x7acd70 -> Node0x7acde0;
	Node0x7acde0 -> Node0x7ace80;
	Node0x7acd00 -> Node0x7acef0;
	Node0x7acef0 -> Node0x7acf90;
	Node0x7acd00 -> Node0x7ad000;
	Node0x7ad000 -> Node0x7ad070;
	Node0x7ad0e0 -> Node0x7ad150;
	Node0x7acc20 -> Node0x7ad150;
	Node0x7ad150 -> Node0x7ad1c0;
	Node0x7acc90 -> Node0x7ad1c0;
	Node0x7ad1c0 -> Node0x7ad230;
	Node0x7acd70 -> Node0x7ad230;
	Node0x7ad230 -> Node0x7ad2a0;
	Node0x7ac4b0 -> Node0x7ad2a0;
	Node0x7ad2a0 -> Node0x7ad310;
	Node0x7acf90 -> Node0x7ad310;
	Node0x7ad310 -> Node0x7ad380;
	Node0x7ad070 -> Node0x7ad380;
	Node0x7ad380 -> Node0x7ad3f0;
	Node0x7ace80 -> Node0x7ad3f0;
	Node0x7ad3f0 -> Node0x7ad460;
	Node0x7acb60 -> Node0x7ad460;
	Node0x7ad460 -> Node0x74d268;
	Node0x74d268 -> Node0x7ad900;
}
