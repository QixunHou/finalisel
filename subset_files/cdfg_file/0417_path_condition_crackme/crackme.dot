digraph "DFG for'crackme' function" {
	Node0x13fc770[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x13fcdf0[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0x13fce60[shape=record, label="  %7 = or i32 %6, 1"];
	Node0x13fced0[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x13fcf40[shape=record, label="  %9 = or i32 %2, %1"];
	Node0x13fcfe0[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x13fd050[shape=record, label="  %11 = or i32 %10, %1"];
	Node0x13fd0c0[shape=record, label="  %12 = and i32 %10, %1"];
	Node0x13fd130[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x13fd1a0[shape=record, label="  %14 = shl i32 %9, 1"];
	Node0x13fd240[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x13fd2b0[shape=record, label="  %16 = add i32 %11, 1"];
	Node0x13fd350[shape=record, label="  %17 = shl i32 %12, 2"];
	Node0x13fd3f0[shape=record, label="  %18 = mul i32 %5, -5"];
	Node0x13fd460[shape=record, label="  %19 = or i32 %3, %0"];
	Node0x13fd4d0[shape=record, label="  %20 = shl i32 %3, 1"];
	Node0x13fd540[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x13fd5b0[shape=record, label="  %22 = xor i32 %0, -1"];
	Node0x13fd620[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x13fd690[shape=record, label="  %24 = or i32 %23, %0"];
	Node0x13fd700[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x13fd770[shape=record, label="  %26 = or i32 %22, %3"];
	Node0x13fd7e0[shape=record, label="  %27 = xor i32 %3, %0"];
	Node0x13fd850[shape=record, label="  %28 = shl i32 %19, 2"];
	Node0x13fd8f0[shape=record, label="  %29 = xor i32 %28, -4"];
	Node0x13fd960[shape=record, label="  %30 = xor i32 %26, -1"];
	Node0x13fda00[shape=record, label="  %31 = mul i32 %30, 7"];
	Node0x13fda70[shape=record, label="  %32 = shl i32 %1, 1"];
	Node0x13fdcf0[shape=record, label="  %33 = add i32 %25, %16"];
	Node0x13fdd90[shape=record, label="  %34 = mul i32 %33, 3"];
	Node0x13fde00[shape=record, label="  %35 = add i32 %2, 3"];
	Node0x13fde70[shape=record, label="  %36 = add i32 %35, %32"];
	Node0x13fdee0[shape=record, label="  %37 = add i32 %36, %9"];
	Node0x13fdf50[shape=record, label="  %38 = add i32 %37, %11"];
	Node0x13fdfc0[shape=record, label="  %39 = add i32 %38, %13"];
	Node0x13fe030[shape=record, label="  %40 = add i32 %39, %3"];
	Node0x13fe0a0[shape=record, label="  %41 = sub i32 %40, %17"];
	Node0x13fe110[shape=record, label="  %42 = add i32 %41, %18"];
	Node0x13fe180[shape=record, label="  %43 = sub i32 %42, %19"];
	Node0x13fe1f0[shape=record, label="  %44 = sub i32 %43, %24"];
	Node0x13fe260[shape=record, label="  %45 = add i32 %44, %25"];
	Node0x13fe2d0[shape=record, label="  %46 = add i32 %45, %26"];
	Node0x13fe340[shape=record, label="  %47 = add i32 %46, %27"];
	Node0x13fe3b0[shape=record, label="  %48 = sub i32 %47, %15"];
	Node0x13fe420[shape=record, label="  %49 = sub i32 %48, %21"];
	Node0x13fe490[shape=record, label="  %50 = add i32 %49, %31"];
	Node0x13fe500[shape=record, label="  %51 = add i32 %50, %29"];
	Node0x13fe570[shape=record, label="  %52 = add i32 %51, %34"];
	Node0x13fe5e0[shape=record, label="  %53 = icmp eq i32 %8, %52"];
	Node0x139d268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x13fea80[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x13fead0[shape=record, label="  ret void"];
	Node0x13fc770 -> Node0x13fcdf0;
	Node0x13fcdf0 -> Node0x13fce60;
	Node0x13fce60 -> Node0x13fced0;
	Node0x13fced0 -> Node0x13fcf40;
	Node0x13fcf40 -> Node0x13fcfe0;
	Node0x13fcfe0 -> Node0x13fd050;
	Node0x13fd050 -> Node0x13fd0c0;
	Node0x13fd0c0 -> Node0x13fd130;
	Node0x13fd130 -> Node0x13fd1a0;
	Node0x13fd1a0 -> Node0x13fd240;
	Node0x13fd240 -> Node0x13fd2b0;
	Node0x13fd2b0 -> Node0x13fd350;
	Node0x13fd350 -> Node0x13fd3f0;
	Node0x13fd3f0 -> Node0x13fd460;
	Node0x13fd460 -> Node0x13fd4d0;
	Node0x13fd4d0 -> Node0x13fd540;
	Node0x13fd540 -> Node0x13fd5b0;
	Node0x13fd5b0 -> Node0x13fd620;
	Node0x13fd620 -> Node0x13fd690;
	Node0x13fd690 -> Node0x13fd700;
	Node0x13fd700 -> Node0x13fd770;
	Node0x13fd770 -> Node0x13fd7e0;
	Node0x13fd7e0 -> Node0x13fd850;
	Node0x13fd850 -> Node0x13fd8f0;
	Node0x13fd8f0 -> Node0x13fd960;
	Node0x13fd960 -> Node0x13fda00;
	Node0x13fda00 -> Node0x13fda70;
	Node0x13fda70 -> Node0x13fdcf0;
	Node0x13fdcf0 -> Node0x13fdd90;
	Node0x13fdd90 -> Node0x13fde00;
	Node0x13fde00 -> Node0x13fde70;
	Node0x13fde70 -> Node0x13fdee0;
	Node0x13fdee0 -> Node0x13fdf50;
	Node0x13fdf50 -> Node0x13fdfc0;
	Node0x13fdfc0 -> Node0x13fe030;
	Node0x13fe030 -> Node0x13fe0a0;
	Node0x13fe0a0 -> Node0x13fe110;
	Node0x13fe110 -> Node0x13fe180;
	Node0x13fe180 -> Node0x13fe1f0;
	Node0x13fe1f0 -> Node0x13fe260;
	Node0x13fe260 -> Node0x13fe2d0;
	Node0x13fe2d0 -> Node0x13fe340;
	Node0x13fe340 -> Node0x13fe3b0;
	Node0x13fe3b0 -> Node0x13fe420;
	Node0x13fe420 -> Node0x13fe490;
	Node0x13fe490 -> Node0x13fe500;
	Node0x13fe500 -> Node0x13fe570;
	Node0x13fe570 -> Node0x13fe5e0;
	Node0x13fe5e0 -> Node0x139d268;
	Node0x139d268 -> Node0x13fea80;
	Node0x13fea80 -> Node0x13fead0;
edge [color=red]
	Node0x13fcdf0 -> Node0x13fce60;
	Node0x13fce60 -> Node0x13fced0;
	Node0x13fc770 -> Node0x13fced0;
	Node0x13fcfe0 -> Node0x13fd050;
	Node0x13fcfe0 -> Node0x13fd0c0;
	Node0x13fd0c0 -> Node0x13fd130;
	Node0x13fcf40 -> Node0x13fd1a0;
	Node0x13fd1a0 -> Node0x13fd240;
	Node0x13fd050 -> Node0x13fd2b0;
	Node0x13fd0c0 -> Node0x13fd350;
	Node0x13fc770 -> Node0x13fd3f0;
	Node0x13fd4d0 -> Node0x13fd540;
	Node0x13fd620 -> Node0x13fd690;
	Node0x13fd5b0 -> Node0x13fd770;
	Node0x13fd460 -> Node0x13fd850;
	Node0x13fd850 -> Node0x13fd8f0;
	Node0x13fd770 -> Node0x13fd960;
	Node0x13fd960 -> Node0x13fda00;
	Node0x13fd700 -> Node0x13fdcf0;
	Node0x13fd2b0 -> Node0x13fdcf0;
	Node0x13fdcf0 -> Node0x13fdd90;
	Node0x13fde00 -> Node0x13fde70;
	Node0x13fda70 -> Node0x13fde70;
	Node0x13fde70 -> Node0x13fdee0;
	Node0x13fcf40 -> Node0x13fdee0;
	Node0x13fdee0 -> Node0x13fdf50;
	Node0x13fd050 -> Node0x13fdf50;
	Node0x13fdf50 -> Node0x13fdfc0;
	Node0x13fd130 -> Node0x13fdfc0;
	Node0x13fdfc0 -> Node0x13fe030;
	Node0x13fe030 -> Node0x13fe0a0;
	Node0x13fd350 -> Node0x13fe0a0;
	Node0x13fe0a0 -> Node0x13fe110;
	Node0x13fd3f0 -> Node0x13fe110;
	Node0x13fe110 -> Node0x13fe180;
	Node0x13fd460 -> Node0x13fe180;
	Node0x13fe180 -> Node0x13fe1f0;
	Node0x13fd690 -> Node0x13fe1f0;
	Node0x13fe1f0 -> Node0x13fe260;
	Node0x13fd700 -> Node0x13fe260;
	Node0x13fe260 -> Node0x13fe2d0;
	Node0x13fd770 -> Node0x13fe2d0;
	Node0x13fe2d0 -> Node0x13fe340;
	Node0x13fd7e0 -> Node0x13fe340;
	Node0x13fe340 -> Node0x13fe3b0;
	Node0x13fd240 -> Node0x13fe3b0;
	Node0x13fe3b0 -> Node0x13fe420;
	Node0x13fd540 -> Node0x13fe420;
	Node0x13fe420 -> Node0x13fe490;
	Node0x13fda00 -> Node0x13fe490;
	Node0x13fe490 -> Node0x13fe500;
	Node0x13fd8f0 -> Node0x13fe500;
	Node0x13fe500 -> Node0x13fe570;
	Node0x13fdd90 -> Node0x13fe570;
	Node0x13fced0 -> Node0x13fe5e0;
	Node0x13fe570 -> Node0x13fe5e0;
	Node0x13fe5e0 -> Node0x139d268;
	Node0x139d268 -> Node0x13fea80;
}
