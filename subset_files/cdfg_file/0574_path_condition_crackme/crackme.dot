digraph "DFG for'crackme' function" {
	Node0x162d940[shape=record, label="  %5 = xor i32 %3, %0"];
	Node0x162d9b0[shape=record, label="  %6 = sub i32 %0, %1"];
	Node0x162da20[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x162da90[shape=record, label="  %8 = xor i32 %2, %1"];
	Node0x162e110[shape=record, label="  %9 = xor i32 %2, 2147483647"];
	Node0x162e1b0[shape=record, label="  %10 = shl i32 %2, 1"];
	Node0x162e220[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x162e290[shape=record, label="  %12 = and i32 %9, %1"];
	Node0x162e300[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x162e370[shape=record, label="  %14 = or i32 %3, %0"];
	Node0x162e410[shape=record, label="  %15 = xor i32 %3, -1"];
	Node0x162e480[shape=record, label="  %16 = and i32 %15, %0"];
	Node0x162e4f0[shape=record, label="  %17 = shl i32 %0, 1"];
	Node0x162e590[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x162e600[shape=record, label="  %19 = and i32 %3, %0"];
	Node0x162e670[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x162e6e0[shape=record, label="  %21 = sub i32 %3, %12"];
	Node0x162e750[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x162e7c0[shape=record, label="  %23 = xor i32 %1, -1"];
	Node0x162e830[shape=record, label="  %24 = sub i32 %23, %18"];
	Node0x162e8a0[shape=record, label="  %25 = add i32 %24, %8"];
	Node0x162e910[shape=record, label="  %26 = sub i32 %25, %10"];
	Node0x162e980[shape=record, label="  %27 = add i32 %26, %11"];
	Node0x162e9f0[shape=record, label="  %28 = add i32 %27, %13"];
	Node0x162ea60[shape=record, label="  %29 = sub i32 %28, %14"];
	Node0x162ead0[shape=record, label="  %30 = add i32 %29, %16"];
	Node0x162eb40[shape=record, label="  %31 = add i32 %30, %20"];
	Node0x162ebb0[shape=record, label="  %32 = sub i32 %31, %19"];
	Node0x162ee30[shape=record, label="  %33 = add i32 %32, %22"];
	Node0x162eea0[shape=record, label="  %34 = icmp eq i32 %7, %33"];
	Node0x15ce268[shape=record, label="  %35 = select i1 %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x162f340[shape=record, label="  %36 = tail call i32 @puts(i8* nonnull dereferenceable(1) %35)"];
	Node0x162f390[shape=record, label="  ret void"];
	Node0x162d940 -> Node0x162d9b0;
	Node0x162d9b0 -> Node0x162da20;
	Node0x162da20 -> Node0x162da90;
	Node0x162da90 -> Node0x162e110;
	Node0x162e110 -> Node0x162e1b0;
	Node0x162e1b0 -> Node0x162e220;
	Node0x162e220 -> Node0x162e290;
	Node0x162e290 -> Node0x162e300;
	Node0x162e300 -> Node0x162e370;
	Node0x162e370 -> Node0x162e410;
	Node0x162e410 -> Node0x162e480;
	Node0x162e480 -> Node0x162e4f0;
	Node0x162e4f0 -> Node0x162e590;
	Node0x162e590 -> Node0x162e600;
	Node0x162e600 -> Node0x162e670;
	Node0x162e670 -> Node0x162e6e0;
	Node0x162e6e0 -> Node0x162e750;
	Node0x162e750 -> Node0x162e7c0;
	Node0x162e7c0 -> Node0x162e830;
	Node0x162e830 -> Node0x162e8a0;
	Node0x162e8a0 -> Node0x162e910;
	Node0x162e910 -> Node0x162e980;
	Node0x162e980 -> Node0x162e9f0;
	Node0x162e9f0 -> Node0x162ea60;
	Node0x162ea60 -> Node0x162ead0;
	Node0x162ead0 -> Node0x162eb40;
	Node0x162eb40 -> Node0x162ebb0;
	Node0x162ebb0 -> Node0x162ee30;
	Node0x162ee30 -> Node0x162eea0;
	Node0x162eea0 -> Node0x15ce268;
	Node0x15ce268 -> Node0x162f340;
	Node0x162f340 -> Node0x162f390;
edge [color=red]
	Node0x162d9b0 -> Node0x162da20;
	Node0x162d940 -> Node0x162da20;
	Node0x162e110 -> Node0x162e290;
	Node0x162e410 -> Node0x162e480;
	Node0x162e4f0 -> Node0x162e590;
	Node0x162e600 -> Node0x162e670;
	Node0x162e290 -> Node0x162e6e0;
	Node0x162e6e0 -> Node0x162e750;
	Node0x162e7c0 -> Node0x162e830;
	Node0x162e590 -> Node0x162e830;
	Node0x162e830 -> Node0x162e8a0;
	Node0x162da90 -> Node0x162e8a0;
	Node0x162e8a0 -> Node0x162e910;
	Node0x162e1b0 -> Node0x162e910;
	Node0x162e910 -> Node0x162e980;
	Node0x162e220 -> Node0x162e980;
	Node0x162e980 -> Node0x162e9f0;
	Node0x162e300 -> Node0x162e9f0;
	Node0x162e9f0 -> Node0x162ea60;
	Node0x162e370 -> Node0x162ea60;
	Node0x162ea60 -> Node0x162ead0;
	Node0x162e480 -> Node0x162ead0;
	Node0x162ead0 -> Node0x162eb40;
	Node0x162e670 -> Node0x162eb40;
	Node0x162eb40 -> Node0x162ebb0;
	Node0x162e600 -> Node0x162ebb0;
	Node0x162ebb0 -> Node0x162ee30;
	Node0x162e750 -> Node0x162ee30;
	Node0x162da20 -> Node0x162eea0;
	Node0x162ee30 -> Node0x162eea0;
	Node0x162eea0 -> Node0x15ce268;
	Node0x15ce268 -> Node0x162f340;
}
