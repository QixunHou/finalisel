; ModuleID = '../.././c_source_file/0090_path_condition_crackme.c'
source_filename = "../.././c_source_file/0090_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %1, %0
  %10 = or i32 %8, %9
  %11 = add i32 %10, %4
  %12 = add i32 %11, %6
  %13 = xor i32 %4, %3
  %14 = xor i32 %4, -1
  %15 = or i32 %14, %3
  %16 = and i32 %4, %3
  %17 = shl i32 %16, 1
  %18 = xor i32 %17, -2
  %19 = add i32 %4, 1
  %20 = shl i32 %6, 2
  %21 = xor i32 %20, -4
  %22 = xor i32 %15, -1
  %23 = and i32 %14, %3
  %24 = mul i32 %23, 6
  %25 = or i32 %1, %0
  %26 = xor i32 %2, %1
  %27 = and i32 %26, %25
  %28 = shl i32 %27, 1
  %29 = or i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %9, %30
  %32 = xor i32 %1, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %26, -1
  %35 = and i32 %33, %34
  %36 = shl i32 %35, 1
  %37 = and i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %9, %38
  %40 = and i32 %29, %1
  %41 = and i32 %7, %1
  %42 = xor i32 %41, %0
  %43 = shl i32 %42, 1
  %44 = xor i32 %0, -1
  %45 = and i32 %2, %1
  %46 = and i32 %45, %44
  %47 = or i32 %2, %1
  %48 = and i32 %47, %0
  %49 = xor i32 %46, -1
  %50 = xor i32 %48, %49
  %51 = or i32 %41, %44
  %52 = and i32 %1, %0
  %53 = xor i32 %29, %52
  %54 = and i32 %32, %2
  %55 = and i32 %54, %0
  %56 = or i32 %32, %2
  %57 = and i32 %56, %44
  %58 = or i32 %55, %57
  %59 = or i32 %9, %7
  %60 = xor i32 %45, -1
  %61 = or i32 %60, %44
  %62 = or i32 %52, %2
  %63 = shl i32 %62, 1
  %64 = or i32 %7, %1
  %65 = xor i32 %8, %64
  %66 = xor i32 %41, -1
  %67 = or i32 %66, %0
  %68 = and i32 %54, %44
  %69 = or i32 %26, %44
  %70 = xor i32 %68, %69
  %71 = and i32 %32, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %2, %0
  %74 = xor i32 %73, -1
  %75 = and i32 %74, %72
  %76 = and i32 %72, %2
  %77 = xor i32 %64, -1
  %78 = or i32 %77, %0
  %79 = and i32 %56, %0
  %80 = or i32 %68, %79
  %81 = or i32 %7, %0
  %82 = and i32 %81, %32
  %83 = xor i32 %9, -1
  %84 = or i32 %30, %83
  %85 = or i32 %71, %7
  %86 = or i32 %8, %77
  %87 = xor i32 %33, -1
  %88 = or i32 %87, %2
  %89 = and i32 %60, %0
  %90 = xor i32 %81, -1
  %91 = or i32 %90, %1
  %92 = or i32 %37, %87
  %93 = or i32 %26, %0
  %94 = xor i32 %55, %93
  %95 = and i32 %73, %9
  %96 = and i32 %60, %44
  %97 = or i32 %37, %1
  %98 = shl i32 %97, 1
  %99 = xor i32 %8, -1
  %100 = xor i32 %99, %1
  %101 = and i32 %45, %0
  %102 = and i32 %47, %44
  %103 = or i32 %101, %102
  %104 = shl i32 %103, 2
  %105 = add i32 %45, 1
  %106 = or i32 %45, %0
  %107 = and i32 %25, %74
  %108 = xor i32 %47, -1
  %109 = or i32 %37, %108
  %110 = or i32 %41, %71
  %111 = xor i32 %34, %0
  %112 = or i32 %26, %52
  %113 = or i32 %26, %71
  %114 = or i32 %37, %9
  %115 = or i32 %52, %7
  %116 = xor i32 %69, -1
  %117 = or i32 %68, %116
  %118 = xor i32 %93, -1
  %119 = or i32 %55, %118
  %120 = and i32 %7, %72
  %121 = or i32 %66, %44
  %122 = shl i32 %121, 1
  %123 = or i32 %73, %52
  %124 = and i32 %25, %7
  %125 = or i32 %90, %32
  %126 = and i32 %7, %83
  %127 = or i32 %73, %87
  %128 = xor i32 %45, %0
  %129 = or i32 %74, %83
  %130 = xor i32 %38, %1
  %131 = xor i32 %66, %0
  %132 = or i32 %45, %44
  %133 = xor i32 %25, -1
  %134 = or i32 %37, %133
  %135 = xor i32 %108, %0
  %136 = or i32 %8, %83
  %137 = and i32 %9, %99
  %138 = xor i32 %47, %0
  %139 = and i32 %73, %72
  %140 = xor i32 %52, -1
  %141 = and i32 %140, %2
  %142 = xor i32 %8, %60
  %143 = and i32 %66, %44
  %144 = or i32 %8, %1
  %145 = xor i32 %60, %0
  %146 = and i32 %26, %33
  %147 = xor i32 %57, -1
  %148 = xor i32 %55, %147
  %149 = or i32 %64, %0
  %150 = or i32 %34, %133
  %151 = xor i32 %77, %0
  %152 = or i32 %30, %1
  %153 = or i32 %52, %74
  %154 = and i32 %26, %72
  %155 = shl i32 %154, 1
  %156 = and i32 %25, %2
  %157 = or i32 %90, %83
  %158 = and i32 %33, %74
  %159 = xor i32 %47, %52
  %160 = or i32 %71, %34
  %161 = or i32 %37, %41
  %162 = and i32 %73, %83
  %163 = or i32 %9, %74
  %164 = or i32 %64, %44
  %165 = and i32 %74, %83
  %166 = and i32 %73, %1
  %167 = or i32 %30, %32
  %168 = shl i32 %167, 1
  %169 = or i32 %60, %0
  %170 = and i32 %26, %0
  %171 = xor i32 %170, %49
  %172 = and i32 %29, %9
  %173 = xor i32 %64, %52
  %174 = or i32 %34, %87
  %175 = or i32 %26, %87
  %176 = and i32 %81, %9
  %177 = xor i32 %90, %1
  %178 = xor i32 %56, %0
  %179 = or i32 %55, %178
  %180 = and i32 %33, %2
  %181 = and i32 %29, %32
  %182 = or i32 %74, %133
  %183 = or i32 %74, %32
  %184 = or i32 %52, %90
  %185 = xor i32 %140, %2
  %186 = or i32 %46, %170
  %187 = and i32 %73, %33
  %188 = xor i32 %26, %0
  %189 = xor i32 %101, %188
  %190 = shl i32 %189, 1
  %191 = and i32 %81, %83
  %192 = xor i32 %138, 2147483647
  %193 = xor i32 %192, %101
  %194 = or i32 %108, %0
  %195 = and i32 %73, %32
  %196 = or i32 %34, %44
  %197 = add i32 %47, 1
  %198 = or i32 %77, %44
  %199 = or i32 %8, %45
  %200 = and i32 %38, %32
  %201 = or i32 %45, %71
  %202 = or i32 %73, %32
  %203 = and i32 %9, %2
  %204 = or i32 %73, %9
  %205 = and i32 %34, %140
  %206 = and i32 %25, %34
  %207 = xor i32 %64, %0
  %208 = and i32 %64, %0
  %209 = shl i32 %208, 1
  %210 = or i32 %73, %83
  %211 = xor i32 %8, %1
  %212 = or i32 %7, %133
  %213 = and i32 %74, %1
  %214 = or i32 %133, %2
  %215 = xor i32 %102, -1
  %216 = xor i32 %101, %215
  %217 = or i32 %37, %83
  %218 = or i32 %34, %0
  %219 = and i32 %64, %44
  %220 = or i32 %52, %30
  %221 = or i32 %55, %188
  %222 = shl i32 %221, 1
  %223 = xor i32 %52, %2
  %224 = and i32 %73, %25
  %225 = shl i32 %224, 1
  %226 = and i32 %66, %0
  %227 = and i32 %29, %83
  %228 = or i32 %71, %2
  %229 = or i32 %74, %1
  %230 = xor i32 %29, %1
  %231 = xor i32 %133, %2
  %232 = xor i32 %81, %1
  %233 = or i32 %73, %1
  %234 = xor i32 %72, %2
  %235 = or i32 %46, %48
  %236 = xor i32 %178, 2147483647
  %237 = xor i32 %236, %55
  %238 = shl i32 %237, 1
  %239 = or i32 %108, %44
  %240 = shl i32 %239, 1
  %241 = and i32 %108, %44
  %242 = mul i32 %241, -17
  %243 = and i32 %41, %44
  %244 = shl i32 %243, 4
  %245 = and i32 %108, %0
  %246 = and i32 %41, %0
  %247 = mul i32 %246, 13
  %248 = and i32 %77, %44
  %249 = shl i32 %46, 1
  %250 = and i32 %77, %0
  %251 = mul i32 %250, -11
  %252 = add i32 %133, %44
  %253 = add i32 %252, %33
  %254 = add i32 %253, %231
  %255 = add i32 %254, %203
  %256 = add i32 %255, %73
  %257 = add i32 %256, %45
  %258 = add i32 %257, %81
  %259 = add i32 %258, %85
  %260 = add i32 %259, %248
  %261 = add i32 %260, %230
  %262 = add i32 %261, %226
  %263 = add i32 %262, %183
  %264 = add i32 %263, %181
  %265 = add i32 %264, %134
  %266 = add i32 %265, %111
  %267 = add i32 %266, %82
  %268 = add i32 %267, %179
  %269 = sub i32 %268, %13
  %270 = add i32 %269, %193
  %271 = shl i32 %270, 1
  %272 = sub i32 %212, %200
  %273 = sub i32 %272, %176
  %274 = add i32 %273, %137
  %275 = add i32 %274, %19
  %276 = add i32 %275, %58
  %277 = sub i32 %276, %70
  %278 = mul i32 %277, 3
  %279 = add i32 %245, %37
  %280 = sub i32 %279, %146
  %281 = add i32 %280, %22
  %282 = mul i32 %281, 5
  %283 = add i32 %158, %185
  %284 = shl i32 %283, 2
  %285 = add i32 %0, 2
  %286 = add i32 %285, %32
  %287 = add i32 %286, %52
  %288 = sub i32 %287, %9
  %289 = add i32 %288, %72
  %290 = sub i32 %289, %71
  %291 = add i32 %290, %25
  %292 = sub i32 %291, %59
  %293 = add i32 %292, %76
  %294 = sub i32 %293, %88
  %295 = add i32 %294, %41
  %296 = sub i32 %295, %29
  %297 = add i32 %296, %105
  %298 = sub i32 %297, %115
  %299 = add i32 %298, %120
  %300 = sub i32 %299, %47
  %301 = sub i32 %300, %124
  %302 = sub i32 %301, %126
  %303 = add i32 %302, %64
  %304 = add i32 %303, %141
  %305 = sub i32 %304, %156
  %306 = add i32 %305, %180
  %307 = add i32 %306, %197
  %308 = add i32 %307, %214
  %309 = add i32 %308, %223
  %310 = add i32 %309, %228
  %311 = sub i32 %310, %234
  %312 = add i32 %311, %26
  %313 = add i32 %312, %31
  %314 = add i32 %313, %39
  %315 = sub i32 %314, %40
  %316 = sub i32 %315, %51
  %317 = add i32 %316, %53
  %318 = sub i32 %317, %61
  %319 = sub i32 %318, %63
  %320 = sub i32 %319, %65
  %321 = sub i32 %320, %67
  %322 = sub i32 %321, %75
  %323 = add i32 %322, %78
  %324 = sub i32 %323, %84
  %325 = add i32 %324, %86
  %326 = add i32 %325, %89
  %327 = sub i32 %326, %91
  %328 = sub i32 %327, %92
  %329 = add i32 %328, %95
  %330 = add i32 %329, %96
  %331 = sub i32 %330, %100
  %332 = sub i32 %331, %106
  %333 = add i32 %332, %107
  %334 = sub i32 %333, %109
  %335 = add i32 %334, %110
  %336 = sub i32 %335, %112
  %337 = sub i32 %336, %113
  %338 = add i32 %337, %114
  %339 = sub i32 %338, %69
  %340 = add i32 %339, %123
  %341 = add i32 %340, %125
  %342 = add i32 %341, %127
  %343 = sub i32 %342, %128
  %344 = sub i32 %343, %129
  %345 = sub i32 %344, %130
  %346 = add i32 %345, %131
  %347 = add i32 %346, %132
  %348 = sub i32 %347, %135
  %349 = add i32 %348, %136
  %350 = sub i32 %349, %138
  %351 = sub i32 %350, %139
  %352 = sub i32 %351, %142
  %353 = add i32 %352, %143
  %354 = add i32 %353, %144
  %355 = add i32 %354, %145
  %356 = add i32 %355, %149
  %357 = add i32 %356, %150
  %358 = sub i32 %357, %151
  %359 = sub i32 %358, %152
  %360 = add i32 %359, %153
  %361 = add i32 %360, %157
  %362 = add i32 %361, %159
  %363 = sub i32 %362, %160
  %364 = add i32 %363, %161
  %365 = add i32 %364, %102
  %366 = sub i32 %365, %162
  %367 = sub i32 %366, %163
  %368 = sub i32 %367, %164
  %369 = sub i32 %368, %165
  %370 = add i32 %369, %166
  %371 = sub i32 %370, %48
  %372 = add i32 %371, %169
  %373 = sub i32 %372, %172
  %374 = sub i32 %373, %173
  %375 = add i32 %374, %174
  %376 = sub i32 %375, %175
  %377 = add i32 %376, %177
  %378 = sub i32 %377, %182
  %379 = add i32 %378, %184
  %380 = sub i32 %379, %187
  %381 = sub i32 %380, %191
  %382 = sub i32 %381, %194
  %383 = sub i32 %382, %195
  %384 = sub i32 %383, %196
  %385 = sub i32 %384, %198
  %386 = add i32 %385, %199
  %387 = add i32 %386, %201
  %388 = add i32 %387, %202
  %389 = sub i32 %388, %204
  %390 = add i32 %389, %93
  %391 = sub i32 %390, %205
  %392 = sub i32 %391, %206
  %393 = add i32 %392, %207
  %394 = sub i32 %393, %210
  %395 = add i32 %394, %211
  %396 = sub i32 %395, %213
  %397 = add i32 %396, %217
  %398 = sub i32 %397, %218
  %399 = add i32 %398, %219
  %400 = add i32 %399, %220
  %401 = sub i32 %400, %227
  %402 = sub i32 %401, %229
  %403 = add i32 %402, %232
  %404 = sub i32 %403, %233
  %405 = sub i32 %404, %188
  %406 = sub i32 %405, %170
  %407 = add i32 %406, %15
  %408 = add i32 %407, %13
  %409 = add i32 %408, %16
  %410 = sub i32 %409, %28
  %411 = sub i32 %410, %36
  %412 = sub i32 %411, %43
  %413 = add i32 %412, %50
  %414 = sub i32 %413, %80
  %415 = add i32 %414, %94
  %416 = sub i32 %415, %98
  %417 = add i32 %416, %117
  %418 = add i32 %417, %119
  %419 = sub i32 %418, %122
  %420 = sub i32 %419, %148
  %421 = sub i32 %420, %155
  %422 = sub i32 %421, %168
  %423 = add i32 %422, %171
  %424 = add i32 %423, %186
  %425 = sub i32 %424, %209
  %426 = add i32 %425, %216
  %427 = sub i32 %426, %225
  %428 = sub i32 %427, %235
  %429 = sub i32 %428, %240
  %430 = add i32 %429, %242
  %431 = add i32 %430, %244
  %432 = add i32 %431, %247
  %433 = sub i32 %432, %249
  %434 = add i32 %433, %251
  %435 = add i32 %434, %24
  %436 = sub i32 %435, %104
  %437 = sub i32 %436, %190
  %438 = sub i32 %437, %222
  %439 = add i32 %438, %284
  %440 = sub i32 %439, %18
  %441 = add i32 %440, %21
  %442 = sub i32 %441, %238
  %443 = add i32 %442, %282
  %444 = add i32 %443, %278
  %445 = add i32 %444, %271
  %446 = icmp eq i32 %12, %445
  %447 = select i1 %446, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %448 = tail call i32 @puts(i8* nonnull dereferenceable(1) %447)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
