; ModuleID = '../.././c_source_file/0852_path_condition_crackme.c'
source_filename = "../.././c_source_file/0852_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = or i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %1, %0
  %11 = or i32 %10, %9
  %12 = add i32 %11, %3
  %13 = sub i32 %12, %7
  %14 = xor i32 %4, %3
  %15 = and i32 %6, %3
  %16 = add i32 %4, 1
  %17 = or i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = shl i32 %7, 1
  %20 = xor i32 %19, -2
  %21 = and i32 %4, %3
  %22 = and i32 %8, %1
  %23 = and i32 %2, %1
  %24 = and i32 %23, %0
  %25 = xor i32 %0, -1
  %26 = xor i32 %2, %1
  %27 = and i32 %26, %25
  %28 = or i32 %24, %27
  %29 = and i32 %2, %0
  %30 = xor i32 %1, -1
  %31 = or i32 %30, %0
  %32 = xor i32 %29, %31
  %33 = or i32 %2, %1
  %34 = xor i32 %33, %0
  %35 = xor i32 %24, -1
  %36 = xor i32 %34, %35
  %37 = add i32 %8, 1
  %38 = and i32 %33, %25
  %39 = xor i32 %2, -1
  %40 = and i32 %39, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %0
  %43 = xor i32 %29, -1
  %44 = and i32 %43, %30
  %45 = and i32 %39, %0
  %46 = or i32 %45, %1
  %47 = and i32 %30, %0
  %48 = or i32 %47, %2
  %49 = and i32 %30, %2
  %50 = and i32 %49, %25
  %51 = or i32 %26, %25
  %52 = xor i32 %50, %51
  %53 = shl i32 %52, 1
  %54 = or i32 %40, %25
  %55 = or i32 %24, %34
  %56 = shl i32 %55, 1
  %57 = or i32 %1, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %26, %58
  %60 = xor i32 %51, -1
  %61 = or i32 %50, %60
  %62 = and i32 %57, %39
  %63 = xor i32 %10, -1
  %64 = xor i32 %2, %0
  %65 = or i32 %64, %63
  %66 = xor i32 %47, -1
  %67 = xor i32 %66, %2
  %68 = and i32 %57, %2
  %69 = xor i32 %26, %0
  %70 = shl i32 %69, 1
  %71 = xor i32 %31, -1
  %72 = or i32 %29, %71
  %73 = or i32 %29, %1
  %74 = and i32 %66, %2
  %75 = xor i32 %26, -1
  %76 = and i32 %75, %66
  %77 = or i32 %39, %0
  %78 = xor i32 %77, %1
  %79 = xor i32 %77, -1
  %80 = xor i32 %79, %1
  %81 = xor i32 %23, -1
  %82 = xor i32 %45, %81
  %83 = or i32 %30, %2
  %84 = and i32 %83, %0
  %85 = xor i32 %84, -1
  %86 = xor i32 %50, %85
  %87 = and i32 %1, %0
  %88 = xor i32 %33, -1
  %89 = or i32 %87, %88
  %90 = xor i32 %45, -1
  %91 = xor i32 %90, %1
  %92 = shl i32 %91, 2
  %93 = and i32 %90, %63
  %94 = and i32 %75, %25
  %95 = shl i32 %94, 1
  %96 = xor i32 %87, -1
  %97 = xor i32 %64, -1
  %98 = and i32 %97, %96
  %99 = and i32 %77, %1
  %100 = and i32 %64, %63
  %101 = xor i32 %29, %1
  %102 = and i32 %96, %2
  %103 = and i32 %49, %0
  %104 = or i32 %103, %69
  %105 = or i32 %97, %30
  %106 = or i32 %39, %1
  %107 = xor i32 %106, -1
  %108 = or i32 %107, %25
  %109 = and i32 %41, %25
  %110 = or i32 %26, %0
  %111 = xor i32 %103, %110
  %112 = or i32 %45, %107
  %113 = or i32 %29, %40
  %114 = or i32 %24, %38
  %115 = and i32 %26, %57
  %116 = shl i32 %115, 1
  %117 = and i32 %23, %25
  %118 = and i32 %33, %0
  %119 = xor i32 %117, -1
  %120 = xor i32 %118, %119
  %121 = or i32 %64, %10
  %122 = and i32 %10, %39
  %123 = and i32 %26, %66
  %124 = shl i32 %123, 1
  %125 = shl i32 %39, 1
  %126 = or i32 %87, %79
  %127 = or i32 %64, %71
  %128 = and i32 %83, %25
  %129 = or i32 %103, %128
  %130 = shl i32 %129, 1
  %131 = or i32 %97, %58
  %132 = xor i32 %87, %2
  %133 = shl i32 %132, 2
  %134 = and i32 %8, %30
  %135 = or i32 %107, %0
  %136 = xor i32 %23, %0
  %137 = and i32 %31, %97
  %138 = or i32 %87, %107
  %139 = or i32 %29, %63
  %140 = and i32 %77, %63
  %141 = and i32 %81, %0
  %142 = and i32 %97, %66
  %143 = or i32 %87, %9
  %144 = or i32 %106, %0
  %145 = or i32 %97, %1
  %146 = and i32 %10, %2
  %147 = or i32 %64, %1
  %148 = or i32 %88, %25
  %149 = and i32 %75, %0
  %150 = and i32 %90, %30
  %151 = shl i32 %33, 1
  %152 = or i32 %40, %47
  %153 = and i32 %10, %97
  %154 = xor i32 %45, %1
  %155 = or i32 %75, %0
  %156 = or i32 %45, %30
  %157 = shl i32 %156, 1
  %158 = and i32 %26, %0
  %159 = or i32 %39, %71
  %160 = xor i32 %83, %0
  %161 = or i32 %103, %160
  %162 = shl i32 %161, 1
  %163 = xor i32 %9, %1
  %164 = xor i32 %29, %33
  %165 = or i32 %23, %47
  %166 = or i32 %87, %75
  %167 = shl i32 %166, 1
  %168 = or i32 %75, %58
  %169 = and i32 %43, %63
  %170 = or i32 %79, %1
  %171 = or i32 %10, %2
  %172 = or i32 %10, %39
  %173 = or i32 %64, %47
  %174 = xor i32 %8, %87
  %175 = and i32 %97, %63
  %176 = xor i32 %88, %0
  %177 = or i32 %41, %25
  %178 = or i32 %106, %25
  %179 = or i32 %64, %87
  %180 = or i32 %26, %47
  %181 = and i32 %8, %63
  %182 = xor i32 %71, %2
  %183 = add i32 %40, 1
  %184 = xor i32 %81, %0
  %185 = xor i32 %29, %57
  %186 = and i32 %75, %96
  %187 = or i32 %9, %1
  %188 = and i32 %106, %0
  %189 = or i32 %33, %25
  %190 = xor i32 %107, %0
  %191 = shl i32 %190, 1
  %192 = xor i32 %57, %2
  %193 = shl i32 %192, 1
  %194 = or i32 %45, %23
  %195 = xor i32 %75, %0
  %196 = or i32 %40, %0
  %197 = or i32 %79, %63
  %198 = shl i32 %197, 1
  %199 = xor i32 %158, %119
  %200 = xor i32 %47, %81
  %201 = shl i32 %200, 1
  %202 = xor i32 %24, %69
  %203 = and i32 %39, %63
  %204 = and i32 %64, %96
  %205 = shl i32 %204, 1
  %206 = xor i32 %43, %1
  %207 = or i32 %97, %63
  %208 = or i32 %81, %25
  %209 = and i32 %10, %43
  %210 = xor i32 %31, %2
  %211 = and i32 %31, %75
  %212 = and i32 %97, %30
  %213 = or i32 %29, %30
  %214 = and i32 %64, %57
  %215 = or i32 %97, %71
  %216 = xor i32 %45, %106
  %217 = or i32 %26, %87
  %218 = xor i32 %103, -1
  %219 = xor i32 %160, %218
  %220 = or i32 %87, %2
  %221 = or i32 %75, %25
  %222 = shl i32 %221, 1
  %223 = or i32 %29, %58
  %224 = or i32 %47, %97
  %225 = shl i32 %224, 1
  %226 = xor i32 %29, %41
  %227 = or i32 %50, %84
  %228 = or i32 %75, %71
  %229 = or i32 %39, %63
  %230 = and i32 %39, %66
  %231 = and i32 %31, %39
  %232 = and i32 %90, %1
  %233 = and i32 %57, %97
  %234 = shl i32 %233, 1
  %235 = xor i32 %96, %2
  %236 = or i32 %63, %2
  %237 = xor i32 %128, %218
  %238 = and i32 %39, %96
  %239 = xor i32 %58, %2
  %240 = or i32 %9, %30
  %241 = xor i32 %38, %35
  %242 = and i32 %26, %31
  %243 = xor i32 %27, %35
  %244 = or i32 %88, %0
  %245 = and i32 %26, %96
  %246 = or i32 %117, %158
  %247 = or i32 %47, %39
  %248 = or i32 %58, %2
  %249 = shl i32 %87, 1
  %250 = or i32 %23, %0
  %251 = or i32 %33, %0
  %252 = or i32 %29, %88
  %253 = and i32 %64, %31
  %254 = and i32 %77, %30
  %255 = shl i32 %254, 1
  %256 = or i32 %64, %30
  %257 = xor i32 %47, %41
  %258 = shl i32 %257, 1
  %259 = add i32 %33, 1
  %260 = xor i32 %110, -1
  %261 = or i32 %103, %260
  %262 = and i32 %88, %25
  %263 = and i32 %40, %25
  %264 = mul i32 %263, -14
  %265 = and i32 %88, %0
  %266 = and i32 %40, %0
  %267 = mul i32 %266, 7
  %268 = and i32 %107, %25
  %269 = mul i32 %268, 12
  %270 = mul i32 %117, -15
  %271 = and i32 %107, %0
  %272 = sub i32 -2, %106
  %273 = add i32 %272, %90
  %274 = add i32 %273, %231
  %275 = add i32 %274, %23
  %276 = add i32 %275, %122
  %277 = add i32 %276, %62
  %278 = add i32 %277, %245
  %279 = add i32 %278, %209
  %280 = add i32 %279, %208
  %281 = add i32 %280, %186
  %282 = add i32 %281, %181
  %283 = add i32 %282, %178
  %284 = add i32 %283, %170
  %285 = add i32 %284, %153
  %286 = add i32 %285, %144
  %287 = add i32 %286, %127
  %288 = add i32 %287, %113
  %289 = add i32 %288, %101
  %290 = add i32 %289, %78
  %291 = add i32 %290, %38
  %292 = add i32 %291, %15
  %293 = shl i32 %292, 1
  %294 = sub i32 %217, %8
  %295 = sub i32 %294, %242
  %296 = sub i32 %295, %188
  %297 = sub i32 %296, %82
  %298 = mul i32 %297, 5
  %299 = sub i32 %24, %265
  %300 = add i32 %299, %112
  %301 = add i32 %300, %22
  %302 = mul i32 %301, 3
  %303 = add i32 %271, %262
  %304 = shl i32 %303, 3
  %305 = add i32 %42, 1073741823
  %306 = add i32 %305, %148
  %307 = shl i32 %306, 2
  %308 = add i32 %0, -4
  %309 = add i32 %308, %2
  %310 = sub i32 %309, %10
  %311 = add i32 %310, %96
  %312 = add i32 %311, %37
  %313 = add i32 %312, %48
  %314 = add i32 %313, %67
  %315 = sub i32 %314, %68
  %316 = add i32 %315, %74
  %317 = sub i32 %316, %40
  %318 = add i32 %317, %102
  %319 = sub i32 %318, %125
  %320 = add i32 %319, %146
  %321 = add i32 %320, %159
  %322 = sub i32 %321, %171
  %323 = add i32 %322, %172
  %324 = add i32 %323, %26
  %325 = sub i32 %324, %182
  %326 = add i32 %325, %183
  %327 = add i32 %326, %81
  %328 = add i32 %327, %64
  %329 = sub i32 %328, %45
  %330 = add i32 %329, %106
  %331 = sub i32 %330, %203
  %332 = add i32 %331, %210
  %333 = add i32 %332, %220
  %334 = add i32 %333, %229
  %335 = add i32 %334, %230
  %336 = add i32 %335, %235
  %337 = sub i32 %336, %236
  %338 = add i32 %337, %238
  %339 = sub i32 %338, %239
  %340 = add i32 %339, %77
  %341 = add i32 %340, %247
  %342 = sub i32 %341, %248
  %343 = sub i32 %342, %249
  %344 = add i32 %343, %259
  %345 = add i32 %344, %16
  %346 = sub i32 %345, %32
  %347 = sub i32 %346, %44
  %348 = sub i32 %347, %46
  %349 = add i32 %348, %54
  %350 = sub i32 %349, %59
  %351 = sub i32 %350, %65
  %352 = sub i32 %351, %72
  %353 = add i32 %352, %73
  %354 = add i32 %353, %76
  %355 = add i32 %354, %80
  %356 = sub i32 %355, %89
  %357 = sub i32 %356, %93
  %358 = sub i32 %357, %98
  %359 = sub i32 %358, %99
  %360 = sub i32 %359, %100
  %361 = sub i32 %360, %105
  %362 = add i32 %361, %108
  %363 = add i32 %362, %109
  %364 = sub i32 %363, %121
  %365 = add i32 %364, %126
  %366 = add i32 %365, %131
  %367 = sub i32 %366, %133
  %368 = sub i32 %367, %134
  %369 = add i32 %368, %135
  %370 = add i32 %369, %136
  %371 = add i32 %370, %137
  %372 = sub i32 %371, %138
  %373 = sub i32 %372, %139
  %374 = sub i32 %373, %140
  %375 = add i32 %374, %141
  %376 = sub i32 %375, %142
  %377 = add i32 %376, %143
  %378 = sub i32 %377, %145
  %379 = sub i32 %378, %147
  %380 = add i32 %379, %149
  %381 = sub i32 %380, %150
  %382 = sub i32 %381, %151
  %383 = add i32 %382, %152
  %384 = add i32 %383, %154
  %385 = sub i32 %384, %155
  %386 = sub i32 %385, %158
  %387 = sub i32 %386, %163
  %388 = add i32 %387, %164
  %389 = sub i32 %388, %165
  %390 = sub i32 %389, %168
  %391 = sub i32 %390, %51
  %392 = add i32 %391, %169
  %393 = sub i32 %392, %173
  %394 = add i32 %393, %174
  %395 = add i32 %394, %175
  %396 = add i32 %395, %176
  %397 = add i32 %396, %177
  %398 = add i32 %397, %179
  %399 = sub i32 %398, %180
  %400 = add i32 %399, %184
  %401 = sub i32 %400, %185
  %402 = sub i32 %401, %187
  %403 = add i32 %402, %189
  %404 = sub i32 %403, %193
  %405 = sub i32 %404, %27
  %406 = add i32 %405, %194
  %407 = add i32 %406, %195
  %408 = sub i32 %407, %196
  %409 = add i32 %408, %206
  %410 = sub i32 %409, %34
  %411 = sub i32 %410, %207
  %412 = add i32 %411, %211
  %413 = sub i32 %412, %212
  %414 = sub i32 %413, %213
  %415 = sub i32 %414, %214
  %416 = add i32 %415, %215
  %417 = add i32 %416, %216
  %418 = sub i32 %417, %223
  %419 = add i32 %418, %226
  %420 = sub i32 %419, %228
  %421 = sub i32 %420, %232
  %422 = sub i32 %421, %240
  %423 = sub i32 %422, %244
  %424 = sub i32 %423, %250
  %425 = add i32 %424, %251
  %426 = sub i32 %425, %252
  %427 = sub i32 %426, %253
  %428 = add i32 %427, %256
  %429 = sub i32 %428, %14
  %430 = add i32 %429, %15
  %431 = add i32 %430, %18
  %432 = add i32 %431, %21
  %433 = sub i32 %432, %28
  %434 = add i32 %433, %36
  %435 = sub i32 %434, %61
  %436 = sub i32 %435, %70
  %437 = sub i32 %436, %86
  %438 = sub i32 %437, %92
  %439 = sub i32 %438, %95
  %440 = sub i32 %439, %104
  %441 = sub i32 %440, %111
  %442 = sub i32 %441, %114
  %443 = sub i32 %442, %116
  %444 = sub i32 %443, %120
  %445 = sub i32 %444, %124
  %446 = sub i32 %445, %157
  %447 = sub i32 %446, %167
  %448 = sub i32 %447, %191
  %449 = sub i32 %448, %198
  %450 = sub i32 %449, %199
  %451 = sub i32 %450, %201
  %452 = add i32 %451, %202
  %453 = sub i32 %452, %205
  %454 = add i32 %453, %219
  %455 = sub i32 %454, %222
  %456 = sub i32 %455, %225
  %457 = add i32 %456, %227
  %458 = sub i32 %457, %234
  %459 = sub i32 %458, %237
  %460 = sub i32 %459, %241
  %461 = sub i32 %460, %243
  %462 = sub i32 %461, %246
  %463 = sub i32 %462, %255
  %464 = sub i32 %463, %258
  %465 = sub i32 %464, %261
  %466 = add i32 %465, %264
  %467 = add i32 %466, %267
  %468 = add i32 %467, %269
  %469 = add i32 %468, %270
  %470 = sub i32 %469, %53
  %471 = sub i32 %470, %56
  %472 = sub i32 %471, %130
  %473 = sub i32 %472, %162
  %474 = add i32 %473, %304
  %475 = add i32 %474, %20
  %476 = add i32 %475, %307
  %477 = add i32 %476, %302
  %478 = add i32 %477, %298
  %479 = add i32 %478, %293
  %480 = icmp eq i32 %13, %479
  %481 = select i1 %480, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %482 = tail call i32 @puts(i8* nonnull dereferenceable(1) %481)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
