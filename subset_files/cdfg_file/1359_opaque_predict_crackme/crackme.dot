digraph "DFG for'crackme' function" {
	Node0xc50510[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xc50bc0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0xc50c80[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xc50cf0[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0xc50d90[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0xc50e00[shape=record, label="  %8 = or i32 %5, %0"];
	Node0xc50ea0[shape=record, label="  %9 = shl i32 %8, 2"];
	Node0xc50f10[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0xc50f80[shape=record, label="  %11 = or i32 %1, %0"];
	Node0xc50ff0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0xc51060[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xc510d0[shape=record, label="  %14 = xor i32 %8, -1"];
	Node0xc51170[shape=record, label="  %15 = mul i32 %14, -5"];
	Node0xc511e0[shape=record, label="  %16 = and i32 %5, %0"];
	Node0xc51250[shape=record, label="  %17 = add i32 %7, -1"];
	Node0xc512c0[shape=record, label="  %18 = add i32 %17, %10"];
	Node0xc51330[shape=record, label="  %19 = add i32 %18, %16"];
	Node0xc513a0[shape=record, label="  %20 = add i32 %19, %3"];
	Node0xc51410[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0xc51480[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xc514f0[shape=record, label="  %23 = add i32 %22, %15"];
	Node0xc51560[shape=record, label="  %24 = add i32 %23, %13"];
	Node0xc515d0[shape=record, label="  %25 = icmp eq i32 %24, %4"];
	Node0xbf1268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc51a70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0xc51ac0[shape=record, label="  ret void"];
	Node0xc50510 -> Node0xc50bc0;
	Node0xc50bc0 -> Node0xc50c80;
	Node0xc50c80 -> Node0xc50cf0;
	Node0xc50cf0 -> Node0xc50d90;
	Node0xc50d90 -> Node0xc50e00;
	Node0xc50e00 -> Node0xc50ea0;
	Node0xc50ea0 -> Node0xc50f10;
	Node0xc50f10 -> Node0xc50f80;
	Node0xc50f80 -> Node0xc50ff0;
	Node0xc50ff0 -> Node0xc51060;
	Node0xc51060 -> Node0xc510d0;
	Node0xc510d0 -> Node0xc51170;
	Node0xc51170 -> Node0xc511e0;
	Node0xc511e0 -> Node0xc51250;
	Node0xc51250 -> Node0xc512c0;
	Node0xc512c0 -> Node0xc51330;
	Node0xc51330 -> Node0xc513a0;
	Node0xc513a0 -> Node0xc51410;
	Node0xc51410 -> Node0xc51480;
	Node0xc51480 -> Node0xc514f0;
	Node0xc514f0 -> Node0xc51560;
	Node0xc51560 -> Node0xc515d0;
	Node0xc515d0 -> Node0xbf1268;
	Node0xbf1268 -> Node0xc51a70;
	Node0xc51a70 -> Node0xc51ac0;
edge [color=red]
	Node0xc50510 -> Node0xc50bc0;
	Node0xc50cf0 -> Node0xc50d90;
	Node0xc50c80 -> Node0xc50e00;
	Node0xc50e00 -> Node0xc50ea0;
	Node0xc50f80 -> Node0xc50ff0;
	Node0xc50ff0 -> Node0xc51060;
	Node0xc50e00 -> Node0xc510d0;
	Node0xc510d0 -> Node0xc51170;
	Node0xc50c80 -> Node0xc511e0;
	Node0xc50d90 -> Node0xc51250;
	Node0xc51250 -> Node0xc512c0;
	Node0xc50f10 -> Node0xc512c0;
	Node0xc512c0 -> Node0xc51330;
	Node0xc511e0 -> Node0xc51330;
	Node0xc51330 -> Node0xc513a0;
	Node0xc50510 -> Node0xc513a0;
	Node0xc513a0 -> Node0xc51410;
	Node0xc50ea0 -> Node0xc51410;
	Node0xc51410 -> Node0xc51480;
	Node0xc50ff0 -> Node0xc51480;
	Node0xc51480 -> Node0xc514f0;
	Node0xc51170 -> Node0xc514f0;
	Node0xc514f0 -> Node0xc51560;
	Node0xc51060 -> Node0xc51560;
	Node0xc51560 -> Node0xc515d0;
	Node0xc50bc0 -> Node0xc515d0;
	Node0xc515d0 -> Node0xbf1268;
	Node0xbf1268 -> Node0xc51a70;
}
