; ModuleID = '../.././c_source_file/1187_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1187_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = shl i32 %7, 2
  %9 = xor i32 %8, -4
  %10 = and i32 %2, %0
  %11 = xor i32 %1, -1
  %12 = or i32 %11, %0
  %13 = xor i32 %10, %12
  %14 = shl i32 %13, 1
  %15 = sub i32 %4, %14
  %16 = sub i32 %15, %9
  %17 = or i32 %4, %3
  %18 = xor i32 %4, %3
  %19 = shl i32 %3, 1
  %20 = xor i32 %19, -2
  %21 = xor i32 %18, -1
  %22 = xor i32 %17, -1
  %23 = mul i32 %22, -6
  %24 = shl i32 %7, 1
  %25 = and i32 %4, %3
  %26 = and i32 %1, %0
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %26, %28
  %30 = and i32 %11, %0
  %31 = or i32 %30, %28
  %32 = xor i32 %1, %0
  %33 = or i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %1
  %36 = and i32 %2, %1
  %37 = and i32 %36, %0
  %38 = xor i32 %0, -1
  %39 = xor i32 %2, %1
  %40 = and i32 %39, %38
  %41 = or i32 %37, %40
  %42 = xor i32 %39, -1
  %43 = xor i32 %42, %0
  %44 = xor i32 %36, %0
  %45 = xor i32 %2, -1
  %46 = or i32 %45, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %32, %47
  %49 = or i32 %26, %45
  %50 = and i32 %27, %32
  %51 = xor i32 %12, -1
  %52 = and i32 %32, %2
  %53 = xor i32 %36, -1
  %54 = xor i32 %30, %53
  %55 = xor i32 %32, -1
  %56 = or i32 %34, %55
  %57 = or i32 %2, %1
  %58 = xor i32 %57, %0
  %59 = or i32 %47, %11
  %60 = and i32 %11, %2
  %61 = and i32 %60, %0
  %62 = or i32 %39, %0
  %63 = xor i32 %62, -1
  %64 = or i32 %61, %63
  %65 = or i32 %28, %55
  %66 = and i32 %32, %28
  %67 = and i32 %45, %1
  %68 = shl i32 %67, 1
  %69 = xor i32 %67, -1
  %70 = or i32 %69, %0
  %71 = xor i32 %26, -1
  %72 = and i32 %39, %71
  %73 = and i32 %45, %0
  %74 = or i32 %73, %32
  %75 = or i32 %53, %0
  %76 = or i32 %26, %42
  %77 = xor i32 %10, %57
  %78 = or i32 %36, %30
  %79 = and i32 %60, %38
  %80 = or i32 %11, %2
  %81 = and i32 %80, %0
  %82 = or i32 %79, %81
  %83 = or i32 %27, %55
  %84 = or i32 %45, %1
  %85 = xor i32 %30, -1
  %86 = and i32 %45, %85
  %87 = xor i32 %10, -1
  %88 = and i32 %87, %11
  %89 = and i32 %69, %0
  %90 = and i32 %87, %1
  %91 = and i32 %28, %55
  %92 = and i32 %57, %38
  %93 = xor i32 %37, -1
  %94 = xor i32 %92, %93
  %95 = and i32 %36, %38
  %96 = and i32 %57, %0
  %97 = xor i32 %95, -1
  %98 = xor i32 %96, %97
  %99 = xor i32 %84, -1
  %100 = xor i32 %99, %0
  %101 = or i32 %1, %0
  %102 = xor i32 %101, -1
  %103 = or i32 %102, %2
  %104 = xor i32 %34, %1
  %105 = shl i32 %1, 1
  %106 = xor i32 %105, -1
  %107 = xor i32 %73, %53
  %108 = or i32 %67, %0
  %109 = add i32 %36, 1
  %110 = and i32 %46, %11
  %111 = shl i32 %110, 1
  %112 = and i32 %39, %0
  %113 = or i32 %95, %112
  %114 = or i32 %42, %102
  %115 = xor i32 %73, -1
  %116 = and i32 %32, %115
  %117 = or i32 %45, %102
  %118 = or i32 %26, %2
  %119 = or i32 %28, %51
  %120 = xor i32 %102, %2
  %121 = and i32 %101, %2
  %122 = or i32 %26, %34
  %123 = or i32 %42, %38
  %124 = xor i32 %46, %1
  %125 = xor i32 %10, %101
  %126 = shl i32 %125, 1
  %127 = and i32 %101, %45
  %128 = xor i32 %10, %69
  %129 = or i32 %32, %45
  %130 = shl i32 %129, 1
  %131 = or i32 %30, %42
  %132 = and i32 %12, %28
  %133 = and i32 %101, %42
  %134 = or i32 %34, %11
  %135 = shl i32 %134, 1
  %136 = and i32 %71, %2
  %137 = and i32 %33, %11
  %138 = shl i32 %137, 1
  %139 = xor i32 %39, %0
  %140 = xor i32 %139, -1
  %141 = or i32 %37, %140
  %142 = xor i32 %57, -1
  %143 = or i32 %10, %142
  %144 = and i32 %115, %1
  %145 = and i32 %42, %71
  %146 = and i32 %32, %45
  %147 = xor i32 %84, %26
  %148 = xor i32 %80, -1
  %149 = or i32 %148, %0
  %150 = xor i32 %61, %149
  %151 = or i32 %10, %102
  %152 = or i32 %99, %0
  %153 = shl i32 %34, 1
  %154 = or i32 %10, %32
  %155 = xor i32 %80, %0
  %156 = xor i32 %155, 2147483647
  %157 = xor i32 %156, %61
  %158 = shl i32 %157, 1
  %159 = and i32 %28, %71
  %160 = or i32 %10, %55
  %161 = and i32 %39, %101
  %162 = or i32 %53, %38
  %163 = xor i32 %69, %0
  %164 = xor i32 %142, %0
  %165 = xor i32 %61, %140
  %166 = and i32 %12, %2
  %167 = or i32 %39, %26
  %168 = or i32 %39, %51
  %169 = or i32 %73, %99
  %170 = and i32 %45, %71
  %171 = or i32 %39, %30
  %172 = xor i32 %112, %97
  %173 = and i32 %42, %0
  %174 = xor i32 %40, %93
  %175 = or i32 %27, %32
  %176 = shl i32 %175, 1
  %177 = or i32 %61, %155
  %178 = and i32 %12, %45
  %179 = or i32 %36, %0
  %180 = xor i32 %12, %2
  %181 = and i32 %53, %0
  %182 = and i32 %84, %0
  %183 = or i32 %73, %55
  %184 = and i32 %28, %1
  %185 = and i32 %27, %1
  %186 = or i32 %26, %99
  %187 = or i32 %67, %30
  %188 = or i32 %45, %55
  %189 = and i32 %39, %85
  %190 = or i32 %45, %51
  %191 = add i32 %57, 1
  %192 = or i32 %28, %1
  %193 = xor i32 %37, %139
  %194 = or i32 %57, %38
  %195 = and i32 %27, %101
  %196 = shl i32 %195, 1
  %197 = or i32 %27, %11
  %198 = and i32 %42, %38
  %199 = or i32 %39, %102
  %200 = xor i32 %33, %1
  %201 = or i32 %55, %2
  %202 = xor i32 %57, %26
  %203 = and i32 %28, %85
  %204 = and i32 %42, %85
  %205 = xor i32 %10, %1
  %206 = shl i32 %73, 1
  %207 = or i32 %37, %58
  %208 = and i32 %28, %11
  %209 = xor i32 %73, %1
  %210 = or i32 %28, %11
  %211 = xor i32 %47, %1
  %212 = and i32 %115, %55
  %213 = and i32 %69, %38
  %214 = shl i32 %213, 2
  %215 = xor i32 %67, %0
  %216 = xor i32 %51, %2
  %217 = and i32 %55, %2
  %218 = xor i32 %26, %2
  %219 = or i32 %26, %142
  %220 = or i32 %27, %51
  %221 = xor i32 %84, %0
  %222 = or i32 %39, %38
  %223 = xor i32 %30, %2
  %224 = or i32 %42, %0
  %225 = and i32 %12, %42
  %226 = and i32 %87, %55
  %227 = or i32 %57, %0
  %228 = shl i32 %227, 1
  %229 = or i32 %142, %38
  %230 = and i32 %33, %1
  %231 = shl i32 %230, 1
  %232 = or i32 %69, %38
  %233 = or i32 %51, %2
  %234 = or i32 %67, %38
  %235 = and i32 %85, %2
  %236 = add i32 %10, 1
  %237 = xor i32 %58, 2147483647
  %238 = xor i32 %237, %37
  %239 = shl i32 %238, 1
  %240 = shl i32 %55, 1
  %241 = or i32 %30, %2
  %242 = xor i32 %30, %69
  %243 = and i32 %27, %11
  %244 = or i32 %32, %34
  %245 = or i32 %32, %2
  %246 = xor i32 %73, %84
  %247 = or i32 %84, %38
  %248 = xor i32 %81, 2147483647
  %249 = xor i32 %248, %79
  %250 = shl i32 %249, 1
  %251 = or i32 %37, %92
  %252 = and i32 %27, %71
  %253 = xor i32 %115, %1
  %254 = or i32 %61, %139
  %255 = or i32 %32, %28
  %256 = xor i32 %87, %1
  %257 = shl i32 %256, 1
  %258 = or i32 %36, %38
  %259 = and i32 %46, %32
  %260 = or i32 %95, %96
  %261 = or i32 %47, %55
  %262 = shl i32 %261, 1
  %263 = or i32 %28, %102
  %264 = and i32 %32, %87
  %265 = and i32 %33, %55
  %266 = or i32 %10, %67
  %267 = or i32 %10, %11
  %268 = or i32 %142, %0
  %269 = or i32 %47, %1
  %270 = or i32 %27, %30
  %271 = and i32 %27, %12
  %272 = and i32 %142, %38
  %273 = and i32 %67, %38
  %274 = shl i32 %273, 2
  %275 = and i32 %142, %0
  %276 = shl i32 %275, 1
  %277 = and i32 %67, %0
  %278 = shl i32 %277, 2
  %279 = and i32 %99, %38
  %280 = mul i32 %95, -7
  %281 = and i32 %99, %0
  %282 = mul i32 %281, -9
  %283 = sub i32 %204, %121
  %284 = sub i32 %283, %75
  %285 = add i32 %284, %54
  %286 = sub i32 %285, %25
  %287 = mul i32 %286, 5
  %288 = add i32 %264, %225
  %289 = add i32 %288, %221
  %290 = mul i32 %289, -3
  %291 = add i32 %279, %272
  %292 = mul i32 %291, -15
  %293 = add i32 %57, %84
  %294 = shl i32 %293, 2
  %295 = sub i32 -2, %12
  %296 = add i32 %295, %99
  %297 = add i32 %296, %115
  %298 = add i32 %297, %42
  %299 = add i32 %298, %180
  %300 = add i32 %299, %234
  %301 = add i32 %300, %267
  %302 = add i32 %301, %229
  %303 = add i32 %302, %222
  %304 = add i32 %303, %219
  %305 = add i32 %304, %212
  %306 = add i32 %305, %62
  %307 = add i32 %306, %198
  %308 = add i32 %307, %162
  %309 = add i32 %308, %100
  %310 = add i32 %309, %70
  %311 = add i32 %310, %65
  %312 = add i32 %311, %6
  %313 = shl i32 %312, 1
  %314 = sub i32 %0, %1
  %315 = add i32 %314, %32
  %316 = add i32 %315, %106
  %317 = sub i32 %316, %26
  %318 = add i32 %317, %85
  %319 = sub i32 %318, %2
  %320 = add i32 %319, %71
  %321 = add i32 %320, %12
  %322 = sub i32 %321, %30
  %323 = add i32 %322, %45
  %324 = add i32 %323, %3
  %325 = sub i32 %324, %49
  %326 = sub i32 %325, %52
  %327 = sub i32 %326, %33
  %328 = sub i32 %327, %86
  %329 = add i32 %328, %103
  %330 = add i32 %329, %36
  %331 = add i32 %330, %109
  %332 = add i32 %331, %117
  %333 = add i32 %332, %118
  %334 = sub i32 %333, %120
  %335 = add i32 %334, %127
  %336 = sub i32 %335, %136
  %337 = add i32 %336, %146
  %338 = add i32 %337, %166
  %339 = add i32 %338, %170
  %340 = sub i32 %339, %178
  %341 = sub i32 %340, %188
  %342 = sub i32 %341, %190
  %343 = add i32 %342, %191
  %344 = add i32 %343, %201
  %345 = sub i32 %344, %216
  %346 = sub i32 %345, %217
  %347 = add i32 %346, %218
  %348 = add i32 %347, %223
  %349 = add i32 %348, %69
  %350 = sub i32 %349, %233
  %351 = sub i32 %350, %235
  %352 = add i32 %351, %236
  %353 = sub i32 %352, %240
  %354 = sub i32 %353, %241
  %355 = add i32 %354, %245
  %356 = sub i32 %355, %39
  %357 = add i32 %356, %47
  %358 = sub i32 %357, %29
  %359 = sub i32 %358, %31
  %360 = sub i32 %359, %35
  %361 = sub i32 %360, %43
  %362 = add i32 %361, %44
  %363 = add i32 %362, %48
  %364 = sub i32 %363, %50
  %365 = add i32 %364, %56
  %366 = add i32 %365, %58
  %367 = add i32 %366, %59
  %368 = sub i32 %367, %66
  %369 = sub i32 %368, %68
  %370 = sub i32 %369, %72
  %371 = add i32 %370, %74
  %372 = add i32 %371, %76
  %373 = sub i32 %372, %77
  %374 = add i32 %373, %78
  %375 = sub i32 %374, %83
  %376 = sub i32 %375, %88
  %377 = add i32 %376, %89
  %378 = add i32 %377, %90
  %379 = add i32 %378, %91
  %380 = sub i32 %379, %104
  %381 = sub i32 %380, %107
  %382 = add i32 %381, %108
  %383 = add i32 %382, %114
  %384 = add i32 %383, %116
  %385 = add i32 %384, %119
  %386 = sub i32 %385, %122
  %387 = sub i32 %386, %123
  %388 = sub i32 %387, %124
  %389 = add i32 %388, %128
  %390 = sub i32 %389, %130
  %391 = sub i32 %390, %131
  %392 = sub i32 %391, %132
  %393 = sub i32 %392, %133
  %394 = sub i32 %393, %143
  %395 = sub i32 %394, %144
  %396 = add i32 %395, %145
  %397 = add i32 %396, %147
  %398 = add i32 %397, %151
  %399 = sub i32 %398, %152
  %400 = sub i32 %399, %153
  %401 = sub i32 %400, %154
  %402 = add i32 %401, %139
  %403 = add i32 %402, %159
  %404 = sub i32 %403, %160
  %405 = sub i32 %404, %161
  %406 = add i32 %405, %163
  %407 = sub i32 %406, %164
  %408 = sub i32 %407, %167
  %409 = add i32 %408, %168
  %410 = add i32 %409, %169
  %411 = add i32 %410, %171
  %412 = sub i32 %411, %173
  %413 = add i32 %412, %92
  %414 = sub i32 %413, %179
  %415 = add i32 %414, %181
  %416 = sub i32 %415, %182
  %417 = add i32 %416, %183
  %418 = sub i32 %417, %184
  %419 = sub i32 %418, %185
  %420 = sub i32 %419, %186
  %421 = add i32 %420, %187
  %422 = sub i32 %421, %189
  %423 = add i32 %422, %192
  %424 = add i32 %423, %194
  %425 = sub i32 %424, %197
  %426 = sub i32 %425, %199
  %427 = add i32 %426, %200
  %428 = add i32 %427, %202
  %429 = add i32 %428, %203
  %430 = sub i32 %429, %205
  %431 = sub i32 %430, %206
  %432 = add i32 %431, %208
  %433 = sub i32 %432, %209
  %434 = add i32 %433, %210
  %435 = sub i32 %434, %211
  %436 = add i32 %435, %215
  %437 = add i32 %436, %220
  %438 = add i32 %437, %224
  %439 = add i32 %438, %226
  %440 = sub i32 %439, %232
  %441 = add i32 %440, %96
  %442 = sub i32 %441, %242
  %443 = sub i32 %442, %243
  %444 = add i32 %443, %244
  %445 = add i32 %444, %246
  %446 = sub i32 %445, %247
  %447 = sub i32 %446, %252
  %448 = add i32 %447, %253
  %449 = add i32 %448, %255
  %450 = add i32 %449, %258
  %451 = add i32 %450, %259
  %452 = add i32 %451, %40
  %453 = add i32 %452, %263
  %454 = sub i32 %453, %265
  %455 = add i32 %454, %266
  %456 = add i32 %455, %268
  %457 = sub i32 %456, %269
  %458 = add i32 %457, %270
  %459 = add i32 %458, %271
  %460 = add i32 %459, %37
  %461 = sub i32 %460, %17
  %462 = sub i32 %461, %18
  %463 = sub i32 %462, %20
  %464 = add i32 %463, %21
  %465 = add i32 %464, %41
  %466 = sub i32 %465, %64
  %467 = sub i32 %466, %82
  %468 = add i32 %467, %94
  %469 = sub i32 %468, %98
  %470 = sub i32 %469, %111
  %471 = add i32 %470, %113
  %472 = sub i32 %471, %126
  %473 = sub i32 %472, %135
  %474 = sub i32 %473, %138
  %475 = add i32 %474, %141
  %476 = sub i32 %475, %150
  %477 = sub i32 %476, %165
  %478 = sub i32 %477, %172
  %479 = add i32 %478, %174
  %480 = sub i32 %479, %176
  %481 = sub i32 %480, %177
  %482 = sub i32 %481, %193
  %483 = sub i32 %482, %196
  %484 = sub i32 %483, %207
  %485 = sub i32 %484, %214
  %486 = sub i32 %485, %228
  %487 = sub i32 %486, %231
  %488 = sub i32 %487, %251
  %489 = add i32 %488, %254
  %490 = sub i32 %489, %257
  %491 = add i32 %490, %260
  %492 = sub i32 %491, %262
  %493 = sub i32 %492, %274
  %494 = sub i32 %493, %276
  %495 = sub i32 %494, %278
  %496 = add i32 %495, %280
  %497 = add i32 %496, %282
  %498 = add i32 %497, %294
  %499 = add i32 %498, %23
  %500 = sub i32 %499, %24
  %501 = add i32 %500, %292
  %502 = sub i32 %501, %158
  %503 = sub i32 %502, %239
  %504 = sub i32 %503, %250
  %505 = add i32 %504, %290
  %506 = add i32 %505, %287
  %507 = add i32 %506, %313
  %508 = icmp eq i32 %16, %507
  %509 = select i1 %508, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %510 = tail call i32 @puts(i8* nonnull dereferenceable(1) %509)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
