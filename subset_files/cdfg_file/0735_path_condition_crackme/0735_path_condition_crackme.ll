; ModuleID = '../.././c_source_file/0735_path_condition_crackme.c'
source_filename = "../.././c_source_file/0735_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = add i32 %6, %8
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %12, %0
  %14 = shl i32 %13, 1
  %15 = sub i32 %9, %14
  %16 = shl i32 %3, 1
  %17 = xor i32 %16, -2
  %18 = xor i32 %4, %3
  %19 = or i32 %4, %3
  %20 = and i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = and i32 %6, %3
  %24 = shl i32 %19, 1
  %25 = xor i32 %24, -2
  %26 = xor i32 %3, -1
  %27 = and i32 %26, %4
  %28 = xor i32 %1, -1
  %29 = or i32 %28, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %2, %1
  %32 = or i32 %31, %30
  %33 = and i32 %2, %0
  %34 = or i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %33, %35
  %37 = xor i32 %31, -1
  %38 = or i32 %2, %1
  %39 = xor i32 %38, %0
  %40 = or i32 %38, %0
  %41 = or i32 %10, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %42, %1
  %44 = xor i32 %0, -1
  %45 = and i32 %2, %1
  %46 = and i32 %45, %44
  %47 = and i32 %31, %0
  %48 = or i32 %46, %47
  %49 = or i32 %11, %44
  %50 = and i32 %10, %0
  %51 = and i32 %28, %0
  %52 = xor i32 %51, -1
  %53 = and i32 %8, %52
  %54 = xor i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %41, %55
  %57 = and i32 %1, %0
  %58 = xor i32 %38, %57
  %59 = or i32 %57, %37
  %60 = add i32 %29, 1
  %61 = or i32 %10, %1
  %62 = and i32 %61, %44
  %63 = or i32 %50, %1
  %64 = and i32 %45, %0
  %65 = xor i32 %31, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %64, %66
  %68 = or i32 %37, %44
  %69 = and i32 %41, %54
  %70 = or i32 %57, %8
  %71 = and i32 %28, %2
  %72 = and i32 %71, %44
  %73 = or i32 %28, %2
  %74 = and i32 %73, %0
  %75 = or i32 %72, %74
  %76 = or i32 %8, %28
  %77 = shl i32 %76, 2
  %78 = xor i32 %57, -1
  %79 = and i32 %8, %78
  %80 = xor i32 %35, %2
  %81 = or i32 %51, %2
  %82 = shl i32 %81, 1
  %83 = or i32 %8, %35
  %84 = and i32 %41, %1
  %85 = shl i32 %84, 1
  %86 = and i32 %31, %44
  %87 = xor i32 %64, -1
  %88 = xor i32 %86, %87
  %89 = or i32 %57, %42
  %90 = or i32 %7, %57
  %91 = xor i32 %38, -1
  %92 = or i32 %33, %91
  %93 = or i32 %51, %8
  %94 = and i32 %38, %44
  %95 = or i32 %64, %94
  %96 = and i32 %10, %52
  %97 = or i32 %55, %2
  %98 = and i32 %34, %10
  %99 = xor i32 %45, -1
  %100 = xor i32 %50, %99
  %101 = shl i32 %100, 1
  %102 = and i32 %71, %0
  %103 = xor i32 %73, -1
  %104 = or i32 %103, %0
  %105 = xor i32 %102, %104
  %106 = or i32 %2, %0
  %107 = xor i32 %106, -1
  %108 = add i32 %106, 1
  %109 = or i32 %51, %10
  %110 = xor i32 %33, %12
  %111 = or i32 %42, %55
  %112 = xor i32 %34, %2
  %113 = shl i32 %112, 1
  %114 = or i32 %31, %0
  %115 = or i32 %50, %55
  %116 = xor i32 %61, %57
  %117 = xor i32 %46, -1
  %118 = xor i32 %47, %117
  %119 = and i32 %7, %55
  %120 = xor i32 %102, %66
  %121 = and i32 %78, %2
  %122 = and i32 %106, %55
  %123 = or i32 %57, %91
  %124 = xor i32 %39, %87
  %125 = or i32 %61, %0
  %126 = xor i32 %61, -1
  %127 = or i32 %57, %126
  %128 = or i32 %31, %35
  %129 = or i32 %33, %54
  %130 = xor i32 %114, -1
  %131 = or i32 %102, %130
  %132 = or i32 %64, %86
  %133 = and i32 %41, %28
  %134 = or i32 %54, %107
  %135 = xor i32 %33, %29
  %136 = shl i32 %135, 1
  %137 = or i32 %7, %30
  %138 = or i32 %64, %39
  %139 = and i32 %54, %10
  %140 = and i32 %37, %0
  %141 = shl i32 %1, 1
  %142 = xor i32 %33, %34
  %143 = shl i32 %142, 1
  %144 = or i32 %11, %0
  %145 = add i32 %57, 1
  %146 = xor i32 %64, %65
  %147 = and i32 %7, %28
  %148 = and i32 %61, %0
  %149 = or i32 %45, %0
  %150 = and i32 %8, %1
  %151 = xor i32 %106, %1
  %152 = xor i32 %33, -1
  %153 = and i32 %152, %28
  %154 = or i32 %107, %1
  %155 = or i32 %31, %44
  %156 = or i32 %7, %54
  %157 = or i32 %10, %30
  %158 = or i32 %50, %54
  %159 = or i32 %7, %51
  %160 = and i32 %7, %29
  %161 = and i32 %29, %2
  %162 = xor i32 %33, %1
  %163 = or i32 %33, %1
  %164 = xor i32 %50, -1
  %165 = and i32 %54, %164
  %166 = or i32 %10, %55
  %167 = or i32 %7, %28
  %168 = or i32 %33, %11
  %169 = and i32 %55, %2
  %170 = xor i32 %11, %0
  %171 = and i32 %164, %28
  %172 = shl i32 %171, 1
  %173 = and i32 %31, %29
  %174 = or i32 %33, %28
  %175 = and i32 %38, %0
  %176 = or i32 %57, %107
  %177 = and i32 %7, %54
  %178 = or i32 %57, %2
  %179 = or i32 %107, %55
  %180 = or i32 %12, %0
  %181 = xor i32 %99, %0
  %182 = xor i32 %50, %1
  %183 = and i32 %7, %34
  %184 = and i32 %106, %1
  %185 = and i32 %34, %37
  %186 = or i32 %33, %30
  %187 = or i32 %99, %0
  %188 = or i32 %51, %37
  %189 = xor i32 %74, 1073741823
  %190 = xor i32 %189, %72
  %191 = and i32 %37, %78
  %192 = or i32 %57, %10
  %193 = xor i32 %91, %0
  %194 = xor i32 %164, %1
  %195 = xor i32 %51, %99
  %196 = or i32 %7, %35
  %197 = and i32 %31, %52
  %198 = and i32 %29, %37
  %199 = xor i32 %155, -1
  %200 = or i32 %72, %199
  %201 = or i32 %37, %30
  %202 = shl i32 %201, 1
  %203 = xor i32 %57, %2
  %204 = or i32 %102, %65
  %205 = add i32 %61, 1
  %206 = xor i32 %0, 2147483647
  %207 = xor i32 %206, %73
  %208 = xor i32 %207, %102
  %209 = or i32 %42, %1
  %210 = xor i32 %175, %117
  %211 = or i32 %91, %44
  %212 = shl i32 %152, 1
  %213 = xor i32 %41, %57
  %214 = or i32 %37, %0
  %215 = and i32 %106, %54
  %216 = xor i32 %106, %57
  %217 = xor i32 %50, %61
  %218 = and i32 %91, %44
  %219 = mul i32 %218, -23
  %220 = and i32 %11, %44
  %221 = and i32 %91, %0
  %222 = and i32 %11, %0
  %223 = mul i32 %222, -24
  %224 = and i32 %126, %44
  %225 = shl i32 %224, 1
  %226 = mul i32 %46, -9
  %227 = and i32 %126, %0
  %228 = mul i32 %227, -18
  %229 = shl i32 %64, 1
  %230 = add i32 %51, %10
  %231 = add i32 %230, %195
  %232 = add i32 %231, %180
  %233 = add i32 %232, %176
  %234 = add i32 %233, %168
  %235 = add i32 %234, %147
  %236 = add i32 %235, %127
  %237 = add i32 %236, %79
  %238 = add i32 %237, %69
  %239 = add i32 %238, %59
  %240 = add i32 %239, %208
  %241 = shl i32 %240, 1
  %242 = sub i32 %214, %139
  %243 = add i32 %242, %27
  %244 = add i32 %243, %20
  %245 = mul i32 %244, 3
  %246 = add i32 %32, %49
  %247 = add i32 %246, %190
  %248 = shl i32 %247, 2
  %249 = sub i32 %23, %220
  %250 = mul i32 %249, 6
  %251 = add i32 %192, %169
  %252 = mul i32 %251, -5
  %253 = add i32 %0, -1
  %254 = add i32 %253, %28
  %255 = add i32 %254, %60
  %256 = sub i32 %255, %2
  %257 = sub i32 %256, %54
  %258 = sub i32 %257, %141
  %259 = add i32 %258, %145
  %260 = add i32 %259, %35
  %261 = add i32 %260, %55
  %262 = add i32 %261, %29
  %263 = sub i32 %262, %3
  %264 = add i32 %263, %37
  %265 = add i32 %264, %50
  %266 = add i32 %265, %12
  %267 = add i32 %266, %80
  %268 = add i32 %267, %96
  %269 = add i32 %268, %97
  %270 = add i32 %269, %98
  %271 = sub i32 %270, %45
  %272 = add i32 %271, %108
  %273 = add i32 %272, %109
  %274 = sub i32 %273, %41
  %275 = add i32 %274, %121
  %276 = sub i32 %275, %33
  %277 = add i32 %276, %99
  %278 = sub i32 %277, %7
  %279 = sub i32 %278, %11
  %280 = add i32 %279, %157
  %281 = add i32 %280, %161
  %282 = add i32 %281, %166
  %283 = sub i32 %282, %178
  %284 = sub i32 %283, %106
  %285 = sub i32 %284, %203
  %286 = add i32 %285, %205
  %287 = add i32 %286, %36
  %288 = sub i32 %287, %39
  %289 = add i32 %288, %40
  %290 = sub i32 %289, %43
  %291 = add i32 %290, %53
  %292 = add i32 %291, %56
  %293 = add i32 %292, %58
  %294 = add i32 %293, %62
  %295 = sub i32 %294, %63
  %296 = add i32 %295, %68
  %297 = sub i32 %296, %70
  %298 = sub i32 %297, %82
  %299 = add i32 %298, %83
  %300 = add i32 %299, %86
  %301 = sub i32 %300, %89
  %302 = sub i32 %301, %90
  %303 = sub i32 %302, %92
  %304 = add i32 %303, %93
  %305 = sub i32 %304, %110
  %306 = sub i32 %305, %111
  %307 = sub i32 %306, %113
  %308 = add i32 %307, %114
  %309 = sub i32 %308, %115
  %310 = sub i32 %309, %116
  %311 = sub i32 %310, %119
  %312 = sub i32 %311, %122
  %313 = sub i32 %312, %123
  %314 = sub i32 %313, %125
  %315 = sub i32 %314, %128
  %316 = sub i32 %315, %129
  %317 = sub i32 %316, %133
  %318 = add i32 %317, %134
  %319 = sub i32 %318, %137
  %320 = add i32 %319, %140
  %321 = add i32 %320, %144
  %322 = add i32 %321, %148
  %323 = sub i32 %322, %149
  %324 = sub i32 %323, %150
  %325 = sub i32 %324, %151
  %326 = sub i32 %325, %153
  %327 = add i32 %326, %154
  %328 = add i32 %327, %155
  %329 = add i32 %328, %156
  %330 = sub i32 %329, %158
  %331 = add i32 %330, %159
  %332 = add i32 %331, %160
  %333 = add i32 %332, %162
  %334 = sub i32 %333, %163
  %335 = sub i32 %334, %165
  %336 = sub i32 %335, %94
  %337 = sub i32 %336, %167
  %338 = add i32 %337, %170
  %339 = sub i32 %338, %173
  %340 = add i32 %339, %174
  %341 = sub i32 %340, %175
  %342 = sub i32 %341, %177
  %343 = add i32 %342, %179
  %344 = sub i32 %343, %181
  %345 = add i32 %344, %182
  %346 = add i32 %345, %183
  %347 = add i32 %346, %184
  %348 = sub i32 %347, %185
  %349 = sub i32 %348, %186
  %350 = add i32 %349, %187
  %351 = add i32 %350, %188
  %352 = add i32 %351, %191
  %353 = add i32 %352, %193
  %354 = add i32 %353, %194
  %355 = add i32 %354, %196
  %356 = add i32 %355, %197
  %357 = add i32 %356, %198
  %358 = add i32 %357, %209
  %359 = sub i32 %358, %211
  %360 = sub i32 %359, %212
  %361 = sub i32 %360, %213
  %362 = add i32 %361, %215
  %363 = add i32 %362, %216
  %364 = add i32 %363, %217
  %365 = sub i32 %364, %221
  %366 = add i32 %365, %17
  %367 = sub i32 %366, %18
  %368 = sub i32 %367, %19
  %369 = add i32 %368, %23
  %370 = add i32 %369, %48
  %371 = add i32 %370, %67
  %372 = sub i32 %371, %75
  %373 = sub i32 %372, %77
  %374 = sub i32 %373, %85
  %375 = sub i32 %374, %88
  %376 = sub i32 %375, %95
  %377 = sub i32 %376, %101
  %378 = add i32 %377, %105
  %379 = add i32 %378, %118
  %380 = sub i32 %379, %120
  %381 = add i32 %380, %124
  %382 = add i32 %381, %131
  %383 = add i32 %382, %132
  %384 = sub i32 %383, %136
  %385 = sub i32 %384, %138
  %386 = sub i32 %385, %143
  %387 = add i32 %386, %146
  %388 = sub i32 %387, %172
  %389 = sub i32 %388, %200
  %390 = sub i32 %389, %202
  %391 = add i32 %390, %204
  %392 = sub i32 %391, %210
  %393 = add i32 %392, %219
  %394 = add i32 %393, %223
  %395 = sub i32 %394, %225
  %396 = add i32 %395, %226
  %397 = add i32 %396, %228
  %398 = sub i32 %397, %229
  %399 = add i32 %398, %252
  %400 = sub i32 %399, %22
  %401 = add i32 %400, %25
  %402 = add i32 %401, %250
  %403 = add i32 %402, %245
  %404 = add i32 %403, %248
  %405 = add i32 %404, %241
  %406 = icmp eq i32 %15, %405
  %407 = select i1 %406, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %408 = tail call i32 @puts(i8* nonnull dereferenceable(1) %407)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
