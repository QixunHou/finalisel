digraph "DFG for'crackme' function" {
	Node0x132bdc0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x132be30[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x132bea0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x132bf40[shape=record, label="  %8 = mul i32 %7, -3"];
	Node0x132bfb0[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0x132c020[shape=record, label="  %10 = xor i32 %0, -1"];
	Node0x132c090[shape=record, label="  %11 = and i32 %10, %3"];
	Node0x132c100[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x132c1a0[shape=record, label="  %13 = sub i32 -2, %9"];
	Node0x132c210[shape=record, label="  %14 = add i32 %13, %8"];
	Node0x132c280[shape=record, label="  %15 = add i32 %14, %12"];
	Node0x132c2f0[shape=record, label="  %16 = or i32 %5, %1"];
	Node0x132c360[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x132c400[shape=record, label="  %18 = shl i32 %16, 2"];
	Node0x132c4a0[shape=record, label="  %19 = xor i32 %18, -4"];
	Node0x132c510[shape=record, label="  %20 = and i32 %2, %1"];
	Node0x132c5b0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x132c620[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x132c690[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x132c700[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x132c770[shape=record, label="  %25 = shl i32 %10, 1"];
	Node0x132c7e0[shape=record, label="  %26 = shl i32 %3, 1"];
	Node0x132c850[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x132c8c0[shape=record, label="  %28 = xor i32 %10, %3"];
	Node0x132c930[shape=record, label="  %29 = or i32 %3, %0"];
	Node0x132c9a0[shape=record, label="  %30 = or i32 %10, %3"];
	Node0x132ca10[shape=record, label="  %31 = xor i32 %29, -1"];
	Node0x132cab0[shape=record, label="  %32 = mul i32 %31, 6"];
	Node0x132cd60[shape=record, label="  %33 = shl i32 %30, 3"];
	Node0x132ce00[shape=record, label="  %34 = xor i32 %33, -8"];
	Node0x132cea0[shape=record, label="  %35 = mul i32 %11, 7"];
	Node0x132cf10[shape=record, label="  %36 = shl i32 %22, 2"];
	Node0x132cf80[shape=record, label="  %37 = sub i32 1, %0"];
	Node0x132cff0[shape=record, label="  %38 = add i32 %37, %1"];
	Node0x132d060[shape=record, label="  %39 = sub i32 %38, %25"];
	Node0x132d0d0[shape=record, label="  %40 = sub i32 %39, %16"];
	Node0x132d140[shape=record, label="  %41 = add i32 %40, %9"];
	Node0x132d1b0[shape=record, label="  %42 = add i32 %41, %17"];
	Node0x132d220[shape=record, label="  %43 = sub i32 %42, %6"];
	Node0x132d290[shape=record, label="  %44 = sub i32 %43, %21"];
	Node0x132d300[shape=record, label="  %45 = add i32 %44, %28"];
	Node0x132d370[shape=record, label="  %46 = sub i32 %45, %26"];
	Node0x132d3e0[shape=record, label="  %47 = sub i32 %46, %29"];
	Node0x132d450[shape=record, label="  %48 = add i32 %47, %30"];
	Node0x132d4c0[shape=record, label="  %49 = sub i32 %48, %19"];
	Node0x132d530[shape=record, label="  %50 = sub i32 %49, %27"];
	Node0x132d5a0[shape=record, label="  %51 = add i32 %50, %32"];
	Node0x132d610[shape=record, label="  %52 = add i32 %51, %35"];
	Node0x132d680[shape=record, label="  %53 = add i32 %52, %36"];
	Node0x132d6f0[shape=record, label="  %54 = sub i32 %53, %24"];
	Node0x132d760[shape=record, label="  %55 = add i32 %54, %34"];
	Node0x132d7d0[shape=record, label="  %56 = icmp eq i32 %15, %55"];
	Node0x12cc268[shape=record, label="  %57 = select i1 %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x132dc70[shape=record, label="  %58 = tail call i32 @puts(i8* nonnull dereferenceable(1) %57)"];
	Node0x132dcc0[shape=record, label="  ret void"];
	Node0x132bdc0 -> Node0x132be30;
	Node0x132be30 -> Node0x132bea0;
	Node0x132bea0 -> Node0x132bf40;
	Node0x132bf40 -> Node0x132bfb0;
	Node0x132bfb0 -> Node0x132c020;
	Node0x132c020 -> Node0x132c090;
	Node0x132c090 -> Node0x132c100;
	Node0x132c100 -> Node0x132c1a0;
	Node0x132c1a0 -> Node0x132c210;
	Node0x132c210 -> Node0x132c280;
	Node0x132c280 -> Node0x132c2f0;
	Node0x132c2f0 -> Node0x132c360;
	Node0x132c360 -> Node0x132c400;
	Node0x132c400 -> Node0x132c4a0;
	Node0x132c4a0 -> Node0x132c510;
	Node0x132c510 -> Node0x132c5b0;
	Node0x132c5b0 -> Node0x132c620;
	Node0x132c620 -> Node0x132c690;
	Node0x132c690 -> Node0x132c700;
	Node0x132c700 -> Node0x132c770;
	Node0x132c770 -> Node0x132c7e0;
	Node0x132c7e0 -> Node0x132c850;
	Node0x132c850 -> Node0x132c8c0;
	Node0x132c8c0 -> Node0x132c930;
	Node0x132c930 -> Node0x132c9a0;
	Node0x132c9a0 -> Node0x132ca10;
	Node0x132ca10 -> Node0x132cab0;
	Node0x132cab0 -> Node0x132cd60;
	Node0x132cd60 -> Node0x132ce00;
	Node0x132ce00 -> Node0x132cea0;
	Node0x132cea0 -> Node0x132cf10;
	Node0x132cf10 -> Node0x132cf80;
	Node0x132cf80 -> Node0x132cff0;
	Node0x132cff0 -> Node0x132d060;
	Node0x132d060 -> Node0x132d0d0;
	Node0x132d0d0 -> Node0x132d140;
	Node0x132d140 -> Node0x132d1b0;
	Node0x132d1b0 -> Node0x132d220;
	Node0x132d220 -> Node0x132d290;
	Node0x132d290 -> Node0x132d300;
	Node0x132d300 -> Node0x132d370;
	Node0x132d370 -> Node0x132d3e0;
	Node0x132d3e0 -> Node0x132d450;
	Node0x132d450 -> Node0x132d4c0;
	Node0x132d4c0 -> Node0x132d530;
	Node0x132d530 -> Node0x132d5a0;
	Node0x132d5a0 -> Node0x132d610;
	Node0x132d610 -> Node0x132d680;
	Node0x132d680 -> Node0x132d6f0;
	Node0x132d6f0 -> Node0x132d760;
	Node0x132d760 -> Node0x132d7d0;
	Node0x132d7d0 -> Node0x12cc268;
	Node0x12cc268 -> Node0x132dc70;
	Node0x132dc70 -> Node0x132dcc0;
edge [color=red]
	Node0x132bdc0 -> Node0x132be30;
	Node0x132be30 -> Node0x132bea0;
	Node0x132bea0 -> Node0x132bf40;
	Node0x132c020 -> Node0x132c090;
	Node0x132c090 -> Node0x132c100;
	Node0x132bfb0 -> Node0x132c1a0;
	Node0x132c1a0 -> Node0x132c210;
	Node0x132bf40 -> Node0x132c210;
	Node0x132c210 -> Node0x132c280;
	Node0x132c100 -> Node0x132c280;
	Node0x132bdc0 -> Node0x132c2f0;
	Node0x132c2f0 -> Node0x132c400;
	Node0x132c400 -> Node0x132c4a0;
	Node0x132c510 -> Node0x132c5b0;
	Node0x132c620 -> Node0x132c690;
	Node0x132c690 -> Node0x132c700;
	Node0x132c020 -> Node0x132c770;
	Node0x132c7e0 -> Node0x132c850;
	Node0x132c020 -> Node0x132c8c0;
	Node0x132c020 -> Node0x132c9a0;
	Node0x132c930 -> Node0x132ca10;
	Node0x132ca10 -> Node0x132cab0;
	Node0x132c9a0 -> Node0x132cd60;
	Node0x132cd60 -> Node0x132ce00;
	Node0x132c090 -> Node0x132cea0;
	Node0x132c620 -> Node0x132cf10;
	Node0x132cf80 -> Node0x132cff0;
	Node0x132cff0 -> Node0x132d060;
	Node0x132c770 -> Node0x132d060;
	Node0x132d060 -> Node0x132d0d0;
	Node0x132c2f0 -> Node0x132d0d0;
	Node0x132d0d0 -> Node0x132d140;
	Node0x132bfb0 -> Node0x132d140;
	Node0x132d140 -> Node0x132d1b0;
	Node0x132c360 -> Node0x132d1b0;
	Node0x132d1b0 -> Node0x132d220;
	Node0x132be30 -> Node0x132d220;
	Node0x132d220 -> Node0x132d290;
	Node0x132c5b0 -> Node0x132d290;
	Node0x132d290 -> Node0x132d300;
	Node0x132c8c0 -> Node0x132d300;
	Node0x132d300 -> Node0x132d370;
	Node0x132c7e0 -> Node0x132d370;
	Node0x132d370 -> Node0x132d3e0;
	Node0x132c930 -> Node0x132d3e0;
	Node0x132d3e0 -> Node0x132d450;
	Node0x132c9a0 -> Node0x132d450;
	Node0x132d450 -> Node0x132d4c0;
	Node0x132c4a0 -> Node0x132d4c0;
	Node0x132d4c0 -> Node0x132d530;
	Node0x132c850 -> Node0x132d530;
	Node0x132d530 -> Node0x132d5a0;
	Node0x132cab0 -> Node0x132d5a0;
	Node0x132d5a0 -> Node0x132d610;
	Node0x132cea0 -> Node0x132d610;
	Node0x132d610 -> Node0x132d680;
	Node0x132cf10 -> Node0x132d680;
	Node0x132d680 -> Node0x132d6f0;
	Node0x132c700 -> Node0x132d6f0;
	Node0x132d6f0 -> Node0x132d760;
	Node0x132ce00 -> Node0x132d760;
	Node0x132c280 -> Node0x132d7d0;
	Node0x132d760 -> Node0x132d7d0;
	Node0x132d7d0 -> Node0x12cc268;
	Node0x12cc268 -> Node0x132dc70;
}
