; ModuleID = '../.././c_source_file/1987_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1987_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, %2
  %10 = xor i32 %4, -1
  %11 = xor i32 %5, -1
  %12 = or i32 %11, %3
  %13 = xor i32 %12, -1
  %14 = or i32 %13, %10
  %15 = and i32 %4, %3
  %16 = xor i32 %15, -1
  %17 = and i32 %11, %16
  %18 = sub i32 %17, %9
  %19 = add i32 %18, %14
  %20 = xor i32 %2, -1
  %21 = and i32 %20, %1
  %22 = or i32 %2, %1
  %23 = xor i32 %22, -1
  %24 = xor i32 %23, %0
  %25 = and i32 %2, %0
  %26 = or i32 %25, %1
  %27 = xor i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %20, %28
  %30 = or i32 %20, %1
  %31 = xor i32 %30, %0
  %32 = or i32 %23, %0
  %33 = shl i32 %32, 1
  %34 = xor i32 %0, -1
  %35 = or i32 %21, %34
  %36 = xor i32 %25, -1
  %37 = and i32 %36, %28
  %38 = xor i32 %21, -1
  %39 = and i32 %38, %0
  %40 = or i32 %7, %0
  %41 = xor i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = and i32 %40, %42
  %44 = and i32 %2, %1
  %45 = and i32 %44, %0
  %46 = and i32 %22, %34
  %47 = xor i32 %45, -1
  %48 = xor i32 %46, %47
  %49 = and i32 %27, %36
  %50 = xor i32 %30, -1
  %51 = shl i32 %50, 1
  %52 = and i32 %20, %0
  %53 = xor i32 %44, -1
  %54 = xor i32 %52, %53
  %55 = shl i32 %53, 1
  %56 = or i32 %22, %34
  %57 = xor i32 %40, %2
  %58 = and i32 %1, %0
  %59 = or i32 %58, %20
  %60 = and i32 %7, %2
  %61 = and i32 %60, %0
  %62 = or i32 %7, %2
  %63 = and i32 %62, %34
  %64 = xor i32 %63, -1
  %65 = xor i32 %61, %64
  %66 = or i32 %1, %0
  %67 = xor i32 %66, -1
  %68 = or i32 %38, %0
  %69 = shl i32 %68, 1
  %70 = or i32 %20, %0
  %71 = and i32 %70, %28
  %72 = or i32 %25, %23
  %73 = shl i32 %72, 1
  %74 = or i32 %21, %8
  %75 = or i32 %44, %8
  %76 = xor i32 %25, %38
  %77 = xor i32 %8, %53
  %78 = xor i32 %58, -1
  %79 = and i32 %42, %78
  %80 = or i32 %28, %2
  %81 = and i32 %60, %34
  %82 = and i32 %62, %0
  %83 = or i32 %81, %82
  %84 = shl i32 %83, 2
  %85 = and i32 %44, %34
  %86 = and i32 %22, %0
  %87 = or i32 %85, %86
  %88 = or i32 %58, %23
  %89 = or i32 %20, %67
  %90 = or i32 %41, %8
  %91 = xor i32 %52, %30
  %92 = xor i32 %70, -1
  %93 = xor i32 %92, %1
  %94 = and i32 %38, %34
  %95 = xor i32 %52, -1
  %96 = and i32 %95, %28
  %97 = xor i32 %2, %0
  %98 = xor i32 %97, -1
  %99 = or i32 %27, %98
  %100 = xor i32 %8, -1
  %101 = and i32 %41, %66
  %102 = or i32 %41, %0
  %103 = xor i32 %102, 2147483647
  %104 = or i32 %103, %61
  %105 = or i32 %27, %2
  %106 = or i32 %2, %0
  %107 = xor i32 %106, -1
  %108 = or i32 %107, %7
  %109 = and i32 %42, %0
  %110 = or i32 %81, %109
  %111 = xor i32 %41, %0
  %112 = or i32 %61, %111
  %113 = or i32 %42, %67
  %114 = shl i32 %113, 1
  %115 = or i32 %22, %0
  %116 = xor i32 %25, %1
  %117 = xor i32 %44, %0
  %118 = xor i32 %111, 2147483647
  %119 = xor i32 %118, %61
  %120 = and i32 %70, %27
  %121 = and i32 %78, %2
  %122 = or i32 %52, %28
  %123 = add i32 %97, 1
  %124 = or i32 %52, %7
  %125 = or i32 %45, %46
  %126 = and i32 %53, %0
  %127 = shl i32 %126, 1
  %128 = xor i32 %86, -1
  %129 = xor i32 %85, %128
  %130 = xor i32 %30, %58
  %131 = add i32 %70, 1
  %132 = or i32 %41, %67
  %133 = xor i32 %40, -1
  %134 = or i32 %98, %133
  %135 = xor i32 %95, %1
  %136 = or i32 %97, %1
  %137 = xor i32 %25, %22
  %138 = and i32 %53, %34
  %139 = or i32 %97, %58
  %140 = and i32 %66, %42
  %141 = or i32 %97, %7
  %142 = xor i32 %38, %0
  %143 = xor i32 %62, %0
  %144 = or i32 %61, %143
  %145 = or i32 %30, %0
  %146 = and i32 %97, %27
  %147 = and i32 %97, %28
  %148 = or i32 %52, %44
  %149 = xor i32 %21, %0
  %150 = and i32 %98, %7
  %151 = and i32 %41, %34
  %152 = or i32 %45, %151
  %153 = or i32 %8, %2
  %154 = or i32 %27, %92
  %155 = xor i32 %22, %34
  %156 = xor i32 %155, %45
  %157 = and i32 %100, %2
  %158 = or i32 %92, %7
  %159 = shl i32 %158, 1
  %160 = and i32 %27, %20
  %161 = and i32 %20, %78
  %162 = or i32 %25, %133
  %163 = and i32 %70, %1
  %164 = or i32 %98, %7
  %165 = xor i32 %107, %1
  %166 = or i32 %133, %2
  %167 = xor i32 %25, %40
  %168 = shl i32 %22, 1
  %169 = and i32 %98, %100
  %170 = and i32 %41, %0
  %171 = or i32 %85, %170
  %172 = xor i32 %61, %102
  %173 = or i32 %98, %1
  %174 = and i32 %41, %100
  %175 = and i32 %97, %78
  %176 = and i32 %97, %40
  %177 = and i32 %27, %2
  %178 = xor i32 %8, %38
  %179 = or i32 %61, %63
  %180 = or i32 %52, %1
  %181 = or i32 %50, %0
  %182 = and i32 %23, %34
  %183 = and i32 %21, %34
  %184 = shl i32 %183, 1
  %185 = and i32 %23, %0
  %186 = and i32 %21, %0
  %187 = and i32 %50, %34
  %188 = mul i32 %85, -9
  %189 = and i32 %50, %0
  %190 = xor i32 %4, %3
  %191 = xor i32 %5, %4
  %192 = xor i32 %191, -1
  %193 = or i32 %190, %192
  %194 = or i32 %13, %4
  %195 = xor i32 %3, -1
  %196 = and i32 %195, %5
  %197 = and i32 %196, %10
  %198 = xor i32 %5, %3
  %199 = or i32 %198, %10
  %200 = xor i32 %199, -1
  %201 = or i32 %197, %200
  %202 = or i32 %4, %3
  %203 = xor i32 %202, -1
  %204 = or i32 %198, %203
  %205 = shl i32 %204, 1
  %206 = xor i32 %203, %5
  %207 = and i32 %11, %4
  %208 = or i32 %207, %195
  %209 = or i32 %11, %4
  %210 = xor i32 %209, %15
  %211 = shl i32 %191, 1
  %212 = and i32 %195, %4
  %213 = and i32 %5, %3
  %214 = xor i32 %213, -1
  %215 = xor i32 %212, %214
  %216 = and i32 %196, %4
  %217 = or i32 %195, %5
  %218 = and i32 %217, %10
  %219 = or i32 %216, %218
  %220 = xor i32 %190, -1
  %221 = and i32 %191, %220
  %222 = or i32 %195, %4
  %223 = xor i32 %222, -1
  %224 = or i32 %198, %223
  %225 = shl i32 %224, 1
  %226 = and i32 %5, %4
  %227 = xor i32 %226, -1
  %228 = and i32 %227, %220
  %229 = and i32 %192, %220
  %230 = xor i32 %213, %4
  %231 = or i32 %5, %4
  %232 = xor i32 %231, -1
  %233 = or i32 %190, %232
  %234 = shl i32 %233, 1
  %235 = or i32 %192, %195
  %236 = shl i32 %212, 1
  %237 = and i32 %213, %4
  %238 = and i32 %198, %10
  %239 = or i32 %237, %238
  %240 = xor i32 %198, -1
  %241 = xor i32 %15, %5
  %242 = or i32 %226, %223
  %243 = and i32 %11, %3
  %244 = or i32 %226, %243
  %245 = add i32 %231, 1
  %246 = or i32 %223, %5
  %247 = and i32 %227, %3
  %248 = shl i32 %247, 1
  %249 = or i32 %191, %220
  %250 = or i32 %226, %3
  %251 = and i32 %231, %190
  %252 = or i32 %191, %195
  %253 = or i32 %190, %11
  %254 = xor i32 %237, -1
  %255 = xor i32 %238, %254
  %256 = and i32 %222, %5
  %257 = or i32 %203, %5
  %258 = or i32 %212, %240
  %259 = xor i32 %217, %4
  %260 = xor i32 %216, -1
  %261 = xor i32 %259, %260
  %262 = or i32 %5, %3
  %263 = xor i32 %262, -1
  %264 = or i32 %263, %4
  %265 = and i32 %220, %5
  %266 = and i32 %209, %3
  %267 = and i32 %262, %10
  %268 = or i32 %237, %267
  %269 = or i32 %240, %10
  %270 = xor i32 %243, -1
  %271 = xor i32 %212, %270
  %272 = and i32 %12, %10
  %273 = or i32 %198, %15
  %274 = or i32 %240, %4
  %275 = xor i32 %209, -1
  %276 = xor i32 %275, %3
  %277 = xor i32 %263, %4
  %278 = shl i32 %277, 1
  %279 = or i32 %190, %275
  %280 = xor i32 %207, %3
  %281 = and i32 %192, %195
  %282 = and i32 %213, %10
  %283 = and i32 %198, %4
  %284 = xor i32 %282, -1
  %285 = xor i32 %283, %284
  %286 = xor i32 %212, -1
  %287 = and i32 %191, %286
  %288 = or i32 %262, %10
  %289 = or i32 %12, %4
  %290 = shl i32 %207, 1
  %291 = and i32 %202, %192
  %292 = shl i32 %291, 1
  %293 = or i32 %226, %195
  %294 = and i32 %262, %4
  %295 = or i32 %282, %294
  %296 = and i32 %191, %3
  %297 = xor i32 %240, %4
  %298 = or i32 %15, %263
  %299 = and i32 %286, %5
  %300 = or i32 %15, %11
  %301 = or i32 %213, %4
  %302 = xor i32 %262, %4
  %303 = or i32 %237, %302
  %304 = or i32 %243, %4
  %305 = shl i32 %304, 1
  %306 = or i32 %226, %203
  %307 = shl i32 %306, 1
  %308 = add i32 %243, 1
  %309 = and i32 %217, %4
  %310 = xor i32 %309, -1
  %311 = xor i32 %197, %310
  %312 = or i32 %213, %212
  %313 = or i32 %191, %190
  %314 = or i32 %11, %220
  %315 = and i32 %202, %11
  %316 = xor i32 %207, %214
  %317 = and i32 %240, %4
  %318 = or i32 %191, %3
  %319 = xor i32 %198, %4
  %320 = or i32 %198, %4
  %321 = xor i32 %320, -1
  %322 = or i32 %216, %321
  %323 = or i32 %212, %11
  %324 = and i32 %240, %10
  %325 = and i32 %11, %286
  %326 = and i32 %191, %195
  %327 = and i32 %16, %5
  %328 = and i32 %270, %10
  %329 = xor i32 %218, %260
  %330 = xor i32 %216, %320
  %331 = xor i32 %226, %202
  %332 = or i32 %240, %203
  %333 = shl i32 %332, 1
  %334 = and i32 %198, %286
  %335 = or i32 %191, %15
  %336 = or i32 %190, %5
  %337 = and i32 %214, %10
  %338 = or i32 %263, %10
  %339 = or i32 %15, %13
  %340 = xor i32 %319, -1
  %341 = or i32 %237, %340
  %342 = shl i32 %341, 1
  %343 = and i32 %209, %190
  %344 = or i32 %226, %190
  %345 = and i32 %11, %220
  %346 = or i32 %15, %5
  %347 = xor i32 %223, %5
  %348 = and i32 %270, %4
  %349 = and i32 %202, %240
  %350 = and i32 %192, %16
  %351 = shl i32 %350, 1
  %352 = xor i32 %197, %199
  %353 = or i32 %275, %3
  %354 = or i32 %243, %10
  %355 = shl i32 %354, 1
  %356 = and i32 %240, %286
  %357 = or i32 %232, %195
  %358 = shl i32 %357, 1
  %359 = xor i32 %214, %4
  %360 = xor i32 %16, %5
  %361 = and i32 %191, %16
  %362 = and i32 %190, %192
  %363 = xor i32 %237, %319
  %364 = and i32 %231, %220
  %365 = shl i32 %231, 1
  %366 = xor i32 %12, %4
  %367 = or i32 %192, %220
  %368 = xor i32 %202, %5
  %369 = or i32 %226, %263
  %370 = and i32 %191, %222
  %371 = or i32 %216, %319
  %372 = or i32 %11, %203
  %373 = shl i32 %263, 1
  %374 = or i32 %15, %275
  %375 = add i32 %213, 1
  %376 = and i32 %240, %16
  %377 = and i32 %198, %202
  %378 = xor i32 %222, %5
  %379 = and i32 %214, %4
  %380 = xor i32 %294, %284
  %381 = xor i32 %207, %12
  %382 = xor i32 %207, -1
  %383 = xor i32 %382, %3
  %384 = or i32 %212, %5
  %385 = or i32 %11, %223
  %386 = shl i32 %385, 1
  %387 = and i32 %190, %5
  %388 = or i32 %270, %10
  %389 = and i32 %227, %195
  %390 = xor i32 %226, %222
  %391 = and i32 %222, %192
  %392 = xor i32 %216, %340
  %393 = or i32 %15, %192
  %394 = or i32 %214, %10
  %395 = or i32 %243, %212
  %396 = or i32 %270, %4
  %397 = or i32 %198, %212
  %398 = add i32 %4, 1
  %399 = or i32 %191, %212
  %400 = and i32 %190, %382
  %401 = or i32 %15, %232
  %402 = shl i32 %401, 1
  %403 = or i32 %207, %3
  %404 = shl i32 %403, 1
  %405 = or i32 %220, %5
  %406 = and i32 %202, %5
  %407 = xor i32 %12, %15
  %408 = shl i32 %382, 1
  %409 = xor i32 %232, %3
  %410 = xor i32 %209, %3
  %411 = shl i32 %410, 1
  %412 = or i32 %207, %220
  %413 = or i32 %191, %223
  %414 = xor i32 %13, %4
  %415 = xor i32 %226, %270
  %416 = xor i32 %302, %254
  %417 = xor i32 %262, %15
  %418 = add i32 %12, 1
  %419 = xor i32 %212, %5
  %420 = add i32 %212, 1
  %421 = or i32 %216, %259
  %422 = and i32 %198, %16
  %423 = and i32 %222, %11
  %424 = or i32 %232, %3
  %425 = and i32 %12, %4
  %426 = xor i32 %226, %262
  %427 = and i32 %222, %240
  %428 = or i32 %213, %10
  %429 = or i32 %207, %213
  %430 = xor i32 %226, %3
  %431 = or i32 %207, %13
  %432 = shl i32 %431, 1
  %433 = and i32 %192, %286
  %434 = and i32 %198, %222
  %435 = or i32 %15, %240
  %436 = shl i32 %435, 1
  %437 = or i32 %12, %10
  %438 = and i32 %192, %3
  %439 = or i32 %262, %4
  %440 = and i32 %231, %195
  %441 = and i32 %263, %10
  %442 = mul i32 %441, 6
  %443 = and i32 %243, %10
  %444 = and i32 %263, %4
  %445 = and i32 %243, %4
  %446 = and i32 %13, %10
  %447 = mul i32 %446, 21
  %448 = and i32 %13, %4
  %449 = mul i32 %448, 31
  %450 = add i32 %141, %25
  %451 = add i32 %450, %139
  %452 = add i32 %451, %137
  %453 = add i32 %452, %130
  %454 = add i32 %453, %101
  %455 = add i32 %454, %99
  %456 = add i32 %455, %76
  %457 = add i32 %456, %74
  %458 = add i32 %457, %15
  %459 = add i32 %458, %368
  %460 = add i32 %459, %226
  %461 = add i32 %460, %300
  %462 = add i32 %461, %246
  %463 = add i32 %462, %119
  %464 = add i32 %463, %104
  %465 = add i32 %464, %429
  %466 = add i32 %465, %366
  %467 = add i32 %466, %356
  %468 = add i32 %467, %302
  %469 = add i32 %468, %349
  %470 = add i32 %469, %324
  %471 = add i32 %470, %296
  %472 = add i32 %471, %289
  %473 = add i32 %472, %272
  %474 = add i32 %473, %271
  %475 = add i32 %474, %264
  %476 = add i32 %475, %258
  %477 = add i32 %476, %215
  %478 = add i32 %477, %239
  %479 = shl i32 %478, 1
  %480 = sub i32 %418, %136
  %481 = sub i32 %480, %372
  %482 = sub i32 %481, %282
  %483 = add i32 %482, %338
  %484 = sub i32 %483, %319
  %485 = add i32 %484, %318
  %486 = add i32 %485, %285
  %487 = mul i32 %486, 3
  %488 = sub i32 %132, %88
  %489 = add i32 %488, %375
  %490 = add i32 %489, %396
  %491 = sub i32 %490, %237
  %492 = sub i32 %491, %194
  %493 = mul i32 %492, 5
  %494 = add i32 %443, %185
  %495 = add i32 %494, %445
  %496 = shl i32 %495, 4
  %497 = add i32 %444, %45
  %498 = mul i32 %497, 20
  %499 = add i32 %189, %187
  %500 = shl i32 %499, 3
  %501 = add i32 %186, 1073741823
  %502 = add i32 %501, %147
  %503 = add i32 %502, %348
  %504 = shl i32 %503, 2
  %505 = add i32 %1, -1
  %506 = add i32 %505, %67
  %507 = add i32 %506, %100
  %508 = sub i32 %507, %66
  %509 = sub i32 %508, %21
  %510 = sub i32 %509, %29
  %511 = sub i32 %510, %30
  %512 = add i32 %511, %57
  %513 = add i32 %512, %59
  %514 = sub i32 %513, %80
  %515 = sub i32 %514, %89
  %516 = sub i32 %515, %105
  %517 = add i32 %516, %121
  %518 = add i32 %517, %123
  %519 = add i32 %518, %131
  %520 = add i32 %519, %95
  %521 = add i32 %520, %23
  %522 = add i32 %521, %153
  %523 = sub i32 %522, %157
  %524 = sub i32 %523, %160
  %525 = add i32 %524, %161
  %526 = add i32 %525, %38
  %527 = sub i32 %526, %166
  %528 = sub i32 %527, %177
  %529 = add i32 %528, %3
  %530 = sub i32 %529, %24
  %531 = add i32 %530, %26
  %532 = sub i32 %531, %31
  %533 = add i32 %532, %35
  %534 = add i32 %533, %37
  %535 = sub i32 %534, %39
  %536 = add i32 %535, %43
  %537 = add i32 %536, %49
  %538 = sub i32 %537, %51
  %539 = add i32 %538, %54
  %540 = sub i32 %539, %55
  %541 = sub i32 %540, %56
  %542 = sub i32 %541, %71
  %543 = sub i32 %542, %75
  %544 = sub i32 %543, %77
  %545 = sub i32 %544, %79
  %546 = sub i32 %545, %90
  %547 = add i32 %546, %91
  %548 = sub i32 %547, %93
  %549 = add i32 %548, %94
  %550 = sub i32 %549, %96
  %551 = add i32 %550, %108
  %552 = add i32 %551, %86
  %553 = sub i32 %552, %115
  %554 = sub i32 %553, %116
  %555 = add i32 %554, %117
  %556 = add i32 %555, %120
  %557 = sub i32 %556, %122
  %558 = add i32 %557, %124
  %559 = add i32 %558, %46
  %560 = add i32 %559, %134
  %561 = sub i32 %560, %135
  %562 = sub i32 %561, %138
  %563 = add i32 %562, %140
  %564 = add i32 %563, %142
  %565 = sub i32 %564, %145
  %566 = sub i32 %565, %146
  %567 = add i32 %566, %148
  %568 = add i32 %567, %149
  %569 = add i32 %568, %150
  %570 = sub i32 %569, %154
  %571 = sub i32 %570, %162
  %572 = sub i32 %571, %163
  %573 = sub i32 %572, %164
  %574 = sub i32 %573, %165
  %575 = sub i32 %574, %167
  %576 = sub i32 %575, %168
  %577 = add i32 %576, %169
  %578 = sub i32 %577, %173
  %579 = sub i32 %578, %174
  %580 = sub i32 %579, %175
  %581 = add i32 %580, %176
  %582 = add i32 %581, %178
  %583 = sub i32 %582, %111
  %584 = add i32 %583, %180
  %585 = sub i32 %584, %181
  %586 = sub i32 %585, %182
  %587 = add i32 %586, %4
  %588 = add i32 %587, %398
  %589 = sub i32 %588, %33
  %590 = add i32 %589, %48
  %591 = add i32 %590, %65
  %592 = sub i32 %591, %69
  %593 = sub i32 %592, %73
  %594 = add i32 %593, %87
  %595 = sub i32 %594, %110
  %596 = sub i32 %595, %112
  %597 = sub i32 %596, %114
  %598 = add i32 %597, %125
  %599 = sub i32 %598, %127
  %600 = sub i32 %599, %129
  %601 = sub i32 %600, %144
  %602 = add i32 %601, %152
  %603 = sub i32 %602, %156
  %604 = sub i32 %603, %159
  %605 = add i32 %604, %171
  %606 = sub i32 %605, %172
  %607 = add i32 %606, %179
  %608 = sub i32 %607, %184
  %609 = add i32 %608, %188
  %610 = sub i32 %609, %202
  %611 = add i32 %610, %223
  %612 = sub i32 %611, %222
  %613 = add i32 %612, %420
  %614 = add i32 %613, %203
  %615 = sub i32 %614, %84
  %616 = add i32 %615, %206
  %617 = sub i32 %616, %236
  %618 = add i32 %617, %241
  %619 = add i32 %618, %245
  %620 = sub i32 %619, %253
  %621 = add i32 %620, %256
  %622 = sub i32 %621, %257
  %623 = add i32 %622, %265
  %624 = sub i32 %623, %299
  %625 = add i32 %624, %308
  %626 = add i32 %625, %314
  %627 = sub i32 %626, %315
  %628 = sub i32 %627, %323
  %629 = add i32 %628, %325
  %630 = sub i32 %629, %327
  %631 = sub i32 %630, %336
  %632 = sub i32 %631, %345
  %633 = add i32 %632, %346
  %634 = sub i32 %633, %347
  %635 = add i32 %634, %360
  %636 = add i32 %635, %192
  %637 = add i32 %636, %378
  %638 = add i32 %637, %384
  %639 = sub i32 %638, %387
  %640 = sub i32 %639, %262
  %641 = sub i32 %640, %405
  %642 = sub i32 %641, %406
  %643 = add i32 %642, %213
  %644 = sub i32 %643, %243
  %645 = add i32 %644, %419
  %646 = add i32 %645, %423
  %647 = add i32 %646, %12
  %648 = add i32 %647, %500
  %649 = add i32 %648, %193
  %650 = add i32 %649, %208
  %651 = sub i32 %650, %210
  %652 = sub i32 %651, %211
  %653 = add i32 %652, %221
  %654 = add i32 %653, %228
  %655 = add i32 %654, %229
  %656 = add i32 %655, %230
  %657 = sub i32 %656, %235
  %658 = sub i32 %657, %242
  %659 = sub i32 %658, %244
  %660 = add i32 %659, %249
  %661 = add i32 %660, %250
  %662 = sub i32 %661, %251
  %663 = sub i32 %662, %252
  %664 = add i32 %663, %266
  %665 = add i32 %664, %269
  %666 = add i32 %665, %273
  %667 = add i32 %666, %274
  %668 = sub i32 %667, %276
  %669 = sub i32 %668, %279
  %670 = sub i32 %669, %280
  %671 = sub i32 %670, %281
  %672 = sub i32 %671, %287
  %673 = add i32 %672, %288
  %674 = sub i32 %673, %290
  %675 = sub i32 %674, %293
  %676 = add i32 %675, %297
  %677 = add i32 %676, %298
  %678 = sub i32 %677, %301
  %679 = add i32 %678, %312
  %680 = add i32 %679, %313
  %681 = add i32 %680, %316
  %682 = sub i32 %681, %317
  %683 = sub i32 %682, %326
  %684 = sub i32 %683, %328
  %685 = sub i32 %684, %331
  %686 = sub i32 %685, %334
  %687 = sub i32 %686, %335
  %688 = add i32 %687, %337
  %689 = sub i32 %688, %339
  %690 = sub i32 %689, %343
  %691 = sub i32 %690, %344
  %692 = add i32 %691, %267
  %693 = add i32 %692, %353
  %694 = sub i32 %693, %359
  %695 = sub i32 %694, %361
  %696 = add i32 %695, %362
  %697 = add i32 %696, %364
  %698 = sub i32 %697, %365
  %699 = add i32 %698, %367
  %700 = sub i32 %699, %369
  %701 = sub i32 %700, %370
  %702 = sub i32 %701, %373
  %703 = sub i32 %702, %374
  %704 = add i32 %703, %376
  %705 = add i32 %704, %377
  %706 = sub i32 %705, %379
  %707 = sub i32 %706, %381
  %708 = sub i32 %707, %383
  %709 = sub i32 %708, %386
  %710 = sub i32 %709, %388
  %711 = add i32 %710, %389
  %712 = add i32 %711, %390
  %713 = add i32 %712, %391
  %714 = sub i32 %713, %393
  %715 = add i32 %714, %394
  %716 = add i32 %715, %395
  %717 = sub i32 %716, %397
  %718 = sub i32 %717, %399
  %719 = add i32 %718, %400
  %720 = sub i32 %719, %407
  %721 = sub i32 %720, %408
  %722 = add i32 %721, %409
  %723 = add i32 %722, %238
  %724 = sub i32 %723, %412
  %725 = add i32 %724, %413
  %726 = sub i32 %725, %414
  %727 = sub i32 %726, %415
  %728 = add i32 %727, %417
  %729 = sub i32 %728, %422
  %730 = add i32 %729, %424
  %731 = add i32 %730, %425
  %732 = add i32 %731, %426
  %733 = sub i32 %732, %427
  %734 = add i32 %733, %428
  %735 = add i32 %734, %283
  %736 = sub i32 %735, %430
  %737 = sub i32 %736, %294
  %738 = sub i32 %737, %433
  %739 = add i32 %738, %434
  %740 = sub i32 %739, %437
  %741 = sub i32 %740, %438
  %742 = sub i32 %741, %439
  %743 = sub i32 %742, %440
  %744 = sub i32 %743, %201
  %745 = sub i32 %744, %205
  %746 = sub i32 %745, %219
  %747 = sub i32 %746, %225
  %748 = sub i32 %747, %234
  %749 = sub i32 %748, %248
  %750 = add i32 %749, %255
  %751 = sub i32 %750, %261
  %752 = sub i32 %751, %268
  %753 = sub i32 %752, %278
  %754 = sub i32 %753, %292
  %755 = sub i32 %754, %295
  %756 = sub i32 %755, %303
  %757 = sub i32 %756, %305
  %758 = sub i32 %757, %307
  %759 = sub i32 %758, %311
  %760 = add i32 %759, %322
  %761 = add i32 %760, %329
  %762 = sub i32 %761, %330
  %763 = sub i32 %762, %333
  %764 = sub i32 %763, %351
  %765 = sub i32 %764, %352
  %766 = sub i32 %765, %355
  %767 = sub i32 %766, %358
  %768 = sub i32 %767, %363
  %769 = add i32 %768, %371
  %770 = add i32 %769, %380
  %771 = sub i32 %770, %392
  %772 = sub i32 %771, %402
  %773 = sub i32 %772, %404
  %774 = sub i32 %773, %411
  %775 = sub i32 %774, %416
  %776 = sub i32 %775, %421
  %777 = sub i32 %776, %432
  %778 = sub i32 %777, %436
  %779 = add i32 %778, %442
  %780 = add i32 %779, %447
  %781 = add i32 %780, %449
  %782 = sub i32 %781, %342
  %783 = add i32 %782, %498
  %784 = add i32 %783, %496
  %785 = add i32 %784, %504
  %786 = add i32 %785, %493
  %787 = add i32 %786, %487
  %788 = add i32 %787, %479
  %789 = icmp eq i32 %19, %788
  %790 = select i1 %789, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %791 = tail call i32 @puts(i8* nonnull dereferenceable(1) %790)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
