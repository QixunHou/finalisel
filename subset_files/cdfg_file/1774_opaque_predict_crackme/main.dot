digraph "DFG for'main' function" {
	Node0xf84128[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xf841a8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xf84238[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xf84298[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xf8b118[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xf8b1f8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xf8b2f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf8b3b8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xf8b468[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf8b6c8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xf8b788[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xf8c6f8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xf8cd68[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xf8ce60[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xf8d068[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf8d1c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf8d2d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xf8d398[shape=record, label="  ret i32 0"];
	Node0xf84128 -> Node0xf841a8;
	Node0xf841a8 -> Node0xf84238;
	Node0xf84238 -> Node0xf84298;
	Node0xf84298 -> Node0xf8b118;
	Node0xf8b118 -> Node0xf8b1f8;
	Node0xf8b1f8 -> Node0xf8b2f8;
	Node0xf8b2f8 -> Node0xf8b3b8;
	Node0xf8b3b8 -> Node0xf8b468;
	Node0xf8b468 -> Node0xf8b6c8;
	Node0xf8b6c8 -> Node0xf8b788;
	Node0xf8b788 -> Node0xf8c6f8;
	Node0xf8c6f8 -> Node0xf8cd68;
	Node0xf8cd68 -> Node0xf8ce60;
	Node0xf8ce60 -> Node0xf8d068;
	Node0xf8d068 -> Node0xf8d1c8;
	Node0xf8d1c8 -> Node0xf8d2d8;
	Node0xf8d2d8 -> Node0xf8d398;
edge [color=red]
	Node0xf84128 -> Node0xf84298;
	Node0xf84298 -> Node0xf8b118;
	Node0xf841a8 -> Node0xf8b1f8;
	Node0xf8b1f8 -> Node0xf8b2f8;
	Node0xf84238 -> Node0xf8b3b8;
	Node0xf8b3b8 -> Node0xf8b468;
	Node0xf84128 -> Node0xf8b6c8;
	Node0xf841a8 -> Node0xf8b6c8;
	Node0xf84238 -> Node0xf8b6c8;
	Node0xf84128 -> Node0xf8b788;
	Node0xf841a8 -> Node0xf8c6f8;
	Node0xf84238 -> Node0xf8cd68;
	Node0xf8b788 -> Node0xf8ce60;
	Node0xf8c6f8 -> Node0xf8ce60;
	Node0xf8cd68 -> Node0xf8ce60;
	Node0xf8b3b8 -> Node0xf8d068;
	Node0xf8b1f8 -> Node0xf8d1c8;
	Node0xf84298 -> Node0xf8d2d8;
}
