; ModuleID = '../.././c_source_file/1774_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1774_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %1, %0
  %7 = and i32 %6, %5
  %8 = xor i32 %1, -1
  %9 = xor i32 %2, -1
  %10 = or i32 %9, %0
  %11 = and i32 %10, %8
  %12 = shl i32 %11, 1
  %13 = add i32 %12, %7
  %14 = and i32 %1, %0
  %15 = or i32 %14, %2
  %16 = and i32 %9, %1
  %17 = or i32 %16, %0
  %18 = and i32 %8, %0
  %19 = xor i32 %2, %0
  %20 = or i32 %19, %18
  %21 = and i32 %19, %1
  %22 = or i32 %1, %0
  %23 = xor i32 %4, %22
  %24 = xor i32 %0, -1
  %25 = and i32 %2, %1
  %26 = or i32 %25, %24
  %27 = or i32 %9, %1
  %28 = and i32 %27, %24
  %29 = xor i32 %6, -1
  %30 = and i32 %19, %29
  %31 = xor i32 %19, -1
  %32 = or i32 %14, %31
  %33 = and i32 %8, %2
  %34 = and i32 %33, %24
  %35 = or i32 %8, %2
  %36 = and i32 %35, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %34, %37
  %39 = xor i32 %18, %2
  %40 = shl i32 %39, 1
  %41 = xor i32 %25, %0
  %42 = xor i32 %10, %1
  %43 = xor i32 %2, %1
  %44 = xor i32 %43, -1
  %45 = xor i32 %44, %0
  %46 = xor i32 %22, -1
  %47 = or i32 %44, %46
  %48 = and i32 %43, %24
  %49 = or i32 %2, %1
  %50 = and i32 %31, %1
  %51 = shl i32 %50, 1
  %52 = xor i32 %25, -1
  %53 = and i32 %52, %24
  %54 = or i32 %6, %31
  %55 = and i32 %22, %9
  %56 = and i32 %33, %0
  %57 = xor i32 %43, %0
  %58 = or i32 %56, %57
  %59 = or i32 %8, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %4, %60
  %62 = xor i32 %16, -1
  %63 = and i32 %62, %24
  %64 = or i32 %29, %2
  %65 = and i32 %9, %0
  %66 = xor i32 %65, -1
  %67 = and i32 %66, %29
  %68 = or i32 %19, %8
  %69 = and i32 %43, %22
  %70 = and i32 %5, %29
  %71 = and i32 %19, %8
  %72 = or i32 %19, %46
  %73 = xor i32 %49, %0
  %74 = or i32 %60, %2
  %75 = xor i32 %46, %2
  %76 = xor i32 %4, %1
  %77 = or i32 %65, %25
  %78 = xor i32 %18, -1
  %79 = and i32 %44, %78
  %80 = or i32 %2, %0
  %81 = xor i32 %80, %14
  %82 = and i32 %19, %22
  %83 = and i32 %25, %24
  %84 = and i32 %43, %0
  %85 = or i32 %83, %84
  %86 = xor i32 %80, -1
  %87 = or i32 %86, %8
  %88 = or i32 %43, %0
  %89 = xor i32 %56, %88
  %90 = or i32 %31, %8
  %91 = xor i32 %10, -1
  %92 = or i32 %91, %1
  %93 = or i32 %27, %24
  %94 = and i32 %80, %29
  %95 = or i32 %14, %9
  %96 = or i32 %49, %0
  %97 = or i32 %31, %46
  %98 = and i32 %31, %29
  %99 = or i32 %16, %24
  %100 = and i32 %62, %0
  %101 = xor i32 %14, -1
  %102 = and i32 %43, %101
  %103 = shl i32 %102, 1
  %104 = xor i32 %27, -1
  %105 = or i32 %65, %104
  %106 = shl i32 %105, 1
  %107 = xor i32 %22, %2
  %108 = and i32 %49, %24
  %109 = shl i32 %86, 1
  %110 = and i32 %19, %6
  %111 = or i32 %62, %0
  %112 = and i32 %44, %101
  %113 = or i32 %62, %24
  %114 = or i32 %4, %1
  %115 = or i32 %91, %29
  %116 = and i32 %22, %2
  %117 = or i32 %44, %60
  %118 = and i32 %25, %0
  %119 = xor i32 %57, -1
  %120 = or i32 %118, %119
  %121 = or i32 %34, %36
  %122 = and i32 %9, %101
  %123 = xor i32 %65, %1
  %124 = or i32 %43, %24
  %125 = or i32 %9, %46
  %126 = or i32 %43, %14
  %127 = or i32 %65, %29
  %128 = and i32 %22, %44
  %129 = and i32 %66, %8
  %130 = shl i32 %129, 1
  %131 = and i32 %78, %2
  %132 = and i32 %27, %0
  %133 = and i32 %5, %1
  %134 = and i32 %35, %24
  %135 = xor i32 %56, 2147483647
  %136 = xor i32 %135, %134
  %137 = shl i32 %136, 1
  %138 = add i32 %25, 1
  %139 = xor i32 %118, -1
  %140 = xor i32 %48, %139
  %141 = add i32 %65, 1
  %142 = or i32 %118, %73
  %143 = and i32 %44, %24
  %144 = and i32 %6, %31
  %145 = xor i32 %4, %62
  %146 = xor i32 %78, %2
  %147 = or i32 %56, %134
  %148 = xor i32 %83, -1
  %149 = xor i32 %84, %148
  %150 = or i32 %65, %6
  %151 = xor i32 %49, -1
  %152 = or i32 %4, %151
  %153 = or i32 %18, %31
  %154 = or i32 %52, %0
  %155 = and i32 %19, %101
  %156 = and i32 %9, %29
  %157 = xor i32 %59, %2
  %158 = or i32 %14, %151
  %159 = or i32 %4, %8
  %160 = or i32 %16, %18
  %161 = and i32 %52, %0
  %162 = shl i32 %161, 2
  %163 = or i32 %151, %0
  %164 = or i32 %14, %86
  %165 = xor i32 %151, %0
  %166 = and i32 %19, %78
  %167 = and i32 %10, %1
  %168 = or i32 %19, %1
  %169 = or i32 %9, %60
  %170 = add i32 %4, 1
  %171 = xor i32 %27, %0
  %172 = xor i32 %101, %2
  %173 = and i32 %22, %31
  %174 = and i32 %49, %0
  %175 = xor i32 %18, %52
  %176 = xor i32 %86, %1
  %177 = shl i32 %176, 1
  %178 = and i32 %44, %0
  %179 = and i32 %6, %9
  %180 = or i32 %31, %1
  %181 = or i32 %27, %0
  %182 = and i32 %80, %8
  %183 = shl i32 %182, 1
  %184 = or i32 %118, %48
  %185 = xor i32 %4, %49
  %186 = or i32 %6, %2
  %187 = xor i32 %5, %1
  %188 = xor i32 %118, %57
  %189 = or i32 %91, %8
  %190 = and i32 %31, %8
  %191 = and i32 %66, %1
  %192 = and i32 %59, %2
  %193 = xor i32 %35, %0
  %194 = xor i32 %135, %193
  %195 = shl i32 %194, 1
  %196 = and i32 %80, %6
  %197 = and i32 %5, %8
  %198 = shl i32 %197, 1
  %199 = or i32 %4, %6
  %200 = and i32 %59, %31
  %201 = shl i32 %200, 1
  %202 = xor i32 %27, %14
  %203 = or i32 %19, %14
  %204 = xor i32 %104, %0
  %205 = or i32 %86, %1
  %206 = and i32 %9, %78
  %207 = xor i32 %88, -1
  %208 = or i32 %56, %207
  %209 = and i32 %6, %2
  %210 = shl i32 %209, 1
  %211 = or i32 %118, %108
  %212 = and i32 %80, %1
  %213 = or i32 %104, %24
  %214 = and i32 %101, %2
  %215 = add i32 %6, 1
  %216 = and i32 %29, %2
  %217 = or i32 %56, %193
  %218 = and i32 %43, %59
  %219 = xor i32 %60, %2
  %220 = xor i32 %14, %2
  %221 = or i32 %25, %18
  %222 = or i32 %18, %9
  %223 = or i32 %65, %1
  %224 = xor i32 %34, %124
  %225 = or i32 %25, %0
  %226 = and i32 %19, %59
  %227 = or i32 %104, %0
  %228 = xor i32 %4, %59
  %229 = or i32 %43, %18
  %230 = xor i32 %16, %0
  %231 = xor i32 %124, -1
  %232 = or i32 %34, %231
  %233 = or i32 %14, %104
  %234 = or i32 %46, %2
  %235 = and i32 %6, %66
  %236 = xor i32 %10, %14
  %237 = shl i32 %236, 1
  %238 = xor i32 %91, %1
  %239 = xor i32 %56, %119
  %240 = xor i32 %49, %14
  %241 = or i32 %31, %60
  %242 = and i32 %31, %101
  %243 = xor i32 %73, %139
  %244 = and i32 %59, %44
  %245 = or i32 %151, %24
  %246 = shl i32 %245, 2
  %247 = or i32 %83, %174
  %248 = xor i32 %66, %1
  %249 = xor i32 %80, %1
  %250 = shl i32 %249, 1
  %251 = or i32 %6, %91
  %252 = or i32 %4, %16
  %253 = xor i32 %62, %0
  %254 = and i32 %31, %78
  %255 = or i32 %31, %29
  %256 = shl i32 %255, 1
  %257 = or i32 %52, %24
  %258 = or i32 %18, %2
  %259 = or i32 %6, %86
  %260 = or i32 %44, %24
  %261 = xor i32 %174, %148
  %262 = and i32 %43, %78
  %263 = or i32 %9, %29
  %264 = or i32 %4, %29
  %265 = xor i32 %52, %0
  %266 = shl i32 %265, 1
  %267 = or i32 %19, %60
  %268 = xor i32 %18, %62
  %269 = or i32 %65, %8
  %270 = or i32 %14, %44
  %271 = or i32 %19, %6
  %272 = xor i32 %108, %139
  %273 = or i32 %4, %46
  %274 = or i32 %44, %0
  %275 = or i32 %49, %24
  %276 = or i32 %6, %9
  %277 = or i32 %18, %44
  %278 = and i32 %151, %24
  %279 = mul i32 %278, -12
  %280 = and i32 %16, %24
  %281 = mul i32 %280, -31
  %282 = and i32 %151, %0
  %283 = mul i32 %282, -24
  %284 = and i32 %16, %0
  %285 = mul i32 %284, -28
  %286 = and i32 %104, %24
  %287 = mul i32 %286, -26
  %288 = mul i32 %83, -47
  %289 = and i32 %104, %0
  %290 = mul i32 %289, -27
  %291 = mul i32 %118, -46
  %292 = sub i32 %6, %206
  %293 = add i32 %292, %64
  %294 = sub i32 %293, %160
  %295 = add i32 %294, %191
  %296 = sub i32 %295, %61
  %297 = mul i32 %296, 3
  %298 = sub i32 %91, %219
  %299 = add i32 %298, %171
  %300 = sub i32 %299, %244
  %301 = add i32 %300, %97
  %302 = mul i32 %301, 5
  %303 = add i32 %14, %151
  %304 = add i32 %303, %260
  %305 = add i32 %304, %271
  %306 = add i32 %305, %238
  %307 = shl i32 %306, 2
  %308 = sub i32 -2, %0
  %309 = add i32 %308, %22
  %310 = add i32 %309, %78
  %311 = add i32 %310, %263
  %312 = add i32 %311, %62
  %313 = add i32 %312, %216
  %314 = add i32 %313, %4
  %315 = add i32 %314, %75
  %316 = add i32 %315, %55
  %317 = add i32 %316, %257
  %318 = add i32 %317, %267
  %319 = add i32 %318, %252
  %320 = add i32 %319, %230
  %321 = add i32 %320, %205
  %322 = add i32 %321, %84
  %323 = add i32 %322, %196
  %324 = add i32 %323, %163
  %325 = add i32 %324, %150
  %326 = add i32 %325, %145
  %327 = add i32 %326, %133
  %328 = add i32 %327, %132
  %329 = add i32 %328, %113
  %330 = add i32 %329, %96
  %331 = add i32 %330, %94
  %332 = add i32 %331, %71
  %333 = add i32 %332, %70
  %334 = add i32 %333, %69
  %335 = shl i32 %334, 1
  %336 = add i32 %0, 2
  %337 = add i32 %336, %9
  %338 = add i32 %337, %18
  %339 = add i32 %338, %215
  %340 = add i32 %339, %101
  %341 = sub i32 %340, %15
  %342 = add i32 %341, %10
  %343 = add i32 %342, %49
  %344 = sub i32 %343, %27
  %345 = add i32 %344, %31
  %346 = add i32 %345, %74
  %347 = add i32 %346, %95
  %348 = sub i32 %347, %107
  %349 = sub i32 %348, %65
  %350 = add i32 %349, %25
  %351 = add i32 %350, %116
  %352 = add i32 %351, %16
  %353 = add i32 %352, %122
  %354 = sub i32 %353, %125
  %355 = sub i32 %354, %131
  %356 = add i32 %355, %138
  %357 = add i32 %356, %141
  %358 = add i32 %357, %104
  %359 = sub i32 %358, %146
  %360 = add i32 %359, %156
  %361 = sub i32 %360, %157
  %362 = sub i32 %361, %169
  %363 = add i32 %362, %170
  %364 = add i32 %363, %172
  %365 = sub i32 %364, %179
  %366 = add i32 %365, %186
  %367 = sub i32 %366, %192
  %368 = sub i32 %367, %214
  %369 = add i32 %368, %220
  %370 = sub i32 %369, %222
  %371 = sub i32 %370, %234
  %372 = add i32 %371, %258
  %373 = sub i32 %372, %276
  %374 = sub i32 %373, %19
  %375 = sub i32 %374, %17
  %376 = add i32 %375, %20
  %377 = sub i32 %376, %21
  %378 = sub i32 %377, %23
  %379 = sub i32 %378, %26
  %380 = sub i32 %379, %28
  %381 = sub i32 %380, %30
  %382 = sub i32 %381, %32
  %383 = sub i32 %382, %40
  %384 = sub i32 %383, %41
  %385 = add i32 %384, %42
  %386 = add i32 %385, %45
  %387 = sub i32 %386, %47
  %388 = sub i32 %387, %48
  %389 = sub i32 %388, %53
  %390 = sub i32 %389, %54
  %391 = sub i32 %390, %63
  %392 = add i32 %391, %67
  %393 = add i32 %392, %68
  %394 = sub i32 %393, %72
  %395 = add i32 %394, %73
  %396 = add i32 %395, %76
  %397 = add i32 %396, %77
  %398 = sub i32 %397, %79
  %399 = add i32 %398, %81
  %400 = sub i32 %399, %82
  %401 = sub i32 %400, %87
  %402 = add i32 %401, %90
  %403 = sub i32 %402, %92
  %404 = add i32 %403, %93
  %405 = add i32 %404, %98
  %406 = add i32 %405, %99
  %407 = sub i32 %406, %100
  %408 = sub i32 %407, %108
  %409 = sub i32 %408, %109
  %410 = add i32 %409, %110
  %411 = sub i32 %410, %111
  %412 = add i32 %411, %112
  %413 = add i32 %412, %114
  %414 = add i32 %413, %115
  %415 = sub i32 %414, %117
  %416 = add i32 %415, %123
  %417 = sub i32 %416, %124
  %418 = add i32 %417, %126
  %419 = sub i32 %418, %127
  %420 = add i32 %419, %128
  %421 = sub i32 %420, %143
  %422 = sub i32 %421, %144
  %423 = add i32 %422, %152
  %424 = add i32 %423, %57
  %425 = add i32 %424, %153
  %426 = add i32 %425, %154
  %427 = sub i32 %426, %155
  %428 = sub i32 %427, %158
  %429 = add i32 %428, %159
  %430 = add i32 %429, %164
  %431 = add i32 %430, %165
  %432 = add i32 %431, %166
  %433 = add i32 %432, %167
  %434 = add i32 %433, %168
  %435 = add i32 %434, %173
  %436 = add i32 %435, %174
  %437 = add i32 %436, %175
  %438 = add i32 %437, %88
  %439 = add i32 %438, %178
  %440 = add i32 %439, %180
  %441 = add i32 %440, %181
  %442 = add i32 %441, %185
  %443 = sub i32 %442, %187
  %444 = add i32 %443, %189
  %445 = sub i32 %444, %190
  %446 = add i32 %445, %199
  %447 = add i32 %446, %202
  %448 = sub i32 %447, %203
  %449 = add i32 %448, %204
  %450 = sub i32 %449, %210
  %451 = sub i32 %450, %212
  %452 = add i32 %451, %213
  %453 = sub i32 %452, %218
  %454 = add i32 %453, %221
  %455 = sub i32 %454, %223
  %456 = sub i32 %455, %225
  %457 = add i32 %456, %226
  %458 = sub i32 %457, %227
  %459 = add i32 %458, %228
  %460 = add i32 %459, %229
  %461 = add i32 %460, %233
  %462 = add i32 %461, %235
  %463 = add i32 %462, %240
  %464 = sub i32 %463, %241
  %465 = sub i32 %464, %242
  %466 = sub i32 %465, %248
  %467 = add i32 %466, %251
  %468 = add i32 %467, %253
  %469 = add i32 %468, %254
  %470 = add i32 %469, %259
  %471 = sub i32 %470, %262
  %472 = sub i32 %471, %264
  %473 = add i32 %472, %268
  %474 = sub i32 %473, %269
  %475 = add i32 %474, %270
  %476 = add i32 %475, %273
  %477 = add i32 %476, %274
  %478 = sub i32 %477, %275
  %479 = add i32 %478, %277
  %480 = sub i32 %479, %38
  %481 = sub i32 %480, %51
  %482 = add i32 %481, %58
  %483 = sub i32 %482, %85
  %484 = add i32 %483, %89
  %485 = sub i32 %484, %103
  %486 = sub i32 %485, %106
  %487 = add i32 %486, %120
  %488 = sub i32 %487, %121
  %489 = sub i32 %488, %130
  %490 = add i32 %489, %140
  %491 = add i32 %490, %142
  %492 = sub i32 %491, %147
  %493 = sub i32 %492, %149
  %494 = sub i32 %493, %162
  %495 = sub i32 %494, %177
  %496 = sub i32 %495, %183
  %497 = add i32 %496, %184
  %498 = sub i32 %497, %188
  %499 = sub i32 %498, %198
  %500 = sub i32 %499, %201
  %501 = add i32 %500, %208
  %502 = sub i32 %501, %211
  %503 = sub i32 %502, %217
  %504 = sub i32 %503, %224
  %505 = add i32 %504, %232
  %506 = sub i32 %505, %237
  %507 = sub i32 %506, %239
  %508 = sub i32 %507, %243
  %509 = sub i32 %508, %246
  %510 = add i32 %509, %247
  %511 = sub i32 %510, %250
  %512 = sub i32 %511, %256
  %513 = add i32 %512, %261
  %514 = sub i32 %513, %266
  %515 = sub i32 %514, %272
  %516 = add i32 %515, %279
  %517 = add i32 %516, %281
  %518 = add i32 %517, %283
  %519 = add i32 %518, %285
  %520 = add i32 %519, %287
  %521 = add i32 %520, %288
  %522 = add i32 %521, %290
  %523 = add i32 %522, %291
  %524 = sub i32 %523, %137
  %525 = sub i32 %524, %195
  %526 = add i32 %525, %302
  %527 = add i32 %526, %307
  %528 = add i32 %527, %297
  %529 = add i32 %528, %335
  %530 = icmp eq i32 %13, %529
  %531 = select i1 %530, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %532 = tail call i32 @puts(i8* nonnull dereferenceable(1) %531)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
