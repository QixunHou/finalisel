digraph "DFG for'crackme' function" {
	Node0xbce180[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0xbce1f0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0xbce260[shape=record, label="  %7 = sub i32 %6, %0"];
	Node0xbce2d0[shape=record, label="  %8 = and i32 %5, %1"];
	Node0xbce340[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0xbce3b0[shape=record, label="  %10 = and i32 %2, %1"];
	Node0xbce420[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xbce4c0[shape=record, label="  %12 = shl i32 %5, 1"];
	Node0xbce560[shape=record, label="  %13 = shl i32 %8, 2"];
	Node0xbce5d0[shape=record, label="  %14 = xor i32 %3, %0"];
	Node0xbce640[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0xbce6b0[shape=record, label="  %16 = and i32 %15, %3"];
	Node0xbce720[shape=record, label="  %17 = or i32 %3, %0"];
	Node0xbce790[shape=record, label="  %18 = and i32 %3, %0"];
	Node0xbce800[shape=record, label="  %19 = or i32 %15, %3"];
	Node0xbce8a0[shape=record, label="  %20 = mul i32 %19, 5"];
	Node0xbce910[shape=record, label="  %21 = xor i32 %3, -1"];
	Node0xbce980[shape=record, label="  %22 = shl i32 %17, 2"];
	Node0xbcea20[shape=record, label="  %23 = xor i32 %22, -4"];
	Node0xbcea90[shape=record, label="  %24 = shl i32 %16, 2"];
	Node0xbceb00[shape=record, label="  %25 = shl i32 %18, 2"];
	Node0xbceb70[shape=record, label="  %26 = shl i32 %9, 1"];
	Node0xbcebe0[shape=record, label="  %27 = sub i32 1, %1"];
	Node0xbcec50[shape=record, label="  %28 = sub i32 %27, %1"];
	Node0xbcecc0[shape=record, label="  %29 = add i32 %28, %2"];
	Node0xbced30[shape=record, label="  %30 = add i32 %29, %8"];
	Node0xbceda0[shape=record, label="  %31 = sub i32 %30, %9"];
	Node0xbcee10[shape=record, label="  %32 = add i32 %31, %11"];
	Node0xbcf090[shape=record, label="  %33 = sub i32 %32, %12"];
	Node0xbcf100[shape=record, label="  %34 = add i32 %33, %6"];
	Node0xbcf170[shape=record, label="  %35 = add i32 %34, %21"];
	Node0xbcf1e0[shape=record, label="  %36 = add i32 %35, %13"];
	Node0xbcf250[shape=record, label="  %37 = add i32 %36, %14"];
	Node0xbcf2c0[shape=record, label="  %38 = add i32 %37, %16"];
	Node0xbcf330[shape=record, label="  %39 = sub i32 %38, %17"];
	Node0xbcf3a0[shape=record, label="  %40 = add i32 %39, %18"];
	Node0xbcf410[shape=record, label="  %41 = add i32 %40, %20"];
	Node0xbcf480[shape=record, label="  %42 = sub i32 %41, %24"];
	Node0xbcf4f0[shape=record, label="  %43 = sub i32 %42, %25"];
	Node0xbcf560[shape=record, label="  %44 = sub i32 %43, %26"];
	Node0xbcf5d0[shape=record, label="  %45 = sub i32 %44, %23"];
	Node0xbcf640[shape=record, label="  %46 = icmp eq i32 %7, %45"];
	Node0xb6e268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbcfae0[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0xbcfb30[shape=record, label="  ret void"];
	Node0xbce180 -> Node0xbce1f0;
	Node0xbce1f0 -> Node0xbce260;
	Node0xbce260 -> Node0xbce2d0;
	Node0xbce2d0 -> Node0xbce340;
	Node0xbce340 -> Node0xbce3b0;
	Node0xbce3b0 -> Node0xbce420;
	Node0xbce420 -> Node0xbce4c0;
	Node0xbce4c0 -> Node0xbce560;
	Node0xbce560 -> Node0xbce5d0;
	Node0xbce5d0 -> Node0xbce640;
	Node0xbce640 -> Node0xbce6b0;
	Node0xbce6b0 -> Node0xbce720;
	Node0xbce720 -> Node0xbce790;
	Node0xbce790 -> Node0xbce800;
	Node0xbce800 -> Node0xbce8a0;
	Node0xbce8a0 -> Node0xbce910;
	Node0xbce910 -> Node0xbce980;
	Node0xbce980 -> Node0xbcea20;
	Node0xbcea20 -> Node0xbcea90;
	Node0xbcea90 -> Node0xbceb00;
	Node0xbceb00 -> Node0xbceb70;
	Node0xbceb70 -> Node0xbcebe0;
	Node0xbcebe0 -> Node0xbcec50;
	Node0xbcec50 -> Node0xbcecc0;
	Node0xbcecc0 -> Node0xbced30;
	Node0xbced30 -> Node0xbceda0;
	Node0xbceda0 -> Node0xbcee10;
	Node0xbcee10 -> Node0xbcf090;
	Node0xbcf090 -> Node0xbcf100;
	Node0xbcf100 -> Node0xbcf170;
	Node0xbcf170 -> Node0xbcf1e0;
	Node0xbcf1e0 -> Node0xbcf250;
	Node0xbcf250 -> Node0xbcf2c0;
	Node0xbcf2c0 -> Node0xbcf330;
	Node0xbcf330 -> Node0xbcf3a0;
	Node0xbcf3a0 -> Node0xbcf410;
	Node0xbcf410 -> Node0xbcf480;
	Node0xbcf480 -> Node0xbcf4f0;
	Node0xbcf4f0 -> Node0xbcf560;
	Node0xbcf560 -> Node0xbcf5d0;
	Node0xbcf5d0 -> Node0xbcf640;
	Node0xbcf640 -> Node0xb6e268;
	Node0xb6e268 -> Node0xbcfae0;
	Node0xbcfae0 -> Node0xbcfb30;
edge [color=red]
	Node0xbce180 -> Node0xbce1f0;
	Node0xbce1f0 -> Node0xbce260;
	Node0xbce180 -> Node0xbce2d0;
	Node0xbce3b0 -> Node0xbce420;
	Node0xbce180 -> Node0xbce4c0;
	Node0xbce2d0 -> Node0xbce560;
	Node0xbce640 -> Node0xbce6b0;
	Node0xbce640 -> Node0xbce800;
	Node0xbce800 -> Node0xbce8a0;
	Node0xbce720 -> Node0xbce980;
	Node0xbce980 -> Node0xbcea20;
	Node0xbce6b0 -> Node0xbcea90;
	Node0xbce790 -> Node0xbceb00;
	Node0xbce340 -> Node0xbceb70;
	Node0xbcebe0 -> Node0xbcec50;
	Node0xbcec50 -> Node0xbcecc0;
	Node0xbcecc0 -> Node0xbced30;
	Node0xbce2d0 -> Node0xbced30;
	Node0xbced30 -> Node0xbceda0;
	Node0xbce340 -> Node0xbceda0;
	Node0xbceda0 -> Node0xbcee10;
	Node0xbce420 -> Node0xbcee10;
	Node0xbcee10 -> Node0xbcf090;
	Node0xbce4c0 -> Node0xbcf090;
	Node0xbcf090 -> Node0xbcf100;
	Node0xbce1f0 -> Node0xbcf100;
	Node0xbcf100 -> Node0xbcf170;
	Node0xbce910 -> Node0xbcf170;
	Node0xbcf170 -> Node0xbcf1e0;
	Node0xbce560 -> Node0xbcf1e0;
	Node0xbcf1e0 -> Node0xbcf250;
	Node0xbce5d0 -> Node0xbcf250;
	Node0xbcf250 -> Node0xbcf2c0;
	Node0xbce6b0 -> Node0xbcf2c0;
	Node0xbcf2c0 -> Node0xbcf330;
	Node0xbce720 -> Node0xbcf330;
	Node0xbcf330 -> Node0xbcf3a0;
	Node0xbce790 -> Node0xbcf3a0;
	Node0xbcf3a0 -> Node0xbcf410;
	Node0xbce8a0 -> Node0xbcf410;
	Node0xbcf410 -> Node0xbcf480;
	Node0xbcea90 -> Node0xbcf480;
	Node0xbcf480 -> Node0xbcf4f0;
	Node0xbceb00 -> Node0xbcf4f0;
	Node0xbcf4f0 -> Node0xbcf560;
	Node0xbceb70 -> Node0xbcf560;
	Node0xbcf560 -> Node0xbcf5d0;
	Node0xbcea20 -> Node0xbcf5d0;
	Node0xbce260 -> Node0xbcf640;
	Node0xbcf5d0 -> Node0xbcf640;
	Node0xbcf640 -> Node0xb6e268;
	Node0xb6e268 -> Node0xbcfae0;
}
