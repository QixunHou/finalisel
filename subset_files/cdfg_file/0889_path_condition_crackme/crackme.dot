digraph "DFG for'crackme' function" {
	Node0x101bc90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x101bd00[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x101bdc0[shape=record, label="  %5 = sub i32 -2, %4"];
	Node0x101be30[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x101bea0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x101bf10[shape=record, label="  %8 = mul i32 %7, -2"];
	Node0x101bfb0[shape=record, label="  %9 = shl i32 %3, 1"];
	Node0x101c020[shape=record, label="  %10 = shl i32 %0, 1"];
	Node0x101c090[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x101c100[shape=record, label="  %12 = xor i32 %3, %0"];
	Node0x101c170[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x101c1e0[shape=record, label="  %14 = or i32 %3, %0"];
	Node0x101c250[shape=record, label="  %15 = xor i32 %13, -1"];
	Node0x101c2f0[shape=record, label="  %16 = mul i32 %15, 6"];
	Node0x101c390[shape=record, label="  %17 = shl i32 %14, 3"];
	Node0x101c430[shape=record, label="  %18 = xor i32 %17, -8"];
	Node0x101c4d0[shape=record, label="  %19 = mul i32 %4, 7"];
	Node0x101c570[shape=record, label="  %20 = shl i32 %6, 2"];
	Node0x101c5e0[shape=record, label="  %21 = add i32 %10, %1"];
	Node0x101c650[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x101c6c0[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x101c730[shape=record, label="  %24 = sub i32 %12, %23"];
	Node0x101c7a0[shape=record, label="  %25 = sub i32 %24, %13"];
	Node0x101c810[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x101c880[shape=record, label="  %27 = add i32 %26, %8"];
	Node0x101c8f0[shape=record, label="  %28 = add i32 %27, %16"];
	Node0x101c960[shape=record, label="  %29 = add i32 %28, %19"];
	Node0x101c9d0[shape=record, label="  %30 = add i32 %29, %20"];
	Node0x101ca40[shape=record, label="  %31 = add i32 %30, %18"];
	Node0x101cab0[shape=record, label="  %32 = icmp eq i32 %5, %31"];
	Node0xfbc268[shape=record, label="  %33 = select i1 %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x101d160[shape=record, label="  %34 = tail call i32 @puts(i8* nonnull dereferenceable(1) %33)"];
	Node0x101d1b0[shape=record, label="  ret void"];
	Node0x101bc90 -> Node0x101bd00;
	Node0x101bd00 -> Node0x101bdc0;
	Node0x101bdc0 -> Node0x101be30;
	Node0x101be30 -> Node0x101bea0;
	Node0x101bea0 -> Node0x101bf10;
	Node0x101bf10 -> Node0x101bfb0;
	Node0x101bfb0 -> Node0x101c020;
	Node0x101c020 -> Node0x101c090;
	Node0x101c090 -> Node0x101c100;
	Node0x101c100 -> Node0x101c170;
	Node0x101c170 -> Node0x101c1e0;
	Node0x101c1e0 -> Node0x101c250;
	Node0x101c250 -> Node0x101c2f0;
	Node0x101c2f0 -> Node0x101c390;
	Node0x101c390 -> Node0x101c430;
	Node0x101c430 -> Node0x101c4d0;
	Node0x101c4d0 -> Node0x101c570;
	Node0x101c570 -> Node0x101c5e0;
	Node0x101c5e0 -> Node0x101c650;
	Node0x101c650 -> Node0x101c6c0;
	Node0x101c6c0 -> Node0x101c730;
	Node0x101c730 -> Node0x101c7a0;
	Node0x101c7a0 -> Node0x101c810;
	Node0x101c810 -> Node0x101c880;
	Node0x101c880 -> Node0x101c8f0;
	Node0x101c8f0 -> Node0x101c960;
	Node0x101c960 -> Node0x101c9d0;
	Node0x101c9d0 -> Node0x101ca40;
	Node0x101ca40 -> Node0x101cab0;
	Node0x101cab0 -> Node0xfbc268;
	Node0xfbc268 -> Node0x101d160;
	Node0x101d160 -> Node0x101d1b0;
edge [color=red]
	Node0x101bc90 -> Node0x101bd00;
	Node0x101bd00 -> Node0x101bdc0;
	Node0x101be30 -> Node0x101bea0;
	Node0x101bea0 -> Node0x101bf10;
	Node0x101bc90 -> Node0x101bfb0;
	Node0x101c020 -> Node0x101c090;
	Node0x101bc90 -> Node0x101c100;
	Node0x101bc90 -> Node0x101c1e0;
	Node0x101c170 -> Node0x101c250;
	Node0x101c250 -> Node0x101c2f0;
	Node0x101c1e0 -> Node0x101c390;
	Node0x101c390 -> Node0x101c430;
	Node0x101bd00 -> Node0x101c4d0;
	Node0x101be30 -> Node0x101c570;
	Node0x101c020 -> Node0x101c5e0;
	Node0x101c5e0 -> Node0x101c650;
	Node0x101bfb0 -> Node0x101c650;
	Node0x101c650 -> Node0x101c6c0;
	Node0x101c090 -> Node0x101c6c0;
	Node0x101c100 -> Node0x101c730;
	Node0x101c6c0 -> Node0x101c730;
	Node0x101c730 -> Node0x101c7a0;
	Node0x101c170 -> Node0x101c7a0;
	Node0x101c7a0 -> Node0x101c810;
	Node0x101c1e0 -> Node0x101c810;
	Node0x101c810 -> Node0x101c880;
	Node0x101bf10 -> Node0x101c880;
	Node0x101c880 -> Node0x101c8f0;
	Node0x101c2f0 -> Node0x101c8f0;
	Node0x101c8f0 -> Node0x101c960;
	Node0x101c4d0 -> Node0x101c960;
	Node0x101c960 -> Node0x101c9d0;
	Node0x101c570 -> Node0x101c9d0;
	Node0x101c9d0 -> Node0x101ca40;
	Node0x101c430 -> Node0x101ca40;
	Node0x101bdc0 -> Node0x101cab0;
	Node0x101ca40 -> Node0x101cab0;
	Node0x101cab0 -> Node0xfbc268;
	Node0xfbc268 -> Node0x101d160;
}
