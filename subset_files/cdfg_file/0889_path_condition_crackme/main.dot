digraph "DFG for'main' function" {
	Node0x101d378[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x101d3f8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x101d488[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x101d8e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x101d9c8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x101dae8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x101dd20[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x101ddd8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x101ed48[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x101f3d0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x101f440[shape=record, label="  %9 = and i32 %6, %8"];
	Node0x101f4b0[shape=record, label="  %10 = sub i32 -2, %9"];
	Node0x101f520[shape=record, label="  %11 = and i32 %7, %6"];
	Node0x101f590[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x101f600[shape=record, label="  %13 = shl i32 %6, 1"];
	Node0x101f670[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x101f6e0[shape=record, label="  %15 = xor i32 %6, %8"];
	Node0x101f750[shape=record, label="  %16 = or i32 %7, %6"];
	Node0x101f7c0[shape=record, label="  %17 = or i32 %6, %8"];
	Node0x101f830[shape=record, label="  %18 = xor i32 %16, -1"];
	Node0x101f8a0[shape=record, label="  %19 = mul i32 %18, 6"];
	Node0x101f910[shape=record, label="  %20 = shl i32 %17, 3"];
	Node0x101f980[shape=record, label="  %21 = xor i32 %20, -8"];
	Node0x101f9f0[shape=record, label="  %22 = mul i32 %9, 7"];
	Node0x101fa60[shape=record, label="  %23 = shl i32 %11, 2"];
	Node0x101fad0[shape=record, label="  %24 = add i32 %12, %8"];
	Node0x101fb40[shape=record, label="  %25 = mul i32 %24, -2"];
	Node0x101fbb0[shape=record, label="  %26 = add i32 %13, %7"];
	Node0x101fc20[shape=record, label="  %27 = add i32 %26, %14"];
	Node0x101fc90[shape=record, label="  %28 = sub i32 %15, %27"];
	Node0x101fd00[shape=record, label="  %29 = sub i32 %28, %16"];
	Node0x101fd70[shape=record, label="  %30 = add i32 %29, %17"];
	Node0x101fde0[shape=record, label="  %31 = add i32 %30, %19"];
	Node0x101fe50[shape=record, label="  %32 = add i32 %31, %22"];
	Node0x101fec0[shape=record, label="  %33 = add i32 %32, %23"];
	Node0x101ff30[shape=record, label="  %34 = add i32 %33, %21"];
	Node0x101ffa0[shape=record, label="  %35 = add i32 %34, %25"];
	Node0x1020010[shape=record, label="  %36 = icmp eq i32 %10, %35"];
	Node0xfbd9d8[shape=record, label="  %37 = select i1 %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10200a0[shape=record, label="  %38 = call i32 @puts(i8* nonnull dereferenceable(1) %37) #5"];
	Node0x10202f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1020458[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1020518[shape=record, label="  ret i32 0"];
	Node0x101d378 -> Node0x101d3f8;
	Node0x101d3f8 -> Node0x101d488;
	Node0x101d488 -> Node0x101d8e8;
	Node0x101d8e8 -> Node0x101d9c8;
	Node0x101d9c8 -> Node0x101dae8;
	Node0x101dae8 -> Node0x101dd20;
	Node0x101dd20 -> Node0x101ddd8;
	Node0x101ddd8 -> Node0x101ed48;
	Node0x101ed48 -> Node0x101f3d0;
	Node0x101f3d0 -> Node0x101f440;
	Node0x101f440 -> Node0x101f4b0;
	Node0x101f4b0 -> Node0x101f520;
	Node0x101f520 -> Node0x101f590;
	Node0x101f590 -> Node0x101f600;
	Node0x101f600 -> Node0x101f670;
	Node0x101f670 -> Node0x101f6e0;
	Node0x101f6e0 -> Node0x101f750;
	Node0x101f750 -> Node0x101f7c0;
	Node0x101f7c0 -> Node0x101f830;
	Node0x101f830 -> Node0x101f8a0;
	Node0x101f8a0 -> Node0x101f910;
	Node0x101f910 -> Node0x101f980;
	Node0x101f980 -> Node0x101f9f0;
	Node0x101f9f0 -> Node0x101fa60;
	Node0x101fa60 -> Node0x101fad0;
	Node0x101fad0 -> Node0x101fb40;
	Node0x101fb40 -> Node0x101fbb0;
	Node0x101fbb0 -> Node0x101fc20;
	Node0x101fc20 -> Node0x101fc90;
	Node0x101fc90 -> Node0x101fd00;
	Node0x101fd00 -> Node0x101fd70;
	Node0x101fd70 -> Node0x101fde0;
	Node0x101fde0 -> Node0x101fe50;
	Node0x101fe50 -> Node0x101fec0;
	Node0x101fec0 -> Node0x101ff30;
	Node0x101ff30 -> Node0x101ffa0;
	Node0x101ffa0 -> Node0x1020010;
	Node0x1020010 -> Node0xfbd9d8;
	Node0xfbd9d8 -> Node0x10200a0;
	Node0x10200a0 -> Node0x10202f8;
	Node0x10202f8 -> Node0x1020458;
	Node0x1020458 -> Node0x1020518;
edge [color=red]
	Node0x101d378 -> Node0x101d488;
	Node0x101d488 -> Node0x101d8e8;
	Node0x101d3f8 -> Node0x101d9c8;
	Node0x101d9c8 -> Node0x101dae8;
	Node0x101d378 -> Node0x101dd20;
	Node0x101d3f8 -> Node0x101dd20;
	Node0x101d378 -> Node0x101ddd8;
	Node0x101d3f8 -> Node0x101ed48;
	Node0x101ed48 -> Node0x101f3d0;
	Node0x101ddd8 -> Node0x101f440;
	Node0x101f3d0 -> Node0x101f440;
	Node0x101f440 -> Node0x101f4b0;
	Node0x101ed48 -> Node0x101f520;
	Node0x101ddd8 -> Node0x101f520;
	Node0x101f520 -> Node0x101f590;
	Node0x101ddd8 -> Node0x101f600;
	Node0x101f600 -> Node0x101f670;
	Node0x101ddd8 -> Node0x101f6e0;
	Node0x101f3d0 -> Node0x101f6e0;
	Node0x101ed48 -> Node0x101f750;
	Node0x101ddd8 -> Node0x101f750;
	Node0x101ddd8 -> Node0x101f7c0;
	Node0x101f3d0 -> Node0x101f7c0;
	Node0x101f750 -> Node0x101f830;
	Node0x101f830 -> Node0x101f8a0;
	Node0x101f7c0 -> Node0x101f910;
	Node0x101f910 -> Node0x101f980;
	Node0x101f440 -> Node0x101f9f0;
	Node0x101f520 -> Node0x101fa60;
	Node0x101f590 -> Node0x101fad0;
	Node0x101f3d0 -> Node0x101fad0;
	Node0x101fad0 -> Node0x101fb40;
	Node0x101f600 -> Node0x101fbb0;
	Node0x101ed48 -> Node0x101fbb0;
	Node0x101fbb0 -> Node0x101fc20;
	Node0x101f670 -> Node0x101fc20;
	Node0x101f6e0 -> Node0x101fc90;
	Node0x101fc20 -> Node0x101fc90;
	Node0x101fc90 -> Node0x101fd00;
	Node0x101f750 -> Node0x101fd00;
	Node0x101fd00 -> Node0x101fd70;
	Node0x101f7c0 -> Node0x101fd70;
	Node0x101fd70 -> Node0x101fde0;
	Node0x101f8a0 -> Node0x101fde0;
	Node0x101fde0 -> Node0x101fe50;
	Node0x101f9f0 -> Node0x101fe50;
	Node0x101fe50 -> Node0x101fec0;
	Node0x101fa60 -> Node0x101fec0;
	Node0x101fec0 -> Node0x101ff30;
	Node0x101f980 -> Node0x101ff30;
	Node0x101ff30 -> Node0x101ffa0;
	Node0x101fb40 -> Node0x101ffa0;
	Node0x101f4b0 -> Node0x1020010;
	Node0x101ffa0 -> Node0x1020010;
	Node0x1020010 -> Node0xfbd9d8;
	Node0xfbd9d8 -> Node0x10200a0;
	Node0x101d9c8 -> Node0x10202f8;
	Node0x101d488 -> Node0x1020458;
}
