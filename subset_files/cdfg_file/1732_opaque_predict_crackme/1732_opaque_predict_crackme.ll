; ModuleID = '../.././c_source_file/1732_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1732_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = and i32 %10, %7
  %12 = add i32 %11, %6
  %13 = and i32 %2, %0
  %14 = xor i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = or i32 %13, %15
  %17 = xor i32 %13, -1
  %18 = and i32 %14, %17
  %19 = or i32 %8, %0
  %20 = xor i32 %19, -1
  %21 = add i32 %19, 1
  %22 = or i32 %15, %2
  %23 = xor i32 %13, %1
  %24 = and i32 %15, %2
  %25 = or i32 %8, %1
  %26 = xor i32 %25, -1
  %27 = or i32 %13, %4
  %28 = xor i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %29, %4
  %31 = and i32 %2, %1
  %32 = or i32 %31, %5
  %33 = xor i32 %13, %10
  %34 = or i32 %14, %20
  %35 = or i32 %2, %1
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %0
  %38 = shl i32 %37, 1
  %39 = xor i32 %31, -1
  %40 = and i32 %39, %7
  %41 = and i32 %19, %14
  %42 = shl i32 %41, 1
  %43 = and i32 %28, %6
  %44 = shl i32 %43, 2
  %45 = and i32 %35, %0
  %46 = shl i32 %45, 1
  %47 = and i32 %17, %1
  %48 = or i32 %4, %0
  %49 = xor i32 %48, -1
  %50 = add i32 %48, 1
  %51 = or i32 %20, %1
  %52 = or i32 %29, %49
  %53 = shl i32 %52, 1
  %54 = and i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = xor i32 %2, %1
  %57 = xor i32 %56, -1
  %58 = and i32 %57, %55
  %59 = and i32 %8, %15
  %60 = and i32 %8, %0
  %61 = xor i32 %60, -1
  %62 = and i32 %61, %4
  %63 = or i32 %20, %4
  %64 = or i32 %1, %0
  %65 = xor i32 %64, -1
  %66 = xor i32 %65, %2
  %67 = and i32 %28, %48
  %68 = or i32 %35, %7
  %69 = and i32 %61, %15
  %70 = and i32 %31, %0
  %71 = xor i32 %35, %0
  %72 = or i32 %70, %71
  %73 = xor i32 %35, %54
  %74 = shl i32 %73, 1
  %75 = or i32 %5, %57
  %76 = xor i32 %56, %0
  %77 = xor i32 %70, %76
  %78 = shl i32 %77, 1
  %79 = and i32 %56, %55
  %80 = shl i32 %79, 1
  %81 = or i32 %56, %49
  %82 = or i32 %2, %0
  %83 = and i32 %82, %15
  %84 = xor i32 %13, %64
  %85 = xor i32 %5, %39
  %86 = xor i32 %10, %0
  %87 = or i32 %9, %7
  %88 = or i32 %5, %2
  %89 = and i32 %4, %2
  %90 = and i32 %89, %7
  %91 = or i32 %4, %2
  %92 = and i32 %91, %0
  %93 = or i32 %90, %92
  %94 = or i32 %28, %65
  %95 = shl i32 %94, 2
  %96 = and i32 %29, %6
  %97 = or i32 %13, %9
  %98 = or i32 %13, %49
  %99 = xor i32 %36, %0
  %100 = or i32 %65, %2
  %101 = or i32 %28, %14
  %102 = or i32 %28, %15
  %103 = and i32 %89, %0
  %104 = or i32 %56, %0
  %105 = xor i32 %104, -1
  %106 = or i32 %103, %105
  %107 = xor i32 %70, -1
  %108 = xor i32 %71, %107
  %109 = and i32 %6, %2
  %110 = and i32 %29, %15
  %111 = xor i32 %82, %1
  %112 = shl i32 %111, 1
  %113 = xor i32 %57, %0
  %114 = and i32 %35, %7
  %115 = xor i32 %114, %107
  %116 = and i32 %56, %6
  %117 = and i32 %14, %61
  %118 = or i32 %8, %49
  %119 = or i32 %54, %2
  %120 = or i32 %13, %1
  %121 = or i32 %54, %57
  %122 = shl i32 %121, 1
  %123 = or i32 %54, %8
  %124 = shl i32 %17, 1
  %125 = xor i32 %82, -1
  %126 = or i32 %125, %15
  %127 = and i32 %57, %6
  %128 = and i32 %17, %4
  %129 = or i32 %57, %65
  %130 = shl i32 %129, 1
  %131 = and i32 %10, %0
  %132 = and i32 %19, %15
  %133 = shl i32 %29, 1
  %134 = and i32 %14, %29
  %135 = shl i32 %60, 2
  %136 = xor i32 %54, %2
  %137 = and i32 %61, %1
  %138 = xor i32 %6, %2
  %139 = shl i32 %138, 1
  %140 = xor i32 %91, %0
  %141 = or i32 %103, %140
  %142 = and i32 %64, %2
  %143 = or i32 %20, %15
  %144 = xor i32 %5, %10
  %145 = or i32 %56, %65
  %146 = xor i32 %92, -1
  %147 = xor i32 %90, %146
  %148 = or i32 %35, %0
  %149 = or i32 %56, %5
  %150 = and i32 %56, %7
  %151 = xor i32 %60, %39
  %152 = or i32 %54, %29
  %153 = or i32 %60, %1
  %154 = shl i32 %153, 1
  %155 = or i32 %56, %7
  %156 = and i32 %28, %4
  %157 = xor i32 %48, %2
  %158 = or i32 %60, %26
  %159 = or i32 %26, %0
  %160 = or i32 %13, %36
  %161 = xor i32 %5, %2
  %162 = and i32 %17, %15
  %163 = and i32 %55, %2
  %164 = and i32 %57, %0
  %165 = or i32 %60, %31
  %166 = shl i32 %165, 1
  %167 = and i32 %82, %14
  %168 = or i32 %125, %4
  %169 = xor i32 %150, %107
  %170 = and i32 %28, %55
  %171 = xor i32 %125, %1
  %172 = or i32 %49, %2
  %173 = and i32 %31, %7
  %174 = and i32 %56, %0
  %175 = or i32 %173, %174
  %176 = or i32 %28, %5
  %177 = or i32 %54, %125
  %178 = or i32 %36, %7
  %179 = or i32 %57, %49
  %180 = xor i32 %76, -1
  %181 = xor i32 %103, %180
  %182 = and i32 %25, %0
  %183 = xor i32 %20, %1
  %184 = xor i32 %64, %2
  %185 = shl i32 %184, 1
  %186 = xor i32 %60, %25
  %187 = shl i32 %174, 1
  %188 = xor i32 %140, -1
  %189 = xor i32 %103, %188
  %190 = and i32 %28, %14
  %191 = or i32 %70, %180
  %192 = or i32 %28, %49
  %193 = or i32 %103, %76
  %194 = or i32 %70, %114
  %195 = and i32 %64, %57
  %196 = add i32 %35, 1
  %197 = or i32 %25, %0
  %198 = or i32 %56, %54
  %199 = and i32 %8, %6
  %200 = shl i32 %199, 1
  %201 = or i32 %28, %1
  %202 = or i32 %28, %54
  %203 = or i32 %14, %8
  %204 = or i32 %60, %14
  %205 = xor i32 %61, %1
  %206 = xor i32 %103, %104
  %207 = or i32 %60, %15
  %208 = or i32 %13, %14
  %209 = xor i32 %13, %48
  %210 = and i32 %48, %2
  %211 = xor i32 %9, %0
  %212 = or i32 %125, %1
  %213 = and i32 %48, %29
  %214 = or i32 %57, %7
  %215 = shl i32 %214, 1
  %216 = and i32 %29, %1
  %217 = and i32 %19, %4
  %218 = and i32 %25, %7
  %219 = or i32 %29, %1
  %220 = or i32 %39, %0
  %221 = and i32 %56, %48
  %222 = shl i32 %221, 1
  %223 = xor i32 %55, %2
  %224 = xor i32 %60, %1
  %225 = xor i32 %19, %1
  %226 = shl i32 %82, 1
  %227 = xor i32 %174, -1
  %228 = xor i32 %173, %227
  %229 = or i32 %26, %7
  %230 = xor i32 %17, %1
  %231 = or i32 %9, %0
  %232 = or i32 %54, %26
  %233 = or i32 %14, %29
  %234 = and i32 %64, %8
  %235 = and i32 %39, %0
  %236 = xor i32 %31, %7
  %237 = and i32 %28, %15
  %238 = xor i32 %26, %0
  %239 = or i32 %10, %7
  %240 = or i32 %5, %29
  %241 = shl i32 %240, 1
  %242 = or i32 %28, %4
  %243 = and i32 %57, %7
  %244 = and i32 %48, %57
  %245 = and i32 %82, %1
  %246 = or i32 %9, %5
  %247 = or i32 %29, %15
  %248 = xor i32 %25, %0
  %249 = xor i32 %49, %2
  %250 = or i32 %10, %0
  %251 = and i32 %64, %29
  %252 = xor i32 %155, -1
  %253 = or i32 %90, %252
  %254 = or i32 %25, %7
  %255 = xor i32 %13, %35
  %256 = or i32 %5, %8
  %257 = xor i32 %82, %54
  %258 = and i32 %19, %1
  %259 = or i32 %39, %7
  %260 = and i32 %91, %7
  %261 = or i32 %103, %260
  %262 = or i32 %8, %15
  %263 = and i32 %29, %55
  %264 = xor i32 %19, %54
  %265 = xor i32 %90, %155
  %266 = or i32 %54, %20
  %267 = or i32 %173, %45
  %268 = xor i32 %25, %54
  %269 = and i32 %14, %8
  %270 = or i32 %29, %65
  %271 = xor i32 %39, %0
  %272 = or i32 %57, %0
  %273 = and i32 %82, %4
  %274 = shl i32 %273, 1
  %275 = and i32 %36, %7
  %276 = mul i32 %275, -20
  %277 = and i32 %9, %7
  %278 = mul i32 %277, 7
  %279 = and i32 %36, %0
  %280 = mul i32 %279, 15
  %281 = and i32 %9, %0
  %282 = and i32 %26, %7
  %283 = mul i32 %282, 9
  %284 = and i32 %26, %0
  %285 = shl i32 %284, 1
  %286 = mul i32 %70, -22
  %287 = add i32 %172, -1
  %288 = add i32 %287, %161
  %289 = add i32 %288, %123
  %290 = add i32 %289, %100
  %291 = add i32 %290, %224
  %292 = add i32 %291, %211
  %293 = add i32 %292, %205
  %294 = add i32 %293, %204
  %295 = add i32 %294, %198
  %296 = add i32 %295, %177
  %297 = add i32 %296, %171
  %298 = add i32 %297, %167
  %299 = add i32 %298, %162
  %300 = add i32 %299, %160
  %301 = add i32 %300, %145
  %302 = add i32 %301, %144
  %303 = add i32 %302, %127
  %304 = add i32 %303, %126
  %305 = add i32 %304, %68
  %306 = add i32 %305, %23
  %307 = add i32 %306, %141
  %308 = add i32 %307, %261
  %309 = shl i32 %308, 1
  %310 = add i32 %281, %21
  %311 = add i32 %310, %173
  %312 = sub i32 %311, %209
  %313 = add i32 %312, %113
  %314 = sub i32 %313, %51
  %315 = mul i32 %314, 3
  %316 = add i32 %136, %223
  %317 = sub i32 %316, %156
  %318 = sub i32 %317, %233
  %319 = sub i32 %318, %85
  %320 = mul i32 %319, 5
  %321 = add i32 %116, %22
  %322 = add i32 %321, %271
  %323 = shl i32 %322, 2
  %324 = sub i32 %50, %0
  %325 = add i32 %324, %48
  %326 = add i32 %325, %2
  %327 = add i32 %326, 2
  %328 = sub i32 %327, %24
  %329 = add i32 %328, %59
  %330 = sub i32 %329, %66
  %331 = add i32 %330, %88
  %332 = add i32 %331, %109
  %333 = sub i32 %332, %118
  %334 = sub i32 %333, %119
  %335 = add i32 %334, %142
  %336 = add i32 %335, %61
  %337 = sub i32 %336, %13
  %338 = sub i32 %337, %35
  %339 = add i32 %338, %157
  %340 = sub i32 %339, %163
  %341 = add i32 %340, %10
  %342 = add i32 %341, %57
  %343 = add i32 %342, %196
  %344 = add i32 %343, %19
  %345 = sub i32 %344, %203
  %346 = add i32 %345, %210
  %347 = add i32 %346, %28
  %348 = add i32 %347, %234
  %349 = add i32 %348, %249
  %350 = add i32 %349, %39
  %351 = add i32 %350, %256
  %352 = add i32 %351, %262
  %353 = sub i32 %352, %269
  %354 = sub i32 %353, %18
  %355 = sub i32 %354, %16
  %356 = sub i32 %355, %27
  %357 = add i32 %356, %30
  %358 = sub i32 %357, %32
  %359 = add i32 %358, %33
  %360 = add i32 %359, %34
  %361 = add i32 %360, %40
  %362 = sub i32 %361, %47
  %363 = add i32 %362, %58
  %364 = sub i32 %363, %62
  %365 = sub i32 %364, %63
  %366 = add i32 %365, %67
  %367 = sub i32 %366, %69
  %368 = add i32 %367, %75
  %369 = add i32 %368, %81
  %370 = add i32 %369, %83
  %371 = add i32 %370, %84
  %372 = add i32 %371, %86
  %373 = sub i32 %372, %87
  %374 = add i32 %373, %96
  %375 = add i32 %374, %97
  %376 = sub i32 %375, %98
  %377 = add i32 %376, %99
  %378 = sub i32 %377, %101
  %379 = sub i32 %378, %102
  %380 = add i32 %379, %110
  %381 = sub i32 %380, %117
  %382 = sub i32 %381, %120
  %383 = sub i32 %382, %124
  %384 = add i32 %383, %128
  %385 = add i32 %384, %131
  %386 = sub i32 %385, %132
  %387 = sub i32 %386, %133
  %388 = sub i32 %387, %134
  %389 = sub i32 %388, %135
  %390 = add i32 %389, %137
  %391 = sub i32 %390, %139
  %392 = sub i32 %391, %143
  %393 = sub i32 %392, %148
  %394 = add i32 %393, %149
  %395 = sub i32 %394, %150
  %396 = sub i32 %395, %151
  %397 = add i32 %396, %152
  %398 = sub i32 %397, %155
  %399 = add i32 %398, %158
  %400 = sub i32 %399, %159
  %401 = add i32 %400, %164
  %402 = add i32 %401, %168
  %403 = sub i32 %402, %170
  %404 = add i32 %403, %176
  %405 = sub i32 %404, %178
  %406 = add i32 %405, %179
  %407 = add i32 %406, %182
  %408 = sub i32 %407, %183
  %409 = sub i32 %408, %185
  %410 = add i32 %409, %76
  %411 = add i32 %410, %186
  %412 = sub i32 %411, %190
  %413 = sub i32 %412, %192
  %414 = add i32 %413, %195
  %415 = add i32 %414, %197
  %416 = sub i32 %415, %200
  %417 = add i32 %416, %201
  %418 = add i32 %417, %202
  %419 = sub i32 %418, %71
  %420 = add i32 %419, %104
  %421 = add i32 %420, %207
  %422 = sub i32 %421, %208
  %423 = add i32 %422, %212
  %424 = sub i32 %423, %213
  %425 = sub i32 %424, %216
  %426 = add i32 %425, %217
  %427 = add i32 %426, %218
  %428 = add i32 %427, %219
  %429 = add i32 %428, %220
  %430 = sub i32 %429, %225
  %431 = sub i32 %430, %226
  %432 = add i32 %431, %229
  %433 = add i32 %432, %230
  %434 = sub i32 %433, %231
  %435 = sub i32 %434, %232
  %436 = sub i32 %435, %235
  %437 = add i32 %436, %236
  %438 = add i32 %437, %237
  %439 = sub i32 %438, %238
  %440 = sub i32 %439, %239
  %441 = sub i32 %440, %242
  %442 = add i32 %441, %243
  %443 = add i32 %442, %244
  %444 = add i32 %443, %245
  %445 = sub i32 %444, %246
  %446 = sub i32 %445, %247
  %447 = sub i32 %446, %248
  %448 = sub i32 %447, %250
  %449 = add i32 %448, %251
  %450 = add i32 %449, %254
  %451 = sub i32 %450, %255
  %452 = sub i32 %451, %257
  %453 = sub i32 %452, %258
  %454 = add i32 %453, %259
  %455 = sub i32 %454, %263
  %456 = add i32 %455, %264
  %457 = sub i32 %456, %266
  %458 = add i32 %457, %268
  %459 = sub i32 %458, %270
  %460 = add i32 %459, %272
  %461 = sub i32 %460, %38
  %462 = sub i32 %461, %42
  %463 = sub i32 %462, %44
  %464 = sub i32 %463, %46
  %465 = sub i32 %464, %53
  %466 = sub i32 %465, %72
  %467 = sub i32 %466, %74
  %468 = sub i32 %467, %80
  %469 = add i32 %468, %93
  %470 = sub i32 %469, %95
  %471 = add i32 %470, %106
  %472 = add i32 %471, %108
  %473 = sub i32 %472, %112
  %474 = sub i32 %473, %115
  %475 = sub i32 %474, %122
  %476 = sub i32 %475, %130
  %477 = add i32 %476, %147
  %478 = sub i32 %477, %154
  %479 = sub i32 %478, %166
  %480 = add i32 %479, %169
  %481 = sub i32 %480, %175
  %482 = sub i32 %481, %181
  %483 = sub i32 %482, %187
  %484 = add i32 %483, %189
  %485 = sub i32 %484, %191
  %486 = sub i32 %485, %193
  %487 = sub i32 %486, %194
  %488 = add i32 %487, %206
  %489 = sub i32 %488, %215
  %490 = sub i32 %489, %222
  %491 = sub i32 %490, %228
  %492 = sub i32 %491, %241
  %493 = add i32 %492, %253
  %494 = sub i32 %493, %265
  %495 = add i32 %494, %267
  %496 = sub i32 %495, %274
  %497 = add i32 %496, %276
  %498 = add i32 %497, %278
  %499 = add i32 %498, %280
  %500 = add i32 %499, %283
  %501 = sub i32 %500, %285
  %502 = add i32 %501, %286
  %503 = sub i32 %502, %78
  %504 = add i32 %503, %323
  %505 = add i32 %504, %320
  %506 = add i32 %505, %315
  %507 = add i32 %506, %309
  %508 = icmp eq i32 %12, %507
  %509 = select i1 %508, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %510 = tail call i32 @puts(i8* nonnull dereferenceable(1) %509)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
