digraph "DFG for'crackme' function" {
	Node0x1f5b940[shape=record, label="  %3 = add i32 %0, 1"];
	Node0x1f5b9e0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1f5baa0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x1f5bb10[shape=record, label="  %6 = and i32 %4, %0"];
	Node0x1f5bb80[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1f5bbf0[shape=record, label="  %8 = mul i32 %7, 3"];
	Node0x1f5bc60[shape=record, label="  %9 = sub i32 1, %0"];
	Node0x1f5bcd0[shape=record, label="  %10 = sub i32 %9, %1"];
	Node0x1f5bd40[shape=record, label="  %11 = add i32 %10, %5"];
	Node0x1f5bdb0[shape=record, label="  %12 = add i32 %11, %6"];
	Node0x1f5be20[shape=record, label="  %13 = add i32 %12, %8"];
	Node0x1f5be90[shape=record, label="  %14 = icmp eq i32 %3, %13"];
	Node0x1efc388[shape=record, label="  %15 = select i1 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f5c330[shape=record, label="  %16 = tail call i32 @puts(i8* nonnull dereferenceable(1) %15)"];
	Node0x1f5c380[shape=record, label="  ret void"];
	Node0x1f5b940 -> Node0x1f5b9e0;
	Node0x1f5b9e0 -> Node0x1f5baa0;
	Node0x1f5baa0 -> Node0x1f5bb10;
	Node0x1f5bb10 -> Node0x1f5bb80;
	Node0x1f5bb80 -> Node0x1f5bbf0;
	Node0x1f5bbf0 -> Node0x1f5bc60;
	Node0x1f5bc60 -> Node0x1f5bcd0;
	Node0x1f5bcd0 -> Node0x1f5bd40;
	Node0x1f5bd40 -> Node0x1f5bdb0;
	Node0x1f5bdb0 -> Node0x1f5be20;
	Node0x1f5be20 -> Node0x1f5be90;
	Node0x1f5be90 -> Node0x1efc388;
	Node0x1efc388 -> Node0x1f5c330;
	Node0x1f5c330 -> Node0x1f5c380;
edge [color=red]
	Node0x1f5b9e0 -> Node0x1f5bb10;
	Node0x1f5bb80 -> Node0x1f5bbf0;
	Node0x1f5bc60 -> Node0x1f5bcd0;
	Node0x1f5bcd0 -> Node0x1f5bd40;
	Node0x1f5baa0 -> Node0x1f5bd40;
	Node0x1f5bd40 -> Node0x1f5bdb0;
	Node0x1f5bb10 -> Node0x1f5bdb0;
	Node0x1f5bdb0 -> Node0x1f5be20;
	Node0x1f5bbf0 -> Node0x1f5be20;
	Node0x1f5b940 -> Node0x1f5be90;
	Node0x1f5be20 -> Node0x1f5be90;
	Node0x1f5be90 -> Node0x1efc388;
	Node0x1efc388 -> Node0x1f5c330;
}
