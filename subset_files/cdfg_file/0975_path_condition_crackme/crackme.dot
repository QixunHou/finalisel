digraph "DFG for'crackme' function" {
	Node0x1c21b20[shape=record, label="  %3 = shl i32 %0, 1"];
	Node0x1c21bc0[shape=record, label="  %4 = xor i32 %3, -2"];
	Node0x1c21c80[shape=record, label="  %5 = mul i32 %0, -2"];
	Node0x1c21cf0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x1c21d60[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1c21dd0[shape=record, label="  %8 = or i32 %7, %0"];
	Node0x1c21e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1c21eb0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1c21f20[shape=record, label="  %11 = shl i32 %6, 1"];
	Node0x1c21f90[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1c22000[shape=record, label="  %13 = xor i32 %8, -1"];
	Node0x1c22070[shape=record, label="  %14 = and i32 %7, %0"];
	Node0x1c22110[shape=record, label="  %15 = mul i32 %9, 3"];
	Node0x1c22180[shape=record, label="  %16 = sub i32 %5, %1"];
	Node0x1c221f0[shape=record, label="  %17 = add i32 %16, %6"];
	Node0x1c22260[shape=record, label="  %18 = sub i32 %17, %8"];
	Node0x1c222d0[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x1c22340[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1c223b0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x1c22420[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x1c22490[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x1c22500[shape=record, label="  %24 = icmp eq i32 %4, %23"];
	Node0x1bc2268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c229a0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1c229f0[shape=record, label="  ret void"];
	Node0x1c21b20 -> Node0x1c21bc0;
	Node0x1c21bc0 -> Node0x1c21c80;
	Node0x1c21c80 -> Node0x1c21cf0;
	Node0x1c21cf0 -> Node0x1c21d60;
	Node0x1c21d60 -> Node0x1c21dd0;
	Node0x1c21dd0 -> Node0x1c21e40;
	Node0x1c21e40 -> Node0x1c21eb0;
	Node0x1c21eb0 -> Node0x1c21f20;
	Node0x1c21f20 -> Node0x1c21f90;
	Node0x1c21f90 -> Node0x1c22000;
	Node0x1c22000 -> Node0x1c22070;
	Node0x1c22070 -> Node0x1c22110;
	Node0x1c22110 -> Node0x1c22180;
	Node0x1c22180 -> Node0x1c221f0;
	Node0x1c221f0 -> Node0x1c22260;
	Node0x1c22260 -> Node0x1c222d0;
	Node0x1c222d0 -> Node0x1c22340;
	Node0x1c22340 -> Node0x1c223b0;
	Node0x1c223b0 -> Node0x1c22420;
	Node0x1c22420 -> Node0x1c22490;
	Node0x1c22490 -> Node0x1c22500;
	Node0x1c22500 -> Node0x1bc2268;
	Node0x1bc2268 -> Node0x1c229a0;
	Node0x1c229a0 -> Node0x1c229f0;
edge [color=red]
	Node0x1c21b20 -> Node0x1c21bc0;
	Node0x1c21d60 -> Node0x1c21dd0;
	Node0x1c21e40 -> Node0x1c21eb0;
	Node0x1c21cf0 -> Node0x1c21f20;
	Node0x1c21f20 -> Node0x1c21f90;
	Node0x1c21dd0 -> Node0x1c22000;
	Node0x1c21d60 -> Node0x1c22070;
	Node0x1c21e40 -> Node0x1c22110;
	Node0x1c21c80 -> Node0x1c22180;
	Node0x1c22180 -> Node0x1c221f0;
	Node0x1c21cf0 -> Node0x1c221f0;
	Node0x1c221f0 -> Node0x1c22260;
	Node0x1c21dd0 -> Node0x1c22260;
	Node0x1c22260 -> Node0x1c222d0;
	Node0x1c21eb0 -> Node0x1c222d0;
	Node0x1c222d0 -> Node0x1c22340;
	Node0x1c22000 -> Node0x1c22340;
	Node0x1c22340 -> Node0x1c223b0;
	Node0x1c22070 -> Node0x1c223b0;
	Node0x1c223b0 -> Node0x1c22420;
	Node0x1c22110 -> Node0x1c22420;
	Node0x1c22420 -> Node0x1c22490;
	Node0x1c21f90 -> Node0x1c22490;
	Node0x1c21bc0 -> Node0x1c22500;
	Node0x1c22490 -> Node0x1c22500;
	Node0x1c22500 -> Node0x1bc2268;
	Node0x1bc2268 -> Node0x1c229a0;
}
