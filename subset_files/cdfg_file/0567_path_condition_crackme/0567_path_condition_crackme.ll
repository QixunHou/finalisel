; ModuleID = '../.././c_source_file/0567_path_condition_crackme.c'
source_filename = "../.././c_source_file/0567_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %2
  %6 = and i32 %5, %0
  %7 = or i32 %4, %2
  %8 = xor i32 %0, -1
  %9 = xor i32 %7, %8
  %10 = xor i32 %9, %6
  %11 = and i32 %4, %0
  %12 = xor i32 %11, -1
  %13 = or i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %14, %4
  %16 = shl i32 %15, 1
  %17 = and i32 %1, %0
  %18 = or i32 %17, %2
  %19 = shl i32 %18, 1
  %20 = or i32 %4, %0
  %21 = xor i32 %2, %1
  %22 = and i32 %21, %20
  %23 = xor i32 %2, -1
  %24 = or i32 %23, %1
  %25 = or i32 %24, %0
  %26 = xor i32 %20, -1
  %27 = xor i32 %2, %0
  %28 = or i32 %27, %26
  %29 = xor i32 %21, -1
  %30 = and i32 %20, %29
  %31 = or i32 %2, %1
  %32 = and i32 %31, %0
  %33 = and i32 %23, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %1, %0
  %36 = and i32 %35, %34
  %37 = shl i32 %36, 1
  %38 = shl i32 %17, 1
  %39 = or i32 %35, %14
  %40 = xor i32 %24, -1
  %41 = or i32 %40, %0
  %42 = and i32 %20, %2
  %43 = and i32 %7, %8
  %44 = or i32 %6, %43
  %45 = and i32 %27, %35
  %46 = or i32 %1, %0
  %47 = and i32 %46, %23
  %48 = xor i32 %17, -1
  %49 = and i32 %23, %48
  %50 = xor i32 %46, %2
  %51 = shl i32 %50, 1
  %52 = and i32 %35, %2
  %53 = or i32 %29, %8
  %54 = xor i32 %35, -1
  %55 = or i32 %27, %54
  %56 = xor i32 %6, -1
  %57 = xor i32 %43, %56
  %58 = and i32 %2, %0
  %59 = or i32 %58, %4
  %60 = and i32 %34, %54
  %61 = and i32 %23, %1
  %62 = xor i32 %61, -1
  %63 = xor i32 %62, %0
  %64 = xor i32 %13, %17
  %65 = xor i32 %31, -1
  %66 = or i32 %65, %8
  %67 = or i32 %21, %0
  %68 = xor i32 %67, -1
  %69 = or i32 %6, %68
  %70 = or i32 %58, %35
  %71 = shl i32 %70, 1
  %72 = xor i32 %27, -1
  %73 = or i32 %72, %26
  %74 = or i32 %14, %54
  %75 = and i32 %27, %48
  %76 = xor i32 %58, %62
  %77 = or i32 %11, %72
  %78 = or i32 %29, %26
  %79 = or i32 %31, %0
  %80 = and i32 %2, %1
  %81 = xor i32 %80, -1
  %82 = xor i32 %81, %0
  %83 = and i32 %80, %0
  %84 = xor i32 %21, %0
  %85 = xor i32 %83, %84
  %86 = and i32 %27, %12
  %87 = xor i32 %26, %2
  %88 = or i32 %11, %29
  %89 = or i32 %54, %2
  %90 = or i32 %33, %1
  %91 = or i32 %23, %0
  %92 = and i32 %29, %12
  %93 = or i32 %27, %11
  %94 = or i32 %58, %54
  %95 = xor i32 %24, %0
  %96 = or i32 %61, %11
  %97 = xor i32 %33, %24
  %98 = add i32 %20, 1
  %99 = or i32 %35, %2
  %100 = xor i32 %58, %1
  %101 = and i32 %21, %8
  %102 = or i32 %83, %101
  %103 = xor i32 %33, %81
  %104 = or i32 %17, %40
  %105 = xor i32 %58, -1
  %106 = and i32 %105, %1
  %107 = and i32 %54, %2
  %108 = or i32 %21, %26
  %109 = or i32 %72, %4
  %110 = or i32 %23, %54
  %111 = shl i32 %110, 1
  %112 = or i32 %21, %8
  %113 = xor i32 %46, -1
  %114 = or i32 %23, %113
  %115 = and i32 %72, %54
  %116 = or i32 %72, %113
  %117 = or i32 %17, %14
  %118 = and i32 %29, %8
  %119 = xor i32 %65, %0
  %120 = and i32 %105, %4
  %121 = and i32 %5, %8
  %122 = xor i32 %112, 2147483647
  %123 = or i32 %122, %121
  %124 = and i32 %29, %48
  %125 = and i32 %91, %1
  %126 = xor i32 %91, %17
  %127 = or i32 %23, %26
  %128 = shl i32 %127, 1
  %129 = and i32 %31, %8
  %130 = xor i32 %83, -1
  %131 = xor i32 %129, %130
  %132 = or i32 %62, %8
  %133 = and i32 %23, %54
  %134 = or i32 %35, %72
  %135 = xor i32 %33, %1
  %136 = and i32 %27, %20
  %137 = and i32 %27, %1
  %138 = or i32 %58, %65
  %139 = and i32 %7, %0
  %140 = or i32 %121, %139
  %141 = shl i32 %140, 1
  %142 = xor i32 %101, %130
  %143 = or i32 %17, %72
  %144 = and i32 %80, %8
  %145 = and i32 %21, %0
  %146 = xor i32 %145, -1
  %147 = xor i32 %144, %146
  %148 = or i32 %24, %8
  %149 = and i32 %105, %54
  %150 = xor i32 %34, %1
  %151 = or i32 %58, %113
  %152 = or i32 %81, %0
  %153 = shl i32 %152, 2
  %154 = or i32 %11, %2
  %155 = and i32 %24, %8
  %156 = and i32 %29, %0
  %157 = and i32 %48, %2
  %158 = and i32 %13, %4
  %159 = xor i32 %58, %20
  %160 = shl i32 %129, 2
  %161 = or i32 %80, %8
  %162 = add i32 %58, 1
  %163 = or i32 %72, %54
  %164 = shl i32 %163, 1
  %165 = xor i32 %139, -1
  %166 = xor i32 %121, %165
  %167 = xor i32 %91, -1
  %168 = xor i32 %167, %1
  %169 = and i32 %27, %4
  %170 = and i32 %13, %35
  %171 = or i32 %17, %167
  %172 = xor i32 %20, %2
  %173 = or i32 %14, %1
  %174 = or i32 %167, %1
  %175 = or i32 %27, %35
  %176 = xor i32 %121, %112
  %177 = or i32 %144, %32
  %178 = and i32 %34, %4
  %179 = or i32 %62, %0
  %180 = and i32 %72, %1
  %181 = xor i32 %29, %0
  %182 = or i32 %65, %0
  %183 = or i32 %35, %23
  %184 = xor i32 %84, -1
  %185 = or i32 %83, %184
  %186 = or i32 %80, %0
  %187 = xor i32 %24, %17
  %188 = and i32 %24, %0
  %189 = and i32 %12, %2
  %190 = or i32 %29, %113
  %191 = or i32 %144, %145
  %192 = add i32 %21, 1
  %193 = add i32 %61, 1
  %194 = add i32 %24, 1
  %195 = xor i32 %80, %0
  %196 = shl i32 %195, 1
  %197 = xor i32 %48, %2
  %198 = shl i32 %197, 1
  %199 = xor i32 %11, %62
  %200 = or i32 %72, %1
  %201 = xor i32 %105, %1
  %202 = xor i32 %31, %0
  %203 = and i32 %46, %29
  %204 = and i32 %21, %12
  %205 = or i32 %17, %29
  %206 = xor i32 %113, %2
  %207 = and i32 %72, %48
  %208 = and i32 %62, %8
  %209 = and i32 %21, %48
  %210 = and i32 %21, %46
  %211 = and i32 %81, %8
  %212 = add i32 %91, 1
  %213 = or i32 %17, %23
  %214 = or i32 %113, %2
  %215 = and i32 %13, %1
  %216 = shl i32 %215, 2
  %217 = or i32 %27, %113
  %218 = and i32 %35, %105
  %219 = shl i32 %218, 1
  %220 = and i32 %62, %0
  %221 = add i32 %46, 1
  %222 = or i32 %27, %17
  %223 = shl i32 %80, 1
  %224 = or i32 %83, %129
  %225 = and i32 %46, %72
  %226 = and i32 %65, %8
  %227 = and i32 %61, %8
  %228 = and i32 %65, %0
  %229 = and i32 %61, %0
  %230 = and i32 %40, %8
  %231 = mul i32 %230, 9
  %232 = mul i32 %144, 22
  %233 = and i32 %40, %0
  %234 = add i32 %54, %8
  %235 = add i32 %234, %189
  %236 = add i32 %235, %72
  %237 = add i32 %236, %229
  %238 = add i32 %237, %210
  %239 = add i32 %238, %201
  %240 = add i32 %239, %175
  %241 = add i32 %240, %174
  %242 = add i32 %241, %149
  %243 = add i32 %242, %138
  %244 = add i32 %243, %103
  %245 = add i32 %244, %78
  %246 = add i32 %245, %32
  %247 = add i32 %246, %30
  %248 = add i32 %247, %123
  %249 = shl i32 %248, 1
  %250 = add i32 %225, %171
  %251 = sub i32 %250, %158
  %252 = add i32 %251, %143
  %253 = add i32 %252, %88
  %254 = sub i32 %253, %79
  %255 = mul i32 %254, 3
  %256 = add i32 %83, %233
  %257 = mul i32 %256, -7
  %258 = sub i32 %227, %226
  %259 = mul i32 %258, 11
  %260 = sub i32 %220, %188
  %261 = mul i32 %260, 5
  %262 = sub i32 %0, %46
  %263 = add i32 %262, %35
  %264 = add i32 %263, %98
  %265 = add i32 %264, %48
  %266 = sub i32 %265, %2
  %267 = add i32 %266, %221
  %268 = sub i32 %267, %38
  %269 = add i32 %268, %42
  %270 = sub i32 %269, %47
  %271 = add i32 %270, %49
  %272 = sub i32 %271, %52
  %273 = add i32 %272, %87
  %274 = sub i32 %273, %89
  %275 = add i32 %274, %91
  %276 = add i32 %275, %61
  %277 = sub i32 %276, %99
  %278 = sub i32 %277, %24
  %279 = sub i32 %278, %107
  %280 = add i32 %279, %114
  %281 = sub i32 %280, %133
  %282 = add i32 %281, %154
  %283 = add i32 %282, %157
  %284 = add i32 %283, %162
  %285 = sub i32 %284, %27
  %286 = sub i32 %285, %172
  %287 = add i32 %286, %183
  %288 = add i32 %287, %33
  %289 = add i32 %288, %192
  %290 = add i32 %289, %193
  %291 = add i32 %290, %194
  %292 = sub i32 %291, %206
  %293 = sub i32 %292, %58
  %294 = add i32 %293, %212
  %295 = sub i32 %294, %213
  %296 = sub i32 %295, %214
  %297 = sub i32 %296, %19
  %298 = add i32 %297, %22
  %299 = add i32 %298, %25
  %300 = add i32 %299, %28
  %301 = sub i32 %300, %39
  %302 = add i32 %301, %41
  %303 = add i32 %302, %45
  %304 = sub i32 %303, %51
  %305 = add i32 %304, %53
  %306 = sub i32 %305, %55
  %307 = add i32 %306, %59
  %308 = sub i32 %307, %60
  %309 = add i32 %308, %63
  %310 = sub i32 %309, %64
  %311 = sub i32 %310, %66
  %312 = sub i32 %311, %73
  %313 = add i32 %312, %74
  %314 = add i32 %313, %75
  %315 = add i32 %314, %76
  %316 = add i32 %315, %77
  %317 = sub i32 %316, %82
  %318 = sub i32 %317, %86
  %319 = sub i32 %318, %90
  %320 = sub i32 %319, %84
  %321 = sub i32 %320, %92
  %322 = sub i32 %321, %93
  %323 = sub i32 %322, %94
  %324 = sub i32 %323, %95
  %325 = sub i32 %324, %96
  %326 = add i32 %325, %97
  %327 = sub i32 %326, %100
  %328 = add i32 %327, %104
  %329 = sub i32 %328, %106
  %330 = add i32 %329, %108
  %331 = add i32 %330, %109
  %332 = sub i32 %331, %111
  %333 = sub i32 %332, %112
  %334 = add i32 %333, %115
  %335 = add i32 %334, %116
  %336 = sub i32 %335, %117
  %337 = sub i32 %336, %118
  %338 = add i32 %337, %119
  %339 = sub i32 %338, %120
  %340 = add i32 %339, %124
  %341 = sub i32 %340, %125
  %342 = sub i32 %341, %126
  %343 = sub i32 %342, %128
  %344 = add i32 %343, %132
  %345 = add i32 %344, %134
  %346 = sub i32 %345, %135
  %347 = sub i32 %346, %136
  %348 = add i32 %347, %137
  %349 = add i32 %348, %148
  %350 = sub i32 %349, %150
  %351 = sub i32 %350, %151
  %352 = sub i32 %351, %155
  %353 = add i32 %352, %156
  %354 = add i32 %353, %159
  %355 = add i32 %354, %161
  %356 = sub i32 %355, %168
  %357 = sub i32 %356, %169
  %358 = sub i32 %357, %170
  %359 = sub i32 %358, %173
  %360 = sub i32 %359, %178
  %361 = add i32 %360, %179
  %362 = sub i32 %361, %180
  %363 = sub i32 %362, %181
  %364 = add i32 %363, %182
  %365 = add i32 %364, %186
  %366 = add i32 %365, %67
  %367 = add i32 %366, %187
  %368 = sub i32 %367, %190
  %369 = sub i32 %368, %198
  %370 = sub i32 %369, %199
  %371 = add i32 %370, %200
  %372 = sub i32 %371, %101
  %373 = sub i32 %372, %202
  %374 = add i32 %373, %203
  %375 = add i32 %374, %204
  %376 = add i32 %375, %205
  %377 = sub i32 %376, %207
  %378 = sub i32 %377, %208
  %379 = sub i32 %378, %209
  %380 = sub i32 %379, %211
  %381 = add i32 %380, %217
  %382 = add i32 %381, %222
  %383 = sub i32 %382, %223
  %384 = sub i32 %383, %228
  %385 = sub i32 %384, %16
  %386 = sub i32 %385, %37
  %387 = sub i32 %386, %44
  %388 = sub i32 %387, %57
  %389 = sub i32 %388, %69
  %390 = sub i32 %389, %71
  %391 = sub i32 %390, %85
  %392 = sub i32 %391, %102
  %393 = add i32 %392, %131
  %394 = add i32 %393, %142
  %395 = sub i32 %394, %147
  %396 = add i32 %395, %153
  %397 = sub i32 %396, %160
  %398 = sub i32 %397, %164
  %399 = add i32 %398, %166
  %400 = add i32 %399, %176
  %401 = sub i32 %400, %177
  %402 = sub i32 %401, %185
  %403 = sub i32 %402, %191
  %404 = sub i32 %403, %196
  %405 = sub i32 %404, %216
  %406 = sub i32 %405, %219
  %407 = sub i32 %406, %224
  %408 = add i32 %407, %231
  %409 = add i32 %408, %232
  %410 = sub i32 %409, %141
  %411 = add i32 %410, %257
  %412 = add i32 %411, %259
  %413 = add i32 %412, %261
  %414 = add i32 %413, %255
  %415 = add i32 %414, %249
  %416 = icmp eq i32 %10, %415
  %417 = select i1 %416, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %418 = tail call i32 @puts(i8* nonnull dereferenceable(1) %417)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
