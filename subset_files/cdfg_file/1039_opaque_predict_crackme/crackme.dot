digraph "DFG for'crackme' function" {
	Node0x1331b50[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x13321d0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x1332240[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x13322e0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1332350[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x13323c0[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x1332430[shape=record, label="  %11 = or i32 %10, %1"];
	Node0x13324a0[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x1332540[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x13325b0[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x1332620[shape=record, label="  %15 = and i32 %10, %1"];
	Node0x13326c0[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x1332730[shape=record, label="  %17 = or i32 %3, %0"];
	Node0x13327a0[shape=record, label="  %18 = xor i32 %3, %0"];
	Node0x1332810[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1332880[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x13328f0[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x1332960[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x13329d0[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x1332a70[shape=record, label="  %24 = mul i32 %23, -5"];
	Node0x1332ae0[shape=record, label="  %25 = shl i32 %17, 2"];
	Node0x1332b80[shape=record, label="  %26 = xor i32 %25, -4"];
	Node0x1332c20[shape=record, label="  %27 = xor i32 %3, 2147483647"];
	Node0x1332c90[shape=record, label="  %28 = and i32 %27, %0"];
	Node0x1332d00[shape=record, label="  %29 = add i32 %10, %0"];
	Node0x1332d70[shape=record, label="  %30 = add i32 %29, %28"];
	Node0x1332de0[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x1332e80[shape=record, label="  %32 = add i32 %0, 5"];
	Node0x1333100[shape=record, label="  %33 = add i32 %32, %1"];
	Node0x1333170[shape=record, label="  %34 = add i32 %33, %11"];
	Node0x13331e0[shape=record, label="  %35 = add i32 %34, %5"];
	Node0x1333250[shape=record, label="  %36 = sub i32 %35, %3"];
	Node0x13332c0[shape=record, label="  %37 = sub i32 %36, %16"];
	Node0x1333330[shape=record, label="  %38 = add i32 %37, %17"];
	Node0x13333a0[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x1333410[shape=record, label="  %40 = add i32 %39, %14"];
	Node0x1333480[shape=record, label="  %41 = add i32 %40, %24"];
	Node0x13334f0[shape=record, label="  %42 = add i32 %41, %20"];
	Node0x1333560[shape=record, label="  %43 = add i32 %42, %26"];
	Node0x13335d0[shape=record, label="  %44 = add i32 %43, %31"];
	Node0x1333640[shape=record, label="  %45 = icmp eq i32 %9, %44"];
	Node0x12d2268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1333ae0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x1333b30[shape=record, label="  ret void"];
	Node0x1331b50 -> Node0x13321d0;
	Node0x13321d0 -> Node0x1332240;
	Node0x1332240 -> Node0x13322e0;
	Node0x13322e0 -> Node0x1332350;
	Node0x1332350 -> Node0x13323c0;
	Node0x13323c0 -> Node0x1332430;
	Node0x1332430 -> Node0x13324a0;
	Node0x13324a0 -> Node0x1332540;
	Node0x1332540 -> Node0x13325b0;
	Node0x13325b0 -> Node0x1332620;
	Node0x1332620 -> Node0x13326c0;
	Node0x13326c0 -> Node0x1332730;
	Node0x1332730 -> Node0x13327a0;
	Node0x13327a0 -> Node0x1332810;
	Node0x1332810 -> Node0x1332880;
	Node0x1332880 -> Node0x13328f0;
	Node0x13328f0 -> Node0x1332960;
	Node0x1332960 -> Node0x13329d0;
	Node0x13329d0 -> Node0x1332a70;
	Node0x1332a70 -> Node0x1332ae0;
	Node0x1332ae0 -> Node0x1332b80;
	Node0x1332b80 -> Node0x1332c20;
	Node0x1332c20 -> Node0x1332c90;
	Node0x1332c90 -> Node0x1332d00;
	Node0x1332d00 -> Node0x1332d70;
	Node0x1332d70 -> Node0x1332de0;
	Node0x1332de0 -> Node0x1332e80;
	Node0x1332e80 -> Node0x1333100;
	Node0x1333100 -> Node0x1333170;
	Node0x1333170 -> Node0x13331e0;
	Node0x13331e0 -> Node0x1333250;
	Node0x1333250 -> Node0x13332c0;
	Node0x13332c0 -> Node0x1333330;
	Node0x1333330 -> Node0x13333a0;
	Node0x13333a0 -> Node0x1333410;
	Node0x1333410 -> Node0x1333480;
	Node0x1333480 -> Node0x13334f0;
	Node0x13334f0 -> Node0x1333560;
	Node0x1333560 -> Node0x13335d0;
	Node0x13335d0 -> Node0x1333640;
	Node0x1333640 -> Node0x12d2268;
	Node0x12d2268 -> Node0x1333ae0;
	Node0x1333ae0 -> Node0x1333b30;
edge [color=red]
	Node0x1331b50 -> Node0x13321d0;
	Node0x1332240 -> Node0x13322e0;
	Node0x13321d0 -> Node0x1332350;
	Node0x13322e0 -> Node0x1332350;
	Node0x13323c0 -> Node0x1332430;
	Node0x13324a0 -> Node0x1332540;
	Node0x1332540 -> Node0x13325b0;
	Node0x13323c0 -> Node0x1332620;
	Node0x1332620 -> Node0x13326c0;
	Node0x13327a0 -> Node0x1332810;
	Node0x1332810 -> Node0x1332880;
	Node0x13328f0 -> Node0x1332960;
	Node0x1332960 -> Node0x13329d0;
	Node0x13329d0 -> Node0x1332a70;
	Node0x1332730 -> Node0x1332ae0;
	Node0x1332ae0 -> Node0x1332b80;
	Node0x1332c20 -> Node0x1332c90;
	Node0x13323c0 -> Node0x1332d00;
	Node0x1332d00 -> Node0x1332d70;
	Node0x1332c90 -> Node0x1332d70;
	Node0x1332d70 -> Node0x1332de0;
	Node0x1332e80 -> Node0x1333100;
	Node0x1333100 -> Node0x1333170;
	Node0x1332430 -> Node0x1333170;
	Node0x1333170 -> Node0x13331e0;
	Node0x1331b50 -> Node0x13331e0;
	Node0x13331e0 -> Node0x1333250;
	Node0x1333250 -> Node0x13332c0;
	Node0x13326c0 -> Node0x13332c0;
	Node0x13332c0 -> Node0x1333330;
	Node0x1332730 -> Node0x1333330;
	Node0x1333330 -> Node0x13333a0;
	Node0x1332960 -> Node0x13333a0;
	Node0x13333a0 -> Node0x1333410;
	Node0x13325b0 -> Node0x1333410;
	Node0x1333410 -> Node0x1333480;
	Node0x1332a70 -> Node0x1333480;
	Node0x1333480 -> Node0x13334f0;
	Node0x1332880 -> Node0x13334f0;
	Node0x13334f0 -> Node0x1333560;
	Node0x1332b80 -> Node0x1333560;
	Node0x1333560 -> Node0x13335d0;
	Node0x1332de0 -> Node0x13335d0;
	Node0x1332350 -> Node0x1333640;
	Node0x13335d0 -> Node0x1333640;
	Node0x1333640 -> Node0x12d2268;
	Node0x12d2268 -> Node0x1333ae0;
}
