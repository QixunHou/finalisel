digraph "DFG for'crackme' function" {
	Node0x62ff70[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x62ffe0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x630050[shape=record, label="  %7 = and i32 %6, %3"];
	Node0x6300f0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x630190[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x630200[shape=record, label="  %10 = or i32 %6, %3"];
	Node0x630270[shape=record, label="  %11 = add i32 %10, 1"];
	Node0x6302e0[shape=record, label="  %12 = sub i32 %11, %9"];
	Node0x630350[shape=record, label="  %13 = or i32 %5, %1"];
	Node0x6303c0[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0x630430[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x6304a0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x630510[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x630580[shape=record, label="  %18 = and i32 %5, %1"];
	Node0x6305f0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x630660[shape=record, label="  %20 = and i32 %2, %1"];
	Node0x6306d0[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x630740[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x6307b0[shape=record, label="  %23 = sub i32 %7, %20"];
	Node0x630850[shape=record, label="  %24 = mul i32 %23, 3"];
	Node0x6308f0[shape=record, label="  %25 = add i32 %0, 2"];
	Node0x630960[shape=record, label="  %26 = add i32 %25, %1"];
	Node0x6309d0[shape=record, label="  %27 = sub i32 %26, %14"];
	Node0x630a40[shape=record, label="  %28 = add i32 %27, %13"];
	Node0x630ab0[shape=record, label="  %29 = sub i32 %28, %19"];
	Node0x630b20[shape=record, label="  %30 = sub i32 %29, %21"];
	Node0x630b90[shape=record, label="  %31 = add i32 %30, %10"];
	Node0x630c00[shape=record, label="  %32 = sub i32 %31, %22"];
	Node0x630e80[shape=record, label="  %33 = sub i32 %32, %17"];
	Node0x630ef0[shape=record, label="  %34 = add i32 %33, %24"];
	Node0x630f60[shape=record, label="  %35 = icmp eq i32 %12, %34"];
	Node0x5d0268[shape=record, label="  %36 = select i1 %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x631400[shape=record, label="  %37 = tail call i32 @puts(i8* nonnull dereferenceable(1) %36)"];
	Node0x631450[shape=record, label="  ret void"];
	Node0x62ff70 -> Node0x62ffe0;
	Node0x62ffe0 -> Node0x630050;
	Node0x630050 -> Node0x6300f0;
	Node0x6300f0 -> Node0x630190;
	Node0x630190 -> Node0x630200;
	Node0x630200 -> Node0x630270;
	Node0x630270 -> Node0x6302e0;
	Node0x6302e0 -> Node0x630350;
	Node0x630350 -> Node0x6303c0;
	Node0x6303c0 -> Node0x630430;
	Node0x630430 -> Node0x6304a0;
	Node0x6304a0 -> Node0x630510;
	Node0x630510 -> Node0x630580;
	Node0x630580 -> Node0x6305f0;
	Node0x6305f0 -> Node0x630660;
	Node0x630660 -> Node0x6306d0;
	Node0x6306d0 -> Node0x630740;
	Node0x630740 -> Node0x6307b0;
	Node0x6307b0 -> Node0x630850;
	Node0x630850 -> Node0x6308f0;
	Node0x6308f0 -> Node0x630960;
	Node0x630960 -> Node0x6309d0;
	Node0x6309d0 -> Node0x630a40;
	Node0x630a40 -> Node0x630ab0;
	Node0x630ab0 -> Node0x630b20;
	Node0x630b20 -> Node0x630b90;
	Node0x630b90 -> Node0x630c00;
	Node0x630c00 -> Node0x630e80;
	Node0x630e80 -> Node0x630ef0;
	Node0x630ef0 -> Node0x630f60;
	Node0x630f60 -> Node0x5d0268;
	Node0x5d0268 -> Node0x631400;
	Node0x631400 -> Node0x631450;
edge [color=red]
	Node0x62ffe0 -> Node0x630050;
	Node0x630050 -> Node0x6300f0;
	Node0x6300f0 -> Node0x630190;
	Node0x62ffe0 -> Node0x630200;
	Node0x630200 -> Node0x630270;
	Node0x630270 -> Node0x6302e0;
	Node0x630190 -> Node0x6302e0;
	Node0x62ff70 -> Node0x630350;
	Node0x630430 -> Node0x6304a0;
	Node0x6304a0 -> Node0x630510;
	Node0x62ff70 -> Node0x630580;
	Node0x630580 -> Node0x6305f0;
	Node0x630050 -> Node0x6307b0;
	Node0x630660 -> Node0x6307b0;
	Node0x6307b0 -> Node0x630850;
	Node0x6308f0 -> Node0x630960;
	Node0x630960 -> Node0x6309d0;
	Node0x6303c0 -> Node0x6309d0;
	Node0x6309d0 -> Node0x630a40;
	Node0x630350 -> Node0x630a40;
	Node0x630a40 -> Node0x630ab0;
	Node0x6305f0 -> Node0x630ab0;
	Node0x630ab0 -> Node0x630b20;
	Node0x6306d0 -> Node0x630b20;
	Node0x630b20 -> Node0x630b90;
	Node0x630200 -> Node0x630b90;
	Node0x630b90 -> Node0x630c00;
	Node0x630740 -> Node0x630c00;
	Node0x630c00 -> Node0x630e80;
	Node0x630510 -> Node0x630e80;
	Node0x630e80 -> Node0x630ef0;
	Node0x630850 -> Node0x630ef0;
	Node0x6302e0 -> Node0x630f60;
	Node0x630ef0 -> Node0x630f60;
	Node0x630f60 -> Node0x5d0268;
	Node0x5d0268 -> Node0x631400;
}
