; ModuleID = '../.././c_source_file/1370_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1370_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = mul i32 %5, -2
  %7 = xor i32 %0, -1
  %8 = or i32 %2, %1
  %9 = and i32 %8, %7
  %10 = or i32 %2, %0
  %11 = xor i32 %10, %1
  %12 = and i32 %2, %0
  %13 = xor i32 %2, -1
  %14 = and i32 %13, %1
  %15 = or i32 %12, %14
  %16 = or i32 %1, %0
  %17 = xor i32 %16, %2
  %18 = xor i32 %2, %1
  %19 = or i32 %18, %0
  %20 = and i32 %4, %2
  %21 = and i32 %20, %7
  %22 = or i32 %18, %7
  %23 = xor i32 %21, %22
  %24 = xor i32 %14, -1
  %25 = xor i32 %12, %24
  %26 = xor i32 %12, -1
  %27 = xor i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %26, %28
  %30 = or i32 %24, %0
  %31 = xor i32 %10, -1
  %32 = or i32 %27, %31
  %33 = or i32 %13, %28
  %34 = xor i32 %2, %0
  %35 = or i32 %34, %1
  %36 = shl i32 %35, 1
  %37 = and i32 %1, %0
  %38 = or i32 %37, %13
  %39 = or i32 %4, %0
  %40 = and i32 %39, %2
  %41 = or i32 %4, %2
  %42 = and i32 %41, %0
  %43 = or i32 %21, %42
  %44 = xor i32 %16, -1
  %45 = xor i32 %34, -1
  %46 = or i32 %45, %44
  %47 = xor i32 %39, -1
  %48 = or i32 %47, %2
  %49 = shl i32 %48, 1
  %50 = add i32 %0, 1
  %51 = and i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %7
  %54 = and i32 %13, %0
  %55 = or i32 %54, %1
  %56 = shl i32 %55, 1
  %57 = xor i32 %18, -1
  %58 = and i32 %57, %7
  %59 = and i32 %51, %0
  %60 = xor i32 %8, %0
  %61 = xor i32 %59, -1
  %62 = xor i32 %60, %61
  %63 = or i32 %24, %7
  %64 = shl i32 %63, 1
  %65 = xor i32 %5, -1
  %66 = and i32 %65, %2
  %67 = xor i32 %37, -1
  %68 = and i32 %57, %67
  %69 = or i32 %34, %28
  %70 = xor i32 %54, -1
  %71 = and i32 %70, %4
  %72 = or i32 %45, %4
  %73 = xor i32 %8, -1
  %74 = or i32 %73, %0
  %75 = or i32 %57, %0
  %76 = or i32 %28, %2
  %77 = or i32 %14, %5
  %78 = or i32 %27, %13
  %79 = xor i32 %54, %1
  %80 = and i32 %28, %2
  %81 = shl i32 %80, 1
  %82 = shl i32 %65, 1
  %83 = xor i32 %12, %1
  %84 = xor i32 %12, %39
  %85 = and i32 %20, %0
  %86 = and i32 %41, %7
  %87 = or i32 %85, %86
  %88 = and i32 %10, %4
  %89 = or i32 %34, %27
  %90 = and i32 %10, %1
  %91 = add i32 %34, 1
  %92 = and i32 %45, %28
  %93 = shl i32 %31, 1
  %94 = and i32 %18, %7
  %95 = or i32 %59, %94
  %96 = and i32 %27, %45
  %97 = xor i32 %67, %2
  %98 = xor i32 %24, %0
  %99 = shl i32 %98, 1
  %100 = and i32 %57, %0
  %101 = or i32 %27, %2
  %102 = or i32 %57, %44
  %103 = xor i32 %22, -1
  %104 = or i32 %21, %103
  %105 = xor i32 %42, 1073741823
  %106 = xor i32 %105, %21
  %107 = shl i32 %106, 2
  %108 = or i32 %5, %45
  %109 = or i32 %34, %37
  %110 = or i32 %5, %13
  %111 = or i32 %12, %27
  %112 = or i32 %13, %1
  %113 = xor i32 %54, %112
  %114 = xor i32 %5, %52
  %115 = or i32 %52, %0
  %116 = xor i32 %112, -1
  %117 = or i32 %116, %0
  %118 = and i32 %26, %4
  %119 = and i32 %16, %2
  %120 = and i32 %16, %45
  %121 = and i32 %8, %0
  %122 = and i32 %18, %0
  %123 = or i32 %112, %0
  %124 = or i32 %13, %0
  %125 = xor i32 %124, -1
  %126 = or i32 %37, %125
  %127 = xor i32 %94, %61
  %128 = xor i32 %14, %0
  %129 = xor i32 %8, %37
  %130 = xor i32 %26, %1
  %131 = or i32 %31, %28
  %132 = or i32 %37, %2
  %133 = or i32 %57, %47
  %134 = and i32 %112, %0
  %135 = and i32 %51, %7
  %136 = or i32 %135, %121
  %137 = and i32 %10, %27
  %138 = and i32 %34, %4
  %139 = or i32 %112, %7
  %140 = or i32 %44, %2
  %141 = xor i32 %70, %1
  %142 = and i32 %34, %65
  %143 = shl i32 %142, 1
  %144 = xor i32 %112, %37
  %145 = and i32 %13, %67
  %146 = or i32 %54, %4
  %147 = or i32 %125, %28
  %148 = xor i32 %19, 2147483647
  %149 = or i32 %148, %85
  %150 = shl i32 %149, 1
  %151 = xor i32 %37, %2
  %152 = or i32 %12, %73
  %153 = xor i32 %125, %1
  %154 = or i32 %18, %37
  %155 = shl i32 %154, 1
  %156 = and i32 %13, %65
  %157 = xor i32 %121, -1
  %158 = xor i32 %135, %157
  %159 = or i32 %13, %44
  %160 = and i32 %13, %28
  %161 = and i32 %70, %1
  %162 = and i32 %16, %57
  %163 = and i32 %45, %1
  %164 = or i32 %57, %7
  %165 = or i32 %116, %7
  %166 = or i32 %34, %47
  %167 = and i32 %18, %67
  %168 = xor i32 %124, %1
  %169 = and i32 %70, %28
  %170 = or i32 %37, %45
  %171 = xor i32 %116, %0
  %172 = xor i32 %73, %0
  %173 = shl i32 %172, 1
  %174 = shl i32 %73, 1
  %175 = and i32 %39, %45
  %176 = and i32 %39, %57
  %177 = or i32 %37, %57
  %178 = xor i32 %122, 2147483647
  %179 = xor i32 %178, %135
  %180 = shl i32 %179, 1
  %181 = and i32 %18, %65
  %182 = shl i32 %181, 1
  %183 = xor i32 %9, %61
  %184 = xor i32 %10, %37
  %185 = or i32 %18, %47
  %186 = or i32 %34, %5
  %187 = or i32 %5, %2
  %188 = xor i32 %54, %52
  %189 = or i32 %125, %1
  %190 = xor i32 %41, %0
  %191 = or i32 %85, %190
  %192 = xor i32 %65, %2
  %193 = and i32 %34, %1
  %194 = shl i32 %193, 1
  %195 = or i32 %37, %31
  %196 = xor i32 %52, %0
  %197 = and i32 %10, %28
  %198 = or i32 %27, %45
  %199 = xor i32 %12, %16
  %200 = shl i32 %199, 1
  %201 = or i32 %125, %4
  %202 = xor i32 %39, %2
  %203 = or i32 %12, %4
  %204 = or i32 %12, %44
  %205 = xor i32 %51, %0
  %206 = and i32 %27, %13
  %207 = and i32 %34, %67
  %208 = and i32 %24, %7
  %209 = xor i32 %12, %8
  %210 = shl i32 %209, 2
  %211 = and i32 %16, %13
  %212 = or i32 %45, %28
  %213 = or i32 %54, %28
  %214 = and i32 %18, %16
  %215 = and i32 %112, %7
  %216 = xor i32 %5, %24
  %217 = shl i32 %216, 1
  %218 = or i32 %8, %7
  %219 = xor i32 %18, %0
  %220 = xor i32 %85, -1
  %221 = xor i32 %219, %220
  %222 = shl i32 %4, 1
  %223 = shl i32 %0, 1
  %224 = or i32 %18, %5
  %225 = xor i32 %124, %37
  %226 = and i32 %219, %61
  %227 = and i32 %52, %0
  %228 = or i32 %51, %5
  %229 = or i32 %37, %116
  %230 = or i32 %34, %44
  %231 = or i32 %12, %47
  %232 = and i32 %27, %26
  %233 = or i32 %31, %4
  %234 = and i32 %27, %70
  %235 = and i32 %124, %1
  %236 = and i32 %124, %4
  %237 = or i32 %34, %4
  %238 = or i32 %85, %219
  %239 = and i32 %26, %1
  %240 = and i32 %27, %2
  %241 = and i32 %34, %28
  %242 = add i32 %16, 1
  %243 = xor i32 %190, %220
  %244 = and i32 %124, %27
  %245 = or i32 %54, %27
  %246 = xor i32 %47, %2
  %247 = or i32 %51, %0
  %248 = or i32 %8, %0
  %249 = and i32 %18, %39
  %250 = xor i32 %5, %2
  %251 = and i32 %124, %28
  %252 = or i32 %54, %116
  %253 = and i32 %67, %2
  %254 = xor i32 %112, %0
  %255 = and i32 %45, %65
  %256 = or i32 %54, %51
  %257 = xor i32 %44, %2
  %258 = or i32 %27, %125
  %259 = or i32 %12, %28
  %260 = or i32 %59, %9
  %261 = and i32 %45, %4
  %262 = and i32 %73, %7
  %263 = mul i32 %262, -12
  %264 = and i32 %14, %7
  %265 = shl i32 %264, 2
  %266 = and i32 %73, %0
  %267 = mul i32 %266, -22
  %268 = and i32 %14, %0
  %269 = mul i32 %268, 14
  %270 = and i32 %116, %7
  %271 = mul i32 %270, -13
  %272 = mul i32 %135, 6
  %273 = and i32 %116, %0
  %274 = mul i32 %273, -19
  %275 = add i32 %66, %34
  %276 = sub i32 %275, %245
  %277 = add i32 %276, %233
  %278 = sub i32 %277, %19
  %279 = add i32 %278, %243
  %280 = sub i32 %279, %260
  %281 = mul i32 %280, 5
  %282 = add i32 %253, %67
  %283 = add i32 %282, %140
  %284 = add i32 %283, %59
  %285 = shl i32 %284, 2
  %286 = sub i32 %131, %187
  %287 = sub i32 %286, %95
  %288 = mul i32 %287, 3
  %289 = add i32 %39, -1
  %290 = add i32 %289, %54
  %291 = add i32 %290, %97
  %292 = add i32 %291, %78
  %293 = add i32 %292, %76
  %294 = add i32 %293, %52
  %295 = add i32 %294, %26
  %296 = add i32 %295, %38
  %297 = add i32 %296, %17
  %298 = add i32 %297, %241
  %299 = add i32 %298, %244
  %300 = add i32 %299, %237
  %301 = add i32 %300, %236
  %302 = add i32 %301, %224
  %303 = add i32 %302, %196
  %304 = add i32 %303, %137
  %305 = add i32 %304, %121
  %306 = add i32 %305, %111
  %307 = add i32 %306, %92
  %308 = add i32 %307, %89
  %309 = add i32 %308, %68
  %310 = add i32 %309, %32
  %311 = shl i32 %310, 1
  %312 = sub i32 %50, %1
  %313 = sub i32 %312, %223
  %314 = add i32 %313, %37
  %315 = sub i32 %314, %222
  %316 = add i32 %315, %242
  %317 = add i32 %316, %10
  %318 = add i32 %317, %33
  %319 = sub i32 %318, %40
  %320 = sub i32 %319, %82
  %321 = add i32 %320, %91
  %322 = sub i32 %321, %101
  %323 = add i32 %322, %8
  %324 = sub i32 %323, %110
  %325 = add i32 %324, %119
  %326 = add i32 %325, %116
  %327 = add i32 %326, %132
  %328 = sub i32 %327, %112
  %329 = add i32 %328, %57
  %330 = add i32 %329, %145
  %331 = add i32 %330, %151
  %332 = add i32 %331, %156
  %333 = add i32 %332, %159
  %334 = sub i32 %333, %160
  %335 = add i32 %334, %192
  %336 = sub i32 %335, %51
  %337 = sub i32 %336, %202
  %338 = sub i32 %337, %206
  %339 = sub i32 %338, %211
  %340 = sub i32 %339, %18
  %341 = sub i32 %340, %12
  %342 = sub i32 %341, %240
  %343 = sub i32 %342, %124
  %344 = add i32 %343, %246
  %345 = add i32 %344, %250
  %346 = add i32 %345, %257
  %347 = sub i32 %346, %9
  %348 = add i32 %347, %11
  %349 = add i32 %348, %15
  %350 = add i32 %349, %25
  %351 = sub i32 %350, %29
  %352 = sub i32 %351, %30
  %353 = add i32 %352, %46
  %354 = sub i32 %353, %49
  %355 = add i32 %354, %53
  %356 = sub i32 %355, %58
  %357 = sub i32 %356, %69
  %358 = add i32 %357, %71
  %359 = sub i32 %358, %72
  %360 = sub i32 %359, %74
  %361 = sub i32 %360, %75
  %362 = sub i32 %361, %77
  %363 = add i32 %362, %79
  %364 = sub i32 %363, %81
  %365 = add i32 %364, %83
  %366 = sub i32 %365, %84
  %367 = add i32 %366, %88
  %368 = add i32 %367, %90
  %369 = sub i32 %368, %93
  %370 = sub i32 %369, %96
  %371 = add i32 %370, %100
  %372 = sub i32 %371, %102
  %373 = add i32 %372, %108
  %374 = sub i32 %373, %109
  %375 = sub i32 %374, %113
  %376 = sub i32 %375, %114
  %377 = add i32 %376, %115
  %378 = add i32 %377, %117
  %379 = add i32 %378, %118
  %380 = add i32 %379, %120
  %381 = sub i32 %380, %122
  %382 = sub i32 %381, %123
  %383 = sub i32 %382, %126
  %384 = sub i32 %383, %128
  %385 = add i32 %384, %129
  %386 = sub i32 %385, %130
  %387 = sub i32 %386, %133
  %388 = sub i32 %387, %134
  %389 = sub i32 %388, %138
  %390 = add i32 %389, %139
  %391 = sub i32 %390, %141
  %392 = add i32 %391, %144
  %393 = add i32 %392, %146
  %394 = sub i32 %393, %147
  %395 = add i32 %394, %152
  %396 = add i32 %395, %153
  %397 = sub i32 %396, %161
  %398 = sub i32 %397, %162
  %399 = sub i32 %398, %163
  %400 = add i32 %399, %164
  %401 = add i32 %400, %165
  %402 = add i32 %401, %166
  %403 = add i32 %402, %167
  %404 = sub i32 %403, %168
  %405 = add i32 %404, %169
  %406 = add i32 %405, %170
  %407 = add i32 %406, %60
  %408 = sub i32 %407, %171
  %409 = sub i32 %408, %174
  %410 = sub i32 %409, %175
  %411 = add i32 %410, %176
  %412 = sub i32 %411, %177
  %413 = add i32 %412, %184
  %414 = add i32 %413, %185
  %415 = sub i32 %414, %186
  %416 = sub i32 %415, %188
  %417 = add i32 %416, %189
  %418 = sub i32 %417, %195
  %419 = sub i32 %418, %197
  %420 = add i32 %419, %198
  %421 = add i32 %420, %201
  %422 = sub i32 %421, %203
  %423 = add i32 %422, %204
  %424 = sub i32 %423, %205
  %425 = add i32 %424, %207
  %426 = sub i32 %425, %208
  %427 = sub i32 %426, %212
  %428 = sub i32 %427, %213
  %429 = sub i32 %428, %214
  %430 = add i32 %429, %215
  %431 = add i32 %430, %218
  %432 = sub i32 %431, %225
  %433 = add i32 %432, %227
  %434 = sub i32 %433, %228
  %435 = add i32 %434, %229
  %436 = sub i32 %435, %230
  %437 = sub i32 %436, %231
  %438 = sub i32 %437, %232
  %439 = sub i32 %438, %234
  %440 = add i32 %439, %235
  %441 = add i32 %440, %239
  %442 = add i32 %441, %247
  %443 = add i32 %442, %248
  %444 = sub i32 %443, %249
  %445 = sub i32 %444, %219
  %446 = add i32 %445, %251
  %447 = sub i32 %446, %252
  %448 = add i32 %447, %254
  %449 = add i32 %448, %255
  %450 = add i32 %449, %256
  %451 = sub i32 %450, %258
  %452 = add i32 %451, %259
  %453 = add i32 %452, %261
  %454 = sub i32 %453, %23
  %455 = sub i32 %454, %36
  %456 = sub i32 %455, %43
  %457 = sub i32 %456, %56
  %458 = sub i32 %457, %62
  %459 = sub i32 %458, %64
  %460 = sub i32 %459, %87
  %461 = sub i32 %460, %99
  %462 = sub i32 %461, %104
  %463 = sub i32 %462, %127
  %464 = sub i32 %463, %136
  %465 = sub i32 %464, %143
  %466 = sub i32 %465, %155
  %467 = add i32 %466, %158
  %468 = sub i32 %467, %173
  %469 = sub i32 %468, %182
  %470 = sub i32 %469, %183
  %471 = sub i32 %470, %191
  %472 = sub i32 %471, %194
  %473 = sub i32 %472, %200
  %474 = sub i32 %473, %210
  %475 = sub i32 %474, %217
  %476 = sub i32 %475, %221
  %477 = add i32 %476, %226
  %478 = add i32 %477, %238
  %479 = add i32 %478, %263
  %480 = sub i32 %479, %265
  %481 = add i32 %480, %267
  %482 = add i32 %481, %269
  %483 = add i32 %482, %271
  %484 = add i32 %483, %272
  %485 = add i32 %484, %274
  %486 = sub i32 %485, %107
  %487 = sub i32 %486, %150
  %488 = sub i32 %487, %180
  %489 = add i32 %488, %285
  %490 = add i32 %489, %288
  %491 = add i32 %490, %281
  %492 = add i32 %491, %311
  %493 = icmp eq i32 %6, %492
  %494 = select i1 %493, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %495 = tail call i32 @puts(i8* nonnull dereferenceable(1) %494)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
