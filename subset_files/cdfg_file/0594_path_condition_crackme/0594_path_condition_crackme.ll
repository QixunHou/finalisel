; ModuleID = '../.././c_source_file/0594_path_condition_crackme.c'
source_filename = "../.././c_source_file/0594_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %4, %2
  %6 = mul i32 %5, -2
  %7 = xor i32 %2, -1
  %8 = xor i32 %1, %0
  %9 = and i32 %8, %7
  %10 = xor i32 %2, %1
  %11 = xor i32 %1, -1
  %12 = and i32 %11, %0
  %13 = xor i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %12, %14
  %16 = shl i32 %15, 2
  %17 = and i32 %2, %0
  %18 = or i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %17, %19
  %21 = xor i32 %17, -1
  %22 = and i32 %8, %21
  %23 = or i32 %7, %0
  %24 = xor i32 %23, %4
  %25 = shl i32 %24, 1
  %26 = or i32 %7, %1
  %27 = and i32 %26, %0
  %28 = and i32 %8, %2
  %29 = xor i32 %23, -1
  %30 = or i32 %29, %11
  %31 = or i32 %17, %1
  %32 = and i32 %13, %1
  %33 = xor i32 %0, -1
  %34 = and i32 %2, %1
  %35 = and i32 %34, %33
  %36 = and i32 %10, %0
  %37 = or i32 %35, %36
  %38 = and i32 %13, %8
  %39 = or i32 %11, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %40, %2
  %42 = xor i32 %8, -1
  %43 = or i32 %13, %42
  %44 = or i32 %10, %12
  %45 = or i32 %29, %42
  %46 = or i32 %2, %0
  %47 = xor i32 %46, -1
  %48 = and i32 %13, %39
  %49 = xor i32 %4, -1
  %50 = xor i32 %49, %2
  %51 = xor i32 %10, -1
  %52 = and i32 %39, %51
  %53 = and i32 %7, %0
  %54 = and i32 %34, %0
  %55 = and i32 %10, %33
  %56 = or i32 %54, %55
  %57 = xor i32 %12, %2
  %58 = and i32 %7, %1
  %59 = xor i32 %58, -1
  %60 = xor i32 %59, %0
  %61 = shl i32 %60, 1
  %62 = and i32 %10, %49
  %63 = or i32 %2, %1
  %64 = and i32 %63, %0
  %65 = xor i32 %35, -1
  %66 = xor i32 %64, %65
  %67 = and i32 %11, %2
  %68 = and i32 %67, %0
  %69 = or i32 %11, %2
  %70 = xor i32 %69, %0
  %71 = or i32 %68, %70
  %72 = or i32 %10, %0
  %73 = xor i32 %68, %72
  %74 = xor i32 %63, -1
  %75 = or i32 %4, %74
  %76 = or i32 %10, %33
  %77 = or i32 %58, %0
  %78 = xor i32 %58, %0
  %79 = and i32 %39, %7
  %80 = shl i32 %40, 1
  %81 = xor i32 %17, %1
  %82 = xor i32 %53, -1
  %83 = add i32 %53, 1
  %84 = or i32 %7, %42
  %85 = shl i32 %84, 1
  %86 = and i32 %14, %1
  %87 = and i32 %39, %2
  %88 = and i32 %26, %33
  %89 = xor i32 %26, -1
  %90 = or i32 %53, %89
  %91 = and i32 %49, %2
  %92 = shl i32 %91, 1
  %93 = and i32 %82, %42
  %94 = xor i32 %34, %0
  %95 = and i32 %13, %18
  %96 = and i32 %59, %0
  %97 = xor i32 %53, %1
  %98 = and i32 %21, %42
  %99 = or i32 %4, %29
  %100 = or i32 %74, %33
  %101 = xor i32 %29, %1
  %102 = xor i32 %34, -1
  %103 = xor i32 %102, %0
  %104 = or i32 %19, %2
  %105 = or i32 %12, %7
  %106 = xor i32 %12, -1
  %107 = and i32 %10, %106
  %108 = or i32 %53, %8
  %109 = and i32 %10, %18
  %110 = or i32 %13, %19
  %111 = xor i32 %54, -1
  %112 = xor i32 %55, %111
  %113 = add i32 %12, 1
  %114 = or i32 %26, %0
  %115 = or i32 %8, %47
  %116 = or i32 %34, %33
  %117 = and i32 %51, %49
  %118 = shl i32 %117, 1
  %119 = or i32 %102, %33
  %120 = or i32 %59, %33
  %121 = xor i32 %10, %0
  %122 = xor i32 %74, %0
  %123 = shl i32 %34, 1
  %124 = add i32 %13, 1
  %125 = and i32 %18, %2
  %126 = shl i32 %125, 1
  %127 = xor i32 %89, %0
  %128 = xor i32 %46, %1
  %129 = or i32 %13, %4
  %130 = or i32 %89, %0
  %131 = or i32 %14, %1
  %132 = or i32 %14, %19
  %133 = or i32 %51, %40
  %134 = shl i32 %133, 1
  %135 = xor i32 %51, %0
  %136 = and i32 %39, %14
  %137 = xor i32 %54, %121
  %138 = or i32 %4, %2
  %139 = and i32 %8, %82
  %140 = or i32 %4, %7
  %141 = or i32 %17, %74
  %142 = or i32 %14, %42
  %143 = and i32 %106, %2
  %144 = and i32 %13, %106
  %145 = xor i32 %18, %2
  %146 = or i32 %53, %34
  %147 = or i32 %34, %12
  %148 = or i32 %53, %11
  %149 = add i32 %26, 1
  %150 = and i32 %67, %33
  %151 = xor i32 %76, 2147483647
  %152 = or i32 %151, %150
  %153 = or i32 %35, %64
  %154 = xor i32 %36, %65
  %155 = or i32 %17, %42
  %156 = shl i32 %155, 1
  %157 = and i32 %46, %42
  %158 = xor i32 %69, -1
  %159 = or i32 %158, %0
  %160 = xor i32 %68, %159
  %161 = or i32 %8, %7
  %162 = or i32 %53, %42
  %163 = and i32 %14, %106
  %164 = or i32 %74, %0
  %165 = and i32 %46, %1
  %166 = and i32 %13, %42
  %167 = or i32 %12, %51
  %168 = or i32 %10, %19
  %169 = and i32 %46, %11
  %170 = or i32 %8, %29
  %171 = xor i32 %63, %33
  %172 = xor i32 %171, %54
  %173 = or i32 %13, %11
  %174 = or i32 %42, %2
  %175 = xor i32 %19, %2
  %176 = shl i32 %175, 2
  %177 = add i32 %58, 1
  %178 = and i32 %42, %2
  %179 = or i32 %17, %11
  %180 = and i32 %69, %0
  %181 = xor i32 %180, -1
  %182 = xor i32 %150, %181
  %183 = and i32 %14, %11
  %184 = shl i32 %11, 1
  %185 = or i32 %51, %33
  %186 = xor i32 %26, %0
  %187 = and i32 %13, %49
  %188 = xor i32 %26, %4
  %189 = or i32 %13, %8
  %190 = shl i32 %189, 2
  %191 = or i32 %47, %11
  %192 = shl i32 %191, 1
  %193 = or i32 %58, %33
  %194 = and i32 %21, %11
  %195 = add i32 %18, 1
  %196 = xor i32 %72, -1
  %197 = or i32 %68, %196
  %198 = xor i32 %23, %1
  %199 = or i32 %12, %2
  %200 = or i32 %47, %42
  %201 = or i32 %51, %19
  %202 = or i32 %89, %33
  %203 = xor i32 %63, %4
  %204 = and i32 %14, %42
  %205 = or i32 %10, %40
  %206 = xor i32 %121, -1
  %207 = xor i32 %68, %206
  %208 = xor i32 %17, %39
  %209 = shl i32 %208, 1
  %210 = or i32 %4, %89
  %211 = and i32 %74, %33
  %212 = shl i32 %211, 1
  %213 = and i32 %58, %33
  %214 = mul i32 %213, -19
  %215 = and i32 %74, %0
  %216 = and i32 %58, %0
  %217 = and i32 %89, %33
  %218 = and i32 %89, %0
  %219 = mul i32 %218, 10
  %220 = mul i32 %54, -15
  %221 = add i32 %26, %174
  %222 = add i32 %221, %21
  %223 = add i32 %222, %215
  %224 = add i32 %223, %164
  %225 = add i32 %224, %132
  %226 = add i32 %225, %108
  %227 = add i32 %226, %107
  %228 = add i32 %227, %101
  %229 = add i32 %228, %153
  %230 = add i32 %229, %152
  %231 = shl i32 %230, 1
  %232 = sub i32 %217, %216
  %233 = add i32 %232, %185
  %234 = sub i32 %233, %166
  %235 = add i32 %234, %142
  %236 = sub i32 %235, %141
  %237 = mul i32 %236, 5
  %238 = sub i32 %140, %205
  %239 = add i32 %238, %154
  %240 = mul i32 %239, 3
  %241 = sub i32 %1, %39
  %242 = add i32 %241, %49
  %243 = add i32 %242, %113
  %244 = add i32 %243, %7
  %245 = sub i32 %244, %184
  %246 = add i32 %245, %18
  %247 = add i32 %246, %195
  %248 = sub i32 %247, %10
  %249 = add i32 %248, %9
  %250 = sub i32 %249, %28
  %251 = add i32 %250, %41
  %252 = add i32 %251, %47
  %253 = add i32 %252, %50
  %254 = sub i32 %253, %53
  %255 = add i32 %254, %57
  %256 = sub i32 %255, %79
  %257 = sub i32 %256, %80
  %258 = add i32 %257, %83
  %259 = sub i32 %258, %87
  %260 = sub i32 %259, %46
  %261 = sub i32 %260, %23
  %262 = add i32 %261, %104
  %263 = sub i32 %262, %105
  %264 = add i32 %263, %124
  %265 = sub i32 %264, %138
  %266 = sub i32 %265, %17
  %267 = add i32 %266, %143
  %268 = sub i32 %267, %145
  %269 = add i32 %268, %149
  %270 = add i32 %269, %161
  %271 = add i32 %270, %177
  %272 = sub i32 %271, %178
  %273 = sub i32 %272, %199
  %274 = add i32 %273, %58
  %275 = add i32 %274, %20
  %276 = add i32 %275, %22
  %277 = add i32 %276, %27
  %278 = sub i32 %277, %30
  %279 = add i32 %278, %31
  %280 = add i32 %279, %32
  %281 = add i32 %280, %38
  %282 = add i32 %281, %43
  %283 = add i32 %282, %44
  %284 = add i32 %283, %45
  %285 = add i32 %284, %48
  %286 = sub i32 %285, %52
  %287 = add i32 %286, %62
  %288 = sub i32 %287, %75
  %289 = add i32 %288, %76
  %290 = add i32 %289, %77
  %291 = add i32 %290, %78
  %292 = sub i32 %291, %81
  %293 = sub i32 %292, %85
  %294 = sub i32 %293, %86
  %295 = add i32 %294, %88
  %296 = sub i32 %295, %90
  %297 = sub i32 %296, %92
  %298 = sub i32 %297, %93
  %299 = sub i32 %298, %94
  %300 = sub i32 %299, %95
  %301 = add i32 %300, %96
  %302 = add i32 %301, %97
  %303 = add i32 %302, %98
  %304 = sub i32 %303, %99
  %305 = add i32 %304, %100
  %306 = sub i32 %305, %103
  %307 = sub i32 %306, %109
  %308 = add i32 %307, %110
  %309 = add i32 %308, %114
  %310 = add i32 %309, %115
  %311 = sub i32 %310, %116
  %312 = sub i32 %311, %119
  %313 = add i32 %312, %120
  %314 = add i32 %313, %121
  %315 = add i32 %314, %122
  %316 = sub i32 %315, %123
  %317 = sub i32 %316, %126
  %318 = add i32 %317, %127
  %319 = add i32 %318, %128
  %320 = sub i32 %319, %129
  %321 = sub i32 %320, %130
  %322 = add i32 %321, %131
  %323 = sub i32 %322, %135
  %324 = add i32 %323, %136
  %325 = add i32 %324, %139
  %326 = sub i32 %325, %55
  %327 = add i32 %326, %144
  %328 = sub i32 %327, %146
  %329 = sub i32 %328, %147
  %330 = add i32 %329, %148
  %331 = add i32 %330, %64
  %332 = add i32 %331, %157
  %333 = add i32 %332, %162
  %334 = sub i32 %333, %163
  %335 = add i32 %334, %165
  %336 = sub i32 %335, %167
  %337 = add i32 %336, %168
  %338 = add i32 %337, %169
  %339 = sub i32 %338, %170
  %340 = sub i32 %339, %173
  %341 = add i32 %340, %176
  %342 = add i32 %341, %179
  %343 = add i32 %342, %183
  %344 = add i32 %343, %186
  %345 = sub i32 %344, %187
  %346 = add i32 %345, %188
  %347 = sub i32 %346, %193
  %348 = sub i32 %347, %194
  %349 = sub i32 %348, %198
  %350 = sub i32 %349, %200
  %351 = sub i32 %350, %201
  %352 = sub i32 %351, %202
  %353 = add i32 %352, %203
  %354 = add i32 %353, %204
  %355 = sub i32 %354, %210
  %356 = sub i32 %355, %16
  %357 = sub i32 %356, %25
  %358 = sub i32 %357, %37
  %359 = sub i32 %358, %56
  %360 = sub i32 %359, %61
  %361 = sub i32 %360, %66
  %362 = sub i32 %361, %71
  %363 = add i32 %362, %73
  %364 = add i32 %363, %112
  %365 = sub i32 %364, %118
  %366 = sub i32 %365, %134
  %367 = add i32 %366, %137
  %368 = sub i32 %367, %156
  %369 = sub i32 %368, %160
  %370 = sub i32 %369, %172
  %371 = add i32 %370, %182
  %372 = sub i32 %371, %190
  %373 = sub i32 %372, %192
  %374 = sub i32 %373, %197
  %375 = sub i32 %374, %207
  %376 = sub i32 %375, %209
  %377 = sub i32 %376, %212
  %378 = add i32 %377, %214
  %379 = add i32 %378, %219
  %380 = add i32 %379, %220
  %381 = add i32 %380, %240
  %382 = add i32 %381, %237
  %383 = add i32 %382, %231
  %384 = icmp eq i32 %6, %383
  %385 = select i1 %384, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %386 = tail call i32 @puts(i8* nonnull dereferenceable(1) %385)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
