digraph "DFG for'crackme' function" {
	Node0x9d7b70[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x9d7be0[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x9d8260[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x9d82d0[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x9d8370[shape=record, label="  %9 = sub i32 0, %8"];
	Node0x9d8410[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x9d8480[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x9d84f0[shape=record, label="  %12 = or i32 %10, %1"];
	Node0x9d8560[shape=record, label="  %13 = shl i32 %1, 1"];
	Node0x9d8600[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x9d8670[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x9d86e0[shape=record, label="  %16 = and i32 %10, %1"];
	Node0x9d8750[shape=record, label="  %17 = shl i32 %11, 1"];
	Node0x9d87c0[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x9d8830[shape=record, label="  %19 = and i32 %18, %3"];
	Node0x9d88a0[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x9d8910[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x9d8980[shape=record, label="  %22 = or i32 %18, %3"];
	Node0x9d89f0[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x9d8a60[shape=record, label="  %24 = xor i32 %22, -1"];
	Node0x9d8b00[shape=record, label="  %25 = mul i32 %24, -7"];
	Node0x9d8b70[shape=record, label="  %26 = shl i32 %19, 1"];
	Node0x9d8c10[shape=record, label="  %27 = mul i32 %23, -6"];
	Node0x9d8c80[shape=record, label="  %28 = add i32 %16, %0"];
	Node0x9d8cf0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x9d8d60[shape=record, label="  %30 = add i32 %0, 1"];
	Node0x9d8dd0[shape=record, label="  %31 = add i32 %30, %1"];
	Node0x9d8e40[shape=record, label="  %32 = sub i32 %31, %11"];
	Node0x9d90c0[shape=record, label="  %33 = sub i32 %32, %12"];
	Node0x9d9130[shape=record, label="  %34 = add i32 %33, %14"];
	Node0x9d91a0[shape=record, label="  %35 = sub i32 %34, %15"];
	Node0x9d9210[shape=record, label="  %36 = add i32 %35, %5"];
	Node0x9d9280[shape=record, label="  %37 = sub i32 %36, %17"];
	Node0x9d92f0[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x9d9360[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x9d93d0[shape=record, label="  %40 = sub i32 %39, %22"];
	Node0x9d9440[shape=record, label="  %41 = add i32 %40, %23"];
	Node0x9d94b0[shape=record, label="  %42 = add i32 %41, %25"];
	Node0x9d9520[shape=record, label="  %43 = sub i32 %42, %26"];
	Node0x9d9590[shape=record, label="  %44 = add i32 %43, %27"];
	Node0x9d9600[shape=record, label="  %45 = add i32 %44, %29"];
	Node0x9d9670[shape=record, label="  %46 = icmp eq i32 %45, %9"];
	Node0x978268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x9d9b10[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x9d9b60[shape=record, label="  ret void"];
	Node0x9d7b70 -> Node0x9d7be0;
	Node0x9d7be0 -> Node0x9d8260;
	Node0x9d8260 -> Node0x9d82d0;
	Node0x9d82d0 -> Node0x9d8370;
	Node0x9d8370 -> Node0x9d8410;
	Node0x9d8410 -> Node0x9d8480;
	Node0x9d8480 -> Node0x9d84f0;
	Node0x9d84f0 -> Node0x9d8560;
	Node0x9d8560 -> Node0x9d8600;
	Node0x9d8600 -> Node0x9d8670;
	Node0x9d8670 -> Node0x9d86e0;
	Node0x9d86e0 -> Node0x9d8750;
	Node0x9d8750 -> Node0x9d87c0;
	Node0x9d87c0 -> Node0x9d8830;
	Node0x9d8830 -> Node0x9d88a0;
	Node0x9d88a0 -> Node0x9d8910;
	Node0x9d8910 -> Node0x9d8980;
	Node0x9d8980 -> Node0x9d89f0;
	Node0x9d89f0 -> Node0x9d8a60;
	Node0x9d8a60 -> Node0x9d8b00;
	Node0x9d8b00 -> Node0x9d8b70;
	Node0x9d8b70 -> Node0x9d8c10;
	Node0x9d8c10 -> Node0x9d8c80;
	Node0x9d8c80 -> Node0x9d8cf0;
	Node0x9d8cf0 -> Node0x9d8d60;
	Node0x9d8d60 -> Node0x9d8dd0;
	Node0x9d8dd0 -> Node0x9d8e40;
	Node0x9d8e40 -> Node0x9d90c0;
	Node0x9d90c0 -> Node0x9d9130;
	Node0x9d9130 -> Node0x9d91a0;
	Node0x9d91a0 -> Node0x9d9210;
	Node0x9d9210 -> Node0x9d9280;
	Node0x9d9280 -> Node0x9d92f0;
	Node0x9d92f0 -> Node0x9d9360;
	Node0x9d9360 -> Node0x9d93d0;
	Node0x9d93d0 -> Node0x9d9440;
	Node0x9d9440 -> Node0x9d94b0;
	Node0x9d94b0 -> Node0x9d9520;
	Node0x9d9520 -> Node0x9d9590;
	Node0x9d9590 -> Node0x9d9600;
	Node0x9d9600 -> Node0x9d9670;
	Node0x9d9670 -> Node0x978268;
	Node0x978268 -> Node0x9d9b10;
	Node0x9d9b10 -> Node0x9d9b60;
edge [color=red]
	Node0x9d7be0 -> Node0x9d8260;
	Node0x9d8260 -> Node0x9d82d0;
	Node0x9d7b70 -> Node0x9d82d0;
	Node0x9d82d0 -> Node0x9d8370;
	Node0x9d8410 -> Node0x9d84f0;
	Node0x9d8560 -> Node0x9d8600;
	Node0x9d8410 -> Node0x9d86e0;
	Node0x9d8480 -> Node0x9d8750;
	Node0x9d87c0 -> Node0x9d8830;
	Node0x9d8830 -> Node0x9d88a0;
	Node0x9d87c0 -> Node0x9d8980;
	Node0x9d8980 -> Node0x9d8a60;
	Node0x9d8a60 -> Node0x9d8b00;
	Node0x9d8830 -> Node0x9d8b70;
	Node0x9d89f0 -> Node0x9d8c10;
	Node0x9d86e0 -> Node0x9d8c80;
	Node0x9d8c80 -> Node0x9d8cf0;
	Node0x9d8d60 -> Node0x9d8dd0;
	Node0x9d8dd0 -> Node0x9d8e40;
	Node0x9d8480 -> Node0x9d8e40;
	Node0x9d8e40 -> Node0x9d90c0;
	Node0x9d84f0 -> Node0x9d90c0;
	Node0x9d90c0 -> Node0x9d9130;
	Node0x9d8600 -> Node0x9d9130;
	Node0x9d9130 -> Node0x9d91a0;
	Node0x9d8670 -> Node0x9d91a0;
	Node0x9d91a0 -> Node0x9d9210;
	Node0x9d7b70 -> Node0x9d9210;
	Node0x9d9210 -> Node0x9d9280;
	Node0x9d8750 -> Node0x9d9280;
	Node0x9d9280 -> Node0x9d92f0;
	Node0x9d88a0 -> Node0x9d92f0;
	Node0x9d92f0 -> Node0x9d9360;
	Node0x9d8910 -> Node0x9d9360;
	Node0x9d9360 -> Node0x9d93d0;
	Node0x9d8980 -> Node0x9d93d0;
	Node0x9d93d0 -> Node0x9d9440;
	Node0x9d89f0 -> Node0x9d9440;
	Node0x9d9440 -> Node0x9d94b0;
	Node0x9d8b00 -> Node0x9d94b0;
	Node0x9d94b0 -> Node0x9d9520;
	Node0x9d8b70 -> Node0x9d9520;
	Node0x9d9520 -> Node0x9d9590;
	Node0x9d8c10 -> Node0x9d9590;
	Node0x9d9590 -> Node0x9d9600;
	Node0x9d8cf0 -> Node0x9d9600;
	Node0x9d9600 -> Node0x9d9670;
	Node0x9d8370 -> Node0x9d9670;
	Node0x9d9670 -> Node0x978268;
	Node0x978268 -> Node0x9d9b10;
}
