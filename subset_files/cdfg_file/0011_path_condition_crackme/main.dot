digraph "DFG for'main' function" {
	Node0x129d298[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x129d318[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x129d3a8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x129d808[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x129d8e8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x129da08[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x129dc40[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x129dcf8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x129ec68[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x129f2f0[shape=record, label="  %8 = xor i32 %6, -1"];
	Node0x129f360[shape=record, label="  %9 = xor i32 %7, %8"];
	Node0x129f3d0[shape=record, label="  %10 = or i32 %7, %8"];
	Node0x129f440[shape=record, label="  %11 = add i32 %7, %6"];
	Node0x129f4b0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x129f520[shape=record, label="  %13 = sub i32 1, %10"];
	Node0x129f590[shape=record, label="  %14 = add i32 %13, %12"];
	Node0x129f600[shape=record, label="  %15 = icmp eq i32 %14, %9"];
	Node0x129f688[shape=record, label="  %16 = select i1 %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x129f720[shape=record, label="  %17 = call i32 @puts(i8* nonnull dereferenceable(1) %16) #5"];
	Node0x129f8e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x129fa48[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x129fb08[shape=record, label="  ret i32 0"];
	Node0x129d298 -> Node0x129d318;
	Node0x129d318 -> Node0x129d3a8;
	Node0x129d3a8 -> Node0x129d808;
	Node0x129d808 -> Node0x129d8e8;
	Node0x129d8e8 -> Node0x129da08;
	Node0x129da08 -> Node0x129dc40;
	Node0x129dc40 -> Node0x129dcf8;
	Node0x129dcf8 -> Node0x129ec68;
	Node0x129ec68 -> Node0x129f2f0;
	Node0x129f2f0 -> Node0x129f360;
	Node0x129f360 -> Node0x129f3d0;
	Node0x129f3d0 -> Node0x129f440;
	Node0x129f440 -> Node0x129f4b0;
	Node0x129f4b0 -> Node0x129f520;
	Node0x129f520 -> Node0x129f590;
	Node0x129f590 -> Node0x129f600;
	Node0x129f600 -> Node0x129f688;
	Node0x129f688 -> Node0x129f720;
	Node0x129f720 -> Node0x129f8e8;
	Node0x129f8e8 -> Node0x129fa48;
	Node0x129fa48 -> Node0x129fb08;
edge [color=red]
	Node0x129d298 -> Node0x129d3a8;
	Node0x129d3a8 -> Node0x129d808;
	Node0x129d318 -> Node0x129d8e8;
	Node0x129d8e8 -> Node0x129da08;
	Node0x129d298 -> Node0x129dc40;
	Node0x129d318 -> Node0x129dc40;
	Node0x129d298 -> Node0x129dcf8;
	Node0x129d318 -> Node0x129ec68;
	Node0x129dcf8 -> Node0x129f2f0;
	Node0x129ec68 -> Node0x129f360;
	Node0x129f2f0 -> Node0x129f360;
	Node0x129ec68 -> Node0x129f3d0;
	Node0x129f2f0 -> Node0x129f3d0;
	Node0x129ec68 -> Node0x129f440;
	Node0x129dcf8 -> Node0x129f440;
	Node0x129f440 -> Node0x129f4b0;
	Node0x129f3d0 -> Node0x129f520;
	Node0x129f520 -> Node0x129f590;
	Node0x129f4b0 -> Node0x129f590;
	Node0x129f590 -> Node0x129f600;
	Node0x129f360 -> Node0x129f600;
	Node0x129f600 -> Node0x129f688;
	Node0x129f688 -> Node0x129f720;
	Node0x129d8e8 -> Node0x129f8e8;
	Node0x129d3a8 -> Node0x129fa48;
}
