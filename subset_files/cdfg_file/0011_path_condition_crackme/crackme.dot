digraph "DFG for'crackme' function" {
	Node0x129c880[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x129c8f0[shape=record, label="  %4 = xor i32 %3, %1"];
	Node0x129c9b0[shape=record, label="  %5 = or i32 %3, %1"];
	Node0x129ca20[shape=record, label="  %6 = add i32 %1, %0"];
	Node0x129ca90[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x129cb00[shape=record, label="  %8 = sub i32 1, %5"];
	Node0x129cb70[shape=record, label="  %9 = add i32 %8, %7"];
	Node0x129cbe0[shape=record, label="  %10 = icmp eq i32 %9, %4"];
	Node0x123d388[shape=record, label="  %11 = select i1 %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x129d080[shape=record, label="  %12 = tail call i32 @puts(i8* nonnull dereferenceable(1) %11)"];
	Node0x129d0d0[shape=record, label="  ret void"];
	Node0x129c880 -> Node0x129c8f0;
	Node0x129c8f0 -> Node0x129c9b0;
	Node0x129c9b0 -> Node0x129ca20;
	Node0x129ca20 -> Node0x129ca90;
	Node0x129ca90 -> Node0x129cb00;
	Node0x129cb00 -> Node0x129cb70;
	Node0x129cb70 -> Node0x129cbe0;
	Node0x129cbe0 -> Node0x123d388;
	Node0x123d388 -> Node0x129d080;
	Node0x129d080 -> Node0x129d0d0;
edge [color=red]
	Node0x129c880 -> Node0x129c8f0;
	Node0x129c880 -> Node0x129c9b0;
	Node0x129ca20 -> Node0x129ca90;
	Node0x129c9b0 -> Node0x129cb00;
	Node0x129cb00 -> Node0x129cb70;
	Node0x129ca90 -> Node0x129cb70;
	Node0x129cb70 -> Node0x129cbe0;
	Node0x129c8f0 -> Node0x129cbe0;
	Node0x129cbe0 -> Node0x123d388;
	Node0x123d388 -> Node0x129d080;
}
