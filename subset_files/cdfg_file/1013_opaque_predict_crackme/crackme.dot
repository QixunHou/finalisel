digraph "DFG for'crackme' function" {
	Node0x173b510[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x173bbc0[shape=record, label="  %4 = sub i32 -4, %3"];
	Node0x173bc80[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x173bcf0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x173bd90[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x173be30[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x173bea0[shape=record, label="  %9 = or i32 %8, %0"];
	Node0x173bf10[shape=record, label="  %10 = and i32 %8, %0"];
	Node0x173bf80[shape=record, label="  %11 = shl i32 %8, 1"];
	Node0x173c020[shape=record, label="  %12 = shl i32 %1, 2"];
	Node0x173c090[shape=record, label="  %13 = shl i32 %9, 2"];
	Node0x173c100[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x173c170[shape=record, label="  %15 = shl i32 %10, 1"];
	Node0x173c210[shape=record, label="  %16 = shl i32 %5, 3"];
	Node0x173c280[shape=record, label="  %17 = xor i32 %9, -1"];
	Node0x173c2f0[shape=record, label="  %18 = add i32 %10, %17"];
	Node0x173c360[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x173c3d0[shape=record, label="  %20 = sub i32 %19, %12"];
	Node0x173c440[shape=record, label="  %21 = sub i32 %20, %15"];
	Node0x173c4b0[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x173c520[shape=record, label="  %23 = add i32 %22, %7"];
	Node0x173c590[shape=record, label="  %24 = add i32 %23, %14"];
	Node0x173c600[shape=record, label="  %25 = icmp eq i32 %4, %24"];
	Node0x16dc268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x173caa0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x173caf0[shape=record, label="  ret void"];
	Node0x173b510 -> Node0x173bbc0;
	Node0x173bbc0 -> Node0x173bc80;
	Node0x173bc80 -> Node0x173bcf0;
	Node0x173bcf0 -> Node0x173bd90;
	Node0x173bd90 -> Node0x173be30;
	Node0x173be30 -> Node0x173bea0;
	Node0x173bea0 -> Node0x173bf10;
	Node0x173bf10 -> Node0x173bf80;
	Node0x173bf80 -> Node0x173c020;
	Node0x173c020 -> Node0x173c090;
	Node0x173c090 -> Node0x173c100;
	Node0x173c100 -> Node0x173c170;
	Node0x173c170 -> Node0x173c210;
	Node0x173c210 -> Node0x173c280;
	Node0x173c280 -> Node0x173c2f0;
	Node0x173c2f0 -> Node0x173c360;
	Node0x173c360 -> Node0x173c3d0;
	Node0x173c3d0 -> Node0x173c440;
	Node0x173c440 -> Node0x173c4b0;
	Node0x173c4b0 -> Node0x173c520;
	Node0x173c520 -> Node0x173c590;
	Node0x173c590 -> Node0x173c600;
	Node0x173c600 -> Node0x16dc268;
	Node0x16dc268 -> Node0x173caa0;
	Node0x173caa0 -> Node0x173caf0;
edge [color=red]
	Node0x173b510 -> Node0x173bbc0;
	Node0x173bc80 -> Node0x173bcf0;
	Node0x173bcf0 -> Node0x173bd90;
	Node0x173be30 -> Node0x173bea0;
	Node0x173be30 -> Node0x173bf10;
	Node0x173be30 -> Node0x173bf80;
	Node0x173bea0 -> Node0x173c090;
	Node0x173c090 -> Node0x173c100;
	Node0x173bf10 -> Node0x173c170;
	Node0x173bc80 -> Node0x173c210;
	Node0x173bea0 -> Node0x173c280;
	Node0x173bf10 -> Node0x173c2f0;
	Node0x173c280 -> Node0x173c2f0;
	Node0x173c2f0 -> Node0x173c360;
	Node0x173bf80 -> Node0x173c360;
	Node0x173c360 -> Node0x173c3d0;
	Node0x173c020 -> Node0x173c3d0;
	Node0x173c3d0 -> Node0x173c440;
	Node0x173c170 -> Node0x173c440;
	Node0x173c440 -> Node0x173c4b0;
	Node0x173c210 -> Node0x173c4b0;
	Node0x173c4b0 -> Node0x173c520;
	Node0x173bd90 -> Node0x173c520;
	Node0x173c520 -> Node0x173c590;
	Node0x173c100 -> Node0x173c590;
	Node0x173bbc0 -> Node0x173c600;
	Node0x173c590 -> Node0x173c600;
	Node0x173c600 -> Node0x16dc268;
	Node0x16dc268 -> Node0x173caa0;
}
