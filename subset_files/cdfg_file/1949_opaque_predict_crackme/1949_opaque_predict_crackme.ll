; ModuleID = '../.././c_source_file/1949_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1949_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = and i32 %4, %3
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %10, %0
  %12 = or i32 %2, %0
  %13 = mul i32 %12, 5
  %14 = add i32 %11, 1
  %15 = add i32 %14, %13
  %16 = sub i32 %15, %6
  %17 = add i32 %16, %7
  %18 = xor i32 %4, -1
  %19 = or i32 %18, %3
  %20 = shl i32 %19, 1
  %21 = shl i32 %3, 1
  %22 = or i32 %21, 1
  %23 = xor i32 %4, %3
  %24 = shl i32 %23, 1
  %25 = xor i32 %24, -2
  %26 = shl i32 %6, 1
  %27 = xor i32 %26, -2
  %28 = xor i32 %20, -2
  %29 = and i32 %18, %3
  %30 = shl i32 %29, 2
  %31 = shl i32 %7, 2
  %32 = and i32 %2, %1
  %33 = and i32 %32, %0
  %34 = or i32 %2, %1
  %35 = xor i32 %34, %0
  %36 = or i32 %33, %35
  %37 = or i32 %1, %0
  %38 = xor i32 %37, -1
  %39 = xor i32 %2, %1
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %38
  %42 = or i32 %8, %1
  %43 = xor i32 %42, %0
  %44 = shl i32 %43, 1
  %45 = or i32 %38, %2
  %46 = xor i32 %40, %0
  %47 = and i32 %2, %0
  %48 = xor i32 %47, %37
  %49 = xor i32 %1, -1
  %50 = and i32 %49, %2
  %51 = and i32 %50, %0
  %52 = xor i32 %0, -1
  %53 = or i32 %49, %2
  %54 = and i32 %53, %52
  %55 = xor i32 %51, -1
  %56 = xor i32 %54, %55
  %57 = xor i32 %39, %0
  %58 = and i32 %50, %52
  %59 = or i32 %39, %52
  %60 = xor i32 %58, %59
  %61 = or i32 %49, %0
  %62 = and i32 %61, %8
  %63 = xor i32 %2, %0
  %64 = xor i32 %63, -1
  %65 = and i32 %37, %64
  %66 = and i32 %12, %1
  %67 = xor i32 %47, -1
  %68 = xor i32 %1, %0
  %69 = and i32 %68, %67
  %70 = and i32 %1, %0
  %71 = xor i32 %70, -1
  %72 = add i32 %70, 1
  %73 = and i32 %32, %52
  %74 = and i32 %34, %0
  %75 = or i32 %73, %74
  %76 = xor i32 %32, -1
  %77 = and i32 %76, %52
  %78 = or i32 %70, %2
  %79 = and i32 %49, %0
  %80 = xor i32 %79, -1
  %81 = and i32 %64, %80
  %82 = shl i32 %81, 1
  %83 = and i32 %64, %71
  %84 = and i32 %39, %0
  %85 = or i32 %73, %84
  %86 = xor i32 %68, -1
  %87 = or i32 %86, %2
  %88 = or i32 %10, %52
  %89 = xor i32 %79, %2
  %90 = and i32 %39, %61
  %91 = or i32 %8, %86
  %92 = xor i32 %12, -1
  %93 = or i32 %70, %92
  %94 = xor i32 %80, %2
  %95 = shl i32 %70, 1
  %96 = and i32 %64, %49
  %97 = or i32 %39, %38
  %98 = or i32 %70, %40
  %99 = and i32 %40, %0
  %100 = or i32 %8, %38
  %101 = and i32 %61, %64
  %102 = shl i32 %61, 1
  %103 = and i32 %63, %86
  %104 = and i32 %37, %40
  %105 = and i32 %34, %52
  %106 = shl i32 %105, 1
  %107 = or i32 %63, %49
  %108 = or i32 %40, %52
  %109 = or i32 %68, %8
  %110 = xor i32 %61, %2
  %111 = shl i32 %110, 1
  %112 = or i32 %63, %38
  %113 = xor i32 %12, %1
  %114 = or i32 %33, %105
  %115 = or i32 %68, %64
  %116 = or i32 %63, %79
  %117 = and i32 %10, %0
  %118 = and i32 %63, %49
  %119 = or i32 %92, %49
  %120 = and i32 %68, %2
  %121 = and i32 %68, %8
  %122 = shl i32 %121, 1
  %123 = xor i32 %47, %10
  %124 = shl i32 %123, 1
  %125 = and i32 %40, %52
  %126 = or i32 %42, %52
  %127 = xor i32 %34, -1
  %128 = or i32 %127, %0
  %129 = and i32 %37, %8
  %130 = xor i32 %59, -1
  %131 = or i32 %58, %130
  %132 = or i32 %8, %0
  %133 = xor i32 %132, %70
  %134 = and i32 %86, %2
  %135 = add i32 %9, 1
  %136 = or i32 %40, %0
  %137 = shl i32 %136, 1
  %138 = xor i32 %9, %0
  %139 = or i32 %64, %86
  %140 = xor i32 %73, -1
  %141 = xor i32 %74, %140
  %142 = xor i32 %33, -1
  %143 = xor i32 %35, %142
  %144 = and i32 %8, %0
  %145 = xor i32 %144, %1
  %146 = or i32 %63, %86
  %147 = xor i32 %42, -1
  %148 = xor i32 %147, %0
  %149 = xor i32 %57, -1
  %150 = xor i32 %51, %149
  %151 = and i32 %64, %1
  %152 = or i32 %33, %149
  %153 = and i32 %40, %80
  %154 = xor i32 %132, -1
  %155 = or i32 %68, %154
  %156 = xor i32 %32, %0
  %157 = xor i32 %76, %0
  %158 = or i32 %47, %49
  %159 = xor i32 %33, %57
  %160 = or i32 %9, %79
  %161 = or i32 %63, %68
  %162 = and i32 %132, %49
  %163 = shl i32 %162, 1
  %164 = and i32 %67, %1
  %165 = shl i32 %164, 2
  %166 = or i32 %144, %86
  %167 = xor i32 %12, %70
  %168 = xor i32 %61, -1
  %169 = or i32 %64, %168
  %170 = and i32 %39, %52
  %171 = xor i32 %170, %142
  %172 = or i32 %79, %2
  %173 = or i32 %70, %154
  %174 = or i32 %63, %70
  %175 = or i32 %70, %127
  %176 = and i32 %8, %86
  %177 = xor i32 %42, %70
  %178 = or i32 %9, %0
  %179 = or i32 %47, %38
  %180 = or i32 %40, %168
  %181 = or i32 %34, %52
  %182 = add i32 %132, 1
  %183 = and i32 %42, %52
  %184 = or i32 %76, %0
  %185 = and i32 %39, %37
  %186 = add i32 %63, 1
  %187 = and i32 %63, %80
  %188 = add i32 %32, 1
  %189 = or i32 %144, %1
  %190 = and i32 %71, %2
  %191 = xor i32 %92, %1
  %192 = and i32 %132, %86
  %193 = shl i32 %192, 1
  %194 = xor i32 %144, -1
  %195 = shl i32 %194, 1
  %196 = and i32 %61, %40
  %197 = or i32 %70, %147
  %198 = or i32 %92, %1
  %199 = xor i32 %10, %0
  %200 = or i32 %42, %0
  %201 = xor i32 %47, %61
  %202 = and i32 %8, %71
  %203 = or i32 %64, %38
  %204 = and i32 %194, %49
  %205 = and i32 %67, %49
  %206 = shl i32 %205, 1
  %207 = and i32 %194, %86
  %208 = or i32 %144, %49
  %209 = or i32 %39, %0
  %210 = and i32 %37, %2
  %211 = and i32 %80, %2
  %212 = xor i32 %47, %1
  %213 = or i32 %79, %40
  %214 = or i32 %70, %8
  %215 = or i32 %51, %54
  %216 = add i32 %39, 1
  %217 = or i32 %64, %1
  %218 = or i32 %39, %168
  %219 = shl i32 %218, 1
  %220 = and i32 %53, %0
  %221 = or i32 %58, %220
  %222 = shl i32 %221, 1
  %223 = and i32 %63, %68
  %224 = shl i32 %223, 1
  %225 = or i32 %39, %79
  %226 = xor i32 %84, %140
  %227 = shl i32 %37, 1
  %228 = xor i32 %144, %42
  %229 = shl i32 %228, 1
  %230 = xor i32 %144, %76
  %231 = xor i32 %168, %2
  %232 = xor i32 %105, %142
  %233 = and i32 %40, %71
  %234 = or i32 %63, %1
  %235 = or i32 %144, %32
  %236 = xor i32 %47, %34
  %237 = or i32 %76, %52
  %238 = xor i32 %194, %1
  %239 = and i32 %12, %68
  %240 = or i32 %47, %127
  %241 = and i32 %63, %37
  %242 = and i32 %63, %1
  %243 = add i32 %42, 1
  %244 = or i32 %63, %168
  %245 = or i32 %70, %64
  %246 = or i32 %51, %57
  %247 = and i32 %63, %71
  %248 = or i32 %79, %8
  %249 = xor i32 %37, %2
  %250 = or i32 %79, %64
  %251 = xor i32 %53, %0
  %252 = xor i32 %251, %55
  %253 = or i32 %68, %92
  %254 = and i32 %64, %86
  %255 = shl i32 %254, 1
  %256 = and i32 %12, %49
  %257 = and i32 %39, %80
  %258 = shl i32 %257, 1
  %259 = or i32 %147, %52
  %260 = xor i32 %34, %70
  %261 = xor i32 %67, %1
  %262 = add i32 %2, 1
  %263 = and i32 %12, %86
  %264 = and i32 %194, %1
  %265 = xor i32 %79, %76
  %266 = or i32 %51, %251
  %267 = or i32 %47, %68
  %268 = or i32 %47, %168
  %269 = or i32 %64, %49
  %270 = and i32 %67, %86
  %271 = and i32 %132, %1
  %272 = shl i32 %271, 1
  %273 = or i32 %32, %79
  %274 = xor i32 %71, %2
  %275 = shl i32 %274, 1
  %276 = or i32 %9, %52
  %277 = or i32 %47, %1
  %278 = and i32 %10, %52
  %279 = shl i32 %278, 1
  %280 = or i32 %33, %170
  %281 = shl i32 %280, 1
  %282 = or i32 %92, %86
  %283 = and i32 %132, %68
  %284 = xor i32 %38, %2
  %285 = and i32 %63, %61
  %286 = add i32 %47, 1
  %287 = or i32 %47, %86
  %288 = and i32 %39, %71
  %289 = or i32 %34, %0
  %290 = or i32 %168, %2
  %291 = or i32 %147, %0
  %292 = add i32 %79, 1
  %293 = and i32 %61, %2
  %294 = xor i32 %51, %209
  %295 = and i32 %8, %80
  %296 = xor i32 %79, %10
  %297 = or i32 %154, %49
  %298 = xor i32 %132, %1
  %299 = xor i32 %70, %2
  %300 = xor i32 %209, -1
  %301 = or i32 %51, %300
  %302 = and i32 %76, %0
  %303 = shl i32 %49, 1
  %304 = or i32 %47, %9
  %305 = or i32 %144, %68
  %306 = or i32 %154, %1
  %307 = or i32 %127, %52
  %308 = xor i32 %127, %0
  %309 = or i32 %68, %2
  %310 = shl i32 %309, 1
  %311 = add i32 %37, 1
  %312 = or i32 %39, %70
  %313 = add i32 %12, 1
  %314 = or i32 %144, %147
  %315 = and i32 %127, %52
  %316 = and i32 %9, %52
  %317 = mul i32 %316, 15
  %318 = and i32 %127, %0
  %319 = and i32 %9, %0
  %320 = and i32 %147, %52
  %321 = and i32 %147, %0
  %322 = shl i32 %33, 1
  %323 = add i32 %2, -1
  %324 = add i32 %323, %63
  %325 = add i32 %324, %42
  %326 = add i32 %325, %202
  %327 = add i32 %326, %91
  %328 = add i32 %327, %78
  %329 = add i32 %328, %306
  %330 = add i32 %329, %297
  %331 = add i32 %330, %267
  %332 = add i32 %331, %239
  %333 = add i32 %332, %213
  %334 = add i32 %333, %208
  %335 = add i32 %334, %185
  %336 = add i32 %335, %179
  %337 = add i32 %336, %174
  %338 = add i32 %337, %84
  %339 = add i32 %338, %139
  %340 = add i32 %339, %97
  %341 = add i32 %340, %93
  %342 = add i32 %341, %83
  %343 = add i32 %342, %65
  %344 = add i32 %343, %46
  %345 = add i32 %344, %18
  %346 = add i32 %345, %75
  %347 = add i32 %346, %85
  %348 = shl i32 %347, 1
  %349 = add i32 %315, %186
  %350 = add i32 %349, %320
  %351 = sub i32 %350, %288
  %352 = add i32 %351, %244
  %353 = sub i32 %352, %183
  %354 = mul i32 %353, 3
  %355 = sub i32 %45, %39
  %356 = sub i32 %355, %321
  %357 = add i32 %356, %264
  %358 = sub i32 %357, %260
  %359 = add i32 %358, %36
  %360 = mul i32 %359, 5
  %361 = add i32 %152, %296
  %362 = shl i32 %361, 2
  %363 = sub i32 3, %0
  %364 = sub i32 %363, %0
  %365 = add i32 %364, %72
  %366 = sub i32 %365, %79
  %367 = add i32 %366, %262
  %368 = add i32 %367, %292
  %369 = sub i32 %368, %303
  %370 = add i32 %369, %311
  %371 = add i32 %370, %3
  %372 = sub i32 %371, %62
  %373 = sub i32 %372, %87
  %374 = sub i32 %373, %89
  %375 = add i32 %374, %94
  %376 = sub i32 %375, %95
  %377 = add i32 %376, %100
  %378 = sub i32 %377, %102
  %379 = add i32 %378, %109
  %380 = add i32 %379, %120
  %381 = sub i32 %380, %129
  %382 = add i32 %381, %134
  %383 = add i32 %382, %135
  %384 = add i32 %383, %132
  %385 = add i32 %384, %172
  %386 = add i32 %385, %32
  %387 = sub i32 %386, %176
  %388 = add i32 %387, %182
  %389 = add i32 %388, %188
  %390 = sub i32 %389, %190
  %391 = add i32 %390, %210
  %392 = add i32 %391, %211
  %393 = add i32 %392, %214
  %394 = add i32 %393, %216
  %395 = sub i32 %394, %227
  %396 = add i32 %395, %231
  %397 = add i32 %396, %243
  %398 = add i32 %397, %248
  %399 = add i32 %398, %249
  %400 = sub i32 %399, %9
  %401 = sub i32 %400, %34
  %402 = add i32 %401, %47
  %403 = add i32 %402, %127
  %404 = add i32 %403, %284
  %405 = add i32 %404, %286
  %406 = add i32 %405, %290
  %407 = add i32 %406, %293
  %408 = add i32 %407, %295
  %409 = add i32 %408, %299
  %410 = sub i32 %409, %144
  %411 = add i32 %410, %313
  %412 = add i32 %411, %4
  %413 = sub i32 %412, %41
  %414 = add i32 %413, %48
  %415 = add i32 %414, %57
  %416 = sub i32 %415, %66
  %417 = sub i32 %416, %69
  %418 = add i32 %417, %77
  %419 = add i32 %418, %88
  %420 = sub i32 %419, %90
  %421 = add i32 %420, %96
  %422 = sub i32 %421, %98
  %423 = add i32 %422, %99
  %424 = sub i32 %423, %101
  %425 = sub i32 %424, %103
  %426 = add i32 %425, %104
  %427 = sub i32 %426, %107
  %428 = sub i32 %427, %108
  %429 = sub i32 %428, %111
  %430 = add i32 %429, %112
  %431 = sub i32 %430, %74
  %432 = add i32 %431, %113
  %433 = sub i32 %432, %115
  %434 = add i32 %433, %116
  %435 = add i32 %434, %117
  %436 = add i32 %435, %118
  %437 = add i32 %436, %119
  %438 = sub i32 %437, %122
  %439 = add i32 %438, %125
  %440 = add i32 %439, %126
  %441 = add i32 %440, %128
  %442 = sub i32 %441, %133
  %443 = sub i32 %442, %138
  %444 = add i32 %443, %145
  %445 = sub i32 %444, %146
  %446 = sub i32 %445, %148
  %447 = sub i32 %446, %151
  %448 = sub i32 %447, %153
  %449 = sub i32 %448, %155
  %450 = add i32 %449, %156
  %451 = add i32 %450, %157
  %452 = sub i32 %451, %158
  %453 = add i32 %452, %160
  %454 = sub i32 %453, %161
  %455 = add i32 %454, %166
  %456 = sub i32 %455, %167
  %457 = sub i32 %456, %169
  %458 = sub i32 %457, %173
  %459 = add i32 %458, %175
  %460 = sub i32 %459, %177
  %461 = add i32 %460, %178
  %462 = sub i32 %461, %180
  %463 = sub i32 %462, %181
  %464 = add i32 %463, %184
  %465 = sub i32 %464, %187
  %466 = add i32 %465, %35
  %467 = sub i32 %466, %189
  %468 = sub i32 %467, %191
  %469 = sub i32 %468, %195
  %470 = add i32 %469, %196
  %471 = sub i32 %470, %197
  %472 = add i32 %471, %198
  %473 = sub i32 %472, %199
  %474 = sub i32 %473, %200
  %475 = add i32 %474, %201
  %476 = add i32 %475, %203
  %477 = add i32 %476, %204
  %478 = sub i32 %477, %207
  %479 = add i32 %478, %209
  %480 = sub i32 %479, %212
  %481 = sub i32 %480, %217
  %482 = add i32 %481, %225
  %483 = add i32 %482, %230
  %484 = add i32 %483, %233
  %485 = add i32 %484, %234
  %486 = sub i32 %485, %235
  %487 = sub i32 %486, %236
  %488 = add i32 %487, %237
  %489 = add i32 %488, %238
  %490 = sub i32 %489, %240
  %491 = add i32 %490, %241
  %492 = add i32 %491, %242
  %493 = add i32 %492, %245
  %494 = add i32 %493, %247
  %495 = sub i32 %494, %250
  %496 = sub i32 %495, %253
  %497 = sub i32 %496, %256
  %498 = sub i32 %497, %259
  %499 = add i32 %498, %261
  %500 = sub i32 %499, %263
  %501 = add i32 %500, %265
  %502 = add i32 %501, %268
  %503 = add i32 %502, %170
  %504 = sub i32 %503, %269
  %505 = sub i32 %504, %270
  %506 = add i32 %505, %273
  %507 = sub i32 %506, %275
  %508 = add i32 %507, %276
  %509 = sub i32 %508, %277
  %510 = sub i32 %509, %282
  %511 = add i32 %510, %283
  %512 = add i32 %511, %285
  %513 = add i32 %512, %287
  %514 = add i32 %513, %289
  %515 = sub i32 %514, %291
  %516 = sub i32 %515, %298
  %517 = add i32 %516, %302
  %518 = sub i32 %517, %304
  %519 = add i32 %518, %305
  %520 = sub i32 %519, %307
  %521 = sub i32 %520, %308
  %522 = sub i32 %521, %310
  %523 = sub i32 %522, %312
  %524 = add i32 %523, %314
  %525 = add i32 %524, %318
  %526 = sub i32 %525, %319
  %527 = add i32 %526, %22
  %528 = sub i32 %527, %44
  %529 = sub i32 %528, %56
  %530 = add i32 %529, %60
  %531 = sub i32 %530, %82
  %532 = sub i32 %531, %106
  %533 = sub i32 %532, %114
  %534 = sub i32 %533, %124
  %535 = add i32 %534, %131
  %536 = sub i32 %535, %137
  %537 = add i32 %536, %141
  %538 = add i32 %537, %143
  %539 = add i32 %538, %150
  %540 = sub i32 %539, %159
  %541 = sub i32 %540, %163
  %542 = sub i32 %541, %165
  %543 = sub i32 %542, %171
  %544 = sub i32 %543, %193
  %545 = sub i32 %544, %206
  %546 = add i32 %545, %215
  %547 = sub i32 %546, %219
  %548 = sub i32 %547, %224
  %549 = sub i32 %548, %226
  %550 = sub i32 %549, %229
  %551 = add i32 %550, %232
  %552 = add i32 %551, %246
  %553 = sub i32 %552, %252
  %554 = sub i32 %553, %255
  %555 = sub i32 %554, %258
  %556 = add i32 %555, %266
  %557 = sub i32 %556, %272
  %558 = sub i32 %557, %279
  %559 = sub i32 %558, %294
  %560 = sub i32 %559, %301
  %561 = add i32 %560, %317
  %562 = sub i32 %561, %322
  %563 = sub i32 %562, %20
  %564 = sub i32 %563, %30
  %565 = sub i32 %564, %31
  %566 = sub i32 %565, %222
  %567 = sub i32 %566, %281
  %568 = add i32 %567, %25
  %569 = sub i32 %568, %27
  %570 = sub i32 %569, %28
  %571 = add i32 %570, %362
  %572 = add i32 %571, %354
  %573 = add i32 %572, %360
  %574 = add i32 %573, %348
  %575 = icmp eq i32 %17, %574
  %576 = select i1 %575, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %577 = tail call i32 @puts(i8* nonnull dereferenceable(1) %576)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
