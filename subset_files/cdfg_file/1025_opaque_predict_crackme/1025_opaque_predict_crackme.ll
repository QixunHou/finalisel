; ModuleID = '../.././c_source_file/1025_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1025_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = mul i32 %4, -3
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %1, %0
  %10 = or i32 %8, %9
  %11 = add i32 %6, %10
  %12 = xor i32 %4, %3
  %13 = xor i32 %12, -1
  %14 = or i32 %4, %3
  %15 = shl i32 %14, 2
  %16 = xor i32 %4, -1
  %17 = or i32 %16, %3
  %18 = and i32 %16, %3
  %19 = shl i32 %3, 1
  %20 = xor i32 %14, -1
  %21 = xor i32 %17, -1
  %22 = and i32 %4, %3
  %23 = xor i32 %1, -1
  %24 = or i32 %23, %0
  %25 = and i32 %24, %7
  %26 = and i32 %2, %0
  %27 = xor i32 %26, %1
  %28 = xor i32 %0, -1
  %29 = and i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %28
  %32 = add i32 %29, 1
  %33 = or i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %34, %2
  %36 = and i32 %1, %0
  %37 = or i32 %36, %2
  %38 = xor i32 %2, %1
  %39 = or i32 %38, %28
  %40 = or i32 %2, %0
  %41 = and i32 %40, %1
  %42 = xor i32 %9, -1
  %43 = and i32 %42, %2
  %44 = shl i32 %43, 1
  %45 = xor i32 %30, %0
  %46 = or i32 %7, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %36, %47
  %49 = shl i32 %48, 1
  %50 = xor i32 %24, %2
  %51 = xor i32 %2, %0
  %52 = or i32 %51, %23
  %53 = and i32 %51, %33
  %54 = or i32 %7, %1
  %55 = and i32 %7, %1
  %56 = xor i32 %55, -1
  %57 = xor i32 %26, %56
  %58 = xor i32 %54, -1
  %59 = or i32 %8, %42
  %60 = and i32 %40, %9
  %61 = xor i32 %24, -1
  %62 = xor i32 %61, %2
  %63 = or i32 %2, %1
  %64 = xor i32 %63, -1
  %65 = or i32 %26, %23
  %66 = or i32 %54, %0
  %67 = xor i32 %36, %2
  %68 = or i32 %26, %34
  %69 = or i32 %26, %61
  %70 = and i32 %29, %28
  %71 = and i32 %38, %0
  %72 = or i32 %70, %71
  %73 = and i32 %23, %0
  %74 = xor i32 %51, -1
  %75 = or i32 %73, %74
  %76 = xor i32 %26, %33
  %77 = and i32 %33, %74
  %78 = or i32 %26, %9
  %79 = or i32 %36, %7
  %80 = or i32 %55, %0
  %81 = and i32 %23, %2
  %82 = and i32 %81, %0
  %83 = or i32 %23, %2
  %84 = and i32 %83, %28
  %85 = or i32 %82, %84
  %86 = or i32 %9, %47
  %87 = xor i32 %8, -1
  %88 = xor i32 %87, %1
  %89 = and i32 %9, %87
  %90 = shl i32 %73, 1
  %91 = and i32 %87, %23
  %92 = and i32 %46, %23
  %93 = and i32 %51, %1
  %94 = xor i32 %26, %63
  %95 = or i32 %26, %42
  %96 = or i32 %38, %0
  %97 = xor i32 %96, -1
  %98 = or i32 %82, %97
  %99 = shl i32 %2, 1
  %100 = xor i32 %40, -1
  %101 = or i32 %9, %2
  %102 = xor i32 %40, %1
  %103 = or i32 %56, %0
  %104 = and i32 %24, %2
  %105 = shl i32 %104, 1
  %106 = and i32 %46, %42
  %107 = and i32 %29, %0
  %108 = and i32 %63, %28
  %109 = or i32 %107, %108
  %110 = xor i32 %73, -1
  %111 = and i32 %51, %110
  %112 = xor i32 %54, %0
  %113 = xor i32 %36, -1
  %114 = and i32 %51, %113
  %115 = or i32 %29, %0
  %116 = xor i32 %29, %0
  %117 = or i32 %7, %61
  %118 = and i32 %38, %28
  %119 = or i32 %8, %1
  %120 = or i32 %36, %74
  %121 = and i32 %7, %42
  %122 = or i32 %55, %28
  %123 = shl i32 %122, 1
  %124 = add i32 %9, 1
  %125 = xor i32 %38, %0
  %126 = xor i32 %125, -1
  %127 = or i32 %107, %126
  %128 = xor i32 %26, -1
  %129 = xor i32 %128, %1
  %130 = and i32 %87, %1
  %131 = xor i32 %63, %0
  %132 = and i32 %87, %42
  %133 = or i32 %38, %36
  %134 = and i32 %54, %0
  %135 = or i32 %74, %1
  %136 = xor i32 %33, %2
  %137 = shl i32 %136, 1
  %138 = xor i32 %58, %0
  %139 = shl i32 %138, 1
  %140 = or i32 %47, %1
  %141 = or i32 %100, %23
  %142 = xor i32 %83, %0
  %143 = or i32 %82, %142
  %144 = and i32 %46, %9
  %145 = xor i32 %38, -1
  %146 = and i32 %33, %145
  %147 = and i32 %145, %113
  %148 = or i32 %56, %28
  %149 = xor i32 %73, %30
  %150 = and i32 %128, %42
  %151 = and i32 %74, %113
  %152 = or i32 %34, %2
  %153 = or i32 %74, %23
  %154 = or i32 %29, %73
  %155 = or i32 %9, %100
  %156 = xor i32 %54, %36
  %157 = and i32 %81, %28
  %158 = and i32 %83, %0
  %159 = xor i32 %158, -1
  %160 = xor i32 %157, %159
  %161 = and i32 %38, %24
  %162 = shl i32 %161, 1
  %163 = xor i32 %113, %2
  %164 = and i32 %30, %28
  %165 = and i32 %113, %2
  %166 = or i32 %51, %34
  %167 = and i32 %74, %42
  %168 = shl i32 %167, 1
  %169 = and i32 %128, %1
  %170 = and i32 %33, %2
  %171 = or i32 %145, %28
  %172 = shl i32 %7, 2
  %173 = or i32 %51, %36
  %174 = add i32 %73, 1
  %175 = xor i32 %26, %24
  %176 = shl i32 %175, 1
  %177 = or i32 %36, %100
  %178 = or i32 %36, %145
  %179 = or i32 %157, %158
  %180 = shl i32 %179, 1
  %181 = and i32 %74, %1
  %182 = or i32 %54, %28
  %183 = and i32 %9, %74
  %184 = or i32 %7, %34
  %185 = and i32 %56, %28
  %186 = or i32 %63, %28
  %187 = xor i32 %39, -1
  %188 = or i32 %157, %187
  %189 = and i32 %46, %1
  %190 = or i32 %8, %58
  %191 = or i32 %38, %61
  %192 = or i32 %47, %42
  %193 = and i32 %9, %7
  %194 = or i32 %74, %61
  %195 = shl i32 %194, 2
  %196 = xor i32 %108, -1
  %197 = xor i32 %107, %196
  %198 = and i32 %51, %23
  %199 = and i32 %54, %28
  %200 = shl i32 %199, 1
  %201 = and i32 %7, %113
  %202 = xor i32 %73, %56
  %203 = or i32 %26, %55
  %204 = xor i32 %82, %126
  %205 = shl i32 %204, 1
  %206 = and i32 %9, %2
  %207 = or i32 %145, %61
  %208 = and i32 %30, %0
  %209 = xor i32 %8, %30
  %210 = xor i32 %142, -1
  %211 = xor i32 %82, %210
  %212 = shl i32 %128, 1
  %213 = and i32 %24, %74
  %214 = xor i32 %8, %54
  %215 = or i32 %38, %73
  %216 = shl i32 %215, 1
  %217 = or i32 %42, %2
  %218 = and i32 %40, %42
  %219 = or i32 %82, %125
  %220 = shl i32 %219, 1
  %221 = xor i32 %82, %96
  %222 = or i32 %30, %0
  %223 = shl i32 %222, 1
  %224 = or i32 %9, %7
  %225 = and i32 %145, %110
  %226 = and i32 %24, %145
  %227 = xor i32 %71, -1
  %228 = xor i32 %70, %227
  %229 = or i32 %8, %29
  %230 = and i32 %51, %42
  %231 = or i32 %100, %1
  %232 = shl i32 %28, 1
  %233 = add i32 %1, 1
  %234 = shl i32 %108, 1
  %235 = and i32 %33, %7
  %236 = and i32 %74, %110
  %237 = or i32 %61, %2
  %238 = and i32 %63, %0
  %239 = xor i32 %8, %1
  %240 = or i32 %9, %74
  %241 = shl i32 %240, 1
  %242 = xor i32 %110, %2
  %243 = shl i32 %242, 1
  %244 = or i32 %8, %23
  %245 = and i32 %145, %0
  %246 = and i32 %40, %23
  %247 = and i32 %145, %28
  %248 = add i32 %8, 1
  %249 = shl i32 %61, 2
  %250 = and i32 %38, %110
  %251 = and i32 %51, %24
  %252 = xor i32 %55, %0
  %253 = or i32 %73, %2
  %254 = and i32 %64, %28
  %255 = mul i32 %254, 22
  %256 = and i32 %55, %28
  %257 = mul i32 %256, 27
  %258 = and i32 %64, %0
  %259 = mul i32 %258, -6
  %260 = and i32 %55, %0
  %261 = and i32 %58, %28
  %262 = mul i32 %261, 23
  %263 = and i32 %58, %0
  %264 = mul i32 %107, 14
  %265 = add i32 %22, %21
  %266 = mul i32 %265, 7
  %267 = add i32 %18, %263
  %268 = mul i32 %267, 11
  %269 = or i32 %70, %260
  %270 = shl i32 %269, 3
  %271 = add i32 %245, %146
  %272 = shl i32 %271, 2
  %273 = add i32 %77, %20
  %274 = mul i32 %273, 3
  %275 = sub i32 -2, %36
  %276 = add i32 %275, %34
  %277 = add i32 %276, %235
  %278 = add i32 %277, %224
  %279 = add i32 %278, %163
  %280 = add i32 %279, %46
  %281 = add i32 %280, %67
  %282 = add i32 %281, %247
  %283 = add i32 %282, %252
  %284 = add i32 %283, %238
  %285 = add i32 %284, %154
  %286 = add i32 %285, %150
  %287 = add i32 %286, %76
  %288 = add i32 %287, %75
  %289 = add i32 %288, %53
  %290 = shl i32 %289, 1
  %291 = sub i32 5, %1
  %292 = sub i32 %291, %232
  %293 = add i32 %292, %233
  %294 = add i32 %293, %124
  %295 = add i32 %294, %33
  %296 = add i32 %295, %174
  %297 = sub i32 %296, %24
  %298 = sub i32 %297, %9
  %299 = sub i32 %298, %3
  %300 = sub i32 %299, %25
  %301 = add i32 %300, %32
  %302 = sub i32 %301, %35
  %303 = sub i32 %302, %37
  %304 = add i32 %303, %50
  %305 = sub i32 %304, %54
  %306 = add i32 %305, %58
  %307 = add i32 %306, %62
  %308 = add i32 %307, %64
  %309 = sub i32 %308, %79
  %310 = sub i32 %309, %90
  %311 = sub i32 %310, %99
  %312 = sub i32 %311, %101
  %313 = add i32 %312, %117
  %314 = add i32 %313, %121
  %315 = sub i32 %314, %152
  %316 = sub i32 %315, %165
  %317 = sub i32 %316, %170
  %318 = sub i32 %317, %172
  %319 = add i32 %318, %55
  %320 = add i32 %319, %47
  %321 = add i32 %320, %184
  %322 = sub i32 %321, %193
  %323 = sub i32 %322, %201
  %324 = sub i32 %323, %206
  %325 = sub i32 %324, %217
  %326 = add i32 %325, %51
  %327 = add i32 %326, %237
  %328 = add i32 %327, %248
  %329 = sub i32 %328, %249
  %330 = add i32 %329, %253
  %331 = sub i32 %330, %19
  %332 = sub i32 %331, %27
  %333 = sub i32 %332, %31
  %334 = add i32 %333, %39
  %335 = add i32 %334, %41
  %336 = sub i32 %335, %44
  %337 = sub i32 %336, %45
  %338 = add i32 %337, %52
  %339 = add i32 %338, %57
  %340 = sub i32 %339, %59
  %341 = add i32 %340, %60
  %342 = sub i32 %341, %65
  %343 = add i32 %342, %66
  %344 = add i32 %343, %68
  %345 = sub i32 %344, %69
  %346 = sub i32 %345, %78
  %347 = add i32 %346, %80
  %348 = sub i32 %347, %86
  %349 = add i32 %348, %88
  %350 = add i32 %349, %89
  %351 = sub i32 %350, %91
  %352 = sub i32 %351, %92
  %353 = sub i32 %352, %93
  %354 = add i32 %353, %94
  %355 = add i32 %354, %95
  %356 = add i32 %355, %102
  %357 = sub i32 %356, %103
  %358 = sub i32 %357, %105
  %359 = sub i32 %358, %106
  %360 = add i32 %359, %111
  %361 = sub i32 %360, %112
  %362 = add i32 %361, %114
  %363 = sub i32 %362, %115
  %364 = sub i32 %363, %116
  %365 = add i32 %364, %118
  %366 = add i32 %365, %119
  %367 = add i32 %366, %120
  %368 = sub i32 %367, %129
  %369 = add i32 %368, %130
  %370 = sub i32 %369, %131
  %371 = add i32 %370, %132
  %372 = add i32 %371, %133
  %373 = add i32 %372, %134
  %374 = sub i32 %373, %135
  %375 = sub i32 %374, %137
  %376 = add i32 %375, %140
  %377 = sub i32 %376, %141
  %378 = sub i32 %377, %144
  %379 = add i32 %378, %147
  %380 = sub i32 %379, %148
  %381 = sub i32 %380, %149
  %382 = sub i32 %381, %151
  %383 = add i32 %382, %153
  %384 = add i32 %383, %155
  %385 = add i32 %384, %156
  %386 = sub i32 %385, %164
  %387 = add i32 %386, %166
  %388 = add i32 %387, %169
  %389 = add i32 %388, %171
  %390 = sub i32 %389, %173
  %391 = sub i32 %390, %177
  %392 = add i32 %391, %178
  %393 = add i32 %392, %71
  %394 = sub i32 %393, %181
  %395 = sub i32 %394, %182
  %396 = sub i32 %395, %183
  %397 = add i32 %396, %185
  %398 = sub i32 %397, %186
  %399 = sub i32 %398, %189
  %400 = add i32 %399, %190
  %401 = add i32 %400, %191
  %402 = add i32 %401, %192
  %403 = add i32 %402, %198
  %404 = sub i32 %403, %202
  %405 = sub i32 %404, %203
  %406 = sub i32 %405, %207
  %407 = add i32 %406, %96
  %408 = add i32 %407, %208
  %409 = sub i32 %408, %209
  %410 = sub i32 %409, %212
  %411 = sub i32 %410, %213
  %412 = add i32 %411, %214
  %413 = add i32 %412, %218
  %414 = sub i32 %413, %225
  %415 = add i32 %414, %226
  %416 = sub i32 %415, %229
  %417 = sub i32 %416, %230
  %418 = sub i32 %417, %231
  %419 = sub i32 %418, %236
  %420 = add i32 %419, %239
  %421 = sub i32 %420, %243
  %422 = sub i32 %421, %244
  %423 = add i32 %422, %246
  %424 = sub i32 %423, %250
  %425 = add i32 %424, %251
  %426 = add i32 %425, %13
  %427 = add i32 %426, %17
  %428 = sub i32 %427, %12
  %429 = add i32 %428, %18
  %430 = sub i32 %429, %49
  %431 = add i32 %430, %72
  %432 = add i32 %431, %85
  %433 = add i32 %432, %98
  %434 = sub i32 %433, %109
  %435 = sub i32 %434, %123
  %436 = add i32 %435, %127
  %437 = sub i32 %436, %139
  %438 = sub i32 %437, %143
  %439 = sub i32 %438, %160
  %440 = sub i32 %439, %162
  %441 = sub i32 %440, %168
  %442 = sub i32 %441, %176
  %443 = sub i32 %442, %188
  %444 = sub i32 %443, %195
  %445 = add i32 %444, %197
  %446 = sub i32 %445, %200
  %447 = sub i32 %446, %211
  %448 = sub i32 %447, %216
  %449 = sub i32 %448, %221
  %450 = sub i32 %449, %223
  %451 = add i32 %450, %228
  %452 = sub i32 %451, %234
  %453 = sub i32 %452, %241
  %454 = add i32 %453, %255
  %455 = add i32 %454, %257
  %456 = add i32 %455, %259
  %457 = add i32 %456, %262
  %458 = add i32 %457, %264
  %459 = sub i32 %458, %15
  %460 = sub i32 %459, %180
  %461 = sub i32 %460, %205
  %462 = sub i32 %461, %220
  %463 = add i32 %462, %270
  %464 = add i32 %463, %272
  %465 = add i32 %464, %266
  %466 = add i32 %465, %268
  %467 = add i32 %466, %274
  %468 = add i32 %467, %290
  %469 = icmp eq i32 %11, %468
  %470 = select i1 %469, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %471 = tail call i32 @puts(i8* nonnull dereferenceable(1) %470)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
