; ModuleID = '../.././c_source_file/0693_path_condition_crackme.c'
source_filename = "../.././c_source_file/0693_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %2
  %10 = xor i32 %3, -1
  %11 = or i32 %10, %4
  %12 = xor i32 %5, %3
  %13 = and i32 %12, %11
  %14 = sub i32 %13, %9
  %15 = xor i32 %2, %0
  %16 = xor i32 %15, -1
  %17 = and i32 %7, %16
  %18 = xor i32 %1, -1
  %19 = and i32 %18, %2
  %20 = and i32 %19, %0
  %21 = xor i32 %2, %1
  %22 = xor i32 %21, %0
  %23 = xor i32 %22, 2147483647
  %24 = xor i32 %23, %20
  %25 = shl i32 %24, 1
  %26 = and i32 %1, %0
  %27 = or i32 %15, %26
  %28 = xor i32 %2, -1
  %29 = or i32 %18, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %28, %30
  %32 = or i32 %28, %8
  %33 = xor i32 %26, -1
  %34 = and i32 %15, %33
  %35 = or i32 %8, %2
  %36 = and i32 %2, %1
  %37 = and i32 %36, %0
  %38 = xor i32 %0, -1
  %39 = or i32 %2, %1
  %40 = and i32 %39, %38
  %41 = or i32 %37, %40
  %42 = and i32 %2, %0
  %43 = xor i32 %42, %39
  %44 = and i32 %15, %29
  %45 = or i32 %28, %0
  %46 = and i32 %45, %8
  %47 = xor i32 %45, -1
  %48 = add i32 %45, 1
  %49 = and i32 %18, %0
  %50 = xor i32 %49, -1
  %51 = and i32 %21, %50
  %52 = and i32 %28, %1
  %53 = add i32 %0, 1
  %54 = and i32 %28, %50
  %55 = xor i32 %42, %29
  %56 = xor i32 %42, -1
  %57 = and i32 %7, %56
  %58 = and i32 %28, %0
  %59 = and i32 %21, %38
  %60 = or i32 %37, %59
  %61 = or i32 %26, %28
  %62 = or i32 %28, %1
  %63 = xor i32 %58, %62
  %64 = xor i32 %52, -1
  %65 = xor i32 %64, %0
  %66 = and i32 %16, %33
  %67 = and i32 %33, %2
  %68 = or i32 %39, %38
  %69 = shl i32 %68, 1
  %70 = xor i32 %21, -1
  %71 = and i32 %70, %38
  %72 = xor i32 %36, -1
  %73 = and i32 %72, %0
  %74 = or i32 %2, %0
  %75 = and i32 %74, %18
  %76 = or i32 %72, %38
  %77 = or i32 %15, %7
  %78 = and i32 %16, %1
  %79 = and i32 %70, %50
  %80 = and i32 %45, %7
  %81 = shl i32 %80, 1
  %82 = or i32 %64, %38
  %83 = or i32 %58, %36
  %84 = shl i32 %83, 1
  %85 = xor i32 %39, -1
  %86 = add i32 %39, 1
  %87 = or i32 %30, %2
  %88 = or i32 %26, %85
  %89 = xor i32 %45, %26
  %90 = and i32 %56, %1
  %91 = xor i32 %58, -1
  %92 = and i32 %7, %91
  %93 = or i32 %21, %26
  %94 = shl i32 %93, 1
  %95 = xor i32 %50, %2
  %96 = shl i32 %95, 1
  %97 = xor i32 %74, -1
  %98 = or i32 %97, %8
  %99 = and i32 %56, %8
  %100 = shl i32 %99, 1
  %101 = and i32 %21, %0
  %102 = or i32 %20, %22
  %103 = shl i32 %102, 1
  %104 = or i32 %1, %0
  %105 = xor i32 %104, -1
  %106 = or i32 %21, %105
  %107 = or i32 %26, %47
  %108 = or i32 %42, %18
  %109 = add i32 %15, 1
  %110 = and i32 %21, %29
  %111 = or i32 %105, %2
  %112 = or i32 %58, %7
  %113 = and i32 %21, %104
  %114 = or i32 %42, %105
  %115 = xor i32 %47, %1
  %116 = or i32 %49, %16
  %117 = add i32 %21, 1
  %118 = or i32 %16, %1
  %119 = and i32 %15, %7
  %120 = and i32 %70, %33
  %121 = xor i32 %62, -1
  %122 = xor i32 %121, %0
  %123 = and i32 %15, %1
  %124 = or i32 %7, %28
  %125 = or i32 %26, %2
  %126 = xor i32 %40, 2147483647
  %127 = xor i32 %126, %37
  %128 = or i32 %42, %85
  %129 = and i32 %19, %38
  %130 = or i32 %21, %38
  %131 = xor i32 %129, %130
  %132 = shl i32 %131, 1
  %133 = or i32 %42, %8
  %134 = xor i32 %45, %1
  %135 = or i32 %18, %2
  %136 = and i32 %135, %0
  %137 = or i32 %129, %136
  %138 = or i32 %85, %38
  %139 = or i32 %47, %1
  %140 = or i32 %70, %38
  %141 = xor i32 %42, %64
  %142 = or i32 %97, %1
  %143 = xor i32 %70, %0
  %144 = or i32 %85, %0
  %145 = and i32 %16, %8
  %146 = and i32 %104, %28
  %147 = and i32 %74, %1
  %148 = and i32 %64, %38
  %149 = or i32 %49, %28
  %150 = or i32 %36, %38
  %151 = xor i32 %104, %2
  %152 = xor i32 %59, -1
  %153 = xor i32 %37, %152
  %154 = or i32 %15, %1
  %155 = or i32 %7, %16
  %156 = or i32 %21, %0
  %157 = xor i32 %156, -1
  %158 = or i32 %20, %157
  %159 = or i32 %47, %8
  %160 = xor i32 %42, %1
  %161 = add i32 %29, 1
  %162 = xor i32 %105, %2
  %163 = or i32 %47, %18
  %164 = shl i32 %163, 1
  %165 = or i32 %42, %30
  %166 = or i32 %16, %105
  %167 = or i32 %42, %1
  %168 = xor i32 %49, %2
  %169 = xor i32 %42, %104
  %170 = and i32 %104, %2
  %171 = shl i32 %170, 2
  %172 = xor i32 %58, %72
  %173 = xor i32 %33, %2
  %174 = or i32 %121, %0
  %175 = and i32 %85, %38
  %176 = mul i32 %175, 13
  %177 = and i32 %52, %38
  %178 = mul i32 %177, 7
  %179 = and i32 %85, %0
  %180 = and i32 %52, %0
  %181 = mul i32 %180, 9
  %182 = and i32 %121, %38
  %183 = shl i32 %182, 2
  %184 = and i32 %36, %38
  %185 = mul i32 %184, 21
  %186 = and i32 %121, %0
  %187 = mul i32 %186, 18
  %188 = mul i32 %37, 11
  %189 = xor i32 %5, -1
  %190 = and i32 %189, %4
  %191 = and i32 %5, %3
  %192 = xor i32 %191, -1
  %193 = xor i32 %190, %192
  %194 = and i32 %5, %4
  %195 = xor i32 %194, %11
  %196 = or i32 %189, %3
  %197 = xor i32 %196, -1
  %198 = or i32 %190, %197
  %199 = shl i32 %198, 1
  %200 = or i32 %194, %3
  %201 = or i32 %190, %10
  %202 = or i32 %189, %4
  %203 = and i32 %202, %3
  %204 = xor i32 %4, -1
  %205 = and i32 %12, %204
  %206 = and i32 %4, %3
  %207 = xor i32 %5, %4
  %208 = or i32 %207, %206
  %209 = and i32 %189, %3
  %210 = and i32 %209, %204
  %211 = shl i32 %210, 2
  %212 = or i32 %5, %3
  %213 = xor i32 %212, 2147483647
  %214 = and i32 %213, %4
  %215 = and i32 %209, %4
  %216 = and i32 %197, %204
  %217 = and i32 %191, %204
  %218 = and i32 %197, %4
  %219 = and i32 %191, %4
  %220 = sub i32 -2, %2
  %221 = add i32 %220, %162
  %222 = add i32 %221, %67
  %223 = add i32 %222, %172
  %224 = add i32 %223, %155
  %225 = add i32 %224, %148
  %226 = add i32 %225, %133
  %227 = add i32 %226, %123
  %228 = add i32 %227, %122
  %229 = add i32 %228, %127
  %230 = add i32 %229, %216
  %231 = add i32 %230, %215
  %232 = add i32 %231, %203
  %233 = add i32 %232, %214
  %234 = shl i32 %233, 1
  %235 = sub i32 %26, %120
  %236 = sub i32 %235, %76
  %237 = add i32 %236, %65
  %238 = sub i32 %237, %219
  %239 = mul i32 %238, 3
  %240 = add i32 %54, %109
  %241 = add i32 %240, %108
  %242 = mul i32 %241, 5
  %243 = add i32 %218, %179
  %244 = shl i32 %243, 2
  %245 = sub i32 %53, %49
  %246 = sub i32 %245, %29
  %247 = add i32 %246, %2
  %248 = add i32 %247, %161
  %249 = sub i32 %248, %31
  %250 = sub i32 %249, %32
  %251 = sub i32 %250, %35
  %252 = add i32 %251, %48
  %253 = add i32 %252, %52
  %254 = add i32 %253, %58
  %255 = sub i32 %254, %61
  %256 = add i32 %255, %56
  %257 = add i32 %256, %86
  %258 = sub i32 %257, %87
  %259 = sub i32 %258, %21
  %260 = sub i32 %259, %111
  %261 = add i32 %260, %117
  %262 = sub i32 %261, %124
  %263 = sub i32 %262, %125
  %264 = sub i32 %263, %146
  %265 = add i32 %264, %149
  %266 = add i32 %265, %151
  %267 = sub i32 %266, %168
  %268 = add i32 %267, %173
  %269 = sub i32 %268, %42
  %270 = add i32 %269, %17
  %271 = add i32 %270, %27
  %272 = add i32 %271, %34
  %273 = add i32 %272, %43
  %274 = sub i32 %273, %44
  %275 = sub i32 %274, %46
  %276 = add i32 %275, %51
  %277 = sub i32 %276, %55
  %278 = sub i32 %277, %57
  %279 = add i32 %278, %63
  %280 = sub i32 %279, %66
  %281 = sub i32 %280, %71
  %282 = add i32 %281, %73
  %283 = add i32 %282, %75
  %284 = add i32 %283, %77
  %285 = add i32 %284, %78
  %286 = add i32 %285, %79
  %287 = sub i32 %286, %82
  %288 = sub i32 %287, %88
  %289 = add i32 %288, %89
  %290 = sub i32 %289, %90
  %291 = sub i32 %290, %92
  %292 = sub i32 %291, %96
  %293 = sub i32 %292, %98
  %294 = sub i32 %293, %101
  %295 = add i32 %294, %106
  %296 = sub i32 %295, %107
  %297 = add i32 %296, %110
  %298 = add i32 %297, %112
  %299 = sub i32 %298, %113
  %300 = sub i32 %299, %114
  %301 = sub i32 %300, %115
  %302 = add i32 %301, %116
  %303 = add i32 %302, %59
  %304 = sub i32 %303, %118
  %305 = sub i32 %304, %119
  %306 = sub i32 %305, %128
  %307 = sub i32 %306, %134
  %308 = add i32 %307, %138
  %309 = sub i32 %308, %139
  %310 = add i32 %309, %140
  %311 = sub i32 %310, %141
  %312 = sub i32 %311, %142
  %313 = sub i32 %312, %143
  %314 = sub i32 %313, %144
  %315 = sub i32 %314, %145
  %316 = sub i32 %315, %147
  %317 = add i32 %316, %150
  %318 = add i32 %317, %154
  %319 = sub i32 %318, %159
  %320 = add i32 %319, %22
  %321 = sub i32 %320, %160
  %322 = add i32 %321, %165
  %323 = sub i32 %322, %166
  %324 = add i32 %323, %167
  %325 = sub i32 %324, %169
  %326 = sub i32 %325, %171
  %327 = sub i32 %326, %174
  %328 = sub i32 %327, %41
  %329 = add i32 %328, %60
  %330 = sub i32 %329, %69
  %331 = sub i32 %330, %81
  %332 = sub i32 %331, %84
  %333 = sub i32 %332, %94
  %334 = sub i32 %333, %100
  %335 = add i32 %334, %137
  %336 = sub i32 %335, %153
  %337 = sub i32 %336, %158
  %338 = sub i32 %337, %164
  %339 = add i32 %338, %176
  %340 = add i32 %339, %178
  %341 = add i32 %340, %181
  %342 = sub i32 %341, %183
  %343 = add i32 %342, %185
  %344 = add i32 %343, %187
  %345 = add i32 %344, %188
  %346 = sub i32 %345, %103
  %347 = sub i32 %346, %132
  %348 = add i32 %347, %196
  %349 = sub i32 %348, %25
  %350 = add i32 %349, %193
  %351 = sub i32 %350, %195
  %352 = sub i32 %351, %200
  %353 = sub i32 %352, %201
  %354 = add i32 %353, %205
  %355 = add i32 %354, %208
  %356 = sub i32 %355, %217
  %357 = add i32 %356, %242
  %358 = sub i32 %357, %199
  %359 = sub i32 %358, %211
  %360 = add i32 %359, %244
  %361 = add i32 %360, %239
  %362 = add i32 %361, %234
  %363 = icmp eq i32 %14, %362
  %364 = select i1 %363, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %365 = tail call i32 @puts(i8* nonnull dereferenceable(1) %364)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
