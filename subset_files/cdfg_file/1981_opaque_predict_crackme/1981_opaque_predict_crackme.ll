; ModuleID = '../.././c_source_file/1981_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1981_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %3, -1
  %11 = or i32 %10, %4
  %12 = sub i32 %9, %11
  %13 = xor i32 %2, %0
  %14 = and i32 %13, %1
  %15 = or i32 %2, %0
  %16 = xor i32 %1, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %15, %17
  %19 = xor i32 %13, -1
  %20 = add i32 %13, 1
  %21 = xor i32 %2, -1
  %22 = or i32 %21, %0
  %23 = xor i32 %22, %1
  %24 = and i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = or i32 %25, %0
  %27 = xor i32 %0, -1
  %28 = xor i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %27
  %31 = and i32 %28, %0
  %32 = or i32 %2, %1
  %33 = and i32 %32, %0
  %34 = or i32 %29, %9
  %35 = and i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %36, %1
  %38 = and i32 %21, %1
  %39 = xor i32 %38, %27
  %40 = and i32 %8, %29
  %41 = or i32 %21, %1
  %42 = xor i32 %41, %0
  %43 = and i32 %13, %16
  %44 = and i32 %41, %27
  %45 = and i32 %7, %0
  %46 = or i32 %1, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %29, %47
  %49 = or i32 %47, %2
  %50 = and i32 %28, %8
  %51 = or i32 %28, %47
  %52 = xor i32 %25, %0
  %53 = shl i32 %52, 1
  %54 = and i32 %24, %27
  %55 = xor i32 %31, -1
  %56 = xor i32 %54, %55
  %57 = and i32 %7, %2
  %58 = and i32 %57, %0
  %59 = or i32 %28, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %58, %60
  %62 = and i32 %29, %0
  %63 = or i32 %32, %0
  %64 = xor i32 %23, 2147483647
  %65 = and i32 %1, %0
  %66 = or i32 %65, %21
  %67 = shl i32 %66, 1
  %68 = xor i32 %45, 2147483647
  %69 = and i32 %68, %21
  %70 = shl i32 %69, 1
  %71 = xor i32 %24, %0
  %72 = and i32 %22, %16
  %73 = xor i32 %65, -1
  %74 = and i32 %21, %73
  %75 = or i32 %41, %27
  %76 = xor i32 %35, %32
  %77 = or i32 %65, %19
  %78 = or i32 %24, %45
  %79 = and i32 %24, %0
  %80 = xor i32 %32, %0
  %81 = xor i32 %80, -1
  %82 = xor i32 %79, %81
  %83 = or i32 %16, %2
  %84 = and i32 %13, %7
  %85 = or i32 %21, %9
  %86 = xor i32 %41, -1
  %87 = or i32 %65, %86
  %88 = xor i32 %28, %0
  %89 = or i32 %58, %88
  %90 = xor i32 %65, %2
  %91 = and i32 %16, %21
  %92 = xor i32 %32, -1
  %93 = or i32 %35, %92
  %94 = shl i32 %93, 1
  %95 = and i32 %46, %29
  %96 = xor i32 %47, %2
  %97 = or i32 %92, %0
  %98 = and i32 %22, %1
  %99 = or i32 %29, %0
  %100 = and i32 %21, %0
  %101 = xor i32 %100, -1
  %102 = and i32 %101, %7
  %103 = or i32 %100, %17
  %104 = or i32 %79, %80
  %105 = xor i32 %32, %65
  %106 = shl i32 %105, 2
  %107 = or i32 %13, %7
  %108 = and i32 %36, %7
  %109 = xor i32 %79, %97
  %110 = xor i32 %45, %25
  %111 = and i32 %101, %17
  %112 = and i32 %57, %27
  %113 = or i32 %112, %62
  %114 = and i32 %92, %27
  %115 = mul i32 %114, -10
  %116 = and i32 %92, %0
  %117 = mul i32 %116, -19
  %118 = and i32 %38, %0
  %119 = mul i32 %118, -13
  %120 = and i32 %86, %27
  %121 = and i32 %86, %0
  %122 = shl i32 %79, 1
  %123 = and i32 %10, %4
  %124 = xor i32 %123, -1
  %125 = xor i32 %5, %3
  %126 = xor i32 %125, -1
  %127 = and i32 %126, %124
  %128 = xor i32 %5, %4
  %129 = and i32 %128, %3
  %130 = and i32 %5, %4
  %131 = or i32 %4, %3
  %132 = xor i32 %130, %131
  %133 = xor i32 %4, -1
  %134 = xor i32 %5, -1
  %135 = and i32 %134, %3
  %136 = xor i32 %135, -1
  %137 = or i32 %136, %133
  %138 = and i32 %128, %11
  %139 = shl i32 %138, 1
  %140 = and i32 %10, %5
  %141 = and i32 %140, %133
  %142 = or i32 %10, %5
  %143 = and i32 %142, %4
  %144 = or i32 %141, %143
  %145 = xor i32 %131, -1
  %146 = or i32 %134, %145
  %147 = xor i32 %4, %3
  %148 = or i32 %147, %134
  %149 = or i32 %134, %3
  %150 = or i32 %5, %4
  %151 = and i32 %150, %147
  %152 = xor i32 %147, -1
  %153 = xor i32 %149, -1
  %154 = and i32 %153, %4
  %155 = and i32 %125, %131
  %156 = shl i32 %136, 1
  %157 = and i32 %4, %3
  %158 = or i32 %125, %157
  %159 = xor i32 %11, -1
  %160 = xor i32 %159, %5
  %161 = xor i32 %153, %4
  %162 = and i32 %140, %4
  %163 = or i32 %125, %4
  %164 = xor i32 %162, %163
  %165 = and i32 %5, %3
  %166 = and i32 %165, %4
  %167 = or i32 %5, %3
  %168 = and i32 %167, %133
  %169 = or i32 %166, %168
  %170 = shl i32 %169, 2
  %171 = xor i32 %130, -1
  %172 = and i32 %147, %171
  %173 = add i32 %123, 1
  %174 = or i32 %134, %4
  %175 = and i32 %174, %3
  %176 = shl i32 %175, 1
  %177 = or i32 %167, %133
  %178 = and i32 %134, %4
  %179 = xor i32 %178, -1
  %180 = and i32 %179, %3
  %181 = xor i32 %124, %5
  %182 = xor i32 %178, %149
  %183 = or i32 %149, %4
  %184 = and i32 %174, %10
  %185 = shl i32 %184, 1
  %186 = xor i32 %149, %4
  %187 = xor i32 %128, -1
  %188 = or i32 %187, %145
  %189 = and i32 %147, %5
  %190 = and i32 %125, %11
  %191 = or i32 %128, %147
  %192 = xor i32 %131, %5
  %193 = or i32 %147, %187
  %194 = xor i32 %179, %3
  %195 = or i32 %165, %133
  %196 = xor i32 %145, %5
  %197 = xor i32 %157, -1
  %198 = and i32 %126, %197
  %199 = xor i32 %174, -1
  %200 = and i32 %136, %133
  %201 = shl i32 %200, 1
  %202 = xor i32 %150, %3
  %203 = and i32 %147, %134
  %204 = or i32 %135, %123
  %205 = or i32 %130, %159
  %206 = or i32 %134, %152
  %207 = or i32 %152, %5
  %208 = xor i32 %165, -1
  %209 = xor i32 %123, %208
  %210 = xor i32 %167, -1
  %211 = or i32 %157, %210
  %212 = or i32 %157, %134
  %213 = and i32 %11, %134
  %214 = xor i32 %125, %4
  %215 = or i32 %162, %214
  %216 = or i32 %123, %126
  %217 = xor i32 %171, %3
  %218 = and i32 %149, %4
  %219 = or i32 %145, %5
  %220 = or i32 %157, %153
  %221 = xor i32 %214, -1
  %222 = xor i32 %162, %221
  %223 = or i32 %153, %4
  %224 = and i32 %126, %4
  %225 = and i32 %171, %152
  %226 = and i32 %11, %5
  %227 = xor i32 %149, %157
  %228 = and i32 %165, %133
  %229 = and i32 %125, %4
  %230 = or i32 %228, %229
  %231 = and i32 %208, %133
  %232 = or i32 %135, %4
  %233 = or i32 %134, %159
  %234 = xor i32 %150, -1
  %235 = or i32 %157, %234
  %236 = xor i32 %136, %4
  %237 = xor i32 %178, %208
  %238 = and i32 %131, %5
  %239 = and i32 %179, %10
  %240 = and i32 %147, %179
  %241 = or i32 %128, %157
  %242 = shl i32 %241, 1
  %243 = xor i32 %199, %3
  %244 = and i32 %128, %10
  %245 = xor i32 %143, 2147483647
  %246 = xor i32 %245, %141
  %247 = or i32 %126, %4
  %248 = xor i32 %166, %247
  %249 = and i32 %134, %197
  %250 = and i32 %150, %10
  %251 = and i32 %128, %152
  %252 = or i32 %128, %145
  %253 = and i32 %150, %3
  %254 = and i32 %187, %10
  %255 = xor i32 %126, %4
  %256 = or i32 %147, %199
  %257 = shl i32 %256, 1
  %258 = xor i32 %123, %136
  %259 = and i32 %147, %187
  %260 = and i32 %136, %4
  %261 = and i32 %128, %197
  %262 = shl i32 %261, 1
  %263 = and i32 %11, %126
  %264 = shl i32 %263, 1
  %265 = add i32 %165, 1
  %266 = xor i32 %167, %4
  %267 = or i32 %166, %266
  %268 = and i32 %150, %152
  %269 = xor i32 %135, %4
  %270 = or i32 %126, %159
  %271 = or i32 %187, %152
  %272 = or i32 %165, %4
  %273 = xor i32 %130, %3
  %274 = add i32 %130, 1
  %275 = or i32 %234, %152
  %276 = and i32 %142, %133
  %277 = or i32 %162, %276
  %278 = shl i32 %277, 1
  %279 = and i32 %149, %133
  %280 = and i32 %174, %152
  %281 = and i32 %187, %197
  %282 = shl i32 %281, 2
  %283 = or i32 %136, %4
  %284 = xor i32 %130, %11
  %285 = or i32 %125, %133
  %286 = xor i32 %285, -1
  %287 = or i32 %141, %286
  %288 = xor i32 %123, %5
  %289 = or i32 %123, %187
  %290 = and i32 %167, %4
  %291 = or i32 %228, %290
  %292 = shl i32 %179, 1
  %293 = xor i32 %150, %157
  %294 = xor i32 %163, -1
  %295 = or i32 %162, %294
  %296 = or i32 %199, %10
  %297 = or i32 %125, %145
  %298 = and i32 %128, %131
  %299 = shl i32 %234, 1
  %300 = shl i32 %153, 1
  %301 = or i32 %135, %133
  %302 = or i32 %178, %152
  %303 = or i32 %128, %3
  %304 = and i32 %125, %197
  %305 = xor i32 %165, %4
  %306 = or i32 %157, %187
  %307 = and i32 %11, %187
  %308 = or i32 %128, %159
  %309 = xor i32 %229, 1073741823
  %310 = xor i32 %309, %228
  %311 = or i32 %178, %3
  %312 = or i32 %199, %3
  %313 = or i32 %159, %5
  %314 = xor i32 %174, %3
  %315 = or i32 %167, %4
  %316 = and i32 %124, %5
  %317 = and i32 %128, %124
  %318 = xor i32 %174, %157
  %319 = xor i32 %130, %136
  %320 = or i32 %130, %145
  %321 = shl i32 %320, 1
  %322 = xor i32 %166, %214
  %323 = or i32 %123, %5
  %324 = and i32 %179, %152
  %325 = or i32 %125, %123
  %326 = or i32 %126, %145
  %327 = or i32 %165, %123
  %328 = or i32 %147, %234
  %329 = or i32 %123, %134
  %330 = xor i32 %4, 2147483647
  %331 = xor i32 %330, %142
  %332 = xor i32 %331, %162
  %333 = and i32 %174, %147
  %334 = xor i32 %167, %157
  %335 = or i32 %130, %3
  %336 = and i32 %128, %147
  %337 = and i32 %125, %124
  %338 = or i32 %128, %123
  %339 = or i32 %128, %152
  %340 = or i32 %187, %10
  %341 = xor i32 %11, %5
  %342 = or i32 %210, %133
  %343 = and i32 %187, %152
  %344 = and i32 %171, %3
  %345 = xor i32 %210, %4
  %346 = or i32 %208, %4
  %347 = or i32 %128, %10
  %348 = xor i32 %276, -1
  %349 = xor i32 %162, %348
  %350 = and i32 %126, %133
  %351 = xor i32 %157, %5
  %352 = or i32 %199, %152
  %353 = or i32 %166, %221
  %354 = or i32 %234, %3
  %355 = or i32 %130, %210
  %356 = shl i32 %355, 1
  %357 = xor i32 %168, 2147483647
  %358 = xor i32 %357, %166
  %359 = shl i32 %358, 1
  %360 = and i32 %134, %124
  %361 = or i32 %147, %5
  %362 = or i32 %157, %5
  %363 = and i32 %187, %124
  %364 = xor i32 %178, %3
  %365 = xor i32 %290, -1
  %366 = xor i32 %228, %365
  %367 = or i32 %178, %10
  %368 = xor i32 %208, %4
  %369 = or i32 %130, %135
  %370 = or i32 %157, %126
  %371 = or i32 %208, %133
  %372 = or i32 %178, %153
  %373 = and i32 %131, %134
  %374 = or i32 %234, %10
  %375 = and i32 %208, %4
  %376 = or i32 %130, %147
  %377 = xor i32 %266, -1
  %378 = xor i32 %166, %377
  %379 = and i32 %152, %5
  %380 = and i32 %131, %126
  %381 = shl i32 %150, 1
  %382 = or i32 %126, %133
  %383 = and i32 %187, %3
  %384 = and i32 %210, %133
  %385 = and i32 %135, %133
  %386 = and i32 %210, %4
  %387 = mul i32 %386, -28
  %388 = and i32 %135, %4
  %389 = shl i32 %388, 1
  %390 = and i32 %153, %133
  %391 = shl i32 %390, 4
  %392 = mul i32 %166, -15
  %393 = add i32 %45, -1
  %394 = add i32 %393, %108
  %395 = add i32 %394, %84
  %396 = add i32 %395, %51
  %397 = add i32 %396, %42
  %398 = add i32 %397, %145
  %399 = add i32 %398, %64
  %400 = add i32 %399, %379
  %401 = add i32 %400, %165
  %402 = add i32 %401, %341
  %403 = add i32 %402, %323
  %404 = add i32 %403, %233
  %405 = add i32 %404, %192
  %406 = add i32 %405, %174
  %407 = add i32 %406, %350
  %408 = add i32 %407, %342
  %409 = add i32 %408, %340
  %410 = add i32 %409, %306
  %411 = add i32 %410, %283
  %412 = add i32 %411, %273
  %413 = add i32 %412, %268
  %414 = add i32 %413, %252
  %415 = add i32 %414, %240
  %416 = add i32 %415, %217
  %417 = add i32 %416, %198
  %418 = add i32 %417, %191
  %419 = add i32 %418, %186
  %420 = add i32 %419, %180
  %421 = add i32 %420, %137
  %422 = add i32 %85, %5
  %423 = sub i32 %422, %313
  %424 = add i32 %423, %154
  %425 = add i32 %424, %384
  %426 = sub i32 %425, %258
  %427 = sub i32 %426, %211
  %428 = sub i32 %427, %195
  %429 = add i32 %428, %144
  %430 = sub i32 %429, %378
  %431 = mul i32 %430, 5
  %432 = add i32 %104, %33
  %433 = add i32 %432, %203
  %434 = sub i32 %199, %433
  %435 = add i32 %434, %311
  %436 = sub i32 %435, %266
  %437 = add i32 %436, %260
  %438 = mul i32 %437, 3
  %439 = add i32 %37, %97
  %440 = add i32 %439, %364
  %441 = add i32 %440, %251
  %442 = add i32 %441, %310
  %443 = shl i32 %442, 2
  %444 = add i32 %385, %54
  %445 = mul i32 %444, -9
  %446 = add i32 %228, %120
  %447 = mul i32 %446, -6
  %448 = add i32 %421, %168
  %449 = add i32 %448, %267
  %450 = add i32 %449, %164
  %451 = add i32 %450, %246
  %452 = add i32 %451, %332
  %453 = shl i32 %452, 1
  %454 = add i32 %9, %2
  %455 = add i32 %454, %65
  %456 = add i32 %455, %20
  %457 = add i32 %456, %28
  %458 = sub i32 %457, %49
  %459 = sub i32 %458, %74
  %460 = add i32 %459, %83
  %461 = add i32 %460, %90
  %462 = sub i32 %461, %91
  %463 = sub i32 %462, %96
  %464 = add i32 %463, %100
  %465 = sub i32 %464, %3
  %466 = add i32 %465, %10
  %467 = add i32 %466, %18
  %468 = add i32 %467, %14
  %469 = sub i32 %468, %23
  %470 = sub i32 %469, %26
  %471 = add i32 %470, %30
  %472 = sub i32 %471, %31
  %473 = add i32 %472, %34
  %474 = add i32 %473, %39
  %475 = add i32 %474, %40
  %476 = add i32 %475, %43
  %477 = sub i32 %476, %44
  %478 = add i32 %477, %48
  %479 = sub i32 %478, %50
  %480 = add i32 %479, %62
  %481 = sub i32 %480, %63
  %482 = sub i32 %481, %67
  %483 = add i32 %482, %71
  %484 = add i32 %483, %72
  %485 = add i32 %484, %75
  %486 = sub i32 %485, %76
  %487 = add i32 %486, %77
  %488 = add i32 %487, %78
  %489 = sub i32 %488, %59
  %490 = sub i32 %489, %87
  %491 = add i32 %490, %95
  %492 = sub i32 %491, %98
  %493 = sub i32 %492, %99
  %494 = add i32 %493, %102
  %495 = add i32 %494, %103
  %496 = add i32 %495, %107
  %497 = sub i32 %496, %110
  %498 = add i32 %497, %111
  %499 = sub i32 %498, %121
  %500 = sub i32 %499, %4
  %501 = add i32 %500, %133
  %502 = sub i32 %501, %53
  %503 = add i32 %502, %56
  %504 = sub i32 %503, %61
  %505 = sub i32 %504, %70
  %506 = add i32 %505, %82
  %507 = add i32 %506, %89
  %508 = sub i32 %507, %94
  %509 = sub i32 %508, %106
  %510 = add i32 %509, %109
  %511 = add i32 %510, %113
  %512 = add i32 %511, %115
  %513 = add i32 %512, %117
  %514 = add i32 %513, %119
  %515 = sub i32 %514, %122
  %516 = add i32 %515, %173
  %517 = add i32 %516, %159
  %518 = add i32 %517, %123
  %519 = sub i32 %518, %131
  %520 = add i32 %519, %157
  %521 = add i32 %520, %146
  %522 = sub i32 %521, %148
  %523 = sub i32 %522, %149
  %524 = add i32 %523, %160
  %525 = add i32 %524, %130
  %526 = sub i32 %525, %181
  %527 = add i32 %526, %189
  %528 = add i32 %527, %196
  %529 = add i32 %528, %206
  %530 = sub i32 %529, %207
  %531 = sub i32 %530, %212
  %532 = add i32 %531, %213
  %533 = add i32 %532, %219
  %534 = sub i32 %533, %226
  %535 = sub i32 %534, %238
  %536 = sub i32 %535, %249
  %537 = add i32 %536, %265
  %538 = sub i32 %537, %167
  %539 = add i32 %538, %274
  %540 = add i32 %539, %288
  %541 = add i32 %540, %316
  %542 = sub i32 %541, %329
  %543 = sub i32 %542, %351
  %544 = sub i32 %543, %178
  %545 = sub i32 %544, %360
  %546 = add i32 %545, %361
  %547 = sub i32 %546, %362
  %548 = add i32 %547, %373
  %549 = add i32 %548, %135
  %550 = add i32 %549, %127
  %551 = add i32 %550, %129
  %552 = add i32 %551, %132
  %553 = sub i32 %552, %151
  %554 = add i32 %553, %154
  %555 = sub i32 %554, %155
  %556 = sub i32 %555, %156
  %557 = add i32 %556, %158
  %558 = add i32 %557, %161
  %559 = sub i32 %558, %172
  %560 = sub i32 %559, %177
  %561 = add i32 %560, %182
  %562 = add i32 %561, %183
  %563 = add i32 %562, %188
  %564 = add i32 %563, %190
  %565 = sub i32 %564, %193
  %566 = sub i32 %565, %194
  %567 = add i32 %566, %202
  %568 = sub i32 %567, %204
  %569 = sub i32 %568, %205
  %570 = add i32 %569, %209
  %571 = sub i32 %570, %216
  %572 = add i32 %571, %218
  %573 = sub i32 %572, %220
  %574 = add i32 %573, %223
  %575 = sub i32 %574, %224
  %576 = sub i32 %575, %225
  %577 = add i32 %576, %227
  %578 = add i32 %577, %231
  %579 = sub i32 %578, %232
  %580 = sub i32 %579, %235
  %581 = add i32 %580, %163
  %582 = add i32 %581, %236
  %583 = add i32 %582, %237
  %584 = sub i32 %583, %239
  %585 = sub i32 %584, %243
  %586 = sub i32 %585, %214
  %587 = add i32 %586, %244
  %588 = add i32 %587, %250
  %589 = sub i32 %588, %253
  %590 = add i32 %589, %254
  %591 = sub i32 %590, %255
  %592 = add i32 %591, %259
  %593 = add i32 %592, %269
  %594 = add i32 %593, %270
  %595 = sub i32 %594, %271
  %596 = sub i32 %595, %272
  %597 = add i32 %596, %275
  %598 = sub i32 %597, %279
  %599 = sub i32 %598, %280
  %600 = add i32 %599, %284
  %601 = add i32 %600, %289
  %602 = sub i32 %601, %292
  %603 = sub i32 %602, %293
  %604 = add i32 %603, %229
  %605 = sub i32 %604, %296
  %606 = sub i32 %605, %290
  %607 = sub i32 %606, %297
  %608 = add i32 %607, %298
  %609 = sub i32 %608, %299
  %610 = sub i32 %609, %300
  %611 = add i32 %610, %301
  %612 = add i32 %611, %302
  %613 = sub i32 %612, %303
  %614 = sub i32 %613, %304
  %615 = add i32 %614, %305
  %616 = add i32 %615, %307
  %617 = sub i32 %616, %308
  %618 = sub i32 %617, %312
  %619 = sub i32 %618, %314
  %620 = sub i32 %619, %315
  %621 = sub i32 %620, %317
  %622 = add i32 %621, %318
  %623 = add i32 %622, %319
  %624 = add i32 %623, %324
  %625 = sub i32 %624, %325
  %626 = add i32 %625, %326
  %627 = add i32 %626, %327
  %628 = sub i32 %627, %328
  %629 = sub i32 %628, %333
  %630 = add i32 %629, %334
  %631 = sub i32 %630, %335
  %632 = sub i32 %631, %336
  %633 = sub i32 %632, %337
  %634 = add i32 %633, %338
  %635 = sub i32 %634, %339
  %636 = sub i32 %635, %285
  %637 = sub i32 %636, %343
  %638 = add i32 %637, %344
  %639 = sub i32 %638, %345
  %640 = add i32 %639, %346
  %641 = sub i32 %640, %347
  %642 = add i32 %641, %352
  %643 = add i32 %642, %247
  %644 = sub i32 %643, %354
  %645 = add i32 %644, %363
  %646 = add i32 %645, %367
  %647 = add i32 %646, %368
  %648 = add i32 %647, %369
  %649 = add i32 %648, %370
  %650 = sub i32 %649, %371
  %651 = add i32 %650, %372
  %652 = add i32 %651, %374
  %653 = add i32 %652, %375
  %654 = sub i32 %653, %376
  %655 = add i32 %654, %380
  %656 = sub i32 %655, %381
  %657 = add i32 %656, %382
  %658 = sub i32 %657, %383
  %659 = sub i32 %658, %139
  %660 = sub i32 %659, %176
  %661 = sub i32 %660, %185
  %662 = sub i32 %661, %201
  %663 = sub i32 %662, %215
  %664 = sub i32 %663, %222
  %665 = add i32 %664, %230
  %666 = sub i32 %665, %242
  %667 = sub i32 %666, %248
  %668 = sub i32 %667, %257
  %669 = sub i32 %668, %262
  %670 = sub i32 %669, %264
  %671 = sub i32 %670, %282
  %672 = sub i32 %671, %287
  %673 = sub i32 %672, %291
  %674 = sub i32 %673, %295
  %675 = sub i32 %674, %321
  %676 = add i32 %675, %322
  %677 = add i32 %676, %349
  %678 = add i32 %677, %353
  %679 = sub i32 %678, %356
  %680 = sub i32 %679, %366
  %681 = add i32 %680, %387
  %682 = sub i32 %681, %389
  %683 = sub i32 %682, %391
  %684 = add i32 %683, %392
  %685 = sub i32 %684, %170
  %686 = sub i32 %685, %278
  %687 = add i32 %686, %445
  %688 = add i32 %687, %447
  %689 = sub i32 %688, %359
  %690 = add i32 %689, %438
  %691 = add i32 %690, %443
  %692 = add i32 %691, %431
  %693 = add i32 %692, %453
  %694 = icmp eq i32 %12, %693
  %695 = select i1 %694, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %696 = tail call i32 @puts(i8* nonnull dereferenceable(1) %695)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
