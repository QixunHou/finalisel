digraph "DFG for'crackme' function" {
	Node0x1522480[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1522b30[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1522bf0[shape=record, label="  %5 = mul i32 %4, 3"];
	Node0x1522c90[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0x1522d00[shape=record, label="  %7 = or i32 %6, 1"];
	Node0x1522d70[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x1522de0[shape=record, label="  %9 = xor i32 %8, %0"];
	Node0x1522e50[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1522ef0[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0x1522f90[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1523000[shape=record, label="  %13 = and i32 %8, %0"];
	Node0x15230a0[shape=record, label="  %14 = mul i32 %3, -6"];
	Node0x1523110[shape=record, label="  %15 = add i32 %1, 1"];
	Node0x1523180[shape=record, label="  %16 = add i32 %15, %9"];
	Node0x15231f0[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x1523260[shape=record, label="  %18 = sub i32 %17, %13"];
	Node0x15232d0[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x1523340[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x15233b0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x1523420[shape=record, label="  %22 = icmp eq i32 %5, %21"];
	Node0x14c3268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x15238c0[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x1523910[shape=record, label="  ret void"];
	Node0x1522480 -> Node0x1522b30;
	Node0x1522b30 -> Node0x1522bf0;
	Node0x1522bf0 -> Node0x1522c90;
	Node0x1522c90 -> Node0x1522d00;
	Node0x1522d00 -> Node0x1522d70;
	Node0x1522d70 -> Node0x1522de0;
	Node0x1522de0 -> Node0x1522e50;
	Node0x1522e50 -> Node0x1522ef0;
	Node0x1522ef0 -> Node0x1522f90;
	Node0x1522f90 -> Node0x1523000;
	Node0x1523000 -> Node0x15230a0;
	Node0x15230a0 -> Node0x1523110;
	Node0x1523110 -> Node0x1523180;
	Node0x1523180 -> Node0x15231f0;
	Node0x15231f0 -> Node0x1523260;
	Node0x1523260 -> Node0x15232d0;
	Node0x15232d0 -> Node0x1523340;
	Node0x1523340 -> Node0x15233b0;
	Node0x15233b0 -> Node0x1523420;
	Node0x1523420 -> Node0x14c3268;
	Node0x14c3268 -> Node0x15238c0;
	Node0x15238c0 -> Node0x1523910;
edge [color=red]
	Node0x1522480 -> Node0x1522b30;
	Node0x1522b30 -> Node0x1522bf0;
	Node0x1522c90 -> Node0x1522d00;
	Node0x1522d70 -> Node0x1522de0;
	Node0x1522e50 -> Node0x1522ef0;
	Node0x1522ef0 -> Node0x1522f90;
	Node0x1522d70 -> Node0x1523000;
	Node0x1522480 -> Node0x15230a0;
	Node0x1523110 -> Node0x1523180;
	Node0x1522de0 -> Node0x1523180;
	Node0x1523180 -> Node0x15231f0;
	Node0x1522d00 -> Node0x15231f0;
	Node0x15231f0 -> Node0x1523260;
	Node0x1523000 -> Node0x1523260;
	Node0x1523260 -> Node0x15232d0;
	Node0x1522ef0 -> Node0x15232d0;
	Node0x15232d0 -> Node0x1523340;
	Node0x15230a0 -> Node0x1523340;
	Node0x1523340 -> Node0x15233b0;
	Node0x1522f90 -> Node0x15233b0;
	Node0x1522bf0 -> Node0x1523420;
	Node0x15233b0 -> Node0x1523420;
	Node0x1523420 -> Node0x14c3268;
	Node0x14c3268 -> Node0x15238c0;
}
