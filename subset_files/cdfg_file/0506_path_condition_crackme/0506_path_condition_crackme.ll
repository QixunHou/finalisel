; ModuleID = '../.././c_source_file/0506_path_condition_crackme.c'
source_filename = "../.././c_source_file/0506_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = xor i32 %0, -1
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %2
  %10 = and i32 %9, %7
  %11 = xor i32 %2, %1
  %12 = or i32 %11, %7
  %13 = xor i32 %10, %12
  %14 = shl i32 %13, 1
  %15 = and i32 %9, %0
  %16 = or i32 %11, %0
  %17 = xor i32 %16, -1
  %18 = or i32 %15, %17
  %19 = add i32 %6, %18
  %20 = sub i32 %19, %14
  %21 = xor i32 %4, -1
  %22 = or i32 %21, %3
  %23 = or i32 %4, %3
  %24 = and i32 %4, %3
  %25 = xor i32 %24, -1
  %26 = shl i32 %21, 1
  %27 = and i32 %21, %3
  %28 = xor i32 %27, -1
  %29 = add i32 %23, 1
  %30 = add i32 %22, 1
  %31 = and i32 %2, %0
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %1
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, %34
  %36 = or i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %1
  %39 = and i32 %2, %1
  %40 = and i32 %39, %0
  %41 = or i32 %2, %1
  %42 = xor i32 %41, %0
  %43 = or i32 %40, %42
  %44 = xor i32 %37, %1
  %45 = or i32 %8, %0
  %46 = and i32 %11, %45
  %47 = shl i32 %46, 1
  %48 = or i32 %1, %0
  %49 = xor i32 %31, %48
  %50 = xor i32 %12, -1
  %51 = or i32 %10, %50
  %52 = xor i32 %34, %0
  %53 = shl i32 %52, 1
  %54 = xor i32 %31, -1
  %55 = xor i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = and i32 %54, %56
  %58 = and i32 %39, %7
  %59 = and i32 %11, %0
  %60 = or i32 %58, %59
  %61 = and i32 %54, %1
  %62 = or i32 %55, %37
  %63 = and i32 %8, %0
  %64 = or i32 %33, %63
  %65 = or i32 %32, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %0
  %68 = xor i32 %45, -1
  %69 = xor i32 %11, -1
  %70 = or i32 %69, %68
  %71 = and i32 %32, %0
  %72 = xor i32 %71, -1
  %73 = and i32 %55, %72
  %74 = or i32 %8, %2
  %75 = and i32 %74, %0
  %76 = xor i32 %75, 2147483647
  %77 = xor i32 %76, %10
  %78 = shl i32 %77, 1
  %79 = and i32 %1, %0
  %80 = xor i32 %2, %0
  %81 = or i32 %80, %79
  %82 = xor i32 %80, -1
  %83 = or i32 %82, %1
  %84 = and i32 %11, %48
  %85 = xor i32 %48, -1
  %86 = or i32 %82, %85
  %87 = xor i32 %79, %2
  %88 = or i32 %79, %32
  %89 = shl i32 %88, 1
  %90 = and i32 %45, %82
  %91 = shl i32 %90, 2
  %92 = or i32 %80, %55
  %93 = and i32 %82, %1
  %94 = xor i32 %85, %2
  %95 = xor i32 %41, -1
  %96 = or i32 %79, %95
  %97 = xor i32 %54, %1
  %98 = or i32 %32, %0
  %99 = or i32 %37, %56
  %100 = or i32 %56, %2
  %101 = or i32 %37, %8
  %102 = or i32 %82, %56
  %103 = xor i32 %11, %0
  %104 = or i32 %69, %85
  %105 = xor i32 %71, %1
  %106 = and i32 %69, %7
  %107 = and i32 %45, %69
  %108 = or i32 %32, %68
  %109 = or i32 %15, %103
  %110 = and i32 %69, %0
  %111 = xor i32 %65, %79
  %112 = shl i32 %111, 1
  %113 = and i32 %41, %7
  %114 = xor i32 %79, -1
  %115 = and i32 %32, %114
  %116 = xor i32 %74, %0
  %117 = or i32 %15, %116
  %118 = or i32 %55, %32
  %119 = and i32 %98, %1
  %120 = or i32 %31, %56
  %121 = shl i32 %11, 1
  %122 = xor i32 %36, %1
  %123 = or i32 %31, %1
  %124 = or i32 %32, %56
  %125 = xor i32 %15, -1
  %126 = xor i32 %116, %125
  %127 = and i32 %34, %0
  %128 = and i32 %54, %8
  %129 = and i32 %74, %7
  %130 = xor i32 %129, %125
  %131 = xor i32 %72, %1
  %132 = xor i32 %31, %41
  %133 = xor i32 %39, -1
  %134 = or i32 %133, %0
  %135 = xor i32 %98, -1
  %136 = xor i32 %135, %1
  %137 = and i32 %55, %32
  %138 = shl i32 %137, 2
  %139 = xor i32 %103, -1
  %140 = xor i32 %15, %139
  %141 = or i32 %34, %7
  %142 = xor i32 %71, %65
  %143 = or i32 %33, %7
  %144 = and i32 %80, %114
  %145 = and i32 %48, %32
  %146 = xor i32 %63, -1
  %147 = and i32 %80, %146
  %148 = and i32 %45, %2
  %149 = and i32 %36, %56
  %150 = or i32 %85, %2
  %151 = and i32 %98, %55
  %152 = xor i32 %15, %16
  %153 = or i32 %33, %0
  %154 = or i32 %80, %63
  %155 = and i32 %69, %146
  %156 = and i32 %72, %1
  %157 = and i32 %80, %56
  %158 = shl i32 %157, 1
  %159 = and i32 %98, %8
  %160 = or i32 %39, %7
  %161 = shl i32 %80, 1
  %162 = xor i32 %31, %1
  %163 = xor i32 %40, %103
  %164 = shl i32 %163, 1
  %165 = and i32 %41, %0
  %166 = or i32 %41, %0
  %167 = and i32 %98, %56
  %168 = and i32 %82, %8
  %169 = and i32 %56, %2
  %170 = xor i32 %48, %2
  %171 = xor i32 %69, %0
  %172 = or i32 %15, %129
  %173 = or i32 %34, %0
  %174 = shl i32 %173, 1
  %175 = or i32 %80, %8
  %176 = shl i32 %175, 1
  %177 = xor i32 %133, %0
  %178 = shl i32 %16, 1
  %179 = or i32 %82, %68
  %180 = xor i32 %36, %79
  %181 = or i32 %80, %1
  %182 = and i32 %48, %2
  %183 = shl i32 %182, 1
  %184 = or i32 %11, %85
  %185 = and i32 %72, %8
  %186 = xor i32 %146, %2
  %187 = or i32 %79, %69
  %188 = and i32 %11, %7
  %189 = or i32 %40, %188
  %190 = and i32 %32, %146
  %191 = xor i32 %40, -1
  %192 = xor i32 %188, %191
  %193 = or i32 %63, %82
  %194 = and i32 %69, %114
  %195 = xor i32 %39, %0
  %196 = shl i32 %195, 1
  %197 = xor i32 %71, %133
  %198 = xor i32 %33, %0
  %199 = xor i32 %65, %0
  %200 = xor i32 %68, %2
  %201 = shl i32 %200, 1
  %202 = or i32 %71, %1
  %203 = or i32 %40, %139
  %204 = or i32 %65, %0
  %205 = and i32 %11, %146
  %206 = shl i32 %205, 1
  %207 = or i32 %69, %7
  %208 = and i32 %34, %7
  %209 = xor i32 %63, %34
  %210 = xor i32 %114, %2
  %211 = and i32 %48, %69
  %212 = or i32 %63, %32
  %213 = xor i32 %165, -1
  %214 = xor i32 %58, %213
  %215 = xor i32 %113, %191
  %216 = and i32 %55, %82
  %217 = shl i32 %216, 1
  %218 = and i32 %114, %2
  %219 = xor i32 %95, %0
  %220 = or i32 %11, %79
  %221 = or i32 %80, %68
  %222 = add i32 %63, 1
  %223 = and i32 %82, %56
  %224 = or i32 %31, %55
  %225 = or i32 %79, %2
  %226 = xor i32 %63, %133
  %227 = or i32 %135, %1
  %228 = or i32 %66, %7
  %229 = shl i32 %228, 1
  %230 = or i32 %39, %0
  %231 = and i32 %45, %32
  %232 = or i32 %31, %95
  %233 = or i32 %79, %66
  %234 = and i32 %80, %45
  %235 = and i32 %146, %2
  %236 = and i32 %11, %114
  %237 = or i32 %55, %135
  %238 = or i32 %55, %2
  %239 = add i32 %79, 1
  %240 = or i32 %31, %68
  %241 = shl i32 %240, 1
  %242 = and i32 %48, %82
  %243 = or i32 %80, %56
  %244 = shl i32 %63, 1
  %245 = and i32 %65, %7
  %246 = or i32 %71, %39
  %247 = and i32 %55, %54
  %248 = and i32 %95, %7
  %249 = mul i32 %248, -14
  %250 = and i32 %33, %7
  %251 = mul i32 %250, -9
  %252 = and i32 %95, %0
  %253 = shl i32 %252, 4
  %254 = and i32 %33, %0
  %255 = shl i32 %254, 4
  %256 = and i32 %66, %7
  %257 = and i32 %66, %0
  %258 = mul i32 %257, 11
  %259 = mul i32 %40, -12
  %260 = sub i32 -2, %36
  %261 = add i32 %260, %39
  %262 = add i32 %261, %115
  %263 = add i32 %262, %232
  %264 = add i32 %263, %224
  %265 = add i32 %264, %223
  %266 = add i32 %265, %194
  %267 = add i32 %266, %193
  %268 = add i32 %267, %180
  %269 = add i32 %268, %165
  %270 = add i32 %269, %110
  %271 = add i32 %270, %73
  %272 = add i32 %271, %62
  %273 = add i32 %272, %4
  %274 = add i32 %273, %109
  %275 = add i32 %274, %152
  %276 = shl i32 %275, 1
  %277 = sub i32 %69, %79
  %278 = sub i32 %277, %58
  %279 = add i32 %278, %256
  %280 = add i32 %279, %30
  %281 = sub i32 %280, %24
  %282 = mul i32 %281, 5
  %283 = sub i32 %167, %170
  %284 = add i32 %283, %29
  %285 = add i32 %284, %43
  %286 = mul i32 %285, 3
  %287 = add i32 %207, %141
  %288 = add i32 %287, %132
  %289 = shl i32 %288, 2
  %290 = add i32 %0, 1
  %291 = add i32 %290, %1
  %292 = sub i32 %291, %45
  %293 = add i32 %292, %48
  %294 = add i32 %293, %222
  %295 = sub i32 %294, %2
  %296 = add i32 %295, %239
  %297 = sub i32 %296, %45
  %298 = add i32 %297, %3
  %299 = add i32 %298, %87
  %300 = sub i32 %299, %94
  %301 = sub i32 %300, %100
  %302 = sub i32 %301, %41
  %303 = sub i32 %302, %108
  %304 = add i32 %303, %66
  %305 = add i32 %304, %82
  %306 = sub i32 %305, %118
  %307 = add i32 %306, %71
  %308 = add i32 %307, %54
  %309 = add i32 %308, %124
  %310 = add i32 %309, %145
  %311 = add i32 %310, %148
  %312 = add i32 %311, %150
  %313 = add i32 %312, %169
  %314 = sub i32 %313, %33
  %315 = sub i32 %314, %186
  %316 = add i32 %315, %95
  %317 = add i32 %316, %190
  %318 = sub i32 %317, %65
  %319 = sub i32 %318, %31
  %320 = add i32 %319, %210
  %321 = add i32 %320, %212
  %322 = sub i32 %321, %218
  %323 = sub i32 %322, %225
  %324 = add i32 %323, %231
  %325 = sub i32 %324, %235
  %326 = sub i32 %325, %238
  %327 = sub i32 %326, %244
  %328 = sub i32 %327, %35
  %329 = sub i32 %328, %38
  %330 = add i32 %329, %44
  %331 = add i32 %330, %49
  %332 = add i32 %331, %57
  %333 = sub i32 %332, %61
  %334 = add i32 %333, %64
  %335 = sub i32 %334, %67
  %336 = add i32 %335, %70
  %337 = add i32 %336, %81
  %338 = add i32 %337, %83
  %339 = add i32 %338, %84
  %340 = add i32 %339, %86
  %341 = sub i32 %340, %89
  %342 = sub i32 %341, %92
  %343 = sub i32 %342, %93
  %344 = sub i32 %343, %96
  %345 = add i32 %344, %97
  %346 = sub i32 %345, %99
  %347 = sub i32 %346, %101
  %348 = add i32 %347, %102
  %349 = add i32 %348, %103
  %350 = sub i32 %349, %104
  %351 = add i32 %350, %105
  %352 = sub i32 %351, %106
  %353 = sub i32 %352, %107
  %354 = sub i32 %353, %113
  %355 = add i32 %354, %119
  %356 = sub i32 %355, %120
  %357 = sub i32 %356, %121
  %358 = add i32 %357, %122
  %359 = sub i32 %358, %123
  %360 = add i32 %359, %127
  %361 = add i32 %360, %128
  %362 = sub i32 %361, %131
  %363 = add i32 %362, %134
  %364 = sub i32 %363, %136
  %365 = sub i32 %364, %138
  %366 = sub i32 %365, %142
  %367 = add i32 %366, %143
  %368 = sub i32 %367, %144
  %369 = add i32 %368, %147
  %370 = sub i32 %369, %149
  %371 = add i32 %370, %42
  %372 = sub i32 %371, %151
  %373 = sub i32 %372, %153
  %374 = add i32 %373, %154
  %375 = add i32 %374, %155
  %376 = sub i32 %375, %156
  %377 = sub i32 %376, %159
  %378 = add i32 %377, %160
  %379 = sub i32 %378, %161
  %380 = add i32 %379, %162
  %381 = sub i32 %380, %166
  %382 = sub i32 %381, %168
  %383 = add i32 %382, %171
  %384 = add i32 %383, %177
  %385 = add i32 %384, %179
  %386 = sub i32 %385, %181
  %387 = sub i32 %386, %183
  %388 = add i32 %387, %184
  %389 = add i32 %388, %185
  %390 = sub i32 %389, %187
  %391 = sub i32 %390, %197
  %392 = add i32 %391, %198
  %393 = sub i32 %392, %199
  %394 = sub i32 %393, %201
  %395 = add i32 %394, %202
  %396 = add i32 %395, %204
  %397 = add i32 %396, %208
  %398 = sub i32 %397, %209
  %399 = sub i32 %398, %211
  %400 = sub i32 %399, %219
  %401 = add i32 %400, %220
  %402 = sub i32 %401, %221
  %403 = add i32 %402, %226
  %404 = add i32 %403, %227
  %405 = add i32 %404, %230
  %406 = sub i32 %405, %233
  %407 = sub i32 %406, %234
  %408 = add i32 %407, %236
  %409 = add i32 %408, %237
  %410 = sub i32 %409, %242
  %411 = add i32 %410, %243
  %412 = sub i32 %411, %245
  %413 = sub i32 %412, %12
  %414 = sub i32 %413, %246
  %415 = sub i32 %414, %247
  %416 = add i32 %415, %22
  %417 = sub i32 %416, %23
  %418 = add i32 %417, %25
  %419 = sub i32 %418, %26
  %420 = add i32 %419, %28
  %421 = sub i32 %420, %27
  %422 = sub i32 %421, %47
  %423 = add i32 %422, %51
  %424 = sub i32 %423, %53
  %425 = sub i32 %424, %60
  %426 = sub i32 %425, %91
  %427 = sub i32 %426, %112
  %428 = add i32 %427, %117
  %429 = sub i32 %428, %126
  %430 = add i32 %429, %130
  %431 = add i32 %430, %140
  %432 = sub i32 %431, %158
  %433 = sub i32 %432, %172
  %434 = sub i32 %433, %174
  %435 = sub i32 %434, %176
  %436 = sub i32 %435, %178
  %437 = sub i32 %436, %189
  %438 = add i32 %437, %192
  %439 = sub i32 %438, %196
  %440 = sub i32 %439, %203
  %441 = sub i32 %440, %206
  %442 = add i32 %441, %214
  %443 = sub i32 %442, %215
  %444 = sub i32 %443, %217
  %445 = sub i32 %444, %229
  %446 = sub i32 %445, %241
  %447 = add i32 %446, %249
  %448 = add i32 %447, %251
  %449 = sub i32 %448, %253
  %450 = add i32 %449, %255
  %451 = add i32 %450, %258
  %452 = add i32 %451, %259
  %453 = sub i32 %452, %164
  %454 = sub i32 %453, %78
  %455 = add i32 %454, %289
  %456 = add i32 %455, %286
  %457 = add i32 %456, %282
  %458 = add i32 %457, %276
  %459 = icmp eq i32 %20, %458
  %460 = select i1 %459, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %461 = tail call i32 @puts(i8* nonnull dereferenceable(1) %460)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
