; ModuleID = '../.././c_source_file/1223_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1223_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %2, -1
  %6 = or i32 %5, %0
  %7 = xor i32 %6, %4
  %8 = or i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %4, %9
  %11 = add i32 %7, %10
  %12 = and i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = xor i32 %13, %0
  %15 = xor i32 %0, -1
  %16 = xor i32 %1, -1
  %17 = and i32 %16, %2
  %18 = and i32 %17, %15
  %19 = or i32 %16, %2
  %20 = and i32 %19, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %18, %21
  %23 = and i32 %5, %0
  %24 = or i32 %23, %12
  %25 = and i32 %12, %0
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %25, %28
  %30 = or i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = xor i32 %2, %0
  %33 = or i32 %32, %31
  %34 = or i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %1, %0
  %37 = or i32 %36, %35
  %38 = or i32 %16, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %39, %2
  %41 = xor i32 %32, -1
  %42 = and i32 %41, %1
  %43 = xor i32 %4, -1
  %44 = xor i32 %26, -1
  %45 = and i32 %44, %43
  %46 = and i32 %17, %0
  %47 = or i32 %26, %0
  %48 = xor i32 %46, %47
  %49 = or i32 %26, %39
  %50 = and i32 %12, %15
  %51 = and i32 %8, %0
  %52 = or i32 %50, %51
  %53 = xor i32 %23, -1
  %54 = and i32 %53, %16
  %55 = or i32 %32, %36
  %56 = and i32 %16, %0
  %57 = or i32 %56, %41
  %58 = and i32 %5, %1
  %59 = xor i32 %58, -1
  %60 = and i32 %44, %0
  %61 = xor i32 %44, %0
  %62 = or i32 %56, %5
  %63 = or i32 %5, %1
  %64 = shl i32 %12, 1
  %65 = or i32 %44, %15
  %66 = or i32 %4, %2
  %67 = and i32 %32, %30
  %68 = and i32 %13, %0
  %69 = or i32 %4, %44
  %70 = and i32 %26, %0
  %71 = or i32 %36, %5
  %72 = or i32 %8, %0
  %73 = and i32 %38, %41
  %74 = xor i32 %46, %28
  %75 = xor i32 %19, %0
  %76 = xor i32 %46, -1
  %77 = xor i32 %75, %76
  %78 = or i32 %35, %1
  %79 = xor i32 %63, -1
  %80 = xor i32 %79, %0
  %81 = shl i32 %80, 1
  %82 = or i32 %41, %16
  %83 = xor i32 %56, %13
  %84 = xor i32 %8, %0
  %85 = xor i32 %84, -1
  %86 = xor i32 %25, %85
  %87 = xor i32 %6, -1
  %88 = and i32 %26, %15
  %89 = or i32 %4, %41
  %90 = and i32 %53, %1
  %91 = shl i32 %90, 1
  %92 = or i32 %23, %16
  %93 = shl i32 %9, 2
  %94 = and i32 %2, %0
  %95 = or i32 %94, %39
  %96 = or i32 %35, %16
  %97 = or i32 %41, %39
  %98 = and i32 %63, %0
  %99 = and i32 %63, %15
  %100 = or i32 %18, %20
  %101 = xor i32 %36, -1
  %102 = or i32 %32, %101
  %103 = or i32 %59, %0
  %104 = or i32 %50, %70
  %105 = and i32 %41, %16
  %106 = and i32 %19, %15
  %107 = xor i32 %106, %76
  %108 = or i32 %44, %0
  %109 = and i32 %8, %15
  %110 = xor i32 %70, -1
  %111 = xor i32 %50, %110
  %112 = or i32 %5, %31
  %113 = or i32 %26, %15
  %114 = xor i32 %18, %113
  %115 = xor i32 %94, -1
  %116 = xor i32 %115, %1
  %117 = or i32 %35, %101
  %118 = and i32 %43, %2
  %119 = and i32 %34, %36
  %120 = or i32 %9, %15
  %121 = or i32 %32, %4
  %122 = shl i32 %121, 1
  %123 = xor i32 %59, %0
  %124 = xor i32 %58, %0
  %125 = shl i32 %124, 1
  %126 = or i32 %4, %35
  %127 = or i32 %94, %58
  %128 = or i32 %94, %1
  %129 = xor i32 %94, %1
  %130 = xor i32 %8, %4
  %131 = or i32 %12, %15
  %132 = xor i32 %53, %1
  %133 = shl i32 %132, 1
  %134 = or i32 %32, %1
  %135 = or i32 %12, %56
  %136 = xor i32 %43, %2
  %137 = or i32 %94, %101
  %138 = xor i32 %47, -1
  %139 = or i32 %46, %138
  %140 = or i32 %46, %75
  %141 = and i32 %6, %1
  %142 = and i32 %32, %43
  %143 = and i32 %38, %2
  %144 = shl i32 %143, 1
  %145 = and i32 %26, %43
  %146 = xor i32 %56, -1
  %147 = and i32 %41, %146
  %148 = xor i32 %12, %0
  %149 = or i32 %58, %15
  %150 = and i32 %30, %41
  %151 = and i32 %34, %1
  %152 = or i32 %8, %15
  %153 = and i32 %6, %16
  %154 = and i32 %32, %1
  %155 = shl i32 %154, 2
  %156 = and i32 %5, %146
  %157 = and i32 %5, %43
  %158 = shl i32 %113, 1
  %159 = and i32 %44, %15
  %160 = xor i32 %113, -1
  %161 = or i32 %18, %160
  %162 = xor i32 %63, %0
  %163 = or i32 %41, %101
  %164 = shl i32 %163, 1
  %165 = and i32 %6, %36
  %166 = and i32 %44, %146
  %167 = shl i32 %166, 1
  %168 = or i32 %32, %56
  %169 = or i32 %25, %84
  %170 = xor i32 %39, %2
  %171 = and i32 %32, %101
  %172 = xor i32 %30, %2
  %173 = or i32 %79, %0
  %174 = or i32 %36, %87
  %175 = and i32 %30, %5
  %176 = and i32 %115, %101
  %177 = shl i32 %36, 1
  %178 = or i32 %32, %39
  %179 = xor i32 %23, %1
  %180 = shl i32 %179, 1
  %181 = or i32 %13, %0
  %182 = or i32 %41, %31
  %183 = xor i32 %56, %59
  %184 = and i32 %101, %2
  %185 = and i32 %34, %16
  %186 = xor i32 %56, %2
  %187 = or i32 %58, %0
  %188 = shl i32 %187, 1
  %189 = and i32 %13, %15
  %190 = or i32 %46, %27
  %191 = and i32 %53, %101
  %192 = or i32 %31, %2
  %193 = xor i32 %94, %59
  %194 = and i32 %36, %2
  %195 = shl i32 %194, 1
  %196 = or i32 %44, %31
  %197 = or i32 %46, %106
  %198 = xor i32 %94, %38
  %199 = or i32 %58, %56
  %200 = or i32 %59, %15
  %201 = or i32 %94, %36
  %202 = or i32 %4, %5
  %203 = xor i32 %94, %30
  %204 = add i32 %38, 1
  %205 = xor i32 %35, %1
  %206 = xor i32 %38, %2
  %207 = and i32 %5, %101
  %208 = xor i32 %9, %0
  %209 = add i32 %63, 1
  %210 = or i32 %12, %0
  %211 = add i32 %2, 1
  %212 = and i32 %38, %44
  %213 = or i32 %23, %101
  %214 = and i32 %36, %5
  %215 = or i32 %36, %2
  %216 = xor i32 %94, %8
  %217 = or i32 %56, %2
  %218 = and i32 %38, %5
  %219 = xor i32 %23, %63
  %220 = or i32 %79, %15
  %221 = or i32 %4, %87
  %222 = and i32 %41, %101
  %223 = shl i32 %222, 1
  %224 = or i32 %63, %15
  %225 = or i32 %25, %109
  %226 = or i32 %41, %1
  %227 = shl i32 %226, 1
  %228 = xor i32 %88, 2147483647
  %229 = xor i32 %228, %25
  %230 = shl i32 %229, 1
  %231 = and i32 %36, %115
  %232 = xor i32 %34, %4
  %233 = add i32 %32, 1
  %234 = and i32 %146, %2
  %235 = add i32 %94, 1
  %236 = and i32 %6, %101
  %237 = and i32 %9, %15
  %238 = and i32 %58, %15
  %239 = mul i32 %238, -11
  %240 = and i32 %9, %0
  %241 = mul i32 %240, -7
  %242 = and i32 %58, %0
  %243 = and i32 %79, %15
  %244 = mul i32 %243, -12
  %245 = mul i32 %50, -9
  %246 = and i32 %79, %0
  %247 = mul i32 %246, -13
  %248 = add i32 %215, %31
  %249 = add i32 %248, %192
  %250 = add i32 %249, %232
  %251 = add i32 %250, %199
  %252 = add i32 %251, %176
  %253 = add i32 %252, %165
  %254 = add i32 %253, %162
  %255 = add i32 %254, %47
  %256 = add i32 %255, %88
  %257 = add i32 %256, %72
  %258 = add i32 %257, %69
  %259 = add i32 %258, %37
  %260 = add i32 %259, %100
  %261 = add i32 %260, %114
  %262 = add i32 %261, %52
  %263 = shl i32 %262, 1
  %264 = add i32 %242, %8
  %265 = sub i32 %25, %264
  %266 = add i32 %265, %45
  %267 = add i32 %266, %24
  %268 = mul i32 %267, 3
  %269 = add i32 %103, %32
  %270 = add i32 %269, %126
  %271 = add i32 %270, %70
  %272 = shl i32 %271, 2
  %273 = sub i32 %219, %237
  %274 = add i32 %273, %145
  %275 = mul i32 %274, 5
  %276 = add i32 %1, -2
  %277 = add i32 %276, %43
  %278 = sub i32 %277, %30
  %279 = add i32 %278, %204
  %280 = add i32 %279, %211
  %281 = add i32 %280, %38
  %282 = sub i32 %281, %40
  %283 = add i32 %282, %59
  %284 = add i32 %283, %62
  %285 = add i32 %284, %63
  %286 = sub i32 %285, %66
  %287 = add i32 %286, %71
  %288 = add i32 %287, %87
  %289 = add i32 %288, %44
  %290 = sub i32 %289, %23
  %291 = sub i32 %290, %26
  %292 = add i32 %291, %112
  %293 = sub i32 %292, %118
  %294 = sub i32 %293, %94
  %295 = sub i32 %294, %136
  %296 = add i32 %295, %156
  %297 = sub i32 %296, %157
  %298 = add i32 %297, %170
  %299 = add i32 %298, %172
  %300 = sub i32 %299, %175
  %301 = sub i32 %300, %177
  %302 = sub i32 %301, %184
  %303 = sub i32 %302, %186
  %304 = sub i32 %303, %202
  %305 = sub i32 %304, %206
  %306 = add i32 %305, %207
  %307 = add i32 %306, %209
  %308 = add i32 %307, %214
  %309 = add i32 %308, %217
  %310 = sub i32 %309, %218
  %311 = add i32 %310, %233
  %312 = add i32 %311, %234
  %313 = add i32 %312, %235
  %314 = sub i32 %313, %14
  %315 = add i32 %314, %33
  %316 = add i32 %315, %42
  %317 = add i32 %316, %49
  %318 = add i32 %317, %54
  %319 = add i32 %318, %55
  %320 = add i32 %319, %57
  %321 = sub i32 %320, %60
  %322 = add i32 %321, %61
  %323 = sub i32 %322, %64
  %324 = add i32 %323, %65
  %325 = add i32 %324, %67
  %326 = add i32 %325, %68
  %327 = sub i32 %326, %73
  %328 = add i32 %327, %78
  %329 = add i32 %328, %82
  %330 = sub i32 %329, %83
  %331 = sub i32 %330, %89
  %332 = sub i32 %331, %92
  %333 = sub i32 %332, %93
  %334 = add i32 %333, %95
  %335 = sub i32 %334, %96
  %336 = add i32 %335, %97
  %337 = add i32 %336, %98
  %338 = add i32 %337, %99
  %339 = sub i32 %338, %102
  %340 = add i32 %339, %51
  %341 = sub i32 %340, %105
  %342 = add i32 %341, %108
  %343 = add i32 %342, %109
  %344 = sub i32 %343, %116
  %345 = sub i32 %344, %117
  %346 = sub i32 %345, %119
  %347 = sub i32 %346, %120
  %348 = sub i32 %347, %123
  %349 = add i32 %348, %127
  %350 = sub i32 %349, %128
  %351 = add i32 %350, %129
  %352 = add i32 %351, %130
  %353 = add i32 %352, %131
  %354 = sub i32 %353, %134
  %355 = sub i32 %354, %135
  %356 = sub i32 %355, %137
  %357 = add i32 %356, %141
  %358 = add i32 %357, %142
  %359 = sub i32 %358, %144
  %360 = add i32 %359, %147
  %361 = sub i32 %360, %148
  %362 = sub i32 %361, %149
  %363 = sub i32 %362, %150
  %364 = add i32 %363, %151
  %365 = add i32 %364, %152
  %366 = add i32 %365, %153
  %367 = sub i32 %366, %159
  %368 = sub i32 %367, %168
  %369 = add i32 %368, %171
  %370 = add i32 %369, %173
  %371 = sub i32 %370, %174
  %372 = sub i32 %371, %178
  %373 = sub i32 %372, %181
  %374 = sub i32 %373, %182
  %375 = sub i32 %374, %183
  %376 = sub i32 %375, %185
  %377 = sub i32 %376, %189
  %378 = sub i32 %377, %191
  %379 = add i32 %378, %193
  %380 = sub i32 %379, %195
  %381 = sub i32 %380, %196
  %382 = sub i32 %381, %198
  %383 = sub i32 %382, %200
  %384 = sub i32 %383, %201
  %385 = sub i32 %384, %203
  %386 = sub i32 %385, %205
  %387 = sub i32 %386, %208
  %388 = sub i32 %387, %210
  %389 = add i32 %388, %212
  %390 = sub i32 %389, %213
  %391 = sub i32 %390, %216
  %392 = add i32 %391, %220
  %393 = add i32 %392, %221
  %394 = add i32 %393, %224
  %395 = add i32 %394, %27
  %396 = add i32 %395, %231
  %397 = sub i32 %396, %84
  %398 = sub i32 %397, %236
  %399 = sub i32 %398, %22
  %400 = sub i32 %399, %29
  %401 = sub i32 %400, %48
  %402 = sub i32 %401, %74
  %403 = sub i32 %402, %77
  %404 = sub i32 %403, %81
  %405 = add i32 %404, %86
  %406 = sub i32 %405, %91
  %407 = sub i32 %406, %104
  %408 = sub i32 %407, %107
  %409 = add i32 %408, %111
  %410 = sub i32 %409, %122
  %411 = sub i32 %410, %125
  %412 = sub i32 %411, %133
  %413 = sub i32 %412, %139
  %414 = add i32 %413, %140
  %415 = sub i32 %414, %155
  %416 = sub i32 %415, %158
  %417 = add i32 %416, %161
  %418 = sub i32 %417, %164
  %419 = sub i32 %418, %167
  %420 = sub i32 %419, %169
  %421 = sub i32 %420, %180
  %422 = sub i32 %421, %188
  %423 = add i32 %422, %190
  %424 = add i32 %423, %197
  %425 = sub i32 %424, %223
  %426 = sub i32 %425, %225
  %427 = sub i32 %426, %227
  %428 = add i32 %427, %239
  %429 = add i32 %428, %241
  %430 = add i32 %429, %244
  %431 = add i32 %430, %245
  %432 = add i32 %431, %247
  %433 = sub i32 %432, %230
  %434 = add i32 %433, %275
  %435 = add i32 %434, %272
  %436 = add i32 %435, %268
  %437 = add i32 %436, %263
  %438 = icmp eq i32 %11, %437
  %439 = select i1 %438, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %440 = tail call i32 @puts(i8* nonnull dereferenceable(1) %439)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
