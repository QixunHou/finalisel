; ModuleID = '../.././c_source_file/0337_path_condition_crackme.c'
source_filename = "../.././c_source_file/0337_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = or i32 %5, %2
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %2, %0
  %10 = and i32 %9, %8
  %11 = and i32 %9, %7
  %12 = and i32 %1, %0
  %13 = xor i32 %2, %1
  %14 = or i32 %13, %12
  %15 = xor i32 %12, -1
  %16 = and i32 %9, %15
  %17 = xor i32 %0, -1
  %18 = or i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = or i32 %19, %17
  %21 = and i32 %2, %1
  %22 = xor i32 %21, %0
  %23 = and i32 %7, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, -1
  %26 = or i32 %25, %0
  %27 = xor i32 %26, %1
  %28 = xor i32 %9, -1
  %29 = or i32 %4, %28
  %30 = and i32 %25, %1
  %31 = xor i32 %30, -1
  %32 = xor i32 %31, %0
  %33 = or i32 %2, %0
  %34 = and i32 %33, %1
  %35 = and i32 %31, %17
  %36 = xor i32 %15, %2
  %37 = or i32 %9, %5
  %38 = and i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %4, %39
  %41 = and i32 %13, %24
  %42 = xor i32 %33, -1
  %43 = or i32 %4, %42
  %44 = and i32 %7, %2
  %45 = and i32 %44, %17
  %46 = or i32 %7, %2
  %47 = and i32 %46, %0
  %48 = or i32 %45, %47
  %49 = xor i32 %13, -1
  %50 = and i32 %49, %0
  %51 = or i32 %38, %7
  %52 = and i32 %21, %0
  %53 = xor i32 %13, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %52, %54
  %56 = xor i32 %8, -1
  %57 = or i32 %13, %56
  %58 = and i32 %13, %0
  %59 = xor i32 %26, -1
  %60 = or i32 %23, %2
  %61 = and i32 %44, %0
  %62 = and i32 %46, %17
  %63 = or i32 %61, %62
  %64 = xor i32 %39, %1
  %65 = xor i32 %38, %31
  %66 = xor i32 %24, %2
  %67 = or i32 %25, %1
  %68 = xor i32 %67, -1
  %69 = add i32 %67, 1
  %70 = and i32 %8, %2
  %71 = or i32 %67, %0
  %72 = and i32 %18, %17
  %73 = xor i32 %21, -1
  %74 = add i32 %21, 1
  %75 = and i32 %4, %28
  %76 = and i32 %21, %17
  %77 = xor i32 %58, -1
  %78 = xor i32 %76, %77
  %79 = or i32 %9, %23
  %80 = shl i32 %79, 1
  %81 = and i32 %39, %5
  %82 = shl i32 %81, 1
  %83 = or i32 %12, %28
  %84 = shl i32 %18, 1
  %85 = and i32 %25, %0
  %86 = or i32 %85, %5
  %87 = xor i32 %18, %0
  %88 = xor i32 %52, -1
  %89 = xor i32 %87, %88
  %90 = or i32 %1, %0
  %91 = and i32 %9, %90
  %92 = and i32 %49, %24
  %93 = or i32 %38, %30
  %94 = and i32 %13, %8
  %95 = or i32 %68, %0
  %96 = or i32 %18, %0
  %97 = or i32 %85, %21
  %98 = or i32 %12, %19
  %99 = and i32 %9, %4
  %100 = or i32 %85, %7
  %101 = or i32 %23, %49
  %102 = xor i32 %47, -1
  %103 = xor i32 %45, %102
  %104 = or i32 %28, %5
  %105 = shl i32 %104, 1
  %106 = or i32 %12, %2
  %107 = and i32 %90, %25
  %108 = xor i32 %26, %12
  %109 = and i32 %8, %25
  %110 = shl i32 %49, 1
  %111 = xor i32 %85, -1
  %112 = and i32 %111, %5
  %113 = xor i32 %12, %2
  %114 = xor i32 %90, -1
  %115 = or i32 %114, %2
  %116 = and i32 %13, %15
  %117 = or i32 %31, %17
  %118 = shl i32 %117, 1
  %119 = and i32 %18, %0
  %120 = xor i32 %119, 2147483647
  %121 = xor i32 %120, %76
  %122 = shl i32 %121, 1
  %123 = or i32 %49, %0
  %124 = xor i32 %46, %0
  %125 = xor i32 %61, -1
  %126 = xor i32 %124, %125
  %127 = xor i32 %38, %90
  %128 = or i32 %25, %114
  %129 = xor i32 %38, %18
  %130 = and i32 %28, %24
  %131 = xor i32 %18, %12
  %132 = shl i32 %131, 1
  %133 = xor i32 %62, %125
  %134 = or i32 %52, %87
  %135 = xor i32 %85, %1
  %136 = or i32 %23, %28
  %137 = shl i32 %136, 2
  %138 = or i32 %42, %5
  %139 = or i32 %13, %17
  %140 = xor i32 %45, %139
  %141 = shl i32 %140, 1
  %142 = and i32 %25, %15
  %143 = and i32 %28, %1
  %144 = xor i32 %33, %1
  %145 = and i32 %25, %24
  %146 = and i32 %24, %2
  %147 = or i32 %31, %0
  %148 = shl i32 %147, 1
  %149 = or i32 %42, %1
  %150 = or i32 %21, %23
  %151 = and i32 %9, %5
  %152 = shl i32 %151, 2
  %153 = xor i32 %67, %0
  %154 = shl i32 %139, 1
  %155 = and i32 %28, %7
  %156 = or i32 %28, %7
  %157 = xor i32 %139, -1
  %158 = or i32 %45, %157
  %159 = and i32 %33, %5
  %160 = xor i32 %23, %31
  %161 = or i32 %30, %17
  %162 = xor i32 %72, %88
  %163 = or i32 %49, %56
  %164 = xor i32 %85, %67
  %165 = and i32 %33, %7
  %166 = or i32 %28, %56
  %167 = xor i32 %23, %73
  %168 = xor i32 %33, %12
  %169 = or i32 %28, %114
  %170 = xor i32 %8, %2
  %171 = or i32 %38, %4
  %172 = or i32 %76, %58
  %173 = and i32 %28, %5
  %174 = and i32 %26, %4
  %175 = xor i32 %114, %2
  %176 = and i32 %8, %28
  %177 = or i32 %38, %56
  %178 = or i32 %25, %56
  %179 = or i32 %30, %0
  %180 = and i32 %111, %1
  %181 = and i32 %26, %5
  %182 = or i32 %12, %59
  %183 = and i32 %13, %17
  %184 = and i32 %39, %7
  %185 = and i32 %39, %1
  %186 = or i32 %52, %72
  %187 = xor i32 %111, %1
  %188 = and i32 %25, %5
  %189 = xor i32 %67, %12
  %190 = shl i32 %189, 1
  %191 = or i32 %21, %0
  %192 = and i32 %33, %4
  %193 = shl i32 %192, 1
  %194 = xor i32 %42, %1
  %195 = and i32 %90, %49
  %196 = or i32 %76, %119
  %197 = or i32 %49, %17
  %198 = or i32 %4, %2
  %199 = or i32 %61, %53
  %200 = xor i32 %52, %53
  %201 = and i32 %4, %2
  %202 = and i32 %9, %1
  %203 = and i32 %5, %2
  %204 = shl i32 %203, 1
  %205 = and i32 %28, %15
  %206 = or i32 %9, %12
  %207 = or i32 %13, %0
  %208 = xor i32 %61, %207
  %209 = and i32 %4, %111
  %210 = or i32 %59, %7
  %211 = or i32 %9, %1
  %212 = and i32 %26, %7
  %213 = or i32 %52, %183
  %214 = or i32 %9, %7
  %215 = and i32 %67, %17
  %216 = xor i32 %207, 2147483647
  %217 = or i32 %216, %61
  %218 = shl i32 %217, 1
  %219 = or i32 %12, %25
  %220 = shl i32 %19, 1
  %221 = or i32 %9, %114
  %222 = shl i32 %221, 1
  %223 = xor i32 %85, %73
  %224 = xor i32 %73, %0
  %225 = or i32 %9, %4
  %226 = shl i32 %225, 1
  %227 = and i32 %90, %2
  %228 = xor i32 %23, %2
  %229 = or i32 %30, %23
  %230 = add i32 %1, 1
  %231 = or i32 %13, %23
  %232 = and i32 %67, %0
  %233 = or i32 %4, %25
  %234 = xor i32 %30, %0
  %235 = or i32 %12, %68
  %236 = or i32 %38, %19
  %237 = and i32 %111, %7
  %238 = and i32 %73, %17
  %239 = or i32 %28, %1
  %240 = and i32 %31, %0
  %241 = or i32 %68, %17
  %242 = or i32 %4, %59
  %243 = or i32 %56, %2
  %244 = xor i32 %59, %1
  %245 = xor i32 %90, %2
  %246 = or i32 %19, %0
  %247 = xor i32 %19, %0
  %248 = and i32 %9, %24
  %249 = and i32 %13, %90
  %250 = shl i32 %249, 1
  %251 = or i32 %61, %124
  %252 = xor i32 %49, %0
  %253 = or i32 %67, %17
  %254 = or i32 %85, %1
  %255 = or i32 %23, %25
  %256 = or i32 %38, %1
  %257 = or i32 %42, %7
  %258 = xor i32 %38, %1
  %259 = or i32 %13, %114
  %260 = and i32 %4, %25
  %261 = xor i32 %38, %8
  %262 = and i32 %73, %0
  %263 = and i32 %26, %1
  %264 = or i32 %73, %0
  %265 = xor i32 %61, %54
  %266 = or i32 %25, %5
  %267 = or i32 %49, %114
  %268 = or i32 %18, %17
  %269 = or i32 %85, %68
  %270 = and i32 %49, %17
  %271 = or i32 %73, %17
  %272 = and i32 %15, %2
  %273 = shl i32 %272, 1
  %274 = or i32 %38, %114
  %275 = shl i32 %33, 1
  %276 = and i32 %19, %17
  %277 = shl i32 %276, 3
  %278 = and i32 %30, %17
  %279 = and i32 %19, %0
  %280 = mul i32 %279, 12
  %281 = and i32 %30, %0
  %282 = mul i32 %281, -13
  %283 = and i32 %68, %17
  %284 = and i32 %68, %0
  %285 = add i32 %5, %17
  %286 = add i32 %285, %233
  %287 = add i32 %286, %59
  %288 = add i32 %287, %21
  %289 = add i32 %288, %268
  %290 = add i32 %289, %263
  %291 = add i32 %290, %262
  %292 = add i32 %291, %231
  %293 = add i32 %292, %202
  %294 = add i32 %293, %174
  %295 = add i32 %294, %155
  %296 = add i32 %295, %153
  %297 = add i32 %296, %123
  %298 = add i32 %297, %112
  %299 = add i32 %298, %97
  %300 = add i32 %299, %72
  %301 = add i32 %300, %58
  %302 = add i32 %301, %50
  %303 = add i32 %302, %14
  %304 = add i32 %178, %24
  %305 = add i32 %304, %74
  %306 = sub i32 %305, %177
  %307 = mul i32 %306, 3
  %308 = add i32 %20, %211
  %309 = sub i32 %308, %133
  %310 = mul i32 %309, 5
  %311 = add i32 %76, %283
  %312 = mul i32 %311, -9
  %313 = sub i32 %284, %278
  %314 = mul i32 %313, 23
  %315 = add i32 %179, %159
  %316 = shl i32 %315, 2
  %317 = add i32 %303, %116
  %318 = add i32 %317, %208
  %319 = shl i32 %318, 1
  %320 = sub i32 -3, %0
  %321 = add i32 %320, %1
  %322 = add i32 %321, %230
  %323 = sub i32 %322, %2
  %324 = add i32 %323, %114
  %325 = sub i32 %324, %8
  %326 = add i32 %325, %56
  %327 = add i32 %326, %25
  %328 = sub i32 %327, %12
  %329 = add i32 %328, %15
  %330 = sub i32 %329, %36
  %331 = add i32 %330, %60
  %332 = add i32 %331, %66
  %333 = add i32 %332, %69
  %334 = add i32 %333, %70
  %335 = sub i32 %334, %106
  %336 = sub i32 %335, %107
  %337 = sub i32 %336, %109
  %338 = add i32 %337, %113
  %339 = sub i32 %338, %115
  %340 = sub i32 %339, %128
  %341 = sub i32 %340, %142
  %342 = sub i32 %341, %145
  %343 = add i32 %342, %146
  %344 = add i32 %343, %39
  %345 = sub i32 %344, %170
  %346 = add i32 %345, %175
  %347 = sub i32 %346, %67
  %348 = add i32 %347, %188
  %349 = add i32 %348, %42
  %350 = add i32 %349, %198
  %351 = add i32 %350, %201
  %352 = sub i32 %351, %219
  %353 = sub i32 %352, %227
  %354 = sub i32 %353, %228
  %355 = sub i32 %354, %243
  %356 = add i32 %355, %245
  %357 = sub i32 %356, %255
  %358 = sub i32 %357, %260
  %359 = add i32 %358, %266
  %360 = add i32 %359, %13
  %361 = add i32 %360, %11
  %362 = add i32 %361, %10
  %363 = sub i32 %362, %16
  %364 = sub i32 %363, %22
  %365 = sub i32 %364, %27
  %366 = sub i32 %365, %29
  %367 = add i32 %366, %32
  %368 = sub i32 %367, %34
  %369 = add i32 %368, %35
  %370 = sub i32 %369, %37
  %371 = add i32 %370, %40
  %372 = add i32 %371, %41
  %373 = sub i32 %372, %43
  %374 = add i32 %373, %51
  %375 = add i32 %374, %57
  %376 = sub i32 %375, %64
  %377 = sub i32 %376, %65
  %378 = add i32 %377, %71
  %379 = add i32 %378, %75
  %380 = sub i32 %379, %83
  %381 = sub i32 %380, %84
  %382 = sub i32 %381, %86
  %383 = sub i32 %382, %91
  %384 = add i32 %383, %92
  %385 = add i32 %384, %93
  %386 = sub i32 %385, %94
  %387 = sub i32 %386, %95
  %388 = sub i32 %387, %96
  %389 = add i32 %388, %98
  %390 = add i32 %389, %99
  %391 = add i32 %390, %100
  %392 = sub i32 %391, %101
  %393 = sub i32 %392, %108
  %394 = sub i32 %393, %110
  %395 = add i32 %394, %127
  %396 = sub i32 %395, %129
  %397 = add i32 %396, %130
  %398 = add i32 %397, %135
  %399 = add i32 %398, %138
  %400 = add i32 %399, %143
  %401 = sub i32 %400, %144
  %402 = add i32 %401, %149
  %403 = sub i32 %402, %150
  %404 = sub i32 %403, %156
  %405 = sub i32 %404, %160
  %406 = add i32 %405, %161
  %407 = add i32 %406, %163
  %408 = sub i32 %407, %164
  %409 = sub i32 %408, %165
  %410 = add i32 %409, %166
  %411 = add i32 %410, %167
  %412 = add i32 %411, %168
  %413 = add i32 %412, %169
  %414 = add i32 %413, %171
  %415 = sub i32 %414, %173
  %416 = sub i32 %415, %176
  %417 = add i32 %416, %87
  %418 = sub i32 %417, %180
  %419 = add i32 %418, %181
  %420 = sub i32 %419, %182
  %421 = add i32 %420, %183
  %422 = add i32 %421, %184
  %423 = add i32 %422, %185
  %424 = sub i32 %423, %187
  %425 = add i32 %424, %191
  %426 = sub i32 %425, %194
  %427 = add i32 %426, %195
  %428 = add i32 %427, %197
  %429 = sub i32 %428, %204
  %430 = sub i32 %429, %205
  %431 = add i32 %430, %206
  %432 = add i32 %431, %209
  %433 = add i32 %432, %210
  %434 = sub i32 %433, %53
  %435 = sub i32 %434, %212
  %436 = add i32 %435, %214
  %437 = add i32 %436, %215
  %438 = sub i32 %437, %220
  %439 = sub i32 %438, %223
  %440 = add i32 %439, %224
  %441 = add i32 %440, %229
  %442 = sub i32 %441, %232
  %443 = sub i32 %442, %234
  %444 = sub i32 %443, %235
  %445 = sub i32 %444, %236
  %446 = add i32 %445, %237
  %447 = add i32 %446, %238
  %448 = sub i32 %447, %239
  %449 = sub i32 %448, %240
  %450 = add i32 %449, %241
  %451 = sub i32 %450, %242
  %452 = sub i32 %451, %244
  %453 = add i32 %452, %246
  %454 = add i32 %453, %247
  %455 = add i32 %454, %248
  %456 = sub i32 %455, %252
  %457 = sub i32 %456, %253
  %458 = add i32 %457, %254
  %459 = add i32 %458, %119
  %460 = sub i32 %459, %256
  %461 = sub i32 %460, %257
  %462 = add i32 %461, %207
  %463 = add i32 %462, %258
  %464 = add i32 %463, %259
  %465 = add i32 %464, %261
  %466 = add i32 %465, %264
  %467 = sub i32 %466, %267
  %468 = sub i32 %467, %269
  %469 = sub i32 %468, %270
  %470 = sub i32 %469, %271
  %471 = sub i32 %470, %273
  %472 = sub i32 %471, %274
  %473 = sub i32 %472, %275
  %474 = sub i32 %473, %52
  %475 = sub i32 %474, %48
  %476 = sub i32 %475, %55
  %477 = sub i32 %476, %63
  %478 = sub i32 %477, %78
  %479 = sub i32 %478, %80
  %480 = sub i32 %479, %82
  %481 = sub i32 %480, %89
  %482 = add i32 %481, %103
  %483 = sub i32 %482, %105
  %484 = sub i32 %483, %118
  %485 = sub i32 %484, %126
  %486 = sub i32 %485, %132
  %487 = sub i32 %486, %134
  %488 = sub i32 %487, %137
  %489 = sub i32 %488, %148
  %490 = sub i32 %489, %152
  %491 = sub i32 %490, %154
  %492 = add i32 %491, %158
  %493 = sub i32 %492, %162
  %494 = sub i32 %493, %172
  %495 = add i32 %494, %186
  %496 = sub i32 %495, %190
  %497 = sub i32 %496, %193
  %498 = add i32 %497, %196
  %499 = sub i32 %498, %199
  %500 = add i32 %499, %200
  %501 = add i32 %500, %213
  %502 = sub i32 %501, %222
  %503 = sub i32 %502, %226
  %504 = sub i32 %503, %250
  %505 = add i32 %504, %251
  %506 = sub i32 %505, %265
  %507 = add i32 %506, %277
  %508 = add i32 %507, %280
  %509 = add i32 %508, %282
  %510 = sub i32 %509, %141
  %511 = add i32 %510, %312
  %512 = add i32 %511, %314
  %513 = add i32 %512, %316
  %514 = sub i32 %513, %122
  %515 = sub i32 %514, %218
  %516 = add i32 %515, %307
  %517 = add i32 %516, %310
  %518 = add i32 %517, %319
  %519 = icmp eq i32 %6, %518
  %520 = select i1 %519, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %521 = tail call i32 @puts(i8* nonnull dereferenceable(1) %520)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
