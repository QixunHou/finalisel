; ModuleID = '../.././c_source_file/0529_path_condition_crackme.c'
source_filename = "../.././c_source_file/0529_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = or i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = and i32 %5, %3
  %12 = and i32 %11, %4
  %13 = xor i32 %4, -1
  %14 = or i32 %5, %3
  %15 = and i32 %14, %13
  %16 = or i32 %12, %15
  %17 = sub i32 %16, %10
  %18 = xor i32 %2, %1
  %19 = or i32 %18, %0
  %20 = shl i32 %19, 1
  %21 = xor i32 %1, -1
  %22 = or i32 %21, %0
  %23 = and i32 %22, %2
  %24 = xor i32 %2, -1
  %25 = or i32 %24, %1
  %26 = xor i32 %25, %7
  %27 = shl i32 %26, 1
  %28 = and i32 %21, %0
  %29 = and i32 %28, %2
  %30 = xor i32 %29, %19
  %31 = xor i32 %2, %0
  %32 = and i32 %31, %21
  %33 = or i32 %2, %1
  %34 = xor i32 %33, %7
  %35 = xor i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %24, %36
  %38 = xor i32 %7, -1
  %39 = and i32 %24, %38
  %40 = and i32 %2, %0
  %41 = xor i32 %22, -1
  %42 = or i32 %40, %41
  %43 = xor i32 %25, -1
  %44 = or i32 %7, %43
  %45 = or i32 %1, %0
  %46 = xor i32 %45, %2
  %47 = and i32 %24, %0
  %48 = xor i32 %47, %25
  %49 = xor i32 %31, -1
  %50 = and i32 %35, %49
  %51 = and i32 %2, %1
  %52 = xor i32 %51, %0
  %53 = and i32 %31, %1
  %54 = and i32 %31, %36
  %55 = xor i32 %33, -1
  %56 = xor i32 %55, %0
  %57 = xor i32 %0, -1
  %58 = or i32 %43, %57
  %59 = xor i32 %51, -1
  %60 = and i32 %59, %0
  %61 = or i32 %36, %2
  %62 = xor i32 %25, %0
  %63 = or i32 %7, %49
  %64 = or i32 %9, %1
  %65 = or i32 %24, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %36
  %68 = or i32 %40, %36
  %69 = shl i32 %68, 1
  %70 = or i32 %31, %1
  %71 = and i32 %22, %24
  %72 = or i32 %7, %55
  %73 = xor i32 %9, %1
  %74 = and i32 %45, %2
  %75 = shl i32 %74, 1
  %76 = and i32 %51, %0
  %77 = xor i32 %33, %0
  %78 = or i32 %76, %77
  %79 = or i32 %18, %28
  %80 = and i32 %24, %1
  %81 = xor i32 %80, %0
  %82 = shl i32 %81, 1
  %83 = xor i32 %45, -1
  %84 = add i32 %45, 1
  %85 = xor i32 %80, -1
  %86 = xor i32 %85, %0
  %87 = or i32 %40, %83
  %88 = and i32 %49, %38
  %89 = shl i32 %88, 1
  %90 = xor i32 %28, %85
  %91 = xor i32 %65, %1
  %92 = or i32 %47, %1
  %93 = xor i32 %59, %0
  %94 = or i32 %24, %41
  %95 = and i32 %55, %57
  %96 = mul i32 %95, -6
  %97 = and i32 %80, %57
  %98 = and i32 %55, %0
  %99 = and i32 %80, %0
  %100 = shl i32 %99, 3
  %101 = and i32 %43, %57
  %102 = and i32 %51, %57
  %103 = shl i32 %102, 1
  %104 = xor i32 %5, -1
  %105 = and i32 %104, %4
  %106 = xor i32 %4, %3
  %107 = or i32 %105, %106
  %108 = xor i32 %106, -1
  %109 = and i32 %108, %5
  %110 = or i32 %104, %4
  %111 = and i32 %110, %106
  %112 = xor i32 %3, -1
  %113 = and i32 %112, %4
  %114 = xor i32 %113, -1
  %115 = xor i32 %5, %4
  %116 = xor i32 %115, -1
  %117 = and i32 %116, %114
  %118 = xor i32 %105, -1
  %119 = shl i32 %118, 1
  %120 = and i32 %5, %4
  %121 = and i32 %104, %3
  %122 = xor i32 %121, -1
  %123 = xor i32 %120, %122
  %124 = or i32 %113, %104
  %125 = or i32 %5, %4
  %126 = and i32 %125, %3
  %127 = xor i32 %11, -1
  %128 = or i32 %127, %4
  %129 = and i32 %110, %112
  %130 = and i32 %106, %116
  %131 = xor i32 %5, %3
  %132 = or i32 %131, %4
  %133 = or i32 %115, %3
  %134 = and i32 %112, %5
  %135 = and i32 %134, %13
  %136 = or i32 %131, %13
  %137 = xor i32 %135, %136
  %138 = xor i32 %125, %3
  %139 = or i32 %4, %3
  %140 = xor i32 %139, -1
  %141 = or i32 %140, %5
  %142 = and i32 %4, %3
  %143 = or i32 %104, %3
  %144 = xor i32 %143, %142
  %145 = or i32 %142, %104
  %146 = and i32 %115, %139
  %147 = shl i32 %146, 2
  %148 = xor i32 %14, %4
  %149 = or i32 %12, %148
  %150 = or i32 %127, %13
  %151 = or i32 %115, %140
  %152 = shl i32 %151, 1
  %153 = xor i32 %120, -1
  %154 = and i32 %106, %153
  %155 = and i32 %134, %4
  %156 = xor i32 %132, -1
  %157 = or i32 %155, %156
  %158 = xor i32 %110, -1
  %159 = or i32 %106, %158
  %160 = xor i32 %142, -1
  %161 = and i32 %116, %160
  %162 = or i32 %131, %113
  %163 = and i32 %139, %116
  %164 = or i32 %14, %13
  %165 = and i32 %11, %13
  %166 = and i32 %14, %4
  %167 = or i32 %165, %166
  %168 = or i32 %122, %13
  %169 = xor i32 %125, -1
  %170 = or i32 %106, %169
  %171 = or i32 %115, %112
  %172 = or i32 %106, %5
  %173 = xor i32 %131, %4
  %174 = or i32 %155, %173
  %175 = add i32 %106, 1
  %176 = or i32 %120, %112
  %177 = or i32 %105, %112
  %178 = and i32 %116, %3
  %179 = or i32 %112, %5
  %180 = xor i32 %179, %4
  %181 = or i32 %155, %180
  %182 = and i32 %131, %4
  %183 = xor i32 %165, -1
  %184 = xor i32 %182, %183
  %185 = or i32 %169, %3
  %186 = shl i32 %185, 1
  %187 = xor i32 %143, -1
  %188 = xor i32 %187, %4
  %189 = xor i32 %14, -1
  %190 = or i32 %189, %4
  %191 = and i32 %104, %160
  %192 = xor i32 %153, %3
  %193 = xor i32 %127, %4
  %194 = or i32 %112, %4
  %195 = xor i32 %120, %194
  %196 = and i32 %110, %3
  %197 = xor i32 %110, %142
  %198 = xor i32 %131, -1
  %199 = xor i32 %198, %4
  %200 = shl i32 %199, 1
  %201 = and i32 %179, %13
  %202 = or i32 %155, %201
  %203 = shl i32 %202, 1
  %204 = and i32 %104, %114
  %205 = and i32 %198, %4
  %206 = and i32 %118, %108
  %207 = xor i32 %118, %3
  %208 = shl i32 %5, 1
  %209 = or i32 %121, %113
  %210 = and i32 %131, %160
  %211 = and i32 %125, %106
  %212 = shl i32 %211, 1
  %213 = xor i32 %194, -1
  %214 = or i32 %213, %5
  %215 = or i32 %106, %104
  %216 = and i32 %115, %114
  %217 = or i32 %158, %108
  %218 = shl i32 %217, 1
  %219 = or i32 %115, %213
  %220 = xor i32 %173, -1
  %221 = xor i32 %155, %220
  %222 = or i32 %142, %187
  %223 = xor i32 %122, %4
  %224 = xor i32 %11, %4
  %225 = and i32 %198, %114
  %226 = add i32 %5, 1
  %227 = or i32 %143, %4
  %228 = xor i32 %189, %4
  %229 = add i32 %115, 1
  %230 = and i32 %115, %108
  %231 = shl i32 %230, 1
  %232 = or i32 %120, %121
  %233 = xor i32 %213, %5
  %234 = and i32 %115, %106
  %235 = shl i32 %234, 1
  %236 = or i32 %105, %11
  %237 = and i32 %179, %4
  %238 = or i32 %135, %237
  %239 = and i32 %116, %108
  %240 = and i32 %139, %104
  %241 = or i32 %116, %112
  %242 = xor i32 %12, %173
  %243 = and i32 %122, %4
  %244 = or i32 %116, %140
  %245 = add i32 %113, 1
  %246 = xor i32 %120, %3
  %247 = xor i32 %142, %5
  %248 = xor i32 %113, %122
  %249 = and i32 %194, %198
  %250 = shl i32 %249, 1
  %251 = xor i32 %12, 2147483647
  %252 = xor i32 %251, %148
  %253 = or i32 %104, %213
  %254 = and i32 %194, %116
  %255 = shl i32 %213, 1
  %256 = or i32 %142, %116
  %257 = xor i32 %160, %5
  %258 = and i32 %131, %13
  %259 = or i32 %105, %187
  %260 = xor i32 %251, %258
  %261 = or i32 %106, %116
  %262 = xor i32 %105, %3
  %263 = and i32 %104, %108
  %264 = or i32 %120, %213
  %265 = and i32 %127, %4
  %266 = and i32 %118, %112
  %267 = or i32 %142, %169
  %268 = or i32 %105, %3
  %269 = and i32 %139, %198
  %270 = and i32 %115, %160
  %271 = or i32 %11, %113
  %272 = or i32 %131, %213
  %273 = or i32 %121, %4
  %274 = or i32 %198, %213
  %275 = or i32 %198, %13
  %276 = or i32 %120, %189
  %277 = or i32 %158, %112
  %278 = or i32 %120, %140
  %279 = xor i32 %113, %5
  %280 = or i32 %169, %112
  %281 = and i32 %143, %13
  %282 = xor i32 %114, %5
  %283 = xor i32 %15, -1
  %284 = xor i32 %12, %283
  %285 = and i32 %198, %13
  %286 = xor i32 %113, %127
  %287 = xor i32 %143, %4
  %288 = or i32 %120, %3
  %289 = and i32 %110, %108
  %290 = xor i32 %155, %132
  %291 = or i32 %187, %13
  %292 = or i32 %158, %3
  %293 = or i32 %113, %198
  %294 = and i32 %131, %139
  %295 = add i32 %3, 1
  %296 = or i32 %113, %116
  %297 = and i32 %106, %5
  %298 = and i32 %160, %5
  %299 = or i32 %142, %198
  %300 = shl i32 %299, 1
  %301 = xor i32 %14, %142
  %302 = and i32 %153, %108
  %303 = and i32 %116, %112
  %304 = xor i32 %105, %127
  %305 = xor i32 %105, %143
  %306 = and i32 %198, %160
  %307 = or i32 %198, %140
  %308 = xor i32 %155, -1
  %309 = xor i32 %180, %308
  %310 = and i32 %153, %3
  %311 = or i32 %104, %108
  %312 = and i32 %115, %3
  %313 = and i32 %194, %5
  %314 = or i32 %116, %213
  %315 = xor i32 %110, %3
  %316 = or i32 %104, %140
  %317 = and i32 %131, %114
  %318 = and i32 %125, %112
  %319 = xor i32 %169, %3
  %320 = or i32 %142, %5
  %321 = or i32 %122, %4
  %322 = and i32 %131, %194
  %323 = xor i32 %237, 2147483647
  %324 = xor i32 %323, %135
  %325 = shl i32 %324, 1
  %326 = or i32 %12, %220
  %327 = and i32 %115, %194
  %328 = shl i32 %327, 1
  %329 = and i32 %127, %13
  %330 = shl i32 %329, 1
  %331 = or i32 %108, %5
  %332 = or i32 %113, %5
  %333 = or i32 %142, %158
  %334 = or i32 %116, %108
  %335 = xor i32 %136, 1073741823
  %336 = or i32 %335, %135
  %337 = shl i32 %336, 2
  %338 = or i32 %11, %4
  %339 = shl i32 %338, 2
  %340 = shl i32 %169, 1
  %341 = or i32 %11, %13
  %342 = or i32 %165, %182
  %343 = or i32 %131, %142
  %344 = or i32 %115, %142
  %345 = or i32 %131, %140
  %346 = or i32 %12, %258
  %347 = xor i32 %158, %3
  %348 = and i32 %139, %5
  %349 = xor i32 %120, %14
  %350 = or i32 %115, %113
  %351 = or i32 %115, %106
  %352 = and i32 %194, %104
  %353 = or i32 %121, %13
  %354 = xor i32 %139, %5
  %355 = or i32 %189, %13
  %356 = xor i32 %166, %183
  %357 = and i32 %153, %112
  %358 = or i32 %14, %4
  %359 = shl i32 %358, 1
  %360 = xor i32 %140, %5
  %361 = xor i32 %201, %308
  %362 = or i32 %120, %106
  %363 = xor i32 %120, %139
  %364 = xor i32 %194, %5
  %365 = and i32 %125, %108
  %366 = or i32 %120, %108
  %367 = or i32 %115, %108
  %368 = or i32 %105, %108
  %369 = and i32 %106, %118
  %370 = and i32 %106, %104
  %371 = or i32 %143, %13
  %372 = xor i32 %121, %4
  %373 = or i32 %142, %189
  %374 = and i32 %115, %112
  %375 = or i32 %198, %4
  %376 = or i32 %169, %108
  %377 = and i32 %143, %4
  %378 = and i32 %114, %5
  %379 = or i32 %187, %4
  %380 = shl i32 %379, 1
  %381 = and i32 %118, %3
  %382 = or i32 %116, %3
  %383 = and i32 %122, %13
  %384 = and i32 %189, %13
  %385 = shl i32 %384, 1
  %386 = and i32 %121, %13
  %387 = and i32 %189, %4
  %388 = and i32 %121, %4
  %389 = and i32 %187, %13
  %390 = mul i32 %389, -20
  %391 = mul i32 %165, -7
  %392 = and i32 %187, %4
  %393 = mul i32 %12, 14
  %394 = sub i32 %115, %305
  %395 = sub i32 %394, %372
  %396 = add i32 %395, %291
  %397 = mul i32 %396, 5
  %398 = sub i32 %3, %39
  %399 = sub i32 %398, %76
  %400 = sub i32 %399, %195
  %401 = mul i32 %400, 3
  %402 = or i32 %392, %386
  %403 = mul i32 %402, -15
  %404 = add i32 %388, %101
  %405 = mul i32 %404, -10
  %406 = add i32 %222, %98
  %407 = shl i32 %406, 2
  %408 = add i32 %37, -1
  %409 = add i32 %408, %13
  %410 = add i32 %409, %87
  %411 = add i32 %410, %86
  %412 = add i32 %411, %63
  %413 = add i32 %412, %54
  %414 = add i32 %413, %32
  %415 = add i32 %414, %142
  %416 = add i32 %415, %139
  %417 = add i32 %416, %143
  %418 = add i32 %417, %352
  %419 = add i32 %418, %320
  %420 = add i32 %419, %282
  %421 = add i32 %420, %215
  %422 = add i32 %421, %191
  %423 = add i32 %422, %109
  %424 = add i32 %423, %387
  %425 = add i32 %424, %383
  %426 = add i32 %425, %365
  %427 = add i32 %426, %350
  %428 = add i32 %427, %345
  %429 = add i32 %428, %334
  %430 = add i32 %429, %322
  %431 = add i32 %430, %274
  %432 = add i32 %431, %273
  %433 = add i32 %432, %232
  %434 = add i32 %433, %225
  %435 = add i32 %434, %193
  %436 = add i32 %435, %188
  %437 = add i32 %436, %290
  %438 = add i32 %437, %252
  %439 = add i32 %438, %260
  %440 = shl i32 %439, 1
  %441 = sub i32 %1, %0
  %442 = add i32 %441, %84
  %443 = sub i32 %442, %23
  %444 = sub i32 %443, %46
  %445 = add i32 %444, %9
  %446 = add i32 %445, %61
  %447 = sub i32 %446, %71
  %448 = add i32 %447, %94
  %449 = add i32 %448, %295
  %450 = sub i32 %449, %34
  %451 = add i32 %450, %42
  %452 = add i32 %451, %44
  %453 = sub i32 %452, %48
  %454 = sub i32 %453, %50
  %455 = add i32 %454, %52
  %456 = sub i32 %455, %53
  %457 = sub i32 %456, %56
  %458 = add i32 %457, %58
  %459 = sub i32 %458, %60
  %460 = add i32 %459, %62
  %461 = add i32 %460, %64
  %462 = add i32 %461, %67
  %463 = sub i32 %462, %70
  %464 = add i32 %463, %72
  %465 = sub i32 %464, %73
  %466 = sub i32 %465, %75
  %467 = add i32 %466, %79
  %468 = add i32 %467, %90
  %469 = add i32 %468, %91
  %470 = sub i32 %469, %92
  %471 = add i32 %470, %93
  %472 = add i32 %471, %97
  %473 = sub i32 %472, %4
  %474 = add i32 %473, %20
  %475 = sub i32 %474, %27
  %476 = sub i32 %475, %30
  %477 = sub i32 %476, %69
  %478 = sub i32 %477, %78
  %479 = sub i32 %478, %82
  %480 = sub i32 %479, %89
  %481 = add i32 %480, %96
  %482 = sub i32 %481, %100
  %483 = sub i32 %482, %103
  %484 = add i32 %483, %175
  %485 = add i32 %484, %106
  %486 = add i32 %485, %140
  %487 = add i32 %486, %226
  %488 = sub i32 %487, %194
  %489 = add i32 %488, %245
  %490 = add i32 %489, %113
  %491 = add i32 %490, %160
  %492 = sub i32 %491, %124
  %493 = sub i32 %492, %120
  %494 = sub i32 %493, %141
  %495 = add i32 %494, %145
  %496 = add i32 %495, %172
  %497 = sub i32 %496, %110
  %498 = sub i32 %497, %204
  %499 = sub i32 %498, %208
  %500 = add i32 %499, %214
  %501 = sub i32 %500, %121
  %502 = add i32 %501, %229
  %503 = sub i32 %502, %233
  %504 = add i32 %503, %158
  %505 = add i32 %504, %240
  %506 = sub i32 %505, %247
  %507 = sub i32 %506, %253
  %508 = sub i32 %507, %255
  %509 = sub i32 %508, %257
  %510 = add i32 %509, %263
  %511 = add i32 %510, %187
  %512 = sub i32 %511, %279
  %513 = sub i32 %512, %14
  %514 = add i32 %513, %297
  %515 = add i32 %514, %298
  %516 = sub i32 %515, %311
  %517 = add i32 %516, %313
  %518 = add i32 %517, %316
  %519 = add i32 %518, %189
  %520 = sub i32 %519, %331
  %521 = sub i32 %520, %332
  %522 = add i32 %521, %348
  %523 = add i32 %522, %153
  %524 = add i32 %523, %354
  %525 = add i32 %524, %360
  %526 = add i32 %525, %364
  %527 = add i32 %526, %122
  %528 = sub i32 %527, %131
  %529 = sub i32 %528, %370
  %530 = add i32 %529, %198
  %531 = sub i32 %530, %105
  %532 = add i32 %531, %378
  %533 = add i32 %532, %125
  %534 = add i32 %533, %107
  %535 = sub i32 %534, %111
  %536 = sub i32 %535, %117
  %537 = sub i32 %536, %119
  %538 = sub i32 %537, %123
  %539 = sub i32 %538, %126
  %540 = sub i32 %539, %128
  %541 = add i32 %540, %129
  %542 = add i32 %541, %130
  %543 = sub i32 %542, %132
  %544 = sub i32 %543, %133
  %545 = sub i32 %544, %138
  %546 = add i32 %545, %144
  %547 = add i32 %546, %150
  %548 = sub i32 %547, %154
  %549 = add i32 %548, %159
  %550 = add i32 %549, %161
  %551 = add i32 %550, %162
  %552 = add i32 %551, %163
  %553 = sub i32 %552, %164
  %554 = add i32 %553, %168
  %555 = sub i32 %554, %170
  %556 = add i32 %555, %171
  %557 = sub i32 %556, %176
  %558 = sub i32 %557, %177
  %559 = add i32 %558, %178
  %560 = add i32 %559, %136
  %561 = sub i32 %560, %190
  %562 = sub i32 %561, %192
  %563 = add i32 %562, %196
  %564 = sub i32 %563, %197
  %565 = sub i32 %564, %205
  %566 = add i32 %565, %206
  %567 = sub i32 %566, %207
  %568 = add i32 %567, %209
  %569 = add i32 %568, %210
  %570 = add i32 %569, %216
  %571 = sub i32 %570, %219
  %572 = add i32 %571, %223
  %573 = add i32 %572, %224
  %574 = add i32 %573, %227
  %575 = sub i32 %574, %228
  %576 = add i32 %575, %236
  %577 = sub i32 %576, %239
  %578 = add i32 %577, %241
  %579 = sub i32 %578, %243
  %580 = sub i32 %579, %244
  %581 = add i32 %580, %246
  %582 = sub i32 %581, %248
  %583 = sub i32 %582, %254
  %584 = sub i32 %583, %256
  %585 = sub i32 %584, %258
  %586 = sub i32 %585, %259
  %587 = sub i32 %586, %166
  %588 = sub i32 %587, %261
  %589 = add i32 %588, %262
  %590 = sub i32 %589, %264
  %591 = add i32 %590, %265
  %592 = add i32 %591, %266
  %593 = sub i32 %592, %267
  %594 = add i32 %593, %268
  %595 = add i32 %594, %269
  %596 = sub i32 %595, %270
  %597 = sub i32 %596, %271
  %598 = sub i32 %597, %272
  %599 = add i32 %598, %275
  %600 = sub i32 %599, %276
  %601 = add i32 %600, %277
  %602 = add i32 %601, %278
  %603 = sub i32 %602, %280
  %604 = add i32 %603, %281
  %605 = add i32 %604, %285
  %606 = add i32 %605, %286
  %607 = sub i32 %606, %287
  %608 = sub i32 %607, %288
  %609 = sub i32 %608, %289
  %610 = sub i32 %609, %292
  %611 = add i32 %610, %293
  %612 = add i32 %611, %294
  %613 = sub i32 %612, %296
  %614 = add i32 %613, %301
  %615 = sub i32 %614, %302
  %616 = add i32 %615, %303
  %617 = add i32 %616, %304
  %618 = add i32 %617, %306
  %619 = sub i32 %618, %307
  %620 = add i32 %619, %182
  %621 = add i32 %620, %310
  %622 = sub i32 %621, %312
  %623 = sub i32 %622, %314
  %624 = sub i32 %623, %315
  %625 = add i32 %624, %317
  %626 = add i32 %625, %318
  %627 = sub i32 %626, %319
  %628 = add i32 %627, %321
  %629 = sub i32 %628, %333
  %630 = sub i32 %629, %340
  %631 = add i32 %630, %341
  %632 = sub i32 %631, %343
  %633 = sub i32 %632, %344
  %634 = add i32 %633, %347
  %635 = sub i32 %634, %349
  %636 = add i32 %635, %15
  %637 = add i32 %636, %351
  %638 = sub i32 %637, %353
  %639 = add i32 %638, %148
  %640 = add i32 %639, %355
  %641 = add i32 %640, %357
  %642 = add i32 %641, %362
  %643 = sub i32 %642, %363
  %644 = add i32 %643, %366
  %645 = sub i32 %644, %367
  %646 = add i32 %645, %368
  %647 = add i32 %646, %369
  %648 = sub i32 %647, %371
  %649 = add i32 %648, %373
  %650 = sub i32 %649, %374
  %651 = sub i32 %650, %375
  %652 = add i32 %651, %376
  %653 = add i32 %652, %173
  %654 = add i32 %653, %377
  %655 = add i32 %654, %381
  %656 = add i32 %655, %382
  %657 = sub i32 %656, %137
  %658 = sub i32 %657, %147
  %659 = add i32 %658, %149
  %660 = sub i32 %659, %152
  %661 = sub i32 %660, %157
  %662 = sub i32 %661, %167
  %663 = sub i32 %662, %174
  %664 = add i32 %663, %181
  %665 = add i32 %664, %184
  %666 = sub i32 %665, %186
  %667 = sub i32 %666, %200
  %668 = sub i32 %667, %212
  %669 = sub i32 %668, %218
  %670 = sub i32 %669, %221
  %671 = sub i32 %670, %231
  %672 = sub i32 %671, %235
  %673 = add i32 %672, %238
  %674 = add i32 %673, %242
  %675 = sub i32 %674, %250
  %676 = add i32 %675, %284
  %677 = sub i32 %676, %300
  %678 = sub i32 %677, %309
  %679 = add i32 %678, %326
  %680 = sub i32 %679, %328
  %681 = sub i32 %680, %330
  %682 = sub i32 %681, %339
  %683 = add i32 %682, %342
  %684 = sub i32 %683, %346
  %685 = add i32 %684, %356
  %686 = sub i32 %685, %359
  %687 = sub i32 %686, %361
  %688 = sub i32 %687, %380
  %689 = sub i32 %688, %385
  %690 = add i32 %689, %390
  %691 = add i32 %690, %391
  %692 = add i32 %691, %393
  %693 = sub i32 %692, %203
  %694 = add i32 %693, %403
  %695 = add i32 %694, %405
  %696 = add i32 %695, %407
  %697 = sub i32 %696, %325
  %698 = sub i32 %697, %337
  %699 = add i32 %698, %397
  %700 = add i32 %699, %401
  %701 = add i32 %700, %440
  %702 = icmp eq i32 %17, %701
  %703 = select i1 %702, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %704 = tail call i32 @puts(i8* nonnull dereferenceable(1) %703)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
