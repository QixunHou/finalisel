digraph "DFG for'crackme' function" {
	Node0x1b10060[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1b100d0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1b10170[shape=record, label="  %7 = shl i32 %0, 1"];
	Node0x1b101e0[shape=record, label="  %8 = sub i32 %7, %6"];
	Node0x1b10250[shape=record, label="  %9 = or i32 %2, %1"];
	Node0x1b102c0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x1b10330[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x1b103a0[shape=record, label="  %12 = and i32 %5, %1"];
	Node0x1b10440[shape=record, label="  %13 = mul i32 %12, -7"];
	Node0x1b104e0[shape=record, label="  %14 = mul i32 %11, -9"];
	Node0x1b10550[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x1b105c0[shape=record, label="  %16 = or i32 %15, %3"];
	Node0x1b10630[shape=record, label="  %17 = shl i32 %3, 1"];
	Node0x1b106d0[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x1b10740[shape=record, label="  %19 = or i32 %3, %0"];
	Node0x1b107e0[shape=record, label="  %20 = shl i32 %19, 2"];
	Node0x1b10850[shape=record, label="  %21 = add i32 %19, 1"];
	Node0x1b108c0[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x1b10930[shape=record, label="  %23 = add i32 %16, %1"];
	Node0x1b109a0[shape=record, label="  %24 = add i32 %23, %22"];
	Node0x1b10a10[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1b10a80[shape=record, label="  %26 = sub i32 %6, %16"];
	Node0x1b10b20[shape=record, label="  %27 = mul i32 %26, 3"];
	Node0x1b10b90[shape=record, label="  %28 = add i32 %21, %9"];
	Node0x1b10c30[shape=record, label="  %29 = mul i32 %28, 5"];
	Node0x1b10ca0[shape=record, label="  %30 = sub i32 %1, %10"];
	Node0x1b10d10[shape=record, label="  %31 = add i32 %30, %11"];
	Node0x1b10d80[shape=record, label="  %32 = add i32 %31, %3"];
	Node0x1b11000[shape=record, label="  %33 = add i32 %32, %13"];
	Node0x1b11070[shape=record, label="  %34 = add i32 %33, %14"];
	Node0x1b110e0[shape=record, label="  %35 = add i32 %34, %18"];
	Node0x1b11150[shape=record, label="  %36 = sub i32 %35, %20"];
	Node0x1b111c0[shape=record, label="  %37 = add i32 %36, %27"];
	Node0x1b11230[shape=record, label="  %38 = add i32 %37, %29"];
	Node0x1b112a0[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x1b11310[shape=record, label="  %40 = icmp eq i32 %8, %39"];
	Node0x1ab0268[shape=record, label="  %41 = select i1 %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b117b0[shape=record, label="  %42 = tail call i32 @puts(i8* nonnull dereferenceable(1) %41)"];
	Node0x1b11800[shape=record, label="  ret void"];
	Node0x1b10060 -> Node0x1b100d0;
	Node0x1b100d0 -> Node0x1b10170;
	Node0x1b10170 -> Node0x1b101e0;
	Node0x1b101e0 -> Node0x1b10250;
	Node0x1b10250 -> Node0x1b102c0;
	Node0x1b102c0 -> Node0x1b10330;
	Node0x1b10330 -> Node0x1b103a0;
	Node0x1b103a0 -> Node0x1b10440;
	Node0x1b10440 -> Node0x1b104e0;
	Node0x1b104e0 -> Node0x1b10550;
	Node0x1b10550 -> Node0x1b105c0;
	Node0x1b105c0 -> Node0x1b10630;
	Node0x1b10630 -> Node0x1b106d0;
	Node0x1b106d0 -> Node0x1b10740;
	Node0x1b10740 -> Node0x1b107e0;
	Node0x1b107e0 -> Node0x1b10850;
	Node0x1b10850 -> Node0x1b108c0;
	Node0x1b108c0 -> Node0x1b10930;
	Node0x1b10930 -> Node0x1b109a0;
	Node0x1b109a0 -> Node0x1b10a10;
	Node0x1b10a10 -> Node0x1b10a80;
	Node0x1b10a80 -> Node0x1b10b20;
	Node0x1b10b20 -> Node0x1b10b90;
	Node0x1b10b90 -> Node0x1b10c30;
	Node0x1b10c30 -> Node0x1b10ca0;
	Node0x1b10ca0 -> Node0x1b10d10;
	Node0x1b10d10 -> Node0x1b10d80;
	Node0x1b10d80 -> Node0x1b11000;
	Node0x1b11000 -> Node0x1b11070;
	Node0x1b11070 -> Node0x1b110e0;
	Node0x1b110e0 -> Node0x1b11150;
	Node0x1b11150 -> Node0x1b111c0;
	Node0x1b111c0 -> Node0x1b11230;
	Node0x1b11230 -> Node0x1b112a0;
	Node0x1b112a0 -> Node0x1b11310;
	Node0x1b11310 -> Node0x1ab0268;
	Node0x1ab0268 -> Node0x1b117b0;
	Node0x1b117b0 -> Node0x1b11800;
edge [color=red]
	Node0x1b10060 -> Node0x1b100d0;
	Node0x1b10170 -> Node0x1b101e0;
	Node0x1b100d0 -> Node0x1b101e0;
	Node0x1b10060 -> Node0x1b103a0;
	Node0x1b103a0 -> Node0x1b10440;
	Node0x1b10330 -> Node0x1b104e0;
	Node0x1b10550 -> Node0x1b105c0;
	Node0x1b10630 -> Node0x1b106d0;
	Node0x1b10740 -> Node0x1b107e0;
	Node0x1b10740 -> Node0x1b10850;
	Node0x1b105c0 -> Node0x1b10930;
	Node0x1b10930 -> Node0x1b109a0;
	Node0x1b108c0 -> Node0x1b109a0;
	Node0x1b109a0 -> Node0x1b10a10;
	Node0x1b100d0 -> Node0x1b10a80;
	Node0x1b105c0 -> Node0x1b10a80;
	Node0x1b10a80 -> Node0x1b10b20;
	Node0x1b10850 -> Node0x1b10b90;
	Node0x1b10250 -> Node0x1b10b90;
	Node0x1b10b90 -> Node0x1b10c30;
	Node0x1b102c0 -> Node0x1b10ca0;
	Node0x1b10ca0 -> Node0x1b10d10;
	Node0x1b10330 -> Node0x1b10d10;
	Node0x1b10d10 -> Node0x1b10d80;
	Node0x1b10d80 -> Node0x1b11000;
	Node0x1b10440 -> Node0x1b11000;
	Node0x1b11000 -> Node0x1b11070;
	Node0x1b104e0 -> Node0x1b11070;
	Node0x1b11070 -> Node0x1b110e0;
	Node0x1b106d0 -> Node0x1b110e0;
	Node0x1b110e0 -> Node0x1b11150;
	Node0x1b107e0 -> Node0x1b11150;
	Node0x1b11150 -> Node0x1b111c0;
	Node0x1b10b20 -> Node0x1b111c0;
	Node0x1b111c0 -> Node0x1b11230;
	Node0x1b10c30 -> Node0x1b11230;
	Node0x1b11230 -> Node0x1b112a0;
	Node0x1b10a10 -> Node0x1b112a0;
	Node0x1b101e0 -> Node0x1b11310;
	Node0x1b112a0 -> Node0x1b11310;
	Node0x1b11310 -> Node0x1ab0268;
	Node0x1ab0268 -> Node0x1b117b0;
}
