digraph "DFG for'main' function" {
	Node0x1c05be8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1c05c68[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1c05cf8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1c05d58[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x1c05e08[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x1c06238[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1c06318[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x1c06418[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1c064d8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x1c06588[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1c06648[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x1c066f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1c00b40[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x1c068f8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1c07868[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1c07ed8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1c07f38[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x1c07fb0[shape=record, label="  %14 = xor i32 %12, -1"];
	Node0x1c08020[shape=record, label="  %15 = or i32 %11, %14"];
	Node0x1c08090[shape=record, label="  %16 = shl i32 %10, 2"];
	Node0x1c08100[shape=record, label="  %17 = add i32 %10, 1"];
	Node0x1c08170[shape=record, label="  %18 = sub i32 %17, %16"];
	Node0x1c081e0[shape=record, label="  %19 = sub i32 %18, %12"];
	Node0x1c08250[shape=record, label="  %20 = add i32 %19, %15"];
	Node0x1c082c0[shape=record, label="  %21 = xor i32 %12, %11"];
	Node0x1c08330[shape=record, label="  %22 = mul i32 %21, -2"];
	Node0x1c083a0[shape=record, label="  %23 = and i32 %12, %11"];
	Node0x1c08410[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x1c08480[shape=record, label="  %25 = or i32 %24, 1"];
	Node0x1c084f0[shape=record, label="  %26 = or i32 %12, %11"];
	Node0x1c08560[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x1c085d0[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x1c08640[shape=record, label="  %29 = shl i32 %15, 1"];
	Node0x1c086b0[shape=record, label="  %30 = xor i32 %29, -2"];
	Node0x1c08720[shape=record, label="  %31 = and i32 %11, %14"];
	Node0x1c08790[shape=record, label="  %32 = mul i32 %31, 3"];
	Node0x1c08800[shape=record, label="  %33 = xor i32 %13, -1"];
	Node0x1c08870[shape=record, label="  %34 = xor i32 %13, %10"];
	Node0x1c088e0[shape=record, label="  %35 = or i32 %10, %33"];
	Node0x1c08950[shape=record, label="  %36 = xor i32 %13, 1073741823"];
	Node0x1c089c0[shape=record, label="  %37 = and i32 %36, %10"];
	Node0x1c08a30[shape=record, label="  %38 = shl i32 %37, 2"];
	Node0x1c08aa0[shape=record, label="  %39 = and i32 %13, %10"];
	Node0x1c08b10[shape=record, label="  %40 = sub i32 1, %12"];
	Node0x1c08b80[shape=record, label="  %41 = add i32 %40, %21"];
	Node0x1c08bf0[shape=record, label="  %42 = sub i32 %41, %13"];
	Node0x1c08c60[shape=record, label="  %43 = add i32 %42, %33"];
	Node0x1c08cd0[shape=record, label="  %44 = add i32 %43, %22"];
	Node0x1c08d40[shape=record, label="  %45 = add i32 %44, %32"];
	Node0x1c08db0[shape=record, label="  %46 = add i32 %45, %34"];
	Node0x1c08e20[shape=record, label="  %47 = sub i32 %46, %35"];
	Node0x1c08e90[shape=record, label="  %48 = sub i32 %47, %39"];
	Node0x1c08f00[shape=record, label="  %49 = add i32 %48, %25"];
	Node0x1c08f70[shape=record, label="  %50 = add i32 %49, %28"];
	Node0x1c08fe0[shape=record, label="  %51 = add i32 %50, %30"];
	Node0x1c09050[shape=record, label="  %52 = sub i32 %51, %38"];
	Node0x1c090c0[shape=record, label="  %53 = icmp eq i32 %20, %52"];
	Node0x1ba58b8[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c09150[shape=record, label="  %55 = call i32 @puts(i8* nonnull dereferenceable(1) %54) #5"];
	Node0x1c093f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1c09558[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1c09668[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1c09778[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1c09838[shape=record, label="  ret i32 0"];
	Node0x1c05be8 -> Node0x1c05c68;
	Node0x1c05c68 -> Node0x1c05cf8;
	Node0x1c05cf8 -> Node0x1c05d58;
	Node0x1c05d58 -> Node0x1c05e08;
	Node0x1c05e08 -> Node0x1c06238;
	Node0x1c06238 -> Node0x1c06318;
	Node0x1c06318 -> Node0x1c06418;
	Node0x1c06418 -> Node0x1c064d8;
	Node0x1c064d8 -> Node0x1c06588;
	Node0x1c06588 -> Node0x1c06648;
	Node0x1c06648 -> Node0x1c066f8;
	Node0x1c066f8 -> Node0x1c00b40;
	Node0x1c00b40 -> Node0x1c068f8;
	Node0x1c068f8 -> Node0x1c07868;
	Node0x1c07868 -> Node0x1c07ed8;
	Node0x1c07ed8 -> Node0x1c07f38;
	Node0x1c07f38 -> Node0x1c07fb0;
	Node0x1c07fb0 -> Node0x1c08020;
	Node0x1c08020 -> Node0x1c08090;
	Node0x1c08090 -> Node0x1c08100;
	Node0x1c08100 -> Node0x1c08170;
	Node0x1c08170 -> Node0x1c081e0;
	Node0x1c081e0 -> Node0x1c08250;
	Node0x1c08250 -> Node0x1c082c0;
	Node0x1c082c0 -> Node0x1c08330;
	Node0x1c08330 -> Node0x1c083a0;
	Node0x1c083a0 -> Node0x1c08410;
	Node0x1c08410 -> Node0x1c08480;
	Node0x1c08480 -> Node0x1c084f0;
	Node0x1c084f0 -> Node0x1c08560;
	Node0x1c08560 -> Node0x1c085d0;
	Node0x1c085d0 -> Node0x1c08640;
	Node0x1c08640 -> Node0x1c086b0;
	Node0x1c086b0 -> Node0x1c08720;
	Node0x1c08720 -> Node0x1c08790;
	Node0x1c08790 -> Node0x1c08800;
	Node0x1c08800 -> Node0x1c08870;
	Node0x1c08870 -> Node0x1c088e0;
	Node0x1c088e0 -> Node0x1c08950;
	Node0x1c08950 -> Node0x1c089c0;
	Node0x1c089c0 -> Node0x1c08a30;
	Node0x1c08a30 -> Node0x1c08aa0;
	Node0x1c08aa0 -> Node0x1c08b10;
	Node0x1c08b10 -> Node0x1c08b80;
	Node0x1c08b80 -> Node0x1c08bf0;
	Node0x1c08bf0 -> Node0x1c08c60;
	Node0x1c08c60 -> Node0x1c08cd0;
	Node0x1c08cd0 -> Node0x1c08d40;
	Node0x1c08d40 -> Node0x1c08db0;
	Node0x1c08db0 -> Node0x1c08e20;
	Node0x1c08e20 -> Node0x1c08e90;
	Node0x1c08e90 -> Node0x1c08f00;
	Node0x1c08f00 -> Node0x1c08f70;
	Node0x1c08f70 -> Node0x1c08fe0;
	Node0x1c08fe0 -> Node0x1c09050;
	Node0x1c09050 -> Node0x1c090c0;
	Node0x1c090c0 -> Node0x1ba58b8;
	Node0x1ba58b8 -> Node0x1c09150;
	Node0x1c09150 -> Node0x1c093f8;
	Node0x1c093f8 -> Node0x1c09558;
	Node0x1c09558 -> Node0x1c09668;
	Node0x1c09668 -> Node0x1c09778;
	Node0x1c09778 -> Node0x1c09838;
edge [color=red]
	Node0x1c05be8 -> Node0x1c05e08;
	Node0x1c05e08 -> Node0x1c06238;
	Node0x1c05c68 -> Node0x1c06318;
	Node0x1c06318 -> Node0x1c06418;
	Node0x1c05cf8 -> Node0x1c064d8;
	Node0x1c064d8 -> Node0x1c06588;
	Node0x1c05d58 -> Node0x1c06648;
	Node0x1c06648 -> Node0x1c066f8;
	Node0x1c05be8 -> Node0x1c00b40;
	Node0x1c05c68 -> Node0x1c00b40;
	Node0x1c05cf8 -> Node0x1c00b40;
	Node0x1c05d58 -> Node0x1c00b40;
	Node0x1c05be8 -> Node0x1c068f8;
	Node0x1c05c68 -> Node0x1c07868;
	Node0x1c05cf8 -> Node0x1c07ed8;
	Node0x1c05d58 -> Node0x1c07f38;
	Node0x1c07ed8 -> Node0x1c07fb0;
	Node0x1c07868 -> Node0x1c08020;
	Node0x1c07fb0 -> Node0x1c08020;
	Node0x1c068f8 -> Node0x1c08090;
	Node0x1c068f8 -> Node0x1c08100;
	Node0x1c08100 -> Node0x1c08170;
	Node0x1c08090 -> Node0x1c08170;
	Node0x1c08170 -> Node0x1c081e0;
	Node0x1c07ed8 -> Node0x1c081e0;
	Node0x1c081e0 -> Node0x1c08250;
	Node0x1c08020 -> Node0x1c08250;
	Node0x1c07ed8 -> Node0x1c082c0;
	Node0x1c07868 -> Node0x1c082c0;
	Node0x1c082c0 -> Node0x1c08330;
	Node0x1c07ed8 -> Node0x1c083a0;
	Node0x1c07868 -> Node0x1c083a0;
	Node0x1c083a0 -> Node0x1c08410;
	Node0x1c08410 -> Node0x1c08480;
	Node0x1c07ed8 -> Node0x1c084f0;
	Node0x1c07868 -> Node0x1c084f0;
	Node0x1c084f0 -> Node0x1c08560;
	Node0x1c08560 -> Node0x1c085d0;
	Node0x1c08020 -> Node0x1c08640;
	Node0x1c08640 -> Node0x1c086b0;
	Node0x1c07868 -> Node0x1c08720;
	Node0x1c07fb0 -> Node0x1c08720;
	Node0x1c08720 -> Node0x1c08790;
	Node0x1c07f38 -> Node0x1c08800;
	Node0x1c07f38 -> Node0x1c08870;
	Node0x1c068f8 -> Node0x1c08870;
	Node0x1c068f8 -> Node0x1c088e0;
	Node0x1c08800 -> Node0x1c088e0;
	Node0x1c07f38 -> Node0x1c08950;
	Node0x1c08950 -> Node0x1c089c0;
	Node0x1c068f8 -> Node0x1c089c0;
	Node0x1c089c0 -> Node0x1c08a30;
	Node0x1c07f38 -> Node0x1c08aa0;
	Node0x1c068f8 -> Node0x1c08aa0;
	Node0x1c07ed8 -> Node0x1c08b10;
	Node0x1c08b10 -> Node0x1c08b80;
	Node0x1c082c0 -> Node0x1c08b80;
	Node0x1c08b80 -> Node0x1c08bf0;
	Node0x1c07f38 -> Node0x1c08bf0;
	Node0x1c08bf0 -> Node0x1c08c60;
	Node0x1c08800 -> Node0x1c08c60;
	Node0x1c08c60 -> Node0x1c08cd0;
	Node0x1c08330 -> Node0x1c08cd0;
	Node0x1c08cd0 -> Node0x1c08d40;
	Node0x1c08790 -> Node0x1c08d40;
	Node0x1c08d40 -> Node0x1c08db0;
	Node0x1c08870 -> Node0x1c08db0;
	Node0x1c08db0 -> Node0x1c08e20;
	Node0x1c088e0 -> Node0x1c08e20;
	Node0x1c08e20 -> Node0x1c08e90;
	Node0x1c08aa0 -> Node0x1c08e90;
	Node0x1c08e90 -> Node0x1c08f00;
	Node0x1c08480 -> Node0x1c08f00;
	Node0x1c08f00 -> Node0x1c08f70;
	Node0x1c085d0 -> Node0x1c08f70;
	Node0x1c08f70 -> Node0x1c08fe0;
	Node0x1c086b0 -> Node0x1c08fe0;
	Node0x1c08fe0 -> Node0x1c09050;
	Node0x1c08a30 -> Node0x1c09050;
	Node0x1c08250 -> Node0x1c090c0;
	Node0x1c09050 -> Node0x1c090c0;
	Node0x1c090c0 -> Node0x1ba58b8;
	Node0x1ba58b8 -> Node0x1c09150;
	Node0x1c06648 -> Node0x1c093f8;
	Node0x1c064d8 -> Node0x1c09558;
	Node0x1c06318 -> Node0x1c09668;
	Node0x1c05e08 -> Node0x1c09778;
}
