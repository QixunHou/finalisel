digraph "DFG for'crackme' function" {
	Node0x1c04120[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1c04190[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1c04230[shape=record, label="  %7 = shl i32 %0, 2"];
	Node0x1c042d0[shape=record, label="  %8 = add i32 %0, 1"];
	Node0x1c04340[shape=record, label="  %9 = sub i32 %8, %7"];
	Node0x1c043b0[shape=record, label="  %10 = sub i32 %9, %2"];
	Node0x1c04420[shape=record, label="  %11 = add i32 %10, %6"];
	Node0x1c04490[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0x1c04530[shape=record, label="  %13 = mul i32 %12, -2"];
	Node0x1c045a0[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1c04610[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x1c04680[shape=record, label="  %16 = or i32 %15, 1"];
	Node0x1c046f0[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x1c04760[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1c047d0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1c04840[shape=record, label="  %20 = shl i32 %6, 1"];
	Node0x1c048b0[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x1c04920[shape=record, label="  %22 = and i32 %5, %1"];
	Node0x1c049c0[shape=record, label="  %23 = mul i32 %22, 3"];
	Node0x1c04a30[shape=record, label="  %24 = xor i32 %3, -1"];
	Node0x1c04aa0[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x1c04b10[shape=record, label="  %26 = or i32 %24, %0"];
	Node0x1c04bb0[shape=record, label="  %27 = xor i32 %3, 1073741823"];
	Node0x1c04c20[shape=record, label="  %28 = and i32 %27, %0"];
	Node0x1c04c90[shape=record, label="  %29 = shl i32 %28, 2"];
	Node0x1c04d00[shape=record, label="  %30 = and i32 %3, %0"];
	Node0x1c04d70[shape=record, label="  %31 = sub i32 1, %2"];
	Node0x1c04de0[shape=record, label="  %32 = add i32 %31, %12"];
	Node0x1c05060[shape=record, label="  %33 = sub i32 %32, %3"];
	Node0x1c050d0[shape=record, label="  %34 = add i32 %33, %24"];
	Node0x1c05140[shape=record, label="  %35 = add i32 %34, %13"];
	Node0x1c051b0[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x1c05220[shape=record, label="  %37 = add i32 %36, %25"];
	Node0x1c05290[shape=record, label="  %38 = sub i32 %37, %26"];
	Node0x1c05300[shape=record, label="  %39 = sub i32 %38, %30"];
	Node0x1c05370[shape=record, label="  %40 = add i32 %39, %16"];
	Node0x1c053e0[shape=record, label="  %41 = add i32 %40, %19"];
	Node0x1c05450[shape=record, label="  %42 = add i32 %41, %21"];
	Node0x1c054c0[shape=record, label="  %43 = sub i32 %42, %29"];
	Node0x1c05530[shape=record, label="  %44 = icmp eq i32 %11, %43"];
	Node0x1ba4268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c059d0[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x1c05a20[shape=record, label="  ret void"];
	Node0x1c04120 -> Node0x1c04190;
	Node0x1c04190 -> Node0x1c04230;
	Node0x1c04230 -> Node0x1c042d0;
	Node0x1c042d0 -> Node0x1c04340;
	Node0x1c04340 -> Node0x1c043b0;
	Node0x1c043b0 -> Node0x1c04420;
	Node0x1c04420 -> Node0x1c04490;
	Node0x1c04490 -> Node0x1c04530;
	Node0x1c04530 -> Node0x1c045a0;
	Node0x1c045a0 -> Node0x1c04610;
	Node0x1c04610 -> Node0x1c04680;
	Node0x1c04680 -> Node0x1c046f0;
	Node0x1c046f0 -> Node0x1c04760;
	Node0x1c04760 -> Node0x1c047d0;
	Node0x1c047d0 -> Node0x1c04840;
	Node0x1c04840 -> Node0x1c048b0;
	Node0x1c048b0 -> Node0x1c04920;
	Node0x1c04920 -> Node0x1c049c0;
	Node0x1c049c0 -> Node0x1c04a30;
	Node0x1c04a30 -> Node0x1c04aa0;
	Node0x1c04aa0 -> Node0x1c04b10;
	Node0x1c04b10 -> Node0x1c04bb0;
	Node0x1c04bb0 -> Node0x1c04c20;
	Node0x1c04c20 -> Node0x1c04c90;
	Node0x1c04c90 -> Node0x1c04d00;
	Node0x1c04d00 -> Node0x1c04d70;
	Node0x1c04d70 -> Node0x1c04de0;
	Node0x1c04de0 -> Node0x1c05060;
	Node0x1c05060 -> Node0x1c050d0;
	Node0x1c050d0 -> Node0x1c05140;
	Node0x1c05140 -> Node0x1c051b0;
	Node0x1c051b0 -> Node0x1c05220;
	Node0x1c05220 -> Node0x1c05290;
	Node0x1c05290 -> Node0x1c05300;
	Node0x1c05300 -> Node0x1c05370;
	Node0x1c05370 -> Node0x1c053e0;
	Node0x1c053e0 -> Node0x1c05450;
	Node0x1c05450 -> Node0x1c054c0;
	Node0x1c054c0 -> Node0x1c05530;
	Node0x1c05530 -> Node0x1ba4268;
	Node0x1ba4268 -> Node0x1c059d0;
	Node0x1c059d0 -> Node0x1c05a20;
edge [color=red]
	Node0x1c04120 -> Node0x1c04190;
	Node0x1c042d0 -> Node0x1c04340;
	Node0x1c04230 -> Node0x1c04340;
	Node0x1c04340 -> Node0x1c043b0;
	Node0x1c043b0 -> Node0x1c04420;
	Node0x1c04190 -> Node0x1c04420;
	Node0x1c04490 -> Node0x1c04530;
	Node0x1c045a0 -> Node0x1c04610;
	Node0x1c04610 -> Node0x1c04680;
	Node0x1c046f0 -> Node0x1c04760;
	Node0x1c04760 -> Node0x1c047d0;
	Node0x1c04190 -> Node0x1c04840;
	Node0x1c04840 -> Node0x1c048b0;
	Node0x1c04120 -> Node0x1c04920;
	Node0x1c04920 -> Node0x1c049c0;
	Node0x1c04a30 -> Node0x1c04b10;
	Node0x1c04bb0 -> Node0x1c04c20;
	Node0x1c04c20 -> Node0x1c04c90;
	Node0x1c04d70 -> Node0x1c04de0;
	Node0x1c04490 -> Node0x1c04de0;
	Node0x1c04de0 -> Node0x1c05060;
	Node0x1c05060 -> Node0x1c050d0;
	Node0x1c04a30 -> Node0x1c050d0;
	Node0x1c050d0 -> Node0x1c05140;
	Node0x1c04530 -> Node0x1c05140;
	Node0x1c05140 -> Node0x1c051b0;
	Node0x1c049c0 -> Node0x1c051b0;
	Node0x1c051b0 -> Node0x1c05220;
	Node0x1c04aa0 -> Node0x1c05220;
	Node0x1c05220 -> Node0x1c05290;
	Node0x1c04b10 -> Node0x1c05290;
	Node0x1c05290 -> Node0x1c05300;
	Node0x1c04d00 -> Node0x1c05300;
	Node0x1c05300 -> Node0x1c05370;
	Node0x1c04680 -> Node0x1c05370;
	Node0x1c05370 -> Node0x1c053e0;
	Node0x1c047d0 -> Node0x1c053e0;
	Node0x1c053e0 -> Node0x1c05450;
	Node0x1c048b0 -> Node0x1c05450;
	Node0x1c05450 -> Node0x1c054c0;
	Node0x1c04c90 -> Node0x1c054c0;
	Node0x1c04420 -> Node0x1c05530;
	Node0x1c054c0 -> Node0x1c05530;
	Node0x1c05530 -> Node0x1ba4268;
	Node0x1ba4268 -> Node0x1c059d0;
}
