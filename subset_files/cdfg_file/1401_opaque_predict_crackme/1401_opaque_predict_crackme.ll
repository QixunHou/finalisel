; ModuleID = '../.././c_source_file/1401_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1401_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = and i32 %2, %1
  %7 = and i32 %6, %0
  %8 = xor i32 %0, -1
  %9 = or i32 %2, %1
  %10 = and i32 %9, %8
  %11 = xor i32 %7, -1
  %12 = xor i32 %10, %11
  %13 = or i32 %9, %0
  %14 = xor i32 %2, -1
  %15 = and i32 %14, %1
  %16 = xor i32 %15, -1
  %17 = and i32 %16, %8
  %18 = and i32 %4, %14
  %19 = or i32 %1, %0
  %20 = and i32 %19, %14
  %21 = and i32 %14, %0
  %22 = or i32 %14, %1
  %23 = xor i32 %22, -1
  %24 = or i32 %21, %23
  %25 = xor i32 %1, -1
  %26 = or i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %2
  %29 = and i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %2
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %26, %33
  %35 = xor i32 %2, %1
  %36 = xor i32 %35, -1
  %37 = and i32 %19, %36
  %38 = and i32 %4, %33
  %39 = and i32 %35, %8
  %40 = or i32 %7, %39
  %41 = shl i32 %40, 2
  %42 = xor i32 %15, %0
  %43 = shl i32 %42, 1
  %44 = add i32 %35, 1
  %45 = or i32 %29, %23
  %46 = or i32 %21, %25
  %47 = xor i32 %21, -1
  %48 = and i32 %47, %1
  %49 = or i32 %21, %1
  %50 = xor i32 %9, %0
  %51 = xor i32 %50, %11
  %52 = or i32 %14, %0
  %53 = xor i32 %52, -1
  %54 = xor i32 %53, %1
  %55 = or i32 %4, %33
  %56 = and i32 %36, %0
  %57 = shl i32 %56, 1
  %58 = and i32 %25, %2
  %59 = and i32 %58, %0
  %60 = or i32 %25, %2
  %61 = xor i32 %60, %0
  %62 = or i32 %59, %61
  %63 = and i32 %32, %4
  %64 = or i32 %2, %0
  %65 = and i32 %64, %1
  %66 = and i32 %2, %0
  %67 = xor i32 %6, %0
  %68 = xor i32 %66, %19
  %69 = or i32 %35, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %59, %70
  %72 = and i32 %58, %8
  %73 = and i32 %60, %0
  %74 = or i32 %72, %73
  %75 = and i32 %33, %25
  %76 = shl i32 %75, 1
  %77 = and i32 %4, %2
  %78 = or i32 %23, %8
  %79 = xor i32 %19, -1
  %80 = and i32 %35, %19
  %81 = xor i32 %79, %2
  %82 = shl i32 %81, 1
  %83 = or i32 %9, %8
  %84 = and i32 %22, %0
  %85 = or i32 %79, %2
  %86 = or i32 %21, %6
  %87 = or i32 %53, %25
  %88 = and i32 %25, %0
  %89 = or i32 %88, %14
  %90 = or i32 %6, %88
  %91 = or i32 %29, %14
  %92 = and i32 %60, %8
  %93 = xor i32 %92, 2147483647
  %94 = xor i32 %93, %59
  %95 = or i32 %32, %4
  %96 = xor i32 %9, -1
  %97 = xor i32 %96, %0
  %98 = or i32 %15, %0
  %99 = shl i32 %98, 1
  %100 = xor i32 %21, %22
  %101 = shl i32 %100, 1
  %102 = and i32 %22, %8
  %103 = xor i32 %64, -1
  %104 = or i32 %4, %103
  %105 = shl i32 %104, 1
  %106 = xor i32 %88, %16
  %107 = xor i32 %64, %1
  %108 = xor i32 %6, -1
  %109 = and i32 %5, %2
  %110 = xor i32 %9, %29
  %111 = or i32 %32, %1
  %112 = or i32 %33, %5
  %113 = and i32 %32, %30
  %114 = xor i32 %21, %108
  %115 = xor i32 %59, %69
  %116 = and i32 %19, %33
  %117 = xor i32 %36, %0
  %118 = and i32 %52, %25
  %119 = or i32 %5, %2
  %120 = shl i32 %88, 1
  %121 = and i32 %33, %30
  %122 = or i32 %21, %5
  %123 = shl i32 %122, 1
  %124 = or i32 %35, %29
  %125 = shl i32 %124, 1
  %126 = or i32 %29, %96
  %127 = xor i32 %61, -1
  %128 = xor i32 %59, %127
  %129 = or i32 %59, %92
  %130 = xor i32 %66, %1
  %131 = or i32 %88, %36
  %132 = xor i32 %52, %1
  %133 = xor i32 %66, -1
  %134 = add i32 %66, 1
  %135 = xor i32 %39, %11
  %136 = and i32 %52, %1
  %137 = shl i32 %136, 1
  %138 = or i32 %32, %88
  %139 = mul i32 %138, -5
  %140 = or i32 %16, %8
  %141 = shl i32 %140, 1
  %142 = or i32 %29, %36
  %143 = and i32 %47, %25
  %144 = and i32 %36, %30
  %145 = xor i32 %47, %1
  %146 = add i32 %22, 1
  %147 = and i32 %14, %5
  %148 = xor i32 %16, %0
  %149 = and i32 %52, %4
  %150 = xor i32 %22, %29
  %151 = and i32 %6, %8
  %152 = and i32 %9, %0
  %153 = xor i32 %152, -1
  %154 = xor i32 %151, %153
  %155 = or i32 %66, %27
  %156 = xor i32 %88, %2
  %157 = and i32 %26, %14
  %158 = shl i32 %157, 1
  %159 = and i32 %47, %5
  %160 = xor i32 %120, -2
  %161 = or i32 %33, %79
  %162 = or i32 %66, %4
  %163 = add i32 %9, 1
  %164 = and i32 %4, %133
  %165 = or i32 %66, %5
  %166 = and i32 %26, %36
  %167 = shl i32 %166, 1
  %168 = and i32 %35, %0
  %169 = xor i32 %35, %0
  %170 = xor i32 %169, %7
  %171 = shl i32 %170, 1
  %172 = and i32 %32, %5
  %173 = and i32 %64, %5
  %174 = shl i32 %173, 1
  %175 = xor i32 %27, %2
  %176 = or i32 %4, %53
  %177 = or i32 %96, %0
  %178 = xor i32 %88, %108
  %179 = and i32 %133, %25
  %180 = xor i32 %73, -1
  %181 = xor i32 %72, %180
  %182 = xor i32 %26, %2
  %183 = shl i32 %182, 1
  %184 = or i32 %103, %25
  %185 = shl i32 %184, 1
  %186 = xor i32 %19, %2
  %187 = xor i32 %66, %26
  %188 = or i32 %29, %103
  %189 = and i32 %14, %30
  %190 = shl i32 %189, 2
  %191 = and i32 %96, %8
  %192 = mul i32 %191, 19
  %193 = and i32 %15, %8
  %194 = shl i32 %193, 3
  %195 = and i32 %96, %0
  %196 = mul i32 %195, 23
  %197 = and i32 %15, %0
  %198 = and i32 %23, %8
  %199 = and i32 %23, %0
  %200 = mul i32 %199, 17
  %201 = mul i32 %7, 11
  %202 = add i32 %0, -1
  %203 = add i32 %202, %19
  %204 = add i32 %203, %64
  %205 = add i32 %204, %6
  %206 = add i32 %205, %165
  %207 = add i32 %206, %164
  %208 = add i32 %207, %50
  %209 = add i32 %208, %132
  %210 = add i32 %209, %87
  %211 = add i32 %210, %49
  %212 = add i32 %211, %94
  %213 = shl i32 %212, 1
  %214 = add i32 %197, %44
  %215 = add i32 %214, %198
  %216 = mul i32 %215, 3
  %217 = add i32 %1, %2
  %218 = add i32 %217, %19
  %219 = add i32 %218, 4
  %220 = sub i32 %219, %2
  %221 = add i32 %220, %4
  %222 = sub i32 %221, %18
  %223 = add i32 %222, %20
  %224 = sub i32 %223, %28
  %225 = sub i32 %224, %31
  %226 = sub i32 %225, %66
  %227 = sub i32 %226, %77
  %228 = sub i32 %227, %85
  %229 = sub i32 %228, %89
  %230 = sub i32 %229, %91
  %231 = add i32 %230, %108
  %232 = add i32 %231, %109
  %233 = add i32 %232, %119
  %234 = add i32 %233, %52
  %235 = sub i32 %234, %120
  %236 = add i32 %235, %134
  %237 = add i32 %236, %103
  %238 = add i32 %237, %146
  %239 = add i32 %238, %147
  %240 = add i32 %239, %156
  %241 = add i32 %240, %163
  %242 = sub i32 %241, %175
  %243 = sub i32 %242, %21
  %244 = sub i32 %243, %186
  %245 = add i32 %244, %13
  %246 = add i32 %245, %17
  %247 = add i32 %246, %24
  %248 = add i32 %247, %34
  %249 = add i32 %248, %37
  %250 = sub i32 %249, %38
  %251 = add i32 %250, %45
  %252 = add i32 %251, %46
  %253 = sub i32 %252, %48
  %254 = add i32 %253, %54
  %255 = sub i32 %254, %55
  %256 = sub i32 %255, %63
  %257 = add i32 %256, %65
  %258 = sub i32 %257, %67
  %259 = add i32 %258, %68
  %260 = add i32 %259, %78
  %261 = sub i32 %260, %80
  %262 = sub i32 %261, %82
  %263 = sub i32 %262, %83
  %264 = sub i32 %263, %84
  %265 = add i32 %264, %86
  %266 = sub i32 %265, %90
  %267 = add i32 %266, %95
  %268 = sub i32 %267, %97
  %269 = sub i32 %268, %102
  %270 = sub i32 %269, %69
  %271 = sub i32 %270, %106
  %272 = sub i32 %271, %107
  %273 = add i32 %272, %10
  %274 = sub i32 %273, %110
  %275 = sub i32 %274, %111
  %276 = sub i32 %275, %112
  %277 = add i32 %276, %113
  %278 = add i32 %277, %114
  %279 = sub i32 %278, %116
  %280 = sub i32 %279, %117
  %281 = sub i32 %280, %118
  %282 = sub i32 %281, %121
  %283 = sub i32 %282, %126
  %284 = add i32 %283, %130
  %285 = add i32 %284, %131
  %286 = sub i32 %285, %142
  %287 = add i32 %286, %143
  %288 = sub i32 %287, %144
  %289 = add i32 %288, %145
  %290 = sub i32 %289, %148
  %291 = sub i32 %290, %149
  %292 = add i32 %291, %150
  %293 = sub i32 %292, %155
  %294 = sub i32 %293, %158
  %295 = sub i32 %294, %159
  %296 = add i32 %295, %160
  %297 = add i32 %296, %161
  %298 = add i32 %297, %162
  %299 = add i32 %298, %168
  %300 = sub i32 %299, %172
  %301 = sub i32 %300, %176
  %302 = sub i32 %301, %39
  %303 = sub i32 %302, %177
  %304 = add i32 %303, %178
  %305 = add i32 %304, %179
  %306 = sub i32 %305, %183
  %307 = sub i32 %306, %187
  %308 = add i32 %307, %188
  %309 = sub i32 %308, %190
  %310 = add i32 %309, %151
  %311 = add i32 %310, %12
  %312 = sub i32 %311, %43
  %313 = add i32 %312, %51
  %314 = sub i32 %313, %57
  %315 = add i32 %314, %62
  %316 = add i32 %315, %71
  %317 = sub i32 %316, %74
  %318 = sub i32 %317, %76
  %319 = sub i32 %318, %99
  %320 = sub i32 %319, %101
  %321 = sub i32 %320, %105
  %322 = add i32 %321, %115
  %323 = sub i32 %322, %123
  %324 = sub i32 %323, %125
  %325 = add i32 %324, %128
  %326 = add i32 %325, %129
  %327 = sub i32 %326, %135
  %328 = sub i32 %327, %137
  %329 = add i32 %328, %139
  %330 = sub i32 %329, %141
  %331 = add i32 %330, %154
  %332 = sub i32 %331, %167
  %333 = sub i32 %332, %174
  %334 = add i32 %333, %181
  %335 = sub i32 %334, %185
  %336 = add i32 %335, %192
  %337 = add i32 %336, %194
  %338 = add i32 %337, %196
  %339 = add i32 %338, %200
  %340 = add i32 %339, %201
  %341 = add i32 %340, %41
  %342 = sub i32 %341, %171
  %343 = add i32 %342, %216
  %344 = add i32 %343, %213
  %345 = icmp eq i32 %344, %5
  %346 = select i1 %345, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %347 = tail call i32 @puts(i8* nonnull dereferenceable(1) %346)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
