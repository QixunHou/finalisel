; ModuleID = '../.././c_source_file/1242_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1242_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, %0
  %6 = or i32 %5, %4
  %7 = xor i32 %0, -1
  %8 = add i32 %6, -1
  %9 = and i32 %2, %0
  %10 = or i32 %2, %1
  %11 = xor i32 %9, %10
  %12 = and i32 %2, %1
  %13 = or i32 %12, %0
  %14 = xor i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = and i32 %5, %15
  %17 = and i32 %4, %0
  %18 = xor i32 %17, -1
  %19 = and i32 %5, %18
  %20 = xor i32 %2, -1
  %21 = and i32 %20, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %1, %0
  %24 = xor i32 %5, -1
  %25 = or i32 %23, %24
  %26 = and i32 %20, %1
  %27 = xor i32 %26, -1
  %28 = xor i32 %9, %27
  %29 = xor i32 %12, -1
  %30 = and i32 %29, %0
  %31 = or i32 %15, %2
  %32 = or i32 %20, %1
  %33 = xor i32 %32, %23
  %34 = xor i32 %2, %1
  %35 = xor i32 %34, -1
  %36 = xor i32 %35, %0
  %37 = or i32 %4, %0
  %38 = xor i32 %37, -1
  %39 = xor i32 %38, %2
  %40 = and i32 %35, %18
  %41 = xor i32 %23, -1
  %42 = and i32 %5, %41
  %43 = or i32 %9, %38
  %44 = and i32 %34, %18
  %45 = or i32 %34, %23
  %46 = or i32 %20, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %1
  %49 = xor i32 %9, -1
  %50 = xor i32 %49, %1
  %51 = and i32 %34, %37
  %52 = and i32 %22, %4
  %53 = xor i32 %32, -1
  %54 = xor i32 %53, %0
  %55 = or i32 %26, %0
  %56 = or i32 %5, %15
  %57 = or i32 %53, %7
  %58 = xor i32 %23, %2
  %59 = xor i32 %27, %0
  %60 = and i32 %14, %49
  %61 = and i32 %15, %2
  %62 = xor i32 %10, %0
  %63 = or i32 %1, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %35, %64
  %66 = or i32 %34, %64
  %67 = or i32 %17, %2
  %68 = or i32 %5, %1
  %69 = and i32 %4, %2
  %70 = and i32 %69, %0
  %71 = xor i32 %34, %0
  %72 = or i32 %70, %71
  %73 = or i32 %5, %14
  %74 = and i32 %22, %15
  %75 = shl i32 %74, 1
  %76 = or i32 %29, %0
  %77 = and i32 %14, %2
  %78 = and i32 %10, %7
  %79 = and i32 %14, %20
  %80 = and i32 %29, %7
  %81 = and i32 %46, %14
  %82 = xor i32 %32, %0
  %83 = and i32 %5, %14
  %84 = and i32 %24, %4
  %85 = and i32 %12, %0
  %86 = or i32 %85, %78
  %87 = and i32 %27, %7
  %88 = or i32 %21, %1
  %89 = or i32 %2, %0
  %90 = xor i32 %89, -1
  %91 = xor i32 %90, %1
  %92 = shl i32 %91, 1
  %93 = xor i32 %9, %63
  %94 = or i32 %29, %7
  %95 = xor i32 %46, %1
  %96 = and i32 %63, %35
  %97 = xor i32 %18, %2
  %98 = or i32 %5, %64
  %99 = and i32 %63, %24
  %100 = shl i32 %99, 1
  %101 = xor i32 %10, -1
  %102 = or i32 %101, %7
  %103 = and i32 %12, %7
  %104 = and i32 %34, %0
  %105 = or i32 %103, %104
  %106 = and i32 %89, %1
  %107 = xor i32 %103, -1
  %108 = xor i32 %104, %107
  %109 = and i32 %32, %0
  %110 = xor i32 %26, %0
  %111 = xor i32 %12, %0
  %112 = or i32 %34, %17
  %113 = and i32 %37, %2
  %114 = or i32 %24, %15
  %115 = or i32 %17, %20
  %116 = or i32 %34, %0
  %117 = xor i32 %70, %116
  %118 = and i32 %49, %1
  %119 = or i32 %53, %0
  %120 = or i32 %32, %7
  %121 = and i32 %35, %7
  %122 = or i32 %9, %26
  %123 = or i32 %23, %47
  %124 = or i32 %23, %101
  %125 = xor i32 %9, %1
  %126 = or i32 %35, %7
  %127 = or i32 %20, %38
  %128 = or i32 %20, %64
  %129 = or i32 %47, %4
  %130 = or i32 %4, %2
  %131 = xor i32 %130, %7
  %132 = xor i32 %131, %70
  %133 = xor i32 %71, -1
  %134 = or i32 %85, %133
  %135 = and i32 %24, %41
  %136 = or i32 %35, %0
  %137 = and i32 %69, %7
  %138 = or i32 %34, %7
  %139 = xor i32 %137, %138
  %140 = and i32 %130, %7
  %141 = xor i32 %140, 2147483647
  %142 = xor i32 %141, %70
  %143 = shl i32 %142, 1
  %144 = or i32 %5, %38
  %145 = shl i32 %144, 1
  %146 = or i32 %9, %14
  %147 = xor i32 %9, %37
  %148 = or i32 %17, %35
  %149 = shl i32 %37, 1
  %150 = or i32 %10, %0
  %151 = or i32 %90, %15
  %152 = and i32 %27, %0
  %153 = and i32 %5, %37
  %154 = shl i32 %153, 1
  %155 = or i32 %21, %12
  %156 = or i32 %9, %64
  %157 = and i32 %24, %18
  %158 = or i32 %14, %90
  %159 = and i32 %18, %2
  %160 = xor i32 %70, %133
  %161 = and i32 %22, %1
  %162 = and i32 %20, %41
  %163 = shl i32 %5, 1
  %164 = and i32 %14, %24
  %165 = xor i32 %10, %23
  %166 = shl i32 %0, 1
  %167 = xor i32 %89, %1
  %168 = add i32 %26, 1
  %169 = and i32 %10, %0
  %170 = xor i32 %169, %107
  %171 = and i32 %32, %7
  %172 = shl i32 %171, 1
  %173 = or i32 %26, %17
  %174 = xor i32 %22, %1
  %175 = or i32 %23, %90
  %176 = and i32 %34, %7
  %177 = or i32 %85, %176
  %178 = shl i32 %177, 1
  %179 = or i32 %23, %53
  %180 = or i32 %5, %17
  %181 = or i32 %21, %4
  %182 = and i32 %5, %1
  %183 = xor i32 %64, %2
  %184 = and i32 %34, %41
  %185 = or i32 %17, %24
  %186 = or i32 %5, %23
  %187 = shl i32 %71, 1
  %188 = xor i32 %46, %23
  %189 = or i32 %10, %7
  %190 = or i32 %23, %20
  %191 = xor i32 %101, %0
  %192 = shl i32 %9, 2
  %193 = and i32 %24, %15
  %194 = or i32 %23, %35
  %195 = or i32 %20, %15
  %196 = or i32 %9, %1
  %197 = and i32 %46, %4
  %198 = or i32 %23, %2
  %199 = or i32 %24, %38
  %200 = and i32 %46, %1
  %201 = xor i32 %21, %29
  %202 = or i32 %85, %62
  %203 = xor i32 %41, %2
  %204 = xor i32 %138, -1
  %205 = or i32 %137, %204
  %206 = or i32 %24, %64
  %207 = shl i32 %206, 1
  %208 = and i32 %49, %15
  %209 = or i32 %9, %4
  %210 = shl i32 %209, 1
  %211 = and i32 %89, %14
  %212 = xor i32 %176, -1
  %213 = xor i32 %85, %212
  %214 = or i32 %12, %17
  %215 = and i32 %20, %15
  %216 = shl i32 %215, 1
  %217 = and i32 %35, %0
  %218 = xor i32 %21, %32
  %219 = xor i32 %63, %2
  %220 = and i32 %41, %2
  %221 = and i32 %35, %41
  %222 = or i32 %24, %4
  %223 = or i32 %90, %1
  %224 = or i32 %34, %38
  %225 = or i32 %103, %169
  %226 = or i32 %32, %0
  %227 = or i32 %90, %4
  %228 = shl i32 %227, 1
  %229 = or i32 %101, %0
  %230 = and i32 %130, %0
  %231 = xor i32 %230, -1
  %232 = xor i32 %137, %231
  %233 = and i32 %5, %63
  %234 = shl i32 %233, 1
  %235 = xor i32 %85, %71
  %236 = xor i32 %29, %0
  %237 = or i32 %14, %47
  %238 = shl i32 %237, 1
  %239 = or i32 %70, %140
  %240 = and i32 %37, %20
  %241 = xor i32 %37, %2
  %242 = and i32 %14, %22
  %243 = shl i32 %242, 1
  %244 = or i32 %47, %15
  %245 = or i32 %137, %230
  %246 = or i32 %14, %2
  %247 = or i32 %9, %15
  %248 = or i32 %21, %15
  %249 = and i32 %34, %63
  %250 = or i32 %21, %53
  %251 = and i32 %101, %7
  %252 = mul i32 %251, -11
  %253 = and i32 %26, %7
  %254 = mul i32 %253, -18
  %255 = and i32 %101, %0
  %256 = shl i32 %255, 1
  %257 = and i32 %26, %0
  %258 = mul i32 %257, -13
  %259 = and i32 %53, %7
  %260 = shl i32 %259, 3
  %261 = mul i32 %103, -7
  %262 = and i32 %53, %0
  %263 = shl i32 %262, 4
  %264 = mul i32 %85, 9
  %265 = add i32 %23, %1
  %266 = add i32 %265, %34
  %267 = add i32 %266, %47
  %268 = add i32 %267, %128
  %269 = add i32 %268, %31
  %270 = add i32 %269, %249
  %271 = add i32 %270, %248
  %272 = add i32 %271, %176
  %273 = add i32 %272, %197
  %274 = add i32 %273, %173
  %275 = add i32 %274, %98
  %276 = add i32 %275, %83
  %277 = add i32 %276, %82
  %278 = add i32 %277, %76
  %279 = add i32 %278, %66
  %280 = add i32 %279, %60
  %281 = add i32 %280, %13
  %282 = add i32 %281, %139
  %283 = shl i32 %282, 1
  %284 = sub i32 %121, %184
  %285 = add i32 %284, %11
  %286 = sub i32 %285, %205
  %287 = mul i32 %286, 3
  %288 = mul i32 %237, 5
  %289 = add i32 %188, %135
  %290 = shl i32 %289, 2
  %291 = sub i32 -2, %0
  %292 = add i32 %291, %4
  %293 = sub i32 %292, %166
  %294 = add i32 %293, %41
  %295 = add i32 %294, %18
  %296 = add i32 %295, %38
  %297 = sub i32 %296, %17
  %298 = sub i32 %297, %2
  %299 = add i32 %298, %39
  %300 = add i32 %299, %58
  %301 = add i32 %300, %61
  %302 = sub i32 %301, %67
  %303 = add i32 %302, %77
  %304 = sub i32 %303, %79
  %305 = sub i32 %304, %97
  %306 = add i32 %305, %113
  %307 = sub i32 %306, %115
  %308 = add i32 %307, %24
  %309 = sub i32 %308, %127
  %310 = sub i32 %309, %32
  %311 = sub i32 %310, %149
  %312 = add i32 %311, %101
  %313 = sub i32 %312, %159
  %314 = add i32 %313, %162
  %315 = add i32 %314, %168
  %316 = add i32 %315, %46
  %317 = add i32 %316, %183
  %318 = sub i32 %317, %89
  %319 = sub i32 %318, %190
  %320 = sub i32 %319, %10
  %321 = add i32 %320, %53
  %322 = add i32 %321, %195
  %323 = sub i32 %322, %198
  %324 = add i32 %323, %35
  %325 = sub i32 %324, %203
  %326 = add i32 %325, %26
  %327 = add i32 %326, %219
  %328 = add i32 %327, %220
  %329 = add i32 %328, %12
  %330 = add i32 %329, %240
  %331 = add i32 %330, %241
  %332 = add i32 %331, %246
  %333 = add i32 %332, %16
  %334 = add i32 %333, %19
  %335 = sub i32 %334, %25
  %336 = sub i32 %335, %28
  %337 = sub i32 %336, %30
  %338 = sub i32 %337, %33
  %339 = sub i32 %338, %36
  %340 = sub i32 %339, %40
  %341 = add i32 %340, %42
  %342 = sub i32 %341, %43
  %343 = sub i32 %342, %44
  %344 = add i32 %343, %45
  %345 = add i32 %344, %48
  %346 = sub i32 %345, %50
  %347 = add i32 %346, %51
  %348 = add i32 %347, %52
  %349 = add i32 %348, %54
  %350 = sub i32 %349, %55
  %351 = sub i32 %350, %56
  %352 = sub i32 %351, %57
  %353 = add i32 %352, %59
  %354 = sub i32 %353, %62
  %355 = add i32 %354, %65
  %356 = sub i32 %355, %68
  %357 = sub i32 %356, %73
  %358 = add i32 %357, %78
  %359 = sub i32 %358, %80
  %360 = sub i32 %359, %81
  %361 = sub i32 %360, %84
  %362 = sub i32 %361, %87
  %363 = add i32 %362, %88
  %364 = sub i32 %363, %93
  %365 = sub i32 %364, %94
  %366 = sub i32 %365, %95
  %367 = sub i32 %366, %96
  %368 = add i32 %367, %102
  %369 = add i32 %368, %106
  %370 = add i32 %369, %109
  %371 = sub i32 %370, %110
  %372 = sub i32 %371, %111
  %373 = sub i32 %372, %112
  %374 = sub i32 %373, %114
  %375 = add i32 %374, %118
  %376 = add i32 %375, %119
  %377 = sub i32 %376, %120
  %378 = sub i32 %377, %122
  %379 = sub i32 %378, %123
  %380 = add i32 %379, %124
  %381 = sub i32 %380, %125
  %382 = add i32 %381, %126
  %383 = add i32 %382, %129
  %384 = sub i32 %383, %136
  %385 = add i32 %384, %146
  %386 = sub i32 %385, %147
  %387 = sub i32 %386, %148
  %388 = add i32 %387, %150
  %389 = add i32 %388, %151
  %390 = sub i32 %389, %152
  %391 = sub i32 %390, %155
  %392 = sub i32 %391, %156
  %393 = add i32 %392, %157
  %394 = add i32 %393, %158
  %395 = add i32 %394, %161
  %396 = sub i32 %395, %163
  %397 = add i32 %396, %164
  %398 = add i32 %397, %165
  %399 = add i32 %398, %167
  %400 = add i32 %399, %174
  %401 = add i32 %400, %175
  %402 = add i32 %401, %179
  %403 = sub i32 %402, %180
  %404 = add i32 %403, %181
  %405 = sub i32 %404, %182
  %406 = add i32 %405, %185
  %407 = add i32 %406, %186
  %408 = add i32 %407, %169
  %409 = add i32 %408, %189
  %410 = add i32 %409, %191
  %411 = sub i32 %410, %192
  %412 = add i32 %411, %193
  %413 = add i32 %412, %194
  %414 = add i32 %413, %196
  %415 = sub i32 %414, %199
  %416 = add i32 %415, %200
  %417 = add i32 %416, %201
  %418 = sub i32 %417, %208
  %419 = sub i32 %418, %138
  %420 = add i32 %419, %211
  %421 = add i32 %420, %214
  %422 = sub i32 %421, %216
  %423 = sub i32 %422, %217
  %424 = sub i32 %423, %218
  %425 = sub i32 %424, %221
  %426 = sub i32 %425, %222
  %427 = sub i32 %426, %223
  %428 = add i32 %427, %224
  %429 = add i32 %428, %226
  %430 = add i32 %429, %229
  %431 = sub i32 %430, %236
  %432 = sub i32 %431, %244
  %433 = add i32 %432, %247
  %434 = add i32 %433, %116
  %435 = add i32 %434, %250
  %436 = add i32 %435, %72
  %437 = sub i32 %436, %75
  %438 = sub i32 %437, %86
  %439 = sub i32 %438, %92
  %440 = sub i32 %439, %100
  %441 = sub i32 %440, %105
  %442 = sub i32 %441, %108
  %443 = sub i32 %442, %117
  %444 = add i32 %443, %132
  %445 = add i32 %444, %134
  %446 = sub i32 %445, %145
  %447 = sub i32 %446, %154
  %448 = sub i32 %447, %160
  %449 = add i32 %448, %170
  %450 = sub i32 %449, %172
  %451 = sub i32 %450, %187
  %452 = sub i32 %451, %202
  %453 = sub i32 %452, %207
  %454 = sub i32 %453, %210
  %455 = add i32 %454, %213
  %456 = sub i32 %455, %225
  %457 = sub i32 %456, %228
  %458 = sub i32 %457, %232
  %459 = sub i32 %458, %234
  %460 = add i32 %459, %235
  %461 = sub i32 %460, %238
  %462 = sub i32 %461, %239
  %463 = sub i32 %462, %243
  %464 = add i32 %463, %245
  %465 = add i32 %464, %252
  %466 = add i32 %465, %254
  %467 = sub i32 %466, %256
  %468 = add i32 %467, %258
  %469 = sub i32 %468, %260
  %470 = add i32 %469, %261
  %471 = sub i32 %470, %263
  %472 = add i32 %471, %264
  %473 = sub i32 %472, %178
  %474 = add i32 %473, %290
  %475 = sub i32 %474, %143
  %476 = add i32 %475, %288
  %477 = add i32 %476, %287
  %478 = add i32 %477, %283
  %479 = icmp eq i32 %8, %478
  %480 = select i1 %479, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %481 = tail call i32 @puts(i8* nonnull dereferenceable(1) %480)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
