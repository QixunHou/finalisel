digraph "DFG for'crackme' function" {
	Node0x20bab80[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x20babf0[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0x20bac60[shape=record, label="  %7 = sub i32 %6, %5"];
	Node0x20bb2e0[shape=record, label="  %8 = shl i32 %3, 1"];
	Node0x20bb380[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x20bb3f0[shape=record, label="  %10 = sub i32 %7, %9"];
	Node0x20bb490[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x20bb500[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x20bb570[shape=record, label="  %13 = xor i32 %1, -1"];
	Node0x20bb5e0[shape=record, label="  %14 = xor i32 %5, -1"];
	Node0x20bb650[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x20bb6c0[shape=record, label="  %16 = or i32 %11, %1"];
	Node0x20bb730[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x20bb7a0[shape=record, label="  %18 = shl i32 %15, 1"];
	Node0x20bb810[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x20bb880[shape=record, label="  %20 = xor i32 %16, -1"];
	Node0x20bb920[shape=record, label="  %21 = mul i32 %20, -5"];
	Node0x20bb990[shape=record, label="  %22 = and i32 %2, %1"];
	Node0x20bba30[shape=record, label="  %23 = shl i32 %22, 2"];
	Node0x20bbaa0[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x20bbb10[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x20bbb80[shape=record, label="  %26 = add i32 %25, %12"];
	Node0x20bbc20[shape=record, label="  %27 = mul i32 %26, -3"];
	Node0x20bbcc0[shape=record, label="  %28 = add i32 %3, 2147483647"];
	Node0x20bbd30[shape=record, label="  %29 = add i32 %28, %1"];
	Node0x20bbda0[shape=record, label="  %30 = add i32 %29, %2"];
	Node0x20bbe10[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x20bbe80[shape=record, label="  %32 = add i32 %0, 2"];
	Node0x20bc100[shape=record, label="  %33 = add i32 %32, %13"];
	Node0x20bc170[shape=record, label="  %34 = add i32 %33, %12"];
	Node0x20bc1e0[shape=record, label="  %35 = add i32 %34, %14"];
	Node0x20bc250[shape=record, label="  %36 = sub i32 %35, %15"];
	Node0x20bc2c0[shape=record, label="  %37 = add i32 %36, %3"];
	Node0x20bc330[shape=record, label="  %38 = sub i32 %37, %17"];
	Node0x20bc3a0[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x20bc410[shape=record, label="  %40 = sub i32 %39, %23"];
	Node0x20bc480[shape=record, label="  %41 = sub i32 %40, %6"];
	Node0x20bc4f0[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x20bc560[shape=record, label="  %43 = sub i32 %42, %19"];
	Node0x20bc5d0[shape=record, label="  %44 = add i32 %43, %27"];
	Node0x20bc640[shape=record, label="  %45 = add i32 %44, %31"];
	Node0x20bc6b0[shape=record, label="  %46 = icmp eq i32 %10, %45"];
	Node0x205b268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x20bcb50[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x20bcba0[shape=record, label="  ret void"];
	Node0x20bab80 -> Node0x20babf0;
	Node0x20babf0 -> Node0x20bac60;
	Node0x20bac60 -> Node0x20bb2e0;
	Node0x20bb2e0 -> Node0x20bb380;
	Node0x20bb380 -> Node0x20bb3f0;
	Node0x20bb3f0 -> Node0x20bb490;
	Node0x20bb490 -> Node0x20bb500;
	Node0x20bb500 -> Node0x20bb570;
	Node0x20bb570 -> Node0x20bb5e0;
	Node0x20bb5e0 -> Node0x20bb650;
	Node0x20bb650 -> Node0x20bb6c0;
	Node0x20bb6c0 -> Node0x20bb730;
	Node0x20bb730 -> Node0x20bb7a0;
	Node0x20bb7a0 -> Node0x20bb810;
	Node0x20bb810 -> Node0x20bb880;
	Node0x20bb880 -> Node0x20bb920;
	Node0x20bb920 -> Node0x20bb990;
	Node0x20bb990 -> Node0x20bba30;
	Node0x20bba30 -> Node0x20bbaa0;
	Node0x20bbaa0 -> Node0x20bbb10;
	Node0x20bbb10 -> Node0x20bbb80;
	Node0x20bbb80 -> Node0x20bbc20;
	Node0x20bbc20 -> Node0x20bbcc0;
	Node0x20bbcc0 -> Node0x20bbd30;
	Node0x20bbd30 -> Node0x20bbda0;
	Node0x20bbda0 -> Node0x20bbe10;
	Node0x20bbe10 -> Node0x20bbe80;
	Node0x20bbe80 -> Node0x20bc100;
	Node0x20bc100 -> Node0x20bc170;
	Node0x20bc170 -> Node0x20bc1e0;
	Node0x20bc1e0 -> Node0x20bc250;
	Node0x20bc250 -> Node0x20bc2c0;
	Node0x20bc2c0 -> Node0x20bc330;
	Node0x20bc330 -> Node0x20bc3a0;
	Node0x20bc3a0 -> Node0x20bc410;
	Node0x20bc410 -> Node0x20bc480;
	Node0x20bc480 -> Node0x20bc4f0;
	Node0x20bc4f0 -> Node0x20bc560;
	Node0x20bc560 -> Node0x20bc5d0;
	Node0x20bc5d0 -> Node0x20bc640;
	Node0x20bc640 -> Node0x20bc6b0;
	Node0x20bc6b0 -> Node0x205b268;
	Node0x205b268 -> Node0x20bcb50;
	Node0x20bcb50 -> Node0x20bcba0;
edge [color=red]
	Node0x20babf0 -> Node0x20bac60;
	Node0x20bab80 -> Node0x20bac60;
	Node0x20bb2e0 -> Node0x20bb380;
	Node0x20bac60 -> Node0x20bb3f0;
	Node0x20bb380 -> Node0x20bb3f0;
	Node0x20bb490 -> Node0x20bb500;
	Node0x20bab80 -> Node0x20bb5e0;
	Node0x20bb490 -> Node0x20bb6c0;
	Node0x20bb6c0 -> Node0x20bb730;
	Node0x20bb650 -> Node0x20bb7a0;
	Node0x20bb7a0 -> Node0x20bb810;
	Node0x20bb6c0 -> Node0x20bb880;
	Node0x20bb880 -> Node0x20bb920;
	Node0x20bb990 -> Node0x20bba30;
	Node0x20bbb10 -> Node0x20bbb80;
	Node0x20bb500 -> Node0x20bbb80;
	Node0x20bbb80 -> Node0x20bbc20;
	Node0x20bbcc0 -> Node0x20bbd30;
	Node0x20bbd30 -> Node0x20bbda0;
	Node0x20bbda0 -> Node0x20bbe10;
	Node0x20bbe80 -> Node0x20bc100;
	Node0x20bb570 -> Node0x20bc100;
	Node0x20bc100 -> Node0x20bc170;
	Node0x20bb500 -> Node0x20bc170;
	Node0x20bc170 -> Node0x20bc1e0;
	Node0x20bb5e0 -> Node0x20bc1e0;
	Node0x20bc1e0 -> Node0x20bc250;
	Node0x20bb650 -> Node0x20bc250;
	Node0x20bc250 -> Node0x20bc2c0;
	Node0x20bc2c0 -> Node0x20bc330;
	Node0x20bb730 -> Node0x20bc330;
	Node0x20bc330 -> Node0x20bc3a0;
	Node0x20bb920 -> Node0x20bc3a0;
	Node0x20bc3a0 -> Node0x20bc410;
	Node0x20bba30 -> Node0x20bc410;
	Node0x20bc410 -> Node0x20bc480;
	Node0x20babf0 -> Node0x20bc480;
	Node0x20bc480 -> Node0x20bc4f0;
	Node0x20bbaa0 -> Node0x20bc4f0;
	Node0x20bc4f0 -> Node0x20bc560;
	Node0x20bb810 -> Node0x20bc560;
	Node0x20bc560 -> Node0x20bc5d0;
	Node0x20bbc20 -> Node0x20bc5d0;
	Node0x20bc5d0 -> Node0x20bc640;
	Node0x20bbe10 -> Node0x20bc640;
	Node0x20bb3f0 -> Node0x20bc6b0;
	Node0x20bc640 -> Node0x20bc6b0;
	Node0x20bc6b0 -> Node0x205b268;
	Node0x205b268 -> Node0x20bcb50;
}
