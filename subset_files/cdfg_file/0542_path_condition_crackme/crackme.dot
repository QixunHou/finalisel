digraph "DFG for'crackme' function" {
	Node0x24a9270[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x24a9920[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x24a99e0[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x24a9a50[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x24a9ac0[shape=record, label="  %7 = add i32 %4, %6"];
	Node0x24a9b30[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x24a9ba0[shape=record, label="  %9 = and i32 %8, %0"];
	Node0x24a9c10[shape=record, label="  %10 = add i32 %7, %9"];
	Node0x24a9c80[shape=record, label="  %11 = icmp eq i32 %3, %10"];
	Node0x244a388[shape=record, label="  %12 = select i1 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24aa120[shape=record, label="  %13 = tail call i32 @puts(i8* nonnull dereferenceable(1) %12)"];
	Node0x24aa170[shape=record, label="  ret void"];
	Node0x24a9270 -> Node0x24a9920;
	Node0x24a9920 -> Node0x24a99e0;
	Node0x24a99e0 -> Node0x24a9a50;
	Node0x24a9a50 -> Node0x24a9ac0;
	Node0x24a9ac0 -> Node0x24a9b30;
	Node0x24a9b30 -> Node0x24a9ba0;
	Node0x24a9ba0 -> Node0x24a9c10;
	Node0x24a9c10 -> Node0x24a9c80;
	Node0x24a9c80 -> Node0x244a388;
	Node0x244a388 -> Node0x24aa120;
	Node0x24aa120 -> Node0x24aa170;
edge [color=red]
	Node0x24a9270 -> Node0x24a9920;
	Node0x24a99e0 -> Node0x24a9a50;
	Node0x24a9920 -> Node0x24a9ac0;
	Node0x24a9a50 -> Node0x24a9ac0;
	Node0x24a9b30 -> Node0x24a9ba0;
	Node0x24a9ac0 -> Node0x24a9c10;
	Node0x24a9ba0 -> Node0x24a9c10;
	Node0x24a9270 -> Node0x24a9c80;
	Node0x24a9c10 -> Node0x24a9c80;
	Node0x24a9c80 -> Node0x244a388;
	Node0x244a388 -> Node0x24aa120;
}
