digraph "DFG for'crackme' function" {
	Node0x111cab0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x111cb50[shape=record, label="  %4 = mul i32 %3, 3"];
	Node0x111cc10[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x111cc80[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x111ccf0[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x111cd60[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x111cdd0[shape=record, label="  %9 = shl i32 %7, 1"];
	Node0x111ce40[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x111ceb0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x111cf20[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x111cfc0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x111d060[shape=record, label="  %14 = mul i32 %10, -3"];
	Node0x111d0d0[shape=record, label="  %15 = sub i32 %1, %6"];
	Node0x111d140[shape=record, label="  %16 = add i32 %15, %8"];
	Node0x111d1b0[shape=record, label="  %17 = add i32 %16, %10"];
	Node0x111d220[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0x111d290[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x111d300[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x111d370[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x111d3e0[shape=record, label="  %22 = icmp eq i32 %4, %21"];
	Node0x10bd268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x111d880[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x111d8d0[shape=record, label="  ret void"];
	Node0x111cab0 -> Node0x111cb50;
	Node0x111cb50 -> Node0x111cc10;
	Node0x111cc10 -> Node0x111cc80;
	Node0x111cc80 -> Node0x111ccf0;
	Node0x111ccf0 -> Node0x111cd60;
	Node0x111cd60 -> Node0x111cdd0;
	Node0x111cdd0 -> Node0x111ce40;
	Node0x111ce40 -> Node0x111ceb0;
	Node0x111ceb0 -> Node0x111cf20;
	Node0x111cf20 -> Node0x111cfc0;
	Node0x111cfc0 -> Node0x111d060;
	Node0x111d060 -> Node0x111d0d0;
	Node0x111d0d0 -> Node0x111d140;
	Node0x111d140 -> Node0x111d1b0;
	Node0x111d1b0 -> Node0x111d220;
	Node0x111d220 -> Node0x111d290;
	Node0x111d290 -> Node0x111d300;
	Node0x111d300 -> Node0x111d370;
	Node0x111d370 -> Node0x111d3e0;
	Node0x111d3e0 -> Node0x10bd268;
	Node0x10bd268 -> Node0x111d880;
	Node0x111d880 -> Node0x111d8d0;
edge [color=red]
	Node0x111cab0 -> Node0x111cb50;
	Node0x111cc10 -> Node0x111cc80;
	Node0x111ccf0 -> Node0x111cd60;
	Node0x111ccf0 -> Node0x111cdd0;
	Node0x111ceb0 -> Node0x111cf20;
	Node0x111cf20 -> Node0x111cfc0;
	Node0x111ce40 -> Node0x111d060;
	Node0x111cc80 -> Node0x111d0d0;
	Node0x111d0d0 -> Node0x111d140;
	Node0x111cd60 -> Node0x111d140;
	Node0x111d140 -> Node0x111d1b0;
	Node0x111ce40 -> Node0x111d1b0;
	Node0x111d1b0 -> Node0x111d220;
	Node0x111cc80 -> Node0x111d220;
	Node0x111d220 -> Node0x111d290;
	Node0x111cdd0 -> Node0x111d290;
	Node0x111d290 -> Node0x111d300;
	Node0x111d060 -> Node0x111d300;
	Node0x111d300 -> Node0x111d370;
	Node0x111cfc0 -> Node0x111d370;
	Node0x111cb50 -> Node0x111d3e0;
	Node0x111d370 -> Node0x111d3e0;
	Node0x111d3e0 -> Node0x10bd268;
	Node0x10bd268 -> Node0x111d880;
}
