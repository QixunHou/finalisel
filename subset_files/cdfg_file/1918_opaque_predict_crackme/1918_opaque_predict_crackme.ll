; ModuleID = '../.././c_source_file/1918_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1918_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %2, %0
  %10 = and i32 %9, %8
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %0
  %13 = or i32 %11, %1
  %14 = xor i32 %13, -1
  %15 = or i32 %12, %14
  %16 = mul i32 %15, -5
  %17 = sub i32 %16, %10
  %18 = xor i32 %3, -1
  %19 = xor i32 %5, %4
  %20 = xor i32 %19, -1
  %21 = or i32 %20, %18
  %22 = sub i32 %17, %21
  %23 = or i32 %11, %0
  %24 = and i32 %23, %7
  %25 = and i32 %2, %1
  %26 = or i32 %25, %0
  %27 = xor i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %0
  %30 = or i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %28, %31
  %33 = and i32 %1, %0
  %34 = xor i32 %13, %33
  %35 = and i32 %7, %0
  %36 = or i32 %9, %35
  %37 = and i32 %2, %0
  %38 = or i32 %2, %1
  %39 = xor i32 %37, %38
  %40 = or i32 %33, %14
  %41 = shl i32 %40, 1
  %42 = xor i32 %0, -1
  %43 = and i32 %27, %42
  %44 = xor i32 %8, -1
  %45 = or i32 %11, %44
  %46 = and i32 %11, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %37, %47
  %49 = shl i32 %48, 1
  %50 = xor i32 %25, 2147483647
  %51 = xor i32 %50, %12
  %52 = xor i32 %1, %0
  %53 = or i32 %37, %52
  %54 = xor i32 %53, -1
  %55 = or i32 %35, %2
  %56 = or i32 %38, %42
  %57 = xor i32 %37, %1
  %58 = xor i32 %36, -1
  %59 = and i32 %25, %0
  %60 = xor i32 %27, %42
  %61 = or i32 %59, %60
  %62 = or i32 %47, %0
  %63 = xor i32 %38, -1
  %64 = or i32 %33, %63
  %65 = shl i32 %64, 1
  %66 = xor i32 %33, %11
  %67 = and i32 %7, %42
  %68 = and i32 %67, %2
  %69 = and i32 %28, %0
  %70 = or i32 %68, %69
  %71 = or i32 %12, %7
  %72 = xor i32 %25, %0
  %73 = and i32 %63, %42
  %74 = shl i32 %73, 1
  %75 = and i32 %63, %0
  %76 = and i32 %46, %0
  %77 = mul i32 %76, -14
  %78 = and i32 %14, %42
  %79 = shl i32 %78, 3
  %80 = and i32 %25, %42
  %81 = mul i32 %80, -6
  %82 = and i32 %14, %0
  %83 = mul i32 %82, -17
  %84 = xor i32 %4, %3
  %85 = xor i32 %84, -1
  %86 = and i32 %85, %5
  %87 = xor i32 %5, -1
  %88 = or i32 %87, %4
  %89 = and i32 %88, %3
  %90 = and i32 %87, %4
  %91 = and i32 %5, %3
  %92 = xor i32 %91, -1
  %93 = xor i32 %90, %92
  %94 = xor i32 %88, -1
  %95 = or i32 %84, %94
  %96 = and i32 %88, %85
  %97 = or i32 %87, %3
  %98 = and i32 %5, %4
  %99 = and i32 %4, %3
  %100 = or i32 %5, %3
  %101 = xor i32 %100, -1
  %102 = or i32 %99, %101
  %103 = xor i32 %4, -1
  %104 = xor i32 %97, -1
  %105 = or i32 %104, %103
  %106 = and i32 %19, %18
  %107 = and i32 %91, %4
  %108 = and i32 %100, %103
  %109 = xor i32 %107, -1
  %110 = xor i32 %108, %109
  %111 = or i32 %18, %4
  %112 = xor i32 %111, -1
  %113 = or i32 %19, %112
  %114 = or i32 %5, %4
  %115 = xor i32 %114, -1
  %116 = or i32 %99, %115
  %117 = shl i32 %116, 2
  %118 = and i32 %18, %4
  %119 = xor i32 %118, %5
  %120 = and i32 %114, %84
  %121 = and i32 %18, %5
  %122 = and i32 %121, %4
  %123 = or i32 %18, %5
  %124 = and i32 %123, %103
  %125 = xor i32 %122, -1
  %126 = xor i32 %124, %125
  %127 = or i32 %112, %5
  %128 = and i32 %19, %111
  %129 = and i32 %87, %3
  %130 = xor i32 %129, -1
  %131 = xor i32 %98, %130
  %132 = or i32 %99, %104
  %133 = and i32 %121, %103
  %134 = and i32 %123, %4
  %135 = or i32 %133, %134
  %136 = shl i32 %135, 2
  %137 = xor i32 %5, %3
  %138 = xor i32 %137, %4
  %139 = xor i32 %138, -1
  %140 = or i32 %107, %139
  %141 = and i32 %111, %87
  %142 = xor i32 %99, -1
  %143 = and i32 %19, %142
  %144 = or i32 %115, %3
  %145 = and i32 %137, %103
  %146 = or i32 %107, %145
  %147 = shl i32 %146, 1
  %148 = xor i32 %112, %5
  %149 = xor i32 %137, -1
  %150 = and i32 %149, %4
  %151 = or i32 %90, %91
  %152 = and i32 %87, %85
  %153 = or i32 %4, %3
  %154 = xor i32 %153, -1
  %155 = xor i32 %154, %5
  %156 = or i32 %97, %4
  %157 = and i32 %153, %87
  %158 = shl i32 %157, 1
  %159 = or i32 %20, %112
  %160 = xor i32 %129, %4
  %161 = or i32 %137, %103
  %162 = xor i32 %118, -1
  %163 = and i32 %162, %5
  %164 = or i32 %98, %101
  %165 = or i32 %149, %103
  %166 = shl i32 %165, 1
  %167 = or i32 %98, %85
  %168 = or i32 %129, %103
  %169 = xor i32 %90, -1
  %170 = add i32 %90, 1
  %171 = or i32 %19, %84
  %172 = xor i32 %98, %153
  %173 = or i32 %19, %118
  %174 = xor i32 %101, %4
  %175 = and i32 %84, %20
  %176 = and i32 %19, %3
  %177 = xor i32 %123, %4
  %178 = xor i32 %177, %125
  %179 = or i32 %94, %3
  %180 = or i32 %92, %4
  %181 = and i32 %137, %162
  %182 = and i32 %137, %4
  %183 = shl i32 %182, 1
  %184 = and i32 %137, %153
  %185 = or i32 %94, %85
  %186 = or i32 %98, %84
  %187 = and i32 %97, %103
  %188 = shl i32 %187, 1
  %189 = xor i32 %115, %3
  %190 = xor i32 %130, %4
  %191 = shl i32 %190, 1
  %192 = and i32 %91, %103
  %193 = and i32 %100, %4
  %194 = or i32 %192, %193
  %195 = shl i32 %194, 1
  %196 = or i32 %100, %4
  %197 = and i32 %92, %103
  %198 = or i32 %122, %138
  %199 = or i32 %192, %182
  %200 = or i32 %90, %85
  %201 = xor i32 %98, %100
  %202 = and i32 %130, %4
  %203 = and i32 %142, %5
  %204 = and i32 %149, %142
  %205 = xor i32 %193, -1
  %206 = xor i32 %192, %205
  %207 = or i32 %137, %4
  %208 = shl i32 %207, 1
  %209 = xor i32 %98, %111
  %210 = and i32 %92, %4
  %211 = and i32 %19, %85
  %212 = and i32 %84, %169
  %213 = xor i32 %100, %4
  %214 = xor i32 %213, %109
  %215 = and i32 %114, %18
  %216 = and i32 %20, %18
  %217 = or i32 %87, %85
  %218 = xor i32 %98, -1
  %219 = and i32 %218, %18
  %220 = and i32 %19, %153
  %221 = and i32 %153, %149
  %222 = or i32 %107, %213
  %223 = xor i32 %107, %138
  %224 = shl i32 %223, 2
  %225 = or i32 %154, %5
  %226 = add i32 %129, 1
  %227 = or i32 %118, %20
  %228 = xor i32 %153, %5
  %229 = or i32 %130, %103
  %230 = shl i32 %229, 1
  %231 = or i32 %85, %5
  %232 = xor i32 %100, %99
  %233 = or i32 %104, %4
  %234 = add i32 %118, 1
  %235 = or i32 %91, %103
  %236 = or i32 %101, %4
  %237 = add i32 %4, 1
  %238 = or i32 %98, %3
  %239 = and i32 %218, %85
  %240 = or i32 %149, %112
  %241 = xor i32 %149, %4
  %242 = and i32 %20, %142
  %243 = or i32 %98, %129
  %244 = or i32 %19, %18
  %245 = or i32 %98, %112
  %246 = xor i32 %114, %3
  %247 = or i32 %19, %154
  %248 = and i32 %84, %87
  %249 = and i32 %137, %111
  %250 = and i32 %153, %5
  %251 = or i32 %20, %85
  %252 = or i32 %129, %118
  %253 = xor i32 %90, %3
  %254 = xor i32 %98, %3
  %255 = and i32 %149, %162
  %256 = xor i32 %88, %3
  %257 = shl i32 %256, 1
  %258 = and i32 %20, %162
  %259 = or i32 %97, %103
  %260 = shl i32 %259, 2
  %261 = xor i32 %145, %109
  %262 = or i32 %92, %103
  %263 = add i32 %3, 1
  %264 = xor i32 %142, %5
  %265 = shl i32 %264, 1
  %266 = or i32 %20, %154
  %267 = shl i32 %266, 1
  %268 = and i32 %130, %103
  %269 = xor i32 %162, %5
  %270 = shl i32 %269, 2
  %271 = or i32 %99, %149
  %272 = or i32 %87, %154
  %273 = or i32 %87, %112
  %274 = and i32 %169, %3
  %275 = and i32 %114, %3
  %276 = or i32 %118, %149
  %277 = xor i32 %218, %3
  %278 = and i32 %153, %20
  %279 = add i32 %88, 1
  %280 = or i32 %90, %104
  %281 = and i32 %114, %85
  %282 = or i32 %137, %118
  %283 = or i32 %129, %4
  %284 = or i32 %149, %4
  %285 = and i32 %20, %85
  %286 = and i32 %88, %84
  %287 = or i32 %84, %87
  %288 = or i32 %90, %3
  %289 = or i32 %19, %85
  %290 = shl i32 %289, 1
  %291 = xor i32 %118, %130
  %292 = and i32 %169, %85
  %293 = or i32 %115, %18
  %294 = or i32 %91, %118
  %295 = or i32 %98, %154
  %296 = shl i32 %295, 1
  %297 = or i32 %115, %85
  %298 = shl i32 %297, 1
  %299 = or i32 %118, %87
  %300 = and i32 %149, %103
  %301 = and i32 %87, %142
  %302 = xor i32 %122, %207
  %303 = and i32 %111, %5
  %304 = or i32 %91, %4
  %305 = and i32 %111, %149
  %306 = or i32 %84, %5
  %307 = or i32 %107, %108
  %308 = and i32 %97, %4
  %309 = xor i32 %308, -1
  %310 = or i32 %84, %115
  %311 = shl i32 %310, 1
  %312 = and i32 %19, %84
  %313 = shl i32 %312, 1
  %314 = xor i32 %133, %161
  %315 = shl i32 %314, 1
  %316 = or i32 %90, %18
  %317 = or i32 %99, %87
  %318 = xor i32 %122, %139
  %319 = shl i32 %318, 1
  %320 = or i32 %122, %177
  %321 = shl i32 %320, 1
  %322 = or i32 %122, %124
  %323 = and i32 %84, %5
  %324 = and i32 %169, %18
  %325 = xor i32 %111, %5
  %326 = or i32 %101, %103
  %327 = or i32 %137, %112
  %328 = shl i32 %327, 1
  %329 = xor i32 %90, %97
  %330 = and i32 %88, %18
  %331 = xor i32 %99, %5
  %332 = shl i32 %331, 1
  %333 = xor i32 %114, %99
  %334 = and i32 %111, %20
  %335 = add i32 %99, 1
  %336 = and i32 %84, %218
  %337 = or i32 %137, %154
  %338 = xor i32 %118, %92
  %339 = xor i32 %97, %4
  %340 = add i32 %84, 1
  %341 = and i32 %87, %162
  %342 = or i32 %84, %20
  %343 = and i32 %218, %3
  %344 = or i32 %118, %5
  %345 = or i32 %20, %3
  %346 = xor i32 %161, -1
  %347 = or i32 %133, %346
  %348 = or i32 %99, %94
  %349 = or i32 %100, %103
  %350 = or i32 %130, %4
  %351 = shl i32 %350, 1
  %352 = xor i32 %134, 2147483647
  %353 = xor i32 %352, %133
  %354 = shl i32 %353, 1
  %355 = xor i32 %91, %4
  %356 = and i32 %101, %103
  %357 = mul i32 %356, 22
  %358 = and i32 %129, %103
  %359 = and i32 %101, %4
  %360 = mul i32 %359, 12
  %361 = and i32 %129, %4
  %362 = mul i32 %361, 27
  %363 = and i32 %104, %103
  %364 = mul i32 %363, 21
  %365 = mul i32 %192, 18
  %366 = and i32 %104, %4
  %367 = shl i32 %366, 3
  %368 = add i32 %72, %14
  %369 = add i32 %368, %36
  %370 = add i32 %369, %51
  %371 = add i32 %370, %225
  %372 = add i32 %371, %217
  %373 = add i32 %372, %203
  %374 = add i32 %373, %292
  %375 = add i32 %374, %355
  %376 = add i32 %375, %193
  %377 = add i32 %376, %271
  %378 = add i32 %377, %213
  %379 = add i32 %378, %249
  %380 = add i32 %379, %244
  %381 = add i32 %380, %239
  %382 = add i32 %381, %138
  %383 = add i32 %382, %186
  %384 = add i32 %383, %176
  %385 = add i32 %384, %167
  %386 = add i32 %385, %159
  %387 = add i32 %386, %132
  %388 = add i32 %387, %105
  %389 = add i32 %388, %102
  %390 = shl i32 %389, 1
  %391 = add i32 %111, %75
  %392 = sub i32 %218, %391
  %393 = add i32 %392, %149
  %394 = add i32 %393, %232
  %395 = sub i32 %394, %247
  %396 = sub i32 %395, %200
  %397 = add i32 %396, %175
  %398 = sub i32 %397, %172
  %399 = mul i32 %398, 5
  %400 = sub i32 %358, %107
  %401 = mul i32 %400, 9
  %402 = add i32 %250, %59
  %403 = shl i32 %402, 2
  %404 = add i32 %62, %88
  %405 = add i32 %404, %202
  %406 = sub i32 %405, %144
  %407 = add i32 %406, %347
  %408 = mul i32 %407, 3
  %409 = add i32 %38, %45
  %410 = sub i32 %409, %55
  %411 = sub i32 %410, %12
  %412 = sub i32 %411, %66
  %413 = add i32 %412, %263
  %414 = add i32 %413, %3
  %415 = add i32 %414, %26
  %416 = add i32 %415, %24
  %417 = add i32 %416, %29
  %418 = sub i32 %417, %32
  %419 = sub i32 %418, %34
  %420 = add i32 %419, %39
  %421 = sub i32 %420, %43
  %422 = add i32 %421, %54
  %423 = sub i32 %422, %56
  %424 = add i32 %423, %57
  %425 = add i32 %424, %58
  %426 = add i32 %425, %62
  %427 = add i32 %426, %71
  %428 = add i32 %427, %4
  %429 = add i32 %428, %237
  %430 = sub i32 %429, %41
  %431 = sub i32 %430, %49
  %432 = add i32 %431, %61
  %433 = sub i32 %432, %65
  %434 = sub i32 %433, %70
  %435 = sub i32 %434, %74
  %436 = add i32 %435, %77
  %437 = sub i32 %436, %79
  %438 = add i32 %437, %81
  %439 = add i32 %438, %83
  %440 = sub i32 %439, %99
  %441 = add i32 %440, %84
  %442 = add i32 %441, %87
  %443 = add i32 %442, %234
  %444 = add i32 %443, %112
  %445 = sub i32 %444, %5
  %446 = add i32 %445, %335
  %447 = add i32 %446, %118
  %448 = add i32 %447, %340
  %449 = add i32 %448, %86
  %450 = add i32 %449, %98
  %451 = add i32 %450, %119
  %452 = add i32 %451, %127
  %453 = add i32 %452, %141
  %454 = add i32 %453, %148
  %455 = add i32 %454, %152
  %456 = sub i32 %455, %155
  %457 = add i32 %456, %137
  %458 = sub i32 %457, %163
  %459 = add i32 %458, %170
  %460 = sub i32 %459, %19
  %461 = add i32 %460, %90
  %462 = add i32 %461, %226
  %463 = add i32 %462, %115
  %464 = sub i32 %463, %228
  %465 = add i32 %464, %231
  %466 = add i32 %465, %248
  %467 = sub i32 %466, %114
  %468 = add i32 %467, %20
  %469 = sub i32 %468, %272
  %470 = sub i32 %469, %273
  %471 = add i32 %470, %279
  %472 = add i32 %471, %287
  %473 = add i32 %472, %299
  %474 = add i32 %473, %301
  %475 = sub i32 %474, %303
  %476 = add i32 %475, %306
  %477 = add i32 %476, %101
  %478 = sub i32 %477, %100
  %479 = add i32 %478, %317
  %480 = sub i32 %479, %323
  %481 = sub i32 %480, %325
  %482 = sub i32 %481, %341
  %483 = add i32 %482, %344
  %484 = sub i32 %483, %129
  %485 = add i32 %484, %89
  %486 = add i32 %485, %93
  %487 = sub i32 %486, %95
  %488 = add i32 %487, %96
  %489 = sub i32 %488, %106
  %490 = sub i32 %489, %113
  %491 = sub i32 %490, %120
  %492 = sub i32 %491, %128
  %493 = sub i32 %492, %131
  %494 = sub i32 %493, %143
  %495 = sub i32 %494, %150
  %496 = add i32 %495, %151
  %497 = add i32 %496, %156
  %498 = sub i32 %497, %158
  %499 = add i32 %498, %160
  %500 = sub i32 %499, %161
  %501 = add i32 %500, %164
  %502 = sub i32 %501, %168
  %503 = sub i32 %502, %171
  %504 = sub i32 %503, %173
  %505 = sub i32 %504, %174
  %506 = sub i32 %505, %179
  %507 = add i32 %506, %180
  %508 = add i32 %507, %181
  %509 = sub i32 %508, %184
  %510 = add i32 %509, %185
  %511 = add i32 %510, %189
  %512 = sub i32 %511, %196
  %513 = sub i32 %512, %197
  %514 = add i32 %513, %201
  %515 = add i32 %514, %204
  %516 = add i32 %515, %209
  %517 = sub i32 %516, %210
  %518 = add i32 %517, %211
  %519 = add i32 %518, %212
  %520 = add i32 %519, %215
  %521 = sub i32 %520, %216
  %522 = add i32 %521, %219
  %523 = sub i32 %522, %220
  %524 = add i32 %523, %221
  %525 = sub i32 %524, %145
  %526 = sub i32 %525, %227
  %527 = add i32 %526, %233
  %528 = sub i32 %527, %235
  %529 = add i32 %528, %236
  %530 = add i32 %529, %238
  %531 = add i32 %530, %240
  %532 = add i32 %531, %241
  %533 = sub i32 %532, %242
  %534 = add i32 %533, %243
  %535 = sub i32 %534, %245
  %536 = sub i32 %535, %246
  %537 = add i32 %536, %251
  %538 = add i32 %537, %252
  %539 = sub i32 %538, %253
  %540 = sub i32 %539, %254
  %541 = add i32 %540, %255
  %542 = add i32 %541, %258
  %543 = add i32 %542, %262
  %544 = sub i32 %543, %265
  %545 = add i32 %544, %268
  %546 = sub i32 %545, %270
  %547 = add i32 %546, %274
  %548 = sub i32 %547, %275
  %549 = sub i32 %548, %276
  %550 = add i32 %549, %277
  %551 = add i32 %550, %278
  %552 = sub i32 %551, %280
  %553 = sub i32 %552, %281
  %554 = add i32 %553, %282
  %555 = add i32 %554, %283
  %556 = add i32 %555, %284
  %557 = sub i32 %556, %285
  %558 = sub i32 %557, %286
  %559 = add i32 %558, %288
  %560 = sub i32 %559, %291
  %561 = add i32 %560, %293
  %562 = sub i32 %561, %294
  %563 = sub i32 %562, %300
  %564 = sub i32 %563, %304
  %565 = sub i32 %564, %305
  %566 = add i32 %565, %309
  %567 = sub i32 %566, %316
  %568 = sub i32 %567, %324
  %569 = sub i32 %568, %326
  %570 = sub i32 %569, %329
  %571 = add i32 %570, %330
  %572 = sub i32 %571, %332
  %573 = sub i32 %572, %333
  %574 = add i32 %573, %334
  %575 = sub i32 %574, %336
  %576 = sub i32 %575, %337
  %577 = add i32 %576, %338
  %578 = sub i32 %577, %339
  %579 = sub i32 %578, %342
  %580 = sub i32 %579, %343
  %581 = add i32 %580, %345
  %582 = add i32 %581, %348
  %583 = add i32 %582, %108
  %584 = add i32 %583, %349
  %585 = sub i32 %584, %110
  %586 = sub i32 %585, %117
  %587 = add i32 %586, %126
  %588 = sub i32 %587, %140
  %589 = sub i32 %588, %166
  %590 = sub i32 %589, %178
  %591 = sub i32 %590, %183
  %592 = sub i32 %591, %188
  %593 = sub i32 %592, %191
  %594 = add i32 %593, %198
  %595 = sub i32 %594, %199
  %596 = sub i32 %595, %206
  %597 = sub i32 %596, %208
  %598 = sub i32 %597, %214
  %599 = add i32 %598, %222
  %600 = sub i32 %599, %230
  %601 = sub i32 %600, %257
  %602 = sub i32 %601, %260
  %603 = add i32 %602, %261
  %604 = sub i32 %603, %267
  %605 = sub i32 %604, %290
  %606 = sub i32 %605, %296
  %607 = sub i32 %606, %298
  %608 = sub i32 %607, %302
  %609 = add i32 %608, %307
  %610 = sub i32 %609, %311
  %611 = sub i32 %610, %313
  %612 = add i32 %611, %322
  %613 = sub i32 %612, %328
  %614 = sub i32 %613, %351
  %615 = add i32 %614, %357
  %616 = add i32 %615, %360
  %617 = add i32 %616, %362
  %618 = add i32 %617, %364
  %619 = add i32 %618, %365
  %620 = sub i32 %619, %367
  %621 = add i32 %620, %403
  %622 = sub i32 %621, %136
  %623 = sub i32 %622, %147
  %624 = sub i32 %623, %195
  %625 = sub i32 %624, %224
  %626 = sub i32 %625, %315
  %627 = sub i32 %626, %319
  %628 = sub i32 %627, %321
  %629 = add i32 %628, %401
  %630 = sub i32 %629, %354
  %631 = add i32 %630, %408
  %632 = add i32 %631, %399
  %633 = add i32 %632, %390
  %634 = icmp eq i32 %22, %633
  %635 = select i1 %634, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %636 = tail call i32 @puts(i8* nonnull dereferenceable(1) %635)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
