; ModuleID = '../.././c_source_file/0658_path_condition_crackme.c'
source_filename = "../.././c_source_file/0658_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %1
  %10 = or i32 %9, %7
  %11 = add i32 %10, 1
  %12 = xor i32 %4, %3
  %13 = and i32 %4, %3
  %14 = or i32 %6, %3
  %15 = xor i32 %3, -1
  %16 = or i32 %4, %3
  %17 = add i32 %16, 1
  %18 = xor i32 %14, -1
  %19 = and i32 %6, %3
  %20 = or i32 %2, %1
  %21 = xor i32 %20, %0
  %22 = xor i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = and i32 %8, %23
  %25 = and i32 %2, %1
  %26 = and i32 %25, %7
  %27 = xor i32 %2, %1
  %28 = and i32 %27, %0
  %29 = xor i32 %26, -1
  %30 = xor i32 %28, %29
  %31 = or i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %8, %32
  %34 = or i32 %25, %7
  %35 = and i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = add i32 %35, 1
  %38 = xor i32 %1, -1
  %39 = and i32 %38, %2
  %40 = and i32 %39, %0
  %41 = or i32 %27, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %40, %42
  %44 = xor i32 %25, -1
  %45 = and i32 %1, %0
  %46 = or i32 %45, %8
  %47 = or i32 %38, %2
  %48 = and i32 %47, %7
  %49 = xor i32 %48, 2147483647
  %50 = xor i32 %49, %40
  %51 = shl i32 %50, 1
  %52 = or i32 %35, %1
  %53 = or i32 %8, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %22, %54
  %56 = and i32 %8, %0
  %57 = xor i32 %9, -1
  %58 = or i32 %56, %57
  %59 = or i32 %23, %2
  %60 = xor i32 %20, -1
  %61 = xor i32 %60, %0
  %62 = and i32 %38, %0
  %63 = or i32 %27, %62
  %64 = shl i32 %63, 1
  %65 = and i32 %25, %0
  %66 = and i32 %27, %7
  %67 = xor i32 %65, 2147483647
  %68 = xor i32 %67, %66
  %69 = shl i32 %68, 1
  %70 = or i32 %27, %32
  %71 = and i32 %36, %1
  %72 = shl i32 %71, 1
  %73 = or i32 %35, %23
  %74 = or i32 %26, %28
  %75 = or i32 %35, %60
  %76 = and i32 %31, %8
  %77 = and i32 %8, %1
  %78 = xor i32 %77, -1
  %79 = xor i32 %62, %78
  %80 = xor i32 %36, %1
  %81 = xor i32 %45, -1
  %82 = xor i32 %2, %0
  %83 = and i32 %82, %81
  %84 = shl i32 %83, 1
  %85 = or i32 %45, %2
  %86 = or i32 %27, %7
  %87 = xor i32 %82, -1
  %88 = and i32 %22, %87
  %89 = and i32 %53, %22
  %90 = or i32 %38, %0
  %91 = xor i32 %27, -1
  %92 = and i32 %90, %91
  %93 = and i32 %31, %2
  %94 = and i32 %53, %38
  %95 = or i32 %35, %22
  %96 = or i32 %44, %7
  %97 = xor i32 %47, %7
  %98 = xor i32 %97, %40
  %99 = xor i32 %62, -1
  %100 = and i32 %91, %99
  %101 = or i32 %54, %23
  %102 = or i32 %54, %1
  %103 = shl i32 %102, 1
  %104 = and i32 %82, %99
  %105 = xor i32 %27, %0
  %106 = xor i32 %105, -1
  %107 = or i32 %65, %106
  %108 = and i32 %27, %99
  %109 = xor i32 %56, -1
  %110 = and i32 %109, %23
  %111 = xor i32 %35, %20
  %112 = and i32 %109, %1
  %113 = xor i32 %90, -1
  %114 = or i32 %91, %113
  %115 = and i32 %9, %7
  %116 = and i32 %82, %1
  %117 = and i32 %36, %23
  %118 = or i32 %2, %0
  %119 = and i32 %90, %87
  %120 = or i32 %56, %25
  %121 = and i32 %53, %23
  %122 = shl i32 %121, 2
  %123 = xor i32 %25, %0
  %124 = and i32 %20, %7
  %125 = or i32 %65, %124
  %126 = and i32 %20, %0
  %127 = or i32 %56, %1
  %128 = and i32 %39, %7
  %129 = xor i32 %128, %86
  %130 = xor i32 %90, %2
  %131 = and i32 %87, %23
  %132 = xor i32 %62, %2
  %133 = or i32 %22, %87
  %134 = shl i32 %133, 1
  %135 = and i32 %91, %81
  %136 = or i32 %62, %87
  %137 = or i32 %9, %0
  %138 = shl i32 %137, 1
  %139 = or i32 %35, %113
  %140 = or i32 %22, %8
  %141 = shl i32 %140, 1
  %142 = or i32 %82, %22
  %143 = xor i32 %53, %45
  %144 = and i32 %23, %2
  %145 = or i32 %60, %7
  %146 = shl i32 %145, 1
  %147 = and i32 %22, %36
  %148 = xor i32 %56, %9
  %149 = xor i32 %67, %21
  %150 = and i32 %82, %90
  %151 = and i32 %82, %31
  %152 = xor i32 %40, %41
  %153 = or i32 %87, %32
  %154 = shl i32 %153, 1
  %155 = or i32 %82, %62
  %156 = xor i32 %118, %1
  %157 = xor i32 %81, %2
  %158 = and i32 %47, %0
  %159 = or i32 %128, %158
  %160 = or i32 %82, %32
  %161 = or i32 %87, %113
  %162 = or i32 %40, %48
  %163 = shl i32 %162, 1
  %164 = xor i32 %9, %0
  %165 = or i32 %78, %7
  %166 = shl i32 %165, 1
  %167 = or i32 %35, %77
  %168 = xor i32 %109, %1
  %169 = shl i32 %168, 1
  %170 = xor i32 %53, %1
  %171 = shl i32 %170, 1
  %172 = xor i32 %20, %45
  %173 = xor i32 %35, %1
  %174 = or i32 %62, %8
  %175 = or i32 %27, %113
  %176 = and i32 %90, %8
  %177 = and i32 %82, %38
  %178 = xor i32 %40, %106
  %179 = and i32 %109, %38
  %180 = or i32 %87, %1
  %181 = or i32 %45, %54
  %182 = xor i32 %118, -1
  %183 = or i32 %182, %1
  %184 = or i32 %87, %38
  %185 = or i32 %77, %0
  %186 = or i32 %182, %38
  %187 = xor i32 %118, %45
  %188 = xor i32 %56, %1
  %189 = xor i32 %57, %0
  %190 = or i32 %20, %7
  %191 = and i32 %31, %87
  %192 = or i32 %26, %126
  %193 = xor i32 %35, %31
  %194 = and i32 %27, %31
  %195 = or i32 %82, %45
  %196 = or i32 %78, %0
  %197 = and i32 %78, %7
  %198 = and i32 %8, %81
  %199 = or i32 %77, %7
  %200 = or i32 %25, %0
  %201 = shl i32 %200, 1
  %202 = or i32 %65, %21
  %203 = xor i32 %86, -1
  %204 = or i32 %128, %203
  %205 = and i32 %82, %23
  %206 = and i32 %31, %91
  %207 = or i32 %91, %0
  %208 = or i32 %45, %60
  %209 = shl i32 %99, 1
  %210 = add i32 %9, 1
  %211 = xor i32 %56, %44
  %212 = and i32 %91, %0
  %213 = shl i32 %212, 1
  %214 = or i32 %56, %23
  %215 = xor i32 %113, %2
  %216 = xor i32 %78, %0
  %217 = or i32 %22, %182
  %218 = and i32 %90, %2
  %219 = and i32 %53, %1
  %220 = and i32 %118, %23
  %221 = or i32 %87, %23
  %222 = xor i32 %91, %0
  %223 = and i32 %118, %38
  %224 = and i32 %22, %8
  %225 = xor i32 %31, %2
  %226 = xor i32 %126, %29
  %227 = or i32 %35, %38
  %228 = or i32 %45, %182
  %229 = or i32 %8, %23
  %230 = and i32 %87, %1
  %231 = and i32 %118, %22
  %232 = and i32 %82, %22
  %233 = shl i32 %232, 1
  %234 = or i32 %60, %0
  %235 = or i32 %32, %2
  %236 = and i32 %9, %0
  %237 = or i32 %44, %0
  %238 = add i32 %77, 1
  %239 = or i32 %82, %1
  %240 = and i32 %27, %81
  %241 = shl i32 %240, 1
  %242 = and i32 %99, %2
  %243 = or i32 %56, %22
  %244 = or i32 %40, %105
  %245 = or i32 %25, %62
  %246 = and i32 %22, %109
  %247 = or i32 %45, %87
  %248 = and i32 %36, %38
  %249 = shl i32 %248, 1
  %250 = add i32 %56, 1
  %251 = or i32 %54, %38
  %252 = xor i32 %182, %1
  %253 = or i32 %91, %7
  %254 = xor i32 %62, %44
  %255 = and i32 %87, %81
  %256 = or i32 %82, %23
  %257 = shl i32 %256, 1
  %258 = and i32 %44, %7
  %259 = shl i32 %53, 2
  %260 = and i32 %60, %7
  %261 = mul i32 %260, 27
  %262 = and i32 %77, %7
  %263 = and i32 %60, %0
  %264 = mul i32 %263, 23
  %265 = and i32 %77, %0
  %266 = and i32 %57, %7
  %267 = and i32 %57, %0
  %268 = add i32 %7, %2
  %269 = add i32 %268, %224
  %270 = add i32 %269, %33
  %271 = add i32 %270, %246
  %272 = add i32 %271, %243
  %273 = add i32 %272, %239
  %274 = add i32 %273, %230
  %275 = add i32 %274, %199
  %276 = add i32 %275, %187
  %277 = add i32 %276, %183
  %278 = add i32 %277, %180
  %279 = add i32 %278, %150
  %280 = add i32 %279, %131
  %281 = add i32 %280, %112
  %282 = add i32 %281, %108
  %283 = add i32 %282, %80
  %284 = add i32 %283, %58
  %285 = add i32 %284, %149
  %286 = or i32 %26, %267
  %287 = add i32 %286, %155
  %288 = sub i32 %287, %92
  %289 = sub i32 %288, %16
  %290 = add i32 %289, %18
  %291 = mul i32 %290, 5
  %292 = sub i32 %65, %265
  %293 = mul i32 %292, 11
  %294 = add i32 %19, %262
  %295 = mul i32 %294, 6
  %296 = sub i32 %285, %12
  %297 = shl i32 %296, 1
  %298 = add i32 %235, -1
  %299 = add i32 %298, %266
  %300 = add i32 %299, %17
  %301 = add i32 %300, %13
  %302 = mul i32 %301, 3
  %303 = add i32 %0, %1
  %304 = add i32 %303, %22
  %305 = add i32 %304, %45
  %306 = add i32 %305, 4
  %307 = add i32 %306, %22
  %308 = sub i32 %307, %45
  %309 = add i32 %308, %113
  %310 = add i32 %309, %62
  %311 = add i32 %310, %15
  %312 = sub i32 %311, %3
  %313 = add i32 %312, %24
  %314 = add i32 %313, %37
  %315 = add i32 %314, %44
  %316 = add i32 %315, %46
  %317 = add i32 %316, %59
  %318 = add i32 %317, %76
  %319 = add i32 %318, %27
  %320 = add i32 %319, %85
  %321 = sub i32 %320, %93
  %322 = sub i32 %321, %25
  %323 = add i32 %322, %118
  %324 = sub i32 %323, %130
  %325 = sub i32 %324, %132
  %326 = sub i32 %325, %144
  %327 = sub i32 %326, %157
  %328 = sub i32 %327, %174
  %329 = add i32 %328, %176
  %330 = add i32 %329, %35
  %331 = add i32 %330, %198
  %332 = sub i32 %331, %209
  %333 = add i32 %332, %210
  %334 = add i32 %333, %215
  %335 = sub i32 %334, %218
  %336 = sub i32 %335, %225
  %337 = sub i32 %336, %56
  %338 = add i32 %337, %229
  %339 = add i32 %338, %238
  %340 = add i32 %339, %242
  %341 = add i32 %340, %250
  %342 = add i32 %341, %21
  %343 = sub i32 %342, %34
  %344 = add i32 %343, %52
  %345 = sub i32 %344, %55
  %346 = add i32 %345, %61
  %347 = sub i32 %346, %70
  %348 = sub i32 %347, %73
  %349 = add i32 %348, %75
  %350 = sub i32 %349, %79
  %351 = sub i32 %350, %86
  %352 = sub i32 %351, %88
  %353 = sub i32 %352, %89
  %354 = sub i32 %353, %94
  %355 = add i32 %354, %41
  %356 = add i32 %355, %95
  %357 = add i32 %356, %96
  %358 = add i32 %357, %100
  %359 = add i32 %358, %101
  %360 = sub i32 %359, %104
  %361 = sub i32 %360, %110
  %362 = sub i32 %361, %111
  %363 = sub i32 %362, %114
  %364 = add i32 %363, %115
  %365 = sub i32 %364, %116
  %366 = sub i32 %365, %117
  %367 = add i32 %366, %119
  %368 = sub i32 %367, %120
  %369 = add i32 %368, %123
  %370 = sub i32 %369, %126
  %371 = add i32 %370, %127
  %372 = sub i32 %371, %135
  %373 = add i32 %372, %136
  %374 = sub i32 %373, %139
  %375 = sub i32 %374, %141
  %376 = add i32 %375, %142
  %377 = sub i32 %376, %143
  %378 = sub i32 %377, %147
  %379 = add i32 %378, %148
  %380 = add i32 %379, %151
  %381 = sub i32 %380, %156
  %382 = add i32 %381, %160
  %383 = sub i32 %382, %161
  %384 = sub i32 %383, %164
  %385 = add i32 %384, %167
  %386 = sub i32 %385, %172
  %387 = sub i32 %386, %173
  %388 = sub i32 %387, %175
  %389 = sub i32 %388, %177
  %390 = add i32 %389, %179
  %391 = add i32 %390, %181
  %392 = sub i32 %391, %184
  %393 = add i32 %392, %185
  %394 = sub i32 %393, %186
  %395 = sub i32 %394, %188
  %396 = add i32 %395, %189
  %397 = add i32 %396, %190
  %398 = sub i32 %397, %191
  %399 = add i32 %398, %28
  %400 = add i32 %399, %193
  %401 = add i32 %400, %194
  %402 = sub i32 %401, %195
  %403 = add i32 %402, %196
  %404 = add i32 %403, %197
  %405 = add i32 %404, %205
  %406 = add i32 %405, %206
  %407 = sub i32 %406, %207
  %408 = sub i32 %407, %208
  %409 = sub i32 %408, %211
  %410 = sub i32 %409, %214
  %411 = sub i32 %410, %216
  %412 = sub i32 %411, %217
  %413 = add i32 %412, %219
  %414 = sub i32 %413, %220
  %415 = add i32 %414, %221
  %416 = add i32 %415, %222
  %417 = add i32 %416, %223
  %418 = sub i32 %417, %227
  %419 = sub i32 %418, %228
  %420 = sub i32 %419, %231
  %421 = add i32 %420, %234
  %422 = sub i32 %421, %236
  %423 = add i32 %422, %237
  %424 = sub i32 %423, %245
  %425 = add i32 %424, %105
  %426 = sub i32 %425, %247
  %427 = sub i32 %426, %66
  %428 = sub i32 %427, %251
  %429 = add i32 %428, %252
  %430 = sub i32 %429, %253
  %431 = add i32 %430, %254
  %432 = sub i32 %431, %255
  %433 = add i32 %432, %124
  %434 = add i32 %433, %258
  %435 = sub i32 %434, %259
  %436 = add i32 %435, %13
  %437 = add i32 %436, %14
  %438 = add i32 %437, %30
  %439 = sub i32 %438, %43
  %440 = sub i32 %439, %64
  %441 = sub i32 %440, %72
  %442 = add i32 %441, %74
  %443 = sub i32 %442, %84
  %444 = sub i32 %443, %98
  %445 = sub i32 %444, %103
  %446 = add i32 %445, %107
  %447 = sub i32 %446, %122
  %448 = add i32 %447, %125
  %449 = add i32 %448, %129
  %450 = sub i32 %449, %134
  %451 = sub i32 %450, %138
  %452 = sub i32 %451, %146
  %453 = add i32 %452, %152
  %454 = sub i32 %453, %154
  %455 = add i32 %454, %159
  %456 = sub i32 %455, %166
  %457 = sub i32 %456, %169
  %458 = sub i32 %457, %171
  %459 = sub i32 %458, %178
  %460 = add i32 %459, %192
  %461 = sub i32 %460, %201
  %462 = sub i32 %461, %202
  %463 = sub i32 %462, %204
  %464 = sub i32 %463, %213
  %465 = sub i32 %464, %226
  %466 = sub i32 %465, %233
  %467 = sub i32 %466, %241
  %468 = sub i32 %467, %244
  %469 = sub i32 %468, %249
  %470 = sub i32 %469, %257
  %471 = add i32 %470, %261
  %472 = add i32 %471, %264
  %473 = sub i32 %472, %163
  %474 = add i32 %473, %293
  %475 = sub i32 %474, %51
  %476 = sub i32 %475, %69
  %477 = add i32 %476, %295
  %478 = add i32 %477, %302
  %479 = add i32 %478, %291
  %480 = add i32 %479, %297
  %481 = icmp eq i32 %11, %480
  %482 = select i1 %481, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %483 = tail call i32 @puts(i8* nonnull dereferenceable(1) %482)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
