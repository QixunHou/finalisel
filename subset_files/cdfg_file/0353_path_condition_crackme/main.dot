digraph "DFG for'main' function" {
	Node0x1b3adf8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1b3ae78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1b3af08[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1b3b368[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1b3b448[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1b3b568[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b3b7a0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1b3b858[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1b3c7c8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1b3ce50[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1b3cec0[shape=record, label="  %9 = and i32 %6, %8"];
	Node0x1b3cf30[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1b3cfa0[shape=record, label="  %11 = and i32 %7, %6"];
	Node0x1b3d010[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1b3d080[shape=record, label="  %13 = mul i32 %12, -5"];
	Node0x1b3d0f0[shape=record, label="  %14 = add i32 %13, %10"];
	Node0x1b3d160[shape=record, label="  %15 = xor i32 %7, %6"];
	Node0x1b3d1d0[shape=record, label="  %16 = mul i32 %7, 5"];
	Node0x1b3d240[shape=record, label="  %17 = or i32 %6, %8"];
	Node0x1b3d2b0[shape=record, label="  %18 = or i32 %7, %6"];
	Node0x1b3d320[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1b3d390[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x1b3d400[shape=record, label="  %21 = xor i32 %17, -1"];
	Node0x1b3d470[shape=record, label="  %22 = mul i32 %21, -7"];
	Node0x1b3d4e0[shape=record, label="  %23 = shl i32 %15, 1"];
	Node0x1b3d550[shape=record, label="  %24 = add i32 %7, 5"];
	Node0x1b3d5c0[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x1b3d630[shape=record, label="  %26 = sub i32 %25, %17"];
	Node0x1b3d6a0[shape=record, label="  %27 = sub i32 %26, %9"];
	Node0x1b3d710[shape=record, label="  %28 = add i32 %27, %11"];
	Node0x1b3d780[shape=record, label="  %29 = add i32 %28, %22"];
	Node0x1b3d7f0[shape=record, label="  %30 = add i32 %29, %23"];
	Node0x1b3d860[shape=record, label="  %31 = add i32 %30, %20"];
	Node0x1b3d8d0[shape=record, label="  %32 = icmp eq i32 %14, %31"];
	Node0x1adb9d8[shape=record, label="  %33 = select i1 %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b3db70[shape=record, label="  %34 = call i32 @puts(i8* nonnull dereferenceable(1) %33) #5"];
	Node0x1b3ddc8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b3df28[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1b3dfe8[shape=record, label="  ret i32 0"];
	Node0x1b3adf8 -> Node0x1b3ae78;
	Node0x1b3ae78 -> Node0x1b3af08;
	Node0x1b3af08 -> Node0x1b3b368;
	Node0x1b3b368 -> Node0x1b3b448;
	Node0x1b3b448 -> Node0x1b3b568;
	Node0x1b3b568 -> Node0x1b3b7a0;
	Node0x1b3b7a0 -> Node0x1b3b858;
	Node0x1b3b858 -> Node0x1b3c7c8;
	Node0x1b3c7c8 -> Node0x1b3ce50;
	Node0x1b3ce50 -> Node0x1b3cec0;
	Node0x1b3cec0 -> Node0x1b3cf30;
	Node0x1b3cf30 -> Node0x1b3cfa0;
	Node0x1b3cfa0 -> Node0x1b3d010;
	Node0x1b3d010 -> Node0x1b3d080;
	Node0x1b3d080 -> Node0x1b3d0f0;
	Node0x1b3d0f0 -> Node0x1b3d160;
	Node0x1b3d160 -> Node0x1b3d1d0;
	Node0x1b3d1d0 -> Node0x1b3d240;
	Node0x1b3d240 -> Node0x1b3d2b0;
	Node0x1b3d2b0 -> Node0x1b3d320;
	Node0x1b3d320 -> Node0x1b3d390;
	Node0x1b3d390 -> Node0x1b3d400;
	Node0x1b3d400 -> Node0x1b3d470;
	Node0x1b3d470 -> Node0x1b3d4e0;
	Node0x1b3d4e0 -> Node0x1b3d550;
	Node0x1b3d550 -> Node0x1b3d5c0;
	Node0x1b3d5c0 -> Node0x1b3d630;
	Node0x1b3d630 -> Node0x1b3d6a0;
	Node0x1b3d6a0 -> Node0x1b3d710;
	Node0x1b3d710 -> Node0x1b3d780;
	Node0x1b3d780 -> Node0x1b3d7f0;
	Node0x1b3d7f0 -> Node0x1b3d860;
	Node0x1b3d860 -> Node0x1b3d8d0;
	Node0x1b3d8d0 -> Node0x1adb9d8;
	Node0x1adb9d8 -> Node0x1b3db70;
	Node0x1b3db70 -> Node0x1b3ddc8;
	Node0x1b3ddc8 -> Node0x1b3df28;
	Node0x1b3df28 -> Node0x1b3dfe8;
edge [color=red]
	Node0x1b3adf8 -> Node0x1b3af08;
	Node0x1b3af08 -> Node0x1b3b368;
	Node0x1b3ae78 -> Node0x1b3b448;
	Node0x1b3b448 -> Node0x1b3b568;
	Node0x1b3adf8 -> Node0x1b3b7a0;
	Node0x1b3ae78 -> Node0x1b3b7a0;
	Node0x1b3adf8 -> Node0x1b3b858;
	Node0x1b3ae78 -> Node0x1b3c7c8;
	Node0x1b3c7c8 -> Node0x1b3ce50;
	Node0x1b3b858 -> Node0x1b3cec0;
	Node0x1b3ce50 -> Node0x1b3cec0;
	Node0x1b3cec0 -> Node0x1b3cf30;
	Node0x1b3c7c8 -> Node0x1b3cfa0;
	Node0x1b3b858 -> Node0x1b3cfa0;
	Node0x1b3cfa0 -> Node0x1b3d010;
	Node0x1b3d010 -> Node0x1b3d080;
	Node0x1b3d080 -> Node0x1b3d0f0;
	Node0x1b3cf30 -> Node0x1b3d0f0;
	Node0x1b3c7c8 -> Node0x1b3d160;
	Node0x1b3b858 -> Node0x1b3d160;
	Node0x1b3c7c8 -> Node0x1b3d1d0;
	Node0x1b3b858 -> Node0x1b3d240;
	Node0x1b3ce50 -> Node0x1b3d240;
	Node0x1b3c7c8 -> Node0x1b3d2b0;
	Node0x1b3b858 -> Node0x1b3d2b0;
	Node0x1b3d2b0 -> Node0x1b3d320;
	Node0x1b3d320 -> Node0x1b3d390;
	Node0x1b3d240 -> Node0x1b3d400;
	Node0x1b3d400 -> Node0x1b3d470;
	Node0x1b3d160 -> Node0x1b3d4e0;
	Node0x1b3c7c8 -> Node0x1b3d550;
	Node0x1b3d550 -> Node0x1b3d5c0;
	Node0x1b3d1d0 -> Node0x1b3d5c0;
	Node0x1b3d5c0 -> Node0x1b3d630;
	Node0x1b3d240 -> Node0x1b3d630;
	Node0x1b3d630 -> Node0x1b3d6a0;
	Node0x1b3cec0 -> Node0x1b3d6a0;
	Node0x1b3d6a0 -> Node0x1b3d710;
	Node0x1b3cfa0 -> Node0x1b3d710;
	Node0x1b3d710 -> Node0x1b3d780;
	Node0x1b3d470 -> Node0x1b3d780;
	Node0x1b3d780 -> Node0x1b3d7f0;
	Node0x1b3d4e0 -> Node0x1b3d7f0;
	Node0x1b3d7f0 -> Node0x1b3d860;
	Node0x1b3d390 -> Node0x1b3d860;
	Node0x1b3d0f0 -> Node0x1b3d8d0;
	Node0x1b3d860 -> Node0x1b3d8d0;
	Node0x1b3d8d0 -> Node0x1adb9d8;
	Node0x1adb9d8 -> Node0x1b3db70;
	Node0x1b3b448 -> Node0x1b3ddc8;
	Node0x1b3af08 -> Node0x1b3df28;
}
