digraph "DFG for'crackme' function" {
	Node0x1b39bb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1b39c20[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1b39ce0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x1b39d50[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x1b39dc0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1b39e30[shape=record, label="  %8 = mul i32 %7, -5"];
	Node0x1b39ea0[shape=record, label="  %9 = add i32 %8, %5"];
	Node0x1b39f10[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1b39fb0[shape=record, label="  %11 = mul i32 %1, 5"];
	Node0x1b3a020[shape=record, label="  %12 = or i32 %3, %0"];
	Node0x1b3a090[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x1b3a130[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1b3a1d0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1b3a240[shape=record, label="  %16 = xor i32 %12, -1"];
	Node0x1b3a2e0[shape=record, label="  %17 = mul i32 %16, -7"];
	Node0x1b3a350[shape=record, label="  %18 = shl i32 %10, 1"];
	Node0x1b3a3c0[shape=record, label="  %19 = add i32 %1, 5"];
	Node0x1b3a430[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x1b3a4a0[shape=record, label="  %21 = sub i32 %20, %12"];
	Node0x1b3a510[shape=record, label="  %22 = sub i32 %21, %4"];
	Node0x1b3a580[shape=record, label="  %23 = add i32 %22, %6"];
	Node0x1b3a5f0[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x1b3a660[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x1b3a6d0[shape=record, label="  %26 = add i32 %25, %15"];
	Node0x1b3a740[shape=record, label="  %27 = icmp eq i32 %9, %26"];
	Node0x1ada268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b3abe0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1b3ac30[shape=record, label="  ret void"];
	Node0x1b39bb0 -> Node0x1b39c20;
	Node0x1b39c20 -> Node0x1b39ce0;
	Node0x1b39ce0 -> Node0x1b39d50;
	Node0x1b39d50 -> Node0x1b39dc0;
	Node0x1b39dc0 -> Node0x1b39e30;
	Node0x1b39e30 -> Node0x1b39ea0;
	Node0x1b39ea0 -> Node0x1b39f10;
	Node0x1b39f10 -> Node0x1b39fb0;
	Node0x1b39fb0 -> Node0x1b3a020;
	Node0x1b3a020 -> Node0x1b3a090;
	Node0x1b3a090 -> Node0x1b3a130;
	Node0x1b3a130 -> Node0x1b3a1d0;
	Node0x1b3a1d0 -> Node0x1b3a240;
	Node0x1b3a240 -> Node0x1b3a2e0;
	Node0x1b3a2e0 -> Node0x1b3a350;
	Node0x1b3a350 -> Node0x1b3a3c0;
	Node0x1b3a3c0 -> Node0x1b3a430;
	Node0x1b3a430 -> Node0x1b3a4a0;
	Node0x1b3a4a0 -> Node0x1b3a510;
	Node0x1b3a510 -> Node0x1b3a580;
	Node0x1b3a580 -> Node0x1b3a5f0;
	Node0x1b3a5f0 -> Node0x1b3a660;
	Node0x1b3a660 -> Node0x1b3a6d0;
	Node0x1b3a6d0 -> Node0x1b3a740;
	Node0x1b3a740 -> Node0x1ada268;
	Node0x1ada268 -> Node0x1b3abe0;
	Node0x1b3abe0 -> Node0x1b3ac30;
edge [color=red]
	Node0x1b39bb0 -> Node0x1b39c20;
	Node0x1b39c20 -> Node0x1b39ce0;
	Node0x1b39d50 -> Node0x1b39dc0;
	Node0x1b39dc0 -> Node0x1b39e30;
	Node0x1b39e30 -> Node0x1b39ea0;
	Node0x1b39ce0 -> Node0x1b39ea0;
	Node0x1b39bb0 -> Node0x1b3a020;
	Node0x1b3a090 -> Node0x1b3a130;
	Node0x1b3a130 -> Node0x1b3a1d0;
	Node0x1b3a020 -> Node0x1b3a240;
	Node0x1b3a240 -> Node0x1b3a2e0;
	Node0x1b39f10 -> Node0x1b3a350;
	Node0x1b3a3c0 -> Node0x1b3a430;
	Node0x1b39fb0 -> Node0x1b3a430;
	Node0x1b3a430 -> Node0x1b3a4a0;
	Node0x1b3a020 -> Node0x1b3a4a0;
	Node0x1b3a4a0 -> Node0x1b3a510;
	Node0x1b39c20 -> Node0x1b3a510;
	Node0x1b3a510 -> Node0x1b3a580;
	Node0x1b39d50 -> Node0x1b3a580;
	Node0x1b3a580 -> Node0x1b3a5f0;
	Node0x1b3a2e0 -> Node0x1b3a5f0;
	Node0x1b3a5f0 -> Node0x1b3a660;
	Node0x1b3a350 -> Node0x1b3a660;
	Node0x1b3a660 -> Node0x1b3a6d0;
	Node0x1b3a1d0 -> Node0x1b3a6d0;
	Node0x1b39ea0 -> Node0x1b3a740;
	Node0x1b3a6d0 -> Node0x1b3a740;
	Node0x1b3a740 -> Node0x1ada268;
	Node0x1ada268 -> Node0x1b3abe0;
}
