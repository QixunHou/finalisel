; ModuleID = '../.././c_source_file/0434_path_condition_crackme.c'
source_filename = "../.././c_source_file/0434_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %2, %0
  %9 = or i32 %8, %7
  %10 = xor i32 %3, -1
  %11 = or i32 %10, %4
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %5
  %14 = shl i32 %13, 1
  %15 = sub i32 %9, %14
  %16 = xor i32 %0, -1
  %17 = and i32 %2, %1
  %18 = and i32 %17, %16
  %19 = or i32 %2, %1
  %20 = and i32 %19, %0
  %21 = or i32 %18, %20
  %22 = xor i32 %1, -1
  %23 = and i32 %16, %1
  %24 = xor i32 %2, %1
  %25 = or i32 %24, %23
  %26 = shl i32 %25, 1
  %27 = and i32 %22, %2
  %28 = and i32 %27, %0
  %29 = or i32 %22, %2
  %30 = xor i32 %29, %0
  %31 = or i32 %28, %30
  %32 = and i32 %24, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %18, %33
  %35 = or i32 %2, %0
  %36 = and i32 %35, %22
  %37 = and i32 %22, %0
  %38 = xor i32 %2, -1
  %39 = and i32 %38, %1
  %40 = xor i32 %39, -1
  %41 = xor i32 %37, %40
  %42 = and i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %1
  %45 = and i32 %1, %0
  %46 = xor i32 %35, -1
  %47 = or i32 %45, %46
  %48 = and i32 %16, %2
  %49 = or i32 %27, %45
  %50 = xor i32 %24, %0
  %51 = or i32 %28, %50
  %52 = xor i32 %37, -1
  %53 = xor i32 %17, %52
  %54 = and i32 %40, %0
  %55 = or i32 %1, %0
  %56 = xor i32 %8, -1
  %57 = and i32 %55, %56
  %58 = and i32 %55, %38
  %59 = xor i32 %7, 2147483647
  %60 = or i32 %8, %59
  %61 = shl i32 %60, 1
  %62 = and i32 %17, %0
  %63 = and i32 %24, %16
  %64 = or i32 %62, %63
  %65 = or i32 %8, %23
  %66 = xor i32 %19, -1
  %67 = and i32 %66, %16
  %68 = and i32 %39, %16
  %69 = mul i32 %68, 10
  %70 = and i32 %66, %0
  %71 = and i32 %39, %0
  %72 = and i32 %27, %16
  %73 = and i32 %10, %4
  %74 = xor i32 %5, %3
  %75 = or i32 %74, %73
  %76 = xor i32 %4, -1
  %77 = or i32 %74, %76
  %78 = xor i32 %5, %4
  %79 = and i32 %78, %11
  %80 = or i32 %4, %3
  %81 = xor i32 %80, -1
  %82 = xor i32 %78, -1
  %83 = or i32 %82, %81
  %84 = and i32 %4, %3
  %85 = or i32 %5, %3
  %86 = xor i32 %85, -1
  %87 = or i32 %84, %86
  %88 = or i32 %73, %5
  %89 = xor i32 %4, %3
  %90 = and i32 %89, %5
  %91 = xor i32 %89, -1
  %92 = and i32 %91, %5
  %93 = xor i32 %5, -1
  %94 = and i32 %93, %3
  %95 = or i32 %5, %4
  %96 = and i32 %5, %3
  %97 = and i32 %96, %4
  %98 = and i32 %85, %76
  %99 = or i32 %97, %98
  %100 = xor i32 %96, %4
  %101 = and i32 %93, %4
  %102 = xor i32 %101, %3
  %103 = and i32 %5, %4
  %104 = or i32 %103, %91
  %105 = or i32 %93, %4
  %106 = or i32 %84, %93
  %107 = shl i32 %106, 1
  %108 = or i32 %85, %76
  %109 = and i32 %10, %5
  %110 = and i32 %109, %4
  %111 = or i32 %10, %5
  %112 = xor i32 %111, %4
  %113 = xor i32 %112, 2147483647
  %114 = xor i32 %113, %110
  %115 = xor i32 %85, %84
  %116 = xor i32 %105, -1
  %117 = or i32 %116, %3
  %118 = xor i32 %96, -1
  %119 = or i32 %118, %4
  %120 = and i32 %78, %91
  %121 = and i32 %95, %10
  %122 = or i32 %93, %3
  %123 = xor i32 %122, -1
  %124 = or i32 %123, %76
  %125 = xor i32 %123, %4
  %126 = or i32 %73, %93
  %127 = xor i32 %73, -1
  %128 = add i32 %73, 1
  %129 = xor i32 %74, -1
  %130 = or i32 %84, %129
  %131 = and i32 %78, %80
  %132 = and i32 %85, %4
  %133 = and i32 %74, %127
  %134 = or i32 %85, %4
  %135 = shl i32 %134, 1
  %136 = xor i32 %103, %80
  %137 = xor i32 %101, -1
  %138 = and i32 %89, %137
  %139 = or i32 %84, %123
  %140 = and i32 %137, %91
  %141 = or i32 %86, %76
  %142 = xor i32 %101, %122
  %143 = shl i32 %142, 1
  %144 = and i32 %89, %82
  %145 = or i32 %96, %73
  %146 = shl i32 %145, 1
  %147 = or i32 %78, %3
  %148 = xor i32 %94, -1
  %149 = xor i32 %73, %148
  %150 = or i32 %84, %82
  %151 = xor i32 %73, %118
  %152 = and i32 %80, %5
  %153 = or i32 %78, %84
  %154 = xor i32 %84, -1
  %155 = and i32 %78, %154
  %156 = shl i32 %155, 1
  %157 = or i32 %96, %76
  %158 = and i32 %80, %129
  %159 = xor i32 %95, %3
  %160 = and i32 %11, %129
  %161 = and i32 %74, %11
  %162 = shl i32 %161, 2
  %163 = xor i32 %103, -1
  %164 = add i32 %89, 1
  %165 = and i32 %148, %76
  %166 = or i32 %84, %116
  %167 = and i32 %96, %76
  %168 = and i32 %74, %4
  %169 = xor i32 %168, -1
  %170 = xor i32 %167, %169
  %171 = and i32 %109, %76
  %172 = xor i32 %77, -1
  %173 = or i32 %171, %172
  %174 = or i32 %82, %10
  %175 = and i32 %137, %3
  %176 = shl i32 %175, 1
  %177 = and i32 %89, %163
  %178 = or i32 %78, %89
  %179 = and i32 %93, %127
  %180 = shl i32 %179, 1
  %181 = xor i32 %85, %4
  %182 = add i32 %80, 1
  %183 = xor i32 %103, %85
  %184 = and i32 %93, %91
  %185 = shl i32 %184, 1
  %186 = or i32 %78, %81
  %187 = xor i32 %74, %4
  %188 = xor i32 %97, %187
  %189 = xor i32 %171, %77
  %190 = and i32 %111, %76
  %191 = or i32 %110, %190
  %192 = and i32 %74, %76
  %193 = add i32 %122, 1
  %194 = xor i32 %95, -1
  %195 = xor i32 %118, %4
  %196 = or i32 %101, %123
  %197 = xor i32 %94, %4
  %198 = or i32 %74, %4
  %199 = xor i32 %198, -1
  %200 = or i32 %110, %199
  %201 = or i32 %167, %168
  %202 = or i32 %91, %5
  %203 = or i32 %93, %12
  %204 = or i32 %86, %4
  %205 = and i32 %105, %3
  %206 = shl i32 %205, 2
  %207 = and i32 %105, %89
  %208 = or i32 %97, %181
  %209 = and i32 %74, %80
  %210 = and i32 %163, %10
  %211 = or i32 %82, %3
  %212 = or i32 %103, %86
  %213 = or i32 %103, %81
  %214 = shl i32 %213, 1
  %215 = xor i32 %181, 2147483647
  %216 = xor i32 %215, %97
  %217 = shl i32 %216, 1
  %218 = xor i32 %132, 2147483647
  %219 = xor i32 %218, %167
  %220 = shl i32 %219, 1
  %221 = shl i32 %84, 1
  %222 = xor i32 %137, %3
  %223 = and i32 %148, %4
  %224 = xor i32 %81, %5
  %225 = or i32 %89, %116
  %226 = shl i32 %225, 2
  %227 = or i32 %110, %187
  %228 = shl i32 %227, 1
  %229 = and i32 %89, %93
  %230 = xor i32 %105, %84
  %231 = or i32 %73, %129
  %232 = and i32 %122, %4
  %233 = and i32 %163, %3
  %234 = shl i32 %233, 1
  %235 = and i32 %129, %4
  %236 = and i32 %82, %91
  %237 = or i32 %73, %82
  %238 = and i32 %82, %10
  %239 = or i32 %74, %84
  %240 = and i32 %82, %154
  %241 = or i32 %96, %4
  %242 = and i32 %105, %10
  %243 = xor i32 %154, %5
  %244 = or i32 %148, %4
  %245 = xor i32 %97, -1
  %246 = xor i32 %98, %245
  %247 = xor i32 %192, %245
  %248 = or i32 %194, %10
  %249 = xor i32 %105, %3
  %250 = xor i32 %187, -1
  %251 = or i32 %97, %250
  %252 = shl i32 %251, 1
  %253 = or i32 %116, %91
  %254 = and i32 %78, %3
  %255 = xor i32 %129, %4
  %256 = or i32 %129, %4
  %257 = or i32 %94, %73
  %258 = and i32 %129, %154
  %259 = xor i32 %122, %84
  %260 = or i32 %101, %91
  %261 = or i32 %93, %81
  %262 = and i32 %93, %154
  %263 = and i32 %80, %82
  %264 = and i32 %137, %10
  %265 = or i32 %194, %91
  %266 = xor i32 %127, %5
  %267 = shl i32 %266, 1
  %268 = xor i32 %148, %4
  %269 = or i32 %194, %3
  %270 = and i32 %95, %89
  %271 = or i32 %84, %194
  %272 = shl i32 %271, 1
  %273 = and i32 %95, %3
  %274 = or i32 %129, %12
  %275 = or i32 %103, %12
  %276 = or i32 %89, %82
  %277 = or i32 %78, %12
  %278 = or i32 %103, %10
  %279 = shl i32 %278, 1
  %280 = or i32 %122, %76
  %281 = or i32 %101, %10
  %282 = or i32 %101, %3
  %283 = or i32 %101, %96
  %284 = and i32 %82, %3
  %285 = or i32 %110, %112
  %286 = or i32 %81, %5
  %287 = add i32 %3, 1
  %288 = and i32 %129, %76
  %289 = and i32 %95, %91
  %290 = xor i32 %95, %84
  %291 = or i32 %123, %4
  %292 = xor i32 %110, %250
  %293 = and i32 %129, %127
  %294 = and i32 %105, %91
  %295 = or i32 %97, %192
  %296 = shl i32 %295, 1
  %297 = xor i32 %103, %11
  %298 = shl i32 %297, 1
  %299 = and i32 %78, %10
  %300 = or i32 %84, %5
  %301 = xor i32 %73, %5
  %302 = or i32 %74, %12
  %303 = or i32 %94, %4
  %304 = or i32 %74, %81
  %305 = xor i32 %84, %5
  %306 = xor i32 %110, %198
  %307 = xor i32 %190, -1
  %308 = xor i32 %110, %307
  %309 = and i32 %11, %93
  %310 = or i32 %103, %89
  %311 = shl i32 %310, 1
  %312 = and i32 %118, %76
  %313 = shl i32 %312, 1
  %314 = or i32 %118, %76
  %315 = xor i32 %122, %4
  %316 = and i32 %82, %127
  %317 = xor i32 %11, %5
  %318 = xor i32 %103, %3
  %319 = and i32 %78, %89
  %320 = and i32 %80, %93
  %321 = shl i32 %73, 1
  %322 = or i32 %89, %93
  %323 = or i32 %116, %10
  %324 = and i32 %118, %4
  %325 = or i32 %78, %73
  %326 = or i32 %82, %12
  %327 = xor i32 %116, %3
  %328 = and i32 %127, %5
  %329 = and i32 %163, %91
  %330 = or i32 %103, %94
  %331 = or i32 %129, %76
  %332 = or i32 %78, %10
  %333 = or i32 %167, %132
  %334 = or i32 %103, %3
  %335 = or i32 %89, %5
  %336 = and i32 %122, %76
  %337 = or i32 %82, %91
  %338 = xor i32 %194, %3
  %339 = and i32 %74, %154
  %340 = or i32 %122, %4
  %341 = and i32 %154, %5
  %342 = or i32 %78, %91
  %343 = or i32 %94, %76
  %344 = xor i32 %12, %5
  %345 = and i32 %11, %82
  %346 = xor i32 %101, %118
  %347 = and i32 %111, %4
  %348 = or i32 %171, %347
  %349 = or i32 %148, %76
  %350 = add i32 %74, 1
  %351 = or i32 %101, %89
  %352 = xor i32 %86, %4
  %353 = xor i32 %163, %3
  %354 = and i32 %11, %5
  %355 = and i32 %86, %76
  %356 = and i32 %94, %76
  %357 = shl i32 %356, 4
  %358 = and i32 %86, %4
  %359 = shl i32 %358, 3
  %360 = and i32 %94, %4
  %361 = mul i32 %360, -13
  %362 = and i32 %123, %76
  %363 = shl i32 %362, 3
  %364 = and i32 %123, %4
  %365 = mul i32 %364, -24
  %366 = add i32 %89, %37
  %367 = add i32 %366, %93
  %368 = add i32 %367, %12
  %369 = add i32 %368, %328
  %370 = add i32 %369, %148
  %371 = add i32 %370, %224
  %372 = add i32 %371, %163
  %373 = add i32 %372, %152
  %374 = add i32 %373, %198
  %375 = add i32 %374, %316
  %376 = add i32 %375, %303
  %377 = add i32 %376, %302
  %378 = add i32 %377, %291
  %379 = add i32 %378, %277
  %380 = add i32 %379, %263
  %381 = add i32 %380, %256
  %382 = add i32 %381, %230
  %383 = add i32 %382, %223
  %384 = add i32 %383, %210
  %385 = add i32 %384, %121
  %386 = add i32 %385, %115
  %387 = add i32 %386, %201
  %388 = add i32 %387, %114
  %389 = shl i32 %388, 1
  %390 = sub i32 %18, %5
  %391 = sub i32 %390, %355
  %392 = sub i32 %391, %319
  %393 = sub i32 %392, %284
  %394 = add i32 %393, %260
  %395 = sub i32 %394, %249
  %396 = add i32 %395, %195
  %397 = add i32 %396, %247
  %398 = mul i32 %397, 5
  %399 = sub i32 %182, %53
  %400 = sub i32 %399, %34
  %401 = sub i32 %400, %259
  %402 = add i32 %401, %349
  %403 = sub i32 %402, %136
  %404 = mul i32 %403, 3
  %405 = or i32 %72, %71
  %406 = add i32 %405, %67
  %407 = mul i32 %406, 9
  %408 = mul i32 %96, -11
  %409 = add i32 %62, %70
  %410 = mul i32 %409, 7
  %411 = add i32 %85, 1073741823
  %412 = add i32 %411, %293
  %413 = shl i32 %412, 2
  %414 = add i32 %48, -2
  %415 = sub i32 %414, %58
  %416 = add i32 %415, %3
  %417 = add i32 %416, %287
  %418 = add i32 %417, %36
  %419 = sub i32 %418, %41
  %420 = add i32 %419, %44
  %421 = sub i32 %420, %47
  %422 = add i32 %421, %49
  %423 = sub i32 %422, %54
  %424 = add i32 %423, %57
  %425 = sub i32 %424, %65
  %426 = sub i32 %425, %26
  %427 = sub i32 %426, %21
  %428 = add i32 %427, %31
  %429 = sub i32 %428, %51
  %430 = sub i32 %429, %61
  %431 = add i32 %430, %64
  %432 = add i32 %431, %69
  %433 = add i32 %432, %80
  %434 = add i32 %433, %11
  %435 = add i32 %434, %128
  %436 = add i32 %435, %164
  %437 = add i32 %436, %154
  %438 = add i32 %437, %88
  %439 = add i32 %438, %90
  %440 = sub i32 %439, %92
  %441 = add i32 %440, %94
  %442 = sub i32 %441, %95
  %443 = add i32 %442, %126
  %444 = add i32 %443, %193
  %445 = add i32 %444, %194
  %446 = add i32 %445, %202
  %447 = add i32 %446, %203
  %448 = add i32 %447, %74
  %449 = sub i32 %448, %221
  %450 = sub i32 %449, %229
  %451 = add i32 %450, %122
  %452 = add i32 %451, %243
  %453 = add i32 %452, %86
  %454 = sub i32 %453, %261
  %455 = sub i32 %454, %262
  %456 = sub i32 %455, %103
  %457 = sub i32 %456, %286
  %458 = sub i32 %457, %300
  %459 = sub i32 %458, %301
  %460 = add i32 %459, %137
  %461 = sub i32 %460, %305
  %462 = sub i32 %461, %309
  %463 = sub i32 %462, %317
  %464 = sub i32 %463, %320
  %465 = sub i32 %464, %321
  %466 = sub i32 %465, %322
  %467 = sub i32 %466, %101
  %468 = add i32 %467, %335
  %469 = add i32 %468, %341
  %470 = add i32 %469, %344
  %471 = add i32 %470, %350
  %472 = sub i32 %471, %354
  %473 = add i32 %472, %410
  %474 = add i32 %473, %75
  %475 = sub i32 %474, %77
  %476 = add i32 %475, %79
  %477 = add i32 %476, %83
  %478 = sub i32 %477, %87
  %479 = add i32 %478, %100
  %480 = add i32 %479, %102
  %481 = sub i32 %480, %104
  %482 = sub i32 %481, %107
  %483 = sub i32 %482, %108
  %484 = sub i32 %483, %117
  %485 = add i32 %484, %119
  %486 = add i32 %485, %120
  %487 = sub i32 %486, %124
  %488 = sub i32 %487, %125
  %489 = sub i32 %488, %130
  %490 = sub i32 %489, %131
  %491 = add i32 %490, %132
  %492 = add i32 %491, %133
  %493 = sub i32 %492, %138
  %494 = sub i32 %493, %139
  %495 = add i32 %494, %140
  %496 = add i32 %495, %141
  %497 = sub i32 %496, %144
  %498 = add i32 %497, %147
  %499 = sub i32 %498, %149
  %500 = add i32 %499, %150
  %501 = sub i32 %500, %151
  %502 = add i32 %501, %153
  %503 = sub i32 %502, %157
  %504 = sub i32 %503, %158
  %505 = add i32 %504, %159
  %506 = add i32 %505, %160
  %507 = add i32 %506, %165
  %508 = sub i32 %507, %166
  %509 = sub i32 %508, %174
  %510 = add i32 %509, %177
  %511 = add i32 %510, %178
  %512 = sub i32 %511, %180
  %513 = sub i32 %512, %181
  %514 = add i32 %513, %183
  %515 = sub i32 %514, %185
  %516 = add i32 %515, %186
  %517 = add i32 %516, %192
  %518 = add i32 %517, %196
  %519 = sub i32 %518, %197
  %520 = add i32 %519, %204
  %521 = add i32 %520, %207
  %522 = sub i32 %521, %209
  %523 = add i32 %522, %211
  %524 = sub i32 %523, %212
  %525 = add i32 %524, %222
  %526 = add i32 %525, %231
  %527 = add i32 %526, %232
  %528 = sub i32 %527, %235
  %529 = sub i32 %528, %236
  %530 = add i32 %529, %237
  %531 = add i32 %530, %238
  %532 = add i32 %531, %239
  %533 = add i32 %532, %240
  %534 = add i32 %533, %241
  %535 = sub i32 %534, %242
  %536 = add i32 %535, %187
  %537 = sub i32 %536, %244
  %538 = add i32 %537, %248
  %539 = sub i32 %538, %253
  %540 = add i32 %539, %254
  %541 = add i32 %540, %255
  %542 = sub i32 %541, %257
  %543 = sub i32 %542, %258
  %544 = sub i32 %543, %264
  %545 = add i32 %544, %265
  %546 = sub i32 %545, %267
  %547 = add i32 %546, %268
  %548 = add i32 %547, %269
  %549 = add i32 %548, %270
  %550 = sub i32 %549, %273
  %551 = sub i32 %550, %274
  %552 = add i32 %551, %275
  %553 = add i32 %552, %276
  %554 = sub i32 %553, %280
  %555 = sub i32 %554, %281
  %556 = sub i32 %555, %282
  %557 = add i32 %556, %283
  %558 = sub i32 %557, %288
  %559 = sub i32 %558, %289
  %560 = sub i32 %559, %290
  %561 = add i32 %560, %294
  %562 = sub i32 %561, %299
  %563 = sub i32 %562, %304
  %564 = add i32 %563, %314
  %565 = sub i32 %564, %315
  %566 = add i32 %565, %318
  %567 = add i32 %566, %323
  %568 = sub i32 %567, %324
  %569 = sub i32 %568, %325
  %570 = add i32 %569, %326
  %571 = sub i32 %570, %327
  %572 = add i32 %571, %329
  %573 = add i32 %572, %98
  %574 = sub i32 %573, %330
  %575 = add i32 %574, %168
  %576 = sub i32 %575, %331
  %577 = add i32 %576, %332
  %578 = add i32 %577, %334
  %579 = sub i32 %578, %336
  %580 = sub i32 %579, %337
  %581 = sub i32 %580, %338
  %582 = sub i32 %581, %339
  %583 = add i32 %582, %340
  %584 = sub i32 %583, %342
  %585 = add i32 %584, %343
  %586 = sub i32 %585, %345
  %587 = add i32 %586, %346
  %588 = sub i32 %587, %351
  %589 = add i32 %588, %352
  %590 = sub i32 %589, %353
  %591 = add i32 %590, %407
  %592 = sub i32 %591, %99
  %593 = sub i32 %592, %135
  %594 = sub i32 %593, %143
  %595 = sub i32 %594, %146
  %596 = sub i32 %595, %156
  %597 = sub i32 %596, %162
  %598 = sub i32 %597, %170
  %599 = sub i32 %598, %173
  %600 = sub i32 %599, %176
  %601 = sub i32 %600, %188
  %602 = add i32 %601, %189
  %603 = sub i32 %602, %191
  %604 = sub i32 %603, %200
  %605 = sub i32 %604, %206
  %606 = add i32 %605, %208
  %607 = sub i32 %606, %214
  %608 = sub i32 %607, %226
  %609 = sub i32 %608, %234
  %610 = sub i32 %609, %246
  %611 = sub i32 %610, %272
  %612 = sub i32 %611, %279
  %613 = add i32 %612, %285
  %614 = sub i32 %613, %292
  %615 = sub i32 %614, %298
  %616 = add i32 %615, %306
  %617 = add i32 %616, %308
  %618 = sub i32 %617, %311
  %619 = sub i32 %618, %313
  %620 = add i32 %619, %333
  %621 = add i32 %620, %348
  %622 = sub i32 %621, %357
  %623 = sub i32 %622, %359
  %624 = add i32 %623, %361
  %625 = sub i32 %624, %363
  %626 = add i32 %625, %365
  %627 = sub i32 %626, %228
  %628 = sub i32 %627, %252
  %629 = sub i32 %628, %296
  %630 = add i32 %629, %408
  %631 = sub i32 %630, %217
  %632 = sub i32 %631, %220
  %633 = add i32 %632, %413
  %634 = add i32 %633, %404
  %635 = add i32 %634, %398
  %636 = add i32 %635, %389
  %637 = icmp eq i32 %15, %636
  %638 = select i1 %637, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %639 = tail call i32 @puts(i8* nonnull dereferenceable(1) %638)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
