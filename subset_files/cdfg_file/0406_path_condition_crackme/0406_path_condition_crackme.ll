; ModuleID = '../.././c_source_file/0406_path_condition_crackme.c'
source_filename = "../.././c_source_file/0406_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = or i32 %4, %2
  %6 = xor i32 %1, %0
  %7 = xor i32 %2, %0
  %8 = and i32 %7, %6
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %0
  %11 = and i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %10, %12
  %14 = or i32 %6, %2
  %15 = or i32 %9, %1
  %16 = xor i32 %15, -1
  %17 = or i32 %16, %0
  %18 = shl i32 %17, 1
  %19 = xor i32 %6, -1
  %20 = or i32 %9, %0
  %21 = xor i32 %20, -1
  %22 = shl i32 %21, 1
  %23 = xor i32 %0, -1
  %24 = or i32 %12, %23
  %25 = xor i32 %1, -1
  %26 = or i32 %25, %0
  %27 = and i32 %26, %9
  %28 = and i32 %11, %23
  %29 = or i32 %2, %1
  %30 = and i32 %29, %0
  %31 = or i32 %28, %30
  %32 = or i32 %19, %2
  %33 = or i32 %16, %23
  %34 = shl i32 %33, 1
  %35 = xor i32 %7, -1
  %36 = or i32 %35, %25
  %37 = xor i32 %4, -1
  %38 = and i32 %37, %2
  %39 = or i32 %2, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %25
  %42 = and i32 %9, %1
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %23
  %45 = and i32 %25, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %7, %46
  %48 = and i32 %2, %0
  %49 = xor i32 %48, %29
  %50 = or i32 %4, %9
  %51 = or i32 %4, %35
  %52 = or i32 %12, %0
  %53 = or i32 %1, %0
  %54 = xor i32 %53, %2
  %55 = xor i32 %2, %1
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %0
  %58 = or i32 %55, %4
  %59 = or i32 %35, %1
  %60 = or i32 %40, %19
  %61 = and i32 %12, %0
  %62 = and i32 %46, %2
  %63 = xor i32 %26, -1
  %64 = or i32 %10, %1
  %65 = and i32 %25, %2
  %66 = and i32 %65, %23
  %67 = or i32 %55, %23
  %68 = xor i32 %67, -1
  %69 = or i32 %66, %68
  %70 = and i32 %11, %0
  %71 = and i32 %55, %23
  %72 = xor i32 %70, -1
  %73 = xor i32 %71, %72
  %74 = or i32 %10, %16
  %75 = or i32 %6, %21
  %76 = xor i32 %48, -1
  %77 = xor i32 %11, %0
  %78 = shl i32 %48, 1
  %79 = and i32 %65, %0
  %80 = or i32 %25, %2
  %81 = and i32 %80, %23
  %82 = or i32 %79, %81
  %83 = or i32 %21, %19
  %84 = xor i32 %53, -1
  %85 = or i32 %7, %84
  %86 = and i32 %29, %23
  %87 = xor i32 %86, %72
  %88 = xor i32 %76, %1
  %89 = and i32 %12, %23
  %90 = xor i32 %84, %2
  %91 = or i32 %15, %0
  %92 = and i32 %7, %25
  %93 = and i32 %20, %25
  %94 = or i32 %45, %9
  %95 = shl i32 %94, 1
  %96 = and i32 %76, %1
  %97 = and i32 %26, %2
  %98 = xor i32 %10, -1
  %99 = xor i32 %98, %1
  %100 = xor i32 %56, %0
  %101 = xor i32 %29, %0
  %102 = or i32 %70, %101
  %103 = or i32 %48, %1
  %104 = and i32 %20, %19
  %105 = xor i32 %48, %26
  %106 = and i32 %7, %37
  %107 = and i32 %55, %37
  %108 = and i32 %53, %2
  %109 = and i32 %15, %23
  %110 = and i32 %56, %23
  %111 = and i32 %55, %0
  %112 = or i32 %28, %111
  %113 = or i32 %7, %6
  %114 = or i32 %45, %35
  %115 = and i32 %7, %19
  %116 = and i32 %6, %9
  %117 = xor i32 %37, %2
  %118 = shl i32 %117, 1
  %119 = xor i32 %55, %0
  %120 = xor i32 %119, -1
  %121 = or i32 %70, %120
  %122 = or i32 %45, %2
  %123 = and i32 %76, %25
  %124 = shl i32 %123, 1
  %125 = or i32 %10, %19
  %126 = xor i32 %4, %2
  %127 = and i32 %53, %35
  %128 = and i32 %39, %19
  %129 = or i32 %48, %19
  %130 = and i32 %9, %19
  %131 = or i32 %7, %1
  %132 = or i32 %35, %63
  %133 = or i32 %48, %25
  %134 = or i32 %48, %84
  %135 = shl i32 %134, 1
  %136 = xor i32 %28, -1
  %137 = xor i32 %30, %136
  %138 = or i32 %7, %63
  %139 = xor i32 %20, %1
  %140 = shl i32 %139, 1
  %141 = xor i32 %101, %72
  %142 = and i32 %55, %46
  %143 = or i32 %70, %86
  %144 = xor i32 %29, -1
  %145 = or i32 %4, %144
  %146 = and i32 %26, %56
  %147 = xor i32 %40, %1
  %148 = or i32 %9, %63
  %149 = shl i32 %148, 1
  %150 = or i32 %48, %6
  %151 = or i32 %144, %23
  %152 = or i32 %9, %84
  %153 = or i32 %35, %84
  %154 = xor i32 %42, %0
  %155 = and i32 %35, %25
  %156 = and i32 %35, %37
  %157 = shl i32 %156, 1
  %158 = xor i32 %26, %2
  %159 = xor i32 %43, %0
  %160 = xor i32 %48, %53
  %161 = or i32 %7, %19
  %162 = shl i32 %161, 1
  %163 = shl i32 %12, 1
  %164 = shl i32 %101, 1
  %165 = and i32 %39, %1
  %166 = xor i32 %66, %67
  %167 = or i32 %35, %19
  %168 = xor i32 %111, %136
  %169 = or i32 %7, %45
  %170 = shl i32 %169, 1
  %171 = or i32 %55, %63
  %172 = and i32 %43, %0
  %173 = shl i32 %172, 1
  %174 = xor i32 %70, %119
  %175 = xor i32 %46, %2
  %176 = and i32 %15, %0
  %177 = or i32 %29, %0
  %178 = and i32 %53, %56
  %179 = and i32 %6, %76
  %180 = and i32 %39, %6
  %181 = or i32 %63, %2
  %182 = and i32 %35, %19
  %183 = and i32 %9, %46
  %184 = or i32 %6, %40
  %185 = add i32 %4, 1
  %186 = or i32 %79, %119
  %187 = and i32 %39, %25
  %188 = and i32 %6, %98
  %189 = or i32 %40, %1
  %190 = or i32 %42, %45
  %191 = or i32 %43, %23
  %192 = xor i32 %10, %15
  %193 = or i32 %6, %35
  %194 = or i32 %45, %56
  %195 = shl i32 %194, 2
  %196 = xor i32 %45, %43
  %197 = or i32 %42, %23
  %198 = or i32 %70, %71
  %199 = or i32 %144, %0
  %200 = or i32 %11, %0
  %201 = add i32 %2, 1
  %202 = or i32 %4, %16
  %203 = xor i32 %80, %23
  %204 = xor i32 %203, %79
  %205 = and i32 %98, %19
  %206 = or i32 %55, %0
  %207 = or i32 %56, %23
  %208 = or i32 %84, %2
  %209 = xor i32 %79, -1
  %210 = xor i32 %81, %209
  %211 = and i32 %144, %23
  %212 = and i32 %42, %23
  %213 = shl i32 %212, 3
  %214 = and i32 %144, %0
  %215 = mul i32 %214, 22
  %216 = and i32 %42, %0
  %217 = and i32 %16, %23
  %218 = and i32 %16, %0
  %219 = add i32 %25, %0
  %220 = add i32 %219, %46
  %221 = add i32 %220, %208
  %222 = add i32 %221, %97
  %223 = add i32 %222, %43
  %224 = add i32 %223, %54
  %225 = add i32 %224, %193
  %226 = add i32 %225, %151
  %227 = add i32 %226, %146
  %228 = add i32 %227, %107
  %229 = add i32 %228, %93
  %230 = add i32 %229, %41
  %231 = add i32 %230, %31
  %232 = shl i32 %231, 1
  %233 = add i32 %211, %183
  %234 = add i32 %233, %217
  %235 = sub i32 %234, %182
  %236 = sub i32 %235, %113
  %237 = mul i32 %236, 3
  %238 = add i32 %206, %175
  %239 = sub i32 %238, %207
  %240 = mul i32 %239, 5
  %241 = mul i32 %11, 7
  %242 = sub i32 %218, %216
  %243 = mul i32 %242, 6
  %244 = add i32 %196, %105
  %245 = shl i32 %244, 2
  %246 = sub i32 -2, %6
  %247 = sub i32 %246, %4
  %248 = add i32 %247, %63
  %249 = add i32 %248, %185
  %250 = add i32 %249, %201
  %251 = add i32 %250, %14
  %252 = sub i32 %251, %27
  %253 = add i32 %252, %32
  %254 = sub i32 %253, %38
  %255 = sub i32 %254, %50
  %256 = add i32 %255, %7
  %257 = add i32 %256, %62
  %258 = add i32 %257, %76
  %259 = sub i32 %258, %90
  %260 = sub i32 %259, %108
  %261 = sub i32 %260, %116
  %262 = sub i32 %261, %122
  %263 = add i32 %262, %126
  %264 = add i32 %263, %39
  %265 = add i32 %264, %130
  %266 = add i32 %265, %98
  %267 = sub i32 %266, %152
  %268 = sub i32 %267, %158
  %269 = add i32 %268, %181
  %270 = add i32 %269, %29
  %271 = add i32 %270, %13
  %272 = add i32 %271, %8
  %273 = sub i32 %272, %22
  %274 = sub i32 %273, %24
  %275 = sub i32 %274, %36
  %276 = sub i32 %275, %44
  %277 = add i32 %276, %47
  %278 = add i32 %277, %49
  %279 = add i32 %278, %51
  %280 = sub i32 %279, %52
  %281 = add i32 %280, %57
  %282 = sub i32 %281, %58
  %283 = add i32 %282, %59
  %284 = sub i32 %283, %60
  %285 = sub i32 %284, %61
  %286 = add i32 %285, %64
  %287 = sub i32 %286, %74
  %288 = sub i32 %287, %75
  %289 = sub i32 %288, %77
  %290 = sub i32 %289, %78
  %291 = sub i32 %290, %83
  %292 = add i32 %291, %85
  %293 = sub i32 %292, %88
  %294 = sub i32 %293, %89
  %295 = add i32 %294, %91
  %296 = add i32 %295, %92
  %297 = sub i32 %296, %95
  %298 = add i32 %297, %96
  %299 = add i32 %298, %99
  %300 = add i32 %299, %100
  %301 = sub i32 %300, %103
  %302 = sub i32 %301, %104
  %303 = sub i32 %302, %106
  %304 = sub i32 %303, %109
  %305 = add i32 %304, %110
  %306 = sub i32 %305, %114
  %307 = sub i32 %306, %115
  %308 = sub i32 %307, %118
  %309 = add i32 %308, %125
  %310 = sub i32 %309, %127
  %311 = sub i32 %310, %128
  %312 = sub i32 %311, %129
  %313 = add i32 %312, %131
  %314 = add i32 %313, %132
  %315 = sub i32 %314, %133
  %316 = sub i32 %315, %138
  %317 = sub i32 %316, %142
  %318 = sub i32 %317, %145
  %319 = add i32 %318, %147
  %320 = sub i32 %319, %149
  %321 = sub i32 %320, %150
  %322 = sub i32 %321, %86
  %323 = sub i32 %322, %119
  %324 = add i32 %323, %153
  %325 = add i32 %324, %154
  %326 = sub i32 %325, %155
  %327 = add i32 %326, %159
  %328 = sub i32 %327, %160
  %329 = sub i32 %328, %163
  %330 = add i32 %329, %165
  %331 = sub i32 %330, %167
  %332 = sub i32 %331, %171
  %333 = add i32 %332, %71
  %334 = sub i32 %333, %176
  %335 = sub i32 %334, %177
  %336 = add i32 %335, %178
  %337 = sub i32 %336, %179
  %338 = add i32 %337, %180
  %339 = sub i32 %338, %184
  %340 = sub i32 %339, %187
  %341 = sub i32 %340, %188
  %342 = sub i32 %341, %189
  %343 = add i32 %342, %190
  %344 = add i32 %343, %191
  %345 = sub i32 %344, %192
  %346 = add i32 %345, %67
  %347 = add i32 %346, %30
  %348 = add i32 %347, %197
  %349 = add i32 %348, %199
  %350 = sub i32 %349, %200
  %351 = sub i32 %350, %202
  %352 = add i32 %351, %205
  %353 = sub i32 %352, %18
  %354 = sub i32 %353, %34
  %355 = sub i32 %354, %69
  %356 = add i32 %355, %73
  %357 = sub i32 %356, %82
  %358 = sub i32 %357, %87
  %359 = sub i32 %358, %102
  %360 = sub i32 %359, %112
  %361 = sub i32 %360, %121
  %362 = sub i32 %361, %124
  %363 = sub i32 %362, %135
  %364 = sub i32 %363, %137
  %365 = sub i32 %364, %140
  %366 = add i32 %365, %141
  %367 = add i32 %366, %143
  %368 = sub i32 %367, %157
  %369 = sub i32 %368, %162
  %370 = sub i32 %369, %164
  %371 = sub i32 %370, %166
  %372 = sub i32 %371, %168
  %373 = sub i32 %372, %170
  %374 = sub i32 %373, %173
  %375 = add i32 %374, %174
  %376 = sub i32 %375, %186
  %377 = sub i32 %376, %195
  %378 = sub i32 %377, %198
  %379 = add i32 %378, %204
  %380 = sub i32 %379, %210
  %381 = add i32 %380, %213
  %382 = add i32 %381, %215
  %383 = add i32 %382, %241
  %384 = add i32 %383, %243
  %385 = add i32 %384, %245
  %386 = add i32 %385, %240
  %387 = add i32 %386, %237
  %388 = add i32 %387, %232
  %389 = icmp eq i32 %5, %388
  %390 = select i1 %389, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %391 = tail call i32 @puts(i8* nonnull dereferenceable(1) %390)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
