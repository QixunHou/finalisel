; ModuleID = '../.././c_source_file/1664_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1664_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = add i32 %4, 1
  %8 = shl i32 %3, 2
  %9 = sub i32 %7, %8
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %2
  %12 = and i32 %11, %0
  %13 = xor i32 %2, %1
  %14 = xor i32 %13, %0
  %15 = or i32 %12, %14
  %16 = sub i32 %9, %15
  %17 = or i32 %4, %3
  %18 = and i32 %6, %3
  %19 = xor i32 %18, -1
  %20 = and i32 %4, %3
  %21 = xor i32 %4, %3
  %22 = or i32 %6, %3
  %23 = shl i32 %17, 2
  %24 = xor i32 %23, -4
  %25 = add i32 %22, 1
  %26 = mul i32 %20, -6
  %27 = and i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = add i32 %27, 1
  %30 = or i32 %10, %2
  %31 = xor i32 %30, %0
  %32 = or i32 %12, %31
  %33 = and i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %1
  %36 = shl i32 %35, 1
  %37 = xor i32 %0, -1
  %38 = or i32 %13, %37
  %39 = and i32 %11, %37
  %40 = and i32 %30, %0
  %41 = or i32 %39, %40
  %42 = or i32 %1, %0
  %43 = and i32 %13, %42
  %44 = xor i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = xor i32 %2, %0
  %47 = or i32 %46, %45
  %48 = xor i32 %2, -1
  %49 = and i32 %48, %0
  %50 = or i32 %48, %1
  %51 = xor i32 %49, %50
  %52 = or i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %27, %53
  %55 = or i32 %48, %0
  %56 = xor i32 %55, %27
  %57 = shl i32 %56, 1
  %58 = or i32 %10, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %59, %2
  %61 = and i32 %10, %0
  %62 = xor i32 %61, -1
  %63 = and i32 %48, %62
  %64 = and i32 %48, %45
  %65 = and i32 %48, %1
  %66 = xor i32 %65, -1
  %67 = and i32 %66, %37
  %68 = xor i32 %13, -1
  %69 = and i32 %42, %68
  %70 = or i32 %33, %1
  %71 = xor i32 %42, %2
  %72 = or i32 %2, %1
  %73 = xor i32 %33, %72
  %74 = and i32 %46, %58
  %75 = or i32 %46, %44
  %76 = shl i32 %75, 2
  %77 = xor i32 %55, -1
  %78 = or i32 %77, %1
  %79 = xor i32 %38, 2147483647
  %80 = or i32 %79, %39
  %81 = and i32 %2, %1
  %82 = and i32 %81, %0
  %83 = xor i32 %82, %14
  %84 = and i32 %48, %28
  %85 = xor i32 %46, -1
  %86 = and i32 %85, %1
  %87 = xor i32 %49, -1
  %88 = xor i32 %87, %1
  %89 = xor i32 %42, -1
  %90 = or i32 %13, %89
  %91 = and i32 %81, %37
  %92 = and i32 %72, %0
  %93 = xor i32 %92, -1
  %94 = xor i32 %91, %93
  %95 = xor i32 %53, %1
  %96 = and i32 %13, %0
  %97 = xor i32 %96, 2147483647
  %98 = xor i32 %97, %91
  %99 = shl i32 %98, 1
  %100 = and i32 %52, %1
  %101 = xor i32 %65, %0
  %102 = or i32 %77, %45
  %103 = or i32 %91, %96
  %104 = xor i32 %66, %0
  %105 = xor i32 %27, %2
  %106 = xor i32 %81, %0
  %107 = or i32 %46, %10
  %108 = shl i32 %107, 1
  %109 = or i32 %13, %27
  %110 = xor i32 %50, -1
  %111 = add i32 %50, 1
  %112 = xor i32 %34, %1
  %113 = xor i32 %72, -1
  %114 = add i32 %72, 1
  %115 = and i32 %68, %62
  %116 = or i32 %27, %110
  %117 = or i32 %49, %45
  %118 = or i32 %46, %89
  %119 = or i32 %46, %27
  %120 = or i32 %13, %0
  %121 = xor i32 %120, -1
  %122 = or i32 %12, %121
  %123 = and i32 %46, %1
  %124 = and i32 %46, %10
  %125 = and i32 %44, %87
  %126 = xor i32 %33, %58
  %127 = and i32 %50, %0
  %128 = and i32 %13, %37
  %129 = and i32 %13, %62
  %130 = add i32 %13, 1
  %131 = add i32 %46, 1
  %132 = or i32 %33, %44
  %133 = and i32 %87, %1
  %134 = xor i32 %81, -1
  %135 = and i32 %134, %0
  %136 = or i32 %49, %10
  %137 = or i32 %50, %0
  %138 = and i32 %72, %37
  %139 = and i32 %34, %10
  %140 = and i32 %87, %45
  %141 = or i32 %46, %59
  %142 = and i32 %42, %85
  %143 = and i32 %85, %45
  %144 = or i32 %49, %81
  %145 = or i32 %61, %85
  %146 = or i32 %44, %2
  %147 = or i32 %33, %10
  %148 = or i32 %110, %0
  %149 = and i32 %68, %0
  %150 = or i32 %113, %0
  %151 = xor i32 %110, %0
  %152 = and i32 %58, %2
  %153 = or i32 %82, %128
  %154 = or i32 %65, %0
  %155 = or i32 %85, %1
  %156 = or i32 %46, %1
  %157 = xor i32 %28, %2
  %158 = xor i32 %61, %134
  %159 = xor i32 %39, %38
  %160 = or i32 %49, %110
  %161 = or i32 %68, %37
  %162 = or i32 %27, %77
  %163 = xor i32 %33, %42
  %164 = or i32 %61, %68
  %165 = or i32 %33, %45
  %166 = and i32 %46, %42
  %167 = or i32 %82, %138
  %168 = or i32 %66, %37
  %169 = and i32 %34, %45
  %170 = xor i32 %33, %1
  %171 = and i32 %58, %48
  %172 = shl i32 %171, 1
  %173 = xor i32 %61, %2
  %174 = or i32 %50, %37
  %175 = or i32 %85, %89
  %176 = and i32 %55, %44
  %177 = or i32 %53, %1
  %178 = and i32 %44, %48
  %179 = xor i32 %72, %27
  %180 = shl i32 %179, 2
  %181 = or i32 %89, %2
  %182 = and i32 %42, %2
  %183 = and i32 %30, %37
  %184 = or i32 %12, %183
  %185 = and i32 %46, %28
  %186 = xor i32 %33, %66
  %187 = xor i32 %12, %120
  %188 = or i32 %53, %10
  %189 = shl i32 %188, 2
  %190 = or i32 %85, %10
  %191 = or i32 %33, %59
  %192 = and i32 %52, %45
  %193 = and i32 %13, %58
  %194 = and i32 %45, %2
  %195 = xor i32 %14, 2147483647
  %196 = xor i32 %195, %12
  %197 = shl i32 %196, 1
  %198 = or i32 %61, %2
  %199 = shl i32 %27, 1
  %200 = and i32 %66, %0
  %201 = and i32 %52, %44
  %202 = and i32 %13, %28
  %203 = add i32 %2, 1
  %204 = or i32 %72, %37
  %205 = or i32 %72, %0
  %206 = shl i32 %59, 1
  %207 = or i32 %65, %61
  %208 = or i32 %134, %0
  %209 = and i32 %55, %10
  %210 = shl i32 %1, 1
  %211 = or i32 %113, %37
  %212 = xor i32 %50, %27
  %213 = xor i32 %40, 2147483647
  %214 = xor i32 %213, %39
  %215 = or i32 %85, %45
  %216 = or i32 %68, %59
  %217 = or i32 %110, %37
  %218 = xor i32 %113, %0
  %219 = or i32 %81, %0
  %220 = xor i32 %61, %66
  %221 = xor i32 %49, %1
  %222 = xor i32 %72, %0
  %223 = xor i32 %134, %0
  %224 = xor i32 %89, %2
  %225 = or i32 %13, %61
  %226 = or i32 %46, %61
  %227 = and i32 %52, %10
  %228 = shl i32 %227, 1
  %229 = and i32 %46, %44
  %230 = and i32 %85, %10
  %231 = or i32 %48, %59
  %232 = and i32 %46, %45
  %233 = xor i32 %222, -1
  %234 = xor i32 %82, %233
  %235 = add i32 %42, 1
  %236 = xor i32 %49, %134
  %237 = or i32 %59, %2
  %238 = and i32 %44, %34
  %239 = shl i32 %238, 1
  %240 = or i32 %44, %85
  %241 = xor i32 %138, 2147483647
  %242 = xor i32 %241, %82
  %243 = shl i32 %242, 1
  %244 = or i32 %27, %48
  %245 = and i32 %85, %28
  %246 = and i32 %134, %37
  %247 = xor i32 %77, %1
  %248 = shl i32 %247, 1
  %249 = and i32 %68, %37
  %250 = or i32 %44, %77
  %251 = or i32 %13, %59
  %252 = shl i32 %251, 1
  %253 = or i32 %77, %10
  %254 = and i32 %55, %45
  %255 = and i32 %58, %85
  %256 = and i32 %113, %37
  %257 = mul i32 %256, 10
  %258 = and i32 %65, %37
  %259 = mul i32 %258, 12
  %260 = and i32 %113, %0
  %261 = and i32 %65, %0
  %262 = shl i32 %261, 4
  %263 = and i32 %110, %37
  %264 = mul i32 %263, -7
  %265 = mul i32 %91, -9
  %266 = and i32 %110, %0
  %267 = mul i32 %82, -15
  %268 = add i32 %198, %2
  %269 = add i32 %268, %178
  %270 = add i32 %269, %146
  %271 = add i32 %270, %66
  %272 = add i32 %271, %266
  %273 = add i32 %272, %260
  %274 = add i32 %273, %221
  %275 = add i32 %274, %220
  %276 = add i32 %275, %216
  %277 = add i32 %276, %186
  %278 = add i32 %277, %170
  %279 = add i32 %278, %158
  %280 = add i32 %279, %156
  %281 = add i32 %280, %135
  %282 = add i32 %281, %132
  %283 = add i32 %282, %109
  %284 = add i32 %283, %73
  %285 = add i32 %284, %54
  %286 = add i32 %285, %187
  %287 = add i32 %286, %21
  %288 = add i32 %287, %80
  %289 = add i32 %288, %214
  %290 = shl i32 %289, 1
  %291 = sub i32 %254, %152
  %292 = sub i32 %291, %245
  %293 = sub i32 %292, %177
  %294 = add i32 %293, %19
  %295 = sub i32 %294, %18
  %296 = mul i32 %295, 5
  %297 = add i32 %168, %244
  %298 = sub i32 %150, %297
  %299 = add i32 %298, %119
  %300 = add i32 %299, %25
  %301 = mul i32 %300, 3
  %302 = sub i32 1, %1
  %303 = add i32 %302, %29
  %304 = add i32 %303, %58
  %305 = add i32 %304, %62
  %306 = add i32 %305, %203
  %307 = sub i32 %306, %210
  %308 = sub i32 %307, %44
  %309 = add i32 %308, %235
  %310 = add i32 %309, %60
  %311 = sub i32 %310, %63
  %312 = sub i32 %311, %64
  %313 = add i32 %312, %71
  %314 = add i32 %313, %84
  %315 = add i32 %314, %105
  %316 = add i32 %315, %111
  %317 = sub i32 %316, %46
  %318 = add i32 %317, %114
  %319 = add i32 %318, %65
  %320 = add i32 %319, %50
  %321 = add i32 %320, %130
  %322 = add i32 %321, %131
  %323 = sub i32 %322, %157
  %324 = sub i32 %323, %173
  %325 = sub i32 %324, %181
  %326 = add i32 %325, %182
  %327 = add i32 %326, %194
  %328 = sub i32 %327, %199
  %329 = add i32 %328, %52
  %330 = sub i32 %329, %206
  %331 = add i32 %330, %55
  %332 = add i32 %331, %72
  %333 = sub i32 %332, %224
  %334 = add i32 %333, %231
  %335 = sub i32 %334, %237
  %336 = add i32 %335, %13
  %337 = sub i32 %336, %4
  %338 = add i32 %337, %38
  %339 = add i32 %338, %43
  %340 = add i32 %339, %47
  %341 = sub i32 %340, %51
  %342 = sub i32 %341, %67
  %343 = sub i32 %342, %69
  %344 = add i32 %343, %70
  %345 = add i32 %344, %74
  %346 = sub i32 %345, %78
  %347 = sub i32 %346, %86
  %348 = add i32 %347, %88
  %349 = sub i32 %348, %90
  %350 = add i32 %349, %95
  %351 = add i32 %350, %100
  %352 = add i32 %351, %101
  %353 = add i32 %352, %102
  %354 = sub i32 %353, %104
  %355 = sub i32 %354, %106
  %356 = sub i32 %355, %112
  %357 = add i32 %356, %115
  %358 = sub i32 %357, %116
  %359 = add i32 %358, %117
  %360 = add i32 %359, %118
  %361 = sub i32 %360, %123
  %362 = sub i32 %361, %124
  %363 = add i32 %362, %125
  %364 = sub i32 %363, %126
  %365 = sub i32 %364, %127
  %366 = sub i32 %365, %128
  %367 = add i32 %366, %129
  %368 = sub i32 %367, %133
  %369 = add i32 %368, %136
  %370 = add i32 %369, %137
  %371 = add i32 %370, %138
  %372 = add i32 %371, %139
  %373 = sub i32 %372, %140
  %374 = sub i32 %373, %141
  %375 = sub i32 %374, %142
  %376 = add i32 %375, %143
  %377 = add i32 %376, %144
  %378 = sub i32 %377, %145
  %379 = sub i32 %378, %147
  %380 = sub i32 %379, %148
  %381 = sub i32 %380, %149
  %382 = add i32 %381, %151
  %383 = sub i32 %382, %154
  %384 = add i32 %383, %155
  %385 = sub i32 %384, %160
  %386 = sub i32 %385, %161
  %387 = sub i32 %386, %162
  %388 = add i32 %387, %163
  %389 = add i32 %388, %164
  %390 = add i32 %389, %165
  %391 = sub i32 %390, %166
  %392 = add i32 %391, %169
  %393 = sub i32 %392, %172
  %394 = sub i32 %393, %174
  %395 = add i32 %394, %175
  %396 = sub i32 %395, %176
  %397 = add i32 %396, %185
  %398 = sub i32 %397, %190
  %399 = add i32 %398, %191
  %400 = add i32 %399, %192
  %401 = add i32 %400, %193
  %402 = sub i32 %401, %200
  %403 = add i32 %402, %201
  %404 = sub i32 %403, %202
  %405 = add i32 %404, %204
  %406 = sub i32 %405, %205
  %407 = add i32 %406, %207
  %408 = add i32 %407, %208
  %409 = sub i32 %408, %209
  %410 = sub i32 %409, %211
  %411 = sub i32 %410, %212
  %412 = add i32 %411, %215
  %413 = sub i32 %412, %217
  %414 = add i32 %413, %218
  %415 = add i32 %414, %219
  %416 = add i32 %415, %222
  %417 = add i32 %416, %223
  %418 = sub i32 %417, %225
  %419 = add i32 %418, %226
  %420 = add i32 %419, %229
  %421 = add i32 %420, %230
  %422 = sub i32 %421, %232
  %423 = sub i32 %422, %236
  %424 = sub i32 %423, %240
  %425 = add i32 %424, %246
  %426 = sub i32 %425, %249
  %427 = add i32 %426, %250
  %428 = add i32 %427, %253
  %429 = sub i32 %428, %255
  %430 = sub i32 %429, %17
  %431 = add i32 %430, %20
  %432 = add i32 %431, %21
  %433 = add i32 %432, %22
  %434 = sub i32 %433, %32
  %435 = sub i32 %434, %36
  %436 = sub i32 %435, %41
  %437 = sub i32 %436, %57
  %438 = sub i32 %437, %76
  %439 = sub i32 %438, %83
  %440 = sub i32 %439, %94
  %441 = sub i32 %440, %103
  %442 = sub i32 %441, %108
  %443 = sub i32 %442, %122
  %444 = sub i32 %443, %153
  %445 = sub i32 %444, %159
  %446 = sub i32 %445, %167
  %447 = add i32 %446, %180
  %448 = add i32 %447, %184
  %449 = sub i32 %448, %189
  %450 = sub i32 %449, %228
  %451 = add i32 %450, %234
  %452 = sub i32 %451, %239
  %453 = sub i32 %452, %248
  %454 = sub i32 %453, %252
  %455 = add i32 %454, %257
  %456 = add i32 %455, %259
  %457 = sub i32 %456, %262
  %458 = add i32 %457, %264
  %459 = add i32 %458, %265
  %460 = add i32 %459, %267
  %461 = add i32 %460, %26
  %462 = sub i32 %461, %24
  %463 = sub i32 %462, %99
  %464 = sub i32 %463, %197
  %465 = sub i32 %464, %243
  %466 = add i32 %465, %301
  %467 = add i32 %466, %296
  %468 = add i32 %467, %290
  %469 = icmp eq i32 %16, %468
  %470 = select i1 %469, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %471 = tail call i32 @puts(i8* nonnull dereferenceable(1) %470)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
