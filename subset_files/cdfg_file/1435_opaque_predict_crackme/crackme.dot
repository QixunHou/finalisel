digraph "DFG for'crackme' function" {
	Node0x2485be0[shape=record, label="  %3 = sub i32 0, %0"];
	Node0x2485c80[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x2485d40[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x2485db0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x2485e20[shape=record, label="  %7 = or i32 %4, %0"];
	Node0x2485e90[shape=record, label="  %8 = shl i32 %0, 1"];
	Node0x2485f30[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x2485fa0[shape=record, label="  %10 = xor i32 %6, -1"];
	Node0x2486010[shape=record, label="  %11 = shl i32 %4, 1"];
	Node0x2486080[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0x24860f0[shape=record, label="  %13 = or i32 %12, %1"];
	Node0x2486160[shape=record, label="  %14 = shl i32 %5, 1"];
	Node0x24861d0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x2486240[shape=record, label="  %16 = xor i32 %7, -1"];
	Node0x24862e0[shape=record, label="  %17 = mul i32 %0, -3"];
	Node0x2486350[shape=record, label="  %18 = add i32 %5, %4"];
	Node0x24863c0[shape=record, label="  %19 = sub i32 %18, %6"];
	Node0x2486430[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0x24864a0[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x2486510[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x2486580[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x24865f0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x2486660[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x24866d0[shape=record, label="  %26 = sub i32 %25, %15"];
	Node0x2486740[shape=record, label="  %27 = add i32 %26, %17"];
	Node0x24867b0[shape=record, label="  %28 = icmp eq i32 %27, %3"];
	Node0x2426268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2486c50[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x2486ca0[shape=record, label="  ret void"];
	Node0x2485be0 -> Node0x2485c80;
	Node0x2485c80 -> Node0x2485d40;
	Node0x2485d40 -> Node0x2485db0;
	Node0x2485db0 -> Node0x2485e20;
	Node0x2485e20 -> Node0x2485e90;
	Node0x2485e90 -> Node0x2485f30;
	Node0x2485f30 -> Node0x2485fa0;
	Node0x2485fa0 -> Node0x2486010;
	Node0x2486010 -> Node0x2486080;
	Node0x2486080 -> Node0x24860f0;
	Node0x24860f0 -> Node0x2486160;
	Node0x2486160 -> Node0x24861d0;
	Node0x24861d0 -> Node0x2486240;
	Node0x2486240 -> Node0x24862e0;
	Node0x24862e0 -> Node0x2486350;
	Node0x2486350 -> Node0x24863c0;
	Node0x24863c0 -> Node0x2486430;
	Node0x2486430 -> Node0x24864a0;
	Node0x24864a0 -> Node0x2486510;
	Node0x2486510 -> Node0x2486580;
	Node0x2486580 -> Node0x24865f0;
	Node0x24865f0 -> Node0x2486660;
	Node0x2486660 -> Node0x24866d0;
	Node0x24866d0 -> Node0x2486740;
	Node0x2486740 -> Node0x24867b0;
	Node0x24867b0 -> Node0x2426268;
	Node0x2426268 -> Node0x2486c50;
	Node0x2486c50 -> Node0x2486ca0;
edge [color=red]
	Node0x2485c80 -> Node0x2485e20;
	Node0x2485e90 -> Node0x2485f30;
	Node0x2485db0 -> Node0x2485fa0;
	Node0x2485c80 -> Node0x2486010;
	Node0x2486080 -> Node0x24860f0;
	Node0x2485d40 -> Node0x2486160;
	Node0x2486160 -> Node0x24861d0;
	Node0x2485e20 -> Node0x2486240;
	Node0x2485d40 -> Node0x2486350;
	Node0x2485c80 -> Node0x2486350;
	Node0x2486350 -> Node0x24863c0;
	Node0x2485db0 -> Node0x24863c0;
	Node0x24863c0 -> Node0x2486430;
	Node0x2485e20 -> Node0x2486430;
	Node0x2486430 -> Node0x24864a0;
	Node0x2485f30 -> Node0x24864a0;
	Node0x24864a0 -> Node0x2486510;
	Node0x2485fa0 -> Node0x2486510;
	Node0x2486510 -> Node0x2486580;
	Node0x2486010 -> Node0x2486580;
	Node0x2486580 -> Node0x24865f0;
	Node0x24860f0 -> Node0x24865f0;
	Node0x24865f0 -> Node0x2486660;
	Node0x2486240 -> Node0x2486660;
	Node0x2486660 -> Node0x24866d0;
	Node0x24861d0 -> Node0x24866d0;
	Node0x24866d0 -> Node0x2486740;
	Node0x24862e0 -> Node0x2486740;
	Node0x2486740 -> Node0x24867b0;
	Node0x2485be0 -> Node0x24867b0;
	Node0x24867b0 -> Node0x2426268;
	Node0x2426268 -> Node0x2486c50;
}
