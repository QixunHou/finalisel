; ModuleID = '../.././c_source_file/1502_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1502_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = or i32 %4, %3
  %8 = shl i32 %7, 1
  %9 = xor i32 %2, %1
  %10 = shl i32 %9, 1
  %11 = xor i32 %2, -1
  %12 = or i32 %11, %0
  %13 = and i32 %12, %1
  %14 = shl i32 %13, 1
  %15 = sub i32 1, %10
  %16 = add i32 %15, %6
  %17 = add i32 %16, %14
  %18 = sub i32 %17, %8
  %19 = xor i32 %4, -1
  %20 = or i32 %19, %3
  %21 = and i32 %19, %3
  %22 = add i32 %7, 1
  %23 = shl i32 %20, 3
  %24 = xor i32 %23, -8
  %25 = mul i32 %21, -6
  %26 = and i32 %4, %3
  %27 = mul i32 %26, -10
  %28 = xor i32 %1, -1
  %29 = and i32 %2, %0
  %30 = or i32 %29, %28
  %31 = and i32 %28, %0
  %32 = and i32 %11, %1
  %33 = xor i32 %32, -1
  %34 = xor i32 %31, %33
  %35 = add i32 %1, 1
  %36 = xor i32 %1, %0
  %37 = and i32 %12, %36
  %38 = xor i32 %0, -1
  %39 = xor i32 %9, -1
  %40 = or i32 %39, %38
  %41 = shl i32 %40, 1
  %42 = or i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %9, %43
  %45 = xor i32 %2, %0
  %46 = and i32 %45, %28
  %47 = and i32 %11, %0
  %48 = or i32 %47, %1
  %49 = or i32 %9, %38
  %50 = or i32 %11, %1
  %51 = xor i32 %50, -1
  %52 = and i32 %1, %0
  %53 = or i32 %51, %38
  %54 = or i32 %32, %31
  %55 = or i32 %2, %1
  %56 = xor i32 %55, -1
  %57 = or i32 %29, %56
  %58 = or i32 %39, %0
  %59 = and i32 %39, %38
  %60 = xor i32 %36, -1
  %61 = and i32 %11, %60
  %62 = and i32 %28, %2
  %63 = and i32 %62, %0
  %64 = or i32 %9, %0
  %65 = xor i32 %64, -1
  %66 = or i32 %63, %65
  %67 = or i32 %2, %0
  %68 = xor i32 %67, %1
  %69 = or i32 %60, %2
  %70 = xor i32 %67, -1
  %71 = or i32 %36, %70
  %72 = or i32 %28, %0
  %73 = xor i32 %72, -1
  %74 = or i32 %45, %73
  %75 = xor i32 %29, -1
  %76 = and i32 %75, %28
  %77 = xor i32 %63, %64
  %78 = and i32 %2, %1
  %79 = xor i32 %78, -1
  %80 = and i32 %79, %0
  %81 = and i32 %78, %38
  %82 = and i32 %9, %0
  %83 = or i32 %81, %82
  %84 = and i32 %55, %38
  %85 = xor i32 %31, -1
  %86 = and i32 %45, %85
  %87 = shl i32 %86, 1
  %88 = or i32 %36, %11
  %89 = and i32 %42, %2
  %90 = or i32 %47, %51
  %91 = and i32 %60, %2
  %92 = or i32 %52, %70
  %93 = and i32 %62, %38
  %94 = or i32 %28, %2
  %95 = and i32 %94, %0
  %96 = or i32 %93, %95
  %97 = xor i32 %94, %0
  %98 = or i32 %63, %97
  %99 = xor i32 %52, -1
  %100 = and i32 %39, %99
  %101 = and i32 %67, %60
  %102 = shl i32 %79, 1
  %103 = add i32 %55, 1
  %104 = and i32 %9, %38
  %105 = or i32 %29, %36
  %106 = xor i32 %39, %0
  %107 = xor i32 %50, %0
  %108 = xor i32 %63, -1
  %109 = xor i32 %97, %108
  %110 = xor i32 %45, -1
  %111 = and i32 %110, %28
  %112 = and i32 %45, %99
  %113 = or i32 %110, %60
  %114 = or i32 %55, %38
  %115 = and i32 %42, %11
  %116 = or i32 %9, %73
  %117 = xor i32 %47, -1
  %118 = and i32 %117, %60
  %119 = xor i32 %29, %33
  %120 = xor i32 %29, %55
  %121 = xor i32 %79, %0
  %122 = shl i32 %121, 1
  %123 = or i32 %70, %1
  %124 = or i32 %33, %38
  %125 = or i32 %11, %43
  %126 = and i32 %55, %0
  %127 = xor i32 %81, -1
  %128 = xor i32 %126, %127
  %129 = add i32 %72, 1
  %130 = or i32 %78, %38
  %131 = and i32 %78, %0
  %132 = or i32 %131, %84
  %133 = and i32 %99, %2
  %134 = or i32 %11, %73
  %135 = and i32 %45, %60
  %136 = xor i32 %47, %50
  %137 = xor i32 %70, %1
  %138 = and i32 %72, %2
  %139 = xor i32 %12, %52
  %140 = xor i32 %75, %1
  %141 = shl i32 %140, 1
  %142 = and i32 %75, %1
  %143 = and i32 %9, %72
  %144 = or i32 %33, %0
  %145 = xor i32 %12, -1
  %146 = add i32 %12, 1
  %147 = or i32 %52, %145
  %148 = or i32 %31, %2
  %149 = or i32 %45, %36
  %150 = or i32 %52, %110
  %151 = and i32 %42, %110
  %152 = or i32 %73, %2
  %153 = and i32 %45, %72
  %154 = shl i32 %153, 1
  %155 = or i32 %45, %52
  %156 = shl i32 %36, 1
  %157 = or i32 %56, %38
  %158 = or i32 %45, %31
  %159 = and i32 %33, %0
  %160 = and i32 %9, %85
  %161 = shl i32 %160, 1
  %162 = or i32 %31, %110
  %163 = and i32 %67, %36
  %164 = xor i32 %9, %0
  %165 = xor i32 %85, %2
  %166 = xor i32 %29, %42
  %167 = and i32 %72, %11
  %168 = and i32 %11, %85
  %169 = xor i32 %51, %0
  %170 = xor i32 %73, %2
  %171 = or i32 %52, %2
  %172 = xor i32 %99, %2
  %173 = and i32 %39, %85
  %174 = xor i32 %29, %1
  %175 = shl i32 %174, 1
  %176 = xor i32 %82, %127
  %177 = and i32 %94, %38
  %178 = or i32 %63, %177
  %179 = and i32 %72, %39
  %180 = and i32 %11, %99
  %181 = and i32 %67, %28
  %182 = or i32 %29, %1
  %183 = xor i32 %12, %1
  %184 = or i32 %9, %31
  %185 = or i32 %32, %38
  %186 = or i32 %31, %39
  %187 = shl i32 %186, 2
  %188 = or i32 %29, %73
  %189 = xor i32 %95, -1
  %190 = xor i32 %93, %189
  %191 = or i32 %45, %60
  %192 = shl i32 %191, 1
  %193 = xor i32 %131, %164
  %194 = or i32 %81, %126
  %195 = and i32 %110, %99
  %196 = and i32 %67, %1
  %197 = or i32 %70, %28
  %198 = or i32 %52, %56
  %199 = or i32 %110, %73
  %200 = add i32 %42, 1
  %201 = or i32 %79, %38
  %202 = xor i32 %55, %0
  %203 = or i32 %131, %202
  %204 = and i32 %42, %39
  %205 = or i32 %39, %43
  %206 = and i32 %50, %38
  %207 = shl i32 %206, 1
  %208 = and i32 %36, %110
  %209 = or i32 %63, %164
  %210 = shl i32 %209, 1
  %211 = xor i32 %131, -1
  %212 = xor i32 %104, %211
  %213 = or i32 %50, %0
  %214 = or i32 %9, %52
  %215 = or i32 %78, %31
  %216 = and i32 %45, %42
  %217 = or i32 %131, %104
  %218 = or i32 %145, %1
  %219 = or i32 %52, %51
  %220 = and i32 %117, %28
  %221 = or i32 %55, %0
  %222 = and i32 %36, %11
  %223 = xor i32 %31, %79
  %224 = or i32 %32, %0
  %225 = and i32 %117, %1
  %226 = shl i32 %225, 1
  %227 = or i32 %52, %39
  %228 = and i32 %110, %1
  %229 = shl i32 %228, 1
  %230 = or i32 %50, %38
  %231 = or i32 %47, %60
  %232 = xor i32 %84, %211
  %233 = or i32 %29, %32
  %234 = and i32 %12, %28
  %235 = or i32 %56, %0
  %236 = and i32 %39, %0
  %237 = and i32 %50, %0
  %238 = shl i32 %31, 1
  %239 = add i32 %31, 1
  %240 = xor i32 %43, %2
  %241 = or i32 %36, %2
  %242 = and i32 %12, %60
  %243 = xor i32 %31, %2
  %244 = or i32 %29, %43
  %245 = and i32 %33, %38
  %246 = shl i32 %245, 1
  %247 = and i32 %75, %60
  %248 = xor i32 %42, %2
  %249 = or i32 %78, %0
  %250 = or i32 %31, %11
  %251 = xor i32 %202, %211
  %252 = or i32 %47, %28
  %253 = or i32 %145, %28
  %254 = xor i32 %78, %0
  %255 = and i32 %9, %42
  %256 = xor i32 %56, %0
  %257 = xor i32 %67, %52
  %258 = xor i32 %145, %1
  %259 = xor i32 %33, %0
  %260 = xor i32 %47, %1
  %261 = and i32 %110, %60
  %262 = and i32 %110, %85
  %263 = or i32 %110, %43
  %264 = or i32 %145, %60
  %265 = xor i32 %72, %2
  %266 = xor i32 %177, %108
  %267 = xor i32 %55, %52
  %268 = shl i32 %267, 1
  %269 = or i32 %45, %1
  %270 = xor i32 %49, 2147483647
  %271 = or i32 %270, %93
  %272 = shl i32 %271, 1
  %273 = and i32 %45, %1
  %274 = and i32 %36, %117
  %275 = or i32 %47, %36
  %276 = xor i32 %164, -1
  %277 = xor i32 %63, %276
  %278 = or i32 %36, %110
  %279 = or i32 %52, %11
  %280 = and i32 %36, %75
  %281 = shl i32 %280, 1
  %282 = xor i32 %117, %1
  %283 = or i32 %110, %28
  %284 = xor i32 %29, %72
  %285 = or i32 %45, %28
  %286 = or i32 %36, %145
  %287 = or i32 %51, %0
  %288 = or i32 %11, %60
  %289 = and i32 %36, %2
  %290 = and i32 %9, %99
  %291 = or i32 %47, %78
  %292 = or i32 %43, %2
  %293 = xor i32 %50, %52
  %294 = or i32 %131, %276
  %295 = xor i32 %93, %49
  %296 = xor i32 %52, %2
  %297 = xor i32 %47, %79
  %298 = and i32 %79, %38
  %299 = and i32 %85, %2
  %300 = and i32 %45, %36
  %301 = or i32 %29, %60
  %302 = or i32 %70, %60
  %303 = or i32 %110, %1
  %304 = xor i32 %32, %0
  %305 = or i32 %79, %0
  %306 = and i32 %56, %38
  %307 = mul i32 %306, -27
  %308 = and i32 %32, %38
  %309 = and i32 %56, %0
  %310 = and i32 %32, %0
  %311 = mul i32 %310, -29
  %312 = and i32 %51, %38
  %313 = mul i32 %81, -13
  %314 = and i32 %51, %0
  %315 = shl i32 %314, 4
  %316 = add i32 %52, %11
  %317 = add i32 %316, %289
  %318 = add i32 %317, %167
  %319 = add i32 %318, %32
  %320 = add i32 %319, %69
  %321 = add i32 %320, %312
  %322 = add i32 %321, %303
  %323 = add i32 %322, %297
  %324 = add i32 %323, %261
  %325 = add i32 %324, %258
  %326 = add i32 %325, %255
  %327 = add i32 %326, %235
  %328 = add i32 %327, %204
  %329 = add i32 %328, %198
  %330 = add i32 %329, %195
  %331 = add i32 %330, %188
  %332 = add i32 %331, %162
  %333 = add i32 %332, %64
  %334 = add i32 %333, %120
  %335 = add i32 %334, %114
  %336 = add i32 %335, %101
  %337 = add i32 %336, %57
  %338 = add i32 %337, %20
  %339 = add i32 %338, %193
  %340 = shl i32 %339, 1
  %341 = add i32 %243, %35
  %342 = add i32 %341, %222
  %343 = sub i32 %342, %252
  %344 = sub i32 %343, %181
  %345 = sub i32 %344, %149
  %346 = add i32 %345, %54
  %347 = add i32 %346, %66
  %348 = mul i32 %347, 3
  %349 = add i32 %157, %136
  %350 = add i32 %349, %4
  %351 = shl i32 %350, 2
  %352 = or i32 %131, %308
  %353 = mul i32 %352, -28
  %354 = add i32 %168, %73
  %355 = add i32 %354, %301
  %356 = add i32 %355, %123
  %357 = add i32 %356, %22
  %358 = mul i32 %357, 5
  %359 = sub i32 1, %1
  %360 = add i32 %359, %129
  %361 = add i32 %360, %99
  %362 = add i32 %361, %60
  %363 = add i32 %362, %200
  %364 = add i32 %363, %2
  %365 = add i32 %364, %239
  %366 = sub i32 %365, %42
  %367 = sub i32 %366, %61
  %368 = sub i32 %367, %88
  %369 = add i32 %368, %89
  %370 = add i32 %369, %91
  %371 = add i32 %370, %39
  %372 = add i32 %371, %103
  %373 = add i32 %372, %115
  %374 = add i32 %373, %125
  %375 = add i32 %374, %78
  %376 = add i32 %375, %133
  %377 = sub i32 %376, %134
  %378 = sub i32 %377, %138
  %379 = add i32 %378, %146
  %380 = sub i32 %379, %148
  %381 = sub i32 %380, %152
  %382 = sub i32 %381, %156
  %383 = add i32 %382, %165
  %384 = sub i32 %383, %170
  %385 = add i32 %384, %171
  %386 = add i32 %385, %172
  %387 = sub i32 %386, %180
  %388 = add i32 %387, %33
  %389 = sub i32 %388, %47
  %390 = sub i32 %389, %238
  %391 = sub i32 %390, %55
  %392 = sub i32 %391, %240
  %393 = add i32 %392, %241
  %394 = sub i32 %393, %12
  %395 = sub i32 %394, %248
  %396 = sub i32 %395, %250
  %397 = add i32 %396, %265
  %398 = add i32 %397, %70
  %399 = add i32 %398, %279
  %400 = add i32 %399, %288
  %401 = sub i32 %400, %292
  %402 = sub i32 %401, %296
  %403 = add i32 %402, %299
  %404 = add i32 %403, %19
  %405 = add i32 %404, %30
  %406 = add i32 %405, %34
  %407 = sub i32 %406, %37
  %408 = sub i32 %407, %44
  %409 = add i32 %408, %46
  %410 = add i32 %409, %48
  %411 = add i32 %410, %49
  %412 = add i32 %411, %53
  %413 = sub i32 %412, %58
  %414 = sub i32 %413, %59
  %415 = add i32 %414, %68
  %416 = add i32 %415, %71
  %417 = add i32 %416, %74
  %418 = sub i32 %417, %76
  %419 = add i32 %418, %80
  %420 = add i32 %419, %84
  %421 = add i32 %420, %90
  %422 = add i32 %421, %92
  %423 = add i32 %422, %100
  %424 = sub i32 %423, %102
  %425 = add i32 %424, %104
  %426 = sub i32 %425, %105
  %427 = add i32 %426, %106
  %428 = add i32 %427, %107
  %429 = sub i32 %428, %111
  %430 = sub i32 %429, %112
  %431 = add i32 %430, %113
  %432 = sub i32 %431, %116
  %433 = add i32 %432, %118
  %434 = sub i32 %433, %119
  %435 = sub i32 %434, %124
  %436 = sub i32 %435, %130
  %437 = add i32 %436, %135
  %438 = sub i32 %437, %137
  %439 = add i32 %438, %139
  %440 = sub i32 %439, %142
  %441 = add i32 %440, %143
  %442 = sub i32 %441, %144
  %443 = add i32 %442, %147
  %444 = add i32 %443, %150
  %445 = sub i32 %444, %151
  %446 = add i32 %445, %155
  %447 = add i32 %446, %158
  %448 = add i32 %447, %159
  %449 = sub i32 %448, %126
  %450 = add i32 %449, %163
  %451 = add i32 %450, %164
  %452 = add i32 %451, %166
  %453 = sub i32 %452, %169
  %454 = sub i32 %453, %173
  %455 = sub i32 %454, %179
  %456 = sub i32 %455, %182
  %457 = sub i32 %456, %183
  %458 = sub i32 %457, %184
  %459 = sub i32 %458, %185
  %460 = sub i32 %459, %196
  %461 = sub i32 %460, %197
  %462 = sub i32 %461, %199
  %463 = sub i32 %462, %201
  %464 = add i32 %463, %205
  %465 = sub i32 %464, %208
  %466 = add i32 %465, %213
  %467 = sub i32 %466, %214
  %468 = add i32 %467, %215
  %469 = sub i32 %468, %216
  %470 = sub i32 %469, %218
  %471 = add i32 %470, %219
  %472 = add i32 %471, %220
  %473 = sub i32 %472, %221
  %474 = add i32 %473, %223
  %475 = add i32 %474, %224
  %476 = add i32 %475, %227
  %477 = sub i32 %476, %230
  %478 = add i32 %477, %231
  %479 = add i32 %478, %233
  %480 = sub i32 %479, %82
  %481 = add i32 %480, %202
  %482 = sub i32 %481, %234
  %483 = add i32 %482, %236
  %484 = sub i32 %483, %237
  %485 = sub i32 %484, %242
  %486 = add i32 %485, %244
  %487 = sub i32 %486, %247
  %488 = add i32 %487, %249
  %489 = add i32 %488, %253
  %490 = add i32 %489, %254
  %491 = add i32 %490, %256
  %492 = sub i32 %491, %257
  %493 = add i32 %492, %259
  %494 = add i32 %493, %260
  %495 = add i32 %494, %262
  %496 = sub i32 %495, %263
  %497 = sub i32 %496, %264
  %498 = add i32 %497, %269
  %499 = sub i32 %498, %273
  %500 = add i32 %499, %274
  %501 = add i32 %500, %275
  %502 = add i32 %501, %278
  %503 = add i32 %502, %282
  %504 = sub i32 %503, %283
  %505 = sub i32 %504, %284
  %506 = add i32 %505, %285
  %507 = add i32 %506, %286
  %508 = sub i32 %507, %287
  %509 = add i32 %508, %290
  %510 = sub i32 %509, %291
  %511 = add i32 %510, %293
  %512 = sub i32 %511, %298
  %513 = sub i32 %512, %300
  %514 = add i32 %513, %302
  %515 = add i32 %514, %304
  %516 = sub i32 %515, %305
  %517 = sub i32 %516, %309
  %518 = add i32 %517, %6
  %519 = sub i32 %518, %21
  %520 = sub i32 %519, %41
  %521 = add i32 %520, %77
  %522 = sub i32 %521, %83
  %523 = sub i32 %522, %87
  %524 = add i32 %523, %96
  %525 = sub i32 %524, %98
  %526 = sub i32 %525, %109
  %527 = sub i32 %526, %122
  %528 = sub i32 %527, %128
  %529 = add i32 %528, %132
  %530 = sub i32 %529, %141
  %531 = sub i32 %530, %154
  %532 = sub i32 %531, %161
  %533 = sub i32 %532, %175
  %534 = sub i32 %533, %176
  %535 = add i32 %534, %178
  %536 = sub i32 %535, %187
  %537 = sub i32 %536, %190
  %538 = sub i32 %537, %192
  %539 = add i32 %538, %194
  %540 = sub i32 %539, %203
  %541 = sub i32 %540, %207
  %542 = sub i32 %541, %212
  %543 = sub i32 %542, %217
  %544 = sub i32 %543, %226
  %545 = sub i32 %544, %229
  %546 = add i32 %545, %232
  %547 = sub i32 %546, %246
  %548 = add i32 %547, %251
  %549 = add i32 %548, %266
  %550 = sub i32 %549, %268
  %551 = add i32 %550, %277
  %552 = sub i32 %551, %281
  %553 = add i32 %552, %294
  %554 = add i32 %553, %295
  %555 = add i32 %554, %307
  %556 = add i32 %555, %311
  %557 = add i32 %556, %313
  %558 = sub i32 %557, %315
  %559 = add i32 %558, %25
  %560 = add i32 %559, %27
  %561 = sub i32 %560, %210
  %562 = add i32 %561, %353
  %563 = sub i32 %562, %24
  %564 = sub i32 %563, %272
  %565 = add i32 %564, %351
  %566 = add i32 %565, %358
  %567 = add i32 %566, %348
  %568 = add i32 %567, %340
  %569 = icmp eq i32 %18, %568
  %570 = select i1 %569, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %571 = tail call i32 @puts(i8* nonnull dereferenceable(1) %570)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
