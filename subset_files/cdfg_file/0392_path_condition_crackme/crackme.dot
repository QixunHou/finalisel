digraph "DFG for'crackme' function" {
	Node0x18554a0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1855510[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x18555d0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x1855c50[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1855cc0[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x1855d30[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1855da0[shape=record, label="  %9 = or i32 %6, %0"];
	Node0x1855e10[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1855eb0[shape=record, label="  %11 = mul i32 %10, -3"];
	Node0x1855f50[shape=record, label="  %12 = shl i32 %5, 2"];
	Node0x1855fc0[shape=record, label="  %13 = add i32 %4, %7"];
	Node0x1856060[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x18560d0[shape=record, label="  %15 = mul i32 %0, -3"];
	Node0x1856140[shape=record, label="  %16 = sub i32 %15, %5"];
	Node0x18561b0[shape=record, label="  %17 = add i32 %16, %8"];
	Node0x1856220[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0x1856290[shape=record, label="  %19 = add i32 %18, %3"];
	Node0x1856300[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x1856370[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x18563e0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x1856450[shape=record, label="  %23 = icmp eq i32 %3, %22"];
	Node0x17f6268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18568f0[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1856940[shape=record, label="  ret void"];
	Node0x18554a0 -> Node0x1855510;
	Node0x1855510 -> Node0x18555d0;
	Node0x18555d0 -> Node0x1855c50;
	Node0x1855c50 -> Node0x1855cc0;
	Node0x1855cc0 -> Node0x1855d30;
	Node0x1855d30 -> Node0x1855da0;
	Node0x1855da0 -> Node0x1855e10;
	Node0x1855e10 -> Node0x1855eb0;
	Node0x1855eb0 -> Node0x1855f50;
	Node0x1855f50 -> Node0x1855fc0;
	Node0x1855fc0 -> Node0x1856060;
	Node0x1856060 -> Node0x18560d0;
	Node0x18560d0 -> Node0x1856140;
	Node0x1856140 -> Node0x18561b0;
	Node0x18561b0 -> Node0x1856220;
	Node0x1856220 -> Node0x1856290;
	Node0x1856290 -> Node0x1856300;
	Node0x1856300 -> Node0x1856370;
	Node0x1856370 -> Node0x18563e0;
	Node0x18563e0 -> Node0x1856450;
	Node0x1856450 -> Node0x17f6268;
	Node0x17f6268 -> Node0x18568f0;
	Node0x18568f0 -> Node0x1856940;
edge [color=red]
	Node0x1855c50 -> Node0x1855cc0;
	Node0x1855cc0 -> Node0x1855d30;
	Node0x1855c50 -> Node0x1855da0;
	Node0x1855da0 -> Node0x1855e10;
	Node0x1855e10 -> Node0x1855eb0;
	Node0x18555d0 -> Node0x1855f50;
	Node0x1855510 -> Node0x1855fc0;
	Node0x1855cc0 -> Node0x1855fc0;
	Node0x1855fc0 -> Node0x1856060;
	Node0x18560d0 -> Node0x1856140;
	Node0x18555d0 -> Node0x1856140;
	Node0x1856140 -> Node0x18561b0;
	Node0x1855d30 -> Node0x18561b0;
	Node0x18561b0 -> Node0x1856220;
	Node0x1855da0 -> Node0x1856220;
	Node0x1856220 -> Node0x1856290;
	Node0x18554a0 -> Node0x1856290;
	Node0x1856290 -> Node0x1856300;
	Node0x1855eb0 -> Node0x1856300;
	Node0x1856300 -> Node0x1856370;
	Node0x1855f50 -> Node0x1856370;
	Node0x1856370 -> Node0x18563e0;
	Node0x1856060 -> Node0x18563e0;
	Node0x18554a0 -> Node0x1856450;
	Node0x18563e0 -> Node0x1856450;
	Node0x1856450 -> Node0x17f6268;
	Node0x17f6268 -> Node0x18568f0;
}
