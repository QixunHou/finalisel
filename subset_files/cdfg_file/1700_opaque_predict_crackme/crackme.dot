digraph "DFG for'crackme' function" {
	Node0x14c6b80[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x14c6bf0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x14c6cb0[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0x14c6d20[shape=record, label="  %6 = add i32 %5, %1"];
	Node0x14c6d90[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x14c6e00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x14c6e70[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x14c6ee0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x14c6f50[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x14c6ff0[shape=record, label="  %12 = shl i32 %4, 1"];
	Node0x14c7060[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x14c7100[shape=record, label="  %14 = mul i32 %9, -5"];
	Node0x14c71a0[shape=record, label="  %15 = shl i32 %7, 2"];
	Node0x14c7210[shape=record, label="  %16 = add i32 %8, %11"];
	Node0x14c7280[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x14c7320[shape=record, label="  %18 = add i32 %0, 3"];
	Node0x14c7390[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x14c7400[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x14c7470[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x14c74e0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x14c7550[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0x14c75c0[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0x14c7630[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x14c76a0[shape=record, label="  %26 = icmp eq i32 %6, %25"];
	Node0x1467268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x14c7b40[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x14c7b90[shape=record, label="  ret void"];
	Node0x14c6b80 -> Node0x14c6bf0;
	Node0x14c6bf0 -> Node0x14c6cb0;
	Node0x14c6cb0 -> Node0x14c6d20;
	Node0x14c6d20 -> Node0x14c6d90;
	Node0x14c6d90 -> Node0x14c6e00;
	Node0x14c6e00 -> Node0x14c6e70;
	Node0x14c6e70 -> Node0x14c6ee0;
	Node0x14c6ee0 -> Node0x14c6f50;
	Node0x14c6f50 -> Node0x14c6ff0;
	Node0x14c6ff0 -> Node0x14c7060;
	Node0x14c7060 -> Node0x14c7100;
	Node0x14c7100 -> Node0x14c71a0;
	Node0x14c71a0 -> Node0x14c7210;
	Node0x14c7210 -> Node0x14c7280;
	Node0x14c7280 -> Node0x14c7320;
	Node0x14c7320 -> Node0x14c7390;
	Node0x14c7390 -> Node0x14c7400;
	Node0x14c7400 -> Node0x14c7470;
	Node0x14c7470 -> Node0x14c74e0;
	Node0x14c74e0 -> Node0x14c7550;
	Node0x14c7550 -> Node0x14c75c0;
	Node0x14c75c0 -> Node0x14c7630;
	Node0x14c7630 -> Node0x14c76a0;
	Node0x14c76a0 -> Node0x1467268;
	Node0x1467268 -> Node0x14c7b40;
	Node0x14c7b40 -> Node0x14c7b90;
edge [color=red]
	Node0x14c6b80 -> Node0x14c6bf0;
	Node0x14c6bf0 -> Node0x14c6cb0;
	Node0x14c6cb0 -> Node0x14c6d20;
	Node0x14c6b80 -> Node0x14c6e70;
	Node0x14c6e70 -> Node0x14c6ee0;
	Node0x14c6bf0 -> Node0x14c6ff0;
	Node0x14c6ff0 -> Node0x14c7060;
	Node0x14c6e70 -> Node0x14c7100;
	Node0x14c6d90 -> Node0x14c71a0;
	Node0x14c6e00 -> Node0x14c7210;
	Node0x14c6f50 -> Node0x14c7210;
	Node0x14c7210 -> Node0x14c7280;
	Node0x14c7320 -> Node0x14c7390;
	Node0x14c6d90 -> Node0x14c7390;
	Node0x14c7390 -> Node0x14c7400;
	Node0x14c6ee0 -> Node0x14c7400;
	Node0x14c7400 -> Node0x14c7470;
	Node0x14c6f50 -> Node0x14c7470;
	Node0x14c7470 -> Node0x14c74e0;
	Node0x14c7100 -> Node0x14c74e0;
	Node0x14c74e0 -> Node0x14c7550;
	Node0x14c71a0 -> Node0x14c7550;
	Node0x14c7550 -> Node0x14c75c0;
	Node0x14c7060 -> Node0x14c75c0;
	Node0x14c75c0 -> Node0x14c7630;
	Node0x14c7280 -> Node0x14c7630;
	Node0x14c6d20 -> Node0x14c76a0;
	Node0x14c7630 -> Node0x14c76a0;
	Node0x14c76a0 -> Node0x1467268;
	Node0x1467268 -> Node0x14c7b40;
}
