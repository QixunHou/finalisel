digraph "DFG for'crackme' function" {
	Node0x15510f0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1551160[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x15511d0[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1551240[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x15512b0[shape=record, label="  %9 = xor i32 %6, -1"];
	Node0x1551320[shape=record, label="  %10 = add i32 %9, %7"];
	Node0x1551390[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x1551400[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x1551470[shape=record, label="  %13 = and i32 %5, %1"];
	Node0x15514e0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1551580[shape=record, label="  %15 = shl i32 %12, 2"];
	Node0x1551620[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0x1551690[shape=record, label="  %17 = shl i32 %6, 2"];
	Node0x1551700[shape=record, label="  %18 = xor i32 %17, -4"];
	Node0x15517a0[shape=record, label="  %19 = mul i32 %13, -6"];
	Node0x1551810[shape=record, label="  %20 = and i32 %2, %1"];
	Node0x15518b0[shape=record, label="  %21 = mul i32 %20, -5"];
	Node0x1551920[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x1551990[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x1551a00[shape=record, label="  %24 = or i32 %7, %3"];
	Node0x1551aa0[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1551b40[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x1551bb0[shape=record, label="  %27 = shl i32 %3, 1"];
	Node0x1551c50[shape=record, label="  %28 = add i32 %1, -3"];
	Node0x1551cc0[shape=record, label="  %29 = sub i32 %28, %2"];
	Node0x1551d30[shape=record, label="  %30 = add i32 %29, %11"];
	Node0x1551da0[shape=record, label="  %31 = add i32 %30, %12"];
	Node0x1551e10[shape=record, label="  %32 = add i32 %31, %14"];
	Node0x1552090[shape=record, label="  %33 = add i32 %32, %8"];
	Node0x1552100[shape=record, label="  %34 = sub i32 %33, %3"];
	Node0x1552170[shape=record, label="  %35 = add i32 %34, %19"];
	Node0x15521e0[shape=record, label="  %36 = add i32 %35, %21"];
	Node0x1552250[shape=record, label="  %37 = add i32 %36, %23"];
	Node0x15522c0[shape=record, label="  %38 = sub i32 %37, %24"];
	Node0x1552330[shape=record, label="  %39 = sub i32 %38, %16"];
	Node0x15523a0[shape=record, label="  %40 = sub i32 %39, %18"];
	Node0x1552410[shape=record, label="  %41 = sub i32 %40, %26"];
	Node0x1552480[shape=record, label="  %42 = add i32 %41, %27"];
	Node0x15524f0[shape=record, label="  %43 = icmp eq i32 %10, %42"];
	Node0x14f1268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1552990[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x15529e0[shape=record, label="  ret void"];
	Node0x15510f0 -> Node0x1551160;
	Node0x1551160 -> Node0x15511d0;
	Node0x15511d0 -> Node0x1551240;
	Node0x1551240 -> Node0x15512b0;
	Node0x15512b0 -> Node0x1551320;
	Node0x1551320 -> Node0x1551390;
	Node0x1551390 -> Node0x1551400;
	Node0x1551400 -> Node0x1551470;
	Node0x1551470 -> Node0x15514e0;
	Node0x15514e0 -> Node0x1551580;
	Node0x1551580 -> Node0x1551620;
	Node0x1551620 -> Node0x1551690;
	Node0x1551690 -> Node0x1551700;
	Node0x1551700 -> Node0x15517a0;
	Node0x15517a0 -> Node0x1551810;
	Node0x1551810 -> Node0x15518b0;
	Node0x15518b0 -> Node0x1551920;
	Node0x1551920 -> Node0x1551990;
	Node0x1551990 -> Node0x1551a00;
	Node0x1551a00 -> Node0x1551aa0;
	Node0x1551aa0 -> Node0x1551b40;
	Node0x1551b40 -> Node0x1551bb0;
	Node0x1551bb0 -> Node0x1551c50;
	Node0x1551c50 -> Node0x1551cc0;
	Node0x1551cc0 -> Node0x1551d30;
	Node0x1551d30 -> Node0x1551da0;
	Node0x1551da0 -> Node0x1551e10;
	Node0x1551e10 -> Node0x1552090;
	Node0x1552090 -> Node0x1552100;
	Node0x1552100 -> Node0x1552170;
	Node0x1552170 -> Node0x15521e0;
	Node0x15521e0 -> Node0x1552250;
	Node0x1552250 -> Node0x15522c0;
	Node0x15522c0 -> Node0x1552330;
	Node0x1552330 -> Node0x15523a0;
	Node0x15523a0 -> Node0x1552410;
	Node0x1552410 -> Node0x1552480;
	Node0x1552480 -> Node0x15524f0;
	Node0x15524f0 -> Node0x14f1268;
	Node0x14f1268 -> Node0x1552990;
	Node0x1552990 -> Node0x15529e0;
edge [color=red]
	Node0x15510f0 -> Node0x1551160;
	Node0x1551160 -> Node0x15512b0;
	Node0x15512b0 -> Node0x1551320;
	Node0x15511d0 -> Node0x1551320;
	Node0x15510f0 -> Node0x1551470;
	Node0x1551470 -> Node0x15514e0;
	Node0x1551400 -> Node0x1551580;
	Node0x1551580 -> Node0x1551620;
	Node0x1551160 -> Node0x1551690;
	Node0x1551690 -> Node0x1551700;
	Node0x1551470 -> Node0x15517a0;
	Node0x1551810 -> Node0x15518b0;
	Node0x1551920 -> Node0x1551990;
	Node0x15511d0 -> Node0x1551a00;
	Node0x1551a00 -> Node0x1551aa0;
	Node0x1551aa0 -> Node0x1551b40;
	Node0x1551c50 -> Node0x1551cc0;
	Node0x1551cc0 -> Node0x1551d30;
	Node0x1551390 -> Node0x1551d30;
	Node0x1551d30 -> Node0x1551da0;
	Node0x1551400 -> Node0x1551da0;
	Node0x1551da0 -> Node0x1551e10;
	Node0x15514e0 -> Node0x1551e10;
	Node0x1551e10 -> Node0x1552090;
	Node0x1551240 -> Node0x1552090;
	Node0x1552090 -> Node0x1552100;
	Node0x1552100 -> Node0x1552170;
	Node0x15517a0 -> Node0x1552170;
	Node0x1552170 -> Node0x15521e0;
	Node0x15518b0 -> Node0x15521e0;
	Node0x15521e0 -> Node0x1552250;
	Node0x1551990 -> Node0x1552250;
	Node0x1552250 -> Node0x15522c0;
	Node0x1551a00 -> Node0x15522c0;
	Node0x15522c0 -> Node0x1552330;
	Node0x1551620 -> Node0x1552330;
	Node0x1552330 -> Node0x15523a0;
	Node0x1551700 -> Node0x15523a0;
	Node0x15523a0 -> Node0x1552410;
	Node0x1551b40 -> Node0x1552410;
	Node0x1552410 -> Node0x1552480;
	Node0x1551bb0 -> Node0x1552480;
	Node0x1551320 -> Node0x15524f0;
	Node0x1552480 -> Node0x15524f0;
	Node0x15524f0 -> Node0x14f1268;
	Node0x14f1268 -> Node0x1552990;
}
