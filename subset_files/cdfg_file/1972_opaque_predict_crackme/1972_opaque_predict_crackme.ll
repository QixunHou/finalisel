; ModuleID = '../.././c_source_file/1972_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1972_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = mul i32 %4, 5
  %8 = add i32 %7, %6
  %9 = and i32 %2, %0
  %10 = or i32 %9, %1
  %11 = shl i32 %10, 1
  %12 = sub i32 %8, %11
  %13 = xor i32 %4, %3
  %14 = add i32 %13, 1
  %15 = xor i32 %4, -1
  %16 = or i32 %15, %3
  %17 = or i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %18, -2
  %20 = shl i32 %16, 3
  %21 = xor i32 %20, -8
  %22 = and i32 %4, %3
  %23 = xor i32 %1, -1
  %24 = and i32 %23, %2
  %25 = and i32 %24, %0
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %25, %28
  %30 = xor i32 %0, -1
  %31 = and i32 %24, %30
  %32 = or i32 %23, %2
  %33 = and i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, %34
  %36 = and i32 %1, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %37, %2
  %39 = and i32 %23, %0
  %40 = xor i32 %2, -1
  %41 = and i32 %40, %1
  %42 = xor i32 %41, -1
  %43 = xor i32 %39, %42
  %44 = or i32 %23, %0
  %45 = xor i32 %42, %0
  %46 = xor i32 %44, -1
  %47 = xor i32 %46, %2
  %48 = shl i32 %47, 1
  %49 = or i32 %40, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %0
  %52 = xor i32 %1, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %40, %53
  %55 = or i32 %40, %0
  %56 = and i32 %55, %53
  %57 = or i32 %42, %0
  %58 = xor i32 %55, -1
  %59 = shl i32 %58, 1
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = or i32 %52, %61
  %63 = xor i32 %2, %0
  %64 = and i32 %63, %1
  %65 = and i32 %60, %1
  %66 = xor i32 %49, %0
  %67 = or i32 %1, %0
  %68 = and i32 %67, %2
  %69 = and i32 %32, %30
  %70 = or i32 %25, %69
  %71 = or i32 %36, %58
  %72 = or i32 %46, %2
  %73 = xor i32 %58, %1
  %74 = xor i32 %63, -1
  %75 = and i32 %52, %74
  %76 = add i32 %49, 1
  %77 = or i32 %63, %23
  %78 = or i32 %74, %46
  %79 = and i32 %60, %23
  %80 = shl i32 %79, 1
  %81 = or i32 %63, %39
  %82 = and i32 %2, %1
  %83 = and i32 %82, %0
  %84 = or i32 %2, %1
  %85 = and i32 %84, %30
  %86 = xor i32 %85, 2147483647
  %87 = xor i32 %86, %83
  %88 = shl i32 %87, 1
  %89 = or i32 %39, %74
  %90 = xor i32 %26, -1
  %91 = and i32 %67, %90
  %92 = and i32 %63, %44
  %93 = shl i32 %92, 1
  %94 = or i32 %31, %33
  %95 = xor i32 %84, -1
  %96 = or i32 %36, %95
  %97 = add i32 %84, 1
  %98 = and i32 %82, %30
  %99 = and i32 %84, %0
  %100 = or i32 %98, %99
  %101 = and i32 %40, %0
  %102 = or i32 %101, %82
  %103 = xor i32 %60, %1
  %104 = add i32 %52, 1
  %105 = or i32 %82, %30
  %106 = xor i32 %90, %0
  %107 = xor i32 %9, -1
  %108 = or i32 %53, %2
  %109 = xor i32 %101, -1
  %110 = and i32 %109, %1
  %111 = or i32 %41, %0
  %112 = shl i32 %111, 1
  %113 = or i32 %9, %52
  %114 = and i32 %63, %37
  %115 = shl i32 %114, 1
  %116 = or i32 %52, %74
  %117 = xor i32 %109, %1
  %118 = xor i32 %61, %1
  %119 = xor i32 %9, %44
  %120 = or i32 %26, %30
  %121 = xor i32 %31, %120
  %122 = and i32 %44, %90
  %123 = shl i32 %122, 1
  %124 = or i32 %90, %0
  %125 = or i32 %41, %39
  %126 = and i32 %26, %0
  %127 = xor i32 %126, 2147483647
  %128 = xor i32 %127, %98
  %129 = or i32 %9, %41
  %130 = and i32 %107, %23
  %131 = or i32 %63, %46
  %132 = or i32 %36, %61
  %133 = xor i32 %9, %67
  %134 = or i32 %74, %1
  %135 = xor i32 %55, %1
  %136 = xor i32 %39, -1
  %137 = and i32 %63, %136
  %138 = xor i32 %84, %0
  %139 = xor i32 %138, -1
  %140 = xor i32 %83, %139
  %141 = xor i32 %82, -1
  %142 = or i32 %141, %30
  %143 = or i32 %61, %23
  %144 = shl i32 %143, 1
  %145 = or i32 %26, %39
  %146 = and i32 %42, %30
  %147 = and i32 %52, %109
  %148 = xor i32 %120, -1
  %149 = or i32 %31, %148
  %150 = and i32 %44, %74
  %151 = xor i32 %83, %124
  %152 = xor i32 %67, -1
  %153 = or i32 %74, %152
  %154 = and i32 %90, %0
  %155 = xor i32 %141, %0
  %156 = or i32 %25, %27
  %157 = xor i32 %69, 2147483647
  %158 = xor i32 %157, %25
  %159 = and i32 %26, %136
  %160 = or i32 %36, %40
  %161 = shl i32 %160, 1
  %162 = and i32 %109, %23
  %163 = shl i32 %162, 1
  %164 = or i32 %101, %1
  %165 = or i32 %36, %50
  %166 = or i32 %83, %28
  %167 = or i32 %26, %0
  %168 = xor i32 %167, 2147483647
  %169 = or i32 %168, %25
  %170 = shl i32 %169, 1
  %171 = or i32 %84, %30
  %172 = and i32 %26, %37
  %173 = shl i32 %172, 1
  %174 = or i32 %26, %46
  %175 = and i32 %53, %2
  %176 = or i32 %101, %53
  %177 = and i32 %141, %30
  %178 = xor i32 %49, %36
  %179 = or i32 %26, %152
  %180 = and i32 %74, %1
  %181 = xor i32 %25, %167
  %182 = and i32 %40, %53
  %183 = shl i32 %182, 1
  %184 = or i32 %74, %53
  %185 = and i32 %74, %53
  %186 = and i32 %136, %2
  %187 = xor i32 %101, %1
  %188 = xor i32 %136, %2
  %189 = or i32 %141, %0
  %190 = or i32 %152, %2
  %191 = shl i32 %82, 2
  %192 = or i32 %52, %40
  %193 = or i32 %101, %52
  %194 = shl i32 %193, 1
  %195 = and i32 %52, %107
  %196 = and i32 %63, %52
  %197 = xor i32 %107, %1
  %198 = shl i32 %197, 1
  %199 = or i32 %40, %46
  %200 = xor i32 %41, %0
  %201 = and i32 %90, %37
  %202 = shl i32 %201, 1
  %203 = and i32 %90, %30
  %204 = or i32 %36, %2
  %205 = or i32 %58, %23
  %206 = or i32 %50, %30
  %207 = and i32 %74, %37
  %208 = or i32 %83, %85
  %209 = xor i32 %32, %30
  %210 = xor i32 %209, %25
  %211 = xor i32 %39, %141
  %212 = and i32 %60, %52
  %213 = shl i32 %212, 1
  %214 = xor i32 %50, %0
  %215 = shl i32 %214, 1
  %216 = or i32 %39, %40
  %217 = or i32 %63, %53
  %218 = or i32 %39, %90
  %219 = xor i32 %60, %36
  %220 = shl i32 %49, 1
  %221 = and i32 %26, %44
  %222 = xor i32 %99, -1
  %223 = xor i32 %98, %222
  %224 = and i32 %107, %1
  %225 = shl i32 %224, 1
  %226 = or i32 %36, %74
  %227 = and i32 %26, %67
  %228 = and i32 %40, %136
  %229 = and i32 %90, %136
  %230 = xor i32 %83, %27
  %231 = shl i32 %230, 1
  %232 = and i32 %52, %2
  %233 = or i32 %90, %46
  %234 = or i32 %63, %36
  %235 = add i32 %63, 1
  %236 = or i32 %84, %0
  %237 = and i32 %49, %0
  %238 = xor i32 %67, %2
  %239 = or i32 %95, %0
  %240 = or i32 %61, %53
  %241 = or i32 %63, %152
  %242 = or i32 %26, %36
  %243 = or i32 %101, %50
  %244 = and i32 %42, %0
  %245 = and i32 %40, %37
  %246 = or i32 %49, %30
  %247 = or i32 %52, %2
  %248 = xor i32 %36, %2
  %249 = or i32 %82, %0
  %250 = or i32 %58, %1
  %251 = and i32 %55, %23
  %252 = and i32 %74, %23
  %253 = xor i32 %95, %0
  %254 = and i32 %107, %53
  %255 = or i32 %41, %30
  %256 = or i32 %83, %138
  %257 = shl i32 %141, 1
  %258 = and i32 %95, %30
  %259 = and i32 %41, %30
  %260 = and i32 %95, %0
  %261 = mul i32 %260, 20
  %262 = and i32 %41, %0
  %263 = and i32 %50, %30
  %264 = mul i32 %263, 9
  %265 = mul i32 %83, -6
  %266 = add i32 %204, %36
  %267 = add i32 %266, %258
  %268 = add i32 %267, %252
  %269 = add i32 %268, %226
  %270 = add i32 %269, %205
  %271 = add i32 %270, %196
  %272 = add i32 %271, %147
  %273 = add i32 %272, %132
  %274 = add i32 %273, %89
  %275 = add i32 %274, %29
  %276 = add i32 %275, %16
  %277 = add i32 %276, %14
  %278 = add i32 %277, %128
  %279 = add i32 %278, %158
  %280 = shl i32 %279, 1
  %281 = sub i32 %186, %98
  %282 = add i32 %281, %171
  %283 = sub i32 %282, %105
  %284 = sub i32 %283, %13
  %285 = sub i32 %284, %156
  %286 = mul i32 %285, 5
  %287 = sub i32 %37, %259
  %288 = add i32 %287, %137
  %289 = add i32 %288, %22
  %290 = mul i32 %289, 3
  %291 = shl i32 %207, 2
  %292 = add i32 %291, -4
  %293 = sub i32 %30, %0
  %294 = add i32 %293, %1
  %295 = add i32 %294, %44
  %296 = add i32 %295, %104
  %297 = add i32 %296, %40
  %298 = add i32 %297, %136
  %299 = sub i32 %298, %3
  %300 = sub i32 %299, %38
  %301 = add i32 %300, %54
  %302 = sub i32 %301, %63
  %303 = add i32 %302, %68
  %304 = add i32 %303, %72
  %305 = add i32 %304, %76
  %306 = add i32 %305, %97
  %307 = add i32 %306, %41
  %308 = add i32 %307, %55
  %309 = sub i32 %308, %108
  %310 = add i32 %309, %175
  %311 = sub i32 %310, %186
  %312 = sub i32 %311, %188
  %313 = sub i32 %312, %84
  %314 = add i32 %313, %190
  %315 = add i32 %314, %192
  %316 = add i32 %315, %199
  %317 = add i32 %316, %216
  %318 = sub i32 %317, %228
  %319 = sub i32 %318, %232
  %320 = add i32 %319, %235
  %321 = sub i32 %320, %238
  %322 = add i32 %321, %245
  %323 = add i32 %322, %247
  %324 = add i32 %323, %248
  %325 = add i32 %324, %15
  %326 = add i32 %325, %43
  %327 = sub i32 %326, %45
  %328 = sub i32 %327, %48
  %329 = sub i32 %328, %51
  %330 = sub i32 %329, %56
  %331 = sub i32 %330, %57
  %332 = sub i32 %331, %59
  %333 = sub i32 %332, %62
  %334 = add i32 %333, %64
  %335 = add i32 %334, %65
  %336 = sub i32 %335, %66
  %337 = add i32 %336, %71
  %338 = add i32 %337, %73
  %339 = sub i32 %338, %75
  %340 = add i32 %339, %77
  %341 = add i32 %340, %78
  %342 = sub i32 %341, %81
  %343 = add i32 %342, %27
  %344 = sub i32 %343, %91
  %345 = add i32 %344, %96
  %346 = sub i32 %345, %102
  %347 = add i32 %346, %103
  %348 = add i32 %347, %106
  %349 = sub i32 %348, %110
  %350 = add i32 %349, %113
  %351 = add i32 %350, %116
  %352 = add i32 %351, %85
  %353 = sub i32 %352, %117
  %354 = add i32 %353, %118
  %355 = sub i32 %354, %119
  %356 = add i32 %355, %124
  %357 = add i32 %356, %125
  %358 = sub i32 %357, %129
  %359 = add i32 %358, %130
  %360 = sub i32 %359, %131
  %361 = add i32 %360, %133
  %362 = sub i32 %361, %134
  %363 = sub i32 %362, %135
  %364 = add i32 %363, %142
  %365 = add i32 %364, %145
  %366 = sub i32 %365, %146
  %367 = add i32 %366, %150
  %368 = add i32 %367, %153
  %369 = add i32 %368, %154
  %370 = add i32 %369, %155
  %371 = sub i32 %370, %159
  %372 = sub i32 %371, %161
  %373 = sub i32 %372, %164
  %374 = add i32 %373, %165
  %375 = sub i32 %374, %174
  %376 = sub i32 %375, %176
  %377 = add i32 %376, %177
  %378 = sub i32 %377, %178
  %379 = add i32 %378, %167
  %380 = sub i32 %379, %179
  %381 = sub i32 %380, %180
  %382 = sub i32 %381, %183
  %383 = sub i32 %382, %184
  %384 = add i32 %383, %185
  %385 = sub i32 %384, %99
  %386 = sub i32 %385, %187
  %387 = sub i32 %386, %189
  %388 = sub i32 %387, %191
  %389 = add i32 %388, %120
  %390 = sub i32 %389, %195
  %391 = add i32 %390, %200
  %392 = sub i32 %391, %203
  %393 = add i32 %392, %206
  %394 = sub i32 %393, %211
  %395 = add i32 %394, %217
  %396 = sub i32 %395, %218
  %397 = add i32 %396, %219
  %398 = sub i32 %397, %220
  %399 = add i32 %398, %221
  %400 = add i32 %399, %138
  %401 = sub i32 %400, %227
  %402 = sub i32 %401, %229
  %403 = add i32 %402, %233
  %404 = sub i32 %403, %234
  %405 = sub i32 %404, %236
  %406 = add i32 %405, %237
  %407 = sub i32 %406, %239
  %408 = sub i32 %407, %240
  %409 = add i32 %408, %241
  %410 = add i32 %409, %242
  %411 = sub i32 %410, %243
  %412 = sub i32 %411, %244
  %413 = sub i32 %412, %246
  %414 = sub i32 %413, %249
  %415 = sub i32 %414, %250
  %416 = sub i32 %415, %251
  %417 = add i32 %416, %253
  %418 = sub i32 %417, %254
  %419 = sub i32 %418, %255
  %420 = sub i32 %419, %257
  %421 = add i32 %420, %262
  %422 = add i32 %421, %17
  %423 = add i32 %422, %35
  %424 = sub i32 %423, %70
  %425 = sub i32 %424, %80
  %426 = sub i32 %425, %93
  %427 = add i32 %426, %94
  %428 = add i32 %427, %100
  %429 = sub i32 %428, %112
  %430 = sub i32 %429, %115
  %431 = sub i32 %430, %121
  %432 = sub i32 %431, %123
  %433 = sub i32 %432, %140
  %434 = sub i32 %433, %144
  %435 = sub i32 %434, %149
  %436 = sub i32 %435, %151
  %437 = sub i32 %436, %163
  %438 = add i32 %437, %166
  %439 = sub i32 %438, %173
  %440 = add i32 %439, %181
  %441 = sub i32 %440, %194
  %442 = sub i32 %441, %198
  %443 = sub i32 %442, %202
  %444 = sub i32 %443, %208
  %445 = add i32 %444, %210
  %446 = sub i32 %445, %213
  %447 = sub i32 %446, %215
  %448 = sub i32 %447, %223
  %449 = sub i32 %448, %225
  %450 = add i32 %449, %256
  %451 = add i32 %450, %261
  %452 = add i32 %451, %264
  %453 = add i32 %452, %265
  %454 = sub i32 %453, %231
  %455 = add i32 %454, %292
  %456 = sub i32 %455, %19
  %457 = add i32 %456, %21
  %458 = sub i32 %457, %88
  %459 = sub i32 %458, %170
  %460 = add i32 %459, %290
  %461 = add i32 %460, %286
  %462 = add i32 %461, %280
  %463 = icmp eq i32 %12, %462
  %464 = select i1 %463, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %465 = tail call i32 @puts(i8* nonnull dereferenceable(1) %464)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
