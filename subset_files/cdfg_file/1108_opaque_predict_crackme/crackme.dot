digraph "DFG for'crackme' function" {
	Node0x6c5b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x6c5bc0[shape=record, label="  %4 = add i32 %1, 1"];
	Node0x6c5c80[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x6c5cf0[shape=record, label="  %6 = sub i32 %4, %5"];
	Node0x6c5d60[shape=record, label="  %7 = mul i32 %1, -2"];
	Node0x6c5dd0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x6c5e40[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x6c5eb0[shape=record, label="  %10 = sub i32 %7, %8"];
	Node0x6c5f20[shape=record, label="  %11 = add i32 %10, %9"];
	Node0x6c5f90[shape=record, label="  %12 = or i32 %3, %0"];
	Node0x6c6000[shape=record, label="  %13 = add i32 %11, %12"];
	Node0x6c60a0[shape=record, label="  %14 = mul i32 %8, 5"];
	Node0x6c6110[shape=record, label="  %15 = add i32 %13, %14"];
	Node0x6c6180[shape=record, label="  %16 = shl i32 %5, 1"];
	Node0x6c61f0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x6c6260[shape=record, label="  %18 = xor i32 %12, -1"];
	Node0x6c6300[shape=record, label="  %19 = mul i32 %18, -3"];
	Node0x6c63a0[shape=record, label="  %20 = shl i32 %9, 3"];
	Node0x6c6410[shape=record, label="  %21 = add i32 %15, %19"];
	Node0x6c6480[shape=record, label="  %22 = sub i32 %21, %20"];
	Node0x6c64f0[shape=record, label="  %23 = sub i32 %22, %17"];
	Node0x6c6560[shape=record, label="  %24 = icmp eq i32 %6, %23"];
	Node0x666268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x6c6a00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x6c6a50[shape=record, label="  ret void"];
	Node0x6c5b20 -> Node0x6c5bc0;
	Node0x6c5bc0 -> Node0x6c5c80;
	Node0x6c5c80 -> Node0x6c5cf0;
	Node0x6c5cf0 -> Node0x6c5d60;
	Node0x6c5d60 -> Node0x6c5dd0;
	Node0x6c5dd0 -> Node0x6c5e40;
	Node0x6c5e40 -> Node0x6c5eb0;
	Node0x6c5eb0 -> Node0x6c5f20;
	Node0x6c5f20 -> Node0x6c5f90;
	Node0x6c5f90 -> Node0x6c6000;
	Node0x6c6000 -> Node0x6c60a0;
	Node0x6c60a0 -> Node0x6c6110;
	Node0x6c6110 -> Node0x6c6180;
	Node0x6c6180 -> Node0x6c61f0;
	Node0x6c61f0 -> Node0x6c6260;
	Node0x6c6260 -> Node0x6c6300;
	Node0x6c6300 -> Node0x6c63a0;
	Node0x6c63a0 -> Node0x6c6410;
	Node0x6c6410 -> Node0x6c6480;
	Node0x6c6480 -> Node0x6c64f0;
	Node0x6c64f0 -> Node0x6c6560;
	Node0x6c6560 -> Node0x666268;
	Node0x666268 -> Node0x6c6a00;
	Node0x6c6a00 -> Node0x6c6a50;
edge [color=red]
	Node0x6c5bc0 -> Node0x6c5cf0;
	Node0x6c5c80 -> Node0x6c5cf0;
	Node0x6c5b20 -> Node0x6c5e40;
	Node0x6c5d60 -> Node0x6c5eb0;
	Node0x6c5dd0 -> Node0x6c5eb0;
	Node0x6c5eb0 -> Node0x6c5f20;
	Node0x6c5e40 -> Node0x6c5f20;
	Node0x6c5b20 -> Node0x6c5f90;
	Node0x6c5f20 -> Node0x6c6000;
	Node0x6c5f90 -> Node0x6c6000;
	Node0x6c5dd0 -> Node0x6c60a0;
	Node0x6c6000 -> Node0x6c6110;
	Node0x6c60a0 -> Node0x6c6110;
	Node0x6c5c80 -> Node0x6c6180;
	Node0x6c6180 -> Node0x6c61f0;
	Node0x6c5f90 -> Node0x6c6260;
	Node0x6c6260 -> Node0x6c6300;
	Node0x6c5e40 -> Node0x6c63a0;
	Node0x6c6110 -> Node0x6c6410;
	Node0x6c6300 -> Node0x6c6410;
	Node0x6c6410 -> Node0x6c6480;
	Node0x6c63a0 -> Node0x6c6480;
	Node0x6c6480 -> Node0x6c64f0;
	Node0x6c61f0 -> Node0x6c64f0;
	Node0x6c5cf0 -> Node0x6c6560;
	Node0x6c64f0 -> Node0x6c6560;
	Node0x6c6560 -> Node0x666268;
	Node0x666268 -> Node0x6c6a00;
}
