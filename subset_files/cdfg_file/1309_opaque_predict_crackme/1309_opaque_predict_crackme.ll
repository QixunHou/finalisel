; ModuleID = '../.././c_source_file/1309_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1309_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %2, %0
  %10 = and i32 %9, %8
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %0
  %13 = or i32 %11, %1
  %14 = xor i32 %13, -1
  %15 = or i32 %12, %14
  %16 = mul i32 %15, -5
  %17 = sub i32 %16, %10
  %18 = xor i32 %4, -1
  %19 = xor i32 %5, -1
  %20 = or i32 %19, %3
  %21 = or i32 %20, %18
  %22 = add i32 %17, %21
  %23 = or i32 %11, %0
  %24 = and i32 %23, %7
  %25 = and i32 %2, %1
  %26 = or i32 %25, %0
  %27 = xor i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %0
  %30 = or i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %28, %31
  %33 = and i32 %1, %0
  %34 = xor i32 %13, %33
  %35 = and i32 %7, %0
  %36 = or i32 %9, %35
  %37 = and i32 %2, %0
  %38 = or i32 %2, %1
  %39 = xor i32 %37, %38
  %40 = or i32 %33, %14
  %41 = shl i32 %40, 1
  %42 = xor i32 %0, -1
  %43 = and i32 %27, %42
  %44 = xor i32 %8, -1
  %45 = or i32 %11, %44
  %46 = and i32 %11, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %37, %47
  %49 = shl i32 %48, 1
  %50 = xor i32 %25, 2147483647
  %51 = xor i32 %50, %12
  %52 = xor i32 %1, %0
  %53 = or i32 %37, %52
  %54 = xor i32 %53, -1
  %55 = or i32 %35, %2
  %56 = or i32 %38, %42
  %57 = xor i32 %37, %1
  %58 = xor i32 %36, -1
  %59 = and i32 %25, %0
  %60 = xor i32 %27, %42
  %61 = or i32 %59, %60
  %62 = or i32 %47, %0
  %63 = xor i32 %38, -1
  %64 = or i32 %33, %63
  %65 = shl i32 %64, 1
  %66 = xor i32 %33, %11
  %67 = and i32 %7, %42
  %68 = and i32 %67, %2
  %69 = and i32 %28, %0
  %70 = or i32 %68, %69
  %71 = or i32 %12, %7
  %72 = xor i32 %25, %0
  %73 = and i32 %63, %42
  %74 = shl i32 %73, 1
  %75 = and i32 %46, %42
  %76 = and i32 %63, %0
  %77 = and i32 %46, %0
  %78 = mul i32 %77, -14
  %79 = and i32 %14, %42
  %80 = shl i32 %79, 3
  %81 = and i32 %25, %42
  %82 = and i32 %14, %0
  %83 = mul i32 %82, -17
  %84 = or i32 %20, %4
  %85 = or i32 %4, %3
  %86 = xor i32 %85, -1
  %87 = xor i32 %86, %5
  %88 = xor i32 %4, %3
  %89 = xor i32 %88, -1
  %90 = and i32 %89, %5
  %91 = xor i32 %3, -1
  %92 = and i32 %91, %5
  %93 = and i32 %92, %4
  %94 = or i32 %91, %5
  %95 = xor i32 %94, %4
  %96 = or i32 %93, %95
  %97 = and i32 %4, %3
  %98 = or i32 %5, %3
  %99 = xor i32 %98, %97
  %100 = or i32 %19, %4
  %101 = and i32 %100, %89
  %102 = add i32 %85, 1
  %103 = and i32 %5, %4
  %104 = or i32 %103, %3
  %105 = and i32 %92, %18
  %106 = xor i32 %5, %3
  %107 = or i32 %106, %18
  %108 = xor i32 %105, %107
  %109 = and i32 %91, %4
  %110 = and i32 %19, %3
  %111 = or i32 %110, %109
  %112 = and i32 %19, %4
  %113 = xor i32 %112, -1
  %114 = and i32 %113, %3
  %115 = add i32 %112, 1
  %116 = or i32 %91, %4
  %117 = xor i32 %116, -1
  %118 = xor i32 %106, -1
  %119 = or i32 %118, %117
  %120 = xor i32 %100, -1
  %121 = or i32 %120, %3
  %122 = shl i32 %121, 1
  %123 = and i32 %5, %3
  %124 = and i32 %123, %4
  %125 = xor i32 %106, %4
  %126 = xor i32 %125, -1
  %127 = or i32 %124, %126
  %128 = xor i32 %103, %85
  %129 = xor i32 %5, %4
  %130 = xor i32 %129, -1
  %131 = and i32 %130, %91
  %132 = xor i32 %98, -1
  %133 = add i32 %98, 1
  %134 = or i32 %88, %130
  %135 = and i32 %118, %18
  %136 = xor i32 %113, %3
  %137 = or i32 %5, %4
  %138 = and i32 %137, %3
  %139 = xor i32 %100, %3
  %140 = or i32 %129, %109
  %141 = xor i32 %109, %5
  %142 = xor i32 %141, 2147483647
  %143 = add i32 %88, 1
  %144 = or i32 %132, %4
  %145 = xor i32 %110, -1
  %146 = or i32 %145, %18
  %147 = xor i32 %137, -1
  %148 = or i32 %97, %147
  %149 = xor i32 %97, %5
  %150 = add i32 %129, 1
  %151 = xor i32 %20, -1
  %152 = or i32 %106, %97
  %153 = xor i32 %97, -1
  %154 = xor i32 %153, %5
  %155 = shl i32 %110, 1
  %156 = or i32 %129, %117
  %157 = xor i32 %132, %4
  %158 = or i32 %130, %86
  %159 = and i32 %130, %153
  %160 = and i32 %98, %4
  %161 = shl i32 %160, 1
  %162 = and i32 %106, %4
  %163 = xor i32 %93, %126
  %164 = shl i32 %163, 1
  %165 = and i32 %85, %19
  %166 = or i32 %19, %89
  %167 = and i32 %130, %3
  %168 = or i32 %97, %132
  %169 = or i32 %112, %151
  %170 = xor i32 %103, -1
  %171 = and i32 %170, %3
  %172 = or i32 %129, %3
  %173 = and i32 %94, %18
  %174 = xor i32 %173, 2147483647
  %175 = xor i32 %174, %93
  %176 = or i32 %93, %173
  %177 = and i32 %145, %18
  %178 = shl i32 %177, 1
  %179 = and i32 %106, %85
  %180 = and i32 %137, %91
  %181 = or i32 %97, %151
  %182 = or i32 %112, %91
  %183 = shl i32 %141, 1
  %184 = xor i32 %151, %4
  %185 = xor i32 %20, %4
  %186 = and i32 %129, %89
  %187 = and i32 %88, %113
  %188 = xor i32 %103, %145
  %189 = and i32 %88, %130
  %190 = and i32 %100, %3
  %191 = and i32 %19, %153
  %192 = xor i32 %145, %4
  %193 = shl i32 %192, 1
  %194 = or i32 %19, %117
  %195 = or i32 %98, %18
  %196 = and i32 %88, %19
  %197 = or i32 %123, %109
  %198 = or i32 %117, %5
  %199 = or i32 %123, %4
  %200 = and i32 %106, %153
  %201 = xor i32 %103, %116
  %202 = and i32 %170, %89
  %203 = shl i32 %202, 1
  %204 = xor i32 %98, %4
  %205 = or i32 %124, %204
  %206 = and i32 %118, %4
  %207 = and i32 %88, %5
  %208 = and i32 %116, %118
  %209 = xor i32 %116, %5
  %210 = and i32 %116, %19
  %211 = or i32 %86, %5
  %212 = xor i32 %124, %125
  %213 = shl i32 %212, 2
  %214 = or i32 %129, %88
  %215 = or i32 %19, %86
  %216 = or i32 %112, %3
  %217 = and i32 %170, %91
  %218 = xor i32 %137, %3
  %219 = shl i32 %218, 1
  %220 = and i32 %129, %88
  %221 = xor i32 %123, %113
  %222 = or i32 %106, %4
  %223 = and i32 %129, %153
  %224 = shl i32 %223, 1
  %225 = or i32 %147, %91
  %226 = xor i32 %204, -1
  %227 = xor i32 %124, %226
  %228 = xor i32 %170, %3
  %229 = and i32 %19, %89
  %230 = or i32 %97, %19
  %231 = and i32 %113, %89
  %232 = and i32 %20, %18
  %233 = or i32 %145, %4
  %234 = and i32 %123, %18
  %235 = xor i32 %160, -1
  %236 = xor i32 %234, %235
  %237 = xor i32 %107, -1
  %238 = or i32 %105, %237
  %239 = xor i32 %120, %3
  %240 = or i32 %103, %86
  %241 = add i32 %106, 1
  %242 = or i32 %129, %89
  %243 = or i32 %97, %118
  %244 = and i32 %88, %170
  %245 = xor i32 %162, 2147483647
  %246 = xor i32 %245, %234
  %247 = shl i32 %246, 1
  %248 = or i32 %88, %19
  %249 = shl i32 %248, 1
  %250 = or i32 %103, %132
  %251 = xor i32 %85, %5
  %252 = or i32 %103, %117
  %253 = and i32 %132, %18
  %254 = and i32 %110, %18
  %255 = and i32 %132, %4
  %256 = mul i32 %255, -9
  %257 = and i32 %110, %4
  %258 = mul i32 %257, -19
  %259 = and i32 %151, %18
  %260 = and i32 %151, %4
  %261 = shl i32 %260, 4
  %262 = add i32 %72, %14
  %263 = add i32 %262, %36
  %264 = add i32 %263, %116
  %265 = add i32 %264, %19
  %266 = add i32 %265, %97
  %267 = add i32 %266, %109
  %268 = add i32 %267, %51
  %269 = add i32 %268, %166
  %270 = add i32 %269, %149
  %271 = add i32 %270, %239
  %272 = add i32 %271, %225
  %273 = add i32 %272, %217
  %274 = add i32 %273, %171
  %275 = add i32 %274, %142
  %276 = add i32 %275, %138
  %277 = add i32 %276, %119
  %278 = add i32 %277, %84
  %279 = add i32 %278, %176
  %280 = add i32 %279, %175
  %281 = shl i32 %280, 1
  %282 = sub i32 %241, %76
  %283 = sub i32 %282, %254
  %284 = add i32 %283, %259
  %285 = add i32 %284, %253
  %286 = add i32 %285, %250
  %287 = mul i32 %286, 5
  %288 = add i32 %75, %3
  %289 = add i32 %288, %131
  %290 = sub i32 %169, %289
  %291 = mul i32 %290, 3
  %292 = add i32 %179, %59
  %293 = shl i32 %292, 2
  %294 = sub i32 %234, %81
  %295 = mul i32 %294, 6
  %296 = add i32 %38, %45
  %297 = sub i32 %296, %55
  %298 = sub i32 %297, %12
  %299 = sub i32 %298, %66
  %300 = add i32 %299, %26
  %301 = add i32 %300, %24
  %302 = add i32 %301, %29
  %303 = sub i32 %302, %32
  %304 = sub i32 %303, %34
  %305 = add i32 %304, %39
  %306 = sub i32 %305, %43
  %307 = add i32 %306, %54
  %308 = sub i32 %307, %56
  %309 = add i32 %308, %57
  %310 = add i32 %309, %58
  %311 = add i32 %310, %62
  %312 = add i32 %311, %71
  %313 = sub i32 %312, %41
  %314 = sub i32 %313, %49
  %315 = add i32 %314, %61
  %316 = sub i32 %315, %65
  %317 = sub i32 %316, %70
  %318 = sub i32 %317, %74
  %319 = add i32 %318, %78
  %320 = sub i32 %319, %80
  %321 = add i32 %320, %83
  %322 = add i32 %321, %5
  %323 = add i32 %322, %102
  %324 = add i32 %323, %143
  %325 = sub i32 %324, %87
  %326 = sub i32 %325, %90
  %327 = add i32 %326, %115
  %328 = add i32 %327, %112
  %329 = add i32 %328, %133
  %330 = add i32 %329, %150
  %331 = add i32 %330, %151
  %332 = add i32 %331, %154
  %333 = add i32 %332, %165
  %334 = add i32 %333, %123
  %335 = add i32 %334, %129
  %336 = sub i32 %335, %191
  %337 = add i32 %336, %194
  %338 = add i32 %337, %196
  %339 = sub i32 %338, %198
  %340 = add i32 %339, %207
  %341 = sub i32 %340, %209
  %342 = add i32 %341, %210
  %343 = add i32 %342, %211
  %344 = sub i32 %343, %215
  %345 = sub i32 %344, %229
  %346 = sub i32 %345, %230
  %347 = sub i32 %346, %98
  %348 = add i32 %347, %137
  %349 = add i32 %348, %251
  %350 = sub i32 %349, %99
  %351 = add i32 %350, %101
  %352 = add i32 %351, %104
  %353 = sub i32 %352, %111
  %354 = add i32 %353, %114
  %355 = add i32 %354, %128
  %356 = sub i32 %355, %134
  %357 = add i32 %356, %135
  %358 = sub i32 %357, %136
  %359 = sub i32 %358, %139
  %360 = sub i32 %359, %140
  %361 = add i32 %360, %144
  %362 = sub i32 %361, %146
  %363 = sub i32 %362, %148
  %364 = sub i32 %363, %152
  %365 = sub i32 %364, %155
  %366 = sub i32 %365, %156
  %367 = add i32 %366, %157
  %368 = sub i32 %367, %158
  %369 = add i32 %368, %159
  %370 = add i32 %369, %107
  %371 = sub i32 %370, %162
  %372 = sub i32 %371, %167
  %373 = sub i32 %372, %168
  %374 = add i32 %373, %172
  %375 = add i32 %374, %180
  %376 = add i32 %375, %181
  %377 = add i32 %376, %182
  %378 = sub i32 %377, %183
  %379 = sub i32 %378, %184
  %380 = sub i32 %379, %185
  %381 = add i32 %380, %186
  %382 = add i32 %381, %187
  %383 = sub i32 %382, %188
  %384 = sub i32 %383, %189
  %385 = add i32 %384, %190
  %386 = add i32 %385, %195
  %387 = sub i32 %386, %197
  %388 = add i32 %387, %199
  %389 = sub i32 %388, %200
  %390 = sub i32 %389, %201
  %391 = sub i32 %390, %206
  %392 = add i32 %391, %208
  %393 = add i32 %392, %214
  %394 = add i32 %393, %216
  %395 = sub i32 %394, %220
  %396 = add i32 %395, %221
  %397 = add i32 %396, %222
  %398 = sub i32 %397, %228
  %399 = sub i32 %398, %231
  %400 = add i32 %399, %232
  %401 = add i32 %400, %233
  %402 = sub i32 %401, %240
  %403 = add i32 %402, %242
  %404 = sub i32 %403, %243
  %405 = add i32 %404, %244
  %406 = sub i32 %405, %249
  %407 = sub i32 %406, %252
  %408 = add i32 %407, %96
  %409 = add i32 %408, %108
  %410 = sub i32 %409, %122
  %411 = sub i32 %410, %127
  %412 = sub i32 %411, %161
  %413 = sub i32 %412, %178
  %414 = sub i32 %413, %193
  %415 = sub i32 %414, %203
  %416 = sub i32 %415, %205
  %417 = sub i32 %416, %219
  %418 = sub i32 %417, %224
  %419 = sub i32 %418, %227
  %420 = add i32 %419, %236
  %421 = add i32 %420, %238
  %422 = add i32 %421, %256
  %423 = add i32 %422, %258
  %424 = sub i32 %423, %261
  %425 = sub i32 %424, %164
  %426 = sub i32 %425, %213
  %427 = add i32 %426, %293
  %428 = add i32 %427, %295
  %429 = sub i32 %428, %247
  %430 = add i32 %429, %291
  %431 = add i32 %430, %287
  %432 = add i32 %431, %281
  %433 = icmp eq i32 %22, %432
  %434 = select i1 %433, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %435 = tail call i32 @puts(i8* nonnull dereferenceable(1) %434)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
