; ModuleID = '../.././c_source_file/1275_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1275_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, %0
  %10 = or i32 %9, %8
  %11 = add i32 %10, 1
  %12 = add i32 %11, %6
  %13 = xor i32 %4, -1
  %14 = or i32 %13, %3
  %15 = xor i32 %3, -1
  %16 = xor i32 %4, %3
  %17 = and i32 %13, %3
  %18 = shl i32 %16, 1
  %19 = xor i32 %18, -2
  %20 = or i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = shl i32 %14, 1
  %24 = xor i32 %23, -2
  %25 = shl i32 %17, 1
  %26 = and i32 %2, %0
  %27 = or i32 %2, %1
  %28 = xor i32 %26, %27
  %29 = or i32 %7, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %2
  %32 = xor i32 %0, -1
  %33 = xor i32 %2, %1
  %34 = or i32 %33, %32
  %35 = and i32 %2, %1
  %36 = and i32 %35, %32
  %37 = and i32 %33, %0
  %38 = or i32 %36, %37
  %39 = xor i32 %2, -1
  %40 = and i32 %39, %1
  %41 = or i32 %26, %40
  %42 = and i32 %33, %29
  %43 = shl i32 %42, 1
  %44 = and i32 %29, %39
  %45 = shl i32 %1, 1
  %46 = xor i32 %8, -1
  %47 = and i32 %46, %2
  %48 = shl i32 %47, 1
  %49 = or i32 %1, %0
  %50 = xor i32 %49, -1
  %51 = xor i32 %50, %2
  %52 = or i32 %40, %32
  %53 = shl i32 %52, 2
  %54 = xor i32 %33, -1
  %55 = or i32 %54, %0
  %56 = and i32 %7, %2
  %57 = and i32 %56, %0
  %58 = or i32 %7, %2
  %59 = and i32 %58, %32
  %60 = or i32 %57, %59
  %61 = xor i32 %46, %2
  %62 = xor i32 %9, -1
  %63 = or i32 %62, %50
  %64 = xor i32 %1, %0
  %65 = or i32 %64, %62
  %66 = xor i32 %35, -1
  %67 = and i32 %66, %32
  %68 = xor i32 %64, -1
  %69 = or i32 %68, %2
  %70 = and i32 %1, %0
  %71 = or i32 %33, %70
  %72 = xor i32 %26, -1
  %73 = and i32 %72, %7
  %74 = and i32 %39, %0
  %75 = xor i32 %74, -1
  %76 = and i32 %75, %7
  %77 = or i32 %54, %50
  %78 = or i32 %70, %39
  %79 = or i32 %39, %0
  %80 = xor i32 %79, %1
  %81 = or i32 %9, %68
  %82 = and i32 %75, %1
  %83 = or i32 %39, %1
  %84 = xor i32 %83, -1
  %85 = xor i32 %84, %0
  %86 = and i32 %72, %68
  %87 = or i32 %8, %54
  %88 = xor i32 %37, -1
  %89 = xor i32 %36, %88
  %90 = xor i32 %70, -1
  %91 = add i32 %70, 1
  %92 = or i32 %27, %32
  %93 = shl i32 %92, 1
  %94 = or i32 %50, %2
  %95 = xor i32 %30, %2
  %96 = or i32 %33, %0
  %97 = xor i32 %57, %96
  %98 = xor i32 %40, -1
  %99 = xor i32 %26, %98
  %100 = or i32 %83, %32
  %101 = or i32 %26, %7
  %102 = or i32 %26, %64
  %103 = and i32 %39, %46
  %104 = and i32 %56, %32
  %105 = and i32 %58, %0
  %106 = or i32 %104, %105
  %107 = and i32 %79, %7
  %108 = or i32 %2, %0
  %109 = xor i32 %108, -1
  %110 = xor i32 %109, %1
  %111 = or i32 %70, %84
  %112 = and i32 %68, %2
  %113 = or i32 %9, %50
  %114 = xor i32 %104, %34
  %115 = or i32 %66, %0
  %116 = and i32 %108, %7
  %117 = and i32 %64, %39
  %118 = and i32 %64, %62
  %119 = xor i32 %74, %83
  %120 = and i32 %29, %2
  %121 = and i32 %108, %1
  %122 = or i32 %40, %8
  %123 = or i32 %39, %68
  %124 = and i32 %62, %7
  %125 = and i32 %83, %32
  %126 = or i32 %26, %1
  %127 = shl i32 %126, 1
  %128 = shl i32 %84, 1
  %129 = xor i32 %74, %1
  %130 = and i32 %35, %0
  %131 = and i32 %27, %32
  %132 = xor i32 %131, 2147483647
  %133 = xor i32 %132, %130
  %134 = and i32 %98, %32
  %135 = or i32 %74, %64
  %136 = xor i32 %79, -1
  %137 = or i32 %136, %68
  %138 = xor i32 %72, %1
  %139 = xor i32 %40, %0
  %140 = or i32 %62, %68
  %141 = xor i32 %27, %0
  %142 = xor i32 %8, %98
  %143 = and i32 %62, %1
  %144 = shl i32 %143, 1
  %145 = or i32 %26, %50
  %146 = or i32 %8, %2
  %147 = xor i32 %33, %0
  %148 = xor i32 %27, %70
  %149 = shl i32 %148, 1
  %150 = or i32 %57, %147
  %151 = add i32 %79, 1
  %152 = and i32 %79, %1
  %153 = or i32 %74, %7
  %154 = add i32 %9, 1
  %155 = xor i32 %66, %0
  %156 = xor i32 %147, -1
  %157 = xor i32 %57, %156
  %158 = or i32 %64, %39
  %159 = shl i32 %158, 1
  %160 = xor i32 %8, %2
  %161 = xor i32 %8, %66
  %162 = or i32 %64, %109
  %163 = or i32 %130, %131
  %164 = and i32 %33, %90
  %165 = shl i32 %164, 1
  %166 = and i32 %29, %62
  %167 = xor i32 %58, %32
  %168 = xor i32 %167, %57
  %169 = or i32 %64, %2
  %170 = shl i32 %169, 1
  %171 = or i32 %109, %7
  %172 = shl i32 %171, 1
  %173 = xor i32 %34, 2147483647
  %174 = or i32 %173, %104
  %175 = shl i32 %174, 1
  %176 = and i32 %62, %68
  %177 = and i32 %64, %2
  %178 = or i32 %40, %0
  %179 = or i32 %27, %0
  %180 = shl i32 %179, 1
  %181 = and i32 %108, %68
  %182 = xor i32 %83, %70
  %183 = and i32 %54, %90
  %184 = or i32 %62, %7
  %185 = and i32 %9, %49
  %186 = and i32 %108, %64
  %187 = or i32 %33, %50
  %188 = or i32 %136, %7
  %189 = or i32 %84, %32
  %190 = or i32 %9, %7
  %191 = or i32 %64, %136
  %192 = xor i32 %27, -1
  %193 = and i32 %33, %46
  %194 = shl i32 %193, 2
  %195 = and i32 %9, %7
  %196 = and i32 %9, %29
  %197 = and i32 %54, %46
  %198 = or i32 %109, %1
  %199 = or i32 %35, %0
  %200 = or i32 %33, %30
  %201 = and i32 %64, %72
  %202 = and i32 %33, %32
  %203 = or i32 %9, %70
  %204 = and i32 %54, %32
  %205 = xor i32 %136, %1
  %206 = or i32 %109, %68
  %207 = xor i32 %98, %0
  %208 = and i32 %9, %90
  %209 = and i32 %33, %49
  %210 = and i32 %75, %68
  %211 = or i32 %26, %68
  %212 = and i32 %9, %46
  %213 = or i32 %70, %62
  %214 = xor i32 %108, %70
  %215 = and i32 %62, %90
  %216 = or i32 %54, %32
  %217 = shl i32 %216, 1
  %218 = and i32 %83, %0
  %219 = or i32 %98, %32
  %220 = and i32 %66, %0
  %221 = add i32 %2, 1
  %222 = or i32 %62, %1
  %223 = xor i32 %202, -1
  %224 = xor i32 %130, %223
  %225 = or i32 %66, %32
  %226 = xor i32 %57, -1
  %227 = xor i32 %59, %226
  %228 = or i32 %9, %30
  %229 = or i32 %70, %192
  %230 = or i32 %70, %136
  %231 = and i32 %49, %62
  %232 = xor i32 %70, %2
  %233 = xor i32 %96, -1
  %234 = or i32 %57, %233
  %235 = or i32 %9, %64
  %236 = and i32 %62, %46
  %237 = xor i32 %90, %2
  %238 = xor i32 %26, %49
  %239 = xor i32 %83, %0
  %240 = or i32 %62, %30
  %241 = shl i32 %240, 1
  %242 = or i32 %192, %0
  %243 = or i32 %74, %68
  %244 = or i32 %9, %1
  %245 = and i32 %9, %1
  %246 = xor i32 %79, %70
  %247 = xor i32 %49, %2
  %248 = and i32 %9, %68
  %249 = or i32 %192, %32
  %250 = or i32 %74, %84
  %251 = or i32 %130, %156
  %252 = xor i32 %105, 2147483647
  %253 = xor i32 %252, %104
  %254 = shl i32 %253, 1
  %255 = and i32 %27, %0
  %256 = xor i32 %255, 2147483647
  %257 = xor i32 %256, %36
  %258 = shl i32 %257, 1
  %259 = and i32 %9, %64
  %260 = shl i32 %259, 1
  %261 = or i32 %70, %54
  %262 = or i32 %98, %0
  %263 = and i32 %39, %68
  %264 = xor i32 %74, %66
  %265 = or i32 %130, %141
  %266 = or i32 %130, %202
  %267 = and i32 %192, %32
  %268 = mul i32 %267, -17
  %269 = and i32 %40, %32
  %270 = mul i32 %269, 18
  %271 = and i32 %192, %0
  %272 = mul i32 %271, -21
  %273 = and i32 %40, %0
  %274 = and i32 %84, %32
  %275 = shl i32 %274, 3
  %276 = mul i32 %36, -7
  %277 = and i32 %84, %0
  %278 = mul i32 %277, -12
  %279 = sub i32 -2, %74
  %280 = add i32 %279, %78
  %281 = add i32 %280, %44
  %282 = add i32 %281, %250
  %283 = add i32 %282, %248
  %284 = add i32 %283, %235
  %285 = add i32 %284, %204
  %286 = add i32 %285, %198
  %287 = add i32 %286, %188
  %288 = add i32 %287, %153
  %289 = add i32 %288, %135
  %290 = add i32 %289, %122
  %291 = add i32 %290, %119
  %292 = add i32 %291, %133
  %293 = shl i32 %292, 1
  %294 = add i32 %222, %247
  %295 = sub i32 %213, %294
  %296 = sub i32 %295, %211
  %297 = sub i32 %296, %134
  %298 = add i32 %297, %234
  %299 = add i32 %298, %266
  %300 = mul i32 %299, 3
  %301 = sub i32 %201, %209
  %302 = add i32 %301, %199
  %303 = sub i32 %302, %71
  %304 = add i32 %303, %63
  %305 = mul i32 %304, 5
  %306 = add i32 %27, %177
  %307 = add i32 %306, %155
  %308 = add i32 %307, %181
  %309 = add i32 %308, %81
  %310 = shl i32 %309, 2
  %311 = sub i32 2, %0
  %312 = sub i32 %311, %0
  %313 = add i32 %312, %7
  %314 = sub i32 %313, %2
  %315 = sub i32 %314, %45
  %316 = add i32 %315, %91
  %317 = add i32 %316, %8
  %318 = add i32 %317, %221
  %319 = add i32 %318, %30
  %320 = add i32 %319, %50
  %321 = add i32 %320, %15
  %322 = sub i32 %321, %31
  %323 = add i32 %322, %51
  %324 = add i32 %323, %61
  %325 = sub i32 %324, %33
  %326 = sub i32 %325, %69
  %327 = add i32 %326, %94
  %328 = sub i32 %327, %95
  %329 = add i32 %328, %98
  %330 = add i32 %329, %9
  %331 = sub i32 %330, %103
  %332 = sub i32 %331, %112
  %333 = sub i32 %332, %26
  %334 = sub i32 %333, %117
  %335 = sub i32 %334, %120
  %336 = sub i32 %335, %123
  %337 = add i32 %336, %146
  %338 = add i32 %337, %151
  %339 = add i32 %338, %154
  %340 = sub i32 %339, %160
  %341 = add i32 %340, %79
  %342 = add i32 %341, %83
  %343 = add i32 %342, %192
  %344 = add i32 %343, %232
  %345 = add i32 %344, %74
  %346 = add i32 %345, %237
  %347 = add i32 %346, %72
  %348 = sub i32 %347, %263
  %349 = add i32 %348, %13
  %350 = add i32 %349, %28
  %351 = sub i32 %350, %34
  %352 = sub i32 %351, %41
  %353 = sub i32 %352, %48
  %354 = sub i32 %353, %55
  %355 = add i32 %354, %65
  %356 = add i32 %355, %67
  %357 = add i32 %356, %73
  %358 = add i32 %357, %76
  %359 = add i32 %358, %77
  %360 = add i32 %359, %80
  %361 = add i32 %360, %82
  %362 = sub i32 %361, %85
  %363 = add i32 %362, %86
  %364 = sub i32 %363, %87
  %365 = add i32 %364, %99
  %366 = sub i32 %365, %100
  %367 = add i32 %366, %101
  %368 = sub i32 %367, %102
  %369 = add i32 %368, %107
  %370 = sub i32 %369, %110
  %371 = add i32 %370, %111
  %372 = add i32 %371, %113
  %373 = sub i32 %372, %115
  %374 = add i32 %373, %116
  %375 = add i32 %374, %118
  %376 = add i32 %375, %121
  %377 = add i32 %376, %124
  %378 = add i32 %377, %125
  %379 = sub i32 %378, %128
  %380 = sub i32 %379, %129
  %381 = sub i32 %380, %137
  %382 = add i32 %381, %138
  %383 = sub i32 %382, %139
  %384 = add i32 %383, %140
  %385 = sub i32 %384, %141
  %386 = sub i32 %385, %142
  %387 = add i32 %386, %145
  %388 = add i32 %387, %147
  %389 = sub i32 %388, %152
  %390 = sub i32 %389, %159
  %391 = sub i32 %390, %161
  %392 = add i32 %391, %162
  %393 = sub i32 %392, %166
  %394 = add i32 %393, %96
  %395 = sub i32 %394, %170
  %396 = sub i32 %395, %176
  %397 = add i32 %396, %178
  %398 = sub i32 %397, %182
  %399 = sub i32 %398, %183
  %400 = add i32 %399, %184
  %401 = add i32 %400, %185
  %402 = sub i32 %401, %131
  %403 = add i32 %402, %186
  %404 = add i32 %403, %187
  %405 = sub i32 %404, %189
  %406 = add i32 %405, %190
  %407 = add i32 %406, %191
  %408 = sub i32 %407, %195
  %409 = add i32 %408, %196
  %410 = sub i32 %409, %197
  %411 = add i32 %410, %200
  %412 = sub i32 %411, %202
  %413 = sub i32 %412, %203
  %414 = sub i32 %413, %205
  %415 = add i32 %414, %206
  %416 = sub i32 %415, %207
  %417 = add i32 %416, %208
  %418 = sub i32 %417, %210
  %419 = sub i32 %418, %212
  %420 = sub i32 %419, %214
  %421 = add i32 %420, %215
  %422 = sub i32 %421, %218
  %423 = sub i32 %422, %219
  %424 = sub i32 %423, %220
  %425 = sub i32 %424, %225
  %426 = sub i32 %425, %228
  %427 = sub i32 %426, %229
  %428 = sub i32 %427, %230
  %429 = sub i32 %428, %231
  %430 = sub i32 %429, %236
  %431 = sub i32 %430, %238
  %432 = add i32 %431, %239
  %433 = add i32 %432, %242
  %434 = add i32 %433, %243
  %435 = add i32 %434, %244
  %436 = add i32 %435, %245
  %437 = sub i32 %436, %246
  %438 = sub i32 %437, %249
  %439 = add i32 %438, %261
  %440 = sub i32 %439, %262
  %441 = sub i32 %440, %264
  %442 = add i32 %441, %273
  %443 = sub i32 %442, %130
  %444 = sub i32 %443, %14
  %445 = add i32 %444, %16
  %446 = add i32 %445, %17
  %447 = add i32 %446, %20
  %448 = add i32 %447, %38
  %449 = sub i32 %448, %43
  %450 = sub i32 %449, %53
  %451 = sub i32 %450, %60
  %452 = sub i32 %451, %89
  %453 = sub i32 %452, %93
  %454 = add i32 %453, %97
  %455 = add i32 %454, %106
  %456 = add i32 %455, %114
  %457 = sub i32 %456, %127
  %458 = sub i32 %457, %144
  %459 = sub i32 %458, %149
  %460 = add i32 %459, %150
  %461 = sub i32 %460, %157
  %462 = add i32 %461, %163
  %463 = sub i32 %462, %165
  %464 = sub i32 %463, %168
  %465 = sub i32 %464, %172
  %466 = sub i32 %465, %180
  %467 = sub i32 %466, %194
  %468 = sub i32 %467, %217
  %469 = add i32 %468, %224
  %470 = sub i32 %469, %227
  %471 = sub i32 %470, %241
  %472 = add i32 %471, %251
  %473 = sub i32 %472, %260
  %474 = add i32 %473, %265
  %475 = add i32 %474, %268
  %476 = add i32 %475, %270
  %477 = add i32 %476, %272
  %478 = add i32 %477, %275
  %479 = add i32 %478, %276
  %480 = add i32 %479, %278
  %481 = sub i32 %480, %25
  %482 = add i32 %481, %19
  %483 = sub i32 %482, %22
  %484 = sub i32 %483, %24
  %485 = sub i32 %484, %175
  %486 = sub i32 %485, %254
  %487 = sub i32 %486, %258
  %488 = add i32 %487, %305
  %489 = add i32 %488, %310
  %490 = add i32 %489, %300
  %491 = add i32 %490, %293
  %492 = icmp eq i32 %12, %491
  %493 = select i1 %492, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %494 = tail call i32 @puts(i8* nonnull dereferenceable(1) %493)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
