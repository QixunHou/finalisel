; ModuleID = '../.././c_source_file/1238_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1238_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = or i32 %9, %7
  %11 = add i32 %6, %10
  %12 = xor i32 %4, -1
  %13 = or i32 %12, %3
  %14 = shl i32 %13, 1
  %15 = or i32 %14, 1
  %16 = and i32 %12, %3
  %17 = xor i32 %16, -1
  %18 = or i32 %4, %3
  %19 = xor i32 %6, -1
  %20 = shl i32 %18, 3
  %21 = xor i32 %20, -8
  %22 = xor i32 %13, -1
  %23 = shl i32 %16, 3
  %24 = and i32 %4, %3
  %25 = xor i32 %2, %1
  %26 = xor i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %8, %27
  %29 = or i32 %8, %0
  %30 = and i32 %29, %26
  %31 = and i32 %1, %0
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %31, %33
  %35 = xor i32 %9, -1
  %36 = and i32 %35, %7
  %37 = or i32 %32, %31
  %38 = or i32 %2, %0
  %39 = and i32 %38, %26
  %40 = and i32 %2, %0
  %41 = or i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = or i32 %40, %42
  %44 = or i32 %1, %0
  %45 = and i32 %25, %44
  %46 = and i32 %2, %1
  %47 = and i32 %46, %0
  %48 = and i32 %41, %7
  %49 = or i32 %47, %48
  %50 = xor i32 %44, -1
  %51 = xor i32 %50, %2
  %52 = and i32 %38, %27
  %53 = or i32 %8, %50
  %54 = xor i32 %46, %0
  %55 = xor i32 %31, -1
  %56 = and i32 %33, %55
  %57 = xor i32 %1, -1
  %58 = and i32 %8, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %59, %57
  %61 = or i32 %27, %2
  %62 = or i32 %57, %0
  %63 = and i32 %25, %62
  %64 = and i32 %57, %0
  %65 = xor i32 %64, -1
  %66 = and i32 %8, %65
  %67 = or i32 %42, %7
  %68 = and i32 %32, %55
  %69 = xor i32 %40, %44
  %70 = xor i32 %38, %1
  %71 = xor i32 %29, -1
  %72 = or i32 %31, %71
  %73 = shl i32 %72, 1
  %74 = and i32 %38, %57
  %75 = xor i32 %40, -1
  %76 = and i32 %75, %27
  %77 = or i32 %8, %1
  %78 = xor i32 %77, -1
  %79 = or i32 %31, %78
  %80 = xor i32 %62, -1
  %81 = add i32 %62, 1
  %82 = xor i32 %25, -1
  %83 = or i32 %31, %82
  %84 = shl i32 %83, 1
  %85 = and i32 %77, %0
  %86 = and i32 %29, %27
  %87 = or i32 %71, %27
  %88 = xor i32 %59, %1
  %89 = shl i32 %88, 1
  %90 = or i32 %46, %0
  %91 = and i32 %59, %27
  %92 = and i32 %44, %33
  %93 = xor i32 %64, %2
  %94 = xor i32 %25, %0
  %95 = xor i32 %47, %94
  %96 = xor i32 %46, -1
  %97 = xor i32 %96, %0
  %98 = and i32 %33, %27
  %99 = and i32 %25, %0
  %100 = and i32 %25, %7
  %101 = xor i32 %100, -1
  %102 = xor i32 %47, %101
  %103 = and i32 %59, %1
  %104 = and i32 %46, %7
  %105 = or i32 %104, %99
  %106 = xor i32 %94, -1
  %107 = or i32 %47, %106
  %108 = shl i32 %107, 1
  %109 = or i32 %58, %46
  %110 = and i32 %96, %0
  %111 = and i32 %57, %2
  %112 = and i32 %111, %0
  %113 = xor i32 %112, %106
  %114 = or i32 %57, %2
  %115 = xor i32 %114, %0
  %116 = xor i32 %115, -1
  %117 = xor i32 %112, %116
  %118 = xor i32 %9, %0
  %119 = or i32 %58, %1
  %120 = or i32 %25, %31
  %121 = and i32 %77, %7
  %122 = and i32 %26, %33
  %123 = or i32 %40, %27
  %124 = or i32 %25, %0
  %125 = or i32 %25, %64
  %126 = or i32 %31, %2
  %127 = or i32 %40, %9
  %128 = xor i32 %40, %41
  %129 = or i32 %46, %7
  %130 = shl i32 %129, 1
  %131 = and i32 %29, %1
  %132 = xor i32 %38, -1
  %133 = add i32 %38, 1
  %134 = or i32 %77, %7
  %135 = shl i32 %134, 2
  %136 = or i32 %9, %64
  %137 = or i32 %71, %1
  %138 = and i32 %111, %7
  %139 = and i32 %114, %0
  %140 = xor i32 %139, -1
  %141 = xor i32 %138, %140
  %142 = and i32 %29, %57
  %143 = and i32 %44, %82
  %144 = xor i32 %65, %2
  %145 = or i32 %41, %7
  %146 = or i32 %25, %7
  %147 = and i32 %25, %65
  %148 = xor i32 %41, %0
  %149 = or i32 %26, %2
  %150 = shl i32 %9, 1
  %151 = or i32 %58, %27
  %152 = or i32 %82, %50
  %153 = or i32 %82, %80
  %154 = shl i32 %153, 1
  %155 = or i32 %32, %1
  %156 = or i32 %25, %50
  %157 = and i32 %32, %27
  %158 = or i32 %40, %50
  %159 = or i32 %132, %1
  %160 = xor i32 %29, %1
  %161 = or i32 %112, %94
  %162 = xor i32 %112, %124
  %163 = or i32 %132, %27
  %164 = xor i32 %77, %31
  %165 = shl i32 %164, 1
  %166 = xor i32 %132, %1
  %167 = or i32 %31, %8
  %168 = or i32 %31, %42
  %169 = or i32 %82, %7
  %170 = or i32 %64, %8
  %171 = or i32 %32, %26
  %172 = and i32 %55, %2
  %173 = add i32 %77, 1
  %174 = and i32 %33, %57
  %175 = or i32 %50, %2
  %176 = shl i32 %175, 1
  %177 = or i32 %32, %64
  %178 = and i32 %26, %75
  %179 = and i32 %82, %0
  %180 = or i32 %96, %0
  %181 = or i32 %58, %26
  %182 = xor i32 %40, %62
  %183 = and i32 %41, %0
  %184 = or i32 %104, %183
  %185 = and i32 %27, %2
  %186 = xor i32 %99, -1
  %187 = xor i32 %104, %186
  %188 = xor i32 %58, %96
  %189 = and i32 %62, %82
  %190 = or i32 %31, %132
  %191 = xor i32 %75, %1
  %192 = or i32 %8, %27
  %193 = and i32 %44, %8
  %194 = or i32 %47, %148
  %195 = or i32 %47, %100
  %196 = shl i32 %195, 1
  %197 = xor i32 %148, 2147483647
  %198 = xor i32 %197, %47
  %199 = shl i32 %198, 1
  %200 = and i32 %82, %55
  %201 = or i32 %32, %80
  %202 = shl i32 %201, 2
  %203 = or i32 %80, %2
  %204 = add i32 %41, 1
  %205 = or i32 %96, %7
  %206 = xor i32 %31, %2
  %207 = or i32 %40, %57
  %208 = xor i32 %58, %1
  %209 = and i32 %82, %65
  %210 = xor i32 %62, %2
  %211 = shl i32 %210, 2
  %212 = xor i32 %64, %35
  %213 = xor i32 %40, %35
  %214 = xor i32 %64, %96
  %215 = xor i32 %80, %2
  %216 = xor i32 %40, %1
  %217 = or i32 %25, %80
  %218 = and i32 %44, %2
  %219 = and i32 %33, %65
  %220 = or i32 %64, %33
  %221 = and i32 %62, %2
  %222 = xor i32 %71, %1
  %223 = xor i32 %38, %31
  %224 = xor i32 %82, %0
  %225 = or i32 %71, %57
  %226 = or i32 %78, %7
  %227 = and i32 %25, %55
  %228 = and i32 %32, %44
  %229 = or i32 %35, %0
  %230 = and i32 %32, %1
  %231 = or i32 %41, %0
  %232 = and i32 %32, %65
  %233 = shl i32 %2, 1
  %234 = add i32 %26, 1
  %235 = or i32 %42, %0
  %236 = and i32 %32, %26
  %237 = and i32 %38, %1
  %238 = or i32 %132, %57
  %239 = or i32 %32, %57
  %240 = or i32 %8, %80
  %241 = shl i32 %240, 1
  %242 = or i32 %112, %115
  %243 = or i32 %26, %8
  %244 = or i32 %78, %0
  %245 = or i32 %33, %57
  %246 = or i32 %26, %132
  %247 = and i32 %62, %33
  %248 = shl i32 %247, 1
  %249 = and i32 %114, %7
  %250 = or i32 %112, %249
  %251 = and i32 %62, %8
  %252 = or i32 %33, %50
  %253 = shl i32 %252, 1
  %254 = or i32 %64, %2
  %255 = and i32 %42, %7
  %256 = shl i32 %255, 1
  %257 = and i32 %9, %7
  %258 = mul i32 %257, 14
  %259 = and i32 %42, %0
  %260 = and i32 %9, %0
  %261 = mul i32 %260, 13
  %262 = and i32 %78, %7
  %263 = shl i32 %262, 3
  %264 = mul i32 %104, 6
  %265 = and i32 %78, %0
  %266 = mul i32 %265, -17
  %267 = mul i32 %47, 24
  %268 = add i32 %64, %50
  %269 = add i32 %268, %218
  %270 = add i32 %269, %206
  %271 = add i32 %270, %40
  %272 = add i32 %226, %57
  %273 = sub i32 %272, %127
  %274 = add i32 %273, %12
  %275 = sub i32 %274, %24
  %276 = sub i32 %275, %162
  %277 = mul i32 %276, 5
  %278 = sub i32 %220, %44
  %279 = sub i32 %278, %259
  %280 = sub i32 %279, %155
  %281 = add i32 %280, %90
  %282 = mul i32 %281, 3
  %283 = add i32 %171, %69
  %284 = shl i32 %283, 2
  %285 = add i32 %271, %3
  %286 = add i32 %285, %236
  %287 = add i32 %286, %244
  %288 = add i32 %287, %235
  %289 = add i32 %288, %227
  %290 = add i32 %289, %191
  %291 = add i32 %290, %156
  %292 = add i32 %291, %128
  %293 = add i32 %292, %124
  %294 = add i32 %293, %119
  %295 = add i32 %294, %103
  %296 = add i32 %295, %45
  %297 = add i32 %296, %36
  %298 = shl i32 %297, 1
  %299 = sub i32 -2, %0
  %300 = sub i32 %299, %1
  %301 = add i32 %300, %81
  %302 = sub i32 %301, %26
  %303 = add i32 %302, %65
  %304 = sub i32 %303, %31
  %305 = add i32 %304, %8
  %306 = sub i32 %305, %62
  %307 = add i32 %306, %234
  %308 = add i32 %307, %25
  %309 = add i32 %308, %28
  %310 = sub i32 %309, %51
  %311 = add i32 %310, %53
  %312 = sub i32 %311, %61
  %313 = add i32 %312, %66
  %314 = add i32 %313, %71
  %315 = sub i32 %314, %46
  %316 = add i32 %315, %93
  %317 = add i32 %316, %33
  %318 = add i32 %317, %126
  %319 = add i32 %318, %133
  %320 = add i32 %319, %144
  %321 = add i32 %320, %149
  %322 = sub i32 %321, %167
  %323 = sub i32 %322, %170
  %324 = sub i32 %323, %172
  %325 = add i32 %324, %173
  %326 = sub i32 %325, %29
  %327 = sub i32 %326, %185
  %328 = sub i32 %327, %192
  %329 = sub i32 %328, %193
  %330 = sub i32 %329, %203
  %331 = add i32 %330, %204
  %332 = add i32 %331, %215
  %333 = add i32 %332, %75
  %334 = add i32 %333, %221
  %335 = sub i32 %334, %233
  %336 = sub i32 %335, %243
  %337 = sub i32 %336, %251
  %338 = sub i32 %337, %254
  %339 = sub i32 %338, %4
  %340 = add i32 %339, %30
  %341 = sub i32 %340, %34
  %342 = add i32 %341, %37
  %343 = sub i32 %342, %39
  %344 = sub i32 %343, %43
  %345 = sub i32 %344, %52
  %346 = sub i32 %345, %54
  %347 = add i32 %346, %56
  %348 = add i32 %347, %60
  %349 = add i32 %348, %63
  %350 = add i32 %349, %67
  %351 = sub i32 %350, %68
  %352 = add i32 %351, %70
  %353 = sub i32 %352, %74
  %354 = add i32 %353, %76
  %355 = add i32 %354, %79
  %356 = add i32 %355, %85
  %357 = add i32 %356, %86
  %358 = add i32 %357, %87
  %359 = sub i32 %358, %91
  %360 = add i32 %359, %92
  %361 = sub i32 %360, %97
  %362 = add i32 %361, %98
  %363 = sub i32 %362, %99
  %364 = sub i32 %363, %109
  %365 = sub i32 %364, %110
  %366 = sub i32 %365, %118
  %367 = sub i32 %366, %120
  %368 = sub i32 %367, %121
  %369 = sub i32 %368, %122
  %370 = add i32 %369, %123
  %371 = add i32 %370, %100
  %372 = add i32 %371, %125
  %373 = sub i32 %372, %131
  %374 = add i32 %373, %136
  %375 = sub i32 %374, %137
  %376 = add i32 %375, %142
  %377 = add i32 %376, %143
  %378 = sub i32 %377, %145
  %379 = add i32 %378, %146
  %380 = sub i32 %379, %147
  %381 = sub i32 %380, %148
  %382 = sub i32 %381, %150
  %383 = add i32 %382, %151
  %384 = add i32 %383, %152
  %385 = sub i32 %384, %157
  %386 = add i32 %385, %158
  %387 = add i32 %386, %159
  %388 = add i32 %387, %160
  %389 = add i32 %388, %163
  %390 = add i32 %389, %166
  %391 = add i32 %390, %168
  %392 = sub i32 %391, %169
  %393 = sub i32 %392, %174
  %394 = sub i32 %393, %176
  %395 = sub i32 %394, %177
  %396 = add i32 %395, %178
  %397 = add i32 %396, %179
  %398 = sub i32 %397, %180
  %399 = add i32 %398, %181
  %400 = add i32 %399, %182
  %401 = add i32 %400, %188
  %402 = add i32 %401, %189
  %403 = sub i32 %402, %190
  %404 = add i32 %403, %200
  %405 = sub i32 %404, %205
  %406 = add i32 %405, %207
  %407 = sub i32 %406, %208
  %408 = sub i32 %407, %209
  %409 = sub i32 %408, %211
  %410 = add i32 %409, %212
  %411 = add i32 %410, %213
  %412 = add i32 %411, %214
  %413 = add i32 %412, %216
  %414 = sub i32 %413, %217
  %415 = sub i32 %414, %219
  %416 = sub i32 %415, %222
  %417 = add i32 %416, %223
  %418 = sub i32 %417, %224
  %419 = add i32 %418, %225
  %420 = add i32 %419, %183
  %421 = add i32 %420, %228
  %422 = sub i32 %421, %229
  %423 = add i32 %422, %230
  %424 = sub i32 %423, %231
  %425 = sub i32 %424, %232
  %426 = sub i32 %425, %237
  %427 = sub i32 %426, %238
  %428 = add i32 %427, %239
  %429 = sub i32 %428, %241
  %430 = add i32 %429, %245
  %431 = sub i32 %430, %246
  %432 = add i32 %431, %17
  %433 = add i32 %432, %18
  %434 = add i32 %433, %19
  %435 = add i32 %434, %22
  %436 = sub i32 %435, %49
  %437 = sub i32 %436, %73
  %438 = sub i32 %437, %84
  %439 = sub i32 %438, %89
  %440 = add i32 %439, %95
  %441 = sub i32 %440, %102
  %442 = add i32 %441, %105
  %443 = add i32 %442, %113
  %444 = sub i32 %443, %117
  %445 = sub i32 %444, %130
  %446 = sub i32 %445, %135
  %447 = add i32 %446, %141
  %448 = sub i32 %447, %154
  %449 = sub i32 %448, %161
  %450 = sub i32 %449, %165
  %451 = add i32 %450, %184
  %452 = sub i32 %451, %187
  %453 = add i32 %452, %194
  %454 = sub i32 %453, %202
  %455 = add i32 %454, %242
  %456 = sub i32 %455, %248
  %457 = sub i32 %456, %250
  %458 = sub i32 %457, %253
  %459 = sub i32 %458, %256
  %460 = add i32 %459, %258
  %461 = add i32 %460, %261
  %462 = sub i32 %461, %263
  %463 = add i32 %462, %264
  %464 = add i32 %463, %266
  %465 = add i32 %464, %267
  %466 = sub i32 %465, %23
  %467 = sub i32 %466, %108
  %468 = sub i32 %467, %196
  %469 = add i32 %468, %284
  %470 = add i32 %469, %15
  %471 = sub i32 %470, %21
  %472 = sub i32 %471, %199
  %473 = add i32 %472, %282
  %474 = add i32 %473, %277
  %475 = add i32 %474, %298
  %476 = icmp eq i32 %11, %475
  %477 = select i1 %476, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %478 = tail call i32 @puts(i8* nonnull dereferenceable(1) %477)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
