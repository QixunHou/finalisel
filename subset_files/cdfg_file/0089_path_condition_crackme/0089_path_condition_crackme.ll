; ModuleID = '../.././c_source_file/0089_path_condition_crackme.c'
source_filename = "../.././c_source_file/0089_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = and i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = or i32 %8, %7
  %10 = xor i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %11
  %15 = sub i32 1, %9
  %16 = sub i32 %15, %14
  %17 = add i32 %16, %6
  %18 = xor i32 %4, -1
  %19 = or i32 %18, %3
  %20 = or i32 %4, %3
  %21 = add i32 %4, 1
  %22 = and i32 %18, %3
  %23 = shl i32 %20, 1
  %24 = xor i32 %23, -2
  %25 = xor i32 %19, -1
  %26 = and i32 %4, %3
  %27 = xor i32 %2, -1
  %28 = or i32 %27, %11
  %29 = xor i32 %0, -1
  %30 = xor i32 %8, -1
  %31 = and i32 %30, %29
  %32 = xor i32 %1, -1
  %33 = and i32 %32, %0
  %34 = and i32 %2, %1
  %35 = or i32 %34, %33
  %36 = and i32 %27, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %11
  %39 = and i32 %8, %29
  %40 = or i32 %32, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %30, %41
  %43 = xor i32 %30, %0
  %44 = shl i32 %43, 1
  %45 = and i32 %34, %29
  %46 = and i32 %8, %0
  %47 = xor i32 %45, -1
  %48 = xor i32 %46, %47
  %49 = and i32 %32, %2
  %50 = and i32 %49, %0
  %51 = xor i32 %8, %0
  %52 = xor i32 %51, -1
  %53 = xor i32 %50, %52
  %54 = xor i32 %7, -1
  %55 = and i32 %30, %54
  %56 = xor i32 %37, %1
  %57 = or i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %58, %1
  %60 = or i32 %10, %27
  %61 = or i32 %2, %1
  %62 = and i32 %61, %0
  %63 = or i32 %1, %0
  %64 = and i32 %2, %0
  %65 = and i32 %27, %1
  %66 = xor i32 %65, -1
  %67 = xor i32 %64, %66
  %68 = and i32 %13, %1
  %69 = and i32 %63, %2
  %70 = or i32 %27, %0
  %71 = xor i32 %70, -1
  %72 = xor i32 %71, %1
  %73 = xor i32 %34, -1
  %74 = xor i32 %64, %1
  %75 = xor i32 %33, -1
  %76 = and i32 %12, %75
  %77 = xor i32 %61, -1
  %78 = or i32 %77, %0
  %79 = shl i32 %78, 1
  %80 = xor i32 %64, %40
  %81 = and i32 %27, %75
  %82 = or i32 %64, %65
  %83 = and i32 %70, %1
  %84 = or i32 %13, %32
  %85 = or i32 %73, %29
  %86 = and i32 %8, %40
  %87 = and i32 %34, %0
  %88 = xor i32 %61, %0
  %89 = or i32 %87, %88
  %90 = and i32 %27, %54
  %91 = shl i32 %90, 1
  %92 = and i32 %12, %54
  %93 = or i32 %36, %32
  %94 = xor i32 %63, -1
  %95 = or i32 %27, %94
  %96 = xor i32 %33, %73
  %97 = and i32 %40, %13
  %98 = and i32 %63, %27
  %99 = shl i32 %98, 1
  %100 = xor i32 %40, %2
  %101 = or i32 %66, %29
  %102 = add i32 %36, 1
  %103 = xor i32 %58, %1
  %104 = or i32 %71, %1
  %105 = or i32 %61, %29
  %106 = shl i32 %105, 1
  %107 = or i32 %12, %33
  %108 = and i32 %57, %11
  %109 = and i32 %12, %63
  %110 = xor i32 %64, -1
  %111 = add i32 %64, 1
  %112 = or i32 %34, %0
  %113 = or i32 %8, %41
  %114 = or i32 %33, %13
  %115 = and i32 %40, %2
  %116 = shl i32 %29, 1
  %117 = or i32 %27, %1
  %118 = xor i32 %117, -1
  %119 = or i32 %118, %29
  %120 = and i32 %37, %32
  %121 = shl i32 %120, 1
  %122 = or i32 %7, %71
  %123 = xor i32 %87, -1
  %124 = xor i32 %39, %123
  %125 = and i32 %49, %29
  %126 = or i32 %32, %2
  %127 = and i32 %126, %0
  %128 = xor i32 %127, -1
  %129 = xor i32 %125, %128
  %130 = xor i32 %70, %1
  %131 = and i32 %40, %30
  %132 = or i32 %73, %0
  %133 = xor i32 %117, %0
  %134 = or i32 %65, %0
  %135 = or i32 %45, %46
  %136 = xor i32 %126, %0
  %137 = xor i32 %50, -1
  %138 = xor i32 %136, %137
  %139 = and i32 %8, %63
  %140 = shl i32 %139, 1
  %141 = or i32 %33, %27
  %142 = xor i32 %33, %66
  %143 = or i32 %10, %58
  %144 = or i32 %50, %136
  %145 = xor i32 %61, %7
  %146 = and i32 %57, %1
  %147 = or i32 %33, %2
  %148 = and i32 %110, %1
  %149 = shl i32 %27, 1
  %150 = or i32 %64, %32
  %151 = and i32 %110, %11
  %152 = and i32 %12, %1
  %153 = shl i32 %152, 1
  %154 = xor i32 %34, %0
  %155 = and i32 %10, %37
  %156 = or i32 %77, %29
  %157 = or i32 %45, %62
  %158 = and i32 %12, %11
  %159 = and i32 %40, %27
  %160 = and i32 %10, %13
  %161 = and i32 %66, %29
  %162 = shl i32 %8, 2
  %163 = or i32 %61, %0
  %164 = and i32 %61, %29
  %165 = or i32 %87, %164
  %166 = or i32 %64, %77
  %167 = or i32 %34, %29
  %168 = xor i32 %110, %1
  %169 = or i32 %10, %71
  %170 = or i32 %8, %29
  %171 = xor i32 %170, -1
  %172 = or i32 %125, %171
  %173 = and i32 %117, %0
  %174 = shl i32 %173, 2
  %175 = and i32 %37, %1
  %176 = or i32 %64, %94
  %177 = xor i32 %62, %47
  %178 = or i32 %30, %29
  %179 = or i32 %8, %0
  %180 = shl i32 %179, 1
  %181 = or i32 %30, %0
  %182 = or i32 %10, %2
  %183 = and i32 %30, %75
  %184 = and i32 %12, %10
  %185 = and i32 %12, %32
  %186 = shl i32 %185, 1
  %187 = and i32 %10, %2
  %188 = and i32 %117, %29
  %189 = or i32 %7, %58
  %190 = or i32 %30, %94
  %191 = or i32 %7, %77
  %192 = and i32 %12, %40
  %193 = xor i32 %36, %1
  %194 = xor i32 %77, %0
  %195 = or i32 %117, %0
  %196 = and i32 %10, %27
  %197 = xor i32 %64, %63
  %198 = or i32 %7, %118
  %199 = shl i32 %198, 1
  %200 = xor i32 %70, %7
  %201 = and i32 %70, %11
  %202 = or i32 %12, %32
  %203 = xor i32 %7, %2
  %204 = or i32 %7, %13
  %205 = and i32 %126, %29
  %206 = or i32 %50, %205
  %207 = or i32 %8, %33
  %208 = xor i32 %179, -1
  %209 = or i32 %50, %208
  %210 = or i32 %7, %30
  %211 = xor i32 %94, %2
  %212 = or i32 %117, %29
  %213 = xor i32 %87, %51
  %214 = or i32 %7, %2
  %215 = or i32 %13, %11
  %216 = or i32 %12, %1
  %217 = shl i32 %216, 1
  %218 = and i32 %8, %54
  %219 = or i32 %36, %118
  %220 = and i32 %57, %10
  %221 = and i32 %13, %32
  %222 = xor i32 %41, %2
  %223 = and i32 %54, %2
  %224 = or i32 %71, %32
  %225 = xor i32 %33, %2
  %226 = shl i32 %225, 1
  %227 = and i32 %57, %32
  %228 = xor i32 %75, %2
  %229 = shl i32 %228, 1
  %230 = or i32 %58, %11
  %231 = and i32 %70, %32
  %232 = or i32 %13, %41
  %233 = xor i32 %66, %0
  %234 = or i32 %11, %2
  %235 = or i32 %10, %13
  %236 = and i32 %63, %13
  %237 = xor i32 %64, %61
  %238 = shl i32 %237, 1
  %239 = or i32 %50, %51
  %240 = or i32 %64, %1
  %241 = xor i32 %63, %2
  %242 = and i32 %73, %29
  %243 = and i32 %73, %0
  %244 = or i32 %125, %127
  %245 = and i32 %63, %30
  %246 = xor i32 %125, %170
  %247 = xor i32 %73, %0
  %248 = shl i32 %247, 2
  %249 = xor i32 %54, %2
  %250 = or i32 %12, %10
  %251 = or i32 %36, %34
  %252 = and i32 %70, %10
  %253 = or i32 %12, %41
  %254 = or i32 %87, %39
  %255 = or i32 %118, %0
  %256 = or i32 %33, %30
  %257 = or i32 %87, %52
  %258 = xor i32 %57, %1
  %259 = and i32 %13, %75
  %260 = or i32 %71, %11
  %261 = or i32 %58, %32
  %262 = or i32 %12, %94
  %263 = and i32 %8, %75
  %264 = or i32 %13, %94
  %265 = xor i32 %36, %73
  %266 = xor i32 %65, %0
  %267 = or i32 %64, %41
  %268 = xor i32 %117, %7
  %269 = and i32 %66, %0
  %270 = shl i32 %269, 1
  %271 = and i32 %10, %110
  %272 = or i32 %36, %1
  %273 = and i32 %110, %32
  %274 = and i32 %11, %2
  %275 = or i32 %8, %94
  %276 = xor i32 %118, %0
  %277 = xor i32 %205, %137
  %278 = or i32 %94, %2
  %279 = or i32 %66, %0
  %280 = or i32 %12, %11
  %281 = shl i32 %280, 1
  %282 = or i32 %41, %2
  %283 = or i32 %64, %11
  %284 = or i32 %12, %7
  %285 = xor i32 %36, %117
  %286 = or i32 %27, %41
  %287 = or i32 %13, %1
  %288 = xor i32 %50, %179
  %289 = or i32 %36, %10
  %290 = shl i32 %289, 1
  %291 = and i32 %75, %2
  %292 = and i32 %13, %54
  %293 = or i32 %65, %29
  %294 = and i32 %27, %11
  %295 = or i32 %36, %11
  %296 = xor i32 %57, %7
  %297 = xor i32 %164, %123
  %298 = or i32 %65, %33
  %299 = and i32 %77, %29
  %300 = and i32 %77, %0
  %301 = mul i32 %300, -15
  %302 = and i32 %118, %29
  %303 = mul i32 %302, -31
  %304 = mul i32 %45, -23
  %305 = and i32 %118, %0
  %306 = add i32 %94, %2
  %307 = add i32 %306, %211
  %308 = add i32 %307, %196
  %309 = add i32 %308, %95
  %310 = add i32 %309, %73
  %311 = add i32 %310, %28
  %312 = add i32 %311, %296
  %313 = add i32 %312, %295
  %314 = add i32 %313, %88
  %315 = add i32 %314, %276
  %316 = add i32 %315, %264
  %317 = add i32 %316, %263
  %318 = add i32 %317, %250
  %319 = add i32 %318, %184
  %320 = add i32 %319, %161
  %321 = add i32 %320, %158
  %322 = add i32 %321, %156
  %323 = add i32 %322, %151
  %324 = add i32 %323, %132
  %325 = add i32 %324, %112
  %326 = add i32 %325, %108
  %327 = add i32 %326, %96
  %328 = add i32 %327, %67
  %329 = add i32 %328, %26
  %330 = shl i32 %329, 1
  %331 = add i32 %65, %262
  %332 = add i32 %331, %35
  %333 = add i32 %332, %22
  %334 = shl i32 %333, 2
  %335 = add i32 %234, %241
  %336 = sub i32 %335, %165
  %337 = mul i32 %336, 3
  %338 = add i32 %305, %299
  %339 = mul i32 %338, -12
  %340 = add i32 %223, %71
  %341 = add i32 %340, %87
  %342 = add i32 %341, %48
  %343 = add i32 %342, %246
  %344 = mul i32 %343, 5
  %345 = add i32 %116, %0
  %346 = sub i32 %32, %345
  %347 = sub i32 %346, %1
  %348 = sub i32 %347, %63
  %349 = add i32 %348, %41
  %350 = add i32 %349, %75
  %351 = sub i32 %350, %40
  %352 = sub i32 %351, %33
  %353 = sub i32 %352, %3
  %354 = sub i32 %353, %60
  %355 = add i32 %354, %69
  %356 = sub i32 %355, %81
  %357 = sub i32 %356, %100
  %358 = add i32 %357, %102
  %359 = add i32 %358, %111
  %360 = sub i32 %359, %70
  %361 = add i32 %360, %115
  %362 = add i32 %361, %141
  %363 = add i32 %362, %77
  %364 = add i32 %363, %147
  %365 = sub i32 %364, %149
  %366 = add i32 %365, %159
  %367 = add i32 %366, %34
  %368 = sub i32 %367, %117
  %369 = add i32 %368, %182
  %370 = add i32 %369, %187
  %371 = add i32 %370, %203
  %372 = add i32 %371, %214
  %373 = add i32 %372, %222
  %374 = add i32 %373, %223
  %375 = sub i32 %374, %36
  %376 = sub i32 %375, %61
  %377 = add i32 %376, %249
  %378 = add i32 %377, %274
  %379 = sub i32 %378, %64
  %380 = add i32 %379, %30
  %381 = add i32 %380, %278
  %382 = sub i32 %381, %282
  %383 = sub i32 %382, %286
  %384 = sub i32 %383, %291
  %385 = add i32 %384, %294
  %386 = add i32 %385, %4
  %387 = add i32 %386, %21
  %388 = add i32 %387, %31
  %389 = sub i32 %388, %38
  %390 = add i32 %389, %39
  %391 = sub i32 %390, %42
  %392 = sub i32 %391, %55
  %393 = add i32 %392, %56
  %394 = add i32 %393, %59
  %395 = add i32 %394, %62
  %396 = sub i32 %395, %68
  %397 = sub i32 %396, %72
  %398 = add i32 %397, %74
  %399 = sub i32 %398, %76
  %400 = sub i32 %399, %80
  %401 = add i32 %400, %82
  %402 = sub i32 %401, %83
  %403 = sub i32 %402, %84
  %404 = add i32 %403, %85
  %405 = sub i32 %404, %86
  %406 = sub i32 %405, %91
  %407 = add i32 %406, %92
  %408 = add i32 %407, %93
  %409 = add i32 %408, %97
  %410 = sub i32 %409, %99
  %411 = sub i32 %410, %101
  %412 = sub i32 %411, %103
  %413 = sub i32 %412, %104
  %414 = add i32 %413, %107
  %415 = add i32 %414, %109
  %416 = add i32 %415, %113
  %417 = add i32 %416, %114
  %418 = sub i32 %417, %119
  %419 = add i32 %418, %122
  %420 = add i32 %419, %130
  %421 = add i32 %420, %131
  %422 = add i32 %421, %133
  %423 = sub i32 %422, %51
  %424 = sub i32 %423, %134
  %425 = add i32 %424, %142
  %426 = sub i32 %425, %143
  %427 = add i32 %426, %145
  %428 = add i32 %427, %146
  %429 = sub i32 %428, %148
  %430 = sub i32 %429, %150
  %431 = sub i32 %430, %46
  %432 = sub i32 %431, %154
  %433 = add i32 %432, %155
  %434 = sub i32 %433, %160
  %435 = sub i32 %434, %162
  %436 = add i32 %435, %163
  %437 = add i32 %436, %166
  %438 = sub i32 %437, %167
  %439 = sub i32 %438, %168
  %440 = sub i32 %439, %169
  %441 = add i32 %440, %175
  %442 = sub i32 %441, %176
  %443 = add i32 %442, %178
  %444 = add i32 %443, %181
  %445 = sub i32 %444, %183
  %446 = add i32 %445, %188
  %447 = add i32 %446, %189
  %448 = sub i32 %447, %190
  %449 = sub i32 %448, %191
  %450 = add i32 %449, %192
  %451 = add i32 %450, %193
  %452 = sub i32 %451, %194
  %453 = sub i32 %452, %195
  %454 = add i32 %453, %197
  %455 = add i32 %454, %200
  %456 = sub i32 %455, %201
  %457 = add i32 %456, %202
  %458 = add i32 %457, %204
  %459 = add i32 %458, %207
  %460 = sub i32 %459, %210
  %461 = add i32 %460, %212
  %462 = sub i32 %461, %215
  %463 = add i32 %462, %218
  %464 = sub i32 %463, %219
  %465 = sub i32 %464, %220
  %466 = sub i32 %465, %221
  %467 = sub i32 %466, %224
  %468 = sub i32 %467, %226
  %469 = sub i32 %468, %227
  %470 = sub i32 %469, %229
  %471 = add i32 %470, %230
  %472 = sub i32 %471, %231
  %473 = sub i32 %472, %232
  %474 = sub i32 %473, %233
  %475 = sub i32 %474, %235
  %476 = add i32 %475, %236
  %477 = sub i32 %476, %170
  %478 = sub i32 %477, %164
  %479 = sub i32 %478, %240
  %480 = sub i32 %479, %242
  %481 = add i32 %480, %243
  %482 = add i32 %481, %245
  %483 = sub i32 %482, %251
  %484 = add i32 %483, %252
  %485 = add i32 %484, %253
  %486 = sub i32 %485, %255
  %487 = add i32 %486, %256
  %488 = sub i32 %487, %258
  %489 = sub i32 %488, %259
  %490 = sub i32 %489, %260
  %491 = sub i32 %490, %261
  %492 = add i32 %491, %265
  %493 = add i32 %492, %266
  %494 = sub i32 %493, %267
  %495 = sub i32 %494, %268
  %496 = add i32 %495, %271
  %497 = sub i32 %496, %272
  %498 = add i32 %497, %273
  %499 = sub i32 %498, %275
  %500 = add i32 %499, %279
  %501 = sub i32 %500, %283
  %502 = sub i32 %501, %284
  %503 = sub i32 %502, %285
  %504 = sub i32 %503, %287
  %505 = add i32 %504, %292
  %506 = sub i32 %505, %293
  %507 = sub i32 %506, %298
  %508 = sub i32 %507, %20
  %509 = sub i32 %508, %19
  %510 = add i32 %509, %22
  %511 = add i32 %510, %25
  %512 = sub i32 %511, %44
  %513 = sub i32 %512, %53
  %514 = sub i32 %513, %79
  %515 = add i32 %514, %89
  %516 = sub i32 %515, %106
  %517 = sub i32 %516, %121
  %518 = add i32 %517, %124
  %519 = sub i32 %518, %129
  %520 = add i32 %519, %135
  %521 = sub i32 %520, %138
  %522 = sub i32 %521, %140
  %523 = add i32 %522, %144
  %524 = sub i32 %523, %153
  %525 = sub i32 %524, %157
  %526 = sub i32 %525, %172
  %527 = sub i32 %526, %174
  %528 = add i32 %527, %177
  %529 = sub i32 %528, %180
  %530 = sub i32 %529, %186
  %531 = sub i32 %530, %199
  %532 = sub i32 %531, %206
  %533 = sub i32 %532, %209
  %534 = sub i32 %533, %213
  %535 = sub i32 %534, %217
  %536 = sub i32 %535, %238
  %537 = add i32 %536, %239
  %538 = sub i32 %537, %244
  %539 = sub i32 %538, %248
  %540 = add i32 %539, %254
  %541 = add i32 %540, %257
  %542 = sub i32 %541, %270
  %543 = add i32 %542, %277
  %544 = sub i32 %543, %281
  %545 = sub i32 %544, %288
  %546 = sub i32 %545, %290
  %547 = add i32 %546, %297
  %548 = add i32 %547, %301
  %549 = add i32 %548, %303
  %550 = add i32 %549, %304
  %551 = add i32 %550, %339
  %552 = add i32 %551, %24
  %553 = add i32 %552, %337
  %554 = add i32 %553, %334
  %555 = add i32 %554, %344
  %556 = add i32 %555, %330
  %557 = icmp eq i32 %17, %556
  %558 = select i1 %557, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %559 = tail call i32 @puts(i8* nonnull dereferenceable(1) %558)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
