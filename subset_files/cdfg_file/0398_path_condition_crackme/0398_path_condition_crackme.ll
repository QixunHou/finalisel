; ModuleID = '../.././c_source_file/0398_path_condition_crackme.c'
source_filename = "../.././c_source_file/0398_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %2
  %9 = and i32 %8, %0
  %10 = xor i32 %2, %1
  %11 = xor i32 %10, %0
  %12 = or i32 %9, %11
  %13 = xor i32 %3, -1
  %14 = or i32 %13, %4
  %15 = xor i32 %14, -1
  %16 = xor i32 %5, %4
  %17 = or i32 %16, %15
  %18 = sub i32 %17, %12
  %19 = and i32 %4, %3
  %20 = or i32 %5, %4
  %21 = xor i32 %20, %19
  %22 = sub i32 %18, %21
  %23 = and i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %7, %2
  %26 = xor i32 %25, %0
  %27 = or i32 %9, %26
  %28 = and i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %29, %1
  %31 = shl i32 %30, 1
  %32 = xor i32 %0, -1
  %33 = or i32 %10, %32
  %34 = and i32 %8, %32
  %35 = and i32 %25, %0
  %36 = or i32 %34, %35
  %37 = or i32 %1, %0
  %38 = and i32 %10, %37
  %39 = xor i32 %1, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %2, %0
  %42 = or i32 %41, %40
  %43 = xor i32 %2, -1
  %44 = and i32 %43, %0
  %45 = or i32 %43, %1
  %46 = xor i32 %44, %45
  %47 = or i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %23, %48
  %50 = or i32 %43, %0
  %51 = xor i32 %50, %23
  %52 = shl i32 %51, 1
  %53 = or i32 %7, %0
  %54 = xor i32 %53, -1
  %55 = xor i32 %54, %2
  %56 = and i32 %7, %0
  %57 = xor i32 %56, -1
  %58 = and i32 %43, %57
  %59 = and i32 %43, %40
  %60 = and i32 %43, %1
  %61 = xor i32 %60, -1
  %62 = and i32 %61, %32
  %63 = xor i32 %10, -1
  %64 = and i32 %37, %63
  %65 = or i32 %28, %1
  %66 = xor i32 %37, %2
  %67 = or i32 %2, %1
  %68 = xor i32 %28, %67
  %69 = and i32 %41, %53
  %70 = or i32 %41, %39
  %71 = shl i32 %70, 2
  %72 = xor i32 %50, -1
  %73 = or i32 %72, %1
  %74 = xor i32 %33, 2147483647
  %75 = or i32 %74, %34
  %76 = and i32 %2, %1
  %77 = and i32 %76, %0
  %78 = xor i32 %77, %11
  %79 = and i32 %43, %24
  %80 = xor i32 %41, -1
  %81 = and i32 %80, %1
  %82 = xor i32 %44, -1
  %83 = xor i32 %82, %1
  %84 = xor i32 %37, -1
  %85 = or i32 %10, %84
  %86 = and i32 %76, %32
  %87 = and i32 %67, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %86, %88
  %90 = xor i32 %48, %1
  %91 = and i32 %10, %0
  %92 = xor i32 %91, 2147483647
  %93 = xor i32 %92, %86
  %94 = shl i32 %93, 1
  %95 = and i32 %47, %1
  %96 = xor i32 %60, %0
  %97 = or i32 %72, %40
  %98 = or i32 %86, %91
  %99 = xor i32 %61, %0
  %100 = xor i32 %23, %2
  %101 = xor i32 %76, %0
  %102 = or i32 %41, %7
  %103 = shl i32 %102, 1
  %104 = or i32 %10, %23
  %105 = xor i32 %45, -1
  %106 = add i32 %45, 1
  %107 = xor i32 %29, %1
  %108 = xor i32 %67, -1
  %109 = add i32 %67, 1
  %110 = and i32 %63, %57
  %111 = or i32 %23, %105
  %112 = or i32 %44, %40
  %113 = or i32 %41, %84
  %114 = or i32 %41, %23
  %115 = or i32 %10, %0
  %116 = xor i32 %115, -1
  %117 = or i32 %9, %116
  %118 = and i32 %41, %1
  %119 = and i32 %41, %7
  %120 = and i32 %39, %82
  %121 = xor i32 %28, %53
  %122 = and i32 %45, %0
  %123 = and i32 %10, %32
  %124 = and i32 %10, %57
  %125 = add i32 %10, 1
  %126 = add i32 %41, 1
  %127 = or i32 %28, %39
  %128 = and i32 %82, %1
  %129 = xor i32 %76, -1
  %130 = and i32 %129, %0
  %131 = or i32 %44, %7
  %132 = or i32 %45, %0
  %133 = and i32 %67, %32
  %134 = and i32 %29, %7
  %135 = and i32 %82, %40
  %136 = or i32 %41, %54
  %137 = and i32 %37, %80
  %138 = and i32 %80, %40
  %139 = or i32 %44, %76
  %140 = or i32 %56, %80
  %141 = or i32 %39, %2
  %142 = or i32 %28, %7
  %143 = or i32 %105, %0
  %144 = and i32 %63, %0
  %145 = or i32 %108, %0
  %146 = xor i32 %105, %0
  %147 = and i32 %53, %2
  %148 = or i32 %77, %123
  %149 = or i32 %60, %0
  %150 = or i32 %80, %1
  %151 = or i32 %41, %1
  %152 = xor i32 %24, %2
  %153 = xor i32 %56, %129
  %154 = xor i32 %34, %33
  %155 = or i32 %44, %105
  %156 = or i32 %63, %32
  %157 = or i32 %23, %72
  %158 = xor i32 %28, %37
  %159 = or i32 %56, %63
  %160 = or i32 %28, %40
  %161 = and i32 %41, %37
  %162 = or i32 %77, %133
  %163 = or i32 %61, %32
  %164 = and i32 %29, %40
  %165 = xor i32 %28, %1
  %166 = and i32 %53, %43
  %167 = shl i32 %166, 1
  %168 = xor i32 %56, %2
  %169 = or i32 %45, %32
  %170 = or i32 %80, %84
  %171 = and i32 %50, %39
  %172 = or i32 %48, %1
  %173 = and i32 %39, %43
  %174 = xor i32 %67, %23
  %175 = or i32 %84, %2
  %176 = and i32 %37, %2
  %177 = and i32 %25, %32
  %178 = or i32 %9, %177
  %179 = and i32 %41, %24
  %180 = xor i32 %28, %61
  %181 = xor i32 %9, %115
  %182 = or i32 %48, %7
  %183 = shl i32 %182, 2
  %184 = or i32 %80, %7
  %185 = or i32 %28, %54
  %186 = and i32 %47, %40
  %187 = and i32 %10, %53
  %188 = and i32 %40, %2
  %189 = xor i32 %11, 2147483647
  %190 = xor i32 %189, %9
  %191 = shl i32 %190, 1
  %192 = or i32 %56, %2
  %193 = shl i32 %23, 1
  %194 = and i32 %61, %0
  %195 = and i32 %47, %39
  %196 = and i32 %10, %24
  %197 = add i32 %2, 1
  %198 = or i32 %67, %32
  %199 = or i32 %67, %0
  %200 = shl i32 %54, 1
  %201 = or i32 %60, %56
  %202 = or i32 %129, %0
  %203 = and i32 %50, %7
  %204 = shl i32 %1, 1
  %205 = or i32 %108, %32
  %206 = xor i32 %45, %23
  %207 = xor i32 %35, 2147483647
  %208 = xor i32 %207, %34
  %209 = or i32 %80, %40
  %210 = or i32 %63, %54
  %211 = or i32 %105, %32
  %212 = xor i32 %108, %0
  %213 = or i32 %76, %0
  %214 = xor i32 %56, %61
  %215 = xor i32 %44, %1
  %216 = xor i32 %67, %0
  %217 = xor i32 %129, %0
  %218 = xor i32 %84, %2
  %219 = or i32 %10, %56
  %220 = or i32 %41, %56
  %221 = and i32 %47, %7
  %222 = shl i32 %221, 1
  %223 = and i32 %41, %39
  %224 = and i32 %80, %7
  %225 = or i32 %43, %54
  %226 = and i32 %41, %40
  %227 = xor i32 %216, -1
  %228 = xor i32 %77, %227
  %229 = add i32 %37, 1
  %230 = xor i32 %44, %129
  %231 = or i32 %54, %2
  %232 = and i32 %39, %29
  %233 = shl i32 %232, 1
  %234 = or i32 %39, %80
  %235 = xor i32 %133, 2147483647
  %236 = xor i32 %235, %77
  %237 = shl i32 %236, 1
  %238 = and i32 %80, %24
  %239 = and i32 %129, %32
  %240 = xor i32 %72, %1
  %241 = shl i32 %240, 1
  %242 = and i32 %63, %32
  %243 = or i32 %39, %72
  %244 = or i32 %10, %54
  %245 = shl i32 %244, 1
  %246 = or i32 %72, %7
  %247 = and i32 %50, %40
  %248 = and i32 %53, %80
  %249 = and i32 %108, %32
  %250 = mul i32 %249, 10
  %251 = and i32 %60, %32
  %252 = mul i32 %251, 12
  %253 = and i32 %108, %0
  %254 = and i32 %60, %0
  %255 = shl i32 %254, 4
  %256 = and i32 %105, %32
  %257 = and i32 %105, %0
  %258 = mul i32 %77, -15
  %259 = xor i32 %4, -1
  %260 = or i32 %5, %3
  %261 = xor i32 %260, -1
  %262 = or i32 %261, %259
  %263 = or i32 %15, %5
  %264 = shl i32 %263, 2
  %265 = xor i32 %5, %3
  %266 = or i32 %265, %259
  %267 = and i32 %13, %4
  %268 = xor i32 %5, -1
  %269 = and i32 %268, %3
  %270 = xor i32 %269, -1
  %271 = xor i32 %267, %270
  %272 = and i32 %268, %4
  %273 = xor i32 %272, -1
  %274 = or i32 %268, %4
  %275 = or i32 %268, %3
  %276 = xor i32 %272, %275
  %277 = and i32 %14, %5
  %278 = xor i32 %267, -1
  %279 = and i32 %268, %278
  %280 = or i32 %19, %5
  %281 = or i32 %261, %4
  %282 = xor i32 %16, -1
  %283 = and i32 %282, %13
  %284 = or i32 %19, %261
  %285 = xor i32 %269, %4
  %286 = and i32 %16, %13
  %287 = xor i32 %4, %3
  %288 = xor i32 %287, -1
  %289 = and i32 %273, %288
  %290 = shl i32 %289, 1
  %291 = and i32 %16, %14
  %292 = and i32 %5, %3
  %293 = and i32 %292, %4
  %294 = xor i32 %265, %4
  %295 = xor i32 %294, 2147483647
  %296 = or i32 %295, %293
  %297 = shl i32 %296, 1
  %298 = and i32 %16, %278
  %299 = xor i32 %265, -1
  %300 = xor i32 %299, %4
  %301 = or i32 %272, %3
  %302 = or i32 %4, %3
  %303 = xor i32 %302, -1
  %304 = or i32 %268, %303
  %305 = xor i32 %274, -1
  %306 = and i32 %302, %268
  %307 = and i32 %302, %282
  %308 = and i32 %13, %5
  %309 = and i32 %308, %4
  %310 = or i32 %13, %5
  %311 = xor i32 %310, -1
  %312 = or i32 %311, %4
  %313 = xor i32 %309, %312
  %314 = or i32 %287, %282
  %315 = xor i32 %19, -1
  %316 = add i32 %19, 1
  %317 = or i32 %265, %19
  %318 = xor i32 %275, -1
  %319 = or i32 %272, %318
  %320 = or i32 %287, %5
  %321 = shl i32 %320, 1
  %322 = xor i32 %305, %3
  %323 = or i32 %268, %15
  %324 = and i32 %260, %4
  %325 = or i32 %299, %259
  %326 = xor i32 %260, %4
  %327 = or i32 %292, %259
  %328 = and i32 %308, %259
  %329 = xor i32 %328, %266
  %330 = and i32 %265, %278
  %331 = and i32 %315, %5
  %332 = xor i32 %267, %5
  %333 = xor i32 %274, %3
  %334 = or i32 %16, %267
  %335 = or i32 %267, %299
  %336 = or i32 %309, %294
  %337 = or i32 %299, %303
  %338 = shl i32 %337, 1
  %339 = xor i32 %14, %5
  %340 = shl i32 %339, 1
  %341 = or i32 %269, %259
  %342 = or i32 %292, %267
  %343 = xor i32 %261, %4
  %344 = or i32 %305, %3
  %345 = and i32 %282, %315
  %346 = or i32 %305, %13
  %347 = and i32 %265, %315
  %348 = or i32 %265, %267
  %349 = and i32 %5, %4
  %350 = xor i32 %349, -1
  %351 = and i32 %287, %350
  %352 = and i32 %274, %288
  %353 = or i32 %282, %13
  %354 = shl i32 %353, 1
  %355 = add i32 %349, 1
  %356 = or i32 %349, %15
  %357 = and i32 %299, %259
  %358 = shl i32 %357, 1
  %359 = or i32 %349, %287
  %360 = xor i32 %318, %4
  %361 = shl i32 %360, 1
  %362 = xor i32 %20, -1
  %363 = or i32 %362, %13
  %364 = or i32 %268, %288
  %365 = xor i32 %349, %14
  %366 = or i32 %287, %268
  %367 = or i32 %282, %288
  %368 = or i32 %267, %268
  %369 = shl i32 %368, 1
  %370 = xor i32 %315, %5
  %371 = xor i32 %278, %5
  %372 = xor i32 %275, %19
  %373 = and i32 %287, %282
  %374 = xor i32 %292, -1
  %375 = and i32 %374, %259
  %376 = shl i32 %375, 1
  %377 = and i32 %292, %259
  %378 = and i32 %265, %4
  %379 = xor i32 %378, 1073741823
  %380 = xor i32 %379, %377
  %381 = add i32 %269, 1
  %382 = or i32 %19, %299
  %383 = and i32 %350, %288
  %384 = and i32 %260, %259
  %385 = and i32 %16, %302
  %386 = xor i32 %349, %270
  %387 = and i32 %310, %4
  %388 = or i32 %328, %387
  %389 = xor i32 %349, %3
  %390 = or i32 %272, %287
  %391 = or i32 %349, %13
  %392 = and i32 %265, %302
  %393 = or i32 %349, %261
  %394 = add i32 %265, 1
  %395 = or i32 %287, %305
  %396 = and i32 %14, %268
  %397 = and i32 %270, %259
  %398 = and i32 %288, %5
  %399 = xor i32 %274, %19
  %400 = or i32 %374, %4
  %401 = xor i32 %326, -1
  %402 = xor i32 %293, %401
  %403 = xor i32 %349, %302
  %404 = or i32 %282, %303
  %405 = shl i32 %404, 1
  %406 = xor i32 %272, %374
  %407 = or i32 %19, %282
  %408 = and i32 %261, %259
  %409 = mul i32 %408, 6
  %410 = and i32 %269, %259
  %411 = and i32 %261, %4
  %412 = shl i32 %411, 3
  %413 = and i32 %269, %4
  %414 = and i32 %318, %259
  %415 = and i32 %318, %4
  %416 = add i32 %192, %2
  %417 = add i32 %416, %173
  %418 = add i32 %417, %141
  %419 = add i32 %418, %61
  %420 = add i32 %419, %257
  %421 = add i32 %420, %253
  %422 = add i32 %421, %215
  %423 = add i32 %422, %214
  %424 = add i32 %423, %210
  %425 = add i32 %424, %180
  %426 = add i32 %425, %165
  %427 = add i32 %426, %153
  %428 = add i32 %427, %151
  %429 = add i32 %428, %130
  %430 = add i32 %429, %127
  %431 = add i32 %430, %104
  %432 = add i32 %431, %68
  %433 = add i32 %432, %49
  %434 = add i32 %433, %278
  %435 = add i32 %434, %288
  %436 = add i32 %435, %181
  %437 = add i32 %436, %398
  %438 = add i32 %437, %396
  %439 = add i32 %438, %371
  %440 = add i32 %439, %370
  %441 = add i32 %440, %280
  %442 = add i32 %441, %274
  %443 = add i32 %442, %273
  %444 = add i32 %443, %208
  %445 = add i32 %444, %75
  %446 = add i32 %445, %414
  %447 = add i32 %446, %384
  %448 = add i32 %447, %359
  %449 = add i32 %448, %348
  %450 = add i32 %449, %342
  %451 = add i32 %450, %341
  %452 = add i32 %451, %285
  %453 = add i32 %452, %329
  %454 = add i32 %453, %336
  %455 = shl i32 %454, 1
  %456 = sub i32 %4, %147
  %457 = add i32 %456, %247
  %458 = sub i32 %457, %238
  %459 = sub i32 %458, %172
  %460 = sub i32 %459, %323
  %461 = add i32 %460, %281
  %462 = mul i32 %461, 5
  %463 = add i32 %410, %86
  %464 = add i32 %463, %293
  %465 = mul i32 %464, -9
  %466 = add i32 %373, %174
  %467 = add i32 %466, %380
  %468 = shl i32 %467, 2
  %469 = sub i32 %377, %415
  %470 = mul i32 %469, 19
  %471 = add i32 %413, %256
  %472 = mul i32 %471, -7
  %473 = and i32 %24, %2
  %474 = sub i32 %473, %163
  %475 = add i32 %474, %145
  %476 = add i32 %475, %114
  %477 = add i32 %476, %394
  %478 = add i32 %477, %355
  %479 = sub i32 %478, %343
  %480 = mul i32 %479, 3
  %481 = sub i32 1, %1
  %482 = add i32 %481, %23
  %483 = add i32 %482, %53
  %484 = add i32 %483, %57
  %485 = add i32 %484, %197
  %486 = sub i32 %485, %204
  %487 = sub i32 %486, %39
  %488 = add i32 %487, %229
  %489 = add i32 %488, %55
  %490 = sub i32 %489, %58
  %491 = sub i32 %490, %59
  %492 = add i32 %491, %66
  %493 = add i32 %492, %79
  %494 = add i32 %493, %100
  %495 = add i32 %494, %106
  %496 = sub i32 %495, %41
  %497 = add i32 %496, %109
  %498 = add i32 %497, %60
  %499 = add i32 %498, %45
  %500 = add i32 %499, %125
  %501 = add i32 %500, %126
  %502 = sub i32 %501, %152
  %503 = sub i32 %502, %168
  %504 = sub i32 %503, %175
  %505 = add i32 %504, %176
  %506 = add i32 %505, %188
  %507 = sub i32 %506, %193
  %508 = add i32 %507, %47
  %509 = sub i32 %508, %200
  %510 = add i32 %509, %50
  %511 = add i32 %510, %67
  %512 = sub i32 %511, %218
  %513 = add i32 %512, %225
  %514 = sub i32 %513, %231
  %515 = add i32 %514, %10
  %516 = add i32 %515, %13
  %517 = add i32 %516, %33
  %518 = add i32 %517, %38
  %519 = add i32 %518, %42
  %520 = sub i32 %519, %46
  %521 = sub i32 %520, %62
  %522 = sub i32 %521, %64
  %523 = add i32 %522, %65
  %524 = add i32 %523, %69
  %525 = sub i32 %524, %73
  %526 = sub i32 %525, %81
  %527 = add i32 %526, %83
  %528 = sub i32 %527, %85
  %529 = add i32 %528, %90
  %530 = add i32 %529, %95
  %531 = add i32 %530, %96
  %532 = add i32 %531, %97
  %533 = sub i32 %532, %99
  %534 = sub i32 %533, %101
  %535 = sub i32 %534, %107
  %536 = add i32 %535, %110
  %537 = sub i32 %536, %111
  %538 = add i32 %537, %112
  %539 = add i32 %538, %113
  %540 = sub i32 %539, %118
  %541 = sub i32 %540, %119
  %542 = add i32 %541, %120
  %543 = sub i32 %542, %121
  %544 = sub i32 %543, %122
  %545 = sub i32 %544, %123
  %546 = add i32 %545, %124
  %547 = sub i32 %546, %128
  %548 = add i32 %547, %131
  %549 = add i32 %548, %132
  %550 = add i32 %549, %133
  %551 = add i32 %550, %134
  %552 = sub i32 %551, %135
  %553 = sub i32 %552, %136
  %554 = sub i32 %553, %137
  %555 = add i32 %554, %138
  %556 = add i32 %555, %139
  %557 = sub i32 %556, %140
  %558 = sub i32 %557, %142
  %559 = sub i32 %558, %143
  %560 = sub i32 %559, %144
  %561 = add i32 %560, %146
  %562 = sub i32 %561, %149
  %563 = add i32 %562, %150
  %564 = sub i32 %563, %155
  %565 = sub i32 %564, %156
  %566 = sub i32 %565, %157
  %567 = add i32 %566, %158
  %568 = add i32 %567, %159
  %569 = add i32 %568, %160
  %570 = sub i32 %569, %161
  %571 = add i32 %570, %164
  %572 = sub i32 %571, %167
  %573 = sub i32 %572, %169
  %574 = add i32 %573, %170
  %575 = sub i32 %574, %171
  %576 = add i32 %575, %179
  %577 = sub i32 %576, %184
  %578 = add i32 %577, %185
  %579 = add i32 %578, %186
  %580 = add i32 %579, %187
  %581 = sub i32 %580, %194
  %582 = add i32 %581, %195
  %583 = sub i32 %582, %196
  %584 = add i32 %583, %198
  %585 = sub i32 %584, %199
  %586 = add i32 %585, %201
  %587 = add i32 %586, %202
  %588 = sub i32 %587, %203
  %589 = sub i32 %588, %205
  %590 = sub i32 %589, %206
  %591 = add i32 %590, %209
  %592 = sub i32 %591, %211
  %593 = add i32 %592, %212
  %594 = add i32 %593, %213
  %595 = add i32 %594, %216
  %596 = add i32 %595, %217
  %597 = sub i32 %596, %219
  %598 = add i32 %597, %220
  %599 = add i32 %598, %223
  %600 = add i32 %599, %224
  %601 = sub i32 %600, %226
  %602 = sub i32 %601, %230
  %603 = sub i32 %602, %234
  %604 = add i32 %603, %239
  %605 = sub i32 %604, %242
  %606 = add i32 %605, %243
  %607 = add i32 %606, %246
  %608 = sub i32 %607, %248
  %609 = sub i32 %608, %27
  %610 = sub i32 %609, %31
  %611 = sub i32 %610, %36
  %612 = sub i32 %611, %52
  %613 = sub i32 %612, %71
  %614 = sub i32 %613, %78
  %615 = sub i32 %614, %89
  %616 = sub i32 %615, %98
  %617 = sub i32 %616, %103
  %618 = sub i32 %617, %117
  %619 = sub i32 %618, %148
  %620 = sub i32 %619, %154
  %621 = sub i32 %620, %162
  %622 = add i32 %621, %178
  %623 = sub i32 %622, %183
  %624 = sub i32 %623, %222
  %625 = add i32 %624, %228
  %626 = sub i32 %625, %233
  %627 = sub i32 %626, %241
  %628 = sub i32 %627, %245
  %629 = add i32 %628, %250
  %630 = add i32 %629, %252
  %631 = sub i32 %630, %255
  %632 = add i32 %631, %258
  %633 = add i32 %632, %316
  %634 = sub i32 %633, %302
  %635 = add i32 %634, %5
  %636 = add i32 %635, %303
  %637 = add i32 %636, %14
  %638 = sub i32 %637, %277
  %639 = add i32 %638, %279
  %640 = sub i32 %639, %304
  %641 = add i32 %640, %305
  %642 = add i32 %641, %306
  %643 = sub i32 %642, %331
  %644 = add i32 %643, %332
  %645 = sub i32 %644, %260
  %646 = sub i32 %645, %364
  %647 = add i32 %646, %366
  %648 = sub i32 %647, %292
  %649 = add i32 %648, %381
  %650 = add i32 %649, %269
  %651 = add i32 %650, %282
  %652 = sub i32 %651, %94
  %653 = sub i32 %652, %191
  %654 = sub i32 %653, %237
  %655 = sub i32 %654, %262
  %656 = sub i32 %655, %264
  %657 = sub i32 %656, %266
  %658 = sub i32 %657, %271
  %659 = sub i32 %658, %276
  %660 = add i32 %659, %283
  %661 = add i32 %660, %284
  %662 = sub i32 %661, %286
  %663 = sub i32 %662, %291
  %664 = add i32 %663, %298
  %665 = sub i32 %664, %300
  %666 = sub i32 %665, %301
  %667 = sub i32 %666, %307
  %668 = add i32 %667, %314
  %669 = add i32 %668, %317
  %670 = add i32 %669, %319
  %671 = sub i32 %670, %321
  %672 = sub i32 %671, %294
  %673 = sub i32 %672, %322
  %674 = sub i32 %673, %324
  %675 = add i32 %674, %325
  %676 = add i32 %675, %326
  %677 = sub i32 %676, %327
  %678 = add i32 %677, %330
  %679 = add i32 %678, %333
  %680 = sub i32 %679, %334
  %681 = add i32 %680, %335
  %682 = sub i32 %681, %340
  %683 = add i32 %682, %344
  %684 = add i32 %683, %345
  %685 = sub i32 %684, %346
  %686 = add i32 %685, %347
  %687 = sub i32 %686, %351
  %688 = sub i32 %687, %352
  %689 = sub i32 %688, %356
  %690 = add i32 %689, %363
  %691 = add i32 %690, %365
  %692 = sub i32 %691, %367
  %693 = sub i32 %692, %369
  %694 = sub i32 %693, %372
  %695 = add i32 %694, %382
  %696 = sub i32 %695, %383
  %697 = sub i32 %696, %385
  %698 = sub i32 %697, %386
  %699 = sub i32 %698, %389
  %700 = sub i32 %699, %390
  %701 = sub i32 %700, %391
  %702 = add i32 %701, %392
  %703 = sub i32 %702, %393
  %704 = add i32 %703, %395
  %705 = sub i32 %704, %397
  %706 = add i32 %705, %399
  %707 = add i32 %706, %400
  %708 = sub i32 %707, %403
  %709 = sub i32 %708, %406
  %710 = add i32 %709, %407
  %711 = sub i32 %710, %290
  %712 = add i32 %711, %313
  %713 = sub i32 %712, %338
  %714 = sub i32 %713, %354
  %715 = sub i32 %714, %358
  %716 = sub i32 %715, %361
  %717 = sub i32 %716, %376
  %718 = add i32 %717, %388
  %719 = sub i32 %718, %402
  %720 = sub i32 %719, %405
  %721 = add i32 %720, %409
  %722 = sub i32 %721, %412
  %723 = add i32 %722, %470
  %724 = add i32 %723, %472
  %725 = sub i32 %724, %297
  %726 = add i32 %725, %465
  %727 = add i32 %726, %468
  %728 = add i32 %727, %462
  %729 = add i32 %728, %480
  %730 = add i32 %729, %455
  %731 = icmp eq i32 %22, %730
  %732 = select i1 %731, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %733 = tail call i32 @puts(i8* nonnull dereferenceable(1) %732)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
