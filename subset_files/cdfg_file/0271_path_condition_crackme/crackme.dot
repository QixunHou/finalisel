digraph "DFG for'crackme' function" {
	Node0x2386c00[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2386c70[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x2386d30[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x2386da0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x2386e40[shape=record, label="  %7 = xor i32 %0, 2147483647"];
	Node0x2386eb0[shape=record, label="  %8 = and i32 %7, %1"];
	Node0x2386f20[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x2386fc0[shape=record, label="  %10 = shl i32 %0, 1"];
	Node0x2387030[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x23870a0[shape=record, label="  %12 = add i32 %1, 1"];
	Node0x2387110[shape=record, label="  %13 = xor i32 %1, %0"];
	Node0x2387180[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x23871f0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x2387260[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x2387300[shape=record, label="  %17 = shl i32 %4, 2"];
	Node0x2387370[shape=record, label="  %18 = shl i32 %16, 1"];
	Node0x23873e0[shape=record, label="  %19 = shl i32 %8, 1"];
	Node0x2387450[shape=record, label="  %20 = sub i32 1, %0"];
	Node0x23874c0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x2387530[shape=record, label="  %22 = sub i32 %21, %9"];
	Node0x23875a0[shape=record, label="  %23 = sub i32 %22, %11"];
	Node0x2387610[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x2387680[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x23876f0[shape=record, label="  %26 = sub i32 %25, %18"];
	Node0x2387760[shape=record, label="  %27 = add i32 %26, %19"];
	Node0x23877d0[shape=record, label="  %28 = add i32 %27, %15"];
	Node0x2387840[shape=record, label="  %29 = icmp eq i32 %6, %28"];
	Node0x2327268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2387ce0[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0x2387d30[shape=record, label="  ret void"];
	Node0x2386c00 -> Node0x2386c70;
	Node0x2386c70 -> Node0x2386d30;
	Node0x2386d30 -> Node0x2386da0;
	Node0x2386da0 -> Node0x2386e40;
	Node0x2386e40 -> Node0x2386eb0;
	Node0x2386eb0 -> Node0x2386f20;
	Node0x2386f20 -> Node0x2386fc0;
	Node0x2386fc0 -> Node0x2387030;
	Node0x2387030 -> Node0x23870a0;
	Node0x23870a0 -> Node0x2387110;
	Node0x2387110 -> Node0x2387180;
	Node0x2387180 -> Node0x23871f0;
	Node0x23871f0 -> Node0x2387260;
	Node0x2387260 -> Node0x2387300;
	Node0x2387300 -> Node0x2387370;
	Node0x2387370 -> Node0x23873e0;
	Node0x23873e0 -> Node0x2387450;
	Node0x2387450 -> Node0x23874c0;
	Node0x23874c0 -> Node0x2387530;
	Node0x2387530 -> Node0x23875a0;
	Node0x23875a0 -> Node0x2387610;
	Node0x2387610 -> Node0x2387680;
	Node0x2387680 -> Node0x23876f0;
	Node0x23876f0 -> Node0x2387760;
	Node0x2387760 -> Node0x23877d0;
	Node0x23877d0 -> Node0x2387840;
	Node0x2387840 -> Node0x2327268;
	Node0x2327268 -> Node0x2387ce0;
	Node0x2387ce0 -> Node0x2387d30;
edge [color=red]
	Node0x2386c00 -> Node0x2386c70;
	Node0x2386c70 -> Node0x2386d30;
	Node0x2386d30 -> Node0x2386da0;
	Node0x2386e40 -> Node0x2386eb0;
	Node0x2386fc0 -> Node0x2387030;
	Node0x2387110 -> Node0x2387180;
	Node0x2387180 -> Node0x23871f0;
	Node0x2386c70 -> Node0x2387300;
	Node0x2387260 -> Node0x2387370;
	Node0x2386eb0 -> Node0x23873e0;
	Node0x2387450 -> Node0x23874c0;
	Node0x23870a0 -> Node0x23874c0;
	Node0x23874c0 -> Node0x2387530;
	Node0x2386f20 -> Node0x2387530;
	Node0x2387530 -> Node0x23875a0;
	Node0x2387030 -> Node0x23875a0;
	Node0x23875a0 -> Node0x2387610;
	Node0x2387260 -> Node0x2387610;
	Node0x2387610 -> Node0x2387680;
	Node0x2387300 -> Node0x2387680;
	Node0x2387680 -> Node0x23876f0;
	Node0x2387370 -> Node0x23876f0;
	Node0x23876f0 -> Node0x2387760;
	Node0x23873e0 -> Node0x2387760;
	Node0x2387760 -> Node0x23877d0;
	Node0x23871f0 -> Node0x23877d0;
	Node0x2386da0 -> Node0x2387840;
	Node0x23877d0 -> Node0x2387840;
	Node0x2387840 -> Node0x2327268;
	Node0x2327268 -> Node0x2387ce0;
}
