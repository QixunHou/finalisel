; ModuleID = '../.././c_source_file/1038_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1038_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %2, %0
  %11 = xor i32 %10, -1
  %12 = or i32 %11, %9
  %13 = and i32 %1, %0
  %14 = or i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = or i32 %13, %15
  %17 = add i32 %16, %12
  %18 = add i32 %17, %7
  %19 = or i32 %4, %3
  %20 = and i32 %6, %3
  %21 = xor i32 %20, -1
  %22 = and i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = add i32 %19, 1
  %25 = shl i32 %7, 1
  %26 = xor i32 %25, -2
  %27 = xor i32 %1, -1
  %28 = and i32 %27, %0
  %29 = xor i32 %28, %2
  %30 = xor i32 %2, -1
  %31 = or i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %32, %1
  %34 = or i32 %10, %9
  %35 = or i32 %8, %32
  %36 = xor i32 %0, -1
  %37 = and i32 %2, %1
  %38 = and i32 %37, %36
  %39 = xor i32 %2, %1
  %40 = and i32 %39, %0
  %41 = or i32 %38, %40
  %42 = or i32 %37, %28
  %43 = and i32 %10, %9
  %44 = shl i32 %43, 1
  %45 = and i32 %30, %1
  %46 = or i32 %45, %28
  %47 = xor i32 %28, -1
  %48 = and i32 %39, %47
  %49 = add i32 %28, 1
  %50 = xor i32 %45, -1
  %51 = or i32 %50, %0
  %52 = shl i32 %51, 1
  %53 = or i32 %2, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %13, %2
  %56 = or i32 %1, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %39, %57
  %59 = and i32 %11, %1
  %60 = and i32 %53, %8
  %61 = xor i32 %57, %2
  %62 = or i32 %30, %1
  %63 = xor i32 %62, -1
  %64 = or i32 %13, %63
  %65 = and i32 %27, %2
  %66 = and i32 %65, %36
  %67 = or i32 %27, %2
  %68 = and i32 %67, %0
  %69 = or i32 %66, %68
  %70 = add i32 %14, 1
  %71 = xor i32 %37, -1
  %72 = xor i32 %71, %0
  %73 = and i32 %65, %0
  %74 = xor i32 %67, %0
  %75 = or i32 %73, %74
  %76 = shl i32 %75, 1
  %77 = and i32 %30, %47
  %78 = or i32 %8, %30
  %79 = xor i32 %13, -1
  %80 = xor i32 %79, %2
  %81 = and i32 %2, %0
  %82 = xor i32 %81, %56
  %83 = and i32 %14, %0
  %84 = xor i32 %83, -1
  %85 = xor i32 %38, %84
  %86 = and i32 %39, %79
  %87 = xor i32 %81, %14
  %88 = xor i32 %47, %2
  %89 = shl i32 %88, 1
  %90 = and i32 %30, %0
  %91 = xor i32 %90, -1
  %92 = and i32 %91, %9
  %93 = xor i32 %31, %13
  %94 = or i32 %27, %0
  %95 = xor i32 %94, -1
  %96 = or i32 %39, %95
  %97 = or i32 %13, %54
  %98 = shl i32 %97, 1
  %99 = and i32 %10, %1
  %100 = xor i32 %81, -1
  %101 = and i32 %100, %9
  %102 = xor i32 %39, -1
  %103 = or i32 %102, %36
  %104 = and i32 %71, %36
  %105 = and i32 %37, %0
  %106 = and i32 %39, %36
  %107 = or i32 %105, %106
  %108 = and i32 %50, %36
  %109 = or i32 %10, %13
  %110 = shl i32 %109, 1
  %111 = and i32 %100, %1
  %112 = or i32 %11, %27
  %113 = xor i32 %81, %50
  %114 = add i32 %2, 1
  %115 = or i32 %57, %2
  %116 = or i32 %81, %95
  %117 = or i32 %54, %1
  %118 = shl i32 %40, 1
  %119 = and i32 %14, %36
  %120 = or i32 %105, %119
  %121 = and i32 %39, %94
  %122 = shl i32 %121, 1
  %123 = and i32 %62, %0
  %124 = or i32 %39, %0
  %125 = xor i32 %124, -1
  %126 = or i32 %73, %125
  %127 = or i32 %102, %57
  %128 = shl i32 %94, 1
  %129 = xor i32 %53, %13
  %130 = or i32 %102, %0
  %131 = shl i32 %130, 1
  %132 = xor i32 %90, %71
  %133 = or i32 %28, %102
  %134 = or i32 %8, %2
  %135 = or i32 %37, %0
  %136 = xor i32 %14, %0
  %137 = or i32 %105, %136
  %138 = shl i32 %91, 1
  %139 = or i32 %90, %63
  %140 = xor i32 %63, %0
  %141 = xor i32 %105, -1
  %142 = xor i32 %136, %141
  %143 = or i32 %39, %13
  %144 = xor i32 %90, %62
  %145 = or i32 %8, %54
  %146 = and i32 %56, %11
  %147 = shl i32 %146, 2
  %148 = or i32 %10, %27
  %149 = shl i32 %148, 1
  %150 = and i32 %53, %9
  %151 = shl i32 %150, 1
  %152 = xor i32 %81, %1
  %153 = and i32 %53, %27
  %154 = xor i32 %100, %1
  %155 = and i32 %8, %30
  %156 = and i32 %94, %11
  %157 = and i32 %56, %30
  %158 = or i32 %90, %1
  %159 = shl i32 %158, 1
  %160 = or i32 %11, %95
  %161 = xor i32 %94, %2
  %162 = and i32 %56, %2
  %163 = xor i32 %40, 2147483647
  %164 = xor i32 %163, %38
  %165 = or i32 %8, %11
  %166 = xor i32 %91, %1
  %167 = xor i32 %37, %0
  %168 = and i32 %11, %47
  %169 = xor i32 %95, %2
  %170 = or i32 %39, %36
  %171 = xor i32 %170, -1
  %172 = or i32 %66, %171
  %173 = and i32 %94, %30
  %174 = and i32 %67, %36
  %175 = xor i32 %73, -1
  %176 = xor i32 %174, %175
  %177 = or i32 %63, %0
  %178 = or i32 %90, %37
  %179 = and i32 %10, %8
  %180 = or i32 %14, %36
  %181 = and i32 %91, %1
  %182 = and i32 %91, %27
  %183 = and i32 %11, %79
  %184 = add i32 %62, 1
  %185 = and i32 %30, %9
  %186 = and i32 %71, %0
  %187 = xor i32 %119, 2147483647
  %188 = xor i32 %187, %105
  %189 = shl i32 %188, 1
  %190 = or i32 %32, %1
  %191 = or i32 %62, %0
  %192 = or i32 %11, %1
  %193 = xor i32 %62, %0
  %194 = or i32 %9, %2
  %195 = and i32 %10, %27
  %196 = and i32 %62, %36
  %197 = shl i32 %106, 1
  %198 = or i32 %81, %8
  %199 = or i32 %81, %45
  %200 = or i32 %95, %2
  %201 = add i32 %94, 1
  %202 = or i32 %15, %36
  %203 = and i32 %8, %100
  %204 = or i32 %102, %95
  %205 = and i32 %39, %56
  %206 = or i32 %71, %0
  %207 = shl i32 %83, 1
  %208 = xor i32 %50, %0
  %209 = xor i32 %39, %0
  %210 = xor i32 %105, %209
  %211 = shl i32 %210, 1
  %212 = xor i32 %209, -1
  %213 = or i32 %105, %212
  %214 = xor i32 %81, %94
  %215 = or i32 %90, %27
  %216 = xor i32 %28, %71
  %217 = and i32 %8, %91
  %218 = or i32 %13, %32
  %219 = or i32 %90, %9
  %220 = and i32 %50, %0
  %221 = xor i32 %14, %13
  %222 = xor i32 %62, %13
  %223 = or i32 %71, %36
  %224 = and i32 %31, %27
  %225 = and i32 %8, %2
  %226 = shl i32 %225, 1
  %227 = xor i32 %15, %0
  %228 = and i32 %79, %2
  %229 = shl i32 %71, 1
  %230 = xor i32 %102, %0
  %231 = or i32 %30, %95
  %232 = xor i32 %73, %124
  %233 = xor i32 %31, %1
  %234 = shl i32 %233, 1
  %235 = and i32 %8, %11
  %236 = and i32 %10, %94
  %237 = or i32 %30, %57
  %238 = shl i32 %237, 1
  %239 = or i32 %81, %15
  %240 = shl i32 %102, 1
  %241 = or i32 %39, %28
  %242 = or i32 %14, %0
  %243 = shl i32 %242, 1
  %244 = and i32 %10, %47
  %245 = and i32 %31, %9
  %246 = xor i32 %45, %0
  %247 = and i32 %102, %47
  %248 = or i32 %90, %8
  %249 = and i32 %30, %79
  %250 = or i32 %30, %9
  %251 = and i32 %102, %36
  %252 = or i32 %81, %57
  %253 = or i32 %10, %1
  %254 = or i32 %10, %28
  %255 = or i32 %10, %8
  %256 = or i32 %10, %95
  %257 = or i32 %45, %36
  %258 = or i32 %10, %57
  %259 = or i32 %37, %36
  %260 = or i32 %81, %1
  %261 = and i32 %100, %27
  %262 = and i32 %11, %9
  %263 = xor i32 %53, %1
  %264 = and i32 %11, %27
  %265 = xor i32 %74, %175
  %266 = or i32 %73, %174
  %267 = and i32 %31, %1
  %268 = or i32 %13, %30
  %269 = xor i32 %106, %141
  %270 = and i32 %31, %8
  %271 = xor i32 %90, %1
  %272 = or i32 %32, %27
  %273 = and i32 %9, %2
  %274 = or i32 %28, %11
  %275 = shl i32 %274, 1
  %276 = or i32 %38, %83
  %277 = and i32 %94, %102
  %278 = and i32 %15, %36
  %279 = mul i32 %278, -12
  %280 = and i32 %45, %36
  %281 = mul i32 %280, -23
  %282 = and i32 %15, %0
  %283 = and i32 %45, %0
  %284 = shl i32 %283, 3
  %285 = and i32 %63, %36
  %286 = shl i32 %38, 5
  %287 = and i32 %63, %0
  %288 = mul i32 %105, -9
  %289 = add i32 %228, %231
  %290 = add i32 %289, %100
  %291 = add i32 %290, %185
  %292 = add i32 %291, %31
  %293 = add i32 %292, %169
  %294 = add i32 %293, %285
  %295 = add i32 %294, %272
  %296 = add i32 %295, %256
  %297 = add i32 %296, %254
  %298 = add i32 %297, %230
  %299 = add i32 %298, %223
  %300 = add i32 %299, %218
  %301 = add i32 %300, %215
  %302 = add i32 %301, %204
  %303 = add i32 %302, %195
  %304 = add i32 %303, %181
  %305 = add i32 %304, %177
  %306 = add i32 %305, %156
  %307 = add i32 %306, %154
  %308 = add i32 %307, %132
  %309 = add i32 %308, %87
  %310 = add i32 %309, %164
  %311 = shl i32 %310, 1
  %312 = add i32 %282, %245
  %313 = sub i32 %192, %312
  %314 = add i32 %313, %108
  %315 = mul i32 %314, 5
  %316 = add i32 %24, %165
  %317 = add i32 %316, %107
  %318 = mul i32 %317, 3
  %319 = add i32 %183, 1073741823
  %320 = add i32 %319, %287
  %321 = add i32 %320, %117
  %322 = shl i32 %321, 2
  %323 = add i32 %49, %1
  %324 = add i32 %323, %56
  %325 = add i32 %324, %114
  %326 = add i32 %325, %2
  %327 = sub i32 %326, %28
  %328 = add i32 %327, %13
  %329 = add i32 %328, %201
  %330 = sub i32 %329, %29
  %331 = add i32 %330, %54
  %332 = sub i32 %331, %55
  %333 = add i32 %332, %61
  %334 = add i32 %333, %70
  %335 = add i32 %334, %14
  %336 = add i32 %335, %77
  %337 = add i32 %336, %78
  %338 = add i32 %337, %80
  %339 = sub i32 %338, %39
  %340 = sub i32 %339, %81
  %341 = add i32 %340, %115
  %342 = sub i32 %341, %128
  %343 = add i32 %342, %134
  %344 = sub i32 %343, %155
  %345 = add i32 %344, %157
  %346 = add i32 %345, %161
  %347 = add i32 %346, %162
  %348 = add i32 %347, %173
  %349 = add i32 %348, %184
  %350 = sub i32 %349, %194
  %351 = add i32 %350, %37
  %352 = sub i32 %351, %200
  %353 = add i32 %352, %32
  %354 = add i32 %353, %10
  %355 = add i32 %354, %249
  %356 = sub i32 %355, %250
  %357 = sub i32 %356, %268
  %358 = sub i32 %357, %273
  %359 = add i32 %358, %62
  %360 = add i32 %359, %6
  %361 = sub i32 %360, %33
  %362 = add i32 %361, %34
  %363 = sub i32 %362, %35
  %364 = sub i32 %363, %42
  %365 = add i32 %364, %46
  %366 = add i32 %365, %48
  %367 = sub i32 %366, %58
  %368 = sub i32 %367, %59
  %369 = add i32 %368, %60
  %370 = add i32 %369, %64
  %371 = sub i32 %370, %72
  %372 = sub i32 %371, %82
  %373 = add i32 %372, %86
  %374 = sub i32 %373, %89
  %375 = sub i32 %374, %92
  %376 = add i32 %375, %93
  %377 = sub i32 %376, %96
  %378 = add i32 %377, %99
  %379 = sub i32 %378, %101
  %380 = add i32 %379, %103
  %381 = sub i32 %380, %104
  %382 = sub i32 %381, %111
  %383 = sub i32 %382, %112
  %384 = add i32 %383, %113
  %385 = add i32 %384, %116
  %386 = sub i32 %385, %123
  %387 = sub i32 %386, %127
  %388 = sub i32 %387, %129
  %389 = add i32 %388, %133
  %390 = sub i32 %389, %135
  %391 = sub i32 %390, %138
  %392 = add i32 %391, %139
  %393 = sub i32 %392, %140
  %394 = sub i32 %393, %143
  %395 = sub i32 %394, %144
  %396 = add i32 %395, %145
  %397 = add i32 %396, %152
  %398 = sub i32 %397, %153
  %399 = add i32 %398, %160
  %400 = sub i32 %399, %166
  %401 = sub i32 %400, %167
  %402 = add i32 %401, %168
  %403 = add i32 %402, %178
  %404 = sub i32 %403, %179
  %405 = sub i32 %404, %180
  %406 = sub i32 %405, %182
  %407 = sub i32 %406, %186
  %408 = add i32 %407, %190
  %409 = add i32 %408, %191
  %410 = sub i32 %409, %193
  %411 = add i32 %410, %196
  %412 = add i32 %411, %119
  %413 = add i32 %412, %198
  %414 = add i32 %413, %199
  %415 = add i32 %414, %202
  %416 = sub i32 %415, %203
  %417 = add i32 %416, %205
  %418 = sub i32 %417, %206
  %419 = add i32 %418, %208
  %420 = add i32 %419, %214
  %421 = add i32 %420, %216
  %422 = sub i32 %421, %136
  %423 = add i32 %422, %217
  %424 = sub i32 %423, %219
  %425 = add i32 %424, %220
  %426 = sub i32 %425, %221
  %427 = sub i32 %426, %222
  %428 = sub i32 %427, %224
  %429 = sub i32 %428, %226
  %430 = add i32 %429, %227
  %431 = sub i32 %430, %229
  %432 = sub i32 %431, %235
  %433 = sub i32 %432, %236
  %434 = sub i32 %433, %238
  %435 = add i32 %434, %239
  %436 = sub i32 %435, %240
  %437 = sub i32 %436, %241
  %438 = sub i32 %437, %124
  %439 = add i32 %438, %244
  %440 = sub i32 %439, %246
  %441 = sub i32 %440, %247
  %442 = add i32 %441, %248
  %443 = sub i32 %442, %170
  %444 = add i32 %443, %251
  %445 = sub i32 %444, %252
  %446 = sub i32 %445, %253
  %447 = add i32 %446, %255
  %448 = sub i32 %447, %257
  %449 = sub i32 %448, %258
  %450 = add i32 %449, %259
  %451 = sub i32 %450, %260
  %452 = sub i32 %451, %261
  %453 = sub i32 %452, %262
  %454 = sub i32 %453, %263
  %455 = add i32 %454, %264
  %456 = sub i32 %455, %267
  %457 = add i32 %456, %270
  %458 = add i32 %457, %271
  %459 = add i32 %458, %277
  %460 = add i32 %459, %209
  %461 = sub i32 %460, %19
  %462 = add i32 %461, %21
  %463 = add i32 %462, %23
  %464 = sub i32 %463, %20
  %465 = sub i32 %464, %41
  %466 = sub i32 %465, %44
  %467 = sub i32 %466, %52
  %468 = add i32 %467, %69
  %469 = sub i32 %468, %85
  %470 = sub i32 %469, %98
  %471 = sub i32 %470, %110
  %472 = sub i32 %471, %118
  %473 = add i32 %472, %120
  %474 = sub i32 %473, %122
  %475 = sub i32 %474, %126
  %476 = sub i32 %475, %131
  %477 = add i32 %476, %137
  %478 = sub i32 %477, %142
  %479 = sub i32 %478, %147
  %480 = sub i32 %479, %149
  %481 = sub i32 %480, %151
  %482 = sub i32 %481, %159
  %483 = add i32 %482, %172
  %484 = add i32 %483, %176
  %485 = sub i32 %484, %197
  %486 = sub i32 %485, %207
  %487 = add i32 %486, %213
  %488 = add i32 %487, %232
  %489 = sub i32 %488, %234
  %490 = sub i32 %489, %243
  %491 = add i32 %490, %265
  %492 = sub i32 %491, %266
  %493 = sub i32 %492, %269
  %494 = sub i32 %493, %275
  %495 = add i32 %494, %276
  %496 = add i32 %495, %279
  %497 = add i32 %496, %281
  %498 = add i32 %497, %284
  %499 = sub i32 %498, %286
  %500 = add i32 %499, %288
  %501 = sub i32 %500, %76
  %502 = sub i32 %501, %211
  %503 = sub i32 %502, %26
  %504 = sub i32 %503, %189
  %505 = add i32 %504, %315
  %506 = add i32 %505, %318
  %507 = add i32 %506, %322
  %508 = add i32 %507, %311
  %509 = icmp eq i32 %18, %508
  %510 = select i1 %509, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %511 = tail call i32 @puts(i8* nonnull dereferenceable(1) %510)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
