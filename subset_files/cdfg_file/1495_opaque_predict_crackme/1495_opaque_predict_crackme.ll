; ModuleID = '../.././c_source_file/1495_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1495_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = and i32 %8, %2
  %10 = xor i32 %0, -1
  %11 = or i32 %7, %2
  %12 = and i32 %11, %10
  %13 = or i32 %9, %12
  %14 = xor i32 %2, %0
  %15 = or i32 %14, %8
  %16 = add i32 %13, %15
  %17 = xor i32 %4, -1
  %18 = and i32 %5, %3
  %19 = and i32 %18, %17
  %20 = xor i32 %5, %3
  %21 = and i32 %20, %4
  %22 = or i32 %19, %21
  %23 = xor i32 %5, %4
  %24 = and i32 %23, %3
  %25 = add i32 %16, %24
  %26 = sub i32 %22, %25
  %27 = or i32 %7, %0
  %28 = and i32 %27, %2
  %29 = and i32 %2, %0
  %30 = xor i32 %1, %0
  %31 = or i32 %29, %30
  %32 = xor i32 %31, -1
  %33 = xor i32 %2, -1
  %34 = and i32 %33, %1
  %35 = xor i32 %34, %10
  %36 = or i32 %33, %0
  %37 = xor i32 %36, %1
  %38 = xor i32 %8, %2
  %39 = or i32 %1, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %14, %40
  %42 = and i32 %1, %0
  %43 = xor i32 %2, %1
  %44 = or i32 %43, %42
  %45 = or i32 %14, %30
  %46 = and i32 %33, %0
  %47 = and i32 %2, %1
  %48 = or i32 %46, %47
  %49 = shl i32 %48, 1
  %50 = xor i32 %27, -1
  %51 = xor i32 %14, -1
  %52 = or i32 %51, %50
  %53 = or i32 %2, %0
  %54 = and i32 %53, %7
  %55 = or i32 %33, %1
  %56 = xor i32 %46, %55
  %57 = shl i32 %56, 1
  %58 = xor i32 %36, %7
  %59 = xor i32 %53, %42
  %60 = or i32 %14, %50
  %61 = and i32 %34, %10
  %62 = or i32 %2, %1
  %63 = xor i32 %62, 1073741823
  %64 = and i32 %63, %0
  %65 = shl i32 %64, 2
  %66 = and i32 %34, %0
  %67 = xor i32 %55, -1
  %68 = and i32 %67, %10
  %69 = and i32 %47, %10
  %70 = shl i32 %69, 1
  %71 = and i32 %67, %0
  %72 = and i32 %47, %0
  %73 = and i32 %4, %3
  %74 = or i32 %5, %4
  %75 = xor i32 %74, -1
  %76 = or i32 %73, %75
  %77 = and i32 %5, %4
  %78 = xor i32 %3, -1
  %79 = or i32 %78, %4
  %80 = xor i32 %77, %79
  %81 = xor i32 %20, -1
  %82 = or i32 %81, %17
  %83 = shl i32 %82, 1
  %84 = or i32 %5, %3
  %85 = xor i32 %84, -1
  %86 = or i32 %77, %85
  %87 = and i32 %18, %4
  %88 = xor i32 %84, %4
  %89 = or i32 %87, %88
  %90 = or i32 %85, %4
  %91 = xor i32 %18, -1
  %92 = xor i32 %5, -1
  %93 = and i32 %92, %4
  %94 = or i32 %93, %78
  %95 = and i32 %78, %4
  %96 = xor i32 %95, -1
  %97 = and i32 %20, %96
  %98 = shl i32 %97, 1
  %99 = and i32 %78, %5
  %100 = and i32 %99, %17
  %101 = or i32 %78, %5
  %102 = and i32 %101, %4
  %103 = xor i32 %102, -1
  %104 = xor i32 %100, %103
  %105 = xor i32 %77, -1
  %106 = xor i32 %105, %3
  %107 = or i32 %4, %3
  %108 = and i32 %20, %107
  %109 = or i32 %92, %4
  %110 = xor i32 %109, -1
  %111 = or i32 %110, %78
  %112 = shl i32 %111, 1
  %113 = xor i32 %93, -1
  %114 = xor i32 %4, %3
  %115 = and i32 %114, %113
  %116 = xor i32 %79, -1
  %117 = xor i32 %23, -1
  %118 = or i32 %117, %116
  %119 = or i32 %23, %116
  %120 = shl i32 %119, 1
  %121 = and i32 %92, %3
  %122 = or i32 %77, %121
  %123 = and i32 %84, %4
  %124 = xor i32 %123, -1
  %125 = xor i32 %19, %124
  %126 = and i32 %99, %4
  %127 = xor i32 %20, %4
  %128 = or i32 %126, %127
  %129 = xor i32 %84, %73
  %130 = or i32 %92, %116
  %131 = or i32 %23, %78
  %132 = and i32 %20, %17
  %133 = and i32 %113, %78
  %134 = xor i32 %121, -1
  %135 = xor i32 %95, %134
  %136 = and i32 %109, %3
  %137 = xor i32 %107, -1
  %138 = and i32 %79, %5
  %139 = or i32 %73, %81
  %140 = xor i32 %134, %4
  %141 = shl i32 %140, 1
  %142 = and i32 %105, %3
  %143 = xor i32 %95, %91
  %144 = or i32 %73, %5
  %145 = and i32 %74, %3
  %146 = or i32 %18, %17
  %147 = shl i32 %146, 1
  %148 = or i32 %23, %3
  %149 = or i32 %95, %117
  %150 = shl i32 %149, 1
  %151 = and i32 %114, %105
  %152 = or i32 %114, %92
  %153 = or i32 %20, %17
  %154 = xor i32 %153, -1
  %155 = or i32 %100, %154
  %156 = and i32 %96, %5
  %157 = shl i32 %156, 2
  %158 = xor i32 %77, %134
  %159 = xor i32 %101, -1
  %160 = or i32 %159, %4
  %161 = xor i32 %126, %160
  %162 = xor i32 %101, %4
  %163 = or i32 %126, %162
  %164 = or i32 %73, %110
  %165 = xor i32 %74, %73
  %166 = or i32 %121, %95
  %167 = xor i32 %107, %5
  %168 = xor i32 %77, %84
  %169 = or i32 %73, %85
  %170 = and i32 %79, %117
  %171 = or i32 %92, %3
  %172 = xor i32 %171, -1
  %173 = or i32 %172, %4
  %174 = or i32 %91, %17
  %175 = xor i32 %87, -1
  %176 = xor i32 %132, %175
  %177 = shl i32 %117, 1
  %178 = xor i32 %114, -1
  %179 = and i32 %113, %178
  %180 = or i32 %116, %5
  %181 = shl i32 %180, 1
  %182 = or i32 %85, %17
  %183 = or i32 %93, %18
  %184 = or i32 %75, %78
  %185 = and i32 %92, %96
  %186 = shl i32 %74, 1
  %187 = or i32 %23, %137
  %188 = or i32 %137, %5
  %189 = and i32 %105, %178
  %190 = and i32 %117, %78
  %191 = xor i32 %95, %5
  %192 = xor i32 %88, %175
  %193 = or i32 %92, %178
  %194 = shl i32 %193, 1
  %195 = xor i32 %73, -1
  %196 = and i32 %23, %195
  %197 = add i32 %109, 1
  %198 = and i32 %91, %17
  %199 = shl i32 %198, 1
  %200 = and i32 %20, %195
  %201 = and i32 %81, %17
  %202 = or i32 %121, %17
  %203 = and i32 %81, %4
  %204 = and i32 %117, %3
  %205 = xor i32 %100, %153
  %206 = and i32 %107, %92
  %207 = and i32 %81, %96
  %208 = and i32 %84, %17
  %209 = or i32 %87, %208
  %210 = and i32 %20, %79
  %211 = and i32 %195, %5
  %212 = or i32 %84, %17
  %213 = and i32 %114, %5
  %214 = xor i32 %74, %3
  %215 = and i32 %23, %178
  %216 = xor i32 %109, %73
  %217 = xor i32 %87, %127
  %218 = or i32 %93, %172
  %219 = and i32 %79, %92
  %220 = xor i32 %172, %4
  %221 = or i32 %178, %5
  %222 = or i32 %20, %137
  %223 = shl i32 %222, 1
  %224 = or i32 %20, %4
  %225 = xor i32 %126, %224
  %226 = or i32 %93, %3
  %227 = and i32 %23, %78
  %228 = xor i32 %195, %5
  %229 = or i32 %20, %116
  %230 = and i32 %114, %117
  %231 = xor i32 %113, %3
  %232 = or i32 %110, %3
  %233 = xor i32 %81, %4
  %234 = xor i32 %77, %3
  %235 = shl i32 %78, 1
  %236 = and i32 %23, %107
  %237 = xor i32 %224, -1
  %238 = or i32 %126, %237
  %239 = or i32 %114, %117
  %240 = shl i32 %239, 1
  %241 = or i32 %23, %95
  %242 = and i32 %113, %3
  %243 = and i32 %109, %178
  %244 = shl i32 %243, 1
  %245 = xor i32 %85, %4
  %246 = and i32 %74, %78
  %247 = xor i32 %109, %3
  %248 = xor i32 %75, %3
  %249 = or i32 %77, %137
  %250 = or i32 %77, %116
  %251 = and i32 %23, %79
  %252 = shl i32 %251, 1
  %253 = or i32 %134, %17
  %254 = or i32 %95, %81
  %255 = xor i32 %93, %171
  %256 = or i32 %73, %172
  %257 = or i32 %81, %4
  %258 = and i32 %23, %114
  %259 = or i32 %81, %116
  %260 = or i32 %19, %123
  %261 = and i32 %23, %96
  %262 = xor i32 %79, %5
  %263 = shl i32 %262, 1
  %264 = and i32 %109, %114
  %265 = or i32 %92, %137
  %266 = or i32 %134, %4
  %267 = shl i32 %266, 1
  %268 = or i32 %73, %117
  %269 = shl i32 %268, 1
  %270 = and i32 %107, %81
  %271 = shl i32 %270, 1
  %272 = or i32 %114, %75
  %273 = xor i32 %171, %73
  %274 = and i32 %134, %17
  %275 = xor i32 %110, %3
  %276 = xor i32 %171, %4
  %277 = or i32 %18, %95
  %278 = and i32 %91, %4
  %279 = and i32 %117, %96
  %280 = or i32 %23, %178
  %281 = xor i32 %127, 2147483647
  %282 = xor i32 %281, %126
  %283 = shl i32 %282, 1
  %284 = or i32 %117, %178
  %285 = xor i32 %18, %4
  %286 = or i32 %110, %178
  %287 = or i32 %77, %178
  %288 = and i32 %117, %178
  %289 = shl i32 %178, 1
  %290 = or i32 %73, %92
  %291 = and i32 %114, %92
  %292 = shl i32 %123, 1
  %293 = or i32 %81, %137
  %294 = shl i32 %293, 2
  %295 = and i32 %85, %17
  %296 = mul i32 %295, 27
  %297 = and i32 %121, %17
  %298 = and i32 %85, %4
  %299 = mul i32 %298, 10
  %300 = and i32 %121, %4
  %301 = and i32 %172, %17
  %302 = mul i32 %301, 25
  %303 = mul i32 %19, 15
  %304 = and i32 %172, %4
  %305 = mul i32 %304, 9
  %306 = add i32 %59, %61
  %307 = sub i32 %306, %185
  %308 = sub i32 %307, %132
  %309 = sub i32 %308, %231
  %310 = add i32 %309, %122
  %311 = sub i32 %310, %108
  %312 = mul i32 %311, 5
  %313 = sub i32 %87, %130
  %314 = sub i32 %313, %276
  %315 = sub i32 %314, %135
  %316 = add i32 %315, %192
  %317 = mul i32 %316, 3
  %318 = sub i32 %72, %71
  %319 = sub i32 %318, %68
  %320 = add i32 %319, %300
  %321 = mul i32 %320, 6
  %322 = add i32 %214, %207
  %323 = shl i32 %322, 2
  %324 = xor i32 %28, -1
  %325 = add i32 %66, %324
  %326 = add i32 %325, %137
  %327 = add i32 %326, %206
  %328 = add i32 %327, %191
  %329 = add i32 %328, %188
  %330 = add i32 %329, %152
  %331 = add i32 %330, %297
  %332 = add i32 %331, %287
  %333 = add i32 %332, %250
  %334 = add i32 %333, %234
  %335 = add i32 %334, %220
  %336 = add i32 %335, %215
  %337 = add i32 %336, %201
  %338 = add i32 %337, %187
  %339 = add i32 %338, %184
  %340 = add i32 %339, %158
  %341 = add i32 %340, %151
  %342 = add i32 %341, %145
  %343 = add i32 %342, %143
  %344 = add i32 %343, %136
  %345 = add i32 %344, %129
  %346 = add i32 %345, %217
  %347 = shl i32 %346, 1
  %348 = add i32 %38, %3
  %349 = add i32 %348, %32
  %350 = add i32 %349, %35
  %351 = add i32 %350, %37
  %352 = sub i32 %351, %41
  %353 = add i32 %352, %44
  %354 = sub i32 %353, %45
  %355 = sub i32 %354, %52
  %356 = add i32 %355, %54
  %357 = sub i32 %356, %58
  %358 = sub i32 %357, %60
  %359 = sub i32 %358, %235
  %360 = sub i32 %359, %49
  %361 = sub i32 %360, %57
  %362 = sub i32 %361, %70
  %363 = sub i32 %362, %79
  %364 = add i32 %363, %96
  %365 = sub i32 %364, %65
  %366 = sub i32 %365, %138
  %367 = add i32 %366, %144
  %368 = sub i32 %367, %109
  %369 = sub i32 %368, %167
  %370 = add i32 %369, %171
  %371 = add i32 %370, %121
  %372 = add i32 %371, %197
  %373 = add i32 %372, %75
  %374 = add i32 %373, %211
  %375 = sub i32 %374, %213
  %376 = sub i32 %375, %219
  %377 = add i32 %376, %221
  %378 = add i32 %377, %228
  %379 = sub i32 %378, %23
  %380 = add i32 %379, %77
  %381 = sub i32 %380, %265
  %382 = sub i32 %381, %289
  %383 = add i32 %382, %290
  %384 = add i32 %383, %291
  %385 = add i32 %384, %76
  %386 = add i32 %385, %80
  %387 = sub i32 %386, %86
  %388 = add i32 %387, %90
  %389 = sub i32 %388, %94
  %390 = add i32 %389, %106
  %391 = add i32 %390, %115
  %392 = sub i32 %391, %118
  %393 = sub i32 %392, %131
  %394 = sub i32 %393, %133
  %395 = add i32 %394, %139
  %396 = sub i32 %395, %142
  %397 = sub i32 %396, %148
  %398 = sub i32 %397, %157
  %399 = sub i32 %398, %164
  %400 = sub i32 %399, %165
  %401 = add i32 %400, %166
  %402 = add i32 %401, %168
  %403 = add i32 %402, %169
  %404 = add i32 %403, %170
  %405 = add i32 %404, %173
  %406 = add i32 %405, %174
  %407 = sub i32 %406, %177
  %408 = sub i32 %407, %179
  %409 = sub i32 %408, %181
  %410 = sub i32 %409, %182
  %411 = sub i32 %410, %183
  %412 = sub i32 %411, %186
  %413 = add i32 %412, %127
  %414 = add i32 %413, %189
  %415 = sub i32 %414, %190
  %416 = sub i32 %415, %194
  %417 = sub i32 %416, %196
  %418 = sub i32 %417, %200
  %419 = add i32 %418, %202
  %420 = add i32 %419, %203
  %421 = sub i32 %420, %88
  %422 = sub i32 %421, %204
  %423 = add i32 %422, %210
  %424 = add i32 %423, %212
  %425 = add i32 %424, %216
  %426 = sub i32 %425, %153
  %427 = sub i32 %426, %218
  %428 = add i32 %427, %224
  %429 = add i32 %428, %226
  %430 = add i32 %429, %227
  %431 = add i32 %430, %229
  %432 = add i32 %431, %230
  %433 = sub i32 %432, %232
  %434 = sub i32 %433, %233
  %435 = sub i32 %434, %208
  %436 = sub i32 %435, %236
  %437 = sub i32 %436, %241
  %438 = add i32 %437, %242
  %439 = sub i32 %438, %245
  %440 = sub i32 %439, %246
  %441 = sub i32 %440, %247
  %442 = sub i32 %441, %248
  %443 = add i32 %442, %249
  %444 = sub i32 %443, %253
  %445 = add i32 %444, %254
  %446 = add i32 %445, %255
  %447 = add i32 %446, %256
  %448 = add i32 %447, %257
  %449 = add i32 %448, %258
  %450 = sub i32 %449, %259
  %451 = add i32 %450, %261
  %452 = sub i32 %451, %263
  %453 = add i32 %452, %264
  %454 = add i32 %453, %272
  %455 = sub i32 %454, %273
  %456 = add i32 %455, %274
  %457 = add i32 %456, %275
  %458 = sub i32 %457, %277
  %459 = sub i32 %458, %278
  %460 = sub i32 %459, %279
  %461 = sub i32 %460, %280
  %462 = add i32 %461, %284
  %463 = sub i32 %462, %285
  %464 = add i32 %463, %286
  %465 = sub i32 %464, %288
  %466 = sub i32 %465, %21
  %467 = sub i32 %466, %83
  %468 = add i32 %467, %89
  %469 = sub i32 %468, %98
  %470 = add i32 %469, %104
  %471 = sub i32 %470, %112
  %472 = sub i32 %471, %120
  %473 = sub i32 %472, %125
  %474 = sub i32 %473, %128
  %475 = sub i32 %474, %141
  %476 = sub i32 %475, %147
  %477 = sub i32 %476, %150
  %478 = sub i32 %477, %155
  %479 = add i32 %478, %161
  %480 = sub i32 %479, %163
  %481 = add i32 %480, %176
  %482 = sub i32 %481, %199
  %483 = add i32 %482, %205
  %484 = sub i32 %483, %209
  %485 = sub i32 %484, %223
  %486 = add i32 %485, %225
  %487 = sub i32 %486, %238
  %488 = sub i32 %487, %240
  %489 = sub i32 %488, %244
  %490 = sub i32 %489, %252
  %491 = add i32 %490, %260
  %492 = sub i32 %491, %267
  %493 = sub i32 %492, %269
  %494 = sub i32 %493, %271
  %495 = sub i32 %494, %292
  %496 = sub i32 %495, %294
  %497 = add i32 %496, %296
  %498 = add i32 %497, %299
  %499 = add i32 %498, %302
  %500 = add i32 %499, %303
  %501 = add i32 %500, %305
  %502 = add i32 %501, %323
  %503 = sub i32 %502, %283
  %504 = add i32 %503, %321
  %505 = add i32 %504, %317
  %506 = add i32 %505, %312
  %507 = add i32 %506, %347
  %508 = icmp eq i32 %26, %507
  %509 = select i1 %508, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %510 = tail call i32 @puts(i8* nonnull dereferenceable(1) %509)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
