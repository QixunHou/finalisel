digraph "DFG for'crackme' function" {
	Node0x16c7fa0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x16c8010[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x16c8080[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x16c80f0[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0x16c8160[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x16c81d0[shape=record, label="  %10 = sub i32 %8, %9"];
	Node0x16c8240[shape=record, label="  %11 = xor i32 %1, -1"];
	Node0x16c82b0[shape=record, label="  %12 = xor i32 %11, %2"];
	Node0x16c8320[shape=record, label="  %13 = or i32 %11, %2"];
	Node0x16c8390[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x16c8400[shape=record, label="  %15 = and i32 %3, %0"];
	Node0x16c8470[shape=record, label="  %16 = xor i32 %7, -1"];
	Node0x16c84e0[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x16c8550[shape=record, label="  %18 = or i32 %17, %3"];
	Node0x16c85c0[shape=record, label="  %19 = and i32 %17, %3"];
	Node0x16c8660[shape=record, label="  %20 = shl i32 %19, 2"];
	Node0x16c86d0[shape=record, label="  %21 = shl i32 %15, 2"];
	Node0x16c8770[shape=record, label="  %22 = shl i32 %3, 1"];
	Node0x16c8810[shape=record, label="  %23 = sub i32 3, %0"];
	Node0x16c8880[shape=record, label="  %24 = add i32 %23, %11"];
	Node0x16c88f0[shape=record, label="  %25 = sub i32 %24, %13"];
	Node0x16c8960[shape=record, label="  %26 = add i32 %25, %12"];
	Node0x16c89d0[shape=record, label="  %27 = add i32 %26, %14"];
	Node0x16c8a40[shape=record, label="  %28 = add i32 %27, %6"];
	Node0x16c8ab0[shape=record, label="  %29 = add i32 %28, %15"];
	Node0x16c8b20[shape=record, label="  %30 = add i32 %29, %16"];
	Node0x16c8b90[shape=record, label="  %31 = add i32 %30, %18"];
	Node0x16c8c00[shape=record, label="  %32 = add i32 %31, %9"];
	Node0x16c8e80[shape=record, label="  %33 = add i32 %32, %22"];
	Node0x16c8ef0[shape=record, label="  %34 = sub i32 %33, %20"];
	Node0x16c8f60[shape=record, label="  %35 = sub i32 %34, %21"];
	Node0x16c8fd0[shape=record, label="  %36 = icmp eq i32 %10, %35"];
	Node0x1668268[shape=record, label="  %37 = select i1 %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16c9470[shape=record, label="  %38 = tail call i32 @puts(i8* nonnull dereferenceable(1) %37)"];
	Node0x16c94c0[shape=record, label="  ret void"];
	Node0x16c7fa0 -> Node0x16c8010;
	Node0x16c8010 -> Node0x16c8080;
	Node0x16c8080 -> Node0x16c80f0;
	Node0x16c80f0 -> Node0x16c8160;
	Node0x16c8160 -> Node0x16c81d0;
	Node0x16c81d0 -> Node0x16c8240;
	Node0x16c8240 -> Node0x16c82b0;
	Node0x16c82b0 -> Node0x16c8320;
	Node0x16c8320 -> Node0x16c8390;
	Node0x16c8390 -> Node0x16c8400;
	Node0x16c8400 -> Node0x16c8470;
	Node0x16c8470 -> Node0x16c84e0;
	Node0x16c84e0 -> Node0x16c8550;
	Node0x16c8550 -> Node0x16c85c0;
	Node0x16c85c0 -> Node0x16c8660;
	Node0x16c8660 -> Node0x16c86d0;
	Node0x16c86d0 -> Node0x16c8770;
	Node0x16c8770 -> Node0x16c8810;
	Node0x16c8810 -> Node0x16c8880;
	Node0x16c8880 -> Node0x16c88f0;
	Node0x16c88f0 -> Node0x16c8960;
	Node0x16c8960 -> Node0x16c89d0;
	Node0x16c89d0 -> Node0x16c8a40;
	Node0x16c8a40 -> Node0x16c8ab0;
	Node0x16c8ab0 -> Node0x16c8b20;
	Node0x16c8b20 -> Node0x16c8b90;
	Node0x16c8b90 -> Node0x16c8c00;
	Node0x16c8c00 -> Node0x16c8e80;
	Node0x16c8e80 -> Node0x16c8ef0;
	Node0x16c8ef0 -> Node0x16c8f60;
	Node0x16c8f60 -> Node0x16c8fd0;
	Node0x16c8fd0 -> Node0x1668268;
	Node0x1668268 -> Node0x16c9470;
	Node0x16c9470 -> Node0x16c94c0;
edge [color=red]
	Node0x16c7fa0 -> Node0x16c8010;
	Node0x16c8010 -> Node0x16c80f0;
	Node0x16c8080 -> Node0x16c80f0;
	Node0x16c80f0 -> Node0x16c81d0;
	Node0x16c8160 -> Node0x16c81d0;
	Node0x16c8240 -> Node0x16c82b0;
	Node0x16c8240 -> Node0x16c8320;
	Node0x16c8080 -> Node0x16c8470;
	Node0x16c84e0 -> Node0x16c8550;
	Node0x16c84e0 -> Node0x16c85c0;
	Node0x16c85c0 -> Node0x16c8660;
	Node0x16c8400 -> Node0x16c86d0;
	Node0x16c8810 -> Node0x16c8880;
	Node0x16c8240 -> Node0x16c8880;
	Node0x16c8880 -> Node0x16c88f0;
	Node0x16c8320 -> Node0x16c88f0;
	Node0x16c88f0 -> Node0x16c8960;
	Node0x16c82b0 -> Node0x16c8960;
	Node0x16c8960 -> Node0x16c89d0;
	Node0x16c8390 -> Node0x16c89d0;
	Node0x16c89d0 -> Node0x16c8a40;
	Node0x16c8010 -> Node0x16c8a40;
	Node0x16c8a40 -> Node0x16c8ab0;
	Node0x16c8400 -> Node0x16c8ab0;
	Node0x16c8ab0 -> Node0x16c8b20;
	Node0x16c8470 -> Node0x16c8b20;
	Node0x16c8b20 -> Node0x16c8b90;
	Node0x16c8550 -> Node0x16c8b90;
	Node0x16c8b90 -> Node0x16c8c00;
	Node0x16c8160 -> Node0x16c8c00;
	Node0x16c8c00 -> Node0x16c8e80;
	Node0x16c8770 -> Node0x16c8e80;
	Node0x16c8e80 -> Node0x16c8ef0;
	Node0x16c8660 -> Node0x16c8ef0;
	Node0x16c8ef0 -> Node0x16c8f60;
	Node0x16c86d0 -> Node0x16c8f60;
	Node0x16c81d0 -> Node0x16c8fd0;
	Node0x16c8f60 -> Node0x16c8fd0;
	Node0x16c8fd0 -> Node0x1668268;
	Node0x1668268 -> Node0x16c9470;
}
