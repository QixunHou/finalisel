; ModuleID = '../.././c_source_file/1235_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1235_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %2
  %6 = and i32 %5, %0
  %7 = xor i32 %0, -1
  %8 = or i32 %4, %2
  %9 = and i32 %8, %7
  %10 = or i32 %6, %9
  %11 = and i32 %2, %1
  %12 = and i32 %11, %0
  %13 = xor i32 %2, %1
  %14 = xor i32 %13, %0
  %15 = xor i32 %12, %14
  %16 = mul i32 %15, -5
  %17 = sub i32 %16, %10
  %18 = and i32 %4, %0
  %19 = xor i32 %18, -1
  %20 = and i32 %19, %2
  %21 = xor i32 %13, -1
  %22 = and i32 %21, %19
  %23 = xor i32 %11, -1
  %24 = xor i32 %18, %23
  %25 = xor i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %26
  %30 = xor i32 %2, -1
  %31 = or i32 %30, %1
  %32 = xor i32 %31, -1
  %33 = shl i32 %32, 1
  %34 = xor i32 %14, -1
  %35 = xor i32 %6, %34
  %36 = or i32 %4, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %27, %37
  %39 = or i32 %30, %0
  %40 = xor i32 %39, %1
  %41 = or i32 %21, %0
  %42 = and i32 %2, %0
  %43 = or i32 %42, %4
  %44 = or i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %1
  %47 = and i32 %5, %7
  %48 = and i32 %8, %0
  %49 = or i32 %47, %48
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %30, %51
  %53 = and i32 %30, %0
  %54 = xor i32 %53, -1
  %55 = and i32 %25, %54
  %56 = and i32 %54, %26
  %57 = and i32 %25, %2
  %58 = or i32 %2, %1
  %59 = and i32 %58, %7
  %60 = or i32 %12, %59
  %61 = and i32 %1, %0
  %62 = xor i32 %61, -1
  %63 = and i32 %62, %2
  %64 = and i32 %27, %25
  %65 = xor i32 %36, %2
  %66 = or i32 %21, %37
  %67 = xor i32 %37, %2
  %68 = xor i32 %53, %31
  %69 = and i32 %58, %0
  %70 = xor i32 %39, -1
  %71 = xor i32 %70, %1
  %72 = xor i32 %48, -1
  %73 = xor i32 %47, %72
  %74 = or i32 %13, %37
  %75 = and i32 %30, %62
  %76 = shl i32 %75, 1
  %77 = and i32 %13, %36
  %78 = or i32 %25, %2
  %79 = or i32 %42, %26
  %80 = and i32 %39, %1
  %81 = xor i32 %51, %2
  %82 = xor i32 %58, -1
  %83 = xor i32 %42, %50
  %84 = and i32 %44, %26
  %85 = and i32 %30, %1
  %86 = or i32 %85, %18
  %87 = shl i32 %86, 1
  %88 = xor i32 %42, -1
  %89 = and i32 %88, %1
  %90 = or i32 %53, %32
  %91 = xor i32 %39, %61
  %92 = or i32 %42, %25
  %93 = or i32 %61, %28
  %94 = or i32 %13, %0
  %95 = or i32 %12, %34
  %96 = and i32 %39, %25
  %97 = or i32 %82, %7
  %98 = or i32 %61, %30
  %99 = and i32 %13, %50
  %100 = xor i32 %42, %36
  %101 = or i32 %70, %4
  %102 = or i32 %13, %51
  %103 = and i32 %11, %7
  %104 = xor i32 %103, -1
  %105 = xor i32 %69, %104
  %106 = or i32 %51, %2
  %107 = shl i32 %106, 2
  %108 = xor i32 %82, %0
  %109 = and i32 %39, %4
  %110 = or i32 %70, %1
  %111 = xor i32 %19, %2
  %112 = shl i32 %111, 1
  %113 = and i32 %25, %88
  %114 = or i32 %103, %69
  %115 = xor i32 %85, -1
  %116 = xor i32 %58, %0
  %117 = or i32 %12, %116
  %118 = or i32 %70, %26
  %119 = and i32 %50, %30
  %120 = shl i32 %119, 1
  %121 = and i32 %36, %2
  %122 = shl i32 %121, 1
  %123 = xor i32 %54, %1
  %124 = or i32 %58, %0
  %125 = shl i32 %124, 1
  %126 = or i32 %58, %7
  %127 = or i32 %32, %7
  %128 = add i32 %53, 1
  %129 = xor i32 %32, %0
  %130 = xor i32 %44, %61
  %131 = and i32 %13, %19
  %132 = or i32 %25, %70
  %133 = or i32 %27, %4
  %134 = and i32 %28, %4
  %135 = or i32 %11, %0
  %136 = xor i32 %9, 2147483647
  %137 = xor i32 %136, %6
  %138 = or i32 %18, %28
  %139 = or i32 %85, %0
  %140 = or i32 %85, %7
  %141 = or i32 %53, %25
  %142 = or i32 %53, %4
  %143 = shl i32 %11, 1
  %144 = shl i32 %70, 1
  %145 = or i32 %21, %7
  %146 = xor i32 %18, %2
  %147 = and i32 %31, %7
  %148 = and i32 %13, %0
  %149 = and i32 %13, %62
  %150 = xor i32 %53, %23
  %151 = or i32 %27, %18
  %152 = or i32 %28, %51
  %153 = or i32 %28, %4
  %154 = shl i32 %153, 1
  %155 = xor i32 %53, %1
  %156 = or i32 %61, %82
  %157 = and i32 %50, %28
  %158 = xor i32 %23, %0
  %159 = shl i32 %59, 1
  %160 = and i32 %13, %7
  %161 = xor i32 %12, -1
  %162 = xor i32 %160, %161
  %163 = and i32 %50, %21
  %164 = or i32 %23, %0
  %165 = or i32 %42, %51
  %166 = or i32 %53, %1
  %167 = xor i32 %59, %161
  %168 = or i32 %61, %70
  %169 = and i32 %50, %2
  %170 = shl i32 %169, 2
  %171 = xor i32 %45, %1
  %172 = or i32 %18, %30
  %173 = xor i32 %148, %104
  %174 = or i32 %82, %0
  %175 = shl i32 %174, 1
  %176 = and i32 %27, %50
  %177 = shl i32 %176, 1
  %178 = or i32 %28, %37
  %179 = or i32 %32, %0
  %180 = or i32 %13, %7
  %181 = xor i32 %180, -1
  %182 = or i32 %47, %181
  %183 = and i32 %27, %4
  %184 = and i32 %23, %0
  %185 = add i32 %13, 1
  %186 = or i32 %53, %11
  %187 = and i32 %25, %30
  %188 = or i32 %25, %30
  %189 = or i32 %61, %2
  %190 = and i32 %30, %26
  %191 = xor i32 %31, %61
  %192 = and i32 %28, %19
  %193 = xor i32 %42, %115
  %194 = or i32 %27, %1
  %195 = or i32 %27, %26
  %196 = or i32 %61, %45
  %197 = and i32 %27, %36
  %198 = and i32 %82, %7
  %199 = mul i32 %198, -21
  %200 = and i32 %85, %7
  %201 = mul i32 %200, -23
  %202 = and i32 %82, %0
  %203 = and i32 %85, %0
  %204 = mul i32 %203, -7
  %205 = and i32 %32, %7
  %206 = mul i32 %205, -11
  %207 = shl i32 %103, 1
  %208 = and i32 %32, %0
  %209 = shl i32 %208, 3
  %210 = mul i32 %12, -13
  %211 = add i32 %44, %187
  %212 = add i32 %211, %57
  %213 = add i32 %212, %202
  %214 = add i32 %213, %195
  %215 = add i32 %214, %165
  %216 = add i32 %215, %126
  %217 = add i32 %216, %113
  %218 = add i32 %217, %97
  %219 = add i32 %218, %94
  %220 = add i32 %219, %92
  %221 = add i32 %220, %83
  %222 = add i32 %221, %46
  %223 = add i32 %222, %43
  %224 = add i32 %223, %137
  %225 = shl i32 %224, 1
  %226 = sub i32 %66, %188
  %227 = add i32 %226, %99
  %228 = mul i32 %227, 3
  %229 = sub i32 %192, %117
  %230 = mul i32 %229, 5
  %231 = sub i32 %0, %1
  %232 = sub i32 %231, %50
  %233 = add i32 %232, %61
  %234 = sub i32 %233, %25
  %235 = sub i32 %234, %20
  %236 = add i32 %235, %52
  %237 = sub i32 %236, %63
  %238 = add i32 %237, %65
  %239 = add i32 %238, %67
  %240 = add i32 %239, %45
  %241 = add i32 %240, %78
  %242 = add i32 %241, %81
  %243 = add i32 %242, %82
  %244 = sub i32 %243, %98
  %245 = add i32 %244, %115
  %246 = add i32 %245, %39
  %247 = add i32 %246, %128
  %248 = sub i32 %247, %146
  %249 = sub i32 %248, %172
  %250 = add i32 %249, %185
  %251 = sub i32 %250, %189
  %252 = add i32 %251, %190
  %253 = add i32 %252, %22
  %254 = add i32 %253, %24
  %255 = add i32 %254, %29
  %256 = sub i32 %255, %33
  %257 = add i32 %256, %38
  %258 = sub i32 %257, %40
  %259 = add i32 %258, %41
  %260 = add i32 %259, %55
  %261 = sub i32 %260, %56
  %262 = sub i32 %261, %64
  %263 = add i32 %262, %68
  %264 = add i32 %263, %69
  %265 = sub i32 %264, %71
  %266 = add i32 %265, %74
  %267 = sub i32 %266, %76
  %268 = add i32 %267, %77
  %269 = add i32 %268, %79
  %270 = add i32 %269, %80
  %271 = sub i32 %270, %84
  %272 = sub i32 %271, %89
  %273 = sub i32 %272, %90
  %274 = sub i32 %273, %91
  %275 = sub i32 %274, %93
  %276 = sub i32 %275, %96
  %277 = add i32 %276, %100
  %278 = sub i32 %277, %101
  %279 = add i32 %278, %102
  %280 = add i32 %279, %107
  %281 = add i32 %280, %108
  %282 = add i32 %281, %109
  %283 = add i32 %282, %110
  %284 = sub i32 %283, %112
  %285 = add i32 %284, %14
  %286 = add i32 %285, %118
  %287 = sub i32 %286, %120
  %288 = sub i32 %287, %122
  %289 = add i32 %288, %123
  %290 = add i32 %289, %127
  %291 = sub i32 %290, %129
  %292 = add i32 %291, %130
  %293 = add i32 %292, %131
  %294 = sub i32 %293, %132
  %295 = sub i32 %294, %133
  %296 = add i32 %295, %134
  %297 = add i32 %296, %135
  %298 = sub i32 %297, %138
  %299 = sub i32 %298, %139
  %300 = sub i32 %299, %140
  %301 = add i32 %300, %141
  %302 = sub i32 %301, %142
  %303 = sub i32 %302, %143
  %304 = sub i32 %303, %144
  %305 = sub i32 %304, %145
  %306 = add i32 %305, %147
  %307 = add i32 %306, %148
  %308 = add i32 %307, %149
  %309 = add i32 %308, %150
  %310 = sub i32 %309, %151
  %311 = sub i32 %310, %152
  %312 = add i32 %311, %155
  %313 = sub i32 %312, %156
  %314 = add i32 %313, %157
  %315 = add i32 %314, %158
  %316 = sub i32 %315, %163
  %317 = add i32 %316, %164
  %318 = add i32 %317, %166
  %319 = sub i32 %318, %168
  %320 = sub i32 %319, %170
  %321 = sub i32 %320, %171
  %322 = add i32 %321, %178
  %323 = add i32 %322, %179
  %324 = sub i32 %323, %183
  %325 = add i32 %324, %184
  %326 = sub i32 %325, %186
  %327 = add i32 %326, %180
  %328 = sub i32 %327, %191
  %329 = sub i32 %328, %160
  %330 = add i32 %329, %193
  %331 = add i32 %330, %194
  %332 = sub i32 %331, %196
  %333 = sub i32 %332, %197
  %334 = sub i32 %333, %35
  %335 = sub i32 %334, %49
  %336 = add i32 %335, %60
  %337 = add i32 %336, %73
  %338 = sub i32 %337, %87
  %339 = sub i32 %338, %95
  %340 = sub i32 %339, %105
  %341 = sub i32 %340, %114
  %342 = sub i32 %341, %125
  %343 = sub i32 %342, %154
  %344 = sub i32 %343, %159
  %345 = sub i32 %344, %162
  %346 = sub i32 %345, %167
  %347 = add i32 %346, %173
  %348 = sub i32 %347, %175
  %349 = sub i32 %348, %177
  %350 = sub i32 %349, %182
  %351 = add i32 %350, %199
  %352 = add i32 %351, %201
  %353 = add i32 %352, %204
  %354 = add i32 %353, %206
  %355 = sub i32 %354, %207
  %356 = sub i32 %355, %209
  %357 = add i32 %356, %210
  %358 = add i32 %357, %228
  %359 = add i32 %358, %230
  %360 = add i32 %359, %225
  %361 = icmp eq i32 %17, %360
  %362 = select i1 %361, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %363 = tail call i32 @puts(i8* nonnull dereferenceable(1) %362)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
