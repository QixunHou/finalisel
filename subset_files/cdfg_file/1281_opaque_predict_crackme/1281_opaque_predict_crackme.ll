; ModuleID = '../.././c_source_file/1281_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1281_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, %0
  %6 = and i32 %5, %4
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %0
  %11 = sub i32 %10, %6
  %12 = xor i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %7, %13
  %15 = or i32 %12, %7
  %16 = and i32 %4, %0
  %17 = and i32 %5, %13
  %18 = and i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = and i32 %19, %0
  %21 = or i32 %4, %0
  %22 = xor i32 %21, -1
  %23 = shl i32 %22, 2
  %24 = xor i32 %8, %0
  %25 = or i32 %2, %0
  %26 = and i32 %25, %12
  %27 = and i32 %7, %0
  %28 = xor i32 %27, -1
  %29 = add i32 %27, 1
  %30 = xor i32 %5, -1
  %31 = and i32 %30, %1
  %32 = or i32 %5, %13
  %33 = xor i32 %0, -1
  %34 = and i32 %18, %33
  %35 = or i32 %2, %1
  %36 = and i32 %35, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %34, %37
  %39 = and i32 %1, %0
  %40 = xor i32 %25, -1
  %41 = or i32 %39, %40
  %42 = or i32 %7, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %33
  %45 = or i32 %1, %0
  %46 = xor i32 %45, %2
  %47 = or i32 %43, %0
  %48 = xor i32 %35, %0
  %49 = xor i32 %16, -1
  %50 = xor i32 %2, %1
  %51 = and i32 %50, %49
  %52 = or i32 %27, %18
  %53 = and i32 %2, %0
  %54 = or i32 %53, %12
  %55 = or i32 %34, %36
  %56 = shl i32 %55, 2
  %57 = and i32 %18, %0
  %58 = xor i32 %50, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %57, %59
  %61 = or i32 %50, %39
  %62 = and i32 %45, %2
  %63 = xor i32 %39, -1
  %64 = and i32 %63, %2
  %65 = and i32 %50, %21
  %66 = xor i32 %50, -1
  %67 = or i32 %39, %66
  %68 = shl i32 %58, 2
  %69 = and i32 %12, %28
  %70 = xor i32 %42, %0
  %71 = and i32 %66, %63
  %72 = shl i32 %30, 1
  %73 = xor i32 %66, %0
  %74 = and i32 %50, %0
  %75 = xor i32 %57, %58
  %76 = or i32 %66, %22
  %77 = xor i32 %53, %9
  %78 = xor i32 %16, %19
  %79 = and i32 %35, %33
  %80 = or i32 %57, %79
  %81 = add i32 %1, 1
  %82 = or i32 %50, %33
  %83 = or i32 %16, %66
  %84 = or i32 %30, %4
  %85 = or i32 %57, %48
  %86 = shl i32 %85, 1
  %87 = and i32 %12, %7
  %88 = or i32 %7, %0
  %89 = xor i32 %88, -1
  %90 = xor i32 %89, %1
  %91 = xor i32 %35, -1
  %92 = or i32 %91, %33
  %93 = or i32 %35, %33
  %94 = or i32 %40, %13
  %95 = or i32 %19, %33
  %96 = and i32 %88, %13
  %97 = xor i32 %91, %0
  %98 = or i32 %7, %22
  %99 = xor i32 %45, -1
  %100 = or i32 %66, %99
  %101 = shl i32 %100, 1
  %102 = xor i32 %53, -1
  %103 = xor i32 %102, %1
  %104 = shl i32 %103, 1
  %105 = or i32 %66, %0
  %106 = or i32 %50, %16
  %107 = xor i32 %25, %1
  %108 = and i32 %30, %49
  %109 = or i32 %16, %7
  %110 = or i32 %12, %30
  %111 = or i32 %35, %0
  %112 = add i32 %88, 1
  %113 = and i32 %4, %2
  %114 = and i32 %113, %0
  %115 = or i32 %4, %2
  %116 = xor i32 %115, %0
  %117 = xor i32 %116, -1
  %118 = xor i32 %114, %117
  %119 = and i32 %42, %33
  %120 = and i32 %21, %2
  %121 = xor i32 %53, %35
  %122 = shl i32 %121, 1
  %123 = or i32 %27, %1
  %124 = and i32 %50, %45
  %125 = xor i32 %63, %2
  %126 = shl i32 %125, 1
  %127 = xor i32 %53, %1
  %128 = and i32 %113, %33
  %129 = and i32 %115, %0
  %130 = or i32 %128, %129
  %131 = shl i32 %130, 1
  %132 = or i32 %42, %0
  %133 = shl i32 %132, 1
  %134 = xor i32 %27, %1
  %135 = and i32 %7, %49
  %136 = and i32 %50, %33
  %137 = or i32 %39, %30
  %138 = shl i32 %137, 1
  %139 = and i32 %5, %49
  %140 = and i32 %5, %45
  %141 = or i32 %39, %89
  %142 = shl i32 %141, 1
  %143 = or i32 %89, %4
  %144 = xor i32 %82, -1
  %145 = or i32 %128, %144
  %146 = and i32 %5, %12
  %147 = xor i32 %16, %9
  %148 = xor i32 %49, %2
  %149 = shl i32 %148, 1
  %150 = shl i32 %7, 1
  %151 = xor i32 %25, %39
  %152 = and i32 %102, %4
  %153 = or i32 %30, %22
  %154 = or i32 %53, %13
  %155 = or i32 %27, %43
  %156 = or i32 %57, %136
  %157 = or i32 %8, %16
  %158 = shl i32 %157, 1
  %159 = xor i32 %114, %59
  %160 = shl i32 %159, 1
  %161 = or i32 %89, %1
  %162 = xor i32 %27, %19
  %163 = xor i32 %88, %39
  %164 = shl i32 %163, 1
  %165 = xor i32 %53, %21
  %166 = xor i32 %99, %2
  %167 = or i32 %16, %2
  %168 = or i32 %7, %99
  %169 = or i32 %5, %4
  %170 = xor i32 %88, %1
  %171 = and i32 %25, %4
  %172 = and i32 %42, %0
  %173 = xor i32 %43, %0
  %174 = or i32 %19, %0
  %175 = or i32 %53, %1
  %176 = or i32 %5, %99
  %177 = xor i32 %129, -1
  %178 = xor i32 %128, %177
  %179 = xor i32 %35, %39
  %180 = and i32 %9, %0
  %181 = or i32 %91, %0
  %182 = or i32 %12, %89
  %183 = xor i32 %57, -1
  %184 = xor i32 %136, %183
  %185 = xor i32 %128, %82
  %186 = or i32 %114, %116
  %187 = or i32 %30, %1
  %188 = or i32 %27, %13
  %189 = and i32 %28, %1
  %190 = or i32 %7, %13
  %191 = and i32 %102, %13
  %192 = xor i32 %79, %183
  %193 = or i32 %50, %99
  %194 = xor i32 %48, 1073741823
  %195 = xor i32 %194, %57
  %196 = xor i32 %40, %1
  %197 = and i32 %66, %49
  %198 = or i32 %5, %1
  %199 = or i32 %114, %58
  %200 = or i32 %53, %8
  %201 = and i32 %19, %33
  %202 = or i32 %12, %40
  %203 = or i32 %53, %4
  %204 = and i32 %13, %2
  %205 = and i32 %45, %7
  %206 = add i32 %42, 1
  %207 = xor i32 %39, %2
  %208 = or i32 %53, %22
  %209 = or i32 %34, %74
  %210 = or i32 %8, %0
  %211 = shl i32 %210, 1
  %212 = and i32 %12, %30
  %213 = and i32 %12, %102
  %214 = and i32 %66, %33
  %215 = xor i32 %21, %2
  %216 = and i32 %25, %13
  %217 = and i32 %25, %1
  %218 = xor i32 %42, %39
  %219 = add i32 %18, 1
  %220 = or i32 %27, %12
  %221 = xor i32 %53, %45
  %222 = or i32 %5, %12
  %223 = and i32 %115, %33
  %224 = or i32 %114, %223
  %225 = or i32 %18, %33
  %226 = xor i32 %18, %0
  %227 = or i32 %30, %99
  %228 = or i32 %89, %13
  %229 = and i32 %28, %4
  %230 = and i32 %88, %1
  %231 = or i32 %39, %43
  %232 = and i32 %30, %4
  %233 = shl i32 %36, 1
  %234 = or i32 %50, %0
  %235 = xor i32 %114, %234
  %236 = and i32 %9, %33
  %237 = or i32 %40, %4
  %238 = and i32 %5, %63
  %239 = or i32 %18, %16
  %240 = and i32 %91, %33
  %241 = mul i32 %240, 12
  %242 = and i32 %8, %33
  %243 = shl i32 %242, 3
  %244 = and i32 %8, %0
  %245 = mul i32 %244, -11
  %246 = and i32 %43, %33
  %247 = and i32 %43, %0
  %248 = mul i32 %247, 19
  %249 = add i32 %40, %99
  %250 = add i32 %249, %64
  %251 = add i32 %250, %15
  %252 = add i32 %251, %228
  %253 = add i32 %252, %221
  %254 = add i32 %253, %203
  %255 = add i32 %254, %200
  %256 = add i32 %255, %181
  %257 = add i32 %256, %161
  %258 = add i32 %257, %123
  %259 = add i32 %258, %95
  %260 = add i32 %259, %90
  %261 = add i32 %260, %52
  %262 = add i32 %261, %32
  %263 = add i32 %262, %80
  %264 = shl i32 %263, 1
  %265 = add i32 %229, %87
  %266 = add i32 %265, %246
  %267 = sub i32 %197, %266
  %268 = add i32 %267, %51
  %269 = add i32 %268, %48
  %270 = mul i32 %269, 3
  %271 = sub i32 %215, %62
  %272 = sub i32 %271, %83
  %273 = sub i32 %272, %34
  %274 = sub i32 %273, %41
  %275 = mul i32 %274, 5
  %276 = add i32 %24, %57
  %277 = add i32 %276, %195
  %278 = shl i32 %277, 2
  %279 = add i32 %81, %0
  %280 = add i32 %279, %1
  %281 = sub i32 %280, %16
  %282 = add i32 %281, %21
  %283 = add i32 %282, %45
  %284 = add i32 %283, %13
  %285 = sub i32 %284, %12
  %286 = add i32 %285, %2
  %287 = add i32 %286, %14
  %288 = sub i32 %287, %23
  %289 = add i32 %288, %29
  %290 = add i32 %289, %46
  %291 = add i32 %290, %25
  %292 = add i32 %291, %50
  %293 = add i32 %292, %18
  %294 = add i32 %293, %98
  %295 = sub i32 %294, %109
  %296 = add i32 %295, %112
  %297 = add i32 %296, %120
  %298 = add i32 %297, %27
  %299 = add i32 %298, %53
  %300 = sub i32 %299, %135
  %301 = add i32 %300, %88
  %302 = sub i32 %301, %150
  %303 = sub i32 %302, %166
  %304 = sub i32 %303, %167
  %305 = add i32 %304, %42
  %306 = sub i32 %305, %168
  %307 = sub i32 %306, %190
  %308 = add i32 %307, %204
  %309 = sub i32 %308, %205
  %310 = add i32 %309, %206
  %311 = add i32 %310, %207
  %312 = add i32 %311, %219
  %313 = sub i32 %312, %17
  %314 = add i32 %313, %20
  %315 = sub i32 %314, %26
  %316 = add i32 %315, %31
  %317 = sub i32 %316, %44
  %318 = sub i32 %317, %47
  %319 = sub i32 %318, %54
  %320 = sub i32 %319, %61
  %321 = add i32 %320, %65
  %322 = sub i32 %321, %67
  %323 = add i32 %322, %69
  %324 = add i32 %323, %70
  %325 = add i32 %324, %71
  %326 = sub i32 %325, %72
  %327 = add i32 %326, %73
  %328 = add i32 %327, %74
  %329 = add i32 %328, %76
  %330 = sub i32 %329, %77
  %331 = sub i32 %330, %78
  %332 = sub i32 %331, %82
  %333 = add i32 %332, %84
  %334 = add i32 %333, %92
  %335 = sub i32 %334, %93
  %336 = add i32 %335, %94
  %337 = sub i32 %336, %96
  %338 = add i32 %337, %97
  %339 = add i32 %338, %105
  %340 = add i32 %339, %106
  %341 = add i32 %340, %107
  %342 = add i32 %341, %108
  %343 = sub i32 %342, %110
  %344 = add i32 %343, %111
  %345 = add i32 %344, %119
  %346 = sub i32 %345, %124
  %347 = sub i32 %346, %126
  %348 = sub i32 %347, %127
  %349 = sub i32 %348, %134
  %350 = sub i32 %349, %136
  %351 = sub i32 %350, %139
  %352 = sub i32 %351, %140
  %353 = sub i32 %352, %143
  %354 = add i32 %353, %146
  %355 = add i32 %354, %147
  %356 = sub i32 %355, %149
  %357 = add i32 %356, %151
  %358 = sub i32 %357, %152
  %359 = sub i32 %358, %153
  %360 = sub i32 %359, %154
  %361 = add i32 %360, %155
  %362 = sub i32 %361, %162
  %363 = sub i32 %362, %165
  %364 = add i32 %363, %169
  %365 = sub i32 %364, %170
  %366 = add i32 %365, %171
  %367 = sub i32 %366, %172
  %368 = add i32 %367, %173
  %369 = add i32 %368, %174
  %370 = add i32 %369, %175
  %371 = add i32 %370, %176
  %372 = sub i32 %371, %179
  %373 = sub i32 %372, %180
  %374 = sub i32 %373, %182
  %375 = add i32 %374, %187
  %376 = sub i32 %375, %188
  %377 = add i32 %376, %189
  %378 = add i32 %377, %191
  %379 = sub i32 %378, %193
  %380 = add i32 %379, %196
  %381 = sub i32 %380, %198
  %382 = sub i32 %381, %201
  %383 = add i32 %382, %202
  %384 = sub i32 %383, %208
  %385 = sub i32 %384, %212
  %386 = add i32 %385, %213
  %387 = sub i32 %386, %214
  %388 = sub i32 %387, %216
  %389 = add i32 %388, %217
  %390 = add i32 %389, %218
  %391 = add i32 %390, %220
  %392 = add i32 %391, %222
  %393 = add i32 %392, %225
  %394 = sub i32 %393, %226
  %395 = add i32 %394, %227
  %396 = sub i32 %395, %230
  %397 = add i32 %396, %231
  %398 = sub i32 %397, %232
  %399 = add i32 %398, %236
  %400 = sub i32 %399, %237
  %401 = sub i32 %400, %238
  %402 = add i32 %401, %239
  %403 = sub i32 %402, %38
  %404 = sub i32 %403, %60
  %405 = sub i32 %404, %68
  %406 = add i32 %405, %75
  %407 = sub i32 %406, %101
  %408 = sub i32 %407, %104
  %409 = add i32 %408, %118
  %410 = sub i32 %409, %122
  %411 = sub i32 %410, %133
  %412 = sub i32 %411, %138
  %413 = sub i32 %412, %142
  %414 = add i32 %413, %145
  %415 = add i32 %414, %156
  %416 = sub i32 %415, %158
  %417 = sub i32 %416, %164
  %418 = add i32 %417, %178
  %419 = sub i32 %418, %184
  %420 = sub i32 %419, %185
  %421 = sub i32 %420, %186
  %422 = sub i32 %421, %192
  %423 = sub i32 %422, %199
  %424 = add i32 %423, %209
  %425 = sub i32 %424, %211
  %426 = sub i32 %425, %224
  %427 = sub i32 %426, %233
  %428 = add i32 %427, %235
  %429 = add i32 %428, %241
  %430 = add i32 %429, %243
  %431 = add i32 %430, %245
  %432 = add i32 %431, %248
  %433 = sub i32 %432, %56
  %434 = sub i32 %433, %86
  %435 = sub i32 %434, %131
  %436 = sub i32 %435, %160
  %437 = add i32 %436, %275
  %438 = add i32 %437, %278
  %439 = add i32 %438, %270
  %440 = add i32 %439, %264
  %441 = icmp eq i32 %11, %440
  %442 = select i1 %441, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %443 = tail call i32 @puts(i8* nonnull dereferenceable(1) %442)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
