digraph "DFG for'crackme' function" {
	Node0x2458b60[shape=record, label="  %3 = sub i32 0, %0"];
	Node0x2458bd0[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x2458c90[shape=record, label="  %5 = xor i32 %1, 2147483647"];
	Node0x2458d30[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x2458da0[shape=record, label="  %7 = and i32 %6, %1"];
	Node0x2458e10[shape=record, label="  %8 = xor i32 %6, %1"];
	Node0x2458e80[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x2458ef0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x2458f90[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0x2459030[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x24590a0[shape=record, label="  %13 = and i32 %5, %0"];
	Node0x2459110[shape=record, label="  %14 = shl i32 %4, 1"];
	Node0x2459180[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x24591f0[shape=record, label="  %16 = sub i32 %9, %4"];
	Node0x2459260[shape=record, label="  %17 = add i32 %16, %13"];
	Node0x24592d0[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x2459370[shape=record, label="  %19 = add i32 %7, 2"];
	Node0x24593e0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x2459450[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x24594c0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x2459530[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0x24595a0[shape=record, label="  %24 = add i32 %23, %18"];
	Node0x2459610[shape=record, label="  %25 = icmp eq i32 %24, %3"];
	Node0x23f9268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2459ab0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x2459b00[shape=record, label="  ret void"];
	Node0x2458b60 -> Node0x2458bd0;
	Node0x2458bd0 -> Node0x2458c90;
	Node0x2458c90 -> Node0x2458d30;
	Node0x2458d30 -> Node0x2458da0;
	Node0x2458da0 -> Node0x2458e10;
	Node0x2458e10 -> Node0x2458e80;
	Node0x2458e80 -> Node0x2458ef0;
	Node0x2458ef0 -> Node0x2458f90;
	Node0x2458f90 -> Node0x2459030;
	Node0x2459030 -> Node0x24590a0;
	Node0x24590a0 -> Node0x2459110;
	Node0x2459110 -> Node0x2459180;
	Node0x2459180 -> Node0x24591f0;
	Node0x24591f0 -> Node0x2459260;
	Node0x2459260 -> Node0x24592d0;
	Node0x24592d0 -> Node0x2459370;
	Node0x2459370 -> Node0x24593e0;
	Node0x24593e0 -> Node0x2459450;
	Node0x2459450 -> Node0x24594c0;
	Node0x24594c0 -> Node0x2459530;
	Node0x2459530 -> Node0x24595a0;
	Node0x24595a0 -> Node0x2459610;
	Node0x2459610 -> Node0x23f9268;
	Node0x23f9268 -> Node0x2459ab0;
	Node0x2459ab0 -> Node0x2459b00;
edge [color=red]
	Node0x2458d30 -> Node0x2458da0;
	Node0x2458d30 -> Node0x2458e10;
	Node0x2458e80 -> Node0x2458ef0;
	Node0x2458f90 -> Node0x2459030;
	Node0x2458c90 -> Node0x24590a0;
	Node0x2458bd0 -> Node0x2459110;
	Node0x2459110 -> Node0x2459180;
	Node0x2458e80 -> Node0x24591f0;
	Node0x2458bd0 -> Node0x24591f0;
	Node0x24591f0 -> Node0x2459260;
	Node0x24590a0 -> Node0x2459260;
	Node0x2459260 -> Node0x24592d0;
	Node0x2458da0 -> Node0x2459370;
	Node0x2459370 -> Node0x24593e0;
	Node0x2458e10 -> Node0x24593e0;
	Node0x24593e0 -> Node0x2459450;
	Node0x2458ef0 -> Node0x2459450;
	Node0x2459450 -> Node0x24594c0;
	Node0x2459030 -> Node0x24594c0;
	Node0x24594c0 -> Node0x2459530;
	Node0x2459180 -> Node0x2459530;
	Node0x2459530 -> Node0x24595a0;
	Node0x24592d0 -> Node0x24595a0;
	Node0x24595a0 -> Node0x2459610;
	Node0x2458b60 -> Node0x2459610;
	Node0x2459610 -> Node0x23f9268;
	Node0x23f9268 -> Node0x2459ab0;
}
