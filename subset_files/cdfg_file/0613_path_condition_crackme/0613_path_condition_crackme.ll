; ModuleID = '../.././c_source_file/0613_path_condition_crackme.c'
source_filename = "../.././c_source_file/0613_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = and i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = sub i32 %10, %6
  %12 = xor i32 %0, -1
  %13 = and i32 %2, %1
  %14 = and i32 %13, %12
  %15 = and i32 %8, %0
  %16 = or i32 %14, %15
  %17 = add i32 %11, %16
  %18 = and i32 %4, %3
  %19 = xor i32 %18, -1
  %20 = xor i32 %4, -1
  %21 = and i32 %20, %3
  %22 = shl i32 %6, 1
  %23 = xor i32 %22, -2
  %24 = or i32 %4, %3
  %25 = shl i32 %24, 2
  %26 = xor i32 %25, -4
  %27 = xor i32 %3, 1073741823
  %28 = and i32 %27, %4
  %29 = shl i32 %28, 2
  %30 = or i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %7, %31
  %33 = or i32 %1, %0
  %34 = xor i32 %33, %2
  %35 = xor i32 %1, -1
  %36 = and i32 %35, %2
  %37 = and i32 %36, %0
  %38 = xor i32 %8, %0
  %39 = or i32 %37, %38
  %40 = and i32 %35, %0
  %41 = or i32 %13, %40
  %42 = xor i32 %2, -1
  %43 = or i32 %42, %0
  %44 = xor i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = and i32 %43, %45
  %47 = or i32 %35, %2
  %48 = xor i32 %47, %0
  %49 = xor i32 %48, 2147483647
  %50 = xor i32 %49, %37
  %51 = and i32 %36, %12
  %52 = and i32 %47, %0
  %53 = or i32 %51, %52
  %54 = xor i32 %40, %2
  %55 = and i32 %42, %1
  %56 = and i32 %2, %0
  %57 = or i32 %56, %1
  %58 = or i32 %2, %1
  %59 = and i32 %58, %0
  %60 = or i32 %14, %59
  %61 = or i32 %44, %31
  %62 = xor i32 %2, %0
  %63 = or i32 %62, %35
  %64 = and i32 %42, %0
  %65 = xor i32 %64, -1
  %66 = and i32 %65, %45
  %67 = or i32 %42, %1
  %68 = xor i32 %67, %0
  %69 = xor i32 %56, -1
  %70 = and i32 %44, %69
  %71 = xor i32 %56, %58
  %72 = xor i32 %62, -1
  %73 = and i32 %72, %1
  %74 = or i32 %35, %0
  %75 = xor i32 %74, -1
  %76 = or i32 %8, %75
  %77 = xor i32 %43, -1
  %78 = and i32 %33, %2
  %79 = and i32 %62, %1
  %80 = and i32 %13, %0
  %81 = and i32 %8, %12
  %82 = xor i32 %81, 2147483647
  %83 = xor i32 %82, %80
  %84 = xor i32 %40, -1
  %85 = shl i32 %84, 1
  %86 = xor i32 %58, -1
  %87 = or i32 %86, %0
  %88 = xor i32 %67, -1
  %89 = or i32 %64, %88
  %90 = shl i32 %89, 1
  %91 = and i32 %8, %33
  %92 = shl i32 %91, 2
  %93 = or i32 %13, %0
  %94 = or i32 %62, %45
  %95 = xor i32 %80, %38
  %96 = xor i32 %86, %0
  %97 = or i32 %40, %72
  %98 = and i32 %30, %1
  %99 = and i32 %43, %35
  %100 = shl i32 %99, 1
  %101 = xor i32 %38, -1
  %102 = or i32 %80, %101
  %103 = xor i32 %7, -1
  %104 = and i32 %9, %103
  %105 = or i32 %42, %45
  %106 = xor i32 %33, -1
  %107 = or i32 %62, %106
  %108 = or i32 %75, %2
  %109 = or i32 %7, %72
  %110 = or i32 %40, %2
  %111 = or i32 %86, %12
  %112 = or i32 %64, %45
  %113 = or i32 %9, %106
  %114 = shl i32 %42, 1
  %115 = and i32 %47, %12
  %116 = or i32 %37, %115
  %117 = xor i32 %31, %1
  %118 = or i32 %37, %48
  %119 = shl i32 %118, 1
  %120 = xor i32 %58, %12
  %121 = xor i32 %120, %80
  %122 = xor i32 %13, %0
  %123 = or i32 %9, %0
  %124 = and i32 %33, %9
  %125 = xor i32 %67, %7
  %126 = and i32 %62, %84
  %127 = shl i32 %126, 1
  %128 = or i32 %56, %106
  %129 = and i32 %42, %103
  %130 = or i32 %88, %0
  %131 = or i32 %77, %35
  %132 = xor i32 %88, %0
  %133 = xor i32 %30, %7
  %134 = and i32 %9, %0
  %135 = and i32 %58, %12
  %136 = or i32 %80, %135
  %137 = shl i32 %136, 1
  %138 = and i32 %44, %42
  %139 = xor i32 %14, -1
  %140 = xor i32 %15, %139
  %141 = xor i32 %13, -1
  %142 = and i32 %141, %12
  %143 = or i32 %55, %40
  %144 = xor i32 %9, %0
  %145 = and i32 %67, %12
  %146 = or i32 %72, %1
  %147 = or i32 %8, %12
  %148 = and i32 %72, %84
  %149 = xor i32 %43, %1
  %150 = xor i32 %55, -1
  %151 = or i32 %150, %0
  %152 = or i32 %56, %45
  %153 = or i32 %8, %7
  %154 = xor i32 %84, %2
  %155 = and i32 %62, %45
  %156 = and i32 %74, %2
  %157 = and i32 %30, %35
  %158 = or i32 %45, %2
  %159 = and i32 %74, %72
  %160 = or i32 %40, %42
  %161 = or i32 %42, %106
  %162 = shl i32 %161, 1
  %163 = or i32 %72, %45
  %164 = and i32 %62, %33
  %165 = or i32 %55, %0
  %166 = or i32 %58, %12
  %167 = and i32 %8, %84
  %168 = xor i32 %64, %141
  %169 = or i32 %56, %44
  %170 = xor i32 %106, %2
  %171 = or i32 %77, %1
  %172 = xor i32 %141, %0
  %173 = or i32 %40, %9
  %174 = xor i32 %69, %1
  %175 = shl i32 %174, 1
  %176 = xor i32 %150, %0
  %177 = or i32 %88, %12
  %178 = shl i32 %177, 1
  %179 = xor i32 %7, %2
  %180 = and i32 %44, %65
  %181 = and i32 %62, %35
  %182 = or i32 %8, %40
  %183 = xor i32 %56, %33
  %184 = and i32 %30, %44
  %185 = or i32 %31, %1
  %186 = and i32 %8, %74
  %187 = and i32 %150, %12
  %188 = xor i32 %147, -1
  %189 = or i32 %51, %188
  %190 = or i32 %44, %72
  %191 = or i32 %64, %44
  %192 = or i32 %8, %106
  %193 = or i32 %141, %12
  %194 = or i32 %44, %77
  %195 = or i32 %56, %86
  %196 = or i32 %62, %40
  %197 = or i32 %31, %45
  %198 = and i32 %33, %72
  %199 = or i32 %77, %45
  %200 = xor i32 %43, %7
  %201 = and i32 %9, %12
  %202 = add i32 %13, 1
  %203 = or i32 %64, %1
  %204 = and i32 %42, %45
  %205 = or i32 %72, %75
  %206 = and i32 %72, %45
  %207 = or i32 %31, %35
  %208 = or i32 %7, %2
  %209 = and i32 %74, %42
  %210 = or i32 %62, %75
  %211 = shl i32 %210, 1
  %212 = xor i32 %37, %101
  %213 = xor i32 %56, %150
  %214 = and i32 %69, %1
  %215 = shl i32 %214, 1
  %216 = and i32 %42, %84
  %217 = shl i32 %9, 1
  %218 = or i32 %72, %35
  %219 = and i32 %69, %45
  %220 = and i32 %62, %74
  %221 = or i32 %56, %75
  %222 = and i32 %43, %44
  %223 = and i32 %150, %0
  %224 = or i32 %56, %55
  %225 = or i32 %150, %12
  %226 = or i32 %67, %0
  %227 = xor i32 %40, %141
  %228 = or i32 %62, %1
  %229 = shl i32 %228, 2
  %230 = or i32 %55, %12
  %231 = or i32 %9, %75
  %232 = xor i32 %59, %139
  %233 = and i32 %84, %2
  %234 = xor i32 %80, -1
  %235 = xor i32 %135, %234
  %236 = and i32 %62, %44
  %237 = xor i32 %51, %147
  %238 = or i32 %64, %13
  %239 = and i32 %65, %35
  %240 = xor i32 %56, %1
  %241 = xor i32 %55, %0
  %242 = or i32 %9, %12
  %243 = and i32 %45, %2
  %244 = or i32 %72, %106
  %245 = shl i32 %35, 1
  %246 = or i32 %7, %77
  %247 = or i32 %62, %44
  %248 = and i32 %33, %42
  %249 = or i32 %44, %2
  %250 = and i32 %141, %0
  %251 = and i32 %74, %9
  %252 = and i32 %30, %45
  %253 = or i32 %62, %7
  %254 = add i32 %67, 1
  %255 = xor i32 %75, %2
  %256 = xor i32 %64, %1
  %257 = or i32 %58, %0
  %258 = or i32 %7, %88
  %259 = xor i32 %115, -1
  %260 = xor i32 %37, %259
  %261 = or i32 %56, %35
  %262 = xor i32 %56, %74
  %263 = or i32 %80, %81
  %264 = or i32 %8, %0
  %265 = xor i32 %37, %264
  %266 = add i32 %62, 1
  %267 = or i32 %106, %2
  %268 = xor i32 %264, -1
  %269 = or i32 %37, %268
  %270 = and i32 %62, %103
  %271 = or i32 %141, %0
  %272 = shl i32 %74, 1
  %273 = and i32 %67, %0
  %274 = and i32 %65, %1
  %275 = shl i32 %274, 1
  %276 = or i32 %44, %42
  %277 = or i32 %13, %12
  %278 = xor i32 %52, -1
  %279 = xor i32 %51, %278
  %280 = and i32 %86, %12
  %281 = mul i32 %280, 10
  %282 = and i32 %55, %12
  %283 = mul i32 %282, 19
  %284 = and i32 %86, %0
  %285 = mul i32 %284, -30
  %286 = and i32 %55, %0
  %287 = mul i32 %286, 11
  %288 = and i32 %88, %12
  %289 = mul i32 %14, -6
  %290 = and i32 %88, %0
  %291 = shl i32 %80, 2
  %292 = or i32 %204, %13
  %293 = add i32 %292, %69
  %294 = add i32 %293, %108
  %295 = add i32 %294, %253
  %296 = add i32 %295, %186
  %297 = add i32 %296, %176
  %298 = add i32 %297, %169
  %299 = add i32 %298, %159
  %300 = add i32 %299, %151
  %301 = add i32 %300, %70
  %302 = add i32 %301, %50
  %303 = add i32 %302, %83
  %304 = shl i32 %303, 1
  %305 = sub i32 %33, %1
  %306 = add i32 %305, %62
  %307 = sub i32 %306, %78
  %308 = sub i32 %307, %205
  %309 = add i32 %308, %157
  %310 = sub i32 %309, %21
  %311 = sub i32 %310, %18
  %312 = mul i32 %311, 5
  %313 = add i32 %130, %40
  %314 = add i32 %313, %290
  %315 = add i32 %314, %113
  %316 = shl i32 %315, 2
  %317 = add i32 %95, %199
  %318 = sub i32 %317, %121
  %319 = mul i32 %318, 3
  %320 = sub i32 -4, %0
  %321 = sub i32 %320, %2
  %322 = add i32 %321, %75
  %323 = add i32 %322, %106
  %324 = sub i32 %323, %245
  %325 = sub i32 %324, %44
  %326 = add i32 %325, %3
  %327 = sub i32 %326, %34
  %328 = add i32 %327, %54
  %329 = add i32 %328, %55
  %330 = sub i32 %329, %30
  %331 = sub i32 %330, %85
  %332 = sub i32 %331, %105
  %333 = add i32 %332, %110
  %334 = sub i32 %333, %114
  %335 = sub i32 %334, %129
  %336 = add i32 %335, %138
  %337 = add i32 %336, %154
  %338 = add i32 %337, %156
  %339 = add i32 %338, %158
  %340 = sub i32 %339, %160
  %341 = sub i32 %340, %56
  %342 = sub i32 %341, %170
  %343 = sub i32 %342, %58
  %344 = add i32 %343, %179
  %345 = add i32 %344, %8
  %346 = add i32 %345, %202
  %347 = add i32 %346, %208
  %348 = add i32 %347, %209
  %349 = sub i32 %348, %216
  %350 = add i32 %349, %233
  %351 = add i32 %350, %86
  %352 = sub i32 %351, %64
  %353 = sub i32 %352, %243
  %354 = add i32 %353, %248
  %355 = sub i32 %354, %249
  %356 = add i32 %355, %65
  %357 = add i32 %356, %254
  %358 = sub i32 %357, %255
  %359 = add i32 %358, %67
  %360 = add i32 %359, %266
  %361 = sub i32 %360, %267
  %362 = sub i32 %361, %272
  %363 = add i32 %362, %276
  %364 = add i32 %363, %4
  %365 = sub i32 %364, %15
  %366 = add i32 %365, %32
  %367 = sub i32 %366, %41
  %368 = add i32 %367, %46
  %369 = add i32 %368, %57
  %370 = add i32 %369, %61
  %371 = sub i32 %370, %63
  %372 = add i32 %371, %66
  %373 = sub i32 %372, %68
  %374 = sub i32 %373, %71
  %375 = sub i32 %374, %73
  %376 = sub i32 %375, %76
  %377 = sub i32 %376, %79
  %378 = add i32 %377, %87
  %379 = add i32 %378, %93
  %380 = add i32 %379, %94
  %381 = add i32 %380, %96
  %382 = sub i32 %381, %97
  %383 = add i32 %382, %98
  %384 = add i32 %383, %104
  %385 = sub i32 %384, %107
  %386 = sub i32 %385, %109
  %387 = add i32 %386, %111
  %388 = sub i32 %387, %112
  %389 = sub i32 %388, %117
  %390 = add i32 %389, %122
  %391 = sub i32 %390, %123
  %392 = add i32 %391, %124
  %393 = add i32 %392, %125
  %394 = sub i32 %393, %128
  %395 = add i32 %394, %131
  %396 = add i32 %395, %132
  %397 = sub i32 %396, %133
  %398 = sub i32 %397, %134
  %399 = sub i32 %398, %142
  %400 = sub i32 %399, %143
  %401 = add i32 %400, %144
  %402 = sub i32 %401, %145
  %403 = add i32 %402, %146
  %404 = add i32 %403, %147
  %405 = sub i32 %404, %148
  %406 = add i32 %405, %149
  %407 = sub i32 %406, %152
  %408 = sub i32 %407, %153
  %409 = sub i32 %408, %155
  %410 = sub i32 %409, %162
  %411 = add i32 %410, %163
  %412 = add i32 %411, %164
  %413 = sub i32 %412, %165
  %414 = add i32 %413, %166
  %415 = sub i32 %414, %167
  %416 = add i32 %415, %168
  %417 = add i32 %416, %171
  %418 = add i32 %417, %172
  %419 = add i32 %418, %173
  %420 = sub i32 %419, %180
  %421 = sub i32 %420, %181
  %422 = add i32 %421, %182
  %423 = add i32 %422, %183
  %424 = add i32 %423, %184
  %425 = sub i32 %424, %185
  %426 = sub i32 %425, %187
  %427 = sub i32 %426, %38
  %428 = add i32 %427, %190
  %429 = add i32 %428, %191
  %430 = add i32 %429, %192
  %431 = add i32 %430, %193
  %432 = sub i32 %431, %194
  %433 = sub i32 %432, %59
  %434 = sub i32 %433, %195
  %435 = sub i32 %434, %196
  %436 = sub i32 %435, %197
  %437 = add i32 %436, %198
  %438 = sub i32 %437, %200
  %439 = sub i32 %438, %201
  %440 = sub i32 %439, %203
  %441 = add i32 %440, %206
  %442 = sub i32 %441, %207
  %443 = sub i32 %442, %213
  %444 = add i32 %443, %81
  %445 = sub i32 %444, %217
  %446 = sub i32 %445, %218
  %447 = sub i32 %446, %219
  %448 = sub i32 %447, %135
  %449 = sub i32 %448, %220
  %450 = add i32 %449, %221
  %451 = add i32 %450, %222
  %452 = add i32 %451, %223
  %453 = add i32 %452, %224
  %454 = sub i32 %453, %225
  %455 = add i32 %454, %226
  %456 = sub i32 %455, %227
  %457 = sub i32 %456, %230
  %458 = add i32 %457, %231
  %459 = add i32 %458, %236
  %460 = add i32 %459, %238
  %461 = add i32 %460, %239
  %462 = sub i32 %461, %240
  %463 = sub i32 %462, %241
  %464 = add i32 %463, %242
  %465 = sub i32 %464, %244
  %466 = sub i32 %465, %246
  %467 = sub i32 %466, %247
  %468 = sub i32 %467, %250
  %469 = add i32 %468, %251
  %470 = sub i32 %469, %252
  %471 = add i32 %470, %256
  %472 = add i32 %471, %257
  %473 = sub i32 %472, %258
  %474 = add i32 %473, %261
  %475 = sub i32 %474, %262
  %476 = add i32 %475, %270
  %477 = sub i32 %476, %271
  %478 = add i32 %477, %273
  %479 = sub i32 %478, %277
  %480 = sub i32 %479, %288
  %481 = add i32 %480, %19
  %482 = add i32 %481, %21
  %483 = add i32 %482, %39
  %484 = add i32 %483, %53
  %485 = add i32 %484, %60
  %486 = sub i32 %485, %90
  %487 = sub i32 %486, %92
  %488 = sub i32 %487, %100
  %489 = sub i32 %488, %102
  %490 = sub i32 %489, %116
  %491 = sub i32 %490, %127
  %492 = add i32 %491, %140
  %493 = sub i32 %492, %175
  %494 = sub i32 %493, %178
  %495 = add i32 %494, %189
  %496 = sub i32 %495, %211
  %497 = add i32 %496, %212
  %498 = sub i32 %497, %215
  %499 = sub i32 %498, %229
  %500 = add i32 %499, %232
  %501 = sub i32 %500, %235
  %502 = sub i32 %501, %237
  %503 = sub i32 %502, %260
  %504 = add i32 %503, %263
  %505 = sub i32 %504, %265
  %506 = sub i32 %505, %269
  %507 = sub i32 %506, %275
  %508 = sub i32 %507, %279
  %509 = add i32 %508, %281
  %510 = add i32 %509, %283
  %511 = add i32 %510, %285
  %512 = add i32 %511, %287
  %513 = add i32 %512, %289
  %514 = sub i32 %513, %291
  %515 = sub i32 %514, %29
  %516 = sub i32 %515, %119
  %517 = sub i32 %516, %137
  %518 = add i32 %517, %23
  %519 = sub i32 %518, %26
  %520 = add i32 %519, %316
  %521 = add i32 %520, %319
  %522 = add i32 %521, %312
  %523 = add i32 %522, %304
  %524 = icmp eq i32 %17, %523
  %525 = select i1 %524, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %526 = tail call i32 @puts(i8* nonnull dereferenceable(1) %525)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
