; ModuleID = '../.././c_source_file/0970_path_condition_crackme.c'
source_filename = "../.././c_source_file/0970_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, -1
  %7 = and i32 %4, %6
  %8 = sub i32 %5, %7
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %2
  %11 = and i32 %10, %0
  %12 = xor i32 %0, -1
  %13 = or i32 %9, %2
  %14 = and i32 %13, %12
  %15 = or i32 %11, %14
  %16 = xor i32 %2, %1
  %17 = and i32 %9, %0
  %18 = xor i32 %2, %0
  %19 = or i32 %18, %17
  %20 = xor i32 %16, -1
  %21 = and i32 %20, %0
  %22 = or i32 %1, %0
  %23 = and i32 %10, %12
  %24 = and i32 %13, %0
  %25 = xor i32 %24, 2147483647
  %26 = xor i32 %25, %23
  %27 = shl i32 %26, 1
  %28 = or i32 %17, %6
  %29 = and i32 %2, %0
  %30 = or i32 %29, %9
  %31 = and i32 %1, %0
  %32 = or i32 %31, %2
  %33 = or i32 %6, %1
  %34 = xor i32 %33, -1
  %35 = or i32 %16, %17
  %36 = and i32 %18, %5
  %37 = xor i32 %13, %0
  %38 = xor i32 %11, -1
  %39 = xor i32 %37, %38
  %40 = or i32 %4, %2
  %41 = and i32 %6, %1
  %42 = xor i32 %41, %0
  %43 = xor i32 %31, -1
  %44 = xor i32 %18, -1
  %45 = and i32 %44, %43
  %46 = xor i32 %16, %0
  %47 = or i32 %11, %46
  %48 = or i32 %6, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %49, %1
  %51 = or i32 %2, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %9
  %54 = and i32 %6, %0
  %55 = xor i32 %29, -1
  %56 = and i32 %55, %5
  %57 = xor i32 %17, -1
  %58 = and i32 %18, %57
  %59 = shl i32 %58, 1
  %60 = xor i32 %54, %1
  %61 = or i32 %29, %4
  %62 = or i32 %2, %1
  %63 = or i32 %62, %12
  %64 = and i32 %51, %5
  %65 = or i32 %31, %52
  %66 = shl i32 %65, 1
  %67 = or i32 %18, %5
  %68 = and i32 %2, %1
  %69 = xor i32 %68, -1
  %70 = xor i32 %17, %69
  %71 = or i32 %33, %12
  %72 = or i32 %4, %52
  %73 = xor i32 %33, %0
  %74 = xor i32 %54, -1
  %75 = and i32 %74, %5
  %76 = or i32 %54, %1
  %77 = and i32 %74, %1
  %78 = add i32 %68, 1
  %79 = xor i32 %41, -1
  %80 = or i32 %79, %0
  %81 = xor i32 %22, -1
  %82 = or i32 %16, %81
  %83 = and i32 %43, %2
  %84 = or i32 %69, %12
  %85 = or i32 %69, %0
  %86 = shl i32 %85, 1
  %87 = or i32 %11, %37
  %88 = or i32 %54, %9
  %89 = and i32 %68, %0
  %90 = and i32 %16, %12
  %91 = or i32 %89, %90
  %92 = xor i32 %29, %1
  %93 = and i32 %68, %12
  %94 = and i32 %16, %0
  %95 = or i32 %93, %94
  %96 = or i32 %79, %12
  %97 = and i32 %55, %9
  %98 = and i32 %48, %4
  %99 = or i32 %9, %0
  %100 = and i32 %16, %99
  %101 = and i32 %6, %43
  %102 = and i32 %16, %43
  %103 = xor i32 %43, %2
  %104 = or i32 %31, %44
  %105 = and i32 %99, %6
  %106 = shl i32 %105, 1
  %107 = or i32 %16, %12
  %108 = or i32 %18, %9
  %109 = xor i32 %62, -1
  %110 = or i32 %29, %109
  %111 = or i32 %17, %2
  %112 = xor i32 %74, %1
  %113 = xor i32 %107, 2147483647
  %114 = or i32 %113, %23
  %115 = shl i32 %114, 1
  %116 = or i32 %44, %1
  %117 = or i32 %109, %0
  %118 = xor i32 %89, %117
  %119 = and i32 %16, %22
  %120 = shl i32 %119, 1
  %121 = and i32 %4, %44
  %122 = xor i32 %48, %1
  %123 = and i32 %4, %55
  %124 = xor i32 %81, %2
  %125 = or i32 %31, %49
  %126 = xor i32 %109, %0
  %127 = shl i32 %126, 1
  %128 = xor i32 %99, %2
  %129 = xor i32 %90, 2147483647
  %130 = xor i32 %129, %89
  %131 = shl i32 %130, 1
  %132 = xor i32 %51, %1
  %133 = or i32 %17, %44
  %134 = xor i32 %29, %62
  %135 = and i32 %22, %2
  %136 = xor i32 %22, %2
  %137 = shl i32 %136, 1
  %138 = or i32 %49, %9
  %139 = xor i32 %54, %33
  %140 = or i32 %18, %1
  %141 = and i32 %44, %1
  %142 = or i32 %41, %0
  %143 = or i32 %41, %12
  %144 = or i32 %18, %4
  %145 = and i32 %6, %57
  %146 = and i32 %62, %0
  %147 = or i32 %93, %146
  %148 = and i32 %74, %9
  %149 = or i32 %44, %5
  %150 = or i32 %4, %6
  %151 = and i32 %48, %1
  %152 = or i32 %68, %0
  %153 = and i32 %33, %0
  %154 = shl i32 %31, 1
  %155 = or i32 %54, %68
  %156 = xor i32 %23, %107
  %157 = and i32 %44, %9
  %158 = and i32 %4, %2
  %159 = or i32 %16, %31
  %160 = xor i32 %146, 2147483647
  %161 = xor i32 %160, %93
  %162 = or i32 %16, %0
  %163 = xor i32 %162, -1
  %164 = or i32 %11, %163
  %165 = xor i32 %55, %1
  %166 = and i32 %55, %1
  %167 = and i32 %20, %57
  %168 = xor i32 %69, %0
  %169 = and i32 %6, %5
  %170 = xor i32 %52, %1
  %171 = and i32 %48, %9
  %172 = shl i32 %171, 2
  %173 = and i32 %79, %12
  %174 = or i32 %54, %5
  %175 = or i32 %44, %9
  %176 = or i32 %68, %12
  %177 = or i32 %20, %81
  %178 = shl i32 %177, 1
  %179 = and i32 %69, %12
  %180 = xor i32 %17, %79
  %181 = or i32 %62, %0
  %182 = shl i32 %181, 1
  %183 = or i32 %33, %0
  %184 = or i32 %5, %2
  %185 = shl i32 %184, 1
  %186 = and i32 %18, %4
  %187 = and i32 %22, %20
  %188 = xor i32 %68, %0
  %189 = or i32 %54, %34
  %190 = or i32 %29, %41
  %191 = or i32 %31, %6
  %192 = or i32 %4, %49
  %193 = add i32 %17, 1
  %194 = xor i32 %14, %38
  %195 = or i32 %20, %0
  %196 = xor i32 %29, %79
  %197 = or i32 %29, %1
  %198 = xor i32 %62, %0
  %199 = or i32 %89, %198
  %200 = and i32 %109, %12
  %201 = mul i32 %200, -19
  %202 = and i32 %41, %12
  %203 = and i32 %109, %0
  %204 = mul i32 %203, 9
  %205 = and i32 %41, %0
  %206 = mul i32 %205, 22
  %207 = and i32 %34, %12
  %208 = shl i32 %93, 3
  %209 = and i32 %34, %0
  %210 = add i32 %179, %158
  %211 = add i32 %210, %176
  %212 = add i32 %211, %168
  %213 = add i32 %212, %159
  %214 = add i32 %213, %151
  %215 = add i32 %214, %139
  %216 = add i32 %215, %94
  %217 = add i32 %216, %116
  %218 = add i32 %217, %97
  %219 = add i32 %218, %21
  %220 = add i32 %219, %87
  %221 = add i32 %220, %161
  %222 = shl i32 %221, 1
  %223 = add i32 %209, %183
  %224 = sub i32 %223, %152
  %225 = add i32 %224, %149
  %226 = mul i32 %225, 3
  %227 = sub i32 %107, %19
  %228 = add i32 %227, %39
  %229 = mul i32 %228, 5
  %230 = add i32 %207, %202
  %231 = mul i32 %230, -7
  %232 = shl i32 %0, 1
  %233 = sub i32 %232, %1
  %234 = sub i32 %233, %22
  %235 = sub i32 %234, %4
  %236 = sub i32 %235, %17
  %237 = sub i32 %236, %128
  %238 = add i32 %237, %193
  %239 = sub i32 %238, %16
  %240 = add i32 %239, %28
  %241 = sub i32 %240, %32
  %242 = add i32 %241, %34
  %243 = sub i32 %242, %40
  %244 = sub i32 %243, %54
  %245 = add i32 %244, %18
  %246 = add i32 %245, %78
  %247 = sub i32 %246, %83
  %248 = sub i32 %247, %48
  %249 = sub i32 %248, %51
  %250 = add i32 %249, %101
  %251 = sub i32 %250, %103
  %252 = add i32 %251, %111
  %253 = add i32 %252, %124
  %254 = add i32 %253, %135
  %255 = add i32 %254, %145
  %256 = add i32 %255, %49
  %257 = sub i32 %256, %150
  %258 = sub i32 %257, %154
  %259 = sub i32 %258, %128
  %260 = add i32 %259, %169
  %261 = add i32 %260, %191
  %262 = add i32 %261, %30
  %263 = sub i32 %262, %35
  %264 = add i32 %263, %36
  %265 = sub i32 %264, %42
  %266 = sub i32 %265, %45
  %267 = add i32 %266, %50
  %268 = add i32 %267, %53
  %269 = sub i32 %268, %56
  %270 = add i32 %269, %60
  %271 = sub i32 %270, %61
  %272 = sub i32 %271, %63
  %273 = add i32 %272, %64
  %274 = sub i32 %273, %67
  %275 = sub i32 %274, %70
  %276 = add i32 %275, %71
  %277 = sub i32 %276, %72
  %278 = add i32 %277, %73
  %279 = add i32 %278, %75
  %280 = sub i32 %279, %76
  %281 = sub i32 %280, %77
  %282 = add i32 %281, %80
  %283 = add i32 %282, %82
  %284 = add i32 %283, %84
  %285 = sub i32 %284, %88
  %286 = add i32 %285, %92
  %287 = add i32 %286, %96
  %288 = add i32 %287, %98
  %289 = add i32 %288, %100
  %290 = sub i32 %289, %102
  %291 = sub i32 %290, %104
  %292 = sub i32 %291, %106
  %293 = add i32 %292, %108
  %294 = add i32 %293, %110
  %295 = sub i32 %294, %112
  %296 = sub i32 %295, %121
  %297 = add i32 %296, %122
  %298 = add i32 %297, %123
  %299 = add i32 %298, %125
  %300 = add i32 %299, %132
  %301 = sub i32 %300, %133
  %302 = add i32 %301, %134
  %303 = sub i32 %302, %137
  %304 = add i32 %303, %138
  %305 = sub i32 %304, %140
  %306 = add i32 %305, %141
  %307 = sub i32 %306, %142
  %308 = add i32 %307, %143
  %309 = sub i32 %308, %144
  %310 = add i32 %309, %148
  %311 = sub i32 %310, %153
  %312 = add i32 %311, %155
  %313 = add i32 %312, %117
  %314 = add i32 %313, %157
  %315 = add i32 %314, %165
  %316 = sub i32 %315, %166
  %317 = add i32 %316, %167
  %318 = sub i32 %317, %46
  %319 = add i32 %318, %170
  %320 = add i32 %319, %173
  %321 = add i32 %320, %174
  %322 = sub i32 %321, %175
  %323 = sub i32 %322, %180
  %324 = sub i32 %323, %185
  %325 = sub i32 %324, %186
  %326 = sub i32 %325, %187
  %327 = sub i32 %326, %188
  %328 = add i32 %327, %189
  %329 = sub i32 %328, %190
  %330 = sub i32 %329, %192
  %331 = sub i32 %330, %195
  %332 = sub i32 %331, %196
  %333 = sub i32 %332, %197
  %334 = sub i32 %333, %89
  %335 = sub i32 %334, %15
  %336 = add i32 %335, %47
  %337 = sub i32 %336, %59
  %338 = sub i32 %337, %66
  %339 = sub i32 %338, %86
  %340 = sub i32 %339, %91
  %341 = sub i32 %340, %95
  %342 = sub i32 %341, %118
  %343 = sub i32 %342, %120
  %344 = sub i32 %343, %127
  %345 = sub i32 %344, %147
  %346 = sub i32 %345, %156
  %347 = add i32 %346, %164
  %348 = add i32 %347, %172
  %349 = sub i32 %348, %178
  %350 = sub i32 %349, %182
  %351 = sub i32 %350, %194
  %352 = add i32 %351, %199
  %353 = add i32 %352, %201
  %354 = add i32 %353, %204
  %355 = add i32 %354, %206
  %356 = add i32 %355, %208
  %357 = add i32 %356, %231
  %358 = sub i32 %357, %27
  %359 = sub i32 %358, %115
  %360 = sub i32 %359, %131
  %361 = add i32 %360, %226
  %362 = add i32 %361, %229
  %363 = add i32 %362, %222
  %364 = icmp eq i32 %8, %363
  %365 = select i1 %364, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %366 = tail call i32 @puts(i8* nonnull dereferenceable(1) %365)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
