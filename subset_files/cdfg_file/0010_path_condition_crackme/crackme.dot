digraph "DFG for'crackme' function" {
	Node0x646df0[shape=record, label="  %5 = shl i32 %1, 1"];
	Node0x646e60[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x646f00[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x646f70[shape=record, label="  %8 = add i32 %5, %7"];
	Node0x646fe0[shape=record, label="  %9 = xor i32 %3, %0"];
	Node0x647050[shape=record, label="  %10 = or i32 %3, %0"];
	Node0x6470c0[shape=record, label="  %11 = xor i32 %0, -1"];
	Node0x647130[shape=record, label="  %12 = or i32 %11, %3"];
	Node0x6471d0[shape=record, label="  %13 = shl i32 %12, 2"];
	Node0x647240[shape=record, label="  %14 = and i32 %11, %3"];
	Node0x6472b0[shape=record, label="  %15 = xor i32 %10, -1"];
	Node0x647350[shape=record, label="  %16 = mul i32 %15, 6"];
	Node0x6473c0[shape=record, label="  %17 = shl i32 %14, 2"];
	Node0x647460[shape=record, label="  %18 = mul i32 %6, 5"];
	Node0x6474d0[shape=record, label="  %19 = sub i32 1, %3"];
	Node0x647540[shape=record, label="  %20 = add i32 %19, %5"];
	Node0x6475b0[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x647620[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x647690[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x647700[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0x647770[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x6477e0[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x647850[shape=record, label="  %27 = add i32 %26, %18"];
	Node0x6478c0[shape=record, label="  %28 = icmp eq i32 %8, %27"];
	Node0x5e7268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x647d60[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x647db0[shape=record, label="  ret void"];
	Node0x646df0 -> Node0x646e60;
	Node0x646e60 -> Node0x646f00;
	Node0x646f00 -> Node0x646f70;
	Node0x646f70 -> Node0x646fe0;
	Node0x646fe0 -> Node0x647050;
	Node0x647050 -> Node0x6470c0;
	Node0x6470c0 -> Node0x647130;
	Node0x647130 -> Node0x6471d0;
	Node0x6471d0 -> Node0x647240;
	Node0x647240 -> Node0x6472b0;
	Node0x6472b0 -> Node0x647350;
	Node0x647350 -> Node0x6473c0;
	Node0x6473c0 -> Node0x647460;
	Node0x647460 -> Node0x6474d0;
	Node0x6474d0 -> Node0x647540;
	Node0x647540 -> Node0x6475b0;
	Node0x6475b0 -> Node0x647620;
	Node0x647620 -> Node0x647690;
	Node0x647690 -> Node0x647700;
	Node0x647700 -> Node0x647770;
	Node0x647770 -> Node0x6477e0;
	Node0x6477e0 -> Node0x647850;
	Node0x647850 -> Node0x6478c0;
	Node0x6478c0 -> Node0x5e7268;
	Node0x5e7268 -> Node0x647d60;
	Node0x647d60 -> Node0x647db0;
edge [color=red]
	Node0x646e60 -> Node0x646f00;
	Node0x646df0 -> Node0x646f70;
	Node0x646f00 -> Node0x646f70;
	Node0x6470c0 -> Node0x647130;
	Node0x647130 -> Node0x6471d0;
	Node0x6470c0 -> Node0x647240;
	Node0x647050 -> Node0x6472b0;
	Node0x6472b0 -> Node0x647350;
	Node0x647240 -> Node0x6473c0;
	Node0x646e60 -> Node0x647460;
	Node0x6474d0 -> Node0x647540;
	Node0x646df0 -> Node0x647540;
	Node0x647540 -> Node0x6475b0;
	Node0x646fe0 -> Node0x6475b0;
	Node0x6475b0 -> Node0x647620;
	Node0x647050 -> Node0x647620;
	Node0x647620 -> Node0x647690;
	Node0x647240 -> Node0x647690;
	Node0x647690 -> Node0x647700;
	Node0x6471d0 -> Node0x647700;
	Node0x647700 -> Node0x647770;
	Node0x647350 -> Node0x647770;
	Node0x647770 -> Node0x6477e0;
	Node0x6473c0 -> Node0x6477e0;
	Node0x6477e0 -> Node0x647850;
	Node0x647460 -> Node0x647850;
	Node0x646f70 -> Node0x6478c0;
	Node0x647850 -> Node0x6478c0;
	Node0x6478c0 -> Node0x5e7268;
	Node0x5e7268 -> Node0x647d60;
}
