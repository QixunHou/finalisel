digraph "DFG for'main' function" {
	Node0x647f78[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x647ff8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x648088[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x6480e8[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x648198[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x6485c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x6486a8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x6487a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x648868[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x648918[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x6489d8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x648a88[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x643810[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x648c88[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x649bf8[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x64a268[shape=record, label="  %12 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x64a2e0[shape=record, label="  %13 = shl i32 %11, 1"];
	Node0x64a350[shape=record, label="  %14 = and i32 %12, %10"];
	Node0x64a3c0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x64a430[shape=record, label="  %16 = add i32 %13, %15"];
	Node0x64a4a0[shape=record, label="  %17 = xor i32 %12, %10"];
	Node0x64a510[shape=record, label="  %18 = or i32 %12, %10"];
	Node0x64a580[shape=record, label="  %19 = xor i32 %10, -1"];
	Node0x64a5f0[shape=record, label="  %20 = or i32 %12, %19"];
	Node0x64a660[shape=record, label="  %21 = shl i32 %20, 2"];
	Node0x64a6d0[shape=record, label="  %22 = and i32 %12, %19"];
	Node0x64a740[shape=record, label="  %23 = xor i32 %18, -1"];
	Node0x64a7b0[shape=record, label="  %24 = mul i32 %23, 6"];
	Node0x64a820[shape=record, label="  %25 = shl i32 %22, 2"];
	Node0x64a890[shape=record, label="  %26 = mul i32 %14, 5"];
	Node0x64a900[shape=record, label="  %27 = sub i32 1, %12"];
	Node0x64a970[shape=record, label="  %28 = add i32 %27, %13"];
	Node0x64a9e0[shape=record, label="  %29 = add i32 %28, %17"];
	Node0x64aa50[shape=record, label="  %30 = add i32 %29, %18"];
	Node0x64aac0[shape=record, label="  %31 = add i32 %30, %22"];
	Node0x64ab30[shape=record, label="  %32 = sub i32 %31, %21"];
	Node0x64adb0[shape=record, label="  %33 = add i32 %32, %24"];
	Node0x64ae20[shape=record, label="  %34 = add i32 %33, %25"];
	Node0x64ae90[shape=record, label="  %35 = add i32 %34, %26"];
	Node0x64af00[shape=record, label="  %36 = icmp eq i32 %16, %35"];
	Node0x5e88b8[shape=record, label="  %37 = select i1 %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x64af90[shape=record, label="  %38 = call i32 @puts(i8* nonnull dereferenceable(1) %37) #5"];
	Node0x64b238[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x64b398[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x64b4a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x64b5b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x64b678[shape=record, label="  ret i32 0"];
	Node0x647f78 -> Node0x647ff8;
	Node0x647ff8 -> Node0x648088;
	Node0x648088 -> Node0x6480e8;
	Node0x6480e8 -> Node0x648198;
	Node0x648198 -> Node0x6485c8;
	Node0x6485c8 -> Node0x6486a8;
	Node0x6486a8 -> Node0x6487a8;
	Node0x6487a8 -> Node0x648868;
	Node0x648868 -> Node0x648918;
	Node0x648918 -> Node0x6489d8;
	Node0x6489d8 -> Node0x648a88;
	Node0x648a88 -> Node0x643810;
	Node0x643810 -> Node0x648c88;
	Node0x648c88 -> Node0x649bf8;
	Node0x649bf8 -> Node0x64a268;
	Node0x64a268 -> Node0x64a2e0;
	Node0x64a2e0 -> Node0x64a350;
	Node0x64a350 -> Node0x64a3c0;
	Node0x64a3c0 -> Node0x64a430;
	Node0x64a430 -> Node0x64a4a0;
	Node0x64a4a0 -> Node0x64a510;
	Node0x64a510 -> Node0x64a580;
	Node0x64a580 -> Node0x64a5f0;
	Node0x64a5f0 -> Node0x64a660;
	Node0x64a660 -> Node0x64a6d0;
	Node0x64a6d0 -> Node0x64a740;
	Node0x64a740 -> Node0x64a7b0;
	Node0x64a7b0 -> Node0x64a820;
	Node0x64a820 -> Node0x64a890;
	Node0x64a890 -> Node0x64a900;
	Node0x64a900 -> Node0x64a970;
	Node0x64a970 -> Node0x64a9e0;
	Node0x64a9e0 -> Node0x64aa50;
	Node0x64aa50 -> Node0x64aac0;
	Node0x64aac0 -> Node0x64ab30;
	Node0x64ab30 -> Node0x64adb0;
	Node0x64adb0 -> Node0x64ae20;
	Node0x64ae20 -> Node0x64ae90;
	Node0x64ae90 -> Node0x64af00;
	Node0x64af00 -> Node0x5e88b8;
	Node0x5e88b8 -> Node0x64af90;
	Node0x64af90 -> Node0x64b238;
	Node0x64b238 -> Node0x64b398;
	Node0x64b398 -> Node0x64b4a8;
	Node0x64b4a8 -> Node0x64b5b8;
	Node0x64b5b8 -> Node0x64b678;
edge [color=red]
	Node0x647f78 -> Node0x648198;
	Node0x648198 -> Node0x6485c8;
	Node0x647ff8 -> Node0x6486a8;
	Node0x6486a8 -> Node0x6487a8;
	Node0x648088 -> Node0x648868;
	Node0x648868 -> Node0x648918;
	Node0x6480e8 -> Node0x6489d8;
	Node0x6489d8 -> Node0x648a88;
	Node0x647f78 -> Node0x643810;
	Node0x647ff8 -> Node0x643810;
	Node0x648088 -> Node0x643810;
	Node0x6480e8 -> Node0x643810;
	Node0x647f78 -> Node0x648c88;
	Node0x647ff8 -> Node0x649bf8;
	Node0x6480e8 -> Node0x64a268;
	Node0x649bf8 -> Node0x64a2e0;
	Node0x64a268 -> Node0x64a350;
	Node0x648c88 -> Node0x64a350;
	Node0x64a350 -> Node0x64a3c0;
	Node0x64a2e0 -> Node0x64a430;
	Node0x64a3c0 -> Node0x64a430;
	Node0x64a268 -> Node0x64a4a0;
	Node0x648c88 -> Node0x64a4a0;
	Node0x64a268 -> Node0x64a510;
	Node0x648c88 -> Node0x64a510;
	Node0x648c88 -> Node0x64a580;
	Node0x64a268 -> Node0x64a5f0;
	Node0x64a580 -> Node0x64a5f0;
	Node0x64a5f0 -> Node0x64a660;
	Node0x64a268 -> Node0x64a6d0;
	Node0x64a580 -> Node0x64a6d0;
	Node0x64a510 -> Node0x64a740;
	Node0x64a740 -> Node0x64a7b0;
	Node0x64a6d0 -> Node0x64a820;
	Node0x64a350 -> Node0x64a890;
	Node0x64a268 -> Node0x64a900;
	Node0x64a900 -> Node0x64a970;
	Node0x64a2e0 -> Node0x64a970;
	Node0x64a970 -> Node0x64a9e0;
	Node0x64a4a0 -> Node0x64a9e0;
	Node0x64a9e0 -> Node0x64aa50;
	Node0x64a510 -> Node0x64aa50;
	Node0x64aa50 -> Node0x64aac0;
	Node0x64a6d0 -> Node0x64aac0;
	Node0x64aac0 -> Node0x64ab30;
	Node0x64a660 -> Node0x64ab30;
	Node0x64ab30 -> Node0x64adb0;
	Node0x64a7b0 -> Node0x64adb0;
	Node0x64adb0 -> Node0x64ae20;
	Node0x64a820 -> Node0x64ae20;
	Node0x64ae20 -> Node0x64ae90;
	Node0x64a890 -> Node0x64ae90;
	Node0x64a430 -> Node0x64af00;
	Node0x64ae90 -> Node0x64af00;
	Node0x64af00 -> Node0x5e88b8;
	Node0x5e88b8 -> Node0x64af90;
	Node0x6489d8 -> Node0x64b238;
	Node0x648868 -> Node0x64b398;
	Node0x6486a8 -> Node0x64b4a8;
	Node0x648198 -> Node0x64b5b8;
}
