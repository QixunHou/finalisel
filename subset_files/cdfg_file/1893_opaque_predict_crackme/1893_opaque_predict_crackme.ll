; ModuleID = '../.././c_source_file/1893_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1893_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = and i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = or i32 %8, %0
  %10 = sub i32 %6, %9
  %11 = and i32 %7, %0
  %12 = xor i32 %0, -1
  %13 = xor i32 %2, %1
  %14 = and i32 %13, %12
  %15 = or i32 %11, %14
  %16 = sub i32 %10, %15
  %17 = xor i32 %4, -1
  %18 = xor i32 %4, %3
  %19 = and i32 %17, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = shl i32 %18, 1
  %23 = xor i32 %22, -2
  %24 = xor i32 %3, 2147483647
  %25 = and i32 %24, %4
  %26 = xor i32 %1, -1
  %27 = and i32 %26, %2
  %28 = and i32 %27, %0
  %29 = or i32 %26, %2
  %30 = xor i32 %29, 2147483647
  %31 = xor i32 %30, %0
  %32 = xor i32 %31, %28
  %33 = and i32 %1, %0
  %34 = xor i32 %13, -1
  %35 = or i32 %33, %34
  %36 = shl i32 %35, 1
  %37 = or i32 %2, %0
  %38 = xor i32 %37, %33
  %39 = shl i32 %38, 1
  %40 = xor i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %1
  %43 = and i32 %13, %0
  %44 = or i32 %40, %26
  %45 = xor i32 %2, -1
  %46 = or i32 %45, %1
  %47 = xor i32 %46, %33
  %48 = or i32 %2, %1
  %49 = and i32 %48, %12
  %50 = shl i32 %49, 1
  %51 = or i32 %26, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %41, %52
  %54 = and i32 %45, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %55, %1
  %57 = xor i32 %34, %0
  %58 = or i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %41, %59
  %61 = and i32 %8, %0
  %62 = xor i32 %37, -1
  %63 = or i32 %33, %62
  %64 = xor i32 %8, %0
  %65 = or i32 %13, %0
  %66 = xor i32 %28, %65
  %67 = and i32 %2, %0
  %68 = xor i32 %48, -1
  %69 = or i32 %67, %68
  %70 = and i32 %26, %0
  %71 = or i32 %70, %45
  %72 = or i32 %67, %59
  %73 = xor i32 %33, -1
  %74 = xor i32 %73, %2
  %75 = or i32 %67, %1
  %76 = or i32 %7, %0
  %77 = xor i32 %67, -1
  %78 = xor i32 %77, %1
  %79 = and i32 %34, %73
  %80 = and i32 %58, %45
  %81 = and i32 %45, %1
  %82 = xor i32 %81, -1
  %83 = xor i32 %70, %82
  %84 = or i32 %13, %12
  %85 = or i32 %82, %12
  %86 = and i32 %7, %12
  %87 = or i32 %86, %43
  %88 = or i32 %13, %33
  %89 = and i32 %13, %51
  %90 = shl i32 %82, 1
  %91 = or i32 %45, %0
  %92 = xor i32 %91, %33
  %93 = xor i32 %91, %1
  %94 = xor i32 %48, %0
  %95 = or i32 %54, %1
  %96 = xor i32 %1, %0
  %97 = or i32 %96, %45
  %98 = xor i32 %46, -1
  %99 = xor i32 %98, %0
  %100 = and i32 %77, %1
  %101 = and i32 %27, %12
  %102 = and i32 %29, %0
  %103 = or i32 %101, %102
  %104 = xor i32 %67, %58
  %105 = or i32 %54, %96
  %106 = xor i32 %91, -1
  %107 = or i32 %96, %106
  %108 = xor i32 %55, %1
  %109 = or i32 %46, %12
  %110 = or i32 %33, %98
  %111 = xor i32 %96, -1
  %112 = and i32 %37, %111
  %113 = or i32 %54, %98
  %114 = and i32 %58, %41
  %115 = or i32 %62, %26
  %116 = xor i32 %7, %0
  %117 = and i32 %8, %12
  %118 = shl i32 %117, 1
  %119 = or i32 %48, %0
  %120 = or i32 %30, %0
  %121 = xor i32 %120, %28
  %122 = shl i32 %121, 1
  %123 = and i32 %40, %51
  %124 = and i32 %73, %2
  %125 = or i32 %62, %111
  %126 = or i32 %70, %41
  %127 = xor i32 %67, %48
  %128 = shl i32 %127, 2
  %129 = or i32 %70, %34
  %130 = and i32 %91, %111
  %131 = shl i32 %130, 1
  %132 = and i32 %40, %58
  %133 = add i32 %13, 1
  %134 = or i32 %40, %33
  %135 = or i32 %52, %2
  %136 = or i32 %11, %94
  %137 = or i32 %33, %68
  %138 = xor i32 %46, %0
  %139 = or i32 %13, %70
  %140 = or i32 %7, %12
  %141 = xor i32 %37, %1
  %142 = xor i32 %13, %0
  %143 = or i32 %28, %142
  %144 = and i32 %34, %0
  %145 = xor i32 %54, %1
  %146 = add i32 %58, 1
  %147 = xor i32 %11, %142
  %148 = shl i32 %147, 2
  %149 = xor i32 %54, %46
  %150 = or i32 %81, %70
  %151 = and i32 %91, %26
  %152 = or i32 %33, %45
  %153 = or i32 %33, %106
  %154 = and i32 %77, %111
  %155 = or i32 %13, %59
  %156 = xor i32 %59, %2
  %157 = shl i32 %156, 1
  %158 = shl i32 %13, 1
  %159 = and i32 %96, %2
  %160 = and i32 %45, %73
  %161 = and i32 %45, %111
  %162 = and i32 %58, %34
  %163 = and i32 %41, %73
  %164 = or i32 %54, %111
  %165 = or i32 %41, %26
  %166 = xor i32 %33, %2
  %167 = or i32 %68, %0
  %168 = shl i32 %167, 1
  %169 = or i32 %62, %1
  %170 = xor i32 %106, %1
  %171 = or i32 %96, %62
  %172 = and i32 %40, %1
  %173 = or i32 %54, %7
  %174 = shl i32 %173, 1
  %175 = xor i32 %94, -1
  %176 = xor i32 %11, %175
  %177 = xor i32 %70, -1
  %178 = and i32 %41, %177
  %179 = and i32 %55, %111
  %180 = xor i32 %43, -1
  %181 = xor i32 %86, %180
  %182 = and i32 %48, %0
  %183 = xor i32 %182, 2147483647
  %184 = xor i32 %183, %86
  %185 = or i32 %40, %96
  %186 = or i32 %33, %2
  %187 = xor i32 %67, %1
  %188 = or i32 %67, %111
  %189 = shl i32 %188, 1
  %190 = or i32 %98, %0
  %191 = and i32 %51, %2
  %192 = and i32 %51, %45
  %193 = and i32 %40, %111
  %194 = shl i32 %193, 1
  %195 = xor i32 %102, -1
  %196 = xor i32 %101, %195
  %197 = or i32 %96, %2
  %198 = and i32 %40, %26
  %199 = and i32 %91, %1
  %200 = or i32 %40, %52
  %201 = or i32 %40, %59
  %202 = or i32 %11, %49
  %203 = or i32 %7, %70
  %204 = and i32 %82, %12
  %205 = xor i32 %51, %2
  %206 = or i32 %45, %52
  %207 = xor i32 %70, %2
  %208 = or i32 %40, %1
  %209 = and i32 %82, %0
  %210 = xor i32 %82, %0
  %211 = xor i32 %81, %0
  %212 = and i32 %41, %1
  %213 = and i32 %13, %73
  %214 = and i32 %45, %177
  %215 = or i32 %34, %0
  %216 = add i32 %54, 1
  %217 = and i32 %46, %0
  %218 = xor i32 %70, %8
  %219 = xor i32 %67, %51
  %220 = shl i32 %219, 1
  %221 = and i32 %77, %26
  %222 = and i32 %37, %1
  %223 = and i32 %68, %12
  %224 = mul i32 %223, 7
  %225 = and i32 %81, %12
  %226 = shl i32 %225, 1
  %227 = and i32 %68, %0
  %228 = and i32 %81, %0
  %229 = mul i32 %228, 14
  %230 = and i32 %98, %12
  %231 = mul i32 %86, 11
  %232 = and i32 %98, %0
  %233 = add i32 %211, %51
  %234 = add i32 %233, %208
  %235 = add i32 %234, %171
  %236 = add i32 %235, %165
  %237 = add i32 %236, %162
  %238 = add i32 %237, %155
  %239 = add i32 %238, %153
  %240 = add i32 %239, %134
  %241 = add i32 %240, %112
  %242 = add i32 %241, %105
  %243 = add i32 %242, %94
  %244 = add i32 %243, %93
  %245 = add i32 %244, %92
  %246 = add i32 %245, %103
  %247 = add i32 %246, %25
  %248 = add i32 %247, %32
  %249 = add i32 %248, %184
  %250 = shl i32 %249, 1
  %251 = sub i32 %191, %96
  %252 = sub i32 %251, %210
  %253 = add i32 %252, %230
  %254 = add i32 %253, %179
  %255 = sub i32 %254, %108
  %256 = mul i32 %255, 3
  %257 = sub i32 %80, %69
  %258 = sub i32 %257, %217
  %259 = mul i32 %258, 5
  %260 = add i32 %166, 1073741823
  %261 = add i32 %260, %227
  %262 = shl i32 %261, 2
  %263 = shl i32 %1, 1
  %264 = add i32 %263, 3
  %265 = add i32 %264, %33
  %266 = sub i32 %265, %70
  %267 = add i32 %266, %146
  %268 = add i32 %267, %2
  %269 = add i32 %268, %177
  %270 = sub i32 %269, %58
  %271 = sub i32 %270, %7
  %272 = add i32 %271, %71
  %273 = sub i32 %272, %74
  %274 = sub i32 %273, %97
  %275 = sub i32 %274, %124
  %276 = add i32 %275, %133
  %277 = sub i32 %276, %135
  %278 = sub i32 %277, %152
  %279 = sub i32 %278, %159
  %280 = add i32 %279, %160
  %281 = add i32 %280, %161
  %282 = sub i32 %281, %186
  %283 = add i32 %282, %192
  %284 = sub i32 %283, %197
  %285 = sub i32 %284, %205
  %286 = sub i32 %285, %206
  %287 = add i32 %286, %207
  %288 = sub i32 %287, %40
  %289 = add i32 %288, %106
  %290 = add i32 %289, %214
  %291 = add i32 %290, %216
  %292 = add i32 %291, %17
  %293 = sub i32 %292, %42
  %294 = sub i32 %293, %43
  %295 = add i32 %294, %44
  %296 = add i32 %295, %47
  %297 = add i32 %296, %53
  %298 = add i32 %297, %56
  %299 = add i32 %298, %57
  %300 = sub i32 %299, %60
  %301 = sub i32 %300, %61
  %302 = sub i32 %301, %63
  %303 = add i32 %302, %64
  %304 = add i32 %303, %72
  %305 = add i32 %304, %75
  %306 = sub i32 %305, %76
  %307 = add i32 %306, %78
  %308 = add i32 %307, %79
  %309 = sub i32 %308, %83
  %310 = add i32 %309, %84
  %311 = sub i32 %310, %85
  %312 = sub i32 %311, %88
  %313 = add i32 %312, %89
  %314 = sub i32 %313, %90
  %315 = sub i32 %314, %95
  %316 = add i32 %315, %99
  %317 = sub i32 %316, %100
  %318 = sub i32 %317, %104
  %319 = sub i32 %318, %107
  %320 = add i32 %319, %109
  %321 = sub i32 %320, %110
  %322 = add i32 %321, %113
  %323 = add i32 %322, %114
  %324 = sub i32 %323, %115
  %325 = sub i32 %324, %116
  %326 = sub i32 %325, %119
  %327 = sub i32 %326, %123
  %328 = sub i32 %327, %125
  %329 = add i32 %328, %126
  %330 = add i32 %329, %129
  %331 = sub i32 %330, %132
  %332 = sub i32 %331, %137
  %333 = add i32 %332, %138
  %334 = sub i32 %333, %139
  %335 = add i32 %334, %140
  %336 = add i32 %335, %141
  %337 = add i32 %336, %144
  %338 = sub i32 %337, %145
  %339 = sub i32 %338, %149
  %340 = add i32 %339, %150
  %341 = add i32 %340, %151
  %342 = sub i32 %341, %154
  %343 = sub i32 %342, %157
  %344 = sub i32 %343, %158
  %345 = sub i32 %344, %163
  %346 = add i32 %345, %164
  %347 = sub i32 %346, %169
  %348 = sub i32 %347, %170
  %349 = add i32 %348, %14
  %350 = add i32 %349, %172
  %351 = sub i32 %350, %178
  %352 = sub i32 %351, %185
  %353 = sub i32 %352, %187
  %354 = add i32 %353, %190
  %355 = sub i32 %354, %198
  %356 = add i32 %355, %199
  %357 = sub i32 %356, %142
  %358 = add i32 %357, %200
  %359 = add i32 %358, %201
  %360 = add i32 %359, %203
  %361 = sub i32 %360, %204
  %362 = add i32 %361, %209
  %363 = add i32 %362, %212
  %364 = add i32 %363, %182
  %365 = sub i32 %364, %213
  %366 = sub i32 %365, %215
  %367 = add i32 %366, %218
  %368 = sub i32 %367, %221
  %369 = sub i32 %368, %222
  %370 = add i32 %369, %232
  %371 = add i32 %370, %11
  %372 = add i32 %371, %18
  %373 = sub i32 %372, %36
  %374 = sub i32 %373, %39
  %375 = sub i32 %374, %50
  %376 = sub i32 %375, %66
  %377 = sub i32 %376, %87
  %378 = sub i32 %377, %118
  %379 = sub i32 %378, %128
  %380 = sub i32 %379, %131
  %381 = sub i32 %380, %136
  %382 = add i32 %381, %143
  %383 = sub i32 %382, %168
  %384 = sub i32 %383, %174
  %385 = add i32 %384, %176
  %386 = sub i32 %385, %181
  %387 = sub i32 %386, %189
  %388 = sub i32 %387, %194
  %389 = add i32 %388, %196
  %390 = add i32 %389, %202
  %391 = sub i32 %390, %220
  %392 = add i32 %391, %224
  %393 = sub i32 %392, %226
  %394 = add i32 %393, %229
  %395 = add i32 %394, %231
  %396 = sub i32 %395, %20
  %397 = sub i32 %396, %148
  %398 = sub i32 %397, %21
  %399 = add i32 %398, %23
  %400 = sub i32 %399, %122
  %401 = add i32 %400, %259
  %402 = add i32 %401, %262
  %403 = add i32 %402, %256
  %404 = add i32 %403, %250
  %405 = icmp eq i32 %16, %404
  %406 = select i1 %405, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %407 = tail call i32 @puts(i8* nonnull dereferenceable(1) %406)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
