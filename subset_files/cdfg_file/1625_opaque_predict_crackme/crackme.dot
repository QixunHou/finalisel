digraph "DFG for'crackme' function" {
	Node0x124ebb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x124ec20[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x124ece0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x124ed50[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x124edc0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x124ee30[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x124eea0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x124ef40[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x124efb0[shape=record, label="  %11 = xor i32 %5, -1"];
	Node0x124f020[shape=record, label="  %12 = xor i32 %7, -1"];
	Node0x124f090[shape=record, label="  %13 = xor i32 %4, -1"];
	Node0x124f100[shape=record, label="  %14 = and i32 %1, %0"];
	Node0x124f170[shape=record, label="  %15 = add i32 %13, %12"];
	Node0x124f210[shape=record, label="  %16 = mul i32 %15, -5"];
	Node0x124f280[shape=record, label="  %17 = shl i32 %0, 1"];
	Node0x124f2f0[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x124f360[shape=record, label="  %19 = add i32 %18, %3"];
	Node0x124f3d0[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0x124f440[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x124f4b0[shape=record, label="  %22 = sub i32 %21, %8"];
	Node0x124f520[shape=record, label="  %23 = sub i32 %22, %14"];
	Node0x124f590[shape=record, label="  %24 = add i32 %23, %6"];
	Node0x124f600[shape=record, label="  %25 = add i32 %24, %10"];
	Node0x124f670[shape=record, label="  %26 = add i32 %25, %16"];
	Node0x124f6e0[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x11ef268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x124fb80[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x124fbd0[shape=record, label="  ret void"];
	Node0x124ebb0 -> Node0x124ec20;
	Node0x124ec20 -> Node0x124ece0;
	Node0x124ece0 -> Node0x124ed50;
	Node0x124ed50 -> Node0x124edc0;
	Node0x124edc0 -> Node0x124ee30;
	Node0x124ee30 -> Node0x124eea0;
	Node0x124eea0 -> Node0x124ef40;
	Node0x124ef40 -> Node0x124efb0;
	Node0x124efb0 -> Node0x124f020;
	Node0x124f020 -> Node0x124f090;
	Node0x124f090 -> Node0x124f100;
	Node0x124f100 -> Node0x124f170;
	Node0x124f170 -> Node0x124f210;
	Node0x124f210 -> Node0x124f280;
	Node0x124f280 -> Node0x124f2f0;
	Node0x124f2f0 -> Node0x124f360;
	Node0x124f360 -> Node0x124f3d0;
	Node0x124f3d0 -> Node0x124f440;
	Node0x124f440 -> Node0x124f4b0;
	Node0x124f4b0 -> Node0x124f520;
	Node0x124f520 -> Node0x124f590;
	Node0x124f590 -> Node0x124f600;
	Node0x124f600 -> Node0x124f670;
	Node0x124f670 -> Node0x124f6e0;
	Node0x124f6e0 -> Node0x11ef268;
	Node0x11ef268 -> Node0x124fb80;
	Node0x124fb80 -> Node0x124fbd0;
edge [color=red]
	Node0x124ebb0 -> Node0x124ec20;
	Node0x124ece0 -> Node0x124ed50;
	Node0x124ebb0 -> Node0x124ee30;
	Node0x124ee30 -> Node0x124eea0;
	Node0x124eea0 -> Node0x124ef40;
	Node0x124ece0 -> Node0x124efb0;
	Node0x124edc0 -> Node0x124f020;
	Node0x124ec20 -> Node0x124f090;
	Node0x124f090 -> Node0x124f170;
	Node0x124f020 -> Node0x124f170;
	Node0x124f170 -> Node0x124f210;
	Node0x124f280 -> Node0x124f2f0;
	Node0x124f2f0 -> Node0x124f360;
	Node0x124ebb0 -> Node0x124f360;
	Node0x124f360 -> Node0x124f3d0;
	Node0x124edc0 -> Node0x124f3d0;
	Node0x124f3d0 -> Node0x124f440;
	Node0x124efb0 -> Node0x124f440;
	Node0x124f440 -> Node0x124f4b0;
	Node0x124ee30 -> Node0x124f4b0;
	Node0x124f4b0 -> Node0x124f520;
	Node0x124f100 -> Node0x124f520;
	Node0x124f520 -> Node0x124f590;
	Node0x124ed50 -> Node0x124f590;
	Node0x124f590 -> Node0x124f600;
	Node0x124ef40 -> Node0x124f600;
	Node0x124f600 -> Node0x124f670;
	Node0x124f210 -> Node0x124f670;
	Node0x124ec20 -> Node0x124f6e0;
	Node0x124f670 -> Node0x124f6e0;
	Node0x124f6e0 -> Node0x11ef268;
	Node0x11ef268 -> Node0x124fb80;
}
