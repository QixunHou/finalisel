digraph "DFG for'crackme' function" {
	Node0x13515a0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1351c50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1351d10[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x1351d80[shape=record, label="  %6 = add i32 %5, 1"];
	Node0x1351df0[shape=record, label="  %7 = add i32 %6, %3"];
	Node0x1351e60[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x1351ed0[shape=record, label="  %9 = and i32 %4, %0"];
	Node0x1351f40[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1351fb0[shape=record, label="  %11 = shl i32 %4, 1"];
	Node0x1352020[shape=record, label="  %12 = xor i32 %1, %0"];
	Node0x1352090[shape=record, label="  %13 = shl i32 %8, 1"];
	Node0x1352130[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x13521d0[shape=record, label="  %15 = mul i32 %9, 3"];
	Node0x1352240[shape=record, label="  %16 = shl i32 %3, 1"];
	Node0x13522b0[shape=record, label="  %17 = add i32 %1, %0"];
	Node0x1352320[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x13523c0[shape=record, label="  %19 = sub i32 2, %8"];
	Node0x1352430[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x13524a0[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0x1352510[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0x1352580[shape=record, label="  %23 = add i32 %22, %5"];
	Node0x13525f0[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x1352660[shape=record, label="  %25 = sub i32 %24, %16"];
	Node0x13526d0[shape=record, label="  %26 = add i32 %25, %18"];
	Node0x1352740[shape=record, label="  %27 = add i32 %26, %14"];
	Node0x13527b0[shape=record, label="  %28 = icmp eq i32 %7, %27"];
	Node0x12f2268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1352c50[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x1352ca0[shape=record, label="  ret void"];
	Node0x13515a0 -> Node0x1351c50;
	Node0x1351c50 -> Node0x1351d10;
	Node0x1351d10 -> Node0x1351d80;
	Node0x1351d80 -> Node0x1351df0;
	Node0x1351df0 -> Node0x1351e60;
	Node0x1351e60 -> Node0x1351ed0;
	Node0x1351ed0 -> Node0x1351f40;
	Node0x1351f40 -> Node0x1351fb0;
	Node0x1351fb0 -> Node0x1352020;
	Node0x1352020 -> Node0x1352090;
	Node0x1352090 -> Node0x1352130;
	Node0x1352130 -> Node0x13521d0;
	Node0x13521d0 -> Node0x1352240;
	Node0x1352240 -> Node0x13522b0;
	Node0x13522b0 -> Node0x1352320;
	Node0x1352320 -> Node0x13523c0;
	Node0x13523c0 -> Node0x1352430;
	Node0x1352430 -> Node0x13524a0;
	Node0x13524a0 -> Node0x1352510;
	Node0x1352510 -> Node0x1352580;
	Node0x1352580 -> Node0x13525f0;
	Node0x13525f0 -> Node0x1352660;
	Node0x1352660 -> Node0x13526d0;
	Node0x13526d0 -> Node0x1352740;
	Node0x1352740 -> Node0x13527b0;
	Node0x13527b0 -> Node0x12f2268;
	Node0x12f2268 -> Node0x1352c50;
	Node0x1352c50 -> Node0x1352ca0;
edge [color=red]
	Node0x1351c50 -> Node0x1351d10;
	Node0x1351d10 -> Node0x1351d80;
	Node0x1351d80 -> Node0x1351df0;
	Node0x13515a0 -> Node0x1351df0;
	Node0x1351c50 -> Node0x1351ed0;
	Node0x1351ed0 -> Node0x1351f40;
	Node0x1351c50 -> Node0x1351fb0;
	Node0x1351e60 -> Node0x1352090;
	Node0x1352090 -> Node0x1352130;
	Node0x1351ed0 -> Node0x13521d0;
	Node0x13515a0 -> Node0x1352240;
	Node0x13522b0 -> Node0x1352320;
	Node0x1351e60 -> Node0x13523c0;
	Node0x13523c0 -> Node0x1352430;
	Node0x1351f40 -> Node0x1352430;
	Node0x1352430 -> Node0x13524a0;
	Node0x1351fb0 -> Node0x13524a0;
	Node0x13524a0 -> Node0x1352510;
	Node0x1352020 -> Node0x1352510;
	Node0x1352510 -> Node0x1352580;
	Node0x1351d10 -> Node0x1352580;
	Node0x1352580 -> Node0x13525f0;
	Node0x13521d0 -> Node0x13525f0;
	Node0x13525f0 -> Node0x1352660;
	Node0x1352240 -> Node0x1352660;
	Node0x1352660 -> Node0x13526d0;
	Node0x1352320 -> Node0x13526d0;
	Node0x13526d0 -> Node0x1352740;
	Node0x1352130 -> Node0x1352740;
	Node0x1351df0 -> Node0x13527b0;
	Node0x1352740 -> Node0x13527b0;
	Node0x13527b0 -> Node0x12f2268;
	Node0x12f2268 -> Node0x1352c50;
}
