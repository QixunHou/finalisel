; ModuleID = '../.././c_source_file/0212_path_condition_crackme.c'
source_filename = "../.././c_source_file/0212_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = or i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = sub i32 %6, %7
  %10 = and i32 %2, %0
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %1
  %13 = or i32 %10, %12
  %14 = mul i32 %13, -3
  %15 = add i32 %9, %14
  %16 = xor i32 %4, -1
  %17 = or i32 %16, %3
  %18 = xor i32 %3, -1
  %19 = xor i32 %4, %3
  %20 = and i32 %16, %3
  %21 = shl i32 %19, 1
  %22 = xor i32 %21, -2
  %23 = or i32 %4, %3
  %24 = shl i32 %23, 1
  %25 = xor i32 %24, -2
  %26 = shl i32 %17, 1
  %27 = xor i32 %26, -2
  %28 = shl i32 %20, 1
  %29 = and i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %0
  %32 = shl i32 %31, 1
  %33 = or i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %34, %1
  %36 = xor i32 %1, -1
  %37 = or i32 %36, %0
  %38 = xor i32 %2, %1
  %39 = and i32 %38, %37
  %40 = shl i32 %39, 1
  %41 = or i32 %11, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %36
  %44 = or i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %2
  %47 = and i32 %41, %1
  %48 = and i32 %44, %2
  %49 = and i32 %29, %0
  %50 = xor i32 %38, %0
  %51 = xor i32 %49, %50
  %52 = xor i32 %37, -1
  %53 = or i32 %38, %52
  %54 = shl i32 %53, 1
  %55 = xor i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %45
  %58 = mul i32 %57, 3
  %59 = and i32 %1, %0
  %60 = xor i32 %59, -1
  %61 = xor i32 %60, %2
  %62 = xor i32 %44, %2
  %63 = or i32 %55, %59
  %64 = or i32 %38, %59
  %65 = and i32 %36, %0
  %66 = xor i32 %0, -1
  %67 = xor i32 %38, -1
  %68 = and i32 %67, %66
  %69 = or i32 %55, %45
  %70 = xor i32 %10, %44
  %71 = and i32 %11, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %1, %0
  %74 = and i32 %73, %72
  %75 = and i32 %67, %60
  %76 = and i32 %36, %2
  %77 = and i32 %76, %66
  %78 = or i32 %36, %2
  %79 = and i32 %78, %0
  %80 = or i32 %77, %79
  %81 = and i32 %76, %0
  %82 = xor i32 %81, -1
  %83 = xor i32 %82, %0
  %84 = xor i32 %83, %78
  %85 = and i32 %38, %66
  %86 = or i32 %49, %85
  %87 = or i32 %11, %1
  %88 = or i32 %87, %66
  %89 = or i32 %8, %66
  %90 = and i32 %56, %60
  %91 = xor i32 %10, %37
  %92 = and i32 %44, %56
  %93 = shl i32 %92, 1
  %94 = xor i32 %10, -1
  %95 = add i32 %10, 1
  %96 = or i32 %12, %66
  %97 = and i32 %55, %36
  %98 = xor i32 %73, -1
  %99 = and i32 %56, %98
  %100 = or i32 %73, %11
  %101 = shl i32 %100, 1
  %102 = or i32 %10, %45
  %103 = xor i32 %12, -1
  %104 = or i32 %103, %0
  %105 = or i32 %65, %56
  %106 = shl i32 %105, 1
  %107 = or i32 %42, %1
  %108 = or i32 %56, %52
  %109 = xor i32 %12, %0
  %110 = and i32 %55, %98
  %111 = xor i32 %50, %82
  %112 = and i32 %55, %44
  %113 = shl i32 %112, 1
  %114 = xor i32 %65, -1
  %115 = and i32 %67, %114
  %116 = and i32 %56, %1
  %117 = or i32 %73, %56
  %118 = and i32 %11, %98
  %119 = xor i32 %65, %2
  %120 = and i32 %73, %56
  %121 = and i32 %55, %37
  %122 = or i32 %59, %2
  %123 = shl i32 %122, 1
  %124 = or i32 %38, %45
  %125 = shl i32 %124, 1
  %126 = and i32 %44, %11
  %127 = or i32 %71, %36
  %128 = and i32 %33, %1
  %129 = or i32 %55, %73
  %130 = or i32 %71, %1
  %131 = shl i32 %130, 1
  %132 = and i32 %73, %11
  %133 = and i32 %72, %36
  %134 = xor i32 %30, %0
  %135 = and i32 %38, %60
  %136 = xor i32 %10, %103
  %137 = xor i32 %33, %1
  %138 = and i32 %87, %0
  %139 = xor i32 %65, %103
  %140 = xor i32 %87, %0
  %141 = mul i32 %140, 5
  %142 = xor i32 %41, %59
  %143 = or i32 %73, %42
  %144 = and i32 %94, %36
  %145 = shl i32 %144, 1
  %146 = xor i32 %7, %0
  %147 = or i32 %34, %1
  %148 = and i32 %78, %66
  %149 = xor i32 %148, %82
  %150 = and i32 %7, %66
  %151 = shl i32 %150, 2
  %152 = and i32 %29, %66
  %153 = and i32 %7, %0
  %154 = xor i32 %153, 2147483647
  %155 = xor i32 %154, %152
  %156 = shl i32 %155, 1
  %157 = and i32 %98, %2
  %158 = or i32 %10, %52
  %159 = and i32 %67, %0
  %160 = and i32 %38, %0
  %161 = or i32 %152, %160
  %162 = and i32 %94, %98
  %163 = or i32 %65, %2
  %164 = or i32 %59, %11
  %165 = or i32 %55, %36
  %166 = xor i32 %87, -1
  %167 = or i32 %59, %166
  %168 = xor i32 %33, %59
  %169 = or i32 %55, %1
  %170 = or i32 %38, %0
  %171 = xor i32 %170, -1
  %172 = or i32 %81, %171
  %173 = add i32 %2, 1
  %174 = or i32 %12, %65
  %175 = or i32 %73, %34
  %176 = and i32 %103, %66
  %177 = or i32 %67, %45
  %178 = and i32 %72, %1
  %179 = or i32 %55, %98
  %180 = xor i32 %71, %87
  %181 = or i32 %56, %98
  %182 = or i32 %67, %52
  %183 = and i32 %55, %114
  %184 = and i32 %37, %11
  %185 = or i32 %71, %73
  %186 = and i32 %33, %36
  %187 = shl i32 %186, 1
  %188 = xor i32 %79, -1
  %189 = xor i32 %77, %188
  %190 = and i32 %30, %0
  %191 = and i32 %73, %2
  %192 = or i32 %38, %66
  %193 = or i32 %49, %146
  %194 = xor i32 %10, %7
  %195 = and i32 %55, %73
  %196 = xor i32 %10, %1
  %197 = or i32 %10, %73
  %198 = or i32 %81, %50
  %199 = or i32 %10, %36
  %200 = xor i32 %77, %192
  %201 = shl i32 %200, 1
  %202 = or i32 %49, %150
  %203 = or i32 %59, %56
  %204 = shl i32 %203, 1
  %205 = xor i32 %192, -1
  %206 = or i32 %77, %205
  %207 = and i32 %41, %73
  %208 = and i32 %37, %56
  %209 = shl i32 %208, 1
  %210 = and i32 %33, %73
  %211 = shl i32 %210, 1
  %212 = shl i32 %10, 1
  %213 = xor i32 %41, %1
  %214 = or i32 %59, %67
  %215 = or i32 %52, %2
  %216 = or i32 %38, %65
  %217 = or i32 %29, %0
  %218 = or i32 %10, %1
  %219 = or i32 %81, %148
  %220 = or i32 %7, %0
  %221 = or i32 %65, %11
  %222 = and i32 %8, %66
  %223 = shl i32 %222, 2
  %224 = and i32 %12, %66
  %225 = and i32 %8, %0
  %226 = and i32 %12, %0
  %227 = and i32 %166, %66
  %228 = shl i32 %227, 3
  %229 = and i32 %166, %0
  %230 = add i32 %1, -1
  %231 = add i32 %230, %2
  %232 = add i32 %231, %33
  %233 = add i32 %232, %220
  %234 = add i32 %233, %197
  %235 = add i32 %234, %182
  %236 = add i32 %235, %162
  %237 = add i32 %236, %129
  %238 = add i32 %237, %116
  %239 = add i32 %238, %97
  %240 = add i32 %239, %96
  %241 = add i32 %240, %74
  %242 = add i32 %241, %86
  %243 = shl i32 %242, 1
  %244 = add i32 %229, %226
  %245 = sub i32 %244, %224
  %246 = mul i32 %245, 7
  %247 = mul i32 %29, -9
  %248 = add i32 %0, 3
  %249 = sub i32 %248, %65
  %250 = add i32 %249, %60
  %251 = add i32 %250, %98
  %252 = add i32 %251, %114
  %253 = add i32 %252, %45
  %254 = sub i32 %253, %37
  %255 = add i32 %254, %52
  %256 = sub i32 %255, %59
  %257 = add i32 %256, %173
  %258 = sub i32 %257, %73
  %259 = add i32 %258, %18
  %260 = sub i32 %259, %46
  %261 = sub i32 %260, %48
  %262 = add i32 %261, %7
  %263 = add i32 %262, %61
  %264 = add i32 %263, %62
  %265 = add i32 %264, %30
  %266 = add i32 %265, %95
  %267 = sub i32 %266, %118
  %268 = add i32 %267, %119
  %269 = add i32 %268, %126
  %270 = sub i32 %269, %132
  %271 = add i32 %270, %71
  %272 = sub i32 %271, %38
  %273 = sub i32 %272, %157
  %274 = add i32 %273, %163
  %275 = sub i32 %274, %164
  %276 = add i32 %275, %42
  %277 = sub i32 %276, %184
  %278 = add i32 %277, %191
  %279 = sub i32 %278, %29
  %280 = add i32 %279, %34
  %281 = add i32 %280, %215
  %282 = sub i32 %281, %221
  %283 = add i32 %282, %16
  %284 = sub i32 %283, %35
  %285 = sub i32 %284, %43
  %286 = sub i32 %285, %47
  %287 = add i32 %286, %63
  %288 = sub i32 %287, %64
  %289 = sub i32 %288, %68
  %290 = sub i32 %289, %69
  %291 = sub i32 %290, %70
  %292 = add i32 %291, %75
  %293 = add i32 %292, %88
  %294 = add i32 %293, %89
  %295 = sub i32 %294, %90
  %296 = add i32 %295, %91
  %297 = add i32 %296, %99
  %298 = sub i32 %297, %101
  %299 = add i32 %298, %102
  %300 = sub i32 %299, %104
  %301 = sub i32 %300, %107
  %302 = sub i32 %301, %108
  %303 = add i32 %302, %109
  %304 = sub i32 %303, %110
  %305 = add i32 %304, %115
  %306 = sub i32 %305, %117
  %307 = add i32 %306, %120
  %308 = sub i32 %307, %121
  %309 = sub i32 %308, %123
  %310 = add i32 %309, %127
  %311 = sub i32 %310, %128
  %312 = sub i32 %311, %133
  %313 = sub i32 %312, %134
  %314 = add i32 %313, %135
  %315 = add i32 %314, %136
  %316 = add i32 %315, %137
  %317 = add i32 %316, %138
  %318 = add i32 %317, %85
  %319 = add i32 %318, %139
  %320 = add i32 %319, %142
  %321 = add i32 %320, %143
  %322 = sub i32 %321, %146
  %323 = sub i32 %322, %147
  %324 = add i32 %323, %158
  %325 = add i32 %324, %159
  %326 = add i32 %325, %153
  %327 = add i32 %326, %165
  %328 = sub i32 %327, %167
  %329 = sub i32 %328, %168
  %330 = sub i32 %329, %160
  %331 = add i32 %330, %169
  %332 = add i32 %331, %174
  %333 = sub i32 %332, %175
  %334 = sub i32 %333, %176
  %335 = add i32 %334, %177
  %336 = add i32 %335, %178
  %337 = add i32 %336, %179
  %338 = add i32 %337, %180
  %339 = sub i32 %338, %181
  %340 = add i32 %339, %183
  %341 = sub i32 %340, %185
  %342 = sub i32 %341, %190
  %343 = sub i32 %342, %192
  %344 = add i32 %343, %194
  %345 = sub i32 %344, %195
  %346 = sub i32 %345, %196
  %347 = sub i32 %346, %199
  %348 = sub i32 %347, %207
  %349 = sub i32 %348, %212
  %350 = add i32 %349, %213
  %351 = add i32 %350, %214
  %352 = add i32 %351, %216
  %353 = add i32 %352, %217
  %354 = sub i32 %353, %218
  %355 = sub i32 %354, %225
  %356 = sub i32 %355, %17
  %357 = add i32 %356, %19
  %358 = add i32 %357, %20
  %359 = add i32 %358, %23
  %360 = sub i32 %359, %32
  %361 = sub i32 %360, %40
  %362 = add i32 %361, %51
  %363 = sub i32 %362, %54
  %364 = add i32 %363, %58
  %365 = sub i32 %364, %80
  %366 = sub i32 %365, %84
  %367 = sub i32 %366, %93
  %368 = sub i32 %367, %106
  %369 = add i32 %368, %111
  %370 = sub i32 %369, %113
  %371 = sub i32 %370, %125
  %372 = sub i32 %371, %131
  %373 = add i32 %372, %141
  %374 = sub i32 %373, %145
  %375 = add i32 %374, %149
  %376 = sub i32 %375, %151
  %377 = add i32 %376, %161
  %378 = sub i32 %377, %172
  %379 = sub i32 %378, %187
  %380 = sub i32 %379, %189
  %381 = sub i32 %380, %193
  %382 = add i32 %381, %198
  %383 = sub i32 %382, %202
  %384 = sub i32 %383, %204
  %385 = sub i32 %384, %206
  %386 = sub i32 %385, %209
  %387 = sub i32 %386, %211
  %388 = add i32 %387, %219
  %389 = add i32 %388, %223
  %390 = sub i32 %389, %228
  %391 = sub i32 %390, %28
  %392 = sub i32 %391, %201
  %393 = add i32 %392, %247
  %394 = add i32 %393, %22
  %395 = sub i32 %394, %25
  %396 = sub i32 %395, %27
  %397 = sub i32 %396, %156
  %398 = add i32 %397, %246
  %399 = add i32 %398, %243
  %400 = icmp eq i32 %15, %399
  %401 = select i1 %400, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %402 = tail call i32 @puts(i8* nonnull dereferenceable(1) %401)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
