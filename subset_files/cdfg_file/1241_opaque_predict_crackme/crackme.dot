digraph "DFG for'crackme' function" {
	Node0x204fd60[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x204fe20[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x204fe90[shape=record, label="  %6 = sub i32 0, %5"];
	Node0x204ff00[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x204ff70[shape=record, label="  %8 = and i32 %2, %1"];
	Node0x204ffe0[shape=record, label="  %9 = and i32 %8, %7"];
	Node0x2050050[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x20500c0[shape=record, label="  %11 = and i32 %10, %0"];
	Node0x2050160[shape=record, label="  %12 = xor i32 %11, 2147483647"];
	Node0x20501d0[shape=record, label="  %13 = xor i32 %9, %12"];
	Node0x2050240[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x20502b0[shape=record, label="  %15 = or i32 %14, %0"];
	Node0x2050320[shape=record, label="  %16 = and i32 %15, %4"];
	Node0x2050390[shape=record, label="  %17 = or i32 %1, %0"];
	Node0x2050400[shape=record, label="  %18 = and i32 %17, %2"];
	Node0x2050470[shape=record, label="  %19 = xor i32 %17, -1"];
	Node0x20504e0[shape=record, label="  %20 = xor i32 %2, %0"];
	Node0x2050550[shape=record, label="  %21 = or i32 %20, %19"];
	Node0x20505c0[shape=record, label="  %22 = or i32 %19, %2"];
	Node0x2050630[shape=record, label="  %23 = and i32 %14, %1"];
	Node0x20506a0[shape=record, label="  %24 = or i32 %23, %7"];
	Node0x2050710[shape=record, label="  %25 = xor i32 %20, -1"];
	Node0x2050780[shape=record, label="  %26 = and i32 %25, %1"];
	Node0x2050820[shape=record, label="  %27 = shl i32 %15, 1"];
	Node0x20508c0[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x2050930[shape=record, label="  %29 = xor i32 %17, %2"];
	Node0x20509d0[shape=record, label="  %30 = shl i32 %29, 2"];
	Node0x2050a40[shape=record, label="  %31 = or i32 %8, %7"];
	Node0x2050ab0[shape=record, label="  %32 = xor i32 %5, -1"];
	Node0x2050d30[shape=record, label="  %33 = xor i32 %2, %1"];
	Node0x2050da0[shape=record, label="  %34 = or i32 %33, %32"];
	Node0x2050e10[shape=record, label="  %35 = xor i32 %10, -1"];
	Node0x2050e80[shape=record, label="  %36 = and i32 %35, %7"];
	Node0x2050ef0[shape=record, label="  %37 = and i32 %23, %7"];
	Node0x2050f60[shape=record, label="  %38 = and i32 %35, %0"];
	Node0x2050fd0[shape=record, label="  %39 = and i32 %23, %0"];
	Node0x2051040[shape=record, label="  %40 = and i32 %4, %2"];
	Node0x20510b0[shape=record, label="  %41 = and i32 %40, %7"];
	Node0x2051120[shape=record, label="  %42 = and i32 %40, %0"];
	Node0x2051190[shape=record, label="  %43 = and i32 %8, %0"];
	Node0x2051200[shape=record, label="  %44 = sub i32 %39, %42"];
	Node0x2051270[shape=record, label="  %45 = add i32 %44, %37"];
	Node0x20512e0[shape=record, label="  %46 = sub i32 %45, %36"];
	Node0x2051380[shape=record, label="  %47 = mul i32 %46, 3"];
	Node0x20513f0[shape=record, label="  %48 = sub i32 %41, %43"];
	Node0x2051460[shape=record, label="  %49 = add i32 %48, %38"];
	Node0x2051500[shape=record, label="  %50 = mul i32 %49, 5"];
	Node0x2051570[shape=record, label="  %51 = sub i32 %24, %13"];
	Node0x20515e0[shape=record, label="  %52 = shl i32 %51, 1"];
	Node0x2051650[shape=record, label="  %53 = add i32 %22, %18"];
	Node0x20516c0[shape=record, label="  %54 = add i32 %53, %16"];
	Node0x2051730[shape=record, label="  %55 = sub i32 %54, %21"];
	Node0x20517a0[shape=record, label="  %56 = add i32 %55, %26"];
	Node0x2051810[shape=record, label="  %57 = sub i32 %56, %30"];
	Node0x2051880[shape=record, label="  %58 = add i32 %57, %31"];
	Node0x20518f0[shape=record, label="  %59 = sub i32 %58, %34"];
	Node0x2051960[shape=record, label="  %60 = sub i32 %59, %9"];
	Node0x20519d0[shape=record, label="  %61 = sub i32 %60, %28"];
	Node0x2051a40[shape=record, label="  %62 = add i32 %61, %50"];
	Node0x2051ab0[shape=record, label="  %63 = add i32 %62, %52"];
	Node0x2051b20[shape=record, label="  %64 = add i32 %63, %47"];
	Node0x2051fa0[shape=record, label="  %65 = icmp eq i32 %64, %6"];
	Node0x1ff0268[shape=record, label="  %66 = select i1 %65, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2052230[shape=record, label="  %67 = tail call i32 @puts(i8* nonnull dereferenceable(1) %66)"];
	Node0x2052280[shape=record, label="  ret void"];
	Node0x204fd60 -> Node0x204fe20;
	Node0x204fe20 -> Node0x204fe90;
	Node0x204fe90 -> Node0x204ff00;
	Node0x204ff00 -> Node0x204ff70;
	Node0x204ff70 -> Node0x204ffe0;
	Node0x204ffe0 -> Node0x2050050;
	Node0x2050050 -> Node0x20500c0;
	Node0x20500c0 -> Node0x2050160;
	Node0x2050160 -> Node0x20501d0;
	Node0x20501d0 -> Node0x2050240;
	Node0x2050240 -> Node0x20502b0;
	Node0x20502b0 -> Node0x2050320;
	Node0x2050320 -> Node0x2050390;
	Node0x2050390 -> Node0x2050400;
	Node0x2050400 -> Node0x2050470;
	Node0x2050470 -> Node0x20504e0;
	Node0x20504e0 -> Node0x2050550;
	Node0x2050550 -> Node0x20505c0;
	Node0x20505c0 -> Node0x2050630;
	Node0x2050630 -> Node0x20506a0;
	Node0x20506a0 -> Node0x2050710;
	Node0x2050710 -> Node0x2050780;
	Node0x2050780 -> Node0x2050820;
	Node0x2050820 -> Node0x20508c0;
	Node0x20508c0 -> Node0x2050930;
	Node0x2050930 -> Node0x20509d0;
	Node0x20509d0 -> Node0x2050a40;
	Node0x2050a40 -> Node0x2050ab0;
	Node0x2050ab0 -> Node0x2050d30;
	Node0x2050d30 -> Node0x2050da0;
	Node0x2050da0 -> Node0x2050e10;
	Node0x2050e10 -> Node0x2050e80;
	Node0x2050e80 -> Node0x2050ef0;
	Node0x2050ef0 -> Node0x2050f60;
	Node0x2050f60 -> Node0x2050fd0;
	Node0x2050fd0 -> Node0x2051040;
	Node0x2051040 -> Node0x20510b0;
	Node0x20510b0 -> Node0x2051120;
	Node0x2051120 -> Node0x2051190;
	Node0x2051190 -> Node0x2051200;
	Node0x2051200 -> Node0x2051270;
	Node0x2051270 -> Node0x20512e0;
	Node0x20512e0 -> Node0x2051380;
	Node0x2051380 -> Node0x20513f0;
	Node0x20513f0 -> Node0x2051460;
	Node0x2051460 -> Node0x2051500;
	Node0x2051500 -> Node0x2051570;
	Node0x2051570 -> Node0x20515e0;
	Node0x20515e0 -> Node0x2051650;
	Node0x2051650 -> Node0x20516c0;
	Node0x20516c0 -> Node0x2051730;
	Node0x2051730 -> Node0x20517a0;
	Node0x20517a0 -> Node0x2051810;
	Node0x2051810 -> Node0x2051880;
	Node0x2051880 -> Node0x20518f0;
	Node0x20518f0 -> Node0x2051960;
	Node0x2051960 -> Node0x20519d0;
	Node0x20519d0 -> Node0x2051a40;
	Node0x2051a40 -> Node0x2051ab0;
	Node0x2051ab0 -> Node0x2051b20;
	Node0x2051b20 -> Node0x2051fa0;
	Node0x2051fa0 -> Node0x1ff0268;
	Node0x1ff0268 -> Node0x2052230;
	Node0x2052230 -> Node0x2052280;
edge [color=red]
	Node0x204fd60 -> Node0x204fe20;
	Node0x204fe20 -> Node0x204fe90;
	Node0x204ff70 -> Node0x204ffe0;
	Node0x204ff00 -> Node0x204ffe0;
	Node0x2050050 -> Node0x20500c0;
	Node0x20500c0 -> Node0x2050160;
	Node0x204ffe0 -> Node0x20501d0;
	Node0x2050160 -> Node0x20501d0;
	Node0x2050240 -> Node0x20502b0;
	Node0x20502b0 -> Node0x2050320;
	Node0x204fd60 -> Node0x2050320;
	Node0x2050390 -> Node0x2050400;
	Node0x2050390 -> Node0x2050470;
	Node0x20504e0 -> Node0x2050550;
	Node0x2050470 -> Node0x2050550;
	Node0x2050470 -> Node0x20505c0;
	Node0x2050240 -> Node0x2050630;
	Node0x2050630 -> Node0x20506a0;
	Node0x204ff00 -> Node0x20506a0;
	Node0x20504e0 -> Node0x2050710;
	Node0x2050710 -> Node0x2050780;
	Node0x20502b0 -> Node0x2050820;
	Node0x2050820 -> Node0x20508c0;
	Node0x2050390 -> Node0x2050930;
	Node0x2050930 -> Node0x20509d0;
	Node0x204ff70 -> Node0x2050a40;
	Node0x204ff00 -> Node0x2050a40;
	Node0x204fe20 -> Node0x2050ab0;
	Node0x2050d30 -> Node0x2050da0;
	Node0x2050ab0 -> Node0x2050da0;
	Node0x2050050 -> Node0x2050e10;
	Node0x2050e10 -> Node0x2050e80;
	Node0x204ff00 -> Node0x2050e80;
	Node0x2050630 -> Node0x2050ef0;
	Node0x204ff00 -> Node0x2050ef0;
	Node0x2050e10 -> Node0x2050f60;
	Node0x2050630 -> Node0x2050fd0;
	Node0x204fd60 -> Node0x2051040;
	Node0x2051040 -> Node0x20510b0;
	Node0x204ff00 -> Node0x20510b0;
	Node0x2051040 -> Node0x2051120;
	Node0x204ff70 -> Node0x2051190;
	Node0x2050fd0 -> Node0x2051200;
	Node0x2051120 -> Node0x2051200;
	Node0x2051200 -> Node0x2051270;
	Node0x2050ef0 -> Node0x2051270;
	Node0x2051270 -> Node0x20512e0;
	Node0x2050e80 -> Node0x20512e0;
	Node0x20512e0 -> Node0x2051380;
	Node0x20510b0 -> Node0x20513f0;
	Node0x2051190 -> Node0x20513f0;
	Node0x20513f0 -> Node0x2051460;
	Node0x2050f60 -> Node0x2051460;
	Node0x2051460 -> Node0x2051500;
	Node0x20506a0 -> Node0x2051570;
	Node0x20501d0 -> Node0x2051570;
	Node0x2051570 -> Node0x20515e0;
	Node0x20505c0 -> Node0x2051650;
	Node0x2050400 -> Node0x2051650;
	Node0x2051650 -> Node0x20516c0;
	Node0x2050320 -> Node0x20516c0;
	Node0x20516c0 -> Node0x2051730;
	Node0x2050550 -> Node0x2051730;
	Node0x2051730 -> Node0x20517a0;
	Node0x2050780 -> Node0x20517a0;
	Node0x20517a0 -> Node0x2051810;
	Node0x20509d0 -> Node0x2051810;
	Node0x2051810 -> Node0x2051880;
	Node0x2050a40 -> Node0x2051880;
	Node0x2051880 -> Node0x20518f0;
	Node0x2050da0 -> Node0x20518f0;
	Node0x20518f0 -> Node0x2051960;
	Node0x204ffe0 -> Node0x2051960;
	Node0x2051960 -> Node0x20519d0;
	Node0x20508c0 -> Node0x20519d0;
	Node0x20519d0 -> Node0x2051a40;
	Node0x2051500 -> Node0x2051a40;
	Node0x2051a40 -> Node0x2051ab0;
	Node0x20515e0 -> Node0x2051ab0;
	Node0x2051ab0 -> Node0x2051b20;
	Node0x2051380 -> Node0x2051b20;
	Node0x2051b20 -> Node0x2051fa0;
	Node0x204fe90 -> Node0x2051fa0;
	Node0x2051fa0 -> Node0x1ff0268;
	Node0x1ff0268 -> Node0x2052230;
}
