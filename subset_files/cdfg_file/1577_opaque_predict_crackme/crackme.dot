digraph "DFG for'crackme' function" {
	Node0x205ec40[shape=record, label="  %4 = xor i32 %2, -1"];
	Node0x205ed00[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x205ed70[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x205ede0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x205ee50[shape=record, label="  %8 = and i32 %4, %7"];
	Node0x205eec0[shape=record, label="  %9 = sub i32 0, %8"];
	Node0x205ef30[shape=record, label="  %10 = and i32 %2, %1"];
	Node0x205efa0[shape=record, label="  %11 = and i32 %10, %0"];
	Node0x205f010[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0x205f080[shape=record, label="  %13 = xor i32 %12, %0"];
	Node0x205f0f0[shape=record, label="  %14 = xor i32 %13, %11"];
	Node0x205f160[shape=record, label="  %15 = or i32 %2, %0"];
	Node0x205f1d0[shape=record, label="  %16 = and i32 %15, %5"];
	Node0x205f240[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x205f2b0[shape=record, label="  %18 = or i32 %12, %17"];
	Node0x205f320[shape=record, label="  %19 = and i32 %4, %0"];
	Node0x205f390[shape=record, label="  %20 = or i32 %4, %1"];
	Node0x205f400[shape=record, label="  %21 = xor i32 %19, %20"];
	Node0x205f470[shape=record, label="  %22 = and i32 %17, %2"];
	Node0x205f4e0[shape=record, label="  %23 = xor i32 %17, %1"];
	Node0x205f550[shape=record, label="  %24 = or i32 %22, %23"];
	Node0x205f5f0[shape=record, label="  %25 = shl i32 %6, 1"];
	Node0x205f660[shape=record, label="  %26 = or i32 %2, %1"];
	Node0x205f6d0[shape=record, label="  %27 = xor i32 %26, -1"];
	Node0x205f740[shape=record, label="  %28 = and i32 %27, %17"];
	Node0x205f7b0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x205f820[shape=record, label="  %30 = and i32 %4, %1"];
	Node0x205f890[shape=record, label="  %31 = and i32 %30, %17"];
	Node0x205f900[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0x205fb80[shape=record, label="  %33 = and i32 %27, %0"];
	Node0x205fc20[shape=record, label="  %34 = shl i32 %33, 2"];
	Node0x205fc90[shape=record, label="  %35 = and i32 %30, %0"];
	Node0x205fd00[shape=record, label="  %36 = xor i32 %20, -1"];
	Node0x205fd70[shape=record, label="  %37 = and i32 %36, %17"];
	Node0x205fde0[shape=record, label="  %38 = and i32 %10, %17"];
	Node0x205fe50[shape=record, label="  %39 = and i32 %36, %0"];
	Node0x205fec0[shape=record, label="  %40 = add i32 %39, %37"];
	Node0x205ff30[shape=record, label="  %41 = shl i32 %40, 1"];
	Node0x205ffa0[shape=record, label="  %42 = add i32 %16, %25"];
	Node0x2060010[shape=record, label="  %43 = sub i32 %18, %42"];
	Node0x2060080[shape=record, label="  %44 = add i32 %43, %21"];
	Node0x20600f0[shape=record, label="  %45 = sub i32 %44, %24"];
	Node0x2060160[shape=record, label="  %46 = sub i32 %45, %35"];
	Node0x20601d0[shape=record, label="  %47 = sub i32 %46, %38"];
	Node0x2060240[shape=record, label="  %48 = sub i32 %47, %14"];
	Node0x20602b0[shape=record, label="  %49 = sub i32 %48, %29"];
	Node0x2060320[shape=record, label="  %50 = sub i32 %49, %32"];
	Node0x2060390[shape=record, label="  %51 = add i32 %50, %34"];
	Node0x2060400[shape=record, label="  %52 = add i32 %51, %41"];
	Node0x2060470[shape=record, label="  %53 = icmp eq i32 %52, %9"];
	Node0x1fff268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2060910[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x2060960[shape=record, label="  ret void"];
	Node0x205ec40 -> Node0x205ed00;
	Node0x205ed00 -> Node0x205ed70;
	Node0x205ed70 -> Node0x205ede0;
	Node0x205ede0 -> Node0x205ee50;
	Node0x205ee50 -> Node0x205eec0;
	Node0x205eec0 -> Node0x205ef30;
	Node0x205ef30 -> Node0x205efa0;
	Node0x205efa0 -> Node0x205f010;
	Node0x205f010 -> Node0x205f080;
	Node0x205f080 -> Node0x205f0f0;
	Node0x205f0f0 -> Node0x205f160;
	Node0x205f160 -> Node0x205f1d0;
	Node0x205f1d0 -> Node0x205f240;
	Node0x205f240 -> Node0x205f2b0;
	Node0x205f2b0 -> Node0x205f320;
	Node0x205f320 -> Node0x205f390;
	Node0x205f390 -> Node0x205f400;
	Node0x205f400 -> Node0x205f470;
	Node0x205f470 -> Node0x205f4e0;
	Node0x205f4e0 -> Node0x205f550;
	Node0x205f550 -> Node0x205f5f0;
	Node0x205f5f0 -> Node0x205f660;
	Node0x205f660 -> Node0x205f6d0;
	Node0x205f6d0 -> Node0x205f740;
	Node0x205f740 -> Node0x205f7b0;
	Node0x205f7b0 -> Node0x205f820;
	Node0x205f820 -> Node0x205f890;
	Node0x205f890 -> Node0x205f900;
	Node0x205f900 -> Node0x205fb80;
	Node0x205fb80 -> Node0x205fc20;
	Node0x205fc20 -> Node0x205fc90;
	Node0x205fc90 -> Node0x205fd00;
	Node0x205fd00 -> Node0x205fd70;
	Node0x205fd70 -> Node0x205fde0;
	Node0x205fde0 -> Node0x205fe50;
	Node0x205fe50 -> Node0x205fec0;
	Node0x205fec0 -> Node0x205ff30;
	Node0x205ff30 -> Node0x205ffa0;
	Node0x205ffa0 -> Node0x2060010;
	Node0x2060010 -> Node0x2060080;
	Node0x2060080 -> Node0x20600f0;
	Node0x20600f0 -> Node0x2060160;
	Node0x2060160 -> Node0x20601d0;
	Node0x20601d0 -> Node0x2060240;
	Node0x2060240 -> Node0x20602b0;
	Node0x20602b0 -> Node0x2060320;
	Node0x2060320 -> Node0x2060390;
	Node0x2060390 -> Node0x2060400;
	Node0x2060400 -> Node0x2060470;
	Node0x2060470 -> Node0x1fff268;
	Node0x1fff268 -> Node0x2060910;
	Node0x2060910 -> Node0x2060960;
edge [color=red]
	Node0x205ed00 -> Node0x205ed70;
	Node0x205ed70 -> Node0x205ede0;
	Node0x205ec40 -> Node0x205ee50;
	Node0x205ede0 -> Node0x205ee50;
	Node0x205ee50 -> Node0x205eec0;
	Node0x205ef30 -> Node0x205efa0;
	Node0x205f010 -> Node0x205f080;
	Node0x205f080 -> Node0x205f0f0;
	Node0x205efa0 -> Node0x205f0f0;
	Node0x205f160 -> Node0x205f1d0;
	Node0x205ed00 -> Node0x205f1d0;
	Node0x205f010 -> Node0x205f2b0;
	Node0x205f240 -> Node0x205f2b0;
	Node0x205ec40 -> Node0x205f320;
	Node0x205ec40 -> Node0x205f390;
	Node0x205f320 -> Node0x205f400;
	Node0x205f390 -> Node0x205f400;
	Node0x205f240 -> Node0x205f470;
	Node0x205f240 -> Node0x205f4e0;
	Node0x205f470 -> Node0x205f550;
	Node0x205f4e0 -> Node0x205f550;
	Node0x205ed70 -> Node0x205f5f0;
	Node0x205f660 -> Node0x205f6d0;
	Node0x205f6d0 -> Node0x205f740;
	Node0x205f240 -> Node0x205f740;
	Node0x205f740 -> Node0x205f7b0;
	Node0x205ec40 -> Node0x205f820;
	Node0x205f820 -> Node0x205f890;
	Node0x205f240 -> Node0x205f890;
	Node0x205f890 -> Node0x205f900;
	Node0x205f6d0 -> Node0x205fb80;
	Node0x205fb80 -> Node0x205fc20;
	Node0x205f820 -> Node0x205fc90;
	Node0x205f390 -> Node0x205fd00;
	Node0x205fd00 -> Node0x205fd70;
	Node0x205f240 -> Node0x205fd70;
	Node0x205ef30 -> Node0x205fde0;
	Node0x205f240 -> Node0x205fde0;
	Node0x205fd00 -> Node0x205fe50;
	Node0x205fe50 -> Node0x205fec0;
	Node0x205fd70 -> Node0x205fec0;
	Node0x205fec0 -> Node0x205ff30;
	Node0x205f1d0 -> Node0x205ffa0;
	Node0x205f5f0 -> Node0x205ffa0;
	Node0x205f2b0 -> Node0x2060010;
	Node0x205ffa0 -> Node0x2060010;
	Node0x2060010 -> Node0x2060080;
	Node0x205f400 -> Node0x2060080;
	Node0x2060080 -> Node0x20600f0;
	Node0x205f550 -> Node0x20600f0;
	Node0x20600f0 -> Node0x2060160;
	Node0x205fc90 -> Node0x2060160;
	Node0x2060160 -> Node0x20601d0;
	Node0x205fde0 -> Node0x20601d0;
	Node0x20601d0 -> Node0x2060240;
	Node0x205f0f0 -> Node0x2060240;
	Node0x2060240 -> Node0x20602b0;
	Node0x205f7b0 -> Node0x20602b0;
	Node0x20602b0 -> Node0x2060320;
	Node0x205f900 -> Node0x2060320;
	Node0x2060320 -> Node0x2060390;
	Node0x205fc20 -> Node0x2060390;
	Node0x2060390 -> Node0x2060400;
	Node0x205ff30 -> Node0x2060400;
	Node0x2060400 -> Node0x2060470;
	Node0x205eec0 -> Node0x2060470;
	Node0x2060470 -> Node0x1fff268;
	Node0x1fff268 -> Node0x2060910;
}
