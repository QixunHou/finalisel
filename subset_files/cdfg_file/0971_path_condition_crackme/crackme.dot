digraph "DFG for'crackme' function" {
	Node0x21b7b00[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x21b8180[shape=record, label="  %6 = sub i32 -2, %5"];
	Node0x21b81f0[shape=record, label="  %7 = or i32 %2, %1"];
	Node0x21b8290[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x21b8330[shape=record, label="  %9 = xor i32 %2, 2147483647"];
	Node0x21b83a0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x21b8410[shape=record, label="  %11 = and i32 %9, %1"];
	Node0x21b84b0[shape=record, label="  %12 = shl i32 %7, 2"];
	Node0x21b8550[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x21b85f0[shape=record, label="  %14 = mul i32 %5, 3"];
	Node0x21b8660[shape=record, label="  %15 = or i32 %3, %0"];
	Node0x21b8700[shape=record, label="  %16 = xor i32 %0, -1"];
	Node0x21b8770[shape=record, label="  %17 = and i32 %16, %3"];
	Node0x21b87e0[shape=record, label="  %18 = or i32 %16, %3"];
	Node0x21b8850[shape=record, label="  %19 = and i32 %3, %0"];
	Node0x21b88c0[shape=record, label="  %20 = shl i32 %15, 1"];
	Node0x21b8930[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x21b89a0[shape=record, label="  %22 = xor i32 %18, -1"];
	Node0x21b8a40[shape=record, label="  %23 = mul i32 %17, 6"];
	Node0x21b8ae0[shape=record, label="  %24 = mul i32 %19, 7"];
	Node0x21b8b50[shape=record, label="  %25 = sub i32 %22, %3"];
	Node0x21b8bf0[shape=record, label="  %26 = mul i32 %25, 5"];
	Node0x21b8c60[shape=record, label="  %27 = sub i32 %11, %1"];
	Node0x21b8cd0[shape=record, label="  %28 = add i32 %27, %10"];
	Node0x21b8d40[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x21b8db0[shape=record, label="  %30 = sub i32 5, %0"];
	Node0x21b8e20[shape=record, label="  %31 = add i32 %30, %3"];
	Node0x21b8e90[shape=record, label="  %32 = add i32 %31, %8"];
	Node0x21b9110[shape=record, label="  %33 = add i32 %32, %14"];
	Node0x21b9180[shape=record, label="  %34 = sub i32 %33, %15"];
	Node0x21b91f0[shape=record, label="  %35 = add i32 %34, %17"];
	Node0x21b9260[shape=record, label="  %36 = add i32 %35, %18"];
	Node0x21b92d0[shape=record, label="  %37 = add i32 %36, %19"];
	Node0x21b9340[shape=record, label="  %38 = add i32 %37, %13"];
	Node0x21b93b0[shape=record, label="  %39 = add i32 %38, %23"];
	Node0x21b9420[shape=record, label="  %40 = add i32 %39, %24"];
	Node0x21b9490[shape=record, label="  %41 = add i32 %40, %21"];
	Node0x21b9500[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x21b9570[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x21b95e0[shape=record, label="  %44 = icmp eq i32 %6, %43"];
	Node0x2158268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x21b9a80[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x21b9ad0[shape=record, label="  ret void"];
	Node0x21b7b00 -> Node0x21b8180;
	Node0x21b8180 -> Node0x21b81f0;
	Node0x21b81f0 -> Node0x21b8290;
	Node0x21b8290 -> Node0x21b8330;
	Node0x21b8330 -> Node0x21b83a0;
	Node0x21b83a0 -> Node0x21b8410;
	Node0x21b8410 -> Node0x21b84b0;
	Node0x21b84b0 -> Node0x21b8550;
	Node0x21b8550 -> Node0x21b85f0;
	Node0x21b85f0 -> Node0x21b8660;
	Node0x21b8660 -> Node0x21b8700;
	Node0x21b8700 -> Node0x21b8770;
	Node0x21b8770 -> Node0x21b87e0;
	Node0x21b87e0 -> Node0x21b8850;
	Node0x21b8850 -> Node0x21b88c0;
	Node0x21b88c0 -> Node0x21b8930;
	Node0x21b8930 -> Node0x21b89a0;
	Node0x21b89a0 -> Node0x21b8a40;
	Node0x21b8a40 -> Node0x21b8ae0;
	Node0x21b8ae0 -> Node0x21b8b50;
	Node0x21b8b50 -> Node0x21b8bf0;
	Node0x21b8bf0 -> Node0x21b8c60;
	Node0x21b8c60 -> Node0x21b8cd0;
	Node0x21b8cd0 -> Node0x21b8d40;
	Node0x21b8d40 -> Node0x21b8db0;
	Node0x21b8db0 -> Node0x21b8e20;
	Node0x21b8e20 -> Node0x21b8e90;
	Node0x21b8e90 -> Node0x21b9110;
	Node0x21b9110 -> Node0x21b9180;
	Node0x21b9180 -> Node0x21b91f0;
	Node0x21b91f0 -> Node0x21b9260;
	Node0x21b9260 -> Node0x21b92d0;
	Node0x21b92d0 -> Node0x21b9340;
	Node0x21b9340 -> Node0x21b93b0;
	Node0x21b93b0 -> Node0x21b9420;
	Node0x21b9420 -> Node0x21b9490;
	Node0x21b9490 -> Node0x21b9500;
	Node0x21b9500 -> Node0x21b9570;
	Node0x21b9570 -> Node0x21b95e0;
	Node0x21b95e0 -> Node0x2158268;
	Node0x2158268 -> Node0x21b9a80;
	Node0x21b9a80 -> Node0x21b9ad0;
edge [color=red]
	Node0x21b7b00 -> Node0x21b8180;
	Node0x21b81f0 -> Node0x21b8290;
	Node0x21b8330 -> Node0x21b8410;
	Node0x21b81f0 -> Node0x21b84b0;
	Node0x21b84b0 -> Node0x21b8550;
	Node0x21b7b00 -> Node0x21b85f0;
	Node0x21b8700 -> Node0x21b8770;
	Node0x21b8700 -> Node0x21b87e0;
	Node0x21b8660 -> Node0x21b88c0;
	Node0x21b88c0 -> Node0x21b8930;
	Node0x21b87e0 -> Node0x21b89a0;
	Node0x21b8770 -> Node0x21b8a40;
	Node0x21b8850 -> Node0x21b8ae0;
	Node0x21b89a0 -> Node0x21b8b50;
	Node0x21b8b50 -> Node0x21b8bf0;
	Node0x21b8410 -> Node0x21b8c60;
	Node0x21b8c60 -> Node0x21b8cd0;
	Node0x21b83a0 -> Node0x21b8cd0;
	Node0x21b8cd0 -> Node0x21b8d40;
	Node0x21b8db0 -> Node0x21b8e20;
	Node0x21b8e20 -> Node0x21b8e90;
	Node0x21b8290 -> Node0x21b8e90;
	Node0x21b8e90 -> Node0x21b9110;
	Node0x21b85f0 -> Node0x21b9110;
	Node0x21b9110 -> Node0x21b9180;
	Node0x21b8660 -> Node0x21b9180;
	Node0x21b9180 -> Node0x21b91f0;
	Node0x21b8770 -> Node0x21b91f0;
	Node0x21b91f0 -> Node0x21b9260;
	Node0x21b87e0 -> Node0x21b9260;
	Node0x21b9260 -> Node0x21b92d0;
	Node0x21b8850 -> Node0x21b92d0;
	Node0x21b92d0 -> Node0x21b9340;
	Node0x21b8550 -> Node0x21b9340;
	Node0x21b9340 -> Node0x21b93b0;
	Node0x21b8a40 -> Node0x21b93b0;
	Node0x21b93b0 -> Node0x21b9420;
	Node0x21b8ae0 -> Node0x21b9420;
	Node0x21b9420 -> Node0x21b9490;
	Node0x21b8930 -> Node0x21b9490;
	Node0x21b9490 -> Node0x21b9500;
	Node0x21b8bf0 -> Node0x21b9500;
	Node0x21b9500 -> Node0x21b9570;
	Node0x21b8d40 -> Node0x21b9570;
	Node0x21b8180 -> Node0x21b95e0;
	Node0x21b9570 -> Node0x21b95e0;
	Node0x21b95e0 -> Node0x2158268;
	Node0x2158268 -> Node0x21b9a80;
}
