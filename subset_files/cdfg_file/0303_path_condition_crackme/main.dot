digraph "DFG for'main' function" {
	Node0x1d9d128[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1d9d1a8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1d9d238[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1d9d698[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d9d778[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1d9d898[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d9dad0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1d9db88[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1d9eaf8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1d9f180[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x1d9f1f0[shape=record, label="  %9 = or i32 %7, %6"];
	Node0x1d9f260[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1d9f2d0[shape=record, label="  %11 = xor i32 %7, %6"];
	Node0x1d9f340[shape=record, label="  %12 = sub i32 %10, %11"];
	Node0x1d9f3b0[shape=record, label="  %13 = icmp eq i32 %8, %12"];
	Node0x1d9f438[shape=record, label="  %14 = select i1 %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d9f4d0[shape=record, label="  %15 = call i32 @puts(i8* nonnull dereferenceable(1) %14) #5"];
	Node0x1d9f728[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d9f888[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d9f948[shape=record, label="  ret i32 0"];
	Node0x1d9d128 -> Node0x1d9d1a8;
	Node0x1d9d1a8 -> Node0x1d9d238;
	Node0x1d9d238 -> Node0x1d9d698;
	Node0x1d9d698 -> Node0x1d9d778;
	Node0x1d9d778 -> Node0x1d9d898;
	Node0x1d9d898 -> Node0x1d9dad0;
	Node0x1d9dad0 -> Node0x1d9db88;
	Node0x1d9db88 -> Node0x1d9eaf8;
	Node0x1d9eaf8 -> Node0x1d9f180;
	Node0x1d9f180 -> Node0x1d9f1f0;
	Node0x1d9f1f0 -> Node0x1d9f260;
	Node0x1d9f260 -> Node0x1d9f2d0;
	Node0x1d9f2d0 -> Node0x1d9f340;
	Node0x1d9f340 -> Node0x1d9f3b0;
	Node0x1d9f3b0 -> Node0x1d9f438;
	Node0x1d9f438 -> Node0x1d9f4d0;
	Node0x1d9f4d0 -> Node0x1d9f728;
	Node0x1d9f728 -> Node0x1d9f888;
	Node0x1d9f888 -> Node0x1d9f948;
edge [color=red]
	Node0x1d9d128 -> Node0x1d9d238;
	Node0x1d9d238 -> Node0x1d9d698;
	Node0x1d9d1a8 -> Node0x1d9d778;
	Node0x1d9d778 -> Node0x1d9d898;
	Node0x1d9d128 -> Node0x1d9dad0;
	Node0x1d9d1a8 -> Node0x1d9dad0;
	Node0x1d9d128 -> Node0x1d9db88;
	Node0x1d9d1a8 -> Node0x1d9eaf8;
	Node0x1d9eaf8 -> Node0x1d9f180;
	Node0x1d9db88 -> Node0x1d9f180;
	Node0x1d9eaf8 -> Node0x1d9f1f0;
	Node0x1d9db88 -> Node0x1d9f1f0;
	Node0x1d9f1f0 -> Node0x1d9f260;
	Node0x1d9eaf8 -> Node0x1d9f2d0;
	Node0x1d9db88 -> Node0x1d9f2d0;
	Node0x1d9f260 -> Node0x1d9f340;
	Node0x1d9f2d0 -> Node0x1d9f340;
	Node0x1d9f180 -> Node0x1d9f3b0;
	Node0x1d9f340 -> Node0x1d9f3b0;
	Node0x1d9f3b0 -> Node0x1d9f438;
	Node0x1d9f438 -> Node0x1d9f4d0;
	Node0x1d9d778 -> Node0x1d9f728;
	Node0x1d9d238 -> Node0x1d9f888;
}
