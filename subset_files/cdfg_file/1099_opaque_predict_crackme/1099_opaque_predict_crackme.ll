; ModuleID = '../.././c_source_file/1099_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1099_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %4, -1
  %8 = or i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %2
  %11 = sub i32 %7, %10
  %12 = add i32 %11, %6
  %13 = xor i32 %3, -1
  %14 = and i32 %7, %3
  %15 = xor i32 %14, -1
  %16 = or i32 %4, %3
  %17 = shl i32 %16, 1
  %18 = xor i32 %17, -2
  %19 = and i32 %4, %3
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %2
  %22 = and i32 %21, %0
  %23 = xor i32 %2, %1
  %24 = or i32 %23, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %22, %25
  %27 = and i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %1
  %30 = or i32 %2, %1
  %31 = xor i32 %27, %30
  %32 = and i32 %1, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %33, %2
  %35 = xor i32 %22, %24
  %36 = xor i32 %2, -1
  %37 = and i32 %8, %36
  %38 = xor i32 %0, -1
  %39 = and i32 %21, %38
  %40 = or i32 %20, %2
  %41 = and i32 %40, %0
  %42 = or i32 %39, %41
  %43 = and i32 %2, %1
  %44 = and i32 %43, %38
  %45 = and i32 %23, %0
  %46 = xor i32 %44, -1
  %47 = xor i32 %45, %46
  %48 = xor i32 %30, %0
  %49 = shl i32 %48, 1
  %50 = or i32 %20, %0
  %51 = xor i32 %50, %2
  %52 = or i32 %27, %9
  %53 = and i32 %36, %1
  %54 = xor i32 %53, -1
  %55 = and i32 %54, %0
  %56 = shl i32 %55, 1
  %57 = and i32 %36, %0
  %58 = or i32 %36, %1
  %59 = xor i32 %57, %58
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %2, %0
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %9
  %65 = and i32 %20, %0
  %66 = or i32 %62, %65
  %67 = and i32 %23, %38
  %68 = xor i32 %30, -1
  %69 = or i32 %68, %0
  %70 = xor i32 %65, -1
  %71 = xor i32 %70, %2
  %72 = or i32 %23, %38
  %73 = and i32 %63, %20
  %74 = shl i32 %73, 1
  %75 = xor i32 %23, -1
  %76 = or i32 %75, %9
  %77 = and i32 %75, %33
  %78 = or i32 %23, %32
  %79 = and i32 %23, %70
  %80 = xor i32 %1, %0
  %81 = xor i32 %80, -1
  %82 = and i32 %62, %81
  %83 = or i32 %36, %0
  %84 = xor i32 %83, %32
  %85 = xor i32 %57, -1
  %86 = and i32 %85, %1
  %87 = or i32 %68, %38
  %88 = or i32 %32, %75
  %89 = or i32 %32, %61
  %90 = or i32 %9, %2
  %91 = or i32 %23, %65
  %92 = or i32 %61, %81
  %93 = and i32 %40, %38
  %94 = or i32 %22, %93
  %95 = xor i32 %43, -1
  %96 = xor i32 %95, %0
  %97 = shl i32 %96, 1
  %98 = or i32 %57, %1
  %99 = shl i32 %98, 1
  %100 = xor i32 %57, %1
  %101 = or i32 %27, %80
  %102 = or i32 %27, %68
  %103 = or i32 %80, %36
  %104 = xor i32 %23, %0
  %105 = xor i32 %104, 2147483647
  %106 = xor i32 %105, %22
  %107 = or i32 %75, %38
  %108 = shl i32 %107, 1
  %109 = xor i32 %58, %0
  %110 = xor i32 %83, -1
  %111 = or i32 %110, %81
  %112 = shl i32 %36, 1
  %113 = or i32 %32, %63
  %114 = and i32 %62, %20
  %115 = or i32 %110, %1
  %116 = and i32 %80, %85
  %117 = shl i32 %116, 2
  %118 = or i32 %30, %38
  %119 = or i32 %32, %2
  %120 = xor i32 %72, 2147483647
  %121 = or i32 %120, %39
  %122 = xor i32 %50, -1
  %123 = or i32 %63, %122
  %124 = or i32 %27, %53
  %125 = and i32 %30, %0
  %126 = xor i32 %125, %46
  %127 = xor i32 %85, %1
  %128 = add i32 %65, 1
  %129 = xor i32 %40, %0
  %130 = xor i32 %22, -1
  %131 = xor i32 %129, %130
  %132 = and i32 %60, %1
  %133 = and i32 %36, %70
  %134 = and i32 %28, %20
  %135 = and i32 %50, %36
  %136 = and i32 %60, %20
  %137 = or i32 %54, %0
  %138 = or i32 %63, %20
  %139 = xor i32 %83, %1
  %140 = and i32 %80, %36
  %141 = shl i32 %140, 1
  %142 = xor i32 %8, %2
  %143 = or i32 %43, %65
  %144 = shl i32 %143, 1
  %145 = and i32 %62, %70
  %146 = or i32 %62, %32
  %147 = or i32 %110, %20
  %148 = and i32 %50, %75
  %149 = add i32 %8, 1
  %150 = and i32 %50, %63
  %151 = and i32 %28, %1
  %152 = and i32 %63, %70
  %153 = and i32 %83, %20
  %154 = or i32 %57, %81
  %155 = and i32 %80, %28
  %156 = shl i32 %155, 1
  %157 = xor i32 %58, -1
  %158 = or i32 %57, %157
  %159 = xor i32 %27, %54
  %160 = shl i32 %159, 1
  %161 = and i32 %62, %80
  %162 = xor i32 %61, %1
  %163 = and i32 %83, %81
  %164 = xor i32 %41, -1
  %165 = xor i32 %39, %164
  %166 = or i32 %32, %157
  %167 = or i32 %32, %68
  %168 = or i32 %53, %0
  %169 = xor i32 %58, %32
  %170 = add i32 %27, 1
  %171 = and i32 %8, %63
  %172 = and i32 %75, %0
  %173 = or i32 %75, %0
  %174 = shl i32 %173, 1
  %175 = xor i32 %53, %0
  %176 = xor i32 %65, %54
  %177 = and i32 %50, %2
  %178 = xor i32 %27, %1
  %179 = or i32 %65, %2
  %180 = shl i32 %179, 1
  %181 = and i32 %30, %38
  %182 = or i32 %81, %2
  %183 = or i32 %22, %129
  %184 = or i32 %61, %20
  %185 = or i32 %43, %38
  %186 = and i32 %95, %0
  %187 = shl i32 %186, 1
  %188 = xor i32 %187, -1
  %189 = or i32 %23, %122
  %190 = or i32 %80, %63
  %191 = and i32 %60, %80
  %192 = and i32 %63, %1
  %193 = or i32 %157, %0
  %194 = or i32 %27, %1
  %195 = or i32 %157, %38
  %196 = or i32 %65, %75
  %197 = and i32 %54, %38
  %198 = and i32 %75, %70
  %199 = and i32 %23, %50
  %200 = and i32 %33, %2
  %201 = xor i32 %68, %0
  %202 = and i32 %85, %20
  %203 = xor i32 %60, %1
  %204 = or i32 %22, %104
  %205 = shl i32 %204, 2
  %206 = or i32 %57, %43
  %207 = or i32 %23, %9
  %208 = or i32 %62, %81
  %209 = shl i32 %208, 1
  %210 = or i32 %62, %1
  %211 = shl i32 %210, 1
  %212 = or i32 %80, %110
  %213 = shl i32 %212, 1
  %214 = xor i32 %27, %8
  %215 = and i32 %43, %0
  %216 = xor i32 %67, 2147483647
  %217 = xor i32 %216, %215
  %218 = shl i32 %217, 1
  %219 = or i32 %122, %2
  %220 = and i32 %58, %0
  %221 = xor i32 %215, %104
  %222 = and i32 %23, %8
  %223 = or i32 %58, %38
  %224 = shl i32 %223, 1
  %225 = or i32 %65, %36
  %226 = and i32 %80, %2
  %227 = or i32 %63, %1
  %228 = xor i32 %157, %0
  %229 = add i32 %62, 1
  %230 = or i32 %62, %80
  %231 = or i32 %62, %20
  %232 = and i32 %58, %38
  %233 = or i32 %95, %0
  %234 = and i32 %8, %2
  %235 = or i32 %44, %45
  %236 = or i32 %27, %20
  %237 = shl i32 %236, 1
  %238 = xor i32 %215, -1
  %239 = xor i32 %181, %238
  %240 = and i32 %36, %81
  %241 = or i32 %62, %9
  %242 = shl i32 %241, 1
  %243 = xor i32 %60, %32
  %244 = xor i32 %48, %238
  %245 = or i32 %95, %38
  %246 = and i32 %95, %38
  %247 = or i32 %80, %2
  %248 = xor i32 %30, %32
  %249 = xor i32 %110, %1
  %250 = or i32 %61, %1
  %251 = and i32 %83, %80
  %252 = shl i32 %251, 1
  %253 = or i32 %53, %65
  %254 = or i32 %27, %81
  %255 = or i32 %36, %122
  %256 = or i32 %43, %0
  %257 = or i32 %27, %122
  %258 = or i32 %54, %38
  %259 = or i32 %75, %122
  %260 = xor i32 %32, %2
  %261 = and i32 %75, %38
  %262 = xor i32 %43, %0
  %263 = xor i32 %39, %72
  %264 = or i32 %36, %81
  %265 = and i32 %81, %2
  %266 = or i32 %32, %36
  %267 = shl i32 %266, 2
  %268 = and i32 %83, %1
  %269 = or i32 %57, %80
  %270 = xor i32 %93, %130
  %271 = xor i32 %122, %2
  %272 = and i32 %62, %1
  %273 = and i32 %23, %33
  %274 = xor i32 %65, %95
  %275 = shl i32 %80, 1
  %276 = xor i32 %65, %2
  %277 = and i32 %68, %38
  %278 = mul i32 %277, 26
  %279 = and i32 %53, %38
  %280 = mul i32 %279, 21
  %281 = and i32 %68, %0
  %282 = mul i32 %281, 23
  %283 = and i32 %53, %0
  %284 = and i32 %157, %38
  %285 = shl i32 %44, 3
  %286 = and i32 %157, %0
  %287 = mul i32 %286, 28
  %288 = add i32 %8, %38
  %289 = add i32 %288, %50
  %290 = add i32 %289, %81
  %291 = add i32 %290, %60
  %292 = add i32 %291, %23
  %293 = add i32 %292, %226
  %294 = add i32 %293, %110
  %295 = add i32 %294, %133
  %296 = add i32 %295, %119
  %297 = add i32 %296, %34
  %298 = add i32 %297, %261
  %299 = add i32 %298, %259
  %300 = add i32 %299, %243
  %301 = add i32 %300, %230
  %302 = add i32 %301, %220
  %303 = add i32 %302, %202
  %304 = add i32 %303, %192
  %305 = add i32 %304, %190
  %306 = add i32 %305, %145
  %307 = add i32 %306, %132
  %308 = add i32 %307, %14
  %309 = add i32 %308, %106
  %310 = add i32 %309, %121
  %311 = shl i32 %310, 1
  %312 = add i32 %142, %255
  %313 = sub i32 %312, %136
  %314 = sub i32 %313, %227
  %315 = add i32 %314, %82
  %316 = mul i32 %315, 3
  %317 = sub i32 %27, %162
  %318 = sub i32 %317, %254
  %319 = sub i32 %318, %154
  %320 = mul i32 %319, 5
  %321 = add i32 %215, %283
  %322 = mul i32 %321, 15
  %323 = add i32 %272, %265
  %324 = shl i32 %323, 2
  %325 = mul i32 %284, 6
  %326 = add i32 %325, -6
  %327 = add i32 %128, %0
  %328 = add i32 %327, %149
  %329 = add i32 %328, %122
  %330 = sub i32 %329, %65
  %331 = add i32 %330, %13
  %332 = sub i32 %331, %37
  %333 = sub i32 %332, %51
  %334 = add i32 %333, %61
  %335 = sub i32 %334, %71
  %336 = add i32 %335, %90
  %337 = add i32 %336, %103
  %338 = sub i32 %337, %112
  %339 = add i32 %338, %135
  %340 = add i32 %339, %170
  %341 = add i32 %340, %177
  %342 = add i32 %341, %182
  %343 = sub i32 %342, %200
  %344 = add i32 %343, %83
  %345 = sub i32 %344, %219
  %346 = sub i32 %345, %58
  %347 = sub i32 %346, %225
  %348 = add i32 %347, %229
  %349 = sub i32 %348, %234
  %350 = sub i32 %349, %240
  %351 = add i32 %350, %62
  %352 = add i32 %351, %247
  %353 = add i32 %352, %260
  %354 = add i32 %353, %264
  %355 = add i32 %354, %271
  %356 = sub i32 %355, %30
  %357 = sub i32 %356, %275
  %358 = add i32 %357, %276
  %359 = sub i32 %358, %4
  %360 = add i32 %359, %29
  %361 = add i32 %360, %31
  %362 = add i32 %361, %52
  %363 = add i32 %362, %59
  %364 = add i32 %363, %64
  %365 = sub i32 %364, %66
  %366 = sub i32 %365, %67
  %367 = sub i32 %366, %69
  %368 = sub i32 %367, %72
  %369 = add i32 %368, %76
  %370 = add i32 %369, %77
  %371 = add i32 %370, %78
  %372 = add i32 %371, %79
  %373 = add i32 %372, %84
  %374 = add i32 %373, %86
  %375 = sub i32 %374, %87
  %376 = sub i32 %375, %88
  %377 = sub i32 %376, %89
  %378 = sub i32 %377, %91
  %379 = sub i32 %378, %92
  %380 = add i32 %379, %100
  %381 = sub i32 %380, %101
  %382 = add i32 %381, %102
  %383 = sub i32 %382, %109
  %384 = sub i32 %383, %111
  %385 = sub i32 %384, %113
  %386 = add i32 %385, %114
  %387 = sub i32 %386, %115
  %388 = add i32 %387, %118
  %389 = add i32 %388, %123
  %390 = sub i32 %389, %124
  %391 = sub i32 %390, %127
  %392 = sub i32 %391, %24
  %393 = add i32 %392, %134
  %394 = sub i32 %393, %137
  %395 = sub i32 %394, %138
  %396 = add i32 %395, %139
  %397 = sub i32 %396, %141
  %398 = sub i32 %397, %146
  %399 = sub i32 %398, %147
  %400 = add i32 %399, %148
  %401 = sub i32 %400, %150
  %402 = add i32 %401, %151
  %403 = sub i32 %402, %152
  %404 = sub i32 %403, %153
  %405 = sub i32 %404, %158
  %406 = add i32 %405, %161
  %407 = sub i32 %406, %163
  %408 = add i32 %407, %166
  %409 = sub i32 %408, %167
  %410 = sub i32 %409, %168
  %411 = add i32 %410, %169
  %412 = sub i32 %411, %171
  %413 = add i32 %412, %172
  %414 = sub i32 %413, %175
  %415 = sub i32 %414, %176
  %416 = sub i32 %415, %178
  %417 = sub i32 %416, %180
  %418 = sub i32 %417, %181
  %419 = add i32 %418, %184
  %420 = add i32 %419, %185
  %421 = sub i32 %420, %189
  %422 = add i32 %421, %191
  %423 = sub i32 %422, %193
  %424 = sub i32 %423, %194
  %425 = sub i32 %424, %195
  %426 = add i32 %425, %196
  %427 = add i32 %426, %197
  %428 = sub i32 %427, %198
  %429 = add i32 %428, %199
  %430 = add i32 %429, %201
  %431 = sub i32 %430, %203
  %432 = sub i32 %431, %206
  %433 = sub i32 %432, %207
  %434 = add i32 %433, %214
  %435 = sub i32 %434, %222
  %436 = sub i32 %435, %125
  %437 = sub i32 %436, %228
  %438 = sub i32 %437, %45
  %439 = sub i32 %438, %231
  %440 = sub i32 %439, %232
  %441 = add i32 %440, %233
  %442 = add i32 %441, %245
  %443 = sub i32 %442, %246
  %444 = sub i32 %443, %248
  %445 = sub i32 %444, %249
  %446 = sub i32 %445, %250
  %447 = add i32 %446, %253
  %448 = sub i32 %447, %256
  %449 = sub i32 %448, %257
  %450 = sub i32 %449, %258
  %451 = add i32 %450, %262
  %452 = sub i32 %451, %267
  %453 = add i32 %452, %268
  %454 = add i32 %453, %269
  %455 = sub i32 %454, %273
  %456 = add i32 %455, %274
  %457 = sub i32 %456, %6
  %458 = add i32 %457, %15
  %459 = sub i32 %458, %19
  %460 = sub i32 %459, %26
  %461 = add i32 %460, %35
  %462 = add i32 %461, %42
  %463 = sub i32 %462, %47
  %464 = sub i32 %463, %49
  %465 = sub i32 %464, %56
  %466 = sub i32 %465, %74
  %467 = sub i32 %466, %94
  %468 = sub i32 %467, %97
  %469 = sub i32 %468, %99
  %470 = sub i32 %469, %108
  %471 = sub i32 %470, %117
  %472 = sub i32 %471, %126
  %473 = add i32 %472, %131
  %474 = sub i32 %473, %144
  %475 = sub i32 %474, %156
  %476 = sub i32 %475, %160
  %477 = add i32 %476, %165
  %478 = sub i32 %477, %174
  %479 = add i32 %478, %183
  %480 = add i32 %479, %188
  %481 = sub i32 %480, %209
  %482 = sub i32 %481, %211
  %483 = sub i32 %482, %213
  %484 = add i32 %483, %221
  %485 = sub i32 %484, %224
  %486 = sub i32 %485, %235
  %487 = sub i32 %486, %237
  %488 = sub i32 %487, %239
  %489 = sub i32 %488, %242
  %490 = sub i32 %489, %244
  %491 = sub i32 %490, %252
  %492 = sub i32 %491, %263
  %493 = add i32 %492, %270
  %494 = add i32 %493, %278
  %495 = add i32 %494, %280
  %496 = add i32 %495, %282
  %497 = add i32 %496, %285
  %498 = add i32 %497, %287
  %499 = sub i32 %498, %205
  %500 = add i32 %499, %322
  %501 = add i32 %500, %324
  %502 = add i32 %501, %326
  %503 = sub i32 %502, %18
  %504 = sub i32 %503, %218
  %505 = add i32 %504, %320
  %506 = add i32 %505, %316
  %507 = add i32 %506, %311
  %508 = icmp eq i32 %12, %507
  %509 = select i1 %508, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %510 = tail call i32 @puts(i8* nonnull dereferenceable(1) %509)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
