; ModuleID = '../.././c_source_file/0351_path_condition_crackme.c'
source_filename = "../.././c_source_file/0351_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = shl i32 %4, 1
  %6 = or i32 %2, %0
  %7 = xor i32 %6, -1
  %8 = or i32 %7, %1
  %9 = shl i32 %8, 1
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = add i32 %11, 1
  %14 = and i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = xor i32 %15, %2
  %17 = xor i32 %0, -1
  %18 = or i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = or i32 %19, %17
  %21 = xor i32 %2, %0
  %22 = xor i32 %21, -1
  %23 = or i32 %14, %22
  %24 = shl i32 %23, 1
  %25 = or i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %21, %26
  %28 = xor i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %10, %1
  %31 = xor i32 %30, -1
  %32 = xor i32 %31, %0
  %33 = xor i32 %28, %0
  %34 = or i32 %28, %14
  %35 = xor i32 %1, -1
  %36 = or i32 %35, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %37, %2
  %39 = xor i32 %12, %1
  %40 = xor i32 %1, %0
  %41 = and i32 %40, %2
  %42 = and i32 %35, %0
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %2
  %45 = or i32 %42, %2
  %46 = or i32 %18, %17
  %47 = and i32 %4, %0
  %48 = xor i32 %47, %33
  %49 = shl i32 %48, 1
  %50 = or i32 %40, %10
  %51 = or i32 %40, %7
  %52 = and i32 %18, %17
  %53 = and i32 %11, %35
  %54 = or i32 %31, %17
  %55 = and i32 %25, %22
  %56 = or i32 %21, %14
  %57 = or i32 %14, %10
  %58 = xor i32 %40, -1
  %59 = or i32 %7, %58
  %60 = and i32 %6, %35
  %61 = and i32 %2, %0
  %62 = or i32 %4, %42
  %63 = shl i32 %62, 1
  %64 = and i32 %10, %0
  %65 = xor i32 %64, -1
  %66 = and i32 %65, %58
  %67 = and i32 %35, %2
  %68 = and i32 %67, %17
  %69 = or i32 %35, %2
  %70 = and i32 %69, %0
  %71 = xor i32 %70, -1
  %72 = xor i32 %68, %71
  %73 = and i32 %25, %10
  %74 = or i32 %14, %31
  %75 = shl i32 %74, 2
  %76 = xor i32 %61, -1
  %77 = and i32 %76, %35
  %78 = or i32 %29, %26
  %79 = and i32 %25, %29
  %80 = and i32 %36, %22
  %81 = and i32 %21, %1
  %82 = xor i32 %29, %0
  %83 = and i32 %10, %1
  %84 = or i32 %61, %83
  %85 = and i32 %28, %17
  %86 = or i32 %47, %85
  %87 = and i32 %67, %0
  %88 = xor i32 %69, %0
  %89 = or i32 %87, %88
  %90 = or i32 %22, %26
  %91 = or i32 %28, %17
  %92 = and i32 %11, %1
  %93 = shl i32 %42, 1
  %94 = or i32 %61, %1
  %95 = and i32 %21, %36
  %96 = or i32 %40, %22
  %97 = and i32 %29, %15
  %98 = xor i32 %91, -1
  %99 = or i32 %68, %98
  %100 = and i32 %69, %17
  %101 = xor i32 %100, 2147483647
  %102 = xor i32 %101, %87
  %103 = shl i32 %102, 1
  %104 = or i32 %47, %52
  %105 = or i32 %14, %7
  %106 = or i32 %21, %35
  %107 = and i32 %65, %35
  %108 = or i32 %28, %0
  %109 = xor i32 %108, -1
  %110 = or i32 %87, %109
  %111 = and i32 %28, %36
  %112 = and i32 %10, %58
  %113 = or i32 %14, %12
  %114 = and i32 %40, %76
  %115 = and i32 %11, %40
  %116 = xor i32 %4, %0
  %117 = shl i32 %116, 1
  %118 = or i32 %22, %37
  %119 = and i32 %36, %29
  %120 = xor i32 %68, %91
  %121 = and i32 %6, %1
  %122 = shl i32 %121, 1
  %123 = add i32 %18, 1
  %124 = xor i32 %4, -1
  %125 = or i32 %30, %0
  %126 = and i32 %22, %1
  %127 = xor i32 %64, %1
  %128 = xor i32 %19, %0
  %129 = or i32 %21, %37
  %130 = or i32 %7, %35
  %131 = and i32 %58, %2
  %132 = xor i32 %11, %1
  %133 = and i32 %22, %15
  %134 = shl i32 %133, 1
  %135 = or i32 %42, %22
  %136 = and i32 %36, %10
  %137 = or i32 %40, %2
  %138 = shl i32 %137, 1
  %139 = or i32 %61, %35
  %140 = or i32 %87, %33
  %141 = or i32 %64, %31
  %142 = xor i32 %11, %14
  %143 = or i32 %29, %17
  %144 = shl i32 %143, 1
  %145 = and i32 %11, %58
  %146 = xor i32 %83, -1
  %147 = or i32 %146, %0
  %148 = xor i32 %61, %25
  %149 = and i32 %36, %2
  %150 = add i32 %40, 1
  %151 = xor i32 %85, 2147483647
  %152 = xor i32 %151, %47
  %153 = xor i32 %42, %146
  %154 = and i32 %4, %17
  %155 = and i32 %28, %0
  %156 = or i32 %154, %155
  %157 = and i32 %76, %58
  %158 = or i32 %10, %58
  %159 = xor i32 %87, %108
  %160 = and i32 %21, %40
  %161 = or i32 %18, %0
  %162 = shl i32 %161, 1
  %163 = or i32 %61, %58
  %164 = or i32 %61, %26
  %165 = xor i32 %155, -1
  %166 = xor i32 %154, %165
  %167 = xor i32 %43, %2
  %168 = xor i32 %6, %14
  %169 = shl i32 %168, 1
  %170 = or i32 %31, %0
  %171 = and i32 %25, %2
  %172 = shl i32 %171, 1
  %173 = or i32 %28, %42
  %174 = xor i32 %18, %0
  %175 = and i32 %28, %25
  %176 = shl i32 %175, 1
  %177 = and i32 %6, %58
  %178 = or i32 %64, %4
  %179 = or i32 %87, %100
  %180 = shl i32 %179, 1
  %181 = or i32 %83, %0
  %182 = and i32 %21, %15
  %183 = and i32 %6, %40
  %184 = or i32 %26, %2
  %185 = or i32 %37, %2
  %186 = or i32 %10, %26
  %187 = or i32 %124, %17
  %188 = and i32 %21, %43
  %189 = xor i32 %174, -1
  %190 = xor i32 %47, %189
  %191 = xor i32 %61, %146
  %192 = or i32 %40, %12
  %193 = xor i32 %42, %124
  %194 = or i32 %146, %17
  %195 = shl i32 %194, 1
  %196 = xor i32 %195, -1
  %197 = and i32 %29, %0
  %198 = xor i32 %6, %1
  %199 = xor i32 %33, -1
  %200 = xor i32 %87, %199
  %201 = or i32 %14, %2
  %202 = and i32 %65, %1
  %203 = xor i32 %30, %14
  %204 = xor i32 %14, %2
  %205 = or i32 %19, %0
  %206 = or i32 %12, %35
  %207 = and i32 %30, %17
  %208 = and i32 %29, %43
  %209 = or i32 %22, %58
  %210 = and i32 %22, %43
  %211 = or i32 %61, %40
  %212 = and i32 %19, %17
  %213 = mul i32 %212, -28
  %214 = and i32 %83, %17
  %215 = mul i32 %214, -13
  %216 = and i32 %19, %0
  %217 = and i32 %83, %0
  %218 = and i32 %31, %17
  %219 = mul i32 %154, -6
  %220 = and i32 %31, %0
  %221 = mul i32 %47, 12
  %222 = add i32 %197, %186
  %223 = sub i32 %222, %210
  %224 = sub i32 %223, %173
  %225 = mul i32 %224, 3
  %226 = add i32 %182, %85
  %227 = add i32 %226, %139
  %228 = shl i32 %227, 2
  %229 = sub i32 %114, %2
  %230 = sub i32 %229, %181
  %231 = mul i32 %230, 5
  %232 = sub i32 %220, %216
  %233 = mul i32 %232, 18
  %234 = add i32 %11, -1
  %235 = add i32 %234, %73
  %236 = add i32 %235, %57
  %237 = add i32 %236, %211
  %238 = add i32 %237, %203
  %239 = add i32 %238, %202
  %240 = add i32 %239, %178
  %241 = add i32 %240, %145
  %242 = add i32 %241, %127
  %243 = add i32 %242, %107
  %244 = add i32 %243, %105
  %245 = add i32 %244, %91
  %246 = add i32 %245, %81
  %247 = add i32 %246, %51
  %248 = add i32 %247, %46
  %249 = add i32 %248, %120
  %250 = add i32 %249, %152
  %251 = shl i32 %250, 1
  %252 = add i32 %42, %1
  %253 = add i32 %252, 2
  %254 = sub i32 %253, %14
  %255 = add i32 %254, %150
  %256 = add i32 %255, %40
  %257 = sub i32 %256, %36
  %258 = add i32 %257, %13
  %259 = add i32 %258, %16
  %260 = sub i32 %259, %38
  %261 = sub i32 %260, %41
  %262 = sub i32 %261, %44
  %263 = sub i32 %262, %45
  %264 = add i32 %263, %22
  %265 = sub i32 %264, %50
  %266 = add i32 %265, %7
  %267 = sub i32 %266, %61
  %268 = sub i32 %267, %93
  %269 = add i32 %268, %112
  %270 = add i32 %269, %18
  %271 = add i32 %270, %83
  %272 = add i32 %271, %123
  %273 = add i32 %272, %124
  %274 = sub i32 %273, %131
  %275 = add i32 %274, %76
  %276 = add i32 %275, %136
  %277 = add i32 %276, %149
  %278 = sub i32 %277, %158
  %279 = add i32 %278, %167
  %280 = add i32 %279, %184
  %281 = add i32 %280, %185
  %282 = sub i32 %281, %201
  %283 = sub i32 %282, %204
  %284 = add i32 %283, %20
  %285 = sub i32 %284, %27
  %286 = sub i32 %285, %32
  %287 = sub i32 %286, %33
  %288 = add i32 %287, %34
  %289 = add i32 %288, %39
  %290 = add i32 %289, %52
  %291 = add i32 %290, %53
  %292 = sub i32 %291, %54
  %293 = add i32 %292, %55
  %294 = sub i32 %293, %56
  %295 = add i32 %294, %59
  %296 = add i32 %295, %60
  %297 = add i32 %296, %66
  %298 = sub i32 %297, %77
  %299 = add i32 %298, %78
  %300 = add i32 %299, %79
  %301 = add i32 %300, %80
  %302 = add i32 %301, %82
  %303 = sub i32 %302, %84
  %304 = sub i32 %303, %90
  %305 = sub i32 %304, %92
  %306 = sub i32 %305, %94
  %307 = add i32 %306, %95
  %308 = sub i32 %307, %96
  %309 = add i32 %308, %97
  %310 = add i32 %309, %106
  %311 = sub i32 %310, %111
  %312 = add i32 %311, %113
  %313 = add i32 %312, %115
  %314 = add i32 %313, %118
  %315 = add i32 %314, %119
  %316 = sub i32 %315, %125
  %317 = sub i32 %316, %126
  %318 = sub i32 %317, %128
  %319 = sub i32 %318, %129
  %320 = add i32 %319, %130
  %321 = sub i32 %320, %132
  %322 = add i32 %321, %135
  %323 = sub i32 %322, %138
  %324 = add i32 %323, %141
  %325 = sub i32 %324, %142
  %326 = add i32 %325, %147
  %327 = add i32 %326, %148
  %328 = add i32 %327, %153
  %329 = add i32 %328, %157
  %330 = add i32 %329, %160
  %331 = add i32 %330, %163
  %332 = sub i32 %331, %164
  %333 = sub i32 %332, %170
  %334 = sub i32 %333, %172
  %335 = sub i32 %334, %174
  %336 = add i32 %335, %177
  %337 = sub i32 %336, %155
  %338 = add i32 %337, %183
  %339 = sub i32 %338, %187
  %340 = sub i32 %339, %188
  %341 = add i32 %340, %191
  %342 = add i32 %341, %192
  %343 = add i32 %342, %193
  %344 = sub i32 %343, %198
  %345 = sub i32 %344, %205
  %346 = add i32 %345, %206
  %347 = sub i32 %346, %207
  %348 = sub i32 %347, %208
  %349 = sub i32 %348, %209
  %350 = sub i32 %349, %217
  %351 = add i32 %350, %218
  %352 = add i32 %351, %9
  %353 = sub i32 %352, %24
  %354 = sub i32 %353, %63
  %355 = sub i32 %354, %72
  %356 = sub i32 %355, %75
  %357 = sub i32 %356, %86
  %358 = add i32 %357, %89
  %359 = add i32 %358, %99
  %360 = sub i32 %359, %104
  %361 = sub i32 %360, %110
  %362 = sub i32 %361, %117
  %363 = sub i32 %362, %122
  %364 = sub i32 %363, %134
  %365 = add i32 %364, %140
  %366 = sub i32 %365, %144
  %367 = sub i32 %366, %156
  %368 = sub i32 %367, %159
  %369 = sub i32 %368, %162
  %370 = add i32 %369, %166
  %371 = sub i32 %370, %169
  %372 = sub i32 %371, %176
  %373 = add i32 %372, %190
  %374 = add i32 %373, %196
  %375 = sub i32 %374, %200
  %376 = add i32 %375, %213
  %377 = add i32 %376, %215
  %378 = add i32 %377, %219
  %379 = add i32 %378, %221
  %380 = sub i32 %379, %49
  %381 = sub i32 %380, %180
  %382 = add i32 %381, %233
  %383 = sub i32 %382, %103
  %384 = add i32 %383, %228
  %385 = add i32 %384, %231
  %386 = add i32 %385, %225
  %387 = add i32 %386, %251
  %388 = icmp eq i32 %5, %387
  %389 = select i1 %388, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %390 = tail call i32 @puts(i8* nonnull dereferenceable(1) %389)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
