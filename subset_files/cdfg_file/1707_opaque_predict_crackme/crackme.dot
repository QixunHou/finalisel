digraph "DFG for'crackme' function" {
	Node0x1122420[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1122ad0[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x1122b90[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1122c00[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x1122c70[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1122ce0[shape=record, label="  %8 = sub i32 %4, %7"];
	Node0x1122d50[shape=record, label="  %9 = xor i32 %5, %0"];
	Node0x1122dc0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1122e60[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0x1122f00[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1122f70[shape=record, label="  %13 = and i32 %5, %0"];
	Node0x1122fe0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1123050[shape=record, label="  %15 = add i32 %1, %0"];
	Node0x11230c0[shape=record, label="  %16 = sub i32 %9, %15"];
	Node0x1123130[shape=record, label="  %17 = sub i32 %16, %3"];
	Node0x11231a0[shape=record, label="  %18 = sub i32 %17, %14"];
	Node0x1123210[shape=record, label="  %19 = sub i32 %18, %12"];
	Node0x1123280[shape=record, label="  %20 = icmp eq i32 %8, %19"];
	Node0x10c3268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1123720[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1123770[shape=record, label="  ret void"];
	Node0x1122420 -> Node0x1122ad0;
	Node0x1122ad0 -> Node0x1122b90;
	Node0x1122b90 -> Node0x1122c00;
	Node0x1122c00 -> Node0x1122c70;
	Node0x1122c70 -> Node0x1122ce0;
	Node0x1122ce0 -> Node0x1122d50;
	Node0x1122d50 -> Node0x1122dc0;
	Node0x1122dc0 -> Node0x1122e60;
	Node0x1122e60 -> Node0x1122f00;
	Node0x1122f00 -> Node0x1122f70;
	Node0x1122f70 -> Node0x1122fe0;
	Node0x1122fe0 -> Node0x1123050;
	Node0x1123050 -> Node0x11230c0;
	Node0x11230c0 -> Node0x1123130;
	Node0x1123130 -> Node0x11231a0;
	Node0x11231a0 -> Node0x1123210;
	Node0x1123210 -> Node0x1123280;
	Node0x1123280 -> Node0x10c3268;
	Node0x10c3268 -> Node0x1123720;
	Node0x1123720 -> Node0x1123770;
edge [color=red]
	Node0x1122420 -> Node0x1122ad0;
	Node0x1122b90 -> Node0x1122c00;
	Node0x1122c00 -> Node0x1122c70;
	Node0x1122ad0 -> Node0x1122ce0;
	Node0x1122c70 -> Node0x1122ce0;
	Node0x1122b90 -> Node0x1122d50;
	Node0x1122dc0 -> Node0x1122e60;
	Node0x1122e60 -> Node0x1122f00;
	Node0x1122b90 -> Node0x1122f70;
	Node0x1122f70 -> Node0x1122fe0;
	Node0x1122d50 -> Node0x11230c0;
	Node0x1123050 -> Node0x11230c0;
	Node0x11230c0 -> Node0x1123130;
	Node0x1122420 -> Node0x1123130;
	Node0x1123130 -> Node0x11231a0;
	Node0x1122fe0 -> Node0x11231a0;
	Node0x11231a0 -> Node0x1123210;
	Node0x1122f00 -> Node0x1123210;
	Node0x1122ce0 -> Node0x1123280;
	Node0x1123210 -> Node0x1123280;
	Node0x1123280 -> Node0x10c3268;
	Node0x10c3268 -> Node0x1123720;
}
