digraph "DFG for'crackme' function" {
	Node0x1f24b80[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1f25200[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1f252a0[shape=record, label="  %7 = mul i32 %6, 5"];
	Node0x1f25310[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1f25380[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x1f253f0[shape=record, label="  %10 = add i32 %8, %2"];
	Node0x1f25460[shape=record, label="  %11 = add i32 %10, %7"];
	Node0x1f254d0[shape=record, label="  %12 = sub i32 %11, %9"];
	Node0x1f25570[shape=record, label="  %13 = mul i32 %5, -2"];
	Node0x1f25610[shape=record, label="  %14 = or i32 %13, 1"];
	Node0x1f25680[shape=record, label="  %15 = xor i32 %2, -1"];
	Node0x1f256f0[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x1f25760[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1f257d0[shape=record, label="  %18 = or i32 %2, %1"];
	Node0x1f25840[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x1f258b0[shape=record, label="  %20 = mul i32 %19, 5"];
	Node0x1f25950[shape=record, label="  %21 = xor i32 %1, 2147483647"];
	Node0x1f259c0[shape=record, label="  %22 = and i32 %21, %2"];
	Node0x1f25a60[shape=record, label="  %23 = shl i32 %16, 2"];
	Node0x1f25ad0[shape=record, label="  %24 = and i32 %2, %1"];
	Node0x1f25b70[shape=record, label="  %25 = mul i32 %24, 6"];
	Node0x1f25be0[shape=record, label="  %26 = xor i32 %3, %0"];
	Node0x1f25c50[shape=record, label="  %27 = or i32 %8, %3"];
	Node0x1f25cc0[shape=record, label="  %28 = shl i32 %9, 1"];
	Node0x1f25d30[shape=record, label="  %29 = xor i32 %28, -2"];
	Node0x1f25da0[shape=record, label="  %30 = xor i32 %27, -1"];
	Node0x1f25e40[shape=record, label="  %31 = mul i32 %30, -3"];
	Node0x1f25eb0[shape=record, label="  %32 = and i32 %8, %3"];
	Node0x1f26130[shape=record, label="  %33 = add i32 %26, %22"];
	Node0x1f261a0[shape=record, label="  %34 = shl i32 %33, 1"];
	Node0x1f26210[shape=record, label="  %35 = sub i32 %2, %1"];
	Node0x1f26280[shape=record, label="  %36 = add i32 %35, %17"];
	Node0x1f262f0[shape=record, label="  %37 = add i32 %36, %20"];
	Node0x1f26360[shape=record, label="  %38 = add i32 %37, %23"];
	Node0x1f263d0[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x1f26440[shape=record, label="  %40 = sub i32 %39, %27"];
	Node0x1f264b0[shape=record, label="  %41 = sub i32 %40, %32"];
	Node0x1f26520[shape=record, label="  %42 = add i32 %41, %14"];
	Node0x1f26590[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x1f26600[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x1f26670[shape=record, label="  %45 = add i32 %44, %34"];
	Node0x1f266e0[shape=record, label="  %46 = icmp eq i32 %12, %45"];
	Node0x1ec5268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f26b80[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x1f26bd0[shape=record, label="  ret void"];
	Node0x1f24b80 -> Node0x1f25200;
	Node0x1f25200 -> Node0x1f252a0;
	Node0x1f252a0 -> Node0x1f25310;
	Node0x1f25310 -> Node0x1f25380;
	Node0x1f25380 -> Node0x1f253f0;
	Node0x1f253f0 -> Node0x1f25460;
	Node0x1f25460 -> Node0x1f254d0;
	Node0x1f254d0 -> Node0x1f25570;
	Node0x1f25570 -> Node0x1f25610;
	Node0x1f25610 -> Node0x1f25680;
	Node0x1f25680 -> Node0x1f256f0;
	Node0x1f256f0 -> Node0x1f25760;
	Node0x1f25760 -> Node0x1f257d0;
	Node0x1f257d0 -> Node0x1f25840;
	Node0x1f25840 -> Node0x1f258b0;
	Node0x1f258b0 -> Node0x1f25950;
	Node0x1f25950 -> Node0x1f259c0;
	Node0x1f259c0 -> Node0x1f25a60;
	Node0x1f25a60 -> Node0x1f25ad0;
	Node0x1f25ad0 -> Node0x1f25b70;
	Node0x1f25b70 -> Node0x1f25be0;
	Node0x1f25be0 -> Node0x1f25c50;
	Node0x1f25c50 -> Node0x1f25cc0;
	Node0x1f25cc0 -> Node0x1f25d30;
	Node0x1f25d30 -> Node0x1f25da0;
	Node0x1f25da0 -> Node0x1f25e40;
	Node0x1f25e40 -> Node0x1f25eb0;
	Node0x1f25eb0 -> Node0x1f26130;
	Node0x1f26130 -> Node0x1f261a0;
	Node0x1f261a0 -> Node0x1f26210;
	Node0x1f26210 -> Node0x1f26280;
	Node0x1f26280 -> Node0x1f262f0;
	Node0x1f262f0 -> Node0x1f26360;
	Node0x1f26360 -> Node0x1f263d0;
	Node0x1f263d0 -> Node0x1f26440;
	Node0x1f26440 -> Node0x1f264b0;
	Node0x1f264b0 -> Node0x1f26520;
	Node0x1f26520 -> Node0x1f26590;
	Node0x1f26590 -> Node0x1f26600;
	Node0x1f26600 -> Node0x1f26670;
	Node0x1f26670 -> Node0x1f266e0;
	Node0x1f266e0 -> Node0x1ec5268;
	Node0x1ec5268 -> Node0x1f26b80;
	Node0x1f26b80 -> Node0x1f26bd0;
edge [color=red]
	Node0x1f24b80 -> Node0x1f25200;
	Node0x1f25200 -> Node0x1f252a0;
	Node0x1f25310 -> Node0x1f253f0;
	Node0x1f253f0 -> Node0x1f25460;
	Node0x1f252a0 -> Node0x1f25460;
	Node0x1f25460 -> Node0x1f254d0;
	Node0x1f25380 -> Node0x1f254d0;
	Node0x1f24b80 -> Node0x1f25570;
	Node0x1f25570 -> Node0x1f25610;
	Node0x1f25680 -> Node0x1f256f0;
	Node0x1f256f0 -> Node0x1f25760;
	Node0x1f257d0 -> Node0x1f25840;
	Node0x1f25840 -> Node0x1f258b0;
	Node0x1f25950 -> Node0x1f259c0;
	Node0x1f256f0 -> Node0x1f25a60;
	Node0x1f25ad0 -> Node0x1f25b70;
	Node0x1f25310 -> Node0x1f25c50;
	Node0x1f25380 -> Node0x1f25cc0;
	Node0x1f25cc0 -> Node0x1f25d30;
	Node0x1f25c50 -> Node0x1f25da0;
	Node0x1f25da0 -> Node0x1f25e40;
	Node0x1f25310 -> Node0x1f25eb0;
	Node0x1f25be0 -> Node0x1f26130;
	Node0x1f259c0 -> Node0x1f26130;
	Node0x1f26130 -> Node0x1f261a0;
	Node0x1f26210 -> Node0x1f26280;
	Node0x1f25760 -> Node0x1f26280;
	Node0x1f26280 -> Node0x1f262f0;
	Node0x1f258b0 -> Node0x1f262f0;
	Node0x1f262f0 -> Node0x1f26360;
	Node0x1f25a60 -> Node0x1f26360;
	Node0x1f26360 -> Node0x1f263d0;
	Node0x1f25b70 -> Node0x1f263d0;
	Node0x1f263d0 -> Node0x1f26440;
	Node0x1f25c50 -> Node0x1f26440;
	Node0x1f26440 -> Node0x1f264b0;
	Node0x1f25eb0 -> Node0x1f264b0;
	Node0x1f264b0 -> Node0x1f26520;
	Node0x1f25610 -> Node0x1f26520;
	Node0x1f26520 -> Node0x1f26590;
	Node0x1f25e40 -> Node0x1f26590;
	Node0x1f26590 -> Node0x1f26600;
	Node0x1f25d30 -> Node0x1f26600;
	Node0x1f26600 -> Node0x1f26670;
	Node0x1f261a0 -> Node0x1f26670;
	Node0x1f254d0 -> Node0x1f266e0;
	Node0x1f26670 -> Node0x1f266e0;
	Node0x1f266e0 -> Node0x1ec5268;
	Node0x1ec5268 -> Node0x1f26b80;
}
