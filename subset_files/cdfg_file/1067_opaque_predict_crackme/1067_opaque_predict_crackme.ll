; ModuleID = '../.././c_source_file/1067_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1067_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %5, %1
  %7 = shl i32 %6, 1
  %8 = xor i32 %2, %0
  %9 = add i32 %7, %8
  %10 = and i32 %1, %0
  %11 = xor i32 %1, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %8, -1
  %14 = or i32 %13, %12
  %15 = add i32 %11, 1
  %16 = and i32 %2, %0
  %17 = xor i32 %2, -1
  %18 = and i32 %17, %1
  %19 = or i32 %16, %18
  %20 = or i32 %17, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %1
  %23 = xor i32 %20, %10
  %24 = and i32 %4, %12
  %25 = or i32 %2, %1
  %26 = xor i32 %25, %0
  %27 = xor i32 %10, -1
  %28 = add i32 %10, 1
  %29 = xor i32 %1, -1
  %30 = and i32 %17, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %29
  %33 = or i32 %1, %0
  %34 = and i32 %33, %2
  %35 = and i32 %4, %11
  %36 = and i32 %29, %0
  %37 = or i32 %36, %13
  %38 = and i32 %2, %1
  %39 = or i32 %30, %38
  %40 = and i32 %29, %2
  %41 = and i32 %40, %0
  %42 = or i32 %29, %2
  %43 = xor i32 %0, -1
  %44 = xor i32 %42, %43
  %45 = xor i32 %44, %41
  %46 = or i32 %18, %43
  %47 = shl i32 %46, 1
  %48 = and i32 %42, %43
  %49 = xor i32 %41, -1
  %50 = xor i32 %48, %49
  %51 = or i32 %5, %1
  %52 = and i32 %38, %0
  %53 = xor i32 %2, %1
  %54 = and i32 %53, %43
  %55 = or i32 %52, %54
  %56 = or i32 %12, %2
  %57 = and i32 %20, %29
  %58 = or i32 %29, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %59, %2
  %61 = or i32 %18, %36
  %62 = xor i32 %16, -1
  %63 = and i32 %62, %1
  %64 = shl i32 %63, 1
  %65 = xor i32 %25, -1
  %66 = or i32 %65, %0
  %67 = xor i32 %52, %66
  %68 = and i32 %31, %12
  %69 = and i32 %40, %43
  %70 = and i32 %42, %0
  %71 = or i32 %69, %70
  %72 = or i32 %52, %26
  %73 = xor i32 %53, -1
  %74 = and i32 %58, %73
  %75 = shl i32 %74, 1
  %76 = or i32 %5, %29
  %77 = xor i32 %38, -1
  %78 = or i32 %77, %0
  %79 = and i32 %12, %2
  %80 = or i32 %8, %11
  %81 = or i32 %53, %36
  %82 = xor i32 %10, %2
  %83 = xor i32 %18, -1
  %84 = and i32 %83, %43
  %85 = and i32 %17, %27
  %86 = or i32 %10, %5
  %87 = or i32 %53, %43
  %88 = xor i32 %69, %87
  %89 = or i32 %17, %1
  %90 = xor i32 %89, %0
  %91 = and i32 %4, %29
  %92 = or i32 %10, %17
  %93 = and i32 %11, %13
  %94 = or i32 %53, %10
  %95 = xor i32 %62, %1
  %96 = and i32 %53, %33
  %97 = xor i32 %38, %0
  %98 = shl i32 %97, 1
  %99 = or i32 %83, %0
  %100 = and i32 %25, %0
  %101 = and i32 %27, %2
  %102 = add i32 %4, 1
  %103 = xor i32 %73, %0
  %104 = shl i32 %103, 1
  %105 = xor i32 %83, %0
  %106 = or i32 %16, %65
  %107 = or i32 %11, %17
  %108 = or i32 %8, %29
  %109 = and i32 %73, %43
  %110 = and i32 %8, %11
  %111 = xor i32 %31, %1
  %112 = xor i32 %53, %0
  %113 = xor i32 %30, %1
  %114 = or i32 %38, %36
  %115 = xor i32 %33, -1
  %116 = or i32 %16, %115
  %117 = and i32 %11, %17
  %118 = shl i32 %117, 1
  %119 = or i32 %11, %5
  %120 = shl i32 %119, 1
  %121 = or i32 %13, %1
  %122 = shl i32 %121, 1
  %123 = or i32 %83, %43
  %124 = shl i32 %123, 1
  %125 = xor i32 %30, %89
  %126 = xor i32 %36, -1
  %127 = xor i32 %126, %2
  %128 = and i32 %13, %27
  %129 = shl i32 %128, 1
  %130 = xor i32 %89, -1
  %131 = or i32 %130, %0
  %132 = or i32 %25, %0
  %133 = or i32 %16, %59
  %134 = and i32 %11, %62
  %135 = shl i32 %134, 1
  %136 = xor i32 %30, %77
  %137 = or i32 %17, %59
  %138 = shl i32 %137, 1
  %139 = and i32 %73, %126
  %140 = add i32 %53, 1
  %141 = and i32 %58, %13
  %142 = shl i32 %141, 1
  %143 = and i32 %38, %43
  %144 = or i32 %143, %100
  %145 = or i32 %10, %130
  %146 = or i32 %115, %2
  %147 = shl i32 %146, 1
  %148 = or i32 %25, %43
  %149 = or i32 %53, %0
  %150 = xor i32 %149, -1
  %151 = or i32 %41, %150
  %152 = xor i32 %33, %2
  %153 = or i32 %8, %59
  %154 = and i32 %4, %1
  %155 = or i32 %89, %43
  %156 = xor i32 %27, %2
  %157 = xor i32 %65, %0
  %158 = or i32 %16, %29
  %159 = and i32 %31, %1
  %160 = or i32 %16, %1
  %161 = and i32 %8, %12
  %162 = or i32 %8, %10
  %163 = and i32 %53, %0
  %164 = shl i32 %163, 1
  %165 = or i32 %53, %115
  %166 = and i32 %53, %27
  %167 = or i32 %10, %13
  %168 = shl i32 %167, 1
  %169 = and i32 %13, %12
  %170 = and i32 %13, %29
  %171 = or i32 %41, %48
  %172 = and i32 %83, %0
  %173 = shl i32 %13, 1
  %174 = and i32 %33, %17
  %175 = or i32 %13, %115
  %176 = xor i32 %163, -1
  %177 = xor i32 %143, %176
  %178 = or i32 %11, %13
  %179 = xor i32 %130, %0
  %180 = xor i32 %52, -1
  %181 = xor i32 %26, %180
  %182 = xor i32 %70, -1
  %183 = xor i32 %69, %182
  %184 = and i32 %13, %1
  %185 = and i32 %8, %29
  %186 = or i32 %36, %73
  %187 = xor i32 %36, %2
  %188 = or i32 %8, %115
  %189 = or i32 %11, %2
  %190 = and i32 %77, %0
  %191 = shl i32 %89, 1
  %192 = or i32 %17, %115
  %193 = or i32 %130, %43
  %194 = and i32 %89, %0
  %195 = shl i32 %194, 1
  %196 = or i32 %10, %73
  %197 = or i32 %21, %29
  %198 = and i32 %8, %58
  %199 = xor i32 %16, %1
  %200 = xor i32 %115, %2
  %201 = or i32 %8, %1
  %202 = and i32 %8, %33
  %203 = or i32 %8, %36
  %204 = or i32 %36, %2
  %205 = or i32 %16, %12
  %206 = or i32 %30, %12
  %207 = or i32 %73, %0
  %208 = and i32 %62, %29
  %209 = xor i32 %16, %83
  %210 = or i32 %16, %11
  %211 = or i32 %41, %112
  %212 = add i32 %58, 1
  %213 = and i32 %73, %0
  %214 = xor i32 %4, %10
  %215 = xor i32 %16, %25
  %216 = and i32 %33, %73
  %217 = and i32 %17, %126
  %218 = and i32 %20, %12
  %219 = xor i32 %52, %112
  %220 = xor i32 %20, %1
  %221 = and i32 %8, %27
  %222 = or i32 %77, %43
  %223 = xor i32 %4, %1
  %224 = or i32 %73, %115
  %225 = xor i32 %54, %180
  %226 = xor i32 %25, %10
  %227 = or i32 %30, %130
  %228 = xor i32 %36, %83
  %229 = or i32 %38, %0
  %230 = shl i32 %229, 1
  %231 = or i32 %21, %12
  %232 = and i32 %65, %43
  %233 = mul i32 %232, 30
  %234 = and i32 %18, %43
  %235 = mul i32 %234, 13
  %236 = and i32 %65, %0
  %237 = shl i32 %236, 1
  %238 = and i32 %18, %0
  %239 = mul i32 %238, 27
  %240 = and i32 %130, %43
  %241 = mul i32 %240, -12
  %242 = mul i32 %143, 19
  %243 = and i32 %130, %0
  %244 = mul i32 %243, 29
  %245 = mul i32 %52, 23
  %246 = sub i32 %17, %213
  %247 = add i32 %246, %91
  %248 = sub i32 %247, %81
  %249 = sub i32 %248, %181
  %250 = sub i32 %249, %225
  %251 = mul i32 %250, 5
  %252 = add i32 %28, %36
  %253 = add i32 %252, %216
  %254 = mul i32 %253, 3
  %255 = add i32 %174, -1
  %256 = add i32 %255, %21
  %257 = add i32 %256, %228
  %258 = add i32 %257, %222
  %259 = add i32 %258, %208
  %260 = add i32 %259, %201
  %261 = add i32 %260, %198
  %262 = add i32 %261, %197
  %263 = add i32 %262, %193
  %264 = add i32 %263, %184
  %265 = add i32 %264, %170
  %266 = add i32 %265, %162
  %267 = add i32 %266, %114
  %268 = add i32 %267, %106
  %269 = add i32 %268, %99
  %270 = add i32 %269, %86
  %271 = add i32 %270, %72
  %272 = shl i32 %271, 1
  %273 = sub i32 %0, %1
  %274 = sub i32 %273, %10
  %275 = add i32 %274, %15
  %276 = sub i32 %275, %58
  %277 = add i32 %276, %2
  %278 = add i32 %277, %212
  %279 = sub i32 %278, %34
  %280 = sub i32 %279, %56
  %281 = sub i32 %280, %60
  %282 = sub i32 %281, %79
  %283 = sub i32 %282, %82
  %284 = sub i32 %283, %85
  %285 = add i32 %284, %92
  %286 = add i32 %285, %101
  %287 = add i32 %286, %102
  %288 = add i32 %287, %107
  %289 = add i32 %288, %25
  %290 = sub i32 %289, %127
  %291 = add i32 %290, %140
  %292 = add i32 %291, %152
  %293 = add i32 %292, %130
  %294 = add i32 %293, %156
  %295 = add i32 %294, %31
  %296 = sub i32 %295, %187
  %297 = add i32 %296, %189
  %298 = add i32 %297, %192
  %299 = sub i32 %298, %200
  %300 = sub i32 %299, %204
  %301 = sub i32 %300, %38
  %302 = sub i32 %301, %20
  %303 = add i32 %302, %4
  %304 = add i32 %303, %217
  %305 = sub i32 %304, %14
  %306 = sub i32 %305, %19
  %307 = add i32 %306, %22
  %308 = sub i32 %307, %23
  %309 = sub i32 %308, %24
  %310 = sub i32 %309, %26
  %311 = add i32 %310, %32
  %312 = sub i32 %311, %35
  %313 = sub i32 %312, %37
  %314 = add i32 %313, %39
  %315 = add i32 %314, %51
  %316 = sub i32 %315, %57
  %317 = sub i32 %316, %61
  %318 = add i32 %317, %68
  %319 = add i32 %318, %76
  %320 = sub i32 %319, %78
  %321 = add i32 %320, %80
  %322 = sub i32 %321, %84
  %323 = sub i32 %322, %90
  %324 = sub i32 %323, %93
  %325 = add i32 %324, %94
  %326 = add i32 %325, %95
  %327 = add i32 %326, %96
  %328 = sub i32 %327, %100
  %329 = sub i32 %328, %105
  %330 = add i32 %329, %108
  %331 = sub i32 %330, %109
  %332 = add i32 %331, %110
  %333 = sub i32 %332, %111
  %334 = add i32 %333, %112
  %335 = add i32 %334, %113
  %336 = sub i32 %335, %116
  %337 = sub i32 %336, %118
  %338 = sub i32 %337, %125
  %339 = sub i32 %338, %66
  %340 = add i32 %339, %131
  %341 = sub i32 %340, %132
  %342 = sub i32 %341, %133
  %343 = add i32 %342, %136
  %344 = sub i32 %343, %138
  %345 = sub i32 %344, %139
  %346 = sub i32 %345, %145
  %347 = sub i32 %346, %147
  %348 = sub i32 %347, %148
  %349 = add i32 %348, %153
  %350 = add i32 %349, %154
  %351 = sub i32 %350, %155
  %352 = sub i32 %351, %157
  %353 = add i32 %352, %54
  %354 = sub i32 %353, %158
  %355 = sub i32 %354, %159
  %356 = sub i32 %355, %160
  %357 = sub i32 %356, %161
  %358 = sub i32 %357, %149
  %359 = sub i32 %358, %165
  %360 = add i32 %359, %166
  %361 = sub i32 %360, %169
  %362 = add i32 %361, %172
  %363 = sub i32 %362, %173
  %364 = sub i32 %363, %175
  %365 = sub i32 %364, %178
  %366 = sub i32 %365, %179
  %367 = add i32 %366, %185
  %368 = add i32 %367, %87
  %369 = add i32 %368, %186
  %370 = add i32 %369, %188
  %371 = add i32 %370, %190
  %372 = sub i32 %371, %191
  %373 = sub i32 %372, %196
  %374 = sub i32 %373, %199
  %375 = add i32 %374, %202
  %376 = sub i32 %375, %203
  %377 = sub i32 %376, %205
  %378 = add i32 %377, %206
  %379 = sub i32 %378, %207
  %380 = sub i32 %379, %209
  %381 = add i32 %380, %210
  %382 = sub i32 %381, %214
  %383 = sub i32 %382, %215
  %384 = add i32 %383, %218
  %385 = add i32 %384, %220
  %386 = sub i32 %385, %221
  %387 = add i32 %386, %223
  %388 = sub i32 %387, %224
  %389 = add i32 %388, %226
  %390 = sub i32 %389, %227
  %391 = add i32 %390, %231
  %392 = sub i32 %391, %45
  %393 = sub i32 %392, %47
  %394 = add i32 %393, %50
  %395 = add i32 %394, %55
  %396 = sub i32 %395, %64
  %397 = add i32 %396, %67
  %398 = sub i32 %397, %71
  %399 = sub i32 %398, %75
  %400 = add i32 %399, %88
  %401 = sub i32 %400, %98
  %402 = sub i32 %401, %104
  %403 = sub i32 %402, %120
  %404 = sub i32 %403, %122
  %405 = sub i32 %404, %124
  %406 = sub i32 %405, %129
  %407 = sub i32 %406, %135
  %408 = sub i32 %407, %142
  %409 = sub i32 %408, %144
  %410 = add i32 %409, %151
  %411 = sub i32 %410, %164
  %412 = sub i32 %411, %168
  %413 = add i32 %412, %171
  %414 = sub i32 %413, %177
  %415 = sub i32 %414, %183
  %416 = sub i32 %415, %195
  %417 = add i32 %416, %211
  %418 = add i32 %417, %219
  %419 = sub i32 %418, %230
  %420 = add i32 %419, %233
  %421 = add i32 %420, %235
  %422 = sub i32 %421, %237
  %423 = add i32 %422, %239
  %424 = add i32 %423, %241
  %425 = add i32 %424, %242
  %426 = add i32 %425, %244
  %427 = add i32 %426, %245
  %428 = add i32 %427, %254
  %429 = add i32 %428, %251
  %430 = add i32 %429, %272
  %431 = icmp eq i32 %9, %430
  %432 = select i1 %431, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %433 = tail call i32 @puts(i8* nonnull dereferenceable(1) %432)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
