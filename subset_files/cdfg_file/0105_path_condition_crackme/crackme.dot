digraph "DFG for'crackme' function" {
	Node0x928a70[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x9290f0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x929160[shape=record, label="  %7 = and i32 %6, %3"];
	Node0x929200[shape=record, label="  %8 = sub i32 1, %5"];
	Node0x929270[shape=record, label="  %9 = add i32 %8, %7"];
	Node0x9292e0[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x929350[shape=record, label="  %11 = or i32 %10, %1"];
	Node0x9293c0[shape=record, label="  %12 = shl i32 %5, 1"];
	Node0x929460[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x9294d0[shape=record, label="  %14 = and i32 %10, %1"];
	Node0x929540[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x9295b0[shape=record, label="  %16 = or i32 %6, %3"];
	Node0x929620[shape=record, label="  %17 = xor i32 %3, -1"];
	Node0x929690[shape=record, label="  %18 = xor i32 %3, %0"];
	Node0x929700[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x929770[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x9297e0[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x929880[shape=record, label="  %22 = shl i32 %21, 3"];
	Node0x929920[shape=record, label="  %23 = xor i32 %22, -8"];
	Node0x929990[shape=record, label="  %24 = shl i32 %7, 1"];
	Node0x929a00[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x929a70[shape=record, label="  %26 = shl i32 %1, 1"];
	Node0x929ae0[shape=record, label="  %27 = sub i32 %16, %25"];
	Node0x929b80[shape=record, label="  %28 = mul i32 %27, 5"];
	Node0x929c20[shape=record, label="  %29 = add i32 %26, 2"];
	Node0x929c90[shape=record, label="  %30 = sub i32 %29, %11"];
	Node0x929d00[shape=record, label="  %31 = sub i32 %30, %14"];
	Node0x929d70[shape=record, label="  %32 = sub i32 %31, %15"];
	Node0x929ff0[shape=record, label="  %33 = add i32 %32, %17"];
	Node0x92a060[shape=record, label="  %34 = sub i32 %33, %3"];
	Node0x92a0d0[shape=record, label="  %35 = sub i32 %34, %21"];
	Node0x92a140[shape=record, label="  %36 = add i32 %35, %13"];
	Node0x92a1b0[shape=record, label="  %37 = sub i32 %36, %24"];
	Node0x92a220[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x92a290[shape=record, label="  %39 = sub i32 %38, %23"];
	Node0x92a300[shape=record, label="  %40 = add i32 %39, %28"];
	Node0x92a370[shape=record, label="  %41 = icmp eq i32 %9, %40"];
	Node0x8c9268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x92a810[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0x92a860[shape=record, label="  ret void"];
	Node0x928a70 -> Node0x9290f0;
	Node0x9290f0 -> Node0x929160;
	Node0x929160 -> Node0x929200;
	Node0x929200 -> Node0x929270;
	Node0x929270 -> Node0x9292e0;
	Node0x9292e0 -> Node0x929350;
	Node0x929350 -> Node0x9293c0;
	Node0x9293c0 -> Node0x929460;
	Node0x929460 -> Node0x9294d0;
	Node0x9294d0 -> Node0x929540;
	Node0x929540 -> Node0x9295b0;
	Node0x9295b0 -> Node0x929620;
	Node0x929620 -> Node0x929690;
	Node0x929690 -> Node0x929700;
	Node0x929700 -> Node0x929770;
	Node0x929770 -> Node0x9297e0;
	Node0x9297e0 -> Node0x929880;
	Node0x929880 -> Node0x929920;
	Node0x929920 -> Node0x929990;
	Node0x929990 -> Node0x929a00;
	Node0x929a00 -> Node0x929a70;
	Node0x929a70 -> Node0x929ae0;
	Node0x929ae0 -> Node0x929b80;
	Node0x929b80 -> Node0x929c20;
	Node0x929c20 -> Node0x929c90;
	Node0x929c90 -> Node0x929d00;
	Node0x929d00 -> Node0x929d70;
	Node0x929d70 -> Node0x929ff0;
	Node0x929ff0 -> Node0x92a060;
	Node0x92a060 -> Node0x92a0d0;
	Node0x92a0d0 -> Node0x92a140;
	Node0x92a140 -> Node0x92a1b0;
	Node0x92a1b0 -> Node0x92a220;
	Node0x92a220 -> Node0x92a290;
	Node0x92a290 -> Node0x92a300;
	Node0x92a300 -> Node0x92a370;
	Node0x92a370 -> Node0x8c9268;
	Node0x8c9268 -> Node0x92a810;
	Node0x92a810 -> Node0x92a860;
edge [color=red]
	Node0x9290f0 -> Node0x929160;
	Node0x928a70 -> Node0x929200;
	Node0x929200 -> Node0x929270;
	Node0x929160 -> Node0x929270;
	Node0x9292e0 -> Node0x929350;
	Node0x928a70 -> Node0x9293c0;
	Node0x9293c0 -> Node0x929460;
	Node0x9292e0 -> Node0x9294d0;
	Node0x9290f0 -> Node0x9295b0;
	Node0x929690 -> Node0x929700;
	Node0x929700 -> Node0x929770;
	Node0x9297e0 -> Node0x929880;
	Node0x929880 -> Node0x929920;
	Node0x929160 -> Node0x929990;
	Node0x9295b0 -> Node0x929ae0;
	Node0x929a00 -> Node0x929ae0;
	Node0x929ae0 -> Node0x929b80;
	Node0x929a70 -> Node0x929c20;
	Node0x929c20 -> Node0x929c90;
	Node0x929350 -> Node0x929c90;
	Node0x929c90 -> Node0x929d00;
	Node0x9294d0 -> Node0x929d00;
	Node0x929d00 -> Node0x929d70;
	Node0x929540 -> Node0x929d70;
	Node0x929d70 -> Node0x929ff0;
	Node0x929620 -> Node0x929ff0;
	Node0x929ff0 -> Node0x92a060;
	Node0x92a060 -> Node0x92a0d0;
	Node0x9297e0 -> Node0x92a0d0;
	Node0x92a0d0 -> Node0x92a140;
	Node0x929460 -> Node0x92a140;
	Node0x92a140 -> Node0x92a1b0;
	Node0x929990 -> Node0x92a1b0;
	Node0x92a1b0 -> Node0x92a220;
	Node0x929770 -> Node0x92a220;
	Node0x92a220 -> Node0x92a290;
	Node0x929920 -> Node0x92a290;
	Node0x92a290 -> Node0x92a300;
	Node0x929b80 -> Node0x92a300;
	Node0x929270 -> Node0x92a370;
	Node0x92a300 -> Node0x92a370;
	Node0x92a370 -> Node0x8c9268;
	Node0x8c9268 -> Node0x92a810;
}
