; ModuleID = '../.././c_source_file/1804_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1804_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, %1
  %10 = mul i32 %9, -2
  %11 = xor i32 %4, -1
  %12 = and i32 %5, %3
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %11
  %15 = sub i32 %10, %14
  %16 = and i32 %13, %4
  %17 = sub i32 %15, %16
  %18 = xor i32 %0, -1
  %19 = xor i32 %2, %1
  %20 = and i32 %19, %18
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %7, %22
  %24 = xor i32 %19, -1
  %25 = and i32 %2, %1
  %26 = xor i32 %25, -1
  %27 = add i32 %25, 1
  %28 = or i32 %2, %1
  %29 = and i32 %28, %18
  %30 = and i32 %24, %0
  %31 = and i32 %25, %18
  %32 = and i32 %28, %0
  %33 = or i32 %31, %32
  %34 = or i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %19, %35
  %37 = xor i32 %1, -1
  %38 = and i32 %37, %2
  %39 = and i32 %38, %18
  %40 = or i32 %39, %30
  %41 = or i32 %37, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %8, -1
  %44 = and i32 %43, %37
  %45 = and i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %48, %46
  %50 = xor i32 %31, -1
  %51 = xor i32 %32, %50
  %52 = and i32 %2, %0
  %53 = and i32 %7, %1
  %54 = xor i32 %53, -1
  %55 = xor i32 %52, %54
  %56 = xor i32 %53, %0
  %57 = and i32 %47, %46
  %58 = shl i32 %57, 1
  %59 = or i32 %47, %21
  %60 = and i32 %37, %0
  %61 = or i32 %60, %24
  %62 = shl i32 %61, 1
  %63 = and i32 %34, %2
  %64 = or i32 %2, %0
  %65 = and i32 %64, %1
  %66 = xor i32 %52, -1
  %67 = and i32 %66, %22
  %68 = xor i32 %64, -1
  %69 = or i32 %21, %68
  %70 = shl i32 %69, 1
  %71 = or i32 %47, %37
  %72 = xor i32 %52, %1
  %73 = shl i32 %72, 1
  %74 = or i32 %7, %1
  %75 = xor i32 %74, -1
  %76 = or i32 %75, %18
  %77 = or i32 %48, %22
  %78 = and i32 %25, %0
  %79 = or i32 %78, %29
  %80 = and i32 %34, %48
  %81 = xor i32 %60, -1
  %82 = or i32 %19, %60
  %83 = shl i32 %21, 1
  %84 = or i32 %24, %35
  %85 = and i32 %47, %81
  %86 = and i32 %47, %21
  %87 = xor i32 %52, %34
  %88 = or i32 %48, %1
  %89 = or i32 %7, %0
  %90 = xor i32 %28, -1
  %91 = or i32 %52, %90
  %92 = xor i32 %19, %0
  %93 = xor i32 %78, %92
  %94 = or i32 %60, %2
  %95 = xor i32 %28, %45
  %96 = or i32 %8, %37
  %97 = or i32 %19, %45
  %98 = shl i32 %97, 1
  %99 = or i32 %52, %21
  %100 = and i32 %19, %0
  %101 = or i32 %31, %100
  %102 = add i32 %64, 1
  %103 = add i32 %2, 1
  %104 = xor i32 %78, -1
  %105 = xor i32 %20, %104
  %106 = or i32 %48, %35
  %107 = and i32 %47, %34
  %108 = or i32 %24, %42
  %109 = shl i32 %108, 2
  %110 = or i32 %52, %22
  %111 = xor i32 %28, %0
  %112 = and i32 %89, %1
  %113 = add i32 %45, 1
  %114 = xor i32 %60, %26
  %115 = or i32 %37, %2
  %116 = and i32 %115, %0
  %117 = or i32 %39, %116
  %118 = or i32 %74, %18
  %119 = or i32 %47, %60
  %120 = or i32 %52, %42
  %121 = and i32 %38, %0
  %122 = or i32 %19, %0
  %123 = xor i32 %122, -1
  %124 = or i32 %121, %123
  %125 = add i32 %52, 1
  %126 = or i32 %68, %22
  %127 = or i32 %45, %2
  %128 = and i32 %41, %48
  %129 = or i32 %78, %111
  %130 = or i32 %8, %22
  %131 = xor i32 %89, -1
  %132 = or i32 %21, %131
  %133 = and i32 %19, %81
  %134 = or i32 %68, %1
  %135 = shl i32 %134, 1
  %136 = or i32 %7, %22
  %137 = xor i32 %25, %0
  %138 = and i32 %54, %0
  %139 = or i32 %45, %90
  %140 = and i32 %34, %7
  %141 = xor i32 %100, %50
  %142 = or i32 %47, %45
  %143 = xor i32 %54, %0
  %144 = xor i32 %41, %2
  %145 = xor i32 %8, %26
  %146 = or i32 %24, %0
  %147 = or i32 %45, %131
  %148 = and i32 %48, %1
  %149 = or i32 %45, %24
  %150 = shl i32 %149, 1
  %151 = and i32 %43, %1
  %152 = or i32 %121, %92
  %153 = xor i32 %81, %2
  %154 = xor i32 %46, %2
  %155 = and i32 %66, %1
  %156 = shl i32 %32, 1
  %157 = xor i32 %64, %1
  %158 = or i32 %25, %0
  %159 = and i32 %89, %37
  %160 = or i32 %28, %0
  %161 = shl i32 %160, 1
  %162 = and i32 %47, %1
  %163 = xor i32 %68, %1
  %164 = or i32 %60, %7
  %165 = or i32 %45, %48
  %166 = xor i32 %64, %45
  %167 = xor i32 %26, %0
  %168 = and i32 %41, %24
  %169 = or i32 %54, %0
  %170 = and i32 %46, %2
  %171 = or i32 %25, %18
  %172 = or i32 %42, %2
  %173 = xor i32 %29, %104
  %174 = xor i32 %121, %122
  %175 = xor i32 %52, %41
  %176 = or i32 %48, %37
  %177 = xor i32 %8, %74
  %178 = and i32 %89, %22
  %179 = and i32 %54, %18
  %180 = xor i32 %92, -1
  %181 = xor i32 %121, %180
  %182 = or i32 %7, %42
  %183 = and i32 %74, %0
  %184 = xor i32 %60, %54
  %185 = and i32 %24, %46
  %186 = and i32 %48, %22
  %187 = shl i32 %186, 1
  %188 = or i32 %48, %42
  %189 = or i32 %53, %60
  %190 = or i32 %131, %37
  %191 = and i32 %90, %18
  %192 = and i32 %53, %18
  %193 = and i32 %90, %0
  %194 = mul i32 %193, 19
  %195 = and i32 %53, %0
  %196 = and i32 %75, %18
  %197 = mul i32 %196, -13
  %198 = shl i32 %31, 1
  %199 = and i32 %75, %0
  %200 = xor i32 %3, -1
  %201 = and i32 %200, %4
  %202 = xor i32 %5, %3
  %203 = xor i32 %202, -1
  %204 = or i32 %201, %203
  %205 = and i32 %12, %11
  %206 = or i32 %5, %3
  %207 = and i32 %206, %4
  %208 = xor i32 %207, 1073741823
  %209 = xor i32 %208, %205
  %210 = xor i32 %5, -1
  %211 = or i32 %210, %3
  %212 = or i32 %211, %11
  %213 = or i32 %4, %3
  %214 = xor i32 %213, -1
  %215 = xor i32 %5, %4
  %216 = or i32 %215, %214
  %217 = xor i32 %201, -1
  %218 = and i32 %215, %217
  %219 = xor i32 %206, -1
  %220 = or i32 %219, %11
  %221 = and i32 %201, %5
  %222 = or i32 %202, %4
  %223 = xor i32 %221, %222
  %224 = and i32 %4, %3
  %225 = or i32 %224, %5
  %226 = and i32 %5, %4
  %227 = xor i32 %4, %3
  %228 = or i32 %226, %227
  %229 = xor i32 %228, -1
  %230 = xor i32 %215, -1
  %231 = and i32 %230, %217
  %232 = or i32 %202, %214
  %233 = shl i32 %232, 1
  %234 = or i32 %200, %4
  %235 = xor i32 %234, -1
  %236 = or i32 %226, %235
  %237 = or i32 %5, %4
  %238 = xor i32 %237, %3
  %239 = and i32 %202, %4
  %240 = or i32 %205, %239
  %241 = xor i32 %203, %4
  %242 = and i32 %12, %4
  %243 = or i32 %219, %4
  %244 = xor i32 %242, %243
  %245 = and i32 %219, %11
  %246 = mul i32 %245, 5
  %247 = xor i32 %246, -1
  %248 = and i32 %210, %3
  %249 = and i32 %248, %11
  %250 = and i32 %219, %4
  %251 = mul i32 %250, -7
  %252 = and i32 %248, %4
  %253 = xor i32 %211, -1
  %254 = and i32 %253, %11
  %255 = and i32 %253, %4
  %256 = add i32 %40, %78
  %257 = add i32 %256, %255
  %258 = add i32 %257, %242
  %259 = add i32 %258, %254
  %260 = mul i32 %259, -3
  %261 = sub i32 %195, %192
  %262 = add i32 %261, %129
  %263 = mul i32 %262, 5
  %264 = add i32 %205, %191
  %265 = add i32 %264, %209
  %266 = shl i32 %265, 2
  %267 = sub i32 %199, %249
  %268 = mul i32 %267, 6
  %269 = add i32 %153, -1
  %270 = add i32 %269, %24
  %271 = add i32 %270, %184
  %272 = add i32 %271, %145
  %273 = add i32 %272, %132
  %274 = add i32 %273, %106
  %275 = add i32 %274, %55
  %276 = add i32 %275, %79
  %277 = add i32 %276, %152
  %278 = shl i32 %277, 1
  %279 = sub i32 1, %1
  %280 = add i32 %279, %81
  %281 = add i32 %280, %103
  %282 = add i32 %281, %113
  %283 = add i32 %282, %45
  %284 = sub i32 %283, %23
  %285 = add i32 %284, %27
  %286 = add i32 %285, %53
  %287 = sub i32 %286, %63
  %288 = sub i32 %287, %83
  %289 = sub i32 %288, %89
  %290 = sub i32 %289, %52
  %291 = add i32 %290, %94
  %292 = add i32 %291, %102
  %293 = add i32 %292, %43
  %294 = add i32 %293, %125
  %295 = sub i32 %294, %8
  %296 = add i32 %295, %127
  %297 = add i32 %296, %136
  %298 = sub i32 %297, %140
  %299 = add i32 %298, %144
  %300 = sub i32 %299, %154
  %301 = sub i32 %300, %164
  %302 = sub i32 %301, %170
  %303 = sub i32 %302, %172
  %304 = add i32 %303, %182
  %305 = add i32 %304, %20
  %306 = add i32 %305, %29
  %307 = sub i32 %306, %30
  %308 = sub i32 %307, %36
  %309 = sub i32 %308, %44
  %310 = sub i32 %309, %49
  %311 = sub i32 %310, %56
  %312 = add i32 %311, %59
  %313 = sub i32 %312, %65
  %314 = sub i32 %313, %67
  %315 = sub i32 %314, %71
  %316 = add i32 %315, %76
  %317 = add i32 %316, %77
  %318 = add i32 %317, %80
  %319 = sub i32 %318, %82
  %320 = add i32 %319, %84
  %321 = sub i32 %320, %85
  %322 = sub i32 %321, %86
  %323 = sub i32 %322, %87
  %324 = add i32 %323, %88
  %325 = add i32 %324, %91
  %326 = add i32 %325, %95
  %327 = sub i32 %326, %96
  %328 = sub i32 %327, %99
  %329 = add i32 %328, %107
  %330 = add i32 %329, %110
  %331 = sub i32 %330, %111
  %332 = add i32 %331, %112
  %333 = add i32 %332, %114
  %334 = add i32 %333, %118
  %335 = sub i32 %334, %119
  %336 = add i32 %335, %120
  %337 = add i32 %336, %126
  %338 = add i32 %337, %128
  %339 = sub i32 %338, %130
  %340 = add i32 %339, %133
  %341 = sub i32 %340, %137
  %342 = add i32 %341, %138
  %343 = sub i32 %342, %139
  %344 = add i32 %343, %142
  %345 = add i32 %344, %143
  %346 = add i32 %345, %146
  %347 = add i32 %346, %147
  %348 = sub i32 %347, %148
  %349 = sub i32 %348, %151
  %350 = add i32 %349, %155
  %351 = add i32 %350, %157
  %352 = add i32 %351, %158
  %353 = sub i32 %352, %159
  %354 = add i32 %353, %162
  %355 = sub i32 %354, %163
  %356 = add i32 %355, %165
  %357 = sub i32 %356, %166
  %358 = add i32 %357, %100
  %359 = sub i32 %358, %167
  %360 = sub i32 %359, %168
  %361 = add i32 %360, %169
  %362 = sub i32 %361, %171
  %363 = sub i32 %362, %175
  %364 = add i32 %363, %176
  %365 = add i32 %364, %177
  %366 = add i32 %365, %178
  %367 = add i32 %366, %179
  %368 = sub i32 %367, %122
  %369 = sub i32 %368, %183
  %370 = sub i32 %369, %185
  %371 = sub i32 %370, %188
  %372 = add i32 %371, %189
  %373 = sub i32 %372, %190
  %374 = add i32 %373, %4
  %375 = sub i32 %374, %33
  %376 = sub i32 %375, %51
  %377 = sub i32 %376, %58
  %378 = sub i32 %377, %62
  %379 = sub i32 %378, %70
  %380 = sub i32 %379, %73
  %381 = sub i32 %380, %93
  %382 = sub i32 %381, %98
  %383 = add i32 %382, %101
  %384 = sub i32 %383, %105
  %385 = sub i32 %384, %109
  %386 = sub i32 %385, %117
  %387 = add i32 %386, %124
  %388 = sub i32 %387, %135
  %389 = add i32 %388, %141
  %390 = sub i32 %389, %150
  %391 = sub i32 %390, %156
  %392 = sub i32 %391, %161
  %393 = sub i32 %392, %173
  %394 = add i32 %393, %174
  %395 = add i32 %394, %181
  %396 = sub i32 %395, %187
  %397 = add i32 %396, %194
  %398 = add i32 %397, %197
  %399 = sub i32 %398, %198
  %400 = add i32 %399, %234
  %401 = sub i32 %400, %225
  %402 = sub i32 %401, %204
  %403 = sub i32 %402, %212
  %404 = sub i32 %403, %216
  %405 = sub i32 %404, %218
  %406 = sub i32 %405, %220
  %407 = add i32 %406, %229
  %408 = add i32 %407, %231
  %409 = add i32 %408, %236
  %410 = add i32 %409, %238
  %411 = add i32 %410, %241
  %412 = sub i32 %411, %252
  %413 = add i32 %412, %223
  %414 = sub i32 %413, %233
  %415 = sub i32 %414, %240
  %416 = add i32 %415, %244
  %417 = add i32 %416, %247
  %418 = add i32 %417, %251
  %419 = add i32 %418, %263
  %420 = add i32 %419, %268
  %421 = add i32 %420, %260
  %422 = add i32 %421, %266
  %423 = add i32 %422, %278
  %424 = icmp eq i32 %17, %423
  %425 = select i1 %424, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %426 = tail call i32 @puts(i8* nonnull dereferenceable(1) %425)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
