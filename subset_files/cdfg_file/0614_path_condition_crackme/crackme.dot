digraph "DFG for'crackme' function" {
	Node0x1df6b70[shape=record, label="  %5 = or i32 %3, %0"];
	Node0x1df71f0[shape=record, label="  %6 = xor i32 %3, -1"];
	Node0x1df7290[shape=record, label="  %7 = sub i32 2, %1"];
	Node0x1df7300[shape=record, label="  %8 = sub i32 %7, %2"];
	Node0x1df7370[shape=record, label="  %9 = sub i32 %8, %5"];
	Node0x1df73e0[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x1df7450[shape=record, label="  %11 = or i32 %10, %1"];
	Node0x1df74c0[shape=record, label="  %12 = and i32 %10, %1"];
	Node0x1df7530[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x1df75a0[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x1df7610[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1df7680[shape=record, label="  %16 = xor i32 %11, -1"];
	Node0x1df76f0[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x1df7760[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x1df77d0[shape=record, label="  %19 = and i32 %3, %0"];
	Node0x1df7840[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x1df78b0[shape=record, label="  %21 = or i32 %18, %3"];
	Node0x1df7950[shape=record, label="  %22 = shl i32 %3, 1"];
	Node0x1df79c0[shape=record, label="  %23 = or i32 %6, %0"];
	Node0x1df7a30[shape=record, label="  %24 = shl i32 %5, 1"];
	Node0x1df7ad0[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x1df7b40[shape=record, label="  %26 = xor i32 %21, -1"];
	Node0x1df7be0[shape=record, label="  %27 = mul i32 %26, -3"];
	Node0x1df7c50[shape=record, label="  %28 = sub i32 %12, %0"];
	Node0x1df7cc0[shape=record, label="  %29 = add i32 %28, %19"];
	Node0x1df7d30[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x1df7da0[shape=record, label="  %31 = sub i32 1, %1"];
	Node0x1df7e10[shape=record, label="  %32 = sub i32 %31, %2"];
	Node0x1df8090[shape=record, label="  %33 = sub i32 %32, %11"];
	Node0x1df8100[shape=record, label="  %34 = sub i32 %33, %13"];
	Node0x1df8170[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x1df81e0[shape=record, label="  %36 = add i32 %35, %16"];
	Node0x1df8250[shape=record, label="  %37 = add i32 %36, %17"];
	Node0x1df82c0[shape=record, label="  %38 = add i32 %37, %6"];
	Node0x1df8330[shape=record, label="  %39 = add i32 %38, %20"];
	Node0x1df83a0[shape=record, label="  %40 = sub i32 %39, %21"];
	Node0x1df8410[shape=record, label="  %41 = sub i32 %40, %22"];
	Node0x1df8480[shape=record, label="  %42 = add i32 %41, %23"];
	Node0x1df84f0[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x1df8560[shape=record, label="  %44 = sub i32 %43, %25"];
	Node0x1df85d0[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x1df8640[shape=record, label="  %46 = icmp eq i32 %9, %45"];
	Node0x1d97268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1df8ae0[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x1df8b30[shape=record, label="  ret void"];
	Node0x1df6b70 -> Node0x1df71f0;
	Node0x1df71f0 -> Node0x1df7290;
	Node0x1df7290 -> Node0x1df7300;
	Node0x1df7300 -> Node0x1df7370;
	Node0x1df7370 -> Node0x1df73e0;
	Node0x1df73e0 -> Node0x1df7450;
	Node0x1df7450 -> Node0x1df74c0;
	Node0x1df74c0 -> Node0x1df7530;
	Node0x1df7530 -> Node0x1df75a0;
	Node0x1df75a0 -> Node0x1df7610;
	Node0x1df7610 -> Node0x1df7680;
	Node0x1df7680 -> Node0x1df76f0;
	Node0x1df76f0 -> Node0x1df7760;
	Node0x1df7760 -> Node0x1df77d0;
	Node0x1df77d0 -> Node0x1df7840;
	Node0x1df7840 -> Node0x1df78b0;
	Node0x1df78b0 -> Node0x1df7950;
	Node0x1df7950 -> Node0x1df79c0;
	Node0x1df79c0 -> Node0x1df7a30;
	Node0x1df7a30 -> Node0x1df7ad0;
	Node0x1df7ad0 -> Node0x1df7b40;
	Node0x1df7b40 -> Node0x1df7be0;
	Node0x1df7be0 -> Node0x1df7c50;
	Node0x1df7c50 -> Node0x1df7cc0;
	Node0x1df7cc0 -> Node0x1df7d30;
	Node0x1df7d30 -> Node0x1df7da0;
	Node0x1df7da0 -> Node0x1df7e10;
	Node0x1df7e10 -> Node0x1df8090;
	Node0x1df8090 -> Node0x1df8100;
	Node0x1df8100 -> Node0x1df8170;
	Node0x1df8170 -> Node0x1df81e0;
	Node0x1df81e0 -> Node0x1df8250;
	Node0x1df8250 -> Node0x1df82c0;
	Node0x1df82c0 -> Node0x1df8330;
	Node0x1df8330 -> Node0x1df83a0;
	Node0x1df83a0 -> Node0x1df8410;
	Node0x1df8410 -> Node0x1df8480;
	Node0x1df8480 -> Node0x1df84f0;
	Node0x1df84f0 -> Node0x1df8560;
	Node0x1df8560 -> Node0x1df85d0;
	Node0x1df85d0 -> Node0x1df8640;
	Node0x1df8640 -> Node0x1d97268;
	Node0x1d97268 -> Node0x1df8ae0;
	Node0x1df8ae0 -> Node0x1df8b30;
edge [color=red]
	Node0x1df7290 -> Node0x1df7300;
	Node0x1df7300 -> Node0x1df7370;
	Node0x1df6b70 -> Node0x1df7370;
	Node0x1df73e0 -> Node0x1df7450;
	Node0x1df73e0 -> Node0x1df74c0;
	Node0x1df75a0 -> Node0x1df7610;
	Node0x1df7450 -> Node0x1df7680;
	Node0x1df7760 -> Node0x1df78b0;
	Node0x1df71f0 -> Node0x1df79c0;
	Node0x1df6b70 -> Node0x1df7a30;
	Node0x1df7a30 -> Node0x1df7ad0;
	Node0x1df78b0 -> Node0x1df7b40;
	Node0x1df7b40 -> Node0x1df7be0;
	Node0x1df74c0 -> Node0x1df7c50;
	Node0x1df7c50 -> Node0x1df7cc0;
	Node0x1df77d0 -> Node0x1df7cc0;
	Node0x1df7cc0 -> Node0x1df7d30;
	Node0x1df7da0 -> Node0x1df7e10;
	Node0x1df7e10 -> Node0x1df8090;
	Node0x1df7450 -> Node0x1df8090;
	Node0x1df8090 -> Node0x1df8100;
	Node0x1df7530 -> Node0x1df8100;
	Node0x1df8100 -> Node0x1df8170;
	Node0x1df7610 -> Node0x1df8170;
	Node0x1df8170 -> Node0x1df81e0;
	Node0x1df7680 -> Node0x1df81e0;
	Node0x1df81e0 -> Node0x1df8250;
	Node0x1df76f0 -> Node0x1df8250;
	Node0x1df8250 -> Node0x1df82c0;
	Node0x1df71f0 -> Node0x1df82c0;
	Node0x1df82c0 -> Node0x1df8330;
	Node0x1df7840 -> Node0x1df8330;
	Node0x1df8330 -> Node0x1df83a0;
	Node0x1df78b0 -> Node0x1df83a0;
	Node0x1df83a0 -> Node0x1df8410;
	Node0x1df7950 -> Node0x1df8410;
	Node0x1df8410 -> Node0x1df8480;
	Node0x1df79c0 -> Node0x1df8480;
	Node0x1df8480 -> Node0x1df84f0;
	Node0x1df7be0 -> Node0x1df84f0;
	Node0x1df84f0 -> Node0x1df8560;
	Node0x1df7ad0 -> Node0x1df8560;
	Node0x1df8560 -> Node0x1df85d0;
	Node0x1df7d30 -> Node0x1df85d0;
	Node0x1df7370 -> Node0x1df8640;
	Node0x1df85d0 -> Node0x1df8640;
	Node0x1df8640 -> Node0x1d97268;
	Node0x1d97268 -> Node0x1df8ae0;
}
