digraph "DFG for'crackme' function" {
	Node0x207a570[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x207ac20[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x207ace0[shape=record, label="  %5 = sub i32 %4, %1"];
	Node0x207ad50[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x207adc0[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x207ae30[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x207aea0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x207af10[shape=record, label="  %10 = xor i32 %0, -1"];
	Node0x207af80[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x207aff0[shape=record, label="  %12 = shl i32 %9, 1"];
	Node0x207b090[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x207b100[shape=record, label="  %14 = xor i32 %11, -1"];
	Node0x207b170[shape=record, label="  %15 = and i32 %10, %1"];
	Node0x207b210[shape=record, label="  %16 = shl i32 %3, 2"];
	Node0x207b280[shape=record, label="  %17 = add i32 %15, %14"];
	Node0x207b320[shape=record, label="  %18 = mul i32 %17, -3"];
	Node0x207b390[shape=record, label="  %19 = sub i32 %6, %0"];
	Node0x207b400[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x207b470[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x207b4e0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x207b550[shape=record, label="  %23 = sub i32 %22, %7"];
	Node0x207b5c0[shape=record, label="  %24 = sub i32 %23, %16"];
	Node0x207b630[shape=record, label="  %25 = add i32 %24, %13"];
	Node0x207b6a0[shape=record, label="  %26 = add i32 %25, %18"];
	Node0x207b710[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0x201b268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x207bbb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x207bc00[shape=record, label="  ret void"];
	Node0x207a570 -> Node0x207ac20;
	Node0x207ac20 -> Node0x207ace0;
	Node0x207ace0 -> Node0x207ad50;
	Node0x207ad50 -> Node0x207adc0;
	Node0x207adc0 -> Node0x207ae30;
	Node0x207ae30 -> Node0x207aea0;
	Node0x207aea0 -> Node0x207af10;
	Node0x207af10 -> Node0x207af80;
	Node0x207af80 -> Node0x207aff0;
	Node0x207aff0 -> Node0x207b090;
	Node0x207b090 -> Node0x207b100;
	Node0x207b100 -> Node0x207b170;
	Node0x207b170 -> Node0x207b210;
	Node0x207b210 -> Node0x207b280;
	Node0x207b280 -> Node0x207b320;
	Node0x207b320 -> Node0x207b390;
	Node0x207b390 -> Node0x207b400;
	Node0x207b400 -> Node0x207b470;
	Node0x207b470 -> Node0x207b4e0;
	Node0x207b4e0 -> Node0x207b550;
	Node0x207b550 -> Node0x207b5c0;
	Node0x207b5c0 -> Node0x207b630;
	Node0x207b630 -> Node0x207b6a0;
	Node0x207b6a0 -> Node0x207b710;
	Node0x207b710 -> Node0x201b268;
	Node0x201b268 -> Node0x207bbb0;
	Node0x207bbb0 -> Node0x207bc00;
edge [color=red]
	Node0x207a570 -> Node0x207ac20;
	Node0x207ac20 -> Node0x207ace0;
	Node0x207ad50 -> Node0x207adc0;
	Node0x207adc0 -> Node0x207ae30;
	Node0x207aea0 -> Node0x207aff0;
	Node0x207aff0 -> Node0x207b090;
	Node0x207af80 -> Node0x207b100;
	Node0x207af10 -> Node0x207b170;
	Node0x207a570 -> Node0x207b210;
	Node0x207b170 -> Node0x207b280;
	Node0x207b100 -> Node0x207b280;
	Node0x207b280 -> Node0x207b320;
	Node0x207ad50 -> Node0x207b390;
	Node0x207b390 -> Node0x207b400;
	Node0x207ae30 -> Node0x207b400;
	Node0x207b400 -> Node0x207b470;
	Node0x207aea0 -> Node0x207b470;
	Node0x207b470 -> Node0x207b4e0;
	Node0x207af80 -> Node0x207b4e0;
	Node0x207b4e0 -> Node0x207b550;
	Node0x207adc0 -> Node0x207b550;
	Node0x207b550 -> Node0x207b5c0;
	Node0x207b210 -> Node0x207b5c0;
	Node0x207b5c0 -> Node0x207b630;
	Node0x207b090 -> Node0x207b630;
	Node0x207b630 -> Node0x207b6a0;
	Node0x207b320 -> Node0x207b6a0;
	Node0x207ace0 -> Node0x207b710;
	Node0x207b6a0 -> Node0x207b710;
	Node0x207b710 -> Node0x201b268;
	Node0x201b268 -> Node0x207bbb0;
}
