; ModuleID = '../.././c_source_file/0005_path_condition_crackme.c'
source_filename = "../.././c_source_file/0005_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %1
  %11 = xor i32 %10, -1
  %12 = xor i32 %8, %11
  %13 = xor i32 %0, -1
  %14 = and i32 %2, %1
  %15 = and i32 %14, %13
  %16 = or i32 %2, %1
  %17 = and i32 %16, %0
  %18 = xor i32 %17, -1
  %19 = xor i32 %15, %18
  %20 = mul i32 %19, 5
  %21 = add i32 %20, %12
  %22 = or i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = xor i32 %5, %3
  %25 = xor i32 %24, -1
  %26 = or i32 %25, %23
  %27 = xor i32 %5, -1
  %28 = and i32 %27, %3
  %29 = xor i32 %28, -1
  %30 = add i32 %21, %29
  %31 = add i32 %30, %26
  %32 = and i32 %9, %0
  %33 = or i32 %9, %1
  %34 = xor i32 %32, %33
  %35 = xor i32 %1, %0
  %36 = xor i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %35, %37
  %39 = shl i32 %38, 1
  %40 = xor i32 %39, -1
  %41 = or i32 %1, %0
  %42 = xor i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = and i32 %41, %43
  %45 = shl i32 %44, 1
  %46 = or i32 %7, %0
  %47 = and i32 %46, %37
  %48 = and i32 %7, %2
  %49 = and i32 %48, %0
  %50 = or i32 %42, %0
  %51 = xor i32 %49, %50
  %52 = xor i32 %14, -1
  %53 = xor i32 %8, %52
  %54 = shl i32 %53, 1
  %55 = or i32 %36, %8
  %56 = and i32 %33, %13
  %57 = or i32 %8, %43
  %58 = or i32 %9, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %35, -1
  %61 = or i32 %59, %60
  %62 = and i32 %1, %0
  %63 = xor i32 %58, %62
  %64 = or i32 %10, %13
  %65 = shl i32 %64, 1
  %66 = xor i32 %42, %0
  %67 = or i32 %49, %66
  %68 = and i32 %35, %9
  %69 = or i32 %8, %2
  %70 = and i32 %48, %13
  %71 = or i32 %7, %2
  %72 = and i32 %71, %0
  %73 = or i32 %70, %72
  %74 = shl i32 %73, 1
  %75 = or i32 %8, %37
  %76 = or i32 %42, %13
  %77 = xor i32 %52, %0
  %78 = or i32 %14, %0
  %79 = shl i32 %78, 2
  %80 = xor i32 %14, %0
  %81 = or i32 %2, %0
  %82 = xor i32 %81, -1
  %83 = or i32 %35, %82
  %84 = and i32 %46, %9
  %85 = and i32 %81, %7
  %86 = and i32 %2, %0
  %87 = xor i32 %86, -1
  %88 = or i32 %60, %2
  %89 = or i32 %10, %8
  %90 = or i32 %32, %14
  %91 = or i32 %86, %35
  %92 = and i32 %42, %46
  %93 = and i32 %37, %7
  %94 = and i32 %52, %0
  %95 = or i32 %37, %1
  %96 = or i32 %62, %59
  %97 = xor i32 %81, %1
  %98 = and i32 %42, %13
  %99 = and i32 %14, %0
  %100 = xor i32 %99, -1
  %101 = xor i32 %98, %100
  %102 = or i32 %32, %35
  %103 = or i32 %10, %0
  %104 = xor i32 %46, -1
  %105 = or i32 %42, %104
  %106 = and i32 %58, %1
  %107 = xor i32 %99, %66
  %108 = shl i32 %107, 1
  %109 = xor i32 %33, -1
  %110 = or i32 %32, %109
  %111 = or i32 %109, %13
  %112 = or i32 %62, %37
  %113 = xor i32 %8, -1
  %114 = and i32 %36, %113
  %115 = xor i32 %66, -1
  %116 = xor i32 %49, %115
  %117 = or i32 %99, %115
  %118 = xor i32 %41, -1
  %119 = or i32 %86, %118
  %120 = shl i32 %119, 1
  %121 = xor i32 %16, %62
  %122 = shl i32 %121, 1
  %123 = or i32 %104, %2
  %124 = shl i32 %123, 2
  %125 = or i32 %33, %13
  %126 = or i32 %9, %104
  %127 = or i32 %37, %118
  %128 = and i32 %16, %13
  %129 = xor i32 %128, %100
  %130 = or i32 %59, %7
  %131 = xor i32 %16, %0
  %132 = or i32 %99, %131
  %133 = and i32 %35, %87
  %134 = or i32 %14, %13
  %135 = or i32 %62, %43
  %136 = or i32 %99, %128
  %137 = xor i32 %50, -1
  %138 = or i32 %49, %137
  %139 = or i32 %11, %0
  %140 = and i32 %46, %43
  %141 = and i32 %11, %13
  %142 = xor i32 %32, %52
  %143 = shl i32 %142, 1
  %144 = and i32 %9, %113
  %145 = or i32 %37, %60
  %146 = and i32 %42, %113
  %147 = and i32 %36, %46
  %148 = or i32 %15, %17
  %149 = and i32 %81, %60
  %150 = shl i32 %149, 1
  %151 = and i32 %42, %0
  %152 = xor i32 %71, %0
  %153 = or i32 %49, %152
  %154 = or i32 %14, %8
  %155 = or i32 %86, %104
  %156 = or i32 %42, %8
  %157 = or i32 %36, %104
  %158 = xor i32 %16, -1
  %159 = xor i32 %158, %0
  %160 = xor i32 %62, -1
  %161 = and i32 %36, %160
  %162 = shl i32 %58, 1
  %163 = xor i32 %62, %2
  %164 = and i32 %81, %35
  %165 = and i32 %37, %160
  %166 = add i32 %33, 1
  %167 = and i32 %42, %41
  %168 = or i32 %33, %0
  %169 = xor i32 %58, %1
  %170 = and i32 %58, %35
  %171 = and i32 %41, %37
  %172 = or i32 %32, %1
  %173 = or i32 %35, %37
  %174 = shl i32 %173, 1
  %175 = xor i32 %104, %2
  %176 = or i32 %35, %9
  %177 = or i32 %118, %2
  %178 = or i32 %43, %104
  %179 = and i32 %37, %113
  %180 = and i32 %36, %7
  %181 = and i32 %36, %60
  %182 = and i32 %81, %1
  %183 = add i32 %81, 1
  %184 = xor i32 %86, %46
  %185 = shl i32 %184, 1
  %186 = add i32 %2, 1
  %187 = or i32 %62, %158
  %188 = xor i32 %160, %2
  %189 = add i32 %8, 1
  %190 = or i32 %9, %118
  %191 = xor i32 %43, %0
  %192 = xor i32 %46, %2
  %193 = and i32 %42, %160
  %194 = or i32 %43, %13
  %195 = and i32 %36, %41
  %196 = and i32 %43, %13
  %197 = or i32 %62, %9
  %198 = or i32 %36, %7
  %199 = xor i32 %32, -1
  %200 = and i32 %35, %199
  %201 = and i32 %158, %13
  %202 = shl i32 %201, 2
  %203 = and i32 %10, %13
  %204 = mul i32 %203, 22
  %205 = and i32 %158, %0
  %206 = mul i32 %205, 11
  %207 = and i32 %10, %0
  %208 = mul i32 %207, 6
  %209 = and i32 %109, %13
  %210 = mul i32 %209, 12
  %211 = shl i32 %15, 3
  %212 = and i32 %109, %0
  %213 = mul i32 %212, 9
  %214 = or i32 %27, %3
  %215 = or i32 %214, %4
  %216 = xor i32 %3, -1
  %217 = and i32 %5, %4
  %218 = xor i32 %217, -1
  %219 = and i32 %218, %216
  %220 = or i32 %5, %3
  %221 = xor i32 %220, %4
  %222 = xor i32 %4, %3
  %223 = or i32 %217, %222
  %224 = xor i32 %4, -1
  %225 = and i32 %5, %3
  %226 = xor i32 %225, -1
  %227 = or i32 %226, %224
  %228 = and i32 %216, %5
  %229 = and i32 %228, %224
  %230 = and i32 %25, %4
  %231 = or i32 %229, %230
  %232 = add i32 %4, 1
  %233 = and i32 %225, %4
  %234 = and i32 %24, %224
  %235 = xor i32 %234, -1
  %236 = xor i32 %233, %235
  %237 = and i32 %220, %224
  %238 = shl i32 %237, 1
  %239 = and i32 %27, %4
  %240 = xor i32 %239, -1
  %241 = and i32 %240, %3
  %242 = and i32 %214, %4
  %243 = or i32 %5, %4
  %244 = or i32 %216, %4
  %245 = xor i32 %244, %5
  %246 = xor i32 %217, %22
  %247 = or i32 %233, %234
  %248 = and i32 %222, %5
  %249 = or i32 %28, %224
  %250 = or i32 %233, %221
  %251 = xor i32 %243, -1
  %252 = or i32 %222, %251
  %253 = and i32 %240, %216
  %254 = or i32 %27, %4
  %255 = xor i32 %254, -1
  %256 = xor i32 %222, -1
  %257 = or i32 %255, %256
  %258 = or i32 %255, %3
  %259 = and i32 %4, %3
  %260 = xor i32 %220, %259
  %261 = xor i32 %5, %4
  %262 = and i32 %261, %22
  %263 = xor i32 %226, %4
  %264 = and i32 %261, %222
  %265 = or i32 %220, %4
  %266 = xor i32 %261, -1
  %267 = and i32 %266, %216
  %268 = xor i32 %220, -1
  %269 = or i32 %259, %268
  %270 = and i32 %256, %5
  %271 = or i32 %217, %28
  %272 = and i32 %214, %224
  %273 = and i32 %228, %4
  %274 = xor i32 %24, %4
  %275 = xor i32 %273, -1
  %276 = xor i32 %274, %275
  %277 = xor i32 %214, %259
  %278 = and i32 %222, %218
  %279 = xor i32 %254, %3
  %280 = and i32 %244, %5
  %281 = shl i32 %280, 1
  %282 = shl i32 %239, 1
  %283 = and i32 %216, %4
  %284 = xor i32 %283, -1
  %285 = and i32 %266, %284
  %286 = or i32 %239, %225
  %287 = or i32 %255, %216
  %288 = xor i32 %23, %5
  %289 = or i32 %214, %224
  %290 = or i32 %217, %216
  %291 = and i32 %226, %224
  %292 = or i32 %216, %5
  %293 = and i32 %292, %4
  %294 = or i32 %229, %293
  %295 = shl i32 %294, 1
  %296 = add i32 %220, 1
  %297 = and i32 %243, %3
  %298 = xor i32 %259, -1
  %299 = and i32 %27, %298
  %300 = or i32 %27, %23
  %301 = shl i32 %300, 1
  %302 = and i32 %24, %244
  %303 = and i32 %24, %22
  %304 = xor i32 %29, %4
  %305 = and i32 %266, %298
  %306 = and i32 %243, %216
  %307 = or i32 %266, %216
  %308 = or i32 %217, %23
  %309 = or i32 %239, %216
  %310 = or i32 %259, %5
  %311 = shl i32 %310, 1
  %312 = and i32 %27, %284
  %313 = or i32 %24, %4
  %314 = or i32 %24, %259
  %315 = xor i32 %251, %3
  %316 = or i32 %24, %23
  %317 = or i32 %261, %216
  %318 = and i32 %24, %4
  %319 = xor i32 %292, %224
  %320 = xor i32 %319, %273
  %321 = or i32 %28, %4
  %322 = and i32 %222, %27
  %323 = shl i32 %322, 1
  %324 = and i32 %22, %266
  %325 = or i32 %259, %25
  %326 = and i32 %29, %224
  %327 = or i32 %217, %256
  %328 = or i32 %259, %255
  %329 = and i32 %261, %244
  %330 = xor i32 %214, -1
  %331 = or i32 %330, %4
  %332 = xor i32 %225, %4
  %333 = shl i32 %332, 1
  %334 = or i32 %217, %3
  %335 = or i32 %273, %274
  %336 = or i32 %222, %266
  %337 = and i32 %25, %284
  %338 = xor i32 %292, -1
  %339 = or i32 %338, %4
  %340 = xor i32 %273, %339
  %341 = and i32 %24, %298
  %342 = or i32 %24, %283
  %343 = xor i32 %22, %5
  %344 = and i32 %243, %256
  %345 = shl i32 %344, 1
  %346 = xor i32 %217, %29
  %347 = and i32 %261, %256
  %348 = xor i32 %244, -1
  %349 = or i32 %24, %348
  %350 = and i32 %225, %224
  %351 = or i32 %350, %318
  %352 = or i32 %261, %256
  %353 = and i32 %266, %256
  %354 = and i32 %226, %4
  %355 = shl i32 %354, 1
  %356 = xor i32 %243, %259
  %357 = or i32 %266, %256
  %358 = shl i32 %357, 1
  %359 = and i32 %268, %224
  %360 = and i32 %28, %224
  %361 = mul i32 %360, -19
  %362 = and i32 %268, %4
  %363 = and i32 %28, %4
  %364 = shl i32 %363, 1
  %365 = and i32 %330, %224
  %366 = shl i32 %350, 3
  %367 = and i32 %330, %4
  %368 = shl i32 %367, 3
  %369 = add i32 %196, %198
  %370 = add i32 %369, %178
  %371 = add i32 %370, %151
  %372 = add i32 %371, %145
  %373 = add i32 %372, %106
  %374 = add i32 %373, %98
  %375 = add i32 %374, %93
  %376 = add i32 %375, %92
  %377 = add i32 %376, %90
  %378 = add i32 %377, %85
  %379 = add i32 %378, %77
  %380 = add i32 %379, %76
  %381 = add i32 %380, %75
  %382 = sub i32 %381, %34
  %383 = add i32 %382, %256
  %384 = add i32 %383, %226
  %385 = add i32 %384, %312
  %386 = add i32 %385, %248
  %387 = add i32 %386, %362
  %388 = add i32 %387, %342
  %389 = add i32 %388, %326
  %390 = add i32 %389, %271
  %391 = add i32 %390, %246
  %392 = add i32 %391, %241
  %393 = add i32 %392, %223
  %394 = add i32 %393, %221
  %395 = add i32 %394, %219
  %396 = add i32 %395, %247
  %397 = add i32 %396, %351
  %398 = shl i32 %397, 1
  %399 = add i32 %135, %232
  %400 = add i32 %399, %57
  %401 = add i32 %400, %324
  %402 = add i32 %401, %365
  %403 = sub i32 %402, %317
  %404 = mul i32 %403, 5
  %405 = add i32 %141, %99
  %406 = add i32 %405, %334
  %407 = shl i32 %406, 2
  %408 = sub i32 %14, %63
  %409 = sub i32 %408, %233
  %410 = mul i32 %409, 3
  %411 = sub i32 -4, %0
  %412 = sub i32 %411, %8
  %413 = sub i32 %412, %35
  %414 = add i32 %413, %186
  %415 = add i32 %414, %189
  %416 = sub i32 %415, %33
  %417 = add i32 %416, %68
  %418 = sub i32 %417, %69
  %419 = add i32 %418, %32
  %420 = sub i32 %419, %84
  %421 = add i32 %420, %87
  %422 = sub i32 %421, %88
  %423 = add i32 %422, %59
  %424 = sub i32 %423, %126
  %425 = add i32 %424, %144
  %426 = sub i32 %425, %163
  %427 = add i32 %426, %166
  %428 = add i32 %427, %175
  %429 = sub i32 %428, %36
  %430 = add i32 %429, %176
  %431 = add i32 %430, %81
  %432 = sub i32 %431, %177
  %433 = add i32 %432, %183
  %434 = add i32 %433, %188
  %435 = sub i32 %434, %190
  %436 = add i32 %435, %192
  %437 = add i32 %436, %197
  %438 = add i32 %437, %216
  %439 = add i32 %438, %47
  %440 = add i32 %439, %55
  %441 = sub i32 %440, %56
  %442 = sub i32 %441, %61
  %443 = add i32 %442, %80
  %444 = add i32 %443, %83
  %445 = sub i32 %444, %89
  %446 = sub i32 %445, %91
  %447 = sub i32 %446, %94
  %448 = add i32 %447, %95
  %449 = add i32 %448, %96
  %450 = sub i32 %449, %97
  %451 = sub i32 %450, %102
  %452 = sub i32 %451, %103
  %453 = sub i32 %452, %105
  %454 = sub i32 %453, %110
  %455 = add i32 %454, %111
  %456 = sub i32 %455, %112
  %457 = add i32 %456, %114
  %458 = sub i32 %457, %124
  %459 = sub i32 %458, %125
  %460 = sub i32 %459, %127
  %461 = sub i32 %460, %130
  %462 = add i32 %461, %133
  %463 = add i32 %462, %134
  %464 = add i32 %463, %139
  %465 = add i32 %464, %140
  %466 = add i32 %465, %131
  %467 = sub i32 %466, %146
  %468 = sub i32 %467, %147
  %469 = sub i32 %468, %154
  %470 = add i32 %469, %155
  %471 = sub i32 %470, %156
  %472 = sub i32 %471, %157
  %473 = add i32 %472, %159
  %474 = add i32 %473, %161
  %475 = sub i32 %474, %162
  %476 = sub i32 %475, %164
  %477 = add i32 %476, %165
  %478 = sub i32 %477, %167
  %479 = sub i32 %478, %168
  %480 = sub i32 %479, %169
  %481 = add i32 %480, %170
  %482 = sub i32 %481, %171
  %483 = sub i32 %482, %172
  %484 = sub i32 %483, %179
  %485 = add i32 %484, %180
  %486 = add i32 %485, %181
  %487 = sub i32 %486, %182
  %488 = sub i32 %487, %187
  %489 = sub i32 %488, %191
  %490 = add i32 %489, %193
  %491 = sub i32 %490, %194
  %492 = add i32 %491, %195
  %493 = add i32 %492, %200
  %494 = sub i32 %493, %66
  %495 = sub i32 %494, %4
  %496 = add i32 %495, %40
  %497 = sub i32 %496, %45
  %498 = sub i32 %497, %51
  %499 = sub i32 %498, %54
  %500 = sub i32 %499, %65
  %501 = add i32 %500, %67
  %502 = sub i32 %501, %79
  %503 = add i32 %502, %101
  %504 = sub i32 %503, %116
  %505 = add i32 %504, %117
  %506 = sub i32 %505, %120
  %507 = sub i32 %506, %122
  %508 = sub i32 %507, %129
  %509 = add i32 %508, %132
  %510 = sub i32 %509, %136
  %511 = add i32 %510, %138
  %512 = sub i32 %511, %143
  %513 = sub i32 %512, %148
  %514 = sub i32 %513, %150
  %515 = add i32 %514, %153
  %516 = sub i32 %515, %174
  %517 = sub i32 %516, %185
  %518 = sub i32 %517, %202
  %519 = add i32 %518, %204
  %520 = add i32 %519, %206
  %521 = add i32 %520, %208
  %522 = add i32 %521, %210
  %523 = sub i32 %522, %211
  %524 = add i32 %523, %213
  %525 = sub i32 %524, %244
  %526 = sub i32 %525, %74
  %527 = sub i32 %526, %108
  %528 = add i32 %527, %28
  %529 = add i32 %528, %243
  %530 = sub i32 %529, %245
  %531 = sub i32 %530, %270
  %532 = add i32 %531, %288
  %533 = add i32 %532, %296
  %534 = sub i32 %533, %299
  %535 = add i32 %534, %343
  %536 = add i32 %535, %215
  %537 = add i32 %536, %227
  %538 = add i32 %537, %242
  %539 = add i32 %538, %249
  %540 = sub i32 %539, %252
  %541 = add i32 %540, %253
  %542 = sub i32 %541, %257
  %543 = sub i32 %542, %258
  %544 = add i32 %543, %260
  %545 = sub i32 %544, %262
  %546 = sub i32 %545, %263
  %547 = add i32 %546, %264
  %548 = add i32 %547, %265
  %549 = add i32 %548, %267
  %550 = sub i32 %549, %269
  %551 = add i32 %550, %272
  %552 = add i32 %551, %277
  %553 = sub i32 %552, %278
  %554 = sub i32 %553, %279
  %555 = sub i32 %554, %281
  %556 = sub i32 %555, %282
  %557 = sub i32 %556, %285
  %558 = sub i32 %557, %286
  %559 = add i32 %558, %287
  %560 = add i32 %559, %289
  %561 = add i32 %560, %290
  %562 = add i32 %561, %291
  %563 = sub i32 %562, %297
  %564 = sub i32 %563, %301
  %565 = sub i32 %564, %302
  %566 = add i32 %565, %303
  %567 = sub i32 %566, %304
  %568 = sub i32 %567, %305
  %569 = add i32 %568, %306
  %570 = sub i32 %569, %307
  %571 = sub i32 %570, %308
  %572 = add i32 %571, %309
  %573 = sub i32 %572, %311
  %574 = sub i32 %573, %313
  %575 = sub i32 %574, %314
  %576 = add i32 %575, %315
  %577 = add i32 %576, %316
  %578 = sub i32 %577, %318
  %579 = sub i32 %578, %321
  %580 = sub i32 %579, %323
  %581 = add i32 %580, %325
  %582 = add i32 %581, %327
  %583 = add i32 %582, %328
  %584 = add i32 %583, %329
  %585 = sub i32 %584, %331
  %586 = add i32 %585, %336
  %587 = sub i32 %586, %337
  %588 = sub i32 %587, %341
  %589 = add i32 %588, %346
  %590 = sub i32 %589, %347
  %591 = add i32 %590, %349
  %592 = sub i32 %591, %352
  %593 = sub i32 %592, %353
  %594 = add i32 %593, %356
  %595 = add i32 %594, %359
  %596 = add i32 %595, %231
  %597 = sub i32 %596, %236
  %598 = sub i32 %597, %238
  %599 = sub i32 %598, %250
  %600 = add i32 %599, %276
  %601 = add i32 %600, %320
  %602 = sub i32 %601, %333
  %603 = sub i32 %602, %335
  %604 = add i32 %603, %340
  %605 = sub i32 %604, %345
  %606 = sub i32 %605, %355
  %607 = sub i32 %606, %358
  %608 = add i32 %607, %361
  %609 = sub i32 %608, %364
  %610 = sub i32 %609, %366
  %611 = sub i32 %610, %368
  %612 = sub i32 %611, %295
  %613 = add i32 %612, %407
  %614 = add i32 %613, %410
  %615 = add i32 %614, %404
  %616 = add i32 %615, %398
  %617 = icmp eq i32 %31, %616
  %618 = select i1 %617, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %619 = tail call i32 @puts(i8* nonnull dereferenceable(1) %618)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
