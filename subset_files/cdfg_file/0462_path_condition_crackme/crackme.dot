digraph "DFG for'crackme' function" {
	Node0xbb14b0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0xbb1b60[shape=record, label="  %4 = sub i32 0, %3"];
	Node0xbb1c20[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0xbb1c90[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0xbb1d00[shape=record, label="  %7 = or i32 %6, %0"];
	Node0xbb1da0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0xbb1e10[shape=record, label="  %9 = and i32 %6, %0"];
	Node0xbb1e80[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xbb1f20[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0xbb1fc0[shape=record, label="  %12 = shl i32 %7, 2"];
	Node0xbb2060[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0xbb2100[shape=record, label="  %14 = mul i32 %9, -3"];
	Node0xbb2170[shape=record, label="  %15 = sub i32 %5, %1"];
	Node0xbb21e0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0xbb2250[shape=record, label="  %17 = add i32 %9, %3"];
	Node0xbb22c0[shape=record, label="  %18 = sub i32 %17, %8"];
	Node0xbb2330[shape=record, label="  %19 = add i32 %18, %14"];
	Node0xbb23a0[shape=record, label="  %20 = add i32 %19, %11"];
	Node0xbb2410[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0xbb2480[shape=record, label="  %22 = add i32 %21, %16"];
	Node0xbb24f0[shape=record, label="  %23 = icmp eq i32 %22, %4"];
	Node0xb52268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbb2990[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xbb29e0[shape=record, label="  ret void"];
	Node0xbb14b0 -> Node0xbb1b60;
	Node0xbb1b60 -> Node0xbb1c20;
	Node0xbb1c20 -> Node0xbb1c90;
	Node0xbb1c90 -> Node0xbb1d00;
	Node0xbb1d00 -> Node0xbb1da0;
	Node0xbb1da0 -> Node0xbb1e10;
	Node0xbb1e10 -> Node0xbb1e80;
	Node0xbb1e80 -> Node0xbb1f20;
	Node0xbb1f20 -> Node0xbb1fc0;
	Node0xbb1fc0 -> Node0xbb2060;
	Node0xbb2060 -> Node0xbb2100;
	Node0xbb2100 -> Node0xbb2170;
	Node0xbb2170 -> Node0xbb21e0;
	Node0xbb21e0 -> Node0xbb2250;
	Node0xbb2250 -> Node0xbb22c0;
	Node0xbb22c0 -> Node0xbb2330;
	Node0xbb2330 -> Node0xbb23a0;
	Node0xbb23a0 -> Node0xbb2410;
	Node0xbb2410 -> Node0xbb2480;
	Node0xbb2480 -> Node0xbb24f0;
	Node0xbb24f0 -> Node0xb52268;
	Node0xb52268 -> Node0xbb2990;
	Node0xbb2990 -> Node0xbb29e0;
edge [color=red]
	Node0xbb14b0 -> Node0xbb1b60;
	Node0xbb1c90 -> Node0xbb1d00;
	Node0xbb1d00 -> Node0xbb1da0;
	Node0xbb1c90 -> Node0xbb1e10;
	Node0xbb1e10 -> Node0xbb1e80;
	Node0xbb1e80 -> Node0xbb1f20;
	Node0xbb1d00 -> Node0xbb1fc0;
	Node0xbb1fc0 -> Node0xbb2060;
	Node0xbb1e10 -> Node0xbb2100;
	Node0xbb1c20 -> Node0xbb2170;
	Node0xbb2170 -> Node0xbb21e0;
	Node0xbb1e10 -> Node0xbb2250;
	Node0xbb14b0 -> Node0xbb2250;
	Node0xbb2250 -> Node0xbb22c0;
	Node0xbb1da0 -> Node0xbb22c0;
	Node0xbb22c0 -> Node0xbb2330;
	Node0xbb2100 -> Node0xbb2330;
	Node0xbb2330 -> Node0xbb23a0;
	Node0xbb1f20 -> Node0xbb23a0;
	Node0xbb23a0 -> Node0xbb2410;
	Node0xbb2060 -> Node0xbb2410;
	Node0xbb2410 -> Node0xbb2480;
	Node0xbb21e0 -> Node0xbb2480;
	Node0xbb2480 -> Node0xbb24f0;
	Node0xbb1b60 -> Node0xbb24f0;
	Node0xbb24f0 -> Node0xb52268;
	Node0xb52268 -> Node0xbb2990;
}
