; ModuleID = '../.././c_source_file/0900_path_condition_crackme.c'
source_filename = "../.././c_source_file/0900_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %2
  %6 = and i32 %5, %0
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, %0
  %9 = or i32 %6, %8
  %10 = or i32 %2, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %11, %1
  %13 = sub i32 %9, %12
  %14 = and i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = xor i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %17, %15
  %19 = and i32 %16, %4
  %20 = or i32 %4, %0
  %21 = and i32 %16, %20
  %22 = xor i32 %2, -1
  %23 = and i32 %22, %1
  %24 = or i32 %23, %0
  %25 = shl i32 %24, 1
  %26 = and i32 %22, %0
  %27 = xor i32 %1, %0
  %28 = or i32 %26, %27
  %29 = or i32 %1, %0
  %30 = xor i32 %7, -1
  %31 = and i32 %29, %30
  %32 = and i32 %4, %0
  %33 = and i32 %2, %1
  %34 = or i32 %33, %32
  %35 = or i32 %32, %30
  %36 = or i32 %32, %2
  %37 = xor i32 %0, -1
  %38 = and i32 %33, %37
  %39 = and i32 %7, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %38, %40
  %42 = or i32 %14, %30
  %43 = xor i32 %20, %2
  %44 = or i32 %2, %1
  %45 = or i32 %44, %0
  %46 = xor i32 %27, -1
  %47 = and i32 %10, %46
  %48 = and i32 %27, %2
  %49 = xor i32 %32, -1
  %50 = add i32 %32, 1
  %51 = or i32 %7, %0
  %52 = xor i32 %6, %51
  %53 = and i32 %2, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %14, %2
  %56 = or i32 %16, %27
  %57 = shl i32 %56, 1
  %58 = xor i32 %54, %1
  %59 = or i32 %22, %0
  %60 = xor i32 %59, -1
  %61 = add i32 %59, 1
  %62 = xor i32 %53, %29
  %63 = or i32 %30, %37
  %64 = xor i32 %32, %2
  %65 = xor i32 %33, -1
  %66 = or i32 %65, %37
  %67 = xor i32 %29, -1
  %68 = or i32 %17, %67
  %69 = or i32 %16, %67
  %70 = xor i32 %23, -1
  %71 = and i32 %70, %0
  %72 = and i32 %22, %46
  %73 = xor i32 %20, -1
  %74 = or i32 %17, %73
  %75 = and i32 %16, %27
  %76 = or i32 %17, %1
  %77 = xor i32 %26, -1
  %78 = xor i32 %77, %1
  %79 = and i32 %33, %0
  %80 = xor i32 %79, %8
  %81 = and i32 %22, %49
  %82 = xor i32 %32, %70
  %83 = xor i32 %67, %2
  %84 = or i32 %38, %39
  %85 = shl i32 %84, 1
  %86 = and i32 %5, %37
  %87 = or i32 %4, %2
  %88 = and i32 %87, %0
  %89 = or i32 %86, %88
  %90 = and i32 %44, %0
  %91 = or i32 %38, %90
  %92 = and i32 %65, %0
  %93 = or i32 %26, %4
  %94 = shl i32 %93, 1
  %95 = or i32 %70, %0
  %96 = and i32 %20, %22
  %97 = xor i32 %65, %0
  %98 = and i32 %16, %49
  %99 = shl i32 %98, 1
  %100 = or i32 %22, %46
  %101 = shl i32 %100, 1
  %102 = and i32 %20, %30
  %103 = xor i32 %59, %1
  %104 = xor i32 %44, %14
  %105 = or i32 %33, %37
  %106 = or i32 %16, %1
  %107 = and i32 %16, %29
  %108 = xor i32 %44, -1
  %109 = or i32 %53, %108
  %110 = xor i32 %73, %2
  %111 = or i32 %14, %60
  %112 = and i32 %30, %15
  %113 = and i32 %87, %37
  %114 = xor i32 %6, -1
  %115 = xor i32 %113, %114
  %116 = xor i32 %88, -1
  %117 = xor i32 %86, %116
  %118 = xor i32 %70, %0
  %119 = and i32 %16, %15
  %120 = and i32 %44, %37
  %121 = or i32 %79, %120
  %122 = or i32 %53, %27
  %123 = shl i32 %122, 1
  %124 = and i32 %27, %22
  %125 = and i32 %10, %27
  %126 = and i32 %59, %27
  %127 = and i32 %30, %49
  %128 = and i32 %16, %1
  %129 = or i32 %26, %46
  %130 = shl i32 %129, 1
  %131 = or i32 %53, %46
  %132 = xor i32 %90, 2147483647
  %133 = xor i32 %132, %38
  %134 = or i32 %14, %11
  %135 = xor i32 %49, %2
  %136 = shl i32 %135, 2
  %137 = and i32 %10, %1
  %138 = and i32 %49, %2
  %139 = or i32 %22, %1
  %140 = xor i32 %139, -1
  %141 = xor i32 %140, %0
  %142 = and i32 %17, %49
  %143 = xor i32 %44, %0
  %144 = or i32 %79, %143
  %145 = add i32 %10, 1
  %146 = or i32 %44, %37
  %147 = and i32 %20, %17
  %148 = xor i32 %53, %20
  %149 = xor i32 %87, %0
  %150 = or i32 %6, %149
  %151 = or i32 %53, %73
  %152 = xor i32 %53, %44
  %153 = or i32 %14, %108
  %154 = shl i32 %153, 1
  %155 = xor i32 %8, %114
  %156 = and i32 %7, %15
  %157 = shl i32 %156, 1
  %158 = or i32 %23, %37
  %159 = or i32 %30, %0
  %160 = add i32 %20, 1
  %161 = or i32 %6, %113
  %162 = and i32 %29, %2
  %163 = and i32 %16, %46
  %164 = and i32 %17, %4
  %165 = xor i32 %79, %159
  %166 = and i32 %15, %2
  %167 = xor i32 %139, %0
  %168 = and i32 %29, %17
  %169 = or i32 %140, %0
  %170 = or i32 %16, %73
  %171 = and i32 %77, %46
  %172 = or i32 %16, %46
  %173 = or i32 %27, %60
  %174 = or i32 %23, %32
  %175 = xor i32 %143, -1
  %176 = xor i32 %79, %175
  %177 = or i32 %16, %4
  %178 = xor i32 %53, %1
  %179 = or i32 %60, %46
  %180 = and i32 %17, %46
  %181 = shl i32 %180, 2
  %182 = shl i32 %8, 1
  %183 = or i32 %7, %67
  %184 = and i32 %27, %17
  %185 = and i32 %59, %46
  %186 = and i32 %23, %37
  %187 = and i32 %108, %0
  %188 = and i32 %23, %0
  %189 = mul i32 %188, 17
  %190 = and i32 %140, %37
  %191 = mul i32 %190, -6
  %192 = and i32 %140, %0
  %193 = shl i32 %192, 3
  %194 = add i32 %38, %186
  %195 = sub i32 %194, %185
  %196 = add i32 %195, %147
  %197 = sub i32 %196, %134
  %198 = mul i32 %197, 3
  %199 = add i32 %125, %177
  %200 = sub i32 %58, %199
  %201 = add i32 %200, %41
  %202 = mul i32 %201, 5
  %203 = add i32 %178, %54
  %204 = shl i32 %203, 2
  %205 = sub i32 -2, %1
  %206 = add i32 %205, %16
  %207 = add i32 %206, %36
  %208 = add i32 %207, %79
  %209 = add i32 %208, %152
  %210 = add i32 %209, %126
  %211 = add i32 %210, %109
  %212 = add i32 %211, %47
  %213 = add i32 %212, %80
  %214 = add i32 %213, %133
  %215 = shl i32 %214, 1
  %216 = add i32 %50, %27
  %217 = add i32 %216, %20
  %218 = add i32 %217, %29
  %219 = add i32 %218, %160
  %220 = sub i32 %219, %43
  %221 = add i32 %220, %48
  %222 = sub i32 %221, %55
  %223 = add i32 %222, %61
  %224 = add i32 %223, %64
  %225 = add i32 %224, %72
  %226 = sub i32 %225, %81
  %227 = add i32 %226, %83
  %228 = add i32 %227, %33
  %229 = sub i32 %228, %96
  %230 = sub i32 %229, %110
  %231 = sub i32 %230, %124
  %232 = sub i32 %231, %138
  %233 = add i32 %232, %145
  %234 = sub i32 %233, %23
  %235 = sub i32 %234, %162
  %236 = sub i32 %235, %166
  %237 = add i32 %236, %19
  %238 = add i32 %237, %18
  %239 = sub i32 %238, %21
  %240 = sub i32 %239, %28
  %241 = sub i32 %240, %31
  %242 = sub i32 %241, %34
  %243 = sub i32 %242, %35
  %244 = sub i32 %243, %42
  %245 = add i32 %244, %45
  %246 = add i32 %245, %62
  %247 = add i32 %246, %63
  %248 = sub i32 %247, %66
  %249 = sub i32 %248, %68
  %250 = sub i32 %249, %69
  %251 = sub i32 %250, %71
  %252 = sub i32 %251, %74
  %253 = sub i32 %252, %75
  %254 = add i32 %253, %76
  %255 = add i32 %254, %78
  %256 = add i32 %255, %82
  %257 = add i32 %256, %92
  %258 = sub i32 %257, %95
  %259 = add i32 %258, %97
  %260 = sub i32 %259, %101
  %261 = sub i32 %260, %102
  %262 = add i32 %261, %103
  %263 = add i32 %262, %104
  %264 = sub i32 %263, %105
  %265 = add i32 %264, %106
  %266 = add i32 %265, %107
  %267 = add i32 %266, %111
  %268 = add i32 %267, %112
  %269 = add i32 %268, %118
  %270 = sub i32 %269, %119
  %271 = add i32 %270, %127
  %272 = sub i32 %271, %128
  %273 = sub i32 %272, %131
  %274 = sub i32 %273, %136
  %275 = sub i32 %274, %137
  %276 = add i32 %275, %141
  %277 = add i32 %276, %142
  %278 = add i32 %277, %146
  %279 = add i32 %278, %148
  %280 = sub i32 %279, %151
  %281 = add i32 %280, %158
  %282 = add i32 %281, %159
  %283 = sub i32 %282, %163
  %284 = add i32 %283, %164
  %285 = add i32 %284, %167
  %286 = add i32 %285, %168
  %287 = add i32 %286, %169
  %288 = sub i32 %287, %170
  %289 = sub i32 %288, %171
  %290 = sub i32 %289, %172
  %291 = add i32 %290, %173
  %292 = sub i32 %291, %174
  %293 = add i32 %292, %90
  %294 = sub i32 %293, %39
  %295 = add i32 %294, %179
  %296 = sub i32 %295, %183
  %297 = sub i32 %296, %184
  %298 = sub i32 %297, %187
  %299 = sub i32 %298, %25
  %300 = sub i32 %299, %52
  %301 = sub i32 %300, %57
  %302 = add i32 %301, %89
  %303 = add i32 %302, %91
  %304 = sub i32 %303, %94
  %305 = sub i32 %304, %99
  %306 = sub i32 %305, %115
  %307 = sub i32 %306, %117
  %308 = sub i32 %307, %121
  %309 = sub i32 %308, %123
  %310 = sub i32 %309, %130
  %311 = sub i32 %310, %144
  %312 = sub i32 %311, %150
  %313 = sub i32 %312, %154
  %314 = add i32 %313, %155
  %315 = sub i32 %314, %157
  %316 = sub i32 %315, %161
  %317 = add i32 %316, %165
  %318 = sub i32 %317, %176
  %319 = sub i32 %318, %181
  %320 = sub i32 %319, %182
  %321 = add i32 %320, %189
  %322 = add i32 %321, %191
  %323 = add i32 %322, %193
  %324 = sub i32 %323, %85
  %325 = add i32 %324, %204
  %326 = add i32 %325, %198
  %327 = add i32 %326, %202
  %328 = add i32 %327, %215
  %329 = icmp eq i32 %13, %328
  %330 = select i1 %329, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %331 = tail call i32 @puts(i8* nonnull dereferenceable(1) %330)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
