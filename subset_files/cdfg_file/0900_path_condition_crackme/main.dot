digraph "DFG for'main' function" {
	Node0x21d5838[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x21d58b8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x21d5948[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x21d59a8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x21d5e28[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x21d5f08[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x21d6008[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x21d60c8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x21d6178[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x21d63d8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x21d6498[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x21d65f8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x21d6658[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x21d9630[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x21d9838[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x21d9998[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x21d9aa8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x21d9b68[shape=record, label="  ret i32 0"];
	Node0x21d5838 -> Node0x21d58b8;
	Node0x21d58b8 -> Node0x21d5948;
	Node0x21d5948 -> Node0x21d59a8;
	Node0x21d59a8 -> Node0x21d5e28;
	Node0x21d5e28 -> Node0x21d5f08;
	Node0x21d5f08 -> Node0x21d6008;
	Node0x21d6008 -> Node0x21d60c8;
	Node0x21d60c8 -> Node0x21d6178;
	Node0x21d6178 -> Node0x21d63d8;
	Node0x21d63d8 -> Node0x21d6498;
	Node0x21d6498 -> Node0x21d65f8;
	Node0x21d65f8 -> Node0x21d6658;
	Node0x21d6658 -> Node0x21d9630;
	Node0x21d9630 -> Node0x21d9838;
	Node0x21d9838 -> Node0x21d9998;
	Node0x21d9998 -> Node0x21d9aa8;
	Node0x21d9aa8 -> Node0x21d9b68;
edge [color=red]
	Node0x21d5838 -> Node0x21d59a8;
	Node0x21d59a8 -> Node0x21d5e28;
	Node0x21d58b8 -> Node0x21d5f08;
	Node0x21d5f08 -> Node0x21d6008;
	Node0x21d5948 -> Node0x21d60c8;
	Node0x21d60c8 -> Node0x21d6178;
	Node0x21d5838 -> Node0x21d63d8;
	Node0x21d58b8 -> Node0x21d63d8;
	Node0x21d5948 -> Node0x21d63d8;
	Node0x21d5838 -> Node0x21d6498;
	Node0x21d58b8 -> Node0x21d65f8;
	Node0x21d5948 -> Node0x21d6658;
	Node0x21d6498 -> Node0x21d9630;
	Node0x21d65f8 -> Node0x21d9630;
	Node0x21d6658 -> Node0x21d9630;
	Node0x21d60c8 -> Node0x21d9838;
	Node0x21d5f08 -> Node0x21d9998;
	Node0x21d59a8 -> Node0x21d9aa8;
}
