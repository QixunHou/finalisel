; ModuleID = '../.././c_source_file/0979_path_condition_crackme.c'
source_filename = "../.././c_source_file/0979_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %0
  %10 = and i32 %2, %1
  %11 = or i32 %9, %10
  %12 = shl i32 %11, 2
  %13 = or i32 %1, %0
  %14 = add i32 %7, %13
  %15 = sub i32 %12, %14
  %16 = and i32 %6, %3
  %17 = shl i32 %16, 1
  %18 = xor i32 %17, -2
  %19 = shl i32 %3, 1
  %20 = xor i32 %19, -2
  %21 = xor i32 %7, -1
  %22 = and i32 %4, %3
  %23 = xor i32 %1, -1
  %24 = and i32 %23, %0
  %25 = xor i32 %24, %2
  %26 = and i32 %8, %1
  %27 = xor i32 %26, -1
  %28 = xor i32 %27, %0
  %29 = and i32 %10, %0
  %30 = xor i32 %0, -1
  %31 = or i32 %2, %1
  %32 = and i32 %31, %30
  %33 = or i32 %29, %32
  %34 = or i32 %8, %1
  %35 = xor i32 %9, %34
  %36 = xor i32 %34, %0
  %37 = or i32 %24, %8
  %38 = and i32 %23, %2
  %39 = and i32 %38, %0
  %40 = xor i32 %2, %1
  %41 = or i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %39, %42
  %44 = or i32 %10, %30
  %45 = and i32 %1, %0
  %46 = xor i32 %2, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %45, %47
  %49 = xor i32 %1, %0
  %50 = and i32 %49, %2
  %51 = and i32 %2, %0
  %52 = or i32 %23, %0
  %53 = xor i32 %51, %52
  %54 = xor i32 %31, %0
  %55 = xor i32 %29, -1
  %56 = xor i32 %54, %55
  %57 = xor i32 %34, -1
  %58 = or i32 %9, %57
  %59 = shl i32 %58, 1
  %60 = or i32 %45, %2
  %61 = shl i32 %27, 1
  %62 = or i32 %46, %24
  %63 = and i32 %40, %0
  %64 = or i32 %45, %8
  %65 = or i32 %8, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %66, %1
  %68 = or i32 %47, %23
  %69 = xor i32 %40, -1
  %70 = and i32 %69, %30
  %71 = and i32 %65, %1
  %72 = shl i32 %71, 1
  %73 = or i32 %26, %30
  %74 = and i32 %47, %23
  %75 = or i32 %49, %8
  %76 = shl i32 %75, 1
  %77 = and i32 %65, %23
  %78 = and i32 %13, %47
  %79 = and i32 %13, %69
  %80 = and i32 %65, %49
  %81 = shl i32 %80, 1
  %82 = and i32 %40, %30
  %83 = or i32 %29, %82
  %84 = xor i32 %82, %55
  %85 = xor i32 %49, -1
  %86 = or i32 %46, %85
  %87 = or i32 %34, %0
  %88 = xor i32 %52, -1
  %89 = or i32 %46, %88
  %90 = or i32 %47, %88
  %91 = xor i32 %45, -1
  %92 = and i32 %69, %91
  %93 = or i32 %23, %2
  %94 = and i32 %93, %30
  %95 = xor i32 %94, 2147483647
  %96 = xor i32 %95, %39
  %97 = shl i32 %96, 1
  %98 = or i32 %57, %30
  %99 = and i32 %47, %1
  %100 = add i32 %49, 1
  %101 = and i32 %52, %8
  %102 = xor i32 %10, -1
  %103 = or i32 %102, %30
  %104 = and i32 %10, %30
  %105 = xor i32 %104, -1
  %106 = xor i32 %63, %105
  %107 = xor i32 %13, -1
  %108 = or i32 %51, %107
  %109 = xor i32 %32, %55
  %110 = or i32 %49, %2
  %111 = xor i32 %10, %0
  %112 = or i32 %40, %30
  %113 = or i32 %24, %2
  %114 = shl i32 %113, 1
  %115 = and i32 %13, %8
  %116 = or i32 %2, %0
  %117 = xor i32 %116, %1
  %118 = add i32 %46, 1
  %119 = and i32 %31, %0
  %120 = xor i32 %119, %105
  %121 = xor i32 %24, -1
  %122 = and i32 %69, %121
  %123 = or i32 %46, %49
  %124 = xor i32 %51, -1
  %125 = and i32 %49, %124
  %126 = or i32 %57, %0
  %127 = and i32 %46, %13
  %128 = or i32 %47, %107
  %129 = and i32 %52, %69
  %130 = and i32 %40, %52
  %131 = or i32 %31, %0
  %132 = xor i32 %13, %2
  %133 = add i32 %34, 1
  %134 = or i32 %66, %1
  %135 = and i32 %46, %49
  %136 = or i32 %9, %85
  %137 = and i32 %38, %30
  %138 = and i32 %93, %0
  %139 = or i32 %137, %138
  %140 = and i32 %121, %2
  %141 = and i32 %116, %85
  %142 = and i32 %46, %1
  %143 = and i32 %124, %85
  %144 = and i32 %52, %2
  %145 = or i32 %8, %107
  %146 = xor i32 %40, %0
  %147 = shl i32 %146, 1
  %148 = or i32 %39, %146
  %149 = or i32 %69, %30
  %150 = add i32 %24, 1
  %151 = or i32 %66, %85
  %152 = xor i32 %29, %146
  %153 = and i32 %116, %23
  %154 = or i32 %40, %88
  %155 = or i32 %39, %94
  %156 = or i32 %27, %30
  %157 = or i32 %51, %1
  %158 = xor i32 %31, -1
  %159 = or i32 %40, %45
  %160 = or i32 %24, %69
  %161 = or i32 %46, %107
  %162 = and i32 %52, %47
  %163 = xor i32 %107, %2
  %164 = xor i32 %57, %0
  %165 = shl i32 %124, 1
  %166 = add i32 %40, 1
  %167 = or i32 %107, %2
  %168 = and i32 %65, %85
  %169 = and i32 %13, %2
  %170 = shl i32 %169, 1
  %171 = and i32 %46, %121
  %172 = add i32 %65, 1
  %173 = or i32 %45, %57
  %174 = xor i32 %116, -1
  %175 = or i32 %174, %1
  %176 = xor i32 %9, %102
  %177 = shl i32 %10, 1
  %178 = xor i32 %65, %1
  %179 = xor i32 %138, -1
  %180 = xor i32 %137, %179
  %181 = or i32 %66, %23
  %182 = or i32 %24, %47
  %183 = xor i32 %51, %1
  %184 = or i32 %46, %1
  %185 = or i32 %49, %66
  %186 = and i32 %124, %23
  %187 = xor i32 %9, -1
  %188 = and i32 %187, %23
  %189 = xor i32 %9, %1
  %190 = or i32 %8, %85
  %191 = and i32 %49, %8
  %192 = and i32 %27, %0
  %193 = or i32 %104, %119
  %194 = and i32 %47, %91
  %195 = and i32 %34, %0
  %196 = xor i32 %24, %102
  %197 = shl i32 %196, 1
  %198 = or i32 %85, %2
  %199 = xor i32 %121, %2
  %200 = or i32 %45, %174
  %201 = xor i32 %124, %1
  %202 = and i32 %102, %30
  %203 = xor i32 %31, %45
  %204 = shl i32 %203, 1
  %205 = xor i32 %93, %0
  %206 = or i32 %39, %205
  %207 = or i32 %8, %88
  %208 = and i32 %46, %23
  %209 = shl i32 %208, 1
  %210 = xor i32 %51, %13
  %211 = and i32 %40, %121
  %212 = xor i32 %112, -1
  %213 = or i32 %137, %212
  %214 = and i32 %46, %85
  %215 = or i32 %51, %85
  %216 = and i32 %8, %121
  %217 = and i32 %46, %52
  %218 = or i32 %9, %1
  %219 = xor i32 %34, %45
  %220 = and i32 %47, %121
  %221 = or i32 %40, %107
  %222 = or i32 %51, %158
  %223 = or i32 %49, %47
  %224 = and i32 %116, %1
  %225 = xor i32 %69, %0
  %226 = or i32 %46, %23
  %227 = or i32 %104, %63
  %228 = and i32 %34, %30
  %229 = or i32 %45, %158
  %230 = and i32 %69, %0
  %231 = or i32 %51, %26
  %232 = or i32 %158, %0
  %233 = and i32 %91, %2
  %234 = or i32 %40, %24
  %235 = shl i32 %91, 1
  %236 = xor i32 %26, %0
  %237 = xor i32 %187, %1
  %238 = add i32 %9, 1
  %239 = and i32 %124, %1
  %240 = xor i32 %116, %45
  %241 = xor i32 %24, %27
  %242 = xor i32 %39, %41
  %243 = or i32 %10, %24
  %244 = and i32 %85, %2
  %245 = or i32 %69, %88
  %246 = xor i32 %205, -1
  %247 = xor i32 %39, %246
  %248 = xor i32 %91, %2
  %249 = or i32 %46, %45
  %250 = shl i32 %40, 2
  %251 = or i32 %51, %88
  %252 = or i32 %102, %0
  %253 = xor i32 %45, %2
  %254 = shl i32 %253, 2
  %255 = or i32 %51, %23
  %256 = or i32 %29, %54
  %257 = or i32 %158, %30
  %258 = and i32 %49, %47
  %259 = and i32 %40, %13
  %260 = xor i32 %65, %45
  %261 = or i32 %26, %0
  %262 = or i32 %174, %23
  %263 = and i32 %46, %91
  %264 = and i32 %158, %30
  %265 = mul i32 %264, -7
  %266 = and i32 %26, %30
  %267 = mul i32 %266, -15
  %268 = and i32 %158, %0
  %269 = and i32 %26, %0
  %270 = and i32 %57, %30
  %271 = shl i32 %104, 4
  %272 = and i32 %57, %0
  %273 = add i32 %8, %1
  %274 = add i32 %273, %110
  %275 = add i32 %274, %232
  %276 = add i32 %275, %245
  %277 = add i32 %276, %231
  %278 = add i32 %277, %229
  %279 = add i32 %278, %224
  %280 = add i32 %279, %214
  %281 = add i32 %280, %201
  %282 = add i32 %281, %184
  %283 = add i32 %282, %164
  %284 = add i32 %283, %159
  %285 = add i32 %284, %156
  %286 = add i32 %285, %112
  %287 = add i32 %286, %92
  %288 = add i32 %287, %78
  %289 = add i32 %288, %48
  %290 = shl i32 %289, 1
  %291 = add i32 %183, %270
  %292 = add i32 %291, %157
  %293 = sub i32 %126, %292
  %294 = add i32 %293, %21
  %295 = add i32 %294, %155
  %296 = mul i32 %295, 3
  %297 = add i32 %268, %225
  %298 = sub i32 %297, %222
  %299 = add i32 %298, %182
  %300 = mul i32 %299, 5
  %301 = sub i32 %272, %269
  %302 = mul i32 %301, 11
  %303 = sub i32 2, %0
  %304 = sub i32 %303, %0
  %305 = add i32 %304, %23
  %306 = add i32 %305, %100
  %307 = sub i32 %306, %24
  %308 = sub i32 %307, %52
  %309 = add i32 %308, %150
  %310 = sub i32 %309, %45
  %311 = add i32 %310, %107
  %312 = sub i32 %311, %49
  %313 = add i32 %312, %3
  %314 = add i32 %313, %25
  %315 = add i32 %314, %37
  %316 = sub i32 %315, %50
  %317 = sub i32 %316, %60
  %318 = add i32 %317, %64
  %319 = add i32 %318, %51
  %320 = add i32 %319, %101
  %321 = add i32 %320, %65
  %322 = add i32 %321, %115
  %323 = add i32 %322, %118
  %324 = add i32 %323, %132
  %325 = add i32 %324, %133
  %326 = add i32 %325, %140
  %327 = sub i32 %326, %144
  %328 = add i32 %327, %145
  %329 = add i32 %328, %26
  %330 = add i32 %329, %158
  %331 = sub i32 %330, %163
  %332 = add i32 %331, %166
  %333 = sub i32 %332, %167
  %334 = add i32 %333, %172
  %335 = add i32 %334, %9
  %336 = sub i32 %335, %190
  %337 = add i32 %336, %191
  %338 = add i32 %337, %198
  %339 = sub i32 %338, %199
  %340 = add i32 %339, %207
  %341 = add i32 %340, %34
  %342 = sub i32 %341, %216
  %343 = sub i32 %342, %233
  %344 = sub i32 %343, %235
  %345 = add i32 %344, %238
  %346 = sub i32 %345, %244
  %347 = add i32 %346, %248
  %348 = sub i32 %347, %46
  %349 = add i32 %348, %6
  %350 = sub i32 %349, %4
  %351 = add i32 %350, %28
  %352 = sub i32 %351, %35
  %353 = sub i32 %352, %36
  %354 = add i32 %353, %44
  %355 = sub i32 %354, %53
  %356 = sub i32 %355, %61
  %357 = sub i32 %356, %62
  %358 = sub i32 %357, %63
  %359 = add i32 %358, %67
  %360 = add i32 %359, %68
  %361 = add i32 %360, %70
  %362 = add i32 %361, %73
  %363 = add i32 %362, %74
  %364 = sub i32 %363, %76
  %365 = sub i32 %364, %77
  %366 = sub i32 %365, %79
  %367 = sub i32 %366, %86
  %368 = sub i32 %367, %87
  %369 = add i32 %368, %41
  %370 = sub i32 %369, %89
  %371 = sub i32 %370, %90
  %372 = sub i32 %371, %98
  %373 = add i32 %372, %99
  %374 = add i32 %373, %103
  %375 = sub i32 %374, %108
  %376 = add i32 %375, %32
  %377 = add i32 %376, %111
  %378 = sub i32 %377, %114
  %379 = add i32 %378, %117
  %380 = sub i32 %379, %122
  %381 = sub i32 %380, %123
  %382 = sub i32 %381, %125
  %383 = add i32 %382, %127
  %384 = sub i32 %383, %128
  %385 = sub i32 %384, %129
  %386 = sub i32 %385, %130
  %387 = add i32 %386, %131
  %388 = add i32 %387, %82
  %389 = add i32 %388, %134
  %390 = add i32 %389, %135
  %391 = sub i32 %390, %136
  %392 = add i32 %391, %141
  %393 = sub i32 %392, %142
  %394 = sub i32 %393, %143
  %395 = add i32 %394, %149
  %396 = sub i32 %395, %151
  %397 = sub i32 %396, %153
  %398 = add i32 %397, %154
  %399 = add i32 %398, %160
  %400 = sub i32 %399, %161
  %401 = add i32 %400, %162
  %402 = sub i32 %401, %165
  %403 = sub i32 %402, %168
  %404 = sub i32 %403, %170
  %405 = sub i32 %404, %171
  %406 = add i32 %405, %173
  %407 = sub i32 %406, %175
  %408 = sub i32 %407, %176
  %409 = sub i32 %408, %177
  %410 = sub i32 %409, %178
  %411 = add i32 %410, %181
  %412 = sub i32 %411, %185
  %413 = sub i32 %412, %186
  %414 = add i32 %413, %188
  %415 = add i32 %414, %189
  %416 = sub i32 %415, %192
  %417 = sub i32 %416, %194
  %418 = sub i32 %417, %195
  %419 = add i32 %418, %200
  %420 = add i32 %419, %202
  %421 = sub i32 %420, %210
  %422 = add i32 %421, %211
  %423 = sub i32 %422, %215
  %424 = add i32 %423, %217
  %425 = sub i32 %424, %218
  %426 = add i32 %425, %219
  %427 = sub i32 %426, %220
  %428 = add i32 %427, %221
  %429 = add i32 %428, %223
  %430 = sub i32 %429, %226
  %431 = sub i32 %430, %228
  %432 = sub i32 %431, %230
  %433 = sub i32 %432, %234
  %434 = sub i32 %433, %236
  %435 = add i32 %434, %237
  %436 = add i32 %435, %239
  %437 = add i32 %436, %240
  %438 = add i32 %437, %241
  %439 = sub i32 %438, %243
  %440 = add i32 %439, %249
  %441 = add i32 %440, %250
  %442 = sub i32 %441, %251
  %443 = add i32 %442, %252
  %444 = sub i32 %443, %254
  %445 = sub i32 %444, %255
  %446 = sub i32 %445, %257
  %447 = add i32 %446, %119
  %448 = add i32 %447, %258
  %449 = add i32 %448, %259
  %450 = sub i32 %449, %260
  %451 = add i32 %450, %261
  %452 = sub i32 %451, %262
  %453 = sub i32 %452, %263
  %454 = add i32 %453, %29
  %455 = sub i32 %454, %20
  %456 = sub i32 %455, %16
  %457 = sub i32 %456, %22
  %458 = add i32 %457, %33
  %459 = add i32 %458, %43
  %460 = add i32 %459, %56
  %461 = sub i32 %460, %59
  %462 = sub i32 %461, %72
  %463 = sub i32 %462, %81
  %464 = sub i32 %463, %83
  %465 = sub i32 %464, %84
  %466 = sub i32 %465, %106
  %467 = sub i32 %466, %109
  %468 = add i32 %467, %120
  %469 = sub i32 %468, %139
  %470 = sub i32 %469, %147
  %471 = sub i32 %470, %148
  %472 = add i32 %471, %152
  %473 = sub i32 %472, %180
  %474 = sub i32 %473, %193
  %475 = sub i32 %474, %197
  %476 = sub i32 %475, %204
  %477 = add i32 %476, %206
  %478 = sub i32 %477, %209
  %479 = add i32 %478, %213
  %480 = sub i32 %479, %227
  %481 = add i32 %480, %242
  %482 = sub i32 %481, %247
  %483 = add i32 %482, %256
  %484 = add i32 %483, %265
  %485 = add i32 %484, %267
  %486 = add i32 %485, %271
  %487 = add i32 %486, %302
  %488 = add i32 %487, %18
  %489 = sub i32 %488, %97
  %490 = add i32 %489, %300
  %491 = add i32 %490, %296
  %492 = add i32 %491, %290
  %493 = icmp eq i32 %15, %492
  %494 = select i1 %493, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %495 = tail call i32 @puts(i8* nonnull dereferenceable(1) %494)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
