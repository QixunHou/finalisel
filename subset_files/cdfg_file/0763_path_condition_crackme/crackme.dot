digraph "DFG for'crackme' function" {
	Node0x1805150[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x18051c0[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x1805260[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1805300[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x1805370[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x18053e0[shape=record, label="  %10 = add i32 %9, %2"];
	Node0x1805450[shape=record, label="  %11 = sub i32 %8, %10"];
	Node0x18054c0[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x1805530[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x18055a0[shape=record, label="  %14 = or i32 %5, %1"];
	Node0x1805610[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x1805680[shape=record, label="  %16 = shl i32 %12, 1"];
	Node0x18056f0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x1805760[shape=record, label="  %18 = and i32 %5, %1"];
	Node0x18057d0[shape=record, label="  %19 = and i32 %2, %1"];
	Node0x1805840[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x18058b0[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x1805920[shape=record, label="  %22 = add i32 %0, 1"];
	Node0x1805990[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x1805a00[shape=record, label="  %24 = shl i32 %0, 1"];
	Node0x1805a70[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x1805ae0[shape=record, label="  %26 = shl i32 %9, 1"];
	Node0x1805b50[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x1805bc0[shape=record, label="  %28 = and i32 %23, %0"];
	Node0x1805c30[shape=record, label="  %29 = and i32 %21, %3"];
	Node0x1805ca0[shape=record, label="  %30 = sub i32 %22, %1"];
	Node0x1805d10[shape=record, label="  %31 = sub i32 %30, %24"];
	Node0x1805d80[shape=record, label="  %32 = sub i32 %31, %2"];
	Node0x1806000[shape=record, label="  %33 = add i32 %32, %12"];
	Node0x1806070[shape=record, label="  %34 = sub i32 %33, %13"];
	Node0x18060e0[shape=record, label="  %35 = sub i32 %34, %18"];
	Node0x1806150[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x18061c0[shape=record, label="  %37 = add i32 %36, %15"];
	Node0x1806230[shape=record, label="  %38 = sub i32 %37, %20"];
	Node0x18062a0[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x1806310[shape=record, label="  %40 = add i32 %39, %28"];
	Node0x1806380[shape=record, label="  %41 = add i32 %40, %29"];
	Node0x18063f0[shape=record, label="  %42 = add i32 %41, %6"];
	Node0x1806460[shape=record, label="  %43 = sub i32 %42, %17"];
	Node0x18064d0[shape=record, label="  %44 = add i32 %43, %27"];
	Node0x1806540[shape=record, label="  %45 = icmp eq i32 %11, %44"];
	Node0x17a5268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18069e0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x1806a30[shape=record, label="  ret void"];
	Node0x1805150 -> Node0x18051c0;
	Node0x18051c0 -> Node0x1805260;
	Node0x1805260 -> Node0x1805300;
	Node0x1805300 -> Node0x1805370;
	Node0x1805370 -> Node0x18053e0;
	Node0x18053e0 -> Node0x1805450;
	Node0x1805450 -> Node0x18054c0;
	Node0x18054c0 -> Node0x1805530;
	Node0x1805530 -> Node0x18055a0;
	Node0x18055a0 -> Node0x1805610;
	Node0x1805610 -> Node0x1805680;
	Node0x1805680 -> Node0x18056f0;
	Node0x18056f0 -> Node0x1805760;
	Node0x1805760 -> Node0x18057d0;
	Node0x18057d0 -> Node0x1805840;
	Node0x1805840 -> Node0x18058b0;
	Node0x18058b0 -> Node0x1805920;
	Node0x1805920 -> Node0x1805990;
	Node0x1805990 -> Node0x1805a00;
	Node0x1805a00 -> Node0x1805a70;
	Node0x1805a70 -> Node0x1805ae0;
	Node0x1805ae0 -> Node0x1805b50;
	Node0x1805b50 -> Node0x1805bc0;
	Node0x1805bc0 -> Node0x1805c30;
	Node0x1805c30 -> Node0x1805ca0;
	Node0x1805ca0 -> Node0x1805d10;
	Node0x1805d10 -> Node0x1805d80;
	Node0x1805d80 -> Node0x1806000;
	Node0x1806000 -> Node0x1806070;
	Node0x1806070 -> Node0x18060e0;
	Node0x18060e0 -> Node0x1806150;
	Node0x1806150 -> Node0x18061c0;
	Node0x18061c0 -> Node0x1806230;
	Node0x1806230 -> Node0x18062a0;
	Node0x18062a0 -> Node0x1806310;
	Node0x1806310 -> Node0x1806380;
	Node0x1806380 -> Node0x18063f0;
	Node0x18063f0 -> Node0x1806460;
	Node0x1806460 -> Node0x18064d0;
	Node0x18064d0 -> Node0x1806540;
	Node0x1806540 -> Node0x17a5268;
	Node0x17a5268 -> Node0x18069e0;
	Node0x18069e0 -> Node0x1806a30;
edge [color=red]
	Node0x18051c0 -> Node0x1805260;
	Node0x1805260 -> Node0x1805300;
	Node0x1805370 -> Node0x18053e0;
	Node0x1805300 -> Node0x1805450;
	Node0x18053e0 -> Node0x1805450;
	Node0x1805150 -> Node0x18055a0;
	Node0x18055a0 -> Node0x1805610;
	Node0x18054c0 -> Node0x1805680;
	Node0x1805680 -> Node0x18056f0;
	Node0x1805150 -> Node0x1805760;
	Node0x18057d0 -> Node0x1805840;
	Node0x1805370 -> Node0x1805ae0;
	Node0x1805ae0 -> Node0x1805b50;
	Node0x1805990 -> Node0x1805bc0;
	Node0x18058b0 -> Node0x1805c30;
	Node0x1805920 -> Node0x1805ca0;
	Node0x1805ca0 -> Node0x1805d10;
	Node0x1805a00 -> Node0x1805d10;
	Node0x1805d10 -> Node0x1805d80;
	Node0x1805d80 -> Node0x1806000;
	Node0x18054c0 -> Node0x1806000;
	Node0x1806000 -> Node0x1806070;
	Node0x1805530 -> Node0x1806070;
	Node0x1806070 -> Node0x18060e0;
	Node0x1805760 -> Node0x18060e0;
	Node0x18060e0 -> Node0x1806150;
	Node0x1805990 -> Node0x1806150;
	Node0x1806150 -> Node0x18061c0;
	Node0x1805610 -> Node0x18061c0;
	Node0x18061c0 -> Node0x1806230;
	Node0x1805840 -> Node0x1806230;
	Node0x1806230 -> Node0x18062a0;
	Node0x1805a70 -> Node0x18062a0;
	Node0x18062a0 -> Node0x1806310;
	Node0x1805bc0 -> Node0x1806310;
	Node0x1806310 -> Node0x1806380;
	Node0x1805c30 -> Node0x1806380;
	Node0x1806380 -> Node0x18063f0;
	Node0x18051c0 -> Node0x18063f0;
	Node0x18063f0 -> Node0x1806460;
	Node0x18056f0 -> Node0x1806460;
	Node0x1806460 -> Node0x18064d0;
	Node0x1805b50 -> Node0x18064d0;
	Node0x1805450 -> Node0x1806540;
	Node0x18064d0 -> Node0x1806540;
	Node0x1806540 -> Node0x17a5268;
	Node0x17a5268 -> Node0x18069e0;
}
