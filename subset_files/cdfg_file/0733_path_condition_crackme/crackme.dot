digraph "DFG for'crackme' function" {
	Node0xb09b80[shape=record, label="  %3 = shl i32 %1, 1"];
	Node0xb09bf0[shape=record, label="  %4 = sub i32 1, %3"];
	Node0xb09cb0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xb09d20[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xb09d90[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0xb09e00[shape=record, label="  %8 = and i32 %7, %0"];
	Node0xb09e70[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xb09f10[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0xb09f80[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0xb0a020[shape=record, label="  %12 = shl i32 %5, 2"];
	Node0xb0a0c0[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0xb0a130[shape=record, label="  %14 = xor i32 %0, -1"];
	Node0xb0a1a0[shape=record, label="  %15 = and i32 %14, %1"];
	Node0xb0a240[shape=record, label="  %16 = mul i32 %15, -5"];
	Node0xb0a2b0[shape=record, label="  %17 = shl i32 %8, 2"];
	Node0xb0a350[shape=record, label="  %18 = mul i32 %6, -6"];
	Node0xb0a3c0[shape=record, label="  %19 = add i32 %11, %7"];
	Node0xb0a430[shape=record, label="  %20 = sub i32 %19, %6"];
	Node0xb0a4a0[shape=record, label="  %21 = add i32 %20, %16"];
	Node0xb0a510[shape=record, label="  %22 = sub i32 %21, %17"];
	Node0xb0a580[shape=record, label="  %23 = add i32 %22, %18"];
	Node0xb0a5f0[shape=record, label="  %24 = add i32 %23, %10"];
	Node0xb0a660[shape=record, label="  %25 = sub i32 %24, %13"];
	Node0xb0a6d0[shape=record, label="  %26 = icmp eq i32 %4, %25"];
	Node0xaaa268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb0ab70[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xb0abc0[shape=record, label="  ret void"];
	Node0xb09b80 -> Node0xb09bf0;
	Node0xb09bf0 -> Node0xb09cb0;
	Node0xb09cb0 -> Node0xb09d20;
	Node0xb09d20 -> Node0xb09d90;
	Node0xb09d90 -> Node0xb09e00;
	Node0xb09e00 -> Node0xb09e70;
	Node0xb09e70 -> Node0xb09f10;
	Node0xb09f10 -> Node0xb09f80;
	Node0xb09f80 -> Node0xb0a020;
	Node0xb0a020 -> Node0xb0a0c0;
	Node0xb0a0c0 -> Node0xb0a130;
	Node0xb0a130 -> Node0xb0a1a0;
	Node0xb0a1a0 -> Node0xb0a240;
	Node0xb0a240 -> Node0xb0a2b0;
	Node0xb0a2b0 -> Node0xb0a350;
	Node0xb0a350 -> Node0xb0a3c0;
	Node0xb0a3c0 -> Node0xb0a430;
	Node0xb0a430 -> Node0xb0a4a0;
	Node0xb0a4a0 -> Node0xb0a510;
	Node0xb0a510 -> Node0xb0a580;
	Node0xb0a580 -> Node0xb0a5f0;
	Node0xb0a5f0 -> Node0xb0a660;
	Node0xb0a660 -> Node0xb0a6d0;
	Node0xb0a6d0 -> Node0xaaa268;
	Node0xaaa268 -> Node0xb0ab70;
	Node0xb0ab70 -> Node0xb0abc0;
edge [color=red]
	Node0xb09b80 -> Node0xb09bf0;
	Node0xb09d90 -> Node0xb09e00;
	Node0xb09e00 -> Node0xb09e70;
	Node0xb09e70 -> Node0xb09f10;
	Node0xb09cb0 -> Node0xb0a020;
	Node0xb0a020 -> Node0xb0a0c0;
	Node0xb0a130 -> Node0xb0a1a0;
	Node0xb0a1a0 -> Node0xb0a240;
	Node0xb09e00 -> Node0xb0a2b0;
	Node0xb09d20 -> Node0xb0a350;
	Node0xb09f80 -> Node0xb0a3c0;
	Node0xb09d90 -> Node0xb0a3c0;
	Node0xb0a3c0 -> Node0xb0a430;
	Node0xb09d20 -> Node0xb0a430;
	Node0xb0a430 -> Node0xb0a4a0;
	Node0xb0a240 -> Node0xb0a4a0;
	Node0xb0a4a0 -> Node0xb0a510;
	Node0xb0a2b0 -> Node0xb0a510;
	Node0xb0a510 -> Node0xb0a580;
	Node0xb0a350 -> Node0xb0a580;
	Node0xb0a580 -> Node0xb0a5f0;
	Node0xb09f10 -> Node0xb0a5f0;
	Node0xb0a5f0 -> Node0xb0a660;
	Node0xb0a0c0 -> Node0xb0a660;
	Node0xb09bf0 -> Node0xb0a6d0;
	Node0xb0a660 -> Node0xb0a6d0;
	Node0xb0a6d0 -> Node0xaaa268;
	Node0xaaa268 -> Node0xb0ab70;
}
