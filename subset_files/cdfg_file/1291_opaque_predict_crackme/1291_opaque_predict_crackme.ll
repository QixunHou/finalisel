; ModuleID = '../.././c_source_file/1291_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1291_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = or i32 %4, %0
  %6 = and i32 %5, %2
  %7 = or i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = and i32 %8, %7
  %10 = and i32 %4, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %11
  %15 = xor i32 %2, -1
  %16 = and i32 %15, %1
  %17 = xor i32 %16, -1
  %18 = and i32 %17, %0
  %19 = and i32 %2, %0
  %20 = xor i32 %19, %7
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %12, %22
  %24 = xor i32 %0, -1
  %25 = and i32 %8, %24
  %26 = or i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %0
  %29 = and i32 %1, %0
  %30 = or i32 %29, %2
  %31 = and i32 %4, %2
  %32 = and i32 %31, %0
  %33 = xor i32 %8, %0
  %34 = or i32 %32, %33
  %35 = or i32 %15, %1
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %0
  %38 = xor i32 %5, -1
  %39 = or i32 %38, %2
  %40 = and i32 %2, %1
  %41 = and i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %25, %42
  %44 = xor i32 %7, -1
  %45 = or i32 %19, %44
  %46 = xor i32 %29, %2
  %47 = shl i32 %46, 1
  %48 = and i32 %17, %24
  %49 = xor i32 %40, -1
  %50 = and i32 %49, %24
  %51 = shl i32 %50, 1
  %52 = or i32 %15, %0
  %53 = xor i32 %44, %2
  %54 = or i32 %29, %27
  %55 = and i32 %15, %11
  %56 = shl i32 %55, 1
  %57 = xor i32 %29, -1
  %58 = xor i32 %57, %2
  %59 = and i32 %12, %4
  %60 = and i32 %13, %1
  %61 = or i32 %4, %2
  %62 = and i32 %61, %24
  %63 = or i32 %32, %62
  %64 = and i32 %15, %0
  %65 = or i32 %64, %36
  %66 = or i32 %35, %0
  %67 = shl i32 %66, 1
  %68 = or i32 %19, %4
  %69 = and i32 %40, %24
  %70 = and i32 %8, %0
  %71 = xor i32 %69, -1
  %72 = xor i32 %70, %71
  %73 = or i32 %10, %2
  %74 = or i32 %19, %38
  %75 = xor i32 %19, %27
  %76 = add i32 %26, 1
  %77 = or i32 %8, %0
  %78 = xor i32 %77, -1
  %79 = or i32 %32, %78
  %80 = and i32 %7, %15
  %81 = xor i32 %8, -1
  %82 = and i32 %5, %81
  %83 = or i32 %12, %4
  %84 = xor i32 %26, %0
  %85 = or i32 %41, %84
  %86 = or i32 %2, %0
  %87 = and i32 %86, %22
  %88 = and i32 %81, %0
  %89 = xor i32 %11, %2
  %90 = and i32 %8, %57
  %91 = xor i32 %52, -1
  %92 = or i32 %21, %91
  %93 = xor i32 %64, -1
  %94 = xor i32 %93, %1
  %95 = and i32 %8, %11
  %96 = or i32 %19, %27
  %97 = xor i32 %40, %0
  %98 = or i32 %64, %40
  %99 = or i32 %17, %0
  %100 = add i32 %8, 1
  %101 = and i32 %52, %4
  %102 = or i32 %26, %0
  %103 = xor i32 %61, %0
  %104 = or i32 %32, %103
  %105 = and i32 %12, %7
  %106 = shl i32 %105, 1
  %107 = or i32 %36, %24
  %108 = or i32 %64, %1
  %109 = and i32 %26, %0
  %110 = xor i32 %19, -1
  %111 = and i32 %110, %1
  %112 = or i32 %44, %2
  %113 = xor i32 %86, -1
  %114 = or i32 %29, %113
  %115 = or i32 %113, %4
  %116 = or i32 %12, %1
  %117 = or i32 %64, %22
  %118 = xor i32 %26, %29
  %119 = and i32 %5, %13
  %120 = or i32 %22, %2
  %121 = shl i32 %120, 1
  %122 = shl i32 %113, 1
  %123 = or i32 %12, %29
  %124 = or i32 %21, %2
  %125 = or i32 %81, %44
  %126 = and i32 %86, %4
  %127 = and i32 %11, %2
  %128 = xor i32 %109, %71
  %129 = and i32 %13, %4
  %130 = xor i32 %64, %49
  %131 = or i32 %40, %10
  %132 = and i32 %12, %21
  %133 = and i32 %93, %22
  %134 = or i32 %19, %22
  %135 = and i32 %21, %15
  %136 = and i32 %21, %13
  %137 = shl i32 %17, 1
  %138 = or i32 %16, %0
  %139 = shl i32 %138, 1
  %140 = or i32 %13, %1
  %141 = or i32 %8, %38
  %142 = or i32 %29, %13
  %143 = and i32 %26, %24
  %144 = and i32 %15, %57
  %145 = xor i32 %38, %2
  %146 = and i32 %93, %1
  %147 = xor i32 %41, %33
  %148 = or i32 %19, %21
  %149 = or i32 %64, %4
  %150 = and i32 %7, %13
  %151 = and i32 %31, %24
  %152 = and i32 %61, %0
  %153 = xor i32 %152, -1
  %154 = xor i32 %151, %153
  %155 = and i32 %12, %5
  %156 = or i32 %26, %24
  %157 = shl i32 %156, 1
  %158 = or i32 %91, %22
  %159 = and i32 %93, %4
  %160 = or i32 %15, %44
  %161 = or i32 %64, %21
  %162 = or i32 %13, %38
  %163 = or i32 %8, %10
  %164 = shl i32 %163, 1
  %165 = xor i32 %113, %1
  %166 = xor i32 %10, %17
  %167 = xor i32 %91, %1
  %168 = xor i32 %36, %0
  %169 = xor i32 %103, 2147483647
  %170 = xor i32 %169, %32
  %171 = shl i32 %170, 1
  %172 = xor i32 %86, %1
  %173 = or i32 %12, %44
  %174 = and i32 %7, %2
  %175 = shl i32 %174, 1
  %176 = xor i32 %5, %2
  %177 = xor i32 %81, %0
  %178 = or i32 %21, %15
  %179 = shl i32 %178, 1
  %180 = and i32 %81, %24
  %181 = shl i32 %180, 1
  %182 = or i32 %17, %24
  %183 = or i32 %13, %22
  %184 = xor i32 %35, %0
  %185 = and i32 %35, %0
  %186 = and i32 %13, %22
  %187 = xor i32 %17, %0
  %188 = shl i32 %187, 1
  %189 = add i32 %40, 1
  %190 = or i32 %8, %29
  %191 = and i32 %21, %2
  %192 = and i32 %52, %21
  %193 = and i32 %7, %81
  %194 = or i32 %15, %38
  %195 = xor i32 %86, %29
  %196 = shl i32 %195, 1
  %197 = or i32 %12, %10
  %198 = or i32 %8, %24
  %199 = xor i32 %198, -1
  %200 = or i32 %151, %199
  %201 = xor i32 %110, %1
  %202 = and i32 %12, %11
  %203 = shl i32 %202, 1
  %204 = or i32 %40, %0
  %205 = and i32 %81, %57
  %206 = xor i32 %19, %1
  %207 = and i32 %13, %57
  %208 = or i32 %8, %44
  %209 = or i32 %12, %22
  %210 = and i32 %86, %1
  %211 = and i32 %15, %22
  %212 = and i32 %5, %15
  %213 = or i32 %29, %36
  %214 = or i32 %29, %15
  %215 = and i32 %57, %2
  %216 = and i32 %86, %21
  %217 = and i32 %49, %0
  %218 = shl i32 %217, 2
  %219 = xor i32 %52, %29
  %220 = or i32 %10, %81
  %221 = xor i32 %32, %77
  %222 = and i32 %52, %22
  %223 = shl i32 %222, 1
  %224 = xor i32 %16, %0
  %225 = or i32 %16, %24
  %226 = or i32 %29, %91
  %227 = and i32 %52, %1
  %228 = xor i32 %64, %1
  %229 = xor i32 %10, %49
  %230 = or i32 %49, %0
  %231 = xor i32 %27, %0
  %232 = and i32 %81, %11
  %233 = shl i32 %16, 1
  %234 = or i32 %35, %24
  %235 = shl i32 %234, 2
  %236 = or i32 %10, %15
  %237 = or i32 %49, %24
  %238 = or i32 %21, %113
  %239 = xor i32 %84, %42
  %240 = xor i32 %52, %1
  %241 = or i32 %27, %24
  %242 = and i32 %110, %4
  %243 = shl i32 %242, 1
  %244 = xor i32 %35, %29
  %245 = and i32 %21, %93
  %246 = xor i32 %62, -1
  %247 = xor i32 %32, %246
  %248 = or i32 %113, %1
  %249 = or i32 %29, %81
  %250 = and i32 %21, %110
  %251 = xor i32 %64, %35
  %252 = and i32 %12, %57
  %253 = or i32 %12, %21
  %254 = xor i32 %151, %198
  %255 = shl i32 %254, 1
  %256 = xor i32 %19, %5
  %257 = or i32 %91, %4
  %258 = and i32 %27, %24
  %259 = mul i32 %258, -6
  %260 = and i32 %16, %24
  %261 = mul i32 %260, -10
  %262 = and i32 %27, %0
  %263 = mul i32 %262, -18
  %264 = and i32 %16, %0
  %265 = shl i32 %264, 4
  %266 = and i32 %36, %24
  %267 = mul i32 %266, -12
  %268 = mul i32 %69, -9
  %269 = and i32 %36, %0
  %270 = mul i32 %269, 11
  %271 = mul i32 %41, -28
  %272 = add i32 %58, %40
  %273 = add i32 %272, %39
  %274 = add i32 %273, %12
  %275 = add i32 %274, %257
  %276 = add i32 %275, %248
  %277 = add i32 %276, %228
  %278 = add i32 %277, %84
  %279 = add i32 %278, %201
  %280 = add i32 %279, %190
  %281 = add i32 %280, %166
  %282 = add i32 %281, %142
  %283 = add i32 %282, %133
  %284 = add i32 %283, %125
  %285 = add i32 %284, %108
  %286 = add i32 %285, %98
  %287 = add i32 %286, %87
  %288 = add i32 %287, %48
  %289 = add i32 %288, %45
  %290 = add i32 %289, %18
  %291 = add i32 %290, %104
  %292 = shl i32 %291, 1
  %293 = sub i32 %146, %114
  %294 = add i32 %293, %88
  %295 = sub i32 %294, %63
  %296 = mul i32 %295, 3
  %297 = add i32 %132, %1
  %298 = add i32 %297, %128
  %299 = mul i32 %298, 5
  %300 = sub i32 %1, %0
  %301 = sub i32 %300, %21
  %302 = add i32 %301, %38
  %303 = add i32 %302, %11
  %304 = sub i32 %303, %10
  %305 = sub i32 %304, %2
  %306 = add i32 %305, %21
  %307 = add i32 %306, 2
  %308 = sub i32 %307, %30
  %309 = sub i32 %308, %52
  %310 = add i32 %309, %53
  %311 = sub i32 %310, %8
  %312 = add i32 %311, %73
  %313 = add i32 %312, %64
  %314 = add i32 %313, %76
  %315 = sub i32 %314, %80
  %316 = add i32 %315, %89
  %317 = sub i32 %316, %26
  %318 = add i32 %317, %100
  %319 = add i32 %318, %112
  %320 = add i32 %319, %124
  %321 = add i32 %320, %13
  %322 = add i32 %321, %127
  %323 = add i32 %322, %135
  %324 = add i32 %323, %144
  %325 = add i32 %324, %145
  %326 = sub i32 %325, %160
  %327 = add i32 %326, %176
  %328 = add i32 %327, %189
  %329 = sub i32 %328, %191
  %330 = sub i32 %329, %194
  %331 = sub i32 %330, %211
  %332 = sub i32 %331, %212
  %333 = add i32 %332, %214
  %334 = add i32 %333, %215
  %335 = sub i32 %334, %19
  %336 = add i32 %335, %236
  %337 = sub i32 %336, %86
  %338 = sub i32 %337, %14
  %339 = add i32 %338, %9
  %340 = sub i32 %339, %20
  %341 = add i32 %340, %23
  %342 = add i32 %341, %25
  %343 = add i32 %342, %28
  %344 = sub i32 %343, %37
  %345 = sub i32 %344, %47
  %346 = sub i32 %345, %54
  %347 = sub i32 %346, %56
  %348 = sub i32 %347, %59
  %349 = sub i32 %348, %60
  %350 = sub i32 %349, %33
  %351 = sub i32 %350, %65
  %352 = add i32 %351, %68
  %353 = sub i32 %352, %74
  %354 = add i32 %353, %75
  %355 = add i32 %354, %82
  %356 = add i32 %355, %83
  %357 = add i32 %356, %90
  %358 = sub i32 %357, %92
  %359 = add i32 %358, %94
  %360 = add i32 %359, %95
  %361 = sub i32 %360, %96
  %362 = add i32 %361, %97
  %363 = add i32 %362, %99
  %364 = add i32 %363, %101
  %365 = sub i32 %364, %102
  %366 = sub i32 %365, %107
  %367 = add i32 %366, %109
  %368 = sub i32 %367, %111
  %369 = sub i32 %368, %115
  %370 = add i32 %369, %116
  %371 = add i32 %370, %117
  %372 = add i32 %371, %118
  %373 = add i32 %372, %119
  %374 = sub i32 %373, %121
  %375 = sub i32 %374, %122
  %376 = sub i32 %375, %123
  %377 = sub i32 %376, %126
  %378 = add i32 %377, %129
  %379 = add i32 %378, %130
  %380 = add i32 %379, %131
  %381 = add i32 %380, %134
  %382 = sub i32 %381, %136
  %383 = sub i32 %382, %137
  %384 = add i32 %383, %140
  %385 = sub i32 %384, %141
  %386 = sub i32 %385, %143
  %387 = add i32 %386, %148
  %388 = sub i32 %387, %149
  %389 = sub i32 %388, %150
  %390 = add i32 %389, %155
  %391 = sub i32 %390, %158
  %392 = add i32 %391, %159
  %393 = sub i32 %392, %161
  %394 = sub i32 %393, %162
  %395 = add i32 %394, %165
  %396 = sub i32 %395, %167
  %397 = add i32 %396, %168
  %398 = add i32 %397, %172
  %399 = sub i32 %398, %173
  %400 = sub i32 %399, %175
  %401 = sub i32 %400, %177
  %402 = sub i32 %401, %179
  %403 = sub i32 %402, %182
  %404 = sub i32 %403, %183
  %405 = sub i32 %404, %184
  %406 = sub i32 %405, %185
  %407 = add i32 %406, %186
  %408 = add i32 %407, %192
  %409 = sub i32 %408, %193
  %410 = sub i32 %409, %197
  %411 = add i32 %410, %204
  %412 = add i32 %411, %205
  %413 = sub i32 %412, %206
  %414 = add i32 %413, %207
  %415 = sub i32 %414, %208
  %416 = add i32 %415, %209
  %417 = sub i32 %416, %210
  %418 = add i32 %417, %213
  %419 = add i32 %418, %216
  %420 = add i32 %419, %219
  %421 = sub i32 %420, %220
  %422 = add i32 %421, %224
  %423 = sub i32 %422, %225
  %424 = sub i32 %423, %226
  %425 = add i32 %424, %227
  %426 = add i32 %425, %229
  %427 = add i32 %426, %230
  %428 = add i32 %427, %231
  %429 = sub i32 %428, %232
  %430 = sub i32 %429, %233
  %431 = sub i32 %430, %77
  %432 = add i32 %431, %237
  %433 = add i32 %432, %238
  %434 = sub i32 %433, %240
  %435 = add i32 %434, %241
  %436 = add i32 %435, %244
  %437 = add i32 %436, %245
  %438 = sub i32 %437, %249
  %439 = sub i32 %438, %250
  %440 = add i32 %439, %251
  %441 = add i32 %440, %252
  %442 = add i32 %441, %253
  %443 = add i32 %442, %256
  %444 = add i32 %443, %34
  %445 = add i32 %444, %43
  %446 = sub i32 %445, %51
  %447 = sub i32 %446, %67
  %448 = sub i32 %447, %72
  %449 = sub i32 %448, %79
  %450 = add i32 %449, %85
  %451 = sub i32 %450, %106
  %452 = sub i32 %451, %139
  %453 = add i32 %452, %147
  %454 = sub i32 %453, %154
  %455 = sub i32 %454, %157
  %456 = sub i32 %455, %164
  %457 = sub i32 %456, %181
  %458 = sub i32 %457, %188
  %459 = sub i32 %458, %196
  %460 = sub i32 %459, %200
  %461 = sub i32 %460, %203
  %462 = sub i32 %461, %218
  %463 = sub i32 %462, %221
  %464 = sub i32 %463, %223
  %465 = add i32 %464, %235
  %466 = sub i32 %465, %239
  %467 = sub i32 %466, %243
  %468 = add i32 %467, %247
  %469 = add i32 %468, %259
  %470 = add i32 %469, %261
  %471 = add i32 %470, %263
  %472 = add i32 %471, %265
  %473 = add i32 %472, %267
  %474 = add i32 %473, %268
  %475 = add i32 %474, %270
  %476 = add i32 %475, %271
  %477 = sub i32 %476, %255
  %478 = sub i32 %477, %171
  %479 = add i32 %478, %299
  %480 = add i32 %479, %296
  %481 = add i32 %480, %292
  %482 = icmp eq i32 %6, %481
  %483 = select i1 %482, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %484 = tail call i32 @puts(i8* nonnull dereferenceable(1) %483)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
