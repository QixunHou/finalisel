digraph "DFG for'crackme' function" {
	Node0xa9d190[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0xa9d200[shape=record, label="  %6 = and i32 %5, %1"];
	Node0xa9d2a0[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0xa9d340[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0xa9d3b0[shape=record, label="  %9 = sub i32 1, %1"];
	Node0xa9d420[shape=record, label="  %10 = add i32 %9, %8"];
	Node0xa9d490[shape=record, label="  %11 = and i32 %2, %1"];
	Node0xa9d500[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0xa9d570[shape=record, label="  %13 = or i32 %2, %1"];
	Node0xa9d5e0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0xa9d680[shape=record, label="  %15 = xor i32 %1, 1073741823"];
	Node0xa9d6f0[shape=record, label="  %16 = and i32 %15, %2"];
	Node0xa9d790[shape=record, label="  %17 = shl i32 %16, 2"];
	Node0xa9d800[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0xa9d870[shape=record, label="  %19 = and i32 %18, %3"];
	Node0xa9d8e0[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0xa9d950[shape=record, label="  %21 = or i32 %3, %0"];
	Node0xa9d9c0[shape=record, label="  %22 = or i32 %18, %3"];
	Node0xa9da30[shape=record, label="  %23 = add i32 %21, 1"];
	Node0xa9daa0[shape=record, label="  %24 = shl i32 %22, 1"];
	Node0xa9db10[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0xa9db80[shape=record, label="  %26 = shl i32 %19, 1"];
	Node0xa9dbf0[shape=record, label="  %27 = and i32 %3, %0"];
	Node0xa9dc60[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0xa9dcd0[shape=record, label="  %29 = sub i32 %2, %6"];
	Node0xa9dd40[shape=record, label="  %30 = add i32 %29, %23"];
	Node0xa9dde0[shape=record, label="  %31 = mul i32 %30, 3"];
	Node0xa9de50[shape=record, label="  %32 = sub i32 %12, %11"];
	Node0xa9e0d0[shape=record, label="  %33 = shl i32 %32, 1"];
	Node0xa9e140[shape=record, label="  %34 = sub i32 -2, %1"];
	Node0xa9e1b0[shape=record, label="  %35 = add i32 %34, %14"];
	Node0xa9e220[shape=record, label="  %36 = sub i32 %35, %17"];
	Node0xa9e290[shape=record, label="  %37 = sub i32 %36, %19"];
	Node0xa9e300[shape=record, label="  %38 = add i32 %37, %20"];
	Node0xa9e370[shape=record, label="  %39 = sub i32 %38, %21"];
	Node0xa9e3e0[shape=record, label="  %40 = add i32 %39, %22"];
	Node0xa9e450[shape=record, label="  %41 = sub i32 %40, %26"];
	Node0xa9e4c0[shape=record, label="  %42 = sub i32 %41, %28"];
	Node0xa9e530[shape=record, label="  %43 = add i32 %42, %33"];
	Node0xa9e5a0[shape=record, label="  %44 = sub i32 %43, %25"];
	Node0xa9e610[shape=record, label="  %45 = add i32 %44, %31"];
	Node0xa9e680[shape=record, label="  %46 = icmp eq i32 %10, %45"];
	Node0xa3d268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa9eb20[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0xa9eb70[shape=record, label="  ret void"];
	Node0xa9d190 -> Node0xa9d200;
	Node0xa9d200 -> Node0xa9d2a0;
	Node0xa9d2a0 -> Node0xa9d340;
	Node0xa9d340 -> Node0xa9d3b0;
	Node0xa9d3b0 -> Node0xa9d420;
	Node0xa9d420 -> Node0xa9d490;
	Node0xa9d490 -> Node0xa9d500;
	Node0xa9d500 -> Node0xa9d570;
	Node0xa9d570 -> Node0xa9d5e0;
	Node0xa9d5e0 -> Node0xa9d680;
	Node0xa9d680 -> Node0xa9d6f0;
	Node0xa9d6f0 -> Node0xa9d790;
	Node0xa9d790 -> Node0xa9d800;
	Node0xa9d800 -> Node0xa9d870;
	Node0xa9d870 -> Node0xa9d8e0;
	Node0xa9d8e0 -> Node0xa9d950;
	Node0xa9d950 -> Node0xa9d9c0;
	Node0xa9d9c0 -> Node0xa9da30;
	Node0xa9da30 -> Node0xa9daa0;
	Node0xa9daa0 -> Node0xa9db10;
	Node0xa9db10 -> Node0xa9db80;
	Node0xa9db80 -> Node0xa9dbf0;
	Node0xa9dbf0 -> Node0xa9dc60;
	Node0xa9dc60 -> Node0xa9dcd0;
	Node0xa9dcd0 -> Node0xa9dd40;
	Node0xa9dd40 -> Node0xa9dde0;
	Node0xa9dde0 -> Node0xa9de50;
	Node0xa9de50 -> Node0xa9e0d0;
	Node0xa9e0d0 -> Node0xa9e140;
	Node0xa9e140 -> Node0xa9e1b0;
	Node0xa9e1b0 -> Node0xa9e220;
	Node0xa9e220 -> Node0xa9e290;
	Node0xa9e290 -> Node0xa9e300;
	Node0xa9e300 -> Node0xa9e370;
	Node0xa9e370 -> Node0xa9e3e0;
	Node0xa9e3e0 -> Node0xa9e450;
	Node0xa9e450 -> Node0xa9e4c0;
	Node0xa9e4c0 -> Node0xa9e530;
	Node0xa9e530 -> Node0xa9e5a0;
	Node0xa9e5a0 -> Node0xa9e610;
	Node0xa9e610 -> Node0xa9e680;
	Node0xa9e680 -> Node0xa3d268;
	Node0xa3d268 -> Node0xa9eb20;
	Node0xa9eb20 -> Node0xa9eb70;
edge [color=red]
	Node0xa9d190 -> Node0xa9d200;
	Node0xa9d200 -> Node0xa9d2a0;
	Node0xa9d2a0 -> Node0xa9d340;
	Node0xa9d3b0 -> Node0xa9d420;
	Node0xa9d340 -> Node0xa9d420;
	Node0xa9d570 -> Node0xa9d5e0;
	Node0xa9d680 -> Node0xa9d6f0;
	Node0xa9d6f0 -> Node0xa9d790;
	Node0xa9d800 -> Node0xa9d870;
	Node0xa9d800 -> Node0xa9d9c0;
	Node0xa9d950 -> Node0xa9da30;
	Node0xa9d9c0 -> Node0xa9daa0;
	Node0xa9daa0 -> Node0xa9db10;
	Node0xa9d870 -> Node0xa9db80;
	Node0xa9dbf0 -> Node0xa9dc60;
	Node0xa9d200 -> Node0xa9dcd0;
	Node0xa9dcd0 -> Node0xa9dd40;
	Node0xa9da30 -> Node0xa9dd40;
	Node0xa9dd40 -> Node0xa9dde0;
	Node0xa9d500 -> Node0xa9de50;
	Node0xa9d490 -> Node0xa9de50;
	Node0xa9de50 -> Node0xa9e0d0;
	Node0xa9e140 -> Node0xa9e1b0;
	Node0xa9d5e0 -> Node0xa9e1b0;
	Node0xa9e1b0 -> Node0xa9e220;
	Node0xa9d790 -> Node0xa9e220;
	Node0xa9e220 -> Node0xa9e290;
	Node0xa9d870 -> Node0xa9e290;
	Node0xa9e290 -> Node0xa9e300;
	Node0xa9d8e0 -> Node0xa9e300;
	Node0xa9e300 -> Node0xa9e370;
	Node0xa9d950 -> Node0xa9e370;
	Node0xa9e370 -> Node0xa9e3e0;
	Node0xa9d9c0 -> Node0xa9e3e0;
	Node0xa9e3e0 -> Node0xa9e450;
	Node0xa9db80 -> Node0xa9e450;
	Node0xa9e450 -> Node0xa9e4c0;
	Node0xa9dc60 -> Node0xa9e4c0;
	Node0xa9e4c0 -> Node0xa9e530;
	Node0xa9e0d0 -> Node0xa9e530;
	Node0xa9e530 -> Node0xa9e5a0;
	Node0xa9db10 -> Node0xa9e5a0;
	Node0xa9e5a0 -> Node0xa9e610;
	Node0xa9dde0 -> Node0xa9e610;
	Node0xa9d420 -> Node0xa9e680;
	Node0xa9e610 -> Node0xa9e680;
	Node0xa9e680 -> Node0xa3d268;
	Node0xa3d268 -> Node0xa9eb20;
}
