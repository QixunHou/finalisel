digraph "DFG for'crackme' function" {
	Node0x12e95a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x12e9c50[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x12e9d10[shape=record, label="  %5 = add i32 %4, %0"];
	Node0x12e9d80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x12e9df0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x12e9e60[shape=record, label="  %8 = or i32 %7, %0"];
	Node0x12e9ed0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x12e9f40[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x12e9fb0[shape=record, label="  %11 = and i32 %7, %0"];
	Node0x12ea020[shape=record, label="  %12 = xor i32 %9, -1"];
	Node0x12ea0c0[shape=record, label="  %13 = mul i32 %12, 5"];
	Node0x12ea130[shape=record, label="  %14 = xor i32 %8, -1"];
	Node0x12ea1d0[shape=record, label="  %15 = shl i32 %11, 3"];
	Node0x12ea240[shape=record, label="  %16 = add i32 %6, %14"];
	Node0x12ea2e0[shape=record, label="  %17 = mul i32 %16, 9"];
	Node0x12ea350[shape=record, label="  %18 = add i32 %0, 3"];
	Node0x12ea3c0[shape=record, label="  %19 = sub i32 %18, %1"];
	Node0x12ea430[shape=record, label="  %20 = add i32 %19, %6"];
	Node0x12ea4a0[shape=record, label="  %21 = sub i32 %20, %8"];
	Node0x12ea510[shape=record, label="  %22 = sub i32 %21, %3"];
	Node0x12ea580[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x12ea5f0[shape=record, label="  %24 = sub i32 %23, %10"];
	Node0x12ea660[shape=record, label="  %25 = add i32 %24, %13"];
	Node0x12ea6d0[shape=record, label="  %26 = add i32 %25, %15"];
	Node0x12ea740[shape=record, label="  %27 = add i32 %26, %17"];
	Node0x12ea7b0[shape=record, label="  %28 = icmp eq i32 %5, %27"];
	Node0x128a268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x12eac50[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x12eaca0[shape=record, label="  ret void"];
	Node0x12e95a0 -> Node0x12e9c50;
	Node0x12e9c50 -> Node0x12e9d10;
	Node0x12e9d10 -> Node0x12e9d80;
	Node0x12e9d80 -> Node0x12e9df0;
	Node0x12e9df0 -> Node0x12e9e60;
	Node0x12e9e60 -> Node0x12e9ed0;
	Node0x12e9ed0 -> Node0x12e9f40;
	Node0x12e9f40 -> Node0x12e9fb0;
	Node0x12e9fb0 -> Node0x12ea020;
	Node0x12ea020 -> Node0x12ea0c0;
	Node0x12ea0c0 -> Node0x12ea130;
	Node0x12ea130 -> Node0x12ea1d0;
	Node0x12ea1d0 -> Node0x12ea240;
	Node0x12ea240 -> Node0x12ea2e0;
	Node0x12ea2e0 -> Node0x12ea350;
	Node0x12ea350 -> Node0x12ea3c0;
	Node0x12ea3c0 -> Node0x12ea430;
	Node0x12ea430 -> Node0x12ea4a0;
	Node0x12ea4a0 -> Node0x12ea510;
	Node0x12ea510 -> Node0x12ea580;
	Node0x12ea580 -> Node0x12ea5f0;
	Node0x12ea5f0 -> Node0x12ea660;
	Node0x12ea660 -> Node0x12ea6d0;
	Node0x12ea6d0 -> Node0x12ea740;
	Node0x12ea740 -> Node0x12ea7b0;
	Node0x12ea7b0 -> Node0x128a268;
	Node0x128a268 -> Node0x12eac50;
	Node0x12eac50 -> Node0x12eaca0;
edge [color=red]
	Node0x12e95a0 -> Node0x12e9c50;
	Node0x12e9c50 -> Node0x12e9d10;
	Node0x12e9df0 -> Node0x12e9e60;
	Node0x12e9ed0 -> Node0x12e9f40;
	Node0x12e9df0 -> Node0x12e9fb0;
	Node0x12e9ed0 -> Node0x12ea020;
	Node0x12ea020 -> Node0x12ea0c0;
	Node0x12e9e60 -> Node0x12ea130;
	Node0x12e9fb0 -> Node0x12ea1d0;
	Node0x12e9d80 -> Node0x12ea240;
	Node0x12ea130 -> Node0x12ea240;
	Node0x12ea240 -> Node0x12ea2e0;
	Node0x12ea350 -> Node0x12ea3c0;
	Node0x12ea3c0 -> Node0x12ea430;
	Node0x12e9d80 -> Node0x12ea430;
	Node0x12ea430 -> Node0x12ea4a0;
	Node0x12e9e60 -> Node0x12ea4a0;
	Node0x12ea4a0 -> Node0x12ea510;
	Node0x12e95a0 -> Node0x12ea510;
	Node0x12ea510 -> Node0x12ea580;
	Node0x12e9fb0 -> Node0x12ea580;
	Node0x12ea580 -> Node0x12ea5f0;
	Node0x12e9f40 -> Node0x12ea5f0;
	Node0x12ea5f0 -> Node0x12ea660;
	Node0x12ea0c0 -> Node0x12ea660;
	Node0x12ea660 -> Node0x12ea6d0;
	Node0x12ea1d0 -> Node0x12ea6d0;
	Node0x12ea6d0 -> Node0x12ea740;
	Node0x12ea2e0 -> Node0x12ea740;
	Node0x12e9d10 -> Node0x12ea7b0;
	Node0x12ea740 -> Node0x12ea7b0;
	Node0x12ea7b0 -> Node0x128a268;
	Node0x128a268 -> Node0x12eac50;
}
