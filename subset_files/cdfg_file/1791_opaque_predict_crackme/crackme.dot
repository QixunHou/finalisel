digraph "DFG for'crackme' function" {
	Node0x1872b10[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1873190[shape=record, label="  %6 = xor i32 %3, -1"];
	Node0x1873230[shape=record, label="  %7 = sub i32 -5, %5"];
	Node0x18732a0[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x1873310[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x1873380[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x18733f0[shape=record, label="  %11 = and i32 %10, %1"];
	Node0x1873460[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x18734d0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1873540[shape=record, label="  %14 = and i32 %9, %2"];
	Node0x18735b0[shape=record, label="  %15 = xor i32 %3, %0"];
	Node0x1873620[shape=record, label="  %16 = mul i32 %15, -5"];
	Node0x1873690[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x1873700[shape=record, label="  %18 = and i32 %17, %3"];
	Node0x1873770[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x1873810[shape=record, label="  %20 = shl i32 %17, 1"];
	Node0x1873880[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x18738f0[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x1873990[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x1873a00[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x1873aa0[shape=record, label="  %25 = shl i32 %24, 3"];
	Node0x1873b40[shape=record, label="  %26 = xor i32 %25, -8"];
	Node0x1873bb0[shape=record, label="  %27 = and i32 %6, %0"];
	Node0x1873c50[shape=record, label="  %28 = mul i32 %27, 11"];
	Node0x1873cf0[shape=record, label="  %29 = mul i32 %18, 12"];
	Node0x1873d60[shape=record, label="  %30 = shl i32 %2, 1"];
	Node0x1873dd0[shape=record, label="  %31 = sub i32 %11, %20"];
	Node0x1873e40[shape=record, label="  %32 = sub i32 %31, %12"];
	Node0x18740c0[shape=record, label="  %33 = add i32 %32, %13"];
	Node0x1874130[shape=record, label="  %34 = sub i32 %33, %14"];
	Node0x18741a0[shape=record, label="  %35 = add i32 %34, %3"];
	Node0x1874210[shape=record, label="  %36 = add i32 %35, %30"];
	Node0x1874280[shape=record, label="  %37 = add i32 %36, %19"];
	Node0x18742f0[shape=record, label="  %38 = add i32 %37, %16"];
	Node0x1874360[shape=record, label="  %39 = add i32 %38, %28"];
	Node0x18743d0[shape=record, label="  %40 = add i32 %39, %29"];
	Node0x1874440[shape=record, label="  %41 = add i32 %40, %22"];
	Node0x18744b0[shape=record, label="  %42 = sub i32 %41, %23"];
	Node0x1874520[shape=record, label="  %43 = add i32 %42, %26"];
	Node0x1874590[shape=record, label="  %44 = icmp eq i32 %8, %43"];
	Node0x1813268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1874a30[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x1874a80[shape=record, label="  ret void"];
	Node0x1872b10 -> Node0x1873190;
	Node0x1873190 -> Node0x1873230;
	Node0x1873230 -> Node0x18732a0;
	Node0x18732a0 -> Node0x1873310;
	Node0x1873310 -> Node0x1873380;
	Node0x1873380 -> Node0x18733f0;
	Node0x18733f0 -> Node0x1873460;
	Node0x1873460 -> Node0x18734d0;
	Node0x18734d0 -> Node0x1873540;
	Node0x1873540 -> Node0x18735b0;
	Node0x18735b0 -> Node0x1873620;
	Node0x1873620 -> Node0x1873690;
	Node0x1873690 -> Node0x1873700;
	Node0x1873700 -> Node0x1873770;
	Node0x1873770 -> Node0x1873810;
	Node0x1873810 -> Node0x1873880;
	Node0x1873880 -> Node0x18738f0;
	Node0x18738f0 -> Node0x1873990;
	Node0x1873990 -> Node0x1873a00;
	Node0x1873a00 -> Node0x1873aa0;
	Node0x1873aa0 -> Node0x1873b40;
	Node0x1873b40 -> Node0x1873bb0;
	Node0x1873bb0 -> Node0x1873c50;
	Node0x1873c50 -> Node0x1873cf0;
	Node0x1873cf0 -> Node0x1873d60;
	Node0x1873d60 -> Node0x1873dd0;
	Node0x1873dd0 -> Node0x1873e40;
	Node0x1873e40 -> Node0x18740c0;
	Node0x18740c0 -> Node0x1874130;
	Node0x1874130 -> Node0x18741a0;
	Node0x18741a0 -> Node0x1874210;
	Node0x1874210 -> Node0x1874280;
	Node0x1874280 -> Node0x18742f0;
	Node0x18742f0 -> Node0x1874360;
	Node0x1874360 -> Node0x18743d0;
	Node0x18743d0 -> Node0x1874440;
	Node0x1874440 -> Node0x18744b0;
	Node0x18744b0 -> Node0x1874520;
	Node0x1874520 -> Node0x1874590;
	Node0x1874590 -> Node0x1813268;
	Node0x1813268 -> Node0x1874a30;
	Node0x1874a30 -> Node0x1874a80;
edge [color=red]
	Node0x1872b10 -> Node0x1873230;
	Node0x1873230 -> Node0x18732a0;
	Node0x1873190 -> Node0x18732a0;
	Node0x1873380 -> Node0x18733f0;
	Node0x1873460 -> Node0x18734d0;
	Node0x1873310 -> Node0x1873540;
	Node0x18735b0 -> Node0x1873620;
	Node0x1873690 -> Node0x1873700;
	Node0x1873700 -> Node0x1873770;
	Node0x1873690 -> Node0x1873810;
	Node0x1873880 -> Node0x18738f0;
	Node0x18738f0 -> Node0x1873990;
	Node0x1873a00 -> Node0x1873aa0;
	Node0x1873aa0 -> Node0x1873b40;
	Node0x1873190 -> Node0x1873bb0;
	Node0x1873bb0 -> Node0x1873c50;
	Node0x1873700 -> Node0x1873cf0;
	Node0x18733f0 -> Node0x1873dd0;
	Node0x1873810 -> Node0x1873dd0;
	Node0x1873dd0 -> Node0x1873e40;
	Node0x1873460 -> Node0x1873e40;
	Node0x1873e40 -> Node0x18740c0;
	Node0x18734d0 -> Node0x18740c0;
	Node0x18740c0 -> Node0x1874130;
	Node0x1873540 -> Node0x1874130;
	Node0x1874130 -> Node0x18741a0;
	Node0x18741a0 -> Node0x1874210;
	Node0x1873d60 -> Node0x1874210;
	Node0x1874210 -> Node0x1874280;
	Node0x1873770 -> Node0x1874280;
	Node0x1874280 -> Node0x18742f0;
	Node0x1873620 -> Node0x18742f0;
	Node0x18742f0 -> Node0x1874360;
	Node0x1873c50 -> Node0x1874360;
	Node0x1874360 -> Node0x18743d0;
	Node0x1873cf0 -> Node0x18743d0;
	Node0x18743d0 -> Node0x1874440;
	Node0x18738f0 -> Node0x1874440;
	Node0x1874440 -> Node0x18744b0;
	Node0x1873990 -> Node0x18744b0;
	Node0x18744b0 -> Node0x1874520;
	Node0x1873b40 -> Node0x1874520;
	Node0x18732a0 -> Node0x1874590;
	Node0x1874520 -> Node0x1874590;
	Node0x1874590 -> Node0x1813268;
	Node0x1813268 -> Node0x1874a30;
}
