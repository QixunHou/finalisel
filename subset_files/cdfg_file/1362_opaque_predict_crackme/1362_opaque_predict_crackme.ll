; ModuleID = '../.././c_source_file/1362_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1362_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = and i32 %2, %0
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %7, %10
  %12 = sub i32 1, %11
  %13 = add i32 %12, %6
  %14 = xor i32 %3, -1
  %15 = xor i32 %4, -1
  %16 = and i32 %15, %3
  %17 = add i32 %4, 1
  %18 = or i32 %4, %3
  %19 = or i32 %15, %3
  %20 = shl i32 %18, 2
  %21 = xor i32 %20, -4
  %22 = xor i32 %19, -1
  %23 = mul i32 %22, -7
  %24 = and i32 %4, %3
  %25 = or i32 %7, %1
  %26 = xor i32 %1, -1
  %27 = and i32 %26, %0
  %28 = xor i32 %2, %0
  %29 = or i32 %28, %27
  %30 = shl i32 %29, 1
  %31 = xor i32 %2, %1
  %32 = xor i32 %31, %0
  %33 = or i32 %26, %0
  %34 = xor i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %28, -1
  %37 = or i32 %36, %35
  %38 = and i32 %8, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %39, %35
  %41 = and i32 %26, %2
  %42 = and i32 %41, %0
  %43 = or i32 %26, %2
  %44 = xor i32 %43, %0
  %45 = or i32 %42, %44
  %46 = and i32 %1, %0
  %47 = or i32 %31, %46
  %48 = or i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %46, %49
  %51 = shl i32 %50, 1
  %52 = or i32 %8, %0
  %53 = and i32 %52, %34
  %54 = or i32 %38, %34
  %55 = xor i32 %32, -1
  %56 = xor i32 %42, %55
  %57 = xor i32 %0, -1
  %58 = and i32 %2, %1
  %59 = and i32 %58, %57
  %60 = and i32 %31, %0
  %61 = or i32 %59, %60
  %62 = and i32 %34, %36
  %63 = or i32 %31, %27
  %64 = or i32 %8, %1
  %65 = xor i32 %64, %0
  %66 = or i32 %9, %57
  %67 = xor i32 %60, -1
  %68 = xor i32 %59, %67
  %69 = xor i32 %33, %2
  %70 = or i32 %1, %0
  %71 = and i32 %28, %70
  %72 = or i32 %64, %57
  %73 = shl i32 %72, 1
  %74 = xor i32 %52, %46
  %75 = or i32 %7, %26
  %76 = xor i32 %7, -1
  %77 = and i32 %76, %35
  %78 = or i32 %2, %1
  %79 = xor i32 %78, -1
  %80 = or i32 %79, %57
  %81 = xor i32 %31, -1
  %82 = xor i32 %81, %0
  %83 = and i32 %78, %0
  %84 = shl i32 %83, 1
  %85 = or i32 %28, %26
  %86 = or i32 %35, %2
  %87 = and i32 %70, %8
  %88 = and i32 %48, %35
  %89 = and i32 %58, %0
  %90 = and i32 %31, %57
  %91 = or i32 %89, %90
  %92 = and i32 %78, %57
  %93 = or i32 %89, %92
  %94 = xor i32 %46, -1
  %95 = and i32 %39, %26
  %96 = shl i32 %95, 1
  %97 = xor i32 %70, -1
  %98 = or i32 %81, %97
  %99 = and i32 %28, %1
  %100 = or i32 %78, %57
  %101 = or i32 %27, %36
  %102 = and i32 %41, %57
  %103 = or i32 %31, %57
  %104 = xor i32 %102, %103
  %105 = xor i32 %27, -1
  %106 = and i32 %28, %105
  %107 = xor i32 %89, -1
  %108 = xor i32 %92, %107
  %109 = or i32 %27, %81
  %110 = and i32 %34, %76
  %111 = xor i32 %49, %1
  %112 = or i32 %58, %27
  %113 = or i32 %36, %1
  %114 = or i32 %38, %26
  %115 = shl i32 %114, 1
  %116 = xor i32 %64, -1
  %117 = and i32 %94, %2
  %118 = xor i32 %52, -1
  %119 = or i32 %34, %118
  %120 = or i32 %34, %8
  %121 = or i32 %38, %1
  %122 = xor i32 %58, %0
  %123 = or i32 %58, %0
  %124 = shl i32 %123, 1
  %125 = or i32 %7, %9
  %126 = xor i32 %33, -1
  %127 = or i32 %126, %2
  %128 = xor i32 %58, -1
  %129 = or i32 %128, %57
  %130 = and i32 %34, %39
  %131 = or i32 %34, %36
  %132 = or i32 %31, %97
  %133 = and i32 %31, %33
  %134 = or i32 %28, %34
  %135 = or i32 %89, %55
  %136 = or i32 %46, %79
  %137 = xor i32 %46, %2
  %138 = or i32 %116, %57
  %139 = xor i32 %38, %128
  %140 = xor i32 %76, %1
  %141 = or i32 %31, %0
  %142 = and i32 %8, %94
  %143 = xor i32 %38, %64
  %144 = and i32 %70, %36
  %145 = shl i32 %8, 1
  %146 = and i32 %64, %57
  %147 = and i32 %70, %2
  %148 = shl i32 %147, 1
  %149 = xor i32 %118, %1
  %150 = shl i32 %149, 1
  %151 = and i32 %28, %34
  %152 = or i32 %10, %0
  %153 = and i32 %48, %34
  %154 = xor i32 %97, %2
  %155 = or i32 %116, %0
  %156 = xor i32 %7, %78
  %157 = or i32 %78, %0
  %158 = or i32 %46, %8
  %159 = or i32 %7, %97
  %160 = or i32 %9, %0
  %161 = and i32 %105, %2
  %162 = or i32 %46, %118
  %163 = xor i32 %103, -1
  %164 = or i32 %102, %163
  %165 = and i32 %8, %105
  %166 = xor i32 %78, %57
  %167 = xor i32 %166, %89
  %168 = and i32 %52, %26
  %169 = shl i32 %168, 1
  %170 = shl i32 %118, 1
  %171 = and i32 %43, %57
  %172 = or i32 %42, %171
  %173 = or i32 %49, %1
  %174 = or i32 %118, %26
  %175 = and i32 %31, %105
  %176 = and i32 %35, %2
  %177 = xor i32 %27, %2
  %178 = shl i32 %177, 1
  %179 = or i32 %38, %116
  %180 = or i32 %38, %58
  %181 = and i32 %36, %35
  %182 = or i32 %38, %35
  %183 = and i32 %36, %105
  %184 = xor i32 %7, %70
  %185 = or i32 %58, %57
  %186 = xor i32 %52, %1
  %187 = and i32 %8, %35
  %188 = or i32 %46, %81
  %189 = and i32 %31, %70
  %190 = xor i32 %38, %1
  %191 = shl i32 %190, 1
  %192 = or i32 %7, %79
  %193 = or i32 %7, %126
  %194 = or i32 %27, %2
  %195 = shl i32 %194, 1
  %196 = and i32 %36, %94
  %197 = or i32 %28, %126
  %198 = or i32 %28, %1
  %199 = xor i32 %27, %10
  %200 = or i32 %81, %0
  %201 = xor i32 %48, %46
  %202 = shl i32 %9, 1
  %203 = or i32 %7, %34
  %204 = and i32 %81, %105
  %205 = and i32 %31, %94
  %206 = shl i32 %79, 1
  %207 = and i32 %128, %0
  %208 = xor i32 %10, %0
  %209 = and i32 %34, %2
  %210 = and i32 %64, %0
  %211 = shl i32 %210, 1
  %212 = or i32 %64, %0
  %213 = and i32 %43, %0
  %214 = xor i32 %213, 2147483647
  %215 = xor i32 %214, %102
  %216 = or i32 %28, %97
  %217 = or i32 %59, %83
  %218 = shl i32 %217, 1
  %219 = or i32 %46, %116
  %220 = and i32 %128, %57
  %221 = xor i32 %126, %2
  %222 = and i32 %10, %57
  %223 = xor i32 %7, %1
  %224 = and i32 %34, %8
  %225 = xor i32 %70, %2
  %226 = shl i32 %225, 1
  %227 = or i32 %7, %35
  %228 = shl i32 %227, 1
  %229 = and i32 %33, %8
  %230 = and i32 %36, %26
  %231 = xor i32 %79, %0
  %232 = shl i32 %231, 2
  %233 = or i32 %34, %49
  %234 = xor i32 %78, %46
  %235 = or i32 %81, %126
  %236 = shl i32 %235, 2
  %237 = and i32 %33, %36
  %238 = and i32 %28, %94
  %239 = or i32 %102, %213
  %240 = xor i32 %39, %1
  %241 = xor i32 %42, %141
  %242 = or i32 %42, %32
  %243 = or i32 %49, %35
  %244 = shl i32 %243, 1
  %245 = and i32 %79, %57
  %246 = and i32 %9, %57
  %247 = and i32 %79, %0
  %248 = and i32 %9, %0
  %249 = and i32 %116, %57
  %250 = mul i32 %249, -13
  %251 = mul i32 %59, -19
  %252 = add i32 %229, %35
  %253 = add i32 %252, %36
  %254 = add i32 %253, %161
  %255 = add i32 %254, %116
  %256 = add i32 %255, %89
  %257 = add i32 %256, %237
  %258 = add i32 %257, %223
  %259 = add i32 %258, %90
  %260 = add i32 %259, %92
  %261 = add i32 %260, %183
  %262 = add i32 %261, %180
  %263 = add i32 %262, %155
  %264 = add i32 %263, %132
  %265 = add i32 %264, %111
  %266 = add i32 %265, %75
  %267 = add i32 %266, %93
  %268 = add i32 %267, %215
  %269 = shl i32 %268, 1
  %270 = sub i32 %247, %136
  %271 = add i32 %270, %131
  %272 = sub i32 %271, %24
  %273 = mul i32 %272, 5
  %274 = add i32 %246, %245
  %275 = mul i32 %274, -10
  %276 = add i32 %86, %72
  %277 = add i32 %276, %248
  %278 = sub i32 %277, %196
  %279 = add i32 %278, %47
  %280 = sub i32 %279, %16
  %281 = add i32 %280, %56
  %282 = mul i32 %281, 3
  %283 = add i32 %0, -3
  %284 = sub i32 %283, %46
  %285 = add i32 %284, %2
  %286 = sub i32 %285, %46
  %287 = add i32 %286, %14
  %288 = add i32 %287, %69
  %289 = sub i32 %288, %87
  %290 = sub i32 %289, %117
  %291 = sub i32 %290, %52
  %292 = sub i32 %291, %120
  %293 = sub i32 %292, %58
  %294 = add i32 %293, %127
  %295 = add i32 %294, %76
  %296 = add i32 %295, %48
  %297 = add i32 %296, %137
  %298 = add i32 %297, %142
  %299 = sub i32 %298, %145
  %300 = sub i32 %299, %154
  %301 = sub i32 %300, %158
  %302 = add i32 %301, %165
  %303 = sub i32 %302, %176
  %304 = sub i32 %303, %187
  %305 = add i32 %304, %28
  %306 = add i32 %305, %64
  %307 = sub i32 %306, %209
  %308 = add i32 %307, %221
  %309 = sub i32 %308, %224
  %310 = sub i32 %309, %7
  %311 = add i32 %310, %10
  %312 = add i32 %311, %128
  %313 = add i32 %312, %17
  %314 = sub i32 %313, %25
  %315 = sub i32 %314, %32
  %316 = add i32 %315, %37
  %317 = add i32 %316, %40
  %318 = add i32 %317, %53
  %319 = sub i32 %318, %54
  %320 = sub i32 %319, %62
  %321 = add i32 %320, %63
  %322 = add i32 %321, %65
  %323 = add i32 %322, %66
  %324 = add i32 %323, %71
  %325 = add i32 %324, %74
  %326 = add i32 %325, %77
  %327 = sub i32 %326, %80
  %328 = add i32 %327, %82
  %329 = sub i32 %328, %85
  %330 = add i32 %329, %88
  %331 = sub i32 %330, %98
  %332 = add i32 %331, %99
  %333 = sub i32 %332, %100
  %334 = add i32 %333, %101
  %335 = add i32 %334, %106
  %336 = add i32 %335, %109
  %337 = sub i32 %336, %110
  %338 = add i32 %337, %112
  %339 = sub i32 %338, %113
  %340 = sub i32 %339, %119
  %341 = add i32 %340, %121
  %342 = add i32 %341, %122
  %343 = sub i32 %342, %125
  %344 = sub i32 %343, %129
  %345 = sub i32 %344, %130
  %346 = add i32 %345, %133
  %347 = add i32 %346, %134
  %348 = add i32 %347, %138
  %349 = sub i32 %348, %139
  %350 = sub i32 %349, %140
  %351 = add i32 %350, %141
  %352 = sub i32 %351, %143
  %353 = sub i32 %352, %144
  %354 = add i32 %353, %146
  %355 = sub i32 %354, %148
  %356 = sub i32 %355, %151
  %357 = add i32 %356, %152
  %358 = add i32 %357, %153
  %359 = add i32 %358, %156
  %360 = sub i32 %359, %157
  %361 = sub i32 %360, %159
  %362 = add i32 %361, %160
  %363 = add i32 %362, %162
  %364 = sub i32 %363, %170
  %365 = sub i32 %364, %173
  %366 = sub i32 %365, %174
  %367 = sub i32 %366, %175
  %368 = sub i32 %367, %178
  %369 = add i32 %368, %179
  %370 = add i32 %369, %181
  %371 = sub i32 %370, %182
  %372 = sub i32 %371, %184
  %373 = add i32 %372, %185
  %374 = add i32 %373, %186
  %375 = sub i32 %374, %188
  %376 = sub i32 %375, %189
  %377 = add i32 %376, %192
  %378 = sub i32 %377, %193
  %379 = sub i32 %378, %195
  %380 = sub i32 %379, %197
  %381 = add i32 %380, %198
  %382 = sub i32 %381, %199
  %383 = sub i32 %382, %200
  %384 = sub i32 %383, %201
  %385 = sub i32 %384, %202
  %386 = add i32 %385, %203
  %387 = add i32 %386, %204
  %388 = add i32 %387, %205
  %389 = sub i32 %388, %206
  %390 = add i32 %389, %207
  %391 = add i32 %390, %208
  %392 = sub i32 %391, %212
  %393 = sub i32 %392, %216
  %394 = add i32 %393, %219
  %395 = add i32 %394, %220
  %396 = add i32 %395, %222
  %397 = sub i32 %396, %226
  %398 = sub i32 %397, %230
  %399 = add i32 %398, %233
  %400 = sub i32 %399, %234
  %401 = add i32 %400, %238
  %402 = sub i32 %401, %240
  %403 = sub i32 %402, %16
  %404 = add i32 %403, %6
  %405 = add i32 %404, %18
  %406 = sub i32 %405, %19
  %407 = sub i32 %406, %30
  %408 = add i32 %407, %45
  %409 = sub i32 %408, %51
  %410 = add i32 %409, %61
  %411 = add i32 %410, %68
  %412 = sub i32 %411, %73
  %413 = sub i32 %412, %84
  %414 = add i32 %413, %91
  %415 = sub i32 %414, %96
  %416 = add i32 %415, %104
  %417 = add i32 %416, %108
  %418 = sub i32 %417, %115
  %419 = sub i32 %418, %124
  %420 = sub i32 %419, %135
  %421 = sub i32 %420, %150
  %422 = sub i32 %421, %164
  %423 = sub i32 %422, %167
  %424 = sub i32 %423, %169
  %425 = sub i32 %424, %172
  %426 = sub i32 %425, %191
  %427 = sub i32 %426, %211
  %428 = sub i32 %427, %228
  %429 = sub i32 %428, %232
  %430 = add i32 %429, %236
  %431 = sub i32 %430, %239
  %432 = sub i32 %431, %241
  %433 = sub i32 %432, %242
  %434 = sub i32 %433, %244
  %435 = add i32 %434, %250
  %436 = add i32 %435, %251
  %437 = add i32 %436, %23
  %438 = sub i32 %437, %218
  %439 = add i32 %438, %275
  %440 = sub i32 %439, %21
  %441 = add i32 %440, %273
  %442 = add i32 %441, %282
  %443 = add i32 %442, %269
  %444 = icmp eq i32 %13, %443
  %445 = select i1 %444, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %446 = tail call i32 @puts(i8* nonnull dereferenceable(1) %445)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
