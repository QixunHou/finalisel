; ModuleID = '../.././c_source_file/1668_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1668_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = and i32 %9, %7
  %11 = xor i32 %5, -1
  %12 = xor i32 %3, -1
  %13 = and i32 %12, %4
  %14 = or i32 %13, %11
  %15 = sub i32 %14, %10
  %16 = xor i32 %13, -1
  %17 = xor i32 %16, %5
  %18 = sub i32 %15, %17
  %19 = and i32 %8, %0
  %20 = xor i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %0
  %23 = xor i32 %19, %22
  %24 = xor i32 %1, -1
  %25 = or i32 %24, %0
  %26 = and i32 %25, %21
  %27 = and i32 %2, %0
  %28 = or i32 %27, %1
  %29 = xor i32 %8, %0
  %30 = or i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = xor i32 %1, %0
  %33 = or i32 %32, %31
  %34 = xor i32 %2, %0
  %35 = or i32 %34, %24
  %36 = xor i32 %2, -1
  %37 = and i32 %36, %1
  %38 = and i32 %36, %0
  %39 = or i32 %36, %1
  %40 = xor i32 %38, %39
  %41 = and i32 %24, %0
  %42 = or i32 %20, %41
  %43 = or i32 %21, %7
  %44 = or i32 %20, %7
  %45 = xor i32 %41, -1
  %46 = and i32 %45, %2
  %47 = and i32 %1, %0
  %48 = xor i32 %47, -1
  %49 = xor i32 %48, %2
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %34, -1
  %53 = or i32 %52, %51
  %54 = and i32 %21, %0
  %55 = and i32 %24, %2
  %56 = and i32 %55, %0
  %57 = or i32 %24, %2
  %58 = xor i32 %57, %0
  %59 = or i32 %56, %58
  %60 = xor i32 %32, -1
  %61 = and i32 %52, %60
  %62 = or i32 %41, %36
  %63 = and i32 %52, %48
  %64 = xor i32 %38, 2147483647
  %65 = and i32 %64, %24
  %66 = and i32 %20, %50
  %67 = and i32 %55, %7
  %68 = xor i32 %44, -1
  %69 = or i32 %67, %68
  %70 = xor i32 %37, -1
  %71 = or i32 %70, %0
  %72 = or i32 %2, %1
  %73 = xor i32 %72, -1
  %74 = and i32 %73, %7
  %75 = shl i32 %74, 1
  %76 = and i32 %37, %7
  %77 = and i32 %73, %0
  %78 = xor i32 %39, -1
  %79 = and i32 %78, %7
  %80 = and i32 %8, %7
  %81 = and i32 %78, %0
  %82 = and i32 %5, %4
  %83 = or i32 %11, %4
  %84 = xor i32 %83, -1
  %85 = or i32 %84, %12
  %86 = xor i32 %5, %4
  %87 = and i32 %86, %12
  %88 = or i32 %4, %3
  %89 = and i32 %88, %11
  %90 = and i32 %5, %3
  %91 = and i32 %90, %4
  %92 = xor i32 %4, -1
  %93 = or i32 %5, %3
  %94 = and i32 %93, %92
  %95 = or i32 %91, %94
  %96 = xor i32 %93, -1
  %97 = or i32 %96, %92
  %98 = shl i32 %97, 1
  %99 = or i32 %11, %3
  %100 = or i32 %99, %4
  %101 = xor i32 %5, %3
  %102 = and i32 %101, %92
  %103 = xor i32 %91, -1
  %104 = xor i32 %102, %103
  %105 = and i32 %11, %3
  %106 = xor i32 %105, -1
  %107 = or i32 %106, %4
  %108 = or i32 %105, %13
  %109 = or i32 %5, %4
  %110 = and i32 %109, %12
  %111 = and i32 %4, %3
  %112 = xor i32 %90, -1
  %113 = and i32 %112, %92
  %114 = xor i32 %88, -1
  %115 = or i32 %86, %114
  %116 = or i32 %105, %92
  %117 = xor i32 %4, %3
  %118 = xor i32 %117, -1
  %119 = xor i32 %86, -1
  %120 = or i32 %119, %118
  %121 = xor i32 %93, %4
  %122 = xor i32 %121, %103
  %123 = xor i32 %82, -1
  %124 = and i32 %123, %118
  %125 = and i32 %86, %118
  %126 = and i32 %11, %4
  %127 = or i32 %126, %117
  %128 = or i32 %86, %12
  %129 = and i32 %99, %92
  %130 = xor i32 %105, %4
  %131 = or i32 %13, %5
  %132 = add i32 %88, 1
  %133 = and i32 %123, %12
  %134 = or i32 %99, %92
  %135 = and i32 %83, %3
  %136 = xor i32 %99, -1
  %137 = or i32 %136, %92
  %138 = or i32 %119, %114
  %139 = xor i32 %136, %4
  %140 = and i32 %90, %92
  %141 = and i32 %101, %4
  %142 = or i32 %140, %141
  %143 = and i32 %12, %5
  %144 = and i32 %143, %4
  %145 = xor i32 %101, %4
  %146 = xor i32 %145, -1
  %147 = xor i32 %144, %146
  %148 = shl i32 %147, 1
  %149 = xor i32 %109, -1
  %150 = or i32 %149, %118
  %151 = xor i32 %90, %4
  %152 = or i32 %12, %4
  %153 = xor i32 %152, -1
  %154 = or i32 %82, %153
  %155 = xor i32 %153, %5
  %156 = and i32 %106, %4
  %157 = and i32 %88, %5
  %158 = xor i32 %112, %4
  %159 = shl i32 %158, 1
  %160 = xor i32 %149, %3
  %161 = xor i32 %111, %5
  %162 = or i32 %101, %13
  %163 = and i32 %109, %118
  %164 = or i32 %12, %5
  %165 = and i32 %164, %92
  %166 = xor i32 %165, -1
  %167 = xor i32 %144, %166
  %168 = xor i32 %99, %4
  %169 = and i32 %101, %16
  %170 = or i32 %111, %136
  %171 = xor i32 %82, %88
  %172 = and i32 %117, %123
  %173 = xor i32 %126, -1
  %174 = and i32 %173, %118
  %175 = xor i32 %111, -1
  %176 = and i32 %11, %175
  %177 = shl i32 %176, 1
  %178 = or i32 %91, %146
  %179 = or i32 %101, %4
  %180 = xor i32 %83, %3
  %181 = xor i32 %101, -1
  %182 = or i32 %181, %114
  %183 = or i32 %101, %92
  %184 = shl i32 %183, 1
  %185 = shl i32 %5, 1
  %186 = xor i32 %106, %4
  %187 = and i32 %173, %12
  %188 = xor i32 %99, %111
  %189 = and i32 %123, %3
  %190 = xor i32 %114, %5
  %191 = add i32 %101, 1
  %192 = shl i32 %3, 1
  %193 = or i32 %101, %111
  %194 = and i32 %86, %152
  %195 = shl i32 %194, 1
  %196 = xor i32 %84, %3
  %197 = or i32 %181, %92
  %198 = xor i32 %109, %111
  %199 = and i32 %101, %175
  %200 = xor i32 %96, %4
  %201 = shl i32 %200, 2
  %202 = and i32 %93, %4
  %203 = and i32 %119, %16
  %204 = or i32 %181, %4
  %205 = or i32 %111, %149
  %206 = shl i32 %205, 1
  %207 = or i32 %86, %3
  %208 = or i32 %181, %153
  %209 = and i32 %118, %5
  %210 = shl i32 %209, 1
  %211 = and i32 %88, %119
  %212 = shl i32 %83, 1
  %213 = or i32 %82, %117
  %214 = shl i32 %213, 1
  %215 = or i32 %86, %118
  %216 = or i32 %119, %153
  %217 = xor i32 %4, 2147483647
  %218 = xor i32 %217, %164
  %219 = xor i32 %218, %144
  %220 = shl i32 %219, 1
  %221 = and i32 %173, %3
  %222 = and i32 %86, %117
  %223 = or i32 %91, %102
  %224 = or i32 %117, %84
  %225 = or i32 %105, %4
  %226 = xor i32 %144, %179
  %227 = or i32 %101, %153
  %228 = or i32 %86, %117
  %229 = and i32 %88, %181
  %230 = or i32 %82, %118
  %231 = and i32 %106, %92
  %232 = and i32 %101, %88
  %233 = or i32 %90, %92
  %234 = or i32 %13, %119
  %235 = or i32 %106, %92
  %236 = or i32 %11, %153
  %237 = or i32 %82, %12
  %238 = and i32 %143, %92
  %239 = xor i32 %183, -1
  %240 = or i32 %238, %239
  %241 = and i32 %152, %181
  %242 = xor i32 %140, -1
  %243 = xor i32 %202, %242
  %244 = and i32 %117, %11
  %245 = and i32 %101, %152
  %246 = and i32 %119, %175
  %247 = and i32 %86, %175
  %248 = or i32 %112, %92
  %249 = or i32 %126, %12
  %250 = or i32 %136, %4
  %251 = or i32 %84, %118
  %252 = or i32 %90, %13
  %253 = or i32 %101, %114
  %254 = or i32 %119, %3
  %255 = and i32 %86, %88
  %256 = and i32 %99, %4
  %257 = or i32 %93, %4
  %258 = shl i32 %257, 1
  %259 = shl i32 %92, 1
  %260 = or i32 %91, %121
  %261 = or i32 %153, %5
  %262 = and i32 %11, %16
  %263 = add i32 %99, 1
  %264 = and i32 %164, %4
  %265 = xor i32 %264, -1
  %266 = xor i32 %238, %265
  %267 = and i32 %83, %118
  %268 = or i32 %11, %118
  %269 = and i32 %86, %3
  %270 = or i32 %118, %5
  %271 = and i32 %181, %175
  %272 = or i32 %144, %165
  %273 = xor i32 %173, %3
  %274 = shl i32 %273, 1
  %275 = and i32 %117, %5
  %276 = shl i32 %106, 1
  %277 = or i32 %119, %12
  %278 = and i32 %175, %5
  %279 = xor i32 %88, %5
  %280 = and i32 %152, %11
  %281 = xor i32 %93, %111
  %282 = or i32 %238, %264
  %283 = xor i32 %83, %111
  %284 = or i32 %86, %111
  %285 = and i32 %119, %12
  %286 = or i32 %149, %3
  %287 = shl i32 %4, 1
  %288 = xor i32 %175, %5
  %289 = and i32 %117, %119
  %290 = or i32 %82, %3
  %291 = xor i32 %13, %106
  %292 = and i32 %109, %117
  %293 = or i32 %82, %105
  %294 = xor i32 %91, %145
  %295 = and i32 %83, %12
  %296 = or i32 %86, %13
  %297 = and i32 %11, %118
  %298 = or i32 %112, %4
  %299 = or i32 %82, %96
  %300 = and i32 %109, %3
  %301 = and i32 %16, %5
  %302 = shl i32 %117, 1
  %303 = or i32 %111, %84
  %304 = or i32 %96, %4
  %305 = or i32 %140, %202
  %306 = xor i32 %141, %242
  %307 = and i32 %152, %5
  %308 = xor i32 %82, %93
  %309 = or i32 %111, %5
  %310 = or i32 %126, %118
  %311 = shl i32 %310, 1
  %312 = or i32 %126, %136
  %313 = or i32 %126, %90
  %314 = or i32 %111, %119
  %315 = and i32 %119, %118
  %316 = and i32 %181, %4
  %317 = or i32 %114, %5
  %318 = xor i32 %179, -1
  %319 = or i32 %144, %318
  %320 = or i32 %117, %11
  %321 = or i32 %84, %3
  %322 = and i32 %181, %16
  %323 = xor i32 %13, %112
  %324 = xor i32 %82, %3
  %325 = and i32 %152, %119
  %326 = or i32 %111, %96
  %327 = and i32 %112, %4
  %328 = xor i32 %126, %99
  %329 = xor i32 %126, %3
  %330 = or i32 %111, %181
  %331 = xor i32 %13, %5
  %332 = or i32 %11, %114
  %333 = shl i32 %332, 1
  %334 = xor i32 %109, %3
  %335 = shl i32 %88, 1
  %336 = xor i32 %181, %4
  %337 = xor i32 %82, %106
  %338 = shl i32 %337, 1
  %339 = and i32 %117, %173
  %340 = or i32 %111, %11
  %341 = or i32 %86, %153
  %342 = or i32 %144, %145
  %343 = add i32 %117, 1
  %344 = and i32 %119, %3
  %345 = xor i32 %126, %112
  %346 = or i32 %93, %92
  %347 = or i32 %117, %119
  %348 = add i32 %5, 1
  %349 = and i32 %181, %92
  %350 = or i32 %13, %181
  %351 = shl i32 %84, 1
  %352 = xor i32 %94, %103
  %353 = or i32 %117, %5
  %354 = shl i32 %353, 1
  %355 = and i32 %96, %92
  %356 = mul i32 %355, -12
  %357 = and i32 %105, %92
  %358 = and i32 %96, %4
  %359 = mul i32 %358, -15
  %360 = and i32 %105, %4
  %361 = mul i32 %360, -13
  %362 = and i32 %136, %92
  %363 = shl i32 %362, 3
  %364 = and i32 %136, %4
  %365 = shl i32 %364, 2
  %366 = add i32 %43, %19
  %367 = add i32 %366, %29
  %368 = sub i32 %279, %367
  %369 = sub i32 %368, %350
  %370 = sub i32 %369, %357
  %371 = sub i32 %370, %325
  %372 = sub i32 %371, %230
  %373 = add i32 %372, %100
  %374 = mul i32 %373, 5
  %375 = sub i32 %81, %33
  %376 = sub i32 %375, %227
  %377 = add i32 %376, %304
  %378 = add i32 %377, %170
  %379 = add i32 %378, %85
  %380 = mul i32 %379, 3
  %381 = add i32 %320, %307
  %382 = shl i32 %381, 2
  %383 = sub i32 %80, %140
  %384 = mul i32 %383, 9
  %385 = sub i32 %77, %91
  %386 = mul i32 %385, 7
  %387 = add i32 %1, -1
  %388 = add i32 %387, %50
  %389 = add i32 %388, %40
  %390 = add i32 %389, %26
  %391 = add i32 %390, %65
  %392 = sub i32 %391, %23
  %393 = add i32 %392, %112
  %394 = add i32 %393, %331
  %395 = add i32 %394, %86
  %396 = add i32 %395, %297
  %397 = add i32 %396, %288
  %398 = add i32 %397, %157
  %399 = add i32 %398, %349
  %400 = add i32 %399, %345
  %401 = add i32 %400, %334
  %402 = add i32 %401, %328
  %403 = add i32 %402, %323
  %404 = add i32 %403, %322
  %405 = add i32 %404, %321
  %406 = add i32 %405, %315
  %407 = add i32 %406, %284
  %408 = add i32 %407, %232
  %409 = add i32 %408, %221
  %410 = add i32 %409, %204
  %411 = add i32 %410, %188
  %412 = add i32 %411, %186
  %413 = add i32 %412, %174
  %414 = add i32 %413, %135
  %415 = add i32 %414, %128
  %416 = add i32 %415, %127
  %417 = add i32 %416, %282
  %418 = add i32 %417, %305
  %419 = shl i32 %418, 1
  %420 = sub i32 3, %1
  %421 = sub i32 %420, %8
  %422 = add i32 %421, %37
  %423 = sub i32 %422, %38
  %424 = sub i32 %423, %46
  %425 = add i32 %424, %39
  %426 = add i32 %425, %49
  %427 = sub i32 %426, %62
  %428 = add i32 %427, %12
  %429 = sub i32 %428, %28
  %430 = add i32 %429, %35
  %431 = add i32 %430, %42
  %432 = sub i32 %431, %44
  %433 = add i32 %432, %53
  %434 = add i32 %433, %54
  %435 = add i32 %434, %61
  %436 = sub i32 %435, %63
  %437 = add i32 %436, %66
  %438 = add i32 %437, %71
  %439 = sub i32 %438, %76
  %440 = sub i32 %439, %79
  %441 = sub i32 %440, %192
  %442 = add i32 %441, %59
  %443 = sub i32 %442, %69
  %444 = sub i32 %443, %75
  %445 = add i32 %444, %132
  %446 = add i32 %445, %153
  %447 = sub i32 %446, %259
  %448 = add i32 %447, %16
  %449 = sub i32 %448, %287
  %450 = sub i32 %449, %13
  %451 = sub i32 %450, %152
  %452 = add i32 %451, %343
  %453 = add i32 %452, %348
  %454 = sub i32 %453, %82
  %455 = sub i32 %454, %89
  %456 = sub i32 %455, %105
  %457 = add i32 %456, %131
  %458 = sub i32 %457, %155
  %459 = add i32 %458, %161
  %460 = sub i32 %459, %185
  %461 = sub i32 %460, %190
  %462 = add i32 %461, %191
  %463 = add i32 %462, %101
  %464 = add i32 %463, %90
  %465 = add i32 %464, %236
  %466 = add i32 %465, %99
  %467 = sub i32 %466, %244
  %468 = add i32 %467, %119
  %469 = sub i32 %468, %261
  %470 = add i32 %469, %262
  %471 = add i32 %470, %263
  %472 = sub i32 %471, %268
  %473 = add i32 %472, %270
  %474 = sub i32 %473, %126
  %475 = sub i32 %474, %275
  %476 = sub i32 %475, %278
  %477 = add i32 %476, %280
  %478 = sub i32 %477, %301
  %479 = sub i32 %478, %302
  %480 = sub i32 %479, %93
  %481 = sub i32 %480, %309
  %482 = add i32 %481, %317
  %483 = sub i32 %482, %335
  %484 = add i32 %483, %340
  %485 = add i32 %484, %87
  %486 = add i32 %485, %107
  %487 = sub i32 %486, %108
  %488 = sub i32 %487, %110
  %489 = sub i32 %488, %113
  %490 = add i32 %489, %115
  %491 = sub i32 %490, %116
  %492 = add i32 %491, %120
  %493 = sub i32 %492, %124
  %494 = sub i32 %493, %125
  %495 = sub i32 %494, %129
  %496 = add i32 %495, %130
  %497 = sub i32 %496, %133
  %498 = add i32 %497, %134
  %499 = add i32 %498, %137
  %500 = sub i32 %499, %138
  %501 = sub i32 %500, %139
  %502 = sub i32 %501, %150
  %503 = sub i32 %502, %151
  %504 = add i32 %503, %154
  %505 = add i32 %504, %156
  %506 = add i32 %505, %160
  %507 = sub i32 %506, %162
  %508 = add i32 %507, %163
  %509 = add i32 %508, %168
  %510 = sub i32 %509, %169
  %511 = sub i32 %510, %171
  %512 = sub i32 %511, %172
  %513 = sub i32 %512, %177
  %514 = add i32 %513, %94
  %515 = sub i32 %514, %179
  %516 = sub i32 %515, %121
  %517 = add i32 %516, %180
  %518 = sub i32 %517, %182
  %519 = add i32 %518, %187
  %520 = add i32 %519, %189
  %521 = add i32 %520, %102
  %522 = add i32 %521, %193
  %523 = add i32 %522, %196
  %524 = add i32 %523, %197
  %525 = add i32 %524, %198
  %526 = sub i32 %525, %199
  %527 = sub i32 %526, %202
  %528 = sub i32 %527, %203
  %529 = sub i32 %528, %207
  %530 = add i32 %529, %208
  %531 = sub i32 %530, %210
  %532 = sub i32 %531, %211
  %533 = sub i32 %532, %212
  %534 = add i32 %533, %215
  %535 = add i32 %534, %216
  %536 = sub i32 %535, %222
  %537 = sub i32 %536, %224
  %538 = add i32 %537, %225
  %539 = add i32 %538, %228
  %540 = add i32 %539, %229
  %541 = sub i32 %540, %231
  %542 = add i32 %541, %145
  %543 = sub i32 %542, %233
  %544 = add i32 %543, %234
  %545 = add i32 %544, %235
  %546 = sub i32 %545, %237
  %547 = sub i32 %546, %241
  %548 = add i32 %547, %245
  %549 = add i32 %548, %246
  %550 = add i32 %549, %247
  %551 = sub i32 %550, %248
  %552 = sub i32 %551, %249
  %553 = sub i32 %552, %250
  %554 = add i32 %553, %251
  %555 = add i32 %554, %252
  %556 = add i32 %555, %253
  %557 = sub i32 %556, %254
  %558 = sub i32 %557, %255
  %559 = add i32 %558, %256
  %560 = sub i32 %559, %267
  %561 = sub i32 %560, %269
  %562 = add i32 %561, %271
  %563 = sub i32 %562, %276
  %564 = add i32 %563, %277
  %565 = sub i32 %564, %281
  %566 = add i32 %565, %283
  %567 = add i32 %566, %285
  %568 = sub i32 %567, %286
  %569 = sub i32 %568, %289
  %570 = add i32 %569, %290
  %571 = sub i32 %570, %291
  %572 = sub i32 %571, %292
  %573 = add i32 %572, %293
  %574 = add i32 %573, %295
  %575 = add i32 %574, %296
  %576 = add i32 %575, %298
  %577 = add i32 %576, %299
  %578 = add i32 %577, %300
  %579 = sub i32 %578, %303
  %580 = sub i32 %579, %308
  %581 = add i32 %580, %312
  %582 = add i32 %581, %313
  %583 = add i32 %582, %314
  %584 = add i32 %583, %316
  %585 = sub i32 %584, %324
  %586 = add i32 %585, %326
  %587 = sub i32 %586, %327
  %588 = add i32 %587, %329
  %589 = sub i32 %588, %330
  %590 = sub i32 %589, %141
  %591 = sub i32 %590, %333
  %592 = add i32 %591, %336
  %593 = sub i32 %592, %339
  %594 = sub i32 %593, %341
  %595 = add i32 %594, %344
  %596 = sub i32 %595, %346
  %597 = sub i32 %596, %347
  %598 = sub i32 %597, %351
  %599 = sub i32 %598, %354
  %600 = sub i32 %599, %95
  %601 = sub i32 %600, %98
  %602 = add i32 %601, %104
  %603 = add i32 %602, %122
  %604 = add i32 %603, %142
  %605 = sub i32 %604, %159
  %606 = add i32 %605, %167
  %607 = add i32 %606, %178
  %608 = sub i32 %607, %184
  %609 = sub i32 %608, %195
  %610 = sub i32 %609, %201
  %611 = sub i32 %610, %206
  %612 = sub i32 %611, %214
  %613 = sub i32 %612, %223
  %614 = add i32 %613, %226
  %615 = add i32 %614, %240
  %616 = add i32 %615, %243
  %617 = sub i32 %616, %258
  %618 = add i32 %617, %260
  %619 = add i32 %618, %266
  %620 = sub i32 %619, %272
  %621 = sub i32 %620, %274
  %622 = sub i32 %621, %294
  %623 = add i32 %622, %306
  %624 = sub i32 %623, %311
  %625 = add i32 %624, %319
  %626 = sub i32 %625, %338
  %627 = sub i32 %626, %342
  %628 = add i32 %627, %352
  %629 = add i32 %628, %356
  %630 = add i32 %629, %359
  %631 = add i32 %630, %361
  %632 = add i32 %631, %363
  %633 = sub i32 %632, %365
  %634 = add i32 %633, %382
  %635 = sub i32 %634, %148
  %636 = add i32 %635, %384
  %637 = add i32 %636, %386
  %638 = sub i32 %637, %220
  %639 = add i32 %638, %380
  %640 = add i32 %639, %374
  %641 = add i32 %640, %419
  %642 = icmp eq i32 %18, %641
  %643 = select i1 %642, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %644 = tail call i32 @puts(i8* nonnull dereferenceable(1) %643)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
