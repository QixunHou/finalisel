digraph "DFG for'crackme' function" {
	Node0x158e120[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x158e190[shape=record, label="  %6 = and i32 %5, %3"];
	Node0x158e230[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x158e2d0[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x158e340[shape=record, label="  %9 = sub i32 1, %8"];
	Node0x158e3b0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x158e420[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x158e490[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x158e500[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x158e570[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x158e5e0[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x158e650[shape=record, label="  %16 = shl i32 %1, 1"];
	Node0x158e6c0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x158e730[shape=record, label="  %18 = or i32 %11, %1"];
	Node0x158e7a0[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x158e840[shape=record, label="  %20 = mul i32 %19, -5"];
	Node0x158e8b0[shape=record, label="  %21 = or i32 %5, %3"];
	Node0x158e920[shape=record, label="  %22 = shl i32 %3, 1"];
	Node0x158e990[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x158ea00[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x158ea70[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x158eae0[shape=record, label="  %26 = xor i32 %25, -1"];
	Node0x158eb50[shape=record, label="  %27 = xor i32 %25, -2"];
	Node0x158ebc0[shape=record, label="  %28 = shl i32 %10, 1"];
	Node0x158ec30[shape=record, label="  %29 = add i32 %5, %1"];
	Node0x158eca0[shape=record, label="  %30 = add i32 %29, %2"];
	Node0x158ed10[shape=record, label="  %31 = sub i32 %30, %12"];
	Node0x158ed80[shape=record, label="  %32 = add i32 %31, %14"];
	Node0x158f000[shape=record, label="  %33 = sub i32 %32, %15"];
	Node0x158f070[shape=record, label="  %34 = add i32 %33, %17"];
	Node0x158f0e0[shape=record, label="  %35 = sub i32 %34, %18"];
	Node0x158f150[shape=record, label="  %36 = sub i32 %35, %3"];
	Node0x158f1c0[shape=record, label="  %37 = add i32 %36, %20"];
	Node0x158f230[shape=record, label="  %38 = sub i32 %37, %21"];
	Node0x158f2a0[shape=record, label="  %39 = add i32 %38, %6"];
	Node0x158f310[shape=record, label="  %40 = add i32 %39, %28"];
	Node0x158f380[shape=record, label="  %41 = sub i32 %40, %23"];
	Node0x158f3f0[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x158f460[shape=record, label="  %43 = sub i32 %42, %27"];
	Node0x158f4d0[shape=record, label="  %44 = icmp eq i32 %9, %43"];
	Node0x152e268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x158f970[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x158f9c0[shape=record, label="  ret void"];
	Node0x158e120 -> Node0x158e190;
	Node0x158e190 -> Node0x158e230;
	Node0x158e230 -> Node0x158e2d0;
	Node0x158e2d0 -> Node0x158e340;
	Node0x158e340 -> Node0x158e3b0;
	Node0x158e3b0 -> Node0x158e420;
	Node0x158e420 -> Node0x158e490;
	Node0x158e490 -> Node0x158e500;
	Node0x158e500 -> Node0x158e570;
	Node0x158e570 -> Node0x158e5e0;
	Node0x158e5e0 -> Node0x158e650;
	Node0x158e650 -> Node0x158e6c0;
	Node0x158e6c0 -> Node0x158e730;
	Node0x158e730 -> Node0x158e7a0;
	Node0x158e7a0 -> Node0x158e840;
	Node0x158e840 -> Node0x158e8b0;
	Node0x158e8b0 -> Node0x158e920;
	Node0x158e920 -> Node0x158e990;
	Node0x158e990 -> Node0x158ea00;
	Node0x158ea00 -> Node0x158ea70;
	Node0x158ea70 -> Node0x158eae0;
	Node0x158eae0 -> Node0x158eb50;
	Node0x158eb50 -> Node0x158ebc0;
	Node0x158ebc0 -> Node0x158ec30;
	Node0x158ec30 -> Node0x158eca0;
	Node0x158eca0 -> Node0x158ed10;
	Node0x158ed10 -> Node0x158ed80;
	Node0x158ed80 -> Node0x158f000;
	Node0x158f000 -> Node0x158f070;
	Node0x158f070 -> Node0x158f0e0;
	Node0x158f0e0 -> Node0x158f150;
	Node0x158f150 -> Node0x158f1c0;
	Node0x158f1c0 -> Node0x158f230;
	Node0x158f230 -> Node0x158f2a0;
	Node0x158f2a0 -> Node0x158f310;
	Node0x158f310 -> Node0x158f380;
	Node0x158f380 -> Node0x158f3f0;
	Node0x158f3f0 -> Node0x158f460;
	Node0x158f460 -> Node0x158f4d0;
	Node0x158f4d0 -> Node0x152e268;
	Node0x152e268 -> Node0x158f970;
	Node0x158f970 -> Node0x158f9c0;
edge [color=red]
	Node0x158e120 -> Node0x158e190;
	Node0x158e190 -> Node0x158e230;
	Node0x158e230 -> Node0x158e2d0;
	Node0x158e2d0 -> Node0x158e340;
	Node0x158e420 -> Node0x158e490;
	Node0x158e500 -> Node0x158e570;
	Node0x158e650 -> Node0x158e6c0;
	Node0x158e420 -> Node0x158e730;
	Node0x158e730 -> Node0x158e7a0;
	Node0x158e7a0 -> Node0x158e840;
	Node0x158e120 -> Node0x158e8b0;
	Node0x158e920 -> Node0x158e990;
	Node0x158ea00 -> Node0x158ea70;
	Node0x158ea70 -> Node0x158eae0;
	Node0x158ea70 -> Node0x158eb50;
	Node0x158e3b0 -> Node0x158ebc0;
	Node0x158e120 -> Node0x158ec30;
	Node0x158ec30 -> Node0x158eca0;
	Node0x158eca0 -> Node0x158ed10;
	Node0x158e490 -> Node0x158ed10;
	Node0x158ed10 -> Node0x158ed80;
	Node0x158e570 -> Node0x158ed80;
	Node0x158ed80 -> Node0x158f000;
	Node0x158e5e0 -> Node0x158f000;
	Node0x158f000 -> Node0x158f070;
	Node0x158e6c0 -> Node0x158f070;
	Node0x158f070 -> Node0x158f0e0;
	Node0x158e730 -> Node0x158f0e0;
	Node0x158f0e0 -> Node0x158f150;
	Node0x158f150 -> Node0x158f1c0;
	Node0x158e840 -> Node0x158f1c0;
	Node0x158f1c0 -> Node0x158f230;
	Node0x158e8b0 -> Node0x158f230;
	Node0x158f230 -> Node0x158f2a0;
	Node0x158e190 -> Node0x158f2a0;
	Node0x158f2a0 -> Node0x158f310;
	Node0x158ebc0 -> Node0x158f310;
	Node0x158f310 -> Node0x158f380;
	Node0x158e990 -> Node0x158f380;
	Node0x158f380 -> Node0x158f3f0;
	Node0x158eae0 -> Node0x158f3f0;
	Node0x158f3f0 -> Node0x158f460;
	Node0x158eb50 -> Node0x158f460;
	Node0x158e340 -> Node0x158f4d0;
	Node0x158f460 -> Node0x158f4d0;
	Node0x158f4d0 -> Node0x152e268;
	Node0x152e268 -> Node0x158f970;
}
