digraph "DFG for'crackme' function" {
	Node0x1464460[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1464b10[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0x1464bd0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x1464c40[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1464cb0[shape=record, label="  %7 = xor i32 %5, -1"];
	Node0x1464d20[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x1464d90[shape=record, label="  %9 = xor i32 %0, 2147483647"];
	Node0x1464e00[shape=record, label="  %10 = or i32 %9, %1"];
	Node0x1464ea0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1464f10[shape=record, label="  %12 = and i32 %4, %1"];
	Node0x1464f80[shape=record, label="  %13 = shl i32 %8, 1"];
	Node0x1464ff0[shape=record, label="  %14 = sub i32 %6, %0"];
	Node0x1465060[shape=record, label="  %15 = add i32 %14, %3"];
	Node0x14650d0[shape=record, label="  %16 = sub i32 %15, %5"];
	Node0x1465140[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x14651b0[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x1465220[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0x1465290[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1465300[shape=record, label="  %21 = icmp eq i32 %20, %0"];
	Node0x1405268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x14657a0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x14657f0[shape=record, label="  ret void"];
	Node0x1464460 -> Node0x1464b10;
	Node0x1464b10 -> Node0x1464bd0;
	Node0x1464bd0 -> Node0x1464c40;
	Node0x1464c40 -> Node0x1464cb0;
	Node0x1464cb0 -> Node0x1464d20;
	Node0x1464d20 -> Node0x1464d90;
	Node0x1464d90 -> Node0x1464e00;
	Node0x1464e00 -> Node0x1464ea0;
	Node0x1464ea0 -> Node0x1464f10;
	Node0x1464f10 -> Node0x1464f80;
	Node0x1464f80 -> Node0x1464ff0;
	Node0x1464ff0 -> Node0x1465060;
	Node0x1465060 -> Node0x14650d0;
	Node0x14650d0 -> Node0x1465140;
	Node0x1465140 -> Node0x14651b0;
	Node0x14651b0 -> Node0x1465220;
	Node0x1465220 -> Node0x1465290;
	Node0x1465290 -> Node0x1465300;
	Node0x1465300 -> Node0x1405268;
	Node0x1405268 -> Node0x14657a0;
	Node0x14657a0 -> Node0x14657f0;
edge [color=red]
	Node0x1464bd0 -> Node0x1464cb0;
	Node0x1464d90 -> Node0x1464e00;
	Node0x1464e00 -> Node0x1464ea0;
	Node0x1464b10 -> Node0x1464f10;
	Node0x1464d20 -> Node0x1464f80;
	Node0x1464c40 -> Node0x1464ff0;
	Node0x1464ff0 -> Node0x1465060;
	Node0x1464460 -> Node0x1465060;
	Node0x1465060 -> Node0x14650d0;
	Node0x1464bd0 -> Node0x14650d0;
	Node0x14650d0 -> Node0x1465140;
	Node0x1464cb0 -> Node0x1465140;
	Node0x1465140 -> Node0x14651b0;
	Node0x1464f10 -> Node0x14651b0;
	Node0x14651b0 -> Node0x1465220;
	Node0x1464ea0 -> Node0x1465220;
	Node0x1465220 -> Node0x1465290;
	Node0x1464f80 -> Node0x1465290;
	Node0x1465290 -> Node0x1465300;
	Node0x1465300 -> Node0x1405268;
	Node0x1405268 -> Node0x14657a0;
}
