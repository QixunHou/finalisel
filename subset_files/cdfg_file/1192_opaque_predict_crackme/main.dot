digraph "DFG for'main' function" {
	Node0xef6468[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xef64e8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xef6578[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xef65d8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xef6a58[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xef6b38[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xef6c38[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xef6cf8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xef6da8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xef7008[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xef70c8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xef7228[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xef7288[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xef9000[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xef9208[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xef9368[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xef9478[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xef9538[shape=record, label="  ret i32 0"];
	Node0xef6468 -> Node0xef64e8;
	Node0xef64e8 -> Node0xef6578;
	Node0xef6578 -> Node0xef65d8;
	Node0xef65d8 -> Node0xef6a58;
	Node0xef6a58 -> Node0xef6b38;
	Node0xef6b38 -> Node0xef6c38;
	Node0xef6c38 -> Node0xef6cf8;
	Node0xef6cf8 -> Node0xef6da8;
	Node0xef6da8 -> Node0xef7008;
	Node0xef7008 -> Node0xef70c8;
	Node0xef70c8 -> Node0xef7228;
	Node0xef7228 -> Node0xef7288;
	Node0xef7288 -> Node0xef9000;
	Node0xef9000 -> Node0xef9208;
	Node0xef9208 -> Node0xef9368;
	Node0xef9368 -> Node0xef9478;
	Node0xef9478 -> Node0xef9538;
edge [color=red]
	Node0xef6468 -> Node0xef65d8;
	Node0xef65d8 -> Node0xef6a58;
	Node0xef64e8 -> Node0xef6b38;
	Node0xef6b38 -> Node0xef6c38;
	Node0xef6578 -> Node0xef6cf8;
	Node0xef6cf8 -> Node0xef6da8;
	Node0xef6468 -> Node0xef7008;
	Node0xef64e8 -> Node0xef7008;
	Node0xef6578 -> Node0xef7008;
	Node0xef6468 -> Node0xef70c8;
	Node0xef64e8 -> Node0xef7228;
	Node0xef6578 -> Node0xef7288;
	Node0xef70c8 -> Node0xef9000;
	Node0xef7228 -> Node0xef9000;
	Node0xef7288 -> Node0xef9000;
	Node0xef6cf8 -> Node0xef9208;
	Node0xef6b38 -> Node0xef9368;
	Node0xef65d8 -> Node0xef9478;
}
