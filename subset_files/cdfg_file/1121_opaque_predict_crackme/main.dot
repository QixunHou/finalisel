digraph "DFG for'main' function" {
	Node0xedc8d8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xedc958[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xedc9e8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xedca48[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xedcec8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xedcfa8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xedd0a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xedd168[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xedd218[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xedd478[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xedd538[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xede4a8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xedeb18[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xedec10[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xedee18[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xedef78[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xedf088[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xedf148[shape=record, label="  ret i32 0"];
	Node0xedc8d8 -> Node0xedc958;
	Node0xedc958 -> Node0xedc9e8;
	Node0xedc9e8 -> Node0xedca48;
	Node0xedca48 -> Node0xedcec8;
	Node0xedcec8 -> Node0xedcfa8;
	Node0xedcfa8 -> Node0xedd0a8;
	Node0xedd0a8 -> Node0xedd168;
	Node0xedd168 -> Node0xedd218;
	Node0xedd218 -> Node0xedd478;
	Node0xedd478 -> Node0xedd538;
	Node0xedd538 -> Node0xede4a8;
	Node0xede4a8 -> Node0xedeb18;
	Node0xedeb18 -> Node0xedec10;
	Node0xedec10 -> Node0xedee18;
	Node0xedee18 -> Node0xedef78;
	Node0xedef78 -> Node0xedf088;
	Node0xedf088 -> Node0xedf148;
edge [color=red]
	Node0xedc8d8 -> Node0xedca48;
	Node0xedca48 -> Node0xedcec8;
	Node0xedc958 -> Node0xedcfa8;
	Node0xedcfa8 -> Node0xedd0a8;
	Node0xedc9e8 -> Node0xedd168;
	Node0xedd168 -> Node0xedd218;
	Node0xedc8d8 -> Node0xedd478;
	Node0xedc958 -> Node0xedd478;
	Node0xedc9e8 -> Node0xedd478;
	Node0xedc8d8 -> Node0xedd538;
	Node0xedc958 -> Node0xede4a8;
	Node0xedc9e8 -> Node0xedeb18;
	Node0xedd538 -> Node0xedec10;
	Node0xede4a8 -> Node0xedec10;
	Node0xedeb18 -> Node0xedec10;
	Node0xedd168 -> Node0xedee18;
	Node0xedcfa8 -> Node0xedef78;
	Node0xedca48 -> Node0xedf088;
}
