; ModuleID = '../.././c_source_file/0065_path_condition_crackme.c'
source_filename = "../.././c_source_file/0065_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %1, %0
  %8 = xor i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = add i32 %10, -1
  %12 = xor i32 %4, %3
  %13 = xor i32 %4, -1
  %14 = and i32 %13, %3
  %15 = xor i32 %14, -1
  %16 = or i32 %13, %3
  %17 = shl i32 %16, 1
  %18 = or i32 %4, %3
  %19 = shl i32 %18, 1
  %20 = xor i32 %19, -2
  %21 = xor i32 %17, -2
  %22 = xor i32 %2, -1
  %23 = and i32 %22, %1
  %24 = or i32 %23, %0
  %25 = xor i32 %1, -1
  %26 = and i32 %25, %0
  %27 = xor i32 %2, %1
  %28 = or i32 %27, %26
  %29 = or i32 %25, %0
  %30 = xor i32 %27, -1
  %31 = and i32 %29, %30
  %32 = xor i32 %0, -1
  %33 = and i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %32
  %36 = or i32 %22, %1
  %37 = or i32 %36, %0
  %38 = and i32 %22, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %39, %1
  %41 = and i32 %2, %0
  %42 = or i32 %2, %1
  %43 = xor i32 %41, %42
  %44 = xor i32 %36, -1
  %45 = or i32 %44, %0
  %46 = xor i32 %7, -1
  %47 = or i32 %41, %46
  %48 = shl i32 %47, 1
  %49 = or i32 %2, %0
  %50 = xor i32 %49, -1
  %51 = xor i32 %50, %1
  %52 = or i32 %22, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %7, %53
  %55 = or i32 %50, %25
  %56 = xor i32 %23, -1
  %57 = xor i32 %41, %56
  %58 = or i32 %50, %1
  %59 = and i32 %1, %0
  %60 = or i32 %59, %53
  %61 = or i32 %53, %46
  %62 = or i32 %1, %0
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %2
  %65 = and i32 %27, %29
  %66 = or i32 %7, %22
  %67 = or i32 %8, %26
  %68 = and i32 %62, %30
  %69 = or i32 %33, %26
  %70 = add i32 %52, 1
  %71 = and i32 %39, %1
  %72 = and i32 %62, %9
  %73 = or i32 %7, %50
  %74 = shl i32 %73, 1
  %75 = or i32 %8, %63
  %76 = and i32 %49, %1
  %77 = and i32 %8, %25
  %78 = or i32 %53, %1
  %79 = xor i32 %29, -1
  %80 = or i32 %22, %79
  %81 = or i32 %41, %79
  %82 = xor i32 %36, %0
  %83 = and i32 %29, %9
  %84 = or i32 %30, %0
  %85 = or i32 %36, %32
  %86 = xor i32 %29, %2
  %87 = xor i32 %33, %0
  %88 = or i32 %38, %1
  %89 = and i32 %27, %32
  %90 = xor i32 %59, -1
  %91 = add i32 %59, 1
  %92 = shl i32 %44, 1
  %93 = and i32 %9, %90
  %94 = xor i32 %53, %1
  %95 = shl i32 %94, 1
  %96 = and i32 %36, %0
  %97 = xor i32 %26, -1
  %98 = and i32 %22, %97
  %99 = shl i32 %9, 1
  %100 = and i32 %52, %1
  %101 = xor i32 %23, %0
  %102 = and i32 %39, %25
  %103 = and i32 %27, %90
  %104 = or i32 %50, %46
  %105 = and i32 %9, %46
  %106 = or i32 %41, %25
  %107 = and i32 %22, %90
  %108 = or i32 %33, %0
  %109 = add i32 %23, 1
  %110 = xor i32 %42, -1
  %111 = or i32 %110, %0
  %112 = xor i32 %49, %59
  %113 = and i32 %25, %2
  %114 = and i32 %113, %0
  %115 = or i32 %25, %2
  %116 = and i32 %115, %32
  %117 = or i32 %114, %116
  %118 = or i32 %59, %50
  %119 = or i32 %27, %0
  %120 = xor i32 %114, %119
  %121 = and i32 %30, %0
  %122 = or i32 %38, %7
  %123 = or i32 %59, %2
  %124 = or i32 %33, %32
  %125 = or i32 %27, %79
  %126 = xor i32 %26, %56
  %127 = shl i32 %1, 1
  %128 = xor i32 %26, %34
  %129 = xor i32 %44, %0
  %130 = and i32 %27, %97
  %131 = or i32 %59, %110
  %132 = and i32 %42, %0
  %133 = or i32 %44, %32
  %134 = and i32 %7, %2
  %135 = xor i32 %119, -1
  %136 = or i32 %114, %135
  %137 = and i32 %42, %32
  %138 = or i32 %34, %32
  %139 = or i32 %59, %22
  %140 = or i32 %23, %26
  %141 = or i32 %8, %46
  %142 = xor i32 %42, %59
  %143 = and i32 %9, %25
  %144 = and i32 %33, %0
  %145 = xor i32 %137, -1
  %146 = xor i32 %144, %145
  %147 = or i32 %53, %25
  %148 = add i32 %27, 1
  %149 = or i32 %8, %79
  %150 = or i32 %46, %2
  %151 = and i32 %30, %97
  %152 = or i32 %38, %44
  %153 = and i32 %33, %32
  %154 = and i32 %27, %0
  %155 = xor i32 %153, -1
  %156 = xor i32 %154, %155
  %157 = xor i32 %115, %0
  %158 = xor i32 %114, -1
  %159 = xor i32 %157, %158
  %160 = and i32 %8, %29
  %161 = xor i32 %27, %0
  %162 = or i32 %114, %161
  %163 = or i32 %38, %46
  %164 = and i32 %113, %32
  %165 = or i32 %27, %32
  %166 = xor i32 %164, %165
  %167 = xor i32 %41, -1
  %168 = and i32 %167, %1
  %169 = xor i32 %38, %36
  %170 = or i32 %56, %0
  %171 = or i32 %8, %7
  %172 = or i32 %26, %22
  %173 = and i32 %52, %25
  %174 = or i32 %41, %7
  %175 = or i32 %38, %25
  %176 = xor i32 %116, %158
  %177 = xor i32 %42, %0
  %178 = or i32 %144, %177
  %179 = shl i32 %178, 1
  %180 = or i32 %144, %137
  %181 = and i32 %9, %97
  %182 = or i32 %56, %32
  %183 = and i32 %62, %2
  %184 = shl i32 %59, 1
  %185 = shl i32 %46, 2
  %186 = xor i32 %41, %1
  %187 = or i32 %27, %63
  %188 = and i32 %29, %22
  %189 = xor i32 %161, -1
  %190 = or i32 %144, %189
  %191 = and i32 %46, %2
  %192 = and i32 %49, %25
  %193 = and i32 %8, %90
  %194 = xor i32 %165, -1
  %195 = or i32 %164, %194
  %196 = or i32 %59, %9
  %197 = shl i32 %196, 1
  %198 = and i32 %97, %2
  %199 = or i32 %30, %63
  %200 = or i32 %59, %30
  %201 = and i32 %8, %97
  %202 = or i32 %9, %46
  %203 = and i32 %90, %2
  %204 = or i32 %42, %32
  %205 = and i32 %8, %62
  %206 = xor i32 %34, %0
  %207 = shl i32 %206, 1
  %208 = xor i32 %132, %155
  %209 = and i32 %8, %1
  %210 = and i32 %115, %0
  %211 = xor i32 %210, -1
  %212 = xor i32 %164, %211
  %213 = or i32 %30, %79
  %214 = or i32 %22, %63
  %215 = xor i32 %41, %62
  %216 = shl i32 %215, 1
  %217 = shl i32 %29, 1
  %218 = xor i32 %144, %161
  %219 = or i32 %114, %157
  %220 = or i32 %7, %2
  %221 = or i32 %9, %25
  %222 = and i32 %52, %46
  %223 = xor i32 %56, %0
  %224 = shl i32 %223, 1
  %225 = and i32 %7, %9
  %226 = or i32 %9, %79
  %227 = shl i32 %226, 1
  %228 = and i32 %7, %167
  %229 = xor i32 %59, %2
  %230 = shl i32 %119, 1
  %231 = or i32 %164, %210
  %232 = or i32 %42, %0
  %233 = add i32 %62, 1
  %234 = and i32 %167, %25
  %235 = or i32 %9, %63
  %236 = and i32 %39, %46
  %237 = and i32 %29, %2
  %238 = and i32 %30, %32
  %239 = and i32 %167, %46
  %240 = xor i32 %38, %34
  %241 = or i32 %23, %32
  %242 = xor i32 %97, %2
  %243 = or i32 %26, %9
  %244 = xor i32 %167, %1
  %245 = and i32 %62, %22
  %246 = and i32 %52, %7
  %247 = shl i32 %246, 1
  %248 = xor i32 %52, %59
  %249 = add i32 %49, 1
  %250 = or i32 %110, %32
  %251 = or i32 %26, %2
  %252 = shl i32 %251, 1
  %253 = or i32 %9, %1
  %254 = or i32 %153, %154
  %255 = or i32 %30, %32
  %256 = or i32 %38, %33
  %257 = shl i32 %256, 1
  %258 = or i32 %41, %110
  %259 = xor i32 %79, %2
  %260 = and i32 %110, %32
  %261 = mul i32 %260, -7
  %262 = and i32 %23, %32
  %263 = mul i32 %262, 18
  %264 = and i32 %110, %0
  %265 = mul i32 %264, -6
  %266 = and i32 %23, %0
  %267 = shl i32 %266, 1
  %268 = and i32 %44, %32
  %269 = shl i32 %153, 4
  %270 = and i32 %44, %0
  %271 = sub i32 %202, %80
  %272 = add i32 %271, %253
  %273 = add i32 %272, %173
  %274 = sub i32 %273, %130
  %275 = sub i32 %274, %78
  %276 = mul i32 %275, 5
  %277 = add i32 %270, %52
  %278 = sub i32 %277, %225
  %279 = sub i32 %278, %137
  %280 = add i32 %279, %195
  %281 = mul i32 %280, 3
  %282 = add i32 %144, %268
  %283 = mul i32 %282, 10
  %284 = add i32 %7, -1
  %285 = add i32 %284, %110
  %286 = add i32 %285, %150
  %287 = add i32 %286, %36
  %288 = add i32 %287, %234
  %289 = add i32 %288, %133
  %290 = add i32 %289, %112
  %291 = add i32 %290, %108
  %292 = add i32 %291, %100
  %293 = add i32 %292, %96
  %294 = add i32 %293, %71
  %295 = add i32 %294, %45
  %296 = add i32 %295, %12
  %297 = add i32 %296, %219
  %298 = shl i32 %297, 1
  %299 = sub i32 %25, %0
  %300 = add i32 %299, %91
  %301 = sub i32 %300, %62
  %302 = sub i32 %301, %127
  %303 = add i32 %302, %79
  %304 = add i32 %303, %233
  %305 = sub i32 %304, %3
  %306 = add i32 %305, %6
  %307 = sub i32 %306, %64
  %308 = sub i32 %307, %66
  %309 = add i32 %308, %70
  %310 = sub i32 %309, %86
  %311 = sub i32 %310, %98
  %312 = add i32 %311, %107
  %313 = add i32 %312, %109
  %314 = add i32 %313, %39
  %315 = add i32 %314, %123
  %316 = add i32 %315, %134
  %317 = sub i32 %316, %139
  %318 = add i32 %317, %148
  %319 = add i32 %318, %172
  %320 = sub i32 %319, %183
  %321 = sub i32 %320, %184
  %322 = add i32 %321, %49
  %323 = add i32 %322, %185
  %324 = sub i32 %323, %188
  %325 = add i32 %324, %191
  %326 = add i32 %325, %198
  %327 = sub i32 %326, %203
  %328 = add i32 %327, %214
  %329 = sub i32 %328, %217
  %330 = sub i32 %329, %220
  %331 = sub i32 %330, %229
  %332 = sub i32 %331, %237
  %333 = sub i32 %332, %242
  %334 = sub i32 %333, %245
  %335 = add i32 %334, %23
  %336 = add i32 %335, %42
  %337 = add i32 %336, %249
  %338 = sub i32 %337, %259
  %339 = add i32 %338, %24
  %340 = sub i32 %339, %28
  %341 = add i32 %340, %31
  %342 = add i32 %341, %35
  %343 = add i32 %342, %37
  %344 = add i32 %343, %40
  %345 = add i32 %344, %43
  %346 = sub i32 %345, %51
  %347 = sub i32 %346, %54
  %348 = add i32 %347, %55
  %349 = sub i32 %348, %57
  %350 = add i32 %349, %58
  %351 = sub i32 %350, %60
  %352 = add i32 %351, %61
  %353 = sub i32 %352, %65
  %354 = add i32 %353, %67
  %355 = sub i32 %354, %68
  %356 = add i32 %355, %69
  %357 = sub i32 %356, %72
  %358 = add i32 %357, %75
  %359 = add i32 %358, %76
  %360 = add i32 %359, %77
  %361 = sub i32 %360, %81
  %362 = sub i32 %361, %82
  %363 = sub i32 %362, %83
  %364 = sub i32 %363, %84
  %365 = add i32 %364, %85
  %366 = add i32 %365, %87
  %367 = add i32 %366, %88
  %368 = sub i32 %367, %89
  %369 = sub i32 %368, %92
  %370 = add i32 %369, %93
  %371 = sub i32 %370, %99
  %372 = sub i32 %371, %101
  %373 = sub i32 %372, %102
  %374 = sub i32 %373, %103
  %375 = add i32 %374, %104
  %376 = sub i32 %375, %105
  %377 = sub i32 %376, %106
  %378 = sub i32 %377, %111
  %379 = add i32 %378, %118
  %380 = sub i32 %379, %121
  %381 = add i32 %380, %122
  %382 = add i32 %381, %124
  %383 = sub i32 %382, %125
  %384 = sub i32 %383, %126
  %385 = add i32 %384, %128
  %386 = sub i32 %385, %129
  %387 = sub i32 %386, %131
  %388 = sub i32 %387, %132
  %389 = add i32 %388, %138
  %390 = sub i32 %389, %140
  %391 = add i32 %390, %141
  %392 = sub i32 %391, %142
  %393 = sub i32 %392, %143
  %394 = sub i32 %393, %147
  %395 = add i32 %394, %149
  %396 = sub i32 %395, %151
  %397 = sub i32 %396, %152
  %398 = sub i32 %397, %160
  %399 = add i32 %398, %163
  %400 = add i32 %399, %168
  %401 = sub i32 %400, %169
  %402 = add i32 %401, %170
  %403 = sub i32 %402, %171
  %404 = sub i32 %403, %174
  %405 = add i32 %404, %175
  %406 = add i32 %405, %181
  %407 = sub i32 %406, %182
  %408 = add i32 %407, %186
  %409 = add i32 %408, %187
  %410 = add i32 %409, %192
  %411 = add i32 %410, %193
  %412 = sub i32 %411, %199
  %413 = add i32 %412, %200
  %414 = sub i32 %413, %201
  %415 = sub i32 %414, %204
  %416 = add i32 %415, %205
  %417 = sub i32 %416, %209
  %418 = sub i32 %417, %213
  %419 = add i32 %418, %221
  %420 = sub i32 %419, %222
  %421 = sub i32 %420, %228
  %422 = sub i32 %421, %232
  %423 = sub i32 %422, %235
  %424 = sub i32 %423, %236
  %425 = sub i32 %424, %238
  %426 = sub i32 %425, %239
  %427 = sub i32 %426, %240
  %428 = sub i32 %427, %241
  %429 = add i32 %428, %243
  %430 = sub i32 %429, %244
  %431 = add i32 %430, %248
  %432 = sub i32 %431, %250
  %433 = sub i32 %432, %252
  %434 = add i32 %433, %255
  %435 = sub i32 %434, %258
  %436 = add i32 %435, %15
  %437 = sub i32 %436, %14
  %438 = sub i32 %437, %48
  %439 = sub i32 %438, %74
  %440 = sub i32 %439, %95
  %441 = sub i32 %440, %117
  %442 = add i32 %441, %120
  %443 = add i32 %442, %136
  %444 = add i32 %443, %146
  %445 = add i32 %444, %156
  %446 = sub i32 %445, %159
  %447 = add i32 %446, %162
  %448 = add i32 %447, %166
  %449 = sub i32 %448, %176
  %450 = sub i32 %449, %180
  %451 = sub i32 %450, %190
  %452 = sub i32 %451, %197
  %453 = sub i32 %452, %207
  %454 = add i32 %453, %208
  %455 = sub i32 %454, %212
  %456 = sub i32 %455, %216
  %457 = add i32 %456, %218
  %458 = sub i32 %457, %224
  %459 = sub i32 %458, %227
  %460 = sub i32 %459, %230
  %461 = sub i32 %460, %231
  %462 = sub i32 %461, %247
  %463 = add i32 %462, %254
  %464 = sub i32 %463, %257
  %465 = add i32 %464, %261
  %466 = add i32 %465, %263
  %467 = add i32 %466, %265
  %468 = sub i32 %467, %267
  %469 = add i32 %468, %269
  %470 = add i32 %469, %17
  %471 = sub i32 %470, %179
  %472 = add i32 %471, %283
  %473 = sub i32 %472, %20
  %474 = sub i32 %473, %21
  %475 = add i32 %474, %276
  %476 = add i32 %475, %281
  %477 = add i32 %476, %298
  %478 = icmp eq i32 %11, %477
  %479 = select i1 %478, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %480 = tail call i32 @puts(i8* nonnull dereferenceable(1) %479)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
