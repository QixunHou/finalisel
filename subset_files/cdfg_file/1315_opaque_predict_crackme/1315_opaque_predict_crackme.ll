; ModuleID = '../.././c_source_file/1315_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1315_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = xor i32 %6, -2
  %8 = and i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %2
  %11 = shl i32 %10, 1
  %12 = xor i32 %1, -1
  %13 = or i32 %12, %0
  %14 = xor i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = and i32 %13, %15
  %17 = add i32 %16, %11
  %18 = add i32 %17, %7
  %19 = xor i32 %4, -1
  %20 = or i32 %19, %3
  %21 = and i32 %4, %3
  %22 = xor i32 %21, -1
  %23 = or i32 %4, %3
  %24 = xor i32 %23, -1
  %25 = xor i32 %20, -1
  %26 = and i32 %12, %2
  %27 = and i32 %26, %0
  %28 = xor i32 %14, %0
  %29 = or i32 %27, %28
  %30 = xor i32 %2, -1
  %31 = and i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %32, %34
  %36 = or i32 %30, %1
  %37 = xor i32 %36, %8
  %38 = and i32 %13, %30
  %39 = or i32 %2, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %1
  %42 = or i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %43
  %47 = xor i32 %0, -1
  %48 = or i32 %2, %1
  %49 = or i32 %48, %47
  %50 = or i32 %44, %1
  %51 = and i32 %45, %12
  %52 = or i32 %31, %1
  %53 = or i32 %36, %47
  %54 = and i32 %15, %0
  %55 = and i32 %12, %0
  %56 = and i32 %30, %1
  %57 = or i32 %56, %55
  %58 = and i32 %2, %0
  %59 = xor i32 %48, -1
  %60 = or i32 %58, %59
  %61 = shl i32 %60, 1
  %62 = or i32 %31, %33
  %63 = and i32 %2, %1
  %64 = and i32 %63, %47
  %65 = and i32 %48, %0
  %66 = or i32 %64, %65
  %67 = add i32 %2, 1
  %68 = and i32 %33, %45
  %69 = and i32 %34, %2
  %70 = and i32 %44, %33
  %71 = or i32 %58, %1
  %72 = and i32 %26, %47
  %73 = or i32 %14, %47
  %74 = xor i32 %72, %73
  %75 = or i32 %30, %0
  %76 = and i32 %75, %1
  %77 = or i32 %58, %34
  %78 = or i32 %8, %59
  %79 = xor i32 %63, -1
  %80 = and i32 %79, %0
  %81 = xor i32 %56, -1
  %82 = xor i32 %55, %81
  %83 = or i32 %44, %55
  %84 = shl i32 %36, 1
  %85 = xor i32 %31, %36
  %86 = xor i32 %36, -1
  %87 = add i32 %36, 1
  %88 = or i32 %58, %56
  %89 = xor i32 %58, -1
  %90 = and i32 %89, %1
  %91 = shl i32 %90, 1
  %92 = and i32 %81, %47
  %93 = or i32 %79, %0
  %94 = and i32 %32, %1
  %95 = xor i32 %75, -1
  %96 = or i32 %95, %34
  %97 = shl i32 %96, 2
  %98 = add i32 %44, 1
  %99 = or i32 %44, %34
  %100 = shl i32 %99, 1
  %101 = or i32 %8, %30
  %102 = xor i32 %8, %2
  %103 = and i32 %75, %34
  %104 = shl i32 %103, 1
  %105 = and i32 %39, %33
  %106 = xor i32 %95, %1
  %107 = and i32 %44, %42
  %108 = or i32 %33, %30
  %109 = xor i32 %55, %79
  %110 = or i32 %30, %43
  %111 = xor i32 %48, %0
  %112 = and i32 %14, %13
  %113 = shl i32 %112, 2
  %114 = or i32 %44, %8
  %115 = and i32 %63, %0
  %116 = or i32 %115, %111
  %117 = or i32 %55, %2
  %118 = or i32 %45, %1
  %119 = xor i32 %13, -1
  %120 = and i32 %42, %15
  %121 = xor i32 %115, %28
  %122 = or i32 %15, %43
  %123 = xor i32 %86, %0
  %124 = or i32 %45, %12
  %125 = and i32 %14, %42
  %126 = or i32 %58, %119
  %127 = shl i32 %126, 1
  %128 = and i32 %14, %47
  %129 = xor i32 %115, -1
  %130 = xor i32 %128, %129
  %131 = xor i32 %55, -1
  %132 = xor i32 %131, %2
  %133 = or i32 %58, %43
  %134 = or i32 %14, %0
  %135 = xor i32 %27, %134
  %136 = xor i32 %119, %2
  %137 = xor i32 %13, %2
  %138 = xor i32 %58, %48
  %139 = or i32 %86, %0
  %140 = add i32 %0, 1
  %141 = and i32 %14, %9
  %142 = and i32 %45, %131
  %143 = or i32 %55, %15
  %144 = and i32 %36, %0
  %145 = and i32 %48, %47
  %146 = xor i32 %145, 2147483647
  %147 = xor i32 %146, %115
  %148 = or i32 %115, %145
  %149 = xor i32 %75, %1
  %150 = xor i32 %39, %1
  %151 = shl i32 %150, 1
  %152 = xor i32 %58, %1
  %153 = and i32 %81, %0
  %154 = and i32 %39, %34
  %155 = or i32 %8, %15
  %156 = or i32 %31, %86
  %157 = and i32 %30, %9
  %158 = or i32 %8, %45
  %159 = shl i32 %158, 1
  %160 = or i32 %12, %2
  %161 = xor i32 %160, %0
  %162 = or i32 %27, %161
  %163 = xor i32 %161, -1
  %164 = xor i32 %27, %163
  %165 = and i32 %42, %30
  %166 = and i32 %160, %0
  %167 = xor i32 %166, 2147483647
  %168 = xor i32 %167, %72
  %169 = xor i32 %31, %1
  %170 = or i32 %30, %119
  %171 = xor i32 %43, %2
  %172 = or i32 %43, %2
  %173 = or i32 %63, %0
  %174 = shl i32 %173, 1
  %175 = xor i32 %134, -1
  %176 = or i32 %27, %175
  %177 = xor i32 %15, %0
  %178 = and i32 %33, %89
  %179 = and i32 %79, %47
  %180 = and i32 %14, %0
  %181 = xor i32 %180, -1
  %182 = xor i32 %64, %181
  %183 = or i32 %59, %47
  %184 = xor i32 %55, %2
  %185 = or i32 %8, %86
  %186 = or i32 %8, %40
  %187 = and i32 %89, %34
  %188 = and i32 %39, %12
  %189 = xor i32 %73, -1
  %190 = or i32 %72, %189
  %191 = or i32 %31, %12
  %192 = or i32 %30, %34
  %193 = and i32 %39, %1
  %194 = or i32 %36, %0
  %195 = and i32 %42, %2
  %196 = and i32 %33, %2
  %197 = xor i32 %58, %81
  %198 = xor i32 %40, %1
  %199 = or i32 %81, %47
  %200 = xor i32 %111, %129
  %201 = xor i32 %75, %8
  %202 = xor i32 %79, %0
  %203 = or i32 %15, %119
  %204 = and i32 %44, %131
  %205 = and i32 %13, %2
  %206 = or i32 %45, %119
  %207 = or i32 %15, %47
  %208 = or i32 %8, %95
  %209 = add i32 %1, 1
  %210 = or i32 %72, %166
  %211 = and i32 %45, %34
  %212 = or i32 %33, %95
  %213 = and i32 %44, %34
  %214 = and i32 %44, %12
  %215 = and i32 %44, %1
  %216 = and i32 %42, %45
  %217 = and i32 %30, %131
  %218 = or i32 %44, %43
  %219 = shl i32 %218, 1
  %220 = or i32 %58, %12
  %221 = or i32 %31, %34
  %222 = or i32 %63, %47
  %223 = shl i32 %222, 1
  %224 = and i32 %45, %1
  %225 = or i32 %119, %2
  %226 = or i32 %63, %55
  %227 = and i32 %59, %47
  %228 = shl i32 %227, 2
  %229 = and i32 %56, %47
  %230 = and i32 %59, %0
  %231 = mul i32 %230, 6
  %232 = and i32 %56, %0
  %233 = shl i32 %232, 3
  %234 = and i32 %86, %47
  %235 = mul i32 %64, -9
  %236 = and i32 %86, %0
  %237 = add i32 %236, %69
  %238 = sub i32 %24, %237
  %239 = add i32 %238, %25
  %240 = mul i32 %239, 3
  %241 = add i32 %65, %48
  %242 = add i32 %241, %234
  %243 = shl i32 %242, 2
  %244 = sub i32 %171, %225
  %245 = add i32 %244, %76
  %246 = mul i32 %245, 5
  %247 = add i32 %75, -1
  %248 = add i32 %247, %217
  %249 = add i32 %248, %89
  %250 = add i32 %249, %157
  %251 = add i32 %250, %208
  %252 = add i32 %251, %203
  %253 = add i32 %252, %197
  %254 = add i32 %253, %178
  %255 = add i32 %254, %156
  %256 = add i32 %255, %143
  %257 = add i32 %256, %94
  %258 = add i32 %257, %82
  %259 = add i32 %258, %78
  %260 = add i32 %259, %50
  %261 = add i32 %260, %121
  %262 = add i32 %261, %74
  %263 = add i32 %262, %21
  %264 = add i32 %263, %147
  %265 = add i32 %264, %168
  %266 = shl i32 %265, 1
  %267 = add i32 %140, %1
  %268 = add i32 %267, %209
  %269 = add i32 %268, %67
  %270 = add i32 %269, %119
  %271 = add i32 %270, %2
  %272 = add i32 %271, %34
  %273 = add i32 %272, %131
  %274 = add i32 %273, %3
  %275 = sub i32 %274, %38
  %276 = add i32 %275, %87
  %277 = add i32 %276, %98
  %278 = add i32 %277, %101
  %279 = add i32 %278, %102
  %280 = add i32 %279, %31
  %281 = sub i32 %280, %108
  %282 = add i32 %281, %110
  %283 = sub i32 %282, %117
  %284 = add i32 %283, %81
  %285 = sub i32 %284, %132
  %286 = add i32 %285, %136
  %287 = sub i32 %286, %137
  %288 = add i32 %287, 1
  %289 = sub i32 %288, %165
  %290 = add i32 %289, %170
  %291 = add i32 %290, %172
  %292 = add i32 %291, %40
  %293 = sub i32 %292, %184
  %294 = sub i32 %293, %192
  %295 = add i32 %294, %195
  %296 = sub i32 %295, %196
  %297 = add i32 %296, %59
  %298 = add i32 %297, %205
  %299 = sub i32 %298, %4
  %300 = add i32 %299, %35
  %301 = sub i32 %300, %37
  %302 = sub i32 %301, %41
  %303 = sub i32 %302, %46
  %304 = add i32 %303, %49
  %305 = add i32 %304, %51
  %306 = sub i32 %305, %52
  %307 = sub i32 %306, %53
  %308 = sub i32 %307, %54
  %309 = sub i32 %308, %57
  %310 = sub i32 %309, %62
  %311 = sub i32 %310, %68
  %312 = sub i32 %311, %70
  %313 = sub i32 %312, %71
  %314 = sub i32 %313, %77
  %315 = sub i32 %314, %80
  %316 = sub i32 %315, %83
  %317 = sub i32 %316, %84
  %318 = sub i32 %317, %85
  %319 = sub i32 %318, %88
  %320 = add i32 %319, %92
  %321 = sub i32 %320, %93
  %322 = add i32 %321, %105
  %323 = sub i32 %322, %106
  %324 = sub i32 %323, %107
  %325 = add i32 %324, %109
  %326 = add i32 %325, %111
  %327 = add i32 %326, %114
  %328 = sub i32 %327, %118
  %329 = sub i32 %328, %120
  %330 = sub i32 %329, %122
  %331 = add i32 %330, %123
  %332 = add i32 %331, %124
  %333 = add i32 %332, %125
  %334 = add i32 %333, %133
  %335 = add i32 %334, %138
  %336 = add i32 %335, %139
  %337 = sub i32 %336, %141
  %338 = sub i32 %337, %142
  %339 = sub i32 %338, %144
  %340 = sub i32 %339, %128
  %341 = add i32 %340, %149
  %342 = add i32 %341, %152
  %343 = add i32 %342, %153
  %344 = sub i32 %343, %154
  %345 = sub i32 %344, %155
  %346 = add i32 %345, %169
  %347 = add i32 %346, %177
  %348 = add i32 %347, %179
  %349 = sub i32 %348, %183
  %350 = add i32 %349, %185
  %351 = add i32 %350, %186
  %352 = add i32 %351, %187
  %353 = sub i32 %352, %188
  %354 = sub i32 %353, %191
  %355 = sub i32 %354, %193
  %356 = sub i32 %355, %194
  %357 = add i32 %356, %198
  %358 = sub i32 %357, %199
  %359 = sub i32 %358, %201
  %360 = sub i32 %359, %202
  %361 = add i32 %360, %204
  %362 = add i32 %361, %206
  %363 = add i32 %362, %207
  %364 = sub i32 %363, %211
  %365 = sub i32 %364, %212
  %366 = add i32 %365, %213
  %367 = sub i32 %366, %214
  %368 = sub i32 %367, %145
  %369 = add i32 %368, %215
  %370 = sub i32 %369, %216
  %371 = sub i32 %370, %220
  %372 = sub i32 %371, %221
  %373 = sub i32 %372, %224
  %374 = add i32 %373, %226
  %375 = add i32 %374, %229
  %376 = sub i32 %375, %20
  %377 = add i32 %376, %22
  %378 = add i32 %377, %29
  %379 = sub i32 %378, %61
  %380 = add i32 %379, %66
  %381 = sub i32 %380, %91
  %382 = sub i32 %381, %97
  %383 = sub i32 %382, %100
  %384 = sub i32 %383, %104
  %385 = sub i32 %384, %113
  %386 = add i32 %385, %116
  %387 = sub i32 %386, %127
  %388 = sub i32 %387, %130
  %389 = sub i32 %388, %135
  %390 = sub i32 %389, %148
  %391 = sub i32 %390, %151
  %392 = sub i32 %391, %159
  %393 = sub i32 %392, %162
  %394 = sub i32 %393, %164
  %395 = sub i32 %394, %174
  %396 = add i32 %395, %176
  %397 = sub i32 %396, %182
  %398 = add i32 %397, %190
  %399 = add i32 %398, %200
  %400 = add i32 %399, %210
  %401 = sub i32 %400, %219
  %402 = sub i32 %401, %223
  %403 = sub i32 %402, %228
  %404 = add i32 %403, %231
  %405 = sub i32 %404, %233
  %406 = add i32 %405, %235
  %407 = add i32 %406, %243
  %408 = add i32 %407, %246
  %409 = add i32 %408, %240
  %410 = add i32 %409, %266
  %411 = icmp eq i32 %18, %410
  %412 = select i1 %411, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %413 = tail call i32 @puts(i8* nonnull dereferenceable(1) %412)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
