digraph "DFG for'crackme' function" {
	Node0xb2cab0[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0xb2d130[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0xb2d1d0[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0xb2d240[shape=record, label="  %8 = sub i32 %0, %5"];
	Node0xb2d2b0[shape=record, label="  %9 = add i32 %8, %6"];
	Node0xb2d320[shape=record, label="  %10 = mul i32 %1, -2"];
	Node0xb2d3c0[shape=record, label="  %11 = or i32 %10, 1"];
	Node0xb2d430[shape=record, label="  %12 = or i32 %2, %1"];
	Node0xb2d4a0[shape=record, label="  %13 = and i32 %2, %1"];
	Node0xb2d510[shape=record, label="  %14 = xor i32 %3, %0"];
	Node0xb2d580[shape=record, label="  %15 = and i32 %7, %3"];
	Node0xb2d5f0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0xb2d660[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0xb2d6d0[shape=record, label="  %18 = and i32 %3, %0"];
	Node0xb2d740[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0xb2d7b0[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0xb2d820[shape=record, label="  %21 = or i32 %7, %3"];
	Node0xb2d890[shape=record, label="  %22 = or i32 %3, %0"];
	Node0xb2d930[shape=record, label="  %23 = shl i32 %21, 2"];
	Node0xb2d9d0[shape=record, label="  %24 = xor i32 %23, -4"];
	Node0xb2da70[shape=record, label="  %25 = mul i32 %15, -5"];
	Node0xb2dae0[shape=record, label="  %26 = sub i32 %22, %12"];
	Node0xb2db50[shape=record, label="  %27 = sub i32 %26, %18"];
	Node0xb2dbf0[shape=record, label="  %28 = mul i32 %27, 3"];
	Node0xb2dc60[shape=record, label="  %29 = add i32 %14, %13"];
	Node0xb2dcd0[shape=record, label="  %30 = shl i32 %29, 2"];
	Node0xb2dd40[shape=record, label="  %31 = sub i32 %1, %0"];
	Node0xb2ddb0[shape=record, label="  %32 = sub i32 %31, %2"];
	Node0xb2e030[shape=record, label="  %33 = add i32 %32, %11"];
	Node0xb2e0a0[shape=record, label="  %34 = add i32 %33, %12"];
	Node0xb2e110[shape=record, label="  %35 = add i32 %34, %21"];
	Node0xb2e180[shape=record, label="  %36 = add i32 %35, %25"];
	Node0xb2e1f0[shape=record, label="  %37 = add i32 %36, %17"];
	Node0xb2e260[shape=record, label="  %38 = sub i32 %37, %20"];
	Node0xb2e2d0[shape=record, label="  %39 = sub i32 %38, %24"];
	Node0xb2e340[shape=record, label="  %40 = add i32 %39, %30"];
	Node0xb2e3b0[shape=record, label="  %41 = add i32 %40, %28"];
	Node0xb2e420[shape=record, label="  %42 = icmp eq i32 %9, %41"];
	Node0xacd268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb2e8c0[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0xb2e910[shape=record, label="  ret void"];
	Node0xb2cab0 -> Node0xb2d130;
	Node0xb2d130 -> Node0xb2d1d0;
	Node0xb2d1d0 -> Node0xb2d240;
	Node0xb2d240 -> Node0xb2d2b0;
	Node0xb2d2b0 -> Node0xb2d320;
	Node0xb2d320 -> Node0xb2d3c0;
	Node0xb2d3c0 -> Node0xb2d430;
	Node0xb2d430 -> Node0xb2d4a0;
	Node0xb2d4a0 -> Node0xb2d510;
	Node0xb2d510 -> Node0xb2d580;
	Node0xb2d580 -> Node0xb2d5f0;
	Node0xb2d5f0 -> Node0xb2d660;
	Node0xb2d660 -> Node0xb2d6d0;
	Node0xb2d6d0 -> Node0xb2d740;
	Node0xb2d740 -> Node0xb2d7b0;
	Node0xb2d7b0 -> Node0xb2d820;
	Node0xb2d820 -> Node0xb2d890;
	Node0xb2d890 -> Node0xb2d930;
	Node0xb2d930 -> Node0xb2d9d0;
	Node0xb2d9d0 -> Node0xb2da70;
	Node0xb2da70 -> Node0xb2dae0;
	Node0xb2dae0 -> Node0xb2db50;
	Node0xb2db50 -> Node0xb2dbf0;
	Node0xb2dbf0 -> Node0xb2dc60;
	Node0xb2dc60 -> Node0xb2dcd0;
	Node0xb2dcd0 -> Node0xb2dd40;
	Node0xb2dd40 -> Node0xb2ddb0;
	Node0xb2ddb0 -> Node0xb2e030;
	Node0xb2e030 -> Node0xb2e0a0;
	Node0xb2e0a0 -> Node0xb2e110;
	Node0xb2e110 -> Node0xb2e180;
	Node0xb2e180 -> Node0xb2e1f0;
	Node0xb2e1f0 -> Node0xb2e260;
	Node0xb2e260 -> Node0xb2e2d0;
	Node0xb2e2d0 -> Node0xb2e340;
	Node0xb2e340 -> Node0xb2e3b0;
	Node0xb2e3b0 -> Node0xb2e420;
	Node0xb2e420 -> Node0xacd268;
	Node0xacd268 -> Node0xb2e8c0;
	Node0xb2e8c0 -> Node0xb2e910;
edge [color=red]
	Node0xb2cab0 -> Node0xb2d130;
	Node0xb2cab0 -> Node0xb2d240;
	Node0xb2d240 -> Node0xb2d2b0;
	Node0xb2d130 -> Node0xb2d2b0;
	Node0xb2d320 -> Node0xb2d3c0;
	Node0xb2d1d0 -> Node0xb2d580;
	Node0xb2d580 -> Node0xb2d5f0;
	Node0xb2d5f0 -> Node0xb2d660;
	Node0xb2d6d0 -> Node0xb2d740;
	Node0xb2d740 -> Node0xb2d7b0;
	Node0xb2d1d0 -> Node0xb2d820;
	Node0xb2d820 -> Node0xb2d930;
	Node0xb2d930 -> Node0xb2d9d0;
	Node0xb2d580 -> Node0xb2da70;
	Node0xb2d890 -> Node0xb2dae0;
	Node0xb2d430 -> Node0xb2dae0;
	Node0xb2dae0 -> Node0xb2db50;
	Node0xb2d6d0 -> Node0xb2db50;
	Node0xb2db50 -> Node0xb2dbf0;
	Node0xb2d510 -> Node0xb2dc60;
	Node0xb2d4a0 -> Node0xb2dc60;
	Node0xb2dc60 -> Node0xb2dcd0;
	Node0xb2dd40 -> Node0xb2ddb0;
	Node0xb2ddb0 -> Node0xb2e030;
	Node0xb2d3c0 -> Node0xb2e030;
	Node0xb2e030 -> Node0xb2e0a0;
	Node0xb2d430 -> Node0xb2e0a0;
	Node0xb2e0a0 -> Node0xb2e110;
	Node0xb2d820 -> Node0xb2e110;
	Node0xb2e110 -> Node0xb2e180;
	Node0xb2da70 -> Node0xb2e180;
	Node0xb2e180 -> Node0xb2e1f0;
	Node0xb2d660 -> Node0xb2e1f0;
	Node0xb2e1f0 -> Node0xb2e260;
	Node0xb2d7b0 -> Node0xb2e260;
	Node0xb2e260 -> Node0xb2e2d0;
	Node0xb2d9d0 -> Node0xb2e2d0;
	Node0xb2e2d0 -> Node0xb2e340;
	Node0xb2dcd0 -> Node0xb2e340;
	Node0xb2e340 -> Node0xb2e3b0;
	Node0xb2dbf0 -> Node0xb2e3b0;
	Node0xb2d2b0 -> Node0xb2e420;
	Node0xb2e3b0 -> Node0xb2e420;
	Node0xb2e420 -> Node0xacd268;
	Node0xacd268 -> Node0xb2e8c0;
}
