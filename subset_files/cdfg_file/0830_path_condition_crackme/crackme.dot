digraph "DFG for'crackme' function" {
	Node0x23ff750[shape=record, label="  %5 = xor i32 %3, %0"];
	Node0x23ffdd0[shape=record, label="  %6 = shl i32 %5, 2"];
	Node0x23ffe70[shape=record, label="  %7 = or i32 %6, 3"];
	Node0x23ffee0[shape=record, label="  %8 = xor i32 %2, %1"];
	Node0x23fff80[shape=record, label="  %9 = xor i32 %2, -1"];
	Node0x23ffff0[shape=record, label="  %10 = or i32 %9, %1"];
	Node0x2400060[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x24000d0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x2400140[shape=record, label="  %13 = or i32 %2, %1"];
	Node0x24001b0[shape=record, label="  %14 = and i32 %9, %1"];
	Node0x2400220[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x2400290[shape=record, label="  %16 = shl i32 %10, 2"];
	Node0x2400330[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0x24003a0[shape=record, label="  %18 = shl i32 %14, 2"];
	Node0x2400410[shape=record, label="  %19 = shl i32 %11, 2"];
	Node0x2400480[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x24004f0[shape=record, label="  %21 = and i32 %20, %3"];
	Node0x2400590[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x2400630[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x24006a0[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x2400710[shape=record, label="  %25 = shl i32 %3, 1"];
	Node0x2400780[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x24007f0[shape=record, label="  %27 = shl i32 %24, 2"];
	Node0x2400860[shape=record, label="  %28 = xor i32 %27, -4"];
	Node0x24008d0[shape=record, label="  %29 = and i32 %3, %0"];
	Node0x2400970[shape=record, label="  %30 = mul i32 %29, -7"];
	Node0x24009e0[shape=record, label="  %31 = add i32 %13, %8"];
	Node0x2400a50[shape=record, label="  %32 = add i32 %31, %24"];
	Node0x2400cd0[shape=record, label="  %33 = shl i32 %32, 1"];
	Node0x2400d40[shape=record, label="  %34 = sub i32 2, %0"];
	Node0x2400db0[shape=record, label="  %35 = add i32 %34, %1"];
	Node0x2400e20[shape=record, label="  %36 = add i32 %35, %2"];
	Node0x2400e90[shape=record, label="  %37 = sub i32 %36, %8"];
	Node0x2400f00[shape=record, label="  %38 = add i32 %37, %10"];
	Node0x2400f70[shape=record, label="  %39 = add i32 %38, %12"];
	Node0x2400fe0[shape=record, label="  %40 = add i32 %39, %15"];
	Node0x2401050[shape=record, label="  %41 = add i32 %40, %13"];
	Node0x24010c0[shape=record, label="  %42 = sub i32 %41, %18"];
	Node0x2401130[shape=record, label="  %43 = sub i32 %42, %19"];
	Node0x24011a0[shape=record, label="  %44 = sub i32 %43, %5"];
	Node0x2401210[shape=record, label="  %45 = sub i32 %44, %21"];
	Node0x2401280[shape=record, label="  %46 = sub i32 %45, %17"];
	Node0x24012f0[shape=record, label="  %47 = sub i32 %46, %26"];
	Node0x2401360[shape=record, label="  %48 = add i32 %47, %30"];
	Node0x24013d0[shape=record, label="  %49 = add i32 %48, %23"];
	Node0x2401440[shape=record, label="  %50 = sub i32 %49, %28"];
	Node0x24014b0[shape=record, label="  %51 = add i32 %50, %33"];
	Node0x2401520[shape=record, label="  %52 = icmp eq i32 %7, %51"];
	Node0x23a0268[shape=record, label="  %53 = select i1 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24019c0[shape=record, label="  %54 = tail call i32 @puts(i8* nonnull dereferenceable(1) %53)"];
	Node0x2401a10[shape=record, label="  ret void"];
	Node0x23ff750 -> Node0x23ffdd0;
	Node0x23ffdd0 -> Node0x23ffe70;
	Node0x23ffe70 -> Node0x23ffee0;
	Node0x23ffee0 -> Node0x23fff80;
	Node0x23fff80 -> Node0x23ffff0;
	Node0x23ffff0 -> Node0x2400060;
	Node0x2400060 -> Node0x24000d0;
	Node0x24000d0 -> Node0x2400140;
	Node0x2400140 -> Node0x24001b0;
	Node0x24001b0 -> Node0x2400220;
	Node0x2400220 -> Node0x2400290;
	Node0x2400290 -> Node0x2400330;
	Node0x2400330 -> Node0x24003a0;
	Node0x24003a0 -> Node0x2400410;
	Node0x2400410 -> Node0x2400480;
	Node0x2400480 -> Node0x24004f0;
	Node0x24004f0 -> Node0x2400590;
	Node0x2400590 -> Node0x2400630;
	Node0x2400630 -> Node0x24006a0;
	Node0x24006a0 -> Node0x2400710;
	Node0x2400710 -> Node0x2400780;
	Node0x2400780 -> Node0x24007f0;
	Node0x24007f0 -> Node0x2400860;
	Node0x2400860 -> Node0x24008d0;
	Node0x24008d0 -> Node0x2400970;
	Node0x2400970 -> Node0x24009e0;
	Node0x24009e0 -> Node0x2400a50;
	Node0x2400a50 -> Node0x2400cd0;
	Node0x2400cd0 -> Node0x2400d40;
	Node0x2400d40 -> Node0x2400db0;
	Node0x2400db0 -> Node0x2400e20;
	Node0x2400e20 -> Node0x2400e90;
	Node0x2400e90 -> Node0x2400f00;
	Node0x2400f00 -> Node0x2400f70;
	Node0x2400f70 -> Node0x2400fe0;
	Node0x2400fe0 -> Node0x2401050;
	Node0x2401050 -> Node0x24010c0;
	Node0x24010c0 -> Node0x2401130;
	Node0x2401130 -> Node0x24011a0;
	Node0x24011a0 -> Node0x2401210;
	Node0x2401210 -> Node0x2401280;
	Node0x2401280 -> Node0x24012f0;
	Node0x24012f0 -> Node0x2401360;
	Node0x2401360 -> Node0x24013d0;
	Node0x24013d0 -> Node0x2401440;
	Node0x2401440 -> Node0x24014b0;
	Node0x24014b0 -> Node0x2401520;
	Node0x2401520 -> Node0x23a0268;
	Node0x23a0268 -> Node0x24019c0;
	Node0x24019c0 -> Node0x2401a10;
edge [color=red]
	Node0x23ff750 -> Node0x23ffdd0;
	Node0x23ffdd0 -> Node0x23ffe70;
	Node0x23fff80 -> Node0x23ffff0;
	Node0x2400060 -> Node0x24000d0;
	Node0x23fff80 -> Node0x24001b0;
	Node0x24001b0 -> Node0x2400220;
	Node0x23ffff0 -> Node0x2400290;
	Node0x2400290 -> Node0x2400330;
	Node0x24001b0 -> Node0x24003a0;
	Node0x2400060 -> Node0x2400410;
	Node0x2400480 -> Node0x24004f0;
	Node0x24004f0 -> Node0x2400590;
	Node0x2400590 -> Node0x2400630;
	Node0x2400710 -> Node0x2400780;
	Node0x24006a0 -> Node0x24007f0;
	Node0x24007f0 -> Node0x2400860;
	Node0x24008d0 -> Node0x2400970;
	Node0x2400140 -> Node0x24009e0;
	Node0x23ffee0 -> Node0x24009e0;
	Node0x24009e0 -> Node0x2400a50;
	Node0x24006a0 -> Node0x2400a50;
	Node0x2400a50 -> Node0x2400cd0;
	Node0x2400d40 -> Node0x2400db0;
	Node0x2400db0 -> Node0x2400e20;
	Node0x2400e20 -> Node0x2400e90;
	Node0x23ffee0 -> Node0x2400e90;
	Node0x2400e90 -> Node0x2400f00;
	Node0x23ffff0 -> Node0x2400f00;
	Node0x2400f00 -> Node0x2400f70;
	Node0x24000d0 -> Node0x2400f70;
	Node0x2400f70 -> Node0x2400fe0;
	Node0x2400220 -> Node0x2400fe0;
	Node0x2400fe0 -> Node0x2401050;
	Node0x2400140 -> Node0x2401050;
	Node0x2401050 -> Node0x24010c0;
	Node0x24003a0 -> Node0x24010c0;
	Node0x24010c0 -> Node0x2401130;
	Node0x2400410 -> Node0x2401130;
	Node0x2401130 -> Node0x24011a0;
	Node0x23ff750 -> Node0x24011a0;
	Node0x24011a0 -> Node0x2401210;
	Node0x24004f0 -> Node0x2401210;
	Node0x2401210 -> Node0x2401280;
	Node0x2400330 -> Node0x2401280;
	Node0x2401280 -> Node0x24012f0;
	Node0x2400780 -> Node0x24012f0;
	Node0x24012f0 -> Node0x2401360;
	Node0x2400970 -> Node0x2401360;
	Node0x2401360 -> Node0x24013d0;
	Node0x2400630 -> Node0x24013d0;
	Node0x24013d0 -> Node0x2401440;
	Node0x2400860 -> Node0x2401440;
	Node0x2401440 -> Node0x24014b0;
	Node0x2400cd0 -> Node0x24014b0;
	Node0x23ffe70 -> Node0x2401520;
	Node0x24014b0 -> Node0x2401520;
	Node0x2401520 -> Node0x23a0268;
	Node0x23a0268 -> Node0x24019c0;
}
