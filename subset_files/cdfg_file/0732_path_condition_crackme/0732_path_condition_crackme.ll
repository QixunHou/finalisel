; ModuleID = '../.././c_source_file/0732_path_condition_crackme.c'
source_filename = "../.././c_source_file/0732_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %1, -1
  %7 = or i32 %6, %0
  %8 = xor i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = and i32 %7, %9
  %11 = or i32 %9, %6
  %12 = xor i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %9, %13
  %15 = shl i32 %14, 1
  %16 = or i32 %8, %4
  %17 = or i32 %1, %0
  %18 = and i32 %17, %2
  %19 = xor i32 %0, -1
  %20 = and i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %19
  %23 = shl i32 %22, 1
  %24 = xor i32 %2, -1
  %25 = and i32 %24, %0
  %26 = or i32 %25, %1
  %27 = and i32 %6, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %24, %28
  %30 = xor i32 %27, %21
  %31 = and i32 %8, %7
  %32 = and i32 %2, %0
  %33 = xor i32 %32, %1
  %34 = and i32 %6, %2
  %35 = and i32 %34, %0
  %36 = or i32 %6, %2
  %37 = and i32 %36, %19
  %38 = or i32 %35, %37
  %39 = and i32 %20, %0
  %40 = xor i32 %2, %1
  %41 = and i32 %40, %19
  %42 = xor i32 %39, -1
  %43 = xor i32 %41, %42
  %44 = and i32 %20, %19
  %45 = and i32 %40, %0
  %46 = or i32 %44, %45
  %47 = or i32 %24, %1
  %48 = xor i32 %47, -1
  %49 = xor i32 %48, %0
  %50 = xor i32 %32, -1
  %51 = and i32 %50, %1
  %52 = xor i32 %40, -1
  %53 = shl i32 %52, 1
  %54 = and i32 %24, %1
  %55 = or i32 %54, %19
  %56 = xor i32 %7, -1
  %57 = or i32 %9, %56
  %58 = or i32 %13, %2
  %59 = and i32 %50, %13
  %60 = xor i32 %25, %21
  %61 = xor i32 %25, -1
  %62 = shl i32 %61, 1
  %63 = or i32 %24, %0
  %64 = xor i32 %63, -1
  %65 = add i32 %63, 1
  %66 = or i32 %2, %1
  %67 = and i32 %66, %0
  %68 = xor i32 %32, %66
  %69 = or i32 %2, %0
  %70 = and i32 %69, %12
  %71 = shl i32 %21, 1
  %72 = xor i32 %17, -1
  %73 = xor i32 %72, %2
  %74 = and i32 %9, %6
  %75 = xor i32 %69, %1
  %76 = or i32 %12, %64
  %77 = or i32 %52, %19
  %78 = and i32 %8, %5
  %79 = or i32 %8, %72
  %80 = xor i32 %54, -1
  %81 = and i32 %80, %19
  %82 = or i32 %20, %27
  %83 = xor i32 %20, %0
  %84 = shl i32 %83, 1
  %85 = xor i32 %7, %2
  %86 = and i32 %8, %13
  %87 = xor i32 %36, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %35, %88
  %90 = xor i32 %52, %0
  %91 = and i32 %63, %6
  %92 = and i32 %47, %19
  %93 = or i32 %47, %0
  %94 = or i32 %48, %19
  %95 = or i32 %54, %27
  %96 = and i32 %34, %19
  %97 = or i32 %40, %19
  %98 = xor i32 %96, %97
  %99 = xor i32 %54, %0
  %100 = or i32 %32, %13
  %101 = shl i32 %100, 1
  %102 = and i32 %5, %2
  %103 = and i32 %66, %19
  %104 = or i32 %39, %103
  %105 = xor i32 %40, %0
  %106 = xor i32 %105, -1
  %107 = xor i32 %35, %106
  %108 = shl i32 %107, 2
  %109 = or i32 %24, %56
  %110 = or i32 %4, %52
  %111 = xor i32 %5, %2
  %112 = xor i32 %103, %42
  %113 = xor i32 %4, %2
  %114 = xor i32 %63, %4
  %115 = xor i32 %32, %7
  %116 = and i32 %28, %2
  %117 = and i32 %12, %9
  %118 = or i32 %56, %2
  %119 = or i32 %35, %105
  %120 = or i32 %8, %27
  %121 = or i32 %35, %87
  %122 = xor i32 %69, %4
  %123 = shl i32 %122, 1
  %124 = xor i32 %27, %80
  %125 = or i32 %4, %48
  %126 = or i32 %25, %6
  %127 = and i32 %9, %13
  %128 = xor i32 %66, -1
  %129 = or i32 %32, %128
  %130 = xor i32 %50, %1
  %131 = or i32 %27, %2
  %132 = and i32 %52, %19
  %133 = and i32 %7, %24
  %134 = or i32 %12, %9
  %135 = and i32 %12, %61
  %136 = or i32 %32, %72
  %137 = or i32 %48, %0
  %138 = or i32 %40, %0
  %139 = xor i32 %138, -1
  %140 = or i32 %35, %139
  %141 = or i32 %4, %128
  %142 = xor i32 %69, -1
  %143 = or i32 %4, %142
  %144 = xor i32 %37, 2147483647
  %145 = xor i32 %144, %35
  %146 = xor i32 %61, %1
  %147 = xor i32 %27, %2
  %148 = and i32 %52, %5
  %149 = or i32 %39, %41
  %150 = and i32 %63, %1
  %151 = or i32 %12, %24
  %152 = add i32 %32, 1
  %153 = xor i32 %64, %1
  %154 = and i32 %8, %6
  %155 = and i32 %47, %0
  %156 = shl i32 %155, 1
  %157 = or i32 %8, %13
  %158 = or i32 %32, %56
  %159 = or i32 %8, %1
  %160 = or i32 %142, %1
  %161 = and i32 %36, %0
  %162 = xor i32 %161, 2147483647
  %163 = xor i32 %162, %96
  %164 = or i32 %54, %0
  %165 = and i32 %12, %2
  %166 = or i32 %9, %1
  %167 = or i32 %32, %54
  %168 = and i32 %61, %1
  %169 = or i32 %66, %19
  %170 = xor i32 %97, -1
  %171 = or i32 %96, %170
  %172 = or i32 %8, %56
  %173 = and i32 %40, %5
  %174 = and i32 %24, %5
  %175 = and i32 %21, %19
  %176 = or i32 %80, %19
  %177 = and i32 %8, %1
  %178 = add i32 %27, 1
  %179 = and i32 %69, %6
  %180 = or i32 %66, %0
  %181 = xor i32 %66, %4
  %182 = and i32 %80, %0
  %183 = and i32 %63, %12
  %184 = and i32 %50, %6
  %185 = add i32 %54, 1
  %186 = or i32 %39, %106
  %187 = xor i32 %25, %1
  %188 = and i32 %7, %52
  %189 = and i32 %40, %17
  %190 = and i32 %69, %13
  %191 = or i32 %8, %6
  %192 = or i32 %128, %19
  %193 = and i32 %12, %50
  %194 = or i32 %27, %52
  %195 = or i32 %40, %72
  %196 = or i32 %96, %161
  %197 = or i32 %24, %72
  %198 = or i32 %142, %6
  %199 = and i32 %8, %17
  %200 = or i32 %25, %12
  %201 = xor i32 %47, %0
  %202 = and i32 %8, %12
  %203 = and i32 %61, %13
  %204 = or i32 %12, %2
  %205 = or i32 %72, %2
  %206 = add i32 %66, 1
  %207 = xor i32 %39, %105
  %208 = xor i32 %128, %0
  %209 = or i32 %20, %0
  %210 = xor i32 %66, %0
  %211 = xor i32 %210, %42
  %212 = or i32 %32, %1
  %213 = and i32 %21, %0
  %214 = and i32 %12, %24
  %215 = or i32 %4, %64
  %216 = and i32 %13, %2
  %217 = or i32 %142, %13
  %218 = or i32 %12, %142
  %219 = or i32 %64, %13
  %220 = and i32 %9, %1
  %221 = shl i32 %220, 1
  %222 = and i32 %24, %13
  %223 = and i32 %69, %1
  %224 = shl i32 %223, 1
  %225 = and i32 %17, %24
  %226 = and i32 %40, %7
  %227 = or i32 %4, %2
  %228 = or i32 %9, %72
  %229 = or i32 %40, %27
  %230 = and i32 %17, %52
  %231 = or i32 %52, %0
  %232 = shl i32 %231, 1
  %233 = or i32 %24, %13
  %234 = and i32 %40, %28
  %235 = add i32 %2, 1
  %236 = or i32 %64, %6
  %237 = or i32 %64, %1
  %238 = or i32 %44, %67
  %239 = xor i32 %142, %1
  %240 = and i32 %63, %13
  %241 = or i32 %4, %24
  %242 = or i32 %40, %56
  %243 = and i32 %128, %19
  %244 = mul i32 %243, -11
  %245 = and i32 %128, %0
  %246 = and i32 %54, %0
  %247 = and i32 %48, %19
  %248 = mul i32 %44, 20
  %249 = and i32 %48, %0
  %250 = shl i32 %39, 1
  %251 = add i32 %233, %13
  %252 = add i32 %251, %9
  %253 = add i32 %252, %116
  %254 = add i32 %253, %218
  %255 = add i32 %254, %194
  %256 = add i32 %255, %191
  %257 = add i32 %256, %190
  %258 = add i32 %257, %129
  %259 = add i32 %258, %125
  %260 = add i32 %259, %55
  %261 = add i32 %260, %49
  %262 = add i32 %261, %33
  %263 = add i32 %262, %145
  %264 = add i32 %263, %163
  %265 = shl i32 %264, 1
  %266 = sub i32 %73, %247
  %267 = sub i32 %266, %249
  %268 = add i32 %267, %245
  %269 = add i32 %268, %217
  %270 = sub i32 %269, %193
  %271 = sub i32 %270, %82
  %272 = mul i32 %271, 3
  %273 = sub i32 %75, %69
  %274 = sub i32 %273, %51
  %275 = sub i32 %274, %98
  %276 = mul i32 %275, 5
  %277 = shl i32 %1, 1
  %278 = add i32 %277, %27
  %279 = add i32 %278, %2
  %280 = sub i32 %56, %279
  %281 = add i32 %280, %12
  %282 = add i32 %281, %178
  %283 = sub i32 %282, %4
  %284 = add i32 %283, %235
  %285 = add i32 %284, %18
  %286 = add i32 %285, %29
  %287 = add i32 %286, %58
  %288 = add i32 %287, %65
  %289 = add i32 %288, %85
  %290 = add i32 %289, %20
  %291 = add i32 %290, %25
  %292 = add i32 %291, %102
  %293 = add i32 %292, %109
  %294 = add i32 %293, %111
  %295 = add i32 %294, %113
  %296 = sub i32 %295, %118
  %297 = sub i32 %296, %8
  %298 = add i32 %297, %131
  %299 = add i32 %298, %133
  %300 = add i32 %299, %147
  %301 = sub i32 %300, %151
  %302 = add i32 %301, %152
  %303 = sub i32 %302, %165
  %304 = add i32 %303, %32
  %305 = add i32 %304, %40
  %306 = add i32 %305, %174
  %307 = sub i32 %306, %63
  %308 = add i32 %307, %185
  %309 = sub i32 %308, %197
  %310 = add i32 %309, %204
  %311 = sub i32 %310, %205
  %312 = add i32 %311, %206
  %313 = sub i32 %312, %214
  %314 = sub i32 %313, %216
  %315 = sub i32 %314, %222
  %316 = add i32 %315, %225
  %317 = add i32 %316, %227
  %318 = add i32 %317, %66
  %319 = sub i32 %318, %241
  %320 = sub i32 %319, %10
  %321 = add i32 %320, %11
  %322 = sub i32 %321, %16
  %323 = add i32 %322, %26
  %324 = add i32 %323, %30
  %325 = sub i32 %324, %31
  %326 = sub i32 %325, %53
  %327 = add i32 %326, %57
  %328 = add i32 %327, %59
  %329 = add i32 %328, %60
  %330 = sub i32 %329, %62
  %331 = sub i32 %330, %67
  %332 = add i32 %331, %68
  %333 = sub i32 %332, %70
  %334 = sub i32 %333, %71
  %335 = add i32 %334, %74
  %336 = sub i32 %335, %76
  %337 = sub i32 %336, %77
  %338 = sub i32 %337, %78
  %339 = sub i32 %338, %79
  %340 = sub i32 %339, %81
  %341 = add i32 %340, %86
  %342 = sub i32 %341, %90
  %343 = sub i32 %342, %91
  %344 = add i32 %343, %92
  %345 = sub i32 %344, %93
  %346 = sub i32 %345, %94
  %347 = add i32 %346, %95
  %348 = add i32 %347, %99
  %349 = add i32 %348, %110
  %350 = add i32 %349, %114
  %351 = sub i32 %350, %115
  %352 = add i32 %351, %45
  %353 = sub i32 %352, %117
  %354 = sub i32 %353, %120
  %355 = sub i32 %354, %124
  %356 = sub i32 %355, %105
  %357 = add i32 %356, %126
  %358 = add i32 %357, %127
  %359 = add i32 %358, %130
  %360 = sub i32 %359, %132
  %361 = add i32 %360, %134
  %362 = sub i32 %361, %135
  %363 = sub i32 %362, %136
  %364 = add i32 %363, %137
  %365 = add i32 %364, %141
  %366 = add i32 %365, %143
  %367 = add i32 %366, %146
  %368 = sub i32 %367, %148
  %369 = sub i32 %368, %150
  %370 = add i32 %369, %153
  %371 = add i32 %370, %154
  %372 = add i32 %371, %157
  %373 = add i32 %372, %158
  %374 = add i32 %373, %159
  %375 = sub i32 %374, %160
  %376 = add i32 %375, %164
  %377 = sub i32 %376, %166
  %378 = add i32 %377, %167
  %379 = sub i32 %378, %168
  %380 = sub i32 %379, %169
  %381 = add i32 %380, %172
  %382 = add i32 %381, %173
  %383 = add i32 %382, %175
  %384 = add i32 %383, %176
  %385 = sub i32 %384, %177
  %386 = add i32 %385, %179
  %387 = add i32 %386, %180
  %388 = sub i32 %387, %181
  %389 = add i32 %388, %182
  %390 = sub i32 %389, %183
  %391 = sub i32 %390, %184
  %392 = add i32 %391, %187
  %393 = add i32 %392, %188
  %394 = sub i32 %393, %189
  %395 = sub i32 %394, %192
  %396 = add i32 %395, %195
  %397 = sub i32 %396, %198
  %398 = sub i32 %397, %199
  %399 = sub i32 %398, %200
  %400 = add i32 %399, %201
  %401 = add i32 %400, %202
  %402 = add i32 %401, %203
  %403 = add i32 %402, %208
  %404 = add i32 %403, %209
  %405 = add i32 %404, %212
  %406 = sub i32 %405, %213
  %407 = sub i32 %406, %138
  %408 = sub i32 %407, %41
  %409 = add i32 %408, %210
  %410 = sub i32 %409, %215
  %411 = sub i32 %410, %219
  %412 = sub i32 %411, %226
  %413 = sub i32 %412, %228
  %414 = add i32 %413, %229
  %415 = sub i32 %414, %230
  %416 = sub i32 %415, %234
  %417 = add i32 %416, %236
  %418 = sub i32 %417, %237
  %419 = sub i32 %418, %239
  %420 = sub i32 %419, %240
  %421 = sub i32 %420, %242
  %422 = add i32 %421, %246
  %423 = sub i32 %422, %15
  %424 = sub i32 %423, %23
  %425 = add i32 %424, %38
  %426 = add i32 %425, %43
  %427 = add i32 %426, %46
  %428 = sub i32 %427, %84
  %429 = sub i32 %428, %89
  %430 = sub i32 %429, %101
  %431 = sub i32 %430, %104
  %432 = add i32 %431, %112
  %433 = sub i32 %432, %119
  %434 = add i32 %433, %121
  %435 = sub i32 %434, %123
  %436 = add i32 %435, %140
  %437 = add i32 %436, %149
  %438 = sub i32 %437, %156
  %439 = sub i32 %438, %171
  %440 = sub i32 %439, %186
  %441 = sub i32 %440, %196
  %442 = add i32 %441, %207
  %443 = add i32 %442, %211
  %444 = sub i32 %443, %221
  %445 = sub i32 %444, %224
  %446 = sub i32 %445, %232
  %447 = add i32 %446, %238
  %448 = add i32 %447, %244
  %449 = add i32 %448, %248
  %450 = sub i32 %449, %250
  %451 = add i32 %450, %108
  %452 = add i32 %451, %276
  %453 = add i32 %452, %272
  %454 = add i32 %453, %265
  %455 = icmp eq i32 %454, %5
  %456 = select i1 %455, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %457 = tail call i32 @puts(i8* nonnull dereferenceable(1) %456)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
