; ModuleID = '../.././c_source_file/1012_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1012_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = mul i32 %7, -2
  %9 = or i32 %4, %3
  %10 = and i32 %2, %0
  %11 = xor i32 %1, -1
  %12 = or i32 %11, %0
  %13 = xor i32 %10, %12
  %14 = and i32 %2, %1
  %15 = and i32 %14, %0
  %16 = xor i32 %0, -1
  %17 = or i32 %2, %1
  %18 = and i32 %17, %16
  %19 = xor i32 %15, -1
  %20 = xor i32 %18, %19
  %21 = add i32 %9, %13
  %22 = sub i32 %21, %20
  %23 = add i32 %22, %8
  %24 = xor i32 %4, -1
  %25 = or i32 %24, %3
  %26 = shl i32 %24, 1
  %27 = xor i32 %26, -1
  %28 = xor i32 %9, -1
  %29 = shl i32 %25, 1
  %30 = xor i32 %29, -2
  %31 = and i32 %24, %3
  %32 = or i32 %10, %11
  %33 = and i32 %14, %16
  %34 = and i32 %17, %0
  %35 = xor i32 %33, -1
  %36 = xor i32 %34, %35
  %37 = and i32 %11, %0
  %38 = xor i32 %37, -1
  %39 = xor i32 %2, %1
  %40 = and i32 %39, %38
  %41 = xor i32 %1, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %12, -1
  %44 = xor i32 %43, %2
  %45 = and i32 %39, %0
  %46 = xor i32 %2, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %41, %47
  %49 = or i32 %1, %0
  %50 = xor i32 %39, -1
  %51 = and i32 %49, %50
  %52 = and i32 %1, %0
  %53 = xor i32 %2, -1
  %54 = or i32 %53, %1
  %55 = xor i32 %54, %52
  %56 = or i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %52, %57
  %59 = or i32 %53, %0
  %60 = xor i32 %59, -1
  %61 = add i32 %59, 1
  %62 = and i32 %42, %2
  %63 = and i32 %56, %11
  %64 = and i32 %53, %0
  %65 = and i32 %41, %2
  %66 = and i32 %53, %42
  %67 = and i32 %53, %1
  %68 = xor i32 %67, %0
  %69 = xor i32 %67, -1
  %70 = xor i32 %69, %0
  %71 = or i32 %41, %57
  %72 = and i32 %59, %11
  %73 = or i32 %60, %11
  %74 = shl i32 %73, 1
  %75 = and i32 %69, %16
  %76 = xor i32 %64, -1
  %77 = and i32 %41, %76
  %78 = or i32 %67, %0
  %79 = and i32 %41, %47
  %80 = or i32 %39, %52
  %81 = shl i32 %80, 1
  %82 = and i32 %47, %11
  %83 = and i32 %59, %41
  %84 = xor i32 %10, -1
  %85 = and i32 %41, %84
  %86 = xor i32 %14, -1
  %87 = or i32 %86, %0
  %88 = xor i32 %52, -1
  %89 = and i32 %46, %88
  %90 = and i32 %11, %2
  %91 = and i32 %90, %16
  %92 = or i32 %39, %16
  %93 = xor i32 %91, %92
  %94 = or i32 %10, %42
  %95 = and i32 %84, %11
  %96 = and i32 %46, %42
  %97 = xor i32 %37, %69
  %98 = and i32 %90, %0
  %99 = or i32 %11, %2
  %100 = and i32 %99, %16
  %101 = or i32 %98, %100
  %102 = or i32 %60, %42
  %103 = xor i32 %76, %1
  %104 = shl i32 %103, 1
  %105 = or i32 %37, %53
  %106 = xor i32 %64, %86
  %107 = or i32 %41, %60
  %108 = xor i32 %49, -1
  %109 = or i32 %53, %108
  %110 = or i32 %52, %2
  %111 = and i32 %39, %16
  %112 = or i32 %15, %111
  %113 = and i32 %41, %53
  %114 = and i32 %47, %38
  %115 = and i32 %39, %49
  %116 = and i32 %59, %42
  %117 = xor i32 %49, %2
  %118 = shl i32 %117, 1
  %119 = and i32 %39, %12
  %120 = and i32 %56, %41
  %121 = or i32 %43, %2
  %122 = xor i32 %52, %2
  %123 = xor i32 %39, %0
  %124 = xor i32 %123, -1
  %125 = xor i32 %98, %124
  %126 = or i32 %57, %42
  %127 = shl i32 %126, 2
  %128 = xor i32 %54, %0
  %129 = shl i32 %128, 1
  %130 = xor i32 %92, 2147483647
  %131 = or i32 %130, %91
  %132 = shl i32 %131, 1
  %133 = and i32 %99, %0
  %134 = or i32 %91, %133
  %135 = xor i32 %99, %0
  %136 = xor i32 %98, -1
  %137 = xor i32 %135, %136
  %138 = or i32 %69, %16
  %139 = and i32 %69, %0
  %140 = shl i32 %139, 1
  %141 = or i32 %41, %2
  %142 = xor i32 %59, %1
  %143 = or i32 %46, %108
  %144 = xor i32 %17, -1
  %145 = xor i32 %144, %0
  %146 = or i32 %46, %52
  %147 = xor i32 %60, %1
  %148 = shl i32 %147, 1
  %149 = and i32 %38, %2
  %150 = xor i32 %56, %52
  %151 = and i32 %39, %88
  %152 = xor i32 %17, %52
  %153 = and i32 %50, %16
  %154 = or i32 %15, %18
  %155 = xor i32 %84, %1
  %156 = or i32 %46, %37
  %157 = xor i32 %108, %2
  %158 = and i32 %49, %53
  %159 = xor i32 %50, %0
  %160 = xor i32 %111, %19
  %161 = or i32 %144, %16
  %162 = or i32 %69, %0
  %163 = or i32 %33, %34
  %164 = xor i32 %37, %2
  %165 = and i32 %50, %88
  %166 = or i32 %14, %16
  %167 = xor i32 %54, -1
  %168 = add i32 %54, 1
  %169 = or i32 %52, %47
  %170 = and i32 %46, %38
  %171 = shl i32 %56, 1
  %172 = or i32 %39, %0
  %173 = xor i32 %172, -1
  %174 = or i32 %98, %173
  %175 = or i32 %10, %108
  %176 = xor i32 %45, %35
  %177 = or i32 %64, %167
  %178 = or i32 %17, %0
  %179 = or i32 %50, %43
  %180 = shl i32 %2, 1
  %181 = and i32 %56, %42
  %182 = xor i32 %10, %69
  %183 = shl i32 %182, 1
  %184 = or i32 %37, %50
  %185 = shl i32 %184, 1
  %186 = or i32 %41, %53
  %187 = shl i32 %186, 1
  %188 = or i32 %47, %42
  %189 = or i32 %42, %2
  %190 = and i32 %76, %1
  %191 = or i32 %17, %16
  %192 = and i32 %12, %47
  %193 = or i32 %39, %37
  %194 = xor i32 %86, %0
  %195 = and i32 %84, %42
  %196 = and i32 %12, %2
  %197 = or i32 %10, %1
  %198 = or i32 %50, %0
  %199 = and i32 %56, %1
  %200 = or i32 %15, %124
  %201 = and i32 %59, %1
  %202 = add i32 %39, 1
  %203 = xor i32 %10, %1
  %204 = or i32 %53, %43
  %205 = shl i32 %204, 1
  %206 = or i32 %57, %1
  %207 = or i32 %14, %0
  %208 = or i32 %50, %108
  %209 = or i32 %98, %135
  %210 = xor i32 %17, %0
  %211 = or i32 %15, %210
  %212 = or i32 %108, %2
  %213 = and i32 %86, %0
  %214 = shl i32 %213, 1
  %215 = or i32 %10, %43
  %216 = add i32 %10, 1
  %217 = and i32 %53, %38
  %218 = or i32 %57, %11
  %219 = shl i32 %218, 1
  %220 = or i32 %39, %43
  %221 = shl i32 %220, 1
  %222 = or i32 %60, %1
  %223 = or i32 %46, %42
  %224 = xor i32 %64, %54
  %225 = and i32 %49, %47
  %226 = or i32 %52, %53
  %227 = and i32 %49, %2
  %228 = or i32 %47, %108
  %229 = or i32 %10, %144
  %230 = or i32 %64, %1
  %231 = or i32 %46, %43
  %232 = shl i32 %231, 1
  %233 = xor i32 %100, %136
  %234 = and i32 %46, %11
  %235 = or i32 %37, %2
  %236 = or i32 %167, %0
  %237 = xor i32 %38, %2
  %238 = and i32 %46, %49
  %239 = or i32 %98, %123
  %240 = xor i32 %15, %123
  %241 = and i32 %144, %16
  %242 = mul i32 %241, -12
  %243 = and i32 %67, %16
  %244 = and i32 %144, %0
  %245 = mul i32 %244, 9
  %246 = and i32 %67, %0
  %247 = mul i32 %246, 11
  %248 = and i32 %167, %16
  %249 = mul i32 %248, 10
  %250 = and i32 %167, %0
  %251 = mul i32 %250, 24
  %252 = shl i32 %15, 2
  %253 = add i32 %52, %53
  %254 = add i32 %253, %42
  %255 = add i32 %254, %76
  %256 = add i32 %255, %113
  %257 = add i32 %256, %105
  %258 = add i32 %257, %65
  %259 = add i32 %258, %166
  %260 = add i32 %259, %162
  %261 = add i32 %260, %142
  %262 = add i32 %261, %85
  %263 = add i32 %262, %58
  %264 = add i32 %263, %134
  %265 = add i32 %264, %163
  %266 = sub i32 %265, %25
  %267 = shl i32 %266, 1
  %268 = sub i32 %229, %62
  %269 = sub i32 %268, %192
  %270 = sub i32 %269, %159
  %271 = sub i32 %270, %34
  %272 = add i32 %271, %101
  %273 = mul i32 %272, 5
  %274 = sub i32 %157, %121
  %275 = add i32 %274, %243
  %276 = add i32 %275, %33
  %277 = sub i32 %276, %82
  %278 = mul i32 %277, 3
  %279 = sub i32 -2, %1
  %280 = add i32 %279, %41
  %281 = sub i32 %280, %37
  %282 = add i32 %281, %88
  %283 = sub i32 %282, %12
  %284 = add i32 %283, %43
  %285 = add i32 %284, %38
  %286 = sub i32 %285, %49
  %287 = add i32 %286, %3
  %288 = sub i32 %287, %44
  %289 = add i32 %288, %61
  %290 = sub i32 %289, %64
  %291 = sub i32 %290, %66
  %292 = add i32 %291, %17
  %293 = add i32 %292, %59
  %294 = add i32 %293, %54
  %295 = add i32 %294, %109
  %296 = add i32 %295, %110
  %297 = add i32 %296, %122
  %298 = sub i32 %297, %141
  %299 = sub i32 %298, %149
  %300 = add i32 %299, %158
  %301 = add i32 %300, %164
  %302 = add i32 %301, %168
  %303 = add i32 %302, %69
  %304 = sub i32 %303, %180
  %305 = add i32 %304, %189
  %306 = sub i32 %305, %196
  %307 = add i32 %306, %202
  %308 = add i32 %307, %86
  %309 = add i32 %308, %212
  %310 = add i32 %309, %216
  %311 = sub i32 %310, %217
  %312 = sub i32 %311, %226
  %313 = sub i32 %312, %227
  %314 = add i32 %313, %235
  %315 = sub i32 %314, %237
  %316 = add i32 %315, %32
  %317 = sub i32 %316, %40
  %318 = sub i32 %317, %45
  %319 = add i32 %318, %48
  %320 = add i32 %319, %51
  %321 = add i32 %320, %55
  %322 = sub i32 %321, %63
  %323 = add i32 %322, %68
  %324 = sub i32 %323, %70
  %325 = sub i32 %324, %71
  %326 = sub i32 %325, %72
  %327 = add i32 %326, %75
  %328 = add i32 %327, %77
  %329 = sub i32 %328, %78
  %330 = sub i32 %329, %79
  %331 = sub i32 %330, %83
  %332 = sub i32 %331, %87
  %333 = add i32 %332, %89
  %334 = add i32 %333, %94
  %335 = add i32 %334, %95
  %336 = sub i32 %335, %96
  %337 = add i32 %336, %97
  %338 = add i32 %337, %102
  %339 = add i32 %338, %106
  %340 = sub i32 %339, %107
  %341 = sub i32 %340, %114
  %342 = add i32 %341, %115
  %343 = add i32 %342, %116
  %344 = sub i32 %343, %118
  %345 = sub i32 %344, %119
  %346 = sub i32 %345, %120
  %347 = add i32 %346, %138
  %348 = add i32 %347, %143
  %349 = add i32 %348, %145
  %350 = sub i32 %349, %146
  %351 = sub i32 %350, %150
  %352 = sub i32 %351, %151
  %353 = sub i32 %352, %152
  %354 = add i32 %353, %153
  %355 = sub i32 %354, %155
  %356 = sub i32 %355, %156
  %357 = sub i32 %356, %161
  %358 = sub i32 %357, %165
  %359 = add i32 %358, %169
  %360 = add i32 %359, %170
  %361 = sub i32 %360, %171
  %362 = add i32 %361, %175
  %363 = sub i32 %362, %177
  %364 = add i32 %363, %178
  %365 = add i32 %364, %179
  %366 = add i32 %365, %181
  %367 = sub i32 %366, %187
  %368 = sub i32 %367, %188
  %369 = sub i32 %368, %190
  %370 = add i32 %369, %191
  %371 = add i32 %370, %193
  %372 = add i32 %371, %194
  %373 = sub i32 %372, %195
  %374 = sub i32 %373, %197
  %375 = sub i32 %374, %198
  %376 = add i32 %375, %199
  %377 = add i32 %376, %201
  %378 = sub i32 %377, %203
  %379 = sub i32 %378, %205
  %380 = add i32 %379, %206
  %381 = sub i32 %380, %207
  %382 = sub i32 %381, %208
  %383 = sub i32 %382, %215
  %384 = add i32 %383, %222
  %385 = add i32 %384, %92
  %386 = sub i32 %385, %223
  %387 = sub i32 %386, %224
  %388 = add i32 %387, %225
  %389 = sub i32 %388, %228
  %390 = sub i32 %389, %172
  %391 = sub i32 %390, %230
  %392 = add i32 %391, %234
  %393 = add i32 %392, %236
  %394 = sub i32 %393, %238
  %395 = add i32 %394, %27
  %396 = add i32 %395, %28
  %397 = add i32 %396, %31
  %398 = add i32 %397, %6
  %399 = sub i32 %398, %36
  %400 = sub i32 %399, %74
  %401 = sub i32 %400, %81
  %402 = sub i32 %401, %93
  %403 = sub i32 %402, %104
  %404 = add i32 %403, %112
  %405 = add i32 %404, %125
  %406 = add i32 %405, %127
  %407 = sub i32 %406, %129
  %408 = sub i32 %407, %137
  %409 = sub i32 %408, %140
  %410 = sub i32 %409, %148
  %411 = sub i32 %410, %154
  %412 = add i32 %411, %160
  %413 = sub i32 %412, %174
  %414 = add i32 %413, %176
  %415 = sub i32 %414, %183
  %416 = sub i32 %415, %185
  %417 = sub i32 %416, %200
  %418 = sub i32 %417, %209
  %419 = add i32 %418, %211
  %420 = sub i32 %419, %214
  %421 = sub i32 %420, %219
  %422 = sub i32 %421, %221
  %423 = sub i32 %422, %232
  %424 = add i32 %423, %233
  %425 = sub i32 %424, %239
  %426 = sub i32 %425, %240
  %427 = add i32 %426, %242
  %428 = add i32 %427, %245
  %429 = add i32 %428, %247
  %430 = add i32 %429, %249
  %431 = add i32 %430, %251
  %432 = sub i32 %431, %252
  %433 = sub i32 %432, %30
  %434 = sub i32 %433, %132
  %435 = add i32 %434, %278
  %436 = add i32 %435, %273
  %437 = add i32 %436, %267
  %438 = icmp eq i32 %23, %437
  %439 = select i1 %438, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %440 = tail call i32 @puts(i8* nonnull dereferenceable(1) %439)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
