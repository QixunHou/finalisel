digraph "DFG for'crackme' function" {
	Node0xa6fbe0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xa6fc50[shape=record, label="  %4 = and i32 %3, %0"];
	Node0xa6fd10[shape=record, label="  %5 = add i32 %4, 1"];
	Node0xa6fd80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xa6fdf0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xa6fe60[shape=record, label="  %8 = or i32 %3, %0"];
	Node0xa6fed0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xa6ff40[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0xa6ffb0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0xa70020[shape=record, label="  %12 = shl i32 %3, 1"];
	Node0xa70090[shape=record, label="  %13 = xor i32 %11, -1"];
	Node0xa70130[shape=record, label="  %14 = xor i32 %9, -2"];
	Node0xa701a0[shape=record, label="  %15 = shl i32 %0, 1"];
	Node0xa70210[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0xa702b0[shape=record, label="  %17 = shl i32 %0, 2"];
	Node0xa70320[shape=record, label="  %18 = sub i32 1, %1"];
	Node0xa70390[shape=record, label="  %19 = add i32 %18, %16"];
	Node0xa70400[shape=record, label="  %20 = add i32 %19, %7"];
	Node0xa70470[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xa704e0[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0xa70550[shape=record, label="  %23 = sub i32 %22, %12"];
	Node0xa705c0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0xa70630[shape=record, label="  %25 = sub i32 %24, %9"];
	Node0xa706a0[shape=record, label="  %26 = sub i32 %25, %14"];
	Node0xa70710[shape=record, label="  %27 = add i32 %26, %17"];
	Node0xa70780[shape=record, label="  %28 = icmp eq i32 %5, %27"];
	Node0xa10268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa70c20[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xa70c70[shape=record, label="  ret void"];
	Node0xa6fbe0 -> Node0xa6fc50;
	Node0xa6fc50 -> Node0xa6fd10;
	Node0xa6fd10 -> Node0xa6fd80;
	Node0xa6fd80 -> Node0xa6fdf0;
	Node0xa6fdf0 -> Node0xa6fe60;
	Node0xa6fe60 -> Node0xa6fed0;
	Node0xa6fed0 -> Node0xa6ff40;
	Node0xa6ff40 -> Node0xa6ffb0;
	Node0xa6ffb0 -> Node0xa70020;
	Node0xa70020 -> Node0xa70090;
	Node0xa70090 -> Node0xa70130;
	Node0xa70130 -> Node0xa701a0;
	Node0xa701a0 -> Node0xa70210;
	Node0xa70210 -> Node0xa702b0;
	Node0xa702b0 -> Node0xa70320;
	Node0xa70320 -> Node0xa70390;
	Node0xa70390 -> Node0xa70400;
	Node0xa70400 -> Node0xa70470;
	Node0xa70470 -> Node0xa704e0;
	Node0xa704e0 -> Node0xa70550;
	Node0xa70550 -> Node0xa705c0;
	Node0xa705c0 -> Node0xa70630;
	Node0xa70630 -> Node0xa706a0;
	Node0xa706a0 -> Node0xa70710;
	Node0xa70710 -> Node0xa70780;
	Node0xa70780 -> Node0xa10268;
	Node0xa10268 -> Node0xa70c20;
	Node0xa70c20 -> Node0xa70c70;
edge [color=red]
	Node0xa6fbe0 -> Node0xa6fc50;
	Node0xa6fc50 -> Node0xa6fd10;
	Node0xa6fd80 -> Node0xa6fdf0;
	Node0xa6fbe0 -> Node0xa6fe60;
	Node0xa6fe60 -> Node0xa6fed0;
	Node0xa6fbe0 -> Node0xa70020;
	Node0xa6ffb0 -> Node0xa70090;
	Node0xa6fed0 -> Node0xa70130;
	Node0xa701a0 -> Node0xa70210;
	Node0xa70320 -> Node0xa70390;
	Node0xa70210 -> Node0xa70390;
	Node0xa70390 -> Node0xa70400;
	Node0xa6fdf0 -> Node0xa70400;
	Node0xa70400 -> Node0xa70470;
	Node0xa6ff40 -> Node0xa70470;
	Node0xa70470 -> Node0xa704e0;
	Node0xa6ffb0 -> Node0xa704e0;
	Node0xa704e0 -> Node0xa70550;
	Node0xa70020 -> Node0xa70550;
	Node0xa70550 -> Node0xa705c0;
	Node0xa70090 -> Node0xa705c0;
	Node0xa705c0 -> Node0xa70630;
	Node0xa6fed0 -> Node0xa70630;
	Node0xa70630 -> Node0xa706a0;
	Node0xa70130 -> Node0xa706a0;
	Node0xa706a0 -> Node0xa70710;
	Node0xa702b0 -> Node0xa70710;
	Node0xa6fd10 -> Node0xa70780;
	Node0xa70710 -> Node0xa70780;
	Node0xa70780 -> Node0xa10268;
	Node0xa10268 -> Node0xa70c20;
}
