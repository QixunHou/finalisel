; ModuleID = '../.././c_source_file/0951_path_condition_crackme.c'
source_filename = "../.././c_source_file/0951_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = xor i32 %4, %3
  %8 = shl i32 %7, 1
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = add i32 %9, 1
  %12 = and i32 %2, %0
  %13 = xor i32 %2, -1
  %14 = and i32 %13, %1
  %15 = xor i32 %14, -1
  %16 = xor i32 %12, %15
  %17 = add i32 %16, %11
  %18 = add i32 %17, %6
  %19 = sub i32 %18, %8
  %20 = xor i32 %4, -1
  %21 = xor i32 %3, -1
  %22 = and i32 %4, %3
  %23 = xor i32 %7, -1
  %24 = or i32 %20, %3
  %25 = shl i32 %24, 1
  %26 = xor i32 %6, -1
  %27 = and i32 %20, %3
  %28 = xor i32 %0, -1
  %29 = xor i32 %1, -1
  %30 = and i32 %29, %2
  %31 = and i32 %30, %28
  %32 = or i32 %29, %2
  %33 = and i32 %32, %0
  %34 = xor i32 %33, 2147483647
  %35 = xor i32 %34, %31
  %36 = and i32 %2, %1
  %37 = and i32 %36, %28
  %38 = and i32 %9, %0
  %39 = or i32 %37, %38
  %40 = and i32 %1, %0
  %41 = or i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = or i32 %40, %42
  %44 = xor i32 %14, %0
  %45 = or i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %1
  %48 = and i32 %41, %0
  %49 = or i32 %37, %48
  %50 = and i32 %29, %0
  %51 = or i32 %50, %10
  %52 = xor i32 %1, %0
  %53 = and i32 %45, %52
  %54 = or i32 %13, %0
  %55 = xor i32 %54, -1
  %56 = add i32 %54, 1
  %57 = xor i32 %54, %40
  %58 = shl i32 %57, 1
  %59 = or i32 %42, %0
  %60 = xor i32 %36, -1
  %61 = and i32 %60, %0
  %62 = xor i32 %50, -1
  %63 = and i32 %10, %62
  %64 = and i32 %13, %62
  %65 = shl i32 %64, 1
  %66 = or i32 %1, %0
  %67 = xor i32 %66, %2
  %68 = shl i32 %67, 1
  %69 = xor i32 %45, %40
  %70 = add i32 %2, 1
  %71 = or i32 %52, %55
  %72 = or i32 %42, %28
  %73 = xor i32 %41, %0
  %74 = or i32 %29, %0
  %75 = xor i32 %74, -1
  %76 = or i32 %9, %75
  %77 = xor i32 %66, -1
  %78 = or i32 %77, %2
  %79 = or i32 %9, %40
  %80 = and i32 %54, %1
  %81 = xor i32 %74, %2
  %82 = and i32 %36, %0
  %83 = or i32 %82, %73
  %84 = and i32 %62, %2
  %85 = xor i32 %9, %0
  %86 = and i32 %13, %0
  %87 = or i32 %13, %1
  %88 = xor i32 %87, -1
  %89 = or i32 %86, %88
  %90 = or i32 %12, %1
  %91 = and i32 %9, %28
  %92 = or i32 %82, %91
  %93 = and i32 %10, %0
  %94 = or i32 %31, %93
  %95 = xor i32 %50, %15
  %96 = shl i32 %95, 1
  %97 = or i32 %60, %28
  %98 = xor i32 %2, %0
  %99 = xor i32 %98, -1
  %100 = or i32 %99, %77
  %101 = or i32 %40, %55
  %102 = and i32 %30, %0
  %103 = and i32 %32, %28
  %104 = or i32 %102, %103
  %105 = xor i32 %62, %2
  %106 = or i32 %41, %28
  %107 = or i32 %86, %36
  %108 = xor i32 %12, -1
  %109 = xor i32 %40, -1
  %110 = and i32 %9, %109
  %111 = xor i32 %86, %1
  %112 = xor i32 %52, -1
  %113 = and i32 %98, %112
  %114 = or i32 %99, %1
  %115 = or i32 %9, %50
  %116 = and i32 %15, %0
  %117 = and i32 %87, %28
  %118 = or i32 %98, %52
  %119 = xor i32 %41, %40
  %120 = or i32 %86, %1
  %121 = or i32 %10, %28
  %122 = or i32 %40, %88
  %123 = and i32 %99, %112
  %124 = shl i32 %14, 1
  %125 = or i32 %99, %75
  %126 = and i32 %45, %29
  %127 = and i32 %74, %2
  %128 = or i32 %12, %52
  %129 = or i32 %13, %75
  %130 = shl i32 %60, 1
  %131 = or i32 %36, %0
  %132 = xor i32 %82, -1
  %133 = xor i32 %73, %132
  %134 = and i32 %66, %10
  %135 = and i32 %99, %62
  %136 = and i32 %108, %112
  %137 = or i32 %40, %10
  %138 = or i32 %36, %50
  %139 = and i32 %54, %29
  %140 = or i32 %14, %0
  %141 = and i32 %52, %108
  %142 = xor i32 %36, %0
  %143 = xor i32 %87, %40
  %144 = and i32 %10, %109
  %145 = and i32 %52, %2
  %146 = and i32 %98, %29
  %147 = or i32 %31, %33
  %148 = or i32 %98, %29
  %149 = or i32 %98, %112
  %150 = and i32 %98, %52
  %151 = or i32 %12, %112
  %152 = xor i32 %86, %60
  %153 = or i32 %50, %99
  %154 = xor i32 %60, %0
  %155 = and i32 %54, %52
  %156 = or i32 %15, %28
  %157 = and i32 %74, %13
  %158 = xor i32 %12, %74
  %159 = or i32 %98, %1
  %160 = and i32 %9, %66
  %161 = and i32 %108, %29
  %162 = shl i32 %161, 2
  %163 = or i32 %98, %40
  %164 = or i32 %14, %28
  %165 = xor i32 %86, -1
  %166 = and i32 %165, %112
  %167 = and i32 %66, %13
  %168 = or i32 %36, %28
  %169 = or i32 %41, %0
  %170 = or i32 %98, %77
  %171 = and i32 %87, %0
  %172 = and i32 %60, %28
  %173 = and i32 %45, %112
  %174 = shl i32 %173, 1
  %175 = and i32 %15, %28
  %176 = xor i32 %165, %1
  %177 = or i32 %12, %42
  %178 = and i32 %45, %1
  %179 = xor i32 %50, %2
  %180 = shl i32 %179, 1
  %181 = or i32 %13, %112
  %182 = and i32 %74, %99
  %183 = and i32 %13, %109
  %184 = or i32 %98, %75
  %185 = and i32 %108, %1
  %186 = or i32 %40, %99
  %187 = add i32 %98, 1
  %188 = and i32 %66, %99
  %189 = shl i32 %188, 2
  %190 = or i32 %50, %2
  %191 = or i32 %52, %13
  %192 = xor i32 %15, %0
  %193 = xor i32 %91, %132
  %194 = or i32 %14, %50
  %195 = xor i32 %46, %1
  %196 = and i32 %9, %74
  %197 = xor i32 %54, %1
  %198 = or i32 %40, %46
  %199 = shl i32 %198, 1
  %200 = and i32 %99, %29
  %201 = xor i32 %102, -1
  %202 = xor i32 %103, %201
  %203 = or i32 %50, %13
  %204 = xor i32 %10, %0
  %205 = shl i32 %204, 1
  %206 = or i32 %46, %112
  %207 = and i32 %98, %66
  %208 = or i32 %99, %29
  %209 = or i32 %9, %0
  %210 = xor i32 %102, %209
  %211 = xor i32 %86, %87
  %212 = shl i32 %211, 1
  %213 = and i32 %98, %74
  %214 = shl i32 %213, 1
  %215 = xor i32 %85, %201
  %216 = xor i32 %109, %2
  %217 = and i32 %98, %62
  %218 = xor i32 %12, %1
  %219 = add i32 %14, 1
  %220 = and i32 %54, %112
  %221 = or i32 %52, %46
  %222 = and i32 %99, %1
  %223 = add i32 %45, 1
  %224 = or i32 %87, %28
  %225 = shl i32 %224, 1
  %226 = or i32 %52, %99
  %227 = and i32 %98, %109
  %228 = xor i32 %40, %2
  %229 = xor i32 %108, %1
  %230 = xor i32 %87, %0
  %231 = or i32 %86, %112
  %232 = shl i32 %231, 1
  %233 = and i32 %99, %109
  %234 = or i32 %87, %0
  %235 = or i32 %55, %1
  %236 = or i32 %86, %29
  %237 = or i32 %88, %28
  %238 = or i32 %10, %77
  %239 = and i32 %165, %29
  %240 = or i32 %40, %13
  %241 = add i32 %50, 1
  %242 = and i32 %41, %28
  %243 = or i32 %15, %0
  %244 = or i32 %98, %50
  %245 = shl i32 %244, 1
  %246 = xor i32 %12, %41
  %247 = and i32 %42, %28
  %248 = and i32 %14, %28
  %249 = mul i32 %248, 9
  %250 = and i32 %42, %0
  %251 = mul i32 %250, -25
  %252 = and i32 %14, %0
  %253 = shl i32 %252, 4
  %254 = and i32 %88, %28
  %255 = mul i32 %254, 6
  %256 = mul i32 %37, -14
  %257 = and i32 %88, %0
  %258 = mul i32 %257, -12
  %259 = add i32 %203, %112
  %260 = add i32 %259, %45
  %261 = add i32 %260, %86
  %262 = add i32 %261, %208
  %263 = add i32 %262, %207
  %264 = add i32 %263, %206
  %265 = add i32 %264, %192
  %266 = add i32 %265, %91
  %267 = add i32 %266, %139
  %268 = add i32 %267, %128
  %269 = add i32 %268, %118
  %270 = add i32 %269, %106
  %271 = add i32 %270, %79
  %272 = add i32 %271, %71
  %273 = sub i32 %138, %151
  %274 = sub i32 %273, %121
  %275 = add i32 %274, %26
  %276 = add i32 %275, %22
  %277 = mul i32 %276, 3
  %278 = sub i32 %0, %12
  %279 = sub i32 %278, %127
  %280 = add i32 %279, %38
  %281 = add i32 %280, %27
  %282 = mul i32 %281, 5
  %283 = add i32 %97, %74
  %284 = add i32 %283, %247
  %285 = shl i32 %284, 2
  %286 = add i32 %272, %4
  %287 = add i32 %286, %35
  %288 = shl i32 %287, 1
  %289 = add i32 %0, 4
  %290 = sub i32 %289, %50
  %291 = add i32 %290, %70
  %292 = sub i32 %291, %40
  %293 = sub i32 %292, %66
  %294 = add i32 %293, %75
  %295 = add i32 %294, %77
  %296 = add i32 %295, %241
  %297 = sub i32 %296, %3
  %298 = add i32 %297, %21
  %299 = sub i32 %298, %36
  %300 = add i32 %299, %56
  %301 = sub i32 %300, %78
  %302 = sub i32 %301, %81
  %303 = add i32 %302, %84
  %304 = sub i32 %303, %105
  %305 = add i32 %304, %108
  %306 = add i32 %305, %88
  %307 = sub i32 %306, %41
  %308 = add i32 %307, %129
  %309 = sub i32 %308, %145
  %310 = sub i32 %309, %157
  %311 = sub i32 %310, %87
  %312 = add i32 %311, %167
  %313 = add i32 %312, %54
  %314 = sub i32 %313, %181
  %315 = sub i32 %314, %183
  %316 = add i32 %315, %187
  %317 = sub i32 %316, %190
  %318 = sub i32 %317, %191
  %319 = add i32 %318, %9
  %320 = add i32 %319, %216
  %321 = add i32 %320, %219
  %322 = add i32 %321, %223
  %323 = sub i32 %322, %228
  %324 = add i32 %323, %42
  %325 = sub i32 %324, %240
  %326 = add i32 %325, %43
  %327 = add i32 %326, %44
  %328 = sub i32 %327, %47
  %329 = add i32 %328, %51
  %330 = add i32 %329, %53
  %331 = add i32 %330, %59
  %332 = add i32 %331, %61
  %333 = add i32 %332, %63
  %334 = sub i32 %333, %65
  %335 = sub i32 %334, %68
  %336 = add i32 %335, %69
  %337 = sub i32 %336, %72
  %338 = add i32 %337, %73
  %339 = sub i32 %338, %76
  %340 = add i32 %339, %80
  %341 = sub i32 %340, %85
  %342 = sub i32 %341, %89
  %343 = sub i32 %342, %90
  %344 = add i32 %343, %100
  %345 = add i32 %344, %101
  %346 = add i32 %345, %107
  %347 = add i32 %346, %110
  %348 = add i32 %347, %111
  %349 = add i32 %348, %113
  %350 = sub i32 %349, %114
  %351 = sub i32 %350, %115
  %352 = add i32 %351, %116
  %353 = sub i32 %352, %117
  %354 = add i32 %353, %119
  %355 = add i32 %354, %120
  %356 = add i32 %355, %122
  %357 = add i32 %356, %123
  %358 = sub i32 %357, %124
  %359 = sub i32 %358, %125
  %360 = sub i32 %359, %126
  %361 = sub i32 %360, %130
  %362 = sub i32 %361, %131
  %363 = add i32 %362, %134
  %364 = sub i32 %363, %135
  %365 = sub i32 %364, %136
  %366 = add i32 %365, %137
  %367 = sub i32 %366, %140
  %368 = add i32 %367, %141
  %369 = add i32 %368, %142
  %370 = add i32 %369, %143
  %371 = add i32 %370, %144
  %372 = add i32 %371, %146
  %373 = add i32 %372, %148
  %374 = add i32 %373, %149
  %375 = add i32 %374, %150
  %376 = add i32 %375, %152
  %377 = sub i32 %376, %153
  %378 = sub i32 %377, %154
  %379 = sub i32 %378, %155
  %380 = add i32 %379, %156
  %381 = add i32 %380, %158
  %382 = add i32 %381, %159
  %383 = add i32 %382, %160
  %384 = sub i32 %383, %163
  %385 = sub i32 %384, %164
  %386 = add i32 %385, %166
  %387 = sub i32 %386, %168
  %388 = sub i32 %387, %169
  %389 = add i32 %388, %170
  %390 = add i32 %389, %171
  %391 = sub i32 %390, %172
  %392 = add i32 %391, %175
  %393 = sub i32 %392, %176
  %394 = add i32 %393, %177
  %395 = add i32 %394, %178
  %396 = sub i32 %395, %180
  %397 = sub i32 %396, %182
  %398 = sub i32 %397, %184
  %399 = add i32 %398, %185
  %400 = add i32 %399, %186
  %401 = sub i32 %400, %194
  %402 = add i32 %401, %195
  %403 = sub i32 %402, %196
  %404 = sub i32 %403, %197
  %405 = add i32 %404, %200
  %406 = add i32 %405, %48
  %407 = add i32 %406, %217
  %408 = add i32 %407, %218
  %409 = add i32 %408, %220
  %410 = add i32 %409, %221
  %411 = add i32 %410, %222
  %412 = add i32 %411, %93
  %413 = add i32 %412, %226
  %414 = add i32 %413, %227
  %415 = add i32 %414, %229
  %416 = sub i32 %415, %230
  %417 = sub i32 %416, %233
  %418 = sub i32 %417, %234
  %419 = sub i32 %418, %235
  %420 = add i32 %419, %236
  %421 = add i32 %420, %237
  %422 = sub i32 %421, %238
  %423 = sub i32 %422, %239
  %424 = add i32 %423, %242
  %425 = sub i32 %424, %243
  %426 = sub i32 %425, %246
  %427 = add i32 %426, %82
  %428 = add i32 %427, %22
  %429 = add i32 %428, %23
  %430 = add i32 %429, %24
  %431 = sub i32 %430, %39
  %432 = add i32 %431, %49
  %433 = sub i32 %432, %58
  %434 = sub i32 %433, %83
  %435 = sub i32 %434, %92
  %436 = add i32 %435, %94
  %437 = sub i32 %436, %96
  %438 = add i32 %437, %104
  %439 = sub i32 %438, %133
  %440 = add i32 %439, %147
  %441 = sub i32 %440, %162
  %442 = sub i32 %441, %174
  %443 = sub i32 %442, %189
  %444 = add i32 %443, %193
  %445 = sub i32 %444, %199
  %446 = add i32 %445, %202
  %447 = sub i32 %446, %205
  %448 = sub i32 %447, %210
  %449 = sub i32 %448, %212
  %450 = sub i32 %449, %214
  %451 = add i32 %450, %215
  %452 = sub i32 %451, %225
  %453 = sub i32 %452, %232
  %454 = sub i32 %453, %245
  %455 = add i32 %454, %249
  %456 = add i32 %455, %251
  %457 = sub i32 %456, %253
  %458 = add i32 %457, %255
  %459 = add i32 %458, %256
  %460 = add i32 %459, %258
  %461 = sub i32 %460, %25
  %462 = add i32 %461, %285
  %463 = add i32 %462, %277
  %464 = add i32 %463, %282
  %465 = add i32 %464, %288
  %466 = icmp eq i32 %19, %465
  %467 = select i1 %466, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %468 = tail call i32 @puts(i8* nonnull dereferenceable(1) %467)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
