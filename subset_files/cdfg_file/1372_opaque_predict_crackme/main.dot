digraph "DFG for'main' function" {
	Node0xf073e8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xf07468[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xf074f8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xf07558[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xf079d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xf07ab8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xf07bb8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf07c78[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xf07d28[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf07f88[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xf08048[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xf081a8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xf08208[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xf09d50[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xf09f58[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf0a0b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf0a1c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xf0a288[shape=record, label="  ret i32 0"];
	Node0xf073e8 -> Node0xf07468;
	Node0xf07468 -> Node0xf074f8;
	Node0xf074f8 -> Node0xf07558;
	Node0xf07558 -> Node0xf079d8;
	Node0xf079d8 -> Node0xf07ab8;
	Node0xf07ab8 -> Node0xf07bb8;
	Node0xf07bb8 -> Node0xf07c78;
	Node0xf07c78 -> Node0xf07d28;
	Node0xf07d28 -> Node0xf07f88;
	Node0xf07f88 -> Node0xf08048;
	Node0xf08048 -> Node0xf081a8;
	Node0xf081a8 -> Node0xf08208;
	Node0xf08208 -> Node0xf09d50;
	Node0xf09d50 -> Node0xf09f58;
	Node0xf09f58 -> Node0xf0a0b8;
	Node0xf0a0b8 -> Node0xf0a1c8;
	Node0xf0a1c8 -> Node0xf0a288;
edge [color=red]
	Node0xf073e8 -> Node0xf07558;
	Node0xf07558 -> Node0xf079d8;
	Node0xf07468 -> Node0xf07ab8;
	Node0xf07ab8 -> Node0xf07bb8;
	Node0xf074f8 -> Node0xf07c78;
	Node0xf07c78 -> Node0xf07d28;
	Node0xf073e8 -> Node0xf07f88;
	Node0xf07468 -> Node0xf07f88;
	Node0xf074f8 -> Node0xf07f88;
	Node0xf073e8 -> Node0xf08048;
	Node0xf07468 -> Node0xf081a8;
	Node0xf074f8 -> Node0xf08208;
	Node0xf08048 -> Node0xf09d50;
	Node0xf081a8 -> Node0xf09d50;
	Node0xf08208 -> Node0xf09d50;
	Node0xf07c78 -> Node0xf09f58;
	Node0xf07ab8 -> Node0xf0a0b8;
	Node0xf07558 -> Node0xf0a1c8;
}
