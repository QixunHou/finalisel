; ModuleID = '../.././c_source_file/0758_path_condition_crackme.c'
source_filename = "../.././c_source_file/0758_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = or i32 %2, %1
  %6 = and i32 %5, %4
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %5, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %8, %10
  %12 = add i32 %11, %6
  %13 = sub i32 0, %12
  %14 = and i32 %2, %0
  %15 = xor i32 %14, %5
  %16 = xor i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %19
  %23 = shl i32 %22, 1
  %24 = or i32 %16, %1
  %25 = xor i32 %1, -1
  %26 = and i32 %25, %0
  %27 = or i32 %7, %26
  %28 = or i32 %2, %0
  %29 = xor i32 %28, %1
  %30 = or i32 %1, %0
  %31 = and i32 %30, %21
  %32 = or i32 %20, %0
  %33 = xor i32 %2, -1
  %34 = xor i32 %30, -1
  %35 = or i32 %33, %34
  %36 = and i32 %7, %4
  %37 = and i32 %5, %0
  %38 = xor i32 %37, -1
  %39 = xor i32 %36, %38
  %40 = and i32 %21, %0
  %41 = xor i32 %28, -1
  %42 = xor i32 %1, %0
  %43 = or i32 %42, %41
  %44 = and i32 %25, %2
  %45 = and i32 %44, %4
  %46 = or i32 %25, %2
  %47 = and i32 %46, %0
  %48 = or i32 %45, %47
  %49 = or i32 %14, %1
  %50 = or i32 %5, %0
  %51 = or i32 %33, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %0
  %54 = and i32 %33, %1
  %55 = or i32 %54, %26
  %56 = xor i32 %26, -1
  %57 = and i32 %16, %56
  %58 = xor i32 %42, -1
  %59 = or i32 %41, %58
  %60 = and i32 %33, %56
  %61 = or i32 %7, %4
  %62 = shl i32 %61, 1
  %63 = or i32 %17, %58
  %64 = or i32 %14, %25
  %65 = and i32 %44, %0
  %66 = xor i32 %20, %0
  %67 = or i32 %65, %66
  %68 = or i32 %7, %0
  %69 = and i32 %33, %0
  %70 = or i32 %69, %7
  %71 = or i32 %52, %4
  %72 = and i32 %19, %2
  %73 = or i32 %51, %4
  %74 = or i32 %26, %21
  %75 = or i32 %21, %0
  %76 = or i32 %33, %0
  %77 = xor i32 %76, -1
  %78 = shl i32 %77, 1
  %79 = xor i32 %30, %2
  %80 = xor i32 %8, %66
  %81 = or i32 %20, %4
  %82 = xor i32 %81, -1
  %83 = or i32 %45, %82
  %84 = and i32 %30, %33
  %85 = and i32 %17, %56
  %86 = and i32 %16, %58
  %87 = and i32 %20, %19
  %88 = shl i32 %87, 1
  %89 = and i32 %28, %25
  %90 = xor i32 %54, -1
  %91 = and i32 %42, %33
  %92 = xor i32 %5, %18
  %93 = or i32 %25, %0
  %94 = and i32 %93, %2
  %95 = or i32 %54, %0
  %96 = and i32 %76, %25
  %97 = or i32 %16, %34
  %98 = and i32 %46, %4
  %99 = xor i32 %65, -1
  %100 = xor i32 %98, %99
  %101 = xor i32 %93, -1
  %102 = or i32 %21, %101
  %103 = and i32 %20, %0
  %104 = shl i32 %103, 1
  %105 = xor i32 %5, -1
  %106 = or i32 %14, %105
  %107 = shl i32 %66, 1
  %108 = or i32 %21, %34
  %109 = shl i32 %69, 1
  %110 = and i32 %93, %21
  %111 = and i32 %51, %0
  %112 = xor i32 %14, %1
  %113 = or i32 %69, %58
  %114 = shl i32 %113, 1
  %115 = xor i32 %76, %1
  %116 = and i32 %76, %58
  %117 = or i32 %69, %1
  %118 = or i32 %14, %34
  %119 = or i32 %17, %101
  %120 = xor i32 %69, -1
  %121 = xor i32 %14, -1
  %122 = and i32 %121, %58
  %123 = or i32 %5, %4
  %124 = or i32 %20, %101
  %125 = and i32 %58, %2
  %126 = xor i32 %7, -1
  %127 = xor i32 %69, %126
  %128 = shl i32 %33, 2
  %129 = xor i32 %19, %2
  %130 = or i32 %90, %4
  %131 = and i32 %42, %120
  %132 = shl i32 %131, 2
  %133 = or i32 %14, %101
  %134 = or i32 %14, %54
  %135 = xor i32 %76, %18
  %136 = or i32 %126, %0
  %137 = and i32 %17, %19
  %138 = and i32 %126, %0
  %139 = xor i32 %34, %2
  %140 = or i32 %41, %1
  %141 = and i32 %16, %42
  %142 = or i32 %14, %58
  %143 = shl i32 %142, 1
  %144 = or i32 %16, %26
  %145 = xor i32 %126, %0
  %146 = shl i32 %145, 1
  %147 = xor i32 %47, -1
  %148 = xor i32 %45, %147
  %149 = shl i32 %126, 1
  %150 = xor i32 %120, %1
  %151 = shl i32 %150, 1
  %152 = and i32 %28, %1
  %153 = xor i32 %54, %0
  %154 = or i32 %36, %103
  %155 = and i32 %42, %121
  %156 = xor i32 %93, %2
  %157 = shl i32 %156, 1
  %158 = and i32 %16, %25
  %159 = xor i32 %66, %99
  %160 = and i32 %16, %30
  %161 = xor i32 %101, %2
  %162 = and i32 %93, %17
  %163 = or i32 %16, %18
  %164 = or i32 %69, %42
  %165 = or i32 %18, %105
  %166 = or i32 %36, %37
  %167 = or i32 %16, %25
  %168 = xor i32 %14, %30
  %169 = or i32 %8, %6
  %170 = and i32 %76, %1
  %171 = xor i32 %7, %0
  %172 = and i32 %90, %4
  %173 = or i32 %65, %98
  %174 = or i32 %14, %42
  %175 = and i32 %51, %4
  %176 = and i32 %76, %42
  %177 = or i32 %90, %0
  %178 = or i32 %16, %58
  %179 = xor i32 %14, %90
  %180 = or i32 %26, %2
  %181 = and i32 %21, %56
  %182 = xor i32 %52, %0
  %183 = xor i32 %51, %0
  %184 = or i32 %8, %9
  %185 = or i32 %21, %4
  %186 = add i32 %5, 1
  %187 = and i32 %120, %1
  %188 = and i32 %17, %1
  %189 = and i32 %42, %17
  %190 = or i32 %33, %58
  %191 = shl i32 %1, 2
  %192 = xor i32 %45, %81
  %193 = or i32 %18, %17
  %194 = or i32 %105, %0
  %195 = shl i32 %194, 1
  %196 = or i32 %54, %4
  %197 = or i32 %17, %34
  %198 = xor i32 %18, %2
  %199 = xor i32 %99, %0
  %200 = xor i32 %199, %46
  %201 = and i32 %42, %2
  %202 = and i32 %20, %4
  %203 = or i32 %8, %202
  %204 = shl i32 %203, 1
  %205 = or i32 %77, %58
  %206 = and i32 %28, %42
  %207 = or i32 %18, %2
  %208 = shl i32 %34, 1
  %209 = and i32 %54, %4
  %210 = shl i32 %209, 3
  %211 = and i32 %105, %0
  %212 = and i32 %54, %0
  %213 = mul i32 %212, 10
  %214 = and i32 %52, %4
  %215 = mul i32 %214, 13
  %216 = and i32 %52, %0
  %217 = add i32 %5, %25
  %218 = add i32 %217, %120
  %219 = add i32 %218, %187
  %220 = add i32 %219, %36
  %221 = add i32 %220, %152
  %222 = add i32 %221, %130
  %223 = add i32 %222, %115
  %224 = add i32 %223, %92
  %225 = add i32 %224, %85
  %226 = add i32 %225, %32
  %227 = add i32 %226, %24
  %228 = shl i32 %227, 1
  %229 = add i32 %171, %9
  %230 = add i32 %229, %63
  %231 = sub i32 %40, %230
  %232 = mul i32 %231, 5
  %233 = add i32 %75, %17
  %234 = sub i32 %233, %206
  %235 = mul i32 %234, 3
  %236 = add i32 %216, %211
  %237 = mul i32 %236, 17
  %238 = sub i32 %30, %0
  %239 = add i32 %238, %18
  %240 = add i32 %239, %56
  %241 = sub i32 %240, %191
  %242 = sub i32 %241, %35
  %243 = add i32 %242, %60
  %244 = add i32 %243, %72
  %245 = sub i32 %244, %79
  %246 = sub i32 %245, %84
  %247 = sub i32 %246, %91
  %248 = add i32 %247, %94
  %249 = add i32 %248, %125
  %250 = add i32 %249, %128
  %251 = sub i32 %250, %129
  %252 = add i32 %251, %121
  %253 = sub i32 %252, %139
  %254 = sub i32 %253, %161
  %255 = sub i32 %254, %180
  %256 = add i32 %255, %20
  %257 = add i32 %256, %186
  %258 = add i32 %257, %190
  %259 = add i32 %258, %7
  %260 = sub i32 %259, %198
  %261 = add i32 %260, %201
  %262 = sub i32 %261, %207
  %263 = sub i32 %262, %208
  %264 = sub i32 %263, %15
  %265 = sub i32 %264, %27
  %266 = sub i32 %265, %29
  %267 = sub i32 %266, %31
  %268 = sub i32 %267, %43
  %269 = sub i32 %268, %49
  %270 = add i32 %269, %50
  %271 = add i32 %270, %53
  %272 = add i32 %271, %55
  %273 = add i32 %272, %57
  %274 = add i32 %273, %59
  %275 = sub i32 %274, %64
  %276 = sub i32 %275, %68
  %277 = add i32 %276, %70
  %278 = add i32 %277, %71
  %279 = sub i32 %278, %73
  %280 = sub i32 %279, %74
  %281 = sub i32 %280, %78
  %282 = add i32 %281, %86
  %283 = add i32 %282, %89
  %284 = add i32 %283, %95
  %285 = sub i32 %284, %96
  %286 = add i32 %285, %97
  %287 = add i32 %286, %102
  %288 = sub i32 %287, %106
  %289 = add i32 %288, %108
  %290 = sub i32 %289, %109
  %291 = sub i32 %290, %110
  %292 = sub i32 %291, %111
  %293 = sub i32 %292, %112
  %294 = add i32 %293, %116
  %295 = add i32 %294, %117
  %296 = add i32 %295, %118
  %297 = sub i32 %296, %119
  %298 = sub i32 %297, %122
  %299 = sub i32 %298, %123
  %300 = sub i32 %299, %124
  %301 = sub i32 %300, %127
  %302 = sub i32 %301, %133
  %303 = sub i32 %302, %134
  %304 = sub i32 %303, %135
  %305 = sub i32 %304, %136
  %306 = add i32 %305, %137
  %307 = add i32 %306, %138
  %308 = add i32 %307, %140
  %309 = sub i32 %308, %141
  %310 = sub i32 %309, %144
  %311 = sub i32 %310, %149
  %312 = sub i32 %311, %37
  %313 = sub i32 %312, %153
  %314 = sub i32 %313, %155
  %315 = sub i32 %314, %157
  %316 = sub i32 %315, %158
  %317 = sub i32 %316, %160
  %318 = sub i32 %317, %162
  %319 = add i32 %318, %163
  %320 = sub i32 %319, %164
  %321 = add i32 %320, %165
  %322 = add i32 %321, %167
  %323 = sub i32 %322, %168
  %324 = add i32 %323, %170
  %325 = add i32 %324, %172
  %326 = add i32 %325, %174
  %327 = add i32 %326, %175
  %328 = add i32 %327, %176
  %329 = add i32 %328, %177
  %330 = add i32 %329, %178
  %331 = add i32 %330, %179
  %332 = add i32 %331, %181
  %333 = sub i32 %332, %182
  %334 = add i32 %333, %183
  %335 = sub i32 %334, %185
  %336 = add i32 %335, %188
  %337 = add i32 %336, %189
  %338 = sub i32 %337, %193
  %339 = add i32 %338, %196
  %340 = sub i32 %339, %197
  %341 = sub i32 %340, %205
  %342 = sub i32 %341, %202
  %343 = sub i32 %342, %8
  %344 = sub i32 %343, %23
  %345 = sub i32 %344, %39
  %346 = sub i32 %345, %48
  %347 = sub i32 %346, %62
  %348 = add i32 %347, %67
  %349 = add i32 %348, %80
  %350 = sub i32 %349, %83
  %351 = sub i32 %350, %88
  %352 = sub i32 %351, %100
  %353 = sub i32 %352, %104
  %354 = sub i32 %353, %107
  %355 = sub i32 %354, %114
  %356 = sub i32 %355, %132
  %357 = sub i32 %356, %143
  %358 = sub i32 %357, %146
  %359 = add i32 %358, %148
  %360 = sub i32 %359, %151
  %361 = sub i32 %360, %154
  %362 = add i32 %361, %159
  %363 = add i32 %362, %166
  %364 = add i32 %363, %169
  %365 = add i32 %364, %173
  %366 = add i32 %365, %184
  %367 = add i32 %366, %192
  %368 = sub i32 %367, %195
  %369 = sub i32 %368, %200
  %370 = add i32 %369, %210
  %371 = add i32 %370, %213
  %372 = add i32 %371, %215
  %373 = sub i32 %372, %204
  %374 = add i32 %373, %237
  %375 = add i32 %374, %235
  %376 = add i32 %375, %232
  %377 = add i32 %376, %228
  %378 = icmp eq i32 %377, %13
  %379 = select i1 %378, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %380 = tail call i32 @puts(i8* nonnull dereferenceable(1) %379)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
