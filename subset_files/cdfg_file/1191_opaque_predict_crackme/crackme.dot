digraph "DFG for'crackme' function" {
	Node0xfa15a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xfa1c50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xfa1d10[shape=record, label="  %5 = or i32 %4, %0"];
	Node0xfa1d80[shape=record, label="  %6 = sub i32 %3, %5"];
	Node0xfa1df0[shape=record, label="  %7 = shl i32 %3, 1"];
	Node0xfa1e90[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0xfa1f00[shape=record, label="  %9 = or i32 %1, %0"];
	Node0xfa1f70[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xfa1fe0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xfa2050[shape=record, label="  %12 = and i32 %1, %0"];
	Node0xfa20c0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0xfa2130[shape=record, label="  %14 = shl i32 %0, 1"];
	Node0xfa21a0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xfa2210[shape=record, label="  %16 = xor i32 %9, -1"];
	Node0xfa22b0[shape=record, label="  %17 = mul i32 %16, -7"];
	Node0xfa2320[shape=record, label="  %18 = shl i32 %5, 1"];
	Node0xfa2390[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0xfa2430[shape=record, label="  %20 = mul i32 %12, -3"];
	Node0xfa24a0[shape=record, label="  %21 = add i32 %13, %1"];
	Node0xfa2510[shape=record, label="  %22 = add i32 %21, %15"];
	Node0xfa2580[shape=record, label="  %23 = add i32 %22, %11"];
	Node0xfa25f0[shape=record, label="  %24 = add i32 %23, %17"];
	Node0xfa2660[shape=record, label="  %25 = add i32 %24, %20"];
	Node0xfa26d0[shape=record, label="  %26 = add i32 %25, %8"];
	Node0xfa2740[shape=record, label="  %27 = sub i32 %26, %19"];
	Node0xfa27b0[shape=record, label="  %28 = icmp eq i32 %6, %27"];
	Node0xf42268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xfa2c50[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xfa2ca0[shape=record, label="  ret void"];
	Node0xfa15a0 -> Node0xfa1c50;
	Node0xfa1c50 -> Node0xfa1d10;
	Node0xfa1d10 -> Node0xfa1d80;
	Node0xfa1d80 -> Node0xfa1df0;
	Node0xfa1df0 -> Node0xfa1e90;
	Node0xfa1e90 -> Node0xfa1f00;
	Node0xfa1f00 -> Node0xfa1f70;
	Node0xfa1f70 -> Node0xfa1fe0;
	Node0xfa1fe0 -> Node0xfa2050;
	Node0xfa2050 -> Node0xfa20c0;
	Node0xfa20c0 -> Node0xfa2130;
	Node0xfa2130 -> Node0xfa21a0;
	Node0xfa21a0 -> Node0xfa2210;
	Node0xfa2210 -> Node0xfa22b0;
	Node0xfa22b0 -> Node0xfa2320;
	Node0xfa2320 -> Node0xfa2390;
	Node0xfa2390 -> Node0xfa2430;
	Node0xfa2430 -> Node0xfa24a0;
	Node0xfa24a0 -> Node0xfa2510;
	Node0xfa2510 -> Node0xfa2580;
	Node0xfa2580 -> Node0xfa25f0;
	Node0xfa25f0 -> Node0xfa2660;
	Node0xfa2660 -> Node0xfa26d0;
	Node0xfa26d0 -> Node0xfa2740;
	Node0xfa2740 -> Node0xfa27b0;
	Node0xfa27b0 -> Node0xf42268;
	Node0xf42268 -> Node0xfa2c50;
	Node0xfa2c50 -> Node0xfa2ca0;
edge [color=red]
	Node0xfa1c50 -> Node0xfa1d10;
	Node0xfa15a0 -> Node0xfa1d80;
	Node0xfa1d10 -> Node0xfa1d80;
	Node0xfa15a0 -> Node0xfa1df0;
	Node0xfa1df0 -> Node0xfa1e90;
	Node0xfa1f00 -> Node0xfa1f70;
	Node0xfa1f70 -> Node0xfa1fe0;
	Node0xfa2050 -> Node0xfa20c0;
	Node0xfa2130 -> Node0xfa21a0;
	Node0xfa1f00 -> Node0xfa2210;
	Node0xfa2210 -> Node0xfa22b0;
	Node0xfa1d10 -> Node0xfa2320;
	Node0xfa2320 -> Node0xfa2390;
	Node0xfa2050 -> Node0xfa2430;
	Node0xfa20c0 -> Node0xfa24a0;
	Node0xfa24a0 -> Node0xfa2510;
	Node0xfa21a0 -> Node0xfa2510;
	Node0xfa2510 -> Node0xfa2580;
	Node0xfa1fe0 -> Node0xfa2580;
	Node0xfa2580 -> Node0xfa25f0;
	Node0xfa22b0 -> Node0xfa25f0;
	Node0xfa25f0 -> Node0xfa2660;
	Node0xfa2430 -> Node0xfa2660;
	Node0xfa2660 -> Node0xfa26d0;
	Node0xfa1e90 -> Node0xfa26d0;
	Node0xfa26d0 -> Node0xfa2740;
	Node0xfa2390 -> Node0xfa2740;
	Node0xfa1d80 -> Node0xfa27b0;
	Node0xfa2740 -> Node0xfa27b0;
	Node0xfa27b0 -> Node0xf42268;
	Node0xf42268 -> Node0xfa2c50;
}
