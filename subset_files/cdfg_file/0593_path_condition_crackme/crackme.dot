digraph "DFG for'crackme' function" {
	Node0x2060af0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2060b60[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x2060c20[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x2060c90[shape=record, label="  %6 = sub i32 %5, %4"];
	Node0x2060d00[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0x2060d70[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x2060de0[shape=record, label="  %9 = or i32 %7, 1"];
	Node0x2060e50[shape=record, label="  %10 = shl i32 %8, 1"];
	Node0x2060ec0[shape=record, label="  %11 = shl i32 %5, 1"];
	Node0x2060f60[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x2060fd0[shape=record, label="  %13 = xor i32 %4, -1"];
	Node0x2061040[shape=record, label="  %14 = and i32 %3, %0"];
	Node0x20610b0[shape=record, label="  %15 = add i32 %14, %13"];
	Node0x2061150[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x20611f0[shape=record, label="  %17 = add i32 %0, 2"];
	Node0x2061260[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x20612d0[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x2061340[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0x20613b0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x2061420[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x2061490[shape=record, label="  %23 = icmp eq i32 %6, %22"];
	Node0x2001268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2061930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x2061980[shape=record, label="  ret void"];
	Node0x2060af0 -> Node0x2060b60;
	Node0x2060b60 -> Node0x2060c20;
	Node0x2060c20 -> Node0x2060c90;
	Node0x2060c90 -> Node0x2060d00;
	Node0x2060d00 -> Node0x2060d70;
	Node0x2060d70 -> Node0x2060de0;
	Node0x2060de0 -> Node0x2060e50;
	Node0x2060e50 -> Node0x2060ec0;
	Node0x2060ec0 -> Node0x2060f60;
	Node0x2060f60 -> Node0x2060fd0;
	Node0x2060fd0 -> Node0x2061040;
	Node0x2061040 -> Node0x20610b0;
	Node0x20610b0 -> Node0x2061150;
	Node0x2061150 -> Node0x20611f0;
	Node0x20611f0 -> Node0x2061260;
	Node0x2061260 -> Node0x20612d0;
	Node0x20612d0 -> Node0x2061340;
	Node0x2061340 -> Node0x20613b0;
	Node0x20613b0 -> Node0x2061420;
	Node0x2061420 -> Node0x2061490;
	Node0x2061490 -> Node0x2001268;
	Node0x2001268 -> Node0x2061930;
	Node0x2061930 -> Node0x2061980;
edge [color=red]
	Node0x2060af0 -> Node0x2060b60;
	Node0x2060c20 -> Node0x2060c90;
	Node0x2060b60 -> Node0x2060c90;
	Node0x2060d00 -> Node0x2060de0;
	Node0x2060d70 -> Node0x2060e50;
	Node0x2060c20 -> Node0x2060ec0;
	Node0x2060ec0 -> Node0x2060f60;
	Node0x2060b60 -> Node0x2060fd0;
	Node0x2060af0 -> Node0x2061040;
	Node0x2061040 -> Node0x20610b0;
	Node0x2060fd0 -> Node0x20610b0;
	Node0x20610b0 -> Node0x2061150;
	Node0x20611f0 -> Node0x2061260;
	Node0x2060d70 -> Node0x2061260;
	Node0x2061260 -> Node0x20612d0;
	Node0x2060de0 -> Node0x20612d0;
	Node0x20612d0 -> Node0x2061340;
	Node0x2060e50 -> Node0x2061340;
	Node0x2061340 -> Node0x20613b0;
	Node0x2060f60 -> Node0x20613b0;
	Node0x20613b0 -> Node0x2061420;
	Node0x2061150 -> Node0x2061420;
	Node0x2060c90 -> Node0x2061490;
	Node0x2061420 -> Node0x2061490;
	Node0x2061490 -> Node0x2001268;
	Node0x2001268 -> Node0x2061930;
}
