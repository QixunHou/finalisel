digraph "DFG for'crackme' function" {
	Node0xb300f0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xb30160[shape=record, label="  %6 = xor i32 %5, %2"];
	Node0xb301d0[shape=record, label="  %7 = sub i32 %6, %2"];
	Node0xb30240[shape=record, label="  %8 = and i32 %3, %0"];
	Node0xb302b0[shape=record, label="  %9 = xor i32 %3, %0"];
	Node0xb30320[shape=record, label="  %10 = sub i32 %7, %8"];
	Node0xb30390[shape=record, label="  %11 = add i32 %10, %9"];
	Node0xb30400[shape=record, label="  %12 = or i32 %2, %1"];
	Node0xb30470[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0xb304e0[shape=record, label="  %14 = or i32 %5, %2"];
	Node0xb30550[shape=record, label="  %15 = and i32 %2, %1"];
	Node0xb305c0[shape=record, label="  %16 = xor i32 %12, -1"];
	Node0xb30660[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0xb306d0[shape=record, label="  %18 = and i32 %5, %2"];
	Node0xb30770[shape=record, label="  %19 = shl i32 %3, 1"];
	Node0xb30810[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0xb30880[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0xb308f0[shape=record, label="  %22 = or i32 %21, %3"];
	Node0xb30960[shape=record, label="  %23 = or i32 %3, %0"];
	Node0xb309d0[shape=record, label="  %24 = xor i32 %22, -1"];
	Node0xb30a40[shape=record, label="  %25 = and i32 %21, %3"];
	Node0xb30ab0[shape=record, label="  %26 = sub i32 %18, %3"];
	Node0xb30b20[shape=record, label="  %27 = add i32 %26, %24"];
	Node0xb30bc0[shape=record, label="  %28 = mul i32 %27, 3"];
	Node0xb30c30[shape=record, label="  %29 = add i32 %21, %1"];
	Node0xb30ca0[shape=record, label="  %30 = add i32 %29, %15"];
	Node0xb30d10[shape=record, label="  %31 = add i32 %30, %22"];
	Node0xb30d80[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0xb31030[shape=record, label="  %33 = add i32 %0, 6"];
	Node0xb310a0[shape=record, label="  %34 = add i32 %33, %13"];
	Node0xb31110[shape=record, label="  %35 = add i32 %34, %12"];
	Node0xb31180[shape=record, label="  %36 = sub i32 %35, %14"];
	Node0xb311f0[shape=record, label="  %37 = add i32 %36, %17"];
	Node0xb31260[shape=record, label="  %38 = add i32 %37, %23"];
	Node0xb312d0[shape=record, label="  %39 = add i32 %38, %25"];
	Node0xb31340[shape=record, label="  %40 = sub i32 %39, %20"];
	Node0xb313b0[shape=record, label="  %41 = add i32 %40, %28"];
	Node0xb31420[shape=record, label="  %42 = add i32 %41, %32"];
	Node0xb31490[shape=record, label="  %43 = icmp eq i32 %11, %42"];
	Node0xad0268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb31930[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0xb31980[shape=record, label="  ret void"];
	Node0xb300f0 -> Node0xb30160;
	Node0xb30160 -> Node0xb301d0;
	Node0xb301d0 -> Node0xb30240;
	Node0xb30240 -> Node0xb302b0;
	Node0xb302b0 -> Node0xb30320;
	Node0xb30320 -> Node0xb30390;
	Node0xb30390 -> Node0xb30400;
	Node0xb30400 -> Node0xb30470;
	Node0xb30470 -> Node0xb304e0;
	Node0xb304e0 -> Node0xb30550;
	Node0xb30550 -> Node0xb305c0;
	Node0xb305c0 -> Node0xb30660;
	Node0xb30660 -> Node0xb306d0;
	Node0xb306d0 -> Node0xb30770;
	Node0xb30770 -> Node0xb30810;
	Node0xb30810 -> Node0xb30880;
	Node0xb30880 -> Node0xb308f0;
	Node0xb308f0 -> Node0xb30960;
	Node0xb30960 -> Node0xb309d0;
	Node0xb309d0 -> Node0xb30a40;
	Node0xb30a40 -> Node0xb30ab0;
	Node0xb30ab0 -> Node0xb30b20;
	Node0xb30b20 -> Node0xb30bc0;
	Node0xb30bc0 -> Node0xb30c30;
	Node0xb30c30 -> Node0xb30ca0;
	Node0xb30ca0 -> Node0xb30d10;
	Node0xb30d10 -> Node0xb30d80;
	Node0xb30d80 -> Node0xb31030;
	Node0xb31030 -> Node0xb310a0;
	Node0xb310a0 -> Node0xb31110;
	Node0xb31110 -> Node0xb31180;
	Node0xb31180 -> Node0xb311f0;
	Node0xb311f0 -> Node0xb31260;
	Node0xb31260 -> Node0xb312d0;
	Node0xb312d0 -> Node0xb31340;
	Node0xb31340 -> Node0xb313b0;
	Node0xb313b0 -> Node0xb31420;
	Node0xb31420 -> Node0xb31490;
	Node0xb31490 -> Node0xad0268;
	Node0xad0268 -> Node0xb31930;
	Node0xb31930 -> Node0xb31980;
edge [color=red]
	Node0xb300f0 -> Node0xb30160;
	Node0xb30160 -> Node0xb301d0;
	Node0xb301d0 -> Node0xb30320;
	Node0xb30240 -> Node0xb30320;
	Node0xb30320 -> Node0xb30390;
	Node0xb302b0 -> Node0xb30390;
	Node0xb300f0 -> Node0xb304e0;
	Node0xb30400 -> Node0xb305c0;
	Node0xb305c0 -> Node0xb30660;
	Node0xb300f0 -> Node0xb306d0;
	Node0xb30770 -> Node0xb30810;
	Node0xb30880 -> Node0xb308f0;
	Node0xb308f0 -> Node0xb309d0;
	Node0xb30880 -> Node0xb30a40;
	Node0xb306d0 -> Node0xb30ab0;
	Node0xb30ab0 -> Node0xb30b20;
	Node0xb309d0 -> Node0xb30b20;
	Node0xb30b20 -> Node0xb30bc0;
	Node0xb30880 -> Node0xb30c30;
	Node0xb30c30 -> Node0xb30ca0;
	Node0xb30550 -> Node0xb30ca0;
	Node0xb30ca0 -> Node0xb30d10;
	Node0xb308f0 -> Node0xb30d10;
	Node0xb30d10 -> Node0xb30d80;
	Node0xb31030 -> Node0xb310a0;
	Node0xb30470 -> Node0xb310a0;
	Node0xb310a0 -> Node0xb31110;
	Node0xb30400 -> Node0xb31110;
	Node0xb31110 -> Node0xb31180;
	Node0xb304e0 -> Node0xb31180;
	Node0xb31180 -> Node0xb311f0;
	Node0xb30660 -> Node0xb311f0;
	Node0xb311f0 -> Node0xb31260;
	Node0xb30960 -> Node0xb31260;
	Node0xb31260 -> Node0xb312d0;
	Node0xb30a40 -> Node0xb312d0;
	Node0xb312d0 -> Node0xb31340;
	Node0xb30810 -> Node0xb31340;
	Node0xb31340 -> Node0xb313b0;
	Node0xb30bc0 -> Node0xb313b0;
	Node0xb313b0 -> Node0xb31420;
	Node0xb30d80 -> Node0xb31420;
	Node0xb30390 -> Node0xb31490;
	Node0xb31420 -> Node0xb31490;
	Node0xb31490 -> Node0xad0268;
	Node0xad0268 -> Node0xb31930;
}
