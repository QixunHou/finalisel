; ModuleID = '../.././c_source_file/1387_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1387_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = or i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %2
  %10 = shl i32 %9, 1
  %11 = add i32 %3, 1
  %12 = add i32 %11, %10
  %13 = sub i32 %12, %6
  %14 = xor i32 %4, -1
  %15 = xor i32 %4, %3
  %16 = and i32 %4, %3
  %17 = and i32 %14, %3
  %18 = xor i32 %17, -1
  %19 = or i32 %14, %3
  %20 = xor i32 %19, -1
  %21 = mul i32 %20, -6
  %22 = shl i32 %16, 1
  %23 = or i32 %2, %0
  %24 = xor i32 %23, %1
  %25 = xor i32 %2, -1
  %26 = and i32 %25, %0
  %27 = or i32 %25, %0
  %28 = xor i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %27, %29
  %31 = xor i32 %1, -1
  %32 = or i32 %31, %0
  %33 = and i32 %32, %25
  %34 = and i32 %31, %2
  %35 = and i32 %34, %0
  %36 = xor i32 %2, %1
  %37 = or i32 %36, %0
  %38 = xor i32 %35, %37
  %39 = and i32 %1, %0
  %40 = xor i32 %23, -1
  %41 = or i32 %39, %40
  %42 = and i32 %36, %32
  %43 = shl i32 %42, 1
  %44 = xor i32 %26, -1
  %45 = and i32 %44, %31
  %46 = xor i32 %32, %2
  %47 = and i32 %23, %29
  %48 = and i32 %31, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %25, %49
  %51 = and i32 %2, %1
  %52 = and i32 %51, %0
  %53 = or i32 %2, %1
  %54 = xor i32 %53, %0
  %55 = or i32 %52, %54
  %56 = xor i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %57, %1
  %59 = or i32 %28, %57
  %60 = xor i32 %32, -1
  %61 = add i32 %32, 1
  %62 = xor i32 %0, -1
  %63 = and i32 %25, %1
  %64 = xor i32 %63, -1
  %65 = and i32 %64, %62
  %66 = or i32 %36, %8
  %67 = and i32 %44, %29
  %68 = and i32 %25, %29
  %69 = shl i32 %68, 2
  %70 = and i32 %56, %32
  %71 = and i32 %51, %62
  %72 = and i32 %53, %0
  %73 = or i32 %71, %72
  %74 = xor i32 %39, -1
  %75 = and i32 %57, %74
  %76 = xor i32 %36, -1
  %77 = and i32 %76, %0
  %78 = shl i32 %77, 1
  %79 = or i32 %31, %2
  %80 = xor i32 %79, %0
  %81 = xor i32 %80, 2147483647
  %82 = xor i32 %81, %35
  %83 = and i32 %79, %62
  %84 = xor i32 %83, -1
  %85 = xor i32 %35, %84
  %86 = or i32 %56, %8
  %87 = or i32 %40, %31
  %88 = and i32 %44, %1
  %89 = xor i32 %52, -1
  %90 = xor i32 %54, %89
  %91 = or i32 %26, %31
  %92 = shl i32 %91, 1
  %93 = xor i32 %44, %1
  %94 = xor i32 %51, -1
  %95 = or i32 %94, %0
  %96 = or i32 %25, %1
  %97 = xor i32 %96, -1
  %98 = or i32 %97, %62
  %99 = and i32 %7, %57
  %100 = xor i32 %53, %39
  %101 = xor i32 %26, %1
  %102 = and i32 %7, %25
  %103 = and i32 %53, %62
  %104 = shl i32 %96, 1
  %105 = or i32 %97, %0
  %106 = and i32 %36, %74
  %107 = or i32 %57, %8
  %108 = shl i32 %107, 1
  %109 = and i32 %2, %0
  %110 = xor i32 %109, %32
  %111 = and i32 %27, %28
  %112 = shl i32 %111, 1
  %113 = xor i32 %53, -1
  %114 = or i32 %113, %62
  %115 = xor i32 %36, %0
  %116 = xor i32 %115, -1
  %117 = xor i32 %35, %116
  %118 = or i32 %52, %116
  %119 = or i32 %26, %1
  %120 = and i32 %28, %57
  %121 = add i32 %36, 1
  %122 = and i32 %32, %57
  %123 = or i32 %60, %2
  %124 = or i32 %109, %60
  %125 = or i32 %25, %29
  %126 = xor i32 %23, %39
  %127 = add i32 %23, 1
  %128 = or i32 %56, %1
  %129 = and i32 %36, %62
  %130 = xor i32 %129, %89
  %131 = and i32 %34, %62
  %132 = or i32 %36, %62
  %133 = xor i32 %132, -1
  %134 = or i32 %131, %133
  %135 = xor i32 %109, -1
  %136 = and i32 %135, %31
  %137 = xor i32 %7, %2
  %138 = and i32 %27, %31
  %139 = shl i32 %138, 1
  %140 = xor i32 %39, %2
  %141 = add i32 %1, 1
  %142 = and i32 %57, %31
  %143 = xor i32 %27, -1
  %144 = or i32 %143, %31
  %145 = or i32 %25, %60
  %146 = and i32 %32, %76
  %147 = xor i32 %40, %1
  %148 = xor i32 %96, %0
  %149 = and i32 %64, %0
  %150 = and i32 %7, %2
  %151 = shl i32 %150, 1
  %152 = or i32 %57, %31
  %153 = xor i32 %135, %1
  %154 = and i32 %36, %0
  %155 = xor i32 %71, 2147483647
  %156 = xor i32 %155, %154
  %157 = or i32 %25, %8
  %158 = or i32 %64, %0
  %159 = xor i32 %109, %64
  %160 = xor i32 %48, %2
  %161 = and i32 %56, %49
  %162 = or i32 %8, %2
  %163 = or i32 %109, %29
  %164 = and i32 %36, %49
  %165 = or i32 %53, %0
  %166 = and i32 %32, %2
  %167 = and i32 %76, %49
  %168 = and i32 %56, %29
  %169 = or i32 %40, %29
  %170 = xor i32 %52, %115
  %171 = or i32 %39, %2
  %172 = or i32 %109, %31
  %173 = or i32 %51, %0
  %174 = or i32 %63, %48
  %175 = xor i32 %26, %96
  %176 = shl i32 %113, 1
  %177 = xor i32 %49, %2
  %178 = and i32 %23, %1
  %179 = or i32 %76, %0
  %180 = or i32 %109, %28
  %181 = shl i32 %56, 1
  %182 = and i32 %29, %2
  %183 = xor i32 %26, %94
  %184 = xor i32 %63, %0
  %185 = xor i32 %143, %1
  %186 = or i32 %51, %48
  %187 = or i32 %56, %31
  %188 = xor i32 %97, %0
  %189 = or i32 %48, %57
  %190 = and i32 %57, %1
  %191 = shl i32 %190, 1
  %192 = xor i32 %74, %2
  %193 = and i32 %56, %74
  %194 = shl i32 %193, 2
  %195 = and i32 %96, %0
  %196 = shl i32 %195, 1
  %197 = and i32 %79, %0
  %198 = or i32 %131, %197
  %199 = or i32 %39, %57
  %200 = or i32 %39, %113
  %201 = or i32 %28, %25
  %202 = and i32 %76, %74
  %203 = xor i32 %109, %1
  %204 = xor i32 %27, %39
  %205 = or i32 %48, %25
  %206 = or i32 %63, %0
  %207 = shl i32 %206, 1
  %208 = or i32 %143, %1
  %209 = xor i32 %103, %89
  %210 = or i32 %56, %60
  %211 = and i32 %56, %28
  %212 = or i32 %51, %62
  %213 = or i32 %57, %29
  %214 = or i32 %56, %39
  %215 = xor i32 %51, %0
  %216 = shl i32 %215, 1
  %217 = and i32 %28, %25
  %218 = and i32 %28, %135
  %219 = and i32 %56, %31
  %220 = or i32 %48, %2
  %221 = or i32 %56, %29
  %222 = add i32 %39, 1
  %223 = or i32 %76, %62
  %224 = or i32 %39, %143
  %225 = shl i32 %224, 1
  %226 = and i32 %94, %62
  %227 = or i32 %56, %48
  %228 = or i32 %109, %113
  %229 = or i32 %35, %115
  %230 = xor i32 %197, -1
  %231 = xor i32 %131, %230
  %232 = or i32 %63, %62
  %233 = or i32 %28, %143
  %234 = or i32 %39, %25
  %235 = shl i32 %234, 1
  %236 = or i32 %71, %154
  %237 = xor i32 %113, %0
  %238 = or i32 %28, %40
  %239 = add i32 %51, 1
  %240 = or i32 %109, %63
  %241 = or i32 %26, %51
  %242 = or i32 %57, %60
  %243 = or i32 %64, %62
  %244 = or i32 %26, %97
  %245 = xor i32 %48, %64
  %246 = or i32 %96, %0
  %247 = shl i32 %246, 1
  %248 = or i32 %26, %29
  %249 = and i32 %56, %1
  %250 = xor i32 %155, %72
  %251 = or i32 %29, %2
  %252 = or i32 %40, %1
  %253 = xor i32 %37, -1
  %254 = or i32 %35, %253
  %255 = or i32 %39, %97
  %256 = xor i32 %60, %2
  %257 = and i32 %49, %2
  %258 = xor i32 %64, %0
  %259 = or i32 %36, %39
  %260 = xor i32 %96, %39
  %261 = add i32 %27, 1
  %262 = and i32 %135, %1
  %263 = and i32 %96, %62
  %264 = or i32 %35, %80
  %265 = or i32 %76, %8
  %266 = or i32 %39, %76
  %267 = or i32 %52, %129
  %268 = or i32 %94, %62
  %269 = shl i32 %268, 1
  %270 = or i32 %36, %48
  %271 = or i32 %28, %2
  %272 = xor i32 %48, %94
  %273 = xor i32 %27, %1
  %274 = shl i32 %273, 1
  %275 = and i32 %76, %62
  %276 = or i32 %26, %28
  %277 = and i32 %28, %44
  %278 = and i32 %74, %2
  %279 = add i32 %96, 1
  %280 = or i32 %48, %76
  %281 = and i32 %7, %76
  %282 = xor i32 %131, %132
  %283 = or i32 %56, %28
  %284 = or i32 %113, %0
  %285 = and i32 %57, %29
  %286 = or i32 %143, %29
  %287 = and i32 %57, %49
  %288 = or i32 %76, %60
  %289 = and i32 %135, %29
  %290 = or i32 %109, %8
  %291 = or i32 %109, %1
  %292 = shl i32 %291, 1
  %293 = xor i32 %109, %7
  %294 = or i32 %36, %60
  %295 = and i32 %25, %74
  %296 = or i32 %35, %83
  %297 = or i32 %53, %62
  %298 = shl i32 %57, 1
  %299 = xor i32 %76, %0
  %300 = and i32 %27, %1
  %301 = and i32 %28, %2
  %302 = or i32 %96, %62
  %303 = xor i32 %109, %53
  %304 = and i32 %36, %7
  %305 = and i32 %113, %62
  %306 = mul i32 %305, -14
  %307 = and i32 %63, %62
  %308 = mul i32 %307, -31
  %309 = and i32 %113, %0
  %310 = mul i32 %309, 22
  %311 = and i32 %63, %0
  %312 = mul i32 %311, 7
  %313 = and i32 %97, %62
  %314 = shl i32 %313, 4
  %315 = and i32 %97, %0
  %316 = mul i32 %315, 13
  %317 = sub i32 %71, %265
  %318 = add i32 %317, %148
  %319 = sub i32 %318, %136
  %320 = add i32 %319, %41
  %321 = add i32 %320, %30
  %322 = add i32 %321, %18
  %323 = sub i32 %322, %117
  %324 = mul i32 %323, 3
  %325 = sub i32 %8, %257
  %326 = sub i32 %325, %102
  %327 = add i32 %326, %67
  %328 = sub i32 %327, %297
  %329 = mul i32 %328, 5
  %330 = add i32 %95, %65
  %331 = shl i32 %330, 2
  %332 = add i32 %2, -1
  %333 = add i32 %332, %29
  %334 = add i32 %333, %36
  %335 = add i32 %334, %171
  %336 = add i32 %335, %125
  %337 = add i32 %336, %53
  %338 = add i32 %337, %33
  %339 = add i32 %338, %289
  %340 = add i32 %339, %243
  %341 = add i32 %340, %226
  %342 = add i32 %341, %223
  %343 = add i32 %342, %204
  %344 = add i32 %343, %180
  %345 = add i32 %344, %179
  %346 = add i32 %345, %122
  %347 = add i32 %346, %120
  %348 = add i32 %347, %87
  %349 = add i32 %348, %45
  %350 = add i32 %349, %4
  %351 = add i32 %350, %229
  %352 = add i32 %351, %17
  %353 = add i32 %352, %15
  %354 = add i32 %353, %156
  %355 = add i32 %354, %250
  %356 = add i32 %355, %82
  %357 = shl i32 %356, 1
  %358 = sub i32 3, %0
  %359 = sub i32 %358, %0
  %360 = add i32 %359, %1
  %361 = add i32 %360, %141
  %362 = add i32 %361, %7
  %363 = add i32 %362, %61
  %364 = add i32 %363, %25
  %365 = sub i32 %364, %32
  %366 = add i32 %365, %222
  %367 = sub i32 %366, %48
  %368 = add i32 %367, %39
  %369 = add i32 %368, %49
  %370 = sub i32 %369, %3
  %371 = sub i32 %370, %23
  %372 = add i32 %371, %46
  %373 = sub i32 %372, %50
  %374 = add i32 %373, %121
  %375 = sub i32 %374, %123
  %376 = add i32 %375, %127
  %377 = sub i32 %376, %137
  %378 = sub i32 %377, %140
  %379 = add i32 %378, %145
  %380 = sub i32 %379, %109
  %381 = sub i32 %380, %157
  %382 = add i32 %381, %160
  %383 = sub i32 %382, %162
  %384 = sub i32 %383, %166
  %385 = add i32 %384, %177
  %386 = sub i32 %385, %182
  %387 = add i32 %386, %192
  %388 = sub i32 %387, %27
  %389 = sub i32 %388, %201
  %390 = add i32 %389, %205
  %391 = add i32 %390, %217
  %392 = sub i32 %391, %220
  %393 = add i32 %392, %135
  %394 = add i32 %393, %239
  %395 = add i32 %394, %251
  %396 = add i32 %395, %256
  %397 = add i32 %396, %261
  %398 = add i32 %397, %271
  %399 = add i32 %398, %278
  %400 = add i32 %399, %279
  %401 = add i32 %400, %295
  %402 = add i32 %401, %301
  %403 = add i32 %402, %24
  %404 = sub i32 %403, %47
  %405 = add i32 %404, %58
  %406 = add i32 %405, %59
  %407 = add i32 %406, %66
  %408 = sub i32 %407, %69
  %409 = add i32 %408, %70
  %410 = sub i32 %409, %75
  %411 = sub i32 %410, %86
  %412 = add i32 %411, %88
  %413 = add i32 %412, %93
  %414 = sub i32 %413, %98
  %415 = add i32 %414, %99
  %416 = sub i32 %415, %100
  %417 = add i32 %416, %101
  %418 = add i32 %417, %103
  %419 = sub i32 %418, %104
  %420 = sub i32 %419, %105
  %421 = add i32 %420, %106
  %422 = add i32 %421, %110
  %423 = sub i32 %422, %114
  %424 = sub i32 %423, %119
  %425 = add i32 %424, %124
  %426 = add i32 %425, %126
  %427 = add i32 %426, %128
  %428 = add i32 %427, %142
  %429 = add i32 %428, %144
  %430 = sub i32 %429, %146
  %431 = add i32 %430, %147
  %432 = sub i32 %431, %149
  %433 = sub i32 %432, %151
  %434 = sub i32 %433, %152
  %435 = sub i32 %434, %153
  %436 = sub i32 %435, %158
  %437 = sub i32 %436, %159
  %438 = add i32 %437, %161
  %439 = add i32 %438, %154
  %440 = sub i32 %439, %163
  %441 = add i32 %440, %164
  %442 = sub i32 %441, %165
  %443 = add i32 %442, %167
  %444 = add i32 %443, %168
  %445 = add i32 %444, %169
  %446 = sub i32 %445, %37
  %447 = sub i32 %446, %172
  %448 = sub i32 %447, %173
  %449 = add i32 %448, %174
  %450 = add i32 %449, %175
  %451 = sub i32 %450, %176
  %452 = add i32 %451, %178
  %453 = sub i32 %452, %181
  %454 = sub i32 %453, %183
  %455 = sub i32 %454, %184
  %456 = sub i32 %455, %185
  %457 = sub i32 %456, %186
  %458 = add i32 %457, %187
  %459 = add i32 %458, %188
  %460 = sub i32 %459, %189
  %461 = add i32 %460, %199
  %462 = sub i32 %461, %200
  %463 = add i32 %462, %202
  %464 = add i32 %463, %203
  %465 = add i32 %464, %208
  %466 = add i32 %465, %210
  %467 = add i32 %466, %115
  %468 = add i32 %467, %211
  %469 = sub i32 %468, %212
  %470 = sub i32 %469, %213
  %471 = add i32 %470, %214
  %472 = add i32 %471, %218
  %473 = sub i32 %472, %219
  %474 = sub i32 %473, %221
  %475 = sub i32 %474, %227
  %476 = add i32 %475, %228
  %477 = sub i32 %476, %132
  %478 = add i32 %477, %232
  %479 = add i32 %478, %233
  %480 = sub i32 %479, %235
  %481 = add i32 %480, %237
  %482 = add i32 %481, %238
  %483 = add i32 %482, %240
  %484 = sub i32 %483, %241
  %485 = add i32 %484, %242
  %486 = sub i32 %485, %72
  %487 = sub i32 %486, %244
  %488 = add i32 %487, %245
  %489 = add i32 %488, %248
  %490 = sub i32 %489, %249
  %491 = sub i32 %490, %129
  %492 = add i32 %491, %252
  %493 = sub i32 %492, %255
  %494 = add i32 %493, %258
  %495 = add i32 %494, %259
  %496 = sub i32 %495, %260
  %497 = add i32 %496, %262
  %498 = add i32 %497, %263
  %499 = sub i32 %498, %266
  %500 = sub i32 %499, %270
  %501 = add i32 %500, %272
  %502 = add i32 %501, %275
  %503 = add i32 %502, %276
  %504 = sub i32 %503, %277
  %505 = sub i32 %504, %280
  %506 = sub i32 %505, %281
  %507 = sub i32 %506, %283
  %508 = sub i32 %507, %284
  %509 = sub i32 %508, %285
  %510 = sub i32 %509, %286
  %511 = sub i32 %510, %287
  %512 = add i32 %511, %288
  %513 = add i32 %512, %54
  %514 = sub i32 %513, %290
  %515 = sub i32 %514, %293
  %516 = add i32 %515, %294
  %517 = sub i32 %516, %298
  %518 = add i32 %517, %299
  %519 = add i32 %518, %300
  %520 = add i32 %519, %302
  %521 = add i32 %520, %303
  %522 = sub i32 %521, %304
  %523 = add i32 %522, %52
  %524 = add i32 %523, %16
  %525 = sub i32 %524, %19
  %526 = add i32 %525, %38
  %527 = sub i32 %526, %43
  %528 = add i32 %527, %55
  %529 = add i32 %528, %73
  %530 = sub i32 %529, %78
  %531 = sub i32 %530, %85
  %532 = sub i32 %531, %90
  %533 = sub i32 %532, %92
  %534 = sub i32 %533, %108
  %535 = sub i32 %534, %112
  %536 = sub i32 %535, %118
  %537 = sub i32 %536, %130
  %538 = sub i32 %537, %134
  %539 = sub i32 %538, %139
  %540 = add i32 %539, %170
  %541 = sub i32 %540, %191
  %542 = sub i32 %541, %194
  %543 = sub i32 %542, %196
  %544 = add i32 %543, %198
  %545 = sub i32 %544, %207
  %546 = sub i32 %545, %209
  %547 = sub i32 %546, %216
  %548 = sub i32 %547, %225
  %549 = sub i32 %548, %231
  %550 = sub i32 %549, %236
  %551 = sub i32 %550, %247
  %552 = sub i32 %551, %254
  %553 = add i32 %552, %264
  %554 = add i32 %553, %267
  %555 = sub i32 %554, %269
  %556 = sub i32 %555, %274
  %557 = add i32 %556, %282
  %558 = sub i32 %557, %292
  %559 = sub i32 %558, %296
  %560 = add i32 %559, %306
  %561 = add i32 %560, %308
  %562 = add i32 %561, %310
  %563 = add i32 %562, %312
  %564 = sub i32 %563, %314
  %565 = add i32 %564, %316
  %566 = add i32 %565, %21
  %567 = sub i32 %566, %22
  %568 = add i32 %567, %331
  %569 = add i32 %568, %329
  %570 = add i32 %569, %324
  %571 = add i32 %570, %357
  %572 = icmp eq i32 %13, %571
  %573 = select i1 %572, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %574 = tail call i32 @puts(i8* nonnull dereferenceable(1) %573)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
