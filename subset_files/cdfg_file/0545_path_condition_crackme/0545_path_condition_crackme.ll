; ModuleID = '../.././c_source_file/0545_path_condition_crackme.c'
source_filename = "../.././c_source_file/0545_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %1, %0
  %8 = or i32 %7, %6
  %9 = and i32 %2, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %1
  %12 = sub i32 %8, %11
  %13 = xor i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %1, -1
  %16 = and i32 %15, %0
  %17 = or i32 %16, %2
  %18 = or i32 %15, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %4, %19
  %21 = and i32 %2, %1
  %22 = or i32 %13, %19
  %23 = and i32 %15, %2
  %24 = and i32 %23, %0
  %25 = xor i32 %2, %1
  %26 = xor i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %24, %27
  %29 = and i32 %1, %0
  %30 = xor i32 %25, -1
  %31 = or i32 %29, %30
  %32 = and i32 %18, %14
  %33 = or i32 %21, %0
  %34 = xor i32 %0, -1
  %35 = xor i32 %21, -1
  %36 = or i32 %35, %34
  %37 = and i32 %23, %34
  %38 = or i32 %15, %2
  %39 = and i32 %38, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %37, %40
  %42 = or i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %34
  %45 = xor i32 %38, %0
  %46 = xor i32 %45, 2147483647
  %47 = xor i32 %46, %24
  %48 = shl i32 %5, 1
  %49 = or i32 %2, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %1
  %52 = and i32 %4, %1
  %53 = xor i32 %52, -1
  %54 = or i32 %53, %34
  %55 = add i32 %42, 1
  %56 = or i32 %1, %0
  %57 = xor i32 %56, -1
  %58 = xor i32 %57, %2
  %59 = xor i32 %29, -1
  %60 = and i32 %59, %2
  %61 = or i32 %29, %6
  %62 = shl i32 %61, 1
  %63 = xor i32 %7, -1
  %64 = and i32 %14, %63
  %65 = xor i32 %52, %0
  %66 = or i32 %9, %57
  %67 = and i32 %21, %0
  %68 = and i32 %42, %34
  %69 = xor i32 %68, 2147483647
  %70 = xor i32 %69, %67
  %71 = or i32 %4, %1
  %72 = xor i32 %71, -1
  %73 = xor i32 %72, %0
  %74 = or i32 %52, %0
  %75 = or i32 %37, %39
  %76 = or i32 %25, %57
  %77 = and i32 %4, %0
  %78 = or i32 %77, %7
  %79 = xor i32 %77, -1
  %80 = and i32 %7, %79
  %81 = xor i32 %21, %0
  %82 = and i32 %13, %59
  %83 = or i32 %57, %2
  %84 = xor i32 %53, %0
  %85 = or i32 %29, %72
  %86 = or i32 %25, %29
  %87 = and i32 %49, %1
  %88 = and i32 %7, %4
  %89 = and i32 %25, %0
  %90 = and i32 %18, %30
  %91 = shl i32 %90, 1
  %92 = or i32 %4, %57
  %93 = or i32 %9, %7
  %94 = and i32 %25, %34
  %95 = xor i32 %67, -1
  %96 = xor i32 %94, %95
  %97 = or i32 %21, %16
  %98 = or i32 %24, %45
  %99 = shl i32 %98, 1
  %100 = or i32 %4, %63
  %101 = and i32 %14, %15
  %102 = and i32 %71, %34
  %103 = or i32 %43, %0
  %104 = and i32 %38, %34
  %105 = or i32 %24, %104
  %106 = or i32 %13, %15
  %107 = shl i32 %106, 1
  %108 = and i32 %79, %15
  %109 = and i32 %21, %34
  %110 = xor i32 %109, 2147483647
  %111 = xor i32 %110, %89
  %112 = shl i32 %111, 1
  %113 = and i32 %56, %2
  %114 = or i32 %9, %63
  %115 = add i32 %18, 1
  %116 = or i32 %25, %34
  %117 = xor i32 %18, %2
  %118 = or i32 %7, %50
  %119 = xor i32 %49, %1
  %120 = xor i32 %16, %53
  %121 = or i32 %77, %21
  %122 = and i32 %71, %0
  %123 = shl i32 %122, 2
  %124 = and i32 %13, %7
  %125 = or i32 %16, %30
  %126 = shl i32 %125, 1
  %127 = or i32 %42, %0
  %128 = and i32 %30, %34
  %129 = xor i32 %16, -1
  %130 = and i32 %129, %2
  %131 = xor i32 %35, %0
  %132 = and i32 %42, %0
  %133 = or i32 %109, %132
  %134 = and i32 %49, %15
  %135 = or i32 %109, %89
  %136 = and i32 %13, %15
  %137 = add i32 %29, 1
  %138 = xor i32 %71, %29
  %139 = or i32 %6, %63
  %140 = and i32 %49, %63
  %141 = or i32 %6, %1
  %142 = and i32 %30, %59
  %143 = xor i32 %77, %1
  %144 = or i32 %72, %34
  %145 = or i32 %67, %27
  %146 = or i32 %29, %50
  %147 = or i32 %71, %34
  %148 = or i32 %50, %63
  %149 = and i32 %13, %56
  %150 = shl i32 %149, 1
  %151 = or i32 %24, %26
  %152 = and i32 %56, %14
  %153 = or i32 %77, %1
  %154 = xor i32 %110, %132
  %155 = shl i32 %154, 1
  %156 = or i32 %72, %0
  %157 = or i32 %21, %34
  %158 = shl i32 %157, 1
  %159 = xor i32 %59, %2
  %160 = and i32 %79, %1
  %161 = and i32 %18, %4
  %162 = and i32 %5, %15
  %163 = xor i32 %71, %0
  %164 = and i32 %4, %129
  %165 = or i32 %7, %2
  %166 = or i32 %13, %16
  %167 = and i32 %10, %1
  %168 = xor i32 %19, %2
  %169 = and i32 %25, %129
  %170 = or i32 %14, %19
  %171 = xor i32 %42, %0
  %172 = and i32 %63, %2
  %173 = and i32 %14, %59
  %174 = and i32 %13, %18
  %175 = xor i32 %9, %53
  %176 = or i32 %29, %4
  %177 = xor i32 %116, -1
  %178 = or i32 %37, %177
  %179 = xor i32 %9, %18
  %180 = or i32 %30, %0
  %181 = shl i32 %180, 1
  %182 = or i32 %52, %34
  %183 = xor i32 %77, %35
  %184 = xor i32 %42, %29
  %185 = or i32 %9, %52
  %186 = xor i32 %37, %116
  %187 = or i32 %13, %57
  %188 = or i32 %67, %94
  %189 = or i32 %25, %0
  %190 = and i32 %56, %30
  %191 = xor i32 %43, %0
  %192 = or i32 %29, %14
  %193 = and i32 %18, %2
  %194 = shl i32 %193, 1
  %195 = or i32 %9, %19
  %196 = and i32 %30, %0
  %197 = and i32 %25, %59
  %198 = or i32 %67, %171
  %199 = xor i32 %189, -1
  %200 = or i32 %24, %199
  %201 = or i32 %71, %0
  %202 = and i32 %14, %129
  %203 = and i32 %5, %1
  %204 = shl i32 %56, 1
  %205 = or i32 %25, %16
  %206 = or i32 %25, %19
  %207 = xor i32 %77, %71
  %208 = xor i32 %56, %2
  %209 = or i32 %16, %4
  %210 = or i32 %53, %0
  %211 = or i32 %7, %14
  %212 = and i32 %10, %63
  %213 = shl i32 %35, 1
  %214 = or i32 %29, %2
  %215 = and i32 %7, %14
  %216 = shl i32 %215, 1
  %217 = and i32 %35, %0
  %218 = shl i32 %217, 1
  %219 = and i32 %35, %34
  %220 = or i32 %14, %15
  %221 = xor i32 %5, %29
  %222 = or i32 %77, %63
  %223 = shl i32 %222, 1
  %224 = or i32 %9, %1
  %225 = xor i32 %9, %42
  %226 = or i32 %14, %57
  %227 = shl i32 %226, 1
  %228 = or i32 %9, %43
  %229 = shl i32 %228, 2
  %230 = or i32 %30, %34
  %231 = or i32 %13, %63
  %232 = or i32 %7, %4
  %233 = and i32 %79, %63
  %234 = and i32 %5, %63
  %235 = xor i32 %5, %1
  %236 = xor i32 %79, %1
  %237 = or i32 %30, %57
  %238 = shl i32 %237, 1
  %239 = or i32 %14, %1
  %240 = shl i32 %239, 1
  %241 = and i32 %14, %1
  %242 = and i32 %10, %15
  %243 = xor i32 %67, %26
  %244 = or i32 %67, %68
  %245 = or i32 %63, %2
  %246 = or i32 %50, %15
  %247 = and i32 %49, %7
  %248 = xor i32 %129, %2
  %249 = and i32 %53, %0
  %250 = and i32 %53, %34
  %251 = and i32 %4, %59
  %252 = shl i32 %72, 1
  %253 = or i32 %13, %29
  %254 = or i32 %52, %16
  %255 = and i32 %25, %18
  %256 = xor i32 %16, %2
  %257 = shl i32 %256, 1
  %258 = and i32 %7, %10
  %259 = xor i32 %24, %189
  %260 = and i32 %13, %1
  %261 = xor i32 %29, %2
  %262 = xor i32 %49, %29
  %263 = xor i32 %104, -1
  %264 = xor i32 %24, %263
  %265 = and i32 %13, %63
  %266 = or i32 %42, %34
  %267 = or i32 %13, %1
  %268 = xor i32 %171, %95
  %269 = add i32 %1, 1
  %270 = and i32 %43, %34
  %271 = mul i32 %270, 6
  %272 = and i32 %52, %34
  %273 = and i32 %43, %0
  %274 = and i32 %52, %0
  %275 = and i32 %72, %34
  %276 = shl i32 %109, 2
  %277 = and i32 %72, %0
  %278 = mul i32 %277, -11
  %279 = mul i32 %67, -9
  %280 = add i32 %29, %1
  %281 = add i32 %280, %261
  %282 = add i32 %281, %248
  %283 = add i32 %282, %77
  %284 = add i32 %283, %53
  %285 = add i32 %284, %130
  %286 = add i32 %285, %92
  %287 = sub i32 %9, %2
  %288 = sub i32 %287, %274
  %289 = sub i32 %288, %225
  %290 = add i32 %289, %139
  %291 = add i32 %290, %151
  %292 = mul i32 %291, 3
  %293 = add i32 %129, %2
  %294 = add i32 %293, %202
  %295 = shl i32 %294, 2
  %296 = sub i32 %0, %272
  %297 = sub i32 %296, %244
  %298 = mul i32 %297, 5
  %299 = add i32 %286, %13
  %300 = add i32 %299, %273
  %301 = add i32 %300, %26
  %302 = add i32 %301, %236
  %303 = add i32 %302, %210
  %304 = add i32 %303, %190
  %305 = add i32 %304, %169
  %306 = add i32 %305, %163
  %307 = add i32 %306, %152
  %308 = add i32 %307, %127
  %309 = add i32 %308, %97
  %310 = add i32 %309, %66
  %311 = add i32 %310, %22
  %312 = add i32 %311, %47
  %313 = add i32 %312, %70
  %314 = shl i32 %313, 1
  %315 = sub i32 %269, %0
  %316 = add i32 %315, %16
  %317 = add i32 %316, %18
  %318 = sub i32 %317, %7
  %319 = add i32 %318, %115
  %320 = add i32 %319, %137
  %321 = add i32 %320, %17
  %322 = add i32 %321, %20
  %323 = sub i32 %322, %21
  %324 = add i32 %323, %55
  %325 = sub i32 %324, %58
  %326 = sub i32 %325, %60
  %327 = add i32 %326, %83
  %328 = sub i32 %327, %88
  %329 = add i32 %328, %100
  %330 = add i32 %329, %6
  %331 = sub i32 %330, %113
  %332 = add i32 %331, %117
  %333 = sub i32 %332, %9
  %334 = add i32 %333, %79
  %335 = sub i32 %334, %159
  %336 = sub i32 %335, %161
  %337 = sub i32 %336, %164
  %338 = add i32 %337, %165
  %339 = add i32 %338, %168
  %340 = sub i32 %339, %172
  %341 = add i32 %340, %176
  %342 = sub i32 %341, %204
  %343 = sub i32 %342, %208
  %344 = sub i32 %343, %209
  %345 = sub i32 %344, %214
  %346 = sub i32 %345, %52
  %347 = add i32 %346, %232
  %348 = add i32 %347, %71
  %349 = sub i32 %348, %49
  %350 = add i32 %349, %245
  %351 = add i32 %350, %251
  %352 = add i32 %351, %42
  %353 = add i32 %352, %31
  %354 = add i32 %353, %32
  %355 = add i32 %354, %33
  %356 = add i32 %355, %36
  %357 = add i32 %356, %44
  %358 = sub i32 %357, %48
  %359 = add i32 %358, %51
  %360 = sub i32 %359, %54
  %361 = add i32 %360, %64
  %362 = sub i32 %361, %65
  %363 = add i32 %362, %73
  %364 = add i32 %363, %74
  %365 = sub i32 %364, %76
  %366 = sub i32 %365, %78
  %367 = add i32 %366, %80
  %368 = add i32 %367, %81
  %369 = sub i32 %368, %82
  %370 = add i32 %369, %84
  %371 = add i32 %370, %85
  %372 = add i32 %371, %86
  %373 = sub i32 %372, %87
  %374 = sub i32 %373, %89
  %375 = add i32 %374, %93
  %376 = sub i32 %375, %101
  %377 = sub i32 %376, %102
  %378 = add i32 %377, %103
  %379 = add i32 %378, %108
  %380 = add i32 %379, %114
  %381 = add i32 %380, %116
  %382 = add i32 %381, %94
  %383 = sub i32 %382, %118
  %384 = add i32 %383, %119
  %385 = sub i32 %384, %120
  %386 = sub i32 %385, %121
  %387 = add i32 %386, %124
  %388 = sub i32 %387, %128
  %389 = sub i32 %388, %131
  %390 = sub i32 %389, %134
  %391 = sub i32 %390, %136
  %392 = sub i32 %391, %138
  %393 = sub i32 %392, %140
  %394 = add i32 %393, %141
  %395 = add i32 %394, %142
  %396 = sub i32 %395, %143
  %397 = sub i32 %396, %144
  %398 = sub i32 %397, %146
  %399 = sub i32 %398, %147
  %400 = sub i32 %399, %148
  %401 = add i32 %400, %153
  %402 = sub i32 %401, %156
  %403 = sub i32 %402, %160
  %404 = add i32 %403, %162
  %405 = sub i32 %404, %166
  %406 = sub i32 %405, %167
  %407 = add i32 %406, %170
  %408 = sub i32 %407, %171
  %409 = sub i32 %408, %173
  %410 = sub i32 %409, %174
  %411 = add i32 %410, %175
  %412 = sub i32 %411, %179
  %413 = add i32 %412, %182
  %414 = sub i32 %413, %183
  %415 = add i32 %414, %184
  %416 = sub i32 %415, %185
  %417 = sub i32 %416, %187
  %418 = add i32 %417, %189
  %419 = sub i32 %418, %191
  %420 = add i32 %419, %192
  %421 = sub i32 %420, %194
  %422 = add i32 %421, %195
  %423 = add i32 %422, %196
  %424 = add i32 %423, %197
  %425 = add i32 %424, %201
  %426 = sub i32 %425, %203
  %427 = sub i32 %426, %205
  %428 = add i32 %427, %206
  %429 = add i32 %428, %207
  %430 = sub i32 %429, %211
  %431 = sub i32 %430, %212
  %432 = sub i32 %431, %213
  %433 = add i32 %432, %219
  %434 = sub i32 %433, %220
  %435 = sub i32 %434, %221
  %436 = sub i32 %435, %224
  %437 = add i32 %436, %230
  %438 = sub i32 %437, %231
  %439 = sub i32 %438, %233
  %440 = sub i32 %439, %234
  %441 = sub i32 %440, %132
  %442 = sub i32 %441, %235
  %443 = sub i32 %442, %241
  %444 = sub i32 %443, %242
  %445 = add i32 %444, %246
  %446 = add i32 %445, %247
  %447 = add i32 %446, %249
  %448 = sub i32 %447, %250
  %449 = sub i32 %448, %252
  %450 = add i32 %449, %253
  %451 = add i32 %450, %254
  %452 = sub i32 %451, %255
  %453 = sub i32 %452, %257
  %454 = add i32 %453, %258
  %455 = sub i32 %454, %260
  %456 = add i32 %455, %262
  %457 = sub i32 %456, %265
  %458 = sub i32 %457, %266
  %459 = sub i32 %458, %267
  %460 = add i32 %459, %275
  %461 = sub i32 %460, %28
  %462 = sub i32 %461, %41
  %463 = sub i32 %462, %62
  %464 = add i32 %463, %75
  %465 = sub i32 %464, %91
  %466 = add i32 %465, %96
  %467 = sub i32 %466, %105
  %468 = sub i32 %467, %107
  %469 = sub i32 %468, %123
  %470 = sub i32 %469, %126
  %471 = add i32 %470, %133
  %472 = sub i32 %471, %135
  %473 = add i32 %472, %145
  %474 = sub i32 %473, %150
  %475 = sub i32 %474, %158
  %476 = sub i32 %475, %178
  %477 = sub i32 %476, %181
  %478 = add i32 %477, %186
  %479 = add i32 %478, %188
  %480 = add i32 %479, %198
  %481 = add i32 %480, %200
  %482 = sub i32 %481, %216
  %483 = sub i32 %482, %218
  %484 = sub i32 %483, %223
  %485 = sub i32 %484, %227
  %486 = sub i32 %485, %229
  %487 = sub i32 %486, %238
  %488 = sub i32 %487, %240
  %489 = add i32 %488, %243
  %490 = sub i32 %489, %259
  %491 = sub i32 %490, %264
  %492 = add i32 %491, %268
  %493 = add i32 %492, %271
  %494 = sub i32 %493, %276
  %495 = add i32 %494, %278
  %496 = add i32 %495, %279
  %497 = sub i32 %496, %99
  %498 = sub i32 %497, %112
  %499 = sub i32 %498, %155
  %500 = add i32 %499, %295
  %501 = add i32 %500, %298
  %502 = add i32 %501, %292
  %503 = add i32 %502, %314
  %504 = icmp eq i32 %12, %503
  %505 = select i1 %504, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %506 = tail call i32 @puts(i8* nonnull dereferenceable(1) %505)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
