; ModuleID = '../.././c_source_file/1477_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1477_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %2, %0
  %9 = or i32 %8, %7
  %10 = and i32 %4, %3
  %11 = xor i32 %10, -1
  %12 = xor i32 %5, %3
  %13 = and i32 %12, %11
  %14 = add i32 %13, %9
  %15 = xor i32 %3, -1
  %16 = and i32 %15, %4
  %17 = xor i32 %16, -1
  %18 = xor i32 %17, %5
  %19 = shl i32 %18, 1
  %20 = add i32 %14, %19
  %21 = or i32 %2, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %22, %24
  %26 = xor i32 %2, -1
  %27 = and i32 %26, %1
  %28 = xor i32 %27, -1
  %29 = and i32 %28, %0
  %30 = or i32 %26, %1
  %31 = xor i32 %30, %0
  %32 = or i32 %7, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %2, %1
  %35 = or i32 %34, %33
  %36 = and i32 %7, %0
  %37 = or i32 %36, %26
  %38 = xor i32 %36, -1
  %39 = xor i32 %38, %2
  %40 = shl i32 %39, 1
  %41 = or i32 %26, %0
  %42 = xor i32 %41, %1
  %43 = xor i32 %2, %0
  %44 = or i32 %43, %23
  %45 = xor i32 %0, -1
  %46 = or i32 %2, %1
  %47 = and i32 %46, %45
  %48 = xor i32 %34, -1
  %49 = and i32 %32, %48
  %50 = or i32 %27, %36
  %51 = and i32 %7, %2
  %52 = and i32 %51, %45
  %53 = or i32 %7, %2
  %54 = and i32 %53, %0
  %55 = xor i32 %54, -1
  %56 = xor i32 %52, %55
  %57 = and i32 %26, %0
  %58 = xor i32 %57, 2147483647
  %59 = and i32 %58, %1
  %60 = shl i32 %59, 1
  %61 = and i32 %2, %1
  %62 = and i32 %61, %0
  %63 = xor i32 %34, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %62, %64
  %66 = and i32 %51, %0
  %67 = xor i32 %53, %0
  %68 = or i32 %66, %67
  %69 = and i32 %21, %7
  %70 = or i32 %1, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %26, %71
  %73 = or i32 %30, %0
  %74 = shl i32 %73, 1
  %75 = or i32 %23, %2
  %76 = and i32 %1, %0
  %77 = xor i32 %30, %76
  %78 = or i32 %34, %0
  %79 = xor i32 %66, %78
  %80 = or i32 %43, %76
  %81 = or i32 %57, %24
  %82 = xor i32 %30, -1
  %83 = or i32 %57, %82
  %84 = or i32 %24, %2
  %85 = and i32 %26, %24
  %86 = xor i32 %76, -1
  %87 = add i32 %76, 1
  %88 = xor i32 %78, -1
  %89 = or i32 %66, %88
  %90 = and i32 %34, %0
  %91 = or i32 %27, %0
  %92 = shl i32 %91, 1
  %93 = and i32 %43, %70
  %94 = or i32 %46, %45
  %95 = xor i32 %41, %76
  %96 = shl i32 %95, 1
  %97 = and i32 %26, %38
  %98 = xor i32 %8, %7
  %99 = xor i32 %41, -1
  %100 = or i32 %76, %99
  %101 = or i32 %28, %0
  %102 = or i32 %23, %99
  %103 = shl i32 %102, 1
  %104 = or i32 %76, %2
  %105 = and i32 %34, %38
  %106 = and i32 %38, %2
  %107 = or i32 %8, %24
  %108 = and i32 %32, %26
  %109 = or i32 %34, %36
  %110 = or i32 %34, %45
  %111 = xor i32 %52, %110
  %112 = xor i32 %62, %63
  %113 = xor i32 %21, %76
  %114 = or i32 %57, %7
  %115 = and i32 %48, %86
  %116 = xor i32 %43, -1
  %117 = or i32 %116, %1
  %118 = and i32 %70, %26
  %119 = or i32 %8, %27
  %120 = xor i32 %61, -1
  %121 = or i32 %120, %0
  %122 = and i32 %61, %45
  %123 = and i32 %46, %0
  %124 = xor i32 %123, -1
  %125 = xor i32 %122, %124
  %126 = xor i32 %46, -1
  %127 = and i32 %126, %45
  %128 = and i32 %27, %45
  %129 = and i32 %126, %0
  %130 = and i32 %27, %0
  %131 = shl i32 %130, 3
  %132 = and i32 %82, %45
  %133 = shl i32 %132, 3
  %134 = and i32 %82, %0
  %135 = xor i32 %5, -1
  %136 = and i32 %135, %11
  %137 = and i32 %135, %4
  %138 = xor i32 %137, -1
  %139 = and i32 %138, %15
  %140 = xor i32 %4, -1
  %141 = and i32 %5, %3
  %142 = and i32 %141, %140
  %143 = or i32 %5, %3
  %144 = and i32 %143, %4
  %145 = or i32 %142, %144
  %146 = or i32 %4, %3
  %147 = xor i32 %146, -1
  %148 = xor i32 %141, -1
  %149 = or i32 %5, %4
  %150 = xor i32 %4, %3
  %151 = and i32 %149, %150
  %152 = or i32 %135, %3
  %153 = xor i32 %152, -1
  %154 = or i32 %10, %153
  %155 = xor i32 %5, %4
  %156 = xor i32 %155, -1
  %157 = and i32 %5, %4
  %158 = xor i32 %157, -1
  %159 = xor i32 %150, -1
  %160 = and i32 %158, %159
  %161 = or i32 %135, %4
  %162 = and i32 %161, %150
  %163 = or i32 %157, %150
  %164 = xor i32 %143, -1
  %165 = or i32 %164, %140
  %166 = or i32 %12, %16
  %167 = shl i32 %166, 1
  %168 = and i32 %156, %159
  %169 = xor i32 %12, -1
  %170 = or i32 %169, %140
  %171 = shl i32 %170, 1
  %172 = xor i32 %157, %143
  %173 = or i32 %135, %147
  %174 = or i32 %155, %159
  %175 = or i32 %141, %140
  %176 = shl i32 %175, 1
  %177 = and i32 %12, %4
  %178 = or i32 %142, %177
  %179 = xor i32 %137, %148
  %180 = and i32 %135, %3
  %181 = xor i32 %180, -1
  %182 = and i32 %181, %4
  %183 = xor i32 %161, -1
  %184 = or i32 %10, %183
  %185 = shl i32 %184, 1
  %186 = xor i32 %144, 2147483647
  %187 = xor i32 %186, %142
  %188 = and i32 %158, %15
  %189 = or i32 %156, %159
  %190 = or i32 %16, %5
  %191 = and i32 %149, %15
  %192 = or i32 %16, %135
  %193 = or i32 %137, %153
  %194 = or i32 %141, %16
  %195 = shl i32 %194, 1
  %196 = and i32 %12, %17
  %197 = or i32 %152, %4
  %198 = xor i32 %147, %5
  %199 = xor i32 %16, %181
  %200 = or i32 %156, %3
  %201 = and i32 %161, %15
  %202 = shl i32 %201, 1
  %203 = shl i32 %157, 1
  %204 = xor i32 %161, %3
  %205 = or i32 %157, %3
  %206 = and i32 %15, %5
  %207 = and i32 %206, %140
  %208 = or i32 %15, %5
  %209 = and i32 %208, %4
  %210 = xor i32 %209, -1
  %211 = xor i32 %207, %210
  %212 = and i32 %138, %159
  %213 = add i32 %152, 1
  %214 = xor i32 %11, %5
  %215 = or i32 %137, %159
  %216 = and i32 %141, %4
  %217 = xor i32 %143, %4
  %218 = xor i32 %217, -1
  %219 = xor i32 %216, %218
  %220 = and i32 %155, %159
  %221 = add i32 %10, 1
  %222 = or i32 %143, %140
  %223 = and i32 %169, %17
  %224 = or i32 %181, %4
  %225 = and i32 %156, %15
  %226 = xor i32 %181, %4
  %227 = xor i32 %169, %4
  %228 = shl i32 %227, 1
  %229 = xor i32 %137, %3
  %230 = or i32 %153, %140
  %231 = or i32 %15, %4
  %232 = xor i32 %231, -1
  %233 = or i32 %155, %232
  %234 = shl i32 %233, 1
  %235 = xor i32 %149, -1
  %236 = or i32 %235, %15
  %237 = and i32 %150, %5
  %238 = xor i32 %232, %5
  %239 = xor i32 %146, %5
  %240 = and i32 %11, %5
  %241 = or i32 %156, %232
  %242 = or i32 %180, %140
  %243 = or i32 %150, %183
  %244 = or i32 %16, %169
  %245 = and i32 %155, %15
  %246 = xor i32 %157, %3
  %247 = or i32 %10, %135
  %248 = xor i32 %152, %4
  %249 = shl i32 %248, 1
  %250 = and i32 %148, %140
  %251 = and i32 %146, %5
  %252 = xor i32 %10, %5
  %253 = and i32 %150, %158
  %254 = or i32 %155, %150
  %255 = or i32 %10, %5
  %256 = or i32 %10, %235
  %257 = or i32 %150, %235
  %258 = or i32 %152, %140
  %259 = or i32 %169, %147
  %260 = or i32 %216, %217
  %261 = or i32 %169, %4
  %262 = and i32 %155, %146
  %263 = and i32 %155, %17
  %264 = xor i32 %231, %5
  %265 = xor i32 %158, %3
  %266 = shl i32 %4, 1
  %267 = xor i32 %138, %3
  %268 = or i32 %169, %232
  %269 = and i32 %159, %5
  %270 = and i32 %206, %4
  %271 = xor i32 %208, %4
  %272 = xor i32 %271, -1
  %273 = xor i32 %270, %272
  %274 = add i32 %16, 1
  %275 = or i32 %12, %4
  %276 = xor i32 %270, %275
  %277 = or i32 %137, %150
  %278 = or i32 %270, %271
  %279 = or i32 %157, %164
  %280 = xor i32 %275, -1
  %281 = or i32 %270, %280
  %282 = or i32 %12, %140
  %283 = and i32 %17, %5
  %284 = or i32 %157, %15
  %285 = or i32 %164, %4
  %286 = shl i32 %285, 1
  %287 = and i32 %146, %169
  %288 = and i32 %161, %159
  %289 = or i32 %183, %3
  %290 = and i32 %169, %4
  %291 = and i32 %181, %140
  %292 = xor i32 %282, -1
  %293 = or i32 %207, %292
  %294 = xor i32 %180, %4
  %295 = or i32 %180, %16
  %296 = or i32 %159, %5
  %297 = or i32 %141, %4
  %298 = or i32 %10, %156
  %299 = and i32 %135, %17
  %300 = or i32 %16, %156
  %301 = or i32 %10, %164
  %302 = and i32 %155, %231
  %303 = and i32 %138, %3
  %304 = and i32 %231, %135
  %305 = and i32 %146, %156
  %306 = shl i32 %305, 1
  %307 = xor i32 %148, %4
  %308 = xor i32 %12, %4
  %309 = xor i32 %308, -1
  %310 = or i32 %216, %309
  %311 = or i32 %150, %135
  %312 = and i32 %231, %5
  %313 = and i32 %12, %146
  %314 = and i32 %169, %11
  %315 = or i32 %157, %147
  %316 = shl i32 %315, 2
  %317 = or i32 %150, %5
  %318 = or i32 %181, %140
  %319 = or i32 %235, %159
  %320 = and i32 %161, %3
  %321 = and i32 %156, %17
  %322 = xor i32 %164, %4
  %323 = xor i32 %208, -1
  %324 = or i32 %323, %4
  %325 = xor i32 %270, %324
  %326 = and i32 %146, %135
  %327 = and i32 %152, %4
  %328 = shl i32 %159, 1
  %329 = xor i32 %149, %10
  %330 = or i32 %183, %159
  %331 = xor i32 %149, %3
  %332 = and i32 %155, %150
  %333 = or i32 %155, %3
  %334 = xor i32 %16, %5
  %335 = and i32 %158, %3
  %336 = or i32 %232, %5
  %337 = and i32 %135, %159
  %338 = and i32 %12, %231
  %339 = xor i32 %216, %308
  %340 = or i32 %143, %4
  %341 = shl i32 %340, 1
  %342 = or i32 %148, %140
  %343 = and i32 %152, %140
  %344 = xor i32 %161, %10
  %345 = xor i32 %152, %10
  %346 = or i32 %157, %232
  %347 = add i32 %231, 1
  %348 = or i32 %137, %15
  %349 = and i32 %150, %135
  %350 = xor i32 %207, %282
  %351 = xor i32 %157, %146
  %352 = or i32 %150, %156
  %353 = and i32 %169, %140
  %354 = or i32 %135, %232
  %355 = xor i32 %157, %181
  %356 = or i32 %155, %147
  %357 = xor i32 %143, 2147483647
  %358 = or i32 %357, %4
  %359 = xor i32 %358, %216
  %360 = shl i32 %359, 1
  %361 = or i32 %12, %10
  %362 = or i32 %137, %141
  %363 = shl i32 %362, 1
  %364 = and i32 %148, %4
  %365 = or i32 %155, %10
  %366 = or i32 %148, %4
  %367 = and i32 %12, %140
  %368 = or i32 %216, %367
  %369 = and i32 %156, %3
  %370 = shl i32 %369, 1
  %371 = and i32 %164, %140
  %372 = mul i32 %371, -31
  %373 = and i32 %180, %140
  %374 = and i32 %164, %4
  %375 = and i32 %180, %4
  %376 = and i32 %153, %140
  %377 = mul i32 %142, -15
  %378 = and i32 %153, %4
  %379 = mul i32 %378, -9
  %380 = mul i32 %216, -14
  %381 = add i32 %134, %140
  %382 = add i32 %381, %105
  %383 = add i32 %382, %101
  %384 = add i32 %383, %334
  %385 = add i32 %384, %152
  %386 = add i32 %385, %304
  %387 = add i32 %386, %149
  %388 = add i32 %387, %136
  %389 = add i32 %388, %364
  %390 = add i32 %389, %353
  %391 = add i32 %390, %332
  %392 = add i32 %391, %330
  %393 = add i32 %392, %320
  %394 = add i32 %393, %297
  %395 = add i32 %394, %287
  %396 = add i32 %395, %268
  %397 = add i32 %396, %257
  %398 = add i32 %397, %246
  %399 = add i32 %398, %241
  %400 = add i32 %399, %215
  %401 = add i32 %400, %212
  %402 = add i32 %401, %188
  %403 = add i32 %402, %179
  %404 = add i32 %403, %276
  %405 = add i32 %404, %187
  %406 = shl i32 %405, 1
  %407 = add i32 %198, %251
  %408 = add i32 %407, %267
  %409 = add i32 %408, %303
  %410 = shl i32 %409, 2
  %411 = add i32 %375, %374
  %412 = mul i32 %411, -13
  %413 = sub i32 %128, %373
  %414 = mul i32 %413, 7
  %415 = add i32 %298, %3
  %416 = mul i32 %415, 5
  %417 = xor i32 %62, -1
  %418 = add i32 %36, %417
  %419 = sub i32 %418, %129
  %420 = sub i32 %419, %127
  %421 = add i32 %420, %25
  %422 = add i32 %421, %331
  %423 = add i32 %422, %376
  %424 = sub i32 %423, %220
  %425 = sub i32 %424, %196
  %426 = sub i32 %425, %191
  %427 = sub i32 %426, %162
  %428 = mul i32 %427, 3
  %429 = sub i32 -3, %1
  %430 = add i32 %429, %26
  %431 = add i32 %430, %87
  %432 = add i32 %431, %24
  %433 = add i32 %432, %70
  %434 = add i32 %433, %37
  %435 = sub i32 %434, %72
  %436 = add i32 %435, %75
  %437 = add i32 %436, %84
  %438 = add i32 %437, %85
  %439 = sub i32 %438, %57
  %440 = add i32 %439, %27
  %441 = sub i32 %440, %97
  %442 = sub i32 %441, %104
  %443 = add i32 %442, %106
  %444 = add i32 %443, %108
  %445 = sub i32 %444, %8
  %446 = sub i32 %445, %118
  %447 = add i32 %446, %29
  %448 = add i32 %447, %31
  %449 = sub i32 %448, %35
  %450 = sub i32 %449, %40
  %451 = sub i32 %450, %42
  %452 = add i32 %451, %44
  %453 = add i32 %452, %47
  %454 = add i32 %453, %49
  %455 = add i32 %454, %50
  %456 = sub i32 %455, %69
  %457 = sub i32 %456, %77
  %458 = add i32 %457, %80
  %459 = add i32 %458, %81
  %460 = add i32 %459, %83
  %461 = add i32 %460, %90
  %462 = add i32 %461, %93
  %463 = sub i32 %462, %94
  %464 = sub i32 %463, %98
  %465 = add i32 %464, %100
  %466 = add i32 %465, %107
  %467 = sub i32 %466, %109
  %468 = add i32 %467, %113
  %469 = add i32 %468, %114
  %470 = add i32 %469, %115
  %471 = add i32 %470, %117
  %472 = sub i32 %471, %119
  %473 = add i32 %472, %121
  %474 = sub i32 %473, %122
  %475 = add i32 %474, %56
  %476 = sub i32 %475, %65
  %477 = sub i32 %476, %68
  %478 = sub i32 %477, %74
  %479 = sub i32 %478, %79
  %480 = add i32 %479, %89
  %481 = sub i32 %480, %92
  %482 = sub i32 %481, %96
  %483 = sub i32 %482, %103
  %484 = sub i32 %483, %111
  %485 = add i32 %484, %112
  %486 = sub i32 %485, %125
  %487 = sub i32 %486, %131
  %488 = sub i32 %487, %133
  %489 = add i32 %488, %221
  %490 = sub i32 %489, %266
  %491 = add i32 %490, %274
  %492 = add i32 %491, %347
  %493 = add i32 %492, %16
  %494 = sub i32 %493, %60
  %495 = sub i32 %494, %12
  %496 = sub i32 %495, %141
  %497 = add i32 %496, %173
  %498 = add i32 %497, %161
  %499 = sub i32 %498, %141
  %500 = sub i32 %499, %190
  %501 = add i32 %500, %192
  %502 = add i32 %501, %213
  %503 = add i32 %502, %214
  %504 = add i32 %503, %169
  %505 = sub i32 %504, %237
  %506 = sub i32 %505, %238
  %507 = sub i32 %506, %239
  %508 = add i32 %507, %240
  %509 = sub i32 %508, %247
  %510 = add i32 %509, %252
  %511 = sub i32 %510, %255
  %512 = sub i32 %511, %143
  %513 = add i32 %512, %264
  %514 = add i32 %513, %269
  %515 = sub i32 %514, %283
  %516 = add i32 %515, %296
  %517 = sub i32 %516, %299
  %518 = add i32 %517, %311
  %519 = sub i32 %518, %312
  %520 = add i32 %519, %235
  %521 = add i32 %520, %317
  %522 = sub i32 %521, %326
  %523 = sub i32 %522, %328
  %524 = sub i32 %523, %336
  %525 = add i32 %524, %337
  %526 = sub i32 %525, %349
  %527 = add i32 %526, %354
  %528 = add i32 %527, %139
  %529 = add i32 %528, %151
  %530 = add i32 %529, %154
  %531 = sub i32 %530, %160
  %532 = sub i32 %531, %163
  %533 = add i32 %532, %165
  %534 = add i32 %533, %168
  %535 = add i32 %534, %172
  %536 = add i32 %535, %174
  %537 = add i32 %536, %182
  %538 = add i32 %537, %189
  %539 = add i32 %538, %193
  %540 = sub i32 %539, %197
  %541 = sub i32 %540, %199
  %542 = sub i32 %541, %200
  %543 = sub i32 %542, %203
  %544 = sub i32 %543, %204
  %545 = add i32 %544, %205
  %546 = add i32 %545, %222
  %547 = sub i32 %546, %223
  %548 = add i32 %547, %224
  %549 = add i32 %548, %225
  %550 = sub i32 %549, %226
  %551 = add i32 %550, %229
  %552 = sub i32 %551, %230
  %553 = add i32 %552, %236
  %554 = sub i32 %553, %242
  %555 = add i32 %554, %243
  %556 = add i32 %555, %244
  %557 = add i32 %556, %245
  %558 = sub i32 %557, %250
  %559 = sub i32 %558, %253
  %560 = sub i32 %559, %254
  %561 = add i32 %560, %144
  %562 = add i32 %561, %177
  %563 = sub i32 %562, %256
  %564 = sub i32 %563, %258
  %565 = add i32 %564, %259
  %566 = sub i32 %565, %261
  %567 = sub i32 %566, %262
  %568 = sub i32 %567, %263
  %569 = sub i32 %568, %265
  %570 = sub i32 %569, %277
  %571 = add i32 %570, %279
  %572 = add i32 %571, %282
  %573 = add i32 %572, %284
  %574 = add i32 %573, %288
  %575 = sub i32 %574, %289
  %576 = sub i32 %575, %290
  %577 = sub i32 %576, %291
  %578 = add i32 %577, %294
  %579 = sub i32 %578, %295
  %580 = sub i32 %579, %300
  %581 = sub i32 %580, %301
  %582 = add i32 %581, %302
  %583 = sub i32 %582, %307
  %584 = add i32 %583, %313
  %585 = sub i32 %584, %314
  %586 = add i32 %585, %318
  %587 = add i32 %586, %319
  %588 = add i32 %587, %321
  %589 = sub i32 %588, %322
  %590 = add i32 %589, %327
  %591 = sub i32 %590, %329
  %592 = sub i32 %591, %333
  %593 = sub i32 %592, %335
  %594 = sub i32 %593, %338
  %595 = add i32 %594, %342
  %596 = sub i32 %595, %343
  %597 = sub i32 %596, %344
  %598 = sub i32 %597, %345
  %599 = sub i32 %598, %346
  %600 = add i32 %599, %348
  %601 = add i32 %600, %351
  %602 = sub i32 %601, %352
  %603 = sub i32 %602, %217
  %604 = sub i32 %603, %355
  %605 = add i32 %604, %356
  %606 = sub i32 %605, %308
  %607 = sub i32 %606, %361
  %608 = sub i32 %607, %365
  %609 = add i32 %608, %366
  %610 = sub i32 %609, %145
  %611 = sub i32 %610, %167
  %612 = sub i32 %611, %171
  %613 = sub i32 %612, %176
  %614 = sub i32 %613, %178
  %615 = sub i32 %614, %185
  %616 = sub i32 %615, %195
  %617 = sub i32 %616, %202
  %618 = add i32 %617, %211
  %619 = sub i32 %618, %219
  %620 = sub i32 %619, %228
  %621 = sub i32 %620, %234
  %622 = sub i32 %621, %249
  %623 = sub i32 %622, %260
  %624 = sub i32 %623, %273
  %625 = add i32 %624, %278
  %626 = add i32 %625, %281
  %627 = sub i32 %626, %286
  %628 = sub i32 %627, %293
  %629 = sub i32 %628, %306
  %630 = sub i32 %629, %310
  %631 = sub i32 %630, %316
  %632 = add i32 %631, %325
  %633 = sub i32 %632, %339
  %634 = sub i32 %633, %341
  %635 = add i32 %634, %350
  %636 = sub i32 %635, %363
  %637 = sub i32 %636, %368
  %638 = sub i32 %637, %370
  %639 = add i32 %638, %372
  %640 = add i32 %639, %377
  %641 = add i32 %640, %379
  %642 = add i32 %641, %380
  %643 = add i32 %642, %412
  %644 = add i32 %643, %414
  %645 = add i32 %644, %416
  %646 = sub i32 %645, %360
  %647 = add i32 %646, %410
  %648 = add i32 %647, %428
  %649 = add i32 %648, %406
  %650 = icmp eq i32 %20, %649
  %651 = select i1 %650, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %652 = tail call i32 @puts(i8* nonnull dereferenceable(1) %651)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
