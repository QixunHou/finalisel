; ModuleID = '../.././c_source_file/0489_path_condition_crackme.c'
source_filename = "../.././c_source_file/0489_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %0
  %5 = xor i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %4, %6
  %8 = sub i32 0, %7
  %9 = xor i32 %0, -1
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %1
  %12 = or i32 %11, %9
  %13 = shl i32 %12, 1
  %14 = and i32 %2, %0
  %15 = xor i32 %14, -1
  %16 = add i32 %14, 1
  %17 = xor i32 %1, -1
  %18 = and i32 %17, %0
  %19 = and i32 %2, %1
  %20 = or i32 %19, %18
  %21 = or i32 %18, %2
  %22 = and i32 %19, %0
  %23 = xor i32 %2, %1
  %24 = xor i32 %23, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %22, %25
  %27 = or i32 %1, %0
  %28 = xor i32 %27, %2
  %29 = xor i32 %4, -1
  %30 = xor i32 %29, %1
  %31 = or i32 %10, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %5, %32
  %34 = and i32 %19, %9
  %35 = and i32 %23, %0
  %36 = or i32 %34, %35
  %37 = and i32 %17, %2
  %38 = and i32 %37, %0
  %39 = or i32 %17, %2
  %40 = and i32 %39, %9
  %41 = xor i32 %38, -1
  %42 = xor i32 %40, %41
  %43 = xor i32 %2, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %5, %44
  %46 = shl i32 %4, 2
  %47 = xor i32 %32, %1
  %48 = xor i32 %18, -1
  %49 = xor i32 %23, -1
  %50 = and i32 %49, %48
  %51 = or i32 %43, %17
  %52 = or i32 %17, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %14, %53
  %55 = add i32 %31, 1
  %56 = and i32 %10, %1
  %57 = xor i32 %56, -1
  %58 = add i32 %56, 1
  %59 = and i32 %15, %1
  %60 = xor i32 %11, -1
  %61 = xor i32 %60, %0
  %62 = and i32 %1, %0
  %63 = xor i32 %62, -1
  %64 = and i32 %23, %63
  %65 = or i32 %23, %18
  %66 = shl i32 %65, 1
  %67 = or i32 %2, %1
  %68 = or i32 %67, %0
  %69 = or i32 %43, %6
  %70 = and i32 %43, %5
  %71 = xor i32 %27, -1
  %72 = or i32 %43, %71
  %73 = or i32 %53, %2
  %74 = or i32 %62, %49
  %75 = xor i32 %15, %1
  %76 = add i32 %4, 1
  %77 = and i32 %52, %49
  %78 = and i32 %27, %49
  %79 = and i32 %49, %63
  %80 = or i32 %18, %49
  %81 = xor i32 %67, -1
  %82 = shl i32 %81, 1
  %83 = xor i32 %71, %2
  %84 = and i32 %5, %15
  %85 = and i32 %63, %2
  %86 = and i32 %37, %9
  %87 = or i32 %23, %9
  %88 = xor i32 %87, -1
  %89 = or i32 %86, %88
  %90 = and i32 %39, %0
  %91 = xor i32 %90, 2147483647
  %92 = xor i32 %91, %86
  %93 = and i32 %31, %5
  %94 = and i32 %31, %17
  %95 = and i32 %44, %63
  %96 = or i32 %62, %32
  %97 = and i32 %5, %2
  %98 = and i32 %57, %9
  %99 = and i32 %10, %0
  %100 = or i32 %99, %5
  %101 = and i32 %31, %1
  %102 = and i32 %23, %9
  %103 = xor i32 %102, 2147483647
  %104 = xor i32 %103, %22
  %105 = shl i32 %104, 1
  %106 = or i32 %99, %6
  %107 = or i32 %32, %1
  %108 = or i32 %99, %1
  %109 = or i32 %14, %5
  %110 = or i32 %49, %9
  %111 = xor i32 %67, %62
  %112 = xor i32 %63, %2
  %113 = shl i32 %112, 1
  %114 = and i32 %23, %48
  %115 = or i32 %6, %2
  %116 = xor i32 %18, %57
  %117 = or i32 %56, %0
  %118 = or i32 %14, %6
  %119 = and i32 %48, %2
  %120 = or i32 %23, %0
  %121 = or i32 %5, %29
  %122 = shl i32 %63, 1
  %123 = xor i32 %48, %2
  %124 = or i32 %81, %0
  %125 = and i32 %43, %6
  %126 = or i32 %56, %18
  %127 = xor i32 %22, %24
  %128 = xor i32 %31, %1
  %129 = and i32 %44, %6
  %130 = xor i32 %99, -1
  %131 = and i32 %5, %130
  %132 = or i32 %43, %18
  %133 = or i32 %43, %1
  %134 = or i32 %10, %71
  %135 = and i32 %10, %48
  %136 = xor i32 %62, %2
  %137 = or i32 %23, %62
  %138 = xor i32 %99, %1
  %139 = or i32 %14, %56
  %140 = xor i32 %11, %0
  %141 = and i32 %43, %63
  %142 = or i32 %62, %10
  %143 = or i32 %71, %2
  %144 = xor i32 %38, %120
  %145 = add i32 %52, 1
  %146 = shl i32 %19, 1
  %147 = xor i32 %57, %0
  %148 = xor i32 %86, %87
  %149 = or i32 %99, %19
  %150 = add i32 %11, 1
  %151 = and i32 %27, %44
  %152 = and i32 %49, %9
  %153 = xor i32 %11, %62
  %154 = xor i32 %67, %0
  %155 = xor i32 %154, 1073741823
  %156 = xor i32 %155, %22
  %157 = shl i32 %156, 2
  %158 = xor i32 %56, %0
  %159 = shl i32 %158, 1
  %160 = and i32 %52, %44
  %161 = and i32 %31, %6
  %162 = xor i32 %19, -1
  %163 = xor i32 %18, %162
  %164 = and i32 %162, %9
  %165 = and i32 %10, %6
  %166 = and i32 %15, %6
  %167 = shl i32 %166, 1
  %168 = shl i32 %44, 1
  %169 = or i32 %62, %60
  %170 = or i32 %99, %17
  %171 = and i32 %52, %2
  %172 = or i32 %44, %71
  %173 = or i32 %60, %9
  %174 = or i32 %19, %9
  %175 = and i32 %23, %52
  %176 = shl i32 %175, 1
  %177 = or i32 %86, %90
  %178 = shl i32 %177, 1
  %179 = and i32 %67, %0
  %180 = xor i32 %34, -1
  %181 = xor i32 %179, %180
  %182 = and i32 %27, %2
  %183 = or i32 %44, %6
  %184 = or i32 %49, %53
  %185 = and i32 %10, %63
  %186 = and i32 %67, %9
  %187 = xor i32 %186, -1
  %188 = xor i32 %22, %187
  %189 = and i32 %6, %2
  %190 = or i32 %32, %17
  %191 = and i32 %43, %17
  %192 = and i32 %44, %17
  %193 = or i32 %5, %2
  %194 = xor i32 %39, %0
  %195 = or i32 %38, %194
  %196 = or i32 %22, %154
  %197 = or i32 %10, %53
  %198 = shl i32 %197, 1
  %199 = and i32 %4, %1
  %200 = shl i32 %199, 1
  %201 = and i32 %130, %6
  %202 = or i32 %14, %17
  %203 = xor i32 %14, %67
  %204 = or i32 %14, %71
  %205 = xor i32 %162, %0
  %206 = xor i32 %52, %2
  %207 = add i32 %23, 1
  %208 = add i32 %18, 1
  %209 = and i32 %49, %0
  %210 = xor i32 %14, %52
  %211 = and i32 %5, %10
  %212 = and i32 %44, %1
  %213 = or i32 %29, %17
  %214 = or i32 %99, %60
  %215 = xor i32 %14, %1
  %216 = xor i32 %130, %1
  %217 = xor i32 %120, -1
  %218 = or i32 %38, %217
  %219 = or i32 %62, %44
  %220 = xor i32 %14, %57
  %221 = xor i32 %53, %2
  %222 = xor i32 %99, %11
  %223 = and i32 %162, %0
  %224 = shl i32 %223, 1
  %225 = or i32 %5, %44
  %226 = or i32 %18, %44
  %227 = or i32 %14, %81
  %228 = or i32 %29, %6
  %229 = and i32 %43, %48
  %230 = or i32 %29, %1
  %231 = or i32 %18, %10
  %232 = or i32 %57, %9
  %233 = or i32 %10, %6
  %234 = and i32 %11, %0
  %235 = and i32 %15, %17
  %236 = and i32 %4, %5
  %237 = shl i32 %236, 1
  %238 = or i32 %32, %6
  %239 = xor i32 %31, %62
  %240 = or i32 %23, %71
  %241 = xor i32 %4, %1
  %242 = or i32 %49, %0
  %243 = shl i32 %242, 1
  %244 = or i32 %34, %179
  %245 = or i32 %22, %102
  %246 = shl i32 %27, 1
  %247 = or i32 %62, %81
  %248 = xor i32 %194, %41
  %249 = or i32 %44, %1
  %250 = or i32 %38, %40
  %251 = and i32 %57, %0
  %252 = and i32 %11, %9
  %253 = or i32 %62, %29
  %254 = xor i32 %49, %0
  %255 = xor i32 %81, %0
  %256 = and i32 %130, %17
  %257 = shl i32 %256, 1
  %258 = xor i32 %38, %25
  %259 = and i32 %43, %27
  %260 = or i32 %62, %2
  %261 = or i32 %38, %24
  %262 = or i32 %60, %0
  %263 = or i32 %44, %17
  %264 = xor i32 %18, %2
  %265 = xor i32 %14, %27
  %266 = or i32 %81, %9
  %267 = xor i32 %4, %62
  %268 = and i32 %43, %1
  %269 = or i32 %23, %53
  %270 = or i32 %44, %53
  %271 = xor i32 %19, %0
  %272 = or i32 %67, %9
  %273 = xor i32 %35, %180
  %274 = or i32 %49, %71
  %275 = or i32 %22, %186
  %276 = or i32 %162, %9
  %277 = and i32 %81, %9
  %278 = mul i32 %277, -22
  %279 = and i32 %56, %9
  %280 = shl i32 %279, 2
  %281 = and i32 %81, %0
  %282 = and i32 %56, %0
  %283 = mul i32 %282, -7
  %284 = mul i32 %34, -14
  %285 = and i32 %60, %0
  %286 = mul i32 %285, 12
  %287 = mul i32 %22, -15
  %288 = add i32 %193, -1
  %289 = add i32 %288, %97
  %290 = add i32 %289, %254
  %291 = add i32 %290, %186
  %292 = add i32 %291, %87
  %293 = add i32 %292, %140
  %294 = add i32 %293, %133
  %295 = add i32 %294, %74
  %296 = add i32 %295, %45
  %297 = add i32 %296, %195
  %298 = add i32 %297, %92
  %299 = shl i32 %298, 1
  %300 = add i32 %174, %11
  %301 = add i32 %300, %281
  %302 = add i32 %301, %149
  %303 = mul i32 %302, 3
  %304 = add i32 %72, %52
  %305 = add i32 %304, %183
  %306 = mul i32 %305, 5
  %307 = shl i32 %0, 1
  %308 = add i32 %307, -1
  %309 = add i32 %308, %17
  %310 = sub i32 %309, %1
  %311 = add i32 %310, %10
  %312 = sub i32 %311, %62
  %313 = add i32 %312, %18
  %314 = add i32 %313, %145
  %315 = add i32 %314, %71
  %316 = add i32 %315, %208
  %317 = sub i32 %316, %2
  %318 = add i32 %317, %6
  %319 = add i32 %318, %16
  %320 = add i32 %319, %21
  %321 = sub i32 %320, %28
  %322 = add i32 %321, %55
  %323 = add i32 %322, %58
  %324 = sub i32 %323, %73
  %325 = add i32 %324, %76
  %326 = add i32 %325, %83
  %327 = add i32 %326, %85
  %328 = add i32 %327, %115
  %329 = sub i32 %328, %119
  %330 = sub i32 %329, %122
  %331 = add i32 %330, %43
  %332 = sub i32 %331, %123
  %333 = sub i32 %332, %134
  %334 = add i32 %333, %135
  %335 = sub i32 %334, %136
  %336 = sub i32 %335, %142
  %337 = sub i32 %336, %143
  %338 = add i32 %337, %150
  %339 = sub i32 %338, %14
  %340 = add i32 %339, %165
  %341 = sub i32 %340, %171
  %342 = add i32 %341, %182
  %343 = add i32 %342, %185
  %344 = add i32 %343, %189
  %345 = add i32 %344, %206
  %346 = add i32 %345, %207
  %347 = add i32 %346, %211
  %348 = sub i32 %347, %221
  %349 = sub i32 %348, %231
  %350 = add i32 %349, %233
  %351 = sub i32 %350, %67
  %352 = sub i32 %351, %246
  %353 = add i32 %352, %260
  %354 = add i32 %353, %264
  %355 = sub i32 %354, %23
  %356 = add i32 %355, %20
  %357 = add i32 %356, %30
  %358 = sub i32 %357, %33
  %359 = sub i32 %358, %46
  %360 = sub i32 %359, %47
  %361 = add i32 %360, %50
  %362 = sub i32 %361, %51
  %363 = sub i32 %362, %54
  %364 = add i32 %363, %59
  %365 = sub i32 %364, %61
  %366 = add i32 %365, %64
  %367 = add i32 %366, %68
  %368 = sub i32 %367, %69
  %369 = sub i32 %368, %70
  %370 = sub i32 %369, %75
  %371 = add i32 %370, %77
  %372 = add i32 %371, %78
  %373 = sub i32 %372, %79
  %374 = add i32 %373, %80
  %375 = sub i32 %374, %82
  %376 = sub i32 %375, %84
  %377 = sub i32 %376, %93
  %378 = add i32 %377, %94
  %379 = sub i32 %378, %95
  %380 = add i32 %379, %96
  %381 = sub i32 %380, %98
  %382 = add i32 %381, %100
  %383 = sub i32 %382, %101
  %384 = sub i32 %383, %106
  %385 = sub i32 %384, %107
  %386 = sub i32 %385, %108
  %387 = sub i32 %386, %109
  %388 = add i32 %387, %110
  %389 = add i32 %388, %111
  %390 = sub i32 %389, %113
  %391 = sub i32 %390, %114
  %392 = add i32 %391, %116
  %393 = sub i32 %392, %117
  %394 = sub i32 %393, %118
  %395 = add i32 %394, %120
  %396 = add i32 %395, %121
  %397 = sub i32 %396, %124
  %398 = add i32 %397, %125
  %399 = add i32 %398, %126
  %400 = sub i32 %399, %128
  %401 = sub i32 %400, %129
  %402 = add i32 %401, %131
  %403 = sub i32 %402, %132
  %404 = sub i32 %403, %137
  %405 = sub i32 %404, %138
  %406 = add i32 %405, %139
  %407 = sub i32 %406, %141
  %408 = sub i32 %407, %146
  %409 = sub i32 %408, %147
  %410 = sub i32 %409, %151
  %411 = add i32 %410, %152
  %412 = sub i32 %411, %153
  %413 = add i32 %412, %160
  %414 = add i32 %413, %161
  %415 = add i32 %414, %163
  %416 = sub i32 %415, %164
  %417 = sub i32 %416, %168
  %418 = sub i32 %417, %169
  %419 = add i32 %418, %170
  %420 = sub i32 %419, %172
  %421 = sub i32 %420, %173
  %422 = sub i32 %421, %184
  %423 = sub i32 %422, %190
  %424 = sub i32 %423, %191
  %425 = add i32 %424, %192
  %426 = sub i32 %425, %198
  %427 = sub i32 %426, %201
  %428 = add i32 %427, %202
  %429 = sub i32 %428, %203
  %430 = sub i32 %429, %204
  %431 = add i32 %430, %205
  %432 = add i32 %431, %209
  %433 = add i32 %432, %210
  %434 = add i32 %433, %212
  %435 = sub i32 %434, %213
  %436 = sub i32 %435, %214
  %437 = sub i32 %436, %24
  %438 = sub i32 %437, %215
  %439 = sub i32 %438, %216
  %440 = sub i32 %439, %219
  %441 = sub i32 %440, %220
  %442 = add i32 %441, %179
  %443 = add i32 %442, %222
  %444 = sub i32 %443, %225
  %445 = add i32 %444, %226
  %446 = add i32 %445, %227
  %447 = sub i32 %446, %228
  %448 = add i32 %447, %229
  %449 = sub i32 %448, %230
  %450 = add i32 %449, %232
  %451 = sub i32 %450, %234
  %452 = add i32 %451, %235
  %453 = add i32 %452, %238
  %454 = add i32 %453, %239
  %455 = sub i32 %454, %240
  %456 = sub i32 %455, %241
  %457 = add i32 %456, %247
  %458 = add i32 %457, %249
  %459 = sub i32 %458, %251
  %460 = sub i32 %459, %252
  %461 = add i32 %460, %253
  %462 = add i32 %461, %255
  %463 = sub i32 %462, %102
  %464 = sub i32 %463, %259
  %465 = sub i32 %464, %262
  %466 = add i32 %465, %263
  %467 = add i32 %466, %265
  %468 = add i32 %467, %266
  %469 = sub i32 %468, %267
  %470 = add i32 %469, %268
  %471 = sub i32 %470, %269
  %472 = add i32 %471, %270
  %473 = sub i32 %472, %271
  %474 = sub i32 %473, %272
  %475 = add i32 %474, %274
  %476 = add i32 %475, %154
  %477 = sub i32 %476, %276
  %478 = add i32 %477, %13
  %479 = add i32 %478, %26
  %480 = sub i32 %479, %36
  %481 = add i32 %480, %42
  %482 = sub i32 %481, %66
  %483 = sub i32 %482, %89
  %484 = add i32 %483, %127
  %485 = add i32 %484, %144
  %486 = add i32 %485, %148
  %487 = sub i32 %486, %159
  %488 = sub i32 %487, %167
  %489 = sub i32 %488, %176
  %490 = sub i32 %489, %181
  %491 = sub i32 %490, %188
  %492 = sub i32 %491, %196
  %493 = sub i32 %492, %200
  %494 = add i32 %493, %218
  %495 = sub i32 %494, %224
  %496 = sub i32 %495, %237
  %497 = sub i32 %496, %243
  %498 = add i32 %497, %244
  %499 = add i32 %498, %245
  %500 = add i32 %499, %248
  %501 = add i32 %500, %250
  %502 = sub i32 %501, %257
  %503 = add i32 %502, %258
  %504 = add i32 %503, %261
  %505 = add i32 %504, %273
  %506 = add i32 %505, %275
  %507 = add i32 %506, %278
  %508 = sub i32 %507, %280
  %509 = add i32 %508, %283
  %510 = add i32 %509, %284
  %511 = add i32 %510, %286
  %512 = add i32 %511, %287
  %513 = sub i32 %512, %178
  %514 = sub i32 %513, %105
  %515 = sub i32 %514, %157
  %516 = add i32 %515, %306
  %517 = add i32 %516, %303
  %518 = add i32 %517, %299
  %519 = icmp eq i32 %518, %8
  %520 = select i1 %519, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %521 = tail call i32 @puts(i8* nonnull dereferenceable(1) %520)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
