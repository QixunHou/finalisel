digraph "DFG for'crackme' function" {
	Node0xc25b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xc25bc0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xc25c80[shape=record, label="  %5 = and i32 %1, %0"];
	Node0xc25cf0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0xc25d90[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0xc25e00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0xc25e70[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xc25ee0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0xc25f50[shape=record, label="  %11 = and i32 %3, %0"];
	Node0xc25ff0[shape=record, label="  %12 = shl i32 %10, 2"];
	Node0xc26090[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0xc26100[shape=record, label="  %14 = shl i32 %11, 2"];
	Node0xc26170[shape=record, label="  %15 = shl i32 %5, 2"];
	Node0xc261e0[shape=record, label="  %16 = add i32 %4, %0"];
	Node0xc26250[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0xc262c0[shape=record, label="  %18 = sub i32 %10, %11"];
	Node0xc26330[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0xc263a0[shape=record, label="  %20 = sub i32 %19, %14"];
	Node0xc26410[shape=record, label="  %21 = sub i32 %20, %15"];
	Node0xc26480[shape=record, label="  %22 = add i32 %21, %7"];
	Node0xc264f0[shape=record, label="  %23 = sub i32 %22, %13"];
	Node0xc26560[shape=record, label="  %24 = add i32 %23, %17"];
	Node0xc265d0[shape=record, label="  %25 = icmp eq i32 %24, %1"];
	Node0xbc6268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc26a70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0xc26ac0[shape=record, label="  ret void"];
	Node0xc25b50 -> Node0xc25bc0;
	Node0xc25bc0 -> Node0xc25c80;
	Node0xc25c80 -> Node0xc25cf0;
	Node0xc25cf0 -> Node0xc25d90;
	Node0xc25d90 -> Node0xc25e00;
	Node0xc25e00 -> Node0xc25e70;
	Node0xc25e70 -> Node0xc25ee0;
	Node0xc25ee0 -> Node0xc25f50;
	Node0xc25f50 -> Node0xc25ff0;
	Node0xc25ff0 -> Node0xc26090;
	Node0xc26090 -> Node0xc26100;
	Node0xc26100 -> Node0xc26170;
	Node0xc26170 -> Node0xc261e0;
	Node0xc261e0 -> Node0xc26250;
	Node0xc26250 -> Node0xc262c0;
	Node0xc262c0 -> Node0xc26330;
	Node0xc26330 -> Node0xc263a0;
	Node0xc263a0 -> Node0xc26410;
	Node0xc26410 -> Node0xc26480;
	Node0xc26480 -> Node0xc264f0;
	Node0xc264f0 -> Node0xc26560;
	Node0xc26560 -> Node0xc265d0;
	Node0xc265d0 -> Node0xbc6268;
	Node0xbc6268 -> Node0xc26a70;
	Node0xc26a70 -> Node0xc26ac0;
edge [color=red]
	Node0xc25b50 -> Node0xc25bc0;
	Node0xc25c80 -> Node0xc25cf0;
	Node0xc25cf0 -> Node0xc25d90;
	Node0xc25e00 -> Node0xc25e70;
	Node0xc25b50 -> Node0xc25f50;
	Node0xc25ee0 -> Node0xc25ff0;
	Node0xc25ff0 -> Node0xc26090;
	Node0xc25f50 -> Node0xc26100;
	Node0xc25c80 -> Node0xc26170;
	Node0xc25bc0 -> Node0xc261e0;
	Node0xc261e0 -> Node0xc26250;
	Node0xc25ee0 -> Node0xc262c0;
	Node0xc25f50 -> Node0xc262c0;
	Node0xc262c0 -> Node0xc26330;
	Node0xc25e70 -> Node0xc26330;
	Node0xc26330 -> Node0xc263a0;
	Node0xc26100 -> Node0xc263a0;
	Node0xc263a0 -> Node0xc26410;
	Node0xc26170 -> Node0xc26410;
	Node0xc26410 -> Node0xc26480;
	Node0xc25d90 -> Node0xc26480;
	Node0xc26480 -> Node0xc264f0;
	Node0xc26090 -> Node0xc264f0;
	Node0xc264f0 -> Node0xc26560;
	Node0xc26250 -> Node0xc26560;
	Node0xc26560 -> Node0xc265d0;
	Node0xc265d0 -> Node0xbc6268;
	Node0xbc6268 -> Node0xc26a70;
}
