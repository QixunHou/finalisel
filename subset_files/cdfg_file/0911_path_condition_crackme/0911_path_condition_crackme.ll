; ModuleID = '../.././c_source_file/0911_path_condition_crackme.c'
source_filename = "../.././c_source_file/0911_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = mul i32 %7, -2
  %9 = xor i32 %0, -1
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %1
  %12 = and i32 %11, %0
  %13 = or i32 %2, %1
  %14 = and i32 %13, %9
  %15 = and i32 %2, %0
  %16 = or i32 %15, %1
  %17 = xor i32 %2, %1
  %18 = or i32 %17, %9
  %19 = xor i32 %13, -1
  %20 = or i32 %15, %19
  %21 = and i32 %6, %1
  %22 = xor i32 %17, -1
  %23 = xor i32 %22, %0
  %24 = or i32 %2, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %1
  %27 = or i32 %10, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %1
  %30 = xor i32 %1, -1
  %31 = or i32 %25, %30
  %32 = shl i32 %31, 1
  %33 = and i32 %30, %2
  %34 = and i32 %33, %0
  %35 = or i32 %30, %2
  %36 = and i32 %35, %9
  %37 = or i32 %34, %36
  %38 = or i32 %17, %5
  %39 = and i32 %30, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %40, %2
  %42 = and i32 %1, %0
  %43 = or i32 %6, %42
  %44 = and i32 %33, %9
  %45 = and i32 %35, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %44, %46
  %48 = xor i32 %15, %1
  %49 = or i32 %30, %0
  %50 = xor i32 %49, -1
  %51 = xor i32 %6, -1
  %52 = or i32 %51, %50
  %53 = xor i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %51, %54
  %56 = and i32 %2, %1
  %57 = xor i32 %56, -1
  %58 = and i32 %57, %0
  %59 = or i32 %25, %54
  %60 = and i32 %56, %0
  %61 = xor i32 %13, %0
  %62 = or i32 %60, %61
  %63 = shl i32 %62, 1
  %64 = xor i32 %42, -1
  %65 = and i32 %17, %64
  %66 = xor i32 %42, %2
  %67 = or i32 %53, %10
  %68 = and i32 %17, %40
  %69 = shl i32 %68, 1
  %70 = xor i32 %50, %2
  %71 = shl i32 %70, 1
  %72 = xor i32 %18, -1
  %73 = or i32 %44, %72
  %74 = or i32 %51, %1
  %75 = xor i32 %11, -1
  %76 = xor i32 %75, %0
  %77 = xor i32 %19, %0
  %78 = and i32 %56, %9
  %79 = and i32 %17, %0
  %80 = or i32 %78, %79
  %81 = shl i32 %80, 1
  %82 = and i32 %27, %1
  %83 = and i32 %24, %30
  %84 = and i32 %24, %1
  %85 = and i32 %10, %1
  %86 = xor i32 %85, -1
  %87 = xor i32 %86, %0
  %88 = and i32 %6, %4
  %89 = or i32 %75, %0
  %90 = xor i32 %15, %49
  %91 = xor i32 %27, %42
  %92 = xor i32 %15, %86
  %93 = xor i32 %14, -1
  %94 = xor i32 %60, %93
  %95 = or i32 %15, %85
  %96 = xor i32 %17, %0
  %97 = xor i32 %60, %96
  %98 = xor i32 %35, %9
  %99 = xor i32 %98, %34
  %100 = or i32 %28, %30
  %101 = and i32 %49, %10
  %102 = or i32 %28, %1
  %103 = or i32 %56, %39
  %104 = and i32 %86, %9
  %105 = or i32 %54, %2
  %106 = and i32 %17, %49
  %107 = xor i32 %39, %86
  %108 = and i32 %4, %2
  %109 = or i32 %15, %30
  %110 = and i32 %17, %9
  %111 = xor i32 %60, 2147483647
  %112 = xor i32 %111, %110
  %113 = shl i32 %112, 1
  %114 = or i32 %86, %9
  %115 = xor i32 %15, -1
  %116 = and i32 %115, %1
  %117 = or i32 %44, %45
  %118 = or i32 %42, %10
  %119 = or i32 %57, %0
  %120 = and i32 %6, %64
  %121 = and i32 %10, %0
  %122 = or i32 %121, %1
  %123 = and i32 %6, %49
  %124 = and i32 %115, %30
  %125 = and i32 %10, %40
  %126 = or i32 %42, %19
  %127 = or i32 %86, %0
  %128 = or i32 %39, %2
  %129 = xor i32 %121, -1
  %130 = and i32 %129, %54
  %131 = or i32 %56, %9
  %132 = add i32 %0, 1
  %133 = and i32 %22, %40
  %134 = and i32 %51, %64
  %135 = xor i32 %121, %11
  %136 = and i32 %51, %30
  %137 = and i32 %13, %0
  %138 = or i32 %78, %137
  %139 = shl i32 %138, 2
  %140 = or i32 %85, %39
  %141 = or i32 %39, %10
  %142 = or i32 %42, %51
  %143 = xor i32 %49, %2
  %144 = and i32 %115, %54
  %145 = shl i32 %144, 1
  %146 = and i32 %27, %30
  %147 = xor i32 %57, %0
  %148 = shl i32 %147, 1
  %149 = or i32 %17, %0
  %150 = xor i32 %34, %149
  %151 = or i32 %56, %0
  %152 = and i32 %22, %64
  %153 = or i32 %11, %0
  %154 = and i32 %4, %51
  %155 = or i32 %53, %25
  %156 = and i32 %51, %40
  %157 = or i32 %6, %39
  %158 = xor i32 %11, %0
  %159 = xor i32 %5, %2
  %160 = and i32 %57, %9
  %161 = shl i32 %160, 1
  %162 = or i32 %15, %53
  %163 = xor i32 %129, %1
  %164 = and i32 %6, %40
  %165 = xor i32 %121, %57
  %166 = shl i32 %165, 1
  %167 = or i32 %60, %14
  %168 = or i32 %34, %96
  %169 = xor i32 %34, -1
  %170 = xor i32 %36, %169
  %171 = or i32 %60, %110
  %172 = shl i32 %171, 1
  %173 = or i32 %11, %9
  %174 = xor i32 %56, %0
  %175 = or i32 %121, %30
  %176 = xor i32 %4, %2
  %177 = xor i32 %24, %1
  %178 = and i32 %4, %22
  %179 = and i32 %27, %53
  %180 = or i32 %53, %51
  %181 = or i32 %51, %30
  %182 = xor i32 %121, %1
  %183 = and i32 %6, %30
  %184 = xor i32 %11, %42
  %185 = and i32 %129, %30
  %186 = and i32 %64, %2
  %187 = and i32 %4, %10
  %188 = or i32 %121, %53
  %189 = add i32 %15, 1
  %190 = shl i32 %42, 1
  %191 = or i32 %6, %30
  %192 = and i32 %53, %2
  %193 = and i32 %11, %9
  %194 = and i32 %49, %51
  %195 = or i32 %17, %42
  %196 = shl i32 %195, 1
  %197 = or i32 %19, %0
  %198 = xor i32 %13, %42
  %199 = xor i32 %24, %42
  %200 = and i32 %40, %2
  %201 = or i32 %121, %56
  %202 = xor i32 %85, %0
  %203 = xor i32 %96, -1
  %204 = or i32 %60, %203
  %205 = or i32 %42, %75
  %206 = or i32 %5, %2
  %207 = xor i32 %34, %203
  %208 = shl i32 %207, 1
  %209 = or i32 %85, %0
  %210 = shl i32 %209, 1
  %211 = and i32 %24, %54
  %212 = or i32 %17, %39
  %213 = xor i32 %149, -1
  %214 = or i32 %34, %213
  %215 = or i32 %39, %22
  %216 = and i32 %27, %54
  %217 = or i32 %42, %28
  %218 = or i32 %50, %2
  %219 = and i32 %53, %51
  %220 = xor i32 %115, %1
  %221 = and i32 %49, %2
  %222 = or i32 %121, %54
  %223 = and i32 %53, %129
  %224 = xor i32 %15, %4
  %225 = or i32 %39, %51
  %226 = or i32 %10, %50
  %227 = or i32 %6, %53
  %228 = and i32 %22, %0
  %229 = xor i32 %44, %18
  %230 = or i32 %22, %50
  %231 = or i32 %15, %54
  %232 = shl i32 %231, 1
  %233 = and i32 %24, %53
  %234 = shl i32 %233, 1
  %235 = or i32 %10, %54
  %236 = and i32 %54, %2
  %237 = and i32 %10, %64
  %238 = or i32 %121, %75
  %239 = xor i32 %137, 2147483647
  %240 = xor i32 %239, %78
  %241 = xor i32 %64, %2
  %242 = or i32 %42, %2
  %243 = or i32 %15, %50
  %244 = and i32 %53, %115
  %245 = and i32 %51, %1
  %246 = or i32 %25, %1
  %247 = xor i32 %15, %13
  %248 = or i32 %53, %2
  %249 = and i32 %22, %9
  %250 = xor i32 %111, %61
  %251 = or i32 %6, %50
  %252 = and i32 %129, %1
  %253 = and i32 %49, %22
  %254 = xor i32 %39, %2
  %255 = and i32 %51, %54
  %256 = and i32 %10, %54
  %257 = or i32 %17, %50
  %258 = or i32 %42, %22
  %259 = xor i32 %39, %57
  %260 = and i32 %19, %9
  %261 = mul i32 %260, -28
  %262 = and i32 %85, %9
  %263 = and i32 %19, %0
  %264 = mul i32 %263, -13
  %265 = and i32 %85, %0
  %266 = and i32 %75, %9
  %267 = shl i32 %78, 3
  %268 = and i32 %75, %0
  %269 = mul i32 %268, 6
  %270 = mul i32 %60, 12
  %271 = add i32 %248, %39
  %272 = add i32 %271, %237
  %273 = add i32 %272, %238
  %274 = add i32 %273, %223
  %275 = add i32 %274, %222
  %276 = add i32 %275, %201
  %277 = add i32 %276, %197
  %278 = add i32 %277, %185
  %279 = add i32 %278, %79
  %280 = add i32 %279, %55
  %281 = add i32 %280, %18
  %282 = add i32 %281, %14
  %283 = add i32 %282, %97
  %284 = add i32 %283, %37
  %285 = add i32 %284, %240
  %286 = add i32 %285, %250
  %287 = shl i32 %286, 1
  %288 = sub i32 %57, %247
  %289 = add i32 %288, %265
  %290 = sub i32 %289, %205
  %291 = add i32 %290, %156
  %292 = sub i32 %291, %153
  %293 = add i32 %292, %104
  %294 = sub i32 %293, %103
  %295 = add i32 %294, %52
  %296 = mul i32 %295, 3
  %297 = add i32 %218, %186
  %298 = sub i32 %41, %297
  %299 = mul i32 %298, 5
  %300 = shl i32 %38, 2
  %301 = add i32 %300, -4
  %302 = sub i32 %266, %262
  %303 = mul i32 %302, 9
  %304 = add i32 %132, %0
  %305 = add i32 %304, %1
  %306 = add i32 %305, %40
  %307 = add i32 %306, %50
  %308 = add i32 %307, %5
  %309 = add i32 %308, %53
  %310 = add i32 %309, %64
  %311 = sub i32 %310, %4
  %312 = sub i32 %311, %66
  %313 = add i32 %312, %67
  %314 = sub i32 %313, %13
  %315 = add i32 %314, %25
  %316 = sub i32 %315, %101
  %317 = add i32 %316, %105
  %318 = sub i32 %317, %108
  %319 = sub i32 %318, %118
  %320 = sub i32 %319, %125
  %321 = sub i32 %320, %128
  %322 = sub i32 %321, %27
  %323 = sub i32 %322, %56
  %324 = sub i32 %323, %141
  %325 = add i32 %324, %143
  %326 = sub i32 %325, %159
  %327 = add i32 %326, %176
  %328 = sub i32 %327, %15
  %329 = sub i32 %328, %187
  %330 = add i32 %329, %189
  %331 = sub i32 %330, %190
  %332 = sub i32 %331, %192
  %333 = add i32 %332, %19
  %334 = add i32 %333, %22
  %335 = sub i32 %334, %200
  %336 = sub i32 %335, %6
  %337 = add i32 %336, %206
  %338 = add i32 %337, %86
  %339 = sub i32 %338, %221
  %340 = add i32 %339, %226
  %341 = sub i32 %340, %24
  %342 = sub i32 %341, %85
  %343 = sub i32 %342, %235
  %344 = add i32 %343, %236
  %345 = add i32 %344, %241
  %346 = add i32 %345, %242
  %347 = add i32 %346, %28
  %348 = add i32 %347, %51
  %349 = sub i32 %348, %254
  %350 = add i32 %349, %256
  %351 = add i32 %350, %12
  %352 = add i32 %351, %16
  %353 = add i32 %352, %20
  %354 = add i32 %353, %21
  %355 = add i32 %354, %23
  %356 = add i32 %355, %26
  %357 = add i32 %356, %29
  %358 = sub i32 %357, %43
  %359 = sub i32 %358, %48
  %360 = add i32 %359, %58
  %361 = add i32 %360, %59
  %362 = add i32 %361, %65
  %363 = sub i32 %362, %71
  %364 = add i32 %363, %74
  %365 = add i32 %364, %76
  %366 = sub i32 %365, %77
  %367 = add i32 %366, %82
  %368 = sub i32 %367, %83
  %369 = sub i32 %368, %84
  %370 = sub i32 %369, %87
  %371 = sub i32 %370, %88
  %372 = sub i32 %371, %89
  %373 = sub i32 %372, %90
  %374 = sub i32 %373, %91
  %375 = sub i32 %374, %92
  %376 = sub i32 %375, %95
  %377 = add i32 %376, %100
  %378 = add i32 %377, %102
  %379 = sub i32 %378, %106
  %380 = sub i32 %379, %107
  %381 = sub i32 %380, %109
  %382 = sub i32 %381, %114
  %383 = add i32 %382, %116
  %384 = sub i32 %383, %119
  %385 = add i32 %384, %120
  %386 = add i32 %385, %122
  %387 = add i32 %386, %123
  %388 = add i32 %387, %124
  %389 = add i32 %388, %126
  %390 = add i32 %389, %127
  %391 = add i32 %390, %96
  %392 = sub i32 %391, %130
  %393 = sub i32 %392, %131
  %394 = sub i32 %393, %133
  %395 = sub i32 %394, %134
  %396 = sub i32 %395, %135
  %397 = sub i32 %396, %136
  %398 = sub i32 %397, %140
  %399 = add i32 %398, %142
  %400 = add i32 %399, %146
  %401 = sub i32 %400, %151
  %402 = add i32 %401, %152
  %403 = add i32 %402, %154
  %404 = sub i32 %403, %155
  %405 = sub i32 %404, %157
  %406 = add i32 %405, %158
  %407 = sub i32 %406, %162
  %408 = add i32 %407, %61
  %409 = sub i32 %408, %163
  %410 = sub i32 %409, %164
  %411 = add i32 %410, %173
  %412 = add i32 %411, %174
  %413 = sub i32 %412, %175
  %414 = sub i32 %413, %177
  %415 = add i32 %414, %178
  %416 = add i32 %415, %179
  %417 = add i32 %416, %180
  %418 = sub i32 %417, %181
  %419 = sub i32 %418, %182
  %420 = add i32 %419, %183
  %421 = add i32 %420, %184
  %422 = sub i32 %421, %188
  %423 = sub i32 %422, %191
  %424 = add i32 %423, %193
  %425 = add i32 %424, %194
  %426 = add i32 %425, %198
  %427 = sub i32 %426, %199
  %428 = add i32 %427, %202
  %429 = add i32 %428, %211
  %430 = sub i32 %429, %212
  %431 = add i32 %430, %215
  %432 = sub i32 %431, %216
  %433 = add i32 %432, %217
  %434 = sub i32 %433, %219
  %435 = add i32 %434, %220
  %436 = sub i32 %435, %224
  %437 = add i32 %436, %225
  %438 = add i32 %437, %227
  %439 = sub i32 %438, %228
  %440 = add i32 %439, %230
  %441 = add i32 %440, %137
  %442 = add i32 %441, %243
  %443 = add i32 %442, %244
  %444 = sub i32 %443, %245
  %445 = sub i32 %444, %149
  %446 = sub i32 %445, %246
  %447 = sub i32 %446, %249
  %448 = sub i32 %447, %251
  %449 = add i32 %448, %252
  %450 = sub i32 %449, %253
  %451 = sub i32 %450, %255
  %452 = sub i32 %451, %257
  %453 = sub i32 %452, %258
  %454 = sub i32 %453, %259
  %455 = sub i32 %454, %32
  %456 = sub i32 %455, %47
  %457 = sub i32 %456, %69
  %458 = add i32 %457, %73
  %459 = add i32 %458, %94
  %460 = sub i32 %459, %99
  %461 = add i32 %460, %117
  %462 = sub i32 %461, %145
  %463 = sub i32 %462, %148
  %464 = add i32 %463, %150
  %465 = sub i32 %464, %161
  %466 = sub i32 %465, %166
  %467 = sub i32 %466, %167
  %468 = sub i32 %467, %168
  %469 = add i32 %468, %170
  %470 = sub i32 %469, %196
  %471 = sub i32 %470, %204
  %472 = sub i32 %471, %210
  %473 = add i32 %472, %214
  %474 = add i32 %473, %229
  %475 = sub i32 %474, %232
  %476 = sub i32 %475, %234
  %477 = add i32 %476, %261
  %478 = add i32 %477, %264
  %479 = add i32 %478, %267
  %480 = add i32 %479, %269
  %481 = add i32 %480, %270
  %482 = sub i32 %481, %63
  %483 = sub i32 %482, %81
  %484 = sub i32 %483, %139
  %485 = sub i32 %484, %172
  %486 = sub i32 %485, %208
  %487 = add i32 %486, %299
  %488 = add i32 %487, %303
  %489 = sub i32 %488, %113
  %490 = add i32 %489, %301
  %491 = add i32 %490, %296
  %492 = add i32 %491, %287
  %493 = icmp eq i32 %8, %492
  %494 = select i1 %493, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %495 = tail call i32 @puts(i8* nonnull dereferenceable(1) %494)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
