digraph "DFG for'crackme' function" {
	Node0x18eba70[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x18ebb10[shape=record, label="  %4 = shl i32 %1, 1"];
	Node0x18ebbd0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x18ebc40[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0x18ebcb0[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x18ebd20[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x18ebd90[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x18ebe00[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0x18ebe70[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x18ebee0[shape=record, label="  %12 = add i32 %8, %10"];
	Node0x18ebf50[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0x18ebff0[shape=record, label="  %14 = add i32 %6, 2"];
	Node0x18ec060[shape=record, label="  %15 = sub i32 %14, %5"];
	Node0x18ec0d0[shape=record, label="  %16 = add i32 %15, %4"];
	Node0x18ec140[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x18ec1b0[shape=record, label="  %18 = sub i32 %17, %11"];
	Node0x18ec220[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x18ec290[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x18ec300[shape=record, label="  %21 = icmp eq i32 %20, %3"];
	Node0x188c268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18ec7a0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x18ec7f0[shape=record, label="  ret void"];
	Node0x18eba70 -> Node0x18ebb10;
	Node0x18ebb10 -> Node0x18ebbd0;
	Node0x18ebbd0 -> Node0x18ebc40;
	Node0x18ebc40 -> Node0x18ebcb0;
	Node0x18ebcb0 -> Node0x18ebd20;
	Node0x18ebd20 -> Node0x18ebd90;
	Node0x18ebd90 -> Node0x18ebe00;
	Node0x18ebe00 -> Node0x18ebe70;
	Node0x18ebe70 -> Node0x18ebee0;
	Node0x18ebee0 -> Node0x18ebf50;
	Node0x18ebf50 -> Node0x18ebff0;
	Node0x18ebff0 -> Node0x18ec060;
	Node0x18ec060 -> Node0x18ec0d0;
	Node0x18ec0d0 -> Node0x18ec140;
	Node0x18ec140 -> Node0x18ec1b0;
	Node0x18ec1b0 -> Node0x18ec220;
	Node0x18ec220 -> Node0x18ec290;
	Node0x18ec290 -> Node0x18ec300;
	Node0x18ec300 -> Node0x188c268;
	Node0x188c268 -> Node0x18ec7a0;
	Node0x18ec7a0 -> Node0x18ec7f0;
edge [color=red]
	Node0x18eba70 -> Node0x18ebcb0;
	Node0x18ebd20 -> Node0x18ebd90;
	Node0x18ebbd0 -> Node0x18ebe00;
	Node0x18ebd20 -> Node0x18ebee0;
	Node0x18ebe00 -> Node0x18ebee0;
	Node0x18ebee0 -> Node0x18ebf50;
	Node0x18ebc40 -> Node0x18ebff0;
	Node0x18ebff0 -> Node0x18ec060;
	Node0x18ebbd0 -> Node0x18ec060;
	Node0x18ec060 -> Node0x18ec0d0;
	Node0x18ebb10 -> Node0x18ec0d0;
	Node0x18ec0d0 -> Node0x18ec140;
	Node0x18ebcb0 -> Node0x18ec140;
	Node0x18ec140 -> Node0x18ec1b0;
	Node0x18ebe70 -> Node0x18ec1b0;
	Node0x18ec1b0 -> Node0x18ec220;
	Node0x18ebd90 -> Node0x18ec220;
	Node0x18ec220 -> Node0x18ec290;
	Node0x18ebf50 -> Node0x18ec290;
	Node0x18ec290 -> Node0x18ec300;
	Node0x18eba70 -> Node0x18ec300;
	Node0x18ec300 -> Node0x188c268;
	Node0x188c268 -> Node0x18ec7a0;
}
