; ModuleID = '../.././c_source_file/1253_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1253_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = or i32 %2, %1
  %6 = xor i32 %5, -1
  %7 = or i32 %6, %4
  %8 = sub i32 0, %7
  %9 = and i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %10
  %14 = xor i32 %2, -1
  %15 = or i32 %14, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %1, %0
  %18 = xor i32 %17, -1
  %19 = or i32 %16, %18
  %20 = and i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %4
  %23 = or i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, %0
  %26 = or i32 %25, %24
  %27 = shl i32 %26, 1
  %28 = or i32 %12, %0
  %29 = xor i32 %12, %0
  %30 = or i32 %2, %0
  %31 = xor i32 %30, %9
  %32 = xor i32 %1, -1
  %33 = and i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %14, %34
  %36 = and i32 %14, %1
  %37 = xor i32 %36, -1
  %38 = xor i32 %33, %37
  %39 = or i32 %9, %16
  %40 = or i32 %25, %33
  %41 = shl i32 %40, 1
  %42 = and i32 %15, %1
  %43 = or i32 %17, %2
  %44 = and i32 %14, %0
  %45 = xor i32 %44, -1
  %46 = add i32 %44, 1
  %47 = add i32 %36, 1
  %48 = or i32 %17, %14
  %49 = shl i32 %48, 2
  %50 = and i32 %12, %34
  %51 = xor i32 %30, -1
  %52 = or i32 %51, %1
  %53 = and i32 %5, %0
  %54 = or i32 %9, %14
  %55 = or i32 %9, %6
  %56 = shl i32 %55, 1
  %57 = and i32 %30, %1
  %58 = or i32 %14, %1
  %59 = xor i32 %44, %58
  %60 = and i32 %45, %32
  %61 = xor i32 %25, -1
  %62 = or i32 %33, %61
  %63 = and i32 %61, %32
  %64 = and i32 %10, %2
  %65 = and i32 %32, %2
  %66 = and i32 %65, %4
  %67 = or i32 %11, %4
  %68 = xor i32 %67, -1
  %69 = or i32 %66, %68
  %70 = and i32 %61, %10
  %71 = and i32 %34, %2
  %72 = or i32 %61, %18
  %73 = and i32 %11, %23
  %74 = and i32 %2, %0
  %75 = or i32 %74, %18
  %76 = and i32 %20, %0
  %77 = and i32 %11, %4
  %78 = or i32 %76, %77
  %79 = and i32 %23, %61
  %80 = or i32 %32, %0
  %81 = and i32 %25, %80
  %82 = shl i32 %81, 1
  %83 = xor i32 %74, -1
  %84 = xor i32 %83, %1
  %85 = and i32 %5, %4
  %86 = or i32 %76, %85
  %87 = and i32 %45, %1
  %88 = xor i32 %16, %1
  %89 = and i32 %65, %0
  %90 = or i32 %11, %0
  %91 = xor i32 %90, -1
  %92 = or i32 %89, %91
  %93 = or i32 %37, %4
  %94 = and i32 %61, %1
  %95 = and i32 %14, %10
  %96 = or i32 %16, %1
  %97 = xor i32 %76, -1
  %98 = xor i32 %85, %97
  %99 = and i32 %45, %18
  %100 = and i32 %15, %17
  %101 = and i32 %83, %18
  %102 = or i32 %25, %17
  %103 = xor i32 %58, -1
  %104 = or i32 %44, %103
  %105 = shl i32 %104, 1
  %106 = or i32 %33, %14
  %107 = xor i32 %74, %1
  %108 = and i32 %11, %0
  %109 = or i32 %6, %0
  %110 = or i32 %58, %4
  %111 = xor i32 %11, %0
  %112 = or i32 %89, %111
  %113 = or i32 %36, %4
  %114 = or i32 %14, %24
  %115 = shl i32 %114, 1
  %116 = xor i32 %51, %1
  %117 = and i32 %20, %4
  %118 = or i32 %117, %53
  %119 = xor i32 %30, %1
  %120 = or i32 %74, %32
  %121 = or i32 %9, %2
  %122 = xor i32 %103, %0
  %123 = and i32 %11, %10
  %124 = xor i32 %80, -1
  %125 = or i32 %14, %124
  %126 = or i32 %124, %2
  %127 = or i32 %51, %18
  %128 = or i32 %20, %4
  %129 = xor i32 %45, %1
  %130 = and i32 %11, %34
  %131 = xor i32 %37, %0
  %132 = shl i32 %131, 1
  %133 = and i32 %61, %18
  %134 = xor i32 %20, %0
  %135 = xor i32 %111, -1
  %136 = or i32 %76, %135
  %137 = or i32 %17, %61
  %138 = add i32 %9, 1
  %139 = and i32 %15, %32
  %140 = xor i32 %33, %21
  %141 = shl i32 %140, 2
  %142 = and i32 %80, %2
  %143 = and i32 %30, %32
  %144 = or i32 %21, %0
  %145 = and i32 %58, %0
  %146 = xor i32 %9, %2
  %147 = and i32 %80, %14
  %148 = shl i32 %147, 1
  %149 = or i32 %36, %0
  %150 = xor i32 %89, %149
  %151 = or i32 %44, %17
  %152 = xor i32 %66, %67
  %153 = or i32 %9, %12
  %154 = or i32 %25, %9
  %155 = or i32 %9, %61
  %156 = xor i32 %74, %5
  %157 = xor i32 %77, %97
  %158 = xor i32 %97, %0
  %159 = xor i32 %158, %5
  %160 = xor i32 %15, %1
  %161 = shl i32 %160, 1
  %162 = xor i32 %89, %90
  %163 = or i32 %33, %12
  %164 = or i32 %74, %124
  %165 = or i32 %74, %1
  %166 = or i32 %25, %32
  %167 = xor i32 %5, %9
  %168 = shl i32 %167, 1
  %169 = or i32 %11, %24
  %170 = shl i32 %169, 1
  %171 = xor i32 %74, %80
  %172 = and i32 %23, %12
  %173 = or i32 %44, %32
  %174 = or i32 %17, %16
  %175 = and i32 %61, %34
  %176 = and i32 %6, %4
  %177 = mul i32 %176, 29
  %178 = and i32 %36, %4
  %179 = mul i32 %178, 12
  %180 = and i32 %6, %0
  %181 = mul i32 %180, 9
  %182 = and i32 %103, %4
  %183 = mul i32 %117, 11
  %184 = and i32 %103, %0
  %185 = mul i32 %184, -13
  %186 = shl i32 %76, 2
  %187 = add i32 %146, -1
  %188 = add i32 %187, %142
  %189 = add i32 %188, %35
  %190 = add i32 %189, %155
  %191 = add i32 %190, %156
  %192 = add i32 %191, %145
  %193 = add i32 %192, %143
  %194 = shl i32 %193, 1
  %195 = add i32 %182, %74
  %196 = add i32 %195, %102
  %197 = sub i32 %196, %22
  %198 = add i32 %197, %159
  %199 = mul i32 %198, 5
  %200 = sub i32 %0, %50
  %201 = sub i32 %200, %134
  %202 = mul i32 %201, 3
  %203 = shl i32 %0, 2
  %204 = add i32 %2, 2
  %205 = add i32 %204, %33
  %206 = add i32 %205, %23
  %207 = add i32 %206, %17
  %208 = add i32 %207, %138
  %209 = add i32 %208, %43
  %210 = add i32 %209, %46
  %211 = add i32 %210, %47
  %212 = sub i32 %211, %54
  %213 = add i32 %212, %64
  %214 = add i32 %213, %71
  %215 = sub i32 %214, %95
  %216 = add i32 %215, %106
  %217 = sub i32 %216, %30
  %218 = add i32 %217, %121
  %219 = sub i32 %218, %125
  %220 = add i32 %219, %126
  %221 = add i32 %220, %15
  %222 = add i32 %221, %6
  %223 = add i32 %222, %36
  %224 = add i32 %223, %83
  %225 = add i32 %224, %19
  %226 = add i32 %225, %13
  %227 = sub i32 %226, %28
  %228 = add i32 %227, %29
  %229 = add i32 %228, %31
  %230 = sub i32 %229, %38
  %231 = add i32 %230, %39
  %232 = sub i32 %231, %42
  %233 = sub i32 %232, %49
  %234 = add i32 %233, %52
  %235 = sub i32 %234, %53
  %236 = add i32 %235, %57
  %237 = sub i32 %236, %59
  %238 = add i32 %237, %60
  %239 = add i32 %238, %62
  %240 = sub i32 %239, %63
  %241 = sub i32 %240, %70
  %242 = add i32 %241, %72
  %243 = add i32 %242, %73
  %244 = sub i32 %243, %75
  %245 = sub i32 %244, %79
  %246 = add i32 %245, %84
  %247 = sub i32 %246, %77
  %248 = sub i32 %247, %87
  %249 = add i32 %248, %88
  %250 = sub i32 %249, %93
  %251 = sub i32 %250, %94
  %252 = sub i32 %251, %96
  %253 = sub i32 %252, %99
  %254 = add i32 %253, %100
  %255 = add i32 %254, %101
  %256 = add i32 %255, %107
  %257 = add i32 %256, %108
  %258 = sub i32 %257, %109
  %259 = sub i32 %258, %110
  %260 = sub i32 %259, %113
  %261 = sub i32 %260, %115
  %262 = sub i32 %261, %116
  %263 = add i32 %262, %67
  %264 = sub i32 %263, %119
  %265 = add i32 %264, %120
  %266 = sub i32 %265, %122
  %267 = add i32 %266, %123
  %268 = add i32 %267, %127
  %269 = sub i32 %268, %128
  %270 = add i32 %269, %129
  %271 = sub i32 %270, %130
  %272 = sub i32 %271, %133
  %273 = sub i32 %272, %137
  %274 = sub i32 %273, %139
  %275 = sub i32 %274, %144
  %276 = sub i32 %275, %90
  %277 = sub i32 %276, %148
  %278 = sub i32 %277, %151
  %279 = sub i32 %278, %153
  %280 = add i32 %279, %154
  %281 = sub i32 %280, %163
  %282 = sub i32 %281, %164
  %283 = sub i32 %282, %165
  %284 = sub i32 %283, %166
  %285 = add i32 %284, %171
  %286 = add i32 %285, %172
  %287 = sub i32 %286, %173
  %288 = add i32 %287, %174
  %289 = sub i32 %288, %175
  %290 = sub i32 %289, %27
  %291 = sub i32 %290, %41
  %292 = sub i32 %291, %56
  %293 = add i32 %292, %69
  %294 = add i32 %293, %78
  %295 = sub i32 %294, %82
  %296 = add i32 %295, %86
  %297 = sub i32 %296, %92
  %298 = add i32 %297, %98
  %299 = sub i32 %298, %105
  %300 = sub i32 %299, %112
  %301 = sub i32 %300, %118
  %302 = sub i32 %301, %132
  %303 = add i32 %302, %136
  %304 = sub i32 %303, %141
  %305 = sub i32 %304, %150
  %306 = add i32 %305, %152
  %307 = sub i32 %306, %157
  %308 = sub i32 %307, %161
  %309 = add i32 %308, %162
  %310 = sub i32 %309, %168
  %311 = sub i32 %310, %170
  %312 = add i32 %311, %177
  %313 = add i32 %312, %179
  %314 = add i32 %313, %181
  %315 = add i32 %314, %183
  %316 = add i32 %315, %185
  %317 = sub i32 %316, %186
  %318 = add i32 %317, %203
  %319 = add i32 %318, %202
  %320 = add i32 %319, %199
  %321 = add i32 %320, %194
  %322 = icmp eq i32 %321, %8
  %323 = select i1 %322, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %324 = tail call i32 @puts(i8* nonnull dereferenceable(1) %323)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
