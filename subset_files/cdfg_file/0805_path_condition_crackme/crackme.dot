digraph "DFG for'crackme' function" {
	Node0x1984720[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1984da0[shape=record, label="  %6 = shl i32 %2, 2"];
	Node0x1984e40[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1984eb0[shape=record, label="  %8 = and i32 %7, %3"];
	Node0x1984f20[shape=record, label="  %9 = or i32 %7, %3"];
	Node0x1984f90[shape=record, label="  %10 = add i32 %5, 2"];
	Node0x1985000[shape=record, label="  %11 = sub i32 %10, %6"];
	Node0x1985070[shape=record, label="  %12 = add i32 %11, %8"];
	Node0x19850e0[shape=record, label="  %13 = sub i32 %12, %9"];
	Node0x1985180[shape=record, label="  %14 = shl i32 %1, 1"];
	Node0x1985220[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1985290[shape=record, label="  %16 = and i32 %2, %1"];
	Node0x1985300[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1985370[shape=record, label="  %18 = or i32 %2, %1"];
	Node0x19853e0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1985450[shape=record, label="  %20 = xor i32 %2, -1"];
	Node0x19854c0[shape=record, label="  %21 = or i32 %20, %1"];
	Node0x1985530[shape=record, label="  %22 = xor i32 %18, -1"];
	Node0x19855a0[shape=record, label="  %23 = xor i32 %21, -1"];
	Node0x1985640[shape=record, label="  %24 = mul i32 %23, -6"];
	Node0x19856b0[shape=record, label="  %25 = and i32 %20, %1"];
	Node0x1985720[shape=record, label="  %26 = shl i32 %16, 2"];
	Node0x1985790[shape=record, label="  %27 = or i32 %3, %0"];
	Node0x1985800[shape=record, label="  %28 = xor i32 %3, %0"];
	Node0x1985870[shape=record, label="  %29 = xor i32 %27, -1"];
	Node0x19858e0[shape=record, label="  %30 = shl i32 %8, 1"];
	Node0x1985950[shape=record, label="  %31 = and i32 %3, %0"];
	Node0x19859f0[shape=record, label="  %32 = mul i32 %31, -3"];
	Node0x1985c70[shape=record, label="  %33 = add i32 %29, %22"];
	Node0x1985d10[shape=record, label="  %34 = mul i32 %33, -5"];
	Node0x1985d80[shape=record, label="  %35 = sub i32 -2, %0"];
	Node0x1985df0[shape=record, label="  %36 = add i32 %35, %5"];
	Node0x1985e60[shape=record, label="  %37 = add i32 %36, %15"];
	Node0x1985ed0[shape=record, label="  %38 = add i32 %37, %17"];
	Node0x1985f40[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x1985fb0[shape=record, label="  %40 = sub i32 %39, %25"];
	Node0x1986020[shape=record, label="  %41 = sub i32 %40, %19"];
	Node0x1986090[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x1986100[shape=record, label="  %43 = sub i32 %42, %26"];
	Node0x1986170[shape=record, label="  %44 = sub i32 %43, %27"];
	Node0x19861e0[shape=record, label="  %45 = sub i32 %44, %28"];
	Node0x1986250[shape=record, label="  %46 = add i32 %45, %9"];
	Node0x19862c0[shape=record, label="  %47 = sub i32 %46, %30"];
	Node0x1986330[shape=record, label="  %48 = add i32 %47, %32"];
	Node0x19863a0[shape=record, label="  %49 = add i32 %48, %34"];
	Node0x1986410[shape=record, label="  %50 = icmp eq i32 %13, %49"];
	Node0x1925268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x19868b0[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x1986900[shape=record, label="  ret void"];
	Node0x1984720 -> Node0x1984da0;
	Node0x1984da0 -> Node0x1984e40;
	Node0x1984e40 -> Node0x1984eb0;
	Node0x1984eb0 -> Node0x1984f20;
	Node0x1984f20 -> Node0x1984f90;
	Node0x1984f90 -> Node0x1985000;
	Node0x1985000 -> Node0x1985070;
	Node0x1985070 -> Node0x19850e0;
	Node0x19850e0 -> Node0x1985180;
	Node0x1985180 -> Node0x1985220;
	Node0x1985220 -> Node0x1985290;
	Node0x1985290 -> Node0x1985300;
	Node0x1985300 -> Node0x1985370;
	Node0x1985370 -> Node0x19853e0;
	Node0x19853e0 -> Node0x1985450;
	Node0x1985450 -> Node0x19854c0;
	Node0x19854c0 -> Node0x1985530;
	Node0x1985530 -> Node0x19855a0;
	Node0x19855a0 -> Node0x1985640;
	Node0x1985640 -> Node0x19856b0;
	Node0x19856b0 -> Node0x1985720;
	Node0x1985720 -> Node0x1985790;
	Node0x1985790 -> Node0x1985800;
	Node0x1985800 -> Node0x1985870;
	Node0x1985870 -> Node0x19858e0;
	Node0x19858e0 -> Node0x1985950;
	Node0x1985950 -> Node0x19859f0;
	Node0x19859f0 -> Node0x1985c70;
	Node0x1985c70 -> Node0x1985d10;
	Node0x1985d10 -> Node0x1985d80;
	Node0x1985d80 -> Node0x1985df0;
	Node0x1985df0 -> Node0x1985e60;
	Node0x1985e60 -> Node0x1985ed0;
	Node0x1985ed0 -> Node0x1985f40;
	Node0x1985f40 -> Node0x1985fb0;
	Node0x1985fb0 -> Node0x1986020;
	Node0x1986020 -> Node0x1986090;
	Node0x1986090 -> Node0x1986100;
	Node0x1986100 -> Node0x1986170;
	Node0x1986170 -> Node0x19861e0;
	Node0x19861e0 -> Node0x1986250;
	Node0x1986250 -> Node0x19862c0;
	Node0x19862c0 -> Node0x1986330;
	Node0x1986330 -> Node0x19863a0;
	Node0x19863a0 -> Node0x1986410;
	Node0x1986410 -> Node0x1925268;
	Node0x1925268 -> Node0x19868b0;
	Node0x19868b0 -> Node0x1986900;
edge [color=red]
	Node0x1984e40 -> Node0x1984eb0;
	Node0x1984e40 -> Node0x1984f20;
	Node0x1984720 -> Node0x1984f90;
	Node0x1984f90 -> Node0x1985000;
	Node0x1984da0 -> Node0x1985000;
	Node0x1985000 -> Node0x1985070;
	Node0x1984eb0 -> Node0x1985070;
	Node0x1985070 -> Node0x19850e0;
	Node0x1984f20 -> Node0x19850e0;
	Node0x1985180 -> Node0x1985220;
	Node0x1985290 -> Node0x1985300;
	Node0x1985370 -> Node0x19853e0;
	Node0x1985450 -> Node0x19854c0;
	Node0x1985370 -> Node0x1985530;
	Node0x19854c0 -> Node0x19855a0;
	Node0x19855a0 -> Node0x1985640;
	Node0x1985450 -> Node0x19856b0;
	Node0x1985290 -> Node0x1985720;
	Node0x1985790 -> Node0x1985870;
	Node0x1984eb0 -> Node0x19858e0;
	Node0x1985950 -> Node0x19859f0;
	Node0x1985870 -> Node0x1985c70;
	Node0x1985530 -> Node0x1985c70;
	Node0x1985c70 -> Node0x1985d10;
	Node0x1985d80 -> Node0x1985df0;
	Node0x1984720 -> Node0x1985df0;
	Node0x1985df0 -> Node0x1985e60;
	Node0x1985220 -> Node0x1985e60;
	Node0x1985e60 -> Node0x1985ed0;
	Node0x1985300 -> Node0x1985ed0;
	Node0x1985ed0 -> Node0x1985f40;
	Node0x19854c0 -> Node0x1985f40;
	Node0x1985f40 -> Node0x1985fb0;
	Node0x19856b0 -> Node0x1985fb0;
	Node0x1985fb0 -> Node0x1986020;
	Node0x19853e0 -> Node0x1986020;
	Node0x1986020 -> Node0x1986090;
	Node0x1985640 -> Node0x1986090;
	Node0x1986090 -> Node0x1986100;
	Node0x1985720 -> Node0x1986100;
	Node0x1986100 -> Node0x1986170;
	Node0x1985790 -> Node0x1986170;
	Node0x1986170 -> Node0x19861e0;
	Node0x1985800 -> Node0x19861e0;
	Node0x19861e0 -> Node0x1986250;
	Node0x1984f20 -> Node0x1986250;
	Node0x1986250 -> Node0x19862c0;
	Node0x19858e0 -> Node0x19862c0;
	Node0x19862c0 -> Node0x1986330;
	Node0x19859f0 -> Node0x1986330;
	Node0x1986330 -> Node0x19863a0;
	Node0x1985d10 -> Node0x19863a0;
	Node0x19850e0 -> Node0x1986410;
	Node0x19863a0 -> Node0x1986410;
	Node0x1986410 -> Node0x1925268;
	Node0x1925268 -> Node0x19868b0;
}
