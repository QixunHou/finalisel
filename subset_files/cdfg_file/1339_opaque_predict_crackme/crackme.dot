digraph "DFG for'crackme' function" {
	Node0x16ae510[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x16aebc0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x16aec80[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x16aecf0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x16aed60[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x16aedd0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x16aee70[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x16aeee0[shape=record, label="  %10 = xor i32 %3, -1"];
	Node0x16aef80[shape=record, label="  %11 = mul i32 %10, 5"];
	Node0x16af020[shape=record, label="  %12 = shl i32 %5, 2"];
	Node0x16af0c0[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x16af130[shape=record, label="  %14 = and i32 %4, %0"];
	Node0x16af1d0[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x16af240[shape=record, label="  %16 = shl i32 %0, 1"];
	Node0x16af2b0[shape=record, label="  %17 = add i32 %16, 2"];
	Node0x16af320[shape=record, label="  %18 = sub i32 %17, %5"];
	Node0x16af390[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x16af400[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x16af470[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x16af4e0[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x16af550[shape=record, label="  %23 = sub i32 %22, %9"];
	Node0x16af5c0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x16af630[shape=record, label="  %25 = icmp eq i32 %3, %24"];
	Node0x164f268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16afad0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x16afb20[shape=record, label="  ret void"];
	Node0x16ae510 -> Node0x16aebc0;
	Node0x16aebc0 -> Node0x16aec80;
	Node0x16aec80 -> Node0x16aecf0;
	Node0x16aecf0 -> Node0x16aed60;
	Node0x16aed60 -> Node0x16aedd0;
	Node0x16aedd0 -> Node0x16aee70;
	Node0x16aee70 -> Node0x16aeee0;
	Node0x16aeee0 -> Node0x16aef80;
	Node0x16aef80 -> Node0x16af020;
	Node0x16af020 -> Node0x16af0c0;
	Node0x16af0c0 -> Node0x16af130;
	Node0x16af130 -> Node0x16af1d0;
	Node0x16af1d0 -> Node0x16af240;
	Node0x16af240 -> Node0x16af2b0;
	Node0x16af2b0 -> Node0x16af320;
	Node0x16af320 -> Node0x16af390;
	Node0x16af390 -> Node0x16af400;
	Node0x16af400 -> Node0x16af470;
	Node0x16af470 -> Node0x16af4e0;
	Node0x16af4e0 -> Node0x16af550;
	Node0x16af550 -> Node0x16af5c0;
	Node0x16af5c0 -> Node0x16af630;
	Node0x16af630 -> Node0x164f268;
	Node0x164f268 -> Node0x16afad0;
	Node0x16afad0 -> Node0x16afb20;
edge [color=red]
	Node0x16aebc0 -> Node0x16aec80;
	Node0x16aed60 -> Node0x16aedd0;
	Node0x16aedd0 -> Node0x16aee70;
	Node0x16ae510 -> Node0x16aeee0;
	Node0x16aeee0 -> Node0x16aef80;
	Node0x16aec80 -> Node0x16af020;
	Node0x16af020 -> Node0x16af0c0;
	Node0x16aebc0 -> Node0x16af130;
	Node0x16af130 -> Node0x16af1d0;
	Node0x16af240 -> Node0x16af2b0;
	Node0x16af2b0 -> Node0x16af320;
	Node0x16aec80 -> Node0x16af320;
	Node0x16af320 -> Node0x16af390;
	Node0x16aecf0 -> Node0x16af390;
	Node0x16af390 -> Node0x16af400;
	Node0x16aef80 -> Node0x16af400;
	Node0x16af400 -> Node0x16af470;
	Node0x16af1d0 -> Node0x16af470;
	Node0x16af470 -> Node0x16af4e0;
	Node0x16aedd0 -> Node0x16af4e0;
	Node0x16af4e0 -> Node0x16af550;
	Node0x16aee70 -> Node0x16af550;
	Node0x16af550 -> Node0x16af5c0;
	Node0x16af0c0 -> Node0x16af5c0;
	Node0x16ae510 -> Node0x16af630;
	Node0x16af5c0 -> Node0x16af630;
	Node0x16af630 -> Node0x164f268;
	Node0x164f268 -> Node0x16afad0;
}
