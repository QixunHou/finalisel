; ModuleID = '../.././c_source_file/1841_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1841_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %5, %2
  %7 = xor i32 %1, -1
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %0
  %10 = and i32 %9, %7
  %11 = shl i32 %10, 1
  %12 = sub i32 %6, %11
  %13 = and i32 %1, %0
  %14 = or i32 %13, %2
  %15 = and i32 %2, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %1, %0
  %18 = xor i32 %17, -1
  %19 = and i32 %16, %18
  %20 = or i32 %7, %0
  %21 = and i32 %20, %2
  %22 = xor i32 %2, %0
  %23 = or i32 %22, %1
  %24 = and i32 %18, %2
  %25 = or i32 %8, %1
  %26 = xor i32 %2, %1
  %27 = and i32 %26, %20
  %28 = or i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %0, -1
  %32 = or i32 %25, %31
  %33 = and i32 %4, %2
  %34 = or i32 %2, %0
  %35 = and i32 %34, %18
  %36 = shl i32 %35, 1
  %37 = and i32 %9, %1
  %38 = and i32 %8, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %39, %1
  %41 = xor i32 %9, -1
  %42 = or i32 %17, %41
  %43 = shl i32 %42, 1
  %44 = xor i32 %26, %0
  %45 = and i32 %2, %1
  %46 = and i32 %45, %31
  %47 = and i32 %28, %0
  %48 = xor i32 %47, 1073741823
  %49 = xor i32 %48, %46
  %50 = or i32 %15, %17
  %51 = xor i32 %22, -1
  %52 = or i32 %51, %18
  %53 = and i32 %45, %0
  %54 = and i32 %26, %31
  %55 = or i32 %53, %54
  %56 = xor i32 %41, %1
  %57 = xor i32 %20, -1
  %58 = xor i32 %57, %2
  %59 = and i32 %34, %1
  %60 = or i32 %26, %31
  %61 = or i32 %26, %57
  %62 = xor i32 %25, -1
  %63 = or i32 %13, %62
  %64 = or i32 %46, %47
  %65 = or i32 %38, %45
  %66 = and i32 %7, %0
  %67 = and i32 %8, %1
  %68 = or i32 %67, %66
  %69 = xor i32 %13, -1
  %70 = xor i32 %69, %2
  %71 = and i32 %4, %51
  %72 = or i32 %15, %57
  %73 = xor i32 %67, -1
  %74 = shl i32 %73, 1
  %75 = or i32 %29, %31
  %76 = xor i32 %66, -1
  %77 = and i32 %76, %2
  %78 = shl i32 %77, 1
  %79 = or i32 %15, %1
  %80 = shl i32 %79, 1
  %81 = and i32 %34, %7
  %82 = or i32 %22, %66
  %83 = xor i32 %66, %73
  %84 = xor i32 %45, %0
  %85 = shl i32 %84, 1
  %86 = or i32 %41, %1
  %87 = xor i32 %34, -1
  %88 = xor i32 %87, %1
  %89 = or i32 %41, %7
  %90 = xor i32 %44, -1
  %91 = or i32 %53, %90
  %92 = and i32 %39, %18
  %93 = xor i32 %15, %1
  %94 = and i32 %20, %8
  %95 = and i32 %17, %8
  %96 = and i32 %7, %2
  %97 = and i32 %96, %31
  %98 = xor i32 %97, %60
  %99 = and i32 %73, %0
  %100 = and i32 %96, %0
  %101 = or i32 %7, %2
  %102 = and i32 %101, %31
  %103 = xor i32 %102, -1
  %104 = xor i32 %100, %103
  %105 = xor i32 %45, -1
  %106 = add i32 %45, 1
  %107 = xor i32 %28, %0
  %108 = xor i32 %53, -1
  %109 = xor i32 %107, %108
  %110 = and i32 %26, %0
  %111 = and i32 %73, %31
  %112 = xor i32 %38, %25
  %113 = and i32 %51, %69
  %114 = or i32 %15, %18
  %115 = shl i32 %114, 1
  %116 = and i32 %17, %51
  %117 = and i32 %17, %2
  %118 = or i32 %67, %31
  %119 = or i32 %100, %102
  %120 = and i32 %25, %31
  %121 = or i32 %51, %5
  %122 = add i32 %34, 1
  %123 = or i32 %53, %107
  %124 = or i32 %51, %57
  %125 = xor i32 %9, %13
  %126 = and i32 %105, %31
  %127 = or i32 %26, %0
  %128 = xor i32 %127, -1
  %129 = or i32 %100, %128
  %130 = xor i32 %13, %2
  %131 = xor i32 %100, %127
  %132 = or i32 %17, %8
  %133 = xor i32 %15, %73
  %134 = or i32 %5, %2
  %135 = xor i32 %26, -1
  %136 = and i32 %135, %0
  %137 = or i32 %13, %41
  %138 = xor i32 %100, %90
  %139 = or i32 %51, %7
  %140 = and i32 %69, %2
  %141 = or i32 %105, %0
  %142 = or i32 %17, %51
  %143 = and i32 %51, %18
  %144 = xor i32 %9, %1
  %145 = shl i32 %144, 1
  %146 = and i32 %26, %4
  %147 = xor i32 %34, %1
  %148 = shl i32 %147, 1
  %149 = and i32 %8, %18
  %150 = and i32 %22, %69
  %151 = or i32 %22, %18
  %152 = and i32 %22, %4
  %153 = shl i32 %152, 1
  %154 = or i32 %13, %8
  %155 = or i32 %66, %135
  %156 = xor i32 %53, %44
  %157 = or i32 %13, %87
  %158 = or i32 %22, %5
  %159 = or i32 %25, %0
  %160 = and i32 %26, %69
  %161 = add i32 %22, 1
  %162 = xor i32 %54, %108
  %163 = or i32 %87, %1
  %164 = shl i32 %163, 1
  %165 = or i32 %38, %17
  %166 = or i32 %45, %0
  %167 = and i32 %22, %20
  %168 = and i32 %28, %31
  %169 = or i32 %26, %13
  %170 = or i32 %26, %66
  %171 = or i32 %22, %57
  %172 = add i32 %25, 1
  %173 = or i32 %13, %51
  %174 = and i32 %9, %18
  %175 = or i32 %66, %51
  %176 = xor i32 %110, -1
  %177 = xor i32 %46, %176
  %178 = xor i32 %62, %0
  %179 = shl i32 %178, 1
  %180 = xor i32 %28, %13
  %181 = or i32 %38, %7
  %182 = xor i32 %60, -1
  %183 = or i32 %97, %182
  %184 = and i32 %51, %1
  %185 = shl i32 %184, 1
  %186 = or i32 %8, %5
  %187 = or i32 %105, %31
  %188 = or i32 %38, %62
  %189 = and i32 %22, %18
  %190 = xor i32 %20, %2
  %191 = or i32 %41, %18
  %192 = or i32 %38, %1
  %193 = or i32 %53, %168
  %194 = and i32 %4, %8
  %195 = xor i32 %38, %1
  %196 = or i32 %15, %67
  %197 = and i32 %39, %1
  %198 = or i32 %57, %2
  %199 = or i32 %62, %0
  %200 = or i32 %28, %0
  %201 = and i32 %22, %76
  %202 = or i32 %135, %5
  %203 = shl i32 %202, 1
  %204 = and i32 %51, %7
  %205 = and i32 %22, %7
  %206 = shl i32 %2, 2
  %207 = and i32 %51, %76
  %208 = shl i32 %47, 1
  %209 = or i32 %26, %5
  %210 = or i32 %22, %7
  %211 = shl i32 %210, 1
  %212 = and i32 %9, %17
  %213 = or i32 %15, %7
  %214 = xor i32 %66, %2
  %215 = or i32 %18, %2
  %216 = and i32 %20, %51
  %217 = add i32 %15, 1
  %218 = and i32 %25, %0
  %219 = xor i32 %135, %0
  %220 = or i32 %87, %18
  %221 = xor i32 %34, %13
  %222 = and i32 %17, %16
  %223 = and i32 %101, %0
  %224 = or i32 %97, %223
  %225 = shl i32 %76, 1
  %226 = and i32 %8, %76
  %227 = or i32 %17, %2
  %228 = or i32 %62, %31
  %229 = and i32 %135, %76
  %230 = xor i32 %73, %0
  %231 = or i32 %28, %31
  %232 = xor i32 %168, %108
  %233 = xor i32 %15, %20
  %234 = and i32 %135, %69
  %235 = and i32 %20, %135
  %236 = shl i32 %235, 1
  %237 = or i32 %8, %57
  %238 = xor i32 %15, %4
  %239 = shl i32 %238, 1
  %240 = and i32 %39, %7
  %241 = xor i32 %4, %2
  %242 = shl i32 %241, 1
  %243 = and i32 %8, %69
  %244 = or i32 %87, %7
  %245 = or i32 %51, %1
  %246 = or i32 %73, %31
  %247 = or i32 %45, %31
  %248 = or i32 %22, %17
  %249 = or i32 %73, %0
  %250 = xor i32 %66, %105
  %251 = or i32 %135, %31
  %252 = xor i32 %29, %0
  %253 = or i32 %15, %29
  %254 = shl i32 %253, 1
  %255 = xor i32 %105, %0
  %256 = and i32 %22, %17
  %257 = and i32 %34, %17
  %258 = and i32 %4, %135
  %259 = or i32 %45, %66
  %260 = or i32 %17, %87
  %261 = and i32 %135, %31
  %262 = xor i32 %101, %0
  %263 = or i32 %100, %262
  %264 = and i32 %16, %7
  %265 = or i32 %13, %29
  %266 = xor i32 %223, -1
  %267 = xor i32 %97, %266
  %268 = or i32 %15, %5
  %269 = and i32 %105, %0
  %270 = xor i32 %16, %1
  %271 = or i32 %66, %2
  %272 = and i32 %29, %31
  %273 = shl i32 %272, 3
  %274 = and i32 %67, %31
  %275 = mul i32 %274, -21
  %276 = and i32 %29, %0
  %277 = mul i32 %276, -6
  %278 = and i32 %67, %0
  %279 = mul i32 %278, -18
  %280 = and i32 %62, %31
  %281 = mul i32 %280, -30
  %282 = mul i32 %46, -17
  %283 = and i32 %62, %0
  %284 = mul i32 %283, -15
  %285 = add i32 %8, %7
  %286 = add i32 %285, %214
  %287 = add i32 %286, %190
  %288 = add i32 %287, %186
  %289 = add i32 %288, %28
  %290 = add i32 %289, %41
  %291 = add i32 %290, %33
  %292 = add i32 %291, %268
  %293 = add i32 %292, %54
  %294 = add i32 %293, %248
  %295 = add i32 %294, %246
  %296 = add i32 %295, %228
  %297 = add i32 %296, %205
  %298 = add i32 %297, %197
  %299 = add i32 %298, %189
  %300 = add i32 %299, %175
  %301 = add i32 %300, %168
  %302 = add i32 %301, %160
  %303 = add i32 %302, %150
  %304 = add i32 %303, %146
  %305 = add i32 %304, %133
  %306 = add i32 %305, %83
  %307 = add i32 %306, %68
  %308 = add i32 %307, %119
  %309 = shl i32 %308, 1
  %310 = sub i32 %201, %233
  %311 = add i32 %310, %188
  %312 = sub i32 %311, %157
  %313 = add i32 %312, %86
  %314 = add i32 %313, %59
  %315 = sub i32 %314, %55
  %316 = mul i32 %315, 5
  %317 = add i32 %53, %26
  %318 = add i32 %317, %49
  %319 = shl i32 %318, 2
  %320 = add i32 %226, %122
  %321 = add i32 %320, %94
  %322 = mul i32 %321, 3
  %323 = add i32 %1, 2
  %324 = add i32 %323, %5
  %325 = sub i32 %324, %20
  %326 = sub i32 %325, %13
  %327 = add i32 %326, %66
  %328 = add i32 %327, %69
  %329 = sub i32 %328, %17
  %330 = add i32 %329, %18
  %331 = sub i32 %330, %14
  %332 = add i32 %331, %21
  %333 = sub i32 %332, %24
  %334 = add i32 %333, %25
  %335 = sub i32 %334, %58
  %336 = sub i32 %335, %70
  %337 = add i32 %336, %22
  %338 = sub i32 %337, %95
  %339 = add i32 %338, %106
  %340 = sub i32 %339, %117
  %341 = sub i32 %340, %38
  %342 = add i32 %341, %39
  %343 = add i32 %342, %130
  %344 = sub i32 %343, %132
  %345 = sub i32 %344, %134
  %346 = sub i32 %345, %140
  %347 = add i32 %346, %9
  %348 = add i32 %347, %149
  %349 = add i32 %348, %154
  %350 = add i32 %349, %135
  %351 = add i32 %350, %161
  %352 = add i32 %351, %172
  %353 = add i32 %352, %15
  %354 = add i32 %353, %194
  %355 = add i32 %354, %198
  %356 = add i32 %355, %45
  %357 = sub i32 %356, %206
  %358 = sub i32 %357, %34
  %359 = add i32 %358, %215
  %360 = add i32 %359, %217
  %361 = sub i32 %360, %225
  %362 = sub i32 %361, %227
  %363 = sub i32 %362, %237
  %364 = add i32 %363, %243
  %365 = add i32 %364, %67
  %366 = add i32 %365, %271
  %367 = sub i32 %366, %19
  %368 = sub i32 %367, %23
  %369 = add i32 %368, %27
  %370 = sub i32 %369, %30
  %371 = add i32 %370, %32
  %372 = add i32 %371, %37
  %373 = sub i32 %372, %40
  %374 = sub i32 %373, %44
  %375 = sub i32 %374, %50
  %376 = sub i32 %375, %52
  %377 = add i32 %376, %56
  %378 = sub i32 %377, %60
  %379 = add i32 %378, %61
  %380 = add i32 %379, %63
  %381 = add i32 %380, %65
  %382 = sub i32 %381, %71
  %383 = sub i32 %382, %72
  %384 = sub i32 %383, %74
  %385 = add i32 %384, %75
  %386 = sub i32 %385, %78
  %387 = sub i32 %386, %81
  %388 = add i32 %387, %82
  %389 = sub i32 %388, %88
  %390 = sub i32 %389, %89
  %391 = add i32 %390, %92
  %392 = add i32 %391, %93
  %393 = add i32 %392, %99
  %394 = sub i32 %393, %110
  %395 = add i32 %394, %111
  %396 = add i32 %395, %112
  %397 = sub i32 %396, %113
  %398 = add i32 %397, %116
  %399 = add i32 %398, %118
  %400 = sub i32 %399, %120
  %401 = add i32 %400, %121
  %402 = add i32 %401, %124
  %403 = sub i32 %402, %125
  %404 = add i32 %403, %126
  %405 = add i32 %404, %136
  %406 = sub i32 %405, %137
  %407 = sub i32 %406, %139
  %408 = add i32 %407, %141
  %409 = add i32 %408, %142
  %410 = sub i32 %409, %143
  %411 = sub i32 %410, %151
  %412 = add i32 %411, %155
  %413 = sub i32 %412, %158
  %414 = add i32 %413, %159
  %415 = add i32 %414, %165
  %416 = add i32 %415, %166
  %417 = sub i32 %416, %167
  %418 = add i32 %417, %169
  %419 = add i32 %418, %170
  %420 = sub i32 %419, %171
  %421 = sub i32 %420, %173
  %422 = add i32 %421, %174
  %423 = add i32 %422, %180
  %424 = add i32 %423, %181
  %425 = add i32 %424, %107
  %426 = sub i32 %425, %187
  %427 = add i32 %426, %191
  %428 = sub i32 %427, %192
  %429 = sub i32 %428, %195
  %430 = add i32 %429, %196
  %431 = sub i32 %430, %199
  %432 = add i32 %431, %200
  %433 = sub i32 %432, %204
  %434 = add i32 %433, %207
  %435 = add i32 %434, %209
  %436 = add i32 %435, %212
  %437 = add i32 %436, %213
  %438 = add i32 %437, %216
  %439 = sub i32 %438, %218
  %440 = sub i32 %439, %219
  %441 = add i32 %440, %220
  %442 = sub i32 %441, %221
  %443 = add i32 %442, %222
  %444 = add i32 %443, %229
  %445 = sub i32 %444, %230
  %446 = sub i32 %445, %231
  %447 = add i32 %446, %234
  %448 = add i32 %447, %240
  %449 = sub i32 %448, %242
  %450 = add i32 %449, %244
  %451 = add i32 %450, %245
  %452 = sub i32 %451, %247
  %453 = add i32 %452, %249
  %454 = sub i32 %453, %250
  %455 = sub i32 %454, %251
  %456 = sub i32 %455, %252
  %457 = add i32 %456, %255
  %458 = add i32 %457, %256
  %459 = sub i32 %458, %257
  %460 = sub i32 %459, %258
  %461 = sub i32 %460, %259
  %462 = sub i32 %461, %260
  %463 = sub i32 %462, %261
  %464 = sub i32 %463, %264
  %465 = add i32 %464, %127
  %466 = sub i32 %465, %265
  %467 = add i32 %466, %269
  %468 = add i32 %467, %270
  %469 = sub i32 %468, %36
  %470 = sub i32 %469, %43
  %471 = add i32 %470, %64
  %472 = sub i32 %471, %80
  %473 = sub i32 %472, %85
  %474 = add i32 %473, %91
  %475 = sub i32 %474, %98
  %476 = sub i32 %475, %104
  %477 = add i32 %476, %109
  %478 = sub i32 %477, %115
  %479 = sub i32 %478, %123
  %480 = add i32 %479, %129
  %481 = add i32 %480, %131
  %482 = add i32 %481, %138
  %483 = sub i32 %482, %145
  %484 = sub i32 %483, %148
  %485 = sub i32 %484, %153
  %486 = add i32 %485, %156
  %487 = add i32 %486, %162
  %488 = sub i32 %487, %164
  %489 = add i32 %488, %177
  %490 = sub i32 %489, %179
  %491 = add i32 %490, %183
  %492 = sub i32 %491, %185
  %493 = add i32 %492, %193
  %494 = sub i32 %493, %203
  %495 = sub i32 %494, %208
  %496 = sub i32 %495, %211
  %497 = sub i32 %496, %224
  %498 = sub i32 %497, %232
  %499 = sub i32 %498, %236
  %500 = sub i32 %499, %239
  %501 = sub i32 %500, %254
  %502 = add i32 %501, %263
  %503 = sub i32 %502, %267
  %504 = sub i32 %503, %273
  %505 = add i32 %504, %275
  %506 = add i32 %505, %277
  %507 = add i32 %506, %279
  %508 = add i32 %507, %281
  %509 = add i32 %508, %282
  %510 = add i32 %509, %284
  %511 = add i32 %510, %322
  %512 = add i32 %511, %319
  %513 = add i32 %512, %316
  %514 = add i32 %513, %309
  %515 = icmp eq i32 %12, %514
  %516 = select i1 %515, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %517 = tail call i32 @puts(i8* nonnull dereferenceable(1) %516)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
