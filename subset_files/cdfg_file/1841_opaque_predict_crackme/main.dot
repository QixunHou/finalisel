digraph "DFG for'main' function" {
	Node0xf82a98[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xf82b18[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xf82ba8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xf82c08[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xf83088[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xf83168[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xf83268[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf83328[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xf833d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf89fb8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xf8a078[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xf8afe8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xf8b658[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xf8b750[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xf8b958[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xf8bab8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xf8bbc8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xf8bc88[shape=record, label="  ret i32 0"];
	Node0xf82a98 -> Node0xf82b18;
	Node0xf82b18 -> Node0xf82ba8;
	Node0xf82ba8 -> Node0xf82c08;
	Node0xf82c08 -> Node0xf83088;
	Node0xf83088 -> Node0xf83168;
	Node0xf83168 -> Node0xf83268;
	Node0xf83268 -> Node0xf83328;
	Node0xf83328 -> Node0xf833d8;
	Node0xf833d8 -> Node0xf89fb8;
	Node0xf89fb8 -> Node0xf8a078;
	Node0xf8a078 -> Node0xf8afe8;
	Node0xf8afe8 -> Node0xf8b658;
	Node0xf8b658 -> Node0xf8b750;
	Node0xf8b750 -> Node0xf8b958;
	Node0xf8b958 -> Node0xf8bab8;
	Node0xf8bab8 -> Node0xf8bbc8;
	Node0xf8bbc8 -> Node0xf8bc88;
edge [color=red]
	Node0xf82a98 -> Node0xf82c08;
	Node0xf82c08 -> Node0xf83088;
	Node0xf82b18 -> Node0xf83168;
	Node0xf83168 -> Node0xf83268;
	Node0xf82ba8 -> Node0xf83328;
	Node0xf83328 -> Node0xf833d8;
	Node0xf82a98 -> Node0xf89fb8;
	Node0xf82b18 -> Node0xf89fb8;
	Node0xf82ba8 -> Node0xf89fb8;
	Node0xf82a98 -> Node0xf8a078;
	Node0xf82b18 -> Node0xf8afe8;
	Node0xf82ba8 -> Node0xf8b658;
	Node0xf8a078 -> Node0xf8b750;
	Node0xf8afe8 -> Node0xf8b750;
	Node0xf8b658 -> Node0xf8b750;
	Node0xf83328 -> Node0xf8b958;
	Node0xf83168 -> Node0xf8bab8;
	Node0xf82c08 -> Node0xf8bbc8;
}
