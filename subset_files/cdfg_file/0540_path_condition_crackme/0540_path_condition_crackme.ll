; ModuleID = '../.././c_source_file/0540_path_condition_crackme.c'
source_filename = "../.././c_source_file/0540_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = xor i32 %1, -1
  %6 = or i32 %5, %0
  %7 = xor i32 %6, -1
  %8 = or i32 %4, %7
  %9 = or i32 %2, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %1
  %12 = add i32 %11, %8
  %13 = sub i32 0, %12
  %14 = or i32 %2, %1
  %15 = or i32 %14, %0
  %16 = and i32 %5, %0
  %17 = and i32 %4, %1
  %18 = or i32 %17, %16
  %19 = and i32 %2, %1
  %20 = and i32 %19, %0
  %21 = xor i32 %0, -1
  %22 = and i32 %14, %21
  %23 = or i32 %20, %22
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %25, %2
  %27 = xor i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = and i32 %4, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %5
  %32 = shl i32 %31, 1
  %33 = and i32 %5, %2
  %34 = and i32 %33, %0
  %35 = xor i32 %27, %21
  %36 = xor i32 %35, %34
  %37 = and i32 %28, %0
  %38 = mul i32 %37, -5
  %39 = or i32 %17, %21
  %40 = and i32 %27, %6
  %41 = xor i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = and i32 %6, %42
  %44 = shl i32 %43, 1
  %45 = xor i32 %17, %0
  %46 = xor i32 %14, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %20, %47
  %49 = or i32 %28, %7
  %50 = and i32 %41, %25
  %51 = or i32 %4, %1
  %52 = and i32 %51, %0
  %53 = or i32 %19, %0
  %54 = xor i32 %30, %1
  %55 = xor i32 %16, -1
  %56 = and i32 %28, %55
  %57 = or i32 %1, %0
  %58 = or i32 %28, %0
  %59 = and i32 %27, %21
  %60 = or i32 %20, %59
  %61 = or i32 %42, %25
  %62 = and i32 %9, %5
  %63 = and i32 %2, %0
  %64 = or i32 %63, %5
  %65 = xor i32 %63, -1
  %66 = and i32 %65, %5
  %67 = and i32 %1, %0
  %68 = or i32 %67, %10
  %69 = shl i32 %68, 1
  %70 = and i32 %42, %55
  %71 = shl i32 %70, 1
  %72 = or i32 %27, %16
  %73 = xor i32 %17, -1
  %74 = and i32 %24, %42
  %75 = and i32 %65, %25
  %76 = shl i32 %75, 2
  %77 = and i32 %24, %65
  %78 = shl i32 %9, 1
  %79 = or i32 %29, %5
  %80 = xor i32 %63, %1
  %81 = and i32 %4, %55
  %82 = and i32 %41, %5
  %83 = shl i32 %82, 2
  %84 = and i32 %6, %4
  %85 = and i32 %19, %21
  %86 = and i32 %14, %0
  %87 = xor i32 %85, -1
  %88 = xor i32 %86, %87
  %89 = xor i32 %51, -1
  %90 = or i32 %89, %0
  %91 = and i32 %6, %2
  %92 = xor i32 %63, %73
  %93 = shl i32 %92, 1
  %94 = and i32 %42, %25
  %95 = xor i32 %14, -1
  %96 = or i32 %95, %21
  %97 = or i32 %42, %7
  %98 = or i32 %29, %89
  %99 = xor i32 %51, %0
  %100 = or i32 %24, %10
  %101 = or i32 %42, %1
  %102 = and i32 %33, %21
  %103 = or i32 %5, %2
  %104 = and i32 %103, %0
  %105 = xor i32 %104, -1
  %106 = xor i32 %102, %105
  %107 = xor i32 %57, %2
  %108 = shl i32 %25, 2
  %109 = or i32 %27, %0
  %110 = xor i32 %109, 2147483647
  %111 = or i32 %110, %34
  %112 = xor i32 %19, -1
  %113 = and i32 %112, %0
  %114 = shl i32 %113, 1
  %115 = or i32 %7, %2
  %116 = or i32 %73, %0
  %117 = and i32 %41, %57
  %118 = or i32 %4, %0
  %119 = or i32 %41, %25
  %120 = or i32 %41, %67
  %121 = xor i32 %103, %0
  %122 = xor i32 %34, -1
  %123 = xor i32 %121, %122
  %124 = and i32 %42, %1
  %125 = and i32 %65, %1
  %126 = or i32 %27, %67
  %127 = and i32 %41, %6
  %128 = shl i32 %127, 1
  %129 = or i32 %67, %2
  %130 = or i32 %95, %0
  %131 = or i32 %24, %4
  %132 = shl i32 %131, 1
  %133 = xor i32 %118, -1
  %134 = or i32 %133, %25
  %135 = shl i32 %134, 1
  %136 = or i32 %24, %2
  %137 = or i32 %67, %133
  %138 = xor i32 %7, %2
  %139 = xor i32 %34, %109
  %140 = or i32 %63, %1
  %141 = and i32 %30, %1
  %142 = add i32 %2, 1
  %143 = or i32 %17, %0
  %144 = and i32 %9, %24
  %145 = shl i32 %5, 1
  %146 = and i32 %41, %24
  %147 = xor i32 %95, %0
  %148 = or i32 %14, %21
  %149 = and i32 %57, %28
  %150 = and i32 %118, %1
  %151 = shl i32 %150, 1
  %152 = xor i32 %14, %67
  %153 = xor i32 %16, %73
  %154 = or i32 %29, %25
  %155 = xor i32 %107, -1
  %156 = or i32 %112, %21
  %157 = or i32 %27, %7
  %158 = or i32 %16, %2
  %159 = shl i32 %158, 1
  %160 = or i32 %133, %1
  %161 = and i32 %24, %4
  %162 = xor i32 %29, %112
  %163 = and i32 %73, %21
  %164 = xor i32 %73, %0
  %165 = or i32 %67, %42
  %166 = xor i32 %118, %67
  %167 = xor i32 %28, %0
  %168 = xor i32 %55, %2
  %169 = or i32 %34, %121
  %170 = or i32 %63, %95
  %171 = xor i32 %67, -1
  %172 = and i32 %28, %171
  %173 = or i32 %19, %16
  %174 = and i32 %27, %0
  %175 = xor i32 %174, %87
  %176 = or i32 %29, %24
  %177 = or i32 %41, %5
  %178 = or i32 %67, %4
  %179 = or i32 %19, %21
  %180 = xor i32 %6, %2
  %181 = or i32 %63, %24
  %182 = xor i32 %27, 1073741823
  %183 = and i32 %182, %0
  %184 = or i32 %183, %102
  %185 = xor i32 %133, %1
  %186 = or i32 %89, %21
  %187 = and i32 %27, %57
  %188 = xor i32 %29, %51
  %189 = and i32 %95, %21
  %190 = mul i32 %189, 12
  %191 = and i32 %17, %21
  %192 = shl i32 %191, 4
  %193 = and i32 %95, %0
  %194 = and i32 %17, %0
  %195 = and i32 %89, %21
  %196 = mul i32 %85, -27
  %197 = and i32 %89, %0
  %198 = mul i32 %197, -7
  %199 = shl i32 %20, 1
  %200 = add i32 %42, %21
  %201 = add i32 %200, %19
  %202 = add i32 %201, %136
  %203 = add i32 %202, %195
  %204 = add i32 %203, %160
  %205 = add i32 %204, %130
  %206 = add i32 %205, %80
  %207 = add i32 %206, %77
  %208 = add i32 %207, %50
  %209 = add i32 %208, %111
  %210 = shl i32 %209, 1
  %211 = add i32 %117, %115
  %212 = add i32 %211, %184
  %213 = shl i32 %212, 2
  %214 = sub i32 %194, %177
  %215 = mul i32 %214, 3
  %216 = sub i32 1, %0
  %217 = add i32 %216, %57
  %218 = add i32 %217, %16
  %219 = sub i32 %218, %67
  %220 = add i32 %219, %142
  %221 = sub i32 %220, %145
  %222 = add i32 %221, %155
  %223 = add i32 %222, %26
  %224 = add i32 %223, %28
  %225 = sub i32 %224, %27
  %226 = add i32 %225, %41
  %227 = add i32 %226, %73
  %228 = add i32 %227, %81
  %229 = add i32 %228, %84
  %230 = add i32 %229, %91
  %231 = sub i32 %230, %107
  %232 = sub i32 %231, %108
  %233 = add i32 %232, %14
  %234 = sub i32 %233, %118
  %235 = add i32 %234, %129
  %236 = sub i32 %235, %138
  %237 = add i32 %236, %161
  %238 = add i32 %237, %168
  %239 = sub i32 %238, %178
  %240 = add i32 %239, %180
  %241 = sub i32 %240, %18
  %242 = sub i32 %241, %15
  %243 = add i32 %242, %39
  %244 = add i32 %243, %40
  %245 = add i32 %244, %45
  %246 = sub i32 %245, %49
  %247 = add i32 %246, %52
  %248 = add i32 %247, %53
  %249 = add i32 %248, %54
  %250 = sub i32 %249, %56
  %251 = sub i32 %250, %58
  %252 = sub i32 %251, %61
  %253 = add i32 %252, %62
  %254 = add i32 %253, %64
  %255 = sub i32 %254, %66
  %256 = add i32 %255, %72
  %257 = add i32 %256, %74
  %258 = sub i32 %257, %78
  %259 = sub i32 %258, %79
  %260 = add i32 %259, %90
  %261 = sub i32 %260, %94
  %262 = add i32 %261, %96
  %263 = sub i32 %262, %97
  %264 = add i32 %263, %98
  %265 = add i32 %264, %59
  %266 = add i32 %265, %99
  %267 = add i32 %266, %100
  %268 = add i32 %267, %101
  %269 = add i32 %268, %116
  %270 = sub i32 %269, %119
  %271 = sub i32 %270, %120
  %272 = add i32 %271, %124
  %273 = add i32 %272, %125
  %274 = add i32 %273, %126
  %275 = add i32 %274, %86
  %276 = sub i32 %275, %22
  %277 = sub i32 %276, %132
  %278 = sub i32 %277, %137
  %279 = add i32 %278, %140
  %280 = sub i32 %279, %141
  %281 = add i32 %280, %143
  %282 = add i32 %281, %144
  %283 = add i32 %282, %146
  %284 = sub i32 %283, %147
  %285 = sub i32 %284, %148
  %286 = add i32 %285, %149
  %287 = sub i32 %286, %152
  %288 = add i32 %287, %153
  %289 = add i32 %288, %154
  %290 = sub i32 %289, %156
  %291 = add i32 %290, %157
  %292 = sub i32 %291, %159
  %293 = sub i32 %292, %162
  %294 = sub i32 %293, %163
  %295 = add i32 %294, %164
  %296 = sub i32 %295, %165
  %297 = sub i32 %296, %166
  %298 = sub i32 %297, %167
  %299 = sub i32 %298, %170
  %300 = add i32 %299, %172
  %301 = add i32 %300, %46
  %302 = add i32 %301, %173
  %303 = sub i32 %302, %176
  %304 = add i32 %303, %179
  %305 = sub i32 %304, %181
  %306 = add i32 %305, %185
  %307 = add i32 %306, %186
  %308 = add i32 %307, %187
  %309 = add i32 %308, %188
  %310 = add i32 %309, %193
  %311 = add i32 %310, %23
  %312 = sub i32 %311, %32
  %313 = add i32 %312, %36
  %314 = add i32 %313, %38
  %315 = sub i32 %314, %44
  %316 = sub i32 %315, %48
  %317 = sub i32 %316, %60
  %318 = sub i32 %317, %69
  %319 = sub i32 %318, %71
  %320 = sub i32 %319, %76
  %321 = sub i32 %320, %83
  %322 = add i32 %321, %88
  %323 = sub i32 %322, %93
  %324 = add i32 %323, %106
  %325 = sub i32 %324, %114
  %326 = add i32 %325, %123
  %327 = sub i32 %326, %128
  %328 = sub i32 %327, %135
  %329 = sub i32 %328, %139
  %330 = sub i32 %329, %151
  %331 = add i32 %330, %169
  %332 = add i32 %331, %175
  %333 = add i32 %332, %190
  %334 = sub i32 %333, %192
  %335 = add i32 %334, %196
  %336 = add i32 %335, %198
  %337 = sub i32 %336, %199
  %338 = add i32 %337, %215
  %339 = add i32 %338, %213
  %340 = add i32 %339, %210
  %341 = icmp eq i32 %340, %13
  %342 = select i1 %341, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %343 = tail call i32 @puts(i8* nonnull dereferenceable(1) %342)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
