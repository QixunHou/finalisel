; ModuleID = '../.././c_source_file/0272_path_condition_crackme.c'
source_filename = "../.././c_source_file/0272_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = and i32 %7, %1
  %13 = xor i32 %12, -1
  %14 = xor i32 %13, %0
  %15 = add i32 %11, %14
  %16 = xor i32 %5, %3
  %17 = xor i32 %16, %4
  %18 = add i32 %15, %17
  %19 = and i32 %2, %0
  %20 = or i32 %1, %0
  %21 = xor i32 %19, %20
  %22 = xor i32 %1, -1
  %23 = and i32 %22, %0
  %24 = or i32 %12, %23
  %25 = xor i32 %2, %0
  %26 = or i32 %25, %23
  %27 = xor i32 %0, -1
  %28 = and i32 %22, %2
  %29 = and i32 %28, %27
  %30 = xor i32 %2, %1
  %31 = or i32 %30, %27
  %32 = xor i32 %29, %31
  %33 = and i32 %1, %0
  %34 = or i32 %7, %1
  %35 = xor i32 %34, %33
  %36 = or i32 %22, %0
  %37 = and i32 %36, %2
  %38 = shl i32 %37, 1
  %39 = xor i32 %23, -1
  %40 = xor i32 %25, -1
  %41 = and i32 %40, %39
  %42 = xor i32 %19, %1
  %43 = and i32 %25, %22
  %44 = or i32 %33, %40
  %45 = xor i32 %8, %1
  %46 = xor i32 %34, -1
  %47 = or i32 %46, %0
  %48 = and i32 %7, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %20, -1
  %51 = and i32 %2, %1
  %52 = or i32 %51, %23
  %53 = shl i32 %52, 1
  %54 = or i32 %13, %27
  %55 = or i32 %51, %0
  %56 = and i32 %49, %22
  %57 = shl i32 %56, 1
  %58 = or i32 %48, %22
  %59 = or i32 %25, %33
  %60 = shl i32 %59, 1
  %61 = and i32 %51, %0
  %62 = or i32 %2, %1
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %0
  %65 = xor i32 %61, %64
  %66 = and i32 %30, %36
  %67 = or i32 %23, %7
  %68 = xor i32 %51, -1
  %69 = xor i32 %23, %68
  %70 = and i32 %51, %27
  %71 = and i32 %30, %0
  %72 = xor i32 %70, -1
  %73 = xor i32 %71, %72
  %74 = and i32 %30, %27
  %75 = and i32 %25, %36
  %76 = or i32 %22, %2
  %77 = and i32 %76, %0
  %78 = xor i32 %77, 2147483647
  %79 = xor i32 %78, %29
  %80 = shl i32 %79, 1
  %81 = or i32 %19, %1
  %82 = shl i32 %81, 1
  %83 = xor i32 %50, %2
  %84 = or i32 %48, %51
  %85 = and i32 %25, %1
  %86 = or i32 %2, %0
  %87 = xor i32 %86, %33
  %88 = xor i32 %33, -1
  %89 = and i32 %88, %2
  %90 = xor i32 %8, %33
  %91 = shl i32 %90, 1
  %92 = xor i32 %30, -1
  %93 = and i32 %92, %0
  %94 = and i32 %8, %22
  %95 = or i32 %68, %0
  %96 = xor i32 %8, -1
  %97 = and i32 %30, %20
  %98 = shl i32 %97, 1
  %99 = xor i32 %62, %0
  %100 = or i32 %61, %99
  %101 = xor i32 %51, %0
  %102 = xor i32 %30, %0
  %103 = and i32 %40, %88
  %104 = xor i32 %33, %2
  %105 = xor i32 %19, %13
  %106 = and i32 %9, %7
  %107 = xor i32 %61, %102
  %108 = xor i32 %23, %13
  %109 = shl i32 %108, 2
  %110 = xor i32 %46, %0
  %111 = and i32 %9, %49
  %112 = xor i32 %36, %2
  %113 = shl i32 %112, 1
  %114 = add i32 %12, 1
  %115 = or i32 %62, %27
  %116 = and i32 %40, %1
  %117 = xor i32 %48, %34
  %118 = xor i32 %88, %2
  %119 = or i32 %12, %27
  %120 = xor i32 %19, %36
  %121 = xor i32 %19, -1
  %122 = and i32 %121, %1
  %123 = or i32 %9, %40
  %124 = or i32 %19, %22
  %125 = xor i32 %86, -1
  %126 = shl i32 %125, 1
  %127 = or i32 %23, %40
  %128 = or i32 %40, %10
  %129 = or i32 %13, %0
  %130 = and i32 %8, %1
  %131 = and i32 %40, %22
  %132 = and i32 %62, %0
  %133 = xor i32 %132, %72
  %134 = and i32 %20, %2
  %135 = shl i32 %68, 1
  %136 = or i32 %92, %50
  %137 = xor i32 %31, -1
  %138 = or i32 %29, %137
  %139 = or i32 %25, %50
  %140 = or i32 %62, %0
  %141 = xor i32 %62, %33
  %142 = or i32 %19, %50
  %143 = and i32 %20, %40
  %144 = and i32 %30, %88
  %145 = shl i32 %144, 1
  %146 = and i32 %86, %9
  %147 = xor i32 %36, -1
  %148 = or i32 %25, %147
  %149 = and i32 %10, %2
  %150 = xor i32 %23, %2
  %151 = or i32 %33, %63
  %152 = and i32 %121, %22
  %153 = or i32 %7, %50
  %154 = and i32 %28, %0
  %155 = or i32 %30, %0
  %156 = xor i32 %155, -1
  %157 = or i32 %154, %156
  %158 = xor i32 %39, %2
  %159 = or i32 %33, %2
  %160 = xor i32 %86, %1
  %161 = or i32 %48, %10
  %162 = and i32 %25, %20
  %163 = and i32 %39, %2
  %164 = or i32 %63, %27
  %165 = and i32 %92, %39
  %166 = and i32 %86, %10
  %167 = xor i32 %63, %0
  %168 = xor i32 %154, %155
  %169 = xor i32 %19, %62
  %170 = and i32 %13, %27
  %171 = and i32 %7, %88
  %172 = shl i32 %171, 1
  %173 = or i32 %125, %1
  %174 = xor i32 %102, -1
  %175 = xor i32 %154, %174
  %176 = or i32 %51, %27
  %177 = or i32 %19, %12
  %178 = xor i32 %68, %0
  %179 = or i32 %30, %33
  %180 = and i32 %49, %1
  %181 = shl i32 %180, 1
  %182 = or i32 %23, %2
  %183 = and i32 %49, %10
  %184 = or i32 %96, %10
  %185 = or i32 %25, %1
  %186 = or i32 %70, %132
  %187 = and i32 %121, %10
  %188 = or i32 %48, %1
  %189 = and i32 %40, %10
  %190 = or i32 %19, %10
  %191 = or i32 %34, %27
  %192 = and i32 %68, %27
  %193 = or i32 %10, %2
  %194 = and i32 %92, %27
  %195 = or i32 %33, %125
  %196 = shl i32 %195, 1
  %197 = and i32 %25, %88
  %198 = and i32 %25, %9
  %199 = and i32 %7, %39
  %200 = and i32 %8, %9
  %201 = and i32 %34, %0
  %202 = shl i32 %201, 1
  %203 = xor i32 %76, %0
  %204 = or i32 %154, %203
  %205 = or i32 %19, %147
  %206 = and i32 %34, %27
  %207 = or i32 %92, %27
  %208 = or i32 %70, %71
  %209 = and i32 %92, %88
  %210 = and i32 %36, %92
  %211 = and i32 %12, %27
  %212 = mul i32 %211, -20
  %213 = and i32 %63, %0
  %214 = and i32 %12, %0
  %215 = shl i32 %214, 3
  %216 = and i32 %46, %27
  %217 = shl i32 %216, 1
  %218 = and i32 %46, %0
  %219 = mul i32 %61, 12
  %220 = or i32 %5, %3
  %221 = xor i32 %220, -1
  %222 = xor i32 %221, %4
  %223 = xor i32 %5, -1
  %224 = or i32 %223, %4
  %225 = xor i32 %224, -1
  %226 = xor i32 %4, %3
  %227 = xor i32 %226, -1
  %228 = or i32 %225, %227
  %229 = xor i32 %4, -1
  %230 = and i32 %223, %3
  %231 = xor i32 %230, -1
  %232 = and i32 %231, %229
  %233 = xor i32 %5, %4
  %234 = xor i32 %233, -1
  %235 = or i32 %221, %229
  %236 = or i32 %223, %3
  %237 = and i32 %236, %229
  %238 = or i32 %233, %3
  %239 = xor i32 %231, %4
  %240 = shl i32 %239, 2
  %241 = xor i32 %3, -1
  %242 = and i32 %241, %4
  %243 = xor i32 %16, -1
  %244 = or i32 %242, %243
  %245 = or i32 %4, %3
  %246 = xor i32 %245, -1
  %247 = or i32 %243, %246
  %248 = or i32 %234, %3
  %249 = or i32 %231, %229
  %250 = and i32 %5, %4
  %251 = xor i32 %250, -1
  %252 = xor i32 %251, %3
  %253 = xor i32 %245, %5
  %254 = and i32 %233, %226
  %255 = or i32 %241, %4
  %256 = xor i32 %255, -1
  %257 = or i32 %233, %256
  %258 = or i32 %5, %4
  %259 = and i32 %258, %241
  %260 = and i32 %231, %4
  %261 = xor i32 %242, -1
  %262 = and i32 %243, %261
  %263 = and i32 %223, %4
  %264 = xor i32 %263, -1
  %265 = and i32 %264, %241
  %266 = and i32 %243, %4
  %267 = or i32 %220, %229
  %268 = and i32 %4, %3
  %269 = xor i32 %268, -1
  %270 = and i32 %269, %5
  %271 = or i32 %250, %241
  %272 = and i32 %220, %4
  %273 = and i32 %243, %229
  %274 = and i32 %245, %223
  %275 = shl i32 %274, 1
  %276 = and i32 %241, %5
  %277 = and i32 %276, %4
  %278 = xor i32 %277, 2147483647
  %279 = xor i32 %278, %17
  %280 = and i32 %5, %3
  %281 = xor i32 %280, -1
  %282 = xor i32 %281, %4
  %283 = or i32 %250, %226
  %284 = and i32 %243, %269
  %285 = and i32 %280, %4
  %286 = xor i32 %285, %17
  %287 = xor i32 %220, %4
  %288 = or i32 %285, %287
  %289 = xor i32 %250, %255
  %290 = shl i32 %289, 1
  %291 = or i32 %250, %256
  %292 = or i32 %242, %5
  %293 = and i32 %233, %261
  %294 = shl i32 %293, 1
  %295 = xor i32 %258, %268
  %296 = or i32 %236, %4
  %297 = or i32 %281, %229
  %298 = xor i32 %287, -1
  %299 = xor i32 %285, %298
  %300 = and i32 %264, %3
  %301 = add i32 %263, 1
  %302 = or i32 %16, %242
  %303 = xor i32 %256, %5
  %304 = and i32 %224, %227
  %305 = xor i32 %236, -1
  %306 = or i32 %268, %305
  %307 = shl i32 %306, 1
  %308 = add i32 %255, 1
  %309 = or i32 %233, %227
  %310 = xor i32 %250, %231
  %311 = xor i32 %269, %5
  %312 = shl i32 %311, 1
  %313 = or i32 %243, %229
  %314 = and i32 %16, %229
  %315 = or i32 %285, %314
  %316 = or i32 %250, %3
  %317 = xor i32 %224, %268
  %318 = xor i32 %243, %4
  %319 = xor i32 %258, %3
  %320 = shl i32 %319, 2
  %321 = xor i32 %261, %5
  %322 = and i32 %281, %229
  %323 = or i32 %305, %229
  %324 = or i32 %250, %246
  %325 = xor i32 %258, -1
  %326 = xor i32 %325, %3
  %327 = or i32 %16, %229
  %328 = and i32 %280, %229
  %329 = and i32 %16, %4
  %330 = or i32 %328, %329
  %331 = or i32 %243, %4
  %332 = and i32 %255, %243
  %333 = or i32 %242, %234
  %334 = and i32 %224, %241
  %335 = xor i32 %242, %5
  %336 = and i32 %223, %261
  %337 = and i32 %276, %229
  %338 = xor i32 %327, 2147483647
  %339 = or i32 %338, %337
  %340 = shl i32 %339, 1
  %341 = and i32 %234, %241
  %342 = or i32 %223, %246
  %343 = or i32 %226, %223
  %344 = xor i32 %230, %4
  %345 = and i32 %258, %227
  %346 = and i32 %233, %3
  %347 = xor i32 %329, -1
  %348 = xor i32 %328, %347
  %349 = xor i32 %280, %4
  %350 = or i32 %241, %5
  %351 = xor i32 %350, %4
  %352 = xor i32 %351, -1
  %353 = xor i32 %277, %352
  %354 = and i32 %251, %3
  %355 = or i32 %233, %242
  %356 = or i32 %263, %227
  %357 = or i32 %325, %3
  %358 = and i32 %233, %241
  %359 = and i32 %281, %4
  %360 = or i32 %233, %268
  %361 = and i32 %220, %229
  %362 = or i32 %285, %361
  %363 = shl i32 %362, 2
  %364 = or i32 %250, %227
  %365 = and i32 %226, %264
  %366 = and i32 %245, %234
  %367 = xor i32 %225, %3
  %368 = xor i32 %224, %3
  %369 = and i32 %234, %227
  %370 = and i32 %255, %223
  %371 = shl i32 %370, 1
  %372 = or i32 %16, %4
  %373 = add i32 %226, 1
  %374 = xor i32 %250, %220
  %375 = xor i32 %255, %5
  %376 = or i32 %268, %5
  %377 = or i32 %280, %4
  %378 = xor i32 %314, 2147483647
  %379 = xor i32 %378, %285
  %380 = and i32 %258, %3
  %381 = or i32 %242, %223
  %382 = and i32 %226, %251
  %383 = xor i32 %305, %4
  %384 = and i32 %255, %5
  %385 = shl i32 %384, 1
  %386 = shl i32 %314, 1
  %387 = xor i32 %242, %281
  %388 = or i32 %305, %4
  %389 = and i32 %16, %261
  %390 = and i32 %226, %223
  %391 = or i32 %230, %242
  %392 = or i32 %268, %234
  %393 = shl i32 %392, 1
  %394 = and i32 %226, %234
  %395 = or i32 %277, %351
  %396 = and i32 %233, %269
  %397 = and i32 %245, %243
  %398 = or i32 %226, %225
  %399 = or i32 %230, %4
  %400 = or i32 %250, %230
  %401 = and i32 %236, %4
  %402 = shl i32 %401, 1
  %403 = or i32 %268, %223
  %404 = xor i32 %242, %231
  %405 = or i32 %328, %272
  %406 = and i32 %245, %5
  %407 = xor i32 %220, %268
  %408 = xor i32 %372, -1
  %409 = or i32 %277, %408
  %410 = and i32 %233, %255
  %411 = and i32 %255, %234
  %412 = shl i32 %411, 1
  %413 = and i32 %224, %226
  %414 = and i32 %261, %5
  %415 = and i32 %227, %5
  %416 = xor i32 %250, %245
  %417 = and i32 %234, %269
  %418 = add i32 %245, 1
  %419 = xor i32 %246, %5
  %420 = shl i32 %241, 1
  %421 = or i32 %16, %268
  %422 = and i32 %16, %255
  %423 = or i32 %230, %229
  %424 = shl i32 %423, 1
  %425 = and i32 %350, %229
  %426 = or i32 %277, %425
  %427 = shl i32 %426, 1
  %428 = or i32 %227, %5
  %429 = or i32 %256, %5
  %430 = xor i32 %278, %425
  %431 = or i32 %226, %5
  %432 = xor i32 %250, %3
  %433 = or i32 %280, %229
  %434 = or i32 %231, %4
  %435 = or i32 %268, %221
  %436 = or i32 %16, %256
  %437 = shl i32 %436, 1
  %438 = or i32 %325, %227
  %439 = shl i32 %269, 1
  %440 = and i32 %221, %229
  %441 = shl i32 %440, 2
  %442 = and i32 %230, %229
  %443 = mul i32 %442, -17
  %444 = and i32 %221, %4
  %445 = and i32 %230, %4
  %446 = and i32 %305, %229
  %447 = shl i32 %446, 2
  %448 = and i32 %305, %4
  %449 = mul i32 %285, -19
  %450 = sub i32 %165, %62
  %451 = add i32 %450, %122
  %452 = add i32 %451, %119
  %453 = sub i32 %452, %265
  %454 = add i32 %453, %348
  %455 = mul i32 %454, 5
  %456 = sub i32 %107, %410
  %457 = sub i32 %456, %368
  %458 = add i32 %457, %228
  %459 = add i32 %458, %288
  %460 = mul i32 %459, 3
  %461 = add i32 %448, %445
  %462 = add i32 %461, %444
  %463 = mul i32 %462, -15
  %464 = add i32 %127, %218
  %465 = add i32 %464, %438
  %466 = shl i32 %465, 2
  %467 = add i32 %328, %70
  %468 = mul i32 %467, -9
  %469 = add i32 %1, -1
  %470 = add i32 %469, %199
  %471 = add i32 %470, %104
  %472 = add i32 %471, %209
  %473 = add i32 %472, %207
  %474 = add i32 %473, %205
  %475 = add i32 %474, %187
  %476 = add i32 %475, %178
  %477 = add i32 %476, %177
  %478 = add i32 %477, %176
  %479 = add i32 %478, %169
  %480 = add i32 %479, %162
  %481 = add i32 %480, %139
  %482 = add i32 %481, %123
  %483 = add i32 %482, %99
  %484 = add i32 %483, %101
  %485 = add i32 %484, %24
  %486 = add i32 %485, %5
  %487 = add i32 %486, %419
  %488 = add i32 %487, %220
  %489 = add i32 %488, %233
  %490 = add i32 %489, %343
  %491 = add i32 %490, %434
  %492 = add i32 %491, %388
  %493 = add i32 %492, %387
  %494 = add i32 %493, %377
  %495 = add i32 %494, %356
  %496 = add i32 %495, %346
  %497 = add i32 %496, %302
  %498 = add i32 %497, %272
  %499 = add i32 %498, %267
  %500 = add i32 %499, %252
  %501 = add i32 %500, %286
  %502 = add i32 %501, %379
  %503 = add i32 %502, %430
  %504 = add i32 %503, %279
  %505 = shl i32 %504, 1
  %506 = shl i32 %0, 1
  %507 = add i32 %506, %20
  %508 = add i32 %507, 3
  %509 = sub i32 %508, %36
  %510 = sub i32 %509, %33
  %511 = add i32 %510, %49
  %512 = sub i32 %511, %67
  %513 = add i32 %512, %40
  %514 = sub i32 %513, %19
  %515 = sub i32 %514, %83
  %516 = add i32 %515, %46
  %517 = sub i32 %516, %89
  %518 = sub i32 %517, %51
  %519 = add i32 %518, %96
  %520 = add i32 %519, %30
  %521 = add i32 %520, %106
  %522 = add i32 %521, %114
  %523 = sub i32 %522, %118
  %524 = add i32 %523, %121
  %525 = sub i32 %524, %34
  %526 = add i32 %525, %134
  %527 = add i32 %526, %149
  %528 = sub i32 %527, %150
  %529 = sub i32 %528, %8
  %530 = sub i32 %529, %153
  %531 = add i32 %530, %158
  %532 = sub i32 %531, %159
  %533 = sub i32 %532, %163
  %534 = sub i32 %533, %182
  %535 = add i32 %534, %12
  %536 = add i32 %535, %193
  %537 = add i32 %536, %21
  %538 = sub i32 %537, %26
  %539 = sub i32 %538, %35
  %540 = sub i32 %539, %38
  %541 = add i32 %540, %41
  %542 = add i32 %541, %42
  %543 = add i32 %542, %43
  %544 = sub i32 %543, %44
  %545 = sub i32 %544, %45
  %546 = sub i32 %545, %47
  %547 = sub i32 %546, %54
  %548 = add i32 %547, %55
  %549 = add i32 %548, %58
  %550 = add i32 %549, %66
  %551 = add i32 %550, %69
  %552 = add i32 %551, %74
  %553 = add i32 %552, %75
  %554 = sub i32 %553, %84
  %555 = sub i32 %554, %85
  %556 = sub i32 %555, %87
  %557 = sub i32 %556, %93
  %558 = sub i32 %557, %94
  %559 = sub i32 %558, %95
  %560 = add i32 %559, %102
  %561 = sub i32 %560, %103
  %562 = sub i32 %561, %105
  %563 = sub i32 %562, %110
  %564 = add i32 %563, %111
  %565 = sub i32 %564, %113
  %566 = add i32 %565, %115
  %567 = sub i32 %566, %116
  %568 = sub i32 %567, %117
  %569 = sub i32 %568, %120
  %570 = add i32 %569, %124
  %571 = sub i32 %570, %126
  %572 = add i32 %571, %128
  %573 = sub i32 %572, %129
  %574 = add i32 %573, %130
  %575 = add i32 %574, %131
  %576 = sub i32 %575, %135
  %577 = sub i32 %576, %136
  %578 = add i32 %577, %140
  %579 = add i32 %578, %141
  %580 = add i32 %579, %142
  %581 = sub i32 %580, %64
  %582 = sub i32 %581, %143
  %583 = sub i32 %582, %146
  %584 = sub i32 %583, %148
  %585 = add i32 %584, %151
  %586 = add i32 %585, %152
  %587 = add i32 %586, %160
  %588 = sub i32 %587, %31
  %589 = sub i32 %588, %161
  %590 = add i32 %589, %164
  %591 = sub i32 %590, %166
  %592 = add i32 %591, %167
  %593 = add i32 %592, %170
  %594 = sub i32 %593, %172
  %595 = add i32 %594, %173
  %596 = add i32 %595, %179
  %597 = add i32 %596, %132
  %598 = sub i32 %597, %183
  %599 = sub i32 %598, %184
  %600 = add i32 %599, %185
  %601 = add i32 %600, %188
  %602 = sub i32 %601, %189
  %603 = add i32 %602, %190
  %604 = add i32 %603, %191
  %605 = sub i32 %604, %192
  %606 = add i32 %605, %194
  %607 = add i32 %606, %197
  %608 = add i32 %607, %198
  %609 = add i32 %608, %200
  %610 = sub i32 %609, %206
  %611 = sub i32 %610, %210
  %612 = add i32 %611, %213
  %613 = sub i32 %612, %420
  %614 = sub i32 %613, %32
  %615 = sub i32 %614, %53
  %616 = sub i32 %615, %57
  %617 = sub i32 %616, %60
  %618 = add i32 %617, %65
  %619 = add i32 %618, %73
  %620 = sub i32 %619, %82
  %621 = sub i32 %620, %91
  %622 = sub i32 %621, %98
  %623 = sub i32 %622, %100
  %624 = sub i32 %623, %109
  %625 = sub i32 %624, %133
  %626 = sub i32 %625, %138
  %627 = sub i32 %626, %145
  %628 = add i32 %627, %157
  %629 = sub i32 %628, %168
  %630 = add i32 %629, %175
  %631 = sub i32 %630, %181
  %632 = sub i32 %631, %186
  %633 = sub i32 %632, %196
  %634 = sub i32 %633, %202
  %635 = sub i32 %634, %204
  %636 = sub i32 %635, %208
  %637 = add i32 %636, %212
  %638 = sub i32 %637, %215
  %639 = sub i32 %638, %217
  %640 = add i32 %639, %219
  %641 = add i32 %640, %308
  %642 = sub i32 %641, %242
  %643 = add i32 %642, %255
  %644 = add i32 %643, %245
  %645 = add i32 %644, %373
  %646 = sub i32 %645, %268
  %647 = add i32 %646, %226
  %648 = add i32 %647, %418
  %649 = add i32 %648, %221
  %650 = add i32 %649, %234
  %651 = sub i32 %650, %236
  %652 = add i32 %651, %253
  %653 = add i32 %652, %270
  %654 = add i32 %653, %251
  %655 = add i32 %654, %292
  %656 = add i32 %655, %301
  %657 = sub i32 %656, %303
  %658 = sub i32 %657, %321
  %659 = sub i32 %658, %335
  %660 = sub i32 %659, %336
  %661 = add i32 %660, %342
  %662 = add i32 %661, %263
  %663 = add i32 %662, %305
  %664 = sub i32 %663, %375
  %665 = sub i32 %664, %376
  %666 = add i32 %665, %381
  %667 = sub i32 %666, %390
  %668 = add i32 %667, %403
  %669 = sub i32 %668, %406
  %670 = add i32 %669, %224
  %671 = add i32 %670, %414
  %672 = add i32 %671, %415
  %673 = add i32 %672, %428
  %674 = add i32 %673, %429
  %675 = add i32 %674, %431
  %676 = sub i32 %675, %439
  %677 = sub i32 %676, %80
  %678 = sub i32 %677, %222
  %679 = sub i32 %678, %232
  %680 = add i32 %679, %235
  %681 = sub i32 %680, %237
  %682 = sub i32 %681, %238
  %683 = sub i32 %682, %244
  %684 = sub i32 %683, %247
  %685 = add i32 %684, %248
  %686 = add i32 %685, %249
  %687 = add i32 %686, %254
  %688 = add i32 %687, %257
  %689 = sub i32 %688, %259
  %690 = add i32 %689, %260
  %691 = sub i32 %690, %262
  %692 = sub i32 %691, %266
  %693 = add i32 %692, %271
  %694 = sub i32 %693, %273
  %695 = sub i32 %694, %275
  %696 = sub i32 %695, %282
  %697 = add i32 %696, %283
  %698 = sub i32 %697, %284
  %699 = add i32 %698, %291
  %700 = sub i32 %699, %295
  %701 = sub i32 %700, %296
  %702 = sub i32 %701, %297
  %703 = sub i32 %702, %300
  %704 = add i32 %703, %304
  %705 = sub i32 %704, %309
  %706 = add i32 %705, %310
  %707 = sub i32 %706, %312
  %708 = sub i32 %707, %313
  %709 = add i32 %708, %287
  %710 = add i32 %709, %316
  %711 = add i32 %710, %317
  %712 = sub i32 %711, %318
  %713 = add i32 %712, %322
  %714 = add i32 %713, %323
  %715 = add i32 %714, %324
  %716 = sub i32 %715, %326
  %717 = add i32 %716, %327
  %718 = add i32 %717, %331
  %719 = sub i32 %718, %332
  %720 = add i32 %719, %333
  %721 = add i32 %720, %334
  %722 = add i32 %721, %341
  %723 = sub i32 %722, %344
  %724 = sub i32 %723, %345
  %725 = sub i32 %724, %349
  %726 = sub i32 %725, %354
  %727 = add i32 %726, %355
  %728 = add i32 %727, %357
  %729 = sub i32 %728, %358
  %730 = sub i32 %729, %359
  %731 = add i32 %730, %360
  %732 = add i32 %731, %364
  %733 = sub i32 %732, %365
  %734 = add i32 %733, %366
  %735 = sub i32 %734, %367
  %736 = add i32 %735, %369
  %737 = sub i32 %736, %371
  %738 = sub i32 %737, %372
  %739 = sub i32 %738, %374
  %740 = sub i32 %739, %380
  %741 = add i32 %740, %382
  %742 = add i32 %741, %383
  %743 = sub i32 %742, %385
  %744 = sub i32 %743, %361
  %745 = sub i32 %744, %389
  %746 = add i32 %745, %391
  %747 = add i32 %746, %394
  %748 = add i32 %747, %396
  %749 = sub i32 %748, %397
  %750 = add i32 %749, %398
  %751 = add i32 %750, %399
  %752 = sub i32 %751, %400
  %753 = sub i32 %752, %404
  %754 = add i32 %753, %407
  %755 = add i32 %754, %413
  %756 = add i32 %755, %416
  %757 = add i32 %756, %417
  %758 = add i32 %757, %421
  %759 = add i32 %758, %422
  %760 = add i32 %759, %432
  %761 = add i32 %760, %433
  %762 = sub i32 %761, %435
  %763 = sub i32 %762, %240
  %764 = sub i32 %763, %290
  %765 = sub i32 %764, %294
  %766 = sub i32 %765, %299
  %767 = sub i32 %766, %307
  %768 = sub i32 %767, %315
  %769 = sub i32 %768, %320
  %770 = sub i32 %769, %330
  %771 = sub i32 %770, %353
  %772 = sub i32 %771, %386
  %773 = sub i32 %772, %393
  %774 = add i32 %773, %395
  %775 = sub i32 %774, %402
  %776 = add i32 %775, %405
  %777 = sub i32 %776, %409
  %778 = sub i32 %777, %412
  %779 = sub i32 %778, %424
  %780 = sub i32 %779, %437
  %781 = sub i32 %780, %441
  %782 = add i32 %781, %443
  %783 = sub i32 %782, %447
  %784 = add i32 %783, %449
  %785 = sub i32 %784, %363
  %786 = sub i32 %785, %427
  %787 = add i32 %786, %468
  %788 = sub i32 %787, %340
  %789 = add i32 %788, %463
  %790 = add i32 %789, %466
  %791 = add i32 %790, %460
  %792 = add i32 %791, %455
  %793 = add i32 %792, %505
  %794 = icmp eq i32 %18, %793
  %795 = select i1 %794, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %796 = tail call i32 @puts(i8* nonnull dereferenceable(1) %795)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
