; ModuleID = '../.././c_source_file/0388_path_condition_crackme.c'
source_filename = "../.././c_source_file/0388_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, %1
  %10 = mul i32 %9, -4
  %11 = and i32 %1, %0
  %12 = or i32 %2, %1
  %13 = xor i32 %12, %11
  %14 = shl i32 %13, 1
  %15 = sub i32 %10, %14
  %16 = xor i32 %5, -1
  %17 = or i32 %16, %4
  %18 = and i32 %17, %3
  %19 = add i32 %15, %18
  %20 = xor i32 %8, -1
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = or i32 %20, %22
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %0
  %26 = xor i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %25, %27
  %29 = xor i32 %11, -1
  %30 = xor i32 %29, %2
  %31 = xor i32 %0, -1
  %32 = and i32 %7, %1
  %33 = or i32 %32, %31
  %34 = xor i32 %25, -1
  %35 = and i32 %7, %34
  %36 = shl i32 %35, 1
  %37 = and i32 %8, %21
  %38 = and i32 %27, %22
  %39 = shl i32 %38, 1
  %40 = or i32 %2, %0
  %41 = and i32 %40, %21
  %42 = xor i32 %40, -1
  %43 = or i32 %11, %42
  %44 = xor i32 %12, -1
  %45 = add i32 %12, 1
  %46 = and i32 %2, %0
  %47 = xor i32 %32, -1
  %48 = xor i32 %46, %47
  %49 = xor i32 %46, -1
  %50 = add i32 %46, 1
  %51 = or i32 %27, %22
  %52 = and i32 %7, %0
  %53 = xor i32 %52, %1
  %54 = or i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %7, %55
  %57 = and i32 %8, %1
  %58 = or i32 %7, %1
  %59 = xor i32 %58, -1
  %60 = or i32 %21, %27
  %61 = and i32 %7, %22
  %62 = and i32 %2, %1
  %63 = xor i32 %62, -1
  %64 = add i32 %62, 1
  %65 = and i32 %26, %22
  %66 = xor i32 %2, %1
  %67 = or i32 %66, %11
  %68 = xor i32 %66, -1
  %69 = or i32 %62, %0
  %70 = or i32 %46, %24
  %71 = xor i32 %52, -1
  %72 = xor i32 %71, %1
  %73 = shl i32 %72, 1
  %74 = and i32 %40, %1
  %75 = xor i32 %52, %63
  %76 = or i32 %52, %24
  %77 = xor i32 %40, %1
  %78 = and i32 %62, %31
  %79 = and i32 %66, %0
  %80 = or i32 %78, %79
  %81 = or i32 %59, %31
  %82 = shl i32 %81, 1
  %83 = and i32 %62, %0
  %84 = and i32 %66, %31
  %85 = or i32 %83, %84
  %86 = and i32 %24, %2
  %87 = and i32 %86, %0
  %88 = or i32 %24, %2
  %89 = and i32 %88, %31
  %90 = or i32 %87, %89
  %91 = xor i32 %12, %0
  %92 = or i32 %83, %91
  %93 = and i32 %26, %34
  %94 = or i32 %24, %0
  %95 = xor i32 %94, -1
  %96 = xor i32 %95, %2
  %97 = xor i32 %25, %2
  %98 = and i32 %71, %1
  %99 = or i32 %32, %25
  %100 = and i32 %68, %31
  %101 = shl i32 %100, 1
  %102 = or i32 %25, %2
  %103 = xor i32 %78, -1
  %104 = xor i32 %79, %103
  %105 = xor i32 %52, %58
  %106 = or i32 %46, %55
  %107 = and i32 %63, %31
  %108 = xor i32 %66, %0
  %109 = xor i32 %108, -1
  %110 = or i32 %83, %109
  %111 = or i32 %11, %27
  %112 = shl i32 %25, 1
  %113 = xor i32 %83, %108
  %114 = shl i32 %113, 1
  %115 = xor i32 %84, 2147483647
  %116 = xor i32 %115, %83
  %117 = shl i32 %116, 1
  %118 = add i32 %54, 1
  %119 = or i32 %68, %95
  %120 = xor i32 %46, %54
  %121 = or i32 %87, %108
  %122 = and i32 %21, %49
  %123 = and i32 %26, %24
  %124 = or i32 %11, %44
  %125 = and i32 %26, %94
  %126 = and i32 %49, %24
  %127 = or i32 %52, %59
  %128 = or i32 %42, %22
  %129 = shl i32 %128, 1
  %130 = xor i32 %32, %0
  %131 = and i32 %86, %31
  %132 = and i32 %88, %0
  %133 = xor i32 %132, -1
  %134 = xor i32 %131, %133
  %135 = xor i32 %25, %47
  %136 = or i32 %59, %0
  %137 = and i32 %68, %0
  %138 = or i32 %21, %2
  %139 = or i32 %27, %95
  %140 = add i32 %25, 1
  %141 = and i32 %8, %22
  %142 = and i32 %12, %31
  %143 = or i32 %20, %1
  %144 = and i32 %66, %29
  %145 = and i32 %71, %22
  %146 = or i32 %26, %25
  %147 = shl i32 %146, 2
  %148 = xor i32 %88, %0
  %149 = xor i32 %87, -1
  %150 = xor i32 %148, %149
  %151 = or i32 %7, %22
  %152 = xor i32 %44, %0
  %153 = shl i32 %152, 1
  %154 = and i32 %94, %2
  %155 = xor i32 %87, %109
  %156 = xor i32 %8, %11
  %157 = or i32 %21, %42
  %158 = and i32 %22, %2
  %159 = or i32 %11, %59
  %160 = shl i32 %159, 1
  %161 = and i32 %68, %34
  %162 = and i32 %54, %68
  %163 = and i32 %71, %24
  %164 = xor i32 %142, -1
  %165 = xor i32 %83, %164
  %166 = or i32 %66, %0
  %167 = xor i32 %87, %166
  %168 = or i32 %46, %21
  %169 = and i32 %47, %31
  %170 = shl i32 %169, 1
  %171 = and i32 %8, %24
  %172 = shl i32 %171, 1
  %173 = or i32 %66, %55
  %174 = and i32 %40, %24
  %175 = xor i32 %11, %2
  %176 = or i32 %27, %24
  %177 = or i32 %66, %31
  %178 = xor i32 %177, -1
  %179 = or i32 %131, %178
  %180 = and i32 %63, %0
  %181 = or i32 %62, %25
  %182 = or i32 %95, %2
  %183 = or i32 %7, %95
  %184 = or i32 %26, %95
  %185 = and i32 %94, %7
  %186 = or i32 %11, %68
  %187 = or i32 %27, %1
  %188 = xor i32 %49, %1
  %189 = or i32 %46, %32
  %190 = and i32 %94, %27
  %191 = and i32 %68, %29
  %192 = and i32 %26, %21
  %193 = shl i32 %192, 1
  %194 = or i32 %26, %21
  %195 = or i32 %66, %95
  %196 = xor i32 %63, %0
  %197 = or i32 %58, %0
  %198 = shl i32 %197, 1
  %199 = or i32 %46, %95
  %200 = and i32 %26, %29
  %201 = xor i32 %42, %1
  %202 = or i32 %63, %31
  %203 = shl i32 %47, 1
  %204 = xor i32 %55, %2
  %205 = xor i32 %68, %0
  %206 = or i32 %27, %55
  %207 = or i32 %131, %132
  %208 = xor i32 %40, %11
  %209 = or i32 %68, %55
  %210 = or i32 %47, %0
  %211 = and i32 %26, %1
  %212 = and i32 %27, %1
  %213 = and i32 %54, %27
  %214 = or i32 %26, %1
  %215 = xor i32 %94, %2
  %216 = and i32 %54, %7
  %217 = xor i32 %34, %2
  %218 = and i32 %27, %24
  %219 = or i32 %25, %68
  %220 = and i32 %66, %94
  %221 = xor i32 %58, %0
  %222 = or i32 %42, %1
  %223 = or i32 %26, %11
  %224 = and i32 %66, %34
  %225 = or i32 %12, %31
  %226 = shl i32 %225, 1
  %227 = and i32 %27, %29
  %228 = and i32 %21, %7
  %229 = or i32 %32, %0
  %230 = or i32 %83, %142
  %231 = or i32 %25, %7
  %232 = xor i32 %89, %149
  %233 = or i32 %21, %20
  %234 = shl i32 %233, 1
  %235 = and i32 %34, %2
  %236 = or i32 %22, %2
  %237 = xor i32 %58, %11
  %238 = or i32 %42, %24
  %239 = and i32 %94, %68
  %240 = or i32 %66, %25
  %241 = shl i32 %240, 2
  %242 = and i32 %49, %22
  %243 = and i32 %58, %31
  %244 = or i32 %20, %24
  %245 = or i32 %11, %7
  %246 = xor i32 %46, %94
  %247 = or i32 %26, %22
  %248 = or i32 %44, %31
  %249 = and i32 %40, %22
  %250 = and i32 %21, %71
  %251 = and i32 %54, %2
  %252 = shl i32 %29, 2
  %253 = or i32 %58, %31
  %254 = and i32 %26, %54
  %255 = and i32 %27, %34
  %256 = shl i32 %255, 1
  %257 = or i32 %52, %21
  %258 = and i32 %12, %0
  %259 = xor i32 %258, %103
  %260 = and i32 %7, %29
  %261 = or i32 %44, %0
  %262 = and i32 %66, %54
  %263 = shl i32 %262, 1
  %264 = or i32 %52, %22
  %265 = or i32 %26, %55
  %266 = and i32 %21, %27
  %267 = or i32 %46, %44
  %268 = xor i32 %59, %0
  %269 = and i32 %21, %2
  %270 = or i32 %87, %148
  %271 = shl i32 %270, 1
  %272 = or i32 %11, %20
  %273 = or i32 %55, %2
  %274 = or i32 %46, %1
  %275 = shl i32 %274, 1
  %276 = xor i32 %47, %0
  %277 = xor i32 %46, %12
  %278 = or i32 %26, %24
  %279 = or i32 %21, %7
  %280 = or i32 %46, %22
  %281 = add i32 %2, 1
  %282 = or i32 %52, %1
  %283 = or i32 %62, %31
  %284 = or i32 %47, %31
  %285 = xor i32 %166, -1
  %286 = or i32 %87, %285
  %287 = or i32 %12, %0
  %288 = and i32 %49, %1
  %289 = add i32 %8, 1
  %290 = xor i32 %62, %0
  %291 = xor i32 %20, %1
  %292 = or i32 %11, %2
  %293 = xor i32 %131, %177
  %294 = xor i32 %25, %63
  %295 = xor i32 %46, %1
  %296 = xor i32 %54, %2
  %297 = and i32 %44, %31
  %298 = mul i32 %297, 15
  %299 = and i32 %32, %31
  %300 = and i32 %44, %0
  %301 = mul i32 %300, 10
  %302 = and i32 %32, %0
  %303 = mul i32 %302, 29
  %304 = and i32 %59, %31
  %305 = mul i32 %304, 30
  %306 = mul i32 %78, 13
  %307 = and i32 %59, %0
  %308 = mul i32 %307, 11
  %309 = mul i32 %83, -17
  %310 = xor i32 %3, -1
  %311 = or i32 %5, %4
  %312 = xor i32 %311, -1
  %313 = or i32 %312, %3
  %314 = and i32 %5, %4
  %315 = shl i32 %314, 1
  %316 = and i32 %5, %3
  %317 = xor i32 %316, -1
  %318 = xor i32 %4, -1
  %319 = or i32 %5, %3
  %320 = and i32 %319, %318
  %321 = xor i32 %17, -1
  %322 = or i32 %321, %310
  %323 = or i32 %314, %3
  %324 = or i32 %4, %3
  %325 = and i32 %16, %3
  %326 = xor i32 %325, -1
  %327 = and i32 %326, %318
  %328 = and i32 %310, %4
  %329 = xor i32 %328, %326
  %330 = and i32 %17, %310
  %331 = xor i32 %311, %3
  %332 = xor i32 %314, %324
  %333 = xor i32 %4, %3
  %334 = xor i32 %333, -1
  %335 = or i32 %314, %334
  %336 = shl i32 %335, 1
  %337 = xor i32 %5, %4
  %338 = xor i32 %337, -1
  %339 = or i32 %338, %310
  %340 = or i32 %310, %4
  %341 = and i32 %337, %340
  %342 = and i32 %4, %3
  %343 = xor i32 %342, -1
  %344 = and i32 %343, %5
  %345 = or i32 %16, %3
  %346 = xor i32 %345, %4
  %347 = shl i32 %346, 1
  %348 = and i32 %316, %4
  %349 = or i32 %348, %320
  %350 = xor i32 %314, -1
  %351 = and i32 %350, %310
  %352 = and i32 %16, %334
  %353 = or i32 %321, %3
  %354 = shl i32 %353, 1
  %355 = and i32 %311, %333
  %356 = or i32 %345, %318
  %357 = or i32 %318, %5
  %358 = and i32 %357, %310
  %359 = or i32 %325, %4
  %360 = xor i32 %319, -1
  %361 = or i32 %360, %318
  %362 = and i32 %334, %5
  %363 = xor i32 %328, -1
  %364 = and i32 %16, %363
  %365 = and i32 %319, %4
  %366 = xor i32 %340, -1
  %367 = or i32 %16, %366
  %368 = xor i32 %310, %5
  %369 = and i32 %368, %324
  %370 = xor i32 %324, -1
  %371 = or i32 %338, %370
  %372 = and i32 %360, %318
  %373 = and i32 %360, %4
  %374 = and i32 %325, %4
  %375 = xor i32 %345, -1
  %376 = and i32 %375, %318
  %377 = mul i32 %376, -9
  %378 = and i32 %316, %318
  %379 = and i32 %375, %4
  %380 = add i32 %52, %0
  %381 = sub i32 %380, %290
  %382 = add i32 %381, %162
  %383 = sub i32 %382, %135
  %384 = add i32 %383, %106
  %385 = sub i32 %384, %378
  %386 = add i32 %385, %348
  %387 = add i32 %386, %374
  %388 = mul i32 %387, 3
  %389 = sub i32 %266, %278
  %390 = sub i32 %389, %254
  %391 = add i32 %390, %341
  %392 = sub i32 %391, %365
  %393 = mul i32 %392, 5
  %394 = add i32 %11, %95
  %395 = add i32 %394, %61
  %396 = add i32 %395, %359
  %397 = add i32 %396, %379
  %398 = shl i32 %397, 2
  %399 = add i32 %373, %299
  %400 = mul i32 %399, -14
  %401 = add i32 %58, -1
  %402 = add i32 %401, %295
  %403 = add i32 %402, %108
  %404 = add i32 %403, %261
  %405 = add i32 %404, %248
  %406 = add i32 %405, %227
  %407 = add i32 %406, %219
  %408 = add i32 %407, %211
  %409 = add i32 %408, %199
  %410 = add i32 %409, %196
  %411 = add i32 %410, %163
  %412 = add i32 %411, %84
  %413 = add i32 %412, %77
  %414 = add i32 %413, %60
  %415 = add i32 %414, %43
  %416 = add i32 %415, %37
  %417 = add i32 %416, %343
  %418 = add i32 %417, %316
  %419 = shl i32 %418, 1
  %420 = sub i32 %118, %0
  %421 = add i32 %420, %140
  %422 = add i32 %421, %22
  %423 = sub i32 %422, %54
  %424 = add i32 %423, %281
  %425 = add i32 %424, %2
  %426 = add i32 %425, %30
  %427 = add i32 %426, %45
  %428 = add i32 %427, %50
  %429 = add i32 %428, %56
  %430 = add i32 %429, %59
  %431 = add i32 %430, %64
  %432 = add i32 %431, %62
  %433 = sub i32 %432, %32
  %434 = add i32 %433, %96
  %435 = add i32 %434, %97
  %436 = add i32 %435, %102
  %437 = sub i32 %436, %112
  %438 = sub i32 %437, %12
  %439 = add i32 %438, %138
  %440 = add i32 %439, %151
  %441 = add i32 %440, %154
  %442 = sub i32 %441, %46
  %443 = sub i32 %442, %158
  %444 = add i32 %443, %8
  %445 = sub i32 %444, %40
  %446 = add i32 %445, %175
  %447 = sub i32 %446, %182
  %448 = add i32 %447, %183
  %449 = add i32 %448, %27
  %450 = sub i32 %449, %185
  %451 = add i32 %450, %71
  %452 = sub i32 %451, %204
  %453 = sub i32 %452, %215
  %454 = sub i32 %453, %216
  %455 = add i32 %454, %217
  %456 = add i32 %455, %228
  %457 = add i32 %456, %231
  %458 = add i32 %457, %235
  %459 = sub i32 %458, %236
  %460 = sub i32 %459, %245
  %461 = add i32 %460, %251
  %462 = sub i32 %461, %252
  %463 = add i32 %462, %260
  %464 = add i32 %463, %269
  %465 = add i32 %464, %42
  %466 = sub i32 %465, %273
  %467 = add i32 %466, %279
  %468 = add i32 %467, %289
  %469 = sub i32 %468, %292
  %470 = sub i32 %469, %296
  %471 = add i32 %470, %310
  %472 = sub i32 %471, %28
  %473 = add i32 %472, %23
  %474 = add i32 %473, %33
  %475 = sub i32 %474, %36
  %476 = add i32 %475, %41
  %477 = add i32 %476, %48
  %478 = sub i32 %477, %51
  %479 = add i32 %478, %53
  %480 = add i32 %479, %57
  %481 = sub i32 %480, %65
  %482 = add i32 %481, %67
  %483 = add i32 %482, %69
  %484 = add i32 %483, %70
  %485 = sub i32 %484, %74
  %486 = sub i32 %485, %75
  %487 = sub i32 %486, %76
  %488 = sub i32 %487, %93
  %489 = sub i32 %488, %98
  %490 = sub i32 %489, %99
  %491 = add i32 %490, %105
  %492 = sub i32 %491, %107
  %493 = sub i32 %492, %111
  %494 = sub i32 %493, %79
  %495 = add i32 %494, %119
  %496 = sub i32 %495, %120
  %497 = sub i32 %496, %122
  %498 = add i32 %497, %123
  %499 = add i32 %498, %124
  %500 = sub i32 %499, %125
  %501 = sub i32 %500, %126
  %502 = sub i32 %501, %127
  %503 = add i32 %502, %130
  %504 = sub i32 %503, %136
  %505 = add i32 %504, %137
  %506 = add i32 %505, %139
  %507 = sub i32 %506, %141
  %508 = sub i32 %507, %142
  %509 = sub i32 %508, %143
  %510 = add i32 %509, %144
  %511 = sub i32 %510, %145
  %512 = add i32 %511, %156
  %513 = sub i32 %512, %157
  %514 = sub i32 %513, %161
  %515 = sub i32 %514, %168
  %516 = sub i32 %515, %173
  %517 = add i32 %516, %174
  %518 = sub i32 %517, %176
  %519 = sub i32 %518, %180
  %520 = sub i32 %519, %181
  %521 = sub i32 %520, %177
  %522 = sub i32 %521, %184
  %523 = add i32 %522, %91
  %524 = sub i32 %523, %186
  %525 = sub i32 %524, %187
  %526 = sub i32 %525, %188
  %527 = add i32 %526, %189
  %528 = add i32 %527, %190
  %529 = sub i32 %528, %191
  %530 = sub i32 %529, %194
  %531 = add i32 %530, %195
  %532 = add i32 %531, %200
  %533 = add i32 %532, %201
  %534 = add i32 %533, %202
  %535 = sub i32 %534, %203
  %536 = sub i32 %535, %205
  %537 = sub i32 %536, %206
  %538 = sub i32 %537, %208
  %539 = add i32 %538, %209
  %540 = add i32 %539, %210
  %541 = add i32 %540, %212
  %542 = add i32 %541, %213
  %543 = add i32 %542, %214
  %544 = add i32 %543, %218
  %545 = sub i32 %544, %220
  %546 = add i32 %545, %221
  %547 = sub i32 %546, %222
  %548 = add i32 %547, %223
  %549 = add i32 %548, %224
  %550 = add i32 %549, %229
  %551 = add i32 %550, %237
  %552 = sub i32 %551, %238
  %553 = add i32 %552, %239
  %554 = add i32 %553, %242
  %555 = sub i32 %554, %243
  %556 = sub i32 %555, %244
  %557 = sub i32 %556, %246
  %558 = sub i32 %557, %247
  %559 = sub i32 %558, %249
  %560 = sub i32 %559, %250
  %561 = add i32 %560, %253
  %562 = add i32 %561, %257
  %563 = sub i32 %562, %166
  %564 = sub i32 %563, %264
  %565 = add i32 %564, %265
  %566 = add i32 %565, %267
  %567 = sub i32 %566, %268
  %568 = add i32 %567, %272
  %569 = add i32 %568, %276
  %570 = add i32 %569, %277
  %571 = sub i32 %570, %280
  %572 = add i32 %571, %282
  %573 = add i32 %572, %283
  %574 = sub i32 %573, %284
  %575 = add i32 %574, %287
  %576 = add i32 %575, %288
  %577 = sub i32 %576, %291
  %578 = add i32 %577, %258
  %579 = sub i32 %578, %294
  %580 = add i32 %579, %318
  %581 = sub i32 %580, %39
  %582 = sub i32 %581, %73
  %583 = add i32 %582, %80
  %584 = sub i32 %583, %82
  %585 = add i32 %584, %85
  %586 = sub i32 %585, %90
  %587 = sub i32 %586, %92
  %588 = sub i32 %587, %101
  %589 = add i32 %588, %104
  %590 = add i32 %589, %110
  %591 = sub i32 %590, %121
  %592 = sub i32 %591, %129
  %593 = sub i32 %592, %134
  %594 = sub i32 %593, %147
  %595 = sub i32 %594, %150
  %596 = sub i32 %595, %153
  %597 = sub i32 %596, %155
  %598 = sub i32 %597, %160
  %599 = add i32 %598, %165
  %600 = sub i32 %599, %167
  %601 = sub i32 %600, %170
  %602 = sub i32 %601, %172
  %603 = sub i32 %602, %179
  %604 = sub i32 %603, %193
  %605 = sub i32 %604, %198
  %606 = add i32 %605, %207
  %607 = sub i32 %606, %226
  %608 = add i32 %607, %230
  %609 = add i32 %608, %232
  %610 = sub i32 %609, %234
  %611 = sub i32 %610, %241
  %612 = sub i32 %611, %256
  %613 = add i32 %612, %259
  %614 = sub i32 %613, %263
  %615 = sub i32 %614, %275
  %616 = sub i32 %615, %286
  %617 = add i32 %616, %293
  %618 = add i32 %617, %298
  %619 = add i32 %618, %301
  %620 = add i32 %619, %303
  %621 = add i32 %620, %305
  %622 = add i32 %621, %306
  %623 = add i32 %622, %308
  %624 = add i32 %623, %309
  %625 = sub i32 %624, %324
  %626 = sub i32 %625, %114
  %627 = sub i32 %626, %271
  %628 = add i32 %627, %311
  %629 = add i32 %628, %317
  %630 = sub i32 %629, %344
  %631 = sub i32 %630, %352
  %632 = add i32 %631, %362
  %633 = sub i32 %632, %364
  %634 = add i32 %633, %367
  %635 = sub i32 %634, %117
  %636 = sub i32 %635, %313
  %637 = sub i32 %636, %315
  %638 = sub i32 %637, %320
  %639 = sub i32 %638, %322
  %640 = add i32 %639, %323
  %641 = add i32 %640, %327
  %642 = add i32 %641, %329
  %643 = sub i32 %642, %330
  %644 = sub i32 %643, %331
  %645 = sub i32 %644, %332
  %646 = add i32 %645, %339
  %647 = add i32 %646, %351
  %648 = add i32 %647, %355
  %649 = sub i32 %648, %356
  %650 = add i32 %649, %358
  %651 = add i32 %650, %361
  %652 = add i32 %651, %369
  %653 = sub i32 %652, %371
  %654 = sub i32 %653, %372
  %655 = sub i32 %654, %336
  %656 = sub i32 %655, %347
  %657 = add i32 %656, %349
  %658 = sub i32 %657, %354
  %659 = add i32 %658, %377
  %660 = add i32 %659, %400
  %661 = add i32 %660, %393
  %662 = add i32 %661, %398
  %663 = add i32 %662, %388
  %664 = add i32 %663, %419
  %665 = icmp eq i32 %19, %664
  %666 = select i1 %665, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %667 = tail call i32 @puts(i8* nonnull dereferenceable(1) %666)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
