; ModuleID = '../.././c_source_file/1854_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1854_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %4, %3
  %8 = or i32 %1, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = sub i32 %6, %11
  %13 = add i32 %12, %7
  %14 = shl i32 %4, 1
  %15 = or i32 %4, %3
  %16 = shl i32 %15, 1
  %17 = xor i32 %16, -2
  %18 = xor i32 %4, -1
  %19 = xor i32 %3, 1073741823
  %20 = and i32 %19, %4
  %21 = and i32 %18, %3
  %22 = and i32 %4, %3
  %23 = and i32 %1, %0
  %24 = xor i32 %2, -1
  %25 = or i32 %24, %0
  %26 = xor i32 %25, %23
  %27 = xor i32 %0, -1
  %28 = and i32 %2, %1
  %29 = and i32 %28, %27
  %30 = or i32 %2, %1
  %31 = and i32 %30, %0
  %32 = or i32 %29, %31
  %33 = xor i32 %1, -1
  %34 = and i32 %33, %0
  %35 = xor i32 %34, -1
  %36 = and i32 %10, %35
  %37 = and i32 %24, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %38, %33
  %40 = or i32 %2, %0
  %41 = and i32 %40, %1
  %42 = or i32 %37, %33
  %43 = and i32 %28, %0
  %44 = and i32 %30, %27
  %45 = or i32 %43, %44
  %46 = and i32 %24, %1
  %47 = xor i32 %46, %0
  %48 = and i32 %2, %0
  %49 = xor i32 %2, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %1
  %52 = and i32 %33, %2
  %53 = and i32 %52, %0
  %54 = or i32 %33, %2
  %55 = and i32 %54, %27
  %56 = xor i32 %53, -1
  %57 = xor i32 %55, %56
  %58 = shl i32 %34, 1
  %59 = xor i32 %40, -1
  %60 = xor i32 %1, %0
  %61 = or i32 %60, %59
  %62 = shl i32 %61, 1
  %63 = or i32 %9, %0
  %64 = xor i32 %53, %63
  %65 = or i32 %24, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %27
  %68 = xor i32 %46, -1
  %69 = and i32 %68, %0
  %70 = xor i32 %66, %0
  %71 = xor i32 %60, -1
  %72 = or i32 %24, %71
  %73 = xor i32 %30, %23
  %74 = or i32 %33, %0
  %75 = and i32 %74, %50
  %76 = and i32 %35, %2
  %77 = or i32 %10, %27
  %78 = or i32 %49, %1
  %79 = xor i32 %29, -1
  %80 = xor i32 %31, %79
  %81 = and i32 %24, %71
  %82 = xor i32 %74, -1
  %83 = or i32 %82, %2
  %84 = xor i32 %25, -1
  %85 = xor i32 %84, %1
  %86 = or i32 %37, %60
  %87 = xor i32 %23, -1
  %88 = and i32 %49, %87
  %89 = and i32 %52, %27
  %90 = or i32 %9, %27
  %91 = xor i32 %89, %90
  %92 = add i32 %1, 1
  %93 = xor i32 %8, -1
  %94 = or i32 %93, %2
  %95 = xor i32 %68, %0
  %96 = and i32 %49, %8
  %97 = and i32 %40, %60
  %98 = or i32 %9, %34
  %99 = or i32 %34, %24
  %100 = and i32 %38, %1
  %101 = or i32 %84, %71
  %102 = shl i32 %101, 1
  %103 = or i32 %9, %93
  %104 = xor i32 %28, -1
  %105 = or i32 %104, %27
  %106 = and i32 %54, %0
  %107 = or i32 %89, %106
  %108 = or i32 %50, %71
  %109 = xor i32 %48, -1
  %110 = and i32 %109, %1
  %111 = or i32 %37, %1
  %112 = or i32 %59, %33
  %113 = xor i32 %9, %0
  %114 = xor i32 %113, -1
  %115 = xor i32 %53, %114
  %116 = and i32 %87, %2
  %117 = shl i32 %116, 1
  %118 = or i32 %28, %34
  %119 = or i32 %10, %93
  %120 = shl i32 %119, 1
  %121 = and i32 %9, %27
  %122 = or i32 %43, %121
  %123 = and i32 %8, %50
  %124 = shl i32 %1, 1
  %125 = xor i32 %43, -1
  %126 = xor i32 %44, %125
  %127 = xor i32 %34, %2
  %128 = or i32 %10, %0
  %129 = or i32 %48, %71
  %130 = or i32 %37, %28
  %131 = or i32 %48, %33
  %132 = shl i32 %131, 1
  %133 = and i32 %8, %24
  %134 = or i32 %46, %0
  %135 = or i32 %49, %71
  %136 = or i32 %48, %82
  %137 = or i32 %34, %2
  %138 = xor i32 %48, %68
  %139 = and i32 %9, %35
  %140 = and i32 %109, %33
  %141 = and i32 %50, %33
  %142 = add i32 %28, 1
  %143 = or i32 %30, %0
  %144 = xor i32 %48, %30
  %145 = and i32 %60, %2
  %146 = or i32 %66, %0
  %147 = xor i32 %43, %113
  %148 = xor i32 %35, %2
  %149 = shl i32 %148, 1
  %150 = and i32 %65, %27
  %151 = add i32 %25, 1
  %152 = xor i32 %30, -1
  %153 = or i32 %23, %152
  %154 = xor i32 %65, %0
  %155 = or i32 %49, %93
  %156 = shl i32 %74, 1
  %157 = or i32 %30, %27
  %158 = xor i32 %48, %1
  %159 = and i32 %49, %35
  %160 = xor i32 %59, %1
  %161 = or i32 %48, %46
  %162 = or i32 %48, %93
  %163 = or i32 %48, %1
  %164 = and i32 %9, %87
  %165 = or i32 %60, %2
  %166 = xor i32 %8, %2
  %167 = xor i32 %37, %65
  %168 = and i32 %25, %60
  %169 = xor i32 %82, %2
  %170 = and i32 %74, %10
  %171 = and i32 %49, %33
  %172 = xor i32 %90, -1
  %173 = or i32 %89, %172
  %174 = xor i32 %48, %74
  %175 = xor i32 %48, %93
  %176 = or i32 %28, %27
  %177 = and i32 %104, %27
  %178 = or i32 %24, %93
  %179 = xor i32 %121, %125
  %180 = and i32 %68, %27
  %181 = shl i32 %180, 1
  %182 = or i32 %49, %34
  %183 = and i32 %24, %35
  %184 = xor i32 %54, %0
  %185 = or i32 %53, %184
  %186 = xor i32 %37, %1
  %187 = and i32 %9, %0
  %188 = or i32 %29, %187
  %189 = shl i32 %27, 1
  %190 = or i32 %60, %84
  %191 = or i32 %23, %59
  %192 = or i32 %49, %33
  %193 = and i32 %24, %87
  %194 = or i32 %84, %33
  %195 = or i32 %24, %82
  %196 = xor i32 %104, %0
  %197 = add i32 %65, 1
  %198 = or i32 %59, %71
  %199 = shl i32 %198, 1
  %200 = or i32 %9, %82
  %201 = or i32 %9, %23
  %202 = and i32 %60, %24
  %203 = and i32 %49, %71
  %204 = and i32 %49, %1
  %205 = and i32 %49, %60
  %206 = shl i32 %205, 1
  %207 = or i32 %34, %10
  %208 = and i32 %40, %71
  %209 = or i32 %50, %82
  %210 = xor i32 %184, %56
  %211 = and i32 %10, %87
  %212 = or i32 %50, %93
  %213 = shl i32 %212, 1
  %214 = or i32 %53, %55
  %215 = or i32 %48, %152
  %216 = xor i32 %93, %2
  %217 = or i32 %49, %82
  %218 = or i32 %49, %23
  %219 = shl i32 %218, 1
  %220 = and i32 %25, %1
  %221 = xor i32 %34, %68
  %222 = add i32 %74, 1
  %223 = add i32 %40, 1
  %224 = and i32 %60, %50
  %225 = and i32 %50, %71
  %226 = xor i32 %40, %1
  %227 = or i32 %43, %114
  %228 = and i32 %38, %71
  %229 = or i32 %37, %66
  %230 = or i32 %23, %84
  %231 = and i32 %104, %0
  %232 = shl i32 %231, 1
  %233 = and i32 %10, %0
  %234 = or i32 %49, %60
  %235 = xor i32 %87, %2
  %236 = or i32 %68, %0
  %237 = and i32 %65, %0
  %238 = xor i32 %40, %23
  %239 = xor i32 %37, %104
  %240 = and i32 %109, %71
  %241 = or i32 %65, %27
  %242 = and i32 %40, %33
  %243 = and i32 %25, %33
  %244 = or i32 %60, %24
  %245 = xor i32 %23, %2
  %246 = or i32 %10, %82
  %247 = shl i32 %246, 1
  %248 = xor i32 %63, -1
  %249 = or i32 %53, %248
  %250 = or i32 %48, %60
  %251 = or i32 %104, %0
  %252 = and i32 %60, %38
  %253 = and i32 %50, %35
  %254 = or i32 %152, %27
  %255 = shl i32 %254, 1
  %256 = and i32 %9, %8
  %257 = and i32 %50, %87
  %258 = xor i32 %74, %2
  %259 = and i32 %49, %74
  %260 = and i32 %8, %2
  %261 = or i32 %23, %50
  %262 = shl i32 %10, 1
  %263 = xor i32 %152, %0
  %264 = xor i32 %109, %1
  %265 = and i32 %25, %71
  %266 = or i32 %60, %50
  %267 = or i32 %50, %33
  %268 = shl i32 %267, 1
  %269 = or i32 %23, %10
  %270 = and i32 %10, %27
  %271 = shl i32 %71, 1
  %272 = xor i32 %25, %1
  %273 = xor i32 %125, %0
  %274 = xor i32 %273, %30
  %275 = or i32 %37, %71
  %276 = shl i32 %275, 1
  %277 = xor i32 %187, %79
  %278 = and i32 %152, %27
  %279 = shl i32 %278, 2
  %280 = and i32 %46, %27
  %281 = mul i32 %280, -7
  %282 = and i32 %152, %0
  %283 = mul i32 %282, -21
  %284 = and i32 %46, %0
  %285 = and i32 %66, %27
  %286 = and i32 %66, %0
  %287 = mul i32 %286, 6
  %288 = add i32 %260, -1
  %289 = add i32 %288, %195
  %290 = add i32 %289, %183
  %291 = add i32 %290, %40
  %292 = add i32 %291, %90
  %293 = add i32 %292, %234
  %294 = add i32 %293, %221
  %295 = add i32 %294, %215
  %296 = add i32 %295, %203
  %297 = add i32 %296, %182
  %298 = add i32 %297, %160
  %299 = add i32 %298, %130
  %300 = add i32 %299, %128
  %301 = add i32 %300, %111
  %302 = add i32 %301, %105
  %303 = add i32 %302, %97
  %304 = add i32 %303, %88
  %305 = add i32 %304, %147
  %306 = shl i32 %305, 1
  %307 = sub i32 %222, %169
  %308 = sub i32 %307, %76
  %309 = add i32 %308, %123
  %310 = sub i32 %309, %110
  %311 = add i32 %310, %70
  %312 = add i32 %311, %22
  %313 = mul i32 %312, 3
  %314 = sub i32 %94, %256
  %315 = sub i32 %314, %208
  %316 = add i32 %315, %126
  %317 = sub i32 %316, %188
  %318 = mul i32 %317, 5
  %319 = add i32 %285, %93
  %320 = add i32 %319, %138
  %321 = add i32 %320, %20
  %322 = shl i32 %321, 2
  %323 = sub i32 %43, %29
  %324 = mul i32 %323, 9
  %325 = sub i32 %92, %0
  %326 = sub i32 %325, %189
  %327 = sub i32 %326, %2
  %328 = sub i32 %327, %124
  %329 = add i32 %328, %2
  %330 = add i32 %329, 2
  %331 = add i32 %330, %8
  %332 = add i32 %331, %60
  %333 = sub i32 %332, %48
  %334 = sub i32 %333, %58
  %335 = add i32 %334, %72
  %336 = add i32 %335, %81
  %337 = sub i32 %336, %83
  %338 = add i32 %337, %99
  %339 = add i32 %338, %50
  %340 = sub i32 %339, %127
  %341 = add i32 %340, %133
  %342 = sub i32 %341, %137
  %343 = add i32 %342, %142
  %344 = add i32 %343, %65
  %345 = sub i32 %344, %145
  %346 = add i32 %345, %151
  %347 = sub i32 %346, %156
  %348 = add i32 %347, %165
  %349 = sub i32 %348, %166
  %350 = add i32 %349, %178
  %351 = sub i32 %350, %30
  %352 = sub i32 %351, %28
  %353 = sub i32 %352, %193
  %354 = sub i32 %353, %25
  %355 = sub i32 %354, %9
  %356 = add i32 %355, %197
  %357 = add i32 %356, %202
  %358 = add i32 %357, %216
  %359 = add i32 %358, %223
  %360 = add i32 %359, %235
  %361 = add i32 %360, %244
  %362 = add i32 %361, %245
  %363 = add i32 %362, %258
  %364 = sub i32 %363, %49
  %365 = sub i32 %364, %271
  %366 = add i32 %365, %109
  %367 = add i32 %366, %26
  %368 = sub i32 %367, %36
  %369 = add i32 %368, %39
  %370 = sub i32 %369, %41
  %371 = sub i32 %370, %42
  %372 = add i32 %371, %47
  %373 = add i32 %372, %51
  %374 = sub i32 %373, %67
  %375 = add i32 %374, %69
  %376 = sub i32 %375, %73
  %377 = add i32 %376, %75
  %378 = add i32 %377, %77
  %379 = add i32 %378, %78
  %380 = sub i32 %379, %85
  %381 = add i32 %380, %86
  %382 = add i32 %381, %95
  %383 = add i32 %382, %96
  %384 = sub i32 %383, %98
  %385 = sub i32 %384, %100
  %386 = sub i32 %385, %103
  %387 = sub i32 %386, %108
  %388 = add i32 %387, %112
  %389 = sub i32 %388, %117
  %390 = sub i32 %389, %118
  %391 = sub i32 %390, %129
  %392 = sub i32 %391, %134
  %393 = add i32 %392, %135
  %394 = add i32 %393, %136
  %395 = add i32 %394, %139
  %396 = add i32 %395, %140
  %397 = sub i32 %396, %141
  %398 = add i32 %397, %143
  %399 = add i32 %398, %144
  %400 = sub i32 %399, %146
  %401 = sub i32 %400, %149
  %402 = add i32 %401, %150
  %403 = sub i32 %402, %153
  %404 = add i32 %403, %154
  %405 = add i32 %404, %155
  %406 = add i32 %405, %157
  %407 = add i32 %406, %63
  %408 = add i32 %407, %158
  %409 = sub i32 %408, %159
  %410 = add i32 %409, %161
  %411 = sub i32 %410, %162
  %412 = sub i32 %411, %163
  %413 = add i32 %412, %164
  %414 = add i32 %413, %167
  %415 = add i32 %414, %168
  %416 = sub i32 %415, %170
  %417 = add i32 %416, %171
  %418 = sub i32 %417, %174
  %419 = add i32 %418, %113
  %420 = add i32 %419, %175
  %421 = sub i32 %420, %176
  %422 = add i32 %421, %177
  %423 = add i32 %422, %186
  %424 = add i32 %423, %190
  %425 = add i32 %424, %191
  %426 = sub i32 %425, %192
  %427 = sub i32 %426, %194
  %428 = add i32 %427, %44
  %429 = sub i32 %428, %196
  %430 = add i32 %429, %200
  %431 = add i32 %430, %201
  %432 = sub i32 %431, %204
  %433 = add i32 %432, %207
  %434 = add i32 %433, %209
  %435 = sub i32 %434, %211
  %436 = sub i32 %435, %217
  %437 = sub i32 %436, %220
  %438 = sub i32 %437, %224
  %439 = sub i32 %438, %225
  %440 = add i32 %439, %226
  %441 = sub i32 %440, %228
  %442 = sub i32 %441, %229
  %443 = add i32 %442, %230
  %444 = add i32 %443, %233
  %445 = add i32 %444, %236
  %446 = add i32 %445, %237
  %447 = sub i32 %446, %187
  %448 = sub i32 %447, %238
  %449 = add i32 %448, %239
  %450 = sub i32 %449, %240
  %451 = add i32 %450, %241
  %452 = add i32 %451, %242
  %453 = sub i32 %452, %243
  %454 = sub i32 %453, %250
  %455 = add i32 %454, %251
  %456 = sub i32 %455, %252
  %457 = add i32 %456, %253
  %458 = sub i32 %457, %257
  %459 = add i32 %458, %259
  %460 = sub i32 %459, %261
  %461 = sub i32 %460, %262
  %462 = sub i32 %461, %263
  %463 = sub i32 %462, %264
  %464 = sub i32 %463, %265
  %465 = sub i32 %464, %266
  %466 = add i32 %465, %269
  %467 = add i32 %466, %270
  %468 = sub i32 %467, %272
  %469 = add i32 %468, %121
  %470 = add i32 %469, %284
  %471 = add i32 %470, %7
  %472 = sub i32 %471, %14
  %473 = add i32 %472, %21
  %474 = sub i32 %473, %32
  %475 = add i32 %474, %45
  %476 = sub i32 %475, %57
  %477 = sub i32 %476, %62
  %478 = add i32 %477, %64
  %479 = sub i32 %478, %80
  %480 = add i32 %479, %91
  %481 = sub i32 %480, %102
  %482 = sub i32 %481, %107
  %483 = add i32 %482, %115
  %484 = sub i32 %483, %120
  %485 = sub i32 %484, %122
  %486 = sub i32 %485, %132
  %487 = sub i32 %486, %173
  %488 = sub i32 %487, %179
  %489 = sub i32 %488, %181
  %490 = sub i32 %489, %185
  %491 = sub i32 %490, %199
  %492 = sub i32 %491, %206
  %493 = add i32 %492, %210
  %494 = sub i32 %493, %213
  %495 = add i32 %494, %214
  %496 = sub i32 %495, %219
  %497 = sub i32 %496, %227
  %498 = sub i32 %497, %232
  %499 = sub i32 %498, %247
  %500 = sub i32 %499, %249
  %501 = sub i32 %500, %255
  %502 = sub i32 %501, %268
  %503 = sub i32 %502, %274
  %504 = sub i32 %503, %276
  %505 = sub i32 %504, %277
  %506 = sub i32 %505, %279
  %507 = add i32 %506, %281
  %508 = add i32 %507, %283
  %509 = add i32 %508, %287
  %510 = add i32 %509, %324
  %511 = add i32 %510, %17
  %512 = add i32 %511, %322
  %513 = add i32 %512, %318
  %514 = add i32 %513, %313
  %515 = add i32 %514, %306
  %516 = icmp eq i32 %13, %515
  %517 = select i1 %516, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %518 = tail call i32 @puts(i8* nonnull dereferenceable(1) %517)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
