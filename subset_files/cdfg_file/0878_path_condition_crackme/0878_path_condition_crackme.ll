; ModuleID = '../.././c_source_file/0878_path_condition_crackme.c'
source_filename = "../.././c_source_file/0878_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = shl i32 %7, 1
  %9 = add i32 %8, %4
  %10 = sub i32 0, %9
  %11 = xor i32 %4, %3
  %12 = shl i32 %11, 1
  %13 = xor i32 %12, -2
  %14 = or i32 %4, %3
  %15 = and i32 %4, %3
  %16 = shl i32 %15, 1
  %17 = xor i32 %16, -2
  %18 = xor i32 %4, -1
  %19 = or i32 %18, %3
  %20 = shl i32 %14, 1
  %21 = xor i32 %20, -2
  %22 = xor i32 %19, -1
  %23 = and i32 %18, %3
  %24 = shl i32 %15, 2
  %25 = and i32 %2, %0
  %26 = xor i32 %2, -1
  %27 = and i32 %26, %1
  %28 = xor i32 %27, -1
  %29 = xor i32 %25, %28
  %30 = and i32 %6, %0
  %31 = xor i32 %1, -1
  %32 = and i32 %31, %0
  %33 = or i32 %26, %1
  %34 = or i32 %33, %0
  %35 = or i32 %1, %0
  %36 = xor i32 %2, %0
  %37 = and i32 %36, %35
  %38 = and i32 %2, %1
  %39 = xor i32 %38, %0
  %40 = xor i32 %2, %1
  %41 = shl i32 %40, 1
  %42 = xor i32 %0, -1
  %43 = and i32 %31, %2
  %44 = and i32 %43, %42
  %45 = or i32 %40, %42
  %46 = xor i32 %45, -1
  %47 = or i32 %44, %46
  %48 = or i32 %32, %26
  %49 = and i32 %26, %0
  %50 = xor i32 %49, -1
  %51 = and i32 %50, %1
  %52 = and i32 %6, %42
  %53 = xor i32 %35, -1
  %54 = or i32 %36, %53
  %55 = xor i32 %35, %2
  %56 = shl i32 %55, 1
  %57 = or i32 %31, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %26, %58
  %60 = xor i32 %32, -1
  %61 = and i32 %60, %2
  %62 = and i32 %36, %60
  %63 = or i32 %40, %32
  %64 = shl i32 %63, 1
  %65 = xor i32 %38, -1
  %66 = xor i32 %65, %0
  %67 = and i32 %33, %42
  %68 = and i32 %1, %0
  %69 = xor i32 %68, -1
  %70 = xor i32 %69, %2
  %71 = and i32 %35, %26
  %72 = and i32 %43, %0
  %73 = or i32 %31, %2
  %74 = and i32 %73, %42
  %75 = xor i32 %72, -1
  %76 = xor i32 %74, %75
  %77 = or i32 %26, %0
  %78 = xor i32 %1, %0
  %79 = xor i32 %25, -1
  %80 = xor i32 %78, -1
  %81 = and i32 %79, %80
  %82 = or i32 %78, %26
  %83 = xor i32 %36, -1
  %84 = or i32 %68, %83
  %85 = xor i32 %77, %68
  %86 = xor i32 %25, %57
  %87 = shl i32 %86, 1
  %88 = or i32 %2, %0
  %89 = xor i32 %88, %68
  %90 = and i32 %36, %78
  %91 = or i32 %83, %80
  %92 = or i32 %25, %78
  %93 = and i32 %83, %31
  %94 = or i32 %78, %2
  %95 = and i32 %35, %2
  %96 = xor i32 %50, %1
  %97 = or i32 %83, %58
  %98 = xor i32 %88, -1
  %99 = or i32 %98, %31
  %100 = or i32 %26, %53
  %101 = and i32 %38, %0
  %102 = xor i32 %6, %0
  %103 = xor i32 %101, -1
  %104 = xor i32 %102, %103
  %105 = or i32 %83, %1
  %106 = or i32 %83, %53
  %107 = xor i32 %40, -1
  %108 = add i32 %40, 1
  %109 = xor i32 %32, %28
  %110 = or i32 %49, %80
  %111 = or i32 %38, %0
  %112 = or i32 %72, %74
  %113 = xor i32 %33, -1
  %114 = or i32 %49, %113
  %115 = and i32 %77, %1
  %116 = xor i32 %73, %0
  %117 = xor i32 %116, %75
  %118 = xor i32 %60, %2
  %119 = and i32 %79, %31
  %120 = or i32 %32, %83
  %121 = or i32 %28, %42
  %122 = or i32 %49, %1
  %123 = xor i32 %25, %1
  %124 = or i32 %36, %58
  %125 = xor i32 %32, %65
  %126 = and i32 %77, %31
  %127 = add i32 %33, 1
  %128 = xor i32 %25, %35
  %129 = or i32 %107, %0
  %130 = xor i32 %44, %45
  %131 = xor i32 %58, %2
  %132 = or i32 %25, %58
  %133 = xor i32 %25, %6
  %134 = xor i32 %40, %0
  %135 = xor i32 %134, -1
  %136 = or i32 %101, %135
  %137 = shl i32 %136, 1
  %138 = or i32 %72, %134
  %139 = or i32 %49, %31
  %140 = and i32 %40, %42
  %141 = and i32 %26, %69
  %142 = shl i32 %141, 1
  %143 = and i32 %26, %60
  %144 = xor i32 %77, -1
  %145 = or i32 %144, %31
  %146 = or i32 %36, %32
  %147 = or i32 %40, %58
  %148 = xor i32 %27, %0
  %149 = and i32 %107, %60
  %150 = shl i32 %149, 1
  %151 = and i32 %78, %50
  %152 = or i32 %68, %7
  %153 = and i32 %57, %107
  %154 = or i32 %36, %80
  %155 = and i32 %33, %0
  %156 = or i32 %107, %58
  %157 = and i32 %36, %57
  %158 = or i32 %7, %42
  %159 = or i32 %27, %42
  %160 = or i32 %78, %144
  %161 = and i32 %65, %0
  %162 = or i32 %40, %0
  %163 = xor i32 %72, %162
  %164 = and i32 %107, %0
  %165 = xor i32 %140, 2147483647
  %166 = xor i32 %165, %101
  %167 = shl i32 %166, 1
  %168 = and i32 %78, %26
  %169 = shl i32 %168, 1
  %170 = and i32 %40, %57
  %171 = or i32 %53, %2
  %172 = or i32 %7, %0
  %173 = or i32 %68, %113
  %174 = or i32 %25, %27
  %175 = shl i32 %174, 1
  %176 = and i32 %57, %2
  %177 = or i32 %113, %0
  %178 = or i32 %6, %42
  %179 = or i32 %33, %42
  %180 = or i32 %6, %0
  %181 = or i32 %68, %107
  %182 = or i32 %36, %78
  %183 = xor i32 %79, %1
  %184 = or i32 %78, %83
  %185 = or i32 %36, %1
  %186 = and i32 %35, %83
  %187 = xor i32 %88, %1
  %188 = or i32 %78, %98
  %189 = and i32 %36, %69
  %190 = or i32 %113, %42
  %191 = or i32 %38, %42
  %192 = and i32 %77, %78
  %193 = xor i32 %53, %2
  %194 = shl i32 %193, 1
  %195 = xor i32 %68, %2
  %196 = xor i32 %33, %68
  %197 = xor i32 %33, %0
  %198 = and i32 %83, %60
  %199 = and i32 %83, %69
  %200 = and i32 %107, %69
  %201 = and i32 %73, %0
  %202 = or i32 %44, %201
  %203 = xor i32 %107, %0
  %204 = or i32 %65, %42
  %205 = or i32 %38, %32
  %206 = or i32 %27, %32
  %207 = xor i32 %98, %1
  %208 = and i32 %40, %0
  %209 = xor i32 %49, %33
  %210 = or i32 %68, %98
  %211 = xor i32 %28, %0
  %212 = xor i32 %162, -1
  %213 = or i32 %72, %212
  %214 = add i32 %57, 1
  %215 = and i32 %38, %42
  %216 = or i32 %215, %208
  %217 = xor i32 %49, %1
  %218 = xor i32 %101, %134
  %219 = or i32 %80, %2
  %220 = or i32 %72, %116
  %221 = shl i32 %31, 1
  %222 = or i32 %215, %30
  %223 = or i32 %25, %1
  %224 = or i32 %25, %53
  %225 = and i32 %88, %78
  %226 = or i32 %32, %107
  %227 = and i32 %36, %80
  %228 = shl i32 %227, 1
  %229 = xor i32 %208, -1
  %230 = xor i32 %215, %229
  %231 = or i32 %25, %7
  %232 = or i32 %83, %31
  %233 = and i32 %40, %69
  %234 = or i32 %28, %0
  %235 = shl i32 %65, 1
  %236 = or i32 %107, %42
  %237 = and i32 %28, %0
  %238 = and i32 %40, %60
  %239 = and i32 %88, %80
  %240 = xor i32 %49, %65
  %241 = and i32 %50, %31
  %242 = or i32 %107, %53
  %243 = xor i32 %57, %2
  %244 = and i32 %57, %26
  %245 = xor i32 %6, %68
  %246 = xor i32 %144, %1
  %247 = or i32 %27, %0
  %248 = or i32 %101, %140
  %249 = or i32 %36, %68
  %250 = or i32 %144, %80
  %251 = or i32 %98, %1
  %252 = xor i32 %7, %0
  %253 = and i32 %78, %2
  %254 = and i32 %35, %107
  %255 = or i32 %40, %53
  %256 = or i32 %32, %2
  %257 = xor i32 %32, %2
  %258 = and i32 %107, %42
  %259 = or i32 %49, %78
  %260 = and i32 %78, %79
  %261 = xor i32 %77, %1
  %262 = or i32 %144, %1
  %263 = and i32 %88, %1
  %264 = xor i32 %201, 2147483647
  %265 = xor i32 %264, %44
  %266 = shl i32 %265, 1
  %267 = xor i32 %113, %0
  %268 = or i32 %58, %2
  %269 = and i32 %77, %80
  %270 = and i32 %36, %1
  %271 = or i32 %101, %102
  %272 = xor i32 %52, %103
  %273 = and i32 %40, %35
  %274 = shl i32 %273, 1
  %275 = add i32 %49, 1
  %276 = and i32 %83, %80
  %277 = or i32 %65, %0
  %278 = and i32 %83, %1
  %279 = or i32 %68, %144
  %280 = or i32 %26, %80
  %281 = or i32 %36, %31
  %282 = shl i32 %281, 1
  %283 = and i32 %50, %80
  %284 = or i32 %68, %2
  %285 = and i32 %57, %83
  %286 = and i32 %28, %42
  %287 = and i32 %80, %2
  %288 = and i32 %78, %83
  %289 = and i32 %65, %42
  %290 = shl i32 %98, 1
  %291 = and i32 %69, %2
  %292 = add i32 %35, 1
  %293 = or i32 %25, %80
  %294 = or i32 %49, %38
  %295 = or i32 %40, %68
  %296 = or i32 %68, %26
  %297 = and i32 %88, %31
  %298 = shl i32 %297, 1
  %299 = and i32 %79, %1
  %300 = xor i32 %72, %135
  %301 = or i32 %25, %31
  %302 = and i32 %7, %42
  %303 = and i32 %27, %42
  %304 = shl i32 %303, 3
  %305 = and i32 %7, %0
  %306 = mul i32 %305, -23
  %307 = and i32 %27, %0
  %308 = mul i32 %307, -15
  %309 = and i32 %113, %42
  %310 = mul i32 %309, -18
  %311 = mul i32 %215, -37
  %312 = and i32 %113, %0
  %313 = mul i32 %101, -31
  %314 = add i32 %256, %83
  %315 = add i32 %314, %49
  %316 = add i32 %315, %82
  %317 = add i32 %316, %48
  %318 = add i32 %317, %3
  %319 = add i32 %318, %270
  %320 = add i32 %319, %269
  %321 = add i32 %320, %261
  %322 = add i32 %321, %259
  %323 = add i32 %322, %255
  %324 = add i32 %323, %254
  %325 = add i32 %324, %236
  %326 = add i32 %325, %217
  %327 = add i32 %326, %183
  %328 = add i32 %327, %160
  %329 = add i32 %328, %139
  %330 = add i32 %329, %128
  %331 = add i32 %330, %124
  %332 = add i32 %331, %121
  %333 = add i32 %332, %111
  %334 = add i32 %333, %66
  %335 = add i32 %334, %218
  %336 = add i32 %335, %222
  %337 = add i32 %336, %216
  %338 = shl i32 %337, 1
  %339 = sub i32 %312, %302
  %340 = add i32 %339, %251
  %341 = sub i32 %340, %198
  %342 = sub i32 %341, %172
  %343 = add i32 %342, %105
  %344 = sub i32 %343, %97
  %345 = add i32 %344, %29
  %346 = mul i32 %345, 5
  %347 = add i32 %153, %291
  %348 = add i32 %347, %210
  %349 = add i32 %348, %115
  %350 = mul i32 %349, 3
  %351 = shl i32 %262, 2
  %352 = add i32 %351, -4
  %353 = add i32 %1, 2
  %354 = sub i32 %353, %32
  %355 = add i32 %354, %57
  %356 = sub i32 %355, %78
  %357 = add i32 %356, %80
  %358 = add i32 %357, %35
  %359 = add i32 %358, %60
  %360 = add i32 %359, %214
  %361 = sub i32 %360, %221
  %362 = add i32 %361, %292
  %363 = add i32 %362, %59
  %364 = sub i32 %363, %61
  %365 = sub i32 %364, %70
  %366 = sub i32 %365, %71
  %367 = sub i32 %366, %77
  %368 = add i32 %367, %94
  %369 = sub i32 %368, %95
  %370 = sub i32 %369, %88
  %371 = sub i32 %370, %27
  %372 = add i32 %371, %100
  %373 = add i32 %372, %28
  %374 = add i32 %373, %108
  %375 = sub i32 %374, %118
  %376 = add i32 %375, %127
  %377 = add i32 %376, %131
  %378 = sub i32 %377, %143
  %379 = add i32 %378, %36
  %380 = sub i32 %379, %171
  %381 = add i32 %380, %176
  %382 = add i32 %381, %6
  %383 = sub i32 %382, %195
  %384 = sub i32 %383, %38
  %385 = add i32 %384, %219
  %386 = add i32 %385, %243
  %387 = sub i32 %386, %244
  %388 = sub i32 %387, %253
  %389 = add i32 %388, %257
  %390 = sub i32 %389, %33
  %391 = sub i32 %390, %268
  %392 = add i32 %391, %275
  %393 = add i32 %392, %280
  %394 = add i32 %393, %284
  %395 = add i32 %394, %287
  %396 = sub i32 %395, %296
  %397 = add i32 %396, %30
  %398 = sub i32 %397, %34
  %399 = sub i32 %398, %37
  %400 = sub i32 %399, %39
  %401 = sub i32 %400, %41
  %402 = add i32 %401, %51
  %403 = sub i32 %402, %52
  %404 = sub i32 %403, %54
  %405 = sub i32 %404, %56
  %406 = sub i32 %405, %62
  %407 = sub i32 %406, %67
  %408 = add i32 %407, %81
  %409 = sub i32 %408, %45
  %410 = sub i32 %409, %84
  %411 = sub i32 %410, %85
  %412 = add i32 %411, %89
  %413 = add i32 %412, %90
  %414 = sub i32 %413, %91
  %415 = add i32 %414, %92
  %416 = sub i32 %415, %93
  %417 = sub i32 %416, %96
  %418 = add i32 %417, %99
  %419 = sub i32 %418, %106
  %420 = add i32 %419, %109
  %421 = add i32 %420, %110
  %422 = add i32 %421, %114
  %423 = add i32 %422, %119
  %424 = add i32 %423, %120
  %425 = add i32 %424, %122
  %426 = add i32 %425, %123
  %427 = sub i32 %426, %125
  %428 = sub i32 %427, %126
  %429 = sub i32 %428, %129
  %430 = add i32 %429, %132
  %431 = sub i32 %430, %133
  %432 = sub i32 %431, %140
  %433 = sub i32 %432, %142
  %434 = sub i32 %433, %145
  %435 = sub i32 %434, %146
  %436 = sub i32 %435, %147
  %437 = sub i32 %436, %148
  %438 = sub i32 %437, %151
  %439 = add i32 %438, %152
  %440 = sub i32 %439, %154
  %441 = add i32 %440, %102
  %442 = add i32 %441, %155
  %443 = add i32 %442, %156
  %444 = sub i32 %443, %157
  %445 = sub i32 %444, %158
  %446 = add i32 %445, %159
  %447 = add i32 %446, %161
  %448 = sub i32 %447, %164
  %449 = sub i32 %448, %169
  %450 = sub i32 %449, %170
  %451 = sub i32 %450, %173
  %452 = sub i32 %451, %177
  %453 = sub i32 %452, %178
  %454 = sub i32 %453, %179
  %455 = sub i32 %454, %180
  %456 = add i32 %455, %181
  %457 = add i32 %456, %182
  %458 = sub i32 %457, %184
  %459 = sub i32 %458, %185
  %460 = sub i32 %459, %186
  %461 = sub i32 %460, %187
  %462 = add i32 %461, %188
  %463 = add i32 %462, %189
  %464 = sub i32 %463, %190
  %465 = sub i32 %464, %191
  %466 = sub i32 %465, %192
  %467 = sub i32 %466, %194
  %468 = add i32 %467, %196
  %469 = sub i32 %468, %197
  %470 = add i32 %469, %199
  %471 = add i32 %470, %200
  %472 = sub i32 %471, %203
  %473 = sub i32 %472, %204
  %474 = add i32 %473, %205
  %475 = sub i32 %474, %206
  %476 = add i32 %475, %207
  %477 = add i32 %476, %208
  %478 = add i32 %477, %209
  %479 = add i32 %478, %211
  %480 = add i32 %479, %223
  %481 = add i32 %480, %224
  %482 = add i32 %481, %225
  %483 = sub i32 %482, %226
  %484 = add i32 %483, %231
  %485 = add i32 %484, %232
  %486 = add i32 %485, %233
  %487 = sub i32 %486, %234
  %488 = sub i32 %487, %235
  %489 = sub i32 %488, %162
  %490 = add i32 %489, %237
  %491 = add i32 %490, %238
  %492 = add i32 %491, %239
  %493 = sub i32 %492, %240
  %494 = sub i32 %493, %241
  %495 = add i32 %494, %242
  %496 = add i32 %495, %245
  %497 = add i32 %496, %246
  %498 = sub i32 %497, %247
  %499 = sub i32 %498, %249
  %500 = sub i32 %499, %250
  %501 = sub i32 %500, %134
  %502 = sub i32 %501, %252
  %503 = add i32 %502, %258
  %504 = add i32 %503, %260
  %505 = add i32 %504, %263
  %506 = add i32 %505, %267
  %507 = sub i32 %506, %276
  %508 = sub i32 %507, %277
  %509 = sub i32 %508, %278
  %510 = add i32 %509, %279
  %511 = add i32 %510, %283
  %512 = add i32 %511, %285
  %513 = sub i32 %512, %286
  %514 = add i32 %513, %288
  %515 = add i32 %514, %289
  %516 = sub i32 %515, %290
  %517 = sub i32 %516, %293
  %518 = sub i32 %517, %294
  %519 = add i32 %518, %295
  %520 = sub i32 %519, %299
  %521 = add i32 %520, %301
  %522 = add i32 %521, %14
  %523 = sub i32 %522, %19
  %524 = add i32 %523, %22
  %525 = add i32 %524, %23
  %526 = add i32 %525, %47
  %527 = sub i32 %526, %64
  %528 = add i32 %527, %76
  %529 = sub i32 %528, %87
  %530 = add i32 %529, %104
  %531 = add i32 %530, %112
  %532 = sub i32 %531, %117
  %533 = add i32 %532, %130
  %534 = add i32 %533, %138
  %535 = sub i32 %534, %150
  %536 = sub i32 %535, %163
  %537 = sub i32 %536, %175
  %538 = add i32 %537, %202
  %539 = sub i32 %538, %213
  %540 = add i32 %539, %220
  %541 = sub i32 %540, %228
  %542 = sub i32 %541, %230
  %543 = add i32 %542, %248
  %544 = add i32 %543, %271
  %545 = add i32 %544, %272
  %546 = sub i32 %545, %274
  %547 = sub i32 %546, %282
  %548 = sub i32 %547, %298
  %549 = add i32 %548, %300
  %550 = sub i32 %549, %304
  %551 = add i32 %550, %306
  %552 = add i32 %551, %308
  %553 = add i32 %552, %310
  %554 = add i32 %553, %311
  %555 = add i32 %554, %313
  %556 = sub i32 %555, %24
  %557 = sub i32 %556, %137
  %558 = add i32 %557, %352
  %559 = add i32 %558, %13
  %560 = sub i32 %559, %17
  %561 = add i32 %560, %21
  %562 = sub i32 %561, %167
  %563 = sub i32 %562, %266
  %564 = add i32 %563, %350
  %565 = add i32 %564, %346
  %566 = add i32 %565, %338
  %567 = icmp eq i32 %566, %10
  %568 = select i1 %567, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %569 = tail call i32 @puts(i8* nonnull dereferenceable(1) %568)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
