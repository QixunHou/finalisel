; ModuleID = '../.././c_source_file/1162_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1162_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = or i32 %5, %1
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %2
  %9 = and i32 %8, %0
  %10 = xor i32 %0, -1
  %11 = or i32 %7, %2
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %0
  %14 = xor i32 %9, %13
  %15 = or i32 %5, %7
  %16 = xor i32 %2, -1
  %17 = and i32 %1, %0
  %18 = or i32 %17, %16
  %19 = xor i32 %2, %1
  %20 = or i32 %19, %0
  %21 = xor i32 %9, %20
  %22 = xor i32 %19, -1
  %23 = xor i32 %22, %0
  %24 = shl i32 %4, 1
  %25 = xor i32 %20, -1
  %26 = or i32 %9, %25
  %27 = and i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %10
  %30 = xor i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %4, %31
  %33 = and i32 %16, %0
  %34 = or i32 %16, %1
  %35 = xor i32 %33, %34
  %36 = xor i32 %34, %0
  %37 = shl i32 %36, 1
  %38 = or i32 %19, %10
  %39 = and i32 %16, %1
  %40 = xor i32 %39, -1
  %41 = and i32 %40, %0
  %42 = and i32 %19, %0
  %43 = shl i32 %42, 1
  %44 = and i32 %7, %0
  %45 = xor i32 %44, %28
  %46 = and i32 %2, %0
  %47 = xor i32 %46, -1
  %48 = and i32 %47, %31
  %49 = or i32 %7, %0
  %50 = and i32 %49, %5
  %51 = or i32 %2, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = xor i32 %54, %2
  %56 = or i32 %2, %1
  %57 = xor i32 %56, -1
  %58 = xor i32 %57, %0
  %59 = shl i32 %58, 2
  %60 = xor i32 %44, -1
  %61 = and i32 %4, %60
  %62 = and i32 %16, %60
  %63 = and i32 %8, %10
  %64 = xor i32 %38, -1
  %65 = or i32 %63, %64
  %66 = and i32 %27, %10
  %67 = and i32 %56, %0
  %68 = xor i32 %66, -1
  %69 = xor i32 %67, %68
  %70 = and i32 %51, %31
  %71 = or i32 %57, %10
  %72 = and i32 %40, %10
  %73 = xor i32 %49, -1
  %74 = or i32 %5, %73
  %75 = xor i32 %46, %40
  %76 = and i32 %4, %30
  %77 = and i32 %5, %7
  %78 = xor i32 %49, %2
  %79 = or i32 %17, %52
  %80 = xor i32 %56, %17
  %81 = xor i32 %33, -1
  %82 = xor i32 %81, %1
  %83 = or i32 %46, %7
  %84 = or i32 %46, %57
  %85 = and i32 %47, %1
  %86 = shl i32 %20, 1
  %87 = and i32 %19, %10
  %88 = or i32 %4, %7
  %89 = shl i32 %88, 1
  %90 = or i32 %46, %30
  %91 = or i32 %4, %31
  %92 = add i32 %4, 1
  %93 = or i32 %31, %2
  %94 = shl i32 %93, 1
  %95 = xor i32 %44, %40
  %96 = add i32 %0, 1
  %97 = xor i32 %34, -1
  %98 = or i32 %33, %97
  %99 = shl i32 %98, 1
  %100 = or i32 %16, %0
  %101 = and i32 %100, %1
  %102 = xor i32 %51, %1
  %103 = and i32 %27, %0
  %104 = and i32 %56, %10
  %105 = or i32 %103, %104
  %106 = and i32 %60, %2
  %107 = or i32 %40, %10
  %108 = xor i32 %100, -1
  %109 = xor i32 %108, %1
  %110 = and i32 %53, %22
  %111 = shl i32 %110, 2
  %112 = or i32 %44, %5
  %113 = shl i32 %112, 1
  %114 = xor i32 %17, -1
  %115 = and i32 %22, %114
  %116 = shl i32 %115, 1
  %117 = or i32 %52, %7
  %118 = or i32 %46, %31
  %119 = and i32 %16, %114
  %120 = or i32 %54, %2
  %121 = and i32 %5, %1
  %122 = or i32 %4, %17
  %123 = or i32 %30, %5
  %124 = and i32 %19, %114
  %125 = add i32 %30, 1
  %126 = and i32 %5, %60
  %127 = xor i32 %100, %1
  %128 = shl i32 %127, 1
  %129 = or i32 %34, %10
  %130 = or i32 %27, %10
  %131 = or i32 %17, %22
  %132 = shl i32 %114, 1
  %133 = or i32 %56, %10
  %134 = or i32 %30, %16
  %135 = or i32 %108, %1
  %136 = and i32 %100, %31
  %137 = shl i32 %136, 1
  %138 = or i32 %56, %0
  %139 = or i32 %39, %0
  %140 = and i32 %28, %0
  %141 = xor i32 %42, %68
  %142 = and i32 %81, %1
  %143 = or i32 %44, %22
  %144 = add i32 %56, 1
  %145 = or i32 %27, %0
  %146 = or i32 %28, %0
  %147 = or i32 %46, %39
  %148 = or i32 %16, %73
  %149 = or i32 %16, %54
  %150 = xor i32 %56, %0
  %151 = xor i32 %150, -1
  %152 = xor i32 %103, %151
  %153 = or i32 %30, %2
  %154 = or i32 %22, %73
  %155 = and i32 %22, %60
  %156 = xor i32 %46, %53
  %157 = and i32 %51, %30
  %158 = or i32 %17, %5
  %159 = xor i32 %53, %2
  %160 = or i32 %19, %44
  %161 = or i32 %57, %0
  %162 = xor i32 %46, %1
  %163 = or i32 %46, %54
  %164 = and i32 %114, %2
  %165 = and i32 %16, %31
  %166 = and i32 %100, %7
  %167 = or i32 %40, %0
  %168 = and i32 %11, %0
  %169 = or i32 %63, %168
  %170 = xor i32 %19, %0
  %171 = xor i32 %170, -1
  %172 = xor i32 %9, %171
  %173 = or i32 %66, %42
  %174 = or i32 %33, %31
  %175 = or i32 %46, %1
  %176 = or i32 %17, %2
  %177 = or i32 %16, %31
  %178 = and i32 %28, %10
  %179 = or i32 %73, %2
  %180 = and i32 %30, %81
  %181 = or i32 %39, %44
  %182 = and i32 %49, %22
  %183 = xor i32 %103, %170
  %184 = or i32 %17, %108
  %185 = or i32 %39, %10
  %186 = or i32 %52, %1
  %187 = xor i32 %11, %10
  %188 = xor i32 %187, %9
  %189 = and i32 %4, %49
  %190 = or i32 %4, %73
  %191 = or i32 %22, %10
  %192 = xor i32 %33, %1
  %193 = or i32 %19, %17
  %194 = or i32 %30, %52
  %195 = and i32 %100, %30
  %196 = and i32 %53, %16
  %197 = xor i32 %60, %2
  %198 = and i32 %81, %31
  %199 = xor i32 %168, 2147483647
  %200 = xor i32 %199, %63
  %201 = shl i32 %200, 1
  %202 = or i32 %44, %2
  %203 = add i32 %34, 1
  %204 = or i32 %4, %44
  %205 = xor i32 %63, %38
  %206 = or i32 %97, %10
  %207 = or i32 %33, %27
  %208 = shl i32 %2, 1
  %209 = or i32 %108, %7
  %210 = or i32 %9, %170
  %211 = or i32 %19, %54
  %212 = or i32 %22, %54
  %213 = or i32 %34, %0
  %214 = xor i32 %46, %49
  %215 = add i32 %44, 1
  %216 = xor i32 %33, %28
  %217 = and i32 %34, %0
  %218 = and i32 %4, %1
  %219 = or i32 %4, %54
  %220 = or i32 %30, %108
  %221 = or i32 %44, %16
  %222 = and i32 %19, %60
  %223 = shl i32 %222, 1
  %224 = or i32 %103, %171
  %225 = or i32 %52, %31
  %226 = or i32 %46, %73
  %227 = and i32 %47, %7
  %228 = xor i32 %40, %0
  %229 = and i32 %51, %7
  %230 = xor i32 %28, %0
  %231 = xor i32 %52, %1
  %232 = or i32 %33, %1
  %233 = shl i32 %19, 1
  %234 = or i32 %5, %31
  %235 = shl i32 %234, 2
  %236 = or i32 %66, %67
  %237 = or i32 %17, %97
  %238 = and i32 %31, %2
  %239 = xor i32 %44, %2
  %240 = and i32 %57, %10
  %241 = and i32 %39, %10
  %242 = mul i32 %241, -23
  %243 = and i32 %57, %0
  %244 = mul i32 %243, -14
  %245 = and i32 %39, %0
  %246 = shl i32 %245, 2
  %247 = and i32 %97, %10
  %248 = mul i32 %66, -18
  %249 = and i32 %97, %0
  %250 = mul i32 %249, 21
  %251 = mul i32 %103, -20
  %252 = add i32 %148, %153
  %253 = add i32 %252, %27
  %254 = add i32 %253, %52
  %255 = add i32 %254, %231
  %256 = add i32 %255, %230
  %257 = add i32 %256, %229
  %258 = add i32 %257, %220
  %259 = add i32 %258, %217
  %260 = add i32 %259, %213
  %261 = add i32 %260, %206
  %262 = add i32 %261, %156
  %263 = add i32 %262, %155
  %264 = add i32 %263, %142
  %265 = add i32 %264, %133
  %266 = add i32 %265, %129
  %267 = add i32 %266, %122
  %268 = add i32 %267, %76
  %269 = add i32 %268, %172
  %270 = shl i32 %269, 1
  %271 = add i32 %160, %197
  %272 = sub i32 %150, %271
  %273 = sub i32 %272, %95
  %274 = add i32 %273, %48
  %275 = mul i32 %274, 5
  %276 = sub i32 %240, %247
  %277 = mul i32 %276, 10
  %278 = sub i32 %177, %227
  %279 = mul i32 %278, 3
  %280 = add i32 %96, %0
  %281 = add i32 %280, %1
  %282 = sub i32 %281, %17
  %283 = add i32 %282, %125
  %284 = sub i32 %283, %44
  %285 = sub i32 %284, %49
  %286 = add i32 %285, %215
  %287 = sub i32 %286, %18
  %288 = sub i32 %287, %55
  %289 = add i32 %288, %62
  %290 = add i32 %289, %78
  %291 = add i32 %290, %92
  %292 = sub i32 %291, %46
  %293 = add i32 %292, %106
  %294 = add i32 %293, %119
  %295 = add i32 %294, %120
  %296 = sub i32 %295, %132
  %297 = sub i32 %296, %134
  %298 = add i32 %297, %39
  %299 = add i32 %298, %144
  %300 = add i32 %299, %149
  %301 = add i32 %300, %81
  %302 = add i32 %301, %159
  %303 = sub i32 %302, %164
  %304 = sub i32 %303, %165
  %305 = add i32 %304, %176
  %306 = add i32 %305, %179
  %307 = add i32 %306, %22
  %308 = add i32 %307, %47
  %309 = sub i32 %308, %196
  %310 = sub i32 %309, %202
  %311 = add i32 %310, %108
  %312 = add i32 %311, %203
  %313 = sub i32 %312, %208
  %314 = sub i32 %313, %100
  %315 = add i32 %314, %221
  %316 = add i32 %315, %51
  %317 = sub i32 %316, %33
  %318 = add i32 %317, %238
  %319 = add i32 %318, %239
  %320 = sub i32 %319, %15
  %321 = add i32 %320, %23
  %322 = sub i32 %321, %24
  %323 = sub i32 %322, %29
  %324 = add i32 %323, %32
  %325 = sub i32 %324, %35
  %326 = add i32 %325, %38
  %327 = sub i32 %326, %41
  %328 = sub i32 %327, %45
  %329 = add i32 %328, %50
  %330 = add i32 %329, %61
  %331 = sub i32 %330, %70
  %332 = sub i32 %331, %71
  %333 = sub i32 %332, %72
  %334 = sub i32 %333, %74
  %335 = add i32 %334, %75
  %336 = sub i32 %335, %77
  %337 = add i32 %336, %79
  %338 = sub i32 %337, %80
  %339 = sub i32 %338, %82
  %340 = sub i32 %339, %83
  %341 = add i32 %340, %84
  %342 = sub i32 %341, %85
  %343 = add i32 %342, %87
  %344 = add i32 %343, %90
  %345 = add i32 %344, %91
  %346 = sub i32 %345, %94
  %347 = add i32 %346, %101
  %348 = add i32 %347, %102
  %349 = add i32 %348, %107
  %350 = add i32 %349, %109
  %351 = sub i32 %350, %117
  %352 = add i32 %351, %118
  %353 = sub i32 %352, %121
  %354 = sub i32 %353, %123
  %355 = add i32 %354, %124
  %356 = add i32 %355, %126
  %357 = add i32 %356, %130
  %358 = add i32 %357, %131
  %359 = add i32 %358, %135
  %360 = sub i32 %359, %138
  %361 = add i32 %360, %139
  %362 = add i32 %361, %140
  %363 = add i32 %362, %143
  %364 = sub i32 %363, %145
  %365 = add i32 %364, %146
  %366 = sub i32 %365, %147
  %367 = add i32 %366, %154
  %368 = add i32 %367, %157
  %369 = sub i32 %368, %158
  %370 = sub i32 %369, %161
  %371 = sub i32 %370, %162
  %372 = sub i32 %371, %163
  %373 = add i32 %372, %166
  %374 = add i32 %373, %167
  %375 = sub i32 %374, %174
  %376 = sub i32 %375, %175
  %377 = add i32 %376, %178
  %378 = sub i32 %377, %180
  %379 = add i32 %378, %181
  %380 = sub i32 %379, %182
  %381 = sub i32 %380, %184
  %382 = sub i32 %381, %185
  %383 = add i32 %382, %186
  %384 = add i32 %383, %189
  %385 = sub i32 %384, %190
  %386 = sub i32 %385, %191
  %387 = add i32 %386, %192
  %388 = add i32 %387, %193
  %389 = add i32 %388, %194
  %390 = add i32 %389, %195
  %391 = sub i32 %390, %198
  %392 = add i32 %391, %204
  %393 = add i32 %392, %207
  %394 = sub i32 %393, %209
  %395 = sub i32 %394, %211
  %396 = add i32 %395, %212
  %397 = sub i32 %396, %214
  %398 = sub i32 %397, %216
  %399 = add i32 %398, %218
  %400 = sub i32 %399, %219
  %401 = add i32 %400, %170
  %402 = add i32 %401, %225
  %403 = add i32 %402, %226
  %404 = sub i32 %403, %228
  %405 = add i32 %404, %232
  %406 = sub i32 %405, %233
  %407 = add i32 %406, %237
  %408 = add i32 %407, %14
  %409 = add i32 %408, %21
  %410 = sub i32 %409, %26
  %411 = sub i32 %410, %37
  %412 = sub i32 %411, %43
  %413 = sub i32 %412, %59
  %414 = sub i32 %413, %65
  %415 = add i32 %414, %69
  %416 = sub i32 %415, %86
  %417 = sub i32 %416, %89
  %418 = sub i32 %417, %99
  %419 = add i32 %418, %105
  %420 = sub i32 %419, %111
  %421 = sub i32 %420, %113
  %422 = sub i32 %421, %116
  %423 = sub i32 %422, %128
  %424 = sub i32 %423, %137
  %425 = add i32 %424, %141
  %426 = sub i32 %425, %152
  %427 = add i32 %426, %169
  %428 = add i32 %427, %173
  %429 = sub i32 %428, %183
  %430 = add i32 %429, %188
  %431 = add i32 %430, %205
  %432 = add i32 %431, %210
  %433 = sub i32 %432, %223
  %434 = sub i32 %433, %224
  %435 = add i32 %434, %235
  %436 = add i32 %435, %236
  %437 = add i32 %436, %242
  %438 = add i32 %437, %244
  %439 = sub i32 %438, %246
  %440 = add i32 %439, %248
  %441 = add i32 %440, %250
  %442 = add i32 %441, %251
  %443 = add i32 %442, %277
  %444 = add i32 %443, %279
  %445 = sub i32 %444, %201
  %446 = add i32 %445, %275
  %447 = add i32 %446, %270
  %448 = icmp eq i32 %6, %447
  %449 = select i1 %448, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %450 = tail call i32 @puts(i8* nonnull dereferenceable(1) %449)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
