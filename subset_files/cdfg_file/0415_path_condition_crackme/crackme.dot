digraph "DFG for'crackme' function" {
	Node0x1152b20[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x1152bc0[shape=record, label="  %4 = mul i32 %3, -4"];
	Node0x1152c80[shape=record, label="  %5 = sub i32 %4, %0"];
	Node0x1152cf0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1152d60[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0x1152dd0[shape=record, label="  %8 = sub i32 %7, %6"];
	Node0x1152e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1152eb0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1152f20[shape=record, label="  %11 = add i32 %8, %10"];
	Node0x1152f90[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x1153000[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x11530a0[shape=record, label="  %14 = mul i32 %13, -5"];
	Node0x1153110[shape=record, label="  %15 = xor i32 %1, -1"];
	Node0x1153180[shape=record, label="  %16 = and i32 %3, %1"];
	Node0x1153220[shape=record, label="  %17 = mul i32 %16, -6"];
	Node0x1153290[shape=record, label="  %18 = and i32 %15, %0"];
	Node0x1153330[shape=record, label="  %19 = mul i32 %9, -3"];
	Node0x11533a0[shape=record, label="  %20 = sub i32 %11, %18"];
	Node0x1153410[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x1153480[shape=record, label="  %22 = add i32 %21, %17"];
	Node0x11534f0[shape=record, label="  %23 = add i32 %22, %19"];
	Node0x1153560[shape=record, label="  %24 = icmp eq i32 %5, %23"];
	Node0x10f3268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1153a00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1153a50[shape=record, label="  ret void"];
	Node0x1152b20 -> Node0x1152bc0;
	Node0x1152bc0 -> Node0x1152c80;
	Node0x1152c80 -> Node0x1152cf0;
	Node0x1152cf0 -> Node0x1152d60;
	Node0x1152d60 -> Node0x1152dd0;
	Node0x1152dd0 -> Node0x1152e40;
	Node0x1152e40 -> Node0x1152eb0;
	Node0x1152eb0 -> Node0x1152f20;
	Node0x1152f20 -> Node0x1152f90;
	Node0x1152f90 -> Node0x1153000;
	Node0x1153000 -> Node0x11530a0;
	Node0x11530a0 -> Node0x1153110;
	Node0x1153110 -> Node0x1153180;
	Node0x1153180 -> Node0x1153220;
	Node0x1153220 -> Node0x1153290;
	Node0x1153290 -> Node0x1153330;
	Node0x1153330 -> Node0x11533a0;
	Node0x11533a0 -> Node0x1153410;
	Node0x1153410 -> Node0x1153480;
	Node0x1153480 -> Node0x11534f0;
	Node0x11534f0 -> Node0x1153560;
	Node0x1153560 -> Node0x10f3268;
	Node0x10f3268 -> Node0x1153a00;
	Node0x1153a00 -> Node0x1153a50;
edge [color=red]
	Node0x1152b20 -> Node0x1152bc0;
	Node0x1152bc0 -> Node0x1152c80;
	Node0x1152d60 -> Node0x1152dd0;
	Node0x1152cf0 -> Node0x1152dd0;
	Node0x1152e40 -> Node0x1152eb0;
	Node0x1152dd0 -> Node0x1152f20;
	Node0x1152eb0 -> Node0x1152f20;
	Node0x1152f90 -> Node0x1153000;
	Node0x1153000 -> Node0x11530a0;
	Node0x1152b20 -> Node0x1153180;
	Node0x1153180 -> Node0x1153220;
	Node0x1153110 -> Node0x1153290;
	Node0x1152e40 -> Node0x1153330;
	Node0x1152f20 -> Node0x11533a0;
	Node0x1153290 -> Node0x11533a0;
	Node0x11533a0 -> Node0x1153410;
	Node0x11530a0 -> Node0x1153410;
	Node0x1153410 -> Node0x1153480;
	Node0x1153220 -> Node0x1153480;
	Node0x1153480 -> Node0x11534f0;
	Node0x1153330 -> Node0x11534f0;
	Node0x1152c80 -> Node0x1153560;
	Node0x11534f0 -> Node0x1153560;
	Node0x1153560 -> Node0x10f3268;
	Node0x10f3268 -> Node0x1153a00;
}
