digraph "DFG for'crackme' function" {
	Node0x928510[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x928580[shape=record, label="  %4 = sub i32 %0, %3"];
	Node0x928c50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x928cc0[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x928d30[shape=record, label="  %7 = and i32 %5, %0"];
	Node0x928da0[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x928e40[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x928eb0[shape=record, label="  %10 = xor i32 %3, -1"];
	Node0x928f50[shape=record, label="  %11 = xor i32 %9, -2"];
	Node0x928fc0[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0x929030[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x9290d0[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x929140[shape=record, label="  %15 = add i32 %7, %12"];
	Node0x9291e0[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x929250[shape=record, label="  %17 = add i32 %0, 2"];
	Node0x9292c0[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0x929330[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x9293a0[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x929410[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x929480[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x9294f0[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x929560[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x9295d0[shape=record, label="  %25 = icmp eq i32 %4, %24"];
	Node0x8c9268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x929a70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x929ac0[shape=record, label="  ret void"];
	Node0x928510 -> Node0x928580;
	Node0x928580 -> Node0x928c50;
	Node0x928c50 -> Node0x928cc0;
	Node0x928cc0 -> Node0x928d30;
	Node0x928d30 -> Node0x928da0;
	Node0x928da0 -> Node0x928e40;
	Node0x928e40 -> Node0x928eb0;
	Node0x928eb0 -> Node0x928f50;
	Node0x928f50 -> Node0x928fc0;
	Node0x928fc0 -> Node0x929030;
	Node0x929030 -> Node0x9290d0;
	Node0x9290d0 -> Node0x929140;
	Node0x929140 -> Node0x9291e0;
	Node0x9291e0 -> Node0x929250;
	Node0x929250 -> Node0x9292c0;
	Node0x9292c0 -> Node0x929330;
	Node0x929330 -> Node0x9293a0;
	Node0x9293a0 -> Node0x929410;
	Node0x929410 -> Node0x929480;
	Node0x929480 -> Node0x9294f0;
	Node0x9294f0 -> Node0x929560;
	Node0x929560 -> Node0x9295d0;
	Node0x9295d0 -> Node0x8c9268;
	Node0x8c9268 -> Node0x929a70;
	Node0x929a70 -> Node0x929ac0;
edge [color=red]
	Node0x928510 -> Node0x928580;
	Node0x928c50 -> Node0x928cc0;
	Node0x928c50 -> Node0x928d30;
	Node0x928da0 -> Node0x928e40;
	Node0x928510 -> Node0x928eb0;
	Node0x928e40 -> Node0x928f50;
	Node0x928cc0 -> Node0x928fc0;
	Node0x929030 -> Node0x9290d0;
	Node0x928d30 -> Node0x929140;
	Node0x928fc0 -> Node0x929140;
	Node0x929140 -> Node0x9291e0;
	Node0x929250 -> Node0x9292c0;
	Node0x928cc0 -> Node0x9292c0;
	Node0x9292c0 -> Node0x929330;
	Node0x928d30 -> Node0x929330;
	Node0x929330 -> Node0x9293a0;
	Node0x928eb0 -> Node0x9293a0;
	Node0x9293a0 -> Node0x929410;
	Node0x928e40 -> Node0x929410;
	Node0x929410 -> Node0x929480;
	Node0x9290d0 -> Node0x929480;
	Node0x929480 -> Node0x9294f0;
	Node0x928f50 -> Node0x9294f0;
	Node0x9294f0 -> Node0x929560;
	Node0x9291e0 -> Node0x929560;
	Node0x928580 -> Node0x9295d0;
	Node0x929560 -> Node0x9295d0;
	Node0x9295d0 -> Node0x8c9268;
	Node0x8c9268 -> Node0x929a70;
}
