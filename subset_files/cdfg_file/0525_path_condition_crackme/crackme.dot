digraph "DFG for'crackme' function" {
	Node0xd79b60[shape=record, label="  %5 = and i32 %2, %1"];
	Node0xd7a1e0[shape=record, label="  %6 = xor i32 %3, -1"];
	Node0xd7a250[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0xd7a2c0[shape=record, label="  %8 = sub i32 %6, %5"];
	Node0xd7a330[shape=record, label="  %9 = add i32 %8, %7"];
	Node0xd7a3a0[shape=record, label="  %10 = or i32 %2, %1"];
	Node0xd7a410[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0xd7a4b0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0xd7a550[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xd7a5c0[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0xd7a630[shape=record, label="  %15 = add i32 %2, 1"];
	Node0xd7a6a0[shape=record, label="  %16 = and i32 %14, %1"];
	Node0xd7a710[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0xd7a7b0[shape=record, label="  %18 = mul i32 %17, -5"];
	Node0xd7a850[shape=record, label="  %19 = shl i32 %10, 2"];
	Node0xd7a8f0[shape=record, label="  %20 = xor i32 %19, -4"];
	Node0xd7a990[shape=record, label="  %21 = xor i32 %1, 2147483647"];
	Node0xd7aa00[shape=record, label="  %22 = and i32 %21, %2"];
	Node0xd7aa70[shape=record, label="  %23 = xor i32 %0, -1"];
	Node0xd7aae0[shape=record, label="  %24 = and i32 %23, %3"];
	Node0xd7ab50[shape=record, label="  %25 = xor i32 %24, -1"];
	Node0xd7abc0[shape=record, label="  %26 = and i32 %6, %0"];
	Node0xd7ac60[shape=record, label="  %27 = mul i32 %24, 3"];
	Node0xd7acd0[shape=record, label="  %28 = and i32 %3, %0"];
	Node0xd7ad40[shape=record, label="  %29 = add i32 %22, %2"];
	Node0xd7adb0[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0xd7ae20[shape=record, label="  %31 = sub i32 %0, %1"];
	Node0xd7ae90[shape=record, label="  %32 = add i32 %31, %15"];
	Node0xd7b110[shape=record, label="  %33 = add i32 %32, %10"];
	Node0xd7b180[shape=record, label="  %34 = add i32 %33, %16"];
	Node0xd7b1f0[shape=record, label="  %35 = sub i32 %34, %3"];
	Node0xd7b260[shape=record, label="  %36 = add i32 %35, %18"];
	Node0xd7b2d0[shape=record, label="  %37 = sub i32 %36, %7"];
	Node0xd7b340[shape=record, label="  %38 = add i32 %37, %25"];
	Node0xd7b3b0[shape=record, label="  %39 = add i32 %38, %26"];
	Node0xd7b420[shape=record, label="  %40 = sub i32 %39, %28"];
	Node0xd7b490[shape=record, label="  %41 = add i32 %40, %13"];
	Node0xd7b500[shape=record, label="  %42 = add i32 %41, %20"];
	Node0xd7b570[shape=record, label="  %43 = add i32 %42, %27"];
	Node0xd7b5e0[shape=record, label="  %44 = add i32 %43, %30"];
	Node0xd7b650[shape=record, label="  %45 = icmp eq i32 %9, %44"];
	Node0xd1a268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xd7baf0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0xd7bb40[shape=record, label="  ret void"];
	Node0xd79b60 -> Node0xd7a1e0;
	Node0xd7a1e0 -> Node0xd7a250;
	Node0xd7a250 -> Node0xd7a2c0;
	Node0xd7a2c0 -> Node0xd7a330;
	Node0xd7a330 -> Node0xd7a3a0;
	Node0xd7a3a0 -> Node0xd7a410;
	Node0xd7a410 -> Node0xd7a4b0;
	Node0xd7a4b0 -> Node0xd7a550;
	Node0xd7a550 -> Node0xd7a5c0;
	Node0xd7a5c0 -> Node0xd7a630;
	Node0xd7a630 -> Node0xd7a6a0;
	Node0xd7a6a0 -> Node0xd7a710;
	Node0xd7a710 -> Node0xd7a7b0;
	Node0xd7a7b0 -> Node0xd7a850;
	Node0xd7a850 -> Node0xd7a8f0;
	Node0xd7a8f0 -> Node0xd7a990;
	Node0xd7a990 -> Node0xd7aa00;
	Node0xd7aa00 -> Node0xd7aa70;
	Node0xd7aa70 -> Node0xd7aae0;
	Node0xd7aae0 -> Node0xd7ab50;
	Node0xd7ab50 -> Node0xd7abc0;
	Node0xd7abc0 -> Node0xd7ac60;
	Node0xd7ac60 -> Node0xd7acd0;
	Node0xd7acd0 -> Node0xd7ad40;
	Node0xd7ad40 -> Node0xd7adb0;
	Node0xd7adb0 -> Node0xd7ae20;
	Node0xd7ae20 -> Node0xd7ae90;
	Node0xd7ae90 -> Node0xd7b110;
	Node0xd7b110 -> Node0xd7b180;
	Node0xd7b180 -> Node0xd7b1f0;
	Node0xd7b1f0 -> Node0xd7b260;
	Node0xd7b260 -> Node0xd7b2d0;
	Node0xd7b2d0 -> Node0xd7b340;
	Node0xd7b340 -> Node0xd7b3b0;
	Node0xd7b3b0 -> Node0xd7b420;
	Node0xd7b420 -> Node0xd7b490;
	Node0xd7b490 -> Node0xd7b500;
	Node0xd7b500 -> Node0xd7b570;
	Node0xd7b570 -> Node0xd7b5e0;
	Node0xd7b5e0 -> Node0xd7b650;
	Node0xd7b650 -> Node0xd1a268;
	Node0xd1a268 -> Node0xd7baf0;
	Node0xd7baf0 -> Node0xd7bb40;
edge [color=red]
	Node0xd7a1e0 -> Node0xd7a2c0;
	Node0xd79b60 -> Node0xd7a2c0;
	Node0xd7a2c0 -> Node0xd7a330;
	Node0xd7a250 -> Node0xd7a330;
	Node0xd7a410 -> Node0xd7a4b0;
	Node0xd7a4b0 -> Node0xd7a550;
	Node0xd7a5c0 -> Node0xd7a6a0;
	Node0xd7a6a0 -> Node0xd7a710;
	Node0xd7a710 -> Node0xd7a7b0;
	Node0xd7a3a0 -> Node0xd7a850;
	Node0xd7a850 -> Node0xd7a8f0;
	Node0xd7a990 -> Node0xd7aa00;
	Node0xd7aa70 -> Node0xd7aae0;
	Node0xd7aae0 -> Node0xd7ab50;
	Node0xd7a1e0 -> Node0xd7abc0;
	Node0xd7aae0 -> Node0xd7ac60;
	Node0xd7aa00 -> Node0xd7ad40;
	Node0xd7ad40 -> Node0xd7adb0;
	Node0xd7ae20 -> Node0xd7ae90;
	Node0xd7a630 -> Node0xd7ae90;
	Node0xd7ae90 -> Node0xd7b110;
	Node0xd7a3a0 -> Node0xd7b110;
	Node0xd7b110 -> Node0xd7b180;
	Node0xd7a6a0 -> Node0xd7b180;
	Node0xd7b180 -> Node0xd7b1f0;
	Node0xd7b1f0 -> Node0xd7b260;
	Node0xd7a7b0 -> Node0xd7b260;
	Node0xd7b260 -> Node0xd7b2d0;
	Node0xd7a250 -> Node0xd7b2d0;
	Node0xd7b2d0 -> Node0xd7b340;
	Node0xd7ab50 -> Node0xd7b340;
	Node0xd7b340 -> Node0xd7b3b0;
	Node0xd7abc0 -> Node0xd7b3b0;
	Node0xd7b3b0 -> Node0xd7b420;
	Node0xd7acd0 -> Node0xd7b420;
	Node0xd7b420 -> Node0xd7b490;
	Node0xd7a550 -> Node0xd7b490;
	Node0xd7b490 -> Node0xd7b500;
	Node0xd7a8f0 -> Node0xd7b500;
	Node0xd7b500 -> Node0xd7b570;
	Node0xd7ac60 -> Node0xd7b570;
	Node0xd7b570 -> Node0xd7b5e0;
	Node0xd7adb0 -> Node0xd7b5e0;
	Node0xd7a330 -> Node0xd7b650;
	Node0xd7b5e0 -> Node0xd7b650;
	Node0xd7b650 -> Node0xd1a268;
	Node0xd1a268 -> Node0xd7baf0;
}
