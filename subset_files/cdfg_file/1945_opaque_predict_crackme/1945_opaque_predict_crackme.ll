; ModuleID = '../.././c_source_file/1945_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1945_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = or i32 %2, %1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %9, %12
  %14 = xor i32 %1, -1
  %15 = and i32 %14, %0
  %16 = add i32 %13, %15
  %17 = and i32 %4, %3
  %18 = xor i32 %5, -1
  %19 = or i32 %18, %3
  %20 = xor i32 %19, -1
  %21 = or i32 %17, %20
  %22 = sub i32 %21, %16
  %23 = or i32 %18, %4
  %24 = xor i32 %23, -1
  %25 = xor i32 %4, %3
  %26 = or i32 %25, %24
  %27 = shl i32 %26, 1
  %28 = sub i32 %22, %27
  %29 = xor i32 %2, -1
  %30 = or i32 %14, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %29, %31
  %33 = and i32 %29, %0
  %34 = xor i32 %33, %14
  %35 = or i32 %15, %2
  %36 = shl i32 %35, 1
  %37 = xor i32 %2, %0
  %38 = or i32 %37, %15
  %39 = xor i32 %1, %0
  %40 = or i32 %37, %39
  %41 = shl i32 %40, 1
  %42 = and i32 %2, %0
  %43 = shl i32 %42, 1
  %44 = xor i32 %43, -2
  %45 = xor i32 %2, %1
  %46 = or i32 %45, %15
  %47 = and i32 %10, %7
  %48 = xor i32 %15, -1
  %49 = xor i32 %45, -1
  %50 = and i32 %49, %48
  %51 = or i32 %1, %0
  %52 = and i32 %51, %49
  %53 = or i32 %10, %0
  %54 = and i32 %14, %2
  %55 = and i32 %54, %0
  %56 = xor i32 %45, 2147483647
  %57 = xor i32 %56, %0
  %58 = xor i32 %57, %55
  %59 = xor i32 %39, -1
  %60 = and i32 %37, %59
  %61 = xor i32 %51, -1
  %62 = or i32 %42, %61
  %63 = xor i32 %10, -1
  %64 = or i32 %63, %0
  %65 = or i32 %29, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %8, %7
  %68 = and i32 %54, %7
  %69 = or i32 %14, %2
  %70 = and i32 %69, %0
  %71 = or i32 %68, %70
  %72 = xor i32 %37, -1
  %73 = or i32 %15, %72
  %74 = or i32 %29, %0
  %75 = and i32 %1, %0
  %76 = or i32 %75, %49
  %77 = or i32 %37, %31
  %78 = shl i32 %51, 1
  %79 = or i32 %29, %61
  %80 = or i32 %31, %2
  %81 = and i32 %49, %0
  %82 = xor i32 %8, -1
  %83 = or i32 %82, %7
  %84 = xor i32 %10, %0
  %85 = shl i32 %84, 1
  %86 = xor i32 %33, %82
  %87 = xor i32 %69, %7
  %88 = xor i32 %87, %55
  %89 = or i32 %15, %49
  %90 = or i32 %33, %1
  %91 = or i32 %61, %2
  %92 = or i32 %72, %31
  %93 = and i32 %45, %51
  %94 = or i32 %65, %7
  %95 = and i32 %82, %7
  %96 = xor i32 %42, %30
  %97 = or i32 %33, %59
  %98 = or i32 %2, %0
  %99 = and i32 %98, %14
  %100 = and i32 %29, %1
  %101 = xor i32 %100, -1
  %102 = or i32 %101, %0
  %103 = xor i32 %51, %2
  %104 = shl i32 %103, 1
  %105 = or i32 %33, %39
  %106 = xor i32 %15, %2
  %107 = or i32 %8, %0
  %108 = or i32 %42, %59
  %109 = shl i32 %108, 1
  %110 = or i32 %82, %0
  %111 = xor i32 %75, -1
  %112 = and i32 %8, %0
  %113 = or i32 %56, %0
  %114 = xor i32 %113, %112
  %115 = shl i32 %114, 1
  %116 = and i32 %101, %0
  %117 = xor i32 %74, -1
  %118 = or i32 %117, %1
  %119 = and i32 %37, %51
  %120 = or i32 %42, %1
  %121 = shl i32 %120, 1
  %122 = or i32 %45, %31
  %123 = xor i32 %98, %14
  %124 = and i32 %72, %111
  %125 = and i32 %29, %48
  %126 = and i32 %63, %7
  %127 = mul i32 %126, -6
  %128 = and i32 %100, %7
  %129 = and i32 %63, %0
  %130 = shl i32 %129, 3
  %131 = and i32 %100, %0
  %132 = shl i32 %131, 1
  %133 = and i32 %66, %7
  %134 = and i32 %66, %0
  %135 = mul i32 %134, -9
  %136 = mul i32 %112, -11
  %137 = xor i32 %3, -1
  %138 = and i32 %137, %5
  %139 = and i32 %138, %4
  %140 = xor i32 %4, -1
  %141 = or i32 %137, %5
  %142 = xor i32 %141, 2147483647
  %143 = or i32 %142, %4
  %144 = xor i32 %143, %139
  %145 = shl i32 %144, 1
  %146 = and i32 %18, %3
  %147 = xor i32 %146, -1
  %148 = and i32 %5, %4
  %149 = or i32 %148, %146
  %150 = or i32 %5, %3
  %151 = and i32 %150, %140
  %152 = and i32 %25, %18
  %153 = and i32 %147, %4
  %154 = and i32 %5, %3
  %155 = and i32 %154, %140
  %156 = and i32 %150, %4
  %157 = xor i32 %155, -1
  %158 = xor i32 %156, %157
  %159 = and i32 %18, %4
  %160 = xor i32 %159, -1
  %161 = and i32 %25, %160
  %162 = or i32 %148, %3
  %163 = xor i32 %25, -1
  %164 = or i32 %18, %163
  %165 = xor i32 %148, -1
  %166 = and i32 %25, %165
  %167 = or i32 %24, %3
  %168 = or i32 %20, %140
  %169 = xor i32 %148, %147
  %170 = xor i32 %5, %3
  %171 = xor i32 %170, -1
  %172 = add i32 %170, 1
  %173 = and i32 %138, %140
  %174 = or i32 %170, %140
  %175 = xor i32 %173, %174
  %176 = or i32 %4, %3
  %177 = xor i32 %176, -1
  %178 = or i32 %148, %177
  %179 = shl i32 %165, 1
  %180 = or i32 %147, %140
  %181 = or i32 %17, %5
  %182 = or i32 %159, %25
  %183 = xor i32 %141, %4
  %184 = or i32 %139, %183
  %185 = xor i32 %5, %4
  %186 = xor i32 %185, -1
  %187 = or i32 %17, %186
  %188 = or i32 %147, %4
  %189 = and i32 %137, %4
  %190 = xor i32 %189, %5
  %191 = or i32 %25, %186
  %192 = or i32 %146, %4
  %193 = or i32 %159, %137
  %194 = or i32 %17, %18
  %195 = and i32 %160, %163
  %196 = or i32 %137, %4
  %197 = xor i32 %196, -1
  %198 = or i32 %185, %197
  %199 = xor i32 %17, -1
  %200 = or i32 %186, %163
  %201 = or i32 %20, %4
  %202 = xor i32 %154, -1
  %203 = or i32 %202, %4
  %204 = or i32 %5, %4
  %205 = xor i32 %204, -1
  %206 = or i32 %205, %3
  %207 = or i32 %186, %177
  %208 = xor i32 %17, %5
  %209 = xor i32 %196, %5
  %210 = or i32 %185, %137
  %211 = and i32 %186, %3
  %212 = xor i32 %24, %3
  %213 = or i32 %148, %197
  %214 = shl i32 %213, 1
  %215 = or i32 %146, %189
  %216 = xor i32 %150, -1
  %217 = xor i32 %216, %4
  %218 = and i32 %171, %4
  %219 = or i32 %17, %205
  %220 = xor i32 %20, %4
  %221 = xor i32 %170, %4
  %222 = xor i32 %221, -1
  %223 = xor i32 %139, %222
  %224 = and i32 %25, %5
  %225 = or i32 %148, %216
  %226 = xor i32 %23, %17
  %227 = or i32 %205, %163
  %228 = shl i32 %227, 1
  %229 = xor i32 %176, %5
  %230 = xor i32 %189, -1
  %231 = add i32 %189, 1
  %232 = xor i32 %150, %4
  %233 = xor i32 %147, %4
  %234 = and i32 %141, %4
  %235 = xor i32 %234, -1
  %236 = xor i32 %173, %235
  %237 = or i32 %154, %189
  %238 = and i32 %170, %230
  %239 = xor i32 %177, %5
  %240 = and i32 %165, %3
  %241 = or i32 %24, %163
  %242 = shl i32 %241, 1
  %243 = or i32 %171, %197
  %244 = shl i32 %243, 1
  %245 = and i32 %160, %137
  %246 = or i32 %159, %3
  %247 = and i32 %23, %3
  %248 = and i32 %185, %25
  %249 = or i32 %216, %140
  %250 = and i32 %196, %186
  %251 = xor i32 %165, %3
  %252 = xor i32 %197, %5
  %253 = shl i32 %252, 1
  %254 = add i32 %25, 1
  %255 = xor i32 %171, %4
  %256 = or i32 %173, %234
  %257 = and i32 %196, %18
  %258 = and i32 %186, %163
  %259 = and i32 %186, %137
  %260 = shl i32 %259, 1
  %261 = xor i32 %148, %3
  %262 = or i32 %171, %140
  %263 = shl i32 %262, 1
  %264 = and i32 %170, %4
  %265 = or i32 %155, %264
  %266 = or i32 %205, %137
  %267 = and i32 %154, %4
  %268 = or i32 %267, %222
  %269 = xor i32 %160, %3
  %270 = or i32 %186, %137
  %271 = or i32 %189, %5
  %272 = or i32 %159, %163
  %273 = xor i32 %204, %3
  %274 = and i32 %185, %230
  %275 = or i32 %17, %171
  %276 = or i32 %171, %177
  %277 = xor i32 %202, %4
  %278 = and i32 %19, %140
  %279 = xor i32 %264, %157
  %280 = and i32 %163, %5
  %281 = xor i32 %19, %17
  %282 = and i32 %202, %140
  %283 = or i32 %267, %232
  %284 = or i32 %18, %197
  %285 = and i32 %170, %196
  %286 = and i32 %25, %186
  %287 = xor i32 %204, %17
  %288 = and i32 %171, %230
  %289 = or i32 %185, %189
  %290 = and i32 %185, %163
  %291 = shl i32 %290, 1
  %292 = or i32 %170, %177
  %293 = or i32 %170, %197
  %294 = and i32 %186, %199
  %295 = and i32 %185, %199
  %296 = and i32 %202, %4
  %297 = and i32 %23, %25
  %298 = and i32 %171, %140
  %299 = shl i32 %298, 1
  %300 = and i32 %170, %176
  %301 = add i32 %19, 1
  %302 = or i32 %25, %205
  %303 = and i32 %19, %4
  %304 = and i32 %176, %18
  %305 = or i32 %154, %140
  %306 = and i32 %18, %199
  %307 = or i32 %186, %3
  %308 = xor i32 %174, -1
  %309 = or i32 %173, %308
  %310 = and i32 %23, %163
  %311 = or i32 %171, %4
  %312 = xor i32 %267, %311
  %313 = shl i32 %177, 1
  %314 = or i32 %185, %163
  %315 = or i32 %186, %197
  %316 = or i32 %19, %140
  %317 = or i32 %17, %216
  %318 = and i32 %176, %171
  %319 = or i32 %267, %151
  %320 = xor i32 %148, %196
  %321 = shl i32 %320, 1
  %322 = or i32 %202, %140
  %323 = and i32 %160, %3
  %324 = or i32 %185, %25
  %325 = and i32 %185, %137
  %326 = or i32 %170, %4
  %327 = xor i32 %139, %326
  %328 = xor i32 %267, -1
  %329 = xor i32 %151, %328
  %330 = or i32 %148, %163
  %331 = xor i32 %159, %19
  %332 = or i32 %189, %171
  %333 = shl i32 %332, 1
  %334 = or i32 %155, %156
  %335 = xor i32 %154, %4
  %336 = and i32 %186, %230
  %337 = and i32 %170, %199
  %338 = shl i32 %337, 1
  %339 = xor i32 %23, %3
  %340 = and i32 %204, %137
  %341 = or i32 %148, %137
  %342 = add i32 %154, 1
  %343 = or i32 %185, %3
  %344 = or i32 %189, %18
  %345 = or i32 %159, %20
  %346 = and i32 %147, %140
  %347 = and i32 %23, %137
  %348 = shl i32 %347, 2
  %349 = and i32 %165, %163
  %350 = or i32 %19, %4
  %351 = shl i32 %174, 1
  %352 = or i32 %216, %4
  %353 = xor i32 %159, %202
  %354 = and i32 %176, %186
  %355 = xor i32 %148, %176
  %356 = and i32 %204, %163
  %357 = or i32 %25, %5
  %358 = xor i32 %189, %202
  %359 = xor i32 %159, %3
  %360 = or i32 %150, %4
  %361 = or i32 %189, %186
  %362 = or i32 %185, %177
  %363 = or i32 %197, %5
  %364 = or i32 %146, %140
  %365 = or i32 %25, %18
  %366 = xor i32 %148, %150
  %367 = or i32 %150, %140
  %368 = xor i32 %183, -1
  %369 = xor i32 %139, %368
  %370 = and i32 %196, %171
  %371 = or i32 %159, %154
  %372 = and i32 %165, %137
  %373 = xor i32 %230, %5
  %374 = or i32 %177, %5
  %375 = and i32 %185, %3
  %376 = xor i32 %146, %4
  %377 = or i32 %170, %17
  %378 = xor i32 %19, %4
  %379 = and i32 %176, %5
  %380 = or i32 %18, %177
  %381 = xor i32 %232, %328
  %382 = and i32 %196, %5
  %383 = or i32 %185, %17
  %384 = shl i32 %383, 1
  %385 = and i32 %216, %140
  %386 = and i32 %146, %140
  %387 = and i32 %216, %4
  %388 = shl i32 %387, 1
  %389 = and i32 %146, %4
  %390 = shl i32 %389, 3
  %391 = and i32 %20, %140
  %392 = and i32 %20, %4
  %393 = shl i32 %392, 1
  %394 = mul i32 %267, 14
  %395 = add i32 %91, %8
  %396 = add i32 %395, %74
  %397 = sub i32 %396, %32
  %398 = add i32 %397, %122
  %399 = add i32 %398, %116
  %400 = add i32 %399, %81
  %401 = add i32 %400, %76
  %402 = add i32 %401, %62
  %403 = add i32 %402, %189
  %404 = add i32 %403, %18
  %405 = add i32 %404, %71
  %406 = add i32 %405, %373
  %407 = add i32 %406, %306
  %408 = add i32 %407, %284
  %409 = add i32 %408, %271
  %410 = add i32 %409, %224
  %411 = add i32 %410, %209
  %412 = add i32 %411, %194
  %413 = add i32 %412, %58
  %414 = add i32 %413, %341
  %415 = add i32 %414, %350
  %416 = add i32 %415, %336
  %417 = add i32 %416, %330
  %418 = add i32 %417, %316
  %419 = add i32 %418, %315
  %420 = add i32 %419, %266
  %421 = add i32 %420, %251
  %422 = add i32 %421, %250
  %423 = add i32 %422, %246
  %424 = add i32 %423, %217
  %425 = shl i32 %424, 1
  %426 = add i32 %38, %140
  %427 = add i32 %426, %208
  %428 = sub i32 %427, %162
  %429 = sub i32 %428, %385
  %430 = mul i32 %429, 5
  %431 = add i32 %23, %63
  %432 = add i32 %431, %170
  %433 = add i32 %432, %293
  %434 = shl i32 %433, 2
  %435 = add i32 %9, %133
  %436 = sub i32 %128, %435
  %437 = mul i32 %436, 7
  %438 = add i32 %391, %386
  %439 = mul i32 %438, -20
  %440 = or i32 %75, %2
  %441 = sub i32 %440, %97
  %442 = add i32 %441, %64
  %443 = sub i32 %442, %176
  %444 = add i32 %443, %294
  %445 = add i32 %444, %343
  %446 = add i32 %445, %269
  %447 = add i32 %446, %220
  %448 = mul i32 %447, 3
  %449 = shl i32 %0, 1
  %450 = sub i32 %1, %449
  %451 = add i32 %450, %66
  %452 = sub i32 %451, %78
  %453 = add i32 %452, %79
  %454 = sub i32 %453, %80
  %455 = sub i32 %454, %33
  %456 = add i32 %455, %106
  %457 = add i32 %456, %37
  %458 = sub i32 %457, %125
  %459 = add i32 %458, 1
  %460 = sub i32 %459, %34
  %461 = sub i32 %460, %36
  %462 = sub i32 %461, %46
  %463 = add i32 %462, %47
  %464 = sub i32 %463, %50
  %465 = add i32 %464, %52
  %466 = add i32 %465, %53
  %467 = add i32 %466, %60
  %468 = add i32 %467, %67
  %469 = add i32 %468, %43
  %470 = sub i32 %469, %73
  %471 = sub i32 %470, %77
  %472 = sub i32 %471, %83
  %473 = sub i32 %472, %86
  %474 = sub i32 %473, %89
  %475 = sub i32 %474, %90
  %476 = sub i32 %475, %92
  %477 = add i32 %476, %93
  %478 = add i32 %477, %94
  %479 = sub i32 %478, %95
  %480 = sub i32 %479, %96
  %481 = add i32 %480, %99
  %482 = add i32 %481, %102
  %483 = sub i32 %482, %104
  %484 = add i32 %483, %105
  %485 = sub i32 %484, %107
  %486 = add i32 %485, %110
  %487 = sub i32 %486, %118
  %488 = add i32 %487, %119
  %489 = add i32 %488, %123
  %490 = add i32 %489, %124
  %491 = sub i32 %490, %4
  %492 = sub i32 %491, %41
  %493 = add i32 %492, %44
  %494 = sub i32 %493, %85
  %495 = add i32 %494, %88
  %496 = sub i32 %495, %109
  %497 = sub i32 %496, %121
  %498 = add i32 %497, %127
  %499 = sub i32 %498, %130
  %500 = sub i32 %499, %132
  %501 = add i32 %500, %135
  %502 = add i32 %501, %136
  %503 = add i32 %502, %231
  %504 = add i32 %503, %254
  %505 = sub i32 %504, %196
  %506 = sub i32 %505, %25
  %507 = add i32 %506, %197
  %508 = sub i32 %507, %152
  %509 = add i32 %508, %164
  %510 = add i32 %509, %172
  %511 = sub i32 %510, %181
  %512 = add i32 %511, %150
  %513 = sub i32 %512, %190
  %514 = sub i32 %513, %154
  %515 = sub i32 %514, %229
  %516 = sub i32 %515, %148
  %517 = sub i32 %516, %239
  %518 = sub i32 %517, %257
  %519 = sub i32 %518, %204
  %520 = add i32 %519, %280
  %521 = add i32 %520, %185
  %522 = add i32 %521, %301
  %523 = add i32 %522, %304
  %524 = sub i32 %523, %313
  %525 = add i32 %524, %24
  %526 = add i32 %525, %342
  %527 = add i32 %526, %344
  %528 = sub i32 %527, %357
  %529 = sub i32 %528, %19
  %530 = add i32 %529, %363
  %531 = sub i32 %530, %365
  %532 = add i32 %531, %374
  %533 = add i32 %532, %379
  %534 = add i32 %533, %380
  %535 = sub i32 %534, %382
  %536 = sub i32 %535, %115
  %537 = sub i32 %536, %149
  %538 = sub i32 %537, %151
  %539 = sub i32 %538, %153
  %540 = sub i32 %539, %161
  %541 = add i32 %540, %166
  %542 = add i32 %541, %167
  %543 = sub i32 %542, %168
  %544 = add i32 %543, %169
  %545 = sub i32 %544, %178
  %546 = sub i32 %545, %179
  %547 = add i32 %546, %180
  %548 = add i32 %547, %182
  %549 = sub i32 %548, %187
  %550 = add i32 %549, %188
  %551 = sub i32 %550, %191
  %552 = sub i32 %551, %192
  %553 = sub i32 %552, %193
  %554 = sub i32 %553, %195
  %555 = add i32 %554, %198
  %556 = sub i32 %555, %200
  %557 = add i32 %556, %201
  %558 = sub i32 %557, %203
  %559 = add i32 %558, %206
  %560 = add i32 %559, %207
  %561 = add i32 %560, %210
  %562 = add i32 %561, %211
  %563 = add i32 %562, %212
  %564 = sub i32 %563, %215
  %565 = add i32 %564, %218
  %566 = sub i32 %565, %219
  %567 = sub i32 %566, %225
  %568 = sub i32 %567, %226
  %569 = add i32 %568, %232
  %570 = sub i32 %569, %233
  %571 = sub i32 %570, %237
  %572 = sub i32 %571, %238
  %573 = add i32 %572, %240
  %574 = add i32 %573, %245
  %575 = add i32 %574, %247
  %576 = sub i32 %575, %248
  %577 = add i32 %576, %221
  %578 = add i32 %577, %249
  %579 = sub i32 %578, %253
  %580 = sub i32 %579, %255
  %581 = add i32 %580, %258
  %582 = sub i32 %581, %261
  %583 = sub i32 %582, %270
  %584 = sub i32 %583, %272
  %585 = sub i32 %584, %273
  %586 = sub i32 %585, %274
  %587 = sub i32 %586, %275
  %588 = add i32 %587, %276
  %589 = sub i32 %588, %277
  %590 = sub i32 %589, %278
  %591 = add i32 %590, %281
  %592 = add i32 %591, %282
  %593 = add i32 %592, %264
  %594 = add i32 %593, %285
  %595 = add i32 %594, %286
  %596 = sub i32 %595, %287
  %597 = sub i32 %596, %288
  %598 = add i32 %597, %289
  %599 = add i32 %598, %292
  %600 = add i32 %599, %295
  %601 = sub i32 %600, %296
  %602 = add i32 %601, %297
  %603 = add i32 %602, %300
  %604 = sub i32 %603, %302
  %605 = sub i32 %604, %303
  %606 = sub i32 %605, %305
  %607 = sub i32 %606, %307
  %608 = sub i32 %607, %310
  %609 = sub i32 %608, %314
  %610 = sub i32 %609, %317
  %611 = sub i32 %610, %318
  %612 = sub i32 %611, %322
  %613 = sub i32 %612, %323
  %614 = add i32 %613, %324
  %615 = add i32 %614, %325
  %616 = add i32 %615, %331
  %617 = sub i32 %616, %326
  %618 = sub i32 %617, %335
  %619 = sub i32 %618, %339
  %620 = sub i32 %619, %340
  %621 = add i32 %620, %345
  %622 = add i32 %621, %346
  %623 = sub i32 %622, %349
  %624 = sub i32 %623, %352
  %625 = sub i32 %624, %353
  %626 = sub i32 %625, %354
  %627 = sub i32 %626, %355
  %628 = sub i32 %627, %356
  %629 = add i32 %628, %358
  %630 = sub i32 %629, %359
  %631 = add i32 %630, %360
  %632 = add i32 %631, %361
  %633 = sub i32 %632, %362
  %634 = sub i32 %633, %364
  %635 = add i32 %634, %156
  %636 = add i32 %635, %366
  %637 = sub i32 %636, %367
  %638 = sub i32 %637, %370
  %639 = add i32 %638, %371
  %640 = add i32 %639, %372
  %641 = sub i32 %640, %375
  %642 = sub i32 %641, %376
  %643 = sub i32 %642, %311
  %644 = sub i32 %643, %377
  %645 = add i32 %644, %378
  %646 = sub i32 %645, %155
  %647 = add i32 %646, %437
  %648 = add i32 %647, %158
  %649 = add i32 %648, %175
  %650 = add i32 %649, %184
  %651 = sub i32 %650, %214
  %652 = sub i32 %651, %223
  %653 = sub i32 %652, %228
  %654 = add i32 %653, %236
  %655 = sub i32 %654, %242
  %656 = sub i32 %655, %244
  %657 = sub i32 %656, %256
  %658 = sub i32 %657, %260
  %659 = sub i32 %658, %263
  %660 = sub i32 %659, %265
  %661 = add i32 %660, %268
  %662 = add i32 %661, %279
  %663 = sub i32 %662, %283
  %664 = sub i32 %663, %291
  %665 = sub i32 %664, %299
  %666 = add i32 %665, %309
  %667 = sub i32 %666, %312
  %668 = add i32 %667, %319
  %669 = sub i32 %668, %321
  %670 = add i32 %669, %327
  %671 = add i32 %670, %329
  %672 = sub i32 %671, %333
  %673 = add i32 %672, %334
  %674 = sub i32 %673, %338
  %675 = sub i32 %674, %348
  %676 = sub i32 %675, %351
  %677 = sub i32 %676, %369
  %678 = sub i32 %677, %381
  %679 = sub i32 %678, %384
  %680 = sub i32 %679, %388
  %681 = sub i32 %680, %390
  %682 = sub i32 %681, %393
  %683 = add i32 %682, %394
  %684 = add i32 %683, %439
  %685 = sub i32 %684, %145
  %686 = add i32 %685, %434
  %687 = add i32 %686, %430
  %688 = add i32 %687, %448
  %689 = add i32 %688, %425
  %690 = icmp eq i32 %28, %689
  %691 = select i1 %690, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %692 = tail call i32 @puts(i8* nonnull dereferenceable(1) %691)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
