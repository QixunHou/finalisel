digraph "DFG for'crackme' function" {
	Node0x1035d80[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x1035e20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1035e90[shape=record, label="  %7 = or i32 %6, 1"];
	Node0x1035f00[shape=record, label="  %8 = sub i32 %7, %2"];
	Node0x1035f70[shape=record, label="  %9 = shl i32 %1, 1"];
	Node0x1036010[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1036080[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x10360f0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1036160[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x10361d0[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x1036240[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x10362b0[shape=record, label="  %16 = or i32 %14, %1"];
	Node0x1036320[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x1036390[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x1036430[shape=record, label="  %19 = mul i32 %18, -7"];
	Node0x10364a0[shape=record, label="  %20 = xor i32 %16, -1"];
	Node0x1036540[shape=record, label="  %21 = shl i32 %13, 3"];
	Node0x10365b0[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x1036620[shape=record, label="  %23 = shl i32 %3, 1"];
	Node0x1036690[shape=record, label="  %24 = or i32 %5, %3"];
	Node0x1036700[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x1036770[shape=record, label="  %26 = and i32 %5, %3"];
	Node0x10367e0[shape=record, label="  %27 = or i32 %3, %0"];
	Node0x1036850[shape=record, label="  %28 = xor i32 %27, -1"];
	Node0x10368f0[shape=record, label="  %29 = shl i32 %26, 2"];
	Node0x1036990[shape=record, label="  %30 = mul i32 %25, 6"];
	Node0x1036a00[shape=record, label="  %31 = shl i32 %22, 1"];
	Node0x1036a70[shape=record, label="  %32 = add i32 %15, %20"];
	Node0x1036d20[shape=record, label="  %33 = mul i32 %32, -3"];
	Node0x1036d90[shape=record, label="  %34 = add i32 %28, %12"];
	Node0x1036e30[shape=record, label="  %35 = mul i32 %34, 5"];
	Node0x1036ed0[shape=record, label="  %36 = add i32 %1, 4"];
	Node0x1036f40[shape=record, label="  %37 = add i32 %36, %10"];
	Node0x1036fb0[shape=record, label="  %38 = add i32 %37, %13"];
	Node0x1037020[shape=record, label="  %39 = add i32 %38, %11"];
	Node0x1037090[shape=record, label="  %40 = add i32 %39, %15"];
	Node0x1037100[shape=record, label="  %41 = add i32 %40, %16"];
	Node0x1037170[shape=record, label="  %42 = add i32 %41, %19"];
	Node0x10371e0[shape=record, label="  %43 = sub i32 %42, %21"];
	Node0x1037250[shape=record, label="  %44 = sub i32 %43, %23"];
	Node0x10372c0[shape=record, label="  %45 = sub i32 %44, %24"];
	Node0x1037330[shape=record, label="  %46 = sub i32 %45, %25"];
	Node0x10373a0[shape=record, label="  %47 = add i32 %46, %26"];
	Node0x1037410[shape=record, label="  %48 = add i32 %47, %29"];
	Node0x1037480[shape=record, label="  %49 = add i32 %48, %30"];
	Node0x10374f0[shape=record, label="  %50 = add i32 %49, %31"];
	Node0x1037560[shape=record, label="  %51 = add i32 %50, %33"];
	Node0x10375d0[shape=record, label="  %52 = add i32 %51, %35"];
	Node0x1037640[shape=record, label="  %53 = icmp eq i32 %8, %52"];
	Node0xfd6268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1037ae0[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x1037b30[shape=record, label="  ret void"];
	Node0x1035d80 -> Node0x1035e20;
	Node0x1035e20 -> Node0x1035e90;
	Node0x1035e90 -> Node0x1035f00;
	Node0x1035f00 -> Node0x1035f70;
	Node0x1035f70 -> Node0x1036010;
	Node0x1036010 -> Node0x1036080;
	Node0x1036080 -> Node0x10360f0;
	Node0x10360f0 -> Node0x1036160;
	Node0x1036160 -> Node0x10361d0;
	Node0x10361d0 -> Node0x1036240;
	Node0x1036240 -> Node0x10362b0;
	Node0x10362b0 -> Node0x1036320;
	Node0x1036320 -> Node0x1036390;
	Node0x1036390 -> Node0x1036430;
	Node0x1036430 -> Node0x10364a0;
	Node0x10364a0 -> Node0x1036540;
	Node0x1036540 -> Node0x10365b0;
	Node0x10365b0 -> Node0x1036620;
	Node0x1036620 -> Node0x1036690;
	Node0x1036690 -> Node0x1036700;
	Node0x1036700 -> Node0x1036770;
	Node0x1036770 -> Node0x10367e0;
	Node0x10367e0 -> Node0x1036850;
	Node0x1036850 -> Node0x10368f0;
	Node0x10368f0 -> Node0x1036990;
	Node0x1036990 -> Node0x1036a00;
	Node0x1036a00 -> Node0x1036a70;
	Node0x1036a70 -> Node0x1036d20;
	Node0x1036d20 -> Node0x1036d90;
	Node0x1036d90 -> Node0x1036e30;
	Node0x1036e30 -> Node0x1036ed0;
	Node0x1036ed0 -> Node0x1036f40;
	Node0x1036f40 -> Node0x1036fb0;
	Node0x1036fb0 -> Node0x1037020;
	Node0x1037020 -> Node0x1037090;
	Node0x1037090 -> Node0x1037100;
	Node0x1037100 -> Node0x1037170;
	Node0x1037170 -> Node0x10371e0;
	Node0x10371e0 -> Node0x1037250;
	Node0x1037250 -> Node0x10372c0;
	Node0x10372c0 -> Node0x1037330;
	Node0x1037330 -> Node0x10373a0;
	Node0x10373a0 -> Node0x1037410;
	Node0x1037410 -> Node0x1037480;
	Node0x1037480 -> Node0x10374f0;
	Node0x10374f0 -> Node0x1037560;
	Node0x1037560 -> Node0x10375d0;
	Node0x10375d0 -> Node0x1037640;
	Node0x1037640 -> Node0xfd6268;
	Node0xfd6268 -> Node0x1037ae0;
	Node0x1037ae0 -> Node0x1037b30;
edge [color=red]
	Node0x1035d80 -> Node0x1035e20;
	Node0x1035e20 -> Node0x1035e90;
	Node0x1035e90 -> Node0x1035f00;
	Node0x1035f70 -> Node0x1036010;
	Node0x1036080 -> Node0x10360f0;
	Node0x10361d0 -> Node0x1036240;
	Node0x10361d0 -> Node0x10362b0;
	Node0x1036320 -> Node0x1036390;
	Node0x1036390 -> Node0x1036430;
	Node0x10362b0 -> Node0x10364a0;
	Node0x1036160 -> Node0x1036540;
	Node0x1035d80 -> Node0x1036690;
	Node0x1035d80 -> Node0x1036770;
	Node0x10367e0 -> Node0x1036850;
	Node0x1036770 -> Node0x10368f0;
	Node0x1036700 -> Node0x1036990;
	Node0x10365b0 -> Node0x1036a00;
	Node0x1036240 -> Node0x1036a70;
	Node0x10364a0 -> Node0x1036a70;
	Node0x1036a70 -> Node0x1036d20;
	Node0x1036850 -> Node0x1036d90;
	Node0x10360f0 -> Node0x1036d90;
	Node0x1036d90 -> Node0x1036e30;
	Node0x1036ed0 -> Node0x1036f40;
	Node0x1036010 -> Node0x1036f40;
	Node0x1036f40 -> Node0x1036fb0;
	Node0x1036160 -> Node0x1036fb0;
	Node0x1036fb0 -> Node0x1037020;
	Node0x1036080 -> Node0x1037020;
	Node0x1037020 -> Node0x1037090;
	Node0x1036240 -> Node0x1037090;
	Node0x1037090 -> Node0x1037100;
	Node0x10362b0 -> Node0x1037100;
	Node0x1037100 -> Node0x1037170;
	Node0x1036430 -> Node0x1037170;
	Node0x1037170 -> Node0x10371e0;
	Node0x1036540 -> Node0x10371e0;
	Node0x10371e0 -> Node0x1037250;
	Node0x1036620 -> Node0x1037250;
	Node0x1037250 -> Node0x10372c0;
	Node0x1036690 -> Node0x10372c0;
	Node0x10372c0 -> Node0x1037330;
	Node0x1036700 -> Node0x1037330;
	Node0x1037330 -> Node0x10373a0;
	Node0x1036770 -> Node0x10373a0;
	Node0x10373a0 -> Node0x1037410;
	Node0x10368f0 -> Node0x1037410;
	Node0x1037410 -> Node0x1037480;
	Node0x1036990 -> Node0x1037480;
	Node0x1037480 -> Node0x10374f0;
	Node0x1036a00 -> Node0x10374f0;
	Node0x10374f0 -> Node0x1037560;
	Node0x1036d20 -> Node0x1037560;
	Node0x1037560 -> Node0x10375d0;
	Node0x1036e30 -> Node0x10375d0;
	Node0x1035f00 -> Node0x1037640;
	Node0x10375d0 -> Node0x1037640;
	Node0x1037640 -> Node0xfd6268;
	Node0xfd6268 -> Node0x1037ae0;
}
