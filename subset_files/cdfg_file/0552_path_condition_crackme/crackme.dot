digraph "DFG for'crackme' function" {
	Node0xeb2b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xeb2b90[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0xeb2c50[shape=record, label="  %5 = or i32 %4, %1"];
	Node0xeb2cc0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0xeb2d30[shape=record, label="  %7 = add i32 %5, %6"];
	Node0xeb2da0[shape=record, label="  %8 = or i32 %3, %0"];
	Node0xeb2e10[shape=record, label="  %9 = and i32 %1, %0"];
	Node0xeb2e80[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xeb2f20[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0xeb2f90[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0xeb3000[shape=record, label="  %13 = shl i32 %0, 1"];
	Node0xeb3070[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0xeb30e0[shape=record, label="  %15 = xor i32 %8, -1"];
	Node0xeb3180[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0xeb31f0[shape=record, label="  %17 = sub i32 1, %0"];
	Node0xeb3260[shape=record, label="  %18 = add i32 %17, %8"];
	Node0xeb32d0[shape=record, label="  %19 = add i32 %18, %12"];
	Node0xeb3340[shape=record, label="  %20 = sub i32 %19, %14"];
	Node0xeb33b0[shape=record, label="  %21 = add i32 %20, %9"];
	Node0xeb3420[shape=record, label="  %22 = add i32 %21, %16"];
	Node0xeb3490[shape=record, label="  %23 = add i32 %22, %11"];
	Node0xeb3500[shape=record, label="  %24 = icmp eq i32 %7, %23"];
	Node0xe53268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xeb39a0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0xeb39f0[shape=record, label="  ret void"];
	Node0xeb2b20 -> Node0xeb2b90;
	Node0xeb2b90 -> Node0xeb2c50;
	Node0xeb2c50 -> Node0xeb2cc0;
	Node0xeb2cc0 -> Node0xeb2d30;
	Node0xeb2d30 -> Node0xeb2da0;
	Node0xeb2da0 -> Node0xeb2e10;
	Node0xeb2e10 -> Node0xeb2e80;
	Node0xeb2e80 -> Node0xeb2f20;
	Node0xeb2f20 -> Node0xeb2f90;
	Node0xeb2f90 -> Node0xeb3000;
	Node0xeb3000 -> Node0xeb3070;
	Node0xeb3070 -> Node0xeb30e0;
	Node0xeb30e0 -> Node0xeb3180;
	Node0xeb3180 -> Node0xeb31f0;
	Node0xeb31f0 -> Node0xeb3260;
	Node0xeb3260 -> Node0xeb32d0;
	Node0xeb32d0 -> Node0xeb3340;
	Node0xeb3340 -> Node0xeb33b0;
	Node0xeb33b0 -> Node0xeb3420;
	Node0xeb3420 -> Node0xeb3490;
	Node0xeb3490 -> Node0xeb3500;
	Node0xeb3500 -> Node0xe53268;
	Node0xe53268 -> Node0xeb39a0;
	Node0xeb39a0 -> Node0xeb39f0;
edge [color=red]
	Node0xeb2b90 -> Node0xeb2c50;
	Node0xeb2c50 -> Node0xeb2d30;
	Node0xeb2cc0 -> Node0xeb2d30;
	Node0xeb2b20 -> Node0xeb2da0;
	Node0xeb2e10 -> Node0xeb2e80;
	Node0xeb2e80 -> Node0xeb2f20;
	Node0xeb2cc0 -> Node0xeb2f90;
	Node0xeb3000 -> Node0xeb3070;
	Node0xeb2da0 -> Node0xeb30e0;
	Node0xeb30e0 -> Node0xeb3180;
	Node0xeb31f0 -> Node0xeb3260;
	Node0xeb2da0 -> Node0xeb3260;
	Node0xeb3260 -> Node0xeb32d0;
	Node0xeb2f90 -> Node0xeb32d0;
	Node0xeb32d0 -> Node0xeb3340;
	Node0xeb3070 -> Node0xeb3340;
	Node0xeb3340 -> Node0xeb33b0;
	Node0xeb2e10 -> Node0xeb33b0;
	Node0xeb33b0 -> Node0xeb3420;
	Node0xeb3180 -> Node0xeb3420;
	Node0xeb3420 -> Node0xeb3490;
	Node0xeb2f20 -> Node0xeb3490;
	Node0xeb2d30 -> Node0xeb3500;
	Node0xeb3490 -> Node0xeb3500;
	Node0xeb3500 -> Node0xe53268;
	Node0xe53268 -> Node0xeb39a0;
}
