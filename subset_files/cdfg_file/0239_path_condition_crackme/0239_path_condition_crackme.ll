; ModuleID = '../.././c_source_file/0239_path_condition_crackme.c'
source_filename = "../.././c_source_file/0239_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = and i32 %10, %7
  %12 = or i32 %5, %4
  %13 = xor i32 %4, %3
  %14 = xor i32 %13, -1
  %15 = and i32 %12, %14
  %16 = shl i32 %15, 1
  %17 = and i32 %5, %4
  %18 = or i32 %4, %3
  %19 = xor i32 %17, %18
  %20 = add i32 %19, %11
  %21 = sub i32 %20, %16
  %22 = xor i32 %2, %1
  %23 = or i32 %22, %0
  %24 = xor i32 %1, -1
  %25 = or i32 %24, %0
  %26 = and i32 %22, %25
  %27 = or i32 %10, %7
  %28 = and i32 %1, %0
  %29 = or i32 %8, %1
  %30 = xor i32 %29, %28
  %31 = and i32 %2, %1
  %32 = xor i32 %31, -1
  %33 = or i32 %1, %0
  %34 = xor i32 %22, -1
  %35 = and i32 %33, %34
  %36 = xor i32 %1, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %2, %0
  %39 = or i32 %38, %37
  %40 = or i32 %2, %1
  %41 = or i32 %40, %0
  %42 = xor i32 %25, -1
  %43 = or i32 %8, %42
  %44 = and i32 %31, %7
  %45 = and i32 %40, %0
  %46 = or i32 %44, %45
  %47 = and i32 %24, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %22, %48
  %50 = xor i32 %38, -1
  %51 = or i32 %50, %1
  %52 = xor i32 %28, %2
  %53 = shl i32 %52, 1
  %54 = or i32 %31, %47
  %55 = and i32 %2, %0
  %56 = or i32 %55, %36
  %57 = or i32 %8, %0
  %58 = xor i32 %57, %28
  %59 = shl i32 %58, 1
  %60 = and i32 %8, %0
  %61 = xor i32 %60, %1
  %62 = and i32 %50, %48
  %63 = and i32 %31, %0
  %64 = and i32 %22, %7
  %65 = or i32 %63, %64
  %66 = xor i32 %28, -1
  %67 = and i32 %34, %66
  %68 = and i32 %33, %50
  %69 = or i32 %38, %42
  %70 = xor i32 %55, -1
  %71 = and i32 %36, %70
  %72 = and i32 %22, %33
  %73 = or i32 %47, %8
  %74 = or i32 %8, %37
  %75 = xor i32 %40, -1
  %76 = or i32 %75, %7
  %77 = xor i32 %40, %28
  %78 = or i32 %47, %34
  %79 = shl i32 %28, 2
  %80 = or i32 %55, %24
  %81 = xor i32 %55, %33
  %82 = and i32 %36, %8
  %83 = or i32 %60, %31
  %84 = xor i32 %45, -1
  %85 = xor i32 %44, %84
  %86 = or i32 %22, %28
  %87 = xor i32 %66, %2
  %88 = or i32 %28, %34
  %89 = and i32 %47, %2
  %90 = or i32 %24, %2
  %91 = and i32 %90, %7
  %92 = or i32 %89, %91
  %93 = or i32 %55, %37
  %94 = xor i32 %55, %1
  %95 = or i32 %29, %0
  %96 = xor i32 %9, %0
  %97 = shl i32 %96, 1
  %98 = and i32 %22, %0
  %99 = and i32 %34, %7
  %100 = or i32 %50, %37
  %101 = xor i32 %31, %0
  %102 = and i32 %36, %50
  %103 = and i32 %75, %7
  %104 = mul i32 %103, 12
  %105 = and i32 %9, %7
  %106 = mul i32 %105, 11
  %107 = and i32 %75, %0
  %108 = mul i32 %107, 14
  %109 = xor i32 %29, -1
  %110 = and i32 %109, %7
  %111 = mul i32 %110, 7
  %112 = mul i32 %44, 18
  %113 = and i32 %109, %0
  %114 = xor i32 %12, -1
  %115 = xor i32 %114, %3
  %116 = xor i32 %4, -1
  %117 = xor i32 %3, -1
  %118 = and i32 %117, %4
  %119 = xor i32 %118, -1
  %120 = xor i32 %5, %4
  %121 = and i32 %120, %119
  %122 = xor i32 %18, -1
  %123 = xor i32 %5, %3
  %124 = xor i32 %123, -1
  %125 = or i32 %124, %122
  %126 = xor i32 %5, -1
  %127 = and i32 %126, %3
  %128 = or i32 %127, %116
  %129 = or i32 %117, %4
  %130 = xor i32 %129, %5
  %131 = and i32 %5, %3
  %132 = xor i32 %131, -1
  %133 = or i32 %132, %116
  %134 = and i32 %13, %126
  %135 = xor i32 %127, -1
  %136 = and i32 %135, %4
  %137 = and i32 %4, %3
  %138 = or i32 %120, %137
  %139 = or i32 %5, %3
  %140 = xor i32 %139, -1
  %141 = or i32 %17, %140
  %142 = xor i32 %12, %137
  %143 = or i32 %120, %122
  %144 = xor i32 %18, %5
  %145 = xor i32 %120, -1
  %146 = or i32 %145, %117
  %147 = xor i32 %139, %137
  %148 = and i32 %135, %116
  %149 = or i32 %126, %4
  %150 = and i32 %149, %14
  %151 = xor i32 %129, -1
  %152 = or i32 %126, %151
  %153 = and i32 %129, %124
  %154 = or i32 %114, %117
  %155 = and i32 %126, %4
  %156 = or i32 %155, %14
  %157 = and i32 %145, %3
  %158 = or i32 %135, %116
  %159 = or i32 %155, %131
  %160 = shl i32 %159, 1
  %161 = and i32 %131, %116
  %162 = and i32 %123, %4
  %163 = xor i32 %162, -1
  %164 = xor i32 %161, %163
  %165 = and i32 %145, %119
  %166 = shl i32 %165, 1
  %167 = xor i32 %155, %132
  %168 = xor i32 %135, %4
  %169 = and i32 %120, %3
  %170 = or i32 %137, %114
  %171 = and i32 %132, %116
  %172 = or i32 %131, %118
  %173 = or i32 %139, %4
  %174 = xor i32 %17, %3
  %175 = shl i32 %122, 1
  %176 = or i32 %14, %5
  %177 = and i32 %18, %126
  %178 = or i32 %145, %122
  %179 = xor i32 %137, -1
  %180 = and i32 %145, %179
  %181 = or i32 %137, %5
  %182 = and i32 %131, %4
  %183 = and i32 %123, %116
  %184 = or i32 %182, %183
  %185 = and i32 %129, %145
  %186 = or i32 %126, %3
  %187 = xor i32 %186, -1
  %188 = or i32 %137, %187
  %189 = xor i32 %155, -1
  %190 = and i32 %189, %117
  %191 = xor i32 %17, -1
  %192 = and i32 %13, %191
  %193 = shl i32 %192, 1
  %194 = xor i32 %183, -1
  %195 = xor i32 %182, %194
  %196 = or i32 %131, %4
  %197 = and i32 %124, %116
  %198 = and i32 %18, %124
  %199 = and i32 %120, %129
  %200 = and i32 %13, %189
  %201 = or i32 %17, %117
  %202 = xor i32 %123, %116
  %203 = or i32 %182, %202
  %204 = xor i32 %17, %139
  %205 = and i32 %186, %116
  %206 = or i32 %140, %116
  %207 = xor i32 %187, %4
  %208 = xor i32 %155, %3
  %209 = xor i32 %149, %3
  %210 = and i32 %139, %4
  %211 = and i32 %189, %14
  %212 = shl i32 %211, 1
  %213 = or i32 %155, %117
  %214 = or i32 %140, %4
  %215 = or i32 %131, %116
  %216 = and i32 %186, %4
  %217 = and i32 %18, %145
  %218 = and i32 %145, %117
  %219 = or i32 %123, %151
  %220 = or i32 %123, %137
  %221 = shl i32 %220, 1
  %222 = xor i32 %149, -1
  %223 = or i32 %222, %117
  %224 = and i32 %118, %5
  %225 = or i32 %127, %4
  %226 = xor i32 %224, %225
  %227 = or i32 %137, %222
  %228 = or i32 %186, %116
  %229 = or i32 %161, %162
  %230 = and i32 %13, %145
  %231 = or i32 %120, %117
  %232 = xor i32 %122, %5
  %233 = xor i32 %17, %129
  %234 = or i32 %114, %14
  %235 = shl i32 %234, 1
  %236 = xor i32 %139, 2147483647
  %237 = or i32 %236, %4
  %238 = xor i32 %237, %182
  %239 = xor i32 %127, %4
  %240 = or i32 %137, %145
  %241 = shl i32 %240, 1
  %242 = or i32 %132, %4
  %243 = and i32 %140, %116
  %244 = and i32 %127, %116
  %245 = and i32 %140, %4
  %246 = and i32 %127, %4
  %247 = and i32 %187, %116
  %248 = and i32 %187, %4
  %249 = sub i32 -2, %1
  %250 = add i32 %249, %102
  %251 = add i32 %250, %101
  %252 = add i32 %251, %86
  %253 = add i32 %252, %92
  %254 = add i32 %253, %208
  %255 = add i32 %254, %148
  %256 = add i32 %255, %133
  %257 = add i32 %256, %238
  %258 = shl i32 %257, 1
  %259 = add i32 %76, %99
  %260 = add i32 %259, %232
  %261 = add i32 %260, %246
  %262 = add i32 %261, %248
  %263 = sub i32 %196, %262
  %264 = sub i32 %263, %178
  %265 = mul i32 %264, 5
  %266 = sub i32 %63, %54
  %267 = add i32 %266, %147
  %268 = add i32 %267, %174
  %269 = mul i32 %268, 3
  %270 = sub i32 %182, %245
  %271 = mul i32 %270, 13
  %272 = sub i32 %243, %161
  %273 = mul i32 %272, 10
  %274 = add i32 %0, 2
  %275 = add i32 %274, %33
  %276 = add i32 %275, %25
  %277 = add i32 %276, %32
  %278 = sub i32 %277, %43
  %279 = add i32 %278, %50
  %280 = sub i32 %279, %73
  %281 = sub i32 %280, %74
  %282 = add i32 %281, %79
  %283 = sub i32 %282, %9
  %284 = sub i32 %283, %82
  %285 = add i32 %284, %87
  %286 = sub i32 %285, %3
  %287 = sub i32 %286, %26
  %288 = add i32 %287, %23
  %289 = sub i32 %288, %27
  %290 = add i32 %289, %30
  %291 = sub i32 %290, %35
  %292 = sub i32 %291, %39
  %293 = add i32 %292, %41
  %294 = sub i32 %293, %49
  %295 = sub i32 %294, %51
  %296 = sub i32 %295, %53
  %297 = sub i32 %296, %56
  %298 = sub i32 %297, %61
  %299 = add i32 %298, %62
  %300 = add i32 %299, %67
  %301 = sub i32 %300, %68
  %302 = sub i32 %301, %69
  %303 = add i32 %302, %71
  %304 = add i32 %303, %72
  %305 = add i32 %304, %77
  %306 = sub i32 %305, %78
  %307 = sub i32 %306, %80
  %308 = sub i32 %307, %81
  %309 = sub i32 %308, %83
  %310 = add i32 %309, %88
  %311 = sub i32 %310, %93
  %312 = sub i32 %311, %94
  %313 = sub i32 %312, %95
  %314 = sub i32 %313, %98
  %315 = add i32 %314, %100
  %316 = add i32 %315, %113
  %317 = add i32 %316, %46
  %318 = sub i32 %317, %59
  %319 = sub i32 %318, %65
  %320 = sub i32 %319, %85
  %321 = sub i32 %320, %97
  %322 = add i32 %321, %104
  %323 = add i32 %322, %106
  %324 = add i32 %323, %108
  %325 = add i32 %324, %111
  %326 = add i32 %325, %112
  %327 = add i32 %326, %5
  %328 = add i32 %327, %130
  %329 = add i32 %328, %134
  %330 = add i32 %329, %135
  %331 = sub i32 %330, %144
  %332 = add i32 %331, %152
  %333 = sub i32 %332, %175
  %334 = sub i32 %333, %176
  %335 = add i32 %334, %177
  %336 = add i32 %335, %181
  %337 = add i32 %336, %132
  %338 = add i32 %337, %191
  %339 = add i32 %338, %155
  %340 = sub i32 %339, %115
  %341 = add i32 %340, %121
  %342 = sub i32 %341, %125
  %343 = add i32 %342, %128
  %344 = add i32 %343, %136
  %345 = add i32 %344, %138
  %346 = add i32 %345, %141
  %347 = add i32 %346, %142
  %348 = sub i32 %347, %143
  %349 = add i32 %348, %146
  %350 = sub i32 %349, %150
  %351 = sub i32 %350, %153
  %352 = add i32 %351, %154
  %353 = add i32 %352, %156
  %354 = add i32 %353, %157
  %355 = sub i32 %354, %158
  %356 = add i32 %355, %167
  %357 = add i32 %356, %168
  %358 = add i32 %357, %169
  %359 = sub i32 %358, %170
  %360 = sub i32 %359, %171
  %361 = sub i32 %360, %172
  %362 = sub i32 %361, %173
  %363 = sub i32 %362, %180
  %364 = sub i32 %363, %185
  %365 = sub i32 %364, %188
  %366 = add i32 %365, %190
  %367 = add i32 %366, %197
  %368 = sub i32 %367, %198
  %369 = sub i32 %368, %199
  %370 = add i32 %369, %200
  %371 = add i32 %370, %201
  %372 = sub i32 %371, %204
  %373 = sub i32 %372, %205
  %374 = add i32 %373, %183
  %375 = sub i32 %374, %206
  %376 = add i32 %375, %207
  %377 = add i32 %376, %209
  %378 = sub i32 %377, %210
  %379 = sub i32 %378, %213
  %380 = sub i32 %379, %214
  %381 = add i32 %380, %215
  %382 = add i32 %381, %216
  %383 = add i32 %382, %217
  %384 = add i32 %383, %218
  %385 = sub i32 %384, %219
  %386 = sub i32 %385, %223
  %387 = sub i32 %386, %227
  %388 = add i32 %387, %228
  %389 = add i32 %388, %230
  %390 = sub i32 %389, %231
  %391 = sub i32 %390, %233
  %392 = sub i32 %391, %239
  %393 = sub i32 %392, %242
  %394 = add i32 %393, %244
  %395 = add i32 %394, %247
  %396 = sub i32 %395, %160
  %397 = add i32 %396, %164
  %398 = sub i32 %397, %166
  %399 = sub i32 %398, %184
  %400 = sub i32 %399, %193
  %401 = add i32 %400, %195
  %402 = add i32 %401, %203
  %403 = sub i32 %402, %212
  %404 = sub i32 %403, %221
  %405 = add i32 %404, %226
  %406 = sub i32 %405, %229
  %407 = sub i32 %406, %235
  %408 = sub i32 %407, %241
  %409 = add i32 %408, %271
  %410 = add i32 %409, %273
  %411 = add i32 %410, %269
  %412 = add i32 %411, %265
  %413 = add i32 %412, %258
  %414 = icmp eq i32 %21, %413
  %415 = select i1 %414, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %416 = tail call i32 @puts(i8* nonnull dereferenceable(1) %415)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
