digraph "DFG for'main' function" {
	Node0x20011b8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x2001238[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x20012c8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x2001728[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x2001808[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x2001928[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x2001b60[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x2001c18[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x2002b88[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x2003210[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x2003280[shape=record, label="  %9 = and i32 %6, %8"];
	Node0x20032f0[shape=record, label="  %10 = sub i32 %9, %7"];
	Node0x2003360[shape=record, label="  %11 = xor i32 %7, %6"];
	Node0x20033d0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x2003440[shape=record, label="  %13 = or i32 %7, %6"];
	Node0x20034b0[shape=record, label="  %14 = and i32 %7, %6"];
	Node0x2003520[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x2003590[shape=record, label="  %16 = shl i32 %6, 1"];
	Node0x2003600[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x2003670[shape=record, label="  %18 = or i32 %6, %8"];
	Node0x20036e0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x2003750[shape=record, label="  %20 = xor i32 %13, -1"];
	Node0x20037c0[shape=record, label="  %21 = xor i32 %18, -1"];
	Node0x2003830[shape=record, label="  %22 = mul i32 %21, -6"];
	Node0x20038a0[shape=record, label="  %23 = add i32 %14, %20"];
	Node0x2003910[shape=record, label="  %24 = mul i32 %23, -3"];
	Node0x2003980[shape=record, label="  %25 = add i32 %7, -1"];
	Node0x20039f0[shape=record, label="  %26 = add i32 %25, %12"];
	Node0x2003a60[shape=record, label="  %27 = add i32 %26, %13"];
	Node0x2003ad0[shape=record, label="  %28 = sub i32 %27, %11"];
	Node0x2003b40[shape=record, label="  %29 = add i32 %28, %15"];
	Node0x2003bb0[shape=record, label="  %30 = add i32 %29, %17"];
	Node0x2003c20[shape=record, label="  %31 = add i32 %30, %9"];
	Node0x2003c90[shape=record, label="  %32 = sub i32 %31, %19"];
	Node0x2003d00[shape=record, label="  %33 = add i32 %32, %22"];
	Node0x2003d70[shape=record, label="  %34 = add i32 %33, %24"];
	Node0x2003de0[shape=record, label="  %35 = icmp eq i32 %10, %34"];
	Node0x1fa19d8[shape=record, label="  %36 = select i1 %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2003e70[shape=record, label="  %37 = call i32 @puts(i8* nonnull dereferenceable(1) %36) #5"];
	Node0x20040c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x2004228[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x20042e8[shape=record, label="  ret i32 0"];
	Node0x20011b8 -> Node0x2001238;
	Node0x2001238 -> Node0x20012c8;
	Node0x20012c8 -> Node0x2001728;
	Node0x2001728 -> Node0x2001808;
	Node0x2001808 -> Node0x2001928;
	Node0x2001928 -> Node0x2001b60;
	Node0x2001b60 -> Node0x2001c18;
	Node0x2001c18 -> Node0x2002b88;
	Node0x2002b88 -> Node0x2003210;
	Node0x2003210 -> Node0x2003280;
	Node0x2003280 -> Node0x20032f0;
	Node0x20032f0 -> Node0x2003360;
	Node0x2003360 -> Node0x20033d0;
	Node0x20033d0 -> Node0x2003440;
	Node0x2003440 -> Node0x20034b0;
	Node0x20034b0 -> Node0x2003520;
	Node0x2003520 -> Node0x2003590;
	Node0x2003590 -> Node0x2003600;
	Node0x2003600 -> Node0x2003670;
	Node0x2003670 -> Node0x20036e0;
	Node0x20036e0 -> Node0x2003750;
	Node0x2003750 -> Node0x20037c0;
	Node0x20037c0 -> Node0x2003830;
	Node0x2003830 -> Node0x20038a0;
	Node0x20038a0 -> Node0x2003910;
	Node0x2003910 -> Node0x2003980;
	Node0x2003980 -> Node0x20039f0;
	Node0x20039f0 -> Node0x2003a60;
	Node0x2003a60 -> Node0x2003ad0;
	Node0x2003ad0 -> Node0x2003b40;
	Node0x2003b40 -> Node0x2003bb0;
	Node0x2003bb0 -> Node0x2003c20;
	Node0x2003c20 -> Node0x2003c90;
	Node0x2003c90 -> Node0x2003d00;
	Node0x2003d00 -> Node0x2003d70;
	Node0x2003d70 -> Node0x2003de0;
	Node0x2003de0 -> Node0x1fa19d8;
	Node0x1fa19d8 -> Node0x2003e70;
	Node0x2003e70 -> Node0x20040c8;
	Node0x20040c8 -> Node0x2004228;
	Node0x2004228 -> Node0x20042e8;
edge [color=red]
	Node0x20011b8 -> Node0x20012c8;
	Node0x20012c8 -> Node0x2001728;
	Node0x2001238 -> Node0x2001808;
	Node0x2001808 -> Node0x2001928;
	Node0x20011b8 -> Node0x2001b60;
	Node0x2001238 -> Node0x2001b60;
	Node0x20011b8 -> Node0x2001c18;
	Node0x2001238 -> Node0x2002b88;
	Node0x2002b88 -> Node0x2003210;
	Node0x2001c18 -> Node0x2003280;
	Node0x2003210 -> Node0x2003280;
	Node0x2003280 -> Node0x20032f0;
	Node0x2002b88 -> Node0x20032f0;
	Node0x2002b88 -> Node0x2003360;
	Node0x2001c18 -> Node0x2003360;
	Node0x2003360 -> Node0x20033d0;
	Node0x2002b88 -> Node0x2003440;
	Node0x2001c18 -> Node0x2003440;
	Node0x2002b88 -> Node0x20034b0;
	Node0x2001c18 -> Node0x20034b0;
	Node0x20034b0 -> Node0x2003520;
	Node0x2001c18 -> Node0x2003590;
	Node0x2003590 -> Node0x2003600;
	Node0x2001c18 -> Node0x2003670;
	Node0x2003210 -> Node0x2003670;
	Node0x2003670 -> Node0x20036e0;
	Node0x2003440 -> Node0x2003750;
	Node0x2003670 -> Node0x20037c0;
	Node0x20037c0 -> Node0x2003830;
	Node0x20034b0 -> Node0x20038a0;
	Node0x2003750 -> Node0x20038a0;
	Node0x20038a0 -> Node0x2003910;
	Node0x2002b88 -> Node0x2003980;
	Node0x2003980 -> Node0x20039f0;
	Node0x20033d0 -> Node0x20039f0;
	Node0x20039f0 -> Node0x2003a60;
	Node0x2003440 -> Node0x2003a60;
	Node0x2003a60 -> Node0x2003ad0;
	Node0x2003360 -> Node0x2003ad0;
	Node0x2003ad0 -> Node0x2003b40;
	Node0x2003520 -> Node0x2003b40;
	Node0x2003b40 -> Node0x2003bb0;
	Node0x2003600 -> Node0x2003bb0;
	Node0x2003bb0 -> Node0x2003c20;
	Node0x2003280 -> Node0x2003c20;
	Node0x2003c20 -> Node0x2003c90;
	Node0x20036e0 -> Node0x2003c90;
	Node0x2003c90 -> Node0x2003d00;
	Node0x2003830 -> Node0x2003d00;
	Node0x2003d00 -> Node0x2003d70;
	Node0x2003910 -> Node0x2003d70;
	Node0x20032f0 -> Node0x2003de0;
	Node0x2003d70 -> Node0x2003de0;
	Node0x2003de0 -> Node0x1fa19d8;
	Node0x1fa19d8 -> Node0x2003e70;
	Node0x2001808 -> Node0x20040c8;
	Node0x20012c8 -> Node0x2004228;
}
