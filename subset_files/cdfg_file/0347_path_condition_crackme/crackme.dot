digraph "DFG for'crackme' function" {
	Node0x1fffc40[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1fffcb0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1fffd70[shape=record, label="  %5 = sub i32 %4, %1"];
	Node0x1fffde0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1fffe50[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1fffec0[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x1ffff30[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1ffffa0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x2000010[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0x20000b0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x2000120[shape=record, label="  %13 = or i32 %3, %0"];
	Node0x2000190[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x2000200[shape=record, label="  %15 = xor i32 %8, -1"];
	Node0x2000270[shape=record, label="  %16 = xor i32 %13, -1"];
	Node0x2000310[shape=record, label="  %17 = mul i32 %16, -6"];
	Node0x2000380[shape=record, label="  %18 = add i32 %9, %15"];
	Node0x2000420[shape=record, label="  %19 = mul i32 %18, -3"];
	Node0x2000490[shape=record, label="  %20 = add i32 %1, -1"];
	Node0x2000500[shape=record, label="  %21 = add i32 %20, %7"];
	Node0x2000570[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x20005e0[shape=record, label="  %23 = sub i32 %22, %6"];
	Node0x2000650[shape=record, label="  %24 = add i32 %23, %10"];
	Node0x20006c0[shape=record, label="  %25 = add i32 %24, %12"];
	Node0x2000730[shape=record, label="  %26 = add i32 %25, %4"];
	Node0x20007a0[shape=record, label="  %27 = sub i32 %26, %14"];
	Node0x2000810[shape=record, label="  %28 = add i32 %27, %17"];
	Node0x2000880[shape=record, label="  %29 = add i32 %28, %19"];
	Node0x20008f0[shape=record, label="  %30 = icmp eq i32 %5, %29"];
	Node0x1fa0268[shape=record, label="  %31 = select i1 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2000d90[shape=record, label="  %32 = tail call i32 @puts(i8* nonnull dereferenceable(1) %31)"];
	Node0x2000ff0[shape=record, label="  ret void"];
	Node0x1fffc40 -> Node0x1fffcb0;
	Node0x1fffcb0 -> Node0x1fffd70;
	Node0x1fffd70 -> Node0x1fffde0;
	Node0x1fffde0 -> Node0x1fffe50;
	Node0x1fffe50 -> Node0x1fffec0;
	Node0x1fffec0 -> Node0x1ffff30;
	Node0x1ffff30 -> Node0x1ffffa0;
	Node0x1ffffa0 -> Node0x2000010;
	Node0x2000010 -> Node0x20000b0;
	Node0x20000b0 -> Node0x2000120;
	Node0x2000120 -> Node0x2000190;
	Node0x2000190 -> Node0x2000200;
	Node0x2000200 -> Node0x2000270;
	Node0x2000270 -> Node0x2000310;
	Node0x2000310 -> Node0x2000380;
	Node0x2000380 -> Node0x2000420;
	Node0x2000420 -> Node0x2000490;
	Node0x2000490 -> Node0x2000500;
	Node0x2000500 -> Node0x2000570;
	Node0x2000570 -> Node0x20005e0;
	Node0x20005e0 -> Node0x2000650;
	Node0x2000650 -> Node0x20006c0;
	Node0x20006c0 -> Node0x2000730;
	Node0x2000730 -> Node0x20007a0;
	Node0x20007a0 -> Node0x2000810;
	Node0x2000810 -> Node0x2000880;
	Node0x2000880 -> Node0x20008f0;
	Node0x20008f0 -> Node0x1fa0268;
	Node0x1fa0268 -> Node0x2000d90;
	Node0x2000d90 -> Node0x2000ff0;
edge [color=red]
	Node0x1fffc40 -> Node0x1fffcb0;
	Node0x1fffcb0 -> Node0x1fffd70;
	Node0x1fffde0 -> Node0x1fffe50;
	Node0x1ffff30 -> Node0x1ffffa0;
	Node0x2000010 -> Node0x20000b0;
	Node0x1fffc40 -> Node0x2000120;
	Node0x2000120 -> Node0x2000190;
	Node0x1fffec0 -> Node0x2000200;
	Node0x2000120 -> Node0x2000270;
	Node0x2000270 -> Node0x2000310;
	Node0x1ffff30 -> Node0x2000380;
	Node0x2000200 -> Node0x2000380;
	Node0x2000380 -> Node0x2000420;
	Node0x2000490 -> Node0x2000500;
	Node0x1fffe50 -> Node0x2000500;
	Node0x2000500 -> Node0x2000570;
	Node0x1fffec0 -> Node0x2000570;
	Node0x2000570 -> Node0x20005e0;
	Node0x1fffde0 -> Node0x20005e0;
	Node0x20005e0 -> Node0x2000650;
	Node0x1ffffa0 -> Node0x2000650;
	Node0x2000650 -> Node0x20006c0;
	Node0x20000b0 -> Node0x20006c0;
	Node0x20006c0 -> Node0x2000730;
	Node0x1fffcb0 -> Node0x2000730;
	Node0x2000730 -> Node0x20007a0;
	Node0x2000190 -> Node0x20007a0;
	Node0x20007a0 -> Node0x2000810;
	Node0x2000310 -> Node0x2000810;
	Node0x2000810 -> Node0x2000880;
	Node0x2000420 -> Node0x2000880;
	Node0x1fffd70 -> Node0x20008f0;
	Node0x2000880 -> Node0x20008f0;
	Node0x20008f0 -> Node0x1fa0268;
	Node0x1fa0268 -> Node0x2000d90;
}
