digraph "DFG for'crackme' function" {
	Node0xc62530[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xc62be0[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0xc62ca0[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0xc62d40[shape=record, label="  %6 = sub i32 3, %5"];
	Node0xc62db0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0xc62e20[shape=record, label="  %8 = shl i32 %0, 1"];
	Node0xc62ec0[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0xc62f30[shape=record, label="  %10 = add i32 %1, 1"];
	Node0xc62fa0[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0xc63040[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0xc630b0[shape=record, label="  %13 = shl i32 %1, 1"];
	Node0xc63120[shape=record, label="  %14 = shl i32 %7, 2"];
	Node0xc631c0[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0xc63230[shape=record, label="  %16 = and i32 %9, %0"];
	Node0xc632d0[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0xc63340[shape=record, label="  %18 = shl i32 %3, 2"];
	Node0xc633b0[shape=record, label="  %19 = add i32 %10, %8"];
	Node0xc63420[shape=record, label="  %20 = add i32 %19, %7"];
	Node0xc63490[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0xc63500[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0xc63570[shape=record, label="  %23 = add i32 %22, %17"];
	Node0xc635e0[shape=record, label="  %24 = sub i32 %23, %18"];
	Node0xc63650[shape=record, label="  %25 = sub i32 %24, %15"];
	Node0xc636c0[shape=record, label="  %26 = icmp eq i32 %6, %25"];
	Node0xc03268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc63b60[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xc63bb0[shape=record, label="  ret void"];
	Node0xc62530 -> Node0xc62be0;
	Node0xc62be0 -> Node0xc62ca0;
	Node0xc62ca0 -> Node0xc62d40;
	Node0xc62d40 -> Node0xc62db0;
	Node0xc62db0 -> Node0xc62e20;
	Node0xc62e20 -> Node0xc62ec0;
	Node0xc62ec0 -> Node0xc62f30;
	Node0xc62f30 -> Node0xc62fa0;
	Node0xc62fa0 -> Node0xc63040;
	Node0xc63040 -> Node0xc630b0;
	Node0xc630b0 -> Node0xc63120;
	Node0xc63120 -> Node0xc631c0;
	Node0xc631c0 -> Node0xc63230;
	Node0xc63230 -> Node0xc632d0;
	Node0xc632d0 -> Node0xc63340;
	Node0xc63340 -> Node0xc633b0;
	Node0xc633b0 -> Node0xc63420;
	Node0xc63420 -> Node0xc63490;
	Node0xc63490 -> Node0xc63500;
	Node0xc63500 -> Node0xc63570;
	Node0xc63570 -> Node0xc635e0;
	Node0xc635e0 -> Node0xc63650;
	Node0xc63650 -> Node0xc636c0;
	Node0xc636c0 -> Node0xc03268;
	Node0xc03268 -> Node0xc63b60;
	Node0xc63b60 -> Node0xc63bb0;
edge [color=red]
	Node0xc62530 -> Node0xc62be0;
	Node0xc62be0 -> Node0xc62ca0;
	Node0xc62ca0 -> Node0xc62d40;
	Node0xc62fa0 -> Node0xc63040;
	Node0xc62db0 -> Node0xc63120;
	Node0xc63120 -> Node0xc631c0;
	Node0xc62ec0 -> Node0xc63230;
	Node0xc63230 -> Node0xc632d0;
	Node0xc62530 -> Node0xc63340;
	Node0xc62f30 -> Node0xc633b0;
	Node0xc62e20 -> Node0xc633b0;
	Node0xc633b0 -> Node0xc63420;
	Node0xc62db0 -> Node0xc63420;
	Node0xc63420 -> Node0xc63490;
	Node0xc630b0 -> Node0xc63490;
	Node0xc63490 -> Node0xc63500;
	Node0xc63040 -> Node0xc63500;
	Node0xc63500 -> Node0xc63570;
	Node0xc632d0 -> Node0xc63570;
	Node0xc63570 -> Node0xc635e0;
	Node0xc63340 -> Node0xc635e0;
	Node0xc635e0 -> Node0xc63650;
	Node0xc631c0 -> Node0xc63650;
	Node0xc62d40 -> Node0xc636c0;
	Node0xc63650 -> Node0xc636c0;
	Node0xc636c0 -> Node0xc03268;
	Node0xc03268 -> Node0xc63b60;
}
