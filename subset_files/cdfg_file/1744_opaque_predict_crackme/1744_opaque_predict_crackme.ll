; ModuleID = '../.././c_source_file/1744_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1744_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %0
  %12 = or i32 %11, %10
  %13 = add i32 %7, %12
  %14 = and i32 %11, %9
  %15 = shl i32 %14, 1
  %16 = sub i32 %13, %15
  %17 = xor i32 %3, 2147483647
  %18 = or i32 %17, %4
  %19 = shl i32 %18, 1
  %20 = xor i32 %4, %3
  %21 = xor i32 %20, -1
  %22 = or i32 %4, %3
  %23 = shl i32 %22, 1
  %24 = xor i32 %23, -2
  %25 = xor i32 %7, -1
  %26 = xor i32 %2, -1
  %27 = or i32 %26, %0
  %28 = xor i32 %1, %0
  %29 = and i32 %27, %28
  %30 = and i32 %26, %1
  %31 = xor i32 %30, -1
  %32 = xor i32 %31, %0
  %33 = or i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %11, %34
  %36 = or i32 %2, %1
  %37 = xor i32 %36, -1
  %38 = shl i32 %37, 1
  %39 = xor i32 %0, -1
  %40 = and i32 %2, %1
  %41 = and i32 %40, %39
  %42 = and i32 %36, %0
  %43 = xor i32 %41, -1
  %44 = xor i32 %42, %43
  %45 = and i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %11, %46
  %48 = and i32 %40, %0
  %49 = xor i32 %36, %0
  %50 = xor i32 %48, -1
  %51 = xor i32 %49, %50
  %52 = xor i32 %27, -1
  %53 = or i32 %45, %52
  %54 = and i32 %11, %1
  %55 = xor i32 %2, %1
  %56 = xor i32 %55, -1
  %57 = and i32 %56, %0
  %58 = or i32 %2, %0
  %59 = and i32 %58, %1
  %60 = xor i32 %11, -1
  %61 = xor i32 %34, %2
  %62 = or i32 %28, %26
  %63 = and i32 %26, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %64, %1
  %66 = xor i32 %55, %0
  %67 = shl i32 %66, 1
  %68 = and i32 %8, %2
  %69 = and i32 %68, %0
  %70 = or i32 %8, %2
  %71 = xor i32 %70, %0
  %72 = xor i32 %69, -1
  %73 = xor i32 %71, %72
  %74 = or i32 %60, %34
  %75 = and i32 %2, %0
  %76 = xor i32 %75, -1
  %77 = and i32 %76, %1
  %78 = or i32 %37, %0
  %79 = and i32 %55, %0
  %80 = xor i32 %79, %43
  %81 = xor i32 %48, %66
  %82 = shl i32 %81, 1
  %83 = or i32 %26, %1
  %84 = xor i32 %83, -1
  %85 = or i32 %45, %84
  %86 = or i32 %56, %39
  %87 = and i32 %28, %64
  %88 = xor i32 %58, %1
  %89 = and i32 %8, %0
  %90 = xor i32 %89, -1
  %91 = and i32 %60, %90
  %92 = or i32 %36, %0
  %93 = and i32 %60, %46
  %94 = xor i32 %58, -1
  %95 = or i32 %94, %1
  %96 = and i32 %55, %39
  %97 = xor i32 %96, %50
  %98 = and i32 %9, %56
  %99 = xor i32 %28, -1
  %100 = or i32 %94, %99
  %101 = or i32 %11, %99
  %102 = add i32 %28, 1
  %103 = and i32 %64, %99
  %104 = and i32 %28, %60
  %105 = shl i32 %104, 1
  %106 = and i32 %26, %46
  %107 = or i32 %63, %84
  %108 = or i32 %45, %94
  %109 = and i32 %33, %60
  %110 = xor i32 %89, %2
  %111 = shl i32 %110, 1
  %112 = xor i32 %75, %36
  %113 = shl i32 %112, 1
  %114 = or i32 %69, %71
  %115 = or i32 %28, %94
  %116 = and i32 %26, %99
  %117 = and i32 %83, %39
  %118 = and i32 %55, %9
  %119 = or i32 %56, %10
  %120 = or i32 %31, %39
  %121 = and i32 %33, %2
  %122 = or i32 %75, %28
  %123 = or i32 %55, %89
  %124 = and i32 %9, %60
  %125 = xor i32 %33, %2
  %126 = shl i32 %52, 1
  %127 = and i32 %70, %39
  %128 = or i32 %69, %127
  %129 = or i32 %84, %0
  %130 = and i32 %56, %39
  %131 = shl i32 %130, 1
  %132 = shl i32 %56, 1
  %133 = and i32 %58, %8
  %134 = or i32 %75, %34
  %135 = shl i32 %134, 1
  %136 = or i32 %28, %60
  %137 = and i32 %83, %0
  %138 = and i32 %55, %46
  %139 = or i32 %10, %2
  %140 = xor i32 %27, %1
  %141 = or i32 %63, %99
  %142 = and i32 %55, %33
  %143 = or i32 %26, %34
  %144 = and i32 %90, %2
  %145 = or i32 %60, %1
  %146 = or i32 %41, %79
  %147 = and i32 %9, %2
  %148 = xor i32 %40, -1
  %149 = xor i32 %89, %148
  %150 = or i32 %63, %8
  %151 = or i32 %30, %89
  %152 = or i32 %45, %26
  %153 = or i32 %52, %8
  %154 = shl i32 %153, 1
  %155 = or i32 %40, %0
  %156 = xor i32 %46, %2
  %157 = xor i32 %83, %0
  %158 = or i32 %55, %0
  %159 = xor i32 %158, -1
  %160 = or i32 %69, %159
  %161 = and i32 %9, %26
  %162 = and i32 %60, %8
  %163 = xor i32 %37, %0
  %164 = and i32 %11, %8
  %165 = or i32 %63, %28
  %166 = and i32 %28, %26
  %167 = and i32 %148, %0
  %168 = or i32 %94, %8
  %169 = and i32 %64, %1
  %170 = and i32 %27, %8
  %171 = xor i32 %75, %9
  %172 = or i32 %48, %96
  %173 = or i32 %89, %26
  %174 = shl i32 %173, 1
  %175 = or i32 %41, %42
  %176 = xor i32 %66, %72
  %177 = or i32 %99, %2
  %178 = xor i32 %94, %1
  %179 = shl i32 %178, 1
  %180 = and i32 %56, %90
  %181 = or i32 %89, %2
  %182 = add i32 %63, 1
  %183 = or i32 %26, %10
  %184 = xor i32 %76, %1
  %185 = or i32 %63, %1
  %186 = shl i32 %185, 1
  %187 = or i32 %36, %39
  %188 = xor i32 %58, %45
  %189 = and i32 %64, %8
  %190 = and i32 %99, %2
  %191 = and i32 %36, %39
  %192 = xor i32 %191, %50
  %193 = or i32 %45, %60
  %194 = and i32 %27, %1
  %195 = xor i32 %63, %83
  %196 = shl i32 %195, 1
  %197 = or i32 %89, %60
  %198 = or i32 %45, %37
  %199 = and i32 %58, %28
  %200 = and i32 %68, %39
  %201 = and i32 %70, %0
  %202 = or i32 %200, %201
  %203 = or i32 %37, %39
  %204 = or i32 %28, %2
  %205 = or i32 %60, %8
  %206 = or i32 %30, %0
  %207 = or i32 %69, %66
  %208 = shl i32 %207, 1
  %209 = or i32 %11, %1
  %210 = or i32 %55, %45
  %211 = or i32 %26, %99
  %212 = or i32 %75, %30
  %213 = and i32 %11, %28
  %214 = or i32 %55, %39
  %215 = xor i32 %214, 2147483647
  %216 = or i32 %215, %200
  %217 = or i32 %30, %39
  %218 = and i32 %58, %99
  %219 = or i32 %55, %34
  %220 = or i32 %11, %45
  %221 = xor i32 %10, %2
  %222 = xor i32 %75, %31
  %223 = shl i32 %222, 1
  %224 = or i32 %89, %56
  %225 = or i32 %45, %56
  %226 = or i32 %83, %39
  %227 = or i32 %56, %34
  %228 = and i32 %33, %26
  %229 = xor i32 %40, %0
  %230 = shl i32 %148, 1
  %231 = xor i32 %30, %0
  %232 = shl i32 %231, 1
  %233 = and i32 %76, %99
  %234 = or i32 %48, %191
  %235 = shl i32 %234, 2
  %236 = and i32 %76, %8
  %237 = and i32 %11, %90
  %238 = or i32 %52, %99
  %239 = xor i32 %90, %2
  %240 = xor i32 %9, %2
  %241 = or i32 %75, %99
  %242 = add i32 %83, 1
  %243 = or i32 %75, %8
  %244 = xor i32 %56, %0
  %245 = or i32 %52, %1
  %246 = and i32 %31, %39
  %247 = or i32 %11, %28
  %248 = shl i32 %247, 1
  %249 = xor i32 %200, %214
  %250 = shl i32 %249, 1
  %251 = and i32 %55, %90
  %252 = or i32 %84, %39
  %253 = xor i32 %36, %45
  %254 = xor i32 %27, %45
  %255 = or i32 %31, %0
  %256 = or i32 %60, %10
  %257 = and i32 %27, %99
  %258 = or i32 %55, %10
  %259 = shl i32 %258, 1
  %260 = or i32 %28, %52
  %261 = and i32 %11, %33
  %262 = shl i32 %261, 1
  %263 = and i32 %28, %76
  %264 = and i32 %37, %39
  %265 = and i32 %30, %39
  %266 = mul i32 %265, -6
  %267 = and i32 %37, %0
  %268 = and i32 %30, %0
  %269 = and i32 %84, %39
  %270 = shl i32 %269, 3
  %271 = and i32 %84, %0
  %272 = mul i32 %48, -22
  %273 = add i32 %204, %39
  %274 = add i32 %273, %75
  %275 = add i32 %274, %63
  %276 = add i32 %275, %147
  %277 = add i32 %276, %60
  %278 = add i32 %211, %1
  %279 = add i32 %278, %30
  %280 = sub i32 %279, %168
  %281 = sub i32 %280, %151
  %282 = add i32 %281, %25
  %283 = sub i32 %282, %146
  %284 = mul i32 %283, 3
  %285 = add i32 %193, %139
  %286 = sub i32 %285, %264
  %287 = sub i32 %286, %184
  %288 = sub i32 %287, %53
  %289 = mul i32 %288, 5
  %290 = sub i32 %41, %268
  %291 = add i32 %290, %267
  %292 = mul i32 %291, 14
  %293 = add i32 %219, %120
  %294 = shl i32 %293, 2
  %295 = add i32 %277, %3
  %296 = add i32 %295, %257
  %297 = add i32 %296, %241
  %298 = add i32 %297, %226
  %299 = add i32 %298, %49
  %300 = add i32 %299, %198
  %301 = add i32 %300, %158
  %302 = add i32 %301, %95
  %303 = add i32 %302, %85
  %304 = add i32 %303, %35
  %305 = add i32 %304, %216
  %306 = shl i32 %305, 1
  %307 = add i32 %0, %1
  %308 = sub i32 %307, %2
  %309 = sub i32 %308, %33
  %310 = add i32 %309, %90
  %311 = add i32 %310, %102
  %312 = add i32 %311, %45
  %313 = add i32 %312, %26
  %314 = add i32 %313, %28
  %315 = add i32 %314, %61
  %316 = sub i32 %315, %62
  %317 = add i32 %316, %27
  %318 = sub i32 %317, %106
  %319 = sub i32 %318, %116
  %320 = add i32 %319, %121
  %321 = sub i32 %320, %125
  %322 = add i32 %321, %76
  %323 = add i32 %322, %58
  %324 = sub i32 %323, %143
  %325 = add i32 %324, %144
  %326 = sub i32 %325, %152
  %327 = sub i32 %326, %156
  %328 = add i32 %327, %161
  %329 = sub i32 %328, %166
  %330 = add i32 %329, %177
  %331 = add i32 %330, %181
  %332 = add i32 %331, %182
  %333 = add i32 %332, %183
  %334 = sub i32 %333, %190
  %335 = sub i32 %334, %11
  %336 = sub i32 %335, %221
  %337 = add i32 %336, %228
  %338 = add i32 %337, %40
  %339 = add i32 %338, %239
  %340 = sub i32 %339, %240
  %341 = add i32 %340, %242
  %342 = add i32 %341, %83
  %343 = sub i32 %342, %29
  %344 = sub i32 %343, %32
  %345 = sub i32 %344, %38
  %346 = add i32 %345, %47
  %347 = add i32 %346, %54
  %348 = sub i32 %347, %57
  %349 = add i32 %348, %59
  %350 = add i32 %349, %65
  %351 = add i32 %350, %74
  %352 = add i32 %351, %77
  %353 = sub i32 %352, %78
  %354 = sub i32 %353, %86
  %355 = sub i32 %354, %87
  %356 = sub i32 %355, %88
  %357 = add i32 %356, %91
  %358 = add i32 %357, %92
  %359 = add i32 %358, %93
  %360 = add i32 %359, %98
  %361 = add i32 %360, %100
  %362 = add i32 %361, %101
  %363 = sub i32 %362, %103
  %364 = sub i32 %363, %107
  %365 = add i32 %364, %108
  %366 = sub i32 %365, %109
  %367 = sub i32 %366, %111
  %368 = sub i32 %367, %79
  %369 = add i32 %368, %115
  %370 = add i32 %369, %42
  %371 = sub i32 %370, %117
  %372 = sub i32 %371, %118
  %373 = add i32 %372, %119
  %374 = sub i32 %373, %122
  %375 = sub i32 %374, %123
  %376 = sub i32 %375, %124
  %377 = sub i32 %376, %126
  %378 = add i32 %377, %129
  %379 = sub i32 %378, %132
  %380 = add i32 %379, %133
  %381 = sub i32 %380, %136
  %382 = add i32 %381, %137
  %383 = add i32 %382, %138
  %384 = add i32 %383, %140
  %385 = sub i32 %384, %141
  %386 = add i32 %385, %142
  %387 = add i32 %386, %145
  %388 = add i32 %387, %149
  %389 = add i32 %388, %150
  %390 = add i32 %389, %155
  %391 = sub i32 %390, %157
  %392 = add i32 %391, %162
  %393 = sub i32 %392, %163
  %394 = add i32 %393, %164
  %395 = sub i32 %394, %165
  %396 = sub i32 %395, %167
  %397 = add i32 %396, %169
  %398 = sub i32 %397, %170
  %399 = add i32 %398, %171
  %400 = sub i32 %399, %174
  %401 = add i32 %400, %180
  %402 = sub i32 %401, %187
  %403 = add i32 %402, %188
  %404 = add i32 %403, %189
  %405 = add i32 %404, %194
  %406 = sub i32 %405, %197
  %407 = sub i32 %406, %199
  %408 = sub i32 %407, %203
  %409 = sub i32 %408, %205
  %410 = add i32 %409, %206
  %411 = sub i32 %410, %209
  %412 = sub i32 %411, %210
  %413 = add i32 %412, %212
  %414 = sub i32 %413, %213
  %415 = sub i32 %414, %217
  %416 = add i32 %415, %218
  %417 = sub i32 %416, %220
  %418 = add i32 %417, %96
  %419 = sub i32 %418, %224
  %420 = sub i32 %419, %225
  %421 = add i32 %420, %227
  %422 = sub i32 %421, %229
  %423 = sub i32 %422, %230
  %424 = sub i32 %423, %233
  %425 = add i32 %424, %236
  %426 = add i32 %425, %237
  %427 = sub i32 %426, %238
  %428 = add i32 %427, %243
  %429 = sub i32 %428, %244
  %430 = add i32 %429, %245
  %431 = sub i32 %430, %246
  %432 = sub i32 %431, %251
  %433 = add i32 %432, %252
  %434 = sub i32 %433, %253
  %435 = add i32 %434, %254
  %436 = add i32 %435, %255
  %437 = add i32 %436, %256
  %438 = sub i32 %437, %260
  %439 = add i32 %438, %263
  %440 = sub i32 %439, %271
  %441 = sub i32 %440, %20
  %442 = add i32 %441, %21
  %443 = sub i32 %442, %44
  %444 = sub i32 %443, %51
  %445 = sub i32 %444, %67
  %446 = add i32 %445, %73
  %447 = add i32 %446, %80
  %448 = add i32 %447, %97
  %449 = sub i32 %448, %105
  %450 = sub i32 %449, %113
  %451 = sub i32 %450, %114
  %452 = sub i32 %451, %128
  %453 = sub i32 %452, %131
  %454 = sub i32 %453, %135
  %455 = sub i32 %454, %154
  %456 = add i32 %455, %160
  %457 = sub i32 %456, %172
  %458 = sub i32 %457, %175
  %459 = sub i32 %458, %176
  %460 = sub i32 %459, %179
  %461 = sub i32 %460, %186
  %462 = add i32 %461, %192
  %463 = sub i32 %462, %196
  %464 = sub i32 %463, %202
  %465 = sub i32 %464, %223
  %466 = sub i32 %465, %232
  %467 = sub i32 %466, %248
  %468 = sub i32 %467, %259
  %469 = sub i32 %468, %262
  %470 = add i32 %469, %266
  %471 = add i32 %470, %270
  %472 = add i32 %471, %272
  %473 = sub i32 %472, %19
  %474 = sub i32 %473, %82
  %475 = sub i32 %474, %208
  %476 = sub i32 %475, %235
  %477 = sub i32 %476, %250
  %478 = add i32 %477, %294
  %479 = add i32 %478, %24
  %480 = add i32 %479, %292
  %481 = add i32 %480, %289
  %482 = add i32 %481, %284
  %483 = add i32 %482, %306
  %484 = icmp eq i32 %16, %483
  %485 = select i1 %484, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %486 = tail call i32 @puts(i8* nonnull dereferenceable(1) %485)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
