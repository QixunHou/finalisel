digraph "DFG for'main' function" {
	Node0x243d1e8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x243d268[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x243d2f8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x243d358[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x243d7d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x243d8b8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x243d9b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x243da78[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x243db28[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x243dd88[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x243de48[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x243edb8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x243f428[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x243f520[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x243f728[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x243f888[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x243f998[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x243fa58[shape=record, label="  ret i32 0"];
	Node0x243d1e8 -> Node0x243d268;
	Node0x243d268 -> Node0x243d2f8;
	Node0x243d2f8 -> Node0x243d358;
	Node0x243d358 -> Node0x243d7d8;
	Node0x243d7d8 -> Node0x243d8b8;
	Node0x243d8b8 -> Node0x243d9b8;
	Node0x243d9b8 -> Node0x243da78;
	Node0x243da78 -> Node0x243db28;
	Node0x243db28 -> Node0x243dd88;
	Node0x243dd88 -> Node0x243de48;
	Node0x243de48 -> Node0x243edb8;
	Node0x243edb8 -> Node0x243f428;
	Node0x243f428 -> Node0x243f520;
	Node0x243f520 -> Node0x243f728;
	Node0x243f728 -> Node0x243f888;
	Node0x243f888 -> Node0x243f998;
	Node0x243f998 -> Node0x243fa58;
edge [color=red]
	Node0x243d1e8 -> Node0x243d358;
	Node0x243d358 -> Node0x243d7d8;
	Node0x243d268 -> Node0x243d8b8;
	Node0x243d8b8 -> Node0x243d9b8;
	Node0x243d2f8 -> Node0x243da78;
	Node0x243da78 -> Node0x243db28;
	Node0x243d1e8 -> Node0x243dd88;
	Node0x243d268 -> Node0x243dd88;
	Node0x243d2f8 -> Node0x243dd88;
	Node0x243d1e8 -> Node0x243de48;
	Node0x243d268 -> Node0x243edb8;
	Node0x243d2f8 -> Node0x243f428;
	Node0x243de48 -> Node0x243f520;
	Node0x243edb8 -> Node0x243f520;
	Node0x243f428 -> Node0x243f520;
	Node0x243da78 -> Node0x243f728;
	Node0x243d8b8 -> Node0x243f888;
	Node0x243d358 -> Node0x243f998;
}
