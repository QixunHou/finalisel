; ModuleID = '../.././c_source_file/0610_path_condition_crackme.c'
source_filename = "../.././c_source_file/0610_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %5, %1
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = and i32 %8, %2
  %10 = sub i32 %6, %9
  %11 = or i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %7
  %14 = xor i32 %2, %0
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %1
  %17 = xor i32 %2, -1
  %18 = and i32 %17, %0
  %19 = or i32 %18, %1
  %20 = and i32 %2, %1
  %21 = and i32 %20, %0
  %22 = xor i32 %0, -1
  %23 = xor i32 %2, %1
  %24 = and i32 %23, %22
  %25 = or i32 %21, %24
  %26 = shl i32 %20, 1
  %27 = and i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %2
  %30 = and i32 %15, %28
  %31 = or i32 %1, %0
  %32 = and i32 %31, %2
  %33 = and i32 %7, %0
  %34 = and i32 %17, %1
  %35 = xor i32 %34, -1
  %36 = xor i32 %33, %35
  %37 = shl i32 %36, 1
  %38 = xor i32 %27, %2
  %39 = or i32 %17, %0
  %40 = xor i32 %39, %27
  %41 = and i32 %7, %2
  %42 = and i32 %41, %0
  %43 = or i32 %7, %2
  %44 = and i32 %43, %22
  %45 = xor i32 %42, -1
  %46 = xor i32 %44, %45
  %47 = and i32 %35, %22
  %48 = xor i32 %11, %27
  %49 = and i32 %23, %8
  %50 = or i32 %17, %1
  %51 = xor i32 %50, -1
  %52 = or i32 %18, %51
  %53 = xor i32 %39, -1
  %54 = or i32 %53, %1
  %55 = shl i32 %54, 1
  %56 = add i32 %14, 1
  %57 = and i32 %8, %17
  %58 = or i32 %2, %1
  %59 = xor i32 %58, %0
  %60 = xor i32 %59, -1
  %61 = xor i32 %21, %60
  %62 = xor i32 %31, -1
  %63 = or i32 %14, %62
  %64 = shl i32 %63, 1
  %65 = xor i32 %1, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %4, %66
  %68 = or i32 %14, %33
  %69 = xor i32 %33, %2
  %70 = and i32 %14, %28
  %71 = or i32 %65, %53
  %72 = and i32 %15, %66
  %73 = or i32 %20, %33
  %74 = shl i32 %73, 1
  %75 = or i32 %34, %0
  %76 = xor i32 %23, %0
  %77 = or i32 %42, %76
  %78 = or i32 %18, %7
  %79 = xor i32 %18, -1
  %80 = and i32 %79, %1
  %81 = or i32 %4, %65
  %82 = xor i32 %21, %76
  %83 = xor i32 %8, -1
  %84 = xor i32 %83, %2
  %85 = and i32 %65, %79
  %86 = and i32 %11, %7
  %87 = or i32 %15, %83
  %88 = shl i32 %87, 1
  %89 = and i32 %5, %7
  %90 = add i32 %18, 1
  %91 = xor i32 %4, %35
  %92 = xor i32 %4, %1
  %93 = or i32 %27, %2
  %94 = or i32 %66, %2
  %95 = or i32 %14, %66
  %96 = xor i32 %58, 1073741823
  %97 = or i32 %96, %0
  %98 = xor i32 %97, %21
  %99 = or i32 %33, %15
  %100 = or i32 %33, %17
  %101 = shl i32 %100, 2
  %102 = xor i32 %20, -1
  %103 = and i32 %102, %0
  %104 = xor i32 %50, %0
  %105 = or i32 %15, %7
  %106 = xor i32 %33, -1
  %107 = and i32 %106, %2
  %108 = or i32 %27, %17
  %109 = and i32 %17, %28
  %110 = or i32 %58, %0
  %111 = or i32 %14, %1
  %112 = xor i32 %23, -1
  %113 = add i32 %23, 1
  %114 = or i32 %23, %62
  %115 = and i32 %31, %112
  %116 = or i32 %112, %0
  %117 = or i32 %15, %62
  %118 = xor i32 %18, %102
  %119 = or i32 %17, %66
  %120 = or i32 %50, %0
  %121 = and i32 %14, %65
  %122 = and i32 %39, %65
  %123 = xor i32 %18, %50
  %124 = xor i32 %79, %1
  %125 = shl i32 %124, 1
  %126 = and i32 %23, %31
  %127 = and i32 %41, %22
  %128 = and i32 %43, %0
  %129 = or i32 %127, %128
  %130 = or i32 %27, %53
  %131 = shl i32 %7, 1
  %132 = or i32 %27, %15
  %133 = shl i32 %62, 1
  %134 = or i32 %4, %83
  %135 = or i32 %62, %2
  %136 = or i32 %53, %7
  %137 = xor i32 %39, %1
  %138 = xor i32 %34, %0
  %139 = xor i32 %58, -1
  %140 = xor i32 %139, %0
  %141 = and i32 %14, %7
  %142 = xor i32 %12, %1
  %143 = xor i32 %18, %1
  %144 = or i32 %14, %83
  %145 = xor i32 %62, %2
  %146 = or i32 %12, %1
  %147 = or i32 %23, %22
  %148 = xor i32 %127, %147
  %149 = xor i32 %147, 2147483647
  %150 = or i32 %149, %127
  %151 = shl i32 %150, 1
  %152 = and i32 %58, %0
  %153 = add i32 %39, 1
  %154 = xor i32 %112, %0
  %155 = shl i32 %154, 1
  %156 = or i32 %51, %0
  %157 = or i32 %51, %22
  %158 = or i32 %23, %33
  %159 = and i32 %20, %22
  %160 = or i32 %159, %152
  %161 = and i32 %65, %15
  %162 = shl i32 %161, 2
  %163 = and i32 %35, %0
  %164 = and i32 %15, %7
  %165 = xor i32 %11, %1
  %166 = or i32 %4, %1
  %167 = add i32 %33, 1
  %168 = or i32 %65, %15
  %169 = or i32 %27, %139
  %170 = xor i32 %4, %58
  %171 = or i32 %65, %17
  %172 = shl i32 %171, 1
  %173 = or i32 %33, %112
  %174 = or i32 %4, %34
  %175 = or i32 %112, %22
  %176 = and i32 %79, %7
  %177 = xor i32 %76, %45
  %178 = or i32 %42, %44
  %179 = xor i32 %24, 2147483647
  %180 = xor i32 %179, %21
  %181 = shl i32 %180, 1
  %182 = or i32 %112, %62
  %183 = and i32 %23, %106
  %184 = or i32 %12, %66
  %185 = and i32 %66, %2
  %186 = and i32 %50, %0
  %187 = xor i32 %51, %0
  %188 = and i32 %14, %1
  %189 = and i32 %112, %106
  %190 = shl i32 %189, 1
  %191 = xor i32 %152, 2147483647
  %192 = xor i32 %191, %159
  %193 = shl i32 %192, 1
  %194 = or i32 %35, %0
  %195 = or i32 %27, %51
  %196 = and i32 %14, %106
  %197 = and i32 %39, %7
  %198 = xor i32 %31, %2
  %199 = or i32 %4, %7
  %200 = and i32 %79, %66
  %201 = or i32 %139, %0
  %202 = or i32 %4, %62
  %203 = xor i32 %45, %0
  %204 = xor i32 %203, %43
  %205 = or i32 %102, %0
  %206 = shl i32 %205, 1
  %207 = or i32 %17, %62
  %208 = and i32 %139, %22
  %209 = mul i32 %208, 11
  %210 = and i32 %34, %22
  %211 = mul i32 %210, 34
  %212 = and i32 %139, %0
  %213 = and i32 %34, %0
  %214 = and i32 %51, %22
  %215 = shl i32 %214, 1
  %216 = mul i32 %21, 6
  %217 = add i32 %2, %0
  %218 = add i32 %217, %50
  %219 = add i32 %218, %185
  %220 = add i32 %219, %94
  %221 = add i32 %220, %34
  %222 = add i32 %221, %38
  %223 = add i32 %222, %202
  %224 = add i32 %223, %188
  %225 = add i32 %224, %182
  %226 = add i32 %225, %152
  %227 = add i32 %226, %134
  %228 = add i32 %227, %123
  %229 = add i32 %228, %120
  %230 = add i32 %229, %89
  %231 = add i32 %230, %67
  %232 = add i32 %231, %178
  %233 = shl i32 %232, 1
  %234 = sub i32 %90, %119
  %235 = add i32 %234, %47
  %236 = sub i32 %235, %159
  %237 = mul i32 %236, 3
  %238 = sub i32 %95, %1
  %239 = add i32 %238, %116
  %240 = sub i32 %239, %19
  %241 = mul i32 %240, 5
  %242 = add i32 %68, %85
  %243 = add i32 %242, %98
  %244 = shl i32 %243, 2
  %245 = add i32 %213, %212
  %246 = mul i32 %245, 7
  %247 = add i32 %31, %131
  %248 = sub i32 %83, %247
  %249 = add i32 %248, %167
  %250 = add i32 %249, %66
  %251 = sub i32 %250, %29
  %252 = sub i32 %251, %32
  %253 = sub i32 %252, %11
  %254 = add i32 %253, %56
  %255 = sub i32 %254, %57
  %256 = add i32 %255, %69
  %257 = sub i32 %256, %84
  %258 = sub i32 %257, %93
  %259 = add i32 %258, %107
  %260 = add i32 %259, %108
  %261 = sub i32 %260, %109
  %262 = add i32 %261, %113
  %263 = sub i32 %262, %18
  %264 = sub i32 %263, %133
  %265 = sub i32 %264, %58
  %266 = sub i32 %265, %135
  %267 = sub i32 %266, %145
  %268 = add i32 %267, %35
  %269 = add i32 %268, %153
  %270 = add i32 %269, %139
  %271 = sub i32 %270, %39
  %272 = add i32 %271, %23
  %273 = add i32 %272, %14
  %274 = sub i32 %273, %198
  %275 = sub i32 %274, %207
  %276 = sub i32 %275, %16
  %277 = sub i32 %276, %13
  %278 = sub i32 %277, %26
  %279 = sub i32 %278, %30
  %280 = sub i32 %279, %40
  %281 = add i32 %280, %48
  %282 = add i32 %281, %49
  %283 = add i32 %282, %52
  %284 = add i32 %283, %70
  %285 = add i32 %284, %71
  %286 = sub i32 %285, %72
  %287 = sub i32 %286, %75
  %288 = sub i32 %287, %78
  %289 = add i32 %288, %80
  %290 = add i32 %289, %81
  %291 = sub i32 %290, %86
  %292 = add i32 %291, %91
  %293 = add i32 %292, %92
  %294 = add i32 %293, %99
  %295 = sub i32 %294, %101
  %296 = sub i32 %295, %103
  %297 = sub i32 %296, %104
  %298 = sub i32 %297, %105
  %299 = sub i32 %298, %110
  %300 = sub i32 %299, %111
  %301 = sub i32 %300, %114
  %302 = sub i32 %301, %115
  %303 = add i32 %302, %117
  %304 = add i32 %303, %118
  %305 = add i32 %304, %121
  %306 = sub i32 %305, %122
  %307 = add i32 %306, %126
  %308 = sub i32 %307, %130
  %309 = sub i32 %308, %132
  %310 = add i32 %309, %136
  %311 = sub i32 %310, %137
  %312 = add i32 %311, %59
  %313 = add i32 %312, %138
  %314 = add i32 %313, %140
  %315 = sub i32 %314, %141
  %316 = sub i32 %315, %142
  %317 = add i32 %316, %143
  %318 = sub i32 %317, %144
  %319 = sub i32 %318, %146
  %320 = add i32 %319, %156
  %321 = add i32 %320, %157
  %322 = add i32 %321, %158
  %323 = add i32 %322, %163
  %324 = add i32 %323, %164
  %325 = sub i32 %324, %165
  %326 = add i32 %325, %166
  %327 = sub i32 %326, %168
  %328 = add i32 %327, %169
  %329 = sub i32 %328, %170
  %330 = sub i32 %329, %172
  %331 = add i32 %330, %173
  %332 = sub i32 %331, %174
  %333 = sub i32 %332, %175
  %334 = sub i32 %333, %176
  %335 = sub i32 %334, %183
  %336 = add i32 %335, %184
  %337 = sub i32 %336, %186
  %338 = add i32 %337, %187
  %339 = add i32 %338, %194
  %340 = add i32 %339, %195
  %341 = sub i32 %340, %196
  %342 = sub i32 %341, %197
  %343 = add i32 %342, %199
  %344 = add i32 %343, %200
  %345 = sub i32 %344, %201
  %346 = sub i32 %345, %25
  %347 = sub i32 %346, %37
  %348 = add i32 %347, %46
  %349 = sub i32 %348, %55
  %350 = sub i32 %349, %61
  %351 = sub i32 %350, %64
  %352 = sub i32 %351, %74
  %353 = sub i32 %352, %77
  %354 = sub i32 %353, %82
  %355 = sub i32 %354, %88
  %356 = sub i32 %355, %125
  %357 = sub i32 %356, %129
  %358 = sub i32 %357, %148
  %359 = sub i32 %358, %155
  %360 = sub i32 %359, %160
  %361 = sub i32 %360, %162
  %362 = add i32 %361, %177
  %363 = sub i32 %362, %190
  %364 = add i32 %363, %204
  %365 = sub i32 %364, %206
  %366 = add i32 %365, %209
  %367 = add i32 %366, %211
  %368 = sub i32 %367, %215
  %369 = add i32 %368, %216
  %370 = add i32 %369, %246
  %371 = sub i32 %370, %151
  %372 = sub i32 %371, %181
  %373 = sub i32 %372, %193
  %374 = add i32 %373, %237
  %375 = add i32 %374, %241
  %376 = add i32 %375, %244
  %377 = add i32 %376, %233
  %378 = icmp eq i32 %10, %377
  %379 = select i1 %378, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %380 = tail call i32 @puts(i8* nonnull dereferenceable(1) %379)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
