; ModuleID = '../.././c_source_file/0086_path_condition_crackme.c'
source_filename = "../.././c_source_file/0086_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %1
  %6 = xor i32 %5, -1
  %7 = or i32 %6, %0
  %8 = and i32 %1, %0
  %9 = or i32 %2, %0
  %10 = xor i32 %9, %8
  %11 = xor i32 %2, %1
  %12 = or i32 %11, %8
  %13 = xor i32 %0, -1
  %14 = and i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %13
  %17 = and i32 %4, %1
  %18 = xor i32 %17, -1
  %19 = xor i32 %18, %0
  %20 = shl i32 %19, 1
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %4, %22
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %2
  %26 = and i32 %25, %13
  %27 = xor i32 %11, -1
  %28 = and i32 %27, %0
  %29 = or i32 %26, %28
  %30 = xor i32 %2, %0
  %31 = or i32 %30, %22
  %32 = xor i32 %9, -1
  %33 = or i32 %32, %22
  %34 = and i32 %4, %0
  %35 = xor i32 %8, -1
  %36 = and i32 %27, %35
  %37 = add i32 %5, 1
  %38 = and i32 %2, %0
  %39 = or i32 %38, %21
  %40 = and i32 %24, %0
  %41 = xor i32 %40, -1
  %42 = and i32 %30, %41
  %43 = xor i32 %34, -1
  %44 = and i32 %43, %1
  %45 = or i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %30, %46
  %48 = or i32 %27, %0
  %49 = or i32 %2, %1
  %50 = xor i32 %49, %8
  %51 = shl i32 %50, 1
  %52 = or i32 %21, %2
  %53 = and i32 %9, %1
  %54 = or i32 %21, %4
  %55 = shl i32 %54, 1
  %56 = and i32 %25, %0
  %57 = xor i32 %11, %0
  %58 = or i32 %56, %57
  %59 = or i32 %46, %2
  %60 = xor i32 %38, -1
  %61 = or i32 %6, %13
  %62 = or i32 %24, %2
  %63 = and i32 %62, %13
  %64 = or i32 %56, %63
  %65 = or i32 %40, %2
  %66 = and i32 %30, %22
  %67 = or i32 %4, %46
  %68 = or i32 %24, %0
  %69 = xor i32 %68, -1
  %70 = or i32 %27, %69
  %71 = or i32 %4, %0
  %72 = xor i32 %71, -1
  %73 = or i32 %4, %69
  %74 = or i32 %69, %2
  %75 = or i32 %11, %40
  %76 = and i32 %45, %2
  %77 = and i32 %71, %1
  %78 = shl i32 %77, 1
  %79 = or i32 %34, %22
  %80 = xor i32 %5, %8
  %81 = or i32 %4, %22
  %82 = and i32 %9, %24
  %83 = xor i32 %30, -1
  %84 = or i32 %83, %24
  %85 = xor i32 %46, %2
  %86 = or i32 %15, %0
  %87 = or i32 %18, %0
  %88 = xor i32 %34, %1
  %89 = xor i32 %27, %0
  %90 = or i32 %72, %24
  %91 = or i32 %30, %8
  %92 = or i32 %83, %46
  %93 = and i32 %45, %27
  %94 = or i32 %83, %69
  %95 = shl i32 %94, 1
  %96 = xor i32 %57, -1
  %97 = xor i32 %56, %96
  %98 = or i32 %8, %6
  %99 = or i32 %21, %72
  %100 = or i32 %32, %1
  %101 = shl i32 %100, 1
  %102 = or i32 %8, %27
  %103 = and i32 %49, %0
  %104 = or i32 %14, %13
  %105 = and i32 %14, %0
  %106 = xor i32 %105, %57
  %107 = and i32 %11, %41
  %108 = xor i32 %32, %1
  %109 = and i32 %71, %22
  %110 = xor i32 %69, %2
  %111 = shl i32 %110, 1
  %112 = xor i32 %49, -1
  %113 = xor i32 %71, %8
  %114 = shl i32 %113, 1
  %115 = or i32 %17, %40
  %116 = and i32 %9, %22
  %117 = and i32 %60, %24
  %118 = and i32 %83, %24
  %119 = or i32 %21, %83
  %120 = and i32 %30, %21
  %121 = or i32 %34, %1
  %122 = and i32 %4, %41
  %123 = or i32 %11, %0
  %124 = and i32 %30, %1
  %125 = xor i32 %49, %0
  %126 = shl i32 %125, 1
  %127 = or i32 %72, %1
  %128 = or i32 %30, %21
  %129 = xor i32 %5, %0
  %130 = or i32 %38, %69
  %131 = and i32 %15, %13
  %132 = xor i32 %56, %123
  %133 = or i32 %30, %1
  %134 = xor i32 %34, %5
  %135 = and i32 %49, %13
  %136 = shl i32 %135, 1
  %137 = xor i32 %62, %0
  %138 = xor i32 %137, 2147483647
  %139 = xor i32 %138, %56
  %140 = or i32 %30, %40
  %141 = shl i32 %140, 2
  %142 = and i32 %71, %21
  %143 = shl i32 %4, 1
  %144 = or i32 %18, %13
  %145 = or i32 %38, %1
  %146 = or i32 %112, %13
  %147 = or i32 %30, %24
  %148 = and i32 %11, %45
  %149 = add i32 %68, 1
  %150 = xor i32 %41, %2
  %151 = shl i32 %150, 1
  %152 = or i32 %27, %46
  %153 = shl i32 %152, 2
  %154 = and i32 %5, %13
  %155 = xor i32 %9, %1
  %156 = xor i32 %71, %1
  %157 = or i32 %40, %27
  %158 = and i32 %11, %35
  %159 = or i32 %11, %69
  %160 = xor i32 %105, 2147483647
  %161 = xor i32 %160, %125
  %162 = shl i32 %161, 1
  %163 = xor i32 %17, %0
  %164 = xor i32 %45, %2
  %165 = or i32 %32, %24
  %166 = or i32 %56, %137
  %167 = shl i32 %166, 1
  %168 = or i32 %14, %0
  %169 = or i32 %105, %135
  %170 = add i32 %17, 1
  %171 = and i32 %11, %13
  %172 = xor i32 %160, %171
  %173 = and i32 %21, %83
  %174 = add i32 %8, 1
  %175 = xor i32 %38, %18
  %176 = and i32 %14, %13
  %177 = and i32 %11, %0
  %178 = or i32 %176, %177
  %179 = xor i32 %60, %1
  %180 = and i32 %83, %1
  %181 = and i32 %68, %2
  %182 = add i32 %1, 1
  %183 = or i32 %49, %13
  %184 = or i32 %21, %32
  %185 = or i32 %34, %14
  %186 = or i32 %38, %17
  %187 = xor i32 %34, %15
  %188 = xor i32 %40, %18
  %189 = or i32 %40, %83
  %190 = or i32 %38, %22
  %191 = or i32 %5, %0
  %192 = and i32 %60, %22
  %193 = xor i32 %63, -1
  %194 = xor i32 %56, %193
  %195 = and i32 %15, %0
  %196 = or i32 %17, %13
  %197 = or i32 %27, %13
  %198 = and i32 %83, %35
  %199 = shl i32 %198, 1
  %200 = or i32 %72, %22
  %201 = or i32 %11, %46
  %202 = and i32 %9, %21
  %203 = and i32 %27, %13
  %204 = and i32 %4, %35
  %205 = or i32 %105, %125
  %206 = or i32 %8, %72
  %207 = and i32 %30, %45
  %208 = and i32 %83, %22
  %209 = xor i32 %68, %2
  %210 = shl i32 %209, 1
  %211 = or i32 %8, %112
  %212 = or i32 %8, %32
  %213 = and i32 %22, %2
  %214 = xor i32 %43, %1
  %215 = shl i32 %214, 1
  %216 = or i32 %30, %69
  %217 = or i32 %34, %21
  %218 = and i32 %45, %83
  %219 = and i32 %27, %41
  %220 = xor i32 %176, -1
  %221 = xor i32 %177, %220
  %222 = and i32 %21, %4
  %223 = or i32 %5, %13
  %224 = or i32 %34, %6
  %225 = xor i32 %38, %45
  %226 = and i32 %43, %24
  %227 = xor i32 %40, %2
  %228 = and i32 %30, %68
  %229 = or i32 %34, %24
  %230 = shl i32 %229, 1
  %231 = xor i32 %38, %1
  %232 = and i32 %71, %24
  %233 = or i32 %8, %2
  %234 = or i32 %38, %46
  %235 = and i32 %45, %4
  %236 = xor i32 %38, %49
  %237 = and i32 %62, %0
  %238 = or i32 %26, %237
  %239 = or i32 %17, %0
  %240 = and i32 %68, %4
  %241 = or i32 %38, %24
  %242 = or i32 %105, %96
  %243 = or i32 %112, %0
  %244 = and i32 %18, %0
  %245 = and i32 %18, %13
  %246 = or i32 %8, %4
  %247 = xor i32 %103, %220
  %248 = xor i32 %123, -1
  %249 = or i32 %56, %248
  %250 = and i32 %35, %2
  %251 = mul i32 %250, -3
  %252 = and i32 %30, %24
  %253 = shl i32 %252, 1
  %254 = xor i32 %35, %2
  %255 = shl i32 %254, 1
  %256 = xor i32 %72, %1
  %257 = xor i32 %15, %0
  %258 = and i32 %68, %27
  %259 = and i32 %5, %0
  %260 = or i32 %38, %112
  %261 = and i32 %11, %68
  %262 = or i32 %176, %103
  %263 = and i32 %68, %83
  %264 = and i32 %112, %13
  %265 = and i32 %17, %13
  %266 = mul i32 %265, 18
  %267 = and i32 %112, %0
  %268 = mul i32 %267, 19
  %269 = and i32 %17, %0
  %270 = mul i32 %269, 13
  %271 = and i32 %6, %13
  %272 = and i32 %6, %0
  %273 = mul i32 %272, 14
  %274 = mul i32 %105, -20
  %275 = add i32 %170, %2
  %276 = add i32 %275, %264
  %277 = sub i32 %276, %271
  %278 = add i32 %277, %188
  %279 = add i32 %278, %53
  %280 = mul i32 %279, 5
  %281 = add i32 %65, %43
  %282 = shl i32 %281, 2
  %283 = sub i32 -2, %0
  %284 = add i32 %283, %40
  %285 = add i32 %284, %83
  %286 = add i32 %285, %9
  %287 = add i32 %286, %85
  %288 = add i32 %287, %81
  %289 = add i32 %288, %27
  %290 = add i32 %289, %256
  %291 = add i32 %290, %232
  %292 = add i32 %291, %203
  %293 = add i32 %292, %200
  %294 = add i32 %293, %155
  %295 = add i32 %294, %66
  %296 = add i32 %295, %47
  %297 = add i32 %296, %36
  %298 = add i32 %297, %31
  %299 = sub i32 %298, %10
  %300 = add i32 %299, %139
  %301 = add i32 %300, %172
  %302 = shl i32 %301, 1
  %303 = add i32 %0, 1
  %304 = add i32 %303, %1
  %305 = add i32 %304, %182
  %306 = sub i32 %305, %45
  %307 = add i32 %306, %46
  %308 = add i32 %307, %41
  %309 = sub i32 %308, %21
  %310 = add i32 %309, %149
  %311 = add i32 %310, %68
  %312 = add i32 %311, %174
  %313 = sub i32 %312, %23
  %314 = sub i32 %313, %34
  %315 = add i32 %314, %37
  %316 = sub i32 %315, %52
  %317 = sub i32 %316, %59
  %318 = add i32 %317, %60
  %319 = add i32 %318, %67
  %320 = add i32 %319, %72
  %321 = sub i32 %320, %73
  %322 = sub i32 %321, %74
  %323 = sub i32 %322, %76
  %324 = sub i32 %323, %11
  %325 = sub i32 %324, %17
  %326 = sub i32 %325, %38
  %327 = sub i32 %326, %122
  %328 = sub i32 %327, %143
  %329 = add i32 %328, %164
  %330 = sub i32 %329, %181
  %331 = add i32 %330, %204
  %332 = sub i32 %331, %213
  %333 = add i32 %332, %222
  %334 = add i32 %333, %227
  %335 = sub i32 %334, %233
  %336 = sub i32 %335, %30
  %337 = sub i32 %336, %235
  %338 = sub i32 %337, %240
  %339 = sub i32 %338, %246
  %340 = add i32 %339, %12
  %341 = add i32 %340, %16
  %342 = sub i32 %341, %33
  %343 = sub i32 %342, %39
  %344 = sub i32 %343, %42
  %345 = add i32 %344, %44
  %346 = sub i32 %345, %48
  %347 = sub i32 %346, %55
  %348 = add i32 %347, %61
  %349 = add i32 %348, %70
  %350 = sub i32 %349, %75
  %351 = sub i32 %350, %79
  %352 = sub i32 %351, %80
  %353 = add i32 %352, %82
  %354 = sub i32 %353, %84
  %355 = add i32 %354, %86
  %356 = sub i32 %355, %87
  %357 = sub i32 %356, %88
  %358 = sub i32 %357, %89
  %359 = add i32 %358, %90
  %360 = add i32 %359, %91
  %361 = sub i32 %360, %92
  %362 = add i32 %361, %93
  %363 = add i32 %362, %98
  %364 = add i32 %363, %99
  %365 = sub i32 %364, %102
  %366 = add i32 %365, %103
  %367 = add i32 %366, %104
  %368 = sub i32 %367, %107
  %369 = add i32 %368, %108
  %370 = sub i32 %369, %109
  %371 = sub i32 %370, %111
  %372 = sub i32 %371, %115
  %373 = add i32 %372, %116
  %374 = sub i32 %373, %117
  %375 = add i32 %374, %118
  %376 = sub i32 %375, %119
  %377 = sub i32 %376, %120
  %378 = add i32 %377, %121
  %379 = sub i32 %378, %123
  %380 = add i32 %379, %124
  %381 = sub i32 %380, %127
  %382 = add i32 %381, %128
  %383 = add i32 %382, %129
  %384 = sub i32 %383, %130
  %385 = sub i32 %384, %131
  %386 = sub i32 %385, %133
  %387 = sub i32 %386, %134
  %388 = add i32 %387, %142
  %389 = add i32 %388, %144
  %390 = add i32 %389, %145
  %391 = sub i32 %390, %146
  %392 = sub i32 %391, %147
  %393 = add i32 %392, %148
  %394 = sub i32 %393, %151
  %395 = add i32 %394, %57
  %396 = add i32 %395, %154
  %397 = sub i32 %396, %156
  %398 = sub i32 %397, %157
  %399 = add i32 %398, %158
  %400 = add i32 %399, %159
  %401 = sub i32 %400, %163
  %402 = add i32 %401, %165
  %403 = add i32 %402, %168
  %404 = sub i32 %403, %173
  %405 = add i32 %404, %175
  %406 = sub i32 %405, %179
  %407 = add i32 %406, %180
  %408 = add i32 %407, %183
  %409 = sub i32 %408, %184
  %410 = add i32 %409, %185
  %411 = sub i32 %410, %186
  %412 = sub i32 %411, %187
  %413 = add i32 %412, %189
  %414 = add i32 %413, %190
  %415 = sub i32 %414, %191
  %416 = add i32 %415, %192
  %417 = add i32 %416, %195
  %418 = sub i32 %417, %196
  %419 = sub i32 %418, %197
  %420 = add i32 %419, %201
  %421 = sub i32 %420, %202
  %422 = add i32 %421, %206
  %423 = sub i32 %422, %207
  %424 = add i32 %423, %208
  %425 = sub i32 %424, %210
  %426 = sub i32 %425, %211
  %427 = sub i32 %426, %212
  %428 = sub i32 %427, %216
  %429 = sub i32 %428, %217
  %430 = add i32 %429, %218
  %431 = add i32 %430, %219
  %432 = sub i32 %431, %223
  %433 = add i32 %432, %171
  %434 = add i32 %433, %224
  %435 = sub i32 %434, %225
  %436 = add i32 %435, %226
  %437 = add i32 %436, %228
  %438 = sub i32 %437, %231
  %439 = add i32 %438, %234
  %440 = sub i32 %439, %236
  %441 = add i32 %440, %239
  %442 = sub i32 %441, %241
  %443 = add i32 %442, %243
  %444 = add i32 %443, %244
  %445 = add i32 %444, %245
  %446 = add i32 %445, %28
  %447 = add i32 %446, %251
  %448 = sub i32 %447, %255
  %449 = add i32 %448, %257
  %450 = sub i32 %449, %258
  %451 = sub i32 %450, %259
  %452 = sub i32 %451, %260
  %453 = sub i32 %452, %261
  %454 = add i32 %453, %263
  %455 = add i32 %454, %176
  %456 = sub i32 %455, %20
  %457 = add i32 %456, %29
  %458 = sub i32 %457, %51
  %459 = sub i32 %458, %58
  %460 = add i32 %459, %64
  %461 = sub i32 %460, %78
  %462 = sub i32 %461, %95
  %463 = add i32 %462, %97
  %464 = sub i32 %463, %101
  %465 = add i32 %464, %106
  %466 = sub i32 %465, %114
  %467 = sub i32 %466, %126
  %468 = sub i32 %467, %132
  %469 = sub i32 %468, %136
  %470 = sub i32 %469, %141
  %471 = sub i32 %470, %153
  %472 = add i32 %471, %169
  %473 = sub i32 %472, %178
  %474 = sub i32 %473, %194
  %475 = sub i32 %474, %199
  %476 = sub i32 %475, %205
  %477 = sub i32 %476, %215
  %478 = add i32 %477, %221
  %479 = sub i32 %478, %230
  %480 = sub i32 %479, %238
  %481 = add i32 %480, %242
  %482 = add i32 %481, %247
  %483 = sub i32 %482, %249
  %484 = sub i32 %483, %253
  %485 = add i32 %484, %262
  %486 = add i32 %485, %266
  %487 = add i32 %486, %268
  %488 = add i32 %487, %270
  %489 = add i32 %488, %273
  %490 = add i32 %489, %274
  %491 = add i32 %490, %282
  %492 = sub i32 %491, %167
  %493 = sub i32 %492, %162
  %494 = add i32 %493, %280
  %495 = add i32 %494, %302
  %496 = icmp eq i32 %7, %495
  %497 = select i1 %496, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %498 = tail call i32 @puts(i8* nonnull dereferenceable(1) %497)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
