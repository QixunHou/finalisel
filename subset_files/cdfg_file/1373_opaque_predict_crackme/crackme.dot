digraph "DFG for'crackme' function" {
	Node0xce0540[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xce0bf0[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0xce0cb0[shape=record, label="  %5 = sub i32 1, %3"];
	Node0xce0d20[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0xce0d90[shape=record, label="  %7 = or i32 %1, %0"];
	Node0xce0e00[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0xce0e70[shape=record, label="  %9 = or i32 %6, %0"];
	Node0xce0ee0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xce0f50[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0xce0ff0[shape=record, label="  %12 = mul i32 %11, -6"];
	Node0xce1060[shape=record, label="  %13 = and i32 %6, %0"];
	Node0xce1100[shape=record, label="  %14 = mul i32 %13, -5"];
	Node0xce1170[shape=record, label="  %15 = and i32 %1, %0"];
	Node0xce11e0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0xce1250[shape=record, label="  %17 = sub i32 %7, %1"];
	Node0xce12f0[shape=record, label="  %18 = mul i32 %17, 3"];
	Node0xce1360[shape=record, label="  %19 = add i32 %4, %1"];
	Node0xce13d0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0xce1440[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0xce14b0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xce1520[shape=record, label="  %23 = add i32 %22, %14"];
	Node0xce1590[shape=record, label="  %24 = sub i32 %23, %16"];
	Node0xce1600[shape=record, label="  %25 = add i32 %24, %18"];
	Node0xce1670[shape=record, label="  %26 = icmp eq i32 %5, %25"];
	Node0xc81268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xce1b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xce1b60[shape=record, label="  ret void"];
	Node0xce0540 -> Node0xce0bf0;
	Node0xce0bf0 -> Node0xce0cb0;
	Node0xce0cb0 -> Node0xce0d20;
	Node0xce0d20 -> Node0xce0d90;
	Node0xce0d90 -> Node0xce0e00;
	Node0xce0e00 -> Node0xce0e70;
	Node0xce0e70 -> Node0xce0ee0;
	Node0xce0ee0 -> Node0xce0f50;
	Node0xce0f50 -> Node0xce0ff0;
	Node0xce0ff0 -> Node0xce1060;
	Node0xce1060 -> Node0xce1100;
	Node0xce1100 -> Node0xce1170;
	Node0xce1170 -> Node0xce11e0;
	Node0xce11e0 -> Node0xce1250;
	Node0xce1250 -> Node0xce12f0;
	Node0xce12f0 -> Node0xce1360;
	Node0xce1360 -> Node0xce13d0;
	Node0xce13d0 -> Node0xce1440;
	Node0xce1440 -> Node0xce14b0;
	Node0xce14b0 -> Node0xce1520;
	Node0xce1520 -> Node0xce1590;
	Node0xce1590 -> Node0xce1600;
	Node0xce1600 -> Node0xce1670;
	Node0xce1670 -> Node0xc81268;
	Node0xc81268 -> Node0xce1b10;
	Node0xce1b10 -> Node0xce1b60;
edge [color=red]
	Node0xce0540 -> Node0xce0cb0;
	Node0xce0d90 -> Node0xce0e00;
	Node0xce0d20 -> Node0xce0e70;
	Node0xce0e70 -> Node0xce0ee0;
	Node0xce0e70 -> Node0xce0f50;
	Node0xce0f50 -> Node0xce0ff0;
	Node0xce0d20 -> Node0xce1060;
	Node0xce1060 -> Node0xce1100;
	Node0xce1170 -> Node0xce11e0;
	Node0xce0d90 -> Node0xce1250;
	Node0xce1250 -> Node0xce12f0;
	Node0xce0bf0 -> Node0xce1360;
	Node0xce1360 -> Node0xce13d0;
	Node0xce0e00 -> Node0xce13d0;
	Node0xce13d0 -> Node0xce1440;
	Node0xce0ee0 -> Node0xce1440;
	Node0xce1440 -> Node0xce14b0;
	Node0xce0ff0 -> Node0xce14b0;
	Node0xce14b0 -> Node0xce1520;
	Node0xce1100 -> Node0xce1520;
	Node0xce1520 -> Node0xce1590;
	Node0xce11e0 -> Node0xce1590;
	Node0xce1590 -> Node0xce1600;
	Node0xce12f0 -> Node0xce1600;
	Node0xce0cb0 -> Node0xce1670;
	Node0xce1600 -> Node0xce1670;
	Node0xce1670 -> Node0xc81268;
	Node0xc81268 -> Node0xce1b10;
}
