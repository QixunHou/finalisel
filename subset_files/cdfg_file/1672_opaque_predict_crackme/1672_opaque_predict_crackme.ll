; ModuleID = '../.././c_source_file/1672_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1672_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %1, -1
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %6
  %11 = sub i32 %10, %3
  %12 = xor i32 %4, -1
  %13 = add i32 %4, 1
  %14 = or i32 %4, %3
  %15 = and i32 %4, %3
  %16 = xor i32 %15, -1
  %17 = or i32 %12, %3
  %18 = xor i32 %4, %3
  %19 = shl i32 %17, 1
  %20 = xor i32 %19, -2
  %21 = and i32 %12, %3
  %22 = shl i32 %21, 1
  %23 = and i32 %7, %0
  %24 = xor i32 %23, -1
  %25 = and i32 %24, %6
  %26 = shl i32 %25, 1
  %27 = and i32 %2, %1
  %28 = shl i32 %27, 1
  %29 = and i32 %6, %0
  %30 = xor i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %29, %31
  %33 = shl i32 %32, 1
  %34 = or i32 %6, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %2, %1
  %37 = or i32 %36, %35
  %38 = or i32 %30, %1
  %39 = shl i32 %38, 1
  %40 = or i32 %7, %1
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %0
  %43 = shl i32 %42, 1
  %44 = xor i32 %27, -1
  %45 = or i32 %44, %0
  %46 = xor i32 %0, -1
  %47 = and i32 %7, %1
  %48 = xor i32 %47, -1
  %49 = and i32 %48, %46
  %50 = and i32 %31, %1
  %51 = or i32 %30, %29
  %52 = and i32 %1, %0
  %53 = or i32 %2, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %52, %54
  %56 = and i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = and i32 %57, %6
  %59 = or i32 %1, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %52, %9
  %62 = or i32 %27, %46
  %63 = shl i32 %62, 1
  %64 = and i32 %27, %0
  %65 = xor i32 %36, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %64, %66
  %68 = xor i32 %29, -1
  %69 = xor i32 %68, %2
  %70 = or i32 %30, %35
  %71 = xor i32 %56, %1
  %72 = xor i32 %52, -1
  %73 = and i32 %7, %72
  %74 = and i32 %31, %72
  %75 = and i32 %68, %2
  %76 = xor i32 %36, -1
  %77 = or i32 %76, %60
  %78 = xor i32 %56, %34
  %79 = shl i32 %78, 2
  %80 = xor i32 %52, %2
  %81 = xor i32 %1, %0
  %82 = xor i32 %81, -1
  %83 = and i32 %82, %2
  %84 = shl i32 %83, 1
  %85 = or i32 %2, %1
  %86 = xor i32 %85, -1
  %87 = add i32 %85, 1
  %88 = or i32 %81, %9
  %89 = shl i32 %40, 2
  %90 = or i32 %9, %82
  %91 = or i32 %40, %0
  %92 = or i32 %86, %46
  %93 = shl i32 %92, 1
  %94 = or i32 %36, %60
  %95 = or i32 %30, %81
  %96 = xor i32 %85, %0
  %97 = or i32 %47, %46
  %98 = xor i32 %23, %1
  %99 = xor i32 %23, %40
  %100 = and i32 %85, %46
  %101 = xor i32 %64, -1
  %102 = xor i32 %100, %101
  %103 = xor i32 %53, %52
  %104 = and i32 %76, %0
  %105 = and i32 %8, %81
  %106 = or i32 %52, %2
  %107 = and i32 %8, %1
  %108 = and i32 %53, %82
  %109 = or i32 %64, %96
  %110 = and i32 %34, %7
  %111 = or i32 %47, %0
  %112 = or i32 %52, %76
  %113 = or i32 %7, %35
  %114 = xor i32 %57, %1
  %115 = and i32 %6, %2
  %116 = and i32 %115, %0
  %117 = or i32 %36, %0
  %118 = xor i32 %117, -1
  %119 = or i32 %116, %118
  %120 = or i32 %41, %0
  %121 = or i32 %64, %100
  %122 = or i32 %35, %2
  %123 = shl i32 %122, 1
  %124 = and i32 %30, %68
  %125 = and i32 %30, %59
  %126 = or i32 %82, %2
  %127 = xor i32 %24, %1
  %128 = xor i32 %44, %0
  %129 = and i32 %36, %46
  %130 = or i32 %64, %129
  %131 = and i32 %36, %72
  %132 = xor i32 %48, %0
  %133 = or i32 %7, %82
  %134 = and i32 %27, %46
  %135 = and i32 %36, %0
  %136 = or i32 %134, %135
  %137 = and i32 %8, %6
  %138 = or i32 %76, %35
  %139 = or i32 %81, %31
  %140 = or i32 %36, %46
  %141 = and i32 %44, %46
  %142 = and i32 %85, %0
  %143 = or i32 %134, %142
  %144 = or i32 %30, %52
  %145 = and i32 %81, %7
  %146 = and i32 %36, %34
  %147 = or i32 %76, %0
  %148 = or i32 %48, %46
  %149 = shl i32 %148, 1
  %150 = and i32 %76, %72
  %151 = shl i32 %150, 1
  %152 = xor i32 %23, %44
  %153 = or i32 %81, %2
  %154 = or i32 %56, %60
  %155 = and i32 %30, %81
  %156 = or i32 %23, %41
  %157 = and i32 %81, %2
  %158 = and i32 %57, %82
  %159 = and i32 %57, %1
  %160 = or i32 %48, %0
  %161 = or i32 %40, %46
  %162 = or i32 %116, %65
  %163 = xor i32 %56, %48
  %164 = xor i32 %129, %101
  %165 = add i32 %36, 1
  %166 = and i32 %34, %76
  %167 = xor i32 %29, %48
  %168 = or i32 %29, %76
  %169 = xor i32 %53, %1
  %170 = xor i32 %9, %1
  %171 = or i32 %41, %46
  %172 = shl i32 %171, 1
  %173 = or i32 %7, %60
  %174 = and i32 %48, %0
  %175 = and i32 %30, %34
  %176 = and i32 %81, %31
  %177 = and i32 %30, %1
  %178 = or i32 %85, %46
  %179 = or i32 %56, %1
  %180 = xor i32 %29, %44
  %181 = or i32 %23, %82
  %182 = or i32 %85, %0
  %183 = or i32 %23, %81
  %184 = or i32 %23, %27
  %185 = shl i32 %142, 1
  %186 = and i32 %59, %2
  %187 = or i32 %30, %60
  %188 = or i32 %23, %6
  %189 = and i32 %24, %82
  %190 = and i32 %34, %2
  %191 = and i32 %31, %6
  %192 = xor i32 %34, %2
  %193 = shl i32 %192, 1
  %194 = xor i32 %116, %117
  %195 = xor i32 %134, -1
  %196 = xor i32 %135, %195
  %197 = or i32 %31, %82
  %198 = xor i32 %76, %0
  %199 = shl i32 %198, 1
  %200 = xor i32 %60, %2
  %201 = or i32 %47, %29
  %202 = xor i32 %8, %52
  %203 = add i32 %23, 1
  %204 = and i32 %81, %57
  %205 = or i32 %31, %60
  %206 = and i32 %36, %59
  %207 = or i32 %27, %29
  %208 = and i32 %115, %46
  %209 = xor i32 %208, %140
  %210 = and i32 %44, %0
  %211 = and i32 %59, %31
  %212 = or i32 %36, %52
  %213 = xor i32 %85, %52
  %214 = or i32 %81, %54
  %215 = and i32 %31, %68
  %216 = or i32 %30, %6
  %217 = xor i32 %116, %66
  %218 = or i32 %6, %2
  %219 = and i32 %218, %0
  %220 = xor i32 %219, -1
  %221 = xor i32 %208, %220
  %222 = xor i32 %86, %0
  %223 = or i32 %52, %31
  %224 = and i32 %76, %68
  %225 = xor i32 %140, -1
  %226 = or i32 %208, %225
  %227 = and i32 %24, %1
  %228 = xor i32 %56, %85
  %229 = or i32 %60, %2
  %230 = or i32 %31, %6
  %231 = xor i32 %64, %65
  %232 = or i32 %56, %82
  %233 = xor i32 %47, %0
  %234 = and i32 %76, %46
  %235 = add i32 %34, 1
  %236 = and i32 %218, %46
  %237 = xor i32 %116, -1
  %238 = xor i32 %236, %237
  %239 = or i32 %54, %82
  %240 = add i32 %52, 1
  %241 = shl i32 %52, 2
  %242 = and i32 %53, %81
  %243 = and i32 %7, %82
  %244 = and i32 %40, %46
  %245 = or i32 %56, %81
  %246 = or i32 %56, %35
  %247 = shl i32 %246, 1
  %248 = and i32 %40, %0
  %249 = and i32 %72, %2
  %250 = or i32 %116, %236
  %251 = xor i32 %54, %1
  %252 = xor i32 %8, %1
  %253 = or i32 %52, %41
  %254 = shl i32 %253, 1
  %255 = or i32 %36, %29
  %256 = add i32 %81, 1
  %257 = xor i32 %142, %195
  %258 = and i32 %34, %31
  %259 = xor i32 %29, %2
  %260 = or i32 %56, %86
  %261 = add i32 %30, 1
  %262 = or i32 %29, %7
  %263 = xor i32 %56, %59
  %264 = or i32 %23, %1
  %265 = xor i32 %40, %0
  %266 = xor i32 %96, %101
  %267 = or i32 %56, %6
  %268 = and i32 %7, %68
  %269 = or i32 %86, %0
  %270 = mul i32 %269, -5
  %271 = add i32 %56, 1
  %272 = xor i32 %35, %2
  %273 = or i32 %54, %1
  %274 = xor i32 %40, %52
  %275 = add i32 %29, 1
  %276 = and i32 %8, %82
  %277 = shl i32 %6, 1
  %278 = or i32 %52, %86
  %279 = or i32 %9, %1
  %280 = or i32 %29, %2
  %281 = xor i32 %27, %0
  %282 = and i32 %30, %72
  %283 = shl i32 %282, 1
  %284 = or i32 %56, %47
  %285 = and i32 %59, %7
  %286 = shl i32 %285, 1
  %287 = or i32 %76, %46
  %288 = or i32 %27, %0
  %289 = and i32 %53, %6
  %290 = or i32 %52, %7
  %291 = or i32 %208, %219
  %292 = xor i32 %218, %0
  %293 = xor i32 %292, %237
  %294 = and i32 %81, %24
  %295 = xor i32 %59, %2
  %296 = shl i32 %295, 1
  %297 = or i32 %44, %46
  %298 = and i32 %30, %6
  %299 = or i32 %116, %292
  %300 = xor i32 %72, %2
  %301 = or i32 %31, %1
  %302 = or i32 %54, %6
  %303 = or i32 %81, %7
  %304 = and i32 %59, %76
  %305 = and i32 %36, %68
  %306 = and i32 %86, %46
  %307 = and i32 %47, %46
  %308 = mul i32 %307, -13
  %309 = and i32 %86, %0
  %310 = mul i32 %309, 7
  %311 = and i32 %47, %0
  %312 = and i32 %41, %46
  %313 = and i32 %41, %0
  %314 = add i32 %229, %46
  %315 = add i32 %314, %173
  %316 = add i32 %315, %30
  %317 = add i32 %316, %9
  %318 = add i32 %317, %302
  %319 = add i32 %318, %297
  %320 = add i32 %319, %294
  %321 = add i32 %320, %265
  %322 = add i32 %321, %251
  %323 = add i32 %322, %242
  %324 = add i32 %323, %239
  %325 = add i32 %324, %234
  %326 = add i32 %325, %210
  %327 = add i32 %326, %205
  %328 = add i32 %327, %183
  %329 = add i32 %328, %174
  %330 = add i32 %329, %135
  %331 = add i32 %330, %138
  %332 = add i32 %331, %104
  %333 = add i32 %332, %103
  %334 = add i32 %333, %90
  %335 = add i32 %334, %71
  %336 = add i32 %335, %45
  %337 = add i32 %336, %13
  %338 = add i32 %337, %209
  %339 = shl i32 %338, 1
  %340 = sub i32 %64, %134
  %341 = sub i32 %340, %306
  %342 = mul i32 %341, 6
  %343 = sub i32 %61, %29
  %344 = sub i32 %343, %266
  %345 = mul i32 %344, 3
  %346 = sub i32 %311, %312
  %347 = mul i32 %346, 9
  %348 = add i32 %187, %153
  %349 = shl i32 %348, 2
  %350 = sub i32 1, %0
  %351 = add i32 %350, %1
  %352 = add i32 %351, %60
  %353 = add i32 %352, %34
  %354 = add i32 %353, %7
  %355 = sub i32 %354, %2
  %356 = add i32 %355, %235
  %357 = add i32 %356, %240
  %358 = add i32 %357, %256
  %359 = add i32 %358, %275
  %360 = sub i32 %359, %277
  %361 = sub i32 %360, %81
  %362 = sub i32 %361, %3
  %363 = add i32 %362, %69
  %364 = add i32 %363, %73
  %365 = add i32 %364, %75
  %366 = sub i32 %365, %80
  %367 = add i32 %366, %87
  %368 = sub i32 %367, %23
  %369 = add i32 %368, %106
  %370 = add i32 %369, %110
  %371 = add i32 %370, %113
  %372 = sub i32 %371, %53
  %373 = add i32 %372, %126
  %374 = sub i32 %373, %133
  %375 = add i32 %374, %44
  %376 = sub i32 %375, %145
  %377 = add i32 %376, %56
  %378 = sub i32 %377, %157
  %379 = add i32 %378, %165
  %380 = sub i32 %379, %8
  %381 = add i32 %380, %186
  %382 = sub i32 %381, %190
  %383 = sub i32 %382, %200
  %384 = add i32 %383, %203
  %385 = sub i32 %384, %47
  %386 = add i32 %385, %41
  %387 = add i32 %386, %48
  %388 = sub i32 %387, %241
  %389 = add i32 %388, %243
  %390 = add i32 %389, %249
  %391 = add i32 %390, %85
  %392 = sub i32 %391, %259
  %393 = add i32 %392, %261
  %394 = add i32 %393, %262
  %395 = add i32 %394, %268
  %396 = add i32 %395, %271
  %397 = sub i32 %396, %272
  %398 = add i32 %397, %280
  %399 = add i32 %398, %290
  %400 = add i32 %399, %300
  %401 = sub i32 %400, %303
  %402 = sub i32 %401, %4
  %403 = sub i32 %402, %28
  %404 = add i32 %403, %37
  %405 = sub i32 %404, %49
  %406 = add i32 %405, %50
  %407 = sub i32 %406, %51
  %408 = add i32 %407, %55
  %409 = add i32 %408, %58
  %410 = add i32 %409, %70
  %411 = add i32 %410, %74
  %412 = add i32 %411, %77
  %413 = sub i32 %412, %84
  %414 = add i32 %413, %88
  %415 = sub i32 %414, %89
  %416 = add i32 %415, %91
  %417 = sub i32 %416, %94
  %418 = sub i32 %417, %95
  %419 = add i32 %418, %96
  %420 = sub i32 %419, %97
  %421 = add i32 %420, %98
  %422 = add i32 %421, %99
  %423 = add i32 %422, %100
  %424 = sub i32 %423, %105
  %425 = sub i32 %424, %107
  %426 = add i32 %425, %108
  %427 = add i32 %426, %111
  %428 = add i32 %427, %112
  %429 = add i32 %428, %114
  %430 = add i32 %429, %120
  %431 = sub i32 %430, %123
  %432 = sub i32 %431, %124
  %433 = sub i32 %432, %125
  %434 = add i32 %433, %127
  %435 = add i32 %434, %128
  %436 = add i32 %435, %131
  %437 = add i32 %436, %132
  %438 = add i32 %437, %137
  %439 = add i32 %438, %139
  %440 = sub i32 %439, %140
  %441 = sub i32 %440, %141
  %442 = add i32 %441, %144
  %443 = sub i32 %442, %146
  %444 = sub i32 %443, %147
  %445 = add i32 %444, %152
  %446 = sub i32 %445, %154
  %447 = sub i32 %446, %155
  %448 = add i32 %447, %156
  %449 = sub i32 %448, %158
  %450 = add i32 %449, %159
  %451 = sub i32 %450, %160
  %452 = add i32 %451, %161
  %453 = add i32 %452, %163
  %454 = add i32 %453, %166
  %455 = add i32 %454, %167
  %456 = sub i32 %455, %168
  %457 = add i32 %456, %169
  %458 = add i32 %457, %170
  %459 = sub i32 %458, %175
  %460 = add i32 %459, %176
  %461 = sub i32 %460, %177
  %462 = sub i32 %461, %178
  %463 = sub i32 %462, %179
  %464 = sub i32 %463, %180
  %465 = add i32 %464, %181
  %466 = sub i32 %465, %182
  %467 = sub i32 %466, %184
  %468 = add i32 %467, %188
  %469 = add i32 %468, %189
  %470 = sub i32 %469, %191
  %471 = sub i32 %470, %193
  %472 = add i32 %471, %197
  %473 = sub i32 %472, %201
  %474 = add i32 %473, %129
  %475 = sub i32 %474, %202
  %476 = sub i32 %475, %204
  %477 = add i32 %476, %206
  %478 = sub i32 %477, %207
  %479 = add i32 %478, %65
  %480 = add i32 %479, %211
  %481 = add i32 %480, %212
  %482 = sub i32 %481, %213
  %483 = add i32 %482, %214
  %484 = add i32 %483, %215
  %485 = add i32 %484, %216
  %486 = add i32 %485, %222
  %487 = add i32 %486, %223
  %488 = add i32 %487, %224
  %489 = add i32 %488, %227
  %490 = add i32 %489, %228
  %491 = add i32 %490, %230
  %492 = sub i32 %491, %232
  %493 = add i32 %492, %233
  %494 = add i32 %493, %244
  %495 = add i32 %494, %245
  %496 = sub i32 %495, %248
  %497 = add i32 %496, %252
  %498 = sub i32 %497, %255
  %499 = sub i32 %498, %258
  %500 = sub i32 %499, %260
  %501 = sub i32 %500, %263
  %502 = add i32 %501, %264
  %503 = sub i32 %502, %267
  %504 = sub i32 %503, %273
  %505 = sub i32 %504, %274
  %506 = add i32 %505, %276
  %507 = sub i32 %506, %278
  %508 = sub i32 %507, %279
  %509 = add i32 %508, %281
  %510 = sub i32 %509, %284
  %511 = sub i32 %510, %286
  %512 = sub i32 %511, %287
  %513 = sub i32 %512, %288
  %514 = sub i32 %513, %289
  %515 = sub i32 %514, %296
  %516 = add i32 %515, %298
  %517 = sub i32 %516, %301
  %518 = sub i32 %517, %304
  %519 = sub i32 %518, %305
  %520 = add i32 %519, %313
  %521 = add i32 %520, %14
  %522 = add i32 %521, %16
  %523 = add i32 %522, %17
  %524 = add i32 %523, %18
  %525 = sub i32 %524, %15
  %526 = sub i32 %525, %26
  %527 = sub i32 %526, %33
  %528 = sub i32 %527, %39
  %529 = sub i32 %528, %43
  %530 = sub i32 %529, %63
  %531 = sub i32 %530, %67
  %532 = sub i32 %531, %79
  %533 = sub i32 %532, %93
  %534 = add i32 %533, %102
  %535 = sub i32 %534, %109
  %536 = add i32 %535, %119
  %537 = add i32 %536, %121
  %538 = sub i32 %537, %130
  %539 = add i32 %538, %136
  %540 = sub i32 %539, %143
  %541 = sub i32 %540, %149
  %542 = sub i32 %541, %151
  %543 = sub i32 %542, %162
  %544 = sub i32 %543, %164
  %545 = sub i32 %544, %172
  %546 = sub i32 %545, %185
  %547 = add i32 %546, %194
  %548 = add i32 %547, %196
  %549 = sub i32 %548, %199
  %550 = add i32 %549, %217
  %551 = sub i32 %550, %221
  %552 = sub i32 %551, %226
  %553 = sub i32 %552, %231
  %554 = sub i32 %553, %238
  %555 = sub i32 %554, %247
  %556 = sub i32 %555, %250
  %557 = sub i32 %556, %254
  %558 = add i32 %557, %257
  %559 = add i32 %558, %270
  %560 = sub i32 %559, %283
  %561 = add i32 %560, %291
  %562 = sub i32 %561, %293
  %563 = sub i32 %562, %299
  %564 = add i32 %563, %308
  %565 = add i32 %564, %310
  %566 = sub i32 %565, %22
  %567 = add i32 %566, %347
  %568 = add i32 %567, %349
  %569 = sub i32 %568, %20
  %570 = add i32 %569, %342
  %571 = add i32 %570, %345
  %572 = add i32 %571, %339
  %573 = icmp eq i32 %11, %572
  %574 = select i1 %573, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %575 = tail call i32 @puts(i8* nonnull dereferenceable(1) %574)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
