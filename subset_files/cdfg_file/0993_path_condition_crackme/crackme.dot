digraph "DFG for'crackme' function" {
	Node0xb38be0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xb38c80[shape=record, label="  %4 = add i32 %1, 1"];
	Node0xb38d40[shape=record, label="  %5 = shl i32 %1, 2"];
	Node0xb38db0[shape=record, label="  %6 = add i32 %4, %5"];
	Node0xb38e20[shape=record, label="  %7 = and i32 %3, %0"];
	Node0xb38e90[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0xb38f30[shape=record, label="  %9 = mul i32 %8, -5"];
	Node0xb38fa0[shape=record, label="  %10 = or i32 %3, %0"];
	Node0xb39010[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0xb39080[shape=record, label="  %12 = or i32 %1, %0"];
	Node0xb390f0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0xb39190[shape=record, label="  %14 = mul i32 %13, 3"];
	Node0xb39200[shape=record, label="  %15 = xor i32 %10, -1"];
	Node0xb392a0[shape=record, label="  %16 = mul i32 %15, 9"];
	Node0xb39310[shape=record, label="  %17 = shl i32 %7, 2"];
	Node0xb39380[shape=record, label="  %18 = and i32 %1, %0"];
	Node0xb39420[shape=record, label="  %19 = mul i32 %18, 6"];
	Node0xb39490[shape=record, label="  %20 = add i32 %0, 1"];
	Node0xb39500[shape=record, label="  %21 = add i32 %20, %12"];
	Node0xb39570[shape=record, label="  %22 = add i32 %21, %9"];
	Node0xb395e0[shape=record, label="  %23 = add i32 %22, %11"];
	Node0xb39650[shape=record, label="  %24 = add i32 %23, %14"];
	Node0xb396c0[shape=record, label="  %25 = add i32 %24, %16"];
	Node0xb39730[shape=record, label="  %26 = sub i32 %25, %17"];
	Node0xb397a0[shape=record, label="  %27 = add i32 %26, %19"];
	Node0xb39810[shape=record, label="  %28 = icmp eq i32 %6, %27"];
	Node0xad9268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb39cb0[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xb39d00[shape=record, label="  ret void"];
	Node0xb38be0 -> Node0xb38c80;
	Node0xb38c80 -> Node0xb38d40;
	Node0xb38d40 -> Node0xb38db0;
	Node0xb38db0 -> Node0xb38e20;
	Node0xb38e20 -> Node0xb38e90;
	Node0xb38e90 -> Node0xb38f30;
	Node0xb38f30 -> Node0xb38fa0;
	Node0xb38fa0 -> Node0xb39010;
	Node0xb39010 -> Node0xb39080;
	Node0xb39080 -> Node0xb390f0;
	Node0xb390f0 -> Node0xb39190;
	Node0xb39190 -> Node0xb39200;
	Node0xb39200 -> Node0xb392a0;
	Node0xb392a0 -> Node0xb39310;
	Node0xb39310 -> Node0xb39380;
	Node0xb39380 -> Node0xb39420;
	Node0xb39420 -> Node0xb39490;
	Node0xb39490 -> Node0xb39500;
	Node0xb39500 -> Node0xb39570;
	Node0xb39570 -> Node0xb395e0;
	Node0xb395e0 -> Node0xb39650;
	Node0xb39650 -> Node0xb396c0;
	Node0xb396c0 -> Node0xb39730;
	Node0xb39730 -> Node0xb397a0;
	Node0xb397a0 -> Node0xb39810;
	Node0xb39810 -> Node0xad9268;
	Node0xad9268 -> Node0xb39cb0;
	Node0xb39cb0 -> Node0xb39d00;
edge [color=red]
	Node0xb38c80 -> Node0xb38db0;
	Node0xb38d40 -> Node0xb38db0;
	Node0xb38be0 -> Node0xb38e20;
	Node0xb38e20 -> Node0xb38e90;
	Node0xb38e90 -> Node0xb38f30;
	Node0xb38be0 -> Node0xb38fa0;
	Node0xb38fa0 -> Node0xb39010;
	Node0xb39080 -> Node0xb390f0;
	Node0xb390f0 -> Node0xb39190;
	Node0xb38fa0 -> Node0xb39200;
	Node0xb39200 -> Node0xb392a0;
	Node0xb38e20 -> Node0xb39310;
	Node0xb39380 -> Node0xb39420;
	Node0xb39490 -> Node0xb39500;
	Node0xb39080 -> Node0xb39500;
	Node0xb39500 -> Node0xb39570;
	Node0xb38f30 -> Node0xb39570;
	Node0xb39570 -> Node0xb395e0;
	Node0xb39010 -> Node0xb395e0;
	Node0xb395e0 -> Node0xb39650;
	Node0xb39190 -> Node0xb39650;
	Node0xb39650 -> Node0xb396c0;
	Node0xb392a0 -> Node0xb396c0;
	Node0xb396c0 -> Node0xb39730;
	Node0xb39310 -> Node0xb39730;
	Node0xb39730 -> Node0xb397a0;
	Node0xb39420 -> Node0xb397a0;
	Node0xb38db0 -> Node0xb39810;
	Node0xb397a0 -> Node0xb39810;
	Node0xb39810 -> Node0xad9268;
	Node0xad9268 -> Node0xb39cb0;
}
