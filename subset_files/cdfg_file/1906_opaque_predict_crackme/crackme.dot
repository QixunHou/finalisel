digraph "DFG for'crackme' function" {
	Node0xa64f90[shape=record, label="  %5 = mul i32 %2, -2"];
	Node0xa65030[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0xa650a0[shape=record, label="  %7 = and i32 %6, %3"];
	Node0xa65140[shape=record, label="  %8 = add i32 %2, 2"];
	Node0xa651b0[shape=record, label="  %9 = add i32 %8, %5"];
	Node0xa65220[shape=record, label="  %10 = add i32 %9, %7"];
	Node0xa65290[shape=record, label="  %11 = xor i32 %1, -1"];
	Node0xa65300[shape=record, label="  %12 = or i32 %11, %2"];
	Node0xa65370[shape=record, label="  %13 = or i32 %2, %1"];
	Node0xa653e0[shape=record, label="  %14 = or i32 %3, %0"];
	Node0xa65480[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0xa654f0[shape=record, label="  %16 = xor i32 %3, -1"];
	Node0xa65560[shape=record, label="  %17 = xor i32 %3, %0"];
	Node0xa655d0[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0xa65640[shape=record, label="  %19 = xor i32 %14, -1"];
	Node0xa656e0[shape=record, label="  %20 = mul i32 %19, 3"];
	Node0xa65750[shape=record, label="  %21 = and i32 %16, %0"];
	Node0xa657f0[shape=record, label="  %22 = mul i32 %21, 6"];
	Node0xa65890[shape=record, label="  %23 = mul i32 %7, 9"];
	Node0xa65900[shape=record, label="  %24 = and i32 %3, %0"];
	Node0xa659a0[shape=record, label="  %25 = mul i32 %24, 5"];
	Node0xa65a10[shape=record, label="  %26 = add i32 %0, 5"];
	Node0xa65a80[shape=record, label="  %27 = sub i32 %26, %12"];
	Node0xa65af0[shape=record, label="  %28 = sub i32 %27, %13"];
	Node0xa65b60[shape=record, label="  %29 = add i32 %28, %16"];
	Node0xa65bd0[shape=record, label="  %30 = sub i32 %29, %15"];
	Node0xa65c40[shape=record, label="  %31 = sub i32 %30, %18"];
	Node0xa65cb0[shape=record, label="  %32 = add i32 %31, %20"];
	Node0xa65f30[shape=record, label="  %33 = add i32 %32, %22"];
	Node0xa65fa0[shape=record, label="  %34 = add i32 %33, %23"];
	Node0xa66010[shape=record, label="  %35 = add i32 %34, %25"];
	Node0xa66080[shape=record, label="  %36 = icmp eq i32 %10, %35"];
	Node0xa05268[shape=record, label="  %37 = select i1 %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa66520[shape=record, label="  %38 = tail call i32 @puts(i8* nonnull dereferenceable(1) %37)"];
	Node0xa66570[shape=record, label="  ret void"];
	Node0xa64f90 -> Node0xa65030;
	Node0xa65030 -> Node0xa650a0;
	Node0xa650a0 -> Node0xa65140;
	Node0xa65140 -> Node0xa651b0;
	Node0xa651b0 -> Node0xa65220;
	Node0xa65220 -> Node0xa65290;
	Node0xa65290 -> Node0xa65300;
	Node0xa65300 -> Node0xa65370;
	Node0xa65370 -> Node0xa653e0;
	Node0xa653e0 -> Node0xa65480;
	Node0xa65480 -> Node0xa654f0;
	Node0xa654f0 -> Node0xa65560;
	Node0xa65560 -> Node0xa655d0;
	Node0xa655d0 -> Node0xa65640;
	Node0xa65640 -> Node0xa656e0;
	Node0xa656e0 -> Node0xa65750;
	Node0xa65750 -> Node0xa657f0;
	Node0xa657f0 -> Node0xa65890;
	Node0xa65890 -> Node0xa65900;
	Node0xa65900 -> Node0xa659a0;
	Node0xa659a0 -> Node0xa65a10;
	Node0xa65a10 -> Node0xa65a80;
	Node0xa65a80 -> Node0xa65af0;
	Node0xa65af0 -> Node0xa65b60;
	Node0xa65b60 -> Node0xa65bd0;
	Node0xa65bd0 -> Node0xa65c40;
	Node0xa65c40 -> Node0xa65cb0;
	Node0xa65cb0 -> Node0xa65f30;
	Node0xa65f30 -> Node0xa65fa0;
	Node0xa65fa0 -> Node0xa66010;
	Node0xa66010 -> Node0xa66080;
	Node0xa66080 -> Node0xa05268;
	Node0xa05268 -> Node0xa66520;
	Node0xa66520 -> Node0xa66570;
edge [color=red]
	Node0xa65030 -> Node0xa650a0;
	Node0xa65140 -> Node0xa651b0;
	Node0xa64f90 -> Node0xa651b0;
	Node0xa651b0 -> Node0xa65220;
	Node0xa650a0 -> Node0xa65220;
	Node0xa65290 -> Node0xa65300;
	Node0xa653e0 -> Node0xa65480;
	Node0xa65560 -> Node0xa655d0;
	Node0xa653e0 -> Node0xa65640;
	Node0xa65640 -> Node0xa656e0;
	Node0xa654f0 -> Node0xa65750;
	Node0xa65750 -> Node0xa657f0;
	Node0xa650a0 -> Node0xa65890;
	Node0xa65900 -> Node0xa659a0;
	Node0xa65a10 -> Node0xa65a80;
	Node0xa65300 -> Node0xa65a80;
	Node0xa65a80 -> Node0xa65af0;
	Node0xa65370 -> Node0xa65af0;
	Node0xa65af0 -> Node0xa65b60;
	Node0xa654f0 -> Node0xa65b60;
	Node0xa65b60 -> Node0xa65bd0;
	Node0xa65480 -> Node0xa65bd0;
	Node0xa65bd0 -> Node0xa65c40;
	Node0xa655d0 -> Node0xa65c40;
	Node0xa65c40 -> Node0xa65cb0;
	Node0xa656e0 -> Node0xa65cb0;
	Node0xa65cb0 -> Node0xa65f30;
	Node0xa657f0 -> Node0xa65f30;
	Node0xa65f30 -> Node0xa65fa0;
	Node0xa65890 -> Node0xa65fa0;
	Node0xa65fa0 -> Node0xa66010;
	Node0xa659a0 -> Node0xa66010;
	Node0xa65220 -> Node0xa66080;
	Node0xa66010 -> Node0xa66080;
	Node0xa66080 -> Node0xa05268;
	Node0xa05268 -> Node0xa66520;
}
