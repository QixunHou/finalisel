; ModuleID = '../.././c_source_file/1428_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1428_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = and i32 %1, %0
  %8 = xor i32 %7, %2
  %9 = shl i32 %8, 1
  %10 = sub i32 %6, %9
  %11 = xor i32 %4, -1
  %12 = or i32 %11, %3
  %13 = and i32 %11, %3
  %14 = xor i32 %6, -1
  %15 = or i32 %4, %3
  %16 = add i32 %4, 1
  %17 = xor i32 %12, -1
  %18 = xor i32 %2, -1
  %19 = xor i32 %1, %0
  %20 = and i32 %19, %18
  %21 = xor i32 %2, %1
  %22 = xor i32 %1, -1
  %23 = and i32 %22, %0
  %24 = xor i32 %2, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %23, %25
  %27 = shl i32 %26, 2
  %28 = and i32 %2, %0
  %29 = or i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %28, %30
  %32 = xor i32 %28, -1
  %33 = and i32 %19, %32
  %34 = or i32 %18, %0
  %35 = xor i32 %34, %7
  %36 = shl i32 %35, 1
  %37 = or i32 %18, %1
  %38 = and i32 %37, %0
  %39 = and i32 %19, %2
  %40 = xor i32 %34, -1
  %41 = or i32 %40, %22
  %42 = or i32 %28, %1
  %43 = and i32 %24, %1
  %44 = xor i32 %0, -1
  %45 = and i32 %2, %1
  %46 = and i32 %45, %44
  %47 = and i32 %21, %0
  %48 = or i32 %46, %47
  %49 = and i32 %24, %19
  %50 = or i32 %22, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %51, %2
  %53 = xor i32 %19, -1
  %54 = or i32 %24, %53
  %55 = or i32 %21, %23
  %56 = or i32 %40, %53
  %57 = or i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %24, %50
  %60 = xor i32 %7, -1
  %61 = xor i32 %60, %2
  %62 = xor i32 %21, -1
  %63 = and i32 %50, %62
  %64 = and i32 %18, %0
  %65 = and i32 %45, %0
  %66 = and i32 %21, %44
  %67 = or i32 %65, %66
  %68 = xor i32 %23, %2
  %69 = and i32 %18, %1
  %70 = xor i32 %69, -1
  %71 = xor i32 %70, %0
  %72 = shl i32 %71, 1
  %73 = and i32 %21, %60
  %74 = or i32 %2, %1
  %75 = and i32 %74, %0
  %76 = xor i32 %46, -1
  %77 = xor i32 %75, %76
  %78 = and i32 %22, %2
  %79 = and i32 %78, %0
  %80 = or i32 %22, %2
  %81 = xor i32 %80, %0
  %82 = or i32 %79, %81
  %83 = or i32 %21, %0
  %84 = xor i32 %79, %83
  %85 = xor i32 %74, -1
  %86 = or i32 %7, %85
  %87 = or i32 %21, %44
  %88 = or i32 %69, %0
  %89 = xor i32 %69, %0
  %90 = and i32 %50, %18
  %91 = shl i32 %51, 1
  %92 = xor i32 %28, %1
  %93 = xor i32 %64, -1
  %94 = add i32 %64, 1
  %95 = or i32 %18, %53
  %96 = shl i32 %95, 1
  %97 = and i32 %25, %1
  %98 = and i32 %50, %2
  %99 = and i32 %37, %44
  %100 = xor i32 %37, -1
  %101 = or i32 %64, %100
  %102 = and i32 %60, %2
  %103 = shl i32 %102, 1
  %104 = and i32 %93, %53
  %105 = xor i32 %45, %0
  %106 = and i32 %24, %29
  %107 = and i32 %70, %0
  %108 = xor i32 %64, %1
  %109 = and i32 %32, %53
  %110 = or i32 %7, %40
  %111 = or i32 %85, %44
  %112 = xor i32 %40, %1
  %113 = xor i32 %45, -1
  %114 = xor i32 %113, %0
  %115 = or i32 %30, %2
  %116 = or i32 %23, %18
  %117 = xor i32 %23, -1
  %118 = and i32 %21, %117
  %119 = or i32 %64, %19
  %120 = and i32 %21, %29
  %121 = or i32 %24, %30
  %122 = xor i32 %65, -1
  %123 = xor i32 %66, %122
  %124 = add i32 %23, 1
  %125 = or i32 %37, %0
  %126 = or i32 %19, %58
  %127 = or i32 %45, %44
  %128 = and i32 %62, %60
  %129 = shl i32 %128, 1
  %130 = or i32 %113, %44
  %131 = or i32 %70, %44
  %132 = xor i32 %21, %0
  %133 = xor i32 %85, %0
  %134 = shl i32 %45, 1
  %135 = add i32 %24, 1
  %136 = and i32 %29, %2
  %137 = shl i32 %136, 1
  %138 = xor i32 %100, %0
  %139 = xor i32 %57, %1
  %140 = or i32 %24, %7
  %141 = or i32 %100, %0
  %142 = or i32 %25, %1
  %143 = or i32 %25, %30
  %144 = or i32 %62, %51
  %145 = shl i32 %144, 1
  %146 = xor i32 %62, %0
  %147 = and i32 %50, %25
  %148 = xor i32 %65, %132
  %149 = or i32 %7, %2
  %150 = and i32 %19, %93
  %151 = or i32 %7, %18
  %152 = or i32 %28, %85
  %153 = or i32 %25, %53
  %154 = and i32 %117, %2
  %155 = and i32 %24, %117
  %156 = xor i32 %29, %2
  %157 = or i32 %64, %45
  %158 = or i32 %45, %23
  %159 = or i32 %64, %22
  %160 = add i32 %37, 1
  %161 = and i32 %78, %44
  %162 = xor i32 %87, 2147483647
  %163 = or i32 %162, %161
  %164 = or i32 %46, %75
  %165 = xor i32 %47, %76
  %166 = or i32 %28, %53
  %167 = shl i32 %166, 1
  %168 = and i32 %57, %53
  %169 = xor i32 %80, -1
  %170 = or i32 %169, %0
  %171 = xor i32 %79, %170
  %172 = or i32 %19, %18
  %173 = or i32 %64, %53
  %174 = and i32 %25, %117
  %175 = or i32 %85, %0
  %176 = and i32 %57, %1
  %177 = and i32 %24, %53
  %178 = or i32 %23, %62
  %179 = or i32 %21, %30
  %180 = and i32 %57, %22
  %181 = or i32 %19, %40
  %182 = xor i32 %74, %44
  %183 = xor i32 %182, %65
  %184 = or i32 %24, %22
  %185 = or i32 %53, %2
  %186 = xor i32 %30, %2
  %187 = shl i32 %186, 2
  %188 = add i32 %69, 1
  %189 = and i32 %53, %2
  %190 = or i32 %28, %22
  %191 = and i32 %80, %0
  %192 = xor i32 %191, -1
  %193 = xor i32 %161, %192
  %194 = and i32 %25, %22
  %195 = shl i32 %22, 1
  %196 = or i32 %62, %44
  %197 = xor i32 %37, %0
  %198 = and i32 %24, %60
  %199 = xor i32 %37, %7
  %200 = or i32 %24, %19
  %201 = shl i32 %200, 2
  %202 = or i32 %58, %22
  %203 = shl i32 %202, 1
  %204 = or i32 %69, %44
  %205 = and i32 %32, %22
  %206 = add i32 %29, 1
  %207 = xor i32 %83, -1
  %208 = or i32 %79, %207
  %209 = xor i32 %34, %1
  %210 = or i32 %23, %2
  %211 = or i32 %58, %53
  %212 = or i32 %62, %30
  %213 = or i32 %100, %44
  %214 = xor i32 %74, %7
  %215 = and i32 %25, %53
  %216 = or i32 %21, %51
  %217 = xor i32 %132, -1
  %218 = xor i32 %79, %217
  %219 = xor i32 %28, %50
  %220 = shl i32 %219, 1
  %221 = or i32 %7, %100
  %222 = and i32 %85, %44
  %223 = shl i32 %222, 1
  %224 = and i32 %69, %44
  %225 = mul i32 %224, -19
  %226 = and i32 %85, %0
  %227 = and i32 %69, %0
  %228 = and i32 %100, %44
  %229 = and i32 %100, %0
  %230 = mul i32 %229, 10
  %231 = mul i32 %65, -15
  %232 = add i32 %37, %185
  %233 = add i32 %232, %32
  %234 = add i32 %233, %226
  %235 = add i32 %234, %175
  %236 = add i32 %235, %143
  %237 = add i32 %236, %119
  %238 = add i32 %237, %118
  %239 = add i32 %238, %112
  %240 = add i32 %239, %164
  %241 = add i32 %240, %13
  %242 = add i32 %241, %163
  %243 = shl i32 %242, 1
  %244 = sub i32 %228, %227
  %245 = add i32 %244, %196
  %246 = sub i32 %245, %177
  %247 = add i32 %246, %153
  %248 = sub i32 %247, %152
  %249 = mul i32 %248, 5
  %250 = sub i32 %151, %216
  %251 = add i32 %250, %17
  %252 = add i32 %251, %165
  %253 = mul i32 %252, 3
  %254 = add i32 %1, 1
  %255 = sub i32 %254, %50
  %256 = add i32 %255, %60
  %257 = add i32 %256, %124
  %258 = add i32 %257, %18
  %259 = sub i32 %258, %195
  %260 = add i32 %259, %29
  %261 = add i32 %260, %206
  %262 = add i32 %261, %20
  %263 = sub i32 %262, %21
  %264 = sub i32 %263, %39
  %265 = add i32 %264, %52
  %266 = add i32 %265, %58
  %267 = add i32 %266, %61
  %268 = sub i32 %267, %64
  %269 = add i32 %268, %68
  %270 = sub i32 %269, %90
  %271 = sub i32 %270, %91
  %272 = add i32 %271, %94
  %273 = sub i32 %272, %98
  %274 = sub i32 %273, %57
  %275 = sub i32 %274, %34
  %276 = add i32 %275, %115
  %277 = sub i32 %276, %116
  %278 = add i32 %277, %135
  %279 = sub i32 %278, %149
  %280 = sub i32 %279, %28
  %281 = add i32 %280, %154
  %282 = sub i32 %281, %156
  %283 = add i32 %282, %160
  %284 = add i32 %283, %172
  %285 = add i32 %284, %188
  %286 = sub i32 %285, %189
  %287 = sub i32 %286, %210
  %288 = add i32 %287, %69
  %289 = add i32 %288, %16
  %290 = add i32 %289, %31
  %291 = add i32 %290, %33
  %292 = add i32 %291, %38
  %293 = sub i32 %292, %41
  %294 = add i32 %293, %42
  %295 = add i32 %294, %43
  %296 = add i32 %295, %49
  %297 = add i32 %296, %54
  %298 = add i32 %297, %55
  %299 = add i32 %298, %56
  %300 = add i32 %299, %59
  %301 = sub i32 %300, %63
  %302 = add i32 %301, %73
  %303 = sub i32 %302, %86
  %304 = add i32 %303, %87
  %305 = add i32 %304, %88
  %306 = add i32 %305, %89
  %307 = sub i32 %306, %92
  %308 = sub i32 %307, %96
  %309 = sub i32 %308, %97
  %310 = add i32 %309, %99
  %311 = sub i32 %310, %101
  %312 = sub i32 %311, %103
  %313 = sub i32 %312, %104
  %314 = sub i32 %313, %105
  %315 = sub i32 %314, %106
  %316 = add i32 %315, %107
  %317 = add i32 %316, %108
  %318 = add i32 %317, %109
  %319 = sub i32 %318, %110
  %320 = add i32 %319, %111
  %321 = sub i32 %320, %114
  %322 = sub i32 %321, %120
  %323 = add i32 %322, %121
  %324 = add i32 %323, %125
  %325 = add i32 %324, %126
  %326 = sub i32 %325, %127
  %327 = sub i32 %326, %130
  %328 = add i32 %327, %131
  %329 = add i32 %328, %132
  %330 = add i32 %329, %133
  %331 = sub i32 %330, %134
  %332 = sub i32 %331, %137
  %333 = add i32 %332, %138
  %334 = add i32 %333, %139
  %335 = sub i32 %334, %140
  %336 = sub i32 %335, %141
  %337 = add i32 %336, %142
  %338 = sub i32 %337, %146
  %339 = add i32 %338, %147
  %340 = add i32 %339, %150
  %341 = sub i32 %340, %66
  %342 = add i32 %341, %155
  %343 = sub i32 %342, %157
  %344 = sub i32 %343, %158
  %345 = add i32 %344, %159
  %346 = add i32 %345, %75
  %347 = add i32 %346, %168
  %348 = add i32 %347, %173
  %349 = sub i32 %348, %174
  %350 = add i32 %349, %176
  %351 = sub i32 %350, %178
  %352 = add i32 %351, %179
  %353 = add i32 %352, %180
  %354 = sub i32 %353, %181
  %355 = sub i32 %354, %184
  %356 = add i32 %355, %187
  %357 = add i32 %356, %190
  %358 = add i32 %357, %194
  %359 = add i32 %358, %197
  %360 = sub i32 %359, %198
  %361 = add i32 %360, %199
  %362 = sub i32 %361, %204
  %363 = sub i32 %362, %205
  %364 = sub i32 %363, %209
  %365 = sub i32 %364, %211
  %366 = sub i32 %365, %212
  %367 = sub i32 %366, %213
  %368 = add i32 %367, %214
  %369 = add i32 %368, %215
  %370 = sub i32 %369, %221
  %371 = add i32 %370, %12
  %372 = add i32 %371, %13
  %373 = add i32 %372, %14
  %374 = sub i32 %373, %15
  %375 = sub i32 %374, %27
  %376 = sub i32 %375, %36
  %377 = sub i32 %376, %48
  %378 = sub i32 %377, %67
  %379 = sub i32 %378, %72
  %380 = sub i32 %379, %77
  %381 = sub i32 %380, %82
  %382 = add i32 %381, %84
  %383 = add i32 %382, %123
  %384 = sub i32 %383, %129
  %385 = sub i32 %384, %145
  %386 = add i32 %385, %148
  %387 = sub i32 %386, %167
  %388 = sub i32 %387, %171
  %389 = sub i32 %388, %183
  %390 = add i32 %389, %193
  %391 = sub i32 %390, %201
  %392 = sub i32 %391, %203
  %393 = sub i32 %392, %208
  %394 = sub i32 %393, %218
  %395 = sub i32 %394, %220
  %396 = sub i32 %395, %223
  %397 = add i32 %396, %225
  %398 = add i32 %397, %230
  %399 = add i32 %398, %231
  %400 = add i32 %399, %253
  %401 = add i32 %400, %249
  %402 = add i32 %401, %243
  %403 = icmp eq i32 %10, %402
  %404 = select i1 %403, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %405 = tail call i32 @puts(i8* nonnull dereferenceable(1) %404)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
