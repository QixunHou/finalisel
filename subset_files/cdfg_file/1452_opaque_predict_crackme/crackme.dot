digraph "DFG for'crackme' function" {
	Node0x1bf5460[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1bf5b10[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1bf5bd0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x1bf5c40[shape=record, label="  %6 = mul i32 %1, 5"];
	Node0x1bf5cb0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1bf5d50[shape=record, label="  %8 = xor i32 %0, 1073741823"];
	Node0x1bf5dc0[shape=record, label="  %9 = and i32 %8, %1"];
	Node0x1bf5e60[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x1bf5f00[shape=record, label="  %11 = shl i32 %5, 1"];
	Node0x1bf5f70[shape=record, label="  %12 = and i32 %1, %0"];
	Node0x1bf6010[shape=record, label="  %13 = mul i32 %12, -6"];
	Node0x1bf6080[shape=record, label="  %14 = sub i32 %0, %1"];
	Node0x1bf60f0[shape=record, label="  %15 = add i32 %14, %5"];
	Node0x1bf6160[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x1bf61d0[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x1bf6240[shape=record, label="  %18 = sub i32 %17, %10"];
	Node0x1bf62b0[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0x1bf6320[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1bf6390[shape=record, label="  %21 = icmp eq i32 %3, %20"];
	Node0x1b96268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1bf6830[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x1bf6880[shape=record, label="  ret void"];
	Node0x1bf5460 -> Node0x1bf5b10;
	Node0x1bf5b10 -> Node0x1bf5bd0;
	Node0x1bf5bd0 -> Node0x1bf5c40;
	Node0x1bf5c40 -> Node0x1bf5cb0;
	Node0x1bf5cb0 -> Node0x1bf5d50;
	Node0x1bf5d50 -> Node0x1bf5dc0;
	Node0x1bf5dc0 -> Node0x1bf5e60;
	Node0x1bf5e60 -> Node0x1bf5f00;
	Node0x1bf5f00 -> Node0x1bf5f70;
	Node0x1bf5f70 -> Node0x1bf6010;
	Node0x1bf6010 -> Node0x1bf6080;
	Node0x1bf6080 -> Node0x1bf60f0;
	Node0x1bf60f0 -> Node0x1bf6160;
	Node0x1bf6160 -> Node0x1bf61d0;
	Node0x1bf61d0 -> Node0x1bf6240;
	Node0x1bf6240 -> Node0x1bf62b0;
	Node0x1bf62b0 -> Node0x1bf6320;
	Node0x1bf6320 -> Node0x1bf6390;
	Node0x1bf6390 -> Node0x1b96268;
	Node0x1b96268 -> Node0x1bf6830;
	Node0x1bf6830 -> Node0x1bf6880;
edge [color=red]
	Node0x1bf5b10 -> Node0x1bf5bd0;
	Node0x1bf5d50 -> Node0x1bf5dc0;
	Node0x1bf5dc0 -> Node0x1bf5e60;
	Node0x1bf5bd0 -> Node0x1bf5f00;
	Node0x1bf5f70 -> Node0x1bf6010;
	Node0x1bf6080 -> Node0x1bf60f0;
	Node0x1bf5bd0 -> Node0x1bf60f0;
	Node0x1bf60f0 -> Node0x1bf6160;
	Node0x1bf5c40 -> Node0x1bf6160;
	Node0x1bf6160 -> Node0x1bf61d0;
	Node0x1bf5cb0 -> Node0x1bf61d0;
	Node0x1bf61d0 -> Node0x1bf6240;
	Node0x1bf5e60 -> Node0x1bf6240;
	Node0x1bf6240 -> Node0x1bf62b0;
	Node0x1bf5f00 -> Node0x1bf62b0;
	Node0x1bf62b0 -> Node0x1bf6320;
	Node0x1bf6010 -> Node0x1bf6320;
	Node0x1bf5460 -> Node0x1bf6390;
	Node0x1bf6320 -> Node0x1bf6390;
	Node0x1bf6390 -> Node0x1b96268;
	Node0x1b96268 -> Node0x1bf6830;
}
