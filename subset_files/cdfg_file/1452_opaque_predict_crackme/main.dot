digraph "DFG for'main' function" {
	Node0x1bf6a48[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1bf6ac8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1bf6b58[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1bf6fb8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1bf7098[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1bf71b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1bf73f0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1bf74a8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1bf8418[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1bf8aa0[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x1bf8b10[shape=record, label="  %9 = xor i32 %7, -1"];
	Node0x1bf8b80[shape=record, label="  %10 = and i32 %6, %9"];
	Node0x1bf8bf0[shape=record, label="  %11 = mul i32 %7, 5"];
	Node0x1bf8c60[shape=record, label="  %12 = or i32 %7, %6"];
	Node0x1bf8cd0[shape=record, label="  %13 = xor i32 %6, 1073741823"];
	Node0x1bf8d40[shape=record, label="  %14 = and i32 %13, %7"];
	Node0x1bf8db0[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0x1bf8e20[shape=record, label="  %16 = shl i32 %10, 1"];
	Node0x1bf8e90[shape=record, label="  %17 = and i32 %7, %6"];
	Node0x1bf8f00[shape=record, label="  %18 = mul i32 %17, -6"];
	Node0x1bf8f70[shape=record, label="  %19 = sub i32 %6, %7"];
	Node0x1bf8fe0[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x1bf9050[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x1bf90c0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x1bf9130[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0x1bf91a0[shape=record, label="  %24 = sub i32 %23, %16"];
	Node0x1bf9210[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x1bf9280[shape=record, label="  %26 = icmp eq i32 %8, %25"];
	Node0x1b979d8[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1bf9310[shape=record, label="  %28 = call i32 @puts(i8* nonnull dereferenceable(1) %27) #5"];
	Node0x1bf9568[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1bf96c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1bf9788[shape=record, label="  ret i32 0"];
	Node0x1bf6a48 -> Node0x1bf6ac8;
	Node0x1bf6ac8 -> Node0x1bf6b58;
	Node0x1bf6b58 -> Node0x1bf6fb8;
	Node0x1bf6fb8 -> Node0x1bf7098;
	Node0x1bf7098 -> Node0x1bf71b8;
	Node0x1bf71b8 -> Node0x1bf73f0;
	Node0x1bf73f0 -> Node0x1bf74a8;
	Node0x1bf74a8 -> Node0x1bf8418;
	Node0x1bf8418 -> Node0x1bf8aa0;
	Node0x1bf8aa0 -> Node0x1bf8b10;
	Node0x1bf8b10 -> Node0x1bf8b80;
	Node0x1bf8b80 -> Node0x1bf8bf0;
	Node0x1bf8bf0 -> Node0x1bf8c60;
	Node0x1bf8c60 -> Node0x1bf8cd0;
	Node0x1bf8cd0 -> Node0x1bf8d40;
	Node0x1bf8d40 -> Node0x1bf8db0;
	Node0x1bf8db0 -> Node0x1bf8e20;
	Node0x1bf8e20 -> Node0x1bf8e90;
	Node0x1bf8e90 -> Node0x1bf8f00;
	Node0x1bf8f00 -> Node0x1bf8f70;
	Node0x1bf8f70 -> Node0x1bf8fe0;
	Node0x1bf8fe0 -> Node0x1bf9050;
	Node0x1bf9050 -> Node0x1bf90c0;
	Node0x1bf90c0 -> Node0x1bf9130;
	Node0x1bf9130 -> Node0x1bf91a0;
	Node0x1bf91a0 -> Node0x1bf9210;
	Node0x1bf9210 -> Node0x1bf9280;
	Node0x1bf9280 -> Node0x1b979d8;
	Node0x1b979d8 -> Node0x1bf9310;
	Node0x1bf9310 -> Node0x1bf9568;
	Node0x1bf9568 -> Node0x1bf96c8;
	Node0x1bf96c8 -> Node0x1bf9788;
edge [color=red]
	Node0x1bf6a48 -> Node0x1bf6b58;
	Node0x1bf6b58 -> Node0x1bf6fb8;
	Node0x1bf6ac8 -> Node0x1bf7098;
	Node0x1bf7098 -> Node0x1bf71b8;
	Node0x1bf6a48 -> Node0x1bf73f0;
	Node0x1bf6ac8 -> Node0x1bf73f0;
	Node0x1bf6a48 -> Node0x1bf74a8;
	Node0x1bf6ac8 -> Node0x1bf8418;
	Node0x1bf8418 -> Node0x1bf8aa0;
	Node0x1bf74a8 -> Node0x1bf8aa0;
	Node0x1bf8418 -> Node0x1bf8b10;
	Node0x1bf74a8 -> Node0x1bf8b80;
	Node0x1bf8b10 -> Node0x1bf8b80;
	Node0x1bf8418 -> Node0x1bf8bf0;
	Node0x1bf8418 -> Node0x1bf8c60;
	Node0x1bf74a8 -> Node0x1bf8c60;
	Node0x1bf74a8 -> Node0x1bf8cd0;
	Node0x1bf8cd0 -> Node0x1bf8d40;
	Node0x1bf8418 -> Node0x1bf8d40;
	Node0x1bf8d40 -> Node0x1bf8db0;
	Node0x1bf8b80 -> Node0x1bf8e20;
	Node0x1bf8418 -> Node0x1bf8e90;
	Node0x1bf74a8 -> Node0x1bf8e90;
	Node0x1bf8e90 -> Node0x1bf8f00;
	Node0x1bf74a8 -> Node0x1bf8f70;
	Node0x1bf8418 -> Node0x1bf8f70;
	Node0x1bf8f70 -> Node0x1bf8fe0;
	Node0x1bf8b80 -> Node0x1bf8fe0;
	Node0x1bf8fe0 -> Node0x1bf9050;
	Node0x1bf8bf0 -> Node0x1bf9050;
	Node0x1bf9050 -> Node0x1bf90c0;
	Node0x1bf8c60 -> Node0x1bf90c0;
	Node0x1bf90c0 -> Node0x1bf9130;
	Node0x1bf8db0 -> Node0x1bf9130;
	Node0x1bf9130 -> Node0x1bf91a0;
	Node0x1bf8e20 -> Node0x1bf91a0;
	Node0x1bf91a0 -> Node0x1bf9210;
	Node0x1bf8f00 -> Node0x1bf9210;
	Node0x1bf8aa0 -> Node0x1bf9280;
	Node0x1bf9210 -> Node0x1bf9280;
	Node0x1bf9280 -> Node0x1b979d8;
	Node0x1b979d8 -> Node0x1bf9310;
	Node0x1bf7098 -> Node0x1bf9568;
	Node0x1bf6b58 -> Node0x1bf96c8;
}
