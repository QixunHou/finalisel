; ModuleID = '../.././c_source_file/0541_path_condition_crackme.c'
source_filename = "../.././c_source_file/0541_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = shl i32 %7, 1
  %9 = xor i32 %8, -2
  %10 = xor i32 %4, %3
  %11 = mul i32 %10, 5
  %12 = xor i32 %1, -1
  %13 = or i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %14, %12
  %16 = sub i32 %11, %15
  %17 = add i32 %16, %9
  %18 = xor i32 %10, -1
  %19 = or i32 %6, %3
  %20 = or i32 %4, %3
  %21 = shl i32 %3, 1
  %22 = xor i32 %21, -2
  %23 = xor i32 %19, -1
  %24 = mul i32 %23, 12
  %25 = and i32 %4, %3
  %26 = xor i32 %2, -1
  %27 = or i32 %26, %0
  %28 = shl i32 %27, 1
  %29 = and i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %26, %30
  %32 = and i32 %26, %0
  %33 = xor i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %32, %34
  %36 = shl i32 %35, 1
  %37 = or i32 %2, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %29, %38
  %40 = and i32 %27, %1
  %41 = or i32 %32, %12
  %42 = or i32 %26, %1
  %43 = xor i32 %42, -1
  %44 = xor i32 %43, %0
  %45 = shl i32 %44, 1
  %46 = and i32 %2, %0
  %47 = and i32 %26, %1
  %48 = xor i32 %47, -1
  %49 = xor i32 %46, %48
  %50 = and i32 %12, %0
  %51 = or i32 %50, %2
  %52 = xor i32 %27, -1
  %53 = add i32 %27, 1
  %54 = xor i32 %2, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %33, %55
  %57 = xor i32 %29, %2
  %58 = xor i32 %0, -1
  %59 = and i32 %2, %1
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %58
  %62 = or i32 %12, %0
  %63 = xor i32 %32, -1
  %64 = and i32 %33, %63
  %65 = and i32 %63, %1
  %66 = or i32 %43, %58
  %67 = or i32 %1, %0
  %68 = xor i32 %67, %2
  %69 = xor i32 %67, -1
  %70 = xor i32 %2, %1
  %71 = xor i32 %70, -1
  %72 = or i32 %71, %69
  %73 = shl i32 %72, 1
  %74 = or i32 %59, %58
  %75 = xor i32 %62, -1
  %76 = or i32 %75, %2
  %77 = xor i32 %27, %29
  %78 = add i32 %54, 1
  %79 = shl i32 %59, 1
  %80 = or i32 %55, %1
  %81 = xor i32 %13, %1
  %82 = shl i32 %81, 1
  %83 = xor i32 %30, %2
  %84 = or i32 %33, %26
  %85 = and i32 %42, %0
  %86 = or i32 %70, %69
  %87 = or i32 %37, %0
  %88 = shl i32 %87, 1
  %89 = xor i32 %42, %0
  %90 = or i32 %32, %59
  %91 = or i32 %70, %0
  %92 = and i32 %59, %58
  %93 = and i32 %70, %0
  %94 = or i32 %92, %93
  %95 = and i32 %33, %2
  %96 = xor i32 %59, %0
  %97 = and i32 %71, %0
  %98 = shl i32 %97, 1
  %99 = and i32 %70, %62
  %100 = or i32 %47, %58
  %101 = and i32 %37, %58
  %102 = or i32 %69, %2
  %103 = or i32 %52, %34
  %104 = or i32 %46, %69
  %105 = and i32 %70, %67
  %106 = and i32 %48, %58
  %107 = or i32 %38, %58
  %108 = and i32 %70, %30
  %109 = or i32 %50, %26
  %110 = xor i32 %60, %0
  %111 = and i32 %13, %12
  %112 = xor i32 %46, %67
  %113 = or i32 %26, %75
  %114 = xor i32 %37, %29
  %115 = shl i32 %114, 1
  %116 = or i32 %32, %1
  %117 = or i32 %54, %34
  %118 = or i32 %70, %29
  %119 = xor i32 %46, -1
  %120 = and i32 %119, %12
  %121 = and i32 %62, %71
  %122 = or i32 %29, %52
  %123 = and i32 %27, %33
  %124 = or i32 %26, %34
  %125 = shl i32 %124, 1
  %126 = or i32 %46, %33
  %127 = and i32 %55, %30
  %128 = and i32 %12, %2
  %129 = and i32 %128, %0
  %130 = or i32 %12, %2
  %131 = and i32 %130, %58
  %132 = xor i32 %129, -1
  %133 = xor i32 %131, %132
  %134 = or i32 %34, %2
  %135 = and i32 %54, %12
  %136 = or i32 %55, %12
  %137 = xor i32 %75, %2
  %138 = or i32 %52, %12
  %139 = or i32 %55, %75
  %140 = or i32 %54, %75
  %141 = and i32 %27, %34
  %142 = xor i32 %50, -1
  %143 = xor i32 %142, %2
  %144 = or i32 %54, %12
  %145 = or i32 %43, %0
  %146 = or i32 %71, %75
  %147 = or i32 %32, %33
  %148 = or i32 %33, %52
  %149 = or i32 %48, %58
  %150 = shl i32 %149, 1
  %151 = or i32 %29, %55
  %152 = or i32 %54, %1
  %153 = and i32 %59, %0
  %154 = xor i32 %37, %0
  %155 = xor i32 %154, -1
  %156 = xor i32 %153, %155
  %157 = and i32 %128, %58
  %158 = and i32 %130, %0
  %159 = or i32 %157, %158
  %160 = xor i32 %46, %37
  %161 = add i32 %70, 1
  %162 = or i32 %59, %0
  %163 = or i32 %46, %34
  %164 = or i32 %26, %69
  %165 = shl i32 %164, 2
  %166 = and i32 %67, %2
  %167 = shl i32 %60, 1
  %168 = xor i32 %46, %1
  %169 = xor i32 %129, %91
  %170 = or i32 %59, %50
  %171 = and i32 %60, %58
  %172 = and i32 %54, %33
  %173 = xor i32 %13, %29
  %174 = or i32 %71, %58
  %175 = or i32 %129, %131
  %176 = and i32 %55, %12
  %177 = xor i32 %93, -1
  %178 = xor i32 %92, %177
  %179 = or i32 %70, %58
  %180 = shl i32 %179, 1
  %181 = xor i32 %27, %1
  %182 = add i32 %13, 1
  %183 = and i32 %33, %119
  %184 = xor i32 %70, %0
  %185 = xor i32 %153, %184
  %186 = xor i32 %50, %2
  %187 = xor i32 %158, -1
  %188 = xor i32 %157, %187
  %189 = xor i32 %63, %1
  %190 = and i32 %54, %62
  %191 = or i32 %153, %154
  %192 = and i32 %71, %142
  %193 = and i32 %26, %34
  %194 = shl i32 %193, 1
  %195 = or i32 %33, %2
  %196 = xor i32 %32, %60
  %197 = xor i32 %48, %0
  %198 = xor i32 %130, %58
  %199 = xor i32 %198, %129
  %200 = and i32 %55, %1
  %201 = or i32 %46, %47
  %202 = xor i32 %32, %42
  %203 = xor i32 %50, %60
  %204 = or i32 %14, %1
  %205 = or i32 %46, %38
  %206 = and i32 %71, %30
  %207 = or i32 %54, %50
  %208 = and i32 %119, %1
  %209 = and i32 %54, %142
  %210 = shl i32 %209, 1
  %211 = or i32 %33, %14
  %212 = xor i32 %69, %2
  %213 = and i32 %70, %142
  %214 = or i32 %129, %184
  %215 = or i32 %52, %1
  %216 = or i32 %38, %0
  %217 = and i32 %67, %55
  %218 = xor i32 %119, %1
  %219 = shl i32 %184, 1
  %220 = and i32 %63, %34
  %221 = and i32 %13, %34
  %222 = or i32 %54, %69
  %223 = xor i32 %91, -1
  %224 = or i32 %129, %223
  %225 = or i32 %153, %101
  %226 = or i32 %32, %43
  %227 = xor i32 %42, %29
  %228 = or i32 %70, %75
  %229 = shl i32 %228, 1
  %230 = and i32 %55, %142
  %231 = and i32 %67, %26
  %232 = shl i32 %231, 2
  %233 = and i32 %63, %12
  %234 = and i32 %13, %1
  %235 = xor i32 %14, %1
  %236 = or i32 %42, %0
  %237 = or i32 %47, %50
  %238 = xor i32 %179, -1
  %239 = or i32 %157, %238
  %240 = and i32 %34, %2
  %241 = or i32 %14, %34
  %242 = or i32 %70, %50
  %243 = and i32 %62, %55
  %244 = xor i32 %46, %62
  %245 = xor i32 %157, %179
  %246 = xor i32 %47, %0
  %247 = and i32 %38, %58
  %248 = mul i32 %247, -18
  %249 = and i32 %47, %58
  %250 = shl i32 %249, 2
  %251 = and i32 %38, %0
  %252 = shl i32 %251, 3
  %253 = and i32 %47, %0
  %254 = and i32 %43, %58
  %255 = mul i32 %254, -6
  %256 = mul i32 %92, -22
  %257 = and i32 %43, %0
  %258 = mul i32 %257, -7
  %259 = add i32 %172, %153
  %260 = add i32 %259, %80
  %261 = add i32 %260, %7
  %262 = mul i32 %261, 5
  %263 = add i32 %25, %84
  %264 = mul i32 %263, 3
  %265 = add i32 %195, -1
  %266 = add i32 %265, %166
  %267 = add i32 %266, %102
  %268 = add i32 %267, %63
  %269 = add i32 %268, %244
  %270 = add i32 %269, %235
  %271 = add i32 %270, %226
  %272 = add i32 %271, %213
  %273 = add i32 %272, %190
  %274 = add i32 %273, %171
  %275 = add i32 %274, %163
  %276 = add i32 %275, %117
  %277 = add i32 %276, %107
  %278 = add i32 %277, %89
  %279 = add i32 %278, %85
  %280 = add i32 %279, %66
  %281 = add i32 %280, %19
  %282 = add i32 %281, %175
  %283 = sub i32 %282, %20
  %284 = shl i32 %283, 1
  %285 = sub i32 1, %0
  %286 = sub i32 %285, %0
  %287 = sub i32 %286, %1
  %288 = add i32 %287, %12
  %289 = sub i32 %288, %62
  %290 = add i32 %289, %50
  %291 = add i32 %290, %26
  %292 = add i32 %291, %34
  %293 = sub i32 %292, %2
  %294 = sub i32 %293, %3
  %295 = add i32 %294, %31
  %296 = sub i32 %295, %51
  %297 = add i32 %296, %53
  %298 = add i32 %297, %57
  %299 = sub i32 %298, %68
  %300 = add i32 %299, %76
  %301 = add i32 %300, %78
  %302 = add i32 %301, %83
  %303 = add i32 %302, %95
  %304 = sub i32 %303, %32
  %305 = sub i32 %304, %47
  %306 = sub i32 %305, %109
  %307 = sub i32 %306, %113
  %308 = sub i32 %307, %134
  %309 = add i32 %308, %137
  %310 = add i32 %309, %143
  %311 = add i32 %310, %13
  %312 = add i32 %311, %161
  %313 = sub i32 %312, %54
  %314 = add i32 %313, %182
  %315 = sub i32 %314, %186
  %316 = sub i32 %315, %37
  %317 = sub i32 %316, %212
  %318 = add i32 %317, %48
  %319 = sub i32 %318, %240
  %320 = sub i32 %319, %4
  %321 = add i32 %320, %6
  %322 = sub i32 %321, %28
  %323 = sub i32 %322, %39
  %324 = add i32 %323, %40
  %325 = sub i32 %324, %41
  %326 = sub i32 %325, %49
  %327 = sub i32 %326, %56
  %328 = sub i32 %327, %61
  %329 = add i32 %328, %64
  %330 = add i32 %329, %65
  %331 = add i32 %330, %74
  %332 = sub i32 %331, %77
  %333 = sub i32 %332, %79
  %334 = sub i32 %333, %86
  %335 = sub i32 %334, %90
  %336 = sub i32 %335, %91
  %337 = add i32 %336, %96
  %338 = add i32 %337, %99
  %339 = sub i32 %338, %100
  %340 = add i32 %339, %101
  %341 = add i32 %340, %103
  %342 = add i32 %341, %104
  %343 = add i32 %342, %105
  %344 = add i32 %343, %106
  %345 = sub i32 %344, %108
  %346 = add i32 %345, %110
  %347 = add i32 %346, %111
  %348 = sub i32 %347, %112
  %349 = sub i32 %348, %116
  %350 = sub i32 %349, %118
  %351 = sub i32 %350, %120
  %352 = sub i32 %351, %121
  %353 = add i32 %352, %122
  %354 = add i32 %353, %123
  %355 = sub i32 %354, %125
  %356 = sub i32 %355, %126
  %357 = sub i32 %356, %127
  %358 = add i32 %357, %93
  %359 = sub i32 %358, %135
  %360 = sub i32 %359, %136
  %361 = sub i32 %360, %138
  %362 = sub i32 %361, %139
  %363 = add i32 %362, %140
  %364 = sub i32 %363, %141
  %365 = add i32 %364, %144
  %366 = add i32 %365, %145
  %367 = add i32 %366, %146
  %368 = add i32 %367, %147
  %369 = add i32 %368, %148
  %370 = add i32 %369, %151
  %371 = add i32 %370, %152
  %372 = add i32 %371, %160
  %373 = add i32 %372, %162
  %374 = add i32 %373, %165
  %375 = sub i32 %374, %167
  %376 = sub i32 %375, %168
  %377 = add i32 %376, %170
  %378 = sub i32 %377, %173
  %379 = add i32 %378, %174
  %380 = add i32 %379, %176
  %381 = add i32 %380, %154
  %382 = sub i32 %381, %181
  %383 = add i32 %382, %183
  %384 = sub i32 %383, %189
  %385 = sub i32 %384, %192
  %386 = sub i32 %385, %194
  %387 = sub i32 %386, %196
  %388 = sub i32 %387, %197
  %389 = add i32 %388, %200
  %390 = sub i32 %389, %201
  %391 = add i32 %390, %202
  %392 = add i32 %391, %203
  %393 = add i32 %392, %204
  %394 = add i32 %393, %205
  %395 = add i32 %394, %206
  %396 = add i32 %395, %207
  %397 = sub i32 %396, %208
  %398 = sub i32 %397, %211
  %399 = add i32 %398, %215
  %400 = sub i32 %399, %216
  %401 = add i32 %400, %217
  %402 = add i32 %401, %218
  %403 = add i32 %402, %220
  %404 = add i32 %403, %221
  %405 = add i32 %404, %222
  %406 = add i32 %405, %227
  %407 = sub i32 %406, %230
  %408 = sub i32 %407, %232
  %409 = sub i32 %408, %233
  %410 = sub i32 %409, %234
  %411 = add i32 %410, %236
  %412 = sub i32 %411, %237
  %413 = add i32 %412, %241
  %414 = sub i32 %413, %242
  %415 = sub i32 %414, %243
  %416 = sub i32 %415, %246
  %417 = sub i32 %416, %253
  %418 = add i32 %417, %18
  %419 = sub i32 %418, %22
  %420 = sub i32 %419, %36
  %421 = sub i32 %420, %45
  %422 = sub i32 %421, %73
  %423 = sub i32 %422, %82
  %424 = sub i32 %423, %88
  %425 = sub i32 %424, %94
  %426 = sub i32 %425, %98
  %427 = sub i32 %426, %115
  %428 = sub i32 %427, %133
  %429 = sub i32 %428, %150
  %430 = add i32 %429, %156
  %431 = sub i32 %430, %159
  %432 = sub i32 %431, %169
  %433 = sub i32 %432, %178
  %434 = sub i32 %433, %180
  %435 = add i32 %434, %185
  %436 = add i32 %435, %188
  %437 = sub i32 %436, %191
  %438 = sub i32 %437, %199
  %439 = sub i32 %438, %210
  %440 = add i32 %439, %214
  %441 = sub i32 %440, %219
  %442 = add i32 %441, %224
  %443 = sub i32 %442, %225
  %444 = sub i32 %443, %229
  %445 = sub i32 %444, %239
  %446 = add i32 %445, %245
  %447 = add i32 %446, %248
  %448 = sub i32 %447, %250
  %449 = add i32 %448, %252
  %450 = add i32 %449, %255
  %451 = add i32 %450, %256
  %452 = add i32 %451, %258
  %453 = add i32 %452, %24
  %454 = add i32 %453, %264
  %455 = add i32 %454, %262
  %456 = add i32 %455, %284
  %457 = icmp eq i32 %17, %456
  %458 = select i1 %457, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %459 = tail call i32 @puts(i8* nonnull dereferenceable(1) %458)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
