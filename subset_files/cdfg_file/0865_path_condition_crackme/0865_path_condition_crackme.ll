; ModuleID = '../.././c_source_file/0865_path_condition_crackme.c'
source_filename = "../.././c_source_file/0865_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %2, -1
  %8 = shl i32 %7, 1
  %9 = add i32 %8, %6
  %10 = or i32 %4, %3
  %11 = mul i32 %10, -4
  %12 = and i32 %4, %3
  %13 = or i32 %11, 1
  %14 = shl i32 %3, 1
  %15 = or i32 %6, %3
  %16 = shl i32 %15, 1
  %17 = shl i32 %10, 2
  %18 = xor i32 %17, -4
  %19 = xor i32 %15, -1
  %20 = and i32 %6, %3
  %21 = mul i32 %20, 10
  %22 = mul i32 %12, 6
  %23 = or i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %24, %26
  %28 = shl i32 %23, 1
  %29 = xor i32 %0, -1
  %30 = or i32 %7, %1
  %31 = xor i32 %30, -1
  %32 = or i32 %31, %29
  %33 = and i32 %1, %0
  %34 = or i32 %33, %24
  %35 = and i32 %26, %2
  %36 = and i32 %7, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %2, %1
  %39 = xor i32 %38, -1
  %40 = xor i32 %39, %0
  %41 = xor i32 %1, -1
  %42 = or i32 %41, %0
  %43 = xor i32 %2, %0
  %44 = and i32 %43, %42
  %45 = and i32 %41, %0
  %46 = and i32 %7, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %45, %47
  %49 = xor i32 %42, -1
  %50 = xor i32 %43, -1
  %51 = or i32 %50, %49
  %52 = or i32 %36, %31
  %53 = or i32 %7, %0
  %54 = and i32 %53, %41
  %55 = and i32 %41, %2
  %56 = and i32 %55, %0
  %57 = or i32 %41, %2
  %58 = and i32 %57, %29
  %59 = or i32 %56, %58
  %60 = or i32 %26, %2
  %61 = and i32 %2, %0
  %62 = or i32 %61, %26
  %63 = add i32 %38, 1
  %64 = or i32 %46, %0
  %65 = xor i32 %2, %1
  %66 = or i32 %65, %49
  %67 = xor i32 %45, -1
  %68 = xor i32 %67, %2
  %69 = or i32 %50, %1
  %70 = or i32 %65, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %56, %71
  %73 = or i32 %1, %0
  %74 = xor i32 %73, -1
  %75 = add i32 %73, 1
  %76 = and i32 %47, %0
  %77 = and i32 %50, %26
  %78 = xor i32 %33, -1
  %79 = xor i32 %53, -1
  %80 = or i32 %79, %1
  %81 = and i32 %73, %50
  %82 = or i32 %33, %50
  %83 = or i32 %25, %79
  %84 = and i32 %37, %1
  %85 = and i32 %23, %1
  %86 = and i32 %78, %2
  %87 = shl i32 %86, 1
  %88 = or i32 %7, %49
  %89 = and i32 %30, %29
  %90 = and i32 %39, %29
  %91 = and i32 %43, %78
  %92 = or i32 %33, %7
  %93 = and i32 %55, %29
  %94 = and i32 %57, %0
  %95 = or i32 %93, %94
  %96 = xor i32 %30, %0
  %97 = and i32 %25, %37
  %98 = xor i32 %61, %42
  %99 = and i32 %65, %67
  %100 = shl i32 %99, 2
  %101 = xor i32 %56, %70
  %102 = xor i32 %45, %2
  %103 = shl i32 %102, 1
  %104 = or i32 %47, %0
  %105 = xor i32 %65, -1
  %106 = or i32 %105, %49
  %107 = and i32 %43, %25
  %108 = and i32 %43, %73
  %109 = shl i32 %108, 1
  %110 = or i32 %50, %26
  %111 = shl i32 %110, 1
  %112 = and i32 %50, %78
  %113 = shl i32 %112, 1
  %114 = or i32 %36, %25
  %115 = or i32 %24, %41
  %116 = xor i32 %31, %0
  %117 = and i32 %65, %73
  %118 = xor i32 %56, -1
  %119 = xor i32 %58, %118
  %120 = and i32 %42, %7
  %121 = and i32 %25, %2
  %122 = xor i32 %74, %2
  %123 = or i32 %65, %29
  %124 = xor i32 %123, 2147483647
  %125 = or i32 %124, %93
  %126 = shl i32 %125, 1
  %127 = or i32 %105, %29
  %128 = or i32 %2, %1
  %129 = xor i32 %128, %0
  %130 = or i32 %39, %29
  %131 = or i32 %61, %74
  %132 = or i32 %43, %1
  %133 = and i32 %50, %67
  %134 = and i32 %53, %26
  %135 = or i32 %45, %7
  %136 = or i32 %105, %74
  %137 = and i32 %65, %78
  %138 = or i32 %43, %26
  %139 = or i32 %79, %41
  %140 = and i32 %73, %7
  %141 = or i32 %7, %74
  %142 = or i32 %33, %31
  %143 = xor i32 %128, %33
  %144 = and i32 %42, %105
  %145 = xor i32 %46, %0
  %146 = xor i32 %53, %1
  %147 = and i32 %47, %29
  %148 = or i32 %65, %33
  %149 = or i32 %24, %1
  %150 = and i32 %25, %7
  %151 = xor i32 %61, %128
  %152 = or i32 %61, %49
  %153 = and i32 %37, %41
  %154 = or i32 %33, %79
  %155 = and i32 %7, %26
  %156 = xor i32 %65, %0
  %157 = or i32 %31, %0
  %158 = or i32 %33, %2
  %159 = xor i32 %57, %0
  %160 = or i32 %56, %159
  %161 = and i32 %38, %0
  %162 = xor i32 %161, %156
  %163 = shl i32 %162, 1
  %164 = and i32 %105, %0
  %165 = or i32 %43, %49
  %166 = xor i32 %61, -1
  %167 = and i32 %166, %1
  %168 = and i32 %65, %42
  %169 = and i32 %38, %29
  %170 = and i32 %128, %0
  %171 = xor i32 %170, -1
  %172 = xor i32 %169, %171
  %173 = or i32 %38, %45
  %174 = or i32 %49, %2
  %175 = xor i32 %73, %2
  %176 = xor i32 %37, %1
  %177 = and i32 %65, %29
  %178 = xor i32 %177, -1
  %179 = xor i32 %161, %178
  %180 = or i32 %105, %0
  %181 = or i32 %61, %25
  %182 = xor i32 %61, %73
  %183 = or i32 %36, %26
  %184 = xor i32 %45, %39
  %185 = shl i32 %177, 1
  %186 = xor i32 %128, -1
  %187 = or i32 %33, %186
  %188 = or i32 %128, %29
  %189 = xor i32 %36, %30
  %190 = xor i32 %23, %1
  %191 = and i32 %53, %25
  %192 = shl i32 %191, 1
  %193 = and i32 %23, %41
  %194 = and i32 %23, %25
  %195 = and i32 %30, %0
  %196 = or i32 %25, %50
  %197 = and i32 %105, %67
  %198 = and i32 %73, %2
  %199 = shl i32 %198, 1
  %200 = or i32 %45, %105
  %201 = xor i32 %23, %33
  %202 = and i32 %23, %26
  %203 = shl i32 %202, 1
  %204 = xor i32 %203, -1
  %205 = xor i32 %166, %1
  %206 = shl i32 %205, 1
  %207 = and i32 %43, %67
  %208 = and i32 %43, %1
  %209 = xor i32 %79, %1
  %210 = xor i32 %24, %1
  %211 = or i32 %61, %1
  %212 = and i32 %37, %26
  %213 = or i32 %128, %0
  %214 = xor i32 %36, %39
  %215 = and i32 %50, %1
  %216 = and i32 %42, %50
  %217 = and i32 %43, %26
  %218 = or i32 %30, %0
  %219 = or i32 %186, %0
  %220 = or i32 %7, %26
  %221 = and i32 %67, %2
  %222 = and i32 %105, %29
  %223 = and i32 %42, %2
  %224 = and i32 %43, %41
  %225 = shl i32 %224, 1
  %226 = xor i32 %159, %118
  %227 = xor i32 %38, %0
  %228 = or i32 %61, %41
  %229 = and i32 %128, %29
  %230 = and i32 %166, %41
  %231 = shl i32 %230, 1
  %232 = or i32 %38, %29
  %233 = and i32 %7, %78
  %234 = or i32 %169, %170
  %235 = or i32 %65, %45
  %236 = and i32 %186, %29
  %237 = and i32 %46, %29
  %238 = shl i32 %237, 2
  %239 = and i32 %186, %0
  %240 = mul i32 %239, -20
  %241 = and i32 %46, %0
  %242 = mul i32 %241, -17
  %243 = and i32 %31, %0
  %244 = shl i32 %243, 1
  %245 = mul i32 %161, -9
  %246 = add i32 %41, %2
  %247 = add i32 %246, %42
  %248 = add i32 %247, %186
  %249 = add i32 %248, %158
  %250 = add i32 %249, %68
  %251 = add i32 %250, %232
  %252 = add i32 %251, %213
  %253 = add i32 %252, %201
  %254 = add i32 %253, %195
  %255 = add i32 %254, %194
  %256 = add i32 %255, %180
  %257 = add i32 %256, %156
  %258 = add i32 %257, %142
  %259 = add i32 %258, %85
  %260 = add i32 %259, %80
  %261 = add i32 %260, %64
  %262 = add i32 %261, %4
  %263 = add i32 %262, %160
  %264 = shl i32 %263, 1
  %265 = sub i32 %135, %122
  %266 = sub i32 %265, %169
  %267 = add i32 %266, %210
  %268 = add i32 %267, %187
  %269 = add i32 %268, %19
  %270 = mul i32 %269, 3
  %271 = add i32 %236, %138
  %272 = add i32 %271, %97
  %273 = sub i32 %91, %272
  %274 = mul i32 %273, 5
  %275 = shl i32 %165, 2
  %276 = add i32 %275, -4
  %277 = sub i32 1, %0
  %278 = sub i32 %277, %1
  %279 = add i32 %278, %75
  %280 = add i32 %279, %49
  %281 = add i32 %280, %73
  %282 = sub i32 %281, %45
  %283 = add i32 %282, %26
  %284 = add i32 %283, %35
  %285 = add i32 %284, %37
  %286 = sub i32 %285, %60
  %287 = add i32 %286, %63
  %288 = add i32 %287, %88
  %289 = sub i32 %288, %92
  %290 = sub i32 %289, %65
  %291 = sub i32 %290, %61
  %292 = sub i32 %291, %120
  %293 = add i32 %292, %121
  %294 = add i32 %293, %43
  %295 = sub i32 %294, %38
  %296 = add i32 %295, %31
  %297 = sub i32 %296, %140
  %298 = add i32 %297, %141
  %299 = add i32 %298, %150
  %300 = sub i32 %299, %155
  %301 = sub i32 %300, %174
  %302 = add i32 %301, %175
  %303 = sub i32 %302, %36
  %304 = sub i32 %303, %128
  %305 = add i32 %304, %24
  %306 = sub i32 %305, %220
  %307 = add i32 %306, %221
  %308 = sub i32 %307, %223
  %309 = add i32 %308, %166
  %310 = sub i32 %309, %233
  %311 = sub i32 %310, %14
  %312 = sub i32 %311, %27
  %313 = sub i32 %312, %28
  %314 = sub i32 %313, %32
  %315 = sub i32 %314, %34
  %316 = add i32 %315, %40
  %317 = add i32 %316, %44
  %318 = sub i32 %317, %48
  %319 = sub i32 %318, %51
  %320 = sub i32 %319, %52
  %321 = add i32 %320, %54
  %322 = sub i32 %321, %62
  %323 = add i32 %322, %66
  %324 = sub i32 %323, %69
  %325 = sub i32 %324, %76
  %326 = sub i32 %325, %77
  %327 = add i32 %326, %81
  %328 = add i32 %327, %82
  %329 = add i32 %328, %83
  %330 = sub i32 %329, %84
  %331 = sub i32 %330, %87
  %332 = sub i32 %331, %89
  %333 = sub i32 %332, %90
  %334 = sub i32 %333, %96
  %335 = sub i32 %334, %98
  %336 = sub i32 %335, %103
  %337 = sub i32 %336, %104
  %338 = add i32 %337, %106
  %339 = sub i32 %338, %107
  %340 = sub i32 %339, %114
  %341 = add i32 %340, %115
  %342 = add i32 %341, %116
  %343 = sub i32 %342, %117
  %344 = sub i32 %343, %127
  %345 = add i32 %344, %129
  %346 = add i32 %345, %130
  %347 = sub i32 %346, %131
  %348 = add i32 %347, %132
  %349 = add i32 %348, %133
  %350 = add i32 %349, %134
  %351 = sub i32 %350, %136
  %352 = sub i32 %351, %137
  %353 = add i32 %352, %139
  %354 = sub i32 %353, %143
  %355 = add i32 %354, %144
  %356 = sub i32 %355, %145
  %357 = sub i32 %356, %146
  %358 = sub i32 %357, %147
  %359 = sub i32 %358, %148
  %360 = add i32 %359, %149
  %361 = sub i32 %360, %151
  %362 = add i32 %361, %152
  %363 = add i32 %362, %153
  %364 = sub i32 %363, %154
  %365 = add i32 %364, %157
  %366 = add i32 %365, %164
  %367 = sub i32 %366, %167
  %368 = sub i32 %367, %168
  %369 = sub i32 %368, %173
  %370 = add i32 %369, %176
  %371 = add i32 %370, %181
  %372 = add i32 %371, %182
  %373 = add i32 %372, %183
  %374 = add i32 %373, %184
  %375 = sub i32 %374, %188
  %376 = add i32 %375, %189
  %377 = sub i32 %376, %190
  %378 = sub i32 %377, %193
  %379 = sub i32 %378, %196
  %380 = sub i32 %379, %197
  %381 = sub i32 %380, %199
  %382 = sub i32 %381, %200
  %383 = sub i32 %382, %207
  %384 = sub i32 %383, %208
  %385 = sub i32 %384, %209
  %386 = add i32 %385, %211
  %387 = add i32 %386, %212
  %388 = add i32 %387, %214
  %389 = add i32 %388, %215
  %390 = add i32 %389, %216
  %391 = sub i32 %390, %217
  %392 = add i32 %391, %123
  %393 = sub i32 %392, %218
  %394 = add i32 %393, %219
  %395 = sub i32 %394, %222
  %396 = add i32 %395, %227
  %397 = add i32 %396, %228
  %398 = sub i32 %397, %229
  %399 = add i32 %398, %235
  %400 = add i32 %399, %12
  %401 = sub i32 %400, %59
  %402 = sub i32 %401, %72
  %403 = sub i32 %402, %95
  %404 = sub i32 %403, %100
  %405 = add i32 %404, %101
  %406 = sub i32 %405, %109
  %407 = sub i32 %406, %111
  %408 = sub i32 %407, %113
  %409 = add i32 %408, %119
  %410 = add i32 %409, %172
  %411 = add i32 %410, %179
  %412 = sub i32 %411, %185
  %413 = sub i32 %412, %192
  %414 = add i32 %413, %204
  %415 = sub i32 %414, %206
  %416 = sub i32 %415, %225
  %417 = add i32 %416, %226
  %418 = sub i32 %417, %231
  %419 = add i32 %418, %234
  %420 = sub i32 %419, %238
  %421 = add i32 %420, %240
  %422 = add i32 %421, %242
  %423 = sub i32 %422, %244
  %424 = add i32 %423, %245
  %425 = sub i32 %424, %16
  %426 = add i32 %425, %21
  %427 = add i32 %426, %22
  %428 = sub i32 %427, %163
  %429 = add i32 %428, %276
  %430 = add i32 %429, %13
  %431 = add i32 %430, %18
  %432 = sub i32 %431, %126
  %433 = add i32 %432, %274
  %434 = add i32 %433, %270
  %435 = add i32 %434, %264
  %436 = icmp eq i32 %9, %435
  %437 = select i1 %436, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %438 = tail call i32 @puts(i8* nonnull dereferenceable(1) %437)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
