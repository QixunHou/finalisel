; ModuleID = '../.././c_source_file/0465_path_condition_crackme.c'
source_filename = "../.././c_source_file/0465_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %0
  %10 = and i32 %9, %8
  %11 = xor i32 %4, %3
  %12 = xor i32 %5, %4
  %13 = or i32 %12, %11
  %14 = add i32 %13, %10
  %15 = or i32 %4, %3
  %16 = xor i32 %12, -1
  %17 = and i32 %15, %16
  %18 = add i32 %14, %17
  %19 = or i32 %9, %7
  %20 = xor i32 %0, -1
  %21 = xor i32 %2, -1
  %22 = or i32 %21, %1
  %23 = and i32 %22, %20
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %2
  %26 = and i32 %25, %0
  %27 = xor i32 %2, %1
  %28 = or i32 %27, %0
  %29 = xor i32 %26, %28
  %30 = and i32 %25, %20
  %31 = or i32 %24, %2
  %32 = and i32 %31, %0
  %33 = xor i32 %32, 2147483647
  %34 = xor i32 %33, %30
  %35 = or i32 %1, %0
  %36 = and i32 %35, %21
  %37 = or i32 %8, %2
  %38 = or i32 %21, %0
  %39 = and i32 %38, %7
  %40 = shl i32 %39, 2
  %41 = and i32 %2, %0
  %42 = or i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %41, %43
  %45 = xor i32 %27, -1
  %46 = and i32 %35, %45
  %47 = or i32 %43, %0
  %48 = and i32 %24, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %9, -1
  %51 = and i32 %50, %49
  %52 = and i32 %2, %1
  %53 = and i32 %52, %20
  %54 = and i32 %27, %0
  %55 = or i32 %53, %54
  %56 = or i32 %48, %50
  %57 = xor i32 %22, -1
  %58 = add i32 %22, 1
  %59 = or i32 %24, %0
  %60 = and i32 %59, %45
  %61 = xor i32 %38, %24
  %62 = and i32 %1, %0
  %63 = or i32 %2, %0
  %64 = xor i32 %63, %62
  %65 = and i32 %21, %1
  %66 = xor i32 %65, %49
  %67 = or i32 %27, %20
  %68 = xor i32 %30, %67
  %69 = or i32 %52, %48
  %70 = and i32 %9, %1
  %71 = or i32 %22, %0
  %72 = and i32 %50, %1
  %73 = xor i32 %27, %0
  %74 = or i32 %26, %73
  %75 = and i32 %52, %0
  %76 = and i32 %27, %20
  %77 = or i32 %75, %76
  %78 = and i32 %38, %8
  %79 = and i32 %21, %49
  %80 = xor i32 %52, -1
  %81 = and i32 %80, %0
  %82 = or i32 %27, %48
  %83 = xor i32 %59, 2147483647
  %84 = or i32 %83, %2
  %85 = xor i32 %38, %62
  %86 = xor i32 %35, -1
  %87 = or i32 %45, %86
  %88 = xor i32 %42, %62
  %89 = and i32 %65, %20
  %90 = and i32 %43, %0
  %91 = and i32 %65, %0
  %92 = mul i32 %91, -13
  %93 = and i32 %57, %20
  %94 = mul i32 %53, -7
  %95 = and i32 %57, %0
  %96 = xor i32 %3, -1
  %97 = xor i32 %5, -1
  %98 = and i32 %97, %4
  %99 = xor i32 %98, -1
  %100 = and i32 %99, %96
  %101 = and i32 %4, %3
  %102 = or i32 %101, %5
  %103 = xor i32 %11, -1
  %104 = or i32 %97, %103
  %105 = and i32 %96, %4
  %106 = xor i32 %5, %3
  %107 = or i32 %106, %105
  %108 = and i32 %5, %3
  %109 = or i32 %108, %105
  %110 = xor i32 %108, -1
  %111 = xor i32 %110, %4
  %112 = or i32 %97, %4
  %113 = and i32 %112, %11
  %114 = and i32 %108, %4
  %115 = xor i32 %4, -1
  %116 = or i32 %5, %3
  %117 = and i32 %116, %115
  %118 = or i32 %114, %117
  %119 = xor i32 %15, -1
  %120 = or i32 %12, %119
  %121 = and i32 %12, %103
  %122 = shl i32 %121, 1
  %123 = xor i32 %112, -1
  %124 = or i32 %123, %3
  %125 = xor i32 %123, %3
  %126 = shl i32 %125, 1
  %127 = or i32 %5, %4
  %128 = xor i32 %127, -1
  %129 = or i32 %128, %103
  %130 = and i32 %5, %4
  %131 = xor i32 %130, %116
  %132 = xor i32 %106, -1
  %133 = or i32 %132, %115
  %134 = shl i32 %3, 1
  %135 = xor i32 %116, -1
  %136 = or i32 %135, %4
  %137 = xor i32 %106, %4
  %138 = xor i32 %114, %137
  %139 = or i32 %101, %123
  %140 = xor i32 %105, -1
  %141 = and i32 %97, %140
  %142 = or i32 %96, %4
  %143 = and i32 %12, %142
  %144 = or i32 %119, %5
  %145 = shl i32 %144, 1
  %146 = xor i32 %101, -1
  %147 = and i32 %106, %146
  %148 = and i32 %108, %115
  %149 = and i32 %106, %4
  %150 = or i32 %148, %149
  %151 = or i32 %97, %3
  %152 = or i32 %151, %115
  %153 = xor i32 %142, %5
  %154 = and i32 %16, %140
  %155 = and i32 %106, %115
  %156 = and i32 %97, %3
  %157 = xor i32 %156, -1
  %158 = xor i32 %157, %4
  %159 = shl i32 %158, 1
  %160 = or i32 %12, %3
  %161 = or i32 %130, %3
  %162 = or i32 %135, %115
  %163 = xor i32 %151, -1
  %164 = or i32 %98, %3
  %165 = and i32 %132, %115
  %166 = or i32 %105, %16
  %167 = xor i32 %142, -1
  %168 = or i32 %16, %167
  %169 = or i32 %128, %96
  %170 = and i32 %132, %140
  %171 = xor i32 %117, -1
  %172 = xor i32 %114, %171
  %173 = or i32 %132, %4
  %174 = or i32 %98, %11
  %175 = and i32 %112, %103
  %176 = xor i32 %98, %3
  %177 = or i32 %108, %4
  %178 = xor i32 %105, %5
  %179 = xor i32 %112, %3
  %180 = shl i32 %179, 2
  %181 = or i32 %130, %103
  %182 = or i32 %156, %115
  %183 = shl i32 %182, 1
  %184 = and i32 %103, %5
  %185 = or i32 %16, %103
  %186 = xor i32 %130, -1
  %187 = xor i32 %186, %3
  %188 = add i32 %105, 1
  %189 = xor i32 %156, %4
  %190 = or i32 %123, %103
  %191 = and i32 %96, %5
  %192 = and i32 %191, %4
  %193 = or i32 %192, %137
  %194 = or i32 %130, %156
  %195 = and i32 %132, %146
  %196 = or i32 %108, %115
  %197 = and i32 %186, %3
  %198 = xor i32 %130, %15
  %199 = and i32 %12, %11
  %200 = and i32 %116, %4
  %201 = or i32 %148, %200
  %202 = and i32 %12, %3
  %203 = xor i32 %130, %157
  %204 = shl i32 %203, 1
  %205 = and i32 %146, %5
  %206 = and i32 %16, %96
  %207 = and i32 %157, %4
  %208 = and i32 %16, %3
  %209 = xor i32 %149, -1
  %210 = xor i32 %148, %209
  %211 = xor i32 %116, %4
  %212 = shl i32 %211, 1
  %213 = xor i32 %108, %4
  %214 = xor i32 %130, %3
  %215 = shl i32 %214, 1
  %216 = or i32 %106, %101
  %217 = and i32 %99, %103
  %218 = and i32 %127, %3
  %219 = or i32 %106, %4
  %220 = or i32 %163, %115
  %221 = or i32 %12, %105
  %222 = xor i32 %98, %110
  %223 = or i32 %12, %103
  %224 = or i32 %151, %4
  %225 = and i32 %11, %186
  %226 = xor i32 %128, %3
  %227 = and i32 %97, %146
  %228 = or i32 %16, %119
  %229 = and i32 %12, %146
  %230 = xor i32 %98, %151
  %231 = or i32 %96, %5
  %232 = xor i32 %231, %4
  %233 = xor i32 %232, -1
  %234 = xor i32 %192, %233
  %235 = xor i32 %219, -1
  %236 = or i32 %192, %235
  %237 = shl i32 %156, 1
  %238 = or i32 %105, %132
  %239 = or i32 %114, %155
  %240 = xor i32 %132, %4
  %241 = or i32 %98, %163
  %242 = or i32 %106, %119
  %243 = and i32 %142, %5
  %244 = or i32 %157, %4
  %245 = or i32 %16, %96
  %246 = xor i32 %151, %101
  %247 = xor i32 %137, -1
  %248 = or i32 %114, %247
  %249 = and i32 %191, %115
  %250 = or i32 %106, %115
  %251 = xor i32 %250, -1
  %252 = or i32 %249, %251
  %253 = xor i32 %146, %5
  %254 = xor i32 %99, %3
  %255 = shl i32 %254, 1
  %256 = or i32 %192, %232
  %257 = and i32 %16, %103
  %258 = or i32 %98, %103
  %259 = and i32 %11, %97
  %260 = xor i32 %119, %5
  %261 = xor i32 %105, %110
  %262 = add i32 %130, 1
  %263 = xor i32 %249, %250
  %264 = and i32 %231, %4
  %265 = or i32 %249, %264
  %266 = add i32 %5, 1
  %267 = and i32 %142, %16
  %268 = or i32 %132, %167
  %269 = or i32 %128, %3
  %270 = or i32 %101, %128
  %271 = and i32 %135, %115
  %272 = mul i32 %271, -20
  %273 = and i32 %156, %115
  %274 = and i32 %135, %4
  %275 = shl i32 %274, 1
  %276 = and i32 %156, %4
  %277 = and i32 %163, %115
  %278 = mul i32 %277, 14
  %279 = and i32 %163, %4
  %280 = mul i32 %279, -12
  %281 = shl i32 %114, 4
  %282 = add i32 %47, %84
  %283 = add i32 %282, %23
  %284 = add i32 %283, %12
  %285 = add i32 %284, %157
  %286 = add i32 %285, %153
  %287 = add i32 %286, %102
  %288 = add i32 %287, %34
  %289 = add i32 %288, %196
  %290 = add i32 %289, %177
  %291 = add i32 %290, %147
  %292 = add i32 %291, %143
  %293 = add i32 %292, %139
  %294 = add i32 %293, %133
  %295 = add i32 %294, %129
  %296 = add i32 %295, %100
  %297 = add i32 %296, %150
  %298 = add i32 %297, %263
  %299 = shl i32 %298, 1
  %300 = add i32 %66, %89
  %301 = sub i32 %195, %300
  %302 = add i32 %301, %226
  %303 = sub i32 %302, %160
  %304 = mul i32 %303, 3
  %305 = sub i32 %230, %245
  %306 = add i32 %305, %207
  %307 = sub i32 %306, %181
  %308 = mul i32 %307, 5
  %309 = sub i32 %273, %148
  %310 = mul i32 %309, 9
  %311 = add i32 %276, %95
  %312 = mul i32 %311, -6
  %313 = add i32 %75, %36
  %314 = shl i32 %313, 2
  %315 = add i32 %37, -2
  %316 = add i32 %315, %27
  %317 = add i32 %316, %58
  %318 = add i32 %317, %9
  %319 = sub i32 %318, %79
  %320 = add i32 %319, %19
  %321 = add i32 %320, %44
  %322 = sub i32 %321, %46
  %323 = sub i32 %322, %51
  %324 = sub i32 %323, %56
  %325 = sub i32 %324, %60
  %326 = add i32 %325, %61
  %327 = add i32 %326, %64
  %328 = add i32 %327, %69
  %329 = sub i32 %328, %70
  %330 = sub i32 %329, %71
  %331 = sub i32 %330, %72
  %332 = add i32 %331, %78
  %333 = add i32 %332, %81
  %334 = add i32 %333, %82
  %335 = sub i32 %334, %85
  %336 = sub i32 %335, %87
  %337 = add i32 %336, %88
  %338 = sub i32 %337, %90
  %339 = sub i32 %338, %93
  %340 = sub i32 %339, %134
  %341 = add i32 %340, 1
  %342 = sub i32 %341, %29
  %343 = sub i32 %342, %40
  %344 = add i32 %343, %55
  %345 = add i32 %344, %68
  %346 = sub i32 %345, %74
  %347 = sub i32 %346, %77
  %348 = add i32 %347, %92
  %349 = add i32 %348, %94
  %350 = add i32 %349, %101
  %351 = add i32 %350, %188
  %352 = add i32 %351, %119
  %353 = add i32 %352, %266
  %354 = sub i32 %353, %104
  %355 = add i32 %354, %141
  %356 = sub i32 %355, %151
  %357 = add i32 %356, %163
  %358 = sub i32 %357, %178
  %359 = sub i32 %358, %184
  %360 = sub i32 %359, %130
  %361 = add i32 %360, %112
  %362 = sub i32 %361, %205
  %363 = sub i32 %362, %227
  %364 = add i32 %363, %16
  %365 = add i32 %364, %243
  %366 = add i32 %365, %253
  %367 = add i32 %366, %128
  %368 = add i32 %367, %108
  %369 = sub i32 %368, %259
  %370 = add i32 %369, %260
  %371 = add i32 %370, %99
  %372 = add i32 %371, %262
  %373 = add i32 %372, %314
  %374 = sub i32 %373, %107
  %375 = sub i32 %374, %109
  %376 = sub i32 %375, %111
  %377 = add i32 %376, %113
  %378 = add i32 %377, %120
  %379 = sub i32 %378, %124
  %380 = sub i32 %379, %131
  %381 = add i32 %380, %136
  %382 = sub i32 %381, %145
  %383 = add i32 %382, %152
  %384 = sub i32 %383, %154
  %385 = sub i32 %384, %155
  %386 = sub i32 %385, %161
  %387 = sub i32 %386, %162
  %388 = add i32 %387, %164
  %389 = sub i32 %388, %165
  %390 = add i32 %389, %166
  %391 = add i32 %390, %168
  %392 = sub i32 %391, %169
  %393 = add i32 %392, %170
  %394 = add i32 %393, %173
  %395 = sub i32 %394, %174
  %396 = add i32 %395, %175
  %397 = sub i32 %396, %176
  %398 = add i32 %397, %185
  %399 = sub i32 %398, %187
  %400 = add i32 %399, %189
  %401 = add i32 %400, %190
  %402 = sub i32 %401, %194
  %403 = sub i32 %402, %197
  %404 = sub i32 %403, %198
  %405 = add i32 %404, %199
  %406 = sub i32 %405, %117
  %407 = add i32 %406, %202
  %408 = add i32 %407, %206
  %409 = sub i32 %408, %208
  %410 = add i32 %409, %213
  %411 = add i32 %410, %216
  %412 = sub i32 %411, %217
  %413 = sub i32 %412, %218
  %414 = add i32 %413, %219
  %415 = sub i32 %414, %220
  %416 = sub i32 %415, %221
  %417 = add i32 %416, %222
  %418 = add i32 %417, %223
  %419 = add i32 %418, %224
  %420 = sub i32 %419, %225
  %421 = add i32 %420, %149
  %422 = add i32 %421, %228
  %423 = add i32 %422, %229
  %424 = sub i32 %423, %237
  %425 = sub i32 %424, %238
  %426 = sub i32 %425, %240
  %427 = add i32 %426, %241
  %428 = add i32 %427, %242
  %429 = add i32 %428, %244
  %430 = add i32 %429, %246
  %431 = add i32 %430, %257
  %432 = sub i32 %431, %258
  %433 = add i32 %432, %261
  %434 = add i32 %433, %267
  %435 = add i32 %434, %268
  %436 = add i32 %435, %269
  %437 = add i32 %436, %270
  %438 = sub i32 %437, %118
  %439 = sub i32 %438, %122
  %440 = sub i32 %439, %126
  %441 = sub i32 %440, %138
  %442 = sub i32 %441, %159
  %443 = add i32 %442, %172
  %444 = sub i32 %443, %180
  %445 = sub i32 %444, %183
  %446 = sub i32 %445, %193
  %447 = sub i32 %446, %201
  %448 = sub i32 %447, %204
  %449 = sub i32 %448, %210
  %450 = sub i32 %449, %212
  %451 = sub i32 %450, %215
  %452 = add i32 %451, %234
  %453 = add i32 %452, %236
  %454 = add i32 %453, %239
  %455 = add i32 %454, %248
  %456 = sub i32 %455, %252
  %457 = sub i32 %456, %255
  %458 = add i32 %457, %256
  %459 = sub i32 %458, %265
  %460 = add i32 %459, %272
  %461 = sub i32 %460, %275
  %462 = add i32 %461, %278
  %463 = add i32 %462, %280
  %464 = sub i32 %463, %281
  %465 = add i32 %464, %310
  %466 = add i32 %465, %312
  %467 = add i32 %466, %308
  %468 = add i32 %467, %304
  %469 = add i32 %468, %299
  %470 = icmp eq i32 %18, %469
  %471 = select i1 %470, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %472 = tail call i32 @puts(i8* nonnull dereferenceable(1) %471)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
