digraph "DFG for'crackme' function" {
	Node0x1450540[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1450bf0[shape=record, label="  %4 = add i32 %0, 1"];
	Node0x1450cb0[shape=record, label="  %5 = sub i32 %4, %3"];
	Node0x1450d20[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1450d90[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x1450e00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1450e70[shape=record, label="  %9 = and i32 %6, %0"];
	Node0x1450ee0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1450f80[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x1450ff0[shape=record, label="  %12 = or i32 %6, %0"];
	Node0x1451060[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1451100[shape=record, label="  %14 = mul i32 %13, -6"];
	Node0x1451170[shape=record, label="  %15 = shl i32 %8, 1"];
	Node0x14511e0[shape=record, label="  %16 = add i32 %9, %1"];
	Node0x1451250[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x14512c0[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1451330[shape=record, label="  %19 = sub i32 3, %0"];
	Node0x14513a0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x1451410[shape=record, label="  %21 = sub i32 %20, %12"];
	Node0x1451480[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x14514f0[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x1451560[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x14515d0[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x1451640[shape=record, label="  %26 = icmp eq i32 %5, %25"];
	Node0x13f1268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1451ae0[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1451b30[shape=record, label="  ret void"];
	Node0x1450540 -> Node0x1450bf0;
	Node0x1450bf0 -> Node0x1450cb0;
	Node0x1450cb0 -> Node0x1450d20;
	Node0x1450d20 -> Node0x1450d90;
	Node0x1450d90 -> Node0x1450e00;
	Node0x1450e00 -> Node0x1450e70;
	Node0x1450e70 -> Node0x1450ee0;
	Node0x1450ee0 -> Node0x1450f80;
	Node0x1450f80 -> Node0x1450ff0;
	Node0x1450ff0 -> Node0x1451060;
	Node0x1451060 -> Node0x1451100;
	Node0x1451100 -> Node0x1451170;
	Node0x1451170 -> Node0x14511e0;
	Node0x14511e0 -> Node0x1451250;
	Node0x1451250 -> Node0x14512c0;
	Node0x14512c0 -> Node0x1451330;
	Node0x1451330 -> Node0x14513a0;
	Node0x14513a0 -> Node0x1451410;
	Node0x1451410 -> Node0x1451480;
	Node0x1451480 -> Node0x14514f0;
	Node0x14514f0 -> Node0x1451560;
	Node0x1451560 -> Node0x14515d0;
	Node0x14515d0 -> Node0x1451640;
	Node0x1451640 -> Node0x13f1268;
	Node0x13f1268 -> Node0x1451ae0;
	Node0x1451ae0 -> Node0x1451b30;
edge [color=red]
	Node0x1450bf0 -> Node0x1450cb0;
	Node0x1450540 -> Node0x1450cb0;
	Node0x1450d20 -> Node0x1450e70;
	Node0x1450e70 -> Node0x1450ee0;
	Node0x1450ee0 -> Node0x1450f80;
	Node0x1450d20 -> Node0x1450ff0;
	Node0x1450ff0 -> Node0x1451060;
	Node0x1451060 -> Node0x1451100;
	Node0x1450e00 -> Node0x1451170;
	Node0x1450e70 -> Node0x14511e0;
	Node0x14511e0 -> Node0x1451250;
	Node0x1450d90 -> Node0x1451250;
	Node0x1451250 -> Node0x14512c0;
	Node0x1451330 -> Node0x14513a0;
	Node0x1450e00 -> Node0x14513a0;
	Node0x14513a0 -> Node0x1451410;
	Node0x1450ff0 -> Node0x1451410;
	Node0x1451410 -> Node0x1451480;
	Node0x1450f80 -> Node0x1451480;
	Node0x1451480 -> Node0x14514f0;
	Node0x1451100 -> Node0x14514f0;
	Node0x14514f0 -> Node0x1451560;
	Node0x1451170 -> Node0x1451560;
	Node0x1451560 -> Node0x14515d0;
	Node0x14512c0 -> Node0x14515d0;
	Node0x1450cb0 -> Node0x1451640;
	Node0x14515d0 -> Node0x1451640;
	Node0x1451640 -> Node0x13f1268;
	Node0x13f1268 -> Node0x1451ae0;
}
