digraph "DFG for'crackme' function" {
	Node0x2324490[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x2324500[shape=record, label="  %4 = add i32 %3, %1"];
	Node0x2324bd0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2324c70[shape=record, label="  %6 = add i32 %1, 1"];
	Node0x2324ce0[shape=record, label="  %7 = or i32 %5, %0"];
	Node0x2324d50[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x2324df0[shape=record, label="  %9 = mul i32 %8, 3"];
	Node0x2324e60[shape=record, label="  %10 = and i32 %5, %0"];
	Node0x2324f00[shape=record, label="  %11 = shl i32 %8, 2"];
	Node0x2324fa0[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x2325010[shape=record, label="  %13 = xor i32 %7, -1"];
	Node0x2325080[shape=record, label="  %14 = shl i32 %0, 1"];
	Node0x23250f0[shape=record, label="  %15 = sub i32 2, %0"];
	Node0x2325160[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x23251d0[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0x2325240[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x23252b0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x2325320[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x2325390[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x2325400[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x2325470[shape=record, label="  %23 = icmp eq i32 %4, %22"];
	Node0x22c5268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2325910[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x2325960[shape=record, label="  ret void"];
	Node0x2324490 -> Node0x2324500;
	Node0x2324500 -> Node0x2324bd0;
	Node0x2324bd0 -> Node0x2324c70;
	Node0x2324c70 -> Node0x2324ce0;
	Node0x2324ce0 -> Node0x2324d50;
	Node0x2324d50 -> Node0x2324df0;
	Node0x2324df0 -> Node0x2324e60;
	Node0x2324e60 -> Node0x2324f00;
	Node0x2324f00 -> Node0x2324fa0;
	Node0x2324fa0 -> Node0x2325010;
	Node0x2325010 -> Node0x2325080;
	Node0x2325080 -> Node0x23250f0;
	Node0x23250f0 -> Node0x2325160;
	Node0x2325160 -> Node0x23251d0;
	Node0x23251d0 -> Node0x2325240;
	Node0x2325240 -> Node0x23252b0;
	Node0x23252b0 -> Node0x2325320;
	Node0x2325320 -> Node0x2325390;
	Node0x2325390 -> Node0x2325400;
	Node0x2325400 -> Node0x2325470;
	Node0x2325470 -> Node0x22c5268;
	Node0x22c5268 -> Node0x2325910;
	Node0x2325910 -> Node0x2325960;
edge [color=red]
	Node0x2324490 -> Node0x2324500;
	Node0x2324bd0 -> Node0x2324ce0;
	Node0x2324d50 -> Node0x2324df0;
	Node0x2324bd0 -> Node0x2324e60;
	Node0x2324d50 -> Node0x2324f00;
	Node0x2324f00 -> Node0x2324fa0;
	Node0x2324ce0 -> Node0x2325010;
	Node0x23250f0 -> Node0x2325160;
	Node0x2324c70 -> Node0x2325160;
	Node0x2325160 -> Node0x23251d0;
	Node0x2324ce0 -> Node0x23251d0;
	Node0x23251d0 -> Node0x2325240;
	Node0x2324e60 -> Node0x2325240;
	Node0x2325240 -> Node0x23252b0;
	Node0x2325010 -> Node0x23252b0;
	Node0x23252b0 -> Node0x2325320;
	Node0x2324df0 -> Node0x2325320;
	Node0x2325320 -> Node0x2325390;
	Node0x2324fa0 -> Node0x2325390;
	Node0x2325390 -> Node0x2325400;
	Node0x2325080 -> Node0x2325400;
	Node0x2324500 -> Node0x2325470;
	Node0x2325400 -> Node0x2325470;
	Node0x2325470 -> Node0x22c5268;
	Node0x22c5268 -> Node0x2325910;
}
