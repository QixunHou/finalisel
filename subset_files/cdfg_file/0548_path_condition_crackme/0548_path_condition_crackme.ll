; ModuleID = '../.././c_source_file/0548_path_condition_crackme.c'
source_filename = "../.././c_source_file/0548_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = or i32 %8, %7
  %10 = xor i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %11
  %15 = add i32 %9, %14
  %16 = xor i32 %5, -1
  %17 = or i32 %16, %4
  %18 = xor i32 %4, %3
  %19 = and i32 %17, %18
  %20 = sub i32 %19, %15
  %21 = xor i32 %2, -1
  %22 = or i32 %21, %11
  %23 = xor i32 %0, -1
  %24 = xor i32 %8, -1
  %25 = and i32 %24, %23
  %26 = xor i32 %1, -1
  %27 = and i32 %26, %0
  %28 = and i32 %2, %1
  %29 = or i32 %28, %27
  %30 = and i32 %21, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %11
  %33 = and i32 %8, %23
  %34 = or i32 %26, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %24, %35
  %37 = xor i32 %24, %0
  %38 = shl i32 %37, 1
  %39 = and i32 %28, %23
  %40 = and i32 %8, %0
  %41 = xor i32 %39, -1
  %42 = xor i32 %40, %41
  %43 = and i32 %26, %2
  %44 = and i32 %43, %0
  %45 = xor i32 %8, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %44, %46
  %48 = xor i32 %7, -1
  %49 = and i32 %24, %48
  %50 = xor i32 %31, %1
  %51 = or i32 %2, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %1
  %54 = or i32 %10, %21
  %55 = or i32 %2, %1
  %56 = and i32 %55, %0
  %57 = or i32 %1, %0
  %58 = and i32 %2, %0
  %59 = and i32 %21, %1
  %60 = xor i32 %59, -1
  %61 = xor i32 %58, %60
  %62 = and i32 %13, %1
  %63 = and i32 %57, %2
  %64 = or i32 %21, %0
  %65 = xor i32 %64, -1
  %66 = xor i32 %65, %1
  %67 = xor i32 %28, -1
  %68 = xor i32 %58, %1
  %69 = xor i32 %27, -1
  %70 = and i32 %12, %69
  %71 = xor i32 %55, -1
  %72 = or i32 %71, %0
  %73 = shl i32 %72, 1
  %74 = xor i32 %58, %34
  %75 = and i32 %21, %69
  %76 = or i32 %58, %59
  %77 = and i32 %64, %1
  %78 = or i32 %13, %26
  %79 = or i32 %67, %23
  %80 = and i32 %8, %34
  %81 = and i32 %28, %0
  %82 = xor i32 %55, %0
  %83 = or i32 %81, %82
  %84 = and i32 %21, %48
  %85 = shl i32 %84, 1
  %86 = and i32 %12, %48
  %87 = or i32 %30, %26
  %88 = xor i32 %57, -1
  %89 = or i32 %21, %88
  %90 = xor i32 %27, %67
  %91 = and i32 %34, %13
  %92 = and i32 %57, %21
  %93 = shl i32 %92, 1
  %94 = xor i32 %34, %2
  %95 = or i32 %60, %23
  %96 = add i32 %30, 1
  %97 = xor i32 %52, %1
  %98 = or i32 %65, %1
  %99 = or i32 %55, %23
  %100 = shl i32 %99, 1
  %101 = or i32 %12, %27
  %102 = and i32 %51, %11
  %103 = and i32 %12, %57
  %104 = xor i32 %58, -1
  %105 = add i32 %58, 1
  %106 = or i32 %28, %0
  %107 = or i32 %8, %35
  %108 = or i32 %27, %13
  %109 = and i32 %34, %2
  %110 = shl i32 %23, 1
  %111 = or i32 %21, %1
  %112 = xor i32 %111, -1
  %113 = or i32 %112, %23
  %114 = and i32 %31, %26
  %115 = shl i32 %114, 1
  %116 = or i32 %7, %65
  %117 = xor i32 %81, -1
  %118 = xor i32 %33, %117
  %119 = and i32 %43, %23
  %120 = or i32 %26, %2
  %121 = and i32 %120, %0
  %122 = xor i32 %121, -1
  %123 = xor i32 %119, %122
  %124 = xor i32 %64, %1
  %125 = and i32 %34, %24
  %126 = or i32 %67, %0
  %127 = xor i32 %111, %0
  %128 = or i32 %59, %0
  %129 = or i32 %39, %40
  %130 = xor i32 %120, %0
  %131 = xor i32 %44, -1
  %132 = xor i32 %130, %131
  %133 = and i32 %8, %57
  %134 = shl i32 %133, 1
  %135 = or i32 %27, %21
  %136 = xor i32 %27, %60
  %137 = or i32 %10, %52
  %138 = or i32 %44, %130
  %139 = xor i32 %55, %7
  %140 = and i32 %51, %1
  %141 = or i32 %27, %2
  %142 = and i32 %104, %1
  %143 = shl i32 %21, 1
  %144 = or i32 %58, %26
  %145 = and i32 %104, %11
  %146 = and i32 %12, %1
  %147 = shl i32 %146, 1
  %148 = xor i32 %28, %0
  %149 = and i32 %10, %31
  %150 = or i32 %71, %23
  %151 = or i32 %39, %56
  %152 = and i32 %12, %11
  %153 = and i32 %34, %21
  %154 = and i32 %10, %13
  %155 = and i32 %60, %23
  %156 = shl i32 %8, 2
  %157 = or i32 %55, %0
  %158 = and i32 %55, %23
  %159 = or i32 %81, %158
  %160 = or i32 %58, %71
  %161 = or i32 %28, %23
  %162 = xor i32 %104, %1
  %163 = or i32 %10, %65
  %164 = or i32 %8, %23
  %165 = xor i32 %164, -1
  %166 = or i32 %119, %165
  %167 = and i32 %111, %0
  %168 = shl i32 %167, 2
  %169 = and i32 %31, %1
  %170 = or i32 %58, %88
  %171 = xor i32 %56, %41
  %172 = or i32 %24, %23
  %173 = or i32 %8, %0
  %174 = shl i32 %173, 1
  %175 = or i32 %24, %0
  %176 = or i32 %10, %2
  %177 = and i32 %24, %69
  %178 = and i32 %12, %10
  %179 = and i32 %12, %26
  %180 = shl i32 %179, 1
  %181 = and i32 %10, %2
  %182 = and i32 %111, %23
  %183 = or i32 %7, %52
  %184 = or i32 %24, %88
  %185 = or i32 %7, %71
  %186 = and i32 %12, %34
  %187 = xor i32 %30, %1
  %188 = xor i32 %71, %0
  %189 = or i32 %111, %0
  %190 = and i32 %10, %21
  %191 = xor i32 %58, %57
  %192 = or i32 %7, %112
  %193 = shl i32 %192, 1
  %194 = xor i32 %64, %7
  %195 = and i32 %64, %11
  %196 = or i32 %12, %26
  %197 = xor i32 %7, %2
  %198 = or i32 %7, %13
  %199 = and i32 %120, %23
  %200 = or i32 %44, %199
  %201 = or i32 %8, %27
  %202 = xor i32 %173, -1
  %203 = or i32 %44, %202
  %204 = or i32 %7, %24
  %205 = xor i32 %88, %2
  %206 = or i32 %111, %23
  %207 = xor i32 %81, %45
  %208 = or i32 %7, %2
  %209 = or i32 %13, %11
  %210 = or i32 %12, %1
  %211 = shl i32 %210, 1
  %212 = and i32 %8, %48
  %213 = or i32 %30, %112
  %214 = and i32 %51, %10
  %215 = and i32 %13, %26
  %216 = xor i32 %35, %2
  %217 = and i32 %48, %2
  %218 = or i32 %65, %26
  %219 = xor i32 %27, %2
  %220 = shl i32 %219, 1
  %221 = and i32 %51, %26
  %222 = xor i32 %69, %2
  %223 = shl i32 %222, 1
  %224 = or i32 %52, %11
  %225 = and i32 %64, %26
  %226 = or i32 %13, %35
  %227 = xor i32 %60, %0
  %228 = or i32 %11, %2
  %229 = or i32 %10, %13
  %230 = and i32 %57, %13
  %231 = xor i32 %58, %55
  %232 = shl i32 %231, 1
  %233 = or i32 %44, %45
  %234 = or i32 %58, %1
  %235 = xor i32 %57, %2
  %236 = and i32 %67, %23
  %237 = and i32 %67, %0
  %238 = or i32 %119, %121
  %239 = and i32 %57, %24
  %240 = xor i32 %119, %164
  %241 = xor i32 %67, %0
  %242 = shl i32 %241, 2
  %243 = xor i32 %48, %2
  %244 = or i32 %12, %10
  %245 = or i32 %30, %28
  %246 = and i32 %64, %10
  %247 = or i32 %12, %35
  %248 = or i32 %81, %33
  %249 = or i32 %112, %0
  %250 = or i32 %27, %24
  %251 = or i32 %81, %46
  %252 = xor i32 %51, %1
  %253 = and i32 %13, %69
  %254 = or i32 %65, %11
  %255 = or i32 %52, %26
  %256 = or i32 %12, %88
  %257 = and i32 %8, %69
  %258 = or i32 %13, %88
  %259 = xor i32 %30, %67
  %260 = xor i32 %59, %0
  %261 = or i32 %58, %35
  %262 = xor i32 %111, %7
  %263 = and i32 %60, %0
  %264 = shl i32 %263, 1
  %265 = and i32 %10, %104
  %266 = or i32 %30, %1
  %267 = and i32 %104, %26
  %268 = and i32 %11, %2
  %269 = or i32 %8, %88
  %270 = xor i32 %112, %0
  %271 = xor i32 %199, %131
  %272 = or i32 %88, %2
  %273 = or i32 %60, %0
  %274 = or i32 %12, %11
  %275 = shl i32 %274, 1
  %276 = or i32 %35, %2
  %277 = or i32 %58, %11
  %278 = or i32 %12, %7
  %279 = xor i32 %30, %111
  %280 = or i32 %21, %35
  %281 = or i32 %13, %1
  %282 = xor i32 %44, %173
  %283 = or i32 %30, %10
  %284 = shl i32 %283, 1
  %285 = and i32 %69, %2
  %286 = and i32 %13, %48
  %287 = or i32 %59, %23
  %288 = and i32 %21, %11
  %289 = or i32 %30, %11
  %290 = xor i32 %51, %7
  %291 = or i32 %7, %21
  %292 = xor i32 %158, %117
  %293 = or i32 %59, %27
  %294 = and i32 %71, %23
  %295 = and i32 %71, %0
  %296 = mul i32 %295, -15
  %297 = and i32 %112, %23
  %298 = mul i32 %297, -31
  %299 = mul i32 %39, -23
  %300 = and i32 %112, %0
  %301 = xor i32 %5, %3
  %302 = xor i32 %301, -1
  %303 = and i32 %4, %3
  %304 = or i32 %303, %302
  %305 = xor i32 %5, %4
  %306 = or i32 %305, %3
  %307 = and i32 %5, %4
  %308 = xor i32 %307, %3
  %309 = or i32 %4, %3
  %310 = and i32 %309, %5
  %311 = xor i32 %4, -1
  %312 = and i32 %311, %3
  %313 = or i32 %307, %312
  %314 = and i32 %301, %309
  %315 = and i32 %312, %16
  %316 = xor i32 %3, -1
  %317 = and i32 %316, %5
  %318 = and i32 %317, %311
  %319 = and i32 %5, %3
  %320 = and i32 %319, %311
  %321 = and i32 %317, %4
  %322 = and i32 %319, %4
  %323 = add i32 %88, %2
  %324 = add i32 %323, %205
  %325 = add i32 %324, %190
  %326 = add i32 %325, %89
  %327 = add i32 %326, %67
  %328 = add i32 %327, %22
  %329 = add i32 %328, %290
  %330 = add i32 %329, %289
  %331 = add i32 %330, %82
  %332 = add i32 %331, %270
  %333 = add i32 %332, %258
  %334 = add i32 %333, %257
  %335 = add i32 %334, %244
  %336 = add i32 %335, %178
  %337 = add i32 %336, %155
  %338 = add i32 %337, %152
  %339 = add i32 %338, %150
  %340 = add i32 %339, %145
  %341 = add i32 %340, %126
  %342 = add i32 %341, %106
  %343 = add i32 %342, %102
  %344 = add i32 %343, %90
  %345 = add i32 %344, %61
  %346 = add i32 %345, %320
  %347 = shl i32 %346, 1
  %348 = sub i32 %65, %291
  %349 = add i32 %348, %81
  %350 = add i32 %349, %42
  %351 = add i32 %350, %240
  %352 = mul i32 %351, 5
  %353 = add i32 %59, %256
  %354 = add i32 %353, %29
  %355 = shl i32 %354, 2
  %356 = add i32 %228, %235
  %357 = sub i32 %356, %159
  %358 = add i32 %357, %321
  %359 = mul i32 %358, 3
  %360 = add i32 %300, %294
  %361 = mul i32 %360, -12
  %362 = sub i32 -6, %0
  %363 = sub i32 %362, %110
  %364 = add i32 %363, %26
  %365 = sub i32 %364, %1
  %366 = sub i32 %365, %57
  %367 = add i32 %366, %35
  %368 = add i32 %367, %69
  %369 = sub i32 %368, %34
  %370 = sub i32 %369, %27
  %371 = sub i32 %370, %54
  %372 = add i32 %371, %63
  %373 = sub i32 %372, %75
  %374 = sub i32 %373, %94
  %375 = add i32 %374, %96
  %376 = add i32 %375, %105
  %377 = sub i32 %376, %64
  %378 = add i32 %377, %109
  %379 = add i32 %378, %135
  %380 = add i32 %379, %71
  %381 = add i32 %380, %141
  %382 = sub i32 %381, %143
  %383 = add i32 %382, %153
  %384 = add i32 %383, %28
  %385 = sub i32 %384, %111
  %386 = add i32 %385, %176
  %387 = add i32 %386, %181
  %388 = add i32 %387, %197
  %389 = add i32 %388, %208
  %390 = add i32 %389, %216
  %391 = add i32 %390, %217
  %392 = sub i32 %391, %30
  %393 = sub i32 %392, %55
  %394 = add i32 %393, %243
  %395 = add i32 %394, %268
  %396 = sub i32 %395, %58
  %397 = add i32 %396, %24
  %398 = add i32 %397, %272
  %399 = sub i32 %398, %276
  %400 = sub i32 %399, %280
  %401 = sub i32 %400, %285
  %402 = add i32 %401, %288
  %403 = add i32 %402, %25
  %404 = sub i32 %403, %32
  %405 = add i32 %404, %33
  %406 = sub i32 %405, %36
  %407 = sub i32 %406, %49
  %408 = add i32 %407, %50
  %409 = add i32 %408, %53
  %410 = add i32 %409, %56
  %411 = sub i32 %410, %62
  %412 = sub i32 %411, %66
  %413 = add i32 %412, %68
  %414 = sub i32 %413, %70
  %415 = sub i32 %414, %74
  %416 = add i32 %415, %76
  %417 = sub i32 %416, %77
  %418 = sub i32 %417, %78
  %419 = add i32 %418, %79
  %420 = sub i32 %419, %80
  %421 = sub i32 %420, %85
  %422 = add i32 %421, %86
  %423 = add i32 %422, %87
  %424 = add i32 %423, %91
  %425 = sub i32 %424, %93
  %426 = sub i32 %425, %95
  %427 = sub i32 %426, %97
  %428 = sub i32 %427, %98
  %429 = add i32 %428, %101
  %430 = add i32 %429, %103
  %431 = add i32 %430, %107
  %432 = add i32 %431, %108
  %433 = sub i32 %432, %113
  %434 = add i32 %433, %116
  %435 = add i32 %434, %124
  %436 = add i32 %435, %125
  %437 = add i32 %436, %127
  %438 = sub i32 %437, %45
  %439 = sub i32 %438, %128
  %440 = add i32 %439, %136
  %441 = sub i32 %440, %137
  %442 = add i32 %441, %139
  %443 = add i32 %442, %140
  %444 = sub i32 %443, %142
  %445 = sub i32 %444, %144
  %446 = sub i32 %445, %40
  %447 = sub i32 %446, %148
  %448 = add i32 %447, %149
  %449 = sub i32 %448, %154
  %450 = sub i32 %449, %156
  %451 = add i32 %450, %157
  %452 = add i32 %451, %160
  %453 = sub i32 %452, %161
  %454 = sub i32 %453, %162
  %455 = sub i32 %454, %163
  %456 = add i32 %455, %169
  %457 = sub i32 %456, %170
  %458 = add i32 %457, %172
  %459 = add i32 %458, %175
  %460 = sub i32 %459, %177
  %461 = add i32 %460, %182
  %462 = add i32 %461, %183
  %463 = sub i32 %462, %184
  %464 = sub i32 %463, %185
  %465 = add i32 %464, %186
  %466 = add i32 %465, %187
  %467 = sub i32 %466, %188
  %468 = sub i32 %467, %189
  %469 = add i32 %468, %191
  %470 = add i32 %469, %194
  %471 = sub i32 %470, %195
  %472 = add i32 %471, %196
  %473 = add i32 %472, %198
  %474 = add i32 %473, %201
  %475 = sub i32 %474, %204
  %476 = add i32 %475, %206
  %477 = sub i32 %476, %209
  %478 = add i32 %477, %212
  %479 = sub i32 %478, %213
  %480 = sub i32 %479, %214
  %481 = sub i32 %480, %215
  %482 = sub i32 %481, %218
  %483 = sub i32 %482, %220
  %484 = sub i32 %483, %221
  %485 = sub i32 %484, %223
  %486 = add i32 %485, %224
  %487 = sub i32 %486, %225
  %488 = sub i32 %487, %226
  %489 = sub i32 %488, %227
  %490 = sub i32 %489, %229
  %491 = add i32 %490, %230
  %492 = sub i32 %491, %164
  %493 = sub i32 %492, %158
  %494 = sub i32 %493, %234
  %495 = sub i32 %494, %236
  %496 = add i32 %495, %237
  %497 = add i32 %496, %239
  %498 = sub i32 %497, %245
  %499 = add i32 %498, %246
  %500 = add i32 %499, %247
  %501 = sub i32 %500, %249
  %502 = add i32 %501, %250
  %503 = sub i32 %502, %252
  %504 = sub i32 %503, %253
  %505 = sub i32 %504, %254
  %506 = sub i32 %505, %255
  %507 = add i32 %506, %259
  %508 = add i32 %507, %260
  %509 = sub i32 %508, %261
  %510 = sub i32 %509, %262
  %511 = add i32 %510, %265
  %512 = sub i32 %511, %266
  %513 = add i32 %512, %267
  %514 = sub i32 %513, %269
  %515 = add i32 %514, %273
  %516 = sub i32 %515, %277
  %517 = sub i32 %516, %278
  %518 = sub i32 %517, %279
  %519 = sub i32 %518, %281
  %520 = add i32 %519, %286
  %521 = sub i32 %520, %287
  %522 = sub i32 %521, %293
  %523 = sub i32 %522, %38
  %524 = sub i32 %523, %47
  %525 = sub i32 %524, %73
  %526 = add i32 %525, %83
  %527 = sub i32 %526, %100
  %528 = sub i32 %527, %115
  %529 = add i32 %528, %118
  %530 = sub i32 %529, %123
  %531 = add i32 %530, %129
  %532 = sub i32 %531, %132
  %533 = sub i32 %532, %134
  %534 = add i32 %533, %138
  %535 = sub i32 %534, %147
  %536 = sub i32 %535, %151
  %537 = sub i32 %536, %166
  %538 = sub i32 %537, %168
  %539 = add i32 %538, %171
  %540 = sub i32 %539, %174
  %541 = sub i32 %540, %180
  %542 = sub i32 %541, %193
  %543 = sub i32 %542, %200
  %544 = sub i32 %543, %203
  %545 = sub i32 %544, %207
  %546 = sub i32 %545, %211
  %547 = sub i32 %546, %232
  %548 = add i32 %547, %233
  %549 = sub i32 %548, %238
  %550 = sub i32 %549, %242
  %551 = add i32 %550, %248
  %552 = add i32 %551, %251
  %553 = sub i32 %552, %264
  %554 = add i32 %553, %271
  %555 = sub i32 %554, %275
  %556 = sub i32 %555, %282
  %557 = sub i32 %556, %284
  %558 = add i32 %557, %292
  %559 = add i32 %558, %296
  %560 = add i32 %559, %298
  %561 = add i32 %560, %299
  %562 = add i32 %561, %302
  %563 = sub i32 %562, %310
  %564 = add i32 %563, %361
  %565 = sub i32 %564, %304
  %566 = add i32 %565, %306
  %567 = sub i32 %566, %308
  %568 = sub i32 %567, %313
  %569 = add i32 %568, %314
  %570 = add i32 %569, %315
  %571 = sub i32 %570, %318
  %572 = add i32 %571, %322
  %573 = add i32 %572, %355
  %574 = add i32 %573, %352
  %575 = add i32 %574, %359
  %576 = add i32 %575, %347
  %577 = icmp eq i32 %20, %576
  %578 = select i1 %577, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %579 = tail call i32 @puts(i8* nonnull dereferenceable(1) %578)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
