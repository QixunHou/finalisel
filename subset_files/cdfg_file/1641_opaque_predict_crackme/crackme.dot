digraph "DFG for'crackme' function" {
	Node0x2282a90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2282b30[shape=record, label="  %4 = add i32 %1, 1"];
	Node0x2282bf0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x2282c60[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x2282cd0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x2282d40[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x2282db0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x2282e20[shape=record, label="  %10 = shl i32 %7, 1"];
	Node0x2282e90[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x2282f00[shape=record, label="  %12 = sub i32 %8, %9"];
	Node0x2282fa0[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0x2283010[shape=record, label="  %14 = shl i32 %0, 1"];
	Node0x2283080[shape=record, label="  %15 = sub i32 %1, %14"];
	Node0x22830f0[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x2283160[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x22831d0[shape=record, label="  %18 = sub i32 %17, %8"];
	Node0x2283240[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0x22832b0[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x2283320[shape=record, label="  %21 = icmp eq i32 %4, %20"];
	Node0x2223268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x22837c0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x2283810[shape=record, label="  ret void"];
	Node0x2282a90 -> Node0x2282b30;
	Node0x2282b30 -> Node0x2282bf0;
	Node0x2282bf0 -> Node0x2282c60;
	Node0x2282c60 -> Node0x2282cd0;
	Node0x2282cd0 -> Node0x2282d40;
	Node0x2282d40 -> Node0x2282db0;
	Node0x2282db0 -> Node0x2282e20;
	Node0x2282e20 -> Node0x2282e90;
	Node0x2282e90 -> Node0x2282f00;
	Node0x2282f00 -> Node0x2282fa0;
	Node0x2282fa0 -> Node0x2283010;
	Node0x2283010 -> Node0x2283080;
	Node0x2283080 -> Node0x22830f0;
	Node0x22830f0 -> Node0x2283160;
	Node0x2283160 -> Node0x22831d0;
	Node0x22831d0 -> Node0x2283240;
	Node0x2283240 -> Node0x22832b0;
	Node0x22832b0 -> Node0x2283320;
	Node0x2283320 -> Node0x2223268;
	Node0x2223268 -> Node0x22837c0;
	Node0x22837c0 -> Node0x2283810;
edge [color=red]
	Node0x2282bf0 -> Node0x2282c60;
	Node0x2282a90 -> Node0x2282d40;
	Node0x2282cd0 -> Node0x2282e20;
	Node0x2282e20 -> Node0x2282e90;
	Node0x2282d40 -> Node0x2282f00;
	Node0x2282db0 -> Node0x2282f00;
	Node0x2282f00 -> Node0x2282fa0;
	Node0x2283010 -> Node0x2283080;
	Node0x2283080 -> Node0x22830f0;
	Node0x2282c60 -> Node0x22830f0;
	Node0x22830f0 -> Node0x2283160;
	Node0x2282cd0 -> Node0x2283160;
	Node0x2283160 -> Node0x22831d0;
	Node0x2282d40 -> Node0x22831d0;
	Node0x22831d0 -> Node0x2283240;
	Node0x2282e90 -> Node0x2283240;
	Node0x2283240 -> Node0x22832b0;
	Node0x2282fa0 -> Node0x22832b0;
	Node0x2282b30 -> Node0x2283320;
	Node0x22832b0 -> Node0x2283320;
	Node0x2283320 -> Node0x2223268;
	Node0x2223268 -> Node0x22837c0;
}
