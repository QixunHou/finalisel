; ModuleID = '../.././c_source_file/1793_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1793_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %5, %8
  %10 = or i32 %2, %1
  %11 = add i32 %9, %10
  %12 = xor i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %2
  %15 = xor i32 %1, -1
  %16 = or i32 %15, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %6, -1
  %19 = and i32 %16, %18
  %20 = xor i32 %0, -1
  %21 = and i32 %6, %20
  %22 = xor i32 %5, -1
  %23 = xor i32 %21, %22
  %24 = or i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = add i32 %24, 1
  %27 = xor i32 %2, %0
  %28 = and i32 %27, %13
  %29 = shl i32 %28, 1
  %30 = xor i32 %2, -1
  %31 = or i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %32, %15
  %34 = xor i32 %18, %0
  %35 = and i32 %15, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %36, %2
  %38 = shl i32 %37, 2
  %39 = or i32 %18, %0
  %40 = xor i32 %27, -1
  %41 = add i32 %27, 1
  %42 = and i32 %30, %0
  %43 = xor i32 %4, -1
  %44 = xor i32 %42, %43
  %45 = or i32 %30, %1
  %46 = and i32 %45, %0
  %47 = and i32 %1, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %48, %2
  %50 = or i32 %17, %2
  %51 = xor i32 %10, -1
  %52 = or i32 %47, %51
  %53 = or i32 %42, %13
  %54 = and i32 %30, %1
  %55 = xor i32 %54, -1
  %56 = and i32 %55, %0
  %57 = or i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %47, %58
  %60 = or i32 %4, %35
  %61 = and i32 %2, %0
  %62 = or i32 %40, %25
  %63 = xor i32 %55, %0
  %64 = xor i32 %35, %43
  %65 = xor i32 %42, -1
  %66 = and i32 %65, %1
  %67 = and i32 %6, %0
  %68 = and i32 %10, %20
  %69 = or i32 %5, %68
  %70 = and i32 %43, %0
  %71 = or i32 %42, %4
  %72 = or i32 %30, %13
  %73 = or i32 %12, %2
  %74 = and i32 %15, %2
  %75 = and i32 %74, %20
  %76 = or i32 %6, %20
  %77 = xor i32 %75, %76
  %78 = or i32 %61, %25
  %79 = and i32 %30, %36
  %80 = xor i32 %61, -1
  %81 = and i32 %80, %13
  %82 = or i32 %43, %0
  %83 = or i32 %51, %0
  %84 = or i32 %27, %12
  %85 = or i32 %12, %30
  %86 = xor i32 %57, %47
  %87 = xor i32 %61, %55
  %88 = and i32 %74, %0
  %89 = or i32 %6, %0
  %90 = xor i32 %88, %89
  %91 = and i32 %45, %20
  %92 = or i32 %25, %2
  %93 = and i32 %18, %48
  %94 = or i32 %61, %17
  %95 = or i32 %61, %15
  %96 = xor i32 %35, %55
  %97 = or i32 %6, %47
  %98 = and i32 %31, %15
  %99 = add i32 %61, 1
  %100 = xor i32 %45, -1
  %101 = xor i32 %100, %0
  %102 = or i32 %10, %0
  %103 = xor i32 %42, %1
  %104 = or i32 %47, %2
  %105 = and i32 %24, %18
  %106 = and i32 %6, %36
  %107 = or i32 %15, %2
  %108 = and i32 %107, %20
  %109 = or i32 %88, %108
  %110 = shl i32 %109, 1
  %111 = or i32 %47, %32
  %112 = xor i32 %17, %2
  %113 = xor i32 %57, %1
  %114 = xor i32 %10, %0
  %115 = xor i32 %114, %22
  %116 = and i32 %6, %48
  %117 = shl i32 %116, 1
  %118 = xor i32 %31, %47
  %119 = and i32 %31, %13
  %120 = or i32 %88, %7
  %121 = and i32 %16, %40
  %122 = or i32 %6, %25
  %123 = or i32 %5, %114
  %124 = xor i32 %88, -1
  %125 = xor i32 %108, %124
  %126 = xor i32 %32, %1
  %127 = xor i32 %25, %2
  %128 = or i32 %58, %13
  %129 = or i32 %4, %20
  %130 = and i32 %57, %15
  %131 = shl i32 %130, 2
  %132 = and i32 %107, %0
  %133 = xor i32 %132, -1
  %134 = xor i32 %75, %133
  %135 = shl i32 %68, 1
  %136 = or i32 %54, %35
  %137 = or i32 %45, %20
  %138 = or i32 %40, %15
  %139 = or i32 %18, %20
  %140 = and i32 %12, %65
  %141 = shl i32 %140, 1
  %142 = and i32 %10, %0
  %143 = xor i32 %35, %2
  %144 = and i32 %12, %30
  %145 = shl i32 %144, 1
  %146 = or i32 %5, %21
  %147 = shl i32 %146, 1
  %148 = or i32 %40, %1
  %149 = or i32 %58, %1
  %150 = shl i32 %149, 1
  %151 = and i32 %18, %36
  %152 = xor i32 %31, %1
  %153 = or i32 %27, %1
  %154 = xor i32 %45, %47
  %155 = or i32 %40, %13
  %156 = xor i32 %107, %20
  %157 = xor i32 %156, %88
  %158 = xor i32 %58, %1
  %159 = or i32 %42, %100
  %160 = or i32 %18, %17
  %161 = xor i32 %61, %24
  %162 = and i32 %65, %15
  %163 = and i32 %27, %24
  %164 = add i32 %12, 1
  %165 = xor i32 %36, %2
  %166 = or i32 %27, %35
  %167 = or i32 %35, %18
  %168 = and i32 %30, %48
  %169 = xor i32 %51, %0
  %170 = shl i32 %169, 1
  %171 = or i32 %61, %51
  %172 = and i32 %65, %13
  %173 = mul i32 %172, -5
  %174 = or i32 %47, %18
  %175 = or i32 %12, %58
  %176 = xor i32 %80, %1
  %177 = shl i32 %176, 1
  %178 = xor i32 %88, %8
  %179 = or i32 %35, %2
  %180 = or i32 %61, %54
  %181 = xor i32 %16, %2
  %182 = or i32 %12, %40
  %183 = or i32 %42, %12
  %184 = or i32 %55, %20
  %185 = xor i32 %61, %16
  %186 = or i32 %6, %17
  %187 = and i32 %6, %24
  %188 = shl i32 %187, 1
  %189 = xor i32 %24, %2
  %190 = xor i32 %65, %1
  %191 = or i32 %32, %13
  %192 = and i32 %24, %2
  %193 = and i32 %51, %20
  %194 = shl i32 %193, 3
  %195 = and i32 %54, %20
  %196 = mul i32 %195, 12
  %197 = and i32 %51, %0
  %198 = mul i32 %197, -15
  %199 = and i32 %54, %0
  %200 = and i32 %100, %20
  %201 = mul i32 %200, 9
  %202 = and i32 %4, %20
  %203 = shl i32 %202, 3
  %204 = and i32 %100, %0
  %205 = shl i32 %204, 4
  %206 = mul i32 %5, 13
  %207 = add i32 %54, %43
  %208 = add i32 %207, %92
  %209 = add i32 %208, %61
  %210 = add i32 %209, %160
  %211 = add i32 %210, %186
  %212 = add i32 %211, %151
  %213 = add i32 %212, %142
  %214 = add i32 %213, %102
  %215 = add i32 %214, %95
  %216 = add i32 %215, %71
  %217 = add i32 %216, %63
  %218 = add i32 %217, %33
  %219 = shl i32 %218, 1
  %220 = sub i32 %50, %199
  %221 = add i32 %220, %60
  %222 = sub i32 %221, %56
  %223 = sub i32 %222, %157
  %224 = mul i32 %223, 3
  %225 = sub i32 2, %1
  %226 = add i32 %225, %17
  %227 = add i32 %226, %26
  %228 = add i32 %227, %47
  %229 = add i32 %228, %164
  %230 = add i32 %229, %12
  %231 = add i32 %230, %14
  %232 = add i32 %231, %41
  %233 = sub i32 %232, %49
  %234 = add i32 %233, %6
  %235 = add i32 %234, %72
  %236 = sub i32 %235, %73
  %237 = add i32 %236, %79
  %238 = add i32 %237, %85
  %239 = sub i32 %238, %27
  %240 = add i32 %239, %99
  %241 = sub i32 %240, %104
  %242 = sub i32 %241, %112
  %243 = sub i32 %242, %42
  %244 = sub i32 %243, %127
  %245 = sub i32 %244, %143
  %246 = add i32 %245, %165
  %247 = add i32 %246, %168
  %248 = add i32 %247, %51
  %249 = add i32 %248, %179
  %250 = sub i32 %249, %181
  %251 = sub i32 %250, %189
  %252 = sub i32 %251, %192
  %253 = add i32 %252, %19
  %254 = add i32 %253, %34
  %255 = sub i32 %254, %38
  %256 = add i32 %255, %39
  %257 = add i32 %256, %44
  %258 = sub i32 %257, %46
  %259 = add i32 %258, %52
  %260 = sub i32 %259, %53
  %261 = sub i32 %260, %59
  %262 = sub i32 %261, %62
  %263 = add i32 %262, %64
  %264 = sub i32 %263, %66
  %265 = add i32 %264, %67
  %266 = sub i32 %265, %70
  %267 = sub i32 %266, %78
  %268 = add i32 %267, %81
  %269 = add i32 %268, %82
  %270 = add i32 %269, %83
  %271 = add i32 %270, %84
  %272 = add i32 %271, %86
  %273 = add i32 %272, %87
  %274 = add i32 %273, %91
  %275 = sub i32 %274, %93
  %276 = sub i32 %275, %94
  %277 = add i32 %276, %96
  %278 = sub i32 %277, %97
  %279 = sub i32 %278, %98
  %280 = add i32 %279, %101
  %281 = sub i32 %280, %103
  %282 = add i32 %281, %105
  %283 = sub i32 %282, %106
  %284 = sub i32 %283, %111
  %285 = sub i32 %284, %113
  %286 = sub i32 %285, %118
  %287 = sub i32 %286, %119
  %288 = add i32 %287, %121
  %289 = sub i32 %288, %122
  %290 = sub i32 %289, %126
  %291 = sub i32 %290, %128
  %292 = add i32 %291, %129
  %293 = sub i32 %292, %136
  %294 = add i32 %293, %137
  %295 = add i32 %294, %138
  %296 = sub i32 %295, %139
  %297 = sub i32 %296, %7
  %298 = sub i32 %297, %145
  %299 = sub i32 %298, %148
  %300 = add i32 %299, %152
  %301 = add i32 %300, %153
  %302 = sub i32 %301, %154
  %303 = sub i32 %302, %155
  %304 = add i32 %303, %158
  %305 = add i32 %304, %159
  %306 = add i32 %305, %161
  %307 = add i32 %306, %162
  %308 = sub i32 %307, %163
  %309 = add i32 %308, %166
  %310 = add i32 %309, %167
  %311 = add i32 %310, %171
  %312 = add i32 %311, %174
  %313 = add i32 %312, %175
  %314 = sub i32 %313, %180
  %315 = sub i32 %314, %76
  %316 = sub i32 %315, %182
  %317 = add i32 %316, %183
  %318 = add i32 %317, %184
  %319 = sub i32 %318, %185
  %320 = add i32 %319, %190
  %321 = sub i32 %320, %191
  %322 = add i32 %321, %23
  %323 = sub i32 %322, %29
  %324 = sub i32 %323, %69
  %325 = add i32 %324, %77
  %326 = sub i32 %325, %90
  %327 = add i32 %326, %115
  %328 = sub i32 %327, %117
  %329 = add i32 %328, %120
  %330 = sub i32 %329, %123
  %331 = add i32 %330, %125
  %332 = add i32 %331, %131
  %333 = add i32 %332, %134
  %334 = sub i32 %333, %135
  %335 = sub i32 %334, %141
  %336 = sub i32 %335, %150
  %337 = sub i32 %336, %170
  %338 = add i32 %337, %173
  %339 = sub i32 %338, %177
  %340 = sub i32 %339, %178
  %341 = sub i32 %340, %188
  %342 = sub i32 %341, %194
  %343 = add i32 %342, %196
  %344 = add i32 %343, %198
  %345 = add i32 %344, %201
  %346 = sub i32 %345, %203
  %347 = sub i32 %346, %205
  %348 = add i32 %347, %206
  %349 = sub i32 %348, %110
  %350 = sub i32 %349, %147
  %351 = add i32 %350, %224
  %352 = add i32 %351, %219
  %353 = icmp eq i32 %11, %352
  %354 = select i1 %353, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %355 = tail call i32 @puts(i8* nonnull dereferenceable(1) %354)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
