digraph "DFG for'crackme' function" {
	Node0x24707b0[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x2470e30[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x2470ea0[shape=record, label="  %7 = or i32 %3, %0"];
	Node0x2470f10[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x2470f80[shape=record, label="  %9 = xor i32 %2, -1"];
	Node0x2470ff0[shape=record, label="  %10 = xor i32 %1, -1"];
	Node0x2471060[shape=record, label="  %11 = and i32 %9, %1"];
	Node0x24710d0[shape=record, label="  %12 = and i32 %3, %0"];
	Node0x2471140[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x24711e0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x2471250[shape=record, label="  %15 = xor i32 %3, -1"];
	Node0x24712c0[shape=record, label="  %16 = and i32 %13, %3"];
	Node0x2471330[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x24713d0[shape=record, label="  %18 = mul i32 %16, 3"];
	Node0x2471440[shape=record, label="  %19 = sub i32 %10, %0"];
	Node0x24714b0[shape=record, label="  %20 = sub i32 %19, %14"];
	Node0x2471520[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x2471590[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x2471600[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x2471670[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x24716e0[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x2471750[shape=record, label="  %26 = icmp eq i32 %8, %25"];
	Node0x2411268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2471bf0[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x2471c40[shape=record, label="  ret void"];
	Node0x24707b0 -> Node0x2470e30;
	Node0x2470e30 -> Node0x2470ea0;
	Node0x2470ea0 -> Node0x2470f10;
	Node0x2470f10 -> Node0x2470f80;
	Node0x2470f80 -> Node0x2470ff0;
	Node0x2470ff0 -> Node0x2471060;
	Node0x2471060 -> Node0x24710d0;
	Node0x24710d0 -> Node0x2471140;
	Node0x2471140 -> Node0x24711e0;
	Node0x24711e0 -> Node0x2471250;
	Node0x2471250 -> Node0x24712c0;
	Node0x24712c0 -> Node0x2471330;
	Node0x2471330 -> Node0x24713d0;
	Node0x24713d0 -> Node0x2471440;
	Node0x2471440 -> Node0x24714b0;
	Node0x24714b0 -> Node0x2471520;
	Node0x2471520 -> Node0x2471590;
	Node0x2471590 -> Node0x2471600;
	Node0x2471600 -> Node0x2471670;
	Node0x2471670 -> Node0x24716e0;
	Node0x24716e0 -> Node0x2471750;
	Node0x2471750 -> Node0x2411268;
	Node0x2411268 -> Node0x2471bf0;
	Node0x2471bf0 -> Node0x2471c40;
edge [color=red]
	Node0x24707b0 -> Node0x2470e30;
	Node0x2470ea0 -> Node0x2470f10;
	Node0x2470e30 -> Node0x2470f10;
	Node0x2470f80 -> Node0x2471060;
	Node0x2471140 -> Node0x24711e0;
	Node0x2471140 -> Node0x24712c0;
	Node0x24712c0 -> Node0x2471330;
	Node0x24712c0 -> Node0x24713d0;
	Node0x2470ff0 -> Node0x2471440;
	Node0x2471440 -> Node0x24714b0;
	Node0x24711e0 -> Node0x24714b0;
	Node0x24714b0 -> Node0x2471520;
	Node0x2471060 -> Node0x2471520;
	Node0x2471520 -> Node0x2471590;
	Node0x2471250 -> Node0x2471590;
	Node0x2471590 -> Node0x2471600;
	Node0x24710d0 -> Node0x2471600;
	Node0x2471600 -> Node0x2471670;
	Node0x2471330 -> Node0x2471670;
	Node0x2471670 -> Node0x24716e0;
	Node0x24713d0 -> Node0x24716e0;
	Node0x2470f10 -> Node0x2471750;
	Node0x24716e0 -> Node0x2471750;
	Node0x2471750 -> Node0x2411268;
	Node0x2411268 -> Node0x2471bf0;
}
