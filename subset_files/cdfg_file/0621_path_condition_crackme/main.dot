digraph "DFG for'main' function" {
	Node0x2471e08[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x2471e88[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x2471f18[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x2471f78[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x2472028[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x2472458[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x2472538[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x2472638[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x24726f8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x24727a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x2472868[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x2472918[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x246d7e0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x2472b18[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x2473a88[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x24740f8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x2474158[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x24741d0[shape=record, label="  %14 = and i32 %12, %11"];
	Node0x2474240[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x24742b0[shape=record, label="  %16 = or i32 %13, %10"];
	Node0x2474320[shape=record, label="  %17 = add i32 %16, %15"];
	Node0x2474390[shape=record, label="  %18 = xor i32 %12, -1"];
	Node0x2474400[shape=record, label="  %19 = xor i32 %11, -1"];
	Node0x2474470[shape=record, label="  %20 = and i32 %11, %18"];
	Node0x24744e0[shape=record, label="  %21 = and i32 %13, %10"];
	Node0x2474550[shape=record, label="  %22 = xor i32 %10, -1"];
	Node0x24745c0[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x2474630[shape=record, label="  %24 = xor i32 %13, -1"];
	Node0x24746a0[shape=record, label="  %25 = and i32 %13, %22"];
	Node0x2474710[shape=record, label="  %26 = xor i32 %25, -1"];
	Node0x2474780[shape=record, label="  %27 = mul i32 %25, 3"];
	Node0x24747f0[shape=record, label="  %28 = sub i32 %19, %10"];
	Node0x2474860[shape=record, label="  %29 = sub i32 %28, %23"];
	Node0x24748d0[shape=record, label="  %30 = add i32 %29, %20"];
	Node0x2474940[shape=record, label="  %31 = add i32 %30, %24"];
	Node0x24749b0[shape=record, label="  %32 = add i32 %31, %21"];
	Node0x2474c30[shape=record, label="  %33 = add i32 %32, %26"];
	Node0x2474ca0[shape=record, label="  %34 = add i32 %33, %27"];
	Node0x2474d10[shape=record, label="  %35 = icmp eq i32 %17, %34"];
	Node0x24128b8[shape=record, label="  %36 = select i1 %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2474da0[shape=record, label="  %37 = call i32 @puts(i8* nonnull dereferenceable(1) %36) #5"];
	Node0x2475048[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x24751a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x24752b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x24753c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x2475488[shape=record, label="  ret i32 0"];
	Node0x2471e08 -> Node0x2471e88;
	Node0x2471e88 -> Node0x2471f18;
	Node0x2471f18 -> Node0x2471f78;
	Node0x2471f78 -> Node0x2472028;
	Node0x2472028 -> Node0x2472458;
	Node0x2472458 -> Node0x2472538;
	Node0x2472538 -> Node0x2472638;
	Node0x2472638 -> Node0x24726f8;
	Node0x24726f8 -> Node0x24727a8;
	Node0x24727a8 -> Node0x2472868;
	Node0x2472868 -> Node0x2472918;
	Node0x2472918 -> Node0x246d7e0;
	Node0x246d7e0 -> Node0x2472b18;
	Node0x2472b18 -> Node0x2473a88;
	Node0x2473a88 -> Node0x24740f8;
	Node0x24740f8 -> Node0x2474158;
	Node0x2474158 -> Node0x24741d0;
	Node0x24741d0 -> Node0x2474240;
	Node0x2474240 -> Node0x24742b0;
	Node0x24742b0 -> Node0x2474320;
	Node0x2474320 -> Node0x2474390;
	Node0x2474390 -> Node0x2474400;
	Node0x2474400 -> Node0x2474470;
	Node0x2474470 -> Node0x24744e0;
	Node0x24744e0 -> Node0x2474550;
	Node0x2474550 -> Node0x24745c0;
	Node0x24745c0 -> Node0x2474630;
	Node0x2474630 -> Node0x24746a0;
	Node0x24746a0 -> Node0x2474710;
	Node0x2474710 -> Node0x2474780;
	Node0x2474780 -> Node0x24747f0;
	Node0x24747f0 -> Node0x2474860;
	Node0x2474860 -> Node0x24748d0;
	Node0x24748d0 -> Node0x2474940;
	Node0x2474940 -> Node0x24749b0;
	Node0x24749b0 -> Node0x2474c30;
	Node0x2474c30 -> Node0x2474ca0;
	Node0x2474ca0 -> Node0x2474d10;
	Node0x2474d10 -> Node0x24128b8;
	Node0x24128b8 -> Node0x2474da0;
	Node0x2474da0 -> Node0x2475048;
	Node0x2475048 -> Node0x24751a8;
	Node0x24751a8 -> Node0x24752b8;
	Node0x24752b8 -> Node0x24753c8;
	Node0x24753c8 -> Node0x2475488;
edge [color=red]
	Node0x2471e08 -> Node0x2472028;
	Node0x2472028 -> Node0x2472458;
	Node0x2471e88 -> Node0x2472538;
	Node0x2472538 -> Node0x2472638;
	Node0x2471f18 -> Node0x24726f8;
	Node0x24726f8 -> Node0x24727a8;
	Node0x2471f78 -> Node0x2472868;
	Node0x2472868 -> Node0x2472918;
	Node0x2471e08 -> Node0x246d7e0;
	Node0x2471e88 -> Node0x246d7e0;
	Node0x2471f18 -> Node0x246d7e0;
	Node0x2471f78 -> Node0x246d7e0;
	Node0x2471e08 -> Node0x2472b18;
	Node0x2471e88 -> Node0x2473a88;
	Node0x2471f18 -> Node0x24740f8;
	Node0x2471f78 -> Node0x2474158;
	Node0x24740f8 -> Node0x24741d0;
	Node0x2473a88 -> Node0x24741d0;
	Node0x24741d0 -> Node0x2474240;
	Node0x2474158 -> Node0x24742b0;
	Node0x2472b18 -> Node0x24742b0;
	Node0x24742b0 -> Node0x2474320;
	Node0x2474240 -> Node0x2474320;
	Node0x24740f8 -> Node0x2474390;
	Node0x2473a88 -> Node0x2474400;
	Node0x2473a88 -> Node0x2474470;
	Node0x2474390 -> Node0x2474470;
	Node0x2474158 -> Node0x24744e0;
	Node0x2472b18 -> Node0x24744e0;
	Node0x2472b18 -> Node0x2474550;
	Node0x2474550 -> Node0x24745c0;
	Node0x2474158 -> Node0x2474630;
	Node0x2474158 -> Node0x24746a0;
	Node0x2474550 -> Node0x24746a0;
	Node0x24746a0 -> Node0x2474710;
	Node0x24746a0 -> Node0x2474780;
	Node0x2474400 -> Node0x24747f0;
	Node0x2472b18 -> Node0x24747f0;
	Node0x24747f0 -> Node0x2474860;
	Node0x24745c0 -> Node0x2474860;
	Node0x2474860 -> Node0x24748d0;
	Node0x2474470 -> Node0x24748d0;
	Node0x24748d0 -> Node0x2474940;
	Node0x2474630 -> Node0x2474940;
	Node0x2474940 -> Node0x24749b0;
	Node0x24744e0 -> Node0x24749b0;
	Node0x24749b0 -> Node0x2474c30;
	Node0x2474710 -> Node0x2474c30;
	Node0x2474c30 -> Node0x2474ca0;
	Node0x2474780 -> Node0x2474ca0;
	Node0x2474320 -> Node0x2474d10;
	Node0x2474ca0 -> Node0x2474d10;
	Node0x2474d10 -> Node0x24128b8;
	Node0x24128b8 -> Node0x2474da0;
	Node0x2472868 -> Node0x2475048;
	Node0x24726f8 -> Node0x24751a8;
	Node0x2472538 -> Node0x24752b8;
	Node0x2472028 -> Node0x24753c8;
}
