digraph "DFG for'crackme' function" {
	Node0x16f3d40[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x16f3db0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x16f3e20[shape=record, label="  %7 = or i32 %6, %2"];
	Node0x16f3e90[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x16f3f30[shape=record, label="  %9 = add i32 %7, 4"];
	Node0x16f3fa0[shape=record, label="  %10 = sub i32 %9, %3"];
	Node0x16f4010[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x16f40b0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x16f4120[shape=record, label="  %13 = or i32 %5, %1"];
	Node0x16f4190[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0x16f4200[shape=record, label="  %15 = shl i32 %5, 1"];
	Node0x16f4270[shape=record, label="  %16 = xor i32 %14, -1"];
	Node0x16f42e0[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x16f4350[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x16f43f0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x16f4460[shape=record, label="  %20 = xor i32 %13, -1"];
	Node0x16f44d0[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x16f4540[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x16f45b0[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x16f4620[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x16f4690[shape=record, label="  %25 = or i32 %3, %0"];
	Node0x16f4700[shape=record, label="  %26 = xor i32 %25, -1"];
	Node0x16f47a0[shape=record, label="  %27 = mul i32 %26, -6"];
	Node0x16f4840[shape=record, label="  %28 = xor i32 %0, 1073741823"];
	Node0x16f48b0[shape=record, label="  %29 = xor i32 %3, 1073741823"];
	Node0x16f4920[shape=record, label="  %30 = and i32 %29, %0"];
	Node0x16f49c0[shape=record, label="  %31 = shl i32 %30, 2"];
	Node0x16f4a30[shape=record, label="  %32 = and i32 %28, %3"];
	Node0x16f4cb0[shape=record, label="  %33 = shl i32 %32, 2"];
	Node0x16f4d50[shape=record, label="  %34 = mul i32 %21, -7"];
	Node0x16f4dc0[shape=record, label="  %35 = add i32 %13, %1"];
	Node0x16f4e30[shape=record, label="  %36 = add i32 %35, %14"];
	Node0x16f4ea0[shape=record, label="  %37 = sub i32 %15, %36"];
	Node0x16f4f10[shape=record, label="  %38 = add i32 %37, %16"];
	Node0x16f4f80[shape=record, label="  %39 = add i32 %38, %20"];
	Node0x16f4ff0[shape=record, label="  %40 = sub i32 %39, %17"];
	Node0x16f5060[shape=record, label="  %41 = add i32 %40, %8"];
	Node0x16f50d0[shape=record, label="  %42 = add i32 %41, %12"];
	Node0x16f5140[shape=record, label="  %43 = add i32 %42, %21"];
	Node0x16f51b0[shape=record, label="  %44 = sub i32 %43, %19"];
	Node0x16f5220[shape=record, label="  %45 = add i32 %44, %27"];
	Node0x16f5290[shape=record, label="  %46 = sub i32 %45, %33"];
	Node0x16f5300[shape=record, label="  %47 = add i32 %46, %34"];
	Node0x16f5370[shape=record, label="  %48 = add i32 %47, %24"];
	Node0x16f53e0[shape=record, label="  %49 = sub i32 %48, %31"];
	Node0x16f5450[shape=record, label="  %50 = icmp eq i32 %10, %49"];
	Node0x1694268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16f58f0[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x16f5940[shape=record, label="  ret void"];
	Node0x16f3d40 -> Node0x16f3db0;
	Node0x16f3db0 -> Node0x16f3e20;
	Node0x16f3e20 -> Node0x16f3e90;
	Node0x16f3e90 -> Node0x16f3f30;
	Node0x16f3f30 -> Node0x16f3fa0;
	Node0x16f3fa0 -> Node0x16f4010;
	Node0x16f4010 -> Node0x16f40b0;
	Node0x16f40b0 -> Node0x16f4120;
	Node0x16f4120 -> Node0x16f4190;
	Node0x16f4190 -> Node0x16f4200;
	Node0x16f4200 -> Node0x16f4270;
	Node0x16f4270 -> Node0x16f42e0;
	Node0x16f42e0 -> Node0x16f4350;
	Node0x16f4350 -> Node0x16f43f0;
	Node0x16f43f0 -> Node0x16f4460;
	Node0x16f4460 -> Node0x16f44d0;
	Node0x16f44d0 -> Node0x16f4540;
	Node0x16f4540 -> Node0x16f45b0;
	Node0x16f45b0 -> Node0x16f4620;
	Node0x16f4620 -> Node0x16f4690;
	Node0x16f4690 -> Node0x16f4700;
	Node0x16f4700 -> Node0x16f47a0;
	Node0x16f47a0 -> Node0x16f4840;
	Node0x16f4840 -> Node0x16f48b0;
	Node0x16f48b0 -> Node0x16f4920;
	Node0x16f4920 -> Node0x16f49c0;
	Node0x16f49c0 -> Node0x16f4a30;
	Node0x16f4a30 -> Node0x16f4cb0;
	Node0x16f4cb0 -> Node0x16f4d50;
	Node0x16f4d50 -> Node0x16f4dc0;
	Node0x16f4dc0 -> Node0x16f4e30;
	Node0x16f4e30 -> Node0x16f4ea0;
	Node0x16f4ea0 -> Node0x16f4f10;
	Node0x16f4f10 -> Node0x16f4f80;
	Node0x16f4f80 -> Node0x16f4ff0;
	Node0x16f4ff0 -> Node0x16f5060;
	Node0x16f5060 -> Node0x16f50d0;
	Node0x16f50d0 -> Node0x16f5140;
	Node0x16f5140 -> Node0x16f51b0;
	Node0x16f51b0 -> Node0x16f5220;
	Node0x16f5220 -> Node0x16f5290;
	Node0x16f5290 -> Node0x16f5300;
	Node0x16f5300 -> Node0x16f5370;
	Node0x16f5370 -> Node0x16f53e0;
	Node0x16f53e0 -> Node0x16f5450;
	Node0x16f5450 -> Node0x1694268;
	Node0x1694268 -> Node0x16f58f0;
	Node0x16f58f0 -> Node0x16f5940;
edge [color=red]
	Node0x16f3db0 -> Node0x16f3e20;
	Node0x16f3e20 -> Node0x16f3f30;
	Node0x16f3f30 -> Node0x16f3fa0;
	Node0x16f4010 -> Node0x16f40b0;
	Node0x16f3d40 -> Node0x16f4120;
	Node0x16f3d40 -> Node0x16f4200;
	Node0x16f4190 -> Node0x16f4270;
	Node0x16f42e0 -> Node0x16f4350;
	Node0x16f4350 -> Node0x16f43f0;
	Node0x16f4120 -> Node0x16f4460;
	Node0x16f4540 -> Node0x16f45b0;
	Node0x16f45b0 -> Node0x16f4620;
	Node0x16f4690 -> Node0x16f4700;
	Node0x16f4700 -> Node0x16f47a0;
	Node0x16f48b0 -> Node0x16f4920;
	Node0x16f4920 -> Node0x16f49c0;
	Node0x16f4840 -> Node0x16f4a30;
	Node0x16f4a30 -> Node0x16f4cb0;
	Node0x16f44d0 -> Node0x16f4d50;
	Node0x16f4120 -> Node0x16f4dc0;
	Node0x16f4dc0 -> Node0x16f4e30;
	Node0x16f4190 -> Node0x16f4e30;
	Node0x16f4200 -> Node0x16f4ea0;
	Node0x16f4e30 -> Node0x16f4ea0;
	Node0x16f4ea0 -> Node0x16f4f10;
	Node0x16f4270 -> Node0x16f4f10;
	Node0x16f4f10 -> Node0x16f4f80;
	Node0x16f4460 -> Node0x16f4f80;
	Node0x16f4f80 -> Node0x16f4ff0;
	Node0x16f42e0 -> Node0x16f4ff0;
	Node0x16f4ff0 -> Node0x16f5060;
	Node0x16f3e90 -> Node0x16f5060;
	Node0x16f5060 -> Node0x16f50d0;
	Node0x16f40b0 -> Node0x16f50d0;
	Node0x16f50d0 -> Node0x16f5140;
	Node0x16f44d0 -> Node0x16f5140;
	Node0x16f5140 -> Node0x16f51b0;
	Node0x16f43f0 -> Node0x16f51b0;
	Node0x16f51b0 -> Node0x16f5220;
	Node0x16f47a0 -> Node0x16f5220;
	Node0x16f5220 -> Node0x16f5290;
	Node0x16f4cb0 -> Node0x16f5290;
	Node0x16f5290 -> Node0x16f5300;
	Node0x16f4d50 -> Node0x16f5300;
	Node0x16f5300 -> Node0x16f5370;
	Node0x16f4620 -> Node0x16f5370;
	Node0x16f5370 -> Node0x16f53e0;
	Node0x16f49c0 -> Node0x16f53e0;
	Node0x16f3fa0 -> Node0x16f5450;
	Node0x16f53e0 -> Node0x16f5450;
	Node0x16f5450 -> Node0x1694268;
	Node0x1694268 -> Node0x16f58f0;
}
