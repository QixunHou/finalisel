digraph "DFG for'crackme' function" {
	Node0x591af0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x591b60[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x591c20[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x591c90[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x591d00[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x591d70[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x591de0[shape=record, label="  %9 = or i32 %6, %0"];
	Node0x591e50[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x591ec0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x591f30[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x591fd0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x592040[shape=record, label="  %14 = xor i32 %10, -2"];
	Node0x5920b0[shape=record, label="  %15 = sub i32 1, %0"];
	Node0x592120[shape=record, label="  %16 = add i32 %15, %3"];
	Node0x592190[shape=record, label="  %17 = add i32 %16, %8"];
	Node0x592200[shape=record, label="  %18 = sub i32 %17, %7"];
	Node0x592270[shape=record, label="  %19 = add i32 %18, %5"];
	Node0x5922e0[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x592350[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0x5923c0[shape=record, label="  %22 = sub i32 %21, %14"];
	Node0x592430[shape=record, label="  %23 = icmp eq i32 %22, -1"];
	Node0x532268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x5928d0[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x592920[shape=record, label="  ret void"];
	Node0x591af0 -> Node0x591b60;
	Node0x591b60 -> Node0x591c20;
	Node0x591c20 -> Node0x591c90;
	Node0x591c90 -> Node0x591d00;
	Node0x591d00 -> Node0x591d70;
	Node0x591d70 -> Node0x591de0;
	Node0x591de0 -> Node0x591e50;
	Node0x591e50 -> Node0x591ec0;
	Node0x591ec0 -> Node0x591f30;
	Node0x591f30 -> Node0x591fd0;
	Node0x591fd0 -> Node0x592040;
	Node0x592040 -> Node0x5920b0;
	Node0x5920b0 -> Node0x592120;
	Node0x592120 -> Node0x592190;
	Node0x592190 -> Node0x592200;
	Node0x592200 -> Node0x592270;
	Node0x592270 -> Node0x5922e0;
	Node0x5922e0 -> Node0x592350;
	Node0x592350 -> Node0x5923c0;
	Node0x5923c0 -> Node0x592430;
	Node0x592430 -> Node0x532268;
	Node0x532268 -> Node0x5928d0;
	Node0x5928d0 -> Node0x592920;
edge [color=red]
	Node0x591b60 -> Node0x591c20;
	Node0x591c90 -> Node0x591d00;
	Node0x591d00 -> Node0x591d70;
	Node0x591c90 -> Node0x591de0;
	Node0x591de0 -> Node0x591e50;
	Node0x591ec0 -> Node0x591f30;
	Node0x591f30 -> Node0x591fd0;
	Node0x591e50 -> Node0x592040;
	Node0x5920b0 -> Node0x592120;
	Node0x591af0 -> Node0x592120;
	Node0x592120 -> Node0x592190;
	Node0x591d70 -> Node0x592190;
	Node0x592190 -> Node0x592200;
	Node0x591d00 -> Node0x592200;
	Node0x592200 -> Node0x592270;
	Node0x591c20 -> Node0x592270;
	Node0x592270 -> Node0x5922e0;
	Node0x591e50 -> Node0x5922e0;
	Node0x5922e0 -> Node0x592350;
	Node0x591fd0 -> Node0x592350;
	Node0x592350 -> Node0x5923c0;
	Node0x592040 -> Node0x5923c0;
	Node0x5923c0 -> Node0x592430;
	Node0x592430 -> Node0x532268;
	Node0x532268 -> Node0x5928d0;
}
