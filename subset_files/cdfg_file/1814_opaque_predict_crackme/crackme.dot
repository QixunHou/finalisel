digraph "DFG for'crackme' function" {
	Node0x15addc0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x15ade30[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x15adea0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x15adf40[shape=record, label="  %8 = mul i32 %7, -2"];
	Node0x15adfb0[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x15ae020[shape=record, label="  %10 = xor i32 %3, -1"];
	Node0x15ae090[shape=record, label="  %11 = and i32 %3, %0"];
	Node0x15ae100[shape=record, label="  %12 = add i32 %8, %10"];
	Node0x15ae170[shape=record, label="  %13 = add i32 %12, %11"];
	Node0x15ae1e0[shape=record, label="  %14 = or i32 %5, %1"];
	Node0x15ae280[shape=record, label="  %15 = mul i32 %14, -5"];
	Node0x15ae2f0[shape=record, label="  %16 = xor i32 %2, %1"];
	Node0x15ae390[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x15ae400[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x15ae470[shape=record, label="  %19 = add i32 %2, 1"];
	Node0x15ae4e0[shape=record, label="  %20 = shl i32 %1, 1"];
	Node0x15ae550[shape=record, label="  %21 = or i32 %2, %1"];
	Node0x15ae5c0[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x15ae660[shape=record, label="  %23 = mul i32 %22, 6"];
	Node0x15ae700[shape=record, label="  %24 = mul i32 %6, 10"];
	Node0x15ae770[shape=record, label="  %25 = and i32 %2, %1"];
	Node0x15ae810[shape=record, label="  %26 = shl i32 %25, 3"];
	Node0x15ae880[shape=record, label="  %27 = xor i32 %0, -1"];
	Node0x15ae8f0[shape=record, label="  %28 = or i32 %27, %3"];
	Node0x15ae960[shape=record, label="  %29 = shl i32 %3, 1"];
	Node0x15ae9d0[shape=record, label="  %30 = xor i32 %29, -1"];
	Node0x15aea40[shape=record, label="  %31 = or i32 %3, %0"];
	Node0x15aeab0[shape=record, label="  %32 = xor i32 %3, %0"];
	Node0x15aed30[shape=record, label="  %33 = xor i32 %31, -1"];
	Node0x15aedd0[shape=record, label="  %34 = mul i32 %33, -3"];
	Node0x15aee40[shape=record, label="  %35 = and i32 %27, %3"];
	Node0x15aeeb0[shape=record, label="  %36 = shl i32 %35, 1"];
	Node0x15aef20[shape=record, label="  %37 = shl i32 %28, 1"];
	Node0x15aef90[shape=record, label="  %38 = sub i32 1, %0"];
	Node0x15af000[shape=record, label="  %39 = add i32 %38, %9"];
	Node0x15af070[shape=record, label="  %40 = add i32 %39, %19"];
	Node0x15af0e0[shape=record, label="  %41 = sub i32 %40, %20"];
	Node0x15af150[shape=record, label="  %42 = sub i32 %41, %16"];
	Node0x15af1c0[shape=record, label="  %43 = add i32 %42, %14"];
	Node0x15af230[shape=record, label="  %44 = add i32 %43, %15"];
	Node0x15af2a0[shape=record, label="  %45 = add i32 %44, %23"];
	Node0x15af310[shape=record, label="  %46 = add i32 %45, %24"];
	Node0x15af380[shape=record, label="  %47 = add i32 %46, %26"];
	Node0x15af3f0[shape=record, label="  %48 = add i32 %47, %30"];
	Node0x15af460[shape=record, label="  %49 = add i32 %48, %31"];
	Node0x15af4d0[shape=record, label="  %50 = sub i32 %49, %32"];
	Node0x15af540[shape=record, label="  %51 = sub i32 %50, %11"];
	Node0x15af5b0[shape=record, label="  %52 = sub i32 %51, %18"];
	Node0x15af620[shape=record, label="  %53 = add i32 %52, %34"];
	Node0x15af690[shape=record, label="  %54 = sub i32 %53, %36"];
	Node0x15af700[shape=record, label="  %55 = add i32 %54, %37"];
	Node0x15af770[shape=record, label="  %56 = icmp eq i32 %13, %55"];
	Node0x154e268[shape=record, label="  %57 = select i1 %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x15afc10[shape=record, label="  %58 = tail call i32 @puts(i8* nonnull dereferenceable(1) %57)"];
	Node0x15afc60[shape=record, label="  ret void"];
	Node0x15addc0 -> Node0x15ade30;
	Node0x15ade30 -> Node0x15adea0;
	Node0x15adea0 -> Node0x15adf40;
	Node0x15adf40 -> Node0x15adfb0;
	Node0x15adfb0 -> Node0x15ae020;
	Node0x15ae020 -> Node0x15ae090;
	Node0x15ae090 -> Node0x15ae100;
	Node0x15ae100 -> Node0x15ae170;
	Node0x15ae170 -> Node0x15ae1e0;
	Node0x15ae1e0 -> Node0x15ae280;
	Node0x15ae280 -> Node0x15ae2f0;
	Node0x15ae2f0 -> Node0x15ae390;
	Node0x15ae390 -> Node0x15ae400;
	Node0x15ae400 -> Node0x15ae470;
	Node0x15ae470 -> Node0x15ae4e0;
	Node0x15ae4e0 -> Node0x15ae550;
	Node0x15ae550 -> Node0x15ae5c0;
	Node0x15ae5c0 -> Node0x15ae660;
	Node0x15ae660 -> Node0x15ae700;
	Node0x15ae700 -> Node0x15ae770;
	Node0x15ae770 -> Node0x15ae810;
	Node0x15ae810 -> Node0x15ae880;
	Node0x15ae880 -> Node0x15ae8f0;
	Node0x15ae8f0 -> Node0x15ae960;
	Node0x15ae960 -> Node0x15ae9d0;
	Node0x15ae9d0 -> Node0x15aea40;
	Node0x15aea40 -> Node0x15aeab0;
	Node0x15aeab0 -> Node0x15aed30;
	Node0x15aed30 -> Node0x15aedd0;
	Node0x15aedd0 -> Node0x15aee40;
	Node0x15aee40 -> Node0x15aeeb0;
	Node0x15aeeb0 -> Node0x15aef20;
	Node0x15aef20 -> Node0x15aef90;
	Node0x15aef90 -> Node0x15af000;
	Node0x15af000 -> Node0x15af070;
	Node0x15af070 -> Node0x15af0e0;
	Node0x15af0e0 -> Node0x15af150;
	Node0x15af150 -> Node0x15af1c0;
	Node0x15af1c0 -> Node0x15af230;
	Node0x15af230 -> Node0x15af2a0;
	Node0x15af2a0 -> Node0x15af310;
	Node0x15af310 -> Node0x15af380;
	Node0x15af380 -> Node0x15af3f0;
	Node0x15af3f0 -> Node0x15af460;
	Node0x15af460 -> Node0x15af4d0;
	Node0x15af4d0 -> Node0x15af540;
	Node0x15af540 -> Node0x15af5b0;
	Node0x15af5b0 -> Node0x15af620;
	Node0x15af620 -> Node0x15af690;
	Node0x15af690 -> Node0x15af700;
	Node0x15af700 -> Node0x15af770;
	Node0x15af770 -> Node0x154e268;
	Node0x154e268 -> Node0x15afc10;
	Node0x15afc10 -> Node0x15afc60;
edge [color=red]
	Node0x15addc0 -> Node0x15ade30;
	Node0x15ade30 -> Node0x15adea0;
	Node0x15adea0 -> Node0x15adf40;
	Node0x15adf40 -> Node0x15ae100;
	Node0x15ae020 -> Node0x15ae100;
	Node0x15ae100 -> Node0x15ae170;
	Node0x15ae090 -> Node0x15ae170;
	Node0x15addc0 -> Node0x15ae1e0;
	Node0x15ae1e0 -> Node0x15ae280;
	Node0x15ae2f0 -> Node0x15ae390;
	Node0x15ae390 -> Node0x15ae400;
	Node0x15ae550 -> Node0x15ae5c0;
	Node0x15ae5c0 -> Node0x15ae660;
	Node0x15ade30 -> Node0x15ae700;
	Node0x15ae770 -> Node0x15ae810;
	Node0x15ae880 -> Node0x15ae8f0;
	Node0x15ae960 -> Node0x15ae9d0;
	Node0x15aea40 -> Node0x15aed30;
	Node0x15aed30 -> Node0x15aedd0;
	Node0x15ae880 -> Node0x15aee40;
	Node0x15aee40 -> Node0x15aeeb0;
	Node0x15ae8f0 -> Node0x15aef20;
	Node0x15aef90 -> Node0x15af000;
	Node0x15adfb0 -> Node0x15af000;
	Node0x15af000 -> Node0x15af070;
	Node0x15ae470 -> Node0x15af070;
	Node0x15af070 -> Node0x15af0e0;
	Node0x15ae4e0 -> Node0x15af0e0;
	Node0x15af0e0 -> Node0x15af150;
	Node0x15ae2f0 -> Node0x15af150;
	Node0x15af150 -> Node0x15af1c0;
	Node0x15ae1e0 -> Node0x15af1c0;
	Node0x15af1c0 -> Node0x15af230;
	Node0x15ae280 -> Node0x15af230;
	Node0x15af230 -> Node0x15af2a0;
	Node0x15ae660 -> Node0x15af2a0;
	Node0x15af2a0 -> Node0x15af310;
	Node0x15ae700 -> Node0x15af310;
	Node0x15af310 -> Node0x15af380;
	Node0x15ae810 -> Node0x15af380;
	Node0x15af380 -> Node0x15af3f0;
	Node0x15ae9d0 -> Node0x15af3f0;
	Node0x15af3f0 -> Node0x15af460;
	Node0x15aea40 -> Node0x15af460;
	Node0x15af460 -> Node0x15af4d0;
	Node0x15aeab0 -> Node0x15af4d0;
	Node0x15af4d0 -> Node0x15af540;
	Node0x15ae090 -> Node0x15af540;
	Node0x15af540 -> Node0x15af5b0;
	Node0x15ae400 -> Node0x15af5b0;
	Node0x15af5b0 -> Node0x15af620;
	Node0x15aedd0 -> Node0x15af620;
	Node0x15af620 -> Node0x15af690;
	Node0x15aeeb0 -> Node0x15af690;
	Node0x15af690 -> Node0x15af700;
	Node0x15aef20 -> Node0x15af700;
	Node0x15ae170 -> Node0x15af770;
	Node0x15af700 -> Node0x15af770;
	Node0x15af770 -> Node0x154e268;
	Node0x154e268 -> Node0x15afc10;
}
