digraph "DFG for'crackme' function" {
	Node0x205b9d0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x205ba70[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x205bb30[shape=record, label="  %5 = or i32 %3, %1"];
	Node0x205bba0[shape=record, label="  %6 = shl i32 %1, 1"];
	Node0x205bc10[shape=record, label="  %7 = sub i32 %5, %6"];
	Node0x205bc80[shape=record, label="  %8 = xor i32 %3, %1"];
	Node0x205bcf0[shape=record, label="  %9 = add i32 %7, %8"];
	Node0x205bd60[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x205bdd0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x205be40[shape=record, label="  %12 = add i32 %9, %11"];
	Node0x205bee0[shape=record, label="  %13 = mul i32 %11, -5"];
	Node0x205bf50[shape=record, label="  %14 = and i32 %3, %1"];
	Node0x205bfc0[shape=record, label="  %15 = sub i32 %12, %14"];
	Node0x205c030[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x205c0a0[shape=record, label="  %17 = icmp eq i32 %4, %16"];
	Node0x1ffc268[shape=record, label="  %18 = select i1 %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x205c540[shape=record, label="  %19 = tail call i32 @puts(i8* nonnull dereferenceable(1) %18)"];
	Node0x205c590[shape=record, label="  ret void"];
	Node0x205b9d0 -> Node0x205ba70;
	Node0x205ba70 -> Node0x205bb30;
	Node0x205bb30 -> Node0x205bba0;
	Node0x205bba0 -> Node0x205bc10;
	Node0x205bc10 -> Node0x205bc80;
	Node0x205bc80 -> Node0x205bcf0;
	Node0x205bcf0 -> Node0x205bd60;
	Node0x205bd60 -> Node0x205bdd0;
	Node0x205bdd0 -> Node0x205be40;
	Node0x205be40 -> Node0x205bee0;
	Node0x205bee0 -> Node0x205bf50;
	Node0x205bf50 -> Node0x205bfc0;
	Node0x205bfc0 -> Node0x205c030;
	Node0x205c030 -> Node0x205c0a0;
	Node0x205c0a0 -> Node0x1ffc268;
	Node0x1ffc268 -> Node0x205c540;
	Node0x205c540 -> Node0x205c590;
edge [color=red]
	Node0x205b9d0 -> Node0x205ba70;
	Node0x205b9d0 -> Node0x205bb30;
	Node0x205bb30 -> Node0x205bc10;
	Node0x205bba0 -> Node0x205bc10;
	Node0x205b9d0 -> Node0x205bc80;
	Node0x205bc10 -> Node0x205bcf0;
	Node0x205bc80 -> Node0x205bcf0;
	Node0x205bd60 -> Node0x205bdd0;
	Node0x205bcf0 -> Node0x205be40;
	Node0x205bdd0 -> Node0x205be40;
	Node0x205bdd0 -> Node0x205bee0;
	Node0x205b9d0 -> Node0x205bf50;
	Node0x205be40 -> Node0x205bfc0;
	Node0x205bf50 -> Node0x205bfc0;
	Node0x205bfc0 -> Node0x205c030;
	Node0x205bee0 -> Node0x205c030;
	Node0x205ba70 -> Node0x205c0a0;
	Node0x205c030 -> Node0x205c0a0;
	Node0x205c0a0 -> Node0x1ffc268;
	Node0x1ffc268 -> Node0x205c540;
}
