digraph "DFG for'crackme' function" {
	Node0x7f6520[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x7f6bd0[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x7f6c90[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x7f6d00[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x7f6d70[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x7f6e10[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x7f6eb0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x7f6f20[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x7f6f90[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x7f7000[shape=record, label="  %12 = shl i32 %6, 1"];
	Node0x7f7070[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x7f70e0[shape=record, label="  %14 = and i32 %5, %0"];
	Node0x7f7180[shape=record, label="  %15 = mul i32 %14, -3"];
	Node0x7f71f0[shape=record, label="  %16 = sub i32 1, %1"];
	Node0x7f7260[shape=record, label="  %17 = sub i32 %16, %1"];
	Node0x7f72d0[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0x7f7340[shape=record, label="  %19 = sub i32 %18, %3"];
	Node0x7f73b0[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x7f7420[shape=record, label="  %21 = add i32 %20, %7"];
	Node0x7f7490[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x7f7500[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x7f7570[shape=record, label="  %24 = add i32 %23, %9"];
	Node0x7f75e0[shape=record, label="  %25 = sub i32 %24, %13"];
	Node0x7f7650[shape=record, label="  %26 = icmp eq i32 %25, %4"];
	Node0x797268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7f7af0[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x7f7b40[shape=record, label="  ret void"];
	Node0x7f6520 -> Node0x7f6bd0;
	Node0x7f6bd0 -> Node0x7f6c90;
	Node0x7f6c90 -> Node0x7f6d00;
	Node0x7f6d00 -> Node0x7f6d70;
	Node0x7f6d70 -> Node0x7f6e10;
	Node0x7f6e10 -> Node0x7f6eb0;
	Node0x7f6eb0 -> Node0x7f6f20;
	Node0x7f6f20 -> Node0x7f6f90;
	Node0x7f6f90 -> Node0x7f7000;
	Node0x7f7000 -> Node0x7f7070;
	Node0x7f7070 -> Node0x7f70e0;
	Node0x7f70e0 -> Node0x7f7180;
	Node0x7f7180 -> Node0x7f71f0;
	Node0x7f71f0 -> Node0x7f7260;
	Node0x7f7260 -> Node0x7f72d0;
	Node0x7f72d0 -> Node0x7f7340;
	Node0x7f7340 -> Node0x7f73b0;
	Node0x7f73b0 -> Node0x7f7420;
	Node0x7f7420 -> Node0x7f7490;
	Node0x7f7490 -> Node0x7f7500;
	Node0x7f7500 -> Node0x7f7570;
	Node0x7f7570 -> Node0x7f75e0;
	Node0x7f75e0 -> Node0x7f7650;
	Node0x7f7650 -> Node0x797268;
	Node0x797268 -> Node0x7f7af0;
	Node0x7f7af0 -> Node0x7f7b40;
edge [color=red]
	Node0x7f6520 -> Node0x7f6bd0;
	Node0x7f6c90 -> Node0x7f6d00;
	Node0x7f6d70 -> Node0x7f6e10;
	Node0x7f6e10 -> Node0x7f6eb0;
	Node0x7f6f20 -> Node0x7f6f90;
	Node0x7f6d00 -> Node0x7f7000;
	Node0x7f7000 -> Node0x7f7070;
	Node0x7f6c90 -> Node0x7f70e0;
	Node0x7f70e0 -> Node0x7f7180;
	Node0x7f71f0 -> Node0x7f7260;
	Node0x7f7260 -> Node0x7f72d0;
	Node0x7f6d00 -> Node0x7f72d0;
	Node0x7f72d0 -> Node0x7f7340;
	Node0x7f6520 -> Node0x7f7340;
	Node0x7f7340 -> Node0x7f73b0;
	Node0x7f6f20 -> Node0x7f73b0;
	Node0x7f73b0 -> Node0x7f7420;
	Node0x7f6d70 -> Node0x7f7420;
	Node0x7f7420 -> Node0x7f7490;
	Node0x7f6f90 -> Node0x7f7490;
	Node0x7f7490 -> Node0x7f7500;
	Node0x7f7180 -> Node0x7f7500;
	Node0x7f7500 -> Node0x7f7570;
	Node0x7f6eb0 -> Node0x7f7570;
	Node0x7f7570 -> Node0x7f75e0;
	Node0x7f7070 -> Node0x7f75e0;
	Node0x7f75e0 -> Node0x7f7650;
	Node0x7f6bd0 -> Node0x7f7650;
	Node0x7f7650 -> Node0x797268;
	Node0x797268 -> Node0x7f7af0;
}
