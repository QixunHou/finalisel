digraph "DFG for'main' function" {
	Node0x7f7d08[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x7f7d88[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x7f7e18[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x7f8278[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x7f8358[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x7f8478[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x7f86b0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x7f8768[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x7f96d8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x7f9d60[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x7f9dd0[shape=record, label="  %9 = sub i32 0, %8"];
	Node0x7f9e40[shape=record, label="  %10 = xor i32 %7, -1"];
	Node0x7f9eb0[shape=record, label="  %11 = or i32 %6, %10"];
	Node0x7f9f20[shape=record, label="  %12 = and i32 %7, %6"];
	Node0x7f9f90[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x7fa000[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x7fa070[shape=record, label="  %15 = or i32 %7, %6"];
	Node0x7fa0e0[shape=record, label="  %16 = shl i32 %11, 1"];
	Node0x7fa150[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x7fa1c0[shape=record, label="  %18 = and i32 %6, %10"];
	Node0x7fa230[shape=record, label="  %19 = mul i32 %18, -3"];
	Node0x7fa2a0[shape=record, label="  %20 = sub i32 %15, %7"];
	Node0x7fa310[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x7fa380[shape=record, label="  %22 = sub i32 1, %11"];
	Node0x7fa3f0[shape=record, label="  %23 = sub i32 %22, %8"];
	Node0x7fa460[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x7fa4d0[shape=record, label="  %25 = add i32 %24, %12"];
	Node0x7fa540[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x7fa5b0[shape=record, label="  %27 = add i32 %26, %14"];
	Node0x7fa620[shape=record, label="  %28 = sub i32 %27, %17"];
	Node0x7fa690[shape=record, label="  %29 = add i32 %28, %21"];
	Node0x7fa700[shape=record, label="  %30 = icmp eq i32 %29, %9"];
	Node0x7989d8[shape=record, label="  %31 = select i1 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7fa790[shape=record, label="  %32 = call i32 @puts(i8* nonnull dereferenceable(1) %31) #5"];
	Node0x7fabf8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x7fad58[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x7fae18[shape=record, label="  ret i32 0"];
	Node0x7f7d08 -> Node0x7f7d88;
	Node0x7f7d88 -> Node0x7f7e18;
	Node0x7f7e18 -> Node0x7f8278;
	Node0x7f8278 -> Node0x7f8358;
	Node0x7f8358 -> Node0x7f8478;
	Node0x7f8478 -> Node0x7f86b0;
	Node0x7f86b0 -> Node0x7f8768;
	Node0x7f8768 -> Node0x7f96d8;
	Node0x7f96d8 -> Node0x7f9d60;
	Node0x7f9d60 -> Node0x7f9dd0;
	Node0x7f9dd0 -> Node0x7f9e40;
	Node0x7f9e40 -> Node0x7f9eb0;
	Node0x7f9eb0 -> Node0x7f9f20;
	Node0x7f9f20 -> Node0x7f9f90;
	Node0x7f9f90 -> Node0x7fa000;
	Node0x7fa000 -> Node0x7fa070;
	Node0x7fa070 -> Node0x7fa0e0;
	Node0x7fa0e0 -> Node0x7fa150;
	Node0x7fa150 -> Node0x7fa1c0;
	Node0x7fa1c0 -> Node0x7fa230;
	Node0x7fa230 -> Node0x7fa2a0;
	Node0x7fa2a0 -> Node0x7fa310;
	Node0x7fa310 -> Node0x7fa380;
	Node0x7fa380 -> Node0x7fa3f0;
	Node0x7fa3f0 -> Node0x7fa460;
	Node0x7fa460 -> Node0x7fa4d0;
	Node0x7fa4d0 -> Node0x7fa540;
	Node0x7fa540 -> Node0x7fa5b0;
	Node0x7fa5b0 -> Node0x7fa620;
	Node0x7fa620 -> Node0x7fa690;
	Node0x7fa690 -> Node0x7fa700;
	Node0x7fa700 -> Node0x7989d8;
	Node0x7989d8 -> Node0x7fa790;
	Node0x7fa790 -> Node0x7fabf8;
	Node0x7fabf8 -> Node0x7fad58;
	Node0x7fad58 -> Node0x7fae18;
edge [color=red]
	Node0x7f7d08 -> Node0x7f7e18;
	Node0x7f7e18 -> Node0x7f8278;
	Node0x7f7d88 -> Node0x7f8358;
	Node0x7f8358 -> Node0x7f8478;
	Node0x7f7d08 -> Node0x7f86b0;
	Node0x7f7d88 -> Node0x7f86b0;
	Node0x7f7d08 -> Node0x7f8768;
	Node0x7f7d88 -> Node0x7f96d8;
	Node0x7f96d8 -> Node0x7f9d60;
	Node0x7f8768 -> Node0x7f9d60;
	Node0x7f9d60 -> Node0x7f9dd0;
	Node0x7f96d8 -> Node0x7f9e40;
	Node0x7f8768 -> Node0x7f9eb0;
	Node0x7f9e40 -> Node0x7f9eb0;
	Node0x7f96d8 -> Node0x7f9f20;
	Node0x7f8768 -> Node0x7f9f20;
	Node0x7f9f20 -> Node0x7f9f90;
	Node0x7f9f90 -> Node0x7fa000;
	Node0x7f96d8 -> Node0x7fa070;
	Node0x7f8768 -> Node0x7fa070;
	Node0x7f9eb0 -> Node0x7fa0e0;
	Node0x7fa0e0 -> Node0x7fa150;
	Node0x7f8768 -> Node0x7fa1c0;
	Node0x7f9e40 -> Node0x7fa1c0;
	Node0x7fa1c0 -> Node0x7fa230;
	Node0x7fa070 -> Node0x7fa2a0;
	Node0x7f96d8 -> Node0x7fa2a0;
	Node0x7fa2a0 -> Node0x7fa310;
	Node0x7f9eb0 -> Node0x7fa380;
	Node0x7fa380 -> Node0x7fa3f0;
	Node0x7f9d60 -> Node0x7fa3f0;
	Node0x7fa3f0 -> Node0x7fa460;
	Node0x7fa070 -> Node0x7fa460;
	Node0x7fa460 -> Node0x7fa4d0;
	Node0x7f9f20 -> Node0x7fa4d0;
	Node0x7fa4d0 -> Node0x7fa540;
	Node0x7fa230 -> Node0x7fa540;
	Node0x7fa540 -> Node0x7fa5b0;
	Node0x7fa000 -> Node0x7fa5b0;
	Node0x7fa5b0 -> Node0x7fa620;
	Node0x7fa150 -> Node0x7fa620;
	Node0x7fa620 -> Node0x7fa690;
	Node0x7fa310 -> Node0x7fa690;
	Node0x7fa690 -> Node0x7fa700;
	Node0x7f9dd0 -> Node0x7fa700;
	Node0x7fa700 -> Node0x7989d8;
	Node0x7989d8 -> Node0x7fa790;
	Node0x7f8358 -> Node0x7fabf8;
	Node0x7f7e18 -> Node0x7fad58;
}
