; ModuleID = '../.././c_source_file/1772_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1772_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %7, %10
  %12 = xor i32 %2, %0
  %13 = or i32 %12, %1
  %14 = sub i32 %11, %13
  %15 = and i32 %4, %3
  %16 = xor i32 %15, -1
  %17 = xor i32 %5, %3
  %18 = and i32 %17, %16
  %19 = shl i32 %18, 1
  %20 = sub i32 %14, %19
  %21 = and i32 %2, %1
  %22 = and i32 %21, %0
  %23 = or i32 %2, %1
  %24 = xor i32 %23, %0
  %25 = or i32 %22, %24
  %26 = xor i32 %12, -1
  %27 = or i32 %7, %26
  %28 = or i32 %10, %0
  %29 = xor i32 %1, -1
  %30 = and i32 %29, %2
  %31 = and i32 %30, %0
  %32 = xor i32 %2, %1
  %33 = or i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %31, %34
  %36 = xor i32 %23, -1
  %37 = xor i32 %31, %33
  %38 = and i32 %2, %0
  %39 = and i32 %8, %1
  %40 = or i32 %38, %39
  %41 = or i32 %8, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %1
  %44 = xor i32 %0, -1
  %45 = or i32 %29, %2
  %46 = and i32 %45, %44
  %47 = or i32 %31, %46
  %48 = xor i32 %9, %7
  %49 = or i32 %38, %36
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = add i32 %50, 1
  %53 = and i32 %8, %0
  %54 = xor i32 %53, -1
  %55 = and i32 %54, %1
  %56 = and i32 %32, %44
  %57 = or i32 %22, %56
  %58 = or i32 %53, %29
  %59 = xor i32 %38, %50
  %60 = or i32 %12, %7
  %61 = or i32 %29, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %32, -1
  %64 = or i32 %63, %62
  %65 = or i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %29
  %68 = or i32 %39, %0
  %69 = shl i32 %68, 1
  %70 = xor i32 %1, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %8, %71
  %73 = and i32 %65, %70
  %74 = or i32 %7, %2
  %75 = xor i32 %21, %0
  %76 = xor i32 %38, %61
  %77 = shl i32 %8, 1
  %78 = xor i32 %41, %7
  %79 = xor i32 %36, %0
  %80 = xor i32 %53, %1
  %81 = or i32 %32, %7
  %82 = xor i32 %45, %0
  %83 = xor i32 %31, -1
  %84 = xor i32 %82, %83
  %85 = or i32 %66, %1
  %86 = shl i32 %85, 1
  %87 = xor i32 %7, -1
  %88 = add i32 %7, 1
  %89 = or i32 %32, %62
  %90 = and i32 %54, %71
  %91 = and i32 %29, %0
  %92 = or i32 %21, %91
  %93 = xor i32 %38, -1
  %94 = and i32 %93, %1
  %95 = and i32 %30, %44
  %96 = and i32 %45, %0
  %97 = or i32 %95, %96
  %98 = or i32 %53, %1
  %99 = or i32 %63, %51
  %100 = shl i32 %99, 1
  %101 = xor i32 %21, -1
  %102 = or i32 %101, %44
  %103 = and i32 %32, %0
  %104 = and i32 %50, %8
  %105 = or i32 %8, %51
  %106 = xor i32 %22, -1
  %107 = xor i32 %56, %106
  %108 = and i32 %63, %0
  %109 = shl i32 %108, 1
  %110 = add i32 %53, 1
  %111 = xor i32 %65, %7
  %112 = or i32 %91, %26
  %113 = and i32 %50, %63
  %114 = or i32 %9, %44
  %115 = or i32 %70, %42
  %116 = and i32 %65, %1
  %117 = xor i32 %91, -1
  %118 = and i32 %8, %117
  %119 = xor i32 %87, %2
  %120 = shl i32 %53, 1
  %121 = xor i32 %117, %2
  %122 = or i32 %42, %29
  %123 = xor i32 %39, -1
  %124 = or i32 %123, %0
  %125 = or i32 %53, %10
  %126 = shl i32 %125, 2
  %127 = and i32 %70, %8
  %128 = and i32 %123, %0
  %129 = or i32 %26, %29
  %130 = or i32 %12, %51
  %131 = xor i32 %63, %0
  %132 = xor i32 %101, %0
  %133 = and i32 %101, %0
  %134 = and i32 %117, %2
  %135 = xor i32 %66, %1
  %136 = xor i32 %51, %2
  %137 = or i32 %36, %44
  %138 = xor i32 %65, %1
  %139 = or i32 %70, %2
  %140 = shl i32 %139, 1
  %141 = and i32 %61, %26
  %142 = xor i32 %32, %0
  %143 = xor i32 %22, %142
  %144 = add i32 %41, 1
  %145 = xor i32 %46, %83
  %146 = and i32 %63, %44
  %147 = or i32 %7, %8
  %148 = and i32 %70, %54
  %149 = or i32 %26, %1
  %150 = and i32 %26, %117
  %151 = and i32 %61, %63
  %152 = or i32 %12, %91
  %153 = or i32 %31, %82
  %154 = or i32 %7, %66
  %155 = or i32 %21, %44
  %156 = or i32 %38, %71
  %157 = and i32 %41, %71
  %158 = and i32 %70, %2
  %159 = and i32 %61, %8
  %160 = or i32 %51, %2
  %161 = or i32 %70, %26
  %162 = and i32 %50, %2
  %163 = or i32 %26, %71
  %164 = or i32 %32, %91
  %165 = and i32 %12, %70
  %166 = or i32 %32, %44
  %167 = xor i32 %166, -1
  %168 = or i32 %95, %167
  %169 = or i32 %53, %21
  %170 = and i32 %41, %1
  %171 = shl i32 %170, 1
  %172 = or i32 %66, %71
  %173 = xor i32 %10, %0
  %174 = xor i32 %62, %2
  %175 = or i32 %70, %66
  %176 = and i32 %26, %71
  %177 = xor i32 %42, %1
  %178 = xor i32 %93, %1
  %179 = and i32 %70, %93
  %180 = xor i32 %38, %23
  %181 = shl i32 %180, 1
  %182 = add i32 %91, 1
  %183 = xor i32 %9, %0
  %184 = or i32 %38, %51
  %185 = shl i32 %184, 1
  %186 = and i32 %65, %71
  %187 = xor i32 %91, %2
  %188 = xor i32 %53, %9
  %189 = xor i32 %54, %1
  %190 = xor i32 %24, 2147483647
  %191 = xor i32 %190, %22
  %192 = shl i32 %191, 1
  %193 = or i32 %7, %63
  %194 = and i32 %12, %71
  %195 = or i32 %21, %0
  %196 = and i32 %41, %70
  %197 = or i32 %31, %142
  %198 = shl i32 %197, 1
  %199 = and i32 %23, %0
  %200 = and i32 %32, %61
  %201 = or i32 %71, %2
  %202 = or i32 %23, %0
  %203 = and i32 %93, %29
  %204 = and i32 %21, %44
  %205 = xor i32 %103, -1
  %206 = xor i32 %204, %205
  %207 = and i32 %63, %117
  %208 = and i32 %32, %87
  %209 = or i32 %39, %91
  %210 = or i32 %38, %70
  %211 = and i32 %23, %44
  %212 = xor i32 %211, %106
  %213 = xor i32 %50, %2
  %214 = or i32 %12, %70
  %215 = or i32 %8, %62
  %216 = and i32 %93, %71
  %217 = and i32 %26, %87
  %218 = and i32 %26, %29
  %219 = add i32 %38, 1
  %220 = xor i32 %7, %2
  %221 = xor i32 %23, %7
  %222 = and i32 %12, %1
  %223 = and i32 %12, %61
  %224 = or i32 %36, %0
  %225 = and i32 %101, %44
  %226 = shl i32 %225, 1
  %227 = xor i32 %142, -1
  %228 = or i32 %22, %227
  %229 = or i32 %22, %211
  %230 = and i32 %26, %1
  %231 = or i32 %12, %62
  %232 = shl i32 %231, 1
  %233 = or i32 %63, %0
  %234 = and i32 %50, %26
  %235 = xor i32 %95, %166
  %236 = xor i32 %91, %101
  %237 = shl i32 %236, 1
  %238 = xor i32 %53, %101
  %239 = or i32 %91, %8
  %240 = or i32 %7, %42
  %241 = or i32 %10, %44
  %242 = or i32 %12, %71
  %243 = and i32 %71, %2
  %244 = or i32 %70, %8
  %245 = shl i32 %244, 1
  %246 = or i32 %91, %63
  %247 = or i32 %101, %0
  %248 = and i32 %61, %2
  %249 = or i32 %91, %2
  %250 = and i32 %32, %50
  %251 = xor i32 %39, %0
  %252 = shl i32 %251, 1
  %253 = and i32 %32, %117
  %254 = or i32 %12, %29
  %255 = or i32 %32, %51
  %256 = xor i32 %38, %123
  %257 = shl i32 %256, 1
  %258 = or i32 %38, %62
  %259 = and i32 %8, %87
  %260 = shl i32 %259, 1
  %261 = or i32 %26, %51
  %262 = shl i32 %261, 1
  %263 = or i32 %123, %44
  %264 = and i32 %70, %26
  %265 = xor i32 %61, %2
  %266 = and i32 %63, %87
  %267 = and i32 %12, %29
  %268 = shl i32 %267, 1
  %269 = shl i32 %7, 1
  %270 = and i32 %54, %29
  %271 = and i32 %9, %0
  %272 = and i32 %12, %50
  %273 = or i32 %204, %199
  %274 = and i32 %36, %44
  %275 = mul i32 %274, 19
  %276 = and i32 %39, %44
  %277 = and i32 %36, %0
  %278 = and i32 %39, %0
  %279 = mul i32 %278, 13
  %280 = and i32 %10, %44
  %281 = shl i32 %204, 1
  %282 = or i32 %5, %3
  %283 = xor i32 %282, -1
  %284 = or i32 %283, %4
  %285 = xor i32 %3, -1
  %286 = and i32 %285, %4
  %287 = xor i32 %286, -1
  %288 = xor i32 %287, %5
  %289 = shl i32 %288, 1
  %290 = and i32 %5, %3
  %291 = and i32 %290, %4
  %292 = xor i32 %282, %4
  %293 = xor i32 %291, -1
  %294 = xor i32 %292, %293
  %295 = and i32 %5, %4
  %296 = or i32 %295, %283
  %297 = or i32 %290, %4
  %298 = xor i32 %290, -1
  %299 = xor i32 %298, %4
  %300 = xor i32 %4, %3
  %301 = or i32 %295, %300
  %302 = shl i32 %301, 1
  %303 = xor i32 %4, -1
  %304 = or i32 %290, %303
  %305 = xor i32 %17, -1
  %306 = or i32 %15, %305
  %307 = xor i32 %5, -1
  %308 = or i32 %307, %3
  %309 = xor i32 %308, -1
  %310 = or i32 %309, %4
  %311 = and i32 %17, %303
  %312 = xor i32 %311, %293
  %313 = or i32 %307, %4
  %314 = and i32 %313, %3
  %315 = xor i32 %5, %4
  %316 = and i32 %315, %285
  %317 = and i32 %282, %4
  %318 = and i32 %307, %3
  %319 = xor i32 %313, -1
  %320 = or i32 %15, %319
  %321 = xor i32 %308, %4
  %322 = and i32 %298, %4
  %323 = shl i32 %322, 1
  %324 = xor i32 %315, -1
  %325 = or i32 %324, %285
  %326 = add i32 %315, 1
  %327 = and i32 %324, %3
  %328 = or i32 %285, %4
  %329 = and i32 %17, %328
  %330 = xor i32 %283, %4
  %331 = or i32 %5, %4
  %332 = xor i32 %331, -1
  %333 = xor i32 %300, -1
  %334 = or i32 %332, %333
  %335 = and i32 %315, %3
  %336 = or i32 %295, %333
  %337 = or i32 %286, %307
  %338 = and i32 %16, %5
  %339 = or i32 %319, %333
  %340 = or i32 %305, %303
  %341 = and i32 %307, %4
  %342 = xor i32 %341, -1
  %343 = and i32 %342, %333
  %344 = and i32 %290, %303
  %345 = and i32 %17, %4
  %346 = xor i32 %344, -1
  %347 = xor i32 %345, %346
  %348 = xor i32 %331, %3
  %349 = or i32 %341, %300
  %350 = and i32 %331, %300
  %351 = xor i32 %318, -1
  %352 = or i32 %298, %303
  %353 = or i32 %4, %3
  %354 = xor i32 %353, -1
  %355 = or i32 %300, %319
  %356 = and i32 %285, %5
  %357 = and i32 %356, %4
  %358 = xor i32 %17, %4
  %359 = or i32 %357, %358
  %360 = or i32 %318, %286
  %361 = and i32 %353, %324
  %362 = shl i32 %361, 1
  %363 = xor i32 %328, -1
  %364 = or i32 %17, %363
  %365 = or i32 %332, %285
  %366 = shl i32 %363, 2
  %367 = and i32 %300, %307
  %368 = and i32 %287, %5
  %369 = or i32 %17, %15
  %370 = and i32 %308, %303
  %371 = xor i32 %358, -1
  %372 = or i32 %291, %371
  %373 = and i32 %315, %16
  %374 = and i32 %353, %5
  %375 = and i32 %298, %303
  %376 = xor i32 %290, %4
  %377 = or i32 %324, %354
  %378 = or i32 %315, %286
  %379 = xor i32 %305, %4
  %380 = xor i32 %351, %4
  %381 = xor i32 %354, %5
  %382 = shl i32 %381, 1
  %383 = and i32 %307, %16
  %384 = xor i32 %332, %3
  %385 = or i32 %17, %303
  %386 = or i32 %307, %333
  %387 = or i32 %333, %5
  %388 = or i32 %295, %3
  %389 = and i32 %282, %303
  %390 = or i32 %291, %389
  %391 = and i32 %307, %287
  %392 = shl i32 %391, 1
  %393 = or i32 %354, %5
  %394 = and i32 %315, %287
  %395 = add i32 %331, 1
  %396 = xor i32 %317, %346
  %397 = or i32 %315, %285
  %398 = or i32 %15, %5
  %399 = and i32 %331, %333
  %400 = add i32 %5, 1
  %401 = or i32 %363, %5
  %402 = shl i32 %303, 1
  %403 = xor i32 %357, %371
  %404 = or i32 %318, %4
  %405 = xor i32 %309, %4
  %406 = or i32 %315, %333
  %407 = add i32 %15, 1
  %408 = xor i32 %342, %3
  %409 = or i32 %309, %303
  %410 = or i32 %282, %4
  %411 = shl i32 %313, 1
  %412 = xor i32 %295, -1
  %413 = and i32 %300, %412
  %414 = and i32 %313, %333
  %415 = or i32 %341, %333
  %416 = and i32 %307, %333
  %417 = or i32 %308, %303
  %418 = and i32 %353, %307
  %419 = xor i32 %295, %3
  %420 = or i32 %282, %303
  %421 = and i32 %342, %3
  %422 = or i32 %15, %332
  %423 = or i32 %341, %285
  %424 = or i32 %324, %333
  %425 = xor i32 %15, %5
  %426 = and i32 %412, %285
  %427 = or i32 %15, %307
  %428 = and i32 %315, %300
  %429 = or i32 %307, %354
  %430 = xor i32 %295, %351
  %431 = or i32 %17, %4
  %432 = and i32 %356, %303
  %433 = xor i32 %385, -1
  %434 = or i32 %432, %433
  %435 = xor i32 %16, %5
  %436 = and i32 %328, %307
  %437 = or i32 %291, %292
  %438 = or i32 %351, %4
  %439 = shl i32 %315, 1
  %440 = xor i32 %363, %5
  %441 = shl i32 %440, 1
  %442 = or i32 %283, %303
  %443 = and i32 %353, %305
  %444 = shl i32 %443, 1
  %445 = or i32 %15, %283
  %446 = add i32 %282, 1
  %447 = or i32 %300, %307
  %448 = and i32 %283, %303
  %449 = and i32 %318, %303
  %450 = shl i32 %449, 3
  %451 = and i32 %283, %4
  %452 = and i32 %318, %4
  %453 = and i32 %309, %303
  %454 = mul i32 %344, 11
  %455 = and i32 %309, %4
  %456 = shl i32 %455, 4
  %457 = add i32 %65, %285
  %458 = add i32 %457, %23
  %459 = add i32 %458, %119
  %460 = add i32 %459, %22
  %461 = add i32 %460, %270
  %462 = add i32 %461, %263
  %463 = add i32 %462, %246
  %464 = add i32 %463, %142
  %465 = add i32 %464, %175
  %466 = add i32 %465, %149
  %467 = add i32 %466, %112
  %468 = add i32 %467, %111
  %469 = add i32 %468, %79
  %470 = add i32 %469, %60
  %471 = add i32 %470, %59
  %472 = add i32 %471, %40
  %473 = add i32 %472, %333
  %474 = add i32 %473, %5
  %475 = add i32 %474, %153
  %476 = add i32 %475, %143
  %477 = add i32 %476, %435
  %478 = add i32 %477, %368
  %479 = add i32 %478, %337
  %480 = add i32 %479, %358
  %481 = add i32 %480, %424
  %482 = add i32 %481, %376
  %483 = add i32 %482, %375
  %484 = add i32 %483, %370
  %485 = add i32 %484, %325
  %486 = add i32 %485, %304
  %487 = add i32 %486, %359
  %488 = shl i32 %487, 1
  %489 = sub i32 %276, %239
  %490 = add i32 %489, %33
  %491 = add i32 %490, %200
  %492 = sub i32 %491, %176
  %493 = add i32 %492, %156
  %494 = sub i32 %493, %420
  %495 = mul i32 %494, 3
  %496 = add i32 %220, %248
  %497 = sub i32 %10, %496
  %498 = add i32 %497, %407
  %499 = sub i32 %498, %291
  %500 = mul i32 %499, 5
  %501 = add i32 %380, %2
  %502 = add i32 %501, %384
  %503 = shl i32 %502, 2
  %504 = add i32 %453, %448
  %505 = mul i32 %504, -7
  %506 = add i32 %451, %280
  %507 = mul i32 %506, 9
  %508 = sub i32 -3, %0
  %509 = add i32 %508, %44
  %510 = add i32 %509, %29
  %511 = add i32 %510, %52
  %512 = add i32 %511, %88
  %513 = add i32 %512, %91
  %514 = add i32 %513, %182
  %515 = add i32 %514, %36
  %516 = add i32 %515, %72
  %517 = add i32 %516, %38
  %518 = add i32 %517, %74
  %519 = sub i32 %518, %77
  %520 = sub i32 %519, %104
  %521 = add i32 %520, %105
  %522 = add i32 %521, %110
  %523 = add i32 %522, %118
  %524 = sub i32 %523, %121
  %525 = sub i32 %524, %127
  %526 = sub i32 %525, %134
  %527 = sub i32 %526, %136
  %528 = add i32 %527, %144
  %529 = add i32 %528, %147
  %530 = sub i32 %529, %158
  %531 = add i32 %530, %159
  %532 = sub i32 %531, %160
  %533 = sub i32 %532, %162
  %534 = sub i32 %533, %41
  %535 = sub i32 %534, %174
  %536 = sub i32 %535, %187
  %537 = add i32 %536, %201
  %538 = add i32 %537, %213
  %539 = add i32 %538, %215
  %540 = add i32 %539, %219
  %541 = add i32 %540, %32
  %542 = add i32 %541, %243
  %543 = add i32 %542, %249
  %544 = add i32 %543, %265
  %545 = add i32 %544, %9
  %546 = sub i32 %545, %269
  %547 = sub i32 %546, %27
  %548 = sub i32 %547, %28
  %549 = add i32 %548, %43
  %550 = sub i32 %549, %48
  %551 = add i32 %550, %49
  %552 = add i32 %551, %55
  %553 = sub i32 %552, %58
  %554 = add i32 %553, %56
  %555 = add i32 %554, %64
  %556 = sub i32 %555, %67
  %557 = add i32 %556, %73
  %558 = sub i32 %557, %75
  %559 = add i32 %558, %76
  %560 = add i32 %559, %78
  %561 = add i32 %560, %80
  %562 = sub i32 %561, %81
  %563 = sub i32 %562, %89
  %564 = add i32 %563, %90
  %565 = sub i32 %564, %92
  %566 = add i32 %565, %94
  %567 = add i32 %566, %98
  %568 = add i32 %567, %102
  %569 = sub i32 %568, %103
  %570 = add i32 %569, %113
  %571 = sub i32 %570, %114
  %572 = sub i32 %571, %115
  %573 = add i32 %572, %116
  %574 = sub i32 %573, %120
  %575 = add i32 %574, %122
  %576 = sub i32 %575, %124
  %577 = add i32 %576, %128
  %578 = sub i32 %577, %129
  %579 = sub i32 %578, %130
  %580 = sub i32 %579, %131
  %581 = sub i32 %580, %132
  %582 = sub i32 %581, %133
  %583 = sub i32 %582, %135
  %584 = sub i32 %583, %137
  %585 = add i32 %584, %138
  %586 = sub i32 %585, %140
  %587 = sub i32 %586, %141
  %588 = add i32 %587, %146
  %589 = add i32 %588, %148
  %590 = add i32 %589, %150
  %591 = add i32 %590, %151
  %592 = sub i32 %591, %152
  %593 = sub i32 %592, %154
  %594 = add i32 %593, %155
  %595 = sub i32 %594, %157
  %596 = sub i32 %595, %161
  %597 = sub i32 %596, %163
  %598 = add i32 %597, %164
  %599 = add i32 %598, %165
  %600 = add i32 %599, %169
  %601 = add i32 %600, %172
  %602 = sub i32 %601, %24
  %603 = sub i32 %602, %173
  %604 = sub i32 %603, %177
  %605 = sub i32 %604, %178
  %606 = add i32 %605, %179
  %607 = sub i32 %606, %183
  %608 = sub i32 %607, %186
  %609 = sub i32 %608, %188
  %610 = sub i32 %609, %189
  %611 = add i32 %610, %193
  %612 = sub i32 %611, %194
  %613 = add i32 %612, %195
  %614 = add i32 %613, %196
  %615 = add i32 %614, %199
  %616 = add i32 %615, %202
  %617 = sub i32 %616, %203
  %618 = sub i32 %617, %207
  %619 = add i32 %618, %208
  %620 = add i32 %619, %209
  %621 = sub i32 %620, %210
  %622 = add i32 %621, %214
  %623 = sub i32 %622, %216
  %624 = sub i32 %623, %217
  %625 = add i32 %624, %218
  %626 = add i32 %625, %221
  %627 = sub i32 %626, %222
  %628 = add i32 %627, %223
  %629 = sub i32 %628, %224
  %630 = sub i32 %629, %230
  %631 = sub i32 %630, %233
  %632 = add i32 %631, %234
  %633 = sub i32 %632, %238
  %634 = add i32 %633, %240
  %635 = sub i32 %634, %241
  %636 = sub i32 %635, %242
  %637 = sub i32 %636, %245
  %638 = add i32 %637, %247
  %639 = sub i32 %638, %250
  %640 = sub i32 %639, %253
  %641 = sub i32 %640, %211
  %642 = sub i32 %641, %254
  %643 = add i32 %642, %255
  %644 = sub i32 %643, %258
  %645 = sub i32 %644, %260
  %646 = add i32 %645, %264
  %647 = sub i32 %646, %266
  %648 = sub i32 %647, %271
  %649 = add i32 %648, %272
  %650 = add i32 %649, %277
  %651 = sub i32 %650, %25
  %652 = add i32 %651, %35
  %653 = add i32 %652, %37
  %654 = sub i32 %653, %47
  %655 = sub i32 %654, %57
  %656 = sub i32 %655, %69
  %657 = add i32 %656, %84
  %658 = sub i32 %657, %86
  %659 = add i32 %658, %97
  %660 = sub i32 %659, %100
  %661 = sub i32 %660, %107
  %662 = sub i32 %661, %109
  %663 = sub i32 %662, %126
  %664 = sub i32 %663, %145
  %665 = sub i32 %664, %168
  %666 = sub i32 %665, %171
  %667 = sub i32 %666, %181
  %668 = sub i32 %667, %185
  %669 = add i32 %668, %206
  %670 = sub i32 %669, %212
  %671 = sub i32 %670, %226
  %672 = sub i32 %671, %228
  %673 = add i32 %672, %229
  %674 = sub i32 %673, %232
  %675 = add i32 %674, %235
  %676 = sub i32 %675, %237
  %677 = sub i32 %676, %252
  %678 = sub i32 %677, %257
  %679 = sub i32 %678, %262
  %680 = sub i32 %679, %268
  %681 = add i32 %680, %273
  %682 = add i32 %681, %275
  %683 = add i32 %682, %279
  %684 = sub i32 %683, %281
  %685 = add i32 %684, %354
  %686 = sub i32 %685, %15
  %687 = add i32 %686, %400
  %688 = sub i32 %687, %402
  %689 = sub i32 %688, %198
  %690 = sub i32 %689, %318
  %691 = sub i32 %690, %282
  %692 = sub i32 %691, %290
  %693 = add i32 %692, %326
  %694 = add i32 %693, %338
  %695 = add i32 %694, %351
  %696 = add i32 %695, %319
  %697 = sub i32 %696, %366
  %698 = add i32 %697, %367
  %699 = sub i32 %698, %374
  %700 = add i32 %699, %383
  %701 = add i32 %700, %386
  %702 = add i32 %701, %387
  %703 = sub i32 %702, %393
  %704 = add i32 %703, %395
  %705 = sub i32 %704, %341
  %706 = sub i32 %705, %398
  %707 = add i32 %706, %401
  %708 = add i32 %707, %416
  %709 = sub i32 %708, %418
  %710 = sub i32 %709, %425
  %711 = add i32 %710, %427
  %712 = add i32 %711, %429
  %713 = sub i32 %712, %436
  %714 = add i32 %713, %298
  %715 = add i32 %714, %446
  %716 = sub i32 %715, %447
  %717 = sub i32 %716, %192
  %718 = add i32 %717, %284
  %719 = sub i32 %718, %289
  %720 = sub i32 %719, %296
  %721 = add i32 %720, %297
  %722 = sub i32 %721, %299
  %723 = add i32 %722, %306
  %724 = sub i32 %723, %310
  %725 = sub i32 %724, %314
  %726 = add i32 %725, %316
  %727 = sub i32 %726, %317
  %728 = add i32 %727, %320
  %729 = sub i32 %728, %321
  %730 = add i32 %729, %327
  %731 = sub i32 %730, %329
  %732 = add i32 %731, %330
  %733 = sub i32 %732, %334
  %734 = add i32 %733, %335
  %735 = sub i32 %734, %336
  %736 = sub i32 %735, %339
  %737 = add i32 %736, %340
  %738 = add i32 %737, %343
  %739 = sub i32 %738, %348
  %740 = sub i32 %739, %349
  %741 = sub i32 %740, %350
  %742 = add i32 %741, %352
  %743 = sub i32 %742, %355
  %744 = add i32 %743, %360
  %745 = add i32 %744, %364
  %746 = sub i32 %745, %365
  %747 = add i32 %746, %311
  %748 = add i32 %747, %369
  %749 = sub i32 %748, %373
  %750 = add i32 %749, %377
  %751 = sub i32 %750, %378
  %752 = add i32 %751, %379
  %753 = sub i32 %752, %382
  %754 = add i32 %753, %385
  %755 = sub i32 %754, %388
  %756 = sub i32 %755, %392
  %757 = sub i32 %756, %394
  %758 = sub i32 %757, %397
  %759 = add i32 %758, %399
  %760 = add i32 %759, %404
  %761 = sub i32 %760, %405
  %762 = add i32 %761, %406
  %763 = sub i32 %762, %408
  %764 = sub i32 %763, %409
  %765 = sub i32 %764, %410
  %766 = sub i32 %765, %411
  %767 = sub i32 %766, %413
  %768 = sub i32 %767, %414
  %769 = add i32 %768, %415
  %770 = add i32 %769, %417
  %771 = add i32 %770, %419
  %772 = sub i32 %771, %421
  %773 = add i32 %772, %422
  %774 = sub i32 %773, %423
  %775 = sub i32 %774, %426
  %776 = sub i32 %775, %428
  %777 = sub i32 %776, %430
  %778 = sub i32 %777, %431
  %779 = add i32 %778, %292
  %780 = sub i32 %779, %438
  %781 = sub i32 %780, %439
  %782 = sub i32 %781, %441
  %783 = add i32 %782, %442
  %784 = add i32 %783, %445
  %785 = add i32 %784, %452
  %786 = sub i32 %785, %294
  %787 = sub i32 %786, %302
  %788 = sub i32 %787, %312
  %789 = sub i32 %788, %323
  %790 = sub i32 %789, %347
  %791 = sub i32 %790, %362
  %792 = add i32 %791, %372
  %793 = sub i32 %792, %390
  %794 = sub i32 %793, %396
  %795 = sub i32 %794, %403
  %796 = sub i32 %795, %434
  %797 = sub i32 %796, %437
  %798 = sub i32 %797, %444
  %799 = add i32 %798, %450
  %800 = add i32 %799, %454
  %801 = add i32 %800, %456
  %802 = add i32 %801, %505
  %803 = add i32 %802, %507
  %804 = add i32 %803, %503
  %805 = add i32 %804, %500
  %806 = add i32 %805, %495
  %807 = add i32 %806, %488
  %808 = icmp eq i32 %20, %807
  %809 = select i1 %808, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %810 = tail call i32 @puts(i8* nonnull dereferenceable(1) %809)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
