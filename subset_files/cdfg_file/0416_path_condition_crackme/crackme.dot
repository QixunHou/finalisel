digraph "DFG for'crackme' function" {
	Node0xbf0460[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xbf0b10[shape=record, label="  %4 = sub i32 0, %3"];
	Node0xbf0bd0[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0xbf0c40[shape=record, label="  %6 = or i32 %1, %0"];
	Node0xbf0ce0[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0xbf0d80[shape=record, label="  %8 = xor i32 %1, 2147483647"];
	Node0xbf0df0[shape=record, label="  %9 = or i32 %8, %0"];
	Node0xbf0e60[shape=record, label="  %10 = and i32 %1, %0"];
	Node0xbf0ed0[shape=record, label="  %11 = or i32 %5, %1"];
	Node0xbf0f70[shape=record, label="  %12 = xor i32 %7, -2"];
	Node0xbf0fe0[shape=record, label="  %13 = shl i32 %9, 1"];
	Node0xbf1080[shape=record, label="  %14 = sub i32 5, %0"];
	Node0xbf10f0[shape=record, label="  %15 = add i32 %14, %3"];
	Node0xbf1160[shape=record, label="  %16 = add i32 %15, %10"];
	Node0xbf11d0[shape=record, label="  %17 = add i32 %16, %11"];
	Node0xbf1240[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xbf12b0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0xbf1320[shape=record, label="  %20 = add i32 %19, %12"];
	Node0xbf1390[shape=record, label="  %21 = icmp eq i32 %20, %4"];
	Node0xb91268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbf1830[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0xbf1880[shape=record, label="  ret void"];
	Node0xbf0460 -> Node0xbf0b10;
	Node0xbf0b10 -> Node0xbf0bd0;
	Node0xbf0bd0 -> Node0xbf0c40;
	Node0xbf0c40 -> Node0xbf0ce0;
	Node0xbf0ce0 -> Node0xbf0d80;
	Node0xbf0d80 -> Node0xbf0df0;
	Node0xbf0df0 -> Node0xbf0e60;
	Node0xbf0e60 -> Node0xbf0ed0;
	Node0xbf0ed0 -> Node0xbf0f70;
	Node0xbf0f70 -> Node0xbf0fe0;
	Node0xbf0fe0 -> Node0xbf1080;
	Node0xbf1080 -> Node0xbf10f0;
	Node0xbf10f0 -> Node0xbf1160;
	Node0xbf1160 -> Node0xbf11d0;
	Node0xbf11d0 -> Node0xbf1240;
	Node0xbf1240 -> Node0xbf12b0;
	Node0xbf12b0 -> Node0xbf1320;
	Node0xbf1320 -> Node0xbf1390;
	Node0xbf1390 -> Node0xb91268;
	Node0xb91268 -> Node0xbf1830;
	Node0xbf1830 -> Node0xbf1880;
edge [color=red]
	Node0xbf0460 -> Node0xbf0b10;
	Node0xbf0c40 -> Node0xbf0ce0;
	Node0xbf0d80 -> Node0xbf0df0;
	Node0xbf0bd0 -> Node0xbf0ed0;
	Node0xbf0ce0 -> Node0xbf0f70;
	Node0xbf0df0 -> Node0xbf0fe0;
	Node0xbf1080 -> Node0xbf10f0;
	Node0xbf0460 -> Node0xbf10f0;
	Node0xbf10f0 -> Node0xbf1160;
	Node0xbf0e60 -> Node0xbf1160;
	Node0xbf1160 -> Node0xbf11d0;
	Node0xbf0ed0 -> Node0xbf11d0;
	Node0xbf11d0 -> Node0xbf1240;
	Node0xbf0ce0 -> Node0xbf1240;
	Node0xbf1240 -> Node0xbf12b0;
	Node0xbf0fe0 -> Node0xbf12b0;
	Node0xbf12b0 -> Node0xbf1320;
	Node0xbf0f70 -> Node0xbf1320;
	Node0xbf1320 -> Node0xbf1390;
	Node0xbf0b10 -> Node0xbf1390;
	Node0xbf1390 -> Node0xb91268;
	Node0xb91268 -> Node0xbf1830;
}
