digraph "DFG for'crackme' function" {
	Node0xaeb5a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xaebc50[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xaebd10[shape=record, label="  %5 = or i32 %4, %0"];
	Node0xaebd80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xaebdf0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xaebe60[shape=record, label="  %8 = or i32 %1, %0"];
	Node0xaebed0[shape=record, label="  %9 = and i32 %4, %0"];
	Node0xaebf40[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xaebfb0[shape=record, label="  %11 = shl i32 %5, 2"];
	Node0xaec050[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0xaec0c0[shape=record, label="  %13 = shl i32 %9, 2"];
	Node0xaec130[shape=record, label="  %14 = shl i32 %6, 2"];
	Node0xaec1a0[shape=record, label="  %15 = add i32 %3, %8"];
	Node0xaec240[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0xaec2b0[shape=record, label="  %17 = add i32 %0, 2"];
	Node0xaec320[shape=record, label="  %18 = add i32 %17, %1"];
	Node0xaec390[shape=record, label="  %19 = sub i32 %18, %3"];
	Node0xaec400[shape=record, label="  %20 = add i32 %19, %5"];
	Node0xaec470[shape=record, label="  %21 = add i32 %20, %7"];
	Node0xaec4e0[shape=record, label="  %22 = add i32 %21, %10"];
	Node0xaec550[shape=record, label="  %23 = add i32 %22, %8"];
	Node0xaec5c0[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0xaec630[shape=record, label="  %25 = sub i32 %24, %14"];
	Node0xaec6a0[shape=record, label="  %26 = sub i32 %25, %12"];
	Node0xaec710[shape=record, label="  %27 = add i32 %26, %16"];
	Node0xaec780[shape=record, label="  %28 = icmp eq i32 %27, -1"];
	Node0xa8c268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xaecc20[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xaecc70[shape=record, label="  ret void"];
	Node0xaeb5a0 -> Node0xaebc50;
	Node0xaebc50 -> Node0xaebd10;
	Node0xaebd10 -> Node0xaebd80;
	Node0xaebd80 -> Node0xaebdf0;
	Node0xaebdf0 -> Node0xaebe60;
	Node0xaebe60 -> Node0xaebed0;
	Node0xaebed0 -> Node0xaebf40;
	Node0xaebf40 -> Node0xaebfb0;
	Node0xaebfb0 -> Node0xaec050;
	Node0xaec050 -> Node0xaec0c0;
	Node0xaec0c0 -> Node0xaec130;
	Node0xaec130 -> Node0xaec1a0;
	Node0xaec1a0 -> Node0xaec240;
	Node0xaec240 -> Node0xaec2b0;
	Node0xaec2b0 -> Node0xaec320;
	Node0xaec320 -> Node0xaec390;
	Node0xaec390 -> Node0xaec400;
	Node0xaec400 -> Node0xaec470;
	Node0xaec470 -> Node0xaec4e0;
	Node0xaec4e0 -> Node0xaec550;
	Node0xaec550 -> Node0xaec5c0;
	Node0xaec5c0 -> Node0xaec630;
	Node0xaec630 -> Node0xaec6a0;
	Node0xaec6a0 -> Node0xaec710;
	Node0xaec710 -> Node0xaec780;
	Node0xaec780 -> Node0xa8c268;
	Node0xa8c268 -> Node0xaecc20;
	Node0xaecc20 -> Node0xaecc70;
edge [color=red]
	Node0xaebc50 -> Node0xaebd10;
	Node0xaebd80 -> Node0xaebdf0;
	Node0xaebc50 -> Node0xaebed0;
	Node0xaebed0 -> Node0xaebf40;
	Node0xaebd10 -> Node0xaebfb0;
	Node0xaebfb0 -> Node0xaec050;
	Node0xaebed0 -> Node0xaec0c0;
	Node0xaebd80 -> Node0xaec130;
	Node0xaeb5a0 -> Node0xaec1a0;
	Node0xaebe60 -> Node0xaec1a0;
	Node0xaec1a0 -> Node0xaec240;
	Node0xaec2b0 -> Node0xaec320;
	Node0xaec320 -> Node0xaec390;
	Node0xaeb5a0 -> Node0xaec390;
	Node0xaec390 -> Node0xaec400;
	Node0xaebd10 -> Node0xaec400;
	Node0xaec400 -> Node0xaec470;
	Node0xaebdf0 -> Node0xaec470;
	Node0xaec470 -> Node0xaec4e0;
	Node0xaebf40 -> Node0xaec4e0;
	Node0xaec4e0 -> Node0xaec550;
	Node0xaebe60 -> Node0xaec550;
	Node0xaec550 -> Node0xaec5c0;
	Node0xaec0c0 -> Node0xaec5c0;
	Node0xaec5c0 -> Node0xaec630;
	Node0xaec130 -> Node0xaec630;
	Node0xaec630 -> Node0xaec6a0;
	Node0xaec050 -> Node0xaec6a0;
	Node0xaec6a0 -> Node0xaec710;
	Node0xaec240 -> Node0xaec710;
	Node0xaec710 -> Node0xaec780;
	Node0xaec780 -> Node0xa8c268;
	Node0xa8c268 -> Node0xaecc20;
}
