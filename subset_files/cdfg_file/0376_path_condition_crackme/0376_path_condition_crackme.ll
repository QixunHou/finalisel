; ModuleID = '../.././c_source_file/0376_path_condition_crackme.c'
source_filename = "../.././c_source_file/0376_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, %1
  %5 = and i32 %4, %0
  %6 = and i32 %2, %0
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = xor i32 %8, -1
  %10 = xor i32 %6, %9
  %11 = shl i32 %10, 1
  %12 = xor i32 %1, %0
  %13 = xor i32 %2, %0
  %14 = or i32 %13, %12
  %15 = and i32 %9, %0
  %16 = or i32 %12, %7
  %17 = and i32 %2, %1
  %18 = and i32 %17, %0
  %19 = or i32 %2, %1
  %20 = xor i32 %19, %0
  %21 = or i32 %18, %20
  %22 = or i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = or i32 %7, %23
  %25 = xor i32 %19, -1
  %26 = or i32 %6, %25
  %27 = and i32 %7, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %12, -1
  %30 = and i32 %28, %29
  %31 = or i32 %25, %0
  %32 = xor i32 %0, -1
  %33 = and i32 %4, %32
  %34 = xor i32 %18, -1
  %35 = xor i32 %33, %34
  %36 = and i32 %1, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %4, %37
  %39 = shl i32 %38, 1
  %40 = xor i32 %17, -1
  %41 = or i32 %40, %32
  %42 = or i32 %4, %36
  %43 = xor i32 %1, -1
  %44 = and i32 %43, %2
  %45 = and i32 %44, %32
  %46 = or i32 %43, %2
  %47 = and i32 %46, %0
  %48 = xor i32 %47, -1
  %49 = xor i32 %45, %48
  %50 = xor i32 %13, -1
  %51 = and i32 %50, %37
  %52 = xor i32 %27, %40
  %53 = or i32 %6, %23
  %54 = and i32 %44, %0
  %55 = xor i32 %46, 2147483647
  %56 = or i32 %55, %0
  %57 = xor i32 %56, %54
  %58 = shl i32 %57, 1
  %59 = or i32 %7, %0
  %60 = xor i32 %59, %1
  %61 = and i32 %7, %37
  %62 = and i32 %43, %0
  %63 = xor i32 %62, -1
  %64 = and i32 %4, %63
  %65 = xor i32 %17, %0
  %66 = or i32 %19, %32
  %67 = and i32 %13, %22
  %68 = or i32 %43, %0
  %69 = and i32 %68, %50
  %70 = and i32 %13, %37
  %71 = or i32 %50, %23
  %72 = xor i32 %36, %2
  %73 = xor i32 %4, -1
  %74 = and i32 %68, %73
  %75 = and i32 %12, %50
  %76 = and i32 %19, %32
  %77 = xor i32 %76, %34
  %78 = or i32 %23, %2
  %79 = xor i32 %6, -1
  %80 = and i32 %12, %79
  %81 = or i32 %12, %2
  %82 = xor i32 %68, -1
  %83 = or i32 %6, %43
  %84 = xor i32 %6, %1
  %85 = and i32 %50, %1
  %86 = and i32 %40, %32
  %87 = shl i32 %86, 1
  %88 = xor i32 %9, %0
  %89 = xor i32 %27, %1
  %90 = xor i32 %46, %0
  %91 = or i32 %54, %90
  %92 = and i32 %17, %32
  %93 = and i32 %19, %0
  %94 = xor i32 %92, -1
  %95 = xor i32 %93, %94
  %96 = or i32 %27, %1
  %97 = and i32 %37, %2
  %98 = or i32 %13, %62
  %99 = or i32 %7, %1
  %100 = or i32 %99, %32
  %101 = and i32 %29, %2
  %102 = or i32 %13, %1
  %103 = xor i32 %99, %0
  %104 = or i32 %7, %82
  %105 = xor i32 %59, -1
  %106 = or i32 %105, %1
  %107 = shl i32 %106, 1
  %108 = or i32 %29, %2
  %109 = or i32 %6, %82
  %110 = and i32 %79, %29
  %111 = and i32 %79, %43
  %112 = and i32 %73, %32
  %113 = or i32 %36, %25
  %114 = or i32 %25, %32
  %115 = xor i32 %99, -1
  %116 = or i32 %115, %32
  %117 = and i32 %73, %0
  %118 = or i32 %62, %2
  %119 = shl i32 %59, 1
  %120 = or i32 %13, %29
  %121 = shl i32 %9, 1
  %122 = and i32 %22, %7
  %123 = and i32 %68, %7
  %124 = or i32 %13, %43
  %125 = and i32 %12, %2
  %126 = and i32 %68, %2
  %127 = xor i32 %6, %22
  %128 = or i32 %4, %0
  %129 = xor i32 %54, %128
  %130 = shl i32 %129, 1
  %131 = xor i32 %37, %2
  %132 = shl i32 %131, 1
  %133 = xor i32 %105, %1
  %134 = or i32 %18, %76
  %135 = xor i32 %22, %2
  %136 = xor i32 %54, -1
  %137 = xor i32 %90, %136
  %138 = and i32 %4, %68
  %139 = and i32 %22, %73
  %140 = or i32 %8, %32
  %141 = xor i32 %28, %1
  %142 = add i32 %27, 1
  %143 = and i32 %12, %7
  %144 = or i32 %4, %32
  %145 = xor i32 %144, -1
  %146 = or i32 %45, %145
  %147 = and i32 %50, %63
  %148 = or i32 %2, %0
  %149 = xor i32 %148, -1
  %150 = or i32 %36, %149
  %151 = and i32 %13, %29
  %152 = or i32 %18, %33
  %153 = shl i32 %152, 1
  %154 = and i32 %63, %2
  %155 = or i32 %27, %115
  %156 = or i32 %73, %32
  %157 = xor i32 %4, %0
  %158 = xor i32 %18, %157
  %159 = or i32 %105, %29
  %160 = or i32 %50, %29
  %161 = or i32 %73, %82
  %162 = and i32 %50, %43
  %163 = or i32 %17, %0
  %164 = shl i32 %163, 1
  %165 = and i32 %59, %1
  %166 = and i32 %99, %0
  %167 = or i32 %17, %32
  %168 = or i32 %62, %73
  %169 = or i32 %13, %23
  %170 = xor i32 %157, %136
  %171 = and i32 %13, %68
  %172 = xor i32 %23, %2
  %173 = or i32 %17, %62
  %174 = xor i32 %128, -1
  %175 = or i32 %54, %174
  %176 = and i32 %59, %12
  %177 = xor i32 %115, %0
  %178 = xor i32 %27, %99
  %179 = or i32 %36, %7
  %180 = xor i32 %62, %40
  %181 = or i32 %6, %8
  %182 = xor i32 %62, %9
  %183 = or i32 %8, %62
  %184 = shl i32 %183, 1
  %185 = and i32 %7, %63
  %186 = and i32 %73, %63
  %187 = or i32 %7, %29
  %188 = and i32 %79, %1
  %189 = or i32 %36, %115
  %190 = shl i32 %189, 1
  %191 = add i32 %22, 1
  %192 = or i32 %27, %17
  %193 = xor i32 %148, %36
  %194 = or i32 %9, %32
  %195 = shl i32 %19, 1
  %196 = or i32 %45, %47
  %197 = or i32 %36, %73
  %198 = xor i32 %5, %94
  %199 = or i32 %105, %43
  %200 = or i32 %4, %82
  %201 = or i32 %82, %2
  %202 = add i32 %36, 1
  %203 = or i32 %92, %5
  %204 = and i32 %13, %63
  %205 = and i32 %99, %32
  %206 = or i32 %149, %29
  %207 = xor i32 %79, %1
  %208 = and i32 %28, %1
  %209 = or i32 %149, %1
  %210 = or i32 %36, %105
  %211 = or i32 %13, %82
  %212 = and i32 %9, %32
  %213 = and i32 %148, %1
  %214 = or i32 %6, %29
  %215 = or i32 %8, %0
  %216 = and i32 %7, %29
  %217 = shl i32 %216, 1
  %218 = shl i32 %6, 1
  %219 = add i32 %148, 1
  %220 = shl i32 %27, 1
  %221 = add i32 %6, 1
  %222 = or i32 %50, %1
  %223 = or i32 %99, %0
  %224 = or i32 %9, %0
  %225 = xor i32 %149, %1
  %226 = xor i32 %99, %36
  %227 = or i32 %62, %50
  %228 = shl i32 %227, 1
  %229 = and i32 %13, %43
  %230 = shl i32 %157, 1
  %231 = or i32 %50, %82
  %232 = shl i32 %50, 2
  %233 = xor i32 %45, %144
  %234 = xor i32 %6, %68
  %235 = shl i32 %234, 1
  %236 = or i32 %6, %1
  %237 = xor i32 %40, %0
  %238 = xor i32 %82, %2
  %239 = and i32 %13, %12
  %240 = or i32 %73, %0
  %241 = or i32 %27, %43
  %242 = add i32 %99, 1
  %243 = or i32 %54, %157
  %244 = or i32 %12, %105
  %245 = and i32 %40, %0
  %246 = and i32 %59, %29
  %247 = or i32 %12, %149
  %248 = or i32 %4, %62
  %249 = or i32 %149, %43
  %250 = or i32 %12, %50
  %251 = xor i32 %20, %34
  %252 = xor i32 %6, %19
  %253 = or i32 %115, %0
  %254 = shl i32 %253, 1
  %255 = xor i32 %68, %2
  %256 = xor i32 %62, %2
  %257 = or i32 %73, %23
  %258 = or i32 %50, %43
  %259 = shl i32 %258, 1
  %260 = and i32 %25, %32
  %261 = shl i32 %260, 3
  %262 = and i32 %8, %32
  %263 = and i32 %25, %0
  %264 = and i32 %8, %0
  %265 = mul i32 %264, -12
  %266 = and i32 %115, %32
  %267 = mul i32 %266, 13
  %268 = and i32 %115, %0
  %269 = mul i32 %268, 6
  %270 = mul i32 %18, 10
  %271 = add i32 %22, -1
  %272 = add i32 %271, %63
  %273 = add i32 %272, %104
  %274 = add i32 %273, %78
  %275 = add i32 %274, %257
  %276 = add i32 %275, %223
  %277 = add i32 %276, %193
  %278 = add i32 %277, %181
  %279 = add i32 %278, %161
  %280 = add i32 %279, %155
  %281 = add i32 %280, %31
  %282 = add i32 %281, %134
  %283 = shl i32 %282, 1
  %284 = sub i32 %2, %81
  %285 = sub i32 %284, %226
  %286 = add i32 %285, %263
  %287 = sub i32 %286, %205
  %288 = add i32 %287, %168
  %289 = add i32 %288, %138
  %290 = add i32 %289, %89
  %291 = mul i32 %290, 5
  %292 = sub i32 %185, %186
  %293 = add i32 %292, %151
  %294 = sub i32 %293, %175
  %295 = mul i32 %294, 3
  %296 = sub i32 %262, %92
  %297 = mul i32 %296, 17
  %298 = add i32 %36, -4
  %299 = add i32 %298, %82
  %300 = sub i32 %299, %62
  %301 = add i32 %300, %191
  %302 = add i32 %301, %202
  %303 = add i32 %302, %16
  %304 = sub i32 %303, %24
  %305 = add i32 %304, %61
  %306 = add i32 %305, %72
  %307 = sub i32 %306, %97
  %308 = add i32 %307, %101
  %309 = sub i32 %308, %108
  %310 = add i32 %309, %118
  %311 = sub i32 %310, %122
  %312 = add i32 %311, %123
  %313 = sub i32 %312, %125
  %314 = sub i32 %313, %126
  %315 = add i32 %314, %135
  %316 = add i32 %315, %13
  %317 = add i32 %316, %142
  %318 = add i32 %317, %143
  %319 = add i32 %318, %154
  %320 = add i32 %319, %4
  %321 = sub i32 %320, %172
  %322 = sub i32 %321, %179
  %323 = add i32 %322, %187
  %324 = add i32 %323, %201
  %325 = add i32 %324, %219
  %326 = add i32 %325, %221
  %327 = sub i32 %326, %238
  %328 = sub i32 %327, %148
  %329 = add i32 %328, %242
  %330 = add i32 %329, %255
  %331 = sub i32 %330, %256
  %332 = sub i32 %331, %14
  %333 = add i32 %332, %15
  %334 = add i32 %333, %26
  %335 = add i32 %334, %30
  %336 = sub i32 %335, %41
  %337 = sub i32 %336, %42
  %338 = add i32 %337, %51
  %339 = add i32 %338, %52
  %340 = sub i32 %339, %53
  %341 = add i32 %340, %60
  %342 = sub i32 %341, %64
  %343 = add i32 %342, %65
  %344 = sub i32 %343, %66
  %345 = sub i32 %344, %67
  %346 = sub i32 %345, %69
  %347 = sub i32 %346, %70
  %348 = sub i32 %347, %71
  %349 = add i32 %348, %33
  %350 = sub i32 %349, %74
  %351 = sub i32 %350, %75
  %352 = add i32 %351, %80
  %353 = sub i32 %352, %83
  %354 = add i32 %353, %84
  %355 = sub i32 %354, %85
  %356 = sub i32 %355, %88
  %357 = add i32 %356, %96
  %358 = add i32 %357, %98
  %359 = add i32 %358, %100
  %360 = sub i32 %359, %102
  %361 = add i32 %360, %103
  %362 = add i32 %361, %109
  %363 = sub i32 %362, %110
  %364 = sub i32 %363, %111
  %365 = add i32 %364, %112
  %366 = add i32 %365, %113
  %367 = add i32 %366, %114
  %368 = sub i32 %367, %116
  %369 = sub i32 %368, %117
  %370 = sub i32 %369, %119
  %371 = sub i32 %370, %120
  %372 = sub i32 %371, %121
  %373 = add i32 %372, %124
  %374 = add i32 %373, %127
  %375 = sub i32 %374, %132
  %376 = add i32 %375, %133
  %377 = add i32 %376, %139
  %378 = add i32 %377, %140
  %379 = add i32 %378, %141
  %380 = add i32 %379, %93
  %381 = add i32 %380, %147
  %382 = add i32 %381, %150
  %383 = add i32 %382, %156
  %384 = sub i32 %383, %159
  %385 = sub i32 %384, %160
  %386 = add i32 %385, %162
  %387 = sub i32 %386, %165
  %388 = add i32 %387, %166
  %389 = sub i32 %388, %167
  %390 = add i32 %389, %169
  %391 = sub i32 %390, %171
  %392 = add i32 %391, %173
  %393 = add i32 %392, %176
  %394 = sub i32 %393, %177
  %395 = add i32 %394, %178
  %396 = add i32 %395, %180
  %397 = add i32 %396, %182
  %398 = add i32 %397, %188
  %399 = sub i32 %398, %192
  %400 = sub i32 %399, %194
  %401 = sub i32 %400, %195
  %402 = sub i32 %401, %197
  %403 = add i32 %402, %199
  %404 = sub i32 %403, %200
  %405 = add i32 %404, %204
  %406 = add i32 %405, %206
  %407 = sub i32 %406, %207
  %408 = sub i32 %407, %208
  %409 = add i32 %408, %209
  %410 = sub i32 %409, %210
  %411 = add i32 %410, %211
  %412 = sub i32 %411, %212
  %413 = add i32 %412, %213
  %414 = add i32 %413, %214
  %415 = sub i32 %414, %215
  %416 = sub i32 %415, %217
  %417 = sub i32 %416, %218
  %418 = sub i32 %417, %220
  %419 = add i32 %418, %222
  %420 = sub i32 %419, %224
  %421 = add i32 %420, %225
  %422 = add i32 %421, %229
  %423 = sub i32 %422, %231
  %424 = sub i32 %423, %232
  %425 = add i32 %424, %236
  %426 = sub i32 %425, %237
  %427 = sub i32 %426, %239
  %428 = add i32 %427, %240
  %429 = sub i32 %428, %241
  %430 = sub i32 %429, %244
  %431 = add i32 %430, %245
  %432 = sub i32 %431, %246
  %433 = sub i32 %432, %247
  %434 = sub i32 %433, %248
  %435 = sub i32 %434, %249
  %436 = add i32 %435, %250
  %437 = sub i32 %436, %252
  %438 = add i32 %437, %11
  %439 = sub i32 %438, %21
  %440 = sub i32 %439, %35
  %441 = sub i32 %440, %39
  %442 = add i32 %441, %49
  %443 = add i32 %442, %77
  %444 = sub i32 %443, %87
  %445 = add i32 %444, %91
  %446 = sub i32 %445, %95
  %447 = sub i32 %446, %107
  %448 = sub i32 %447, %137
  %449 = sub i32 %448, %146
  %450 = add i32 %449, %158
  %451 = sub i32 %450, %164
  %452 = sub i32 %451, %170
  %453 = sub i32 %452, %184
  %454 = sub i32 %453, %190
  %455 = sub i32 %454, %196
  %456 = add i32 %455, %198
  %457 = add i32 %456, %203
  %458 = sub i32 %457, %228
  %459 = sub i32 %458, %230
  %460 = sub i32 %459, %233
  %461 = sub i32 %460, %235
  %462 = sub i32 %461, %243
  %463 = sub i32 %462, %251
  %464 = sub i32 %463, %254
  %465 = sub i32 %464, %259
  %466 = add i32 %465, %261
  %467 = add i32 %466, %265
  %468 = add i32 %467, %267
  %469 = add i32 %468, %269
  %470 = add i32 %469, %270
  %471 = sub i32 %470, %130
  %472 = sub i32 %471, %153
  %473 = add i32 %472, %297
  %474 = sub i32 %473, %58
  %475 = add i32 %474, %295
  %476 = add i32 %475, %291
  %477 = add i32 %476, %283
  %478 = icmp eq i32 %5, %477
  %479 = select i1 %478, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %480 = tail call i32 @puts(i8* nonnull dereferenceable(1) %479)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
