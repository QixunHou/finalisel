digraph "DFG for'main' function" {
	Node0x2005648[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x20056c8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x2005758[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x20057b8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x2005c38[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x2005d18[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x2005e18[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x2005ed8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x2005f88[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x20061e8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x20062a8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x2006408[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x2006468[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x200d730[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x200d918[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x200da78[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x200db88[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x200dc48[shape=record, label="  ret i32 0"];
	Node0x2005648 -> Node0x20056c8;
	Node0x20056c8 -> Node0x2005758;
	Node0x2005758 -> Node0x20057b8;
	Node0x20057b8 -> Node0x2005c38;
	Node0x2005c38 -> Node0x2005d18;
	Node0x2005d18 -> Node0x2005e18;
	Node0x2005e18 -> Node0x2005ed8;
	Node0x2005ed8 -> Node0x2005f88;
	Node0x2005f88 -> Node0x20061e8;
	Node0x20061e8 -> Node0x20062a8;
	Node0x20062a8 -> Node0x2006408;
	Node0x2006408 -> Node0x2006468;
	Node0x2006468 -> Node0x200d730;
	Node0x200d730 -> Node0x200d918;
	Node0x200d918 -> Node0x200da78;
	Node0x200da78 -> Node0x200db88;
	Node0x200db88 -> Node0x200dc48;
edge [color=red]
	Node0x2005648 -> Node0x20057b8;
	Node0x20057b8 -> Node0x2005c38;
	Node0x20056c8 -> Node0x2005d18;
	Node0x2005d18 -> Node0x2005e18;
	Node0x2005758 -> Node0x2005ed8;
	Node0x2005ed8 -> Node0x2005f88;
	Node0x2005648 -> Node0x20061e8;
	Node0x20056c8 -> Node0x20061e8;
	Node0x2005758 -> Node0x20061e8;
	Node0x2005648 -> Node0x20062a8;
	Node0x20056c8 -> Node0x2006408;
	Node0x2005758 -> Node0x2006468;
	Node0x20062a8 -> Node0x200d730;
	Node0x2006408 -> Node0x200d730;
	Node0x2006468 -> Node0x200d730;
	Node0x2005ed8 -> Node0x200d918;
	Node0x2005d18 -> Node0x200da78;
	Node0x20057b8 -> Node0x200db88;
}
