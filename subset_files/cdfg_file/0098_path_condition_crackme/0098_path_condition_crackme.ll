; ModuleID = '../.././c_source_file/0098_path_condition_crackme.c'
source_filename = "../.././c_source_file/0098_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = and i32 %2, %0
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %1
  %11 = or i32 %8, %10
  %12 = or i32 %1, %0
  %13 = xor i32 %2, %0
  %14 = and i32 %13, %12
  %15 = add i32 %14, %11
  %16 = sub i32 %7, %15
  %17 = and i32 %4, %3
  %18 = add i32 %17, 1
  %19 = xor i32 %4, -1
  %20 = and i32 %19, %3
  %21 = xor i32 %20, -1
  %22 = or i32 %4, %3
  %23 = shl i32 %22, 2
  %24 = shl i32 %6, 1
  %25 = xor i32 %24, -2
  %26 = or i32 %19, %3
  %27 = add i32 %4, 1
  %28 = xor i32 %22, -1
  %29 = xor i32 %26, -1
  %30 = mul i32 %20, 7
  %31 = and i32 %2, %1
  %32 = and i32 %31, %0
  %33 = xor i32 %0, -1
  %34 = xor i32 %2, %1
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %0
  %37 = xor i32 %32, %36
  %38 = xor i32 %1, -1
  %39 = and i32 %38, %2
  %40 = and i32 %39, %0
  %41 = xor i32 %34, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %40, %42
  %44 = xor i32 %10, -1
  %45 = or i32 %44, %0
  %46 = or i32 %38, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %2
  %49 = xor i32 %1, %0
  %50 = or i32 %13, %49
  %51 = shl i32 %50, 1
  %52 = xor i32 %49, -1
  %53 = or i32 %13, %52
  %54 = and i32 %31, %33
  %55 = or i32 %2, %1
  %56 = and i32 %55, %0
  %57 = xor i32 %56, -1
  %58 = xor i32 %54, %57
  %59 = or i32 %8, %38
  %60 = and i32 %34, %0
  %61 = or i32 %55, %0
  %62 = and i32 %1, %0
  %63 = xor i32 %55, -1
  %64 = or i32 %62, %63
  %65 = and i32 %38, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %66, %2
  %68 = and i32 %13, %52
  %69 = or i32 %9, %1
  %70 = xor i32 %69, %0
  %71 = and i32 %9, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %72, %1
  %74 = or i32 %13, %62
  %75 = xor i32 %8, %55
  %76 = or i32 %54, %60
  %77 = or i32 %8, %49
  %78 = xor i32 %8, -1
  %79 = or i32 %34, %0
  %80 = xor i32 %62, -1
  %81 = and i32 %80, %2
  %82 = xor i32 %44, %0
  %83 = or i32 %8, %47
  %84 = xor i32 %62, %2
  %85 = or i32 %44, %33
  %86 = or i32 %13, %65
  %87 = xor i32 %40, %79
  %88 = and i32 %39, %33
  %89 = or i32 %38, %2
  %90 = and i32 %89, %0
  %91 = xor i32 %90, -1
  %92 = xor i32 %88, %91
  %93 = or i32 %71, %52
  %94 = or i32 %13, %1
  %95 = xor i32 %69, %62
  %96 = or i32 %9, %0
  %97 = xor i32 %96, -1
  %98 = or i32 %49, %97
  %99 = shl i32 %98, 1
  %100 = and i32 %35, %80
  %101 = or i32 %49, %9
  %102 = xor i32 %31, -1
  %103 = or i32 %102, %33
  %104 = or i32 %62, %97
  %105 = and i32 %13, %46
  %106 = or i32 %97, %38
  %107 = xor i32 %55, %0
  %108 = or i32 %31, %65
  %109 = xor i32 %13, -1
  %110 = or i32 %109, %52
  %111 = or i32 %65, %109
  %112 = or i32 %69, %33
  %113 = or i32 %71, %31
  %114 = shl i32 %66, 1
  %115 = xor i32 %96, %62
  %116 = or i32 %109, %38
  %117 = or i32 %40, %41
  %118 = and i32 %55, %33
  %119 = xor i32 %118, 2147483647
  %120 = xor i32 %119, %32
  %121 = shl i32 %120, 1
  %122 = xor i32 %12, -1
  %123 = or i32 %109, %122
  %124 = or i32 %34, %33
  %125 = or i32 %10, %0
  %126 = or i32 %52, %2
  %127 = and i32 %78, %52
  %128 = and i32 %96, %1
  %129 = and i32 %13, %49
  %130 = xor i32 %69, -1
  %131 = or i32 %130, %0
  %132 = or i32 %2, %0
  %133 = xor i32 %132, %62
  %134 = xor i32 %132, %1
  %135 = xor i32 %71, %69
  %136 = and i32 %9, %52
  %137 = add i32 %13, 1
  %138 = and i32 %35, %66
  %139 = xor i32 %8, %1
  %140 = and i32 %109, %1
  %141 = or i32 %97, %52
  %142 = and i32 %9, %80
  %143 = and i32 %34, %12
  %144 = xor i32 %8, %44
  %145 = xor i32 %79, -1
  %146 = or i32 %40, %145
  %147 = and i32 %46, %109
  %148 = or i32 %35, %122
  %149 = or i32 %62, %2
  %150 = shl i32 %149, 1
  %151 = shl i32 %80, 1
  %152 = or i32 %71, %38
  %153 = and i32 %13, %80
  %154 = and i32 %49, %78
  %155 = xor i32 %89, %0
  %156 = or i32 %40, %155
  %157 = xor i32 %132, -1
  %158 = or i32 %157, %38
  %159 = or i32 %49, %2
  %160 = and i32 %132, %49
  %161 = and i32 %12, %2
  %162 = or i32 %34, %65
  %163 = or i32 %69, %0
  %164 = or i32 %34, %47
  %165 = shl i32 %164, 1
  %166 = or i32 %63, %33
  %167 = or i32 %65, %9
  %168 = or i32 %13, %122
  %169 = and i32 %35, %33
  %170 = and i32 %96, %38
  %171 = and i32 %109, %80
  %172 = xor i32 %65, %44
  %173 = xor i32 %96, %1
  %174 = xor i32 %89, -1
  %175 = or i32 %174, %0
  %176 = xor i32 %40, %175
  %177 = and i32 %96, %49
  %178 = or i32 %9, %52
  %179 = and i32 %132, %1
  %180 = and i32 %49, %2
  %181 = or i32 %55, %33
  %182 = and i32 %72, %52
  %183 = and i32 %109, %66
  %184 = and i32 %12, %35
  %185 = and i32 %46, %35
  %186 = and i32 %12, %109
  %187 = add i32 %132, 1
  %188 = xor i32 %65, %102
  %189 = and i32 %63, %33
  %190 = shl i32 %189, 3
  %191 = and i32 %63, %0
  %192 = and i32 %130, %33
  %193 = mul i32 %192, -15
  %194 = and i32 %130, %0
  %195 = mul i32 %32, -13
  %196 = add i32 %102, %52
  %197 = add i32 %196, %161
  %198 = add i32 %197, %188
  %199 = add i32 %198, %173
  %200 = add i32 %199, %169
  %201 = add i32 %200, %41
  %202 = add i32 %201, %123
  %203 = add i32 %202, %108
  %204 = add i32 %203, %83
  %205 = add i32 %204, %74
  %206 = add i32 %205, %68
  %207 = add i32 %206, %18
  %208 = shl i32 %207, 1
  %209 = add i32 %10, %28
  %210 = add i32 %209, %17
  %211 = mul i32 %210, 6
  %212 = sub i32 %168, %178
  %213 = sub i32 %212, %191
  %214 = mul i32 %213, 3
  %215 = add i32 %148, %38
  %216 = add i32 %215, %29
  %217 = mul i32 %216, 5
  %218 = sub i32 2, %1
  %219 = sub i32 %218, %49
  %220 = sub i32 %219, %62
  %221 = add i32 %220, %3
  %222 = add i32 %221, %48
  %223 = add i32 %222, %67
  %224 = add i32 %223, %10
  %225 = add i32 %224, %78
  %226 = add i32 %225, %81
  %227 = sub i32 %226, %84
  %228 = sub i32 %227, %101
  %229 = add i32 %228, %69
  %230 = sub i32 %229, %114
  %231 = add i32 %230, %97
  %232 = sub i32 %231, %96
  %233 = add i32 %232, %126
  %234 = sub i32 %233, %136
  %235 = add i32 %234, %137
  %236 = sub i32 %235, %142
  %237 = sub i32 %236, %151
  %238 = sub i32 %237, %159
  %239 = sub i32 %238, %167
  %240 = sub i32 %239, %13
  %241 = add i32 %240, %71
  %242 = sub i32 %241, %180
  %243 = sub i32 %242, %55
  %244 = add i32 %243, %187
  %245 = add i32 %244, %27
  %246 = add i32 %245, %45
  %247 = add i32 %246, %53
  %248 = add i32 %247, %59
  %249 = sub i32 %248, %60
  %250 = add i32 %249, %61
  %251 = sub i32 %250, %64
  %252 = sub i32 %251, %36
  %253 = add i32 %252, %70
  %254 = add i32 %253, %73
  %255 = add i32 %254, %75
  %256 = sub i32 %255, %77
  %257 = add i32 %256, %79
  %258 = sub i32 %257, %82
  %259 = add i32 %258, %85
  %260 = sub i32 %259, %86
  %261 = add i32 %260, %93
  %262 = add i32 %261, %94
  %263 = sub i32 %262, %95
  %264 = sub i32 %263, %100
  %265 = sub i32 %264, %103
  %266 = sub i32 %265, %104
  %267 = sub i32 %266, %105
  %268 = sub i32 %267, %106
  %269 = sub i32 %268, %107
  %270 = add i32 %269, %110
  %271 = add i32 %270, %111
  %272 = sub i32 %271, %112
  %273 = sub i32 %272, %113
  %274 = sub i32 %273, %115
  %275 = add i32 %274, %116
  %276 = sub i32 %275, %124
  %277 = sub i32 %276, %125
  %278 = sub i32 %277, %127
  %279 = add i32 %278, %128
  %280 = sub i32 %279, %129
  %281 = add i32 %280, %131
  %282 = sub i32 %281, %133
  %283 = add i32 %282, %134
  %284 = add i32 %283, %135
  %285 = sub i32 %284, %138
  %286 = sub i32 %285, %139
  %287 = sub i32 %286, %140
  %288 = sub i32 %287, %141
  %289 = add i32 %288, %143
  %290 = sub i32 %289, %144
  %291 = add i32 %290, %147
  %292 = sub i32 %291, %150
  %293 = sub i32 %292, %152
  %294 = add i32 %293, %153
  %295 = add i32 %294, %154
  %296 = add i32 %295, %158
  %297 = add i32 %296, %160
  %298 = add i32 %297, %162
  %299 = add i32 %298, %163
  %300 = sub i32 %299, %166
  %301 = add i32 %300, %118
  %302 = sub i32 %301, %170
  %303 = sub i32 %302, %171
  %304 = add i32 %303, %172
  %305 = sub i32 %304, %177
  %306 = add i32 %305, %179
  %307 = add i32 %306, %181
  %308 = add i32 %307, %182
  %309 = sub i32 %308, %183
  %310 = add i32 %309, %184
  %311 = sub i32 %310, %185
  %312 = sub i32 %311, %186
  %313 = add i32 %312, %194
  %314 = add i32 %313, %21
  %315 = sub i32 %314, %26
  %316 = add i32 %315, %37
  %317 = sub i32 %316, %43
  %318 = sub i32 %317, %51
  %319 = add i32 %318, %58
  %320 = sub i32 %319, %76
  %321 = sub i32 %320, %87
  %322 = add i32 %321, %92
  %323 = sub i32 %322, %99
  %324 = sub i32 %323, %117
  %325 = sub i32 %324, %146
  %326 = sub i32 %325, %156
  %327 = sub i32 %326, %165
  %328 = sub i32 %327, %176
  %329 = sub i32 %328, %190
  %330 = add i32 %329, %193
  %331 = add i32 %330, %195
  %332 = sub i32 %331, %23
  %333 = add i32 %332, %30
  %334 = sub i32 %333, %25
  %335 = sub i32 %334, %121
  %336 = add i32 %335, %214
  %337 = add i32 %336, %217
  %338 = add i32 %337, %211
  %339 = add i32 %338, %208
  %340 = icmp eq i32 %16, %339
  %341 = select i1 %340, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %342 = tail call i32 @puts(i8* nonnull dereferenceable(1) %341)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
