digraph "DFG for'crackme' function" {
	Node0x1ba2bb0[shape=record, label="  %5 = or i32 %3, %0"];
	Node0x1ba3230[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1ba32a0[shape=record, label="  %7 = xor i32 %2, -1"];
	Node0x1ba3310[shape=record, label="  %8 = or i32 %2, %1"];
	Node0x1ba3380[shape=record, label="  %9 = xor i32 %7, %1"];
	Node0x1ba33f0[shape=record, label="  %10 = and i32 %2, %1"];
	Node0x1ba3460[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1ba34d0[shape=record, label="  %12 = or i32 %7, %1"];
	Node0x1ba3570[shape=record, label="  %13 = shl i32 %1, 1"];
	Node0x1ba3610[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x1ba3680[shape=record, label="  %15 = shl i32 %8, 1"];
	Node0x1ba36f0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x1ba3760[shape=record, label="  %17 = xor i32 %12, -1"];
	Node0x1ba3800[shape=record, label="  %18 = mul i32 %17, -6"];
	Node0x1ba38a0[shape=record, label="  %19 = mul i32 %10, -3"];
	Node0x1ba3910[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x1ba39b0[shape=record, label="  %21 = xor i32 %0, 2147483647"];
	Node0x1ba3a20[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x1ba3a90[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x1ba3b00[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x1ba3b70[shape=record, label="  %25 = shl i32 %5, 1"];
	Node0x1ba3be0[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x1ba3c50[shape=record, label="  %27 = xor i32 %3, -1"];
	Node0x1ba3cc0[shape=record, label="  %28 = and i32 %27, %0"];
	Node0x1ba3d30[shape=record, label="  %29 = sub i32 %2, %20"];
	Node0x1ba3da0[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x1ba3e10[shape=record, label="  %31 = shl i32 %0, 1"];
	Node0x1ba3e80[shape=record, label="  %32 = sub i32 %2, %31"];
	Node0x1ba4100[shape=record, label="  %33 = add i32 %32, %8"];
	Node0x1ba4170[shape=record, label="  %34 = add i32 %33, %9"];
	Node0x1ba41e0[shape=record, label="  %35 = add i32 %34, %11"];
	Node0x1ba4250[shape=record, label="  %36 = sub i32 %35, %12"];
	Node0x1ba42c0[shape=record, label="  %37 = add i32 %36, %14"];
	Node0x1ba4330[shape=record, label="  %38 = sub i32 %37, %3"];
	Node0x1ba43a0[shape=record, label="  %39 = add i32 %38, %18"];
	Node0x1ba4410[shape=record, label="  %40 = add i32 %39, %19"];
	Node0x1ba4480[shape=record, label="  %41 = add i32 %40, %28"];
	Node0x1ba44f0[shape=record, label="  %42 = sub i32 %41, %16"];
	Node0x1ba4560[shape=record, label="  %43 = add i32 %42, %23"];
	Node0x1ba45d0[shape=record, label="  %44 = add i32 %43, %24"];
	Node0x1ba4640[shape=record, label="  %45 = sub i32 %44, %26"];
	Node0x1ba46b0[shape=record, label="  %46 = add i32 %45, %30"];
	Node0x1ba4720[shape=record, label="  %47 = icmp eq i32 %46, %6"];
	Node0x1b43268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ba4bc0[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0x1ba4c10[shape=record, label="  ret void"];
	Node0x1ba2bb0 -> Node0x1ba3230;
	Node0x1ba3230 -> Node0x1ba32a0;
	Node0x1ba32a0 -> Node0x1ba3310;
	Node0x1ba3310 -> Node0x1ba3380;
	Node0x1ba3380 -> Node0x1ba33f0;
	Node0x1ba33f0 -> Node0x1ba3460;
	Node0x1ba3460 -> Node0x1ba34d0;
	Node0x1ba34d0 -> Node0x1ba3570;
	Node0x1ba3570 -> Node0x1ba3610;
	Node0x1ba3610 -> Node0x1ba3680;
	Node0x1ba3680 -> Node0x1ba36f0;
	Node0x1ba36f0 -> Node0x1ba3760;
	Node0x1ba3760 -> Node0x1ba3800;
	Node0x1ba3800 -> Node0x1ba38a0;
	Node0x1ba38a0 -> Node0x1ba3910;
	Node0x1ba3910 -> Node0x1ba39b0;
	Node0x1ba39b0 -> Node0x1ba3a20;
	Node0x1ba3a20 -> Node0x1ba3a90;
	Node0x1ba3a90 -> Node0x1ba3b00;
	Node0x1ba3b00 -> Node0x1ba3b70;
	Node0x1ba3b70 -> Node0x1ba3be0;
	Node0x1ba3be0 -> Node0x1ba3c50;
	Node0x1ba3c50 -> Node0x1ba3cc0;
	Node0x1ba3cc0 -> Node0x1ba3d30;
	Node0x1ba3d30 -> Node0x1ba3da0;
	Node0x1ba3da0 -> Node0x1ba3e10;
	Node0x1ba3e10 -> Node0x1ba3e80;
	Node0x1ba3e80 -> Node0x1ba4100;
	Node0x1ba4100 -> Node0x1ba4170;
	Node0x1ba4170 -> Node0x1ba41e0;
	Node0x1ba41e0 -> Node0x1ba4250;
	Node0x1ba4250 -> Node0x1ba42c0;
	Node0x1ba42c0 -> Node0x1ba4330;
	Node0x1ba4330 -> Node0x1ba43a0;
	Node0x1ba43a0 -> Node0x1ba4410;
	Node0x1ba4410 -> Node0x1ba4480;
	Node0x1ba4480 -> Node0x1ba44f0;
	Node0x1ba44f0 -> Node0x1ba4560;
	Node0x1ba4560 -> Node0x1ba45d0;
	Node0x1ba45d0 -> Node0x1ba4640;
	Node0x1ba4640 -> Node0x1ba46b0;
	Node0x1ba46b0 -> Node0x1ba4720;
	Node0x1ba4720 -> Node0x1b43268;
	Node0x1b43268 -> Node0x1ba4bc0;
	Node0x1ba4bc0 -> Node0x1ba4c10;
edge [color=red]
	Node0x1ba2bb0 -> Node0x1ba3230;
	Node0x1ba32a0 -> Node0x1ba3380;
	Node0x1ba33f0 -> Node0x1ba3460;
	Node0x1ba32a0 -> Node0x1ba34d0;
	Node0x1ba3570 -> Node0x1ba3610;
	Node0x1ba3310 -> Node0x1ba3680;
	Node0x1ba3680 -> Node0x1ba36f0;
	Node0x1ba34d0 -> Node0x1ba3760;
	Node0x1ba3760 -> Node0x1ba3800;
	Node0x1ba33f0 -> Node0x1ba38a0;
	Node0x1ba39b0 -> Node0x1ba3a20;
	Node0x1ba3a20 -> Node0x1ba3a90;
	Node0x1ba3a90 -> Node0x1ba3b00;
	Node0x1ba2bb0 -> Node0x1ba3b70;
	Node0x1ba3b70 -> Node0x1ba3be0;
	Node0x1ba3c50 -> Node0x1ba3cc0;
	Node0x1ba3910 -> Node0x1ba3d30;
	Node0x1ba3d30 -> Node0x1ba3da0;
	Node0x1ba3e10 -> Node0x1ba3e80;
	Node0x1ba3e80 -> Node0x1ba4100;
	Node0x1ba3310 -> Node0x1ba4100;
	Node0x1ba4100 -> Node0x1ba4170;
	Node0x1ba3380 -> Node0x1ba4170;
	Node0x1ba4170 -> Node0x1ba41e0;
	Node0x1ba3460 -> Node0x1ba41e0;
	Node0x1ba41e0 -> Node0x1ba4250;
	Node0x1ba34d0 -> Node0x1ba4250;
	Node0x1ba4250 -> Node0x1ba42c0;
	Node0x1ba3610 -> Node0x1ba42c0;
	Node0x1ba42c0 -> Node0x1ba4330;
	Node0x1ba4330 -> Node0x1ba43a0;
	Node0x1ba3800 -> Node0x1ba43a0;
	Node0x1ba43a0 -> Node0x1ba4410;
	Node0x1ba38a0 -> Node0x1ba4410;
	Node0x1ba4410 -> Node0x1ba4480;
	Node0x1ba3cc0 -> Node0x1ba4480;
	Node0x1ba4480 -> Node0x1ba44f0;
	Node0x1ba36f0 -> Node0x1ba44f0;
	Node0x1ba44f0 -> Node0x1ba4560;
	Node0x1ba3a90 -> Node0x1ba4560;
	Node0x1ba4560 -> Node0x1ba45d0;
	Node0x1ba3b00 -> Node0x1ba45d0;
	Node0x1ba45d0 -> Node0x1ba4640;
	Node0x1ba3be0 -> Node0x1ba4640;
	Node0x1ba4640 -> Node0x1ba46b0;
	Node0x1ba3da0 -> Node0x1ba46b0;
	Node0x1ba46b0 -> Node0x1ba4720;
	Node0x1ba3230 -> Node0x1ba4720;
	Node0x1ba4720 -> Node0x1b43268;
	Node0x1b43268 -> Node0x1ba4bc0;
}
