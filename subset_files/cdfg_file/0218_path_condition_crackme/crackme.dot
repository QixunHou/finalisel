digraph "DFG for'crackme' function" {
	Node0x1051b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1051b90[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1051c50[shape=record, label="  %5 = mul i32 %4, -3"];
	Node0x1051cc0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x1051d30[shape=record, label="  %7 = and i32 %6, %1"];
	Node0x1051dd0[shape=record, label="  %8 = shl i32 %7, 2"];
	Node0x1051e40[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x1051eb0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1051f20[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1051fc0[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x1052030[shape=record, label="  %13 = xor i32 %9, -1"];
	Node0x10520a0[shape=record, label="  %14 = or i32 %6, %1"];
	Node0x1052110[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x1052180[shape=record, label="  %16 = add i32 %0, %1"];
	Node0x10521f0[shape=record, label="  %17 = add i32 %16, 3"];
	Node0x1052260[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0x10522d0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x1052340[shape=record, label="  %20 = sub i32 %19, %14"];
	Node0x10523b0[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x1052420[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x1052490[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x1052500[shape=record, label="  %24 = icmp eq i32 %5, %23"];
	Node0xff2268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10529a0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x10529f0[shape=record, label="  ret void"];
	Node0x1051b20 -> Node0x1051b90;
	Node0x1051b90 -> Node0x1051c50;
	Node0x1051c50 -> Node0x1051cc0;
	Node0x1051cc0 -> Node0x1051d30;
	Node0x1051d30 -> Node0x1051dd0;
	Node0x1051dd0 -> Node0x1051e40;
	Node0x1051e40 -> Node0x1051eb0;
	Node0x1051eb0 -> Node0x1051f20;
	Node0x1051f20 -> Node0x1051fc0;
	Node0x1051fc0 -> Node0x1052030;
	Node0x1052030 -> Node0x10520a0;
	Node0x10520a0 -> Node0x1052110;
	Node0x1052110 -> Node0x1052180;
	Node0x1052180 -> Node0x10521f0;
	Node0x10521f0 -> Node0x1052260;
	Node0x1052260 -> Node0x10522d0;
	Node0x10522d0 -> Node0x1052340;
	Node0x1052340 -> Node0x10523b0;
	Node0x10523b0 -> Node0x1052420;
	Node0x1052420 -> Node0x1052490;
	Node0x1052490 -> Node0x1052500;
	Node0x1052500 -> Node0xff2268;
	Node0xff2268 -> Node0x10529a0;
	Node0x10529a0 -> Node0x10529f0;
edge [color=red]
	Node0x1051b20 -> Node0x1051b90;
	Node0x1051b90 -> Node0x1051c50;
	Node0x1051cc0 -> Node0x1051d30;
	Node0x1051d30 -> Node0x1051dd0;
	Node0x1051eb0 -> Node0x1051f20;
	Node0x1051f20 -> Node0x1051fc0;
	Node0x1051e40 -> Node0x1052030;
	Node0x1051cc0 -> Node0x10520a0;
	Node0x1052180 -> Node0x10521f0;
	Node0x10521f0 -> Node0x1052260;
	Node0x1051e40 -> Node0x1052260;
	Node0x1052260 -> Node0x10522d0;
	Node0x1052030 -> Node0x10522d0;
	Node0x10522d0 -> Node0x1052340;
	Node0x10520a0 -> Node0x1052340;
	Node0x1052340 -> Node0x10523b0;
	Node0x1052110 -> Node0x10523b0;
	Node0x10523b0 -> Node0x1052420;
	Node0x1051dd0 -> Node0x1052420;
	Node0x1052420 -> Node0x1052490;
	Node0x1051fc0 -> Node0x1052490;
	Node0x1051c50 -> Node0x1052500;
	Node0x1052490 -> Node0x1052500;
	Node0x1052500 -> Node0xff2268;
	Node0xff2268 -> Node0x10529a0;
}
