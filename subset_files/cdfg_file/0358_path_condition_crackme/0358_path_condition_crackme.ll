; ModuleID = '../.././c_source_file/0358_path_condition_crackme.c'
source_filename = "../.././c_source_file/0358_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = or i32 %8, %7
  %10 = and i32 %4, %3
  %11 = or i32 %10, %5
  %12 = add i32 %11, %9
  %13 = sub i32 0, %12
  %14 = xor i32 %2, -1
  %15 = xor i32 %0, -1
  %16 = or i32 %15, %1
  %17 = and i32 %16, %14
  %18 = and i32 %14, %1
  %19 = add i32 %18, 1
  %20 = xor i32 %1, %0
  %21 = and i32 %15, %1
  %22 = or i32 %21, %14
  %23 = or i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = and i32 %24, %15
  %26 = and i32 %18, %15
  %27 = and i32 %24, %0
  %28 = and i32 %18, %0
  %29 = shl i32 %28, 1
  %30 = xor i32 %1, -1
  %31 = and i32 %30, %2
  %32 = and i32 %31, %15
  %33 = and i32 %2, %1
  %34 = and i32 %33, %15
  %35 = and i32 %31, %0
  %36 = and i32 %33, %0
  %37 = xor i32 %5, -1
  %38 = or i32 %37, %4
  %39 = xor i32 %38, -1
  %40 = or i32 %10, %39
  %41 = xor i32 %3, -1
  %42 = and i32 %41, %4
  %43 = and i32 %37, %3
  %44 = or i32 %43, %42
  %45 = xor i32 %5, %4
  %46 = xor i32 %45, -1
  %47 = and i32 %46, %41
  %48 = and i32 %5, %3
  %49 = xor i32 %48, -1
  %50 = and i32 %46, %3
  %51 = or i32 %43, %4
  %52 = or i32 %5, %3
  %53 = xor i32 %52, -1
  %54 = xor i32 %53, %4
  %55 = and i32 %5, %4
  %56 = xor i32 %55, -1
  %57 = and i32 %56, %41
  %58 = xor i32 %4, %3
  %59 = xor i32 %58, -1
  %60 = or i32 %45, %59
  %61 = or i32 %5, %4
  %62 = xor i32 %61, %10
  %63 = xor i32 %55, %52
  %64 = or i32 %41, %4
  %65 = xor i32 %5, %3
  %66 = xor i32 %65, -1
  %67 = and i32 %64, %66
  %68 = shl i32 %67, 1
  %69 = and i32 %37, %4
  %70 = or i32 %69, %59
  %71 = xor i32 %42, -1
  %72 = and i32 %37, %71
  %73 = and i32 %58, %5
  %74 = shl i32 %73, 1
  %75 = and i32 %48, %4
  %76 = xor i32 %4, -1
  %77 = and i32 %65, %76
  %78 = xor i32 %75, -1
  %79 = xor i32 %77, %78
  %80 = or i32 %66, %76
  %81 = shl i32 %80, 1
  %82 = xor i32 %10, -1
  %83 = xor i32 %82, %5
  %84 = or i32 %55, %43
  %85 = shl i32 %84, 1
  %86 = or i32 %58, %46
  %87 = and i32 %66, %76
  %88 = xor i32 %64, -1
  %89 = or i32 %66, %88
  %90 = shl i32 %89, 1
  %91 = or i32 %37, %88
  %92 = and i32 %45, %71
  %93 = xor i32 %64, %5
  %94 = xor i32 %55, %3
  %95 = or i32 %37, %3
  %96 = xor i32 %95, -1
  %97 = or i32 %96, %4
  %98 = and i32 %48, %76
  %99 = and i32 %65, %4
  %100 = xor i32 %99, -1
  %101 = xor i32 %98, %100
  %102 = or i32 %45, %42
  %103 = or i32 %4, %3
  %104 = and i32 %103, %37
  %105 = or i32 %58, %5
  %106 = or i32 %39, %59
  %107 = xor i32 %43, -1
  %108 = or i32 %69, %96
  %109 = or i32 %66, %4
  %110 = or i32 %55, %88
  %111 = or i32 %45, %3
  %112 = or i32 %52, %4
  %113 = and i32 %107, %76
  %114 = or i32 %53, %76
  %115 = or i32 %46, %3
  %116 = or i32 %45, %88
  %117 = and i32 %95, %4
  %118 = and i32 %52, %76
  %119 = or i32 %53, %4
  %120 = xor i32 %69, %95
  %121 = xor i32 %52, %10
  %122 = or i32 %58, %37
  %123 = xor i32 %103, -1
  %124 = or i32 %45, %123
  %125 = and i32 %58, %56
  %126 = or i32 %10, %37
  %127 = and i32 %65, %64
  %128 = or i32 %37, %123
  %129 = or i32 %48, %4
  %130 = and i32 %61, %58
  %131 = or i32 %75, %118
  %132 = or i32 %46, %41
  %133 = or i32 %88, %5
  %134 = or i32 %69, %48
  %135 = and i32 %95, %76
  %136 = and i32 %52, %4
  %137 = xor i32 %42, %49
  %138 = or i32 %55, %123
  %139 = xor i32 %61, -1
  %140 = or i32 %139, %41
  %141 = and i32 %38, %3
  %142 = or i32 %42, %66
  %143 = and i32 %46, %71
  %144 = or i32 %37, %59
  %145 = shl i32 %144, 1
  %146 = and i32 %38, %59
  %147 = or i32 %69, %3
  %148 = xor i32 %69, -1
  %149 = and i32 %148, %59
  %150 = or i32 %58, %139
  %151 = and i32 %107, %4
  %152 = add i32 %58, 1
  %153 = add i32 %42, 1
  %154 = or i32 %65, %88
  %155 = and i32 %49, %76
  %156 = xor i32 %42, %5
  %157 = xor i32 %123, %5
  %158 = or i32 %139, %59
  %159 = or i32 %46, %59
  %160 = and i32 %46, %82
  %161 = xor i32 %10, %5
  %162 = and i32 %37, %82
  %163 = and i32 %61, %41
  %164 = xor i32 %42, %107
  %165 = or i32 %48, %76
  %166 = and i32 %45, %103
  %167 = xor i32 %139, %3
  %168 = or i32 %49, %4
  %169 = and i32 %45, %3
  %170 = add i32 %45, 1
  %171 = xor i32 %61, %3
  %172 = and i32 %41, %5
  %173 = and i32 %172, %76
  %174 = or i32 %41, %5
  %175 = and i32 %174, %4
  %176 = or i32 %173, %175
  %177 = shl i32 %176, 1
  %178 = or i32 %65, %76
  %179 = xor i32 %178, -1
  %180 = or i32 %173, %179
  %181 = and i32 %56, %59
  %182 = or i32 %48, %42
  %183 = or i32 %96, %76
  %184 = and i32 %38, %41
  %185 = or i32 %98, %99
  %186 = or i32 %123, %5
  %187 = or i32 %42, %5
  %188 = or i32 %45, %10
  %189 = xor i32 %43, %4
  %190 = or i32 %43, %76
  %191 = and i32 %61, %59
  %192 = or i32 %55, %3
  %193 = and i32 %65, %82
  %194 = shl i32 %42, 1
  %195 = xor i32 %55, %103
  %196 = and i32 %64, %5
  %197 = and i32 %172, %4
  %198 = xor i32 %174, %4
  %199 = or i32 %197, %198
  %200 = or i32 %65, %4
  %201 = or i32 %75, %77
  %202 = or i32 %55, %53
  %203 = and i32 %66, %4
  %204 = or i32 %55, %41
  %205 = xor i32 %48, %4
  %206 = or i32 %45, %58
  %207 = xor i32 %38, %3
  %208 = and i32 %82, %5
  %209 = xor i32 %69, %49
  %210 = or i32 %46, %123
  %211 = xor i32 %49, %4
  %212 = or i32 %46, %88
  %213 = and i32 %45, %58
  %214 = xor i32 %39, %3
  %215 = xor i32 %107, %4
  %216 = xor i32 %118, %78
  %217 = and i32 %64, %37
  %218 = xor i32 %65, %4
  %219 = xor i32 %218, -1
  %220 = or i32 %75, %219
  %221 = xor i32 %69, %3
  %222 = add i32 %4, 1
  %223 = and i32 %37, %59
  %224 = xor i32 %52, %4
  %225 = xor i32 %224, %78
  %226 = or i32 %139, %3
  %227 = or i32 %45, %41
  %228 = or i32 %98, %136
  %229 = xor i32 %38, %10
  %230 = and i32 %103, %5
  %231 = and i32 %46, %59
  %232 = or i32 %49, %76
  %233 = shl i32 %232, 1
  %234 = or i32 %107, %76
  %235 = and i32 %45, %59
  %236 = or i32 %55, %59
  %237 = xor i32 %197, %219
  %238 = shl i32 %237, 1
  %239 = or i32 %59, %5
  %240 = and i32 %65, %71
  %241 = xor i32 %173, %178
  %242 = and i32 %174, %76
  %243 = xor i32 %242, -1
  %244 = xor i32 %197, %243
  %245 = and i32 %58, %37
  %246 = shl i32 %245, 1
  %247 = or i32 %10, %66
  %248 = shl i32 %247, 1
  %249 = xor i32 %96, %4
  %250 = shl i32 %148, 1
  %251 = xor i32 %200, 2147483647
  %252 = or i32 %251, %197
  %253 = shl i32 %252, 1
  %254 = or i32 %10, %139
  %255 = or i32 %75, %224
  %256 = and i32 %71, %5
  %257 = or i32 %107, %4
  %258 = or i32 %65, %10
  %259 = or i32 %66, %123
  %260 = xor i32 %55, %64
  %261 = shl i32 %260, 2
  %262 = and i32 %66, %82
  %263 = xor i32 %198, 1073741823
  %264 = xor i32 %263, %197
  %265 = shl i32 %264, 2
  %266 = xor i32 %71, %5
  %267 = and i32 %58, %46
  %268 = or i32 %10, %53
  %269 = and i32 %148, %3
  %270 = and i32 %103, %66
  %271 = shl i32 %270, 1
  %272 = or i32 %42, %46
  %273 = and i32 %148, %41
  %274 = xor i32 %175, -1
  %275 = xor i32 %173, %274
  %276 = and i32 %38, %58
  %277 = xor i32 %95, %4
  %278 = or i32 %197, %218
  %279 = and i32 %65, %103
  %280 = or i32 %197, %242
  %281 = xor i32 %148, %3
  %282 = xor i32 %75, %218
  %283 = xor i32 %197, %200
  %284 = or i32 %69, %58
  %285 = and i32 %64, %46
  %286 = xor i32 %136, 2147483647
  %287 = xor i32 %286, %98
  %288 = and i32 %49, %4
  %289 = shl i32 %288, 1
  %290 = or i32 %55, %58
  %291 = xor i32 %55, %107
  %292 = xor i32 %56, %3
  %293 = or i32 %39, %3
  %294 = or i32 %58, %39
  %295 = shl i32 %294, 1
  %296 = add i32 %3, 1
  %297 = or i32 %10, %96
  %298 = or i32 %39, %41
  %299 = shl i32 %298, 1
  %300 = and i32 %61, %3
  %301 = and i32 %45, %82
  %302 = and i32 %103, %46
  %303 = or i32 %65, %123
  %304 = or i32 %95, %76
  %305 = xor i32 %66, %4
  %306 = and i32 %53, %76
  %307 = mul i32 %306, -22
  %308 = and i32 %43, %76
  %309 = shl i32 %308, 4
  %310 = and i32 %53, %4
  %311 = mul i32 %310, -21
  %312 = and i32 %43, %4
  %313 = mul i32 %312, -18
  %314 = and i32 %96, %76
  %315 = mul i32 %314, -34
  %316 = mul i32 %98, -26
  %317 = and i32 %96, %4
  %318 = shl i32 %317, 3
  %319 = shl i32 %75, 2
  %320 = add i32 %82, %88
  %321 = add i32 %320, %58
  %322 = add i32 %321, %239
  %323 = add i32 %322, %196
  %324 = add i32 %323, %126
  %325 = add i32 %324, %122
  %326 = add i32 %325, %49
  %327 = add i32 %326, %284
  %328 = add i32 %327, %273
  %329 = add i32 %328, %262
  %330 = add i32 %329, %259
  %331 = add i32 %330, %227
  %332 = add i32 %331, %214
  %333 = add i32 %332, %210
  %334 = add i32 %333, %182
  %335 = add i32 %334, %163
  %336 = add i32 %335, %138
  %337 = add i32 %336, %124
  %338 = add i32 %337, %113
  %339 = add i32 %338, %111
  %340 = add i32 %339, %60
  %341 = add i32 %340, %255
  %342 = add i32 %341, %287
  %343 = shl i32 %342, 1
  %344 = sub i32 %222, %26
  %345 = sub i32 %344, %213
  %346 = add i32 %345, %257
  %347 = add i32 %346, %155
  %348 = add i32 %347, %110
  %349 = sub i32 %348, %51
  %350 = mul i32 %349, 3
  %351 = add i32 %36, %19
  %352 = add i32 %351, %32
  %353 = sub i32 %352, %230
  %354 = add i32 %353, %301
  %355 = sub i32 %354, %120
  %356 = sub i32 %355, %201
  %357 = mul i32 %356, 5
  %358 = or i32 %34, %35
  %359 = add i32 %358, %27
  %360 = add i32 %359, %25
  %361 = add i32 %360, %86
  %362 = add i32 %361, %285
  %363 = shl i32 %362, 2
  %364 = add i32 %20, -2
  %365 = add i32 %364, %17
  %366 = add i32 %365, %22
  %367 = add i32 %366, %3
  %368 = add i32 %367, %296
  %369 = sub i32 %368, %4
  %370 = sub i32 %369, %29
  %371 = sub i32 %370, %64
  %372 = sub i32 %371, %10
  %373 = add i32 %372, %152
  %374 = add i32 %373, %153
  %375 = add i32 %374, %37
  %376 = sub i32 %375, %5
  %377 = add i32 %376, %72
  %378 = sub i32 %377, %83
  %379 = add i32 %378, %91
  %380 = add i32 %379, %93
  %381 = add i32 %380, %104
  %382 = add i32 %381, %105
  %383 = add i32 %382, %107
  %384 = add i32 %383, %96
  %385 = add i32 %384, %128
  %386 = add i32 %385, %133
  %387 = add i32 %386, %156
  %388 = sub i32 %387, %157
  %389 = add i32 %388, %161
  %390 = add i32 %389, %162
  %391 = add i32 %390, %170
  %392 = sub i32 %391, %186
  %393 = add i32 %392, %187
  %394 = sub i32 %393, %194
  %395 = sub i32 %394, %208
  %396 = sub i32 %395, %65
  %397 = add i32 %396, %217
  %398 = sub i32 %397, %223
  %399 = sub i32 %398, %43
  %400 = sub i32 %399, %256
  %401 = add i32 %400, %45
  %402 = add i32 %401, %266
  %403 = add i32 %402, %39
  %404 = add i32 %403, %48
  %405 = sub i32 %404, %38
  %406 = sub i32 %405, %69
  %407 = add i32 %406, %40
  %408 = add i32 %407, %44
  %409 = add i32 %408, %47
  %410 = add i32 %409, %50
  %411 = sub i32 %410, %54
  %412 = sub i32 %411, %57
  %413 = sub i32 %412, %62
  %414 = add i32 %413, %63
  %415 = sub i32 %414, %70
  %416 = sub i32 %415, %74
  %417 = add i32 %416, %87
  %418 = sub i32 %417, %92
  %419 = sub i32 %418, %94
  %420 = add i32 %419, %97
  %421 = add i32 %420, %102
  %422 = add i32 %421, %106
  %423 = add i32 %422, %108
  %424 = add i32 %423, %109
  %425 = add i32 %424, %112
  %426 = add i32 %425, %114
  %427 = add i32 %426, %115
  %428 = add i32 %427, %116
  %429 = sub i32 %428, %117
  %430 = sub i32 %429, %118
  %431 = add i32 %430, %119
  %432 = sub i32 %431, %121
  %433 = add i32 %432, %125
  %434 = sub i32 %433, %127
  %435 = sub i32 %434, %129
  %436 = sub i32 %435, %130
  %437 = add i32 %436, %132
  %438 = sub i32 %437, %99
  %439 = add i32 %438, %134
  %440 = add i32 %439, %135
  %441 = sub i32 %440, %136
  %442 = sub i32 %441, %137
  %443 = sub i32 %442, %140
  %444 = add i32 %443, %141
  %445 = sub i32 %444, %142
  %446 = sub i32 %445, %143
  %447 = sub i32 %446, %145
  %448 = add i32 %447, %146
  %449 = add i32 %448, %147
  %450 = sub i32 %449, %149
  %451 = add i32 %450, %150
  %452 = sub i32 %451, %151
  %453 = sub i32 %452, %154
  %454 = sub i32 %453, %158
  %455 = add i32 %454, %159
  %456 = sub i32 %455, %160
  %457 = add i32 %456, %164
  %458 = add i32 %457, %165
  %459 = add i32 %458, %166
  %460 = sub i32 %459, %167
  %461 = add i32 %460, %168
  %462 = add i32 %461, %169
  %463 = sub i32 %462, %171
  %464 = sub i32 %463, %181
  %465 = add i32 %464, %183
  %466 = add i32 %465, %184
  %467 = add i32 %466, %178
  %468 = sub i32 %467, %188
  %469 = sub i32 %468, %189
  %470 = add i32 %469, %190
  %471 = sub i32 %470, %191
  %472 = sub i32 %471, %192
  %473 = sub i32 %472, %193
  %474 = add i32 %473, %195
  %475 = sub i32 %474, %200
  %476 = add i32 %475, %202
  %477 = sub i32 %476, %203
  %478 = add i32 %477, %204
  %479 = sub i32 %478, %205
  %480 = add i32 %479, %206
  %481 = sub i32 %480, %207
  %482 = sub i32 %481, %209
  %483 = add i32 %482, %211
  %484 = sub i32 %483, %212
  %485 = add i32 %484, %215
  %486 = add i32 %485, %221
  %487 = sub i32 %486, %226
  %488 = add i32 %487, %229
  %489 = add i32 %488, %231
  %490 = add i32 %489, %234
  %491 = add i32 %490, %235
  %492 = add i32 %491, %236
  %493 = add i32 %492, %240
  %494 = add i32 %493, %77
  %495 = sub i32 %494, %246
  %496 = add i32 %495, %249
  %497 = sub i32 %496, %250
  %498 = add i32 %497, %254
  %499 = add i32 %498, %258
  %500 = sub i32 %499, %267
  %501 = sub i32 %500, %268
  %502 = sub i32 %501, %269
  %503 = sub i32 %502, %272
  %504 = sub i32 %503, %276
  %505 = add i32 %504, %277
  %506 = add i32 %505, %218
  %507 = add i32 %506, %279
  %508 = add i32 %507, %281
  %509 = sub i32 %508, %290
  %510 = add i32 %509, %291
  %511 = sub i32 %510, %292
  %512 = sub i32 %511, %293
  %513 = sub i32 %512, %224
  %514 = sub i32 %513, %297
  %515 = add i32 %514, %300
  %516 = add i32 %515, %302
  %517 = sub i32 %516, %303
  %518 = add i32 %517, %304
  %519 = sub i32 %518, %305
  %520 = sub i32 %519, %68
  %521 = sub i32 %520, %79
  %522 = sub i32 %521, %81
  %523 = sub i32 %522, %85
  %524 = sub i32 %523, %90
  %525 = add i32 %524, %101
  %526 = sub i32 %525, %131
  %527 = add i32 %526, %180
  %528 = add i32 %527, %185
  %529 = sub i32 %528, %199
  %530 = sub i32 %529, %216
  %531 = sub i32 %530, %220
  %532 = sub i32 %531, %225
  %533 = add i32 %532, %228
  %534 = sub i32 %533, %233
  %535 = sub i32 %534, %241
  %536 = add i32 %535, %244
  %537 = sub i32 %536, %248
  %538 = sub i32 %537, %261
  %539 = sub i32 %538, %271
  %540 = add i32 %539, %275
  %541 = add i32 %540, %278
  %542 = add i32 %541, %280
  %543 = sub i32 %542, %282
  %544 = add i32 %543, %283
  %545 = sub i32 %544, %289
  %546 = sub i32 %545, %295
  %547 = sub i32 %546, %299
  %548 = add i32 %547, %307
  %549 = sub i32 %548, %309
  %550 = add i32 %549, %311
  %551 = add i32 %550, %313
  %552 = add i32 %551, %315
  %553 = add i32 %552, %316
  %554 = sub i32 %553, %318
  %555 = sub i32 %554, %319
  %556 = sub i32 %555, %177
  %557 = sub i32 %556, %238
  %558 = sub i32 %557, %253
  %559 = sub i32 %558, %265
  %560 = add i32 %559, %363
  %561 = add i32 %560, %350
  %562 = add i32 %561, %357
  %563 = add i32 %562, %343
  %564 = icmp eq i32 %563, %13
  %565 = select i1 %564, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %566 = tail call i32 @puts(i8* nonnull dereferenceable(1) %565)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
