; ModuleID = '../.././c_source_file/1937_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1937_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %1
  %8 = xor i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = add i32 %8, 1
  %11 = sub i32 %10, %7
  %12 = xor i32 %4, -1
  %13 = xor i32 %5, -1
  %14 = and i32 %13, %3
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %12
  %17 = sub i32 %11, %16
  %18 = xor i32 %3, -1
  %19 = or i32 %18, %4
  %20 = xor i32 %5, %3
  %21 = and i32 %20, %19
  %22 = add i32 %17, %21
  %23 = xor i32 %0, -1
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %2
  %26 = and i32 %25, %23
  %27 = xor i32 %2, %1
  %28 = or i32 %27, %23
  %29 = xor i32 %28, -1
  %30 = or i32 %26, %29
  %31 = and i32 %2, %1
  %32 = and i32 %31, %0
  %33 = and i32 %7, %23
  %34 = xor i32 %32, -1
  %35 = xor i32 %33, %34
  %36 = and i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %1
  %39 = xor i32 %27, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %32, %40
  %42 = shl i32 %41, 1
  %43 = xor i32 %2, -1
  %44 = and i32 %43, %0
  %45 = xor i32 %44, -1
  %46 = xor i32 %1, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %9, %47
  %49 = xor i32 %37, %1
  %50 = xor i32 %7, -1
  %51 = xor i32 %50, %0
  %52 = or i32 %43, %0
  %53 = or i32 %24, %0
  %54 = and i32 %53, %2
  %55 = or i32 %43, %1
  %56 = and i32 %55, %23
  %57 = xor i32 %27, -1
  %58 = and i32 %57, %23
  %59 = and i32 %1, %0
  %60 = or i32 %59, %9
  %61 = or i32 %1, %0
  %62 = and i32 %61, %43
  %63 = add i32 %7, 1
  %64 = xor i32 %7, %0
  %65 = xor i32 %64, %34
  %66 = or i32 %2, %0
  %67 = and i32 %66, %24
  %68 = xor i32 %66, -1
  %69 = add i32 %66, 1
  %70 = xor i32 %61, -1
  %71 = or i32 %8, %70
  %72 = xor i32 %7, %59
  %73 = and i32 %57, %0
  %74 = xor i32 %44, %55
  %75 = and i32 %24, %0
  %76 = and i32 %8, %53
  %77 = or i32 %46, %9
  %78 = or i32 %68, %47
  %79 = xor i32 %57, %0
  %80 = add i32 %36, 1
  %81 = xor i32 %59, -1
  %82 = and i32 %8, %81
  %83 = and i32 %9, %24
  %84 = and i32 %46, %37
  %85 = and i32 %25, %0
  %86 = or i32 %85, %39
  %87 = or i32 %8, %75
  %88 = xor i32 %70, %2
  %89 = or i32 %24, %2
  %90 = and i32 %89, %0
  %91 = xor i32 %90, -1
  %92 = xor i32 %26, %91
  %93 = and i32 %43, %1
  %94 = or i32 %36, %93
  %95 = or i32 %57, %0
  %96 = xor i32 %93, -1
  %97 = and i32 %53, %9
  %98 = and i32 %89, %23
  %99 = or i32 %85, %98
  %100 = or i32 %93, %23
  %101 = or i32 %36, %47
  %102 = and i32 %61, %2
  %103 = or i32 %75, %2
  %104 = xor i32 %81, %2
  %105 = or i32 %68, %24
  %106 = or i32 %46, %68
  %107 = xor i32 %68, %1
  %108 = xor i32 %44, %1
  %109 = and i32 %46, %2
  %110 = or i32 %47, %2
  %111 = shl i32 %110, 1
  %112 = and i32 %27, %81
  %113 = xor i32 %52, -1
  %114 = or i32 %59, %113
  %115 = and i32 %57, %81
  %116 = or i32 %50, %23
  %117 = or i32 %59, %2
  %118 = or i32 %55, %23
  %119 = or i32 %50, %0
  %120 = shl i32 %119, 1
  %121 = or i32 %68, %1
  %122 = and i32 %43, %47
  %123 = xor i32 %53, -1
  %124 = add i32 %53, 1
  %125 = xor i32 %31, -1
  %126 = or i32 %125, %23
  %127 = xor i32 %52, %59
  %128 = or i32 %46, %113
  %129 = or i32 %96, %0
  %130 = or i32 %75, %43
  %131 = or i32 %31, %0
  %132 = xor i32 %85, %40
  %133 = or i32 %93, %75
  %134 = shl i32 %133, 2
  %135 = or i32 %36, %1
  %136 = xor i32 %52, %1
  %137 = or i32 %59, %43
  %138 = or i32 %8, %24
  %139 = and i32 %66, %47
  %140 = and i32 %46, %9
  %141 = and i32 %52, %1
  %142 = shl i32 %141, 1
  %143 = xor i32 %96, %0
  %144 = and i32 %27, %61
  %145 = and i32 %31, %23
  %146 = and i32 %7, %0
  %147 = or i32 %145, %146
  %148 = shl i32 %147, 1
  %149 = xor i32 %89, %23
  %150 = xor i32 %149, %85
  %151 = xor i32 %75, %125
  %152 = and i32 %9, %81
  %153 = or i32 %8, %46
  %154 = shl i32 %81, 1
  %155 = or i32 %125, %0
  %156 = or i32 %36, %70
  %157 = or i32 %9, %70
  %158 = and i32 %8, %61
  %159 = xor i32 %66, %1
  %160 = or i32 %44, %1
  %161 = or i32 %36, %123
  %162 = or i32 %8, %123
  %163 = or i32 %32, %64
  %164 = and i32 %53, %43
  %165 = or i32 %27, %59
  %166 = and i32 %27, %0
  %167 = or i32 %145, %166
  %168 = or i32 %43, %47
  %169 = or i32 %36, %50
  %170 = xor i32 %75, -1
  %171 = and i32 %170, %2
  %172 = and i32 %27, %53
  %173 = and i32 %46, %43
  %174 = xor i32 %145, -1
  %175 = xor i32 %146, %174
  %176 = and i32 %45, %24
  %177 = xor i32 %26, %28
  %178 = or i32 %57, %70
  %179 = or i32 %55, %0
  %180 = and i32 %47, %2
  %181 = or i32 %123, %2
  %182 = xor i32 %32, %95
  %183 = xor i32 %166, %174
  %184 = or i32 %27, %0
  %185 = xor i32 %184, -1
  %186 = or i32 %85, %185
  %187 = and i32 %43, %170
  %188 = or i32 %9, %24
  %189 = xor i32 %75, %96
  %190 = or i32 %44, %24
  %191 = or i32 %59, %50
  %192 = shl i32 %146, 1
  %193 = and i32 %45, %1
  %194 = or i32 %44, %47
  %195 = or i32 %31, %75
  %196 = or i32 %8, %47
  %197 = and i32 %52, %24
  %198 = xor i32 %85, %184
  %199 = or i32 %43, %70
  %200 = and i32 %66, %1
  %201 = and i32 %81, %2
  %202 = xor i32 %55, -1
  %203 = or i32 %202, %23
  %204 = and i32 %55, %0
  %205 = xor i32 %170, %2
  %206 = xor i32 %36, %61
  %207 = or i32 %27, %75
  %208 = shl i32 %207, 1
  %209 = or i32 %7, %23
  %210 = or i32 %44, %202
  %211 = xor i32 %44, %125
  %212 = shl i32 %211, 1
  %213 = xor i32 %36, %7
  %214 = shl i32 %213, 1
  %215 = or i32 %36, %46
  %216 = xor i32 %45, %1
  %217 = or i32 %57, %123
  %218 = and i32 %125, %23
  %219 = xor i32 %31, %0
  %220 = or i32 %59, %202
  %221 = and i32 %8, %24
  %222 = and i32 %50, %23
  %223 = mul i32 %222, -10
  %224 = and i32 %93, %23
  %225 = shl i32 %224, 1
  %226 = and i32 %50, %0
  %227 = and i32 %93, %0
  %228 = and i32 %202, %23
  %229 = shl i32 %145, 4
  %230 = and i32 %202, %0
  %231 = shl i32 %230, 2
  %232 = xor i32 %5, %4
  %233 = and i32 %232, %19
  %234 = or i32 %4, %3
  %235 = xor i32 %234, %5
  %236 = xor i32 %232, -1
  %237 = or i32 %236, %3
  %238 = or i32 %15, %4
  %239 = add i32 %14, 1
  %240 = and i32 %5, %4
  %241 = xor i32 %240, %15
  %242 = and i32 %5, %3
  %243 = xor i32 %242, -1
  %244 = and i32 %243, %4
  %245 = and i32 %18, %4
  %246 = xor i32 %245, -1
  %247 = shl i32 %246, 1
  %248 = or i32 %232, %18
  %249 = or i32 %13, %4
  %250 = xor i32 %249, -1
  %251 = xor i32 %4, %3
  %252 = or i32 %251, %250
  %253 = and i32 %4, %3
  %254 = or i32 %253, %5
  %255 = or i32 %5, %4
  %256 = xor i32 %255, -1
  %257 = or i32 %253, %256
  %258 = xor i32 %240, %234
  %259 = or i32 %243, %12
  %260 = and i32 %20, %4
  %261 = and i32 %234, %236
  %262 = and i32 %232, %3
  %263 = or i32 %245, %236
  %264 = or i32 %20, %253
  %265 = or i32 %250, %3
  %266 = or i32 %13, %3
  %267 = or i32 %266, %12
  %268 = xor i32 %266, -1
  %269 = add i32 %266, 1
  %270 = xor i32 %20, -1
  %271 = and i32 %19, %270
  %272 = shl i32 %271, 1
  %273 = and i32 %255, %251
  %274 = and i32 %13, %4
  %275 = xor i32 %274, -1
  %276 = and i32 %275, %18
  %277 = or i32 %274, %251
  %278 = or i32 %245, %270
  %279 = or i32 %5, %3
  %280 = xor i32 %279, -1
  %281 = or i32 %240, %280
  %282 = xor i32 %266, %4
  %283 = xor i32 %240, -1
  %284 = and i32 %251, %283
  %285 = xor i32 %251, -1
  %286 = and i32 %13, %285
  %287 = xor i32 %14, %4
  %288 = and i32 %255, %3
  %289 = shl i32 %288, 1
  %290 = and i32 %232, %285
  %291 = shl i32 %290, 1
  %292 = and i32 %15, %4
  %293 = and i32 %18, %5
  %294 = and i32 %293, %4
  %295 = or i32 %18, %5
  %296 = and i32 %295, %12
  %297 = or i32 %294, %296
  %298 = xor i32 %234, -1
  %299 = or i32 %13, %298
  %300 = and i32 %242, %4
  %301 = and i32 %20, %12
  %302 = or i32 %300, %301
  %303 = and i32 %243, %12
  %304 = xor i32 %245, %5
  %305 = shl i32 %304, 1
  %306 = or i32 %250, %18
  %307 = xor i32 %240, %279
  %308 = or i32 %240, %14
  %309 = xor i32 %240, %19
  %310 = or i32 %253, %13
  %311 = shl i32 %310, 2
  %312 = xor i32 %246, %5
  %313 = or i32 %14, %245
  %314 = and i32 %275, %3
  %315 = xor i32 %253, -1
  %316 = and i32 %232, %315
  %317 = or i32 %245, %5
  %318 = or i32 %240, %251
  %319 = shl i32 %318, 1
  %320 = or i32 %232, %298
  %321 = or i32 %253, %236
  %322 = shl i32 %321, 1
  %323 = add i32 %255, 1
  %324 = and i32 %270, %4
  %325 = xor i32 %315, %5
  %326 = and i32 %236, %285
  %327 = and i32 %315, %5
  %328 = and i32 %242, %12
  %329 = and i32 %279, %4
  %330 = or i32 %328, %329
  %331 = xor i32 %295, %4
  %332 = xor i32 %294, -1
  %333 = xor i32 %331, %332
  %334 = or i32 %14, %4
  %335 = xor i32 %279, %4
  %336 = xor i32 %335, -1
  %337 = xor i32 %300, %336
  %338 = or i32 %300, %335
  %339 = or i32 %274, %18
  %340 = and i32 %232, %246
  %341 = or i32 %240, %18
  %342 = xor i32 %19, -1
  %343 = or i32 %240, %342
  %344 = or i32 %251, %13
  %345 = and i32 %232, %251
  %346 = xor i32 %20, %4
  %347 = xor i32 %346, -1
  %348 = or i32 %300, %347
  %349 = or i32 %253, %250
  %350 = or i32 %274, %285
  %351 = or i32 %280, %12
  %352 = or i32 %294, %346
  %353 = xor i32 %19, %5
  %354 = and i32 %255, %285
  %355 = or i32 %245, %13
  %356 = or i32 %251, %5
  %357 = add i32 %240, 1
  %358 = or i32 %236, %342
  %359 = or i32 %294, %331
  %360 = xor i32 %240, %3
  %361 = shl i32 %360, 1
  %362 = or i32 %328, %260
  %363 = xor i32 %294, %347
  %364 = and i32 %270, %12
  %365 = and i32 %246, %5
  %366 = and i32 %255, %18
  %367 = or i32 %243, %4
  %368 = shl i32 %367, 1
  %369 = or i32 %240, %298
  %370 = or i32 %236, %298
  %371 = or i32 %232, %245
  %372 = and i32 %283, %3
  %373 = or i32 %342, %5
  %374 = shl i32 %373, 1
  %375 = xor i32 %255, %253
  %376 = or i32 %256, %3
  %377 = shl i32 %376, 2
  %378 = xor i32 %245, %15
  %379 = and i32 %19, %5
  %380 = or i32 %270, %298
  %381 = xor i32 %256, %3
  %382 = xor i32 %298, %5
  %383 = and i32 %251, %275
  %384 = xor i32 %274, %3
  %385 = or i32 %280, %4
  %386 = xor i32 %300, %385
  %387 = and i32 %293, %12
  %388 = or i32 %387, %324
  %389 = and i32 %19, %13
  %390 = xor i32 %245, %243
  %391 = shl i32 %390, 1
  %392 = and i32 %13, %246
  %393 = shl i32 %392, 1
  %394 = and i32 %232, %234
  %395 = shl i32 %298, 1
  %396 = add i32 %249, 1
  %397 = xor i32 %300, %346
  %398 = and i32 %19, %236
  %399 = xor i32 %242, %4
  %400 = or i32 %242, %12
  %401 = shl i32 %400, 1
  %402 = and i32 %249, %18
  %403 = add i32 %232, 1
  %404 = or i32 %20, %342
  %405 = xor i32 %253, %5
  %406 = xor i32 %266, %253
  %407 = or i32 %242, %4
  %408 = shl i32 %407, 1
  %409 = or i32 %14, %12
  %410 = and i32 %270, %315
  %411 = and i32 %236, %3
  %412 = xor i32 %275, %3
  %413 = shl i32 %412, 1
  %414 = xor i32 %342, %5
  %415 = and i32 %234, %270
  %416 = add i32 %274, 1
  %417 = and i32 %249, %285
  %418 = add i32 %19, 1
  %419 = or i32 %256, %18
  %420 = xor i32 %15, %4
  %421 = and i32 %283, %18
  %422 = add i32 %242, 1
  %423 = xor i32 %296, %332
  %424 = and i32 %280, %12
  %425 = mul i32 %424, 21
  %426 = and i32 %14, %12
  %427 = and i32 %280, %4
  %428 = and i32 %14, %4
  %429 = mul i32 %428, 31
  %430 = and i32 %268, %12
  %431 = mul i32 %430, 17
  %432 = mul i32 %328, 7
  %433 = and i32 %268, %4
  %434 = mul i32 %300, 23
  %435 = add i32 %130, %187
  %436 = add i32 %435, %103
  %437 = add i32 %436, %102
  %438 = add i32 %437, %218
  %439 = add i32 %438, %203
  %440 = add i32 %439, %197
  %441 = add i32 %440, %195
  %442 = add i32 %441, %193
  %443 = add i32 %442, %190
  %444 = add i32 %443, %188
  %445 = add i32 %444, %169
  %446 = add i32 %445, %131
  %447 = add i32 %446, %128
  %448 = add i32 %447, %107
  %449 = add i32 %448, %132
  %450 = add i32 %449, %99
  %451 = add i32 %450, %365
  %452 = add i32 %451, %317
  %453 = add i32 %452, %299
  %454 = add i32 %453, %254
  %455 = add i32 %454, %350
  %456 = add i32 %455, %358
  %457 = add i32 %456, %339
  %458 = add i32 %457, %292
  %459 = add i32 %458, %257
  %460 = shl i32 %459, 1
  %461 = sub i32 %164, %228
  %462 = add i32 %461, %226
  %463 = sub i32 %462, %182
  %464 = add i32 %463, %284
  %465 = add i32 %464, %410
  %466 = add i32 %465, %282
  %467 = sub i32 %466, %278
  %468 = mul i32 %467, 5
  %469 = sub i32 %31, %32
  %470 = sub i32 %469, %155
  %471 = add i32 %470, %348
  %472 = sub i32 %471, %388
  %473 = mul i32 %472, 3
  %474 = add i32 %382, %101
  %475 = add i32 %474, %433
  %476 = shl i32 %475, 2
  %477 = or i32 %427, %426
  %478 = mul i32 %477, 14
  %479 = sub i32 %0, %1
  %480 = sub i32 %479, %1
  %481 = sub i32 %480, %46
  %482 = add i32 %481, %75
  %483 = add i32 %482, %124
  %484 = sub i32 %483, %2
  %485 = add i32 %484, %59
  %486 = sub i32 %485, %53
  %487 = add i32 %486, %43
  %488 = add i32 %487, %45
  %489 = sub i32 %488, %44
  %490 = add i32 %489, %52
  %491 = sub i32 %490, %54
  %492 = sub i32 %491, %62
  %493 = add i32 %492, %63
  %494 = add i32 %493, %57
  %495 = add i32 %494, %69
  %496 = add i32 %495, %80
  %497 = sub i32 %496, %88
  %498 = sub i32 %497, %104
  %499 = add i32 %498, %109
  %500 = add i32 %499, %117
  %501 = sub i32 %500, %122
  %502 = add i32 %501, %137
  %503 = sub i32 %502, %154
  %504 = add i32 %503, %168
  %505 = sub i32 %504, %171
  %506 = add i32 %505, %173
  %507 = sub i32 %506, %180
  %508 = add i32 %507, %181
  %509 = sub i32 %508, %199
  %510 = add i32 %509, %201
  %511 = add i32 %510, %205
  %512 = sub i32 %511, %36
  %513 = add i32 %512, 1
  %514 = sub i32 %513, %38
  %515 = add i32 %514, %48
  %516 = sub i32 %515, %49
  %517 = sub i32 %516, %51
  %518 = add i32 %517, %56
  %519 = add i32 %518, %58
  %520 = add i32 %519, %60
  %521 = add i32 %520, %67
  %522 = add i32 %521, %71
  %523 = add i32 %522, %72
  %524 = sub i32 %523, %73
  %525 = sub i32 %524, %74
  %526 = add i32 %525, %76
  %527 = sub i32 %526, %77
  %528 = add i32 %527, %78
  %529 = add i32 %528, %79
  %530 = sub i32 %529, %82
  %531 = sub i32 %530, %83
  %532 = add i32 %531, %84
  %533 = add i32 %532, %87
  %534 = add i32 %533, %94
  %535 = sub i32 %534, %95
  %536 = sub i32 %535, %97
  %537 = add i32 %536, %100
  %538 = sub i32 %537, %105
  %539 = add i32 %538, %106
  %540 = add i32 %539, %108
  %541 = sub i32 %540, %111
  %542 = sub i32 %541, %112
  %543 = add i32 %542, %114
  %544 = add i32 %543, %115
  %545 = add i32 %544, %33
  %546 = add i32 %545, %116
  %547 = sub i32 %546, %118
  %548 = sub i32 %547, %121
  %549 = sub i32 %548, %126
  %550 = add i32 %549, %127
  %551 = add i32 %550, %129
  %552 = sub i32 %551, %135
  %553 = sub i32 %552, %136
  %554 = sub i32 %553, %138
  %555 = add i32 %554, %139
  %556 = add i32 %555, %64
  %557 = sub i32 %556, %140
  %558 = add i32 %557, %143
  %559 = add i32 %558, %144
  %560 = add i32 %559, %151
  %561 = sub i32 %560, %152
  %562 = add i32 %561, %153
  %563 = add i32 %562, %156
  %564 = sub i32 %563, %157
  %565 = sub i32 %564, %158
  %566 = sub i32 %565, %159
  %567 = add i32 %566, %160
  %568 = add i32 %567, %161
  %569 = sub i32 %568, %162
  %570 = add i32 %569, %165
  %571 = add i32 %570, %172
  %572 = sub i32 %571, %176
  %573 = sub i32 %572, %178
  %574 = add i32 %573, %179
  %575 = sub i32 %574, %166
  %576 = add i32 %575, %189
  %577 = sub i32 %576, %191
  %578 = sub i32 %577, %194
  %579 = sub i32 %578, %196
  %580 = add i32 %579, %200
  %581 = sub i32 %580, %204
  %582 = sub i32 %581, %206
  %583 = sub i32 %582, %209
  %584 = sub i32 %583, %210
  %585 = sub i32 %584, %215
  %586 = add i32 %585, %216
  %587 = add i32 %586, %217
  %588 = add i32 %587, %219
  %589 = sub i32 %588, %220
  %590 = sub i32 %589, %221
  %591 = add i32 %590, %227
  %592 = add i32 %591, %12
  %593 = sub i32 %592, %35
  %594 = sub i32 %593, %30
  %595 = sub i32 %594, %65
  %596 = add i32 %595, %86
  %597 = add i32 %596, %92
  %598 = sub i32 %597, %120
  %599 = sub i32 %598, %134
  %600 = sub i32 %599, %142
  %601 = sub i32 %600, %150
  %602 = sub i32 %601, %163
  %603 = add i32 %602, %167
  %604 = sub i32 %603, %175
  %605 = add i32 %604, %177
  %606 = sub i32 %605, %183
  %607 = sub i32 %606, %186
  %608 = sub i32 %607, %192
  %609 = sub i32 %608, %198
  %610 = sub i32 %609, %208
  %611 = sub i32 %610, %212
  %612 = sub i32 %611, %214
  %613 = add i32 %612, %223
  %614 = sub i32 %613, %225
  %615 = sub i32 %614, %229
  %616 = sub i32 %615, %231
  %617 = sub i32 %616, %19
  %618 = sub i32 %617, %253
  %619 = add i32 %618, %315
  %620 = sub i32 %619, %251
  %621 = add i32 %620, %418
  %622 = sub i32 %621, %42
  %623 = sub i32 %622, %148
  %624 = add i32 %623, %235
  %625 = add i32 %624, %239
  %626 = sub i32 %625, %247
  %627 = sub i32 %626, %232
  %628 = add i32 %627, %269
  %629 = sub i32 %628, %286
  %630 = sub i32 %629, %240
  %631 = sub i32 %630, %312
  %632 = add i32 %631, %323
  %633 = sub i32 %632, %325
  %634 = sub i32 %633, %327
  %635 = sub i32 %634, %266
  %636 = add i32 %635, %344
  %637 = sub i32 %636, %274
  %638 = add i32 %637, %353
  %639 = sub i32 %638, %355
  %640 = sub i32 %639, %356
  %641 = add i32 %640, %357
  %642 = add i32 %641, %379
  %643 = add i32 %642, %14
  %644 = sub i32 %643, %389
  %645 = sub i32 %644, %395
  %646 = add i32 %645, %396
  %647 = add i32 %646, %403
  %648 = add i32 %647, %405
  %649 = add i32 %648, %279
  %650 = add i32 %649, %414
  %651 = add i32 %650, %20
  %652 = add i32 %651, %416
  %653 = add i32 %652, %422
  %654 = sub i32 %653, %233
  %655 = sub i32 %654, %237
  %656 = sub i32 %655, %238
  %657 = sub i32 %656, %241
  %658 = sub i32 %657, %244
  %659 = sub i32 %658, %248
  %660 = sub i32 %659, %252
  %661 = add i32 %660, %258
  %662 = add i32 %661, %259
  %663 = add i32 %662, %260
  %664 = sub i32 %663, %261
  %665 = sub i32 %664, %262
  %666 = add i32 %665, %263
  %667 = add i32 %666, %264
  %668 = add i32 %667, %265
  %669 = sub i32 %668, %267
  %670 = add i32 %669, %273
  %671 = add i32 %670, %276
  %672 = add i32 %671, %277
  %673 = add i32 %672, %281
  %674 = sub i32 %673, %287
  %675 = sub i32 %674, %303
  %676 = sub i32 %675, %305
  %677 = add i32 %676, %306
  %678 = add i32 %677, %307
  %679 = sub i32 %678, %308
  %680 = sub i32 %679, %309
  %681 = sub i32 %680, %311
  %682 = add i32 %681, %313
  %683 = add i32 %682, %314
  %684 = sub i32 %683, %316
  %685 = sub i32 %684, %320
  %686 = add i32 %685, %324
  %687 = sub i32 %686, %326
  %688 = add i32 %687, %334
  %689 = add i32 %688, %329
  %690 = add i32 %689, %340
  %691 = sub i32 %690, %341
  %692 = sub i32 %691, %343
  %693 = sub i32 %692, %345
  %694 = sub i32 %693, %349
  %695 = sub i32 %694, %351
  %696 = sub i32 %695, %354
  %697 = add i32 %696, %335
  %698 = sub i32 %697, %364
  %699 = add i32 %698, %366
  %700 = add i32 %699, %369
  %701 = sub i32 %700, %370
  %702 = sub i32 %701, %371
  %703 = sub i32 %702, %372
  %704 = sub i32 %703, %374
  %705 = sub i32 %704, %375
  %706 = add i32 %705, %378
  %707 = add i32 %706, %380
  %708 = sub i32 %707, %381
  %709 = add i32 %708, %383
  %710 = sub i32 %709, %384
  %711 = sub i32 %710, %393
  %712 = sub i32 %711, %394
  %713 = sub i32 %712, %398
  %714 = sub i32 %713, %399
  %715 = add i32 %714, %402
  %716 = sub i32 %715, %404
  %717 = add i32 %716, %406
  %718 = sub i32 %717, %409
  %719 = sub i32 %718, %411
  %720 = add i32 %719, %415
  %721 = add i32 %720, %417
  %722 = add i32 %721, %419
  %723 = sub i32 %722, %420
  %724 = sub i32 %723, %421
  %725 = sub i32 %724, %272
  %726 = sub i32 %725, %289
  %727 = sub i32 %726, %291
  %728 = add i32 %727, %297
  %729 = add i32 %728, %302
  %730 = sub i32 %729, %319
  %731 = sub i32 %730, %322
  %732 = add i32 %731, %330
  %733 = sub i32 %732, %333
  %734 = sub i32 %733, %337
  %735 = add i32 %734, %338
  %736 = sub i32 %735, %352
  %737 = add i32 %736, %359
  %738 = sub i32 %737, %361
  %739 = sub i32 %738, %362
  %740 = sub i32 %739, %363
  %741 = sub i32 %740, %368
  %742 = sub i32 %741, %377
  %743 = sub i32 %742, %386
  %744 = sub i32 %743, %391
  %745 = add i32 %744, %397
  %746 = sub i32 %745, %401
  %747 = sub i32 %746, %408
  %748 = sub i32 %747, %413
  %749 = add i32 %748, %423
  %750 = add i32 %749, %425
  %751 = add i32 %750, %429
  %752 = add i32 %751, %431
  %753 = add i32 %752, %432
  %754 = add i32 %753, %434
  %755 = add i32 %754, %478
  %756 = add i32 %755, %476
  %757 = add i32 %756, %473
  %758 = add i32 %757, %468
  %759 = add i32 %758, %460
  %760 = icmp eq i32 %22, %759
  %761 = select i1 %760, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %762 = tail call i32 @puts(i8* nonnull dereferenceable(1) %761)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
