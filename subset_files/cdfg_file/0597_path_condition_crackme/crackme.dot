digraph "DFG for'crackme' function" {
	Node0x1bdf770[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1bdfdf0[shape=record, label="  %6 = mul i32 %2, -3"];
	Node0x1bdfe90[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1bdff30[shape=record, label="  %8 = add i32 %0, 1"];
	Node0x1bdffa0[shape=record, label="  %9 = xor i32 %3, %0"];
	Node0x1be0010[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1be0080[shape=record, label="  %11 = sub i32 %8, %5"];
	Node0x1be00f0[shape=record, label="  %12 = add i32 %11, %6"];
	Node0x1be0160[shape=record, label="  %13 = sub i32 %12, %10"];
	Node0x1be01d0[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x1be0240[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x1be02b0[shape=record, label="  %16 = shl i32 %1, 1"];
	Node0x1be0320[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x1be0390[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x1be0430[shape=record, label="  %19 = xor i32 %1, 2147483647"];
	Node0x1be04a0[shape=record, label="  %20 = and i32 %19, %2"];
	Node0x1be0510[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x1be0580[shape=record, label="  %22 = and i32 %2, %1"];
	Node0x1be05f0[shape=record, label="  %23 = or i32 %7, %3"];
	Node0x1be0660[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x1be06d0[shape=record, label="  %25 = and i32 %7, %3"];
	Node0x1be0740[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x1be07e0[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x1be0850[shape=record, label="  %28 = and i32 %3, %0"];
	Node0x1be08f0[shape=record, label="  %29 = shl i32 %24, 2"];
	Node0x1be0990[shape=record, label="  %30 = xor i32 %29, -4"];
	Node0x1be0a00[shape=record, label="  %31 = shl i32 %23, 1"];
	Node0x1be0a70[shape=record, label="  %32 = xor i32 %31, -2"];
	Node0x1be0cf0[shape=record, label="  %33 = shl i32 %28, 2"];
	Node0x1be0d60[shape=record, label="  %34 = shl i32 %3, 1"];
	Node0x1be0dd0[shape=record, label="  %35 = add i32 %15, %18"];
	Node0x1be0e70[shape=record, label="  %36 = mul i32 %35, 3"];
	Node0x1be0f10[shape=record, label="  %37 = add i32 %0, 5"];
	Node0x1be0f80[shape=record, label="  %38 = add i32 %37, %2"];
	Node0x1be0ff0[shape=record, label="  %39 = sub i32 %38, %16"];
	Node0x1be1060[shape=record, label="  %40 = add i32 %39, %15"];
	Node0x1be10d0[shape=record, label="  %41 = add i32 %40, %22"];
	Node0x1be1140[shape=record, label="  %42 = sub i32 %41, %21"];
	Node0x1be11b0[shape=record, label="  %43 = sub i32 %42, %23"];
	Node0x1be1220[shape=record, label="  %44 = sub i32 %43, %24"];
	Node0x1be1290[shape=record, label="  %45 = sub i32 %44, %28"];
	Node0x1be1300[shape=record, label="  %46 = sub i32 %45, %25"];
	Node0x1be1370[shape=record, label="  %47 = add i32 %46, %34"];
	Node0x1be13e0[shape=record, label="  %48 = add i32 %47, %33"];
	Node0x1be1450[shape=record, label="  %49 = add i32 %48, %36"];
	Node0x1be14c0[shape=record, label="  %50 = sub i32 %49, %27"];
	Node0x1be1530[shape=record, label="  %51 = add i32 %50, %30"];
	Node0x1be15a0[shape=record, label="  %52 = add i32 %51, %32"];
	Node0x1be1610[shape=record, label="  %53 = icmp eq i32 %13, %52"];
	Node0x1b80268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1be1ab0[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x1be1b00[shape=record, label="  ret void"];
	Node0x1bdf770 -> Node0x1bdfdf0;
	Node0x1bdfdf0 -> Node0x1bdfe90;
	Node0x1bdfe90 -> Node0x1bdff30;
	Node0x1bdff30 -> Node0x1bdffa0;
	Node0x1bdffa0 -> Node0x1be0010;
	Node0x1be0010 -> Node0x1be0080;
	Node0x1be0080 -> Node0x1be00f0;
	Node0x1be00f0 -> Node0x1be0160;
	Node0x1be0160 -> Node0x1be01d0;
	Node0x1be01d0 -> Node0x1be0240;
	Node0x1be0240 -> Node0x1be02b0;
	Node0x1be02b0 -> Node0x1be0320;
	Node0x1be0320 -> Node0x1be0390;
	Node0x1be0390 -> Node0x1be0430;
	Node0x1be0430 -> Node0x1be04a0;
	Node0x1be04a0 -> Node0x1be0510;
	Node0x1be0510 -> Node0x1be0580;
	Node0x1be0580 -> Node0x1be05f0;
	Node0x1be05f0 -> Node0x1be0660;
	Node0x1be0660 -> Node0x1be06d0;
	Node0x1be06d0 -> Node0x1be0740;
	Node0x1be0740 -> Node0x1be07e0;
	Node0x1be07e0 -> Node0x1be0850;
	Node0x1be0850 -> Node0x1be08f0;
	Node0x1be08f0 -> Node0x1be0990;
	Node0x1be0990 -> Node0x1be0a00;
	Node0x1be0a00 -> Node0x1be0a70;
	Node0x1be0a70 -> Node0x1be0cf0;
	Node0x1be0cf0 -> Node0x1be0d60;
	Node0x1be0d60 -> Node0x1be0dd0;
	Node0x1be0dd0 -> Node0x1be0e70;
	Node0x1be0e70 -> Node0x1be0f10;
	Node0x1be0f10 -> Node0x1be0f80;
	Node0x1be0f80 -> Node0x1be0ff0;
	Node0x1be0ff0 -> Node0x1be1060;
	Node0x1be1060 -> Node0x1be10d0;
	Node0x1be10d0 -> Node0x1be1140;
	Node0x1be1140 -> Node0x1be11b0;
	Node0x1be11b0 -> Node0x1be1220;
	Node0x1be1220 -> Node0x1be1290;
	Node0x1be1290 -> Node0x1be1300;
	Node0x1be1300 -> Node0x1be1370;
	Node0x1be1370 -> Node0x1be13e0;
	Node0x1be13e0 -> Node0x1be1450;
	Node0x1be1450 -> Node0x1be14c0;
	Node0x1be14c0 -> Node0x1be1530;
	Node0x1be1530 -> Node0x1be15a0;
	Node0x1be15a0 -> Node0x1be1610;
	Node0x1be1610 -> Node0x1b80268;
	Node0x1b80268 -> Node0x1be1ab0;
	Node0x1be1ab0 -> Node0x1be1b00;
edge [color=red]
	Node0x1bdffa0 -> Node0x1be0010;
	Node0x1bdff30 -> Node0x1be0080;
	Node0x1bdf770 -> Node0x1be0080;
	Node0x1be0080 -> Node0x1be00f0;
	Node0x1bdfdf0 -> Node0x1be00f0;
	Node0x1be00f0 -> Node0x1be0160;
	Node0x1be0010 -> Node0x1be0160;
	Node0x1be01d0 -> Node0x1be0240;
	Node0x1be0320 -> Node0x1be0390;
	Node0x1be0430 -> Node0x1be04a0;
	Node0x1be04a0 -> Node0x1be0510;
	Node0x1bdfe90 -> Node0x1be05f0;
	Node0x1bdfe90 -> Node0x1be06d0;
	Node0x1be06d0 -> Node0x1be0740;
	Node0x1be0740 -> Node0x1be07e0;
	Node0x1be0660 -> Node0x1be08f0;
	Node0x1be08f0 -> Node0x1be0990;
	Node0x1be05f0 -> Node0x1be0a00;
	Node0x1be0a00 -> Node0x1be0a70;
	Node0x1be0850 -> Node0x1be0cf0;
	Node0x1be0240 -> Node0x1be0dd0;
	Node0x1be0390 -> Node0x1be0dd0;
	Node0x1be0dd0 -> Node0x1be0e70;
	Node0x1be0f10 -> Node0x1be0f80;
	Node0x1be0f80 -> Node0x1be0ff0;
	Node0x1be02b0 -> Node0x1be0ff0;
	Node0x1be0ff0 -> Node0x1be1060;
	Node0x1be0240 -> Node0x1be1060;
	Node0x1be1060 -> Node0x1be10d0;
	Node0x1be0580 -> Node0x1be10d0;
	Node0x1be10d0 -> Node0x1be1140;
	Node0x1be0510 -> Node0x1be1140;
	Node0x1be1140 -> Node0x1be11b0;
	Node0x1be05f0 -> Node0x1be11b0;
	Node0x1be11b0 -> Node0x1be1220;
	Node0x1be0660 -> Node0x1be1220;
	Node0x1be1220 -> Node0x1be1290;
	Node0x1be0850 -> Node0x1be1290;
	Node0x1be1290 -> Node0x1be1300;
	Node0x1be06d0 -> Node0x1be1300;
	Node0x1be1300 -> Node0x1be1370;
	Node0x1be0d60 -> Node0x1be1370;
	Node0x1be1370 -> Node0x1be13e0;
	Node0x1be0cf0 -> Node0x1be13e0;
	Node0x1be13e0 -> Node0x1be1450;
	Node0x1be0e70 -> Node0x1be1450;
	Node0x1be1450 -> Node0x1be14c0;
	Node0x1be07e0 -> Node0x1be14c0;
	Node0x1be14c0 -> Node0x1be1530;
	Node0x1be0990 -> Node0x1be1530;
	Node0x1be1530 -> Node0x1be15a0;
	Node0x1be0a70 -> Node0x1be15a0;
	Node0x1be0160 -> Node0x1be1610;
	Node0x1be15a0 -> Node0x1be1610;
	Node0x1be1610 -> Node0x1b80268;
	Node0x1b80268 -> Node0x1be1ab0;
}
