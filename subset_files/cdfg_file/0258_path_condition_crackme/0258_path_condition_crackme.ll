; ModuleID = '../.././c_source_file/0258_path_condition_crackme.c'
source_filename = "../.././c_source_file/0258_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %2, %0
  %6 = or i32 %5, %4
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = or i32 %2, %1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %9, %12
  %14 = add i32 %13, %6
  %15 = sub i32 0, %14
  %16 = xor i32 %1, -1
  %17 = and i32 %16, %0
  %18 = xor i32 %2, -1
  %19 = and i32 %18, %1
  %20 = or i32 %19, %17
  %21 = or i32 %2, %0
  %22 = xor i32 %21, %1
  %23 = and i32 %16, %2
  %24 = and i32 %23, %0
  %25 = or i32 %16, %2
  %26 = and i32 %25, %7
  %27 = or i32 %24, %26
  %28 = or i32 %19, %0
  %29 = xor i32 %4, -1
  %30 = xor i32 %2, %1
  %31 = and i32 %30, %29
  %32 = xor i32 %19, -1
  %33 = and i32 %32, %7
  %34 = and i32 %23, %7
  %35 = or i32 %30, %7
  %36 = xor i32 %34, %35
  %37 = xor i32 %1, %0
  %38 = or i32 %5, %37
  %39 = shl i32 %38, 1
  %40 = and i32 %8, %0
  %41 = xor i32 %30, %0
  %42 = xor i32 %40, %41
  %43 = xor i32 %5, -1
  %44 = or i32 %43, %1
  %45 = or i32 %18, %0
  %46 = and i32 %45, %1
  %47 = and i32 %5, %1
  %48 = or i32 %1, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %49, %2
  %51 = xor i32 %10, %0
  %52 = xor i32 %40, -1
  %53 = xor i32 %51, %52
  %54 = and i32 %30, %0
  %55 = shl i32 %54, 1
  %56 = or i32 %5, %16
  %57 = or i32 %18, %1
  %58 = or i32 %57, %7
  %59 = or i32 %9, %11
  %60 = xor i32 %45, -1
  %61 = or i32 %60, %16
  %62 = and i32 %25, %0
  %63 = or i32 %34, %62
  %64 = or i32 %16, %0
  %65 = xor i32 %64, -1
  %66 = xor i32 %65, %2
  %67 = xor i32 %10, -1
  %68 = and i32 %5, %37
  %69 = and i32 %2, %0
  %70 = add i32 %5, 1
  %71 = and i32 %18, %0
  %72 = xor i32 %57, -1
  %73 = or i32 %71, %72
  %74 = and i32 %21, %16
  %75 = xor i32 %30, -1
  %76 = or i32 %75, %0
  %77 = xor i32 %45, %1
  %78 = or i32 %43, %49
  %79 = shl i32 %32, 1
  %80 = xor i32 %8, -1
  %81 = and i32 %80, %7
  %82 = or i32 %4, %72
  %83 = shl i32 %82, 1
  %84 = xor i32 %37, -1
  %85 = or i32 %4, %75
  %86 = or i32 %72, %7
  %87 = and i32 %45, %16
  %88 = xor i32 %69, %64
  %89 = or i32 %60, %84
  %90 = xor i32 %69, %1
  %91 = and i32 %5, %48
  %92 = xor i32 %21, -1
  %93 = or i32 %92, %16
  %94 = shl i32 %93, 1
  %95 = or i32 %60, %1
  %96 = or i32 %5, %17
  %97 = or i32 %5, %84
  %98 = or i32 %4, %2
  %99 = xor i32 %54, 2147483647
  %100 = xor i32 %99, %9
  %101 = shl i32 %100, 1
  %102 = or i32 %69, %65
  %103 = xor i32 %67, %0
  %104 = xor i32 %45, %4
  %105 = or i32 %4, %67
  %106 = shl i32 %105, 1
  %107 = or i32 %67, %7
  %108 = or i32 %30, %4
  %109 = xor i32 %64, %2
  %110 = or i32 %18, %84
  %111 = xor i32 %25, %0
  %112 = or i32 %24, %111
  %113 = add i32 %0, 1
  %114 = and i32 %64, %43
  %115 = or i32 %72, %0
  %116 = shl i32 %115, 1
  %117 = and i32 %30, %7
  %118 = and i32 %5, %16
  %119 = or i32 %8, %7
  %120 = or i32 %8, %17
  %121 = or i32 %69, %16
  %122 = or i32 %69, %84
  %123 = and i32 %80, %0
  %124 = or i32 %69, %67
  %125 = and i32 %43, %84
  %126 = or i32 %5, %1
  %127 = and i32 %64, %75
  %128 = or i32 %5, %49
  %129 = or i32 %37, %18
  %130 = xor i32 %17, -1
  %131 = xor i32 %130, %2
  %132 = xor i32 %21, %4
  %133 = or i32 %71, %16
  %134 = and i32 %10, %7
  %135 = shl i32 %134, 1
  %136 = xor i32 %29, %2
  %137 = xor i32 %57, %4
  %138 = add i32 %48, 1
  %139 = xor i32 %117, %52
  %140 = xor i32 %71, -1
  %141 = xor i32 %140, %1
  %142 = add i32 %17, 1
  %143 = or i32 %4, %18
  %144 = or i32 %30, %17
  %145 = shl i32 %144, 1
  %146 = or i32 %4, %92
  %147 = and i32 %37, %2
  %148 = shl i32 %8, 2
  %149 = or i32 %71, %1
  %150 = or i32 %69, %19
  %151 = and i32 %75, %0
  %152 = xor i32 %69, %32
  %153 = or i32 %75, %7
  %154 = and i32 %30, %64
  %155 = or i32 %30, %49
  %156 = xor i32 %19, %0
  %157 = or i32 %75, %49
  %158 = xor i32 %69, %48
  %159 = xor i32 %69, -1
  %160 = and i32 %130, %2
  %161 = xor i32 %134, %52
  %162 = or i32 %40, %51
  %163 = or i32 %9, %54
  %164 = shl i32 %163, 1
  %165 = xor i32 %69, %10
  %166 = shl i32 %165, 1
  %167 = xor i32 %35, 1073741823
  %168 = or i32 %167, %34
  %169 = shl i32 %168, 2
  %170 = or i32 %18, %49
  %171 = and i32 %18, %130
  %172 = and i32 %5, %29
  %173 = xor i32 %41, -1
  %174 = xor i32 %24, %173
  %175 = add i32 %2, 1
  %176 = xor i32 %8, %0
  %177 = shl i32 %176, 1
  %178 = and i32 %75, %130
  %179 = or i32 %65, %2
  %180 = xor i32 %80, %0
  %181 = and i32 %37, %18
  %182 = or i32 %32, %0
  %183 = or i32 %5, %65
  %184 = and i32 %21, %84
  %185 = and i32 %43, %1
  %186 = and i32 %21, %1
  %187 = or i32 %4, %60
  %188 = shl i32 %41, 1
  %189 = and i32 %140, %16
  %190 = or i32 %43, %65
  %191 = or i32 %71, %37
  %192 = and i32 %43, %29
  %193 = or i32 %92, %84
  %194 = or i32 %17, %2
  %195 = and i32 %37, %140
  %196 = and i32 %140, %84
  %197 = xor i32 %71, %57
  %198 = shl i32 %197, 1
  %199 = or i32 %17, %75
  %200 = and i32 %159, %16
  %201 = xor i32 %62, -1
  %202 = xor i32 %34, %201
  %203 = and i32 %37, %159
  %204 = and i32 %29, %2
  %205 = xor i32 %48, %2
  %206 = xor i32 %72, %0
  %207 = and i32 %48, %2
  %208 = or i32 %69, %49
  %209 = and i32 %5, %84
  %210 = and i32 %32, %0
  %211 = or i32 %67, %0
  %212 = shl i32 %211, 1
  %213 = xor i32 %75, %0
  %214 = or i32 %17, %43
  %215 = or i32 %57, %0
  %216 = xor i32 %4, %2
  %217 = shl i32 %216, 1
  %218 = xor i32 %217, -1
  %219 = xor i32 %159, %1
  %220 = or i32 %37, %60
  %221 = and i32 %48, %75
  %222 = or i32 %84, %2
  %223 = and i32 %30, %130
  %224 = and i32 %48, %43
  %225 = shl i32 %224, 1
  %226 = xor i32 %57, %0
  %227 = and i32 %67, %7
  %228 = shl i32 %227, 1
  %229 = and i32 %19, %7
  %230 = and i32 %67, %0
  %231 = mul i32 %230, -11
  %232 = and i32 %19, %0
  %233 = mul i32 %232, 15
  %234 = and i32 %72, %0
  %235 = mul i32 %234, 24
  %236 = add i32 %182, %222
  %237 = sub i32 %9, %236
  %238 = add i32 %237, %117
  %239 = mul i32 %238, 3
  %240 = sub i32 %143, %69
  %241 = sub i32 %240, %229
  %242 = mul i32 %241, 5
  %243 = add i32 %37, -1
  %244 = add i32 %243, %21
  %245 = add i32 %244, %223
  %246 = add i32 %245, %221
  %247 = add i32 %246, %220
  %248 = add i32 %247, %213
  %249 = add i32 %248, %35
  %250 = add i32 %249, %186
  %251 = add i32 %250, %178
  %252 = add i32 %251, %152
  %253 = add i32 %252, %150
  %254 = add i32 %253, %137
  %255 = add i32 %254, %119
  %256 = add i32 %255, %85
  %257 = add i32 %256, %81
  %258 = add i32 %257, %78
  %259 = add i32 %258, %59
  %260 = shl i32 %259, 1
  %261 = add i32 %113, %0
  %262 = add i32 %261, %84
  %263 = add i32 %262, %29
  %264 = add i32 %263, %138
  %265 = add i32 %264, %142
  %266 = add i32 %265, %48
  %267 = add i32 %266, %175
  %268 = sub i32 %267, %4
  %269 = add i32 %268, %2
  %270 = add i32 %269, %50
  %271 = sub i32 %270, %5
  %272 = sub i32 %271, %66
  %273 = add i32 %272, %67
  %274 = add i32 %273, %70
  %275 = add i32 %274, %98
  %276 = add i32 %275, %109
  %277 = add i32 %276, %110
  %278 = sub i32 %277, %57
  %279 = sub i32 %278, %129
  %280 = add i32 %279, %131
  %281 = sub i32 %280, %136
  %282 = sub i32 %281, %147
  %283 = sub i32 %282, %10
  %284 = add i32 %283, %159
  %285 = add i32 %284, %160
  %286 = sub i32 %285, %71
  %287 = add i32 %286, %170
  %288 = sub i32 %287, %171
  %289 = add i32 %288, %72
  %290 = sub i32 %289, %179
  %291 = add i32 %290, %181
  %292 = add i32 %291, %194
  %293 = sub i32 %292, %204
  %294 = sub i32 %293, %205
  %295 = sub i32 %294, %19
  %296 = sub i32 %295, %207
  %297 = sub i32 %296, %30
  %298 = sub i32 %297, %22
  %299 = add i32 %298, %20
  %300 = add i32 %299, %28
  %301 = add i32 %300, %31
  %302 = sub i32 %301, %33
  %303 = sub i32 %302, %44
  %304 = add i32 %303, %46
  %305 = add i32 %304, %47
  %306 = sub i32 %305, %56
  %307 = add i32 %306, %58
  %308 = sub i32 %307, %61
  %309 = add i32 %308, %68
  %310 = add i32 %309, %73
  %311 = sub i32 %310, %74
  %312 = sub i32 %311, %76
  %313 = add i32 %312, %77
  %314 = sub i32 %313, %79
  %315 = sub i32 %314, %86
  %316 = sub i32 %315, %87
  %317 = add i32 %316, %51
  %318 = sub i32 %317, %88
  %319 = add i32 %318, %89
  %320 = sub i32 %319, %90
  %321 = add i32 %320, %91
  %322 = sub i32 %321, %95
  %323 = sub i32 %322, %96
  %324 = sub i32 %323, %97
  %325 = add i32 %324, %102
  %326 = sub i32 %325, %103
  %327 = sub i32 %326, %104
  %328 = sub i32 %327, %107
  %329 = sub i32 %328, %108
  %330 = sub i32 %329, %11
  %331 = add i32 %330, %114
  %332 = add i32 %331, %118
  %333 = add i32 %332, %120
  %334 = add i32 %333, %121
  %335 = add i32 %334, %122
  %336 = sub i32 %335, %123
  %337 = sub i32 %336, %124
  %338 = sub i32 %337, %125
  %339 = add i32 %338, %126
  %340 = add i32 %339, %127
  %341 = sub i32 %340, %128
  %342 = add i32 %341, %132
  %343 = sub i32 %342, %133
  %344 = sub i32 %343, %141
  %345 = sub i32 %344, %146
  %346 = sub i32 %345, %148
  %347 = sub i32 %346, %149
  %348 = add i32 %347, %151
  %349 = sub i32 %348, %153
  %350 = sub i32 %349, %154
  %351 = add i32 %350, %155
  %352 = sub i32 %351, %156
  %353 = add i32 %352, %157
  %354 = sub i32 %353, %158
  %355 = sub i32 %354, %172
  %356 = add i32 %355, %180
  %357 = sub i32 %356, %183
  %358 = sub i32 %357, %184
  %359 = add i32 %358, %185
  %360 = sub i32 %359, %187
  %361 = add i32 %360, %189
  %362 = sub i32 %361, %190
  %363 = add i32 %362, %191
  %364 = add i32 %363, %192
  %365 = sub i32 %364, %193
  %366 = sub i32 %365, %195
  %367 = add i32 %366, %196
  %368 = sub i32 %367, %199
  %369 = add i32 %368, %200
  %370 = add i32 %369, %203
  %371 = add i32 %370, %206
  %372 = sub i32 %371, %208
  %373 = add i32 %372, %209
  %374 = sub i32 %373, %210
  %375 = add i32 %374, %214
  %376 = add i32 %375, %215
  %377 = add i32 %376, %218
  %378 = add i32 %377, %219
  %379 = sub i32 %378, %226
  %380 = add i32 %379, %27
  %381 = sub i32 %380, %36
  %382 = sub i32 %381, %39
  %383 = add i32 %382, %42
  %384 = add i32 %383, %53
  %385 = sub i32 %384, %55
  %386 = add i32 %385, %63
  %387 = sub i32 %386, %83
  %388 = sub i32 %387, %94
  %389 = sub i32 %388, %106
  %390 = sub i32 %389, %112
  %391 = sub i32 %390, %116
  %392 = sub i32 %391, %135
  %393 = add i32 %392, %139
  %394 = sub i32 %393, %145
  %395 = sub i32 %394, %161
  %396 = add i32 %395, %162
  %397 = sub i32 %396, %166
  %398 = sub i32 %397, %174
  %399 = sub i32 %398, %177
  %400 = sub i32 %399, %188
  %401 = sub i32 %400, %198
  %402 = add i32 %401, %202
  %403 = sub i32 %402, %212
  %404 = sub i32 %403, %225
  %405 = sub i32 %404, %228
  %406 = add i32 %405, %231
  %407 = add i32 %406, %233
  %408 = add i32 %407, %235
  %409 = sub i32 %408, %164
  %410 = sub i32 %409, %101
  %411 = add i32 %410, %169
  %412 = add i32 %411, %242
  %413 = add i32 %412, %239
  %414 = add i32 %413, %260
  %415 = icmp eq i32 %414, %15
  %416 = select i1 %415, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %417 = tail call i32 @puts(i8* nonnull dereferenceable(1) %416)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
