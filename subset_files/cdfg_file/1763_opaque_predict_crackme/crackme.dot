digraph "DFG for'crackme' function" {
	Node0x1560b20[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x15611a0[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1561210[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1561280[shape=record, label="  %8 = or i32 %7, %3"];
	Node0x15612f0[shape=record, label="  %9 = sub i32 %6, %0"];
	Node0x1561360[shape=record, label="  %10 = sub i32 %9, %8"];
	Node0x1561400[shape=record, label="  %11 = mul i32 %5, -2"];
	Node0x1561470[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x15614e0[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x1561550[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x15615c0[shape=record, label="  %15 = xor i32 %2, -1"];
	Node0x1561630[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x15616d0[shape=record, label="  %17 = xor i32 %1, 1073741823"];
	Node0x1561740[shape=record, label="  %18 = and i32 %17, %2"];
	Node0x15617e0[shape=record, label="  %19 = shl i32 %18, 2"];
	Node0x1561880[shape=record, label="  %20 = shl i32 %13, 3"];
	Node0x15618f0[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x1561960[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x1561a00[shape=record, label="  %23 = shl i32 %8, 1"];
	Node0x1561a70[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x1561ae0[shape=record, label="  %25 = shl i32 %21, 1"];
	Node0x1561b50[shape=record, label="  %26 = sub i32 %16, %1"];
	Node0x1561bf0[shape=record, label="  %27 = mul i32 %26, 5"];
	Node0x1561c60[shape=record, label="  %28 = sub i32 2, %0"];
	Node0x1561cd0[shape=record, label="  %29 = add i32 %28, %1"];
	Node0x1561d40[shape=record, label="  %30 = sub i32 %29, %2"];
	Node0x1561db0[shape=record, label="  %31 = add i32 %30, %15"];
	Node0x1561e20[shape=record, label="  %32 = sub i32 %31, %12"];
	Node0x15620a0[shape=record, label="  %33 = add i32 %32, %14"];
	Node0x1562110[shape=record, label="  %34 = add i32 %33, %16"];
	Node0x1562180[shape=record, label="  %35 = add i32 %34, %3"];
	Node0x15621f0[shape=record, label="  %36 = add i32 %35, %11"];
	Node0x1562260[shape=record, label="  %37 = add i32 %36, %19"];
	Node0x15622d0[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x1562340[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x15623b0[shape=record, label="  %40 = sub i32 %39, %22"];
	Node0x1562420[shape=record, label="  %41 = sub i32 %40, %25"];
	Node0x1562490[shape=record, label="  %42 = add i32 %41, %27"];
	Node0x1562500[shape=record, label="  %43 = add i32 %42, %24"];
	Node0x1562570[shape=record, label="  %44 = icmp eq i32 %10, %43"];
	Node0x1501268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1562a10[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x1562a60[shape=record, label="  ret void"];
	Node0x1560b20 -> Node0x15611a0;
	Node0x15611a0 -> Node0x1561210;
	Node0x1561210 -> Node0x1561280;
	Node0x1561280 -> Node0x15612f0;
	Node0x15612f0 -> Node0x1561360;
	Node0x1561360 -> Node0x1561400;
	Node0x1561400 -> Node0x1561470;
	Node0x1561470 -> Node0x15614e0;
	Node0x15614e0 -> Node0x1561550;
	Node0x1561550 -> Node0x15615c0;
	Node0x15615c0 -> Node0x1561630;
	Node0x1561630 -> Node0x15616d0;
	Node0x15616d0 -> Node0x1561740;
	Node0x1561740 -> Node0x15617e0;
	Node0x15617e0 -> Node0x1561880;
	Node0x1561880 -> Node0x15618f0;
	Node0x15618f0 -> Node0x1561960;
	Node0x1561960 -> Node0x1561a00;
	Node0x1561a00 -> Node0x1561a70;
	Node0x1561a70 -> Node0x1561ae0;
	Node0x1561ae0 -> Node0x1561b50;
	Node0x1561b50 -> Node0x1561bf0;
	Node0x1561bf0 -> Node0x1561c60;
	Node0x1561c60 -> Node0x1561cd0;
	Node0x1561cd0 -> Node0x1561d40;
	Node0x1561d40 -> Node0x1561db0;
	Node0x1561db0 -> Node0x1561e20;
	Node0x1561e20 -> Node0x15620a0;
	Node0x15620a0 -> Node0x1562110;
	Node0x1562110 -> Node0x1562180;
	Node0x1562180 -> Node0x15621f0;
	Node0x15621f0 -> Node0x1562260;
	Node0x1562260 -> Node0x15622d0;
	Node0x15622d0 -> Node0x1562340;
	Node0x1562340 -> Node0x15623b0;
	Node0x15623b0 -> Node0x1562420;
	Node0x1562420 -> Node0x1562490;
	Node0x1562490 -> Node0x1562500;
	Node0x1562500 -> Node0x1562570;
	Node0x1562570 -> Node0x1501268;
	Node0x1501268 -> Node0x1562a10;
	Node0x1562a10 -> Node0x1562a60;
edge [color=red]
	Node0x1560b20 -> Node0x15611a0;
	Node0x1561210 -> Node0x1561280;
	Node0x15611a0 -> Node0x15612f0;
	Node0x15612f0 -> Node0x1561360;
	Node0x1561280 -> Node0x1561360;
	Node0x1560b20 -> Node0x1561400;
	Node0x15614e0 -> Node0x1561550;
	Node0x15615c0 -> Node0x1561630;
	Node0x15616d0 -> Node0x1561740;
	Node0x1561740 -> Node0x15617e0;
	Node0x15614e0 -> Node0x1561880;
	Node0x1561280 -> Node0x1561a00;
	Node0x1561a00 -> Node0x1561a70;
	Node0x15618f0 -> Node0x1561ae0;
	Node0x1561630 -> Node0x1561b50;
	Node0x1561b50 -> Node0x1561bf0;
	Node0x1561c60 -> Node0x1561cd0;
	Node0x1561cd0 -> Node0x1561d40;
	Node0x1561d40 -> Node0x1561db0;
	Node0x15615c0 -> Node0x1561db0;
	Node0x1561db0 -> Node0x1561e20;
	Node0x1561470 -> Node0x1561e20;
	Node0x1561e20 -> Node0x15620a0;
	Node0x1561550 -> Node0x15620a0;
	Node0x15620a0 -> Node0x1562110;
	Node0x1561630 -> Node0x1562110;
	Node0x1562110 -> Node0x1562180;
	Node0x1562180 -> Node0x15621f0;
	Node0x1561400 -> Node0x15621f0;
	Node0x15621f0 -> Node0x1562260;
	Node0x15617e0 -> Node0x1562260;
	Node0x1562260 -> Node0x15622d0;
	Node0x1561880 -> Node0x15622d0;
	Node0x15622d0 -> Node0x1562340;
	Node0x15618f0 -> Node0x1562340;
	Node0x1562340 -> Node0x15623b0;
	Node0x1561960 -> Node0x15623b0;
	Node0x15623b0 -> Node0x1562420;
	Node0x1561ae0 -> Node0x1562420;
	Node0x1562420 -> Node0x1562490;
	Node0x1561bf0 -> Node0x1562490;
	Node0x1562490 -> Node0x1562500;
	Node0x1561a70 -> Node0x1562500;
	Node0x1561360 -> Node0x1562570;
	Node0x1562500 -> Node0x1562570;
	Node0x1562570 -> Node0x1501268;
	Node0x1501268 -> Node0x1562a10;
}
