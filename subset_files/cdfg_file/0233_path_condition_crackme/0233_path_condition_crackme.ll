; ModuleID = '../.././c_source_file/0233_path_condition_crackme.c'
source_filename = "../.././c_source_file/0233_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, %2
  %11 = xor i32 %2, %0
  %12 = and i32 %11, %8
  %13 = add i32 %12, %10
  %14 = add i32 %13, %7
  %15 = xor i32 %4, %3
  %16 = or i32 %4, %3
  %17 = xor i32 %4, -1
  %18 = or i32 %17, %3
  %19 = shl i32 %18, 2
  %20 = and i32 %17, %3
  %21 = xor i32 %16, -1
  %22 = xor i32 %1, %0
  %23 = and i32 %11, %22
  %24 = xor i32 %0, -1
  %25 = xor i32 %2, -1
  %26 = or i32 %25, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %24
  %29 = and i32 %2, %1
  %30 = shl i32 %29, 1
  %31 = or i32 %2, %1
  %32 = xor i32 %31, -1
  %33 = or i32 %32, %24
  %34 = xor i32 %11, -1
  %35 = or i32 %2, %0
  %36 = xor i32 %35, %1
  %37 = and i32 %8, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %38, %2
  %40 = xor i32 %22, -1
  %41 = and i32 %25, %40
  %42 = and i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %43, %2
  %45 = and i32 %40, %2
  %46 = and i32 %11, %40
  %47 = and i32 %8, %2
  %48 = and i32 %47, %0
  %49 = xor i32 %2, %1
  %50 = or i32 %49, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %48, %51
  %53 = or i32 %8, %2
  %54 = and i32 %53, %24
  %55 = or i32 %48, %54
  %56 = xor i32 %49, -1
  %57 = or i32 %56, %0
  %58 = or i32 %11, %37
  %59 = xor i32 %9, -1
  %60 = xor i32 %59, %2
  %61 = xor i32 %29, -1
  %62 = or i32 %61, %24
  %63 = and i32 %25, %1
  %64 = xor i32 %63, -1
  %65 = and i32 %64, %24
  %66 = add i32 %63, 1
  %67 = and i32 %56, %0
  %68 = and i32 %25, %38
  %69 = shl i32 %68, 1
  %70 = or i32 %25, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %22, %71
  %73 = shl i32 %72, 1
  %74 = and i32 %56, %43
  %75 = shl i32 %43, 1
  %76 = xor i32 %26, %0
  %77 = or i32 %37, %25
  %78 = and i32 %35, %40
  %79 = xor i32 %35, -1
  %80 = or i32 %79, %8
  %81 = xor i32 %53, %0
  %82 = or i32 %48, %81
  %83 = and i32 %25, %0
  %84 = and i32 %25, %43
  %85 = xor i32 %49, %0
  %86 = or i32 %22, %2
  %87 = or i32 %79, %40
  %88 = and i32 %2, %0
  %89 = xor i32 %88, -1
  %90 = xor i32 %89, %1
  %91 = and i32 %22, %25
  %92 = xor i32 %29, %0
  %93 = and i32 %47, %24
  %94 = or i32 %49, %24
  %95 = xor i32 %94, -1
  %96 = or i32 %93, %95
  %97 = or i32 %59, %2
  %98 = xor i32 %26, %42
  %99 = xor i32 %85, -1
  %100 = xor i32 %48, %99
  %101 = or i32 %1, %0
  %102 = xor i32 %88, %101
  %103 = shl i32 %102, 1
  %104 = or i32 %71, %8
  %105 = and i32 %9, %25
  %106 = or i32 %42, %27
  %107 = shl i32 %63, 1
  %108 = and i32 %89, %1
  %109 = xor i32 %61, %0
  %110 = or i32 %48, %85
  %111 = or i32 %29, %0
  %112 = xor i32 %37, %2
  %113 = and i32 %61, %24
  %114 = and i32 %29, %0
  %115 = and i32 %49, %24
  %116 = xor i32 %115, 1073741823
  %117 = xor i32 %116, %114
  %118 = xor i32 %83, %26
  %119 = or i32 %88, %8
  %120 = or i32 %49, %37
  %121 = or i32 %49, %59
  %122 = shl i32 %121, 1
  %123 = or i32 %83, %29
  %124 = xor i32 %81, -1
  %125 = xor i32 %48, %124
  %126 = and i32 %11, %101
  %127 = or i32 %25, %40
  %128 = or i32 %42, %2
  %129 = and i32 %26, %24
  %130 = or i32 %56, %24
  %131 = or i32 %22, %34
  %132 = or i32 %88, %59
  %133 = xor i32 %83, -1
  %134 = shl i32 %133, 1
  %135 = xor i32 %101, -1
  %136 = or i32 %34, %135
  %137 = and i32 %101, %56
  %138 = xor i32 %56, %0
  %139 = or i32 %42, %34
  %140 = or i32 %25, %135
  %141 = or i32 %88, %22
  %142 = and i32 %29, %24
  %143 = and i32 %31, %0
  %144 = or i32 %142, %143
  %145 = and i32 %35, %8
  %146 = and i32 %49, %38
  %147 = xor i32 %79, %1
  %148 = or i32 %11, %40
  %149 = or i32 %88, %32
  %150 = or i32 %83, %1
  %151 = and i32 %34, %38
  %152 = or i32 %71, %1
  %153 = shl i32 %152, 1
  %154 = and i32 %89, %40
  %155 = xor i32 %88, %1
  %156 = or i32 %27, %0
  %157 = or i32 %34, %1
  %158 = or i32 %49, %135
  %159 = and i32 %11, %1
  %160 = or i32 %42, %56
  %161 = and i32 %133, %1
  %162 = and i32 %34, %40
  %163 = or i32 %11, %135
  %164 = or i32 %29, %24
  %165 = and i32 %53, %0
  %166 = or i32 %93, %165
  %167 = or i32 %37, %2
  %168 = and i32 %49, %101
  %169 = xor i32 %31, %0
  %170 = or i32 %114, %169
  %171 = xor i32 %88, %31
  %172 = or i32 %11, %42
  %173 = and i32 %133, %8
  %174 = or i32 %29, %37
  %175 = xor i32 %38, %2
  %176 = and i32 %133, %40
  %177 = or i32 %34, %8
  %178 = shl i32 %177, 1
  %179 = and i32 %56, %38
  %180 = or i32 %40, %2
  %181 = xor i32 %31, %42
  %182 = and i32 %22, %34
  %183 = xor i32 %143, 2147483647
  %184 = xor i32 %183, %142
  %185 = shl i32 %184, 1
  %186 = or i32 %11, %8
  %187 = and i32 %101, %25
  %188 = or i32 %25, %59
  %189 = or i32 %26, %0
  %190 = and i32 %70, %8
  %191 = xor i32 %101, %2
  %192 = xor i32 %83, %1
  %193 = and i32 %31, %24
  %194 = or i32 %11, %1
  %195 = or i32 %31, %0
  %196 = shl i32 %195, 1
  %197 = or i32 %114, %115
  %198 = or i32 %135, %2
  %199 = shl i32 %198, 1
  %200 = and i32 %49, %43
  %201 = or i32 %56, %135
  %202 = or i32 %34, %59
  %203 = or i32 %42, %25
  %204 = or i32 %49, %42
  %205 = xor i32 %32, %0
  %206 = xor i32 %83, %61
  %207 = xor i32 %63, %0
  %208 = and i32 %11, %43
  %209 = and i32 %61, %0
  %210 = and i32 %56, %24
  %211 = and i32 %49, %0
  %212 = xor i32 %211, -1
  %213 = xor i32 %142, %212
  %214 = and i32 %34, %43
  %215 = or i32 %37, %34
  %216 = and i32 %101, %34
  %217 = xor i32 %93, %94
  %218 = add i32 %101, 1
  %219 = xor i32 %35, %42
  %220 = xor i32 %48, %50
  %221 = and i32 %34, %8
  %222 = shl i32 %221, 1
  %223 = or i32 %42, %32
  %224 = or i32 %64, %0
  %225 = add i32 %35, 1
  %226 = and i32 %22, %89
  %227 = or i32 %22, %79
  %228 = and i32 %49, %9
  %229 = and i32 %9, %56
  %230 = and i32 %70, %22
  %231 = or i32 %114, %99
  %232 = xor i32 %135, %2
  %233 = or i32 %63, %0
  %234 = and i32 %9, %34
  %235 = or i32 %79, %1
  %236 = and i32 %22, %2
  %237 = and i32 %70, %1
  %238 = or i32 %88, %1
  %239 = or i32 %34, %40
  %240 = or i32 %88, %40
  %241 = xor i32 %88, %64
  %242 = and i32 %11, %38
  %243 = xor i32 %133, %1
  %244 = or i32 %88, %63
  %245 = or i32 %11, %59
  %246 = and i32 %43, %2
  %247 = or i32 %42, %71
  %248 = and i32 %32, %24
  %249 = mul i32 %248, -35
  %250 = and i32 %63, %24
  %251 = and i32 %32, %0
  %252 = mul i32 %251, -15
  %253 = and i32 %63, %0
  %254 = mul i32 %253, -33
  %255 = and i32 %27, %24
  %256 = mul i32 %255, -13
  %257 = mul i32 %142, -17
  %258 = and i32 %27, %0
  %259 = mul i32 %258, -26
  %260 = mul i32 %114, -22
  %261 = add i32 %35, %40
  %262 = add i32 %261, %167
  %263 = add i32 %262, %31
  %264 = add i32 %263, %127
  %265 = add i32 %264, %77
  %266 = add i32 %265, %243
  %267 = add i32 %266, %244
  %268 = add i32 %267, %242
  %269 = add i32 %268, %235
  %270 = add i32 %269, %234
  %271 = add i32 %270, %215
  %272 = add i32 %271, %193
  %273 = add i32 %272, %156
  %274 = add i32 %273, %141
  %275 = add i32 %274, %119
  %276 = add i32 %275, %76
  %277 = add i32 %276, %67
  %278 = add i32 %277, %23
  %279 = shl i32 %278, 1
  %280 = add i32 %247, %200
  %281 = sub i32 %130, %280
  %282 = add i32 %281, %108
  %283 = add i32 %282, %80
  %284 = add i32 %283, %46
  %285 = mul i32 %284, 3
  %286 = add i32 %78, %8
  %287 = add i32 %286, %144
  %288 = add i32 %287, %20
  %289 = add i32 %288, %117
  %290 = shl i32 %289, 2
  %291 = sub i32 %246, %233
  %292 = add i32 %291, %6
  %293 = add i32 %292, %217
  %294 = mul i32 %293, 5
  %295 = sub i32 %21, %250
  %296 = mul i32 %295, 6
  %297 = add i32 %1, 3
  %298 = sub i32 %297, %2
  %299 = sub i32 %298, %42
  %300 = add i32 %299, %25
  %301 = sub i32 %300, %37
  %302 = add i32 %301, %218
  %303 = add i32 %302, %101
  %304 = add i32 %303, %38
  %305 = sub i32 %304, %3
  %306 = add i32 %305, %34
  %307 = sub i32 %306, %39
  %308 = sub i32 %307, %41
  %309 = sub i32 %308, %44
  %310 = sub i32 %309, %45
  %311 = add i32 %310, %60
  %312 = add i32 %311, %66
  %313 = sub i32 %312, %75
  %314 = add i32 %313, %83
  %315 = sub i32 %314, %84
  %316 = add i32 %315, %86
  %317 = sub i32 %316, %91
  %318 = add i32 %317, %61
  %319 = sub i32 %318, %97
  %320 = sub i32 %319, %105
  %321 = add i32 %320, %32
  %322 = sub i32 %321, %112
  %323 = sub i32 %322, %128
  %324 = add i32 %323, %140
  %325 = add i32 %324, %89
  %326 = add i32 %325, %175
  %327 = add i32 %326, %180
  %328 = add i32 %327, %187
  %329 = sub i32 %328, %188
  %330 = sub i32 %329, %191
  %331 = sub i32 %330, %11
  %332 = add i32 %331, %203
  %333 = add i32 %332, %225
  %334 = add i32 %333, %232
  %335 = sub i32 %334, %236
  %336 = sub i32 %335, %49
  %337 = sub i32 %336, %88
  %338 = add i32 %337, %56
  %339 = sub i32 %338, %28
  %340 = sub i32 %339, %30
  %341 = sub i32 %340, %33
  %342 = sub i32 %341, %36
  %343 = sub i32 %342, %57
  %344 = add i32 %343, %58
  %345 = sub i32 %344, %62
  %346 = add i32 %345, %65
  %347 = sub i32 %346, %69
  %348 = sub i32 %347, %74
  %349 = add i32 %348, %85
  %350 = add i32 %349, %87
  %351 = add i32 %350, %90
  %352 = add i32 %351, %92
  %353 = add i32 %352, %98
  %354 = add i32 %353, %104
  %355 = sub i32 %354, %106
  %356 = sub i32 %355, %107
  %357 = sub i32 %356, %109
  %358 = sub i32 %357, %111
  %359 = add i32 %358, %113
  %360 = add i32 %359, %118
  %361 = sub i32 %360, %120
  %362 = add i32 %361, %123
  %363 = add i32 %362, %126
  %364 = sub i32 %363, %129
  %365 = add i32 %364, %131
  %366 = sub i32 %365, %132
  %367 = sub i32 %366, %134
  %368 = sub i32 %367, %136
  %369 = add i32 %368, %137
  %370 = sub i32 %369, %138
  %371 = add i32 %370, %139
  %372 = add i32 %371, %145
  %373 = add i32 %372, %146
  %374 = sub i32 %373, %147
  %375 = sub i32 %374, %148
  %376 = add i32 %375, %149
  %377 = add i32 %376, %150
  %378 = add i32 %377, %151
  %379 = sub i32 %378, %154
  %380 = sub i32 %379, %155
  %381 = add i32 %380, %157
  %382 = add i32 %381, %158
  %383 = sub i32 %382, %159
  %384 = add i32 %383, %160
  %385 = sub i32 %384, %50
  %386 = add i32 %385, %161
  %387 = add i32 %386, %162
  %388 = sub i32 %387, %163
  %389 = sub i32 %388, %164
  %390 = add i32 %389, %168
  %391 = sub i32 %390, %171
  %392 = add i32 %391, %172
  %393 = add i32 %392, %173
  %394 = sub i32 %393, %174
  %395 = add i32 %394, %176
  %396 = sub i32 %395, %179
  %397 = sub i32 %396, %181
  %398 = sub i32 %397, %182
  %399 = add i32 %398, %94
  %400 = sub i32 %399, %186
  %401 = add i32 %400, %189
  %402 = add i32 %401, %190
  %403 = sub i32 %402, %192
  %404 = add i32 %403, %194
  %405 = sub i32 %404, %199
  %406 = sub i32 %405, %201
  %407 = sub i32 %406, %202
  %408 = add i32 %407, %204
  %409 = sub i32 %408, %205
  %410 = add i32 %409, %206
  %411 = add i32 %410, %207
  %412 = add i32 %411, %208
  %413 = add i32 %412, %209
  %414 = sub i32 %413, %210
  %415 = add i32 %414, %214
  %416 = sub i32 %415, %216
  %417 = sub i32 %416, %115
  %418 = sub i32 %417, %219
  %419 = sub i32 %418, %223
  %420 = add i32 %419, %224
  %421 = sub i32 %420, %226
  %422 = sub i32 %421, %227
  %423 = sub i32 %422, %228
  %424 = add i32 %423, %229
  %425 = sub i32 %424, %230
  %426 = add i32 %425, %237
  %427 = add i32 %426, %238
  %428 = add i32 %427, %239
  %429 = add i32 %428, %240
  %430 = add i32 %429, %241
  %431 = add i32 %430, %245
  %432 = add i32 %431, %143
  %433 = add i32 %432, %16
  %434 = add i32 %433, %15
  %435 = add i32 %434, %20
  %436 = add i32 %435, %52
  %437 = add i32 %436, %55
  %438 = sub i32 %437, %73
  %439 = add i32 %438, %82
  %440 = sub i32 %439, %96
  %441 = add i32 %440, %100
  %442 = sub i32 %441, %103
  %443 = sub i32 %442, %110
  %444 = sub i32 %443, %122
  %445 = sub i32 %444, %125
  %446 = sub i32 %445, %153
  %447 = sub i32 %446, %166
  %448 = sub i32 %447, %170
  %449 = sub i32 %448, %178
  %450 = sub i32 %449, %196
  %451 = add i32 %450, %197
  %452 = add i32 %451, %213
  %453 = sub i32 %452, %220
  %454 = sub i32 %453, %222
  %455 = add i32 %454, %231
  %456 = add i32 %455, %249
  %457 = add i32 %456, %252
  %458 = add i32 %457, %254
  %459 = add i32 %458, %256
  %460 = add i32 %459, %257
  %461 = add i32 %460, %259
  %462 = add i32 %461, %260
  %463 = sub i32 %462, %19
  %464 = sub i32 %463, %185
  %465 = add i32 %464, %296
  %466 = add i32 %465, %294
  %467 = add i32 %466, %285
  %468 = add i32 %467, %290
  %469 = add i32 %468, %279
  %470 = icmp eq i32 %14, %469
  %471 = select i1 %470, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %472 = tail call i32 @puts(i8* nonnull dereferenceable(1) %471)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
