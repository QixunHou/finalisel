; ModuleID = '../.././c_source_file/0293_path_condition_crackme.c'
source_filename = "../.././c_source_file/0293_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, -1
  %7 = and i32 %6, %1
  %8 = xor i32 %7, -1
  %9 = xor i32 %5, %8
  %10 = xor i32 %0, -1
  %11 = and i32 %4, %2
  %12 = and i32 %11, %10
  %13 = xor i32 %2, %1
  %14 = or i32 %13, %10
  %15 = xor i32 %14, -1
  %16 = or i32 %12, %15
  %17 = and i32 %6, %0
  %18 = xor i32 %17, -1
  %19 = xor i32 %1, %0
  %20 = and i32 %19, %18
  %21 = and i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %13, %22
  %24 = and i32 %2, %1
  %25 = and i32 %24, %10
  %26 = and i32 %13, %0
  %27 = xor i32 %26, 2147483647
  %28 = xor i32 %27, %25
  %29 = shl i32 %28, 1
  %30 = or i32 %6, %1
  %31 = and i32 %30, %0
  %32 = or i32 %17, %1
  %33 = or i32 %2, %1
  %34 = xor i32 %33, %21
  %35 = xor i32 %21, %2
  %36 = shl i32 %35, 1
  %37 = or i32 %17, %4
  %38 = or i32 %6, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %19, %41
  %43 = xor i32 %17, %30
  %44 = xor i32 %19, -1
  %45 = or i32 %41, %1
  %46 = shl i32 %45, 1
  %47 = and i32 %8, %10
  %48 = xor i32 %5, -1
  %49 = and i32 %40, %48
  %50 = or i32 %4, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %51, %2
  %53 = or i32 %2, %0
  %54 = and i32 %53, %4
  %55 = xor i32 %24, -1
  %56 = and i32 %55, %0
  %57 = add i32 %21, 1
  %58 = and i32 %24, %0
  %59 = and i32 %33, %10
  %60 = xor i32 %58, -1
  %61 = xor i32 %59, %60
  %62 = xor i32 %13, -1
  %63 = or i32 %5, %62
  %64 = or i32 %1, %0
  %65 = and i32 %64, %41
  %66 = and i32 %11, %0
  %67 = or i32 %13, %0
  %68 = xor i32 %67, 2147483647
  %69 = or i32 %68, %66
  %70 = or i32 %21, %41
  %71 = shl i32 %70, 1
  %72 = xor i32 %30, %0
  %73 = and i32 %22, %2
  %74 = xor i32 %17, %55
  %75 = xor i32 %53, %21
  %76 = and i32 %38, %44
  %77 = shl i32 %76, 1
  %78 = and i32 %2, %0
  %79 = xor i32 %78, %64
  %80 = xor i32 %78, %8
  %81 = xor i32 %5, %55
  %82 = xor i32 %53, -1
  %83 = or i32 %82, %1
  %84 = or i32 %41, %44
  %85 = or i32 %19, %6
  %86 = or i32 %4, %2
  %87 = and i32 %86, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %12, %88
  %90 = or i32 %40, %21
  %91 = xor i32 %50, %2
  %92 = and i32 %18, %1
  %93 = xor i32 %64, -1
  %94 = or i32 %62, %93
  %95 = add i32 %40, 1
  %96 = shl i32 %55, 1
  %97 = or i32 %33, %10
  %98 = xor i32 %24, %0
  %99 = xor i32 %39, %1
  %100 = xor i32 %66, %67
  %101 = and i32 %33, %0
  %102 = or i32 %25, %101
  %103 = and i32 %41, %1
  %104 = and i32 %64, %6
  %105 = and i32 %19, %41
  %106 = and i32 %41, %44
  %107 = and i32 %13, %48
  %108 = and i32 %40, %44
  %109 = xor i32 %38, %21
  %110 = xor i32 %13, %0
  %111 = xor i32 %58, %110
  %112 = or i32 %58, %59
  %113 = shl i32 %2, 1
  %114 = or i32 %93, %2
  %115 = or i32 %78, %4
  %116 = xor i32 %22, %2
  %117 = and i32 %40, %4
  %118 = or i32 %39, %1
  %119 = and i32 %40, %19
  %120 = and i32 %8, %0
  %121 = or i32 %39, %4
  %122 = xor i32 %33, -1
  %123 = or i32 %78, %122
  %124 = xor i32 %33, %0
  %125 = or i32 %40, %5
  %126 = and i32 %62, %22
  %127 = and i32 %6, %44
  %128 = or i32 %13, %51
  %129 = xor i32 %55, %0
  %130 = xor i32 %30, -1
  %131 = or i32 %130, %0
  %132 = xor i32 %38, %1
  %133 = or i32 %40, %44
  %134 = shl i32 %133, 1
  %135 = or i32 %30, %10
  %136 = and i32 %55, %10
  %137 = or i32 %41, %51
  %138 = or i32 %21, %62
  %139 = or i32 %33, %0
  %140 = or i32 %13, %5
  %141 = shl i32 %140, 2
  %142 = or i32 %82, %44
  %143 = and i32 %62, %10
  %144 = shl i32 %143, 1
  %145 = or i32 %62, %10
  %146 = shl i32 %145, 2
  %147 = or i32 %7, %0
  %148 = or i32 %122, %10
  %149 = xor i32 %64, %2
  %150 = or i32 %82, %4
  %151 = or i32 %21, %39
  %152 = and i32 %64, %62
  %153 = and i32 %38, %19
  %154 = or i32 %78, %44
  %155 = or i32 %6, %93
  %156 = xor i32 %48, %2
  %157 = shl i32 %156, 1
  %158 = or i32 %39, %44
  %159 = or i32 %41, %4
  %160 = and i32 %13, %10
  %161 = or i32 %58, %160
  %162 = shl i32 %161, 1
  %163 = xor i32 %93, %2
  %164 = and i32 %53, %1
  %165 = or i32 %55, %10
  %166 = or i32 %62, %51
  %167 = or i32 %55, %0
  %168 = or i32 %44, %2
  %169 = xor i32 %86, %0
  %170 = or i32 %66, %169
  %171 = xor i32 %160, %60
  %172 = add i32 %13, 1
  %173 = xor i32 %8, %0
  %174 = and i32 %6, %48
  %175 = or i32 %78, %19
  %176 = and i32 %40, %1
  %177 = or i32 %12, %87
  %178 = and i32 %50, %41
  %179 = shl i32 %178, 1
  %180 = or i32 %58, %124
  %181 = or i32 %40, %93
  %182 = and i32 %44, %2
  %183 = shl i32 %182, 1
  %184 = or i32 %6, %44
  %185 = xor i32 %17, %1
  %186 = or i32 %21, %6
  %187 = add i32 %53, 1
  %188 = and i32 %50, %62
  %189 = and i32 %41, %22
  %190 = xor i32 %53, %1
  %191 = or i32 %7, %5
  %192 = shl i32 %191, 1
  %193 = or i32 %13, %21
  %194 = or i32 %17, %130
  %195 = xor i32 %78, %50
  %196 = or i32 %5, %41
  %197 = or i32 %21, %130
  %198 = and i32 %38, %1
  %199 = and i32 %86, %10
  %200 = or i32 %66, %199
  %201 = and i32 %50, %2
  %202 = xor i32 %101, -1
  %203 = xor i32 %25, %202
  %204 = or i32 %5, %6
  %205 = xor i32 %5, %2
  %206 = and i32 %53, %19
  %207 = or i32 %17, %19
  %208 = xor i32 %78, -1
  %209 = and i32 %208, %4
  %210 = and i32 %41, %4
  %211 = or i32 %24, %5
  %212 = and i32 %18, %4
  %213 = shl i32 %212, 1
  %214 = or i32 %122, %0
  %215 = xor i32 %12, %14
  %216 = and i32 %64, %2
  %217 = add i32 %50, 1
  %218 = and i32 %18, %44
  %219 = or i32 %19, %2
  %220 = shl i32 %219, 1
  %221 = xor i32 %199, -1
  %222 = xor i32 %66, %221
  %223 = xor i32 %82, %1
  %224 = or i32 %19, %39
  %225 = or i32 %40, %51
  %226 = or i32 %8, %0
  %227 = shl i32 %5, 1
  %228 = xor i32 %7, %0
  %229 = xor i32 %18, %1
  %230 = or i32 %21, %2
  %231 = and i32 %6, %22
  %232 = or i32 %78, %93
  %233 = and i32 %53, %44
  %234 = and i32 %62, %0
  %235 = shl i32 %234, 1
  %236 = and i32 %41, %48
  %237 = or i32 %78, %7
  %238 = or i32 %130, %10
  %239 = and i32 %40, %64
  %240 = or i32 %25, %26
  %241 = xor i32 %130, %0
  %242 = or i32 %24, %0
  %243 = or i32 %40, %4
  %244 = and i32 %50, %6
  %245 = or i32 %30, %0
  %246 = xor i32 %208, %1
  %247 = and i32 %19, %6
  %248 = or i32 %19, %82
  %249 = or i32 %51, %2
  %250 = shl i32 %249, 2
  %251 = xor i32 %62, %0
  %252 = xor i32 %124, %60
  %253 = xor i32 %110, -1
  %254 = or i32 %58, %253
  %255 = xor i32 %122, %0
  %256 = or i32 %17, %24
  %257 = add i32 %64, 1
  %258 = and i32 %122, %10
  %259 = shl i32 %258, 3
  %260 = and i32 %7, %10
  %261 = mul i32 %260, 27
  %262 = and i32 %122, %0
  %263 = mul i32 %262, 13
  %264 = and i32 %7, %0
  %265 = shl i32 %264, 2
  %266 = and i32 %130, %10
  %267 = and i32 %130, %0
  %268 = add i32 %244, %44
  %269 = add i32 %268, %168
  %270 = add i32 %269, %127
  %271 = add i32 %270, %91
  %272 = add i32 %271, %25
  %273 = add i32 %272, %248
  %274 = add i32 %273, %209
  %275 = add i32 %274, %185
  %276 = add i32 %275, %173
  %277 = add i32 %276, %129
  %278 = add i32 %277, %108
  %279 = add i32 %278, %105
  %280 = add i32 %279, %84
  %281 = add i32 %280, %75
  %282 = add i32 %281, %63
  %283 = add i32 %282, %43
  %284 = add i32 %283, %23
  %285 = add i32 %284, %170
  %286 = add i32 %285, %100
  %287 = add i32 %286, %69
  %288 = shl i32 %287, 1
  %289 = add i32 %195, %13
  %290 = sub i32 %289, %266
  %291 = add i32 %290, %190
  %292 = add i32 %291, %142
  %293 = add i32 %292, %81
  %294 = sub i32 %293, %34
  %295 = mul i32 %294, 3
  %296 = add i32 %78, %230
  %297 = sub i32 %39, %296
  %298 = sub i32 %297, %115
  %299 = mul i32 %298, 5
  %300 = add i32 %58, %267
  %301 = mul i32 %300, 26
  %302 = sub i32 %10, %0
  %303 = add i32 %302, %57
  %304 = add i32 %303, %48
  %305 = sub i32 %304, %21
  %306 = add i32 %305, %217
  %307 = add i32 %306, %6
  %308 = add i32 %307, %64
  %309 = sub i32 %308, %19
  %310 = add i32 %309, %257
  %311 = sub i32 %310, %40
  %312 = add i32 %311, %52
  %313 = sub i32 %312, %17
  %314 = sub i32 %313, %73
  %315 = sub i32 %314, %33
  %316 = add i32 %315, %85
  %317 = add i32 %316, %95
  %318 = sub i32 %317, %104
  %319 = sub i32 %318, %113
  %320 = add i32 %319, %114
  %321 = add i32 %320, %116
  %322 = sub i32 %321, %149
  %323 = sub i32 %322, %155
  %324 = sub i32 %323, %163
  %325 = add i32 %324, %172
  %326 = sub i32 %325, %174
  %327 = sub i32 %326, %184
  %328 = sub i32 %327, %186
  %329 = add i32 %328, %187
  %330 = add i32 %329, %18
  %331 = sub i32 %330, %24
  %332 = add i32 %331, %201
  %333 = sub i32 %332, %204
  %334 = sub i32 %333, %205
  %335 = add i32 %334, %216
  %336 = add i32 %335, %8
  %337 = add i32 %336, %53
  %338 = sub i32 %337, %227
  %339 = sub i32 %338, %231
  %340 = sub i32 %339, %30
  %341 = sub i32 %340, %247
  %342 = sub i32 %341, %38
  %343 = add i32 %342, %208
  %344 = add i32 %343, %130
  %345 = sub i32 %344, %20
  %346 = add i32 %345, %31
  %347 = add i32 %346, %26
  %348 = sub i32 %347, %32
  %349 = sub i32 %348, %36
  %350 = add i32 %349, %37
  %351 = sub i32 %350, %42
  %352 = sub i32 %351, %47
  %353 = add i32 %352, %49
  %354 = add i32 %353, %54
  %355 = sub i32 %354, %56
  %356 = sub i32 %355, %65
  %357 = sub i32 %356, %72
  %358 = sub i32 %357, %74
  %359 = sub i32 %358, %79
  %360 = sub i32 %359, %80
  %361 = sub i32 %360, %83
  %362 = add i32 %361, %90
  %363 = add i32 %362, %92
  %364 = sub i32 %363, %94
  %365 = sub i32 %364, %96
  %366 = sub i32 %365, %97
  %367 = add i32 %366, %98
  %368 = sub i32 %367, %99
  %369 = sub i32 %368, %103
  %370 = add i32 %369, %106
  %371 = sub i32 %370, %107
  %372 = sub i32 %371, %109
  %373 = add i32 %372, %67
  %374 = sub i32 %373, %117
  %375 = sub i32 %374, %118
  %376 = add i32 %375, %119
  %377 = sub i32 %376, %120
  %378 = sub i32 %377, %121
  %379 = add i32 %378, %123
  %380 = sub i32 %379, %124
  %381 = add i32 %380, %125
  %382 = add i32 %381, %126
  %383 = sub i32 %382, %128
  %384 = add i32 %383, %131
  %385 = sub i32 %384, %132
  %386 = add i32 %385, %135
  %387 = sub i32 %386, %136
  %388 = sub i32 %387, %137
  %389 = add i32 %388, %138
  %390 = sub i32 %389, %59
  %391 = add i32 %390, %139
  %392 = add i32 %391, %147
  %393 = sub i32 %392, %148
  %394 = sub i32 %393, %150
  %395 = sub i32 %394, %151
  %396 = add i32 %395, %152
  %397 = sub i32 %396, %153
  %398 = add i32 %397, %154
  %399 = sub i32 %398, %157
  %400 = add i32 %399, %158
  %401 = sub i32 %400, %159
  %402 = add i32 %401, %164
  %403 = sub i32 %402, %165
  %404 = sub i32 %403, %166
  %405 = sub i32 %404, %167
  %406 = add i32 %405, %175
  %407 = add i32 %406, %176
  %408 = sub i32 %407, %181
  %409 = sub i32 %408, %183
  %410 = sub i32 %409, %188
  %411 = add i32 %410, %189
  %412 = add i32 %411, %193
  %413 = add i32 %412, %194
  %414 = add i32 %413, %196
  %415 = add i32 %414, %197
  %416 = sub i32 %415, %198
  %417 = sub i32 %416, %206
  %418 = add i32 %417, %207
  %419 = sub i32 %418, %210
  %420 = add i32 %419, %211
  %421 = sub i32 %420, %214
  %422 = sub i32 %421, %218
  %423 = sub i32 %422, %220
  %424 = add i32 %423, %14
  %425 = add i32 %424, %223
  %426 = add i32 %425, %224
  %427 = add i32 %426, %225
  %428 = add i32 %427, %226
  %429 = sub i32 %428, %228
  %430 = add i32 %429, %229
  %431 = add i32 %430, %110
  %432 = add i32 %431, %232
  %433 = add i32 %432, %233
  %434 = add i32 %433, %236
  %435 = sub i32 %434, %237
  %436 = add i32 %435, %238
  %437 = add i32 %436, %239
  %438 = sub i32 %437, %101
  %439 = sub i32 %438, %241
  %440 = add i32 %439, %242
  %441 = add i32 %440, %243
  %442 = sub i32 %441, %245
  %443 = add i32 %442, %246
  %444 = add i32 %443, %160
  %445 = sub i32 %444, %250
  %446 = add i32 %445, %251
  %447 = sub i32 %446, %255
  %448 = add i32 %447, %256
  %449 = add i32 %448, %16
  %450 = sub i32 %449, %46
  %451 = sub i32 %450, %61
  %452 = sub i32 %451, %71
  %453 = sub i32 %452, %77
  %454 = sub i32 %453, %89
  %455 = sub i32 %454, %102
  %456 = sub i32 %455, %111
  %457 = add i32 %456, %112
  %458 = sub i32 %457, %134
  %459 = sub i32 %458, %141
  %460 = sub i32 %459, %144
  %461 = sub i32 %460, %146
  %462 = add i32 %461, %171
  %463 = sub i32 %462, %177
  %464 = sub i32 %463, %179
  %465 = add i32 %464, %180
  %466 = sub i32 %465, %192
  %467 = add i32 %466, %200
  %468 = sub i32 %467, %203
  %469 = sub i32 %468, %213
  %470 = sub i32 %469, %215
  %471 = sub i32 %470, %222
  %472 = sub i32 %471, %235
  %473 = sub i32 %472, %240
  %474 = sub i32 %473, %252
  %475 = sub i32 %474, %254
  %476 = add i32 %475, %259
  %477 = add i32 %476, %261
  %478 = add i32 %477, %263
  %479 = sub i32 %478, %265
  %480 = sub i32 %479, %162
  %481 = add i32 %480, %301
  %482 = sub i32 %481, %29
  %483 = add i32 %482, %299
  %484 = add i32 %483, %295
  %485 = add i32 %484, %288
  %486 = icmp eq i32 %9, %485
  %487 = select i1 %486, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %488 = tail call i32 @puts(i8* nonnull dereferenceable(1) %487)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
