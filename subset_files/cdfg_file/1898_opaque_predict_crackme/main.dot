digraph "DFG for'main' function" {
	Node0x7d4e38[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x7d4eb8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x7d4f48[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x7d4fa8[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x7d5058[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x7d5488[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x7d5568[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x7d5668[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x7d5728[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x7d57d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x7d5898[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x7d5948[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x7cfbb0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x7d5b48[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x7d6ab8[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x7d7128[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x7d7188[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x7d7200[shape=record, label="  %14 = xor i32 %12, %11"];
	Node0x7d7270[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x7d72e0[shape=record, label="  %16 = xor i32 %11, -1"];
	Node0x7d7350[shape=record, label="  %17 = mul i32 %16, -5"];
	Node0x7d73c0[shape=record, label="  %18 = add i32 %17, -1"];
	Node0x7d7430[shape=record, label="  %19 = add i32 %18, %15"];
	Node0x7d74a0[shape=record, label="  %20 = or i32 %12, %11"];
	Node0x7d7510[shape=record, label="  %21 = xor i32 %12, -1"];
	Node0x7d7580[shape=record, label="  %22 = or i32 %11, %21"];
	Node0x7d75f0[shape=record, label="  %23 = xor i32 %11, 2147483647"];
	Node0x7d7660[shape=record, label="  %24 = or i32 %23, %12"];
	Node0x7d76d0[shape=record, label="  %25 = shl i32 %20, 3"];
	Node0x7d7740[shape=record, label="  %26 = xor i32 %25, -8"];
	Node0x7d77b0[shape=record, label="  %27 = xor i32 %22, -1"];
	Node0x7d7820[shape=record, label="  %28 = and i32 %12, %11"];
	Node0x7d7890[shape=record, label="  %29 = xor i32 %13, %10"];
	Node0x7d7900[shape=record, label="  %30 = xor i32 %10, -1"];
	Node0x7d7970[shape=record, label="  %31 = or i32 %13, %30"];
	Node0x7d79e0[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0x7d7a50[shape=record, label="  %33 = and i32 %13, %10"];
	Node0x7d7ac0[shape=record, label="  %34 = shl i32 %33, 1"];
	Node0x7d7b30[shape=record, label="  %35 = xor i32 %34, -2"];
	Node0x7d7ba0[shape=record, label="  %36 = and i32 %13, %30"];
	Node0x7d7c10[shape=record, label="  %37 = shl i32 %33, 2"];
	Node0x7d7c80[shape=record, label="  %38 = add i32 %28, %27"];
	Node0x7d7cf0[shape=record, label="  %39 = mul i32 %38, -3"];
	Node0x7d7d60[shape=record, label="  %40 = sub i32 %11, %10"];
	Node0x7d7dd0[shape=record, label="  %41 = add i32 %40, %24"];
	Node0x7d7e40[shape=record, label="  %42 = shl i32 %41, 1"];
	Node0x7d7eb0[shape=record, label="  %43 = add i32 %12, %20"];
	Node0x7d7f20[shape=record, label="  %44 = sub i32 %22, %43"];
	Node0x7d7f90[shape=record, label="  %45 = add i32 %44, %29"];
	Node0x7d8000[shape=record, label="  %46 = add i32 %45, %31"];
	Node0x7d8070[shape=record, label="  %47 = sub i32 %46, %36"];
	Node0x7d80e0[shape=record, label="  %48 = sub i32 %47, %26"];
	Node0x7d8150[shape=record, label="  %49 = sub i32 %48, %32"];
	Node0x7d81c0[shape=record, label="  %50 = add i32 %49, %37"];
	Node0x7d8230[shape=record, label="  %51 = add i32 %50, %39"];
	Node0x7d82a0[shape=record, label="  %52 = add i32 %51, %35"];
	Node0x7d8310[shape=record, label="  %53 = add i32 %52, %42"];
	Node0x7d8380[shape=record, label="  %54 = icmp eq i32 %19, %53"];
	Node0x7748b8[shape=record, label="  %55 = select i1 %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7d8410[shape=record, label="  %56 = call i32 @puts(i8* nonnull dereferenceable(1) %55) #5"];
	Node0x7d86b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x7d8818[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x7d8928[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x7d8a38[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x7d8af8[shape=record, label="  ret i32 0"];
	Node0x7d4e38 -> Node0x7d4eb8;
	Node0x7d4eb8 -> Node0x7d4f48;
	Node0x7d4f48 -> Node0x7d4fa8;
	Node0x7d4fa8 -> Node0x7d5058;
	Node0x7d5058 -> Node0x7d5488;
	Node0x7d5488 -> Node0x7d5568;
	Node0x7d5568 -> Node0x7d5668;
	Node0x7d5668 -> Node0x7d5728;
	Node0x7d5728 -> Node0x7d57d8;
	Node0x7d57d8 -> Node0x7d5898;
	Node0x7d5898 -> Node0x7d5948;
	Node0x7d5948 -> Node0x7cfbb0;
	Node0x7cfbb0 -> Node0x7d5b48;
	Node0x7d5b48 -> Node0x7d6ab8;
	Node0x7d6ab8 -> Node0x7d7128;
	Node0x7d7128 -> Node0x7d7188;
	Node0x7d7188 -> Node0x7d7200;
	Node0x7d7200 -> Node0x7d7270;
	Node0x7d7270 -> Node0x7d72e0;
	Node0x7d72e0 -> Node0x7d7350;
	Node0x7d7350 -> Node0x7d73c0;
	Node0x7d73c0 -> Node0x7d7430;
	Node0x7d7430 -> Node0x7d74a0;
	Node0x7d74a0 -> Node0x7d7510;
	Node0x7d7510 -> Node0x7d7580;
	Node0x7d7580 -> Node0x7d75f0;
	Node0x7d75f0 -> Node0x7d7660;
	Node0x7d7660 -> Node0x7d76d0;
	Node0x7d76d0 -> Node0x7d7740;
	Node0x7d7740 -> Node0x7d77b0;
	Node0x7d77b0 -> Node0x7d7820;
	Node0x7d7820 -> Node0x7d7890;
	Node0x7d7890 -> Node0x7d7900;
	Node0x7d7900 -> Node0x7d7970;
	Node0x7d7970 -> Node0x7d79e0;
	Node0x7d79e0 -> Node0x7d7a50;
	Node0x7d7a50 -> Node0x7d7ac0;
	Node0x7d7ac0 -> Node0x7d7b30;
	Node0x7d7b30 -> Node0x7d7ba0;
	Node0x7d7ba0 -> Node0x7d7c10;
	Node0x7d7c10 -> Node0x7d7c80;
	Node0x7d7c80 -> Node0x7d7cf0;
	Node0x7d7cf0 -> Node0x7d7d60;
	Node0x7d7d60 -> Node0x7d7dd0;
	Node0x7d7dd0 -> Node0x7d7e40;
	Node0x7d7e40 -> Node0x7d7eb0;
	Node0x7d7eb0 -> Node0x7d7f20;
	Node0x7d7f20 -> Node0x7d7f90;
	Node0x7d7f90 -> Node0x7d8000;
	Node0x7d8000 -> Node0x7d8070;
	Node0x7d8070 -> Node0x7d80e0;
	Node0x7d80e0 -> Node0x7d8150;
	Node0x7d8150 -> Node0x7d81c0;
	Node0x7d81c0 -> Node0x7d8230;
	Node0x7d8230 -> Node0x7d82a0;
	Node0x7d82a0 -> Node0x7d8310;
	Node0x7d8310 -> Node0x7d8380;
	Node0x7d8380 -> Node0x7748b8;
	Node0x7748b8 -> Node0x7d8410;
	Node0x7d8410 -> Node0x7d86b8;
	Node0x7d86b8 -> Node0x7d8818;
	Node0x7d8818 -> Node0x7d8928;
	Node0x7d8928 -> Node0x7d8a38;
	Node0x7d8a38 -> Node0x7d8af8;
edge [color=red]
	Node0x7d4e38 -> Node0x7d5058;
	Node0x7d5058 -> Node0x7d5488;
	Node0x7d4eb8 -> Node0x7d5568;
	Node0x7d5568 -> Node0x7d5668;
	Node0x7d4f48 -> Node0x7d5728;
	Node0x7d5728 -> Node0x7d57d8;
	Node0x7d4fa8 -> Node0x7d5898;
	Node0x7d5898 -> Node0x7d5948;
	Node0x7d4e38 -> Node0x7cfbb0;
	Node0x7d4eb8 -> Node0x7cfbb0;
	Node0x7d4f48 -> Node0x7cfbb0;
	Node0x7d4fa8 -> Node0x7cfbb0;
	Node0x7d4e38 -> Node0x7d5b48;
	Node0x7d4eb8 -> Node0x7d6ab8;
	Node0x7d4f48 -> Node0x7d7128;
	Node0x7d4fa8 -> Node0x7d7188;
	Node0x7d7128 -> Node0x7d7200;
	Node0x7d6ab8 -> Node0x7d7200;
	Node0x7d7200 -> Node0x7d7270;
	Node0x7d6ab8 -> Node0x7d72e0;
	Node0x7d72e0 -> Node0x7d7350;
	Node0x7d7350 -> Node0x7d73c0;
	Node0x7d73c0 -> Node0x7d7430;
	Node0x7d7270 -> Node0x7d7430;
	Node0x7d7128 -> Node0x7d74a0;
	Node0x7d6ab8 -> Node0x7d74a0;
	Node0x7d7128 -> Node0x7d7510;
	Node0x7d6ab8 -> Node0x7d7580;
	Node0x7d7510 -> Node0x7d7580;
	Node0x7d6ab8 -> Node0x7d75f0;
	Node0x7d75f0 -> Node0x7d7660;
	Node0x7d7128 -> Node0x7d7660;
	Node0x7d74a0 -> Node0x7d76d0;
	Node0x7d76d0 -> Node0x7d7740;
	Node0x7d7580 -> Node0x7d77b0;
	Node0x7d7128 -> Node0x7d7820;
	Node0x7d6ab8 -> Node0x7d7820;
	Node0x7d7188 -> Node0x7d7890;
	Node0x7d5b48 -> Node0x7d7890;
	Node0x7d5b48 -> Node0x7d7900;
	Node0x7d7188 -> Node0x7d7970;
	Node0x7d7900 -> Node0x7d7970;
	Node0x7d7970 -> Node0x7d79e0;
	Node0x7d7188 -> Node0x7d7a50;
	Node0x7d5b48 -> Node0x7d7a50;
	Node0x7d7a50 -> Node0x7d7ac0;
	Node0x7d7ac0 -> Node0x7d7b30;
	Node0x7d7188 -> Node0x7d7ba0;
	Node0x7d7900 -> Node0x7d7ba0;
	Node0x7d7a50 -> Node0x7d7c10;
	Node0x7d7820 -> Node0x7d7c80;
	Node0x7d77b0 -> Node0x7d7c80;
	Node0x7d7c80 -> Node0x7d7cf0;
	Node0x7d6ab8 -> Node0x7d7d60;
	Node0x7d5b48 -> Node0x7d7d60;
	Node0x7d7d60 -> Node0x7d7dd0;
	Node0x7d7660 -> Node0x7d7dd0;
	Node0x7d7dd0 -> Node0x7d7e40;
	Node0x7d7128 -> Node0x7d7eb0;
	Node0x7d74a0 -> Node0x7d7eb0;
	Node0x7d7580 -> Node0x7d7f20;
	Node0x7d7eb0 -> Node0x7d7f20;
	Node0x7d7f20 -> Node0x7d7f90;
	Node0x7d7890 -> Node0x7d7f90;
	Node0x7d7f90 -> Node0x7d8000;
	Node0x7d7970 -> Node0x7d8000;
	Node0x7d8000 -> Node0x7d8070;
	Node0x7d7ba0 -> Node0x7d8070;
	Node0x7d8070 -> Node0x7d80e0;
	Node0x7d7740 -> Node0x7d80e0;
	Node0x7d80e0 -> Node0x7d8150;
	Node0x7d79e0 -> Node0x7d8150;
	Node0x7d8150 -> Node0x7d81c0;
	Node0x7d7c10 -> Node0x7d81c0;
	Node0x7d81c0 -> Node0x7d8230;
	Node0x7d7cf0 -> Node0x7d8230;
	Node0x7d8230 -> Node0x7d82a0;
	Node0x7d7b30 -> Node0x7d82a0;
	Node0x7d82a0 -> Node0x7d8310;
	Node0x7d7e40 -> Node0x7d8310;
	Node0x7d7430 -> Node0x7d8380;
	Node0x7d8310 -> Node0x7d8380;
	Node0x7d8380 -> Node0x7748b8;
	Node0x7748b8 -> Node0x7d8410;
	Node0x7d5898 -> Node0x7d86b8;
	Node0x7d5728 -> Node0x7d8818;
	Node0x7d5568 -> Node0x7d8928;
	Node0x7d5058 -> Node0x7d8a38;
}
