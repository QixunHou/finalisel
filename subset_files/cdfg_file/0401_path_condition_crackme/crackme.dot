digraph "DFG for'crackme' function" {
	Node0x10bea60[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x10bead0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x10beb90[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x10bec00[shape=record, label="  %6 = shl i32 %1, 1"];
	Node0x10bec70[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x10bece0[shape=record, label="  %8 = xor i32 %5, -1"];
	Node0x10bed50[shape=record, label="  %9 = and i32 %4, %0"];
	Node0x10bedc0[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x10bee30[shape=record, label="  %11 = add i32 %10, %8"];
	Node0x10beed0[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x10bef40[shape=record, label="  %13 = sub i32 1, %0"];
	Node0x10befb0[shape=record, label="  %14 = add i32 %13, %4"];
	Node0x10bf020[shape=record, label="  %15 = add i32 %14, %5"];
	Node0x10bf090[shape=record, label="  %16 = sub i32 %15, %6"];
	Node0x10bf100[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x10bf170[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0x10bf1e0[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x10bf250[shape=record, label="  %20 = icmp eq i32 %19, %3"];
	Node0x105f268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10bf6f0[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x10bf740[shape=record, label="  ret void"];
	Node0x10bea60 -> Node0x10bead0;
	Node0x10bead0 -> Node0x10beb90;
	Node0x10beb90 -> Node0x10bec00;
	Node0x10bec00 -> Node0x10bec70;
	Node0x10bec70 -> Node0x10bece0;
	Node0x10bece0 -> Node0x10bed50;
	Node0x10bed50 -> Node0x10bedc0;
	Node0x10bedc0 -> Node0x10bee30;
	Node0x10bee30 -> Node0x10beed0;
	Node0x10beed0 -> Node0x10bef40;
	Node0x10bef40 -> Node0x10befb0;
	Node0x10befb0 -> Node0x10bf020;
	Node0x10bf020 -> Node0x10bf090;
	Node0x10bf090 -> Node0x10bf100;
	Node0x10bf100 -> Node0x10bf170;
	Node0x10bf170 -> Node0x10bf1e0;
	Node0x10bf1e0 -> Node0x10bf250;
	Node0x10bf250 -> Node0x105f268;
	Node0x105f268 -> Node0x10bf6f0;
	Node0x10bf6f0 -> Node0x10bf740;
edge [color=red]
	Node0x10bead0 -> Node0x10beb90;
	Node0x10beb90 -> Node0x10bece0;
	Node0x10bead0 -> Node0x10bed50;
	Node0x10bedc0 -> Node0x10bee30;
	Node0x10bece0 -> Node0x10bee30;
	Node0x10bee30 -> Node0x10beed0;
	Node0x10bef40 -> Node0x10befb0;
	Node0x10bead0 -> Node0x10befb0;
	Node0x10befb0 -> Node0x10bf020;
	Node0x10beb90 -> Node0x10bf020;
	Node0x10bf020 -> Node0x10bf090;
	Node0x10bec00 -> Node0x10bf090;
	Node0x10bf090 -> Node0x10bf100;
	Node0x10bec70 -> Node0x10bf100;
	Node0x10bf100 -> Node0x10bf170;
	Node0x10bed50 -> Node0x10bf170;
	Node0x10bf170 -> Node0x10bf1e0;
	Node0x10beed0 -> Node0x10bf1e0;
	Node0x10bf1e0 -> Node0x10bf250;
	Node0x10bea60 -> Node0x10bf250;
	Node0x10bf250 -> Node0x105f268;
	Node0x105f268 -> Node0x10bf6f0;
}
