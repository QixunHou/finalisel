digraph "DFG for'main' function" {
	Node0x14d3028[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x14d30a8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x14d3138[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x14d3198[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x14d3618[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x14d36f8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x14d37f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x14d38b8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x14d3968[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x14d3bc8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x14d3c88[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x14d3de8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x14d3e48[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x14d8da0[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x14d8fa8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x14d9108[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x14d9218[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x14d92d8[shape=record, label="  ret i32 0"];
	Node0x14d3028 -> Node0x14d30a8;
	Node0x14d30a8 -> Node0x14d3138;
	Node0x14d3138 -> Node0x14d3198;
	Node0x14d3198 -> Node0x14d3618;
	Node0x14d3618 -> Node0x14d36f8;
	Node0x14d36f8 -> Node0x14d37f8;
	Node0x14d37f8 -> Node0x14d38b8;
	Node0x14d38b8 -> Node0x14d3968;
	Node0x14d3968 -> Node0x14d3bc8;
	Node0x14d3bc8 -> Node0x14d3c88;
	Node0x14d3c88 -> Node0x14d3de8;
	Node0x14d3de8 -> Node0x14d3e48;
	Node0x14d3e48 -> Node0x14d8da0;
	Node0x14d8da0 -> Node0x14d8fa8;
	Node0x14d8fa8 -> Node0x14d9108;
	Node0x14d9108 -> Node0x14d9218;
	Node0x14d9218 -> Node0x14d92d8;
edge [color=red]
	Node0x14d3028 -> Node0x14d3198;
	Node0x14d3198 -> Node0x14d3618;
	Node0x14d30a8 -> Node0x14d36f8;
	Node0x14d36f8 -> Node0x14d37f8;
	Node0x14d3138 -> Node0x14d38b8;
	Node0x14d38b8 -> Node0x14d3968;
	Node0x14d3028 -> Node0x14d3bc8;
	Node0x14d30a8 -> Node0x14d3bc8;
	Node0x14d3138 -> Node0x14d3bc8;
	Node0x14d3028 -> Node0x14d3c88;
	Node0x14d30a8 -> Node0x14d3de8;
	Node0x14d3138 -> Node0x14d3e48;
	Node0x14d3c88 -> Node0x14d8da0;
	Node0x14d3de8 -> Node0x14d8da0;
	Node0x14d3e48 -> Node0x14d8da0;
	Node0x14d38b8 -> Node0x14d8fa8;
	Node0x14d36f8 -> Node0x14d9108;
	Node0x14d3198 -> Node0x14d9218;
}
