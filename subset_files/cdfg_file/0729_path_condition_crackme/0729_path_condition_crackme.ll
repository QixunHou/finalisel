; ModuleID = '../.././c_source_file/0729_path_condition_crackme.c'
source_filename = "../.././c_source_file/0729_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = or i32 %4, %1
  %6 = xor i32 %2, -1
  %7 = or i32 %6, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %1
  %10 = xor i32 %0, -1
  %11 = xor i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %10
  %14 = or i32 %6, %1
  %15 = or i32 %14, %10
  %16 = xor i32 %1, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %2, %0
  %19 = and i32 %18, %17
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %0
  %22 = or i32 %21, %6
  %23 = xor i32 %21, %2
  %24 = or i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %18, %25
  %27 = and i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %28, %2
  %30 = xor i32 %21, -1
  %31 = xor i32 %30, %2
  %32 = xor i32 %4, %24
  %33 = and i32 %11, %30
  %34 = or i32 %18, %20
  %35 = xor i32 %4, -1
  %36 = or i32 %20, %0
  %37 = and i32 %36, %12
  %38 = xor i32 %18, -1
  %39 = or i32 %38, %20
  %40 = shl i32 %8, 1
  %41 = or i32 %16, %38
  %42 = xor i32 %24, %2
  %43 = shl i32 %42, 1
  %44 = and i32 %6, %1
  %45 = xor i32 %44, -1
  %46 = xor i32 %21, %45
  %47 = or i32 %16, %2
  %48 = xor i32 %36, -1
  %49 = or i32 %11, %48
  %50 = and i32 %6, %30
  %51 = or i32 %2, %1
  %52 = or i32 %51, %10
  %53 = or i32 %21, %2
  %54 = and i32 %12, %30
  %55 = and i32 %20, %2
  %56 = and i32 %55, %10
  %57 = or i32 %11, %10
  %58 = xor i32 %56, %57
  %59 = and i32 %2, %1
  %60 = xor i32 %59, -1
  %61 = and i32 %60, %0
  %62 = or i32 %27, %8
  %63 = shl i32 %62, 1
  %64 = or i32 %4, %17
  %65 = xor i32 %14, -1
  %66 = or i32 %27, %65
  %67 = shl i32 %66, 1
  %68 = or i32 %12, %48
  %69 = and i32 %59, %0
  %70 = and i32 %51, %10
  %71 = xor i32 %69, -1
  %72 = xor i32 %70, %71
  %73 = or i32 %2, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %74, %1
  %76 = shl i32 %75, 1
  %77 = xor i32 %71, %0
  %78 = xor i32 %77, %51
  %79 = xor i32 %27, %2
  %80 = shl i32 %79, 1
  %81 = and i32 %12, %10
  %82 = or i32 %18, %27
  %83 = and i32 %18, %28
  %84 = or i32 %18, %1
  %85 = xor i32 %51, -1
  %86 = xor i32 %85, %0
  %87 = xor i32 %73, %27
  %88 = or i32 %60, %0
  %89 = shl i32 %88, 1
  %90 = and i32 %59, %10
  %91 = and i32 %51, %0
  %92 = xor i32 %91, -1
  %93 = xor i32 %90, %92
  %94 = and i32 %6, %0
  %95 = or i32 %94, %1
  %96 = or i32 %11, %0
  %97 = xor i32 %36, %2
  %98 = and i32 %24, %2
  %99 = shl i32 %98, 2
  %100 = or i32 %38, %17
  %101 = or i32 %48, %2
  %102 = and i32 %55, %0
  %103 = xor i32 %11, %0
  %104 = or i32 %102, %103
  %105 = or i32 %4, %44
  %106 = or i32 %27, %6
  %107 = or i32 %85, %0
  %108 = xor i32 %12, %0
  %109 = or i32 %12, %0
  %110 = or i32 %8, %17
  %111 = or i32 %18, %48
  %112 = or i32 %20, %2
  %113 = and i32 %112, %10
  %114 = or i32 %102, %113
  %115 = or i32 %8, %1
  %116 = shl i32 %115, 1
  %117 = xor i32 %57, -1
  %118 = or i32 %56, %117
  %119 = xor i32 %4, %1
  %120 = and i32 %7, %17
  %121 = or i32 %4, %85
  %122 = xor i32 %94, -1
  %123 = and i32 %16, %122
  %124 = or i32 %4, %25
  %125 = or i32 %94, %65
  %126 = add i32 %18, 1
  %127 = xor i32 %112, %0
  %128 = or i32 %102, %127
  %129 = and i32 %30, %2
  %130 = and i32 %18, %24
  %131 = and i32 %12, %28
  %132 = and i32 %35, %1
  %133 = shl i32 %132, 1
  %134 = or i32 %11, %21
  %135 = mul i32 %134, -5
  %136 = xor i32 %113, 1073741823
  %137 = xor i32 %136, %102
  %138 = shl i32 %137, 2
  %139 = xor i32 %28, %2
  %140 = and i32 %11, %10
  %141 = or i32 %69, %140
  %142 = and i32 %14, %0
  %143 = shl i32 %142, 1
  %144 = or i32 %94, %16
  %145 = and i32 %11, %0
  %146 = or i32 %90, %145
  %147 = or i32 %14, %0
  %148 = and i32 %38, %20
  %149 = and i32 %60, %10
  %150 = or i32 %17, %2
  %151 = xor i32 %4, %36
  %152 = xor i32 %140, %71
  %153 = and i32 %24, %12
  %154 = and i32 %24, %38
  %155 = xor i32 %122, %1
  %156 = or i32 %11, %25
  %157 = shl i32 %156, 1
  %158 = and i32 %35, %17
  %159 = and i32 %112, %0
  %160 = xor i32 %159, -1
  %161 = xor i32 %56, %160
  %162 = and i32 %11, %36
  %163 = shl i32 %162, 1
  %164 = xor i32 %59, %0
  %165 = shl i32 %164, 1
  %166 = or i32 %69, %70
  %167 = xor i32 %103, -1
  %168 = xor i32 %102, %167
  %169 = or i32 %85, %10
  %170 = shl i32 %169, 1
  %171 = xor i32 %102, %96
  %172 = xor i32 %94, %1
  %173 = and i32 %18, %16
  %174 = or i32 %27, %2
  %175 = and i32 %73, %17
  %176 = shl i32 %175, 1
  %177 = xor i32 %4, %45
  %178 = and i32 %122, %20
  %179 = xor i32 %14, %27
  %180 = xor i32 %7, %1
  %181 = or i32 %18, %21
  %182 = or i32 %16, %6
  %183 = and i32 %85, %10
  %184 = and i32 %44, %10
  %185 = mul i32 %184, 19
  %186 = and i32 %85, %0
  %187 = mul i32 %186, 9
  %188 = and i32 %44, %0
  %189 = mul i32 %188, 35
  %190 = and i32 %65, %10
  %191 = mul i32 %190, 20
  %192 = mul i32 %90, 10
  %193 = and i32 %65, %0
  %194 = mul i32 %193, 6
  %195 = mul i32 %69, 25
  %196 = add i32 %97, %101
  %197 = add i32 %196, %47
  %198 = sub i32 %197, %13
  %199 = add i32 %198, %9
  %200 = sub i32 %199, %15
  %201 = sub i32 %200, %19
  %202 = add i32 %201, %154
  %203 = add i32 %202, %148
  %204 = add i32 %203, %41
  %205 = add i32 %204, %37
  %206 = add i32 %205, %26
  %207 = shl i32 %206, 1
  %208 = sub i32 %35, %24
  %209 = sub i32 %208, %150
  %210 = add i32 %209, %31
  %211 = mul i32 %210, 3
  %212 = add i32 %2, %1
  %213 = sub i32 %17, %212
  %214 = add i32 %213, %22
  %215 = sub i32 %214, %23
  %216 = add i32 %215, %29
  %217 = sub i32 %216, %50
  %218 = add i32 %217, %53
  %219 = add i32 %218, %51
  %220 = add i32 %219, %106
  %221 = add i32 %220, %74
  %222 = add i32 %221, %65
  %223 = add i32 %222, %126
  %224 = add i32 %223, %129
  %225 = sub i32 %224, %139
  %226 = sub i32 %225, %73
  %227 = sub i32 %226, %174
  %228 = add i32 %227, %182
  %229 = sub i32 %228, %32
  %230 = add i32 %229, %33
  %231 = add i32 %230, %34
  %232 = sub i32 %231, %39
  %233 = sub i32 %232, %40
  %234 = sub i32 %233, %43
  %235 = sub i32 %234, %46
  %236 = add i32 %235, %49
  %237 = sub i32 %236, %52
  %238 = add i32 %237, %54
  %239 = add i32 %238, %61
  %240 = sub i32 %239, %64
  %241 = sub i32 %240, %68
  %242 = sub i32 %241, %80
  %243 = sub i32 %242, %81
  %244 = add i32 %243, %82
  %245 = sub i32 %244, %83
  %246 = sub i32 %245, %84
  %247 = sub i32 %246, %86
  %248 = sub i32 %247, %87
  %249 = sub i32 %248, %95
  %250 = sub i32 %249, %96
  %251 = add i32 %250, %99
  %252 = add i32 %251, %100
  %253 = sub i32 %252, %105
  %254 = sub i32 %253, %107
  %255 = sub i32 %254, %108
  %256 = add i32 %255, %109
  %257 = sub i32 %256, %110
  %258 = add i32 %257, %111
  %259 = sub i32 %258, %119
  %260 = sub i32 %259, %120
  %261 = sub i32 %260, %121
  %262 = sub i32 %261, %123
  %263 = sub i32 %262, %124
  %264 = add i32 %263, %125
  %265 = sub i32 %264, %130
  %266 = add i32 %265, %131
  %267 = add i32 %266, %144
  %268 = add i32 %267, %147
  %269 = sub i32 %268, %149
  %270 = add i32 %269, %151
  %271 = sub i32 %270, %153
  %272 = add i32 %271, %155
  %273 = sub i32 %272, %158
  %274 = add i32 %273, %103
  %275 = add i32 %274, %172
  %276 = add i32 %275, %173
  %277 = add i32 %276, %177
  %278 = add i32 %277, %178
  %279 = sub i32 %278, %179
  %280 = add i32 %279, %180
  %281 = add i32 %280, %181
  %282 = sub i32 %281, %183
  %283 = add i32 %282, %58
  %284 = sub i32 %283, %63
  %285 = sub i32 %284, %67
  %286 = add i32 %285, %72
  %287 = sub i32 %286, %76
  %288 = sub i32 %287, %78
  %289 = sub i32 %288, %89
  %290 = add i32 %289, %93
  %291 = sub i32 %290, %104
  %292 = add i32 %291, %114
  %293 = sub i32 %292, %116
  %294 = add i32 %293, %118
  %295 = add i32 %294, %128
  %296 = sub i32 %295, %133
  %297 = add i32 %296, %135
  %298 = sub i32 %297, %141
  %299 = sub i32 %298, %143
  %300 = sub i32 %299, %146
  %301 = sub i32 %300, %152
  %302 = sub i32 %301, %157
  %303 = sub i32 %302, %161
  %304 = sub i32 %303, %163
  %305 = sub i32 %304, %165
  %306 = add i32 %305, %166
  %307 = add i32 %306, %168
  %308 = sub i32 %307, %170
  %309 = sub i32 %308, %171
  %310 = sub i32 %309, %176
  %311 = add i32 %310, %185
  %312 = add i32 %311, %187
  %313 = add i32 %312, %189
  %314 = add i32 %313, %191
  %315 = add i32 %314, %192
  %316 = add i32 %315, %194
  %317 = add i32 %316, %195
  %318 = sub i32 %317, %138
  %319 = add i32 %318, %211
  %320 = add i32 %319, %207
  %321 = icmp eq i32 %5, %320
  %322 = select i1 %321, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %323 = tail call i32 @puts(i8* nonnull dereferenceable(1) %322)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
