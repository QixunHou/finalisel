digraph "DFG for'crackme' function" {
	Node0x20444e0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x2044b90[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x2044c50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2044cc0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x2044d30[shape=record, label="  %7 = and i32 %5, %0"];
	Node0x2044da0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x2044e10[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x2044e80[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x2044f20[shape=record, label="  %11 = shl i32 %6, 1"];
	Node0x2044f90[shape=record, label="  %12 = and i32 %9, %1"];
	Node0x2045030[shape=record, label="  %13 = mul i32 %12, -3"];
	Node0x20450a0[shape=record, label="  %14 = shl i32 %10, 1"];
	Node0x2045110[shape=record, label="  %15 = sub i32 1, %0"];
	Node0x2045180[shape=record, label="  %16 = sub i32 %15, %6"];
	Node0x20451f0[shape=record, label="  %17 = add i32 %16, %8"];
	Node0x2045260[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x20452d0[shape=record, label="  %19 = add i32 %18, %3"];
	Node0x2045340[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0x20453b0[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x2045420[shape=record, label="  %22 = add i32 %21, %13"];
	Node0x2045490[shape=record, label="  %23 = sub i32 %22, %14"];
	Node0x2045500[shape=record, label="  %24 = icmp eq i32 %23, %4"];
	Node0x1fe5268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x20459a0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x20459f0[shape=record, label="  ret void"];
	Node0x20444e0 -> Node0x2044b90;
	Node0x2044b90 -> Node0x2044c50;
	Node0x2044c50 -> Node0x2044cc0;
	Node0x2044cc0 -> Node0x2044d30;
	Node0x2044d30 -> Node0x2044da0;
	Node0x2044da0 -> Node0x2044e10;
	Node0x2044e10 -> Node0x2044e80;
	Node0x2044e80 -> Node0x2044f20;
	Node0x2044f20 -> Node0x2044f90;
	Node0x2044f90 -> Node0x2045030;
	Node0x2045030 -> Node0x20450a0;
	Node0x20450a0 -> Node0x2045110;
	Node0x2045110 -> Node0x2045180;
	Node0x2045180 -> Node0x20451f0;
	Node0x20451f0 -> Node0x2045260;
	Node0x2045260 -> Node0x20452d0;
	Node0x20452d0 -> Node0x2045340;
	Node0x2045340 -> Node0x20453b0;
	Node0x20453b0 -> Node0x2045420;
	Node0x2045420 -> Node0x2045490;
	Node0x2045490 -> Node0x2045500;
	Node0x2045500 -> Node0x1fe5268;
	Node0x1fe5268 -> Node0x20459a0;
	Node0x20459a0 -> Node0x20459f0;
edge [color=red]
	Node0x20444e0 -> Node0x2044b90;
	Node0x2044c50 -> Node0x2044d30;
	Node0x2044d30 -> Node0x2044da0;
	Node0x2044cc0 -> Node0x2044f20;
	Node0x2044e10 -> Node0x2044f90;
	Node0x2044f90 -> Node0x2045030;
	Node0x2044e80 -> Node0x20450a0;
	Node0x2045110 -> Node0x2045180;
	Node0x2044cc0 -> Node0x2045180;
	Node0x2045180 -> Node0x20451f0;
	Node0x2044da0 -> Node0x20451f0;
	Node0x20451f0 -> Node0x2045260;
	Node0x2044e80 -> Node0x2045260;
	Node0x2045260 -> Node0x20452d0;
	Node0x20444e0 -> Node0x20452d0;
	Node0x20452d0 -> Node0x2045340;
	Node0x2044d30 -> Node0x2045340;
	Node0x2045340 -> Node0x20453b0;
	Node0x2044f20 -> Node0x20453b0;
	Node0x20453b0 -> Node0x2045420;
	Node0x2045030 -> Node0x2045420;
	Node0x2045420 -> Node0x2045490;
	Node0x20450a0 -> Node0x2045490;
	Node0x2045490 -> Node0x2045500;
	Node0x2044b90 -> Node0x2045500;
	Node0x2045500 -> Node0x1fe5268;
	Node0x1fe5268 -> Node0x20459a0;
}
