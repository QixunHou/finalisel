digraph "DFG for'crackme' function" {
	Node0x65a710[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x65a780[shape=record, label="  %6 = add i32 %5, %3"];
	Node0x65ae00[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x65ae70[shape=record, label="  %8 = or i32 %7, %3"];
	Node0x65aee0[shape=record, label="  %9 = sub i32 %8, %6"];
	Node0x65af50[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x65afc0[shape=record, label="  %11 = and i32 %10, %1"];
	Node0x65b030[shape=record, label="  %12 = xor i32 %1, -1"];
	Node0x65b0a0[shape=record, label="  %13 = xor i32 %5, -1"];
	Node0x65b110[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x65b180[shape=record, label="  %15 = or i32 %10, %1"];
	Node0x65b220[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x65b290[shape=record, label="  %17 = shl i32 %14, 1"];
	Node0x65b330[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x65b3a0[shape=record, label="  %19 = xor i32 %15, -1"];
	Node0x65b440[shape=record, label="  %20 = mul i32 %19, -5"];
	Node0x65b4b0[shape=record, label="  %21 = and i32 %2, %1"];
	Node0x65b550[shape=record, label="  %22 = shl i32 %21, 2"];
	Node0x65b5c0[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x65b660[shape=record, label="  %24 = xor i32 %3, 2147483647"];
	Node0x65b6d0[shape=record, label="  %25 = or i32 %24, %0"];
	Node0x65b740[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x65b7b0[shape=record, label="  %27 = or i32 %3, %0"];
	Node0x65b820[shape=record, label="  %28 = shl i32 %27, 2"];
	Node0x65b8c0[shape=record, label="  %29 = xor i32 %28, -4"];
	Node0x65b930[shape=record, label="  %30 = xor i32 %8, -1"];
	Node0x65b9a0[shape=record, label="  %31 = and i32 %3, %0"];
	Node0x65ba10[shape=record, label="  %32 = add i32 %2, %1"];
	Node0x65bc90[shape=record, label="  %33 = add i32 %32, %31"];
	Node0x65bd00[shape=record, label="  %34 = shl i32 %33, 1"];
	Node0x65bd70[shape=record, label="  %35 = sub i32 %30, %11"];
	Node0x65be10[shape=record, label="  %36 = mul i32 %35, 3"];
	Node0x65be80[shape=record, label="  %37 = add i32 %11, %12"];
	Node0x65bef0[shape=record, label="  %38 = add i32 %37, %13"];
	Node0x65bf60[shape=record, label="  %39 = sub i32 %38, %14"];
	Node0x65bfd0[shape=record, label="  %40 = add i32 %39, %3"];
	Node0x65c040[shape=record, label="  %41 = sub i32 %40, %16"];
	Node0x65c0b0[shape=record, label="  %42 = add i32 %41, %20"];
	Node0x65c120[shape=record, label="  %43 = add i32 %42, %23"];
	Node0x65c190[shape=record, label="  %44 = sub i32 %43, %18"];
	Node0x65c200[shape=record, label="  %45 = sub i32 %44, %26"];
	Node0x65c270[shape=record, label="  %46 = add i32 %45, %29"];
	Node0x65c2e0[shape=record, label="  %47 = add i32 %46, %36"];
	Node0x65c350[shape=record, label="  %48 = add i32 %47, %34"];
	Node0x65c3c0[shape=record, label="  %49 = icmp eq i32 %9, %48"];
	Node0x5fb268[shape=record, label="  %50 = select i1 %49, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x65c860[shape=record, label="  %51 = tail call i32 @puts(i8* nonnull dereferenceable(1) %50)"];
	Node0x65c8b0[shape=record, label="  ret void"];
	Node0x65a710 -> Node0x65a780;
	Node0x65a780 -> Node0x65ae00;
	Node0x65ae00 -> Node0x65ae70;
	Node0x65ae70 -> Node0x65aee0;
	Node0x65aee0 -> Node0x65af50;
	Node0x65af50 -> Node0x65afc0;
	Node0x65afc0 -> Node0x65b030;
	Node0x65b030 -> Node0x65b0a0;
	Node0x65b0a0 -> Node0x65b110;
	Node0x65b110 -> Node0x65b180;
	Node0x65b180 -> Node0x65b220;
	Node0x65b220 -> Node0x65b290;
	Node0x65b290 -> Node0x65b330;
	Node0x65b330 -> Node0x65b3a0;
	Node0x65b3a0 -> Node0x65b440;
	Node0x65b440 -> Node0x65b4b0;
	Node0x65b4b0 -> Node0x65b550;
	Node0x65b550 -> Node0x65b5c0;
	Node0x65b5c0 -> Node0x65b660;
	Node0x65b660 -> Node0x65b6d0;
	Node0x65b6d0 -> Node0x65b740;
	Node0x65b740 -> Node0x65b7b0;
	Node0x65b7b0 -> Node0x65b820;
	Node0x65b820 -> Node0x65b8c0;
	Node0x65b8c0 -> Node0x65b930;
	Node0x65b930 -> Node0x65b9a0;
	Node0x65b9a0 -> Node0x65ba10;
	Node0x65ba10 -> Node0x65bc90;
	Node0x65bc90 -> Node0x65bd00;
	Node0x65bd00 -> Node0x65bd70;
	Node0x65bd70 -> Node0x65be10;
	Node0x65be10 -> Node0x65be80;
	Node0x65be80 -> Node0x65bef0;
	Node0x65bef0 -> Node0x65bf60;
	Node0x65bf60 -> Node0x65bfd0;
	Node0x65bfd0 -> Node0x65c040;
	Node0x65c040 -> Node0x65c0b0;
	Node0x65c0b0 -> Node0x65c120;
	Node0x65c120 -> Node0x65c190;
	Node0x65c190 -> Node0x65c200;
	Node0x65c200 -> Node0x65c270;
	Node0x65c270 -> Node0x65c2e0;
	Node0x65c2e0 -> Node0x65c350;
	Node0x65c350 -> Node0x65c3c0;
	Node0x65c3c0 -> Node0x5fb268;
	Node0x5fb268 -> Node0x65c860;
	Node0x65c860 -> Node0x65c8b0;
edge [color=red]
	Node0x65a710 -> Node0x65a780;
	Node0x65ae00 -> Node0x65ae70;
	Node0x65ae70 -> Node0x65aee0;
	Node0x65a780 -> Node0x65aee0;
	Node0x65af50 -> Node0x65afc0;
	Node0x65a710 -> Node0x65b0a0;
	Node0x65af50 -> Node0x65b180;
	Node0x65b180 -> Node0x65b220;
	Node0x65b110 -> Node0x65b290;
	Node0x65b290 -> Node0x65b330;
	Node0x65b180 -> Node0x65b3a0;
	Node0x65b3a0 -> Node0x65b440;
	Node0x65b4b0 -> Node0x65b550;
	Node0x65b550 -> Node0x65b5c0;
	Node0x65b660 -> Node0x65b6d0;
	Node0x65b6d0 -> Node0x65b740;
	Node0x65b7b0 -> Node0x65b820;
	Node0x65b820 -> Node0x65b8c0;
	Node0x65ae70 -> Node0x65b930;
	Node0x65ba10 -> Node0x65bc90;
	Node0x65b9a0 -> Node0x65bc90;
	Node0x65bc90 -> Node0x65bd00;
	Node0x65b930 -> Node0x65bd70;
	Node0x65afc0 -> Node0x65bd70;
	Node0x65bd70 -> Node0x65be10;
	Node0x65afc0 -> Node0x65be80;
	Node0x65b030 -> Node0x65be80;
	Node0x65be80 -> Node0x65bef0;
	Node0x65b0a0 -> Node0x65bef0;
	Node0x65bef0 -> Node0x65bf60;
	Node0x65b110 -> Node0x65bf60;
	Node0x65bf60 -> Node0x65bfd0;
	Node0x65bfd0 -> Node0x65c040;
	Node0x65b220 -> Node0x65c040;
	Node0x65c040 -> Node0x65c0b0;
	Node0x65b440 -> Node0x65c0b0;
	Node0x65c0b0 -> Node0x65c120;
	Node0x65b5c0 -> Node0x65c120;
	Node0x65c120 -> Node0x65c190;
	Node0x65b330 -> Node0x65c190;
	Node0x65c190 -> Node0x65c200;
	Node0x65b740 -> Node0x65c200;
	Node0x65c200 -> Node0x65c270;
	Node0x65b8c0 -> Node0x65c270;
	Node0x65c270 -> Node0x65c2e0;
	Node0x65be10 -> Node0x65c2e0;
	Node0x65c2e0 -> Node0x65c350;
	Node0x65bd00 -> Node0x65c350;
	Node0x65aee0 -> Node0x65c3c0;
	Node0x65c350 -> Node0x65c3c0;
	Node0x65c3c0 -> Node0x5fb268;
	Node0x5fb268 -> Node0x65c860;
}
