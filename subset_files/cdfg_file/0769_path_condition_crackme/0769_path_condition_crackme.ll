; ModuleID = '../.././c_source_file/0769_path_condition_crackme.c'
source_filename = "../.././c_source_file/0769_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %4, -1
  %8 = and i32 %7, %3
  %9 = shl i32 %8, 1
  %10 = xor i32 %9, -2
  %11 = xor i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %2, -1
  %14 = and i32 %13, %1
  %15 = xor i32 %14, -1
  %16 = xor i32 %15, %0
  %17 = shl i32 %16, 1
  %18 = add i32 %11, %17
  %19 = add i32 %18, %10
  %20 = sub i32 0, %19
  %21 = or i32 %4, %3
  %22 = xor i32 %4, %3
  %23 = or i32 %7, %3
  %24 = shl i32 %22, 1
  %25 = xor i32 %24, -2
  %26 = add i32 %4, 1
  %27 = shl i32 %21, 2
  %28 = xor i32 %27, -4
  %29 = add i32 %23, 1
  %30 = mul i32 %8, 7
  %31 = and i32 %4, %3
  %32 = xor i32 %1, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %2, %1
  %36 = or i32 %35, %34
  %37 = and i32 %2, %0
  %38 = or i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %37, %39
  %41 = xor i32 %35, -1
  %42 = or i32 %2, %1
  %43 = xor i32 %42, %0
  %44 = or i32 %42, %0
  %45 = or i32 %13, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %46, %1
  %48 = xor i32 %0, -1
  %49 = and i32 %2, %1
  %50 = and i32 %49, %48
  %51 = and i32 %35, %0
  %52 = or i32 %50, %51
  %53 = or i32 %14, %48
  %54 = and i32 %13, %0
  %55 = and i32 %32, %0
  %56 = xor i32 %55, -1
  %57 = and i32 %12, %56
  %58 = xor i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %45, %59
  %61 = and i32 %1, %0
  %62 = xor i32 %42, %61
  %63 = or i32 %61, %41
  %64 = add i32 %33, 1
  %65 = or i32 %13, %1
  %66 = and i32 %65, %48
  %67 = or i32 %54, %1
  %68 = and i32 %49, %0
  %69 = xor i32 %35, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %68, %70
  %72 = or i32 %41, %48
  %73 = and i32 %45, %58
  %74 = or i32 %61, %12
  %75 = and i32 %32, %2
  %76 = and i32 %75, %48
  %77 = or i32 %32, %2
  %78 = and i32 %77, %0
  %79 = or i32 %76, %78
  %80 = or i32 %12, %32
  %81 = shl i32 %80, 2
  %82 = xor i32 %61, -1
  %83 = and i32 %12, %82
  %84 = xor i32 %39, %2
  %85 = or i32 %55, %2
  %86 = shl i32 %85, 1
  %87 = or i32 %12, %39
  %88 = and i32 %45, %1
  %89 = shl i32 %88, 1
  %90 = and i32 %35, %48
  %91 = xor i32 %68, -1
  %92 = xor i32 %90, %91
  %93 = or i32 %61, %46
  %94 = or i32 %11, %61
  %95 = xor i32 %42, -1
  %96 = or i32 %37, %95
  %97 = or i32 %55, %12
  %98 = and i32 %42, %48
  %99 = or i32 %68, %98
  %100 = and i32 %13, %56
  %101 = or i32 %59, %2
  %102 = and i32 %38, %13
  %103 = xor i32 %49, -1
  %104 = xor i32 %54, %103
  %105 = shl i32 %104, 1
  %106 = and i32 %75, %0
  %107 = xor i32 %77, -1
  %108 = or i32 %107, %0
  %109 = xor i32 %106, %108
  %110 = or i32 %2, %0
  %111 = xor i32 %110, -1
  %112 = add i32 %110, 1
  %113 = or i32 %55, %13
  %114 = xor i32 %37, %15
  %115 = or i32 %46, %59
  %116 = xor i32 %38, %2
  %117 = shl i32 %116, 1
  %118 = or i32 %35, %0
  %119 = or i32 %54, %59
  %120 = xor i32 %65, %61
  %121 = xor i32 %50, -1
  %122 = xor i32 %51, %121
  %123 = and i32 %11, %59
  %124 = xor i32 %106, %70
  %125 = and i32 %82, %2
  %126 = and i32 %110, %59
  %127 = or i32 %61, %95
  %128 = xor i32 %43, %91
  %129 = or i32 %65, %0
  %130 = xor i32 %65, -1
  %131 = or i32 %61, %130
  %132 = or i32 %35, %39
  %133 = or i32 %37, %58
  %134 = xor i32 %118, -1
  %135 = or i32 %106, %134
  %136 = or i32 %68, %90
  %137 = and i32 %45, %32
  %138 = or i32 %58, %111
  %139 = xor i32 %37, %33
  %140 = shl i32 %139, 1
  %141 = or i32 %11, %34
  %142 = or i32 %68, %43
  %143 = and i32 %58, %13
  %144 = and i32 %41, %0
  %145 = shl i32 %1, 1
  %146 = xor i32 %37, %38
  %147 = shl i32 %146, 1
  %148 = or i32 %14, %0
  %149 = add i32 %61, 1
  %150 = xor i32 %68, %69
  %151 = and i32 %11, %32
  %152 = and i32 %65, %0
  %153 = or i32 %49, %0
  %154 = and i32 %12, %1
  %155 = xor i32 %110, %1
  %156 = xor i32 %37, -1
  %157 = and i32 %156, %32
  %158 = or i32 %111, %1
  %159 = or i32 %35, %48
  %160 = or i32 %11, %58
  %161 = or i32 %13, %34
  %162 = or i32 %54, %58
  %163 = or i32 %11, %55
  %164 = and i32 %11, %33
  %165 = and i32 %33, %2
  %166 = xor i32 %37, %1
  %167 = or i32 %37, %1
  %168 = xor i32 %54, -1
  %169 = and i32 %58, %168
  %170 = or i32 %13, %59
  %171 = or i32 %11, %32
  %172 = or i32 %37, %14
  %173 = and i32 %59, %2
  %174 = xor i32 %14, %0
  %175 = and i32 %168, %32
  %176 = shl i32 %175, 1
  %177 = and i32 %35, %33
  %178 = or i32 %37, %32
  %179 = and i32 %42, %0
  %180 = or i32 %61, %111
  %181 = and i32 %11, %58
  %182 = or i32 %61, %2
  %183 = or i32 %111, %59
  %184 = or i32 %15, %0
  %185 = xor i32 %103, %0
  %186 = xor i32 %54, %1
  %187 = and i32 %11, %38
  %188 = and i32 %110, %1
  %189 = and i32 %38, %41
  %190 = or i32 %37, %34
  %191 = or i32 %103, %0
  %192 = or i32 %55, %41
  %193 = xor i32 %78, 1073741823
  %194 = xor i32 %193, %76
  %195 = and i32 %41, %82
  %196 = or i32 %61, %13
  %197 = xor i32 %95, %0
  %198 = xor i32 %168, %1
  %199 = xor i32 %55, %103
  %200 = or i32 %11, %39
  %201 = and i32 %35, %56
  %202 = and i32 %33, %41
  %203 = xor i32 %159, -1
  %204 = or i32 %76, %203
  %205 = or i32 %41, %34
  %206 = shl i32 %205, 1
  %207 = xor i32 %61, %2
  %208 = or i32 %106, %69
  %209 = add i32 %65, 1
  %210 = xor i32 %0, 2147483647
  %211 = xor i32 %210, %77
  %212 = xor i32 %211, %106
  %213 = or i32 %46, %1
  %214 = xor i32 %179, %121
  %215 = or i32 %95, %48
  %216 = shl i32 %156, 1
  %217 = xor i32 %45, %61
  %218 = or i32 %41, %0
  %219 = and i32 %110, %58
  %220 = xor i32 %110, %61
  %221 = xor i32 %54, %65
  %222 = and i32 %95, %48
  %223 = mul i32 %222, -23
  %224 = and i32 %14, %48
  %225 = mul i32 %224, -6
  %226 = and i32 %95, %0
  %227 = and i32 %14, %0
  %228 = mul i32 %227, -24
  %229 = and i32 %130, %48
  %230 = shl i32 %229, 1
  %231 = mul i32 %50, -9
  %232 = and i32 %130, %0
  %233 = mul i32 %232, -18
  %234 = shl i32 %68, 1
  %235 = add i32 %55, %13
  %236 = add i32 %235, %199
  %237 = add i32 %236, %184
  %238 = add i32 %237, %180
  %239 = add i32 %238, %172
  %240 = add i32 %239, %151
  %241 = add i32 %240, %131
  %242 = add i32 %241, %83
  %243 = add i32 %242, %73
  %244 = add i32 %243, %63
  %245 = add i32 %244, %212
  %246 = shl i32 %245, 1
  %247 = add i32 %36, %53
  %248 = add i32 %247, %31
  %249 = add i32 %248, %194
  %250 = shl i32 %249, 2
  %251 = add i32 %173, %196
  %252 = add i32 %251, %23
  %253 = mul i32 %252, -5
  %254 = sub i32 %218, %143
  %255 = add i32 %254, %29
  %256 = mul i32 %255, 3
  %257 = add i32 %0, -2
  %258 = add i32 %257, %32
  %259 = add i32 %258, %64
  %260 = sub i32 %259, %2
  %261 = sub i32 %260, %58
  %262 = sub i32 %261, %145
  %263 = add i32 %262, %149
  %264 = add i32 %263, %39
  %265 = add i32 %264, %59
  %266 = add i32 %265, %33
  %267 = add i32 %266, %6
  %268 = add i32 %267, %41
  %269 = add i32 %268, %54
  %270 = add i32 %269, %15
  %271 = add i32 %270, %84
  %272 = add i32 %271, %100
  %273 = add i32 %272, %101
  %274 = add i32 %273, %102
  %275 = sub i32 %274, %49
  %276 = add i32 %275, %112
  %277 = add i32 %276, %113
  %278 = sub i32 %277, %45
  %279 = add i32 %278, %125
  %280 = sub i32 %279, %37
  %281 = add i32 %280, %103
  %282 = sub i32 %281, %11
  %283 = sub i32 %282, %14
  %284 = add i32 %283, %161
  %285 = add i32 %284, %165
  %286 = add i32 %285, %170
  %287 = sub i32 %286, %182
  %288 = sub i32 %287, %110
  %289 = sub i32 %288, %207
  %290 = add i32 %289, %209
  %291 = add i32 %290, %4
  %292 = add i32 %291, %26
  %293 = add i32 %292, %40
  %294 = sub i32 %293, %43
  %295 = add i32 %294, %44
  %296 = sub i32 %295, %47
  %297 = add i32 %296, %57
  %298 = add i32 %297, %60
  %299 = add i32 %298, %62
  %300 = add i32 %299, %66
  %301 = sub i32 %300, %67
  %302 = add i32 %301, %72
  %303 = sub i32 %302, %74
  %304 = sub i32 %303, %86
  %305 = add i32 %304, %87
  %306 = add i32 %305, %90
  %307 = sub i32 %306, %93
  %308 = sub i32 %307, %94
  %309 = sub i32 %308, %96
  %310 = add i32 %309, %97
  %311 = sub i32 %310, %114
  %312 = sub i32 %311, %115
  %313 = sub i32 %312, %117
  %314 = add i32 %313, %118
  %315 = sub i32 %314, %119
  %316 = sub i32 %315, %120
  %317 = sub i32 %316, %123
  %318 = sub i32 %317, %126
  %319 = sub i32 %318, %127
  %320 = sub i32 %319, %129
  %321 = sub i32 %320, %132
  %322 = sub i32 %321, %133
  %323 = sub i32 %322, %137
  %324 = add i32 %323, %138
  %325 = sub i32 %324, %141
  %326 = add i32 %325, %144
  %327 = add i32 %326, %148
  %328 = add i32 %327, %152
  %329 = sub i32 %328, %153
  %330 = sub i32 %329, %154
  %331 = sub i32 %330, %155
  %332 = sub i32 %331, %157
  %333 = add i32 %332, %158
  %334 = add i32 %333, %159
  %335 = add i32 %334, %160
  %336 = sub i32 %335, %162
  %337 = add i32 %336, %163
  %338 = add i32 %337, %164
  %339 = add i32 %338, %166
  %340 = sub i32 %339, %167
  %341 = sub i32 %340, %169
  %342 = sub i32 %341, %98
  %343 = sub i32 %342, %171
  %344 = add i32 %343, %174
  %345 = sub i32 %344, %177
  %346 = add i32 %345, %178
  %347 = sub i32 %346, %179
  %348 = sub i32 %347, %181
  %349 = add i32 %348, %183
  %350 = sub i32 %349, %185
  %351 = add i32 %350, %186
  %352 = add i32 %351, %187
  %353 = add i32 %352, %188
  %354 = sub i32 %353, %189
  %355 = sub i32 %354, %190
  %356 = add i32 %355, %191
  %357 = add i32 %356, %192
  %358 = add i32 %357, %195
  %359 = add i32 %358, %197
  %360 = add i32 %359, %198
  %361 = add i32 %360, %200
  %362 = add i32 %361, %201
  %363 = add i32 %362, %202
  %364 = add i32 %363, %213
  %365 = sub i32 %364, %215
  %366 = sub i32 %365, %216
  %367 = sub i32 %366, %217
  %368 = add i32 %367, %219
  %369 = add i32 %368, %220
  %370 = add i32 %369, %221
  %371 = sub i32 %370, %226
  %372 = sub i32 %371, %22
  %373 = sub i32 %372, %21
  %374 = add i32 %373, %52
  %375 = add i32 %374, %71
  %376 = sub i32 %375, %79
  %377 = sub i32 %376, %81
  %378 = sub i32 %377, %89
  %379 = sub i32 %378, %92
  %380 = sub i32 %379, %99
  %381 = sub i32 %380, %105
  %382 = add i32 %381, %109
  %383 = add i32 %382, %122
  %384 = sub i32 %383, %124
  %385 = add i32 %384, %128
  %386 = add i32 %385, %135
  %387 = add i32 %386, %136
  %388 = sub i32 %387, %140
  %389 = sub i32 %388, %142
  %390 = sub i32 %389, %147
  %391 = add i32 %390, %150
  %392 = sub i32 %391, %176
  %393 = sub i32 %392, %204
  %394 = sub i32 %393, %206
  %395 = add i32 %394, %208
  %396 = sub i32 %395, %214
  %397 = add i32 %396, %223
  %398 = add i32 %397, %225
  %399 = add i32 %398, %228
  %400 = sub i32 %399, %230
  %401 = add i32 %400, %231
  %402 = add i32 %401, %233
  %403 = sub i32 %402, %234
  %404 = add i32 %403, %30
  %405 = sub i32 %404, %25
  %406 = add i32 %405, %28
  %407 = add i32 %406, %253
  %408 = add i32 %407, %256
  %409 = add i32 %408, %250
  %410 = add i32 %409, %246
  %411 = icmp eq i32 %410, %20
  %412 = select i1 %411, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %413 = tail call i32 @puts(i8* nonnull dereferenceable(1) %412)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
