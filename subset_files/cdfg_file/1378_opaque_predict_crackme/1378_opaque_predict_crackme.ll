; ModuleID = '../.././c_source_file/1378_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1378_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %4, -1
  %8 = or i32 %7, %3
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = and i32 %11, %1
  %13 = xor i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = shl i32 %14, 1
  %16 = sub i32 1, %12
  %17 = add i32 %16, %15
  %18 = add i32 %17, %6
  %19 = sub i32 %18, %8
  %20 = xor i32 %3, -1
  %21 = or i32 %20, %4
  %22 = and i32 %9, %1
  %23 = xor i32 %22, -1
  %24 = and i32 %23, %0
  %25 = or i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %2, %1
  %28 = or i32 %27, %26
  %29 = and i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %30, %1
  %32 = or i32 %27, %0
  %33 = and i32 %2, %1
  %34 = and i32 %33, %0
  %35 = or i32 %2, %1
  %36 = xor i32 %35, %0
  %37 = or i32 %34, %36
  %38 = xor i32 %1, -1
  %39 = and i32 %38, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %27, -1
  %42 = and i32 %41, %40
  %43 = xor i32 %25, %2
  %44 = or i32 %38, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %13, %45
  %47 = xor i32 %44, %2
  %48 = or i32 %22, %0
  %49 = xor i32 %33, %0
  %50 = and i32 %38, %2
  %51 = and i32 %50, %0
  %52 = xor i32 %0, -1
  %53 = or i32 %38, %2
  %54 = xor i32 %53, -1
  %55 = or i32 %54, %0
  %56 = xor i32 %51, %55
  %57 = or i32 %9, %0
  %58 = and i32 %57, %1
  %59 = and i32 %1, %0
  %60 = xor i32 %35, %59
  %61 = and i32 %50, %52
  %62 = and i32 %53, %0
  %63 = or i32 %61, %62
  %64 = or i32 %35, %0
  %65 = or i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %1, %0
  %68 = xor i32 %67, -1
  %69 = or i32 %66, %68
  %70 = and i32 %35, %0
  %71 = or i32 %13, %67
  %72 = or i32 %39, %9
  %73 = xor i32 %65, %1
  %74 = and i32 %57, %68
  %75 = and i32 %35, %52
  %76 = xor i32 %75, 2147483647
  %77 = xor i32 %76, %34
  %78 = and i32 %44, %9
  %79 = or i32 %9, %1
  %80 = and i32 %79, %0
  %81 = shl i32 %80, 1
  %82 = or i32 %59, %14
  %83 = or i32 %33, %52
  %84 = and i32 %33, %52
  %85 = or i32 %84, %70
  %86 = shl i32 %85, 1
  %87 = xor i32 %57, -1
  %88 = or i32 %87, %38
  %89 = shl i32 %29, 1
  %90 = or i32 %68, %2
  %91 = shl i32 %90, 1
  %92 = or i32 %39, %41
  %93 = shl i32 %92, 1
  %94 = or i32 %27, %52
  %95 = xor i32 %61, %94
  %96 = shl i32 %95, 2
  %97 = xor i32 %29, %35
  %98 = or i32 %41, %45
  %99 = xor i32 %35, -1
  %100 = or i32 %99, %0
  %101 = xor i32 %33, -1
  %102 = or i32 %101, %0
  %103 = shl i32 %102, 1
  %104 = xor i32 %11, %1
  %105 = xor i32 %23, %0
  %106 = or i32 %13, %26
  %107 = or i32 %34, %75
  %108 = and i32 %27, %52
  %109 = xor i32 %10, %79
  %110 = and i32 %44, %41
  %111 = shl i32 %101, 1
  %112 = xor i32 %29, %25
  %113 = or i32 %79, %0
  %114 = shl i32 %2, 1
  %115 = shl i32 %41, 1
  %116 = add i32 %35, 1
  %117 = or i32 %33, %39
  %118 = or i32 %29, %1
  %119 = shl i32 %118, 1
  %120 = xor i32 %84, -1
  %121 = xor i32 %70, %120
  %122 = or i32 %9, %45
  %123 = or i32 %29, %38
  %124 = or i32 %13, %39
  %125 = and i32 %14, %68
  %126 = or i32 %13, %59
  %127 = add i32 %25, 1
  %128 = xor i32 %101, %0
  %129 = and i32 %44, %14
  %130 = shl i32 %129, 1
  %131 = or i32 %9, %26
  %132 = and i32 %13, %67
  %133 = and i32 %101, %0
  %134 = or i32 %14, %26
  %135 = xor i32 %59, %2
  %136 = xor i32 %62, 2147483647
  %137 = xor i32 %136, %61
  %138 = and i32 %67, %2
  %139 = xor i32 %65, %59
  %140 = and i32 %30, %38
  %141 = and i32 %68, %2
  %142 = and i32 %13, %40
  %143 = shl i32 %9, 1
  %144 = and i32 %65, %1
  %145 = xor i32 %53, %0
  %146 = xor i32 %145, 2147483647
  %147 = xor i32 %146, %51
  %148 = or i32 %41, %0
  %149 = and i32 %41, %0
  %150 = or i32 %29, %45
  %151 = and i32 %27, %40
  %152 = xor i32 %87, %1
  %153 = add i32 %65, 1
  %154 = xor i32 %34, -1
  %155 = xor i32 %108, %154
  %156 = or i32 %67, %66
  %157 = and i32 %27, %0
  %158 = xor i32 %157, %120
  %159 = or i32 %99, %52
  %160 = or i32 %41, %52
  %161 = xor i32 %40, %2
  %162 = and i32 %13, %25
  %163 = or i32 %51, %145
  %164 = or i32 %13, %38
  %165 = and i32 %65, %68
  %166 = or i32 %59, %87
  %167 = or i32 %29, %22
  %168 = or i32 %67, %2
  %169 = or i32 %67, %9
  %170 = and i32 %101, %52
  %171 = xor i32 %39, %2
  %172 = or i32 %29, %68
  %173 = and i32 %13, %1
  %174 = or i32 %79, %52
  %175 = shl i32 %174, 1
  %176 = xor i32 %45, %2
  %177 = xor i32 %79, -1
  %178 = or i32 %10, %177
  %179 = shl i32 %52, 1
  %180 = and i32 %57, %67
  %181 = xor i32 %59, -1
  %182 = and i32 %181, %2
  %183 = xor i32 %29, %23
  %184 = and i32 %65, %38
  %185 = or i32 %87, %1
  %186 = and i32 %41, %52
  %187 = xor i32 %10, %101
  %188 = shl i32 %187, 2
  %189 = or i32 %59, %9
  %190 = or i32 %35, %52
  %191 = and i32 %30, %1
  %192 = or i32 %84, %157
  %193 = and i32 %13, %181
  %194 = or i32 %14, %68
  %195 = or i32 %27, %45
  %196 = xor i32 %27, %0
  %197 = or i32 %59, %99
  %198 = or i32 %87, %68
  %199 = and i32 %13, %44
  %200 = or i32 %10, %33
  %201 = and i32 %41, %181
  %202 = or i32 %26, %2
  %203 = shl i32 %202, 1
  %204 = or i32 %22, %39
  %205 = and i32 %9, %181
  %206 = xor i32 %57, %1
  %207 = shl i32 %206, 1
  %208 = or i32 %23, %52
  %209 = or i32 %14, %38
  %210 = and i32 %27, %25
  %211 = and i32 %79, %52
  %212 = xor i32 %57, %59
  %213 = and i32 %25, %41
  %214 = shl i32 %213, 1
  %215 = and i32 %65, %67
  %216 = shl i32 %215, 1
  %217 = and i32 %25, %14
  %218 = xor i32 %29, %1
  %219 = xor i32 %181, %2
  %220 = and i32 %25, %2
  %221 = or i32 %67, %14
  %222 = and i32 %40, %2
  %223 = or i32 %177, %52
  %224 = and i32 %11, %68
  %225 = or i32 %29, %67
  %226 = xor i32 %36, %154
  %227 = and i32 %14, %181
  %228 = shl i32 %227, 1
  %229 = and i32 %67, %11
  %230 = or i32 %59, %177
  %231 = xor i32 %39, %101
  %232 = xor i32 %196, -1
  %233 = or i32 %34, %232
  %234 = xor i32 %10, %1
  %235 = shl i32 %234, 1
  %236 = and i32 %57, %38
  %237 = xor i32 %177, %0
  %238 = or i32 %27, %39
  %239 = shl i32 %238, 1
  %240 = xor i32 %79, %0
  %241 = xor i32 %26, %2
  %242 = or i32 %10, %38
  %243 = and i32 %27, %181
  %244 = or i32 %67, %87
  %245 = and i32 %13, %68
  %246 = and i32 %13, %38
  %247 = or i32 %59, %66
  %248 = or i32 %66, %38
  %249 = or i32 %66, %1
  %250 = and i32 %67, %9
  %251 = or i32 %10, %1
  %252 = xor i32 %99, %0
  %253 = xor i32 %22, %0
  %254 = xor i32 %94, -1
  %255 = or i32 %61, %254
  %256 = or i32 %51, %196
  %257 = and i32 %44, %2
  %258 = shl i32 %94, 1
  %259 = and i32 %99, %52
  %260 = and i32 %22, %52
  %261 = and i32 %99, %0
  %262 = and i32 %22, %0
  %263 = mul i32 %262, 11
  %264 = and i32 %177, %52
  %265 = mul i32 %264, 14
  %266 = shl i32 %84, 1
  %267 = and i32 %177, %0
  %268 = mul i32 %267, 28
  %269 = add i32 %189, %181
  %270 = add i32 %269, %34
  %271 = sub i32 %270, %157
  %272 = add i32 %271, %24
  %273 = sub i32 %272, %256
  %274 = mul i32 %273, 5
  %275 = add i32 %259, %249
  %276 = add i32 %275, %132
  %277 = add i32 %276, %83
  %278 = shl i32 %277, 2
  %279 = add i32 %72, %59
  %280 = sub i32 %279, %105
  %281 = sub i32 %280, %226
  %282 = mul i32 %281, 3
  %283 = sub i32 %260, %261
  %284 = mul i32 %283, 6
  %285 = sub i32 -2, %39
  %286 = add i32 %285, %141
  %287 = add i32 %286, %47
  %288 = add i32 %287, %22
  %289 = add i32 %288, %183
  %290 = add i32 %289, %180
  %291 = add i32 %290, %148
  %292 = add i32 %291, %100
  %293 = add i32 %292, %137
  %294 = add i32 %293, %147
  %295 = add i32 %294, %77
  %296 = shl i32 %295, 1
  %297 = sub i32 2, %0
  %298 = sub i32 %297, %1
  %299 = sub i32 %298, %179
  %300 = add i32 %299, %127
  %301 = add i32 %300, 1
  %302 = add i32 %301, %3
  %303 = sub i32 %302, %43
  %304 = sub i32 %303, %27
  %305 = add i32 %304, %35
  %306 = add i32 %305, %10
  %307 = sub i32 %306, %78
  %308 = add i32 %307, %23
  %309 = sub i32 %308, %114
  %310 = add i32 %309, %116
  %311 = add i32 %310, %122
  %312 = sub i32 %311, %33
  %313 = sub i32 %312, %131
  %314 = add i32 %313, %135
  %315 = add i32 %314, %138
  %316 = sub i32 %315, %143
  %317 = add i32 %316, %153
  %318 = sub i32 %317, %161
  %319 = sub i32 %318, %65
  %320 = add i32 %319, %30
  %321 = sub i32 %320, %168
  %322 = add i32 %321, %169
  %323 = sub i32 %322, %171
  %324 = add i32 %323, %176
  %325 = add i32 %324, %177
  %326 = sub i32 %325, %182
  %327 = add i32 %326, %205
  %328 = add i32 %327, %13
  %329 = add i32 %328, %219
  %330 = add i32 %329, %220
  %331 = sub i32 %330, %222
  %332 = add i32 %331, %241
  %333 = add i32 %332, %250
  %334 = sub i32 %333, %79
  %335 = add i32 %334, %257
  %336 = add i32 %335, %4
  %337 = sub i32 %336, %28
  %338 = add i32 %337, %31
  %339 = add i32 %338, %32
  %340 = sub i32 %339, %42
  %341 = sub i32 %340, %46
  %342 = add i32 %341, %36
  %343 = sub i32 %342, %48
  %344 = sub i32 %343, %49
  %345 = sub i32 %344, %58
  %346 = sub i32 %345, %60
  %347 = sub i32 %346, %64
  %348 = sub i32 %347, %69
  %349 = sub i32 %348, %70
  %350 = add i32 %349, %71
  %351 = sub i32 %350, %73
  %352 = add i32 %351, %74
  %353 = sub i32 %352, %82
  %354 = add i32 %353, %88
  %355 = sub i32 %354, %89
  %356 = sub i32 %355, %91
  %357 = sub i32 %356, %97
  %358 = add i32 %357, %98
  %359 = add i32 %358, %104
  %360 = sub i32 %359, %106
  %361 = sub i32 %360, %108
  %362 = sub i32 %361, %109
  %363 = sub i32 %362, %110
  %364 = sub i32 %363, %111
  %365 = add i32 %364, %112
  %366 = sub i32 %365, %113
  %367 = sub i32 %366, %115
  %368 = sub i32 %367, %117
  %369 = add i32 %368, %123
  %370 = add i32 %369, %124
  %371 = add i32 %370, %125
  %372 = add i32 %371, %126
  %373 = sub i32 %372, %128
  %374 = add i32 %373, %133
  %375 = add i32 %374, %134
  %376 = add i32 %375, %139
  %377 = add i32 %376, %140
  %378 = add i32 %377, %142
  %379 = add i32 %378, %144
  %380 = sub i32 %379, %149
  %381 = add i32 %380, %150
  %382 = add i32 %381, %151
  %383 = sub i32 %382, %152
  %384 = add i32 %383, %156
  %385 = sub i32 %384, %159
  %386 = add i32 %385, %160
  %387 = sub i32 %386, %162
  %388 = sub i32 %387, %164
  %389 = sub i32 %388, %165
  %390 = sub i32 %389, %166
  %391 = sub i32 %390, %167
  %392 = sub i32 %391, %170
  %393 = sub i32 %392, %172
  %394 = add i32 %393, %173
  %395 = sub i32 %394, %178
  %396 = add i32 %395, %184
  %397 = add i32 %396, %185
  %398 = sub i32 %397, %186
  %399 = add i32 %398, %190
  %400 = sub i32 %399, %191
  %401 = sub i32 %400, %193
  %402 = add i32 %401, %194
  %403 = sub i32 %402, %195
  %404 = add i32 %403, %196
  %405 = sub i32 %404, %197
  %406 = add i32 %405, %198
  %407 = sub i32 %406, %199
  %408 = sub i32 %407, %200
  %409 = add i32 %408, %201
  %410 = sub i32 %409, %203
  %411 = sub i32 %410, %204
  %412 = add i32 %411, %208
  %413 = sub i32 %412, %209
  %414 = sub i32 %413, %210
  %415 = add i32 %414, %211
  %416 = add i32 %415, %212
  %417 = sub i32 %416, %217
  %418 = add i32 %417, %218
  %419 = add i32 %418, %221
  %420 = add i32 %419, %223
  %421 = sub i32 %420, %224
  %422 = sub i32 %421, %225
  %423 = add i32 %422, %229
  %424 = add i32 %423, %230
  %425 = sub i32 %424, %231
  %426 = add i32 %425, %236
  %427 = add i32 %426, %237
  %428 = sub i32 %427, %240
  %429 = sub i32 %428, %242
  %430 = add i32 %429, %243
  %431 = sub i32 %430, %244
  %432 = add i32 %431, %245
  %433 = sub i32 %432, %246
  %434 = add i32 %433, %247
  %435 = sub i32 %434, %248
  %436 = add i32 %435, %251
  %437 = sub i32 %436, %252
  %438 = sub i32 %437, %253
  %439 = add i32 %438, %21
  %440 = sub i32 %439, %6
  %441 = sub i32 %440, %37
  %442 = add i32 %441, %56
  %443 = sub i32 %442, %63
  %444 = sub i32 %443, %81
  %445 = sub i32 %444, %93
  %446 = sub i32 %445, %103
  %447 = add i32 %446, %107
  %448 = sub i32 %447, %119
  %449 = add i32 %448, %121
  %450 = sub i32 %449, %130
  %451 = sub i32 %450, %155
  %452 = sub i32 %451, %158
  %453 = add i32 %452, %163
  %454 = sub i32 %453, %175
  %455 = sub i32 %454, %188
  %456 = add i32 %455, %192
  %457 = sub i32 %456, %207
  %458 = sub i32 %457, %214
  %459 = sub i32 %458, %216
  %460 = sub i32 %459, %228
  %461 = add i32 %460, %233
  %462 = sub i32 %461, %235
  %463 = sub i32 %462, %239
  %464 = add i32 %463, %255
  %465 = sub i32 %464, %258
  %466 = add i32 %465, %263
  %467 = add i32 %466, %265
  %468 = sub i32 %467, %266
  %469 = add i32 %468, %268
  %470 = sub i32 %469, %86
  %471 = sub i32 %470, %96
  %472 = add i32 %471, %284
  %473 = add i32 %472, %278
  %474 = add i32 %473, %282
  %475 = add i32 %474, %274
  %476 = add i32 %475, %296
  %477 = icmp eq i32 %19, %476
  %478 = select i1 %477, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %479 = tail call i32 @puts(i8* nonnull dereferenceable(1) %478)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
