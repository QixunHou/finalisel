digraph "DFG for'crackme' function" {
	Node0x1fe9540[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1fe9bf0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1fe9cb0[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x1fe9d20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1fe9d90[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1fe9e00[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1fe9e70[shape=record, label="  %9 = and i32 %4, %0"];
	Node0x1fe9ee0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1fe9f80[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1fe9ff0[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x1fea060[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1fea0d0[shape=record, label="  %14 = xor i32 %6, -2"];
	Node0x1fea170[shape=record, label="  %15 = mul i32 %7, 3"];
	Node0x1fea1e0[shape=record, label="  %16 = add i32 %0, -1"];
	Node0x1fea250[shape=record, label="  %17 = add i32 %16, %4"];
	Node0x1fea2c0[shape=record, label="  %18 = sub i32 %17, %3"];
	Node0x1fea330[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x1fea3a0[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1fea410[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x1fea480[shape=record, label="  %22 = sub i32 %21, %6"];
	Node0x1fea4f0[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x1fea560[shape=record, label="  %24 = sub i32 %23, %11"];
	Node0x1fea5d0[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x1fea640[shape=record, label="  %26 = icmp eq i32 %25, %1"];
	Node0x1f8a268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1feaae0[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1feab30[shape=record, label="  ret void"];
	Node0x1fe9540 -> Node0x1fe9bf0;
	Node0x1fe9bf0 -> Node0x1fe9cb0;
	Node0x1fe9cb0 -> Node0x1fe9d20;
	Node0x1fe9d20 -> Node0x1fe9d90;
	Node0x1fe9d90 -> Node0x1fe9e00;
	Node0x1fe9e00 -> Node0x1fe9e70;
	Node0x1fe9e70 -> Node0x1fe9ee0;
	Node0x1fe9ee0 -> Node0x1fe9f80;
	Node0x1fe9f80 -> Node0x1fe9ff0;
	Node0x1fe9ff0 -> Node0x1fea060;
	Node0x1fea060 -> Node0x1fea0d0;
	Node0x1fea0d0 -> Node0x1fea170;
	Node0x1fea170 -> Node0x1fea1e0;
	Node0x1fea1e0 -> Node0x1fea250;
	Node0x1fea250 -> Node0x1fea2c0;
	Node0x1fea2c0 -> Node0x1fea330;
	Node0x1fea330 -> Node0x1fea3a0;
	Node0x1fea3a0 -> Node0x1fea410;
	Node0x1fea410 -> Node0x1fea480;
	Node0x1fea480 -> Node0x1fea4f0;
	Node0x1fea4f0 -> Node0x1fea560;
	Node0x1fea560 -> Node0x1fea5d0;
	Node0x1fea5d0 -> Node0x1fea640;
	Node0x1fea640 -> Node0x1f8a268;
	Node0x1f8a268 -> Node0x1feaae0;
	Node0x1feaae0 -> Node0x1feab30;
edge [color=red]
	Node0x1fe9bf0 -> Node0x1fe9cb0;
	Node0x1fe9cb0 -> Node0x1fe9d20;
	Node0x1fe9d90 -> Node0x1fe9e00;
	Node0x1fe9bf0 -> Node0x1fe9e70;
	Node0x1fe9e70 -> Node0x1fe9ee0;
	Node0x1fe9ee0 -> Node0x1fe9f80;
	Node0x1fe9ff0 -> Node0x1fea060;
	Node0x1fe9d20 -> Node0x1fea0d0;
	Node0x1fe9d90 -> Node0x1fea170;
	Node0x1fea1e0 -> Node0x1fea250;
	Node0x1fe9bf0 -> Node0x1fea250;
	Node0x1fea250 -> Node0x1fea2c0;
	Node0x1fe9540 -> Node0x1fea2c0;
	Node0x1fea2c0 -> Node0x1fea330;
	Node0x1fe9e00 -> Node0x1fea330;
	Node0x1fea330 -> Node0x1fea3a0;
	Node0x1fea060 -> Node0x1fea3a0;
	Node0x1fea3a0 -> Node0x1fea410;
	Node0x1fe9e70 -> Node0x1fea410;
	Node0x1fea410 -> Node0x1fea480;
	Node0x1fe9d20 -> Node0x1fea480;
	Node0x1fea480 -> Node0x1fea4f0;
	Node0x1fea170 -> Node0x1fea4f0;
	Node0x1fea4f0 -> Node0x1fea560;
	Node0x1fe9f80 -> Node0x1fea560;
	Node0x1fea560 -> Node0x1fea5d0;
	Node0x1fea0d0 -> Node0x1fea5d0;
	Node0x1fea5d0 -> Node0x1fea640;
	Node0x1fea640 -> Node0x1f8a268;
	Node0x1f8a268 -> Node0x1feaae0;
}
