digraph "DFG for'main' function" {
	Node0x1feacf8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1fead78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1feae08[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1feb268[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1feb348[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1feb468[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1feb6a0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1feb758[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1fec6c8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1fecd50[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x1fecdc0[shape=record, label="  %9 = xor i32 %7, -1"];
	Node0x1fece30[shape=record, label="  %10 = or i32 %6, %9"];
	Node0x1fecea0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1fecf10[shape=record, label="  %12 = and i32 %7, %6"];
	Node0x1fecf80[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1fecff0[shape=record, label="  %14 = and i32 %6, %9"];
	Node0x1fed060[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x1fed0d0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x1fed140[shape=record, label="  %17 = or i32 %7, %6"];
	Node0x1fed1b0[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x1fed220[shape=record, label="  %19 = xor i32 %11, -2"];
	Node0x1fed290[shape=record, label="  %20 = mul i32 %12, 3"];
	Node0x1fed300[shape=record, label="  %21 = add i32 %6, -1"];
	Node0x1fed370[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x1fed3e0[shape=record, label="  %23 = sub i32 %22, %8"];
	Node0x1fed450[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x1fed4c0[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x1fed530[shape=record, label="  %26 = sub i32 %25, %14"];
	Node0x1fed5a0[shape=record, label="  %27 = sub i32 %26, %11"];
	Node0x1fed610[shape=record, label="  %28 = add i32 %27, %20"];
	Node0x1fed680[shape=record, label="  %29 = sub i32 %28, %16"];
	Node0x1fed6f0[shape=record, label="  %30 = add i32 %29, %19"];
	Node0x1fed760[shape=record, label="  %31 = icmp eq i32 %30, %7"];
	Node0x1f8b9d8[shape=record, label="  %32 = select i1 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1feda00[shape=record, label="  %33 = call i32 @puts(i8* nonnull dereferenceable(1) %32) #5"];
	Node0x1fedc58[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1feddb8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1fede78[shape=record, label="  ret i32 0"];
	Node0x1feacf8 -> Node0x1fead78;
	Node0x1fead78 -> Node0x1feae08;
	Node0x1feae08 -> Node0x1feb268;
	Node0x1feb268 -> Node0x1feb348;
	Node0x1feb348 -> Node0x1feb468;
	Node0x1feb468 -> Node0x1feb6a0;
	Node0x1feb6a0 -> Node0x1feb758;
	Node0x1feb758 -> Node0x1fec6c8;
	Node0x1fec6c8 -> Node0x1fecd50;
	Node0x1fecd50 -> Node0x1fecdc0;
	Node0x1fecdc0 -> Node0x1fece30;
	Node0x1fece30 -> Node0x1fecea0;
	Node0x1fecea0 -> Node0x1fecf10;
	Node0x1fecf10 -> Node0x1fecf80;
	Node0x1fecf80 -> Node0x1fecff0;
	Node0x1fecff0 -> Node0x1fed060;
	Node0x1fed060 -> Node0x1fed0d0;
	Node0x1fed0d0 -> Node0x1fed140;
	Node0x1fed140 -> Node0x1fed1b0;
	Node0x1fed1b0 -> Node0x1fed220;
	Node0x1fed220 -> Node0x1fed290;
	Node0x1fed290 -> Node0x1fed300;
	Node0x1fed300 -> Node0x1fed370;
	Node0x1fed370 -> Node0x1fed3e0;
	Node0x1fed3e0 -> Node0x1fed450;
	Node0x1fed450 -> Node0x1fed4c0;
	Node0x1fed4c0 -> Node0x1fed530;
	Node0x1fed530 -> Node0x1fed5a0;
	Node0x1fed5a0 -> Node0x1fed610;
	Node0x1fed610 -> Node0x1fed680;
	Node0x1fed680 -> Node0x1fed6f0;
	Node0x1fed6f0 -> Node0x1fed760;
	Node0x1fed760 -> Node0x1f8b9d8;
	Node0x1f8b9d8 -> Node0x1feda00;
	Node0x1feda00 -> Node0x1fedc58;
	Node0x1fedc58 -> Node0x1feddb8;
	Node0x1feddb8 -> Node0x1fede78;
edge [color=red]
	Node0x1feacf8 -> Node0x1feae08;
	Node0x1feae08 -> Node0x1feb268;
	Node0x1fead78 -> Node0x1feb348;
	Node0x1feb348 -> Node0x1feb468;
	Node0x1feacf8 -> Node0x1feb6a0;
	Node0x1fead78 -> Node0x1feb6a0;
	Node0x1feacf8 -> Node0x1feb758;
	Node0x1fead78 -> Node0x1fec6c8;
	Node0x1fec6c8 -> Node0x1fecd50;
	Node0x1feb758 -> Node0x1fecd50;
	Node0x1fec6c8 -> Node0x1fecdc0;
	Node0x1feb758 -> Node0x1fece30;
	Node0x1fecdc0 -> Node0x1fece30;
	Node0x1fece30 -> Node0x1fecea0;
	Node0x1fec6c8 -> Node0x1fecf10;
	Node0x1feb758 -> Node0x1fecf10;
	Node0x1fecf10 -> Node0x1fecf80;
	Node0x1feb758 -> Node0x1fecff0;
	Node0x1fecdc0 -> Node0x1fecff0;
	Node0x1fecff0 -> Node0x1fed060;
	Node0x1fed060 -> Node0x1fed0d0;
	Node0x1fec6c8 -> Node0x1fed140;
	Node0x1feb758 -> Node0x1fed140;
	Node0x1fed140 -> Node0x1fed1b0;
	Node0x1fecea0 -> Node0x1fed220;
	Node0x1fecf10 -> Node0x1fed290;
	Node0x1feb758 -> Node0x1fed300;
	Node0x1fed300 -> Node0x1fed370;
	Node0x1fecdc0 -> Node0x1fed370;
	Node0x1fed370 -> Node0x1fed3e0;
	Node0x1fecd50 -> Node0x1fed3e0;
	Node0x1fed3e0 -> Node0x1fed450;
	Node0x1fecf80 -> Node0x1fed450;
	Node0x1fed450 -> Node0x1fed4c0;
	Node0x1fed1b0 -> Node0x1fed4c0;
	Node0x1fed4c0 -> Node0x1fed530;
	Node0x1fecff0 -> Node0x1fed530;
	Node0x1fed530 -> Node0x1fed5a0;
	Node0x1fecea0 -> Node0x1fed5a0;
	Node0x1fed5a0 -> Node0x1fed610;
	Node0x1fed290 -> Node0x1fed610;
	Node0x1fed610 -> Node0x1fed680;
	Node0x1fed0d0 -> Node0x1fed680;
	Node0x1fed680 -> Node0x1fed6f0;
	Node0x1fed220 -> Node0x1fed6f0;
	Node0x1fed6f0 -> Node0x1fed760;
	Node0x1fec6c8 -> Node0x1fed760;
	Node0x1fed760 -> Node0x1f8b9d8;
	Node0x1f8b9d8 -> Node0x1feda00;
	Node0x1feb348 -> Node0x1fedc58;
	Node0x1feae08 -> Node0x1feddb8;
}
