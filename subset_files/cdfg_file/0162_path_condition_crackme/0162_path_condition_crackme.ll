; ModuleID = '../.././c_source_file/0162_path_condition_crackme.c'
source_filename = "../.././c_source_file/0162_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %2, -1
  %9 = and i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = and i32 %8, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %0
  %15 = add i32 %14, %11
  %16 = add i32 %15, %7
  %17 = shl i32 %4, 1
  %18 = and i32 %4, %3
  %19 = shl i32 %18, 1
  %20 = xor i32 %19, -2
  %21 = and i32 %6, %3
  %22 = or i32 %4, %3
  %23 = shl i32 %7, 1
  %24 = xor i32 %23, -2
  %25 = or i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %2
  %28 = and i32 %2, %0
  %29 = xor i32 %1, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %28, %31
  %33 = shl i32 %32, 1
  %34 = xor i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = add i32 %34, 1
  %37 = or i32 %2, %1
  %38 = xor i32 %28, %37
  %39 = or i32 %34, %29
  %40 = and i32 %29, %2
  %41 = and i32 %40, %0
  %42 = xor i32 %0, -1
  %43 = or i32 %29, %2
  %44 = xor i32 %43, 1073741823
  %45 = or i32 %44, %0
  %46 = xor i32 %45, %41
  %47 = shl i32 %46, 2
  %48 = xor i32 %1, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %49, %2
  %51 = or i32 %35, %1
  %52 = and i32 %2, %1
  %53 = and i32 %52, %0
  %54 = xor i32 %2, %1
  %55 = and i32 %54, %42
  %56 = xor i32 %55, -1
  %57 = xor i32 %53, %56
  %58 = or i32 %54, %31
  %59 = and i32 %29, %0
  %60 = xor i32 %59, -1
  %61 = and i32 %60, %2
  %62 = and i32 %52, %42
  %63 = and i32 %54, %0
  %64 = or i32 %62, %63
  %65 = xor i32 %37, %9
  %66 = or i32 %54, %42
  %67 = and i32 %8, %0
  %68 = or i32 %67, %49
  %69 = or i32 %8, %0
  %70 = xor i32 %69, -1
  %71 = xor i32 %37, -1
  %72 = or i32 %28, %71
  %73 = or i32 %2, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %74, %1
  %76 = xor i32 %28, -1
  %77 = and i32 %76, %49
  %78 = or i32 %35, %49
  %79 = add i32 %25, 1
  %80 = or i32 %54, %59
  %81 = or i32 %13, %0
  %82 = xor i32 %59, %2
  %83 = xor i32 %54, %0
  %84 = xor i32 %53, %83
  %85 = or i32 %8, %49
  %86 = xor i32 %69, %9
  %87 = or i32 %8, %1
  %88 = xor i32 %87, -1
  %89 = or i32 %88, %0
  %90 = xor i32 %30, %2
  %91 = and i32 %54, %60
  %92 = xor i32 %52, -1
  %93 = and i32 %92, %0
  %94 = or i32 %9, %2
  %95 = or i32 %52, %42
  %96 = shl i32 %95, 1
  %97 = and i32 %34, %49
  %98 = xor i32 %54, -1
  %99 = and i32 %98, %42
  %100 = xor i32 %26, %2
  %101 = and i32 %73, %49
  %102 = or i32 %48, %70
  %103 = or i32 %8, %31
  %104 = xor i32 %83, -1
  %105 = xor i32 %41, %104
  %106 = or i32 %34, %31
  %107 = or i32 %12, %42
  %108 = or i32 %92, %0
  %109 = xor i32 %12, %0
  %110 = xor i32 %59, %13
  %111 = or i32 %98, %31
  %112 = and i32 %30, %35
  %113 = or i32 %34, %59
  %114 = and i32 %8, %49
  %115 = or i32 %67, %52
  %116 = and i32 %40, %42
  %117 = and i32 %43, %0
  %118 = or i32 %116, %117
  %119 = and i32 %34, %30
  %120 = xor i32 %43, %0
  %121 = xor i32 %120, -1
  %122 = xor i32 %41, %121
  %123 = add i32 %73, 1
  %124 = xor i32 %73, %1
  %125 = or i32 %34, %26
  %126 = and i32 %13, %42
  %127 = or i32 %48, %74
  %128 = shl i32 %127, 1
  %129 = xor i32 %67, -1
  %130 = and i32 %129, %49
  %131 = or i32 %88, %42
  %132 = or i32 %92, %42
  %133 = xor i32 %74, %1
  %134 = or i32 %28, %29
  %135 = or i32 %9, %35
  %136 = xor i32 %117, -1
  %137 = xor i32 %116, %136
  %138 = and i32 %87, %0
  %139 = and i32 %35, %49
  %140 = or i32 %41, %120
  %141 = or i32 %53, %104
  %142 = or i32 %8, %26
  %143 = or i32 %59, %8
  %144 = or i32 %12, %0
  %145 = or i32 %98, %0
  %146 = shl i32 %145, 1
  %147 = or i32 %54, %0
  %148 = or i32 %9, %71
  %149 = and i32 %35, %29
  %150 = or i32 %67, %29
  %151 = and i32 %69, %48
  %152 = xor i32 %28, %13
  %153 = xor i32 %28, %25
  %154 = or i32 %12, %59
  %155 = or i32 %74, %29
  %156 = or i32 %9, %74
  %157 = or i32 %53, %55
  %158 = xor i32 %28, %1
  %159 = xor i32 %71, %0
  %160 = and i32 %54, %30
  %161 = shl i32 %160, 1
  %162 = or i32 %48, %8
  %163 = shl i32 %162, 1
  %164 = and i32 %48, %2
  %165 = xor i32 %87, %0
  %166 = or i32 %87, %42
  %167 = xor i32 %73, %9
  %168 = or i32 %87, %0
  %169 = and i32 %69, %1
  %170 = xor i32 %13, %0
  %171 = and i32 %73, %48
  %172 = and i32 %54, %25
  %173 = or i32 %48, %2
  %174 = xor i32 %98, %0
  %175 = and i32 %48, %76
  %176 = xor i32 %60, %2
  %177 = shl i32 %176, 1
  %178 = xor i32 %88, %0
  %179 = xor i32 %25, %2
  %180 = shl i32 %179, 1
  %181 = xor i32 %92, %0
  %182 = xor i32 %52, %0
  %183 = and i32 %25, %35
  %184 = and i32 %98, %10
  %185 = or i32 %28, %26
  %186 = xor i32 %87, %9
  %187 = and i32 %69, %29
  %188 = xor i32 %63, -1
  %189 = xor i32 %62, %188
  %190 = or i32 %13, %42
  %191 = and i32 %92, %42
  %192 = or i32 %37, %42
  %193 = shl i32 %192, 1
  %194 = or i32 %37, %0
  %195 = or i32 %34, %49
  %196 = and i32 %34, %25
  %197 = xor i32 %59, %92
  %198 = or i32 %35, %26
  %199 = and i32 %25, %8
  %200 = xor i32 %41, %147
  %201 = xor i32 %37, %0
  %202 = or i32 %70, %29
  %203 = xor i32 %70, %1
  %204 = and i32 %98, %60
  %205 = shl i32 %204, 1
  %206 = or i32 %9, %70
  %207 = or i32 %35, %29
  %208 = or i32 %71, %0
  %209 = xor i32 %129, %1
  %210 = or i32 %98, %26
  %211 = and i32 %37, %42
  %212 = or i32 %67, %1
  %213 = and i32 %73, %1
  %214 = and i32 %71, %42
  %215 = mul i32 %214, 7
  %216 = and i32 %12, %42
  %217 = and i32 %71, %0
  %218 = mul i32 %217, -13
  %219 = and i32 %12, %0
  %220 = and i32 %88, %42
  %221 = mul i32 %62, -12
  %222 = and i32 %88, %0
  %223 = sub i32 %216, %53
  %224 = sub i32 %223, %185
  %225 = sub i32 %224, %159
  %226 = add i32 %225, %133
  %227 = add i32 %226, %122
  %228 = mul i32 %227, 3
  %229 = sub i32 %59, %178
  %230 = sub i32 %229, %220
  %231 = sub i32 %230, %109
  %232 = add i32 %231, %89
  %233 = mul i32 %232, 5
  %234 = sub i32 %18, %222
  %235 = mul i32 %234, 6
  %236 = add i32 %28, -2
  %237 = add i32 %236, %164
  %238 = add i32 %237, %98
  %239 = add i32 %238, %87
  %240 = add i32 %239, %94
  %241 = add i32 %240, %213
  %242 = add i32 %241, %202
  %243 = add i32 %242, %169
  %244 = add i32 %243, %166
  %245 = add i32 %244, %148
  %246 = add i32 %245, %135
  %247 = add i32 %246, %110
  %248 = add i32 %247, %108
  %249 = add i32 %248, %81
  %250 = add i32 %249, %118
  %251 = add i32 %250, %157
  %252 = add i32 %251, %21
  %253 = shl i32 %252, 1
  %254 = sub i32 2, %0
  %255 = add i32 %254, %29
  %256 = add i32 %255, %79
  %257 = add i32 %256, %48
  %258 = add i32 %257, %60
  %259 = sub i32 %258, %3
  %260 = sub i32 %259, %27
  %261 = add i32 %260, %36
  %262 = sub i32 %261, %50
  %263 = add i32 %262, %61
  %264 = sub i32 %263, %82
  %265 = sub i32 %264, %85
  %266 = add i32 %265, %76
  %267 = sub i32 %266, %90
  %268 = add i32 %267, %71
  %269 = sub i32 %268, %100
  %270 = add i32 %269, %103
  %271 = add i32 %270, %114
  %272 = add i32 %271, %123
  %273 = sub i32 %272, %142
  %274 = add i32 %273, %143
  %275 = add i32 %274, %173
  %276 = add i32 %275, %52
  %277 = add i32 %276, %199
  %278 = sub i32 %277, %54
  %279 = sub i32 %278, %67
  %280 = add i32 %279, %38
  %281 = add i32 %280, %39
  %282 = sub i32 %281, %51
  %283 = add i32 %282, %58
  %284 = add i32 %283, %65
  %285 = sub i32 %284, %66
  %286 = sub i32 %285, %68
  %287 = sub i32 %286, %72
  %288 = add i32 %287, %75
  %289 = add i32 %288, %77
  %290 = add i32 %289, %78
  %291 = add i32 %290, %80
  %292 = add i32 %291, %86
  %293 = sub i32 %292, %91
  %294 = add i32 %293, %93
  %295 = add i32 %294, %97
  %296 = sub i32 %295, %99
  %297 = sub i32 %296, %101
  %298 = add i32 %297, %102
  %299 = add i32 %298, %106
  %300 = sub i32 %299, %107
  %301 = add i32 %300, %111
  %302 = add i32 %301, %112
  %303 = add i32 %302, %113
  %304 = add i32 %303, %115
  %305 = sub i32 %304, %119
  %306 = add i32 %305, %124
  %307 = add i32 %306, %125
  %308 = sub i32 %307, %126
  %309 = sub i32 %308, %130
  %310 = sub i32 %309, %131
  %311 = add i32 %310, %132
  %312 = sub i32 %311, %134
  %313 = add i32 %312, %138
  %314 = sub i32 %313, %139
  %315 = sub i32 %314, %63
  %316 = sub i32 %315, %144
  %317 = sub i32 %316, %147
  %318 = add i32 %317, %149
  %319 = sub i32 %318, %150
  %320 = sub i32 %319, %151
  %321 = sub i32 %320, %152
  %322 = sub i32 %321, %153
  %323 = add i32 %322, %154
  %324 = sub i32 %323, %155
  %325 = sub i32 %324, %156
  %326 = sub i32 %325, %158
  %327 = sub i32 %326, %163
  %328 = add i32 %327, %165
  %329 = add i32 %328, %167
  %330 = sub i32 %329, %168
  %331 = sub i32 %330, %170
  %332 = add i32 %331, %171
  %333 = add i32 %332, %172
  %334 = sub i32 %333, %174
  %335 = sub i32 %334, %175
  %336 = sub i32 %335, %177
  %337 = sub i32 %336, %180
  %338 = add i32 %337, %181
  %339 = add i32 %338, %182
  %340 = add i32 %339, %183
  %341 = sub i32 %340, %184
  %342 = add i32 %341, %186
  %343 = add i32 %342, %187
  %344 = add i32 %343, %190
  %345 = add i32 %344, %191
  %346 = add i32 %345, %194
  %347 = sub i32 %346, %195
  %348 = add i32 %347, %196
  %349 = sub i32 %348, %197
  %350 = sub i32 %349, %198
  %351 = sub i32 %350, %201
  %352 = sub i32 %351, %203
  %353 = add i32 %352, %206
  %354 = sub i32 %353, %207
  %355 = sub i32 %354, %208
  %356 = add i32 %355, %209
  %357 = sub i32 %356, %210
  %358 = sub i32 %357, %211
  %359 = sub i32 %358, %212
  %360 = add i32 %359, %83
  %361 = sub i32 %360, %219
  %362 = sub i32 %361, %17
  %363 = sub i32 %362, %22
  %364 = sub i32 %363, %33
  %365 = sub i32 %364, %57
  %366 = sub i32 %365, %64
  %367 = add i32 %366, %84
  %368 = sub i32 %367, %96
  %369 = add i32 %368, %105
  %370 = sub i32 %369, %128
  %371 = sub i32 %370, %137
  %372 = sub i32 %371, %140
  %373 = add i32 %372, %141
  %374 = sub i32 %373, %146
  %375 = sub i32 %374, %161
  %376 = add i32 %375, %189
  %377 = sub i32 %376, %193
  %378 = sub i32 %377, %200
  %379 = sub i32 %378, %205
  %380 = add i32 %379, %215
  %381 = add i32 %380, %218
  %382 = add i32 %381, %221
  %383 = add i32 %382, %20
  %384 = add i32 %383, %24
  %385 = sub i32 %384, %47
  %386 = add i32 %385, %235
  %387 = add i32 %386, %233
  %388 = add i32 %387, %228
  %389 = add i32 %388, %253
  %390 = icmp eq i32 %16, %389
  %391 = select i1 %390, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %392 = tail call i32 @puts(i8* nonnull dereferenceable(1) %391)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
