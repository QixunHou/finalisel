; ModuleID = '../.././c_source_file/1127_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1127_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = or i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = xor i32 %3, -1
  %12 = and i32 %11, %4
  %13 = xor i32 %5, -1
  %14 = and i32 %13, %3
  %15 = or i32 %14, %12
  %16 = sub i32 %15, %10
  %17 = xor i32 %4, -1
  %18 = and i32 %11, %5
  %19 = and i32 %18, %17
  %20 = xor i32 %5, %3
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %4
  %23 = or i32 %19, %22
  %24 = sub i32 %16, %23
  %25 = xor i32 %2, -1
  %26 = and i32 %25, %0
  %27 = or i32 %26, %1
  %28 = xor i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %9
  %31 = shl i32 %30, 1
  %32 = xor i32 %1, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %2, %1
  %36 = and i32 %35, %0
  %37 = or i32 %2, %1
  %38 = xor i32 %37, %0
  %39 = or i32 %36, %38
  %40 = or i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %1
  %43 = and i32 %33, %25
  %44 = xor i32 %7, -1
  %45 = xor i32 %1, %0
  %46 = and i32 %45, %44
  %47 = or i32 %26, %32
  %48 = and i32 %25, %1
  %49 = or i32 %7, %48
  %50 = or i32 %37, %0
  %51 = xor i32 %0, -1
  %52 = xor i32 %2, %1
  %53 = and i32 %52, %51
  %54 = or i32 %37, %51
  %55 = xor i32 %45, -1
  %56 = and i32 %25, %55
  %57 = and i32 %32, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %28, %58
  %60 = xor i32 %52, -1
  %61 = and i32 %60, %58
  %62 = or i32 %25, %1
  %63 = and i32 %62, %51
  %64 = xor i32 %62, -1
  %65 = or i32 %64, %51
  %66 = xor i32 %26, -1
  %67 = and i32 %66, %32
  %68 = and i32 %32, %2
  %69 = and i32 %68, %0
  %70 = or i32 %32, %2
  %71 = xor i32 %70, %0
  %72 = or i32 %69, %71
  %73 = xor i32 %69, -1
  %74 = xor i32 %71, %73
  %75 = or i32 %41, %32
  %76 = and i32 %1, %0
  %77 = xor i32 %76, -1
  %78 = and i32 %28, %77
  %79 = shl i32 %78, 1
  %80 = or i32 %48, %0
  %81 = and i32 %28, %33
  %82 = and i32 %70, %51
  %83 = xor i32 %82, %73
  %84 = xor i32 %48, -1
  %85 = or i32 %84, %51
  %86 = xor i32 %52, %0
  %87 = xor i32 %86, -1
  %88 = or i32 %36, %87
  %89 = or i32 %25, %34
  %90 = or i32 %36, %53
  %91 = or i32 %29, %55
  %92 = xor i32 %33, %2
  %93 = and i32 %44, %1
  %94 = and i32 %55, %2
  %95 = or i32 %52, %0
  %96 = xor i32 %69, %95
  %97 = xor i32 %76, %2
  %98 = and i32 %28, %32
  %99 = shl i32 %60, 1
  %100 = and i32 %58, %2
  %101 = and i32 %8, %60
  %102 = and i32 %29, %55
  %103 = xor i32 %66, %1
  %104 = or i32 %25, %0
  %105 = xor i32 %104, %32
  %106 = and i32 %52, %33
  %107 = or i32 %60, %9
  %108 = and i32 %104, %32
  %109 = xor i32 %77, %2
  %110 = or i32 %28, %34
  %111 = and i32 %37, %51
  %112 = xor i32 %104, %1
  %113 = and i32 %45, %66
  %114 = or i32 %26, %45
  %115 = or i32 %41, %1
  %116 = or i32 %26, %55
  %117 = or i32 %57, %2
  %118 = xor i32 %35, -1
  %119 = and i32 %118, %51
  %120 = xor i32 %104, %76
  %121 = and i32 %60, %51
  %122 = and i32 %60, %0
  %123 = shl i32 %122, 2
  %124 = xor i32 %36, -1
  %125 = xor i32 %38, %124
  %126 = and i32 %84, %51
  %127 = or i32 %28, %76
  %128 = or i32 %48, %51
  %129 = shl i32 %52, 1
  %130 = xor i32 %69, %87
  %131 = or i32 %29, %1
  %132 = or i32 %118, %0
  %133 = shl i32 %132, 2
  %134 = xor i32 %8, %2
  %135 = or i32 %28, %32
  %136 = or i32 %76, %64
  %137 = or i32 %34, %2
  %138 = or i32 %45, %25
  %139 = xor i32 %58, %2
  %140 = or i32 %28, %57
  %141 = and i32 %33, %2
  %142 = and i32 %104, %1
  %143 = xor i32 %60, %0
  %144 = xor i32 %36, %86
  %145 = or i32 %76, %41
  %146 = and i32 %104, %55
  %147 = or i32 %52, %76
  %148 = or i32 %25, %9
  %149 = xor i32 %37, -1
  %150 = xor i32 %149, %0
  %151 = and i32 %104, %45
  %152 = xor i32 %53, %124
  %153 = or i32 %7, %149
  %154 = and i32 %25, %58
  %155 = xor i32 %26, %62
  %156 = and i32 %44, %32
  %157 = and i32 %68, %51
  %158 = and i32 %70, %0
  %159 = xor i32 %158, 2147483647
  %160 = xor i32 %159, %157
  %161 = xor i32 %40, %1
  %162 = or i32 %64, %0
  %163 = and i32 %52, %77
  %164 = and i32 %40, %55
  %165 = and i32 %33, %60
  %166 = or i32 %76, %2
  %167 = shl i32 %166, 1
  %168 = or i32 %60, %34
  %169 = or i32 %149, %51
  %170 = shl i32 %169, 1
  %171 = and i32 %66, %55
  %172 = or i32 %52, %34
  %173 = xor i32 %48, %0
  %174 = or i32 %69, %86
  %175 = or i32 %26, %64
  %176 = add i32 %45, 1
  %177 = or i32 %35, %0
  %178 = shl i32 %177, 1
  %179 = xor i32 %40, %76
  %180 = and i32 %45, %2
  %181 = or i32 %62, %0
  %182 = or i32 %157, %158
  %183 = or i32 %60, %51
  %184 = xor i32 %111, %124
  %185 = xor i32 %26, %1
  %186 = add i32 %76, 1
  %187 = and i32 %77, %2
  %188 = and i32 %28, %1
  %189 = xor i32 %34, %2
  %190 = xor i32 %64, %0
  %191 = or i32 %52, %57
  %192 = or i32 %57, %25
  %193 = xor i32 %7, %1
  %194 = or i32 %57, %29
  %195 = xor i32 %62, %0
  %196 = and i32 %35, %51
  %197 = and i32 %37, %0
  %198 = or i32 %196, %197
  %199 = or i32 %45, %29
  %200 = shl i32 %199, 1
  %201 = xor i32 %95, -1
  %202 = or i32 %69, %201
  %203 = or i32 %7, %1
  %204 = or i32 %76, %25
  %205 = or i32 %69, %82
  %206 = add i32 %26, 1
  %207 = or i32 %7, %32
  %208 = and i32 %149, %51
  %209 = shl i32 %208, 2
  %210 = and i32 %48, %51
  %211 = and i32 %149, %0
  %212 = shl i32 %211, 2
  %213 = and i32 %48, %0
  %214 = mul i32 %213, 6
  %215 = and i32 %64, %51
  %216 = mul i32 %215, 14
  %217 = mul i32 %196, 13
  %218 = and i32 %64, %0
  %219 = mul i32 %218, 21
  %220 = and i32 %5, %3
  %221 = and i32 %220, %4
  %222 = or i32 %5, %3
  %223 = xor i32 %222, %17
  %224 = xor i32 %223, %221
  %225 = add i32 %4, 1
  %226 = xor i32 %20, 2147483647
  %227 = or i32 %226, %4
  %228 = xor i32 %227, %221
  %229 = or i32 %13, %4
  %230 = and i32 %229, %3
  %231 = and i32 %5, %4
  %232 = xor i32 %4, %3
  %233 = xor i32 %232, -1
  %234 = or i32 %231, %233
  %235 = or i32 %20, %4
  %236 = or i32 %5, %4
  %237 = xor i32 %236, %3
  %238 = or i32 %11, %4
  %239 = and i32 %238, %5
  %240 = add i32 %232, 1
  %241 = xor i32 %5, %4
  %242 = xor i32 %241, -1
  %243 = and i32 %242, %3
  %244 = and i32 %18, %4
  %245 = xor i32 %20, %4
  %246 = or i32 %244, %245
  %247 = or i32 %13, %233
  %248 = or i32 %222, %4
  %249 = and i32 %220, %17
  %250 = and i32 %222, %4
  %251 = xor i32 %250, -1
  %252 = xor i32 %249, %251
  %253 = xor i32 %220, -1
  %254 = add i32 %220, 1
  %255 = xor i32 %12, -1
  %256 = and i32 %13, %255
  %257 = xor i32 %229, -1
  %258 = xor i32 %257, %3
  %259 = or i32 %242, %11
  %260 = xor i32 %253, %4
  %261 = shl i32 %260, 1
  %262 = xor i32 %222, -1
  %263 = add i32 %222, 1
  %264 = or i32 %13, %3
  %265 = xor i32 %236, -1
  %266 = or i32 %265, %3
  %267 = and i32 %236, %233
  %268 = and i32 %4, %3
  %269 = xor i32 %268, %5
  %270 = xor i32 %231, -1
  %271 = and i32 %270, %233
  %272 = or i32 %241, %12
  %273 = or i32 %242, %3
  %274 = shl i32 %4, 1
  %275 = or i32 %257, %3
  %276 = and i32 %232, %5
  %277 = xor i32 %264, -1
  %278 = add i32 %264, 1
  %279 = xor i32 %238, 2147483647
  %280 = or i32 %279, %242
  %281 = shl i32 %280, 1
  %282 = and i32 %222, %17
  %283 = or i32 %221, %282
  %284 = or i32 %4, %3
  %285 = xor i32 %284, 2147483647
  %286 = or i32 %285, %242
  %287 = and i32 %13, %4
  %288 = xor i32 %287, %253
  %289 = or i32 %232, %257
  %290 = and i32 %262, %17
  %291 = mul i32 %290, 11
  %292 = and i32 %14, %17
  %293 = mul i32 %292, 12
  %294 = and i32 %262, %4
  %295 = and i32 %277, %17
  %296 = mul i32 %295, 7
  %297 = and i32 %277, %4
  %298 = add i32 %180, %34
  %299 = add i32 %298, %137
  %300 = add i32 %299, %92
  %301 = add i32 %300, %188
  %302 = add i32 %301, %173
  %303 = add i32 %302, %127
  %304 = add i32 %303, %126
  %305 = add i32 %304, %107
  %306 = add i32 %305, %98
  %307 = add i32 %306, %91
  %308 = sub i32 %307, %27
  %309 = add i32 %308, %255
  %310 = add i32 %309, %144
  %311 = add i32 %310, %160
  %312 = add i32 %311, %294
  %313 = add i32 %312, %286
  %314 = add i32 %313, %230
  %315 = add i32 %314, %227
  %316 = add i32 %315, %228
  %317 = shl i32 %316, 1
  %318 = sub i32 %210, %203
  %319 = add i32 %318, %162
  %320 = add i32 %319, %128
  %321 = sub i32 %320, %115
  %322 = sub i32 %321, %42
  %323 = sub i32 %322, %249
  %324 = add i32 %323, %297
  %325 = sub i32 %324, %243
  %326 = mul i32 %325, 3
  %327 = add i32 %181, %204
  %328 = sub i32 %327, %152
  %329 = add i32 %328, %74
  %330 = sub i32 %329, %288
  %331 = mul i32 %330, 5
  %332 = add i32 %2, 2
  %333 = add i32 %332, %58
  %334 = add i32 %333, %176
  %335 = add i32 %334, %186
  %336 = sub i32 %335, %43
  %337 = add i32 %336, %56
  %338 = add i32 %337, %89
  %339 = sub i32 %338, %94
  %340 = add i32 %339, %97
  %341 = sub i32 %340, %100
  %342 = add i32 %341, %109
  %343 = sub i32 %342, %117
  %344 = add i32 %343, %134
  %345 = sub i32 %344, %48
  %346 = add i32 %345, %138
  %347 = add i32 %346, %139
  %348 = sub i32 %347, %141
  %349 = sub i32 %348, %148
  %350 = sub i32 %349, %154
  %351 = add i32 %350, %118
  %352 = sub i32 %351, %187
  %353 = add i32 %352, %189
  %354 = add i32 %353, %192
  %355 = sub i32 %354, %37
  %356 = add i32 %355, %206
  %357 = sub i32 %356, %46
  %358 = sub i32 %357, %47
  %359 = sub i32 %358, %49
  %360 = add i32 %359, %50
  %361 = add i32 %360, %53
  %362 = sub i32 %361, %54
  %363 = sub i32 %362, %59
  %364 = sub i32 %363, %61
  %365 = add i32 %364, %63
  %366 = add i32 %365, %65
  %367 = add i32 %366, %67
  %368 = sub i32 %367, %75
  %369 = sub i32 %368, %80
  %370 = add i32 %369, %81
  %371 = sub i32 %370, %85
  %372 = add i32 %371, %93
  %373 = sub i32 %372, %99
  %374 = sub i32 %373, %86
  %375 = add i32 %374, %101
  %376 = add i32 %375, %102
  %377 = add i32 %376, %103
  %378 = sub i32 %377, %38
  %379 = add i32 %378, %105
  %380 = sub i32 %379, %106
  %381 = sub i32 %380, %108
  %382 = sub i32 %381, %110
  %383 = sub i32 %382, %111
  %384 = sub i32 %383, %112
  %385 = sub i32 %384, %113
  %386 = add i32 %385, %114
  %387 = sub i32 %386, %116
  %388 = sub i32 %387, %119
  %389 = add i32 %388, %120
  %390 = add i32 %389, %121
  %391 = sub i32 %390, %129
  %392 = sub i32 %391, %131
  %393 = sub i32 %392, %135
  %394 = add i32 %393, %136
  %395 = sub i32 %394, %95
  %396 = sub i32 %395, %140
  %397 = sub i32 %396, %142
  %398 = sub i32 %397, %143
  %399 = add i32 %398, %145
  %400 = add i32 %399, %146
  %401 = sub i32 %400, %147
  %402 = add i32 %401, %150
  %403 = sub i32 %402, %151
  %404 = add i32 %403, %153
  %405 = add i32 %404, %155
  %406 = add i32 %405, %156
  %407 = sub i32 %406, %161
  %408 = sub i32 %407, %163
  %409 = sub i32 %408, %164
  %410 = add i32 %409, %165
  %411 = sub i32 %410, %167
  %412 = add i32 %411, %168
  %413 = sub i32 %412, %171
  %414 = sub i32 %413, %172
  %415 = add i32 %414, %175
  %416 = sub i32 %415, %179
  %417 = sub i32 %416, %183
  %418 = add i32 %417, %185
  %419 = add i32 %418, %190
  %420 = sub i32 %419, %191
  %421 = sub i32 %420, %193
  %422 = add i32 %421, %194
  %423 = sub i32 %422, %195
  %424 = add i32 %423, %207
  %425 = sub i32 %424, %36
  %426 = add i32 %425, %225
  %427 = sub i32 %426, %31
  %428 = sub i32 %427, %39
  %429 = add i32 %428, %72
  %430 = sub i32 %429, %79
  %431 = add i32 %430, %83
  %432 = add i32 %431, %88
  %433 = sub i32 %432, %90
  %434 = sub i32 %433, %96
  %435 = add i32 %434, %123
  %436 = sub i32 %435, %125
  %437 = add i32 %436, %130
  %438 = sub i32 %437, %133
  %439 = sub i32 %438, %170
  %440 = sub i32 %439, %174
  %441 = sub i32 %440, %178
  %442 = sub i32 %441, %182
  %443 = sub i32 %442, %184
  %444 = sub i32 %443, %198
  %445 = sub i32 %444, %200
  %446 = sub i32 %445, %202
  %447 = add i32 %446, %205
  %448 = sub i32 %447, %209
  %449 = sub i32 %448, %212
  %450 = add i32 %449, %214
  %451 = add i32 %450, %216
  %452 = add i32 %451, %217
  %453 = add i32 %452, %219
  %454 = add i32 %453, %240
  %455 = sub i32 %454, %274
  %456 = add i32 %455, %239
  %457 = sub i32 %456, %247
  %458 = add i32 %457, %254
  %459 = sub i32 %458, %256
  %460 = add i32 %459, %263
  %461 = sub i32 %460, %264
  %462 = sub i32 %461, %269
  %463 = add i32 %462, %276
  %464 = add i32 %463, %278
  %465 = add i32 %464, %234
  %466 = add i32 %465, %235
  %467 = sub i32 %466, %237
  %468 = add i32 %467, %248
  %469 = add i32 %468, %258
  %470 = sub i32 %469, %259
  %471 = sub i32 %470, %266
  %472 = sub i32 %471, %267
  %473 = sub i32 %472, %271
  %474 = add i32 %473, %272
  %475 = add i32 %474, %273
  %476 = sub i32 %475, %275
  %477 = sub i32 %476, %289
  %478 = sub i32 %477, %221
  %479 = sub i32 %478, %224
  %480 = add i32 %479, %246
  %481 = sub i32 %480, %252
  %482 = sub i32 %481, %261
  %483 = sub i32 %482, %281
  %484 = add i32 %483, %283
  %485 = add i32 %484, %291
  %486 = add i32 %485, %293
  %487 = add i32 %486, %296
  %488 = add i32 %487, %331
  %489 = add i32 %488, %326
  %490 = add i32 %489, %317
  %491 = icmp eq i32 %24, %490
  %492 = select i1 %491, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %493 = tail call i32 @puts(i8* nonnull dereferenceable(1) %492)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
