digraph "DFG for'crackme' function" {
	Node0x1da6430[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1da6ae0[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x1da6ba0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1da6c10[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x1da6c80[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1da6cf0[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x1da6d60[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1da6e00[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1da6ea0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1da6f40[shape=record, label="  %12 = xor i32 %0, 2147483647"];
	Node0x1da6fb0[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x1da7020[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1da7090[shape=record, label="  %15 = and i32 %5, %0"];
	Node0x1da7130[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x1da71a0[shape=record, label="  %17 = sub i32 %8, %14"];
	Node0x1da7210[shape=record, label="  %18 = add i32 %17, %16"];
	Node0x1da7280[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0x1da72f0[shape=record, label="  %20 = icmp eq i32 %19, %4"];
	Node0x1d47268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1da7790[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1da77e0[shape=record, label="  ret void"];
	Node0x1da6430 -> Node0x1da6ae0;
	Node0x1da6ae0 -> Node0x1da6ba0;
	Node0x1da6ba0 -> Node0x1da6c10;
	Node0x1da6c10 -> Node0x1da6c80;
	Node0x1da6c80 -> Node0x1da6cf0;
	Node0x1da6cf0 -> Node0x1da6d60;
	Node0x1da6d60 -> Node0x1da6e00;
	Node0x1da6e00 -> Node0x1da6ea0;
	Node0x1da6ea0 -> Node0x1da6f40;
	Node0x1da6f40 -> Node0x1da6fb0;
	Node0x1da6fb0 -> Node0x1da7020;
	Node0x1da7020 -> Node0x1da7090;
	Node0x1da7090 -> Node0x1da7130;
	Node0x1da7130 -> Node0x1da71a0;
	Node0x1da71a0 -> Node0x1da7210;
	Node0x1da7210 -> Node0x1da7280;
	Node0x1da7280 -> Node0x1da72f0;
	Node0x1da72f0 -> Node0x1d47268;
	Node0x1d47268 -> Node0x1da7790;
	Node0x1da7790 -> Node0x1da77e0;
edge [color=red]
	Node0x1da6430 -> Node0x1da6ae0;
	Node0x1da6c10 -> Node0x1da6c80;
	Node0x1da6c80 -> Node0x1da6cf0;
	Node0x1da6ba0 -> Node0x1da6cf0;
	Node0x1da6d60 -> Node0x1da6e00;
	Node0x1da6e00 -> Node0x1da6ea0;
	Node0x1da6f40 -> Node0x1da6fb0;
	Node0x1da6fb0 -> Node0x1da7020;
	Node0x1da6ba0 -> Node0x1da7090;
	Node0x1da7090 -> Node0x1da7130;
	Node0x1da6cf0 -> Node0x1da71a0;
	Node0x1da7020 -> Node0x1da71a0;
	Node0x1da71a0 -> Node0x1da7210;
	Node0x1da7130 -> Node0x1da7210;
	Node0x1da7210 -> Node0x1da7280;
	Node0x1da6ea0 -> Node0x1da7280;
	Node0x1da7280 -> Node0x1da72f0;
	Node0x1da6ae0 -> Node0x1da72f0;
	Node0x1da72f0 -> Node0x1d47268;
	Node0x1d47268 -> Node0x1da7790;
}
