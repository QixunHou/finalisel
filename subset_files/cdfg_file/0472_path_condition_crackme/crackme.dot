digraph "DFG for'crackme' function" {
	Node0xe47570[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xe47c20[shape=record, label="  %4 = shl i32 %3, 2"];
	Node0xe47ce0[shape=record, label="  %5 = xor i32 %4, -4"];
	Node0xe47d50[shape=record, label="  %6 = or i32 %1, %0"];
	Node0xe47df0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0xe47e60[shape=record, label="  %8 = or i32 %7, %0"];
	Node0xe47ed0[shape=record, label="  %9 = and i32 %7, %0"];
	Node0xe47f40[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xe47fb0[shape=record, label="  %11 = xor i32 %6, -1"];
	Node0xe48050[shape=record, label="  %12 = mul i32 %11, -5"];
	Node0xe480c0[shape=record, label="  %13 = xor i32 %8, -1"];
	Node0xe48160[shape=record, label="  %14 = mul i32 %13, -6"];
	Node0xe48200[shape=record, label="  %15 = mul i32 %9, -7"];
	Node0xe482a0[shape=record, label="  %16 = mul i32 %3, -3"];
	Node0xe48340[shape=record, label="  %17 = shl i32 %0, 1"];
	Node0xe483b0[shape=record, label="  %18 = add i32 %17, -1"];
	Node0xe48420[shape=record, label="  %19 = add i32 %18, %6"];
	Node0xe48490[shape=record, label="  %20 = sub i32 %19, %8"];
	Node0xe48500[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xe48570[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xe485e0[shape=record, label="  %23 = add i32 %22, %14"];
	Node0xe48650[shape=record, label="  %24 = add i32 %23, %15"];
	Node0xe486c0[shape=record, label="  %25 = add i32 %24, %16"];
	Node0xe48730[shape=record, label="  %26 = add i32 %25, %5"];
	Node0xe487a0[shape=record, label="  %27 = icmp eq i32 %26, %1"];
	Node0xde8268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xe48c40[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0xe48c90[shape=record, label="  ret void"];
	Node0xe47570 -> Node0xe47c20;
	Node0xe47c20 -> Node0xe47ce0;
	Node0xe47ce0 -> Node0xe47d50;
	Node0xe47d50 -> Node0xe47df0;
	Node0xe47df0 -> Node0xe47e60;
	Node0xe47e60 -> Node0xe47ed0;
	Node0xe47ed0 -> Node0xe47f40;
	Node0xe47f40 -> Node0xe47fb0;
	Node0xe47fb0 -> Node0xe48050;
	Node0xe48050 -> Node0xe480c0;
	Node0xe480c0 -> Node0xe48160;
	Node0xe48160 -> Node0xe48200;
	Node0xe48200 -> Node0xe482a0;
	Node0xe482a0 -> Node0xe48340;
	Node0xe48340 -> Node0xe483b0;
	Node0xe483b0 -> Node0xe48420;
	Node0xe48420 -> Node0xe48490;
	Node0xe48490 -> Node0xe48500;
	Node0xe48500 -> Node0xe48570;
	Node0xe48570 -> Node0xe485e0;
	Node0xe485e0 -> Node0xe48650;
	Node0xe48650 -> Node0xe486c0;
	Node0xe486c0 -> Node0xe48730;
	Node0xe48730 -> Node0xe487a0;
	Node0xe487a0 -> Node0xde8268;
	Node0xde8268 -> Node0xe48c40;
	Node0xe48c40 -> Node0xe48c90;
edge [color=red]
	Node0xe47570 -> Node0xe47c20;
	Node0xe47c20 -> Node0xe47ce0;
	Node0xe47df0 -> Node0xe47e60;
	Node0xe47df0 -> Node0xe47ed0;
	Node0xe47ed0 -> Node0xe47f40;
	Node0xe47d50 -> Node0xe47fb0;
	Node0xe47fb0 -> Node0xe48050;
	Node0xe47e60 -> Node0xe480c0;
	Node0xe480c0 -> Node0xe48160;
	Node0xe47ed0 -> Node0xe48200;
	Node0xe47570 -> Node0xe482a0;
	Node0xe48340 -> Node0xe483b0;
	Node0xe483b0 -> Node0xe48420;
	Node0xe47d50 -> Node0xe48420;
	Node0xe48420 -> Node0xe48490;
	Node0xe47e60 -> Node0xe48490;
	Node0xe48490 -> Node0xe48500;
	Node0xe47f40 -> Node0xe48500;
	Node0xe48500 -> Node0xe48570;
	Node0xe48050 -> Node0xe48570;
	Node0xe48570 -> Node0xe485e0;
	Node0xe48160 -> Node0xe485e0;
	Node0xe485e0 -> Node0xe48650;
	Node0xe48200 -> Node0xe48650;
	Node0xe48650 -> Node0xe486c0;
	Node0xe482a0 -> Node0xe486c0;
	Node0xe486c0 -> Node0xe48730;
	Node0xe47ce0 -> Node0xe48730;
	Node0xe48730 -> Node0xe487a0;
	Node0xe487a0 -> Node0xde8268;
	Node0xde8268 -> Node0xe48c40;
}
