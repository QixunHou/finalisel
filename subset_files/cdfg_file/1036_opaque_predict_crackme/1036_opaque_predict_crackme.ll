; ModuleID = '../.././c_source_file/1036_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1036_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = sub i32 4, %3
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %10
  %14 = shl i32 %13, 1
  %15 = add i32 %7, %14
  %16 = or i32 %2, %0
  %17 = xor i32 %1, %0
  %18 = and i32 %16, %17
  %19 = shl i32 %18, 1
  %20 = sub i32 %15, %19
  %21 = and i32 %4, %3
  %22 = xor i32 %4, %3
  %23 = shl i32 %22, 1
  %24 = xor i32 %23, -2
  %25 = or i32 %4, %3
  %26 = xor i32 %25, -1
  %27 = mul i32 %26, -6
  %28 = xor i32 %4, 1073741823
  %29 = xor i32 %3, 1073741823
  %30 = and i32 %29, %4
  %31 = shl i32 %30, 2
  %32 = and i32 %28, %3
  %33 = shl i32 %32, 2
  %34 = mul i32 %21, -7
  %35 = or i32 %1, %0
  %36 = and i32 %1, %0
  %37 = xor i32 %2, -1
  %38 = or i32 %37, %0
  %39 = xor i32 %38, %36
  %40 = or i32 %36, %2
  %41 = xor i32 %0, -1
  %42 = and i32 %2, %1
  %43 = and i32 %42, %41
  %44 = or i32 %2, %1
  %45 = and i32 %44, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %43, %46
  %48 = xor i32 %42, -1
  %49 = and i32 %48, %41
  %50 = xor i32 %36, -1
  %51 = and i32 %50, %2
  %52 = and i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = and i32 %53, %1
  %55 = xor i32 %17, -1
  %56 = or i32 %52, %55
  %57 = or i32 %10, %2
  %58 = shl i32 %57, 2
  %59 = and i32 %8, %0
  %60 = and i32 %8, %2
  %61 = and i32 %60, %0
  %62 = xor i32 %2, %1
  %63 = or i32 %62, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %61, %64
  %66 = and i32 %17, %37
  %67 = shl i32 %66, 1
  %68 = xor i32 %48, %0
  %69 = add i32 %11, 1
  %70 = and i32 %37, %1
  %71 = xor i32 %70, -1
  %72 = or i32 %71, %41
  %73 = and i32 %9, %12
  %74 = or i32 %42, %59
  %75 = xor i32 %44, -1
  %76 = or i32 %75, %41
  %77 = or i32 %37, %1
  %78 = and i32 %77, %0
  %79 = xor i32 %77, -1
  %80 = or i32 %79, %0
  %81 = or i32 %59, %37
  %82 = or i32 %11, %59
  %83 = shl i32 %82, 1
  %84 = xor i32 %16, -1
  %85 = xor i32 %84, %1
  %86 = or i32 %37, %10
  %87 = xor i32 %59, %48
  %88 = and i32 %62, %9
  %89 = or i32 %43, %45
  %90 = and i32 %42, %0
  %91 = and i32 %62, %41
  %92 = or i32 %90, %91
  %93 = shl i32 %92, 1
  %94 = xor i32 %16, %36
  %95 = or i32 %52, %17
  %96 = xor i32 %35, -1
  %97 = xor i32 %62, -1
  %98 = or i32 %97, %96
  %99 = shl i32 %98, 2
  %100 = xor i32 %52, %9
  %101 = shl i32 %100, 1
  %102 = and i32 %11, %55
  %103 = shl i32 %102, 1
  %104 = and i32 %12, %8
  %105 = or i32 %52, %1
  %106 = xor i32 %96, %2
  %107 = and i32 %37, %0
  %108 = xor i32 %107, -1
  %109 = and i32 %108, %1
  %110 = xor i32 %38, -1
  %111 = or i32 %110, %55
  %112 = or i32 %37, %96
  %113 = xor i32 %16, %1
  %114 = or i32 %11, %96
  %115 = or i32 %52, %10
  %116 = and i32 %9, %37
  %117 = xor i32 %35, %2
  %118 = xor i32 %71, %0
  %119 = and i32 %11, %17
  %120 = or i32 %48, %41
  %121 = shl i32 %120, 1
  %122 = and i32 %16, %1
  %123 = xor i32 %62, %0
  %124 = and i32 %17, %108
  %125 = and i32 %38, %8
  %126 = xor i32 %110, %1
  %127 = or i32 %110, %1
  %128 = xor i32 %97, %0
  %129 = or i32 %52, %96
  %130 = or i32 %11, %8
  %131 = or i32 %11, %55
  %132 = xor i32 %52, %1
  %133 = and i32 %12, %55
  %134 = and i32 %77, %41
  %135 = or i32 %42, %41
  %136 = shl i32 %135, 1
  %137 = and i32 %53, %55
  %138 = shl i32 %137, 1
  %139 = xor i32 %107, %48
  %140 = xor i32 %42, %0
  %141 = add i32 %77, 1
  %142 = xor i32 %52, %35
  %143 = xor i32 %52, %71
  %144 = and i32 %11, %8
  %145 = xor i32 %59, -1
  %146 = and i32 %12, %145
  %147 = or i32 %55, %2
  %148 = and i32 %37, %50
  %149 = or i32 %11, %17
  %150 = or i32 %44, %41
  %151 = or i32 %75, %0
  %152 = and i32 %17, %12
  %153 = shl i32 %152, 1
  %154 = or i32 %12, %96
  %155 = xor i32 %61, %63
  %156 = or i32 %52, %8
  %157 = and i32 %38, %55
  %158 = or i32 %8, %2
  %159 = and i32 %158, %41
  %160 = or i32 %61, %159
  %161 = xor i32 %44, %0
  %162 = and i32 %35, %2
  %163 = or i32 %77, %0
  %164 = xor i32 %0, 2147483647
  %165 = xor i32 %164, %158
  %166 = xor i32 %165, %61
  %167 = or i32 %48, %0
  %168 = xor i32 %159, -1
  %169 = xor i32 %61, %168
  %170 = or i32 %17, %2
  %171 = or i32 %36, %84
  %172 = shl i32 %171, 1
  %173 = or i32 %107, %55
  %174 = or i32 %36, %79
  %175 = and i32 %97, %0
  %176 = or i32 %70, %0
  %177 = shl i32 %176, 1
  %178 = or i32 %36, %37
  %179 = or i32 %62, %36
  %180 = xor i32 %44, %36
  %181 = and i32 %97, %41
  %182 = and i32 %60, %41
  %183 = and i32 %158, %0
  %184 = xor i32 %183, 2147483647
  %185 = xor i32 %184, %182
  %186 = shl i32 %185, 1
  %187 = and i32 %16, %55
  %188 = and i32 %62, %50
  %189 = or i32 %17, %12
  %190 = add i32 %38, 1
  %191 = or i32 %37, %55
  %192 = and i32 %44, %41
  %193 = or i32 %90, %192
  %194 = and i32 %9, %2
  %195 = xor i32 %77, %36
  %196 = and i32 %12, %1
  %197 = and i32 %9, %97
  %198 = or i32 %70, %41
  %199 = and i32 %108, %55
  %200 = shl i32 %84, 1
  %201 = xor i32 %77, %0
  %202 = add i32 %44, 1
  %203 = xor i32 %107, %77
  %204 = or i32 %62, %41
  %205 = xor i32 %91, 2147483647
  %206 = xor i32 %205, %90
  %207 = shl i32 %206, 1
  %208 = and i32 %97, %145
  %209 = xor i32 %107, %1
  %210 = or i32 %11, %36
  %211 = xor i32 %53, %1
  %212 = xor i32 %38, %1
  %213 = xor i32 %90, -1
  %214 = xor i32 %161, %213
  %215 = or i32 %62, %59
  %216 = shl i32 %215, 1
  %217 = and i32 %37, %145
  %218 = or i32 %36, %75
  %219 = xor i32 %123, -1
  %220 = xor i32 %61, %219
  %221 = add i32 %59, 1
  %222 = and i32 %38, %17
  %223 = shl i32 %222, 1
  %224 = or i32 %62, %96
  %225 = or i32 %42, %0
  %226 = or i32 %36, %97
  %227 = and i32 %71, %41
  %228 = or i32 %17, %84
  %229 = or i32 %59, %97
  %230 = or i32 %11, %1
  %231 = and i32 %53, %8
  %232 = and i32 %11, %35
  %233 = xor i32 %108, %1
  %234 = or i32 %36, %110
  %235 = or i32 %84, %8
  %236 = xor i32 %9, %2
  %237 = or i32 %59, %2
  %238 = and i32 %16, %8
  %239 = or i32 %62, %10
  %240 = xor i32 %79, %0
  %241 = and i32 %97, %50
  %242 = or i32 %36, %12
  %243 = or i32 %182, %183
  %244 = and i32 %11, %1
  %245 = or i32 %52, %70
  %246 = shl i32 %245, 1
  %247 = xor i32 %10, %2
  %248 = or i32 %17, %110
  %249 = and i32 %11, %50
  %250 = or i32 %90, %161
  %251 = or i32 %77, %41
  %252 = xor i32 %59, %2
  %253 = and i32 %145, %2
  %254 = or i32 %97, %41
  %255 = and i32 %48, %0
  %256 = and i32 %12, %50
  %257 = or i32 %79, %41
  %258 = or i32 %107, %1
  %259 = xor i32 %36, %2
  %260 = or i32 %84, %1
  %261 = or i32 %11, %10
  %262 = shl i32 %261, 1
  %263 = and i32 %38, %1
  %264 = and i32 %62, %145
  %265 = and i32 %35, %37
  %266 = xor i32 %204, -1
  %267 = or i32 %182, %266
  %268 = or i32 %90, %219
  %269 = add i32 %2, 1
  %270 = or i32 %12, %55
  %271 = and i32 %62, %0
  %272 = or i32 %43, %271
  %273 = or i32 %17, %37
  %274 = or i32 %107, %79
  %275 = xor i32 %192, %213
  %276 = and i32 %17, %2
  %277 = and i32 %55, %2
  %278 = shl i32 %277, 1
  %279 = or i32 %71, %0
  %280 = and i32 %108, %8
  %281 = and i32 %75, %41
  %282 = mul i32 %281, -10
  %283 = and i32 %70, %41
  %284 = and i32 %75, %0
  %285 = and i32 %70, %0
  %286 = and i32 %79, %41
  %287 = mul i32 %286, -9
  %288 = mul i32 %43, -17
  %289 = and i32 %79, %0
  %290 = sub i32 %141, %265
  %291 = sub i32 %290, %45
  %292 = add i32 %291, %203
  %293 = sub i32 %292, %163
  %294 = mul i32 %293, 3
  %295 = add i32 %227, %53
  %296 = sub i32 %295, %90
  %297 = sub i32 %296, %187
  %298 = mul i32 %297, 5
  %299 = add i32 %157, %80
  %300 = shl i32 %299, 2
  %301 = add i32 %276, -1
  %302 = add i32 %301, %162
  %303 = add i32 %302, %11
  %304 = add i32 %303, %289
  %305 = add i32 %304, %283
  %306 = add i32 %305, %279
  %307 = add i32 %306, %255
  %308 = add i32 %307, %233
  %309 = add i32 %308, %230
  %310 = add i32 %309, %225
  %311 = add i32 %310, %204
  %312 = add i32 %311, %199
  %313 = add i32 %312, %198
  %314 = add i32 %313, %179
  %315 = add i32 %314, %142
  %316 = add i32 %315, %127
  %317 = add i32 %316, %122
  %318 = add i32 %317, %115
  %319 = add i32 %318, %268
  %320 = add i32 %319, %155
  %321 = add i32 %320, %166
  %322 = shl i32 %321, 1
  %323 = add i32 %35, %1
  %324 = add i32 %323, %59
  %325 = sub i32 %96, %324
  %326 = add i32 %325, %10
  %327 = add i32 %326, %55
  %328 = add i32 %327, %221
  %329 = sub i32 %328, %17
  %330 = sub i32 %329, %36
  %331 = add i32 %330, %50
  %332 = add i32 %331, %269
  %333 = add i32 %332, %6
  %334 = sub i32 %333, %40
  %335 = add i32 %334, %51
  %336 = add i32 %335, %69
  %337 = add i32 %336, %81
  %338 = sub i32 %337, %86
  %339 = add i32 %338, %106
  %340 = sub i32 %339, %112
  %341 = add i32 %340, %116
  %342 = add i32 %341, %117
  %343 = add i32 %342, %16
  %344 = add i32 %343, %147
  %345 = sub i32 %344, %148
  %346 = add i32 %345, %107
  %347 = sub i32 %346, %170
  %348 = sub i32 %347, %178
  %349 = sub i32 %348, %70
  %350 = add i32 %349, %190
  %351 = add i32 %350, %77
  %352 = add i32 %351, %191
  %353 = add i32 %352, %194
  %354 = add i32 %353, %202
  %355 = add i32 %354, %217
  %356 = sub i32 %355, %52
  %357 = add i32 %356, %44
  %358 = sub i32 %357, %236
  %359 = sub i32 %358, %237
  %360 = add i32 %359, %247
  %361 = sub i32 %360, %252
  %362 = add i32 %361, %42
  %363 = add i32 %362, %253
  %364 = sub i32 %363, %259
  %365 = sub i32 %364, %273
  %366 = add i32 %365, %39
  %367 = add i32 %366, %49
  %368 = sub i32 %367, %54
  %369 = add i32 %368, %56
  %370 = sub i32 %369, %58
  %371 = sub i32 %370, %67
  %372 = sub i32 %371, %68
  %373 = add i32 %372, %72
  %374 = sub i32 %373, %73
  %375 = sub i32 %374, %74
  %376 = sub i32 %375, %76
  %377 = sub i32 %376, %78
  %378 = add i32 %377, %85
  %379 = add i32 %378, %87
  %380 = sub i32 %379, %88
  %381 = sub i32 %380, %94
  %382 = add i32 %381, %95
  %383 = add i32 %382, %104
  %384 = add i32 %383, %105
  %385 = sub i32 %384, %109
  %386 = sub i32 %385, %111
  %387 = sub i32 %386, %113
  %388 = add i32 %387, %114
  %389 = sub i32 %388, %118
  %390 = sub i32 %389, %119
  %391 = add i32 %390, %123
  %392 = add i32 %391, %124
  %393 = sub i32 %392, %125
  %394 = add i32 %393, %126
  %395 = add i32 %394, %128
  %396 = add i32 %395, %129
  %397 = sub i32 %396, %130
  %398 = sub i32 %397, %131
  %399 = sub i32 %398, %132
  %400 = sub i32 %399, %133
  %401 = add i32 %400, %134
  %402 = add i32 %401, %139
  %403 = sub i32 %402, %140
  %404 = sub i32 %403, %143
  %405 = add i32 %404, %144
  %406 = add i32 %405, %146
  %407 = add i32 %406, %149
  %408 = sub i32 %407, %150
  %409 = add i32 %408, %151
  %410 = sub i32 %409, %154
  %411 = sub i32 %410, %156
  %412 = add i32 %411, %161
  %413 = add i32 %412, %167
  %414 = add i32 %413, %173
  %415 = sub i32 %414, %174
  %416 = add i32 %415, %175
  %417 = add i32 %416, %180
  %418 = add i32 %417, %181
  %419 = sub i32 %418, %188
  %420 = add i32 %419, %189
  %421 = add i32 %420, %195
  %422 = add i32 %421, %196
  %423 = sub i32 %422, %197
  %424 = sub i32 %423, %200
  %425 = add i32 %424, %201
  %426 = sub i32 %425, %208
  %427 = add i32 %426, %209
  %428 = sub i32 %427, %210
  %429 = sub i32 %428, %211
  %430 = sub i32 %429, %212
  %431 = add i32 %430, %218
  %432 = sub i32 %431, %224
  %433 = add i32 %432, %226
  %434 = sub i32 %433, %228
  %435 = add i32 %434, %229
  %436 = sub i32 %435, %231
  %437 = sub i32 %436, %232
  %438 = add i32 %437, %234
  %439 = add i32 %438, %235
  %440 = add i32 %439, %238
  %441 = sub i32 %440, %239
  %442 = sub i32 %441, %240
  %443 = sub i32 %442, %241
  %444 = sub i32 %443, %242
  %445 = add i32 %444, %244
  %446 = add i32 %445, %248
  %447 = add i32 %446, %249
  %448 = add i32 %447, %251
  %449 = sub i32 %448, %254
  %450 = add i32 %449, %256
  %451 = add i32 %450, %257
  %452 = sub i32 %451, %258
  %453 = sub i32 %452, %260
  %454 = sub i32 %453, %263
  %455 = add i32 %454, %264
  %456 = sub i32 %455, %270
  %457 = add i32 %456, %274
  %458 = sub i32 %457, %278
  %459 = sub i32 %458, %280
  %460 = sub i32 %459, %284
  %461 = add i32 %460, %285
  %462 = add i32 %461, %21
  %463 = add i32 %462, %47
  %464 = add i32 %463, %65
  %465 = sub i32 %464, %83
  %466 = sub i32 %465, %89
  %467 = sub i32 %466, %99
  %468 = sub i32 %467, %101
  %469 = sub i32 %468, %103
  %470 = sub i32 %469, %121
  %471 = sub i32 %470, %136
  %472 = sub i32 %471, %138
  %473 = sub i32 %472, %153
  %474 = sub i32 %473, %160
  %475 = sub i32 %474, %169
  %476 = sub i32 %475, %172
  %477 = sub i32 %476, %177
  %478 = add i32 %477, %193
  %479 = sub i32 %478, %214
  %480 = sub i32 %479, %216
  %481 = add i32 %480, %220
  %482 = sub i32 %481, %223
  %483 = add i32 %482, %243
  %484 = sub i32 %483, %246
  %485 = add i32 %484, %250
  %486 = sub i32 %485, %262
  %487 = add i32 %486, %267
  %488 = sub i32 %487, %272
  %489 = add i32 %488, %275
  %490 = add i32 %489, %282
  %491 = add i32 %490, %287
  %492 = add i32 %491, %288
  %493 = add i32 %492, %27
  %494 = sub i32 %493, %31
  %495 = add i32 %494, %34
  %496 = sub i32 %495, %93
  %497 = add i32 %496, %300
  %498 = add i32 %497, %24
  %499 = sub i32 %498, %33
  %500 = sub i32 %499, %186
  %501 = sub i32 %500, %207
  %502 = add i32 %501, %298
  %503 = add i32 %502, %294
  %504 = add i32 %503, %322
  %505 = icmp eq i32 %20, %504
  %506 = select i1 %505, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %507 = tail call i32 @puts(i8* nonnull dereferenceable(1) %506)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
