; ModuleID = '../.././c_source_file/1119_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1119_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = or i32 %1, %0
  %9 = xor i32 %7, %8
  %10 = xor i32 %3, -1
  %11 = or i32 %10, %4
  %12 = xor i32 %11, -1
  %13 = xor i32 %5, %3
  %14 = xor i32 %13, -1
  %15 = or i32 %14, %12
  %16 = sub i32 %15, %9
  %17 = xor i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %5, %4
  %20 = and i32 %19, %18
  %21 = shl i32 %20, 1
  %22 = add i32 %16, %21
  %23 = xor i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %1
  %26 = and i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = xor i32 %0, -1
  %29 = xor i32 %1, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %23, %31
  %33 = xor i32 %1, %0
  %34 = and i32 %23, %33
  %35 = and i32 %26, %0
  %36 = or i32 %2, %1
  %37 = and i32 %36, %28
  %38 = or i32 %35, %37
  %39 = xor i32 %2, -1
  %40 = or i32 %39, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %29
  %43 = xor i32 %26, %0
  %44 = and i32 %26, %28
  %45 = and i32 %36, %0
  %46 = or i32 %44, %45
  %47 = and i32 %1, %0
  %48 = or i32 %47, %2
  %49 = xor i32 %7, -1
  %50 = and i32 %33, %49
  %51 = xor i32 %2, %1
  %52 = and i32 %51, %28
  %53 = or i32 %35, %52
  %54 = and i32 %39, %1
  %55 = xor i32 %54, -1
  %56 = or i32 %55, %28
  %57 = and i32 %40, %33
  %58 = xor i32 %8, -1
  %59 = or i32 %58, %2
  %60 = shl i32 %59, 1
  %61 = or i32 %2, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %33, %62
  %64 = and i32 %23, %8
  %65 = and i32 %30, %2
  %66 = xor i32 %33, -1
  %67 = or i32 %39, %66
  %68 = and i32 %39, %0
  %69 = or i32 %68, %29
  %70 = and i32 %29, %0
  %71 = xor i32 %70, %27
  %72 = or i32 %36, %28
  %73 = and i32 %30, %39
  %74 = and i32 %61, %33
  %75 = xor i32 %61, %1
  %76 = or i32 %27, %0
  %77 = and i32 %29, %2
  %78 = and i32 %77, %28
  %79 = or i32 %29, %2
  %80 = and i32 %79, %0
  %81 = or i32 %78, %80
  %82 = and i32 %27, %28
  %83 = or i32 %41, %66
  %84 = shl i32 %83, 1
  %85 = xor i32 %51, %0
  %86 = or i32 %62, %1
  %87 = shl i32 %86, 1
  %88 = xor i32 %47, -1
  %89 = and i32 %88, %2
  %90 = and i32 %23, %88
  %91 = and i32 %24, %1
  %92 = shl i32 %91, 1
  %93 = xor i32 %70, -1
  %94 = xor i32 %51, -1
  %95 = and i32 %94, %93
  %96 = or i32 %51, %28
  %97 = and i32 %30, %24
  %98 = or i32 %70, %94
  %99 = xor i32 %7, %1
  %100 = xor i32 %58, %2
  %101 = or i32 %54, %0
  %102 = add i32 %70, 1
  %103 = and i32 %8, %94
  %104 = xor i32 %70, %2
  %105 = and i32 %8, %39
  %106 = or i32 %41, %1
  %107 = shl i32 %106, 1
  %108 = and i32 %39, %93
  %109 = shl i32 %108, 1
  %110 = xor i32 %68, -1
  %111 = or i32 %94, %28
  %112 = or i32 %66, %2
  %113 = xor i32 %36, %0
  %114 = or i32 %62, %66
  %115 = and i32 %49, %1
  %116 = or i32 %36, %0
  %117 = xor i32 %55, %0
  %118 = or i32 %68, %66
  %119 = and i32 %77, %0
  %120 = or i32 %119, %85
  %121 = or i32 %23, %66
  %122 = shl i32 %121, 1
  %123 = or i32 %47, %94
  %124 = and i32 %23, %93
  %125 = and i32 %40, %1
  %126 = or i32 %39, %1
  %127 = xor i32 %126, -1
  %128 = or i32 %127, %28
  %129 = xor i32 %30, %2
  %130 = shl i32 %29, 1
  %131 = and i32 %110, %66
  %132 = add i32 %30, 1
  %133 = or i32 %7, %29
  %134 = shl i32 %133, 1
  %135 = and i32 %94, %0
  %136 = or i32 %23, %70
  %137 = or i32 %7, %58
  %138 = xor i32 %36, -1
  %139 = or i32 %138, %0
  %140 = and i32 %61, %66
  %141 = and i32 %61, %1
  %142 = or i32 %47, %41
  %143 = or i32 %54, %28
  %144 = or i32 %70, %39
  %145 = or i32 %51, %31
  %146 = add i32 %23, 1
  %147 = or i32 %27, %28
  %148 = xor i32 %126, %0
  %149 = or i32 %23, %47
  %150 = and i32 %110, %29
  %151 = and i32 %51, %0
  %152 = and i32 %24, %29
  %153 = and i32 %23, %1
  %154 = xor i32 %7, %30
  %155 = or i32 %44, %151
  %156 = and i32 %27, %0
  %157 = and i32 %30, %94
  %158 = shl i32 %157, 1
  %159 = or i32 %138, %28
  %160 = or i32 %39, %31
  %161 = shl i32 %160, 2
  %162 = or i32 %47, %127
  %163 = or i32 %24, %31
  %164 = or i32 %24, %29
  %165 = and i32 %66, %2
  %166 = and i32 %94, %28
  %167 = or i32 %62, %29
  %168 = or i32 %7, %54
  %169 = xor i32 %110, %1
  %170 = or i32 %26, %70
  %171 = or i32 %94, %31
  %172 = or i32 %47, %24
  %173 = or i32 %7, %66
  %174 = and i32 %8, %2
  %175 = and i32 %23, %29
  %176 = xor i32 %7, %55
  %177 = and i32 %33, %39
  %178 = and i32 %94, %88
  %179 = or i32 %33, %2
  %180 = shl i32 %179, 1
  %181 = and i32 %61, %29
  %182 = xor i32 %35, -1
  %183 = xor i32 %52, %182
  %184 = or i32 %51, %0
  %185 = xor i32 %119, %184
  %186 = and i32 %24, %88
  %187 = or i32 %51, %47
  %188 = or i32 %68, %26
  %189 = xor i32 %68, %126
  %190 = and i32 %39, %66
  %191 = and i32 %39, %88
  %192 = or i32 %33, %39
  %193 = xor i32 %151, -1
  %194 = xor i32 %44, %193
  %195 = xor i32 %88, %2
  %196 = xor i32 %36, %47
  %197 = shl i32 %196, 1
  %198 = xor i32 %138, %0
  %199 = xor i32 %35, %85
  %200 = xor i32 %80, -1
  %201 = xor i32 %78, %200
  %202 = add i32 %36, 1
  %203 = and i32 %51, %8
  %204 = and i32 %24, %66
  %205 = xor i32 %184, -1
  %206 = or i32 %119, %205
  %207 = shl i32 %61, 1
  %208 = xor i32 %37, %182
  %209 = add i32 %126, 1
  %210 = and i32 %49, %29
  %211 = or i32 %51, %58
  %212 = xor i32 %68, %27
  %213 = xor i32 %96, -1
  %214 = or i32 %78, %213
  %215 = and i32 %49, %66
  %216 = and i32 %51, %93
  %217 = or i32 %33, %41
  %218 = and i32 %110, %1
  %219 = or i32 %7, %1
  %220 = add i32 %33, 1
  %221 = or i32 %47, %39
  %222 = xor i32 %47, %2
  %223 = shl i32 %222, 1
  %224 = xor i32 %41, %1
  %225 = or i32 %26, %28
  %226 = and i32 %51, %30
  %227 = and i32 %79, %28
  %228 = or i32 %119, %227
  %229 = or i32 %54, %70
  %230 = xor i32 %94, %0
  %231 = or i32 %70, %2
  %232 = or i32 %23, %58
  %233 = or i32 %35, %113
  %234 = xor i32 %27, %0
  %235 = shl i32 %234, 1
  %236 = or i32 %23, %29
  %237 = and i32 %33, %2
  %238 = xor i32 %126, %47
  %239 = or i32 %47, %138
  %240 = xor i32 %54, %0
  %241 = and i32 %24, %93
  %242 = or i32 %31, %2
  %243 = shl i32 %242, 1
  %244 = and i32 %8, %24
  %245 = xor i32 %227, 2147483647
  %246 = xor i32 %245, %119
  %247 = add i32 %47, 1
  %248 = and i32 %23, %66
  %249 = or i32 %7, %33
  %250 = or i32 %24, %58
  %251 = or i32 %26, %0
  %252 = xor i32 %78, %96
  %253 = xor i32 %113, %182
  %254 = and i32 %93, %2
  %255 = and i32 %33, %24
  %256 = or i32 %23, %1
  %257 = or i32 %68, %127
  %258 = and i32 %54, %28
  %259 = mul i32 %258, 6
  %260 = and i32 %138, %0
  %261 = and i32 %127, %28
  %262 = mul i32 %44, 15
  %263 = and i32 %127, %0
  %264 = or i32 %12, %5
  %265 = shl i32 %264, 2
  %266 = xor i32 %13, %4
  %267 = and i32 %10, %5
  %268 = and i32 %267, %4
  %269 = xor i32 %266, -1
  %270 = xor i32 %268, %269
  %271 = xor i32 %5, -1
  %272 = or i32 %271, %4
  %273 = xor i32 %272, -1
  %274 = xor i32 %273, %3
  %275 = and i32 %4, %3
  %276 = or i32 %5, %3
  %277 = xor i32 %276, -1
  %278 = or i32 %275, %277
  %279 = or i32 %276, %4
  %280 = xor i32 %4, -1
  %281 = or i32 %14, %280
  %282 = and i32 %5, %3
  %283 = and i32 %282, %280
  %284 = and i32 %276, %4
  %285 = or i32 %283, %284
  %286 = or i32 %19, %3
  %287 = xor i32 %277, %4
  %288 = and i32 %10, %4
  %289 = xor i32 %288, %5
  %290 = and i32 %272, %18
  %291 = xor i32 %288, -1
  %292 = and i32 %19, %17
  %293 = and i32 %5, %4
  %294 = or i32 %4, %3
  %295 = xor i32 %293, %294
  %296 = and i32 %271, %291
  %297 = or i32 %271, %12
  %298 = xor i32 %282, -1
  %299 = and i32 %298, %280
  %300 = and i32 %282, %4
  %301 = xor i32 %4, 2147483647
  %302 = xor i32 %301, %276
  %303 = xor i32 %302, %300
  %304 = or i32 %288, %5
  %305 = and i32 %11, %271
  %306 = or i32 %271, %3
  %307 = xor i32 %306, -1
  %308 = add i32 %306, 1
  %309 = and i32 %271, %3
  %310 = or i32 %309, %4
  %311 = xor i32 %309, -1
  %312 = or i32 %10, %5
  %313 = xor i32 %312, -1
  %314 = or i32 %313, %4
  %315 = xor i32 %268, %314
  %316 = add i32 %3, 1
  %317 = and i32 %267, %280
  %318 = and i32 %312, %4
  %319 = or i32 %317, %318
  %320 = shl i32 %319, 1
  %321 = and i32 %14, %280
  %322 = xor i32 %294, -1
  %323 = or i32 %13, %322
  %324 = and i32 %13, %280
  %325 = or i32 %300, %324
  %326 = and i32 %271, %4
  %327 = or i32 %326, %282
  %328 = or i32 %17, %271
  %329 = or i32 %5, %4
  %330 = xor i32 %329, -1
  %331 = or i32 %330, %18
  %332 = and i32 %13, %4
  %333 = or i32 %283, %332
  %334 = shl i32 %333, 1
  %335 = or i32 %277, %4
  %336 = xor i32 %275, -1
  %337 = and i32 %19, %336
  %338 = or i32 %326, %17
  %339 = or i32 %277, %280
  %340 = shl i32 %339, 2
  %341 = and i32 %13, %291
  %342 = xor i32 %326, -1
  %343 = and i32 %342, %3
  %344 = shl i32 %276, 1
  %345 = xor i32 %19, -1
  %346 = or i32 %17, %345
  %347 = xor i32 %330, %3
  %348 = or i32 %13, %288
  %349 = and i32 %276, %280
  %350 = or i32 %300, %349
  %351 = or i32 %306, %4
  %352 = and i32 %11, %345
  %353 = xor i32 %336, %5
  %354 = and i32 %19, %291
  %355 = or i32 %322, %5
  %356 = or i32 %275, %330
  %357 = shl i32 %293, 1
  %358 = xor i32 %357, -2
  %359 = and i32 %14, %336
  %360 = or i32 %271, %18
  %361 = or i32 %293, %277
  %362 = or i32 %13, %275
  %363 = or i32 %326, %307
  %364 = or i32 %306, %280
  %365 = shl i32 %364, 1
  %366 = or i32 %275, %273
  %367 = shl i32 %366, 1
  %368 = or i32 %307, %280
  %369 = xor i32 %272, %3
  %370 = shl i32 %369, 1
  %371 = and i32 %306, %4
  %372 = or i32 %282, %288
  %373 = xor i32 %342, %3
  %374 = or i32 %288, %345
  %375 = or i32 %19, %17
  %376 = and i32 %345, %18
  %377 = and i32 %14, %291
  %378 = and i32 %309, %280
  %379 = and i32 %277, %4
  %380 = and i32 %309, %4
  %381 = and i32 %307, %280
  %382 = and i32 %307, %4
  %383 = shl i32 %382, 2
  %384 = add i32 %251, %27
  %385 = add i32 %384, %250
  %386 = add i32 %385, %210
  %387 = add i32 %386, %189
  %388 = add i32 %387, %178
  %389 = add i32 %388, %173
  %390 = add i32 %389, %169
  %391 = add i32 %390, %135
  %392 = add i32 %391, %103
  %393 = add i32 %392, %42
  %394 = sub i32 %393, %25
  %395 = add i32 %394, %291
  %396 = add i32 %395, %353
  %397 = add i32 %396, %305
  %398 = add i32 %397, %13
  %399 = add i32 %398, %246
  %400 = add i32 %399, %362
  %401 = add i32 %400, %361
  %402 = add i32 %401, %341
  %403 = add i32 %402, %266
  %404 = add i32 %403, %350
  %405 = add i32 %404, %303
  %406 = shl i32 %405, 1
  %407 = sub i32 %229, %238
  %408 = sub i32 %407, %148
  %409 = add i32 %408, %113
  %410 = sub i32 %409, %201
  %411 = sub i32 %410, %278
  %412 = add i32 %411, %379
  %413 = mul i32 %412, 3
  %414 = sub i32 %62, %254
  %415 = sub i32 %414, %65
  %416 = sub i32 %415, %378
  %417 = sub i32 %416, %380
  %418 = sub i32 %417, %343
  %419 = sub i32 %418, %327
  %420 = mul i32 %419, 5
  %421 = add i32 %195, %55
  %422 = add i32 %421, %285
  %423 = shl i32 %422, 2
  %424 = add i32 %283, %263
  %425 = mul i32 %424, 12
  %426 = sub i32 %261, %260
  %427 = mul i32 %426, 17
  %428 = add i32 %0, -3
  %429 = add i32 %428, %1
  %430 = sub i32 %429, %33
  %431 = add i32 %430, %102
  %432 = sub i32 %431, %130
  %433 = add i32 %432, %132
  %434 = add i32 %433, %220
  %435 = add i32 %434, %8
  %436 = add i32 %435, %247
  %437 = sub i32 %436, %48
  %438 = add i32 %437, %67
  %439 = add i32 %438, %73
  %440 = sub i32 %439, %89
  %441 = sub i32 %440, %100
  %442 = sub i32 %441, %104
  %443 = add i32 %442, %105
  %444 = add i32 %443, %110
  %445 = add i32 %444, %112
  %446 = add i32 %445, %129
  %447 = sub i32 %446, %40
  %448 = add i32 %447, %144
  %449 = add i32 %448, %146
  %450 = add i32 %449, %126
  %451 = sub i32 %450, %26
  %452 = add i32 %451, %41
  %453 = add i32 %452, %7
  %454 = add i32 %453, %165
  %455 = add i32 %454, %174
  %456 = sub i32 %455, %177
  %457 = add i32 %456, %190
  %458 = add i32 %457, %191
  %459 = add i32 %458, %192
  %460 = add i32 %459, %202
  %461 = add i32 %460, %209
  %462 = add i32 %461, %221
  %463 = add i32 %462, %231
  %464 = add i32 %463, %237
  %465 = add i32 %464, %316
  %466 = sub i32 %465, %32
  %467 = sub i32 %466, %34
  %468 = add i32 %467, %43
  %469 = add i32 %468, %50
  %470 = add i32 %469, %56
  %471 = sub i32 %470, %57
  %472 = sub i32 %471, %60
  %473 = sub i32 %472, %63
  %474 = add i32 %473, %64
  %475 = add i32 %474, %69
  %476 = sub i32 %475, %71
  %477 = sub i32 %476, %72
  %478 = sub i32 %477, %74
  %479 = sub i32 %478, %75
  %480 = add i32 %479, %76
  %481 = add i32 %480, %82
  %482 = sub i32 %481, %85
  %483 = add i32 %482, %90
  %484 = add i32 %483, %95
  %485 = sub i32 %484, %96
  %486 = sub i32 %485, %97
  %487 = add i32 %486, %98
  %488 = sub i32 %487, %99
  %489 = add i32 %488, %101
  %490 = sub i32 %489, %109
  %491 = sub i32 %490, %111
  %492 = sub i32 %491, %114
  %493 = sub i32 %492, %115
  %494 = add i32 %493, %116
  %495 = sub i32 %494, %117
  %496 = sub i32 %495, %118
  %497 = add i32 %496, %123
  %498 = add i32 %497, %124
  %499 = add i32 %498, %125
  %500 = sub i32 %499, %128
  %501 = sub i32 %500, %131
  %502 = sub i32 %501, %136
  %503 = sub i32 %502, %137
  %504 = sub i32 %503, %139
  %505 = add i32 %504, %140
  %506 = add i32 %505, %141
  %507 = add i32 %506, %142
  %508 = add i32 %507, %143
  %509 = sub i32 %508, %145
  %510 = sub i32 %509, %147
  %511 = sub i32 %510, %149
  %512 = add i32 %511, %150
  %513 = add i32 %512, %151
  %514 = sub i32 %513, %152
  %515 = sub i32 %514, %153
  %516 = sub i32 %515, %154
  %517 = add i32 %516, %156
  %518 = sub i32 %517, %159
  %519 = sub i32 %518, %161
  %520 = sub i32 %519, %162
  %521 = add i32 %520, %163
  %522 = add i32 %521, %164
  %523 = sub i32 %522, %166
  %524 = add i32 %523, %167
  %525 = sub i32 %524, %168
  %526 = add i32 %525, %170
  %527 = add i32 %526, %171
  %528 = add i32 %527, %172
  %529 = sub i32 %528, %175
  %530 = add i32 %529, %176
  %531 = sub i32 %530, %180
  %532 = sub i32 %531, %181
  %533 = sub i32 %532, %186
  %534 = sub i32 %533, %187
  %535 = add i32 %534, %188
  %536 = add i32 %535, %184
  %537 = add i32 %536, %198
  %538 = sub i32 %537, %203
  %539 = add i32 %538, %204
  %540 = sub i32 %539, %207
  %541 = sub i32 %540, %211
  %542 = add i32 %541, %212
  %543 = add i32 %542, %215
  %544 = sub i32 %543, %216
  %545 = add i32 %544, %217
  %546 = add i32 %545, %218
  %547 = add i32 %546, %219
  %548 = sub i32 %547, %223
  %549 = add i32 %548, %224
  %550 = add i32 %549, %225
  %551 = add i32 %550, %226
  %552 = add i32 %551, %230
  %553 = add i32 %552, %232
  %554 = sub i32 %553, %236
  %555 = sub i32 %554, %239
  %556 = sub i32 %555, %240
  %557 = add i32 %556, %241
  %558 = sub i32 %557, %243
  %559 = sub i32 %558, %244
  %560 = add i32 %559, %248
  %561 = sub i32 %560, %249
  %562 = sub i32 %561, %45
  %563 = sub i32 %562, %255
  %564 = sub i32 %563, %256
  %565 = sub i32 %564, %257
  %566 = sub i32 %565, %35
  %567 = add i32 %566, %38
  %568 = add i32 %567, %46
  %569 = add i32 %568, %53
  %570 = add i32 %569, %81
  %571 = sub i32 %570, %84
  %572 = sub i32 %571, %87
  %573 = sub i32 %572, %92
  %574 = sub i32 %573, %107
  %575 = sub i32 %574, %120
  %576 = sub i32 %575, %122
  %577 = sub i32 %576, %134
  %578 = add i32 %577, %155
  %579 = sub i32 %578, %158
  %580 = sub i32 %579, %183
  %581 = sub i32 %580, %185
  %582 = add i32 %581, %194
  %583 = sub i32 %582, %197
  %584 = add i32 %583, %199
  %585 = sub i32 %584, %206
  %586 = sub i32 %585, %208
  %587 = sub i32 %586, %214
  %588 = sub i32 %587, %228
  %589 = add i32 %588, %233
  %590 = sub i32 %589, %235
  %591 = sub i32 %590, %252
  %592 = add i32 %591, %253
  %593 = add i32 %592, %259
  %594 = add i32 %593, %262
  %595 = add i32 %594, %17
  %596 = add i32 %595, %289
  %597 = sub i32 %596, %296
  %598 = add i32 %597, %297
  %599 = sub i32 %598, %304
  %600 = add i32 %599, %308
  %601 = add i32 %600, %311
  %602 = sub i32 %601, %328
  %603 = add i32 %602, %355
  %604 = add i32 %603, %360
  %605 = add i32 %604, %427
  %606 = sub i32 %605, %265
  %607 = add i32 %606, %274
  %608 = sub i32 %607, %279
  %609 = sub i32 %608, %281
  %610 = add i32 %609, %286
  %611 = sub i32 %610, %287
  %612 = add i32 %611, %290
  %613 = sub i32 %612, %292
  %614 = add i32 %613, %295
  %615 = sub i32 %614, %299
  %616 = add i32 %615, %310
  %617 = sub i32 %616, %321
  %618 = sub i32 %617, %323
  %619 = sub i32 %618, %331
  %620 = sub i32 %619, %335
  %621 = add i32 %620, %337
  %622 = add i32 %621, %338
  %623 = sub i32 %622, %344
  %624 = add i32 %623, %346
  %625 = add i32 %624, %347
  %626 = add i32 %625, %348
  %627 = add i32 %626, %351
  %628 = sub i32 %627, %352
  %629 = add i32 %628, %349
  %630 = add i32 %629, %354
  %631 = add i32 %630, %356
  %632 = add i32 %631, %359
  %633 = add i32 %632, %363
  %634 = add i32 %633, %324
  %635 = add i32 %634, %368
  %636 = add i32 %635, %371
  %637 = sub i32 %636, %372
  %638 = add i32 %637, %373
  %639 = add i32 %638, %374
  %640 = add i32 %639, %375
  %641 = add i32 %640, %376
  %642 = add i32 %641, %377
  %643 = sub i32 %642, %381
  %644 = add i32 %643, %300
  %645 = sub i32 %644, %270
  %646 = sub i32 %645, %315
  %647 = add i32 %646, %325
  %648 = sub i32 %647, %340
  %649 = sub i32 %648, %358
  %650 = sub i32 %649, %365
  %651 = sub i32 %650, %367
  %652 = sub i32 %651, %370
  %653 = sub i32 %652, %383
  %654 = sub i32 %653, %320
  %655 = sub i32 %654, %334
  %656 = add i32 %655, %425
  %657 = add i32 %656, %423
  %658 = add i32 %657, %413
  %659 = add i32 %658, %420
  %660 = add i32 %659, %406
  %661 = icmp eq i32 %22, %660
  %662 = select i1 %661, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %663 = tail call i32 @puts(i8* nonnull dereferenceable(1) %662)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
