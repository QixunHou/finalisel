; ModuleID = '../.././c_source_file/0194_path_condition_crackme.c'
source_filename = "../.././c_source_file/0194_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %1, -1
  %7 = or i32 %6, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %8, %2
  %10 = sub i32 %9, %3
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %1
  %13 = xor i32 %12, -1
  %14 = add i32 %10, %13
  %15 = xor i32 %4, -1
  %16 = and i32 %15, %3
  %17 = xor i32 %16, -1
  %18 = xor i32 %4, %3
  %19 = add i32 %4, 1
  %20 = or i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = and i32 %4, %3
  %24 = shl i32 %23, 1
  %25 = xor i32 %2, %0
  %26 = and i32 %25, %7
  %27 = xor i32 %0, -1
  %28 = and i32 %6, %2
  %29 = and i32 %28, %27
  %30 = or i32 %6, %2
  %31 = and i32 %30, %0
  %32 = or i32 %29, %31
  %33 = and i32 %6, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %25, -1
  %36 = and i32 %35, %34
  %37 = xor i32 %2, %1
  %38 = or i32 %37, %27
  %39 = or i32 %11, %1
  %40 = or i32 %39, %0
  %41 = and i32 %1, %0
  %42 = or i32 %2, %1
  %43 = xor i32 %42, %41
  %44 = or i32 %2, %0
  %45 = and i32 %44, %1
  %46 = and i32 %11, %0
  %47 = xor i32 %46, -1
  %48 = and i32 %47, %1
  %49 = and i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %0
  %52 = and i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = shl i32 %53, 1
  %55 = xor i32 %29, %38
  %56 = or i32 %11, %8
  %57 = or i32 %1, %0
  %58 = and i32 %57, %35
  %59 = xor i32 %1, %0
  %60 = and i32 %59, %2
  %61 = or i32 %52, %1
  %62 = xor i32 %42, -1
  %63 = or i32 %41, %62
  %64 = and i32 %28, %0
  %65 = xor i32 %30, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %64, %66
  %68 = and i32 %49, %0
  %69 = and i32 %37, %27
  %70 = xor i32 %68, -1
  %71 = xor i32 %69, %70
  %72 = or i32 %59, %35
  %73 = or i32 %11, %0
  %74 = xor i32 %73, -1
  %75 = xor i32 %74, %1
  %76 = xor i32 %37, -1
  %77 = and i32 %76, %0
  %78 = shl i32 %77, 1
  %79 = xor i32 %39, %41
  %80 = shl i32 %47, 1
  %81 = xor i32 %41, -1
  %82 = and i32 %35, %81
  %83 = xor i32 %76, %0
  %84 = xor i32 %59, -1
  %85 = and i32 %44, %84
  %86 = xor i32 %44, %41
  %87 = or i32 %13, %0
  %88 = xor i32 %57, %2
  %89 = xor i32 %73, %41
  %90 = xor i32 %39, -1
  %91 = or i32 %62, %0
  %92 = or i32 %33, %2
  %93 = and i32 %73, %84
  %94 = xor i32 %12, %0
  %95 = or i32 %46, %59
  %96 = xor i32 %52, %57
  %97 = add i32 %49, 1
  %98 = and i32 %7, %35
  %99 = shl i32 %98, 1
  %100 = and i32 %25, %84
  %101 = or i32 %37, %0
  %102 = xor i32 %64, %101
  %103 = and i32 %37, %81
  %104 = and i32 %47, %6
  %105 = and i32 %39, %27
  %106 = and i32 %76, %34
  %107 = or i32 %46, %84
  %108 = or i32 %35, %8
  %109 = and i32 %59, %35
  %110 = and i32 %7, %76
  %111 = and i32 %42, %0
  %112 = or i32 %41, %35
  %113 = or i32 %35, %1
  %114 = xor i32 %13, %0
  %115 = xor i32 %81, %2
  %116 = or i32 %25, %33
  %117 = xor i32 %49, %0
  %118 = or i32 %52, %12
  %119 = xor i32 %57, -1
  %120 = or i32 %119, %2
  %121 = and i32 %59, %47
  %122 = or i32 %59, %74
  %123 = or i32 %84, %2
  %124 = and i32 %30, %27
  %125 = or i32 %64, %124
  %126 = and i32 %49, %27
  %127 = or i32 %126, %111
  %128 = and i32 %13, %0
  %129 = or i32 %37, %119
  %130 = or i32 %52, %8
  %131 = and i32 %35, %84
  %132 = and i32 %42, %27
  %133 = or i32 %68, %132
  %134 = xor i32 %73, %1
  %135 = and i32 %25, %59
  %136 = or i32 %76, %119
  %137 = and i32 %47, %84
  %138 = xor i32 %34, %2
  %139 = or i32 %41, %2
  %140 = xor i32 %52, %7
  %141 = or i32 %41, %11
  %142 = and i32 %37, %57
  %143 = shl i32 %142, 1
  %144 = xor i32 %33, %13
  %145 = and i32 %57, %76
  %146 = or i32 %62, %27
  %147 = xor i32 %44, -1
  %148 = xor i32 %147, %1
  %149 = or i32 %41, %76
  %150 = shl i32 %149, 1
  %151 = or i32 %52, %84
  %152 = and i32 %76, %81
  %153 = xor i32 %37, %0
  %154 = xor i32 %153, -1
  %155 = xor i32 %64, %154
  %156 = or i32 %64, %65
  %157 = or i32 %39, %27
  %158 = or i32 %74, %84
  %159 = or i32 %41, %90
  %160 = or i32 %12, %33
  %161 = shl i32 %160, 1
  %162 = shl i32 %49, 1
  %163 = xor i32 %68, %153
  %164 = shl i32 %163, 1
  %165 = or i32 %74, %1
  %166 = or i32 %52, %59
  %167 = or i32 %59, %11
  %168 = or i32 %90, %0
  %169 = xor i32 %46, %39
  %170 = or i32 %76, %0
  %171 = and i32 %73, %1
  %172 = or i32 %25, %1
  %173 = xor i32 %124, 2147483647
  %174 = xor i32 %173, %64
  %175 = or i32 %46, %90
  %176 = and i32 %13, %27
  %177 = or i32 %42, %0
  %178 = or i32 %25, %8
  %179 = and i32 %11, %84
  %180 = xor i32 %42, %0
  %181 = xor i32 %180, %70
  %182 = xor i32 %33, %50
  %183 = or i32 %46, %49
  %184 = or i32 %35, %6
  %185 = shl i32 %184, 1
  %186 = and i32 %59, %11
  %187 = or i32 %33, %35
  %188 = xor i32 %126, -1
  %189 = xor i32 %111, %188
  %190 = and i32 %73, %59
  %191 = or i32 %90, %27
  %192 = or i32 %74, %6
  %193 = shl i32 %192, 2
  %194 = xor i32 %101, 2147483647
  %195 = or i32 %194, %64
  %196 = and i32 %25, %6
  %197 = and i32 %39, %0
  %198 = or i32 %52, %62
  %199 = or i32 %37, %33
  %200 = xor i32 %41, %2
  %201 = or i32 %147, %1
  %202 = and i32 %53, %6
  %203 = or i32 %41, %147
  %204 = and i32 %25, %57
  %205 = or i32 %68, %180
  %206 = and i32 %44, %59
  %207 = shl i32 %206, 1
  %208 = xor i32 %53, %1
  %209 = and i32 %37, %34
  %210 = and i32 %37, %7
  %211 = or i32 %33, %76
  %212 = shl i32 %211, 1
  %213 = xor i32 %52, %1
  %214 = or i32 %50, %27
  %215 = and i32 %37, %0
  %216 = or i32 %126, %215
  %217 = or i32 %76, %8
  %218 = or i32 %52, %6
  %219 = and i32 %35, %6
  %220 = and i32 %11, %81
  %221 = or i32 %49, %0
  %222 = shl i32 %221, 1
  %223 = xor i32 %44, %1
  %224 = and i32 %25, %34
  %225 = xor i32 %7, %2
  %226 = and i32 %53, %84
  %227 = xor i32 %39, %0
  %228 = or i32 %25, %119
  %229 = xor i32 %31, -1
  %230 = xor i32 %29, %229
  %231 = or i32 %35, %84
  %232 = or i32 %68, %69
  %233 = or i32 %37, %41
  %234 = or i32 %49, %33
  %235 = xor i32 %47, %1
  %236 = or i32 %46, %1
  %237 = or i32 %68, %154
  %238 = xor i32 %52, %13
  %239 = or i32 %52, %119
  %240 = shl i32 %42, 1
  %241 = and i32 %50, %27
  %242 = and i32 %44, %6
  %243 = xor i32 %215, %188
  %244 = and i32 %25, %1
  %245 = or i32 %25, %6
  %246 = xor i32 %132, %70
  %247 = xor i32 %46, %1
  %248 = xor i32 %33, %2
  %249 = and i32 %57, %11
  %250 = or i32 %11, %119
  %251 = and i32 %7, %11
  %252 = shl i32 %251, 1
  %253 = and i32 %73, %6
  %254 = shl i32 %253, 1
  %255 = xor i32 %8, %2
  %256 = shl i32 %255, 1
  %257 = and i32 %53, %1
  %258 = shl i32 %257, 1
  %259 = or i32 %64, %153
  %260 = xor i32 %50, %0
  %261 = add i32 %73, 1
  %262 = or i32 %12, %27
  %263 = xor i32 %46, %50
  %264 = or i32 %12, %0
  %265 = or i32 %35, %119
  %266 = and i32 %50, %0
  %267 = and i32 %35, %1
  %268 = xor i32 %119, %2
  %269 = and i32 %11, %34
  %270 = shl i32 %101, 1
  %271 = and i32 %57, %2
  %272 = or i32 %49, %27
  %273 = shl i32 %272, 2
  %274 = or i32 %25, %84
  %275 = shl i32 %33, 1
  %276 = and i32 %25, %81
  %277 = xor i32 %62, %0
  %278 = add i32 %25, 1
  %279 = or i32 %37, %8
  %280 = or i32 %11, %84
  %281 = and i32 %84, %2
  %282 = and i32 %81, %2
  %283 = xor i32 %38, -1
  %284 = or i32 %29, %283
  %285 = add i32 %57, 1
  %286 = or i32 %42, %27
  %287 = xor i32 %52, %42
  %288 = and i32 %59, %53
  %289 = shl i32 %288, 1
  %290 = and i32 %76, %27
  %291 = or i32 %46, %6
  %292 = or i32 %76, %27
  %293 = or i32 %59, %2
  %294 = and i32 %34, %2
  %295 = shl i32 %294, 1
  %296 = or i32 %59, %147
  %297 = and i32 %62, %27
  %298 = mul i32 %297, 20
  %299 = and i32 %12, %27
  %300 = mul i32 %299, 26
  %301 = and i32 %62, %0
  %302 = mul i32 %301, 17
  %303 = and i32 %12, %0
  %304 = and i32 %90, %27
  %305 = mul i32 %304, 10
  %306 = mul i32 %126, 34
  %307 = and i32 %90, %0
  %308 = mul i32 %307, 13
  %309 = mul i32 %68, 25
  %310 = add i32 %280, %282
  %311 = add i32 %310, %147
  %312 = add i32 %311, %220
  %313 = add i32 %312, %138
  %314 = add i32 %313, %120
  %315 = add i32 %314, %39
  %316 = add i32 %315, %88
  %317 = add i32 %316, %46
  %318 = add i32 %317, %242
  %319 = add i32 %318, %239
  %320 = add i32 %319, %208
  %321 = add i32 %320, %199
  %322 = add i32 %321, %157
  %323 = add i32 %322, %152
  %324 = add i32 %323, %121
  %325 = add i32 %324, %116
  %326 = add i32 %325, %113
  %327 = add i32 %326, %105
  %328 = add i32 %327, %100
  %329 = add i32 %328, %4
  %330 = add i32 %329, %32
  %331 = add i32 %330, %174
  %332 = add i32 %331, %195
  %333 = shl i32 %332, 1
  %334 = add i32 %248, %278
  %335 = sub i32 %334, %146
  %336 = add i32 %335, %303
  %337 = add i32 %336, %104
  %338 = mul i32 %337, 5
  %339 = sub i32 %90, %234
  %340 = add i32 %339, %233
  %341 = add i32 %340, %16
  %342 = mul i32 %341, 3
  %343 = add i32 %0, 4
  %344 = add i32 %343, %0
  %345 = sub i32 %344, %2
  %346 = add i32 %345, %33
  %347 = add i32 %346, 2
  %348 = sub i32 %347, %2
  %349 = add i32 %348, %8
  %350 = add i32 %349, %57
  %351 = add i32 %350, %285
  %352 = sub i32 %351, %56
  %353 = sub i32 %352, %60
  %354 = sub i32 %353, %44
  %355 = add i32 %354, %92
  %356 = add i32 %355, %97
  %357 = sub i32 %356, %115
  %358 = sub i32 %357, %123
  %359 = add i32 %358, %73
  %360 = add i32 %359, %139
  %361 = add i32 %360, %141
  %362 = add i32 %361, %167
  %363 = add i32 %362, %179
  %364 = add i32 %363, %186
  %365 = sub i32 %364, %200
  %366 = add i32 %365, %76
  %367 = sub i32 %366, %12
  %368 = add i32 %367, %25
  %369 = sub i32 %368, %225
  %370 = sub i32 %369, %249
  %371 = sub i32 %370, %250
  %372 = sub i32 %371, %52
  %373 = add i32 %372, %62
  %374 = add i32 %373, %261
  %375 = sub i32 %374, %268
  %376 = sub i32 %375, %269
  %377 = add i32 %376, %271
  %378 = sub i32 %377, %275
  %379 = sub i32 %378, %281
  %380 = sub i32 %379, %37
  %381 = sub i32 %380, %293
  %382 = add i32 %381, %19
  %383 = sub i32 %382, %26
  %384 = sub i32 %383, %36
  %385 = add i32 %384, %38
  %386 = add i32 %385, %40
  %387 = add i32 %386, %43
  %388 = sub i32 %387, %45
  %389 = add i32 %388, %48
  %390 = add i32 %389, %51
  %391 = sub i32 %390, %54
  %392 = sub i32 %391, %58
  %393 = add i32 %392, %61
  %394 = add i32 %393, %63
  %395 = add i32 %394, %72
  %396 = sub i32 %395, %75
  %397 = sub i32 %396, %79
  %398 = sub i32 %397, %80
  %399 = sub i32 %398, %82
  %400 = sub i32 %399, %83
  %401 = sub i32 %400, %85
  %402 = sub i32 %401, %86
  %403 = sub i32 %402, %87
  %404 = sub i32 %403, %89
  %405 = add i32 %404, %91
  %406 = sub i32 %405, %93
  %407 = add i32 %406, %94
  %408 = sub i32 %407, %95
  %409 = sub i32 %408, %96
  %410 = sub i32 %409, %103
  %411 = sub i32 %410, %106
  %412 = sub i32 %411, %107
  %413 = add i32 %412, %108
  %414 = sub i32 %413, %109
  %415 = sub i32 %414, %110
  %416 = add i32 %415, %111
  %417 = add i32 %416, %112
  %418 = sub i32 %417, %114
  %419 = sub i32 %418, %117
  %420 = add i32 %419, %118
  %421 = sub i32 %420, %122
  %422 = add i32 %421, %128
  %423 = add i32 %422, %129
  %424 = sub i32 %423, %130
  %425 = sub i32 %424, %131
  %426 = sub i32 %425, %134
  %427 = add i32 %426, %135
  %428 = sub i32 %427, %136
  %429 = add i32 %428, %137
  %430 = sub i32 %429, %140
  %431 = add i32 %430, %144
  %432 = sub i32 %431, %145
  %433 = sub i32 %432, %148
  %434 = add i32 %433, %151
  %435 = add i32 %434, %158
  %436 = sub i32 %435, %159
  %437 = sub i32 %436, %162
  %438 = sub i32 %437, %165
  %439 = add i32 %438, %166
  %440 = sub i32 %439, %168
  %441 = sub i32 %440, %169
  %442 = sub i32 %441, %170
  %443 = sub i32 %442, %171
  %444 = add i32 %443, %172
  %445 = add i32 %444, %175
  %446 = add i32 %445, %176
  %447 = sub i32 %446, %69
  %448 = add i32 %447, %177
  %449 = sub i32 %448, %178
  %450 = sub i32 %449, %182
  %451 = sub i32 %450, %183
  %452 = sub i32 %451, %187
  %453 = add i32 %452, %190
  %454 = sub i32 %453, %191
  %455 = add i32 %454, %196
  %456 = sub i32 %455, %197
  %457 = sub i32 %456, %198
  %458 = sub i32 %457, %201
  %459 = add i32 %458, %202
  %460 = add i32 %459, %203
  %461 = sub i32 %460, %204
  %462 = add i32 %461, %209
  %463 = add i32 %462, %210
  %464 = add i32 %463, %213
  %465 = sub i32 %464, %214
  %466 = sub i32 %465, %217
  %467 = sub i32 %466, %218
  %468 = add i32 %467, %219
  %469 = add i32 %468, %153
  %470 = add i32 %469, %223
  %471 = add i32 %470, %224
  %472 = sub i32 %471, %226
  %473 = sub i32 %472, %227
  %474 = add i32 %473, %228
  %475 = sub i32 %474, %231
  %476 = sub i32 %475, %235
  %477 = sub i32 %476, %236
  %478 = sub i32 %477, %180
  %479 = sub i32 %478, %238
  %480 = sub i32 %479, %240
  %481 = add i32 %480, %241
  %482 = sub i32 %481, %215
  %483 = sub i32 %482, %244
  %484 = add i32 %483, %245
  %485 = add i32 %484, %247
  %486 = sub i32 %485, %252
  %487 = sub i32 %486, %256
  %488 = sub i32 %487, %260
  %489 = add i32 %488, %262
  %490 = add i32 %489, %263
  %491 = add i32 %490, %264
  %492 = sub i32 %491, %265
  %493 = add i32 %492, %266
  %494 = add i32 %493, %267
  %495 = add i32 %494, %274
  %496 = add i32 %495, %276
  %497 = add i32 %496, %277
  %498 = sub i32 %497, %279
  %499 = sub i32 %498, %286
  %500 = sub i32 %499, %287
  %501 = add i32 %500, %290
  %502 = sub i32 %501, %291
  %503 = sub i32 %502, %292
  %504 = sub i32 %503, %295
  %505 = sub i32 %504, %296
  %506 = add i32 %505, %17
  %507 = sub i32 %506, %18
  %508 = sub i32 %507, %55
  %509 = add i32 %508, %67
  %510 = add i32 %509, %71
  %511 = sub i32 %510, %78
  %512 = sub i32 %511, %99
  %513 = add i32 %512, %102
  %514 = add i32 %513, %125
  %515 = sub i32 %514, %127
  %516 = sub i32 %515, %133
  %517 = sub i32 %516, %143
  %518 = sub i32 %517, %150
  %519 = sub i32 %518, %155
  %520 = add i32 %519, %156
  %521 = sub i32 %520, %161
  %522 = add i32 %521, %181
  %523 = sub i32 %522, %185
  %524 = add i32 %523, %189
  %525 = sub i32 %524, %193
  %526 = sub i32 %525, %205
  %527 = sub i32 %526, %207
  %528 = sub i32 %527, %212
  %529 = add i32 %528, %216
  %530 = sub i32 %529, %222
  %531 = add i32 %530, %230
  %532 = sub i32 %531, %232
  %533 = add i32 %532, %237
  %534 = sub i32 %533, %243
  %535 = sub i32 %534, %246
  %536 = sub i32 %535, %254
  %537 = sub i32 %536, %258
  %538 = sub i32 %537, %259
  %539 = sub i32 %538, %270
  %540 = sub i32 %539, %273
  %541 = add i32 %540, %284
  %542 = sub i32 %541, %289
  %543 = add i32 %542, %298
  %544 = add i32 %543, %300
  %545 = add i32 %544, %302
  %546 = add i32 %545, %305
  %547 = add i32 %546, %306
  %548 = add i32 %547, %308
  %549 = add i32 %548, %309
  %550 = sub i32 %549, %24
  %551 = sub i32 %550, %164
  %552 = add i32 %551, %22
  %553 = add i32 %552, %338
  %554 = add i32 %553, %342
  %555 = add i32 %554, %333
  %556 = icmp eq i32 %14, %555
  %557 = select i1 %556, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %558 = tail call i32 @puts(i8* nonnull dereferenceable(1) %557)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
