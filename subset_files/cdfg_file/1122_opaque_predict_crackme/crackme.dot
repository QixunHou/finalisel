digraph "DFG for'crackme' function" {
	Node0x1dbeb10[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1dbeb80[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0x1dbf200[shape=record, label="  %7 = add i32 %5, 2"];
	Node0x1dbf270[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x1dbf2e0[shape=record, label="  %9 = and i32 %2, %1"];
	Node0x1dbf380[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1dbf420[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1dbf4c0[shape=record, label="  %12 = xor i32 %2, -1"];
	Node0x1dbf530[shape=record, label="  %13 = or i32 %12, %1"];
	Node0x1dbf5a0[shape=record, label="  %14 = and i32 %12, %1"];
	Node0x1dbf610[shape=record, label="  %15 = shl i32 %13, 1"];
	Node0x1dbf680[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x1dbf6f0[shape=record, label="  %17 = shl i32 %14, 1"];
	Node0x1dbf760[shape=record, label="  %18 = and i32 %3, %0"];
	Node0x1dbf7d0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1dbf840[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x1dbf8b0[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x1dbf920[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x1dbf990[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x1dbfa00[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x1dbfa70[shape=record, label="  %25 = xor i32 %3, -1"];
	Node0x1dbfae0[shape=record, label="  %26 = and i32 %25, %0"];
	Node0x1dbfb80[shape=record, label="  %27 = mul i32 %26, 5"];
	Node0x1dbfbf0[shape=record, label="  %28 = add i32 %22, %24"];
	Node0x1dbfc90[shape=record, label="  %29 = mul i32 %28, 3"];
	Node0x1dbfd00[shape=record, label="  %30 = add i32 %1, %2"];
	Node0x1dbfda0[shape=record, label="  %31 = add i32 %30, 4"];
	Node0x1dbfe10[shape=record, label="  %32 = sub i32 %31, %13"];
	Node0x1dc0090[shape=record, label="  %33 = add i32 %32, %5"];
	Node0x1dc0100[shape=record, label="  %34 = add i32 %33, %14"];
	Node0x1dc0170[shape=record, label="  %35 = add i32 %34, %3"];
	Node0x1dc01e0[shape=record, label="  %36 = sub i32 %35, %17"];
	Node0x1dc0250[shape=record, label="  %37 = sub i32 %36, %6"];
	Node0x1dc02c0[shape=record, label="  %38 = add i32 %37, %22"];
	Node0x1dc0330[shape=record, label="  %39 = add i32 %38, %11"];
	Node0x1dc03a0[shape=record, label="  %40 = sub i32 %39, %16"];
	Node0x1dc0410[shape=record, label="  %41 = add i32 %40, %27"];
	Node0x1dc0480[shape=record, label="  %42 = sub i32 %41, %20"];
	Node0x1dc04f0[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x1dc0560[shape=record, label="  %44 = icmp eq i32 %8, %43"];
	Node0x1d5f268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1dc0a00[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x1dc0a50[shape=record, label="  ret void"];
	Node0x1dbeb10 -> Node0x1dbeb80;
	Node0x1dbeb80 -> Node0x1dbf200;
	Node0x1dbf200 -> Node0x1dbf270;
	Node0x1dbf270 -> Node0x1dbf2e0;
	Node0x1dbf2e0 -> Node0x1dbf380;
	Node0x1dbf380 -> Node0x1dbf420;
	Node0x1dbf420 -> Node0x1dbf4c0;
	Node0x1dbf4c0 -> Node0x1dbf530;
	Node0x1dbf530 -> Node0x1dbf5a0;
	Node0x1dbf5a0 -> Node0x1dbf610;
	Node0x1dbf610 -> Node0x1dbf680;
	Node0x1dbf680 -> Node0x1dbf6f0;
	Node0x1dbf6f0 -> Node0x1dbf760;
	Node0x1dbf760 -> Node0x1dbf7d0;
	Node0x1dbf7d0 -> Node0x1dbf840;
	Node0x1dbf840 -> Node0x1dbf8b0;
	Node0x1dbf8b0 -> Node0x1dbf920;
	Node0x1dbf920 -> Node0x1dbf990;
	Node0x1dbf990 -> Node0x1dbfa00;
	Node0x1dbfa00 -> Node0x1dbfa70;
	Node0x1dbfa70 -> Node0x1dbfae0;
	Node0x1dbfae0 -> Node0x1dbfb80;
	Node0x1dbfb80 -> Node0x1dbfbf0;
	Node0x1dbfbf0 -> Node0x1dbfc90;
	Node0x1dbfc90 -> Node0x1dbfd00;
	Node0x1dbfd00 -> Node0x1dbfda0;
	Node0x1dbfda0 -> Node0x1dbfe10;
	Node0x1dbfe10 -> Node0x1dc0090;
	Node0x1dc0090 -> Node0x1dc0100;
	Node0x1dc0100 -> Node0x1dc0170;
	Node0x1dc0170 -> Node0x1dc01e0;
	Node0x1dc01e0 -> Node0x1dc0250;
	Node0x1dc0250 -> Node0x1dc02c0;
	Node0x1dc02c0 -> Node0x1dc0330;
	Node0x1dc0330 -> Node0x1dc03a0;
	Node0x1dc03a0 -> Node0x1dc0410;
	Node0x1dc0410 -> Node0x1dc0480;
	Node0x1dc0480 -> Node0x1dc04f0;
	Node0x1dc04f0 -> Node0x1dc0560;
	Node0x1dc0560 -> Node0x1d5f268;
	Node0x1d5f268 -> Node0x1dc0a00;
	Node0x1dc0a00 -> Node0x1dc0a50;
edge [color=red]
	Node0x1dbeb10 -> Node0x1dbf200;
	Node0x1dbf200 -> Node0x1dbf270;
	Node0x1dbeb80 -> Node0x1dbf270;
	Node0x1dbf2e0 -> Node0x1dbf380;
	Node0x1dbf380 -> Node0x1dbf420;
	Node0x1dbf4c0 -> Node0x1dbf530;
	Node0x1dbf4c0 -> Node0x1dbf5a0;
	Node0x1dbf530 -> Node0x1dbf610;
	Node0x1dbf610 -> Node0x1dbf680;
	Node0x1dbf5a0 -> Node0x1dbf6f0;
	Node0x1dbf760 -> Node0x1dbf7d0;
	Node0x1dbf7d0 -> Node0x1dbf840;
	Node0x1dbf8b0 -> Node0x1dbf920;
	Node0x1dbf990 -> Node0x1dbfa00;
	Node0x1dbfa70 -> Node0x1dbfae0;
	Node0x1dbfae0 -> Node0x1dbfb80;
	Node0x1dbf920 -> Node0x1dbfbf0;
	Node0x1dbfa00 -> Node0x1dbfbf0;
	Node0x1dbfbf0 -> Node0x1dbfc90;
	Node0x1dbfd00 -> Node0x1dbfda0;
	Node0x1dbfda0 -> Node0x1dbfe10;
	Node0x1dbf530 -> Node0x1dbfe10;
	Node0x1dbfe10 -> Node0x1dc0090;
	Node0x1dbeb10 -> Node0x1dc0090;
	Node0x1dc0090 -> Node0x1dc0100;
	Node0x1dbf5a0 -> Node0x1dc0100;
	Node0x1dc0100 -> Node0x1dc0170;
	Node0x1dc0170 -> Node0x1dc01e0;
	Node0x1dbf6f0 -> Node0x1dc01e0;
	Node0x1dc01e0 -> Node0x1dc0250;
	Node0x1dbeb80 -> Node0x1dc0250;
	Node0x1dc0250 -> Node0x1dc02c0;
	Node0x1dbf920 -> Node0x1dc02c0;
	Node0x1dc02c0 -> Node0x1dc0330;
	Node0x1dbf420 -> Node0x1dc0330;
	Node0x1dc0330 -> Node0x1dc03a0;
	Node0x1dbf680 -> Node0x1dc03a0;
	Node0x1dc03a0 -> Node0x1dc0410;
	Node0x1dbfb80 -> Node0x1dc0410;
	Node0x1dc0410 -> Node0x1dc0480;
	Node0x1dbf840 -> Node0x1dc0480;
	Node0x1dc0480 -> Node0x1dc04f0;
	Node0x1dbfc90 -> Node0x1dc04f0;
	Node0x1dbf270 -> Node0x1dc0560;
	Node0x1dc04f0 -> Node0x1dc0560;
	Node0x1dc0560 -> Node0x1d5f268;
	Node0x1d5f268 -> Node0x1dc0a00;
}
