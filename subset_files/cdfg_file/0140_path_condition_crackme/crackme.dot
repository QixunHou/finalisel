digraph "DFG for'crackme' function" {
	Node0x1888150[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x18881c0[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x1888230[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x18882a0[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1888310[shape=record, label="  %9 = or i32 %8, %3"];
	Node0x1888380[shape=record, label="  %10 = add i32 %9, %7"];
	Node0x1888420[shape=record, label="  %11 = shl i32 %3, 1"];
	Node0x18884c0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1888530[shape=record, label="  %13 = add i32 %10, %12"];
	Node0x18885a0[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x1888610[shape=record, label="  %15 = and i32 %14, %2"];
	Node0x1888680[shape=record, label="  %16 = shl i32 %6, 1"];
	Node0x18886f0[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x1888760[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x18887d0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1888840[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x18888b0[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x1888920[shape=record, label="  %22 = and i32 %8, %3"];
	Node0x1888990[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x1888a00[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x1888aa0[shape=record, label="  %25 = shl i32 %21, 2"];
	Node0x1888b40[shape=record, label="  %26 = xor i32 %25, -4"];
	Node0x1888bb0[shape=record, label="  %27 = xor i32 %9, -1"];
	Node0x1888c50[shape=record, label="  %28 = mul i32 %22, -3"];
	Node0x1888cc0[shape=record, label="  %29 = add i32 %20, %5"];
	Node0x1888d30[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x1888da0[shape=record, label="  %31 = add i32 %0, 2"];
	Node0x1888e10[shape=record, label="  %32 = add i32 %31, %1"];
	Node0x1889090[shape=record, label="  %33 = add i32 %32, %2"];
	Node0x1889100[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x1889170[shape=record, label="  %35 = sub i32 %34, %16"];
	Node0x18891e0[shape=record, label="  %36 = sub i32 %35, %21"];
	Node0x1889250[shape=record, label="  %37 = add i32 %36, %11"];
	Node0x18892c0[shape=record, label="  %38 = add i32 %37, %27"];
	Node0x1889330[shape=record, label="  %39 = add i32 %38, %28"];
	Node0x18893a0[shape=record, label="  %40 = add i32 %39, %18"];
	Node0x1889410[shape=record, label="  %41 = add i32 %40, %19"];
	Node0x1889480[shape=record, label="  %42 = sub i32 %41, %24"];
	Node0x18894f0[shape=record, label="  %43 = add i32 %42, %26"];
	Node0x1889560[shape=record, label="  %44 = add i32 %43, %30"];
	Node0x18895d0[shape=record, label="  %45 = icmp eq i32 %13, %44"];
	Node0x1828268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1889a70[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x1889ac0[shape=record, label="  ret void"];
	Node0x1888150 -> Node0x18881c0;
	Node0x18881c0 -> Node0x1888230;
	Node0x1888230 -> Node0x18882a0;
	Node0x18882a0 -> Node0x1888310;
	Node0x1888310 -> Node0x1888380;
	Node0x1888380 -> Node0x1888420;
	Node0x1888420 -> Node0x18884c0;
	Node0x18884c0 -> Node0x1888530;
	Node0x1888530 -> Node0x18885a0;
	Node0x18885a0 -> Node0x1888610;
	Node0x1888610 -> Node0x1888680;
	Node0x1888680 -> Node0x18886f0;
	Node0x18886f0 -> Node0x1888760;
	Node0x1888760 -> Node0x18887d0;
	Node0x18887d0 -> Node0x1888840;
	Node0x1888840 -> Node0x18888b0;
	Node0x18888b0 -> Node0x1888920;
	Node0x1888920 -> Node0x1888990;
	Node0x1888990 -> Node0x1888a00;
	Node0x1888a00 -> Node0x1888aa0;
	Node0x1888aa0 -> Node0x1888b40;
	Node0x1888b40 -> Node0x1888bb0;
	Node0x1888bb0 -> Node0x1888c50;
	Node0x1888c50 -> Node0x1888cc0;
	Node0x1888cc0 -> Node0x1888d30;
	Node0x1888d30 -> Node0x1888da0;
	Node0x1888da0 -> Node0x1888e10;
	Node0x1888e10 -> Node0x1889090;
	Node0x1889090 -> Node0x1889100;
	Node0x1889100 -> Node0x1889170;
	Node0x1889170 -> Node0x18891e0;
	Node0x18891e0 -> Node0x1889250;
	Node0x1889250 -> Node0x18892c0;
	Node0x18892c0 -> Node0x1889330;
	Node0x1889330 -> Node0x18893a0;
	Node0x18893a0 -> Node0x1889410;
	Node0x1889410 -> Node0x1889480;
	Node0x1889480 -> Node0x18894f0;
	Node0x18894f0 -> Node0x1889560;
	Node0x1889560 -> Node0x18895d0;
	Node0x18895d0 -> Node0x1828268;
	Node0x1828268 -> Node0x1889a70;
	Node0x1889a70 -> Node0x1889ac0;
edge [color=red]
	Node0x1888150 -> Node0x18881c0;
	Node0x18881c0 -> Node0x1888230;
	Node0x18882a0 -> Node0x1888310;
	Node0x1888310 -> Node0x1888380;
	Node0x1888230 -> Node0x1888380;
	Node0x1888420 -> Node0x18884c0;
	Node0x1888380 -> Node0x1888530;
	Node0x18884c0 -> Node0x1888530;
	Node0x18885a0 -> Node0x1888610;
	Node0x18881c0 -> Node0x1888680;
	Node0x18886f0 -> Node0x1888760;
	Node0x1888760 -> Node0x18887d0;
	Node0x18882a0 -> Node0x1888920;
	Node0x1888920 -> Node0x1888990;
	Node0x1888990 -> Node0x1888a00;
	Node0x18888b0 -> Node0x1888aa0;
	Node0x1888aa0 -> Node0x1888b40;
	Node0x1888310 -> Node0x1888bb0;
	Node0x1888920 -> Node0x1888c50;
	Node0x1888840 -> Node0x1888cc0;
	Node0x1888150 -> Node0x1888cc0;
	Node0x1888cc0 -> Node0x1888d30;
	Node0x1888da0 -> Node0x1888e10;
	Node0x1888e10 -> Node0x1889090;
	Node0x1889090 -> Node0x1889100;
	Node0x1888610 -> Node0x1889100;
	Node0x1889100 -> Node0x1889170;
	Node0x1888680 -> Node0x1889170;
	Node0x1889170 -> Node0x18891e0;
	Node0x18888b0 -> Node0x18891e0;
	Node0x18891e0 -> Node0x1889250;
	Node0x1888420 -> Node0x1889250;
	Node0x1889250 -> Node0x18892c0;
	Node0x1888bb0 -> Node0x18892c0;
	Node0x18892c0 -> Node0x1889330;
	Node0x1888c50 -> Node0x1889330;
	Node0x1889330 -> Node0x18893a0;
	Node0x1888760 -> Node0x18893a0;
	Node0x18893a0 -> Node0x1889410;
	Node0x18887d0 -> Node0x1889410;
	Node0x1889410 -> Node0x1889480;
	Node0x1888a00 -> Node0x1889480;
	Node0x1889480 -> Node0x18894f0;
	Node0x1888b40 -> Node0x18894f0;
	Node0x18894f0 -> Node0x1889560;
	Node0x1888d30 -> Node0x1889560;
	Node0x1888530 -> Node0x18895d0;
	Node0x1889560 -> Node0x18895d0;
	Node0x18895d0 -> Node0x1828268;
	Node0x1828268 -> Node0x1889a70;
}
