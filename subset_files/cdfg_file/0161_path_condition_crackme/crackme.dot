digraph "DFG for'crackme' function" {
	Node0x1ae04b0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1ae0b60[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x1ae0c20[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x1ae0c90[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1ae0d00[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x1ae0da0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1ae0e40[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x1ae0eb0[shape=record, label="  %10 = shl i32 %3, 1"];
	Node0x1ae0f20[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1ae0f90[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0x1ae1000[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x1ae1070[shape=record, label="  %14 = mul i32 %5, -2"];
	Node0x1ae10e0[shape=record, label="  %15 = sub i32 1, %0"];
	Node0x1ae1150[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x1ae11c0[shape=record, label="  %17 = sub i32 %16, %1"];
	Node0x1ae1230[shape=record, label="  %18 = add i32 %17, %13"];
	Node0x1ae12a0[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x1ae1310[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x1ae1380[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x1ae13f0[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0x1ae1460[shape=record, label="  %23 = icmp eq i32 %22, %4"];
	Node0x1a81268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ae1900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1ae1950[shape=record, label="  ret void"];
	Node0x1ae04b0 -> Node0x1ae0b60;
	Node0x1ae0b60 -> Node0x1ae0c20;
	Node0x1ae0c20 -> Node0x1ae0c90;
	Node0x1ae0c90 -> Node0x1ae0d00;
	Node0x1ae0d00 -> Node0x1ae0da0;
	Node0x1ae0da0 -> Node0x1ae0e40;
	Node0x1ae0e40 -> Node0x1ae0eb0;
	Node0x1ae0eb0 -> Node0x1ae0f20;
	Node0x1ae0f20 -> Node0x1ae0f90;
	Node0x1ae0f90 -> Node0x1ae1000;
	Node0x1ae1000 -> Node0x1ae1070;
	Node0x1ae1070 -> Node0x1ae10e0;
	Node0x1ae10e0 -> Node0x1ae1150;
	Node0x1ae1150 -> Node0x1ae11c0;
	Node0x1ae11c0 -> Node0x1ae1230;
	Node0x1ae1230 -> Node0x1ae12a0;
	Node0x1ae12a0 -> Node0x1ae1310;
	Node0x1ae1310 -> Node0x1ae1380;
	Node0x1ae1380 -> Node0x1ae13f0;
	Node0x1ae13f0 -> Node0x1ae1460;
	Node0x1ae1460 -> Node0x1a81268;
	Node0x1a81268 -> Node0x1ae1900;
	Node0x1ae1900 -> Node0x1ae1950;
edge [color=red]
	Node0x1ae04b0 -> Node0x1ae0b60;
	Node0x1ae0c90 -> Node0x1ae0d00;
	Node0x1ae0d00 -> Node0x1ae0da0;
	Node0x1ae0da0 -> Node0x1ae0e40;
	Node0x1ae04b0 -> Node0x1ae0eb0;
	Node0x1ae0eb0 -> Node0x1ae0f20;
	Node0x1ae0f90 -> Node0x1ae1000;
	Node0x1ae0c20 -> Node0x1ae1070;
	Node0x1ae10e0 -> Node0x1ae1150;
	Node0x1ae0c90 -> Node0x1ae1150;
	Node0x1ae1150 -> Node0x1ae11c0;
	Node0x1ae11c0 -> Node0x1ae1230;
	Node0x1ae1000 -> Node0x1ae1230;
	Node0x1ae1230 -> Node0x1ae12a0;
	Node0x1ae0da0 -> Node0x1ae12a0;
	Node0x1ae12a0 -> Node0x1ae1310;
	Node0x1ae1070 -> Node0x1ae1310;
	Node0x1ae1310 -> Node0x1ae1380;
	Node0x1ae0e40 -> Node0x1ae1380;
	Node0x1ae1380 -> Node0x1ae13f0;
	Node0x1ae0f20 -> Node0x1ae13f0;
	Node0x1ae13f0 -> Node0x1ae1460;
	Node0x1ae0b60 -> Node0x1ae1460;
	Node0x1ae1460 -> Node0x1a81268;
	Node0x1a81268 -> Node0x1ae1900;
}
