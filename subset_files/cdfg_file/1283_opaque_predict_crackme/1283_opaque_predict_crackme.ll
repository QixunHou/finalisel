; ModuleID = '../.././c_source_file/1283_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1283_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = xor i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %4, %6
  %8 = shl i32 %7, 1
  %9 = and i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %2
  %12 = and i32 %2, %1
  %13 = and i32 %12, %0
  %14 = xor i32 %0, -1
  %15 = xor i32 %2, %1
  %16 = and i32 %15, %14
  %17 = xor i32 %13, -1
  %18 = xor i32 %16, %17
  %19 = xor i32 %1, -1
  %20 = and i32 %19, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %2
  %23 = xor i32 %2, %0
  %24 = and i32 %23, %21
  %25 = shl i32 %24, 1
  %26 = or i32 %4, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %27, %1
  %29 = or i32 %4, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = shl i32 %32, 1
  %34 = and i32 %26, %1
  %35 = xor i32 %15, -1
  %36 = or i32 %35, %14
  %37 = xor i32 %12, -1
  %38 = xor i32 %29, %9
  %39 = and i32 %23, %6
  %40 = and i32 %4, %1
  %41 = xor i32 %40, %0
  %42 = shl i32 %41, 1
  %43 = or i32 %15, %9
  %44 = and i32 %4, %0
  %45 = xor i32 %44, -1
  %46 = and i32 %45, %19
  %47 = xor i32 %31, %1
  %48 = or i32 %5, %2
  %49 = or i32 %15, %14
  %50 = xor i32 %49, -1
  %51 = or i32 %5, %32
  %52 = xor i32 %23, -1
  %53 = and i32 %52, %19
  %54 = shl i32 %53, 1
  %55 = or i32 %44, %19
  %56 = and i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = xor i32 %57, %1
  %59 = xor i32 %56, %1
  %60 = or i32 %23, %1
  %61 = shl i32 %60, 1
  %62 = and i32 %26, %5
  %63 = xor i32 %40, -1
  %64 = and i32 %63, %14
  %65 = xor i32 %20, %2
  %66 = or i32 %23, %6
  %67 = and i32 %52, %6
  %68 = or i32 %1, %0
  %69 = xor i32 %68, -1
  %70 = or i32 %2, %1
  %71 = or i32 %70, %14
  %72 = or i32 %56, %1
  %73 = and i32 %6, %2
  %74 = xor i32 %12, %0
  %75 = xor i32 %26, %1
  %76 = and i32 %19, %2
  %77 = and i32 %76, %0
  %78 = xor i32 %15, %0
  %79 = xor i32 %78, -1
  %80 = xor i32 %77, %79
  %81 = or i32 %30, %14
  %82 = or i32 %19, %2
  %83 = and i32 %82, %14
  %84 = xor i32 %83, -1
  %85 = xor i32 %77, %84
  %86 = and i32 %15, %10
  %87 = xor i32 %20, %37
  %88 = shl i32 %87, 1
  %89 = and i32 %12, %14
  %90 = and i32 %70, %0
  %91 = or i32 %89, %90
  %92 = xor i32 %32, %1
  %93 = and i32 %15, %0
  %94 = xor i32 %93, -1
  %95 = xor i32 %89, %94
  %96 = or i32 %56, %19
  %97 = or i32 %9, %32
  %98 = shl i32 %97, 1
  %99 = or i32 %77, %83
  %100 = or i32 %15, %69
  %101 = xor i32 %70, %0
  %102 = shl i32 %101, 1
  %103 = or i32 %19, %0
  %104 = xor i32 %103, %2
  %105 = shl i32 %104, 1
  %106 = or i32 %52, %69
  %107 = xor i32 %90, 2147483647
  %108 = xor i32 %107, %89
  %109 = and i32 %68, %52
  %110 = and i32 %45, %6
  %111 = or i32 %89, %93
  %112 = xor i32 %103, -1
  %113 = or i32 %56, %112
  %114 = and i32 %52, %10
  %115 = and i32 %76, %14
  %116 = and i32 %82, %0
  %117 = xor i32 %116, -1
  %118 = xor i32 %115, %117
  %119 = xor i32 %70, -1
  %120 = or i32 %119, %0
  %121 = shl i32 %120, 1
  %122 = or i32 %23, %69
  %123 = shl i32 %122, 1
  %124 = xor i32 %69, %2
  %125 = and i32 %103, %52
  %126 = or i32 %5, %52
  %127 = or i32 %56, %6
  %128 = and i32 %5, %45
  %129 = xor i32 %44, %37
  %130 = shl i32 %129, 1
  %131 = or i32 %5, %27
  %132 = xor i32 %70, %9
  %133 = and i32 %10, %2
  %134 = and i32 %103, %4
  %135 = and i32 %31, %1
  %136 = or i32 %112, %2
  %137 = or i32 %6, %2
  %138 = and i32 %57, %1
  %139 = shl i32 %138, 1
  %140 = or i32 %20, %52
  %141 = or i32 %52, %1
  %142 = shl i32 %141, 1
  %143 = or i32 %115, %116
  %144 = add i32 %9, 1
  %145 = or i32 %13, %16
  %146 = and i32 %35, %14
  %147 = or i32 %4, %6
  %148 = shl i32 %147, 2
  %149 = or i32 %27, %19
  %150 = xor i32 %56, %63
  %151 = and i32 %23, %68
  %152 = or i32 %35, %112
  %153 = shl i32 %152, 1
  %154 = xor i32 %68, %2
  %155 = xor i32 %56, %68
  %156 = and i32 %37, %0
  %157 = and i32 %52, %21
  %158 = or i32 %52, %112
  %159 = add i32 %5, 1
  %160 = or i32 %37, %14
  %161 = or i32 %119, %14
  %162 = xor i32 %30, %0
  %163 = or i32 %63, %0
  %164 = or i32 %77, %78
  %165 = add i32 %70, 1
  %166 = or i32 %9, %2
  %167 = or i32 %23, %9
  %168 = and i32 %35, %21
  %169 = xor i32 %119, %0
  %170 = xor i32 %82, %0
  %171 = or i32 %77, %170
  %172 = shl i32 %171, 1
  %173 = and i32 %15, %68
  %174 = and i32 %68, %2
  %175 = shl i32 %174, 1
  %176 = xor i32 %56, %70
  %177 = and i32 %52, %1
  %178 = or i32 %44, %12
  %179 = shl i32 %178, 1
  %180 = xor i32 %115, %49
  %181 = or i32 %15, %0
  %182 = or i32 %23, %19
  %183 = and i32 %5, %52
  %184 = or i32 %32, %19
  %185 = and i32 %5, %57
  %186 = and i32 %57, %6
  %187 = or i32 %63, %14
  %188 = and i32 %29, %14
  %189 = shl i32 %188, 1
  %190 = or i32 %13, %79
  %191 = xor i32 %21, %2
  %192 = or i32 %23, %20
  %193 = xor i32 %13, %120
  %194 = and i32 %4, %21
  %195 = and i32 %68, %35
  %196 = and i32 %31, %19
  %197 = or i32 %27, %6
  %198 = shl i32 %197, 1
  %199 = and i32 %31, %6
  %200 = and i32 %5, %4
  %201 = or i32 %56, %40
  %202 = or i32 %15, %20
  %203 = and i32 %103, %35
  %204 = xor i32 %112, %2
  %205 = shl i32 %204, 1
  %206 = or i32 %32, %1
  %207 = or i32 %40, %0
  %208 = and i32 %5, %2
  %209 = or i32 %56, %119
  %210 = or i32 %56, %69
  %211 = xor i32 %56, %103
  %212 = or i32 %29, %14
  %213 = or i32 %40, %20
  %214 = or i32 %44, %1
  %215 = xor i32 %49, 1073741823
  %216 = or i32 %215, %115
  %217 = shl i32 %216, 2
  %218 = and i32 %23, %1
  %219 = and i32 %15, %103
  %220 = xor i32 %35, %0
  %221 = shl i32 %220, 1
  %222 = or i32 %40, %14
  %223 = shl i32 %222, 2
  %224 = and i32 %68, %4
  %225 = or i32 %5, %4
  %226 = and i32 %23, %103
  %227 = or i32 %20, %2
  %228 = xor i32 %45, %1
  %229 = xor i32 %101, %17
  %230 = or i32 %70, %0
  %231 = or i32 %9, %35
  %232 = or i32 %30, %0
  %233 = add i32 %56, 1
  %234 = or i32 %29, %0
  %235 = or i32 %44, %5
  %236 = and i32 %31, %5
  %237 = and i32 %119, %14
  %238 = mul i32 %237, 18
  %239 = and i32 %40, %14
  %240 = mul i32 %239, 15
  %241 = and i32 %119, %0
  %242 = and i32 %40, %0
  %243 = and i32 %30, %14
  %244 = mul i32 %89, 9
  %245 = and i32 %30, %0
  %246 = mul i32 %245, -11
  %247 = shl i32 %13, 4
  %248 = add i32 %12, %103
  %249 = add i32 %248, %242
  %250 = add i32 %249, %236
  %251 = add i32 %250, %235
  %252 = add i32 %251, %234
  %253 = add i32 %252, %231
  %254 = add i32 %253, %93
  %255 = add i32 %254, %207
  %256 = add i32 %255, %155
  %257 = add i32 %256, %151
  %258 = add i32 %257, %128
  %259 = add i32 %258, %100
  %260 = add i32 %259, %92
  %261 = add i32 %260, %64
  %262 = add i32 %261, %108
  %263 = shl i32 %262, 1
  %264 = sub i32 %210, %243
  %265 = add i32 %264, %90
  %266 = sub i32 %265, %150
  %267 = mul i32 %266, 5
  %268 = add i32 %31, %15
  %269 = sub i32 %268, %47
  %270 = add i32 %269, %81
  %271 = mul i32 %270, 3
  %272 = sub i32 -5, %68
  %273 = sub i32 %272, %68
  %274 = add i32 %273, %144
  %275 = add i32 %274, %159
  %276 = add i32 %275, %11
  %277 = add i32 %276, %22
  %278 = add i32 %277, %30
  %279 = add i32 %278, %37
  %280 = sub i32 %279, %48
  %281 = sub i32 %280, %65
  %282 = sub i32 %281, %73
  %283 = add i32 %282, %124
  %284 = add i32 %283, %44
  %285 = add i32 %284, %133
  %286 = sub i32 %285, %134
  %287 = add i32 %286, %136
  %288 = sub i32 %287, %137
  %289 = sub i32 %288, %154
  %290 = sub i32 %289, %29
  %291 = add i32 %290, %165
  %292 = add i32 %291, %166
  %293 = sub i32 %292, %191
  %294 = add i32 %293, %194
  %295 = add i32 %294, %200
  %296 = sub i32 %295, %208
  %297 = add i32 %296, %26
  %298 = sub i32 %297, %224
  %299 = add i32 %298, %225
  %300 = sub i32 %299, %227
  %301 = add i32 %300, %233
  %302 = add i32 %301, %28
  %303 = sub i32 %302, %33
  %304 = add i32 %303, %34
  %305 = add i32 %304, %36
  %306 = add i32 %305, %38
  %307 = sub i32 %306, %39
  %308 = add i32 %307, %43
  %309 = sub i32 %308, %46
  %310 = add i32 %309, %50
  %311 = add i32 %310, %51
  %312 = sub i32 %311, %55
  %313 = add i32 %312, %58
  %314 = sub i32 %313, %59
  %315 = sub i32 %314, %62
  %316 = add i32 %315, %66
  %317 = sub i32 %316, %67
  %318 = sub i32 %317, %71
  %319 = add i32 %318, %72
  %320 = sub i32 %319, %74
  %321 = sub i32 %320, %75
  %322 = add i32 %321, %86
  %323 = add i32 %322, %96
  %324 = sub i32 %323, %105
  %325 = add i32 %324, %106
  %326 = sub i32 %325, %109
  %327 = add i32 %326, %110
  %328 = sub i32 %327, %113
  %329 = sub i32 %328, %114
  %330 = add i32 %329, %125
  %331 = sub i32 %330, %126
  %332 = add i32 %331, %127
  %333 = sub i32 %332, %131
  %334 = sub i32 %333, %132
  %335 = sub i32 %334, %135
  %336 = sub i32 %335, %140
  %337 = sub i32 %336, %146
  %338 = sub i32 %337, %148
  %339 = add i32 %338, %149
  %340 = add i32 %339, %16
  %341 = add i32 %340, %156
  %342 = sub i32 %341, %157
  %343 = sub i32 %342, %158
  %344 = sub i32 %343, %160
  %345 = sub i32 %344, %161
  %346 = add i32 %345, %162
  %347 = add i32 %346, %163
  %348 = sub i32 %347, %167
  %349 = sub i32 %348, %168
  %350 = sub i32 %349, %169
  %351 = sub i32 %350, %173
  %352 = sub i32 %351, %175
  %353 = sub i32 %352, %176
  %354 = sub i32 %353, %177
  %355 = add i32 %354, %181
  %356 = add i32 %355, %182
  %357 = sub i32 %356, %183
  %358 = sub i32 %357, %184
  %359 = add i32 %358, %185
  %360 = add i32 %359, %186
  %361 = sub i32 %360, %187
  %362 = add i32 %361, %192
  %363 = add i32 %362, %195
  %364 = sub i32 %363, %196
  %365 = sub i32 %364, %199
  %366 = sub i32 %365, %201
  %367 = add i32 %366, %202
  %368 = add i32 %367, %203
  %369 = sub i32 %368, %205
  %370 = add i32 %369, %206
  %371 = sub i32 %370, %209
  %372 = add i32 %371, %211
  %373 = add i32 %372, %212
  %374 = sub i32 %373, %213
  %375 = add i32 %374, %214
  %376 = sub i32 %375, %218
  %377 = add i32 %376, %219
  %378 = sub i32 %377, %226
  %379 = sub i32 %378, %228
  %380 = add i32 %379, %230
  %381 = sub i32 %380, %232
  %382 = sub i32 %381, %241
  %383 = sub i32 %382, %18
  %384 = sub i32 %383, %25
  %385 = sub i32 %384, %42
  %386 = sub i32 %385, %54
  %387 = sub i32 %386, %61
  %388 = add i32 %387, %80
  %389 = sub i32 %388, %85
  %390 = sub i32 %389, %88
  %391 = add i32 %390, %91
  %392 = add i32 %391, %95
  %393 = sub i32 %392, %98
  %394 = add i32 %393, %99
  %395 = sub i32 %394, %102
  %396 = add i32 %395, %111
  %397 = add i32 %396, %118
  %398 = sub i32 %397, %121
  %399 = sub i32 %398, %123
  %400 = sub i32 %399, %130
  %401 = sub i32 %400, %139
  %402 = sub i32 %401, %142
  %403 = add i32 %402, %143
  %404 = add i32 %403, %145
  %405 = sub i32 %404, %153
  %406 = add i32 %405, %164
  %407 = sub i32 %406, %179
  %408 = sub i32 %407, %180
  %409 = sub i32 %408, %189
  %410 = add i32 %409, %190
  %411 = sub i32 %410, %193
  %412 = sub i32 %411, %198
  %413 = sub i32 %412, %221
  %414 = sub i32 %413, %223
  %415 = sub i32 %414, %229
  %416 = add i32 %415, %238
  %417 = add i32 %416, %240
  %418 = add i32 %417, %244
  %419 = add i32 %418, %246
  %420 = sub i32 %419, %247
  %421 = sub i32 %420, %172
  %422 = add i32 %421, %217
  %423 = add i32 %422, %267
  %424 = add i32 %423, %271
  %425 = add i32 %424, %263
  %426 = icmp eq i32 %8, %425
  %427 = select i1 %426, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %428 = tail call i32 @puts(i8* nonnull dereferenceable(1) %427)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
