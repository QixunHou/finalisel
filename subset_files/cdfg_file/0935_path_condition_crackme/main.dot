digraph "DFG for'main' function" {
	Node0x23b1f48[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x23b1fc8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x23b2058[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x23b20b8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x23b2538[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x23b6048[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x23b6128[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x23b61e8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x23b6298[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x23b64f8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x23b65b8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x23b7528[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x23b7b98[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x23b7c90[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x23b7e98[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x23b7ff8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x23b8108[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x23b81c8[shape=record, label="  ret i32 0"];
	Node0x23b1f48 -> Node0x23b1fc8;
	Node0x23b1fc8 -> Node0x23b2058;
	Node0x23b2058 -> Node0x23b20b8;
	Node0x23b20b8 -> Node0x23b2538;
	Node0x23b2538 -> Node0x23b6048;
	Node0x23b6048 -> Node0x23b6128;
	Node0x23b6128 -> Node0x23b61e8;
	Node0x23b61e8 -> Node0x23b6298;
	Node0x23b6298 -> Node0x23b64f8;
	Node0x23b64f8 -> Node0x23b65b8;
	Node0x23b65b8 -> Node0x23b7528;
	Node0x23b7528 -> Node0x23b7b98;
	Node0x23b7b98 -> Node0x23b7c90;
	Node0x23b7c90 -> Node0x23b7e98;
	Node0x23b7e98 -> Node0x23b7ff8;
	Node0x23b7ff8 -> Node0x23b8108;
	Node0x23b8108 -> Node0x23b81c8;
edge [color=red]
	Node0x23b1f48 -> Node0x23b20b8;
	Node0x23b20b8 -> Node0x23b2538;
	Node0x23b1fc8 -> Node0x23b6048;
	Node0x23b6048 -> Node0x23b6128;
	Node0x23b2058 -> Node0x23b61e8;
	Node0x23b61e8 -> Node0x23b6298;
	Node0x23b1f48 -> Node0x23b64f8;
	Node0x23b1fc8 -> Node0x23b64f8;
	Node0x23b2058 -> Node0x23b64f8;
	Node0x23b1f48 -> Node0x23b65b8;
	Node0x23b1fc8 -> Node0x23b7528;
	Node0x23b2058 -> Node0x23b7b98;
	Node0x23b65b8 -> Node0x23b7c90;
	Node0x23b7528 -> Node0x23b7c90;
	Node0x23b7b98 -> Node0x23b7c90;
	Node0x23b61e8 -> Node0x23b7e98;
	Node0x23b6048 -> Node0x23b7ff8;
	Node0x23b20b8 -> Node0x23b8108;
}
