; ModuleID = '../.././c_source_file/1983_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1983_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = sub i32 %6, %4
  %8 = and i32 %1, %0
  %9 = xor i32 %2, -1
  %10 = or i32 %9, %0
  %11 = xor i32 %10, %8
  %12 = add i32 %7, %11
  %13 = or i32 %2, %1
  %14 = xor i32 %13, -1
  %15 = or i32 %8, %14
  %16 = add i32 %12, %15
  %17 = xor i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %18, -2
  %20 = xor i32 %4, -1
  %21 = and i32 %20, %3
  %22 = xor i32 %21, -1
  %23 = and i32 %4, %3
  %24 = xor i32 %23, -1
  %25 = or i32 %4, %3
  %26 = or i32 %20, %3
  %27 = xor i32 %25, -1
  %28 = mul i32 %27, -6
  %29 = shl i32 %26, 2
  %30 = xor i32 %29, -4
  %31 = shl i32 %23, 3
  %32 = and i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = xor i32 %33, %0
  %35 = xor i32 %0, -1
  %36 = xor i32 %1, -1
  %37 = and i32 %36, %2
  %38 = and i32 %37, %35
  %39 = or i32 %36, %2
  %40 = and i32 %39, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %38, %41
  %43 = and i32 %9, %0
  %44 = or i32 %43, %32
  %45 = and i32 %32, %0
  %46 = xor i32 %2, %1
  %47 = xor i32 %46, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %45, %48
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %2, %0
  %53 = or i32 %52, %51
  %54 = or i32 %2, %0
  %55 = xor i32 %54, -1
  %56 = xor i32 %1, %0
  %57 = or i32 %56, %55
  %58 = or i32 %36, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %59, %2
  %61 = xor i32 %52, -1
  %62 = and i32 %61, %1
  %63 = xor i32 %8, -1
  %64 = xor i32 %46, -1
  %65 = and i32 %64, %63
  %66 = and i32 %37, %0
  %67 = or i32 %46, %0
  %68 = xor i32 %66, %67
  %69 = or i32 %46, %59
  %70 = and i32 %32, %35
  %71 = and i32 %13, %0
  %72 = or i32 %70, %71
  %73 = xor i32 %43, -1
  %74 = and i32 %73, %36
  %75 = or i32 %52, %56
  %76 = and i32 %36, %0
  %77 = or i32 %76, %61
  %78 = and i32 %9, %1
  %79 = xor i32 %78, -1
  %80 = and i32 %64, %0
  %81 = xor i32 %64, %0
  %82 = or i32 %76, %9
  %83 = or i32 %9, %1
  %84 = shl i32 %32, 1
  %85 = or i32 %64, %35
  %86 = or i32 %8, %2
  %87 = and i32 %52, %50
  %88 = and i32 %33, %0
  %89 = or i32 %8, %64
  %90 = and i32 %46, %0
  %91 = or i32 %56, %9
  %92 = or i32 %13, %0
  %93 = and i32 %58, %61
  %94 = xor i32 %66, %48
  %95 = xor i32 %39, %0
  %96 = xor i32 %66, -1
  %97 = xor i32 %95, %96
  %98 = or i32 %55, %1
  %99 = xor i32 %83, -1
  %100 = xor i32 %99, %0
  %101 = shl i32 %100, 1
  %102 = or i32 %61, %36
  %103 = xor i32 %76, %33
  %104 = xor i32 %13, %0
  %105 = xor i32 %104, -1
  %106 = xor i32 %45, %105
  %107 = xor i32 %10, -1
  %108 = and i32 %46, %35
  %109 = or i32 %8, %61
  %110 = and i32 %73, %1
  %111 = shl i32 %110, 1
  %112 = or i32 %43, %36
  %113 = shl i32 %14, 2
  %114 = and i32 %2, %0
  %115 = or i32 %114, %59
  %116 = or i32 %55, %36
  %117 = or i32 %61, %59
  %118 = and i32 %83, %0
  %119 = and i32 %83, %35
  %120 = or i32 %38, %40
  %121 = xor i32 %56, -1
  %122 = or i32 %52, %121
  %123 = or i32 %79, %0
  %124 = or i32 %70, %90
  %125 = and i32 %61, %36
  %126 = and i32 %39, %35
  %127 = xor i32 %126, %96
  %128 = or i32 %64, %0
  %129 = and i32 %13, %35
  %130 = xor i32 %90, -1
  %131 = xor i32 %70, %130
  %132 = or i32 %9, %51
  %133 = or i32 %46, %35
  %134 = xor i32 %38, %133
  %135 = xor i32 %114, -1
  %136 = xor i32 %135, %1
  %137 = or i32 %55, %121
  %138 = and i32 %63, %2
  %139 = and i32 %54, %56
  %140 = or i32 %14, %35
  %141 = or i32 %52, %8
  %142 = shl i32 %141, 1
  %143 = xor i32 %79, %0
  %144 = xor i32 %78, %0
  %145 = shl i32 %144, 1
  %146 = or i32 %8, %55
  %147 = or i32 %114, %78
  %148 = or i32 %114, %1
  %149 = xor i32 %114, %1
  %150 = xor i32 %13, %8
  %151 = or i32 %32, %35
  %152 = xor i32 %73, %1
  %153 = shl i32 %152, 1
  %154 = or i32 %52, %1
  %155 = or i32 %32, %76
  %156 = xor i32 %63, %2
  %157 = or i32 %114, %121
  %158 = xor i32 %67, -1
  %159 = or i32 %66, %158
  %160 = or i32 %66, %95
  %161 = and i32 %10, %1
  %162 = and i32 %52, %63
  %163 = and i32 %58, %2
  %164 = shl i32 %163, 1
  %165 = and i32 %46, %63
  %166 = xor i32 %76, -1
  %167 = and i32 %61, %166
  %168 = xor i32 %32, %0
  %169 = or i32 %78, %35
  %170 = and i32 %50, %61
  %171 = and i32 %54, %1
  %172 = or i32 %13, %35
  %173 = and i32 %10, %36
  %174 = and i32 %52, %1
  %175 = shl i32 %174, 2
  %176 = and i32 %9, %166
  %177 = and i32 %9, %63
  %178 = shl i32 %133, 1
  %179 = and i32 %64, %35
  %180 = xor i32 %133, -1
  %181 = or i32 %38, %180
  %182 = xor i32 %83, %0
  %183 = or i32 %61, %121
  %184 = shl i32 %183, 1
  %185 = and i32 %10, %56
  %186 = and i32 %64, %166
  %187 = shl i32 %186, 1
  %188 = or i32 %52, %76
  %189 = or i32 %45, %104
  %190 = xor i32 %59, %2
  %191 = and i32 %52, %121
  %192 = xor i32 %50, %2
  %193 = or i32 %99, %0
  %194 = or i32 %56, %107
  %195 = and i32 %50, %9
  %196 = and i32 %135, %121
  %197 = shl i32 %56, 1
  %198 = or i32 %52, %59
  %199 = xor i32 %43, %1
  %200 = shl i32 %199, 1
  %201 = or i32 %33, %0
  %202 = or i32 %61, %51
  %203 = xor i32 %76, %79
  %204 = and i32 %121, %2
  %205 = and i32 %54, %36
  %206 = xor i32 %76, %2
  %207 = or i32 %78, %0
  %208 = shl i32 %207, 1
  %209 = and i32 %33, %35
  %210 = or i32 %66, %47
  %211 = and i32 %73, %121
  %212 = or i32 %51, %2
  %213 = xor i32 %114, %79
  %214 = and i32 %56, %2
  %215 = shl i32 %214, 1
  %216 = or i32 %64, %51
  %217 = or i32 %66, %126
  %218 = xor i32 %114, %58
  %219 = or i32 %78, %76
  %220 = or i32 %79, %35
  %221 = or i32 %114, %56
  %222 = or i32 %8, %9
  %223 = xor i32 %114, %50
  %224 = add i32 %58, 1
  %225 = xor i32 %55, %1
  %226 = xor i32 %58, %2
  %227 = and i32 %9, %121
  %228 = xor i32 %14, %0
  %229 = add i32 %83, 1
  %230 = or i32 %32, %0
  %231 = add i32 %2, 1
  %232 = and i32 %58, %64
  %233 = or i32 %43, %121
  %234 = and i32 %56, %9
  %235 = or i32 %56, %2
  %236 = xor i32 %114, %13
  %237 = or i32 %76, %2
  %238 = and i32 %58, %9
  %239 = xor i32 %43, %83
  %240 = or i32 %99, %35
  %241 = or i32 %8, %107
  %242 = and i32 %61, %121
  %243 = shl i32 %242, 1
  %244 = or i32 %83, %35
  %245 = or i32 %45, %129
  %246 = or i32 %61, %1
  %247 = shl i32 %246, 1
  %248 = xor i32 %108, 2147483647
  %249 = xor i32 %248, %45
  %250 = shl i32 %249, 1
  %251 = and i32 %56, %135
  %252 = xor i32 %54, %8
  %253 = add i32 %52, 1
  %254 = and i32 %166, %2
  %255 = add i32 %114, 1
  %256 = and i32 %10, %121
  %257 = and i32 %14, %35
  %258 = and i32 %78, %35
  %259 = mul i32 %258, -11
  %260 = and i32 %14, %0
  %261 = and i32 %78, %0
  %262 = and i32 %99, %35
  %263 = mul i32 %262, -12
  %264 = mul i32 %70, -9
  %265 = and i32 %99, %0
  %266 = mul i32 %265, -13
  %267 = add i32 %235, %51
  %268 = add i32 %267, %212
  %269 = add i32 %268, %252
  %270 = add i32 %269, %219
  %271 = add i32 %270, %196
  %272 = add i32 %271, %185
  %273 = add i32 %272, %182
  %274 = add i32 %273, %67
  %275 = add i32 %274, %108
  %276 = add i32 %275, %92
  %277 = add i32 %276, %89
  %278 = add i32 %277, %57
  %279 = add i32 %278, %120
  %280 = add i32 %279, %134
  %281 = add i32 %280, %72
  %282 = add i32 %281, %26
  %283 = shl i32 %282, 1
  %284 = add i32 %261, %13
  %285 = sub i32 %45, %284
  %286 = add i32 %285, %65
  %287 = add i32 %286, %44
  %288 = mul i32 %287, 3
  %289 = add i32 %123, %52
  %290 = add i32 %289, %146
  %291 = add i32 %290, %90
  %292 = shl i32 %291, 2
  %293 = sub i32 %239, %257
  %294 = add i32 %293, %165
  %295 = mul i32 %294, 5
  %296 = add i32 %21, %260
  %297 = mul i32 %296, -7
  %298 = add i32 %1, -2
  %299 = add i32 %298, %63
  %300 = sub i32 %299, %50
  %301 = add i32 %300, %224
  %302 = add i32 %301, %231
  %303 = add i32 %302, %58
  %304 = add i32 %303, %3
  %305 = sub i32 %304, %60
  %306 = add i32 %305, %79
  %307 = add i32 %306, %82
  %308 = add i32 %307, %83
  %309 = sub i32 %308, %86
  %310 = add i32 %309, %91
  %311 = add i32 %310, %107
  %312 = add i32 %311, %64
  %313 = sub i32 %312, %43
  %314 = sub i32 %313, %46
  %315 = add i32 %314, %132
  %316 = sub i32 %315, %138
  %317 = sub i32 %316, %114
  %318 = sub i32 %317, %156
  %319 = add i32 %318, %176
  %320 = sub i32 %319, %177
  %321 = add i32 %320, %190
  %322 = add i32 %321, %192
  %323 = sub i32 %322, %195
  %324 = sub i32 %323, %197
  %325 = sub i32 %324, %204
  %326 = sub i32 %325, %206
  %327 = sub i32 %326, %222
  %328 = sub i32 %327, %226
  %329 = add i32 %328, %227
  %330 = add i32 %329, %229
  %331 = add i32 %330, %234
  %332 = add i32 %331, %237
  %333 = sub i32 %332, %238
  %334 = add i32 %333, %253
  %335 = add i32 %334, %254
  %336 = add i32 %335, %255
  %337 = add i32 %336, %20
  %338 = sub i32 %337, %34
  %339 = add i32 %338, %53
  %340 = add i32 %339, %62
  %341 = add i32 %340, %69
  %342 = add i32 %341, %74
  %343 = add i32 %342, %75
  %344 = add i32 %343, %77
  %345 = sub i32 %344, %80
  %346 = add i32 %345, %81
  %347 = sub i32 %346, %84
  %348 = add i32 %347, %85
  %349 = add i32 %348, %87
  %350 = add i32 %349, %88
  %351 = sub i32 %350, %93
  %352 = add i32 %351, %98
  %353 = add i32 %352, %102
  %354 = sub i32 %353, %103
  %355 = sub i32 %354, %109
  %356 = sub i32 %355, %112
  %357 = sub i32 %356, %113
  %358 = add i32 %357, %115
  %359 = sub i32 %358, %116
  %360 = add i32 %359, %117
  %361 = add i32 %360, %118
  %362 = add i32 %361, %119
  %363 = sub i32 %362, %122
  %364 = add i32 %363, %71
  %365 = sub i32 %364, %125
  %366 = add i32 %365, %128
  %367 = add i32 %366, %129
  %368 = sub i32 %367, %136
  %369 = sub i32 %368, %137
  %370 = sub i32 %369, %139
  %371 = sub i32 %370, %140
  %372 = sub i32 %371, %143
  %373 = add i32 %372, %147
  %374 = sub i32 %373, %148
  %375 = add i32 %374, %149
  %376 = add i32 %375, %150
  %377 = add i32 %376, %151
  %378 = sub i32 %377, %154
  %379 = sub i32 %378, %155
  %380 = sub i32 %379, %157
  %381 = add i32 %380, %161
  %382 = add i32 %381, %162
  %383 = sub i32 %382, %164
  %384 = add i32 %383, %167
  %385 = sub i32 %384, %168
  %386 = sub i32 %385, %169
  %387 = sub i32 %386, %170
  %388 = add i32 %387, %171
  %389 = add i32 %388, %172
  %390 = add i32 %389, %173
  %391 = sub i32 %390, %179
  %392 = sub i32 %391, %188
  %393 = add i32 %392, %191
  %394 = add i32 %393, %193
  %395 = sub i32 %394, %194
  %396 = sub i32 %395, %198
  %397 = sub i32 %396, %201
  %398 = sub i32 %397, %202
  %399 = sub i32 %398, %203
  %400 = sub i32 %399, %205
  %401 = sub i32 %400, %209
  %402 = sub i32 %401, %211
  %403 = add i32 %402, %213
  %404 = sub i32 %403, %215
  %405 = sub i32 %404, %216
  %406 = sub i32 %405, %218
  %407 = sub i32 %406, %220
  %408 = sub i32 %407, %221
  %409 = sub i32 %408, %223
  %410 = sub i32 %409, %225
  %411 = sub i32 %410, %228
  %412 = sub i32 %411, %230
  %413 = add i32 %412, %232
  %414 = sub i32 %413, %233
  %415 = sub i32 %414, %236
  %416 = add i32 %415, %240
  %417 = add i32 %416, %241
  %418 = add i32 %417, %244
  %419 = add i32 %418, %47
  %420 = add i32 %419, %251
  %421 = sub i32 %420, %104
  %422 = sub i32 %421, %256
  %423 = add i32 %422, %22
  %424 = add i32 %423, %24
  %425 = add i32 %424, %25
  %426 = add i32 %425, %17
  %427 = sub i32 %426, %42
  %428 = sub i32 %427, %49
  %429 = sub i32 %428, %68
  %430 = sub i32 %429, %94
  %431 = sub i32 %430, %97
  %432 = sub i32 %431, %101
  %433 = add i32 %432, %106
  %434 = sub i32 %433, %111
  %435 = sub i32 %434, %124
  %436 = sub i32 %435, %127
  %437 = add i32 %436, %131
  %438 = sub i32 %437, %142
  %439 = sub i32 %438, %145
  %440 = sub i32 %439, %153
  %441 = sub i32 %440, %159
  %442 = add i32 %441, %160
  %443 = sub i32 %442, %175
  %444 = sub i32 %443, %178
  %445 = add i32 %444, %181
  %446 = sub i32 %445, %184
  %447 = sub i32 %446, %187
  %448 = sub i32 %447, %189
  %449 = sub i32 %448, %200
  %450 = sub i32 %449, %208
  %451 = add i32 %450, %210
  %452 = add i32 %451, %217
  %453 = sub i32 %452, %243
  %454 = sub i32 %453, %245
  %455 = sub i32 %454, %247
  %456 = add i32 %455, %259
  %457 = add i32 %456, %263
  %458 = add i32 %457, %264
  %459 = add i32 %458, %266
  %460 = add i32 %459, %28
  %461 = sub i32 %460, %31
  %462 = add i32 %461, %19
  %463 = sub i32 %462, %30
  %464 = sub i32 %463, %250
  %465 = add i32 %464, %295
  %466 = add i32 %465, %297
  %467 = add i32 %466, %292
  %468 = add i32 %467, %288
  %469 = add i32 %468, %283
  %470 = icmp eq i32 %16, %469
  %471 = select i1 %470, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %472 = tail call i32 @puts(i8* nonnull dereferenceable(1) %471)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
