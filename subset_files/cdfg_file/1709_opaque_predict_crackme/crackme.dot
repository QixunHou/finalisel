digraph "DFG for'crackme' function" {
	Node0xbaea90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xbaeb00[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xbaebc0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xbaec30[shape=record, label="  %6 = and i32 %3, %0"];
	Node0xbaeca0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xbaed10[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xbaed80[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0xbaedf0[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0xbaee60[shape=record, label="  %11 = mul i32 %10, -3"];
	Node0xbaef00[shape=record, label="  %12 = shl i32 %4, 1"];
	Node0xbaefa0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xbaf010[shape=record, label="  %14 = sub i32 -2, %1"];
	Node0xbaf080[shape=record, label="  %15 = sub i32 %14, %5"];
	Node0xbaf0f0[shape=record, label="  %16 = add i32 %15, %7"];
	Node0xbaf160[shape=record, label="  %17 = add i32 %16, %9"];
	Node0xbaf1d0[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0xbaf240[shape=record, label="  %19 = add i32 %18, %11"];
	Node0xbaf2b0[shape=record, label="  %20 = sub i32 %19, %13"];
	Node0xbaf320[shape=record, label="  %21 = icmp eq i32 %4, %20"];
	Node0xb4f268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbaf7c0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0xbaf810[shape=record, label="  ret void"];
	Node0xbaea90 -> Node0xbaeb00;
	Node0xbaeb00 -> Node0xbaebc0;
	Node0xbaebc0 -> Node0xbaec30;
	Node0xbaec30 -> Node0xbaeca0;
	Node0xbaeca0 -> Node0xbaed10;
	Node0xbaed10 -> Node0xbaed80;
	Node0xbaed80 -> Node0xbaedf0;
	Node0xbaedf0 -> Node0xbaee60;
	Node0xbaee60 -> Node0xbaef00;
	Node0xbaef00 -> Node0xbaefa0;
	Node0xbaefa0 -> Node0xbaf010;
	Node0xbaf010 -> Node0xbaf080;
	Node0xbaf080 -> Node0xbaf0f0;
	Node0xbaf0f0 -> Node0xbaf160;
	Node0xbaf160 -> Node0xbaf1d0;
	Node0xbaf1d0 -> Node0xbaf240;
	Node0xbaf240 -> Node0xbaf2b0;
	Node0xbaf2b0 -> Node0xbaf320;
	Node0xbaf320 -> Node0xb4f268;
	Node0xb4f268 -> Node0xbaf7c0;
	Node0xbaf7c0 -> Node0xbaf810;
edge [color=red]
	Node0xbaea90 -> Node0xbaeb00;
	Node0xbaea90 -> Node0xbaec30;
	Node0xbaec30 -> Node0xbaeca0;
	Node0xbaed10 -> Node0xbaed80;
	Node0xbaebc0 -> Node0xbaedf0;
	Node0xbaedf0 -> Node0xbaee60;
	Node0xbaeb00 -> Node0xbaef00;
	Node0xbaef00 -> Node0xbaefa0;
	Node0xbaf010 -> Node0xbaf080;
	Node0xbaebc0 -> Node0xbaf080;
	Node0xbaf080 -> Node0xbaf0f0;
	Node0xbaeca0 -> Node0xbaf0f0;
	Node0xbaf0f0 -> Node0xbaf160;
	Node0xbaed80 -> Node0xbaf160;
	Node0xbaf160 -> Node0xbaf1d0;
	Node0xbaec30 -> Node0xbaf1d0;
	Node0xbaf1d0 -> Node0xbaf240;
	Node0xbaee60 -> Node0xbaf240;
	Node0xbaf240 -> Node0xbaf2b0;
	Node0xbaefa0 -> Node0xbaf2b0;
	Node0xbaeb00 -> Node0xbaf320;
	Node0xbaf2b0 -> Node0xbaf320;
	Node0xbaf320 -> Node0xb4f268;
	Node0xb4f268 -> Node0xbaf7c0;
}
