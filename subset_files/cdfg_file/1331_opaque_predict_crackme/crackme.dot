digraph "DFG for'crackme' function" {
	Node0x2446520[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x2446bd0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x2446c90[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2446d00[shape=record, label="  %6 = xor i32 %0, 2147483647"];
	Node0x2446d70[shape=record, label="  %7 = or i32 %6, %1"];
	Node0x2446e10[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x2446e80[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x2446ef0[shape=record, label="  %10 = shl i32 %1, 1"];
	Node0x2446f60[shape=record, label="  %11 = or i32 %5, %0"];
	Node0x2446fd0[shape=record, label="  %12 = xor i32 %9, -1"];
	Node0x2447040[shape=record, label="  %13 = xor i32 %11, -1"];
	Node0x24470b0[shape=record, label="  %14 = add i32 %3, %13"];
	Node0x2447150[shape=record, label="  %15 = mul i32 %14, 6"];
	Node0x24471f0[shape=record, label="  %16 = add i32 %0, 2"];
	Node0x2447260[shape=record, label="  %17 = add i32 %16, %5"];
	Node0x24472d0[shape=record, label="  %18 = add i32 %17, %4"];
	Node0x2447340[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x24473b0[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0x2447420[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x2447490[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x2447500[shape=record, label="  %23 = sub i32 %22, %8"];
	Node0x2447570[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x24475e0[shape=record, label="  %25 = icmp eq i32 %24, %0"];
	Node0x23e7268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2447a80[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x2447ad0[shape=record, label="  ret void"];
	Node0x2446520 -> Node0x2446bd0;
	Node0x2446bd0 -> Node0x2446c90;
	Node0x2446c90 -> Node0x2446d00;
	Node0x2446d00 -> Node0x2446d70;
	Node0x2446d70 -> Node0x2446e10;
	Node0x2446e10 -> Node0x2446e80;
	Node0x2446e80 -> Node0x2446ef0;
	Node0x2446ef0 -> Node0x2446f60;
	Node0x2446f60 -> Node0x2446fd0;
	Node0x2446fd0 -> Node0x2447040;
	Node0x2447040 -> Node0x24470b0;
	Node0x24470b0 -> Node0x2447150;
	Node0x2447150 -> Node0x24471f0;
	Node0x24471f0 -> Node0x2447260;
	Node0x2447260 -> Node0x24472d0;
	Node0x24472d0 -> Node0x2447340;
	Node0x2447340 -> Node0x24473b0;
	Node0x24473b0 -> Node0x2447420;
	Node0x2447420 -> Node0x2447490;
	Node0x2447490 -> Node0x2447500;
	Node0x2447500 -> Node0x2447570;
	Node0x2447570 -> Node0x24475e0;
	Node0x24475e0 -> Node0x23e7268;
	Node0x23e7268 -> Node0x2447a80;
	Node0x2447a80 -> Node0x2447ad0;
edge [color=red]
	Node0x2446520 -> Node0x2446bd0;
	Node0x2446d00 -> Node0x2446d70;
	Node0x2446d70 -> Node0x2446e10;
	Node0x2446c90 -> Node0x2446f60;
	Node0x2446e80 -> Node0x2446fd0;
	Node0x2446f60 -> Node0x2447040;
	Node0x2446520 -> Node0x24470b0;
	Node0x2447040 -> Node0x24470b0;
	Node0x24470b0 -> Node0x2447150;
	Node0x24471f0 -> Node0x2447260;
	Node0x2446c90 -> Node0x2447260;
	Node0x2447260 -> Node0x24472d0;
	Node0x2446bd0 -> Node0x24472d0;
	Node0x24472d0 -> Node0x2447340;
	Node0x2446e80 -> Node0x2447340;
	Node0x2447340 -> Node0x24473b0;
	Node0x2446ef0 -> Node0x24473b0;
	Node0x24473b0 -> Node0x2447420;
	Node0x2446f60 -> Node0x2447420;
	Node0x2447420 -> Node0x2447490;
	Node0x2446fd0 -> Node0x2447490;
	Node0x2447490 -> Node0x2447500;
	Node0x2446e10 -> Node0x2447500;
	Node0x2447500 -> Node0x2447570;
	Node0x2447150 -> Node0x2447570;
	Node0x2447570 -> Node0x24475e0;
	Node0x24475e0 -> Node0x23e7268;
	Node0x23e7268 -> Node0x2447a80;
}
