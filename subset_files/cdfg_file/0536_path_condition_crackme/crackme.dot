digraph "DFG for'crackme' function" {
	Node0x8dcb40[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x8dcbb0[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0x8dd230[shape=record, label="  %7 = mul i32 %6, 5"];
	Node0x8dd2a0[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x8dd310[shape=record, label="  %9 = or i32 %2, %1"];
	Node0x8dd3b0[shape=record, label="  %10 = mul i32 %9, -2"];
	Node0x8dd420[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x8dd4c0[shape=record, label="  %12 = or i32 %10, 1"];
	Node0x8dd560[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x8dd5d0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x8dd640[shape=record, label="  %15 = and i32 %13, %1"];
	Node0x8dd6b0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x8dd720[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x8dd790[shape=record, label="  %18 = xor i32 %5, -1"];
	Node0x8dd830[shape=record, label="  %19 = shl i32 %9, 2"];
	Node0x8dd8d0[shape=record, label="  %20 = xor i32 %19, -4"];
	Node0x8dd940[shape=record, label="  %21 = xor i32 %1, -1"];
	Node0x8dd9b0[shape=record, label="  %22 = and i32 %21, %2"];
	Node0x8dda20[shape=record, label="  %23 = xor i32 %0, -1"];
	Node0x8dda90[shape=record, label="  %24 = and i32 %23, %3"];
	Node0x8ddb00[shape=record, label="  %25 = xor i32 %24, -1"];
	Node0x8ddb70[shape=record, label="  %26 = or i32 %23, %3"];
	Node0x8ddbe0[shape=record, label="  %27 = or i32 %3, %0"];
	Node0x8ddc50[shape=record, label="  %28 = xor i32 %26, -1"];
	Node0x8ddcc0[shape=record, label="  %29 = add i32 %15, %1"];
	Node0x8ddd30[shape=record, label="  %30 = add i32 %29, %28"];
	Node0x8dddd0[shape=record, label="  %31 = mul i32 %30, 3"];
	Node0x8dde40[shape=record, label="  %32 = add i32 %24, %22"];
	Node0x8de0f0[shape=record, label="  %33 = mul i32 %32, 6"];
	Node0x8de160[shape=record, label="  %34 = sub i32 %11, %14"];
	Node0x8de1d0[shape=record, label="  %35 = add i32 %34, %18"];
	Node0x8de240[shape=record, label="  %36 = sub i32 %35, %3"];
	Node0x8de2b0[shape=record, label="  %37 = add i32 %36, %25"];
	Node0x8de320[shape=record, label="  %38 = sub i32 %37, %26"];
	Node0x8de390[shape=record, label="  %39 = add i32 %38, %27"];
	Node0x8de400[shape=record, label="  %40 = add i32 %39, %12"];
	Node0x8de470[shape=record, label="  %41 = sub i32 %40, %17"];
	Node0x8de4e0[shape=record, label="  %42 = add i32 %41, %20"];
	Node0x8de550[shape=record, label="  %43 = add i32 %42, %33"];
	Node0x8de5c0[shape=record, label="  %44 = add i32 %43, %31"];
	Node0x8de630[shape=record, label="  %45 = icmp eq i32 %8, %44"];
	Node0x87d268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x8dead0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x8deb20[shape=record, label="  ret void"];
	Node0x8dcb40 -> Node0x8dcbb0;
	Node0x8dcbb0 -> Node0x8dd230;
	Node0x8dd230 -> Node0x8dd2a0;
	Node0x8dd2a0 -> Node0x8dd310;
	Node0x8dd310 -> Node0x8dd3b0;
	Node0x8dd3b0 -> Node0x8dd420;
	Node0x8dd420 -> Node0x8dd4c0;
	Node0x8dd4c0 -> Node0x8dd560;
	Node0x8dd560 -> Node0x8dd5d0;
	Node0x8dd5d0 -> Node0x8dd640;
	Node0x8dd640 -> Node0x8dd6b0;
	Node0x8dd6b0 -> Node0x8dd720;
	Node0x8dd720 -> Node0x8dd790;
	Node0x8dd790 -> Node0x8dd830;
	Node0x8dd830 -> Node0x8dd8d0;
	Node0x8dd8d0 -> Node0x8dd940;
	Node0x8dd940 -> Node0x8dd9b0;
	Node0x8dd9b0 -> Node0x8dda20;
	Node0x8dda20 -> Node0x8dda90;
	Node0x8dda90 -> Node0x8ddb00;
	Node0x8ddb00 -> Node0x8ddb70;
	Node0x8ddb70 -> Node0x8ddbe0;
	Node0x8ddbe0 -> Node0x8ddc50;
	Node0x8ddc50 -> Node0x8ddcc0;
	Node0x8ddcc0 -> Node0x8ddd30;
	Node0x8ddd30 -> Node0x8dddd0;
	Node0x8dddd0 -> Node0x8dde40;
	Node0x8dde40 -> Node0x8de0f0;
	Node0x8de0f0 -> Node0x8de160;
	Node0x8de160 -> Node0x8de1d0;
	Node0x8de1d0 -> Node0x8de240;
	Node0x8de240 -> Node0x8de2b0;
	Node0x8de2b0 -> Node0x8de320;
	Node0x8de320 -> Node0x8de390;
	Node0x8de390 -> Node0x8de400;
	Node0x8de400 -> Node0x8de470;
	Node0x8de470 -> Node0x8de4e0;
	Node0x8de4e0 -> Node0x8de550;
	Node0x8de550 -> Node0x8de5c0;
	Node0x8de5c0 -> Node0x8de630;
	Node0x8de630 -> Node0x87d268;
	Node0x87d268 -> Node0x8dead0;
	Node0x8dead0 -> Node0x8deb20;
edge [color=red]
	Node0x8dcbb0 -> Node0x8dd230;
	Node0x8dd230 -> Node0x8dd2a0;
	Node0x8dcb40 -> Node0x8dd2a0;
	Node0x8dd310 -> Node0x8dd3b0;
	Node0x8dd3b0 -> Node0x8dd4c0;
	Node0x8dd560 -> Node0x8dd5d0;
	Node0x8dd560 -> Node0x8dd640;
	Node0x8dd640 -> Node0x8dd6b0;
	Node0x8dd6b0 -> Node0x8dd720;
	Node0x8dcb40 -> Node0x8dd790;
	Node0x8dd310 -> Node0x8dd830;
	Node0x8dd830 -> Node0x8dd8d0;
	Node0x8dd940 -> Node0x8dd9b0;
	Node0x8dda20 -> Node0x8dda90;
	Node0x8dda90 -> Node0x8ddb00;
	Node0x8dda20 -> Node0x8ddb70;
	Node0x8ddb70 -> Node0x8ddc50;
	Node0x8dd640 -> Node0x8ddcc0;
	Node0x8ddcc0 -> Node0x8ddd30;
	Node0x8ddc50 -> Node0x8ddd30;
	Node0x8ddd30 -> Node0x8dddd0;
	Node0x8dda90 -> Node0x8dde40;
	Node0x8dd9b0 -> Node0x8dde40;
	Node0x8dde40 -> Node0x8de0f0;
	Node0x8dd420 -> Node0x8de160;
	Node0x8dd5d0 -> Node0x8de160;
	Node0x8de160 -> Node0x8de1d0;
	Node0x8dd790 -> Node0x8de1d0;
	Node0x8de1d0 -> Node0x8de240;
	Node0x8de240 -> Node0x8de2b0;
	Node0x8ddb00 -> Node0x8de2b0;
	Node0x8de2b0 -> Node0x8de320;
	Node0x8ddb70 -> Node0x8de320;
	Node0x8de320 -> Node0x8de390;
	Node0x8ddbe0 -> Node0x8de390;
	Node0x8de390 -> Node0x8de400;
	Node0x8dd4c0 -> Node0x8de400;
	Node0x8de400 -> Node0x8de470;
	Node0x8dd720 -> Node0x8de470;
	Node0x8de470 -> Node0x8de4e0;
	Node0x8dd8d0 -> Node0x8de4e0;
	Node0x8de4e0 -> Node0x8de550;
	Node0x8de0f0 -> Node0x8de550;
	Node0x8de550 -> Node0x8de5c0;
	Node0x8dddd0 -> Node0x8de5c0;
	Node0x8dd2a0 -> Node0x8de630;
	Node0x8de5c0 -> Node0x8de630;
	Node0x8de630 -> Node0x87d268;
	Node0x87d268 -> Node0x8dead0;
}
