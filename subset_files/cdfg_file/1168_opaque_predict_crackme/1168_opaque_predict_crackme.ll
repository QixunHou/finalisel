; ModuleID = '../.././c_source_file/1168_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1168_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = xor i32 %5, -1
  %9 = and i32 %8, %3
  %10 = xor i32 %9, -1
  %11 = add i32 %9, 1
  %12 = add i32 %7, %4
  %13 = add i32 %12, %11
  %14 = xor i32 %1, -1
  %15 = xor i32 %2, -1
  %16 = or i32 %15, %0
  %17 = and i32 %16, %14
  %18 = or i32 %15, %1
  %19 = xor i32 %18, -1
  %20 = xor i32 %19, %0
  %21 = and i32 %14, %2
  %22 = and i32 %21, %0
  %23 = xor i32 %2, %1
  %24 = xor i32 %23, %0
  %25 = or i32 %22, %24
  %26 = and i32 %2, %0
  %27 = and i32 %15, %1
  %28 = or i32 %26, %27
  %29 = and i32 %15, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %30, %32
  %34 = xor i32 %0, -1
  %35 = or i32 %27, %34
  %36 = shl i32 %35, 1
  %37 = or i32 %1, %0
  %38 = xor i32 %37, -1
  %39 = xor i32 %38, %2
  %40 = xor i32 %16, -1
  %41 = or i32 %31, %40
  %42 = and i32 %14, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = and i32 %45, %43
  %47 = xor i32 %27, -1
  %48 = xor i32 %26, %47
  %49 = and i32 %15, %32
  %50 = or i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %27, %0
  %53 = or i32 %2, %1
  %54 = xor i32 %53, -1
  %55 = or i32 %54, %0
  %56 = and i32 %1, %0
  %57 = xor i32 %56, %2
  %58 = xor i32 %56, -1
  %59 = or i32 %31, %2
  %60 = shl i32 %59, 2
  %61 = or i32 %26, %14
  %62 = or i32 %14, %0
  %63 = and i32 %23, %62
  %64 = shl i32 %18, 1
  %65 = or i32 %23, %0
  %66 = and i32 %7, %0
  %67 = and i32 %23, %34
  %68 = or i32 %66, %67
  %69 = or i32 %15, %38
  %70 = and i32 %15, %58
  %71 = xor i32 %7, -1
  %72 = or i32 %71, %0
  %73 = xor i32 %23, -1
  %74 = and i32 %73, %58
  %75 = and i32 %62, %15
  %76 = or i32 %44, %56
  %77 = add i32 %16, 1
  %78 = and i32 %7, %34
  %79 = and i32 %53, %0
  %80 = xor i32 %79, 2147483647
  %81 = xor i32 %80, %78
  %82 = shl i32 %81, 1
  %83 = xor i32 %82, -1
  %84 = xor i32 %26, %62
  %85 = shl i32 %84, 1
  %86 = and i32 %37, %15
  %87 = and i32 %47, %34
  %88 = and i32 %45, %1
  %89 = or i32 %23, %34
  %90 = and i32 %50, %31
  %91 = xor i32 %26, %53
  %92 = and i32 %21, %34
  %93 = xor i32 %89, -1
  %94 = or i32 %92, %93
  %95 = and i32 %32, %2
  %96 = or i32 %73, %0
  %97 = xor i32 %42, %47
  %98 = or i32 %71, %34
  %99 = and i32 %44, %14
  %100 = and i32 %71, %0
  %101 = xor i32 %29, %71
  %102 = xor i32 %26, -1
  %103 = xor i32 %102, %1
  %104 = xor i32 %24, -1
  %105 = xor i32 %22, %104
  %106 = or i32 %23, %56
  %107 = or i32 %44, %1
  %108 = and i32 %44, %1
  %109 = and i32 %53, %34
  %110 = xor i32 %62, -1
  %111 = or i32 %56, %15
  %112 = shl i32 %111, 1
  %113 = xor i32 %27, %0
  %114 = or i32 %44, %38
  %115 = xor i32 %26, %37
  %116 = or i32 %42, %45
  %117 = xor i32 %53, %0
  %118 = shl i32 %117, 1
  %119 = and i32 %15, %43
  %120 = shl i32 %119, 1
  %121 = or i32 %44, %42
  %122 = or i32 %56, %51
  %123 = and i32 %31, %45
  %124 = or i32 %110, %2
  %125 = shl i32 %124, 2
  %126 = or i32 %31, %51
  %127 = or i32 %53, %34
  %128 = or i32 %54, %34
  %129 = or i32 %51, %1
  %130 = shl i32 %129, 1
  %131 = or i32 %29, %7
  %132 = and i32 %45, %14
  %133 = or i32 %42, %73
  %134 = and i32 %73, %43
  %135 = and i32 %50, %14
  %136 = xor i32 %92, %89
  %137 = and i32 %73, %0
  %138 = xor i32 %50, %56
  %139 = or i32 %45, %38
  %140 = or i32 %40, %32
  %141 = and i32 %44, %62
  %142 = or i32 %14, %2
  %143 = and i32 %142, %34
  %144 = or i32 %22, %143
  %145 = or i32 %45, %32
  %146 = or i32 %45, %1
  %147 = xor i32 %18, %0
  %148 = and i32 %37, %2
  %149 = or i32 %44, %14
  %150 = and i32 %45, %58
  %151 = and i32 %102, %32
  %152 = and i32 %30, %14
  %153 = xor i32 %22, %65
  %154 = or i32 %7, %0
  %155 = and i32 %18, %34
  %156 = xor i32 %16, %1
  %157 = shl i32 %156, 1
  %158 = or i32 %44, %110
  %159 = or i32 %26, %31
  %160 = shl i32 %159, 1
  %161 = and i32 %50, %1
  %162 = or i32 %56, %19
  %163 = or i32 %42, %2
  %164 = and i32 %31, %30
  %165 = or i32 %29, %19
  %166 = and i32 %23, %58
  %167 = or i32 %29, %1
  %168 = or i32 %7, %34
  %169 = xor i32 %47, %0
  %170 = or i32 %73, %34
  %171 = or i32 %66, %104
  %172 = or i32 %18, %34
  %173 = or i32 %56, %40
  %174 = shl i32 %79, 1
  %175 = and i32 %23, %37
  %176 = or i32 %23, %42
  %177 = or i32 %7, %42
  %178 = and i32 %30, %1
  %179 = or i32 %73, %38
  %180 = shl i32 %179, 1
  %181 = and i32 %31, %15
  %182 = xor i32 %50, %1
  %183 = or i32 %38, %2
  %184 = and i32 %23, %43
  %185 = shl i32 %32, 1
  %186 = and i32 %23, %0
  %187 = xor i32 %186, -1
  %188 = xor i32 %78, %187
  %189 = and i32 %142, %0
  %190 = xor i32 %189, 2147483647
  %191 = xor i32 %190, %92
  %192 = and i32 %45, %32
  %193 = or i32 %56, %45
  %194 = and i32 %50, %32
  %195 = xor i32 %73, %0
  %196 = or i32 %51, %14
  %197 = and i32 %62, %45
  %198 = xor i32 %43, %2
  %199 = or i32 %29, %14
  %200 = shl i32 %37, 1
  %201 = or i32 %40, %1
  %202 = and i32 %43, %2
  %203 = and i32 %44, %32
  %204 = or i32 %29, %32
  %205 = shl i32 %204, 1
  %206 = or i32 %56, %73
  %207 = xor i32 %66, %24
  %208 = shl i32 %73, 1
  %209 = or i32 %40, %14
  %210 = or i32 %26, %54
  %211 = or i32 %44, %32
  %212 = and i32 %16, %1
  %213 = and i32 %54, %34
  %214 = mul i32 %213, -9
  %215 = and i32 %27, %34
  %216 = mul i32 %215, 13
  %217 = and i32 %54, %0
  %218 = and i32 %27, %0
  %219 = and i32 %19, %34
  %220 = mul i32 %219, 20
  %221 = and i32 %19, %0
  %222 = xor i32 %4, -1
  %223 = and i32 %5, %3
  %224 = and i32 %223, %4
  %225 = or i32 %5, %3
  %226 = xor i32 %225, %4
  %227 = xor i32 %226, %224
  %228 = and i32 %8, %4
  %229 = xor i32 %4, %3
  %230 = xor i32 %229, -1
  %231 = or i32 %228, %230
  %232 = and i32 %5, %4
  %233 = xor i32 %232, -1
  %234 = xor i32 %3, -1
  %235 = and i32 %234, %4
  %236 = or i32 %9, %235
  %237 = or i32 %8, %3
  %238 = and i32 %237, %4
  %239 = or i32 %225, %222
  %240 = and i32 %225, %222
  %241 = xor i32 %5, %4
  %242 = and i32 %241, %230
  %243 = and i32 %229, %5
  %244 = or i32 %4, %3
  %245 = xor i32 %244, %5
  %246 = xor i32 %5, %3
  %247 = xor i32 %246, -1
  %248 = or i32 %247, %4
  %249 = add i32 %5, 1
  %250 = or i32 %9, %222
  %251 = and i32 %4, %3
  %252 = xor i32 %251, -1
  %253 = and i32 %241, %252
  %254 = xor i32 %223, %4
  %255 = xor i32 %241, -1
  %256 = and i32 %255, %3
  %257 = or i32 %255, %230
  %258 = and i32 %234, %5
  %259 = and i32 %258, %4
  %260 = or i32 %234, %5
  %261 = and i32 %260, %222
  %262 = xor i32 %261, 2147483647
  %263 = xor i32 %262, %259
  %264 = shl i32 %263, 1
  %265 = or i32 %232, %9
  %266 = xor i32 %223, -1
  %267 = xor i32 %228, %266
  %268 = xor i32 %237, %251
  %269 = xor i32 %235, 2147483647
  %270 = and i32 %269, %255
  %271 = shl i32 %270, 1
  %272 = xor i32 %246, %222
  %273 = xor i32 %272, %259
  %274 = xor i32 %237, -1
  %275 = add i32 %237, 1
  %276 = or i32 %255, %3
  %277 = or i32 %9, %4
  %278 = or i32 %225, %4
  %279 = or i32 %246, %222
  %280 = xor i32 %244, 2147483647
  %281 = or i32 %280, %8
  %282 = shl i32 %281, 1
  %283 = or i32 %8, %230
  %284 = or i32 %234, %4
  %285 = xor i32 %232, %284
  %286 = xor i32 %225, %251
  %287 = shl i32 %286, 1
  %288 = or i32 %5, %4
  %289 = and i32 %288, %229
  %290 = xor i32 %235, %5
  %291 = shl i32 %290, 2
  %292 = and i32 %8, %230
  %293 = or i32 %246, %4
  %294 = and i32 %8, %252
  %295 = xor i32 %240, -1
  %296 = xor i32 %224, %295
  %297 = and i32 %223, %222
  %298 = and i32 %225, %4
  %299 = xor i32 %298, -1
  %300 = xor i32 %297, %299
  %301 = xor i32 %232, %3
  %302 = or i32 %229, %255
  %303 = and i32 %246, %222
  %304 = and i32 %244, %5
  %305 = or i32 %8, %4
  %306 = and i32 %288, %230
  %307 = and i32 %246, %4
  %308 = shl i32 %307, 1
  %309 = xor i32 %293, -1
  %310 = or i32 %259, %309
  %311 = xor i32 %284, -1
  %312 = or i32 %311, %5
  %313 = or i32 %10, %4
  %314 = and i32 %258, %222
  %315 = xor i32 %279, -1
  %316 = or i32 %314, %315
  %317 = and i32 %233, %230
  %318 = xor i32 %305, -1
  %319 = or i32 %318, %3
  %320 = or i32 %228, %274
  %321 = and i32 %233, %3
  %322 = and i32 %241, %234
  %323 = or i32 %235, %5
  %324 = and i32 %246, %284
  %325 = or i32 %241, %3
  %326 = xor i32 %288, -1
  %327 = or i32 %251, %326
  %328 = or i32 %241, %234
  %329 = or i32 %259, %261
  %330 = xor i32 %274, %4
  %331 = xor i32 %260, %4
  %332 = or i32 %259, %331
  %333 = xor i32 %10, %4
  %334 = xor i32 %225, -1
  %335 = and i32 %334, %222
  %336 = and i32 %9, %222
  %337 = and i32 %334, %4
  %338 = and i32 %9, %4
  %339 = mul i32 %338, 7
  %340 = and i32 %274, %222
  %341 = shl i32 %297, 2
  %342 = and i32 %274, %4
  %343 = add i32 %183, %110
  %344 = add i32 %343, %49
  %345 = add i32 %344, %210
  %346 = add i32 %345, %197
  %347 = add i32 %346, %164
  %348 = add i32 %347, %158
  %349 = add i32 %348, %146
  %350 = add i32 %349, %116
  %351 = add i32 %350, %99
  %352 = add i32 %351, %97
  %353 = add i32 %352, %96
  %354 = add i32 %353, %46
  %355 = add i32 %354, %171
  %356 = add i32 %355, %9
  %357 = add i32 %356, %191
  %358 = add i32 %357, %324
  %359 = add i32 %358, %303
  %360 = add i32 %359, %254
  %361 = add i32 %360, %329
  %362 = add i32 %361, %332
  %363 = shl i32 %362, 1
  %364 = sub i32 %66, %78
  %365 = sub i32 %364, %67
  %366 = sub i32 %365, %165
  %367 = add i32 %366, %121
  %368 = add i32 %367, %188
  %369 = sub i32 %368, %153
  %370 = add i32 %369, %335
  %371 = sub i32 %370, %340
  %372 = sub i32 %371, %277
  %373 = mul i32 %372, 5
  %374 = sub i32 %177, %192
  %375 = sub i32 %374, %169
  %376 = sub i32 %375, %149
  %377 = add i32 %376, %342
  %378 = sub i32 %377, %238
  %379 = sub i32 %378, %300
  %380 = mul i32 %379, 3
  %381 = add i32 %337, %217
  %382 = add i32 %381, %224
  %383 = add i32 %382, %336
  %384 = mul i32 %383, 11
  %385 = sub i32 %218, %221
  %386 = mul i32 %385, 15
  %387 = add i32 %253, %133
  %388 = shl i32 %387, 2
  %389 = add i32 %58, %14
  %390 = add i32 %389, %38
  %391 = add i32 %390, %31
  %392 = sub i32 %391, %39
  %393 = add i32 %392, %51
  %394 = sub i32 %393, %57
  %395 = sub i32 %394, %50
  %396 = sub i32 %395, %69
  %397 = sub i32 %396, %70
  %398 = add i32 %397, %75
  %399 = add i32 %398, %77
  %400 = add i32 %399, %30
  %401 = add i32 %400, %86
  %402 = add i32 %401, %95
  %403 = add i32 %402, %26
  %404 = sub i32 %403, %148
  %405 = add i32 %404, %163
  %406 = sub i32 %405, %29
  %407 = sub i32 %406, %27
  %408 = add i32 %407, %45
  %409 = sub i32 %408, %181
  %410 = sub i32 %409, %185
  %411 = sub i32 %410, %198
  %412 = sub i32 %411, %200
  %413 = sub i32 %412, %202
  %414 = add i32 %413, %71
  %415 = sub i32 %414, %20
  %416 = sub i32 %415, %17
  %417 = add i32 %416, %28
  %418 = sub i32 %417, %33
  %419 = add i32 %418, %41
  %420 = add i32 %419, %48
  %421 = sub i32 %420, %52
  %422 = add i32 %421, %55
  %423 = sub i32 %422, %60
  %424 = add i32 %423, %61
  %425 = add i32 %424, %63
  %426 = sub i32 %425, %64
  %427 = sub i32 %426, %65
  %428 = sub i32 %427, %72
  %429 = sub i32 %428, %74
  %430 = sub i32 %429, %76
  %431 = add i32 %430, %87
  %432 = add i32 %431, %88
  %433 = sub i32 %432, %89
  %434 = sub i32 %433, %90
  %435 = sub i32 %434, %91
  %436 = add i32 %435, %98
  %437 = add i32 %436, %100
  %438 = add i32 %437, %101
  %439 = sub i32 %438, %103
  %440 = sub i32 %439, %106
  %441 = add i32 %440, %107
  %442 = add i32 %441, %108
  %443 = add i32 %442, %109
  %444 = sub i32 %443, %112
  %445 = sub i32 %444, %113
  %446 = add i32 %445, %114
  %447 = add i32 %446, %115
  %448 = sub i32 %447, %120
  %449 = sub i32 %448, %122
  %450 = sub i32 %449, %123
  %451 = sub i32 %450, %125
  %452 = add i32 %451, %126
  %453 = sub i32 %452, %127
  %454 = sub i32 %453, %128
  %455 = sub i32 %454, %131
  %456 = add i32 %455, %132
  %457 = add i32 %456, %134
  %458 = add i32 %457, %135
  %459 = sub i32 %458, %137
  %460 = add i32 %459, %138
  %461 = sub i32 %460, %139
  %462 = add i32 %461, %140
  %463 = sub i32 %462, %141
  %464 = add i32 %463, %145
  %465 = sub i32 %464, %147
  %466 = add i32 %465, %150
  %467 = add i32 %466, %151
  %468 = add i32 %467, %152
  %469 = add i32 %468, %154
  %470 = sub i32 %469, %155
  %471 = add i32 %470, %161
  %472 = add i32 %471, %162
  %473 = add i32 %472, %166
  %474 = add i32 %473, %167
  %475 = add i32 %474, %168
  %476 = sub i32 %475, %170
  %477 = add i32 %476, %172
  %478 = sub i32 %477, %173
  %479 = add i32 %478, %175
  %480 = sub i32 %479, %176
  %481 = add i32 %480, %178
  %482 = add i32 %481, %182
  %483 = add i32 %482, %184
  %484 = add i32 %483, %193
  %485 = add i32 %484, %194
  %486 = sub i32 %485, %195
  %487 = sub i32 %486, %196
  %488 = sub i32 %487, %199
  %489 = sub i32 %488, %201
  %490 = sub i32 %489, %203
  %491 = add i32 %490, %206
  %492 = sub i32 %491, %208
  %493 = add i32 %492, %209
  %494 = add i32 %493, %211
  %495 = add i32 %494, %212
  %496 = sub i32 %495, %25
  %497 = sub i32 %496, %36
  %498 = sub i32 %497, %68
  %499 = sub i32 %498, %85
  %500 = sub i32 %499, %94
  %501 = sub i32 %500, %105
  %502 = sub i32 %501, %118
  %503 = sub i32 %502, %130
  %504 = add i32 %503, %136
  %505 = add i32 %504, %144
  %506 = sub i32 %505, %157
  %507 = sub i32 %506, %160
  %508 = sub i32 %507, %174
  %509 = sub i32 %508, %180
  %510 = sub i32 %509, %205
  %511 = sub i32 %510, %207
  %512 = add i32 %511, %214
  %513 = add i32 %512, %216
  %514 = add i32 %513, %220
  %515 = add i32 %514, %249
  %516 = add i32 %515, %233
  %517 = sub i32 %516, %243
  %518 = sub i32 %517, %245
  %519 = add i32 %518, %275
  %520 = sub i32 %519, %283
  %521 = sub i32 %520, %292
  %522 = add i32 %521, %294
  %523 = sub i32 %522, %304
  %524 = add i32 %523, %305
  %525 = add i32 %524, %312
  %526 = add i32 %525, %323
  %527 = sub i32 %526, %228
  %528 = add i32 %527, %386
  %529 = add i32 %528, %83
  %530 = add i32 %529, %231
  %531 = sub i32 %530, %236
  %532 = add i32 %531, %239
  %533 = sub i32 %532, %240
  %534 = add i32 %533, %242
  %535 = sub i32 %534, %248
  %536 = add i32 %535, %250
  %537 = sub i32 %536, %256
  %538 = sub i32 %537, %257
  %539 = add i32 %538, %265
  %540 = sub i32 %539, %267
  %541 = sub i32 %540, %268
  %542 = add i32 %541, %276
  %543 = add i32 %542, %278
  %544 = sub i32 %543, %279
  %545 = add i32 %544, %285
  %546 = sub i32 %545, %289
  %547 = sub i32 %546, %291
  %548 = add i32 %547, %293
  %549 = sub i32 %548, %301
  %550 = add i32 %549, %302
  %551 = sub i32 %550, %306
  %552 = sub i32 %551, %313
  %553 = sub i32 %552, %317
  %554 = add i32 %553, %319
  %555 = add i32 %554, %320
  %556 = add i32 %555, %321
  %557 = sub i32 %556, %322
  %558 = sub i32 %557, %325
  %559 = sub i32 %558, %327
  %560 = sub i32 %559, %328
  %561 = add i32 %560, %330
  %562 = add i32 %561, %333
  %563 = add i32 %562, %227
  %564 = sub i32 %563, %271
  %565 = sub i32 %564, %273
  %566 = sub i32 %565, %282
  %567 = sub i32 %566, %287
  %568 = add i32 %567, %296
  %569 = sub i32 %568, %308
  %570 = sub i32 %569, %310
  %571 = add i32 %570, %316
  %572 = add i32 %571, %339
  %573 = sub i32 %572, %341
  %574 = add i32 %573, %388
  %575 = sub i32 %574, %264
  %576 = add i32 %575, %384
  %577 = add i32 %576, %380
  %578 = add i32 %577, %373
  %579 = add i32 %578, %363
  %580 = icmp eq i32 %13, %579
  %581 = select i1 %580, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %582 = tail call i32 @puts(i8* nonnull dereferenceable(1) %581)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
