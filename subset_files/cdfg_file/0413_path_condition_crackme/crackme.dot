digraph "DFG for'crackme' function" {
	Node0x1341580[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1341c30[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1341cf0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x1341d60[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1341dd0[shape=record, label="  %7 = add i32 %3, %6"];
	Node0x1341e40[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x1341eb0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1341f20[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1341f90[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0x1342030[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x13420d0[shape=record, label="  %13 = xor i32 %0, 2147483647"];
	Node0x1342140[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x13421b0[shape=record, label="  %15 = shl i32 %5, 1"];
	Node0x1342220[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x1342290[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x1342300[shape=record, label="  %18 = add i32 %14, %0"];
	Node0x1342370[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x13423e0[shape=record, label="  %20 = sub i32 -3, %1"];
	Node0x1342450[shape=record, label="  %21 = add i32 %20, %8"];
	Node0x13424c0[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x1342530[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x13425a0[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x1342610[shape=record, label="  %25 = sub i32 %24, %17"];
	Node0x1342680[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x13426f0[shape=record, label="  %27 = icmp eq i32 %7, %26"];
	Node0x12e2268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1342b90[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1342be0[shape=record, label="  ret void"];
	Node0x1341580 -> Node0x1341c30;
	Node0x1341c30 -> Node0x1341cf0;
	Node0x1341cf0 -> Node0x1341d60;
	Node0x1341d60 -> Node0x1341dd0;
	Node0x1341dd0 -> Node0x1341e40;
	Node0x1341e40 -> Node0x1341eb0;
	Node0x1341eb0 -> Node0x1341f20;
	Node0x1341f20 -> Node0x1341f90;
	Node0x1341f90 -> Node0x1342030;
	Node0x1342030 -> Node0x13420d0;
	Node0x13420d0 -> Node0x1342140;
	Node0x1342140 -> Node0x13421b0;
	Node0x13421b0 -> Node0x1342220;
	Node0x1342220 -> Node0x1342290;
	Node0x1342290 -> Node0x1342300;
	Node0x1342300 -> Node0x1342370;
	Node0x1342370 -> Node0x13423e0;
	Node0x13423e0 -> Node0x1342450;
	Node0x1342450 -> Node0x13424c0;
	Node0x13424c0 -> Node0x1342530;
	Node0x1342530 -> Node0x13425a0;
	Node0x13425a0 -> Node0x1342610;
	Node0x1342610 -> Node0x1342680;
	Node0x1342680 -> Node0x13426f0;
	Node0x13426f0 -> Node0x12e2268;
	Node0x12e2268 -> Node0x1342b90;
	Node0x1342b90 -> Node0x1342be0;
edge [color=red]
	Node0x1341c30 -> Node0x1341cf0;
	Node0x1341cf0 -> Node0x1341d60;
	Node0x1341580 -> Node0x1341dd0;
	Node0x1341d60 -> Node0x1341dd0;
	Node0x1341580 -> Node0x1341e40;
	Node0x1341eb0 -> Node0x1341f20;
	Node0x1341eb0 -> Node0x1341f90;
	Node0x1341f90 -> Node0x1342030;
	Node0x13420d0 -> Node0x1342140;
	Node0x1341cf0 -> Node0x13421b0;
	Node0x1342220 -> Node0x1342290;
	Node0x1342140 -> Node0x1342300;
	Node0x1342300 -> Node0x1342370;
	Node0x13423e0 -> Node0x1342450;
	Node0x1341e40 -> Node0x1342450;
	Node0x1342450 -> Node0x13424c0;
	Node0x1341f20 -> Node0x13424c0;
	Node0x13424c0 -> Node0x1342530;
	Node0x1342030 -> Node0x1342530;
	Node0x1342530 -> Node0x13425a0;
	Node0x13421b0 -> Node0x13425a0;
	Node0x13425a0 -> Node0x1342610;
	Node0x1342290 -> Node0x1342610;
	Node0x1342610 -> Node0x1342680;
	Node0x1342370 -> Node0x1342680;
	Node0x1341dd0 -> Node0x13426f0;
	Node0x1342680 -> Node0x13426f0;
	Node0x13426f0 -> Node0x12e2268;
	Node0x12e2268 -> Node0x1342b90;
}
