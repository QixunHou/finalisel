digraph "DFG for'crackme' function" {
	Node0x21ca430[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x21ca4a0[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x21cab70[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x21cabe0[shape=record, label="  %6 = sub i32 %3, %5"];
	Node0x21cac80[shape=record, label="  %7 = xor i32 %4, -1"];
	Node0x21cacf0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x21cad60[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x21cae00[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x21cae70[shape=record, label="  %11 = xor i32 %3, -1"];
	Node0x21caf10[shape=record, label="  %12 = xor i32 %0, 2147483647"];
	Node0x21caf80[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x21caff0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x21cb060[shape=record, label="  %15 = sub i32 %0, %1"];
	Node0x21cb0d0[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x21cb140[shape=record, label="  %17 = add i32 %16, %11"];
	Node0x21cb1b0[shape=record, label="  %18 = add i32 %17, %14"];
	Node0x21cb220[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0x21cb290[shape=record, label="  %20 = icmp eq i32 %6, %19"];
	Node0x216b268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x21cb730[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x21cb780[shape=record, label="  ret void"];
	Node0x21ca430 -> Node0x21ca4a0;
	Node0x21ca4a0 -> Node0x21cab70;
	Node0x21cab70 -> Node0x21cabe0;
	Node0x21cabe0 -> Node0x21cac80;
	Node0x21cac80 -> Node0x21cacf0;
	Node0x21cacf0 -> Node0x21cad60;
	Node0x21cad60 -> Node0x21cae00;
	Node0x21cae00 -> Node0x21cae70;
	Node0x21cae70 -> Node0x21caf10;
	Node0x21caf10 -> Node0x21caf80;
	Node0x21caf80 -> Node0x21caff0;
	Node0x21caff0 -> Node0x21cb060;
	Node0x21cb060 -> Node0x21cb0d0;
	Node0x21cb0d0 -> Node0x21cb140;
	Node0x21cb140 -> Node0x21cb1b0;
	Node0x21cb1b0 -> Node0x21cb220;
	Node0x21cb220 -> Node0x21cb290;
	Node0x21cb290 -> Node0x216b268;
	Node0x216b268 -> Node0x21cb730;
	Node0x21cb730 -> Node0x21cb780;
edge [color=red]
	Node0x21ca4a0 -> Node0x21cab70;
	Node0x21ca430 -> Node0x21cabe0;
	Node0x21cab70 -> Node0x21cabe0;
	Node0x21ca4a0 -> Node0x21cac80;
	Node0x21cacf0 -> Node0x21cad60;
	Node0x21cad60 -> Node0x21cae00;
	Node0x21ca430 -> Node0x21cae70;
	Node0x21caf10 -> Node0x21caf80;
	Node0x21caf80 -> Node0x21caff0;
	Node0x21cb060 -> Node0x21cb0d0;
	Node0x21cac80 -> Node0x21cb0d0;
	Node0x21cb0d0 -> Node0x21cb140;
	Node0x21cae70 -> Node0x21cb140;
	Node0x21cb140 -> Node0x21cb1b0;
	Node0x21caff0 -> Node0x21cb1b0;
	Node0x21cb1b0 -> Node0x21cb220;
	Node0x21cae00 -> Node0x21cb220;
	Node0x21cabe0 -> Node0x21cb290;
	Node0x21cb220 -> Node0x21cb290;
	Node0x21cb290 -> Node0x216b268;
	Node0x216b268 -> Node0x21cb730;
}
