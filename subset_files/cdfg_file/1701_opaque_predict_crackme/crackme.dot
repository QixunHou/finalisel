digraph "DFG for'crackme' function" {
	Node0x12f0a90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x12f0b00[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x12f0bc0[shape=record, label="  %5 = and i32 %3, %0"];
	Node0x12f0c30[shape=record, label="  %6 = sub i32 1, %1"];
	Node0x12f0ca0[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x12f0d10[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x12f0d80[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0x12f0df0[shape=record, label="  %10 = shl i32 %8, 1"];
	Node0x12f0e90[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x12f0f00[shape=record, label="  %12 = xor i32 %4, -1"];
	Node0x12f0fa0[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0x12f1010[shape=record, label="  %14 = shl i32 %5, 1"];
	Node0x12f1080[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x12f1120[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x12f1190[shape=record, label="  %17 = add i32 %9, %13"];
	Node0x12f1200[shape=record, label="  %18 = add i32 %17, %14"];
	Node0x12f1270[shape=record, label="  %19 = add i32 %18, %16"];
	Node0x12f12e0[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x12f1350[shape=record, label="  %21 = icmp eq i32 %4, %20"];
	Node0x1291268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x12f17f0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x12f1840[shape=record, label="  ret void"];
	Node0x12f0a90 -> Node0x12f0b00;
	Node0x12f0b00 -> Node0x12f0bc0;
	Node0x12f0bc0 -> Node0x12f0c30;
	Node0x12f0c30 -> Node0x12f0ca0;
	Node0x12f0ca0 -> Node0x12f0d10;
	Node0x12f0d10 -> Node0x12f0d80;
	Node0x12f0d80 -> Node0x12f0df0;
	Node0x12f0df0 -> Node0x12f0e90;
	Node0x12f0e90 -> Node0x12f0f00;
	Node0x12f0f00 -> Node0x12f0fa0;
	Node0x12f0fa0 -> Node0x12f1010;
	Node0x12f1010 -> Node0x12f1080;
	Node0x12f1080 -> Node0x12f1120;
	Node0x12f1120 -> Node0x12f1190;
	Node0x12f1190 -> Node0x12f1200;
	Node0x12f1200 -> Node0x12f1270;
	Node0x12f1270 -> Node0x12f12e0;
	Node0x12f12e0 -> Node0x12f1350;
	Node0x12f1350 -> Node0x1291268;
	Node0x1291268 -> Node0x12f17f0;
	Node0x12f17f0 -> Node0x12f1840;
edge [color=red]
	Node0x12f0a90 -> Node0x12f0b00;
	Node0x12f0a90 -> Node0x12f0bc0;
	Node0x12f0c30 -> Node0x12f0ca0;
	Node0x12f0bc0 -> Node0x12f0ca0;
	Node0x12f0ca0 -> Node0x12f0d80;
	Node0x12f0d10 -> Node0x12f0d80;
	Node0x12f0d10 -> Node0x12f0df0;
	Node0x12f0df0 -> Node0x12f0e90;
	Node0x12f0b00 -> Node0x12f0f00;
	Node0x12f0f00 -> Node0x12f0fa0;
	Node0x12f0bc0 -> Node0x12f1010;
	Node0x12f1080 -> Node0x12f1120;
	Node0x12f0d80 -> Node0x12f1190;
	Node0x12f0fa0 -> Node0x12f1190;
	Node0x12f1190 -> Node0x12f1200;
	Node0x12f1010 -> Node0x12f1200;
	Node0x12f1200 -> Node0x12f1270;
	Node0x12f1120 -> Node0x12f1270;
	Node0x12f1270 -> Node0x12f12e0;
	Node0x12f0e90 -> Node0x12f12e0;
	Node0x12f0b00 -> Node0x12f1350;
	Node0x12f12e0 -> Node0x12f1350;
	Node0x12f1350 -> Node0x1291268;
	Node0x1291268 -> Node0x12f17f0;
}
