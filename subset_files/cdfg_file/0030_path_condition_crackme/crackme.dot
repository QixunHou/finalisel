digraph "DFG for'crackme' function" {
	Node0x16bcb70[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x16bd1f0[shape=record, label="  %6 = xor i32 %2, -1"];
	Node0x16bd260[shape=record, label="  %7 = and i32 %6, %1"];
	Node0x16bd2d0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x16bd340[shape=record, label="  %9 = add i32 %5, %8"];
	Node0x16bd3b0[shape=record, label="  %10 = xor i32 %0, -1"];
	Node0x16bd420[shape=record, label="  %11 = and i32 %10, %3"];
	Node0x16bd490[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x16bd500[shape=record, label="  %13 = add i32 %9, %12"];
	Node0x16bd570[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0x16bd5e0[shape=record, label="  %15 = or i32 %6, %1"];
	Node0x16bd680[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x16bd6f0[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x16bd760[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x16bd7d0[shape=record, label="  %19 = and i32 %3, %0"];
	Node0x16bd840[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x16bd8b0[shape=record, label="  %21 = or i32 %10, %3"];
	Node0x16bd920[shape=record, label="  %22 = or i32 %3, %0"];
	Node0x16bd990[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x16bda30[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x16bdaa0[shape=record, label="  %25 = xor i32 %21, -1"];
	Node0x16bdb40[shape=record, label="  %26 = mul i32 %25, 6"];
	Node0x16bdbb0[shape=record, label="  %27 = add i32 %19, %17"];
	Node0x16bdc50[shape=record, label="  %28 = shl i32 %27, 2"];
	Node0x16bdcc0[shape=record, label="  %29 = add i32 %14, %3"];
	Node0x16bdd30[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x16bddd0[shape=record, label="  %31 = sub i32 3, %0"];
	Node0x16bde40[shape=record, label="  %32 = add i32 %31, %6"];
	Node0x16be0c0[shape=record, label="  %33 = add i32 %32, %18"];
	Node0x16be130[shape=record, label="  %34 = sub i32 %33, %5"];
	Node0x16be1a0[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x16be210[shape=record, label="  %36 = sub i32 %35, %7"];
	Node0x16be280[shape=record, label="  %37 = sub i32 %36, %16"];
	Node0x16be2f0[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x16be360[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x16be3d0[shape=record, label="  %40 = add i32 %39, %11"];
	Node0x16be440[shape=record, label="  %41 = sub i32 %40, %23"];
	Node0x16be4b0[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x16be520[shape=record, label="  %43 = add i32 %42, %30"];
	Node0x16be590[shape=record, label="  %44 = add i32 %43, %24"];
	Node0x16be600[shape=record, label="  %45 = add i32 %44, %28"];
	Node0x16be670[shape=record, label="  %46 = icmp eq i32 %13, %45"];
	Node0x165d268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16beb10[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x16beb60[shape=record, label="  ret void"];
	Node0x16bcb70 -> Node0x16bd1f0;
	Node0x16bd1f0 -> Node0x16bd260;
	Node0x16bd260 -> Node0x16bd2d0;
	Node0x16bd2d0 -> Node0x16bd340;
	Node0x16bd340 -> Node0x16bd3b0;
	Node0x16bd3b0 -> Node0x16bd420;
	Node0x16bd420 -> Node0x16bd490;
	Node0x16bd490 -> Node0x16bd500;
	Node0x16bd500 -> Node0x16bd570;
	Node0x16bd570 -> Node0x16bd5e0;
	Node0x16bd5e0 -> Node0x16bd680;
	Node0x16bd680 -> Node0x16bd6f0;
	Node0x16bd6f0 -> Node0x16bd760;
	Node0x16bd760 -> Node0x16bd7d0;
	Node0x16bd7d0 -> Node0x16bd840;
	Node0x16bd840 -> Node0x16bd8b0;
	Node0x16bd8b0 -> Node0x16bd920;
	Node0x16bd920 -> Node0x16bd990;
	Node0x16bd990 -> Node0x16bda30;
	Node0x16bda30 -> Node0x16bdaa0;
	Node0x16bdaa0 -> Node0x16bdb40;
	Node0x16bdb40 -> Node0x16bdbb0;
	Node0x16bdbb0 -> Node0x16bdc50;
	Node0x16bdc50 -> Node0x16bdcc0;
	Node0x16bdcc0 -> Node0x16bdd30;
	Node0x16bdd30 -> Node0x16bddd0;
	Node0x16bddd0 -> Node0x16bde40;
	Node0x16bde40 -> Node0x16be0c0;
	Node0x16be0c0 -> Node0x16be130;
	Node0x16be130 -> Node0x16be1a0;
	Node0x16be1a0 -> Node0x16be210;
	Node0x16be210 -> Node0x16be280;
	Node0x16be280 -> Node0x16be2f0;
	Node0x16be2f0 -> Node0x16be360;
	Node0x16be360 -> Node0x16be3d0;
	Node0x16be3d0 -> Node0x16be440;
	Node0x16be440 -> Node0x16be4b0;
	Node0x16be4b0 -> Node0x16be520;
	Node0x16be520 -> Node0x16be590;
	Node0x16be590 -> Node0x16be600;
	Node0x16be600 -> Node0x16be670;
	Node0x16be670 -> Node0x165d268;
	Node0x165d268 -> Node0x16beb10;
	Node0x16beb10 -> Node0x16beb60;
edge [color=red]
	Node0x16bd1f0 -> Node0x16bd260;
	Node0x16bd260 -> Node0x16bd2d0;
	Node0x16bcb70 -> Node0x16bd340;
	Node0x16bd2d0 -> Node0x16bd340;
	Node0x16bd3b0 -> Node0x16bd420;
	Node0x16bd420 -> Node0x16bd490;
	Node0x16bd340 -> Node0x16bd500;
	Node0x16bd490 -> Node0x16bd500;
	Node0x16bd1f0 -> Node0x16bd5e0;
	Node0x16bd5e0 -> Node0x16bd680;
	Node0x16bd6f0 -> Node0x16bd760;
	Node0x16bd7d0 -> Node0x16bd840;
	Node0x16bd3b0 -> Node0x16bd8b0;
	Node0x16bd920 -> Node0x16bd990;
	Node0x16bd990 -> Node0x16bda30;
	Node0x16bd8b0 -> Node0x16bdaa0;
	Node0x16bdaa0 -> Node0x16bdb40;
	Node0x16bd7d0 -> Node0x16bdbb0;
	Node0x16bd6f0 -> Node0x16bdbb0;
	Node0x16bdbb0 -> Node0x16bdc50;
	Node0x16bd570 -> Node0x16bdcc0;
	Node0x16bdcc0 -> Node0x16bdd30;
	Node0x16bddd0 -> Node0x16bde40;
	Node0x16bd1f0 -> Node0x16bde40;
	Node0x16bde40 -> Node0x16be0c0;
	Node0x16bd760 -> Node0x16be0c0;
	Node0x16be0c0 -> Node0x16be130;
	Node0x16bcb70 -> Node0x16be130;
	Node0x16be130 -> Node0x16be1a0;
	Node0x16bd5e0 -> Node0x16be1a0;
	Node0x16be1a0 -> Node0x16be210;
	Node0x16bd260 -> Node0x16be210;
	Node0x16be210 -> Node0x16be280;
	Node0x16bd680 -> Node0x16be280;
	Node0x16be280 -> Node0x16be2f0;
	Node0x16bd840 -> Node0x16be2f0;
	Node0x16be2f0 -> Node0x16be360;
	Node0x16bd8b0 -> Node0x16be360;
	Node0x16be360 -> Node0x16be3d0;
	Node0x16bd420 -> Node0x16be3d0;
	Node0x16be3d0 -> Node0x16be440;
	Node0x16bd990 -> Node0x16be440;
	Node0x16be440 -> Node0x16be4b0;
	Node0x16bdb40 -> Node0x16be4b0;
	Node0x16be4b0 -> Node0x16be520;
	Node0x16bdd30 -> Node0x16be520;
	Node0x16be520 -> Node0x16be590;
	Node0x16bda30 -> Node0x16be590;
	Node0x16be590 -> Node0x16be600;
	Node0x16bdc50 -> Node0x16be600;
	Node0x16bd500 -> Node0x16be670;
	Node0x16be600 -> Node0x16be670;
	Node0x16be670 -> Node0x165d268;
	Node0x165d268 -> Node0x16beb10;
}
