; ModuleID = '../.././c_source_file/0827_path_condition_crackme.c'
source_filename = "../.././c_source_file/0827_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %6, %1
  %8 = and i32 %2, %0
  %9 = or i32 %8, %1
  %10 = or i32 %4, %1
  %11 = xor i32 %10, -1
  %12 = or i32 %11, %0
  %13 = xor i32 %1, -1
  %14 = or i32 %8, %13
  %15 = xor i32 %1, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %2, %0
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %16
  %20 = or i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = xor i32 %21, %0
  %23 = shl i32 %22, 1
  %24 = and i32 %13, %2
  %25 = and i32 %24, %0
  %26 = or i32 %13, %2
  %27 = xor i32 %26, %0
  %28 = or i32 %25, %27
  %29 = and i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %17, %30
  %32 = shl i32 %31, 1
  %33 = and i32 %13, %0
  %34 = or i32 %33, %18
  %35 = xor i32 %20, %29
  %36 = and i32 %2, %1
  %37 = or i32 %36, %33
  %38 = or i32 %4, %0
  %39 = shl i32 %38, 1
  %40 = and i32 %17, %1
  %41 = shl i32 %40, 1
  %42 = xor i32 %0, -1
  %43 = and i32 %26, %42
  %44 = xor i32 %25, -1
  %45 = xor i32 %43, %44
  %46 = and i32 %6, %16
  %47 = xor i32 %38, -1
  %48 = or i32 %29, %47
  %49 = xor i32 %11, %0
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %2, %1
  %53 = or i32 %52, %51
  %54 = or i32 %52, %0
  %55 = xor i32 %25, %54
  %56 = and i32 %50, %2
  %57 = xor i32 %8, %1
  %58 = shl i32 %57, 1
  %59 = or i32 %17, %13
  %60 = and i32 %38, %16
  %61 = and i32 %52, %30
  %62 = or i32 %33, %2
  %63 = or i32 %18, %13
  %64 = xor i32 %33, %2
  %65 = and i32 %18, %1
  %66 = and i32 %36, %0
  %67 = and i32 %20, %42
  %68 = or i32 %66, %67
  %69 = xor i32 %36, -1
  %70 = xor i32 %33, %69
  %71 = xor i32 %67, 2147483647
  %72 = xor i32 %71, %66
  %73 = or i32 %13, %0
  %74 = and i32 %73, %18
  %75 = shl i32 %74, 1
  %76 = or i32 %47, %13
  %77 = and i32 %73, %2
  %78 = or i32 %8, %15
  %79 = and i32 %52, %42
  %80 = and i32 %24, %42
  %81 = and i32 %26, %0
  %82 = or i32 %80, %81
  %83 = or i32 %18, %1
  %84 = or i32 %8, %21
  %85 = or i32 %52, %42
  %86 = xor i32 %80, %85
  %87 = xor i32 %30, %2
  %88 = and i32 %38, %1
  %89 = and i32 %4, %1
  %90 = xor i32 %89, -1
  %91 = and i32 %90, %0
  %92 = or i32 %2, %0
  %93 = xor i32 %33, %90
  %94 = xor i32 %52, -1
  %95 = or i32 %29, %94
  %96 = and i32 %20, %0
  %97 = or i32 %89, %42
  %98 = xor i32 %10, %29
  %99 = and i32 %17, %50
  %100 = xor i32 %36, %0
  %101 = xor i32 %33, -1
  %102 = and i32 %18, %101
  %103 = or i32 %47, %1
  %104 = xor i32 %89, %0
  %105 = xor i32 %73, -1
  %106 = xor i32 %5, %10
  %107 = or i32 %90, %0
  %108 = add i32 %29, 1
  %109 = or i32 %29, %4
  %110 = and i32 %94, %0
  %111 = shl i32 %110, 1
  %112 = and i32 %4, %30
  %113 = and i32 %92, %16
  %114 = or i32 %25, %43
  %115 = xor i32 %52, %0
  %116 = xor i32 %115, -1
  %117 = xor i32 %25, %116
  %118 = and i32 %18, %16
  %119 = and i32 %73, %94
  %120 = or i32 %15, %4
  %121 = xor i32 %5, %69
  %122 = shl i32 %121, 1
  %123 = or i32 %4, %51
  %124 = xor i32 %5, %1
  %125 = shl i32 %124, 1
  %126 = or i32 %4, %16
  %127 = or i32 %11, %42
  %128 = and i32 %52, %0
  %129 = or i32 %15, %18
  %130 = or i32 %66, %79
  %131 = xor i32 %8, %73
  %132 = add i32 %20, 1
  %133 = or i32 %4, %105
  %134 = shl i32 %133, 1
  %135 = and i32 %17, %73
  %136 = or i32 %15, %47
  %137 = and i32 %10, %42
  %138 = or i32 %25, %115
  %139 = and i32 %4, %16
  %140 = xor i32 %92, -1
  %141 = or i32 %140, %13
  %142 = or i32 %94, %0
  %143 = xor i32 %27, %44
  %144 = add i32 %5, 1
  %145 = and i32 %15, %18
  %146 = shl i32 %145, 1
  %147 = xor i32 %8, %20
  %148 = and i32 %73, %4
  %149 = and i32 %4, %101
  %150 = or i32 %36, %42
  %151 = or i32 %8, %105
  %152 = or i32 %21, %42
  %153 = shl i32 %152, 1
  %154 = and i32 %10, %0
  %155 = shl i32 %154, 1
  %156 = and i32 %90, %42
  %157 = or i32 %36, %0
  %158 = shl i32 %157, 1
  %159 = or i32 %8, %51
  %160 = and i32 %36, %42
  %161 = xor i32 %160, -1
  %162 = xor i32 %128, %161
  %163 = and i32 %18, %13
  %164 = or i32 %29, %2
  %165 = or i32 %52, %105
  %166 = shl i32 %50, 1
  %167 = and i32 %92, %15
  %168 = shl i32 %167, 1
  %169 = or i32 %66, %116
  %170 = or i32 %140, %16
  %171 = or i32 %51, %2
  %172 = shl i32 %171, 1
  %173 = or i32 %29, %11
  %174 = and i32 %92, %1
  %175 = or i32 %8, %89
  %176 = xor i32 %8, -1
  %177 = and i32 %176, %13
  %178 = shl i32 %177, 1
  %179 = and i32 %15, %4
  %180 = xor i32 %38, %1
  %181 = and i32 %17, %15
  %182 = xor i32 %94, %0
  %183 = xor i32 %96, %161
  %184 = or i32 %10, %42
  %185 = xor i32 %6, %1
  %186 = or i32 %160, %96
  %187 = and i32 %94, %30
  %188 = and i32 %15, %2
  %189 = or i32 %52, %33
  %190 = and i32 %38, %15
  %191 = or i32 %18, %105
  %192 = shl i32 %191, 1
  %193 = xor i32 %38, %29
  %194 = add i32 %17, 1
  %195 = xor i32 %51, %2
  %196 = and i32 %176, %16
  %197 = or i32 %69, %0
  %198 = xor i32 %79, -1
  %199 = xor i32 %66, %198
  %200 = or i32 %15, %140
  %201 = shl i32 %200, 1
  %202 = or i32 %17, %15
  %203 = xor i32 %10, %0
  %204 = or i32 %5, %16
  %205 = xor i32 %8, %90
  %206 = and i32 %52, %50
  %207 = or i32 %8, %16
  %208 = xor i32 %92, %1
  %209 = xor i32 %81, -1
  %210 = xor i32 %80, %209
  %211 = or i32 %52, %29
  %212 = and i32 %52, %101
  %213 = shl i32 %212, 1
  %214 = xor i32 %92, %29
  %215 = or i32 %17, %51
  %216 = xor i32 %29, %2
  %217 = xor i32 %69, %0
  %218 = shl i32 %217, 1
  %219 = and i32 %15, %6
  %220 = or i32 %18, %51
  %221 = shl i32 %220, 1
  %222 = or i32 %5, %13
  %223 = shl i32 %222, 1
  %224 = or i32 %105, %2
  %225 = xor i32 %101, %2
  %226 = or i32 %15, %2
  %227 = and i32 %69, %42
  %228 = and i32 %94, %42
  %229 = or i32 %5, %1
  %230 = or i32 %47, %16
  %231 = and i32 %50, %18
  %232 = xor i32 %54, -1
  %233 = or i32 %25, %232
  %234 = and i32 %21, %42
  %235 = and i32 %89, %42
  %236 = mul i32 %235, 6
  %237 = and i32 %21, %0
  %238 = mul i32 %237, 18
  %239 = and i32 %89, %0
  %240 = and i32 %11, %42
  %241 = and i32 %11, %0
  %242 = mul i32 %241, 22
  %243 = add i32 %188, -1
  %244 = add i32 %243, %149
  %245 = add i32 %244, %139
  %246 = add i32 %245, %87
  %247 = add i32 %246, %239
  %248 = add i32 %247, %211
  %249 = add i32 %248, %206
  %250 = add i32 %249, %203
  %251 = add i32 %250, %165
  %252 = add i32 %251, %136
  %253 = add i32 %252, %103
  %254 = add i32 %253, %97
  %255 = add i32 %254, %93
  %256 = add i32 %255, %88
  %257 = add i32 %256, %65
  %258 = add i32 %257, %114
  %259 = add i32 %258, %68
  %260 = add i32 %259, %72
  %261 = shl i32 %260, 1
  %262 = sub i32 %94, %62
  %263 = add i32 %262, %100
  %264 = add i32 %263, %160
  %265 = mul i32 %264, 3
  %266 = add i32 %240, %234
  %267 = shl i32 %266, 3
  %268 = add i32 %129, %14
  %269 = shl i32 %268, 2
  %270 = add i32 %182, %69
  %271 = mul i32 %270, -5
  %272 = sub i32 -2, %1
  %273 = sub i32 %272, %2
  %274 = add i32 %273, %50
  %275 = add i32 %274, 2
  %276 = add i32 %275, %105
  %277 = add i32 %276, %108
  %278 = sub i32 %277, %33
  %279 = add i32 %278, %29
  %280 = add i32 %279, %36
  %281 = sub i32 %280, %56
  %282 = sub i32 %281, %64
  %283 = add i32 %282, %17
  %284 = add i32 %283, %77
  %285 = add i32 %284, %92
  %286 = sub i32 %285, %109
  %287 = sub i32 %286, %112
  %288 = sub i32 %287, %120
  %289 = add i32 %288, %123
  %290 = add i32 %289, %90
  %291 = sub i32 %290, %126
  %292 = sub i32 %291, %52
  %293 = add i32 %292, %132
  %294 = add i32 %293, %144
  %295 = add i32 %294, %148
  %296 = sub i32 %295, %164
  %297 = sub i32 %296, %166
  %298 = sub i32 %297, %179
  %299 = add i32 %298, %5
  %300 = add i32 %299, %194
  %301 = add i32 %300, %195
  %302 = sub i32 %301, %8
  %303 = sub i32 %302, %216
  %304 = sub i32 %303, %224
  %305 = add i32 %304, %225
  %306 = add i32 %305, %226
  %307 = sub i32 %306, %9
  %308 = add i32 %307, %12
  %309 = sub i32 %308, %19
  %310 = sub i32 %309, %34
  %311 = sub i32 %310, %35
  %312 = sub i32 %311, %37
  %313 = sub i32 %312, %39
  %314 = sub i32 %313, %46
  %315 = sub i32 %314, %48
  %316 = sub i32 %315, %49
  %317 = sub i32 %316, %53
  %318 = add i32 %317, %59
  %319 = add i32 %318, %60
  %320 = sub i32 %319, %61
  %321 = add i32 %320, %63
  %322 = add i32 %321, %70
  %323 = sub i32 %322, %76
  %324 = add i32 %323, %78
  %325 = add i32 %324, %79
  %326 = add i32 %325, %83
  %327 = sub i32 %326, %84
  %328 = sub i32 %327, %91
  %329 = sub i32 %328, %95
  %330 = sub i32 %329, %96
  %331 = add i32 %330, %98
  %332 = sub i32 %331, %99
  %333 = sub i32 %332, %102
  %334 = sub i32 %333, %104
  %335 = add i32 %334, %106
  %336 = add i32 %335, %107
  %337 = add i32 %336, %113
  %338 = add i32 %337, %118
  %339 = sub i32 %338, %119
  %340 = sub i32 %339, %127
  %341 = sub i32 %340, %128
  %342 = sub i32 %341, %131
  %343 = sub i32 %342, %134
  %344 = sub i32 %343, %135
  %345 = sub i32 %344, %137
  %346 = sub i32 %345, %141
  %347 = sub i32 %346, %142
  %348 = sub i32 %347, %115
  %349 = sub i32 %348, %147
  %350 = sub i32 %349, %150
  %351 = add i32 %350, %151
  %352 = sub i32 %351, %156
  %353 = add i32 %352, %159
  %354 = add i32 %353, %163
  %355 = add i32 %354, %170
  %356 = sub i32 %355, %172
  %357 = sub i32 %356, %173
  %358 = add i32 %357, %174
  %359 = add i32 %358, %175
  %360 = add i32 %359, %180
  %361 = add i32 %360, %181
  %362 = add i32 %361, %184
  %363 = sub i32 %362, %185
  %364 = add i32 %363, %187
  %365 = add i32 %364, %189
  %366 = sub i32 %365, %190
  %367 = sub i32 %366, %193
  %368 = add i32 %367, %196
  %369 = sub i32 %368, %197
  %370 = add i32 %369, %85
  %371 = sub i32 %370, %202
  %372 = add i32 %371, %204
  %373 = sub i32 %372, %205
  %374 = add i32 %373, %207
  %375 = sub i32 %374, %208
  %376 = sub i32 %375, %214
  %377 = add i32 %376, %215
  %378 = add i32 %377, %219
  %379 = add i32 %378, %54
  %380 = sub i32 %379, %227
  %381 = add i32 %380, %228
  %382 = add i32 %381, %229
  %383 = sub i32 %382, %230
  %384 = add i32 %383, %231
  %385 = add i32 %384, %66
  %386 = sub i32 %385, %23
  %387 = add i32 %386, %28
  %388 = sub i32 %387, %32
  %389 = sub i32 %388, %41
  %390 = sub i32 %389, %45
  %391 = add i32 %390, %55
  %392 = sub i32 %391, %58
  %393 = sub i32 %392, %75
  %394 = add i32 %393, %82
  %395 = add i32 %394, %86
  %396 = sub i32 %395, %111
  %397 = add i32 %396, %117
  %398 = sub i32 %397, %122
  %399 = sub i32 %398, %125
  %400 = add i32 %399, %130
  %401 = add i32 %400, %138
  %402 = sub i32 %401, %143
  %403 = sub i32 %402, %146
  %404 = sub i32 %403, %153
  %405 = sub i32 %404, %155
  %406 = sub i32 %405, %158
  %407 = add i32 %406, %162
  %408 = sub i32 %407, %168
  %409 = sub i32 %408, %169
  %410 = sub i32 %409, %178
  %411 = add i32 %410, %183
  %412 = add i32 %411, %186
  %413 = sub i32 %412, %192
  %414 = sub i32 %413, %199
  %415 = sub i32 %414, %201
  %416 = add i32 %415, %210
  %417 = sub i32 %416, %213
  %418 = sub i32 %417, %218
  %419 = sub i32 %418, %221
  %420 = sub i32 %419, %223
  %421 = sub i32 %420, %233
  %422 = add i32 %421, %236
  %423 = add i32 %422, %238
  %424 = add i32 %423, %242
  %425 = add i32 %424, %267
  %426 = add i32 %425, %269
  %427 = add i32 %426, %271
  %428 = add i32 %427, %265
  %429 = add i32 %428, %261
  %430 = icmp eq i32 %7, %429
  %431 = select i1 %430, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %432 = tail call i32 @puts(i8* nonnull dereferenceable(1) %431)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
