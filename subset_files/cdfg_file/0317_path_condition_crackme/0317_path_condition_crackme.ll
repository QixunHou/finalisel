; ModuleID = '../.././c_source_file/0317_path_condition_crackme.c'
source_filename = "../.././c_source_file/0317_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = or i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = xor i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %13
  %17 = sub i32 %16, %11
  %18 = xor i32 %5, -1
  %19 = or i32 %18, %4
  %20 = xor i32 %4, %3
  %21 = xor i32 %20, -1
  %22 = and i32 %19, %21
  %23 = sub i32 %17, %22
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %2
  %26 = and i32 %25, %0
  %27 = or i32 %14, %0
  %28 = xor i32 %26, %27
  %29 = xor i32 %2, %0
  %30 = or i32 %29, %10
  %31 = or i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %32, %24
  %34 = and i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = and i32 %15, %35
  %37 = and i32 %12, %2
  %38 = and i32 %9, %2
  %39 = or i32 %2, %1
  %40 = xor i32 %15, %0
  %41 = xor i32 %0, -1
  %42 = or i32 %15, %41
  %43 = shl i32 %42, 1
  %44 = xor i32 %29, -1
  %45 = and i32 %44, %1
  %46 = and i32 %44, %35
  %47 = and i32 %24, %0
  %48 = or i32 %47, %2
  %49 = shl i32 %48, 1
  %50 = xor i32 %2, -1
  %51 = or i32 %47, %50
  %52 = and i32 %50, %1
  %53 = or i32 %52, %47
  %54 = add i32 %1, 1
  %55 = or i32 %24, %0
  %56 = and i32 %55, %15
  %57 = and i32 %29, %10
  %58 = or i32 %39, %41
  %59 = and i32 %2, %1
  %60 = and i32 %59, %0
  %61 = and i32 %14, %41
  %62 = xor i32 %60, -1
  %63 = xor i32 %61, %62
  %64 = and i32 %14, %0
  %65 = or i32 %44, %1
  %66 = and i32 %25, %41
  %67 = or i32 %14, %41
  %68 = xor i32 %66, %67
  %69 = or i32 %24, %2
  %70 = and i32 %69, %0
  %71 = or i32 %66, %70
  %72 = shl i32 %15, 1
  %73 = xor i32 %7, %55
  %74 = xor i32 %14, %0
  %75 = xor i32 %74, -1
  %76 = xor i32 %26, %75
  %77 = xor i32 %7, %39
  %78 = or i32 %50, %0
  %79 = or i32 %44, %13
  %80 = and i32 %29, %55
  %81 = and i32 %50, %0
  %82 = or i32 %81, %1
  %83 = shl i32 %82, 1
  %84 = xor i32 %52, -1
  %85 = xor i32 %47, %84
  %86 = or i32 %34, %50
  %87 = or i32 %32, %1
  %88 = xor i32 %52, %0
  %89 = xor i32 %67, 2147483647
  %90 = or i32 %89, %66
  %91 = shl i32 %90, 1
  %92 = or i32 %29, %13
  %93 = and i32 %29, %9
  %94 = xor i32 %55, -1
  %95 = or i32 %14, %94
  %96 = and i32 %78, %1
  %97 = and i32 %59, %41
  %98 = xor i32 %97, -1
  %99 = xor i32 %64, %98
  %100 = and i32 %84, %41
  %101 = or i32 %14, %13
  %102 = or i32 %81, %10
  %103 = xor i32 %39, -1
  %104 = or i32 %103, %41
  %105 = xor i32 %47, -1
  %106 = and i32 %105, %2
  %107 = and i32 %14, %12
  %108 = shl i32 %107, 2
  %109 = and i32 %35, %2
  %110 = xor i32 %55, %2
  %111 = shl i32 %2, 1
  %112 = and i32 %44, %10
  %113 = or i32 %14, %34
  %114 = and i32 %39, %0
  %115 = xor i32 %114, %98
  %116 = xor i32 %105, %2
  %117 = and i32 %29, %35
  %118 = and i32 %15, %41
  %119 = or i32 %34, %2
  %120 = and i32 %39, %41
  %121 = or i32 %94, %2
  %122 = shl i32 %121, 1
  %123 = and i32 %29, %24
  %124 = or i32 %29, %9
  %125 = add i32 %34, 1
  %126 = and i32 %15, %105
  %127 = shl i32 %14, 1
  %128 = and i32 %9, %8
  %129 = shl i32 %32, 1
  %130 = and i32 %55, %50
  %131 = xor i32 %81, -1
  %132 = and i32 %131, %10
  %133 = shl i32 %132, 1
  %134 = or i32 %97, %64
  %135 = and i32 %78, %10
  %136 = or i32 %84, %41
  %137 = or i32 %60, %120
  %138 = or i32 %84, %0
  %139 = or i32 %81, %24
  %140 = xor i32 %78, -1
  %141 = or i32 %140, %24
  %142 = xor i32 %59, %0
  %143 = and i32 %78, %24
  %144 = and i32 %10, %2
  %145 = xor i32 %59, -1
  %146 = or i32 %145, %0
  %147 = or i32 %39, %0
  %148 = and i32 %29, %12
  %149 = xor i32 %84, %0
  %150 = xor i32 %69, %0
  %151 = xor i32 %150, -1
  %152 = xor i32 %26, %151
  %153 = and i32 %14, %55
  %154 = xor i32 %39, %0
  %155 = or i32 %60, %154
  %156 = or i32 %60, %61
  %157 = xor i32 %13, %2
  %158 = and i32 %145, %41
  %159 = or i32 %15, %94
  %160 = and i32 %12, %50
  %161 = xor i32 %8, %1
  %162 = or i32 %140, %10
  %163 = xor i32 %39, %34
  %164 = or i32 %50, %1
  %165 = shl i32 %164, 1
  %166 = and i32 %131, %24
  %167 = and i32 %31, %10
  %168 = xor i32 %32, %1
  %169 = xor i32 %164, %0
  %170 = or i32 %14, %47
  %171 = or i32 %13, %2
  %172 = or i32 %34, %32
  %173 = and i32 %50, %105
  %174 = and i32 %29, %105
  %175 = or i32 %34, %103
  %176 = xor i32 %131, %1
  %177 = and i32 %145, %0
  %178 = or i32 %32, %10
  %179 = xor i32 %164, -1
  %180 = or i32 %81, %179
  %181 = shl i32 %180, 1
  %182 = or i32 %9, %2
  %183 = xor i32 %154, %62
  %184 = or i32 %29, %34
  %185 = and i32 %69, %41
  %186 = or i32 %26, %185
  %187 = or i32 %50, %13
  %188 = xor i32 %27, 2147483647
  %189 = or i32 %188, %26
  %190 = shl i32 %189, 1
  %191 = or i32 %44, %10
  %192 = and i32 %31, %24
  %193 = or i32 %29, %1
  %194 = shl i32 %193, 1
  %195 = or i32 %164, %41
  %196 = or i32 %179, %41
  %197 = and i32 %8, %24
  %198 = and i32 %15, %0
  %199 = shl i32 %105, 1
  %200 = xor i32 %94, %2
  %201 = xor i32 %7, %12
  %202 = or i32 %34, %140
  %203 = shl i32 %202, 1
  %204 = or i32 %179, %0
  %205 = shl i32 %50, 1
  %206 = or i32 %7, %103
  %207 = or i32 %34, %44
  %208 = or i32 %9, %140
  %209 = xor i32 %81, %145
  %210 = or i32 %34, %15
  %211 = and i32 %84, %0
  %212 = shl i32 %211, 1
  %213 = or i32 %29, %24
  %214 = or i32 %10, %2
  %215 = and i32 %44, %24
  %216 = or i32 %97, %114
  %217 = or i32 %81, %9
  %218 = or i32 %7, %24
  %219 = or i32 %59, %41
  %220 = and i32 %78, %9
  %221 = add i32 %39, 1
  %222 = or i32 %9, %50
  %223 = or i32 %59, %47
  %224 = and i32 %50, %35
  %225 = and i32 %9, %50
  %226 = or i32 %145, %41
  %227 = or i32 %50, %10
  %228 = or i32 %60, %75
  %229 = or i32 %7, %9
  %230 = xor i32 %103, %0
  %231 = xor i32 %31, %34
  %232 = and i32 %29, %1
  %233 = xor i32 %81, %164
  %234 = or i32 %9, %44
  %235 = shl i32 %234, 1
  %236 = or i32 %52, %0
  %237 = and i32 %164, %41
  %238 = and i32 %164, %0
  %239 = or i32 %9, %32
  %240 = or i32 %26, %74
  %241 = or i32 %44, %24
  %242 = shl i32 %7, 1
  %243 = or i32 %7, %10
  %244 = xor i32 %70, 2147483647
  %245 = xor i32 %244, %66
  %246 = shl i32 %245, 1
  %247 = and i32 %44, %105
  %248 = xor i32 %164, %34
  %249 = or i32 %26, %150
  %250 = xor i32 %7, %84
  %251 = and i32 %31, %9
  %252 = and i32 %55, %44
  %253 = add i32 %164, 1
  %254 = xor i32 %31, %1
  %255 = and i32 %12, %15
  %256 = or i32 %164, %0
  %257 = or i32 %50, %94
  %258 = shl i32 %257, 1
  %259 = xor i32 %145, %0
  %260 = and i32 %12, %44
  %261 = and i32 %103, %41
  %262 = mul i32 %261, -14
  %263 = and i32 %52, %41
  %264 = mul i32 %263, -11
  %265 = and i32 %103, %0
  %266 = mul i32 %265, -19
  %267 = and i32 %52, %0
  %268 = mul i32 %267, -22
  %269 = and i32 %179, %41
  %270 = mul i32 %269, -24
  %271 = shl i32 %97, 2
  %272 = and i32 %18, %3
  %273 = or i32 %272, %4
  %274 = xor i32 %3, -1
  %275 = or i32 %5, %4
  %276 = and i32 %275, %274
  %277 = and i32 %5, %4
  %278 = or i32 %274, %4
  %279 = xor i32 %277, %278
  %280 = or i32 %5, %3
  %281 = xor i32 %280, -1
  %282 = xor i32 %4, -1
  %283 = and i32 %5, %3
  %284 = and i32 %283, %282
  %285 = and i32 %280, %4
  %286 = xor i32 %285, -1
  %287 = xor i32 %284, %286
  %288 = and i32 %19, %3
  %289 = or i32 %4, %3
  %290 = xor i32 %289, -1
  %291 = or i32 %290, %5
  %292 = and i32 %4, %3
  %293 = or i32 %18, %3
  %294 = xor i32 %293, -1
  %295 = or i32 %292, %294
  %296 = xor i32 %5, %3
  %297 = and i32 %296, %289
  %298 = and i32 %283, %4
  %299 = xor i32 %296, %282
  %300 = or i32 %298, %299
  %301 = xor i32 %275, -1
  %302 = or i32 %301, %3
  %303 = and i32 %275, %3
  %304 = xor i32 %277, -1
  %305 = and i32 %304, %3
  %306 = xor i32 %296, -1
  %307 = and i32 %306, %282
  %308 = and i32 %274, %4
  %309 = and i32 %308, %5
  %310 = or i32 %296, %4
  %311 = xor i32 %309, %310
  %312 = xor i32 %272, %4
  %313 = or i32 %272, %308
  %314 = xor i32 %292, %5
  %315 = and i32 %304, %274
  %316 = xor i32 %308, -1
  %317 = xor i32 %278, 2147483647
  %318 = xor i32 %5, %4
  %319 = xor i32 %318, -1
  %320 = or i32 %317, %319
  %321 = shl i32 %320, 1
  %322 = and i32 %318, %3
  %323 = and i32 %278, %5
  %324 = or i32 %282, %5
  %325 = and i32 %324, %20
  %326 = shl i32 %325, 1
  %327 = or i32 %292, %281
  %328 = and i32 %278, %319
  %329 = shl i32 %328, 1
  %330 = xor i32 %289, %5
  %331 = or i32 %306, %282
  %332 = or i32 %21, %5
  %333 = or i32 %277, %290
  %334 = shl i32 %333, 1
  %335 = xor i32 %272, -1
  %336 = or i32 %335, %282
  %337 = or i32 %318, %3
  %338 = xor i32 %292, -1
  %339 = xor i32 %277, %335
  %340 = and i32 %281, %282
  %341 = and i32 %272, %282
  %342 = and i32 %281, %4
  %343 = and i32 %272, %4
  %344 = and i32 %294, %282
  %345 = mul i32 %344, -6
  %346 = shl i32 %284, 1
  %347 = and i32 %294, %4
  %348 = add i32 %44, %94
  %349 = add i32 %348, %145
  %350 = add i32 %349, %86
  %351 = add i32 %350, %259
  %352 = add i32 %351, %255
  %353 = add i32 %352, %254
  %354 = add i32 %353, %233
  %355 = add i32 %354, %226
  %356 = add i32 %355, %208
  %357 = add i32 %356, %204
  %358 = add i32 %357, %197
  %359 = add i32 %358, %184
  %360 = add i32 %359, %27
  %361 = add i32 %360, %142
  %362 = add i32 %361, %136
  %363 = add i32 %362, %102
  %364 = add i32 %363, %77
  %365 = add i32 %364, %57
  %366 = add i32 %365, %30
  %367 = add i32 %366, %240
  %368 = add i32 %367, %314
  %369 = add i32 %368, %291
  %370 = add i32 %369, %340
  %371 = add i32 %370, %341
  %372 = add i32 %371, %336
  %373 = add i32 %372, %295
  %374 = shl i32 %373, 1
  %375 = sub i32 %173, %38
  %376 = sub i32 %375, %248
  %377 = add i32 %376, %123
  %378 = add i32 %377, %58
  %379 = sub i32 %378, %216
  %380 = sub i32 %379, %342
  %381 = add i32 %380, %347
  %382 = mul i32 %381, 3
  %383 = add i32 %250, -1
  %384 = add i32 %383, %45
  %385 = sub i32 %384, %71
  %386 = sub i32 %385, %343
  %387 = mul i32 %386, 5
  %388 = sub i32 %298, %60
  %389 = mul i32 %388, 7
  %390 = add i32 %156, %95
  %391 = shl i32 %390, 2
  %392 = sub i32 %54, %0
  %393 = add i32 %392, %34
  %394 = add i32 %393, %10
  %395 = add i32 %394, %125
  %396 = add i32 %395, %47
  %397 = sub i32 %396, %9
  %398 = add i32 %397, %37
  %399 = add i32 %398, %39
  %400 = add i32 %399, %51
  %401 = sub i32 %400, %59
  %402 = sub i32 %401, %78
  %403 = sub i32 %402, %106
  %404 = add i32 %403, %109
  %405 = add i32 %404, %110
  %406 = sub i32 %405, %111
  %407 = sub i32 %406, %116
  %408 = add i32 %407, %29
  %409 = add i32 %408, %119
  %410 = sub i32 %409, %130
  %411 = add i32 %410, %144
  %412 = add i32 %411, %157
  %413 = add i32 %412, %31
  %414 = sub i32 %413, %160
  %415 = add i32 %414, %84
  %416 = sub i32 %415, %171
  %417 = sub i32 %416, %182
  %418 = sub i32 %417, %187
  %419 = sub i32 %418, %199
  %420 = sub i32 %419, %200
  %421 = sub i32 %420, %205
  %422 = add i32 %421, %214
  %423 = sub i32 %422, %81
  %424 = add i32 %423, %221
  %425 = add i32 %424, %222
  %426 = sub i32 %425, %224
  %427 = add i32 %426, %225
  %428 = add i32 %427, %227
  %429 = add i32 %428, %253
  %430 = add i32 %429, %33
  %431 = sub i32 %430, %36
  %432 = add i32 %431, %40
  %433 = add i32 %432, %46
  %434 = sub i32 %433, %49
  %435 = add i32 %434, %53
  %436 = add i32 %435, %56
  %437 = sub i32 %436, %64
  %438 = add i32 %437, %65
  %439 = sub i32 %438, %72
  %440 = add i32 %439, %73
  %441 = sub i32 %440, %79
  %442 = add i32 %441, %80
  %443 = add i32 %442, %85
  %444 = sub i32 %443, %87
  %445 = add i32 %444, %88
  %446 = add i32 %445, %92
  %447 = add i32 %446, %93
  %448 = sub i32 %447, %96
  %449 = sub i32 %448, %100
  %450 = sub i32 %449, %101
  %451 = add i32 %450, %104
  %452 = add i32 %451, %112
  %453 = sub i32 %452, %113
  %454 = sub i32 %453, %117
  %455 = add i32 %454, %118
  %456 = sub i32 %455, %120
  %457 = sub i32 %456, %74
  %458 = sub i32 %457, %122
  %459 = add i32 %458, %124
  %460 = sub i32 %459, %126
  %461 = sub i32 %460, %127
  %462 = add i32 %461, %128
  %463 = sub i32 %462, %129
  %464 = add i32 %463, %135
  %465 = add i32 %464, %138
  %466 = add i32 %465, %139
  %467 = add i32 %466, %141
  %468 = sub i32 %467, %67
  %469 = sub i32 %468, %114
  %470 = sub i32 %469, %143
  %471 = sub i32 %470, %146
  %472 = add i32 %471, %147
  %473 = sub i32 %472, %148
  %474 = sub i32 %473, %149
  %475 = add i32 %474, %153
  %476 = add i32 %475, %158
  %477 = add i32 %476, %159
  %478 = sub i32 %477, %161
  %479 = sub i32 %478, %162
  %480 = sub i32 %479, %163
  %481 = sub i32 %480, %165
  %482 = sub i32 %481, %166
  %483 = add i32 %482, %167
  %484 = add i32 %483, %168
  %485 = sub i32 %484, %169
  %486 = sub i32 %485, %170
  %487 = sub i32 %486, %172
  %488 = sub i32 %487, %174
  %489 = add i32 %488, %175
  %490 = add i32 %489, %176
  %491 = sub i32 %490, %177
  %492 = sub i32 %491, %178
  %493 = add i32 %492, %191
  %494 = add i32 %493, %192
  %495 = sub i32 %494, %195
  %496 = sub i32 %495, %196
  %497 = add i32 %496, %198
  %498 = add i32 %497, %201
  %499 = add i32 %498, %206
  %500 = sub i32 %499, %207
  %501 = sub i32 %500, %209
  %502 = add i32 %501, %210
  %503 = add i32 %502, %213
  %504 = add i32 %503, %215
  %505 = sub i32 %504, %217
  %506 = sub i32 %505, %218
  %507 = sub i32 %506, %219
  %508 = add i32 %507, %220
  %509 = sub i32 %508, %223
  %510 = add i32 %509, %229
  %511 = add i32 %510, %230
  %512 = add i32 %511, %231
  %513 = add i32 %512, %232
  %514 = add i32 %513, %236
  %515 = add i32 %514, %237
  %516 = sub i32 %515, %238
  %517 = sub i32 %516, %154
  %518 = sub i32 %517, %239
  %519 = sub i32 %518, %241
  %520 = sub i32 %519, %242
  %521 = add i32 %520, %243
  %522 = add i32 %521, %247
  %523 = sub i32 %522, %251
  %524 = sub i32 %523, %252
  %525 = add i32 %524, %256
  %526 = sub i32 %525, %258
  %527 = sub i32 %526, %260
  %528 = sub i32 %527, %4
  %529 = add i32 %528, %28
  %530 = sub i32 %529, %43
  %531 = add i32 %530, %63
  %532 = sub i32 %531, %68
  %533 = add i32 %532, %76
  %534 = sub i32 %533, %83
  %535 = sub i32 %534, %99
  %536 = sub i32 %535, %108
  %537 = add i32 %536, %115
  %538 = sub i32 %537, %133
  %539 = add i32 %538, %134
  %540 = add i32 %539, %137
  %541 = add i32 %540, %152
  %542 = sub i32 %541, %155
  %543 = sub i32 %542, %181
  %544 = add i32 %543, %183
  %545 = sub i32 %544, %186
  %546 = sub i32 %545, %194
  %547 = sub i32 %546, %203
  %548 = sub i32 %547, %212
  %549 = sub i32 %548, %228
  %550 = sub i32 %549, %235
  %551 = sub i32 %550, %249
  %552 = add i32 %551, %262
  %553 = add i32 %552, %264
  %554 = add i32 %553, %266
  %555 = add i32 %554, %268
  %556 = add i32 %555, %270
  %557 = sub i32 %556, %271
  %558 = add i32 %557, %316
  %559 = add i32 %558, %338
  %560 = add i32 %559, %281
  %561 = sub i32 %560, %293
  %562 = sub i32 %561, %323
  %563 = sub i32 %562, %330
  %564 = sub i32 %563, %332
  %565 = sub i32 %564, %324
  %566 = sub i32 %565, %91
  %567 = sub i32 %566, %190
  %568 = sub i32 %567, %246
  %569 = add i32 %568, %273
  %570 = sub i32 %569, %276
  %571 = add i32 %570, %279
  %572 = sub i32 %571, %288
  %573 = add i32 %572, %297
  %574 = sub i32 %573, %302
  %575 = add i32 %574, %303
  %576 = add i32 %575, %305
  %577 = sub i32 %576, %307
  %578 = sub i32 %577, %312
  %579 = add i32 %578, %313
  %580 = add i32 %579, %315
  %581 = add i32 %580, %322
  %582 = sub i32 %581, %327
  %583 = sub i32 %582, %331
  %584 = add i32 %583, %337
  %585 = add i32 %584, %339
  %586 = add i32 %585, %391
  %587 = add i32 %586, %287
  %588 = sub i32 %587, %300
  %589 = sub i32 %588, %311
  %590 = sub i32 %589, %321
  %591 = sub i32 %590, %326
  %592 = sub i32 %591, %329
  %593 = sub i32 %592, %334
  %594 = add i32 %593, %345
  %595 = sub i32 %594, %346
  %596 = add i32 %595, %389
  %597 = add i32 %596, %387
  %598 = add i32 %597, %382
  %599 = add i32 %598, %374
  %600 = icmp eq i32 %23, %599
  %601 = select i1 %600, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %602 = tail call i32 @puts(i8* nonnull dereferenceable(1) %601)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
