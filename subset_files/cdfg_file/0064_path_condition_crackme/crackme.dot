digraph "DFG for'crackme' function" {
	Node0x1080bd0[shape=record, label="  %5 = xor i32 %3, %0"];
	Node0x1081250[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x10812f0[shape=record, label="  %7 = add i32 %0, 2"];
	Node0x1081360[shape=record, label="  %8 = add i32 %7, %2"];
	Node0x10813d0[shape=record, label="  %9 = add i32 %8, %5"];
	Node0x1081440[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x10814b0[shape=record, label="  %11 = or i32 %10, %1"];
	Node0x1081520[shape=record, label="  %12 = and i32 %10, %1"];
	Node0x1081590[shape=record, label="  %13 = shl i32 %12, 2"];
	Node0x1081630[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x10816a0[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x1081740[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x10817e0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x1081850[shape=record, label="  %18 = or i32 %2, %1"];
	Node0x10818c0[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x1081960[shape=record, label="  %20 = mul i32 %19, 3"];
	Node0x10819d0[shape=record, label="  %21 = shl i32 %11, 1"];
	Node0x1081a40[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x1081ae0[shape=record, label="  %23 = mul i32 %12, 6"];
	Node0x1081b50[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x1081bc0[shape=record, label="  %25 = and i32 %6, %3"];
	Node0x1081c30[shape=record, label="  %26 = xor i32 %3, -1"];
	Node0x1081ca0[shape=record, label="  %27 = and i32 %26, %0"];
	Node0x1081d40[shape=record, label="  %28 = mul i32 %25, -5"];
	Node0x1081db0[shape=record, label="  %29 = shl i32 %24, 1"];
	Node0x1081e20[shape=record, label="  %30 = add i32 %5, %3"];
	Node0x1081e90[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x1081f00[shape=record, label="  %32 = add i32 %0, 6"];
	Node0x1082180[shape=record, label="  %33 = sub i32 %32, %11"];
	Node0x10821f0[shape=record, label="  %34 = add i32 %33, %18"];
	Node0x1082260[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x10822d0[shape=record, label="  %36 = add i32 %35, %3"];
	Node0x1082340[shape=record, label="  %37 = add i32 %36, %20"];
	Node0x10823b0[shape=record, label="  %38 = add i32 %37, %23"];
	Node0x1082420[shape=record, label="  %39 = sub i32 %38, %24"];
	Node0x1082490[shape=record, label="  %40 = add i32 %39, %25"];
	Node0x1082500[shape=record, label="  %41 = sub i32 %40, %27"];
	Node0x1082570[shape=record, label="  %42 = add i32 %41, %14"];
	Node0x10825e0[shape=record, label="  %43 = sub i32 %42, %17"];
	Node0x1082650[shape=record, label="  %44 = add i32 %43, %22"];
	Node0x10826c0[shape=record, label="  %45 = add i32 %44, %28"];
	Node0x1082730[shape=record, label="  %46 = sub i32 %45, %29"];
	Node0x10827a0[shape=record, label="  %47 = add i32 %46, %31"];
	Node0x1082810[shape=record, label="  %48 = icmp eq i32 %9, %47"];
	Node0x1021268[shape=record, label="  %49 = select i1 %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1082cb0[shape=record, label="  %50 = tail call i32 @puts(i8* nonnull dereferenceable(1) %49)"];
	Node0x1082d00[shape=record, label="  ret void"];
	Node0x1080bd0 -> Node0x1081250;
	Node0x1081250 -> Node0x10812f0;
	Node0x10812f0 -> Node0x1081360;
	Node0x1081360 -> Node0x10813d0;
	Node0x10813d0 -> Node0x1081440;
	Node0x1081440 -> Node0x10814b0;
	Node0x10814b0 -> Node0x1081520;
	Node0x1081520 -> Node0x1081590;
	Node0x1081590 -> Node0x1081630;
	Node0x1081630 -> Node0x10816a0;
	Node0x10816a0 -> Node0x1081740;
	Node0x1081740 -> Node0x10817e0;
	Node0x10817e0 -> Node0x1081850;
	Node0x1081850 -> Node0x10818c0;
	Node0x10818c0 -> Node0x1081960;
	Node0x1081960 -> Node0x10819d0;
	Node0x10819d0 -> Node0x1081a40;
	Node0x1081a40 -> Node0x1081ae0;
	Node0x1081ae0 -> Node0x1081b50;
	Node0x1081b50 -> Node0x1081bc0;
	Node0x1081bc0 -> Node0x1081c30;
	Node0x1081c30 -> Node0x1081ca0;
	Node0x1081ca0 -> Node0x1081d40;
	Node0x1081d40 -> Node0x1081db0;
	Node0x1081db0 -> Node0x1081e20;
	Node0x1081e20 -> Node0x1081e90;
	Node0x1081e90 -> Node0x1081f00;
	Node0x1081f00 -> Node0x1082180;
	Node0x1082180 -> Node0x10821f0;
	Node0x10821f0 -> Node0x1082260;
	Node0x1082260 -> Node0x10822d0;
	Node0x10822d0 -> Node0x1082340;
	Node0x1082340 -> Node0x10823b0;
	Node0x10823b0 -> Node0x1082420;
	Node0x1082420 -> Node0x1082490;
	Node0x1082490 -> Node0x1082500;
	Node0x1082500 -> Node0x1082570;
	Node0x1082570 -> Node0x10825e0;
	Node0x10825e0 -> Node0x1082650;
	Node0x1082650 -> Node0x10826c0;
	Node0x10826c0 -> Node0x1082730;
	Node0x1082730 -> Node0x10827a0;
	Node0x10827a0 -> Node0x1082810;
	Node0x1082810 -> Node0x1021268;
	Node0x1021268 -> Node0x1082cb0;
	Node0x1082cb0 -> Node0x1082d00;
edge [color=red]
	Node0x10812f0 -> Node0x1081360;
	Node0x1081360 -> Node0x10813d0;
	Node0x1080bd0 -> Node0x10813d0;
	Node0x1081440 -> Node0x10814b0;
	Node0x1081440 -> Node0x1081520;
	Node0x1081520 -> Node0x1081590;
	Node0x1081590 -> Node0x1081630;
	Node0x10816a0 -> Node0x1081740;
	Node0x1081740 -> Node0x10817e0;
	Node0x1081850 -> Node0x10818c0;
	Node0x10818c0 -> Node0x1081960;
	Node0x10814b0 -> Node0x10819d0;
	Node0x10819d0 -> Node0x1081a40;
	Node0x1081520 -> Node0x1081ae0;
	Node0x1081250 -> Node0x1081bc0;
	Node0x1081c30 -> Node0x1081ca0;
	Node0x1081bc0 -> Node0x1081d40;
	Node0x1081b50 -> Node0x1081db0;
	Node0x1080bd0 -> Node0x1081e20;
	Node0x1081e20 -> Node0x1081e90;
	Node0x1081f00 -> Node0x1082180;
	Node0x10814b0 -> Node0x1082180;
	Node0x1082180 -> Node0x10821f0;
	Node0x1081850 -> Node0x10821f0;
	Node0x10821f0 -> Node0x1082260;
	Node0x10816a0 -> Node0x1082260;
	Node0x1082260 -> Node0x10822d0;
	Node0x10822d0 -> Node0x1082340;
	Node0x1081960 -> Node0x1082340;
	Node0x1082340 -> Node0x10823b0;
	Node0x1081ae0 -> Node0x10823b0;
	Node0x10823b0 -> Node0x1082420;
	Node0x1081b50 -> Node0x1082420;
	Node0x1082420 -> Node0x1082490;
	Node0x1081bc0 -> Node0x1082490;
	Node0x1082490 -> Node0x1082500;
	Node0x1081ca0 -> Node0x1082500;
	Node0x1082500 -> Node0x1082570;
	Node0x1081630 -> Node0x1082570;
	Node0x1082570 -> Node0x10825e0;
	Node0x10817e0 -> Node0x10825e0;
	Node0x10825e0 -> Node0x1082650;
	Node0x1081a40 -> Node0x1082650;
	Node0x1082650 -> Node0x10826c0;
	Node0x1081d40 -> Node0x10826c0;
	Node0x10826c0 -> Node0x1082730;
	Node0x1081db0 -> Node0x1082730;
	Node0x1082730 -> Node0x10827a0;
	Node0x1081e90 -> Node0x10827a0;
	Node0x10813d0 -> Node0x1082810;
	Node0x10827a0 -> Node0x1082810;
	Node0x1082810 -> Node0x1021268;
	Node0x1021268 -> Node0x1082cb0;
}
