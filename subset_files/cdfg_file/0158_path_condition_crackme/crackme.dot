digraph "DFG for'crackme' function" {
	Node0x1544b70[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x1544be0[shape=record, label="  %6 = xor i32 %2, %1"];
	Node0x1544c50[shape=record, label="  %7 = sub i32 %6, %5"];
	Node0x1544cc0[shape=record, label="  %8 = xor i32 %3, %0"];
	Node0x1545340[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x15453b0[shape=record, label="  %10 = add i32 %7, %9"];
	Node0x1545420[shape=record, label="  %11 = shl i32 %1, 1"];
	Node0x15454c0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1545560[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x15455d0[shape=record, label="  %14 = or i32 %13, %1"];
	Node0x1545640[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x15456b0[shape=record, label="  %16 = xor i32 %14, -1"];
	Node0x1545720[shape=record, label="  %17 = and i32 %13, %1"];
	Node0x1545790[shape=record, label="  %18 = and i32 %3, %0"];
	Node0x1545800[shape=record, label="  %19 = xor i32 %0, -1"];
	Node0x1545870[shape=record, label="  %20 = or i32 %19, %3"];
	Node0x15458e0[shape=record, label="  %21 = and i32 %19, %3"];
	Node0x1545950[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x15459c0[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x1545a30[shape=record, label="  %24 = xor i32 %3, -1"];
	Node0x1545aa0[shape=record, label="  %25 = xor i32 %20, -1"];
	Node0x1545b40[shape=record, label="  %26 = mul i32 %25, 5"];
	Node0x1545bb0[shape=record, label="  %27 = add i32 %14, %13"];
	Node0x1545c20[shape=record, label="  %28 = add i32 %27, %3"];
	Node0x1545c90[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x1545d00[shape=record, label="  %30 = sub i32 %16, %1"];
	Node0x1545da0[shape=record, label="  %31 = mul i32 %30, 3"];
	Node0x1545e10[shape=record, label="  %32 = sub i32 3, %0"];
	Node0x1546090[shape=record, label="  %33 = add i32 %32, %19"];
	Node0x1546100[shape=record, label="  %34 = add i32 %33, %2"];
	Node0x1546170[shape=record, label="  %35 = sub i32 %34, %12"];
	Node0x15461e0[shape=record, label="  %36 = add i32 %35, %15"];
	Node0x1546250[shape=record, label="  %37 = add i32 %36, %17"];
	Node0x15462c0[shape=record, label="  %38 = add i32 %37, %24"];
	Node0x1546330[shape=record, label="  %39 = add i32 %38, %18"];
	Node0x15463a0[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x1546410[shape=record, label="  %41 = sub i32 %40, %21"];
	Node0x1546480[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x15464f0[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x1546560[shape=record, label="  %44 = sub i32 %43, %23"];
	Node0x15465d0[shape=record, label="  %45 = add i32 %44, %29"];
	Node0x1546640[shape=record, label="  %46 = icmp eq i32 %10, %45"];
	Node0x14e5268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1546ae0[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x1546b30[shape=record, label="  ret void"];
	Node0x1544b70 -> Node0x1544be0;
	Node0x1544be0 -> Node0x1544c50;
	Node0x1544c50 -> Node0x1544cc0;
	Node0x1544cc0 -> Node0x1545340;
	Node0x1545340 -> Node0x15453b0;
	Node0x15453b0 -> Node0x1545420;
	Node0x1545420 -> Node0x15454c0;
	Node0x15454c0 -> Node0x1545560;
	Node0x1545560 -> Node0x15455d0;
	Node0x15455d0 -> Node0x1545640;
	Node0x1545640 -> Node0x15456b0;
	Node0x15456b0 -> Node0x1545720;
	Node0x1545720 -> Node0x1545790;
	Node0x1545790 -> Node0x1545800;
	Node0x1545800 -> Node0x1545870;
	Node0x1545870 -> Node0x15458e0;
	Node0x15458e0 -> Node0x1545950;
	Node0x1545950 -> Node0x15459c0;
	Node0x15459c0 -> Node0x1545a30;
	Node0x1545a30 -> Node0x1545aa0;
	Node0x1545aa0 -> Node0x1545b40;
	Node0x1545b40 -> Node0x1545bb0;
	Node0x1545bb0 -> Node0x1545c20;
	Node0x1545c20 -> Node0x1545c90;
	Node0x1545c90 -> Node0x1545d00;
	Node0x1545d00 -> Node0x1545da0;
	Node0x1545da0 -> Node0x1545e10;
	Node0x1545e10 -> Node0x1546090;
	Node0x1546090 -> Node0x1546100;
	Node0x1546100 -> Node0x1546170;
	Node0x1546170 -> Node0x15461e0;
	Node0x15461e0 -> Node0x1546250;
	Node0x1546250 -> Node0x15462c0;
	Node0x15462c0 -> Node0x1546330;
	Node0x1546330 -> Node0x15463a0;
	Node0x15463a0 -> Node0x1546410;
	Node0x1546410 -> Node0x1546480;
	Node0x1546480 -> Node0x15464f0;
	Node0x15464f0 -> Node0x1546560;
	Node0x1546560 -> Node0x15465d0;
	Node0x15465d0 -> Node0x1546640;
	Node0x1546640 -> Node0x14e5268;
	Node0x14e5268 -> Node0x1546ae0;
	Node0x1546ae0 -> Node0x1546b30;
edge [color=red]
	Node0x1544be0 -> Node0x1544c50;
	Node0x1544b70 -> Node0x1544c50;
	Node0x1544cc0 -> Node0x1545340;
	Node0x1544c50 -> Node0x15453b0;
	Node0x1545340 -> Node0x15453b0;
	Node0x1545420 -> Node0x15454c0;
	Node0x1545560 -> Node0x15455d0;
	Node0x15455d0 -> Node0x15456b0;
	Node0x1545560 -> Node0x1545720;
	Node0x1545800 -> Node0x1545870;
	Node0x1545800 -> Node0x15458e0;
	Node0x15458e0 -> Node0x1545950;
	Node0x1545950 -> Node0x15459c0;
	Node0x1545870 -> Node0x1545aa0;
	Node0x1545aa0 -> Node0x1545b40;
	Node0x15455d0 -> Node0x1545bb0;
	Node0x1545560 -> Node0x1545bb0;
	Node0x1545bb0 -> Node0x1545c20;
	Node0x1545c20 -> Node0x1545c90;
	Node0x15456b0 -> Node0x1545d00;
	Node0x1545d00 -> Node0x1545da0;
	Node0x1545e10 -> Node0x1546090;
	Node0x1545800 -> Node0x1546090;
	Node0x1546090 -> Node0x1546100;
	Node0x1546100 -> Node0x1546170;
	Node0x15454c0 -> Node0x1546170;
	Node0x1546170 -> Node0x15461e0;
	Node0x1545640 -> Node0x15461e0;
	Node0x15461e0 -> Node0x1546250;
	Node0x1545720 -> Node0x1546250;
	Node0x1546250 -> Node0x15462c0;
	Node0x1545a30 -> Node0x15462c0;
	Node0x15462c0 -> Node0x1546330;
	Node0x1545790 -> Node0x1546330;
	Node0x1546330 -> Node0x15463a0;
	Node0x1545870 -> Node0x15463a0;
	Node0x15463a0 -> Node0x1546410;
	Node0x15458e0 -> Node0x1546410;
	Node0x1546410 -> Node0x1546480;
	Node0x1545b40 -> Node0x1546480;
	Node0x1546480 -> Node0x15464f0;
	Node0x1545da0 -> Node0x15464f0;
	Node0x15464f0 -> Node0x1546560;
	Node0x15459c0 -> Node0x1546560;
	Node0x1546560 -> Node0x15465d0;
	Node0x1545c90 -> Node0x15465d0;
	Node0x15453b0 -> Node0x1546640;
	Node0x15465d0 -> Node0x1546640;
	Node0x1546640 -> Node0x14e5268;
	Node0x14e5268 -> Node0x1546ae0;
}
