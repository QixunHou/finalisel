digraph "DFG for'crackme' function" {
	Node0x169b5b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x169bc60[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x169bd20[shape=record, label="  %5 = mul i32 %4, 5"];
	Node0x169bd90[shape=record, label="  %6 = add i32 %5, %1"];
	Node0x169be30[shape=record, label="  %7 = mul i32 %3, -2"];
	Node0x169bed0[shape=record, label="  %8 = or i32 %7, 1"];
	Node0x169bf40[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x169bfb0[shape=record, label="  %10 = and i32 %9, %0"];
	Node0x169c020[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x169c090[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x169c100[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x169c170[shape=record, label="  %14 = mul i32 %13, 5"];
	Node0x169c210[shape=record, label="  %15 = xor i32 %0, 2147483647"];
	Node0x169c280[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x169c2f0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x169c390[shape=record, label="  %18 = shl i32 %10, 2"];
	Node0x169c400[shape=record, label="  %19 = and i32 %1, %0"];
	Node0x169c4a0[shape=record, label="  %20 = mul i32 %19, 6"];
	Node0x169c510[shape=record, label="  %21 = sub i32 %1, %0"];
	Node0x169c580[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x169c5f0[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x169c660[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x169c6d0[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x169c740[shape=record, label="  %26 = add i32 %25, %20"];
	Node0x169c7b0[shape=record, label="  %27 = add i32 %26, %8"];
	Node0x169c820[shape=record, label="  %28 = icmp eq i32 %6, %27"];
	Node0x163c268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x169ccc0[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x169cd10[shape=record, label="  ret void"];
	Node0x169b5b0 -> Node0x169bc60;
	Node0x169bc60 -> Node0x169bd20;
	Node0x169bd20 -> Node0x169bd90;
	Node0x169bd90 -> Node0x169be30;
	Node0x169be30 -> Node0x169bed0;
	Node0x169bed0 -> Node0x169bf40;
	Node0x169bf40 -> Node0x169bfb0;
	Node0x169bfb0 -> Node0x169c020;
	Node0x169c020 -> Node0x169c090;
	Node0x169c090 -> Node0x169c100;
	Node0x169c100 -> Node0x169c170;
	Node0x169c170 -> Node0x169c210;
	Node0x169c210 -> Node0x169c280;
	Node0x169c280 -> Node0x169c2f0;
	Node0x169c2f0 -> Node0x169c390;
	Node0x169c390 -> Node0x169c400;
	Node0x169c400 -> Node0x169c4a0;
	Node0x169c4a0 -> Node0x169c510;
	Node0x169c510 -> Node0x169c580;
	Node0x169c580 -> Node0x169c5f0;
	Node0x169c5f0 -> Node0x169c660;
	Node0x169c660 -> Node0x169c6d0;
	Node0x169c6d0 -> Node0x169c740;
	Node0x169c740 -> Node0x169c7b0;
	Node0x169c7b0 -> Node0x169c820;
	Node0x169c820 -> Node0x163c268;
	Node0x163c268 -> Node0x169ccc0;
	Node0x169ccc0 -> Node0x169cd10;
edge [color=red]
	Node0x169b5b0 -> Node0x169bc60;
	Node0x169bc60 -> Node0x169bd20;
	Node0x169bd20 -> Node0x169bd90;
	Node0x169b5b0 -> Node0x169be30;
	Node0x169be30 -> Node0x169bed0;
	Node0x169bf40 -> Node0x169bfb0;
	Node0x169bfb0 -> Node0x169c020;
	Node0x169c090 -> Node0x169c100;
	Node0x169c100 -> Node0x169c170;
	Node0x169c210 -> Node0x169c280;
	Node0x169c280 -> Node0x169c2f0;
	Node0x169bfb0 -> Node0x169c390;
	Node0x169c400 -> Node0x169c4a0;
	Node0x169c510 -> Node0x169c580;
	Node0x169c020 -> Node0x169c580;
	Node0x169c580 -> Node0x169c5f0;
	Node0x169c170 -> Node0x169c5f0;
	Node0x169c5f0 -> Node0x169c660;
	Node0x169c2f0 -> Node0x169c660;
	Node0x169c660 -> Node0x169c6d0;
	Node0x169c390 -> Node0x169c6d0;
	Node0x169c6d0 -> Node0x169c740;
	Node0x169c4a0 -> Node0x169c740;
	Node0x169c740 -> Node0x169c7b0;
	Node0x169bed0 -> Node0x169c7b0;
	Node0x169bd90 -> Node0x169c820;
	Node0x169c7b0 -> Node0x169c820;
	Node0x169c820 -> Node0x163c268;
	Node0x163c268 -> Node0x169ccc0;
}
