digraph "DFG for'crackme' function" {
	Node0x1a66630[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1a66ce0[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x1a66da0[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x1a66e40[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x1a66eb0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1a66f20[shape=record, label="  %8 = or i32 %7, %0"];
	Node0x1a66fc0[shape=record, label="  %9 = shl i32 %8, 2"];
	Node0x1a67030[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x1a670a0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1a67110[shape=record, label="  %12 = and i32 %7, %0"];
	Node0x1a67180[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1a671f0[shape=record, label="  %14 = xor i32 %11, -1"];
	Node0x1a67290[shape=record, label="  %15 = mul i32 %14, -3"];
	Node0x1a67300[shape=record, label="  %16 = xor i32 %8, -1"];
	Node0x1a673a0[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x1a67410[shape=record, label="  %18 = shl i32 %10, 1"];
	Node0x1a67480[shape=record, label="  %19 = sub i32 2, %0"];
	Node0x1a674f0[shape=record, label="  %20 = add i32 %19, %7"];
	Node0x1a67560[shape=record, label="  %21 = add i32 %20, %6"];
	Node0x1a675d0[shape=record, label="  %22 = sub i32 %21, %1"];
	Node0x1a67640[shape=record, label="  %23 = add i32 %22, %10"];
	Node0x1a676b0[shape=record, label="  %24 = sub i32 %23, %11"];
	Node0x1a67720[shape=record, label="  %25 = add i32 %24, %13"];
	Node0x1a67790[shape=record, label="  %26 = sub i32 %25, %12"];
	Node0x1a67800[shape=record, label="  %27 = add i32 %26, %9"];
	Node0x1a67870[shape=record, label="  %28 = add i32 %27, %15"];
	Node0x1a678e0[shape=record, label="  %29 = add i32 %28, %17"];
	Node0x1a67950[shape=record, label="  %30 = sub i32 %29, %18"];
	Node0x1a679c0[shape=record, label="  %31 = icmp eq i32 %4, %30"];
	Node0x1a07268[shape=record, label="  %32 = select i1 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a68070[shape=record, label="  %33 = tail call i32 @puts(i8* nonnull dereferenceable(1) %32)"];
	Node0x1a680c0[shape=record, label="  ret void"];
	Node0x1a66630 -> Node0x1a66ce0;
	Node0x1a66ce0 -> Node0x1a66da0;
	Node0x1a66da0 -> Node0x1a66e40;
	Node0x1a66e40 -> Node0x1a66eb0;
	Node0x1a66eb0 -> Node0x1a66f20;
	Node0x1a66f20 -> Node0x1a66fc0;
	Node0x1a66fc0 -> Node0x1a67030;
	Node0x1a67030 -> Node0x1a670a0;
	Node0x1a670a0 -> Node0x1a67110;
	Node0x1a67110 -> Node0x1a67180;
	Node0x1a67180 -> Node0x1a671f0;
	Node0x1a671f0 -> Node0x1a67290;
	Node0x1a67290 -> Node0x1a67300;
	Node0x1a67300 -> Node0x1a673a0;
	Node0x1a673a0 -> Node0x1a67410;
	Node0x1a67410 -> Node0x1a67480;
	Node0x1a67480 -> Node0x1a674f0;
	Node0x1a674f0 -> Node0x1a67560;
	Node0x1a67560 -> Node0x1a675d0;
	Node0x1a675d0 -> Node0x1a67640;
	Node0x1a67640 -> Node0x1a676b0;
	Node0x1a676b0 -> Node0x1a67720;
	Node0x1a67720 -> Node0x1a67790;
	Node0x1a67790 -> Node0x1a67800;
	Node0x1a67800 -> Node0x1a67870;
	Node0x1a67870 -> Node0x1a678e0;
	Node0x1a678e0 -> Node0x1a67950;
	Node0x1a67950 -> Node0x1a679c0;
	Node0x1a679c0 -> Node0x1a07268;
	Node0x1a07268 -> Node0x1a68070;
	Node0x1a68070 -> Node0x1a680c0;
edge [color=red]
	Node0x1a66630 -> Node0x1a66ce0;
	Node0x1a66da0 -> Node0x1a66e40;
	Node0x1a66eb0 -> Node0x1a66f20;
	Node0x1a66f20 -> Node0x1a66fc0;
	Node0x1a66eb0 -> Node0x1a67110;
	Node0x1a67110 -> Node0x1a67180;
	Node0x1a670a0 -> Node0x1a671f0;
	Node0x1a671f0 -> Node0x1a67290;
	Node0x1a66f20 -> Node0x1a67300;
	Node0x1a67300 -> Node0x1a673a0;
	Node0x1a67030 -> Node0x1a67410;
	Node0x1a67480 -> Node0x1a674f0;
	Node0x1a66eb0 -> Node0x1a674f0;
	Node0x1a674f0 -> Node0x1a67560;
	Node0x1a66e40 -> Node0x1a67560;
	Node0x1a67560 -> Node0x1a675d0;
	Node0x1a675d0 -> Node0x1a67640;
	Node0x1a67030 -> Node0x1a67640;
	Node0x1a67640 -> Node0x1a676b0;
	Node0x1a670a0 -> Node0x1a676b0;
	Node0x1a676b0 -> Node0x1a67720;
	Node0x1a67180 -> Node0x1a67720;
	Node0x1a67720 -> Node0x1a67790;
	Node0x1a67110 -> Node0x1a67790;
	Node0x1a67790 -> Node0x1a67800;
	Node0x1a66fc0 -> Node0x1a67800;
	Node0x1a67800 -> Node0x1a67870;
	Node0x1a67290 -> Node0x1a67870;
	Node0x1a67870 -> Node0x1a678e0;
	Node0x1a673a0 -> Node0x1a678e0;
	Node0x1a678e0 -> Node0x1a67950;
	Node0x1a67410 -> Node0x1a67950;
	Node0x1a66ce0 -> Node0x1a679c0;
	Node0x1a67950 -> Node0x1a679c0;
	Node0x1a679c0 -> Node0x1a07268;
	Node0x1a07268 -> Node0x1a68070;
}
