digraph "DFG for'crackme' function" {
	Node0xfbabe0[shape=record, label="  %3 = add i32 %0, 1"];
	Node0xfbac50[shape=record, label="  %4 = or i32 %1, %0"];
	Node0xfbad10[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0xfbad80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xfbadf0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xfbae60[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0xfbaed0[shape=record, label="  %9 = or i32 %8, %0"];
	Node0xfbaf40[shape=record, label="  %10 = and i32 %8, %0"];
	Node0xfbafb0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xfbb020[shape=record, label="  %12 = xor i32 %4, -1"];
	Node0xfbb090[shape=record, label="  %13 = xor i32 %9, -1"];
	Node0xfbb130[shape=record, label="  %14 = shl i32 %10, 2"];
	Node0xfbb1a0[shape=record, label="  %15 = shl i32 %6, 1"];
	Node0xfbb210[shape=record, label="  %16 = add i32 %13, %12"];
	Node0xfbb2b0[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0xfbb320[shape=record, label="  %18 = add i32 %5, %0"];
	Node0xfbb390[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0xfbb400[shape=record, label="  %20 = sub i32 1, %4"];
	Node0xfbb470[shape=record, label="  %21 = add i32 %20, %7"];
	Node0xfbb4e0[shape=record, label="  %22 = add i32 %21, %9"];
	Node0xfbb550[shape=record, label="  %23 = add i32 %22, %11"];
	Node0xfbb5c0[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0xfbb630[shape=record, label="  %25 = sub i32 %24, %15"];
	Node0xfbb6a0[shape=record, label="  %26 = add i32 %25, %17"];
	Node0xfbb710[shape=record, label="  %27 = add i32 %26, %19"];
	Node0xfbb780[shape=record, label="  %28 = icmp eq i32 %3, %27"];
	Node0xf5b268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xfbbc20[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xfbbc70[shape=record, label="  ret void"];
	Node0xfbabe0 -> Node0xfbac50;
	Node0xfbac50 -> Node0xfbad10;
	Node0xfbad10 -> Node0xfbad80;
	Node0xfbad80 -> Node0xfbadf0;
	Node0xfbadf0 -> Node0xfbae60;
	Node0xfbae60 -> Node0xfbaed0;
	Node0xfbaed0 -> Node0xfbaf40;
	Node0xfbaf40 -> Node0xfbafb0;
	Node0xfbafb0 -> Node0xfbb020;
	Node0xfbb020 -> Node0xfbb090;
	Node0xfbb090 -> Node0xfbb130;
	Node0xfbb130 -> Node0xfbb1a0;
	Node0xfbb1a0 -> Node0xfbb210;
	Node0xfbb210 -> Node0xfbb2b0;
	Node0xfbb2b0 -> Node0xfbb320;
	Node0xfbb320 -> Node0xfbb390;
	Node0xfbb390 -> Node0xfbb400;
	Node0xfbb400 -> Node0xfbb470;
	Node0xfbb470 -> Node0xfbb4e0;
	Node0xfbb4e0 -> Node0xfbb550;
	Node0xfbb550 -> Node0xfbb5c0;
	Node0xfbb5c0 -> Node0xfbb630;
	Node0xfbb630 -> Node0xfbb6a0;
	Node0xfbb6a0 -> Node0xfbb710;
	Node0xfbb710 -> Node0xfbb780;
	Node0xfbb780 -> Node0xf5b268;
	Node0xf5b268 -> Node0xfbbc20;
	Node0xfbbc20 -> Node0xfbbc70;
edge [color=red]
	Node0xfbad80 -> Node0xfbadf0;
	Node0xfbae60 -> Node0xfbaed0;
	Node0xfbae60 -> Node0xfbaf40;
	Node0xfbaf40 -> Node0xfbafb0;
	Node0xfbac50 -> Node0xfbb020;
	Node0xfbaed0 -> Node0xfbb090;
	Node0xfbaf40 -> Node0xfbb130;
	Node0xfbad80 -> Node0xfbb1a0;
	Node0xfbb090 -> Node0xfbb210;
	Node0xfbb020 -> Node0xfbb210;
	Node0xfbb210 -> Node0xfbb2b0;
	Node0xfbad10 -> Node0xfbb320;
	Node0xfbb320 -> Node0xfbb390;
	Node0xfbac50 -> Node0xfbb400;
	Node0xfbb400 -> Node0xfbb470;
	Node0xfbadf0 -> Node0xfbb470;
	Node0xfbb470 -> Node0xfbb4e0;
	Node0xfbaed0 -> Node0xfbb4e0;
	Node0xfbb4e0 -> Node0xfbb550;
	Node0xfbafb0 -> Node0xfbb550;
	Node0xfbb550 -> Node0xfbb5c0;
	Node0xfbb130 -> Node0xfbb5c0;
	Node0xfbb5c0 -> Node0xfbb630;
	Node0xfbb1a0 -> Node0xfbb630;
	Node0xfbb630 -> Node0xfbb6a0;
	Node0xfbb2b0 -> Node0xfbb6a0;
	Node0xfbb6a0 -> Node0xfbb710;
	Node0xfbb390 -> Node0xfbb710;
	Node0xfbabe0 -> Node0xfbb780;
	Node0xfbb710 -> Node0xfbb780;
	Node0xfbb780 -> Node0xf5b268;
	Node0xf5b268 -> Node0xfbbc20;
}
