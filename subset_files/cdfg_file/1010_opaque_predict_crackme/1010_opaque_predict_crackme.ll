; ModuleID = '../.././c_source_file/1010_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1010_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = mul i32 %7, -5
  %9 = xor i32 %4, %3
  %10 = xor i32 %1, -1
  %11 = and i32 %2, %0
  %12 = or i32 %11, %10
  %13 = or i32 %11, %1
  %14 = shl i32 %13, 1
  %15 = sub i32 1, %12
  %16 = add i32 %15, %9
  %17 = sub i32 %16, %14
  %18 = add i32 %17, %8
  %19 = shl i32 %9, 1
  %20 = xor i32 %19, -1
  %21 = xor i32 %4, -1
  %22 = add i32 %4, 1
  %23 = and i32 %21, %3
  %24 = shl i32 %3, 1
  %25 = xor i32 %24, -2
  %26 = or i32 %4, %3
  %27 = add i32 %26, 1
  %28 = xor i32 %3, 2147483647
  %29 = and i32 %28, %4
  %30 = shl i32 %29, 1
  %31 = shl i32 %23, 2
  %32 = xor i32 %2, -1
  %33 = or i32 %32, %1
  %34 = and i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = and i32 %32, %35
  %37 = shl i32 %36, 1
  %38 = and i32 %10, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %39, %2
  %41 = shl i32 %40, 1
  %42 = xor i32 %11, -1
  %43 = and i32 %42, %10
  %44 = add i32 %11, 1
  %45 = and i32 %2, %1
  %46 = xor i32 %45, -1
  %47 = xor i32 %33, %34
  %48 = shl i32 %47, 1
  %49 = and i32 %32, %0
  %50 = or i32 %49, %10
  %51 = or i32 %32, %0
  %52 = xor i32 %51, -1
  %53 = add i32 %51, 1
  %54 = and i32 %51, %10
  %55 = xor i32 %1, %0
  %56 = xor i32 %2, %0
  %57 = and i32 %56, %55
  %58 = xor i32 %55, -1
  %59 = or i32 %56, %58
  %60 = and i32 %55, %32
  %61 = and i32 %10, %2
  %62 = and i32 %61, %0
  %63 = xor i32 %2, %1
  %64 = xor i32 %63, %0
  %65 = or i32 %62, %64
  %66 = or i32 %10, %0
  %67 = xor i32 %11, %66
  %68 = and i32 %32, %1
  %69 = xor i32 %68, -1
  %70 = xor i32 %69, %0
  %71 = xor i32 %63, -1
  %72 = xor i32 %71, %0
  %73 = xor i32 %38, %2
  %74 = xor i32 %49, %33
  %75 = or i32 %2, %0
  %76 = and i32 %75, %1
  %77 = xor i32 %11, %1
  %78 = or i32 %56, %34
  %79 = xor i32 %33, -1
  %80 = or i32 %79, %0
  %81 = xor i32 %0, -1
  %82 = and i32 %61, %81
  %83 = or i32 %63, %81
  %84 = xor i32 %82, %83
  %85 = or i32 %55, %2
  %86 = and i32 %45, %0
  %87 = or i32 %2, %1
  %88 = xor i32 %87, %0
  %89 = or i32 %86, %88
  %90 = shl i32 %89, 1
  %91 = or i32 %63, %0
  %92 = xor i32 %91, -1
  %93 = or i32 %62, %92
  %94 = xor i32 %51, %1
  %95 = or i32 %1, %0
  %96 = xor i32 %95, -1
  %97 = xor i32 %96, %2
  %98 = xor i32 %56, -1
  %99 = or i32 %98, %96
  %100 = or i32 %63, %96
  %101 = or i32 %87, %81
  %102 = or i32 %68, %38
  %103 = xor i32 %75, %34
  %104 = and i32 %71, %81
  %105 = xor i32 %38, %46
  %106 = and i32 %75, %55
  %107 = and i32 %63, %81
  %108 = or i32 %86, %107
  %109 = and i32 %71, %39
  %110 = xor i32 %49, -1
  %111 = and i32 %110, %1
  %112 = and i32 %56, %66
  %113 = xor i32 %11, %87
  %114 = or i32 %58, %2
  %115 = and i32 %87, %81
  %116 = xor i32 %86, -1
  %117 = xor i32 %115, %116
  %118 = or i32 %55, %98
  %119 = or i32 %33, %0
  %120 = or i32 %10, %2
  %121 = xor i32 %120, %0
  %122 = or i32 %62, %121
  %123 = and i32 %98, %35
  %124 = xor i32 %107, %116
  %125 = and i32 %42, %1
  %126 = and i32 %98, %58
  %127 = xor i32 %88, %116
  %128 = and i32 %120, %0
  %129 = xor i32 %128, -1
  %130 = xor i32 %82, %129
  %131 = xor i32 %66, -1
  %132 = or i32 %46, %0
  %133 = or i32 %56, %38
  %134 = shl i32 %133, 1
  %135 = xor i32 %87, -1
  %136 = or i32 %135, %81
  %137 = or i32 %69, %81
  %138 = and i32 %35, %2
  %139 = or i32 %71, %131
  %140 = and i32 %45, %81
  %141 = and i32 %87, %0
  %142 = xor i32 %141, 1073741823
  %143 = xor i32 %142, %140
  %144 = shl i32 %143, 2
  %145 = xor i32 %49, %1
  %146 = and i32 %63, %0
  %147 = or i32 %140, %141
  %148 = or i32 %45, %81
  %149 = or i32 %11, %55
  %150 = or i32 %52, %1
  %151 = or i32 %34, %135
  %152 = or i32 %68, %81
  %153 = xor i32 %87, %34
  %154 = and i32 %46, %81
  %155 = and i32 %71, %0
  %156 = and i32 %56, %95
  %157 = shl i32 %156, 1
  %158 = add i32 %55, 1
  %159 = and i32 %63, %66
  %160 = or i32 %34, %2
  %161 = and i32 %69, %0
  %162 = xor i32 %75, -1
  %163 = or i32 %34, %162
  %164 = or i32 %98, %1
  %165 = or i32 %11, %96
  %166 = and i32 %98, %10
  %167 = and i32 %32, %39
  %168 = and i32 %56, %35
  %169 = or i32 %34, %79
  %170 = or i32 %63, %131
  %171 = xor i32 %42, %1
  %172 = shl i32 %171, 1
  %173 = or i32 %162, %10
  %174 = xor i32 %11, %95
  %175 = xor i32 %35, %2
  %176 = or i32 %45, %0
  %177 = and i32 %55, %110
  %178 = or i32 %55, %162
  %179 = and i32 %69, %81
  %180 = and i32 %75, %10
  %181 = and i32 %33, %81
  %182 = shl i32 %181, 2
  %183 = and i32 %32, %58
  %184 = and i32 %66, %2
  %185 = or i32 %11, %135
  %186 = and i32 %55, %98
  %187 = and i32 %56, %39
  %188 = and i32 %75, %58
  %189 = or i32 %49, %79
  %190 = or i32 %86, %115
  %191 = and i32 %63, %95
  %192 = shl i32 %110, 1
  %193 = or i32 %98, %58
  %194 = and i32 %95, %2
  %195 = xor i32 %45, %0
  %196 = or i32 %71, %0
  %197 = or i32 %52, %58
  %198 = shl i32 %197, 2
  %199 = and i32 %56, %58
  %200 = or i32 %52, %10
  %201 = or i32 %32, %58
  %202 = or i32 %63, %38
  %203 = or i32 %56, %55
  %204 = or i32 %55, %32
  %205 = or i32 %71, %81
  %206 = shl i32 %205, 1
  %207 = xor i32 %64, -1
  %208 = or i32 %86, %207
  %209 = and i32 %98, %1
  %210 = and i32 %110, %10
  %211 = and i32 %51, %55
  %212 = shl i32 %95, 2
  %213 = xor i32 %95, %2
  %214 = and i32 %55, %42
  %215 = add i32 %56, 1
  %216 = xor i32 %49, %46
  %217 = or i32 %45, %38
  %218 = xor i32 %68, %0
  %219 = or i32 %96, %2
  %220 = or i32 %162, %58
  %221 = xor i32 %162, %1
  %222 = shl i32 %221, 1
  %223 = or i32 %56, %131
  %224 = or i32 %38, %2
  %225 = shl i32 %35, 1
  %226 = or i32 %55, %52
  %227 = and i32 %98, %39
  %228 = xor i32 %135, %0
  %229 = or i32 %11, %58
  %230 = xor i32 %46, %0
  %231 = or i32 %11, %131
  %232 = and i32 %55, %2
  %233 = xor i32 %33, %0
  %234 = or i32 %11, %68
  %235 = or i32 %34, %71
  %236 = xor i32 %62, %91
  %237 = shl i32 %236, 1
  %238 = or i32 %69, %0
  %239 = or i32 %98, %10
  %240 = shl i32 %69, 1
  %241 = xor i32 %110, %1
  %242 = shl i32 %241, 1
  %243 = or i32 %49, %45
  %244 = and i32 %95, %71
  %245 = and i32 %63, %39
  %246 = or i32 %56, %10
  %247 = shl i32 %246, 1
  %248 = and i32 %63, %35
  %249 = and i32 %58, %2
  %250 = or i32 %49, %1
  %251 = shl i32 %250, 1
  %252 = or i32 %71, %96
  %253 = and i32 %33, %0
  %254 = or i32 %38, %32
  %255 = shl i32 %87, 1
  %256 = xor i32 %146, -1
  %257 = xor i32 %140, %256
  %258 = xor i32 %66, %2
  %259 = or i32 %56, %1
  %260 = or i32 %87, %0
  %261 = xor i32 %62, %207
  %262 = and i32 %120, %81
  %263 = or i32 %62, %262
  %264 = and i32 %110, %58
  %265 = or i32 %135, %0
  %266 = xor i32 %86, %64
  %267 = xor i32 %262, 2147483647
  %268 = xor i32 %267, %62
  %269 = shl i32 %268, 1
  %270 = or i32 %38, %71
  %271 = or i32 %140, %146
  %272 = or i32 %32, %131
  %273 = xor i32 %51, %34
  %274 = or i32 %49, %55
  %275 = xor i32 %52, %1
  %276 = or i32 %131, %2
  %277 = add i32 %63, 1
  %278 = and i32 %95, %98
  %279 = and i32 %51, %1
  %280 = or i32 %32, %96
  %281 = and i32 %66, %98
  %282 = xor i32 %34, %2
  %283 = or i32 %49, %58
  %284 = shl i32 %283, 1
  %285 = xor i32 %11, %69
  %286 = xor i32 %83, 2147483647
  %287 = or i32 %286, %82
  %288 = shl i32 %287, 1
  %289 = and i32 %51, %58
  %290 = xor i32 %38, %69
  %291 = or i32 %98, %131
  %292 = shl i32 %291, 1
  %293 = or i32 %34, %32
  %294 = and i32 %71, %35
  %295 = or i32 %38, %98
  %296 = xor i32 %79, %0
  %297 = or i32 %82, %128
  %298 = and i32 %66, %32
  %299 = shl i32 %39, 1
  %300 = or i32 %56, %96
  %301 = shl i32 %300, 1
  %302 = xor i32 %75, %1
  %303 = or i32 %63, %34
  %304 = or i32 %46, %81
  %305 = and i32 %68, %81
  %306 = mul i32 %305, 9
  %307 = and i32 %135, %0
  %308 = mul i32 %307, 24
  %309 = and i32 %68, %0
  %310 = and i32 %79, %81
  %311 = mul i32 %310, 28
  %312 = mul i32 %140, 26
  %313 = and i32 %79, %0
  %314 = mul i32 %313, -10
  %315 = mul i32 %86, 23
  %316 = add i32 %2, %0
  %317 = add i32 %316, %135
  %318 = add i32 %317, %183
  %319 = add i32 %318, %160
  %320 = add i32 %319, %60
  %321 = add i32 %320, %46
  %322 = add i32 %321, %265
  %323 = add i32 %322, %294
  %324 = add i32 %323, %234
  %325 = add i32 %324, %227
  %326 = add i32 %325, %193
  %327 = add i32 %326, %187
  %328 = add i32 %327, %180
  %329 = add i32 %328, %174
  %330 = add i32 %329, %173
  %331 = add i32 %330, %149
  %332 = add i32 %331, %64
  %333 = add i32 %332, %136
  %334 = add i32 %333, %106
  %335 = add i32 %334, %74
  %336 = add i32 %335, %59
  %337 = shl i32 %336, 1
  %338 = add i32 %189, %53
  %339 = add i32 %338, %105
  %340 = add i32 %339, %127
  %341 = mul i32 %340, 5
  %342 = sub i32 -2, %2
  %343 = add i32 %342, %309
  %344 = sub i32 %343, %185
  %345 = sub i32 %344, %6
  %346 = add i32 %345, %124
  %347 = add i32 %346, %27
  %348 = mul i32 %347, 3
  %349 = add i32 %34, %1
  %350 = sub i32 %131, %349
  %351 = sub i32 %350, %66
  %352 = add i32 %351, %55
  %353 = add i32 %352, %158
  %354 = sub i32 %353, %38
  %355 = add i32 %354, %2
  %356 = add i32 %355, %96
  %357 = add i32 %356, %3
  %358 = add i32 %357, %44
  %359 = sub i32 %358, %73
  %360 = add i32 %359, %85
  %361 = add i32 %360, %97
  %362 = sub i32 %361, %114
  %363 = sub i32 %362, %56
  %364 = sub i32 %363, %138
  %365 = add i32 %364, %45
  %366 = sub i32 %365, %51
  %367 = add i32 %366, %68
  %368 = sub i32 %367, %167
  %369 = sub i32 %368, %175
  %370 = sub i32 %369, %63
  %371 = sub i32 %370, %184
  %372 = add i32 %371, %194
  %373 = sub i32 %372, %49
  %374 = add i32 %373, %201
  %375 = sub i32 %374, %204
  %376 = sub i32 %375, %212
  %377 = add i32 %376, %213
  %378 = add i32 %377, %215
  %379 = add i32 %378, %219
  %380 = add i32 %379, %224
  %381 = sub i32 %380, %225
  %382 = add i32 %381, %162
  %383 = add i32 %382, %232
  %384 = sub i32 %383, %249
  %385 = sub i32 %384, %254
  %386 = add i32 %385, %258
  %387 = add i32 %386, %272
  %388 = sub i32 %387, %276
  %389 = add i32 %388, %277
  %390 = sub i32 %389, %280
  %391 = sub i32 %390, %282
  %392 = sub i32 %391, %293
  %393 = add i32 %392, %298
  %394 = sub i32 %393, %299
  %395 = add i32 %394, %4
  %396 = add i32 %395, %22
  %397 = sub i32 %396, %37
  %398 = sub i32 %397, %41
  %399 = sub i32 %398, %43
  %400 = add i32 %399, %50
  %401 = sub i32 %400, %54
  %402 = sub i32 %401, %57
  %403 = add i32 %402, %67
  %404 = sub i32 %403, %70
  %405 = add i32 %404, %72
  %406 = add i32 %405, %76
  %407 = sub i32 %406, %77
  %408 = sub i32 %407, %78
  %409 = sub i32 %408, %80
  %410 = sub i32 %409, %94
  %411 = add i32 %410, %99
  %412 = add i32 %411, %100
  %413 = add i32 %412, %101
  %414 = add i32 %413, %102
  %415 = sub i32 %414, %103
  %416 = add i32 %415, %104
  %417 = sub i32 %416, %109
  %418 = add i32 %417, %111
  %419 = sub i32 %418, %112
  %420 = add i32 %419, %113
  %421 = sub i32 %420, %118
  %422 = sub i32 %421, %119
  %423 = add i32 %422, %123
  %424 = sub i32 %423, %125
  %425 = add i32 %424, %126
  %426 = sub i32 %425, %132
  %427 = sub i32 %426, %137
  %428 = add i32 %427, %139
  %429 = add i32 %428, %145
  %430 = add i32 %429, %91
  %431 = sub i32 %430, %146
  %432 = add i32 %431, %148
  %433 = add i32 %432, %150
  %434 = sub i32 %433, %151
  %435 = sub i32 %434, %152
  %436 = add i32 %435, %153
  %437 = add i32 %436, %154
  %438 = add i32 %437, %155
  %439 = sub i32 %438, %159
  %440 = sub i32 %439, %161
  %441 = add i32 %440, %163
  %442 = sub i32 %441, %164
  %443 = sub i32 %442, %165
  %444 = add i32 %443, %166
  %445 = sub i32 %444, %107
  %446 = sub i32 %445, %168
  %447 = sub i32 %446, %169
  %448 = sub i32 %447, %170
  %449 = sub i32 %448, %176
  %450 = add i32 %449, %177
  %451 = add i32 %450, %178
  %452 = sub i32 %451, %179
  %453 = sub i32 %452, %186
  %454 = add i32 %453, %188
  %455 = add i32 %454, %191
  %456 = sub i32 %455, %192
  %457 = add i32 %456, %195
  %458 = sub i32 %457, %196
  %459 = sub i32 %458, %199
  %460 = add i32 %459, %200
  %461 = sub i32 %460, %202
  %462 = sub i32 %461, %203
  %463 = sub i32 %462, %209
  %464 = add i32 %463, %210
  %465 = sub i32 %464, %211
  %466 = sub i32 %465, %214
  %467 = sub i32 %466, %216
  %468 = sub i32 %467, %217
  %469 = sub i32 %468, %218
  %470 = add i32 %469, %220
  %471 = sub i32 %470, %83
  %472 = sub i32 %471, %223
  %473 = add i32 %472, %226
  %474 = add i32 %473, %228
  %475 = add i32 %474, %229
  %476 = add i32 %475, %230
  %477 = sub i32 %476, %231
  %478 = sub i32 %477, %141
  %479 = add i32 %478, %233
  %480 = add i32 %479, %235
  %481 = sub i32 %480, %238
  %482 = sub i32 %481, %239
  %483 = sub i32 %482, %240
  %484 = sub i32 %483, %243
  %485 = sub i32 %484, %244
  %486 = add i32 %485, %245
  %487 = sub i32 %486, %248
  %488 = add i32 %487, %252
  %489 = sub i32 %488, %253
  %490 = sub i32 %489, %255
  %491 = sub i32 %490, %259
  %492 = sub i32 %491, %260
  %493 = sub i32 %492, %264
  %494 = add i32 %493, %270
  %495 = sub i32 %494, %273
  %496 = sub i32 %495, %274
  %497 = sub i32 %496, %275
  %498 = add i32 %497, %278
  %499 = add i32 %498, %279
  %500 = add i32 %499, %281
  %501 = sub i32 %500, %285
  %502 = add i32 %501, %289
  %503 = sub i32 %502, %290
  %504 = add i32 %503, %88
  %505 = add i32 %504, %295
  %506 = sub i32 %505, %296
  %507 = add i32 %506, %302
  %508 = sub i32 %507, %303
  %509 = sub i32 %508, %304
  %510 = add i32 %509, %23
  %511 = sub i32 %510, %25
  %512 = sub i32 %511, %48
  %513 = add i32 %512, %65
  %514 = add i32 %513, %84
  %515 = sub i32 %514, %93
  %516 = sub i32 %515, %108
  %517 = sub i32 %516, %117
  %518 = add i32 %517, %122
  %519 = sub i32 %518, %130
  %520 = sub i32 %519, %134
  %521 = add i32 %520, %147
  %522 = sub i32 %521, %157
  %523 = sub i32 %522, %172
  %524 = sub i32 %523, %182
  %525 = sub i32 %524, %190
  %526 = sub i32 %525, %198
  %527 = sub i32 %526, %206
  %528 = add i32 %527, %208
  %529 = sub i32 %528, %222
  %530 = sub i32 %529, %242
  %531 = sub i32 %530, %247
  %532 = sub i32 %531, %251
  %533 = sub i32 %532, %257
  %534 = add i32 %533, %261
  %535 = add i32 %534, %263
  %536 = sub i32 %535, %266
  %537 = add i32 %536, %271
  %538 = sub i32 %537, %284
  %539 = sub i32 %538, %292
  %540 = add i32 %539, %297
  %541 = sub i32 %540, %301
  %542 = add i32 %541, %306
  %543 = add i32 %542, %308
  %544 = add i32 %543, %311
  %545 = add i32 %544, %312
  %546 = add i32 %545, %314
  %547 = add i32 %546, %315
  %548 = add i32 %547, %20
  %549 = sub i32 %548, %30
  %550 = sub i32 %549, %31
  %551 = sub i32 %550, %90
  %552 = sub i32 %551, %237
  %553 = sub i32 %552, %144
  %554 = sub i32 %553, %269
  %555 = sub i32 %554, %288
  %556 = add i32 %555, %341
  %557 = add i32 %556, %348
  %558 = add i32 %557, %337
  %559 = icmp eq i32 %18, %558
  %560 = select i1 %559, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %561 = tail call i32 @puts(i8* nonnull dereferenceable(1) %560)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
