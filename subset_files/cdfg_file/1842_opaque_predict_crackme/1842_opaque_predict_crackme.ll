; ModuleID = '../.././c_source_file/1842_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1842_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = and i32 %1, %0
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %6, %9
  %11 = shl i32 %10, 1
  %12 = sub i32 %5, %11
  %13 = xor i32 %1, -1
  %14 = and i32 %4, %13
  %15 = xor i32 %0, -1
  %16 = or i32 %2, %1
  %17 = xor i32 %16, -1
  %18 = or i32 %17, %15
  %19 = and i32 %13, %0
  %20 = xor i32 %19, -1
  %21 = and i32 %7, %20
  %22 = and i32 %2, %1
  %23 = and i32 %22, %0
  %24 = and i32 %16, %15
  %25 = or i32 %23, %24
  %26 = xor i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %1
  %29 = and i32 %7, %1
  %30 = or i32 %29, %19
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %32, %2
  %34 = or i32 %5, %32
  %35 = and i32 %7, %0
  %36 = xor i32 %22, -1
  %37 = xor i32 %35, %36
  %38 = or i32 %35, %32
  %39 = and i32 %22, %15
  %40 = xor i32 %2, %1
  %41 = and i32 %40, %0
  %42 = or i32 %39, %41
  %43 = and i32 %4, %31
  %44 = or i32 %35, %13
  %45 = shl i32 %44, 1
  %46 = xor i32 %23, 2147483647
  %47 = xor i32 %46, %24
  %48 = xor i32 %16, %0
  %49 = or i32 %23, %48
  %50 = or i32 %13, %0
  %51 = and i32 %40, %50
  %52 = or i32 %26, %32
  %53 = xor i32 %6, -1
  %54 = and i32 %40, %53
  %55 = and i32 %40, %15
  %56 = xor i32 %29, -1
  %57 = or i32 %56, %0
  %58 = and i32 %50, %27
  %59 = xor i32 %50, -1
  %60 = xor i32 %59, %2
  %61 = add i32 %29, 1
  %62 = xor i32 %35, %8
  %63 = or i32 %40, %19
  %64 = shl i32 %63, 1
  %65 = xor i32 %35, -1
  %66 = add i32 %35, 1
  %67 = or i32 %1, %0
  %68 = and i32 %67, %7
  %69 = and i32 %26, %50
  %70 = and i32 %27, %32
  %71 = xor i32 %9, %0
  %72 = xor i32 %40, -1
  %73 = and i32 %72, %15
  %74 = or i32 %8, %0
  %75 = and i32 %13, %2
  %76 = and i32 %75, %15
  %77 = or i32 %13, %2
  %78 = and i32 %77, %0
  %79 = or i32 %76, %78
  %80 = or i32 %17, %0
  %81 = or i32 %26, %13
  %82 = or i32 %6, %72
  %83 = and i32 %75, %0
  %84 = xor i32 %77, %0
  %85 = or i32 %83, %84
  %86 = and i32 %50, %7
  %87 = xor i32 %56, %0
  %88 = shl i32 %87, 1
  %89 = xor i32 %5, %1
  %90 = xor i32 %50, %2
  %91 = and i32 %2, %0
  %92 = xor i32 %91, -1
  %93 = xor i32 %92, %1
  %94 = shl i32 %93, 1
  %95 = and i32 %67, %27
  %96 = or i32 %19, %27
  %97 = or i32 %31, %5
  %98 = xor i32 %78, -1
  %99 = xor i32 %76, %98
  %100 = and i32 %7, %53
  %101 = add i32 %16, 1
  %102 = or i32 %26, %19
  %103 = xor i32 %67, -1
  %104 = or i32 %27, %103
  %105 = xor i32 %22, %0
  %106 = or i32 %16, %0
  %107 = and i32 %7, %32
  %108 = or i32 %27, %13
  %109 = and i32 %56, %15
  %110 = or i32 %7, %0
  %111 = xor i32 %110, -1
  %112 = or i32 %111, %1
  %113 = and i32 %110, %32
  %114 = xor i32 %46, %55
  %115 = or i32 %6, %27
  %116 = xor i32 %36, %0
  %117 = and i32 %27, %13
  %118 = xor i32 %111, %1
  %119 = and i32 %27, %20
  %120 = shl i32 %119, 1
  %121 = and i32 %4, %1
  %122 = xor i32 %29, %0
  %123 = or i32 %40, %0
  %124 = xor i32 %123, -1
  %125 = or i32 %83, %124
  %126 = and i32 %50, %72
  %127 = or i32 %22, %15
  %128 = or i32 %26, %31
  %129 = and i32 %110, %31
  %130 = shl i32 %111, 1
  %131 = or i32 %91, %59
  %132 = and i32 %26, %20
  %133 = xor i32 %35, %1
  %134 = or i32 %40, %103
  %135 = or i32 %72, %59
  %136 = or i32 %40, %15
  %137 = xor i32 %76, %136
  %138 = and i32 %36, %0
  %139 = xor i32 %40, %0
  %140 = xor i32 %139, -1
  %141 = or i32 %23, %140
  %142 = xor i32 %67, %2
  %143 = and i32 %26, %53
  %144 = or i32 %72, %0
  %145 = or i32 %31, %7
  %146 = and i32 %50, %2
  %147 = shl i32 %146, 1
  %148 = or i32 %6, %17
  %149 = xor i32 %91, %67
  %150 = or i32 %32, %2
  %151 = or i32 %6, %7
  %152 = and i32 %31, %27
  %153 = or i32 %91, %32
  %154 = and i32 %53, %2
  %155 = or i32 %9, %15
  %156 = or i32 %91, %103
  %157 = xor i32 %65, %1
  %158 = xor i32 %19, %36
  %159 = or i32 %111, %32
  %160 = or i32 %26, %6
  %161 = or i32 %6, %2
  %162 = or i32 %26, %1
  %163 = or i32 %103, %2
  %164 = and i32 %65, %13
  %165 = and i32 %31, %92
  %166 = or i32 %5, %13
  %167 = and i32 %77, %15
  %168 = xor i32 %83, -1
  %169 = xor i32 %167, %168
  %170 = and i32 %67, %2
  %171 = and i32 %8, %15
  %172 = or i32 %83, %167
  %173 = and i32 %72, %20
  %174 = and i32 %16, %0
  %175 = xor i32 %110, %1
  %176 = shl i32 %175, 1
  %177 = or i32 %26, %103
  %178 = xor i32 %4, %1
  %179 = or i32 %29, %15
  %180 = and i32 %110, %1
  %181 = xor i32 %91, %1
  %182 = or i32 %72, %103
  %183 = shl i32 %182, 1
  %184 = or i32 %6, %5
  %185 = shl i32 %6, 1
  %186 = and i32 %110, %13
  %187 = xor i32 %136, -1
  %188 = or i32 %76, %187
  %189 = and i32 %56, %0
  %190 = or i32 %91, %13
  %191 = xor i32 %72, %0
  %192 = xor i32 %19, %2
  %193 = and i32 %31, %2
  %194 = or i32 %29, %0
  %195 = xor i32 %91, %50
  %196 = or i32 %23, %55
  %197 = or i32 %19, %7
  %198 = and i32 %92, %13
  %199 = xor i32 %23, %139
  %200 = shl i32 %199, 1
  %201 = or i32 %35, %22
  %202 = or i32 %31, %2
  %203 = and i32 %40, %67
  %204 = xor i32 %84, %168
  %205 = and i32 %26, %1
  %206 = or i32 %19, %2
  %207 = or i32 %59, %2
  %208 = xor i32 %20, %2
  %209 = xor i32 %8, %6
  %210 = shl i32 %209, 1
  %211 = and i32 %8, %0
  %212 = xor i32 %19, %56
  %213 = shl i32 %212, 1
  %214 = xor i32 %83, %140
  %215 = add i32 %91, 1
  %216 = and i32 %20, %2
  %217 = xor i32 %91, %16
  %218 = or i32 %7, %103
  %219 = and i32 %26, %13
  %220 = or i32 %16, %15
  %221 = and i32 %72, %0
  %222 = xor i32 %91, %56
  %223 = or i32 %35, %1
  %224 = shl i32 %223, 1
  %225 = or i32 %39, %174
  %226 = or i32 %35, %31
  %227 = and i32 %65, %32
  %228 = or i32 %91, %1
  %229 = or i32 %22, %19
  %230 = and i32 %67, %72
  %231 = or i32 %56, %15
  %232 = shl i32 %231, 1
  %233 = xor i32 %6, %2
  %234 = or i32 %31, %27
  %235 = and i32 %36, %15
  %236 = and i32 %26, %31
  %237 = or i32 %91, %31
  %238 = or i32 %27, %32
  %239 = xor i32 %17, %0
  %240 = or i32 %22, %0
  %241 = or i32 %5, %1
  %242 = or i32 %35, %9
  %243 = and i32 %65, %1
  %244 = and i32 %31, %7
  %245 = or i32 %72, %15
  %246 = or i32 %19, %72
  %247 = and i32 %17, %15
  %248 = mul i32 %247, 19
  %249 = and i32 %29, %15
  %250 = mul i32 %249, -13
  %251 = and i32 %17, %0
  %252 = mul i32 %251, -7
  %253 = and i32 %29, %0
  %254 = mul i32 %253, 6
  %255 = and i32 %9, %15
  %256 = and i32 %9, %0
  %257 = mul i32 %256, -18
  %258 = add i32 %67, %19
  %259 = add i32 %258, %202
  %260 = add i32 %259, %142
  %261 = add i32 %260, %243
  %262 = add i32 %261, %235
  %263 = add i32 %262, %219
  %264 = add i32 %263, %174
  %265 = add i32 %264, %164
  %266 = add i32 %265, %152
  %267 = add i32 %266, %129
  %268 = add i32 %267, %112
  %269 = add i32 %268, %69
  %270 = sub i32 %269, %14
  %271 = add i32 %270, %47
  %272 = add i32 %271, %114
  %273 = shl i32 %272, 1
  %274 = add i32 %234, %66
  %275 = add i32 %274, %39
  %276 = sub i32 %275, %127
  %277 = add i32 %276, %108
  %278 = mul i32 %277, 5
  %279 = add i32 %134, %206
  %280 = shl i32 %279, 2
  %281 = sub i32 %50, %150
  %282 = add i32 %281, %128
  %283 = sub i32 %282, %144
  %284 = sub i32 %283, %81
  %285 = mul i32 %284, 3
  %286 = add i32 %53, %20
  %287 = sub i32 %286, %31
  %288 = sub i32 %287, %50
  %289 = add i32 %288, %21
  %290 = sub i32 %289, %33
  %291 = sub i32 %290, %4
  %292 = sub i32 %291, %40
  %293 = add i32 %292, %60
  %294 = add i32 %293, %61
  %295 = sub i32 %294, %68
  %296 = sub i32 %295, %86
  %297 = sub i32 %296, %35
  %298 = sub i32 %297, %90
  %299 = sub i32 %298, %100
  %300 = add i32 %299, %101
  %301 = add i32 %300, %16
  %302 = sub i32 %301, %107
  %303 = sub i32 %302, %8
  %304 = add i32 %303, %29
  %305 = add i32 %304, %36
  %306 = add i32 %305, %145
  %307 = add i32 %306, %151
  %308 = sub i32 %307, %154
  %309 = sub i32 %308, %91
  %310 = add i32 %309, %161
  %311 = add i32 %310, %163
  %312 = add i32 %311, %170
  %313 = sub i32 %312, %185
  %314 = sub i32 %313, %192
  %315 = add i32 %314, %193
  %316 = add i32 %315, %197
  %317 = sub i32 %316, %110
  %318 = add i32 %317, %207
  %319 = sub i32 %318, %208
  %320 = add i32 %319, %215
  %321 = add i32 %320, %216
  %322 = sub i32 %321, %218
  %323 = add i32 %322, %233
  %324 = add i32 %323, %72
  %325 = add i32 %324, %244
  %326 = sub i32 %325, %18
  %327 = sub i32 %326, %28
  %328 = sub i32 %327, %30
  %329 = sub i32 %328, %34
  %330 = sub i32 %329, %37
  %331 = sub i32 %330, %38
  %332 = add i32 %331, %43
  %333 = add i32 %332, %51
  %334 = add i32 %333, %52
  %335 = add i32 %334, %54
  %336 = add i32 %335, %55
  %337 = sub i32 %336, %57
  %338 = add i32 %337, %58
  %339 = add i32 %338, %62
  %340 = sub i32 %339, %70
  %341 = sub i32 %340, %71
  %342 = add i32 %341, %73
  %343 = sub i32 %342, %74
  %344 = sub i32 %343, %80
  %345 = sub i32 %344, %82
  %346 = sub i32 %345, %89
  %347 = sub i32 %346, %95
  %348 = add i32 %347, %96
  %349 = add i32 %348, %97
  %350 = sub i32 %349, %102
  %351 = sub i32 %350, %104
  %352 = sub i32 %351, %105
  %353 = sub i32 %352, %106
  %354 = add i32 %353, %109
  %355 = add i32 %354, %113
  %356 = sub i32 %355, %115
  %357 = add i32 %356, %116
  %358 = add i32 %357, %117
  %359 = add i32 %358, %118
  %360 = add i32 %359, %121
  %361 = add i32 %360, %122
  %362 = add i32 %361, %126
  %363 = sub i32 %362, %130
  %364 = add i32 %363, %131
  %365 = sub i32 %364, %132
  %366 = sub i32 %365, %133
  %367 = add i32 %366, %135
  %368 = sub i32 %367, %138
  %369 = add i32 %368, %143
  %370 = sub i32 %369, %147
  %371 = add i32 %370, %148
  %372 = add i32 %371, %149
  %373 = sub i32 %372, %153
  %374 = add i32 %373, %155
  %375 = sub i32 %374, %156
  %376 = sub i32 %375, %157
  %377 = sub i32 %376, %158
  %378 = sub i32 %377, %159
  %379 = add i32 %378, %160
  %380 = add i32 %379, %162
  %381 = sub i32 %380, %165
  %382 = sub i32 %381, %166
  %383 = sub i32 %382, %171
  %384 = add i32 %383, %173
  %385 = add i32 %384, %177
  %386 = add i32 %385, %178
  %387 = sub i32 %386, %179
  %388 = sub i32 %387, %180
  %389 = add i32 %388, %181
  %390 = add i32 %389, %41
  %391 = sub i32 %390, %184
  %392 = sub i32 %391, %186
  %393 = add i32 %392, %189
  %394 = add i32 %393, %190
  %395 = sub i32 %394, %191
  %396 = sub i32 %395, %194
  %397 = sub i32 %396, %195
  %398 = sub i32 %397, %48
  %399 = add i32 %398, %198
  %400 = sub i32 %399, %201
  %401 = sub i32 %400, %203
  %402 = sub i32 %401, %205
  %403 = add i32 %402, %211
  %404 = add i32 %403, %217
  %405 = sub i32 %404, %220
  %406 = add i32 %405, %221
  %407 = add i32 %406, %222
  %408 = sub i32 %407, %226
  %409 = sub i32 %408, %227
  %410 = add i32 %409, %228
  %411 = add i32 %410, %229
  %412 = sub i32 %411, %230
  %413 = sub i32 %412, %136
  %414 = add i32 %413, %236
  %415 = add i32 %414, %237
  %416 = add i32 %415, %238
  %417 = add i32 %416, %24
  %418 = add i32 %417, %239
  %419 = sub i32 %418, %240
  %420 = sub i32 %419, %139
  %421 = sub i32 %420, %241
  %422 = add i32 %421, %242
  %423 = add i32 %422, %245
  %424 = sub i32 %423, %246
  %425 = add i32 %424, %255
  %426 = add i32 %425, %23
  %427 = sub i32 %426, %25
  %428 = add i32 %427, %42
  %429 = sub i32 %428, %45
  %430 = add i32 %429, %49
  %431 = sub i32 %430, %64
  %432 = sub i32 %431, %79
  %433 = add i32 %432, %85
  %434 = sub i32 %433, %88
  %435 = sub i32 %434, %94
  %436 = add i32 %435, %99
  %437 = sub i32 %436, %120
  %438 = sub i32 %437, %125
  %439 = add i32 %438, %137
  %440 = add i32 %439, %141
  %441 = add i32 %440, %169
  %442 = add i32 %441, %172
  %443 = sub i32 %442, %176
  %444 = sub i32 %443, %183
  %445 = add i32 %444, %188
  %446 = add i32 %445, %196
  %447 = add i32 %446, %204
  %448 = sub i32 %447, %210
  %449 = sub i32 %448, %213
  %450 = add i32 %449, %214
  %451 = sub i32 %450, %224
  %452 = sub i32 %451, %225
  %453 = sub i32 %452, %232
  %454 = add i32 %453, %248
  %455 = add i32 %454, %250
  %456 = add i32 %455, %252
  %457 = add i32 %456, %254
  %458 = add i32 %457, %257
  %459 = sub i32 %458, %200
  %460 = add i32 %459, %280
  %461 = add i32 %460, %278
  %462 = add i32 %461, %285
  %463 = add i32 %462, %273
  %464 = icmp eq i32 %12, %463
  %465 = select i1 %464, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %466 = tail call i32 @puts(i8* nonnull dereferenceable(1) %465)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
