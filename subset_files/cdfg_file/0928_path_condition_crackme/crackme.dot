digraph "DFG for'crackme' function" {
	Node0x1f28b10[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1f28b80[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x1f29200[shape=record, label="  %7 = shl i32 %6, 2"];
	Node0x1f29270[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x1f29310[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1f29380[shape=record, label="  %10 = add i32 %5, %9"];
	Node0x1f293f0[shape=record, label="  %11 = sub i32 %10, %7"];
	Node0x1f29460[shape=record, label="  %12 = xor i32 %2, -1"];
	Node0x1f294d0[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x1f29540[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1f295e0[shape=record, label="  %15 = shl i32 %1, 1"];
	Node0x1f29650[shape=record, label="  %16 = or i32 %12, %1"];
	Node0x1f296c0[shape=record, label="  %17 = shl i32 %5, 2"];
	Node0x1f29760[shape=record, label="  %18 = xor i32 %17, -4"];
	Node0x1f297d0[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0x1f29840[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x1f298b0[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x1f29920[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x1f29990[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x1f29a00[shape=record, label="  %24 = or i32 %21, %3"];
	Node0x1f29a70[shape=record, label="  %25 = xor i32 %6, -1"];
	Node0x1f29b10[shape=record, label="  %26 = mul i32 %8, -3"];
	Node0x1f29b80[shape=record, label="  %27 = shl i32 %0, 1"];
	Node0x1f29bf0[shape=record, label="  %28 = sub i32 %1, %27"];
	Node0x1f29c60[shape=record, label="  %29 = sub i32 %28, %15"];
	Node0x1f29cd0[shape=record, label="  %30 = add i32 %29, %12"];
	Node0x1f29d40[shape=record, label="  %31 = sub i32 %30, %2"];
	Node0x1f29db0[shape=record, label="  %32 = add i32 %31, %14"];
	Node0x1f2a030[shape=record, label="  %33 = add i32 %32, %16"];
	Node0x1f2a0a0[shape=record, label="  %34 = sub i32 %33, %13"];
	Node0x1f2a110[shape=record, label="  %35 = add i32 %34, %3"];
	Node0x1f2a180[shape=record, label="  %36 = add i32 %35, %20"];
	Node0x1f2a1f0[shape=record, label="  %37 = add i32 %36, %23"];
	Node0x1f2a260[shape=record, label="  %38 = sub i32 %37, %19"];
	Node0x1f2a2d0[shape=record, label="  %39 = sub i32 %38, %24"];
	Node0x1f2a340[shape=record, label="  %40 = add i32 %39, %25"];
	Node0x1f2a3b0[shape=record, label="  %41 = sub i32 %40, %22"];
	Node0x1f2a420[shape=record, label="  %42 = sub i32 %41, %18"];
	Node0x1f2a490[shape=record, label="  %43 = add i32 %42, %26"];
	Node0x1f2a500[shape=record, label="  %44 = icmp eq i32 %11, %43"];
	Node0x1ec9268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f2a9a0[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x1f2a9f0[shape=record, label="  ret void"];
	Node0x1f28b10 -> Node0x1f28b80;
	Node0x1f28b80 -> Node0x1f29200;
	Node0x1f29200 -> Node0x1f29270;
	Node0x1f29270 -> Node0x1f29310;
	Node0x1f29310 -> Node0x1f29380;
	Node0x1f29380 -> Node0x1f293f0;
	Node0x1f293f0 -> Node0x1f29460;
	Node0x1f29460 -> Node0x1f294d0;
	Node0x1f294d0 -> Node0x1f29540;
	Node0x1f29540 -> Node0x1f295e0;
	Node0x1f295e0 -> Node0x1f29650;
	Node0x1f29650 -> Node0x1f296c0;
	Node0x1f296c0 -> Node0x1f29760;
	Node0x1f29760 -> Node0x1f297d0;
	Node0x1f297d0 -> Node0x1f29840;
	Node0x1f29840 -> Node0x1f298b0;
	Node0x1f298b0 -> Node0x1f29920;
	Node0x1f29920 -> Node0x1f29990;
	Node0x1f29990 -> Node0x1f29a00;
	Node0x1f29a00 -> Node0x1f29a70;
	Node0x1f29a70 -> Node0x1f29b10;
	Node0x1f29b10 -> Node0x1f29b80;
	Node0x1f29b80 -> Node0x1f29bf0;
	Node0x1f29bf0 -> Node0x1f29c60;
	Node0x1f29c60 -> Node0x1f29cd0;
	Node0x1f29cd0 -> Node0x1f29d40;
	Node0x1f29d40 -> Node0x1f29db0;
	Node0x1f29db0 -> Node0x1f2a030;
	Node0x1f2a030 -> Node0x1f2a0a0;
	Node0x1f2a0a0 -> Node0x1f2a110;
	Node0x1f2a110 -> Node0x1f2a180;
	Node0x1f2a180 -> Node0x1f2a1f0;
	Node0x1f2a1f0 -> Node0x1f2a260;
	Node0x1f2a260 -> Node0x1f2a2d0;
	Node0x1f2a2d0 -> Node0x1f2a340;
	Node0x1f2a340 -> Node0x1f2a3b0;
	Node0x1f2a3b0 -> Node0x1f2a420;
	Node0x1f2a420 -> Node0x1f2a490;
	Node0x1f2a490 -> Node0x1f2a500;
	Node0x1f2a500 -> Node0x1ec9268;
	Node0x1ec9268 -> Node0x1f2a9a0;
	Node0x1f2a9a0 -> Node0x1f2a9f0;
edge [color=red]
	Node0x1f28b80 -> Node0x1f29200;
	Node0x1f29270 -> Node0x1f29310;
	Node0x1f28b10 -> Node0x1f29380;
	Node0x1f29310 -> Node0x1f29380;
	Node0x1f29380 -> Node0x1f293f0;
	Node0x1f29200 -> Node0x1f293f0;
	Node0x1f29460 -> Node0x1f294d0;
	Node0x1f294d0 -> Node0x1f29540;
	Node0x1f29460 -> Node0x1f29650;
	Node0x1f28b10 -> Node0x1f296c0;
	Node0x1f296c0 -> Node0x1f29760;
	Node0x1f297d0 -> Node0x1f29840;
	Node0x1f298b0 -> Node0x1f29920;
	Node0x1f29920 -> Node0x1f29990;
	Node0x1f298b0 -> Node0x1f29a00;
	Node0x1f28b80 -> Node0x1f29a70;
	Node0x1f29270 -> Node0x1f29b10;
	Node0x1f29b80 -> Node0x1f29bf0;
	Node0x1f29bf0 -> Node0x1f29c60;
	Node0x1f295e0 -> Node0x1f29c60;
	Node0x1f29c60 -> Node0x1f29cd0;
	Node0x1f29460 -> Node0x1f29cd0;
	Node0x1f29cd0 -> Node0x1f29d40;
	Node0x1f29d40 -> Node0x1f29db0;
	Node0x1f29540 -> Node0x1f29db0;
	Node0x1f29db0 -> Node0x1f2a030;
	Node0x1f29650 -> Node0x1f2a030;
	Node0x1f2a030 -> Node0x1f2a0a0;
	Node0x1f294d0 -> Node0x1f2a0a0;
	Node0x1f2a0a0 -> Node0x1f2a110;
	Node0x1f2a110 -> Node0x1f2a180;
	Node0x1f29840 -> Node0x1f2a180;
	Node0x1f2a180 -> Node0x1f2a1f0;
	Node0x1f29990 -> Node0x1f2a1f0;
	Node0x1f2a1f0 -> Node0x1f2a260;
	Node0x1f297d0 -> Node0x1f2a260;
	Node0x1f2a260 -> Node0x1f2a2d0;
	Node0x1f29a00 -> Node0x1f2a2d0;
	Node0x1f2a2d0 -> Node0x1f2a340;
	Node0x1f29a70 -> Node0x1f2a340;
	Node0x1f2a340 -> Node0x1f2a3b0;
	Node0x1f29920 -> Node0x1f2a3b0;
	Node0x1f2a3b0 -> Node0x1f2a420;
	Node0x1f29760 -> Node0x1f2a420;
	Node0x1f2a420 -> Node0x1f2a490;
	Node0x1f29b10 -> Node0x1f2a490;
	Node0x1f293f0 -> Node0x1f2a500;
	Node0x1f2a490 -> Node0x1f2a500;
	Node0x1f2a500 -> Node0x1ec9268;
	Node0x1ec9268 -> Node0x1f2a9a0;
}
