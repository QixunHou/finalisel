digraph "DFG for'crackme' function" {
	Node0x16c7520[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x16c7bd0[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x16c7c90[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x16c7d00[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x16c7d70[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x16c7de0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x16c7e50[shape=record, label="  %9 = and i32 %6, %0"];
	Node0x16c7ec0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x16c7f30[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x16c7fd0[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x16c8040[shape=record, label="  %13 = and i32 %5, %1"];
	Node0x16c80e0[shape=record, label="  %14 = mul i32 %13, -6"];
	Node0x16c8180[shape=record, label="  %15 = mul i32 %9, -5"];
	Node0x16c81f0[shape=record, label="  %16 = sub i32 -2, %0"];
	Node0x16c8260[shape=record, label="  %17 = sub i32 %16, %0"];
	Node0x16c82d0[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x16c8340[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x16c83b0[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x16c8420[shape=record, label="  %21 = sub i32 %20, %7"];
	Node0x16c8490[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x16c8500[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x16c8570[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x16c85e0[shape=record, label="  %25 = icmp eq i32 %4, %24"];
	Node0x1668268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16c8a80[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x16c8ad0[shape=record, label="  ret void"];
	Node0x16c7520 -> Node0x16c7bd0;
	Node0x16c7bd0 -> Node0x16c7c90;
	Node0x16c7c90 -> Node0x16c7d00;
	Node0x16c7d00 -> Node0x16c7d70;
	Node0x16c7d70 -> Node0x16c7de0;
	Node0x16c7de0 -> Node0x16c7e50;
	Node0x16c7e50 -> Node0x16c7ec0;
	Node0x16c7ec0 -> Node0x16c7f30;
	Node0x16c7f30 -> Node0x16c7fd0;
	Node0x16c7fd0 -> Node0x16c8040;
	Node0x16c8040 -> Node0x16c80e0;
	Node0x16c80e0 -> Node0x16c8180;
	Node0x16c8180 -> Node0x16c81f0;
	Node0x16c81f0 -> Node0x16c8260;
	Node0x16c8260 -> Node0x16c82d0;
	Node0x16c82d0 -> Node0x16c8340;
	Node0x16c8340 -> Node0x16c83b0;
	Node0x16c83b0 -> Node0x16c8420;
	Node0x16c8420 -> Node0x16c8490;
	Node0x16c8490 -> Node0x16c8500;
	Node0x16c8500 -> Node0x16c8570;
	Node0x16c8570 -> Node0x16c85e0;
	Node0x16c85e0 -> Node0x1668268;
	Node0x1668268 -> Node0x16c8a80;
	Node0x16c8a80 -> Node0x16c8ad0;
edge [color=red]
	Node0x16c7520 -> Node0x16c7bd0;
	Node0x16c7d70 -> Node0x16c7de0;
	Node0x16c7d00 -> Node0x16c7e50;
	Node0x16c7ec0 -> Node0x16c7f30;
	Node0x16c7f30 -> Node0x16c7fd0;
	Node0x16c7c90 -> Node0x16c8040;
	Node0x16c8040 -> Node0x16c80e0;
	Node0x16c7e50 -> Node0x16c8180;
	Node0x16c81f0 -> Node0x16c8260;
	Node0x16c8260 -> Node0x16c82d0;
	Node0x16c7de0 -> Node0x16c82d0;
	Node0x16c82d0 -> Node0x16c8340;
	Node0x16c7e50 -> Node0x16c8340;
	Node0x16c8340 -> Node0x16c83b0;
	Node0x16c7ec0 -> Node0x16c83b0;
	Node0x16c83b0 -> Node0x16c8420;
	Node0x16c7d70 -> Node0x16c8420;
	Node0x16c8420 -> Node0x16c8490;
	Node0x16c7fd0 -> Node0x16c8490;
	Node0x16c8490 -> Node0x16c8500;
	Node0x16c80e0 -> Node0x16c8500;
	Node0x16c8500 -> Node0x16c8570;
	Node0x16c8180 -> Node0x16c8570;
	Node0x16c7bd0 -> Node0x16c85e0;
	Node0x16c8570 -> Node0x16c85e0;
	Node0x16c85e0 -> Node0x1668268;
	Node0x1668268 -> Node0x16c8a80;
}
