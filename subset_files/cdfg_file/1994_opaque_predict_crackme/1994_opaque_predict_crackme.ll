; ModuleID = '../.././c_source_file/1994_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1994_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, %0
  %8 = xor i32 %5, %7
  %9 = shl i32 %8, 1
  %10 = xor i32 %1, -1
  %11 = xor i32 %2, %0
  %12 = or i32 %11, %10
  %13 = xor i32 %4, -1
  %14 = xor i32 %13, %0
  %15 = shl i32 %14, 1
  %16 = or i32 %10, %0
  %17 = xor i32 %16, %2
  %18 = xor i32 %1, %0
  %19 = or i32 %11, %18
  %20 = and i32 %1, %0
  %21 = xor i32 %2, -1
  %22 = or i32 %21, %1
  %23 = xor i32 %22, %20
  %24 = xor i32 %11, -1
  %25 = shl i32 %24, 1
  %26 = or i32 %18, %24
  %27 = shl i32 %26, 1
  %28 = and i32 %21, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %29, %10
  %31 = and i32 %10, %0
  %32 = or i32 %31, %21
  %33 = and i32 %18, %21
  %34 = or i32 %21, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %10
  %37 = or i32 %1, %0
  %38 = and i32 %37, %24
  %39 = xor i32 %37, -1
  %40 = or i32 %24, %39
  %41 = xor i32 %20, -1
  %42 = xor i32 %41, %2
  %43 = xor i32 %28, %1
  %44 = xor i32 %35, %1
  %45 = or i32 %18, %21
  %46 = and i32 %16, %24
  %47 = and i32 %37, %2
  %48 = and i32 %11, %1
  %49 = xor i32 %18, -1
  %50 = and i32 %21, %49
  %51 = and i32 %2, %0
  %52 = xor i32 %0, -1
  %53 = or i32 %2, %1
  %54 = xor i32 %53, -1
  %55 = or i32 %54, %52
  %56 = or i32 %13, %0
  %57 = xor i32 %6, -1
  %58 = and i32 %57, %0
  %59 = xor i32 %31, %2
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %61, %1
  %63 = or i32 %20, %21
  %64 = and i32 %6, %52
  %65 = or i32 %5, %64
  %66 = or i32 %20, %2
  %67 = shl i32 %66, 1
  %68 = add i32 %28, 1
  %69 = or i32 %51, %1
  %70 = xor i32 %16, -1
  %71 = or i32 %70, %2
  %72 = xor i32 %51, -1
  %73 = and i32 %18, %72
  %74 = xor i32 %22, -1
  %75 = or i32 %74, %52
  %76 = or i32 %6, %70
  %77 = and i32 %10, %2
  %78 = and i32 %77, %52
  %79 = xor i32 %6, 2147483647
  %80 = and i32 %79, %0
  %81 = or i32 %80, %78
  %82 = and i32 %22, %0
  %83 = or i32 %10, %2
  %84 = and i32 %83, %0
  %85 = or i32 %78, %84
  %86 = or i32 %57, %70
  %87 = or i32 %31, %2
  %88 = shl i32 %87, 1
  %89 = xor i32 %31, -1
  %90 = and i32 %21, %89
  %91 = and i32 %57, %89
  %92 = and i32 %21, %1
  %93 = or i32 %51, %92
  %94 = and i32 %11, %41
  %95 = xor i32 %70, %2
  %96 = and i32 %4, %52
  %97 = and i32 %6, %0
  %98 = xor i32 %96, -1
  %99 = xor i32 %97, %98
  %100 = xor i32 %51, %1
  %101 = and i32 %49, %2
  %102 = or i32 %51, %18
  %103 = shl i32 %37, 1
  %104 = xor i32 %31, %13
  %105 = and i32 %11, %18
  %106 = and i32 %77, %0
  %107 = xor i32 %83, %0
  %108 = xor i32 %107, 2147483647
  %109 = xor i32 %108, %106
  %110 = shl i32 %109, 1
  %111 = or i32 %4, %0
  %112 = xor i32 %34, %1
  %113 = xor i32 %22, %0
  %114 = xor i32 %53, %0
  %115 = xor i32 %5, -1
  %116 = xor i32 %114, %115
  %117 = and i32 %72, %10
  %118 = xor i32 %92, -1
  %119 = and i32 %118, %52
  %120 = shl i32 %119, 1
  %121 = or i32 %35, %49
  %122 = shl i32 %121, 1
  %123 = xor i32 %92, %0
  %124 = or i32 %51, %49
  %125 = or i32 %92, %0
  %126 = or i32 %20, %35
  %127 = and i32 %24, %41
  %128 = add i32 %60, 1
  %129 = xor i32 %74, %0
  %130 = xor i32 %64, 2147483647
  %131 = xor i32 %130, %5
  %132 = and i32 %11, %49
  %133 = or i32 %6, %0
  %134 = shl i32 %133, 1
  %135 = and i32 %29, %1
  %136 = add i32 %53, 1
  %137 = xor i32 %39, %2
  %138 = or i32 %6, %20
  %139 = or i32 %31, %57
  %140 = and i32 %53, %0
  %141 = or i32 %54, %0
  %142 = and i32 %11, %10
  %143 = and i32 %24, %1
  %144 = and i32 %53, %52
  %145 = shl i32 %144, 1
  %146 = xor i32 %51, %53
  %147 = and i32 %72, %49
  %148 = xor i32 %60, %20
  %149 = or i32 %28, %4
  %150 = or i32 %24, %10
  %151 = or i32 %96, %140
  %152 = xor i32 %72, %1
  %153 = and i32 %6, %41
  %154 = and i32 %6, %89
  %155 = shl i32 %154, 1
  %156 = xor i32 %140, %98
  %157 = add i32 %0, 1
  %158 = xor i32 %51, %37
  %159 = or i32 %20, %24
  %160 = or i32 %22, %52
  %161 = and i32 %18, %24
  %162 = or i32 %21, %39
  %163 = and i32 %22, %52
  %164 = shl i32 %163, 1
  %165 = or i32 %5, %144
  %166 = shl i32 %16, 1
  %167 = and i32 %34, %10
  %168 = and i32 %83, %52
  %169 = or i32 %106, %168
  %170 = xor i32 %7, -1
  %171 = or i32 %5, %170
  %172 = shl i32 %171, 1
  %173 = or i32 %11, %39
  %174 = shl i32 %173, 2
  %175 = or i32 %28, %10
  %176 = and i32 %118, %0
  %177 = or i32 %96, %97
  %178 = and i32 %29, %49
  %179 = or i32 %57, %39
  %180 = or i32 %18, %61
  %181 = or i32 %61, %10
  %182 = or i32 %28, %49
  %183 = or i32 %61, %49
  %184 = and i32 %72, %1
  %185 = shl i32 %1, 1
  %186 = or i32 %22, %0
  %187 = or i32 %28, %18
  %188 = or i32 %51, %10
  %189 = shl i32 %188, 1
  %190 = and i32 %34, %18
  %191 = and i32 %16, %57
  %192 = or i32 %20, %74
  %193 = and i32 %21, %41
  %194 = xor i32 %37, %2
  %195 = xor i32 %57, %0
  %196 = or i32 %51, %70
  %197 = xor i32 %118, %0
  %198 = or i32 %11, %20
  %199 = or i32 %49, %2
  %200 = or i32 %20, %61
  %201 = and i32 %13, %52
  %202 = or i32 %106, %107
  %203 = xor i32 %60, %1
  %204 = and i32 %60, %18
  %205 = shl i32 %57, 1
  %206 = or i32 %61, %1
  %207 = or i32 %24, %1
  %208 = shl i32 %207, 2
  %209 = xor i32 %89, %2
  %210 = xor i32 %4, %0
  %211 = xor i32 %20, %2
  %212 = xor i32 %84, -1
  %213 = xor i32 %78, %212
  %214 = xor i32 %28, %13
  %215 = and i32 %24, %10
  %216 = xor i32 %106, %133
  %217 = or i32 %20, %57
  %218 = xor i32 %168, -1
  %219 = xor i32 %106, %218
  %220 = and i32 %18, %29
  %221 = xor i32 %29, %1
  %222 = and i32 %16, %21
  %223 = or i32 %24, %70
  %224 = shl i32 %13, 1
  %225 = or i32 %28, %1
  %226 = and i32 %60, %10
  %227 = and i32 %34, %1
  %228 = and i32 %60, %1
  %229 = and i32 %11, %16
  %230 = or i32 %118, %52
  %231 = xor i32 %133, -1
  %232 = or i32 %106, %231
  %233 = or i32 %20, %54
  %234 = or i32 %24, %49
  %235 = and i32 %11, %37
  %236 = shl i32 %235, 1
  %237 = or i32 %92, %31
  %238 = or i32 %51, %39
  %239 = or i32 %106, %7
  %240 = xor i32 %51, %16
  %241 = or i32 %21, %49
  %242 = or i32 %57, %0
  %243 = shl i32 %41, 1
  %244 = or i32 %11, %49
  %245 = xor i32 %144, %115
  %246 = add i32 %31, 1
  %247 = xor i32 %53, %20
  %248 = or i32 %4, %52
  %249 = or i32 %92, %52
  %250 = and i32 %24, %49
  %251 = or i32 %53, %52
  %252 = or i32 %57, %52
  %253 = or i32 %11, %31
  %254 = or i32 %35, %1
  %255 = and i32 %13, %0
  %256 = or i32 %13, %52
  %257 = and i32 %34, %49
  %258 = shl i32 %257, 1
  %259 = and i32 %11, %89
  %260 = or i32 %18, %2
  %261 = or i32 %5, %114
  %262 = and i32 %57, %52
  %263 = or i32 %18, %35
  %264 = shl i32 %263, 1
  %265 = shl i32 %114, 1
  %266 = and i32 %24, %89
  %267 = or i32 %53, %0
  %268 = or i32 %6, %31
  %269 = and i32 %37, %57
  %270 = xor i32 %106, %170
  %271 = and i32 %41, %2
  %272 = and i32 %37, %21
  %273 = shl i32 %28, 1
  %274 = or i32 %11, %70
  %275 = or i32 %11, %1
  %276 = or i32 %51, %54
  %277 = shl i32 %276, 1
  %278 = and i32 %54, %52
  %279 = mul i32 %278, -10
  %280 = and i32 %92, %52
  %281 = mul i32 %280, 6
  %282 = and i32 %54, %0
  %283 = shl i32 %282, 3
  %284 = and i32 %92, %0
  %285 = and i32 %74, %52
  %286 = mul i32 %96, 15
  %287 = and i32 %74, %0
  %288 = add i32 %31, %10
  %289 = add i32 %288, %21
  %290 = add i32 %289, %241
  %291 = add i32 %290, %209
  %292 = add i32 %291, %22
  %293 = add i32 %292, %162
  %294 = add i32 %293, %287
  %295 = add i32 %294, %285
  %296 = add i32 %295, %214
  %297 = add i32 %296, %198
  %298 = add i32 %297, %178
  %299 = add i32 %298, %160
  %300 = add i32 %299, %143
  %301 = add i32 %300, %91
  %302 = add i32 %301, %85
  %303 = add i32 %302, %81
  %304 = add i32 %303, %131
  %305 = shl i32 %304, 1
  %306 = sub i32 %255, %229
  %307 = add i32 %306, %191
  %308 = add i32 %307, %261
  %309 = mul i32 %308, 5
  %310 = sub i32 %284, %5
  %311 = mul i32 %310, 9
  %312 = add i32 %215, -1
  %313 = add i32 %312, %221
  %314 = add i32 %313, %127
  %315 = sub i32 %314, %44
  %316 = add i32 %315, %43
  %317 = mul i32 %316, 3
  %318 = add i32 %157, %0
  %319 = add i32 %318, %39
  %320 = add i32 %319, %2
  %321 = sub i32 %320, %185
  %322 = add i32 %321, %70
  %323 = add i32 %322, %246
  %324 = sub i32 %323, %17
  %325 = sub i32 %324, %32
  %326 = add i32 %325, %33
  %327 = sub i32 %326, %42
  %328 = add i32 %327, %45
  %329 = add i32 %328, %47
  %330 = sub i32 %329, %50
  %331 = add i32 %330, %59
  %332 = add i32 %331, %63
  %333 = add i32 %332, %68
  %334 = add i32 %333, %71
  %335 = add i32 %334, %90
  %336 = add i32 %335, %95
  %337 = sub i32 %336, %101
  %338 = sub i32 %337, %103
  %339 = sub i32 %338, %53
  %340 = add i32 %339, %128
  %341 = add i32 %340, %136
  %342 = add i32 %341, %35
  %343 = add i32 %342, %137
  %344 = add i32 %343, %74
  %345 = sub i32 %344, %166
  %346 = add i32 %345, %193
  %347 = sub i32 %346, %194
  %348 = sub i32 %347, %199
  %349 = add i32 %348, %4
  %350 = sub i32 %349, %11
  %351 = add i32 %350, %211
  %352 = sub i32 %351, %222
  %353 = sub i32 %352, %34
  %354 = sub i32 %353, %6
  %355 = sub i32 %354, %243
  %356 = add i32 %355, %260
  %357 = sub i32 %356, %271
  %358 = sub i32 %357, %272
  %359 = sub i32 %358, %12
  %360 = sub i32 %359, %19
  %361 = add i32 %360, %23
  %362 = sub i32 %361, %25
  %363 = sub i32 %362, %30
  %364 = sub i32 %363, %36
  %365 = sub i32 %364, %38
  %366 = sub i32 %365, %40
  %367 = add i32 %366, %46
  %368 = add i32 %367, %48
  %369 = sub i32 %368, %55
  %370 = add i32 %369, %56
  %371 = add i32 %370, %58
  %372 = add i32 %371, %62
  %373 = sub i32 %372, %67
  %374 = add i32 %373, %7
  %375 = add i32 %374, %69
  %376 = sub i32 %375, %73
  %377 = sub i32 %376, %75
  %378 = sub i32 %377, %76
  %379 = sub i32 %378, %82
  %380 = sub i32 %379, %86
  %381 = sub i32 %380, %88
  %382 = add i32 %381, %93
  %383 = sub i32 %382, %94
  %384 = add i32 %383, %100
  %385 = sub i32 %384, %102
  %386 = sub i32 %385, %104
  %387 = sub i32 %386, %105
  %388 = sub i32 %387, %111
  %389 = add i32 %388, %112
  %390 = sub i32 %389, %113
  %391 = add i32 %390, %117
  %392 = sub i32 %391, %123
  %393 = add i32 %392, %124
  %394 = add i32 %393, %125
  %395 = add i32 %394, %126
  %396 = add i32 %395, %129
  %397 = add i32 %396, %132
  %398 = sub i32 %397, %135
  %399 = sub i32 %398, %138
  %400 = add i32 %399, %139
  %401 = sub i32 %400, %140
  %402 = add i32 %401, %141
  %403 = sub i32 %402, %142
  %404 = sub i32 %403, %146
  %405 = sub i32 %404, %147
  %406 = add i32 %405, %148
  %407 = add i32 %406, %149
  %408 = add i32 %407, %150
  %409 = add i32 %408, %152
  %410 = sub i32 %409, %153
  %411 = sub i32 %410, %158
  %412 = sub i32 %411, %159
  %413 = sub i32 %412, %161
  %414 = sub i32 %413, %167
  %415 = add i32 %414, %175
  %416 = sub i32 %415, %176
  %417 = add i32 %416, %179
  %418 = add i32 %417, %180
  %419 = sub i32 %418, %181
  %420 = sub i32 %419, %182
  %421 = sub i32 %420, %183
  %422 = add i32 %421, %184
  %423 = sub i32 %422, %186
  %424 = add i32 %423, %187
  %425 = sub i32 %424, %190
  %426 = add i32 %425, %192
  %427 = add i32 %426, %64
  %428 = sub i32 %427, %195
  %429 = add i32 %428, %196
  %430 = sub i32 %429, %197
  %431 = add i32 %430, %200
  %432 = add i32 %431, %201
  %433 = sub i32 %432, %203
  %434 = sub i32 %433, %204
  %435 = sub i32 %434, %205
  %436 = sub i32 %435, %206
  %437 = sub i32 %436, %210
  %438 = add i32 %437, %217
  %439 = add i32 %438, %220
  %440 = sub i32 %439, %223
  %441 = sub i32 %440, %224
  %442 = sub i32 %441, %225
  %443 = sub i32 %442, %226
  %444 = sub i32 %443, %227
  %445 = add i32 %444, %228
  %446 = add i32 %445, %230
  %447 = sub i32 %446, %233
  %448 = add i32 %447, %234
  %449 = add i32 %448, %237
  %450 = add i32 %449, %238
  %451 = add i32 %450, %240
  %452 = sub i32 %451, %242
  %453 = sub i32 %452, %244
  %454 = sub i32 %453, %247
  %455 = sub i32 %454, %248
  %456 = add i32 %455, %249
  %457 = sub i32 %456, %250
  %458 = sub i32 %457, %251
  %459 = add i32 %458, %252
  %460 = sub i32 %459, %253
  %461 = add i32 %460, %254
  %462 = add i32 %461, %256
  %463 = sub i32 %462, %259
  %464 = sub i32 %463, %262
  %465 = add i32 %464, %266
  %466 = add i32 %465, %267
  %467 = add i32 %466, %268
  %468 = sub i32 %467, %269
  %469 = add i32 %468, %97
  %470 = sub i32 %469, %273
  %471 = sub i32 %470, %274
  %472 = add i32 %471, %275
  %473 = add i32 %472, %15
  %474 = sub i32 %473, %27
  %475 = sub i32 %474, %65
  %476 = add i32 %475, %99
  %477 = add i32 %476, %116
  %478 = sub i32 %477, %120
  %479 = sub i32 %478, %122
  %480 = sub i32 %479, %134
  %481 = sub i32 %480, %145
  %482 = add i32 %481, %151
  %483 = sub i32 %482, %155
  %484 = add i32 %483, %156
  %485 = sub i32 %484, %164
  %486 = sub i32 %485, %165
  %487 = add i32 %486, %169
  %488 = add i32 %487, %174
  %489 = sub i32 %488, %177
  %490 = sub i32 %489, %189
  %491 = sub i32 %490, %202
  %492 = sub i32 %491, %208
  %493 = add i32 %492, %213
  %494 = add i32 %493, %216
  %495 = add i32 %494, %219
  %496 = add i32 %495, %232
  %497 = sub i32 %496, %236
  %498 = add i32 %497, %239
  %499 = sub i32 %498, %245
  %500 = sub i32 %499, %258
  %501 = sub i32 %500, %264
  %502 = sub i32 %501, %265
  %503 = sub i32 %502, %270
  %504 = sub i32 %503, %277
  %505 = add i32 %504, %279
  %506 = add i32 %505, %281
  %507 = sub i32 %506, %283
  %508 = add i32 %507, %286
  %509 = sub i32 %508, %172
  %510 = add i32 %509, %311
  %511 = sub i32 %510, %110
  %512 = add i32 %511, %309
  %513 = add i32 %512, %317
  %514 = add i32 %513, %305
  %515 = icmp eq i32 %9, %514
  %516 = select i1 %515, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %517 = tail call i32 @puts(i8* nonnull dereferenceable(1) %516)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
