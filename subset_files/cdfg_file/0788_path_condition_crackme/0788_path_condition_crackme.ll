; ModuleID = '../.././c_source_file/0788_path_condition_crackme.c'
source_filename = "../.././c_source_file/0788_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = add i32 %4, 1
  %8 = xor i32 %2, %0
  %9 = and i32 %8, %1
  %10 = add i32 %7, %9
  %11 = xor i32 %0, -1
  %12 = xor i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %11
  %15 = sub i32 %10, %14
  %16 = xor i32 %4, %3
  %17 = and i32 %6, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %3, -1
  %20 = or i32 %6, %3
  %21 = or i32 %4, %3
  %22 = shl i32 %21, 1
  %23 = xor i32 %22, -2
  %24 = add i32 %20, 1
  %25 = and i32 %4, %3
  %26 = and i32 %1, %0
  %27 = or i32 %26, %13
  %28 = xor i32 %2, -1
  %29 = or i32 %26, %28
  %30 = and i32 %2, %0
  %31 = or i32 %1, %0
  %32 = xor i32 %30, %31
  %33 = shl i32 %32, 1
  %34 = xor i32 %13, %0
  %35 = xor i32 %1, -1
  %36 = or i32 %35, %0
  %37 = and i32 %12, %36
  %38 = xor i32 %26, -1
  %39 = xor i32 %8, -1
  %40 = and i32 %31, %39
  %41 = xor i32 %31, -1
  %42 = and i32 %38, %2
  %43 = and i32 %28, %0
  %44 = shl i32 %13, 1
  %45 = or i32 %2, %1
  %46 = xor i32 %45, -1
  %47 = xor i32 %46, %0
  %48 = or i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %49, %1
  %51 = and i32 %35, %0
  %52 = or i32 %51, %39
  %53 = xor i32 %43, -1
  %54 = xor i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %53, %55
  %57 = and i32 %35, %2
  %58 = and i32 %57, %0
  %59 = or i32 %35, %2
  %60 = and i32 %59, %11
  %61 = or i32 %58, %60
  %62 = and i32 %8, %38
  %63 = and i32 %39, %1
  %64 = and i32 %57, %11
  %65 = and i32 %59, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %64, %66
  %68 = and i32 %2, %1
  %69 = and i32 %68, %0
  %70 = xor i32 %45, %0
  %71 = xor i32 %70, 1073741823
  %72 = xor i32 %71, %69
  %73 = shl i32 %72, 2
  %74 = and i32 %8, %54
  %75 = xor i32 %36, %2
  %76 = and i32 %39, %35
  %77 = and i32 %28, %1
  %78 = xor i32 %77, -1
  %79 = or i32 %78, %11
  %80 = and i32 %12, %11
  %81 = xor i32 %68, -1
  %82 = xor i32 %81, %0
  %83 = add i32 %48, 1
  %84 = xor i32 %30, %45
  %85 = or i32 %12, %26
  %86 = or i32 %30, %35
  %87 = xor i32 %31, %2
  %88 = or i32 %28, %0
  %89 = xor i32 %88, -1
  %90 = or i32 %89, %55
  %91 = and i32 %28, %38
  %92 = and i32 %12, %38
  %93 = or i32 %12, %0
  %94 = xor i32 %58, %93
  %95 = and i32 %12, %31
  %96 = shl i32 %95, 1
  %97 = xor i32 %48, %1
  %98 = or i32 %12, %11
  %99 = or i32 %89, %1
  %100 = or i32 %39, %41
  %101 = or i32 %69, %80
  %102 = and i32 %53, %1
  %103 = xor i32 %12, %0
  %104 = xor i32 %103, -1
  %105 = or i32 %69, %104
  %106 = or i32 %77, %11
  %107 = xor i32 %51, -1
  %108 = and i32 %13, %107
  %109 = and i32 %8, %35
  %110 = add i32 %45, 1
  %111 = or i32 %77, %0
  %112 = or i32 %28, %1
  %113 = xor i32 %112, %0
  %114 = and i32 %54, %2
  %115 = and i32 %8, %31
  %116 = or i32 %68, %0
  %117 = or i32 %26, %49
  %118 = and i32 %36, %2
  %119 = shl i32 %118, 1
  %120 = xor i32 %107, %2
  %121 = shl i32 %120, 1
  %122 = or i32 %51, %28
  %123 = or i32 %49, %1
  %124 = or i32 %13, %0
  %125 = and i32 %45, %0
  %126 = and i32 %88, %55
  %127 = and i32 %45, %11
  %128 = shl i32 %127, 1
  %129 = and i32 %28, %55
  %130 = and i32 %13, %0
  %131 = or i32 %51, %2
  %132 = xor i32 %58, -1
  %133 = xor i32 %60, %132
  %134 = xor i32 %38, %2
  %135 = xor i32 %98, 2147483647
  %136 = or i32 %135, %64
  %137 = shl i32 %136, 1
  %138 = xor i32 %59, %0
  %139 = xor i32 %138, %132
  %140 = or i32 %43, %68
  %141 = and i32 %112, %11
  %142 = or i32 %30, %54
  %143 = or i32 %55, %2
  %144 = xor i32 %51, %2
  %145 = or i32 %13, %11
  %146 = and i32 %48, %55
  %147 = or i32 %41, %2
  %148 = xor i32 %30, -1
  %149 = and i32 %54, %148
  %150 = and i32 %88, %1
  %151 = shl i32 %51, 1
  %152 = xor i32 %36, -1
  %153 = or i32 %8, %152
  %154 = and i32 %13, %38
  %155 = or i32 %69, %127
  %156 = and i32 %54, %28
  %157 = and i32 %31, %2
  %158 = xor i32 %58, %104
  %159 = and i32 %112, %0
  %160 = or i32 %43, %55
  %161 = and i32 %39, %38
  %162 = or i32 %13, %152
  %163 = and i32 %36, %28
  %164 = and i32 %78, %0
  %165 = shl i32 %164, 1
  %166 = or i32 %89, %35
  %167 = or i32 %78, %0
  %168 = or i32 %26, %39
  %169 = add i32 %88, 1
  %170 = and i32 %36, %13
  %171 = xor i32 %78, %0
  %172 = and i32 %55, %2
  %173 = or i32 %64, %65
  %174 = or i32 %8, %1
  %175 = and i32 %48, %54
  %176 = xor i32 %112, %26
  %177 = xor i32 %89, %1
  %178 = and i32 %68, %11
  %179 = and i32 %12, %0
  %180 = xor i32 %178, -1
  %181 = xor i32 %179, %180
  %182 = and i32 %31, %28
  %183 = xor i32 %45, %26
  %184 = or i32 %112, %0
  %185 = or i32 %30, %55
  %186 = or i32 %43, %1
  %187 = or i32 %178, %125
  %188 = xor i32 %88, %26
  %189 = xor i32 %112, -1
  %190 = or i32 %43, %189
  %191 = xor i32 %51, %78
  %192 = or i32 %43, %54
  %193 = or i32 %39, %55
  %194 = xor i32 %93, -1
  %195 = or i32 %58, %194
  %196 = or i32 %12, %51
  %197 = or i32 %69, %70
  %198 = or i32 %8, %41
  %199 = or i32 %26, %89
  %200 = add i32 %8, 1
  %201 = and i32 %39, %107
  %202 = xor i32 %30, %36
  %203 = and i32 %78, %11
  %204 = or i32 %54, %39
  %205 = or i32 %8, %26
  %206 = shl i32 %205, 1
  %207 = xor i32 %127, -1
  %208 = xor i32 %69, %207
  %209 = or i32 %51, %13
  %210 = or i32 %54, %2
  %211 = xor i32 %88, %1
  %212 = xor i32 %43, %81
  %213 = or i32 %112, %11
  %214 = shl i32 %213, 1
  %215 = or i32 %189, %11
  %216 = or i32 %49, %55
  %217 = xor i32 %30, %78
  %218 = or i32 %68, %51
  %219 = add i32 %51, 1
  %220 = or i32 %30, %41
  %221 = add i32 %30, 1
  %222 = or i32 %189, %0
  %223 = xor i32 %51, %81
  %224 = xor i32 %125, %180
  %225 = or i32 %30, %152
  %226 = or i32 %28, %55
  %227 = and i32 %148, %55
  %228 = xor i32 %30, %1
  %229 = xor i32 %43, %1
  %230 = xor i32 %48, %26
  %231 = xor i32 %64, %98
  %232 = and i32 %148, %35
  %233 = or i32 %12, %41
  %234 = or i32 %30, %77
  %235 = and i32 %81, %11
  %236 = or i32 %43, %35
  %237 = or i32 %26, %189
  %238 = and i32 %148, %1
  %239 = or i32 %45, %0
  %240 = shl i32 %239, 1
  %241 = or i32 %152, %2
  %242 = shl i32 %35, 1
  %243 = add i32 %112, 1
  %244 = or i32 %45, %11
  %245 = or i32 %12, %152
  %246 = and i32 %107, %2
  %247 = shl i32 %78, 1
  %248 = or i32 %49, %35
  %249 = or i32 %54, %49
  %250 = or i32 %8, %35
  %251 = and i32 %54, %53
  %252 = or i32 %54, %28
  %253 = or i32 %58, %138
  %254 = and i32 %88, %35
  %255 = and i32 %48, %35
  %256 = shl i32 %255, 1
  %257 = xor i32 %69, %103
  %258 = and i32 %31, %13
  %259 = or i32 %39, %35
  %260 = or i32 %30, %1
  %261 = or i32 %26, %2
  %262 = or i32 %178, %179
  %263 = xor i32 %262, -1
  %264 = or i32 %8, %54
  %265 = shl i32 %264, 1
  %266 = xor i32 %26, %2
  %267 = or i32 %28, %152
  %268 = xor i32 %189, %0
  %269 = or i32 %30, %46
  %270 = or i32 %28, %41
  %271 = shl i32 %270, 1
  %272 = or i32 %39, %152
  %273 = and i32 %8, %55
  %274 = or i32 %68, %11
  %275 = or i32 %26, %46
  %276 = or i32 %46, %11
  %277 = and i32 %28, %107
  %278 = add i32 %2, 1
  %279 = and i32 %54, %39
  %280 = or i32 %81, %11
  %281 = xor i32 %43, %112
  %282 = or i32 %77, %51
  %283 = and i32 %8, %107
  %284 = xor i32 %77, %0
  %285 = and i32 %48, %1
  %286 = or i32 %8, %51
  %287 = and i32 %88, %54
  %288 = and i32 %81, %0
  %289 = xor i32 %148, %1
  %290 = xor i32 %68, %0
  %291 = or i32 %46, %0
  %292 = xor i32 %41, %2
  %293 = shl i32 %292, 1
  %294 = and i32 %46, %11
  %295 = and i32 %77, %11
  %296 = and i32 %46, %0
  %297 = and i32 %77, %0
  %298 = mul i32 %297, -34
  %299 = and i32 %189, %11
  %300 = mul i32 %299, -15
  %301 = and i32 %189, %0
  %302 = mul i32 %301, -7
  %303 = mul i32 %69, -55
  %304 = add i32 %225, %286
  %305 = sub i32 %222, %304
  %306 = add i32 %305, %170
  %307 = add i32 %306, %117
  %308 = add i32 %307, %187
  %309 = mul i32 %308, 5
  %310 = sub i32 %48, %12
  %311 = sub i32 %310, %178
  %312 = add i32 %311, %273
  %313 = add i32 %312, %24
  %314 = sub i32 %313, %25
  %315 = mul i32 %314, 3
  %316 = sub i32 %295, %296
  %317 = mul i32 %316, 13
  %318 = add i32 %17, %294
  %319 = mul i32 %318, -6
  %320 = add i32 %103, %116
  %321 = shl i32 %320, 2
  %322 = add i32 %1, -1
  %323 = add i32 %322, %55
  %324 = add i32 %323, %172
  %325 = add i32 %324, %147
  %326 = add i32 %325, %29
  %327 = add i32 %326, %3
  %328 = add i32 %327, %289
  %329 = add i32 %328, %291
  %330 = add i32 %329, %281
  %331 = add i32 %330, %275
  %332 = add i32 %331, %250
  %333 = add i32 %332, %244
  %334 = add i32 %333, %237
  %335 = add i32 %334, %234
  %336 = add i32 %335, %217
  %337 = add i32 %336, %191
  %338 = add i32 %337, %183
  %339 = add i32 %338, %160
  %340 = add i32 %339, %153
  %341 = add i32 %340, %150
  %342 = add i32 %341, %125
  %343 = add i32 %342, %111
  %344 = add i32 %343, %102
  %345 = add i32 %344, %34
  %346 = add i32 %345, %27
  %347 = add i32 %346, %16
  %348 = shl i32 %347, 1
  %349 = add i32 %1, %0
  %350 = add i32 %349, 4
  %351 = sub i32 %350, %26
  %352 = sub i32 %351, %2
  %353 = add i32 %352, %36
  %354 = add i32 %353, %54
  %355 = add i32 %354, %219
  %356 = sub i32 %355, %31
  %357 = sub i32 %356, %242
  %358 = add i32 %357, %278
  %359 = add i32 %358, %19
  %360 = add i32 %359, %42
  %361 = sub i32 %360, %43
  %362 = sub i32 %361, %8
  %363 = add i32 %362, %75
  %364 = add i32 %363, %83
  %365 = sub i32 %364, %87
  %366 = sub i32 %365, %91
  %367 = add i32 %366, %110
  %368 = add i32 %367, %114
  %369 = add i32 %368, %122
  %370 = add i32 %369, %129
  %371 = add i32 %370, %131
  %372 = sub i32 %371, %134
  %373 = sub i32 %372, %143
  %374 = add i32 %373, %144
  %375 = sub i32 %374, %151
  %376 = add i32 %375, %156
  %377 = sub i32 %376, %157
  %378 = add i32 %377, %88
  %379 = add i32 %378, %112
  %380 = add i32 %379, %163
  %381 = add i32 %380, %169
  %382 = add i32 %381, %182
  %383 = add i32 %382, %200
  %384 = add i32 %383, %30
  %385 = add i32 %384, %210
  %386 = add i32 %385, %53
  %387 = add i32 %386, %221
  %388 = sub i32 %387, %77
  %389 = add i32 %388, %226
  %390 = sub i32 %389, %45
  %391 = add i32 %390, %241
  %392 = add i32 %391, %243
  %393 = add i32 %392, %246
  %394 = sub i32 %393, %252
  %395 = add i32 %394, %261
  %396 = add i32 %395, %266
  %397 = sub i32 %396, %267
  %398 = add i32 %397, %277
  %399 = sub i32 %398, %4
  %400 = sub i32 %399, %37
  %401 = sub i32 %400, %40
  %402 = sub i32 %401, %44
  %403 = sub i32 %402, %47
  %404 = sub i32 %403, %50
  %405 = sub i32 %404, %52
  %406 = add i32 %405, %56
  %407 = add i32 %406, %62
  %408 = add i32 %407, %63
  %409 = add i32 %408, %74
  %410 = add i32 %409, %76
  %411 = sub i32 %410, %79
  %412 = sub i32 %411, %80
  %413 = add i32 %412, %82
  %414 = sub i32 %413, %84
  %415 = add i32 %414, %85
  %416 = add i32 %415, %86
  %417 = sub i32 %416, %90
  %418 = add i32 %417, %92
  %419 = sub i32 %418, %97
  %420 = sub i32 %419, %98
  %421 = add i32 %420, %99
  %422 = sub i32 %421, %100
  %423 = sub i32 %422, %106
  %424 = sub i32 %423, %108
  %425 = add i32 %424, %109
  %426 = sub i32 %425, %113
  %427 = sub i32 %426, %115
  %428 = sub i32 %427, %119
  %429 = sub i32 %428, %121
  %430 = sub i32 %429, %123
  %431 = add i32 %430, %124
  %432 = add i32 %431, %126
  %433 = add i32 %432, %130
  %434 = add i32 %433, %140
  %435 = sub i32 %434, %141
  %436 = add i32 %435, %142
  %437 = add i32 %436, %145
  %438 = add i32 %437, %146
  %439 = add i32 %438, %149
  %440 = sub i32 %439, %154
  %441 = sub i32 %440, %159
  %442 = sub i32 %441, %161
  %443 = sub i32 %442, %162
  %444 = sub i32 %443, %166
  %445 = add i32 %444, %167
  %446 = add i32 %445, %93
  %447 = add i32 %446, %168
  %448 = add i32 %447, %171
  %449 = sub i32 %448, %174
  %450 = sub i32 %449, %175
  %451 = sub i32 %450, %176
  %452 = add i32 %451, %177
  %453 = sub i32 %452, %184
  %454 = add i32 %453, %185
  %455 = sub i32 %454, %186
  %456 = sub i32 %455, %188
  %457 = sub i32 %456, %190
  %458 = sub i32 %457, %192
  %459 = sub i32 %458, %193
  %460 = add i32 %459, %196
  %461 = add i32 %460, %198
  %462 = add i32 %461, %199
  %463 = sub i32 %462, %201
  %464 = sub i32 %463, %202
  %465 = sub i32 %464, %203
  %466 = sub i32 %465, %204
  %467 = add i32 %466, %209
  %468 = sub i32 %467, %211
  %469 = sub i32 %468, %212
  %470 = sub i32 %469, %215
  %471 = add i32 %470, %216
  %472 = add i32 %471, %218
  %473 = sub i32 %472, %220
  %474 = sub i32 %473, %223
  %475 = add i32 %474, %227
  %476 = add i32 %475, %228
  %477 = sub i32 %476, %229
  %478 = sub i32 %477, %230
  %479 = add i32 %478, %70
  %480 = sub i32 %479, %232
  %481 = add i32 %480, %233
  %482 = sub i32 %481, %235
  %483 = add i32 %482, %236
  %484 = sub i32 %483, %238
  %485 = add i32 %484, %245
  %486 = sub i32 %485, %247
  %487 = sub i32 %486, %248
  %488 = sub i32 %487, %249
  %489 = add i32 %488, %251
  %490 = add i32 %489, %254
  %491 = sub i32 %490, %258
  %492 = sub i32 %491, %259
  %493 = sub i32 %492, %260
  %494 = add i32 %493, %268
  %495 = add i32 %494, %269
  %496 = sub i32 %495, %271
  %497 = sub i32 %496, %272
  %498 = sub i32 %497, %274
  %499 = add i32 %498, %276
  %500 = add i32 %499, %279
  %501 = sub i32 %500, %280
  %502 = add i32 %501, %282
  %503 = add i32 %502, %283
  %504 = add i32 %503, %284
  %505 = add i32 %504, %285
  %506 = add i32 %505, %287
  %507 = add i32 %506, %288
  %508 = add i32 %507, %179
  %509 = add i32 %508, %290
  %510 = sub i32 %509, %293
  %511 = add i32 %510, %18
  %512 = add i32 %511, %20
  %513 = sub i32 %512, %33
  %514 = add i32 %513, %61
  %515 = sub i32 %514, %67
  %516 = sub i32 %515, %94
  %517 = sub i32 %516, %96
  %518 = sub i32 %517, %101
  %519 = add i32 %518, %105
  %520 = sub i32 %519, %128
  %521 = sub i32 %520, %133
  %522 = sub i32 %521, %139
  %523 = add i32 %522, %155
  %524 = sub i32 %523, %158
  %525 = sub i32 %524, %165
  %526 = add i32 %525, %173
  %527 = add i32 %526, %181
  %528 = add i32 %527, %195
  %529 = add i32 %528, %197
  %530 = sub i32 %529, %206
  %531 = add i32 %530, %208
  %532 = sub i32 %531, %214
  %533 = sub i32 %532, %224
  %534 = sub i32 %533, %231
  %535 = sub i32 %534, %240
  %536 = add i32 %535, %253
  %537 = sub i32 %536, %256
  %538 = sub i32 %537, %257
  %539 = add i32 %538, %263
  %540 = sub i32 %539, %265
  %541 = add i32 %540, %298
  %542 = add i32 %541, %300
  %543 = add i32 %542, %302
  %544 = add i32 %543, %303
  %545 = add i32 %544, %22
  %546 = add i32 %545, %317
  %547 = add i32 %546, %321
  %548 = sub i32 %547, %23
  %549 = sub i32 %548, %73
  %550 = sub i32 %549, %137
  %551 = add i32 %550, %319
  %552 = add i32 %551, %309
  %553 = add i32 %552, %315
  %554 = add i32 %553, %348
  %555 = icmp eq i32 %15, %554
  %556 = select i1 %555, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %557 = tail call i32 @puts(i8* nonnull dereferenceable(1) %556)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
