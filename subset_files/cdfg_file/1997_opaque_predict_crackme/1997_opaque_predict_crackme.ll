; ModuleID = '../.././c_source_file/1997_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1997_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = and i32 %4, %0
  %6 = or i32 %2, %1
  %7 = xor i32 %6, %0
  %8 = or i32 %5, %7
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %0
  %11 = or i32 %10, %4
  %12 = add i32 %8, %11
  %13 = xor i32 %1, -1
  %14 = or i32 %10, %13
  %15 = and i32 %13, %2
  %16 = and i32 %15, %0
  %17 = xor i32 %0, -1
  %18 = or i32 %13, %2
  %19 = and i32 %18, %17
  %20 = xor i32 %19, 2147483647
  %21 = xor i32 %20, %16
  %22 = shl i32 %21, 1
  %23 = xor i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = xor i32 %24, %0
  %26 = and i32 %1, %0
  %27 = xor i32 %2, %0
  %28 = or i32 %27, %26
  %29 = xor i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %10, -1
  %32 = and i32 %29, %31
  %33 = shl i32 %32, 1
  %34 = or i32 %13, %0
  %35 = xor i32 %34, %2
  %36 = or i32 %9, %0
  %37 = xor i32 %36, %1
  %38 = xor i32 %6, %26
  %39 = or i32 %29, %9
  %40 = xor i32 %18, %17
  %41 = xor i32 %40, %16
  %42 = xor i32 %10, %1
  %43 = or i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %27, -1
  %46 = or i32 %45, %44
  %47 = or i32 %9, %1
  %48 = and i32 %47, %0
  %49 = and i32 %13, %0
  %50 = xor i32 %49, -1
  %51 = and i32 %24, %50
  %52 = and i32 %9, %1
  %53 = or i32 %52, %17
  %54 = and i32 %31, %13
  %55 = and i32 %27, %29
  %56 = and i32 %34, %9
  %57 = and i32 %2, %0
  %58 = xor i32 %52, -1
  %59 = xor i32 %57, %58
  %60 = xor i32 %34, -1
  %61 = or i32 %57, %60
  %62 = shl i32 %61, 1
  %63 = xor i32 %26, -1
  %64 = and i32 %24, %63
  %65 = xor i32 %52, %0
  %66 = or i32 %26, %24
  %67 = xor i32 %63, %2
  %68 = or i32 %45, %1
  %69 = and i32 %15, %17
  %70 = or i32 %23, %17
  %71 = xor i32 %70, -1
  %72 = or i32 %69, %71
  %73 = and i32 %9, %63
  %74 = or i32 %4, %17
  %75 = xor i32 %44, %2
  %76 = or i32 %47, %17
  %77 = or i32 %2, %0
  %78 = xor i32 %77, -1
  %79 = or i32 %29, %78
  %80 = and i32 %45, %13
  %81 = or i32 %27, %60
  %82 = shl i32 %81, 1
  %83 = or i32 %57, %13
  %84 = and i32 %6, %17
  %85 = or i32 %5, %84
  %86 = xor i32 %47, -1
  %87 = or i32 %26, %86
  %88 = xor i32 %23, %0
  %89 = xor i32 %88, %5
  %90 = and i32 %45, %63
  %91 = xor i32 %77, %1
  %92 = xor i32 %6, -1
  %93 = or i32 %92, %17
  %94 = or i32 %29, %2
  %95 = and i32 %24, %0
  %96 = or i32 %58, %0
  %97 = and i32 %77, %1
  %98 = xor i32 %49, %58
  %99 = xor i32 %36, %26
  %100 = or i32 %27, %1
  %101 = and i32 %43, %45
  %102 = shl i32 %101, 1
  %103 = xor i32 %57, -1
  %104 = and i32 %103, %30
  %105 = and i32 %34, %2
  %106 = add i32 %2, 1
  %107 = or i32 %44, %2
  %108 = or i32 %57, %29
  %109 = or i32 %24, %44
  %110 = shl i32 %109, 1
  %111 = or i32 %23, %0
  %112 = xor i32 %16, %111
  %113 = and i32 %103, %13
  %114 = shl i32 %113, 1
  %115 = and i32 %4, %17
  %116 = and i32 %6, %0
  %117 = or i32 %115, %116
  %118 = or i32 %10, %29
  %119 = shl i32 %118, 1
  %120 = or i32 %58, %17
  %121 = and i32 %31, %30
  %122 = or i32 %27, %30
  %123 = xor i32 %36, -1
  %124 = xor i32 %123, %1
  %125 = or i32 %23, %60
  %126 = shl i32 %125, 2
  %127 = or i32 %16, %19
  %128 = or i32 %123, %13
  %129 = or i32 %45, %60
  %130 = xor i32 %4, -1
  %131 = or i32 %130, %17
  %132 = or i32 %24, %0
  %133 = xor i32 %10, %47
  %134 = and i32 %27, %63
  %135 = shl i32 %134, 1
  %136 = or i32 %23, %26
  %137 = shl i32 %136, 1
  %138 = and i32 %130, %0
  %139 = or i32 %57, %44
  %140 = or i32 %45, %13
  %141 = xor i32 %49, %130
  %142 = or i32 %92, %0
  %143 = or i32 %23, %49
  %144 = xor i32 %47, %0
  %145 = or i32 %9, %44
  %146 = shl i32 %60, 1
  %147 = and i32 %29, %103
  %148 = xor i32 %58, %0
  %149 = or i32 %9, %30
  %150 = or i32 %23, %44
  %151 = xor i32 %43, %2
  %152 = shl i32 %26, 1
  %153 = or i32 %27, %13
  %154 = xor i32 %69, %70
  %155 = or i32 %123, %1
  %156 = or i32 %47, %0
  %157 = and i32 %9, %30
  %158 = and i32 %43, %9
  %159 = and i32 %29, %9
  %160 = xor i32 %57, %1
  %161 = shl i32 %160, 1
  %162 = xor i32 %7, -1
  %163 = xor i32 %5, %162
  %164 = and i32 %23, %63
  %165 = and i32 %23, %17
  %166 = or i32 %5, %165
  %167 = and i32 %34, %24
  %168 = or i32 %26, %2
  %169 = or i32 %26, %9
  %170 = shl i32 %169, 1
  %171 = and i32 %23, %34
  %172 = shl i32 %171, 1
  %173 = and i32 %18, %0
  %174 = xor i32 %173, -1
  %175 = xor i32 %69, %174
  %176 = and i32 %31, %1
  %177 = and i32 %36, %29
  %178 = and i32 %45, %30
  %179 = or i32 %26, %78
  %180 = and i32 %63, %2
  %181 = or i32 %29, %123
  %182 = and i32 %43, %24
  %183 = or i32 %57, %92
  %184 = or i32 %24, %17
  %185 = and i32 %36, %13
  %186 = shl i32 %185, 1
  %187 = or i32 %78, %1
  %188 = shl i32 %187, 1
  %189 = and i32 %92, %17
  %190 = shl i32 %189, 4
  %191 = and i32 %52, %17
  %192 = and i32 %92, %0
  %193 = mul i32 %192, -7
  %194 = and i32 %86, %17
  %195 = shl i32 %194, 4
  %196 = mul i32 %115, -9
  %197 = mul i32 %5, -6
  %198 = add i32 %13, %0
  %199 = add i32 %198, %157
  %200 = add i32 %199, %103
  %201 = add i32 %200, %94
  %202 = add i32 %201, %191
  %203 = add i32 %202, %121
  %204 = add i32 %203, %79
  %205 = add i32 %204, %55
  %206 = add i32 %205, %127
  %207 = shl i32 %206, 1
  %208 = add i32 %129, %168
  %209 = shl i32 %208, 2
  %210 = sub i32 %4, %180
  %211 = mul i32 %210, 3
  %212 = sub i32 %123, %178
  %213 = mul i32 %212, 5
  %214 = add i32 %13, %30
  %215 = add i32 %214, %50
  %216 = add i32 %215, %44
  %217 = add i32 %216, %106
  %218 = add i32 %217, %63
  %219 = add i32 %218, %2
  %220 = sub i32 %219, %35
  %221 = add i32 %220, %39
  %222 = add i32 %221, %56
  %223 = add i32 %222, %67
  %224 = add i32 %223, %73
  %225 = sub i32 %224, %75
  %226 = add i32 %225, %105
  %227 = add i32 %226, %107
  %228 = sub i32 %227, %57
  %229 = sub i32 %228, %145
  %230 = sub i32 %229, %146
  %231 = add i32 %230, %149
  %232 = add i32 %231, %151
  %233 = sub i32 %232, %152
  %234 = add i32 %233, %78
  %235 = add i32 %234, %158
  %236 = add i32 %235, %159
  %237 = add i32 %236, %14
  %238 = add i32 %237, %25
  %239 = add i32 %238, %28
  %240 = sub i32 %239, %37
  %241 = add i32 %240, %38
  %242 = sub i32 %241, %42
  %243 = add i32 %242, %46
  %244 = add i32 %243, %48
  %245 = sub i32 %244, %51
  %246 = add i32 %245, %53
  %247 = add i32 %246, %54
  %248 = add i32 %247, %59
  %249 = sub i32 %248, %64
  %250 = add i32 %249, %65
  %251 = add i32 %250, %66
  %252 = sub i32 %251, %68
  %253 = add i32 %252, %74
  %254 = add i32 %253, %76
  %255 = sub i32 %254, %80
  %256 = sub i32 %255, %83
  %257 = sub i32 %256, %87
  %258 = sub i32 %257, %90
  %259 = sub i32 %258, %91
  %260 = sub i32 %259, %93
  %261 = add i32 %260, %95
  %262 = sub i32 %261, %96
  %263 = sub i32 %262, %97
  %264 = add i32 %263, %98
  %265 = add i32 %264, %99
  %266 = sub i32 %265, %100
  %267 = sub i32 %266, %104
  %268 = add i32 %267, %108
  %269 = sub i32 %268, %120
  %270 = sub i32 %269, %116
  %271 = add i32 %270, %122
  %272 = sub i32 %271, %124
  %273 = sub i32 %272, %128
  %274 = sub i32 %273, %131
  %275 = add i32 %274, %132
  %276 = sub i32 %275, %133
  %277 = add i32 %276, %138
  %278 = add i32 %277, %139
  %279 = sub i32 %278, %140
  %280 = add i32 %279, %141
  %281 = add i32 %280, %142
  %282 = sub i32 %281, %143
  %283 = sub i32 %282, %144
  %284 = add i32 %283, %147
  %285 = add i32 %284, %148
  %286 = add i32 %285, %150
  %287 = add i32 %286, %153
  %288 = add i32 %287, %155
  %289 = add i32 %288, %156
  %290 = add i32 %289, %164
  %291 = sub i32 %290, %167
  %292 = sub i32 %291, %170
  %293 = sub i32 %292, %176
  %294 = sub i32 %293, %177
  %295 = add i32 %294, %179
  %296 = add i32 %295, %181
  %297 = add i32 %296, %182
  %298 = add i32 %297, %183
  %299 = add i32 %298, %184
  %300 = sub i32 %299, %33
  %301 = add i32 %300, %41
  %302 = sub i32 %301, %62
  %303 = sub i32 %302, %72
  %304 = sub i32 %303, %82
  %305 = add i32 %304, %85
  %306 = sub i32 %305, %89
  %307 = sub i32 %306, %102
  %308 = sub i32 %307, %110
  %309 = add i32 %308, %112
  %310 = sub i32 %309, %114
  %311 = sub i32 %310, %117
  %312 = sub i32 %311, %119
  %313 = sub i32 %312, %126
  %314 = sub i32 %313, %135
  %315 = sub i32 %314, %137
  %316 = add i32 %315, %154
  %317 = sub i32 %316, %161
  %318 = sub i32 %317, %163
  %319 = add i32 %318, %166
  %320 = sub i32 %319, %172
  %321 = add i32 %320, %175
  %322 = sub i32 %321, %186
  %323 = sub i32 %322, %188
  %324 = sub i32 %323, %190
  %325 = add i32 %324, %193
  %326 = sub i32 %325, %195
  %327 = add i32 %326, %196
  %328 = add i32 %327, %197
  %329 = add i32 %328, %211
  %330 = add i32 %329, %209
  %331 = add i32 %330, %213
  %332 = sub i32 %331, %22
  %333 = add i32 %332, %207
  %334 = icmp eq i32 %12, %333
  %335 = select i1 %334, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %336 = tail call i32 @puts(i8* nonnull dereferenceable(1) %335)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
