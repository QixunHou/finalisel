digraph "DFG for'crackme' function" {
	Node0x138cb10[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x138d190[shape=record, label="  %6 = add i32 %5, 1"];
	Node0x138d200[shape=record, label="  %7 = xor i32 %2, %1"];
	Node0x138d270[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0x138d2e0[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x138d350[shape=record, label="  %10 = sub i32 %8, %9"];
	Node0x138d3f0[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x138d460[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x138d4d0[shape=record, label="  %13 = or i32 %2, %1"];
	Node0x138d540[shape=record, label="  %14 = shl i32 %12, 1"];
	Node0x138d5e0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x138d650[shape=record, label="  %16 = and i32 %11, %1"];
	Node0x138d6f0[shape=record, label="  %17 = shl i32 %16, 2"];
	Node0x138d760[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x138d7d0[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0x138d840[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x138d8b0[shape=record, label="  %21 = and i32 %18, %3"];
	Node0x138d920[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x138d990[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x138da00[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x138da70[shape=record, label="  %25 = and i32 %23, %0"];
	Node0x138db10[shape=record, label="  %26 = mul i32 %25, -3"];
	Node0x138db80[shape=record, label="  %27 = shl i32 %24, 1"];
	Node0x138dbf0[shape=record, label="  %28 = add i32 %19, %13"];
	Node0x138dc60[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x138dd00[shape=record, label="  %30 = sub i32 5, %2"];
	Node0x138dd70[shape=record, label="  %31 = add i32 %30, %12"];
	Node0x138dde0[shape=record, label="  %32 = add i32 %31, %7"];
	Node0x138e060[shape=record, label="  %33 = add i32 %32, %23"];
	Node0x138e0d0[shape=record, label="  %34 = sub i32 %33, %17"];
	Node0x138e140[shape=record, label="  %35 = add i32 %34, %20"];
	Node0x138e1b0[shape=record, label="  %36 = add i32 %35, %22"];
	Node0x138e220[shape=record, label="  %37 = add i32 %36, %24"];
	Node0x138e290[shape=record, label="  %38 = add i32 %37, %9"];
	Node0x138e300[shape=record, label="  %39 = sub i32 %38, %21"];
	Node0x138e370[shape=record, label="  %40 = sub i32 %39, %15"];
	Node0x138e3e0[shape=record, label="  %41 = add i32 %40, %26"];
	Node0x138e450[shape=record, label="  %42 = sub i32 %41, %27"];
	Node0x138e4c0[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x138e530[shape=record, label="  %44 = icmp eq i32 %10, %43"];
	Node0x132d268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x138e9d0[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x138ea20[shape=record, label="  ret void"];
	Node0x138cb10 -> Node0x138d190;
	Node0x138d190 -> Node0x138d200;
	Node0x138d200 -> Node0x138d270;
	Node0x138d270 -> Node0x138d2e0;
	Node0x138d2e0 -> Node0x138d350;
	Node0x138d350 -> Node0x138d3f0;
	Node0x138d3f0 -> Node0x138d460;
	Node0x138d460 -> Node0x138d4d0;
	Node0x138d4d0 -> Node0x138d540;
	Node0x138d540 -> Node0x138d5e0;
	Node0x138d5e0 -> Node0x138d650;
	Node0x138d650 -> Node0x138d6f0;
	Node0x138d6f0 -> Node0x138d760;
	Node0x138d760 -> Node0x138d7d0;
	Node0x138d7d0 -> Node0x138d840;
	Node0x138d840 -> Node0x138d8b0;
	Node0x138d8b0 -> Node0x138d920;
	Node0x138d920 -> Node0x138d990;
	Node0x138d990 -> Node0x138da00;
	Node0x138da00 -> Node0x138da70;
	Node0x138da70 -> Node0x138db10;
	Node0x138db10 -> Node0x138db80;
	Node0x138db80 -> Node0x138dbf0;
	Node0x138dbf0 -> Node0x138dc60;
	Node0x138dc60 -> Node0x138dd00;
	Node0x138dd00 -> Node0x138dd70;
	Node0x138dd70 -> Node0x138dde0;
	Node0x138dde0 -> Node0x138e060;
	Node0x138e060 -> Node0x138e0d0;
	Node0x138e0d0 -> Node0x138e140;
	Node0x138e140 -> Node0x138e1b0;
	Node0x138e1b0 -> Node0x138e220;
	Node0x138e220 -> Node0x138e290;
	Node0x138e290 -> Node0x138e300;
	Node0x138e300 -> Node0x138e370;
	Node0x138e370 -> Node0x138e3e0;
	Node0x138e3e0 -> Node0x138e450;
	Node0x138e450 -> Node0x138e4c0;
	Node0x138e4c0 -> Node0x138e530;
	Node0x138e530 -> Node0x132d268;
	Node0x132d268 -> Node0x138e9d0;
	Node0x138e9d0 -> Node0x138ea20;
edge [color=red]
	Node0x138cb10 -> Node0x138d190;
	Node0x138d190 -> Node0x138d270;
	Node0x138d200 -> Node0x138d270;
	Node0x138d270 -> Node0x138d350;
	Node0x138d2e0 -> Node0x138d350;
	Node0x138d3f0 -> Node0x138d460;
	Node0x138d460 -> Node0x138d540;
	Node0x138d540 -> Node0x138d5e0;
	Node0x138d3f0 -> Node0x138d650;
	Node0x138d650 -> Node0x138d6f0;
	Node0x138d7d0 -> Node0x138d840;
	Node0x138d760 -> Node0x138d8b0;
	Node0x138d8b0 -> Node0x138d920;
	Node0x138d990 -> Node0x138da70;
	Node0x138da70 -> Node0x138db10;
	Node0x138da00 -> Node0x138db80;
	Node0x138d7d0 -> Node0x138dbf0;
	Node0x138d4d0 -> Node0x138dbf0;
	Node0x138dbf0 -> Node0x138dc60;
	Node0x138dd00 -> Node0x138dd70;
	Node0x138d460 -> Node0x138dd70;
	Node0x138dd70 -> Node0x138dde0;
	Node0x138d200 -> Node0x138dde0;
	Node0x138dde0 -> Node0x138e060;
	Node0x138d990 -> Node0x138e060;
	Node0x138e060 -> Node0x138e0d0;
	Node0x138d6f0 -> Node0x138e0d0;
	Node0x138e0d0 -> Node0x138e140;
	Node0x138d840 -> Node0x138e140;
	Node0x138e140 -> Node0x138e1b0;
	Node0x138d920 -> Node0x138e1b0;
	Node0x138e1b0 -> Node0x138e220;
	Node0x138da00 -> Node0x138e220;
	Node0x138e220 -> Node0x138e290;
	Node0x138d2e0 -> Node0x138e290;
	Node0x138e290 -> Node0x138e300;
	Node0x138d8b0 -> Node0x138e300;
	Node0x138e300 -> Node0x138e370;
	Node0x138d5e0 -> Node0x138e370;
	Node0x138e370 -> Node0x138e3e0;
	Node0x138db10 -> Node0x138e3e0;
	Node0x138e3e0 -> Node0x138e450;
	Node0x138db80 -> Node0x138e450;
	Node0x138e450 -> Node0x138e4c0;
	Node0x138dc60 -> Node0x138e4c0;
	Node0x138d350 -> Node0x138e530;
	Node0x138e4c0 -> Node0x138e530;
	Node0x138e530 -> Node0x132d268;
	Node0x132d268 -> Node0x138e9d0;
}
