; ModuleID = '../.././c_source_file/0936_path_condition_crackme.c'
source_filename = "../.././c_source_file/0936_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %1
  %10 = and i32 %9, %8
  %11 = shl i32 %10, 2
  %12 = xor i32 %5, -1
  %13 = xor i32 %3, -1
  %14 = and i32 %13, %4
  %15 = xor i32 %14, -1
  %16 = and i32 %12, %15
  %17 = add i32 %16, %11
  %18 = and i32 %2, %1
  %19 = and i32 %18, %0
  %20 = xor i32 %0, -1
  %21 = and i32 %9, %20
  %22 = or i32 %19, %21
  %23 = xor i32 %1, %0
  %24 = shl i32 %23, 1
  %25 = xor i32 %18, -1
  %26 = or i32 %25, %0
  %27 = xor i32 %2, -1
  %28 = and i32 %27, %8
  %29 = xor i32 %23, -1
  %30 = xor i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %29
  %33 = or i32 %23, %2
  %34 = and i32 %18, %20
  %35 = and i32 %9, %0
  %36 = xor i32 %35, 2147483647
  %37 = xor i32 %36, %34
  %38 = or i32 %27, %1
  %39 = or i32 %27, %0
  %40 = xor i32 %39, %7
  %41 = xor i32 %1, -1
  %42 = or i32 %41, %0
  %43 = and i32 %42, %2
  %44 = xor i32 %7, %2
  %45 = or i32 %2, %0
  %46 = and i32 %45, %1
  %47 = xor i32 %39, -1
  %48 = xor i32 %47, %1
  %49 = and i32 %41, %0
  %50 = and i32 %49, %2
  %51 = or i32 %9, %0
  %52 = xor i32 %50, %51
  %53 = or i32 %47, %41
  %54 = and i32 %2, %0
  %55 = or i32 %1, %0
  %56 = xor i32 %54, %55
  %57 = xor i32 %54, -1
  %58 = and i32 %57, %41
  %59 = and i32 %39, %41
  %60 = xor i32 %57, %1
  %61 = and i32 %55, %2
  %62 = and i32 %27, %0
  %63 = xor i32 %62, %1
  %64 = and i32 %45, %23
  %65 = xor i32 %9, -1
  %66 = or i32 %7, %65
  %67 = or i32 %47, %29
  %68 = or i32 %41, %2
  %69 = and i32 %68, %20
  %70 = or i32 %50, %69
  %71 = or i32 %65, %20
  %72 = xor i32 %55, -1
  %73 = or i32 %27, %72
  %74 = xor i32 %42, -1
  %75 = or i32 %31, %74
  %76 = xor i32 %62, %25
  %77 = xor i32 %38, %0
  %78 = xor i32 %62, -1
  %79 = and i32 %23, %78
  %80 = or i32 %9, %7
  %81 = xor i32 %49, -1
  %82 = and i32 %31, %41
  %83 = and i32 %27, %1
  %84 = xor i32 %83, %0
  %85 = xor i32 %49, %2
  %86 = and i32 %23, %27
  %87 = shl i32 %86, 1
  %88 = or i32 %30, %74
  %89 = or i32 %2, %1
  %90 = xor i32 %89, -1
  %91 = or i32 %54, %90
  %92 = or i32 %54, %83
  %93 = and i32 %90, %20
  %94 = and i32 %83, %20
  %95 = and i32 %90, %0
  %96 = shl i32 %95, 2
  %97 = and i32 %83, %0
  %98 = mul i32 %97, -10
  %99 = xor i32 %38, -1
  %100 = and i32 %99, %20
  %101 = mul i32 %34, -18
  %102 = and i32 %99, %0
  %103 = shl i32 %102, 3
  %104 = or i32 %12, %4
  %105 = xor i32 %104, -1
  %106 = xor i32 %4, %3
  %107 = or i32 %106, %105
  %108 = and i32 %12, %4
  %109 = or i32 %108, %106
  %110 = xor i32 %106, -1
  %111 = xor i32 %5, %4
  %112 = or i32 %111, %110
  %113 = or i32 %5, %4
  %114 = and i32 %113, %13
  %115 = or i32 %5, %3
  %116 = and i32 %115, %4
  %117 = and i32 %4, %3
  %118 = or i32 %111, %117
  %119 = and i32 %13, %5
  %120 = and i32 %119, %4
  %121 = xor i32 %5, %3
  %122 = or i32 %121, %4
  %123 = xor i32 %120, %122
  %124 = or i32 %4, %3
  %125 = and i32 %121, %124
  %126 = and i32 %106, %5
  %127 = shl i32 %126, 1
  %128 = and i32 %5, %3
  %129 = and i32 %128, %4
  %130 = xor i32 %4, -1
  %131 = and i32 %115, %130
  %132 = or i32 %129, %131
  %133 = and i32 %12, %3
  %134 = xor i32 %133, -1
  %135 = xor i32 %14, %134
  %136 = xor i32 %115, %4
  %137 = xor i32 %136, -1
  %138 = xor i32 %129, %137
  %139 = xor i32 %128, -1
  %140 = and i32 %139, %4
  %141 = xor i32 %117, -1
  %142 = and i32 %12, %141
  %143 = or i32 %115, %4
  %144 = and i32 %104, %13
  %145 = and i32 %5, %4
  %146 = xor i32 %115, -1
  %147 = or i32 %145, %146
  %148 = or i32 %12, %3
  %149 = xor i32 %148, -1
  %150 = xor i32 %149, %4
  %151 = or i32 %106, %5
  %152 = xor i32 %124, -1
  %153 = xor i32 %111, -1
  %154 = or i32 %153, %152
  %155 = xor i32 %15, %5
  %156 = xor i32 %121, -1
  %157 = or i32 %156, %152
  %158 = xor i32 %133, %4
  %159 = xor i32 %113, %117
  %160 = xor i32 %117, %5
  %161 = xor i32 %113, -1
  %162 = or i32 %117, %161
  %163 = xor i32 %145, %134
  %164 = and i32 %121, %141
  %165 = shl i32 %164, 1
  %166 = or i32 %110, %5
  %167 = shl i32 %166, 1
  %168 = add i32 %111, 1
  %169 = xor i32 %148, %4
  %170 = or i32 %12, %152
  %171 = xor i32 %108, %3
  %172 = or i32 %139, %4
  %173 = or i32 %161, %3
  %174 = and i32 %121, %15
  %175 = shl i32 %174, 1
  %176 = and i32 %128, %130
  %177 = and i32 %121, %4
  %178 = xor i32 %177, -1
  %179 = xor i32 %176, %178
  %180 = xor i32 %145, %3
  %181 = xor i32 %141, %5
  %182 = and i32 %111, %15
  %183 = and i32 %124, %153
  %184 = shl i32 %183, 1
  %185 = or i32 %13, %5
  %186 = xor i32 %185, -1
  %187 = or i32 %186, %4
  %188 = xor i32 %120, %187
  %189 = or i32 %13, %4
  %190 = xor i32 %189, -1
  %191 = xor i32 %190, %5
  %192 = and i32 %153, %110
  %193 = or i32 %161, %110
  %194 = and i32 %153, %141
  %195 = xor i32 %104, %3
  %196 = or i32 %128, %14
  %197 = shl i32 %196, 1
  %198 = or i32 %108, %13
  %199 = shl i32 %13, 2
  %200 = and i32 %110, %5
  %201 = or i32 %12, %190
  %202 = xor i32 %113, %3
  %203 = or i32 %145, %152
  %204 = or i32 %111, %14
  %205 = and i32 %148, %4
  %206 = or i32 %152, %5
  %207 = shl i32 %206, 1
  %208 = or i32 %149, %130
  %209 = or i32 %190, %5
  %210 = xor i32 %115, %117
  %211 = xor i32 %108, %148
  %212 = xor i32 %145, -1
  %213 = and i32 %212, %13
  %214 = xor i32 %121, %4
  %215 = xor i32 %129, %214
  %216 = shl i32 %130, 1
  %217 = and i32 %189, %156
  %218 = add i32 %145, 1
  %219 = add i32 %189, 1
  %220 = xor i32 %145, %115
  %221 = and i32 %113, %110
  %222 = or i32 %117, %105
  %223 = or i32 %106, %161
  %224 = xor i32 %146, %4
  %225 = shl i32 %224, 1
  %226 = and i32 %121, %130
  %227 = or i32 %129, %226
  %228 = and i32 %113, %3
  %229 = shl i32 %134, 1
  %230 = xor i32 %134, %4
  %231 = and i32 %104, %110
  %232 = xor i32 %14, %5
  %233 = and i32 %141, %5
  %234 = and i32 %111, %189
  %235 = and i32 %189, %153
  %236 = or i32 %111, %3
  %237 = and i32 %189, %12
  %238 = and i32 %139, %130
  %239 = or i32 %145, %133
  %240 = add i32 %106, 1
  %241 = xor i32 %214, -1
  %242 = xor i32 %120, %241
  %243 = xor i32 %104, %117
  %244 = or i32 %120, %214
  %245 = or i32 %176, %177
  %246 = or i32 %153, %13
  %247 = and i32 %12, %110
  %248 = shl i32 %247, 1
  %249 = xor i32 %185, %4
  %250 = or i32 %120, %249
  %251 = or i32 %145, %106
  %252 = xor i32 %108, %139
  %253 = and i32 %153, %3
  %254 = shl i32 %253, 1
  %255 = or i32 %145, %110
  %256 = and i32 %153, %13
  %257 = shl i32 %256, 1
  %258 = or i32 %121, %117
  %259 = add i32 %117, 1
  %260 = and i32 %121, %189
  %261 = and i32 %111, %141
  %262 = xor i32 %161, %3
  %263 = and i32 %106, %12
  %264 = xor i32 %14, %139
  %265 = or i32 %176, %116
  %266 = and i32 %124, %12
  %267 = and i32 %212, %110
  %268 = add i32 %104, 1
  %269 = or i32 %121, %130
  %270 = xor i32 %139, %4
  %271 = or i32 %146, %130
  %272 = or i32 %128, %4
  %273 = and i32 %156, %141
  %274 = or i32 %14, %153
  %275 = shl i32 %274, 1
  %276 = or i32 %108, %128
  %277 = add i32 %115, 1
  %278 = or i32 %117, %5
  %279 = shl i32 %278, 1
  %280 = or i32 %117, %153
  %281 = or i32 %153, %190
  %282 = shl i32 %136, 1
  %283 = xor i32 %108, -1
  %284 = xor i32 %145, %189
  %285 = shl i32 %284, 2
  %286 = or i32 %148, %130
  %287 = or i32 %129, %241
  %288 = and i32 %283, %3
  %289 = or i32 %145, %190
  %290 = and i32 %15, %5
  %291 = and i32 %283, %13
  %292 = shl i32 %291, 1
  %293 = or i32 %115, %130
  %294 = and i32 %119, %130
  %295 = and i32 %185, %4
  %296 = xor i32 %295, -1
  %297 = xor i32 %294, %296
  %298 = or i32 %145, %13
  %299 = and i32 %106, %212
  %300 = or i32 %156, %190
  %301 = xor i32 %189, %5
  %302 = and i32 %104, %106
  %303 = shl i32 %302, 2
  %304 = or i32 %145, %3
  %305 = or i32 %111, %152
  %306 = and i32 %106, %153
  %307 = and i32 %156, %130
  %308 = shl i32 %307, 1
  %309 = or i32 %129, %136
  %310 = or i32 %111, %190
  %311 = and i32 %283, %110
  %312 = or i32 %161, %13
  %313 = or i32 %117, %156
  %314 = and i32 %156, %15
  %315 = shl i32 %314, 1
  %316 = or i32 %117, %12
  %317 = shl i32 %316, 1
  %318 = xor i32 %122, -1
  %319 = or i32 %120, %318
  %320 = add i32 %148, 1
  %321 = and i32 %111, %110
  %322 = xor i32 %212, %3
  %323 = and i32 %111, %106
  %324 = shl i32 %323, 1
  %325 = or i32 %111, %106
  %326 = or i32 %108, %149
  %327 = and i32 %134, %4
  %328 = or i32 %117, %146
  %329 = or i32 %134, %4
  %330 = and i32 %146, %130
  %331 = mul i32 %330, 17
  %332 = and i32 %133, %130
  %333 = shl i32 %332, 1
  %334 = and i32 %146, %4
  %335 = shl i32 %334, 1
  %336 = and i32 %133, %4
  %337 = mul i32 %336, -19
  %338 = and i32 %149, %130
  %339 = and i32 %149, %4
  %340 = mul i32 %129, 9
  %341 = add i32 %88, %44
  %342 = add i32 %341, %63
  %343 = add i32 %342, %48
  %344 = add i32 %343, %32
  %345 = add i32 %344, %263
  %346 = add i32 %345, %161
  %347 = add i32 %346, %200
  %348 = add i32 %347, %142
  %349 = add i32 %348, %37
  %350 = add i32 %349, %310
  %351 = add i32 %350, %262
  %352 = add i32 %351, %261
  %353 = add i32 %352, %234
  %354 = add i32 %353, %202
  %355 = add i32 %354, %163
  %356 = add i32 %355, %157
  %357 = add i32 %356, %114
  %358 = add i32 %357, %245
  %359 = shl i32 %358, 1
  %360 = add i32 %84, %43
  %361 = sub i32 %66, %360
  %362 = add i32 %361, %268
  %363 = add i32 %362, %306
  %364 = sub i32 %363, %328
  %365 = mul i32 %364, 5
  %366 = sub i32 %100, %93
  %367 = add i32 %366, %277
  %368 = add i32 %367, %138
  %369 = mul i32 %368, 3
  %370 = add i32 %118, %339
  %371 = add i32 %370, %287
  %372 = shl i32 %371, 2
  %373 = sub i32 %338, %19
  %374 = mul i32 %373, 6
  %375 = sub i32 %23, %42
  %376 = add i32 %375, %81
  %377 = add i32 %376, %24
  %378 = sub i32 %377, %28
  %379 = add i32 %378, %33
  %380 = add i32 %379, %38
  %381 = add i32 %380, %61
  %382 = sub i32 %381, %73
  %383 = add i32 %382, %85
  %384 = sub i32 %383, %3
  %385 = sub i32 %384, %26
  %386 = sub i32 %385, %40
  %387 = sub i32 %386, %46
  %388 = sub i32 %387, %53
  %389 = add i32 %388, %56
  %390 = sub i32 %389, %58
  %391 = sub i32 %390, %59
  %392 = sub i32 %391, %60
  %393 = add i32 %392, %64
  %394 = sub i32 %393, %67
  %395 = add i32 %394, %71
  %396 = add i32 %395, %75
  %397 = add i32 %396, %76
  %398 = sub i32 %397, %77
  %399 = sub i32 %398, %79
  %400 = add i32 %399, %80
  %401 = add i32 %400, %51
  %402 = sub i32 %401, %82
  %403 = sub i32 %402, %87
  %404 = add i32 %403, %91
  %405 = add i32 %404, %92
  %406 = sub i32 %405, %94
  %407 = sub i32 %406, %199
  %408 = add i32 %407, %4
  %409 = sub i32 %408, %22
  %410 = sub i32 %409, %52
  %411 = add i32 %410, %70
  %412 = sub i32 %411, %96
  %413 = add i32 %412, %98
  %414 = add i32 %413, %101
  %415 = add i32 %414, %103
  %416 = add i32 %415, %15
  %417 = sub i32 %416, %106
  %418 = sub i32 %417, %5
  %419 = sub i32 %418, %216
  %420 = add i32 %419, %219
  %421 = sub i32 %420, %124
  %422 = add i32 %421, %240
  %423 = add i32 %422, %259
  %424 = add i32 %423, %189
  %425 = add i32 %424, %117
  %426 = add i32 %425, %151
  %427 = add i32 %426, %155
  %428 = sub i32 %427, %160
  %429 = add i32 %428, %139
  %430 = add i32 %429, %111
  %431 = add i32 %430, %168
  %432 = sub i32 %431, %170
  %433 = add i32 %432, %181
  %434 = add i32 %433, %191
  %435 = add i32 %434, %104
  %436 = add i32 %435, %113
  %437 = sub i32 %436, %201
  %438 = sub i32 %437, %209
  %439 = add i32 %438, %148
  %440 = add i32 %439, %218
  %441 = sub i32 %440, %232
  %442 = add i32 %441, %233
  %443 = sub i32 %442, %237
  %444 = sub i32 %443, %266
  %445 = sub i32 %444, %145
  %446 = sub i32 %445, %290
  %447 = add i32 %446, %301
  %448 = add i32 %447, %115
  %449 = add i32 %448, %320
  %450 = sub i32 %449, %107
  %451 = add i32 %450, %109
  %452 = add i32 %451, %112
  %453 = add i32 %452, %116
  %454 = add i32 %453, %125
  %455 = sub i32 %454, %127
  %456 = sub i32 %455, %135
  %457 = add i32 %456, %140
  %458 = add i32 %457, %143
  %459 = add i32 %458, %144
  %460 = sub i32 %459, %147
  %461 = sub i32 %460, %150
  %462 = add i32 %461, %154
  %463 = sub i32 %462, %158
  %464 = add i32 %463, %159
  %465 = add i32 %464, %162
  %466 = sub i32 %465, %167
  %467 = sub i32 %466, %169
  %468 = add i32 %467, %171
  %469 = sub i32 %468, %172
  %470 = add i32 %469, %173
  %471 = add i32 %470, %180
  %472 = add i32 %471, %182
  %473 = sub i32 %472, %192
  %474 = sub i32 %473, %177
  %475 = add i32 %474, %193
  %476 = sub i32 %475, %194
  %477 = add i32 %476, %195
  %478 = sub i32 %477, %198
  %479 = sub i32 %478, %203
  %480 = add i32 %479, %204
  %481 = sub i32 %480, %205
  %482 = sub i32 %481, %207
  %483 = add i32 %482, %208
  %484 = sub i32 %483, %210
  %485 = sub i32 %484, %211
  %486 = sub i32 %485, %213
  %487 = sub i32 %486, %131
  %488 = add i32 %487, %217
  %489 = add i32 %488, %122
  %490 = add i32 %489, %220
  %491 = add i32 %490, %221
  %492 = sub i32 %491, %222
  %493 = add i32 %492, %223
  %494 = add i32 %493, %228
  %495 = sub i32 %494, %229
  %496 = sub i32 %495, %230
  %497 = add i32 %496, %231
  %498 = add i32 %497, %235
  %499 = add i32 %498, %236
  %500 = add i32 %499, %238
  %501 = add i32 %500, %239
  %502 = sub i32 %501, %243
  %503 = add i32 %502, %246
  %504 = sub i32 %503, %248
  %505 = sub i32 %504, %251
  %506 = sub i32 %505, %252
  %507 = add i32 %506, %255
  %508 = sub i32 %507, %258
  %509 = sub i32 %508, %260
  %510 = add i32 %509, %264
  %511 = add i32 %510, %267
  %512 = add i32 %511, %269
  %513 = sub i32 %512, %270
  %514 = add i32 %513, %271
  %515 = add i32 %514, %272
  %516 = add i32 %515, %273
  %517 = sub i32 %516, %276
  %518 = sub i32 %517, %279
  %519 = add i32 %518, %280
  %520 = sub i32 %519, %281
  %521 = sub i32 %520, %286
  %522 = add i32 %521, %288
  %523 = sub i32 %522, %289
  %524 = sub i32 %523, %293
  %525 = sub i32 %524, %298
  %526 = add i32 %525, %299
  %527 = sub i32 %526, %300
  %528 = sub i32 %527, %304
  %529 = add i32 %528, %305
  %530 = sub i32 %529, %311
  %531 = add i32 %530, %312
  %532 = sub i32 %531, %313
  %533 = sub i32 %532, %317
  %534 = add i32 %533, %321
  %535 = sub i32 %534, %322
  %536 = add i32 %535, %325
  %537 = add i32 %536, %326
  %538 = add i32 %537, %327
  %539 = add i32 %538, %329
  %540 = sub i32 %539, %123
  %541 = add i32 %540, %132
  %542 = sub i32 %541, %165
  %543 = sub i32 %542, %175
  %544 = add i32 %543, %179
  %545 = sub i32 %544, %184
  %546 = add i32 %545, %188
  %547 = sub i32 %546, %197
  %548 = add i32 %547, %215
  %549 = sub i32 %548, %225
  %550 = sub i32 %549, %227
  %551 = add i32 %550, %242
  %552 = add i32 %551, %244
  %553 = sub i32 %552, %250
  %554 = sub i32 %553, %254
  %555 = sub i32 %554, %257
  %556 = add i32 %555, %265
  %557 = sub i32 %556, %275
  %558 = sub i32 %557, %282
  %559 = sub i32 %558, %285
  %560 = sub i32 %559, %292
  %561 = add i32 %560, %297
  %562 = sub i32 %561, %303
  %563 = sub i32 %562, %308
  %564 = sub i32 %563, %309
  %565 = sub i32 %564, %315
  %566 = add i32 %565, %319
  %567 = sub i32 %566, %324
  %568 = add i32 %567, %331
  %569 = sub i32 %568, %333
  %570 = sub i32 %569, %335
  %571 = add i32 %570, %337
  %572 = add i32 %571, %340
  %573 = add i32 %572, %374
  %574 = add i32 %573, %372
  %575 = add i32 %574, %369
  %576 = add i32 %575, %365
  %577 = add i32 %576, %359
  %578 = icmp eq i32 %17, %577
  %579 = select i1 %578, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %580 = tail call i32 @puts(i8* nonnull dereferenceable(1) %579)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
