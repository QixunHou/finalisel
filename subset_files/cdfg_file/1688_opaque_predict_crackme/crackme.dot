digraph "DFG for'crackme' function" {
	Node0xaf4b80[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xaf4bf0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xaf4cb0[shape=record, label="  %5 = sub i32 %3, %4"];
	Node0xaf4d20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0xaf4d90[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0xaf4e00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xaf4e70[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0xaf4ee0[shape=record, label="  %10 = shl i32 %0, 1"];
	Node0xaf4f50[shape=record, label="  %11 = and i32 %3, %0"];
	Node0xaf4fc0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0xaf5030[shape=record, label="  %13 = or i32 %1, %0"];
	Node0xaf50a0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0xaf5110[shape=record, label="  %15 = shl i32 %4, 1"];
	Node0xaf51b0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0xaf5250[shape=record, label="  %17 = mul i32 %8, -6"];
	Node0xaf52c0[shape=record, label="  %18 = add i32 %11, %14"];
	Node0xaf5360[shape=record, label="  %19 = mul i32 %18, -3"];
	Node0xaf53d0[shape=record, label="  %20 = add i32 %10, %9"];
	Node0xaf5440[shape=record, label="  %21 = add i32 %20, %7"];
	Node0xaf54b0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xaf5520[shape=record, label="  %23 = add i32 %22, %17"];
	Node0xaf5590[shape=record, label="  %24 = sub i32 %23, %16"];
	Node0xaf5600[shape=record, label="  %25 = add i32 %24, %19"];
	Node0xaf5670[shape=record, label="  %26 = icmp eq i32 %6, %25"];
	Node0xa95268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xaf5b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xaf5b60[shape=record, label="  ret void"];
	Node0xaf4b80 -> Node0xaf4bf0;
	Node0xaf4bf0 -> Node0xaf4cb0;
	Node0xaf4cb0 -> Node0xaf4d20;
	Node0xaf4d20 -> Node0xaf4d90;
	Node0xaf4d90 -> Node0xaf4e00;
	Node0xaf4e00 -> Node0xaf4e70;
	Node0xaf4e70 -> Node0xaf4ee0;
	Node0xaf4ee0 -> Node0xaf4f50;
	Node0xaf4f50 -> Node0xaf4fc0;
	Node0xaf4fc0 -> Node0xaf5030;
	Node0xaf5030 -> Node0xaf50a0;
	Node0xaf50a0 -> Node0xaf5110;
	Node0xaf5110 -> Node0xaf51b0;
	Node0xaf51b0 -> Node0xaf5250;
	Node0xaf5250 -> Node0xaf52c0;
	Node0xaf52c0 -> Node0xaf5360;
	Node0xaf5360 -> Node0xaf53d0;
	Node0xaf53d0 -> Node0xaf5440;
	Node0xaf5440 -> Node0xaf54b0;
	Node0xaf54b0 -> Node0xaf5520;
	Node0xaf5520 -> Node0xaf5590;
	Node0xaf5590 -> Node0xaf5600;
	Node0xaf5600 -> Node0xaf5670;
	Node0xaf5670 -> Node0xa95268;
	Node0xa95268 -> Node0xaf5b10;
	Node0xaf5b10 -> Node0xaf5b60;
edge [color=red]
	Node0xaf4b80 -> Node0xaf4bf0;
	Node0xaf4b80 -> Node0xaf4cb0;
	Node0xaf4bf0 -> Node0xaf4cb0;
	Node0xaf4cb0 -> Node0xaf4d20;
	Node0xaf4b80 -> Node0xaf4d90;
	Node0xaf4e00 -> Node0xaf4e70;
	Node0xaf4b80 -> Node0xaf4f50;
	Node0xaf4f50 -> Node0xaf4fc0;
	Node0xaf5030 -> Node0xaf50a0;
	Node0xaf4bf0 -> Node0xaf5110;
	Node0xaf5110 -> Node0xaf51b0;
	Node0xaf4e00 -> Node0xaf5250;
	Node0xaf4f50 -> Node0xaf52c0;
	Node0xaf50a0 -> Node0xaf52c0;
	Node0xaf52c0 -> Node0xaf5360;
	Node0xaf4ee0 -> Node0xaf53d0;
	Node0xaf4e70 -> Node0xaf53d0;
	Node0xaf53d0 -> Node0xaf5440;
	Node0xaf4d90 -> Node0xaf5440;
	Node0xaf5440 -> Node0xaf54b0;
	Node0xaf4fc0 -> Node0xaf54b0;
	Node0xaf54b0 -> Node0xaf5520;
	Node0xaf5250 -> Node0xaf5520;
	Node0xaf5520 -> Node0xaf5590;
	Node0xaf51b0 -> Node0xaf5590;
	Node0xaf5590 -> Node0xaf5600;
	Node0xaf5360 -> Node0xaf5600;
	Node0xaf4d20 -> Node0xaf5670;
	Node0xaf5600 -> Node0xaf5670;
	Node0xaf5670 -> Node0xa95268;
	Node0xa95268 -> Node0xaf5b10;
}
