digraph "DFG for'main' function" {
	Node0xb3c448[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xb3c4c8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xb3c558[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xb3c5b8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xb3ca38[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xb3d3c8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xb3d4a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xb3d568[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xb3d618[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xb3d878[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xb3d938[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xb3e8a8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xb3ef18[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xb3f010[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xb3f218[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xb3f378[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xb3f488[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xb3f548[shape=record, label="  ret i32 0"];
	Node0xb3c448 -> Node0xb3c4c8;
	Node0xb3c4c8 -> Node0xb3c558;
	Node0xb3c558 -> Node0xb3c5b8;
	Node0xb3c5b8 -> Node0xb3ca38;
	Node0xb3ca38 -> Node0xb3d3c8;
	Node0xb3d3c8 -> Node0xb3d4a8;
	Node0xb3d4a8 -> Node0xb3d568;
	Node0xb3d568 -> Node0xb3d618;
	Node0xb3d618 -> Node0xb3d878;
	Node0xb3d878 -> Node0xb3d938;
	Node0xb3d938 -> Node0xb3e8a8;
	Node0xb3e8a8 -> Node0xb3ef18;
	Node0xb3ef18 -> Node0xb3f010;
	Node0xb3f010 -> Node0xb3f218;
	Node0xb3f218 -> Node0xb3f378;
	Node0xb3f378 -> Node0xb3f488;
	Node0xb3f488 -> Node0xb3f548;
edge [color=red]
	Node0xb3c448 -> Node0xb3c5b8;
	Node0xb3c5b8 -> Node0xb3ca38;
	Node0xb3c4c8 -> Node0xb3d3c8;
	Node0xb3d3c8 -> Node0xb3d4a8;
	Node0xb3c558 -> Node0xb3d568;
	Node0xb3d568 -> Node0xb3d618;
	Node0xb3c448 -> Node0xb3d878;
	Node0xb3c4c8 -> Node0xb3d878;
	Node0xb3c558 -> Node0xb3d878;
	Node0xb3c448 -> Node0xb3d938;
	Node0xb3c4c8 -> Node0xb3e8a8;
	Node0xb3c558 -> Node0xb3ef18;
	Node0xb3d938 -> Node0xb3f010;
	Node0xb3e8a8 -> Node0xb3f010;
	Node0xb3ef18 -> Node0xb3f010;
	Node0xb3d568 -> Node0xb3f218;
	Node0xb3d3c8 -> Node0xb3f378;
	Node0xb3c5b8 -> Node0xb3f488;
}
