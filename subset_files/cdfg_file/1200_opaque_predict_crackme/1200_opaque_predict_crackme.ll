; ModuleID = '../.././c_source_file/1200_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1200_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = xor i32 %6, -2
  %8 = or i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %1
  %11 = shl i32 %10, 1
  %12 = sub i32 %7, %11
  %13 = xor i32 %4, -1
  %14 = or i32 %13, %3
  %15 = and i32 %4, %3
  %16 = xor i32 %15, -1
  %17 = or i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %14, -1
  %20 = or i32 %1, %0
  %21 = xor i32 %2, %1
  %22 = and i32 %21, %20
  %23 = xor i32 %1, -1
  %24 = and i32 %8, %23
  %25 = and i32 %23, %0
  %26 = xor i32 %21, -1
  %27 = or i32 %25, %26
  %28 = xor i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %23
  %31 = or i32 %23, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %29, %32
  %34 = xor i32 %0, -1
  %35 = and i32 %23, %2
  %36 = and i32 %35, %34
  %37 = or i32 %21, %34
  %38 = xor i32 %36, %37
  %39 = xor i32 %2, -1
  %40 = and i32 %39, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = and i32 %41, %43
  %45 = or i32 %2, %1
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %0
  %48 = or i32 %39, %1
  %49 = or i32 %48, %0
  %50 = shl i32 %49, 1
  %51 = and i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = xor i32 %52, %0
  %54 = and i32 %42, %41
  %55 = xor i32 %20, -1
  %56 = add i32 %20, 1
  %57 = or i32 %52, %0
  %58 = or i32 %39, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %20, %2
  %61 = shl i32 %26, 1
  %62 = or i32 %42, %2
  %63 = or i32 %40, %1
  %64 = shl i32 %63, 1
  %65 = and i32 %52, %34
  %66 = xor i32 %40, %48
  %67 = or i32 %51, %34
  %68 = or i32 %39, %55
  %69 = or i32 %9, %43
  %70 = and i32 %2, %0
  %71 = or i32 %70, %55
  %72 = or i32 %26, %0
  %73 = or i32 %21, %32
  %74 = or i32 %26, %32
  %75 = and i32 %20, %26
  %76 = and i32 %1, %0
  %77 = xor i32 %8, %76
  %78 = and i32 %31, %2
  %79 = and i32 %39, %1
  %80 = xor i32 %79, -1
  %81 = xor i32 %70, %80
  %82 = shl i32 %81, 1
  %83 = xor i32 %32, %2
  %84 = or i32 %26, %34
  %85 = or i32 %26, %55
  %86 = or i32 %51, %0
  %87 = and i32 %41, %23
  %88 = shl i32 %87, 1
  %89 = or i32 %23, %2
  %90 = and i32 %89, %0
  %91 = or i32 %36, %90
  %92 = and i32 %21, %34
  %93 = xor i32 %45, %76
  %94 = shl i32 %93, 1
  %95 = and i32 %35, %0
  %96 = or i32 %21, %0
  %97 = xor i32 %96, -1
  %98 = or i32 %95, %97
  %99 = or i32 %32, %2
  %100 = xor i32 %48, -1
  %101 = and i32 %21, %31
  %102 = xor i32 %70, -1
  %103 = and i32 %102, %1
  %104 = xor i32 %55, %2
  %105 = xor i32 %25, -1
  %106 = xor i32 %40, %52
  %107 = xor i32 %31, %2
  %108 = or i32 %29, %55
  %109 = and i32 %51, %34
  %110 = and i32 %21, %0
  %111 = or i32 %109, %110
  %112 = add i32 %25, 1
  %113 = and i32 %41, %1
  %114 = and i32 %20, %29
  %115 = or i32 %70, %32
  %116 = and i32 %26, %34
  %117 = or i32 %29, %1
  %118 = add i32 %45, 1
  %119 = xor i32 %76, -1
  %120 = and i32 %21, %119
  %121 = or i32 %42, %29
  %122 = xor i32 %37, -1
  %123 = or i32 %36, %122
  %124 = or i32 %59, %43
  %125 = xor i32 %70, %1
  %126 = or i32 %29, %43
  %127 = and i32 %29, %119
  %128 = xor i32 %41, %1
  %129 = or i32 %79, %34
  %130 = and i32 %39, %119
  %131 = and i32 %29, %1
  %132 = shl i32 %131, 1
  %133 = or i32 %80, %34
  %134 = and i32 %80, %34
  %135 = shl i32 %134, 1
  %136 = xor i32 %58, %76
  %137 = or i32 %39, %43
  %138 = and i32 %31, %39
  %139 = xor i32 %95, %96
  %140 = xor i32 %40, %1
  %141 = shl i32 %140, 1
  %142 = or i32 %59, %1
  %143 = xor i32 %21, %0
  %144 = xor i32 %143, -1
  %145 = xor i32 %95, %144
  %146 = shl i32 %145, 1
  %147 = or i32 %28, %42
  %148 = and i32 %8, %43
  %149 = or i32 %45, %0
  %150 = and i32 %51, %0
  %151 = or i32 %150, %144
  %152 = or i32 %70, %79
  %153 = and i32 %28, %23
  %154 = shl i32 %153, 1
  %155 = and i32 %29, %105
  %156 = or i32 %70, %23
  %157 = or i32 %79, %0
  %158 = and i32 %45, %34
  %159 = or i32 %76, %29
  %160 = and i32 %31, %26
  %161 = or i32 %70, %43
  %162 = or i32 %21, %25
  %163 = and i32 %119, %2
  %164 = or i32 %52, %34
  %165 = xor i32 %45, %0
  %166 = or i32 %76, %9
  %167 = or i32 %150, %158
  %168 = or i32 %28, %55
  %169 = shl i32 %168, 1
  %170 = and i32 %28, %43
  %171 = shl i32 %170, 1
  %172 = and i32 %21, %105
  %173 = or i32 %28, %23
  %174 = or i32 %76, %100
  %175 = and i32 %58, %1
  %176 = shl i32 %34, 2
  %177 = or i32 %21, %76
  %178 = or i32 %40, %42
  %179 = and i32 %28, %20
  %180 = or i32 %100, %34
  %181 = xor i32 %105, %2
  %182 = shl i32 %181, 1
  %183 = xor i32 %90, -1
  %184 = xor i32 %36, %183
  %185 = or i32 %42, %59
  %186 = xor i32 %100, %0
  %187 = xor i32 %48, %76
  %188 = xor i32 %25, %52
  %189 = or i32 %70, %46
  %190 = xor i32 %102, %1
  %191 = or i32 %40, %51
  %192 = xor i32 %25, %80
  %193 = or i32 %25, %2
  %194 = xor i32 %20, %2
  %195 = xor i32 %59, %1
  %196 = shl i32 %2, 1
  %197 = or i32 %150, %92
  %198 = or i32 %79, %25
  %199 = or i32 %42, %9
  %200 = and i32 %39, %105
  %201 = or i32 %25, %39
  %202 = shl i32 %201, 1
  %203 = xor i32 %8, %1
  %204 = and i32 %29, %23
  %205 = add i32 %76, 1
  %206 = xor i32 %79, %0
  %207 = shl i32 %206, 1
  %208 = or i32 %39, %32
  %209 = xor i32 %9, %1
  %210 = or i32 %150, %165
  %211 = or i32 %28, %25
  %212 = or i32 %43, %2
  %213 = and i32 %80, %0
  %214 = or i32 %100, %0
  %215 = and i32 %42, %29
  %216 = or i32 %55, %2
  %217 = xor i32 %89, %0
  %218 = or i32 %95, %217
  %219 = or i32 %76, %46
  %220 = shl i32 %1, 1
  %221 = xor i32 %51, %0
  %222 = or i32 %95, %143
  %223 = shl i32 %222, 1
  %224 = or i32 %28, %32
  %225 = or i32 %9, %23
  %226 = and i32 %42, %102
  %227 = shl i32 %226, 1
  %228 = and i32 %28, %1
  %229 = shl i32 %228, 1
  %230 = xor i32 %70, %20
  %231 = or i32 %76, %39
  %232 = xor i32 %70, %45
  %233 = and i32 %20, %39
  %234 = and i32 %28, %119
  %235 = and i32 %42, %2
  %236 = shl i32 %235, 1
  %237 = or i32 %59, %23
  %238 = and i32 %58, %43
  %239 = xor i32 %48, %0
  %240 = xor i32 %46, %0
  %241 = and i32 %58, %23
  %242 = xor i32 %25, %2
  %243 = and i32 %89, %34
  %244 = xor i32 %243, -1
  %245 = xor i32 %95, %244
  %246 = or i32 %28, %43
  %247 = or i32 %76, %59
  %248 = and i32 %29, %43
  %249 = and i32 %31, %29
  %250 = shl i32 %249, 1
  %251 = and i32 %8, %1
  %252 = shl i32 %251, 1
  %253 = xor i32 %119, %2
  %254 = xor i32 %150, %143
  %255 = and i32 %28, %42
  %256 = or i32 %48, %34
  %257 = and i32 %45, %0
  %258 = and i32 %48, %0
  %259 = or i32 %51, %25
  %260 = or i32 %40, %100
  %261 = or i32 %42, %39
  %262 = xor i32 %70, %31
  %263 = and i32 %102, %43
  %264 = or i32 %28, %1
  %265 = or i32 %80, %0
  %266 = shl i32 %265, 1
  %267 = xor i32 %150, -1
  %268 = xor i32 %165, %267
  %269 = and i32 %26, %0
  %270 = shl i32 %269, 1
  %271 = and i32 %102, %23
  %272 = and i32 %26, %119
  %273 = and i32 %42, %39
  %274 = shl i32 %273, 1
  %275 = or i32 %45, %34
  %276 = or i32 %21, %55
  %277 = xor i32 %158, %267
  %278 = or i32 %95, %243
  %279 = xor i32 %26, %0
  %280 = and i32 %43, %2
  %281 = and i32 %46, %34
  %282 = mul i32 %281, -14
  %283 = and i32 %46, %0
  %284 = and i32 %100, %34
  %285 = mul i32 %284, -21
  %286 = mul i32 %109, -13
  %287 = and i32 %100, %0
  %288 = mul i32 %287, -6
  %289 = mul i32 %150, -19
  %290 = add i32 %76, %32
  %291 = add i32 %290, %21
  %292 = add i32 %291, %80
  %293 = add i32 %292, %138
  %294 = add i32 %293, %99
  %295 = add i32 %294, %78
  %296 = add i32 %295, %283
  %297 = add i32 %296, %276
  %298 = add i32 %297, %272
  %299 = add i32 %298, %185
  %300 = add i32 %299, %179
  %301 = add i32 %300, %172
  %302 = add i32 %301, %165
  %303 = add i32 %302, %128
  %304 = add i32 %303, %115
  %305 = add i32 %304, %74
  %306 = add i32 %305, %71
  %307 = add i32 %306, %53
  %308 = add i32 %307, %30
  %309 = add i32 %308, %15
  %310 = add i32 %309, %111
  %311 = shl i32 %310, 1
  %312 = add i32 %104, %242
  %313 = sub i32 %214, %312
  %314 = add i32 %313, %126
  %315 = add i32 %314, %85
  %316 = sub i32 %315, %72
  %317 = add i32 %316, %18
  %318 = add i32 %317, %19
  %319 = mul i32 %318, 3
  %320 = sub i32 %42, %58
  %321 = add i32 %320, %209
  %322 = add i32 %321, %246
  %323 = sub i32 %322, %155
  %324 = mul i32 %323, 5
  %325 = mul i32 %79, -9
  %326 = add i32 %212, 1073741823
  %327 = add i32 %326, %67
  %328 = add i32 %327, %149
  %329 = add i32 %328, %66
  %330 = shl i32 %329, 2
  %331 = add i32 %0, 1
  %332 = sub i32 %331, %176
  %333 = add i32 %332, %23
  %334 = add i32 %333, %56
  %335 = sub i32 %334, %42
  %336 = add i32 %335, %112
  %337 = sub i32 %336, %31
  %338 = add i32 %337, %20
  %339 = add i32 %338, %205
  %340 = sub i32 %339, %220
  %341 = add i32 %340, %3
  %342 = add i32 %341, %60
  %343 = add i32 %342, %62
  %344 = sub i32 %343, %28
  %345 = add i32 %344, %68
  %346 = add i32 %345, %83
  %347 = sub i32 %346, %45
  %348 = add i32 %347, %107
  %349 = add i32 %348, %118
  %350 = add i32 %349, %130
  %351 = add i32 %350, %137
  %352 = sub i32 %351, %163
  %353 = sub i32 %352, %193
  %354 = sub i32 %353, %194
  %355 = sub i32 %354, %196
  %356 = sub i32 %355, %200
  %357 = add i32 %356, %79
  %358 = sub i32 %357, %208
  %359 = add i32 %358, %216
  %360 = add i32 %359, %231
  %361 = sub i32 %360, %233
  %362 = sub i32 %361, %58
  %363 = add i32 %362, %253
  %364 = add i32 %363, %261
  %365 = add i32 %364, %9
  %366 = add i32 %365, %280
  %367 = sub i32 %366, %4
  %368 = sub i32 %367, %22
  %369 = sub i32 %368, %24
  %370 = add i32 %369, %27
  %371 = sub i32 %370, %33
  %372 = sub i32 %371, %44
  %373 = sub i32 %372, %47
  %374 = sub i32 %373, %54
  %375 = add i32 %374, %57
  %376 = sub i32 %375, %61
  %377 = add i32 %376, %65
  %378 = add i32 %377, %69
  %379 = sub i32 %378, %73
  %380 = sub i32 %379, %75
  %381 = add i32 %380, %77
  %382 = add i32 %381, %84
  %383 = sub i32 %382, %86
  %384 = add i32 %383, %92
  %385 = sub i32 %384, %101
  %386 = sub i32 %385, %103
  %387 = add i32 %386, %37
  %388 = sub i32 %387, %96
  %389 = sub i32 %388, %106
  %390 = add i32 %389, %108
  %391 = sub i32 %390, %113
  %392 = add i32 %391, %114
  %393 = add i32 %392, %116
  %394 = sub i32 %393, %117
  %395 = sub i32 %394, %120
  %396 = sub i32 %395, %121
  %397 = add i32 %396, %124
  %398 = add i32 %397, %125
  %399 = sub i32 %398, %127
  %400 = sub i32 %399, %129
  %401 = sub i32 %400, %133
  %402 = sub i32 %401, %136
  %403 = add i32 %402, %142
  %404 = sub i32 %403, %147
  %405 = sub i32 %404, %148
  %406 = sub i32 %405, %152
  %407 = add i32 %406, %156
  %408 = sub i32 %407, %157
  %409 = add i32 %408, %158
  %410 = add i32 %409, %159
  %411 = add i32 %410, %160
  %412 = add i32 %411, %161
  %413 = sub i32 %412, %162
  %414 = sub i32 %413, %164
  %415 = sub i32 %414, %166
  %416 = add i32 %415, %173
  %417 = add i32 %416, %143
  %418 = sub i32 %417, %174
  %419 = sub i32 %418, %175
  %420 = add i32 %419, %177
  %421 = add i32 %420, %178
  %422 = add i32 %421, %180
  %423 = sub i32 %422, %182
  %424 = add i32 %423, %186
  %425 = add i32 %424, %187
  %426 = sub i32 %425, %188
  %427 = add i32 %426, %189
  %428 = sub i32 %427, %190
  %429 = add i32 %428, %191
  %430 = sub i32 %429, %192
  %431 = add i32 %430, %195
  %432 = add i32 %431, %198
  %433 = add i32 %432, %199
  %434 = sub i32 %433, %202
  %435 = sub i32 %434, %203
  %436 = add i32 %435, %204
  %437 = sub i32 %436, %211
  %438 = sub i32 %437, %213
  %439 = add i32 %438, %215
  %440 = sub i32 %439, %219
  %441 = add i32 %440, %221
  %442 = sub i32 %441, %224
  %443 = sub i32 %442, %225
  %444 = add i32 %443, %230
  %445 = sub i32 %444, %232
  %446 = sub i32 %445, %234
  %447 = sub i32 %446, %236
  %448 = add i32 %447, %237
  %449 = add i32 %448, %238
  %450 = add i32 %449, %239
  %451 = sub i32 %450, %240
  %452 = sub i32 %451, %241
  %453 = add i32 %452, %247
  %454 = sub i32 %453, %248
  %455 = sub i32 %454, %255
  %456 = add i32 %455, %256
  %457 = sub i32 %456, %257
  %458 = add i32 %457, %258
  %459 = add i32 %458, %259
  %460 = sub i32 %459, %260
  %461 = sub i32 %460, %262
  %462 = add i32 %461, %263
  %463 = sub i32 %462, %264
  %464 = sub i32 %463, %271
  %465 = sub i32 %464, %274
  %466 = sub i32 %465, %275
  %467 = sub i32 %466, %279
  %468 = sub i32 %467, %14
  %469 = add i32 %468, %16
  %470 = sub i32 %469, %38
  %471 = sub i32 %470, %50
  %472 = sub i32 %471, %64
  %473 = sub i32 %472, %82
  %474 = sub i32 %473, %88
  %475 = add i32 %474, %91
  %476 = sub i32 %475, %94
  %477 = add i32 %476, %98
  %478 = sub i32 %477, %123
  %479 = sub i32 %478, %132
  %480 = sub i32 %479, %135
  %481 = add i32 %480, %139
  %482 = sub i32 %481, %141
  %483 = sub i32 %482, %151
  %484 = sub i32 %483, %154
  %485 = add i32 %484, %167
  %486 = sub i32 %485, %169
  %487 = sub i32 %486, %171
  %488 = add i32 %487, %184
  %489 = add i32 %488, %197
  %490 = sub i32 %489, %207
  %491 = sub i32 %490, %210
  %492 = sub i32 %491, %218
  %493 = sub i32 %492, %227
  %494 = sub i32 %493, %229
  %495 = add i32 %494, %245
  %496 = sub i32 %495, %250
  %497 = sub i32 %496, %252
  %498 = sub i32 %497, %254
  %499 = sub i32 %498, %266
  %500 = add i32 %499, %268
  %501 = sub i32 %500, %270
  %502 = add i32 %501, %277
  %503 = add i32 %502, %278
  %504 = add i32 %503, %282
  %505 = add i32 %504, %285
  %506 = add i32 %505, %286
  %507 = add i32 %506, %288
  %508 = add i32 %507, %289
  %509 = sub i32 %508, %146
  %510 = sub i32 %509, %223
  %511 = add i32 %510, %325
  %512 = add i32 %511, %324
  %513 = add i32 %512, %330
  %514 = add i32 %513, %319
  %515 = add i32 %514, %311
  %516 = icmp eq i32 %12, %515
  %517 = select i1 %516, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %518 = tail call i32 @puts(i8* nonnull dereferenceable(1) %517)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
