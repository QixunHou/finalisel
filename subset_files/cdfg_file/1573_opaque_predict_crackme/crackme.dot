digraph "DFG for'crackme' function" {
	Node0xabf1f0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0xabf260[shape=record, label="  %6 = xor i32 %5, %1"];
	Node0xabf2d0[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0xabf340[shape=record, label="  %8 = or i32 %7, %3"];
	Node0xabf3e0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xabf450[shape=record, label="  %10 = sub i32 %6, %9"];
	Node0xabf4c0[shape=record, label="  %11 = shl i32 %1, 1"];
	Node0xabf560[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xabf5d0[shape=record, label="  %13 = shl i32 %2, 1"];
	Node0xabf640[shape=record, label="  %14 = or i32 %2, %1"];
	Node0xabf6b0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0xabf720[shape=record, label="  %16 = and i32 %2, %1"];
	Node0xabf790[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0xabf830[shape=record, label="  %18 = xor i32 %1, 1073741823"];
	Node0xabf8a0[shape=record, label="  %19 = and i32 %18, %2"];
	Node0xabf940[shape=record, label="  %20 = shl i32 %19, 2"];
	Node0xabf9b0[shape=record, label="  %21 = xor i32 %3, -1"];
	Node0xabfa20[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0xabfa90[shape=record, label="  %23 = shl i32 %7, 1"];
	Node0xabfb00[shape=record, label="  %24 = and i32 %7, %3"];
	Node0xabfb70[shape=record, label="  %25 = shl i32 %24, 2"];
	Node0xabfc10[shape=record, label="  %26 = xor i32 %25, -4"];
	Node0xabfc80[shape=record, label="  %27 = or i32 %3, %0"];
	Node0xabfcf0[shape=record, label="  %28 = xor i32 %27, -1"];
	Node0xabfd60[shape=record, label="  %29 = shl i32 %24, 1"];
	Node0xabfdd0[shape=record, label="  %30 = add i32 %16, %15"];
	Node0xabfe40[shape=record, label="  %31 = add i32 %30, %28"];
	Node0xabfee0[shape=record, label="  %32 = mul i32 %31, 3"];
	Node0xac0160[shape=record, label="  %33 = add i32 %0, 2"];
	Node0xac01d0[shape=record, label="  %34 = add i32 %33, %1"];
	Node0xac0240[shape=record, label="  %35 = sub i32 %34, %23"];
	Node0xac02b0[shape=record, label="  %36 = add i32 %35, %2"];
	Node0xac0320[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0xac0390[shape=record, label="  %38 = sub i32 %37, %13"];
	Node0xac0400[shape=record, label="  %39 = add i32 %38, %15"];
	Node0xac0470[shape=record, label="  %40 = add i32 %39, %17"];
	Node0xac04e0[shape=record, label="  %41 = add i32 %40, %21"];
	Node0xac0550[shape=record, label="  %42 = add i32 %41, %20"];
	Node0xac05c0[shape=record, label="  %43 = add i32 %42, %22"];
	Node0xac0630[shape=record, label="  %44 = add i32 %43, %27"];
	Node0xac06a0[shape=record, label="  %45 = sub i32 %44, %29"];
	Node0xac0710[shape=record, label="  %46 = sub i32 %45, %26"];
	Node0xac0780[shape=record, label="  %47 = add i32 %46, %32"];
	Node0xac07f0[shape=record, label="  %48 = icmp eq i32 %10, %47"];
	Node0xa5f268[shape=record, label="  %49 = select i1 %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xac0c90[shape=record, label="  %50 = tail call i32 @puts(i8* nonnull dereferenceable(1) %49)"];
	Node0xac0ce0[shape=record, label="  ret void"];
	Node0xabf1f0 -> Node0xabf260;
	Node0xabf260 -> Node0xabf2d0;
	Node0xabf2d0 -> Node0xabf340;
	Node0xabf340 -> Node0xabf3e0;
	Node0xabf3e0 -> Node0xabf450;
	Node0xabf450 -> Node0xabf4c0;
	Node0xabf4c0 -> Node0xabf560;
	Node0xabf560 -> Node0xabf5d0;
	Node0xabf5d0 -> Node0xabf640;
	Node0xabf640 -> Node0xabf6b0;
	Node0xabf6b0 -> Node0xabf720;
	Node0xabf720 -> Node0xabf790;
	Node0xabf790 -> Node0xabf830;
	Node0xabf830 -> Node0xabf8a0;
	Node0xabf8a0 -> Node0xabf940;
	Node0xabf940 -> Node0xabf9b0;
	Node0xabf9b0 -> Node0xabfa20;
	Node0xabfa20 -> Node0xabfa90;
	Node0xabfa90 -> Node0xabfb00;
	Node0xabfb00 -> Node0xabfb70;
	Node0xabfb70 -> Node0xabfc10;
	Node0xabfc10 -> Node0xabfc80;
	Node0xabfc80 -> Node0xabfcf0;
	Node0xabfcf0 -> Node0xabfd60;
	Node0xabfd60 -> Node0xabfdd0;
	Node0xabfdd0 -> Node0xabfe40;
	Node0xabfe40 -> Node0xabfee0;
	Node0xabfee0 -> Node0xac0160;
	Node0xac0160 -> Node0xac01d0;
	Node0xac01d0 -> Node0xac0240;
	Node0xac0240 -> Node0xac02b0;
	Node0xac02b0 -> Node0xac0320;
	Node0xac0320 -> Node0xac0390;
	Node0xac0390 -> Node0xac0400;
	Node0xac0400 -> Node0xac0470;
	Node0xac0470 -> Node0xac04e0;
	Node0xac04e0 -> Node0xac0550;
	Node0xac0550 -> Node0xac05c0;
	Node0xac05c0 -> Node0xac0630;
	Node0xac0630 -> Node0xac06a0;
	Node0xac06a0 -> Node0xac0710;
	Node0xac0710 -> Node0xac0780;
	Node0xac0780 -> Node0xac07f0;
	Node0xac07f0 -> Node0xa5f268;
	Node0xa5f268 -> Node0xac0c90;
	Node0xac0c90 -> Node0xac0ce0;
edge [color=red]
	Node0xabf1f0 -> Node0xabf260;
	Node0xabf2d0 -> Node0xabf340;
	Node0xabf340 -> Node0xabf3e0;
	Node0xabf260 -> Node0xabf450;
	Node0xabf3e0 -> Node0xabf450;
	Node0xabf4c0 -> Node0xabf560;
	Node0xabf640 -> Node0xabf6b0;
	Node0xabf720 -> Node0xabf790;
	Node0xabf830 -> Node0xabf8a0;
	Node0xabf8a0 -> Node0xabf940;
	Node0xabf2d0 -> Node0xabfa90;
	Node0xabf2d0 -> Node0xabfb00;
	Node0xabfb00 -> Node0xabfb70;
	Node0xabfb70 -> Node0xabfc10;
	Node0xabfc80 -> Node0xabfcf0;
	Node0xabfb00 -> Node0xabfd60;
	Node0xabf720 -> Node0xabfdd0;
	Node0xabf6b0 -> Node0xabfdd0;
	Node0xabfdd0 -> Node0xabfe40;
	Node0xabfcf0 -> Node0xabfe40;
	Node0xabfe40 -> Node0xabfee0;
	Node0xac0160 -> Node0xac01d0;
	Node0xac01d0 -> Node0xac0240;
	Node0xabfa90 -> Node0xac0240;
	Node0xac0240 -> Node0xac02b0;
	Node0xac02b0 -> Node0xac0320;
	Node0xabf560 -> Node0xac0320;
	Node0xac0320 -> Node0xac0390;
	Node0xabf5d0 -> Node0xac0390;
	Node0xac0390 -> Node0xac0400;
	Node0xabf6b0 -> Node0xac0400;
	Node0xac0400 -> Node0xac0470;
	Node0xabf790 -> Node0xac0470;
	Node0xac0470 -> Node0xac04e0;
	Node0xabf9b0 -> Node0xac04e0;
	Node0xac04e0 -> Node0xac0550;
	Node0xabf940 -> Node0xac0550;
	Node0xac0550 -> Node0xac05c0;
	Node0xabfa20 -> Node0xac05c0;
	Node0xac05c0 -> Node0xac0630;
	Node0xabfc80 -> Node0xac0630;
	Node0xac0630 -> Node0xac06a0;
	Node0xabfd60 -> Node0xac06a0;
	Node0xac06a0 -> Node0xac0710;
	Node0xabfc10 -> Node0xac0710;
	Node0xac0710 -> Node0xac0780;
	Node0xabfee0 -> Node0xac0780;
	Node0xabf450 -> Node0xac07f0;
	Node0xac0780 -> Node0xac07f0;
	Node0xac07f0 -> Node0xa5f268;
	Node0xa5f268 -> Node0xac0c90;
}
