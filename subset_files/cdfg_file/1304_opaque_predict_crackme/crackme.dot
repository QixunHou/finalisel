digraph "DFG for'crackme' function" {
	Node0x1adc9f0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1adca60[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x1adcb20[shape=record, label="  %5 = sub i32 %3, %4"];
	Node0x1adcb90[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1adcc00[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1adcc70[shape=record, label="  %8 = shl i32 %4, 1"];
	Node0x1adcd10[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x1adcd80[shape=record, label="  %10 = xor i32 %0, -1"];
	Node0x1adcdf0[shape=record, label="  %11 = and i32 %10, %1"];
	Node0x1adce90[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x1adcf00[shape=record, label="  %13 = add i32 %3, %0"];
	Node0x1adcf70[shape=record, label="  %14 = sub i32 %7, %13"];
	Node0x1adcfe0[shape=record, label="  %15 = add i32 %14, %12"];
	Node0x1add050[shape=record, label="  %16 = add i32 %15, %9"];
	Node0x1add0c0[shape=record, label="  %17 = icmp eq i32 %5, %16"];
	Node0x1a7d268[shape=record, label="  %18 = select i1 %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1add560[shape=record, label="  %19 = tail call i32 @puts(i8* nonnull dereferenceable(1) %18)"];
	Node0x1add5b0[shape=record, label="  ret void"];
	Node0x1adc9f0 -> Node0x1adca60;
	Node0x1adca60 -> Node0x1adcb20;
	Node0x1adcb20 -> Node0x1adcb90;
	Node0x1adcb90 -> Node0x1adcc00;
	Node0x1adcc00 -> Node0x1adcc70;
	Node0x1adcc70 -> Node0x1adcd10;
	Node0x1adcd10 -> Node0x1adcd80;
	Node0x1adcd80 -> Node0x1adcdf0;
	Node0x1adcdf0 -> Node0x1adce90;
	Node0x1adce90 -> Node0x1adcf00;
	Node0x1adcf00 -> Node0x1adcf70;
	Node0x1adcf70 -> Node0x1adcfe0;
	Node0x1adcfe0 -> Node0x1add050;
	Node0x1add050 -> Node0x1add0c0;
	Node0x1add0c0 -> Node0x1a7d268;
	Node0x1a7d268 -> Node0x1add560;
	Node0x1add560 -> Node0x1add5b0;
edge [color=red]
	Node0x1adc9f0 -> Node0x1adcb20;
	Node0x1adca60 -> Node0x1adcb20;
	Node0x1adcb90 -> Node0x1adcc00;
	Node0x1adca60 -> Node0x1adcc70;
	Node0x1adcc70 -> Node0x1adcd10;
	Node0x1adcd80 -> Node0x1adcdf0;
	Node0x1adcdf0 -> Node0x1adce90;
	Node0x1adc9f0 -> Node0x1adcf00;
	Node0x1adcc00 -> Node0x1adcf70;
	Node0x1adcf00 -> Node0x1adcf70;
	Node0x1adcf70 -> Node0x1adcfe0;
	Node0x1adce90 -> Node0x1adcfe0;
	Node0x1adcfe0 -> Node0x1add050;
	Node0x1adcd10 -> Node0x1add050;
	Node0x1adcb20 -> Node0x1add0c0;
	Node0x1add050 -> Node0x1add0c0;
	Node0x1add0c0 -> Node0x1a7d268;
	Node0x1a7d268 -> Node0x1add560;
}
