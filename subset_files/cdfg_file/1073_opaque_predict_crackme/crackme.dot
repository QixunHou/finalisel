digraph "DFG for'crackme' function" {
	Node0x1bfb7a0[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1bfbe20[shape=record, label="  %6 = mul i32 %5, -3"];
	Node0x1bfbec0[shape=record, label="  %7 = shl i32 %0, 1"];
	Node0x1bfbf30[shape=record, label="  %8 = add i32 %6, %7"];
	Node0x1bfbfa0[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0x1bfc010[shape=record, label="  %10 = shl i32 %1, 1"];
	Node0x1bfc0b0[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x1bfc120[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x1bfc1c0[shape=record, label="  %13 = xor i32 %1, 2147483647"];
	Node0x1bfc230[shape=record, label="  %14 = or i32 %13, %2"];
	Node0x1bfc2a0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x1bfc310[shape=record, label="  %16 = and i32 %2, %1"];
	Node0x1bfc380[shape=record, label="  %17 = add i32 %2, 1"];
	Node0x1bfc3f0[shape=record, label="  %18 = xor i32 %12, -1"];
	Node0x1bfc490[shape=record, label="  %19 = mul i32 %18, -6"];
	Node0x1bfc500[shape=record, label="  %20 = shl i32 %16, 1"];
	Node0x1bfc570[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x1bfc5e0[shape=record, label="  %22 = or i32 %21, %3"];
	Node0x1bfc650[shape=record, label="  %23 = xor i32 %3, %0"];
	Node0x1bfc6c0[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x1bfc730[shape=record, label="  %25 = mul i32 %24, -3"];
	Node0x1bfc7a0[shape=record, label="  %26 = xor i32 %3, -1"];
	Node0x1bfc810[shape=record, label="  %27 = or i32 %26, %0"];
	Node0x1bfc880[shape=record, label="  %28 = and i32 %3, %0"];
	Node0x1bfc8f0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x1bfc990[shape=record, label="  %30 = xor i32 %29, -2"];
	Node0x1bfca00[shape=record, label="  %31 = or i32 %3, %0"];
	Node0x1bfca70[shape=record, label="  %32 = xor i32 %31, -1"];
	Node0x1bfccf0[shape=record, label="  %33 = shl i32 %22, 1"];
	Node0x1bfcd60[shape=record, label="  %34 = xor i32 %33, -2"];
	Node0x1bfce00[shape=record, label="  %35 = mul i32 %28, 5"];
	Node0x1bfcea0[shape=record, label="  %36 = sub i32 2, %1"];
	Node0x1bfcf10[shape=record, label="  %37 = sub i32 %36, %2"];
	Node0x1bfcf80[shape=record, label="  %38 = sub i32 %37, %10"];
	Node0x1bfcff0[shape=record, label="  %39 = add i32 %38, %17"];
	Node0x1bfd060[shape=record, label="  %40 = add i32 %39, %9"];
	Node0x1bfd0d0[shape=record, label="  %41 = sub i32 %40, %12"];
	Node0x1bfd140[shape=record, label="  %42 = add i32 %41, %16"];
	Node0x1bfd1b0[shape=record, label="  %43 = add i32 %42, %5"];
	Node0x1bfd220[shape=record, label="  %44 = add i32 %43, %15"];
	Node0x1bfd290[shape=record, label="  %45 = add i32 %44, %19"];
	Node0x1bfd300[shape=record, label="  %46 = sub i32 %45, %20"];
	Node0x1bfd370[shape=record, label="  %47 = add i32 %46, %22"];
	Node0x1bfd3e0[shape=record, label="  %48 = add i32 %47, %27"];
	Node0x1bfd450[shape=record, label="  %49 = sub i32 %48, %23"];
	Node0x1bfd4c0[shape=record, label="  %50 = add i32 %49, %32"];
	Node0x1bfd530[shape=record, label="  %51 = add i32 %50, %25"];
	Node0x1bfd5a0[shape=record, label="  %52 = add i32 %51, %35"];
	Node0x1bfd610[shape=record, label="  %53 = add i32 %52, %30"];
	Node0x1bfd680[shape=record, label="  %54 = add i32 %53, %34"];
	Node0x1bfd6f0[shape=record, label="  %55 = icmp eq i32 %8, %54"];
	Node0x1b9c268[shape=record, label="  %56 = select i1 %55, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1bfdb90[shape=record, label="  %57 = tail call i32 @puts(i8* nonnull dereferenceable(1) %56)"];
	Node0x1bfdbe0[shape=record, label="  ret void"];
	Node0x1bfb7a0 -> Node0x1bfbe20;
	Node0x1bfbe20 -> Node0x1bfbec0;
	Node0x1bfbec0 -> Node0x1bfbf30;
	Node0x1bfbf30 -> Node0x1bfbfa0;
	Node0x1bfbfa0 -> Node0x1bfc010;
	Node0x1bfc010 -> Node0x1bfc0b0;
	Node0x1bfc0b0 -> Node0x1bfc120;
	Node0x1bfc120 -> Node0x1bfc1c0;
	Node0x1bfc1c0 -> Node0x1bfc230;
	Node0x1bfc230 -> Node0x1bfc2a0;
	Node0x1bfc2a0 -> Node0x1bfc310;
	Node0x1bfc310 -> Node0x1bfc380;
	Node0x1bfc380 -> Node0x1bfc3f0;
	Node0x1bfc3f0 -> Node0x1bfc490;
	Node0x1bfc490 -> Node0x1bfc500;
	Node0x1bfc500 -> Node0x1bfc570;
	Node0x1bfc570 -> Node0x1bfc5e0;
	Node0x1bfc5e0 -> Node0x1bfc650;
	Node0x1bfc650 -> Node0x1bfc6c0;
	Node0x1bfc6c0 -> Node0x1bfc730;
	Node0x1bfc730 -> Node0x1bfc7a0;
	Node0x1bfc7a0 -> Node0x1bfc810;
	Node0x1bfc810 -> Node0x1bfc880;
	Node0x1bfc880 -> Node0x1bfc8f0;
	Node0x1bfc8f0 -> Node0x1bfc990;
	Node0x1bfc990 -> Node0x1bfca00;
	Node0x1bfca00 -> Node0x1bfca70;
	Node0x1bfca70 -> Node0x1bfccf0;
	Node0x1bfccf0 -> Node0x1bfcd60;
	Node0x1bfcd60 -> Node0x1bfce00;
	Node0x1bfce00 -> Node0x1bfcea0;
	Node0x1bfcea0 -> Node0x1bfcf10;
	Node0x1bfcf10 -> Node0x1bfcf80;
	Node0x1bfcf80 -> Node0x1bfcff0;
	Node0x1bfcff0 -> Node0x1bfd060;
	Node0x1bfd060 -> Node0x1bfd0d0;
	Node0x1bfd0d0 -> Node0x1bfd140;
	Node0x1bfd140 -> Node0x1bfd1b0;
	Node0x1bfd1b0 -> Node0x1bfd220;
	Node0x1bfd220 -> Node0x1bfd290;
	Node0x1bfd290 -> Node0x1bfd300;
	Node0x1bfd300 -> Node0x1bfd370;
	Node0x1bfd370 -> Node0x1bfd3e0;
	Node0x1bfd3e0 -> Node0x1bfd450;
	Node0x1bfd450 -> Node0x1bfd4c0;
	Node0x1bfd4c0 -> Node0x1bfd530;
	Node0x1bfd530 -> Node0x1bfd5a0;
	Node0x1bfd5a0 -> Node0x1bfd610;
	Node0x1bfd610 -> Node0x1bfd680;
	Node0x1bfd680 -> Node0x1bfd6f0;
	Node0x1bfd6f0 -> Node0x1b9c268;
	Node0x1b9c268 -> Node0x1bfdb90;
	Node0x1bfdb90 -> Node0x1bfdbe0;
edge [color=red]
	Node0x1bfb7a0 -> Node0x1bfbe20;
	Node0x1bfbe20 -> Node0x1bfbf30;
	Node0x1bfbec0 -> Node0x1bfbf30;
	Node0x1bfc0b0 -> Node0x1bfc120;
	Node0x1bfc1c0 -> Node0x1bfc230;
	Node0x1bfc230 -> Node0x1bfc2a0;
	Node0x1bfc120 -> Node0x1bfc3f0;
	Node0x1bfc3f0 -> Node0x1bfc490;
	Node0x1bfc310 -> Node0x1bfc500;
	Node0x1bfc570 -> Node0x1bfc5e0;
	Node0x1bfc650 -> Node0x1bfc6c0;
	Node0x1bfc6c0 -> Node0x1bfc730;
	Node0x1bfc7a0 -> Node0x1bfc810;
	Node0x1bfc880 -> Node0x1bfc8f0;
	Node0x1bfc8f0 -> Node0x1bfc990;
	Node0x1bfca00 -> Node0x1bfca70;
	Node0x1bfc5e0 -> Node0x1bfccf0;
	Node0x1bfccf0 -> Node0x1bfcd60;
	Node0x1bfc880 -> Node0x1bfce00;
	Node0x1bfcea0 -> Node0x1bfcf10;
	Node0x1bfcf10 -> Node0x1bfcf80;
	Node0x1bfc010 -> Node0x1bfcf80;
	Node0x1bfcf80 -> Node0x1bfcff0;
	Node0x1bfc380 -> Node0x1bfcff0;
	Node0x1bfcff0 -> Node0x1bfd060;
	Node0x1bfbfa0 -> Node0x1bfd060;
	Node0x1bfd060 -> Node0x1bfd0d0;
	Node0x1bfc120 -> Node0x1bfd0d0;
	Node0x1bfd0d0 -> Node0x1bfd140;
	Node0x1bfc310 -> Node0x1bfd140;
	Node0x1bfd140 -> Node0x1bfd1b0;
	Node0x1bfb7a0 -> Node0x1bfd1b0;
	Node0x1bfd1b0 -> Node0x1bfd220;
	Node0x1bfc2a0 -> Node0x1bfd220;
	Node0x1bfd220 -> Node0x1bfd290;
	Node0x1bfc490 -> Node0x1bfd290;
	Node0x1bfd290 -> Node0x1bfd300;
	Node0x1bfc500 -> Node0x1bfd300;
	Node0x1bfd300 -> Node0x1bfd370;
	Node0x1bfc5e0 -> Node0x1bfd370;
	Node0x1bfd370 -> Node0x1bfd3e0;
	Node0x1bfc810 -> Node0x1bfd3e0;
	Node0x1bfd3e0 -> Node0x1bfd450;
	Node0x1bfc650 -> Node0x1bfd450;
	Node0x1bfd450 -> Node0x1bfd4c0;
	Node0x1bfca70 -> Node0x1bfd4c0;
	Node0x1bfd4c0 -> Node0x1bfd530;
	Node0x1bfc730 -> Node0x1bfd530;
	Node0x1bfd530 -> Node0x1bfd5a0;
	Node0x1bfce00 -> Node0x1bfd5a0;
	Node0x1bfd5a0 -> Node0x1bfd610;
	Node0x1bfc990 -> Node0x1bfd610;
	Node0x1bfd610 -> Node0x1bfd680;
	Node0x1bfcd60 -> Node0x1bfd680;
	Node0x1bfbf30 -> Node0x1bfd6f0;
	Node0x1bfd680 -> Node0x1bfd6f0;
	Node0x1bfd6f0 -> Node0x1b9c268;
	Node0x1b9c268 -> Node0x1bfdb90;
}
