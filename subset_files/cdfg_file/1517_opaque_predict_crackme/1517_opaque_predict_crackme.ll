; ModuleID = '../.././c_source_file/1517_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1517_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = mul i32 %7, -2
  %9 = xor i32 %0, -1
  %10 = or i32 %4, %1
  %11 = xor i32 %10, -1
  %12 = or i32 %11, %9
  %13 = xor i32 %2, %1
  %14 = or i32 %13, %9
  %15 = shl i32 %14, 1
  %16 = and i32 %2, %1
  %17 = or i32 %16, %9
  %18 = xor i32 %1, %0
  %19 = xor i32 %2, %0
  %20 = or i32 %19, %18
  %21 = shl i32 %20, 2
  %22 = xor i32 %1, -1
  %23 = xor i32 %19, -1
  %24 = and i32 %23, %22
  %25 = and i32 %19, %1
  %26 = and i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %1
  %29 = xor i32 %16, -1
  %30 = or i32 %29, %0
  %31 = or i32 %22, %0
  %32 = xor i32 %13, -1
  %33 = and i32 %31, %32
  %34 = or i32 %16, %0
  %35 = and i32 %22, %2
  %36 = and i32 %35, %9
  %37 = or i32 %22, %2
  %38 = and i32 %37, %0
  %39 = or i32 %36, %38
  %40 = xor i32 %18, -1
  %41 = or i32 %19, %40
  %42 = and i32 %4, %0
  %43 = xor i32 %42, %10
  %44 = and i32 %4, %1
  %45 = xor i32 %44, -1
  %46 = and i32 %45, %0
  %47 = or i32 %44, %0
  %48 = and i32 %13, %5
  %49 = or i32 %4, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %40
  %52 = and i32 %35, %0
  %53 = xor i32 %37, %9
  %54 = xor i32 %53, %52
  %55 = and i32 %5, %2
  %56 = or i32 %26, %22
  %57 = or i32 %2, %1
  %58 = xor i32 %57, -1
  %59 = xor i32 %13, %0
  %60 = or i32 %26, %40
  %61 = shl i32 %60, 1
  %62 = or i32 %42, %40
  %63 = xor i32 %42, -1
  %64 = and i32 %63, %40
  %65 = shl i32 %64, 1
  %66 = and i32 %1, %0
  %67 = xor i32 %57, %66
  %68 = xor i32 %66, -1
  %69 = and i32 %68, %2
  %70 = xor i32 %49, %1
  %71 = shl i32 %70, 1
  %72 = or i32 %26, %1
  %73 = and i32 %16, %9
  %74 = and i32 %57, %0
  %75 = xor i32 %74, -1
  %76 = xor i32 %73, %75
  %77 = and i32 %5, %4
  %78 = and i32 %22, %0
  %79 = or i32 %44, %78
  %80 = or i32 %2, %0
  %81 = xor i32 %80, -1
  %82 = or i32 %23, %1
  %83 = xor i32 %78, -1
  %84 = and i32 %83, %2
  %85 = or i32 %32, %9
  %86 = and i32 %23, %68
  %87 = and i32 %80, %1
  %88 = xor i32 %31, -1
  %89 = or i32 %19, %88
  %90 = add i32 %26, 1
  %91 = and i32 %19, %40
  %92 = or i32 %13, %88
  %93 = shl i32 %92, 1
  %94 = or i32 %66, %4
  %95 = xor i32 %66, %2
  %96 = and i32 %4, %83
  %97 = shl i32 %96, 1
  %98 = or i32 %18, %23
  %99 = shl i32 %98, 1
  %100 = xor i32 %6, %2
  %101 = or i32 %66, %32
  %102 = and i32 %49, %18
  %103 = xor i32 %26, %57
  %104 = and i32 %29, %9
  %105 = and i32 %4, %68
  %106 = xor i32 %80, %1
  %107 = or i32 %42, %1
  %108 = add i32 %42, 1
  %109 = or i32 %19, %78
  %110 = add i32 %31, 1
  %111 = or i32 %78, %32
  %112 = or i32 %13, %0
  %113 = xor i32 %52, %112
  %114 = and i32 %80, %40
  %115 = xor i32 %58, %0
  %116 = xor i32 %42, %29
  %117 = and i32 %31, %4
  %118 = and i32 %16, %0
  %119 = and i32 %57, %9
  %120 = xor i32 %118, -1
  %121 = xor i32 %119, %120
  %122 = or i32 %88, %2
  %123 = or i32 %78, %23
  %124 = xor i32 %112, -1
  %125 = or i32 %52, %124
  %126 = or i32 %23, %40
  %127 = and i32 %10, %0
  %128 = xor i32 %57, %0
  %129 = or i32 %66, %23
  %130 = or i32 %13, %66
  %131 = xor i32 %27, %1
  %132 = and i32 %23, %83
  %133 = xor i32 %45, %0
  %134 = and i32 %5, %23
  %135 = or i32 %66, %2
  %136 = shl i32 %68, 1
  %137 = and i32 %23, %40
  %138 = xor i32 %5, %2
  %139 = or i32 %66, %81
  %140 = or i32 %10, %0
  %141 = xor i32 %59, -1
  %142 = xor i32 %52, %141
  %143 = and i32 %80, %22
  %144 = xor i32 %38, -1
  %145 = xor i32 %36, %144
  %146 = and i32 %37, %9
  %147 = xor i32 %52, -1
  %148 = xor i32 %146, %147
  %149 = and i32 %18, %27
  %150 = or i32 %16, %78
  %151 = xor i32 %36, %14
  %152 = and i32 %63, %1
  %153 = and i32 %19, %83
  %154 = and i32 %32, %9
  %155 = and i32 %80, %18
  %156 = add i32 %16, 1
  %157 = or i32 %42, %18
  %158 = or i32 %57, %0
  %159 = and i32 %18, %2
  %160 = xor i32 %81, %1
  %161 = or i32 %19, %22
  %162 = shl i32 %161, 1
  %163 = or i32 %42, %11
  %164 = and i32 %13, %0
  %165 = or i32 %73, %164
  %166 = or i32 %42, %22
  %167 = or i32 %32, %0
  %168 = or i32 %10, %9
  %169 = or i32 %26, %44
  %170 = and i32 %63, %22
  %171 = xor i32 %42, %1
  %172 = shl i32 %171, 1
  %173 = or i32 %58, %0
  %174 = or i32 %13, %6
  %175 = and i32 %23, %1
  %176 = xor i32 %78, %45
  %177 = or i32 %11, %0
  %178 = or i32 %32, %88
  %179 = or i32 %18, %50
  %180 = and i32 %13, %9
  %181 = add i32 %44, 1
  %182 = or i32 %18, %2
  %183 = or i32 %19, %66
  %184 = or i32 %23, %6
  %185 = shl i32 %184, 1
  %186 = xor i32 %78, %2
  %187 = and i32 %32, %0
  %188 = add i32 %5, 1
  %189 = xor i32 %29, %0
  %190 = xor i32 %83, %2
  %191 = or i32 %23, %22
  %192 = or i32 %78, %4
  %193 = and i32 %10, %9
  %194 = and i32 %13, %31
  %195 = xor i32 %49, %66
  %196 = or i32 %52, %146
  %197 = shl i32 %196, 1
  %198 = shl i32 %1, 1
  %199 = xor i32 %80, %66
  %200 = xor i32 %44, %0
  %201 = and i32 %31, %2
  %202 = xor i32 %26, %31
  %203 = or i32 %73, %74
  %204 = xor i32 %16, %0
  %205 = or i32 %4, %40
  %206 = and i32 %13, %83
  %207 = and i32 %32, %68
  %208 = or i32 %18, %81
  %209 = or i32 %58, %9
  %210 = xor i32 %180, %120
  %211 = and i32 %45, %9
  %212 = or i32 %78, %2
  %213 = or i32 %40, %2
  %214 = or i32 %52, %59
  %215 = or i32 %118, %128
  %216 = or i32 %50, %1
  %217 = and i32 %19, %22
  %218 = xor i32 %26, %1
  %219 = shl i32 %218, 1
  %220 = xor i32 %11, %0
  %221 = and i32 %4, %40
  %222 = or i32 %26, %6
  %223 = shl i32 %222, 1
  %224 = or i32 %44, %9
  %225 = and i32 %5, %32
  %226 = and i32 %32, %83
  %227 = and i32 %49, %40
  %228 = xor i32 %118, %59
  %229 = and i32 %27, %22
  %230 = and i32 %19, %31
  %231 = and i32 %18, %63
  %232 = or i32 %13, %78
  %233 = or i32 %6, %2
  %234 = shl i32 %233, 1
  %235 = xor i32 %31, %2
  %236 = xor i32 %14, -1
  %237 = or i32 %36, %236
  %238 = xor i32 %32, %0
  %239 = xor i32 %10, %0
  %240 = or i32 %26, %88
  %241 = and i32 %49, %1
  %242 = or i32 %57, %9
  %243 = or i32 %4, %88
  %244 = shl i32 %0, 1
  %245 = and i32 %19, %68
  %246 = xor i32 %26, %45
  %247 = shl i32 %246, 1
  %248 = or i32 %81, %1
  %249 = or i32 %81, %40
  %250 = or i32 %26, %18
  %251 = or i32 %66, %58
  %252 = xor i32 %88, %2
  %253 = or i32 %23, %88
  %254 = and i32 %31, %23
  %255 = or i32 %42, %16
  %256 = or i32 %45, %0
  %257 = xor i32 %68, %2
  %258 = xor i32 %164, 2147483647
  %259 = xor i32 %258, %73
  %260 = or i32 %50, %22
  %261 = or i32 %19, %6
  %262 = or i32 %118, %141
  %263 = xor i32 %50, %1
  %264 = and i32 %18, %4
  %265 = xor i32 %10, %66
  %266 = or i32 %19, %1
  %267 = or i32 %66, %50
  %268 = xor i32 %26, %5
  %269 = xor i32 %128, 2147483647
  %270 = xor i32 %269, %118
  %271 = and i32 %19, %18
  %272 = or i32 %81, %22
  %273 = or i32 %32, %6
  %274 = shl i32 %164, 1
  %275 = and i32 %19, %5
  %276 = xor i32 %63, %1
  %277 = and i32 %58, %9
  %278 = mul i32 %277, -24
  %279 = and i32 %44, %9
  %280 = mul i32 %279, -21
  %281 = and i32 %58, %0
  %282 = and i32 %44, %0
  %283 = and i32 %11, %9
  %284 = mul i32 %283, -9
  %285 = mul i32 %73, -15
  %286 = and i32 %11, %0
  %287 = shl i32 %286, 3
  %288 = add i32 %26, %50
  %289 = add i32 %288, %100
  %290 = add i32 %289, %44
  %291 = add i32 %290, %84
  %292 = add i32 %291, %81
  %293 = add i32 %292, %231
  %294 = add i32 %293, %211
  %295 = add i32 %294, %193
  %296 = add i32 %295, %176
  %297 = add i32 %296, %168
  %298 = add i32 %297, %150
  %299 = add i32 %298, %74
  %300 = add i32 %299, %140
  %301 = add i32 %300, %133
  %302 = add i32 %301, %107
  %303 = add i32 %302, %87
  %304 = add i32 %303, %82
  %305 = add i32 %304, %46
  %306 = add i32 %305, %165
  %307 = add i32 %306, %113
  %308 = add i32 %307, %259
  %309 = add i32 %308, %270
  %310 = shl i32 %309, 1
  %311 = add i32 %31, %9
  %312 = sub i32 %311, %212
  %313 = add i32 %312, %94
  %314 = add i32 %313, %255
  %315 = sub i32 %314, %281
  %316 = mul i32 %315, 5
  %317 = sub i32 %112, %79
  %318 = add i32 %317, %12
  %319 = sub i32 %318, %214
  %320 = mul i32 %319, 3
  %321 = add i32 %118, %282
  %322 = mul i32 %321, -31
  %323 = add i32 %47, %43
  %324 = shl i32 %323, 2
  %325 = sub i32 -2, %1
  %326 = sub i32 %325, %244
  %327 = add i32 %326, %4
  %328 = sub i32 %327, %5
  %329 = add i32 %328, %110
  %330 = sub i32 %329, %78
  %331 = add i32 %330, %188
  %332 = sub i32 %331, %198
  %333 = add i32 %332, %66
  %334 = add i32 %333, %18
  %335 = add i32 %334, %42
  %336 = sub i32 %335, %55
  %337 = add i32 %336, %58
  %338 = sub i32 %337, %69
  %339 = sub i32 %338, %77
  %340 = add i32 %339, %11
  %341 = add i32 %340, %90
  %342 = add i32 %341, %95
  %343 = add i32 %342, %105
  %344 = add i32 %343, %108
  %345 = sub i32 %344, %13
  %346 = add i32 %345, %117
  %347 = sub i32 %346, %122
  %348 = sub i32 %347, %80
  %349 = add i32 %348, %135
  %350 = sub i32 %349, %136
  %351 = sub i32 %350, %138
  %352 = add i32 %351, %156
  %353 = sub i32 %352, %159
  %354 = add i32 %353, %32
  %355 = add i32 %354, %181
  %356 = add i32 %355, %182
  %357 = add i32 %356, %186
  %358 = add i32 %357, %190
  %359 = sub i32 %358, %192
  %360 = add i32 %359, %201
  %361 = sub i32 %360, %205
  %362 = add i32 %361, %16
  %363 = add i32 %362, %213
  %364 = sub i32 %363, %221
  %365 = sub i32 %364, %235
  %366 = add i32 %365, %243
  %367 = sub i32 %366, %252
  %368 = sub i32 %367, %10
  %369 = add i32 %368, %49
  %370 = sub i32 %369, %257
  %371 = sub i32 %370, %264
  %372 = sub i32 %371, %17
  %373 = sub i32 %372, %24
  %374 = sub i32 %373, %25
  %375 = sub i32 %374, %28
  %376 = add i32 %375, %30
  %377 = add i32 %376, %33
  %378 = sub i32 %377, %34
  %379 = sub i32 %378, %41
  %380 = add i32 %379, %48
  %381 = sub i32 %380, %51
  %382 = sub i32 %381, %56
  %383 = add i32 %382, %59
  %384 = add i32 %383, %62
  %385 = add i32 %384, %67
  %386 = sub i32 %385, %72
  %387 = add i32 %386, %85
  %388 = sub i32 %387, %86
  %389 = add i32 %388, %89
  %390 = add i32 %389, %91
  %391 = sub i32 %390, %97
  %392 = add i32 %391, %101
  %393 = sub i32 %392, %102
  %394 = sub i32 %393, %103
  %395 = add i32 %394, %104
  %396 = sub i32 %395, %106
  %397 = add i32 %396, %109
  %398 = add i32 %397, %111
  %399 = add i32 %398, %114
  %400 = sub i32 %399, %115
  %401 = add i32 %400, %116
  %402 = sub i32 %401, %123
  %403 = add i32 %402, %126
  %404 = sub i32 %403, %127
  %405 = sub i32 %404, %128
  %406 = add i32 %405, %129
  %407 = sub i32 %406, %130
  %408 = sub i32 %407, %131
  %409 = add i32 %408, %132
  %410 = sub i32 %409, %134
  %411 = add i32 %410, %137
  %412 = add i32 %411, %139
  %413 = add i32 %412, %143
  %414 = sub i32 %413, %149
  %415 = add i32 %414, %152
  %416 = add i32 %415, %153
  %417 = sub i32 %416, %154
  %418 = sub i32 %417, %155
  %419 = sub i32 %418, %157
  %420 = sub i32 %419, %158
  %421 = add i32 %420, %160
  %422 = sub i32 %421, %163
  %423 = sub i32 %422, %166
  %424 = add i32 %423, %167
  %425 = add i32 %424, %169
  %426 = sub i32 %425, %170
  %427 = sub i32 %426, %173
  %428 = sub i32 %427, %174
  %429 = sub i32 %428, %175
  %430 = add i32 %429, %177
  %431 = sub i32 %430, %178
  %432 = add i32 %431, %179
  %433 = add i32 %432, %180
  %434 = sub i32 %433, %183
  %435 = sub i32 %434, %187
  %436 = sub i32 %435, %189
  %437 = add i32 %436, %191
  %438 = add i32 %437, %194
  %439 = sub i32 %438, %195
  %440 = add i32 %439, %199
  %441 = add i32 %440, %200
  %442 = add i32 %441, %202
  %443 = add i32 %442, %204
  %444 = add i32 %443, %206
  %445 = sub i32 %444, %207
  %446 = sub i32 %445, %208
  %447 = add i32 %446, %209
  %448 = add i32 %447, %216
  %449 = add i32 %448, %217
  %450 = sub i32 %449, %220
  %451 = add i32 %450, %224
  %452 = sub i32 %451, %225
  %453 = sub i32 %452, %226
  %454 = add i32 %453, %227
  %455 = sub i32 %454, %229
  %456 = add i32 %455, %230
  %457 = add i32 %456, %232
  %458 = sub i32 %457, %234
  %459 = add i32 %458, %238
  %460 = sub i32 %459, %239
  %461 = add i32 %460, %240
  %462 = add i32 %461, %241
  %463 = sub i32 %462, %242
  %464 = add i32 %463, %245
  %465 = add i32 %464, %248
  %466 = add i32 %465, %249
  %467 = add i32 %466, %119
  %468 = sub i32 %467, %250
  %469 = sub i32 %468, %251
  %470 = add i32 %469, %253
  %471 = sub i32 %470, %254
  %472 = add i32 %471, %256
  %473 = add i32 %472, %260
  %474 = sub i32 %473, %261
  %475 = add i32 %474, %263
  %476 = add i32 %475, %265
  %477 = sub i32 %476, %266
  %478 = sub i32 %477, %267
  %479 = sub i32 %478, %268
  %480 = sub i32 %479, %271
  %481 = sub i32 %480, %272
  %482 = sub i32 %481, %273
  %483 = add i32 %482, %275
  %484 = sub i32 %483, %276
  %485 = sub i32 %484, %15
  %486 = sub i32 %485, %21
  %487 = add i32 %486, %39
  %488 = add i32 %487, %54
  %489 = sub i32 %488, %61
  %490 = sub i32 %489, %65
  %491 = sub i32 %490, %71
  %492 = add i32 %491, %76
  %493 = sub i32 %492, %93
  %494 = sub i32 %493, %99
  %495 = add i32 %494, %121
  %496 = add i32 %495, %125
  %497 = add i32 %496, %142
  %498 = add i32 %497, %145
  %499 = sub i32 %498, %148
  %500 = add i32 %499, %151
  %501 = sub i32 %500, %162
  %502 = sub i32 %501, %172
  %503 = sub i32 %502, %185
  %504 = add i32 %503, %203
  %505 = sub i32 %504, %210
  %506 = add i32 %505, %215
  %507 = sub i32 %506, %219
  %508 = sub i32 %507, %223
  %509 = add i32 %508, %228
  %510 = sub i32 %509, %237
  %511 = sub i32 %510, %247
  %512 = add i32 %511, %262
  %513 = sub i32 %512, %274
  %514 = add i32 %513, %278
  %515 = add i32 %514, %280
  %516 = add i32 %515, %284
  %517 = add i32 %516, %285
  %518 = add i32 %517, %287
  %519 = sub i32 %518, %197
  %520 = add i32 %519, %322
  %521 = add i32 %520, %324
  %522 = add i32 %521, %320
  %523 = add i32 %522, %316
  %524 = add i32 %523, %310
  %525 = icmp eq i32 %8, %524
  %526 = select i1 %525, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %527 = tail call i32 @puts(i8* nonnull dereferenceable(1) %526)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
