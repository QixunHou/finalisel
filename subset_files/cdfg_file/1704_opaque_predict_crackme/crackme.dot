digraph "DFG for'crackme' function" {
	Node0x1c64b90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1c64c00[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1c64cc0[shape=record, label="  %5 = add i32 %4, 1"];
	Node0x1c64d30[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x1c64dd0[shape=record, label="  %7 = mul i32 %6, -2"];
	Node0x1c64e40[shape=record, label="  %8 = add i32 %1, 1"];
	Node0x1c64eb0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x1c64f20[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1c64f90[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1c65000[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0x1c650a0[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0x1c65110[shape=record, label="  %14 = and i32 %9, %1"];
	Node0x1c651b0[shape=record, label="  %15 = mul i32 %14, 6"];
	Node0x1c65250[shape=record, label="  %16 = mul i32 %4, 9"];
	Node0x1c652c0[shape=record, label="  %17 = and i32 %1, %0"];
	Node0x1c65360[shape=record, label="  %18 = mul i32 %17, 5"];
	Node0x1c653d0[shape=record, label="  %19 = sub i32 3, %0"];
	Node0x1c65440[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x1c654b0[shape=record, label="  %21 = add i32 %20, %7"];
	Node0x1c65520[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0x1c65590[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x1c65600[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x1c65670[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x1c656e0[shape=record, label="  %26 = add i32 %25, %18"];
	Node0x1c65750[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0x1c05268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c65bf0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1c65c40[shape=record, label="  ret void"];
	Node0x1c64b90 -> Node0x1c64c00;
	Node0x1c64c00 -> Node0x1c64cc0;
	Node0x1c64cc0 -> Node0x1c64d30;
	Node0x1c64d30 -> Node0x1c64dd0;
	Node0x1c64dd0 -> Node0x1c64e40;
	Node0x1c64e40 -> Node0x1c64eb0;
	Node0x1c64eb0 -> Node0x1c64f20;
	Node0x1c64f20 -> Node0x1c64f90;
	Node0x1c64f90 -> Node0x1c65000;
	Node0x1c65000 -> Node0x1c650a0;
	Node0x1c650a0 -> Node0x1c65110;
	Node0x1c65110 -> Node0x1c651b0;
	Node0x1c651b0 -> Node0x1c65250;
	Node0x1c65250 -> Node0x1c652c0;
	Node0x1c652c0 -> Node0x1c65360;
	Node0x1c65360 -> Node0x1c653d0;
	Node0x1c653d0 -> Node0x1c65440;
	Node0x1c65440 -> Node0x1c654b0;
	Node0x1c654b0 -> Node0x1c65520;
	Node0x1c65520 -> Node0x1c65590;
	Node0x1c65590 -> Node0x1c65600;
	Node0x1c65600 -> Node0x1c65670;
	Node0x1c65670 -> Node0x1c656e0;
	Node0x1c656e0 -> Node0x1c65750;
	Node0x1c65750 -> Node0x1c05268;
	Node0x1c05268 -> Node0x1c65bf0;
	Node0x1c65bf0 -> Node0x1c65c40;
edge [color=red]
	Node0x1c64b90 -> Node0x1c64c00;
	Node0x1c64c00 -> Node0x1c64cc0;
	Node0x1c64d30 -> Node0x1c64dd0;
	Node0x1c64f20 -> Node0x1c64f90;
	Node0x1c64d30 -> Node0x1c65000;
	Node0x1c65000 -> Node0x1c650a0;
	Node0x1c64eb0 -> Node0x1c65110;
	Node0x1c65110 -> Node0x1c651b0;
	Node0x1c64c00 -> Node0x1c65250;
	Node0x1c652c0 -> Node0x1c65360;
	Node0x1c653d0 -> Node0x1c65440;
	Node0x1c64e40 -> Node0x1c65440;
	Node0x1c65440 -> Node0x1c654b0;
	Node0x1c64dd0 -> Node0x1c654b0;
	Node0x1c654b0 -> Node0x1c65520;
	Node0x1c64f90 -> Node0x1c65520;
	Node0x1c65520 -> Node0x1c65590;
	Node0x1c650a0 -> Node0x1c65590;
	Node0x1c65590 -> Node0x1c65600;
	Node0x1c651b0 -> Node0x1c65600;
	Node0x1c65600 -> Node0x1c65670;
	Node0x1c65250 -> Node0x1c65670;
	Node0x1c65670 -> Node0x1c656e0;
	Node0x1c65360 -> Node0x1c656e0;
	Node0x1c64cc0 -> Node0x1c65750;
	Node0x1c656e0 -> Node0x1c65750;
	Node0x1c65750 -> Node0x1c05268;
	Node0x1c05268 -> Node0x1c65bf0;
}
