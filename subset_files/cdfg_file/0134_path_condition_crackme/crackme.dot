digraph "DFG for'crackme' function" {
	Node0x15ffaf0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x15ffb60[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x15ffc20[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x15ffc90[shape=record, label="  %6 = sub i32 %3, %5"];
	Node0x15ffd00[shape=record, label="  %7 = and i32 %4, %0"];
	Node0x15ffd70[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x15ffde0[shape=record, label="  %9 = mul i32 %8, -3"];
	Node0x15ffe50[shape=record, label="  %10 = xor i32 %3, %1"];
	Node0x15ffec0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x15fff30[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x15fffd0[shape=record, label="  %13 = shl i32 %5, 2"];
	Node0x1600070[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x1600110[shape=record, label="  %15 = shl i32 %7, 1"];
	Node0x1600180[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x16001f0[shape=record, label="  %17 = add i32 %10, %4"];
	Node0x1600260[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x16002d0[shape=record, label="  %19 = add i32 %18, %16"];
	Node0x1600340[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x16003b0[shape=record, label="  %21 = sub i32 %20, %15"];
	Node0x1600420[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x1600490[shape=record, label="  %23 = icmp eq i32 %6, %22"];
	Node0x15a0268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1600930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1600980[shape=record, label="  ret void"];
	Node0x15ffaf0 -> Node0x15ffb60;
	Node0x15ffb60 -> Node0x15ffc20;
	Node0x15ffc20 -> Node0x15ffc90;
	Node0x15ffc90 -> Node0x15ffd00;
	Node0x15ffd00 -> Node0x15ffd70;
	Node0x15ffd70 -> Node0x15ffde0;
	Node0x15ffde0 -> Node0x15ffe50;
	Node0x15ffe50 -> Node0x15ffec0;
	Node0x15ffec0 -> Node0x15fff30;
	Node0x15fff30 -> Node0x15fffd0;
	Node0x15fffd0 -> Node0x1600070;
	Node0x1600070 -> Node0x1600110;
	Node0x1600110 -> Node0x1600180;
	Node0x1600180 -> Node0x16001f0;
	Node0x16001f0 -> Node0x1600260;
	Node0x1600260 -> Node0x16002d0;
	Node0x16002d0 -> Node0x1600340;
	Node0x1600340 -> Node0x16003b0;
	Node0x16003b0 -> Node0x1600420;
	Node0x1600420 -> Node0x1600490;
	Node0x1600490 -> Node0x15a0268;
	Node0x15a0268 -> Node0x1600930;
	Node0x1600930 -> Node0x1600980;
edge [color=red]
	Node0x15ffb60 -> Node0x15ffc20;
	Node0x15ffaf0 -> Node0x15ffc90;
	Node0x15ffc20 -> Node0x15ffc90;
	Node0x15ffb60 -> Node0x15ffd00;
	Node0x15ffd00 -> Node0x15ffd70;
	Node0x15ffd70 -> Node0x15ffde0;
	Node0x15ffaf0 -> Node0x15ffe50;
	Node0x15ffec0 -> Node0x15fff30;
	Node0x15ffc20 -> Node0x15fffd0;
	Node0x15fffd0 -> Node0x1600070;
	Node0x15ffd00 -> Node0x1600110;
	Node0x15ffe50 -> Node0x16001f0;
	Node0x15ffb60 -> Node0x16001f0;
	Node0x16001f0 -> Node0x1600260;
	Node0x15fff30 -> Node0x1600260;
	Node0x1600260 -> Node0x16002d0;
	Node0x1600180 -> Node0x16002d0;
	Node0x16002d0 -> Node0x1600340;
	Node0x15ffde0 -> Node0x1600340;
	Node0x1600340 -> Node0x16003b0;
	Node0x1600110 -> Node0x16003b0;
	Node0x16003b0 -> Node0x1600420;
	Node0x1600070 -> Node0x1600420;
	Node0x15ffc90 -> Node0x1600490;
	Node0x1600420 -> Node0x1600490;
	Node0x1600490 -> Node0x15a0268;
	Node0x15a0268 -> Node0x1600930;
}
