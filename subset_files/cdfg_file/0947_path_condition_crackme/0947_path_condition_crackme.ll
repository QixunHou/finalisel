; ModuleID = '../.././c_source_file/0947_path_condition_crackme.c'
source_filename = "../.././c_source_file/0947_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = or i32 %6, %1
  %9 = sub i32 %8, %7
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %0
  %14 = xor i32 %1, -1
  %15 = and i32 %14, %2
  %16 = and i32 %15, %0
  %17 = xor i32 %2, %1
  %18 = or i32 %17, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %16, %19
  %21 = and i32 %10, %0
  %22 = or i32 %14, %0
  %23 = and i32 %22, %10
  %24 = or i32 %10, %1
  %25 = xor i32 %24, -1
  %26 = and i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %14
  %29 = shl i32 %28, 1
  %30 = or i32 %2, %1
  %31 = and i32 %30, %0
  %32 = xor i32 %1, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %10, %33
  %35 = or i32 %24, %0
  %36 = or i32 %17, %5
  %37 = and i32 %2, %1
  %38 = and i32 %37, %0
  %39 = xor i32 %17, %0
  %40 = xor i32 %38, %39
  %41 = or i32 %2, %0
  %42 = and i32 %41, %14
  %43 = xor i32 %37, -1
  %44 = xor i32 %21, %43
  %45 = shl i32 %44, 2
  %46 = xor i32 %0, -1
  %47 = or i32 %11, %46
  %48 = and i32 %17, %4
  %49 = or i32 %21, %33
  %50 = shl i32 %49, 1
  %51 = xor i32 %6, -1
  %52 = and i32 %32, %51
  %53 = and i32 %4, %51
  %54 = or i32 %14, %2
  %55 = and i32 %54, %46
  %56 = or i32 %16, %55
  %57 = or i32 %26, %33
  %58 = and i32 %15, %46
  %59 = and i32 %54, %0
  %60 = or i32 %58, %59
  %61 = shl i32 %60, 1
  %62 = xor i32 %22, -1
  %63 = or i32 %26, %62
  %64 = and i32 %22, %51
  %65 = and i32 %1, %0
  %66 = or i32 %10, %0
  %67 = xor i32 %66, %65
  %68 = xor i32 %4, %2
  %69 = and i32 %32, %10
  %70 = shl i32 %69, 2
  %71 = or i32 %65, %25
  %72 = xor i32 %26, %12
  %73 = shl i32 %72, 1
  %74 = and i32 %6, %32
  %75 = or i32 %24, %46
  %76 = shl i32 %75, 2
  %77 = xor i32 %16, %18
  %78 = and i32 %37, %46
  %79 = and i32 %17, %0
  %80 = xor i32 %79, -1
  %81 = xor i32 %78, %80
  %82 = xor i32 %21, -1
  %83 = and i32 %82, %1
  %84 = and i32 %14, %0
  %85 = xor i32 %84, -1
  %86 = and i32 %10, %85
  %87 = xor i32 %5, %2
  %88 = and i32 %6, %4
  %89 = xor i32 %66, -1
  %90 = or i32 %89, %1
  %91 = xor i32 %26, %4
  %92 = or i32 %17, %46
  %93 = xor i32 %92, 2147483647
  %94 = or i32 %93, %58
  %95 = shl i32 %94, 1
  %96 = or i32 %84, %51
  %97 = xor i32 %58, %92
  %98 = or i32 %84, %2
  %99 = xor i32 %89, %1
  %100 = xor i32 %17, -1
  %101 = or i32 %65, %100
  %102 = shl i32 %101, 1
  %103 = or i32 %11, %84
  %104 = and i32 %82, %14
  %105 = or i32 %100, %62
  %106 = and i32 %100, %46
  %107 = shl i32 %106, 1
  %108 = and i32 %41, %32
  %109 = and i32 %22, %100
  %110 = or i32 %12, %46
  %111 = or i32 %37, %0
  %112 = or i32 %89, %33
  %113 = or i32 %21, %37
  %114 = xor i32 %25, %0
  %115 = or i32 %5, %2
  %116 = or i32 %100, %0
  %117 = xor i32 %82, %1
  %118 = and i32 %66, %1
  %119 = and i32 %6, %22
  %120 = and i32 %32, %2
  %121 = or i32 %10, %62
  %122 = xor i32 %30, -1
  %123 = add i32 %30, 1
  %124 = or i32 %17, %62
  %125 = or i32 %100, %5
  %126 = or i32 %78, %79
  %127 = xor i32 %65, -1
  %128 = and i32 %127, %2
  %129 = xor i32 %26, %30
  %130 = and i32 %27, %33
  %131 = shl i32 %130, 1
  %132 = and i32 %82, %33
  %133 = xor i32 %62, %2
  %134 = xor i32 %55, 2147483647
  %135 = xor i32 %134, %16
  %136 = or i32 %37, %46
  %137 = xor i32 %65, %2
  %138 = and i32 %66, %33
  %139 = and i32 %51, %127
  %140 = or i32 %21, %32
  %141 = xor i32 %41, -1
  %142 = or i32 %141, %14
  %143 = or i32 %17, %84
  %144 = shl i32 %143, 1
  %145 = xor i32 %141, %1
  %146 = and i32 %43, %46
  %147 = shl i32 %146, 1
  %148 = and i32 %6, %33
  %149 = or i32 %6, %32
  %150 = xor i32 %30, %0
  %151 = xor i32 %38, -1
  %152 = xor i32 %150, %151
  %153 = and i32 %41, %1
  %154 = xor i32 %127, %2
  %155 = xor i32 %26, %22
  %156 = and i32 %51, %1
  %157 = and i32 %32, %27
  %158 = or i32 %38, %150
  %159 = xor i32 %43, %0
  %160 = or i32 %43, %46
  %161 = xor i32 %22, %2
  %162 = xor i32 %26, %1
  %163 = xor i32 %84, %43
  %164 = or i32 %43, %0
  %165 = add i32 %65, 1
  %166 = xor i32 %84, %2
  %167 = and i32 %4, %100
  %168 = xor i32 %85, %2
  %169 = or i32 %89, %14
  %170 = and i32 %17, %127
  %171 = shl i32 %170, 1
  %172 = or i32 %30, %46
  %173 = xor i32 %84, %12
  %174 = xor i32 %122, %0
  %175 = xor i32 %39, -1
  %176 = or i32 %38, %175
  %177 = xor i32 %21, %1
  %178 = xor i32 %16, %175
  %179 = or i32 %11, %0
  %180 = or i32 %26, %14
  %181 = or i32 %84, %10
  %182 = or i32 %65, %51
  %183 = and i32 %51, %33
  %184 = and i32 %100, %127
  %185 = xor i32 %54, %46
  %186 = xor i32 %185, %16
  %187 = or i32 %21, %1
  %188 = xor i32 %41, %65
  %189 = and i32 %6, %14
  %190 = and i32 %41, %33
  %191 = or i32 %65, %10
  %192 = and i32 %17, %46
  %193 = or i32 %38, %192
  %194 = xor i32 %59, -1
  %195 = xor i32 %58, %194
  %196 = add i32 %41, 1
  %197 = xor i32 %27, %1
  %198 = xor i32 %24, %65
  %199 = and i32 %85, %2
  %200 = and i32 %24, %0
  %201 = and i32 %24, %46
  %202 = xor i32 %66, %1
  %203 = or i32 %141, %1
  %204 = or i32 %65, %89
  %205 = add i32 %66, 1
  %206 = and i32 %22, %2
  %207 = shl i32 %32, 2
  %208 = and i32 %17, %22
  %209 = shl i32 %4, 1
  %210 = or i32 %32, %89
  %211 = xor i32 %192, %151
  %212 = or i32 %12, %0
  %213 = or i32 %6, %84
  %214 = or i32 %6, %33
  %215 = or i32 %62, %2
  %216 = and i32 %27, %1
  %217 = or i32 %25, %0
  %218 = or i32 %51, %5
  %219 = shl i32 %218, 1
  %220 = or i32 %16, %39
  %221 = or i32 %84, %100
  %222 = and i32 %43, %0
  %223 = xor i32 %41, %1
  %224 = and i32 %122, %46
  %225 = mul i32 %224, 30
  %226 = and i32 %11, %46
  %227 = and i32 %122, %0
  %228 = shl i32 %227, 3
  %229 = and i32 %11, %0
  %230 = and i32 %25, %46
  %231 = mul i32 %230, 19
  %232 = and i32 %25, %0
  %233 = mul i32 %38, -11
  %234 = add i32 %206, %25
  %235 = add i32 %234, %177
  %236 = add i32 %235, %117
  %237 = add i32 %236, %91
  %238 = add i32 %237, %53
  %239 = add i32 %238, %77
  %240 = add i32 %239, %135
  %241 = shl i32 %240, 1
  %242 = add i32 %41, %12
  %243 = add i32 %242, %112
  %244 = sub i32 %243, %155
  %245 = mul i32 %244, 3
  %246 = or i32 %78, %229
  %247 = sub i32 %246, %197
  %248 = mul i32 %247, 5
  %249 = sub i32 %1, %2
  %250 = add i32 %249, %65
  %251 = sub i32 %250, %22
  %252 = add i32 %251, %165
  %253 = add i32 %252, %85
  %254 = sub i32 %253, %21
  %255 = sub i32 %254, %23
  %256 = add i32 %255, %34
  %257 = add i32 %256, %68
  %258 = sub i32 %257, %86
  %259 = add i32 %258, %87
  %260 = add i32 %259, %98
  %261 = sub i32 %260, %17
  %262 = sub i32 %261, %115
  %263 = add i32 %262, %120
  %264 = sub i32 %263, %121
  %265 = add i32 %264, %123
  %266 = sub i32 %265, %128
  %267 = add i32 %266, %133
  %268 = sub i32 %267, %137
  %269 = add i32 %268, %82
  %270 = add i32 %269, %154
  %271 = sub i32 %270, %161
  %272 = sub i32 %271, %26
  %273 = add i32 %272, %166
  %274 = sub i32 %273, %168
  %275 = sub i32 %274, %24
  %276 = add i32 %275, %181
  %277 = add i32 %276, %51
  %278 = sub i32 %277, %191
  %279 = add i32 %278, %196
  %280 = add i32 %279, %199
  %281 = add i32 %280, %205
  %282 = sub i32 %281, %207
  %283 = sub i32 %282, %209
  %284 = sub i32 %283, %215
  %285 = add i32 %284, %13
  %286 = add i32 %285, %31
  %287 = add i32 %286, %35
  %288 = add i32 %287, %36
  %289 = add i32 %288, %42
  %290 = add i32 %289, %47
  %291 = sub i32 %290, %48
  %292 = sub i32 %291, %52
  %293 = add i32 %292, %57
  %294 = sub i32 %293, %63
  %295 = add i32 %294, %64
  %296 = add i32 %295, %67
  %297 = add i32 %296, %70
  %298 = sub i32 %297, %71
  %299 = add i32 %298, %74
  %300 = add i32 %299, %83
  %301 = sub i32 %300, %88
  %302 = add i32 %301, %90
  %303 = add i32 %302, %96
  %304 = add i32 %303, %99
  %305 = add i32 %304, %103
  %306 = add i32 %305, %104
  %307 = add i32 %306, %105
  %308 = add i32 %307, %108
  %309 = sub i32 %308, %109
  %310 = sub i32 %309, %110
  %311 = add i32 %310, %111
  %312 = sub i32 %311, %113
  %313 = add i32 %312, %18
  %314 = add i32 %313, %114
  %315 = sub i32 %314, %116
  %316 = add i32 %315, %118
  %317 = add i32 %316, %119
  %318 = sub i32 %317, %124
  %319 = add i32 %318, %125
  %320 = sub i32 %319, %129
  %321 = sub i32 %320, %132
  %322 = add i32 %321, %136
  %323 = sub i32 %322, %138
  %324 = add i32 %323, %139
  %325 = add i32 %324, %140
  %326 = add i32 %325, %142
  %327 = sub i32 %326, %145
  %328 = add i32 %327, %148
  %329 = add i32 %328, %149
  %330 = add i32 %329, %153
  %331 = add i32 %330, %156
  %332 = add i32 %331, %157
  %333 = add i32 %332, %159
  %334 = add i32 %333, %160
  %335 = add i32 %334, %162
  %336 = sub i32 %335, %163
  %337 = sub i32 %336, %164
  %338 = add i32 %337, %167
  %339 = sub i32 %338, %169
  %340 = sub i32 %339, %172
  %341 = add i32 %340, %173
  %342 = sub i32 %341, %92
  %343 = sub i32 %342, %174
  %344 = add i32 %343, %179
  %345 = sub i32 %344, %180
  %346 = add i32 %345, %39
  %347 = sub i32 %346, %182
  %348 = add i32 %347, %183
  %349 = add i32 %348, %184
  %350 = add i32 %349, %187
  %351 = sub i32 %350, %188
  %352 = sub i32 %351, %189
  %353 = add i32 %352, %190
  %354 = sub i32 %353, %198
  %355 = sub i32 %354, %200
  %356 = sub i32 %355, %201
  %357 = add i32 %356, %202
  %358 = sub i32 %357, %203
  %359 = sub i32 %358, %204
  %360 = sub i32 %359, %208
  %361 = add i32 %360, %79
  %362 = sub i32 %361, %210
  %363 = add i32 %362, %212
  %364 = sub i32 %363, %213
  %365 = sub i32 %364, %214
  %366 = add i32 %365, %216
  %367 = sub i32 %366, %217
  %368 = add i32 %367, %221
  %369 = add i32 %368, %222
  %370 = sub i32 %369, %223
  %371 = add i32 %370, %226
  %372 = add i32 %371, %232
  %373 = sub i32 %372, %20
  %374 = sub i32 %373, %29
  %375 = add i32 %374, %40
  %376 = sub i32 %375, %45
  %377 = sub i32 %376, %50
  %378 = sub i32 %377, %56
  %379 = sub i32 %378, %73
  %380 = sub i32 %379, %76
  %381 = sub i32 %380, %81
  %382 = sub i32 %381, %97
  %383 = sub i32 %382, %102
  %384 = sub i32 %383, %107
  %385 = add i32 %384, %126
  %386 = sub i32 %385, %131
  %387 = sub i32 %386, %144
  %388 = sub i32 %387, %147
  %389 = add i32 %388, %152
  %390 = sub i32 %389, %158
  %391 = sub i32 %390, %171
  %392 = add i32 %391, %176
  %393 = sub i32 %392, %178
  %394 = sub i32 %393, %186
  %395 = add i32 %394, %193
  %396 = sub i32 %395, %195
  %397 = sub i32 %396, %211
  %398 = sub i32 %397, %219
  %399 = add i32 %398, %220
  %400 = add i32 %399, %225
  %401 = add i32 %400, %228
  %402 = add i32 %401, %231
  %403 = add i32 %402, %233
  %404 = sub i32 %403, %61
  %405 = sub i32 %404, %95
  %406 = add i32 %405, %248
  %407 = add i32 %406, %245
  %408 = add i32 %407, %241
  %409 = icmp eq i32 %9, %408
  %410 = select i1 %409, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %411 = tail call i32 @puts(i8* nonnull dereferenceable(1) %410)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
