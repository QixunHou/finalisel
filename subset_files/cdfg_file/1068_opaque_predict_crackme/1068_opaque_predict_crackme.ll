; ModuleID = '../.././c_source_file/1068_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1068_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = add i32 %4, 1
  %8 = and i32 %2, %0
  %9 = xor i32 %1, -1
  %10 = or i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = or i32 %8, %11
  %13 = xor i32 %8, %10
  %14 = add i32 %7, %12
  %15 = sub i32 %14, %13
  %16 = add i32 %15, %6
  %17 = and i32 %4, %3
  %18 = shl i32 %6, 1
  %19 = xor i32 %4, -1
  %20 = or i32 %19, %3
  %21 = shl i32 %20, 1
  %22 = and i32 %19, %3
  %23 = shl i32 %22, 1
  %24 = xor i32 %23, -2
  %25 = xor i32 %20, -1
  %26 = or i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %9
  %29 = or i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %1, %0
  %32 = xor i32 %2, -1
  %33 = or i32 %32, %1
  %34 = xor i32 %33, -1
  %35 = or i32 %31, %34
  %36 = and i32 %2, %1
  %37 = xor i32 %2, %0
  %38 = and i32 %37, %29
  %39 = shl i32 %38, 1
  %40 = and i32 %9, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %41
  %45 = xor i32 %0, -1
  %46 = and i32 %32, %1
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %45
  %49 = and i32 %36, %0
  %50 = and i32 %42, %45
  %51 = or i32 %49, %50
  %52 = and i32 %9, %2
  %53 = and i32 %52, %0
  %54 = or i32 %9, %2
  %55 = and i32 %54, %45
  %56 = xor i32 %53, -1
  %57 = xor i32 %55, %56
  %58 = or i32 %2, %1
  %59 = and i32 %58, %0
  %60 = or i32 %47, %0
  %61 = or i32 %32, %30
  %62 = xor i32 %1, %0
  %63 = and i32 %37, %62
  %64 = xor i32 %8, %29
  %65 = xor i32 %11, %2
  %66 = or i32 %32, %0
  %67 = and i32 %66, %9
  %68 = shl i32 %67, 1
  %69 = and i32 %32, %0
  %70 = xor i32 %37, -1
  %71 = or i32 %70, %9
  %72 = xor i32 %62, -1
  %73 = and i32 %26, %72
  %74 = and i32 %52, %45
  %75 = or i32 %42, %45
  %76 = xor i32 %74, %75
  %77 = or i32 %40, %43
  %78 = and i32 %72, %2
  %79 = and i32 %36, %45
  %80 = and i32 %42, %0
  %81 = or i32 %79, %80
  %82 = xor i32 %54, %45
  %83 = xor i32 %82, %53
  %84 = or i32 %37, %9
  %85 = xor i32 %66, %31
  %86 = xor i32 %69, -1
  %87 = and i32 %86, %72
  %88 = or i32 %42, %0
  %89 = xor i32 %53, %88
  %90 = xor i32 %66, -1
  %91 = or i32 %90, %1
  %92 = xor i32 %80, 2147483647
  %93 = xor i32 %92, %79
  %94 = shl i32 %93, 1
  %95 = or i32 %72, %2
  %96 = xor i32 %69, %1
  %97 = or i32 %31, %70
  %98 = or i32 %53, %55
  %99 = and i32 %26, %9
  %100 = or i32 %8, %72
  %101 = and i32 %70, %1
  %102 = or i32 %8, %30
  %103 = shl i32 %102, 1
  %104 = xor i32 %36, -1
  %105 = xor i32 %40, %104
  %106 = or i32 %69, %1
  %107 = and i32 %70, %41
  %108 = shl i32 %107, 1
  %109 = xor i32 %8, -1
  %110 = and i32 %62, %109
  %111 = or i32 %43, %0
  %112 = and i32 %86, %9
  %113 = xor i32 %8, %47
  %114 = or i32 %90, %72
  %115 = and i32 %42, %10
  %116 = shl i32 %115, 1
  %117 = and i32 %29, %43
  %118 = and i32 %42, %41
  %119 = xor i32 %49, -1
  %120 = xor i32 %50, %119
  %121 = xor i32 %31, -1
  %122 = and i32 %70, %121
  %123 = xor i32 %121, %2
  %124 = and i32 %43, %45
  %125 = and i32 %104, %0
  %126 = and i32 %37, %72
  %127 = shl i32 %47, 1
  %128 = and i32 %109, %9
  %129 = and i32 %26, %62
  %130 = and i32 %10, %32
  %131 = or i32 %8, %9
  %132 = shl i32 %131, 1
  %133 = and i32 %109, %1
  %134 = and i32 %58, %45
  %135 = and i32 %32, %121
  %136 = shl i32 %66, 1
  %137 = or i32 %69, %9
  %138 = xor i32 %109, %1
  %139 = or i32 %33, %0
  %140 = shl i32 %139, 1
  %141 = or i32 %31, %2
  %142 = xor i32 %58, -1
  %143 = or i32 %8, %142
  %144 = or i32 %34, %45
  %145 = xor i32 %42, %0
  %146 = or i32 %53, %145
  %147 = xor i32 %30, %2
  %148 = or i32 %30, %2
  %149 = or i32 %79, %59
  %150 = or i32 %70, %30
  %151 = or i32 %37, %72
  %152 = shl i32 %151, 1
  %153 = xor i32 %8, %1
  %154 = add i32 %37, 1
  %155 = and i32 %32, %72
  %156 = shl i32 %155, 1
  %157 = or i32 %43, %45
  %158 = or i32 %33, %45
  %159 = or i32 %62, %2
  %160 = and i32 %29, %70
  %161 = xor i32 %47, %0
  %162 = shl i32 %161, 1
  %163 = and i32 %62, %2
  %164 = xor i32 %27, %1
  %165 = or i32 %36, %45
  %166 = shl i32 %165, 2
  %167 = and i32 %70, %72
  %168 = or i32 %11, %2
  %169 = or i32 %42, %40
  %170 = or i32 %70, %72
  %171 = and i32 %43, %0
  %172 = or i32 %37, %62
  %173 = xor i32 %75, -1
  %174 = or i32 %74, %173
  %175 = or i32 %69, %72
  %176 = or i32 %8, %62
  %177 = and i32 %104, %45
  %178 = or i32 %46, %40
  %179 = or i32 %70, %1
  %180 = or i32 %37, %30
  %181 = and i32 %62, %32
  %182 = shl i32 %181, 1
  %183 = xor i32 %145, 2147483647
  %184 = xor i32 %183, %53
  %185 = shl i32 %184, 1
  %186 = and i32 %47, %0
  %187 = or i32 %37, %40
  %188 = shl i32 %0, 1
  %189 = xor i32 %86, %1
  %190 = and i32 %54, %0
  %191 = or i32 %74, %190
  %192 = or i32 %58, %0
  %193 = and i32 %62, %70
  %194 = or i32 %46, %0
  %195 = and i32 %29, %2
  %196 = and i32 %32, %41
  %197 = or i32 %32, %72
  %198 = xor i32 %29, %2
  %199 = and i32 %109, %72
  %200 = shl i32 %199, 1
  %201 = or i32 %27, %72
  %202 = xor i32 %134, %119
  %203 = or i32 %62, %32
  %204 = or i32 %90, %9
  %205 = and i32 %10, %43
  %206 = and i32 %62, %86
  %207 = or i32 %43, %11
  %208 = xor i32 %69, %104
  %209 = or i32 %43, %30
  %210 = or i32 %58, %45
  %211 = and i32 %29, %32
  %212 = and i32 %41, %2
  %213 = or i32 %49, %134
  %214 = or i32 %104, %0
  %215 = and i32 %142, %45
  %216 = mul i32 %215, 15
  %217 = and i32 %46, %45
  %218 = mul i32 %217, -21
  %219 = and i32 %142, %0
  %220 = and i32 %46, %0
  %221 = shl i32 %220, 3
  %222 = and i32 %34, %45
  %223 = mul i32 %222, -14
  %224 = shl i32 %79, 2
  %225 = and i32 %34, %0
  %226 = add i32 %78, %159
  %227 = add i32 %226, %34
  %228 = add i32 %227, %69
  %229 = add i32 %228, %206
  %230 = add i32 %229, %145
  %231 = add i32 %230, %100
  %232 = add i32 %231, %64
  %233 = add i32 %232, %89
  %234 = add i32 %233, %191
  %235 = shl i32 %234, 1
  %236 = add i32 %208, %219
  %237 = add i32 %236, %187
  %238 = add i32 %237, %76
  %239 = shl i32 %238, 2
  %240 = sub i32 %193, %178
  %241 = add i32 %240, %157
  %242 = sub i32 %241, %113
  %243 = mul i32 %242, 5
  %244 = add i32 %49, %144
  %245 = add i32 %244, %143
  %246 = add i32 %245, %48
  %247 = mul i32 %246, 3
  %248 = sub i32 %22, %225
  %249 = mul i32 %248, 6
  %250 = sub i32 %1, %188
  %251 = add i32 %250, %30
  %252 = add i32 %251, %32
  %253 = add i32 %252, %121
  %254 = sub i32 %253, %40
  %255 = sub i32 %254, %3
  %256 = sub i32 %255, %36
  %257 = sub i32 %256, %61
  %258 = add i32 %257, %65
  %259 = add i32 %258, %95
  %260 = add i32 %259, %86
  %261 = sub i32 %260, %123
  %262 = sub i32 %261, %130
  %263 = sub i32 %262, %135
  %264 = sub i32 %263, %141
  %265 = add i32 %264, %58
  %266 = sub i32 %265, %147
  %267 = sub i32 %266, %148
  %268 = add i32 %267, %154
  %269 = add i32 %268, %27
  %270 = add i32 %269, %163
  %271 = add i32 %270, %168
  %272 = sub i32 %271, %195
  %273 = add i32 %272, %196
  %274 = add i32 %273, %197
  %275 = add i32 %274, %198
  %276 = sub i32 %275, %203
  %277 = add i32 %276, %42
  %278 = add i32 %277, %37
  %279 = add i32 %278, %211
  %280 = sub i32 %279, %212
  %281 = add i32 %280, %7
  %282 = add i32 %281, %28
  %283 = add i32 %282, %35
  %284 = sub i32 %283, %44
  %285 = sub i32 %284, %59
  %286 = add i32 %285, %60
  %287 = add i32 %286, %63
  %288 = sub i32 %287, %71
  %289 = add i32 %288, %73
  %290 = sub i32 %289, %77
  %291 = sub i32 %290, %84
  %292 = sub i32 %291, %85
  %293 = add i32 %292, %87
  %294 = add i32 %293, %91
  %295 = add i32 %294, %96
  %296 = sub i32 %295, %97
  %297 = add i32 %296, %99
  %298 = add i32 %297, %101
  %299 = add i32 %298, %105
  %300 = add i32 %299, %106
  %301 = sub i32 %300, %88
  %302 = add i32 %301, %110
  %303 = sub i32 %302, %111
  %304 = sub i32 %303, %112
  %305 = add i32 %304, %114
  %306 = add i32 %305, %117
  %307 = sub i32 %306, %118
  %308 = sub i32 %307, %122
  %309 = sub i32 %308, %124
  %310 = sub i32 %309, %125
  %311 = sub i32 %310, %126
  %312 = sub i32 %311, %127
  %313 = sub i32 %312, %75
  %314 = add i32 %313, %128
  %315 = add i32 %314, %129
  %316 = add i32 %315, %133
  %317 = add i32 %316, %134
  %318 = sub i32 %317, %136
  %319 = sub i32 %318, %137
  %320 = sub i32 %319, %138
  %321 = add i32 %320, %150
  %322 = sub i32 %321, %153
  %323 = sub i32 %322, %156
  %324 = sub i32 %323, %158
  %325 = sub i32 %324, %160
  %326 = add i32 %325, %164
  %327 = sub i32 %326, %167
  %328 = sub i32 %327, %169
  %329 = sub i32 %328, %170
  %330 = sub i32 %329, %171
  %331 = sub i32 %330, %172
  %332 = sub i32 %331, %175
  %333 = add i32 %332, %176
  %334 = add i32 %333, %177
  %335 = add i32 %334, %179
  %336 = sub i32 %335, %180
  %337 = sub i32 %336, %182
  %338 = sub i32 %337, %186
  %339 = add i32 %338, %189
  %340 = sub i32 %339, %192
  %341 = sub i32 %340, %194
  %342 = sub i32 %341, %201
  %343 = sub i32 %342, %204
  %344 = add i32 %343, %205
  %345 = sub i32 %344, %207
  %346 = sub i32 %345, %209
  %347 = add i32 %346, %210
  %348 = add i32 %347, %214
  %349 = add i32 %348, %17
  %350 = add i32 %349, %25
  %351 = sub i32 %350, %39
  %352 = sub i32 %351, %51
  %353 = add i32 %352, %57
  %354 = sub i32 %353, %68
  %355 = sub i32 %354, %81
  %356 = add i32 %355, %83
  %357 = add i32 %356, %98
  %358 = sub i32 %357, %103
  %359 = sub i32 %358, %108
  %360 = sub i32 %359, %116
  %361 = add i32 %360, %120
  %362 = sub i32 %361, %132
  %363 = sub i32 %362, %140
  %364 = add i32 %363, %146
  %365 = sub i32 %364, %149
  %366 = sub i32 %365, %152
  %367 = sub i32 %366, %162
  %368 = sub i32 %367, %166
  %369 = add i32 %368, %174
  %370 = sub i32 %369, %200
  %371 = add i32 %370, %202
  %372 = sub i32 %371, %213
  %373 = add i32 %372, %216
  %374 = add i32 %373, %218
  %375 = add i32 %374, %221
  %376 = add i32 %375, %223
  %377 = sub i32 %376, %224
  %378 = sub i32 %377, %18
  %379 = sub i32 %378, %21
  %380 = add i32 %379, %24
  %381 = sub i32 %380, %94
  %382 = sub i32 %381, %185
  %383 = add i32 %382, %249
  %384 = add i32 %383, %243
  %385 = add i32 %384, %247
  %386 = add i32 %385, %239
  %387 = add i32 %386, %235
  %388 = icmp eq i32 %16, %387
  %389 = select i1 %388, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %390 = tail call i32 @puts(i8* nonnull dereferenceable(1) %389)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
