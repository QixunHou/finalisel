; ModuleID = '../.././c_source_file/1888_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1888_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = xor i32 %2, %1
  %8 = and i32 %7, %0
  %9 = sub i32 %6, %8
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %0
  %12 = xor i32 %2, -1
  %13 = and i32 %12, %1
  %14 = or i32 %13, %11
  %15 = shl i32 %14, 1
  %16 = add i32 %9, %15
  %17 = xor i32 %4, -1
  %18 = xor i32 %4, %3
  %19 = and i32 %17, %3
  %20 = and i32 %4, %3
  %21 = and i32 %2, %0
  %22 = or i32 %1, %0
  %23 = xor i32 %21, %22
  %24 = or i32 %2, %0
  %25 = and i32 %24, %1
  %26 = xor i32 %11, -1
  %27 = and i32 %7, %26
  %28 = or i32 %12, %0
  %29 = or i32 %10, %0
  %30 = and i32 %29, %12
  %31 = shl i32 %30, 1
  %32 = xor i32 %0, -1
  %33 = or i32 %13, %32
  %34 = and i32 %22, %2
  %35 = xor i32 %1, %0
  %36 = xor i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %35, %37
  %39 = xor i32 %35, -1
  %40 = or i32 %36, %39
  %41 = and i32 %10, %2
  %42 = and i32 %41, %0
  %43 = or i32 %7, %0
  %44 = xor i32 %42, %43
  %45 = xor i32 %7, -1
  %46 = or i32 %45, %32
  %47 = xor i32 %29, -1
  %48 = or i32 %7, %47
  %49 = shl i32 %1, 1
  %50 = and i32 %12, %0
  %51 = or i32 %12, %1
  %52 = xor i32 %50, %51
  %53 = and i32 %36, %35
  %54 = and i32 %2, %1
  %55 = and i32 %54, %32
  %56 = or i32 %55, %8
  %57 = xor i32 %13, -1
  %58 = xor i32 %11, %57
  %59 = shl i32 %58, 1
  %60 = and i32 %54, %0
  %61 = or i32 %2, %1
  %62 = and i32 %61, %32
  %63 = or i32 %60, %62
  %64 = xor i32 %28, -1
  %65 = or i32 %64, %39
  %66 = or i32 %51, %0
  %67 = or i32 %39, %2
  %68 = shl i32 %67, 1
  %69 = or i32 %45, %0
  %70 = and i32 %1, %0
  %71 = xor i32 %24, %70
  %72 = xor i32 %22, -1
  %73 = xor i32 %72, %2
  %74 = or i32 %36, %11
  %75 = and i32 %22, %45
  %76 = shl i32 %75, 1
  %77 = or i32 %54, %0
  %78 = shl i32 %77, 1
  %79 = and i32 %28, %10
  %80 = or i32 %50, %39
  %81 = xor i32 %55, -1
  %82 = xor i32 %8, %81
  %83 = or i32 %12, %47
  %84 = and i32 %45, %26
  %85 = xor i32 %54, %0
  %86 = xor i32 %61, %0
  %87 = xor i32 %86, 2147483647
  %88 = xor i32 %87, %60
  %89 = xor i32 %54, -1
  %90 = and i32 %89, %0
  %91 = and i32 %36, %10
  %92 = xor i32 %26, %2
  %93 = or i32 %70, %45
  %94 = and i32 %89, %32
  %95 = and i32 %45, %32
  %96 = xor i32 %70, -1
  %97 = xor i32 %96, %2
  %98 = shl i32 %97, 2
  %99 = and i32 %36, %39
  %100 = xor i32 %50, %1
  %101 = xor i32 %47, %2
  %102 = or i32 %60, %86
  %103 = add i32 %2, 1
  %104 = and i32 %45, %0
  %105 = xor i32 %24, -1
  %106 = or i32 %105, %39
  %107 = and i32 %51, %32
  %108 = xor i32 %61, -1
  %109 = xor i32 %108, %0
  %110 = shl i32 %109, 1
  %111 = xor i32 %28, %1
  %112 = and i32 %41, %32
  %113 = or i32 %10, %2
  %114 = and i32 %113, %0
  %115 = xor i32 %114, -1
  %116 = xor i32 %112, %115
  %117 = or i32 %36, %72
  %118 = xor i32 %51, -1
  %119 = or i32 %118, %0
  %120 = and i32 %35, %37
  %121 = or i32 %11, %37
  %122 = or i32 %89, %0
  %123 = xor i32 %11, %2
  %124 = and i32 %24, %35
  %125 = and i32 %7, %32
  %126 = or i32 %54, %32
  %127 = or i32 %36, %10
  %128 = or i32 %57, %32
  %129 = xor i32 %57, %0
  %130 = shl i32 %129, 1
  %131 = add i32 %36, 1
  %132 = add i32 %28, 1
  %133 = or i32 %70, %105
  %134 = or i32 %37, %39
  %135 = and i32 %29, %2
  %136 = shl i32 %135, 1
  %137 = or i32 %61, %0
  %138 = and i32 %37, %39
  %139 = xor i32 %21, %29
  %140 = xor i32 %50, -1
  %141 = and i32 %140, %1
  %142 = shl i32 %141, 1
  %143 = or i32 %36, %35
  %144 = and i32 %36, %29
  %145 = shl i32 %144, 1
  %146 = and i32 %39, %2
  %147 = and i32 %35, %2
  %148 = or i32 %118, %32
  %149 = and i32 %29, %45
  %150 = and i32 %22, %37
  %151 = shl i32 %150, 1
  %152 = and i32 %7, %22
  %153 = xor i32 %60, -1
  %154 = xor i32 %125, %153
  %155 = and i32 %22, %12
  %156 = xor i32 %51, %0
  %157 = xor i32 %113, %0
  %158 = xor i32 %42, -1
  %159 = xor i32 %157, %158
  %160 = or i32 %21, %10
  %161 = xor i32 %70, %2
  %162 = and i32 %140, %39
  %163 = or i32 %35, %12
  %164 = xor i32 %21, -1
  %165 = add i32 %21, 1
  %166 = or i32 %11, %12
  %167 = xor i32 %43, -1
  %168 = or i32 %42, %167
  %169 = or i32 %12, %39
  %170 = and i32 %164, %1
  %171 = or i32 %70, %118
  %172 = xor i32 %105, %1
  %173 = xor i32 %61, %70
  %174 = shl i32 %173, 1
  %175 = xor i32 %7, %0
  %176 = xor i32 %175, -1
  %177 = or i32 %60, %176
  %178 = or i32 %11, %2
  %179 = xor i32 %140, %1
  %180 = or i32 %42, %175
  %181 = or i32 %37, %72
  %182 = or i32 %70, %37
  %183 = add i32 %29, 1
  %184 = and i32 %113, %32
  %185 = or i32 %42, %184
  %186 = add i32 %50, 1
  %187 = or i32 %112, %104
  %188 = or i32 %108, %0
  %189 = or i32 %105, %1
  %190 = and i32 %35, %140
  %191 = and i32 %96, %2
  %192 = and i32 %45, %96
  %193 = and i32 %164, %39
  %194 = and i32 %12, %39
  %195 = shl i32 %194, 1
  %196 = and i32 %35, %164
  %197 = and i32 %37, %96
  %198 = or i32 %37, %1
  %199 = or i32 %12, %72
  %200 = or i32 %50, %1
  %201 = xor i32 %184, %158
  %202 = or i32 %57, %0
  %203 = xor i32 %29, %2
  %204 = or i32 %61, %32
  %205 = or i32 %108, %32
  %206 = and i32 %28, %1
  %207 = xor i32 %11, %89
  %208 = and i32 %36, %22
  %209 = or i32 %36, %47
  %210 = and i32 %51, %0
  %211 = shl i32 %210, 2
  %212 = or i32 %70, %64
  %213 = and i32 %36, %1
  %214 = or i32 %70, %12
  %215 = xor i32 %89, %0
  %216 = and i32 %61, %0
  %217 = or i32 %55, %216
  %218 = xor i32 %45, %0
  %219 = and i32 %24, %39
  %220 = or i32 %45, %72
  %221 = or i32 %64, %10
  %222 = and i32 %26, %2
  %223 = and i32 %12, %96
  %224 = and i32 %37, %10
  %225 = shl i32 %224, 1
  %226 = and i32 %24, %10
  %227 = or i32 %21, %72
  %228 = or i32 %35, %64
  %229 = and i32 %36, %96
  %230 = shl i32 %29, 2
  %231 = or i32 %70, %108
  %232 = or i32 %54, %11
  %233 = xor i32 %42, %176
  %234 = or i32 %47, %2
  %235 = xor i32 %24, %1
  %236 = or i32 %35, %2
  %237 = xor i32 %62, %153
  %238 = xor i32 %216, %81
  %239 = and i32 %37, %1
  %240 = or i32 %50, %35
  %241 = or i32 %51, %32
  %242 = shl i32 %241, 1
  %243 = or i32 %35, %105
  %244 = or i32 %72, %2
  %245 = xor i32 %60, %175
  %246 = or i32 %36, %70
  %247 = shl i32 %246, 1
  %248 = or i32 %112, %114
  %249 = xor i32 %13, %0
  %250 = or i32 %89, %32
  %251 = or i32 %60, %125
  %252 = or i32 %42, %157
  %253 = and i32 %12, %26
  %254 = and i32 %29, %37
  %255 = shl i32 %62, 1
  %256 = or i32 %37, %10
  %257 = or i32 %50, %10
  %258 = and i32 %28, %35
  %259 = xor i32 %51, %70
  %260 = or i32 %21, %35
  %261 = and i32 %7, %96
  %262 = or i32 %21, %47
  %263 = xor i32 %22, %2
  %264 = or i32 %7, %72
  %265 = or i32 %70, %2
  %266 = shl i32 %265, 1
  %267 = and i32 %108, %32
  %268 = and i32 %13, %32
  %269 = and i32 %108, %0
  %270 = and i32 %13, %0
  %271 = and i32 %118, %32
  %272 = mul i32 %271, 11
  %273 = shl i32 %55, 3
  %274 = and i32 %118, %0
  %275 = shl i32 %274, 4
  %276 = mul i32 %60, 13
  %277 = add i32 %72, %39
  %278 = add i32 %277, %263
  %279 = add i32 %278, %236
  %280 = add i32 %279, %61
  %281 = add i32 %280, %161
  %282 = add i32 %281, %123
  %283 = add i32 %282, %231
  %284 = add i32 %283, %228
  %285 = add i32 %284, %218
  %286 = add i32 %285, %200
  %287 = add i32 %286, %189
  %288 = add i32 %287, %71
  %289 = add i32 %288, %23
  %290 = add i32 %289, %185
  %291 = add i32 %290, %88
  %292 = shl i32 %291, 1
  %293 = add i32 %253, %89
  %294 = sub i32 %293, %267
  %295 = sub i32 %294, %213
  %296 = sub i32 %295, %205
  %297 = add i32 %296, %192
  %298 = add i32 %297, %20
  %299 = sub i32 %298, %248
  %300 = mul i32 %299, 3
  %301 = sub i32 %260, %269
  %302 = add i32 %301, %90
  %303 = mul i32 %302, 5
  %304 = add i32 %193, 1073741823
  %305 = add i32 %304, %270
  %306 = shl i32 %305, 2
  %307 = sub i32 1, %0
  %308 = add i32 %307, %10
  %309 = sub i32 %308, %49
  %310 = add i32 %309, %96
  %311 = add i32 %310, %103
  %312 = add i32 %311, %2
  %313 = add i32 %312, %183
  %314 = add i32 %313, %35
  %315 = sub i32 %314, %22
  %316 = sub i32 %315, %3
  %317 = add i32 %316, %28
  %318 = add i32 %317, %34
  %319 = add i32 %318, %45
  %320 = add i32 %319, %73
  %321 = add i32 %320, %83
  %322 = sub i32 %321, %92
  %323 = sub i32 %322, %101
  %324 = add i32 %323, %131
  %325 = add i32 %324, %132
  %326 = add i32 %325, %105
  %327 = sub i32 %326, %146
  %328 = sub i32 %327, %147
  %329 = add i32 %328, %108
  %330 = sub i32 %329, %54
  %331 = sub i32 %330, %50
  %332 = sub i32 %331, %155
  %333 = sub i32 %332, %163
  %334 = add i32 %333, %165
  %335 = add i32 %334, %166
  %336 = sub i32 %335, %169
  %337 = add i32 %336, %36
  %338 = add i32 %337, %178
  %339 = add i32 %338, %186
  %340 = sub i32 %339, %191
  %341 = add i32 %340, %199
  %342 = sub i32 %341, %203
  %343 = sub i32 %342, %214
  %344 = sub i32 %343, %222
  %345 = sub i32 %344, %223
  %346 = sub i32 %345, %7
  %347 = sub i32 %346, %230
  %348 = sub i32 %347, %234
  %349 = add i32 %348, %244
  %350 = sub i32 %349, %21
  %351 = sub i32 %350, %4
  %352 = add i32 %351, %25
  %353 = sub i32 %352, %27
  %354 = sub i32 %353, %31
  %355 = add i32 %354, %33
  %356 = add i32 %355, %38
  %357 = sub i32 %356, %40
  %358 = add i32 %357, %46
  %359 = sub i32 %358, %48
  %360 = sub i32 %359, %52
  %361 = sub i32 %360, %53
  %362 = sub i32 %361, %65
  %363 = add i32 %362, %66
  %364 = sub i32 %363, %68
  %365 = add i32 %364, %69
  %366 = add i32 %365, %74
  %367 = add i32 %366, %79
  %368 = sub i32 %367, %80
  %369 = add i32 %368, %84
  %370 = sub i32 %369, %85
  %371 = sub i32 %370, %91
  %372 = sub i32 %371, %93
  %373 = sub i32 %372, %94
  %374 = sub i32 %373, %95
  %375 = sub i32 %374, %98
  %376 = sub i32 %375, %99
  %377 = add i32 %376, %100
  %378 = add i32 %377, %104
  %379 = add i32 %378, %106
  %380 = add i32 %379, %107
  %381 = add i32 %380, %111
  %382 = sub i32 %381, %117
  %383 = add i32 %382, %119
  %384 = add i32 %383, %120
  %385 = sub i32 %384, %121
  %386 = sub i32 %385, %122
  %387 = add i32 %386, %124
  %388 = add i32 %387, %125
  %389 = sub i32 %388, %126
  %390 = sub i32 %389, %127
  %391 = add i32 %390, %128
  %392 = sub i32 %391, %133
  %393 = add i32 %392, %134
  %394 = sub i32 %393, %136
  %395 = sub i32 %394, %137
  %396 = sub i32 %395, %138
  %397 = sub i32 %396, %139
  %398 = add i32 %397, %143
  %399 = sub i32 %398, %148
  %400 = add i32 %399, %149
  %401 = sub i32 %400, %152
  %402 = sub i32 %401, %156
  %403 = add i32 %402, %160
  %404 = sub i32 %403, %162
  %405 = add i32 %404, %170
  %406 = add i32 %405, %171
  %407 = add i32 %406, %172
  %408 = sub i32 %407, %179
  %409 = sub i32 %408, %181
  %410 = add i32 %409, %182
  %411 = sub i32 %410, %188
  %412 = add i32 %411, %190
  %413 = sub i32 %412, %195
  %414 = add i32 %413, %196
  %415 = add i32 %414, %197
  %416 = add i32 %415, %198
  %417 = sub i32 %416, %86
  %418 = add i32 %417, %202
  %419 = add i32 %418, %204
  %420 = add i32 %419, %206
  %421 = sub i32 %420, %207
  %422 = add i32 %421, %208
  %423 = sub i32 %422, %209
  %424 = sub i32 %423, %212
  %425 = add i32 %424, %215
  %426 = add i32 %425, %219
  %427 = add i32 %426, %220
  %428 = sub i32 %427, %221
  %429 = add i32 %428, %226
  %430 = add i32 %429, %227
  %431 = sub i32 %430, %229
  %432 = add i32 %431, %232
  %433 = sub i32 %432, %235
  %434 = sub i32 %433, %43
  %435 = sub i32 %434, %239
  %436 = sub i32 %435, %240
  %437 = sub i32 %436, %243
  %438 = add i32 %437, %249
  %439 = add i32 %438, %250
  %440 = sub i32 %439, %254
  %441 = add i32 %440, %256
  %442 = add i32 %441, %257
  %443 = sub i32 %442, %258
  %444 = add i32 %443, %259
  %445 = add i32 %444, %261
  %446 = sub i32 %445, %262
  %447 = sub i32 %446, %264
  %448 = sub i32 %447, %266
  %449 = sub i32 %448, %268
  %450 = add i32 %449, %18
  %451 = add i32 %450, %19
  %452 = sub i32 %451, %44
  %453 = add i32 %452, %56
  %454 = sub i32 %453, %59
  %455 = sub i32 %454, %63
  %456 = sub i32 %455, %76
  %457 = sub i32 %456, %78
  %458 = sub i32 %457, %82
  %459 = add i32 %458, %102
  %460 = sub i32 %459, %110
  %461 = add i32 %460, %116
  %462 = sub i32 %461, %130
  %463 = sub i32 %462, %142
  %464 = sub i32 %463, %145
  %465 = sub i32 %464, %151
  %466 = add i32 %465, %154
  %467 = sub i32 %466, %159
  %468 = add i32 %467, %168
  %469 = sub i32 %468, %174
  %470 = sub i32 %469, %177
  %471 = add i32 %470, %180
  %472 = sub i32 %471, %187
  %473 = add i32 %472, %201
  %474 = sub i32 %473, %211
  %475 = add i32 %474, %217
  %476 = sub i32 %475, %225
  %477 = sub i32 %476, %233
  %478 = sub i32 %477, %237
  %479 = sub i32 %478, %238
  %480 = sub i32 %479, %242
  %481 = sub i32 %480, %245
  %482 = sub i32 %481, %247
  %483 = add i32 %482, %251
  %484 = sub i32 %483, %252
  %485 = sub i32 %484, %255
  %486 = add i32 %485, %272
  %487 = sub i32 %486, %273
  %488 = sub i32 %487, %275
  %489 = add i32 %488, %276
  %490 = add i32 %489, %303
  %491 = add i32 %490, %306
  %492 = add i32 %491, %300
  %493 = add i32 %492, %292
  %494 = icmp eq i32 %16, %493
  %495 = select i1 %494, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %496 = tail call i32 @puts(i8* nonnull dereferenceable(1) %495)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
