digraph "DFG for'main' function" {
	Node0x908478[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x9084f8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x908588[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x9085e8[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x908698[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x908ac8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x908ba8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x908ca8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x908d68[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x908e18[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x908ed8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x908f88[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x903930[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x909188[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x90a0f8[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x90a768[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x90a7c8[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x90a840[shape=record, label="  %14 = xor i32 %12, -1"];
	Node0x90a8b0[shape=record, label="  %15 = or i32 %11, %14"];
	Node0x90a920[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x90a990[shape=record, label="  %17 = xor i32 %11, -1"];
	Node0x90aa00[shape=record, label="  %18 = and i32 %11, %14"];
	Node0x90aa70[shape=record, label="  %19 = xor i32 %12, %11"];
	Node0x90aae0[shape=record, label="  %20 = and i32 %12, %11"];
	Node0x90ab50[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x90abc0[shape=record, label="  %22 = shl i32 %14, 1"];
	Node0x90ac30[shape=record, label="  %23 = shl i32 %18, 2"];
	Node0x90aca0[shape=record, label="  %24 = xor i32 %10, -1"];
	Node0x90ad10[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x90ad80[shape=record, label="  %26 = xor i32 %13, %10"];
	Node0x90adf0[shape=record, label="  %27 = or i32 %13, %24"];
	Node0x90ae60[shape=record, label="  %28 = sub i32 %27, %19"];
	Node0x90aed0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x90af40[shape=record, label="  %30 = sub i32 %17, %10"];
	Node0x90afb0[shape=record, label="  %31 = sub i32 %30, %11"];
	Node0x90b020[shape=record, label="  %32 = sub i32 %31, %25"];
	Node0x90b090[shape=record, label="  %33 = add i32 %32, %12"];
	Node0x90b100[shape=record, label="  %34 = add i32 %33, %18"];
	Node0x90b170[shape=record, label="  %35 = sub i32 %34, %19"];
	Node0x90b1e0[shape=record, label="  %36 = add i32 %35, %21"];
	Node0x90b250[shape=record, label="  %37 = sub i32 %36, %22"];
	Node0x90b2c0[shape=record, label="  %38 = add i32 %37, %15"];
	Node0x90b330[shape=record, label="  %39 = add i32 %38, %23"];
	Node0x90b3a0[shape=record, label="  %40 = add i32 %39, %26"];
	Node0x90b410[shape=record, label="  %41 = add i32 %40, %29"];
	Node0x90b480[shape=record, label="  %42 = icmp eq i32 %16, %41"];
	Node0x8a88b8[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x90b510[shape=record, label="  %44 = call i32 @puts(i8* nonnull dereferenceable(1) %43) #5"];
	Node0x90b7b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x90b918[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x90ba28[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x90bb38[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x90bbf8[shape=record, label="  ret i32 0"];
	Node0x908478 -> Node0x9084f8;
	Node0x9084f8 -> Node0x908588;
	Node0x908588 -> Node0x9085e8;
	Node0x9085e8 -> Node0x908698;
	Node0x908698 -> Node0x908ac8;
	Node0x908ac8 -> Node0x908ba8;
	Node0x908ba8 -> Node0x908ca8;
	Node0x908ca8 -> Node0x908d68;
	Node0x908d68 -> Node0x908e18;
	Node0x908e18 -> Node0x908ed8;
	Node0x908ed8 -> Node0x908f88;
	Node0x908f88 -> Node0x903930;
	Node0x903930 -> Node0x909188;
	Node0x909188 -> Node0x90a0f8;
	Node0x90a0f8 -> Node0x90a768;
	Node0x90a768 -> Node0x90a7c8;
	Node0x90a7c8 -> Node0x90a840;
	Node0x90a840 -> Node0x90a8b0;
	Node0x90a8b0 -> Node0x90a920;
	Node0x90a920 -> Node0x90a990;
	Node0x90a990 -> Node0x90aa00;
	Node0x90aa00 -> Node0x90aa70;
	Node0x90aa70 -> Node0x90aae0;
	Node0x90aae0 -> Node0x90ab50;
	Node0x90ab50 -> Node0x90abc0;
	Node0x90abc0 -> Node0x90ac30;
	Node0x90ac30 -> Node0x90aca0;
	Node0x90aca0 -> Node0x90ad10;
	Node0x90ad10 -> Node0x90ad80;
	Node0x90ad80 -> Node0x90adf0;
	Node0x90adf0 -> Node0x90ae60;
	Node0x90ae60 -> Node0x90aed0;
	Node0x90aed0 -> Node0x90af40;
	Node0x90af40 -> Node0x90afb0;
	Node0x90afb0 -> Node0x90b020;
	Node0x90b020 -> Node0x90b090;
	Node0x90b090 -> Node0x90b100;
	Node0x90b100 -> Node0x90b170;
	Node0x90b170 -> Node0x90b1e0;
	Node0x90b1e0 -> Node0x90b250;
	Node0x90b250 -> Node0x90b2c0;
	Node0x90b2c0 -> Node0x90b330;
	Node0x90b330 -> Node0x90b3a0;
	Node0x90b3a0 -> Node0x90b410;
	Node0x90b410 -> Node0x90b480;
	Node0x90b480 -> Node0x8a88b8;
	Node0x8a88b8 -> Node0x90b510;
	Node0x90b510 -> Node0x90b7b8;
	Node0x90b7b8 -> Node0x90b918;
	Node0x90b918 -> Node0x90ba28;
	Node0x90ba28 -> Node0x90bb38;
	Node0x90bb38 -> Node0x90bbf8;
edge [color=red]
	Node0x908478 -> Node0x908698;
	Node0x908698 -> Node0x908ac8;
	Node0x9084f8 -> Node0x908ba8;
	Node0x908ba8 -> Node0x908ca8;
	Node0x908588 -> Node0x908d68;
	Node0x908d68 -> Node0x908e18;
	Node0x9085e8 -> Node0x908ed8;
	Node0x908ed8 -> Node0x908f88;
	Node0x908478 -> Node0x903930;
	Node0x9084f8 -> Node0x903930;
	Node0x908588 -> Node0x903930;
	Node0x9085e8 -> Node0x903930;
	Node0x908478 -> Node0x909188;
	Node0x9084f8 -> Node0x90a0f8;
	Node0x908588 -> Node0x90a768;
	Node0x9085e8 -> Node0x90a7c8;
	Node0x90a768 -> Node0x90a840;
	Node0x90a0f8 -> Node0x90a8b0;
	Node0x90a840 -> Node0x90a8b0;
	Node0x90a8b0 -> Node0x90a920;
	Node0x90a7c8 -> Node0x90a920;
	Node0x90a0f8 -> Node0x90a990;
	Node0x90a0f8 -> Node0x90aa00;
	Node0x90a840 -> Node0x90aa00;
	Node0x90a768 -> Node0x90aa70;
	Node0x90a0f8 -> Node0x90aa70;
	Node0x90a768 -> Node0x90aae0;
	Node0x90a0f8 -> Node0x90aae0;
	Node0x90aae0 -> Node0x90ab50;
	Node0x90a840 -> Node0x90abc0;
	Node0x90aa00 -> Node0x90ac30;
	Node0x909188 -> Node0x90aca0;
	Node0x90aca0 -> Node0x90ad10;
	Node0x90a7c8 -> Node0x90ad80;
	Node0x909188 -> Node0x90ad80;
	Node0x90a7c8 -> Node0x90adf0;
	Node0x90aca0 -> Node0x90adf0;
	Node0x90adf0 -> Node0x90ae60;
	Node0x90aa70 -> Node0x90ae60;
	Node0x90ae60 -> Node0x90aed0;
	Node0x90a990 -> Node0x90af40;
	Node0x909188 -> Node0x90af40;
	Node0x90af40 -> Node0x90afb0;
	Node0x90a0f8 -> Node0x90afb0;
	Node0x90afb0 -> Node0x90b020;
	Node0x90ad10 -> Node0x90b020;
	Node0x90b020 -> Node0x90b090;
	Node0x90a768 -> Node0x90b090;
	Node0x90b090 -> Node0x90b100;
	Node0x90aa00 -> Node0x90b100;
	Node0x90b100 -> Node0x90b170;
	Node0x90aa70 -> Node0x90b170;
	Node0x90b170 -> Node0x90b1e0;
	Node0x90ab50 -> Node0x90b1e0;
	Node0x90b1e0 -> Node0x90b250;
	Node0x90abc0 -> Node0x90b250;
	Node0x90b250 -> Node0x90b2c0;
	Node0x90a8b0 -> Node0x90b2c0;
	Node0x90b2c0 -> Node0x90b330;
	Node0x90ac30 -> Node0x90b330;
	Node0x90b330 -> Node0x90b3a0;
	Node0x90ad80 -> Node0x90b3a0;
	Node0x90b3a0 -> Node0x90b410;
	Node0x90aed0 -> Node0x90b410;
	Node0x90a920 -> Node0x90b480;
	Node0x90b410 -> Node0x90b480;
	Node0x90b480 -> Node0x8a88b8;
	Node0x8a88b8 -> Node0x90b510;
	Node0x908ed8 -> Node0x90b7b8;
	Node0x908d68 -> Node0x90b918;
	Node0x908ba8 -> Node0x90ba28;
	Node0x908698 -> Node0x90bb38;
}
