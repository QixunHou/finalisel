; ModuleID = '../.././c_source_file/1853_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1853_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %0, -1
  %7 = or i32 %2, %1
  %8 = or i32 %7, %6
  %9 = mul i32 %8, 5
  %10 = add i32 %9, 1
  %11 = xor i32 %4, -1
  %12 = and i32 %11, %3
  %13 = xor i32 %4, %3
  %14 = or i32 %4, %3
  %15 = or i32 %11, %3
  %16 = xor i32 %14, -1
  %17 = shl i32 %15, 1
  %18 = xor i32 %17, -2
  %19 = shl i32 %12, 1
  %20 = and i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %2, -1
  %23 = and i32 %1, %0
  %24 = or i32 %23, %22
  %25 = or i32 %23, %2
  %26 = xor i32 %1, -1
  %27 = and i32 %26, %2
  %28 = and i32 %27, %0
  %29 = or i32 %26, %2
  %30 = xor i32 %29, %0
  %31 = or i32 %28, %30
  %32 = and i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = and i32 %33, %6
  %35 = xor i32 %1, %0
  %36 = xor i32 %2, %0
  %37 = or i32 %36, %35
  %38 = and i32 %32, %0
  %39 = xor i32 %2, %1
  %40 = xor i32 %39, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %38, %41
  %43 = or i32 %22, %0
  %44 = and i32 %43, %1
  %45 = and i32 %22, %1
  %46 = or i32 %45, %6
  %47 = or i32 %22, %1
  %48 = xor i32 %47, -1
  %49 = add i32 %47, 1
  %50 = xor i32 %32, %0
  %51 = or i32 %28, %40
  %52 = xor i32 %35, -1
  %53 = and i32 %36, %52
  %54 = xor i32 %43, -1
  %55 = add i32 %43, 1
  %56 = and i32 %2, %0
  %57 = or i32 %56, %26
  %58 = shl i32 %57, 1
  %59 = or i32 %26, %0
  %60 = and i32 %59, %22
  %61 = shl i32 %60, 1
  %62 = or i32 %39, %0
  %63 = xor i32 %28, %62
  %64 = xor i32 %45, -1
  %65 = or i32 %56, %52
  %66 = or i32 %2, %0
  %67 = and i32 %66, %52
  %68 = or i32 %1, %0
  %69 = and i32 %68, %2
  %70 = and i32 %22, %0
  %71 = xor i32 %70, -1
  %72 = and i32 %35, %71
  %73 = xor i32 %66, -1
  %74 = xor i32 %59, -1
  %75 = or i32 %36, %74
  %76 = and i32 %26, %0
  %77 = xor i32 %76, -1
  %78 = and i32 %77, %2
  %79 = xor i32 %76, %64
  %80 = xor i32 %68, -1
  %81 = or i32 %80, %2
  %82 = xor i32 %39, -1
  %83 = and i32 %82, %77
  %84 = xor i32 %36, -1
  %85 = or i32 %84, %1
  %86 = or i32 %84, %74
  %87 = and i32 %47, %6
  %88 = xor i32 %7, %0
  %89 = and i32 %35, %84
  %90 = shl i32 %89, 1
  %91 = or i32 %36, %52
  %92 = xor i32 %45, %0
  %93 = or i32 %39, %76
  %94 = add i32 %59, 1
  %95 = or i32 %73, %26
  %96 = or i32 %52, %2
  %97 = xor i32 %76, %33
  %98 = and i32 %32, %6
  %99 = and i32 %7, %0
  %100 = or i32 %98, %99
  %101 = xor i32 %56, %7
  %102 = xor i32 %56, -1
  %103 = and i32 %102, %26
  %104 = xor i32 %33, %0
  %105 = xor i32 %23, -1
  %106 = and i32 %84, %105
  %107 = and i32 %71, %1
  %108 = or i32 %45, %76
  %109 = xor i32 %71, %1
  %110 = xor i32 %73, %1
  %111 = or i32 %56, %1
  %112 = xor i32 %38, -1
  %113 = xor i32 %88, %112
  %114 = xor i32 %23, %2
  %115 = xor i32 %47, %23
  %116 = or i32 %73, %1
  %117 = or i32 %47, %0
  %118 = and i32 %102, %52
  %119 = and i32 %27, %6
  %120 = or i32 %39, %6
  %121 = xor i32 %119, %120
  %122 = and i32 %64, %0
  %123 = and i32 %35, %102
  %124 = xor i32 %70, %33
  %125 = shl i32 %124, 1
  %126 = xor i32 %7, -1
  %127 = or i32 %23, %126
  %128 = shl i32 %127, 1
  %129 = or i32 %76, %22
  %130 = and i32 %22, %52
  %131 = xor i32 %56, %64
  %132 = and i32 %35, %2
  %133 = or i32 %82, %74
  %134 = xor i32 %30, -1
  %135 = xor i32 %28, %134
  %136 = or i32 %36, %26
  %137 = or i32 %126, %0
  %138 = xor i32 %38, %137
  %139 = xor i32 %76, %2
  %140 = or i32 %7, %0
  %141 = and i32 %84, %52
  %142 = and i32 %29, %0
  %143 = xor i32 %142, -1
  %144 = xor i32 %119, %143
  %145 = and i32 %33, %0
  %146 = xor i32 %28, %41
  %147 = xor i32 %102, %1
  %148 = and i32 %47, %0
  %149 = shl i32 %148, 1
  %150 = or i32 %70, %48
  %151 = or i32 %64, %6
  %152 = shl i32 %1, 1
  %153 = or i32 %56, %35
  %154 = xor i32 %77, %2
  %155 = shl i32 %66, 1
  %156 = or i32 %126, %6
  %157 = and i32 %68, %22
  %158 = or i32 %47, %6
  %159 = and i32 %39, %0
  %160 = xor i32 %64, %0
  %161 = and i32 %68, %82
  %162 = and i32 %102, %1
  %163 = xor i32 %56, %59
  %164 = xor i32 %66, %23
  %165 = or i32 %84, %26
  %166 = xor i32 %82, %0
  %167 = and i32 %36, %35
  %168 = shl i32 %167, 1
  %169 = and i32 %82, %0
  %170 = shl i32 %2, 1
  %171 = and i32 %82, %105
  %172 = and i32 %43, %52
  %173 = or i32 %98, %159
  %174 = or i32 %22, %52
  %175 = or i32 %70, %32
  %176 = and i32 %84, %77
  %177 = or i32 %54, %1
  %178 = or i32 %70, %35
  %179 = and i32 %39, %59
  %180 = add i32 %39, 1
  %181 = or i32 %74, %2
  %182 = or i32 %35, %2
  %183 = and i32 %39, %68
  %184 = or i32 %32, %76
  %185 = or i32 %36, %76
  %186 = and i32 %36, %68
  %187 = xor i32 %68, %2
  %188 = or i32 %70, %26
  %189 = add i32 %56, 1
  %190 = or i32 %39, %23
  %191 = and i32 %68, %84
  %192 = or i32 %119, %142
  %193 = or i32 %56, %74
  %194 = shl i32 %193, 1
  %195 = or i32 %64, %0
  %196 = shl i32 %195, 1
  %197 = or i32 %56, %80
  %198 = shl i32 %197, 1
  %199 = xor i32 %80, %2
  %200 = xor i32 %43, %23
  %201 = shl i32 %84, 1
  %202 = or i32 %84, %52
  %203 = or i32 %76, %84
  %204 = shl i32 %203, 2
  %205 = and i32 %84, %1
  %206 = xor i32 %74, %2
  %207 = or i32 %23, %48
  %208 = shl i32 %207, 1
  %209 = and i32 %35, %22
  %210 = or i32 %82, %6
  %211 = and i32 %105, %2
  %212 = and i32 %29, %6
  %213 = or i32 %28, %212
  %214 = or i32 %48, %0
  %215 = shl i32 %214, 1
  %216 = xor i32 %105, %2
  %217 = or i32 %76, %2
  %218 = xor i32 %54, %1
  %219 = xor i32 %70, %1
  %220 = and i32 %64, %6
  %221 = xor i32 %48, %0
  %222 = xor i32 %43, %1
  %223 = or i32 %35, %84
  %224 = and i32 %59, %82
  %225 = shl i32 %224, 2
  %226 = or i32 %38, %88
  %227 = or i32 %73, %52
  %228 = xor i32 %120, -1
  %229 = or i32 %119, %228
  %230 = or i32 %45, %0
  %231 = or i32 %32, %6
  %232 = or i32 %82, %0
  %233 = shl i32 %232, 1
  %234 = and i32 %36, %26
  %235 = or i32 %56, %126
  %236 = and i32 %43, %26
  %237 = xor i32 %62, 2147483647
  %238 = or i32 %237, %28
  %239 = or i32 %36, %1
  %240 = and i32 %59, %2
  %241 = and i32 %66, %35
  %242 = or i32 %39, %80
  %243 = shl i32 %242, 1
  %244 = or i32 %23, %84
  %245 = xor i32 %56, %1
  %246 = and i32 %36, %105
  %247 = and i32 %82, %6
  %248 = or i32 %84, %80
  %249 = shl i32 %248, 1
  %250 = or i32 %56, %45
  %251 = or i32 %39, %74
  %252 = or i32 %76, %82
  %253 = or i32 %35, %22
  %254 = and i32 %71, %26
  %255 = or i32 %35, %54
  %256 = or i32 %70, %52
  %257 = shl i32 %256, 1
  %258 = and i32 %39, %6
  %259 = or i32 %35, %73
  %260 = and i32 %43, %35
  %261 = and i32 %36, %59
  %262 = xor i32 %59, %2
  %263 = and i32 %66, %26
  %264 = and i32 %84, %26
  %265 = xor i32 %258, %112
  %266 = and i32 %36, %77
  %267 = xor i32 %212, 1073741823
  %268 = xor i32 %267, %28
  %269 = shl i32 %40, 1
  %270 = xor i32 %56, %68
  %271 = or i32 %23, %54
  %272 = and i32 %71, %52
  %273 = and i32 %52, %2
  %274 = and i32 %126, %6
  %275 = and i32 %45, %6
  %276 = mul i32 %275, -7
  %277 = and i32 %126, %0
  %278 = shl i32 %277, 4
  %279 = and i32 %45, %0
  %280 = mul i32 %279, -12
  %281 = and i32 %48, %6
  %282 = mul i32 %98, -21
  %283 = and i32 %48, %0
  %284 = shl i32 %283, 3
  %285 = add i32 %96, %6
  %286 = add i32 %285, %25
  %287 = add i32 %286, %24
  %288 = add i32 %287, %264
  %289 = add i32 %288, %251
  %290 = add i32 %289, %221
  %291 = add i32 %290, %188
  %292 = add i32 %291, %172
  %293 = add i32 %292, %163
  %294 = add i32 %293, %160
  %295 = add i32 %294, %151
  %296 = add i32 %295, %141
  %297 = add i32 %296, %109
  %298 = add i32 %297, %72
  %299 = add i32 %298, %173
  %300 = add i32 %299, %238
  %301 = shl i32 %300, 1
  %302 = sub i32 %77, %240
  %303 = sub i32 %302, %209
  %304 = add i32 %303, %258
  %305 = sub i32 %304, %281
  %306 = add i32 %305, %191
  %307 = sub i32 %306, %67
  %308 = mul i32 %307, 5
  %309 = add i32 %64, %73
  %310 = add i32 %309, %268
  %311 = shl i32 %310, 2
  %312 = sub i32 %38, %274
  %313 = mul i32 %312, 17
  %314 = add i32 %126, %16
  %315 = xor i32 %314, -1
  %316 = mul i32 %315, 3
  %317 = add i32 %0, 2
  %318 = add i32 %317, %26
  %319 = add i32 %318, %22
  %320 = sub i32 %319, %35
  %321 = add i32 %320, %94
  %322 = sub i32 %321, %152
  %323 = add i32 %322, %76
  %324 = sub i32 %323, %68
  %325 = sub i32 %324, %36
  %326 = add i32 %325, %49
  %327 = add i32 %326, %55
  %328 = sub i32 %327, %69
  %329 = sub i32 %328, %78
  %330 = add i32 %329, %81
  %331 = sub i32 %330, %45
  %332 = add i32 %331, %43
  %333 = add i32 %332, %114
  %334 = sub i32 %333, %129
  %335 = sub i32 %334, %130
  %336 = add i32 %335, %132
  %337 = add i32 %336, %139
  %338 = sub i32 %337, %154
  %339 = add i32 %338, %157
  %340 = sub i32 %339, %170
  %341 = add i32 %340, %174
  %342 = add i32 %341, %180
  %343 = sub i32 %342, %181
  %344 = add i32 %343, %182
  %345 = sub i32 %344, %187
  %346 = add i32 %345, %189
  %347 = add i32 %346, %199
  %348 = add i32 %347, %206
  %349 = add i32 %348, %211
  %350 = sub i32 %349, %216
  %351 = sub i32 %350, %217
  %352 = add i32 %351, %7
  %353 = sub i32 %352, %39
  %354 = sub i32 %353, %253
  %355 = add i32 %354, %47
  %356 = sub i32 %355, %262
  %357 = sub i32 %356, %273
  %358 = add i32 %357, %34
  %359 = add i32 %358, %37
  %360 = sub i32 %359, %44
  %361 = add i32 %360, %46
  %362 = add i32 %361, %50
  %363 = sub i32 %362, %53
  %364 = sub i32 %363, %61
  %365 = sub i32 %364, %65
  %366 = sub i32 %365, %75
  %367 = add i32 %366, %79
  %368 = sub i32 %367, %83
  %369 = sub i32 %368, %85
  %370 = sub i32 %369, %86
  %371 = add i32 %370, %87
  %372 = sub i32 %371, %88
  %373 = add i32 %372, %91
  %374 = sub i32 %373, %92
  %375 = add i32 %374, %93
  %376 = add i32 %375, %95
  %377 = add i32 %376, %97
  %378 = add i32 %377, %101
  %379 = sub i32 %378, %103
  %380 = sub i32 %379, %104
  %381 = sub i32 %380, %106
  %382 = add i32 %381, %107
  %383 = sub i32 %382, %108
  %384 = add i32 %383, %110
  %385 = sub i32 %384, %111
  %386 = sub i32 %385, %115
  %387 = add i32 %386, %116
  %388 = sub i32 %387, %117
  %389 = add i32 %388, %118
  %390 = sub i32 %389, %122
  %391 = sub i32 %390, %123
  %392 = add i32 %391, %131
  %393 = add i32 %392, %133
  %394 = add i32 %393, %136
  %395 = sub i32 %394, %140
  %396 = sub i32 %395, %145
  %397 = add i32 %396, %147
  %398 = add i32 %397, %150
  %399 = sub i32 %398, %153
  %400 = sub i32 %399, %137
  %401 = sub i32 %400, %155
  %402 = add i32 %401, %156
  %403 = add i32 %402, %158
  %404 = sub i32 %403, %159
  %405 = sub i32 %404, %161
  %406 = add i32 %405, %162
  %407 = add i32 %406, %164
  %408 = sub i32 %407, %165
  %409 = add i32 %408, %166
  %410 = sub i32 %409, %169
  %411 = add i32 %410, %171
  %412 = add i32 %411, %175
  %413 = add i32 %412, %176
  %414 = sub i32 %413, %177
  %415 = add i32 %414, %178
  %416 = add i32 %415, %179
  %417 = sub i32 %416, %183
  %418 = sub i32 %417, %184
  %419 = sub i32 %418, %185
  %420 = sub i32 %419, %186
  %421 = sub i32 %420, %190
  %422 = add i32 %421, %200
  %423 = sub i32 %422, %201
  %424 = sub i32 %423, %202
  %425 = add i32 %424, %205
  %426 = sub i32 %425, %210
  %427 = add i32 %426, %218
  %428 = add i32 %427, %219
  %429 = add i32 %428, %220
  %430 = sub i32 %429, %222
  %431 = add i32 %430, %223
  %432 = add i32 %431, %62
  %433 = sub i32 %432, %227
  %434 = add i32 %433, %230
  %435 = add i32 %434, %231
  %436 = sub i32 %435, %234
  %437 = add i32 %436, %235
  %438 = add i32 %437, %236
  %439 = add i32 %438, %239
  %440 = sub i32 %439, %241
  %441 = add i32 %440, %244
  %442 = add i32 %441, %245
  %443 = add i32 %442, %246
  %444 = sub i32 %443, %247
  %445 = add i32 %444, %250
  %446 = add i32 %445, %252
  %447 = add i32 %446, %254
  %448 = sub i32 %447, %255
  %449 = add i32 %448, %259
  %450 = add i32 %449, %260
  %451 = sub i32 %450, %261
  %452 = sub i32 %451, %263
  %453 = add i32 %452, %266
  %454 = add i32 %453, %270
  %455 = add i32 %454, %271
  %456 = add i32 %455, %272
  %457 = sub i32 %456, %12
  %458 = add i32 %457, %13
  %459 = sub i32 %458, %14
  %460 = add i32 %459, %15
  %461 = add i32 %460, %31
  %462 = add i32 %461, %42
  %463 = sub i32 %462, %51
  %464 = sub i32 %463, %58
  %465 = add i32 %464, %63
  %466 = sub i32 %465, %90
  %467 = add i32 %466, %100
  %468 = add i32 %467, %113
  %469 = sub i32 %468, %121
  %470 = sub i32 %469, %125
  %471 = sub i32 %470, %128
  %472 = sub i32 %471, %135
  %473 = add i32 %472, %138
  %474 = add i32 %473, %144
  %475 = add i32 %474, %146
  %476 = sub i32 %475, %149
  %477 = sub i32 %476, %168
  %478 = add i32 %477, %192
  %479 = sub i32 %478, %194
  %480 = sub i32 %479, %196
  %481 = sub i32 %480, %198
  %482 = sub i32 %481, %204
  %483 = sub i32 %482, %208
  %484 = sub i32 %483, %213
  %485 = sub i32 %484, %215
  %486 = sub i32 %485, %225
  %487 = add i32 %486, %226
  %488 = sub i32 %487, %229
  %489 = sub i32 %488, %233
  %490 = sub i32 %489, %243
  %491 = sub i32 %490, %249
  %492 = sub i32 %491, %257
  %493 = add i32 %492, %265
  %494 = sub i32 %493, %269
  %495 = add i32 %494, %276
  %496 = add i32 %495, %278
  %497 = add i32 %496, %280
  %498 = add i32 %497, %282
  %499 = add i32 %498, %284
  %500 = sub i32 %499, %19
  %501 = sub i32 %500, %21
  %502 = add i32 %501, %313
  %503 = sub i32 %502, %18
  %504 = add i32 %503, %316
  %505 = add i32 %504, %311
  %506 = add i32 %505, %308
  %507 = add i32 %506, %301
  %508 = icmp eq i32 %10, %507
  %509 = select i1 %508, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %510 = tail call i32 @puts(i8* nonnull dereferenceable(1) %509)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
