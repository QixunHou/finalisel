digraph "DFG for'crackme' function" {
	Node0x1b85f50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1b85fc0[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0x1b86030[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1b860a0[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x1b86110[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0x1b861b0[shape=record, label="  %10 = shl i32 %2, 1"];
	Node0x1b86220[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x1b86290[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x1b86300[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x1b86370[shape=record, label="  %14 = and i32 %13, %3"];
	Node0x1b863e0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1b86450[shape=record, label="  %16 = or i32 %13, %3"];
	Node0x1b864c0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x1b86560[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x1b86600[shape=record, label="  %19 = xor i32 %1, 2147483647"];
	Node0x1b86670[shape=record, label="  %20 = or i32 %19, %2"];
	Node0x1b866e0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x1b86750[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x1b867c0[shape=record, label="  %23 = sub i32 %0, %1"];
	Node0x1b86830[shape=record, label="  %24 = add i32 %23, %9"];
	Node0x1b868a0[shape=record, label="  %25 = sub i32 %24, %10"];
	Node0x1b86910[shape=record, label="  %26 = add i32 %25, %11"];
	Node0x1b86980[shape=record, label="  %27 = add i32 %26, %12"];
	Node0x1b869f0[shape=record, label="  %28 = sub i32 %27, %3"];
	Node0x1b86a60[shape=record, label="  %29 = sub i32 %28, %6"];
	Node0x1b86ad0[shape=record, label="  %30 = add i32 %29, %15"];
	Node0x1b86b40[shape=record, label="  %31 = sub i32 %30, %16"];
	Node0x1b86bb0[shape=record, label="  %32 = sub i32 %31, %18"];
	Node0x1b86e30[shape=record, label="  %33 = add i32 %32, %22"];
	Node0x1b86ea0[shape=record, label="  %34 = icmp eq i32 %8, %33"];
	Node0x1b26268[shape=record, label="  %35 = select i1 %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b87340[shape=record, label="  %36 = tail call i32 @puts(i8* nonnull dereferenceable(1) %35)"];
	Node0x1b87390[shape=record, label="  ret void"];
	Node0x1b85f50 -> Node0x1b85fc0;
	Node0x1b85fc0 -> Node0x1b86030;
	Node0x1b86030 -> Node0x1b860a0;
	Node0x1b860a0 -> Node0x1b86110;
	Node0x1b86110 -> Node0x1b861b0;
	Node0x1b861b0 -> Node0x1b86220;
	Node0x1b86220 -> Node0x1b86290;
	Node0x1b86290 -> Node0x1b86300;
	Node0x1b86300 -> Node0x1b86370;
	Node0x1b86370 -> Node0x1b863e0;
	Node0x1b863e0 -> Node0x1b86450;
	Node0x1b86450 -> Node0x1b864c0;
	Node0x1b864c0 -> Node0x1b86560;
	Node0x1b86560 -> Node0x1b86600;
	Node0x1b86600 -> Node0x1b86670;
	Node0x1b86670 -> Node0x1b866e0;
	Node0x1b866e0 -> Node0x1b86750;
	Node0x1b86750 -> Node0x1b867c0;
	Node0x1b867c0 -> Node0x1b86830;
	Node0x1b86830 -> Node0x1b868a0;
	Node0x1b868a0 -> Node0x1b86910;
	Node0x1b86910 -> Node0x1b86980;
	Node0x1b86980 -> Node0x1b869f0;
	Node0x1b869f0 -> Node0x1b86a60;
	Node0x1b86a60 -> Node0x1b86ad0;
	Node0x1b86ad0 -> Node0x1b86b40;
	Node0x1b86b40 -> Node0x1b86bb0;
	Node0x1b86bb0 -> Node0x1b86e30;
	Node0x1b86e30 -> Node0x1b86ea0;
	Node0x1b86ea0 -> Node0x1b26268;
	Node0x1b26268 -> Node0x1b87340;
	Node0x1b87340 -> Node0x1b87390;
edge [color=red]
	Node0x1b85fc0 -> Node0x1b86030;
	Node0x1b86030 -> Node0x1b860a0;
	Node0x1b85f50 -> Node0x1b860a0;
	Node0x1b86300 -> Node0x1b86370;
	Node0x1b86370 -> Node0x1b863e0;
	Node0x1b86300 -> Node0x1b86450;
	Node0x1b86450 -> Node0x1b864c0;
	Node0x1b864c0 -> Node0x1b86560;
	Node0x1b86600 -> Node0x1b86670;
	Node0x1b86670 -> Node0x1b866e0;
	Node0x1b86370 -> Node0x1b866e0;
	Node0x1b866e0 -> Node0x1b86750;
	Node0x1b867c0 -> Node0x1b86830;
	Node0x1b86110 -> Node0x1b86830;
	Node0x1b86830 -> Node0x1b868a0;
	Node0x1b861b0 -> Node0x1b868a0;
	Node0x1b868a0 -> Node0x1b86910;
	Node0x1b86220 -> Node0x1b86910;
	Node0x1b86910 -> Node0x1b86980;
	Node0x1b86290 -> Node0x1b86980;
	Node0x1b86980 -> Node0x1b869f0;
	Node0x1b869f0 -> Node0x1b86a60;
	Node0x1b85fc0 -> Node0x1b86a60;
	Node0x1b86a60 -> Node0x1b86ad0;
	Node0x1b863e0 -> Node0x1b86ad0;
	Node0x1b86ad0 -> Node0x1b86b40;
	Node0x1b86450 -> Node0x1b86b40;
	Node0x1b86b40 -> Node0x1b86bb0;
	Node0x1b86560 -> Node0x1b86bb0;
	Node0x1b86bb0 -> Node0x1b86e30;
	Node0x1b86750 -> Node0x1b86e30;
	Node0x1b860a0 -> Node0x1b86ea0;
	Node0x1b86e30 -> Node0x1b86ea0;
	Node0x1b86ea0 -> Node0x1b26268;
	Node0x1b26268 -> Node0x1b87340;
}
