digraph "DFG for'main' function" {
	Node0x218d008[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x218d088[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x218d118[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x218d178[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x218d5f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x218d6d8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x218d7d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x218d898[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x218d948[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x218dba8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x218dc68[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x218ebd8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x218f248[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x218f340[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x218f548[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x218f6a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x218f7b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x218f878[shape=record, label="  ret i32 0"];
	Node0x218d008 -> Node0x218d088;
	Node0x218d088 -> Node0x218d118;
	Node0x218d118 -> Node0x218d178;
	Node0x218d178 -> Node0x218d5f8;
	Node0x218d5f8 -> Node0x218d6d8;
	Node0x218d6d8 -> Node0x218d7d8;
	Node0x218d7d8 -> Node0x218d898;
	Node0x218d898 -> Node0x218d948;
	Node0x218d948 -> Node0x218dba8;
	Node0x218dba8 -> Node0x218dc68;
	Node0x218dc68 -> Node0x218ebd8;
	Node0x218ebd8 -> Node0x218f248;
	Node0x218f248 -> Node0x218f340;
	Node0x218f340 -> Node0x218f548;
	Node0x218f548 -> Node0x218f6a8;
	Node0x218f6a8 -> Node0x218f7b8;
	Node0x218f7b8 -> Node0x218f878;
edge [color=red]
	Node0x218d008 -> Node0x218d178;
	Node0x218d178 -> Node0x218d5f8;
	Node0x218d088 -> Node0x218d6d8;
	Node0x218d6d8 -> Node0x218d7d8;
	Node0x218d118 -> Node0x218d898;
	Node0x218d898 -> Node0x218d948;
	Node0x218d008 -> Node0x218dba8;
	Node0x218d088 -> Node0x218dba8;
	Node0x218d118 -> Node0x218dba8;
	Node0x218d008 -> Node0x218dc68;
	Node0x218d088 -> Node0x218ebd8;
	Node0x218d118 -> Node0x218f248;
	Node0x218dc68 -> Node0x218f340;
	Node0x218ebd8 -> Node0x218f340;
	Node0x218f248 -> Node0x218f340;
	Node0x218d898 -> Node0x218f548;
	Node0x218d6d8 -> Node0x218f6a8;
	Node0x218d178 -> Node0x218f7b8;
}
