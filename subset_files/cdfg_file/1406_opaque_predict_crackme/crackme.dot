digraph "DFG for'crackme' function" {
	Node0x8bb510[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x8bbbc0[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x8bbc80[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x8bbcf0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x8bbd60[shape=record, label="  %7 = or i32 %5, %0"];
	Node0x8bbdd0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x8bbe40[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x8bbeb0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x8bbf20[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x8bbf90[shape=record, label="  %12 = and i32 %5, %0"];
	Node0x8bc030[shape=record, label="  %13 = mul i32 %11, -5"];
	Node0x8bc0a0[shape=record, label="  %14 = shl i32 %12, 1"];
	Node0x8bc140[shape=record, label="  %15 = mul i32 %3, -3"];
	Node0x8bc1b0[shape=record, label="  %16 = add i32 %1, %0"];
	Node0x8bc220[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x8bc290[shape=record, label="  %18 = add i32 %17, %6"];
	Node0x8bc300[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x8bc370[shape=record, label="  %20 = sub i32 %19, %12"];
	Node0x8bc3e0[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x8bc450[shape=record, label="  %22 = add i32 %21, %13"];
	Node0x8bc4c0[shape=record, label="  %23 = sub i32 %22, %14"];
	Node0x8bc530[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x8bc5a0[shape=record, label="  %25 = icmp eq i32 %4, %24"];
	Node0x85c268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x8bca40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x8bca90[shape=record, label="  ret void"];
	Node0x8bb510 -> Node0x8bbbc0;
	Node0x8bbbc0 -> Node0x8bbc80;
	Node0x8bbc80 -> Node0x8bbcf0;
	Node0x8bbcf0 -> Node0x8bbd60;
	Node0x8bbd60 -> Node0x8bbdd0;
	Node0x8bbdd0 -> Node0x8bbe40;
	Node0x8bbe40 -> Node0x8bbeb0;
	Node0x8bbeb0 -> Node0x8bbf20;
	Node0x8bbf20 -> Node0x8bbf90;
	Node0x8bbf90 -> Node0x8bc030;
	Node0x8bc030 -> Node0x8bc0a0;
	Node0x8bc0a0 -> Node0x8bc140;
	Node0x8bc140 -> Node0x8bc1b0;
	Node0x8bc1b0 -> Node0x8bc220;
	Node0x8bc220 -> Node0x8bc290;
	Node0x8bc290 -> Node0x8bc300;
	Node0x8bc300 -> Node0x8bc370;
	Node0x8bc370 -> Node0x8bc3e0;
	Node0x8bc3e0 -> Node0x8bc450;
	Node0x8bc450 -> Node0x8bc4c0;
	Node0x8bc4c0 -> Node0x8bc530;
	Node0x8bc530 -> Node0x8bc5a0;
	Node0x8bc5a0 -> Node0x85c268;
	Node0x85c268 -> Node0x8bca40;
	Node0x8bca40 -> Node0x8bca90;
edge [color=red]
	Node0x8bb510 -> Node0x8bbbc0;
	Node0x8bbc80 -> Node0x8bbcf0;
	Node0x8bbc80 -> Node0x8bbd60;
	Node0x8bbdd0 -> Node0x8bbe40;
	Node0x8bbeb0 -> Node0x8bbf20;
	Node0x8bbc80 -> Node0x8bbf90;
	Node0x8bbf20 -> Node0x8bc030;
	Node0x8bbf90 -> Node0x8bc0a0;
	Node0x8bb510 -> Node0x8bc140;
	Node0x8bc1b0 -> Node0x8bc220;
	Node0x8bbd60 -> Node0x8bc220;
	Node0x8bc220 -> Node0x8bc290;
	Node0x8bbcf0 -> Node0x8bc290;
	Node0x8bc290 -> Node0x8bc300;
	Node0x8bbf20 -> Node0x8bc300;
	Node0x8bc300 -> Node0x8bc370;
	Node0x8bbf90 -> Node0x8bc370;
	Node0x8bc370 -> Node0x8bc3e0;
	Node0x8bbe40 -> Node0x8bc3e0;
	Node0x8bc3e0 -> Node0x8bc450;
	Node0x8bc030 -> Node0x8bc450;
	Node0x8bc450 -> Node0x8bc4c0;
	Node0x8bc0a0 -> Node0x8bc4c0;
	Node0x8bc4c0 -> Node0x8bc530;
	Node0x8bc140 -> Node0x8bc530;
	Node0x8bbbc0 -> Node0x8bc5a0;
	Node0x8bc530 -> Node0x8bc5a0;
	Node0x8bc5a0 -> Node0x85c268;
	Node0x85c268 -> Node0x8bca40;
}
