digraph "DFG for'crackme' function" {
	Node0x117c510[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x117cbc0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x117cc80[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x117ccf0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x117cd90[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x117ce00[shape=record, label="  %8 = sub i32 %3, %7"];
	Node0x117ce70[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x117cee0[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x117cf50[shape=record, label="  %11 = or i32 %4, %0"];
	Node0x117cfc0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x117d030[shape=record, label="  %13 = xor i32 %9, -1"];
	Node0x117d0d0[shape=record, label="  %14 = mul i32 %10, -3"];
	Node0x117d140[shape=record, label="  %15 = add i32 %9, %0"];
	Node0x117d1b0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x117d220[shape=record, label="  %17 = sub i32 1, %1"];
	Node0x117d290[shape=record, label="  %18 = sub i32 %17, %3"];
	Node0x117d300[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x117d370[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x117d3e0[shape=record, label="  %21 = add i32 %20, %5"];
	Node0x117d450[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0x117d4c0[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x117d530[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x117d5a0[shape=record, label="  %25 = icmp eq i32 %8, %24"];
	Node0x111d268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x117da40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x117da90[shape=record, label="  ret void"];
	Node0x117c510 -> Node0x117cbc0;
	Node0x117cbc0 -> Node0x117cc80;
	Node0x117cc80 -> Node0x117ccf0;
	Node0x117ccf0 -> Node0x117cd90;
	Node0x117cd90 -> Node0x117ce00;
	Node0x117ce00 -> Node0x117ce70;
	Node0x117ce70 -> Node0x117cee0;
	Node0x117cee0 -> Node0x117cf50;
	Node0x117cf50 -> Node0x117cfc0;
	Node0x117cfc0 -> Node0x117d030;
	Node0x117d030 -> Node0x117d0d0;
	Node0x117d0d0 -> Node0x117d140;
	Node0x117d140 -> Node0x117d1b0;
	Node0x117d1b0 -> Node0x117d220;
	Node0x117d220 -> Node0x117d290;
	Node0x117d290 -> Node0x117d300;
	Node0x117d300 -> Node0x117d370;
	Node0x117d370 -> Node0x117d3e0;
	Node0x117d3e0 -> Node0x117d450;
	Node0x117d450 -> Node0x117d4c0;
	Node0x117d4c0 -> Node0x117d530;
	Node0x117d530 -> Node0x117d5a0;
	Node0x117d5a0 -> Node0x111d268;
	Node0x111d268 -> Node0x117da40;
	Node0x117da40 -> Node0x117da90;
edge [color=red]
	Node0x117cbc0 -> Node0x117cc80;
	Node0x117cc80 -> Node0x117ccf0;
	Node0x117ccf0 -> Node0x117cd90;
	Node0x117c510 -> Node0x117ce00;
	Node0x117cd90 -> Node0x117ce00;
	Node0x117cbc0 -> Node0x117cf50;
	Node0x117cf50 -> Node0x117cfc0;
	Node0x117ce70 -> Node0x117d030;
	Node0x117cee0 -> Node0x117d0d0;
	Node0x117ce70 -> Node0x117d140;
	Node0x117d140 -> Node0x117d1b0;
	Node0x117d220 -> Node0x117d290;
	Node0x117c510 -> Node0x117d290;
	Node0x117d290 -> Node0x117d300;
	Node0x117cee0 -> Node0x117d300;
	Node0x117d300 -> Node0x117d370;
	Node0x117d030 -> Node0x117d370;
	Node0x117d370 -> Node0x117d3e0;
	Node0x117cc80 -> Node0x117d3e0;
	Node0x117d3e0 -> Node0x117d450;
	Node0x117cfc0 -> Node0x117d450;
	Node0x117d450 -> Node0x117d4c0;
	Node0x117d0d0 -> Node0x117d4c0;
	Node0x117d4c0 -> Node0x117d530;
	Node0x117d1b0 -> Node0x117d530;
	Node0x117ce00 -> Node0x117d5a0;
	Node0x117d530 -> Node0x117d5a0;
	Node0x117d5a0 -> Node0x111d268;
	Node0x111d268 -> Node0x117da40;
}
