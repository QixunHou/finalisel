; ModuleID = '../.././c_source_file/0115_path_condition_crackme.c'
source_filename = "../.././c_source_file/0115_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %4, -1
  %8 = and i32 %7, %3
  %9 = xor i32 %8, -1
  %10 = mul i32 %9, 5
  %11 = or i32 %1, %0
  %12 = xor i32 %2, %1
  %13 = and i32 %12, %11
  %14 = add i32 %13, %6
  %15 = add i32 %14, %10
  %16 = xor i32 %4, %3
  %17 = and i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = or i32 %4, %3
  %20 = xor i32 %19, -1
  %21 = mul i32 %20, 6
  %22 = and i32 %6, %4
  %23 = or i32 %2, %0
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %23, %25
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %25
  %30 = and i32 %1, %0
  %31 = xor i32 %2, -1
  %32 = or i32 %31, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %30, %33
  %35 = and i32 %31, %0
  %36 = and i32 %24, %31
  %37 = shl i32 %36, 1
  %38 = xor i32 %35, -1
  %39 = and i32 %38, %1
  %40 = shl i32 %39, 1
  %41 = xor i32 %0, -1
  %42 = and i32 %12, %41
  %43 = and i32 %2, %1
  %44 = and i32 %43, %0
  %45 = or i32 %2, %1
  %46 = xor i32 %45, %0
  %47 = xor i32 %44, -1
  %48 = xor i32 %46, %47
  %49 = xor i32 %43, -1
  %50 = or i32 %49, %0
  %51 = xor i32 %1, -1
  %52 = or i32 %51, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %28, %53
  %55 = and i32 %31, %1
  %56 = or i32 %55, %0
  %57 = shl i32 %56, 1
  %58 = and i32 %2, %0
  %59 = xor i32 %55, -1
  %60 = xor i32 %58, %59
  %61 = or i32 %49, %41
  %62 = or i32 %27, %25
  %63 = xor i32 %23, -1
  %64 = add i32 %23, 1
  %65 = and i32 %51, %0
  %66 = xor i32 %65, -1
  %67 = and i32 %66, %2
  %68 = xor i32 %12, -1
  %69 = or i32 %30, %68
  %70 = shl i32 %69, 1
  %71 = xor i32 %53, %2
  %72 = xor i32 %58, -1
  %73 = and i32 %24, %72
  %74 = and i32 %31, %66
  %75 = and i32 %59, %0
  %76 = or i32 %31, %25
  %77 = or i32 %31, %1
  %78 = xor i32 %77, %0
  %79 = xor i32 %45, -1
  %80 = xor i32 %12, %0
  %81 = xor i32 %44, %80
  %82 = and i32 %24, %28
  %83 = or i32 %30, %31
  %84 = and i32 %27, %66
  %85 = and i32 %28, %25
  %86 = and i32 %51, %2
  %87 = and i32 %86, %0
  %88 = or i32 %51, %2
  %89 = and i32 %88, %41
  %90 = or i32 %87, %89
  %91 = xor i32 %11, -1
  %92 = or i32 %28, %91
  %93 = xor i32 %38, %1
  %94 = or i32 %68, %0
  %95 = or i32 %27, %53
  %96 = and i32 %28, %66
  %97 = xor i32 %77, -1
  %98 = xor i32 %97, %0
  %99 = shl i32 %98, 1
  %100 = or i32 %79, %41
  %101 = xor i32 %87, -1
  %102 = xor i32 %89, %101
  %103 = xor i32 %55, %0
  %104 = or i32 %45, %41
  %105 = xor i32 %66, %2
  %106 = xor i32 %65, %2
  %107 = shl i32 %106, 1
  %108 = or i32 %68, %53
  %109 = xor i32 %30, -1
  %110 = and i32 %31, %109
  %111 = and i32 %24, %2
  %112 = xor i32 %45, %30
  %113 = and i32 %43, %41
  %114 = and i32 %45, %0
  %115 = xor i32 %114, -1
  %116 = xor i32 %113, %115
  %117 = or i32 %30, %79
  %118 = and i32 %27, %51
  %119 = shl i32 %118, 1
  %120 = or i32 %65, %2
  %121 = or i32 %24, %28
  %122 = or i32 %58, %79
  %123 = or i32 %35, %97
  %124 = and i32 %109, %2
  %125 = and i32 %49, %41
  %126 = shl i32 %125, 1
  %127 = and i32 %11, %28
  %128 = xor i32 %33, %1
  %129 = and i32 %28, %51
  %130 = or i32 %33, %51
  %131 = add i32 %43, 1
  %132 = and i32 %12, %0
  %133 = or i32 %113, %132
  %134 = or i32 %63, %51
  %135 = and i32 %77, %41
  %136 = or i32 %58, %25
  %137 = or i32 %35, %1
  %138 = or i32 %58, %51
  %139 = or i32 %58, %55
  %140 = and i32 %12, %66
  %141 = and i32 %68, %66
  %142 = shl i32 %12, 2
  %143 = or i32 %27, %30
  %144 = or i32 %24, %2
  %145 = shl i32 %144, 1
  %146 = and i32 %24, %38
  %147 = or i32 %35, %51
  %148 = and i32 %86, %41
  %149 = xor i32 %12, 2147483647
  %150 = and i32 %149, %0
  %151 = or i32 %150, %148
  %152 = and i32 %11, %2
  %153 = shl i32 %97, 1
  %154 = and i32 %11, %31
  %155 = or i32 %43, %41
  %156 = or i32 %25, %2
  %157 = xor i32 %65, %49
  %158 = or i32 %59, %41
  %159 = and i32 %52, %68
  %160 = or i32 %79, %0
  %161 = or i32 %27, %51
  %162 = and i32 %45, %41
  %163 = xor i32 %162, %47
  %164 = or i32 %77, %0
  %165 = add i32 %55, 1
  %166 = shl i32 %72, 1
  %167 = and i32 %27, %11
  %168 = xor i32 %23, %1
  %169 = and i32 %59, %41
  %170 = or i32 %30, %63
  %171 = or i32 %12, %53
  %172 = and i32 %88, %0
  %173 = xor i32 %172, -1
  %174 = xor i32 %148, %173
  %175 = xor i32 %35, %1
  %176 = or i32 %35, %43
  %177 = or i32 %30, %97
  %178 = or i32 %91, %2
  %179 = shl i32 %178, 1
  %180 = xor i32 %58, %45
  %181 = and i32 %27, %24
  %182 = xor i32 %11, %2
  %183 = and i32 %12, %109
  %184 = or i32 %148, %172
  %185 = and i32 %52, %2
  %186 = shl i32 %185, 1
  %187 = xor i32 %32, %30
  %188 = or i32 %58, %24
  %189 = or i32 %31, %91
  %190 = xor i32 %109, %2
  %191 = xor i32 %43, %0
  %192 = shl i32 %191, 2
  %193 = xor i32 %52, %2
  %194 = or i32 %53, %2
  %195 = and i32 %32, %25
  %196 = or i32 %65, %68
  %197 = and i32 %31, %25
  %198 = xor i32 %80, %101
  %199 = or i32 %12, %91
  %200 = or i32 %24, %31
  %201 = or i32 %45, %0
  %202 = or i32 %27, %24
  %203 = xor i32 %77, %30
  %204 = xor i32 %35, %49
  %205 = or i32 %33, %1
  %206 = and i32 %77, %0
  %207 = or i32 %65, %31
  %208 = or i32 %68, %91
  %209 = or i32 %77, %41
  %210 = shl i32 %209, 1
  %211 = xor i32 %58, %1
  %212 = or i32 %31, %53
  %213 = or i32 %97, %41
  %214 = and i32 %49, %0
  %215 = and i32 %27, %52
  %216 = or i32 %97, %0
  %217 = and i32 %72, %1
  %218 = or i32 %12, %0
  %219 = and i32 %68, %0
  %220 = xor i32 %35, %77
  %221 = or i32 %24, %63
  %222 = and i32 %72, %51
  %223 = or i32 %63, %1
  %224 = shl i32 %223, 1
  %225 = and i32 %79, %41
  %226 = mul i32 %225, -13
  %227 = and i32 %55, %41
  %228 = shl i32 %227, 2
  %229 = and i32 %79, %0
  %230 = mul i32 %229, -9
  %231 = and i32 %55, %0
  %232 = shl i32 %231, 4
  %233 = and i32 %97, %41
  %234 = mul i32 %233, 22
  %235 = shl i32 %113, 1
  %236 = and i32 %97, %0
  %237 = add i32 %190, %1
  %238 = add i32 %237, %74
  %239 = add i32 %238, %222
  %240 = add i32 %239, %211
  %241 = add i32 %240, %177
  %242 = add i32 %241, %167
  %243 = add i32 %242, %137
  %244 = add i32 %243, %135
  %245 = add i32 %244, %134
  %246 = add i32 %245, %129
  %247 = add i32 %246, %127
  %248 = add i32 %247, %122
  %249 = add i32 %248, %100
  %250 = add i32 %249, %96
  %251 = add i32 %250, %151
  %252 = shl i32 %251, 1
  %253 = add i32 %171, %83
  %254 = sub i32 %236, %253
  %255 = add i32 %254, %108
  %256 = add i32 %255, %54
  %257 = mul i32 %256, 3
  %258 = add i32 %76, %68
  %259 = sub i32 %258, %205
  %260 = add i32 %259, %22
  %261 = add i32 %260, %17
  %262 = mul i32 %261, 5
  %263 = add i32 %221, %181
  %264 = shl i32 %263, 2
  %265 = sub i32 -4, %1
  %266 = add i32 %265, %24
  %267 = add i32 %266, %11
  %268 = add i32 %267, %65
  %269 = add i32 %268, %24
  %270 = add i32 %269, 4
  %271 = sub i32 %270, %3
  %272 = sub i32 %271, %35
  %273 = add i32 %272, %64
  %274 = sub i32 %273, %67
  %275 = add i32 %274, %71
  %276 = add i32 %275, %105
  %277 = sub i32 %276, %110
  %278 = add i32 %277, %111
  %279 = sub i32 %278, %55
  %280 = add i32 %279, %120
  %281 = add i32 %280, %124
  %282 = add i32 %281, %131
  %283 = add i32 %282, %38
  %284 = sub i32 %283, %27
  %285 = add i32 %284, %152
  %286 = sub i32 %285, %77
  %287 = sub i32 %286, %154
  %288 = sub i32 %287, %156
  %289 = add i32 %288, %165
  %290 = add i32 %289, %43
  %291 = sub i32 %290, %182
  %292 = add i32 %291, %189
  %293 = add i32 %292, %28
  %294 = add i32 %293, %193
  %295 = sub i32 %294, %194
  %296 = add i32 %295, %197
  %297 = sub i32 %296, %200
  %298 = add i32 %297, %207
  %299 = sub i32 %298, %212
  %300 = add i32 %299, %4
  %301 = sub i32 %300, %26
  %302 = sub i32 %301, %29
  %303 = add i32 %302, %34
  %304 = sub i32 %303, %37
  %305 = add i32 %304, %42
  %306 = add i32 %305, %50
  %307 = sub i32 %306, %60
  %308 = sub i32 %307, %61
  %309 = add i32 %308, %62
  %310 = add i32 %309, %73
  %311 = sub i32 %310, %75
  %312 = sub i32 %311, %78
  %313 = sub i32 %312, %82
  %314 = add i32 %313, %84
  %315 = sub i32 %314, %85
  %316 = add i32 %315, %92
  %317 = add i32 %316, %93
  %318 = sub i32 %317, %94
  %319 = add i32 %318, %95
  %320 = sub i32 %319, %103
  %321 = add i32 %320, %104
  %322 = sub i32 %321, %107
  %323 = add i32 %322, %112
  %324 = add i32 %323, %117
  %325 = sub i32 %324, %121
  %326 = add i32 %325, %123
  %327 = add i32 %326, %128
  %328 = sub i32 %327, %130
  %329 = add i32 %328, %46
  %330 = sub i32 %329, %136
  %331 = add i32 %330, %80
  %332 = sub i32 %331, %138
  %333 = add i32 %332, %139
  %334 = sub i32 %333, %140
  %335 = add i32 %334, %141
  %336 = sub i32 %335, %142
  %337 = sub i32 %336, %143
  %338 = sub i32 %337, %145
  %339 = sub i32 %338, %146
  %340 = sub i32 %339, %147
  %341 = sub i32 %340, %153
  %342 = add i32 %341, %155
  %343 = sub i32 %342, %157
  %344 = sub i32 %343, %158
  %345 = sub i32 %344, %159
  %346 = sub i32 %345, %160
  %347 = add i32 %346, %161
  %348 = add i32 %347, %164
  %349 = sub i32 %348, %166
  %350 = add i32 %349, %168
  %351 = sub i32 %350, %169
  %352 = sub i32 %351, %170
  %353 = sub i32 %352, %175
  %354 = add i32 %353, %176
  %355 = sub i32 %354, %179
  %356 = add i32 %355, %180
  %357 = sub i32 %356, %183
  %358 = sub i32 %357, %186
  %359 = add i32 %358, %187
  %360 = add i32 %359, %188
  %361 = sub i32 %360, %195
  %362 = sub i32 %361, %196
  %363 = sub i32 %362, %199
  %364 = sub i32 %363, %201
  %365 = sub i32 %364, %202
  %366 = add i32 %365, %114
  %367 = add i32 %366, %203
  %368 = sub i32 %367, %204
  %369 = sub i32 %368, %206
  %370 = sub i32 %369, %208
  %371 = sub i32 %370, %162
  %372 = sub i32 %371, %213
  %373 = add i32 %372, %214
  %374 = add i32 %373, %215
  %375 = sub i32 %374, %216
  %376 = add i32 %375, %217
  %377 = add i32 %376, %218
  %378 = sub i32 %377, %219
  %379 = add i32 %378, %220
  %380 = sub i32 %379, %44
  %381 = sub i32 %380, %16
  %382 = add i32 %381, %18
  %383 = add i32 %382, %19
  %384 = add i32 %383, %8
  %385 = sub i32 %384, %40
  %386 = add i32 %385, %48
  %387 = sub i32 %386, %57
  %388 = sub i32 %387, %70
  %389 = sub i32 %388, %81
  %390 = sub i32 %389, %90
  %391 = sub i32 %390, %99
  %392 = add i32 %391, %102
  %393 = add i32 %392, %116
  %394 = sub i32 %393, %119
  %395 = sub i32 %394, %126
  %396 = sub i32 %395, %133
  %397 = add i32 %396, %163
  %398 = sub i32 %397, %174
  %399 = sub i32 %398, %184
  %400 = sub i32 %399, %192
  %401 = sub i32 %400, %198
  %402 = sub i32 %401, %210
  %403 = sub i32 %402, %224
  %404 = add i32 %403, %226
  %405 = sub i32 %404, %228
  %406 = add i32 %405, %230
  %407 = add i32 %406, %232
  %408 = add i32 %407, %234
  %409 = sub i32 %408, %235
  %410 = add i32 %409, %21
  %411 = add i32 %410, %264
  %412 = add i32 %411, %257
  %413 = add i32 %412, %262
  %414 = add i32 %413, %252
  %415 = icmp eq i32 %15, %414
  %416 = select i1 %415, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %417 = tail call i32 @puts(i8* nonnull dereferenceable(1) %416)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
