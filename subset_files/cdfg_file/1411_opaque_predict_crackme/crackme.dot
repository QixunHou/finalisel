digraph "DFG for'crackme' function" {
	Node0x23944b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x2394b60[shape=record, label="  %4 = shl i32 %1, 1"];
	Node0x2394c20[shape=record, label="  %5 = sub i32 %3, %4"];
	Node0x2394c90[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x2394d00[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x2394d70[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x2394e10[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x2394e80[shape=record, label="  %10 = and i32 %6, %0"];
	Node0x2394ef0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x2394f60[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x2394fd0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x2395070[shape=record, label="  %14 = mul i32 %7, -6"];
	Node0x23950e0[shape=record, label="  %15 = add i32 %10, %0"];
	Node0x2395150[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x23951c0[shape=record, label="  %17 = sub i32 %1, %3"];
	Node0x2395230[shape=record, label="  %18 = add i32 %17, %11"];
	Node0x23952a0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x2395310[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x2395380[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x23953f0[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x2395460[shape=record, label="  %23 = icmp eq i32 %5, %22"];
	Node0x2335268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2395900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x2395950[shape=record, label="  ret void"];
	Node0x23944b0 -> Node0x2394b60;
	Node0x2394b60 -> Node0x2394c20;
	Node0x2394c20 -> Node0x2394c90;
	Node0x2394c90 -> Node0x2394d00;
	Node0x2394d00 -> Node0x2394d70;
	Node0x2394d70 -> Node0x2394e10;
	Node0x2394e10 -> Node0x2394e80;
	Node0x2394e80 -> Node0x2394ef0;
	Node0x2394ef0 -> Node0x2394f60;
	Node0x2394f60 -> Node0x2394fd0;
	Node0x2394fd0 -> Node0x2395070;
	Node0x2395070 -> Node0x23950e0;
	Node0x23950e0 -> Node0x2395150;
	Node0x2395150 -> Node0x23951c0;
	Node0x23951c0 -> Node0x2395230;
	Node0x2395230 -> Node0x23952a0;
	Node0x23952a0 -> Node0x2395310;
	Node0x2395310 -> Node0x2395380;
	Node0x2395380 -> Node0x23953f0;
	Node0x23953f0 -> Node0x2395460;
	Node0x2395460 -> Node0x2335268;
	Node0x2335268 -> Node0x2395900;
	Node0x2395900 -> Node0x2395950;
edge [color=red]
	Node0x23944b0 -> Node0x2394c20;
	Node0x2394b60 -> Node0x2394c20;
	Node0x2394d00 -> Node0x2394d70;
	Node0x2394d70 -> Node0x2394e10;
	Node0x2394c90 -> Node0x2394e80;
	Node0x2394e80 -> Node0x2394ef0;
	Node0x2394f60 -> Node0x2394fd0;
	Node0x2394d00 -> Node0x2395070;
	Node0x2394e80 -> Node0x23950e0;
	Node0x23950e0 -> Node0x2395150;
	Node0x23944b0 -> Node0x23951c0;
	Node0x23951c0 -> Node0x2395230;
	Node0x2394ef0 -> Node0x2395230;
	Node0x2395230 -> Node0x23952a0;
	Node0x2394fd0 -> Node0x23952a0;
	Node0x23952a0 -> Node0x2395310;
	Node0x2395070 -> Node0x2395310;
	Node0x2395310 -> Node0x2395380;
	Node0x2394e10 -> Node0x2395380;
	Node0x2395380 -> Node0x23953f0;
	Node0x2395150 -> Node0x23953f0;
	Node0x2394c20 -> Node0x2395460;
	Node0x23953f0 -> Node0x2395460;
	Node0x2395460 -> Node0x2335268;
	Node0x2335268 -> Node0x2395900;
}
