; ModuleID = '../.././c_source_file/0673_path_condition_crackme.c'
source_filename = "../.././c_source_file/0673_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %2, -1
  %7 = and i32 %6, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %1, %0
  %10 = and i32 %9, %8
  %11 = sub i32 2, %10
  %12 = and i32 %2, %0
  %13 = or i32 %12, %1
  %14 = add i32 %11, %13
  %15 = xor i32 %4, -1
  %16 = or i32 %15, %3
  %17 = and i32 %15, %3
  %18 = add i32 %16, 1
  %19 = xor i32 %2, %1
  %20 = and i32 %19, %0
  %21 = or i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = or i32 %22, %2
  %24 = or i32 %6, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %1
  %27 = or i32 %12, %9
  %28 = xor i32 %0, -1
  %29 = xor i32 %19, -1
  %30 = and i32 %29, %28
  %31 = xor i32 %9, -1
  %32 = or i32 %7, %31
  %33 = or i32 %6, %22
  %34 = xor i32 %1, -1
  %35 = and i32 %34, %2
  %36 = and i32 %35, %0
  %37 = or i32 %34, %2
  %38 = xor i32 %37, %0
  %39 = or i32 %36, %38
  %40 = or i32 %6, %31
  %41 = or i32 %9, %25
  %42 = xor i32 %2, %0
  %43 = or i32 %42, %34
  %44 = shl i32 %43, 1
  %45 = and i32 %6, %1
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %28
  %48 = and i32 %42, %1
  %49 = or i32 %7, %9
  %50 = and i32 %24, %1
  %51 = and i32 %9, %6
  %52 = or i32 %2, %1
  %53 = xor i32 %52, -1
  %54 = xor i32 %53, %0
  %55 = and i32 %2, %1
  %56 = or i32 %7, %55
  %57 = and i32 %35, %28
  %58 = and i32 %37, %0
  %59 = or i32 %57, %58
  %60 = and i32 %55, %28
  %61 = xor i32 %20, -1
  %62 = xor i32 %60, %61
  %63 = or i32 %34, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %6, %64
  %66 = and i32 %55, %0
  %67 = and i32 %19, %28
  %68 = or i32 %66, %67
  %69 = and i32 %21, %6
  %70 = xor i32 %64, %2
  %71 = xor i32 %55, %0
  %72 = xor i32 %42, -1
  %73 = or i32 %72, %34
  %74 = xor i32 %8, %1
  %75 = and i32 %1, %0
  %76 = or i32 %75, %2
  %77 = and i32 %34, %0
  %78 = xor i32 %77, -1
  %79 = xor i32 %78, %2
  %80 = shl i32 %79, 1
  %81 = or i32 %42, %9
  %82 = shl i32 %81, 1
  %83 = or i32 %6, %1
  %84 = xor i32 %83, %75
  %85 = xor i32 %77, %2
  %86 = xor i32 %12, %21
  %87 = xor i32 %12, %52
  %88 = or i32 %55, %0
  %89 = or i32 %12, %64
  %90 = or i32 %29, %22
  %91 = and i32 %9, %2
  %92 = xor i32 %75, -1
  %93 = add i32 %75, 1
  %94 = or i32 %29, %64
  %95 = shl i32 %94, 1
  %96 = and i32 %9, %72
  %97 = xor i32 %12, %46
  %98 = xor i32 %77, %46
  %99 = and i32 %52, %0
  %100 = shl i32 %99, 1
  %101 = or i32 %2, %0
  %102 = xor i32 %101, -1
  %103 = and i32 %29, %78
  %104 = and i32 %42, %21
  %105 = and i32 %42, %92
  %106 = or i32 %12, %31
  %107 = or i32 %9, %72
  %108 = or i32 %75, %72
  %109 = add i32 %77, 1
  %110 = or i32 %83, %28
  %111 = xor i32 %55, -1
  %112 = xor i32 %111, %0
  %113 = xor i32 %19, %0
  %114 = or i32 %12, %53
  %115 = or i32 %19, %75
  %116 = xor i32 %12, -1
  %117 = xor i32 %116, %1
  %118 = and i32 %111, %28
  %119 = or i32 %53, %28
  %120 = and i32 %19, %92
  %121 = xor i32 %75, %2
  %122 = or i32 %45, %77
  %123 = or i32 %72, %1
  %124 = shl i32 %123, 1
  %125 = and i32 %21, %29
  %126 = and i32 %83, %0
  %127 = xor i32 %45, %0
  %128 = and i32 %52, %28
  %129 = xor i32 %128, -1
  %130 = xor i32 %66, %129
  %131 = and i32 %19, %21
  %132 = xor i32 %7, %1
  %133 = or i32 %72, %64
  %134 = or i32 %9, %6
  %135 = and i32 %42, %31
  %136 = or i32 %72, %22
  %137 = and i32 %42, %9
  %138 = xor i32 %101, %75
  %139 = and i32 %101, %31
  %140 = shl i32 %139, 1
  %141 = xor i32 %37, -1
  %142 = or i32 %141, %0
  %143 = xor i32 %36, %142
  %144 = and i32 %72, %78
  %145 = and i32 %116, %31
  %146 = or i32 %19, %28
  %147 = and i32 %31, %2
  %148 = or i32 %77, %2
  %149 = xor i32 %113, -1
  %150 = xor i32 %36, %149
  %151 = and i32 %24, %34
  %152 = shl i32 %151, 1
  %153 = shl i32 %53, 2
  %154 = or i32 %19, %0
  %155 = xor i32 %36, %154
  %156 = or i32 %9, %2
  %157 = xor i32 %24, %1
  %158 = xor i32 %83, -1
  %159 = and i32 %24, %9
  %160 = xor i32 %12, %1
  %161 = add i32 %2, 1
  %162 = xor i32 %7, %111
  %163 = and i32 %111, %0
  %164 = or i32 %66, %149
  %165 = or i32 %83, %0
  %166 = and i32 %29, %92
  %167 = and i32 %9, %116
  %168 = or i32 %102, %31
  %169 = or i32 %52, %28
  %170 = or i32 %46, %0
  %171 = and i32 %116, %34
  %172 = and i32 %92, %2
  %173 = or i32 %64, %2
  %174 = and i32 %19, %78
  %175 = shl i32 %174, 1
  %176 = or i32 %53, %0
  %177 = shl i32 %176, 1
  %178 = and i32 %21, %72
  %179 = xor i32 %101, %1
  %180 = or i32 %9, %102
  %181 = xor i32 %12, %63
  %182 = or i32 %42, %64
  %183 = xor i32 %99, 2147483647
  %184 = xor i32 %183, %60
  %185 = shl i32 %184, 1
  %186 = xor i32 %52, %0
  %187 = or i32 %12, %34
  %188 = shl i32 %187, 1
  %189 = or i32 %75, %158
  %190 = or i32 %77, %72
  %191 = or i32 %75, %6
  %192 = or i32 %29, %0
  %193 = add i32 %7, 1
  %194 = or i32 %19, %77
  %195 = and i32 %116, %1
  %196 = or i32 %25, %34
  %197 = shl i32 %196, 1
  %198 = or i32 %77, %6
  %199 = and i32 %46, %28
  %200 = or i32 %7, %158
  %201 = or i32 %75, %29
  %202 = shl i32 %201, 1
  %203 = or i32 %42, %75
  %204 = xor i32 %158, %0
  %205 = xor i32 %77, %111
  %206 = or i32 %45, %28
  %207 = and i32 %72, %31
  %208 = and i32 %83, %28
  %209 = or i32 %7, %34
  %210 = and i32 %42, %34
  %211 = xor i32 %52, %75
  %212 = or i32 %55, %77
  %213 = or i32 %52, %0
  %214 = or i32 %77, %29
  %215 = xor i32 %22, %2
  %216 = xor i32 %46, %0
  %217 = or i32 %75, %102
  %218 = shl i32 %21, 1
  %219 = and i32 %24, %31
  %220 = or i32 %75, %53
  %221 = and i32 %46, %0
  %222 = or i32 %72, %31
  %223 = xor i32 %83, %0
  %224 = and i32 %8, %31
  %225 = shl i32 %25, 1
  %226 = add i32 %12, 1
  %227 = and i32 %6, %31
  %228 = or i32 %45, %0
  %229 = or i32 %66, %186
  %230 = or i32 %111, %0
  %231 = and i32 %6, %78
  %232 = and i32 %72, %1
  %233 = xor i32 %57, %146
  %234 = or i32 %19, %22
  %235 = or i32 %158, %28
  %236 = xor i32 %63, %2
  %237 = and i32 %78, %2
  %238 = and i32 %101, %9
  %239 = or i32 %60, %20
  %240 = or i32 %12, %45
  %241 = or i32 %42, %31
  %242 = and i32 %53, %28
  %243 = mul i32 %242, 18
  %244 = and i32 %45, %28
  %245 = and i32 %53, %0
  %246 = mul i32 %245, 14
  %247 = and i32 %45, %0
  %248 = and i32 %158, %28
  %249 = shl i32 %248, 1
  %250 = mul i32 %60, 15
  %251 = and i32 %158, %0
  %252 = mul i32 %66, 10
  %253 = add i32 %193, %77
  %254 = sub i32 %253, %65
  %255 = sub i32 %254, %247
  %256 = mul i32 %255, 5
  %257 = add i32 %244, %181
  %258 = add i32 %257, %138
  %259 = shl i32 %258, 2
  %260 = sub i32 %18, %7
  %261 = add i32 %260, %233
  %262 = mul i32 %261, 3
  %263 = sub i32 -2, %63
  %264 = add i32 %263, %237
  %265 = add i32 %264, %134
  %266 = add i32 %265, %102
  %267 = add i32 %266, %76
  %268 = add i32 %267, %234
  %269 = add i32 %268, %67
  %270 = add i32 %269, %200
  %271 = add i32 %270, %195
  %272 = add i32 %271, %194
  %273 = add i32 %272, %178
  %274 = add i32 %273, %146
  %275 = add i32 %274, %145
  %276 = add i32 %275, %115
  %277 = add i32 %276, %113
  %278 = add i32 %277, %112
  %279 = add i32 %278, %108
  %280 = add i32 %279, %86
  %281 = add i32 %280, %30
  %282 = add i32 %281, %4
  %283 = sub i32 %282, %3
  %284 = add i32 %283, %39
  %285 = add i32 %284, %17
  %286 = shl i32 %285, 1
  %287 = add i32 %1, 6
  %288 = add i32 %287, %1
  %289 = add i32 %288, %93
  %290 = sub i32 %289, %2
  %291 = sub i32 %290, %63
  %292 = add i32 %291, %109
  %293 = add i32 %292, %161
  %294 = sub i32 %293, %9
  %295 = add i32 %294, %31
  %296 = sub i32 %295, %75
  %297 = sub i32 %296, %23
  %298 = sub i32 %297, %33
  %299 = sub i32 %298, %40
  %300 = add i32 %299, %24
  %301 = sub i32 %300, %51
  %302 = add i32 %301, %69
  %303 = add i32 %302, %70
  %304 = add i32 %303, %12
  %305 = sub i32 %304, %85
  %306 = sub i32 %305, %91
  %307 = sub i32 %306, %52
  %308 = add i32 %307, %121
  %309 = add i32 %308, %147
  %310 = add i32 %309, %148
  %311 = add i32 %310, %156
  %312 = sub i32 %311, %55
  %313 = sub i32 %312, %172
  %314 = sub i32 %313, %173
  %315 = sub i32 %314, %101
  %316 = add i32 %315, %29
  %317 = add i32 %316, %191
  %318 = add i32 %317, %198
  %319 = add i32 %318, 1
  %320 = sub i32 %319, %215
  %321 = sub i32 %320, %218
  %322 = add i32 %321, %45
  %323 = add i32 %322, %226
  %324 = add i32 %323, %227
  %325 = sub i32 %324, %231
  %326 = add i32 %325, %236
  %327 = sub i32 %326, %20
  %328 = add i32 %327, %26
  %329 = add i32 %328, %27
  %330 = add i32 %329, %32
  %331 = add i32 %330, %41
  %332 = sub i32 %331, %47
  %333 = sub i32 %332, %48
  %334 = sub i32 %333, %49
  %335 = add i32 %334, %50
  %336 = sub i32 %335, %54
  %337 = sub i32 %336, %56
  %338 = add i32 %337, %71
  %339 = add i32 %338, %73
  %340 = add i32 %339, %74
  %341 = sub i32 %340, %80
  %342 = sub i32 %341, %84
  %343 = sub i32 %342, %87
  %344 = add i32 %343, %88
  %345 = sub i32 %344, %89
  %346 = sub i32 %345, %90
  %347 = add i32 %346, %96
  %348 = sub i32 %347, %97
  %349 = add i32 %348, %98
  %350 = add i32 %349, %103
  %351 = add i32 %350, %104
  %352 = sub i32 %351, %105
  %353 = add i32 %352, %106
  %354 = sub i32 %353, %107
  %355 = add i32 %354, %110
  %356 = sub i32 %355, %114
  %357 = sub i32 %356, %117
  %358 = add i32 %357, %118
  %359 = add i32 %358, %119
  %360 = add i32 %359, %120
  %361 = sub i32 %360, %122
  %362 = add i32 %361, %125
  %363 = add i32 %362, %126
  %364 = sub i32 %363, %127
  %365 = add i32 %364, %131
  %366 = sub i32 %365, %132
  %367 = add i32 %366, %133
  %368 = add i32 %367, %135
  %369 = sub i32 %368, %136
  %370 = add i32 %369, %137
  %371 = sub i32 %370, %144
  %372 = sub i32 %371, %153
  %373 = add i32 %372, %154
  %374 = add i32 %373, %157
  %375 = add i32 %374, %159
  %376 = sub i32 %375, %160
  %377 = add i32 %376, %162
  %378 = add i32 %377, %163
  %379 = add i32 %378, %165
  %380 = sub i32 %379, %166
  %381 = sub i32 %380, %167
  %382 = sub i32 %381, %168
  %383 = add i32 %382, %169
  %384 = sub i32 %383, %170
  %385 = sub i32 %384, %171
  %386 = add i32 %385, %128
  %387 = sub i32 %386, %179
  %388 = sub i32 %387, %180
  %389 = add i32 %388, %182
  %390 = sub i32 %389, %186
  %391 = sub i32 %390, %189
  %392 = add i32 %391, %190
  %393 = sub i32 %392, %192
  %394 = add i32 %393, %199
  %395 = add i32 %394, %203
  %396 = sub i32 %395, %204
  %397 = sub i32 %396, %205
  %398 = sub i32 %397, %206
  %399 = sub i32 %398, %207
  %400 = add i32 %399, %208
  %401 = add i32 %400, %209
  %402 = add i32 %401, %210
  %403 = sub i32 %402, %211
  %404 = sub i32 %403, %212
  %405 = add i32 %404, %213
  %406 = add i32 %405, %214
  %407 = sub i32 %406, %216
  %408 = sub i32 %407, %217
  %409 = add i32 %408, %219
  %410 = add i32 %409, %220
  %411 = add i32 %410, %221
  %412 = sub i32 %411, %222
  %413 = sub i32 %412, %223
  %414 = add i32 %413, %224
  %415 = sub i32 %414, %225
  %416 = add i32 %415, %228
  %417 = sub i32 %416, %230
  %418 = sub i32 %417, %232
  %419 = sub i32 %418, %235
  %420 = sub i32 %419, %238
  %421 = add i32 %420, %240
  %422 = add i32 %421, %241
  %423 = sub i32 %422, %251
  %424 = sub i32 %423, %16
  %425 = sub i32 %424, %44
  %426 = add i32 %425, %59
  %427 = sub i32 %426, %62
  %428 = sub i32 %427, %68
  %429 = sub i32 %428, %82
  %430 = sub i32 %429, %95
  %431 = sub i32 %430, %100
  %432 = sub i32 %431, %124
  %433 = sub i32 %432, %130
  %434 = sub i32 %433, %140
  %435 = sub i32 %434, %143
  %436 = add i32 %435, %150
  %437 = sub i32 %436, %152
  %438 = add i32 %437, %155
  %439 = add i32 %438, %164
  %440 = sub i32 %439, %175
  %441 = sub i32 %440, %177
  %442 = sub i32 %441, %188
  %443 = sub i32 %442, %197
  %444 = sub i32 %443, %202
  %445 = sub i32 %444, %229
  %446 = sub i32 %445, %239
  %447 = add i32 %446, %243
  %448 = add i32 %447, %246
  %449 = sub i32 %448, %249
  %450 = add i32 %449, %250
  %451 = add i32 %450, %252
  %452 = sub i32 %451, %185
  %453 = add i32 %452, %259
  %454 = add i32 %453, %256
  %455 = add i32 %454, %262
  %456 = add i32 %455, %286
  %457 = icmp eq i32 %14, %456
  %458 = select i1 %457, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %459 = tail call i32 @puts(i8* nonnull dereferenceable(1) %458)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
