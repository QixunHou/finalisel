digraph "DFG for'crackme' function" {
	Node0x1f3c140[shape=record, label="  %5 = shl i32 %2, 1"];
	Node0x1f3c1e0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x1f3c280[shape=record, label="  %7 = xor i32 %3, -1"];
	Node0x1f3c2f0[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x1f3c360[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1f3c3d0[shape=record, label="  %10 = add i32 %2, -1"];
	Node0x1f3c440[shape=record, label="  %11 = add i32 %10, %6"];
	Node0x1f3c4b0[shape=record, label="  %12 = add i32 %11, %9"];
	Node0x1f3c520[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x1f3c590[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1f3c600[shape=record, label="  %15 = xor i32 %1, -1"];
	Node0x1f3c670[shape=record, label="  %16 = or i32 %15, %2"];
	Node0x1f3c6e0[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x1f3c780[shape=record, label="  %18 = xor i32 %1, 2147483647"];
	Node0x1f3c7f0[shape=record, label="  %19 = and i32 %18, %2"];
	Node0x1f3c860[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x1f3c8d0[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x1f3c940[shape=record, label="  %22 = xor i32 %0, -1"];
	Node0x1f3c9b0[shape=record, label="  %23 = or i32 %22, %3"];
	Node0x1f3ca50[shape=record, label="  %24 = mul i32 %7, -5"];
	Node0x1f3cac0[shape=record, label="  %25 = xor i32 %22, %3"];
	Node0x1f3cb30[shape=record, label="  %26 = or i32 %7, %0"];
	Node0x1f3cba0[shape=record, label="  %27 = xor i32 %21, -1"];
	Node0x1f3cc40[shape=record, label="  %28 = mul i32 %27, 7"];
	Node0x1f3cce0[shape=record, label="  %29 = shl i32 %23, 3"];
	Node0x1f3cd80[shape=record, label="  %30 = xor i32 %29, -8"];
	Node0x1f3cdf0[shape=record, label="  %31 = shl i32 %22, 1"];
	Node0x1f3ce60[shape=record, label="  %32 = add i32 %31, %16"];
	Node0x1f3d0e0[shape=record, label="  %33 = sub i32 %32, %17"];
	Node0x1f3d150[shape=record, label="  %34 = add i32 %33, %3"];
	Node0x1f3d1c0[shape=record, label="  %35 = add i32 %34, %14"];
	Node0x1f3d230[shape=record, label="  %36 = sub i32 %35, %20"];
	Node0x1f3d2a0[shape=record, label="  %37 = add i32 %36, %21"];
	Node0x1f3d310[shape=record, label="  %38 = sub i32 %37, %23"];
	Node0x1f3d380[shape=record, label="  %39 = add i32 %38, %24"];
	Node0x1f3d3f0[shape=record, label="  %40 = add i32 %39, %25"];
	Node0x1f3d460[shape=record, label="  %41 = sub i32 %40, %26"];
	Node0x1f3d4d0[shape=record, label="  %42 = add i32 %41, %8"];
	Node0x1f3d540[shape=record, label="  %43 = add i32 %42, %28"];
	Node0x1f3d5b0[shape=record, label="  %44 = add i32 %43, %30"];
	Node0x1f3d620[shape=record, label="  %45 = icmp eq i32 %12, %44"];
	Node0x1edc268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f3dac0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x1f3db10[shape=record, label="  ret void"];
	Node0x1f3c140 -> Node0x1f3c1e0;
	Node0x1f3c1e0 -> Node0x1f3c280;
	Node0x1f3c280 -> Node0x1f3c2f0;
	Node0x1f3c2f0 -> Node0x1f3c360;
	Node0x1f3c360 -> Node0x1f3c3d0;
	Node0x1f3c3d0 -> Node0x1f3c440;
	Node0x1f3c440 -> Node0x1f3c4b0;
	Node0x1f3c4b0 -> Node0x1f3c520;
	Node0x1f3c520 -> Node0x1f3c590;
	Node0x1f3c590 -> Node0x1f3c600;
	Node0x1f3c600 -> Node0x1f3c670;
	Node0x1f3c670 -> Node0x1f3c6e0;
	Node0x1f3c6e0 -> Node0x1f3c780;
	Node0x1f3c780 -> Node0x1f3c7f0;
	Node0x1f3c7f0 -> Node0x1f3c860;
	Node0x1f3c860 -> Node0x1f3c8d0;
	Node0x1f3c8d0 -> Node0x1f3c940;
	Node0x1f3c940 -> Node0x1f3c9b0;
	Node0x1f3c9b0 -> Node0x1f3ca50;
	Node0x1f3ca50 -> Node0x1f3cac0;
	Node0x1f3cac0 -> Node0x1f3cb30;
	Node0x1f3cb30 -> Node0x1f3cba0;
	Node0x1f3cba0 -> Node0x1f3cc40;
	Node0x1f3cc40 -> Node0x1f3cce0;
	Node0x1f3cce0 -> Node0x1f3cd80;
	Node0x1f3cd80 -> Node0x1f3cdf0;
	Node0x1f3cdf0 -> Node0x1f3ce60;
	Node0x1f3ce60 -> Node0x1f3d0e0;
	Node0x1f3d0e0 -> Node0x1f3d150;
	Node0x1f3d150 -> Node0x1f3d1c0;
	Node0x1f3d1c0 -> Node0x1f3d230;
	Node0x1f3d230 -> Node0x1f3d2a0;
	Node0x1f3d2a0 -> Node0x1f3d310;
	Node0x1f3d310 -> Node0x1f3d380;
	Node0x1f3d380 -> Node0x1f3d3f0;
	Node0x1f3d3f0 -> Node0x1f3d460;
	Node0x1f3d460 -> Node0x1f3d4d0;
	Node0x1f3d4d0 -> Node0x1f3d540;
	Node0x1f3d540 -> Node0x1f3d5b0;
	Node0x1f3d5b0 -> Node0x1f3d620;
	Node0x1f3d620 -> Node0x1edc268;
	Node0x1edc268 -> Node0x1f3dac0;
	Node0x1f3dac0 -> Node0x1f3db10;
edge [color=red]
	Node0x1f3c140 -> Node0x1f3c1e0;
	Node0x1f3c2f0 -> Node0x1f3c360;
	Node0x1f3c3d0 -> Node0x1f3c440;
	Node0x1f3c1e0 -> Node0x1f3c440;
	Node0x1f3c440 -> Node0x1f3c4b0;
	Node0x1f3c360 -> Node0x1f3c4b0;
	Node0x1f3c520 -> Node0x1f3c590;
	Node0x1f3c600 -> Node0x1f3c670;
	Node0x1f3c780 -> Node0x1f3c7f0;
	Node0x1f3c7f0 -> Node0x1f3c860;
	Node0x1f3c940 -> Node0x1f3c9b0;
	Node0x1f3c280 -> Node0x1f3ca50;
	Node0x1f3c940 -> Node0x1f3cac0;
	Node0x1f3c280 -> Node0x1f3cb30;
	Node0x1f3c8d0 -> Node0x1f3cba0;
	Node0x1f3cba0 -> Node0x1f3cc40;
	Node0x1f3c9b0 -> Node0x1f3cce0;
	Node0x1f3cce0 -> Node0x1f3cd80;
	Node0x1f3c940 -> Node0x1f3cdf0;
	Node0x1f3cdf0 -> Node0x1f3ce60;
	Node0x1f3c670 -> Node0x1f3ce60;
	Node0x1f3ce60 -> Node0x1f3d0e0;
	Node0x1f3c6e0 -> Node0x1f3d0e0;
	Node0x1f3d0e0 -> Node0x1f3d150;
	Node0x1f3d150 -> Node0x1f3d1c0;
	Node0x1f3c590 -> Node0x1f3d1c0;
	Node0x1f3d1c0 -> Node0x1f3d230;
	Node0x1f3c860 -> Node0x1f3d230;
	Node0x1f3d230 -> Node0x1f3d2a0;
	Node0x1f3c8d0 -> Node0x1f3d2a0;
	Node0x1f3d2a0 -> Node0x1f3d310;
	Node0x1f3c9b0 -> Node0x1f3d310;
	Node0x1f3d310 -> Node0x1f3d380;
	Node0x1f3ca50 -> Node0x1f3d380;
	Node0x1f3d380 -> Node0x1f3d3f0;
	Node0x1f3cac0 -> Node0x1f3d3f0;
	Node0x1f3d3f0 -> Node0x1f3d460;
	Node0x1f3cb30 -> Node0x1f3d460;
	Node0x1f3d460 -> Node0x1f3d4d0;
	Node0x1f3c2f0 -> Node0x1f3d4d0;
	Node0x1f3d4d0 -> Node0x1f3d540;
	Node0x1f3cc40 -> Node0x1f3d540;
	Node0x1f3d540 -> Node0x1f3d5b0;
	Node0x1f3cd80 -> Node0x1f3d5b0;
	Node0x1f3c4b0 -> Node0x1f3d620;
	Node0x1f3d5b0 -> Node0x1f3d620;
	Node0x1f3d620 -> Node0x1edc268;
	Node0x1edc268 -> Node0x1f3dac0;
}
