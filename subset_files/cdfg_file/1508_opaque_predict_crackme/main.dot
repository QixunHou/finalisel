digraph "DFG for'main' function" {
	Node0xaf7fc8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xaf8048[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xaf80d8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xaf8138[shape=record, label="  %4 = alloca i32, align 4"];
	Node0xaf81e8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0xaf8618[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xaf86f8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0xaf87f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xaf88b8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0xaf8968[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xaf8a28[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0xaf8ad8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xaf2810[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0xaf8cd8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xaf9c48[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xafa2b8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xafa318[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0xafa428[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0xafa688[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xafa7e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xafa8f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xafaa08[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xafaac8[shape=record, label="  ret i32 0"];
	Node0xaf7fc8 -> Node0xaf8048;
	Node0xaf8048 -> Node0xaf80d8;
	Node0xaf80d8 -> Node0xaf8138;
	Node0xaf8138 -> Node0xaf81e8;
	Node0xaf81e8 -> Node0xaf8618;
	Node0xaf8618 -> Node0xaf86f8;
	Node0xaf86f8 -> Node0xaf87f8;
	Node0xaf87f8 -> Node0xaf88b8;
	Node0xaf88b8 -> Node0xaf8968;
	Node0xaf8968 -> Node0xaf8a28;
	Node0xaf8a28 -> Node0xaf8ad8;
	Node0xaf8ad8 -> Node0xaf2810;
	Node0xaf2810 -> Node0xaf8cd8;
	Node0xaf8cd8 -> Node0xaf9c48;
	Node0xaf9c48 -> Node0xafa2b8;
	Node0xafa2b8 -> Node0xafa318;
	Node0xafa318 -> Node0xafa428;
	Node0xafa428 -> Node0xafa688;
	Node0xafa688 -> Node0xafa7e8;
	Node0xafa7e8 -> Node0xafa8f8;
	Node0xafa8f8 -> Node0xafaa08;
	Node0xafaa08 -> Node0xafaac8;
edge [color=red]
	Node0xaf7fc8 -> Node0xaf81e8;
	Node0xaf81e8 -> Node0xaf8618;
	Node0xaf8048 -> Node0xaf86f8;
	Node0xaf86f8 -> Node0xaf87f8;
	Node0xaf80d8 -> Node0xaf88b8;
	Node0xaf88b8 -> Node0xaf8968;
	Node0xaf8138 -> Node0xaf8a28;
	Node0xaf8a28 -> Node0xaf8ad8;
	Node0xaf7fc8 -> Node0xaf2810;
	Node0xaf8048 -> Node0xaf2810;
	Node0xaf80d8 -> Node0xaf2810;
	Node0xaf8138 -> Node0xaf2810;
	Node0xaf7fc8 -> Node0xaf8cd8;
	Node0xaf8048 -> Node0xaf9c48;
	Node0xaf80d8 -> Node0xafa2b8;
	Node0xaf8138 -> Node0xafa318;
	Node0xaf8cd8 -> Node0xafa428;
	Node0xaf9c48 -> Node0xafa428;
	Node0xafa2b8 -> Node0xafa428;
	Node0xafa318 -> Node0xafa428;
	Node0xaf8a28 -> Node0xafa688;
	Node0xaf88b8 -> Node0xafa7e8;
	Node0xaf86f8 -> Node0xafa8f8;
	Node0xaf81e8 -> Node0xafaa08;
}
