digraph "DFG for'crackme' function" {
	Node0x10864b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1086b60[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1086c20[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1086c90[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x1086d00[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1086d70[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1086de0[shape=record, label="  %9 = or i32 %5, %0"];
	Node0x1086e50[shape=record, label="  %10 = xor i32 %7, -1"];
	Node0x1086ec0[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0x1086f30[shape=record, label="  %12 = mul i32 %6, 3"];
	Node0x1086fd0[shape=record, label="  %13 = shl i32 %8, 1"];
	Node0x1087040[shape=record, label="  %14 = add i32 %3, %11"];
	Node0x10870b0[shape=record, label="  %15 = sub i32 %14, %7"];
	Node0x1087150[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x10871c0[shape=record, label="  %17 = add i32 %6, 1"];
	Node0x1087230[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x10872a0[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x1087310[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x1087380[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x10873f0[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x1087460[shape=record, label="  %23 = icmp eq i32 %22, %4"];
	Node0x1027268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1087900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1087950[shape=record, label="  ret void"];
	Node0x10864b0 -> Node0x1086b60;
	Node0x1086b60 -> Node0x1086c20;
	Node0x1086c20 -> Node0x1086c90;
	Node0x1086c90 -> Node0x1086d00;
	Node0x1086d00 -> Node0x1086d70;
	Node0x1086d70 -> Node0x1086de0;
	Node0x1086de0 -> Node0x1086e50;
	Node0x1086e50 -> Node0x1086ec0;
	Node0x1086ec0 -> Node0x1086f30;
	Node0x1086f30 -> Node0x1086fd0;
	Node0x1086fd0 -> Node0x1087040;
	Node0x1087040 -> Node0x10870b0;
	Node0x10870b0 -> Node0x1087150;
	Node0x1087150 -> Node0x10871c0;
	Node0x10871c0 -> Node0x1087230;
	Node0x1087230 -> Node0x10872a0;
	Node0x10872a0 -> Node0x1087310;
	Node0x1087310 -> Node0x1087380;
	Node0x1087380 -> Node0x10873f0;
	Node0x10873f0 -> Node0x1087460;
	Node0x1087460 -> Node0x1027268;
	Node0x1027268 -> Node0x1087900;
	Node0x1087900 -> Node0x1087950;
edge [color=red]
	Node0x10864b0 -> Node0x1086b60;
	Node0x1086c20 -> Node0x1086c90;
	Node0x1086c20 -> Node0x1086de0;
	Node0x1086d00 -> Node0x1086e50;
	Node0x1086de0 -> Node0x1086ec0;
	Node0x1086c90 -> Node0x1086f30;
	Node0x1086d70 -> Node0x1086fd0;
	Node0x10864b0 -> Node0x1087040;
	Node0x1086ec0 -> Node0x1087040;
	Node0x1087040 -> Node0x10870b0;
	Node0x1086d00 -> Node0x10870b0;
	Node0x10870b0 -> Node0x1087150;
	Node0x1086c90 -> Node0x10871c0;
	Node0x10871c0 -> Node0x1087230;
	Node0x1086de0 -> Node0x1087230;
	Node0x1087230 -> Node0x10872a0;
	Node0x1086e50 -> Node0x10872a0;
	Node0x10872a0 -> Node0x1087310;
	Node0x1086f30 -> Node0x1087310;
	Node0x1087310 -> Node0x1087380;
	Node0x1086fd0 -> Node0x1087380;
	Node0x1087380 -> Node0x10873f0;
	Node0x1087150 -> Node0x10873f0;
	Node0x10873f0 -> Node0x1087460;
	Node0x1086b60 -> Node0x1087460;
	Node0x1087460 -> Node0x1027268;
	Node0x1027268 -> Node0x1087900;
}
