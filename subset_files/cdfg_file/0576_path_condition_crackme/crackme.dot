digraph "DFG for'crackme' function" {
	Node0x1208d70[shape=record, label="  %4 = xor i32 %2, -1"];
	Node0x1208e30[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x1208ea0[shape=record, label="  %6 = sub i32 0, %5"];
	Node0x1208f10[shape=record, label="  %7 = or i32 %2, %0"];
	Node0x1208f80[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x1208ff0[shape=record, label="  %9 = xor i32 %7, %8"];
	Node0x1209060[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x12090d0[shape=record, label="  %11 = or i32 %5, %10"];
	Node0x1209140[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x12091b0[shape=record, label="  %13 = and i32 %12, %0"];
	Node0x1209220[shape=record, label="  %14 = xor i32 %0, -1"];
	Node0x1209290[shape=record, label="  %15 = xor i32 %8, %2"];
	Node0x1209300[shape=record, label="  %16 = or i32 %15, %0"];
	Node0x1209370[shape=record, label="  %17 = xor i32 %13, %16"];
	Node0x12093e0[shape=record, label="  %18 = or i32 %8, %0"];
	Node0x1209450[shape=record, label="  %19 = and i32 %18, %2"];
	Node0x12094c0[shape=record, label="  %20 = or i32 %15, %14"];
	Node0x1209530[shape=record, label="  %21 = and i32 %1, %0"];
	Node0x12095a0[shape=record, label="  %22 = or i32 %4, %1"];
	Node0x1209610[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x1209680[shape=record, label="  %24 = or i32 %21, %23"];
	Node0x12096f0[shape=record, label="  %25 = xor i32 %4, %0"];
	Node0x1209760[shape=record, label="  %26 = or i32 %25, %1"];
	Node0x12097d0[shape=record, label="  %27 = xor i32 %7, %21"];
	Node0x1209840[shape=record, label="  %28 = and i32 %25, %18"];
	Node0x12098b0[shape=record, label="  %29 = or i32 %2, %1"];
	Node0x1209920[shape=record, label="  %30 = xor i32 %29, -1"];
	Node0x1209990[shape=record, label="  %31 = and i32 %30, %14"];
	Node0x1209a30[shape=record, label="  %32 = mul i32 %31, -6"];
	Node0x1209cb0[shape=record, label="  %33 = and i32 %4, %1"];
	Node0x1209d20[shape=record, label="  %34 = and i32 %33, %14"];
	Node0x1209dc0[shape=record, label="  %35 = shl i32 %34, 2"];
	Node0x1209e30[shape=record, label="  %36 = and i32 %30, %0"];
	Node0x1209ea0[shape=record, label="  %37 = shl i32 %36, 2"];
	Node0x1209f10[shape=record, label="  %38 = and i32 %33, %0"];
	Node0x1209fb0[shape=record, label="  %39 = shl i32 %38, 3"];
	Node0x120a020[shape=record, label="  %40 = and i32 %23, %14"];
	Node0x120a090[shape=record, label="  %41 = shl i32 %40, 2"];
	Node0x120a100[shape=record, label="  %42 = and i32 %12, %14"];
	Node0x120a170[shape=record, label="  %43 = shl i32 %42, 2"];
	Node0x120a1e0[shape=record, label="  %44 = and i32 %23, %0"];
	Node0x120a250[shape=record, label="  %45 = shl i32 %13, 3"];
	Node0x120a2c0[shape=record, label="  %46 = sub i32 %22, %44"];
	Node0x120a330[shape=record, label="  %47 = mul i32 %46, 3"];
	Node0x120a3a0[shape=record, label="  %48 = add i32 %24, %19"];
	Node0x120a440[shape=record, label="  %49 = shl i32 %48, 1"];
	Node0x120a4b0[shape=record, label="  %50 = add i32 %11, %12"];
	Node0x120a520[shape=record, label="  %51 = sub i32 %9, %50"];
	Node0x120a590[shape=record, label="  %52 = add i32 %51, %20"];
	Node0x120a600[shape=record, label="  %53 = add i32 %52, %26"];
	Node0x120a670[shape=record, label="  %54 = sub i32 %53, %27"];
	Node0x120a6e0[shape=record, label="  %55 = sub i32 %54, %28"];
	Node0x120a750[shape=record, label="  %56 = add i32 %55, %17"];
	Node0x120a7c0[shape=record, label="  %57 = add i32 %56, %32"];
	Node0x120a830[shape=record, label="  %58 = sub i32 %57, %35"];
	Node0x120a8a0[shape=record, label="  %59 = sub i32 %58, %37"];
	Node0x120a910[shape=record, label="  %60 = sub i32 %59, %39"];
	Node0x120a980[shape=record, label="  %61 = sub i32 %60, %41"];
	Node0x120a9f0[shape=record, label="  %62 = sub i32 %61, %43"];
	Node0x120aa60[shape=record, label="  %63 = sub i32 %62, %45"];
	Node0x120aad0[shape=record, label="  %64 = add i32 %63, %47"];
	Node0x120af50[shape=record, label="  %65 = add i32 %64, %49"];
	Node0x120afc0[shape=record, label="  %66 = icmp eq i32 %65, %6"];
	Node0x11a9268[shape=record, label="  %67 = select i1 %66, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x120b250[shape=record, label="  %68 = tail call i32 @puts(i8* nonnull dereferenceable(1) %67)"];
	Node0x120b2a0[shape=record, label="  ret void"];
	Node0x1208d70 -> Node0x1208e30;
	Node0x1208e30 -> Node0x1208ea0;
	Node0x1208ea0 -> Node0x1208f10;
	Node0x1208f10 -> Node0x1208f80;
	Node0x1208f80 -> Node0x1208ff0;
	Node0x1208ff0 -> Node0x1209060;
	Node0x1209060 -> Node0x12090d0;
	Node0x12090d0 -> Node0x1209140;
	Node0x1209140 -> Node0x12091b0;
	Node0x12091b0 -> Node0x1209220;
	Node0x1209220 -> Node0x1209290;
	Node0x1209290 -> Node0x1209300;
	Node0x1209300 -> Node0x1209370;
	Node0x1209370 -> Node0x12093e0;
	Node0x12093e0 -> Node0x1209450;
	Node0x1209450 -> Node0x12094c0;
	Node0x12094c0 -> Node0x1209530;
	Node0x1209530 -> Node0x12095a0;
	Node0x12095a0 -> Node0x1209610;
	Node0x1209610 -> Node0x1209680;
	Node0x1209680 -> Node0x12096f0;
	Node0x12096f0 -> Node0x1209760;
	Node0x1209760 -> Node0x12097d0;
	Node0x12097d0 -> Node0x1209840;
	Node0x1209840 -> Node0x12098b0;
	Node0x12098b0 -> Node0x1209920;
	Node0x1209920 -> Node0x1209990;
	Node0x1209990 -> Node0x1209a30;
	Node0x1209a30 -> Node0x1209cb0;
	Node0x1209cb0 -> Node0x1209d20;
	Node0x1209d20 -> Node0x1209dc0;
	Node0x1209dc0 -> Node0x1209e30;
	Node0x1209e30 -> Node0x1209ea0;
	Node0x1209ea0 -> Node0x1209f10;
	Node0x1209f10 -> Node0x1209fb0;
	Node0x1209fb0 -> Node0x120a020;
	Node0x120a020 -> Node0x120a090;
	Node0x120a090 -> Node0x120a100;
	Node0x120a100 -> Node0x120a170;
	Node0x120a170 -> Node0x120a1e0;
	Node0x120a1e0 -> Node0x120a250;
	Node0x120a250 -> Node0x120a2c0;
	Node0x120a2c0 -> Node0x120a330;
	Node0x120a330 -> Node0x120a3a0;
	Node0x120a3a0 -> Node0x120a440;
	Node0x120a440 -> Node0x120a4b0;
	Node0x120a4b0 -> Node0x120a520;
	Node0x120a520 -> Node0x120a590;
	Node0x120a590 -> Node0x120a600;
	Node0x120a600 -> Node0x120a670;
	Node0x120a670 -> Node0x120a6e0;
	Node0x120a6e0 -> Node0x120a750;
	Node0x120a750 -> Node0x120a7c0;
	Node0x120a7c0 -> Node0x120a830;
	Node0x120a830 -> Node0x120a8a0;
	Node0x120a8a0 -> Node0x120a910;
	Node0x120a910 -> Node0x120a980;
	Node0x120a980 -> Node0x120a9f0;
	Node0x120a9f0 -> Node0x120aa60;
	Node0x120aa60 -> Node0x120aad0;
	Node0x120aad0 -> Node0x120af50;
	Node0x120af50 -> Node0x120afc0;
	Node0x120afc0 -> Node0x11a9268;
	Node0x11a9268 -> Node0x120b250;
	Node0x120b250 -> Node0x120b2a0;
edge [color=red]
	Node0x1208d70 -> Node0x1208e30;
	Node0x1208e30 -> Node0x1208ea0;
	Node0x1208f10 -> Node0x1208ff0;
	Node0x1208f80 -> Node0x1208ff0;
	Node0x1208e30 -> Node0x12090d0;
	Node0x1209060 -> Node0x12090d0;
	Node0x1209140 -> Node0x12091b0;
	Node0x1208f80 -> Node0x1209290;
	Node0x1209290 -> Node0x1209300;
	Node0x12091b0 -> Node0x1209370;
	Node0x1209300 -> Node0x1209370;
	Node0x1208f80 -> Node0x12093e0;
	Node0x12093e0 -> Node0x1209450;
	Node0x1209290 -> Node0x12094c0;
	Node0x1209220 -> Node0x12094c0;
	Node0x1208d70 -> Node0x12095a0;
	Node0x12095a0 -> Node0x1209610;
	Node0x1209530 -> Node0x1209680;
	Node0x1209610 -> Node0x1209680;
	Node0x1208d70 -> Node0x12096f0;
	Node0x12096f0 -> Node0x1209760;
	Node0x1208f10 -> Node0x12097d0;
	Node0x1209530 -> Node0x12097d0;
	Node0x12096f0 -> Node0x1209840;
	Node0x12093e0 -> Node0x1209840;
	Node0x12098b0 -> Node0x1209920;
	Node0x1209920 -> Node0x1209990;
	Node0x1209220 -> Node0x1209990;
	Node0x1209990 -> Node0x1209a30;
	Node0x1208d70 -> Node0x1209cb0;
	Node0x1209cb0 -> Node0x1209d20;
	Node0x1209220 -> Node0x1209d20;
	Node0x1209d20 -> Node0x1209dc0;
	Node0x1209920 -> Node0x1209e30;
	Node0x1209e30 -> Node0x1209ea0;
	Node0x1209cb0 -> Node0x1209f10;
	Node0x1209f10 -> Node0x1209fb0;
	Node0x1209610 -> Node0x120a020;
	Node0x1209220 -> Node0x120a020;
	Node0x120a020 -> Node0x120a090;
	Node0x1209140 -> Node0x120a100;
	Node0x1209220 -> Node0x120a100;
	Node0x120a100 -> Node0x120a170;
	Node0x1209610 -> Node0x120a1e0;
	Node0x12091b0 -> Node0x120a250;
	Node0x12095a0 -> Node0x120a2c0;
	Node0x120a1e0 -> Node0x120a2c0;
	Node0x120a2c0 -> Node0x120a330;
	Node0x1209680 -> Node0x120a3a0;
	Node0x1209450 -> Node0x120a3a0;
	Node0x120a3a0 -> Node0x120a440;
	Node0x12090d0 -> Node0x120a4b0;
	Node0x1209140 -> Node0x120a4b0;
	Node0x1208ff0 -> Node0x120a520;
	Node0x120a4b0 -> Node0x120a520;
	Node0x120a520 -> Node0x120a590;
	Node0x12094c0 -> Node0x120a590;
	Node0x120a590 -> Node0x120a600;
	Node0x1209760 -> Node0x120a600;
	Node0x120a600 -> Node0x120a670;
	Node0x12097d0 -> Node0x120a670;
	Node0x120a670 -> Node0x120a6e0;
	Node0x1209840 -> Node0x120a6e0;
	Node0x120a6e0 -> Node0x120a750;
	Node0x1209370 -> Node0x120a750;
	Node0x120a750 -> Node0x120a7c0;
	Node0x1209a30 -> Node0x120a7c0;
	Node0x120a7c0 -> Node0x120a830;
	Node0x1209dc0 -> Node0x120a830;
	Node0x120a830 -> Node0x120a8a0;
	Node0x1209ea0 -> Node0x120a8a0;
	Node0x120a8a0 -> Node0x120a910;
	Node0x1209fb0 -> Node0x120a910;
	Node0x120a910 -> Node0x120a980;
	Node0x120a090 -> Node0x120a980;
	Node0x120a980 -> Node0x120a9f0;
	Node0x120a170 -> Node0x120a9f0;
	Node0x120a9f0 -> Node0x120aa60;
	Node0x120a250 -> Node0x120aa60;
	Node0x120aa60 -> Node0x120aad0;
	Node0x120a330 -> Node0x120aad0;
	Node0x120aad0 -> Node0x120af50;
	Node0x120a440 -> Node0x120af50;
	Node0x120af50 -> Node0x120afc0;
	Node0x1208ea0 -> Node0x120afc0;
	Node0x120afc0 -> Node0x11a9268;
	Node0x11a9268 -> Node0x120b250;
}
