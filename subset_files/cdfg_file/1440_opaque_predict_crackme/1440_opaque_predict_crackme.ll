; ModuleID = '../.././c_source_file/1440_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1440_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %1, %0
  %7 = xor i32 %6, -1
  %8 = and i32 %5, %7
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %1
  %13 = xor i32 %12, -1
  %14 = xor i32 %10, %13
  %15 = or i32 %2, %0
  %16 = xor i32 %15, -1
  %17 = or i32 %16, %7
  %18 = xor i32 %2, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %19, %1
  %21 = and i32 %1, %0
  %22 = or i32 %21, %19
  %23 = or i32 %9, %0
  %24 = and i32 %23, %19
  %25 = and i32 %18, %23
  %26 = or i32 %11, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %7
  %29 = or i32 %11, %1
  %30 = shl i32 %29, 1
  %31 = xor i32 %26, %1
  %32 = xor i32 %0, -1
  %33 = and i32 %9, %2
  %34 = and i32 %33, %32
  %35 = xor i32 %2, %1
  %36 = or i32 %35, %32
  %37 = xor i32 %34, %36
  %38 = or i32 %6, %11
  %39 = xor i32 %23, -1
  %40 = or i32 %18, %39
  %41 = or i32 %9, %2
  %42 = and i32 %41, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %34, %43
  %45 = or i32 %6, %2
  %46 = and i32 %11, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %1
  %49 = and i32 %23, %2
  %50 = shl i32 %49, 1
  %51 = or i32 %19, %9
  %52 = or i32 %35, %10
  %53 = xor i32 %35, -1
  %54 = and i32 %53, %0
  %55 = or i32 %29, %32
  %56 = or i32 %18, %1
  %57 = or i32 %18, %7
  %58 = shl i32 %57, 1
  %59 = or i32 %10, %53
  %60 = or i32 %53, %0
  %61 = xor i32 %29, %21
  %62 = or i32 %1, %0
  %63 = xor i32 %62, -1
  %64 = or i32 %11, %63
  %65 = and i32 %35, %62
  %66 = xor i32 %53, %0
  %67 = or i32 %4, %39
  %68 = xor i32 %10, -1
  %69 = and i32 %35, %68
  %70 = and i32 %2, %1
  %71 = or i32 %46, %70
  %72 = and i32 %33, %0
  %73 = or i32 %35, %0
  %74 = xor i32 %73, 2147483647
  %75 = or i32 %74, %72
  %76 = shl i32 %75, 1
  %77 = or i32 %16, %1
  %78 = or i32 %2, %1
  %79 = xor i32 %78, %0
  %80 = shl i32 %79, 1
  %81 = xor i32 %4, %23
  %82 = and i32 %62, %11
  %83 = or i32 %35, %63
  %84 = shl i32 %83, 1
  %85 = xor i32 %35, %0
  %86 = shl i32 %85, 2
  %87 = and i32 %6, %19
  %88 = xor i32 %21, -1
  %89 = xor i32 %88, %2
  %90 = xor i32 %78, -1
  %91 = or i32 %4, %90
  %92 = and i32 %26, %6
  %93 = shl i32 %92, 1
  %94 = and i32 %18, %6
  %95 = or i32 %10, %2
  %96 = xor i32 %70, -1
  %97 = xor i32 %46, %96
  %98 = and i32 %6, %47
  %99 = xor i32 %72, %73
  %100 = shl i32 %99, 1
  %101 = and i32 %13, %0
  %102 = xor i32 %4, %62
  %103 = and i32 %15, %1
  %104 = or i32 %12, %32
  %105 = or i32 %21, %11
  %106 = or i32 %18, %21
  %107 = and i32 %6, %5
  %108 = shl i32 %107, 1
  %109 = or i32 %10, %19
  %110 = and i32 %5, %9
  %111 = or i32 %27, %1
  %112 = shl i32 %111, 1
  %113 = xor i32 %26, %21
  %114 = or i32 %63, %2
  %115 = and i32 %88, %2
  %116 = and i32 %68, %2
  %117 = xor i32 %29, -1
  %118 = and i32 %47, %7
  %119 = or i32 %35, %39
  %120 = shl i32 %16, 1
  %121 = and i32 %5, %1
  %122 = and i32 %53, %68
  %123 = or i32 %72, %85
  %124 = or i32 %90, %0
  %125 = or i32 %21, %2
  %126 = or i32 %6, %16
  %127 = shl i32 %6, 1
  %128 = or i32 %4, %9
  %129 = shl i32 %128, 2
  %130 = xor i32 %68, %2
  %131 = and i32 %11, %7
  %132 = and i32 %35, %88
  %133 = xor i32 %23, %2
  %134 = or i32 %18, %10
  %135 = or i32 %96, %32
  %136 = or i32 %21, %27
  %137 = shl i32 %136, 1
  %138 = or i32 %117, %0
  %139 = or i32 %21, %16
  %140 = or i32 %117, %32
  %141 = or i32 %96, %0
  %142 = xor i32 %16, %1
  %143 = xor i32 %70, %0
  %144 = and i32 %62, %2
  %145 = add i32 %35, 1
  %146 = or i32 %70, %0
  %147 = or i32 %46, %117
  %148 = xor i32 %41, %0
  %149 = or i32 %72, %148
  %150 = or i32 %18, %9
  %151 = shl i32 %13, 2
  %152 = or i32 %6, %19
  %153 = shl i32 %152, 1
  %154 = or i32 %70, %32
  %155 = xor i32 %117, %0
  %156 = shl i32 %155, 1
  %157 = and i32 %35, %23
  %158 = and i32 %18, %7
  %159 = and i32 %78, %0
  %160 = xor i32 %90, %0
  %161 = xor i32 %46, %1
  %162 = or i32 %21, %53
  %163 = or i32 %13, %0
  %164 = and i32 %70, %0
  %165 = and i32 %35, %32
  %166 = or i32 %164, %165
  %167 = shl i32 %166, 1
  %168 = and i32 %13, %32
  %169 = and i32 %7, %2
  %170 = xor i32 %63, %2
  %171 = or i32 %19, %7
  %172 = or i32 %53, %32
  %173 = and i32 %18, %68
  %174 = shl i32 %46, 1
  %175 = and i32 %19, %9
  %176 = or i32 %27, %9
  %177 = and i32 %11, %88
  %178 = shl i32 %177, 1
  %179 = and i32 %29, %32
  %180 = or i32 %46, %1
  %181 = and i32 %53, %88
  %182 = or i32 %70, %10
  %183 = shl i32 %182, 1
  %184 = xor i32 %10, %2
  %185 = and i32 %29, %0
  %186 = xor i32 %39, %2
  %187 = and i32 %78, %32
  %188 = xor i32 %187, -1
  %189 = xor i32 %164, %188
  %190 = xor i32 %13, %0
  %191 = and i32 %35, %0
  %192 = or i32 %18, %6
  %193 = or i32 %16, %9
  %194 = and i32 %18, %9
  %195 = or i32 %21, %90
  %196 = or i32 %4, %63
  %197 = and i32 %6, %11
  %198 = and i32 %62, %19
  %199 = shl i32 %5, 1
  %200 = and i32 %70, %32
  %201 = or i32 %200, %159
  %202 = or i32 %19, %63
  %203 = or i32 %7, %2
  %204 = xor i32 %85, -1
  %205 = or i32 %164, %204
  %206 = xor i32 %10, %96
  %207 = or i32 %200, %191
  %208 = and i32 %26, %1
  %209 = or i32 %39, %2
  %210 = shl i32 %209, 2
  %211 = and i32 %19, %88
  %212 = add i32 %26, 1
  %213 = shl i32 %36, 1
  %214 = xor i32 %159, -1
  %215 = xor i32 %200, %214
  %216 = or i32 %53, %63
  %217 = and i32 %62, %53
  %218 = or i32 %78, %0
  %219 = xor i32 %29, %0
  %220 = or i32 %4, %12
  %221 = xor i32 %27, %1
  %222 = xor i32 %4, %1
  %223 = or i32 %18, %63
  %224 = or i32 %21, %117
  %225 = or i32 %35, %21
  %226 = xor i32 %15, %1
  %227 = shl i32 %226, 2
  %228 = and i32 %6, %2
  %229 = xor i32 %78, %21
  %230 = shl i32 %229, 1
  %231 = xor i32 %148, -1
  %232 = xor i32 %72, %231
  %233 = xor i32 %5, %1
  %234 = and i32 %15, %6
  %235 = add i32 %6, 1
  %236 = and i32 %15, %9
  %237 = or i32 %12, %10
  %238 = shl i32 %237, 1
  %239 = xor i32 %12, %0
  %240 = xor i32 %72, %204
  %241 = and i32 %47, %1
  %242 = xor i32 %62, %2
  %243 = and i32 %23, %53
  %244 = or i32 %90, %32
  %245 = shl i32 %244, 1
  %246 = and i32 %19, %1
  %247 = shl i32 %246, 1
  %248 = and i32 %23, %11
  %249 = xor i32 %79, 2147483647
  %250 = xor i32 %249, %164
  %251 = shl i32 %250, 1
  %252 = and i32 %18, %62
  %253 = xor i32 %96, %0
  %254 = or i32 %164, %79
  %255 = or i32 %46, %7
  %256 = and i32 %41, %32
  %257 = or i32 %72, %256
  %258 = or i32 %4, %7
  %259 = add i32 %21, 1
  %260 = and i32 %26, %9
  %261 = or i32 %46, %6
  %262 = xor i32 %21, %2
  %263 = or i32 %6, %27
  %264 = or i32 %4, %1
  %265 = and i32 %19, %68
  %266 = shl i32 %39, 1
  %267 = or i32 %10, %11
  %268 = or i32 %19, %39
  %269 = and i32 %18, %1
  %270 = shl i32 %269, 1
  %271 = and i32 %26, %7
  %272 = and i32 %19, %7
  %273 = xor i32 %164, %85
  %274 = or i32 %11, %39
  %275 = or i32 %29, %0
  %276 = and i32 %90, %32
  %277 = and i32 %12, %32
  %278 = and i32 %90, %0
  %279 = shl i32 %278, 3
  %280 = and i32 %12, %0
  %281 = and i32 %117, %32
  %282 = mul i32 %200, 25
  %283 = and i32 %117, %0
  %284 = mul i32 %283, 17
  %285 = mul i32 %164, 15
  %286 = add i32 %18, %248
  %287 = add i32 %286, %15
  %288 = add i32 %287, %82
  %289 = add i32 %288, %45
  %290 = add i32 %289, %220
  %291 = add i32 %290, %165
  %292 = add i32 %291, %191
  %293 = add i32 %292, %180
  %294 = add i32 %293, %159
  %295 = add i32 %294, %157
  %296 = add i32 %295, %143
  %297 = add i32 %296, %66
  %298 = add i32 %297, %56
  %299 = add i32 %298, %55
  %300 = add i32 %299, %40
  %301 = add i32 %300, %25
  %302 = add i32 %301, %22
  %303 = add i32 %302, %37
  %304 = shl i32 %303, 1
  %305 = add i32 %176, %90
  %306 = add i32 %305, %280
  %307 = sub i32 %306, %135
  %308 = sub i32 %307, %81
  %309 = sub i32 %308, %48
  %310 = mul i32 %309, 5
  %311 = sub i32 %131, %224
  %312 = sub i32 %311, %268
  %313 = add i32 %312, %17
  %314 = mul i32 %313, 3
  %315 = add i32 %281, %277
  %316 = add i32 %315, %276
  %317 = mul i32 %316, 30
  %318 = shl i32 %0, 1
  %319 = add i32 %318, 2
  %320 = add i32 %319, %9
  %321 = sub i32 %320, %1
  %322 = sub i32 %321, %10
  %323 = add i32 %322, %68
  %324 = add i32 %323, %23
  %325 = add i32 %324, %21
  %326 = add i32 %325, %63
  %327 = add i32 %326, %2
  %328 = add i32 %327, %235
  %329 = add i32 %328, %259
  %330 = sub i32 %329, %62
  %331 = sub i32 %330, %38
  %332 = sub i32 %331, %12
  %333 = add i32 %332, %64
  %334 = add i32 %333, %89
  %335 = sub i32 %334, %95
  %336 = add i32 %335, %105
  %337 = add i32 %336, %26
  %338 = add i32 %337, %114
  %339 = add i32 %338, %115
  %340 = add i32 %339, %116
  %341 = add i32 %340, %117
  %342 = add i32 %341, %125
  %343 = sub i32 %342, %127
  %344 = sub i32 %343, %130
  %345 = add i32 %344, %133
  %346 = sub i32 %345, %78
  %347 = add i32 %346, %144
  %348 = add i32 %347, %145
  %349 = add i32 %348, %35
  %350 = add i32 %349, %169
  %351 = sub i32 %350, %170
  %352 = sub i32 %351, %184
  %353 = sub i32 %352, %70
  %354 = add i32 %353, %186
  %355 = add i32 %354, %47
  %356 = add i32 %355, %19
  %357 = add i32 %356, %197
  %358 = sub i32 %357, %203
  %359 = add i32 %358, %212
  %360 = sub i32 %359, %228
  %361 = sub i32 %360, %4
  %362 = add i32 %361, %242
  %363 = add i32 %362, %262
  %364 = sub i32 %363, %266
  %365 = sub i32 %364, %267
  %366 = sub i32 %365, %274
  %367 = add i32 %366, %14
  %368 = add i32 %367, %20
  %369 = add i32 %368, %24
  %370 = add i32 %369, %28
  %371 = sub i32 %370, %30
  %372 = sub i32 %371, %31
  %373 = sub i32 %372, %50
  %374 = sub i32 %373, %51
  %375 = sub i32 %374, %52
  %376 = add i32 %375, %54
  %377 = sub i32 %376, %59
  %378 = sub i32 %377, %60
  %379 = sub i32 %378, %61
  %380 = sub i32 %379, %65
  %381 = add i32 %380, %67
  %382 = sub i32 %381, %69
  %383 = add i32 %382, %71
  %384 = add i32 %383, %77
  %385 = add i32 %384, %87
  %386 = sub i32 %385, %91
  %387 = add i32 %386, %94
  %388 = sub i32 %387, %97
  %389 = add i32 %388, %98
  %390 = add i32 %389, %101
  %391 = sub i32 %390, %102
  %392 = add i32 %391, %103
  %393 = sub i32 %392, %104
  %394 = add i32 %393, %106
  %395 = add i32 %394, %109
  %396 = sub i32 %395, %110
  %397 = sub i32 %396, %113
  %398 = add i32 %397, %118
  %399 = sub i32 %398, %119
  %400 = sub i32 %399, %120
  %401 = sub i32 %400, %121
  %402 = sub i32 %401, %122
  %403 = add i32 %402, %124
  %404 = add i32 %403, %126
  %405 = add i32 %404, %73
  %406 = sub i32 %405, %132
  %407 = add i32 %406, %134
  %408 = sub i32 %407, %138
  %409 = add i32 %408, %139
  %410 = sub i32 %409, %140
  %411 = sub i32 %410, %141
  %412 = add i32 %411, %142
  %413 = add i32 %412, %146
  %414 = add i32 %413, %147
  %415 = sub i32 %414, %150
  %416 = sub i32 %415, %151
  %417 = add i32 %416, %154
  %418 = add i32 %417, %158
  %419 = sub i32 %418, %160
  %420 = add i32 %419, %161
  %421 = sub i32 %420, %162
  %422 = add i32 %421, %163
  %423 = sub i32 %422, %168
  %424 = sub i32 %423, %171
  %425 = sub i32 %424, %172
  %426 = add i32 %425, %173
  %427 = sub i32 %426, %174
  %428 = sub i32 %427, %175
  %429 = sub i32 %428, %178
  %430 = add i32 %429, %179
  %431 = add i32 %430, %181
  %432 = add i32 %431, %185
  %433 = sub i32 %432, %190
  %434 = add i32 %433, %192
  %435 = add i32 %434, %193
  %436 = add i32 %435, %194
  %437 = sub i32 %436, %195
  %438 = sub i32 %437, %196
  %439 = add i32 %438, %198
  %440 = sub i32 %439, %199
  %441 = sub i32 %440, %202
  %442 = add i32 %441, %206
  %443 = sub i32 %442, %208
  %444 = sub i32 %443, %210
  %445 = add i32 %444, %211
  %446 = add i32 %445, %216
  %447 = sub i32 %446, %217
  %448 = add i32 %447, %218
  %449 = add i32 %448, %219
  %450 = sub i32 %449, %221
  %451 = sub i32 %450, %222
  %452 = sub i32 %451, %223
  %453 = sub i32 %452, %225
  %454 = add i32 %453, %233
  %455 = add i32 %454, %234
  %456 = add i32 %455, %236
  %457 = add i32 %456, %239
  %458 = add i32 %457, %241
  %459 = sub i32 %458, %243
  %460 = sub i32 %459, %252
  %461 = sub i32 %460, %187
  %462 = sub i32 %461, %253
  %463 = add i32 %462, %255
  %464 = sub i32 %463, %258
  %465 = add i32 %464, %260
  %466 = add i32 %465, %261
  %467 = add i32 %466, %263
  %468 = sub i32 %467, %264
  %469 = add i32 %468, %265
  %470 = add i32 %469, %271
  %471 = sub i32 %470, %272
  %472 = add i32 %471, %275
  %473 = sub i32 %472, %44
  %474 = sub i32 %473, %58
  %475 = sub i32 %474, %80
  %476 = sub i32 %475, %84
  %477 = sub i32 %476, %86
  %478 = sub i32 %477, %93
  %479 = sub i32 %478, %108
  %480 = sub i32 %479, %112
  %481 = sub i32 %480, %123
  %482 = sub i32 %481, %129
  %483 = sub i32 %482, %137
  %484 = sub i32 %483, %149
  %485 = sub i32 %484, %153
  %486 = sub i32 %485, %156
  %487 = sub i32 %486, %183
  %488 = add i32 %487, %189
  %489 = add i32 %488, %201
  %490 = sub i32 %489, %205
  %491 = add i32 %490, %207
  %492 = sub i32 %491, %213
  %493 = sub i32 %492, %215
  %494 = add i32 %493, %227
  %495 = sub i32 %494, %230
  %496 = sub i32 %495, %232
  %497 = sub i32 %496, %238
  %498 = sub i32 %497, %240
  %499 = sub i32 %498, %245
  %500 = sub i32 %499, %247
  %501 = sub i32 %500, %254
  %502 = sub i32 %501, %257
  %503 = sub i32 %502, %270
  %504 = add i32 %503, %273
  %505 = add i32 %504, %279
  %506 = add i32 %505, %282
  %507 = add i32 %506, %284
  %508 = add i32 %507, %285
  %509 = sub i32 %508, %100
  %510 = sub i32 %509, %167
  %511 = sub i32 %510, %76
  %512 = sub i32 %511, %251
  %513 = add i32 %512, %317
  %514 = add i32 %513, %314
  %515 = add i32 %514, %310
  %516 = add i32 %515, %304
  %517 = icmp eq i32 %8, %516
  %518 = select i1 %517, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %519 = tail call i32 @puts(i8* nonnull dereferenceable(1) %518)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
