; ModuleID = '../.././c_source_file/0922_path_condition_crackme.c'
source_filename = "../.././c_source_file/0922_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = or i32 %4, %1
  %7 = xor i32 %6, -1
  %8 = or i32 %5, %7
  %9 = shl i32 %8, 1
  %10 = and i32 %2, %1
  %11 = add i32 %9, %10
  %12 = or i32 %1, %0
  %13 = xor i32 %2, %1
  %14 = and i32 %13, %12
  %15 = xor i32 %2, %0
  %16 = or i32 %15, %1
  %17 = xor i32 %1, -1
  %18 = or i32 %17, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %19, %2
  %21 = and i32 %2, %0
  %22 = or i32 %21, %19
  %23 = and i32 %1, %0
  %24 = or i32 %6, %0
  %25 = xor i32 %12, -1
  %26 = or i32 %13, %25
  %27 = xor i32 %21, %12
  %28 = and i32 %12, %4
  %29 = or i32 %4, %0
  %30 = xor i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %29, %31
  %33 = xor i32 %15, -1
  %34 = and i32 %30, %33
  %35 = shl i32 %34, 1
  %36 = and i32 %10, %0
  %37 = xor i32 %0, -1
  %38 = and i32 %13, %37
  %39 = or i32 %36, %38
  %40 = or i32 %33, %25
  %41 = shl i32 %19, 1
  %42 = xor i32 %13, -1
  %43 = or i32 %23, %42
  %44 = or i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %30, %45
  %47 = and i32 %30, %4
  %48 = xor i32 %25, %2
  %49 = and i32 %4, %1
  %50 = or i32 %49, %0
  %51 = xor i32 %21, -1
  %52 = xor i32 %51, %1
  %53 = or i32 %7, %37
  %54 = or i32 %13, %23
  %55 = and i32 %17, %0
  %56 = or i32 %49, %55
  %57 = or i32 %30, %33
  %58 = xor i32 %5, %1
  %59 = or i32 %42, %25
  %60 = and i32 %30, %51
  %61 = xor i32 %10, -1
  %62 = or i32 %61, %0
  %63 = or i32 %21, %25
  %64 = shl i32 %63, 1
  %65 = or i32 %2, %1
  %66 = xor i32 %65, -1
  %67 = or i32 %23, %66
  %68 = and i32 %61, %37
  %69 = and i32 %44, %31
  %70 = or i32 %10, %37
  %71 = and i32 %44, %1
  %72 = and i32 %61, %0
  %73 = xor i32 %55, -1
  %74 = add i32 %55, 1
  %75 = xor i32 %13, %0
  %76 = xor i32 %75, %36
  %77 = xor i32 %18, %2
  %78 = and i32 %17, %2
  %79 = and i32 %78, %0
  %80 = or i32 %17, %2
  %81 = and i32 %80, %37
  %82 = or i32 %79, %81
  %83 = or i32 %30, %2
  %84 = and i32 %6, %0
  %85 = or i32 %33, %17
  %86 = and i32 %18, %2
  %87 = xor i32 %73, %2
  %88 = or i32 %10, %55
  %89 = xor i32 %49, -1
  %90 = or i32 %89, %0
  %91 = and i32 %10, %37
  %92 = and i32 %65, %0
  %93 = xor i32 %92, -1
  %94 = xor i32 %91, %93
  %95 = or i32 %21, %31
  %96 = and i32 %33, %31
  %97 = or i32 %15, %23
  %98 = or i32 %10, %0
  %99 = or i32 %21, %49
  %100 = and i32 %78, %37
  %101 = and i32 %80, %0
  %102 = or i32 %100, %101
  %103 = xor i32 %23, -1
  %104 = xor i32 %103, %2
  %105 = and i32 %42, %103
  %106 = or i32 %21, %30
  %107 = or i32 %5, %31
  %108 = xor i32 %55, %61
  %109 = xor i32 %61, %0
  %110 = and i32 %4, %103
  %111 = or i32 %13, %37
  %112 = xor i32 %100, %111
  %113 = and i32 %31, %2
  %114 = shl i32 %113, 1
  %115 = and i32 %33, %103
  %116 = and i32 %33, %17
  %117 = or i32 %5, %1
  %118 = or i32 %55, %33
  %119 = and i32 %44, %17
  %120 = or i32 %21, %66
  %121 = xor i32 %5, -1
  %122 = and i32 %30, %121
  %123 = or i32 %7, %0
  %124 = xor i32 %23, %2
  %125 = xor i32 %111, -1
  %126 = or i32 %100, %125
  %127 = xor i32 %65, %0
  %128 = and i32 %4, %73
  %129 = shl i32 %128, 1
  %130 = xor i32 %38, -1
  %131 = xor i32 %36, %130
  %132 = and i32 %13, %0
  %133 = or i32 %91, %132
  %134 = or i32 %45, %17
  %135 = or i32 %15, %17
  %136 = or i32 %91, %92
  %137 = xor i32 %12, %2
  %138 = shl i32 %137, 1
  %139 = or i32 %33, %1
  %140 = and i32 %15, %1
  %141 = or i32 %21, %1
  %142 = shl i32 %141, 1
  %143 = or i32 %4, %31
  %144 = and i32 %33, %1
  %145 = and i32 %29, %1
  %146 = shl i32 %145, 1
  %147 = and i32 %65, %37
  %148 = or i32 %49, %37
  %149 = or i32 %23, %7
  %150 = shl i32 %149, 1
  %151 = and i32 %15, %18
  %152 = or i32 %25, %2
  %153 = shl i32 %152, 1
  %154 = xor i32 %55, %2
  %155 = or i32 %13, %0
  %156 = xor i32 %155, -1
  %157 = or i32 %79, %156
  %158 = and i32 %121, %17
  %159 = or i32 %23, %2
  %160 = or i32 %55, %4
  %161 = xor i32 %101, -1
  %162 = xor i32 %100, %161
  %163 = xor i32 %29, -1
  %164 = xor i32 %163, %1
  %165 = xor i32 %21, %1
  %166 = xor i32 %21, %89
  %167 = and i32 %42, %0
  %168 = or i32 %65, %37
  %169 = and i32 %12, %2
  %170 = and i32 %51, %17
  %171 = or i32 %42, %0
  %172 = and i32 %89, %37
  %173 = and i32 %121, %1
  %174 = or i32 %65, %0
  %175 = and i32 %13, %103
  %176 = and i32 %4, %31
  %177 = or i32 %36, %127
  %178 = shl i32 %177, 1
  %179 = xor i32 %21, %18
  %180 = or i32 %30, %4
  %181 = or i32 %23, %4
  %182 = xor i32 %121, %1
  %183 = or i32 %13, %55
  %184 = shl i32 %183, 1
  %185 = or i32 %23, %163
  %186 = or i32 %55, %2
  %187 = or i32 %13, %19
  %188 = add i32 %49, 1
  %189 = xor i32 %147, 2147483647
  %190 = xor i32 %189, %36
  %191 = shl i32 %190, 1
  %192 = or i32 %15, %31
  %193 = shl i32 %192, 2
  %194 = or i32 %6, %37
  %195 = or i32 %89, %37
  %196 = and i32 %42, %37
  %197 = or i32 %33, %31
  %198 = and i32 %13, %18
  %199 = or i32 %4, %25
  %200 = and i32 %89, %0
  %201 = or i32 %5, %10
  %202 = xor i32 %44, %23
  %203 = xor i32 %0, 2147483647
  %204 = xor i32 %203, %80
  %205 = xor i32 %204, %79
  %206 = shl i32 %205, 1
  %207 = or i32 %30, %163
  %208 = and i32 %103, %2
  %209 = add i32 %2, 1
  %210 = xor i32 %42, %0
  %211 = or i32 %163, %17
  %212 = shl i32 %211, 1
  %213 = or i32 %61, %37
  %214 = add i32 %15, 1
  %215 = xor i32 %29, %1
  %216 = or i32 %15, %30
  %217 = and i32 %30, %2
  %218 = xor i32 %6, %23
  %219 = and i32 %66, %37
  %220 = mul i32 %219, -25
  %221 = and i32 %49, %37
  %222 = mul i32 %221, -28
  %223 = and i32 %66, %0
  %224 = mul i32 %223, -14
  %225 = and i32 %49, %0
  %226 = and i32 %7, %37
  %227 = mul i32 %226, -10
  %228 = mul i32 %91, -13
  %229 = and i32 %7, %0
  %230 = add i32 %154, %160
  %231 = add i32 %230, %143
  %232 = add i32 %231, %5
  %233 = add i32 %232, %173
  %234 = add i32 %233, %170
  %235 = add i32 %234, %166
  %236 = add i32 %235, %118
  %237 = add i32 %236, %109
  %238 = add i32 %237, %88
  %239 = add i32 %238, %70
  %240 = add i32 %239, %69
  %241 = add i32 %240, %40
  %242 = add i32 %241, %16
  %243 = add i32 %242, %136
  %244 = shl i32 %243, 1
  %245 = add i32 %104, %169
  %246 = add i32 %245, %164
  %247 = sub i32 %246, %229
  %248 = add i32 %247, %147
  %249 = sub i32 %248, %134
  %250 = sub i32 %249, %43
  %251 = add i32 %250, %32
  %252 = mul i32 %251, 3
  %253 = sub i32 %51, %124
  %254 = add i32 %253, %46
  %255 = add i32 %254, %85
  %256 = mul i32 %255, 5
  %257 = sub i32 %225, %36
  %258 = mul i32 %257, 9
  %259 = add i32 %151, %121
  %260 = shl i32 %259, 2
  %261 = sub i32 -5, %0
  %262 = sub i32 %261, %12
  %263 = sub i32 %262, %23
  %264 = add i32 %263, %74
  %265 = sub i32 %264, %30
  %266 = add i32 %265, %209
  %267 = sub i32 %266, %20
  %268 = sub i32 %267, %28
  %269 = sub i32 %268, %41
  %270 = sub i32 %269, %47
  %271 = add i32 %270, %15
  %272 = sub i32 %271, %48
  %273 = sub i32 %272, %77
  %274 = add i32 %273, %83
  %275 = add i32 %274, %86
  %276 = sub i32 %275, %44
  %277 = sub i32 %276, %87
  %278 = add i32 %277, %21
  %279 = add i32 %278, %110
  %280 = add i32 %279, %49
  %281 = sub i32 %280, %159
  %282 = add i32 %281, %176
  %283 = sub i32 %282, %180
  %284 = sub i32 %283, %181
  %285 = add i32 %284, %6
  %286 = add i32 %285, %186
  %287 = add i32 %286, %188
  %288 = sub i32 %287, %199
  %289 = add i32 %288, %29
  %290 = add i32 %289, %61
  %291 = add i32 %290, %208
  %292 = add i32 %291, %214
  %293 = add i32 %292, %13
  %294 = sub i32 %293, %217
  %295 = add i32 %294, %14
  %296 = sub i32 %295, %22
  %297 = add i32 %296, %24
  %298 = add i32 %297, %26
  %299 = add i32 %298, %27
  %300 = sub i32 %299, %50
  %301 = add i32 %300, %52
  %302 = add i32 %301, %53
  %303 = add i32 %302, %54
  %304 = add i32 %303, %56
  %305 = add i32 %304, %57
  %306 = sub i32 %305, %58
  %307 = add i32 %306, %59
  %308 = add i32 %307, %60
  %309 = sub i32 %308, %62
  %310 = sub i32 %309, %67
  %311 = sub i32 %310, %68
  %312 = sub i32 %311, %71
  %313 = sub i32 %312, %72
  %314 = add i32 %313, %84
  %315 = sub i32 %314, %90
  %316 = add i32 %315, %95
  %317 = add i32 %316, %96
  %318 = sub i32 %317, %97
  %319 = sub i32 %318, %98
  %320 = add i32 %319, %99
  %321 = add i32 %320, %105
  %322 = sub i32 %321, %106
  %323 = sub i32 %322, %107
  %324 = sub i32 %323, %108
  %325 = sub i32 %324, %114
  %326 = add i32 %325, %115
  %327 = add i32 %326, %116
  %328 = sub i32 %327, %117
  %329 = sub i32 %328, %119
  %330 = sub i32 %329, %120
  %331 = add i32 %330, %122
  %332 = sub i32 %331, %123
  %333 = add i32 %332, %127
  %334 = sub i32 %333, %129
  %335 = add i32 %334, %111
  %336 = sub i32 %335, %135
  %337 = sub i32 %336, %138
  %338 = sub i32 %337, %139
  %339 = sub i32 %338, %140
  %340 = sub i32 %339, %144
  %341 = sub i32 %340, %148
  %342 = sub i32 %341, %153
  %343 = add i32 %342, %158
  %344 = add i32 %343, %165
  %345 = add i32 %344, %167
  %346 = add i32 %345, %168
  %347 = sub i32 %346, %171
  %348 = sub i32 %347, %172
  %349 = sub i32 %348, %174
  %350 = sub i32 %349, %175
  %351 = add i32 %350, %179
  %352 = sub i32 %351, %38
  %353 = sub i32 %352, %182
  %354 = sub i32 %353, %185
  %355 = add i32 %354, %187
  %356 = sub i32 %355, %194
  %357 = add i32 %356, %195
  %358 = add i32 %357, %196
  %359 = sub i32 %358, %197
  %360 = sub i32 %359, %198
  %361 = add i32 %360, %200
  %362 = add i32 %361, %201
  %363 = sub i32 %362, %202
  %364 = add i32 %363, %207
  %365 = add i32 %364, %210
  %366 = add i32 %365, %213
  %367 = add i32 %366, %215
  %368 = add i32 %367, %216
  %369 = add i32 %368, %218
  %370 = sub i32 %369, %35
  %371 = sub i32 %370, %39
  %372 = sub i32 %371, %64
  %373 = add i32 %372, %76
  %374 = sub i32 %373, %82
  %375 = sub i32 %374, %94
  %376 = sub i32 %375, %102
  %377 = sub i32 %376, %112
  %378 = sub i32 %377, %126
  %379 = sub i32 %378, %131
  %380 = sub i32 %379, %133
  %381 = sub i32 %380, %142
  %382 = sub i32 %381, %146
  %383 = sub i32 %382, %150
  %384 = add i32 %383, %157
  %385 = add i32 %384, %162
  %386 = sub i32 %385, %184
  %387 = sub i32 %386, %193
  %388 = sub i32 %387, %212
  %389 = add i32 %388, %220
  %390 = add i32 %389, %222
  %391 = add i32 %390, %224
  %392 = add i32 %391, %227
  %393 = add i32 %392, %228
  %394 = sub i32 %393, %178
  %395 = add i32 %394, %258
  %396 = add i32 %395, %260
  %397 = sub i32 %396, %191
  %398 = sub i32 %397, %206
  %399 = add i32 %398, %256
  %400 = add i32 %399, %252
  %401 = add i32 %400, %244
  %402 = icmp eq i32 %11, %401
  %403 = select i1 %402, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %404 = tail call i32 @puts(i8* nonnull dereferenceable(1) %403)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
