; ModuleID = '../.././c_source_file/1818_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1818_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %1
  %5 = xor i32 %4, -1
  %6 = or i32 %5, %0
  %7 = xor i32 %1, %0
  %8 = mul i32 %7, -5
  %9 = add i32 %6, %8
  %10 = and i32 %1, %0
  %11 = or i32 %10, %2
  %12 = xor i32 %0, -1
  %13 = or i32 %5, %12
  %14 = xor i32 %1, -1
  %15 = and i32 %14, %2
  %16 = and i32 %15, %0
  %17 = or i32 %14, %2
  %18 = xor i32 %17, %12
  %19 = xor i32 %18, %16
  %20 = or i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %2, %1
  %23 = or i32 %22, %21
  %24 = xor i32 %2, %0
  %25 = or i32 %24, %14
  %26 = xor i32 %2, -1
  %27 = or i32 %26, %1
  %28 = and i32 %27, %12
  %29 = and i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = xor i32 %30, %0
  %32 = and i32 %2, %0
  %33 = xor i32 %32, %1
  %34 = shl i32 %33, 1
  %35 = and i32 %24, %20
  %36 = shl i32 %35, 1
  %37 = or i32 %26, %0
  %38 = xor i32 %37, %1
  %39 = and i32 %14, %0
  %40 = and i32 %26, %1
  %41 = or i32 %40, %39
  %42 = xor i32 %22, -1
  %43 = and i32 %20, %42
  %44 = or i32 %14, %0
  %45 = xor i32 %44, %2
  %46 = or i32 %21, %2
  %47 = or i32 %42, %0
  %48 = or i32 %32, %5
  %49 = and i32 %26, %0
  %50 = xor i32 %49, %30
  %51 = xor i32 %27, -1
  %52 = or i32 %49, %51
  %53 = and i32 %42, %0
  %54 = or i32 %51, %12
  %55 = or i32 %22, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %16, %56
  %58 = or i32 %29, %0
  %59 = and i32 %22, %0
  %60 = or i32 %2, %0
  %61 = xor i32 %60, %10
  %62 = or i32 %24, %7
  %63 = xor i32 %49, -1
  %64 = and i32 %20, %2
  %65 = xor i32 %44, -1
  %66 = xor i32 %24, -1
  %67 = or i32 %66, %65
  %68 = xor i32 %7, -1
  %69 = and i32 %68, %2
  %70 = or i32 %66, %14
  %71 = or i32 %40, %0
  %72 = xor i32 %40, -1
  %73 = or i32 %72, %0
  %74 = and i32 %42, %12
  %75 = xor i32 %39, -1
  %76 = and i32 %22, %75
  %77 = shl i32 %76, 1
  %78 = or i32 %27, %12
  %79 = and i32 %7, %26
  %80 = xor i32 %51, %0
  %81 = xor i32 %49, %27
  %82 = and i32 %72, %12
  %83 = xor i32 %37, -1
  %84 = or i32 %7, %83
  %85 = and i32 %44, %2
  %86 = and i32 %15, %12
  %87 = and i32 %17, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %86, %88
  %90 = or i32 %26, %21
  %91 = or i32 %32, %7
  %92 = and i32 %29, %12
  %93 = or i32 %92, %59
  %94 = xor i32 %16, %55
  %95 = or i32 %10, %83
  %96 = or i32 %40, %12
  %97 = or i32 %49, %1
  %98 = xor i32 %60, -1
  %99 = or i32 %98, %1
  %100 = xor i32 %5, %0
  %101 = and i32 %4, %12
  %102 = or i32 %39, %66
  %103 = or i32 %22, %39
  %104 = xor i32 %72, %0
  %105 = and i32 %29, %0
  %106 = and i32 %22, %12
  %107 = or i32 %105, %106
  %108 = and i32 %24, %1
  %109 = shl i32 %108, 1
  %110 = shl i32 %40, 1
  %111 = or i32 %49, %29
  %112 = xor i32 %63, %1
  %113 = xor i32 %32, %20
  %114 = shl i32 %113, 1
  %115 = or i32 %22, %12
  %116 = xor i32 %115, -1
  %117 = or i32 %86, %116
  %118 = or i32 %98, %14
  %119 = xor i32 %10, -1
  %120 = and i32 %26, %119
  %121 = and i32 %66, %1
  %122 = and i32 %24, %7
  %123 = shl i32 %122, 1
  %124 = or i32 %49, %14
  %125 = and i32 %24, %119
  %126 = or i32 %24, %10
  %127 = xor i32 %65, %2
  %128 = xor i32 %22, %0
  %129 = xor i32 %128, -1
  %130 = xor i32 %16, %129
  %131 = xor i32 %101, 2147483647
  %132 = xor i32 %131, %105
  %133 = shl i32 %132, 1
  %134 = or i32 %10, %42
  %135 = xor i32 %83, %1
  %136 = xor i32 %4, %10
  %137 = and i32 %24, %75
  %138 = or i32 %29, %12
  %139 = xor i32 %39, %30
  %140 = shl i32 %139, 2
  %141 = xor i32 %105, %128
  %142 = or i32 %83, %1
  %143 = xor i32 %32, %44
  %144 = or i32 %7, %26
  %145 = and i32 %63, %1
  %146 = xor i32 %4, %0
  %147 = or i32 %105, %146
  %148 = or i32 %32, %65
  %149 = or i32 %51, %0
  %150 = and i32 %26, %75
  %151 = xor i32 %21, %2
  %152 = shl i32 %151, 1
  %153 = xor i32 %27, %10
  %154 = or i32 %42, %12
  %155 = and i32 %4, %0
  %156 = and i32 %44, %42
  %157 = and i32 %24, %14
  %158 = xor i32 %40, %0
  %159 = and i32 %60, %1
  %160 = or i32 %32, %40
  %161 = and i32 %26, %68
  %162 = and i32 %75, %2
  %163 = and i32 %72, %0
  %164 = or i32 %32, %21
  %165 = shl i32 %164, 1
  %166 = or i32 %32, %1
  %167 = and i32 %66, %75
  %168 = and i32 %63, %68
  %169 = xor i32 %59, -1
  %170 = xor i32 %92, %169
  %171 = and i32 %60, %68
  %172 = or i32 %92, %155
  %173 = xor i32 %105, -1
  %174 = xor i32 %106, %173
  %175 = or i32 %72, %12
  %176 = and i32 %66, %14
  %177 = or i32 %24, %68
  %178 = or i32 %10, %66
  %179 = or i32 %10, %26
  %180 = or i32 %42, %21
  %181 = xor i32 %98, %1
  %182 = xor i32 %32, %4
  %183 = and i32 %66, %68
  %184 = and i32 %30, %0
  %185 = and i32 %42, %119
  %186 = or i32 %7, %2
  %187 = xor i32 %32, %72
  %188 = or i32 %10, %5
  %189 = or i32 %49, %68
  %190 = or i32 %49, %7
  %191 = and i32 %20, %66
  %192 = xor i32 %27, %0
  %193 = or i32 %39, %42
  %194 = shl i32 %193, 1
  %195 = and i32 %66, %119
  %196 = and i32 %30, %12
  %197 = or i32 %39, %26
  %198 = and i32 %60, %7
  %199 = or i32 %24, %65
  %200 = shl i32 %22, 1
  %201 = or i32 %10, %98
  %202 = xor i32 %60, %1
  %203 = or i32 %4, %0
  %204 = xor i32 %37, %10
  %205 = xor i32 %32, 2147483647
  %206 = or i32 %98, %68
  %207 = or i32 %32, %14
  %208 = or i32 %24, %1
  %209 = xor i32 %155, 2147483647
  %210 = xor i32 %209, %92
  %211 = or i32 %105, %101
  %212 = and i32 %17, %12
  %213 = xor i32 %212, 2147483647
  %214 = xor i32 %213, %16
  %215 = shl i32 %214, 1
  %216 = or i32 %83, %68
  %217 = and i32 %24, %44
  %218 = and i32 %119, %2
  %219 = xor i32 %119, %2
  %220 = and i32 %22, %119
  %221 = or i32 %86, %87
  %222 = or i32 %16, %212
  %223 = or i32 %26, %68
  %224 = and i32 %7, %63
  %225 = xor i32 %86, %115
  %226 = add i32 %37, 1
  %227 = xor i32 %205, %1
  %228 = shl i32 %227, 1
  %229 = and i32 %42, %75
  %230 = or i32 %66, %1
  %231 = xor i32 %42, %0
  %232 = or i32 %22, %10
  %233 = shl i32 %232, 1
  %234 = or i32 %30, %0
  %235 = or i32 %66, %21
  %236 = or i32 %29, %39
  %237 = or i32 %68, %2
  %238 = or i32 %105, %129
  %239 = xor i32 %10, %2
  %240 = xor i32 %146, %173
  %241 = add i32 %27, 1
  %242 = and i32 %44, %26
  %243 = or i32 %26, %65
  %244 = and i32 %37, %68
  %245 = and i32 %24, %68
  %246 = and i32 %22, %44
  %247 = or i32 %16, %128
  %248 = and i32 %60, %14
  %249 = or i32 %39, %2
  %250 = and i32 %5, %12
  %251 = mul i32 %250, -22
  %252 = and i32 %40, %12
  %253 = mul i32 %252, -20
  %254 = and i32 %5, %0
  %255 = mul i32 %254, -9
  %256 = and i32 %40, %0
  %257 = mul i32 %256, 14
  %258 = and i32 %51, %12
  %259 = mul i32 %258, -12
  %260 = mul i32 %92, -13
  %261 = and i32 %51, %0
  %262 = mul i32 %105, -7
  %263 = add i32 %219, %237
  %264 = add i32 %263, %29
  %265 = add i32 %264, %162
  %266 = add i32 %265, %144
  %267 = add i32 %266, %224
  %268 = add i32 %267, %217
  %269 = add i32 %268, %187
  %270 = add i32 %269, %158
  %271 = add i32 %270, %143
  %272 = add i32 %271, %142
  %273 = add i32 %272, %112
  %274 = add i32 %273, %111
  %275 = add i32 %274, %99
  %276 = add i32 %275, %81
  %277 = add i32 %276, %71
  %278 = add i32 %277, %54
  %279 = add i32 %278, %48
  %280 = add i32 %279, %221
  %281 = add i32 %280, %210
  %282 = shl i32 %281, 1
  %283 = add i32 %63, %119
  %284 = sub i32 %283, %47
  %285 = sub i32 %284, %176
  %286 = mul i32 %285, 5
  %287 = add i32 %261, %230
  %288 = add i32 %287, %121
  %289 = shl i32 %288, 2
  %290 = xor i32 %39, %2
  %291 = sub i32 %290, %208
  %292 = add i32 %291, %153
  %293 = sub i32 %292, %174
  %294 = mul i32 %293, 3
  %295 = sub i32 1, %0
  %296 = add i32 %295, %12
  %297 = add i32 %296, %14
  %298 = sub i32 %297, %1
  %299 = add i32 %298, %68
  %300 = add i32 %299, %10
  %301 = sub i32 %300, %20
  %302 = sub i32 %301, %44
  %303 = sub i32 %302, %20
  %304 = add i32 %303, %11
  %305 = add i32 %304, %45
  %306 = add i32 %305, %27
  %307 = add i32 %306, %46
  %308 = sub i32 %307, %64
  %309 = sub i32 %308, %69
  %310 = add i32 %309, %79
  %311 = sub i32 %310, %85
  %312 = add i32 %311, %90
  %313 = sub i32 %312, %120
  %314 = add i32 %313, %30
  %315 = sub i32 %314, %127
  %316 = sub i32 %315, %150
  %317 = add i32 %316, %161
  %318 = add i32 %317, %179
  %319 = sub i32 %318, %4
  %320 = add i32 %319, %186
  %321 = sub i32 %320, %197
  %322 = sub i32 %321, %218
  %323 = add i32 %322, %223
  %324 = add i32 %323, %226
  %325 = add i32 %324, %49
  %326 = add i32 %325, %5
  %327 = sub i32 %326, %239
  %328 = add i32 %327, %241
  %329 = add i32 %328, %242
  %330 = add i32 %329, %243
  %331 = sub i32 %330, %249
  %332 = add i32 %331, %13
  %333 = sub i32 %332, %23
  %334 = sub i32 %333, %25
  %335 = sub i32 %334, %28
  %336 = sub i32 %335, %31
  %337 = add i32 %336, %38
  %338 = sub i32 %337, %41
  %339 = sub i32 %338, %43
  %340 = add i32 %339, %50
  %341 = sub i32 %340, %52
  %342 = sub i32 %341, %53
  %343 = sub i32 %342, %58
  %344 = sub i32 %343, %59
  %345 = sub i32 %344, %61
  %346 = sub i32 %345, %62
  %347 = add i32 %346, %67
  %348 = sub i32 %347, %70
  %349 = add i32 %348, %73
  %350 = sub i32 %349, %74
  %351 = sub i32 %350, %78
  %352 = sub i32 %351, %80
  %353 = sub i32 %352, %82
  %354 = add i32 %353, %84
  %355 = sub i32 %354, %91
  %356 = add i32 %355, %95
  %357 = add i32 %356, %96
  %358 = add i32 %357, %97
  %359 = sub i32 %358, %100
  %360 = sub i32 %359, %101
  %361 = sub i32 %360, %102
  %362 = add i32 %361, %103
  %363 = add i32 %362, %104
  %364 = sub i32 %363, %110
  %365 = add i32 %364, %118
  %366 = sub i32 %365, %124
  %367 = add i32 %366, %125
  %368 = add i32 %367, %126
  %369 = sub i32 %368, %134
  %370 = sub i32 %369, %135
  %371 = sub i32 %370, %136
  %372 = sub i32 %371, %137
  %373 = sub i32 %372, %138
  %374 = add i32 %373, %145
  %375 = sub i32 %374, %148
  %376 = add i32 %375, %149
  %377 = sub i32 %376, %152
  %378 = sub i32 %377, %154
  %379 = add i32 %378, %155
  %380 = sub i32 %379, %156
  %381 = add i32 %380, %157
  %382 = sub i32 %381, %159
  %383 = add i32 %382, %160
  %384 = add i32 %383, %163
  %385 = sub i32 %384, %166
  %386 = sub i32 %385, %167
  %387 = sub i32 %386, %168
  %388 = add i32 %387, %171
  %389 = sub i32 %388, %175
  %390 = add i32 %389, %177
  %391 = add i32 %390, %178
  %392 = add i32 %391, %180
  %393 = add i32 %392, %181
  %394 = sub i32 %393, %182
  %395 = add i32 %394, %183
  %396 = add i32 %395, %184
  %397 = add i32 %396, %185
  %398 = sub i32 %397, %188
  %399 = sub i32 %398, %189
  %400 = sub i32 %399, %190
  %401 = add i32 %400, %191
  %402 = sub i32 %401, %192
  %403 = sub i32 %402, %195
  %404 = add i32 %403, %196
  %405 = sub i32 %404, %198
  %406 = sub i32 %405, %199
  %407 = sub i32 %406, %200
  %408 = add i32 %407, %201
  %409 = add i32 %408, %202
  %410 = add i32 %409, %203
  %411 = add i32 %410, %204
  %412 = add i32 %411, %206
  %413 = sub i32 %412, %207
  %414 = sub i32 %413, %216
  %415 = add i32 %414, %220
  %416 = sub i32 %415, %146
  %417 = sub i32 %416, %55
  %418 = add i32 %417, %229
  %419 = add i32 %418, %231
  %420 = sub i32 %419, %234
  %421 = add i32 %420, %235
  %422 = sub i32 %421, %236
  %423 = sub i32 %422, %106
  %424 = add i32 %423, %115
  %425 = sub i32 %424, %128
  %426 = add i32 %425, %244
  %427 = add i32 %426, %245
  %428 = add i32 %427, %246
  %429 = sub i32 %428, %248
  %430 = sub i32 %429, %19
  %431 = sub i32 %430, %34
  %432 = sub i32 %431, %36
  %433 = add i32 %432, %57
  %434 = sub i32 %433, %77
  %435 = add i32 %434, %89
  %436 = sub i32 %435, %93
  %437 = sub i32 %436, %94
  %438 = sub i32 %437, %107
  %439 = sub i32 %438, %109
  %440 = sub i32 %439, %114
  %441 = add i32 %440, %117
  %442 = sub i32 %441, %123
  %443 = add i32 %442, %130
  %444 = sub i32 %443, %140
  %445 = add i32 %444, %141
  %446 = add i32 %445, %147
  %447 = sub i32 %446, %165
  %448 = add i32 %447, %170
  %449 = sub i32 %448, %172
  %450 = sub i32 %449, %194
  %451 = sub i32 %450, %211
  %452 = add i32 %451, %222
  %453 = add i32 %452, %225
  %454 = sub i32 %453, %228
  %455 = sub i32 %454, %233
  %456 = sub i32 %455, %238
  %457 = sub i32 %456, %240
  %458 = add i32 %457, %247
  %459 = add i32 %458, %251
  %460 = add i32 %459, %253
  %461 = add i32 %460, %255
  %462 = add i32 %461, %257
  %463 = add i32 %462, %259
  %464 = add i32 %463, %260
  %465 = add i32 %464, %262
  %466 = sub i32 %465, %133
  %467 = sub i32 %466, %215
  %468 = add i32 %467, %289
  %469 = add i32 %468, %286
  %470 = add i32 %469, %294
  %471 = add i32 %470, %282
  %472 = icmp eq i32 %9, %471
  %473 = select i1 %472, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %474 = tail call i32 @puts(i8* nonnull dereferenceable(1) %473)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
