digraph "DFG for'crackme' function" {
	Node0x85bd80[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x85bdf0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x85be90[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x85bf00[shape=record, label="  %8 = and i32 %2, %1"];
	Node0x85bf70[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x85bfe0[shape=record, label="  %10 = xor i32 %3, %0"];
	Node0x85c050[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0x85c0c0[shape=record, label="  %12 = sub i32 %9, %11"];
	Node0x85c130[shape=record, label="  %13 = add i32 %12, %7"];
	Node0x85c1a0[shape=record, label="  %14 = add i32 %13, %10"];
	Node0x85c210[shape=record, label="  %15 = xor i32 %2, %1"];
	Node0x85c280[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x85c2f0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x85c360[shape=record, label="  %18 = and i32 %5, %1"];
	Node0x85c3d0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x85c470[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x85c510[shape=record, label="  %21 = shl i32 %16, 2"];
	Node0x85c5b0[shape=record, label="  %22 = xor i32 %21, -4"];
	Node0x85c620[shape=record, label="  %23 = xor i32 %6, -1"];
	Node0x85c6c0[shape=record, label="  %24 = mul i32 %23, 6"];
	Node0x85c730[shape=record, label="  %25 = xor i32 %10, -1"];
	Node0x85c7a0[shape=record, label="  %26 = xor i32 %0, -1"];
	Node0x85c810[shape=record, label="  %27 = xor i32 %3, -1"];
	Node0x85c880[shape=record, label="  %28 = and i32 %3, %0"];
	Node0x85c8f0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x85c960[shape=record, label="  %30 = xor i32 %29, -2"];
	Node0x85c9d0[shape=record, label="  %31 = or i32 %3, %0"];
	Node0x85ca40[shape=record, label="  %32 = shl i32 %31, 2"];
	Node0x85ccc0[shape=record, label="  %33 = xor i32 %32, -4"];
	Node0x85cd30[shape=record, label="  %34 = and i32 %27, %0"];
	Node0x85cda0[shape=record, label="  %35 = and i32 %26, %3"];
	Node0x85ce10[shape=record, label="  %36 = shl i32 %28, 2"];
	Node0x85ce80[shape=record, label="  %37 = mul i32 %15, -2"];
	Node0x85cef0[shape=record, label="  %38 = sub i32 %1, %34"];
	Node0x85cf90[shape=record, label="  %39 = mul i32 %38, 5"];
	Node0x85d000[shape=record, label="  %40 = sub i32 %0, %2"];
	Node0x85d070[shape=record, label="  %41 = add i32 %40, %17"];
	Node0x85d0e0[shape=record, label="  %42 = add i32 %41, %27"];
	Node0x85d150[shape=record, label="  %43 = add i32 %42, %24"];
	Node0x85d1c0[shape=record, label="  %44 = add i32 %43, %25"];
	Node0x85d230[shape=record, label="  %45 = sub i32 %44, %35"];
	Node0x85d2a0[shape=record, label="  %46 = add i32 %45, %37"];
	Node0x85d310[shape=record, label="  %47 = sub i32 %46, %20"];
	Node0x85d380[shape=record, label="  %48 = add i32 %47, %22"];
	Node0x85d3f0[shape=record, label="  %49 = sub i32 %48, %36"];
	Node0x85d460[shape=record, label="  %50 = add i32 %49, %30"];
	Node0x85d4d0[shape=record, label="  %51 = sub i32 %50, %33"];
	Node0x85d540[shape=record, label="  %52 = add i32 %51, %39"];
	Node0x85d5b0[shape=record, label="  %53 = icmp eq i32 %14, %52"];
	Node0x7fc268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x85da50[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x85daa0[shape=record, label="  ret void"];
	Node0x85bd80 -> Node0x85bdf0;
	Node0x85bdf0 -> Node0x85be90;
	Node0x85be90 -> Node0x85bf00;
	Node0x85bf00 -> Node0x85bf70;
	Node0x85bf70 -> Node0x85bfe0;
	Node0x85bfe0 -> Node0x85c050;
	Node0x85c050 -> Node0x85c0c0;
	Node0x85c0c0 -> Node0x85c130;
	Node0x85c130 -> Node0x85c1a0;
	Node0x85c1a0 -> Node0x85c210;
	Node0x85c210 -> Node0x85c280;
	Node0x85c280 -> Node0x85c2f0;
	Node0x85c2f0 -> Node0x85c360;
	Node0x85c360 -> Node0x85c3d0;
	Node0x85c3d0 -> Node0x85c470;
	Node0x85c470 -> Node0x85c510;
	Node0x85c510 -> Node0x85c5b0;
	Node0x85c5b0 -> Node0x85c620;
	Node0x85c620 -> Node0x85c6c0;
	Node0x85c6c0 -> Node0x85c730;
	Node0x85c730 -> Node0x85c7a0;
	Node0x85c7a0 -> Node0x85c810;
	Node0x85c810 -> Node0x85c880;
	Node0x85c880 -> Node0x85c8f0;
	Node0x85c8f0 -> Node0x85c960;
	Node0x85c960 -> Node0x85c9d0;
	Node0x85c9d0 -> Node0x85ca40;
	Node0x85ca40 -> Node0x85ccc0;
	Node0x85ccc0 -> Node0x85cd30;
	Node0x85cd30 -> Node0x85cda0;
	Node0x85cda0 -> Node0x85ce10;
	Node0x85ce10 -> Node0x85ce80;
	Node0x85ce80 -> Node0x85cef0;
	Node0x85cef0 -> Node0x85cf90;
	Node0x85cf90 -> Node0x85d000;
	Node0x85d000 -> Node0x85d070;
	Node0x85d070 -> Node0x85d0e0;
	Node0x85d0e0 -> Node0x85d150;
	Node0x85d150 -> Node0x85d1c0;
	Node0x85d1c0 -> Node0x85d230;
	Node0x85d230 -> Node0x85d2a0;
	Node0x85d2a0 -> Node0x85d310;
	Node0x85d310 -> Node0x85d380;
	Node0x85d380 -> Node0x85d3f0;
	Node0x85d3f0 -> Node0x85d460;
	Node0x85d460 -> Node0x85d4d0;
	Node0x85d4d0 -> Node0x85d540;
	Node0x85d540 -> Node0x85d5b0;
	Node0x85d5b0 -> Node0x7fc268;
	Node0x7fc268 -> Node0x85da50;
	Node0x85da50 -> Node0x85daa0;
edge [color=red]
	Node0x85bd80 -> Node0x85bdf0;
	Node0x85bdf0 -> Node0x85be90;
	Node0x85bf00 -> Node0x85bf70;
	Node0x85bf70 -> Node0x85c0c0;
	Node0x85c050 -> Node0x85c0c0;
	Node0x85c0c0 -> Node0x85c130;
	Node0x85be90 -> Node0x85c130;
	Node0x85c130 -> Node0x85c1a0;
	Node0x85bfe0 -> Node0x85c1a0;
	Node0x85c280 -> Node0x85c2f0;
	Node0x85bd80 -> Node0x85c360;
	Node0x85c360 -> Node0x85c3d0;
	Node0x85c3d0 -> Node0x85c470;
	Node0x85c280 -> Node0x85c510;
	Node0x85c510 -> Node0x85c5b0;
	Node0x85bdf0 -> Node0x85c620;
	Node0x85c620 -> Node0x85c6c0;
	Node0x85bfe0 -> Node0x85c730;
	Node0x85c880 -> Node0x85c8f0;
	Node0x85c8f0 -> Node0x85c960;
	Node0x85c9d0 -> Node0x85ca40;
	Node0x85ca40 -> Node0x85ccc0;
	Node0x85c810 -> Node0x85cd30;
	Node0x85c7a0 -> Node0x85cda0;
	Node0x85c880 -> Node0x85ce10;
	Node0x85c210 -> Node0x85ce80;
	Node0x85cd30 -> Node0x85cef0;
	Node0x85cef0 -> Node0x85cf90;
	Node0x85d000 -> Node0x85d070;
	Node0x85c2f0 -> Node0x85d070;
	Node0x85d070 -> Node0x85d0e0;
	Node0x85c810 -> Node0x85d0e0;
	Node0x85d0e0 -> Node0x85d150;
	Node0x85c6c0 -> Node0x85d150;
	Node0x85d150 -> Node0x85d1c0;
	Node0x85c730 -> Node0x85d1c0;
	Node0x85d1c0 -> Node0x85d230;
	Node0x85cda0 -> Node0x85d230;
	Node0x85d230 -> Node0x85d2a0;
	Node0x85ce80 -> Node0x85d2a0;
	Node0x85d2a0 -> Node0x85d310;
	Node0x85c470 -> Node0x85d310;
	Node0x85d310 -> Node0x85d380;
	Node0x85c5b0 -> Node0x85d380;
	Node0x85d380 -> Node0x85d3f0;
	Node0x85ce10 -> Node0x85d3f0;
	Node0x85d3f0 -> Node0x85d460;
	Node0x85c960 -> Node0x85d460;
	Node0x85d460 -> Node0x85d4d0;
	Node0x85ccc0 -> Node0x85d4d0;
	Node0x85d4d0 -> Node0x85d540;
	Node0x85cf90 -> Node0x85d540;
	Node0x85c1a0 -> Node0x85d5b0;
	Node0x85d540 -> Node0x85d5b0;
	Node0x85d5b0 -> Node0x7fc268;
	Node0x7fc268 -> Node0x85da50;
}
