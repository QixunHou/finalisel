; ModuleID = '../.././c_source_file/0340_path_condition_crackme.c'
source_filename = "../.././c_source_file/0340_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = and i32 %7, %0
  %10 = or i32 %9, %1
  %11 = add i32 %10, %8
  %12 = or i32 %4, %3
  %13 = xor i32 %12, -1
  %14 = xor i32 %5, %4
  %15 = or i32 %14, %13
  %16 = sub i32 %11, %15
  %17 = and i32 %1, %0
  %18 = xor i32 %2, %0
  %19 = and i32 %2, %1
  %20 = or i32 %9, %19
  %21 = xor i32 %2, %1
  %22 = xor i32 %21, -1
  %23 = or i32 %17, %22
  %24 = or i32 %7, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %1
  %27 = and i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %1, %0
  %30 = and i32 %29, %28
  %31 = xor i32 %8, -1
  %32 = xor i32 %27, %31
  %33 = or i32 %1, %0
  %34 = and i32 %21, %33
  %35 = or i32 %31, %0
  %36 = xor i32 %22, %0
  %37 = xor i32 %1, -1
  %38 = or i32 %18, %37
  %39 = or i32 %18, %1
  %40 = xor i32 %18, -1
  %41 = or i32 %29, %40
  %42 = and i32 %40, %1
  %43 = and i32 %37, %2
  %44 = and i32 %43, %0
  %45 = or i32 %37, %2
  %46 = xor i32 %45, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %44, %47
  %49 = xor i32 %0, -1
  %50 = and i32 %43, %49
  %51 = and i32 %22, %0
  %52 = or i32 %50, %51
  %53 = or i32 %22, %0
  %54 = or i32 %25, %1
  %55 = and i32 %33, %40
  %56 = and i32 %21, %49
  %57 = xor i32 %33, %2
  %58 = or i32 %2, %0
  %59 = and i32 %58, %29
  %60 = or i32 %7, %1
  %61 = xor i32 %33, -1
  %62 = or i32 %27, %61
  %63 = and i32 %29, %2
  %64 = and i32 %60, %0
  %65 = or i32 %2, %1
  %66 = and i32 %65, %0
  %67 = xor i32 %58, -1
  %68 = or i32 %17, %67
  %69 = and i32 %18, %1
  %70 = or i32 %29, %25
  %71 = xor i32 %65, %17
  %72 = and i32 %18, %37
  %73 = or i32 %37, %0
  %74 = xor i32 %31, %0
  %75 = or i32 %49, %1
  %76 = xor i32 %19, -1
  %77 = or i32 %76, %0
  %78 = xor i32 %29, -1
  %79 = or i32 %18, %78
  %80 = xor i32 %61, %2
  %81 = or i32 %18, %17
  %82 = or i32 %44, %46
  %83 = and i32 %19, %49
  %84 = and i32 %21, %0
  %85 = xor i32 %84, 2147483647
  %86 = xor i32 %85, %83
  %87 = shl i32 %86, 1
  %88 = and i32 %24, %78
  %89 = and i32 %73, %40
  %90 = xor i32 %65, -1
  %91 = or i32 %90, %0
  %92 = and i32 %29, %40
  %93 = and i32 %33, %22
  %94 = and i32 %24, %29
  %95 = and i32 %18, %33
  %96 = or i32 %67, %78
  %97 = and i32 %90, %49
  %98 = and i32 %8, %49
  %99 = and i32 %90, %0
  %100 = and i32 %8, %0
  %101 = xor i32 %60, -1
  %102 = and i32 %101, %49
  %103 = and i32 %19, %0
  %104 = xor i32 %3, -1
  %105 = and i32 %104, %4
  %106 = xor i32 %105, -1
  %107 = add i32 %105, 1
  %108 = xor i32 %14, -1
  %109 = and i32 %5, %4
  %110 = xor i32 %5, -1
  %111 = and i32 %110, %3
  %112 = or i32 %109, %111
  %113 = and i32 %110, %4
  %114 = or i32 %113, %3
  %115 = or i32 %110, %3
  %116 = xor i32 %115, -1
  %117 = xor i32 %116, %4
  %118 = or i32 %14, %104
  %119 = shl i32 %118, 1
  %120 = and i32 %104, %5
  %121 = and i32 %120, %4
  %122 = or i32 %104, %5
  %123 = xor i32 %4, -1
  %124 = xor i32 %122, %123
  %125 = xor i32 %124, %121
  %126 = xor i32 %4, %3
  %127 = or i32 %126, %110
  %128 = and i32 %4, %3
  %129 = or i32 %5, %3
  %130 = xor i32 %129, %128
  %131 = or i32 %104, %4
  %132 = xor i32 %109, %131
  %133 = or i32 %14, %126
  %134 = and i32 %5, %3
  %135 = and i32 %134, %4
  %136 = xor i32 %129, %4
  %137 = xor i32 %135, -1
  %138 = xor i32 %136, %137
  %139 = or i32 %135, %136
  %140 = shl i32 %139, 1
  %141 = xor i32 %5, %3
  %142 = xor i32 %141, -1
  %143 = and i32 %131, %142
  %144 = shl i32 %143, 1
  %145 = xor i32 %128, -1
  %146 = and i32 %110, %145
  %147 = xor i32 %126, -1
  %148 = and i32 %147, %5
  %149 = or i32 %14, %3
  %150 = or i32 %110, %4
  %151 = and i32 %150, %104
  %152 = xor i32 %142, %4
  %153 = and i32 %126, %110
  %154 = or i32 %105, %110
  %155 = shl i32 %154, 1
  %156 = xor i32 %113, -1
  %157 = and i32 %126, %156
  %158 = or i32 %134, %123
  %159 = shl i32 %158, 1
  %160 = xor i32 %141, %4
  %161 = or i32 %121, %160
  %162 = add i32 %126, 1
  %163 = or i32 %141, %105
  %164 = and i32 %122, %123
  %165 = xor i32 %164, 1073741823
  %166 = xor i32 %165, %121
  %167 = shl i32 %166, 2
  %168 = or i32 %5, %4
  %169 = xor i32 %168, -1
  %170 = xor i32 %169, %3
  %171 = xor i32 %156, %3
  %172 = xor i32 %129, -1
  %173 = add i32 %129, 1
  %174 = xor i32 %109, %12
  %175 = xor i32 %109, -1
  %176 = and i32 %126, %175
  %177 = xor i32 %113, %3
  %178 = and i32 %14, %106
  %179 = and i32 %120, %123
  %180 = and i32 %122, %4
  %181 = xor i32 %180, -1
  %182 = xor i32 %179, %181
  %183 = shl i32 %156, 1
  %184 = and i32 %115, %123
  %185 = and i32 %134, %123
  %186 = and i32 %129, %4
  %187 = or i32 %185, %186
  %188 = xor i32 %160, -1
  %189 = xor i32 %121, %188
  %190 = xor i32 %150, -1
  %191 = and i32 %175, %104
  %192 = xor i32 %134, -1
  %193 = or i32 %192, %4
  %194 = and i32 %12, %110
  %195 = or i32 %134, %4
  %196 = and i32 %156, %147
  %197 = and i32 %129, %123
  %198 = or i32 %135, %197
  %199 = xor i32 %145, %5
  %200 = xor i32 %175, %3
  %201 = shl i32 %110, 1
  %202 = xor i32 %150, %3
  %203 = shl i32 %202, 1
  %204 = and i32 %14, %145
  %205 = and i32 %14, %104
  %206 = shl i32 %128, 1
  %207 = and i32 %108, %3
  %208 = and i32 %142, %4
  %209 = or i32 %142, %13
  %210 = or i32 %14, %147
  %211 = and i32 %168, %126
  %212 = shl i32 %211, 1
  %213 = or i32 %111, %4
  %214 = shl i32 %213, 1
  %215 = xor i32 %190, %3
  %216 = and i32 %145, %5
  %217 = or i32 %141, %13
  %218 = and i32 %141, %131
  %219 = or i32 %111, %105
  %220 = and i32 %115, %4
  %221 = shl i32 %220, 1
  %222 = xor i32 %12, %5
  %223 = or i32 %108, %3
  %224 = xor i32 %197, %137
  %225 = shl i32 %123, 1
  %226 = xor i32 %131, -1
  %227 = or i32 %142, %226
  %228 = add i32 %128, 1
  %229 = and i32 %106, %5
  %230 = xor i32 %105, %192
  %231 = or i32 %115, %123
  %232 = and i32 %141, %4
  %233 = or i32 %185, %232
  %234 = add i32 %168, 1
  %235 = add i32 %131, 1
  %236 = or i32 %109, %13
  %237 = xor i32 %111, 2147483647
  %238 = and i32 %168, %104
  %239 = xor i32 %109, %129
  %240 = and i32 %192, %123
  %241 = shl i32 %134, 1
  %242 = and i32 %141, %12
  %243 = and i32 %168, %3
  %244 = shl i32 %243, 1
  %245 = or i32 %109, %172
  %246 = or i32 %190, %3
  %247 = xor i32 %232, -1
  %248 = xor i32 %185, %247
  %249 = or i32 %115, %4
  %250 = shl i32 %249, 1
  %251 = and i32 %14, %12
  %252 = or i32 %142, %4
  %253 = or i32 %109, %226
  %254 = and i32 %142, %145
  %255 = and i32 %175, %3
  %256 = and i32 %126, %108
  %257 = shl i32 %13, 2
  %258 = and i32 %142, %106
  %259 = and i32 %141, %106
  %260 = or i32 %113, %147
  %261 = or i32 %126, %190
  %262 = shl i32 %261, 1
  %263 = xor i32 %113, %192
  %264 = and i32 %141, %145
  %265 = and i32 %14, %147
  %266 = or i32 %169, %147
  %267 = and i32 %156, %3
  %268 = or i32 %169, %104
  %269 = or i32 %108, %226
  %270 = xor i32 %115, %4
  %271 = or i32 %109, %104
  %272 = or i32 %110, %226
  %273 = or i32 %109, %3
  %274 = or i32 %147, %5
  %275 = xor i32 %168, %3
  %276 = and i32 %108, %104
  %277 = and i32 %142, %123
  %278 = or i32 %141, %4
  %279 = or i32 %172, %123
  %280 = or i32 %128, %110
  %281 = and i32 %141, %123
  %282 = or i32 %135, %281
  %283 = and i32 %131, %110
  %284 = or i32 %128, %5
  %285 = shl i32 %284, 1
  %286 = or i32 %116, %123
  %287 = xor i32 %113, %115
  %288 = xor i32 %131, %5
  %289 = xor i32 %172, %4
  %290 = or i32 %113, %104
  %291 = or i32 %14, %105
  %292 = and i32 %14, %3
  %293 = xor i32 %278, -1
  %294 = or i32 %121, %293
  %295 = and i32 %175, %147
  %296 = or i32 %109, %147
  %297 = or i32 %226, %5
  %298 = and i32 %12, %108
  %299 = or i32 %14, %226
  %300 = or i32 %13, %5
  %301 = xor i32 %128, %5
  %302 = or i32 %172, %4
  %303 = or i32 %129, %4
  %304 = and i32 %168, %147
  %305 = or i32 %190, %147
  %306 = and i32 %150, %3
  %307 = and i32 %108, %145
  %308 = xor i32 %237, %4
  %309 = shl i32 %308, 1
  %310 = or i32 %113, %134
  %311 = or i32 %135, %188
  %312 = or i32 %108, %104
  %313 = or i32 %126, %169
  %314 = or i32 %128, %142
  %315 = or i32 %192, %123
  %316 = shl i32 %315, 1
  %317 = xor i32 %13, %5
  %318 = xor i32 %111, %4
  %319 = shl i32 %5, 1
  %320 = or i32 %142, %123
  %321 = shl i32 %320, 1
  %322 = shl i32 %175, 1
  %323 = or i32 %105, %108
  %324 = or i32 %105, %142
  %325 = xor i32 %106, %5
  %326 = or i32 %141, %128
  %327 = xor i32 %281, 2147483647
  %328 = xor i32 %327, %135
  %329 = shl i32 %328, 1
  %330 = and i32 %131, %5
  %331 = and i32 %12, %142
  %332 = or i32 %121, %164
  %333 = or i32 %110, %147
  %334 = or i32 %126, %108
  %335 = xor i32 %150, %128
  %336 = or i32 %169, %3
  %337 = and i32 %150, %147
  %338 = shl i32 %337, 1
  %339 = or i32 %109, %126
  %340 = and i32 %172, %123
  %341 = mul i32 %340, 18
  %342 = and i32 %172, %4
  %343 = mul i32 %342, 13
  %344 = and i32 %111, %4
  %345 = and i32 %116, %123
  %346 = shl i32 %345, 1
  %347 = mul i32 %185, 10
  %348 = and i32 %116, %4
  %349 = shl i32 %348, 3
  %350 = add i32 %148, %141
  %351 = sub i32 %350, %269
  %352 = add i32 %351, %324
  %353 = add i32 %352, %246
  %354 = add i32 %353, %208
  %355 = mul i32 %354, 5
  %356 = add i32 %344, %103
  %357 = sub i32 %356, %135
  %358 = mul i32 %357, 7
  %359 = add i32 %34, %98
  %360 = add i32 %359, %298
  %361 = shl i32 %360, 2
  %362 = sub i32 %73, %17
  %363 = add i32 %362, %97
  %364 = add i32 %363, %93
  %365 = add i32 %364, %36
  %366 = add i32 %365, %20
  %367 = add i32 %366, %333
  %368 = add i32 %367, %109
  %369 = add i32 %368, %222
  %370 = add i32 %369, %129
  %371 = add i32 %370, %336
  %372 = add i32 %371, %326
  %373 = add i32 %372, %307
  %374 = add i32 %373, %232
  %375 = add i32 %374, %278
  %376 = add i32 %375, %277
  %377 = add i32 %376, %273
  %378 = add i32 %377, %256
  %379 = add i32 %378, %255
  %380 = add i32 %379, %254
  %381 = add i32 %380, %245
  %382 = add i32 %381, %236
  %383 = add i32 %382, %215
  %384 = add i32 %383, %196
  %385 = add i32 %384, %187
  %386 = shl i32 %385, 1
  %387 = or i32 %78, %2
  %388 = sub i32 %387, %83
  %389 = add i32 %388, %99
  %390 = add i32 %389, %56
  %391 = sub i32 %390, %210
  %392 = add i32 %391, %265
  %393 = mul i32 %392, 3
  %394 = sub i32 1, %0
  %395 = add i32 %394, %75
  %396 = sub i32 %395, %57
  %397 = add i32 %396, %19
  %398 = sub i32 %397, %60
  %399 = sub i32 %398, %63
  %400 = sub i32 %399, %80
  %401 = add i32 %400, %31
  %402 = add i32 %401, %9
  %403 = add i32 %402, %104
  %404 = sub i32 %403, %3
  %405 = add i32 %404, %23
  %406 = sub i32 %405, %26
  %407 = add i32 %406, %30
  %408 = add i32 %407, %32
  %409 = sub i32 %408, %35
  %410 = sub i32 %409, %38
  %411 = sub i32 %410, %39
  %412 = sub i32 %411, %41
  %413 = add i32 %412, %42
  %414 = add i32 %413, %53
  %415 = add i32 %414, %54
  %416 = sub i32 %415, %55
  %417 = sub i32 %416, %59
  %418 = add i32 %417, %62
  %419 = add i32 %418, %64
  %420 = sub i32 %419, %66
  %421 = sub i32 %420, %68
  %422 = sub i32 %421, %69
  %423 = add i32 %422, %70
  %424 = sub i32 %423, %71
  %425 = add i32 %424, %72
  %426 = sub i32 %425, %74
  %427 = sub i32 %426, %77
  %428 = sub i32 %427, %79
  %429 = sub i32 %428, %81
  %430 = sub i32 %429, %88
  %431 = sub i32 %430, %89
  %432 = sub i32 %431, %91
  %433 = sub i32 %432, %92
  %434 = add i32 %433, %94
  %435 = add i32 %434, %95
  %436 = add i32 %435, %96
  %437 = add i32 %436, %100
  %438 = sub i32 %437, %102
  %439 = sub i32 %438, %4
  %440 = sub i32 %439, %48
  %441 = sub i32 %440, %52
  %442 = add i32 %441, %82
  %443 = add i32 %442, %107
  %444 = add i32 %443, %162
  %445 = sub i32 %444, %225
  %446 = add i32 %445, %228
  %447 = add i32 %446, %235
  %448 = sub i32 %447, %105
  %449 = add i32 %448, %126
  %450 = add i32 %449, %12
  %451 = add i32 %450, %108
  %452 = sub i32 %451, %127
  %453 = add i32 %452, %146
  %454 = sub i32 %453, %153
  %455 = add i32 %454, %173
  %456 = sub i32 %455, %14
  %457 = sub i32 %456, %194
  %458 = add i32 %457, %199
  %459 = sub i32 %458, %201
  %460 = sub i32 %459, %206
  %461 = sub i32 %460, %216
  %462 = add i32 %461, %229
  %463 = add i32 %462, %234
  %464 = sub i32 %463, %257
  %465 = add i32 %464, 1
  %466 = add i32 %465, %272
  %467 = sub i32 %466, %274
  %468 = sub i32 %467, %280
  %469 = add i32 %468, %283
  %470 = add i32 %469, %168
  %471 = sub i32 %470, %288
  %472 = sub i32 %471, %297
  %473 = add i32 %472, %192
  %474 = add i32 %473, %300
  %475 = add i32 %474, %301
  %476 = sub i32 %475, %113
  %477 = add i32 %476, %317
  %478 = sub i32 %477, %319
  %479 = sub i32 %478, %325
  %480 = sub i32 %479, %330
  %481 = sub i32 %480, %87
  %482 = sub i32 %481, %112
  %483 = sub i32 %482, %114
  %484 = sub i32 %483, %117
  %485 = add i32 %484, %130
  %486 = add i32 %485, %132
  %487 = sub i32 %486, %133
  %488 = sub i32 %487, %149
  %489 = sub i32 %488, %151
  %490 = add i32 %489, %152
  %491 = sub i32 %490, %155
  %492 = add i32 %491, %157
  %493 = add i32 %492, %163
  %494 = add i32 %493, %170
  %495 = sub i32 %494, %171
  %496 = add i32 %495, %174
  %497 = sub i32 %496, %176
  %498 = add i32 %497, %177
  %499 = add i32 %498, %178
  %500 = sub i32 %499, %183
  %501 = add i32 %500, %184
  %502 = add i32 %501, %191
  %503 = sub i32 %502, %193
  %504 = add i32 %503, %195
  %505 = add i32 %504, %200
  %506 = add i32 %505, %204
  %507 = sub i32 %506, %205
  %508 = sub i32 %507, %207
  %509 = add i32 %508, %209
  %510 = sub i32 %509, %217
  %511 = add i32 %510, %218
  %512 = sub i32 %511, %219
  %513 = add i32 %512, %223
  %514 = add i32 %513, %227
  %515 = sub i32 %514, %230
  %516 = sub i32 %515, %231
  %517 = add i32 %516, %238
  %518 = add i32 %517, %239
  %519 = add i32 %518, %240
  %520 = sub i32 %519, %241
  %521 = sub i32 %520, %242
  %522 = add i32 %521, %251
  %523 = sub i32 %522, %136
  %524 = sub i32 %523, %252
  %525 = add i32 %524, %253
  %526 = add i32 %525, %197
  %527 = add i32 %526, %258
  %528 = add i32 %527, %259
  %529 = sub i32 %528, %260
  %530 = sub i32 %529, %263
  %531 = sub i32 %530, %264
  %532 = sub i32 %531, %266
  %533 = sub i32 %532, %267
  %534 = add i32 %533, %268
  %535 = sub i32 %534, %270
  %536 = sub i32 %535, %271
  %537 = add i32 %536, %275
  %538 = add i32 %537, %276
  %539 = sub i32 %538, %279
  %540 = sub i32 %539, %285
  %541 = add i32 %540, %286
  %542 = add i32 %541, %287
  %543 = sub i32 %542, %289
  %544 = sub i32 %543, %290
  %545 = add i32 %544, %291
  %546 = sub i32 %545, %292
  %547 = add i32 %546, %295
  %548 = sub i32 %547, %296
  %549 = add i32 %548, %299
  %550 = add i32 %549, %302
  %551 = sub i32 %550, %303
  %552 = sub i32 %551, %304
  %553 = add i32 %552, %305
  %554 = add i32 %553, %306
  %555 = sub i32 %554, %310
  %556 = sub i32 %555, %312
  %557 = add i32 %556, %313
  %558 = add i32 %557, %314
  %559 = add i32 %558, %318
  %560 = sub i32 %559, %322
  %561 = sub i32 %560, %323
  %562 = add i32 %561, %331
  %563 = add i32 %562, %334
  %564 = add i32 %563, %335
  %565 = sub i32 %564, %339
  %566 = sub i32 %565, %119
  %567 = add i32 %566, %125
  %568 = add i32 %567, %138
  %569 = sub i32 %568, %144
  %570 = sub i32 %569, %159
  %571 = add i32 %570, %161
  %572 = sub i32 %571, %182
  %573 = sub i32 %572, %189
  %574 = add i32 %573, %198
  %575 = sub i32 %574, %203
  %576 = sub i32 %575, %212
  %577 = sub i32 %576, %214
  %578 = sub i32 %577, %221
  %579 = add i32 %578, %224
  %580 = sub i32 %579, %233
  %581 = sub i32 %580, %244
  %582 = sub i32 %581, %248
  %583 = sub i32 %582, %250
  %584 = sub i32 %583, %262
  %585 = sub i32 %584, %282
  %586 = sub i32 %585, %294
  %587 = sub i32 %586, %309
  %588 = add i32 %587, %311
  %589 = sub i32 %588, %316
  %590 = sub i32 %589, %321
  %591 = sub i32 %590, %332
  %592 = sub i32 %591, %338
  %593 = add i32 %592, %341
  %594 = add i32 %593, %343
  %595 = sub i32 %594, %346
  %596 = add i32 %595, %347
  %597 = sub i32 %596, %349
  %598 = sub i32 %597, %140
  %599 = sub i32 %598, %167
  %600 = sub i32 %599, %329
  %601 = add i32 %600, %358
  %602 = add i32 %601, %361
  %603 = add i32 %602, %355
  %604 = add i32 %603, %393
  %605 = add i32 %604, %386
  %606 = icmp eq i32 %16, %605
  %607 = select i1 %606, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %608 = tail call i32 @puts(i8* nonnull dereferenceable(1) %607)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
