digraph "DFG for'main' function" {
	Node0xdb0af8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xdb0b78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xdb0c08[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xdb0c68[shape=record, label="  %4 = alloca i32, align 4"];
	Node0xdb0d18[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0xdb1148[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xdb1228[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0xdb1328[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xdb13e8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0xdb1498[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xdb1558[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0xdb1608[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xdab750[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0xdb1808[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xdb2778[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xdb2de8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xdb2e48[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0xdb2f58[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0xdb31b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xdb3318[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xdb3428[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xdb3538[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xdb35f8[shape=record, label="  ret i32 0"];
	Node0xdb0af8 -> Node0xdb0b78;
	Node0xdb0b78 -> Node0xdb0c08;
	Node0xdb0c08 -> Node0xdb0c68;
	Node0xdb0c68 -> Node0xdb0d18;
	Node0xdb0d18 -> Node0xdb1148;
	Node0xdb1148 -> Node0xdb1228;
	Node0xdb1228 -> Node0xdb1328;
	Node0xdb1328 -> Node0xdb13e8;
	Node0xdb13e8 -> Node0xdb1498;
	Node0xdb1498 -> Node0xdb1558;
	Node0xdb1558 -> Node0xdb1608;
	Node0xdb1608 -> Node0xdab750;
	Node0xdab750 -> Node0xdb1808;
	Node0xdb1808 -> Node0xdb2778;
	Node0xdb2778 -> Node0xdb2de8;
	Node0xdb2de8 -> Node0xdb2e48;
	Node0xdb2e48 -> Node0xdb2f58;
	Node0xdb2f58 -> Node0xdb31b8;
	Node0xdb31b8 -> Node0xdb3318;
	Node0xdb3318 -> Node0xdb3428;
	Node0xdb3428 -> Node0xdb3538;
	Node0xdb3538 -> Node0xdb35f8;
edge [color=red]
	Node0xdb0af8 -> Node0xdb0d18;
	Node0xdb0d18 -> Node0xdb1148;
	Node0xdb0b78 -> Node0xdb1228;
	Node0xdb1228 -> Node0xdb1328;
	Node0xdb0c08 -> Node0xdb13e8;
	Node0xdb13e8 -> Node0xdb1498;
	Node0xdb0c68 -> Node0xdb1558;
	Node0xdb1558 -> Node0xdb1608;
	Node0xdb0af8 -> Node0xdab750;
	Node0xdb0b78 -> Node0xdab750;
	Node0xdb0c08 -> Node0xdab750;
	Node0xdb0c68 -> Node0xdab750;
	Node0xdb0af8 -> Node0xdb1808;
	Node0xdb0b78 -> Node0xdb2778;
	Node0xdb0c08 -> Node0xdb2de8;
	Node0xdb0c68 -> Node0xdb2e48;
	Node0xdb1808 -> Node0xdb2f58;
	Node0xdb2778 -> Node0xdb2f58;
	Node0xdb2de8 -> Node0xdb2f58;
	Node0xdb2e48 -> Node0xdb2f58;
	Node0xdb1558 -> Node0xdb31b8;
	Node0xdb13e8 -> Node0xdb3318;
	Node0xdb1228 -> Node0xdb3428;
	Node0xdb0d18 -> Node0xdb3538;
}
