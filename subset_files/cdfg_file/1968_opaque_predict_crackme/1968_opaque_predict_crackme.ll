; ModuleID = '../.././c_source_file/1968_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1968_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = or i32 %4, %3
  %8 = and i32 %1, %0
  %9 = xor i32 %2, %0
  %10 = or i32 %9, %8
  %11 = xor i32 %1, -1
  %12 = or i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = xor i32 %13, %2
  %15 = add i32 %14, %6
  %16 = sub i32 %15, %10
  %17 = add i32 %16, %7
  %18 = xor i32 %4, -1
  %19 = and i32 %18, %3
  %20 = or i32 %18, %3
  %21 = xor i32 %4, %3
  %22 = xor i32 %7, -1
  %23 = xor i32 %20, -1
  %24 = and i32 %4, %3
  %25 = and i32 %11, %0
  %26 = xor i32 %9, -1
  %27 = or i32 %25, %26
  %28 = xor i32 %0, -1
  %29 = and i32 %11, %2
  %30 = and i32 %29, %28
  %31 = xor i32 %2, %1
  %32 = or i32 %31, %28
  %33 = xor i32 %32, -1
  %34 = or i32 %30, %33
  %35 = or i32 %2, %0
  %36 = xor i32 %35, %1
  %37 = xor i32 %2, -1
  %38 = and i32 %12, %37
  %39 = or i32 %37, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %1
  %42 = shl i32 %41, 1
  %43 = xor i32 %1, %0
  %44 = and i32 %9, %43
  %45 = and i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %43, -1
  %48 = and i32 %46, %47
  %49 = and i32 %31, %12
  %50 = or i32 %26, %47
  %51 = shl i32 %50, 1
  %52 = or i32 %37, %1
  %53 = and i32 %26, %1
  %54 = and i32 %35, %11
  %55 = xor i32 %35, -1
  %56 = or i32 %8, %55
  %57 = or i32 %45, %13
  %58 = or i32 %40, %47
  %59 = or i32 %1, %0
  %60 = xor i32 %59, -1
  %61 = xor i32 %31, -1
  %62 = or i32 %61, %60
  %63 = and i32 %37, %1
  %64 = xor i32 %63, -1
  %65 = and i32 %64, %0
  %66 = xor i32 %45, %59
  %67 = and i32 %52, %0
  %68 = or i32 %31, %0
  %69 = xor i32 %45, %12
  %70 = or i32 %2, %1
  %71 = xor i32 %70, -1
  %72 = or i32 %45, %71
  %73 = or i32 %8, %37
  %74 = and i32 %37, %0
  %75 = or i32 %74, %1
  %76 = add i32 %59, 1
  %77 = and i32 %2, %1
  %78 = xor i32 %77, -1
  %79 = xor i32 %78, %0
  %80 = or i32 %37, %60
  %81 = or i32 %9, %25
  %82 = or i32 %77, %28
  %83 = xor i32 %25, -1
  %84 = and i32 %37, %83
  %85 = or i32 %45, %47
  %86 = and i32 %61, %28
  %87 = or i32 %9, %47
  %88 = xor i32 %83, %2
  %89 = or i32 %43, %26
  %90 = and i32 %35, %43
  %91 = or i32 %31, %60
  %92 = shl i32 %91, 1
  %93 = or i32 %55, %11
  %94 = or i32 %8, %26
  %95 = and i32 %77, %0
  %96 = and i32 %31, %28
  %97 = or i32 %95, %96
  %98 = or i32 %61, %13
  %99 = or i32 %43, %2
  %100 = and i32 %12, %2
  %101 = xor i32 %40, %1
  %102 = xor i32 %71, %0
  %103 = xor i32 %8, -1
  %104 = and i32 %9, %103
  %105 = xor i32 %103, %2
  %106 = or i32 %9, %43
  %107 = and i32 %9, %1
  %108 = or i32 %11, %2
  %109 = and i32 %108, %0
  %110 = xor i32 %109, -1
  %111 = xor i32 %30, %110
  %112 = xor i32 %39, %1
  %113 = and i32 %12, %26
  %114 = or i32 %37, %47
  %115 = or i32 %30, %109
  %116 = and i32 %37, %47
  %117 = or i32 %52, %0
  %118 = and i32 %43, %37
  %119 = shl i32 %118, 1
  %120 = xor i32 %55, %1
  %121 = and i32 %43, %26
  %122 = or i32 %70, %28
  %123 = or i32 %45, %63
  %124 = shl i32 %123, 1
  %125 = xor i32 %30, %32
  %126 = and i32 %59, %37
  %127 = xor i32 %70, %0
  %128 = xor i32 %127, 2147483647
  %129 = xor i32 %128, %95
  %130 = shl i32 %129, 1
  %131 = xor i32 %52, %8
  %132 = and i32 %77, %28
  %133 = and i32 %70, %0
  %134 = or i32 %132, %133
  %135 = or i32 %25, %61
  %136 = and i32 %9, %47
  %137 = xor i32 %31, %0
  %138 = and i32 %37, %103
  %139 = and i32 %9, %12
  %140 = and i32 %29, %0
  %141 = xor i32 %108, -1
  %142 = or i32 %141, %0
  %143 = xor i32 %140, %142
  %144 = or i32 %77, %0
  %145 = or i32 %31, %13
  %146 = or i32 %13, %2
  %147 = xor i32 %25, %78
  %148 = xor i32 %133, -1
  %149 = xor i32 %132, %148
  %150 = or i32 %74, %43
  %151 = and i32 %35, %1
  %152 = or i32 %74, %11
  %153 = xor i32 %108, %28
  %154 = xor i32 %153, %140
  %155 = or i32 %74, %77
  %156 = or i32 %8, %71
  %157 = and i32 %26, %103
  %158 = and i32 %78, %28
  %159 = and i32 %46, %1
  %160 = and i32 %43, %46
  %161 = xor i32 %140, %68
  %162 = and i32 %46, %11
  %163 = or i32 %8, %61
  %164 = shl i32 %46, 1
  %165 = xor i32 %52, -1
  %166 = add i32 %52, 1
  %167 = xor i32 %74, -1
  %168 = and i32 %167, %11
  %169 = add i32 %74, 1
  %170 = or i32 %45, %60
  %171 = and i32 %31, %59
  %172 = shl i32 %55, 1
  %173 = or i32 %70, %0
  %174 = shl i32 %173, 1
  %175 = and i32 %78, %0
  %176 = and i32 %39, %43
  %177 = or i32 %40, %11
  %178 = xor i32 %61, %0
  %179 = xor i32 %70, %8
  %180 = xor i32 %46, %1
  %181 = or i32 %26, %13
  %182 = and i32 %31, %83
  %183 = and i32 %39, %47
  %184 = xor i32 %39, %8
  %185 = shl i32 %184, 1
  %186 = and i32 %83, %2
  %187 = xor i32 %12, %2
  %188 = and i32 %61, %103
  %189 = and i32 %59, %26
  %190 = xor i32 %68, -1
  %191 = or i32 %140, %190
  %192 = or i32 %25, %2
  %193 = add i32 %12, 1
  %194 = xor i32 %8, %2
  %195 = and i32 %31, %103
  %196 = and i32 %9, %83
  %197 = xor i32 %45, %70
  %198 = or i32 %64, %28
  %199 = xor i32 %137, 2147483647
  %200 = or i32 %199, %95
  %201 = or i32 %8, %165
  %202 = and i32 %12, %61
  %203 = xor i32 %35, %8
  %204 = or i32 %64, %0
  %205 = and i32 %9, %11
  %206 = and i32 %26, %47
  %207 = add i32 %8, 1
  %208 = and i32 %26, %11
  %209 = or i32 %26, %11
  %210 = xor i32 %59, %2
  %211 = xor i32 %45, %64
  %212 = or i32 %26, %60
  %213 = xor i32 %77, %0
  %214 = shl i32 %213, 1
  %215 = or i32 %26, %1
  %216 = and i32 %71, %28
  %217 = mul i32 %216, 10
  %218 = and i32 %63, %28
  %219 = mul i32 %218, 17
  %220 = and i32 %71, %0
  %221 = mul i32 %220, -11
  %222 = and i32 %63, %0
  %223 = mul i32 %222, 14
  %224 = and i32 %165, %28
  %225 = mul i32 %132, 13
  %226 = and i32 %165, %0
  %227 = mul i32 %95, -7
  %228 = add i32 %25, %26
  %229 = add i32 %228, %126
  %230 = add i32 %229, %180
  %231 = add i32 %230, %162
  %232 = add i32 %231, %157
  %233 = add i32 %232, %155
  %234 = add i32 %233, %94
  %235 = add i32 %234, %69
  %236 = add i32 %235, %68
  %237 = add i32 %236, %54
  %238 = add i32 %237, %97
  %239 = add i32 %87, %206
  %240 = sub i32 %22, %239
  %241 = add i32 %240, %23
  %242 = mul i32 %241, 3
  %243 = add i32 %226, %224
  %244 = add i32 %243, %131
  %245 = mul i32 %244, -5
  %246 = add i32 %24, %176
  %247 = shl i32 %246, 2
  %248 = add i32 %238, %19
  %249 = add i32 %248, %200
  %250 = shl i32 %249, 1
  %251 = shl i32 %1, 1
  %252 = sub i32 %76, %251
  %253 = sub i32 %252, %59
  %254 = add i32 %253, %47
  %255 = add i32 %254, %37
  %256 = sub i32 %255, %12
  %257 = add i32 %256, %8
  %258 = add i32 %257, %193
  %259 = add i32 %258, %207
  %260 = add i32 %259, %38
  %261 = add i32 %260, %52
  %262 = sub i32 %261, %73
  %263 = add i32 %262, %74
  %264 = sub i32 %263, %80
  %265 = add i32 %264, %84
  %266 = sub i32 %265, %88
  %267 = add i32 %266, %99
  %268 = add i32 %267, %100
  %269 = sub i32 %268, %105
  %270 = sub i32 %269, %114
  %271 = add i32 %270, %116
  %272 = add i32 %271, %78
  %273 = sub i32 %272, %138
  %274 = add i32 %273, %61
  %275 = sub i32 %274, %63
  %276 = sub i32 %275, %146
  %277 = add i32 %276, %35
  %278 = add i32 %277, %166
  %279 = add i32 %278, %169
  %280 = add i32 %279, %186
  %281 = add i32 %280, %187
  %282 = add i32 %281, %70
  %283 = add i32 %282, %192
  %284 = add i32 %283, %194
  %285 = sub i32 %284, %210
  %286 = sub i32 %285, %4
  %287 = sub i32 %286, %27
  %288 = add i32 %287, %36
  %289 = add i32 %288, %44
  %290 = add i32 %289, %48
  %291 = sub i32 %290, %49
  %292 = sub i32 %291, %53
  %293 = sub i32 %292, %56
  %294 = add i32 %293, %57
  %295 = sub i32 %294, %58
  %296 = add i32 %295, %62
  %297 = add i32 %296, %65
  %298 = add i32 %297, %66
  %299 = sub i32 %298, %67
  %300 = sub i32 %299, %72
  %301 = sub i32 %300, %75
  %302 = sub i32 %301, %79
  %303 = sub i32 %302, %81
  %304 = sub i32 %303, %82
  %305 = add i32 %304, %85
  %306 = sub i32 %305, %86
  %307 = sub i32 %306, %89
  %308 = sub i32 %307, %90
  %309 = sub i32 %308, %93
  %310 = add i32 %309, %98
  %311 = sub i32 %310, %101
  %312 = add i32 %311, %102
  %313 = add i32 %312, %104
  %314 = sub i32 %313, %106
  %315 = sub i32 %314, %107
  %316 = sub i32 %315, %112
  %317 = add i32 %316, %113
  %318 = sub i32 %317, %117
  %319 = sub i32 %318, %119
  %320 = sub i32 %319, %120
  %321 = add i32 %320, %121
  %322 = sub i32 %321, %122
  %323 = add i32 %322, %135
  %324 = sub i32 %323, %136
  %325 = add i32 %324, %137
  %326 = sub i32 %325, %139
  %327 = add i32 %326, %144
  %328 = sub i32 %327, %145
  %329 = sub i32 %328, %147
  %330 = sub i32 %329, %150
  %331 = add i32 %330, %127
  %332 = sub i32 %331, %151
  %333 = add i32 %332, %152
  %334 = sub i32 %333, %156
  %335 = sub i32 %334, %133
  %336 = add i32 %335, %158
  %337 = sub i32 %336, %159
  %338 = add i32 %337, %160
  %339 = sub i32 %338, %163
  %340 = sub i32 %339, %164
  %341 = add i32 %340, %168
  %342 = sub i32 %341, %170
  %343 = sub i32 %342, %171
  %344 = sub i32 %343, %172
  %345 = sub i32 %344, %175
  %346 = add i32 %345, %177
  %347 = add i32 %346, %178
  %348 = sub i32 %347, %32
  %349 = sub i32 %348, %179
  %350 = add i32 %349, %181
  %351 = sub i32 %350, %182
  %352 = add i32 %351, %183
  %353 = sub i32 %352, %188
  %354 = add i32 %353, %189
  %355 = add i32 %354, %195
  %356 = add i32 %355, %196
  %357 = add i32 %356, %197
  %358 = add i32 %357, %198
  %359 = add i32 %358, %201
  %360 = add i32 %359, %202
  %361 = sub i32 %360, %203
  %362 = add i32 %361, %204
  %363 = add i32 %362, %205
  %364 = sub i32 %363, %208
  %365 = add i32 %364, %209
  %366 = add i32 %365, %211
  %367 = add i32 %366, %212
  %368 = add i32 %367, %215
  %369 = sub i32 %368, %20
  %370 = add i32 %369, %21
  %371 = sub i32 %370, %34
  %372 = sub i32 %371, %42
  %373 = sub i32 %372, %51
  %374 = sub i32 %373, %92
  %375 = sub i32 %374, %111
  %376 = add i32 %375, %115
  %377 = sub i32 %376, %124
  %378 = sub i32 %377, %125
  %379 = add i32 %378, %134
  %380 = add i32 %379, %143
  %381 = add i32 %380, %149
  %382 = add i32 %381, %154
  %383 = add i32 %382, %161
  %384 = sub i32 %383, %174
  %385 = sub i32 %384, %185
  %386 = sub i32 %385, %191
  %387 = sub i32 %386, %214
  %388 = add i32 %387, %217
  %389 = add i32 %388, %219
  %390 = add i32 %389, %221
  %391 = add i32 %390, %223
  %392 = add i32 %391, %225
  %393 = add i32 %392, %227
  %394 = sub i32 %393, %130
  %395 = add i32 %394, %245
  %396 = add i32 %395, %247
  %397 = add i32 %396, %242
  %398 = add i32 %397, %250
  %399 = icmp eq i32 %17, %398
  %400 = select i1 %399, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %401 = tail call i32 @puts(i8* nonnull dereferenceable(1) %400)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
