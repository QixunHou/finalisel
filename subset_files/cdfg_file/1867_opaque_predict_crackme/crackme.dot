digraph "DFG for'crackme' function" {
	Node0x24e7b40[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x24e81c0[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x24e8260[shape=record, label="  %7 = mul i32 %6, -4"];
	Node0x24e82d0[shape=record, label="  %8 = sub i32 %0, %3"];
	Node0x24e8340[shape=record, label="  %9 = add i32 %8, %7"];
	Node0x24e83b0[shape=record, label="  %10 = and i32 %2, %1"];
	Node0x24e8420[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x24e84c0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x24e8530[shape=record, label="  %13 = or i32 %2, %1"];
	Node0x24e85a0[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x24e8610[shape=record, label="  %15 = and i32 %14, %2"];
	Node0x24e8680[shape=record, label="  %16 = and i32 %11, %1"];
	Node0x24e86f0[shape=record, label="  %17 = shl i32 %10, 1"];
	Node0x24e8760[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x24e87d0[shape=record, label="  %19 = and i32 %18, %3"];
	Node0x24e8840[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x24e88b0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x24e8950[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x24e89c0[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x24e8a30[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x24e8aa0[shape=record, label="  %25 = xor i32 %24, -1"];
	Node0x24e8b40[shape=record, label="  %26 = shl i32 %19, 2"];
	Node0x24e8bb0[shape=record, label="  %27 = sub i32 %10, %0"];
	Node0x24e8c20[shape=record, label="  %28 = add i32 %27, %5"];
	Node0x24e8c90[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x24e8d00[shape=record, label="  %30 = add i32 %24, %16"];
	Node0x24e8d70[shape=record, label="  %31 = shl i32 %30, 2"];
	Node0x24e8de0[shape=record, label="  %32 = sub i32 2, %1"];
	Node0x24e9060[shape=record, label="  %33 = sub i32 %32, %12"];
	Node0x24e90d0[shape=record, label="  %34 = sub i32 %33, %13"];
	Node0x24e9140[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x24e91b0[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x24e9220[shape=record, label="  %37 = sub i32 %36, %17"];
	Node0x24e9290[shape=record, label="  %38 = add i32 %37, %19"];
	Node0x24e9300[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x24e9370[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x24e93e0[shape=record, label="  %41 = sub i32 %40, %26"];
	Node0x24e9450[shape=record, label="  %42 = sub i32 %41, %22"];
	Node0x24e94c0[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x24e9530[shape=record, label="  %44 = add i32 %43, %31"];
	Node0x24e95a0[shape=record, label="  %45 = icmp eq i32 %9, %44"];
	Node0x2488268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24e9a40[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x24e9a90[shape=record, label="  ret void"];
	Node0x24e7b40 -> Node0x24e81c0;
	Node0x24e81c0 -> Node0x24e8260;
	Node0x24e8260 -> Node0x24e82d0;
	Node0x24e82d0 -> Node0x24e8340;
	Node0x24e8340 -> Node0x24e83b0;
	Node0x24e83b0 -> Node0x24e8420;
	Node0x24e8420 -> Node0x24e84c0;
	Node0x24e84c0 -> Node0x24e8530;
	Node0x24e8530 -> Node0x24e85a0;
	Node0x24e85a0 -> Node0x24e8610;
	Node0x24e8610 -> Node0x24e8680;
	Node0x24e8680 -> Node0x24e86f0;
	Node0x24e86f0 -> Node0x24e8760;
	Node0x24e8760 -> Node0x24e87d0;
	Node0x24e87d0 -> Node0x24e8840;
	Node0x24e8840 -> Node0x24e88b0;
	Node0x24e88b0 -> Node0x24e8950;
	Node0x24e8950 -> Node0x24e89c0;
	Node0x24e89c0 -> Node0x24e8a30;
	Node0x24e8a30 -> Node0x24e8aa0;
	Node0x24e8aa0 -> Node0x24e8b40;
	Node0x24e8b40 -> Node0x24e8bb0;
	Node0x24e8bb0 -> Node0x24e8c20;
	Node0x24e8c20 -> Node0x24e8c90;
	Node0x24e8c90 -> Node0x24e8d00;
	Node0x24e8d00 -> Node0x24e8d70;
	Node0x24e8d70 -> Node0x24e8de0;
	Node0x24e8de0 -> Node0x24e9060;
	Node0x24e9060 -> Node0x24e90d0;
	Node0x24e90d0 -> Node0x24e9140;
	Node0x24e9140 -> Node0x24e91b0;
	Node0x24e91b0 -> Node0x24e9220;
	Node0x24e9220 -> Node0x24e9290;
	Node0x24e9290 -> Node0x24e9300;
	Node0x24e9300 -> Node0x24e9370;
	Node0x24e9370 -> Node0x24e93e0;
	Node0x24e93e0 -> Node0x24e9450;
	Node0x24e9450 -> Node0x24e94c0;
	Node0x24e94c0 -> Node0x24e9530;
	Node0x24e9530 -> Node0x24e95a0;
	Node0x24e95a0 -> Node0x2488268;
	Node0x2488268 -> Node0x24e9a40;
	Node0x24e9a40 -> Node0x24e9a90;
edge [color=red]
	Node0x24e7b40 -> Node0x24e81c0;
	Node0x24e81c0 -> Node0x24e8260;
	Node0x24e82d0 -> Node0x24e8340;
	Node0x24e8260 -> Node0x24e8340;
	Node0x24e8420 -> Node0x24e84c0;
	Node0x24e85a0 -> Node0x24e8610;
	Node0x24e8420 -> Node0x24e8680;
	Node0x24e83b0 -> Node0x24e86f0;
	Node0x24e8760 -> Node0x24e87d0;
	Node0x24e8840 -> Node0x24e88b0;
	Node0x24e88b0 -> Node0x24e8950;
	Node0x24e8a30 -> Node0x24e8aa0;
	Node0x24e87d0 -> Node0x24e8b40;
	Node0x24e83b0 -> Node0x24e8bb0;
	Node0x24e8bb0 -> Node0x24e8c20;
	Node0x24e7b40 -> Node0x24e8c20;
	Node0x24e8c20 -> Node0x24e8c90;
	Node0x24e8a30 -> Node0x24e8d00;
	Node0x24e8680 -> Node0x24e8d00;
	Node0x24e8d00 -> Node0x24e8d70;
	Node0x24e8de0 -> Node0x24e9060;
	Node0x24e84c0 -> Node0x24e9060;
	Node0x24e9060 -> Node0x24e90d0;
	Node0x24e8530 -> Node0x24e90d0;
	Node0x24e90d0 -> Node0x24e9140;
	Node0x24e8610 -> Node0x24e9140;
	Node0x24e9140 -> Node0x24e91b0;
	Node0x24e89c0 -> Node0x24e91b0;
	Node0x24e91b0 -> Node0x24e9220;
	Node0x24e86f0 -> Node0x24e9220;
	Node0x24e9220 -> Node0x24e9290;
	Node0x24e87d0 -> Node0x24e9290;
	Node0x24e9290 -> Node0x24e9300;
	Node0x24e8aa0 -> Node0x24e9300;
	Node0x24e9300 -> Node0x24e9370;
	Node0x24e8840 -> Node0x24e9370;
	Node0x24e9370 -> Node0x24e93e0;
	Node0x24e8b40 -> Node0x24e93e0;
	Node0x24e93e0 -> Node0x24e9450;
	Node0x24e8950 -> Node0x24e9450;
	Node0x24e9450 -> Node0x24e94c0;
	Node0x24e8c90 -> Node0x24e94c0;
	Node0x24e94c0 -> Node0x24e9530;
	Node0x24e8d70 -> Node0x24e9530;
	Node0x24e8340 -> Node0x24e95a0;
	Node0x24e9530 -> Node0x24e95a0;
	Node0x24e95a0 -> Node0x2488268;
	Node0x2488268 -> Node0x24e9a40;
}
