; ModuleID = '../.././c_source_file/0309_path_condition_crackme.c'
source_filename = "../.././c_source_file/0309_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = or i32 %9, %7
  %11 = shl i32 %10, 1
  %12 = sub i32 1, %4
  %13 = add i32 %12, %6
  %14 = add i32 %13, %11
  %15 = xor i32 %4, -1
  %16 = add i32 %4, 1
  %17 = or i32 %4, %3
  %18 = or i32 %15, %3
  %19 = and i32 %4, %3
  %20 = xor i32 %19, -1
  %21 = shl i32 %17, 2
  %22 = xor i32 %21, -4
  %23 = shl i32 %18, 2
  %24 = xor i32 %23, -4
  %25 = and i32 %1, %0
  %26 = or i32 %2, %0
  %27 = xor i32 %26, %25
  %28 = xor i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = add i32 %28, 1
  %31 = xor i32 %1, %0
  %32 = or i32 %28, %31
  %33 = xor i32 %1, -1
  %34 = or i32 %33, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %28, %35
  %37 = xor i32 %9, %0
  %38 = and i32 %8, %0
  %39 = or i32 %38, %31
  %40 = shl i32 %39, 1
  %41 = xor i32 %2, %1
  %42 = or i32 %41, %0
  %43 = xor i32 %26, %1
  %44 = xor i32 %31, -1
  %45 = or i32 %29, %44
  %46 = or i32 %35, %2
  %47 = shl i32 %46, 1
  %48 = and i32 %2, %1
  %49 = or i32 %48, %7
  %50 = and i32 %34, %29
  %51 = and i32 %26, %44
  %52 = or i32 %28, %33
  %53 = shl i32 %52, 1
  %54 = and i32 %2, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %55, %44
  %57 = and i32 %48, %0
  %58 = or i32 %2, %1
  %59 = xor i32 %58, %0
  %60 = or i32 %57, %59
  %61 = and i32 %41, %0
  %62 = shl i32 %61, 1
  %63 = or i32 %8, %1
  %64 = or i32 %63, %0
  %65 = xor i32 %48, -1
  %66 = add i32 %48, 1
  %67 = or i32 %1, %0
  %68 = xor i32 %67, -1
  %69 = or i32 %54, %68
  %70 = or i32 %41, %68
  %71 = xor i32 %41, -1
  %72 = or i32 %71, %7
  %73 = and i32 %31, %2
  %74 = and i32 %41, %34
  %75 = or i32 %8, %0
  %76 = and i32 %75, %44
  %77 = xor i32 %63, -1
  %78 = or i32 %77, %7
  %79 = and i32 %58, %7
  %80 = xor i32 %25, -1
  %81 = xor i32 %80, %2
  %82 = and i32 %33, %0
  %83 = xor i32 %82, -1
  %84 = xor i32 %83, %2
  %85 = and i32 %48, %7
  %86 = xor i32 %61, 2147483647
  %87 = xor i32 %86, %85
  %88 = or i32 %57, %79
  %89 = and i32 %33, %2
  %90 = and i32 %89, %0
  %91 = or i32 %33, %2
  %92 = xor i32 %91, %7
  %93 = xor i32 %92, %90
  %94 = shl i32 %48, 1
  %95 = and i32 %91, %7
  %96 = xor i32 %90, -1
  %97 = xor i32 %95, %96
  %98 = or i32 %25, %77
  %99 = xor i32 %26, -1
  %100 = and i32 %44, %2
  %101 = xor i32 %41, %0
  %102 = xor i32 %101, -1
  %103 = or i32 %57, %102
  %104 = or i32 %31, %99
  %105 = or i32 %38, %33
  %106 = or i32 %25, %99
  %107 = xor i32 %38, -1
  %108 = and i32 %107, %1
  %109 = xor i32 %75, %25
  %110 = xor i32 %35, %2
  %111 = xor i32 %68, %2
  %112 = and i32 %29, %44
  %113 = and i32 %28, %33
  %114 = and i32 %31, %55
  %115 = or i32 %85, %61
  %116 = or i32 %8, %44
  %117 = or i32 %65, %0
  %118 = shl i32 %117, 1
  %119 = or i32 %48, %0
  %120 = and i32 %29, %83
  %121 = xor i32 %9, -1
  %122 = or i32 %121, %7
  %123 = and i32 %34, %71
  %124 = xor i32 %77, %0
  %125 = and i32 %121, %7
  %126 = xor i32 %67, %2
  %127 = add i32 %34, 1
  %128 = or i32 %38, %44
  %129 = or i32 %28, %1
  %130 = or i32 %29, %35
  %131 = and i32 %8, %83
  %132 = or i32 %54, %1
  %133 = or i32 %90, %95
  %134 = xor i32 %54, %121
  %135 = xor i32 %54, %67
  %136 = xor i32 %75, %1
  %137 = shl i32 %136, 1
  %138 = or i32 %63, %7
  %139 = or i32 %9, %82
  %140 = add i32 %9, 1
  %141 = xor i32 %82, %65
  %142 = and i32 %63, %7
  %143 = xor i32 %71, %0
  %144 = or i32 %82, %2
  %145 = xor i32 %58, -1
  %146 = or i32 %54, %145
  %147 = xor i32 %75, -1
  %148 = xor i32 %147, %1
  %149 = or i32 %25, %8
  %150 = and i32 %71, %80
  %151 = or i32 %41, %25
  %152 = or i32 %31, %29
  %153 = or i32 %29, %1
  %154 = shl i32 %153, 1
  %155 = and i32 %29, %1
  %156 = or i32 %82, %29
  %157 = and i32 %83, %2
  %158 = shl i32 %157, 1
  %159 = and i32 %89, %7
  %160 = or i32 %41, %7
  %161 = xor i32 %160, -1
  %162 = or i32 %159, %161
  %163 = xor i32 %121, %0
  %164 = or i32 %54, %44
  %165 = or i32 %54, %33
  %166 = or i32 %38, %48
  %167 = shl i32 %67, 1
  %168 = or i32 %41, %35
  %169 = or i32 %28, %68
  %170 = and i32 %65, %0
  %171 = xor i32 %82, %2
  %172 = or i32 %31, %2
  %173 = and i32 %8, %80
  %174 = or i32 %68, %2
  %175 = xor i32 %65, %0
  %176 = and i32 %31, %29
  %177 = and i32 %65, %7
  %178 = xor i32 %38, %65
  %179 = shl i32 %178, 1
  %180 = or i32 %147, %44
  %181 = and i32 %28, %1
  %182 = and i32 %58, %0
  %183 = xor i32 %182, -1
  %184 = xor i32 %85, %183
  %185 = or i32 %99, %33
  %186 = xor i32 %63, %25
  %187 = and i32 %67, %8
  %188 = xor i32 %54, %34
  %189 = or i32 %65, %7
  %190 = or i32 %25, %2
  %191 = and i32 %75, %31
  %192 = and i32 %41, %7
  %193 = or i32 %57, %192
  %194 = xor i32 %38, %63
  %195 = or i32 %28, %25
  %196 = and i32 %80, %2
  %197 = or i32 %41, %82
  %198 = or i32 %58, %7
  %199 = xor i32 %99, %1
  %200 = and i32 %28, %80
  %201 = and i32 %41, %67
  %202 = or i32 %54, %31
  %203 = and i32 %91, %0
  %204 = xor i32 %203, -1
  %205 = xor i32 %159, %204
  %206 = or i32 %29, %33
  %207 = xor i32 %38, %1
  %208 = and i32 %41, %83
  %209 = and i32 %28, %83
  %210 = and i32 %28, %34
  %211 = or i32 %31, %147
  %212 = shl i32 %211, 1
  %213 = or i32 %99, %44
  %214 = or i32 %147, %1
  %215 = and i32 %28, %67
  %216 = and i32 %107, %33
  %217 = and i32 %8, %44
  %218 = and i32 %26, %1
  %219 = or i32 %82, %8
  %220 = or i32 %25, %71
  %221 = xor i32 %57, -1
  %222 = xor i32 %79, %221
  %223 = add i32 %63, 1
  %224 = xor i32 %90, %42
  %225 = xor i32 %90, %102
  %226 = and i32 %63, %0
  %227 = and i32 %34, %2
  %228 = shl i32 %227, 1
  %229 = xor i32 %192, %221
  %230 = and i32 %31, %8
  %231 = or i32 %145, %0
  %232 = or i32 %71, %35
  %233 = xor i32 %82, %121
  %234 = or i32 %145, %7
  %235 = or i32 %31, %8
  %236 = xor i32 %55, %1
  %237 = and i32 %71, %7
  %238 = or i32 %54, %9
  %239 = shl i32 %63, 2
  %240 = or i32 %8, %35
  %241 = and i32 %67, %2
  %242 = and i32 %67, %71
  %243 = or i32 %82, %71
  %244 = xor i32 %48, %0
  %245 = and i32 %71, %83
  %246 = xor i32 %107, %1
  %247 = and i32 %29, %80
  %248 = add i32 %75, 1
  %249 = or i32 %38, %77
  %250 = and i32 %29, %33
  %251 = and i32 %75, %33
  %252 = add i32 %82, 1
  %253 = xor i32 %59, %221
  %254 = or i32 %147, %33
  %255 = or i32 %85, %182
  %256 = and i32 %31, %107
  %257 = shl i32 %256, 1
  %258 = and i32 %41, %80
  %259 = or i32 %44, %2
  %260 = or i32 %99, %1
  %261 = or i32 %77, %0
  %262 = xor i32 %58, %25
  %263 = or i32 %9, %0
  %264 = xor i32 %145, %0
  %265 = or i32 %25, %29
  %266 = xor i32 %34, %2
  %267 = and i32 %145, %7
  %268 = and i32 %9, %7
  %269 = mul i32 %268, -10
  %270 = and i32 %145, %0
  %271 = and i32 %9, %0
  %272 = and i32 %77, %7
  %273 = mul i32 %272, -12
  %274 = and i32 %77, %0
  %275 = mul i32 %274, 33
  %276 = mul i32 %57, -13
  %277 = sub i32 %84, %267
  %278 = add i32 %277, %165
  %279 = sub i32 %278, %163
  %280 = sub i32 %279, %143
  %281 = add i32 %280, %42
  %282 = sub i32 %281, %19
  %283 = sub i32 %282, %222
  %284 = mul i32 %283, 3
  %285 = add i32 %81, %110
  %286 = add i32 %285, %72
  %287 = shl i32 %286, 2
  %288 = or i32 %85, %271
  %289 = mul i32 %288, 15
  %290 = sub i32 %114, %219
  %291 = mul i32 %290, 5
  %292 = sub i32 -2, %0
  %293 = add i32 %292, %1
  %294 = add i32 %293, %82
  %295 = add i32 %294, %230
  %296 = add i32 %295, %111
  %297 = add i32 %296, %270
  %298 = add i32 %297, %226
  %299 = add i32 %298, %209
  %300 = add i32 %299, %206
  %301 = add i32 %300, %199
  %302 = add i32 %301, %105
  %303 = add i32 %302, %225
  %304 = add i32 %303, %193
  %305 = add i32 %304, %87
  %306 = shl i32 %305, 1
  %307 = sub i32 -4, %0
  %308 = sub i32 %307, %31
  %309 = sub i32 %308, %34
  %310 = add i32 %309, %8
  %311 = add i32 %310, %127
  %312 = add i32 %311, %25
  %313 = add i32 %312, %44
  %314 = sub i32 %313, %2
  %315 = add i32 %314, %252
  %316 = sub i32 %315, %3
  %317 = add i32 %316, %30
  %318 = add i32 %317, %66
  %319 = add i32 %318, %73
  %320 = add i32 %319, %100
  %321 = add i32 %320, %116
  %322 = add i32 %321, %28
  %323 = sub i32 %322, %54
  %324 = sub i32 %323, %126
  %325 = sub i32 %324, %131
  %326 = add i32 %325, %140
  %327 = sub i32 %326, %144
  %328 = add i32 %327, %149
  %329 = sub i32 %328, %167
  %330 = add i32 %329, %171
  %331 = add i32 %330, %55
  %332 = add i32 %331, %172
  %333 = add i32 %332, %173
  %334 = sub i32 %333, %174
  %335 = add i32 %334, %187
  %336 = add i32 %335, %190
  %337 = add i32 %336, %75
  %338 = sub i32 %337, %38
  %339 = sub i32 %338, %196
  %340 = add i32 %339, %145
  %341 = add i32 %340, %217
  %342 = add i32 %341, %223
  %343 = sub i32 %342, %41
  %344 = add i32 %343, %235
  %345 = sub i32 %344, %240
  %346 = sub i32 %345, %241
  %347 = add i32 %346, %248
  %348 = add i32 %347, %259
  %349 = add i32 %348, %71
  %350 = sub i32 %349, %266
  %351 = add i32 %350, %16
  %352 = sub i32 %351, %27
  %353 = sub i32 %352, %32
  %354 = add i32 %353, %36
  %355 = sub i32 %354, %37
  %356 = add i32 %355, %43
  %357 = add i32 %356, %45
  %358 = sub i32 %357, %47
  %359 = add i32 %358, %49
  %360 = sub i32 %359, %50
  %361 = add i32 %360, %51
  %362 = sub i32 %361, %56
  %363 = sub i32 %362, %64
  %364 = add i32 %363, %69
  %365 = sub i32 %364, %70
  %366 = sub i32 %365, %74
  %367 = add i32 %366, %76
  %368 = add i32 %367, %78
  %369 = add i32 %368, %79
  %370 = sub i32 %369, %94
  %371 = sub i32 %370, %98
  %372 = sub i32 %371, %104
  %373 = add i32 %372, %106
  %374 = add i32 %373, %108
  %375 = add i32 %374, %109
  %376 = sub i32 %375, %112
  %377 = add i32 %376, %113
  %378 = add i32 %377, %119
  %379 = add i32 %378, %120
  %380 = sub i32 %379, %122
  %381 = sub i32 %380, %123
  %382 = add i32 %381, %101
  %383 = add i32 %382, %124
  %384 = add i32 %383, %125
  %385 = sub i32 %384, %128
  %386 = add i32 %385, %129
  %387 = sub i32 %386, %130
  %388 = sub i32 %387, %132
  %389 = sub i32 %388, %134
  %390 = add i32 %389, %135
  %391 = add i32 %390, %138
  %392 = sub i32 %391, %139
  %393 = add i32 %392, %141
  %394 = sub i32 %393, %142
  %395 = sub i32 %394, %146
  %396 = sub i32 %395, %148
  %397 = sub i32 %396, %150
  %398 = sub i32 %397, %151
  %399 = add i32 %398, %152
  %400 = add i32 %399, %155
  %401 = add i32 %400, %156
  %402 = sub i32 %401, %158
  %403 = add i32 %402, %164
  %404 = add i32 %403, %166
  %405 = add i32 %404, %168
  %406 = add i32 %405, %169
  %407 = sub i32 %406, %170
  %408 = add i32 %407, %175
  %409 = sub i32 %408, %176
  %410 = add i32 %409, %177
  %411 = sub i32 %410, %180
  %412 = add i32 %411, %181
  %413 = sub i32 %412, %185
  %414 = sub i32 %413, %186
  %415 = sub i32 %414, %188
  %416 = sub i32 %415, %189
  %417 = sub i32 %416, %191
  %418 = sub i32 %417, %194
  %419 = sub i32 %418, %195
  %420 = sub i32 %419, %197
  %421 = add i32 %420, %198
  %422 = add i32 %421, %200
  %423 = add i32 %422, %201
  %424 = add i32 %423, %202
  %425 = sub i32 %424, %207
  %426 = add i32 %425, %208
  %427 = sub i32 %426, %210
  %428 = add i32 %427, %213
  %429 = sub i32 %428, %214
  %430 = sub i32 %429, %215
  %431 = add i32 %430, %216
  %432 = add i32 %431, %218
  %433 = sub i32 %432, %220
  %434 = sub i32 %433, %228
  %435 = add i32 %434, %192
  %436 = add i32 %435, %231
  %437 = sub i32 %436, %232
  %438 = sub i32 %437, %233
  %439 = add i32 %438, %234
  %440 = sub i32 %439, %59
  %441 = add i32 %440, %236
  %442 = add i32 %441, %237
  %443 = add i32 %442, %238
  %444 = sub i32 %443, %239
  %445 = sub i32 %444, %242
  %446 = add i32 %445, %243
  %447 = sub i32 %446, %244
  %448 = add i32 %447, %245
  %449 = add i32 %448, %160
  %450 = add i32 %449, %246
  %451 = sub i32 %450, %247
  %452 = add i32 %451, %249
  %453 = add i32 %452, %250
  %454 = sub i32 %453, %251
  %455 = sub i32 %454, %182
  %456 = sub i32 %455, %254
  %457 = sub i32 %456, %258
  %458 = add i32 %457, %260
  %459 = sub i32 %458, %261
  %460 = sub i32 %459, %262
  %461 = sub i32 %460, %263
  %462 = sub i32 %461, %264
  %463 = sub i32 %462, %265
  %464 = sub i32 %463, %6
  %465 = sub i32 %464, %17
  %466 = sub i32 %465, %18
  %467 = add i32 %466, %20
  %468 = sub i32 %467, %40
  %469 = sub i32 %468, %53
  %470 = add i32 %469, %60
  %471 = sub i32 %470, %62
  %472 = sub i32 %471, %88
  %473 = sub i32 %472, %93
  %474 = sub i32 %473, %97
  %475 = sub i32 %474, %103
  %476 = add i32 %475, %115
  %477 = sub i32 %476, %118
  %478 = add i32 %477, %133
  %479 = sub i32 %478, %137
  %480 = sub i32 %479, %154
  %481 = sub i32 %480, %162
  %482 = sub i32 %481, %179
  %483 = add i32 %482, %184
  %484 = sub i32 %483, %205
  %485 = sub i32 %484, %212
  %486 = sub i32 %485, %224
  %487 = sub i32 %486, %229
  %488 = sub i32 %487, %253
  %489 = sub i32 %488, %255
  %490 = sub i32 %489, %257
  %491 = add i32 %490, %269
  %492 = add i32 %491, %273
  %493 = add i32 %492, %275
  %494 = add i32 %493, %276
  %495 = add i32 %494, %289
  %496 = add i32 %495, %291
  %497 = sub i32 %496, %22
  %498 = sub i32 %497, %24
  %499 = add i32 %498, %287
  %500 = add i32 %499, %284
  %501 = add i32 %500, %306
  %502 = icmp eq i32 %14, %501
  %503 = select i1 %502, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %504 = tail call i32 @puts(i8* nonnull dereferenceable(1) %503)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
