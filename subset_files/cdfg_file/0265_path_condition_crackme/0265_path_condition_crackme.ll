; ModuleID = '../.././c_source_file/0265_path_condition_crackme.c'
source_filename = "../.././c_source_file/0265_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = or i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = shl i32 %10, 2
  %12 = xor i32 %2, -1
  %13 = and i32 %12, %0
  %14 = and i32 %2, %1
  %15 = or i32 %13, %14
  %16 = shl i32 %15, 1
  %17 = add i32 %11, %16
  %18 = and i32 %5, %3
  %19 = or i32 %18, %4
  %20 = sub i32 %17, %19
  %21 = xor i32 %5, -1
  %22 = or i32 %21, %4
  %23 = xor i32 %22, -1
  %24 = or i32 %23, %3
  %25 = add i32 %20, %24
  %26 = xor i32 %0, -1
  %27 = xor i32 %1, -1
  %28 = and i32 %27, %2
  %29 = and i32 %28, %26
  %30 = or i32 %27, %2
  %31 = and i32 %30, %0
  %32 = or i32 %29, %31
  %33 = xor i32 %13, -1
  %34 = xor i32 %33, %1
  %35 = shl i32 %34, 1
  %36 = xor i32 %2, %0
  %37 = and i32 %2, %0
  %38 = or i32 %36, %7
  %39 = and i32 %27, %0
  %40 = xor i32 %39, -1
  %41 = and i32 %40, %2
  %42 = xor i32 %36, -1
  %43 = or i32 %7, %42
  %44 = and i32 %14, %0
  %45 = xor i32 %2, %1
  %46 = xor i32 %45, %0
  %47 = xor i32 %44, %46
  %48 = xor i32 %1, %0
  %49 = and i32 %48, %2
  %50 = or i32 %12, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %14, -1
  %53 = and i32 %52, %0
  %54 = or i32 %48, %9
  %55 = shl i32 %54, 1
  %56 = and i32 %14, %26
  %57 = or i32 %2, %1
  %58 = and i32 %57, %0
  %59 = or i32 %56, %58
  %60 = and i32 %48, %42
  %61 = shl i32 %60, 1
  %62 = xor i32 %48, -1
  %63 = and i32 %50, %62
  %64 = or i32 %12, %1
  %65 = xor i32 %64, -1
  %66 = or i32 %13, %65
  %67 = and i32 %12, %62
  %68 = and i32 %12, %1
  %69 = or i32 %68, %0
  %70 = or i32 %1, %0
  %71 = and i32 %70, %12
  %72 = shl i32 %71, 1
  %73 = or i32 %48, %12
  %74 = xor i32 %50, %1
  %75 = and i32 %45, %0
  %76 = or i32 %56, %75
  %77 = or i32 %27, %0
  %78 = xor i32 %45, -1
  %79 = and i32 %77, %78
  %80 = and i32 %70, %78
  %81 = or i32 %36, %27
  %82 = or i32 %37, %48
  %83 = shl i32 %82, 1
  %84 = and i32 %77, %2
  %85 = shl i32 %84, 1
  %86 = and i32 %77, %12
  %87 = and i32 %36, %70
  %88 = xor i32 %68, -1
  %89 = xor i32 %88, %0
  %90 = xor i32 %77, -1
  %91 = or i32 %78, %90
  %92 = or i32 %51, %62
  %93 = or i32 %39, %42
  %94 = and i32 %8, %62
  %95 = or i32 %90, %2
  %96 = and i32 %36, %77
  %97 = xor i32 %70, -1
  %98 = or i32 %37, %97
  %99 = or i32 %7, %51
  %100 = and i32 %45, %26
  %101 = xor i32 %44, -1
  %102 = xor i32 %100, %101
  %103 = and i32 %64, %0
  %104 = xor i32 %52, %0
  %105 = add i32 %8, 1
  %106 = or i32 %13, %48
  %107 = shl i32 %106, 1
  %108 = or i32 %37, %90
  %109 = or i32 %36, %48
  %110 = and i32 %78, %0
  %111 = xor i32 %78, %0
  %112 = xor i32 %37, %1
  %113 = and i32 %12, %40
  %114 = shl i32 %113, 1
  %115 = xor i32 %37, %77
  %116 = and i32 %36, %48
  %117 = and i32 %70, %42
  %118 = and i32 %78, %26
  %119 = xor i32 %8, %7
  %120 = or i32 %12, %90
  %121 = xor i32 %7, -1
  %122 = xor i32 %121, %2
  %123 = or i32 %9, %27
  %124 = shl i32 %123, 1
  %125 = or i32 %14, %0
  %126 = or i32 %45, %97
  %127 = or i32 %45, %90
  %128 = or i32 %45, %26
  %129 = or i32 %45, %39
  %130 = or i32 %65, %0
  %131 = xor i32 %37, -1
  %132 = add i32 %37, 1
  %133 = xor i32 %40, %2
  %134 = and i32 %28, %0
  %135 = xor i32 %46, -1
  %136 = xor i32 %134, %135
  %137 = xor i32 %31, -1
  %138 = xor i32 %29, %137
  %139 = and i32 %88, %26
  %140 = and i32 %64, %26
  %141 = xor i32 %57, -1
  %142 = or i32 %141, %26
  %143 = and i32 %77, %42
  %144 = or i32 %42, %27
  %145 = and i32 %57, %26
  %146 = or i32 %44, %145
  %147 = add i32 %36, 1
  %148 = or i32 %42, %1
  %149 = and i32 %8, %27
  %150 = or i32 %48, %51
  %151 = xor i32 %7, %2
  %152 = xor i32 %37, %70
  %153 = and i32 %42, %1
  %154 = and i32 %50, %27
  %155 = and i32 %50, %48
  %156 = or i32 %37, %62
  %157 = or i32 %44, %100
  %158 = or i32 %45, %0
  %159 = xor i32 %158, 2147483647
  %160 = or i32 %159, %134
  %161 = shl i32 %160, 1
  %162 = shl i32 %7, 1
  %163 = or i32 %37, %27
  %164 = or i32 %37, %68
  %165 = xor i32 %14, %0
  %166 = and i32 %52, %26
  %167 = or i32 %13, %62
  %168 = or i32 %134, %46
  %169 = xor i32 %134, %158
  %170 = add i32 %13, 1
  %171 = xor i32 %68, %0
  %172 = shl i32 %171, 1
  %173 = or i32 %7, %65
  %174 = or i32 %141, %0
  %175 = and i32 %45, %77
  %176 = shl i32 %175, 1
  %177 = xor i32 %39, %2
  %178 = and i32 %42, %121
  %179 = or i32 %88, %26
  %180 = and i32 %33, %27
  %181 = and i32 %62, %2
  %182 = xor i32 %9, %1
  %183 = or i32 %57, %26
  %184 = and i32 %42, %62
  %185 = or i32 %64, %26
  %186 = or i32 %52, %0
  %187 = add i32 %14, 1
  %188 = or i32 %68, %39
  %189 = add i32 %7, 1
  %190 = and i32 %131, %1
  %191 = and i32 %48, %12
  %192 = or i32 %36, %39
  %193 = and i32 %45, %40
  %194 = or i32 %37, %1
  %195 = xor i32 %37, %57
  %196 = and i32 %8, %1
  %197 = shl i32 %141, 1
  %198 = or i32 %78, %97
  %199 = or i32 %36, %62
  %200 = xor i32 %131, %1
  %201 = shl i32 %200, 1
  %202 = and i32 %36, %27
  %203 = xor i32 %90, %2
  %204 = and i32 %30, %26
  %205 = xor i32 %134, -1
  %206 = xor i32 %204, %205
  %207 = or i32 %57, %0
  %208 = or i32 %51, %1
  %209 = xor i32 %97, %2
  %210 = xor i32 %51, %1
  %211 = xor i32 %65, %0
  %212 = shl i32 %211, 1
  %213 = and i32 %36, %121
  %214 = or i32 %42, %62
  %215 = xor i32 %50, %7
  %216 = xor i32 %13, %64
  %217 = or i32 %39, %78
  %218 = and i32 %36, %1
  %219 = shl i32 %218, 1
  %220 = or i32 %97, %2
  %221 = xor i32 %77, %2
  %222 = or i32 %36, %1
  %223 = or i32 %13, %27
  %224 = xor i32 %141, %0
  %225 = shl i32 %224, 1
  %226 = and i32 %131, %27
  %227 = shl i32 %226, 2
  %228 = and i32 %131, %62
  %229 = or i32 %39, %12
  %230 = shl i32 %229, 1
  %231 = and i32 %45, %121
  %232 = shl i32 %231, 2
  %233 = or i32 %44, %135
  %234 = shl i32 %233, 1
  %235 = or i32 %52, %26
  %236 = or i32 %14, %39
  %237 = or i32 %62, %2
  %238 = or i32 %13, %1
  %239 = or i32 %9, %1
  %240 = or i32 %45, %7
  %241 = and i32 %36, %62
  %242 = or i32 %42, %90
  %243 = and i32 %70, %2
  %244 = and i32 %48, %33
  %245 = or i32 %42, %97
  %246 = or i32 %37, %141
  %247 = or i32 %7, %78
  %248 = xor i32 %37, %88
  %249 = or i32 %78, %26
  %250 = and i32 %45, %70
  %251 = and i32 %33, %1
  %252 = xor i32 %30, %26
  %253 = xor i32 %252, %134
  %254 = and i32 %42, %27
  %255 = and i32 %8, %48
  %256 = xor i32 %13, %52
  %257 = and i32 %121, %2
  %258 = or i32 %64, %0
  %259 = or i32 %14, %26
  %260 = and i32 %48, %131
  %261 = and i32 %78, %40
  %262 = shl i32 %261, 1
  %263 = or i32 %12, %97
  %264 = xor i32 %8, %1
  %265 = or i32 %68, %26
  %266 = or i32 %48, %42
  %267 = xor i32 %13, %1
  %268 = or i32 %12, %62
  %269 = shl i32 %268, 1
  %270 = xor i32 %39, %52
  %271 = xor i32 %39, %88
  %272 = or i32 %7, %12
  %273 = or i32 %134, %204
  %274 = xor i32 %64, %7
  %275 = or i32 %88, %0
  %276 = shl i32 %275, 1
  %277 = xor i32 %145, %101
  %278 = and i32 %78, %121
  %279 = shl i32 %278, 1
  %280 = or i32 %65, %26
  %281 = xor i32 %70, %2
  %282 = or i32 %51, %27
  %283 = or i32 %48, %2
  %284 = or i32 %36, %90
  %285 = or i32 %78, %0
  %286 = xor i32 %64, %0
  %287 = xor i32 %57, %0
  %288 = xor i32 %287, %101
  %289 = or i32 %44, %287
  %290 = xor i32 %128, -1
  %291 = or i32 %29, %290
  %292 = and i32 %33, %62
  %293 = shl i32 %292, 1
  %294 = and i32 %50, %1
  %295 = and i32 %42, %40
  %296 = xor i32 %57, %7
  %297 = and i32 %36, %40
  %298 = add i32 %0, 1
  %299 = or i32 %7, %2
  %300 = or i32 %36, %97
  %301 = xor i32 %29, %128
  %302 = shl i32 %301, 1
  %303 = xor i32 %75, -1
  %304 = xor i32 %56, %303
  %305 = or i32 %7, %141
  %306 = and i32 %88, %0
  %307 = and i32 %141, %26
  %308 = mul i32 %307, 37
  %309 = and i32 %68, %26
  %310 = mul i32 %309, 21
  %311 = and i32 %141, %0
  %312 = mul i32 %311, -13
  %313 = and i32 %68, %0
  %314 = mul i32 %313, 31
  %315 = and i32 %65, %26
  %316 = mul i32 %315, 11
  %317 = and i32 %65, %0
  %318 = mul i32 %317, 34
  %319 = shl i32 %44, 3
  %320 = and i32 %21, %3
  %321 = xor i32 %320, -1
  %322 = xor i32 %321, %4
  %323 = and i32 %4, %3
  %324 = or i32 %5, %4
  %325 = xor i32 %324, %323
  %326 = xor i32 %22, %3
  %327 = shl i32 %326, 1
  %328 = xor i32 %3, -1
  %329 = xor i32 %5, %4
  %330 = and i32 %329, %328
  %331 = xor i32 %4, %3
  %332 = xor i32 %331, -1
  %333 = or i32 %332, %5
  %334 = xor i32 %4, -1
  %335 = or i32 %5, %3
  %336 = xor i32 %335, -1
  %337 = or i32 %336, %334
  %338 = and i32 %324, %3
  %339 = xor i32 %329, -1
  %340 = or i32 %331, %339
  %341 = and i32 %328, %4
  %342 = or i32 %18, %341
  %343 = and i32 %21, %4
  %344 = or i32 %21, %3
  %345 = xor i32 %343, %344
  %346 = and i32 %344, %334
  %347 = xor i32 %344, -1
  %348 = or i32 %343, %347
  %349 = shl i32 %348, 1
  %350 = and i32 %328, %5
  %351 = and i32 %350, %334
  %352 = xor i32 %5, %3
  %353 = xor i32 %352, -1
  %354 = and i32 %353, %4
  %355 = or i32 %351, %354
  %356 = xor i32 %324, -1
  %357 = or i32 %323, %356
  %358 = and i32 %5, %4
  %359 = or i32 %358, %328
  %360 = shl i32 %359, 1
  %361 = xor i32 %23, %3
  %362 = shl i32 %361, 1
  %363 = and i32 %329, %332
  %364 = xor i32 %341, -1
  %365 = and i32 %353, %364
  %366 = and i32 %350, %4
  %367 = or i32 %352, %4
  %368 = xor i32 %367, -1
  %369 = or i32 %366, %368
  %370 = xor i32 %343, -1
  %371 = and i32 %370, %3
  %372 = or i32 %328, %4
  %373 = xor i32 %372, -1
  %374 = or i32 %21, %373
  %375 = or i32 %321, %4
  %376 = xor i32 %335, %323
  %377 = and i32 %321, %334
  %378 = or i32 %341, %5
  %379 = shl i32 %378, 1
  %380 = xor i32 %18, -1
  %381 = or i32 %380, %4
  %382 = or i32 %328, %5
  %383 = xor i32 %382, %4
  %384 = or i32 %366, %383
  %385 = and i32 %22, %332
  %386 = xor i32 %344, %4
  %387 = or i32 %329, %328
  %388 = and i32 %321, %4
  %389 = or i32 %356, %332
  %390 = or i32 %4, %3
  %391 = xor i32 %323, -1
  %392 = and i32 %21, %391
  %393 = xor i32 %358, -1
  %394 = xor i32 %393, %3
  %395 = and i32 %18, %4
  %396 = xor i32 %335, %4
  %397 = xor i32 %396, 2147483647
  %398 = xor i32 %397, %395
  %399 = shl i32 %398, 1
  %400 = or i32 %23, %328
  %401 = xor i32 %323, %5
  %402 = xor i32 %358, %3
  %403 = or i32 %18, %334
  %404 = and i32 %393, %332
  %405 = and i32 %21, %332
  %406 = and i32 %393, %328
  %407 = and i32 %380, %4
  %408 = xor i32 %390, -1
  %409 = or i32 %353, %408
  %410 = or i32 %343, %328
  %411 = or i32 %329, %408
  %412 = and i32 %352, %372
  %413 = and i32 %339, %328
  %414 = and i32 %372, %353
  %415 = xor i32 %370, %3
  %416 = shl i32 %415, 1
  %417 = or i32 %343, %18
  %418 = and i32 %329, %364
  %419 = and i32 %353, %334
  %420 = and i32 %352, %390
  %421 = or i32 %21, %408
  %422 = or i32 %358, %331
  %423 = xor i32 %352, %4
  %424 = xor i32 %395, %423
  %425 = or i32 %329, %341
  %426 = xor i32 %341, %321
  %427 = or i32 %329, %331
  %428 = or i32 %329, %323
  %429 = and i32 %22, %3
  %430 = or i32 %352, %408
  %431 = and i32 %335, %4
  %432 = and i32 %331, %339
  %433 = xor i32 %408, %5
  %434 = xor i32 %366, %367
  %435 = or i32 %335, %4
  %436 = or i32 %329, %332
  %437 = xor i32 %364, %5
  %438 = shl i32 %396, 1
  %439 = and i32 %18, %334
  %440 = and i32 %352, %4
  %441 = xor i32 %440, 2147483647
  %442 = xor i32 %441, %439
  %443 = shl i32 %373, 1
  %444 = and i32 %329, %391
  %445 = and i32 %339, %364
  %446 = or i32 %353, %4
  %447 = or i32 %358, %336
  %448 = or i32 %339, %373
  %449 = xor i32 %341, %380
  %450 = or i32 %341, %21
  %451 = xor i32 %353, %4
  %452 = xor i32 %391, %5
  %453 = and i32 %390, %353
  %454 = and i32 %382, %334
  %455 = or i32 %366, %454
  %456 = shl i32 %320, 1
  %457 = xor i32 %423, -1
  %458 = xor i32 %366, %457
  %459 = or i32 %329, %373
  %460 = or i32 %344, %334
  %461 = shl i32 %460, 1
  %462 = or i32 %352, %323
  %463 = and i32 %370, %328
  %464 = and i32 %352, %364
  %465 = or i32 %329, %3
  %466 = and i32 %339, %391
  %467 = or i32 %320, %334
  %468 = or i32 %347, %4
  %469 = and i32 %390, %5
  %470 = xor i32 %343, %380
  %471 = and i32 %336, %334
  %472 = mul i32 %471, -15
  %473 = and i32 %320, %334
  %474 = shl i32 %473, 2
  %475 = and i32 %336, %4
  %476 = and i32 %320, %4
  %477 = and i32 %347, %334
  %478 = mul i32 %439, 10
  %479 = and i32 %347, %4
  %480 = add i32 %203, %298
  %481 = sub i32 %480, %247
  %482 = add i32 %481, %152
  %483 = sub i32 %482, %127
  %484 = add i32 %483, %380
  %485 = sub i32 %484, %417
  %486 = sub i32 %485, %451
  %487 = mul i32 %486, 3
  %488 = sub i32 %294, %145
  %489 = sub i32 %488, %250
  %490 = add i32 %489, %79
  %491 = sub i32 %490, %59
  %492 = add i32 %491, %363
  %493 = mul i32 %492, 5
  %494 = add i32 %479, %477
  %495 = mul i32 %494, -6
  %496 = sub i32 %56, %476
  %497 = mul i32 %496, 9
  %498 = sub i32 -2, %77
  %499 = add i32 %498, %299
  %500 = add i32 %499, %177
  %501 = add i32 %500, %57
  %502 = add i32 %501, %95
  %503 = add i32 %502, %266
  %504 = add i32 %503, %260
  %505 = add i32 %504, %239
  %506 = add i32 %505, %202
  %507 = add i32 %506, %198
  %508 = add i32 %507, %195
  %509 = add i32 %508, %186
  %510 = add i32 %509, %155
  %511 = add i32 %510, %149
  %512 = add i32 %511, %129
  %513 = add i32 %512, %125
  %514 = add i32 %513, %80
  %515 = add i32 %514, %390
  %516 = add i32 %515, %157
  %517 = add i32 %516, %450
  %518 = add i32 %517, %401
  %519 = add i32 %518, %395
  %520 = add i32 %519, %410
  %521 = add i32 %520, %386
  %522 = add i32 %521, %385
  %523 = add i32 %522, %381
  %524 = add i32 %523, %434
  %525 = add i32 %524, %442
  %526 = shl i32 %525, 1
  %527 = add i32 %0, 4
  %528 = add i32 %527, %2
  %529 = sub i32 %528, %77
  %530 = add i32 %529, %189
  %531 = add i32 %530, 1
  %532 = sub i32 %531, %48
  %533 = add i32 %532, %62
  %534 = add i32 %533, %36
  %535 = sub i32 %534, %37
  %536 = add i32 %535, %41
  %537 = sub i32 %536, %49
  %538 = add i32 %537, %51
  %539 = add i32 %538, %67
  %540 = sub i32 %539, %73
  %541 = sub i32 %540, %68
  %542 = sub i32 %541, %86
  %543 = add i32 %542, %105
  %544 = add i32 %543, %120
  %545 = sub i32 %544, %122
  %546 = add i32 %545, %132
  %547 = sub i32 %546, %133
  %548 = add i32 %547, %78
  %549 = add i32 %548, %147
  %550 = add i32 %549, %151
  %551 = sub i32 %550, %162
  %552 = add i32 %551, %170
  %553 = sub i32 %552, %181
  %554 = add i32 %553, %187
  %555 = add i32 %554, %191
  %556 = sub i32 %555, %8
  %557 = sub i32 %556, %50
  %558 = add i32 %557, %209
  %559 = sub i32 %558, %14
  %560 = sub i32 %559, %220
  %561 = add i32 %560, %221
  %562 = sub i32 %561, %45
  %563 = sub i32 %562, %13
  %564 = add i32 %563, %237
  %565 = add i32 %564, %243
  %566 = add i32 %565, %257
  %567 = sub i32 %566, %263
  %568 = add i32 %567, %88
  %569 = add i32 %568, %272
  %570 = add i32 %569, %281
  %571 = sub i32 %570, %283
  %572 = add i32 %571, %38
  %573 = sub i32 %572, %43
  %574 = add i32 %573, %53
  %575 = add i32 %574, %63
  %576 = sub i32 %575, %66
  %577 = sub i32 %576, %69
  %578 = sub i32 %577, %72
  %579 = add i32 %578, %74
  %580 = sub i32 %579, %81
  %581 = sub i32 %580, %85
  %582 = sub i32 %581, %87
  %583 = add i32 %582, %89
  %584 = sub i32 %583, %91
  %585 = sub i32 %584, %92
  %586 = add i32 %585, %93
  %587 = sub i32 %586, %94
  %588 = add i32 %587, %96
  %589 = sub i32 %588, %98
  %590 = sub i32 %589, %99
  %591 = add i32 %590, %103
  %592 = sub i32 %591, %104
  %593 = add i32 %592, %108
  %594 = add i32 %593, %109
  %595 = add i32 %594, %110
  %596 = sub i32 %595, %111
  %597 = add i32 %596, %112
  %598 = sub i32 %597, %114
  %599 = add i32 %598, %115
  %600 = add i32 %599, %116
  %601 = sub i32 %600, %117
  %602 = add i32 %601, %118
  %603 = sub i32 %602, %119
  %604 = sub i32 %603, %126
  %605 = sub i32 %604, %128
  %606 = sub i32 %605, %130
  %607 = sub i32 %606, %139
  %608 = sub i32 %607, %140
  %609 = add i32 %608, %142
  %610 = add i32 %609, %143
  %611 = sub i32 %610, %144
  %612 = add i32 %611, %148
  %613 = add i32 %612, %150
  %614 = sub i32 %613, %153
  %615 = add i32 %614, %154
  %616 = add i32 %615, %156
  %617 = add i32 %616, %163
  %618 = add i32 %617, %164
  %619 = sub i32 %618, %165
  %620 = add i32 %619, %166
  %621 = sub i32 %620, %167
  %622 = add i32 %621, %100
  %623 = add i32 %622, %173
  %624 = add i32 %623, %174
  %625 = sub i32 %624, %178
  %626 = add i32 %625, %179
  %627 = sub i32 %626, %180
  %628 = sub i32 %627, %182
  %629 = add i32 %628, %183
  %630 = sub i32 %629, %184
  %631 = add i32 %630, %185
  %632 = add i32 %631, %188
  %633 = add i32 %632, %190
  %634 = sub i32 %633, %58
  %635 = sub i32 %634, %192
  %636 = sub i32 %635, %193
  %637 = sub i32 %636, %194
  %638 = add i32 %637, %196
  %639 = sub i32 %638, %197
  %640 = add i32 %639, %199
  %641 = sub i32 %640, %207
  %642 = sub i32 %641, %208
  %643 = sub i32 %642, %210
  %644 = add i32 %643, %213
  %645 = sub i32 %644, %214
  %646 = add i32 %645, %215
  %647 = sub i32 %646, %216
  %648 = add i32 %647, %217
  %649 = add i32 %648, %222
  %650 = add i32 %649, %223
  %651 = add i32 %650, %228
  %652 = sub i32 %651, %230
  %653 = add i32 %652, %235
  %654 = add i32 %653, %236
  %655 = add i32 %654, %238
  %656 = add i32 %655, %240
  %657 = add i32 %656, %46
  %658 = sub i32 %657, %241
  %659 = add i32 %658, %242
  %660 = sub i32 %659, %244
  %661 = add i32 %660, %245
  %662 = add i32 %661, %246
  %663 = sub i32 %662, %248
  %664 = sub i32 %663, %249
  %665 = add i32 %664, %251
  %666 = add i32 %665, %75
  %667 = sub i32 %666, %254
  %668 = add i32 %667, %255
  %669 = sub i32 %668, %256
  %670 = add i32 %669, %258
  %671 = add i32 %670, %259
  %672 = sub i32 %671, %264
  %673 = sub i32 %672, %265
  %674 = sub i32 %673, %267
  %675 = sub i32 %674, %269
  %676 = add i32 %675, %270
  %677 = add i32 %676, %271
  %678 = sub i32 %677, %274
  %679 = sub i32 %678, %280
  %680 = add i32 %679, %282
  %681 = add i32 %680, %284
  %682 = sub i32 %681, %285
  %683 = sub i32 %682, %286
  %684 = add i32 %683, %295
  %685 = sub i32 %684, %296
  %686 = add i32 %685, %287
  %687 = sub i32 %686, %297
  %688 = add i32 %687, %300
  %689 = add i32 %688, %305
  %690 = add i32 %689, %306
  %691 = add i32 %690, %4
  %692 = sub i32 %691, %35
  %693 = add i32 %692, %32
  %694 = add i32 %693, %47
  %695 = sub i32 %694, %55
  %696 = sub i32 %695, %61
  %697 = sub i32 %696, %76
  %698 = sub i32 %697, %83
  %699 = add i32 %698, %102
  %700 = sub i32 %699, %107
  %701 = sub i32 %700, %124
  %702 = add i32 %701, %136
  %703 = sub i32 %702, %138
  %704 = add i32 %703, %146
  %705 = add i32 %704, %168
  %706 = sub i32 %705, %169
  %707 = sub i32 %706, %172
  %708 = sub i32 %707, %176
  %709 = sub i32 %708, %201
  %710 = add i32 %709, %206
  %711 = sub i32 %710, %212
  %712 = sub i32 %711, %219
  %713 = sub i32 %712, %225
  %714 = sub i32 %713, %227
  %715 = sub i32 %714, %232
  %716 = add i32 %715, %253
  %717 = sub i32 %716, %262
  %718 = sub i32 %717, %273
  %719 = sub i32 %718, %276
  %720 = sub i32 %719, %277
  %721 = sub i32 %720, %279
  %722 = sub i32 %721, %288
  %723 = add i32 %722, %289
  %724 = add i32 %723, %291
  %725 = sub i32 %724, %293
  %726 = add i32 %725, %304
  %727 = add i32 %726, %308
  %728 = add i32 %727, %310
  %729 = add i32 %728, %312
  %730 = add i32 %729, %314
  %731 = add i32 %730, %316
  %732 = add i32 %731, %318
  %733 = sub i32 %732, %319
  %734 = sub i32 %733, %5
  %735 = sub i32 %734, %234
  %736 = sub i32 %735, %302
  %737 = add i32 %736, %333
  %738 = add i32 %737, %324
  %739 = sub i32 %738, %374
  %740 = add i32 %739, %392
  %741 = add i32 %740, %405
  %742 = sub i32 %741, %421
  %743 = add i32 %742, %433
  %744 = add i32 %743, %437
  %745 = sub i32 %744, %443
  %746 = add i32 %745, %452
  %747 = add i32 %746, %22
  %748 = sub i32 %747, %469
  %749 = sub i32 %748, %161
  %750 = sub i32 %749, %322
  %751 = sub i32 %750, %325
  %752 = add i32 %751, %330
  %753 = sub i32 %752, %337
  %754 = sub i32 %753, %338
  %755 = sub i32 %754, %340
  %756 = sub i32 %755, %342
  %757 = sub i32 %756, %345
  %758 = add i32 %757, %346
  %759 = sub i32 %758, %357
  %760 = add i32 %759, %365
  %761 = sub i32 %760, %371
  %762 = add i32 %761, %375
  %763 = add i32 %762, %376
  %764 = add i32 %763, %377
  %765 = sub i32 %764, %379
  %766 = sub i32 %765, %387
  %767 = add i32 %766, %388
  %768 = add i32 %767, %389
  %769 = add i32 %768, %394
  %770 = add i32 %769, %400
  %771 = add i32 %770, %402
  %772 = sub i32 %771, %403
  %773 = add i32 %772, %354
  %774 = add i32 %773, %404
  %775 = sub i32 %774, %406
  %776 = sub i32 %775, %407
  %777 = sub i32 %776, %409
  %778 = sub i32 %777, %367
  %779 = add i32 %778, %411
  %780 = add i32 %779, %412
  %781 = add i32 %780, %413
  %782 = add i32 %781, %414
  %783 = add i32 %782, %418
  %784 = sub i32 %783, %419
  %785 = sub i32 %784, %420
  %786 = sub i32 %785, %422
  %787 = sub i32 %786, %425
  %788 = add i32 %787, %426
  %789 = sub i32 %788, %427
  %790 = sub i32 %789, %428
  %791 = sub i32 %790, %429
  %792 = add i32 %791, %430
  %793 = add i32 %792, %431
  %794 = add i32 %793, %432
  %795 = add i32 %794, %435
  %796 = sub i32 %795, %436
  %797 = add i32 %796, %444
  %798 = add i32 %797, %445
  %799 = add i32 %798, %446
  %800 = sub i32 %799, %447
  %801 = sub i32 %800, %448
  %802 = add i32 %801, %449
  %803 = add i32 %802, %453
  %804 = sub i32 %803, %456
  %805 = add i32 %804, %459
  %806 = sub i32 %805, %462
  %807 = sub i32 %806, %463
  %808 = sub i32 %807, %464
  %809 = sub i32 %808, %465
  %810 = add i32 %809, %466
  %811 = add i32 %810, %467
  %812 = sub i32 %811, %468
  %813 = add i32 %812, %470
  %814 = add i32 %813, %475
  %815 = sub i32 %814, %327
  %816 = sub i32 %815, %349
  %817 = sub i32 %816, %355
  %818 = sub i32 %817, %360
  %819 = sub i32 %818, %362
  %820 = sub i32 %819, %369
  %821 = add i32 %820, %384
  %822 = sub i32 %821, %416
  %823 = sub i32 %822, %424
  %824 = sub i32 %823, %438
  %825 = add i32 %824, %455
  %826 = add i32 %825, %458
  %827 = sub i32 %826, %461
  %828 = add i32 %827, %472
  %829 = sub i32 %828, %474
  %830 = add i32 %829, %478
  %831 = add i32 %830, %495
  %832 = add i32 %831, %497
  %833 = sub i32 %832, %399
  %834 = add i32 %833, %493
  %835 = add i32 %834, %487
  %836 = add i32 %835, %526
  %837 = icmp eq i32 %25, %836
  %838 = select i1 %837, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %839 = tail call i32 @puts(i8* nonnull dereferenceable(1) %838)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
