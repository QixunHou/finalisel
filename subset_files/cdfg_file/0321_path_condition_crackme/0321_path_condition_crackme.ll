; ModuleID = '../.././c_source_file/0321_path_condition_crackme.c'
source_filename = "../.././c_source_file/0321_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %0, -1
  %10 = or i32 %2, %1
  %11 = and i32 %10, %9
  %12 = xor i32 %8, -1
  %13 = xor i32 %11, %12
  %14 = xor i32 %1, -1
  %15 = and i32 %14, %0
  %16 = xor i32 %2, %1
  %17 = or i32 %16, %15
  %18 = add i32 %13, %17
  %19 = and i32 %5, %4
  %20 = xor i32 %19, -1
  %21 = xor i32 %4, %3
  %22 = xor i32 %21, -1
  %23 = and i32 %20, %22
  %24 = add i32 %18, %23
  %25 = xor i32 %5, %3
  %26 = and i32 %25, %4
  %27 = sub i32 %24, %26
  %28 = and i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %2, %0
  %31 = and i32 %30, %29
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %0
  %34 = or i32 %33, %1
  %35 = xor i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %30, -1
  %38 = or i32 %37, %36
  %39 = or i32 %2, %0
  %40 = and i32 %39, %36
  %41 = and i32 %2, %0
  %42 = and i32 %32, %1
  %43 = or i32 %41, %42
  %44 = or i32 %14, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %16, %45
  %47 = xor i32 %7, 2147483647
  %48 = and i32 %47, %0
  %49 = shl i32 %48, 1
  %50 = or i32 %32, %1
  %51 = or i32 %1, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %41, %52
  %54 = xor i32 %16, -1
  %55 = or i32 %54, %9
  %56 = or i32 %10, %0
  %57 = shl i32 %39, 1
  %58 = xor i32 %10, -1
  %59 = or i32 %58, %0
  %60 = and i32 %14, %2
  %61 = and i32 %60, %0
  %62 = xor i32 %61, %0
  %63 = xor i32 %62, 2147483647
  %64 = xor i32 %63, %16
  %65 = shl i32 %64, 1
  %66 = and i32 %16, %9
  %67 = xor i32 %33, -1
  %68 = and i32 %67, %1
  %69 = or i32 %28, %54
  %70 = xor i32 %44, %2
  %71 = shl i32 %70, 1
  %72 = and i32 %60, %9
  %73 = and i32 %54, %0
  %74 = or i32 %72, %73
  %75 = or i32 %32, %0
  %76 = xor i32 %15, -1
  %77 = and i32 %30, %76
  %78 = xor i32 %42, -1
  %79 = or i32 %78, %0
  %80 = xor i32 %7, %0
  %81 = and i32 %16, %0
  %82 = and i32 %32, %29
  %83 = xor i32 %50, %28
  %84 = and i32 %32, %76
  %85 = and i32 %30, %36
  %86 = shl i32 %85, 2
  %87 = or i32 %14, %2
  %88 = and i32 %87, %0
  %89 = xor i32 %88, -1
  %90 = xor i32 %72, %89
  %91 = xor i32 %87, -1
  %92 = or i32 %91, %0
  %93 = xor i32 %61, %92
  %94 = and i32 %75, %14
  %95 = and i32 %29, %2
  %96 = and i32 %67, %36
  %97 = or i32 %8, %11
  %98 = shl i32 %97, 1
  %99 = or i32 %30, %52
  %100 = xor i32 %41, -1
  %101 = and i32 %100, %1
  %102 = xor i32 %75, %14
  %103 = or i32 %28, %32
  %104 = and i32 %51, %54
  %105 = and i32 %36, %2
  %106 = or i32 %41, %45
  %107 = or i32 %50, %0
  %108 = and i32 %37, %14
  %109 = xor i32 %75, %28
  %110 = and i32 %37, %29
  %111 = shl i32 %110, 1
  %112 = xor i32 %66, %12
  %113 = or i32 %35, %37
  %114 = and i32 %7, %9
  %115 = and i32 %10, %0
  %116 = xor i32 %115, -1
  %117 = xor i32 %114, %116
  %118 = or i32 %28, %37
  %119 = and i32 %51, %37
  %120 = or i32 %72, %88
  %121 = and i32 %78, %9
  %122 = and i32 %37, %1
  %123 = xor i32 %87, %9
  %124 = xor i32 %123, %61
  %125 = or i32 %16, %52
  %126 = and i32 %16, %76
  %127 = and i32 %50, %9
  %128 = xor i32 %33, %50
  %129 = and i32 %44, %2
  %130 = xor i32 %42, %0
  %131 = and i32 %16, %51
  %132 = add i32 %10, 1
  %133 = xor i32 %78, %0
  %134 = xor i32 %41, %10
  %135 = xor i32 %50, -1
  %136 = xor i32 %135, %0
  %137 = and i32 %30, %51
  %138 = or i32 %35, %2
  %139 = xor i32 %41, %78
  %140 = xor i32 %75, %1
  %141 = xor i32 %45, %2
  %142 = or i32 %30, %28
  %143 = or i32 %30, %45
  %144 = or i32 %28, %2
  %145 = xor i32 %67, %1
  %146 = xor i32 %10, %0
  %147 = or i32 %8, %146
  %148 = and i32 %58, %9
  %149 = shl i32 %148, 2
  %150 = and i32 %58, %0
  %151 = and i32 %135, %9
  %152 = shl i32 %151, 1
  %153 = and i32 %135, %0
  %154 = mul i32 %153, -14
  %155 = mul i32 %8, -15
  %156 = xor i32 %5, -1
  %157 = xor i32 %3, -1
  %158 = or i32 %157, %4
  %159 = and i32 %158, %156
  %160 = shl i32 %159, 2
  %161 = or i32 %5, %4
  %162 = xor i32 %161, -1
  %163 = or i32 %21, %162
  %164 = add i32 %19, 1
  %165 = and i32 %20, %3
  %166 = and i32 %4, %3
  %167 = or i32 %25, %166
  %168 = or i32 %4, %3
  %169 = xor i32 %168, -1
  %170 = xor i32 %169, %5
  %171 = or i32 %156, %4
  %172 = xor i32 %171, -1
  %173 = or i32 %172, %22
  %174 = xor i32 %4, -1
  %175 = xor i32 %25, -1
  %176 = and i32 %175, %174
  %177 = or i32 %166, %5
  %178 = or i32 %156, %3
  %179 = and i32 %178, %174
  %180 = and i32 %5, %3
  %181 = and i32 %180, %4
  %182 = or i32 %5, %3
  %183 = xor i32 %182, %4
  %184 = xor i32 %183, 2147483647
  %185 = xor i32 %184, %181
  %186 = shl i32 %185, 1
  %187 = xor i32 %5, %4
  %188 = and i32 %187, %158
  %189 = xor i32 %158, -1
  %190 = or i32 %175, %189
  %191 = xor i32 %25, %4
  %192 = xor i32 %191, -1
  %193 = or i32 %181, %192
  %194 = xor i32 %161, %3
  %195 = xor i32 %166, -1
  %196 = and i32 %175, %195
  %197 = and i32 %21, %5
  %198 = shl i32 %197, 1
  %199 = and i32 %157, %4
  %200 = xor i32 %199, -1
  %201 = and i32 %187, %200
  %202 = shl i32 %201, 1
  %203 = and i32 %156, %4
  %204 = xor i32 %187, -1
  %205 = or i32 %204, %22
  %206 = xor i32 %161, %166
  %207 = and i32 %156, %3
  %208 = xor i32 %207, -1
  %209 = and i32 %208, %174
  %210 = or i32 %178, %174
  %211 = and i32 %195, %5
  %212 = and i32 %157, %5
  %213 = and i32 %212, %4
  %214 = or i32 %25, %4
  %215 = xor i32 %213, %214
  %216 = or i32 %204, %189
  %217 = xor i32 %178, -1
  %218 = or i32 %203, %217
  %219 = xor i32 %171, %3
  %220 = or i32 %180, %4
  %221 = and i32 %187, %21
  %222 = or i32 %166, %175
  %223 = xor i32 %180, -1
  %224 = xor i32 %203, %223
  %225 = and i32 %25, %158
  %226 = shl i32 %225, 1
  %227 = and i32 %168, %204
  %228 = shl i32 %227, 1
  %229 = or i32 %182, %174
  %230 = and i32 %187, %168
  %231 = or i32 %217, %4
  %232 = xor i32 %182, -1
  %233 = or i32 %166, %232
  %234 = and i32 %187, %157
  %235 = add i32 %178, 1
  %236 = or i32 %187, %22
  %237 = or i32 %19, %207
  %238 = and i32 %223, %4
  %239 = and i32 %180, %174
  %240 = or i32 %239, %26
  %241 = shl i32 %200, 1
  %242 = and i32 %158, %175
  %243 = shl i32 %242, 2
  %244 = xor i32 %175, %4
  %245 = or i32 %208, %174
  %246 = or i32 %204, %3
  %247 = xor i32 %199, %208
  %248 = and i32 %187, %22
  %249 = or i32 %223, %4
  %250 = xor i32 %178, %4
  %251 = or i32 %203, %157
  %252 = or i32 %156, %169
  %253 = or i32 %21, %204
  %254 = or i32 %156, %22
  %255 = xor i32 %171, %166
  %256 = or i32 %199, %175
  %257 = and i32 %204, %3
  %258 = xor i32 %199, %223
  %259 = shl i32 %258, 1
  %260 = or i32 %187, %21
  %261 = xor i32 %203, -1
  %262 = and i32 %261, %3
  %263 = or i32 %204, %157
  %264 = shl i32 %208, 1
  %265 = and i32 %204, %200
  %266 = or i32 %187, %166
  %267 = and i32 %187, %3
  %268 = or i32 %25, %174
  %269 = or i32 %157, %5
  %270 = xor i32 %269, %4
  %271 = or i32 %213, %270
  %272 = or i32 %207, %199
  %273 = or i32 %199, %5
  %274 = xor i32 %214, 2147483647
  %275 = or i32 %274, %213
  %276 = and i32 %212, %174
  %277 = xor i32 %268, -1
  %278 = or i32 %276, %277
  %279 = and i32 %182, %174
  %280 = shl i32 %183, 1
  %281 = and i32 %171, %22
  %282 = xor i32 %158, %5
  %283 = shl i32 %282, 1
  %284 = or i32 %21, %5
  %285 = add i32 %171, 1
  %286 = and i32 %223, %174
  %287 = xor i32 %207, %4
  %288 = xor i32 %181, %191
  %289 = and i32 %204, %195
  %290 = shl i32 %289, 1
  %291 = and i32 %168, %175
  %292 = shl i32 %291, 1
  %293 = or i32 %19, %3
  %294 = or i32 %180, %174
  %295 = and i32 %182, %4
  %296 = or i32 %239, %295
  %297 = or i32 %162, %22
  %298 = shl i32 %297, 1
  %299 = xor i32 %172, %3
  %300 = or i32 %162, %3
  %301 = xor i32 %162, %3
  %302 = xor i32 %270, -1
  %303 = xor i32 %213, %302
  %304 = xor i32 %189, %5
  %305 = or i32 %199, %156
  %306 = shl i32 %305, 1
  %307 = xor i32 %19, %182
  %308 = and i32 %22, %5
  %309 = xor i32 %261, %3
  %310 = xor i32 %19, %158
  %311 = and i32 %161, %22
  %312 = xor i32 %195, %5
  %313 = or i32 %166, %156
  %314 = shl i32 %313, 1
  %315 = or i32 %213, %191
  %316 = and i32 %25, %195
  %317 = shl i32 %316, 1
  %318 = or i32 %189, %5
  %319 = and i32 %204, %157
  %320 = and i32 %208, %4
  %321 = xor i32 %19, %168
  %322 = add i32 %203, 1
  %323 = or i32 %199, %204
  %324 = or i32 %19, %189
  %325 = or i32 %162, %157
  %326 = or i32 %187, %3
  %327 = and i32 %175, %200
  %328 = shl i32 %327, 1
  %329 = and i32 %21, %156
  %330 = shl i32 %329, 1
  %331 = xor i32 %178, %166
  %332 = shl i32 %331, 2
  %333 = or i32 %203, %22
  %334 = or i32 %223, %174
  %335 = or i32 %203, %21
  %336 = or i32 %166, %217
  %337 = and i32 %269, %4
  %338 = xor i32 %337, 2147483647
  %339 = xor i32 %338, %276
  %340 = shl i32 %339, 1
  %341 = xor i32 %19, %3
  %342 = and i32 %232, %174
  %343 = mul i32 %342, 17
  %344 = and i32 %207, %174
  %345 = mul i32 %344, 27
  %346 = and i32 %232, %4
  %347 = mul i32 %346, 35
  %348 = and i32 %207, %4
  %349 = mul i32 %348, 20
  %350 = and i32 %217, %174
  %351 = mul i32 %350, 18
  %352 = mul i32 %239, 9
  %353 = and i32 %217, %4
  %354 = mul i32 %181, 12
  %355 = add i32 %141, %44
  %356 = add i32 %355, %75
  %357 = add i32 %356, %145
  %358 = add i32 %357, %122
  %359 = add i32 %358, %118
  %360 = add i32 %359, %80
  %361 = add i32 %360, %40
  %362 = add i32 %361, %166
  %363 = add i32 %362, %254
  %364 = add i32 %363, %25
  %365 = add i32 %364, %211
  %366 = add i32 %365, %294
  %367 = add i32 %366, %230
  %368 = add i32 %367, %224
  %369 = add i32 %368, %315
  %370 = add i32 %369, %296
  %371 = add i32 %370, %275
  %372 = shl i32 %371, 1
  %373 = sub i32 %95, %114
  %374 = add i32 %373, %113
  %375 = sub i32 %374, %53
  %376 = sub i32 %375, %31
  %377 = add i32 %376, %319
  %378 = add i32 %377, %333
  %379 = sub i32 %378, %300
  %380 = add i32 %379, %266
  %381 = sub i32 %380, %194
  %382 = sub i32 %381, %188
  %383 = mul i32 %382, 3
  %384 = sub i32 %353, %42
  %385 = mul i32 %384, 7
  %386 = sub i32 %56, %150
  %387 = sub i32 %386, %203
  %388 = mul i32 %387, 5
  %389 = add i32 %51, %2
  %390 = add i32 %389, 2
  %391 = add i32 %390, %51
  %392 = add i32 %391, %50
  %393 = sub i32 %392, %82
  %394 = add i32 %393, %84
  %395 = add i32 %394, %103
  %396 = sub i32 %395, %7
  %397 = sub i32 %396, %105
  %398 = add i32 %397, %129
  %399 = add i32 %398, %132
  %400 = add i32 %399, %138
  %401 = sub i32 %400, %144
  %402 = add i32 %401, %33
  %403 = sub i32 %402, %34
  %404 = sub i32 %403, %38
  %405 = add i32 %404, %43
  %406 = sub i32 %405, %46
  %407 = sub i32 %406, %55
  %408 = sub i32 %407, %57
  %409 = add i32 %408, %59
  %410 = add i32 %409, %66
  %411 = add i32 %410, %68
  %412 = sub i32 %411, %69
  %413 = sub i32 %412, %71
  %414 = add i32 %413, %77
  %415 = sub i32 %414, %79
  %416 = add i32 %415, %81
  %417 = add i32 %416, %83
  %418 = sub i32 %417, %94
  %419 = add i32 %418, %96
  %420 = sub i32 %419, %99
  %421 = add i32 %420, %101
  %422 = add i32 %421, %102
  %423 = add i32 %422, %104
  %424 = add i32 %423, %106
  %425 = sub i32 %424, %107
  %426 = add i32 %425, %108
  %427 = sub i32 %426, %109
  %428 = sub i32 %427, %119
  %429 = sub i32 %428, %121
  %430 = sub i32 %429, %125
  %431 = add i32 %430, %73
  %432 = sub i32 %431, %126
  %433 = sub i32 %432, %127
  %434 = sub i32 %433, %128
  %435 = sub i32 %434, %130
  %436 = add i32 %435, %131
  %437 = add i32 %436, %133
  %438 = add i32 %437, %134
  %439 = add i32 %438, %136
  %440 = add i32 %439, %137
  %441 = add i32 %440, %139
  %442 = add i32 %441, %140
  %443 = add i32 %442, %142
  %444 = sub i32 %443, %143
  %445 = add i32 %444, %74
  %446 = sub i32 %445, %86
  %447 = sub i32 %446, %90
  %448 = sub i32 %447, %93
  %449 = sub i32 %448, %111
  %450 = add i32 %449, %112
  %451 = add i32 %450, %117
  %452 = add i32 %451, %120
  %453 = sub i32 %452, %124
  %454 = sub i32 %453, %147
  %455 = add i32 %454, %149
  %456 = sub i32 %455, %152
  %457 = add i32 %456, %154
  %458 = add i32 %457, %155
  %459 = add i32 %458, %156
  %460 = add i32 %459, %195
  %461 = sub i32 %460, %5
  %462 = sub i32 %461, %49
  %463 = sub i32 %462, %98
  %464 = add i32 %463, %164
  %465 = add i32 %464, %170
  %466 = sub i32 %465, %177
  %467 = add i32 %466, %235
  %468 = sub i32 %467, %241
  %469 = sub i32 %468, %252
  %470 = add i32 %469, %19
  %471 = add i32 %470, %273
  %472 = sub i32 %471, %284
  %473 = add i32 %472, %285
  %474 = sub i32 %473, %304
  %475 = sub i32 %474, %308
  %476 = sub i32 %475, %312
  %477 = add i32 %476, %318
  %478 = add i32 %477, %322
  %479 = sub i32 %478, %65
  %480 = sub i32 %479, %160
  %481 = add i32 %480, %163
  %482 = sub i32 %481, %165
  %483 = sub i32 %482, %167
  %484 = add i32 %483, %173
  %485 = add i32 %484, %176
  %486 = add i32 %485, %179
  %487 = add i32 %486, %190
  %488 = sub i32 %487, %196
  %489 = sub i32 %488, %198
  %490 = add i32 %489, %205
  %491 = sub i32 %490, %206
  %492 = add i32 %491, %209
  %493 = add i32 %492, %210
  %494 = sub i32 %493, %216
  %495 = sub i32 %494, %218
  %496 = add i32 %495, %219
  %497 = add i32 %496, %220
  %498 = sub i32 %497, %221
  %499 = add i32 %498, %222
  %500 = sub i32 %499, %229
  %501 = sub i32 %500, %231
  %502 = sub i32 %501, %233
  %503 = sub i32 %502, %234
  %504 = sub i32 %503, %236
  %505 = add i32 %504, %237
  %506 = sub i32 %505, %238
  %507 = sub i32 %506, %244
  %508 = sub i32 %507, %245
  %509 = add i32 %508, %246
  %510 = add i32 %509, %247
  %511 = sub i32 %510, %248
  %512 = sub i32 %511, %249
  %513 = add i32 %512, %250
  %514 = add i32 %513, %251
  %515 = sub i32 %514, %253
  %516 = add i32 %515, %255
  %517 = sub i32 %516, %256
  %518 = sub i32 %517, %257
  %519 = add i32 %518, %260
  %520 = add i32 %519, %262
  %521 = sub i32 %520, %263
  %522 = sub i32 %521, %264
  %523 = add i32 %522, %265
  %524 = add i32 %523, %267
  %525 = sub i32 %524, %268
  %526 = add i32 %525, %272
  %527 = add i32 %526, %279
  %528 = add i32 %527, %281
  %529 = sub i32 %528, %283
  %530 = add i32 %529, %286
  %531 = sub i32 %530, %287
  %532 = add i32 %531, %293
  %533 = sub i32 %532, %299
  %534 = add i32 %533, %301
  %535 = sub i32 %534, %306
  %536 = add i32 %535, %307
  %537 = add i32 %536, %309
  %538 = add i32 %537, %310
  %539 = sub i32 %538, %311
  %540 = sub i32 %539, %314
  %541 = add i32 %540, %320
  %542 = add i32 %541, %321
  %543 = add i32 %542, %323
  %544 = sub i32 %543, %324
  %545 = sub i32 %544, %325
  %546 = sub i32 %545, %326
  %547 = sub i32 %546, %330
  %548 = sub i32 %547, %334
  %549 = sub i32 %548, %335
  %550 = add i32 %549, %336
  %551 = sub i32 %550, %341
  %552 = sub i32 %551, %193
  %553 = sub i32 %552, %202
  %554 = sub i32 %553, %215
  %555 = sub i32 %554, %226
  %556 = sub i32 %555, %228
  %557 = add i32 %556, %240
  %558 = sub i32 %557, %243
  %559 = sub i32 %558, %259
  %560 = add i32 %559, %271
  %561 = sub i32 %560, %278
  %562 = sub i32 %561, %280
  %563 = sub i32 %562, %288
  %564 = sub i32 %563, %290
  %565 = sub i32 %564, %292
  %566 = sub i32 %565, %298
  %567 = sub i32 %566, %303
  %568 = sub i32 %567, %317
  %569 = sub i32 %568, %328
  %570 = sub i32 %569, %332
  %571 = add i32 %570, %343
  %572 = add i32 %571, %345
  %573 = add i32 %572, %347
  %574 = add i32 %573, %349
  %575 = add i32 %574, %351
  %576 = add i32 %575, %352
  %577 = add i32 %576, %354
  %578 = add i32 %577, %388
  %579 = sub i32 %578, %186
  %580 = sub i32 %579, %340
  %581 = add i32 %580, %385
  %582 = add i32 %581, %383
  %583 = add i32 %582, %372
  %584 = icmp eq i32 %27, %583
  %585 = select i1 %584, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %586 = tail call i32 @puts(i8* nonnull dereferenceable(1) %585)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
