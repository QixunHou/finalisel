digraph "DFG for'crackme' function" {
	Node0x1cae0f0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1cae160[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1cae200[shape=record, label="  %7 = mul i32 %6, 3"];
	Node0x1cae270[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1cae2e0[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x1cae380[shape=record, label="  %10 = add i32 %0, 2"];
	Node0x1cae3f0[shape=record, label="  %11 = add i32 %10, %1"];
	Node0x1cae460[shape=record, label="  %12 = add i32 %11, %7"];
	Node0x1cae4d0[shape=record, label="  %13 = add i32 %12, %9"];
	Node0x1cae540[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1cae5b0[shape=record, label="  %15 = xor i32 %2, %1"];
	Node0x1cae650[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x1cae6c0[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x1cae730[shape=record, label="  %18 = and i32 %5, %1"];
	Node0x1cae7a0[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x1cae810[shape=record, label="  %20 = xor i32 %17, -1"];
	Node0x1cae8b0[shape=record, label="  %21 = mul i32 %20, 7"];
	Node0x1cae920[shape=record, label="  %22 = shl i32 %18, 2"];
	Node0x1cae9c0[shape=record, label="  %23 = mul i32 %14, 5"];
	Node0x1caea30[shape=record, label="  %24 = and i32 %8, %3"];
	Node0x1caeaa0[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1caeb40[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x1caebb0[shape=record, label="  %27 = and i32 %3, %0"];
	Node0x1caec20[shape=record, label="  %28 = or i32 %8, %3"];
	Node0x1caecc0[shape=record, label="  %29 = add i32 %1, 8"];
	Node0x1caed30[shape=record, label="  %30 = add i32 %29, %14"];
	Node0x1caeda0[shape=record, label="  %31 = add i32 %30, %17"];
	Node0x1caee10[shape=record, label="  %32 = add i32 %31, %19"];
	Node0x1caf090[shape=record, label="  %33 = add i32 %32, %15"];
	Node0x1caf100[shape=record, label="  %34 = add i32 %33, %16"];
	Node0x1caf170[shape=record, label="  %35 = add i32 %34, %21"];
	Node0x1caf1e0[shape=record, label="  %36 = add i32 %35, %22"];
	Node0x1caf250[shape=record, label="  %37 = add i32 %36, %23"];
	Node0x1caf2c0[shape=record, label="  %38 = add i32 %37, %27"];
	Node0x1caf330[shape=record, label="  %39 = sub i32 %38, %28"];
	Node0x1caf3a0[shape=record, label="  %40 = add i32 %39, %9"];
	Node0x1caf410[shape=record, label="  %41 = add i32 %40, %25"];
	Node0x1caf480[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x1caf4f0[shape=record, label="  %43 = icmp eq i32 %13, %42"];
	Node0x1c4e268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1caf990[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x1caf9e0[shape=record, label="  ret void"];
	Node0x1cae0f0 -> Node0x1cae160;
	Node0x1cae160 -> Node0x1cae200;
	Node0x1cae200 -> Node0x1cae270;
	Node0x1cae270 -> Node0x1cae2e0;
	Node0x1cae2e0 -> Node0x1cae380;
	Node0x1cae380 -> Node0x1cae3f0;
	Node0x1cae3f0 -> Node0x1cae460;
	Node0x1cae460 -> Node0x1cae4d0;
	Node0x1cae4d0 -> Node0x1cae540;
	Node0x1cae540 -> Node0x1cae5b0;
	Node0x1cae5b0 -> Node0x1cae650;
	Node0x1cae650 -> Node0x1cae6c0;
	Node0x1cae6c0 -> Node0x1cae730;
	Node0x1cae730 -> Node0x1cae7a0;
	Node0x1cae7a0 -> Node0x1cae810;
	Node0x1cae810 -> Node0x1cae8b0;
	Node0x1cae8b0 -> Node0x1cae920;
	Node0x1cae920 -> Node0x1cae9c0;
	Node0x1cae9c0 -> Node0x1caea30;
	Node0x1caea30 -> Node0x1caeaa0;
	Node0x1caeaa0 -> Node0x1caeb40;
	Node0x1caeb40 -> Node0x1caebb0;
	Node0x1caebb0 -> Node0x1caec20;
	Node0x1caec20 -> Node0x1caecc0;
	Node0x1caecc0 -> Node0x1caed30;
	Node0x1caed30 -> Node0x1caeda0;
	Node0x1caeda0 -> Node0x1caee10;
	Node0x1caee10 -> Node0x1caf090;
	Node0x1caf090 -> Node0x1caf100;
	Node0x1caf100 -> Node0x1caf170;
	Node0x1caf170 -> Node0x1caf1e0;
	Node0x1caf1e0 -> Node0x1caf250;
	Node0x1caf250 -> Node0x1caf2c0;
	Node0x1caf2c0 -> Node0x1caf330;
	Node0x1caf330 -> Node0x1caf3a0;
	Node0x1caf3a0 -> Node0x1caf410;
	Node0x1caf410 -> Node0x1caf480;
	Node0x1caf480 -> Node0x1caf4f0;
	Node0x1caf4f0 -> Node0x1c4e268;
	Node0x1c4e268 -> Node0x1caf990;
	Node0x1caf990 -> Node0x1caf9e0;
edge [color=red]
	Node0x1cae0f0 -> Node0x1cae160;
	Node0x1cae160 -> Node0x1cae200;
	Node0x1cae380 -> Node0x1cae3f0;
	Node0x1cae3f0 -> Node0x1cae460;
	Node0x1cae200 -> Node0x1cae460;
	Node0x1cae460 -> Node0x1cae4d0;
	Node0x1cae2e0 -> Node0x1cae4d0;
	Node0x1cae5b0 -> Node0x1cae650;
	Node0x1cae0f0 -> Node0x1cae730;
	Node0x1cae730 -> Node0x1cae7a0;
	Node0x1cae6c0 -> Node0x1cae810;
	Node0x1cae810 -> Node0x1cae8b0;
	Node0x1cae730 -> Node0x1cae920;
	Node0x1cae540 -> Node0x1cae9c0;
	Node0x1cae270 -> Node0x1caea30;
	Node0x1caea30 -> Node0x1caeaa0;
	Node0x1caeaa0 -> Node0x1caeb40;
	Node0x1cae270 -> Node0x1caec20;
	Node0x1caecc0 -> Node0x1caed30;
	Node0x1cae540 -> Node0x1caed30;
	Node0x1caed30 -> Node0x1caeda0;
	Node0x1cae6c0 -> Node0x1caeda0;
	Node0x1caeda0 -> Node0x1caee10;
	Node0x1cae7a0 -> Node0x1caee10;
	Node0x1caee10 -> Node0x1caf090;
	Node0x1cae5b0 -> Node0x1caf090;
	Node0x1caf090 -> Node0x1caf100;
	Node0x1cae650 -> Node0x1caf100;
	Node0x1caf100 -> Node0x1caf170;
	Node0x1cae8b0 -> Node0x1caf170;
	Node0x1caf170 -> Node0x1caf1e0;
	Node0x1cae920 -> Node0x1caf1e0;
	Node0x1caf1e0 -> Node0x1caf250;
	Node0x1cae9c0 -> Node0x1caf250;
	Node0x1caf250 -> Node0x1caf2c0;
	Node0x1caebb0 -> Node0x1caf2c0;
	Node0x1caf2c0 -> Node0x1caf330;
	Node0x1caec20 -> Node0x1caf330;
	Node0x1caf330 -> Node0x1caf3a0;
	Node0x1cae2e0 -> Node0x1caf3a0;
	Node0x1caf3a0 -> Node0x1caf410;
	Node0x1caeaa0 -> Node0x1caf410;
	Node0x1caf410 -> Node0x1caf480;
	Node0x1caeb40 -> Node0x1caf480;
	Node0x1cae4d0 -> Node0x1caf4f0;
	Node0x1caf480 -> Node0x1caf4f0;
	Node0x1caf4f0 -> Node0x1c4e268;
	Node0x1c4e268 -> Node0x1caf990;
}
