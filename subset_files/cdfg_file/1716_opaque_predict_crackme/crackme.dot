digraph "DFG for'crackme' function" {
	Node0x1555d30[shape=record, label="  %5 = add i32 %2, 1"];
	Node0x1555dd0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1555e40[shape=record, label="  %7 = or i32 %6, %2"];
	Node0x1555eb0[shape=record, label="  %8 = sub i32 %5, %7"];
	Node0x1555f20[shape=record, label="  %9 = sub i32 %8, %3"];
	Node0x1555f90[shape=record, label="  %10 = and i32 %3, %0"];
	Node0x1556000[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x15560a0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1556110[shape=record, label="  %13 = sub i32 %9, %12"];
	Node0x1556180[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x15561f0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1556260[shape=record, label="  %16 = xor i32 %6, %2"];
	Node0x15562d0[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x1556340[shape=record, label="  %18 = shl i32 %1, 1"];
	Node0x15563b0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1556420[shape=record, label="  %20 = and i32 %6, %2"];
	Node0x1556490[shape=record, label="  %21 = shl i32 %14, 1"];
	Node0x1556500[shape=record, label="  %22 = or i32 %3, %0"];
	Node0x1556570[shape=record, label="  %23 = xor i32 %3, %0"];
	Node0x15565e0[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x1556650[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x15566c0[shape=record, label="  %26 = xor i32 %0, -1"];
	Node0x1556730[shape=record, label="  %27 = or i32 %26, %3"];
	Node0x15567a0[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x1556810[shape=record, label="  %29 = xor i32 %28, -2"];
	Node0x1556880[shape=record, label="  %30 = and i32 %26, %3"];
	Node0x1556920[shape=record, label="  %31 = shl i32 %30, 2"];
	Node0x1556990[shape=record, label="  %32 = add i32 %2, %0"];
	Node0x1556c10[shape=record, label="  %33 = shl i32 %32, 1"];
	Node0x1556cb0[shape=record, label="  %34 = sub i32 3, %0"];
	Node0x1556d20[shape=record, label="  %35 = add i32 %34, %1"];
	Node0x1556d90[shape=record, label="  %36 = add i32 %35, %16"];
	Node0x1556e00[shape=record, label="  %37 = add i32 %36, %15"];
	Node0x1556e70[shape=record, label="  %38 = sub i32 %37, %17"];
	Node0x1556ee0[shape=record, label="  %39 = sub i32 %38, %19"];
	Node0x1556f50[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x1556fc0[shape=record, label="  %41 = add i32 %40, %3"];
	Node0x1557030[shape=record, label="  %42 = sub i32 %41, %21"];
	Node0x15570a0[shape=record, label="  %43 = sub i32 %42, %22"];
	Node0x1557110[shape=record, label="  %44 = add i32 %43, %23"];
	Node0x1557180[shape=record, label="  %45 = add i32 %44, %27"];
	Node0x15571f0[shape=record, label="  %46 = add i32 %45, %33"];
	Node0x1557260[shape=record, label="  %47 = sub i32 %46, %31"];
	Node0x15572d0[shape=record, label="  %48 = sub i32 %47, %25"];
	Node0x1557340[shape=record, label="  %49 = sub i32 %48, %29"];
	Node0x15573b0[shape=record, label="  %50 = icmp eq i32 %13, %49"];
	Node0x14f6268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1557850[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x15578a0[shape=record, label="  ret void"];
	Node0x1555d30 -> Node0x1555dd0;
	Node0x1555dd0 -> Node0x1555e40;
	Node0x1555e40 -> Node0x1555eb0;
	Node0x1555eb0 -> Node0x1555f20;
	Node0x1555f20 -> Node0x1555f90;
	Node0x1555f90 -> Node0x1556000;
	Node0x1556000 -> Node0x15560a0;
	Node0x15560a0 -> Node0x1556110;
	Node0x1556110 -> Node0x1556180;
	Node0x1556180 -> Node0x15561f0;
	Node0x15561f0 -> Node0x1556260;
	Node0x1556260 -> Node0x15562d0;
	Node0x15562d0 -> Node0x1556340;
	Node0x1556340 -> Node0x15563b0;
	Node0x15563b0 -> Node0x1556420;
	Node0x1556420 -> Node0x1556490;
	Node0x1556490 -> Node0x1556500;
	Node0x1556500 -> Node0x1556570;
	Node0x1556570 -> Node0x15565e0;
	Node0x15565e0 -> Node0x1556650;
	Node0x1556650 -> Node0x15566c0;
	Node0x15566c0 -> Node0x1556730;
	Node0x1556730 -> Node0x15567a0;
	Node0x15567a0 -> Node0x1556810;
	Node0x1556810 -> Node0x1556880;
	Node0x1556880 -> Node0x1556920;
	Node0x1556920 -> Node0x1556990;
	Node0x1556990 -> Node0x1556c10;
	Node0x1556c10 -> Node0x1556cb0;
	Node0x1556cb0 -> Node0x1556d20;
	Node0x1556d20 -> Node0x1556d90;
	Node0x1556d90 -> Node0x1556e00;
	Node0x1556e00 -> Node0x1556e70;
	Node0x1556e70 -> Node0x1556ee0;
	Node0x1556ee0 -> Node0x1556f50;
	Node0x1556f50 -> Node0x1556fc0;
	Node0x1556fc0 -> Node0x1557030;
	Node0x1557030 -> Node0x15570a0;
	Node0x15570a0 -> Node0x1557110;
	Node0x1557110 -> Node0x1557180;
	Node0x1557180 -> Node0x15571f0;
	Node0x15571f0 -> Node0x1557260;
	Node0x1557260 -> Node0x15572d0;
	Node0x15572d0 -> Node0x1557340;
	Node0x1557340 -> Node0x15573b0;
	Node0x15573b0 -> Node0x14f6268;
	Node0x14f6268 -> Node0x1557850;
	Node0x1557850 -> Node0x15578a0;
edge [color=red]
	Node0x1555dd0 -> Node0x1555e40;
	Node0x1555d30 -> Node0x1555eb0;
	Node0x1555e40 -> Node0x1555eb0;
	Node0x1555eb0 -> Node0x1555f20;
	Node0x1555f90 -> Node0x1556000;
	Node0x1556000 -> Node0x15560a0;
	Node0x1555f20 -> Node0x1556110;
	Node0x15560a0 -> Node0x1556110;
	Node0x1556180 -> Node0x15561f0;
	Node0x1555dd0 -> Node0x1556260;
	Node0x1556340 -> Node0x15563b0;
	Node0x1555dd0 -> Node0x1556420;
	Node0x1556180 -> Node0x1556490;
	Node0x1556570 -> Node0x15565e0;
	Node0x15565e0 -> Node0x1556650;
	Node0x15566c0 -> Node0x1556730;
	Node0x1556730 -> Node0x15567a0;
	Node0x15567a0 -> Node0x1556810;
	Node0x15566c0 -> Node0x1556880;
	Node0x1556880 -> Node0x1556920;
	Node0x1556990 -> Node0x1556c10;
	Node0x1556cb0 -> Node0x1556d20;
	Node0x1556d20 -> Node0x1556d90;
	Node0x1556260 -> Node0x1556d90;
	Node0x1556d90 -> Node0x1556e00;
	Node0x15561f0 -> Node0x1556e00;
	Node0x1556e00 -> Node0x1556e70;
	Node0x15562d0 -> Node0x1556e70;
	Node0x1556e70 -> Node0x1556ee0;
	Node0x15563b0 -> Node0x1556ee0;
	Node0x1556ee0 -> Node0x1556f50;
	Node0x1556420 -> Node0x1556f50;
	Node0x1556f50 -> Node0x1556fc0;
	Node0x1556fc0 -> Node0x1557030;
	Node0x1556490 -> Node0x1557030;
	Node0x1557030 -> Node0x15570a0;
	Node0x1556500 -> Node0x15570a0;
	Node0x15570a0 -> Node0x1557110;
	Node0x1556570 -> Node0x1557110;
	Node0x1557110 -> Node0x1557180;
	Node0x1556730 -> Node0x1557180;
	Node0x1557180 -> Node0x15571f0;
	Node0x1556c10 -> Node0x15571f0;
	Node0x15571f0 -> Node0x1557260;
	Node0x1556920 -> Node0x1557260;
	Node0x1557260 -> Node0x15572d0;
	Node0x1556650 -> Node0x15572d0;
	Node0x15572d0 -> Node0x1557340;
	Node0x1556810 -> Node0x1557340;
	Node0x1556110 -> Node0x15573b0;
	Node0x1557340 -> Node0x15573b0;
	Node0x15573b0 -> Node0x14f6268;
	Node0x14f6268 -> Node0x1557850;
}
