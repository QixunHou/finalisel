digraph "DFG for'crackme' function" {
	Node0x215c150[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x215c1c0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x215c230[shape=record, label="  %7 = and i32 %5, %1"];
	Node0x215c2a0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x215c310[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x215c380[shape=record, label="  %10 = xor i32 %3, %0"];
	Node0x215c3f0[shape=record, label="  %11 = xor i32 %3, -1"];
	Node0x215c460[shape=record, label="  %12 = add i32 %9, %11"];
	Node0x215c4d0[shape=record, label="  %13 = sub i32 %12, %10"];
	Node0x215c540[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x215c5b0[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x215c650[shape=record, label="  %16 = mul i32 %14, -3"];
	Node0x215c6c0[shape=record, label="  %17 = xor i32 %2, %1"];
	Node0x215c760[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x215c800[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x215c870[shape=record, label="  %20 = shl i32 %15, 1"];
	Node0x215c8e0[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x215c980[shape=record, label="  %22 = shl i32 %6, 2"];
	Node0x215ca20[shape=record, label="  %23 = xor i32 %22, -4"];
	Node0x215ca90[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x215cb00[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x215cb70[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x215cbe0[shape=record, label="  %27 = xor i32 %26, -1"];
	Node0x215cc50[shape=record, label="  %28 = xor i32 %0, -1"];
	Node0x215ccc0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x215cd30[shape=record, label="  %30 = or i32 %28, %3"];
	Node0x215cda0[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x215ce10[shape=record, label="  %32 = sub i32 %5, %29"];
	Node0x215d090[shape=record, label="  %33 = add i32 %32, %16"];
	Node0x215d100[shape=record, label="  %34 = sub i32 %33, %2"];
	Node0x215d170[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x215d1e0[shape=record, label="  %36 = sub i32 %35, %7"];
	Node0x215d250[shape=record, label="  %37 = sub i32 %36, %3"];
	Node0x215d2c0[shape=record, label="  %38 = add i32 %37, %27"];
	Node0x215d330[shape=record, label="  %39 = add i32 %38, %24"];
	Node0x215d3a0[shape=record, label="  %40 = add i32 %39, %19"];
	Node0x215d410[shape=record, label="  %41 = add i32 %40, %21"];
	Node0x215d480[shape=record, label="  %42 = add i32 %41, %23"];
	Node0x215d4f0[shape=record, label="  %43 = sub i32 %42, %25"];
	Node0x215d560[shape=record, label="  %44 = add i32 %43, %31"];
	Node0x215d5d0[shape=record, label="  %45 = icmp eq i32 %13, %44"];
	Node0x20fc268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x215da70[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x215dac0[shape=record, label="  ret void"];
	Node0x215c150 -> Node0x215c1c0;
	Node0x215c1c0 -> Node0x215c230;
	Node0x215c230 -> Node0x215c2a0;
	Node0x215c2a0 -> Node0x215c310;
	Node0x215c310 -> Node0x215c380;
	Node0x215c380 -> Node0x215c3f0;
	Node0x215c3f0 -> Node0x215c460;
	Node0x215c460 -> Node0x215c4d0;
	Node0x215c4d0 -> Node0x215c540;
	Node0x215c540 -> Node0x215c5b0;
	Node0x215c5b0 -> Node0x215c650;
	Node0x215c650 -> Node0x215c6c0;
	Node0x215c6c0 -> Node0x215c760;
	Node0x215c760 -> Node0x215c800;
	Node0x215c800 -> Node0x215c870;
	Node0x215c870 -> Node0x215c8e0;
	Node0x215c8e0 -> Node0x215c980;
	Node0x215c980 -> Node0x215ca20;
	Node0x215ca20 -> Node0x215ca90;
	Node0x215ca90 -> Node0x215cb00;
	Node0x215cb00 -> Node0x215cb70;
	Node0x215cb70 -> Node0x215cbe0;
	Node0x215cbe0 -> Node0x215cc50;
	Node0x215cc50 -> Node0x215ccc0;
	Node0x215ccc0 -> Node0x215cd30;
	Node0x215cd30 -> Node0x215cda0;
	Node0x215cda0 -> Node0x215ce10;
	Node0x215ce10 -> Node0x215d090;
	Node0x215d090 -> Node0x215d100;
	Node0x215d100 -> Node0x215d170;
	Node0x215d170 -> Node0x215d1e0;
	Node0x215d1e0 -> Node0x215d250;
	Node0x215d250 -> Node0x215d2c0;
	Node0x215d2c0 -> Node0x215d330;
	Node0x215d330 -> Node0x215d3a0;
	Node0x215d3a0 -> Node0x215d410;
	Node0x215d410 -> Node0x215d480;
	Node0x215d480 -> Node0x215d4f0;
	Node0x215d4f0 -> Node0x215d560;
	Node0x215d560 -> Node0x215d5d0;
	Node0x215d5d0 -> Node0x20fc268;
	Node0x20fc268 -> Node0x215da70;
	Node0x215da70 -> Node0x215dac0;
edge [color=red]
	Node0x215c150 -> Node0x215c1c0;
	Node0x215c150 -> Node0x215c230;
	Node0x215c230 -> Node0x215c2a0;
	Node0x215c1c0 -> Node0x215c310;
	Node0x215c2a0 -> Node0x215c310;
	Node0x215c310 -> Node0x215c460;
	Node0x215c3f0 -> Node0x215c460;
	Node0x215c460 -> Node0x215c4d0;
	Node0x215c380 -> Node0x215c4d0;
	Node0x215c540 -> Node0x215c650;
	Node0x215c6c0 -> Node0x215c760;
	Node0x215c760 -> Node0x215c800;
	Node0x215c5b0 -> Node0x215c870;
	Node0x215c870 -> Node0x215c8e0;
	Node0x215c1c0 -> Node0x215c980;
	Node0x215c980 -> Node0x215ca20;
	Node0x215ca90 -> Node0x215cb00;
	Node0x215cb70 -> Node0x215cbe0;
	Node0x215cc50 -> Node0x215ccc0;
	Node0x215cc50 -> Node0x215cd30;
	Node0x215cd30 -> Node0x215cda0;
	Node0x215c150 -> Node0x215ce10;
	Node0x215ccc0 -> Node0x215ce10;
	Node0x215ce10 -> Node0x215d090;
	Node0x215c650 -> Node0x215d090;
	Node0x215d090 -> Node0x215d100;
	Node0x215d100 -> Node0x215d170;
	Node0x215c5b0 -> Node0x215d170;
	Node0x215d170 -> Node0x215d1e0;
	Node0x215c230 -> Node0x215d1e0;
	Node0x215d1e0 -> Node0x215d250;
	Node0x215d250 -> Node0x215d2c0;
	Node0x215cbe0 -> Node0x215d2c0;
	Node0x215d2c0 -> Node0x215d330;
	Node0x215ca90 -> Node0x215d330;
	Node0x215d330 -> Node0x215d3a0;
	Node0x215c800 -> Node0x215d3a0;
	Node0x215d3a0 -> Node0x215d410;
	Node0x215c8e0 -> Node0x215d410;
	Node0x215d410 -> Node0x215d480;
	Node0x215ca20 -> Node0x215d480;
	Node0x215d480 -> Node0x215d4f0;
	Node0x215cb00 -> Node0x215d4f0;
	Node0x215d4f0 -> Node0x215d560;
	Node0x215cda0 -> Node0x215d560;
	Node0x215c4d0 -> Node0x215d5d0;
	Node0x215d560 -> Node0x215d5d0;
	Node0x215d5d0 -> Node0x20fc268;
	Node0x20fc268 -> Node0x215da70;
}
