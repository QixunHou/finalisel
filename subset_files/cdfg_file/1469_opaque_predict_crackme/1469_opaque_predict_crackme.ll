; ModuleID = '../.././c_source_file/1469_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1469_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = xor i32 %4, -1
  %8 = and i32 %7, %3
  %9 = shl i32 %8, 1
  %10 = xor i32 %9, -2
  %11 = and i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %12, %1
  %14 = sub i32 %6, %13
  %15 = add i32 %14, %10
  %16 = xor i32 %4, %3
  %17 = and i32 %4, %3
  %18 = shl i32 %3, 1
  %19 = or i32 %18, 1
  %20 = shl i32 %6, 2
  %21 = xor i32 %20, -4
  %22 = xor i32 %3, 1073741823
  %23 = and i32 %22, %4
  %24 = and i32 %2, %1
  %25 = xor i32 %24, %0
  %26 = and i32 %1, %0
  %27 = xor i32 %2, -1
  %28 = or i32 %27, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %26, %29
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %2, %0
  %34 = or i32 %33, %32
  %35 = xor i32 %1, -1
  %36 = and i32 %35, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %11, %1
  %39 = and i32 %27, %1
  %40 = xor i32 %39, -1
  %41 = xor i32 %11, %40
  %42 = xor i32 %26, -1
  %43 = xor i32 %33, -1
  %44 = and i32 %43, %42
  %45 = and i32 %32, %2
  %46 = xor i32 %28, %0
  %47 = shl i32 %46, 1
  %48 = and i32 %35, %2
  %49 = and i32 %48, %0
  %50 = xor i32 %2, %1
  %51 = xor i32 %50, %0
  %52 = xor i32 %51, -1
  %53 = xor i32 %49, %52
  %54 = add i32 %28, 1
  %55 = add i32 %31, 1
  %56 = xor i32 %0, -1
  %57 = and i32 %48, %56
  %58 = or i32 %50, %56
  %59 = xor i32 %57, %58
  %60 = or i32 %26, %43
  %61 = and i32 %24, %56
  %62 = and i32 %50, %0
  %63 = or i32 %61, %62
  %64 = shl i32 %63, 1
  %65 = xor i32 %36, %40
  %66 = or i32 %2, %1
  %67 = xor i32 %66, -1
  %68 = or i32 %67, %0
  %69 = or i32 %1, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %43, %70
  %72 = or i32 %26, %2
  %73 = shl i32 %72, 1
  %74 = or i32 %33, %26
  %75 = and i32 %28, %0
  %76 = or i32 %27, %0
  %77 = and i32 %76, %31
  %78 = xor i32 %24, -1
  %79 = xor i32 %69, %2
  %80 = or i32 %24, %36
  %81 = xor i32 %11, %69
  %82 = xor i32 %36, %78
  %83 = or i32 %33, %35
  %84 = xor i32 %50, -1
  %85 = and i32 %84, %56
  %86 = or i32 %2, %0
  %87 = xor i32 %86, -1
  %88 = or i32 %26, %87
  %89 = xor i32 %87, %1
  %90 = shl i32 %89, 1
  %91 = or i32 %35, %0
  %92 = or i32 %39, %56
  %93 = add i32 %86, 1
  %94 = and i32 %12, %35
  %95 = and i32 %24, %0
  %96 = xor i32 %95, %51
  %97 = or i32 %84, %0
  %98 = xor i32 %91, -1
  %99 = or i32 %84, %98
  %100 = or i32 %98, %2
  %101 = shl i32 %100, 1
  %102 = or i32 %66, %56
  %103 = xor i32 %98, %2
  %104 = and i32 %33, %69
  %105 = xor i32 %78, %0
  %106 = xor i32 %66, %0
  %107 = or i32 %95, %106
  %108 = xor i32 %26, %2
  %109 = or i32 %84, %70
  %110 = xor i32 %62, -1
  %111 = xor i32 %61, %110
  %112 = or i32 %26, %84
  %113 = xor i32 %40, %0
  %114 = and i32 %78, %0
  %115 = or i32 %28, %0
  %116 = xor i32 %76, -1
  %117 = xor i32 %76, %26
  %118 = shl i32 %117, 1
  %119 = and i32 %27, %42
  %120 = or i32 %39, %0
  %121 = xor i32 %70, %2
  %122 = and i32 %50, %91
  %123 = shl i32 %122, 1
  %124 = add i32 %2, 1
  %125 = and i32 %66, %56
  %126 = xor i32 %95, -1
  %127 = xor i32 %125, %126
  %128 = or i32 %116, %1
  %129 = or i32 %31, %116
  %130 = or i32 %49, %51
  %131 = and i32 %86, %31
  %132 = or i32 %31, %87
  %133 = and i32 %84, %42
  %134 = or i32 %67, %56
  %135 = and i32 %27, %0
  %136 = xor i32 %135, -1
  %137 = and i32 %136, %1
  %138 = or i32 %31, %27
  %139 = xor i32 %91, %2
  %140 = and i32 %31, %12
  %141 = shl i32 %140, 1
  %142 = or i32 %50, %0
  %143 = add i32 %135, 1
  %144 = or i32 %33, %1
  %145 = shl i32 %76, 1
  %146 = and i32 %50, %56
  %147 = xor i32 %135, %1
  %148 = or i32 %116, %32
  %149 = and i32 %28, %56
  %150 = shl i32 %149, 1
  %151 = or i32 %27, %98
  %152 = or i32 %35, %2
  %153 = and i32 %152, %0
  %154 = xor i32 %153, -1
  %155 = xor i32 %57, %154
  %156 = or i32 %33, %98
  %157 = and i32 %37, %2
  %158 = and i32 %33, %37
  %159 = and i32 %31, %27
  %160 = and i32 %76, %1
  %161 = xor i32 %11, %66
  %162 = xor i32 %106, %126
  %163 = xor i32 %39, %0
  %164 = and i32 %76, %35
  %165 = or i32 %27, %70
  %166 = xor i32 %49, %142
  %167 = and i32 %86, %35
  %168 = and i32 %136, %35
  %169 = or i32 %50, %98
  %170 = xor i32 %84, %0
  %171 = and i32 %31, %136
  %172 = xor i32 %66, %26
  %173 = or i32 %29, %56
  %174 = and i32 %86, %32
  %175 = xor i32 %11, %91
  %176 = and i32 %152, %56
  %177 = or i32 %49, %176
  %178 = and i32 %27, %32
  %179 = and i32 %84, %0
  %180 = xor i32 %135, %28
  %181 = xor i32 %86, %26
  %182 = xor i32 %58, -1
  %183 = or i32 %57, %182
  %184 = or i32 %40, %0
  %185 = or i32 %11, %31
  %186 = or i32 %27, %32
  %187 = xor i32 %36, %2
  %188 = and i32 %31, %43
  %189 = shl i32 %188, 1
  %190 = and i32 %50, %69
  %191 = or i32 %40, %56
  %192 = and i32 %33, %91
  %193 = or i32 %36, %2
  %194 = or i32 %36, %43
  %195 = and i32 %33, %31
  %196 = xor i32 %42, %2
  %197 = or i32 %26, %67
  %198 = xor i32 %28, %26
  %199 = xor i32 %135, %78
  %200 = xor i32 %152, %0
  %201 = or i32 %49, %200
  %202 = shl i32 %201, 1
  %203 = or i32 %11, %67
  %204 = xor i32 %176, -1
  %205 = xor i32 %49, %204
  %206 = or i32 %70, %2
  %207 = and i32 %78, %56
  %208 = or i32 %50, %36
  %209 = shl i32 %208, 1
  %210 = or i32 %135, %1
  %211 = and i32 %43, %37
  %212 = or i32 %11, %35
  %213 = or i32 %95, %125
  %214 = xor i32 %29, %0
  %215 = and i32 %33, %42
  %216 = shl i32 %215, 2
  %217 = or i32 %135, %35
  %218 = or i32 %84, %56
  %219 = xor i32 %116, %1
  %220 = or i32 %43, %1
  %221 = xor i32 %67, %0
  %222 = and i32 %43, %32
  %223 = and i32 %33, %1
  %224 = or i32 %78, %0
  %225 = or i32 %11, %1
  %226 = and i32 %69, %2
  %227 = and i32 %31, %2
  %228 = and i32 %40, %0
  %229 = or i32 %95, %52
  %230 = or i32 %135, %29
  %231 = or i32 %78, %56
  %232 = shl i32 %231, 1
  %233 = or i32 %116, %35
  %234 = and i32 %67, %56
  %235 = mul i32 %234, 14
  %236 = and i32 %39, %56
  %237 = mul i32 %236, 18
  %238 = and i32 %67, %0
  %239 = shl i32 %238, 2
  %240 = and i32 %39, %0
  %241 = and i32 %29, %56
  %242 = and i32 %29, %0
  %243 = mul i32 %242, 22
  %244 = shl i32 %95, 2
  %245 = add i32 %178, %193
  %246 = add i32 %245, %116
  %247 = add i32 %246, %11
  %248 = add i32 %247, %168
  %249 = add i32 %248, %160
  %250 = add i32 %249, %148
  %251 = add i32 %250, %137
  %252 = add i32 %251, %128
  %253 = add i32 %252, %30
  %254 = add i32 %253, %177
  %255 = shl i32 %254, 1
  %256 = sub i32 %159, %119
  %257 = add i32 %256, %241
  %258 = sub i32 %257, %207
  %259 = add i32 %258, %17
  %260 = mul i32 %259, 3
  %261 = sub i32 %240, %211
  %262 = sub i32 %261, %102
  %263 = add i32 %262, %81
  %264 = mul i32 %263, 5
  %265 = add i32 %23, %97
  %266 = shl i32 %265, 2
  %267 = add i32 %37, %1
  %268 = add i32 %267, %55
  %269 = sub i32 %268, %91
  %270 = add i32 %269, %124
  %271 = add i32 %270, %31
  %272 = add i32 %271, %42
  %273 = sub i32 %272, %2
  %274 = sub i32 %273, %36
  %275 = add i32 %274, %70
  %276 = add i32 %275, %98
  %277 = sub i32 %276, %3
  %278 = sub i32 %277, %45
  %279 = add i32 %278, %54
  %280 = add i32 %279, %33
  %281 = add i32 %280, %78
  %282 = sub i32 %281, %79
  %283 = add i32 %282, %93
  %284 = sub i32 %283, %103
  %285 = sub i32 %284, %108
  %286 = sub i32 %285, %50
  %287 = sub i32 %286, %121
  %288 = add i32 %287, %84
  %289 = sub i32 %288, %138
  %290 = add i32 %289, %40
  %291 = add i32 %290, %139
  %292 = add i32 %291, %143
  %293 = add i32 %292, %151
  %294 = sub i32 %293, %157
  %295 = sub i32 %294, %165
  %296 = sub i32 %295, %28
  %297 = sub i32 %296, %39
  %298 = add i32 %297, %67
  %299 = add i32 %298, %186
  %300 = sub i32 %299, %187
  %301 = add i32 %300, %196
  %302 = add i32 %301, %206
  %303 = add i32 %302, %226
  %304 = sub i32 %303, %227
  %305 = add i32 %304, %25
  %306 = add i32 %305, %34
  %307 = sub i32 %306, %38
  %308 = add i32 %307, %41
  %309 = add i32 %308, %44
  %310 = add i32 %309, %60
  %311 = sub i32 %310, %65
  %312 = sub i32 %311, %68
  %313 = sub i32 %312, %71
  %314 = sub i32 %313, %73
  %315 = add i32 %314, %74
  %316 = add i32 %315, %75
  %317 = add i32 %316, %77
  %318 = sub i32 %317, %80
  %319 = add i32 %318, %82
  %320 = add i32 %319, %83
  %321 = add i32 %320, %85
  %322 = add i32 %321, %88
  %323 = add i32 %322, %92
  %324 = add i32 %323, %94
  %325 = add i32 %324, %99
  %326 = sub i32 %325, %101
  %327 = add i32 %326, %104
  %328 = sub i32 %327, %105
  %329 = add i32 %328, %109
  %330 = sub i32 %329, %112
  %331 = add i32 %330, %113
  %332 = sub i32 %331, %114
  %333 = add i32 %332, %115
  %334 = sub i32 %333, %120
  %335 = add i32 %334, %129
  %336 = sub i32 %335, %131
  %337 = sub i32 %336, %132
  %338 = sub i32 %337, %133
  %339 = sub i32 %338, %134
  %340 = add i32 %339, %142
  %341 = sub i32 %340, %144
  %342 = add i32 %341, %51
  %343 = sub i32 %342, %145
  %344 = sub i32 %343, %146
  %345 = add i32 %344, %147
  %346 = sub i32 %345, %156
  %347 = sub i32 %346, %158
  %348 = add i32 %347, %161
  %349 = sub i32 %348, %163
  %350 = sub i32 %349, %164
  %351 = sub i32 %350, %167
  %352 = sub i32 %351, %169
  %353 = sub i32 %352, %170
  %354 = sub i32 %353, %171
  %355 = add i32 %354, %172
  %356 = add i32 %355, %173
  %357 = add i32 %356, %174
  %358 = add i32 %357, %175
  %359 = sub i32 %358, %179
  %360 = add i32 %359, %180
  %361 = add i32 %360, %181
  %362 = add i32 %361, %184
  %363 = add i32 %362, %185
  %364 = sub i32 %363, %190
  %365 = add i32 %364, %191
  %366 = add i32 %365, %192
  %367 = add i32 %366, %194
  %368 = sub i32 %367, %195
  %369 = sub i32 %368, %197
  %370 = sub i32 %369, %198
  %371 = sub i32 %370, %106
  %372 = add i32 %371, %199
  %373 = sub i32 %372, %203
  %374 = add i32 %373, %210
  %375 = sub i32 %374, %212
  %376 = sub i32 %375, %214
  %377 = sub i32 %376, %217
  %378 = add i32 %377, %218
  %379 = add i32 %378, %219
  %380 = sub i32 %379, %220
  %381 = add i32 %380, %221
  %382 = sub i32 %381, %222
  %383 = add i32 %382, %223
  %384 = sub i32 %383, %224
  %385 = sub i32 %384, %225
  %386 = sub i32 %385, %62
  %387 = add i32 %386, %228
  %388 = add i32 %387, %230
  %389 = add i32 %388, %233
  %390 = sub i32 %389, %61
  %391 = add i32 %390, %16
  %392 = add i32 %391, %17
  %393 = add i32 %392, %19
  %394 = add i32 %393, %8
  %395 = sub i32 %394, %47
  %396 = sub i32 %395, %53
  %397 = sub i32 %396, %59
  %398 = sub i32 %397, %90
  %399 = sub i32 %398, %96
  %400 = sub i32 %399, %107
  %401 = sub i32 %400, %111
  %402 = sub i32 %401, %118
  %403 = sub i32 %402, %123
  %404 = sub i32 %403, %127
  %405 = add i32 %404, %130
  %406 = sub i32 %405, %141
  %407 = sub i32 %406, %150
  %408 = sub i32 %407, %155
  %409 = sub i32 %408, %162
  %410 = sub i32 %409, %166
  %411 = add i32 %410, %183
  %412 = sub i32 %411, %189
  %413 = add i32 %412, %205
  %414 = sub i32 %413, %209
  %415 = add i32 %414, %213
  %416 = sub i32 %415, %216
  %417 = sub i32 %416, %229
  %418 = sub i32 %417, %232
  %419 = add i32 %418, %235
  %420 = add i32 %419, %237
  %421 = sub i32 %420, %239
  %422 = add i32 %421, %243
  %423 = sub i32 %422, %244
  %424 = sub i32 %423, %64
  %425 = sub i32 %424, %202
  %426 = add i32 %425, %21
  %427 = add i32 %426, %266
  %428 = add i32 %427, %264
  %429 = add i32 %428, %260
  %430 = add i32 %429, %255
  %431 = icmp eq i32 %15, %430
  %432 = select i1 %431, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %433 = tail call i32 @puts(i8* nonnull dereferenceable(1) %432)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
