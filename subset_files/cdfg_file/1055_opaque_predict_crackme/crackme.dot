digraph "DFG for'crackme' function" {
	Node0xfe8540[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xfe8bf0[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0xfe8cb0[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0xfe8d50[shape=record, label="  %6 = mul i32 %5, -3"];
	Node0xfe8dc0[shape=record, label="  %7 = add i32 %4, %6"];
	Node0xfe8e30[shape=record, label="  %8 = mul i32 %0, -2"];
	Node0xfe8ea0[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0xfe8f10[shape=record, label="  %10 = or i32 %9, %0"];
	Node0xfe8f80[shape=record, label="  %11 = or i32 %5, %1"];
	Node0xfe9020[shape=record, label="  %12 = shl i32 %3, 1"];
	Node0xfe9090[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xfe9100[shape=record, label="  %14 = or i32 %1, %0"];
	Node0xfe91a0[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0xfe9240[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0xfe92b0[shape=record, label="  %17 = xor i32 %10, -1"];
	Node0xfe9350[shape=record, label="  %18 = mul i32 %17, -6"];
	Node0xfe93c0[shape=record, label="  %19 = add i32 %8, -1"];
	Node0xfe9430[shape=record, label="  %20 = add i32 %19, %1"];
	Node0xfe94a0[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0xfe9510[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0xfe9580[shape=record, label="  %23 = add i32 %22, %18"];
	Node0xfe95f0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0xfe9660[shape=record, label="  %25 = sub i32 %24, %16"];
	Node0xfe96d0[shape=record, label="  %26 = icmp eq i32 %7, %25"];
	Node0xf89268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xfe9b70[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xfe9bc0[shape=record, label="  ret void"];
	Node0xfe8540 -> Node0xfe8bf0;
	Node0xfe8bf0 -> Node0xfe8cb0;
	Node0xfe8cb0 -> Node0xfe8d50;
	Node0xfe8d50 -> Node0xfe8dc0;
	Node0xfe8dc0 -> Node0xfe8e30;
	Node0xfe8e30 -> Node0xfe8ea0;
	Node0xfe8ea0 -> Node0xfe8f10;
	Node0xfe8f10 -> Node0xfe8f80;
	Node0xfe8f80 -> Node0xfe9020;
	Node0xfe9020 -> Node0xfe9090;
	Node0xfe9090 -> Node0xfe9100;
	Node0xfe9100 -> Node0xfe91a0;
	Node0xfe91a0 -> Node0xfe9240;
	Node0xfe9240 -> Node0xfe92b0;
	Node0xfe92b0 -> Node0xfe9350;
	Node0xfe9350 -> Node0xfe93c0;
	Node0xfe93c0 -> Node0xfe9430;
	Node0xfe9430 -> Node0xfe94a0;
	Node0xfe94a0 -> Node0xfe9510;
	Node0xfe9510 -> Node0xfe9580;
	Node0xfe9580 -> Node0xfe95f0;
	Node0xfe95f0 -> Node0xfe9660;
	Node0xfe9660 -> Node0xfe96d0;
	Node0xfe96d0 -> Node0xf89268;
	Node0xf89268 -> Node0xfe9b70;
	Node0xfe9b70 -> Node0xfe9bc0;
edge [color=red]
	Node0xfe8540 -> Node0xfe8bf0;
	Node0xfe8cb0 -> Node0xfe8d50;
	Node0xfe8bf0 -> Node0xfe8dc0;
	Node0xfe8d50 -> Node0xfe8dc0;
	Node0xfe8ea0 -> Node0xfe8f10;
	Node0xfe8cb0 -> Node0xfe8f80;
	Node0xfe8540 -> Node0xfe9020;
	Node0xfe9020 -> Node0xfe9090;
	Node0xfe9100 -> Node0xfe91a0;
	Node0xfe91a0 -> Node0xfe9240;
	Node0xfe8f10 -> Node0xfe92b0;
	Node0xfe92b0 -> Node0xfe9350;
	Node0xfe8e30 -> Node0xfe93c0;
	Node0xfe93c0 -> Node0xfe9430;
	Node0xfe9430 -> Node0xfe94a0;
	Node0xfe8f10 -> Node0xfe94a0;
	Node0xfe94a0 -> Node0xfe9510;
	Node0xfe8f80 -> Node0xfe9510;
	Node0xfe9510 -> Node0xfe9580;
	Node0xfe9350 -> Node0xfe9580;
	Node0xfe9580 -> Node0xfe95f0;
	Node0xfe9090 -> Node0xfe95f0;
	Node0xfe95f0 -> Node0xfe9660;
	Node0xfe9240 -> Node0xfe9660;
	Node0xfe8dc0 -> Node0xfe96d0;
	Node0xfe9660 -> Node0xfe96d0;
	Node0xfe96d0 -> Node0xf89268;
	Node0xf89268 -> Node0xfe9b70;
}
