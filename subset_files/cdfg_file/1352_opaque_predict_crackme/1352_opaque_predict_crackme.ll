; ModuleID = '../.././c_source_file/1352_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1352_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = shl i32 %7, 1
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %2, %0
  %12 = or i32 %11, %10
  %13 = xor i32 %0, -1
  %14 = and i32 %2, %1
  %15 = and i32 %14, %13
  %16 = or i32 %2, %1
  %17 = and i32 %16, %0
  %18 = or i32 %15, %17
  %19 = and i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = and i32 %20, %1
  %22 = xor i32 %10, -1
  %23 = and i32 %22, %2
  %24 = xor i32 %14, -1
  %25 = and i32 %24, %13
  %26 = and i32 %14, %0
  %27 = and i32 %16, %13
  %28 = xor i32 %26, -1
  %29 = xor i32 %27, %28
  %30 = and i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %4, %31
  %33 = shl i32 %32, 1
  %34 = xor i32 %16, -1
  %35 = or i32 %30, %34
  %36 = xor i32 %1, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %11, -1
  %39 = or i32 %38, %37
  %40 = or i32 %26, %27
  %41 = or i32 %9, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %11, %42
  %44 = xor i32 %2, %1
  %45 = and i32 %44, %22
  %46 = xor i32 %19, %5
  %47 = shl i32 %46, 1
  %48 = and i32 %44, %41
  %49 = or i32 %44, %42
  %50 = and i32 %9, %2
  %51 = and i32 %50, %13
  %52 = or i32 %9, %2
  %53 = and i32 %52, %0
  %54 = or i32 %51, %53
  %55 = or i32 %36, %38
  %56 = xor i32 %10, %2
  %57 = or i32 %38, %42
  %58 = shl i32 %57, 2
  %59 = or i32 %19, %36
  %60 = or i32 %4, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %61, %1
  %63 = or i32 %10, %4
  %64 = shl i32 %63, 1
  %65 = or i32 %30, %2
  %66 = xor i32 %31, %2
  %67 = add i32 %19, 1
  %68 = xor i32 %44, -1
  %69 = or i32 %68, %13
  %70 = and i32 %4, %0
  %71 = or i32 %4, %1
  %72 = xor i32 %71, -1
  %73 = or i32 %70, %72
  %74 = shl i32 %73, 1
  %75 = and i32 %36, %2
  %76 = and i32 %60, %1
  %77 = and i32 %44, %5
  %78 = xor i32 %20, %1
  %79 = xor i32 %34, %0
  %80 = or i32 %4, %37
  %81 = xor i32 %60, %30
  %82 = or i32 %38, %9
  %83 = or i32 %11, %1
  %84 = and i32 %38, %22
  %85 = and i32 %4, %1
  %86 = or i32 %85, %0
  %87 = or i32 %30, %38
  %88 = or i32 %19, %42
  %89 = and i32 %5, %2
  %90 = and i32 %11, %36
  %91 = and i32 %11, %9
  %92 = and i32 %44, %13
  %93 = or i32 %26, %92
  %94 = shl i32 %93, 1
  %95 = or i32 %61, %1
  %96 = or i32 %11, %37
  %97 = or i32 %2, %0
  %98 = xor i32 %97, -1
  %99 = xor i32 %98, %1
  %100 = xor i32 %97, %30
  %101 = shl i32 %100, 1
  %102 = xor i32 %16, %0
  %103 = or i32 %44, %13
  %104 = xor i32 %103, -1
  %105 = or i32 %51, %104
  %106 = xor i32 %70, %1
  %107 = or i32 %72, %13
  %108 = shl i32 %107, 1
  %109 = shl i32 %13, 1
  %110 = and i32 %5, %38
  %111 = add i32 %16, 1
  %112 = or i32 %10, %68
  %113 = shl i32 %112, 1
  %114 = or i32 %70, %1
  %115 = xor i32 %70, -1
  %116 = and i32 %115, %37
  %117 = or i32 %30, %72
  %118 = xor i32 %102, %28
  %119 = and i32 %5, %68
  %120 = and i32 %11, %37
  %121 = or i32 %34, %0
  %122 = xor i32 %85, -1
  %123 = and i32 %122, %0
  %124 = or i32 %11, %6
  %125 = or i32 %61, %9
  %126 = and i32 %68, %13
  %127 = xor i32 %85, %0
  %128 = and i32 %38, %31
  %129 = or i32 %16, %0
  %130 = or i32 %30, %68
  %131 = shl i32 %130, 1
  %132 = or i32 %98, %9
  %133 = and i32 %38, %1
  %134 = or i32 %4, %42
  %135 = and i32 %50, %0
  %136 = or i32 %44, %0
  %137 = xor i32 %136, -1
  %138 = or i32 %135, %137
  %139 = and i32 %11, %5
  %140 = xor i32 %10, %24
  %141 = or i32 %24, %0
  %142 = or i32 %19, %85
  %143 = and i32 %71, %13
  %144 = or i32 %24, %13
  %145 = xor i32 %71, %30
  %146 = or i32 %19, %9
  %147 = or i32 %38, %6
  %148 = or i32 %19, %37
  %149 = shl i32 %148, 1
  %150 = add i32 %30, 1
  %151 = or i32 %38, %1
  %152 = xor i32 %92, %28
  %153 = xor i32 %19, %1
  %154 = and i32 %41, %38
  %155 = shl i32 %154, 1
  %156 = xor i32 %122, %0
  %157 = or i32 %122, %13
  %158 = and i32 %68, %31
  %159 = and i32 %5, %4
  %160 = and i32 %122, %13
  %161 = or i32 %70, %36
  %162 = xor i32 %41, %2
  %163 = or i32 %44, %6
  %164 = or i32 %19, %34
  %165 = or i32 %14, %10
  %166 = xor i32 %70, %24
  %167 = or i32 %98, %37
  %168 = xor i32 %44, %0
  %169 = xor i32 %168, %26
  %170 = or i32 %98, %1
  %171 = xor i32 %72, %0
  %172 = and i32 %38, %37
  %173 = xor i32 %30, %2
  %174 = and i32 %36, %4
  %175 = or i32 %44, %10
  %176 = or i32 %42, %2
  %177 = xor i32 %53, -1
  %178 = xor i32 %51, %177
  %179 = or i32 %68, %6
  %180 = and i32 %115, %9
  %181 = shl i32 %180, 1
  %182 = xor i32 %19, %41
  %183 = and i32 %37, %2
  %184 = shl i32 %183, 1
  %185 = and i32 %4, %37
  %186 = and i32 %97, %1
  %187 = xor i32 %52, %0
  %188 = or i32 %135, %187
  %189 = or i32 %34, %13
  %190 = and i32 %41, %4
  %191 = and i32 %97, %36
  %192 = and i32 %31, %2
  %193 = or i32 %30, %98
  %194 = and i32 %36, %38
  %195 = xor i32 %97, %1
  %196 = and i32 %71, %0
  %197 = xor i32 %19, %16
  %198 = xor i32 %115, %1
  %199 = xor i32 %51, %103
  %200 = add i32 %71, 1
  %201 = or i32 %72, %0
  %202 = or i32 %11, %9
  %203 = and i32 %38, %9
  %204 = or i32 %122, %0
  %205 = shl i32 %204, 1
  %206 = or i32 %10, %38
  %207 = and i32 %44, %0
  %208 = or i32 %15, %207
  %209 = xor i32 %24, %0
  %210 = and i32 %60, %37
  %211 = and i32 %36, %20
  %212 = add i32 %5, 1
  %213 = and i32 %34, %13
  %214 = shl i32 %213, 1
  %215 = and i32 %85, %13
  %216 = shl i32 %215, 2
  %217 = and i32 %34, %0
  %218 = and i32 %85, %0
  %219 = shl i32 %218, 3
  %220 = and i32 %72, %13
  %221 = mul i32 %220, 18
  %222 = mul i32 %15, -15
  %223 = and i32 %72, %0
  %224 = shl i32 %26, 2
  %225 = add i32 %98, %37
  %226 = add i32 %225, %68
  %227 = add i32 %226, %134
  %228 = add i32 %227, %71
  %229 = add i32 %228, %56
  %230 = add i32 %229, %203
  %231 = add i32 %230, %211
  %232 = add i32 %231, %179
  %233 = add i32 %232, %158
  %234 = add i32 %233, %156
  %235 = add i32 %234, %128
  %236 = add i32 %235, %121
  %237 = add i32 %236, %59
  %238 = add i32 %237, %49
  %239 = add i32 %238, %43
  %240 = shl i32 %239, 1
  %241 = sub i32 %223, %217
  %242 = mul i32 %241, 6
  %243 = sub i32 %182, %144
  %244 = mul i32 %243, 5
  %245 = add i32 %208, %150
  %246 = mul i32 %245, 3
  %247 = sub i32 -2, %0
  %248 = sub i32 %247, %109
  %249 = add i32 %248, %1
  %250 = add i32 %249, %36
  %251 = add i32 %250, %41
  %252 = sub i32 %251, %2
  %253 = sub i32 %252, %30
  %254 = add i32 %253, %212
  %255 = sub i32 %254, %23
  %256 = sub i32 %255, %65
  %257 = add i32 %256, %66
  %258 = add i32 %257, %67
  %259 = sub i32 %258, %75
  %260 = add i32 %259, %61
  %261 = sub i32 %260, %80
  %262 = add i32 %261, %89
  %263 = add i32 %262, %56
  %264 = add i32 %263, %111
  %265 = sub i32 %264, %60
  %266 = add i32 %265, %159
  %267 = add i32 %266, %162
  %268 = add i32 %267, 1
  %269 = sub i32 %268, %173
  %270 = add i32 %269, %44
  %271 = add i32 %270, %174
  %272 = sub i32 %271, %19
  %273 = add i32 %272, %176
  %274 = add i32 %273, %185
  %275 = add i32 %274, %190
  %276 = add i32 %275, %192
  %277 = add i32 %276, %200
  %278 = add i32 %277, %12
  %279 = add i32 %278, %21
  %280 = add i32 %279, %25
  %281 = sub i32 %280, %33
  %282 = sub i32 %281, %35
  %283 = sub i32 %282, %39
  %284 = sub i32 %283, %45
  %285 = sub i32 %284, %48
  %286 = add i32 %285, %55
  %287 = sub i32 %286, %62
  %288 = sub i32 %287, %64
  %289 = sub i32 %288, %69
  %290 = sub i32 %289, %76
  %291 = add i32 %290, %77
  %292 = add i32 %291, %78
  %293 = sub i32 %292, %79
  %294 = add i32 %293, %81
  %295 = add i32 %294, %82
  %296 = add i32 %295, %83
  %297 = sub i32 %296, %84
  %298 = add i32 %297, %86
  %299 = add i32 %298, %87
  %300 = sub i32 %299, %88
  %301 = add i32 %300, %90
  %302 = sub i32 %301, %91
  %303 = sub i32 %302, %95
  %304 = sub i32 %303, %96
  %305 = add i32 %304, %99
  %306 = add i32 %305, %102
  %307 = add i32 %306, %106
  %308 = add i32 %307, %110
  %309 = add i32 %308, %114
  %310 = add i32 %309, %116
  %311 = sub i32 %310, %117
  %312 = sub i32 %311, %103
  %313 = sub i32 %312, %119
  %314 = sub i32 %313, %120
  %315 = add i32 %314, %123
  %316 = add i32 %315, %124
  %317 = add i32 %316, %125
  %318 = sub i32 %317, %126
  %319 = add i32 %318, %127
  %320 = sub i32 %319, %129
  %321 = sub i32 %320, %132
  %322 = add i32 %321, %133
  %323 = sub i32 %322, %139
  %324 = sub i32 %323, %140
  %325 = add i32 %324, %141
  %326 = add i32 %325, %142
  %327 = add i32 %326, %143
  %328 = sub i32 %327, %145
  %329 = sub i32 %328, %146
  %330 = sub i32 %329, %147
  %331 = add i32 %330, %151
  %332 = add i32 %331, %136
  %333 = sub i32 %332, %153
  %334 = sub i32 %333, %157
  %335 = sub i32 %334, %160
  %336 = sub i32 %335, %161
  %337 = add i32 %336, %163
  %338 = sub i32 %337, %164
  %339 = add i32 %338, %165
  %340 = sub i32 %339, %166
  %341 = add i32 %340, %167
  %342 = add i32 %341, %170
  %343 = sub i32 %342, %171
  %344 = add i32 %343, %172
  %345 = add i32 %344, %175
  %346 = sub i32 %345, %184
  %347 = add i32 %346, %186
  %348 = sub i32 %347, %189
  %349 = add i32 %348, %191
  %350 = sub i32 %349, %193
  %351 = sub i32 %350, %194
  %352 = sub i32 %351, %195
  %353 = sub i32 %352, %196
  %354 = add i32 %353, %197
  %355 = add i32 %354, %198
  %356 = add i32 %355, %201
  %357 = add i32 %356, %202
  %358 = sub i32 %357, %206
  %359 = sub i32 %358, %209
  %360 = add i32 %359, %210
  %361 = sub i32 %360, %18
  %362 = add i32 %361, %29
  %363 = add i32 %362, %40
  %364 = sub i32 %363, %47
  %365 = sub i32 %364, %54
  %366 = add i32 %365, %58
  %367 = sub i32 %366, %74
  %368 = sub i32 %367, %101
  %369 = sub i32 %368, %105
  %370 = sub i32 %369, %108
  %371 = sub i32 %370, %113
  %372 = sub i32 %371, %118
  %373 = sub i32 %372, %131
  %374 = sub i32 %373, %138
  %375 = sub i32 %374, %149
  %376 = add i32 %375, %152
  %377 = sub i32 %376, %155
  %378 = sub i32 %377, %169
  %379 = sub i32 %378, %178
  %380 = sub i32 %379, %181
  %381 = add i32 %380, %188
  %382 = add i32 %381, %199
  %383 = sub i32 %382, %205
  %384 = sub i32 %383, %214
  %385 = sub i32 %384, %216
  %386 = sub i32 %385, %219
  %387 = add i32 %386, %221
  %388 = add i32 %387, %222
  %389 = sub i32 %388, %224
  %390 = sub i32 %389, %94
  %391 = add i32 %390, %242
  %392 = add i32 %391, %244
  %393 = add i32 %392, %246
  %394 = add i32 %393, %240
  %395 = icmp eq i32 %8, %394
  %396 = select i1 %395, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %397 = tail call i32 @puts(i8* nonnull dereferenceable(1) %396)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
