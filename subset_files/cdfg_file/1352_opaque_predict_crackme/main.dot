digraph "DFG for'main' function" {
	Node0x7f1ef8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x7f1f78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x7f2008[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x7f2068[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x7f24e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x7f25c8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x7f26c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x7f2788[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x7f2838[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x7f2a98[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x7f2b58[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x7f2cb8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x7f2d18[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x7f79d0[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x7f7bd8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x7f7d38[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x7f7e48[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x7f7f08[shape=record, label="  ret i32 0"];
	Node0x7f1ef8 -> Node0x7f1f78;
	Node0x7f1f78 -> Node0x7f2008;
	Node0x7f2008 -> Node0x7f2068;
	Node0x7f2068 -> Node0x7f24e8;
	Node0x7f24e8 -> Node0x7f25c8;
	Node0x7f25c8 -> Node0x7f26c8;
	Node0x7f26c8 -> Node0x7f2788;
	Node0x7f2788 -> Node0x7f2838;
	Node0x7f2838 -> Node0x7f2a98;
	Node0x7f2a98 -> Node0x7f2b58;
	Node0x7f2b58 -> Node0x7f2cb8;
	Node0x7f2cb8 -> Node0x7f2d18;
	Node0x7f2d18 -> Node0x7f79d0;
	Node0x7f79d0 -> Node0x7f7bd8;
	Node0x7f7bd8 -> Node0x7f7d38;
	Node0x7f7d38 -> Node0x7f7e48;
	Node0x7f7e48 -> Node0x7f7f08;
edge [color=red]
	Node0x7f1ef8 -> Node0x7f2068;
	Node0x7f2068 -> Node0x7f24e8;
	Node0x7f1f78 -> Node0x7f25c8;
	Node0x7f25c8 -> Node0x7f26c8;
	Node0x7f2008 -> Node0x7f2788;
	Node0x7f2788 -> Node0x7f2838;
	Node0x7f1ef8 -> Node0x7f2a98;
	Node0x7f1f78 -> Node0x7f2a98;
	Node0x7f2008 -> Node0x7f2a98;
	Node0x7f1ef8 -> Node0x7f2b58;
	Node0x7f1f78 -> Node0x7f2cb8;
	Node0x7f2008 -> Node0x7f2d18;
	Node0x7f2b58 -> Node0x7f79d0;
	Node0x7f2cb8 -> Node0x7f79d0;
	Node0x7f2d18 -> Node0x7f79d0;
	Node0x7f2788 -> Node0x7f7bd8;
	Node0x7f25c8 -> Node0x7f7d38;
	Node0x7f2068 -> Node0x7f7e48;
}
