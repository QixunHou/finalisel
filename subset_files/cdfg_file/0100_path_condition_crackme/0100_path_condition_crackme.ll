; ModuleID = '../.././c_source_file/0100_path_condition_crackme.c'
source_filename = "../.././c_source_file/0100_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %1
  %5 = and i32 %4, %0
  %6 = mul i32 %5, -2
  %7 = xor i32 %2, -1
  %8 = and i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = and i32 %7, %9
  %11 = and i32 %2, %1
  %12 = and i32 %11, %0
  %13 = xor i32 %2, %1
  %14 = xor i32 %13, %0
  %15 = xor i32 %12, %14
  %16 = and i32 %7, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %1, %0
  %19 = and i32 %18, %17
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %2
  %22 = and i32 %21, %0
  %23 = xor i32 %14, -1
  %24 = xor i32 %22, %23
  %25 = xor i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = shl i32 %26, 1
  %28 = xor i32 %0, -1
  %29 = and i32 %13, %28
  %30 = xor i32 %12, -1
  %31 = xor i32 %29, %30
  %32 = or i32 %20, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %4, %8
  %35 = and i32 %2, %0
  %36 = and i32 %7, %1
  %37 = or i32 %35, %36
  %38 = shl i32 %37, 1
  %39 = and i32 %20, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %13, -1
  %42 = and i32 %41, %40
  %43 = or i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %41, %44
  %46 = or i32 %7, %1
  %47 = and i32 %46, %28
  %48 = or i32 %35, %33
  %49 = and i32 %21, %28
  %50 = or i32 %13, %28
  %51 = xor i32 %49, %50
  %52 = or i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %18, %53
  %55 = xor i32 %36, -1
  %56 = and i32 %13, %0
  %57 = xor i32 %50, -1
  %58 = or i32 %49, %57
  %59 = xor i32 %46, -1
  %60 = or i32 %59, %28
  %61 = or i32 %25, %44
  %62 = and i32 %41, %9
  %63 = xor i32 %18, -1
  %64 = and i32 %17, %63
  %65 = or i32 %12, %29
  %66 = or i32 %18, %2
  %67 = shl i32 %66, 1
  %68 = xor i32 %11, -1
  %69 = and i32 %68, %28
  %70 = shl i32 %69, 1
  %71 = xor i32 %53, %1
  %72 = or i32 %68, %28
  %73 = or i32 %35, %20
  %74 = xor i32 %55, %0
  %75 = xor i32 %36, %0
  %76 = and i32 %32, %26
  %77 = xor i32 %4, %0
  %78 = xor i32 %77, %30
  %79 = or i32 %7, %44
  %80 = shl i32 %79, 1
  %81 = xor i32 %33, %2
  %82 = and i32 %46, %0
  %83 = or i32 %7, %0
  %84 = xor i32 %83, -1
  %85 = or i32 %18, %84
  %86 = or i32 %8, %59
  %87 = or i32 %7, %33
  %88 = and i32 %18, %7
  %89 = or i32 %12, %77
  %90 = or i32 %13, %0
  %91 = xor i32 %22, %90
  %92 = xor i32 %83, %1
  %93 = xor i32 %4, -1
  %94 = or i32 %93, %0
  %95 = or i32 %11, %28
  %96 = or i32 %84, %20
  %97 = or i32 %8, %26
  %98 = or i32 %26, %63
  %99 = xor i32 %35, %55
  %100 = or i32 %8, %7
  %101 = or i32 %59, %0
  %102 = xor i32 %52, %8
  %103 = or i32 %36, %28
  %104 = xor i32 %59, %0
  %105 = xor i32 %44, %2
  %106 = or i32 %55, %0
  %107 = or i32 %39, %2
  %108 = and i32 %41, %0
  %109 = xor i32 %35, -1
  %110 = and i32 %18, %109
  %111 = xor i32 %9, %2
  %112 = or i32 %16, %20
  %113 = or i32 %7, %63
  %114 = shl i32 %113, 1
  %115 = and i32 %4, %28
  %116 = or i32 %12, %115
  %117 = or i32 %68, %0
  %118 = and i32 %26, %1
  %119 = shl i32 %118, 1
  %120 = or i32 %16, %59
  %121 = or i32 %53, %20
  %122 = or i32 %20, %2
  %123 = xor i32 %122, %0
  %124 = or i32 %22, %123
  %125 = or i32 %55, %28
  %126 = or i32 %25, %39
  %127 = or i32 %41, %28
  %128 = xor i32 %35, %43
  %129 = and i32 %83, %18
  %130 = xor i32 %35, %4
  %131 = and i32 %9, %2
  %132 = or i32 %26, %33
  %133 = or i32 %13, %8
  %134 = or i32 %4, %0
  %135 = or i32 %26, %20
  %136 = or i32 %84, %63
  %137 = and i32 %83, %63
  %138 = and i32 %32, %2
  %139 = and i32 %25, %43
  %140 = and i32 %13, %40
  %141 = xor i32 %39, %55
  %142 = or i32 %25, %8
  %143 = or i32 %26, %44
  %144 = shl i32 %143, 1
  %145 = add i32 %52, 1
  %146 = or i32 %33, %2
  %147 = xor i32 %46, %0
  %148 = or i32 %35, %63
  %149 = and i32 %55, %28
  %150 = shl i32 %9, 1
  %151 = or i32 %84, %1
  %152 = and i32 %11, %28
  %153 = or i32 %152, %56
  %154 = xor i32 %17, %1
  %155 = xor i32 %41, %0
  %156 = and i32 %26, %20
  %157 = or i32 %4, %28
  %158 = xor i32 %84, %1
  %159 = xor i32 %46, %8
  %160 = and i32 %32, %7
  %161 = shl i32 %160, 2
  %162 = or i32 %16, %63
  %163 = and i32 %109, %1
  %164 = xor i32 %16, %46
  %165 = and i32 %63, %2
  %166 = and i32 %52, %20
  %167 = and i32 %25, %32
  %168 = or i32 %12, %23
  %169 = and i32 %109, %20
  %170 = and i32 %13, %43
  %171 = or i32 %8, %53
  %172 = xor i32 %40, %2
  %173 = or i32 %93, %28
  %174 = shl i32 %173, 1
  %175 = and i32 %25, %9
  %176 = xor i32 %11, %0
  %177 = shl i32 %176, 2
  %178 = and i32 %26, %40
  %179 = or i32 %25, %63
  %180 = or i32 %53, %1
  %181 = shl i32 %180, 1
  %182 = or i32 %53, %63
  %183 = or i32 %35, %1
  %184 = and i32 %43, %7
  %185 = or i32 %35, %93
  %186 = or i32 %18, %26
  %187 = and i32 %109, %63
  %188 = xor i32 %5, -1
  %189 = xor i32 %152, %188
  %190 = or i32 %25, %20
  %191 = or i32 %63, %2
  %192 = xor i32 %16, %1
  %193 = xor i32 %90, -1
  %194 = or i32 %22, %193
  %195 = and i32 %7, %63
  %196 = and i32 %52, %18
  %197 = and i32 %26, %63
  %198 = and i32 %25, %18
  %199 = shl i32 %198, 1
  %200 = or i32 %26, %1
  %201 = or i32 %13, %44
  %202 = and i32 %17, %20
  %203 = and i32 %93, %28
  %204 = shl i32 %203, 4
  %205 = and i32 %36, %28
  %206 = and i32 %93, %0
  %207 = mul i32 %206, 19
  %208 = and i32 %36, %0
  %209 = mul i32 %208, -21
  %210 = and i32 %59, %28
  %211 = shl i32 %152, 2
  %212 = and i32 %59, %0
  %213 = sub i32 -2, %43
  %214 = add i32 %213, %195
  %215 = add i32 %214, %184
  %216 = add i32 %215, %172
  %217 = add i32 %216, %197
  %218 = add i32 %217, %190
  %219 = add i32 %218, %183
  %220 = add i32 %219, %140
  %221 = add i32 %220, %90
  %222 = add i32 %221, %99
  %223 = add i32 %222, %76
  %224 = add i32 %223, %153
  %225 = shl i32 %224, 1
  %226 = add i32 %25, %55
  %227 = add i32 %226, %73
  %228 = add i32 %227, %15
  %229 = mul i32 %228, -3
  %230 = add i32 %210, %20
  %231 = sub i32 %230, %212
  %232 = mul i32 %231, 5
  %233 = add i32 %205, %191
  %234 = shl i32 %233, 2
  %235 = add i32 %0, -1
  %236 = add i32 %235, %1
  %237 = add i32 %236, %33
  %238 = sub i32 %237, %2
  %239 = add i32 %238, %63
  %240 = add i32 %239, %7
  %241 = sub i32 %240, %32
  %242 = sub i32 %241, %43
  %243 = add i32 %242, %40
  %244 = sub i32 %243, %10
  %245 = sub i32 %244, %81
  %246 = sub i32 %245, %87
  %247 = add i32 %246, %88
  %248 = sub i32 %247, %46
  %249 = add i32 %248, %100
  %250 = add i32 %249, %105
  %251 = add i32 %250, %59
  %252 = sub i32 %251, %107
  %253 = add i32 %252, %111
  %254 = sub i32 %253, %52
  %255 = sub i32 %254, %131
  %256 = sub i32 %255, %138
  %257 = add i32 %256, %145
  %258 = sub i32 %257, %146
  %259 = sub i32 %258, %4
  %260 = sub i32 %259, %150
  %261 = sub i32 %260, %165
  %262 = sub i32 %261, %36
  %263 = sub i32 %262, %19
  %264 = sub i32 %263, %27
  %265 = add i32 %264, %34
  %266 = sub i32 %265, %42
  %267 = add i32 %266, %45
  %268 = sub i32 %267, %47
  %269 = add i32 %268, %48
  %270 = sub i32 %269, %54
  %271 = sub i32 %270, %56
  %272 = sub i32 %271, %60
  %273 = add i32 %272, %61
  %274 = sub i32 %273, %62
  %275 = sub i32 %274, %64
  %276 = sub i32 %275, %67
  %277 = add i32 %276, %71
  %278 = add i32 %277, %72
  %279 = add i32 %278, %74
  %280 = add i32 %279, %75
  %281 = sub i32 %280, %80
  %282 = sub i32 %281, %82
  %283 = add i32 %282, %85
  %284 = add i32 %283, %86
  %285 = sub i32 %284, %29
  %286 = sub i32 %285, %92
  %287 = add i32 %286, %94
  %288 = add i32 %287, %95
  %289 = add i32 %288, %96
  %290 = add i32 %289, %97
  %291 = add i32 %290, %98
  %292 = add i32 %291, %50
  %293 = add i32 %292, %101
  %294 = sub i32 %293, %102
  %295 = sub i32 %294, %103
  %296 = sub i32 %295, %104
  %297 = add i32 %296, %106
  %298 = add i32 %297, %108
  %299 = sub i32 %298, %110
  %300 = add i32 %299, %112
  %301 = sub i32 %300, %114
  %302 = sub i32 %301, %117
  %303 = sub i32 %302, %120
  %304 = add i32 %303, %121
  %305 = sub i32 %304, %125
  %306 = sub i32 %305, %126
  %307 = add i32 %306, %127
  %308 = add i32 %307, %128
  %309 = sub i32 %308, %129
  %310 = add i32 %309, %130
  %311 = add i32 %310, %132
  %312 = add i32 %311, %133
  %313 = sub i32 %312, %134
  %314 = sub i32 %313, %135
  %315 = add i32 %314, %136
  %316 = add i32 %315, %137
  %317 = add i32 %316, %139
  %318 = add i32 %317, %141
  %319 = sub i32 %318, %14
  %320 = add i32 %319, %142
  %321 = sub i32 %320, %147
  %322 = sub i32 %321, %148
  %323 = add i32 %322, %149
  %324 = sub i32 %323, %151
  %325 = add i32 %324, %154
  %326 = add i32 %325, %155
  %327 = add i32 %326, %156
  %328 = add i32 %327, %157
  %329 = add i32 %328, %158
  %330 = add i32 %329, %159
  %331 = sub i32 %330, %161
  %332 = sub i32 %331, %162
  %333 = add i32 %332, %163
  %334 = add i32 %333, %164
  %335 = sub i32 %334, %166
  %336 = sub i32 %335, %167
  %337 = add i32 %336, %169
  %338 = add i32 %337, %115
  %339 = add i32 %338, %170
  %340 = add i32 %339, %171
  %341 = sub i32 %340, %175
  %342 = add i32 %341, %178
  %343 = sub i32 %342, %179
  %344 = sub i32 %343, %182
  %345 = sub i32 %344, %185
  %346 = sub i32 %345, %186
  %347 = add i32 %346, %187
  %348 = sub i32 %347, %192
  %349 = add i32 %348, %196
  %350 = add i32 %349, %200
  %351 = sub i32 %350, %201
  %352 = sub i32 %351, %202
  %353 = sub i32 %352, %12
  %354 = add i32 %353, %24
  %355 = add i32 %354, %31
  %356 = sub i32 %355, %38
  %357 = add i32 %356, %51
  %358 = sub i32 %357, %58
  %359 = sub i32 %358, %65
  %360 = sub i32 %359, %70
  %361 = add i32 %360, %78
  %362 = add i32 %361, %89
  %363 = add i32 %362, %91
  %364 = add i32 %363, %116
  %365 = sub i32 %364, %119
  %366 = sub i32 %365, %124
  %367 = sub i32 %366, %144
  %368 = sub i32 %367, %168
  %369 = sub i32 %368, %174
  %370 = sub i32 %369, %177
  %371 = sub i32 %370, %181
  %372 = add i32 %371, %189
  %373 = add i32 %372, %194
  %374 = sub i32 %373, %199
  %375 = sub i32 %374, %204
  %376 = add i32 %375, %207
  %377 = add i32 %376, %209
  %378 = sub i32 %377, %211
  %379 = add i32 %378, %234
  %380 = add i32 %379, %232
  %381 = add i32 %380, %229
  %382 = add i32 %381, %225
  %383 = icmp eq i32 %6, %382
  %384 = select i1 %383, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %385 = tail call i32 @puts(i8* nonnull dereferenceable(1) %384)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
