; ModuleID = '../.././c_source_file/0426_path_condition_crackme.c'
source_filename = "../.././c_source_file/0426_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = and i32 %1, %0
  %9 = or i32 %2, %1
  %10 = xor i32 %9, %8
  %11 = and i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %0
  %14 = add i32 %13, %10
  %15 = sub i32 %7, %14
  %16 = or i32 %4, %3
  %17 = xor i32 %3, -1
  %18 = and i32 %6, %3
  %19 = xor i32 %4, %3
  %20 = and i32 %4, %3
  %21 = xor i32 %20, -1
  %22 = shl i32 %6, 1
  %23 = and i32 %11, %0
  %24 = xor i32 %9, %0
  %25 = xor i32 %23, -1
  %26 = xor i32 %24, %25
  %27 = xor i32 %2, %1
  %28 = or i32 %27, %0
  %29 = and i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %30, %1
  %32 = or i32 %1, %0
  %33 = xor i32 %32, %2
  %34 = xor i32 %1, -1
  %35 = or i32 %34, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %36, %2
  %38 = xor i32 %27, %0
  %39 = or i32 %2, %0
  %40 = xor i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %8, %41
  %43 = xor i32 %0, -1
  %44 = and i32 %34, %2
  %45 = and i32 %44, %43
  %46 = or i32 %34, %2
  %47 = and i32 %46, %0
  %48 = or i32 %45, %47
  %49 = xor i32 %2, -1
  %50 = and i32 %49, %1
  %51 = xor i32 %50, %0
  %52 = xor i32 %1, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %49, %53
  %55 = xor i32 %39, -1
  %56 = xor i32 %55, %1
  %57 = shl i32 %56, 1
  %58 = or i32 %49, %36
  %59 = or i32 %29, %1
  %60 = and i32 %34, %0
  %61 = or i32 %60, %49
  %62 = xor i32 %60, -1
  %63 = xor i32 %27, -1
  %64 = and i32 %63, %62
  %65 = and i32 %39, %52
  %66 = or i32 %49, %1
  %67 = and i32 %66, %0
  %68 = and i32 %52, %41
  %69 = and i32 %40, %34
  %70 = and i32 %49, %0
  %71 = xor i32 %70, %12
  %72 = or i32 %41, %36
  %73 = xor i32 %47, -1
  %74 = xor i32 %45, %73
  %75 = or i32 %41, %1
  %76 = xor i32 %38, -1
  %77 = or i32 %23, %76
  %78 = or i32 %49, %0
  %79 = and i32 %78, %53
  %80 = and i32 %41, %34
  %81 = and i32 %66, %43
  %82 = and i32 %40, %52
  %83 = or i32 %11, %60
  %84 = or i32 %8, %49
  %85 = or i32 %12, %43
  %86 = shl i32 %85, 1
  %87 = and i32 %27, %43
  %88 = or i32 %23, %87
  %89 = or i32 %60, %2
  %90 = or i32 %9, %43
  %91 = shl i32 %90, 1
  %92 = xor i32 %66, -1
  %93 = or i32 %70, %92
  %94 = or i32 %70, %34
  %95 = xor i32 %78, -1
  %96 = or i32 %95, %1
  %97 = or i32 %40, %53
  %98 = xor i32 %8, -1
  %99 = add i32 %8, 1
  %100 = and i32 %52, %2
  %101 = or i32 %8, %2
  %102 = and i32 %35, %2
  %103 = or i32 %9, %0
  %104 = xor i32 %32, -1
  %105 = xor i32 %104, %2
  %106 = xor i32 %87, %25
  %107 = and i32 %27, %35
  %108 = or i32 %8, %63
  %109 = add i32 %27, 1
  %110 = xor i32 %70, -1
  %111 = and i32 %110, %34
  %112 = xor i32 %29, %35
  %113 = or i32 %40, %1
  %114 = xor i32 %35, %2
  %115 = xor i32 %70, %66
  %116 = and i32 %40, %62
  %117 = or i32 %66, %0
  %118 = and i32 %11, %43
  %119 = and i32 %27, %0
  %120 = xor i32 %119, -1
  %121 = xor i32 %118, %120
  %122 = or i32 %63, %0
  %123 = and i32 %30, %34
  %124 = and i32 %63, %0
  %125 = add i32 %60, 1
  %126 = and i32 %35, %41
  %127 = and i32 %52, %49
  %128 = or i32 %29, %52
  %129 = xor i32 %78, %8
  %130 = or i32 %52, %41
  %131 = or i32 %52, %95
  %132 = add i32 %29, 1
  %133 = and i32 %44, %0
  %134 = xor i32 %46, 2147483647
  %135 = or i32 %134, %0
  %136 = xor i32 %135, %133
  %137 = shl i32 %136, 1
  %138 = and i32 %39, %53
  %139 = and i32 %41, %62
  %140 = xor i32 %50, -1
  %141 = and i32 %140, %43
  %142 = or i32 %29, %36
  %143 = shl i32 %142, 1
  %144 = or i32 %60, %41
  %145 = xor i32 %62, %2
  %146 = or i32 %55, %34
  %147 = xor i32 %133, %28
  %148 = shl i32 %147, 1
  %149 = or i32 %8, %92
  %150 = or i32 %40, %34
  %151 = or i32 %40, %8
  %152 = and i32 %9, %43
  %153 = or i32 %23, %152
  %154 = or i32 %27, %43
  %155 = xor i32 %45, %154
  %156 = and i32 %35, %49
  %157 = and i32 %98, %2
  %158 = xor i32 %39, %1
  %159 = or i32 %27, %8
  %160 = and i32 %35, %63
  %161 = and i32 %49, %53
  %162 = and i32 %41, %98
  %163 = or i32 %52, %55
  %164 = and i32 %63, %43
  %165 = shl i32 %164, 2
  %166 = or i32 %27, %104
  %167 = shl i32 %166, 1
  %168 = and i32 %63, %98
  %169 = and i32 %49, %62
  %170 = and i32 %52, %110
  %171 = xor i32 %95, %1
  %172 = or i32 %140, %0
  %173 = xor i32 %140, %0
  %174 = xor i32 %46, %43
  %175 = xor i32 %174, %133
  %176 = or i32 %63, %43
  %177 = add i32 %70, 1
  %178 = or i32 %140, %43
  %179 = or i32 %41, %34
  %180 = shl i32 %179, 1
  %181 = or i32 %50, %60
  %182 = add i32 %11, 1
  %183 = xor i32 %8, %2
  %184 = xor i32 %9, -1
  %185 = shl i32 %184, 1
  %186 = or i32 %52, %2
  %187 = shl i32 %186, 1
  %188 = or i32 %29, %53
  %189 = and i32 %40, %53
  %190 = shl i32 %34, 1
  %191 = and i32 %78, %52
  %192 = or i32 %27, %36
  %193 = shl i32 %192, 1
  %194 = or i32 %184, %0
  %195 = and i32 %40, %98
  %196 = shl i32 %195, 2
  %197 = xor i32 %12, %0
  %198 = or i32 %55, %1
  %199 = and i32 %40, %32
  %200 = or i32 %104, %2
  %201 = or i32 %95, %34
  %202 = or i32 %95, %53
  %203 = and i32 %39, %34
  %204 = xor i32 %11, %0
  %205 = xor i32 %66, %0
  %206 = and i32 %32, %63
  %207 = xor i32 %184, %0
  %208 = and i32 %39, %1
  %209 = xor i32 %23, %38
  %210 = or i32 %66, %43
  %211 = and i32 %184, %43
  %212 = and i32 %50, %43
  %213 = and i32 %184, %0
  %214 = mul i32 %213, 6
  %215 = and i32 %50, %0
  %216 = and i32 %92, %43
  %217 = shl i32 %118, 3
  %218 = and i32 %92, %0
  %219 = shl i32 %218, 3
  %220 = mul i32 %23, 12
  %221 = sub i32 %157, %141
  %222 = add i32 %221, %212
  %223 = add i32 %222, %103
  %224 = mul i32 %223, 3
  %225 = add i32 %216, %215
  %226 = add i32 %225, %152
  %227 = mul i32 %226, 5
  %228 = add i32 %18, %211
  %229 = shl i32 %228, 2
  %230 = add i32 %161, %43
  %231 = add i32 %230, %100
  %232 = add i32 %231, %92
  %233 = add i32 %232, %154
  %234 = add i32 %233, %201
  %235 = add i32 %234, %198
  %236 = add i32 %235, %171
  %237 = add i32 %236, %170
  %238 = add i32 %237, %72
  %239 = add i32 %238, %20
  %240 = sub i32 %239, %16
  %241 = shl i32 %240, 1
  %242 = add i32 %8, %34
  %243 = sub i32 %242, %2
  %244 = add i32 %243, %99
  %245 = sub i32 %244, %32
  %246 = add i32 %245, %104
  %247 = add i32 %246, %60
  %248 = add i32 %247, %125
  %249 = add i32 %248, %52
  %250 = sub i32 %249, %190
  %251 = add i32 %250, %17
  %252 = sub i32 %251, %3
  %253 = add i32 %252, %33
  %254 = add i32 %253, %37
  %255 = sub i32 %254, %54
  %256 = add i32 %255, %27
  %257 = add i32 %256, %58
  %258 = add i32 %257, %61
  %259 = add i32 %258, %84
  %260 = add i32 %259, %89
  %261 = sub i32 %260, %101
  %262 = add i32 %261, %102
  %263 = sub i32 %262, %105
  %264 = add i32 %263, %109
  %265 = add i32 %264, %114
  %266 = sub i32 %265, %127
  %267 = sub i32 %266, %50
  %268 = add i32 %267, %132
  %269 = add i32 %268, %145
  %270 = add i32 %269, %156
  %271 = add i32 %270, %78
  %272 = sub i32 %271, %169
  %273 = add i32 %272, %177
  %274 = add i32 %273, %182
  %275 = sub i32 %274, %183
  %276 = sub i32 %275, %9
  %277 = add i32 %276, %200
  %278 = add i32 %277, %4
  %279 = sub i32 %278, %28
  %280 = sub i32 %279, %31
  %281 = add i32 %280, %38
  %282 = sub i32 %281, %42
  %283 = add i32 %282, %51
  %284 = sub i32 %283, %59
  %285 = add i32 %284, %64
  %286 = add i32 %285, %65
  %287 = add i32 %286, %67
  %288 = add i32 %287, %68
  %289 = sub i32 %288, %69
  %290 = add i32 %289, %71
  %291 = sub i32 %290, %75
  %292 = sub i32 %291, %79
  %293 = sub i32 %292, %80
  %294 = add i32 %293, %81
  %295 = sub i32 %294, %82
  %296 = add i32 %295, %83
  %297 = sub i32 %296, %93
  %298 = add i32 %297, %94
  %299 = sub i32 %298, %96
  %300 = add i32 %299, %97
  %301 = sub i32 %300, %107
  %302 = sub i32 %301, %108
  %303 = add i32 %302, %111
  %304 = add i32 %303, %112
  %305 = sub i32 %304, %113
  %306 = sub i32 %305, %115
  %307 = add i32 %306, %116
  %308 = add i32 %307, %117
  %309 = sub i32 %308, %122
  %310 = add i32 %309, %123
  %311 = add i32 %310, %124
  %312 = add i32 %311, %126
  %313 = add i32 %312, %128
  %314 = add i32 %313, %129
  %315 = sub i32 %314, %130
  %316 = sub i32 %315, %131
  %317 = add i32 %316, %138
  %318 = add i32 %317, %139
  %319 = sub i32 %318, %144
  %320 = add i32 %319, %146
  %321 = add i32 %320, %149
  %322 = add i32 %321, %150
  %323 = sub i32 %322, %151
  %324 = add i32 %323, %158
  %325 = sub i32 %324, %159
  %326 = add i32 %325, %160
  %327 = sub i32 %326, %162
  %328 = add i32 %327, %163
  %329 = sub i32 %328, %168
  %330 = sub i32 %329, %172
  %331 = add i32 %330, %173
  %332 = sub i32 %331, %176
  %333 = add i32 %332, %178
  %334 = sub i32 %333, %181
  %335 = sub i32 %334, %185
  %336 = sub i32 %335, %187
  %337 = sub i32 %336, %188
  %338 = add i32 %337, %189
  %339 = add i32 %338, %191
  %340 = add i32 %339, %194
  %341 = sub i32 %340, %197
  %342 = add i32 %341, %199
  %343 = sub i32 %342, %202
  %344 = sub i32 %343, %203
  %345 = add i32 %344, %204
  %346 = sub i32 %345, %205
  %347 = sub i32 %346, %206
  %348 = add i32 %347, %207
  %349 = sub i32 %348, %24
  %350 = sub i32 %349, %208
  %351 = sub i32 %350, %210
  %352 = add i32 %351, %18
  %353 = sub i32 %352, %19
  %354 = add i32 %353, %21
  %355 = sub i32 %354, %22
  %356 = add i32 %355, %7
  %357 = sub i32 %356, %26
  %358 = sub i32 %357, %48
  %359 = sub i32 %358, %57
  %360 = add i32 %359, %74
  %361 = add i32 %360, %77
  %362 = sub i32 %361, %86
  %363 = add i32 %362, %88
  %364 = sub i32 %363, %91
  %365 = add i32 %364, %106
  %366 = add i32 %365, %121
  %367 = sub i32 %366, %143
  %368 = sub i32 %367, %153
  %369 = sub i32 %368, %155
  %370 = sub i32 %369, %165
  %371 = sub i32 %370, %167
  %372 = sub i32 %371, %175
  %373 = sub i32 %372, %180
  %374 = sub i32 %373, %193
  %375 = sub i32 %374, %196
  %376 = sub i32 %375, %209
  %377 = add i32 %376, %214
  %378 = add i32 %377, %217
  %379 = sub i32 %378, %219
  %380 = add i32 %379, %220
  %381 = sub i32 %380, %148
  %382 = sub i32 %381, %137
  %383 = add i32 %382, %227
  %384 = add i32 %383, %229
  %385 = add i32 %384, %224
  %386 = add i32 %385, %241
  %387 = icmp eq i32 %15, %386
  %388 = select i1 %387, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %389 = tail call i32 @puts(i8* nonnull dereferenceable(1) %388)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
