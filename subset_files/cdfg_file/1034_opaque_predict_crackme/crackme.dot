digraph "DFG for'crackme' function" {
	Node0x1abeba0[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1abec10[shape=record, label="  %6 = add i32 %5, %0"];
	Node0x1abec80[shape=record, label="  %7 = or i32 %3, %0"];
	Node0x1abf300[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1abf370[shape=record, label="  %9 = sub i32 %6, %8"];
	Node0x1abf410[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x1abf480[shape=record, label="  %11 = and i32 %10, %1"];
	Node0x1abf4f0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1abf590[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1abf600[shape=record, label="  %14 = or i32 %10, %1"];
	Node0x1abf670[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x1abf6e0[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x1abf780[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0x1abf7f0[shape=record, label="  %18 = xor i32 %5, -1"];
	Node0x1abf890[shape=record, label="  %19 = mul i32 %18, 6"];
	Node0x1abf900[shape=record, label="  %20 = xor i32 %14, -1"];
	Node0x1abf9a0[shape=record, label="  %21 = mul i32 %20, 9"];
	Node0x1abfa10[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x1abfa80[shape=record, label="  %23 = xor i32 %3, %0"];
	Node0x1abfaf0[shape=record, label="  %24 = xor i32 %0, -1"];
	Node0x1abfb60[shape=record, label="  %25 = or i32 %24, %3"];
	Node0x1abfbd0[shape=record, label="  %26 = xor i32 %8, -2"];
	Node0x1abfc40[shape=record, label="  %27 = shl i32 %25, 1"];
	Node0x1abfcb0[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x1abfd20[shape=record, label="  %29 = and i32 %24, %3"];
	Node0x1abfd90[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x1abfe00[shape=record, label="  %31 = shl i32 %23, 1"];
	Node0x1abfea0[shape=record, label="  %32 = shl i32 %1, 2"];
	Node0x1ac0150[shape=record, label="  %33 = add i32 %1, 3"];
	Node0x1ac01c0[shape=record, label="  %34 = sub i32 %33, %2"];
	Node0x1ac0230[shape=record, label="  %35 = add i32 %34, %14"];
	Node0x1ac02a0[shape=record, label="  %36 = add i32 %35, %17"];
	Node0x1ac0310[shape=record, label="  %37 = add i32 %36, %19"];
	Node0x1ac0380[shape=record, label="  %38 = add i32 %37, %21"];
	Node0x1ac03f0[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x1ac0460[shape=record, label="  %40 = sub i32 %39, %25"];
	Node0x1ac04d0[shape=record, label="  %41 = sub i32 %40, %13"];
	Node0x1ac0540[shape=record, label="  %42 = sub i32 %41, %30"];
	Node0x1ac05b0[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x1ac0620[shape=record, label="  %44 = add i32 %43, %32"];
	Node0x1ac0690[shape=record, label="  %45 = add i32 %44, %26"];
	Node0x1ac0700[shape=record, label="  %46 = sub i32 %45, %28"];
	Node0x1ac0770[shape=record, label="  %47 = icmp eq i32 %9, %46"];
	Node0x1a5f268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ac0c10[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0x1ac0c60[shape=record, label="  ret void"];
	Node0x1abeba0 -> Node0x1abec10;
	Node0x1abec10 -> Node0x1abec80;
	Node0x1abec80 -> Node0x1abf300;
	Node0x1abf300 -> Node0x1abf370;
	Node0x1abf370 -> Node0x1abf410;
	Node0x1abf410 -> Node0x1abf480;
	Node0x1abf480 -> Node0x1abf4f0;
	Node0x1abf4f0 -> Node0x1abf590;
	Node0x1abf590 -> Node0x1abf600;
	Node0x1abf600 -> Node0x1abf670;
	Node0x1abf670 -> Node0x1abf6e0;
	Node0x1abf6e0 -> Node0x1abf780;
	Node0x1abf780 -> Node0x1abf7f0;
	Node0x1abf7f0 -> Node0x1abf890;
	Node0x1abf890 -> Node0x1abf900;
	Node0x1abf900 -> Node0x1abf9a0;
	Node0x1abf9a0 -> Node0x1abfa10;
	Node0x1abfa10 -> Node0x1abfa80;
	Node0x1abfa80 -> Node0x1abfaf0;
	Node0x1abfaf0 -> Node0x1abfb60;
	Node0x1abfb60 -> Node0x1abfbd0;
	Node0x1abfbd0 -> Node0x1abfc40;
	Node0x1abfc40 -> Node0x1abfcb0;
	Node0x1abfcb0 -> Node0x1abfd20;
	Node0x1abfd20 -> Node0x1abfd90;
	Node0x1abfd90 -> Node0x1abfe00;
	Node0x1abfe00 -> Node0x1abfea0;
	Node0x1abfea0 -> Node0x1ac0150;
	Node0x1ac0150 -> Node0x1ac01c0;
	Node0x1ac01c0 -> Node0x1ac0230;
	Node0x1ac0230 -> Node0x1ac02a0;
	Node0x1ac02a0 -> Node0x1ac0310;
	Node0x1ac0310 -> Node0x1ac0380;
	Node0x1ac0380 -> Node0x1ac03f0;
	Node0x1ac03f0 -> Node0x1ac0460;
	Node0x1ac0460 -> Node0x1ac04d0;
	Node0x1ac04d0 -> Node0x1ac0540;
	Node0x1ac0540 -> Node0x1ac05b0;
	Node0x1ac05b0 -> Node0x1ac0620;
	Node0x1ac0620 -> Node0x1ac0690;
	Node0x1ac0690 -> Node0x1ac0700;
	Node0x1ac0700 -> Node0x1ac0770;
	Node0x1ac0770 -> Node0x1a5f268;
	Node0x1a5f268 -> Node0x1ac0c10;
	Node0x1ac0c10 -> Node0x1ac0c60;
edge [color=red]
	Node0x1abeba0 -> Node0x1abec10;
	Node0x1abec80 -> Node0x1abf300;
	Node0x1abec10 -> Node0x1abf370;
	Node0x1abf300 -> Node0x1abf370;
	Node0x1abf410 -> Node0x1abf480;
	Node0x1abf480 -> Node0x1abf4f0;
	Node0x1abf4f0 -> Node0x1abf590;
	Node0x1abf410 -> Node0x1abf600;
	Node0x1abf670 -> Node0x1abf6e0;
	Node0x1abf6e0 -> Node0x1abf780;
	Node0x1abeba0 -> Node0x1abf7f0;
	Node0x1abf7f0 -> Node0x1abf890;
	Node0x1abf600 -> Node0x1abf900;
	Node0x1abf900 -> Node0x1abf9a0;
	Node0x1abfaf0 -> Node0x1abfb60;
	Node0x1abf300 -> Node0x1abfbd0;
	Node0x1abfb60 -> Node0x1abfc40;
	Node0x1abfc40 -> Node0x1abfcb0;
	Node0x1abfaf0 -> Node0x1abfd20;
	Node0x1abfd20 -> Node0x1abfd90;
	Node0x1abfa80 -> Node0x1abfe00;
	Node0x1ac0150 -> Node0x1ac01c0;
	Node0x1ac01c0 -> Node0x1ac0230;
	Node0x1abf600 -> Node0x1ac0230;
	Node0x1ac0230 -> Node0x1ac02a0;
	Node0x1abf780 -> Node0x1ac02a0;
	Node0x1ac02a0 -> Node0x1ac0310;
	Node0x1abf890 -> Node0x1ac0310;
	Node0x1ac0310 -> Node0x1ac0380;
	Node0x1abf9a0 -> Node0x1ac0380;
	Node0x1ac0380 -> Node0x1ac03f0;
	Node0x1abfa10 -> Node0x1ac03f0;
	Node0x1ac03f0 -> Node0x1ac0460;
	Node0x1abfb60 -> Node0x1ac0460;
	Node0x1ac0460 -> Node0x1ac04d0;
	Node0x1abf590 -> Node0x1ac04d0;
	Node0x1ac04d0 -> Node0x1ac0540;
	Node0x1abfd90 -> Node0x1ac0540;
	Node0x1ac0540 -> Node0x1ac05b0;
	Node0x1abfe00 -> Node0x1ac05b0;
	Node0x1ac05b0 -> Node0x1ac0620;
	Node0x1abfea0 -> Node0x1ac0620;
	Node0x1ac0620 -> Node0x1ac0690;
	Node0x1abfbd0 -> Node0x1ac0690;
	Node0x1ac0690 -> Node0x1ac0700;
	Node0x1abfcb0 -> Node0x1ac0700;
	Node0x1abf370 -> Node0x1ac0770;
	Node0x1ac0700 -> Node0x1ac0770;
	Node0x1ac0770 -> Node0x1a5f268;
	Node0x1a5f268 -> Node0x1ac0c10;
}
