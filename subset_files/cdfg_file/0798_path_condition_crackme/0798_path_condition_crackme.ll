; ModuleID = '../.././c_source_file/0798_path_condition_crackme.c'
source_filename = "../.././c_source_file/0798_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, -1
  %7 = and i32 %6, %1
  %8 = or i32 %7, %5
  %9 = shl i32 %8, 1
  %10 = or i32 %1, %0
  %11 = and i32 %10, %6
  %12 = or i32 %2, %1
  %13 = or i32 %12, %0
  %14 = xor i32 %2, %0
  %15 = or i32 %14, %1
  %16 = and i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = add i32 %16, 1
  %19 = xor i32 %0, -1
  %20 = and i32 %4, %2
  %21 = and i32 %20, %19
  %22 = or i32 %4, %2
  %23 = and i32 %22, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %21, %24
  %26 = and i32 %1, %0
  %27 = xor i32 %2, %1
  %28 = or i32 %27, %26
  %29 = or i32 %26, %2
  %30 = and i32 %2, %1
  %31 = and i32 %30, %19
  %32 = and i32 %12, %0
  %33 = xor i32 %31, -1
  %34 = xor i32 %32, %33
  %35 = xor i32 %1, %0
  %36 = and i32 %35, %6
  %37 = xor i32 %14, -1
  %38 = and i32 %35, %37
  %39 = and i32 %6, %0
  %40 = or i32 %6, %1
  %41 = xor i32 %39, %40
  %42 = or i32 %5, %2
  %43 = xor i32 %10, %2
  %44 = shl i32 %43, 1
  %45 = and i32 %27, %0
  %46 = and i32 %20, %0
  %47 = xor i32 %22, %0
  %48 = or i32 %46, %47
  %49 = or i32 %6, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %4
  %52 = xor i32 %40, -1
  %53 = or i32 %52, %19
  %54 = or i32 %37, %1
  %55 = xor i32 %35, -1
  %56 = and i32 %17, %55
  %57 = or i32 %2, %0
  %58 = and i32 %57, %1
  %59 = xor i32 %10, -1
  %60 = or i32 %37, %59
  %61 = xor i32 %27, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %46, %62
  %64 = and i32 %30, %0
  %65 = and i32 %12, %19
  %66 = xor i32 %64, -1
  %67 = xor i32 %65, %66
  %68 = xor i32 %22, -1
  %69 = or i32 %68, %0
  %70 = xor i32 %46, %69
  %71 = xor i32 %5, -1
  %72 = and i32 %37, %71
  %73 = shl i32 %72, 1
  %74 = xor i32 %26, -1
  %75 = xor i32 %27, -1
  %76 = and i32 %75, %74
  %77 = xor i32 %30, -1
  %78 = xor i32 %30, %0
  %79 = xor i32 %7, -1
  %80 = xor i32 %79, %0
  %81 = shl i32 %80, 1
  %82 = or i32 %26, %6
  %83 = xor i32 %16, %10
  %84 = or i32 %39, %55
  %85 = xor i32 %75, %0
  %86 = or i32 %7, %19
  %87 = xor i32 %40, %0
  %88 = or i32 %26, %50
  %89 = shl i32 %88, 1
  %90 = xor i32 %12, -1
  %91 = or i32 %4, %0
  %92 = and i32 %91, %6
  %93 = or i32 %50, %55
  %94 = xor i32 %91, -1
  %95 = xor i32 %94, %2
  %96 = and i32 %49, %4
  %97 = or i32 %64, %62
  %98 = xor i32 %40, %26
  %99 = or i32 %16, %55
  %100 = and i32 %27, %71
  %101 = or i32 %30, %5
  %102 = xor i32 %57, -1
  %103 = or i32 %26, %102
  %104 = xor i32 %26, %2
  %105 = or i32 %27, %94
  %106 = xor i32 %5, %2
  %107 = and i32 %40, %0
  %108 = or i32 %31, %45
  %109 = or i32 %46, %61
  %110 = and i32 %10, %75
  %111 = add i32 %5, 1
  %112 = and i32 %14, %1
  %113 = or i32 %21, %23
  %114 = or i32 %12, %19
  %115 = and i32 %37, %1
  %116 = and i32 %14, %71
  %117 = or i32 %27, %59
  %118 = and i32 %27, %19
  %119 = xor i32 %118, 2147483647
  %120 = xor i32 %119, %64
  %121 = or i32 %35, %37
  %122 = or i32 %79, %0
  %123 = or i32 %27, %19
  %124 = or i32 %64, %118
  %125 = or i32 %16, %90
  %126 = or i32 %14, %35
  %127 = or i32 %16, %7
  %128 = or i32 %14, %26
  %129 = add i32 %2, 1
  %130 = or i32 %39, %4
  %131 = and i32 %40, %19
  %132 = xor i32 %39, %77
  %133 = or i32 %14, %94
  %134 = and i32 %57, %35
  %135 = and i32 %27, %91
  %136 = shl i32 %135, 1
  %137 = xor i32 %39, -1
  %138 = xor i32 %137, %1
  %139 = and i32 %49, %55
  %140 = xor i32 %102, %1
  %141 = or i32 %79, %19
  %142 = xor i32 %16, %79
  %143 = or i32 %14, %5
  %144 = or i32 %40, %0
  %145 = xor i32 %49, %1
  %146 = xor i32 %39, %1
  %147 = or i32 %7, %0
  %148 = or i32 %35, %6
  %149 = shl i32 %16, 2
  %150 = and i32 %14, %55
  %151 = or i32 %77, %19
  %152 = shl i32 %151, 1
  %153 = add i32 %49, 1
  %154 = or i32 %102, %1
  %155 = xor i32 %7, %0
  %156 = and i32 %35, %137
  %157 = xor i32 %71, %2
  %158 = shl i32 %157, 1
  %159 = and i32 %137, %55
  %160 = and i32 %14, %91
  %161 = add i32 %57, 1
  %162 = xor i32 %64, %61
  %163 = or i32 %14, %55
  %164 = and i32 %75, %71
  %165 = or i32 %75, %19
  %166 = add i32 %91, 1
  %167 = and i32 %17, %1
  %168 = or i32 %35, %102
  %169 = or i32 %75, %59
  %170 = or i32 %16, %35
  %171 = and i32 %27, %74
  %172 = or i32 %39, %1
  %173 = or i32 %64, %65
  %174 = or i32 %6, %94
  %175 = or i32 %40, %19
  %176 = xor i32 %12, %19
  %177 = xor i32 %176, %64
  %178 = and i32 %37, %55
  %179 = xor i32 %45, %33
  %180 = or i32 %35, %2
  %181 = and i32 %137, %1
  %182 = and i32 %17, %4
  %183 = or i32 %75, %94
  %184 = or i32 %6, %55
  %185 = and i32 %10, %2
  %186 = or i32 %75, %0
  %187 = or i32 %59, %2
  %188 = and i32 %75, %19
  %189 = shl i32 %188, 1
  %190 = and i32 %35, %17
  %191 = shl i32 %30, 1
  %192 = add i32 %14, 1
  %193 = and i32 %6, %74
  %194 = xor i32 %21, %123
  %195 = xor i32 %74, %2
  %196 = or i32 %6, %59
  %197 = xor i32 %16, %12
  %198 = and i32 %6, %55
  %199 = xor i32 %57, %1
  %200 = shl i32 %199, 1
  %201 = and i32 %79, %19
  %202 = shl i32 %91, 1
  %203 = and i32 %57, %4
  %204 = or i32 %16, %59
  %205 = xor i32 %52, %0
  %206 = or i32 %26, %37
  %207 = and i32 %37, %4
  %208 = xor i32 %59, %2
  %209 = or i32 %102, %4
  %210 = shl i32 %209, 1
  %211 = xor i32 %57, %26
  %212 = xor i32 %90, %0
  %213 = and i32 %49, %35
  %214 = or i32 %16, %4
  %215 = and i32 %27, %10
  %216 = or i32 %94, %2
  %217 = or i32 %37, %4
  %218 = xor i32 %16, %1
  %219 = and i32 %91, %75
  %220 = and i32 %90, %19
  %221 = mul i32 %220, -17
  %222 = and i32 %7, %19
  %223 = and i32 %90, %0
  %224 = and i32 %7, %0
  %225 = and i32 %52, %19
  %226 = mul i32 %225, -15
  %227 = and i32 %52, %0
  %228 = mul i32 %227, -6
  %229 = mul i32 %64, -20
  %230 = add i32 %29, %90
  %231 = add i32 %230, %93
  %232 = shl i32 %231, 2
  %233 = add i32 %181, %129
  %234 = add i32 %233, %219
  %235 = mul i32 %234, 5
  %236 = or i32 %31, %223
  %237 = mul i32 %236, -14
  %238 = sub i32 %222, %224
  %239 = mul i32 %238, 7
  %240 = sub i32 %196, %183
  %241 = mul i32 %240, 3
  %242 = add i32 %26, -1
  %243 = add i32 %242, %79
  %244 = add i32 %243, %180
  %245 = add i32 %244, %206
  %246 = add i32 %245, %178
  %247 = add i32 %246, %163
  %248 = add i32 %247, %159
  %249 = add i32 %248, %141
  %250 = add i32 %249, %138
  %251 = add i32 %250, %134
  %252 = add i32 %251, %133
  %253 = add i32 %252, %127
  %254 = add i32 %253, %107
  %255 = add i32 %254, %76
  %256 = add i32 %255, %41
  %257 = add i32 %256, %15
  %258 = add i32 %257, %194
  %259 = add i32 %258, %120
  %260 = shl i32 %259, 1
  %261 = sub i32 1, %10
  %262 = add i32 %261, %111
  %263 = add i32 %262, %166
  %264 = sub i32 %263, %5
  %265 = add i32 %264, %55
  %266 = add i32 %265, %11
  %267 = add i32 %266, %18
  %268 = sub i32 %267, %36
  %269 = sub i32 %268, %42
  %270 = sub i32 %269, %12
  %271 = add i32 %270, %77
  %272 = sub i32 %271, %82
  %273 = add i32 %272, %92
  %274 = sub i32 %273, %95
  %275 = sub i32 %274, %27
  %276 = sub i32 %275, %104
  %277 = add i32 %276, %106
  %278 = add i32 %277, %14
  %279 = add i32 %278, %148
  %280 = add i32 %279, %153
  %281 = add i32 %280, %161
  %282 = sub i32 %281, %174
  %283 = add i32 %282, %49
  %284 = sub i32 %283, %184
  %285 = sub i32 %284, %185
  %286 = sub i32 %285, %187
  %287 = add i32 %286, %192
  %288 = sub i32 %287, %193
  %289 = sub i32 %288, %195
  %290 = sub i32 %289, %198
  %291 = sub i32 %290, %202
  %292 = add i32 %291, %208
  %293 = sub i32 %292, %7
  %294 = sub i32 %293, %216
  %295 = add i32 %294, %13
  %296 = add i32 %295, %28
  %297 = add i32 %296, %38
  %298 = sub i32 %297, %44
  %299 = add i32 %298, %45
  %300 = sub i32 %299, %51
  %301 = sub i32 %300, %53
  %302 = sub i32 %301, %54
  %303 = add i32 %302, %56
  %304 = sub i32 %303, %58
  %305 = add i32 %304, %60
  %306 = sub i32 %305, %78
  %307 = sub i32 %306, %83
  %308 = sub i32 %307, %84
  %309 = sub i32 %308, %85
  %310 = add i32 %309, %86
  %311 = sub i32 %310, %87
  %312 = add i32 %311, %96
  %313 = sub i32 %312, %98
  %314 = add i32 %313, %61
  %315 = sub i32 %314, %99
  %316 = add i32 %315, %100
  %317 = add i32 %316, %101
  %318 = add i32 %317, %103
  %319 = add i32 %318, %105
  %320 = sub i32 %319, %110
  %321 = sub i32 %320, %112
  %322 = sub i32 %321, %114
  %323 = sub i32 %322, %115
  %324 = add i32 %323, %116
  %325 = sub i32 %324, %117
  %326 = add i32 %325, %121
  %327 = add i32 %326, %122
  %328 = sub i32 %327, %123
  %329 = sub i32 %328, %125
  %330 = add i32 %329, %126
  %331 = add i32 %330, %128
  %332 = add i32 %331, %130
  %333 = sub i32 %332, %131
  %334 = add i32 %333, %132
  %335 = add i32 %334, %139
  %336 = sub i32 %335, %140
  %337 = add i32 %336, %142
  %338 = add i32 %337, %143
  %339 = add i32 %338, %144
  %340 = add i32 %339, %145
  %341 = sub i32 %340, %146
  %342 = sub i32 %341, %147
  %343 = sub i32 %342, %149
  %344 = sub i32 %343, %150
  %345 = sub i32 %344, %154
  %346 = sub i32 %345, %155
  %347 = add i32 %346, %156
  %348 = sub i32 %347, %158
  %349 = sub i32 %348, %160
  %350 = sub i32 %349, %164
  %351 = add i32 %350, %165
  %352 = sub i32 %351, %167
  %353 = add i32 %352, %168
  %354 = add i32 %353, %169
  %355 = sub i32 %354, %170
  %356 = add i32 %355, %171
  %357 = add i32 %356, %172
  %358 = add i32 %357, %175
  %359 = add i32 %358, %182
  %360 = sub i32 %359, %186
  %361 = sub i32 %360, %190
  %362 = sub i32 %361, %191
  %363 = sub i32 %362, %197
  %364 = sub i32 %363, %201
  %365 = sub i32 %364, %203
  %366 = add i32 %365, %204
  %367 = sub i32 %366, %32
  %368 = sub i32 %367, %205
  %369 = add i32 %368, %207
  %370 = add i32 %369, %211
  %371 = add i32 %370, %212
  %372 = add i32 %371, %213
  %373 = add i32 %372, %214
  %374 = add i32 %373, %215
  %375 = add i32 %374, %217
  %376 = sub i32 %375, %218
  %377 = add i32 %376, %25
  %378 = add i32 %377, %34
  %379 = add i32 %378, %48
  %380 = sub i32 %379, %63
  %381 = sub i32 %380, %67
  %382 = add i32 %381, %70
  %383 = sub i32 %382, %73
  %384 = sub i32 %383, %81
  %385 = sub i32 %384, %89
  %386 = add i32 %385, %97
  %387 = add i32 %386, %108
  %388 = sub i32 %387, %109
  %389 = sub i32 %388, %113
  %390 = sub i32 %389, %124
  %391 = sub i32 %390, %136
  %392 = sub i32 %391, %152
  %393 = sub i32 %392, %162
  %394 = add i32 %393, %173
  %395 = sub i32 %394, %177
  %396 = sub i32 %395, %179
  %397 = sub i32 %396, %189
  %398 = sub i32 %397, %200
  %399 = sub i32 %398, %210
  %400 = add i32 %399, %221
  %401 = add i32 %400, %226
  %402 = add i32 %401, %228
  %403 = add i32 %402, %229
  %404 = add i32 %403, %237
  %405 = add i32 %404, %239
  %406 = add i32 %405, %241
  %407 = add i32 %406, %232
  %408 = add i32 %407, %235
  %409 = add i32 %408, %260
  %410 = icmp eq i32 %9, %409
  %411 = select i1 %410, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %412 = tail call i32 @puts(i8* nonnull dereferenceable(1) %411)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
