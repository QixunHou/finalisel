; ModuleID = '../.././c_source_file/0349_path_condition_crackme.c'
source_filename = "../.././c_source_file/0349_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, -1
  %6 = or i32 %5, %0
  %7 = and i32 %6, %4
  %8 = and i32 %2, %1
  %9 = and i32 %8, %0
  %10 = xor i32 %0, -1
  %11 = xor i32 %2, %1
  %12 = and i32 %11, %10
  %13 = or i32 %9, %12
  %14 = and i32 %4, %0
  %15 = and i32 %5, %1
  %16 = xor i32 %15, -1
  %17 = xor i32 %14, %16
  %18 = xor i32 %1, %0
  %19 = or i32 %18, %5
  %20 = and i32 %2, %0
  %21 = or i32 %20, %1
  %22 = shl i32 %21, 1
  %23 = xor i32 %18, -1
  %24 = or i32 %5, %23
  %25 = and i32 %4, %2
  %26 = and i32 %25, %0
  %27 = xor i32 %11, %0
  %28 = or i32 %26, %27
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %23
  %32 = and i32 %1, %0
  %33 = xor i32 %6, %32
  %34 = shl i32 %33, 2
  %35 = or i32 %4, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %20, %36
  %38 = xor i32 %14, -1
  %39 = add i32 %14, 1
  %40 = or i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %4
  %43 = xor i32 %8, -1
  %44 = and i32 %43, %10
  %45 = or i32 %11, %0
  %46 = shl i32 %45, 1
  %47 = or i32 %2, %1
  %48 = or i32 %47, %0
  %49 = or i32 %1, %0
  %50 = xor i32 %11, -1
  %51 = and i32 %49, %50
  %52 = shl i32 %51, 1
  %53 = and i32 %25, %10
  %54 = or i32 %11, %10
  %55 = xor i32 %53, %54
  %56 = xor i32 %14, %43
  %57 = shl i32 %56, 1
  %58 = xor i32 %26, %45
  %59 = or i32 %5, %1
  %60 = and i32 %59, %10
  %61 = add i32 %11, 1
  %62 = xor i32 %27, -1
  %63 = or i32 %9, %62
  %64 = or i32 %47, %10
  %65 = and i32 %11, %0
  %66 = xor i32 %49, -1
  %67 = or i32 %11, %66
  %68 = xor i32 %15, %0
  %69 = and i32 %5, %0
  %70 = xor i32 %69, -1
  %71 = xor i32 %70, %1
  %72 = or i32 %4, %2
  %73 = and i32 %72, %0
  %74 = or i32 %53, %73
  %75 = xor i32 %47, -1
  %76 = or i32 %32, %75
  %77 = xor i32 %6, -1
  %78 = or i32 %32, %77
  %79 = shl i32 %78, 1
  %80 = xor i32 %59, -1
  %81 = or i32 %69, %80
  %82 = shl i32 %81, 1
  %83 = and i32 %47, %0
  %84 = or i32 %30, %23
  %85 = or i32 %32, %41
  %86 = and i32 %50, %0
  %87 = or i32 %69, %1
  %88 = shl i32 %87, 2
  %89 = or i32 %30, %66
  %90 = xor i32 %20, -1
  %91 = and i32 %90, %4
  %92 = shl i32 %91, 1
  %93 = or i32 %29, %36
  %94 = and i32 %18, %90
  %95 = or i32 %30, %36
  %96 = shl i32 %49, 1
  %97 = or i32 %14, %30
  %98 = xor i32 %43, %0
  %99 = shl i32 %98, 1
  %100 = or i32 %32, %80
  %101 = or i32 %80, %10
  %102 = and i32 %35, %5
  %103 = xor i32 %47, %0
  %104 = xor i32 %9, -1
  %105 = xor i32 %103, %104
  %106 = or i32 %29, %14
  %107 = or i32 %50, %10
  %108 = or i32 %20, %15
  %109 = and i32 %49, %30
  %110 = xor i32 %20, %49
  %111 = shl i32 %110, 2
  %112 = and i32 %29, %18
  %113 = and i32 %90, %23
  %114 = or i32 %59, %0
  %115 = xor i32 %32, -1
  %116 = and i32 %30, %115
  %117 = and i32 %70, %23
  %118 = or i32 %16, %10
  %119 = or i32 %32, %50
  %120 = and i32 %59, %0
  %121 = xor i32 %9, %27
  %122 = xor i32 %32, %2
  %123 = and i32 %40, %4
  %124 = add i32 %40, 1
  %125 = and i32 %47, %10
  %126 = xor i32 %125, %104
  %127 = or i32 %20, %66
  %128 = or i32 %69, %8
  %129 = xor i32 %45, -1
  %130 = or i32 %26, %129
  %131 = add i32 %20, 1
  %132 = and i32 %5, %23
  %133 = and i32 %40, %1
  %134 = or i32 %66, %2
  %135 = and i32 %8, %10
  %136 = xor i32 %135, -1
  %137 = xor i32 %83, %136
  %138 = or i32 %18, %77
  %139 = and i32 %49, %5
  %140 = and i32 %35, %50
  %141 = xor i32 %115, %2
  %142 = shl i32 %141, 1
  %143 = or i32 %29, %4
  %144 = or i32 %50, %36
  %145 = xor i32 %54, -1
  %146 = or i32 %53, %145
  %147 = and i32 %29, %4
  %148 = and i32 %43, %0
  %149 = or i32 %15, %10
  %150 = or i32 %75, %10
  %151 = xor i32 %12, %104
  %152 = and i32 %11, %115
  %153 = shl i32 %152, 1
  %154 = and i32 %18, %2
  %155 = xor i32 %72, %0
  %156 = or i32 %26, %155
  %157 = or i32 %8, %10
  %158 = or i32 %135, %65
  %159 = or i32 %11, %32
  %160 = or i32 %43, %10
  %161 = and i32 %30, %1
  %162 = xor i32 %41, %1
  %163 = or i32 %18, %2
  %164 = shl i32 %163, 1
  %165 = xor i32 %65, %136
  %166 = and i32 %11, %49
  %167 = or i32 %15, %14
  %168 = or i32 %32, %30
  %169 = or i32 %32, %5
  %170 = shl i32 %169, 1
  %171 = or i32 %5, %66
  %172 = xor i32 %8, %0
  %173 = and i32 %40, %23
  %174 = xor i32 %20, %1
  %175 = xor i32 %16, %0
  %176 = and i32 %70, %1
  %177 = and i32 %29, %49
  %178 = xor i32 %69, %1
  %179 = and i32 %50, %10
  %180 = or i32 %29, %1
  %181 = or i32 %16, %0
  %182 = xor i32 %73, 2147483647
  %183 = xor i32 %182, %53
  %184 = shl i32 %183, 1
  %185 = or i32 %14, %50
  %186 = or i32 %50, %0
  %187 = and i32 %72, %10
  %188 = xor i32 %26, 2147483647
  %189 = xor i32 %188, %187
  %190 = shl i32 %189, 1
  %191 = add i32 %32, 1
  %192 = or i32 %20, %18
  %193 = and i32 %6, %23
  %194 = xor i32 %188, %155
  %195 = xor i32 %75, %0
  %196 = xor i32 %80, %0
  %197 = and i32 %16, %0
  %198 = and i32 %18, %70
  %199 = shl i32 %198, 2
  %200 = or i32 %69, %23
  %201 = xor i32 %50, %0
  %202 = or i32 %8, %0
  %203 = and i32 %6, %1
  %204 = xor i32 %14, %2
  %205 = and i32 %49, %2
  %206 = or i32 %26, %187
  %207 = and i32 %5, %115
  %208 = or i32 %77, %4
  %209 = xor i32 %40, %32
  %210 = and i32 %11, %38
  %211 = or i32 %69, %4
  %212 = or i32 %41, %1
  %213 = or i32 %23, %2
  %214 = and i32 %115, %2
  %215 = and i32 %30, %4
  %216 = or i32 %77, %1
  %217 = xor i32 %49, %2
  %218 = and i32 %18, %30
  %219 = or i32 %29, %23
  %220 = and i32 %5, %38
  %221 = or i32 %20, %4
  %222 = shl i32 %221, 1
  %223 = or i32 %20, %23
  %224 = shl i32 %223, 1
  %225 = or i32 %29, %66
  %226 = and i32 %35, %2
  %227 = or i32 %30, %4
  %228 = or i32 %75, %0
  %229 = and i32 %29, %115
  %230 = xor i32 %38, %2
  %231 = and i32 %29, %38
  %232 = add i32 %2, 1
  %233 = xor i32 %59, %32
  %234 = or i32 %18, %41
  %235 = and i32 %29, %23
  %236 = or i32 %41, %23
  %237 = and i32 %18, %5
  %238 = or i32 %32, %2
  %239 = or i32 %36, %2
  %240 = shl i32 %239, 1
  %241 = and i32 %6, %18
  %242 = or i32 %11, %36
  %243 = or i32 %11, %14
  %244 = add i32 %6, 1
  %245 = or i32 %20, %75
  %246 = and i32 %11, %35
  %247 = xor i32 %36, %2
  %248 = or i32 %59, %10
  %249 = and i32 %40, %18
  %250 = or i32 %15, %0
  %251 = and i32 %29, %35
  %252 = and i32 %70, %4
  %253 = xor i32 %66, %2
  %254 = xor i32 %20, %35
  %255 = and i32 %50, %115
  %256 = and i32 %90, %1
  %257 = or i32 %18, %30
  %258 = xor i32 %90, %1
  %259 = or i32 %77, %23
  %260 = xor i32 %26, %62
  %261 = xor i32 %20, %16
  %262 = or i32 %14, %2
  %263 = xor i32 %69, %59
  %264 = or i32 %30, %1
  %265 = or i32 %50, %66
  %266 = or i32 %29, %32
  %267 = and i32 %29, %1
  %268 = shl i32 %267, 1
  %269 = or i32 %5, %36
  %270 = or i32 %8, %14
  %271 = and i32 %23, %2
  %272 = or i32 %43, %0
  %273 = and i32 %50, %38
  %274 = xor i32 %47, %32
  %275 = xor i32 %59, %0
  %276 = or i32 %135, %83
  %277 = and i32 %38, %2
  %278 = and i32 %16, %10
  %279 = and i32 %35, %30
  %280 = or i32 %9, %125
  %281 = xor i32 %40, %1
  %282 = or i32 %80, %0
  %283 = xor i32 %35, %2
  %284 = or i32 %29, %18
  %285 = add i32 %47, 1
  %286 = and i32 %30, %38
  %287 = xor i32 %6, %1
  %288 = add i32 %18, 1
  %289 = xor i32 %20, %47
  %290 = or i32 %14, %5
  %291 = or i32 %69, %18
  %292 = add i32 %0, 1
  %293 = xor i32 %69, %43
  %294 = shl i32 %293, 1
  %295 = and i32 %75, %10
  %296 = mul i32 %295, 19
  %297 = and i32 %15, %10
  %298 = and i32 %75, %0
  %299 = and i32 %15, %0
  %300 = mul i32 %299, -6
  %301 = and i32 %80, %10
  %302 = shl i32 %301, 2
  %303 = mul i32 %135, 11
  %304 = and i32 %80, %0
  %305 = mul i32 %304, 13
  %306 = add i32 %243, %4
  %307 = add i32 %306, %298
  %308 = add i32 %307, %200
  %309 = sub i32 %308, %176
  %310 = add i32 %309, %119
  %311 = sub i32 %310, %117
  %312 = mul i32 %311, 3
  %313 = sub i32 %226, %290
  %314 = sub i32 %313, %177
  %315 = sub i32 %314, %227
  %316 = add i32 %315, %112
  %317 = add i32 %316, %68
  %318 = mul i32 %317, 5
  %319 = sub i32 -2, %35
  %320 = add i32 %319, %15
  %321 = add i32 %320, %171
  %322 = add i32 %321, %9
  %323 = add i32 %322, %297
  %324 = add i32 %323, %291
  %325 = add i32 %324, %274
  %326 = add i32 %325, %264
  %327 = add i32 %326, %256
  %328 = add i32 %327, %251
  %329 = add i32 %328, %250
  %330 = add i32 %329, %236
  %331 = add i32 %330, %212
  %332 = add i32 %331, %140
  %333 = add i32 %332, %118
  %334 = add i32 %333, %54
  %335 = add i32 %334, %93
  %336 = add i32 %335, %84
  %337 = add i32 %336, %37
  %338 = add i32 %337, %28
  %339 = sub i32 %338, %13
  %340 = add i32 %339, %194
  %341 = shl i32 %340, 1
  %342 = add i32 %292, %0
  %343 = sub i32 %342, %1
  %344 = sub i32 %343, %2
  %345 = add i32 %344, %39
  %346 = add i32 %345, %18
  %347 = sub i32 %346, %14
  %348 = add i32 %347, %35
  %349 = add i32 %348, %191
  %350 = add i32 %349, %66
  %351 = add i32 %350, %232
  %352 = add i32 %351, %32
  %353 = add i32 %352, %288
  %354 = sub i32 %353, %19
  %355 = add i32 %354, %24
  %356 = add i32 %355, %61
  %357 = add i32 %356, %11
  %358 = sub i32 %357, %96
  %359 = add i32 %358, %20
  %360 = sub i32 %359, %102
  %361 = sub i32 %360, %6
  %362 = sub i32 %361, %122
  %363 = add i32 %362, %124
  %364 = add i32 %363, %131
  %365 = add i32 %364, %132
  %366 = sub i32 %365, %134
  %367 = sub i32 %366, %139
  %368 = sub i32 %367, %47
  %369 = sub i32 %368, %154
  %370 = add i32 %369, %16
  %371 = sub i32 %370, %59
  %372 = add i32 %371, %40
  %373 = add i32 %372, %69
  %374 = add i32 %373, %204
  %375 = sub i32 %374, %205
  %376 = sub i32 %375, %207
  %377 = sub i32 %376, %213
  %378 = add i32 %377, %214
  %379 = sub i32 %378, %217
  %380 = add i32 %379, %220
  %381 = add i32 %380, %230
  %382 = add i32 %381, %237
  %383 = add i32 %382, %238
  %384 = add i32 %383, %244
  %385 = add i32 %384, %247
  %386 = sub i32 %385, %253
  %387 = sub i32 %386, %262
  %388 = add i32 %387, %269
  %389 = sub i32 %388, %271
  %390 = sub i32 %389, %277
  %391 = add i32 %390, %283
  %392 = add i32 %391, %285
  %393 = add i32 %392, %17
  %394 = add i32 %393, %31
  %395 = add i32 %394, %42
  %396 = add i32 %395, %44
  %397 = add i32 %396, %48
  %398 = add i32 %397, %60
  %399 = sub i32 %398, %64
  %400 = sub i32 %399, %65
  %401 = add i32 %400, %67
  %402 = add i32 %401, %71
  %403 = sub i32 %402, %76
  %404 = add i32 %403, %83
  %405 = add i32 %404, %85
  %406 = sub i32 %405, %86
  %407 = add i32 %406, %89
  %408 = sub i32 %407, %94
  %409 = sub i32 %408, %95
  %410 = add i32 %409, %97
  %411 = sub i32 %410, %100
  %412 = sub i32 %411, %101
  %413 = add i32 %412, %106
  %414 = sub i32 %413, %107
  %415 = sub i32 %414, %108
  %416 = sub i32 %415, %109
  %417 = sub i32 %416, %113
  %418 = sub i32 %417, %114
  %419 = sub i32 %418, %116
  %420 = add i32 %419, %120
  %421 = sub i32 %420, %123
  %422 = add i32 %421, %127
  %423 = add i32 %422, %128
  %424 = add i32 %423, %133
  %425 = add i32 %424, %138
  %426 = sub i32 %425, %142
  %427 = sub i32 %426, %143
  %428 = add i32 %427, %144
  %429 = add i32 %428, %147
  %430 = add i32 %429, %148
  %431 = add i32 %430, %149
  %432 = sub i32 %431, %150
  %433 = add i32 %432, %157
  %434 = add i32 %433, %159
  %435 = sub i32 %434, %160
  %436 = add i32 %435, %161
  %437 = sub i32 %436, %162
  %438 = sub i32 %437, %164
  %439 = add i32 %438, %166
  %440 = sub i32 %439, %167
  %441 = sub i32 %440, %168
  %442 = sub i32 %441, %170
  %443 = sub i32 %442, %172
  %444 = add i32 %443, %173
  %445 = add i32 %444, %174
  %446 = sub i32 %445, %175
  %447 = add i32 %446, %178
  %448 = sub i32 %447, %179
  %449 = add i32 %448, %180
  %450 = sub i32 %449, %181
  %451 = sub i32 %450, %185
  %452 = sub i32 %451, %186
  %453 = add i32 %452, %192
  %454 = sub i32 %453, %193
  %455 = sub i32 %454, %195
  %456 = add i32 %455, %196
  %457 = sub i32 %456, %197
  %458 = add i32 %457, %201
  %459 = sub i32 %458, %202
  %460 = add i32 %459, %203
  %461 = sub i32 %460, %208
  %462 = add i32 %461, %209
  %463 = sub i32 %462, %210
  %464 = add i32 %463, %211
  %465 = sub i32 %464, %103
  %466 = add i32 %465, %215
  %467 = sub i32 %466, %216
  %468 = sub i32 %467, %218
  %469 = add i32 %468, %219
  %470 = add i32 %469, %225
  %471 = sub i32 %470, %228
  %472 = sub i32 %471, %229
  %473 = add i32 %472, %231
  %474 = add i32 %473, %125
  %475 = add i32 %474, %233
  %476 = add i32 %475, %234
  %477 = sub i32 %476, %235
  %478 = sub i32 %477, %240
  %479 = sub i32 %478, %241
  %480 = sub i32 %479, %242
  %481 = add i32 %480, %245
  %482 = add i32 %481, %246
  %483 = sub i32 %482, %248
  %484 = sub i32 %483, %249
  %485 = add i32 %484, %12
  %486 = sub i32 %485, %252
  %487 = sub i32 %486, %254
  %488 = sub i32 %487, %255
  %489 = sub i32 %488, %257
  %490 = add i32 %489, %258
  %491 = add i32 %490, %259
  %492 = sub i32 %491, %261
  %493 = sub i32 %492, %263
  %494 = sub i32 %493, %265
  %495 = add i32 %494, %266
  %496 = sub i32 %495, %270
  %497 = add i32 %496, %272
  %498 = add i32 %497, %273
  %499 = sub i32 %498, %275
  %500 = add i32 %499, %27
  %501 = sub i32 %500, %278
  %502 = sub i32 %501, %279
  %503 = add i32 %502, %281
  %504 = sub i32 %503, %282
  %505 = sub i32 %504, %284
  %506 = add i32 %505, %286
  %507 = sub i32 %506, %287
  %508 = add i32 %507, %289
  %509 = sub i32 %508, %22
  %510 = sub i32 %509, %34
  %511 = sub i32 %510, %46
  %512 = sub i32 %511, %52
  %513 = add i32 %512, %55
  %514 = sub i32 %513, %57
  %515 = add i32 %514, %58
  %516 = add i32 %515, %63
  %517 = sub i32 %516, %74
  %518 = sub i32 %517, %79
  %519 = sub i32 %518, %82
  %520 = sub i32 %519, %88
  %521 = sub i32 %520, %92
  %522 = sub i32 %521, %99
  %523 = sub i32 %522, %105
  %524 = add i32 %523, %111
  %525 = add i32 %524, %121
  %526 = add i32 %525, %126
  %527 = add i32 %526, %130
  %528 = sub i32 %527, %137
  %529 = add i32 %528, %146
  %530 = add i32 %529, %151
  %531 = sub i32 %530, %153
  %532 = sub i32 %531, %156
  %533 = sub i32 %532, %158
  %534 = add i32 %533, %165
  %535 = sub i32 %534, %199
  %536 = add i32 %535, %206
  %537 = sub i32 %536, %222
  %538 = sub i32 %537, %224
  %539 = add i32 %538, %260
  %540 = sub i32 %539, %268
  %541 = add i32 %540, %276
  %542 = add i32 %541, %280
  %543 = sub i32 %542, %294
  %544 = add i32 %543, %296
  %545 = add i32 %544, %300
  %546 = sub i32 %545, %302
  %547 = add i32 %546, %303
  %548 = add i32 %547, %305
  %549 = sub i32 %548, %184
  %550 = sub i32 %549, %190
  %551 = add i32 %550, %318
  %552 = add i32 %551, %312
  %553 = add i32 %552, %341
  %554 = icmp eq i32 %7, %553
  %555 = select i1 %554, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %556 = tail call i32 @puts(i8* nonnull dereferenceable(1) %555)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
