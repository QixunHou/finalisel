; ModuleID = '../.././c_source_file/0093_path_condition_crackme.c'
source_filename = "../.././c_source_file/0093_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %1, %0
  %7 = or i32 %5, %6
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = and i32 %9, %4
  %11 = and i32 %2, %0
  %12 = xor i32 %11, %1
  %13 = xor i32 %0, -1
  %14 = and i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %13
  %17 = add i32 %14, 1
  %18 = or i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %19, %2
  %21 = and i32 %1, %0
  %22 = or i32 %21, %2
  %23 = xor i32 %2, %1
  %24 = or i32 %23, %13
  %25 = or i32 %2, %0
  %26 = and i32 %25, %1
  %27 = xor i32 %6, -1
  %28 = and i32 %27, %2
  %29 = shl i32 %28, 1
  %30 = xor i32 %15, %0
  %31 = or i32 %4, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %21, %32
  %34 = shl i32 %33, 1
  %35 = xor i32 %9, %2
  %36 = xor i32 %2, %0
  %37 = or i32 %36, %8
  %38 = and i32 %36, %18
  %39 = or i32 %4, %1
  %40 = and i32 %4, %1
  %41 = xor i32 %40, -1
  %42 = xor i32 %11, %41
  %43 = xor i32 %39, -1
  %44 = or i32 %5, %27
  %45 = and i32 %25, %6
  %46 = xor i32 %9, -1
  %47 = xor i32 %46, %2
  %48 = or i32 %2, %1
  %49 = xor i32 %48, -1
  %50 = or i32 %11, %8
  %51 = or i32 %39, %0
  %52 = xor i32 %21, %2
  %53 = or i32 %11, %19
  %54 = or i32 %11, %46
  %55 = and i32 %14, %13
  %56 = and i32 %23, %0
  %57 = or i32 %55, %56
  %58 = and i32 %8, %0
  %59 = xor i32 %36, -1
  %60 = or i32 %58, %59
  %61 = xor i32 %11, %18
  %62 = and i32 %18, %59
  %63 = mul i32 %62, 3
  %64 = or i32 %11, %6
  %65 = or i32 %21, %4
  %66 = or i32 %40, %0
  %67 = and i32 %8, %2
  %68 = and i32 %67, %0
  %69 = or i32 %8, %2
  %70 = and i32 %69, %13
  %71 = or i32 %68, %70
  %72 = or i32 %6, %32
  %73 = xor i32 %5, -1
  %74 = xor i32 %73, %1
  %75 = and i32 %6, %73
  %76 = shl i32 %58, 1
  %77 = and i32 %73, %8
  %78 = and i32 %31, %8
  %79 = and i32 %36, %1
  %80 = xor i32 %11, %48
  %81 = or i32 %11, %27
  %82 = or i32 %23, %0
  %83 = xor i32 %82, -1
  %84 = or i32 %68, %83
  %85 = shl i32 %2, 1
  %86 = xor i32 %25, -1
  %87 = or i32 %6, %2
  %88 = xor i32 %25, %1
  %89 = or i32 %41, %0
  %90 = and i32 %9, %2
  %91 = shl i32 %90, 1
  %92 = and i32 %31, %27
  %93 = and i32 %14, %0
  %94 = and i32 %48, %13
  %95 = or i32 %93, %94
  %96 = xor i32 %58, -1
  %97 = and i32 %36, %96
  %98 = xor i32 %39, %0
  %99 = xor i32 %21, -1
  %100 = and i32 %36, %99
  %101 = or i32 %14, %0
  %102 = xor i32 %14, %0
  %103 = or i32 %4, %46
  %104 = and i32 %23, %13
  %105 = or i32 %5, %1
  %106 = or i32 %21, %59
  %107 = and i32 %4, %27
  %108 = or i32 %40, %13
  %109 = shl i32 %108, 1
  %110 = add i32 %6, 1
  %111 = xor i32 %23, %0
  %112 = xor i32 %111, -1
  %113 = or i32 %93, %112
  %114 = xor i32 %11, -1
  %115 = xor i32 %114, %1
  %116 = and i32 %73, %1
  %117 = xor i32 %48, %0
  %118 = and i32 %73, %27
  %119 = or i32 %23, %21
  %120 = and i32 %39, %0
  %121 = or i32 %59, %1
  %122 = xor i32 %18, %2
  %123 = shl i32 %122, 1
  %124 = xor i32 %43, %0
  %125 = shl i32 %124, 1
  %126 = or i32 %32, %1
  %127 = or i32 %86, %8
  %128 = xor i32 %69, %0
  %129 = or i32 %68, %128
  %130 = and i32 %31, %6
  %131 = xor i32 %23, -1
  %132 = and i32 %18, %131
  %133 = and i32 %131, %99
  %134 = or i32 %41, %13
  %135 = xor i32 %58, %15
  %136 = and i32 %114, %27
  %137 = and i32 %59, %99
  %138 = or i32 %19, %2
  %139 = or i32 %59, %8
  %140 = or i32 %14, %58
  %141 = or i32 %6, %86
  %142 = xor i32 %39, %21
  %143 = and i32 %67, %13
  %144 = and i32 %69, %0
  %145 = xor i32 %144, -1
  %146 = xor i32 %143, %145
  %147 = and i32 %23, %9
  %148 = shl i32 %147, 1
  %149 = xor i32 %99, %2
  %150 = and i32 %15, %13
  %151 = and i32 %99, %2
  %152 = or i32 %36, %19
  %153 = and i32 %59, %27
  %154 = shl i32 %153, 1
  %155 = and i32 %114, %1
  %156 = and i32 %18, %2
  %157 = or i32 %131, %13
  %158 = shl i32 %4, 2
  %159 = or i32 %36, %21
  %160 = add i32 %58, 1
  %161 = xor i32 %11, %9
  %162 = shl i32 %161, 1
  %163 = or i32 %21, %86
  %164 = or i32 %21, %131
  %165 = or i32 %143, %144
  %166 = shl i32 %165, 1
  %167 = and i32 %59, %1
  %168 = or i32 %39, %13
  %169 = and i32 %6, %59
  %170 = or i32 %4, %19
  %171 = and i32 %41, %13
  %172 = or i32 %48, %13
  %173 = xor i32 %24, -1
  %174 = or i32 %143, %173
  %175 = and i32 %31, %1
  %176 = or i32 %5, %43
  %177 = or i32 %23, %46
  %178 = or i32 %32, %27
  %179 = and i32 %6, %4
  %180 = or i32 %59, %46
  %181 = shl i32 %180, 2
  %182 = xor i32 %94, -1
  %183 = xor i32 %93, %182
  %184 = and i32 %36, %8
  %185 = and i32 %39, %13
  %186 = shl i32 %185, 1
  %187 = and i32 %4, %99
  %188 = xor i32 %58, %41
  %189 = or i32 %11, %40
  %190 = xor i32 %68, %112
  %191 = shl i32 %190, 1
  %192 = and i32 %6, %2
  %193 = or i32 %131, %46
  %194 = and i32 %15, %0
  %195 = xor i32 %5, %15
  %196 = xor i32 %128, -1
  %197 = xor i32 %68, %196
  %198 = shl i32 %114, 1
  %199 = and i32 %9, %59
  %200 = xor i32 %5, %39
  %201 = or i32 %23, %58
  %202 = shl i32 %201, 1
  %203 = or i32 %27, %2
  %204 = and i32 %25, %27
  %205 = or i32 %68, %111
  %206 = shl i32 %205, 1
  %207 = xor i32 %68, %82
  %208 = or i32 %15, %0
  %209 = shl i32 %208, 1
  %210 = or i32 %6, %4
  %211 = and i32 %131, %96
  %212 = and i32 %9, %131
  %213 = xor i32 %56, -1
  %214 = xor i32 %55, %213
  %215 = or i32 %5, %14
  %216 = and i32 %36, %27
  %217 = or i32 %86, %1
  %218 = shl i32 %13, 1
  %219 = add i32 %1, 1
  %220 = shl i32 %94, 1
  %221 = and i32 %18, %4
  %222 = and i32 %59, %96
  %223 = or i32 %46, %2
  %224 = and i32 %48, %0
  %225 = xor i32 %5, %1
  %226 = or i32 %6, %59
  %227 = shl i32 %226, 1
  %228 = xor i32 %96, %2
  %229 = shl i32 %228, 1
  %230 = or i32 %5, %8
  %231 = and i32 %131, %0
  %232 = and i32 %25, %8
  %233 = and i32 %131, %13
  %234 = add i32 %5, 1
  %235 = shl i32 %46, 2
  %236 = and i32 %23, %96
  %237 = and i32 %36, %9
  %238 = xor i32 %40, %0
  %239 = or i32 %58, %2
  %240 = and i32 %49, %13
  %241 = mul i32 %240, 22
  %242 = and i32 %40, %13
  %243 = mul i32 %242, 27
  %244 = and i32 %49, %0
  %245 = mul i32 %244, -6
  %246 = and i32 %40, %0
  %247 = and i32 %43, %13
  %248 = mul i32 %247, 23
  %249 = and i32 %43, %0
  %250 = mul i32 %249, 11
  %251 = mul i32 %93, 14
  %252 = or i32 %55, %246
  %253 = shl i32 %252, 3
  %254 = add i32 %231, %132
  %255 = shl i32 %254, 2
  %256 = sub i32 -2, %21
  %257 = add i32 %256, %19
  %258 = add i32 %257, %221
  %259 = add i32 %258, %210
  %260 = add i32 %259, %149
  %261 = add i32 %260, %31
  %262 = add i32 %261, %52
  %263 = add i32 %262, %233
  %264 = add i32 %263, %238
  %265 = add i32 %264, %224
  %266 = add i32 %265, %140
  %267 = add i32 %266, %136
  %268 = add i32 %267, %61
  %269 = add i32 %268, %60
  %270 = add i32 %269, %38
  %271 = shl i32 %270, 1
  %272 = add i32 %218, %1
  %273 = sub i32 %219, %272
  %274 = add i32 %273, %110
  %275 = add i32 %274, %18
  %276 = add i32 %275, %160
  %277 = sub i32 %276, %9
  %278 = sub i32 %277, %6
  %279 = sub i32 %278, %10
  %280 = add i32 %279, %17
  %281 = sub i32 %280, %20
  %282 = sub i32 %281, %22
  %283 = add i32 %282, %35
  %284 = sub i32 %283, %39
  %285 = add i32 %284, %43
  %286 = add i32 %285, %47
  %287 = add i32 %286, %49
  %288 = sub i32 %287, %65
  %289 = sub i32 %288, %76
  %290 = sub i32 %289, %85
  %291 = sub i32 %290, %87
  %292 = add i32 %291, %103
  %293 = add i32 %292, %107
  %294 = sub i32 %293, %138
  %295 = sub i32 %294, %151
  %296 = sub i32 %295, %156
  %297 = sub i32 %296, %158
  %298 = add i32 %297, %40
  %299 = add i32 %298, %32
  %300 = add i32 %299, %170
  %301 = sub i32 %300, %179
  %302 = sub i32 %301, %187
  %303 = sub i32 %302, %192
  %304 = sub i32 %303, %203
  %305 = add i32 %304, %36
  %306 = add i32 %305, %223
  %307 = add i32 %306, %234
  %308 = sub i32 %307, %235
  %309 = add i32 %308, %239
  %310 = sub i32 %309, %12
  %311 = sub i32 %310, %16
  %312 = add i32 %311, %24
  %313 = add i32 %312, %26
  %314 = sub i32 %313, %29
  %315 = sub i32 %314, %30
  %316 = add i32 %315, %37
  %317 = add i32 %316, %42
  %318 = sub i32 %317, %44
  %319 = add i32 %318, %45
  %320 = sub i32 %319, %50
  %321 = add i32 %320, %51
  %322 = add i32 %321, %53
  %323 = sub i32 %322, %54
  %324 = sub i32 %323, %64
  %325 = add i32 %324, %66
  %326 = sub i32 %325, %72
  %327 = add i32 %326, %74
  %328 = add i32 %327, %75
  %329 = sub i32 %328, %77
  %330 = sub i32 %329, %78
  %331 = sub i32 %330, %79
  %332 = add i32 %331, %80
  %333 = add i32 %332, %81
  %334 = add i32 %333, %88
  %335 = sub i32 %334, %89
  %336 = sub i32 %335, %91
  %337 = sub i32 %336, %92
  %338 = add i32 %337, %97
  %339 = sub i32 %338, %98
  %340 = add i32 %339, %100
  %341 = sub i32 %340, %101
  %342 = sub i32 %341, %102
  %343 = add i32 %342, %104
  %344 = add i32 %343, %105
  %345 = add i32 %344, %106
  %346 = sub i32 %345, %115
  %347 = add i32 %346, %116
  %348 = sub i32 %347, %117
  %349 = add i32 %348, %118
  %350 = add i32 %349, %119
  %351 = add i32 %350, %120
  %352 = sub i32 %351, %121
  %353 = sub i32 %352, %123
  %354 = add i32 %353, %126
  %355 = sub i32 %354, %127
  %356 = sub i32 %355, %130
  %357 = add i32 %356, %133
  %358 = sub i32 %357, %134
  %359 = sub i32 %358, %135
  %360 = sub i32 %359, %137
  %361 = add i32 %360, %139
  %362 = add i32 %361, %141
  %363 = add i32 %362, %142
  %364 = sub i32 %363, %150
  %365 = add i32 %364, %152
  %366 = add i32 %365, %155
  %367 = add i32 %366, %157
  %368 = sub i32 %367, %159
  %369 = sub i32 %368, %163
  %370 = add i32 %369, %164
  %371 = add i32 %370, %56
  %372 = sub i32 %371, %167
  %373 = sub i32 %372, %168
  %374 = sub i32 %373, %169
  %375 = add i32 %374, %171
  %376 = sub i32 %375, %172
  %377 = sub i32 %376, %175
  %378 = add i32 %377, %176
  %379 = add i32 %378, %177
  %380 = add i32 %379, %178
  %381 = add i32 %380, %184
  %382 = sub i32 %381, %188
  %383 = sub i32 %382, %189
  %384 = sub i32 %383, %193
  %385 = add i32 %384, %82
  %386 = add i32 %385, %194
  %387 = sub i32 %386, %195
  %388 = sub i32 %387, %198
  %389 = sub i32 %388, %199
  %390 = add i32 %389, %200
  %391 = add i32 %390, %204
  %392 = sub i32 %391, %211
  %393 = add i32 %392, %212
  %394 = sub i32 %393, %215
  %395 = sub i32 %394, %216
  %396 = sub i32 %395, %217
  %397 = sub i32 %396, %222
  %398 = add i32 %397, %225
  %399 = sub i32 %398, %229
  %400 = sub i32 %399, %230
  %401 = add i32 %400, %232
  %402 = sub i32 %401, %236
  %403 = add i32 %402, %237
  %404 = sub i32 %403, %34
  %405 = add i32 %404, %57
  %406 = add i32 %405, %63
  %407 = add i32 %406, %71
  %408 = add i32 %407, %84
  %409 = sub i32 %408, %95
  %410 = sub i32 %409, %109
  %411 = add i32 %410, %113
  %412 = sub i32 %411, %125
  %413 = sub i32 %412, %129
  %414 = sub i32 %413, %146
  %415 = sub i32 %414, %148
  %416 = sub i32 %415, %154
  %417 = sub i32 %416, %162
  %418 = sub i32 %417, %174
  %419 = sub i32 %418, %181
  %420 = add i32 %419, %183
  %421 = sub i32 %420, %186
  %422 = sub i32 %421, %197
  %423 = sub i32 %422, %202
  %424 = sub i32 %423, %207
  %425 = sub i32 %424, %209
  %426 = add i32 %425, %214
  %427 = sub i32 %426, %220
  %428 = sub i32 %427, %227
  %429 = add i32 %428, %241
  %430 = add i32 %429, %243
  %431 = add i32 %430, %245
  %432 = add i32 %431, %248
  %433 = add i32 %432, %250
  %434 = add i32 %433, %251
  %435 = sub i32 %434, %166
  %436 = sub i32 %435, %191
  %437 = sub i32 %436, %206
  %438 = add i32 %437, %253
  %439 = add i32 %438, %255
  %440 = add i32 %439, %271
  %441 = icmp eq i32 %7, %440
  %442 = select i1 %441, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %443 = tail call i32 @puts(i8* nonnull dereferenceable(1) %442)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
