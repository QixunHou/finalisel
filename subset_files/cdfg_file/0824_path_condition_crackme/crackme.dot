digraph "DFG for'crackme' function" {
	Node0x649450[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x649b00[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x649bc0[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x649c30[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x649ca0[shape=record, label="  %7 = add i32 %4, %6"];
	Node0x649d10[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x649db0[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x649e20[shape=record, label="  %10 = or i32 %9, %0"];
	Node0x649e90[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x649f00[shape=record, label="  %12 = shl i32 %1, 1"];
	Node0x649f70[shape=record, label="  %13 = xor i32 %10, -1"];
	Node0x64a010[shape=record, label="  %14 = mul i32 %13, 7"];
	Node0x64a080[shape=record, label="  %15 = sub i32 1, %1"];
	Node0x64a0f0[shape=record, label="  %16 = add i32 %15, %8"];
	Node0x64a160[shape=record, label="  %17 = sub i32 %16, %12"];
	Node0x64a1d0[shape=record, label="  %18 = sub i32 %17, %3"];
	Node0x64a240[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x64a2b0[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x64a320[shape=record, label="  %21 = icmp eq i32 %7, %20"];
	Node0x5ea268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x64a7c0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x64a810[shape=record, label="  ret void"];
	Node0x649450 -> Node0x649b00;
	Node0x649b00 -> Node0x649bc0;
	Node0x649bc0 -> Node0x649c30;
	Node0x649c30 -> Node0x649ca0;
	Node0x649ca0 -> Node0x649d10;
	Node0x649d10 -> Node0x649db0;
	Node0x649db0 -> Node0x649e20;
	Node0x649e20 -> Node0x649e90;
	Node0x649e90 -> Node0x649f00;
	Node0x649f00 -> Node0x649f70;
	Node0x649f70 -> Node0x64a010;
	Node0x64a010 -> Node0x64a080;
	Node0x64a080 -> Node0x64a0f0;
	Node0x64a0f0 -> Node0x64a160;
	Node0x64a160 -> Node0x64a1d0;
	Node0x64a1d0 -> Node0x64a240;
	Node0x64a240 -> Node0x64a2b0;
	Node0x64a2b0 -> Node0x64a320;
	Node0x64a320 -> Node0x5ea268;
	Node0x5ea268 -> Node0x64a7c0;
	Node0x64a7c0 -> Node0x64a810;
edge [color=red]
	Node0x649450 -> Node0x649b00;
	Node0x649bc0 -> Node0x649c30;
	Node0x649b00 -> Node0x649ca0;
	Node0x649c30 -> Node0x649ca0;
	Node0x649db0 -> Node0x649e20;
	Node0x649e20 -> Node0x649e90;
	Node0x649e20 -> Node0x649f70;
	Node0x649f70 -> Node0x64a010;
	Node0x64a080 -> Node0x64a0f0;
	Node0x649d10 -> Node0x64a0f0;
	Node0x64a0f0 -> Node0x64a160;
	Node0x649f00 -> Node0x64a160;
	Node0x64a160 -> Node0x64a1d0;
	Node0x649450 -> Node0x64a1d0;
	Node0x64a1d0 -> Node0x64a240;
	Node0x649e90 -> Node0x64a240;
	Node0x64a240 -> Node0x64a2b0;
	Node0x64a010 -> Node0x64a2b0;
	Node0x649ca0 -> Node0x64a320;
	Node0x64a2b0 -> Node0x64a320;
	Node0x64a320 -> Node0x5ea268;
	Node0x5ea268 -> Node0x64a7c0;
}
