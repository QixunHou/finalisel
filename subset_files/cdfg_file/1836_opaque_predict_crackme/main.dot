digraph "DFG for'main' function" {
	Node0x20ff1f8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x20ff278[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x20ff308[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x20ff768[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x20ff848[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x20ff968[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x20ffba0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x20ffc58[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x2100bc8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x2101250[shape=record, label="  %8 = add i32 %7, %6"];
	Node0x21012c0[shape=record, label="  %9 = shl i32 %7, 1"];
	Node0x2101330[shape=record, label="  %10 = or i32 %9, 1"];
	Node0x21013a0[shape=record, label="  %11 = xor i32 %7, -1"];
	Node0x2101410[shape=record, label="  %12 = add i32 %6, %11"];
	Node0x2101480[shape=record, label="  %13 = add i32 %12, %10"];
	Node0x21014f0[shape=record, label="  %14 = icmp eq i32 %8, %13"];
	Node0x2101578[shape=record, label="  %15 = select i1 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2101610[shape=record, label="  %16 = call i32 @puts(i8* nonnull dereferenceable(1) %15) #5"];
	Node0x21017d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x2101938[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x21019f8[shape=record, label="  ret i32 0"];
	Node0x20ff1f8 -> Node0x20ff278;
	Node0x20ff278 -> Node0x20ff308;
	Node0x20ff308 -> Node0x20ff768;
	Node0x20ff768 -> Node0x20ff848;
	Node0x20ff848 -> Node0x20ff968;
	Node0x20ff968 -> Node0x20ffba0;
	Node0x20ffba0 -> Node0x20ffc58;
	Node0x20ffc58 -> Node0x2100bc8;
	Node0x2100bc8 -> Node0x2101250;
	Node0x2101250 -> Node0x21012c0;
	Node0x21012c0 -> Node0x2101330;
	Node0x2101330 -> Node0x21013a0;
	Node0x21013a0 -> Node0x2101410;
	Node0x2101410 -> Node0x2101480;
	Node0x2101480 -> Node0x21014f0;
	Node0x21014f0 -> Node0x2101578;
	Node0x2101578 -> Node0x2101610;
	Node0x2101610 -> Node0x21017d8;
	Node0x21017d8 -> Node0x2101938;
	Node0x2101938 -> Node0x21019f8;
edge [color=red]
	Node0x20ff1f8 -> Node0x20ff308;
	Node0x20ff308 -> Node0x20ff768;
	Node0x20ff278 -> Node0x20ff848;
	Node0x20ff848 -> Node0x20ff968;
	Node0x20ff1f8 -> Node0x20ffba0;
	Node0x20ff278 -> Node0x20ffba0;
	Node0x20ff1f8 -> Node0x20ffc58;
	Node0x20ff278 -> Node0x2100bc8;
	Node0x2100bc8 -> Node0x2101250;
	Node0x20ffc58 -> Node0x2101250;
	Node0x2100bc8 -> Node0x21012c0;
	Node0x21012c0 -> Node0x2101330;
	Node0x2100bc8 -> Node0x21013a0;
	Node0x20ffc58 -> Node0x2101410;
	Node0x21013a0 -> Node0x2101410;
	Node0x2101410 -> Node0x2101480;
	Node0x2101330 -> Node0x2101480;
	Node0x2101250 -> Node0x21014f0;
	Node0x2101480 -> Node0x21014f0;
	Node0x21014f0 -> Node0x2101578;
	Node0x2101578 -> Node0x2101610;
	Node0x20ff848 -> Node0x21017d8;
	Node0x20ff308 -> Node0x2101938;
}
