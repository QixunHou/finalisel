digraph "DFG for'crackme' function" {
	Node0x218c550[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x218cc00[shape=record, label="  %4 = mul i32 %3, -5"];
	Node0x218ccc0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x218cd30[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x218cda0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x218ce10[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x218ceb0[shape=record, label="  %9 = shl i32 %5, 1"];
	Node0x218cf20[shape=record, label="  %10 = xor i32 %8, -1"];
	Node0x218cfc0[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x218d060[shape=record, label="  %12 = xor i32 %0, 1073741823"];
	Node0x218d0d0[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x218d170[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x218d1e0[shape=record, label="  %15 = shl i32 %6, 1"];
	Node0x218d250[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x218d2c0[shape=record, label="  %17 = add i32 %0, 2"];
	Node0x218d330[shape=record, label="  %18 = add i32 %17, %3"];
	Node0x218d3a0[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x218d410[shape=record, label="  %20 = sub i32 %19, %8"];
	Node0x218d480[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x218d4f0[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x218d560[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x218d5d0[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0x218d640[shape=record, label="  %25 = sub i32 %24, %15"];
	Node0x218d6b0[shape=record, label="  %26 = icmp eq i32 %4, %25"];
	Node0x212d268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x218db50[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x218dba0[shape=record, label="  ret void"];
	Node0x218c550 -> Node0x218cc00;
	Node0x218cc00 -> Node0x218ccc0;
	Node0x218ccc0 -> Node0x218cd30;
	Node0x218cd30 -> Node0x218cda0;
	Node0x218cda0 -> Node0x218ce10;
	Node0x218ce10 -> Node0x218ceb0;
	Node0x218ceb0 -> Node0x218cf20;
	Node0x218cf20 -> Node0x218cfc0;
	Node0x218cfc0 -> Node0x218d060;
	Node0x218d060 -> Node0x218d0d0;
	Node0x218d0d0 -> Node0x218d170;
	Node0x218d170 -> Node0x218d1e0;
	Node0x218d1e0 -> Node0x218d250;
	Node0x218d250 -> Node0x218d2c0;
	Node0x218d2c0 -> Node0x218d330;
	Node0x218d330 -> Node0x218d3a0;
	Node0x218d3a0 -> Node0x218d410;
	Node0x218d410 -> Node0x218d480;
	Node0x218d480 -> Node0x218d4f0;
	Node0x218d4f0 -> Node0x218d560;
	Node0x218d560 -> Node0x218d5d0;
	Node0x218d5d0 -> Node0x218d640;
	Node0x218d640 -> Node0x218d6b0;
	Node0x218d6b0 -> Node0x212d268;
	Node0x212d268 -> Node0x218db50;
	Node0x218db50 -> Node0x218dba0;
edge [color=red]
	Node0x218c550 -> Node0x218cc00;
	Node0x218ccc0 -> Node0x218cd30;
	Node0x218cd30 -> Node0x218cda0;
	Node0x218ccc0 -> Node0x218ceb0;
	Node0x218ce10 -> Node0x218cf20;
	Node0x218cf20 -> Node0x218cfc0;
	Node0x218d060 -> Node0x218d0d0;
	Node0x218d0d0 -> Node0x218d170;
	Node0x218cd30 -> Node0x218d1e0;
	Node0x218d2c0 -> Node0x218d330;
	Node0x218c550 -> Node0x218d330;
	Node0x218d330 -> Node0x218d3a0;
	Node0x218cda0 -> Node0x218d3a0;
	Node0x218d3a0 -> Node0x218d410;
	Node0x218ce10 -> Node0x218d410;
	Node0x218d410 -> Node0x218d480;
	Node0x218ceb0 -> Node0x218d480;
	Node0x218d480 -> Node0x218d4f0;
	Node0x218d250 -> Node0x218d4f0;
	Node0x218d4f0 -> Node0x218d560;
	Node0x218cfc0 -> Node0x218d560;
	Node0x218d560 -> Node0x218d5d0;
	Node0x218d170 -> Node0x218d5d0;
	Node0x218d5d0 -> Node0x218d640;
	Node0x218d1e0 -> Node0x218d640;
	Node0x218cc00 -> Node0x218d6b0;
	Node0x218d640 -> Node0x218d6b0;
	Node0x218d6b0 -> Node0x212d268;
	Node0x212d268 -> Node0x218db50;
}
