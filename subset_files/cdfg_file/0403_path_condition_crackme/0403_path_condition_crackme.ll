; ModuleID = '../.././c_source_file/0403_path_condition_crackme.c'
source_filename = "../.././c_source_file/0403_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = or i32 %1, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = sub i32 %7, %11
  %13 = mul i32 %12, 3
  %14 = xor i32 %2, -1
  %15 = and i32 %14, %0
  %16 = xor i32 %15, -1
  %17 = and i32 %16, %1
  %18 = xor i32 %1, -1
  %19 = and i32 %18, %0
  %20 = and i32 %14, %1
  %21 = xor i32 %20, -1
  %22 = xor i32 %19, %21
  %23 = or i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %1
  %26 = xor i32 %0, -1
  %27 = or i32 %10, %26
  %28 = or i32 %4, %24
  %29 = and i32 %5, %2
  %30 = or i32 %15, %4
  %31 = shl i32 %30, 1
  %32 = and i32 %6, %1
  %33 = and i32 %1, %0
  %34 = or i32 %14, %1
  %35 = xor i32 %34, -1
  %36 = or i32 %33, %35
  %37 = and i32 %9, %0
  %38 = and i32 %18, %2
  %39 = and i32 %38, %26
  %40 = or i32 %18, %2
  %41 = and i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %39, %42
  %44 = and i32 %38, %0
  %45 = or i32 %9, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %44, %46
  %48 = xor i32 %6, -1
  %49 = and i32 %8, %48
  %50 = xor i32 %9, %0
  %51 = or i32 %14, %0
  %52 = and i32 %51, %18
  %53 = and i32 %23, %18
  %54 = and i32 %2, %1
  %55 = or i32 %54, %0
  %56 = or i32 %18, %0
  %57 = xor i32 %56, -1
  %58 = xor i32 %57, %2
  %59 = xor i32 %33, -1
  %60 = and i32 %6, %59
  %61 = or i32 %19, %10
  %62 = or i32 %57, %2
  %63 = or i32 %33, %2
  %64 = xor i32 %34, %33
  %65 = shl i32 %57, 1
  %66 = and i32 %6, %5
  %67 = and i32 %9, %8
  %68 = shl i32 %67, 1
  %69 = and i32 %6, %18
  %70 = and i32 %54, %0
  %71 = or i32 %10, %0
  %72 = xor i32 %70, %71
  %73 = and i32 %2, %0
  %74 = or i32 %73, %57
  %75 = shl i32 %74, 1
  %76 = and i32 %56, %2
  %77 = or i32 %2, %1
  %78 = and i32 %77, %26
  %79 = or i32 %70, %78
  %80 = or i32 %6, %4
  %81 = xor i32 %73, %8
  %82 = and i32 %48, %1
  %83 = or i32 %10, %57
  %84 = or i32 %9, %26
  %85 = xor i32 %39, %84
  %86 = or i32 %73, %18
  %87 = or i32 %21, %0
  %88 = xor i32 %73, -1
  %89 = xor i32 %88, %1
  %90 = and i32 %51, %5
  %91 = xor i32 %77, -1
  %92 = or i32 %73, %91
  %93 = and i32 %34, %26
  %94 = and i32 %54, %26
  %95 = or i32 %94, %37
  %96 = and i32 %56, %14
  %97 = and i32 %14, %5
  %98 = xor i32 %54, %0
  %99 = or i32 %14, %5
  %100 = or i32 %54, %19
  %101 = xor i32 %19, -1
  %102 = and i32 %10, %101
  %103 = and i32 %56, %48
  %104 = xor i32 %15, %1
  %105 = and i32 %77, %0
  %106 = shl i32 %84, 1
  %107 = xor i32 %51, -1
  %108 = or i32 %107, %1
  %109 = or i32 %15, %54
  %110 = xor i32 %16, %1
  %111 = or i32 %14, %57
  %112 = or i32 %48, %1
  %113 = shl i32 %112, 1
  %114 = xor i32 %33, %2
  %115 = add i32 %34, 1
  %116 = or i32 %34, %26
  %117 = or i32 %33, %10
  %118 = or i32 %5, %2
  %119 = or i32 %4, %48
  %120 = xor i32 %73, %1
  %121 = or i32 %107, %5
  %122 = xor i32 %54, -1
  %123 = xor i32 %122, %0
  %124 = or i32 %6, %57
  %125 = xor i32 %10, %0
  %126 = or i32 %6, %1
  %127 = or i32 %6, %19
  %128 = shl i32 %127, 1
  %129 = or i32 %20, %19
  %130 = and i32 %10, %0
  %131 = xor i32 %23, %33
  %132 = xor i32 %77, %0
  %133 = or i32 %70, %132
  %134 = or i32 %6, %33
  %135 = or i32 %20, %0
  %136 = xor i32 %24, %1
  %137 = xor i32 %40, -1
  %138 = or i32 %137, %0
  %139 = xor i32 %44, %138
  %140 = xor i32 %8, -1
  %141 = or i32 %140, %2
  %142 = xor i32 %105, 2147483647
  %143 = xor i32 %142, %94
  %144 = and i32 %16, %5
  %145 = add i32 %54, 1
  %146 = or i32 %73, %20
  %147 = xor i32 %132, -1
  %148 = xor i32 %70, %147
  %149 = and i32 %21, %0
  %150 = or i32 %33, %24
  %151 = add i32 %77, 1
  %152 = and i32 %59, %2
  %153 = and i32 %122, %0
  %154 = or i32 %73, %5
  %155 = xor i32 %35, %0
  %156 = or i32 %4, %2
  %157 = and i32 %4, %14
  %158 = and i32 %6, %101
  %159 = or i32 %9, %140
  %160 = or i32 %15, %5
  %161 = and i32 %122, %26
  %162 = and i32 %9, %101
  %163 = or i32 %54, %26
  %164 = add i32 %51, 1
  %165 = and i32 %4, %16
  %166 = or i32 %73, %1
  %167 = and i32 %88, %5
  %168 = or i32 %122, %0
  %169 = shl i32 %45, 1
  %170 = or i32 %20, %26
  %171 = xor i32 %37, -1
  %172 = xor i32 %94, %171
  %173 = and i32 %51, %1
  %174 = or i32 %4, %14
  %175 = and i32 %9, %59
  %176 = shl i32 %175, 1
  %177 = or i32 %33, %107
  %178 = xor i32 %70, %50
  %179 = xor i32 %40, %0
  %180 = xor i32 %179, -1
  %181 = xor i32 %44, %180
  %182 = or i32 %10, %140
  %183 = and i32 %14, %59
  %184 = or i32 %9, %19
  %185 = and i32 %10, %59
  %186 = or i32 %44, %179
  %187 = or i32 %21, %26
  %188 = shl i32 %187, 1
  %189 = or i32 %91, %0
  %190 = and i32 %91, %26
  %191 = shl i32 %190, 2
  %192 = and i32 %20, %26
  %193 = and i32 %91, %0
  %194 = mul i32 %193, -15
  %195 = and i32 %20, %0
  %196 = and i32 %35, %26
  %197 = shl i32 %196, 3
  %198 = and i32 %35, %0
  %199 = mul i32 %70, -7
  %200 = add i32 %182, %156
  %201 = add i32 %200, %154
  %202 = add i32 %201, %146
  %203 = add i32 %202, %129
  %204 = add i32 %203, %123
  %205 = add i32 %204, %81
  %206 = add i32 %205, %79
  %207 = add i32 %206, %143
  %208 = shl i32 %207, 1
  %209 = or i32 %198, %192
  %210 = add i32 %209, %185
  %211 = add i32 %210, %158
  %212 = shl i32 %211, 2
  %213 = sub i32 %76, %58
  %214 = sub i32 %213, %102
  %215 = add i32 %214, %160
  %216 = mul i32 %215, 5
  %217 = sub i32 %168, %133
  %218 = mul i32 %217, 3
  %219 = add i32 %2, 1
  %220 = sub i32 %219, %8
  %221 = sub i32 %220, %33
  %222 = sub i32 %221, %19
  %223 = add i32 %222, %29
  %224 = sub i32 %223, %6
  %225 = add i32 %224, %62
  %226 = add i32 %225, %63
  %227 = sub i32 %226, %65
  %228 = add i32 %227, %16
  %229 = add i32 %228, %96
  %230 = sub i32 %229, %97
  %231 = add i32 %230, %99
  %232 = add i32 %231, %111
  %233 = sub i32 %232, %114
  %234 = add i32 %233, %115
  %235 = add i32 %234, %118
  %236 = sub i32 %235, %141
  %237 = add i32 %236, %145
  %238 = add i32 %237, %34
  %239 = sub i32 %238, %23
  %240 = add i32 %239, %151
  %241 = add i32 %240, %152
  %242 = sub i32 %241, %157
  %243 = add i32 %242, %21
  %244 = add i32 %243, %164
  %245 = add i32 %244, %24
  %246 = add i32 %245, %174
  %247 = sub i32 %246, %183
  %248 = sub i32 %247, %22
  %249 = add i32 %248, %17
  %250 = sub i32 %249, %25
  %251 = sub i32 %250, %27
  %252 = add i32 %251, %28
  %253 = sub i32 %252, %32
  %254 = add i32 %253, %36
  %255 = sub i32 %254, %37
  %256 = add i32 %255, %49
  %257 = add i32 %256, %50
  %258 = add i32 %257, %52
  %259 = add i32 %258, %53
  %260 = sub i32 %259, %55
  %261 = add i32 %260, %60
  %262 = sub i32 %261, %61
  %263 = add i32 %262, %64
  %264 = sub i32 %263, %66
  %265 = add i32 %264, %69
  %266 = sub i32 %265, %80
  %267 = add i32 %266, %82
  %268 = add i32 %267, %83
  %269 = sub i32 %268, %86
  %270 = add i32 %269, %87
  %271 = add i32 %270, %89
  %272 = sub i32 %271, %90
  %273 = add i32 %272, %92
  %274 = add i32 %273, %93
  %275 = add i32 %274, %98
  %276 = sub i32 %275, %100
  %277 = add i32 %276, %103
  %278 = sub i32 %277, %104
  %279 = add i32 %278, %105
  %280 = sub i32 %279, %108
  %281 = add i32 %280, %109
  %282 = sub i32 %281, %110
  %283 = sub i32 %282, %116
  %284 = sub i32 %283, %117
  %285 = add i32 %284, %119
  %286 = sub i32 %285, %120
  %287 = add i32 %286, %121
  %288 = add i32 %287, %124
  %289 = sub i32 %288, %125
  %290 = sub i32 %289, %126
  %291 = sub i32 %290, %130
  %292 = add i32 %291, %131
  %293 = add i32 %292, %134
  %294 = sub i32 %293, %135
  %295 = sub i32 %294, %136
  %296 = sub i32 %295, %144
  %297 = sub i32 %296, %149
  %298 = sub i32 %297, %150
  %299 = sub i32 %298, %153
  %300 = add i32 %299, %155
  %301 = sub i32 %300, %159
  %302 = sub i32 %301, %161
  %303 = sub i32 %302, %162
  %304 = sub i32 %303, %163
  %305 = add i32 %304, %165
  %306 = add i32 %305, %166
  %307 = add i32 %306, %167
  %308 = sub i32 %307, %170
  %309 = add i32 %308, %173
  %310 = add i32 %309, %177
  %311 = add i32 %310, %184
  %312 = sub i32 %311, %189
  %313 = add i32 %312, %195
  %314 = sub i32 %313, %31
  %315 = add i32 %314, %43
  %316 = add i32 %315, %47
  %317 = sub i32 %316, %68
  %318 = add i32 %317, %72
  %319 = sub i32 %318, %75
  %320 = add i32 %319, %85
  %321 = add i32 %320, %95
  %322 = sub i32 %321, %106
  %323 = sub i32 %322, %113
  %324 = sub i32 %323, %128
  %325 = add i32 %324, %139
  %326 = sub i32 %325, %148
  %327 = sub i32 %326, %169
  %328 = sub i32 %327, %172
  %329 = sub i32 %328, %176
  %330 = add i32 %329, %178
  %331 = add i32 %330, %181
  %332 = sub i32 %331, %186
  %333 = sub i32 %332, %188
  %334 = sub i32 %333, %191
  %335 = add i32 %334, %194
  %336 = sub i32 %335, %197
  %337 = add i32 %336, %199
  %338 = add i32 %337, %218
  %339 = add i32 %338, %212
  %340 = add i32 %339, %216
  %341 = add i32 %340, %208
  %342 = icmp eq i32 %13, %341
  %343 = select i1 %342, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %344 = tail call i32 @puts(i8* nonnull dereferenceable(1) %343)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
