digraph "DFG for'crackme' function" {
	Node0xdbe9a0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xdbea10[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0xdbead0[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0xdbeb70[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0xdbebe0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0xdbec50[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xdbecc0[shape=record, label="  %9 = xor i32 %3, %0"];
	Node0xdbed30[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xdbeda0[shape=record, label="  %11 = sub i32 %3, %4"];
	Node0xdbee10[shape=record, label="  %12 = add i32 %11, %7"];
	Node0xdbee80[shape=record, label="  %13 = sub i32 %12, %8"];
	Node0xdbeef0[shape=record, label="  %14 = sub i32 %13, %6"];
	Node0xdbef60[shape=record, label="  %15 = add i32 %14, %10"];
	Node0xdbefd0[shape=record, label="  %16 = icmp eq i32 %15, %3"];
	Node0xd5f268[shape=record, label="  %17 = select i1 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xdbf470[shape=record, label="  %18 = tail call i32 @puts(i8* nonnull dereferenceable(1) %17)"];
	Node0xdbf4c0[shape=record, label="  ret void"];
	Node0xdbe9a0 -> Node0xdbea10;
	Node0xdbea10 -> Node0xdbead0;
	Node0xdbead0 -> Node0xdbeb70;
	Node0xdbeb70 -> Node0xdbebe0;
	Node0xdbebe0 -> Node0xdbec50;
	Node0xdbec50 -> Node0xdbecc0;
	Node0xdbecc0 -> Node0xdbed30;
	Node0xdbed30 -> Node0xdbeda0;
	Node0xdbeda0 -> Node0xdbee10;
	Node0xdbee10 -> Node0xdbee80;
	Node0xdbee80 -> Node0xdbeef0;
	Node0xdbeef0 -> Node0xdbef60;
	Node0xdbef60 -> Node0xdbefd0;
	Node0xdbefd0 -> Node0xd5f268;
	Node0xd5f268 -> Node0xdbf470;
	Node0xdbf470 -> Node0xdbf4c0;
edge [color=red]
	Node0xdbea10 -> Node0xdbead0;
	Node0xdbead0 -> Node0xdbeb70;
	Node0xdbe9a0 -> Node0xdbecc0;
	Node0xdbecc0 -> Node0xdbed30;
	Node0xdbe9a0 -> Node0xdbeda0;
	Node0xdbea10 -> Node0xdbeda0;
	Node0xdbeda0 -> Node0xdbee10;
	Node0xdbebe0 -> Node0xdbee10;
	Node0xdbee10 -> Node0xdbee80;
	Node0xdbec50 -> Node0xdbee80;
	Node0xdbee80 -> Node0xdbeef0;
	Node0xdbeb70 -> Node0xdbeef0;
	Node0xdbeef0 -> Node0xdbef60;
	Node0xdbed30 -> Node0xdbef60;
	Node0xdbef60 -> Node0xdbefd0;
	Node0xdbe9a0 -> Node0xdbefd0;
	Node0xdbefd0 -> Node0xd5f268;
	Node0xd5f268 -> Node0xdbf470;
}
