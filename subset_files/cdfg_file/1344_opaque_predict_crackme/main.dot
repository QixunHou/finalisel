digraph "DFG for'main' function" {
	Node0x10d73f8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x10d7478[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x10d7508[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x10d7568[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x10d79e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x10d7ac8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x10d7bc8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x10d7c88[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x10d7d38[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x10d7f98[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x10d8058[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x10d81b8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x10d8218[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x10da0e0[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x10da2e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x10da448[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x10da558[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x10da618[shape=record, label="  ret i32 0"];
	Node0x10d73f8 -> Node0x10d7478;
	Node0x10d7478 -> Node0x10d7508;
	Node0x10d7508 -> Node0x10d7568;
	Node0x10d7568 -> Node0x10d79e8;
	Node0x10d79e8 -> Node0x10d7ac8;
	Node0x10d7ac8 -> Node0x10d7bc8;
	Node0x10d7bc8 -> Node0x10d7c88;
	Node0x10d7c88 -> Node0x10d7d38;
	Node0x10d7d38 -> Node0x10d7f98;
	Node0x10d7f98 -> Node0x10d8058;
	Node0x10d8058 -> Node0x10d81b8;
	Node0x10d81b8 -> Node0x10d8218;
	Node0x10d8218 -> Node0x10da0e0;
	Node0x10da0e0 -> Node0x10da2e8;
	Node0x10da2e8 -> Node0x10da448;
	Node0x10da448 -> Node0x10da558;
	Node0x10da558 -> Node0x10da618;
edge [color=red]
	Node0x10d73f8 -> Node0x10d7568;
	Node0x10d7568 -> Node0x10d79e8;
	Node0x10d7478 -> Node0x10d7ac8;
	Node0x10d7ac8 -> Node0x10d7bc8;
	Node0x10d7508 -> Node0x10d7c88;
	Node0x10d7c88 -> Node0x10d7d38;
	Node0x10d73f8 -> Node0x10d7f98;
	Node0x10d7478 -> Node0x10d7f98;
	Node0x10d7508 -> Node0x10d7f98;
	Node0x10d73f8 -> Node0x10d8058;
	Node0x10d7478 -> Node0x10d81b8;
	Node0x10d7508 -> Node0x10d8218;
	Node0x10d8058 -> Node0x10da0e0;
	Node0x10d81b8 -> Node0x10da0e0;
	Node0x10d8218 -> Node0x10da0e0;
	Node0x10d7c88 -> Node0x10da2e8;
	Node0x10d7ac8 -> Node0x10da448;
	Node0x10d7568 -> Node0x10da558;
}
