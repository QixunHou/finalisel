; ModuleID = '../.././c_source_file/0324_path_condition_crackme.c'
source_filename = "../.././c_source_file/0324_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %6
  %10 = xor i32 %1, %0
  %11 = xor i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = or i32 %10, %12
  %14 = sub i32 %9, %13
  %15 = xor i32 %2, -1
  %16 = and i32 %15, %6
  %17 = or i32 %2, %0
  %18 = or i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %11, %19
  %21 = and i32 %2, %1
  %22 = or i32 %21, %5
  %23 = xor i32 %21, -1
  %24 = xor i32 %23, %0
  %25 = and i32 %1, %0
  %26 = xor i32 %17, -1
  %27 = or i32 %25, %26
  %28 = and i32 %21, %0
  %29 = or i32 %2, %1
  %30 = xor i32 %29, %0
  %31 = or i32 %28, %30
  %32 = xor i32 %10, -1
  %33 = and i32 %11, %32
  %34 = and i32 %7, %6
  %35 = or i32 %4, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %36, %2
  %38 = or i32 %8, %19
  %39 = and i32 %11, %18
  %40 = or i32 %11, %10
  %41 = or i32 %15, %36
  %42 = and i32 %18, %12
  %43 = and i32 %6, %2
  %44 = xor i32 %0, -1
  %45 = or i32 %15, %1
  %46 = or i32 %45, %44
  %47 = xor i32 %25, -1
  %48 = and i32 %47, %2
  %49 = or i32 %15, %0
  %50 = and i32 %49, %1
  %51 = shl i32 %50, 1
  %52 = and i32 %2, %0
  %53 = or i32 %52, %1
  %54 = shl i32 %53, 1
  %55 = and i32 %4, %2
  %56 = and i32 %55, %0
  %57 = or i32 %4, %2
  %58 = xor i32 %57, %0
  %59 = or i32 %56, %58
  %60 = or i32 %32, %2
  %61 = or i32 %11, %36
  %62 = or i32 %26, %32
  %63 = or i32 %29, %44
  %64 = shl i32 %63, 1
  %65 = xor i32 %52, %35
  %66 = or i32 %5, %2
  %67 = and i32 %15, %47
  %68 = and i32 %15, %0
  %69 = xor i32 %68, -1
  %70 = and i32 %69, %1
  %71 = and i32 %23, %44
  %72 = xor i32 %30, -1
  %73 = xor i32 %28, %72
  %74 = or i32 %29, %0
  %75 = xor i32 %52, -1
  %76 = and i32 %75, %4
  %77 = xor i32 %68, %45
  %78 = and i32 %21, %44
  %79 = and i32 %7, %0
  %80 = or i32 %78, %79
  %81 = and i32 %69, %4
  %82 = xor i32 %5, %23
  %83 = or i32 %11, %5
  %84 = shl i32 %83, 1
  %85 = xor i32 %52, %1
  %86 = xor i32 %49, -1
  %87 = or i32 %10, %86
  %88 = xor i32 %47, %2
  %89 = and i32 %11, %10
  %90 = and i32 %11, %35
  %91 = xor i32 %6, %2
  %92 = xor i32 %45, %0
  %93 = and i32 %12, %1
  %94 = shl i32 %93, 1
  %95 = and i32 %7, %44
  %96 = or i32 %28, %95
  %97 = or i32 %52, %10
  %98 = xor i32 %68, %23
  %99 = and i32 %29, %0
  %100 = shl i32 %26, 1
  %101 = or i32 %5, %8
  %102 = and i32 %15, %1
  %103 = xor i32 %102, %6
  %104 = xor i32 %35, %2
  %105 = xor i32 %45, -1
  %106 = xor i32 %105, %0
  %107 = or i32 %7, %5
  %108 = or i32 %105, %44
  %109 = shl i32 %108, 1
  %110 = and i32 %35, %15
  %111 = add i32 %35, 1
  %112 = or i32 %10, %2
  %113 = or i32 %10, %26
  %114 = and i32 %49, %4
  %115 = and i32 %8, %44
  %116 = or i32 %12, %32
  %117 = xor i32 %26, %1
  %118 = and i32 %10, %15
  %119 = or i32 %19, %2
  %120 = or i32 %68, %32
  %121 = xor i32 %29, -1
  %122 = xor i32 %121, %0
  %123 = and i32 %49, %32
  %124 = shl i32 %75, 1
  %125 = xor i32 %49, %25
  %126 = shl i32 %125, 1
  %127 = xor i32 %18, %2
  %128 = and i32 %75, %1
  %129 = or i32 %15, %32
  %130 = shl i32 %129, 1
  %131 = and i32 %18, %8
  %132 = and i32 %45, %0
  %133 = or i32 %5, %15
  %134 = or i32 %25, %15
  %135 = shl i32 %134, 1
  %136 = and i32 %12, %4
  %137 = and i32 %11, %47
  %138 = or i32 %52, %121
  %139 = and i32 %8, %0
  %140 = and i32 %29, %44
  %141 = add i32 %11, 1
  %142 = and i32 %55, %44
  %143 = or i32 %7, %44
  %144 = xor i32 %143, -1
  %145 = or i32 %142, %144
  %146 = and i32 %10, %12
  %147 = or i32 %102, %0
  %148 = xor i32 %52, %29
  %149 = xor i32 %29, %25
  %150 = shl i32 %149, 1
  %151 = xor i32 %25, %2
  %152 = xor i32 %7, %0
  %153 = or i32 %28, %140
  %154 = and i32 %17, %1
  %155 = xor i32 %49, %1
  %156 = and i32 %18, %15
  %157 = or i32 %68, %21
  %158 = xor i32 %17, %25
  %159 = or i32 %25, %8
  %160 = or i32 %21, %44
  %161 = and i32 %10, %2
  %162 = or i32 %12, %4
  %163 = xor i32 %57, -1
  %164 = or i32 %163, %0
  %165 = xor i32 %56, %164
  %166 = or i32 %36, %2
  %167 = or i32 %7, %19
  %168 = and i32 %57, %0
  %169 = or i32 %142, %168
  %170 = and i32 %75, %32
  %171 = shl i32 %170, 1
  %172 = xor i32 %21, %0
  %173 = or i32 %7, %25
  %174 = add i32 %68, 1
  %175 = and i32 %7, %47
  %176 = and i32 %8, %47
  %177 = shl i32 %176, 2
  %178 = or i32 %68, %105
  %179 = shl i32 %178, 1
  %180 = or i32 %25, %12
  %181 = or i32 %12, %36
  %182 = or i32 %26, %1
  %183 = and i32 %11, %6
  %184 = and i32 %12, %47
  %185 = and i32 %45, %44
  %186 = or i32 %78, %99
  %187 = and i32 %35, %2
  %188 = xor i32 %152, 2147483647
  %189 = xor i32 %188, %56
  %190 = or i32 %11, %1
  %191 = and i32 %17, %10
  %192 = or i32 %7, %0
  %193 = shl i32 %1, 1
  %194 = and i32 %12, %6
  %195 = or i32 %102, %44
  %196 = or i32 %23, %0
  %197 = or i32 %52, %36
  %198 = or i32 %21, %0
  %199 = or i32 %52, %4
  %200 = xor i32 %102, %0
  %201 = xor i32 %28, %152
  %202 = or i32 %121, %0
  %203 = or i32 %10, %15
  %204 = and i32 %121, %44
  %205 = and i32 %102, %44
  %206 = and i32 %121, %0
  %207 = and i32 %102, %0
  %208 = and i32 %105, %44
  %209 = and i32 %105, %0
  %210 = add i32 %10, %4
  %211 = add i32 %210, %166
  %212 = add i32 %211, %110
  %213 = add i32 %212, %199
  %214 = add i32 %213, %196
  %215 = add i32 %214, %183
  %216 = add i32 %215, %180
  %217 = add i32 %216, %175
  %218 = add i32 %217, %172
  %219 = add i32 %218, %147
  %220 = add i32 %219, %139
  %221 = add i32 %220, %116
  %222 = add i32 %221, %30
  %223 = add i32 %222, %98
  %224 = add i32 %223, %92
  %225 = add i32 %224, %82
  %226 = add i32 %225, %189
  %227 = shl i32 %226, 1
  %228 = sub i32 %25, %187
  %229 = sub i32 %228, %49
  %230 = sub i32 %229, %206
  %231 = add i32 %230, %208
  %232 = add i32 %231, %137
  %233 = mul i32 %232, 3
  %234 = or i32 %28, %205
  %235 = sub i32 %234, %204
  %236 = mul i32 %235, 7
  %237 = add i32 %152, %37
  %238 = sub i32 %209, %237
  %239 = mul i32 %238, 5
  %240 = or i32 %78, %207
  %241 = mul i32 %240, -14
  %242 = add i32 %27, %104
  %243 = shl i32 %242, 2
  %244 = add i32 %18, -1
  %245 = add i32 %244, %47
  %246 = add i32 %245, %111
  %247 = add i32 %246, %2
  %248 = sub i32 %247, %193
  %249 = add i32 %248, %17
  %250 = add i32 %249, %16
  %251 = add i32 %250, %41
  %252 = sub i32 %251, %43
  %253 = sub i32 %252, %48
  %254 = add i32 %253, %60
  %255 = sub i32 %254, %66
  %256 = sub i32 %255, %67
  %257 = add i32 %256, %23
  %258 = sub i32 %257, %88
  %259 = sub i32 %258, %91
  %260 = sub i32 %259, %112
  %261 = add i32 %260, %102
  %262 = sub i32 %261, %118
  %263 = sub i32 %262, %119
  %264 = add i32 %263, %52
  %265 = sub i32 %264, %127
  %266 = sub i32 %265, %133
  %267 = add i32 %266, %141
  %268 = add i32 %267, %151
  %269 = sub i32 %268, %156
  %270 = add i32 %269, %161
  %271 = add i32 %270, %174
  %272 = add i32 %271, %11
  %273 = sub i32 %272, %203
  %274 = sub i32 %273, %20
  %275 = add i32 %274, %22
  %276 = add i32 %275, %24
  %277 = sub i32 %276, %33
  %278 = sub i32 %277, %34
  %279 = add i32 %278, %38
  %280 = add i32 %279, %39
  %281 = sub i32 %280, %40
  %282 = sub i32 %281, %42
  %283 = sub i32 %282, %46
  %284 = add i32 %283, %61
  %285 = add i32 %284, %62
  %286 = add i32 %285, %65
  %287 = add i32 %286, %70
  %288 = sub i32 %287, %71
  %289 = sub i32 %288, %74
  %290 = add i32 %289, %76
  %291 = add i32 %290, %77
  %292 = sub i32 %291, %81
  %293 = add i32 %292, %85
  %294 = add i32 %293, %87
  %295 = sub i32 %294, %89
  %296 = add i32 %295, %90
  %297 = sub i32 %296, %97
  %298 = sub i32 %297, %99
  %299 = sub i32 %298, %100
  %300 = sub i32 %299, %101
  %301 = sub i32 %300, %103
  %302 = add i32 %301, %106
  %303 = sub i32 %302, %107
  %304 = add i32 %303, %113
  %305 = sub i32 %304, %114
  %306 = sub i32 %305, %115
  %307 = add i32 %306, %117
  %308 = sub i32 %307, %120
  %309 = sub i32 %308, %122
  %310 = add i32 %309, %123
  %311 = sub i32 %310, %124
  %312 = add i32 %311, %128
  %313 = sub i32 %312, %130
  %314 = add i32 %313, %131
  %315 = sub i32 %314, %132
  %316 = sub i32 %315, %135
  %317 = sub i32 %316, %136
  %318 = add i32 %317, %138
  %319 = add i32 %318, %140
  %320 = add i32 %319, %146
  %321 = add i32 %320, %148
  %322 = sub i32 %321, %154
  %323 = add i32 %322, %155
  %324 = add i32 %323, %157
  %325 = sub i32 %324, %158
  %326 = sub i32 %325, %159
  %327 = add i32 %326, %160
  %328 = add i32 %327, %162
  %329 = add i32 %328, %167
  %330 = sub i32 %329, %173
  %331 = sub i32 %330, %181
  %332 = sub i32 %331, %182
  %333 = sub i32 %332, %184
  %334 = add i32 %333, %185
  %335 = add i32 %334, %190
  %336 = sub i32 %335, %191
  %337 = sub i32 %336, %192
  %338 = add i32 %337, %194
  %339 = add i32 %338, %195
  %340 = add i32 %339, %197
  %341 = add i32 %340, %198
  %342 = sub i32 %341, %200
  %343 = sub i32 %342, %143
  %344 = add i32 %343, %202
  %345 = add i32 %344, %31
  %346 = sub i32 %345, %51
  %347 = sub i32 %346, %54
  %348 = add i32 %347, %59
  %349 = sub i32 %348, %64
  %350 = add i32 %349, %73
  %351 = sub i32 %350, %80
  %352 = sub i32 %351, %84
  %353 = sub i32 %352, %94
  %354 = sub i32 %353, %96
  %355 = sub i32 %354, %109
  %356 = sub i32 %355, %126
  %357 = sub i32 %356, %145
  %358 = sub i32 %357, %150
  %359 = add i32 %358, %153
  %360 = add i32 %359, %165
  %361 = sub i32 %360, %169
  %362 = sub i32 %361, %171
  %363 = sub i32 %362, %177
  %364 = sub i32 %363, %179
  %365 = add i32 %364, %186
  %366 = add i32 %365, %201
  %367 = add i32 %366, %241
  %368 = add i32 %367, %243
  %369 = add i32 %368, %236
  %370 = add i32 %369, %239
  %371 = add i32 %370, %233
  %372 = add i32 %371, %227
  %373 = icmp eq i32 %14, %372
  %374 = select i1 %373, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %375 = tail call i32 @puts(i8* nonnull dereferenceable(1) %374)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
