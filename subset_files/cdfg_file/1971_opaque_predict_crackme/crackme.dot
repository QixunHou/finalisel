digraph "DFG for'crackme' function" {
	Node0xa71bb0[shape=record, label="  %3 = sub i32 0, %1"];
	Node0xa71c20[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0xa71ce0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xa71d50[shape=record, label="  %6 = and i32 %5, %0"];
	Node0xa71df0[shape=record, label="  %7 = shl i32 %4, 1"];
	Node0xa71e90[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0xa71f00[shape=record, label="  %9 = or i32 %1, %0"];
	Node0xa71f70[shape=record, label="  %10 = or i32 %5, %0"];
	Node0xa71fe0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0xa72050[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0xa720c0[shape=record, label="  %13 = shl i32 %5, 1"];
	Node0xa72130[shape=record, label="  %14 = xor i32 %9, -1"];
	Node0xa721d0[shape=record, label="  %15 = mul i32 %14, 6"];
	Node0xa72240[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0xa722e0[shape=record, label="  %17 = mul i32 %0, -3"];
	Node0xa72350[shape=record, label="  %18 = sub i32 1, %4"];
	Node0xa723c0[shape=record, label="  %19 = add i32 %18, %6"];
	Node0xa72430[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0xa724a0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xa72510[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xa72580[shape=record, label="  %23 = add i32 %22, %13"];
	Node0xa725f0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0xa72660[shape=record, label="  %25 = add i32 %24, %8"];
	Node0xa726d0[shape=record, label="  %26 = add i32 %25, %17"];
	Node0xa72740[shape=record, label="  %27 = icmp eq i32 %26, %3"];
	Node0xa12268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa72be0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0xa72c30[shape=record, label="  ret void"];
	Node0xa71bb0 -> Node0xa71c20;
	Node0xa71c20 -> Node0xa71ce0;
	Node0xa71ce0 -> Node0xa71d50;
	Node0xa71d50 -> Node0xa71df0;
	Node0xa71df0 -> Node0xa71e90;
	Node0xa71e90 -> Node0xa71f00;
	Node0xa71f00 -> Node0xa71f70;
	Node0xa71f70 -> Node0xa71fe0;
	Node0xa71fe0 -> Node0xa72050;
	Node0xa72050 -> Node0xa720c0;
	Node0xa720c0 -> Node0xa72130;
	Node0xa72130 -> Node0xa721d0;
	Node0xa721d0 -> Node0xa72240;
	Node0xa72240 -> Node0xa722e0;
	Node0xa722e0 -> Node0xa72350;
	Node0xa72350 -> Node0xa723c0;
	Node0xa723c0 -> Node0xa72430;
	Node0xa72430 -> Node0xa724a0;
	Node0xa724a0 -> Node0xa72510;
	Node0xa72510 -> Node0xa72580;
	Node0xa72580 -> Node0xa725f0;
	Node0xa725f0 -> Node0xa72660;
	Node0xa72660 -> Node0xa726d0;
	Node0xa726d0 -> Node0xa72740;
	Node0xa72740 -> Node0xa12268;
	Node0xa12268 -> Node0xa72be0;
	Node0xa72be0 -> Node0xa72c30;
edge [color=red]
	Node0xa71ce0 -> Node0xa71d50;
	Node0xa71c20 -> Node0xa71df0;
	Node0xa71df0 -> Node0xa71e90;
	Node0xa71ce0 -> Node0xa71f70;
	Node0xa71fe0 -> Node0xa72050;
	Node0xa71ce0 -> Node0xa720c0;
	Node0xa71f00 -> Node0xa72130;
	Node0xa72130 -> Node0xa721d0;
	Node0xa721d0 -> Node0xa72240;
	Node0xa71c20 -> Node0xa72350;
	Node0xa72350 -> Node0xa723c0;
	Node0xa71d50 -> Node0xa723c0;
	Node0xa723c0 -> Node0xa72430;
	Node0xa71f00 -> Node0xa72430;
	Node0xa72430 -> Node0xa724a0;
	Node0xa71f70 -> Node0xa724a0;
	Node0xa724a0 -> Node0xa72510;
	Node0xa72050 -> Node0xa72510;
	Node0xa72510 -> Node0xa72580;
	Node0xa720c0 -> Node0xa72580;
	Node0xa72580 -> Node0xa725f0;
	Node0xa72240 -> Node0xa725f0;
	Node0xa725f0 -> Node0xa72660;
	Node0xa71e90 -> Node0xa72660;
	Node0xa72660 -> Node0xa726d0;
	Node0xa722e0 -> Node0xa726d0;
	Node0xa726d0 -> Node0xa72740;
	Node0xa71bb0 -> Node0xa72740;
	Node0xa72740 -> Node0xa12268;
	Node0xa12268 -> Node0xa72be0;
}
