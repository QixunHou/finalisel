digraph "DFG for'crackme' function" {
	Node0x1efb5e0[shape=record, label="  %4 = xor i32 %2, %0"];
	Node0x1efbcb0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x1efbd50[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x1efbdc0[shape=record, label="  %7 = and i32 %2, %1"];
	Node0x1efbe30[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x1efbea0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x1efbf10[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x1efbf80[shape=record, label="  %11 = and i32 %10, %9"];
	Node0x1efbff0[shape=record, label="  %12 = or i32 %8, %11"];
	Node0x1efc090[shape=record, label="  %13 = shl i32 %12, 2"];
	Node0x1efc100[shape=record, label="  %14 = add i32 %13, %6"];
	Node0x1efc170[shape=record, label="  %15 = xor i32 %2, -1"];
	Node0x1efc1e0[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x1efc250[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1efc2c0[shape=record, label="  %18 = or i32 %17, %0"];
	Node0x1efc330[shape=record, label="  %19 = xor i32 %1, -1"];
	Node0x1efc3a0[shape=record, label="  %20 = or i32 %19, %0"];
	Node0x1efc410[shape=record, label="  %21 = and i32 %20, %15"];
	Node0x1efc480[shape=record, label="  %22 = and i32 %1, %0"];
	Node0x1efc520[shape=record, label="  %23 = xor i32 %22, 2147483647"];
	Node0x1efc590[shape=record, label="  %24 = xor i32 %23, %2"];
	Node0x1efc630[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1efc6a0[shape=record, label="  %26 = xor i32 %20, -1"];
	Node0x1efc710[shape=record, label="  %27 = or i32 %4, %26"];
	Node0x1efc780[shape=record, label="  %28 = xor i32 %10, -1"];
	Node0x1efc7f0[shape=record, label="  %29 = and i32 %28, %9"];
	Node0x1efc860[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x1efc8d0[shape=record, label="  %31 = and i32 %16, %9"];
	Node0x1efc940[shape=record, label="  %32 = and i32 %28, %0"];
	Node0x1efcbc0[shape=record, label="  %33 = and i32 %16, %0"];
	Node0x1efcc30[shape=record, label="  %34 = and i32 %19, %2"];
	Node0x1efcca0[shape=record, label="  %35 = and i32 %34, %9"];
	Node0x1efcd10[shape=record, label="  %36 = and i32 %7, %9"];
	Node0x1efcd80[shape=record, label="  %37 = and i32 %34, %0"];
	Node0x1efce20[shape=record, label="  %38 = mul i32 %8, 5"];
	Node0x1efce90[shape=record, label="  %39 = add i32 %36, %35"];
	Node0x1efcf00[shape=record, label="  %40 = shl i32 %39, 2"];
	Node0x1efcf70[shape=record, label="  %41 = or i32 %32, %31"];
	Node0x1efd010[shape=record, label="  %42 = mul i32 %41, 3"];
	Node0x1efd080[shape=record, label="  %43 = add i32 %18, %21"];
	Node0x1efd0f0[shape=record, label="  %44 = sub i32 %27, %43"];
	Node0x1efd160[shape=record, label="  %45 = add i32 %44, %33"];
	Node0x1efd1d0[shape=record, label="  %46 = sub i32 %45, %37"];
	Node0x1efd240[shape=record, label="  %47 = sub i32 %46, %25"];
	Node0x1efd2b0[shape=record, label="  %48 = add i32 %47, %30"];
	Node0x1efd320[shape=record, label="  %49 = add i32 %48, %38"];
	Node0x1efd390[shape=record, label="  %50 = add i32 %49, %40"];
	Node0x1efd400[shape=record, label="  %51 = add i32 %50, %42"];
	Node0x1efd470[shape=record, label="  %52 = icmp eq i32 %14, %51"];
	Node0x1e9c268[shape=record, label="  %53 = select i1 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1efd910[shape=record, label="  %54 = tail call i32 @puts(i8* nonnull dereferenceable(1) %53)"];
	Node0x1efd960[shape=record, label="  ret void"];
	Node0x1efb5e0 -> Node0x1efbcb0;
	Node0x1efbcb0 -> Node0x1efbd50;
	Node0x1efbd50 -> Node0x1efbdc0;
	Node0x1efbdc0 -> Node0x1efbe30;
	Node0x1efbe30 -> Node0x1efbea0;
	Node0x1efbea0 -> Node0x1efbf10;
	Node0x1efbf10 -> Node0x1efbf80;
	Node0x1efbf80 -> Node0x1efbff0;
	Node0x1efbff0 -> Node0x1efc090;
	Node0x1efc090 -> Node0x1efc100;
	Node0x1efc100 -> Node0x1efc170;
	Node0x1efc170 -> Node0x1efc1e0;
	Node0x1efc1e0 -> Node0x1efc250;
	Node0x1efc250 -> Node0x1efc2c0;
	Node0x1efc2c0 -> Node0x1efc330;
	Node0x1efc330 -> Node0x1efc3a0;
	Node0x1efc3a0 -> Node0x1efc410;
	Node0x1efc410 -> Node0x1efc480;
	Node0x1efc480 -> Node0x1efc520;
	Node0x1efc520 -> Node0x1efc590;
	Node0x1efc590 -> Node0x1efc630;
	Node0x1efc630 -> Node0x1efc6a0;
	Node0x1efc6a0 -> Node0x1efc710;
	Node0x1efc710 -> Node0x1efc780;
	Node0x1efc780 -> Node0x1efc7f0;
	Node0x1efc7f0 -> Node0x1efc860;
	Node0x1efc860 -> Node0x1efc8d0;
	Node0x1efc8d0 -> Node0x1efc940;
	Node0x1efc940 -> Node0x1efcbc0;
	Node0x1efcbc0 -> Node0x1efcc30;
	Node0x1efcc30 -> Node0x1efcca0;
	Node0x1efcca0 -> Node0x1efcd10;
	Node0x1efcd10 -> Node0x1efcd80;
	Node0x1efcd80 -> Node0x1efce20;
	Node0x1efce20 -> Node0x1efce90;
	Node0x1efce90 -> Node0x1efcf00;
	Node0x1efcf00 -> Node0x1efcf70;
	Node0x1efcf70 -> Node0x1efd010;
	Node0x1efd010 -> Node0x1efd080;
	Node0x1efd080 -> Node0x1efd0f0;
	Node0x1efd0f0 -> Node0x1efd160;
	Node0x1efd160 -> Node0x1efd1d0;
	Node0x1efd1d0 -> Node0x1efd240;
	Node0x1efd240 -> Node0x1efd2b0;
	Node0x1efd2b0 -> Node0x1efd320;
	Node0x1efd320 -> Node0x1efd390;
	Node0x1efd390 -> Node0x1efd400;
	Node0x1efd400 -> Node0x1efd470;
	Node0x1efd470 -> Node0x1e9c268;
	Node0x1e9c268 -> Node0x1efd910;
	Node0x1efd910 -> Node0x1efd960;
edge [color=red]
	Node0x1efb5e0 -> Node0x1efbcb0;
	Node0x1efbcb0 -> Node0x1efbd50;
	Node0x1efbdc0 -> Node0x1efbe30;
	Node0x1efbf10 -> Node0x1efbf80;
	Node0x1efbea0 -> Node0x1efbf80;
	Node0x1efbe30 -> Node0x1efbff0;
	Node0x1efbf80 -> Node0x1efbff0;
	Node0x1efbff0 -> Node0x1efc090;
	Node0x1efc090 -> Node0x1efc100;
	Node0x1efbd50 -> Node0x1efc100;
	Node0x1efc170 -> Node0x1efc1e0;
	Node0x1efc1e0 -> Node0x1efc250;
	Node0x1efc250 -> Node0x1efc2c0;
	Node0x1efc330 -> Node0x1efc3a0;
	Node0x1efc3a0 -> Node0x1efc410;
	Node0x1efc170 -> Node0x1efc410;
	Node0x1efc480 -> Node0x1efc520;
	Node0x1efc520 -> Node0x1efc590;
	Node0x1efc590 -> Node0x1efc630;
	Node0x1efc3a0 -> Node0x1efc6a0;
	Node0x1efb5e0 -> Node0x1efc710;
	Node0x1efc6a0 -> Node0x1efc710;
	Node0x1efbf10 -> Node0x1efc780;
	Node0x1efc780 -> Node0x1efc7f0;
	Node0x1efbea0 -> Node0x1efc7f0;
	Node0x1efc7f0 -> Node0x1efc860;
	Node0x1efc1e0 -> Node0x1efc8d0;
	Node0x1efbea0 -> Node0x1efc8d0;
	Node0x1efc780 -> Node0x1efc940;
	Node0x1efc1e0 -> Node0x1efcbc0;
	Node0x1efc330 -> Node0x1efcc30;
	Node0x1efcc30 -> Node0x1efcca0;
	Node0x1efbea0 -> Node0x1efcca0;
	Node0x1efbdc0 -> Node0x1efcd10;
	Node0x1efbea0 -> Node0x1efcd10;
	Node0x1efcc30 -> Node0x1efcd80;
	Node0x1efbe30 -> Node0x1efce20;
	Node0x1efcd10 -> Node0x1efce90;
	Node0x1efcca0 -> Node0x1efce90;
	Node0x1efce90 -> Node0x1efcf00;
	Node0x1efc940 -> Node0x1efcf70;
	Node0x1efc8d0 -> Node0x1efcf70;
	Node0x1efcf70 -> Node0x1efd010;
	Node0x1efc2c0 -> Node0x1efd080;
	Node0x1efc410 -> Node0x1efd080;
	Node0x1efc710 -> Node0x1efd0f0;
	Node0x1efd080 -> Node0x1efd0f0;
	Node0x1efd0f0 -> Node0x1efd160;
	Node0x1efcbc0 -> Node0x1efd160;
	Node0x1efd160 -> Node0x1efd1d0;
	Node0x1efcd80 -> Node0x1efd1d0;
	Node0x1efd1d0 -> Node0x1efd240;
	Node0x1efc630 -> Node0x1efd240;
	Node0x1efd240 -> Node0x1efd2b0;
	Node0x1efc860 -> Node0x1efd2b0;
	Node0x1efd2b0 -> Node0x1efd320;
	Node0x1efce20 -> Node0x1efd320;
	Node0x1efd320 -> Node0x1efd390;
	Node0x1efcf00 -> Node0x1efd390;
	Node0x1efd390 -> Node0x1efd400;
	Node0x1efd010 -> Node0x1efd400;
	Node0x1efc100 -> Node0x1efd470;
	Node0x1efd400 -> Node0x1efd470;
	Node0x1efd470 -> Node0x1e9c268;
	Node0x1e9c268 -> Node0x1efd910;
}
