; ModuleID = '../.././c_source_file/1293_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1293_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = xor i32 %2, -1
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = add i32 %6, 2
  %13 = add i32 %12, %11
  %14 = add i32 %13, %4
  %15 = xor i32 %4, %3
  %16 = and i32 %4, %3
  %17 = or i32 %4, %3
  %18 = xor i32 %3, -1
  %19 = xor i32 %15, -1
  %20 = xor i32 %3, 2147483647
  %21 = or i32 %20, %4
  %22 = shl i32 %21, 1
  %23 = and i32 %18, %4
  %24 = and i32 %2, %0
  %25 = xor i32 %24, %1
  %26 = xor i32 %0, -1
  %27 = or i32 %8, %1
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %26
  %30 = xor i32 %1, -1
  %31 = or i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %8, %32
  %34 = and i32 %8, %1
  %35 = or i32 %24, %34
  %36 = xor i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %32
  %39 = or i32 %1, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %37, %40
  %42 = and i32 %36, %30
  %43 = and i32 %9, %2
  %44 = and i32 %30, %2
  %45 = and i32 %44, %0
  %46 = or i32 %30, %2
  %47 = xor i32 %46, %26
  %48 = xor i32 %47, %45
  %49 = or i32 %2, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %1
  %52 = xor i32 %2, %1
  %53 = xor i32 %52, -1
  %54 = or i32 %53, %40
  %55 = or i32 %40, %2
  %56 = or i32 %8, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %9, %57
  %59 = and i32 %30, %0
  %60 = or i32 %34, %59
  %61 = xor i32 %39, %2
  %62 = and i32 %39, %8
  %63 = and i32 %1, %0
  %64 = or i32 %63, %37
  %65 = or i32 %36, %63
  %66 = and i32 %8, %0
  %67 = or i32 %66, %28
  %68 = or i32 %2, %1
  %69 = xor i32 %68, -1
  %70 = or i32 %69, %26
  %71 = or i32 %6, %59
  %72 = and i32 %52, %26
  %73 = or i32 %59, %8
  %74 = or i32 %57, %10
  %75 = or i32 %8, %10
  %76 = or i32 %63, %28
  %77 = xor i32 %27, %63
  %78 = xor i32 %59, -1
  %79 = xor i32 %78, %2
  %80 = and i32 %6, %0
  %81 = and i32 %68, %26
  %82 = xor i32 %81, 2147483647
  %83 = xor i32 %82, %80
  %84 = or i32 %52, %0
  %85 = xor i32 %84, -1
  %86 = or i32 %45, %85
  %87 = and i32 %37, %1
  %88 = and i32 %31, %53
  %89 = and i32 %36, %1
  %90 = or i32 %7, %0
  %91 = shl i32 %90, 1
  %92 = and i32 %36, %9
  %93 = shl i32 %92, 1
  %94 = and i32 %27, %0
  %95 = and i32 %49, %1
  %96 = xor i32 %52, %0
  %97 = xor i32 %80, %96
  %98 = or i32 %66, %30
  %99 = or i32 %59, %2
  %100 = or i32 %52, %63
  %101 = shl i32 %100, 1
  %102 = xor i32 %63, -1
  %103 = and i32 %102, %2
  %104 = or i32 %24, %32
  %105 = and i32 %7, %0
  %106 = or i32 %9, %50
  %107 = and i32 %53, %0
  %108 = xor i32 %66, %30
  %109 = shl i32 %10, 1
  %110 = or i32 %66, %9
  %111 = and i32 %56, %1
  %112 = and i32 %31, %37
  %113 = shl i32 %112, 1
  %114 = xor i32 %34, -1
  %115 = and i32 %114, %26
  %116 = and i32 %39, %37
  %117 = and i32 %78, %2
  %118 = and i32 %8, %78
  %119 = and i32 %36, %10
  %120 = or i32 %52, %32
  %121 = shl i32 %120, 1
  %122 = and i32 %44, %26
  %123 = and i32 %46, %0
  %124 = xor i32 %123, 2147483647
  %125 = xor i32 %124, %122
  %126 = and i32 %46, %26
  %127 = or i32 %45, %126
  %128 = or i32 %57, %1
  %129 = and i32 %52, %39
  %130 = and i32 %37, %78
  %131 = or i32 %50, %30
  %132 = or i32 %24, %40
  %133 = and i32 %56, %9
  %134 = and i32 %31, %2
  %135 = shl i32 %134, 1
  %136 = or i32 %53, %26
  %137 = or i32 %53, %32
  %138 = and i32 %6, %26
  %139 = and i32 %68, %0
  %140 = or i32 %138, %139
  %141 = add i32 %2, 1
  %142 = or i32 %53, %0
  %143 = or i32 %8, %40
  %144 = or i32 %63, %50
  %145 = shl i32 %144, 1
  %146 = or i32 %36, %59
  %147 = and i32 %39, %53
  %148 = or i32 %68, %0
  %149 = xor i32 %45, %84
  %150 = xor i32 %96, -1
  %151 = or i32 %80, %150
  %152 = and i32 %10, %2
  %153 = or i32 %9, %2
  %154 = or i32 %24, %30
  %155 = shl i32 %154, 2
  %156 = xor i32 %68, %0
  %157 = or i32 %80, %156
  %158 = xor i32 %24, -1
  %159 = and i32 %158, %30
  %160 = and i32 %9, %8
  %161 = xor i32 %66, %27
  %162 = or i32 %63, %53
  %163 = or i32 %24, %9
  %164 = xor i32 %24, %68
  %165 = and i32 %56, %30
  %166 = add i32 %39, 1
  %167 = shl i32 %34, 1
  %168 = xor i32 %24, %114
  %169 = shl i32 %168, 1
  %170 = and i32 %56, %10
  %171 = or i32 %80, %72
  %172 = and i32 %49, %30
  %173 = and i32 %52, %0
  %174 = xor i32 %173, -1
  %175 = xor i32 %138, %174
  %176 = xor i32 %6, %0
  %177 = and i32 %53, %78
  %178 = xor i32 %40, %2
  %179 = or i32 %9, %8
  %180 = or i32 %36, %9
  %181 = xor i32 %56, %63
  %182 = shl i32 %181, 1
  %183 = or i32 %36, %40
  %184 = or i32 %63, %69
  %185 = xor i32 %31, %2
  %186 = xor i32 %32, %2
  %187 = and i32 %69, %26
  %188 = and i32 %34, %26
  %189 = and i32 %69, %0
  %190 = and i32 %34, %0
  %191 = shl i32 %190, 3
  %192 = and i32 %28, %26
  %193 = mul i32 %192, 9
  %194 = and i32 %28, %0
  %195 = mul i32 %194, 15
  %196 = mul i32 %80, 14
  %197 = add i32 %118, %178
  %198 = add i32 %197, %75
  %199 = add i32 %198, %164
  %200 = add i32 %199, %131
  %201 = add i32 %200, %115
  %202 = add i32 %201, %81
  %203 = add i32 %202, %98
  %204 = add i32 %203, %88
  %205 = add i32 %204, %140
  %206 = sub i32 %141, %62
  %207 = add i32 %206, %89
  %208 = mul i32 %207, 5
  %209 = sub i32 %189, %138
  %210 = mul i32 %209, 10
  %211 = add i32 %188, %187
  %212 = mul i32 %211, 11
  %213 = add i32 %23, %58
  %214 = mul i32 %213, 3
  %215 = add i32 %205, %16
  %216 = add i32 %215, %83
  %217 = add i32 %216, %125
  %218 = shl i32 %217, 1
  %219 = sub i32 1, %31
  %220 = sub i32 %219, %59
  %221 = add i32 %220, %39
  %222 = add i32 %221, %166
  %223 = sub i32 %222, %63
  %224 = add i32 %223, %18
  %225 = sub i32 %224, %33
  %226 = sub i32 %225, %43
  %227 = sub i32 %226, %55
  %228 = sub i32 %227, %61
  %229 = sub i32 %228, %73
  %230 = add i32 %229, %79
  %231 = sub i32 %230, %36
  %232 = add i32 %231, %6
  %233 = add i32 %232, %99
  %234 = sub i32 %233, %103
  %235 = add i32 %234, %28
  %236 = sub i32 %235, %27
  %237 = sub i32 %236, %109
  %238 = sub i32 %237, %56
  %239 = add i32 %238, %53
  %240 = sub i32 %239, %117
  %241 = sub i32 %240, %52
  %242 = add i32 %241, %143
  %243 = sub i32 %242, %152
  %244 = sub i32 %243, %153
  %245 = add i32 %244, %158
  %246 = add i32 %245, %160
  %247 = sub i32 %246, %179
  %248 = add i32 %247, %114
  %249 = add i32 %248, %185
  %250 = sub i32 %249, %186
  %251 = sub i32 %250, %4
  %252 = add i32 %251, %25
  %253 = sub i32 %252, %29
  %254 = sub i32 %253, %35
  %255 = add i32 %254, %38
  %256 = add i32 %255, %41
  %257 = add i32 %256, %42
  %258 = add i32 %257, %51
  %259 = add i32 %258, %54
  %260 = sub i32 %259, %60
  %261 = sub i32 %260, %64
  %262 = add i32 %261, %65
  %263 = sub i32 %262, %67
  %264 = sub i32 %263, %70
  %265 = sub i32 %264, %71
  %266 = sub i32 %265, %72
  %267 = add i32 %266, %74
  %268 = sub i32 %267, %76
  %269 = add i32 %268, %77
  %270 = add i32 %269, %87
  %271 = add i32 %270, %94
  %272 = sub i32 %271, %95
  %273 = sub i32 %272, %104
  %274 = add i32 %273, %105
  %275 = add i32 %274, %106
  %276 = add i32 %275, %107
  %277 = sub i32 %276, %108
  %278 = add i32 %277, %110
  %279 = add i32 %278, %111
  %280 = sub i32 %279, %116
  %281 = add i32 %280, %119
  %282 = add i32 %281, %128
  %283 = add i32 %282, %129
  %284 = sub i32 %283, %130
  %285 = add i32 %284, %132
  %286 = sub i32 %285, %133
  %287 = sub i32 %286, %135
  %288 = sub i32 %287, %136
  %289 = sub i32 %288, %137
  %290 = sub i32 %289, %142
  %291 = sub i32 %290, %146
  %292 = add i32 %291, %147
  %293 = add i32 %292, %148
  %294 = sub i32 %293, %139
  %295 = sub i32 %294, %159
  %296 = sub i32 %295, %161
  %297 = sub i32 %296, %162
  %298 = add i32 %297, %163
  %299 = add i32 %298, %165
  %300 = sub i32 %299, %167
  %301 = add i32 %300, %170
  %302 = sub i32 %301, %172
  %303 = add i32 %302, %176
  %304 = sub i32 %303, %177
  %305 = sub i32 %304, %180
  %306 = add i32 %305, %183
  %307 = sub i32 %306, %184
  %308 = sub i32 %307, %15
  %309 = add i32 %308, %17
  %310 = add i32 %309, %19
  %311 = add i32 %310, %48
  %312 = sub i32 %311, %86
  %313 = sub i32 %312, %91
  %314 = sub i32 %313, %93
  %315 = add i32 %314, %97
  %316 = sub i32 %315, %101
  %317 = sub i32 %316, %113
  %318 = sub i32 %317, %121
  %319 = sub i32 %318, %127
  %320 = sub i32 %319, %145
  %321 = sub i32 %320, %149
  %322 = sub i32 %321, %151
  %323 = sub i32 %322, %155
  %324 = sub i32 %323, %157
  %325 = sub i32 %324, %169
  %326 = add i32 %325, %171
  %327 = sub i32 %326, %175
  %328 = sub i32 %327, %182
  %329 = add i32 %328, %191
  %330 = add i32 %329, %193
  %331 = add i32 %330, %195
  %332 = add i32 %331, %196
  %333 = sub i32 %332, %22
  %334 = add i32 %333, %210
  %335 = add i32 %334, %212
  %336 = add i32 %335, %208
  %337 = add i32 %336, %214
  %338 = add i32 %337, %218
  %339 = icmp eq i32 %14, %338
  %340 = select i1 %339, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %341 = tail call i32 @puts(i8* nonnull dereferenceable(1) %340)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
