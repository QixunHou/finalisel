digraph "DFG for'crackme' function" {
	Node0x2401550[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x2401c00[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x2401cc0[shape=record, label="  %5 = shl i32 %3, 1"];
	Node0x2401d30[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x2401dd0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x2401e40[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x2401eb0[shape=record, label="  %9 = or i32 %7, %0"];
	Node0x2401f20[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x2401f90[shape=record, label="  %11 = and i32 %7, %0"];
	Node0x2402030[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0x24020a0[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0x2402110[shape=record, label="  %14 = shl i32 %8, 1"];
	Node0x2402180[shape=record, label="  %15 = sub i32 %9, %10"];
	Node0x2402220[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x2402290[shape=record, label="  %17 = add i32 %0, %1"];
	Node0x2402330[shape=record, label="  %18 = add i32 %17, 6"];
	Node0x24023a0[shape=record, label="  %19 = add i32 %18, %1"];
	Node0x2402410[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x2402480[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x24024f0[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0x2402560[shape=record, label="  %23 = sub i32 %22, %13"];
	Node0x24025d0[shape=record, label="  %24 = add i32 %23, %14"];
	Node0x2402640[shape=record, label="  %25 = add i32 %24, %6"];
	Node0x24026b0[shape=record, label="  %26 = add i32 %25, %16"];
	Node0x2402720[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x23a2268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2402bc0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x2402c10[shape=record, label="  ret void"];
	Node0x2401550 -> Node0x2401c00;
	Node0x2401c00 -> Node0x2401cc0;
	Node0x2401cc0 -> Node0x2401d30;
	Node0x2401d30 -> Node0x2401dd0;
	Node0x2401dd0 -> Node0x2401e40;
	Node0x2401e40 -> Node0x2401eb0;
	Node0x2401eb0 -> Node0x2401f20;
	Node0x2401f20 -> Node0x2401f90;
	Node0x2401f90 -> Node0x2402030;
	Node0x2402030 -> Node0x24020a0;
	Node0x24020a0 -> Node0x2402110;
	Node0x2402110 -> Node0x2402180;
	Node0x2402180 -> Node0x2402220;
	Node0x2402220 -> Node0x2402290;
	Node0x2402290 -> Node0x2402330;
	Node0x2402330 -> Node0x24023a0;
	Node0x24023a0 -> Node0x2402410;
	Node0x2402410 -> Node0x2402480;
	Node0x2402480 -> Node0x24024f0;
	Node0x24024f0 -> Node0x2402560;
	Node0x2402560 -> Node0x24025d0;
	Node0x24025d0 -> Node0x2402640;
	Node0x2402640 -> Node0x24026b0;
	Node0x24026b0 -> Node0x2402720;
	Node0x2402720 -> Node0x23a2268;
	Node0x23a2268 -> Node0x2402bc0;
	Node0x2402bc0 -> Node0x2402c10;
edge [color=red]
	Node0x2401550 -> Node0x2401c00;
	Node0x2401550 -> Node0x2401cc0;
	Node0x2401cc0 -> Node0x2401d30;
	Node0x2401dd0 -> Node0x2401eb0;
	Node0x2401dd0 -> Node0x2401f90;
	Node0x2401f90 -> Node0x2402030;
	Node0x2401f20 -> Node0x24020a0;
	Node0x2401e40 -> Node0x2402110;
	Node0x2401eb0 -> Node0x2402180;
	Node0x2401f20 -> Node0x2402180;
	Node0x2402180 -> Node0x2402220;
	Node0x2402290 -> Node0x2402330;
	Node0x2402330 -> Node0x24023a0;
	Node0x24023a0 -> Node0x2402410;
	Node0x2401eb0 -> Node0x2402410;
	Node0x2402410 -> Node0x2402480;
	Node0x2401f90 -> Node0x2402480;
	Node0x2402480 -> Node0x24024f0;
	Node0x2402030 -> Node0x24024f0;
	Node0x24024f0 -> Node0x2402560;
	Node0x24020a0 -> Node0x2402560;
	Node0x2402560 -> Node0x24025d0;
	Node0x2402110 -> Node0x24025d0;
	Node0x24025d0 -> Node0x2402640;
	Node0x2401d30 -> Node0x2402640;
	Node0x2402640 -> Node0x24026b0;
	Node0x2402220 -> Node0x24026b0;
	Node0x2401c00 -> Node0x2402720;
	Node0x24026b0 -> Node0x2402720;
	Node0x2402720 -> Node0x23a2268;
	Node0x23a2268 -> Node0x2402bc0;
}
