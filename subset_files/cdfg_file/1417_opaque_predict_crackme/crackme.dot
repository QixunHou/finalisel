digraph "DFG for'crackme' function" {
	Node0x1406510[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1406bc0[shape=record, label="  %4 = shl i32 %1, 1"];
	Node0x1406c80[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x1406cf0[shape=record, label="  %6 = shl i32 %5, 2"];
	Node0x1406d90[shape=record, label="  %7 = xor i32 %6, -4"];
	Node0x1406e00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1406e70[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1406f10[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1406fb0[shape=record, label="  %11 = xor i32 %1, -1"];
	Node0x1407020[shape=record, label="  %12 = or i32 %11, %0"];
	Node0x1407090[shape=record, label="  %13 = shl i32 %0, 1"];
	Node0x1407100[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x14071a0[shape=record, label="  %15 = mul i32 %8, 7"];
	Node0x1407210[shape=record, label="  %16 = sub i32 1, %0"];
	Node0x1407280[shape=record, label="  %17 = sub i32 %16, %4"];
	Node0x14072f0[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x1407360[shape=record, label="  %19 = add i32 %18, %14"];
	Node0x14073d0[shape=record, label="  %20 = sub i32 %19, %5"];
	Node0x1407440[shape=record, label="  %21 = add i32 %20, %3"];
	Node0x14074b0[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x1407520[shape=record, label="  %23 = sub i32 %22, %7"];
	Node0x1407590[shape=record, label="  %24 = add i32 %23, %10"];
	Node0x1407600[shape=record, label="  %25 = icmp eq i32 %3, %24"];
	Node0x13a7268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1407aa0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1407af0[shape=record, label="  ret void"];
	Node0x1406510 -> Node0x1406bc0;
	Node0x1406bc0 -> Node0x1406c80;
	Node0x1406c80 -> Node0x1406cf0;
	Node0x1406cf0 -> Node0x1406d90;
	Node0x1406d90 -> Node0x1406e00;
	Node0x1406e00 -> Node0x1406e70;
	Node0x1406e70 -> Node0x1406f10;
	Node0x1406f10 -> Node0x1406fb0;
	Node0x1406fb0 -> Node0x1407020;
	Node0x1407020 -> Node0x1407090;
	Node0x1407090 -> Node0x1407100;
	Node0x1407100 -> Node0x14071a0;
	Node0x14071a0 -> Node0x1407210;
	Node0x1407210 -> Node0x1407280;
	Node0x1407280 -> Node0x14072f0;
	Node0x14072f0 -> Node0x1407360;
	Node0x1407360 -> Node0x14073d0;
	Node0x14073d0 -> Node0x1407440;
	Node0x1407440 -> Node0x14074b0;
	Node0x14074b0 -> Node0x1407520;
	Node0x1407520 -> Node0x1407590;
	Node0x1407590 -> Node0x1407600;
	Node0x1407600 -> Node0x13a7268;
	Node0x13a7268 -> Node0x1407aa0;
	Node0x1407aa0 -> Node0x1407af0;
edge [color=red]
	Node0x1406c80 -> Node0x1406cf0;
	Node0x1406cf0 -> Node0x1406d90;
	Node0x1406e00 -> Node0x1406e70;
	Node0x1406e70 -> Node0x1406f10;
	Node0x1406fb0 -> Node0x1407020;
	Node0x1407090 -> Node0x1407100;
	Node0x1406e00 -> Node0x14071a0;
	Node0x1407210 -> Node0x1407280;
	Node0x1406bc0 -> Node0x1407280;
	Node0x1407280 -> Node0x14072f0;
	Node0x1407020 -> Node0x14072f0;
	Node0x14072f0 -> Node0x1407360;
	Node0x1407100 -> Node0x1407360;
	Node0x1407360 -> Node0x14073d0;
	Node0x1406c80 -> Node0x14073d0;
	Node0x14073d0 -> Node0x1407440;
	Node0x1406510 -> Node0x1407440;
	Node0x1407440 -> Node0x14074b0;
	Node0x14071a0 -> Node0x14074b0;
	Node0x14074b0 -> Node0x1407520;
	Node0x1406d90 -> Node0x1407520;
	Node0x1407520 -> Node0x1407590;
	Node0x1406f10 -> Node0x1407590;
	Node0x1406510 -> Node0x1407600;
	Node0x1407590 -> Node0x1407600;
	Node0x1407600 -> Node0x13a7268;
	Node0x13a7268 -> Node0x1407aa0;
}
