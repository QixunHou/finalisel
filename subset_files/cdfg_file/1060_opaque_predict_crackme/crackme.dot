digraph "DFG for'crackme' function" {
	Node0xbd0af0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xbd0b60[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xbd0c20[shape=record, label="  %5 = and i32 %3, %0"];
	Node0xbd0c90[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0xbd0d00[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0xbd0d70[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xbd0de0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xbd0e80[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0xbd0ef0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0xbd0f90[shape=record, label="  %12 = shl i32 %4, 2"];
	Node0xbd1030[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0xbd10d0[shape=record, label="  %14 = mul i32 %5, -3"];
	Node0xbd1140[shape=record, label="  %15 = sub i32 1, %1"];
	Node0xbd11b0[shape=record, label="  %16 = add i32 %15, %5"];
	Node0xbd1220[shape=record, label="  %17 = add i32 %16, %6"];
	Node0xbd1290[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xbd1300[shape=record, label="  %19 = add i32 %18, %11"];
	Node0xbd1370[shape=record, label="  %20 = add i32 %19, %14"];
	Node0xbd13e0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xbd1450[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0xbd14c0[shape=record, label="  %23 = icmp eq i32 %4, %22"];
	Node0xb71268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbd1960[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xbd19b0[shape=record, label="  ret void"];
	Node0xbd0af0 -> Node0xbd0b60;
	Node0xbd0b60 -> Node0xbd0c20;
	Node0xbd0c20 -> Node0xbd0c90;
	Node0xbd0c90 -> Node0xbd0d00;
	Node0xbd0d00 -> Node0xbd0d70;
	Node0xbd0d70 -> Node0xbd0de0;
	Node0xbd0de0 -> Node0xbd0e80;
	Node0xbd0e80 -> Node0xbd0ef0;
	Node0xbd0ef0 -> Node0xbd0f90;
	Node0xbd0f90 -> Node0xbd1030;
	Node0xbd1030 -> Node0xbd10d0;
	Node0xbd10d0 -> Node0xbd1140;
	Node0xbd1140 -> Node0xbd11b0;
	Node0xbd11b0 -> Node0xbd1220;
	Node0xbd1220 -> Node0xbd1290;
	Node0xbd1290 -> Node0xbd1300;
	Node0xbd1300 -> Node0xbd1370;
	Node0xbd1370 -> Node0xbd13e0;
	Node0xbd13e0 -> Node0xbd1450;
	Node0xbd1450 -> Node0xbd14c0;
	Node0xbd14c0 -> Node0xb71268;
	Node0xb71268 -> Node0xbd1960;
	Node0xbd1960 -> Node0xbd19b0;
edge [color=red]
	Node0xbd0af0 -> Node0xbd0b60;
	Node0xbd0af0 -> Node0xbd0c20;
	Node0xbd0d70 -> Node0xbd0de0;
	Node0xbd0de0 -> Node0xbd0e80;
	Node0xbd0b60 -> Node0xbd0f90;
	Node0xbd0f90 -> Node0xbd1030;
	Node0xbd0c20 -> Node0xbd10d0;
	Node0xbd1140 -> Node0xbd11b0;
	Node0xbd0c20 -> Node0xbd11b0;
	Node0xbd11b0 -> Node0xbd1220;
	Node0xbd0c90 -> Node0xbd1220;
	Node0xbd1220 -> Node0xbd1290;
	Node0xbd0d00 -> Node0xbd1290;
	Node0xbd1290 -> Node0xbd1300;
	Node0xbd0ef0 -> Node0xbd1300;
	Node0xbd1300 -> Node0xbd1370;
	Node0xbd10d0 -> Node0xbd1370;
	Node0xbd1370 -> Node0xbd13e0;
	Node0xbd0e80 -> Node0xbd13e0;
	Node0xbd13e0 -> Node0xbd1450;
	Node0xbd1030 -> Node0xbd1450;
	Node0xbd0b60 -> Node0xbd14c0;
	Node0xbd1450 -> Node0xbd14c0;
	Node0xbd14c0 -> Node0xb71268;
	Node0xb71268 -> Node0xbd1960;
}
