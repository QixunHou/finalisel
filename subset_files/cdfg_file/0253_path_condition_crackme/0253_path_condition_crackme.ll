; ModuleID = '../.././c_source_file/0253_path_condition_crackme.c'
source_filename = "../.././c_source_file/0253_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = or i32 %2, %1
  %11 = and i32 %10, %0
  %12 = or i32 %9, %11
  %13 = xor i32 %5, -1
  %14 = or i32 %13, %4
  %15 = xor i32 %14, -1
  %16 = xor i32 %4, %3
  %17 = xor i32 %16, -1
  %18 = or i32 %15, %17
  %19 = sub i32 %12, %18
  %20 = xor i32 %3, -1
  %21 = and i32 %20, %5
  %22 = and i32 %21, %4
  %23 = xor i32 %5, %3
  %24 = or i32 %23, %4
  %25 = xor i32 %22, %24
  %26 = add i32 %19, %25
  %27 = xor i32 %2, -1
  %28 = or i32 %27, %1
  %29 = or i32 %28, %0
  %30 = xor i32 %8, -1
  %31 = and i32 %30, %0
  %32 = and i32 %27, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %1, %0
  %35 = and i32 %34, %33
  %36 = and i32 %2, %0
  %37 = xor i32 %36, %10
  %38 = and i32 %8, %0
  %39 = xor i32 %10, %7
  %40 = xor i32 %39, %38
  %41 = xor i32 %28, -1
  %42 = xor i32 %41, %0
  %43 = or i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %44, %2
  %46 = shl i32 %45, 1
  %47 = xor i32 %2, %1
  %48 = and i32 %47, %0
  %49 = or i32 %9, %48
  %50 = xor i32 %47, -1
  %51 = or i32 %50, %0
  %52 = xor i32 %38, %51
  %53 = xor i32 %1, -1
  %54 = or i32 %53, %0
  %55 = xor i32 %54, -1
  %56 = xor i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %57, %55
  %59 = shl i32 %58, 1
  %60 = or i32 %36, %44
  %61 = and i32 %43, %27
  %62 = and i32 %1, %0
  %63 = or i32 %27, %0
  %64 = xor i32 %63, %62
  %65 = add i32 %56, 1
  %66 = or i32 %2, %0
  %67 = xor i32 %66, -1
  %68 = or i32 %62, %67
  %69 = or i32 %62, %41
  %70 = and i32 %53, %0
  %71 = or i32 %70, %27
  %72 = xor i32 %34, -1
  %73 = or i32 %72, %2
  %74 = shl i32 %73, 1
  %75 = xor i32 %48, -1
  %76 = xor i32 %9, %75
  %77 = xor i32 %62, -1
  %78 = or i32 %10, %0
  %79 = and i32 %54, %57
  %80 = xor i32 %67, %1
  %81 = and i32 %53, %2
  %82 = and i32 %81, %0
  %83 = or i32 %47, %0
  %84 = xor i32 %83, 2147483647
  %85 = or i32 %84, %82
  %86 = shl i32 %85, 1
  %87 = xor i32 %70, -1
  %88 = and i32 %47, %87
  %89 = and i32 %50, %0
  %90 = shl i32 %89, 1
  %91 = and i32 %33, %1
  %92 = xor i32 %63, -1
  %93 = or i32 %34, %92
  %94 = and i32 %57, %77
  %95 = xor i32 %32, %1
  %96 = and i32 %27, %1
  %97 = and i32 %56, %72
  %98 = or i32 %8, %0
  %99 = xor i32 %32, %28
  %100 = or i32 %50, %55
  %101 = xor i32 %36, -1
  %102 = add i32 %36, 1
  %103 = or i32 %47, %62
  %104 = and i32 %56, %54
  %105 = xor i32 %96, -1
  %106 = or i32 %105, %7
  %107 = shl i32 %66, 2
  %108 = and i32 %56, %34
  %109 = or i32 %41, %0
  %110 = and i32 %34, %57
  %111 = add i32 %70, 1
  %112 = and i32 %72, %2
  %113 = and i32 %34, %27
  %114 = or i32 %70, %57
  %115 = xor i32 %92, %1
  %116 = or i32 %28, %7
  %117 = xor i32 %66, %1
  %118 = and i32 %57, %1
  %119 = xor i32 %10, -1
  %120 = or i32 %119, %7
  %121 = or i32 %56, %34
  %122 = or i32 %62, %27
  %123 = shl i32 %122, 1
  %124 = or i32 %27, %72
  %125 = or i32 %67, %53
  %126 = shl i32 %125, 1
  %127 = or i32 %36, %96
  %128 = mul i32 %127, -3
  %129 = and i32 %54, %27
  %130 = or i32 %96, %7
  %131 = and i32 %77, %2
  %132 = and i32 %27, %72
  %133 = or i32 %36, %119
  %134 = or i32 %34, %27
  %135 = or i32 %30, %0
  %136 = or i32 %32, %34
  %137 = or i32 %57, %53
  %138 = and i32 %10, %7
  %139 = and i32 %43, %57
  %140 = or i32 %34, %2
  %141 = and i32 %63, %34
  %142 = xor i32 %96, %0
  %143 = or i32 %119, %0
  %144 = or i32 %47, %44
  %145 = and i32 %34, %101
  %146 = and i32 %81, %7
  %147 = or i32 %47, %7
  %148 = xor i32 %147, -1
  %149 = or i32 %146, %148
  %150 = xor i32 %146, %147
  %151 = or i32 %62, %50
  %152 = xor i32 %33, %1
  %153 = xor i32 %47, %0
  %154 = shl i32 %153, 1
  %155 = xor i32 %63, %1
  %156 = shl i32 %155, 1
  %157 = xor i32 %70, %105
  %158 = or i32 %92, %72
  %159 = and i32 %119, %7
  %160 = mul i32 %159, 13
  %161 = and i32 %96, %7
  %162 = and i32 %96, %0
  %163 = and i32 %41, %7
  %164 = and i32 %41, %0
  %165 = and i32 %4, %3
  %166 = xor i32 %165, -1
  %167 = and i32 %13, %166
  %168 = and i32 %20, %4
  %169 = xor i32 %168, -1
  %170 = xor i32 %5, %4
  %171 = and i32 %170, %169
  %172 = or i32 %5, %4
  %173 = and i32 %172, %16
  %174 = or i32 %5, %3
  %175 = or i32 %174, %4
  %176 = xor i32 %23, -1
  %177 = and i32 %176, %4
  %178 = and i32 %13, %4
  %179 = or i32 %178, %3
  %180 = or i32 %13, %3
  %181 = xor i32 %180, %4
  %182 = xor i32 %170, -1
  %183 = or i32 %182, %17
  %184 = xor i32 %4, -1
  %185 = or i32 %20, %5
  %186 = xor i32 %185, -1
  %187 = or i32 %186, %4
  %188 = xor i32 %22, %187
  %189 = and i32 %182, %20
  %190 = xor i32 %180, %165
  %191 = and i32 %180, %184
  %192 = or i32 %20, %4
  %193 = and i32 %192, %13
  %194 = and i32 %170, %17
  %195 = and i32 %23, %4
  %196 = xor i32 %192, %5
  %197 = xor i32 %174, %4
  %198 = and i32 %14, %20
  %199 = shl i32 %198, 1
  %200 = and i32 %5, %3
  %201 = or i32 %200, %184
  %202 = xor i32 %23, %4
  %203 = xor i32 %4, 2147483647
  %204 = xor i32 %203, %185
  %205 = xor i32 %204, %22
  %206 = shl i32 %205, 1
  %207 = and i32 %17, %5
  %208 = and i32 %166, %5
  %209 = and i32 %5, %4
  %210 = or i32 %4, %3
  %211 = xor i32 %210, -1
  %212 = or i32 %209, %211
  %213 = or i32 %170, %17
  %214 = shl i32 %213, 1
  %215 = xor i32 %168, %5
  %216 = xor i32 %178, 2147483647
  %217 = and i32 %216, %20
  %218 = or i32 %176, %184
  %219 = xor i32 %210, %5
  %220 = and i32 %23, %184
  %221 = and i32 %200, %184
  %222 = xor i32 %195, -1
  %223 = xor i32 %221, %222
  %224 = and i32 %170, %16
  %225 = xor i32 %174, -1
  %226 = or i32 %165, %225
  %227 = and i32 %21, %184
  %228 = and i32 %185, %4
  %229 = or i32 %227, %228
  %230 = or i32 %225, %184
  %231 = or i32 %15, %3
  %232 = and i32 %200, %4
  %233 = xor i32 %197, -1
  %234 = xor i32 %232, %233
  %235 = and i32 %13, %3
  %236 = xor i32 %235, %169
  %237 = xor i32 %24, -1
  %238 = or i32 %22, %237
  %239 = or i32 %209, %225
  %240 = or i32 %225, %4
  %241 = xor i32 %14, %165
  %242 = or i32 %15, %20
  %243 = and i32 %23, %192
  %244 = xor i32 %165, %5
  %245 = xor i32 %172, -1
  %246 = or i32 %245, %20
  %247 = or i32 %165, %182
  %248 = or i32 %180, %184
  %249 = xor i32 %200, -1
  %250 = or i32 %249, %184
  %251 = and i32 %174, %184
  %252 = or i32 %232, %251
  %253 = and i32 %174, %4
  %254 = or i32 %221, %253
  %255 = or i32 %209, %16
  %256 = shl i32 %255, 2
  %257 = xor i32 %166, %5
  %258 = and i32 %23, %166
  %259 = and i32 %225, %184
  %260 = and i32 %235, %184
  %261 = and i32 %225, %4
  %262 = and i32 %235, %4
  %263 = mul i32 %262, -10
  %264 = xor i32 %180, -1
  %265 = and i32 %264, %184
  %266 = add i32 %33, %2
  %267 = add i32 %266, %112
  %268 = add i32 %267, %61
  %269 = add i32 %268, %158
  %270 = add i32 %269, %157
  %271 = add i32 %270, %152
  %272 = add i32 %271, %145
  %273 = add i32 %272, %139
  %274 = add i32 %273, %95
  %275 = add i32 %274, %60
  %276 = add i32 %275, %5
  %277 = add i32 %276, %257
  %278 = add i32 %277, %261
  %279 = add i32 %278, %217
  %280 = shl i32 %279, 1
  %281 = add i32 %208, %163
  %282 = add i32 %281, %232
  %283 = sub i32 %221, %282
  %284 = add i32 %283, %175
  %285 = sub i32 %284, %252
  %286 = mul i32 %285, 5
  %287 = add i32 %164, %38
  %288 = add i32 %287, %100
  %289 = add i32 %288, %31
  %290 = add i32 %289, %165
  %291 = add i32 %290, %260
  %292 = shl i32 %291, 2
  %293 = add i32 %9, %161
  %294 = mul i32 %293, 6
  %295 = add i32 %62, %0
  %296 = add i32 %295, %27
  %297 = add i32 %296, %111
  %298 = add i32 %297, %72
  %299 = add i32 %298, %65
  %300 = add i32 %299, %71
  %301 = add i32 %300, %41
  %302 = sub i32 %301, %96
  %303 = add i32 %302, %102
  %304 = sub i32 %303, %113
  %305 = sub i32 %304, %124
  %306 = add i32 %305, %129
  %307 = add i32 %306, %131
  %308 = sub i32 %307, %132
  %309 = add i32 %308, %134
  %310 = sub i32 %309, %140
  %311 = sub i32 %310, %28
  %312 = add i32 %311, %32
  %313 = sub i32 %312, %29
  %314 = sub i32 %313, %35
  %315 = add i32 %314, %37
  %316 = add i32 %315, %42
  %317 = sub i32 %316, %46
  %318 = sub i32 %317, %64
  %319 = sub i32 %318, %68
  %320 = add i32 %319, %69
  %321 = sub i32 %320, %74
  %322 = add i32 %321, %78
  %323 = sub i32 %322, %79
  %324 = sub i32 %323, %80
  %325 = sub i32 %324, %88
  %326 = add i32 %325, %91
  %327 = add i32 %326, %93
  %328 = add i32 %327, %83
  %329 = add i32 %328, %94
  %330 = sub i32 %329, %97
  %331 = sub i32 %330, %98
  %332 = sub i32 %331, %99
  %333 = add i32 %332, %103
  %334 = add i32 %333, %104
  %335 = sub i32 %334, %106
  %336 = sub i32 %335, %107
  %337 = add i32 %336, %108
  %338 = sub i32 %337, %109
  %339 = sub i32 %338, %110
  %340 = sub i32 %339, %114
  %341 = add i32 %340, %115
  %342 = sub i32 %341, %116
  %343 = add i32 %342, %117
  %344 = sub i32 %343, %118
  %345 = sub i32 %344, %120
  %346 = sub i32 %345, %121
  %347 = sub i32 %346, %123
  %348 = sub i32 %347, %130
  %349 = sub i32 %348, %133
  %350 = add i32 %349, %135
  %351 = add i32 %350, %136
  %352 = add i32 %351, %137
  %353 = sub i32 %352, %138
  %354 = sub i32 %353, %141
  %355 = add i32 %354, %142
  %356 = add i32 %355, %143
  %357 = sub i32 %356, %144
  %358 = sub i32 %357, %151
  %359 = add i32 %358, %162
  %360 = sub i32 %359, %40
  %361 = add i32 %360, %49
  %362 = sub i32 %361, %52
  %363 = sub i32 %362, %59
  %364 = sub i32 %363, %76
  %365 = sub i32 %364, %90
  %366 = sub i32 %365, %126
  %367 = add i32 %366, %128
  %368 = add i32 %367, %149
  %369 = add i32 %368, %150
  %370 = sub i32 %369, %154
  %371 = sub i32 %370, %156
  %372 = add i32 %371, %160
  %373 = sub i32 %372, %168
  %374 = sub i32 %373, %167
  %375 = sub i32 %374, %193
  %376 = add i32 %375, %196
  %377 = add i32 %376, %207
  %378 = add i32 %377, %215
  %379 = add i32 %378, %182
  %380 = sub i32 %379, %219
  %381 = add i32 %380, %244
  %382 = add i32 %381, %294
  %383 = sub i32 %382, %86
  %384 = sub i32 %383, %171
  %385 = sub i32 %384, %173
  %386 = add i32 %385, %177
  %387 = add i32 %386, %179
  %388 = add i32 %387, %181
  %389 = add i32 %388, %183
  %390 = sub i32 %389, %189
  %391 = add i32 %390, %190
  %392 = sub i32 %391, %191
  %393 = add i32 %392, %194
  %394 = add i32 %393, %195
  %395 = sub i32 %394, %197
  %396 = sub i32 %395, %201
  %397 = sub i32 %396, %202
  %398 = add i32 %397, %212
  %399 = add i32 %398, %218
  %400 = sub i32 %399, %220
  %401 = add i32 %400, %224
  %402 = sub i32 %401, %226
  %403 = add i32 %402, %230
  %404 = add i32 %403, %231
  %405 = sub i32 %404, %236
  %406 = sub i32 %405, %239
  %407 = add i32 %406, %240
  %408 = add i32 %407, %241
  %409 = add i32 %408, %242
  %410 = sub i32 %409, %243
  %411 = sub i32 %410, %246
  %412 = sub i32 %411, %247
  %413 = add i32 %412, %248
  %414 = sub i32 %413, %250
  %415 = add i32 %414, %258
  %416 = sub i32 %415, %259
  %417 = add i32 %416, %265
  %418 = add i32 %417, %188
  %419 = sub i32 %418, %199
  %420 = sub i32 %419, %214
  %421 = sub i32 %420, %223
  %422 = add i32 %421, %229
  %423 = add i32 %422, %234
  %424 = sub i32 %423, %238
  %425 = sub i32 %424, %254
  %426 = sub i32 %425, %256
  %427 = add i32 %426, %263
  %428 = sub i32 %427, %206
  %429 = add i32 %428, %292
  %430 = add i32 %429, %286
  %431 = add i32 %430, %280
  %432 = icmp eq i32 %26, %431
  %433 = select i1 %432, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %434 = tail call i32 @puts(i8* nonnull dereferenceable(1) %433)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
