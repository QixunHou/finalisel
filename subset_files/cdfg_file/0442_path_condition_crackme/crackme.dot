digraph "DFG for'crackme' function" {
	Node0xc74ac0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xc74b60[shape=record, label="  %4 = add i32 %1, 1"];
	Node0xc74c20[shape=record, label="  %5 = and i32 %1, %0"];
	Node0xc74c90[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0xc74d00[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0xc74d70[shape=record, label="  %8 = and i32 %3, %0"];
	Node0xc74de0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0xc74e50[shape=record, label="  %10 = and i32 %9, %1"];
	Node0xc74ec0[shape=record, label="  %11 = shl i32 %8, 1"];
	Node0xc74f30[shape=record, label="  %12 = mul i32 %5, 5"];
	Node0xc74fa0[shape=record, label="  %13 = sub i32 %7, %1"];
	Node0xc75010[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0xc750b0[shape=record, label="  %15 = sub i32 2, %0"];
	Node0xc75120[shape=record, label="  %16 = add i32 %15, %6"];
	Node0xc75190[shape=record, label="  %17 = add i32 %16, %8"];
	Node0xc75200[shape=record, label="  %18 = add i32 %17, %10"];
	Node0xc75270[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0xc752e0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0xc75350[shape=record, label="  %21 = add i32 %20, %14"];
	Node0xc753c0[shape=record, label="  %22 = icmp eq i32 %4, %21"];
	Node0xc15268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc75860[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0xc758b0[shape=record, label="  ret void"];
	Node0xc74ac0 -> Node0xc74b60;
	Node0xc74b60 -> Node0xc74c20;
	Node0xc74c20 -> Node0xc74c90;
	Node0xc74c90 -> Node0xc74d00;
	Node0xc74d00 -> Node0xc74d70;
	Node0xc74d70 -> Node0xc74de0;
	Node0xc74de0 -> Node0xc74e50;
	Node0xc74e50 -> Node0xc74ec0;
	Node0xc74ec0 -> Node0xc74f30;
	Node0xc74f30 -> Node0xc74fa0;
	Node0xc74fa0 -> Node0xc75010;
	Node0xc75010 -> Node0xc750b0;
	Node0xc750b0 -> Node0xc75120;
	Node0xc75120 -> Node0xc75190;
	Node0xc75190 -> Node0xc75200;
	Node0xc75200 -> Node0xc75270;
	Node0xc75270 -> Node0xc752e0;
	Node0xc752e0 -> Node0xc75350;
	Node0xc75350 -> Node0xc753c0;
	Node0xc753c0 -> Node0xc15268;
	Node0xc15268 -> Node0xc75860;
	Node0xc75860 -> Node0xc758b0;
edge [color=red]
	Node0xc74c20 -> Node0xc74c90;
	Node0xc74ac0 -> Node0xc74d70;
	Node0xc74de0 -> Node0xc74e50;
	Node0xc74d70 -> Node0xc74ec0;
	Node0xc74c20 -> Node0xc74f30;
	Node0xc74d00 -> Node0xc74fa0;
	Node0xc74fa0 -> Node0xc75010;
	Node0xc750b0 -> Node0xc75120;
	Node0xc74c90 -> Node0xc75120;
	Node0xc75120 -> Node0xc75190;
	Node0xc74d70 -> Node0xc75190;
	Node0xc75190 -> Node0xc75200;
	Node0xc74e50 -> Node0xc75200;
	Node0xc75200 -> Node0xc75270;
	Node0xc74ec0 -> Node0xc75270;
	Node0xc75270 -> Node0xc752e0;
	Node0xc74f30 -> Node0xc752e0;
	Node0xc752e0 -> Node0xc75350;
	Node0xc75010 -> Node0xc75350;
	Node0xc74b60 -> Node0xc753c0;
	Node0xc75350 -> Node0xc753c0;
	Node0xc753c0 -> Node0xc15268;
	Node0xc15268 -> Node0xc75860;
}
