; ModuleID = '../.././c_source_file/1677_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1677_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = shl i32 %4, 1
  %7 = or i32 %6, 1
  %8 = xor i32 %1, -1
  %9 = and i32 %2, %0
  %10 = or i32 %9, %8
  %11 = mul i32 %10, -5
  %12 = xor i32 %2, -1
  %13 = and i32 %12, %0
  %14 = xor i32 %13, %1
  %15 = sub i32 %11, %14
  %16 = add i32 %15, %7
  %17 = xor i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %18, -2
  %20 = xor i32 %4, -1
  %21 = and i32 %4, %3
  %22 = or i32 %4, %3
  %23 = shl i32 %22, 2
  %24 = xor i32 %23, -4
  %25 = and i32 %20, %3
  %26 = shl i32 %25, 2
  %27 = shl i32 %21, 1
  %28 = xor i32 %13, -1
  %29 = or i32 %12, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %13, %30
  %32 = and i32 %29, %0
  %33 = or i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %1, %0
  %36 = or i32 %35, %34
  %37 = and i32 %2, %1
  %38 = xor i32 %37, -1
  %39 = xor i32 %38, %0
  %40 = xor i32 %9, -1
  %41 = and i32 %40, %1
  %42 = and i32 %8, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = and i32 %45, %43
  %47 = and i32 %1, %0
  %48 = xor i32 %29, %47
  %49 = or i32 %1, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %9, %50
  %52 = xor i32 %35, -1
  %53 = and i32 %40, %52
  %54 = and i32 %35, %2
  %55 = and i32 %44, %8
  %56 = and i32 %8, %2
  %57 = and i32 %56, %0
  %58 = xor i32 %2, %1
  %59 = xor i32 %58, %0
  %60 = or i32 %57, %59
  %61 = or i32 %8, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %62, %2
  %64 = or i32 %58, %50
  %65 = and i32 %12, %1
  %66 = xor i32 %65, %0
  %67 = or i32 %9, %52
  %68 = and i32 %49, %12
  %69 = xor i32 %0, -1
  %70 = or i32 %2, %1
  %71 = or i32 %70, %69
  %72 = xor i32 %34, %1
  %73 = or i32 %44, %8
  %74 = xor i32 %47, -1
  %75 = xor i32 %58, -1
  %76 = and i32 %75, %74
  %77 = and i32 %44, %35
  %78 = and i32 %45, %1
  %79 = shl i32 %59, 1
  %80 = add i32 %29, 1
  %81 = or i32 %34, %8
  %82 = xor i32 %33, %47
  %83 = and i32 %35, %40
  %84 = or i32 %58, %47
  %85 = xor i32 %70, -1
  %86 = or i32 %47, %85
  %87 = and i32 %12, %74
  %88 = shl i32 %87, 2
  %89 = or i32 %50, %2
  %90 = and i32 %49, %2
  %91 = or i32 %47, %30
  %92 = or i32 %45, %8
  %93 = and i32 %52, %2
  %94 = add i32 %33, 1
  %95 = or i32 %12, %0
  %96 = xor i32 %95, -1
  %97 = xor i32 %96, %1
  %98 = or i32 %75, %50
  %99 = add i32 %9, 1
  %100 = and i32 %74, %2
  %101 = xor i32 %50, %2
  %102 = shl i32 %101, 1
  %103 = xor i32 %75, %0
  %104 = and i32 %61, %2
  %105 = or i32 %37, %42
  %106 = or i32 %96, %1
  %107 = and i32 %58, %61
  %108 = xor i32 %40, %1
  %109 = and i32 %35, %28
  %110 = and i32 %35, %45
  %111 = xor i32 %9, %61
  %112 = and i32 %33, %8
  %113 = or i32 %37, %69
  %114 = or i32 %42, %2
  %115 = add i32 %35, 1
  %116 = or i32 %42, %12
  %117 = and i32 %75, %0
  %118 = or i32 %58, %0
  %119 = xor i32 %118, -1
  %120 = or i32 %57, %119
  %121 = xor i32 %13, %29
  %122 = and i32 %37, %0
  %123 = and i32 %70, %69
  %124 = xor i32 %122, -1
  %125 = xor i32 %123, %124
  %126 = and i32 %45, %52
  %127 = and i32 %35, %12
  %128 = or i32 %9, %35
  %129 = xor i32 %65, -1
  %130 = or i32 %129, %0
  %131 = xor i32 %70, %0
  %132 = or i32 %122, %131
  %133 = and i32 %37, %69
  %134 = and i32 %58, %0
  %135 = xor i32 %134, -1
  %136 = xor i32 %133, %135
  %137 = and i32 %58, %49
  %138 = and i32 %12, %52
  %139 = add i32 %49, 1
  %140 = or i32 %75, %0
  %141 = xor i32 %61, %2
  %142 = or i32 %29, %69
  %143 = and i32 %58, %69
  %144 = and i32 %70, %0
  %145 = or i32 %133, %144
  %146 = and i32 %28, %1
  %147 = or i32 %35, %96
  %148 = or i32 %44, %1
  %149 = or i32 %96, %52
  %150 = add i32 %42, 1
  %151 = or i32 %34, %1
  %152 = xor i32 %143, %124
  %153 = xor i32 %131, %124
  %154 = or i32 %34, %52
  %155 = or i32 %65, %69
  %156 = or i32 %12, %50
  %157 = and i32 %75, %69
  %158 = or i32 %96, %8
  %159 = shl i32 %158, 1
  %160 = or i32 %58, %42
  %161 = or i32 %35, %12
  %162 = or i32 %30, %0
  %163 = xor i32 %9, %1
  %164 = or i32 %85, %0
  %165 = or i32 %13, %52
  %166 = or i32 %9, %65
  %167 = shl i32 %166, 1
  %168 = or i32 %9, %62
  %169 = or i32 %47, %45
  %170 = or i32 %44, %35
  %171 = xor i32 %59, -1
  %172 = or i32 %122, %171
  %173 = or i32 %8, %2
  %174 = and i32 %173, %69
  %175 = xor i32 %57, -1
  %176 = xor i32 %174, %175
  %177 = or i32 %38, %69
  %178 = shl i32 %177, 1
  %179 = or i32 %12, %52
  %180 = xor i32 %9, %49
  %181 = or i32 %44, %52
  %182 = or i32 %13, %1
  %183 = or i32 %44, %50
  %184 = and i32 %56, %69
  %185 = or i32 %58, %69
  %186 = xor i32 %185, -1
  %187 = or i32 %184, %186
  %188 = xor i32 %9, %129
  %189 = or i32 %122, %143
  %190 = xor i32 %95, %47
  %191 = or i32 %45, %1
  %192 = or i32 %75, %62
  %193 = and i32 %38, %0
  %194 = xor i32 %173, %0
  %195 = xor i32 %194, %175
  %196 = xor i32 %62, %2
  %197 = xor i32 %28, %1
  %198 = or i32 %44, %42
  %199 = or i32 %65, %0
  %200 = and i32 %173, %0
  %201 = xor i32 %200, -1
  %202 = xor i32 %184, %201
  %203 = or i32 %9, %1
  %204 = and i32 %28, %8
  %205 = or i32 %47, %34
  %206 = shl i32 %205, 1
  %207 = or i32 %57, %174
  %208 = add i32 %95, 1
  %209 = or i32 %42, %75
  %210 = and i32 %43, %2
  %211 = and i32 %58, %74
  %212 = or i32 %9, %85
  %213 = or i32 %133, %134
  %214 = and i32 %44, %61
  %215 = shl i32 %214, 1
  %216 = xor i32 %144, 2147483647
  %217 = xor i32 %216, %133
  %218 = or i32 %44, %47
  %219 = shl i32 %218, 1
  %220 = or i32 %13, %35
  %221 = xor i32 %49, %2
  %222 = or i32 %47, %2
  %223 = or i32 %45, %50
  %224 = xor i32 %122, %59
  %225 = and i32 %29, %69
  %226 = or i32 %58, %62
  %227 = xor i32 %42, %38
  %228 = and i32 %44, %74
  %229 = and i32 %95, %1
  %230 = and i32 %95, %35
  %231 = or i32 %47, %75
  %232 = xor i32 %70, %47
  %233 = or i32 %45, %52
  %234 = and i32 %40, %8
  %235 = and i32 %61, %75
  %236 = xor i32 %74, %2
  %237 = and i32 %61, %45
  %238 = or i32 %65, %42
  %239 = shl i32 %238, 1
  %240 = or i32 %57, %194
  %241 = and i32 %95, %8
  %242 = shl i32 %241, 1
  %243 = or i32 %75, %69
  %244 = and i32 %44, %52
  %245 = and i32 %129, %0
  %246 = and i32 %129, %69
  %247 = and i32 %58, %43
  %248 = xor i32 %33, %1
  %249 = or i32 %13, %37
  %250 = shl i32 %29, 1
  %251 = or i32 %47, %96
  %252 = xor i32 %37, %0
  %253 = and i32 %75, %43
  %254 = xor i32 %30, %0
  %255 = xor i32 %85, %0
  %256 = or i32 %35, %45
  %257 = xor i32 %29, %0
  %258 = add i32 %47, 1
  %259 = or i32 %47, %12
  %260 = shl i32 %259, 1
  %261 = or i32 %70, %0
  %262 = or i32 %44, %62
  %263 = or i32 %42, %45
  %264 = and i32 %85, %69
  %265 = and i32 %65, %69
  %266 = and i32 %85, %0
  %267 = and i32 %65, %0
  %268 = mul i32 %267, 15
  %269 = and i32 %30, %69
  %270 = and i32 %30, %0
  %271 = mul i32 %122, -20
  %272 = add i32 %47, %1
  %273 = add i32 %272, %61
  %274 = add i32 %273, %38
  %275 = add i32 %274, %156
  %276 = add i32 %275, %54
  %277 = add i32 %276, %249
  %278 = add i32 %277, %131
  %279 = add i32 %278, %233
  %280 = add i32 %279, %226
  %281 = add i32 %280, %211
  %282 = add i32 %281, %142
  %283 = add i32 %282, %121
  %284 = add i32 %283, %109
  %285 = add i32 %284, %20
  %286 = add i32 %285, %132
  %287 = add i32 %286, %217
  %288 = shl i32 %287, 1
  %289 = sub i32 %270, %161
  %290 = add i32 %289, %107
  %291 = add i32 %290, %97
  %292 = add i32 %291, %55
  %293 = sub i32 %292, %152
  %294 = add i32 %293, %213
  %295 = mul i32 %294, 3
  %296 = add i32 %133, %269
  %297 = sub i32 %264, %296
  %298 = mul i32 %297, 12
  %299 = or i32 %266, %265
  %300 = mul i32 %299, -6
  %301 = add i32 %153, %134
  %302 = mul i32 %301, -5
  %303 = add i32 %235, %147
  %304 = shl i32 %303, 2
  %305 = sub i32 %0, %61
  %306 = add i32 %305, %115
  %307 = add i32 %306, %12
  %308 = add i32 %307, %139
  %309 = add i32 %308, %35
  %310 = add i32 %309, %150
  %311 = sub i32 %310, %2
  %312 = add i32 %311, %42
  %313 = add i32 %312, %258
  %314 = add i32 %313, 1
  %315 = sub i32 %314, %63
  %316 = add i32 %315, %68
  %317 = add i32 %316, %80
  %318 = add i32 %317, %89
  %319 = add i32 %318, %90
  %320 = add i32 %319, %93
  %321 = add i32 %320, %94
  %322 = add i32 %321, %99
  %323 = sub i32 %322, %100
  %324 = add i32 %323, %104
  %325 = add i32 %324, %114
  %326 = sub i32 %325, %116
  %327 = add i32 %326, %127
  %328 = add i32 %327, %138
  %329 = sub i32 %328, %141
  %330 = add i32 %329, %85
  %331 = add i32 %330, %75
  %332 = sub i32 %331, %179
  %333 = add i32 %332, %33
  %334 = sub i32 %333, %37
  %335 = sub i32 %334, %44
  %336 = add i32 %335, %196
  %337 = add i32 %336, %208
  %338 = add i32 %337, %210
  %339 = sub i32 %338, %65
  %340 = sub i32 %339, %221
  %341 = add i32 %340, %222
  %342 = add i32 %341, %9
  %343 = sub i32 %342, %236
  %344 = sub i32 %343, %70
  %345 = sub i32 %344, %31
  %346 = add i32 %345, %32
  %347 = sub i32 %346, %36
  %348 = sub i32 %347, %39
  %349 = sub i32 %348, %41
  %350 = add i32 %349, %46
  %351 = add i32 %350, %48
  %352 = sub i32 %351, %51
  %353 = add i32 %352, %53
  %354 = add i32 %353, %64
  %355 = add i32 %354, %66
  %356 = add i32 %355, %67
  %357 = sub i32 %356, %71
  %358 = sub i32 %357, %72
  %359 = add i32 %358, %73
  %360 = sub i32 %359, %76
  %361 = add i32 %360, %77
  %362 = sub i32 %361, %78
  %363 = sub i32 %362, %81
  %364 = sub i32 %363, %82
  %365 = sub i32 %364, %83
  %366 = add i32 %365, %84
  %367 = sub i32 %366, %86
  %368 = sub i32 %367, %88
  %369 = sub i32 %368, %91
  %370 = sub i32 %369, %92
  %371 = add i32 %370, %98
  %372 = sub i32 %371, %102
  %373 = sub i32 %372, %103
  %374 = add i32 %373, %105
  %375 = sub i32 %374, %106
  %376 = sub i32 %375, %108
  %377 = add i32 %376, %110
  %378 = sub i32 %377, %111
  %379 = sub i32 %378, %112
  %380 = add i32 %379, %113
  %381 = add i32 %380, %117
  %382 = add i32 %381, %126
  %383 = add i32 %382, %128
  %384 = add i32 %383, %130
  %385 = sub i32 %384, %137
  %386 = sub i32 %385, %140
  %387 = add i32 %386, %143
  %388 = sub i32 %387, %146
  %389 = add i32 %388, %148
  %390 = add i32 %389, %149
  %391 = sub i32 %390, %151
  %392 = add i32 %391, %154
  %393 = sub i32 %392, %155
  %394 = add i32 %393, %157
  %395 = add i32 %394, %160
  %396 = add i32 %395, %162
  %397 = sub i32 %396, %163
  %398 = sub i32 %397, %164
  %399 = sub i32 %398, %165
  %400 = add i32 %399, %168
  %401 = add i32 %400, %169
  %402 = add i32 %401, %170
  %403 = add i32 %402, %180
  %404 = sub i32 %403, %181
  %405 = add i32 %404, %182
  %406 = sub i32 %405, %183
  %407 = add i32 %406, %188
  %408 = sub i32 %407, %190
  %409 = sub i32 %408, %191
  %410 = sub i32 %409, %192
  %411 = sub i32 %410, %193
  %412 = sub i32 %411, %197
  %413 = sub i32 %412, %198
  %414 = add i32 %413, %199
  %415 = add i32 %414, %203
  %416 = sub i32 %415, %204
  %417 = add i32 %416, %209
  %418 = sub i32 %417, %212
  %419 = add i32 %418, %220
  %420 = sub i32 %419, %223
  %421 = add i32 %420, %225
  %422 = add i32 %421, %227
  %423 = sub i32 %422, %228
  %424 = sub i32 %423, %229
  %425 = sub i32 %424, %230
  %426 = add i32 %425, %231
  %427 = add i32 %426, %232
  %428 = sub i32 %427, %123
  %429 = add i32 %428, %234
  %430 = sub i32 %429, %237
  %431 = add i32 %430, %243
  %432 = sub i32 %431, %118
  %433 = sub i32 %432, %244
  %434 = add i32 %433, %245
  %435 = add i32 %434, %246
  %436 = sub i32 %435, %185
  %437 = sub i32 %436, %247
  %438 = sub i32 %437, %248
  %439 = sub i32 %438, %250
  %440 = sub i32 %439, %251
  %441 = add i32 %440, %252
  %442 = add i32 %441, %253
  %443 = sub i32 %442, %254
  %444 = add i32 %443, %255
  %445 = add i32 %444, %256
  %446 = sub i32 %445, %257
  %447 = sub i32 %446, %260
  %448 = sub i32 %447, %261
  %449 = add i32 %448, %262
  %450 = sub i32 %449, %144
  %451 = sub i32 %450, %263
  %452 = add i32 %451, %21
  %453 = add i32 %452, %22
  %454 = add i32 %453, %17
  %455 = sub i32 %454, %60
  %456 = sub i32 %455, %79
  %457 = add i32 %456, %120
  %458 = add i32 %457, %125
  %459 = add i32 %458, %136
  %460 = sub i32 %459, %145
  %461 = sub i32 %460, %159
  %462 = sub i32 %461, %167
  %463 = add i32 %462, %172
  %464 = add i32 %463, %176
  %465 = sub i32 %464, %178
  %466 = sub i32 %465, %187
  %467 = add i32 %466, %189
  %468 = add i32 %467, %195
  %469 = add i32 %468, %202
  %470 = sub i32 %469, %206
  %471 = add i32 %470, %207
  %472 = sub i32 %471, %215
  %473 = sub i32 %472, %219
  %474 = sub i32 %473, %224
  %475 = sub i32 %474, %239
  %476 = sub i32 %475, %240
  %477 = sub i32 %476, %242
  %478 = add i32 %477, %268
  %479 = add i32 %478, %271
  %480 = sub i32 %479, %26
  %481 = sub i32 %480, %27
  %482 = add i32 %481, %300
  %483 = add i32 %482, %304
  %484 = add i32 %483, %19
  %485 = sub i32 %484, %24
  %486 = add i32 %485, %298
  %487 = add i32 %486, %302
  %488 = add i32 %487, %295
  %489 = add i32 %488, %288
  %490 = icmp eq i32 %16, %489
  %491 = select i1 %490, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %492 = tail call i32 @puts(i8* nonnull dereferenceable(1) %491)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
