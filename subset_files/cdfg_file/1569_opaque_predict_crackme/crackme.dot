digraph "DFG for'crackme' function" {
	Node0x1ec2b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1ec2bc0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1ec2c80[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x1ec2cf0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1ec2d60[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x1ec2dd0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1ec2e40[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1ec2ee0[shape=record, label="  %10 = shl i32 %9, 3"];
	Node0x1ec2f80[shape=record, label="  %11 = xor i32 %10, -8"];
	Node0x1ec2ff0[shape=record, label="  %12 = xor i32 %4, -1"];
	Node0x1ec3090[shape=record, label="  %13 = mul i32 %7, -7"];
	Node0x1ec3100[shape=record, label="  %14 = and i32 %1, %0"];
	Node0x1ec3170[shape=record, label="  %15 = add i32 %14, %12"];
	Node0x1ec3210[shape=record, label="  %16 = mul i32 %15, -5"];
	Node0x1ec3280[shape=record, label="  %17 = sub i32 -5, %1"];
	Node0x1ec32f0[shape=record, label="  %18 = add i32 %17, %3"];
	Node0x1ec3360[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x1ec33d0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x1ec3440[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x1ec34b0[shape=record, label="  %22 = add i32 %21, %13"];
	Node0x1ec3520[shape=record, label="  %23 = sub i32 %22, %11"];
	Node0x1ec3590[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1ec3600[shape=record, label="  %25 = icmp eq i32 %24, %5"];
	Node0x1e63268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ec3aa0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1ec3af0[shape=record, label="  ret void"];
	Node0x1ec2b50 -> Node0x1ec2bc0;
	Node0x1ec2bc0 -> Node0x1ec2c80;
	Node0x1ec2c80 -> Node0x1ec2cf0;
	Node0x1ec2cf0 -> Node0x1ec2d60;
	Node0x1ec2d60 -> Node0x1ec2dd0;
	Node0x1ec2dd0 -> Node0x1ec2e40;
	Node0x1ec2e40 -> Node0x1ec2ee0;
	Node0x1ec2ee0 -> Node0x1ec2f80;
	Node0x1ec2f80 -> Node0x1ec2ff0;
	Node0x1ec2ff0 -> Node0x1ec3090;
	Node0x1ec3090 -> Node0x1ec3100;
	Node0x1ec3100 -> Node0x1ec3170;
	Node0x1ec3170 -> Node0x1ec3210;
	Node0x1ec3210 -> Node0x1ec3280;
	Node0x1ec3280 -> Node0x1ec32f0;
	Node0x1ec32f0 -> Node0x1ec3360;
	Node0x1ec3360 -> Node0x1ec33d0;
	Node0x1ec33d0 -> Node0x1ec3440;
	Node0x1ec3440 -> Node0x1ec34b0;
	Node0x1ec34b0 -> Node0x1ec3520;
	Node0x1ec3520 -> Node0x1ec3590;
	Node0x1ec3590 -> Node0x1ec3600;
	Node0x1ec3600 -> Node0x1e63268;
	Node0x1e63268 -> Node0x1ec3aa0;
	Node0x1ec3aa0 -> Node0x1ec3af0;
edge [color=red]
	Node0x1ec2b50 -> Node0x1ec2bc0;
	Node0x1ec2bc0 -> Node0x1ec2c80;
	Node0x1ec2b50 -> Node0x1ec2d60;
	Node0x1ec2d60 -> Node0x1ec2dd0;
	Node0x1ec2e40 -> Node0x1ec2ee0;
	Node0x1ec2ee0 -> Node0x1ec2f80;
	Node0x1ec2bc0 -> Node0x1ec2ff0;
	Node0x1ec2d60 -> Node0x1ec3090;
	Node0x1ec3100 -> Node0x1ec3170;
	Node0x1ec2ff0 -> Node0x1ec3170;
	Node0x1ec3170 -> Node0x1ec3210;
	Node0x1ec3280 -> Node0x1ec32f0;
	Node0x1ec2b50 -> Node0x1ec32f0;
	Node0x1ec32f0 -> Node0x1ec3360;
	Node0x1ec2cf0 -> Node0x1ec3360;
	Node0x1ec3360 -> Node0x1ec33d0;
	Node0x1ec2dd0 -> Node0x1ec33d0;
	Node0x1ec33d0 -> Node0x1ec3440;
	Node0x1ec2e40 -> Node0x1ec3440;
	Node0x1ec3440 -> Node0x1ec34b0;
	Node0x1ec3090 -> Node0x1ec34b0;
	Node0x1ec34b0 -> Node0x1ec3520;
	Node0x1ec2f80 -> Node0x1ec3520;
	Node0x1ec3520 -> Node0x1ec3590;
	Node0x1ec3210 -> Node0x1ec3590;
	Node0x1ec3590 -> Node0x1ec3600;
	Node0x1ec2c80 -> Node0x1ec3600;
	Node0x1ec3600 -> Node0x1e63268;
	Node0x1e63268 -> Node0x1ec3aa0;
}
