; ModuleID = '../.././c_source_file/0463_path_condition_crackme.c'
source_filename = "../.././c_source_file/0463_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = and i32 %1, %0
  %10 = or i32 %9, %2
  %11 = sub i32 %8, %10
  %12 = xor i32 %3, -1
  %13 = add i32 %3, 1
  %14 = add i32 %11, %13
  %15 = xor i32 %1, -1
  %16 = and i32 %15, %2
  %17 = and i32 %16, %0
  %18 = xor i32 %2, %1
  %19 = xor i32 %18, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %17, %20
  %22 = or i32 %7, %1
  %23 = xor i32 %1, %0
  %24 = and i32 %8, %23
  %25 = and i32 %7, %0
  %26 = and i32 %2, %1
  %27 = or i32 %25, %26
  %28 = or i32 %25, %1
  %29 = and i32 %2, %0
  %30 = xor i32 %23, -1
  %31 = or i32 %25, %30
  %32 = or i32 %15, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %33
  %37 = xor i32 %29, -1
  %38 = and i32 %23, %37
  %39 = and i32 %15, %0
  %40 = and i32 %7, %1
  %41 = or i32 %40, %39
  %42 = xor i32 %9, -1
  %43 = and i32 %18, %42
  %44 = xor i32 %18, -1
  %45 = or i32 %39, %44
  %46 = xor i32 %22, %9
  %47 = shl i32 %7, 1
  %48 = or i32 %1, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %0, -1
  %51 = or i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %50
  %54 = xor i32 %25, %15
  %55 = and i32 %44, %0
  %56 = shl i32 %52, 1
  %57 = xor i32 %40, -1
  %58 = xor i32 %29, %57
  %59 = and i32 %48, %44
  %60 = xor i32 %8, -1
  %61 = xor i32 %42, %2
  %62 = and i32 %34, %15
  %63 = and i32 %35, %1
  %64 = shl i32 %63, 1
  %65 = or i32 %23, %60
  %66 = xor i32 %32, %2
  %67 = and i32 %32, %7
  %68 = or i32 %22, %0
  %69 = or i32 %44, %33
  %70 = xor i32 %22, %0
  %71 = or i32 %57, %50
  %72 = xor i32 %51, %9
  %73 = xor i32 %60, %1
  %74 = xor i32 %39, -1
  %75 = and i32 %7, %74
  %76 = xor i32 %22, -1
  %77 = xor i32 %76, %0
  %78 = shl i32 %77, 1
  %79 = xor i32 %9, %2
  %80 = shl i32 %79, 1
  %81 = or i32 %49, %2
  %82 = or i32 %34, %49
  %83 = and i32 %7, %30
  %84 = add i32 %29, 1
  %85 = or i32 %30, %2
  %86 = or i32 %9, %44
  %87 = and i32 %8, %1
  %88 = or i32 %34, %33
  %89 = and i32 %26, %0
  %90 = or i32 %89, %20
  %91 = and i32 %18, %50
  %92 = or i32 %89, %91
  %93 = and i32 %34, %74
  %94 = and i32 %23, %7
  %95 = and i32 %57, %50
  %96 = or i32 %34, %15
  %97 = shl i32 %96, 1
  %98 = xor i32 %29, %48
  %99 = shl i32 %98, 1
  %100 = or i32 %34, %23
  %101 = or i32 %18, %0
  %102 = and i32 %26, %50
  %103 = and i32 %51, %0
  %104 = xor i32 %103, -1
  %105 = xor i32 %102, %104
  %106 = xor i32 %26, -1
  %107 = or i32 %106, %0
  %108 = xor i32 %25, %106
  %109 = or i32 %15, %2
  %110 = xor i32 %109, -1
  %111 = or i32 %110, %0
  %112 = xor i32 %17, %111
  %113 = and i32 %32, %44
  %114 = xor i32 %29, %32
  %115 = and i32 %16, %50
  %116 = and i32 %109, %0
  %117 = xor i32 %116, 2147483647
  %118 = xor i32 %117, %115
  %119 = shl i32 %118, 1
  %120 = and i32 %18, %0
  %121 = or i32 %102, %120
  %122 = shl i32 %50, 1
  %123 = or i32 %18, %50
  %124 = xor i32 %115, %123
  %125 = or i32 %44, %49
  %126 = or i32 %2, %0
  %127 = and i32 %126, %15
  %128 = or i32 %25, %76
  %129 = and i32 %42, %2
  %130 = or i32 %76, %0
  %131 = or i32 %34, %39
  %132 = shl i32 %131, 1
  %133 = and i32 %51, %50
  %134 = xor i32 %89, %19
  %135 = xor i32 %126, %15
  %136 = and i32 %126, %23
  %137 = or i32 %7, %33
  %138 = or i32 %115, %116
  %139 = or i32 %35, %30
  %140 = and i32 %40, %50
  %141 = and i32 %52, %0
  %142 = mul i32 %141, 7
  %143 = and i32 %40, %0
  %144 = mul i32 %143, 9
  %145 = and i32 %76, %50
  %146 = mul i32 %102, -11
  %147 = and i32 %76, %0
  %148 = xor i32 %4, -1
  %149 = xor i32 %5, %3
  %150 = xor i32 %149, -1
  %151 = and i32 %150, %148
  %152 = and i32 %12, %4
  %153 = and i32 %12, %5
  %154 = and i32 %153, %148
  %155 = or i32 %149, %148
  %156 = xor i32 %154, %155
  %157 = and i32 %5, %4
  %158 = xor i32 %157, -1
  %159 = and i32 %4, %3
  %160 = or i32 %149, %159
  %161 = xor i32 %5, -1
  %162 = and i32 %161, %3
  %163 = xor i32 %162, -1
  %164 = or i32 %163, %148
  %165 = or i32 %161, %4
  %166 = xor i32 %165, -1
  %167 = xor i32 %4, %3
  %168 = or i32 %167, %166
  %169 = or i32 %4, %3
  %170 = xor i32 %169, -1
  %171 = or i32 %170, %5
  %172 = or i32 %12, %4
  %173 = and i32 %149, %172
  %174 = or i32 %161, %3
  %175 = and i32 %161, %4
  %176 = or i32 %175, %167
  %177 = or i32 %5, %4
  %178 = xor i32 %177, -1
  %179 = or i32 %178, %3
  %180 = or i32 %5, %3
  %181 = xor i32 %159, -1
  %182 = xor i32 %181, %5
  %183 = xor i32 %174, -1
  %184 = or i32 %175, %183
  %185 = shl i32 %184, 1
  %186 = and i32 %165, %167
  %187 = and i32 %149, %181
  %188 = xor i32 %167, -1
  %189 = or i32 %188, %5
  %190 = and i32 %165, %188
  %191 = and i32 %5, %3
  %192 = and i32 %191, %4
  %193 = xor i32 %149, %4
  %194 = xor i32 %193, -1
  %195 = or i32 %192, %194
  %196 = and i32 %153, %4
  %197 = or i32 %149, %4
  %198 = xor i32 %197, -1
  %199 = or i32 %196, %198
  %200 = or i32 %159, %183
  %201 = xor i32 %5, %4
  %202 = and i32 %201, %181
  %203 = shl i32 %202, 1
  %204 = or i32 %12, %5
  %205 = xor i32 %204, %4
  %206 = or i32 %196, %205
  %207 = shl i32 %197, 1
  %208 = or i32 %175, %12
  %209 = shl i32 %208, 1
  %210 = and i32 %161, %188
  %211 = xor i32 %180, -1
  %212 = add i32 %180, 1
  %213 = or i32 %191, %4
  %214 = xor i32 %177, %3
  %215 = xor i32 %211, %4
  %216 = and i32 %174, %4
  %217 = or i32 %163, %4
  %218 = xor i32 %204, -1
  %219 = or i32 %218, %4
  %220 = xor i32 %196, %219
  %221 = and i32 %177, %12
  %222 = or i32 %149, %170
  %223 = and i32 %158, %12
  %224 = and i32 %181, %5
  %225 = xor i32 %152, -1
  %226 = xor i32 %201, -1
  %227 = and i32 %226, %225
  %228 = or i32 %201, %12
  %229 = or i32 %178, %188
  %230 = or i32 %166, %3
  %231 = and i32 %174, %148
  %232 = xor i32 %175, -1
  %233 = and i32 %232, %12
  %234 = xor i32 %172, -1
  %235 = or i32 %226, %234
  %236 = and i32 %172, %5
  %237 = xor i32 %175, %174
  %238 = or i32 %226, %170
  %239 = or i32 %183, %148
  %240 = shl i32 %239, 1
  %241 = or i32 %196, %193
  %242 = or i32 %166, %188
  %243 = or i32 %162, %148
  %244 = and i32 %232, %3
  %245 = xor i32 %157, %169
  %246 = and i32 %169, %5
  %247 = and i32 %149, %169
  %248 = and i32 %167, %226
  %249 = and i32 %149, %148
  %250 = or i32 %192, %249
  %251 = xor i32 %225, %5
  %252 = xor i32 %191, %148
  %253 = and i32 %201, %188
  %254 = xor i32 %155, -1
  %255 = or i32 %154, %254
  %256 = or i32 %183, %4
  %257 = add i32 %172, 1
  %258 = and i32 %172, %226
  %259 = or i32 %157, %12
  %260 = shl i32 %259, 1
  %261 = or i32 %159, %166
  %262 = and i32 %201, %225
  %263 = shl i32 %262, 1
  %264 = shl i32 %188, 1
  %265 = xor i32 %180, %148
  %266 = xor i32 %265, %192
  %267 = or i32 %167, %226
  %268 = xor i32 %196, %194
  %269 = or i32 %201, %170
  %270 = and i32 %158, %188
  %271 = or i32 %178, %12
  %272 = or i32 %157, %162
  %273 = or i32 %167, %5
  %274 = and i32 %232, %188
  %275 = or i32 %175, %3
  %276 = shl i32 %249, 1
  %277 = and i32 %169, %226
  %278 = and i32 %211, %148
  %279 = and i32 %162, %148
  %280 = shl i32 %279, 3
  %281 = and i32 %211, %4
  %282 = and i32 %162, %4
  %283 = and i32 %183, %148
  %284 = mul i32 %283, 18
  %285 = and i32 %191, %148
  %286 = and i32 %183, %4
  %287 = add i32 %85, %49
  %288 = add i32 %287, %60
  %289 = add i32 %288, %120
  %290 = add i32 %289, %93
  %291 = add i32 %290, %71
  %292 = add i32 %291, %58
  %293 = add i32 %292, %166
  %294 = add i32 %293, %232
  %295 = add i32 %294, %275
  %296 = add i32 %295, %216
  %297 = add i32 %296, %213
  %298 = add i32 %297, %179
  %299 = add i32 %298, %241
  %300 = shl i32 %299, 1
  %301 = add i32 %147, %0
  %302 = sub i32 %21, %301
  %303 = add i32 %302, %282
  %304 = add i32 %303, %206
  %305 = mul i32 %304, 5
  %306 = add i32 %65, %140
  %307 = add i32 %306, %285
  %308 = shl i32 %307, 2
  %309 = add i32 %192, %286
  %310 = mul i32 %309, 6
  %311 = add i32 %227, %89
  %312 = mul i32 %311, 3
  %313 = sub i32 %278, %145
  %314 = mul i32 %313, 10
  %315 = sub i32 1, %1
  %316 = sub i32 %315, %122
  %317 = add i32 %316, %22
  %318 = add i32 %317, %29
  %319 = add i32 %318, %26
  %320 = sub i32 %319, %47
  %321 = sub i32 %320, %61
  %322 = sub i32 %321, %66
  %323 = add i32 %322, %67
  %324 = sub i32 %323, %75
  %325 = sub i32 %324, %81
  %326 = sub i32 %325, %83
  %327 = add i32 %326, %84
  %328 = sub i32 %327, %94
  %329 = add i32 %328, %129
  %330 = add i32 %329, %40
  %331 = sub i32 %330, %137
  %332 = add i32 %331, %3
  %333 = sub i32 %332, %24
  %334 = sub i32 %333, %27
  %335 = sub i32 %334, %28
  %336 = add i32 %335, %31
  %337 = sub i32 %336, %36
  %338 = add i32 %337, %38
  %339 = add i32 %338, %41
  %340 = add i32 %339, %43
  %341 = add i32 %340, %45
  %342 = add i32 %341, %46
  %343 = add i32 %342, %53
  %344 = sub i32 %343, %54
  %345 = sub i32 %344, %55
  %346 = sub i32 %345, %56
  %347 = add i32 %346, %59
  %348 = sub i32 %347, %62
  %349 = add i32 %348, %68
  %350 = add i32 %349, %69
  %351 = add i32 %350, %70
  %352 = add i32 %351, %72
  %353 = add i32 %352, %73
  %354 = sub i32 %353, %80
  %355 = sub i32 %354, %82
  %356 = add i32 %355, %86
  %357 = sub i32 %356, %87
  %358 = add i32 %357, %88
  %359 = add i32 %358, %95
  %360 = sub i32 %359, %100
  %361 = add i32 %360, %101
  %362 = add i32 %361, %107
  %363 = sub i32 %362, %108
  %364 = sub i32 %363, %113
  %365 = add i32 %364, %114
  %366 = sub i32 %365, %125
  %367 = sub i32 %366, %127
  %368 = add i32 %367, %128
  %369 = add i32 %368, %130
  %370 = sub i32 %369, %133
  %371 = sub i32 %370, %135
  %372 = add i32 %371, %136
  %373 = sub i32 %372, %139
  %374 = sub i32 %373, %64
  %375 = sub i32 %374, %78
  %376 = sub i32 %375, %90
  %377 = add i32 %376, %92
  %378 = sub i32 %377, %97
  %379 = sub i32 %378, %99
  %380 = sub i32 %379, %105
  %381 = sub i32 %380, %112
  %382 = sub i32 %381, %121
  %383 = add i32 %382, %124
  %384 = sub i32 %383, %132
  %385 = sub i32 %384, %134
  %386 = add i32 %385, %138
  %387 = add i32 %386, %142
  %388 = add i32 %387, %144
  %389 = add i32 %388, %146
  %390 = add i32 %389, %152
  %391 = add i32 %390, %5
  %392 = add i32 %391, %257
  %393 = add i32 %392, %158
  %394 = sub i32 %393, %171
  %395 = sub i32 %394, %174
  %396 = sub i32 %395, %180
  %397 = add i32 %396, %182
  %398 = sub i32 %397, %189
  %399 = add i32 %398, %165
  %400 = sub i32 %399, %177
  %401 = add i32 %400, %210
  %402 = add i32 %401, %212
  %403 = sub i32 %402, %224
  %404 = add i32 %403, %236
  %405 = sub i32 %404, %246
  %406 = sub i32 %405, %251
  %407 = sub i32 %406, %264
  %408 = add i32 %407, %149
  %409 = add i32 %408, %273
  %410 = sub i32 %409, %119
  %411 = sub i32 %410, %151
  %412 = sub i32 %411, %160
  %413 = sub i32 %412, %164
  %414 = add i32 %413, %168
  %415 = add i32 %414, %173
  %416 = add i32 %415, %176
  %417 = sub i32 %416, %186
  %418 = sub i32 %417, %187
  %419 = sub i32 %418, %190
  %420 = sub i32 %419, %200
  %421 = sub i32 %420, %214
  %422 = sub i32 %421, %215
  %423 = add i32 %422, %217
  %424 = sub i32 %423, %221
  %425 = sub i32 %424, %222
  %426 = sub i32 %425, %223
  %427 = add i32 %426, %228
  %428 = sub i32 %427, %229
  %429 = sub i32 %428, %230
  %430 = sub i32 %429, %231
  %431 = sub i32 %430, %233
  %432 = add i32 %431, %235
  %433 = sub i32 %432, %237
  %434 = sub i32 %433, %238
  %435 = sub i32 %434, %242
  %436 = sub i32 %435, %243
  %437 = sub i32 %436, %244
  %438 = sub i32 %437, %245
  %439 = sub i32 %438, %247
  %440 = sub i32 %439, %248
  %441 = sub i32 %440, %252
  %442 = add i32 %441, %253
  %443 = add i32 %442, %256
  %444 = sub i32 %443, %258
  %445 = sub i32 %444, %261
  %446 = add i32 %445, %267
  %447 = sub i32 %446, %269
  %448 = add i32 %447, %270
  %449 = add i32 %448, %271
  %450 = add i32 %449, %272
  %451 = sub i32 %450, %274
  %452 = sub i32 %451, %277
  %453 = add i32 %452, %281
  %454 = add i32 %453, %156
  %455 = sub i32 %454, %185
  %456 = sub i32 %455, %195
  %457 = sub i32 %456, %199
  %458 = sub i32 %457, %203
  %459 = sub i32 %458, %207
  %460 = sub i32 %459, %209
  %461 = sub i32 %460, %220
  %462 = sub i32 %461, %240
  %463 = sub i32 %462, %250
  %464 = add i32 %463, %255
  %465 = sub i32 %464, %260
  %466 = sub i32 %465, %263
  %467 = add i32 %466, %266
  %468 = sub i32 %467, %268
  %469 = sub i32 %468, %276
  %470 = add i32 %469, %280
  %471 = add i32 %470, %284
  %472 = add i32 %471, %310
  %473 = add i32 %472, %312
  %474 = add i32 %473, %314
  %475 = add i32 %474, %308
  %476 = add i32 %475, %305
  %477 = add i32 %476, %300
  %478 = icmp eq i32 %14, %477
  %479 = select i1 %478, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %480 = tail call i32 @puts(i8* nonnull dereferenceable(1) %479)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
