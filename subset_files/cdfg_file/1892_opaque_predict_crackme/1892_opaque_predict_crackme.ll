; ModuleID = '../.././c_source_file/1892_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1892_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, %2
  %10 = xor i32 %8, -1
  %11 = or i32 %10, %2
  %12 = add i32 %9, %11
  %13 = xor i32 %5, -1
  %14 = or i32 %4, %3
  %15 = xor i32 %14, -1
  %16 = or i32 %13, %15
  %17 = mul i32 %16, -3
  %18 = sub i32 %17, %12
  %19 = xor i32 %2, -1
  %20 = and i32 %19, %0
  %21 = and i32 %2, %1
  %22 = xor i32 %21, -1
  %23 = xor i32 %20, %22
  %24 = or i32 %2, %0
  %25 = and i32 %24, %1
  %26 = or i32 %1, %0
  %27 = and i32 %26, %2
  %28 = and i32 %1, %0
  %29 = xor i32 %28, %2
  %30 = xor i32 %0, -1
  %31 = and i32 %21, %30
  %32 = xor i32 %2, %1
  %33 = and i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, %34
  %36 = xor i32 %1, %0
  %37 = and i32 %21, %0
  %38 = xor i32 %32, %0
  %39 = xor i32 %37, %38
  %40 = shl i32 %39, 2
  %41 = xor i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = and i32 %36, %42
  %44 = xor i32 %28, -1
  %45 = and i32 %42, %44
  %46 = xor i32 %36, -1
  %47 = or i32 %19, %46
  %48 = and i32 %32, %26
  %49 = or i32 %32, %10
  %50 = and i32 %36, %2
  %51 = or i32 %19, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %30
  %54 = and i32 %7, %0
  %55 = and i32 %54, %2
  %56 = or i32 %7, %2
  %57 = xor i32 %56, %0
  %58 = or i32 %55, %57
  %59 = xor i32 %32, -1
  %60 = or i32 %59, %30
  %61 = and i32 %41, %7
  %62 = and i32 %19, %1
  %63 = xor i32 %24, %1
  %64 = xor i32 %26, -1
  %65 = or i32 %64, %2
  %66 = or i32 %41, %1
  %67 = and i32 %2, %0
  %68 = or i32 %67, %62
  %69 = or i32 %2, %1
  %70 = or i32 %69, %30
  %71 = shl i32 %70, 1
  %72 = and i32 %32, %30
  %73 = or i32 %41, %54
  %74 = xor i32 %73, -1
  %75 = xor i32 %55, -1
  %76 = xor i32 %38, %75
  %77 = or i32 %41, %64
  %78 = or i32 %54, %42
  %79 = or i32 %19, %0
  %80 = xor i32 %79, -1
  %81 = or i32 %36, %80
  %82 = and i32 %8, %42
  %83 = xor i32 %62, -1
  %84 = or i32 %83, %30
  %85 = and i32 %69, %30
  %86 = or i32 %42, %1
  %87 = shl i32 %86, 1
  %88 = xor i32 %85, -1
  %89 = xor i32 %37, %88
  %90 = xor i32 %24, -1
  %91 = or i32 %90, %7
  %92 = or i32 %19, %64
  %93 = shl i32 %92, 1
  %94 = or i32 %28, %90
  %95 = and i32 %46, %2
  %96 = xor i32 %54, -1
  %97 = or i32 %52, %0
  %98 = and i32 %26, %42
  %99 = and i32 %59, %0
  %100 = or i32 %31, %33
  %101 = xor i32 %67, %69
  %102 = shl i32 %101, 1
  %103 = or i32 %37, %85
  %104 = and i32 %26, %19
  %105 = or i32 %32, %54
  %106 = and i32 %19, %46
  %107 = shl i32 %69, 1
  %108 = and i32 %69, %0
  %109 = xor i32 %108, 2147483647
  %110 = xor i32 %109, %31
  %111 = or i32 %32, %0
  %112 = xor i32 %111, -1
  %113 = or i32 %55, %112
  %114 = xor i32 %22, %0
  %115 = xor i32 %20, %1
  %116 = or i32 %22, %0
  %117 = and i32 %79, %46
  %118 = and i32 %42, %1
  %119 = add i32 %51, 1
  %120 = xor i32 %69, -1
  %121 = add i32 %69, 1
  %122 = and i32 %59, %96
  %123 = xor i32 %64, %2
  %124 = xor i32 %67, -1
  %125 = xor i32 %124, %1
  %126 = and i32 %24, %46
  %127 = and i32 %41, %96
  %128 = or i32 %51, %0
  %129 = or i32 %41, %36
  %130 = xor i32 %57, %75
  %131 = or i32 %80, %46
  %132 = or i32 %41, %28
  %133 = shl i32 %132, 1
  %134 = or i32 %90, %1
  %135 = shl i32 %134, 1
  %136 = xor i32 %26, %2
  %137 = xor i32 %96, %2
  %138 = shl i32 %137, 1
  %139 = or i32 %59, %10
  %140 = or i32 %59, %0
  %141 = or i32 %67, %1
  %142 = or i32 %32, %30
  %143 = or i32 %20, %1
  %144 = or i32 %67, %10
  %145 = xor i32 %20, -1
  %146 = and i32 %36, %145
  %147 = and i32 %42, %46
  %148 = or i32 %20, %7
  %149 = or i32 %67, %46
  %150 = or i32 %28, %42
  %151 = or i32 %42, %46
  %152 = or i32 %21, %30
  %153 = and i32 %51, %0
  %154 = shl i32 %153, 1
  %155 = or i32 %20, %36
  %156 = and i32 %59, %44
  %157 = xor i32 %62, %0
  %158 = or i32 %51, %30
  %159 = or i32 %42, %7
  %160 = shl i32 %159, 1
  %161 = and i32 %124, %7
  %162 = and i32 %22, %30
  %163 = add i32 %41, 1
  %164 = and i32 %120, %30
  %165 = and i32 %62, %30
  %166 = and i32 %120, %0
  %167 = and i32 %62, %0
  %168 = and i32 %52, %30
  %169 = and i32 %52, %0
  %170 = or i32 %5, %3
  %171 = shl i32 %170, 1
  %172 = and i32 %5, %4
  %173 = and i32 %13, %3
  %174 = xor i32 %173, -1
  %175 = xor i32 %172, %174
  %176 = xor i32 %4, -1
  %177 = xor i32 %5, %3
  %178 = or i32 %177, %176
  %179 = xor i32 %170, %4
  %180 = xor i32 %3, -1
  %181 = xor i32 %177, -1
  %182 = or i32 %181, %15
  %183 = shl i32 %182, 1
  %184 = or i32 %13, %4
  %185 = and i32 %177, %176
  %186 = or i32 %180, %4
  %187 = and i32 %186, %181
  %188 = xor i32 %186, -1
  %189 = or i32 %188, %5
  %190 = or i32 %5, %4
  %191 = xor i32 %190, -1
  %192 = or i32 %191, %180
  %193 = xor i32 %172, -1
  %194 = xor i32 %4, %3
  %195 = and i32 %194, %193
  %196 = and i32 %5, %3
  %197 = and i32 %196, %4
  %198 = xor i32 %177, %4
  %199 = xor i32 %198, -1
  %200 = or i32 %197, %199
  %201 = xor i32 %184, -1
  %202 = or i32 %201, %180
  %203 = xor i32 %196, %4
  %204 = shl i32 %203, 1
  %205 = xor i32 %5, %4
  %206 = xor i32 %205, -1
  %207 = add i32 %205, 1
  %208 = and i32 %13, %4
  %209 = xor i32 %208, -1
  %210 = and i32 %209, %3
  %211 = shl i32 %210, 1
  %212 = or i32 %196, %176
  %213 = or i32 %197, %185
  %214 = and i32 %4, %3
  %215 = xor i32 %214, %5
  %216 = and i32 %177, %14
  %217 = or i32 %194, %13
  %218 = xor i32 %193, %3
  %219 = or i32 %214, %181
  %220 = or i32 %194, %5
  %221 = and i32 %180, %5
  %222 = and i32 %221, %4
  %223 = or i32 %173, %4
  %224 = xor i32 %222, %223
  %225 = and i32 %180, %4
  %226 = xor i32 %225, -1
  %227 = and i32 %206, %226
  %228 = xor i32 %214, -1
  %229 = and i32 %181, %228
  %230 = or i32 %205, %15
  %231 = or i32 %177, %214
  %232 = or i32 %225, %206
  %233 = and i32 %205, %186
  %234 = xor i32 %222, %199
  %235 = or i32 %205, %188
  %236 = and i32 %14, %206
  %237 = or i32 %177, %225
  %238 = and i32 %186, %13
  %239 = or i32 %170, %4
  %240 = and i32 %181, %226
  %241 = and i32 %174, %176
  %242 = xor i32 %172, %186
  %243 = or i32 %222, %198
  %244 = shl i32 %243, 1
  %245 = xor i32 %172, %170
  %246 = xor i32 %194, -1
  %247 = and i32 %184, %246
  %248 = or i32 %194, %201
  %249 = and i32 %221, %176
  %250 = xor i32 %249, %178
  %251 = xor i32 %170, -1
  %252 = or i32 %172, %251
  %253 = or i32 %172, %3
  %254 = or i32 %205, %180
  %255 = or i32 %206, %246
  %256 = or i32 %172, %246
  %257 = shl i32 %256, 1
  %258 = or i32 %13, %3
  %259 = xor i32 %258, -1
  %260 = shl i32 %259, 1
  %261 = xor i32 %260, -1
  %262 = xor i32 %196, -1
  %263 = or i32 %262, %4
  %264 = or i32 %258, %176
  %265 = shl i32 %264, 1
  %266 = or i32 %177, %4
  %267 = xor i32 %222, %266
  %268 = and i32 %190, %194
  %269 = or i32 %172, %173
  %270 = shl i32 %269, 1
  %271 = xor i32 %225, %262
  %272 = and i32 %194, %209
  %273 = and i32 %262, %4
  %274 = or i32 %208, %259
  %275 = and i32 %246, %5
  %276 = shl i32 %275, 1
  %277 = and i32 %228, %5
  %278 = shl i32 %251, 1
  %279 = and i32 %196, %176
  %280 = and i32 %177, %4
  %281 = xor i32 %280, -1
  %282 = xor i32 %279, %281
  %283 = xor i32 %208, %3
  %284 = add i32 %194, 1
  %285 = and i32 %190, %180
  %286 = and i32 %206, %228
  %287 = or i32 %194, %206
  %288 = shl i32 %287, 1
  %289 = and i32 %170, %4
  %290 = or i32 %279, %289
  %291 = shl i32 %290, 2
  %292 = and i32 %193, %3
  %293 = or i32 %251, %4
  %294 = xor i32 %197, %293
  %295 = or i32 %181, %4
  %296 = or i32 %191, %3
  %297 = xor i32 %225, %174
  %298 = or i32 %172, %194
  %299 = or i32 %214, %259
  %300 = and i32 %13, %246
  %301 = and i32 %173, %176
  %302 = and i32 %251, %4
  %303 = and i32 %173, %4
  %304 = and i32 %259, %176
  %305 = and i32 %259, %4
  %306 = mul i32 %197, 24
  %307 = add i32 %180, %7
  %308 = add i32 %307, %47
  %309 = add i32 %308, %41
  %310 = add i32 %309, %156
  %311 = add i32 %310, %149
  %312 = add i32 %311, %128
  %313 = add i32 %312, %126
  %314 = add i32 %313, %105
  %315 = add i32 %314, %85
  %316 = add i32 %315, %61
  %317 = add i32 %316, %48
  %318 = add i32 %317, %45
  %319 = add i32 %318, %190
  %320 = add i32 %319, %238
  %321 = add i32 %320, %201
  %322 = add i32 %321, %208
  %323 = add i32 %322, %189
  %324 = add i32 %323, %110
  %325 = add i32 %324, %285
  %326 = add i32 %325, %286
  %327 = add i32 %326, %268
  %328 = add i32 %327, %248
  %329 = shl i32 %328, 1
  %330 = add i32 %30, %2
  %331 = add i32 %330, %95
  %332 = sub i32 %331, %147
  %333 = sub i32 %332, %98
  %334 = sub i32 %333, %245
  %335 = add i32 %334, %305
  %336 = mul i32 %335, 3
  %337 = add i32 %167, %169
  %338 = add i32 %337, %166
  %339 = add i32 %338, %164
  %340 = sub i32 %303, %339
  %341 = add i32 %340, %279
  %342 = mul i32 %341, 6
  %343 = add i32 %168, %31
  %344 = add i32 %343, %302
  %345 = mul i32 %344, -9
  %346 = sub i32 %165, %23
  %347 = add i32 %346, %250
  %348 = mul i32 %347, 5
  %349 = sub i32 %304, %37
  %350 = mul i32 %349, 7
  %351 = add i32 %230, %79
  %352 = shl i32 %351, 2
  %353 = add i32 %0, -1
  %354 = add i32 %353, %1
  %355 = sub i32 %354, %36
  %356 = add i32 %355, %26
  %357 = add i32 %356, %96
  %358 = add i32 %357, %28
  %359 = add i32 %358, %19
  %360 = add i32 %359, %27
  %361 = add i32 %360, %29
  %362 = sub i32 %361, %50
  %363 = add i32 %362, %24
  %364 = add i32 %363, %62
  %365 = add i32 %364, %65
  %366 = sub i32 %365, %104
  %367 = sub i32 %366, %106
  %368 = add i32 %367, %119
  %369 = add i32 %368, %121
  %370 = sub i32 %369, %123
  %371 = sub i32 %370, %136
  %372 = add i32 %371, %59
  %373 = add i32 %372, %163
  %374 = add i32 %373, %25
  %375 = add i32 %374, %43
  %376 = sub i32 %375, %49
  %377 = sub i32 %376, %53
  %378 = sub i32 %377, %60
  %379 = sub i32 %378, %63
  %380 = add i32 %379, %66
  %381 = sub i32 %380, %68
  %382 = sub i32 %381, %72
  %383 = add i32 %382, %74
  %384 = sub i32 %383, %77
  %385 = sub i32 %384, %78
  %386 = sub i32 %385, %81
  %387 = add i32 %386, %82
  %388 = add i32 %387, %84
  %389 = sub i32 %388, %38
  %390 = add i32 %389, %91
  %391 = sub i32 %390, %93
  %392 = sub i32 %391, %94
  %393 = sub i32 %392, %97
  %394 = add i32 %393, %99
  %395 = sub i32 %394, %107
  %396 = sub i32 %395, %114
  %397 = sub i32 %396, %115
  %398 = add i32 %397, %116
  %399 = add i32 %398, %117
  %400 = add i32 %399, %118
  %401 = sub i32 %400, %122
  %402 = add i32 %401, %125
  %403 = sub i32 %402, %127
  %404 = add i32 %403, %129
  %405 = add i32 %404, %131
  %406 = sub i32 %405, %138
  %407 = sub i32 %406, %139
  %408 = sub i32 %407, %140
  %409 = add i32 %408, %141
  %410 = add i32 %409, %142
  %411 = sub i32 %410, %143
  %412 = add i32 %411, %144
  %413 = add i32 %412, %146
  %414 = sub i32 %413, %148
  %415 = sub i32 %414, %150
  %416 = add i32 %415, %151
  %417 = add i32 %416, %152
  %418 = add i32 %417, %155
  %419 = add i32 %418, %157
  %420 = sub i32 %419, %158
  %421 = add i32 %420, %161
  %422 = add i32 %421, %162
  %423 = add i32 %422, %35
  %424 = add i32 %423, %58
  %425 = sub i32 %424, %71
  %426 = add i32 %425, %76
  %427 = sub i32 %426, %87
  %428 = sub i32 %427, %89
  %429 = sub i32 %428, %100
  %430 = sub i32 %429, %102
  %431 = sub i32 %430, %103
  %432 = add i32 %431, %113
  %433 = sub i32 %432, %130
  %434 = sub i32 %433, %133
  %435 = sub i32 %434, %135
  %436 = sub i32 %435, %154
  %437 = sub i32 %436, %160
  %438 = add i32 %437, %284
  %439 = add i32 %438, %14
  %440 = sub i32 %439, %40
  %441 = add i32 %440, %184
  %442 = add i32 %441, %207
  %443 = sub i32 %442, %215
  %444 = sub i32 %443, %217
  %445 = add i32 %444, %220
  %446 = sub i32 %445, %277
  %447 = sub i32 %446, %177
  %448 = sub i32 %447, %300
  %449 = sub i32 %448, %171
  %450 = sub i32 %449, %175
  %451 = add i32 %450, %178
  %452 = add i32 %451, %179
  %453 = add i32 %452, %185
  %454 = add i32 %453, %187
  %455 = add i32 %454, %192
  %456 = add i32 %455, %195
  %457 = add i32 %456, %202
  %458 = sub i32 %457, %212
  %459 = add i32 %458, %216
  %460 = sub i32 %459, %218
  %461 = add i32 %460, %219
  %462 = add i32 %461, %227
  %463 = sub i32 %462, %229
  %464 = sub i32 %463, %231
  %465 = add i32 %464, %232
  %466 = sub i32 %465, %233
  %467 = sub i32 %466, %235
  %468 = sub i32 %467, %236
  %469 = add i32 %468, %237
  %470 = sub i32 %469, %239
  %471 = sub i32 %470, %240
  %472 = sub i32 %471, %241
  %473 = sub i32 %472, %242
  %474 = sub i32 %473, %247
  %475 = add i32 %474, %252
  %476 = sub i32 %475, %253
  %477 = add i32 %476, %254
  %478 = sub i32 %477, %255
  %479 = add i32 %478, %261
  %480 = sub i32 %479, %263
  %481 = sub i32 %480, %271
  %482 = sub i32 %481, %272
  %483 = sub i32 %482, %273
  %484 = sub i32 %483, %274
  %485 = sub i32 %484, %276
  %486 = sub i32 %485, %278
  %487 = sub i32 %486, %283
  %488 = sub i32 %487, %198
  %489 = add i32 %488, %292
  %490 = sub i32 %489, %295
  %491 = add i32 %490, %296
  %492 = sub i32 %491, %297
  %493 = sub i32 %492, %298
  %494 = add i32 %493, %299
  %495 = add i32 %494, %301
  %496 = sub i32 %495, %183
  %497 = sub i32 %496, %200
  %498 = sub i32 %497, %204
  %499 = sub i32 %498, %211
  %500 = sub i32 %499, %213
  %501 = add i32 %500, %224
  %502 = sub i32 %501, %234
  %503 = sub i32 %502, %257
  %504 = sub i32 %503, %265
  %505 = add i32 %504, %267
  %506 = sub i32 %505, %270
  %507 = sub i32 %506, %282
  %508 = sub i32 %507, %288
  %509 = sub i32 %508, %294
  %510 = add i32 %509, %306
  %511 = sub i32 %510, %244
  %512 = sub i32 %511, %291
  %513 = add i32 %512, %350
  %514 = add i32 %513, %352
  %515 = add i32 %514, %345
  %516 = add i32 %515, %348
  %517 = add i32 %516, %342
  %518 = add i32 %517, %336
  %519 = add i32 %518, %329
  %520 = icmp eq i32 %18, %519
  %521 = select i1 %520, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %522 = tail call i32 @puts(i8* nonnull dereferenceable(1) %521)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
