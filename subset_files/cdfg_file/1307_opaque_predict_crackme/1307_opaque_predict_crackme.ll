; ModuleID = '../.././c_source_file/1307_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1307_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = and i32 %2, %1
  %7 = or i32 %5, %6
  %8 = mul i32 %7, -5
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %0
  %11 = and i32 %4, %1
  %12 = or i32 %11, %10
  %13 = sub i32 %8, %12
  %14 = or i32 %4, %0
  %15 = xor i32 %1, %0
  %16 = and i32 %14, %15
  %17 = or i32 %9, %0
  %18 = xor i32 %17, -1
  %19 = xor i32 %2, %0
  %20 = or i32 %19, %18
  %21 = xor i32 %17, %2
  %22 = xor i32 %15, -1
  %23 = or i32 %22, %2
  %24 = or i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %2
  %27 = xor i32 %0, -1
  %28 = and i32 %9, %2
  %29 = and i32 %28, %27
  %30 = or i32 %9, %2
  %31 = and i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %29, %32
  %34 = or i32 %4, %1
  %35 = xor i32 %34, -1
  %36 = or i32 %5, %35
  %37 = or i32 %25, %2
  %38 = and i32 %6, %0
  %39 = or i32 %2, %1
  %40 = and i32 %39, %27
  %41 = or i32 %38, %40
  %42 = shl i32 %41, 1
  %43 = xor i32 %24, %2
  %44 = or i32 %6, %10
  %45 = or i32 %5, %9
  %46 = xor i32 %6, -1
  %47 = xor i32 %5, %46
  %48 = shl i32 %47, 1
  %49 = or i32 %46, %0
  %50 = xor i32 %34, %0
  %51 = shl i32 %50, 1
  %52 = xor i32 %39, -1
  %53 = xor i32 %52, %0
  %54 = and i32 %1, %0
  %55 = xor i32 %14, -1
  %56 = or i32 %54, %55
  %57 = or i32 %6, %27
  %58 = xor i32 %5, -1
  %59 = and i32 %58, %22
  %60 = xor i32 %2, %1
  %61 = xor i32 %60, -1
  %62 = and i32 %17, %61
  %63 = xor i32 %35, %0
  %64 = or i32 %55, %22
  %65 = shl i32 %64, 1
  %66 = or i32 %54, %4
  %67 = and i32 %46, %27
  %68 = or i32 %55, %1
  %69 = xor i32 %19, -1
  %70 = and i32 %69, %9
  %71 = and i32 %2, %0
  %72 = or i32 %71, %18
  %73 = or i32 %54, %69
  %74 = and i32 %15, %69
  %75 = or i32 %2, %0
  %76 = xor i32 %75, %1
  %77 = shl i32 %76, 1
  %78 = or i32 %19, %10
  %79 = xor i32 %38, -1
  %80 = xor i32 %40, %79
  %81 = or i32 %39, %27
  %82 = or i32 %54, %61
  %83 = shl i32 %82, 1
  %84 = xor i32 %71, %24
  %85 = or i32 %19, %54
  %86 = xor i32 %10, -1
  %87 = and i32 %69, %86
  %88 = xor i32 %60, %0
  %89 = xor i32 %38, %88
  %90 = and i32 %61, %86
  %91 = or i32 %60, %0
  %92 = xor i32 %39, %0
  %93 = or i32 %38, %92
  %94 = or i32 %10, %4
  %95 = or i32 %60, %27
  %96 = xor i32 %29, %95
  %97 = shl i32 %96, 1
  %98 = or i32 %46, %27
  %99 = xor i32 %6, %0
  %100 = shl i32 %99, 1
  %101 = and i32 %61, %0
  %102 = or i32 %4, %25
  %103 = or i32 %5, %15
  %104 = shl i32 %103, 1
  %105 = and i32 %19, %17
  %106 = xor i32 %75, -1
  %107 = or i32 %54, %106
  %108 = or i32 %69, %1
  %109 = and i32 %24, %61
  %110 = and i32 %60, %17
  %111 = shl i32 %71, 1
  %112 = or i32 %11, %0
  %113 = shl i32 %112, 1
  %114 = and i32 %17, %4
  %115 = or i32 %106, %22
  %116 = and i32 %14, %1
  %117 = or i32 %35, %0
  %118 = and i32 %75, %22
  %119 = add i32 %10, 1
  %120 = and i32 %60, %86
  %121 = xor i32 %71, -1
  %122 = and i32 %15, %121
  %123 = and i32 %19, %24
  %124 = shl i32 %123, 1
  %125 = xor i32 %54, -1
  %126 = and i32 %125, %2
  %127 = and i32 %28, %0
  %128 = or i32 %127, %88
  %129 = and i32 %24, %69
  %130 = xor i32 %11, -1
  %131 = xor i32 %10, %130
  %132 = xor i32 %46, %0
  %133 = or i32 %61, %27
  %134 = or i32 %71, %52
  %135 = or i32 %60, %54
  %136 = shl i32 %135, 1
  %137 = add i32 %6, 1
  %138 = or i32 %55, %9
  %139 = xor i32 %88, -1
  %140 = or i32 %38, %139
  %141 = and i32 %6, %27
  %142 = and i32 %39, %0
  %143 = xor i32 %141, -1
  %144 = xor i32 %142, %143
  %145 = or i32 %5, %1
  %146 = and i32 %19, %86
  %147 = or i32 %10, %61
  %148 = and i32 %30, %27
  %149 = or i32 %127, %148
  %150 = and i32 %15, %4
  %151 = or i32 %34, %27
  %152 = and i32 %24, %2
  %153 = or i32 %69, %9
  %154 = add i32 %14, 1
  %155 = and i32 %24, %4
  %156 = or i32 %52, %0
  %157 = xor i32 %39, %54
  %158 = or i32 %52, %27
  %159 = xor i32 %106, %1
  %160 = or i32 %15, %69
  %161 = and i32 %69, %125
  %162 = and i32 %58, %9
  %163 = and i32 %69, %22
  %164 = shl i32 %163, 1
  %165 = or i32 %61, %18
  %166 = or i32 %54, %52
  %167 = or i32 %106, %9
  %168 = shl i32 %167, 1
  %169 = and i32 %34, %0
  %170 = add i32 %1, 1
  %171 = xor i32 %5, %34
  %172 = and i32 %15, %58
  %173 = or i32 %130, %0
  %174 = add i32 %34, 1
  %175 = or i32 %71, %9
  %176 = xor i32 %18, %2
  %177 = and i32 %14, %22
  %178 = and i32 %34, %27
  %179 = and i32 %61, %27
  %180 = xor i32 %71, %1
  %181 = or i32 %11, %27
  %182 = xor i32 %148, 2147483647
  %183 = xor i32 %182, %127
  %184 = and i32 %14, %9
  %185 = and i32 %58, %1
  %186 = xor i32 %75, %54
  %187 = and i32 %19, %9
  %188 = shl i32 %187, 1
  %189 = or i32 %71, %25
  %190 = and i32 %61, %125
  %191 = or i32 %4, %18
  %192 = and i32 %121, %9
  %193 = and i32 %17, %2
  %194 = and i32 %15, %2
  %195 = or i32 %35, %27
  %196 = and i32 %60, %27
  %197 = or i32 %130, %27
  %198 = and i32 %86, %2
  %199 = xor i32 %54, %2
  %200 = shl i32 %95, 1
  %201 = and i32 %121, %22
  %202 = xor i32 %196, %79
  %203 = or i32 %10, %2
  %204 = and i32 %60, %125
  %205 = and i32 %60, %24
  %206 = and i32 %17, %69
  %207 = xor i32 %11, %0
  %208 = xor i32 %34, %54
  %209 = or i32 %71, %1
  %210 = and i32 %4, %22
  %211 = xor i32 %71, %17
  %212 = and i32 %75, %15
  %213 = or i32 %18, %2
  %214 = xor i32 %55, %1
  %215 = or i32 %71, %15
  %216 = shl i32 %215, 2
  %217 = and i32 %60, %0
  %218 = xor i32 %217, %143
  %219 = or i32 %19, %9
  %220 = or i32 %15, %2
  %221 = or i32 %54, %2
  %222 = xor i32 %14, %1
  %223 = and i32 %69, %1
  %224 = or i32 %5, %22
  %225 = xor i32 %91, -1
  %226 = or i32 %127, %225
  %227 = or i32 %71, %11
  %228 = and i32 %19, %15
  %229 = and i32 %19, %22
  %230 = or i32 %38, %196
  %231 = or i32 %141, %217
  %232 = or i32 %106, %1
  %233 = and i32 %75, %9
  %234 = or i32 %141, %142
  %235 = or i32 %15, %4
  %236 = and i32 %121, %1
  %237 = or i32 %39, %0
  %238 = or i32 %69, %18
  %239 = or i32 %15, %55
  %240 = or i32 %6, %0
  %241 = xor i32 %10, %46
  %242 = and i32 %4, %125
  %243 = or i32 %60, %25
  %244 = and i32 %52, %27
  %245 = mul i32 %244, -19
  %246 = and i32 %11, %27
  %247 = shl i32 %246, 1
  %248 = and i32 %52, %0
  %249 = mul i32 %248, -17
  %250 = and i32 %11, %0
  %251 = mul i32 %250, -21
  %252 = and i32 %35, %27
  %253 = mul i32 %141, 9
  %254 = and i32 %35, %0
  %255 = shl i32 %254, 3
  %256 = shl i32 %38, 3
  %257 = add i32 %235, %10
  %258 = add i32 %257, %213
  %259 = add i32 %258, %11
  %260 = add i32 %259, %94
  %261 = add i32 %260, %23
  %262 = add i32 %261, %252
  %263 = add i32 %262, %233
  %264 = add i32 %263, %223
  %265 = add i32 %264, %195
  %266 = add i32 %265, %181
  %267 = add i32 %266, %173
  %268 = add i32 %267, %171
  %269 = add i32 %268, %158
  %270 = add i32 %269, %115
  %271 = add i32 %270, %101
  %272 = add i32 %271, %84
  %273 = add i32 %272, %40
  %274 = add i32 %273, %70
  %275 = add i32 %274, %45
  %276 = add i32 %275, %149
  %277 = add i32 %276, %128
  %278 = add i32 %277, %93
  %279 = add i32 %278, %183
  %280 = shl i32 %279, 1
  %281 = sub i32 %52, %19
  %282 = sub i32 %281, %238
  %283 = sub i32 %282, %239
  %284 = sub i32 %283, %209
  %285 = add i32 %284, %138
  %286 = mul i32 %285, 5
  %287 = sub i32 %240, %37
  %288 = sub i32 %287, %234
  %289 = mul i32 %288, 3
  %290 = add i32 %68, %66
  %291 = shl i32 %290, 2
  %292 = sub i32 -4, %0
  %293 = sub i32 %292, %0
  %294 = add i32 %293, %170
  %295 = add i32 %294, %17
  %296 = add i32 %295, %119
  %297 = add i32 %296, %24
  %298 = sub i32 %297, %2
  %299 = sub i32 %298, %21
  %300 = add i32 %299, %26
  %301 = add i32 %300, %43
  %302 = sub i32 %301, %5
  %303 = add i32 %302, %102
  %304 = add i32 %303, %114
  %305 = sub i32 %304, %126
  %306 = add i32 %305, %137
  %307 = add i32 %306, %150
  %308 = add i32 %307, %152
  %309 = add i32 %308, %154
  %310 = add i32 %309, %155
  %311 = add i32 %310, %174
  %312 = sub i32 %311, %176
  %313 = sub i32 %312, %6
  %314 = sub i32 %313, %191
  %315 = add i32 %314, %193
  %316 = sub i32 %315, %194
  %317 = sub i32 %316, %34
  %318 = sub i32 %317, %198
  %319 = sub i32 %318, %199
  %320 = sub i32 %319, %203
  %321 = add i32 %320, %210
  %322 = add i32 %321, %14
  %323 = add i32 %322, %69
  %324 = add i32 %323, %220
  %325 = add i32 %324, %221
  %326 = sub i32 %325, %242
  %327 = sub i32 %326, %20
  %328 = add i32 %327, %16
  %329 = add i32 %328, %36
  %330 = sub i32 %329, %44
  %331 = add i32 %330, %49
  %332 = add i32 %331, %53
  %333 = add i32 %332, %56
  %334 = add i32 %333, %57
  %335 = sub i32 %334, %59
  %336 = sub i32 %335, %62
  %337 = add i32 %336, %63
  %338 = add i32 %337, %67
  %339 = sub i32 %338, %72
  %340 = sub i32 %339, %73
  %341 = add i32 %340, %74
  %342 = add i32 %341, %78
  %343 = add i32 %342, %81
  %344 = sub i32 %343, %85
  %345 = sub i32 %344, %87
  %346 = sub i32 %345, %90
  %347 = add i32 %346, %91
  %348 = sub i32 %347, %98
  %349 = add i32 %348, %105
  %350 = sub i32 %349, %107
  %351 = add i32 %350, %108
  %352 = sub i32 %351, %109
  %353 = add i32 %352, %110
  %354 = sub i32 %353, %111
  %355 = add i32 %354, %116
  %356 = sub i32 %355, %117
  %357 = sub i32 %356, %118
  %358 = sub i32 %357, %120
  %359 = add i32 %358, %122
  %360 = add i32 %359, %129
  %361 = add i32 %360, %131
  %362 = sub i32 %361, %132
  %363 = add i32 %362, %133
  %364 = add i32 %363, %134
  %365 = add i32 %364, %145
  %366 = sub i32 %365, %146
  %367 = add i32 %366, %147
  %368 = add i32 %367, %151
  %369 = sub i32 %368, %153
  %370 = add i32 %369, %156
  %371 = sub i32 %370, %157
  %372 = add i32 %371, %159
  %373 = add i32 %372, %160
  %374 = add i32 %373, %161
  %375 = add i32 %374, %162
  %376 = add i32 %375, %165
  %377 = sub i32 %376, %166
  %378 = add i32 %377, %169
  %379 = sub i32 %378, %172
  %380 = sub i32 %379, %142
  %381 = add i32 %380, %175
  %382 = add i32 %381, %177
  %383 = sub i32 %382, %178
  %384 = sub i32 %383, %179
  %385 = add i32 %384, %180
  %386 = sub i32 %385, %184
  %387 = sub i32 %386, %185
  %388 = sub i32 %387, %186
  %389 = sub i32 %388, %189
  %390 = sub i32 %389, %190
  %391 = sub i32 %390, %192
  %392 = sub i32 %391, %196
  %393 = sub i32 %392, %197
  %394 = add i32 %393, %201
  %395 = sub i32 %394, %204
  %396 = add i32 %395, %205
  %397 = sub i32 %396, %206
  %398 = sub i32 %397, %207
  %399 = sub i32 %398, %208
  %400 = sub i32 %399, %211
  %401 = add i32 %400, %212
  %402 = sub i32 %401, %214
  %403 = add i32 %402, %219
  %404 = sub i32 %403, %222
  %405 = add i32 %404, %224
  %406 = sub i32 %405, %217
  %407 = add i32 %406, %227
  %408 = sub i32 %407, %228
  %409 = add i32 %408, %229
  %410 = add i32 %409, %232
  %411 = add i32 %410, %236
  %412 = sub i32 %411, %237
  %413 = sub i32 %412, %241
  %414 = sub i32 %413, %92
  %415 = sub i32 %414, %243
  %416 = add i32 %415, %33
  %417 = sub i32 %416, %48
  %418 = sub i32 %417, %51
  %419 = sub i32 %418, %65
  %420 = sub i32 %419, %77
  %421 = sub i32 %420, %80
  %422 = sub i32 %421, %83
  %423 = sub i32 %422, %89
  %424 = sub i32 %423, %100
  %425 = sub i32 %424, %104
  %426 = sub i32 %425, %113
  %427 = sub i32 %426, %124
  %428 = sub i32 %427, %136
  %429 = add i32 %428, %140
  %430 = sub i32 %429, %144
  %431 = sub i32 %430, %164
  %432 = sub i32 %431, %168
  %433 = sub i32 %432, %188
  %434 = sub i32 %433, %200
  %435 = add i32 %434, %202
  %436 = sub i32 %435, %216
  %437 = sub i32 %436, %218
  %438 = add i32 %437, %226
  %439 = sub i32 %438, %230
  %440 = sub i32 %439, %231
  %441 = add i32 %440, %245
  %442 = sub i32 %441, %247
  %443 = add i32 %442, %249
  %444 = add i32 %443, %251
  %445 = add i32 %444, %253
  %446 = add i32 %445, %255
  %447 = sub i32 %446, %256
  %448 = sub i32 %447, %42
  %449 = sub i32 %448, %97
  %450 = add i32 %449, %291
  %451 = add i32 %450, %289
  %452 = add i32 %451, %286
  %453 = add i32 %452, %280
  %454 = icmp eq i32 %13, %453
  %455 = select i1 %454, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %456 = tail call i32 @puts(i8* nonnull dereferenceable(1) %455)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
