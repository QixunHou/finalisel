digraph "DFG for'crackme' function" {
	Node0x1a8dac0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x1a8db30[shape=record, label="  %4 = xor i32 %3, %1"];
	Node0x1a8dbf0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1a8dc60[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1a8dcd0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1a8dd40[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1a8ddb0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1a8de20[shape=record, label="  %10 = and i32 %5, %0"];
	Node0x1a8de90[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0x1a8df30[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x1a8dfa0[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0x1a8e010[shape=record, label="  %14 = sub i32 %1, %0"];
	Node0x1a8e080[shape=record, label="  %15 = add i32 %14, %4"];
	Node0x1a8e0f0[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x1a8e160[shape=record, label="  %17 = add i32 %16, %8"];
	Node0x1a8e1d0[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0x1a8e240[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x1a8e2b0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x1a8e320[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0x1a8e390[shape=record, label="  %22 = icmp eq i32 %21, %3"];
	Node0x1a2e268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a8e830[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x1a8e880[shape=record, label="  ret void"];
	Node0x1a8dac0 -> Node0x1a8db30;
	Node0x1a8db30 -> Node0x1a8dbf0;
	Node0x1a8dbf0 -> Node0x1a8dc60;
	Node0x1a8dc60 -> Node0x1a8dcd0;
	Node0x1a8dcd0 -> Node0x1a8dd40;
	Node0x1a8dd40 -> Node0x1a8ddb0;
	Node0x1a8ddb0 -> Node0x1a8de20;
	Node0x1a8de20 -> Node0x1a8de90;
	Node0x1a8de90 -> Node0x1a8df30;
	Node0x1a8df30 -> Node0x1a8dfa0;
	Node0x1a8dfa0 -> Node0x1a8e010;
	Node0x1a8e010 -> Node0x1a8e080;
	Node0x1a8e080 -> Node0x1a8e0f0;
	Node0x1a8e0f0 -> Node0x1a8e160;
	Node0x1a8e160 -> Node0x1a8e1d0;
	Node0x1a8e1d0 -> Node0x1a8e240;
	Node0x1a8e240 -> Node0x1a8e2b0;
	Node0x1a8e2b0 -> Node0x1a8e320;
	Node0x1a8e320 -> Node0x1a8e390;
	Node0x1a8e390 -> Node0x1a2e268;
	Node0x1a2e268 -> Node0x1a8e830;
	Node0x1a8e830 -> Node0x1a8e880;
edge [color=red]
	Node0x1a8dac0 -> Node0x1a8db30;
	Node0x1a8dbf0 -> Node0x1a8dc60;
	Node0x1a8dcd0 -> Node0x1a8dd40;
	Node0x1a8dbf0 -> Node0x1a8de20;
	Node0x1a8ddb0 -> Node0x1a8de90;
	Node0x1a8de90 -> Node0x1a8df30;
	Node0x1a8de20 -> Node0x1a8dfa0;
	Node0x1a8e010 -> Node0x1a8e080;
	Node0x1a8db30 -> Node0x1a8e080;
	Node0x1a8e080 -> Node0x1a8e0f0;
	Node0x1a8dc60 -> Node0x1a8e0f0;
	Node0x1a8e0f0 -> Node0x1a8e160;
	Node0x1a8dd40 -> Node0x1a8e160;
	Node0x1a8e160 -> Node0x1a8e1d0;
	Node0x1a8ddb0 -> Node0x1a8e1d0;
	Node0x1a8e1d0 -> Node0x1a8e240;
	Node0x1a8de20 -> Node0x1a8e240;
	Node0x1a8e240 -> Node0x1a8e2b0;
	Node0x1a8df30 -> Node0x1a8e2b0;
	Node0x1a8e2b0 -> Node0x1a8e320;
	Node0x1a8dfa0 -> Node0x1a8e320;
	Node0x1a8e320 -> Node0x1a8e390;
	Node0x1a8dac0 -> Node0x1a8e390;
	Node0x1a8e390 -> Node0x1a2e268;
	Node0x1a2e268 -> Node0x1a8e830;
}
