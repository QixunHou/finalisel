; ModuleID = '../.././c_source_file/1572_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1572_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, -1
  %6 = or i32 %5, %0
  %7 = and i32 %6, %4
  %8 = sub i32 0, %7
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %0
  %12 = or i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %10, %13
  %15 = or i32 %2, %0
  %16 = xor i32 %15, -1
  %17 = or i32 %16, %4
  %18 = and i32 %2, %1
  %19 = or i32 %18, %0
  %20 = or i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = xor i32 %21, %0
  %23 = and i32 %5, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %24, %1
  %26 = or i32 %4, %0
  %27 = and i32 %9, %26
  %28 = and i32 %5, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %0
  %31 = and i32 %18, %0
  %32 = xor i32 %9, %0
  %33 = xor i32 %31, %32
  %34 = xor i32 %26, %2
  %35 = and i32 %2, %0
  %36 = xor i32 %1, %0
  %37 = or i32 %35, %36
  %38 = xor i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %26, %39
  %41 = xor i32 %0, -1
  %42 = or i32 %5, %1
  %43 = or i32 %42, %41
  %44 = and i32 %6, %1
  %45 = shl i32 %44, 1
  %46 = and i32 %1, %0
  %47 = or i32 %46, %39
  %48 = xor i32 %18, -1
  %49 = or i32 %48, %0
  %50 = xor i32 %35, -1
  %51 = xor i32 %36, -1
  %52 = and i32 %50, %51
  %53 = and i32 %18, %41
  %54 = and i32 %9, %0
  %55 = or i32 %53, %54
  %56 = xor i32 %20, %0
  %57 = xor i32 %32, -1
  %58 = or i32 %31, %57
  %59 = shl i32 %58, 2
  %60 = or i32 %36, %16
  %61 = or i32 %35, %28
  %62 = and i32 %20, %0
  %63 = and i32 %10, %0
  %64 = xor i32 %6, -1
  %65 = or i32 %64, %1
  %66 = xor i32 %62, -1
  %67 = xor i32 %53, %66
  %68 = xor i32 %46, -1
  %69 = and i32 %39, %68
  %70 = shl i32 %69, 1
  %71 = xor i32 %12, %2
  %72 = xor i32 %35, %29
  %73 = shl i32 %72, 1
  %74 = and i32 %15, %51
  %75 = and i32 %4, %0
  %76 = xor i32 %75, -1
  %77 = and i32 %76, %2
  %78 = shl i32 %77, 1
  %79 = and i32 %26, %10
  %80 = and i32 %38, %76
  %81 = and i32 %24, %1
  %82 = and i32 %4, %2
  %83 = and i32 %82, %0
  %84 = or i32 %4, %2
  %85 = and i32 %84, %41
  %86 = xor i32 %83, -1
  %87 = xor i32 %85, %86
  %88 = or i32 %23, %36
  %89 = or i32 %9, %0
  %90 = xor i32 %83, %89
  %91 = or i32 %10, %41
  %92 = and i32 %9, %41
  %93 = xor i32 %42, -1
  %94 = xor i32 %93, %0
  %95 = and i32 %24, %51
  %96 = or i32 %36, %5
  %97 = and i32 %38, %68
  %98 = and i32 %15, %1
  %99 = shl i32 %98, 1
  %100 = and i32 %5, %51
  %101 = and i32 %6, %51
  %102 = xor i32 %15, %1
  %103 = or i32 %23, %4
  %104 = or i32 %64, %51
  %105 = xor i32 %35, %20
  %106 = and i32 %38, %36
  %107 = and i32 %39, %1
  %108 = shl i32 %107, 1
  %109 = add i32 %36, 1
  %110 = and i32 %39, %4
  %111 = and i32 %5, %76
  %112 = or i32 %39, %4
  %113 = or i32 %53, %62
  %114 = and i32 %9, %68
  %115 = shl i32 %114, 1
  %116 = xor i32 %83, %57
  %117 = and i32 %36, %24
  %118 = or i32 %35, %51
  %119 = and i32 %10, %68
  %120 = or i32 %29, %41
  %121 = or i32 %21, %41
  %122 = or i32 %28, %75
  %123 = and i32 %26, %2
  %124 = xor i32 %26, -1
  %125 = or i32 %10, %124
  %126 = or i32 %83, %32
  %127 = or i32 %36, %2
  %128 = or i32 %83, %85
  %129 = xor i32 %64, %1
  %130 = shl i32 %23, 1
  %131 = xor i32 %23, %1
  %132 = and i32 %24, %4
  %133 = and i32 %26, %5
  %134 = or i32 %75, %10
  %135 = or i32 %23, %51
  %136 = and i32 %29, %0
  %137 = shl i32 %136, 2
  %138 = and i32 %38, %51
  %139 = or i32 %38, %51
  %140 = xor i32 %20, %46
  %141 = or i32 %124, %2
  %142 = or i32 %5, %51
  %143 = or i32 %9, %41
  %144 = xor i32 %6, %46
  %145 = or i32 %23, %18
  %146 = or i32 %38, %124
  %147 = and i32 %15, %4
  %148 = and i32 %48, %41
  %149 = shl i32 %148, 1
  %150 = and i32 %39, %76
  %151 = and i32 %82, %41
  %152 = and i32 %84, %0
  %153 = or i32 %151, %152
  %154 = or i32 %16, %51
  %155 = and i32 %5, %68
  %156 = and i32 %36, %39
  %157 = xor i32 %29, %0
  %158 = add i32 %42, 1
  %159 = shl i32 %54, 1
  %160 = or i32 %28, %0
  %161 = or i32 %42, %0
  %162 = xor i32 %56, -1
  %163 = xor i32 %31, %162
  %164 = and i32 %15, %36
  %165 = and i32 %48, %0
  %166 = add i32 %9, 1
  %167 = and i32 %12, %10
  %168 = xor i32 %75, %2
  %169 = or i32 %18, %75
  %170 = or i32 %20, %41
  %171 = xor i32 %18, %0
  %172 = add i32 %6, 1
  %173 = add i32 %12, 1
  %174 = or i32 %35, %21
  %175 = xor i32 %35, %1
  %176 = and i32 %42, %41
  %177 = or i32 %18, %41
  %178 = xor i32 %35, %26
  %179 = and i32 %12, %5
  %180 = xor i32 %75, %29
  %181 = add i32 %2, 1
  %182 = or i32 %38, %46
  %183 = add i32 %26, 1
  %184 = or i32 %16, %1
  %185 = or i32 %10, %0
  %186 = xor i32 %84, %41
  %187 = xor i32 %186, %83
  %188 = or i32 %9, %46
  %189 = xor i32 %68, %2
  %190 = shl i32 %4, 1
  %191 = xor i32 %35, %12
  %192 = xor i32 %75, %48
  %193 = xor i32 %20, 2147483647
  %194 = or i32 %193, %0
  %195 = xor i32 %194, %31
  %196 = or i32 %38, %36
  %197 = and i32 %50, %4
  %198 = shl i32 %197, 1
  %199 = or i32 %28, %41
  %200 = or i32 %23, %1
  %201 = and i32 %38, %12
  %202 = or i32 %38, %1
  %203 = xor i32 %6, %1
  %204 = and i32 %39, %51
  %205 = shl i32 %204, 1
  %206 = or i32 %46, %64
  %207 = or i32 %48, %41
  %208 = or i32 %46, %10
  %209 = shl i32 %208, 1
  %210 = and i32 %21, %41
  %211 = mul i32 %210, 18
  %212 = and i32 %28, %41
  %213 = mul i32 %212, 12
  %214 = and i32 %28, %0
  %215 = and i32 %93, %41
  %216 = shl i32 %215, 1
  %217 = mul i32 %53, -15
  %218 = and i32 %93, %0
  %219 = mul i32 %218, 11
  %220 = add i32 %76, %2
  %221 = add i32 %220, %9
  %222 = add i32 %221, %155
  %223 = add i32 %222, %202
  %224 = add i32 %223, %192
  %225 = add i32 %224, %180
  %226 = add i32 %225, %178
  %227 = add i32 %226, %106
  %228 = add i32 %227, %101
  %229 = add i32 %228, %56
  %230 = add i32 %229, %19
  %231 = sub i32 %230, %11
  %232 = add i32 %231, %116
  %233 = add i32 %232, %55
  %234 = add i32 %233, %195
  %235 = shl i32 %234, 1
  %236 = sub i32 %196, %176
  %237 = mul i32 %236, 3
  %238 = add i32 %214, %63
  %239 = shl i32 %238, 2
  %240 = sub i32 %140, %28
  %241 = mul i32 %240, 5
  %242 = add i32 %0, 2
  %243 = add i32 %242, %12
  %244 = add i32 %243, %46
  %245 = add i32 %244, %109
  %246 = add i32 %245, %173
  %247 = add i32 %246, %181
  %248 = add i32 %247, %183
  %249 = sub i32 %248, %190
  %250 = add i32 %249, %34
  %251 = sub i32 %250, %15
  %252 = sub i32 %251, %71
  %253 = sub i32 %252, %6
  %254 = add i32 %253, %96
  %255 = add i32 %254, %100
  %256 = add i32 %255, %38
  %257 = add i32 %256, %111
  %258 = add i32 %257, %123
  %259 = add i32 %258, %127
  %260 = sub i32 %259, %133
  %261 = add i32 %260, %141
  %262 = sub i32 %261, %142
  %263 = add i32 %262, %158
  %264 = add i32 %263, %20
  %265 = add i32 %264, %35
  %266 = add i32 %265, %166
  %267 = sub i32 %266, %168
  %268 = add i32 %267, %172
  %269 = sub i32 %268, %179
  %270 = sub i32 %269, %189
  %271 = add i32 %270, %18
  %272 = add i32 %271, %14
  %273 = sub i32 %272, %17
  %274 = sub i32 %273, %22
  %275 = sub i32 %274, %25
  %276 = sub i32 %275, %27
  %277 = sub i32 %276, %30
  %278 = add i32 %277, %37
  %279 = sub i32 %278, %40
  %280 = add i32 %279, %43
  %281 = add i32 %280, %47
  %282 = sub i32 %281, %49
  %283 = add i32 %282, %52
  %284 = sub i32 %283, %60
  %285 = sub i32 %284, %61
  %286 = add i32 %285, %62
  %287 = sub i32 %286, %65
  %288 = add i32 %287, %74
  %289 = sub i32 %288, %78
  %290 = add i32 %289, %79
  %291 = add i32 %290, %80
  %292 = sub i32 %291, %81
  %293 = add i32 %292, %88
  %294 = add i32 %293, %91
  %295 = sub i32 %294, %92
  %296 = add i32 %295, %94
  %297 = sub i32 %296, %95
  %298 = add i32 %297, %97
  %299 = sub i32 %298, %102
  %300 = sub i32 %299, %103
  %301 = add i32 %300, %104
  %302 = sub i32 %301, %105
  %303 = sub i32 %302, %110
  %304 = add i32 %303, %112
  %305 = sub i32 %304, %117
  %306 = sub i32 %305, %118
  %307 = add i32 %306, %119
  %308 = sub i32 %307, %120
  %309 = add i32 %308, %121
  %310 = sub i32 %309, %122
  %311 = add i32 %310, %125
  %312 = add i32 %311, %129
  %313 = sub i32 %312, %130
  %314 = add i32 %313, %131
  %315 = sub i32 %314, %132
  %316 = add i32 %315, %134
  %317 = sub i32 %316, %135
  %318 = sub i32 %317, %138
  %319 = add i32 %318, %139
  %320 = add i32 %319, %143
  %321 = sub i32 %320, %144
  %322 = sub i32 %321, %145
  %323 = sub i32 %322, %146
  %324 = sub i32 %323, %147
  %325 = sub i32 %324, %150
  %326 = sub i32 %325, %154
  %327 = sub i32 %326, %156
  %328 = sub i32 %327, %157
  %329 = add i32 %328, %160
  %330 = sub i32 %329, %161
  %331 = sub i32 %330, %164
  %332 = sub i32 %331, %165
  %333 = add i32 %332, %167
  %334 = add i32 %333, %169
  %335 = add i32 %334, %170
  %336 = sub i32 %335, %171
  %337 = sub i32 %336, %174
  %338 = sub i32 %337, %175
  %339 = sub i32 %338, %177
  %340 = add i32 %339, %182
  %341 = add i32 %340, %184
  %342 = sub i32 %341, %185
  %343 = add i32 %342, %188
  %344 = add i32 %343, %191
  %345 = sub i32 %344, %199
  %346 = sub i32 %345, %200
  %347 = add i32 %346, %201
  %348 = add i32 %347, %203
  %349 = add i32 %348, %206
  %350 = sub i32 %349, %207
  %351 = add i32 %350, %31
  %352 = sub i32 %351, %33
  %353 = sub i32 %352, %45
  %354 = sub i32 %353, %67
  %355 = sub i32 %354, %70
  %356 = sub i32 %355, %73
  %357 = sub i32 %356, %87
  %358 = add i32 %357, %90
  %359 = sub i32 %358, %99
  %360 = sub i32 %359, %108
  %361 = sub i32 %360, %113
  %362 = sub i32 %361, %115
  %363 = sub i32 %362, %126
  %364 = add i32 %363, %128
  %365 = sub i32 %364, %137
  %366 = sub i32 %365, %149
  %367 = add i32 %366, %153
  %368 = sub i32 %367, %159
  %369 = add i32 %368, %163
  %370 = sub i32 %369, %187
  %371 = sub i32 %370, %198
  %372 = sub i32 %371, %205
  %373 = sub i32 %372, %209
  %374 = add i32 %373, %211
  %375 = add i32 %374, %213
  %376 = sub i32 %375, %216
  %377 = add i32 %376, %217
  %378 = add i32 %377, %219
  %379 = sub i32 %378, %59
  %380 = add i32 %379, %237
  %381 = add i32 %380, %239
  %382 = add i32 %381, %241
  %383 = add i32 %382, %235
  %384 = icmp eq i32 %383, %8
  %385 = select i1 %384, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %386 = tail call i32 @puts(i8* nonnull dereferenceable(1) %385)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
