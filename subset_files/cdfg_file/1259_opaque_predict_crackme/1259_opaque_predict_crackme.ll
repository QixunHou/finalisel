; ModuleID = '../.././c_source_file/1259_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1259_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %1, %0
  %7 = and i32 %5, %6
  %8 = mul i32 %7, -2
  %9 = xor i32 %1, -1
  %10 = or i32 %9, %0
  %11 = and i32 %10, %2
  %12 = and i32 %4, %1
  %13 = xor i32 %12, -1
  %14 = xor i32 %13, %0
  %15 = xor i32 %6, -1
  %16 = and i32 %15, %2
  %17 = xor i32 %2, %1
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %0
  %20 = and i32 %4, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %15
  %23 = xor i32 %0, -1
  %24 = and i32 %2, %1
  %25 = and i32 %24, %23
  %26 = or i32 %2, %1
  %27 = and i32 %26, %0
  %28 = or i32 %25, %27
  %29 = and i32 %24, %0
  %30 = and i32 %26, %23
  %31 = xor i32 %29, -1
  %32 = xor i32 %30, %31
  %33 = and i32 %9, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %2, %0
  %36 = and i32 %35, %34
  %37 = and i32 %6, %4
  %38 = and i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %39, %1
  %41 = or i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %15
  %44 = xor i32 %17, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %29, %45
  %47 = or i32 %35, %15
  %48 = xor i32 %26, -1
  %49 = or i32 %38, %48
  %50 = xor i32 %29, %44
  %51 = or i32 %4, %1
  %52 = xor i32 %51, %0
  %53 = xor i32 %10, -1
  %54 = or i32 %35, %53
  %55 = xor i32 %35, -1
  %56 = and i32 %55, %1
  %57 = or i32 %38, %15
  %58 = and i32 %51, %23
  %59 = xor i32 %39, %1
  %60 = or i32 %26, %0
  %61 = and i32 %6, %21
  %62 = and i32 %1, %0
  %63 = or i32 %62, %2
  %64 = xor i32 %21, %1
  %65 = or i32 %1, %0
  %66 = and i32 %65, %2
  %67 = and i32 %9, %2
  %68 = and i32 %67, %0
  %69 = or i32 %17, %0
  %70 = xor i32 %69, 2147483647
  %71 = or i32 %70, %68
  %72 = or i32 %35, %1
  %73 = add i32 %17, 1
  %74 = xor i32 %5, -1
  %75 = or i32 %6, %74
  %76 = and i32 %67, %23
  %77 = or i32 %9, %2
  %78 = and i32 %77, %0
  %79 = xor i32 %78, 2147483647
  %80 = xor i32 %79, %76
  %81 = and i32 %17, %23
  %82 = xor i32 %41, %1
  %83 = xor i32 %51, -1
  %84 = or i32 %62, %83
  %85 = xor i32 %65, -1
  %86 = or i32 %85, %2
  %87 = and i32 %17, %34
  %88 = and i32 %65, %55
  %89 = xor i32 %38, %65
  %90 = or i32 %20, %83
  %91 = or i32 %20, %9
  %92 = or i32 %4, %85
  %93 = add i32 %10, 1
  %94 = or i32 %17, %23
  %95 = and i32 %77, %23
  %96 = or i32 %68, %95
  %97 = xor i32 %20, %1
  %98 = and i32 %21, %1
  %99 = xor i32 %81, 2147483647
  %100 = xor i32 %99, %29
  %101 = shl i32 %100, 1
  %102 = or i32 %20, %6
  %103 = and i32 %5, %1
  %104 = xor i32 %33, %2
  %105 = shl i32 %41, 1
  %106 = and i32 %35, %10
  %107 = or i32 %74, %9
  %108 = xor i32 %76, %94
  %109 = and i32 %17, %0
  %110 = or i32 %25, %109
  %111 = and i32 %41, %9
  %112 = xor i32 %24, -1
  %113 = xor i32 %68, %45
  %114 = shl i32 %30, 1
  %115 = and i32 %35, %6
  %116 = xor i32 %10, %2
  %117 = and i32 %65, %4
  %118 = xor i32 %34, %2
  %119 = and i32 %35, %15
  %120 = and i32 %13, %0
  %121 = shl i32 %10, 1
  %122 = xor i32 %26, %62
  %123 = xor i32 %62, -1
  %124 = and i32 %18, %123
  %125 = shl i32 %124, 1
  %126 = xor i32 %62, %2
  %127 = xor i32 %33, %112
  %128 = or i32 %33, %55
  %129 = and i32 %34, %2
  %130 = and i32 %35, %9
  %131 = and i32 %13, %23
  %132 = xor i32 %26, %23
  %133 = xor i32 %132, %29
  %134 = xor i32 %112, %0
  %135 = and i32 %10, %18
  %136 = add i32 %33, 1
  %137 = and i32 %17, %65
  %138 = or i32 %6, %2
  %139 = xor i32 %109, -1
  %140 = xor i32 %25, %139
  %141 = or i32 %29, %30
  %142 = or i32 %74, %15
  %143 = xor i32 %94, -1
  %144 = or i32 %76, %143
  %145 = xor i32 %123, %2
  %146 = or i32 %24, %0
  %147 = xor i32 %20, %51
  %148 = or i32 %38, %85
  %149 = or i32 %53, %2
  %150 = and i32 %51, %0
  %151 = or i32 %55, %85
  %152 = or i32 %18, %23
  %153 = shl i32 %152, 1
  %154 = and i32 %41, %15
  %155 = or i32 %35, %85
  %156 = or i32 %35, %6
  %157 = and i32 %17, %123
  %158 = shl i32 %157, 1
  %159 = and i32 %35, %65
  %160 = or i32 %6, %55
  %161 = xor i32 %20, %112
  %162 = or i32 %29, %81
  %163 = and i32 %112, %23
  %164 = xor i32 %18, %0
  %165 = and i32 %4, %123
  %166 = xor i32 %42, %1
  %167 = or i32 %13, %0
  %168 = add i32 %38, 1
  %169 = xor i32 %85, %2
  %170 = or i32 %76, %78
  %171 = and i32 %48, %23
  %172 = mul i32 %171, -12
  %173 = and i32 %12, %23
  %174 = mul i32 %173, -9
  %175 = and i32 %48, %0
  %176 = and i32 %12, %0
  %177 = mul i32 %176, -13
  %178 = and i32 %83, %23
  %179 = mul i32 %178, -19
  %180 = shl i32 %25, 2
  %181 = and i32 %83, %0
  %182 = mul i32 %181, -11
  %183 = mul i32 %29, -3
  %184 = add i32 %117, %112
  %185 = add i32 %184, %63
  %186 = add i32 %185, %160
  %187 = add i32 %186, %154
  %188 = add i32 %187, %148
  %189 = add i32 %188, %135
  %190 = add i32 %189, %97
  %191 = add i32 %190, %72
  %192 = add i32 %191, %57
  %193 = add i32 %192, %54
  %194 = add i32 %193, %170
  %195 = add i32 %194, %113
  %196 = add i32 %195, %71
  %197 = add i32 %196, %80
  %198 = shl i32 %197, 1
  %199 = sub i32 %23, %175
  %200 = sub i32 %199, %161
  %201 = sub i32 %200, %142
  %202 = add i32 %201, %91
  %203 = add i32 %202, %96
  %204 = mul i32 %203, 5
  %205 = sub i32 %1, %2
  %206 = add i32 %205, %93
  %207 = sub i32 %206, %6
  %208 = add i32 %207, %136
  %209 = add i32 %208, %15
  %210 = sub i32 %209, %11
  %211 = add i32 %210, %16
  %212 = sub i32 %211, %37
  %213 = add i32 %212, %24
  %214 = add i32 %213, %66
  %215 = add i32 %214, %73
  %216 = add i32 %215, %86
  %217 = sub i32 %216, %17
  %218 = add i32 %217, %92
  %219 = add i32 %218, %104
  %220 = sub i32 %219, %116
  %221 = sub i32 %220, %118
  %222 = sub i32 %221, %121
  %223 = sub i32 %222, %126
  %224 = add i32 %223, %129
  %225 = add i32 %224, %12
  %226 = add i32 %225, %38
  %227 = sub i32 %226, %138
  %228 = add i32 %227, %74
  %229 = sub i32 %228, %145
  %230 = sub i32 %229, %149
  %231 = add i32 %230, %26
  %232 = sub i32 %231, %20
  %233 = add i32 %232, %35
  %234 = add i32 %233, %165
  %235 = add i32 %234, %168
  %236 = sub i32 %235, %169
  %237 = sub i32 %236, %14
  %238 = sub i32 %237, %19
  %239 = add i32 %238, %22
  %240 = sub i32 %239, %36
  %241 = add i32 %240, %40
  %242 = sub i32 %241, %43
  %243 = sub i32 %242, %47
  %244 = sub i32 %243, %49
  %245 = add i32 %244, %52
  %246 = add i32 %245, %56
  %247 = sub i32 %246, %58
  %248 = add i32 %247, %59
  %249 = sub i32 %248, %60
  %250 = sub i32 %249, %61
  %251 = add i32 %250, %64
  %252 = add i32 %251, %75
  %253 = add i32 %252, %81
  %254 = add i32 %253, %82
  %255 = sub i32 %254, %84
  %256 = add i32 %255, %87
  %257 = add i32 %256, %88
  %258 = sub i32 %257, %89
  %259 = add i32 %258, %90
  %260 = sub i32 %259, %44
  %261 = add i32 %260, %94
  %262 = sub i32 %261, %98
  %263 = add i32 %262, %102
  %264 = add i32 %263, %103
  %265 = sub i32 %264, %105
  %266 = add i32 %265, %106
  %267 = add i32 %266, %107
  %268 = add i32 %267, %111
  %269 = sub i32 %268, %115
  %270 = add i32 %269, %119
  %271 = sub i32 %270, %120
  %272 = sub i32 %271, %122
  %273 = add i32 %272, %127
  %274 = sub i32 %273, %128
  %275 = add i32 %274, %130
  %276 = sub i32 %275, %131
  %277 = sub i32 %276, %134
  %278 = add i32 %277, %137
  %279 = sub i32 %278, %146
  %280 = add i32 %279, %147
  %281 = sub i32 %280, %150
  %282 = add i32 %281, %151
  %283 = add i32 %282, %155
  %284 = add i32 %283, %156
  %285 = sub i32 %284, %159
  %286 = sub i32 %285, %109
  %287 = add i32 %286, %163
  %288 = sub i32 %287, %164
  %289 = add i32 %288, %166
  %290 = add i32 %289, %167
  %291 = sub i32 %290, %28
  %292 = sub i32 %291, %32
  %293 = add i32 %292, %46
  %294 = sub i32 %293, %50
  %295 = sub i32 %294, %108
  %296 = add i32 %295, %110
  %297 = sub i32 %296, %114
  %298 = sub i32 %297, %125
  %299 = add i32 %298, %133
  %300 = sub i32 %299, %140
  %301 = sub i32 %300, %141
  %302 = sub i32 %301, %144
  %303 = sub i32 %302, %153
  %304 = sub i32 %303, %158
  %305 = add i32 %304, %162
  %306 = add i32 %305, %172
  %307 = add i32 %306, %174
  %308 = add i32 %307, %177
  %309 = add i32 %308, %179
  %310 = sub i32 %309, %180
  %311 = add i32 %310, %182
  %312 = add i32 %311, %183
  %313 = sub i32 %312, %101
  %314 = add i32 %313, %204
  %315 = add i32 %314, %198
  %316 = icmp eq i32 %8, %315
  %317 = select i1 %316, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %318 = tail call i32 @puts(i8* nonnull dereferenceable(1) %317)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
