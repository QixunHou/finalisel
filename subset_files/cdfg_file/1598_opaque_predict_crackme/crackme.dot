digraph "DFG for'crackme' function" {
	Node0x2103020[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x21030c0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x2103130[shape=record, label="  %7 = add i32 %6, %2"];
	Node0x21031a0[shape=record, label="  %8 = xor i32 %3, %0"];
	Node0x2103210[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0x2103280[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x21032f0[shape=record, label="  %11 = or i32 %5, %1"];
	Node0x2103360[shape=record, label="  %12 = xor i32 %1, -1"];
	Node0x21033d0[shape=record, label="  %13 = xor i32 %12, %2"];
	Node0x2103470[shape=record, label="  %14 = add i32 %10, 1"];
	Node0x21034e0[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x2103550[shape=record, label="  %16 = or i32 %15, %3"];
	Node0x21035c0[shape=record, label="  %17 = and i32 %15, %3"];
	Node0x2103630[shape=record, label="  %18 = or i32 %3, %0"];
	Node0x21036a0[shape=record, label="  %19 = shl i32 %16, 1"];
	Node0x2103710[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x21037b0[shape=record, label="  %21 = shl i32 %17, 2"];
	Node0x2103820[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x2103890[shape=record, label="  %23 = add i32 %14, %13"];
	Node0x2103900[shape=record, label="  %24 = add i32 %23, %11"];
	Node0x21039a0[shape=record, label="  %25 = mul i32 %24, 3"];
	Node0x2103a40[shape=record, label="  %26 = mul i32 %1, -6"];
	Node0x2103ab0[shape=record, label="  %27 = sub i32 %1, %11"];
	Node0x2103b50[shape=record, label="  %28 = mul i32 %27, 5"];
	Node0x2103bc0[shape=record, label="  %29 = add i32 %14, %16"];
	Node0x2103c30[shape=record, label="  %30 = add i32 %29, %17"];
	Node0x2103ca0[shape=record, label="  %31 = add i32 %30, %8"];
	Node0x2103d10[shape=record, label="  %32 = add i32 %31, %18"];
	Node0x2103f90[shape=record, label="  %33 = sub i32 %32, %22"];
	Node0x2104000[shape=record, label="  %34 = sub i32 %33, %21"];
	Node0x2104070[shape=record, label="  %35 = add i32 %34, %26"];
	Node0x21040e0[shape=record, label="  %36 = add i32 %35, %28"];
	Node0x2104150[shape=record, label="  %37 = sub i32 %36, %20"];
	Node0x21041c0[shape=record, label="  %38 = add i32 %37, %25"];
	Node0x2104230[shape=record, label="  %39 = icmp eq i32 %9, %38"];
	Node0x20a3268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x21046d0[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x2104720[shape=record, label="  ret void"];
	Node0x2103020 -> Node0x21030c0;
	Node0x21030c0 -> Node0x2103130;
	Node0x2103130 -> Node0x21031a0;
	Node0x21031a0 -> Node0x2103210;
	Node0x2103210 -> Node0x2103280;
	Node0x2103280 -> Node0x21032f0;
	Node0x21032f0 -> Node0x2103360;
	Node0x2103360 -> Node0x21033d0;
	Node0x21033d0 -> Node0x2103470;
	Node0x2103470 -> Node0x21034e0;
	Node0x21034e0 -> Node0x2103550;
	Node0x2103550 -> Node0x21035c0;
	Node0x21035c0 -> Node0x2103630;
	Node0x2103630 -> Node0x21036a0;
	Node0x21036a0 -> Node0x2103710;
	Node0x2103710 -> Node0x21037b0;
	Node0x21037b0 -> Node0x2103820;
	Node0x2103820 -> Node0x2103890;
	Node0x2103890 -> Node0x2103900;
	Node0x2103900 -> Node0x21039a0;
	Node0x21039a0 -> Node0x2103a40;
	Node0x2103a40 -> Node0x2103ab0;
	Node0x2103ab0 -> Node0x2103b50;
	Node0x2103b50 -> Node0x2103bc0;
	Node0x2103bc0 -> Node0x2103c30;
	Node0x2103c30 -> Node0x2103ca0;
	Node0x2103ca0 -> Node0x2103d10;
	Node0x2103d10 -> Node0x2103f90;
	Node0x2103f90 -> Node0x2104000;
	Node0x2104000 -> Node0x2104070;
	Node0x2104070 -> Node0x21040e0;
	Node0x21040e0 -> Node0x2104150;
	Node0x2104150 -> Node0x21041c0;
	Node0x21041c0 -> Node0x2104230;
	Node0x2104230 -> Node0x20a3268;
	Node0x20a3268 -> Node0x21046d0;
	Node0x21046d0 -> Node0x2104720;
edge [color=red]
	Node0x2103020 -> Node0x21030c0;
	Node0x21030c0 -> Node0x2103130;
	Node0x2103130 -> Node0x2103210;
	Node0x21031a0 -> Node0x2103210;
	Node0x2103020 -> Node0x21032f0;
	Node0x2103360 -> Node0x21033d0;
	Node0x2103280 -> Node0x2103470;
	Node0x21034e0 -> Node0x2103550;
	Node0x21034e0 -> Node0x21035c0;
	Node0x2103550 -> Node0x21036a0;
	Node0x21036a0 -> Node0x2103710;
	Node0x21035c0 -> Node0x21037b0;
	Node0x2103470 -> Node0x2103890;
	Node0x21033d0 -> Node0x2103890;
	Node0x2103890 -> Node0x2103900;
	Node0x21032f0 -> Node0x2103900;
	Node0x2103900 -> Node0x21039a0;
	Node0x21032f0 -> Node0x2103ab0;
	Node0x2103ab0 -> Node0x2103b50;
	Node0x2103470 -> Node0x2103bc0;
	Node0x2103550 -> Node0x2103bc0;
	Node0x2103bc0 -> Node0x2103c30;
	Node0x21035c0 -> Node0x2103c30;
	Node0x2103c30 -> Node0x2103ca0;
	Node0x21031a0 -> Node0x2103ca0;
	Node0x2103ca0 -> Node0x2103d10;
	Node0x2103630 -> Node0x2103d10;
	Node0x2103d10 -> Node0x2103f90;
	Node0x2103820 -> Node0x2103f90;
	Node0x2103f90 -> Node0x2104000;
	Node0x21037b0 -> Node0x2104000;
	Node0x2104000 -> Node0x2104070;
	Node0x2103a40 -> Node0x2104070;
	Node0x2104070 -> Node0x21040e0;
	Node0x2103b50 -> Node0x21040e0;
	Node0x21040e0 -> Node0x2104150;
	Node0x2103710 -> Node0x2104150;
	Node0x2104150 -> Node0x21041c0;
	Node0x21039a0 -> Node0x21041c0;
	Node0x2103210 -> Node0x2104230;
	Node0x21041c0 -> Node0x2104230;
	Node0x2104230 -> Node0x20a3268;
	Node0x20a3268 -> Node0x21046d0;
}
