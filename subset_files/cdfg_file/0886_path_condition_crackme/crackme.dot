digraph "DFG for'crackme' function" {
	Node0x144ba30[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x144baa0[shape=record, label="  %4 = xor i32 %3, %0"];
	Node0x144bb60[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x144bbd0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x144bc40[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x144bcb0[shape=record, label="  %8 = or i32 %3, %0"];
	Node0x144bd20[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x144bd90[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x144be00[shape=record, label="  %11 = sub i32 %9, %6"];
	Node0x144bea0[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x144bf10[shape=record, label="  %13 = sub i32 %1, %0"];
	Node0x144bf80[shape=record, label="  %14 = add i32 %13, %5"];
	Node0x144bff0[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x144c060[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x144c0d0[shape=record, label="  %17 = sub i32 %16, %10"];
	Node0x144c140[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x144c1b0[shape=record, label="  %19 = icmp eq i32 %18, %4"];
	Node0x13ec268[shape=record, label="  %20 = select i1 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x144c650[shape=record, label="  %21 = tail call i32 @puts(i8* nonnull dereferenceable(1) %20)"];
	Node0x144c6a0[shape=record, label="  ret void"];
	Node0x144ba30 -> Node0x144baa0;
	Node0x144baa0 -> Node0x144bb60;
	Node0x144bb60 -> Node0x144bbd0;
	Node0x144bbd0 -> Node0x144bc40;
	Node0x144bc40 -> Node0x144bcb0;
	Node0x144bcb0 -> Node0x144bd20;
	Node0x144bd20 -> Node0x144bd90;
	Node0x144bd90 -> Node0x144be00;
	Node0x144be00 -> Node0x144bea0;
	Node0x144bea0 -> Node0x144bf10;
	Node0x144bf10 -> Node0x144bf80;
	Node0x144bf80 -> Node0x144bff0;
	Node0x144bff0 -> Node0x144c060;
	Node0x144c060 -> Node0x144c0d0;
	Node0x144c0d0 -> Node0x144c140;
	Node0x144c140 -> Node0x144c1b0;
	Node0x144c1b0 -> Node0x13ec268;
	Node0x13ec268 -> Node0x144c650;
	Node0x144c650 -> Node0x144c6a0;
edge [color=red]
	Node0x144ba30 -> Node0x144baa0;
	Node0x144bbd0 -> Node0x144bc40;
	Node0x144ba30 -> Node0x144bcb0;
	Node0x144ba30 -> Node0x144bd20;
	Node0x144bd20 -> Node0x144bd90;
	Node0x144bd20 -> Node0x144be00;
	Node0x144bbd0 -> Node0x144be00;
	Node0x144be00 -> Node0x144bea0;
	Node0x144bf10 -> Node0x144bf80;
	Node0x144bb60 -> Node0x144bf80;
	Node0x144bf80 -> Node0x144bff0;
	Node0x144bcb0 -> Node0x144bff0;
	Node0x144bff0 -> Node0x144c060;
	Node0x144bc40 -> Node0x144c060;
	Node0x144c060 -> Node0x144c0d0;
	Node0x144bd90 -> Node0x144c0d0;
	Node0x144c0d0 -> Node0x144c140;
	Node0x144bea0 -> Node0x144c140;
	Node0x144c140 -> Node0x144c1b0;
	Node0x144baa0 -> Node0x144c1b0;
	Node0x144c1b0 -> Node0x13ec268;
	Node0x13ec268 -> Node0x144c650;
}
