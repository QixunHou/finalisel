; ModuleID = '../.././c_source_file/1759_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1759_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = or i32 %2, %1
  %10 = xor i32 %9, %0
  %11 = or i32 %8, %10
  %12 = or i32 %4, %3
  %13 = xor i32 %5, %3
  %14 = xor i32 %13, -1
  %15 = and i32 %12, %14
  %16 = shl i32 %15, 1
  %17 = add i32 %16, %11
  %18 = sub i32 0, %17
  %19 = xor i32 %0, -1
  %20 = or i32 %7, %19
  %21 = xor i32 %7, -1
  %22 = or i32 %21, %19
  %23 = shl i32 %22, 1
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %0
  %26 = xor i32 %2, -1
  %27 = and i32 %26, %1
  %28 = or i32 %27, %25
  %29 = shl i32 %28, 1
  %30 = and i32 %9, %19
  %31 = or i32 %8, %30
  %32 = xor i32 %1, %0
  %33 = or i32 %32, %2
  %34 = xor i32 %25, -1
  %35 = and i32 %34, %2
  %36 = shl i32 %35, 2
  %37 = or i32 %26, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %0
  %40 = xor i32 %2, %0
  %41 = or i32 %40, %25
  %42 = and i32 %21, %0
  %43 = or i32 %24, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %2
  %46 = and i32 %37, %19
  %47 = shl i32 %46, 1
  %48 = and i32 %1, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %2, %1
  %51 = xor i32 %50, -1
  %52 = and i32 %51, %49
  %53 = or i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = xor i32 %40, -1
  %56 = or i32 %55, %54
  %57 = and i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %58, %1
  %60 = shl i32 %59, 1
  %61 = or i32 %25, %55
  %62 = or i32 %26, %0
  %63 = xor i32 %62, %48
  %64 = or i32 %25, %26
  %65 = xor i32 %27, -1
  %66 = xor i32 %57, %65
  %67 = and i32 %25, %2
  %68 = xor i32 %50, %0
  %69 = xor i32 %68, -1
  %70 = xor i32 %67, %69
  %71 = and i32 %26, %0
  %72 = xor i32 %71, -1
  %73 = and i32 %72, %1
  %74 = or i32 %65, %0
  %75 = and i32 %62, %32
  %76 = xor i32 %44, %2
  %77 = or i32 %27, %19
  %78 = xor i32 %9, -1
  %79 = or i32 %78, %0
  %80 = or i32 %40, %1
  %81 = xor i32 %78, %0
  %82 = or i32 %37, %19
  %83 = xor i32 %51, %0
  %84 = or i32 %50, %0
  %85 = or i32 %67, %68
  %86 = xor i32 %32, -1
  %87 = and i32 %62, %86
  %88 = or i32 %50, %44
  %89 = shl i32 %88, 1
  %90 = or i32 %2, %0
  %91 = xor i32 %90, -1
  %92 = or i32 %91, %86
  %93 = shl i32 %92, 2
  %94 = xor i32 %62, %1
  %95 = or i32 %91, %24
  %96 = and i32 %50, %34
  %97 = or i32 %65, %19
  %98 = and i32 %65, %0
  %99 = add i32 %40, 1
  %100 = and i32 %26, %86
  %101 = and i32 %50, %19
  %102 = xor i32 %8, -1
  %103 = xor i32 %101, %102
  %104 = xor i32 %71, %1
  %105 = and i32 %62, %24
  %106 = xor i32 %21, %0
  %107 = or i32 %40, %44
  %108 = xor i32 %71, %21
  %109 = or i32 %71, %1
  %110 = or i32 %51, %19
  %111 = xor i32 %38, %0
  %112 = or i32 %55, %86
  %113 = and i32 %32, %72
  %114 = xor i32 %90, %1
  %115 = or i32 %48, %2
  %116 = xor i32 %62, -1
  %117 = or i32 %48, %116
  %118 = and i32 %32, %26
  %119 = and i32 %86, %2
  %120 = or i32 %51, %0
  %121 = and i32 %7, %19
  %122 = and i32 %50, %0
  %123 = or i32 %121, %122
  %124 = xor i32 %91, %1
  %125 = or i32 %57, %54
  %126 = shl i32 %125, 1
  %127 = and i32 %51, %34
  %128 = or i32 %26, %44
  %129 = xor i32 %30, %102
  %130 = or i32 %40, %32
  %131 = or i32 %8, %101
  %132 = or i32 %116, %24
  %133 = shl i32 %132, 1
  %134 = or i32 %57, %86
  %135 = shl i32 %57, 1
  %136 = and i32 %40, %34
  %137 = xor i32 %65, %0
  %138 = shl i32 %137, 1
  %139 = and i32 %40, %1
  %140 = and i32 %55, %24
  %141 = and i32 %9, %0
  %142 = xor i32 %49, %2
  %143 = and i32 %58, %86
  %144 = and i32 %43, %2
  %145 = and i32 %40, %49
  %146 = or i32 %71, %86
  %147 = or i32 %48, %38
  %148 = shl i32 %147, 1
  %149 = and i32 %49, %2
  %150 = and i32 %55, %49
  %151 = add i32 %71, 1
  %152 = and i32 %90, %32
  %153 = and i32 %40, %53
  %154 = or i32 %71, %7
  %155 = and i32 %72, %86
  %156 = or i32 %32, %55
  %157 = or i32 %91, %1
  %158 = xor i32 %122, 2147483647
  %159 = xor i32 %158, %121
  %160 = shl i32 %159, 1
  %161 = xor i32 %116, %1
  %162 = or i32 %21, %0
  %163 = shl i32 %162, 1
  %164 = xor i32 %25, %65
  %165 = and i32 %40, %43
  %166 = and i32 %37, %0
  %167 = or i32 %57, %24
  %168 = xor i32 %48, %2
  %169 = or i32 %7, %0
  %170 = or i32 %32, %116
  %171 = and i32 %78, %19
  %172 = shl i32 %171, 4
  %173 = and i32 %27, %19
  %174 = and i32 %78, %0
  %175 = shl i32 %174, 2
  %176 = and i32 %27, %0
  %177 = and i32 %38, %19
  %178 = mul i32 %177, -7
  %179 = and i32 %38, %0
  %180 = mul i32 %179, 10
  %181 = mul i32 %8, 13
  %182 = xor i32 %4, %3
  %183 = xor i32 %182, -1
  %184 = xor i32 %5, %4
  %185 = or i32 %184, %183
  %186 = and i32 %4, %3
  %187 = or i32 %13, %186
  %188 = and i32 %5, %3
  %189 = xor i32 %188, -1
  %190 = xor i32 %189, %4
  %191 = xor i32 %3, -1
  %192 = or i32 %191, %4
  %193 = xor i32 %192, -1
  %194 = add i32 %192, 1
  %195 = and i32 %184, %3
  %196 = or i32 %189, %4
  %197 = xor i32 %5, -1
  %198 = or i32 %197, %4
  %199 = xor i32 %198, -1
  %200 = xor i32 %199, %3
  %201 = xor i32 %4, -1
  %202 = or i32 %197, %3
  %203 = xor i32 %202, -1
  %204 = or i32 %203, %201
  %205 = and i32 %197, %4
  %206 = or i32 %205, %182
  %207 = xor i32 %13, %4
  %208 = and i32 %191, %4
  %209 = xor i32 %208, -1
  %210 = and i32 %184, %209
  %211 = and i32 %208, %5
  %212 = xor i32 %211, -1
  %213 = xor i32 %207, %212
  %214 = and i32 %5, %4
  %215 = and i32 %197, %3
  %216 = or i32 %214, %215
  %217 = xor i32 %192, %5
  %218 = and i32 %188, %4
  %219 = or i32 %5, %3
  %220 = xor i32 %219, %4
  %221 = xor i32 %220, -1
  %222 = xor i32 %218, %221
  %223 = xor i32 %219, -1
  %224 = or i32 %186, %223
  %225 = or i32 %5, %4
  %226 = xor i32 %184, -1
  %227 = or i32 %13, %4
  %228 = xor i32 %227, 2147483647
  %229 = or i32 %228, %211
  %230 = shl i32 %229, 1
  %231 = xor i32 %215, %4
  %232 = or i32 %202, %201
  %233 = xor i32 %198, %3
  %234 = or i32 %184, %208
  %235 = or i32 %184, %186
  %236 = xor i32 %214, %219
  %237 = or i32 %13, %201
  %238 = or i32 %205, %3
  %239 = xor i32 %12, -1
  %240 = xor i32 %239, %5
  %241 = or i32 %214, %3
  %242 = and i32 %182, %197
  %243 = shl i32 %242, 1
  %244 = and i32 %226, %209
  %245 = xor i32 %209, %5
  %246 = or i32 %186, %197
  %247 = xor i32 %211, %227
  %248 = or i32 %205, %183
  %249 = and i32 %184, %191
  %250 = shl i32 %249, 1
  %251 = xor i32 %12, %5
  %252 = or i32 %182, %199
  %253 = xor i32 %225, -1
  %254 = or i32 %253, %183
  %255 = shl i32 %254, 2
  %256 = or i32 %13, %208
  %257 = shl i32 %256, 1
  %258 = xor i32 %215, -1
  %259 = xor i32 %202, %186
  %260 = shl i32 %253, 1
  %261 = xor i32 %214, %258
  %262 = or i32 %239, %5
  %263 = or i32 %258, %4
  %264 = or i32 %14, %193
  %265 = shl i32 %264, 1
  %266 = and i32 %198, %182
  %267 = shl i32 %266, 1
  %268 = or i32 %182, %253
  %269 = and i32 %189, %201
  %270 = xor i32 %218, %207
  %271 = xor i32 %186, -1
  %272 = and i32 %13, %271
  %273 = and i32 %202, %4
  %274 = or i32 %218, %220
  %275 = shl i32 %274, 1
  %276 = or i32 %258, %201
  %277 = or i32 %214, %239
  %278 = and i32 %183, %5
  %279 = and i32 %192, %226
  %280 = and i32 %184, %192
  %281 = and i32 %188, %201
  %282 = and i32 %219, %4
  %283 = or i32 %281, %282
  %284 = and i32 %198, %183
  %285 = and i32 %184, %271
  %286 = and i32 %189, %4
  %287 = and i32 %225, %3
  %288 = or i32 %219, %201
  %289 = xor i32 %202, %4
  %290 = xor i32 %214, -1
  %291 = add i32 %214, 1
  %292 = and i32 %192, %14
  %293 = and i32 %219, %201
  %294 = or i32 %186, %14
  %295 = or i32 %191, %5
  %296 = xor i32 %295, %4
  %297 = xor i32 %296, %212
  %298 = or i32 %202, %4
  %299 = add i32 %186, 1
  %300 = and i32 %225, %182
  %301 = and i32 %184, %182
  %302 = or i32 %193, %5
  %303 = or i32 %226, %193
  %304 = and i32 %192, %5
  %305 = shl i32 %13, 1
  %306 = and i32 %14, %209
  %307 = or i32 %211, %296
  %308 = and i32 %13, %4
  %309 = and i32 %182, %290
  %310 = or i32 %184, %239
  %311 = xor i32 %214, %192
  %312 = xor i32 %225, %3
  %313 = or i32 %199, %183
  %314 = shl i32 %313, 1
  %315 = or i32 %205, %191
  %316 = or i32 %208, %197
  %317 = and i32 %13, %201
  %318 = or i32 %218, %317
  %319 = xor i32 %282, -1
  %320 = xor i32 %281, %319
  %321 = and i32 %225, %191
  %322 = and i32 %258, %201
  %323 = and i32 %182, %5
  %324 = or i32 %188, %208
  %325 = or i32 %214, %191
  %326 = xor i32 %14, %4
  %327 = xor i32 %188, %4
  %328 = xor i32 %205, -1
  %329 = and i32 %328, %183
  %330 = xor i32 %328, %3
  %331 = xor i32 %198, %186
  %332 = add i32 %13, 1
  %333 = or i32 %214, %223
  %334 = or i32 %14, %4
  %335 = or i32 %226, %3
  %336 = or i32 %184, %193
  %337 = or i32 %184, %191
  %338 = or i32 %223, %201
  %339 = or i32 %214, %182
  %340 = and i32 %223, %201
  %341 = mul i32 %340, -12
  %342 = and i32 %215, %201
  %343 = shl i32 %342, 1
  %344 = and i32 %223, %4
  %345 = and i32 %215, %4
  %346 = and i32 %203, %201
  %347 = shl i32 %346, 2
  %348 = shl i32 %281, 1
  %349 = and i32 %203, %4
  %350 = mul i32 %349, -23
  %351 = mul i32 %218, -26
  %352 = add i32 %64, %26
  %353 = add i32 %352, %164
  %354 = add i32 %353, %140
  %355 = add i32 %354, %117
  %356 = add i32 %355, %113
  %357 = add i32 %356, %96
  %358 = add i32 %357, %95
  %359 = add i32 %358, %77
  %360 = add i32 %359, %31
  %361 = add i32 %360, %335
  %362 = add i32 %361, %333
  %363 = add i32 %362, %322
  %364 = add i32 %363, %321
  %365 = add i32 %364, %310
  %366 = add i32 %365, %288
  %367 = add i32 %366, %277
  %368 = add i32 %367, %268
  %369 = add i32 %368, %244
  %370 = add i32 %369, %200
  %371 = add i32 %370, %195
  %372 = add i32 %371, %283
  %373 = shl i32 %372, 1
  %374 = sub i32 %131, %121
  %375 = add i32 %374, %85
  %376 = sub i32 %375, %261
  %377 = mul i32 %376, 5
  %378 = sub i32 %1, %173
  %379 = add i32 %378, %272
  %380 = sub i32 %379, %345
  %381 = mul i32 %380, 3
  %382 = add i32 %344, %176
  %383 = mul i32 %382, 6
  %384 = sub i32 %43, %0
  %385 = sub i32 %384, %33
  %386 = add i32 %385, %40
  %387 = add i32 %386, %45
  %388 = add i32 %387, %38
  %389 = add i32 %388, %76
  %390 = sub i32 %389, %71
  %391 = sub i32 %390, %27
  %392 = add i32 %391, %99
  %393 = add i32 %392, %100
  %394 = add i32 %393, %78
  %395 = sub i32 %394, %7
  %396 = sub i32 %395, %115
  %397 = sub i32 %396, %118
  %398 = sub i32 %397, %119
  %399 = add i32 %398, %128
  %400 = add i32 %399, %142
  %401 = sub i32 %400, %144
  %402 = add i32 %401, %149
  %403 = add i32 %402, %151
  %404 = sub i32 %403, %50
  %405 = sub i32 %404, %168
  %406 = add i32 %405, %191
  %407 = sub i32 %406, %3
  %408 = sub i32 %407, %20
  %409 = add i32 %408, %36
  %410 = add i32 %409, %39
  %411 = add i32 %410, %41
  %412 = add i32 %411, %42
  %413 = add i32 %412, %52
  %414 = add i32 %413, %56
  %415 = sub i32 %414, %61
  %416 = add i32 %415, %63
  %417 = add i32 %416, %66
  %418 = sub i32 %417, %73
  %419 = sub i32 %418, %74
  %420 = add i32 %419, %75
  %421 = sub i32 %420, %79
  %422 = add i32 %421, %80
  %423 = sub i32 %422, %81
  %424 = sub i32 %423, %82
  %425 = sub i32 %424, %83
  %426 = sub i32 %425, %84
  %427 = sub i32 %426, %87
  %428 = add i32 %427, %68
  %429 = sub i32 %428, %94
  %430 = sub i32 %429, %97
  %431 = sub i32 %430, %98
  %432 = sub i32 %431, %104
  %433 = sub i32 %432, %105
  %434 = sub i32 %433, %106
  %435 = add i32 %434, %107
  %436 = sub i32 %435, %108
  %437 = sub i32 %436, %109
  %438 = sub i32 %437, %110
  %439 = sub i32 %438, %111
  %440 = sub i32 %439, %112
  %441 = sub i32 %440, %114
  %442 = sub i32 %441, %120
  %443 = sub i32 %442, %124
  %444 = sub i32 %443, %127
  %445 = sub i32 %444, %130
  %446 = add i32 %445, %134
  %447 = sub i32 %446, %135
  %448 = add i32 %447, %136
  %449 = add i32 %448, %139
  %450 = sub i32 %449, %141
  %451 = add i32 %450, %143
  %452 = add i32 %451, %145
  %453 = sub i32 %452, %146
  %454 = sub i32 %453, %150
  %455 = add i32 %454, %152
  %456 = add i32 %455, %153
  %457 = add i32 %456, %154
  %458 = sub i32 %457, %155
  %459 = sub i32 %458, %156
  %460 = sub i32 %459, %157
  %461 = add i32 %460, %161
  %462 = sub i32 %461, %165
  %463 = add i32 %462, %166
  %464 = sub i32 %463, %167
  %465 = sub i32 %464, %169
  %466 = add i32 %465, %170
  %467 = add i32 %466, %23
  %468 = sub i32 %467, %29
  %469 = sub i32 %468, %47
  %470 = sub i32 %469, %60
  %471 = sub i32 %470, %70
  %472 = sub i32 %471, %89
  %473 = sub i32 %472, %93
  %474 = add i32 %473, %103
  %475 = add i32 %474, %123
  %476 = sub i32 %475, %126
  %477 = add i32 %476, %129
  %478 = sub i32 %477, %133
  %479 = sub i32 %478, %138
  %480 = sub i32 %479, %148
  %481 = sub i32 %480, %163
  %482 = add i32 %481, %172
  %483 = sub i32 %482, %175
  %484 = add i32 %483, %178
  %485 = add i32 %484, %180
  %486 = add i32 %485, %181
  %487 = add i32 %486, %194
  %488 = add i32 %487, %197
  %489 = add i32 %488, %182
  %490 = add i32 %489, %186
  %491 = add i32 %490, %299
  %492 = sub i32 %491, %208
  %493 = add i32 %492, %217
  %494 = sub i32 %493, %225
  %495 = add i32 %494, %226
  %496 = add i32 %495, %240
  %497 = sub i32 %496, %245
  %498 = add i32 %497, %246
  %499 = sub i32 %498, %214
  %500 = sub i32 %499, %251
  %501 = add i32 %500, %258
  %502 = add i32 %501, %198
  %503 = sub i32 %502, %262
  %504 = add i32 %503, %278
  %505 = add i32 %504, %202
  %506 = add i32 %505, %291
  %507 = add i32 %506, %302
  %508 = sub i32 %507, %304
  %509 = sub i32 %508, %316
  %510 = sub i32 %509, %184
  %511 = add i32 %510, %323
  %512 = add i32 %511, %332
  %513 = add i32 %512, %328
  %514 = sub i32 %513, %160
  %515 = add i32 %514, %185
  %516 = sub i32 %515, %187
  %517 = add i32 %516, %190
  %518 = add i32 %517, %196
  %519 = add i32 %518, %204
  %520 = sub i32 %519, %206
  %521 = add i32 %520, %207
  %522 = sub i32 %521, %210
  %523 = add i32 %522, %216
  %524 = sub i32 %523, %224
  %525 = add i32 %524, %231
  %526 = sub i32 %525, %232
  %527 = sub i32 %526, %233
  %528 = sub i32 %527, %234
  %529 = add i32 %528, %235
  %530 = sub i32 %529, %236
  %531 = add i32 %530, %237
  %532 = sub i32 %531, %238
  %533 = add i32 %532, %241
  %534 = sub i32 %533, %243
  %535 = add i32 %534, %248
  %536 = add i32 %535, %252
  %537 = sub i32 %536, %259
  %538 = sub i32 %537, %260
  %539 = sub i32 %538, %263
  %540 = sub i32 %539, %269
  %541 = add i32 %540, %273
  %542 = add i32 %541, %276
  %543 = add i32 %542, %279
  %544 = sub i32 %543, %280
  %545 = add i32 %544, %284
  %546 = add i32 %545, %285
  %547 = add i32 %546, %286
  %548 = add i32 %547, %287
  %549 = add i32 %548, %282
  %550 = add i32 %549, %289
  %551 = add i32 %550, %227
  %552 = add i32 %551, %292
  %553 = add i32 %552, %293
  %554 = sub i32 %553, %294
  %555 = add i32 %554, %298
  %556 = sub i32 %555, %300
  %557 = sub i32 %556, %301
  %558 = add i32 %557, %303
  %559 = sub i32 %558, %305
  %560 = add i32 %559, %306
  %561 = sub i32 %560, %308
  %562 = sub i32 %561, %309
  %563 = sub i32 %562, %311
  %564 = add i32 %563, %312
  %565 = add i32 %564, %315
  %566 = add i32 %565, %324
  %567 = add i32 %566, %325
  %568 = sub i32 %567, %326
  %569 = sub i32 %568, %327
  %570 = add i32 %569, %329
  %571 = add i32 %570, %330
  %572 = sub i32 %571, %331
  %573 = sub i32 %572, %334
  %574 = add i32 %573, %317
  %575 = sub i32 %574, %336
  %576 = add i32 %575, %337
  %577 = sub i32 %576, %338
  %578 = add i32 %577, %339
  %579 = sub i32 %578, %213
  %580 = add i32 %579, %222
  %581 = add i32 %580, %247
  %582 = sub i32 %581, %250
  %583 = sub i32 %582, %255
  %584 = sub i32 %583, %257
  %585 = sub i32 %584, %265
  %586 = sub i32 %585, %267
  %587 = sub i32 %586, %270
  %588 = sub i32 %587, %297
  %589 = add i32 %588, %307
  %590 = sub i32 %589, %314
  %591 = sub i32 %590, %318
  %592 = add i32 %591, %320
  %593 = add i32 %592, %341
  %594 = sub i32 %593, %343
  %595 = sub i32 %594, %347
  %596 = sub i32 %595, %348
  %597 = add i32 %596, %350
  %598 = add i32 %597, %351
  %599 = sub i32 %598, %275
  %600 = add i32 %599, %383
  %601 = sub i32 %600, %230
  %602 = add i32 %601, %377
  %603 = add i32 %602, %381
  %604 = add i32 %603, %373
  %605 = icmp eq i32 %604, %18
  %606 = select i1 %605, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %607 = tail call i32 @puts(i8* nonnull dereferenceable(1) %606)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
