; ModuleID = '../.././c_source_file/1746_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1746_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %3, -1
  %8 = or i32 %7, %4
  %9 = xor i32 %0, -1
  %10 = or i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %13, %11
  %15 = add i32 %14, 1
  %16 = add i32 %15, %8
  %17 = and i32 %4, %3
  %18 = shl i32 %3, 1
  %19 = or i32 %6, %3
  %20 = or i32 %4, %3
  %21 = xor i32 %7, %4
  %22 = shl i32 %20, 1
  %23 = xor i32 %22, -2
  %24 = and i32 %10, %2
  %25 = xor i32 %1, -1
  %26 = and i32 %25, %0
  %27 = xor i32 %2, -1
  %28 = and i32 %27, %1
  %29 = xor i32 %28, -1
  %30 = xor i32 %26, %29
  %31 = xor i32 %10, %2
  %32 = or i32 %27, %11
  %33 = and i32 %2, %1
  %34 = and i32 %33, %0
  %35 = xor i32 %2, %1
  %36 = and i32 %35, %9
  %37 = xor i32 %34, -1
  %38 = xor i32 %36, %37
  %39 = and i32 %27, %0
  %40 = xor i32 %1, %0
  %41 = or i32 %39, %40
  %42 = or i32 %25, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %35, %43
  %45 = or i32 %27, %1
  %46 = and i32 %2, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %35, -1
  %49 = and i32 %10, %48
  %50 = shl i32 %49, 1
  %51 = and i32 %1, %0
  %52 = xor i32 %45, %51
  %53 = or i32 %2, %1
  %54 = xor i32 %53, %0
  %55 = or i32 %34, %54
  %56 = or i32 %2, %0
  %57 = and i32 %56, %40
  %58 = or i32 %51, %13
  %59 = shl i32 %58, 1
  %60 = and i32 %47, %25
  %61 = xor i32 %33, -1
  %62 = xor i32 %61, %0
  %63 = and i32 %33, %9
  %64 = and i32 %35, %0
  %65 = xor i32 %63, -1
  %66 = xor i32 %64, %65
  %67 = xor i32 %45, -1
  %68 = or i32 %51, %67
  %69 = or i32 %26, %27
  %70 = xor i32 %46, %1
  %71 = xor i32 %35, %0
  %72 = xor i32 %34, %71
  %73 = add i32 %35, 1
  %74 = and i32 %13, %25
  %75 = or i32 %39, %1
  %76 = and i32 %25, %2
  %77 = and i32 %76, %9
  %78 = or i32 %25, %2
  %79 = and i32 %78, %0
  %80 = xor i32 %79, 2147483647
  %81 = xor i32 %80, %77
  %82 = add i32 %45, 1
  %83 = or i32 %63, %64
  %84 = and i32 %76, %0
  %85 = xor i32 %71, -1
  %86 = xor i32 %84, %85
  %87 = xor i32 %42, %2
  %88 = and i32 %40, %47
  %89 = or i32 %26, %13
  %90 = or i32 %27, %0
  %91 = xor i32 %90, -1
  %92 = xor i32 %91, %1
  %93 = xor i32 %56, -1
  %94 = shl i32 %93, 1
  %95 = and i32 %12, %25
  %96 = or i32 %61, %9
  %97 = xor i32 %40, -1
  %98 = and i32 %90, %97
  %99 = xor i32 %26, -1
  %100 = and i32 %61, %9
  %101 = or i32 %39, %25
  %102 = or i32 %40, %2
  %103 = shl i32 %97, 1
  %104 = xor i32 %46, %42
  %105 = and i32 %53, %0
  %106 = xor i32 %67, %0
  %107 = shl i32 %106, 1
  %108 = or i32 %48, %43
  %109 = or i32 %35, %9
  %110 = xor i32 %109, -1
  %111 = or i32 %77, %110
  %112 = and i32 %29, %9
  %113 = or i32 %46, %1
  %114 = and i32 %12, %97
  %115 = add i32 %90, 1
  %116 = xor i32 %39, %1
  %117 = and i32 %48, %99
  %118 = xor i32 %53, %51
  %119 = or i32 %40, %27
  %120 = shl i32 %119, 1
  %121 = xor i32 %90, %1
  %122 = or i32 %28, %26
  %123 = and i32 %53, %9
  %124 = xor i32 %123, %37
  %125 = xor i32 %47, %1
  %126 = add i32 %33, 1
  %127 = xor i32 %51, -1
  %128 = and i32 %127, %2
  %129 = and i32 %10, %13
  %130 = or i32 %91, %97
  %131 = or i32 %26, %2
  %132 = xor i32 %39, -1
  %133 = and i32 %132, %1
  %134 = and i32 %10, %27
  %135 = or i32 %46, %25
  %136 = and i32 %132, %25
  %137 = shl i32 %136, 1
  %138 = and i32 %12, %10
  %139 = shl i32 %138, 1
  %140 = or i32 %91, %1
  %141 = or i32 %63, %105
  %142 = or i32 %48, %0
  %143 = shl i32 %142, 1
  %144 = or i32 %61, %0
  %145 = shl i32 %144, 1
  %146 = and i32 %12, %42
  %147 = xor i32 %93, %1
  %148 = or i32 %46, %28
  %149 = or i32 %34, %36
  %150 = xor i32 %56, %51
  %151 = shl i32 %150, 1
  %152 = xor i32 %99, %2
  %153 = or i32 %28, %0
  %154 = xor i32 %39, %61
  %155 = xor i32 %29, %0
  %156 = or i32 %84, %71
  %157 = and i32 %47, %1
  %158 = or i32 %13, %97
  %159 = or i32 %51, %2
  %160 = shl i32 %159, 1
  %161 = or i32 %39, %97
  %162 = xor i32 %54, %37
  %163 = xor i32 %105, %65
  %164 = or i32 %35, %26
  %165 = xor i32 %46, %29
  %166 = and i32 %27, %127
  %167 = xor i32 %53, -1
  %168 = xor i32 %167, %0
  %169 = or i32 %28, %9
  %170 = xor i32 %132, %1
  %171 = and i32 %78, %9
  %172 = or i32 %84, %171
  %173 = or i32 %48, %9
  %174 = or i32 %11, %2
  %175 = and i32 %13, %99
  %176 = and i32 %48, %0
  %177 = or i32 %46, %97
  %178 = shl i32 %177, 1
  %179 = or i32 %40, %93
  %180 = or i32 %12, %97
  %181 = shl i32 %180, 1
  %182 = and i32 %42, %13
  %183 = or i32 %26, %48
  %184 = or i32 %46, %40
  %185 = and i32 %40, %132
  %186 = or i32 %12, %11
  %187 = xor i32 %51, %2
  %188 = or i32 %34, %85
  %189 = xor i32 %90, %51
  %190 = and i32 %56, %1
  %191 = or i32 %12, %40
  %192 = and i32 %13, %97
  %193 = shl i32 %11, 1
  %194 = and i32 %27, %99
  %195 = and i32 %13, %1
  %196 = or i32 %46, %167
  %197 = and i32 %48, %127
  %198 = and i32 %90, %1
  %199 = and i32 %56, %25
  %200 = and i32 %45, %0
  %201 = or i32 %51, %91
  %202 = or i32 %13, %43
  %203 = xor i32 %11, %2
  %204 = and i32 %99, %2
  %205 = and i32 %90, %40
  %206 = or i32 %97, %2
  %207 = shl i32 %206, 1
  %208 = xor i32 %26, %61
  %209 = and i32 %35, %127
  %210 = and i32 %90, %25
  %211 = shl i32 %210, 1
  %212 = and i32 %56, %97
  %213 = or i32 %51, %93
  %214 = shl i32 %213, 1
  %215 = xor i32 %28, %0
  %216 = or i32 %29, %0
  %217 = or i32 %167, %0
  %218 = or i32 %93, %1
  %219 = shl i32 %40, 2
  %220 = or i32 %45, %9
  %221 = or i32 %51, %48
  %222 = xor i32 %77, %109
  %223 = and i32 %45, %9
  %224 = xor i32 %43, %2
  %225 = and i32 %12, %40
  %226 = and i32 %42, %2
  %227 = or i32 %35, %51
  %228 = or i32 %33, %9
  %229 = or i32 %12, %25
  %230 = and i32 %13, %127
  %231 = and i32 %42, %48
  %232 = xor i32 %45, %0
  %233 = and i32 %35, %99
  %234 = shl i32 %233, 1
  %235 = or i32 %35, %0
  %236 = xor i32 %78, %0
  %237 = xor i32 %236, 2147483647
  %238 = xor i32 %237, %84
  %239 = or i32 %29, %9
  %240 = and i32 %48, %9
  %241 = or i32 %12, %26
  %242 = or i32 %13, %25
  %243 = or i32 %27, %43
  %244 = and i32 %40, %2
  %245 = and i32 %12, %127
  %246 = or i32 %40, %13
  %247 = shl i32 %246, 1
  %248 = or i32 %46, %43
  %249 = shl i32 %248, 2
  %250 = and i32 %47, %97
  %251 = or i32 %12, %1
  %252 = shl i32 %251, 1
  %253 = and i32 %12, %99
  %254 = and i32 %29, %0
  %255 = or i32 %84, %236
  %256 = shl i32 %255, 1
  %257 = xor i32 %39, %45
  %258 = or i32 %67, %9
  %259 = or i32 %13, %1
  %260 = or i32 %12, %51
  %261 = or i32 %40, %91
  %262 = or i32 %51, %167
  %263 = or i32 %39, %67
  %264 = shl i32 %263, 1
  %265 = or i32 %39, %33
  %266 = and i32 %61, %0
  %267 = and i32 %167, %9
  %268 = shl i32 %267, 2
  %269 = and i32 %28, %9
  %270 = mul i32 %269, -13
  %271 = and i32 %167, %0
  %272 = shl i32 %271, 2
  %273 = and i32 %28, %0
  %274 = mul i32 %273, 19
  %275 = and i32 %67, %9
  %276 = mul i32 %275, 15
  %277 = and i32 %67, %0
  %278 = add i32 %134, %13
  %279 = add i32 %278, %24
  %280 = add i32 %279, %231
  %281 = add i32 %280, %201
  %282 = add i32 %281, %183
  %283 = add i32 %282, %179
  %284 = add i32 %283, %173
  %285 = add i32 %284, %98
  %286 = add i32 %285, %74
  %287 = add i32 %286, %70
  %288 = add i32 %287, %156
  %289 = add i32 %288, %55
  %290 = add i32 %225, %258
  %291 = add i32 %290, %209
  %292 = add i32 %291, %89
  %293 = add i32 %292, %20
  %294 = shl i32 %293, 2
  %295 = add i32 %240, %152
  %296 = add i32 %295, %277
  %297 = mul i32 %296, 3
  %298 = mul i32 %33, 6
  %299 = add i32 %289, %17
  %300 = add i32 %299, %81
  %301 = add i32 %300, %238
  %302 = shl i32 %301, 1
  %303 = add i32 %0, 1
  %304 = sub i32 %303, %1
  %305 = add i32 %304, %25
  %306 = add i32 %305, %99
  %307 = add i32 %306, %43
  %308 = sub i32 %307, %42
  %309 = sub i32 %308, %2
  %310 = sub i32 %309, %2
  %311 = sub i32 %310, %10
  %312 = add i32 %311, %31
  %313 = add i32 %312, %32
  %314 = add i32 %313, %45
  %315 = add i32 %314, %47
  %316 = add i32 %315, %69
  %317 = add i32 %316, %73
  %318 = add i32 %317, %82
  %319 = sub i32 %318, %87
  %320 = sub i32 %319, %102
  %321 = sub i32 %320, %103
  %322 = add i32 %321, %115
  %323 = add i32 %322, %126
  %324 = add i32 %323, %128
  %325 = add i32 %324, %131
  %326 = add i32 %325, %28
  %327 = add i32 %326, %56
  %328 = add i32 %327, %166
  %329 = add i32 %328, %174
  %330 = sub i32 %329, %187
  %331 = sub i32 %330, %193
  %332 = sub i32 %331, %194
  %333 = sub i32 %332, %46
  %334 = add i32 %333, %90
  %335 = sub i32 %334, %203
  %336 = add i32 %335, %204
  %337 = sub i32 %336, %219
  %338 = add i32 %337, %12
  %339 = add i32 %338, %224
  %340 = add i32 %339, %167
  %341 = add i32 %340, %35
  %342 = add i32 %341, %226
  %343 = add i32 %342, %243
  %344 = sub i32 %343, %244
  %345 = sub i32 %344, %33
  %346 = sub i32 %345, %4
  %347 = sub i32 %346, %18
  %348 = add i32 %347, %6
  %349 = add i32 %348, %30
  %350 = sub i32 %349, %41
  %351 = add i32 %350, %44
  %352 = sub i32 %351, %52
  %353 = add i32 %352, %57
  %354 = sub i32 %353, %60
  %355 = add i32 %354, %62
  %356 = sub i32 %355, %68
  %357 = add i32 %356, %75
  %358 = add i32 %357, %88
  %359 = sub i32 %358, %92
  %360 = sub i32 %359, %94
  %361 = add i32 %360, %95
  %362 = add i32 %361, %96
  %363 = sub i32 %362, %100
  %364 = add i32 %363, %101
  %365 = sub i32 %364, %104
  %366 = add i32 %365, %105
  %367 = add i32 %366, %108
  %368 = add i32 %367, %112
  %369 = sub i32 %368, %113
  %370 = sub i32 %369, %114
  %371 = add i32 %370, %116
  %372 = add i32 %371, %117
  %373 = sub i32 %372, %118
  %374 = sub i32 %373, %120
  %375 = add i32 %374, %121
  %376 = add i32 %375, %122
  %377 = sub i32 %376, %123
  %378 = sub i32 %377, %125
  %379 = add i32 %378, %129
  %380 = sub i32 %379, %130
  %381 = add i32 %380, %133
  %382 = sub i32 %381, %135
  %383 = add i32 %382, %140
  %384 = add i32 %383, %146
  %385 = sub i32 %384, %147
  %386 = sub i32 %385, %148
  %387 = sub i32 %386, %153
  %388 = add i32 %387, %154
  %389 = sub i32 %388, %155
  %390 = sub i32 %389, %157
  %391 = sub i32 %390, %158
  %392 = sub i32 %391, %160
  %393 = sub i32 %392, %161
  %394 = sub i32 %393, %164
  %395 = sub i32 %394, %165
  %396 = sub i32 %395, %36
  %397 = add i32 %396, %64
  %398 = add i32 %397, %168
  %399 = add i32 %398, %169
  %400 = add i32 %399, %170
  %401 = add i32 %400, %175
  %402 = add i32 %401, %176
  %403 = add i32 %402, %71
  %404 = add i32 %403, %182
  %405 = sub i32 %404, %184
  %406 = sub i32 %405, %185
  %407 = sub i32 %406, %186
  %408 = add i32 %407, %189
  %409 = sub i32 %408, %190
  %410 = add i32 %409, %191
  %411 = add i32 %410, %192
  %412 = add i32 %411, %195
  %413 = add i32 %412, %196
  %414 = sub i32 %413, %197
  %415 = add i32 %414, %198
  %416 = sub i32 %415, %199
  %417 = sub i32 %416, %200
  %418 = sub i32 %417, %202
  %419 = sub i32 %418, %205
  %420 = sub i32 %419, %207
  %421 = sub i32 %420, %208
  %422 = sub i32 %421, %212
  %423 = add i32 %422, %215
  %424 = sub i32 %423, %216
  %425 = sub i32 %424, %217
  %426 = sub i32 %425, %218
  %427 = sub i32 %426, %220
  %428 = sub i32 %427, %221
  %429 = sub i32 %428, %223
  %430 = sub i32 %429, %227
  %431 = sub i32 %430, %228
  %432 = add i32 %431, %229
  %433 = sub i32 %432, %54
  %434 = add i32 %433, %230
  %435 = add i32 %434, %232
  %436 = sub i32 %435, %235
  %437 = add i32 %436, %239
  %438 = add i32 %437, %241
  %439 = sub i32 %438, %242
  %440 = add i32 %439, %245
  %441 = add i32 %440, %250
  %442 = sub i32 %441, %253
  %443 = sub i32 %442, %254
  %444 = add i32 %443, %257
  %445 = sub i32 %444, %259
  %446 = add i32 %445, %260
  %447 = sub i32 %446, %261
  %448 = add i32 %447, %262
  %449 = sub i32 %448, %265
  %450 = add i32 %449, %266
  %451 = sub i32 %450, %19
  %452 = add i32 %451, %21
  %453 = add i32 %452, %38
  %454 = sub i32 %453, %50
  %455 = sub i32 %454, %59
  %456 = sub i32 %455, %66
  %457 = add i32 %456, %72
  %458 = sub i32 %457, %83
  %459 = add i32 %458, %86
  %460 = sub i32 %459, %107
  %461 = add i32 %460, %111
  %462 = sub i32 %461, %124
  %463 = sub i32 %462, %137
  %464 = sub i32 %463, %139
  %465 = add i32 %464, %141
  %466 = sub i32 %465, %143
  %467 = sub i32 %466, %145
  %468 = add i32 %467, %149
  %469 = sub i32 %468, %151
  %470 = add i32 %469, %162
  %471 = sub i32 %470, %163
  %472 = sub i32 %471, %172
  %473 = sub i32 %472, %178
  %474 = sub i32 %473, %181
  %475 = add i32 %474, %188
  %476 = sub i32 %475, %211
  %477 = sub i32 %476, %214
  %478 = sub i32 %477, %222
  %479 = sub i32 %478, %234
  %480 = sub i32 %479, %247
  %481 = sub i32 %480, %249
  %482 = sub i32 %481, %252
  %483 = sub i32 %482, %264
  %484 = sub i32 %483, %268
  %485 = add i32 %484, %270
  %486 = sub i32 %485, %272
  %487 = add i32 %486, %274
  %488 = add i32 %487, %276
  %489 = sub i32 %488, %256
  %490 = add i32 %489, %298
  %491 = add i32 %490, %23
  %492 = add i32 %491, %297
  %493 = add i32 %492, %294
  %494 = add i32 %493, %302
  %495 = icmp eq i32 %16, %494
  %496 = select i1 %495, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %497 = tail call i32 @puts(i8* nonnull dereferenceable(1) %496)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
