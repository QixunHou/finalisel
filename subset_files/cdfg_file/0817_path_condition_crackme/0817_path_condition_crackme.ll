; ModuleID = '../.././c_source_file/0817_path_condition_crackme.c'
source_filename = "../.././c_source_file/0817_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %1, %0
  %8 = and i32 %7, %6
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %2
  %11 = and i32 %10, %0
  %12 = xor i32 %0, -1
  %13 = or i32 %9, %2
  %14 = and i32 %13, %12
  %15 = or i32 %11, %14
  %16 = sub i32 %15, %8
  %17 = or i32 %1, %0
  %18 = xor i32 %17, %2
  %19 = xor i32 %2, %1
  %20 = xor i32 %19, %0
  %21 = or i32 %4, %1
  %22 = xor i32 %21, -1
  %23 = or i32 %22, %0
  %24 = or i32 %9, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %4, %25
  %27 = and i32 %1, %0
  %28 = or i32 %19, %27
  %29 = xor i32 %19, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %2, %0
  %32 = or i32 %31, %25
  %33 = and i32 %6, %1
  %34 = and i32 %2, %0
  %35 = xor i32 %34, %24
  %36 = xor i32 %27, -1
  %37 = and i32 %4, %36
  %38 = xor i32 %7, -1
  %39 = and i32 %6, %38
  %40 = or i32 %34, %9
  %41 = and i32 %31, %7
  %42 = and i32 %2, %1
  %43 = and i32 %42, %12
  %44 = or i32 %2, %1
  %45 = and i32 %44, %0
  %46 = or i32 %43, %45
  %47 = or i32 %5, %38
  %48 = xor i32 %36, %2
  %49 = or i32 %38, %2
  %50 = or i32 %34, %1
  %51 = and i32 %31, %38
  %52 = xor i32 %17, -1
  %53 = or i32 %4, %52
  %54 = xor i32 %44, -1
  %55 = or i32 %54, %0
  %56 = shl i32 %55, 1
  %57 = xor i32 %31, -1
  %58 = or i32 %57, %38
  %59 = xor i32 %27, %2
  %60 = and i32 %4, %1
  %61 = or i32 %34, %60
  %62 = shl i32 %61, 1
  %63 = or i32 %4, %0
  %64 = xor i32 %63, -1
  %65 = or i32 %7, %64
  %66 = shl i32 %65, 1
  %67 = and i32 %24, %29
  %68 = or i32 %2, %0
  %69 = xor i32 %68, -1
  %70 = xor i32 %42, -1
  %71 = xor i32 %70, %0
  %72 = or i32 %19, %0
  %73 = and i32 %7, %2
  %74 = or i32 %31, %38
  %75 = shl i32 %74, 1
  %76 = and i32 %9, %0
  %77 = xor i32 %76, %2
  %78 = or i32 %42, %12
  %79 = or i32 %57, %9
  %80 = or i32 %5, %7
  %81 = xor i32 %60, -1
  %82 = or i32 %81, %12
  %83 = xor i32 %42, %0
  %84 = shl i32 %83, 1
  %85 = xor i32 %64, %1
  %86 = shl i32 %85, 1
  %87 = and i32 %63, %1
  %88 = shl i32 %87, 1
  %89 = or i32 %57, %25
  %90 = and i32 %70, %12
  %91 = and i32 %24, %57
  %92 = xor i32 %24, %2
  %93 = or i32 %29, %25
  %94 = shl i32 %93, 1
  %95 = or i32 %44, %0
  %96 = and i32 %19, %17
  %97 = xor i32 %34, -1
  %98 = and i32 %97, %1
  %99 = and i32 %31, %24
  %100 = or i32 %70, %12
  %101 = and i32 %63, %7
  %102 = xor i32 %63, %1
  %103 = or i32 %5, %22
  %104 = or i32 %7, %2
  %105 = xor i32 %25, %2
  %106 = xor i32 %34, %81
  %107 = and i32 %17, %4
  %108 = or i32 %7, %57
  %109 = or i32 %69, %38
  %110 = shl i32 %109, 1
  %111 = xor i32 %13, %0
  %112 = or i32 %11, %111
  %113 = or i32 %27, %54
  %114 = and i32 %19, %0
  %115 = or i32 %7, %69
  %116 = xor i32 %34, %1
  %117 = and i32 %31, %17
  %118 = xor i32 %52, %2
  %119 = or i32 %29, %12
  %120 = xor i32 %76, %70
  %121 = add i32 %2, 1
  %122 = xor i32 %63, %27
  %123 = and i32 %10, %12
  %124 = and i32 %13, %0
  %125 = or i32 %123, %124
  %126 = shl i32 %125, 1
  %127 = or i32 %5, %9
  %128 = and i32 %42, %0
  %129 = xor i32 %44, %0
  %130 = or i32 %128, %129
  %131 = xor i32 %21, %27
  %132 = xor i32 %76, -1
  %133 = and i32 %132, %2
  %134 = xor i32 %72, 2147483647
  %135 = or i32 %134, %11
  %136 = or i32 %34, %7
  %137 = or i32 %57, %52
  %138 = or i32 %5, %42
  %139 = and i32 %31, %132
  %140 = or i32 %76, %2
  %141 = or i32 %54, %12
  %142 = add i32 %27, 1
  %143 = and i32 %57, %36
  %144 = xor i32 %20, -1
  %145 = xor i32 %11, %144
  %146 = and i32 %70, %0
  %147 = or i32 %52, %2
  %148 = or i32 %27, %22
  %149 = and i32 %19, %12
  %150 = xor i32 %128, -1
  %151 = xor i32 %149, %150
  %152 = or i32 %31, %27
  %153 = and i32 %24, %2
  %154 = shl i32 %81, 1
  %155 = or i32 %128, %149
  %156 = and i32 %81, %0
  %157 = xor i32 %129, %150
  %158 = and i32 %31, %1
  %159 = or i32 %128, %144
  %160 = and i32 %57, %38
  %161 = and i32 %57, %132
  %162 = shl i32 %161, 1
  %163 = xor i32 %124, -1
  %164 = xor i32 %123, %163
  %165 = xor i32 %43, -1
  %166 = xor i32 %45, %165
  %167 = or i32 %19, %12
  %168 = or i32 %19, %25
  %169 = or i32 %29, %52
  %170 = or i32 %60, %76
  %171 = and i32 %19, %132
  %172 = shl i32 %171, 1
  %173 = and i32 %97, %9
  %174 = xor i32 %60, %0
  %175 = or i32 %31, %9
  %176 = shl i32 %175, 1
  %177 = or i32 %27, %2
  %178 = and i32 %81, %12
  %179 = xor i32 %29, %0
  %180 = and i32 %29, %36
  %181 = or i32 %19, %52
  %182 = shl i32 %181, 1
  %183 = and i32 %4, %38
  %184 = shl i32 %183, 1
  %185 = or i32 %64, %9
  %186 = xor i32 %6, %1
  %187 = or i32 %22, %12
  %188 = or i32 %27, %29
  %189 = and i32 %29, %0
  %190 = or i32 %42, %76
  %191 = shl i32 %60, 1
  %192 = and i32 %44, %12
  %193 = or i32 %128, %192
  %194 = xor i32 %97, %1
  %195 = xor i32 %68, %27
  %196 = and i32 %68, %1
  %197 = and i32 %57, %1
  %198 = or i32 %64, %38
  %199 = and i32 %17, %29
  %200 = xor i32 %5, %70
  %201 = and i32 %38, %2
  %202 = xor i32 %14, -1
  %203 = xor i32 %11, %202
  %204 = xor i32 %81, %0
  %205 = or i32 %34, %52
  %206 = or i32 %69, %9
  %207 = or i32 %57, %1
  %208 = or i32 %70, %0
  %209 = add i32 %31, 1
  %210 = and i32 %19, %36
  %211 = and i32 %68, %38
  %212 = and i32 %63, %38
  %213 = and i32 %29, %132
  %214 = and i32 %21, %0
  %215 = or i32 %81, %0
  %216 = xor i32 %21, %0
  %217 = or i32 %76, %57
  %218 = or i32 %25, %2
  %219 = and i32 %31, %36
  %220 = shl i32 %219, 1
  %221 = and i32 %7, %4
  %222 = or i32 %31, %76
  %223 = xor i32 %54, %0
  %224 = xor i32 %22, %0
  %225 = or i32 %43, %114
  %226 = and i32 %63, %9
  %227 = or i32 %4, %38
  %228 = xor i32 %192, %150
  %229 = or i32 %21, %0
  %230 = or i32 %31, %7
  %231 = xor i32 %167, -1
  %232 = or i32 %123, %231
  %233 = and i32 %4, %132
  %234 = xor i32 %68, %1
  %235 = shl i32 %234, 1
  %236 = or i32 %11, %20
  %237 = and i32 %36, %2
  %238 = xor i32 %44, %27
  %239 = shl i32 %238, 1
  %240 = and i32 %19, %24
  %241 = xor i32 %128, %20
  %242 = or i32 %42, %0
  %243 = xor i32 %123, %167
  %244 = xor i32 %11, %72
  %245 = or i32 %27, %4
  %246 = shl i32 %245, 1
  %247 = xor i32 %34, %44
  %248 = xor i32 %76, %81
  %249 = and i32 %17, %2
  %250 = shl i32 %249, 1
  %251 = or i32 %60, %0
  %252 = or i32 %19, %76
  %253 = or i32 %34, %25
  %254 = or i32 %44, %12
  %255 = xor i32 %111, 2147483647
  %256 = xor i32 %255, %11
  %257 = or i32 %76, %4
  %258 = or i32 %21, %12
  %259 = xor i32 %5, %1
  %260 = and i32 %7, %97
  %261 = and i32 %68, %9
  %262 = and i32 %6, %9
  %263 = xor i32 %114, %165
  %264 = or i32 %27, %69
  %265 = and i32 %97, %38
  %266 = and i32 %21, %12
  %267 = and i32 %24, %4
  %268 = and i32 %68, %7
  %269 = shl i32 %268, 1
  %270 = or i32 %60, %12
  %271 = xor i32 %34, %17
  %272 = shl i32 %271, 1
  %273 = or i32 %31, %52
  %274 = shl i32 %273, 1
  %275 = and i32 %17, %57
  %276 = or i32 %31, %1
  %277 = add i32 %17, 1
  %278 = or i32 %27, %57
  %279 = or i32 %34, %54
  %280 = or i32 %5, %1
  %281 = xor i32 %132, %2
  %282 = xor i32 %5, %21
  %283 = and i32 %54, %12
  %284 = mul i32 %283, 15
  %285 = and i32 %60, %12
  %286 = mul i32 %285, 24
  %287 = and i32 %54, %0
  %288 = and i32 %60, %0
  %289 = mul i32 %288, 20
  %290 = and i32 %22, %12
  %291 = mul i32 %290, 6
  %292 = and i32 %22, %0
  %293 = mul i32 %292, -11
  %294 = mul i32 %128, 14
  %295 = add i32 %97, %38
  %296 = add i32 %295, %107
  %297 = add i32 %296, %53
  %298 = add i32 %297, %37
  %299 = add i32 %298, %280
  %300 = add i32 %299, %270
  %301 = add i32 %300, %258
  %302 = add i32 %301, %206
  %303 = add i32 %302, %205
  %304 = add i32 %303, %170
  %305 = add i32 %304, %103
  %306 = add i32 %305, %50
  %307 = add i32 %306, %32
  %308 = add i32 %307, %135
  %309 = add i32 %308, %256
  %310 = shl i32 %309, 1
  %311 = add i32 %212, %259
  %312 = add i32 %311, %129
  %313 = sub i32 %159, %312
  %314 = mul i32 %313, 5
  %315 = or i32 %43, %287
  %316 = shl i32 %315, 2
  %317 = sub i32 %68, %47
  %318 = add i32 %317, %261
  %319 = mul i32 %318, 3
  %320 = add i32 %0, -1
  %321 = add i32 %320, %9
  %322 = sub i32 %321, %1
  %323 = sub i32 %322, %27
  %324 = add i32 %323, %121
  %325 = add i32 %324, %25
  %326 = add i32 %325, %142
  %327 = add i32 %326, %132
  %328 = sub i32 %327, %24
  %329 = add i32 %328, %2
  %330 = add i32 %329, %277
  %331 = sub i32 %330, %18
  %332 = sub i32 %331, %26
  %333 = add i32 %332, %48
  %334 = add i32 %333, %49
  %335 = add i32 %334, %31
  %336 = sub i32 %335, %59
  %337 = sub i32 %336, %21
  %338 = sub i32 %337, %42
  %339 = add i32 %338, %70
  %340 = add i32 %339, %73
  %341 = sub i32 %340, %77
  %342 = add i32 %341, %92
  %343 = sub i32 %342, %104
  %344 = add i32 %343, %105
  %345 = add i32 %344, %6
  %346 = add i32 %345, %118
  %347 = sub i32 %346, %34
  %348 = sub i32 %347, %133
  %349 = add i32 %348, %140
  %350 = sub i32 %349, %147
  %351 = add i32 %350, %153
  %352 = add i32 %351, %177
  %353 = add i32 %352, %201
  %354 = add i32 %353, %209
  %355 = sub i32 %354, %218
  %356 = add i32 %355, %22
  %357 = sub i32 %356, %221
  %358 = sub i32 %357, %227
  %359 = add i32 %358, %233
  %360 = add i32 %359, %237
  %361 = sub i32 %360, %257
  %362 = add i32 %361, %68
  %363 = sub i32 %362, %5
  %364 = sub i32 %363, %267
  %365 = add i32 %364, %281
  %366 = add i32 %365, %20
  %367 = add i32 %366, %23
  %368 = sub i32 %367, %28
  %369 = add i32 %368, %30
  %370 = add i32 %369, %33
  %371 = sub i32 %370, %35
  %372 = sub i32 %371, %39
  %373 = add i32 %372, %40
  %374 = add i32 %373, %41
  %375 = sub i32 %374, %51
  %376 = sub i32 %375, %58
  %377 = add i32 %376, %67
  %378 = sub i32 %377, %71
  %379 = add i32 %378, %72
  %380 = sub i32 %379, %78
  %381 = add i32 %380, %79
  %382 = sub i32 %381, %80
  %383 = add i32 %382, %82
  %384 = add i32 %383, %89
  %385 = sub i32 %384, %90
  %386 = sub i32 %385, %91
  %387 = add i32 %386, %95
  %388 = sub i32 %387, %96
  %389 = sub i32 %388, %98
  %390 = add i32 %389, %99
  %391 = sub i32 %390, %100
  %392 = add i32 %391, %101
  %393 = add i32 %392, %102
  %394 = sub i32 %393, %106
  %395 = sub i32 %394, %108
  %396 = add i32 %395, %113
  %397 = sub i32 %396, %114
  %398 = add i32 %397, %115
  %399 = add i32 %398, %116
  %400 = sub i32 %399, %117
  %401 = add i32 %400, %119
  %402 = sub i32 %401, %120
  %403 = sub i32 %402, %122
  %404 = sub i32 %403, %127
  %405 = sub i32 %404, %131
  %406 = sub i32 %405, %136
  %407 = sub i32 %406, %137
  %408 = add i32 %407, %138
  %409 = add i32 %408, %139
  %410 = add i32 %409, %141
  %411 = add i32 %410, %143
  %412 = add i32 %411, %146
  %413 = sub i32 %412, %148
  %414 = sub i32 %413, %152
  %415 = sub i32 %414, %154
  %416 = sub i32 %415, %156
  %417 = sub i32 %416, %158
  %418 = add i32 %417, %160
  %419 = sub i32 %418, %167
  %420 = sub i32 %419, %168
  %421 = add i32 %420, %169
  %422 = add i32 %421, %173
  %423 = add i32 %422, %174
  %424 = add i32 %423, %178
  %425 = sub i32 %424, %179
  %426 = sub i32 %425, %180
  %427 = sub i32 %426, %184
  %428 = sub i32 %427, %185
  %429 = add i32 %428, %186
  %430 = add i32 %429, %187
  %431 = sub i32 %430, %188
  %432 = add i32 %431, %189
  %433 = add i32 %432, %190
  %434 = sub i32 %433, %191
  %435 = add i32 %434, %194
  %436 = add i32 %435, %195
  %437 = add i32 %436, %196
  %438 = sub i32 %437, %197
  %439 = sub i32 %438, %198
  %440 = add i32 %439, %199
  %441 = sub i32 %440, %200
  %442 = add i32 %441, %204
  %443 = add i32 %442, %207
  %444 = sub i32 %443, %208
  %445 = add i32 %444, %210
  %446 = sub i32 %445, %211
  %447 = add i32 %446, %213
  %448 = sub i32 %447, %214
  %449 = add i32 %448, %215
  %450 = sub i32 %449, %216
  %451 = add i32 %450, %217
  %452 = sub i32 %451, %192
  %453 = add i32 %452, %222
  %454 = sub i32 %453, %223
  %455 = add i32 %454, %224
  %456 = add i32 %455, %45
  %457 = add i32 %456, %226
  %458 = add i32 %457, %229
  %459 = add i32 %458, %230
  %460 = add i32 %459, %149
  %461 = add i32 %460, %240
  %462 = sub i32 %461, %242
  %463 = sub i32 %462, %246
  %464 = sub i32 %463, %247
  %465 = add i32 %464, %248
  %466 = sub i32 %465, %250
  %467 = add i32 %466, %251
  %468 = add i32 %467, %252
  %469 = add i32 %468, %253
  %470 = sub i32 %469, %254
  %471 = sub i32 %470, %260
  %472 = sub i32 %471, %262
  %473 = sub i32 %472, %264
  %474 = sub i32 %473, %265
  %475 = add i32 %474, %266
  %476 = sub i32 %475, %275
  %477 = sub i32 %476, %276
  %478 = sub i32 %477, %278
  %479 = sub i32 %478, %279
  %480 = sub i32 %479, %282
  %481 = add i32 %480, %46
  %482 = sub i32 %481, %56
  %483 = sub i32 %482, %62
  %484 = sub i32 %483, %66
  %485 = sub i32 %484, %75
  %486 = sub i32 %485, %84
  %487 = sub i32 %486, %86
  %488 = sub i32 %487, %88
  %489 = sub i32 %488, %94
  %490 = sub i32 %489, %110
  %491 = add i32 %490, %112
  %492 = add i32 %491, %130
  %493 = sub i32 %492, %145
  %494 = sub i32 %493, %151
  %495 = sub i32 %494, %155
  %496 = sub i32 %495, %157
  %497 = sub i32 %496, %162
  %498 = sub i32 %497, %164
  %499 = add i32 %498, %166
  %500 = sub i32 %499, %172
  %501 = sub i32 %500, %176
  %502 = sub i32 %501, %182
  %503 = add i32 %502, %193
  %504 = sub i32 %503, %203
  %505 = sub i32 %504, %220
  %506 = add i32 %505, %225
  %507 = add i32 %506, %228
  %508 = sub i32 %507, %232
  %509 = sub i32 %508, %235
  %510 = sub i32 %509, %236
  %511 = sub i32 %510, %239
  %512 = add i32 %511, %241
  %513 = sub i32 %512, %243
  %514 = sub i32 %513, %244
  %515 = sub i32 %514, %263
  %516 = sub i32 %515, %269
  %517 = sub i32 %516, %272
  %518 = sub i32 %517, %274
  %519 = add i32 %518, %284
  %520 = add i32 %519, %286
  %521 = add i32 %520, %289
  %522 = add i32 %521, %291
  %523 = add i32 %522, %293
  %524 = add i32 %523, %294
  %525 = sub i32 %524, %126
  %526 = add i32 %525, %316
  %527 = add i32 %526, %319
  %528 = add i32 %527, %314
  %529 = add i32 %528, %310
  %530 = icmp eq i32 %16, %529
  %531 = select i1 %530, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %532 = tail call i32 @puts(i8* nonnull dereferenceable(1) %531)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
