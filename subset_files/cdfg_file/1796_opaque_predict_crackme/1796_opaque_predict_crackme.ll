; ModuleID = '../.././c_source_file/1796_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1796_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = xor i32 %2, -1
  %8 = add i32 %7, %3
  %9 = shl i32 %8, 1
  %10 = add i32 %9, %6
  %11 = xor i32 %4, -1
  %12 = or i32 %11, %3
  %13 = xor i32 %4, %3
  %14 = shl i32 %13, 1
  %15 = xor i32 %14, -2
  %16 = and i32 %11, %3
  %17 = and i32 %4, %3
  %18 = xor i32 %6, -1
  %19 = shl i32 %12, 2
  %20 = xor i32 %19, -4
  %21 = shl i32 %17, 3
  %22 = or i32 %2, %0
  %23 = xor i32 %22, -1
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %23, %25
  %27 = shl i32 %22, 1
  %28 = xor i32 %0, -1
  %29 = or i32 %7, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %28
  %32 = and i32 %1, %0
  %33 = or i32 %32, %23
  %34 = and i32 %25, %2
  %35 = and i32 %7, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %2, %1
  %38 = xor i32 %37, -1
  %39 = xor i32 %38, %0
  %40 = xor i32 %1, -1
  %41 = or i32 %40, %0
  %42 = xor i32 %2, %0
  %43 = and i32 %42, %41
  %44 = and i32 %40, %0
  %45 = and i32 %7, %1
  %46 = xor i32 %45, -1
  %47 = xor i32 %44, %46
  %48 = xor i32 %41, -1
  %49 = xor i32 %42, -1
  %50 = or i32 %49, %48
  %51 = or i32 %35, %30
  %52 = or i32 %7, %0
  %53 = and i32 %52, %40
  %54 = and i32 %40, %2
  %55 = and i32 %54, %0
  %56 = or i32 %40, %2
  %57 = and i32 %56, %28
  %58 = or i32 %55, %57
  %59 = or i32 %25, %2
  %60 = and i32 %2, %0
  %61 = or i32 %60, %25
  %62 = add i32 %37, 1
  %63 = or i32 %45, %0
  %64 = xor i32 %2, %1
  %65 = or i32 %64, %48
  %66 = xor i32 %44, -1
  %67 = xor i32 %66, %2
  %68 = or i32 %49, %1
  %69 = or i32 %64, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %55, %70
  %72 = or i32 %1, %0
  %73 = xor i32 %72, -1
  %74 = add i32 %72, 1
  %75 = and i32 %46, %0
  %76 = and i32 %49, %25
  %77 = xor i32 %32, -1
  %78 = xor i32 %52, -1
  %79 = or i32 %78, %1
  %80 = and i32 %72, %49
  %81 = or i32 %32, %49
  %82 = or i32 %24, %78
  %83 = and i32 %36, %1
  %84 = and i32 %22, %1
  %85 = and i32 %77, %2
  %86 = shl i32 %85, 1
  %87 = or i32 %7, %48
  %88 = and i32 %29, %28
  %89 = and i32 %38, %28
  %90 = and i32 %42, %77
  %91 = or i32 %32, %7
  %92 = and i32 %54, %28
  %93 = and i32 %56, %0
  %94 = or i32 %92, %93
  %95 = xor i32 %29, %0
  %96 = and i32 %24, %36
  %97 = xor i32 %60, %41
  %98 = and i32 %64, %66
  %99 = shl i32 %98, 2
  %100 = xor i32 %55, %69
  %101 = xor i32 %44, %2
  %102 = shl i32 %101, 1
  %103 = or i32 %46, %0
  %104 = xor i32 %64, -1
  %105 = or i32 %104, %48
  %106 = and i32 %42, %24
  %107 = and i32 %42, %72
  %108 = shl i32 %107, 1
  %109 = or i32 %49, %25
  %110 = shl i32 %109, 1
  %111 = and i32 %49, %77
  %112 = shl i32 %111, 1
  %113 = or i32 %35, %24
  %114 = or i32 %23, %40
  %115 = xor i32 %30, %0
  %116 = and i32 %64, %72
  %117 = xor i32 %55, -1
  %118 = xor i32 %57, %117
  %119 = and i32 %41, %7
  %120 = and i32 %24, %2
  %121 = or i32 %64, %28
  %122 = xor i32 %121, 2147483647
  %123 = or i32 %122, %92
  %124 = shl i32 %123, 1
  %125 = or i32 %104, %28
  %126 = or i32 %2, %1
  %127 = xor i32 %126, %0
  %128 = or i32 %38, %28
  %129 = or i32 %60, %73
  %130 = or i32 %42, %1
  %131 = and i32 %49, %66
  %132 = and i32 %52, %25
  %133 = or i32 %44, %7
  %134 = or i32 %104, %73
  %135 = and i32 %64, %77
  %136 = or i32 %42, %25
  %137 = or i32 %78, %40
  %138 = and i32 %72, %7
  %139 = or i32 %7, %73
  %140 = or i32 %32, %30
  %141 = xor i32 %126, %32
  %142 = and i32 %41, %104
  %143 = xor i32 %45, %0
  %144 = xor i32 %52, %1
  %145 = and i32 %46, %28
  %146 = or i32 %64, %32
  %147 = or i32 %23, %1
  %148 = and i32 %24, %7
  %149 = xor i32 %60, %126
  %150 = or i32 %60, %48
  %151 = and i32 %36, %40
  %152 = or i32 %32, %78
  %153 = and i32 %7, %25
  %154 = xor i32 %64, %0
  %155 = or i32 %30, %0
  %156 = or i32 %32, %2
  %157 = xor i32 %56, %0
  %158 = or i32 %55, %157
  %159 = and i32 %37, %0
  %160 = xor i32 %159, %154
  %161 = shl i32 %160, 1
  %162 = and i32 %104, %0
  %163 = or i32 %42, %48
  %164 = shl i32 %163, 2
  %165 = xor i32 %60, -1
  %166 = and i32 %165, %1
  %167 = and i32 %64, %41
  %168 = and i32 %37, %28
  %169 = and i32 %126, %0
  %170 = xor i32 %169, -1
  %171 = xor i32 %168, %170
  %172 = or i32 %37, %44
  %173 = or i32 %48, %2
  %174 = xor i32 %72, %2
  %175 = xor i32 %36, %1
  %176 = and i32 %64, %28
  %177 = xor i32 %176, -1
  %178 = xor i32 %159, %177
  %179 = or i32 %104, %0
  %180 = or i32 %60, %24
  %181 = xor i32 %60, %72
  %182 = or i32 %35, %25
  %183 = xor i32 %44, %38
  %184 = shl i32 %176, 1
  %185 = xor i32 %126, -1
  %186 = or i32 %32, %185
  %187 = or i32 %126, %28
  %188 = xor i32 %35, %29
  %189 = xor i32 %22, %1
  %190 = and i32 %52, %24
  %191 = shl i32 %190, 1
  %192 = and i32 %22, %40
  %193 = and i32 %22, %24
  %194 = and i32 %29, %0
  %195 = or i32 %24, %49
  %196 = and i32 %104, %66
  %197 = and i32 %72, %2
  %198 = shl i32 %197, 1
  %199 = or i32 %44, %104
  %200 = xor i32 %22, %32
  %201 = and i32 %22, %25
  %202 = shl i32 %201, 1
  %203 = xor i32 %202, -1
  %204 = xor i32 %165, %1
  %205 = shl i32 %204, 1
  %206 = and i32 %42, %66
  %207 = and i32 %42, %1
  %208 = xor i32 %78, %1
  %209 = xor i32 %23, %1
  %210 = or i32 %60, %1
  %211 = and i32 %36, %25
  %212 = or i32 %126, %0
  %213 = xor i32 %35, %38
  %214 = and i32 %49, %1
  %215 = and i32 %41, %49
  %216 = and i32 %42, %25
  %217 = or i32 %29, %0
  %218 = or i32 %185, %0
  %219 = or i32 %7, %25
  %220 = and i32 %66, %2
  %221 = and i32 %104, %28
  %222 = and i32 %41, %2
  %223 = and i32 %42, %40
  %224 = shl i32 %223, 1
  %225 = xor i32 %157, %117
  %226 = xor i32 %37, %0
  %227 = or i32 %60, %40
  %228 = and i32 %126, %28
  %229 = and i32 %165, %40
  %230 = shl i32 %229, 1
  %231 = or i32 %37, %28
  %232 = and i32 %7, %77
  %233 = or i32 %168, %169
  %234 = or i32 %64, %44
  %235 = and i32 %185, %28
  %236 = and i32 %45, %28
  %237 = shl i32 %236, 2
  %238 = and i32 %185, %0
  %239 = mul i32 %238, -20
  %240 = and i32 %45, %0
  %241 = mul i32 %240, -17
  %242 = and i32 %30, %0
  %243 = shl i32 %242, 1
  %244 = mul i32 %159, -9
  %245 = add i32 %40, %2
  %246 = add i32 %245, %41
  %247 = add i32 %246, %185
  %248 = add i32 %247, %156
  %249 = add i32 %248, %67
  %250 = add i32 %249, %231
  %251 = add i32 %250, %212
  %252 = add i32 %251, %200
  %253 = add i32 %252, %194
  %254 = add i32 %253, %193
  %255 = add i32 %254, %179
  %256 = add i32 %255, %154
  %257 = add i32 %256, %140
  %258 = add i32 %257, %84
  %259 = add i32 %258, %79
  %260 = add i32 %259, %63
  %261 = add i32 %260, %158
  %262 = shl i32 %261, 1
  %263 = add i32 %136, %235
  %264 = add i32 %263, %96
  %265 = sub i32 %90, %264
  %266 = add i32 %265, %18
  %267 = add i32 %266, %16
  %268 = mul i32 %267, 5
  %269 = add i32 %133, %174
  %270 = add i32 %269, %209
  %271 = sub i32 %270, %168
  %272 = add i32 %271, %186
  %273 = mul i32 %272, 3
  %274 = sub i32 2, %0
  %275 = sub i32 %274, %1
  %276 = add i32 %275, %74
  %277 = add i32 %276, %48
  %278 = add i32 %277, %72
  %279 = sub i32 %278, %44
  %280 = add i32 %279, %25
  %281 = add i32 %280, %34
  %282 = add i32 %281, %36
  %283 = sub i32 %282, %59
  %284 = add i32 %283, %62
  %285 = add i32 %284, %87
  %286 = sub i32 %285, %91
  %287 = sub i32 %286, %64
  %288 = sub i32 %287, %60
  %289 = sub i32 %288, %119
  %290 = add i32 %289, %120
  %291 = add i32 %290, %42
  %292 = sub i32 %291, %37
  %293 = add i32 %292, %30
  %294 = sub i32 %293, %138
  %295 = add i32 %294, %139
  %296 = add i32 %295, %148
  %297 = sub i32 %296, %153
  %298 = sub i32 %297, %173
  %299 = add i32 %298, %174
  %300 = sub i32 %299, %35
  %301 = sub i32 %300, %126
  %302 = add i32 %301, %23
  %303 = sub i32 %302, %219
  %304 = add i32 %303, %220
  %305 = sub i32 %304, %222
  %306 = add i32 %305, %165
  %307 = sub i32 %306, %232
  %308 = sub i32 %307, %4
  %309 = sub i32 %308, %26
  %310 = sub i32 %309, %27
  %311 = sub i32 %310, %31
  %312 = sub i32 %311, %33
  %313 = add i32 %312, %39
  %314 = add i32 %313, %43
  %315 = sub i32 %314, %47
  %316 = sub i32 %315, %50
  %317 = sub i32 %316, %51
  %318 = add i32 %317, %53
  %319 = sub i32 %318, %61
  %320 = add i32 %319, %65
  %321 = sub i32 %320, %68
  %322 = sub i32 %321, %75
  %323 = sub i32 %322, %76
  %324 = add i32 %323, %80
  %325 = add i32 %324, %81
  %326 = add i32 %325, %82
  %327 = sub i32 %326, %83
  %328 = sub i32 %327, %86
  %329 = sub i32 %328, %88
  %330 = sub i32 %329, %89
  %331 = sub i32 %330, %95
  %332 = sub i32 %331, %97
  %333 = sub i32 %332, %102
  %334 = sub i32 %333, %103
  %335 = add i32 %334, %105
  %336 = sub i32 %335, %106
  %337 = sub i32 %336, %113
  %338 = add i32 %337, %114
  %339 = add i32 %338, %115
  %340 = sub i32 %339, %116
  %341 = sub i32 %340, %125
  %342 = add i32 %341, %127
  %343 = add i32 %342, %128
  %344 = sub i32 %343, %129
  %345 = add i32 %344, %130
  %346 = add i32 %345, %131
  %347 = add i32 %346, %132
  %348 = sub i32 %347, %134
  %349 = sub i32 %348, %135
  %350 = add i32 %349, %137
  %351 = sub i32 %350, %141
  %352 = add i32 %351, %142
  %353 = sub i32 %352, %143
  %354 = sub i32 %353, %144
  %355 = sub i32 %354, %145
  %356 = sub i32 %355, %146
  %357 = add i32 %356, %147
  %358 = sub i32 %357, %149
  %359 = add i32 %358, %150
  %360 = add i32 %359, %151
  %361 = sub i32 %360, %152
  %362 = add i32 %361, %155
  %363 = add i32 %362, %162
  %364 = sub i32 %363, %166
  %365 = sub i32 %364, %167
  %366 = sub i32 %365, %172
  %367 = add i32 %366, %175
  %368 = add i32 %367, %180
  %369 = add i32 %368, %181
  %370 = add i32 %369, %182
  %371 = add i32 %370, %183
  %372 = sub i32 %371, %187
  %373 = add i32 %372, %188
  %374 = sub i32 %373, %189
  %375 = sub i32 %374, %192
  %376 = sub i32 %375, %195
  %377 = sub i32 %376, %196
  %378 = sub i32 %377, %198
  %379 = sub i32 %378, %199
  %380 = sub i32 %379, %206
  %381 = sub i32 %380, %207
  %382 = sub i32 %381, %208
  %383 = add i32 %382, %210
  %384 = add i32 %383, %211
  %385 = add i32 %384, %213
  %386 = add i32 %385, %214
  %387 = add i32 %386, %215
  %388 = sub i32 %387, %216
  %389 = add i32 %388, %121
  %390 = sub i32 %389, %217
  %391 = add i32 %390, %218
  %392 = sub i32 %391, %221
  %393 = add i32 %392, %226
  %394 = add i32 %393, %227
  %395 = sub i32 %394, %228
  %396 = add i32 %395, %234
  %397 = sub i32 %396, %12
  %398 = add i32 %397, %16
  %399 = add i32 %398, %17
  %400 = sub i32 %399, %58
  %401 = sub i32 %400, %71
  %402 = sub i32 %401, %94
  %403 = sub i32 %402, %99
  %404 = add i32 %403, %100
  %405 = sub i32 %404, %108
  %406 = sub i32 %405, %110
  %407 = sub i32 %406, %112
  %408 = add i32 %407, %118
  %409 = add i32 %408, %164
  %410 = add i32 %409, %171
  %411 = add i32 %410, %178
  %412 = sub i32 %411, %184
  %413 = sub i32 %412, %191
  %414 = add i32 %413, %203
  %415 = sub i32 %414, %205
  %416 = sub i32 %415, %224
  %417 = add i32 %416, %225
  %418 = sub i32 %417, %230
  %419 = add i32 %418, %233
  %420 = sub i32 %419, %237
  %421 = add i32 %420, %239
  %422 = add i32 %421, %241
  %423 = sub i32 %422, %243
  %424 = add i32 %423, %244
  %425 = add i32 %424, %21
  %426 = sub i32 %425, %161
  %427 = sub i32 %426, %15
  %428 = add i32 %427, %20
  %429 = sub i32 %428, %124
  %430 = add i32 %429, %273
  %431 = add i32 %430, %268
  %432 = add i32 %431, %262
  %433 = icmp eq i32 %10, %432
  %434 = select i1 %433, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %435 = tail call i32 @puts(i8* nonnull dereferenceable(1) %434)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
