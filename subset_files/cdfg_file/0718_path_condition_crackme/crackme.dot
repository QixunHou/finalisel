digraph "DFG for'crackme' function" {
	Node0x18f50f0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x18f5190[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x18f5200[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x18f5270[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0x18f52e0[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0x18f5350[shape=record, label="  %10 = shl i32 %1, 1"];
	Node0x18f53c0[shape=record, label="  %11 = or i32 %5, %1"];
	Node0x18f5430[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x18f54a0[shape=record, label="  %13 = and i32 %5, %1"];
	Node0x18f5510[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x18f5580[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x18f5620[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x18f56c0[shape=record, label="  %17 = mul i32 %12, 6"];
	Node0x18f5730[shape=record, label="  %18 = or i32 %3, %0"];
	Node0x18f57a0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x18f5810[shape=record, label="  %20 = xor i32 %3, -1"];
	Node0x18f5880[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x18f58f0[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x18f5960[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x18f59d0[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x18f5a70[shape=record, label="  %25 = mul i32 %24, 3"];
	Node0x18f5ae0[shape=record, label="  %26 = shl i32 %9, 1"];
	Node0x18f5b50[shape=record, label="  %27 = add i32 %22, %13"];
	Node0x18f5bf0[shape=record, label="  %28 = shl i32 %27, 2"];
	Node0x18f5c90[shape=record, label="  %29 = add i32 %0, 4"];
	Node0x18f5d00[shape=record, label="  %30 = sub i32 %29, %10"];
	Node0x18f5d70[shape=record, label="  %31 = sub i32 %30, %11"];
	Node0x18f5de0[shape=record, label="  %32 = sub i32 %31, %12"];
	Node0x18f6060[shape=record, label="  %33 = add i32 %32, %13"];
	Node0x18f60d0[shape=record, label="  %34 = add i32 %33, %20"];
	Node0x18f6140[shape=record, label="  %35 = sub i32 %34, %3"];
	Node0x18f61b0[shape=record, label="  %36 = add i32 %35, %16"];
	Node0x18f6220[shape=record, label="  %37 = add i32 %36, %17"];
	Node0x18f6290[shape=record, label="  %38 = add i32 %37, %23"];
	Node0x18f6300[shape=record, label="  %39 = add i32 %38, %26"];
	Node0x18f6370[shape=record, label="  %40 = sub i32 %39, %19"];
	Node0x18f63e0[shape=record, label="  %41 = add i32 %40, %25"];
	Node0x18f6450[shape=record, label="  %42 = add i32 %41, %28"];
	Node0x18f64c0[shape=record, label="  %43 = icmp eq i32 %8, %42"];
	Node0x1895268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18f6960[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x18f69b0[shape=record, label="  ret void"];
	Node0x18f50f0 -> Node0x18f5190;
	Node0x18f5190 -> Node0x18f5200;
	Node0x18f5200 -> Node0x18f5270;
	Node0x18f5270 -> Node0x18f52e0;
	Node0x18f52e0 -> Node0x18f5350;
	Node0x18f5350 -> Node0x18f53c0;
	Node0x18f53c0 -> Node0x18f5430;
	Node0x18f5430 -> Node0x18f54a0;
	Node0x18f54a0 -> Node0x18f5510;
	Node0x18f5510 -> Node0x18f5580;
	Node0x18f5580 -> Node0x18f5620;
	Node0x18f5620 -> Node0x18f56c0;
	Node0x18f56c0 -> Node0x18f5730;
	Node0x18f5730 -> Node0x18f57a0;
	Node0x18f57a0 -> Node0x18f5810;
	Node0x18f5810 -> Node0x18f5880;
	Node0x18f5880 -> Node0x18f58f0;
	Node0x18f58f0 -> Node0x18f5960;
	Node0x18f5960 -> Node0x18f59d0;
	Node0x18f59d0 -> Node0x18f5a70;
	Node0x18f5a70 -> Node0x18f5ae0;
	Node0x18f5ae0 -> Node0x18f5b50;
	Node0x18f5b50 -> Node0x18f5bf0;
	Node0x18f5bf0 -> Node0x18f5c90;
	Node0x18f5c90 -> Node0x18f5d00;
	Node0x18f5d00 -> Node0x18f5d70;
	Node0x18f5d70 -> Node0x18f5de0;
	Node0x18f5de0 -> Node0x18f6060;
	Node0x18f6060 -> Node0x18f60d0;
	Node0x18f60d0 -> Node0x18f6140;
	Node0x18f6140 -> Node0x18f61b0;
	Node0x18f61b0 -> Node0x18f6220;
	Node0x18f6220 -> Node0x18f6290;
	Node0x18f6290 -> Node0x18f6300;
	Node0x18f6300 -> Node0x18f6370;
	Node0x18f6370 -> Node0x18f63e0;
	Node0x18f63e0 -> Node0x18f6450;
	Node0x18f6450 -> Node0x18f64c0;
	Node0x18f64c0 -> Node0x1895268;
	Node0x1895268 -> Node0x18f6960;
	Node0x18f6960 -> Node0x18f69b0;
edge [color=red]
	Node0x18f50f0 -> Node0x18f5190;
	Node0x18f5190 -> Node0x18f5270;
	Node0x18f5200 -> Node0x18f5270;
	Node0x18f50f0 -> Node0x18f53c0;
	Node0x18f50f0 -> Node0x18f54a0;
	Node0x18f5510 -> Node0x18f5580;
	Node0x18f5580 -> Node0x18f5620;
	Node0x18f5430 -> Node0x18f56c0;
	Node0x18f5730 -> Node0x18f57a0;
	Node0x18f5880 -> Node0x18f58f0;
	Node0x18f58f0 -> Node0x18f5960;
	Node0x18f59d0 -> Node0x18f5a70;
	Node0x18f52e0 -> Node0x18f5ae0;
	Node0x18f58f0 -> Node0x18f5b50;
	Node0x18f54a0 -> Node0x18f5b50;
	Node0x18f5b50 -> Node0x18f5bf0;
	Node0x18f5c90 -> Node0x18f5d00;
	Node0x18f5350 -> Node0x18f5d00;
	Node0x18f5d00 -> Node0x18f5d70;
	Node0x18f53c0 -> Node0x18f5d70;
	Node0x18f5d70 -> Node0x18f5de0;
	Node0x18f5430 -> Node0x18f5de0;
	Node0x18f5de0 -> Node0x18f6060;
	Node0x18f54a0 -> Node0x18f6060;
	Node0x18f6060 -> Node0x18f60d0;
	Node0x18f5810 -> Node0x18f60d0;
	Node0x18f60d0 -> Node0x18f6140;
	Node0x18f6140 -> Node0x18f61b0;
	Node0x18f5620 -> Node0x18f61b0;
	Node0x18f61b0 -> Node0x18f6220;
	Node0x18f56c0 -> Node0x18f6220;
	Node0x18f6220 -> Node0x18f6290;
	Node0x18f5960 -> Node0x18f6290;
	Node0x18f6290 -> Node0x18f6300;
	Node0x18f5ae0 -> Node0x18f6300;
	Node0x18f6300 -> Node0x18f6370;
	Node0x18f57a0 -> Node0x18f6370;
	Node0x18f6370 -> Node0x18f63e0;
	Node0x18f5a70 -> Node0x18f63e0;
	Node0x18f63e0 -> Node0x18f6450;
	Node0x18f5bf0 -> Node0x18f6450;
	Node0x18f5270 -> Node0x18f64c0;
	Node0x18f6450 -> Node0x18f64c0;
	Node0x18f64c0 -> Node0x1895268;
	Node0x1895268 -> Node0x18f6960;
}
