digraph "DFG for'crackme' function" {
	Node0xff5540[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xff5bf0[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0xff5cb0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xff5d20[shape=record, label="  %6 = xor i32 %3, -1"];
	Node0xff5d90[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0xff5e00[shape=record, label="  %8 = or i32 %7, %0"];
	Node0xff5ea0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xff5f40[shape=record, label="  %10 = shl i32 %8, 2"];
	Node0xff5fe0[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0xff6050[shape=record, label="  %12 = and i32 %7, %0"];
	Node0xff60c0[shape=record, label="  %13 = shl i32 %12, 2"];
	Node0xff6130[shape=record, label="  %14 = and i32 %1, %0"];
	Node0xff61a0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0xff6210[shape=record, label="  %16 = add i32 %5, %7"];
	Node0xff6280[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0xff62f0[shape=record, label="  %18 = add i32 %0, 1"];
	Node0xff6360[shape=record, label="  %19 = add i32 %18, %1"];
	Node0xff63d0[shape=record, label="  %20 = add i32 %19, %6"];
	Node0xff6440[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0xff64b0[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0xff6520[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0xff6590[shape=record, label="  %24 = sub i32 %23, %11"];
	Node0xff6600[shape=record, label="  %25 = add i32 %24, %17"];
	Node0xff6670[shape=record, label="  %26 = icmp eq i32 %4, %25"];
	Node0xf96268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xff6b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xff6b60[shape=record, label="  ret void"];
	Node0xff5540 -> Node0xff5bf0;
	Node0xff5bf0 -> Node0xff5cb0;
	Node0xff5cb0 -> Node0xff5d20;
	Node0xff5d20 -> Node0xff5d90;
	Node0xff5d90 -> Node0xff5e00;
	Node0xff5e00 -> Node0xff5ea0;
	Node0xff5ea0 -> Node0xff5f40;
	Node0xff5f40 -> Node0xff5fe0;
	Node0xff5fe0 -> Node0xff6050;
	Node0xff6050 -> Node0xff60c0;
	Node0xff60c0 -> Node0xff6130;
	Node0xff6130 -> Node0xff61a0;
	Node0xff61a0 -> Node0xff6210;
	Node0xff6210 -> Node0xff6280;
	Node0xff6280 -> Node0xff62f0;
	Node0xff62f0 -> Node0xff6360;
	Node0xff6360 -> Node0xff63d0;
	Node0xff63d0 -> Node0xff6440;
	Node0xff6440 -> Node0xff64b0;
	Node0xff64b0 -> Node0xff6520;
	Node0xff6520 -> Node0xff6590;
	Node0xff6590 -> Node0xff6600;
	Node0xff6600 -> Node0xff6670;
	Node0xff6670 -> Node0xf96268;
	Node0xf96268 -> Node0xff6b10;
	Node0xff6b10 -> Node0xff6b60;
edge [color=red]
	Node0xff5540 -> Node0xff5bf0;
	Node0xff5540 -> Node0xff5d20;
	Node0xff5d90 -> Node0xff5e00;
	Node0xff5e00 -> Node0xff5ea0;
	Node0xff5e00 -> Node0xff5f40;
	Node0xff5f40 -> Node0xff5fe0;
	Node0xff5d90 -> Node0xff6050;
	Node0xff6050 -> Node0xff60c0;
	Node0xff6130 -> Node0xff61a0;
	Node0xff5cb0 -> Node0xff6210;
	Node0xff5d90 -> Node0xff6210;
	Node0xff6210 -> Node0xff6280;
	Node0xff62f0 -> Node0xff6360;
	Node0xff6360 -> Node0xff63d0;
	Node0xff5d20 -> Node0xff63d0;
	Node0xff63d0 -> Node0xff6440;
	Node0xff5ea0 -> Node0xff6440;
	Node0xff6440 -> Node0xff64b0;
	Node0xff60c0 -> Node0xff64b0;
	Node0xff64b0 -> Node0xff6520;
	Node0xff61a0 -> Node0xff6520;
	Node0xff6520 -> Node0xff6590;
	Node0xff5fe0 -> Node0xff6590;
	Node0xff6590 -> Node0xff6600;
	Node0xff6280 -> Node0xff6600;
	Node0xff5bf0 -> Node0xff6670;
	Node0xff6600 -> Node0xff6670;
	Node0xff6670 -> Node0xf96268;
	Node0xf96268 -> Node0xff6b10;
}
