digraph "DFG for'crackme' function" {
	Node0x7405d0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x740c80[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x740d40[shape=record, label="  %5 = shl i32 %1, 1"];
	Node0x740db0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x740e20[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x740e90[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x740f00[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x740f70[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x740fe0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x741080[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x7410f0[shape=record, label="  %13 = xor i32 %7, -1"];
	Node0x741190[shape=record, label="  %14 = mul i32 %13, -3"];
	Node0x741200[shape=record, label="  %15 = and i32 %6, %0"];
	Node0x7412a0[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x741310[shape=record, label="  %17 = shl i32 %8, 2"];
	Node0x741380[shape=record, label="  %18 = add i32 %0, 2"];
	Node0x7413f0[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x741460[shape=record, label="  %20 = add i32 %19, %5"];
	Node0x7414d0[shape=record, label="  %21 = add i32 %20, %3"];
	Node0x741540[shape=record, label="  %22 = add i32 %21, %7"];
	Node0x7415b0[shape=record, label="  %23 = add i32 %22, %9"];
	Node0x741620[shape=record, label="  %24 = add i32 %23, %10"];
	Node0x741690[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x741700[shape=record, label="  %26 = sub i32 %25, %16"];
	Node0x741770[shape=record, label="  %27 = sub i32 %26, %17"];
	Node0x7417e0[shape=record, label="  %28 = sub i32 %27, %12"];
	Node0x741850[shape=record, label="  %29 = icmp eq i32 %4, %28"];
	Node0x6e1268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x741cf0[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0x741d40[shape=record, label="  ret void"];
	Node0x7405d0 -> Node0x740c80;
	Node0x740c80 -> Node0x740d40;
	Node0x740d40 -> Node0x740db0;
	Node0x740db0 -> Node0x740e20;
	Node0x740e20 -> Node0x740e90;
	Node0x740e90 -> Node0x740f00;
	Node0x740f00 -> Node0x740f70;
	Node0x740f70 -> Node0x740fe0;
	Node0x740fe0 -> Node0x741080;
	Node0x741080 -> Node0x7410f0;
	Node0x7410f0 -> Node0x741190;
	Node0x741190 -> Node0x741200;
	Node0x741200 -> Node0x7412a0;
	Node0x7412a0 -> Node0x741310;
	Node0x741310 -> Node0x741380;
	Node0x741380 -> Node0x7413f0;
	Node0x7413f0 -> Node0x741460;
	Node0x741460 -> Node0x7414d0;
	Node0x7414d0 -> Node0x741540;
	Node0x741540 -> Node0x7415b0;
	Node0x7415b0 -> Node0x741620;
	Node0x741620 -> Node0x741690;
	Node0x741690 -> Node0x741700;
	Node0x741700 -> Node0x741770;
	Node0x741770 -> Node0x7417e0;
	Node0x7417e0 -> Node0x741850;
	Node0x741850 -> Node0x6e1268;
	Node0x6e1268 -> Node0x741cf0;
	Node0x741cf0 -> Node0x741d40;
edge [color=red]
	Node0x7405d0 -> Node0x740c80;
	Node0x740db0 -> Node0x740e20;
	Node0x740e90 -> Node0x740f00;
	Node0x740f70 -> Node0x740fe0;
	Node0x740fe0 -> Node0x741080;
	Node0x740e20 -> Node0x7410f0;
	Node0x7410f0 -> Node0x741190;
	Node0x740db0 -> Node0x741200;
	Node0x741200 -> Node0x7412a0;
	Node0x740e90 -> Node0x741310;
	Node0x741380 -> Node0x7413f0;
	Node0x740db0 -> Node0x7413f0;
	Node0x7413f0 -> Node0x741460;
	Node0x740d40 -> Node0x741460;
	Node0x741460 -> Node0x7414d0;
	Node0x7405d0 -> Node0x7414d0;
	Node0x7414d0 -> Node0x741540;
	Node0x740e20 -> Node0x741540;
	Node0x741540 -> Node0x7415b0;
	Node0x740f00 -> Node0x7415b0;
	Node0x7415b0 -> Node0x741620;
	Node0x740f70 -> Node0x741620;
	Node0x741620 -> Node0x741690;
	Node0x741190 -> Node0x741690;
	Node0x741690 -> Node0x741700;
	Node0x7412a0 -> Node0x741700;
	Node0x741700 -> Node0x741770;
	Node0x741310 -> Node0x741770;
	Node0x741770 -> Node0x7417e0;
	Node0x741080 -> Node0x7417e0;
	Node0x740c80 -> Node0x741850;
	Node0x7417e0 -> Node0x741850;
	Node0x741850 -> Node0x6e1268;
	Node0x6e1268 -> Node0x741cf0;
}
