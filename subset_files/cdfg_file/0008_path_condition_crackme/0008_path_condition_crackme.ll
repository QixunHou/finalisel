; ModuleID = '../.././c_source_file/0008_path_condition_crackme.c'
source_filename = "../.././c_source_file/0008_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %2, -1
  %7 = or i32 %1, %0
  %8 = and i32 %7, %6
  %9 = add i32 %8, 1
  %10 = shl i32 %3, 1
  %11 = xor i32 %10, -2
  %12 = and i32 %4, %3
  %13 = xor i32 %4, -1
  %14 = or i32 %4, %3
  %15 = xor i32 %3, 1073741823
  %16 = and i32 %15, %4
  %17 = and i32 %13, %3
  %18 = shl i32 %17, 2
  %19 = xor i32 %0, -1
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %2
  %22 = and i32 %21, %19
  %23 = or i32 %20, %2
  %24 = and i32 %23, %0
  %25 = xor i32 %24, 2147483647
  %26 = xor i32 %25, %22
  %27 = and i32 %2, %1
  %28 = and i32 %27, %19
  %29 = xor i32 %2, %1
  %30 = and i32 %29, %0
  %31 = or i32 %28, %30
  %32 = shl i32 %31, 1
  %33 = xor i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %20
  %36 = shl i32 %35, 1
  %37 = xor i32 %7, -1
  %38 = or i32 %34, %37
  %39 = and i32 %29, %19
  %40 = and i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = and i32 %41, %20
  %43 = and i32 %6, %1
  %44 = xor i32 %43, %0
  %45 = and i32 %7, %2
  %46 = xor i32 %43, -1
  %47 = or i32 %46, %0
  %48 = shl i32 %47, 1
  %49 = or i32 %20, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %6, %50
  %52 = and i32 %27, %0
  %53 = or i32 %2, %1
  %54 = xor i32 %53, %0
  %55 = or i32 %52, %54
  %56 = or i32 %40, %1
  %57 = and i32 %20, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %6, %58
  %60 = or i32 %6, %0
  %61 = xor i32 %60, -1
  %62 = or i32 %61, %1
  %63 = xor i32 %29, -1
  %64 = and i32 %49, %63
  %65 = and i32 %60, %20
  %66 = and i32 %49, %6
  %67 = xor i32 %41, %1
  %68 = shl i32 %67, 1
  %69 = xor i32 %1, %0
  %70 = and i32 %69, %34
  %71 = or i32 %27, %57
  %72 = or i32 %6, %1
  %73 = xor i32 %69, -1
  %74 = and i32 %60, %73
  %75 = or i32 %2, %0
  %76 = and i32 %75, %73
  %77 = and i32 %6, %0
  %78 = or i32 %77, %1
  %79 = xor i32 %57, %46
  %80 = and i32 %33, %73
  %81 = or i32 %69, %6
  %82 = xor i32 %72, -1
  %83 = or i32 %77, %82
  %84 = and i32 %53, %19
  %85 = xor i32 %52, -1
  %86 = xor i32 %84, %85
  %87 = xor i32 %57, %2
  %88 = xor i32 %29, %0
  %89 = xor i32 %52, %88
  %90 = and i32 %1, %0
  %91 = or i32 %90, %34
  %92 = shl i32 %30, 1
  %93 = and i32 %73, %2
  %94 = and i32 %21, %0
  %95 = xor i32 %23, %0
  %96 = or i32 %94, %95
  %97 = and i32 %63, %0
  %98 = xor i32 %49, %2
  %99 = xor i32 %75, -1
  %100 = or i32 %90, %99
  %101 = or i32 %57, %34
  %102 = and i32 %41, %73
  %103 = xor i32 %27, -1
  %104 = or i32 %103, %0
  %105 = xor i32 %53, %90
  %106 = shl i32 %105, 1
  %107 = and i32 %69, %2
  %108 = or i32 %29, %0
  %109 = xor i32 %108, -1
  %110 = or i32 %94, %109
  %111 = xor i32 %77, -1
  %112 = shl i32 %111, 1
  %113 = and i32 %29, %58
  %114 = or i32 %82, %19
  %115 = xor i32 %72, %90
  %116 = and i32 %63, %19
  %117 = and i32 %72, %0
  %118 = shl i32 %117, 1
  %119 = or i32 %29, %37
  %120 = and i32 %69, %41
  %121 = and i32 %7, %63
  %122 = xor i32 %40, %53
  %123 = and i32 %49, %2
  %124 = xor i32 %90, -1
  %125 = and i32 %33, %124
  %126 = or i32 %90, %61
  %127 = and i32 %53, %0
  %128 = xor i32 %28, -1
  %129 = xor i32 %127, %128
  %130 = add i32 %69, 1
  %131 = or i32 %63, %50
  %132 = or i32 %61, %20
  %133 = or i32 %50, %2
  %134 = or i32 %52, %39
  %135 = xor i32 %111, %1
  %136 = or i32 %69, %61
  %137 = and i32 %34, %1
  %138 = xor i32 %77, %72
  %139 = shl i32 %124, 1
  %140 = and i32 %103, %19
  %141 = xor i32 %53, -1
  %142 = xor i32 %141, %0
  %143 = xor i32 %60, %90
  %144 = and i32 %41, %1
  %145 = and i32 %6, %124
  %146 = or i32 %61, %73
  %147 = and i32 %23, %19
  %148 = xor i32 %147, 2147483647
  %149 = xor i32 %148, %94
  %150 = or i32 %22, %24
  %151 = xor i32 %60, %1
  %152 = or i32 %99, %73
  %153 = shl i32 %152, 1
  %154 = xor i32 %72, %0
  %155 = xor i32 %94, %108
  %156 = shl i32 %155, 1
  %157 = or i32 %141, %19
  %158 = and i32 %34, %124
  %159 = or i32 %63, %19
  %160 = and i32 %29, %7
  %161 = and i32 %111, %1
  %162 = shl i32 %108, 1
  %163 = and i32 %75, %20
  %164 = and i32 %34, %73
  %165 = or i32 %77, %27
  %166 = or i32 %63, %0
  %167 = shl i32 %166, 1
  %168 = and i32 %33, %49
  %169 = or i32 %6, %37
  %170 = shl i32 %169, 1
  %171 = and i32 %33, %7
  %172 = or i32 %99, %1
  %173 = or i32 %34, %73
  %174 = or i32 %33, %37
  %175 = xor i32 %50, %2
  %176 = or i32 %34, %20
  %177 = and i32 %63, %58
  %178 = xor i32 %88, -1
  %179 = xor i32 %94, %178
  %180 = or i32 %82, %0
  %181 = or i32 %29, %57
  %182 = xor i32 %103, %0
  %183 = shl i32 %90, 2
  %184 = and i32 %49, %34
  %185 = or i32 %57, %2
  %186 = or i32 %43, %19
  %187 = shl i32 %141, 1
  %188 = and i32 %75, %1
  %189 = xor i32 %75, %90
  %190 = and i32 %72, %19
  %191 = and i32 %46, %19
  %192 = and i32 %29, %49
  %193 = xor i32 %40, %49
  %194 = shl i32 %60, 1
  %195 = or i32 %33, %69
  %196 = or i32 %27, %0
  %197 = or i32 %37, %2
  %198 = or i32 %40, %69
  %199 = and i32 %58, %2
  %200 = or i32 %90, %141
  %201 = shl i32 %200, 1
  %202 = xor i32 %61, %1
  %203 = and i32 %60, %1
  %204 = or i32 %33, %20
  %205 = or i32 %69, %2
  %206 = or i32 %77, %73
  %207 = or i32 %90, %2
  %208 = xor i32 %46, %0
  %209 = or i32 %69, %99
  %210 = xor i32 %30, %128
  %211 = or i32 %40, %43
  %212 = or i32 %33, %73
  %213 = shl i32 %212, 1
  %214 = or i32 %6, %73
  %215 = and i32 %111, %20
  %216 = or i32 %73, %2
  %217 = and i32 %75, %69
  %218 = shl i32 %217, 1
  %219 = xor i32 %39, %85
  %220 = shl i32 %99, 1
  %221 = or i32 %90, %6
  %222 = or i32 %103, %19
  %223 = and i32 %103, %0
  %224 = xor i32 %7, %2
  %225 = or i32 %94, %88
  %226 = shl i32 %225, 1
  %227 = xor i32 %40, %46
  %228 = xor i32 %77, %103
  %229 = xor i32 %37, %2
  %230 = xor i32 %40, %1
  %231 = xor i32 %54, %85
  %232 = or i32 %52, %178
  %233 = or i32 %33, %1
  %234 = and i32 %63, %124
  %235 = or i32 %72, %19
  %236 = xor i32 %99, %1
  %237 = or i32 %29, %19
  %238 = xor i32 %22, %237
  %239 = xor i32 %90, %2
  %240 = or i32 %57, %6
  %241 = and i32 %124, %2
  %242 = or i32 %34, %50
  %243 = or i32 %28, %127
  %244 = xor i32 %124, %2
  %245 = or i32 %77, %69
  %246 = shl i32 %245, 1
  %247 = or i32 %141, %0
  %248 = and i32 %46, %0
  %249 = or i32 %33, %90
  %250 = or i32 %40, %50
  %251 = or i32 %99, %20
  %252 = or i32 %57, %63
  %253 = or i32 %53, %19
  %254 = shl i32 %82, 1
  %255 = or i32 %63, %37
  %256 = xor i32 %27, %0
  %257 = or i32 %90, %63
  %258 = and i32 %33, %69
  %259 = or i32 %46, %19
  %260 = or i32 %27, %19
  %261 = shl i32 %260, 1
  %262 = and i32 %111, %73
  %263 = or i32 %29, %50
  %264 = xor i32 %82, %0
  %265 = and i32 %69, %6
  %266 = shl i32 %53, 1
  %267 = or i32 %90, %82
  %268 = or i32 %77, %20
  %269 = and i32 %34, %58
  %270 = and i32 %69, %111
  %271 = shl i32 %270, 2
  %272 = or i32 %33, %57
  %273 = or i32 %53, %0
  %274 = or i32 %94, %147
  %275 = xor i32 %58, %2
  %276 = xor i32 %40, %7
  %277 = or i32 %40, %73
  %278 = shl i32 %27, 1
  %279 = and i32 %33, %58
  %280 = or i32 %43, %57
  %281 = or i32 %43, %0
  %282 = xor i32 %75, %1
  %283 = xor i32 %95, -1
  %284 = xor i32 %94, %283
  %285 = xor i32 %77, %1
  %286 = shl i32 %285, 1
  %287 = and i32 %7, %34
  %288 = and i32 %60, %69
  %289 = and i32 %33, %1
  %290 = xor i32 %237, 2147483647
  %291 = or i32 %290, %22
  %292 = shl i32 %291, 1
  %293 = and i32 %6, %73
  %294 = or i32 %40, %37
  %295 = or i32 %33, %50
  %296 = shl i32 %295, 1
  %297 = or i32 %52, %84
  %298 = and i32 %33, %20
  %299 = or i32 %72, %0
  %300 = or i32 %69, %34
  %301 = shl i32 %300, 1
  %302 = or i32 %40, %20
  %303 = or i32 %29, %90
  %304 = xor i32 %57, %103
  %305 = and i32 %29, %124
  %306 = xor i32 %63, %0
  %307 = or i32 %34, %1
  %308 = or i32 %40, %141
  %309 = shl i32 %57, 1
  %310 = and i32 %141, %19
  %311 = shl i32 %310, 4
  %312 = and i32 %43, %19
  %313 = shl i32 %312, 3
  %314 = and i32 %141, %0
  %315 = mul i32 %314, 15
  %316 = and i32 %43, %0
  %317 = mul i32 %316, 7
  %318 = and i32 %82, %19
  %319 = shl i32 %318, 5
  %320 = and i32 %82, %0
  %321 = mul i32 %320, -6
  %322 = mul i32 %52, 17
  %323 = add i32 %143, %228
  %324 = add i32 %323, %121
  %325 = sub i32 %83, %324
  %326 = sub i32 %325, %4
  %327 = add i32 %326, %55
  %328 = mul i32 %327, 5
  %329 = add i32 %264, %251
  %330 = add i32 %329, %227
  %331 = sub i32 %330, %165
  %332 = sub i32 %331, %78
  %333 = mul i32 %332, 3
  %334 = add i32 %133, %40
  %335 = add i32 %334, %303
  %336 = add i32 %335, %294
  %337 = add i32 %336, %16
  %338 = shl i32 %337, 2
  %339 = sub i32 -2, %1
  %340 = add i32 %339, %37
  %341 = add i32 %340, %205
  %342 = add i32 %341, %103
  %343 = add i32 %342, %107
  %344 = add i32 %343, %29
  %345 = add i32 %344, %307
  %346 = add i32 %345, %282
  %347 = add i32 %346, %279
  %348 = add i32 %347, %273
  %349 = add i32 %348, %259
  %350 = add i32 %349, %258
  %351 = add i32 %350, %256
  %352 = add i32 %351, %209
  %353 = add i32 %352, %202
  %354 = add i32 %353, %195
  %355 = add i32 %354, %189
  %356 = add i32 %355, %168
  %357 = add i32 %356, %158
  %358 = add i32 %357, %144
  %359 = add i32 %358, %137
  %360 = add i32 %359, %122
  %361 = add i32 %360, %65
  %362 = add i32 %361, %13
  %363 = add i32 %362, %89
  %364 = add i32 %363, %12
  %365 = add i32 %364, %14
  %366 = add i32 %365, %26
  %367 = add i32 %366, %149
  %368 = shl i32 %367, 1
  %369 = shl i32 %0, 1
  %370 = add i32 %369, 3
  %371 = add i32 %370, %1
  %372 = add i32 %371, %130
  %373 = sub i32 %372, %57
  %374 = add i32 %373, %7
  %375 = sub i32 %374, %69
  %376 = sub i32 %375, %3
  %377 = sub i32 %376, %45
  %378 = sub i32 %377, %51
  %379 = add i32 %378, %59
  %380 = sub i32 %379, %66
  %381 = sub i32 %380, %72
  %382 = sub i32 %381, %81
  %383 = add i32 %382, %87
  %384 = sub i32 %383, %93
  %385 = sub i32 %384, %98
  %386 = add i32 %385, %61
  %387 = add i32 %386, %123
  %388 = sub i32 %387, %139
  %389 = sub i32 %388, %145
  %390 = add i32 %389, %41
  %391 = add i32 %390, %175
  %392 = sub i32 %391, %183
  %393 = add i32 %392, %185
  %394 = add i32 %393, %197
  %395 = sub i32 %394, %199
  %396 = add i32 %395, %77
  %397 = add i32 %396, %207
  %398 = add i32 %397, %214
  %399 = sub i32 %398, %216
  %400 = sub i32 %399, %221
  %401 = add i32 %400, %224
  %402 = add i32 %401, %229
  %403 = add i32 %402, %239
  %404 = sub i32 %403, %240
  %405 = add i32 %404, %241
  %406 = add i32 %405, %244
  %407 = add i32 %406, %75
  %408 = sub i32 %407, %265
  %409 = add i32 %408, %63
  %410 = sub i32 %409, %275
  %411 = sub i32 %410, %293
  %412 = add i32 %411, 1
  %413 = sub i32 %412, %309
  %414 = add i32 %413, %38
  %415 = add i32 %414, %39
  %416 = sub i32 %415, %42
  %417 = sub i32 %416, %44
  %418 = sub i32 %417, %56
  %419 = add i32 %418, %62
  %420 = sub i32 %419, %64
  %421 = sub i32 %420, %70
  %422 = add i32 %421, %71
  %423 = sub i32 %422, %74
  %424 = sub i32 %423, %76
  %425 = add i32 %424, %79
  %426 = add i32 %425, %80
  %427 = sub i32 %426, %91
  %428 = sub i32 %427, %97
  %429 = sub i32 %428, %100
  %430 = add i32 %429, %101
  %431 = sub i32 %430, %102
  %432 = sub i32 %431, %104
  %433 = sub i32 %432, %112
  %434 = add i32 %433, %113
  %435 = sub i32 %434, %114
  %436 = add i32 %435, %115
  %437 = sub i32 %436, %116
  %438 = add i32 %437, %119
  %439 = add i32 %438, %120
  %440 = add i32 %439, %125
  %441 = sub i32 %440, %126
  %442 = add i32 %441, %131
  %443 = add i32 %442, %132
  %444 = add i32 %443, %135
  %445 = sub i32 %444, %136
  %446 = sub i32 %445, %138
  %447 = add i32 %446, %140
  %448 = add i32 %447, %142
  %449 = add i32 %448, %146
  %450 = sub i32 %449, %151
  %451 = sub i32 %450, %154
  %452 = sub i32 %451, %157
  %453 = sub i32 %452, %159
  %454 = add i32 %453, %127
  %455 = add i32 %454, %160
  %456 = sub i32 %455, %161
  %457 = sub i32 %456, %163
  %458 = sub i32 %457, %164
  %459 = sub i32 %458, %170
  %460 = sub i32 %459, %171
  %461 = add i32 %460, %172
  %462 = sub i32 %461, %173
  %463 = sub i32 %462, %174
  %464 = sub i32 %463, %176
  %465 = add i32 %464, %177
  %466 = sub i32 %465, %180
  %467 = add i32 %466, %181
  %468 = add i32 %467, %182
  %469 = add i32 %468, %184
  %470 = add i32 %469, %186
  %471 = sub i32 %470, %187
  %472 = sub i32 %471, %188
  %473 = sub i32 %472, %190
  %474 = add i32 %473, %191
  %475 = sub i32 %474, %192
  %476 = sub i32 %475, %193
  %477 = sub i32 %476, %194
  %478 = add i32 %477, %196
  %479 = sub i32 %478, %198
  %480 = add i32 %479, %203
  %481 = add i32 %480, %204
  %482 = sub i32 %481, %206
  %483 = add i32 %482, %208
  %484 = sub i32 %483, %211
  %485 = add i32 %484, %215
  %486 = sub i32 %485, %220
  %487 = add i32 %486, %88
  %488 = add i32 %487, %222
  %489 = sub i32 %488, %223
  %490 = sub i32 %489, %230
  %491 = sub i32 %490, %233
  %492 = sub i32 %491, %234
  %493 = add i32 %492, %235
  %494 = add i32 %493, %236
  %495 = add i32 %494, %242
  %496 = sub i32 %495, %247
  %497 = sub i32 %496, %248
  %498 = sub i32 %497, %249
  %499 = sub i32 %498, %250
  %500 = sub i32 %499, %252
  %501 = sub i32 %500, %253
  %502 = sub i32 %501, %254
  %503 = add i32 %502, %255
  %504 = add i32 %503, %257
  %505 = sub i32 %504, %262
  %506 = add i32 %505, %263
  %507 = sub i32 %506, %266
  %508 = sub i32 %507, %267
  %509 = sub i32 %508, %268
  %510 = sub i32 %509, %269
  %511 = add i32 %510, %272
  %512 = sub i32 %511, %276
  %513 = add i32 %512, %277
  %514 = sub i32 %513, %278
  %515 = sub i32 %514, %280
  %516 = sub i32 %515, %281
  %517 = add i32 %516, %287
  %518 = add i32 %517, %288
  %519 = add i32 %518, %289
  %520 = sub i32 %519, %237
  %521 = add i32 %520, %298
  %522 = sub i32 %521, %299
  %523 = add i32 %522, %302
  %524 = sub i32 %523, %304
  %525 = sub i32 %524, %305
  %526 = add i32 %525, %84
  %527 = add i32 %526, %306
  %528 = add i32 %527, %308
  %529 = sub i32 %528, %28
  %530 = sub i32 %529, %11
  %531 = add i32 %530, %12
  %532 = add i32 %531, %14
  %533 = sub i32 %532, %36
  %534 = sub i32 %533, %48
  %535 = sub i32 %534, %68
  %536 = add i32 %535, %86
  %537 = sub i32 %536, %92
  %538 = add i32 %537, %96
  %539 = sub i32 %538, %106
  %540 = add i32 %539, %110
  %541 = sub i32 %540, %118
  %542 = add i32 %541, %129
  %543 = sub i32 %542, %134
  %544 = sub i32 %543, %150
  %545 = sub i32 %544, %153
  %546 = sub i32 %545, %162
  %547 = sub i32 %546, %167
  %548 = sub i32 %547, %179
  %549 = sub i32 %548, %201
  %550 = sub i32 %549, %210
  %551 = sub i32 %550, %213
  %552 = sub i32 %551, %218
  %553 = add i32 %552, %219
  %554 = sub i32 %553, %231
  %555 = add i32 %554, %232
  %556 = add i32 %555, %238
  %557 = sub i32 %556, %243
  %558 = sub i32 %557, %246
  %559 = sub i32 %558, %261
  %560 = sub i32 %559, %271
  %561 = sub i32 %560, %274
  %562 = add i32 %561, %284
  %563 = sub i32 %562, %286
  %564 = sub i32 %563, %296
  %565 = sub i32 %564, %297
  %566 = sub i32 %565, %301
  %567 = add i32 %566, %311
  %568 = add i32 %567, %313
  %569 = add i32 %568, %315
  %570 = add i32 %569, %317
  %571 = sub i32 %570, %319
  %572 = add i32 %571, %321
  %573 = add i32 %572, %322
  %574 = sub i32 %573, %18
  %575 = sub i32 %574, %32
  %576 = sub i32 %575, %156
  %577 = sub i32 %576, %226
  %578 = sub i32 %577, %292
  %579 = add i32 %578, %333
  %580 = add i32 %579, %338
  %581 = add i32 %580, %328
  %582 = add i32 %581, %368
  %583 = icmp eq i32 %9, %582
  %584 = select i1 %583, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %585 = tail call i32 @puts(i8* nonnull dereferenceable(1) %584)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
