; ModuleID = '../.././c_source_file/0296_path_condition_crackme.c'
source_filename = "../.././c_source_file/0296_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, %2
  %10 = mul i32 %9, -5
  %11 = and i32 %1, %0
  %12 = or i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = or i32 %11, %13
  %15 = shl i32 %14, 1
  %16 = sub i32 %10, %15
  %17 = and i32 %5, %4
  %18 = xor i32 %17, %3
  %19 = add i32 %16, %18
  %20 = xor i32 %4, %3
  %21 = xor i32 %20, -1
  %22 = xor i32 %5, %4
  %23 = and i32 %22, %21
  %24 = sub i32 %19, %23
  %25 = xor i32 %2, %1
  %26 = xor i32 %25, -1
  %27 = or i32 %7, %0
  %28 = xor i32 %27, -1
  %29 = shl i32 %28, 1
  %30 = or i32 %1, %0
  %31 = and i32 %30, %2
  %32 = xor i32 %2, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %1, %0
  %35 = and i32 %33, %34
  %36 = xor i32 %34, -1
  %37 = xor i32 %2, %0
  %38 = or i32 %37, %36
  %39 = and i32 %27, %2
  %40 = xor i32 %30, %2
  %41 = and i32 %2, %0
  %42 = and i32 %32, %1
  %43 = xor i32 %42, -1
  %44 = xor i32 %41, %43
  %45 = and i32 %32, %0
  %46 = or i32 %45, %1
  %47 = xor i32 %0, -1
  %48 = or i32 %12, %47
  %49 = shl i32 %48, 1
  %50 = and i32 %32, %36
  %51 = and i32 %2, %1
  %52 = and i32 %51, %0
  %53 = xor i32 %12, %0
  %54 = or i32 %52, %53
  %55 = or i32 %41, %36
  %56 = or i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = add i32 %56, 1
  %59 = or i32 %32, %1
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %47
  %62 = xor i32 %8, -1
  %63 = xor i32 %37, -1
  %64 = and i32 %63, %62
  %65 = xor i32 %30, -1
  %66 = xor i32 %65, %2
  %67 = or i32 %63, %28
  %68 = or i32 %57, %7
  %69 = and i32 %32, %62
  %70 = and i32 %7, %2
  %71 = and i32 %70, %0
  %72 = xor i32 %25, %0
  %73 = xor i32 %72, -1
  %74 = xor i32 %71, %73
  %75 = shl i32 %56, 2
  %76 = xor i32 %11, -1
  %77 = and i32 %37, %76
  %78 = and i32 %27, %32
  %79 = and i32 %70, %47
  %80 = or i32 %25, %47
  %81 = xor i32 %80, 2147483647
  %82 = or i32 %81, %79
  %83 = shl i32 %82, 1
  %84 = or i32 %60, %0
  %85 = shl i32 %84, 1
  %86 = or i32 %11, %2
  %87 = or i32 %25, %11
  %88 = xor i32 %33, -1
  %89 = xor i32 %88, %1
  %90 = shl i32 %89, 1
  %91 = xor i32 %51, -1
  %92 = xor i32 %91, %0
  %93 = or i32 %37, %34
  %94 = and i32 %12, %47
  %95 = xor i32 %94, -1
  %96 = xor i32 %52, %95
  %97 = or i32 %41, %7
  %98 = or i32 %91, %47
  %99 = or i32 %25, %28
  %100 = xor i32 %56, %11
  %101 = xor i32 %41, %27
  %102 = xor i32 %12, %11
  %103 = xor i32 %41, -1
  %104 = xor i32 %103, %1
  %105 = and i32 %33, %36
  %106 = or i32 %8, %2
  %107 = xor i32 %52, %72
  %108 = shl i32 %41, 1
  %109 = xor i32 %57, %1
  %110 = or i32 %43, %0
  %111 = shl i32 %110, 1
  %112 = or i32 %8, %26
  %113 = or i32 %7, %2
  %114 = xor i32 %113, %47
  %115 = xor i32 %114, %71
  %116 = and i32 %43, %0
  %117 = xor i32 %27, %2
  %118 = or i32 %45, %34
  %119 = and i32 %30, %63
  %120 = or i32 %88, %7
  %121 = shl i32 %65, 1
  %122 = or i32 %32, %28
  %123 = and i32 %30, %26
  %124 = or i32 %34, %63
  %125 = or i32 %11, %57
  %126 = or i32 %51, %0
  %127 = xor i32 %79, %80
  %128 = or i32 %37, %65
  %129 = or i32 %41, %13
  %130 = and i32 %76, %2
  %131 = or i32 %42, %8
  %132 = shl i32 %131, 1
  %133 = add i32 %11, 1
  %134 = and i32 %63, %36
  %135 = and i32 %30, %32
  %136 = or i32 %57, %36
  %137 = and i32 %27, %26
  %138 = and i32 %27, %63
  %139 = and i32 %63, %7
  %140 = and i32 %34, %103
  %141 = shl i32 %140, 1
  %142 = or i32 %59, %0
  %143 = shl i32 %142, 1
  %144 = xor i32 %8, %91
  %145 = or i32 %26, %0
  %146 = xor i32 %52, %145
  %147 = or i32 %25, %0
  %148 = xor i32 %71, %147
  %149 = and i32 %37, %36
  %150 = or i32 %26, %65
  %151 = xor i32 %41, %30
  %152 = and i32 %37, %62
  %153 = or i32 %52, %73
  %154 = or i32 %63, %36
  %155 = and i32 %25, %0
  %156 = and i32 %51, %47
  %157 = xor i32 %155, -1
  %158 = xor i32 %156, %157
  %159 = xor i32 %76, %2
  %160 = and i32 %25, %76
  %161 = or i32 %156, %155
  %162 = or i32 %11, %32
  %163 = xor i32 %13, %0
  %164 = shl i32 %163, 1
  %165 = or i32 %63, %7
  %166 = xor i32 %45, %91
  %167 = xor i32 %60, %0
  %168 = and i32 %43, %47
  %169 = and i32 %26, %0
  %170 = and i32 %26, %62
  %171 = and i32 %103, %1
  %172 = xor i32 %11, %2
  %173 = or i32 %51, %47
  %174 = and i32 %37, %1
  %175 = or i32 %59, %47
  %176 = xor i32 %8, %43
  %177 = or i32 %37, %28
  %178 = or i32 %91, %0
  %179 = and i32 %56, %36
  %180 = xor i32 %62, %2
  %181 = xor i32 %26, %0
  %182 = or i32 %71, %72
  %183 = or i32 %34, %88
  %184 = shl i32 %183, 1
  %185 = or i32 %45, %7
  %186 = xor i32 %41, %12
  %187 = or i32 %41, %34
  %188 = xor i32 %147, -1
  %189 = or i32 %71, %188
  %190 = xor i32 %45, %7
  %191 = and i32 %25, %62
  %192 = or i32 %41, %65
  %193 = or i32 %8, %63
  %194 = and i32 %34, %2
  %195 = or i32 %34, %2
  %196 = and i32 %13, %47
  %197 = mul i32 %196, -10
  %198 = and i32 %42, %47
  %199 = and i32 %13, %0
  %200 = mul i32 %199, -13
  %201 = and i32 %42, %0
  %202 = and i32 %60, %47
  %203 = mul i32 %156, -9
  %204 = and i32 %60, %0
  %205 = and i32 %5, %3
  %206 = and i32 %205, %4
  %207 = xor i32 %5, %3
  %208 = xor i32 %207, %4
  %209 = xor i32 %206, %208
  %210 = or i32 %5, %3
  %211 = and i32 %210, %4
  %212 = xor i32 %5, -1
  %213 = and i32 %212, %3
  %214 = xor i32 %213, -1
  %215 = xor i32 %17, %214
  %216 = xor i32 %3, -1
  %217 = and i32 %216, %5
  %218 = and i32 %217, %4
  %219 = xor i32 %208, -1
  %220 = xor i32 %218, %219
  %221 = and i32 %216, %4
  %222 = xor i32 %221, -1
  %223 = xor i32 %207, -1
  %224 = and i32 %223, %222
  %225 = or i32 %214, %4
  %226 = xor i32 %4, -1
  %227 = or i32 %212, %3
  %228 = and i32 %227, %226
  %229 = xor i32 %214, %4
  %230 = xor i32 %17, -1
  %231 = xor i32 %230, %3
  %232 = or i32 %216, %4
  %233 = and i32 %207, %232
  %234 = or i32 %5, %4
  %235 = and i32 %234, %216
  %236 = and i32 %212, %222
  %237 = xor i32 %227, -1
  %238 = or i32 %237, %226
  %239 = and i32 %22, %20
  %240 = and i32 %22, %216
  %241 = xor i32 %234, -1
  %242 = or i32 %241, %216
  %243 = or i32 %206, %219
  %244 = or i32 %4, %3
  %245 = xor i32 %244, -1
  %246 = or i32 %207, %245
  %247 = or i32 %20, %212
  %248 = and i32 %223, %226
  %249 = xor i32 %22, -1
  %250 = and i32 %232, %249
  %251 = xor i32 %210, -1
  %252 = or i32 %17, %251
  %253 = and i32 %4, %3
  %254 = xor i32 %234, %253
  %255 = or i32 %223, %226
  %256 = xor i32 %210, %4
  %257 = and i32 %234, %21
  %258 = and i32 %232, %223
  %259 = and i32 %244, %5
  %260 = or i32 %227, %226
  %261 = xor i32 %223, %4
  %262 = shl i32 %261, 2
  %263 = and i32 %207, %222
  %264 = and i32 %249, %21
  %265 = and i32 %234, %20
  %266 = or i32 %17, %20
  %267 = or i32 %210, %226
  %268 = shl i32 %267, 1
  %269 = xor i32 %232, -1
  %270 = or i32 %249, %269
  %271 = or i32 %253, %237
  %272 = or i32 %251, %226
  %273 = xor i32 %253, -1
  %274 = and i32 %223, %273
  %275 = and i32 %20, %212
  %276 = or i32 %269, %5
  %277 = or i32 %212, %4
  %278 = xor i32 %277, -1
  %279 = or i32 %20, %278
  %280 = or i32 %21, %5
  %281 = and i32 %217, %226
  %282 = or i32 %216, %5
  %283 = and i32 %282, %4
  %284 = or i32 %281, %283
  %285 = and i32 %212, %4
  %286 = xor i32 %205, -1
  %287 = xor i32 %285, %286
  %288 = and i32 %277, %20
  %289 = shl i32 %288, 1
  %290 = or i32 %285, %21
  %291 = add i32 %232, 1
  %292 = xor i32 %273, %5
  %293 = or i32 %212, %245
  %294 = shl i32 %293, 2
  %295 = xor i32 %253, %5
  %296 = or i32 %286, %4
  %297 = or i32 %237, %4
  %298 = and i32 %244, %212
  %299 = xor i32 %283, 2147483647
  %300 = xor i32 %299, %281
  %301 = shl i32 %300, 1
  %302 = or i32 %278, %216
  %303 = or i32 %20, %5
  %304 = or i32 %221, %223
  %305 = or i32 %205, %226
  %306 = or i32 %223, %245
  %307 = or i32 %17, %21
  %308 = or i32 %285, %20
  %309 = or i32 %221, %5
  %310 = or i32 %213, %226
  %311 = or i32 %17, %3
  %312 = or i32 %22, %3
  %313 = or i32 %212, %269
  %314 = and i32 %282, %226
  %315 = or i32 %218, %314
  %316 = and i32 %249, %222
  %317 = and i32 %207, %226
  %318 = xor i32 %278, %3
  %319 = and i32 %207, %4
  %320 = xor i32 %277, %253
  %321 = and i32 %205, %226
  %322 = xor i32 %321, 2147483647
  %323 = xor i32 %322, %319
  %324 = shl i32 %323, 1
  %325 = xor i32 %285, -1
  %326 = and i32 %325, %216
  %327 = or i32 %321, %319
  %328 = add i32 %221, 1
  %329 = and i32 %207, %273
  %330 = shl i32 %329, 1
  %331 = xor i32 %241, %3
  %332 = or i32 %213, %221
  %333 = xor i32 %286, %4
  %334 = or i32 %207, %4
  %335 = xor i32 %218, %334
  %336 = xor i32 %277, %3
  %337 = and i32 %234, %3
  %338 = or i32 %22, %21
  %339 = or i32 %213, %4
  %340 = or i32 %253, %223
  %341 = and i32 %210, %226
  %342 = or i32 %206, %341
  %343 = or i32 %223, %269
  %344 = shl i32 %325, 1
  %345 = and i32 %207, %244
  %346 = add i32 %213, 1
  %347 = or i32 %206, %256
  %348 = and i32 %230, %3
  %349 = xor i32 %218, -1
  %350 = xor i32 %314, %349
  %351 = or i32 %22, %221
  %352 = or i32 %249, %21
  %353 = shl i32 %352, 2
  %354 = xor i32 %251, %4
  %355 = or i32 %241, %21
  %356 = or i32 %20, %249
  %357 = and i32 %20, %5
  %358 = shl i32 %357, 1
  %359 = and i32 %273, %5
  %360 = xor i32 %234, %3
  %361 = xor i32 %245, %5
  %362 = or i32 %22, %269
  %363 = xor i32 %325, %3
  %364 = and i32 %230, %216
  %365 = shl i32 %364, 1
  %366 = and i32 %277, %3
  %367 = or i32 %249, %3
  %368 = add i32 %4, 1
  %369 = and i32 %277, %21
  %370 = shl i32 %285, 1
  %371 = shl i32 %21, 1
  %372 = and i32 %214, %226
  %373 = and i32 %214, %4
  %374 = or i32 %285, %237
  %375 = or i32 %207, %221
  %376 = xor i32 %221, %214
  %377 = or i32 %22, %245
  %378 = or i32 %221, %212
  %379 = xor i32 %322, %211
  %380 = or i32 %249, %216
  %381 = xor i32 %334, -1
  %382 = or i32 %218, %381
  %383 = and i32 %249, %3
  %384 = shl i32 %17, 1
  %385 = or i32 %321, %211
  %386 = xor i32 %237, %4
  %387 = or i32 %245, %5
  %388 = xor i32 %282, %226
  %389 = xor i32 %388, %218
  %390 = or i32 %278, %3
  %391 = xor i32 %244, %5
  %392 = and i32 %223, %4
  %393 = or i32 %281, %392
  %394 = or i32 %22, %20
  %395 = and i32 %222, %5
  %396 = xor i32 %221, %5
  %397 = and i32 %212, %273
  %398 = or i32 %286, %226
  %399 = xor i32 %210, %253
  %400 = or i32 %17, %216
  %401 = or i32 %249, %245
  %402 = xor i32 %17, %210
  %403 = or i32 %227, %4
  %404 = shl i32 %403, 1
  %405 = and i32 %20, %325
  %406 = or i32 %17, %269
  %407 = or i32 %253, %251
  %408 = or i32 %251, %4
  %409 = and i32 %286, %226
  %410 = and i32 %22, %3
  %411 = xor i32 %227, %4
  %412 = and i32 %232, %212
  %413 = or i32 %207, %253
  %414 = and i32 %251, %226
  %415 = and i32 %213, %226
  %416 = mul i32 %415, 12
  %417 = and i32 %251, %4
  %418 = shl i32 %417, 1
  %419 = and i32 %213, %4
  %420 = shl i32 %419, 3
  %421 = and i32 %237, %226
  %422 = and i32 %237, %4
  %423 = mul i32 %206, -21
  %424 = add i32 %167, %169
  %425 = sub i32 %424, %137
  %426 = add i32 %425, %120
  %427 = sub i32 %426, %35
  %428 = sub i32 %427, %380
  %429 = add i32 %428, %271
  %430 = add i32 %429, %327
  %431 = add i32 %430, %382
  %432 = mul i32 %431, 3
  %433 = add i32 %201, %368
  %434 = sub i32 %433, %175
  %435 = sub i32 %434, %372
  %436 = add i32 %435, %414
  %437 = add i32 %436, %356
  %438 = sub i32 %437, %308
  %439 = mul i32 %438, 5
  %440 = sub i32 %198, %52
  %441 = sub i32 %440, %422
  %442 = mul i32 %441, 6
  %443 = sub i32 %421, %202
  %444 = mul i32 %443, 11
  %445 = sub i32 -2, %1
  %446 = add i32 %445, %91
  %447 = add i32 %446, %159
  %448 = add i32 %447, %106
  %449 = add i32 %448, %66
  %450 = add i32 %449, %4
  %451 = add i32 %450, %187
  %452 = add i32 %451, %178
  %453 = add i32 %452, %150
  %454 = add i32 %453, %144
  %455 = add i32 %454, %68
  %456 = add i32 %455, %67
  %457 = add i32 %456, %127
  %458 = add i32 %457, %396
  %459 = add i32 %458, %313
  %460 = add i32 %459, %286
  %461 = add i32 %460, %249
  %462 = add i32 %461, %409
  %463 = add i32 %462, %390
  %464 = add i32 %463, %386
  %465 = add i32 %464, %377
  %466 = add i32 %465, %348
  %467 = add i32 %466, %340
  %468 = add i32 %467, %326
  %469 = add i32 %468, %270
  %470 = add i32 %469, %258
  %471 = add i32 %470, %248
  %472 = add i32 %471, %235
  %473 = add i32 %472, %224
  %474 = add i32 %473, %211
  %475 = add i32 %474, %243
  %476 = add i32 %475, %379
  %477 = shl i32 %476, 1
  %478 = sub i32 1, %0
  %479 = add i32 %478, %11
  %480 = sub i32 %479, %8
  %481 = add i32 %480, %133
  %482 = add i32 %481, %2
  %483 = sub i32 %482, %29
  %484 = add i32 %483, %26
  %485 = add i32 %484, %31
  %486 = sub i32 %485, %39
  %487 = sub i32 %486, %40
  %488 = sub i32 %487, %50
  %489 = add i32 %488, %58
  %490 = sub i32 %489, %69
  %491 = sub i32 %490, %78
  %492 = add i32 %491, %86
  %493 = sub i32 %492, %37
  %494 = add i32 %493, %117
  %495 = sub i32 %494, %121
  %496 = add i32 %495, %122
  %497 = sub i32 %496, %45
  %498 = sub i32 %497, %130
  %499 = add i32 %498, %88
  %500 = sub i32 %499, %135
  %501 = sub i32 %500, %51
  %502 = sub i32 %501, %42
  %503 = add i32 %502, %162
  %504 = add i32 %503, %103
  %505 = sub i32 %504, %172
  %506 = add i32 %505, %180
  %507 = add i32 %506, %194
  %508 = add i32 %507, %195
  %509 = add i32 %508, %3
  %510 = add i32 %509, %38
  %511 = add i32 %510, %44
  %512 = sub i32 %511, %46
  %513 = sub i32 %512, %55
  %514 = sub i32 %513, %61
  %515 = add i32 %514, %64
  %516 = add i32 %515, %75
  %517 = sub i32 %516, %77
  %518 = sub i32 %517, %87
  %519 = sub i32 %518, %92
  %520 = add i32 %519, %93
  %521 = sub i32 %520, %97
  %522 = sub i32 %521, %98
  %523 = sub i32 %522, %99
  %524 = add i32 %523, %100
  %525 = add i32 %524, %101
  %526 = sub i32 %525, %94
  %527 = add i32 %526, %102
  %528 = add i32 %527, %104
  %529 = sub i32 %528, %105
  %530 = sub i32 %529, %108
  %531 = add i32 %530, %109
  %532 = sub i32 %531, %112
  %533 = sub i32 %532, %116
  %534 = add i32 %533, %118
  %535 = sub i32 %534, %119
  %536 = sub i32 %535, %123
  %537 = sub i32 %536, %124
  %538 = sub i32 %537, %125
  %539 = sub i32 %538, %126
  %540 = add i32 %539, %128
  %541 = add i32 %540, %129
  %542 = sub i32 %541, %134
  %543 = add i32 %542, %136
  %544 = add i32 %543, %138
  %545 = sub i32 %544, %139
  %546 = sub i32 %545, %149
  %547 = add i32 %546, %151
  %548 = sub i32 %547, %152
  %549 = add i32 %548, %154
  %550 = sub i32 %549, %155
  %551 = sub i32 %550, %160
  %552 = sub i32 %551, %165
  %553 = add i32 %552, %166
  %554 = add i32 %553, %168
  %555 = add i32 %554, %170
  %556 = add i32 %555, %171
  %557 = sub i32 %556, %145
  %558 = sub i32 %557, %173
  %559 = sub i32 %558, %174
  %560 = sub i32 %559, %176
  %561 = add i32 %560, %177
  %562 = add i32 %561, %179
  %563 = sub i32 %562, %181
  %564 = add i32 %563, %185
  %565 = sub i32 %564, %186
  %566 = add i32 %565, %80
  %567 = sub i32 %566, %190
  %568 = add i32 %567, %191
  %569 = add i32 %568, %192
  %570 = add i32 %569, %193
  %571 = add i32 %570, %53
  %572 = sub i32 %571, %204
  %573 = sub i32 %572, %49
  %574 = sub i32 %573, %54
  %575 = sub i32 %574, %74
  %576 = sub i32 %575, %85
  %577 = sub i32 %576, %90
  %578 = add i32 %577, %96
  %579 = sub i32 %578, %107
  %580 = sub i32 %579, %111
  %581 = add i32 %580, %115
  %582 = sub i32 %581, %132
  %583 = sub i32 %582, %141
  %584 = sub i32 %583, %143
  %585 = sub i32 %584, %146
  %586 = add i32 %585, %148
  %587 = sub i32 %586, %153
  %588 = add i32 %587, %158
  %589 = add i32 %588, %161
  %590 = sub i32 %589, %164
  %591 = sub i32 %590, %182
  %592 = sub i32 %591, %184
  %593 = add i32 %592, %189
  %594 = add i32 %593, %197
  %595 = add i32 %594, %200
  %596 = add i32 %595, %203
  %597 = add i32 %596, %5
  %598 = add i32 %597, %253
  %599 = sub i32 %598, %221
  %600 = add i32 %599, %291
  %601 = add i32 %600, %328
  %602 = add i32 %601, %232
  %603 = add i32 %602, %236
  %604 = sub i32 %603, %213
  %605 = sub i32 %604, %247
  %606 = sub i32 %605, %259
  %607 = add i32 %606, %223
  %608 = sub i32 %607, %275
  %609 = add i32 %608, %276
  %610 = sub i32 %609, %280
  %611 = sub i32 %610, %207
  %612 = sub i32 %611, %292
  %613 = sub i32 %612, %295
  %614 = sub i32 %613, %298
  %615 = add i32 %614, %303
  %616 = add i32 %615, %309
  %617 = add i32 %616, %277
  %618 = sub i32 %617, %234
  %619 = add i32 %618, %241
  %620 = add i32 %619, %346
  %621 = add i32 %620, %359
  %622 = add i32 %621, %361
  %623 = sub i32 %622, %371
  %624 = sub i32 %623, %378
  %625 = sub i32 %624, %387
  %626 = sub i32 %625, %391
  %627 = sub i32 %626, %395
  %628 = add i32 %627, %397
  %629 = sub i32 %628, %412
  %630 = sub i32 %629, %83
  %631 = add i32 %630, %215
  %632 = add i32 %631, %225
  %633 = add i32 %632, %228
  %634 = add i32 %633, %229
  %635 = sub i32 %634, %231
  %636 = sub i32 %635, %233
  %637 = sub i32 %636, %238
  %638 = add i32 %637, %239
  %639 = add i32 %638, %240
  %640 = add i32 %639, %242
  %641 = add i32 %640, %246
  %642 = add i32 %641, %250
  %643 = add i32 %642, %252
  %644 = sub i32 %643, %254
  %645 = add i32 %644, %255
  %646 = sub i32 %645, %256
  %647 = sub i32 %646, %257
  %648 = add i32 %647, %260
  %649 = sub i32 %648, %263
  %650 = add i32 %649, %264
  %651 = add i32 %650, %265
  %652 = add i32 %651, %266
  %653 = add i32 %652, %272
  %654 = sub i32 %653, %274
  %655 = sub i32 %654, %279
  %656 = add i32 %655, %287
  %657 = sub i32 %656, %290
  %658 = sub i32 %657, %294
  %659 = sub i32 %658, %296
  %660 = sub i32 %659, %297
  %661 = sub i32 %660, %302
  %662 = add i32 %661, %304
  %663 = sub i32 %662, %305
  %664 = sub i32 %663, %306
  %665 = add i32 %664, %307
  %666 = add i32 %665, %310
  %667 = add i32 %666, %311
  %668 = sub i32 %667, %312
  %669 = sub i32 %668, %316
  %670 = add i32 %669, %317
  %671 = sub i32 %670, %318
  %672 = add i32 %671, %319
  %673 = sub i32 %672, %320
  %674 = sub i32 %673, %331
  %675 = sub i32 %674, %332
  %676 = sub i32 %675, %333
  %677 = sub i32 %676, %336
  %678 = sub i32 %677, %337
  %679 = sub i32 %678, %338
  %680 = add i32 %679, %339
  %681 = sub i32 %680, %343
  %682 = sub i32 %681, %344
  %683 = add i32 %682, %345
  %684 = sub i32 %683, %351
  %685 = sub i32 %684, %354
  %686 = sub i32 %685, %355
  %687 = sub i32 %686, %358
  %688 = add i32 %687, %360
  %689 = sub i32 %688, %362
  %690 = add i32 %689, %363
  %691 = sub i32 %690, %366
  %692 = add i32 %691, %367
  %693 = add i32 %692, %369
  %694 = sub i32 %693, %370
  %695 = add i32 %694, %373
  %696 = add i32 %695, %374
  %697 = add i32 %696, %375
  %698 = add i32 %697, %376
  %699 = add i32 %698, %383
  %700 = sub i32 %699, %384
  %701 = sub i32 %700, %394
  %702 = sub i32 %701, %398
  %703 = add i32 %702, %399
  %704 = sub i32 %703, %400
  %705 = add i32 %704, %401
  %706 = sub i32 %705, %402
  %707 = sub i32 %706, %405
  %708 = add i32 %707, %406
  %709 = add i32 %708, %407
  %710 = sub i32 %709, %408
  %711 = add i32 %710, %410
  %712 = sub i32 %711, %411
  %713 = add i32 %712, %413
  %714 = add i32 %713, %321
  %715 = add i32 %714, %209
  %716 = sub i32 %715, %220
  %717 = sub i32 %716, %262
  %718 = sub i32 %717, %268
  %719 = add i32 %718, %284
  %720 = sub i32 %719, %289
  %721 = add i32 %720, %315
  %722 = sub i32 %721, %330
  %723 = add i32 %722, %335
  %724 = add i32 %723, %342
  %725 = add i32 %724, %347
  %726 = add i32 %725, %350
  %727 = sub i32 %726, %353
  %728 = sub i32 %727, %365
  %729 = add i32 %728, %385
  %730 = add i32 %729, %389
  %731 = add i32 %730, %393
  %732 = sub i32 %731, %404
  %733 = add i32 %732, %416
  %734 = sub i32 %733, %418
  %735 = add i32 %734, %420
  %736 = add i32 %735, %423
  %737 = add i32 %736, %444
  %738 = sub i32 %737, %301
  %739 = sub i32 %738, %324
  %740 = add i32 %739, %442
  %741 = add i32 %740, %439
  %742 = add i32 %741, %432
  %743 = add i32 %742, %477
  %744 = icmp eq i32 %24, %743
  %745 = select i1 %744, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %746 = tail call i32 @puts(i8* nonnull dereferenceable(1) %745)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
