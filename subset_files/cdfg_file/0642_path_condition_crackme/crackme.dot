digraph "DFG for'crackme' function" {
	Node0x1f5cb20[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x1f5cb90[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x1f5d210[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1f5d280[shape=record, label="  %8 = and i32 %7, %3"];
	Node0x1f5d320[shape=record, label="  %9 = add i32 %5, 2"];
	Node0x1f5d390[shape=record, label="  %10 = sub i32 %9, %6"];
	Node0x1f5d400[shape=record, label="  %11 = add i32 %10, %8"];
	Node0x1f5d470[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0x1f5d4e0[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x1f5d580[shape=record, label="  %14 = xor i32 %1, 2147483647"];
	Node0x1f5d5f0[shape=record, label="  %15 = or i32 %13, %1"];
	Node0x1f5d690[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x1f5d700[shape=record, label="  %17 = shl i32 %15, 2"];
	Node0x1f5d7a0[shape=record, label="  %18 = xor i32 %17, -4"];
	Node0x1f5d810[shape=record, label="  %19 = or i32 %7, %3"];
	Node0x1f5d880[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x1f5d8f0[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x1f5d960[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x1f5d9d0[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x1f5da70[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x1f5dae0[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x1f5db50[shape=record, label="  %26 = xor i32 %19, -1"];
	Node0x1f5dbf0[shape=record, label="  %27 = mul i32 %26, -6"];
	Node0x1f5dc60[shape=record, label="  %28 = sub i32 %5, %8"];
	Node0x1f5dd00[shape=record, label="  %29 = mul i32 %28, 3"];
	Node0x1f5dd70[shape=record, label="  %30 = add i32 %12, %14"];
	Node0x1f5dde0[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x1f5de50[shape=record, label="  %32 = add i32 %0, 3"];
	Node0x1f5e0d0[shape=record, label="  %33 = add i32 %32, %3"];
	Node0x1f5e140[shape=record, label="  %34 = sub i32 %33, %16"];
	Node0x1f5e1b0[shape=record, label="  %35 = add i32 %34, %25"];
	Node0x1f5e220[shape=record, label="  %36 = add i32 %35, %6"];
	Node0x1f5e290[shape=record, label="  %37 = sub i32 %36, %18"];
	Node0x1f5e300[shape=record, label="  %38 = add i32 %37, %21"];
	Node0x1f5e370[shape=record, label="  %39 = add i32 %38, %27"];
	Node0x1f5e3e0[shape=record, label="  %40 = sub i32 %39, %23"];
	Node0x1f5e450[shape=record, label="  %41 = add i32 %40, %31"];
	Node0x1f5e4c0[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x1f5e530[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x1f5e5a0[shape=record, label="  %44 = icmp eq i32 %11, %43"];
	Node0x1efd268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f5ea40[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x1f5ea90[shape=record, label="  ret void"];
	Node0x1f5cb20 -> Node0x1f5cb90;
	Node0x1f5cb90 -> Node0x1f5d210;
	Node0x1f5d210 -> Node0x1f5d280;
	Node0x1f5d280 -> Node0x1f5d320;
	Node0x1f5d320 -> Node0x1f5d390;
	Node0x1f5d390 -> Node0x1f5d400;
	Node0x1f5d400 -> Node0x1f5d470;
	Node0x1f5d470 -> Node0x1f5d4e0;
	Node0x1f5d4e0 -> Node0x1f5d580;
	Node0x1f5d580 -> Node0x1f5d5f0;
	Node0x1f5d5f0 -> Node0x1f5d690;
	Node0x1f5d690 -> Node0x1f5d700;
	Node0x1f5d700 -> Node0x1f5d7a0;
	Node0x1f5d7a0 -> Node0x1f5d810;
	Node0x1f5d810 -> Node0x1f5d880;
	Node0x1f5d880 -> Node0x1f5d8f0;
	Node0x1f5d8f0 -> Node0x1f5d960;
	Node0x1f5d960 -> Node0x1f5d9d0;
	Node0x1f5d9d0 -> Node0x1f5da70;
	Node0x1f5da70 -> Node0x1f5dae0;
	Node0x1f5dae0 -> Node0x1f5db50;
	Node0x1f5db50 -> Node0x1f5dbf0;
	Node0x1f5dbf0 -> Node0x1f5dc60;
	Node0x1f5dc60 -> Node0x1f5dd00;
	Node0x1f5dd00 -> Node0x1f5dd70;
	Node0x1f5dd70 -> Node0x1f5dde0;
	Node0x1f5dde0 -> Node0x1f5de50;
	Node0x1f5de50 -> Node0x1f5e0d0;
	Node0x1f5e0d0 -> Node0x1f5e140;
	Node0x1f5e140 -> Node0x1f5e1b0;
	Node0x1f5e1b0 -> Node0x1f5e220;
	Node0x1f5e220 -> Node0x1f5e290;
	Node0x1f5e290 -> Node0x1f5e300;
	Node0x1f5e300 -> Node0x1f5e370;
	Node0x1f5e370 -> Node0x1f5e3e0;
	Node0x1f5e3e0 -> Node0x1f5e450;
	Node0x1f5e450 -> Node0x1f5e4c0;
	Node0x1f5e4c0 -> Node0x1f5e530;
	Node0x1f5e530 -> Node0x1f5e5a0;
	Node0x1f5e5a0 -> Node0x1efd268;
	Node0x1efd268 -> Node0x1f5ea40;
	Node0x1f5ea40 -> Node0x1f5ea90;
edge [color=red]
	Node0x1f5d210 -> Node0x1f5d280;
	Node0x1f5cb20 -> Node0x1f5d320;
	Node0x1f5d320 -> Node0x1f5d390;
	Node0x1f5cb90 -> Node0x1f5d390;
	Node0x1f5d390 -> Node0x1f5d400;
	Node0x1f5d280 -> Node0x1f5d400;
	Node0x1f5d4e0 -> Node0x1f5d5f0;
	Node0x1f5d5f0 -> Node0x1f5d690;
	Node0x1f5d5f0 -> Node0x1f5d700;
	Node0x1f5d700 -> Node0x1f5d7a0;
	Node0x1f5d210 -> Node0x1f5d810;
	Node0x1f5d810 -> Node0x1f5d880;
	Node0x1f5d880 -> Node0x1f5d8f0;
	Node0x1f5d960 -> Node0x1f5d9d0;
	Node0x1f5d9d0 -> Node0x1f5da70;
	Node0x1f5d810 -> Node0x1f5db50;
	Node0x1f5db50 -> Node0x1f5dbf0;
	Node0x1f5cb20 -> Node0x1f5dc60;
	Node0x1f5d280 -> Node0x1f5dc60;
	Node0x1f5dc60 -> Node0x1f5dd00;
	Node0x1f5d470 -> Node0x1f5dd70;
	Node0x1f5d580 -> Node0x1f5dd70;
	Node0x1f5dd70 -> Node0x1f5dde0;
	Node0x1f5de50 -> Node0x1f5e0d0;
	Node0x1f5e0d0 -> Node0x1f5e140;
	Node0x1f5d690 -> Node0x1f5e140;
	Node0x1f5e140 -> Node0x1f5e1b0;
	Node0x1f5dae0 -> Node0x1f5e1b0;
	Node0x1f5e1b0 -> Node0x1f5e220;
	Node0x1f5cb90 -> Node0x1f5e220;
	Node0x1f5e220 -> Node0x1f5e290;
	Node0x1f5d7a0 -> Node0x1f5e290;
	Node0x1f5e290 -> Node0x1f5e300;
	Node0x1f5d8f0 -> Node0x1f5e300;
	Node0x1f5e300 -> Node0x1f5e370;
	Node0x1f5dbf0 -> Node0x1f5e370;
	Node0x1f5e370 -> Node0x1f5e3e0;
	Node0x1f5d9d0 -> Node0x1f5e3e0;
	Node0x1f5e3e0 -> Node0x1f5e450;
	Node0x1f5dde0 -> Node0x1f5e450;
	Node0x1f5e450 -> Node0x1f5e4c0;
	Node0x1f5da70 -> Node0x1f5e4c0;
	Node0x1f5e4c0 -> Node0x1f5e530;
	Node0x1f5dd00 -> Node0x1f5e530;
	Node0x1f5d400 -> Node0x1f5e5a0;
	Node0x1f5e530 -> Node0x1f5e5a0;
	Node0x1f5e5a0 -> Node0x1efd268;
	Node0x1efd268 -> Node0x1f5ea40;
}
