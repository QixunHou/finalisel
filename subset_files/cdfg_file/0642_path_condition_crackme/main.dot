digraph "DFG for'main' function" {
	Node0x1f5ec58[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1f5ecd8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1f5ed68[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1f5edc8[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x1f5ee78[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x1f5f2a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1f5f388[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x1f5f488[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1f5f548[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x1f5f5f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1f5f6b8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x1f5f768[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1f59b50[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x1f5f968[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1f608d8[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1f60f48[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1f60fa8[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x1f61020[shape=record, label="  %14 = and i32 %12, %11"];
	Node0x1f61090[shape=record, label="  %15 = or i32 %13, %10"];
	Node0x1f61100[shape=record, label="  %16 = xor i32 %10, -1"];
	Node0x1f61170[shape=record, label="  %17 = and i32 %13, %16"];
	Node0x1f611e0[shape=record, label="  %18 = add i32 %14, 2"];
	Node0x1f61250[shape=record, label="  %19 = sub i32 %18, %15"];
	Node0x1f612c0[shape=record, label="  %20 = add i32 %19, %17"];
	Node0x1f61330[shape=record, label="  %21 = xor i32 %12, %11"];
	Node0x1f613a0[shape=record, label="  %22 = xor i32 %12, -1"];
	Node0x1f61410[shape=record, label="  %23 = xor i32 %11, 2147483647"];
	Node0x1f61480[shape=record, label="  %24 = or i32 %11, %22"];
	Node0x1f614f0[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1f61560[shape=record, label="  %26 = shl i32 %24, 2"];
	Node0x1f615d0[shape=record, label="  %27 = xor i32 %26, -4"];
	Node0x1f61640[shape=record, label="  %28 = or i32 %13, %16"];
	Node0x1f616b0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x1f61720[shape=record, label="  %30 = xor i32 %29, -1"];
	Node0x1f61790[shape=record, label="  %31 = and i32 %13, %10"];
	Node0x1f61800[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0x1f61870[shape=record, label="  %33 = xor i32 %32, -2"];
	Node0x1f618e0[shape=record, label="  %34 = xor i32 %13, %10"];
	Node0x1f61950[shape=record, label="  %35 = xor i32 %28, -1"];
	Node0x1f619c0[shape=record, label="  %36 = mul i32 %35, -6"];
	Node0x1f61a30[shape=record, label="  %37 = sub i32 %14, %17"];
	Node0x1f61aa0[shape=record, label="  %38 = mul i32 %37, 3"];
	Node0x1f61b10[shape=record, label="  %39 = add i32 %21, %23"];
	Node0x1f61b80[shape=record, label="  %40 = shl i32 %39, 1"];
	Node0x1f61bf0[shape=record, label="  %41 = add i32 %10, 3"];
	Node0x1f61c60[shape=record, label="  %42 = add i32 %41, %13"];
	Node0x1f61cd0[shape=record, label="  %43 = sub i32 %42, %25"];
	Node0x1f61d40[shape=record, label="  %44 = add i32 %43, %34"];
	Node0x1f61db0[shape=record, label="  %45 = add i32 %44, %15"];
	Node0x1f61e20[shape=record, label="  %46 = sub i32 %45, %27"];
	Node0x1f61e90[shape=record, label="  %47 = add i32 %46, %30"];
	Node0x1f61f00[shape=record, label="  %48 = add i32 %47, %36"];
	Node0x1f61f70[shape=record, label="  %49 = sub i32 %48, %32"];
	Node0x1f61fe0[shape=record, label="  %50 = add i32 %49, %40"];
	Node0x1f62050[shape=record, label="  %51 = add i32 %50, %33"];
	Node0x1f620c0[shape=record, label="  %52 = add i32 %51, %38"];
	Node0x1f62130[shape=record, label="  %53 = icmp eq i32 %20, %52"];
	Node0x1efe8b8[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f621c0[shape=record, label="  %55 = call i32 @puts(i8* nonnull dereferenceable(1) %54) #5"];
	Node0x1f62468[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1f625c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1f626d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1f627e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1f628a8[shape=record, label="  ret i32 0"];
	Node0x1f5ec58 -> Node0x1f5ecd8;
	Node0x1f5ecd8 -> Node0x1f5ed68;
	Node0x1f5ed68 -> Node0x1f5edc8;
	Node0x1f5edc8 -> Node0x1f5ee78;
	Node0x1f5ee78 -> Node0x1f5f2a8;
	Node0x1f5f2a8 -> Node0x1f5f388;
	Node0x1f5f388 -> Node0x1f5f488;
	Node0x1f5f488 -> Node0x1f5f548;
	Node0x1f5f548 -> Node0x1f5f5f8;
	Node0x1f5f5f8 -> Node0x1f5f6b8;
	Node0x1f5f6b8 -> Node0x1f5f768;
	Node0x1f5f768 -> Node0x1f59b50;
	Node0x1f59b50 -> Node0x1f5f968;
	Node0x1f5f968 -> Node0x1f608d8;
	Node0x1f608d8 -> Node0x1f60f48;
	Node0x1f60f48 -> Node0x1f60fa8;
	Node0x1f60fa8 -> Node0x1f61020;
	Node0x1f61020 -> Node0x1f61090;
	Node0x1f61090 -> Node0x1f61100;
	Node0x1f61100 -> Node0x1f61170;
	Node0x1f61170 -> Node0x1f611e0;
	Node0x1f611e0 -> Node0x1f61250;
	Node0x1f61250 -> Node0x1f612c0;
	Node0x1f612c0 -> Node0x1f61330;
	Node0x1f61330 -> Node0x1f613a0;
	Node0x1f613a0 -> Node0x1f61410;
	Node0x1f61410 -> Node0x1f61480;
	Node0x1f61480 -> Node0x1f614f0;
	Node0x1f614f0 -> Node0x1f61560;
	Node0x1f61560 -> Node0x1f615d0;
	Node0x1f615d0 -> Node0x1f61640;
	Node0x1f61640 -> Node0x1f616b0;
	Node0x1f616b0 -> Node0x1f61720;
	Node0x1f61720 -> Node0x1f61790;
	Node0x1f61790 -> Node0x1f61800;
	Node0x1f61800 -> Node0x1f61870;
	Node0x1f61870 -> Node0x1f618e0;
	Node0x1f618e0 -> Node0x1f61950;
	Node0x1f61950 -> Node0x1f619c0;
	Node0x1f619c0 -> Node0x1f61a30;
	Node0x1f61a30 -> Node0x1f61aa0;
	Node0x1f61aa0 -> Node0x1f61b10;
	Node0x1f61b10 -> Node0x1f61b80;
	Node0x1f61b80 -> Node0x1f61bf0;
	Node0x1f61bf0 -> Node0x1f61c60;
	Node0x1f61c60 -> Node0x1f61cd0;
	Node0x1f61cd0 -> Node0x1f61d40;
	Node0x1f61d40 -> Node0x1f61db0;
	Node0x1f61db0 -> Node0x1f61e20;
	Node0x1f61e20 -> Node0x1f61e90;
	Node0x1f61e90 -> Node0x1f61f00;
	Node0x1f61f00 -> Node0x1f61f70;
	Node0x1f61f70 -> Node0x1f61fe0;
	Node0x1f61fe0 -> Node0x1f62050;
	Node0x1f62050 -> Node0x1f620c0;
	Node0x1f620c0 -> Node0x1f62130;
	Node0x1f62130 -> Node0x1efe8b8;
	Node0x1efe8b8 -> Node0x1f621c0;
	Node0x1f621c0 -> Node0x1f62468;
	Node0x1f62468 -> Node0x1f625c8;
	Node0x1f625c8 -> Node0x1f626d8;
	Node0x1f626d8 -> Node0x1f627e8;
	Node0x1f627e8 -> Node0x1f628a8;
edge [color=red]
	Node0x1f5ec58 -> Node0x1f5ee78;
	Node0x1f5ee78 -> Node0x1f5f2a8;
	Node0x1f5ecd8 -> Node0x1f5f388;
	Node0x1f5f388 -> Node0x1f5f488;
	Node0x1f5ed68 -> Node0x1f5f548;
	Node0x1f5f548 -> Node0x1f5f5f8;
	Node0x1f5edc8 -> Node0x1f5f6b8;
	Node0x1f5f6b8 -> Node0x1f5f768;
	Node0x1f5ec58 -> Node0x1f59b50;
	Node0x1f5ecd8 -> Node0x1f59b50;
	Node0x1f5ed68 -> Node0x1f59b50;
	Node0x1f5edc8 -> Node0x1f59b50;
	Node0x1f5ec58 -> Node0x1f5f968;
	Node0x1f5ecd8 -> Node0x1f608d8;
	Node0x1f5ed68 -> Node0x1f60f48;
	Node0x1f5edc8 -> Node0x1f60fa8;
	Node0x1f60f48 -> Node0x1f61020;
	Node0x1f608d8 -> Node0x1f61020;
	Node0x1f60fa8 -> Node0x1f61090;
	Node0x1f5f968 -> Node0x1f61090;
	Node0x1f5f968 -> Node0x1f61100;
	Node0x1f60fa8 -> Node0x1f61170;
	Node0x1f61100 -> Node0x1f61170;
	Node0x1f61020 -> Node0x1f611e0;
	Node0x1f611e0 -> Node0x1f61250;
	Node0x1f61090 -> Node0x1f61250;
	Node0x1f61250 -> Node0x1f612c0;
	Node0x1f61170 -> Node0x1f612c0;
	Node0x1f60f48 -> Node0x1f61330;
	Node0x1f608d8 -> Node0x1f61330;
	Node0x1f60f48 -> Node0x1f613a0;
	Node0x1f608d8 -> Node0x1f61410;
	Node0x1f608d8 -> Node0x1f61480;
	Node0x1f613a0 -> Node0x1f61480;
	Node0x1f61480 -> Node0x1f614f0;
	Node0x1f61480 -> Node0x1f61560;
	Node0x1f61560 -> Node0x1f615d0;
	Node0x1f60fa8 -> Node0x1f61640;
	Node0x1f61100 -> Node0x1f61640;
	Node0x1f61640 -> Node0x1f616b0;
	Node0x1f616b0 -> Node0x1f61720;
	Node0x1f60fa8 -> Node0x1f61790;
	Node0x1f5f968 -> Node0x1f61790;
	Node0x1f61790 -> Node0x1f61800;
	Node0x1f61800 -> Node0x1f61870;
	Node0x1f60fa8 -> Node0x1f618e0;
	Node0x1f5f968 -> Node0x1f618e0;
	Node0x1f61640 -> Node0x1f61950;
	Node0x1f61950 -> Node0x1f619c0;
	Node0x1f61020 -> Node0x1f61a30;
	Node0x1f61170 -> Node0x1f61a30;
	Node0x1f61a30 -> Node0x1f61aa0;
	Node0x1f61330 -> Node0x1f61b10;
	Node0x1f61410 -> Node0x1f61b10;
	Node0x1f61b10 -> Node0x1f61b80;
	Node0x1f5f968 -> Node0x1f61bf0;
	Node0x1f61bf0 -> Node0x1f61c60;
	Node0x1f60fa8 -> Node0x1f61c60;
	Node0x1f61c60 -> Node0x1f61cd0;
	Node0x1f614f0 -> Node0x1f61cd0;
	Node0x1f61cd0 -> Node0x1f61d40;
	Node0x1f618e0 -> Node0x1f61d40;
	Node0x1f61d40 -> Node0x1f61db0;
	Node0x1f61090 -> Node0x1f61db0;
	Node0x1f61db0 -> Node0x1f61e20;
	Node0x1f615d0 -> Node0x1f61e20;
	Node0x1f61e20 -> Node0x1f61e90;
	Node0x1f61720 -> Node0x1f61e90;
	Node0x1f61e90 -> Node0x1f61f00;
	Node0x1f619c0 -> Node0x1f61f00;
	Node0x1f61f00 -> Node0x1f61f70;
	Node0x1f61800 -> Node0x1f61f70;
	Node0x1f61f70 -> Node0x1f61fe0;
	Node0x1f61b80 -> Node0x1f61fe0;
	Node0x1f61fe0 -> Node0x1f62050;
	Node0x1f61870 -> Node0x1f62050;
	Node0x1f62050 -> Node0x1f620c0;
	Node0x1f61aa0 -> Node0x1f620c0;
	Node0x1f612c0 -> Node0x1f62130;
	Node0x1f620c0 -> Node0x1f62130;
	Node0x1f62130 -> Node0x1efe8b8;
	Node0x1efe8b8 -> Node0x1f621c0;
	Node0x1f5f6b8 -> Node0x1f62468;
	Node0x1f5f548 -> Node0x1f625c8;
	Node0x1f5f388 -> Node0x1f626d8;
	Node0x1f5ee78 -> Node0x1f627e8;
}
