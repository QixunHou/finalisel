digraph "DFG for'crackme' function" {
	Node0x1c9fb90[shape=record, label="  %3 = sub i32 0, %0"];
	Node0x1c9fc30[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1c9fcf0[shape=record, label="  %5 = mul i32 %4, -5"];
	Node0x1c9fd60[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1c9fdd0[shape=record, label="  %7 = or i32 %4, %0"];
	Node0x1c9fe70[shape=record, label="  %8 = xor i32 %0, 2147483647"];
	Node0x1c9fee0[shape=record, label="  %9 = or i32 %8, %1"];
	Node0x1c9ff80[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1ca0020[shape=record, label="  %11 = shl i32 %6, 2"];
	Node0x1ca00c0[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1ca0130[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x1ca01a0[shape=record, label="  %14 = shl i32 %7, 1"];
	Node0x1ca0240[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1ca02e0[shape=record, label="  %16 = mul i32 %13, -6"];
	Node0x1ca0350[shape=record, label="  %17 = add i32 %1, -2"];
	Node0x1ca03c0[shape=record, label="  %18 = add i32 %17, %6"];
	Node0x1ca0430[shape=record, label="  %19 = add i32 %18, %5"];
	Node0x1ca04a0[shape=record, label="  %20 = add i32 %19, %7"];
	Node0x1ca0510[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0x1ca0580[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x1ca05f0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x1ca0660[shape=record, label="  %24 = add i32 %23, %12"];
	Node0x1ca06d0[shape=record, label="  %25 = sub i32 %24, %15"];
	Node0x1ca0740[shape=record, label="  %26 = icmp eq i32 %25, %3"];
	Node0x1c40268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ca0be0[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1ca0c30[shape=record, label="  ret void"];
	Node0x1c9fb90 -> Node0x1c9fc30;
	Node0x1c9fc30 -> Node0x1c9fcf0;
	Node0x1c9fcf0 -> Node0x1c9fd60;
	Node0x1c9fd60 -> Node0x1c9fdd0;
	Node0x1c9fdd0 -> Node0x1c9fe70;
	Node0x1c9fe70 -> Node0x1c9fee0;
	Node0x1c9fee0 -> Node0x1c9ff80;
	Node0x1c9ff80 -> Node0x1ca0020;
	Node0x1ca0020 -> Node0x1ca00c0;
	Node0x1ca00c0 -> Node0x1ca0130;
	Node0x1ca0130 -> Node0x1ca01a0;
	Node0x1ca01a0 -> Node0x1ca0240;
	Node0x1ca0240 -> Node0x1ca02e0;
	Node0x1ca02e0 -> Node0x1ca0350;
	Node0x1ca0350 -> Node0x1ca03c0;
	Node0x1ca03c0 -> Node0x1ca0430;
	Node0x1ca0430 -> Node0x1ca04a0;
	Node0x1ca04a0 -> Node0x1ca0510;
	Node0x1ca0510 -> Node0x1ca0580;
	Node0x1ca0580 -> Node0x1ca05f0;
	Node0x1ca05f0 -> Node0x1ca0660;
	Node0x1ca0660 -> Node0x1ca06d0;
	Node0x1ca06d0 -> Node0x1ca0740;
	Node0x1ca0740 -> Node0x1c40268;
	Node0x1c40268 -> Node0x1ca0be0;
	Node0x1ca0be0 -> Node0x1ca0c30;
edge [color=red]
	Node0x1c9fc30 -> Node0x1c9fcf0;
	Node0x1c9fc30 -> Node0x1c9fdd0;
	Node0x1c9fe70 -> Node0x1c9fee0;
	Node0x1c9fee0 -> Node0x1c9ff80;
	Node0x1c9fd60 -> Node0x1ca0020;
	Node0x1ca0020 -> Node0x1ca00c0;
	Node0x1c9fdd0 -> Node0x1ca01a0;
	Node0x1ca01a0 -> Node0x1ca0240;
	Node0x1ca0130 -> Node0x1ca02e0;
	Node0x1ca0350 -> Node0x1ca03c0;
	Node0x1c9fd60 -> Node0x1ca03c0;
	Node0x1ca03c0 -> Node0x1ca0430;
	Node0x1c9fcf0 -> Node0x1ca0430;
	Node0x1ca0430 -> Node0x1ca04a0;
	Node0x1c9fdd0 -> Node0x1ca04a0;
	Node0x1ca04a0 -> Node0x1ca0510;
	Node0x1ca0130 -> Node0x1ca0510;
	Node0x1ca0510 -> Node0x1ca0580;
	Node0x1c9ff80 -> Node0x1ca0580;
	Node0x1ca0580 -> Node0x1ca05f0;
	Node0x1ca02e0 -> Node0x1ca05f0;
	Node0x1ca05f0 -> Node0x1ca0660;
	Node0x1ca00c0 -> Node0x1ca0660;
	Node0x1ca0660 -> Node0x1ca06d0;
	Node0x1ca0240 -> Node0x1ca06d0;
	Node0x1ca06d0 -> Node0x1ca0740;
	Node0x1c9fb90 -> Node0x1ca0740;
	Node0x1ca0740 -> Node0x1c40268;
	Node0x1c40268 -> Node0x1ca0be0;
}
