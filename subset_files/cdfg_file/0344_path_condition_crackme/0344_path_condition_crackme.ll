; ModuleID = '../.././c_source_file/0344_path_condition_crackme.c'
source_filename = "../.././c_source_file/0344_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = or i32 %8, %2
  %10 = mul i32 %9, -2
  %11 = and i32 %5, %4
  %12 = or i32 %5, %3
  %13 = xor i32 %11, %12
  %14 = sub i32 %10, %13
  %15 = and i32 %1, %0
  %16 = xor i32 %2, %1
  %17 = xor i32 %16, -1
  %18 = or i32 %15, %17
  %19 = or i32 %2, %0
  %20 = xor i32 %19, %15
  %21 = shl i32 %20, 1
  %22 = and i32 %7, %2
  %23 = and i32 %22, %0
  %24 = or i32 %7, %2
  %25 = xor i32 %24, %0
  %26 = or i32 %23, %25
  %27 = and i32 %2, %0
  %28 = or i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %27, %29
  %31 = xor i32 %27, -1
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %1, %0
  %36 = and i32 %35, %34
  %37 = or i32 %32, %0
  %38 = xor i32 %35, -1
  %39 = and i32 %37, %38
  %40 = and i32 %16, %0
  %41 = xor i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = and i32 %28, %42
  %44 = shl i32 %43, 1
  %45 = xor i32 %0, -1
  %46 = or i32 %32, %1
  %47 = or i32 %46, %45
  %48 = or i32 %2, %1
  %49 = xor i32 %48, -1
  %50 = xor i32 %49, %0
  %51 = and i32 %2, %1
  %52 = and i32 %51, %0
  %53 = xor i32 %16, %45
  %54 = or i32 %52, %53
  %55 = and i32 %22, %45
  %56 = and i32 %24, %0
  %57 = or i32 %55, %56
  %58 = or i32 %17, %0
  %59 = xor i32 %27, %1
  %60 = or i32 %7, %0
  %61 = and i32 %60, %2
  %62 = and i32 %32, %1
  %63 = or i32 %62, %8
  %64 = or i32 %51, %0
  %65 = xor i32 %62, -1
  %66 = or i32 %65, %45
  %67 = and i32 %35, %31
  %68 = xor i32 %28, %2
  %69 = xor i32 %60, %2
  %70 = xor i32 %46, %15
  %71 = xor i32 %62, %0
  %72 = xor i32 %19, -1
  %73 = or i32 %16, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %23, %74
  %76 = or i32 %16, %15
  %77 = and i32 %31, %7
  %78 = xor i32 %60, -1
  %79 = or i32 %16, %78
  %80 = xor i32 %37, -1
  %81 = xor i32 %80, %1
  %82 = xor i32 %46, -1
  %83 = xor i32 %82, %0
  %84 = shl i32 %83, 1
  %85 = or i32 %72, %7
  %86 = or i32 %49, %45
  %87 = and i32 %28, %17
  %88 = shl i32 %1, 1
  %89 = xor i32 %8, -1
  %90 = xor i32 %89, %2
  %91 = and i32 %46, %45
  %92 = and i32 %51, %45
  %93 = and i32 %48, %0
  %94 = xor i32 %93, 2147483647
  %95 = xor i32 %94, %92
  %96 = shl i32 %95, 1
  %97 = or i32 %42, %78
  %98 = xor i32 %15, -1
  %99 = and i32 %16, %98
  %100 = or i32 %82, %0
  %101 = or i32 %17, %78
  %102 = shl i32 %101, 1
  %103 = and i32 %34, %7
  %104 = or i32 %80, %38
  %105 = or i32 %15, %2
  %106 = or i32 %15, %80
  %107 = xor i32 %24, -1
  %108 = or i32 %107, %0
  %109 = xor i32 %23, %108
  %110 = and i32 %32, %38
  %111 = or i32 %16, %29
  %112 = xor i32 %17, %0
  %113 = and i32 %89, %2
  %114 = or i32 %62, %0
  %115 = or i32 %46, %0
  %116 = or i32 %33, %38
  %117 = and i32 %42, %1
  %118 = xor i32 %19, %1
  %119 = or i32 %15, %49
  %120 = and i32 %32, %98
  %121 = xor i32 %15, %2
  %122 = or i32 %15, %32
  %123 = and i32 %41, %60
  %124 = xor i32 %72, %1
  %125 = xor i32 %34, %1
  %126 = and i32 %31, %38
  %127 = xor i32 %48, %0
  %128 = or i32 %41, %1
  %129 = xor i32 %33, %46
  %130 = or i32 %15, %42
  %131 = xor i32 %65, %0
  %132 = and i32 %60, %17
  %133 = xor i32 %27, %28
  %134 = and i32 %60, %32
  %135 = and i32 %19, %7
  %136 = shl i32 %135, 1
  %137 = xor i32 %23, %53
  %138 = or i32 %16, %45
  %139 = xor i32 %138, 2147483647
  %140 = or i32 %139, %55
  %141 = shl i32 %140, 1
  %142 = xor i32 %98, %2
  %143 = xor i32 %27, %65
  %144 = shl i32 %143, 1
  %145 = and i32 %35, %42
  %146 = shl i32 %145, 1
  %147 = and i32 %34, %38
  %148 = shl i32 %147, 1
  %149 = and i32 %17, %89
  %150 = and i32 %46, %0
  %151 = and i32 %28, %32
  %152 = and i32 %41, %28
  %153 = or i32 %32, %29
  %154 = shl i32 %153, 1
  %155 = and i32 %32, %89
  %156 = and i32 %35, %2
  %157 = xor i32 %51, -1
  %158 = and i32 %157, %45
  %159 = and i32 %19, %35
  %160 = shl i32 %159, 2
  %161 = or i32 %27, %7
  %162 = or i32 %157, %45
  %163 = or i32 %35, %80
  %164 = and i32 %41, %98
  %165 = and i32 %16, %60
  %166 = and i32 %98, %2
  %167 = and i32 %49, %45
  %168 = mul i32 %167, -12
  %169 = and i32 %62, %45
  %170 = shl i32 %169, 3
  %171 = and i32 %49, %0
  %172 = shl i32 %171, 2
  %173 = and i32 %62, %0
  %174 = shl i32 %173, 4
  %175 = and i32 %82, %45
  %176 = mul i32 %175, -21
  %177 = mul i32 %92, -7
  %178 = and i32 %82, %0
  %179 = mul i32 %178, -15
  %180 = xor i32 %5, -1
  %181 = and i32 %180, %4
  %182 = xor i32 %181, -1
  %183 = and i32 %182, %3
  %184 = xor i32 %3, -1
  %185 = and i32 %184, %4
  %186 = and i32 %180, %3
  %187 = xor i32 %186, -1
  %188 = xor i32 %185, %187
  %189 = or i32 %184, %4
  %190 = xor i32 %189, %5
  %191 = xor i32 %5, %3
  %192 = xor i32 %191, -1
  %193 = xor i32 %192, %4
  %194 = or i32 %180, %4
  %195 = xor i32 %194, -1
  %196 = add i32 %194, 1
  %197 = xor i32 %11, -1
  %198 = and i32 %197, %184
  %199 = xor i32 %185, -1
  %200 = and i32 %180, %199
  %201 = xor i32 %4, -1
  %202 = and i32 %187, %201
  %203 = or i32 %5, %4
  %204 = xor i32 %203, -1
  %205 = or i32 %204, %184
  %206 = xor i32 %4, %3
  %207 = xor i32 %206, -1
  %208 = xor i32 %5, %4
  %209 = xor i32 %208, -1
  %210 = or i32 %209, %207
  %211 = shl i32 %210, 1
  %212 = and i32 %5, %3
  %213 = and i32 %212, %4
  %214 = and i32 %191, %201
  %215 = or i32 %213, %214
  %216 = and i32 %4, %3
  %217 = xor i32 %12, -1
  %218 = or i32 %216, %217
  %219 = xor i32 %189, -1
  %220 = or i32 %191, %219
  %221 = shl i32 %220, 1
  %222 = or i32 %219, %5
  %223 = xor i32 %191, %4
  %224 = or i32 %208, %206
  %225 = shl i32 %224, 1
  %226 = xor i32 %203, %216
  %227 = shl i32 %226, 1
  %228 = or i32 %191, %201
  %229 = shl i32 %228, 1
  %230 = and i32 %194, %206
  %231 = shl i32 %230, 2
  %232 = or i32 %186, %201
  %233 = add i32 %3, 1
  %234 = xor i32 %212, -1
  %235 = and i32 %184, %5
  %236 = and i32 %235, %4
  %237 = or i32 %191, %4
  %238 = xor i32 %236, %237
  %239 = or i32 %206, %195
  %240 = and i32 %192, %199
  %241 = or i32 %212, %4
  %242 = xor i32 %194, %216
  %243 = and i32 %12, %201
  %244 = or i32 %4, %3
  %245 = and i32 %244, %5
  %246 = or i32 %191, %216
  %247 = or i32 %206, %5
  %248 = or i32 %187, %201
  %249 = xor i32 %12, %216
  %250 = xor i32 %197, %3
  %251 = or i32 %216, %204
  %252 = and i32 %191, %4
  %253 = and i32 %207, %5
  %254 = and i32 %194, %3
  %255 = add i32 %181, 1
  %256 = xor i32 %181, %3
  %257 = xor i32 %244, %5
  %258 = and i32 %180, %207
  %259 = or i32 %180, %3
  %260 = or i32 %259, %4
  %261 = shl i32 %260, 2
  %262 = and i32 %192, %201
  %263 = xor i32 %244, -1
  %264 = xor i32 %263, %5
  %265 = or i32 %209, %184
  %266 = and i32 %189, %5
  %267 = or i32 %12, %201
  %268 = or i32 %180, %219
  %269 = xor i32 %234, %4
  %270 = and i32 %189, %209
  %271 = xor i32 %216, -1
  %272 = and i32 %191, %271
  %273 = or i32 %11, %263
  %274 = shl i32 %273, 1
  %275 = and i32 %203, %184
  %276 = shl i32 %203, 1
  %277 = or i32 %216, %180
  %278 = or i32 %216, %195
  %279 = or i32 %217, %4
  %280 = and i32 %209, %271
  %281 = or i32 %181, %206
  %282 = shl i32 %281, 1
  %283 = or i32 %186, %185
  %284 = xor i32 %259, -1
  %285 = or i32 %284, %4
  %286 = add i32 %191, 1
  %287 = and i32 %209, %207
  %288 = and i32 %235, %201
  %289 = xor i32 %288, %228
  %290 = and i32 %244, %209
  %291 = xor i32 %203, %3
  %292 = and i32 %189, %192
  %293 = xor i32 %185, %5
  %294 = or i32 %216, %5
  %295 = and i32 %192, %271
  %296 = add i32 %189, 1
  %297 = xor i32 %259, %4
  %298 = or i32 %216, %209
  %299 = and i32 %191, %199
  %300 = or i32 %212, %185
  %301 = or i32 %208, %3
  %302 = xor i32 %11, %3
  %303 = or i32 %192, %263
  %304 = and i32 %191, %244
  %305 = or i32 %187, %4
  %306 = or i32 %11, %206
  %307 = shl i32 %306, 1
  %308 = and i32 %194, %184
  %309 = or i32 %184, %5
  %310 = xor i32 %309, %4
  %311 = xor i32 %236, -1
  %312 = xor i32 %310, %311
  %313 = and i32 %212, %201
  %314 = and i32 %12, %4
  %315 = or i32 %313, %314
  %316 = or i32 %212, %201
  %317 = and i32 %271, %5
  %318 = or i32 %209, %219
  %319 = and i32 %203, %3
  %320 = and i32 %187, %4
  %321 = or i32 %217, %201
  %322 = xor i32 %11, %244
  %323 = and i32 %259, %201
  %324 = and i32 %259, %4
  %325 = xor i32 %213, %223
  %326 = and i32 %244, %180
  %327 = or i32 %180, %207
  %328 = xor i32 %284, %4
  %329 = xor i32 %228, -1
  %330 = or i32 %288, %329
  %331 = or i32 %234, %201
  %332 = shl i32 %331, 1
  %333 = and i32 %234, %201
  %334 = and i32 %208, %271
  %335 = and i32 %197, %3
  %336 = xor i32 %187, %4
  %337 = shl i32 %336, 1
  %338 = xor i32 %11, %187
  %339 = shl i32 %338, 1
  %340 = or i32 %181, %284
  %341 = shl i32 %340, 1
  %342 = or i32 %204, %3
  %343 = and i32 %206, %180
  %344 = xor i32 %194, %3
  %345 = or i32 %263, %5
  %346 = or i32 %208, %263
  %347 = and i32 %208, %189
  %348 = or i32 %206, %204
  %349 = and i32 %206, %209
  %350 = xor i32 %11, %189
  %351 = shl i32 %206, 1
  %352 = and i32 %203, %206
  %353 = xor i32 %12, %4
  %354 = or i32 %213, %353
  %355 = and i32 %309, %201
  %356 = xor i32 %355, %311
  %357 = or i32 %12, %4
  %358 = shl i32 %357, 1
  %359 = or i32 %208, %219
  %360 = and i32 %182, %184
  %361 = or i32 %313, %252
  %362 = and i32 %206, %197
  %363 = shl i32 %362, 1
  %364 = or i32 %236, %223
  %365 = shl i32 %364, 1
  %366 = and i32 %208, %244
  %367 = xor i32 %212, %4
  %368 = shl i32 %367, 1
  %369 = or i32 %11, %219
  %370 = or i32 %195, %184
  %371 = and i32 %208, %3
  %372 = or i32 %208, %185
  %373 = xor i32 %185, %234
  %374 = xor i32 %219, %5
  %375 = and i32 %191, %189
  %376 = shl i32 %263, 1
  %377 = and i32 %208, %199
  %378 = or i32 %181, %212
  %379 = or i32 %204, %207
  %380 = xor i32 %271, %5
  %381 = shl i32 %380, 1
  %382 = or i32 %208, %207
  %383 = and i32 %180, %271
  %384 = and i32 %244, %192
  %385 = or i32 %234, %4
  %386 = shl i32 %385, 1
  %387 = or i32 %236, %310
  %388 = add i32 %186, 1
  %389 = and i32 %209, %3
  %390 = xor i32 %186, %4
  %391 = or i32 %236, %355
  %392 = xor i32 %199, %5
  %393 = shl i32 %392, 1
  %394 = xor i32 %216, %5
  %395 = and i32 %309, %4
  %396 = xor i32 %395, -1
  %397 = xor i32 %288, %396
  %398 = or i32 %216, %284
  %399 = or i32 %216, %192
  %400 = xor i32 %243, 2147483647
  %401 = xor i32 %400, %213
  %402 = shl i32 %401, 1
  %403 = or i32 %185, %192
  %404 = and i32 %197, %207
  %405 = or i32 %191, %185
  %406 = or i32 %11, %3
  %407 = and i32 %194, %207
  %408 = or i32 %195, %3
  %409 = and i32 %209, %184
  %410 = or i32 %186, %4
  %411 = shl i32 %410, 1
  %412 = and i32 %203, %207
  %413 = or i32 %181, %207
  %414 = xor i32 %182, %3
  %415 = shl i32 %414, 1
  %416 = and i32 %208, %184
  %417 = or i32 %288, %395
  %418 = xor i32 %181, %234
  %419 = or i32 %192, %201
  %420 = xor i32 %314, -1
  %421 = xor i32 %313, %420
  %422 = xor i32 %259, %216
  %423 = shl i32 %422, 1
  %424 = or i32 %195, %207
  %425 = shl i32 %424, 1
  %426 = and i32 %208, %206
  %427 = and i32 %199, %5
  %428 = shl i32 %427, 2
  %429 = or i32 %185, %180
  %430 = and i32 %206, %182
  %431 = and i32 %209, %199
  %432 = xor i32 %223, %311
  %433 = and i32 %234, %4
  %434 = or i32 %11, %207
  %435 = or i32 %181, %3
  %436 = xor i32 %204, %3
  %437 = xor i32 %237, 2147483647
  %438 = or i32 %437, %236
  %439 = or i32 %11, %184
  %440 = or i32 %185, %209
  %441 = shl i32 %440, 1
  %442 = or i32 %180, %263
  %443 = xor i32 %181, %259
  %444 = or i32 %208, %184
  %445 = or i32 %181, %184
  %446 = and i32 %217, %201
  %447 = and i32 %186, %201
  %448 = mul i32 %447, 22
  %449 = and i32 %217, %4
  %450 = mul i32 %449, 19
  %451 = and i32 %186, %4
  %452 = mul i32 %451, 14
  %453 = and i32 %284, %201
  %454 = shl i32 %313, 4
  %455 = and i32 %284, %4
  %456 = mul i32 %455, 31
  %457 = mul i32 %213, 24
  %458 = add i32 %130, %138
  %459 = add i32 %458, %118
  %460 = add i32 %459, %79
  %461 = add i32 %460, %77
  %462 = add i32 %461, %70
  %463 = add i32 %462, %47
  %464 = add i32 %463, %442
  %465 = add i32 %464, %186
  %466 = add i32 %465, %257
  %467 = add i32 %466, %200
  %468 = add i32 %467, %314
  %469 = add i32 %468, %399
  %470 = add i32 %469, %389
  %471 = add i32 %470, %382
  %472 = add i32 %471, %378
  %473 = add i32 %472, %370
  %474 = add i32 %473, %366
  %475 = add i32 %474, %360
  %476 = add i32 %475, %302
  %477 = add i32 %476, %300
  %478 = add i32 %477, %285
  %479 = add i32 %478, %272
  %480 = add i32 %479, %354
  %481 = add i32 %480, %289
  %482 = add i32 %481, %438
  %483 = shl i32 %482, 1
  %484 = add i32 %61, %82
  %485 = add i32 %484, %100
  %486 = sub i32 %485, %379
  %487 = add i32 %486, %406
  %488 = sub i32 %487, %333
  %489 = add i32 %488, %291
  %490 = sub i32 %489, %242
  %491 = sub i32 %490, %188
  %492 = mul i32 %491, 5
  %493 = add i32 %208, %122
  %494 = sub i32 %493, %247
  %495 = add i32 %494, %245
  %496 = add i32 %495, %251
  %497 = sub i32 %496, %404
  %498 = mul i32 %497, 3
  %499 = add i32 %453, %446
  %500 = mul i32 %499, 28
  %501 = add i32 %115, 1073741823
  %502 = add i32 %501, %342
  %503 = shl i32 %502, 2
  %504 = sub i32 1, %28
  %505 = sub i32 %504, %88
  %506 = add i32 %505, %8
  %507 = sub i32 %506, %15
  %508 = add i32 %507, %31
  %509 = add i32 %508, %33
  %510 = add i32 %509, %68
  %511 = sub i32 %510, %69
  %512 = add i32 %511, %72
  %513 = add i32 %512, %80
  %514 = add i32 %513, %90
  %515 = add i32 %514, %41
  %516 = add i32 %515, %105
  %517 = add i32 %516, %110
  %518 = add i32 %517, %113
  %519 = add i32 %518, %120
  %520 = add i32 %519, %121
  %521 = sub i32 %520, %134
  %522 = sub i32 %521, %142
  %523 = add i32 %522, %17
  %524 = add i32 %523, %151
  %525 = add i32 %524, %155
  %526 = sub i32 %525, %156
  %527 = sub i32 %526, %166
  %528 = add i32 %527, %233
  %529 = add i32 %528, %18
  %530 = sub i32 %529, %30
  %531 = sub i32 %530, %36
  %532 = sub i32 %531, %39
  %533 = add i32 %532, %40
  %534 = sub i32 %533, %50
  %535 = add i32 %534, %58
  %536 = sub i32 %535, %59
  %537 = sub i32 %536, %63
  %538 = sub i32 %537, %64
  %539 = add i32 %538, %66
  %540 = add i32 %539, %67
  %541 = sub i32 %540, %71
  %542 = sub i32 %541, %76
  %543 = sub i32 %542, %81
  %544 = add i32 %543, %85
  %545 = add i32 %544, %86
  %546 = add i32 %545, %87
  %547 = add i32 %546, %91
  %548 = sub i32 %547, %97
  %549 = sub i32 %548, %99
  %550 = add i32 %549, %103
  %551 = add i32 %550, %104
  %552 = add i32 %551, %106
  %553 = add i32 %552, %111
  %554 = sub i32 %553, %112
  %555 = sub i32 %554, %114
  %556 = sub i32 %555, %116
  %557 = sub i32 %556, %117
  %558 = sub i32 %557, %119
  %559 = add i32 %558, %123
  %560 = sub i32 %559, %124
  %561 = add i32 %560, %125
  %562 = add i32 %561, %126
  %563 = sub i32 %562, %127
  %564 = sub i32 %563, %128
  %565 = sub i32 %564, %129
  %566 = sub i32 %565, %131
  %567 = sub i32 %566, %132
  %568 = add i32 %567, %133
  %569 = add i32 %568, %73
  %570 = add i32 %569, %149
  %571 = sub i32 %570, %150
  %572 = add i32 %571, %152
  %573 = sub i32 %572, %154
  %574 = add i32 %573, %158
  %575 = sub i32 %574, %161
  %576 = sub i32 %575, %162
  %577 = add i32 %576, %163
  %578 = sub i32 %577, %164
  %579 = add i32 %578, %165
  %580 = add i32 %579, %52
  %581 = add i32 %580, %201
  %582 = sub i32 %581, %21
  %583 = add i32 %582, %26
  %584 = sub i32 %583, %44
  %585 = sub i32 %584, %54
  %586 = sub i32 %585, %57
  %587 = add i32 %586, %75
  %588 = sub i32 %587, %84
  %589 = sub i32 %588, %102
  %590 = sub i32 %589, %109
  %591 = sub i32 %590, %136
  %592 = sub i32 %591, %137
  %593 = sub i32 %592, %144
  %594 = sub i32 %593, %146
  %595 = sub i32 %594, %148
  %596 = sub i32 %595, %160
  %597 = add i32 %596, %168
  %598 = sub i32 %597, %170
  %599 = sub i32 %598, %172
  %600 = sub i32 %599, %174
  %601 = add i32 %600, %176
  %602 = add i32 %601, %177
  %603 = add i32 %602, %179
  %604 = add i32 %603, %189
  %605 = add i32 %604, %271
  %606 = add i32 %605, %296
  %607 = sub i32 %606, %216
  %608 = sub i32 %607, %244
  %609 = sub i32 %608, %190
  %610 = add i32 %609, %196
  %611 = add i32 %610, %12
  %612 = add i32 %611, %222
  %613 = add i32 %612, %234
  %614 = add i32 %613, %253
  %615 = add i32 %614, %255
  %616 = add i32 %615, %258
  %617 = sub i32 %616, %264
  %618 = add i32 %617, %266
  %619 = add i32 %618, %268
  %620 = add i32 %619, %277
  %621 = add i32 %620, %286
  %622 = add i32 %621, %293
  %623 = sub i32 %622, %294
  %624 = add i32 %623, %204
  %625 = sub i32 %624, %212
  %626 = sub i32 %625, %317
  %627 = add i32 %626, %326
  %628 = add i32 %627, %327
  %629 = sub i32 %628, %343
  %630 = add i32 %629, %345
  %631 = sub i32 %630, %351
  %632 = sub i32 %631, %374
  %633 = sub i32 %632, %376
  %634 = add i32 %633, %383
  %635 = add i32 %634, %388
  %636 = sub i32 %635, %394
  %637 = add i32 %636, %429
  %638 = sub i32 %637, %194
  %639 = sub i32 %638, %181
  %640 = sub i32 %639, %96
  %641 = sub i32 %640, %141
  %642 = sub i32 %641, %183
  %643 = add i32 %642, %193
  %644 = sub i32 %643, %198
  %645 = sub i32 %644, %202
  %646 = add i32 %645, %205
  %647 = sub i32 %646, %218
  %648 = add i32 %647, %223
  %649 = add i32 %648, %232
  %650 = add i32 %649, %239
  %651 = sub i32 %650, %240
  %652 = sub i32 %651, %241
  %653 = add i32 %652, %243
  %654 = sub i32 %653, %246
  %655 = sub i32 %654, %248
  %656 = add i32 %655, %249
  %657 = add i32 %656, %250
  %658 = add i32 %657, %252
  %659 = sub i32 %658, %254
  %660 = sub i32 %659, %256
  %661 = sub i32 %660, %262
  %662 = sub i32 %661, %265
  %663 = sub i32 %662, %267
  %664 = sub i32 %663, %269
  %665 = add i32 %664, %270
  %666 = sub i32 %665, %275
  %667 = sub i32 %666, %276
  %668 = sub i32 %667, %278
  %669 = sub i32 %668, %279
  %670 = add i32 %669, %280
  %671 = sub i32 %670, %283
  %672 = sub i32 %671, %287
  %673 = add i32 %672, %290
  %674 = add i32 %673, %292
  %675 = sub i32 %674, %295
  %676 = add i32 %675, %297
  %677 = sub i32 %676, %298
  %678 = sub i32 %677, %299
  %679 = sub i32 %678, %301
  %680 = add i32 %679, %303
  %681 = sub i32 %680, %304
  %682 = sub i32 %681, %305
  %683 = add i32 %682, %308
  %684 = sub i32 %683, %316
  %685 = sub i32 %684, %318
  %686 = sub i32 %685, %319
  %687 = add i32 %686, %320
  %688 = add i32 %687, %321
  %689 = sub i32 %688, %322
  %690 = sub i32 %689, %323
  %691 = add i32 %690, %324
  %692 = add i32 %691, %328
  %693 = add i32 %692, %334
  %694 = sub i32 %693, %335
  %695 = add i32 %694, %344
  %696 = add i32 %695, %346
  %697 = sub i32 %696, %347
  %698 = add i32 %697, %348
  %699 = sub i32 %698, %349
  %700 = sub i32 %699, %350
  %701 = add i32 %700, %352
  %702 = add i32 %701, %359
  %703 = sub i32 %702, %369
  %704 = add i32 %703, %371
  %705 = add i32 %704, %372
  %706 = add i32 %705, %373
  %707 = add i32 %706, %375
  %708 = add i32 %707, %353
  %709 = sub i32 %708, %214
  %710 = add i32 %709, %377
  %711 = sub i32 %710, %381
  %712 = add i32 %711, %384
  %713 = sub i32 %712, %390
  %714 = sub i32 %713, %393
  %715 = sub i32 %714, %398
  %716 = sub i32 %715, %403
  %717 = sub i32 %716, %405
  %718 = add i32 %717, %407
  %719 = sub i32 %718, %408
  %720 = sub i32 %719, %409
  %721 = sub i32 %720, %412
  %722 = sub i32 %721, %413
  %723 = add i32 %722, %416
  %724 = sub i32 %723, %418
  %725 = sub i32 %724, %419
  %726 = sub i32 %725, %426
  %727 = sub i32 %726, %428
  %728 = add i32 %727, %430
  %729 = add i32 %728, %431
  %730 = sub i32 %729, %433
  %731 = sub i32 %730, %434
  %732 = sub i32 %731, %435
  %733 = add i32 %732, %436
  %734 = add i32 %733, %439
  %735 = sub i32 %734, %237
  %736 = add i32 %735, %443
  %737 = add i32 %736, %444
  %738 = add i32 %737, %445
  %739 = sub i32 %738, %211
  %740 = add i32 %739, %215
  %741 = sub i32 %740, %221
  %742 = sub i32 %741, %225
  %743 = sub i32 %742, %227
  %744 = sub i32 %743, %229
  %745 = sub i32 %744, %231
  %746 = add i32 %745, %238
  %747 = sub i32 %746, %261
  %748 = sub i32 %747, %274
  %749 = sub i32 %748, %282
  %750 = sub i32 %749, %307
  %751 = add i32 %750, %312
  %752 = add i32 %751, %315
  %753 = add i32 %752, %325
  %754 = add i32 %753, %330
  %755 = sub i32 %754, %332
  %756 = sub i32 %755, %337
  %757 = sub i32 %756, %339
  %758 = sub i32 %757, %341
  %759 = sub i32 %758, %356
  %760 = sub i32 %759, %358
  %761 = sub i32 %760, %361
  %762 = sub i32 %761, %363
  %763 = sub i32 %762, %368
  %764 = sub i32 %763, %386
  %765 = sub i32 %764, %387
  %766 = add i32 %765, %391
  %767 = add i32 %766, %397
  %768 = sub i32 %767, %411
  %769 = sub i32 %768, %415
  %770 = sub i32 %769, %417
  %771 = add i32 %770, %421
  %772 = sub i32 %771, %423
  %773 = sub i32 %772, %425
  %774 = sub i32 %773, %432
  %775 = sub i32 %774, %441
  %776 = add i32 %775, %448
  %777 = add i32 %776, %450
  %778 = add i32 %777, %452
  %779 = add i32 %778, %454
  %780 = add i32 %779, %456
  %781 = add i32 %780, %457
  %782 = sub i32 %781, %365
  %783 = add i32 %782, %500
  %784 = sub i32 %783, %402
  %785 = add i32 %784, %503
  %786 = add i32 %785, %498
  %787 = add i32 %786, %492
  %788 = add i32 %787, %483
  %789 = icmp eq i32 %14, %788
  %790 = select i1 %789, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %791 = tail call i32 @puts(i8* nonnull dereferenceable(1) %790)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
