digraph "DFG for'crackme' function" {
	Node0x209bb50[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x209bbc0[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x209bc30[shape=record, label="  %7 = sub i32 %6, %5"];
	Node0x209bca0[shape=record, label="  %8 = and i32 %2, %1"];
	Node0x209c320[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x209c390[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x209c400[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x209c470[shape=record, label="  %12 = and i32 %10, %1"];
	Node0x209c4e0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x209c550[shape=record, label="  %14 = xor i32 %5, -1"];
	Node0x209c5c0[shape=record, label="  %15 = xor i32 %1, -1"];
	Node0x209c630[shape=record, label="  %16 = and i32 %15, %2"];
	Node0x209c6d0[shape=record, label="  %17 = xor i32 %0, 2147483647"];
	Node0x209c740[shape=record, label="  %18 = and i32 %17, %3"];
	Node0x209c7e0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x209c880[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x209c8f0[shape=record, label="  %21 = shl i32 %3, 1"];
	Node0x209c960[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x209c9d0[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x209ca40[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x209cab0[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x209cb20[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x209cbc0[shape=record, label="  %27 = xor i32 %3, 1073741823"];
	Node0x209cc30[shape=record, label="  %28 = and i32 %27, %0"];
	Node0x209ccd0[shape=record, label="  %29 = shl i32 %28, 2"];
	Node0x209cd70[shape=record, label="  %30 = mul i32 %3, -3"];
	Node0x209ce10[shape=record, label="  %31 = add i32 %1, 4"];
	Node0x209ce80[shape=record, label="  %32 = add i32 %31, %9"];
	Node0x209d100[shape=record, label="  %33 = add i32 %32, %11"];
	Node0x209d170[shape=record, label="  %34 = add i32 %33, %13"];
	Node0x209d1e0[shape=record, label="  %35 = add i32 %34, %14"];
	Node0x209d250[shape=record, label="  %36 = sub i32 %35, %16"];
	Node0x209d2c0[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0x209d330[shape=record, label="  %38 = add i32 %37, %23"];
	Node0x209d3a0[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x209d410[shape=record, label="  %40 = add i32 %39, %22"];
	Node0x209d480[shape=record, label="  %41 = add i32 %40, %24"];
	Node0x209d4f0[shape=record, label="  %42 = add i32 %41, %20"];
	Node0x209d560[shape=record, label="  %43 = sub i32 %42, %26"];
	Node0x209d5d0[shape=record, label="  %44 = sub i32 %43, %29"];
	Node0x209d640[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x209d6b0[shape=record, label="  %46 = icmp eq i32 %7, %45"];
	Node0x203c268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x209db50[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x209dba0[shape=record, label="  ret void"];
	Node0x209bb50 -> Node0x209bbc0;
	Node0x209bbc0 -> Node0x209bc30;
	Node0x209bc30 -> Node0x209bca0;
	Node0x209bca0 -> Node0x209c320;
	Node0x209c320 -> Node0x209c390;
	Node0x209c390 -> Node0x209c400;
	Node0x209c400 -> Node0x209c470;
	Node0x209c470 -> Node0x209c4e0;
	Node0x209c4e0 -> Node0x209c550;
	Node0x209c550 -> Node0x209c5c0;
	Node0x209c5c0 -> Node0x209c630;
	Node0x209c630 -> Node0x209c6d0;
	Node0x209c6d0 -> Node0x209c740;
	Node0x209c740 -> Node0x209c7e0;
	Node0x209c7e0 -> Node0x209c880;
	Node0x209c880 -> Node0x209c8f0;
	Node0x209c8f0 -> Node0x209c960;
	Node0x209c960 -> Node0x209c9d0;
	Node0x209c9d0 -> Node0x209ca40;
	Node0x209ca40 -> Node0x209cab0;
	Node0x209cab0 -> Node0x209cb20;
	Node0x209cb20 -> Node0x209cbc0;
	Node0x209cbc0 -> Node0x209cc30;
	Node0x209cc30 -> Node0x209ccd0;
	Node0x209ccd0 -> Node0x209cd70;
	Node0x209cd70 -> Node0x209ce10;
	Node0x209ce10 -> Node0x209ce80;
	Node0x209ce80 -> Node0x209d100;
	Node0x209d100 -> Node0x209d170;
	Node0x209d170 -> Node0x209d1e0;
	Node0x209d1e0 -> Node0x209d250;
	Node0x209d250 -> Node0x209d2c0;
	Node0x209d2c0 -> Node0x209d330;
	Node0x209d330 -> Node0x209d3a0;
	Node0x209d3a0 -> Node0x209d410;
	Node0x209d410 -> Node0x209d480;
	Node0x209d480 -> Node0x209d4f0;
	Node0x209d4f0 -> Node0x209d560;
	Node0x209d560 -> Node0x209d5d0;
	Node0x209d5d0 -> Node0x209d640;
	Node0x209d640 -> Node0x209d6b0;
	Node0x209d6b0 -> Node0x203c268;
	Node0x203c268 -> Node0x209db50;
	Node0x209db50 -> Node0x209dba0;
edge [color=red]
	Node0x209bbc0 -> Node0x209bc30;
	Node0x209bb50 -> Node0x209bc30;
	Node0x209bca0 -> Node0x209c320;
	Node0x209c390 -> Node0x209c470;
	Node0x209c470 -> Node0x209c4e0;
	Node0x209bb50 -> Node0x209c550;
	Node0x209c5c0 -> Node0x209c630;
	Node0x209c6d0 -> Node0x209c740;
	Node0x209c740 -> Node0x209c7e0;
	Node0x209c7e0 -> Node0x209c880;
	Node0x209ca40 -> Node0x209cab0;
	Node0x209cab0 -> Node0x209cb20;
	Node0x209cbc0 -> Node0x209cc30;
	Node0x209cc30 -> Node0x209ccd0;
	Node0x209ce10 -> Node0x209ce80;
	Node0x209c320 -> Node0x209ce80;
	Node0x209ce80 -> Node0x209d100;
	Node0x209c400 -> Node0x209d100;
	Node0x209d100 -> Node0x209d170;
	Node0x209c4e0 -> Node0x209d170;
	Node0x209d170 -> Node0x209d1e0;
	Node0x209c550 -> Node0x209d1e0;
	Node0x209d1e0 -> Node0x209d250;
	Node0x209c630 -> Node0x209d250;
	Node0x209d250 -> Node0x209d2c0;
	Node0x209c470 -> Node0x209d2c0;
	Node0x209d2c0 -> Node0x209d330;
	Node0x209c9d0 -> Node0x209d330;
	Node0x209d330 -> Node0x209d3a0;
	Node0x209c8f0 -> Node0x209d3a0;
	Node0x209d3a0 -> Node0x209d410;
	Node0x209c960 -> Node0x209d410;
	Node0x209d410 -> Node0x209d480;
	Node0x209ca40 -> Node0x209d480;
	Node0x209d480 -> Node0x209d4f0;
	Node0x209c880 -> Node0x209d4f0;
	Node0x209d4f0 -> Node0x209d560;
	Node0x209cb20 -> Node0x209d560;
	Node0x209d560 -> Node0x209d5d0;
	Node0x209ccd0 -> Node0x209d5d0;
	Node0x209d5d0 -> Node0x209d640;
	Node0x209cd70 -> Node0x209d640;
	Node0x209bc30 -> Node0x209d6b0;
	Node0x209d640 -> Node0x209d6b0;
	Node0x209d6b0 -> Node0x203c268;
	Node0x203c268 -> Node0x209db50;
}
