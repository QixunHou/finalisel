digraph "DFG for'crackme' function" {
	Node0x24e5540[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x24e5bf0[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x24e5cb0[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0x24e5d50[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x24e5dc0[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x24e5e30[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x24e5ea0[shape=record, label="  %9 = or i32 %6, %0"];
	Node0x24e5f10[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x24e5f80[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x24e5ff0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x24e6060[shape=record, label="  %13 = xor i32 %9, -1"];
	Node0x24e6100[shape=record, label="  %14 = shl i32 %3, 2"];
	Node0x24e6170[shape=record, label="  %15 = add i32 %13, %12"];
	Node0x24e6210[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x24e6280[shape=record, label="  %17 = add i32 %7, %6"];
	Node0x24e62f0[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x24e6360[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x24e63d0[shape=record, label="  %20 = sub i32 3, %1"];
	Node0x24e6440[shape=record, label="  %21 = add i32 %20, %8"];
	Node0x24e64b0[shape=record, label="  %22 = sub i32 %21, %9"];
	Node0x24e6520[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x24e6590[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x24e6600[shape=record, label="  %25 = add i32 %24, %19"];
	Node0x24e6670[shape=record, label="  %26 = icmp eq i32 %5, %25"];
	Node0x2486268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24e6b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x24e6b60[shape=record, label="  ret void"];
	Node0x24e5540 -> Node0x24e5bf0;
	Node0x24e5bf0 -> Node0x24e5cb0;
	Node0x24e5cb0 -> Node0x24e5d50;
	Node0x24e5d50 -> Node0x24e5dc0;
	Node0x24e5dc0 -> Node0x24e5e30;
	Node0x24e5e30 -> Node0x24e5ea0;
	Node0x24e5ea0 -> Node0x24e5f10;
	Node0x24e5f10 -> Node0x24e5f80;
	Node0x24e5f80 -> Node0x24e5ff0;
	Node0x24e5ff0 -> Node0x24e6060;
	Node0x24e6060 -> Node0x24e6100;
	Node0x24e6100 -> Node0x24e6170;
	Node0x24e6170 -> Node0x24e6210;
	Node0x24e6210 -> Node0x24e6280;
	Node0x24e6280 -> Node0x24e62f0;
	Node0x24e62f0 -> Node0x24e6360;
	Node0x24e6360 -> Node0x24e63d0;
	Node0x24e63d0 -> Node0x24e6440;
	Node0x24e6440 -> Node0x24e64b0;
	Node0x24e64b0 -> Node0x24e6520;
	Node0x24e6520 -> Node0x24e6590;
	Node0x24e6590 -> Node0x24e6600;
	Node0x24e6600 -> Node0x24e6670;
	Node0x24e6670 -> Node0x2486268;
	Node0x2486268 -> Node0x24e6b10;
	Node0x24e6b10 -> Node0x24e6b60;
edge [color=red]
	Node0x24e5540 -> Node0x24e5bf0;
	Node0x24e5bf0 -> Node0x24e5cb0;
	Node0x24e5d50 -> Node0x24e5dc0;
	Node0x24e5dc0 -> Node0x24e5e30;
	Node0x24e5d50 -> Node0x24e5ea0;
	Node0x24e5f80 -> Node0x24e5ff0;
	Node0x24e5ea0 -> Node0x24e6060;
	Node0x24e5540 -> Node0x24e6100;
	Node0x24e6060 -> Node0x24e6170;
	Node0x24e5ff0 -> Node0x24e6170;
	Node0x24e6170 -> Node0x24e6210;
	Node0x24e5dc0 -> Node0x24e6280;
	Node0x24e5d50 -> Node0x24e6280;
	Node0x24e6280 -> Node0x24e62f0;
	Node0x24e5f10 -> Node0x24e62f0;
	Node0x24e62f0 -> Node0x24e6360;
	Node0x24e63d0 -> Node0x24e6440;
	Node0x24e5e30 -> Node0x24e6440;
	Node0x24e6440 -> Node0x24e64b0;
	Node0x24e5ea0 -> Node0x24e64b0;
	Node0x24e64b0 -> Node0x24e6520;
	Node0x24e6100 -> Node0x24e6520;
	Node0x24e6520 -> Node0x24e6590;
	Node0x24e6210 -> Node0x24e6590;
	Node0x24e6590 -> Node0x24e6600;
	Node0x24e6360 -> Node0x24e6600;
	Node0x24e5cb0 -> Node0x24e6670;
	Node0x24e6600 -> Node0x24e6670;
	Node0x24e6670 -> Node0x2486268;
	Node0x2486268 -> Node0x24e6b10;
}
