; ModuleID = '../.././c_source_file/1471_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1471_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = or i32 %4, %3
  %8 = shl i32 %7, 1
  %9 = or i32 %1, %0
  %10 = xor i32 %9, %2
  %11 = xor i32 %2, -1
  %12 = or i32 %11, %1
  %13 = xor i32 %12, -1
  %14 = shl i32 %13, 1
  %15 = add i32 %14, %10
  %16 = sub i32 %6, %15
  %17 = sub i32 %16, %8
  %18 = xor i32 %6, -1
  %19 = and i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = xor i32 %0, -1
  %23 = or i32 %12, %22
  %24 = and i32 %2, %0
  %25 = or i32 %2, %1
  %26 = xor i32 %24, %25
  %27 = and i32 %1, %0
  %28 = or i32 %11, %0
  %29 = xor i32 %28, %27
  %30 = shl i32 %29, 1
  %31 = or i32 %2, %0
  %32 = xor i32 %13, %0
  %33 = and i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, -1
  %36 = xor i32 %33, %0
  %37 = xor i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %1
  %40 = and i32 %11, %1
  %41 = xor i32 %40, %0
  %42 = xor i32 %1, -1
  %43 = or i32 %42, %0
  %44 = xor i32 %2, %1
  %45 = xor i32 %44, -1
  %46 = and i32 %43, %45
  %47 = shl i32 %46, 1
  %48 = and i32 %42, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %37, %49
  %51 = and i32 %11, %0
  %52 = and i32 %33, %0
  %53 = xor i32 %44, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %52, %54
  %56 = xor i32 %40, -1
  %57 = xor i32 %56, %0
  %58 = xor i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %35, %59
  %61 = add i32 %58, 1
  %62 = and i32 %43, %38
  %63 = shl i32 %11, 1
  %64 = or i32 %13, %0
  %65 = xor i32 %51, %12
  %66 = or i32 %40, %48
  %67 = or i32 %25, %22
  %68 = and i32 %44, %49
  %69 = and i32 %33, %22
  %70 = and i32 %25, %0
  %71 = or i32 %69, %70
  %72 = and i32 %44, %43
  %73 = or i32 %44, %48
  %74 = shl i32 %73, 1
  %75 = xor i32 %25, -1
  %76 = or i32 %75, %22
  %77 = and i32 %9, %11
  %78 = or i32 %24, %58
  %79 = or i32 %33, %0
  %80 = xor i32 %9, -1
  %81 = or i32 %37, %80
  %82 = and i32 %25, %22
  %83 = or i32 %52, %82
  %84 = and i32 %42, %2
  %85 = and i32 %84, %22
  %86 = or i32 %42, %2
  %87 = and i32 %86, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %85, %88
  %90 = or i32 %58, %38
  %91 = xor i32 %43, -1
  %92 = or i32 %91, %2
  %93 = or i32 %58, %35
  %94 = and i32 %59, %2
  %95 = and i32 %11, %59
  %96 = and i32 %44, %22
  %97 = or i32 %52, %96
  %98 = or i32 %45, %80
  %99 = and i32 %43, %11
  %100 = and i32 %45, %0
  %101 = or i32 %33, %48
  %102 = or i32 %56, %22
  %103 = and i32 %84, %0
  %104 = xor i32 %86, %0
  %105 = xor i32 %104, -1
  %106 = xor i32 %103, %105
  %107 = or i32 %11, %91
  %108 = xor i32 %27, -1
  %109 = xor i32 %108, %2
  %110 = or i32 %24, %1
  %111 = and i32 %38, %108
  %112 = and i32 %34, %0
  %113 = add i32 %27, 1
  %114 = xor i32 %28, -1
  %115 = xor i32 %114, %1
  %116 = xor i32 %25, %27
  %117 = add i32 %1, 1
  %118 = xor i32 %12, %27
  %119 = and i32 %37, %43
  %120 = shl i32 %119, 1
  %121 = xor i32 %24, -1
  %122 = and i32 %121, %1
  %123 = and i32 %86, %22
  %124 = or i32 %103, %123
  %125 = and i32 %9, %38
  %126 = or i32 %114, %42
  %127 = and i32 %121, %59
  %128 = or i32 %103, %53
  %129 = or i32 %51, %42
  %130 = and i32 %37, %58
  %131 = and i32 %38, %42
  %132 = and i32 %56, %0
  %133 = xor i32 %48, %56
  %134 = or i32 %44, %80
  %135 = and i32 %45, %108
  %136 = or i32 %48, %2
  %137 = shl i32 %136, 1
  %138 = or i32 %34, %0
  %139 = and i32 %58, %11
  %140 = or i32 %56, %0
  %141 = or i32 %35, %42
  %142 = or i32 %25, %0
  %143 = xor i32 %25, %0
  %144 = xor i32 %143, 2147483647
  %145 = xor i32 %144, %52
  %146 = or i32 %40, %0
  %147 = or i32 %40, %22
  %148 = or i32 %37, %42
  %149 = xor i32 %121, %1
  %150 = xor i32 %31, %1
  %151 = or i32 %24, %91
  %152 = and i32 %45, %49
  %153 = xor i32 %52, -1
  %154 = xor i32 %96, %153
  %155 = or i32 %80, %2
  %156 = or i32 %38, %42
  %157 = shl i32 %156, 1
  %158 = or i32 %24, %59
  %159 = or i32 %75, %0
  %160 = and i32 %28, %42
  %161 = or i32 %38, %59
  %162 = or i32 %27, %2
  %163 = shl i32 %37, 1
  %164 = xor i32 %48, %2
  %165 = shl i32 %164, 2
  %166 = and i32 %44, %9
  %167 = or i32 %48, %38
  %168 = xor i32 %103, %54
  %169 = shl i32 %49, 2
  %170 = and i32 %12, %22
  %171 = or i32 %85, %87
  %172 = xor i32 %91, %2
  %173 = or i32 %27, %45
  %174 = or i32 %114, %59
  %175 = xor i32 %52, %53
  %176 = xor i32 %24, %43
  %177 = xor i32 %80, %2
  %178 = and i32 %44, %0
  %179 = or i32 %69, %178
  %180 = and i32 %37, %108
  %181 = or i32 %38, %91
  %182 = and i32 %11, %108
  %183 = or i32 %48, %11
  %184 = xor i32 %48, %34
  %185 = and i32 %49, %2
  %186 = or i32 %44, %22
  %187 = or i32 %59, %2
  %188 = xor i32 %24, %1
  %189 = or i32 %11, %59
  %190 = xor i32 %51, -1
  %191 = and i32 %190, %59
  %192 = or i32 %51, %13
  %193 = shl i32 %80, 1
  %194 = xor i32 %31, %27
  %195 = shl i32 %194, 1
  %196 = xor i32 %75, %0
  %197 = and i32 %121, %42
  %198 = or i32 %27, %35
  %199 = or i32 %12, %0
  %200 = or i32 %58, %114
  %201 = or i32 %37, %58
  %202 = xor i32 %35, %1
  %203 = and i32 %37, %59
  %204 = xor i32 %190, %1
  %205 = and i32 %108, %2
  %206 = and i32 %58, %121
  %207 = and i32 %9, %45
  %208 = and i32 %43, %2
  %209 = and i32 %58, %38
  %210 = and i32 %9, %2
  %211 = or i32 %38, %80
  %212 = and i32 %12, %0
  %213 = shl i32 %212, 1
  %214 = add i32 %43, 1
  %215 = and i32 %58, %2
  %216 = shl i32 %215, 1
  %217 = and i32 %44, %108
  %218 = and i32 %38, %1
  %219 = and i32 %28, %1
  %220 = or i32 %24, %40
  %221 = xor i32 %69, -1
  %222 = xor i32 %70, %221
  %223 = or i32 %51, %1
  %224 = or i32 %45, %22
  %225 = or i32 %24, %42
  %226 = or i32 %37, %48
  %227 = shl i32 %226, 1
  %228 = or i32 %45, %91
  %229 = or i32 %27, %13
  %230 = shl i32 %229, 1
  %231 = xor i32 %28, %1
  %232 = or i32 %27, %38
  %233 = and i32 %34, %22
  %234 = or i32 %44, %0
  %235 = and i32 %38, %49
  %236 = and i32 %31, %58
  %237 = and i32 %45, %22
  %238 = or i32 %45, %0
  %239 = or i32 %37, %91
  %240 = or i32 %27, %75
  %241 = xor i32 %51, %1
  %242 = and i32 %28, %59
  %243 = and i32 %31, %42
  %244 = and i32 %190, %1
  %245 = xor i32 %85, %186
  %246 = and i32 %190, %42
  %247 = or i32 %13, %22
  %248 = or i32 %24, %80
  %249 = or i32 %33, %22
  %250 = add i32 %51, 1
  %251 = add i32 %44, 1
  %252 = xor i32 %234, -1
  %253 = or i32 %103, %252
  %254 = or i32 %51, %59
  %255 = xor i32 %43, %2
  %256 = xor i32 %45, %0
  %257 = shl i32 %256, 1
  %258 = or i32 %27, %114
  %259 = and i32 %37, %42
  %260 = or i32 %34, %22
  %261 = shl i32 %260, 1
  %262 = xor i32 %12, %0
  %263 = or i32 %51, %33
  %264 = or i32 %24, %75
  %265 = xor i32 %123, 2147483647
  %266 = xor i32 %265, %103
  %267 = shl i32 %266, 1
  %268 = or i32 %58, %11
  %269 = or i32 %103, %104
  %270 = or i32 %37, %59
  %271 = and i32 %31, %59
  %272 = or i32 %35, %1
  %273 = xor i32 %24, %9
  %274 = shl i32 %273, 1
  %275 = shl i32 %27, 1
  %276 = and i32 %37, %9
  %277 = shl i32 %276, 1
  %278 = or i32 %44, %91
  %279 = and i32 %11, %49
  %280 = and i32 %58, %190
  %281 = or i32 %37, %27
  %282 = and i32 %38, %59
  %283 = xor i32 %34, %0
  %284 = or i32 %51, %58
  %285 = and i32 %37, %1
  %286 = xor i32 %51, %34
  %287 = xor i32 %27, %2
  %288 = or i32 %27, %11
  %289 = or i32 %44, %27
  %290 = or i32 %37, %1
  %291 = or i32 %58, %2
  %292 = and i32 %31, %1
  %293 = and i32 %56, %22
  %294 = xor i32 %103, %234
  %295 = or i32 %114, %1
  %296 = shl i32 %295, 1
  %297 = xor i32 %178, %221
  %298 = xor i32 %82, %153
  %299 = xor i32 %24, %56
  %300 = shl i32 %299, 1
  %301 = or i32 %48, %45
  %302 = xor i32 %49, %2
  %303 = xor i32 %186, -1
  %304 = or i32 %85, %303
  %305 = add i32 %24, 1
  %306 = and i32 %28, %58
  %307 = and i32 %75, %22
  %308 = and i32 %40, %22
  %309 = mul i32 %308, -20
  %310 = and i32 %75, %0
  %311 = mul i32 %310, -7
  %312 = and i32 %40, %0
  %313 = mul i32 %312, 12
  %314 = and i32 %13, %22
  %315 = shl i32 %314, 4
  %316 = mul i32 %69, -14
  %317 = and i32 %13, %0
  %318 = mul i32 %317, -18
  %319 = add i32 %109, %12
  %320 = add i32 %319, %107
  %321 = add i32 %320, %224
  %322 = add i32 %321, %219
  %323 = add i32 %322, %207
  %324 = add i32 %323, %181
  %325 = add i32 %324, %159
  %326 = add i32 %325, %149
  %327 = add i32 %326, %142
  %328 = add i32 %327, %134
  %329 = add i32 %328, %101
  %330 = add i32 %329, %41
  %331 = add i32 %330, %145
  %332 = shl i32 %331, 1
  %333 = add i32 %52, %177
  %334 = sub i32 %138, %333
  %335 = sub i32 %334, %127
  %336 = mul i32 %335, 3
  %337 = add i32 %336, 3
  %338 = sub i32 %92, %115
  %339 = add i32 %338, %201
  %340 = mul i32 %339, 5
  %341 = add i32 %151, 1073741823
  %342 = add i32 %341, %307
  %343 = add i32 %342, %102
  %344 = add i32 %343, %32
  %345 = shl i32 %344, 2
  %346 = sub i32 1, %0
  %347 = sub i32 %346, %0
  %348 = add i32 %347, %117
  %349 = add i32 %348, %1
  %350 = add i32 %349, %61
  %351 = sub i32 %350, %43
  %352 = add i32 %351, %113
  %353 = add i32 %352, %9
  %354 = add i32 %353, %2
  %355 = add i32 %354, %58
  %356 = add i32 %355, %214
  %357 = sub i32 %356, %48
  %358 = sub i32 %357, %3
  %359 = add i32 %358, %34
  %360 = add i32 %359, %51
  %361 = sub i32 %360, %63
  %362 = add i32 %361, %77
  %363 = add i32 %362, %44
  %364 = add i32 %363, %94
  %365 = sub i32 %364, %95
  %366 = add i32 %365, %99
  %367 = add i32 %366, %38
  %368 = add i32 %367, %114
  %369 = sub i32 %368, %139
  %370 = sub i32 %369, %33
  %371 = add i32 %370, %155
  %372 = add i32 %371, %162
  %373 = sub i32 %372, %169
  %374 = sub i32 %373, %172
  %375 = sub i32 %374, %182
  %376 = add i32 %375, %183
  %377 = sub i32 %376, %185
  %378 = add i32 %377, %187
  %379 = sub i32 %378, %189
  %380 = sub i32 %379, %193
  %381 = add i32 %380, %24
  %382 = sub i32 %381, %205
  %383 = sub i32 %382, %208
  %384 = add i32 %383, %210
  %385 = add i32 %384, %250
  %386 = add i32 %385, %251
  %387 = sub i32 %386, %255
  %388 = add i32 %387, %268
  %389 = sub i32 %388, %275
  %390 = sub i32 %389, %279
  %391 = add i32 %390, %287
  %392 = sub i32 %391, %288
  %393 = sub i32 %392, %291
  %394 = add i32 %393, %302
  %395 = add i32 %394, %305
  %396 = sub i32 %395, %4
  %397 = sub i32 %396, %23
  %398 = sub i32 %397, %26
  %399 = add i32 %398, %36
  %400 = sub i32 %399, %39
  %401 = add i32 %400, %50
  %402 = sub i32 %401, %57
  %403 = sub i32 %402, %60
  %404 = add i32 %403, %62
  %405 = sub i32 %404, %64
  %406 = sub i32 %405, %65
  %407 = sub i32 %406, %66
  %408 = add i32 %407, %67
  %409 = add i32 %408, %68
  %410 = add i32 %409, %72
  %411 = add i32 %410, %76
  %412 = add i32 %411, %78
  %413 = add i32 %412, %79
  %414 = add i32 %413, %81
  %415 = add i32 %414, %90
  %416 = add i32 %415, %93
  %417 = sub i32 %416, %98
  %418 = add i32 %417, %100
  %419 = sub i32 %418, %53
  %420 = sub i32 %419, %110
  %421 = add i32 %420, %111
  %422 = sub i32 %421, %112
  %423 = sub i32 %422, %96
  %424 = sub i32 %423, %116
  %425 = add i32 %424, %118
  %426 = add i32 %425, %122
  %427 = sub i32 %426, %82
  %428 = add i32 %427, %125
  %429 = sub i32 %428, %126
  %430 = add i32 %429, %129
  %431 = add i32 %430, %130
  %432 = add i32 %431, %131
  %433 = sub i32 %432, %132
  %434 = sub i32 %433, %133
  %435 = sub i32 %434, %135
  %436 = sub i32 %435, %137
  %437 = add i32 %436, %140
  %438 = sub i32 %437, %141
  %439 = sub i32 %438, %146
  %440 = add i32 %439, %147
  %441 = sub i32 %440, %148
  %442 = add i32 %441, %150
  %443 = add i32 %442, %152
  %444 = sub i32 %443, %158
  %445 = add i32 %444, %160
  %446 = sub i32 %445, %161
  %447 = sub i32 %446, %163
  %448 = sub i32 %447, %165
  %449 = add i32 %448, %166
  %450 = sub i32 %449, %167
  %451 = add i32 %450, %170
  %452 = add i32 %451, %173
  %453 = sub i32 %452, %174
  %454 = sub i32 %453, %176
  %455 = add i32 %454, %180
  %456 = add i32 %455, %184
  %457 = add i32 %456, %186
  %458 = sub i32 %457, %188
  %459 = sub i32 %458, %191
  %460 = sub i32 %459, %192
  %461 = sub i32 %460, %196
  %462 = sub i32 %461, %197
  %463 = sub i32 %462, %198
  %464 = add i32 %463, %199
  %465 = sub i32 %464, %200
  %466 = sub i32 %465, %70
  %467 = add i32 %466, %202
  %468 = add i32 %467, %203
  %469 = sub i32 %468, %204
  %470 = add i32 %469, %206
  %471 = add i32 %470, %209
  %472 = add i32 %471, %211
  %473 = sub i32 %472, %216
  %474 = sub i32 %473, %217
  %475 = add i32 %474, %218
  %476 = add i32 %475, %220
  %477 = sub i32 %476, %223
  %478 = add i32 %477, %225
  %479 = add i32 %478, %228
  %480 = sub i32 %479, %231
  %481 = sub i32 %480, %232
  %482 = sub i32 %481, %233
  %483 = add i32 %482, %234
  %484 = sub i32 %483, %235
  %485 = sub i32 %484, %236
  %486 = add i32 %485, %237
  %487 = add i32 %486, %238
  %488 = add i32 %487, %239
  %489 = add i32 %488, %240
  %490 = add i32 %489, %241
  %491 = sub i32 %490, %242
  %492 = add i32 %491, %243
  %493 = add i32 %492, %244
  %494 = sub i32 %493, %178
  %495 = sub i32 %494, %246
  %496 = add i32 %495, %247
  %497 = sub i32 %496, %248
  %498 = sub i32 %497, %249
  %499 = sub i32 %498, %254
  %500 = add i32 %499, %258
  %501 = add i32 %500, %259
  %502 = add i32 %501, %262
  %503 = add i32 %502, %263
  %504 = sub i32 %503, %264
  %505 = sub i32 %504, %270
  %506 = sub i32 %505, %271
  %507 = sub i32 %506, %272
  %508 = sub i32 %507, %278
  %509 = sub i32 %508, %280
  %510 = add i32 %509, %281
  %511 = sub i32 %510, %282
  %512 = add i32 %511, %283
  %513 = sub i32 %512, %143
  %514 = add i32 %513, %284
  %515 = sub i32 %514, %285
  %516 = sub i32 %515, %286
  %517 = sub i32 %516, %289
  %518 = sub i32 %517, %290
  %519 = add i32 %518, %292
  %520 = add i32 %519, %293
  %521 = add i32 %520, %301
  %522 = add i32 %521, %306
  %523 = add i32 %522, %18
  %524 = add i32 %523, %7
  %525 = add i32 %524, %19
  %526 = sub i32 %525, %30
  %527 = sub i32 %526, %47
  %528 = sub i32 %527, %55
  %529 = sub i32 %528, %71
  %530 = sub i32 %529, %74
  %531 = add i32 %530, %83
  %532 = add i32 %531, %89
  %533 = sub i32 %532, %97
  %534 = sub i32 %533, %106
  %535 = sub i32 %534, %120
  %536 = add i32 %535, %124
  %537 = sub i32 %536, %128
  %538 = sub i32 %537, %154
  %539 = sub i32 %538, %157
  %540 = add i32 %539, %168
  %541 = add i32 %540, %171
  %542 = add i32 %541, %175
  %543 = sub i32 %542, %179
  %544 = sub i32 %543, %195
  %545 = sub i32 %544, %213
  %546 = add i32 %545, %222
  %547 = sub i32 %546, %227
  %548 = sub i32 %547, %230
  %549 = add i32 %548, %245
  %550 = add i32 %549, %253
  %551 = sub i32 %550, %257
  %552 = sub i32 %551, %261
  %553 = sub i32 %552, %269
  %554 = sub i32 %553, %274
  %555 = sub i32 %554, %277
  %556 = add i32 %555, %294
  %557 = sub i32 %556, %296
  %558 = sub i32 %557, %297
  %559 = add i32 %558, %298
  %560 = sub i32 %559, %300
  %561 = add i32 %560, %304
  %562 = add i32 %561, %309
  %563 = add i32 %562, %311
  %564 = add i32 %563, %313
  %565 = add i32 %564, %315
  %566 = add i32 %565, %316
  %567 = add i32 %566, %318
  %568 = add i32 %567, %21
  %569 = sub i32 %568, %267
  %570 = add i32 %569, %340
  %571 = add i32 %570, %345
  %572 = add i32 %571, %337
  %573 = add i32 %572, %332
  %574 = icmp eq i32 %17, %573
  %575 = select i1 %574, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %576 = tail call i32 @puts(i8* nonnull dereferenceable(1) %575)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
