digraph "DFG for'crackme' function" {
	Node0x8c2a60[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x8c2b00[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x8c2bc0[shape=record, label="  %5 = or i32 %3, %0"];
	Node0x8c2c30[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x8c2ca0[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x8c2d10[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x8c2d80[shape=record, label="  %9 = xor i32 %5, -1"];
	Node0x8c2df0[shape=record, label="  %10 = mul i32 %7, -3"];
	Node0x8c2e90[shape=record, label="  %11 = add i32 %0, 5"];
	Node0x8c2f00[shape=record, label="  %12 = sub i32 %11, %1"];
	Node0x8c2f70[shape=record, label="  %13 = add i32 %12, %4"];
	Node0x8c2fe0[shape=record, label="  %14 = sub i32 %13, %5"];
	Node0x8c3050[shape=record, label="  %15 = add i32 %14, %6"];
	Node0x8c30c0[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x8c3130[shape=record, label="  %17 = add i32 %16, %8"];
	Node0x8c31a0[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x8c3210[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x8c32b0[shape=record, label="  %20 = icmp eq i32 %19, 4"];
	Node0x863268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x8c3750[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x8c37a0[shape=record, label="  ret void"];
	Node0x8c2a60 -> Node0x8c2b00;
	Node0x8c2b00 -> Node0x8c2bc0;
	Node0x8c2bc0 -> Node0x8c2c30;
	Node0x8c2c30 -> Node0x8c2ca0;
	Node0x8c2ca0 -> Node0x8c2d10;
	Node0x8c2d10 -> Node0x8c2d80;
	Node0x8c2d80 -> Node0x8c2df0;
	Node0x8c2df0 -> Node0x8c2e90;
	Node0x8c2e90 -> Node0x8c2f00;
	Node0x8c2f00 -> Node0x8c2f70;
	Node0x8c2f70 -> Node0x8c2fe0;
	Node0x8c2fe0 -> Node0x8c3050;
	Node0x8c3050 -> Node0x8c30c0;
	Node0x8c30c0 -> Node0x8c3130;
	Node0x8c3130 -> Node0x8c31a0;
	Node0x8c31a0 -> Node0x8c3210;
	Node0x8c3210 -> Node0x8c32b0;
	Node0x8c32b0 -> Node0x863268;
	Node0x863268 -> Node0x8c3750;
	Node0x8c3750 -> Node0x8c37a0;
edge [color=red]
	Node0x8c2a60 -> Node0x8c2b00;
	Node0x8c2a60 -> Node0x8c2bc0;
	Node0x8c2a60 -> Node0x8c2ca0;
	Node0x8c2bc0 -> Node0x8c2d80;
	Node0x8c2ca0 -> Node0x8c2df0;
	Node0x8c2e90 -> Node0x8c2f00;
	Node0x8c2f00 -> Node0x8c2f70;
	Node0x8c2b00 -> Node0x8c2f70;
	Node0x8c2f70 -> Node0x8c2fe0;
	Node0x8c2bc0 -> Node0x8c2fe0;
	Node0x8c2fe0 -> Node0x8c3050;
	Node0x8c2c30 -> Node0x8c3050;
	Node0x8c3050 -> Node0x8c30c0;
	Node0x8c2ca0 -> Node0x8c30c0;
	Node0x8c30c0 -> Node0x8c3130;
	Node0x8c2d10 -> Node0x8c3130;
	Node0x8c3130 -> Node0x8c31a0;
	Node0x8c2d80 -> Node0x8c31a0;
	Node0x8c31a0 -> Node0x8c3210;
	Node0x8c2df0 -> Node0x8c3210;
	Node0x8c3210 -> Node0x8c32b0;
	Node0x8c32b0 -> Node0x863268;
	Node0x863268 -> Node0x8c3750;
}
