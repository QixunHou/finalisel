digraph "DFG for'main' function" {
	Node0x8c3968[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x8c39e8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x8c3a78[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x8c3ed8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x8c3fb8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x8c40d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x8c4310[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x8c43c8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x8c5338[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x8c59c0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x8c5a30[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x8c5aa0[shape=record, label="  %10 = or i32 %6, %8"];
	Node0x8c5b10[shape=record, label="  %11 = and i32 %7, %6"];
	Node0x8c5b80[shape=record, label="  %12 = and i32 %6, %8"];
	Node0x8c5bf0[shape=record, label="  %13 = or i32 %7, %6"];
	Node0x8c5c60[shape=record, label="  %14 = xor i32 %10, -1"];
	Node0x8c5cd0[shape=record, label="  %15 = mul i32 %12, -3"];
	Node0x8c5d40[shape=record, label="  %16 = add i32 %6, 5"];
	Node0x8c5db0[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0x8c5e20[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x8c5e90[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0x8c5f00[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x8c5f70[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x8c5fe0[shape=record, label="  %22 = add i32 %21, %13"];
	Node0x8c6050[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x8c60c0[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x8c6130[shape=record, label="  %25 = icmp eq i32 %24, 4"];
	Node0x8649d8[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x8c61c0[shape=record, label="  %27 = call i32 @puts(i8* nonnull dereferenceable(1) %26) #5"];
	Node0x8c6418[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x8c6578[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x8c6638[shape=record, label="  ret i32 0"];
	Node0x8c3968 -> Node0x8c39e8;
	Node0x8c39e8 -> Node0x8c3a78;
	Node0x8c3a78 -> Node0x8c3ed8;
	Node0x8c3ed8 -> Node0x8c3fb8;
	Node0x8c3fb8 -> Node0x8c40d8;
	Node0x8c40d8 -> Node0x8c4310;
	Node0x8c4310 -> Node0x8c43c8;
	Node0x8c43c8 -> Node0x8c5338;
	Node0x8c5338 -> Node0x8c59c0;
	Node0x8c59c0 -> Node0x8c5a30;
	Node0x8c5a30 -> Node0x8c5aa0;
	Node0x8c5aa0 -> Node0x8c5b10;
	Node0x8c5b10 -> Node0x8c5b80;
	Node0x8c5b80 -> Node0x8c5bf0;
	Node0x8c5bf0 -> Node0x8c5c60;
	Node0x8c5c60 -> Node0x8c5cd0;
	Node0x8c5cd0 -> Node0x8c5d40;
	Node0x8c5d40 -> Node0x8c5db0;
	Node0x8c5db0 -> Node0x8c5e20;
	Node0x8c5e20 -> Node0x8c5e90;
	Node0x8c5e90 -> Node0x8c5f00;
	Node0x8c5f00 -> Node0x8c5f70;
	Node0x8c5f70 -> Node0x8c5fe0;
	Node0x8c5fe0 -> Node0x8c6050;
	Node0x8c6050 -> Node0x8c60c0;
	Node0x8c60c0 -> Node0x8c6130;
	Node0x8c6130 -> Node0x8649d8;
	Node0x8649d8 -> Node0x8c61c0;
	Node0x8c61c0 -> Node0x8c6418;
	Node0x8c6418 -> Node0x8c6578;
	Node0x8c6578 -> Node0x8c6638;
edge [color=red]
	Node0x8c3968 -> Node0x8c3a78;
	Node0x8c3a78 -> Node0x8c3ed8;
	Node0x8c39e8 -> Node0x8c3fb8;
	Node0x8c3fb8 -> Node0x8c40d8;
	Node0x8c3968 -> Node0x8c4310;
	Node0x8c39e8 -> Node0x8c4310;
	Node0x8c3968 -> Node0x8c43c8;
	Node0x8c39e8 -> Node0x8c5338;
	Node0x8c5338 -> Node0x8c59c0;
	Node0x8c59c0 -> Node0x8c5a30;
	Node0x8c43c8 -> Node0x8c5aa0;
	Node0x8c59c0 -> Node0x8c5aa0;
	Node0x8c5338 -> Node0x8c5b10;
	Node0x8c43c8 -> Node0x8c5b10;
	Node0x8c43c8 -> Node0x8c5b80;
	Node0x8c59c0 -> Node0x8c5b80;
	Node0x8c5338 -> Node0x8c5bf0;
	Node0x8c43c8 -> Node0x8c5bf0;
	Node0x8c5aa0 -> Node0x8c5c60;
	Node0x8c5b80 -> Node0x8c5cd0;
	Node0x8c43c8 -> Node0x8c5d40;
	Node0x8c5d40 -> Node0x8c5db0;
	Node0x8c5338 -> Node0x8c5db0;
	Node0x8c5db0 -> Node0x8c5e20;
	Node0x8c5a30 -> Node0x8c5e20;
	Node0x8c5e20 -> Node0x8c5e90;
	Node0x8c5aa0 -> Node0x8c5e90;
	Node0x8c5e90 -> Node0x8c5f00;
	Node0x8c5b10 -> Node0x8c5f00;
	Node0x8c5f00 -> Node0x8c5f70;
	Node0x8c5b80 -> Node0x8c5f70;
	Node0x8c5f70 -> Node0x8c5fe0;
	Node0x8c5bf0 -> Node0x8c5fe0;
	Node0x8c5fe0 -> Node0x8c6050;
	Node0x8c5c60 -> Node0x8c6050;
	Node0x8c6050 -> Node0x8c60c0;
	Node0x8c5cd0 -> Node0x8c60c0;
	Node0x8c60c0 -> Node0x8c6130;
	Node0x8c6130 -> Node0x8649d8;
	Node0x8649d8 -> Node0x8c61c0;
	Node0x8c3fb8 -> Node0x8c6418;
	Node0x8c3a78 -> Node0x8c6578;
}
