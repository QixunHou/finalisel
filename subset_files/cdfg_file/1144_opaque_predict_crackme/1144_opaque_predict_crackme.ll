; ModuleID = '../.././c_source_file/1144_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1144_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %1
  %10 = mul i32 %9, -2
  %11 = xor i32 %4, -1
  %12 = or i32 %5, %3
  %13 = or i32 %12, %11
  %14 = sub i32 %10, %13
  %15 = and i32 %5, %3
  %16 = xor i32 %4, 2147483647
  %17 = xor i32 %16, %15
  %18 = shl i32 %17, 1
  %19 = sub i32 %14, %18
  %20 = xor i32 %1, -1
  %21 = or i32 %20, %0
  %22 = and i32 %21, %8
  %23 = xor i32 %2, -1
  %24 = and i32 %23, %0
  %25 = or i32 %23, %1
  %26 = xor i32 %24, %25
  %27 = or i32 %2, %0
  %28 = xor i32 %27, %1
  %29 = and i32 %20, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %2, %1
  %32 = and i32 %31, %30
  %33 = and i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %34, %36
  %38 = shl i32 %23, 1
  %39 = and i32 %7, %36
  %40 = and i32 %2, %1
  %41 = and i32 %40, %0
  %42 = xor i32 %0, -1
  %43 = and i32 %31, %42
  %44 = xor i32 %43, 2147483647
  %45 = xor i32 %44, %41
  %46 = shl i32 %45, 1
  %47 = or i32 %23, %0
  %48 = and i32 %47, %1
  %49 = xor i32 %24, -1
  %50 = xor i32 %49, %1
  %51 = xor i32 %27, -1
  %52 = shl i32 %51, 1
  %53 = or i32 %35, %2
  %54 = and i32 %1, %0
  %55 = or i32 %54, %8
  %56 = xor i32 %54, %2
  %57 = or i32 %40, %0
  %58 = shl i32 %57, 1
  %59 = and i32 %23, %1
  %60 = or i32 %59, %0
  %61 = xor i32 %21, -1
  %62 = or i32 %23, %61
  %63 = or i32 %54, %51
  %64 = and i32 %35, %23
  %65 = xor i32 %59, -1
  %66 = shl i32 %65, 1
  %67 = or i32 %1, %0
  %68 = xor i32 %67, %2
  %69 = xor i32 %30, %2
  %70 = or i32 %31, %54
  %71 = xor i32 %29, %2
  %72 = xor i32 %25, %54
  %73 = or i32 %7, %20
  %74 = shl i32 %73, 1
  %75 = or i32 %2, %1
  %76 = and i32 %75, %0
  %77 = or i32 %29, %8
  %78 = or i32 %7, %36
  %79 = xor i32 %40, -1
  %80 = or i32 %79, %0
  %81 = and i32 %49, %36
  %82 = or i32 %35, %51
  %83 = or i32 %7, %1
  %84 = xor i32 %31, %0
  %85 = xor i32 %84, %41
  %86 = xor i32 %47, %1
  %87 = or i32 %23, %36
  %88 = xor i32 %54, -1
  %89 = and i32 %7, %88
  %90 = or i32 %8, %61
  %91 = xor i32 %31, -1
  %92 = or i32 %91, %0
  %93 = xor i32 %91, %0
  %94 = and i32 %20, %2
  %95 = and i32 %94, %42
  %96 = or i32 %31, %42
  %97 = xor i32 %95, %96
  %98 = xor i32 %25, -1
  %99 = or i32 %54, %98
  %100 = xor i32 %61, %2
  %101 = or i32 %31, %0
  %102 = and i32 %94, %0
  %103 = or i32 %20, %2
  %104 = xor i32 %103, -1
  %105 = or i32 %104, %0
  %106 = xor i32 %102, %105
  %107 = or i32 %8, %36
  %108 = xor i32 %33, %75
  %109 = or i32 %8, %20
  %110 = or i32 %40, %29
  %111 = and i32 %21, %23
  %112 = and i32 %21, %2
  %113 = and i32 %103, %0
  %114 = xor i32 %113, -1
  %115 = xor i32 %95, %114
  %116 = or i32 %41, %43
  %117 = or i32 %79, %42
  %118 = xor i32 %88, %2
  %119 = or i32 %54, %2
  %120 = and i32 %49, %20
  %121 = shl i32 %120, 2
  %122 = and i32 %34, %20
  %123 = and i32 %7, %20
  %124 = xor i32 %79, %0
  %125 = and i32 %27, %36
  %126 = and i32 %79, %0
  %127 = xor i32 %65, %0
  %128 = shl i32 %127, 1
  %129 = xor i32 %47, -1
  %130 = xor i32 %34, %1
  %131 = or i32 %129, %20
  %132 = and i32 %25, %42
  %133 = and i32 %7, %67
  %134 = or i32 %33, %20
  %135 = or i32 %98, %42
  %136 = and i32 %8, %30
  %137 = and i32 %88, %2
  %138 = shl i32 %33, 1
  %139 = or i32 %35, %8
  %140 = xor i32 %25, %0
  %141 = or i32 %33, %35
  %142 = or i32 %35, %129
  %143 = or i32 %24, %98
  %144 = and i32 %65, %0
  %145 = and i32 %21, %91
  %146 = or i32 %54, %129
  %147 = and i32 %35, %49
  %148 = xor i32 %67, -1
  %149 = or i32 %23, %148
  %150 = and i32 %30, %2
  %151 = or i32 %54, %23
  %152 = and i32 %25, %0
  %153 = or i32 %33, %148
  %154 = and i32 %23, %36
  %155 = shl i32 %154, 1
  %156 = and i32 %47, %35
  %157 = and i32 %7, %1
  %158 = and i32 %79, %42
  %159 = and i32 %49, %1
  %160 = shl i32 %159, 1
  %161 = or i32 %98, %0
  %162 = xor i32 %75, %0
  %163 = or i32 %25, %42
  %164 = or i32 %35, %23
  %165 = xor i32 %0, 2147483647
  %166 = xor i32 %165, %103
  %167 = xor i32 %166, %102
  %168 = shl i32 %167, 1
  %169 = or i32 %31, %61
  %170 = xor i32 %75, -1
  %171 = and i32 %170, %42
  %172 = mul i32 %171, 18
  %173 = and i32 %59, %42
  %174 = and i32 %170, %0
  %175 = and i32 %59, %0
  %176 = and i32 %98, %42
  %177 = shl i32 %176, 2
  %178 = and i32 %40, %42
  %179 = mul i32 %41, -11
  %180 = or i32 %15, %4
  %181 = xor i32 %5, -1
  %182 = or i32 %4, %3
  %183 = xor i32 %182, 2147483647
  %184 = or i32 %183, %181
  %185 = shl i32 %184, 1
  %186 = and i32 %5, %4
  %187 = and i32 %181, %3
  %188 = xor i32 %187, -1
  %189 = xor i32 %186, %188
  %190 = and i32 %4, %3
  %191 = xor i32 %190, -1
  %192 = xor i32 %5, %3
  %193 = xor i32 %192, -1
  %194 = and i32 %193, %191
  %195 = shl i32 %194, 1
  %196 = xor i32 %3, -1
  %197 = and i32 %196, %4
  %198 = xor i32 %197, -1
  %199 = xor i32 %198, %5
  %200 = or i32 %15, %197
  %201 = or i32 %196, %4
  %202 = xor i32 %5, %4
  %203 = and i32 %202, %201
  %204 = and i32 %12, %4
  %205 = xor i32 %191, %5
  %206 = and i32 %181, %4
  %207 = or i32 %190, %193
  %208 = and i32 %15, %4
  %209 = and i32 %192, %11
  %210 = or i32 %208, %209
  %211 = and i32 %188, %11
  %212 = and i32 %193, %198
  %213 = and i32 %196, %5
  %214 = and i32 %213, %11
  %215 = or i32 %196, %5
  %216 = and i32 %215, %4
  %217 = xor i32 %216, 2147483647
  %218 = xor i32 %217, %214
  %219 = shl i32 %218, 1
  %220 = or i32 %181, %4
  %221 = xor i32 %4, %3
  %222 = and i32 %220, %221
  %223 = xor i32 %202, -1
  %224 = and i32 %182, %223
  %225 = xor i32 %186, -1
  %226 = and i32 %225, %196
  %227 = and i32 %192, %198
  %228 = or i32 %221, %5
  %229 = or i32 %206, %3
  %230 = and i32 %223, %198
  %231 = shl i32 %230, 1
  %232 = xor i32 %12, -1
  %233 = and i32 %232, %11
  %234 = and i32 %187, %11
  %235 = shl i32 %234, 2
  %236 = and i32 %232, %4
  %237 = and i32 %187, %4
  %238 = mul i32 %214, -9
  %239 = and i32 %15, %11
  %240 = and i32 %213, %4
  %241 = shl i32 %240, 2
  %242 = add i32 %164, %91
  %243 = add i32 %242, %100
  %244 = add i32 %243, %163
  %245 = add i32 %244, %146
  %246 = add i32 %245, %130
  %247 = add i32 %246, %124
  %248 = add i32 %247, %92
  %249 = add i32 %248, %76
  %250 = add i32 %249, %222
  %251 = add i32 %250, %208
  %252 = shl i32 %251, 1
  %253 = sub i32 %226, %117
  %254 = add i32 %253, %237
  %255 = sub i32 %254, %212
  %256 = add i32 %255, %203
  %257 = mul i32 %256, 3
  %258 = add i32 %239, %175
  %259 = mul i32 %258, 6
  %260 = add i32 %178, %173
  %261 = mul i32 %260, -7
  %262 = sub i32 %233, %63
  %263 = mul i32 %262, 5
  %264 = add i32 %35, %20
  %265 = add i32 %264, %54
  %266 = sub i32 %265, %38
  %267 = add i32 %266, %53
  %268 = add i32 %267, %56
  %269 = add i32 %268, %62
  %270 = add i32 %269, %64
  %271 = add i32 %270, %68
  %272 = sub i32 %271, %69
  %273 = sub i32 %272, %71
  %274 = add i32 %273, %40
  %275 = sub i32 %274, %87
  %276 = sub i32 %275, %111
  %277 = add i32 %276, %112
  %278 = add i32 %277, %118
  %279 = add i32 %278, %119
  %280 = add i32 %279, %129
  %281 = add i32 %280, %25
  %282 = add i32 %281, %137
  %283 = sub i32 %282, %149
  %284 = sub i32 %283, %150
  %285 = sub i32 %284, %151
  %286 = sub i32 %285, %22
  %287 = add i32 %286, %26
  %288 = sub i32 %287, %28
  %289 = add i32 %288, %32
  %290 = sub i32 %289, %37
  %291 = sub i32 %290, %39
  %292 = add i32 %291, %48
  %293 = add i32 %292, %50
  %294 = sub i32 %293, %52
  %295 = add i32 %294, %55
  %296 = add i32 %295, %60
  %297 = sub i32 %296, %66
  %298 = sub i32 %297, %70
  %299 = sub i32 %298, %72
  %300 = sub i32 %299, %77
  %301 = add i32 %300, %78
  %302 = add i32 %301, %80
  %303 = sub i32 %302, %81
  %304 = add i32 %303, %82
  %305 = add i32 %304, %83
  %306 = sub i32 %305, %86
  %307 = sub i32 %306, %89
  %308 = add i32 %307, %90
  %309 = sub i32 %308, %93
  %310 = add i32 %309, %99
  %311 = sub i32 %310, %101
  %312 = sub i32 %311, %107
  %313 = add i32 %312, %108
  %314 = add i32 %313, %109
  %315 = sub i32 %314, %110
  %316 = sub i32 %315, %122
  %317 = sub i32 %316, %123
  %318 = add i32 %317, %125
  %319 = sub i32 %318, %126
  %320 = add i32 %319, %131
  %321 = add i32 %320, %132
  %322 = add i32 %321, %133
  %323 = add i32 %322, %134
  %324 = add i32 %323, %135
  %325 = sub i32 %324, %136
  %326 = sub i32 %325, %138
  %327 = add i32 %326, %139
  %328 = sub i32 %327, %140
  %329 = add i32 %328, %141
  %330 = sub i32 %329, %142
  %331 = add i32 %330, %143
  %332 = add i32 %331, %144
  %333 = sub i32 %332, %145
  %334 = add i32 %333, %147
  %335 = sub i32 %334, %152
  %336 = sub i32 %335, %153
  %337 = sub i32 %336, %155
  %338 = add i32 %337, %156
  %339 = sub i32 %338, %157
  %340 = sub i32 %339, %158
  %341 = sub i32 %340, %161
  %342 = add i32 %341, %162
  %343 = add i32 %342, %169
  %344 = sub i32 %343, %174
  %345 = sub i32 %344, %58
  %346 = sub i32 %345, %74
  %347 = add i32 %346, %85
  %348 = sub i32 %347, %97
  %349 = add i32 %348, %106
  %350 = sub i32 %349, %115
  %351 = add i32 %350, %116
  %352 = sub i32 %351, %121
  %353 = sub i32 %352, %128
  %354 = sub i32 %353, %160
  %355 = add i32 %354, %172
  %356 = sub i32 %355, %177
  %357 = add i32 %356, %179
  %358 = sub i32 %357, %199
  %359 = sub i32 %358, %205
  %360 = sub i32 %359, %206
  %361 = add i32 %360, %188
  %362 = sub i32 %361, %228
  %363 = add i32 %362, %261
  %364 = sub i32 %363, %46
  %365 = sub i32 %364, %168
  %366 = add i32 %365, %180
  %367 = add i32 %366, %189
  %368 = sub i32 %367, %200
  %369 = add i32 %368, %204
  %370 = sub i32 %369, %207
  %371 = add i32 %370, %211
  %372 = add i32 %371, %224
  %373 = sub i32 %372, %227
  %374 = sub i32 %373, %229
  %375 = sub i32 %374, %236
  %376 = sub i32 %375, %185
  %377 = sub i32 %376, %195
  %378 = add i32 %377, %210
  %379 = sub i32 %378, %231
  %380 = add i32 %379, %235
  %381 = add i32 %380, %238
  %382 = sub i32 %381, %241
  %383 = add i32 %382, %259
  %384 = add i32 %383, %263
  %385 = sub i32 %384, %219
  %386 = add i32 %385, %257
  %387 = add i32 %386, %252
  %388 = icmp eq i32 %19, %387
  %389 = select i1 %388, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %390 = tail call i32 @puts(i8* nonnull dereferenceable(1) %389)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
