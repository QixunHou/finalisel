digraph "DFG for'crackme' function" {
	Node0x1e6faf0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1e6fb90[shape=record, label="  %4 = shl i32 %1, 1"];
	Node0x1e6fc50[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x1e6fcc0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x1e6fd30[shape=record, label="  %7 = add i32 %4, %6"];
	Node0x1e6fda0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1e6fe10[shape=record, label="  %9 = or i32 %7, 1"];
	Node0x1e6fe80[shape=record, label="  %10 = or i32 %3, %0"];
	Node0x1e6fef0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1e6ff60[shape=record, label="  %12 = xor i32 %10, -1"];
	Node0x1e70000[shape=record, label="  %13 = mul i32 %12, -5"];
	Node0x1e70070[shape=record, label="  %14 = and i32 %1, %0"];
	Node0x1e700e0[shape=record, label="  %15 = shl i32 %8, 1"];
	Node0x1e70150[shape=record, label="  %16 = sub i32 1, %0"];
	Node0x1e701c0[shape=record, label="  %17 = add i32 %16, %10"];
	Node0x1e70230[shape=record, label="  %18 = add i32 %17, %11"];
	Node0x1e702a0[shape=record, label="  %19 = sub i32 %18, %14"];
	Node0x1e70310[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1e70380[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x1e703f0[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x1e70460[shape=record, label="  %23 = icmp eq i32 %22, %3"];
	Node0x1e10268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e70900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1e70950[shape=record, label="  ret void"];
	Node0x1e6faf0 -> Node0x1e6fb90;
	Node0x1e6fb90 -> Node0x1e6fc50;
	Node0x1e6fc50 -> Node0x1e6fcc0;
	Node0x1e6fcc0 -> Node0x1e6fd30;
	Node0x1e6fd30 -> Node0x1e6fda0;
	Node0x1e6fda0 -> Node0x1e6fe10;
	Node0x1e6fe10 -> Node0x1e6fe80;
	Node0x1e6fe80 -> Node0x1e6fef0;
	Node0x1e6fef0 -> Node0x1e6ff60;
	Node0x1e6ff60 -> Node0x1e70000;
	Node0x1e70000 -> Node0x1e70070;
	Node0x1e70070 -> Node0x1e700e0;
	Node0x1e700e0 -> Node0x1e70150;
	Node0x1e70150 -> Node0x1e701c0;
	Node0x1e701c0 -> Node0x1e70230;
	Node0x1e70230 -> Node0x1e702a0;
	Node0x1e702a0 -> Node0x1e70310;
	Node0x1e70310 -> Node0x1e70380;
	Node0x1e70380 -> Node0x1e703f0;
	Node0x1e703f0 -> Node0x1e70460;
	Node0x1e70460 -> Node0x1e10268;
	Node0x1e10268 -> Node0x1e70900;
	Node0x1e70900 -> Node0x1e70950;
edge [color=red]
	Node0x1e6fc50 -> Node0x1e6fcc0;
	Node0x1e6fb90 -> Node0x1e6fd30;
	Node0x1e6fcc0 -> Node0x1e6fd30;
	Node0x1e6fd30 -> Node0x1e6fe10;
	Node0x1e6faf0 -> Node0x1e6fe80;
	Node0x1e6fe80 -> Node0x1e6ff60;
	Node0x1e6ff60 -> Node0x1e70000;
	Node0x1e6fda0 -> Node0x1e700e0;
	Node0x1e70150 -> Node0x1e701c0;
	Node0x1e6fe80 -> Node0x1e701c0;
	Node0x1e701c0 -> Node0x1e70230;
	Node0x1e6fef0 -> Node0x1e70230;
	Node0x1e70230 -> Node0x1e702a0;
	Node0x1e70070 -> Node0x1e702a0;
	Node0x1e702a0 -> Node0x1e70310;
	Node0x1e70000 -> Node0x1e70310;
	Node0x1e70310 -> Node0x1e70380;
	Node0x1e700e0 -> Node0x1e70380;
	Node0x1e70380 -> Node0x1e703f0;
	Node0x1e6fe10 -> Node0x1e703f0;
	Node0x1e703f0 -> Node0x1e70460;
	Node0x1e6faf0 -> Node0x1e70460;
	Node0x1e70460 -> Node0x1e10268;
	Node0x1e10268 -> Node0x1e70900;
}
