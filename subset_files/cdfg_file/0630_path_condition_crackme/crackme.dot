digraph "DFG for'crackme' function" {
	Node0x1f37630[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1f37ce0[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x1f37da0[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x1f37e40[shape=record, label="  %6 = mul i32 %5, -4"];
	Node0x1f37eb0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1f37f20[shape=record, label="  %8 = or i32 %7, %0"];
	Node0x1f37fc0[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0x1f38030[shape=record, label="  %10 = xor i32 %3, -1"];
	Node0x1f380a0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x1f38110[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1f38180[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x1f381f0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1f38290[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1f38300[shape=record, label="  %16 = xor i32 %8, -1"];
	Node0x1f38370[shape=record, label="  %17 = and i32 %7, %0"];
	Node0x1f383e0[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1f38450[shape=record, label="  %19 = add i32 %11, %16"];
	Node0x1f384f0[shape=record, label="  %20 = mul i32 %19, 5"];
	Node0x1f38560[shape=record, label="  %21 = sub i32 %6, %1"];
	Node0x1f385d0[shape=record, label="  %22 = add i32 %21, %7"];
	Node0x1f38640[shape=record, label="  %23 = sub i32 %22, %9"];
	Node0x1f386b0[shape=record, label="  %24 = sub i32 %23, %8"];
	Node0x1f38720[shape=record, label="  %25 = add i32 %24, %10"];
	Node0x1f38790[shape=record, label="  %26 = add i32 %25, %12"];
	Node0x1f38800[shape=record, label="  %27 = sub i32 %26, %14"];
	Node0x1f38870[shape=record, label="  %28 = add i32 %27, %18"];
	Node0x1f388e0[shape=record, label="  %29 = add i32 %28, %15"];
	Node0x1f38950[shape=record, label="  %30 = add i32 %29, %20"];
	Node0x1f389c0[shape=record, label="  %31 = icmp eq i32 %30, %4"];
	Node0x1ed8268[shape=record, label="  %32 = select i1 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f39070[shape=record, label="  %33 = tail call i32 @puts(i8* nonnull dereferenceable(1) %32)"];
	Node0x1f390c0[shape=record, label="  ret void"];
	Node0x1f37630 -> Node0x1f37ce0;
	Node0x1f37ce0 -> Node0x1f37da0;
	Node0x1f37da0 -> Node0x1f37e40;
	Node0x1f37e40 -> Node0x1f37eb0;
	Node0x1f37eb0 -> Node0x1f37f20;
	Node0x1f37f20 -> Node0x1f37fc0;
	Node0x1f37fc0 -> Node0x1f38030;
	Node0x1f38030 -> Node0x1f380a0;
	Node0x1f380a0 -> Node0x1f38110;
	Node0x1f38110 -> Node0x1f38180;
	Node0x1f38180 -> Node0x1f381f0;
	Node0x1f381f0 -> Node0x1f38290;
	Node0x1f38290 -> Node0x1f38300;
	Node0x1f38300 -> Node0x1f38370;
	Node0x1f38370 -> Node0x1f383e0;
	Node0x1f383e0 -> Node0x1f38450;
	Node0x1f38450 -> Node0x1f384f0;
	Node0x1f384f0 -> Node0x1f38560;
	Node0x1f38560 -> Node0x1f385d0;
	Node0x1f385d0 -> Node0x1f38640;
	Node0x1f38640 -> Node0x1f386b0;
	Node0x1f386b0 -> Node0x1f38720;
	Node0x1f38720 -> Node0x1f38790;
	Node0x1f38790 -> Node0x1f38800;
	Node0x1f38800 -> Node0x1f38870;
	Node0x1f38870 -> Node0x1f388e0;
	Node0x1f388e0 -> Node0x1f38950;
	Node0x1f38950 -> Node0x1f389c0;
	Node0x1f389c0 -> Node0x1ed8268;
	Node0x1ed8268 -> Node0x1f39070;
	Node0x1f39070 -> Node0x1f390c0;
edge [color=red]
	Node0x1f37630 -> Node0x1f37ce0;
	Node0x1f37da0 -> Node0x1f37e40;
	Node0x1f37eb0 -> Node0x1f37f20;
	Node0x1f37630 -> Node0x1f38030;
	Node0x1f380a0 -> Node0x1f38110;
	Node0x1f38180 -> Node0x1f381f0;
	Node0x1f381f0 -> Node0x1f38290;
	Node0x1f37f20 -> Node0x1f38300;
	Node0x1f37eb0 -> Node0x1f38370;
	Node0x1f38370 -> Node0x1f383e0;
	Node0x1f380a0 -> Node0x1f38450;
	Node0x1f38300 -> Node0x1f38450;
	Node0x1f38450 -> Node0x1f384f0;
	Node0x1f37e40 -> Node0x1f38560;
	Node0x1f38560 -> Node0x1f385d0;
	Node0x1f37eb0 -> Node0x1f385d0;
	Node0x1f385d0 -> Node0x1f38640;
	Node0x1f37fc0 -> Node0x1f38640;
	Node0x1f38640 -> Node0x1f386b0;
	Node0x1f37f20 -> Node0x1f386b0;
	Node0x1f386b0 -> Node0x1f38720;
	Node0x1f38030 -> Node0x1f38720;
	Node0x1f38720 -> Node0x1f38790;
	Node0x1f38110 -> Node0x1f38790;
	Node0x1f38790 -> Node0x1f38800;
	Node0x1f381f0 -> Node0x1f38800;
	Node0x1f38800 -> Node0x1f38870;
	Node0x1f383e0 -> Node0x1f38870;
	Node0x1f38870 -> Node0x1f388e0;
	Node0x1f38290 -> Node0x1f388e0;
	Node0x1f388e0 -> Node0x1f38950;
	Node0x1f384f0 -> Node0x1f38950;
	Node0x1f38950 -> Node0x1f389c0;
	Node0x1f37ce0 -> Node0x1f389c0;
	Node0x1f389c0 -> Node0x1ed8268;
	Node0x1ed8268 -> Node0x1f39070;
}
