digraph "DFG for'crackme' function" {
	Node0x188db00[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x188e180[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x188e1f0[shape=record, label="  %7 = xor i32 %6, %3"];
	Node0x188e290[shape=record, label="  %8 = sub i32 2, %0"];
	Node0x188e300[shape=record, label="  %9 = add i32 %8, %5"];
	Node0x188e370[shape=record, label="  %10 = add i32 %9, %7"];
	Node0x188e3e0[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x188e450[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x188e4c0[shape=record, label="  %13 = and i32 %11, %1"];
	Node0x188e530[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x188e5a0[shape=record, label="  %15 = xor i32 %2, %1"];
	Node0x188e640[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x188e6b0[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x188e720[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x188e790[shape=record, label="  %19 = or i32 %3, %0"];
	Node0x188e800[shape=record, label="  %20 = xor i32 %3, -1"];
	Node0x188e870[shape=record, label="  %21 = or i32 %20, %0"];
	Node0x188e8e0[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x188e950[shape=record, label="  %23 = xor i32 %19, -1"];
	Node0x188e9f0[shape=record, label="  %24 = mul i32 %23, 5"];
	Node0x188ea60[shape=record, label="  %25 = and i32 %20, %0"];
	Node0x188ead0[shape=record, label="  %26 = add i32 %25, %1"];
	Node0x188eb70[shape=record, label="  %27 = mul i32 %26, 3"];
	Node0x188ebe0[shape=record, label="  %28 = add i32 %22, %3"];
	Node0x188ec50[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x188ecc0[shape=record, label="  %30 = sub i32 5, %0"];
	Node0x188ed30[shape=record, label="  %31 = sub i32 %30, %12"];
	Node0x188eda0[shape=record, label="  %32 = add i32 %31, %14"];
	Node0x188f020[shape=record, label="  %33 = sub i32 %32, %17"];
	Node0x188f090[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x188f100[shape=record, label="  %35 = add i32 %34, %5"];
	Node0x188f170[shape=record, label="  %36 = sub i32 %35, %13"];
	Node0x188f1e0[shape=record, label="  %37 = sub i32 %36, %16"];
	Node0x188f250[shape=record, label="  %38 = sub i32 %37, %18"];
	Node0x188f2c0[shape=record, label="  %39 = add i32 %38, %19"];
	Node0x188f330[shape=record, label="  %40 = sub i32 %39, %21"];
	Node0x188f3a0[shape=record, label="  %41 = add i32 %40, %24"];
	Node0x188f410[shape=record, label="  %42 = add i32 %41, %27"];
	Node0x188f480[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x188f4f0[shape=record, label="  %44 = icmp eq i32 %10, %43"];
	Node0x182e268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x188f990[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x188f9e0[shape=record, label="  ret void"];
	Node0x188db00 -> Node0x188e180;
	Node0x188e180 -> Node0x188e1f0;
	Node0x188e1f0 -> Node0x188e290;
	Node0x188e290 -> Node0x188e300;
	Node0x188e300 -> Node0x188e370;
	Node0x188e370 -> Node0x188e3e0;
	Node0x188e3e0 -> Node0x188e450;
	Node0x188e450 -> Node0x188e4c0;
	Node0x188e4c0 -> Node0x188e530;
	Node0x188e530 -> Node0x188e5a0;
	Node0x188e5a0 -> Node0x188e640;
	Node0x188e640 -> Node0x188e6b0;
	Node0x188e6b0 -> Node0x188e720;
	Node0x188e720 -> Node0x188e790;
	Node0x188e790 -> Node0x188e800;
	Node0x188e800 -> Node0x188e870;
	Node0x188e870 -> Node0x188e8e0;
	Node0x188e8e0 -> Node0x188e950;
	Node0x188e950 -> Node0x188e9f0;
	Node0x188e9f0 -> Node0x188ea60;
	Node0x188ea60 -> Node0x188ead0;
	Node0x188ead0 -> Node0x188eb70;
	Node0x188eb70 -> Node0x188ebe0;
	Node0x188ebe0 -> Node0x188ec50;
	Node0x188ec50 -> Node0x188ecc0;
	Node0x188ecc0 -> Node0x188ed30;
	Node0x188ed30 -> Node0x188eda0;
	Node0x188eda0 -> Node0x188f020;
	Node0x188f020 -> Node0x188f090;
	Node0x188f090 -> Node0x188f100;
	Node0x188f100 -> Node0x188f170;
	Node0x188f170 -> Node0x188f1e0;
	Node0x188f1e0 -> Node0x188f250;
	Node0x188f250 -> Node0x188f2c0;
	Node0x188f2c0 -> Node0x188f330;
	Node0x188f330 -> Node0x188f3a0;
	Node0x188f3a0 -> Node0x188f410;
	Node0x188f410 -> Node0x188f480;
	Node0x188f480 -> Node0x188f4f0;
	Node0x188f4f0 -> Node0x182e268;
	Node0x182e268 -> Node0x188f990;
	Node0x188f990 -> Node0x188f9e0;
edge [color=red]
	Node0x188e180 -> Node0x188e1f0;
	Node0x188e290 -> Node0x188e300;
	Node0x188db00 -> Node0x188e300;
	Node0x188e300 -> Node0x188e370;
	Node0x188e1f0 -> Node0x188e370;
	Node0x188e3e0 -> Node0x188e450;
	Node0x188e3e0 -> Node0x188e4c0;
	Node0x188e4c0 -> Node0x188e530;
	Node0x188e5a0 -> Node0x188e640;
	Node0x188e6b0 -> Node0x188e720;
	Node0x188e800 -> Node0x188e870;
	Node0x188e790 -> Node0x188e950;
	Node0x188e950 -> Node0x188e9f0;
	Node0x188e800 -> Node0x188ea60;
	Node0x188ea60 -> Node0x188ead0;
	Node0x188ead0 -> Node0x188eb70;
	Node0x188e8e0 -> Node0x188ebe0;
	Node0x188ebe0 -> Node0x188ec50;
	Node0x188ecc0 -> Node0x188ed30;
	Node0x188e450 -> Node0x188ed30;
	Node0x188ed30 -> Node0x188eda0;
	Node0x188e530 -> Node0x188eda0;
	Node0x188eda0 -> Node0x188f020;
	Node0x188e6b0 -> Node0x188f020;
	Node0x188f020 -> Node0x188f090;
	Node0x188e5a0 -> Node0x188f090;
	Node0x188f090 -> Node0x188f100;
	Node0x188db00 -> Node0x188f100;
	Node0x188f100 -> Node0x188f170;
	Node0x188e4c0 -> Node0x188f170;
	Node0x188f170 -> Node0x188f1e0;
	Node0x188e640 -> Node0x188f1e0;
	Node0x188f1e0 -> Node0x188f250;
	Node0x188e720 -> Node0x188f250;
	Node0x188f250 -> Node0x188f2c0;
	Node0x188e790 -> Node0x188f2c0;
	Node0x188f2c0 -> Node0x188f330;
	Node0x188e870 -> Node0x188f330;
	Node0x188f330 -> Node0x188f3a0;
	Node0x188e9f0 -> Node0x188f3a0;
	Node0x188f3a0 -> Node0x188f410;
	Node0x188eb70 -> Node0x188f410;
	Node0x188f410 -> Node0x188f480;
	Node0x188ec50 -> Node0x188f480;
	Node0x188e370 -> Node0x188f4f0;
	Node0x188f480 -> Node0x188f4f0;
	Node0x188f4f0 -> Node0x182e268;
	Node0x182e268 -> Node0x188f990;
}
