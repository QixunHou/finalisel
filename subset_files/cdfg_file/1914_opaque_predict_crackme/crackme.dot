digraph "DFG for'crackme' function" {
	Node0x14fae00[shape=record, label="  %5 = shl i32 %2, 2"];
	Node0x14faea0[shape=record, label="  %6 = add i32 %5, -1"];
	Node0x14faf10[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x14fafb0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x14fb050[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x14fb0c0[shape=record, label="  %10 = add i32 %6, %9"];
	Node0x14fb130[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x14fb1a0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x14fb210[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x14fb280[shape=record, label="  %14 = shl i32 %1, 1"];
	Node0x14fb2f0[shape=record, label="  %15 = xor i32 %2, -1"];
	Node0x14fb360[shape=record, label="  %16 = or i32 %15, %1"];
	Node0x14fb3d0[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x14fb440[shape=record, label="  %18 = and i32 %2, %1"];
	Node0x14fb4b0[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x14fb520[shape=record, label="  %20 = shl i32 %17, 1"];
	Node0x14fb590[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x14fb600[shape=record, label="  %22 = xor i32 %16, -1"];
	Node0x14fb670[shape=record, label="  %23 = and i32 %15, %1"];
	Node0x14fb710[shape=record, label="  %24 = mul i32 %18, 7"];
	Node0x14fb780[shape=record, label="  %25 = or i32 %3, %0"];
	Node0x14fb7f0[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x14fb890[shape=record, label="  %27 = xor i32 %0, 2147483647"];
	Node0x14fb900[shape=record, label="  %28 = and i32 %27, %3"];
	Node0x14fb970[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x14fb9e0[shape=record, label="  %30 = xor i32 %29, -2"];
	Node0x14fba50[shape=record, label="  %31 = and i32 %3, %0"];
	Node0x14fbac0[shape=record, label="  %32 = xor i32 %31, -1"];
	Node0x14fbd40[shape=record, label="  %33 = xor i32 %25, -1"];
	Node0x14fbdb0[shape=record, label="  %34 = xor i32 %3, -1"];
	Node0x14fbe20[shape=record, label="  %35 = and i32 %34, %0"];
	Node0x14fbe90[shape=record, label="  %36 = add i32 %22, %3"];
	Node0x14fbf00[shape=record, label="  %37 = add i32 %36, %35"];
	Node0x14fbfa0[shape=record, label="  %38 = mul i32 %37, 3"];
	Node0x14fc010[shape=record, label="  %39 = add i32 %31, %33"];
	Node0x14fc0b0[shape=record, label="  %40 = mul i32 %39, 5"];
	Node0x14fc120[shape=record, label="  %41 = sub i32 1, %1"];
	Node0x14fc190[shape=record, label="  %42 = add i32 %41, %14"];
	Node0x14fc200[shape=record, label="  %43 = add i32 %42, %11"];
	Node0x14fc270[shape=record, label="  %44 = sub i32 %43, %16"];
	Node0x14fc2e0[shape=record, label="  %45 = sub i32 %44, %17"];
	Node0x14fc350[shape=record, label="  %46 = add i32 %45, %19"];
	Node0x14fc3c0[shape=record, label="  %47 = sub i32 %46, %23"];
	Node0x14fc430[shape=record, label="  %48 = add i32 %47, %24"];
	Node0x14fc4a0[shape=record, label="  %49 = add i32 %48, %32"];
	Node0x14fc510[shape=record, label="  %50 = sub i32 %49, %13"];
	Node0x14fc580[shape=record, label="  %51 = add i32 %50, %21"];
	Node0x14fc5f0[shape=record, label="  %52 = sub i32 %51, %26"];
	Node0x14fc660[shape=record, label="  %53 = add i32 %52, %8"];
	Node0x14fc6d0[shape=record, label="  %54 = sub i32 %53, %29"];
	Node0x14fc740[shape=record, label="  %55 = sub i32 %54, %30"];
	Node0x14fc7b0[shape=record, label="  %56 = add i32 %55, %40"];
	Node0x14fc820[shape=record, label="  %57 = add i32 %56, %38"];
	Node0x14fc890[shape=record, label="  %58 = icmp eq i32 %10, %57"];
	Node0x149b268[shape=record, label="  %59 = select i1 %58, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x14fcd30[shape=record, label="  %60 = tail call i32 @puts(i8* nonnull dereferenceable(1) %59)"];
	Node0x14fcd80[shape=record, label="  ret void"];
	Node0x14fae00 -> Node0x14faea0;
	Node0x14faea0 -> Node0x14faf10;
	Node0x14faf10 -> Node0x14fafb0;
	Node0x14fafb0 -> Node0x14fb050;
	Node0x14fb050 -> Node0x14fb0c0;
	Node0x14fb0c0 -> Node0x14fb130;
	Node0x14fb130 -> Node0x14fb1a0;
	Node0x14fb1a0 -> Node0x14fb210;
	Node0x14fb210 -> Node0x14fb280;
	Node0x14fb280 -> Node0x14fb2f0;
	Node0x14fb2f0 -> Node0x14fb360;
	Node0x14fb360 -> Node0x14fb3d0;
	Node0x14fb3d0 -> Node0x14fb440;
	Node0x14fb440 -> Node0x14fb4b0;
	Node0x14fb4b0 -> Node0x14fb520;
	Node0x14fb520 -> Node0x14fb590;
	Node0x14fb590 -> Node0x14fb600;
	Node0x14fb600 -> Node0x14fb670;
	Node0x14fb670 -> Node0x14fb710;
	Node0x14fb710 -> Node0x14fb780;
	Node0x14fb780 -> Node0x14fb7f0;
	Node0x14fb7f0 -> Node0x14fb890;
	Node0x14fb890 -> Node0x14fb900;
	Node0x14fb900 -> Node0x14fb970;
	Node0x14fb970 -> Node0x14fb9e0;
	Node0x14fb9e0 -> Node0x14fba50;
	Node0x14fba50 -> Node0x14fbac0;
	Node0x14fbac0 -> Node0x14fbd40;
	Node0x14fbd40 -> Node0x14fbdb0;
	Node0x14fbdb0 -> Node0x14fbe20;
	Node0x14fbe20 -> Node0x14fbe90;
	Node0x14fbe90 -> Node0x14fbf00;
	Node0x14fbf00 -> Node0x14fbfa0;
	Node0x14fbfa0 -> Node0x14fc010;
	Node0x14fc010 -> Node0x14fc0b0;
	Node0x14fc0b0 -> Node0x14fc120;
	Node0x14fc120 -> Node0x14fc190;
	Node0x14fc190 -> Node0x14fc200;
	Node0x14fc200 -> Node0x14fc270;
	Node0x14fc270 -> Node0x14fc2e0;
	Node0x14fc2e0 -> Node0x14fc350;
	Node0x14fc350 -> Node0x14fc3c0;
	Node0x14fc3c0 -> Node0x14fc430;
	Node0x14fc430 -> Node0x14fc4a0;
	Node0x14fc4a0 -> Node0x14fc510;
	Node0x14fc510 -> Node0x14fc580;
	Node0x14fc580 -> Node0x14fc5f0;
	Node0x14fc5f0 -> Node0x14fc660;
	Node0x14fc660 -> Node0x14fc6d0;
	Node0x14fc6d0 -> Node0x14fc740;
	Node0x14fc740 -> Node0x14fc7b0;
	Node0x14fc7b0 -> Node0x14fc820;
	Node0x14fc820 -> Node0x14fc890;
	Node0x14fc890 -> Node0x149b268;
	Node0x149b268 -> Node0x14fcd30;
	Node0x14fcd30 -> Node0x14fcd80;
edge [color=red]
	Node0x14fae00 -> Node0x14faea0;
	Node0x14faf10 -> Node0x14fafb0;
	Node0x14fafb0 -> Node0x14fb050;
	Node0x14faea0 -> Node0x14fb0c0;
	Node0x14fb050 -> Node0x14fb0c0;
	Node0x14fb130 -> Node0x14fb1a0;
	Node0x14fb1a0 -> Node0x14fb210;
	Node0x14fb2f0 -> Node0x14fb360;
	Node0x14fb440 -> Node0x14fb4b0;
	Node0x14fb3d0 -> Node0x14fb520;
	Node0x14fb520 -> Node0x14fb590;
	Node0x14fb360 -> Node0x14fb600;
	Node0x14fb2f0 -> Node0x14fb670;
	Node0x14fb440 -> Node0x14fb710;
	Node0x14fb780 -> Node0x14fb7f0;
	Node0x14fb890 -> Node0x14fb900;
	Node0x14fb900 -> Node0x14fb970;
	Node0x14fb970 -> Node0x14fb9e0;
	Node0x14fba50 -> Node0x14fbac0;
	Node0x14fb780 -> Node0x14fbd40;
	Node0x14fbdb0 -> Node0x14fbe20;
	Node0x14fb600 -> Node0x14fbe90;
	Node0x14fbe90 -> Node0x14fbf00;
	Node0x14fbe20 -> Node0x14fbf00;
	Node0x14fbf00 -> Node0x14fbfa0;
	Node0x14fba50 -> Node0x14fc010;
	Node0x14fbd40 -> Node0x14fc010;
	Node0x14fc010 -> Node0x14fc0b0;
	Node0x14fc120 -> Node0x14fc190;
	Node0x14fb280 -> Node0x14fc190;
	Node0x14fc190 -> Node0x14fc200;
	Node0x14fb130 -> Node0x14fc200;
	Node0x14fc200 -> Node0x14fc270;
	Node0x14fb360 -> Node0x14fc270;
	Node0x14fc270 -> Node0x14fc2e0;
	Node0x14fb3d0 -> Node0x14fc2e0;
	Node0x14fc2e0 -> Node0x14fc350;
	Node0x14fb4b0 -> Node0x14fc350;
	Node0x14fc350 -> Node0x14fc3c0;
	Node0x14fb670 -> Node0x14fc3c0;
	Node0x14fc3c0 -> Node0x14fc430;
	Node0x14fb710 -> Node0x14fc430;
	Node0x14fc430 -> Node0x14fc4a0;
	Node0x14fbac0 -> Node0x14fc4a0;
	Node0x14fc4a0 -> Node0x14fc510;
	Node0x14fb210 -> Node0x14fc510;
	Node0x14fc510 -> Node0x14fc580;
	Node0x14fb590 -> Node0x14fc580;
	Node0x14fc580 -> Node0x14fc5f0;
	Node0x14fb7f0 -> Node0x14fc5f0;
	Node0x14fc5f0 -> Node0x14fc660;
	Node0x14fafb0 -> Node0x14fc660;
	Node0x14fc660 -> Node0x14fc6d0;
	Node0x14fb970 -> Node0x14fc6d0;
	Node0x14fc6d0 -> Node0x14fc740;
	Node0x14fb9e0 -> Node0x14fc740;
	Node0x14fc740 -> Node0x14fc7b0;
	Node0x14fc0b0 -> Node0x14fc7b0;
	Node0x14fc7b0 -> Node0x14fc820;
	Node0x14fbfa0 -> Node0x14fc820;
	Node0x14fb0c0 -> Node0x14fc890;
	Node0x14fc820 -> Node0x14fc890;
	Node0x14fc890 -> Node0x149b268;
	Node0x149b268 -> Node0x14fcd30;
}
