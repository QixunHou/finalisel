digraph "DFG for'main' function" {
	Node0x1ee22a8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1ee2328[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1ee23b8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1ee2818[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1ee28f8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1ee2a18[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1ee2c50[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1ee2d08[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1ee3c78[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1ee4300[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x1ee4370[shape=record, label="  %9 = xor i32 %7, 2147483647"];
	Node0x1ee43e0[shape=record, label="  %10 = and i32 %9, %6"];
	Node0x1ee4450[shape=record, label="  %11 = add i32 %10, %7"];
	Node0x1ee44c0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1ee4530[shape=record, label="  %13 = add i32 %7, %6"];
	Node0x1ee45a0[shape=record, label="  %14 = sub i32 %12, %13"];
	Node0x1ee4610[shape=record, label="  %15 = icmp eq i32 %8, %14"];
	Node0x1ee4698[shape=record, label="  %16 = select i1 %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ee4730[shape=record, label="  %17 = call i32 @puts(i8* nonnull dereferenceable(1) %16) #5"];
	Node0x1ee48f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1ee4a58[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1ee4b18[shape=record, label="  ret i32 0"];
	Node0x1ee22a8 -> Node0x1ee2328;
	Node0x1ee2328 -> Node0x1ee23b8;
	Node0x1ee23b8 -> Node0x1ee2818;
	Node0x1ee2818 -> Node0x1ee28f8;
	Node0x1ee28f8 -> Node0x1ee2a18;
	Node0x1ee2a18 -> Node0x1ee2c50;
	Node0x1ee2c50 -> Node0x1ee2d08;
	Node0x1ee2d08 -> Node0x1ee3c78;
	Node0x1ee3c78 -> Node0x1ee4300;
	Node0x1ee4300 -> Node0x1ee4370;
	Node0x1ee4370 -> Node0x1ee43e0;
	Node0x1ee43e0 -> Node0x1ee4450;
	Node0x1ee4450 -> Node0x1ee44c0;
	Node0x1ee44c0 -> Node0x1ee4530;
	Node0x1ee4530 -> Node0x1ee45a0;
	Node0x1ee45a0 -> Node0x1ee4610;
	Node0x1ee4610 -> Node0x1ee4698;
	Node0x1ee4698 -> Node0x1ee4730;
	Node0x1ee4730 -> Node0x1ee48f8;
	Node0x1ee48f8 -> Node0x1ee4a58;
	Node0x1ee4a58 -> Node0x1ee4b18;
edge [color=red]
	Node0x1ee22a8 -> Node0x1ee23b8;
	Node0x1ee23b8 -> Node0x1ee2818;
	Node0x1ee2328 -> Node0x1ee28f8;
	Node0x1ee28f8 -> Node0x1ee2a18;
	Node0x1ee22a8 -> Node0x1ee2c50;
	Node0x1ee2328 -> Node0x1ee2c50;
	Node0x1ee22a8 -> Node0x1ee2d08;
	Node0x1ee2328 -> Node0x1ee3c78;
	Node0x1ee3c78 -> Node0x1ee4300;
	Node0x1ee2d08 -> Node0x1ee4300;
	Node0x1ee3c78 -> Node0x1ee4370;
	Node0x1ee4370 -> Node0x1ee43e0;
	Node0x1ee2d08 -> Node0x1ee43e0;
	Node0x1ee43e0 -> Node0x1ee4450;
	Node0x1ee3c78 -> Node0x1ee4450;
	Node0x1ee4450 -> Node0x1ee44c0;
	Node0x1ee3c78 -> Node0x1ee4530;
	Node0x1ee2d08 -> Node0x1ee4530;
	Node0x1ee44c0 -> Node0x1ee45a0;
	Node0x1ee4530 -> Node0x1ee45a0;
	Node0x1ee4300 -> Node0x1ee4610;
	Node0x1ee45a0 -> Node0x1ee4610;
	Node0x1ee4610 -> Node0x1ee4698;
	Node0x1ee4698 -> Node0x1ee4730;
	Node0x1ee28f8 -> Node0x1ee48f8;
	Node0x1ee23b8 -> Node0x1ee4a58;
}
