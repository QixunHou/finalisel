; ModuleID = '../.././c_source_file/0106_path_condition_crackme.c'
source_filename = "../.././c_source_file/0106_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %0
  %10 = xor i32 %4, -1
  %11 = xor i32 %5, -1
  %12 = and i32 %11, %3
  %13 = or i32 %12, %10
  %14 = add i32 %13, %9
  %15 = and i32 %1, %0
  %16 = xor i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = or i32 %15, %17
  %19 = and i32 %7, %0
  %20 = xor i32 %0, -1
  %21 = xor i32 %2, %1
  %22 = and i32 %21, %20
  %23 = or i32 %19, %22
  %24 = xor i32 %2, -1
  %25 = or i32 %24, %1
  %26 = xor i32 %25, -1
  %27 = xor i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %16, %28
  %30 = xor i32 %1, -1
  %31 = or i32 %30, %0
  %32 = and i32 %31, %17
  %33 = and i32 %16, %1
  %34 = and i32 %21, %31
  %35 = xor i32 %15, -1
  %36 = and i32 %21, %35
  %37 = or i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %27, %38
  %40 = or i32 %24, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %1
  %43 = or i32 %15, %38
  %44 = or i32 %2, %1
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %20
  %47 = and i32 %24, %1
  %48 = xor i32 %47, -1
  %49 = and i32 %48, %0
  %50 = or i32 %41, %30
  %51 = or i32 %15, %2
  %52 = and i32 %17, %30
  %53 = or i32 %15, %41
  %54 = and i32 %30, %0
  %55 = and i32 %54, %2
  %56 = or i32 %30, %2
  %57 = and i32 %56, %20
  %58 = or i32 %55, %57
  %59 = and i32 %24, %0
  %60 = xor i32 %59, -1
  %61 = and i32 %60, %28
  %62 = or i32 %47, %20
  %63 = xor i32 %35, %2
  %64 = xor i32 %40, %1
  %65 = and i32 %24, %28
  %66 = or i32 %25, %20
  %67 = xor i32 %21, -1
  %68 = or i32 %67, %20
  %69 = or i32 %1, %0
  %70 = shl i32 %69, 2
  %71 = xor i32 %70, -4
  %72 = and i32 %16, %30
  %73 = xor i32 %54, 2147483647
  %74 = and i32 %73, %17
  %75 = shl i32 %74, 1
  %76 = xor i32 %31, -1
  %77 = or i32 %21, %76
  %78 = xor i32 %44, %0
  %79 = or i32 %19, %78
  %80 = and i32 %7, %20
  %81 = and i32 %21, %0
  %82 = or i32 %80, %81
  %83 = or i32 %27, %2
  %84 = xor i32 %37, %1
  %85 = shl i32 %84, 1
  %86 = add i32 %7, 1
  %87 = and i32 %40, %30
  %88 = or i32 %16, %28
  %89 = or i32 %54, %67
  %90 = xor i32 %37, %15
  %91 = and i32 %69, %24
  %92 = or i32 %54, %24
  %93 = and i32 %44, %0
  %94 = or i32 %80, %93
  %95 = and i32 %2, %0
  %96 = or i32 %95, %1
  %97 = or i32 %47, %54
  %98 = or i32 %17, %1
  %99 = or i32 %59, %7
  %100 = or i32 %54, %17
  %101 = and i32 %45, %20
  %102 = and i32 %47, %20
  %103 = and i32 %45, %0
  %104 = and i32 %47, %0
  %105 = and i32 %26, %20
  %106 = mul i32 %105, 7
  %107 = shl i32 %80, 3
  %108 = and i32 %26, %0
  %109 = or i32 %5, %4
  %110 = xor i32 %109, %3
  %111 = xor i32 %3, -1
  %112 = or i32 %111, %4
  %113 = xor i32 %112, -1
  %114 = xor i32 %5, %4
  %115 = xor i32 %114, -1
  %116 = or i32 %115, %113
  %117 = and i32 %111, %4
  %118 = or i32 %12, %117
  %119 = xor i32 %4, %3
  %120 = and i32 %119, %5
  %121 = xor i32 %5, %3
  %122 = or i32 %121, %113
  %123 = and i32 %5, %4
  %124 = xor i32 %12, -1
  %125 = xor i32 %123, %124
  %126 = shl i32 %125, 1
  %127 = and i32 %111, %5
  %128 = and i32 %127, %4
  %129 = or i32 %121, %4
  %130 = xor i32 %129, 1073741823
  %131 = or i32 %130, %128
  %132 = shl i32 %131, 2
  %133 = xor i32 %119, -1
  %134 = and i32 %133, %5
  %135 = xor i32 %128, %129
  %136 = or i32 %11, %4
  %137 = xor i32 %136, -1
  %138 = or i32 %119, %137
  %139 = and i32 %11, %4
  %140 = or i32 %139, %133
  %141 = and i32 %115, %3
  %142 = or i32 %5, %3
  %143 = or i32 %142, %4
  %144 = shl i32 %143, 1
  %145 = and i32 %4, %3
  %146 = xor i32 %142, -1
  %147 = or i32 %145, %146
  %148 = or i32 %11, %133
  %149 = xor i32 %121, %4
  %150 = xor i32 %149, -1
  %151 = xor i32 %128, %150
  %152 = xor i32 %145, %5
  %153 = or i32 %111, %5
  %154 = and i32 %153, %10
  %155 = or i32 %128, %154
  %156 = and i32 %5, %3
  %157 = or i32 %156, %10
  %158 = or i32 %12, %4
  %159 = or i32 %139, %111
  %160 = or i32 %11, %3
  %161 = xor i32 %160, -1
  %162 = xor i32 %161, %4
  %163 = xor i32 %156, -1
  %164 = add i32 %136, 1
  %165 = xor i32 %109, -1
  %166 = or i32 %165, %111
  %167 = xor i32 %145, -1
  %168 = and i32 %115, %167
  %169 = or i32 %4, %3
  %170 = xor i32 %169, -1
  %171 = add i32 %169, 1
  %172 = and i32 %124, %10
  %173 = and i32 %115, %111
  %174 = and i32 %163, %10
  %175 = or i32 %123, %111
  %176 = and i32 %109, %3
  %177 = and i32 %136, %133
  %178 = xor i32 %123, -1
  %179 = and i32 %178, %133
  %180 = or i32 %119, %115
  %181 = xor i32 %139, -1
  %182 = and i32 %181, %111
  %183 = or i32 %161, %10
  %184 = or i32 %163, %10
  %185 = and i32 %114, %111
  %186 = xor i32 %12, %4
  %187 = and i32 %114, %112
  %188 = xor i32 %139, %160
  %189 = add i32 %119, 1
  %190 = xor i32 %121, -1
  %191 = and i32 %112, %190
  %192 = shl i32 %191, 1
  %193 = or i32 %114, %170
  %194 = and i32 %114, %169
  %195 = xor i32 %136, %145
  %196 = or i32 %114, %113
  %197 = and i32 %156, %10
  %198 = and i32 %142, %4
  %199 = or i32 %197, %198
  %200 = or i32 %165, %133
  %201 = xor i32 %153, %4
  %202 = xor i32 %201, -1
  %203 = xor i32 %128, %202
  %204 = xor i32 %117, -1
  %205 = and i32 %114, %204
  %206 = shl i32 %205, 1
  %207 = and i32 %156, %4
  %208 = and i32 %121, %10
  %209 = or i32 %207, %208
  %210 = shl i32 %209, 1
  %211 = and i32 %127, %10
  %212 = or i32 %121, %10
  %213 = xor i32 %212, -1
  %214 = or i32 %211, %213
  %215 = add i32 %145, 1
  %216 = and i32 %190, %204
  %217 = or i32 %11, %170
  %218 = and i32 %115, %133
  %219 = xor i32 %146, %4
  %220 = or i32 %156, %117
  %221 = or i32 %139, %161
  %222 = or i32 %145, %137
  %223 = or i32 %137, %3
  %224 = xor i32 %181, %3
  %225 = and i32 %136, %111
  %226 = and i32 %142, %10
  %227 = or i32 %207, %226
  %228 = add i32 %109, 1
  %229 = xor i32 %163, %4
  %230 = shl i32 %229, 1
  %231 = or i32 %119, %165
  %232 = xor i32 %112, %5
  %233 = shl i32 %232, 1
  %234 = or i32 %145, %165
  %235 = or i32 %115, %3
  %236 = or i32 %114, %111
  %237 = or i32 %142, %10
  %238 = and i32 %121, %169
  %239 = or i32 %121, %170
  %240 = or i32 %160, %4
  %241 = and i32 %121, %4
  %242 = xor i32 %241, -1
  %243 = xor i32 %197, %242
  %244 = add i32 %123, 1
  %245 = or i32 %145, %11
  %246 = or i32 %207, %150
  %247 = or i32 %119, %5
  %248 = shl i32 %247, 1
  %249 = and i32 %124, %4
  %250 = xor i32 %160, %4
  %251 = or i32 %137, %133
  %252 = and i32 %112, %5
  %253 = and i32 %109, %111
  %254 = and i32 %169, %115
  %255 = and i32 %163, %4
  %256 = and i32 %136, %119
  %257 = or i32 %123, %146
  %258 = and i32 %181, %3
  %259 = shl i32 %258, 1
  %260 = or i32 %190, %10
  %261 = add i32 %121, 1
  %262 = xor i32 %208, 2147483647
  %263 = xor i32 %262, %207
  %264 = or i32 %190, %170
  %265 = or i32 %114, %145
  %266 = and i32 %109, %133
  %267 = and i32 %109, %119
  %268 = xor i32 %154, 2147483647
  %269 = xor i32 %268, %128
  %270 = and i32 %119, %178
  %271 = xor i32 %123, %3
  %272 = shl i32 %271, 1
  %273 = or i32 %170, %5
  %274 = and i32 %119, %115
  %275 = or i32 %121, %145
  %276 = or i32 %123, %133
  %277 = or i32 %115, %133
  %278 = xor i32 %123, %169
  %279 = xor i32 %117, %124
  %280 = or i32 %128, %201
  %281 = or i32 %139, %119
  %282 = and i32 %160, %4
  %283 = xor i32 %142, %4
  %284 = xor i32 %207, -1
  %285 = xor i32 %283, %284
  %286 = xor i32 %136, %3
  %287 = xor i32 %123, %112
  %288 = and i32 %153, %4
  %289 = or i32 %211, %288
  %290 = or i32 %197, %241
  %291 = or i32 %156, %4
  %292 = or i32 %117, %5
  %293 = xor i32 %160, %145
  %294 = or i32 %137, %111
  %295 = or i32 %124, %10
  %296 = xor i32 %226, %284
  %297 = and i32 %119, %11
  %298 = and i32 %112, %11
  %299 = or i32 %145, %161
  %300 = and i32 %121, %112
  %301 = xor i32 %167, %5
  %302 = xor i32 %178, %3
  %303 = add i32 %139, 1
  %304 = xor i32 %117, %163
  %305 = or i32 %113, %5
  %306 = and i32 %169, %11
  %307 = and i32 %136, %3
  %308 = and i32 %169, %5
  %309 = or i32 %165, %3
  %310 = shl i32 %309, 1
  %311 = or i32 %123, %113
  %312 = and i32 %112, %115
  %313 = and i32 %11, %167
  %314 = and i32 %114, %167
  %315 = xor i32 %109, %145
  %316 = xor i32 %170, %5
  %317 = or i32 %114, %3
  %318 = or i32 %114, %117
  %319 = xor i32 %156, %4
  %320 = xor i32 %113, %5
  %321 = xor i32 %124, %4
  %322 = or i32 %190, %113
  %323 = xor i32 %207, %149
  %324 = xor i32 %198, 1073741823
  %325 = xor i32 %324, %197
  %326 = or i32 %139, %3
  %327 = and i32 %114, %133
  %328 = or i32 %190, %4
  %329 = and i32 %121, %204
  %330 = add i32 %114, 1
  %331 = and i32 %160, %10
  %332 = or i32 %160, %10
  %333 = or i32 %146, %10
  %334 = or i32 %117, %190
  %335 = xor i32 %142, %145
  %336 = or i32 %146, %4
  %337 = or i32 %117, %115
  %338 = and i32 %169, %190
  %339 = shl i32 %338, 1
  %340 = or i32 %161, %4
  %341 = or i32 %114, %133
  %342 = or i32 %145, %5
  %343 = or i32 %123, %170
  %344 = or i32 %117, %11
  %345 = shl i32 %344, 1
  %346 = and i32 %114, %119
  %347 = or i32 %133, %5
  %348 = shl i32 %347, 1
  %349 = or i32 %128, %149
  %350 = or i32 %114, %119
  %351 = and i32 %178, %3
  %352 = or i32 %139, %156
  %353 = and i32 %178, %111
  %354 = shl i32 %204, 1
  %355 = and i32 %11, %204
  %356 = xor i32 %288, 2147483647
  %357 = xor i32 %356, %211
  %358 = xor i32 %165, %3
  %359 = or i32 %163, %4
  %360 = or i32 %123, %119
  %361 = and i32 %11, %133
  %362 = or i32 %207, %283
  %363 = or i32 %145, %115
  %364 = or i32 %123, %12
  %365 = xor i32 %139, %163
  %366 = and i32 %119, %181
  %367 = shl i32 %366, 1
  %368 = or i32 %119, %11
  %369 = xor i32 %137, %3
  %370 = xor i32 %190, %4
  %371 = and i32 %181, %133
  %372 = or i32 %124, %4
  %373 = xor i32 %123, %142
  %374 = or i32 %123, %3
  %375 = xor i32 %139, %3
  %376 = shl i32 %169, 1
  %377 = and i32 %190, %10
  %378 = or i32 %115, %170
  %379 = and i32 %190, %167
  %380 = and i32 %121, %167
  %381 = and i32 %115, %204
  %382 = or i32 %145, %190
  %383 = xor i32 %204, %5
  %384 = and i32 %146, %10
  %385 = and i32 %12, %10
  %386 = mul i32 %385, -14
  %387 = and i32 %146, %4
  %388 = and i32 %12, %4
  %389 = mul i32 %388, -24
  %390 = and i32 %161, %10
  %391 = mul i32 %390, -12
  %392 = and i32 %161, %4
  %393 = sub i32 -2, %4
  %394 = add i32 %393, %87
  %395 = add i32 %394, %117
  %396 = add i32 %395, %82
  %397 = add i32 %396, %368
  %398 = add i32 %397, %320
  %399 = add i32 %398, %297
  %400 = add i32 %399, %273
  %401 = add i32 %400, %136
  %402 = add i32 %401, %121
  %403 = add i32 %402, %392
  %404 = add i32 %403, %363
  %405 = add i32 %404, %352
  %406 = add i32 %405, %226
  %407 = add i32 %406, %287
  %408 = add i32 %407, %277
  %409 = add i32 %408, %274
  %410 = add i32 %409, %265
  %411 = add i32 %410, %194
  %412 = add i32 %411, %183
  %413 = add i32 %412, %176
  %414 = add i32 %413, %227
  %415 = add i32 %414, %269
  %416 = add i32 %415, %357
  %417 = add i32 %416, %263
  %418 = shl i32 %417, 1
  %419 = sub i32 %261, %49
  %420 = add i32 %419, %228
  %421 = sub i32 %420, %314
  %422 = sub i32 %421, %207
  %423 = add i32 %422, %251
  %424 = add i32 %423, %222
  %425 = mul i32 %424, 5
  %426 = add i32 %103, %104
  %427 = add i32 %426, %341
  %428 = add i32 %427, %283
  %429 = add i32 %428, %325
  %430 = shl i32 %429, 2
  %431 = sub i32 %108, %387
  %432 = sub i32 %431, %197
  %433 = mul i32 %432, 9
  %434 = add i32 %384, %102
  %435 = mul i32 %434, 10
  %436 = add i32 %19, %101
  %437 = mul i32 %436, 15
  %438 = and i32 %37, %30
  %439 = sub i32 %438, %316
  %440 = add i32 %439, %158
  %441 = add i32 %440, %266
  %442 = add i32 %441, %141
  %443 = mul i32 %442, 3
  %444 = add i32 %15, %0
  %445 = add i32 %444, 2
  %446 = add i32 %445, %26
  %447 = sub i32 %446, %51
  %448 = sub i32 %447, %25
  %449 = add i32 %448, %63
  %450 = add i32 %449, %65
  %451 = add i32 %450, %47
  %452 = add i32 %451, %83
  %453 = add i32 %452, %86
  %454 = add i32 %453, %16
  %455 = add i32 %454, %91
  %456 = add i32 %455, %92
  %457 = add i32 %456, 1
  %458 = sub i32 %457, %18
  %459 = add i32 %458, %29
  %460 = sub i32 %459, %32
  %461 = sub i32 %460, %33
  %462 = sub i32 %461, %34
  %463 = sub i32 %462, %36
  %464 = add i32 %463, %39
  %465 = sub i32 %464, %42
  %466 = sub i32 %465, %43
  %467 = sub i32 %466, %46
  %468 = sub i32 %467, %50
  %469 = add i32 %468, %52
  %470 = add i32 %469, %53
  %471 = add i32 %470, %61
  %472 = sub i32 %471, %62
  %473 = sub i32 %472, %64
  %474 = sub i32 %473, %66
  %475 = add i32 %474, %68
  %476 = sub i32 %475, %71
  %477 = add i32 %476, %72
  %478 = add i32 %477, %77
  %479 = sub i32 %478, %88
  %480 = sub i32 %479, %89
  %481 = sub i32 %480, %90
  %482 = sub i32 %481, %96
  %483 = add i32 %482, %97
  %484 = sub i32 %483, %98
  %485 = add i32 %484, %99
  %486 = sub i32 %485, %100
  %487 = add i32 %486, %4
  %488 = add i32 %487, %23
  %489 = add i32 %488, %58
  %490 = sub i32 %489, %75
  %491 = add i32 %490, %79
  %492 = sub i32 %491, %85
  %493 = sub i32 %492, %94
  %494 = add i32 %493, %106
  %495 = add i32 %494, %107
  %496 = add i32 %495, %171
  %497 = add i32 %496, %189
  %498 = add i32 %497, %215
  %499 = add i32 %498, %145
  %500 = add i32 %499, %119
  %501 = add i32 %500, %120
  %502 = sub i32 %501, %134
  %503 = sub i32 %502, %148
  %504 = add i32 %503, %152
  %505 = add i32 %504, %164
  %506 = add i32 %505, %114
  %507 = add i32 %506, %217
  %508 = sub i32 %507, %139
  %509 = add i32 %508, %123
  %510 = sub i32 %509, %109
  %511 = add i32 %510, %244
  %512 = sub i32 %511, %245
  %513 = add i32 %512, %252
  %514 = add i32 %513, %292
  %515 = sub i32 %514, %298
  %516 = sub i32 %515, %301
  %517 = add i32 %516, %303
  %518 = sub i32 %517, %305
  %519 = add i32 %518, %306
  %520 = sub i32 %519, %308
  %521 = sub i32 %520, %313
  %522 = add i32 %521, %330
  %523 = sub i32 %522, %342
  %524 = add i32 %523, %12
  %525 = sub i32 %524, %354
  %526 = sub i32 %525, %355
  %527 = add i32 %526, %361
  %528 = add i32 %527, %142
  %529 = sub i32 %528, %376
  %530 = add i32 %529, %383
  %531 = add i32 %530, %437
  %532 = add i32 %531, %110
  %533 = add i32 %532, %116
  %534 = sub i32 %533, %118
  %535 = sub i32 %534, %122
  %536 = add i32 %535, %138
  %537 = add i32 %536, %140
  %538 = add i32 %537, %147
  %539 = add i32 %538, %157
  %540 = add i32 %539, %159
  %541 = sub i32 %540, %162
  %542 = sub i32 %541, %166
  %543 = add i32 %542, %168
  %544 = add i32 %543, %172
  %545 = add i32 %544, %173
  %546 = add i32 %545, %174
  %547 = sub i32 %546, %175
  %548 = sub i32 %547, %177
  %549 = add i32 %548, %179
  %550 = sub i32 %549, %180
  %551 = add i32 %550, %182
  %552 = add i32 %551, %184
  %553 = add i32 %552, %185
  %554 = add i32 %553, %186
  %555 = sub i32 %554, %187
  %556 = add i32 %555, %188
  %557 = add i32 %556, %193
  %558 = sub i32 %557, %195
  %559 = add i32 %558, %196
  %560 = add i32 %559, %129
  %561 = add i32 %560, %200
  %562 = add i32 %561, %216
  %563 = sub i32 %562, %218
  %564 = sub i32 %563, %219
  %565 = add i32 %564, %220
  %566 = add i32 %565, %221
  %567 = add i32 %566, %223
  %568 = sub i32 %567, %224
  %569 = sub i32 %568, %225
  %570 = sub i32 %569, %231
  %571 = sub i32 %570, %233
  %572 = sub i32 %571, %234
  %573 = add i32 %572, %235
  %574 = add i32 %573, %236
  %575 = sub i32 %574, %237
  %576 = sub i32 %575, %208
  %577 = add i32 %576, %238
  %578 = sub i32 %577, %239
  %579 = add i32 %578, %240
  %580 = sub i32 %579, %248
  %581 = add i32 %580, %249
  %582 = add i32 %581, %250
  %583 = sub i32 %582, %253
  %584 = sub i32 %583, %254
  %585 = add i32 %584, %255
  %586 = add i32 %585, %256
  %587 = add i32 %586, %257
  %588 = sub i32 %587, %260
  %589 = sub i32 %588, %149
  %590 = sub i32 %589, %264
  %591 = sub i32 %590, %267
  %592 = add i32 %591, %270
  %593 = sub i32 %592, %275
  %594 = sub i32 %593, %276
  %595 = sub i32 %594, %278
  %596 = add i32 %595, %279
  %597 = add i32 %596, %198
  %598 = add i32 %597, %281
  %599 = sub i32 %598, %282
  %600 = sub i32 %599, %286
  %601 = sub i32 %600, %212
  %602 = add i32 %601, %291
  %603 = sub i32 %602, %293
  %604 = sub i32 %603, %294
  %605 = sub i32 %604, %295
  %606 = sub i32 %605, %299
  %607 = sub i32 %606, %300
  %608 = sub i32 %607, %302
  %609 = sub i32 %608, %304
  %610 = sub i32 %609, %241
  %611 = sub i32 %610, %307
  %612 = sub i32 %611, %311
  %613 = sub i32 %612, %312
  %614 = sub i32 %613, %315
  %615 = add i32 %614, %317
  %616 = sub i32 %615, %318
  %617 = sub i32 %616, %319
  %618 = sub i32 %617, %321
  %619 = add i32 %618, %322
  %620 = add i32 %619, %326
  %621 = add i32 %620, %327
  %622 = add i32 %621, %328
  %623 = add i32 %622, %329
  %624 = add i32 %623, %331
  %625 = sub i32 %624, %332
  %626 = add i32 %625, %333
  %627 = add i32 %626, %334
  %628 = add i32 %627, %335
  %629 = sub i32 %628, %336
  %630 = sub i32 %629, %337
  %631 = add i32 %630, %340
  %632 = add i32 %631, %343
  %633 = sub i32 %632, %345
  %634 = add i32 %633, %346
  %635 = sub i32 %634, %348
  %636 = sub i32 %635, %350
  %637 = add i32 %636, %351
  %638 = add i32 %637, %353
  %639 = sub i32 %638, %358
  %640 = sub i32 %639, %359
  %641 = add i32 %640, %360
  %642 = sub i32 %641, %364
  %643 = add i32 %642, %365
  %644 = sub i32 %643, %369
  %645 = add i32 %644, %370
  %646 = sub i32 %645, %371
  %647 = sub i32 %646, %372
  %648 = sub i32 %647, %373
  %649 = sub i32 %648, %374
  %650 = add i32 %649, %375
  %651 = add i32 %650, %377
  %652 = sub i32 %651, %378
  %653 = add i32 %652, %379
  %654 = sub i32 %653, %380
  %655 = add i32 %654, %381
  %656 = sub i32 %655, %382
  %657 = sub i32 %656, %126
  %658 = add i32 %657, %135
  %659 = sub i32 %658, %144
  %660 = add i32 %659, %151
  %661 = sub i32 %660, %155
  %662 = sub i32 %661, %192
  %663 = add i32 %662, %199
  %664 = add i32 %663, %203
  %665 = sub i32 %664, %206
  %666 = sub i32 %665, %214
  %667 = sub i32 %666, %230
  %668 = sub i32 %667, %243
  %669 = sub i32 %668, %246
  %670 = sub i32 %669, %259
  %671 = sub i32 %670, %272
  %672 = add i32 %671, %280
  %673 = sub i32 %672, %285
  %674 = sub i32 %673, %289
  %675 = sub i32 %674, %290
  %676 = sub i32 %675, %296
  %677 = sub i32 %676, %310
  %678 = sub i32 %677, %323
  %679 = sub i32 %678, %339
  %680 = sub i32 %679, %349
  %681 = add i32 %680, %362
  %682 = sub i32 %681, %367
  %683 = add i32 %682, %386
  %684 = add i32 %683, %389
  %685 = add i32 %684, %391
  %686 = sub i32 %685, %210
  %687 = add i32 %686, %435
  %688 = sub i32 %687, %132
  %689 = add i32 %688, %433
  %690 = add i32 %689, %443
  %691 = add i32 %690, %425
  %692 = add i32 %691, %430
  %693 = add i32 %692, %418
  %694 = icmp eq i32 %14, %693
  %695 = select i1 %694, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %696 = tail call i32 @puts(i8* nonnull dereferenceable(1) %695)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
