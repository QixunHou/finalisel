; ModuleID = '../.././c_source_file/1159_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1159_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %2
  %10 = mul i32 %9, -2
  %11 = xor i32 %1, -1
  %12 = and i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %2
  %15 = sub i32 %10, %14
  %16 = xor i32 %3, -1
  %17 = and i32 %16, %4
  %18 = xor i32 %5, %4
  %19 = or i32 %18, %17
  %20 = add i32 %15, %19
  %21 = and i32 %1, %0
  %22 = or i32 %2, %0
  %23 = xor i32 %22, -1
  %24 = or i32 %21, %23
  %25 = or i32 %21, %2
  %26 = xor i32 %2, -1
  %27 = or i32 %26, %1
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %0
  %30 = and i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %8
  %33 = or i32 %11, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %26, %34
  %36 = or i32 %26, %0
  %37 = xor i32 %36, %21
  %38 = xor i32 %2, %0
  %39 = or i32 %38, %11
  %40 = xor i32 %36, -1
  %41 = or i32 %7, %40
  %42 = xor i32 %21, -1
  %43 = xor i32 %2, %1
  %44 = and i32 %43, %42
  %45 = and i32 %36, %1
  %46 = and i32 %38, %8
  %47 = xor i32 %43, -1
  %48 = xor i32 %47, %0
  %49 = shl i32 %7, 1
  %50 = xor i32 %34, %2
  %51 = or i32 %1, %0
  %52 = and i32 %51, %26
  %53 = and i32 %2, %1
  %54 = and i32 %53, %0
  %55 = xor i32 %43, %0
  %56 = xor i32 %54, %55
  %57 = or i32 %2, %1
  %58 = xor i32 %57, -1
  %59 = or i32 %58, %0
  %60 = and i32 %22, %1
  %61 = xor i32 %0, -1
  %62 = and i32 %26, %1
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %61
  %65 = xor i32 %36, %1
  %66 = or i32 %21, %28
  %67 = xor i32 %23, %1
  %68 = and i32 %38, %42
  %69 = xor i32 %51, -1
  %70 = or i32 %69, %2
  %71 = or i32 %23, %11
  %72 = or i32 %53, %61
  %73 = shl i32 %72, 1
  %74 = and i32 %53, %61
  %75 = and i32 %43, %0
  %76 = xor i32 %74, -1
  %77 = xor i32 %75, %76
  %78 = xor i32 %38, -1
  %79 = or i32 %78, %69
  %80 = and i32 %22, %7
  %81 = xor i32 %42, %2
  %82 = and i32 %63, %0
  %83 = and i32 %26, %0
  %84 = and i32 %38, %11
  %85 = and i32 %63, %61
  %86 = xor i32 %28, %0
  %87 = and i32 %57, %0
  %88 = xor i32 %87, %76
  %89 = or i32 %38, %21
  %90 = xor i32 %57, %0
  %91 = or i32 %54, %90
  %92 = xor i32 %53, -1
  %93 = add i32 %53, 1
  %94 = or i32 %38, %7
  %95 = xor i32 %92, %0
  %96 = and i32 %38, %51
  %97 = and i32 %11, %2
  %98 = and i32 %97, %61
  %99 = or i32 %11, %2
  %100 = and i32 %99, %0
  %101 = or i32 %98, %100
  %102 = or i32 %30, %58
  %103 = xor i32 %33, %2
  %104 = or i32 %57, %61
  %105 = or i32 %21, %47
  %106 = shl i32 %105, 1
  %107 = xor i32 %30, %33
  %108 = or i32 %12, %26
  %109 = or i32 %27, %0
  %110 = or i32 %62, %12
  %111 = shl i32 %110, 1
  %112 = xor i32 %83, -1
  %113 = and i32 %112, %8
  %114 = or i32 %7, %26
  %115 = add i32 %83, 1
  %116 = and i32 %97, %0
  %117 = xor i32 %99, %61
  %118 = xor i32 %117, %116
  %119 = or i32 %38, %8
  %120 = and i32 %43, %61
  %121 = xor i32 %54, -1
  %122 = xor i32 %120, %121
  %123 = xor i32 %112, %1
  %124 = or i32 %40, %1
  %125 = add i32 %27, 1
  %126 = or i32 %83, %7
  %127 = xor i32 %55, -1
  %128 = xor i32 %116, %127
  %129 = xor i32 %83, %92
  %130 = or i32 %38, %1
  %131 = or i32 %47, %69
  %132 = or i32 %78, %11
  %133 = or i32 %7, %2
  %134 = and i32 %36, %11
  %135 = and i32 %43, %51
  %136 = and i32 %47, %13
  %137 = or i32 %34, %2
  %138 = and i32 %57, %61
  %139 = or i32 %47, %61
  %140 = or i32 %21, %78
  %141 = shl i32 %140, 1
  %142 = and i32 %22, %8
  %143 = or i32 %43, %69
  %144 = xor i32 %22, %21
  %145 = and i32 %43, %33
  %146 = shl i32 %145, 1
  %147 = and i32 %33, %2
  %148 = or i32 %30, %34
  %149 = or i32 %53, %0
  %150 = or i32 %58, %61
  %151 = add i32 %43, 1
  %152 = xor i32 %138, 2147483647
  %153 = xor i32 %152, %54
  %154 = or i32 %92, %0
  %155 = or i32 %38, %12
  %156 = xor i32 %21, %2
  %157 = and i32 %33, %47
  %158 = and i32 %36, %7
  %159 = or i32 %54, %127
  %160 = or i32 %27, %61
  %161 = shl i32 %160, 1
  %162 = or i32 %83, %1
  %163 = and i32 %42, %2
  %164 = or i32 %62, %0
  %165 = and i32 %33, %78
  %166 = and i32 %78, %11
  %167 = shl i32 %166, 2
  %168 = xor i32 %90, %121
  %169 = or i32 %83, %53
  %170 = and i32 %38, %33
  %171 = xor i32 %83, %1
  %172 = xor i32 %30, %1
  %173 = xor i32 %100, 2147483647
  %174 = xor i32 %173, %98
  %175 = shl i32 %174, 1
  %176 = or i32 %21, %40
  %177 = or i32 %53, %12
  %178 = xor i32 %99, -1
  %179 = or i32 %178, %0
  %180 = xor i32 %116, %179
  %181 = or i32 %23, %1
  %182 = or i32 %43, %61
  %183 = xor i32 %98, %182
  %184 = and i32 %26, %8
  %185 = shl i32 %184, 1
  %186 = shl i32 %11, 1
  %187 = shl i32 %42, 1
  %188 = or i32 %54, %120
  %189 = or i32 %74, %87
  %190 = xor i32 %12, %92
  %191 = or i32 %38, %34
  %192 = xor i32 %83, %27
  %193 = xor i32 %30, %51
  %194 = and i32 %78, %8
  %195 = xor i32 %57, %21
  %196 = and i32 %92, %61
  %197 = or i32 %30, %8
  %198 = shl i32 %197, 2
  %199 = or i32 %43, %0
  %200 = or i32 %43, %12
  %201 = or i32 %26, %8
  %202 = xor i32 %69, %2
  %203 = and i32 %112, %11
  %204 = or i32 %26, %69
  %205 = and i32 %78, %1
  %206 = or i32 %21, %26
  %207 = shl i32 %206, 2
  %208 = and i32 %112, %1
  %209 = or i32 %57, %0
  %210 = xor i32 %40, %1
  %211 = or i32 %92, %61
  %212 = and i32 %51, %47
  %213 = or i32 %43, %34
  %214 = xor i32 %51, %2
  %215 = and i32 %7, %31
  %216 = or i32 %8, %2
  %217 = or i32 %30, %69
  %218 = xor i32 %53, %0
  %219 = and i32 %58, %61
  %220 = and i32 %62, %61
  %221 = and i32 %58, %0
  %222 = mul i32 %221, 22
  %223 = and i32 %62, %0
  %224 = mul i32 %223, 15
  %225 = and i32 %28, %61
  %226 = shl i32 %225, 1
  %227 = and i32 %28, %0
  %228 = mul i32 %227, 14
  %229 = xor i32 %5, -1
  %230 = and i32 %229, %4
  %231 = xor i32 %230, -1
  %232 = and i32 %231, %3
  %233 = or i32 %229, %4
  %234 = xor i32 %233, -1
  %235 = xor i32 %4, %3
  %236 = or i32 %235, %234
  %237 = or i32 %230, %235
  %238 = and i32 %4, %3
  %239 = xor i32 %238, %5
  %240 = xor i32 %5, %3
  %241 = or i32 %240, %17
  %242 = shl i32 %241, 1
  %243 = and i32 %5, %3
  %244 = and i32 %243, %4
  %245 = xor i32 %4, -1
  %246 = or i32 %5, %3
  %247 = xor i32 %246, -1
  %248 = or i32 %247, %4
  %249 = xor i32 %244, %248
  %250 = and i32 %5, %4
  %251 = xor i32 %250, -1
  %252 = add i32 %250, 1
  %253 = or i32 %16, %4
  %254 = xor i32 %253, 2147483647
  %255 = xor i32 %254, %5
  %256 = xor i32 %233, %3
  %257 = xor i32 %233, %238
  %258 = and i32 %231, %16
  %259 = xor i32 %235, -1
  %260 = and i32 %231, %259
  %261 = and i32 %229, %259
  %262 = or i32 %234, %259
  %263 = xor i32 %240, -1
  %264 = and i32 %16, %5
  %265 = and i32 %264, %4
  %266 = or i32 %16, %5
  %267 = and i32 %266, %245
  %268 = or i32 %265, %267
  %269 = xor i32 %240, %4
  %270 = or i32 %265, %269
  %271 = or i32 %5, %4
  %272 = xor i32 %271, %238
  %273 = and i32 %229, %3
  %274 = or i32 %273, %245
  %275 = xor i32 %243, -1
  %276 = xor i32 %17, %275
  %277 = or i32 %250, %235
  %278 = or i32 %18, %238
  %279 = and i32 %235, %251
  %280 = or i32 %259, %5
  %281 = shl i32 %280, 1
  %282 = and i32 %18, %259
  %283 = or i32 %235, %229
  %284 = or i32 %4, %3
  %285 = xor i32 %284, 2147483647
  %286 = xor i32 %18, -1
  %287 = or i32 %285, %286
  %288 = or i32 %240, %245
  %289 = shl i32 %259, 2
  %290 = and i32 %286, %259
  %291 = xor i32 %250, %3
  %292 = and i32 %271, %3
  %293 = shl i32 %292, 1
  %294 = or i32 %17, %229
  %295 = xor i32 %230, %275
  %296 = and i32 %284, %286
  %297 = and i32 %18, %253
  %298 = and i32 %264, %245
  %299 = xor i32 %288, -1
  %300 = or i32 %298, %299
  %301 = and i32 %247, %245
  %302 = mul i32 %301, -6
  %303 = and i32 %273, %245
  %304 = mul i32 %303, -7
  %305 = and i32 %247, %4
  %306 = mul i32 %305, -10
  %307 = and i32 %273, %4
  %308 = and i32 %243, %245
  %309 = shl i32 %265, 4
  %310 = shl i32 %244, 1
  %311 = add i32 %70, %69
  %312 = add i32 %311, %203
  %313 = add i32 %312, %155
  %314 = add i32 %313, %129
  %315 = add i32 %314, %96
  %316 = add i32 %315, %80
  %317 = add i32 %316, %45
  %318 = add i32 %317, %159
  %319 = add i32 %318, %56
  %320 = add i32 %319, %271
  %321 = add i32 %320, %243
  %322 = add i32 %321, %239
  %323 = add i32 %322, %153
  %324 = add i32 %323, %287
  %325 = add i32 %324, %276
  %326 = add i32 %325, %255
  %327 = add i32 %326, %268
  %328 = shl i32 %327, 1
  %329 = sub i32 %13, %33
  %330 = sub i32 %329, %7
  %331 = add i32 %330, %48
  %332 = add i32 %331, %219
  %333 = mul i32 %332, 5
  %334 = sub i32 %138, %12
  %335 = sub i32 %334, %183
  %336 = mul i32 %335, 3
  %337 = add i32 %308, %298
  %338 = mul i32 %337, -9
  %339 = or i32 %54, %220
  %340 = mul i32 %339, 12
  %341 = add i32 %113, %108
  %342 = shl i32 %341, 2
  %343 = sub i32 -2, %0
  %344 = sub i32 %343, %1
  %345 = add i32 %344, %34
  %346 = sub i32 %345, %186
  %347 = sub i32 %346, %25
  %348 = add i32 %347, %35
  %349 = sub i32 %348, %36
  %350 = sub i32 %349, %49
  %351 = sub i32 %350, %50
  %352 = sub i32 %351, %52
  %353 = add i32 %352, %22
  %354 = add i32 %353, %57
  %355 = sub i32 %354, %81
  %356 = add i32 %355, %83
  %357 = add i32 %356, %93
  %358 = sub i32 %357, %103
  %359 = sub i32 %358, %38
  %360 = sub i32 %359, %114
  %361 = add i32 %360, %115
  %362 = add i32 %361, %125
  %363 = sub i32 %362, %133
  %364 = add i32 %363, %137
  %365 = add i32 %364, %147
  %366 = add i32 %365, %30
  %367 = add i32 %366, %151
  %368 = sub i32 %367, %156
  %369 = sub i32 %368, %163
  %370 = sub i32 %369, %187
  %371 = sub i32 %370, %201
  %372 = add i32 %371, %202
  %373 = add i32 %372, %204
  %374 = sub i32 %373, %214
  %375 = sub i32 %374, %216
  %376 = sub i32 %375, %24
  %377 = sub i32 %376, %29
  %378 = sub i32 %377, %32
  %379 = add i32 %378, %37
  %380 = add i32 %379, %39
  %381 = add i32 %380, %41
  %382 = sub i32 %381, %44
  %383 = add i32 %382, %46
  %384 = add i32 %383, %59
  %385 = add i32 %384, %60
  %386 = add i32 %385, %64
  %387 = add i32 %386, %65
  %388 = sub i32 %387, %66
  %389 = sub i32 %388, %67
  %390 = add i32 %389, %68
  %391 = add i32 %390, %71
  %392 = sub i32 %391, %79
  %393 = sub i32 %392, %82
  %394 = sub i32 %393, %84
  %395 = add i32 %394, %85
  %396 = sub i32 %395, %86
  %397 = sub i32 %396, %89
  %398 = sub i32 %397, %94
  %399 = add i32 %398, %95
  %400 = sub i32 %399, %102
  %401 = sub i32 %400, %104
  %402 = sub i32 %401, %107
  %403 = add i32 %402, %109
  %404 = sub i32 %403, %119
  %405 = add i32 %404, %123
  %406 = sub i32 %405, %124
  %407 = sub i32 %406, %126
  %408 = sub i32 %407, %130
  %409 = add i32 %408, %131
  %410 = sub i32 %409, %132
  %411 = sub i32 %410, %134
  %412 = add i32 %411, %135
  %413 = add i32 %412, %136
  %414 = add i32 %413, %139
  %415 = add i32 %414, %142
  %416 = sub i32 %415, %143
  %417 = sub i32 %416, %144
  %418 = add i32 %417, %75
  %419 = sub i32 %418, %148
  %420 = sub i32 %419, %149
  %421 = sub i32 %420, %150
  %422 = add i32 %421, %154
  %423 = add i32 %422, %157
  %424 = add i32 %423, %158
  %425 = sub i32 %424, %162
  %426 = add i32 %425, %164
  %427 = sub i32 %426, %165
  %428 = sub i32 %427, %169
  %429 = add i32 %428, %170
  %430 = sub i32 %429, %171
  %431 = sub i32 %430, %172
  %432 = add i32 %431, %176
  %433 = add i32 %432, %177
  %434 = add i32 %433, %181
  %435 = sub i32 %434, %185
  %436 = sub i32 %435, %190
  %437 = sub i32 %436, %191
  %438 = add i32 %437, %192
  %439 = add i32 %438, %193
  %440 = add i32 %439, %194
  %441 = add i32 %440, %195
  %442 = add i32 %441, %196
  %443 = sub i32 %442, %199
  %444 = add i32 %443, %200
  %445 = add i32 %444, %205
  %446 = sub i32 %445, %207
  %447 = sub i32 %446, %208
  %448 = add i32 %447, %209
  %449 = add i32 %448, %210
  %450 = add i32 %449, %211
  %451 = sub i32 %450, %212
  %452 = add i32 %451, %213
  %453 = add i32 %452, %215
  %454 = add i32 %453, %217
  %455 = sub i32 %454, %120
  %456 = add i32 %455, %218
  %457 = add i32 %456, %74
  %458 = sub i32 %457, %73
  %459 = sub i32 %458, %77
  %460 = add i32 %459, %88
  %461 = sub i32 %460, %91
  %462 = add i32 %461, %101
  %463 = sub i32 %462, %106
  %464 = sub i32 %463, %111
  %465 = sub i32 %464, %118
  %466 = sub i32 %465, %122
  %467 = sub i32 %466, %128
  %468 = sub i32 %467, %141
  %469 = sub i32 %468, %146
  %470 = sub i32 %469, %161
  %471 = sub i32 %470, %167
  %472 = add i32 %471, %168
  %473 = add i32 %472, %180
  %474 = sub i32 %473, %188
  %475 = sub i32 %474, %189
  %476 = sub i32 %475, %198
  %477 = add i32 %476, %222
  %478 = add i32 %477, %224
  %479 = sub i32 %478, %226
  %480 = add i32 %479, %228
  %481 = sub i32 %480, %284
  %482 = add i32 %481, %252
  %483 = add i32 %482, %246
  %484 = sub i32 %483, %261
  %485 = add i32 %484, %263
  %486 = add i32 %485, %283
  %487 = add i32 %486, %250
  %488 = add i32 %487, %264
  %489 = sub i32 %488, %289
  %490 = add i32 %489, %230
  %491 = add i32 %490, %294
  %492 = sub i32 %491, %240
  %493 = add i32 %492, %340
  %494 = add i32 %493, %342
  %495 = sub i32 %494, %175
  %496 = sub i32 %495, %232
  %497 = add i32 %496, %236
  %498 = add i32 %497, %237
  %499 = add i32 %498, %256
  %500 = add i32 %499, %257
  %501 = add i32 %500, %258
  %502 = add i32 %501, %260
  %503 = add i32 %502, %262
  %504 = add i32 %503, %272
  %505 = sub i32 %504, %274
  %506 = sub i32 %505, %277
  %507 = sub i32 %506, %278
  %508 = add i32 %507, %279
  %509 = sub i32 %508, %281
  %510 = sub i32 %509, %282
  %511 = add i32 %510, %288
  %512 = sub i32 %511, %290
  %513 = add i32 %512, %291
  %514 = sub i32 %513, %295
  %515 = sub i32 %514, %296
  %516 = add i32 %515, %297
  %517 = add i32 %516, %307
  %518 = sub i32 %517, %242
  %519 = add i32 %518, %249
  %520 = add i32 %519, %270
  %521 = sub i32 %520, %293
  %522 = add i32 %521, %300
  %523 = add i32 %522, %302
  %524 = add i32 %523, %304
  %525 = add i32 %524, %306
  %526 = sub i32 %525, %309
  %527 = sub i32 %526, %310
  %528 = add i32 %527, %336
  %529 = add i32 %528, %338
  %530 = add i32 %529, %333
  %531 = add i32 %530, %328
  %532 = icmp eq i32 %20, %531
  %533 = select i1 %532, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %534 = tail call i32 @puts(i8* nonnull dereferenceable(1) %533)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
