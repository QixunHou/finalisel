digraph "DFG for'crackme' function" {
	Node0x1a7eba0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1a7ec10[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1a7ecd0[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0x1a7ed40[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x1a7ede0[shape=record, label="  %7 = shl i32 %0, 1"];
	Node0x1a7ee50[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1a7eec0[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1a7ef30[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1a7efa0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1a7f010[shape=record, label="  %12 = and i32 %3, %0"];
	Node0x1a7f080[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x1a7f120[shape=record, label="  %14 = shl i32 %9, 2"];
	Node0x1a7f190[shape=record, label="  %15 = shl i32 %8, 1"];
	Node0x1a7f200[shape=record, label="  %16 = sub i32 %0, %4"];
	Node0x1a7f2a0[shape=record, label="  %17 = mul i32 %16, 3"];
	Node0x1a7f310[shape=record, label="  %18 = sub i32 2, %7"];
	Node0x1a7f380[shape=record, label="  %19 = sub i32 %18, %1"];
	Node0x1a7f3f0[shape=record, label="  %20 = add i32 %19, %3"];
	Node0x1a7f460[shape=record, label="  %21 = sub i32 %20, %6"];
	Node0x1a7f4d0[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0x1a7f540[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x1a7f5b0[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x1a7f620[shape=record, label="  %25 = add i32 %24, %11"];
	Node0x1a7f690[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x1a7f700[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0x1a1f268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a7fba0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1a7fbf0[shape=record, label="  ret void"];
	Node0x1a7eba0 -> Node0x1a7ec10;
	Node0x1a7ec10 -> Node0x1a7ecd0;
	Node0x1a7ecd0 -> Node0x1a7ed40;
	Node0x1a7ed40 -> Node0x1a7ede0;
	Node0x1a7ede0 -> Node0x1a7ee50;
	Node0x1a7ee50 -> Node0x1a7eec0;
	Node0x1a7eec0 -> Node0x1a7ef30;
	Node0x1a7ef30 -> Node0x1a7efa0;
	Node0x1a7efa0 -> Node0x1a7f010;
	Node0x1a7f010 -> Node0x1a7f080;
	Node0x1a7f080 -> Node0x1a7f120;
	Node0x1a7f120 -> Node0x1a7f190;
	Node0x1a7f190 -> Node0x1a7f200;
	Node0x1a7f200 -> Node0x1a7f2a0;
	Node0x1a7f2a0 -> Node0x1a7f310;
	Node0x1a7f310 -> Node0x1a7f380;
	Node0x1a7f380 -> Node0x1a7f3f0;
	Node0x1a7f3f0 -> Node0x1a7f460;
	Node0x1a7f460 -> Node0x1a7f4d0;
	Node0x1a7f4d0 -> Node0x1a7f540;
	Node0x1a7f540 -> Node0x1a7f5b0;
	Node0x1a7f5b0 -> Node0x1a7f620;
	Node0x1a7f620 -> Node0x1a7f690;
	Node0x1a7f690 -> Node0x1a7f700;
	Node0x1a7f700 -> Node0x1a1f268;
	Node0x1a1f268 -> Node0x1a7fba0;
	Node0x1a7fba0 -> Node0x1a7fbf0;
edge [color=red]
	Node0x1a7eba0 -> Node0x1a7ec10;
	Node0x1a7ec10 -> Node0x1a7ecd0;
	Node0x1a7eec0 -> Node0x1a7ef30;
	Node0x1a7ef30 -> Node0x1a7efa0;
	Node0x1a7eba0 -> Node0x1a7f010;
	Node0x1a7f010 -> Node0x1a7f080;
	Node0x1a7eec0 -> Node0x1a7f120;
	Node0x1a7ee50 -> Node0x1a7f190;
	Node0x1a7ec10 -> Node0x1a7f200;
	Node0x1a7f200 -> Node0x1a7f2a0;
	Node0x1a7ede0 -> Node0x1a7f310;
	Node0x1a7f310 -> Node0x1a7f380;
	Node0x1a7f380 -> Node0x1a7f3f0;
	Node0x1a7eba0 -> Node0x1a7f3f0;
	Node0x1a7f3f0 -> Node0x1a7f460;
	Node0x1a7ed40 -> Node0x1a7f460;
	Node0x1a7f460 -> Node0x1a7f4d0;
	Node0x1a7f080 -> Node0x1a7f4d0;
	Node0x1a7f4d0 -> Node0x1a7f540;
	Node0x1a7f120 -> Node0x1a7f540;
	Node0x1a7f540 -> Node0x1a7f5b0;
	Node0x1a7f190 -> Node0x1a7f5b0;
	Node0x1a7f5b0 -> Node0x1a7f620;
	Node0x1a7efa0 -> Node0x1a7f620;
	Node0x1a7f620 -> Node0x1a7f690;
	Node0x1a7f2a0 -> Node0x1a7f690;
	Node0x1a7ecd0 -> Node0x1a7f700;
	Node0x1a7f690 -> Node0x1a7f700;
	Node0x1a7f700 -> Node0x1a1f268;
	Node0x1a1f268 -> Node0x1a7fba0;
}
