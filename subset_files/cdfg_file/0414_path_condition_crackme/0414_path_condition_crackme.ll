; ModuleID = '../.././c_source_file/0414_path_condition_crackme.c'
source_filename = "../.././c_source_file/0414_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %5, %2
  %7 = xor i32 %2, %0
  %8 = and i32 %7, %4
  %9 = add i32 %8, %6
  %10 = xor i32 %1, %0
  %11 = and i32 %7, %10
  %12 = shl i32 %11, 1
  %13 = xor i32 %0, -1
  %14 = xor i32 %2, -1
  %15 = or i32 %14, %1
  %16 = xor i32 %15, -1
  %17 = or i32 %16, %13
  %18 = and i32 %2, %1
  %19 = shl i32 %18, 1
  %20 = or i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %13
  %23 = xor i32 %7, -1
  %24 = or i32 %2, %0
  %25 = xor i32 %24, %1
  %26 = and i32 %4, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %2
  %29 = xor i32 %10, -1
  %30 = and i32 %14, %29
  %31 = and i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %32, %2
  %34 = and i32 %29, %2
  %35 = and i32 %7, %29
  %36 = and i32 %4, %2
  %37 = and i32 %36, %0
  %38 = xor i32 %2, %1
  %39 = or i32 %38, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %37, %40
  %42 = or i32 %4, %2
  %43 = and i32 %42, %13
  %44 = or i32 %37, %43
  %45 = xor i32 %38, -1
  %46 = or i32 %45, %0
  %47 = or i32 %7, %26
  %48 = xor i32 %5, -1
  %49 = xor i32 %48, %2
  %50 = xor i32 %18, -1
  %51 = or i32 %50, %13
  %52 = and i32 %14, %1
  %53 = xor i32 %52, -1
  %54 = and i32 %53, %13
  %55 = add i32 %52, 1
  %56 = and i32 %45, %0
  %57 = and i32 %14, %27
  %58 = shl i32 %57, 1
  %59 = or i32 %14, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %10, %60
  %62 = shl i32 %61, 1
  %63 = and i32 %45, %32
  %64 = shl i32 %32, 1
  %65 = xor i32 %15, %0
  %66 = or i32 %26, %14
  %67 = and i32 %24, %29
  %68 = xor i32 %24, -1
  %69 = or i32 %68, %4
  %70 = xor i32 %42, %0
  %71 = or i32 %37, %70
  %72 = and i32 %14, %0
  %73 = and i32 %14, %32
  %74 = xor i32 %38, %0
  %75 = or i32 %10, %2
  %76 = or i32 %68, %29
  %77 = and i32 %2, %0
  %78 = xor i32 %77, -1
  %79 = xor i32 %78, %1
  %80 = and i32 %10, %14
  %81 = xor i32 %18, %0
  %82 = and i32 %36, %13
  %83 = or i32 %38, %13
  %84 = xor i32 %83, -1
  %85 = or i32 %82, %84
  %86 = or i32 %48, %2
  %87 = xor i32 %15, %31
  %88 = xor i32 %74, -1
  %89 = xor i32 %37, %88
  %90 = or i32 %1, %0
  %91 = xor i32 %77, %90
  %92 = shl i32 %91, 1
  %93 = or i32 %60, %4
  %94 = and i32 %5, %14
  %95 = or i32 %31, %16
  %96 = shl i32 %52, 1
  %97 = and i32 %78, %1
  %98 = xor i32 %50, %0
  %99 = or i32 %37, %74
  %100 = or i32 %18, %0
  %101 = xor i32 %26, %2
  %102 = and i32 %50, %13
  %103 = and i32 %18, %0
  %104 = and i32 %38, %13
  %105 = xor i32 %104, 1073741823
  %106 = xor i32 %105, %103
  %107 = xor i32 %72, %15
  %108 = or i32 %77, %4
  %109 = or i32 %38, %26
  %110 = or i32 %38, %48
  %111 = shl i32 %110, 1
  %112 = or i32 %72, %18
  %113 = xor i32 %70, -1
  %114 = xor i32 %37, %113
  %115 = and i32 %7, %90
  %116 = or i32 %14, %29
  %117 = or i32 %31, %2
  %118 = and i32 %15, %13
  %119 = or i32 %45, %13
  %120 = or i32 %10, %23
  %121 = or i32 %77, %48
  %122 = xor i32 %72, -1
  %123 = shl i32 %122, 1
  %124 = xor i32 %90, -1
  %125 = or i32 %23, %124
  %126 = and i32 %90, %45
  %127 = xor i32 %45, %0
  %128 = or i32 %31, %23
  %129 = or i32 %14, %124
  %130 = or i32 %77, %10
  %131 = and i32 %18, %13
  %132 = and i32 %20, %0
  %133 = or i32 %131, %132
  %134 = and i32 %24, %4
  %135 = and i32 %38, %27
  %136 = xor i32 %68, %1
  %137 = or i32 %7, %29
  %138 = or i32 %77, %21
  %139 = or i32 %72, %1
  %140 = and i32 %23, %27
  %141 = or i32 %60, %1
  %142 = shl i32 %141, 1
  %143 = and i32 %78, %29
  %144 = xor i32 %77, %1
  %145 = or i32 %16, %0
  %146 = or i32 %23, %1
  %147 = or i32 %38, %124
  %148 = and i32 %7, %1
  %149 = or i32 %31, %45
  %150 = and i32 %122, %1
  %151 = and i32 %23, %29
  %152 = or i32 %7, %124
  %153 = or i32 %18, %13
  %154 = and i32 %42, %0
  %155 = or i32 %82, %154
  %156 = or i32 %26, %2
  %157 = and i32 %38, %90
  %158 = xor i32 %20, %0
  %159 = or i32 %103, %158
  %160 = xor i32 %77, %20
  %161 = or i32 %7, %31
  %162 = and i32 %122, %4
  %163 = or i32 %18, %26
  %164 = xor i32 %27, %2
  %165 = and i32 %122, %29
  %166 = or i32 %23, %4
  %167 = shl i32 %166, 1
  %168 = and i32 %45, %27
  %169 = or i32 %29, %2
  %170 = xor i32 %20, %31
  %171 = and i32 %10, %23
  %172 = xor i32 %132, 2147483647
  %173 = xor i32 %172, %131
  %174 = shl i32 %173, 1
  %175 = or i32 %7, %4
  %176 = and i32 %90, %14
  %177 = or i32 %14, %48
  %178 = or i32 %15, %0
  %179 = and i32 %59, %4
  %180 = xor i32 %90, %2
  %181 = xor i32 %72, %1
  %182 = and i32 %20, %13
  %183 = or i32 %7, %1
  %184 = or i32 %20, %0
  %185 = shl i32 %184, 1
  %186 = or i32 %103, %104
  %187 = or i32 %124, %2
  %188 = shl i32 %187, 1
  %189 = and i32 %38, %32
  %190 = or i32 %45, %124
  %191 = or i32 %23, %48
  %192 = or i32 %31, %14
  %193 = or i32 %38, %31
  %194 = xor i32 %21, %0
  %195 = xor i32 %72, %50
  %196 = xor i32 %52, %0
  %197 = and i32 %7, %32
  %198 = and i32 %50, %0
  %199 = and i32 %45, %13
  %200 = and i32 %38, %0
  %201 = xor i32 %200, -1
  %202 = xor i32 %131, %201
  %203 = and i32 %23, %32
  %204 = or i32 %26, %23
  %205 = and i32 %90, %23
  %206 = xor i32 %82, %83
  %207 = add i32 %90, 1
  %208 = xor i32 %24, %31
  %209 = xor i32 %37, %39
  %210 = and i32 %23, %4
  %211 = shl i32 %210, 1
  %212 = or i32 %31, %21
  %213 = or i32 %53, %0
  %214 = add i32 %24, 1
  %215 = and i32 %10, %78
  %216 = or i32 %10, %68
  %217 = and i32 %38, %5
  %218 = and i32 %5, %45
  %219 = and i32 %59, %10
  %220 = or i32 %103, %88
  %221 = xor i32 %124, %2
  %222 = or i32 %52, %0
  %223 = and i32 %5, %23
  %224 = or i32 %68, %1
  %225 = and i32 %10, %2
  %226 = and i32 %59, %1
  %227 = or i32 %77, %1
  %228 = or i32 %23, %29
  %229 = or i32 %77, %29
  %230 = xor i32 %77, %53
  %231 = and i32 %7, %27
  %232 = xor i32 %122, %1
  %233 = or i32 %77, %52
  %234 = or i32 %7, %48
  %235 = and i32 %32, %2
  %236 = or i32 %31, %60
  %237 = and i32 %21, %13
  %238 = mul i32 %237, -35
  %239 = and i32 %52, %13
  %240 = mul i32 %239, -6
  %241 = and i32 %21, %0
  %242 = mul i32 %241, -15
  %243 = and i32 %52, %0
  %244 = mul i32 %243, -33
  %245 = and i32 %16, %13
  %246 = mul i32 %245, -13
  %247 = mul i32 %131, -17
  %248 = and i32 %16, %0
  %249 = mul i32 %248, -26
  %250 = mul i32 %103, -22
  %251 = add i32 %24, %29
  %252 = add i32 %251, %156
  %253 = add i32 %252, %20
  %254 = add i32 %253, %116
  %255 = add i32 %254, %66
  %256 = add i32 %255, %232
  %257 = add i32 %256, %233
  %258 = add i32 %257, %231
  %259 = add i32 %258, %224
  %260 = add i32 %259, %223
  %261 = add i32 %260, %204
  %262 = add i32 %261, %182
  %263 = add i32 %262, %145
  %264 = add i32 %263, %130
  %265 = add i32 %264, %108
  %266 = add i32 %265, %65
  %267 = add i32 %266, %56
  %268 = shl i32 %267, 1
  %269 = add i32 %236, %189
  %270 = sub i32 %119, %269
  %271 = add i32 %270, %97
  %272 = add i32 %271, %69
  %273 = add i32 %272, %35
  %274 = mul i32 %273, 3
  %275 = add i32 %67, %4
  %276 = add i32 %275, %133
  %277 = add i32 %276, %106
  %278 = shl i32 %277, 2
  %279 = sub i32 %235, %222
  %280 = add i32 %279, %206
  %281 = mul i32 %280, 5
  %282 = add i32 %1, 2
  %283 = sub i32 %282, %2
  %284 = sub i32 %283, %31
  %285 = add i32 %284, %14
  %286 = sub i32 %285, %26
  %287 = add i32 %286, %207
  %288 = add i32 %287, %90
  %289 = add i32 %288, %27
  %290 = add i32 %289, %23
  %291 = sub i32 %290, %28
  %292 = sub i32 %291, %30
  %293 = sub i32 %292, %33
  %294 = sub i32 %293, %34
  %295 = add i32 %294, %49
  %296 = add i32 %295, %55
  %297 = sub i32 %296, %64
  %298 = add i32 %297, %72
  %299 = sub i32 %298, %73
  %300 = add i32 %299, %75
  %301 = sub i32 %300, %80
  %302 = add i32 %301, %50
  %303 = sub i32 %302, %86
  %304 = sub i32 %303, %94
  %305 = add i32 %304, %21
  %306 = sub i32 %305, %101
  %307 = sub i32 %306, %117
  %308 = add i32 %307, %129
  %309 = add i32 %308, %78
  %310 = add i32 %309, %164
  %311 = add i32 %310, %169
  %312 = add i32 %311, %176
  %313 = sub i32 %312, %177
  %314 = sub i32 %313, %180
  %315 = sub i32 %314, %7
  %316 = add i32 %315, %192
  %317 = add i32 %316, %214
  %318 = add i32 %317, %221
  %319 = sub i32 %318, %225
  %320 = sub i32 %319, %38
  %321 = sub i32 %320, %77
  %322 = add i32 %321, %45
  %323 = sub i32 %322, %17
  %324 = sub i32 %323, %19
  %325 = sub i32 %324, %22
  %326 = sub i32 %325, %25
  %327 = sub i32 %326, %46
  %328 = add i32 %327, %47
  %329 = sub i32 %328, %51
  %330 = add i32 %329, %54
  %331 = sub i32 %330, %58
  %332 = sub i32 %331, %63
  %333 = add i32 %332, %74
  %334 = add i32 %333, %76
  %335 = add i32 %334, %79
  %336 = add i32 %335, %81
  %337 = add i32 %336, %87
  %338 = add i32 %337, %93
  %339 = sub i32 %338, %95
  %340 = sub i32 %339, %96
  %341 = sub i32 %340, %98
  %342 = sub i32 %341, %100
  %343 = add i32 %342, %102
  %344 = add i32 %343, %107
  %345 = sub i32 %344, %109
  %346 = add i32 %345, %112
  %347 = add i32 %346, %115
  %348 = sub i32 %347, %118
  %349 = add i32 %348, %120
  %350 = sub i32 %349, %121
  %351 = sub i32 %350, %123
  %352 = sub i32 %351, %125
  %353 = add i32 %352, %126
  %354 = sub i32 %353, %127
  %355 = add i32 %354, %128
  %356 = add i32 %355, %134
  %357 = add i32 %356, %135
  %358 = sub i32 %357, %136
  %359 = sub i32 %358, %137
  %360 = add i32 %359, %138
  %361 = add i32 %360, %139
  %362 = add i32 %361, %140
  %363 = sub i32 %362, %143
  %364 = sub i32 %363, %144
  %365 = add i32 %364, %146
  %366 = add i32 %365, %147
  %367 = sub i32 %366, %148
  %368 = add i32 %367, %149
  %369 = sub i32 %368, %39
  %370 = add i32 %369, %150
  %371 = add i32 %370, %151
  %372 = sub i32 %371, %152
  %373 = sub i32 %372, %153
  %374 = add i32 %373, %157
  %375 = sub i32 %374, %160
  %376 = add i32 %375, %161
  %377 = add i32 %376, %162
  %378 = sub i32 %377, %163
  %379 = add i32 %378, %165
  %380 = sub i32 %379, %168
  %381 = sub i32 %380, %170
  %382 = sub i32 %381, %171
  %383 = add i32 %382, %83
  %384 = sub i32 %383, %175
  %385 = add i32 %384, %178
  %386 = add i32 %385, %179
  %387 = sub i32 %386, %181
  %388 = add i32 %387, %183
  %389 = sub i32 %388, %188
  %390 = sub i32 %389, %190
  %391 = sub i32 %390, %191
  %392 = add i32 %391, %193
  %393 = sub i32 %392, %194
  %394 = add i32 %393, %195
  %395 = add i32 %394, %196
  %396 = add i32 %395, %197
  %397 = add i32 %396, %198
  %398 = sub i32 %397, %199
  %399 = add i32 %398, %203
  %400 = sub i32 %399, %205
  %401 = sub i32 %400, %104
  %402 = sub i32 %401, %208
  %403 = sub i32 %402, %212
  %404 = add i32 %403, %213
  %405 = sub i32 %404, %215
  %406 = sub i32 %405, %216
  %407 = sub i32 %406, %217
  %408 = add i32 %407, %218
  %409 = sub i32 %408, %219
  %410 = add i32 %409, %226
  %411 = add i32 %410, %227
  %412 = add i32 %411, %228
  %413 = add i32 %412, %229
  %414 = add i32 %413, %230
  %415 = add i32 %414, %234
  %416 = add i32 %415, %132
  %417 = add i32 %416, %12
  %418 = add i32 %417, %41
  %419 = add i32 %418, %44
  %420 = sub i32 %419, %62
  %421 = add i32 %420, %71
  %422 = sub i32 %421, %85
  %423 = add i32 %422, %89
  %424 = sub i32 %423, %92
  %425 = sub i32 %424, %99
  %426 = sub i32 %425, %111
  %427 = sub i32 %426, %114
  %428 = sub i32 %427, %142
  %429 = sub i32 %428, %155
  %430 = sub i32 %429, %159
  %431 = sub i32 %430, %167
  %432 = sub i32 %431, %185
  %433 = add i32 %432, %186
  %434 = add i32 %433, %202
  %435 = sub i32 %434, %209
  %436 = sub i32 %435, %211
  %437 = add i32 %436, %220
  %438 = add i32 %437, %238
  %439 = add i32 %438, %240
  %440 = add i32 %439, %242
  %441 = add i32 %440, %244
  %442 = add i32 %441, %246
  %443 = add i32 %442, %247
  %444 = add i32 %443, %249
  %445 = add i32 %444, %250
  %446 = sub i32 %445, %174
  %447 = add i32 %446, %281
  %448 = add i32 %447, %274
  %449 = add i32 %448, %278
  %450 = add i32 %449, %268
  %451 = icmp eq i32 %9, %450
  %452 = select i1 %451, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %453 = tail call i32 @puts(i8* nonnull dereferenceable(1) %452)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
