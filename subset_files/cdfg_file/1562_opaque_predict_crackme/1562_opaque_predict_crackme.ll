; ModuleID = '../.././c_source_file/1562_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1562_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = and i32 %8, %7
  %10 = and i32 %5, %3
  %11 = and i32 %10, %4
  %12 = xor i32 %4, -1
  %13 = xor i32 %5, %3
  %14 = and i32 %13, %12
  %15 = xor i32 %14, -1
  %16 = xor i32 %11, %15
  %17 = sub i32 %16, %9
  %18 = and i32 %1, %0
  %19 = xor i32 %2, %0
  %20 = or i32 %19, %18
  %21 = xor i32 %1, -1
  %22 = and i32 %19, %21
  %23 = and i32 %21, %0
  %24 = or i32 %23, %2
  %25 = xor i32 %2, -1
  %26 = or i32 %18, %25
  %27 = or i32 %25, %0
  %28 = xor i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %27, %29
  %31 = xor i32 %0, -1
  %32 = and i32 %2, %1
  %33 = and i32 %32, %31
  %34 = and i32 %8, %0
  %35 = or i32 %33, %34
  %36 = or i32 %23, %25
  %37 = and i32 %25, %1
  %38 = xor i32 %37, -1
  %39 = xor i32 %7, -1
  %40 = xor i32 %39, %2
  %41 = or i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %42, %1
  %44 = or i32 %8, %23
  %45 = or i32 %37, %23
  %46 = and i32 %25, %0
  %47 = or i32 %46, %1
  %48 = or i32 %2, %1
  %49 = or i32 %48, %0
  %50 = or i32 %28, %25
  %51 = or i32 %19, %28
  %52 = xor i32 %33, -1
  %53 = xor i32 %34, %52
  %54 = and i32 %7, %2
  %55 = or i32 %37, %0
  %56 = or i32 %21, %0
  %57 = and i32 %56, %25
  %58 = or i32 %28, %2
  %59 = xor i32 %8, -1
  %60 = or i32 %18, %59
  %61 = shl i32 %60, 2
  %62 = xor i32 %48, -1
  %63 = or i32 %18, %62
  %64 = or i32 %19, %23
  %65 = shl i32 %64, 1
  %66 = xor i32 %19, -1
  %67 = or i32 %66, %21
  %68 = and i32 %2, %0
  %69 = or i32 %68, %29
  %70 = and i32 %21, %2
  %71 = and i32 %70, %31
  %72 = and i32 %59, %0
  %73 = or i32 %71, %72
  %74 = xor i32 %46, -1
  %75 = and i32 %28, %74
  %76 = xor i32 %68, %56
  %77 = xor i32 %27, -1
  %78 = xor i32 %77, %1
  %79 = or i32 %25, %1
  %80 = xor i32 %79, %18
  %81 = or i32 %19, %39
  %82 = or i32 %42, %1
  %83 = and i32 %7, %25
  %84 = or i32 %68, %62
  %85 = and i32 %59, %31
  %86 = xor i32 %41, %18
  %87 = or i32 %21, %2
  %88 = and i32 %87, %0
  %89 = or i32 %71, %88
  %90 = or i32 %8, %39
  %91 = xor i32 %18, -1
  %92 = and i32 %25, %91
  %93 = and i32 %48, %0
  %94 = xor i32 %93, %52
  %95 = and i32 %74, %21
  %96 = and i32 %56, %66
  %97 = and i32 %66, %91
  %98 = xor i32 %68, %38
  %99 = or i32 %18, %77
  %100 = add i32 %48, 1
  %101 = and i32 %41, %21
  %102 = xor i32 %91, %2
  %103 = and i32 %19, %7
  %104 = and i32 %70, %0
  %105 = xor i32 %87, %31
  %106 = xor i32 %105, %104
  %107 = and i32 %56, %59
  %108 = and i32 %87, %31
  %109 = or i32 %104, %108
  %110 = and i32 %41, %29
  %111 = xor i32 %32, -1
  %112 = and i32 %111, %0
  %113 = xor i32 %74, %1
  %114 = xor i32 %59, %0
  %115 = or i32 %46, %32
  %116 = xor i32 %56, -1
  %117 = add i32 %56, 1
  %118 = or i32 %28, %66
  %119 = xor i32 %27, %18
  %120 = or i32 %79, %31
  %121 = or i32 %116, %2
  %122 = or i32 %23, %59
  %123 = shl i32 %122, 1
  %124 = and i32 %32, %0
  %125 = and i32 %48, %31
  %126 = or i32 %124, %125
  %127 = or i32 %18, %66
  %128 = xor i32 %62, %0
  %129 = shl i32 %37, 2
  %130 = xor i32 %23, -1
  %131 = and i32 %74, %1
  %132 = shl i32 %131, 1
  %133 = or i32 %25, %116
  %134 = or i32 %8, %0
  %135 = or i32 %32, %31
  %136 = or i32 %62, %31
  %137 = and i32 %38, %0
  %138 = xor i32 %48, %0
  %139 = xor i32 %124, -1
  %140 = xor i32 %138, %139
  %141 = xor i32 %41, %1
  %142 = xor i32 %8, %0
  %143 = or i32 %104, %142
  %144 = or i32 %77, %1
  %145 = shl i32 %144, 1
  %146 = or i32 %18, %2
  %147 = xor i32 %116, %2
  %148 = xor i32 %7, %2
  %149 = xor i32 %37, %0
  %150 = or i32 %19, %1
  %151 = shl i32 %150, 1
  %152 = or i32 %42, %29
  %153 = and i32 %41, %1
  %154 = xor i32 %125, %139
  %155 = xor i32 %68, -1
  %156 = and i32 %155, %1
  %157 = xor i32 %79, -1
  %158 = or i32 %157, %0
  %159 = and i32 %79, %31
  %160 = and i32 %155, %21
  %161 = shl i32 %160, 1
  %162 = xor i32 %38, %0
  %163 = and i32 %8, %91
  %164 = and i32 %8, %31
  %165 = xor i32 %164, 2147483647
  %166 = xor i32 %165, %124
  %167 = shl i32 %166, 1
  %168 = or i32 %18, %157
  %169 = and i32 %27, %1
  %170 = shl i32 %169, 1
  %171 = xor i32 %79, %0
  %172 = xor i32 %18, %2
  %173 = or i32 %37, %31
  %174 = or i32 %66, %29
  %175 = xor i32 %46, %111
  %176 = or i32 %38, %0
  %177 = xor i32 %48, %18
  %178 = xor i32 %56, %2
  %179 = xor i32 %46, %1
  %180 = or i32 %124, %138
  %181 = and i32 %19, %1
  %182 = xor i32 %46, %79
  %183 = shl i32 %182, 1
  %184 = and i32 %28, %66
  %185 = shl i32 %184, 1
  %186 = and i32 %41, %28
  %187 = and i32 %7, %66
  %188 = and i32 %25, %29
  %189 = xor i32 %68, %48
  %190 = xor i32 %155, %1
  %191 = or i32 %111, %0
  %192 = or i32 %29, %2
  %193 = and i32 %19, %91
  %194 = or i32 %157, %31
  %195 = and i32 %59, %130
  %196 = or i32 %68, %21
  %197 = or i32 %46, %21
  %198 = and i32 %59, %91
  %199 = and i32 %19, %130
  %200 = xor i32 %88, -1
  %201 = xor i32 %71, %200
  %202 = or i32 %28, %42
  %203 = or i32 %25, %39
  %204 = or i32 %19, %29
  %205 = and i32 %27, %28
  %206 = and i32 %27, %21
  %207 = and i32 %111, %31
  %208 = or i32 %68, %1
  %209 = and i32 %155, %29
  %210 = or i32 %77, %21
  %211 = xor i32 %23, %38
  %212 = or i32 %68, %37
  %213 = and i32 %38, %31
  %214 = and i32 %28, %25
  %215 = add i32 %2, 1
  %216 = or i32 %124, %164
  %217 = or i32 %18, %42
  %218 = shl i32 %217, 1
  %219 = xor i32 %23, %111
  %220 = xor i32 %124, %142
  %221 = shl i32 %220, 1
  %222 = or i32 %8, %18
  %223 = or i32 %39, %2
  %224 = or i32 %59, %39
  %225 = or i32 %38, %31
  %226 = or i32 %59, %0
  %227 = or i32 %68, %28
  %228 = and i32 %28, %155
  %229 = xor i32 %32, %0
  %230 = or i32 %111, %31
  %231 = xor i32 %130, %2
  %232 = shl i32 %231, 1
  %233 = and i32 %130, %2
  %234 = and i32 %19, %56
  %235 = and i32 %62, %31
  %236 = mul i32 %235, 21
  %237 = and i32 %37, %31
  %238 = shl i32 %237, 4
  %239 = and i32 %62, %0
  %240 = mul i32 %239, 13
  %241 = and i32 %37, %0
  %242 = and i32 %157, %31
  %243 = shl i32 %242, 1
  %244 = and i32 %157, %0
  %245 = xor i32 %5, -1
  %246 = xor i32 %3, -1
  %247 = and i32 %246, %4
  %248 = or i32 %247, %245
  %249 = and i32 %10, %12
  %250 = and i32 %13, %4
  %251 = or i32 %249, %250
  %252 = or i32 %246, %4
  %253 = xor i32 %13, -1
  %254 = and i32 %252, %253
  %255 = and i32 %252, %5
  %256 = shl i32 %255, 1
  %257 = or i32 %4, %3
  %258 = xor i32 %257, -1
  %259 = xor i32 %5, %4
  %260 = xor i32 %259, -1
  %261 = or i32 %260, %258
  %262 = xor i32 %247, -1
  %263 = and i32 %260, %262
  %264 = and i32 %246, %5
  %265 = and i32 %264, %12
  %266 = or i32 %246, %5
  %267 = and i32 %266, %4
  %268 = or i32 %265, %267
  %269 = or i32 %5, %4
  %270 = xor i32 %269, -1
  %271 = or i32 %270, %246
  %272 = or i32 %245, %4
  %273 = or i32 %247, %253
  %274 = xor i32 %4, %3
  %275 = xor i32 %274, -1
  %276 = or i32 %259, %275
  %277 = xor i32 %253, %4
  %278 = and i32 %264, %4
  %279 = and i32 %266, %12
  %280 = or i32 %278, %279
  %281 = and i32 %245, %3
  %282 = xor i32 %281, -1
  %283 = or i32 %282, %4
  %284 = and i32 %245, %4
  %285 = xor i32 %284, %3
  %286 = and i32 %282, %12
  %287 = or i32 %284, %274
  %288 = and i32 %5, %4
  %289 = or i32 %5, %3
  %290 = xor i32 %288, %289
  %291 = shl i32 %290, 1
  %292 = xor i32 %272, -1
  %293 = or i32 %13, %247
  %294 = shl i32 %293, 1
  %295 = or i32 %245, %3
  %296 = xor i32 %295, -1
  %297 = xor i32 %288, %3
  %298 = xor i32 %289, -1
  %299 = or i32 %298, %12
  %300 = or i32 %259, %247
  %301 = xor i32 %258, %5
  %302 = or i32 %13, %4
  %303 = xor i32 %278, %302
  %304 = and i32 %269, %3
  %305 = and i32 %4, %3
  %306 = xor i32 %305, -1
  %307 = and i32 %260, %306
  %308 = or i32 %10, %12
  %309 = or i32 %260, %3
  %310 = and i32 %253, %12
  %311 = and i32 %272, %274
  %312 = or i32 %259, %274
  %313 = xor i32 %288, -1
  %314 = and i32 %313, %3
  %315 = or i32 %289, %4
  %316 = add i32 %269, 1
  %317 = and i32 %262, %5
  %318 = shl i32 %317, 1
  %319 = and i32 %245, %306
  %320 = or i32 %260, %275
  %321 = and i32 %245, %262
  %322 = and i32 %257, %260
  %323 = and i32 %269, %274
  %324 = xor i32 %296, %4
  %325 = xor i32 %288, %252
  %326 = xor i32 %10, -1
  %327 = and i32 %326, %4
  %328 = or i32 %305, %245
  %329 = xor i32 %262, %5
  %330 = or i32 %288, %274
  %331 = add i32 %10, 1
  %332 = or i32 %305, %292
  %333 = and i32 %274, %5
  %334 = and i32 %253, %306
  %335 = xor i32 %247, %282
  %336 = or i32 %288, %3
  %337 = shl i32 %336, 1
  %338 = xor i32 %270, %3
  %339 = xor i32 %284, %295
  %340 = xor i32 %272, %305
  %341 = and i32 %274, %245
  %342 = shl i32 %341, 1
  %343 = xor i32 %313, %3
  %344 = or i32 %305, %253
  %345 = or i32 %10, %247
  %346 = xor i32 %252, -1
  %347 = or i32 %288, %346
  %348 = shl i32 %347, 1
  %349 = and i32 %306, %5
  %350 = and i32 %289, %4
  %351 = or i32 %249, %350
  %352 = and i32 %275, %5
  %353 = shl i32 %3, 1
  %354 = or i32 %346, %5
  %355 = xor i32 %288, %282
  %356 = or i32 %281, %247
  %357 = xor i32 %350, -1
  %358 = xor i32 %249, %357
  %359 = and i32 %253, %4
  %360 = or i32 %259, %258
  %361 = or i32 %13, %12
  %362 = xor i32 %361, -1
  %363 = or i32 %265, %362
  %364 = or i32 %11, %14
  %365 = xor i32 %265, %361
  %366 = and i32 %259, %262
  %367 = or i32 %298, %4
  %368 = or i32 %270, %275
  %369 = shl i32 %368, 1
  %370 = xor i32 %295, %305
  %371 = and i32 %260, %246
  %372 = shl i32 %371, 1
  %373 = add i32 %259, 1
  %374 = and i32 %313, %246
  %375 = or i32 %274, %245
  %376 = xor i32 %269, %305
  %377 = and i32 %259, %257
  %378 = or i32 %282, %12
  %379 = xor i32 %284, %326
  %380 = or i32 %274, %5
  %381 = xor i32 %257, %5
  %382 = and i32 %259, %306
  %383 = or i32 %260, %346
  %384 = or i32 %288, %281
  %385 = or i32 %305, %5
  %386 = shl i32 %385, 2
  %387 = xor i32 %346, %5
  %388 = and i32 %259, %252
  %389 = add i32 %3, 1
  %390 = and i32 %298, %12
  %391 = mul i32 %390, 12
  %392 = and i32 %281, %12
  %393 = mul i32 %392, 9
  %394 = and i32 %298, %4
  %395 = and i32 %281, %4
  %396 = and i32 %296, %12
  %397 = mul i32 %396, 6
  %398 = and i32 %296, %4
  %399 = add i32 %27, %117
  %400 = sub i32 %399, %204
  %401 = sub i32 %400, %136
  %402 = sub i32 %401, %140
  %403 = add i32 %402, %367
  %404 = sub i32 %403, %394
  %405 = sub i32 %404, %271
  %406 = mul i32 %405, 3
  %407 = add i32 %241, %77
  %408 = add i32 %407, %189
  %409 = sub i32 %408, %112
  %410 = add i32 %409, %99
  %411 = sub i32 %410, %328
  %412 = add i32 %411, %382
  %413 = mul i32 %412, 5
  %414 = sub i32 %395, %33
  %415 = sub i32 %414, %249
  %416 = mul i32 %415, 7
  %417 = add i32 %398, %244
  %418 = mul i32 %417, 10
  %419 = sub i32 -3, %8
  %420 = add i32 %419, %192
  %421 = add i32 %420, %46
  %422 = add i32 %421, %219
  %423 = add i32 %422, %207
  %424 = add i32 %423, %202
  %425 = add i32 %424, %198
  %426 = add i32 %425, %181
  %427 = add i32 %426, %177
  %428 = add i32 %427, %168
  %429 = add i32 %428, %138
  %430 = add i32 %429, %149
  %431 = add i32 %430, %141
  %432 = add i32 %431, %113
  %433 = add i32 %432, %55
  %434 = add i32 %433, %49
  %435 = add i32 %434, %329
  %436 = add i32 %435, %378
  %437 = add i32 %436, %356
  %438 = add i32 %437, %343
  %439 = add i32 %438, %332
  %440 = add i32 %439, %307
  %441 = add i32 %440, %285
  %442 = add i32 %441, %351
  %443 = shl i32 %442, 1
  %444 = sub i32 1, %1
  %445 = sub i32 %444, %56
  %446 = sub i32 %445, %23
  %447 = add i32 %446, %18
  %448 = add i32 %447, %2
  %449 = add i32 %448, %28
  %450 = add i32 %449, %215
  %451 = sub i32 %450, %24
  %452 = add i32 %451, %26
  %453 = sub i32 %452, %36
  %454 = add i32 %453, %38
  %455 = add i32 %454, %40
  %456 = sub i32 %455, %41
  %457 = add i32 %456, %50
  %458 = sub i32 %457, %54
  %459 = sub i32 %458, %57
  %460 = add i32 %459, %58
  %461 = add i32 %460, %83
  %462 = sub i32 %461, %92
  %463 = add i32 %462, %100
  %464 = add i32 %463, %102
  %465 = sub i32 %464, %121
  %466 = sub i32 %465, %133
  %467 = sub i32 %466, %146
  %468 = add i32 %467, %147
  %469 = sub i32 %468, %148
  %470 = add i32 %469, %19
  %471 = sub i32 %470, %172
  %472 = sub i32 %471, %178
  %473 = add i32 %472, %42
  %474 = add i32 %473, %188
  %475 = sub i32 %474, %68
  %476 = add i32 %475, %203
  %477 = sub i32 %476, %214
  %478 = add i32 %477, %223
  %479 = add i32 %478, %8
  %480 = add i32 %479, %48
  %481 = add i32 %480, %233
  %482 = add i32 %481, %389
  %483 = sub i32 %482, %22
  %484 = add i32 %483, %20
  %485 = sub i32 %484, %30
  %486 = sub i32 %485, %43
  %487 = sub i32 %486, %44
  %488 = sub i32 %487, %45
  %489 = add i32 %488, %47
  %490 = sub i32 %489, %51
  %491 = sub i32 %490, %63
  %492 = sub i32 %491, %67
  %493 = add i32 %492, %69
  %494 = sub i32 %493, %75
  %495 = add i32 %494, %76
  %496 = sub i32 %495, %78
  %497 = sub i32 %496, %80
  %498 = sub i32 %497, %81
  %499 = add i32 %498, %82
  %500 = sub i32 %499, %84
  %501 = sub i32 %500, %85
  %502 = sub i32 %501, %86
  %503 = sub i32 %502, %90
  %504 = sub i32 %503, %95
  %505 = sub i32 %504, %96
  %506 = add i32 %505, %97
  %507 = add i32 %506, %98
  %508 = add i32 %507, %101
  %509 = add i32 %508, %103
  %510 = add i32 %509, %107
  %511 = add i32 %510, %110
  %512 = add i32 %511, %114
  %513 = sub i32 %512, %115
  %514 = sub i32 %513, %118
  %515 = sub i32 %514, %119
  %516 = sub i32 %515, %120
  %517 = sub i32 %516, %127
  %518 = sub i32 %517, %128
  %519 = sub i32 %518, %129
  %520 = sub i32 %519, %134
  %521 = sub i32 %520, %135
  %522 = sub i32 %521, %137
  %523 = sub i32 %522, %152
  %524 = add i32 %523, %153
  %525 = add i32 %524, %156
  %526 = add i32 %525, %158
  %527 = sub i32 %526, %159
  %528 = sub i32 %527, %162
  %529 = sub i32 %528, %163
  %530 = add i32 %529, %34
  %531 = add i32 %530, %171
  %532 = sub i32 %531, %173
  %533 = add i32 %532, %142
  %534 = sub i32 %533, %174
  %535 = sub i32 %534, %175
  %536 = sub i32 %535, %176
  %537 = add i32 %536, %179
  %538 = add i32 %537, %186
  %539 = add i32 %538, %187
  %540 = sub i32 %539, %190
  %541 = sub i32 %540, %191
  %542 = add i32 %541, %93
  %543 = add i32 %542, %193
  %544 = sub i32 %543, %194
  %545 = add i32 %544, %195
  %546 = sub i32 %545, %196
  %547 = add i32 %546, %197
  %548 = add i32 %547, %199
  %549 = sub i32 %548, %205
  %550 = add i32 %549, %206
  %551 = add i32 %550, %208
  %552 = sub i32 %551, %209
  %553 = sub i32 %552, %210
  %554 = add i32 %553, %211
  %555 = sub i32 %554, %212
  %556 = sub i32 %555, %213
  %557 = sub i32 %556, %222
  %558 = add i32 %557, %72
  %559 = sub i32 %558, %224
  %560 = sub i32 %559, %225
  %561 = sub i32 %560, %226
  %562 = add i32 %561, %227
  %563 = sub i32 %562, %228
  %564 = sub i32 %563, %229
  %565 = sub i32 %564, %230
  %566 = sub i32 %565, %232
  %567 = add i32 %566, %234
  %568 = sub i32 %567, %124
  %569 = add i32 %568, 1
  %570 = sub i32 %569, %353
  %571 = sub i32 %570, %35
  %572 = sub i32 %571, %53
  %573 = add i32 %572, %61
  %574 = sub i32 %573, %65
  %575 = sub i32 %574, %73
  %576 = sub i32 %575, %89
  %577 = sub i32 %576, %94
  %578 = add i32 %577, %106
  %579 = add i32 %578, %109
  %580 = sub i32 %579, %123
  %581 = add i32 %580, %126
  %582 = sub i32 %581, %132
  %583 = add i32 %582, %143
  %584 = sub i32 %583, %145
  %585 = sub i32 %584, %151
  %586 = add i32 %585, %154
  %587 = sub i32 %586, %161
  %588 = sub i32 %587, %170
  %589 = sub i32 %588, %180
  %590 = sub i32 %589, %183
  %591 = sub i32 %590, %185
  %592 = sub i32 %591, %201
  %593 = sub i32 %592, %216
  %594 = sub i32 %593, %218
  %595 = add i32 %594, %236
  %596 = add i32 %595, %238
  %597 = add i32 %596, %240
  %598 = sub i32 %597, %243
  %599 = sub i32 %598, %274
  %600 = add i32 %599, %305
  %601 = add i32 %600, %346
  %602 = sub i32 %601, %221
  %603 = sub i32 %602, %248
  %604 = sub i32 %603, %272
  %605 = add i32 %604, %292
  %606 = add i32 %605, %301
  %607 = sub i32 %606, %289
  %608 = add i32 %607, %316
  %609 = sub i32 %608, %319
  %610 = sub i32 %609, %321
  %611 = add i32 %610, %331
  %612 = add i32 %611, %333
  %613 = sub i32 %612, %349
  %614 = add i32 %613, %352
  %615 = add i32 %614, %354
  %616 = add i32 %615, %373
  %617 = add i32 %616, %375
  %618 = add i32 %617, %380
  %619 = add i32 %618, %381
  %620 = add i32 %619, %253
  %621 = sub i32 %620, %387
  %622 = sub i32 %621, %167
  %623 = sub i32 %622, %254
  %624 = sub i32 %623, %256
  %625 = sub i32 %624, %261
  %626 = add i32 %625, %263
  %627 = sub i32 %626, %273
  %628 = sub i32 %627, %276
  %629 = sub i32 %628, %277
  %630 = sub i32 %629, %283
  %631 = sub i32 %630, %286
  %632 = add i32 %631, %287
  %633 = add i32 %632, %297
  %634 = add i32 %633, %299
  %635 = add i32 %634, %300
  %636 = add i32 %635, %304
  %637 = add i32 %636, %308
  %638 = add i32 %637, %309
  %639 = add i32 %638, %310
  %640 = add i32 %639, %311
  %641 = add i32 %640, %312
  %642 = add i32 %641, %314
  %643 = sub i32 %642, %315
  %644 = sub i32 %643, %318
  %645 = sub i32 %644, %320
  %646 = sub i32 %645, %322
  %647 = sub i32 %646, %323
  %648 = sub i32 %647, %302
  %649 = sub i32 %648, %324
  %650 = sub i32 %649, %325
  %651 = add i32 %650, %327
  %652 = add i32 %651, %330
  %653 = sub i32 %652, %334
  %654 = sub i32 %653, %335
  %655 = add i32 %654, %338
  %656 = add i32 %655, %339
  %657 = sub i32 %656, %340
  %658 = sub i32 %657, %342
  %659 = add i32 %658, %344
  %660 = add i32 %659, %345
  %661 = add i32 %660, %355
  %662 = add i32 %661, %359
  %663 = sub i32 %662, %360
  %664 = add i32 %663, %366
  %665 = sub i32 %664, %370
  %666 = add i32 %665, %14
  %667 = add i32 %666, %374
  %668 = sub i32 %667, %376
  %669 = add i32 %668, %377
  %670 = add i32 %669, %379
  %671 = add i32 %670, %383
  %672 = add i32 %671, %384
  %673 = sub i32 %672, %386
  %674 = add i32 %673, %388
  %675 = add i32 %674, %11
  %676 = sub i32 %675, %251
  %677 = add i32 %676, %268
  %678 = sub i32 %677, %280
  %679 = sub i32 %678, %291
  %680 = sub i32 %679, %294
  %681 = add i32 %680, %303
  %682 = sub i32 %681, %337
  %683 = sub i32 %682, %348
  %684 = sub i32 %683, %358
  %685 = add i32 %684, %363
  %686 = add i32 %685, %364
  %687 = sub i32 %686, %365
  %688 = sub i32 %687, %369
  %689 = sub i32 %688, %372
  %690 = add i32 %689, %391
  %691 = add i32 %690, %393
  %692 = add i32 %691, %397
  %693 = add i32 %692, %418
  %694 = add i32 %693, %416
  %695 = add i32 %694, %413
  %696 = add i32 %695, %406
  %697 = add i32 %696, %443
  %698 = icmp eq i32 %17, %697
  %699 = select i1 %698, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %700 = tail call i32 @puts(i8* nonnull dereferenceable(1) %699)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
