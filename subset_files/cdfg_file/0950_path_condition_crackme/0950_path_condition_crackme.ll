; ModuleID = '../.././c_source_file/0950_path_condition_crackme.c'
source_filename = "../.././c_source_file/0950_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = or i32 %2, %0
  %9 = xor i32 %8, %7
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, %2
  %13 = shl i32 %12, 1
  %14 = add i32 %9, %13
  %15 = and i32 %5, %3
  %16 = or i32 %15, %4
  %17 = sub i32 %14, %16
  %18 = xor i32 %5, -1
  %19 = or i32 %18, %4
  %20 = xor i32 %19, -1
  %21 = xor i32 %20, %3
  %22 = add i32 %17, %21
  %23 = xor i32 %8, -1
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %23, %25
  %27 = or i32 %1, %0
  %28 = xor i32 %2, %1
  %29 = and i32 %28, %27
  %30 = xor i32 %2, -1
  %31 = or i32 %10, %0
  %32 = and i32 %31, %30
  %33 = and i32 %30, %1
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %0
  %36 = and i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %10
  %39 = xor i32 %7, -1
  %40 = and i32 %39, %2
  %41 = xor i32 %33, %0
  %42 = or i32 %33, %11
  %43 = shl i32 %42, 1
  %44 = xor i32 %31, -1
  %45 = or i32 %28, %44
  %46 = or i32 %36, %33
  %47 = or i32 %30, %0
  %48 = and i32 %47, %1
  %49 = or i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %36, %50
  %52 = and i32 %30, %0
  %53 = or i32 %52, %10
  %54 = xor i32 %0, -1
  %55 = or i32 %23, %1
  %56 = and i32 %24, %30
  %57 = and i32 %2, %1
  %58 = and i32 %57, %54
  %59 = and i32 %28, %0
  %60 = xor i32 %59, -1
  %61 = xor i32 %58, %60
  %62 = and i32 %10, %2
  %63 = and i32 %62, %54
  %64 = or i32 %28, %54
  %65 = xor i32 %64, 2147483647
  %66 = or i32 %65, %63
  %67 = xor i32 %2, %0
  %68 = or i32 %67, %10
  %69 = and i32 %8, %10
  %70 = xor i32 %67, -1
  %71 = and i32 %70, %25
  %72 = xor i32 %28, -1
  %73 = or i32 %11, %72
  %74 = xor i32 %27, -1
  %75 = or i32 %70, %74
  %76 = xor i32 %11, -1
  %77 = and i32 %76, %2
  %78 = and i32 %70, %76
  %79 = or i32 %11, %2
  %80 = or i32 %52, %25
  %81 = and i32 %67, %25
  %82 = or i32 %30, %1
  %83 = or i32 %82, %0
  %84 = shl i32 %83, 1
  %85 = and i32 %37, %25
  %86 = or i32 %36, %24
  %87 = xor i32 %63, %64
  %88 = and i32 %8, %25
  %89 = or i32 %28, %11
  %90 = xor i32 %47, -1
  %91 = or i32 %7, %90
  %92 = shl i32 %91, 1
  %93 = xor i32 %34, %0
  %94 = or i32 %36, %1
  %95 = or i32 %72, %44
  %96 = xor i32 %82, -1
  %97 = or i32 %96, %0
  %98 = or i32 %72, %54
  %99 = and i32 %67, %31
  %100 = add i32 %7, 1
  %101 = or i32 %90, %1
  %102 = xor i32 %52, -1
  %103 = and i32 %24, %102
  %104 = and i32 %28, %76
  %105 = xor i32 %90, %1
  %106 = xor i32 %96, %0
  %107 = xor i32 %52, %82
  %108 = or i32 %7, %70
  %109 = xor i32 %102, %1
  %110 = and i32 %72, %54
  %111 = xor i32 %72, %0
  %112 = shl i32 %111, 1
  %113 = or i32 %34, %0
  %114 = xor i32 %27, %2
  %115 = or i32 %50, %0
  %116 = or i32 %70, %25
  %117 = or i32 %34, %54
  %118 = or i32 %50, %54
  %119 = or i32 %52, %57
  %120 = shl i32 %119, 1
  %121 = or i32 %67, %11
  %122 = shl i32 %121, 2
  %123 = and i32 %62, %0
  %124 = or i32 %10, %2
  %125 = xor i32 %124, %0
  %126 = or i32 %123, %125
  %127 = xor i32 %36, %27
  %128 = and i32 %47, %10
  %129 = and i32 %28, %39
  %130 = xor i32 %11, %34
  %131 = or i32 %72, %0
  %132 = xor i32 %57, -1
  %133 = and i32 %132, %54
  %134 = and i32 %57, %0
  %135 = xor i32 %28, %0
  %136 = xor i32 %134, %135
  %137 = and i32 %27, %72
  %138 = and i32 %30, %76
  %139 = or i32 %7, %50
  %140 = or i32 %67, %24
  %141 = or i32 %70, %10
  %142 = or i32 %30, %74
  %143 = and i32 %70, %39
  %144 = or i32 %36, %10
  %145 = and i32 %72, %39
  %146 = and i32 %24, %37
  %147 = or i32 %52, %24
  %148 = add i32 %27, 1
  %149 = or i32 %7, %72
  %150 = xor i32 %39, %2
  %151 = or i32 %24, %70
  %152 = shl i32 %151, 2
  %153 = or i32 %70, %1
  %154 = or i32 %44, %2
  %155 = xor i32 %57, %0
  %156 = or i32 %7, %96
  %157 = xor i32 %52, %132
  %158 = shl i32 %157, 1
  %159 = or i32 %52, %1
  %160 = or i32 %132, %0
  %161 = or i32 %49, %0
  %162 = or i32 %24, %90
  %163 = and i32 %67, %76
  %164 = or i32 %57, %0
  %165 = shl i32 %164, 1
  %166 = and i32 %67, %1
  %167 = xor i32 %37, %1
  %168 = and i32 %27, %2
  %169 = xor i32 %74, %2
  %170 = and i32 %30, %25
  %171 = xor i32 %36, %31
  %172 = xor i32 %49, %7
  %173 = and i32 %49, %54
  %174 = and i32 %27, %30
  %175 = or i32 %28, %0
  %176 = xor i32 %123, %175
  %177 = and i32 %24, %2
  %178 = or i32 %33, %0
  %179 = and i32 %72, %0
  %180 = shl i32 %64, 1
  %181 = xor i32 %135, -1
  %182 = or i32 %134, %181
  %183 = add i32 %2, 1
  %184 = or i32 %67, %25
  %185 = shl i32 %184, 1
  %186 = and i32 %27, %70
  %187 = and i32 %50, %54
  %188 = shl i32 %187, 4
  %189 = and i32 %33, %54
  %190 = and i32 %50, %0
  %191 = shl i32 %190, 3
  %192 = and i32 %33, %0
  %193 = and i32 %96, %54
  %194 = mul i32 %193, -7
  %195 = mul i32 %58, 18
  %196 = and i32 %96, %0
  %197 = shl i32 %196, 1
  %198 = and i32 %15, %4
  %199 = or i32 %5, %3
  %200 = xor i32 %199, %4
  %201 = xor i32 %198, -1
  %202 = xor i32 %200, %201
  %203 = xor i32 %4, -1
  %204 = xor i32 %5, %3
  %205 = and i32 %204, %203
  %206 = xor i32 %205, %201
  %207 = and i32 %15, %203
  %208 = and i32 %199, %4
  %209 = xor i32 %208, 2147483647
  %210 = xor i32 %209, %207
  %211 = xor i32 %3, -1
  %212 = xor i32 %5, %4
  %213 = xor i32 %212, -1
  %214 = or i32 %213, %211
  %215 = and i32 %18, %4
  %216 = xor i32 %4, %3
  %217 = or i32 %215, %216
  %218 = or i32 %199, %4
  %219 = or i32 %18, %3
  %220 = xor i32 %219, -1
  %221 = or i32 %220, %203
  %222 = and i32 %4, %3
  %223 = or i32 %204, %222
  %224 = or i32 %5, %4
  %225 = xor i32 %224, -1
  %226 = or i32 %225, %3
  %227 = and i32 %19, %216
  %228 = and i32 %211, %5
  %229 = and i32 %228, %4
  %230 = or i32 %211, %5
  %231 = and i32 %230, %203
  %232 = xor i32 %229, -1
  %233 = xor i32 %231, %232
  %234 = or i32 %4, %3
  %235 = xor i32 %234, -1
  %236 = xor i32 %235, %5
  %237 = and i32 %212, %234
  %238 = and i32 %216, %5
  %239 = xor i32 %219, %222
  %240 = or i32 %213, %235
  %241 = and i32 %211, %4
  %242 = xor i32 %241, %5
  %243 = or i32 %211, %4
  %244 = and i32 %243, %18
  %245 = xor i32 %204, %4
  %246 = xor i32 %198, %245
  %247 = xor i32 %215, -1
  %248 = xor i32 %247, %3
  %249 = and i32 %19, %3
  %250 = and i32 %199, %203
  %251 = or i32 %222, %18
  %252 = or i32 %216, %5
  %253 = xor i32 %230, %4
  %254 = or i32 %229, %253
  %255 = or i32 %15, %241
  %256 = and i32 %5, %4
  %257 = and i32 %18, %3
  %258 = or i32 %256, %257
  %259 = xor i32 %241, -1
  %260 = and i32 %213, %259
  %261 = xor i32 %199, -1
  %262 = or i32 %261, %203
  %263 = or i32 %198, %200
  %264 = xor i32 %204, -1
  %265 = or i32 %241, %264
  %266 = and i32 %216, %247
  %267 = or i32 %222, %5
  %268 = xor i32 %15, -1
  %269 = xor i32 %268, %4
  %270 = xor i32 %216, -1
  %271 = or i32 %225, %270
  %272 = and i32 %234, %213
  %273 = xor i32 %257, -1
  %274 = xor i32 %256, %273
  %275 = and i32 %273, %4
  %276 = or i32 %20, %270
  %277 = xor i32 %243, -1
  %278 = or i32 %212, %277
  %279 = xor i32 %256, %199
  %280 = or i32 %215, %3
  %281 = shl i32 %280, 1
  %282 = and i32 %212, %259
  %283 = and i32 %213, %270
  %284 = xor i32 %222, -1
  %285 = xor i32 %284, %5
  %286 = add i32 %234, 1
  %287 = or i32 %241, %213
  %288 = or i32 %18, %277
  %289 = or i32 %229, %245
  %290 = and i32 %212, %211
  %291 = and i32 %224, %270
  %292 = and i32 %219, %4
  %293 = or i32 %219, %4
  %294 = xor i32 %224, %222
  %295 = or i32 %213, %277
  %296 = and i32 %264, %284
  %297 = and i32 %243, %264
  %298 = add i32 %224, 1
  %299 = xor i32 %256, %234
  %300 = shl i32 %299, 1
  %301 = xor i32 %256, -1
  %302 = and i32 %301, %3
  %303 = and i32 %212, %243
  %304 = xor i32 %256, %3
  %305 = and i32 %264, %259
  %306 = or i32 %212, %216
  %307 = and i32 %19, %211
  %308 = or i32 %257, %241
  %309 = or i32 %229, %231
  %310 = or i32 %204, %277
  %311 = or i32 %222, %225
  %312 = xor i32 %261, %4
  %313 = and i32 %204, %234
  %314 = or i32 %273, %203
  %315 = or i32 %204, %235
  %316 = shl i32 %315, 1
  %317 = or i32 %222, %220
  %318 = and i32 %264, %4
  %319 = or i32 %204, %4
  %320 = xor i32 %229, %319
  %321 = shl i32 %320, 1
  %322 = and i32 %247, %211
  %323 = and i32 %216, %18
  %324 = or i32 %204, %203
  %325 = or i32 %18, %235
  %326 = add i32 %256, 1
  %327 = or i32 %204, %241
  %328 = xor i32 %224, %3
  %329 = and i32 %204, %259
  %330 = or i32 %216, %20
  %331 = shl i32 %330, 1
  %332 = or i32 %273, %4
  %333 = or i32 %261, %4
  %334 = xor i32 %225, %3
  %335 = and i32 %259, %5
  %336 = and i32 %204, %284
  %337 = xor i32 %257, %4
  %338 = and i32 %213, %284
  %339 = and i32 %301, %211
  %340 = or i32 %216, %18
  %341 = or i32 %277, %5
  %342 = or i32 %256, %261
  %343 = or i32 %212, %211
  %344 = or i32 %256, %270
  %345 = xor i32 %264, %4
  %346 = or i32 %256, %3
  %347 = shl i32 %346, 1
  %348 = and i32 %204, %4
  %349 = xor i32 %348, -1
  %350 = xor i32 %207, %349
  %351 = or i32 %264, %203
  %352 = shl i32 %4, 1
  %353 = and i32 %216, %213
  %354 = xor i32 %15, %4
  %355 = and i32 %228, %203
  %356 = xor i32 %324, -1
  %357 = or i32 %355, %356
  %358 = and i32 %219, %203
  %359 = xor i32 %241, %268
  %360 = or i32 %212, %241
  %361 = or i32 %213, %270
  %362 = shl i32 %361, 1
  %363 = or i32 %15, %203
  %364 = or i32 %216, %225
  %365 = shl i32 %364, 1
  %366 = xor i32 %301, %3
  %367 = or i32 %18, %270
  %368 = shl i32 %367, 1
  %369 = or i32 %212, %235
  %370 = xor i32 %355, %324
  %371 = or i32 %198, %250
  %372 = or i32 %256, %216
  %373 = shl i32 %372, 1
  %374 = and i32 %301, %270
  %375 = shl i32 %374, 1
  %376 = and i32 %212, %3
  %377 = shl i32 %376, 1
  %378 = or i32 %222, %213
  %379 = shl i32 %378, 1
  %380 = or i32 %257, %203
  %381 = or i32 %216, %213
  %382 = and i32 %19, %270
  %383 = xor i32 %245, -1
  %384 = or i32 %198, %383
  %385 = or i32 %256, %211
  %386 = and i32 %243, %5
  %387 = add i32 %5, 1
  %388 = and i32 %247, %270
  %389 = shl i32 %388, 2
  %390 = and i32 %247, %3
  %391 = xor i32 %19, %222
  %392 = and i32 %268, %4
  %393 = shl i32 %392, 1
  %394 = or i32 %256, %277
  %395 = shl i32 %394, 1
  %396 = or i32 %241, %18
  %397 = and i32 %243, %213
  %398 = or i32 %215, %211
  %399 = or i32 %264, %235
  %400 = shl i32 %399, 1
  %401 = or i32 %207, %348
  %402 = or i32 %215, %15
  %403 = or i32 %198, %205
  %404 = xor i32 %253, %232
  %405 = or i32 %270, %5
  %406 = xor i32 %250, %201
  %407 = or i32 %20, %211
  %408 = xor i32 %215, %3
  %409 = add i32 %204, 1
  %410 = and i32 %18, %270
  %411 = and i32 %18, %259
  %412 = or i32 %264, %4
  %413 = and i32 %268, %203
  %414 = xor i32 %241, %273
  %415 = and i32 %224, %216
  %416 = xor i32 %277, %5
  %417 = or i32 %257, %4
  %418 = xor i32 %273, %4
  %419 = and i32 %18, %284
  %420 = or i32 %268, %4
  %421 = xor i32 %222, %5
  %422 = shl i32 %421, 1
  %423 = xor i32 %215, %268
  %424 = xor i32 %19, %3
  %425 = shl i32 %424, 2
  %426 = shl i32 %234, 2
  %427 = or i32 %215, %270
  %428 = xor i32 %234, %5
  %429 = or i32 %207, %208
  %430 = or i32 %241, %5
  %431 = shl i32 %247, 1
  %432 = and i32 %234, %18
  %433 = or i32 %212, %270
  %434 = or i32 %222, %20
  %435 = or i32 %212, %3
  %436 = or i32 %256, %235
  %437 = and i32 %204, %243
  %438 = or i32 %199, %203
  %439 = and i32 %234, %264
  %440 = or i32 %20, %3
  %441 = and i32 %273, %203
  %442 = or i32 %212, %222
  %443 = and i32 %213, %211
  %444 = or i32 %222, %264
  %445 = and i32 %261, %203
  %446 = shl i32 %445, 3
  %447 = and i32 %257, %203
  %448 = and i32 %261, %4
  %449 = and i32 %257, %4
  %450 = and i32 %220, %203
  %451 = mul i32 %207, 13
  %452 = and i32 %220, %4
  %453 = shl i32 %452, 2
  %454 = mul i32 %198, -9
  %455 = add i32 %11, %54
  %456 = add i32 %455, %203
  %457 = add i32 %456, %171
  %458 = add i32 %457, %153
  %459 = add i32 %458, %143
  %460 = add i32 %459, %131
  %461 = add i32 %460, %93
  %462 = add i32 %461, %41
  %463 = add i32 %462, %277
  %464 = add i32 %463, %126
  %465 = add i32 %464, %15
  %466 = add i32 %465, %212
  %467 = add i32 %466, %261
  %468 = add i32 %467, %267
  %469 = add i32 %468, %238
  %470 = add i32 %469, %66
  %471 = add i32 %470, %444
  %472 = add i32 %471, %354
  %473 = add i32 %472, %332
  %474 = add i32 %473, %307
  %475 = add i32 %474, %304
  %476 = add i32 %475, %295
  %477 = add i32 %476, %293
  %478 = add i32 %477, %269
  %479 = add i32 %478, %246
  %480 = add i32 %479, %210
  %481 = shl i32 %480, 1
  %482 = or i32 %173, %192
  %483 = sub i32 %81, %482
  %484 = add i32 %483, %268
  %485 = sub i32 %484, %345
  %486 = add i32 %485, %415
  %487 = add i32 %486, %305
  %488 = mul i32 %487, 5
  %489 = add i32 %130, %47
  %490 = add i32 %489, %89
  %491 = add i32 %490, %272
  %492 = add i32 %491, %443
  %493 = shl i32 %492, 2
  %494 = add i32 %447, %189
  %495 = sub i32 %494, %450
  %496 = mul i32 %495, 6
  %497 = sub i32 %132, %134
  %498 = add i32 %497, %155
  %499 = sub i32 %498, %449
  %500 = add i32 %499, %437
  %501 = sub i32 %500, %412
  %502 = add i32 %501, %317
  %503 = sub i32 %502, %263
  %504 = mul i32 %503, 3
  %505 = sub i32 1, %0
  %506 = sub i32 %505, %1
  %507 = add i32 %506, %10
  %508 = add i32 %507, %100
  %509 = add i32 %508, %7
  %510 = add i32 %509, %148
  %511 = add i32 %510, %25
  %512 = add i32 %511, %183
  %513 = sub i32 %512, %32
  %514 = sub i32 %513, %40
  %515 = add i32 %514, %56
  %516 = sub i32 %515, %77
  %517 = add i32 %516, %79
  %518 = add i32 %517, %8
  %519 = add i32 %518, %114
  %520 = add i32 %519, %138
  %521 = sub i32 %520, %142
  %522 = sub i32 %521, %28
  %523 = add i32 %522, %150
  %524 = add i32 %523, %154
  %525 = sub i32 %524, %168
  %526 = sub i32 %525, %169
  %527 = add i32 %526, %170
  %528 = add i32 %527, %174
  %529 = sub i32 %528, %177
  %530 = sub i32 %529, %26
  %531 = sub i32 %530, %29
  %532 = sub i32 %531, %35
  %533 = sub i32 %532, %38
  %534 = sub i32 %533, %45
  %535 = sub i32 %534, %46
  %536 = add i32 %535, %48
  %537 = add i32 %536, %51
  %538 = add i32 %537, %53
  %539 = sub i32 %538, %55
  %540 = add i32 %539, %68
  %541 = sub i32 %540, %69
  %542 = sub i32 %541, %71
  %543 = add i32 %542, %73
  %544 = add i32 %543, %75
  %545 = sub i32 %544, %78
  %546 = add i32 %545, %80
  %547 = add i32 %546, %85
  %548 = sub i32 %547, %86
  %549 = add i32 %548, %88
  %550 = add i32 %549, %94
  %551 = sub i32 %550, %95
  %552 = add i32 %551, %97
  %553 = sub i32 %552, %98
  %554 = sub i32 %553, %99
  %555 = sub i32 %554, %101
  %556 = add i32 %555, %103
  %557 = sub i32 %556, %104
  %558 = add i32 %557, %105
  %559 = sub i32 %558, %106
  %560 = add i32 %559, %107
  %561 = sub i32 %560, %108
  %562 = sub i32 %561, %109
  %563 = add i32 %562, %110
  %564 = add i32 %563, %113
  %565 = add i32 %564, %115
  %566 = add i32 %565, %116
  %567 = add i32 %566, %117
  %568 = add i32 %567, %118
  %569 = sub i32 %568, %127
  %570 = add i32 %569, %128
  %571 = sub i32 %570, %129
  %572 = sub i32 %571, %133
  %573 = add i32 %572, %137
  %574 = add i32 %573, %139
  %575 = sub i32 %574, %140
  %576 = add i32 %575, %141
  %577 = add i32 %576, %144
  %578 = add i32 %577, %145
  %579 = add i32 %578, %146
  %580 = sub i32 %579, %147
  %581 = sub i32 %580, %149
  %582 = add i32 %581, %135
  %583 = add i32 %582, %156
  %584 = sub i32 %583, %159
  %585 = sub i32 %584, %160
  %586 = add i32 %585, %161
  %587 = add i32 %586, %162
  %588 = sub i32 %587, %163
  %589 = add i32 %588, %166
  %590 = add i32 %589, %167
  %591 = sub i32 %590, %172
  %592 = sub i32 %591, %178
  %593 = sub i32 %592, %179
  %594 = sub i32 %593, %186
  %595 = sub i32 %594, %43
  %596 = add i32 %595, %61
  %597 = sub i32 %596, %84
  %598 = add i32 %597, %87
  %599 = sub i32 %598, %92
  %600 = sub i32 %599, %112
  %601 = sub i32 %600, %120
  %602 = sub i32 %601, %122
  %603 = sub i32 %602, %136
  %604 = sub i32 %603, %152
  %605 = sub i32 %604, %158
  %606 = sub i32 %605, %165
  %607 = add i32 %606, %176
  %608 = sub i32 %607, %180
  %609 = sub i32 %608, %182
  %610 = sub i32 %609, %185
  %611 = sub i32 %610, %188
  %612 = sub i32 %611, %191
  %613 = add i32 %612, %194
  %614 = add i32 %613, %195
  %615 = sub i32 %614, %197
  %616 = sub i32 %615, %5
  %617 = add i32 %616, %243
  %618 = add i32 %617, %286
  %619 = add i32 %618, %241
  %620 = add i32 %619, 2
  %621 = sub i32 %620, %352
  %622 = add i32 %621, %387
  %623 = sub i32 %622, %241
  %624 = sub i32 %623, %236
  %625 = add i32 %624, %242
  %626 = sub i32 %625, %244
  %627 = add i32 %626, %251
  %628 = add i32 %627, %252
  %629 = add i32 %628, %273
  %630 = sub i32 %629, %285
  %631 = add i32 %630, %288
  %632 = add i32 %631, %298
  %633 = add i32 %632, %204
  %634 = add i32 %633, %323
  %635 = sub i32 %634, %325
  %636 = add i32 %635, %326
  %637 = add i32 %636, %335
  %638 = add i32 %637, %340
  %639 = sub i32 %638, %341
  %640 = sub i32 %639, %386
  %641 = add i32 %640, %215
  %642 = sub i32 %641, %396
  %643 = add i32 %642, %219
  %644 = add i32 %643, %199
  %645 = add i32 %644, %405
  %646 = add i32 %645, %409
  %647 = sub i32 %646, %410
  %648 = add i32 %647, %411
  %649 = add i32 %648, %416
  %650 = sub i32 %649, %419
  %651 = sub i32 %650, %426
  %652 = add i32 %651, %428
  %653 = add i32 %652, %430
  %654 = sub i32 %653, %432
  %655 = add i32 %654, %256
  %656 = sub i32 %655, %257
  %657 = add i32 %656, %205
  %658 = add i32 %657, %214
  %659 = sub i32 %658, %217
  %660 = add i32 %659, %218
  %661 = sub i32 %660, %221
  %662 = add i32 %661, %223
  %663 = add i32 %662, %226
  %664 = sub i32 %663, %227
  %665 = add i32 %664, %237
  %666 = sub i32 %665, %239
  %667 = add i32 %666, %240
  %668 = add i32 %667, %248
  %669 = add i32 %668, %249
  %670 = sub i32 %669, %250
  %671 = sub i32 %670, %255
  %672 = sub i32 %671, %258
  %673 = sub i32 %672, %260
  %674 = add i32 %673, %262
  %675 = add i32 %674, %265
  %676 = sub i32 %675, %266
  %677 = add i32 %676, %271
  %678 = add i32 %677, %274
  %679 = sub i32 %678, %275
  %680 = sub i32 %679, %276
  %681 = sub i32 %680, %278
  %682 = sub i32 %681, %279
  %683 = sub i32 %682, %282
  %684 = sub i32 %683, %283
  %685 = add i32 %684, %287
  %686 = sub i32 %685, %290
  %687 = add i32 %686, %291
  %688 = add i32 %687, %292
  %689 = sub i32 %688, %294
  %690 = sub i32 %689, %296
  %691 = add i32 %690, %297
  %692 = add i32 %691, %302
  %693 = sub i32 %692, %303
  %694 = add i32 %693, %306
  %695 = add i32 %694, %308
  %696 = add i32 %695, %310
  %697 = add i32 %696, %311
  %698 = add i32 %697, %312
  %699 = add i32 %698, %313
  %700 = sub i32 %699, %314
  %701 = sub i32 %700, %318
  %702 = sub i32 %701, %322
  %703 = sub i32 %702, %324
  %704 = sub i32 %703, %327
  %705 = add i32 %704, %328
  %706 = add i32 %705, %329
  %707 = add i32 %706, %333
  %708 = sub i32 %707, %334
  %709 = add i32 %708, %336
  %710 = sub i32 %709, %337
  %711 = sub i32 %710, %338
  %712 = sub i32 %711, %339
  %713 = add i32 %712, %342
  %714 = sub i32 %713, %343
  %715 = add i32 %714, %344
  %716 = sub i32 %715, %351
  %717 = sub i32 %716, %353
  %718 = sub i32 %717, %358
  %719 = sub i32 %718, %359
  %720 = add i32 %719, %360
  %721 = add i32 %720, %363
  %722 = add i32 %721, %366
  %723 = sub i32 %722, %368
  %724 = sub i32 %723, %369
  %725 = sub i32 %724, %380
  %726 = sub i32 %725, %381
  %727 = add i32 %726, %382
  %728 = add i32 %727, %385
  %729 = add i32 %728, %390
  %730 = sub i32 %729, %391
  %731 = sub i32 %730, %397
  %732 = sub i32 %731, %398
  %733 = sub i32 %732, %348
  %734 = sub i32 %733, %402
  %735 = sub i32 %734, %407
  %736 = add i32 %735, %319
  %737 = sub i32 %736, %408
  %738 = sub i32 %737, %413
  %739 = sub i32 %738, %414
  %740 = add i32 %739, %208
  %741 = sub i32 %740, %417
  %742 = add i32 %741, %245
  %743 = add i32 %742, %418
  %744 = add i32 %743, %420
  %745 = sub i32 %744, %422
  %746 = sub i32 %745, %423
  %747 = add i32 %746, %427
  %748 = sub i32 %747, %431
  %749 = add i32 %748, %433
  %750 = sub i32 %749, %434
  %751 = add i32 %750, %435
  %752 = sub i32 %751, %436
  %753 = sub i32 %752, %438
  %754 = sub i32 %753, %439
  %755 = add i32 %754, %440
  %756 = sub i32 %755, %441
  %757 = add i32 %756, %442
  %758 = sub i32 %757, %448
  %759 = sub i32 %758, %202
  %760 = add i32 %759, %206
  %761 = add i32 %760, %233
  %762 = sub i32 %761, %254
  %763 = sub i32 %762, %281
  %764 = add i32 %763, %289
  %765 = sub i32 %764, %300
  %766 = sub i32 %765, %309
  %767 = sub i32 %766, %316
  %768 = sub i32 %767, %331
  %769 = sub i32 %768, %347
  %770 = add i32 %769, %350
  %771 = add i32 %770, %357
  %772 = sub i32 %771, %362
  %773 = sub i32 %772, %365
  %774 = add i32 %773, %370
  %775 = sub i32 %774, %371
  %776 = sub i32 %775, %373
  %777 = sub i32 %776, %375
  %778 = sub i32 %777, %377
  %779 = sub i32 %778, %379
  %780 = add i32 %779, %384
  %781 = sub i32 %780, %389
  %782 = sub i32 %781, %393
  %783 = sub i32 %782, %395
  %784 = sub i32 %783, %400
  %785 = add i32 %784, %401
  %786 = add i32 %785, %403
  %787 = sub i32 %786, %404
  %788 = add i32 %787, %406
  %789 = sub i32 %788, %425
  %790 = sub i32 %789, %429
  %791 = add i32 %790, %446
  %792 = add i32 %791, %451
  %793 = sub i32 %792, %453
  %794 = add i32 %793, %454
  %795 = sub i32 %794, %321
  %796 = add i32 %795, %496
  %797 = add i32 %796, %493
  %798 = add i32 %797, %488
  %799 = add i32 %798, %504
  %800 = add i32 %799, %481
  %801 = icmp eq i32 %22, %800
  %802 = select i1 %801, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %803 = tail call i32 @puts(i8* nonnull dereferenceable(1) %802)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
