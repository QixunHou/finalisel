digraph "DFG for'crackme' function" {
	Node0x941510[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x941bc0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x941c80[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x941cf0[shape=record, label="  %6 = add i32 %3, %5"];
	Node0x941d60[shape=record, label="  %7 = and i32 %4, %0"];
	Node0x941dd0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x941e40[shape=record, label="  %9 = mul i32 %8, -3"];
	Node0x941eb0[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x941f20[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x941fc0[shape=record, label="  %12 = shl i32 %5, 1"];
	Node0x942060[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x9420d0[shape=record, label="  %14 = shl i32 %10, 1"];
	Node0x942140[shape=record, label="  %15 = add i32 %1, %0"];
	Node0x9421b0[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x942220[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x942290[shape=record, label="  %18 = sub i32 %11, %1"];
	Node0x942300[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0x942370[shape=record, label="  %20 = add i32 %19, %3"];
	Node0x9423e0[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x942450[shape=record, label="  %22 = sub i32 %21, %14"];
	Node0x9424c0[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x942530[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x9425a0[shape=record, label="  %25 = icmp eq i32 %6, %24"];
	Node0x8e2268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x942a40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x942a90[shape=record, label="  ret void"];
	Node0x941510 -> Node0x941bc0;
	Node0x941bc0 -> Node0x941c80;
	Node0x941c80 -> Node0x941cf0;
	Node0x941cf0 -> Node0x941d60;
	Node0x941d60 -> Node0x941dd0;
	Node0x941dd0 -> Node0x941e40;
	Node0x941e40 -> Node0x941eb0;
	Node0x941eb0 -> Node0x941f20;
	Node0x941f20 -> Node0x941fc0;
	Node0x941fc0 -> Node0x942060;
	Node0x942060 -> Node0x9420d0;
	Node0x9420d0 -> Node0x942140;
	Node0x942140 -> Node0x9421b0;
	Node0x9421b0 -> Node0x942220;
	Node0x942220 -> Node0x942290;
	Node0x942290 -> Node0x942300;
	Node0x942300 -> Node0x942370;
	Node0x942370 -> Node0x9423e0;
	Node0x9423e0 -> Node0x942450;
	Node0x942450 -> Node0x9424c0;
	Node0x9424c0 -> Node0x942530;
	Node0x942530 -> Node0x9425a0;
	Node0x9425a0 -> Node0x8e2268;
	Node0x8e2268 -> Node0x942a40;
	Node0x942a40 -> Node0x942a90;
edge [color=red]
	Node0x941bc0 -> Node0x941c80;
	Node0x941510 -> Node0x941cf0;
	Node0x941c80 -> Node0x941cf0;
	Node0x941bc0 -> Node0x941d60;
	Node0x941dd0 -> Node0x941e40;
	Node0x941eb0 -> Node0x941f20;
	Node0x941c80 -> Node0x941fc0;
	Node0x941fc0 -> Node0x942060;
	Node0x941eb0 -> Node0x9420d0;
	Node0x942140 -> Node0x9421b0;
	Node0x941d60 -> Node0x9421b0;
	Node0x9421b0 -> Node0x942220;
	Node0x941f20 -> Node0x942290;
	Node0x942290 -> Node0x942300;
	Node0x941dd0 -> Node0x942300;
	Node0x942300 -> Node0x942370;
	Node0x941510 -> Node0x942370;
	Node0x942370 -> Node0x9423e0;
	Node0x941e40 -> Node0x9423e0;
	Node0x9423e0 -> Node0x942450;
	Node0x9420d0 -> Node0x942450;
	Node0x942450 -> Node0x9424c0;
	Node0x942060 -> Node0x9424c0;
	Node0x9424c0 -> Node0x942530;
	Node0x942220 -> Node0x942530;
	Node0x941cf0 -> Node0x9425a0;
	Node0x942530 -> Node0x9425a0;
	Node0x9425a0 -> Node0x8e2268;
	Node0x8e2268 -> Node0x942a40;
}
