digraph "DFG for'crackme' function" {
	Node0x23a5d30[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x23a5da0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x23a5e10[shape=record, label="  %7 = and i32 %6, %3"];
	Node0x23a5eb0[shape=record, label="  %8 = sub i32 2, %1"];
	Node0x23a5f20[shape=record, label="  %9 = add i32 %8, %7"];
	Node0x23a5f90[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x23a6000[shape=record, label="  %11 = and i32 %10, %1"];
	Node0x23a60a0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x23a6140[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x23a61b0[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0x23a6220[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x23a6290[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x23a6300[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x23a6370[shape=record, label="  %18 = and i32 %2, %1"];
	Node0x23a63e0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x23a6450[shape=record, label="  %20 = and i32 %3, %0"];
	Node0x23a64c0[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x23a6530[shape=record, label="  %22 = xor i32 %3, -1"];
	Node0x23a65a0[shape=record, label="  %23 = or i32 %6, %3"];
	Node0x23a6610[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x23a6680[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x23a66f0[shape=record, label="  %26 = or i32 %3, %0"];
	Node0x23a6760[shape=record, label="  %27 = shl i32 %6, 1"];
	Node0x23a67d0[shape=record, label="  %28 = xor i32 %26, -1"];
	Node0x23a6840[shape=record, label="  %29 = xor i32 %24, -2"];
	Node0x23a68b0[shape=record, label="  %30 = shl i32 %3, 2"];
	Node0x23a6920[shape=record, label="  %31 = add i32 %11, %17"];
	Node0x23a69c0[shape=record, label="  %32 = mul i32 %31, -3"];
	Node0x23a6c40[shape=record, label="  %33 = add i32 %6, %5"];
	Node0x23a6cb0[shape=record, label="  %34 = sub i32 %33, %27"];
	Node0x23a6d20[shape=record, label="  %35 = add i32 %34, %10"];
	Node0x23a6d90[shape=record, label="  %36 = add i32 %35, %15"];
	Node0x23a6e00[shape=record, label="  %37 = sub i32 %36, %14"];
	Node0x23a6e70[shape=record, label="  %38 = sub i32 %37, %3"];
	Node0x23a6ee0[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x23a6f50[shape=record, label="  %40 = sub i32 %39, %19"];
	Node0x23a6fc0[shape=record, label="  %41 = add i32 %40, %21"];
	Node0x23a7030[shape=record, label="  %42 = add i32 %41, %25"];
	Node0x23a70a0[shape=record, label="  %43 = sub i32 %42, %26"];
	Node0x23a7110[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x23a7180[shape=record, label="  %45 = sub i32 %44, %13"];
	Node0x23a71f0[shape=record, label="  %46 = sub i32 %45, %24"];
	Node0x23a7260[shape=record, label="  %47 = add i32 %46, %32"];
	Node0x23a72d0[shape=record, label="  %48 = sub i32 %47, %29"];
	Node0x23a7340[shape=record, label="  %49 = add i32 %48, %30"];
	Node0x23a73b0[shape=record, label="  %50 = icmp eq i32 %9, %49"];
	Node0x2346268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x23a7850[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x23a78a0[shape=record, label="  ret void"];
	Node0x23a5d30 -> Node0x23a5da0;
	Node0x23a5da0 -> Node0x23a5e10;
	Node0x23a5e10 -> Node0x23a5eb0;
	Node0x23a5eb0 -> Node0x23a5f20;
	Node0x23a5f20 -> Node0x23a5f90;
	Node0x23a5f90 -> Node0x23a6000;
	Node0x23a6000 -> Node0x23a60a0;
	Node0x23a60a0 -> Node0x23a6140;
	Node0x23a6140 -> Node0x23a61b0;
	Node0x23a61b0 -> Node0x23a6220;
	Node0x23a6220 -> Node0x23a6290;
	Node0x23a6290 -> Node0x23a6300;
	Node0x23a6300 -> Node0x23a6370;
	Node0x23a6370 -> Node0x23a63e0;
	Node0x23a63e0 -> Node0x23a6450;
	Node0x23a6450 -> Node0x23a64c0;
	Node0x23a64c0 -> Node0x23a6530;
	Node0x23a6530 -> Node0x23a65a0;
	Node0x23a65a0 -> Node0x23a6610;
	Node0x23a6610 -> Node0x23a6680;
	Node0x23a6680 -> Node0x23a66f0;
	Node0x23a66f0 -> Node0x23a6760;
	Node0x23a6760 -> Node0x23a67d0;
	Node0x23a67d0 -> Node0x23a6840;
	Node0x23a6840 -> Node0x23a68b0;
	Node0x23a68b0 -> Node0x23a6920;
	Node0x23a6920 -> Node0x23a69c0;
	Node0x23a69c0 -> Node0x23a6c40;
	Node0x23a6c40 -> Node0x23a6cb0;
	Node0x23a6cb0 -> Node0x23a6d20;
	Node0x23a6d20 -> Node0x23a6d90;
	Node0x23a6d90 -> Node0x23a6e00;
	Node0x23a6e00 -> Node0x23a6e70;
	Node0x23a6e70 -> Node0x23a6ee0;
	Node0x23a6ee0 -> Node0x23a6f50;
	Node0x23a6f50 -> Node0x23a6fc0;
	Node0x23a6fc0 -> Node0x23a7030;
	Node0x23a7030 -> Node0x23a70a0;
	Node0x23a70a0 -> Node0x23a7110;
	Node0x23a7110 -> Node0x23a7180;
	Node0x23a7180 -> Node0x23a71f0;
	Node0x23a71f0 -> Node0x23a7260;
	Node0x23a7260 -> Node0x23a72d0;
	Node0x23a72d0 -> Node0x23a7340;
	Node0x23a7340 -> Node0x23a73b0;
	Node0x23a73b0 -> Node0x2346268;
	Node0x2346268 -> Node0x23a7850;
	Node0x23a7850 -> Node0x23a78a0;
edge [color=red]
	Node0x23a5da0 -> Node0x23a5e10;
	Node0x23a5eb0 -> Node0x23a5f20;
	Node0x23a5e10 -> Node0x23a5f20;
	Node0x23a5f90 -> Node0x23a6000;
	Node0x23a6000 -> Node0x23a60a0;
	Node0x23a60a0 -> Node0x23a6140;
	Node0x23a61b0 -> Node0x23a6220;
	Node0x23a6290 -> Node0x23a6300;
	Node0x23a6370 -> Node0x23a63e0;
	Node0x23a6450 -> Node0x23a64c0;
	Node0x23a5da0 -> Node0x23a65a0;
	Node0x23a65a0 -> Node0x23a6610;
	Node0x23a5da0 -> Node0x23a6760;
	Node0x23a66f0 -> Node0x23a67d0;
	Node0x23a6610 -> Node0x23a6840;
	Node0x23a6000 -> Node0x23a6920;
	Node0x23a6300 -> Node0x23a6920;
	Node0x23a6920 -> Node0x23a69c0;
	Node0x23a5da0 -> Node0x23a6c40;
	Node0x23a5d30 -> Node0x23a6c40;
	Node0x23a6c40 -> Node0x23a6cb0;
	Node0x23a6760 -> Node0x23a6cb0;
	Node0x23a6cb0 -> Node0x23a6d20;
	Node0x23a5f90 -> Node0x23a6d20;
	Node0x23a6d20 -> Node0x23a6d90;
	Node0x23a6220 -> Node0x23a6d90;
	Node0x23a6d90 -> Node0x23a6e00;
	Node0x23a61b0 -> Node0x23a6e00;
	Node0x23a6e00 -> Node0x23a6e70;
	Node0x23a6e70 -> Node0x23a6ee0;
	Node0x23a6530 -> Node0x23a6ee0;
	Node0x23a6ee0 -> Node0x23a6f50;
	Node0x23a63e0 -> Node0x23a6f50;
	Node0x23a6f50 -> Node0x23a6fc0;
	Node0x23a64c0 -> Node0x23a6fc0;
	Node0x23a6fc0 -> Node0x23a7030;
	Node0x23a6680 -> Node0x23a7030;
	Node0x23a7030 -> Node0x23a70a0;
	Node0x23a66f0 -> Node0x23a70a0;
	Node0x23a70a0 -> Node0x23a7110;
	Node0x23a67d0 -> Node0x23a7110;
	Node0x23a7110 -> Node0x23a7180;
	Node0x23a6140 -> Node0x23a7180;
	Node0x23a7180 -> Node0x23a71f0;
	Node0x23a6610 -> Node0x23a71f0;
	Node0x23a71f0 -> Node0x23a7260;
	Node0x23a69c0 -> Node0x23a7260;
	Node0x23a7260 -> Node0x23a72d0;
	Node0x23a6840 -> Node0x23a72d0;
	Node0x23a72d0 -> Node0x23a7340;
	Node0x23a68b0 -> Node0x23a7340;
	Node0x23a5f20 -> Node0x23a73b0;
	Node0x23a7340 -> Node0x23a73b0;
	Node0x23a73b0 -> Node0x2346268;
	Node0x2346268 -> Node0x23a7850;
}
