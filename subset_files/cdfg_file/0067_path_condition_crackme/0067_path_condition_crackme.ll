; ModuleID = '../.././c_source_file/0067_path_condition_crackme.c'
source_filename = "../.././c_source_file/0067_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %1
  %10 = xor i32 %5, -1
  %11 = or i32 %10, %4
  %12 = add i32 %11, %9
  %13 = shl i32 %12, 1
  %14 = xor i32 %2, -1
  %15 = and i32 %14, %1
  %16 = xor i32 %15, -1
  %17 = xor i32 %16, %0
  %18 = shl i32 %17, 1
  %19 = and i32 %1, %0
  %20 = xor i32 %7, %19
  %21 = or i32 %14, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %1, %0
  %24 = or i32 %23, %22
  %25 = or i32 %14, %1
  %26 = xor i32 %25, %19
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %23, %28
  %30 = shl i32 %28, 1
  %31 = xor i32 %1, -1
  %32 = or i32 %31, %0
  %33 = and i32 %32, %2
  %34 = shl i32 %33, 1
  %35 = xor i32 %2, %1
  %36 = and i32 %31, %0
  %37 = xor i32 %19, -1
  %38 = xor i32 %37, %2
  %39 = xor i32 %0, -1
  %40 = xor i32 %25, -1
  %41 = or i32 %40, %39
  %42 = or i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %19, %43
  %45 = shl i32 %44, 1
  %46 = or i32 %27, %19
  %47 = xor i32 %23, -1
  %48 = or i32 %14, %47
  %49 = xor i32 %35, -1
  %50 = and i32 %49, %0
  %51 = and i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = and i32 %47, %2
  %54 = and i32 %2, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %55, %1
  %57 = or i32 %43, %0
  %58 = xor i32 %36, -1
  %59 = and i32 %35, %58
  %60 = and i32 %27, %32
  %61 = shl i32 %60, 1
  %62 = and i32 %14, %0
  %63 = or i32 %62, %31
  %64 = or i32 %1, %0
  %65 = and i32 %35, %64
  %66 = xor i32 %32, -1
  %67 = or i32 %28, %66
  %68 = or i32 %19, %22
  %69 = xor i32 %40, %0
  %70 = or i32 %19, %14
  %71 = and i32 %64, %28
  %72 = xor i32 %64, -1
  %73 = or i32 %49, %72
  %74 = and i32 %16, %39
  %75 = and i32 %21, %47
  %76 = shl i32 %75, 1
  %77 = and i32 %28, %58
  %78 = and i32 %52, %0
  %79 = and i32 %32, %14
  %80 = or i32 %27, %47
  %81 = or i32 %15, %39
  %82 = or i32 %54, %43
  %83 = and i32 %51, %0
  %84 = xor i32 %35, %39
  %85 = or i32 %83, %84
  %86 = add i32 %21, 1
  %87 = or i32 %54, %23
  %88 = and i32 %27, %47
  %89 = xor i32 %62, -1
  %90 = and i32 %89, %47
  %91 = xor i32 %15, %0
  %92 = or i32 %8, %47
  %93 = or i32 %15, %36
  %94 = xor i32 %62, %1
  %95 = or i32 %72, %2
  %96 = xor i32 %42, %0
  %97 = xor i32 %96, 2147483647
  %98 = xor i32 %97, %83
  %99 = and i32 %64, %49
  %100 = or i32 %23, %14
  %101 = add i32 %54, 1
  %102 = and i32 %35, %0
  %103 = xor i32 %66, %2
  %104 = and i32 %49, %39
  %105 = shl i32 %104, 1
  %106 = and i32 %32, %28
  %107 = and i32 %27, %1
  %108 = or i32 %35, %19
  %109 = or i32 %51, %36
  %110 = and i32 %7, %47
  %111 = or i32 %62, %51
  %112 = or i32 %28, %72
  %113 = xor i32 %21, %19
  %114 = and i32 %21, %1
  %115 = or i32 %36, %28
  %116 = or i32 %25, %0
  %117 = and i32 %89, %31
  %118 = or i32 %49, %0
  %119 = and i32 %42, %39
  %120 = or i32 %14, %72
  %121 = or i32 %62, %1
  %122 = or i32 %16, %39
  %123 = and i32 %27, %23
  %124 = add i32 %7, 1
  %125 = and i32 %37, %2
  %126 = and i32 %36, %2
  %127 = or i32 %31, %2
  %128 = xor i32 %127, %0
  %129 = xor i32 %128, -1
  %130 = xor i32 %126, %129
  %131 = and i32 %64, %14
  %132 = or i32 %126, %128
  %133 = or i32 %35, %0
  %134 = and i32 %89, %1
  %135 = or i32 %27, %1
  %136 = xor i32 %21, %1
  %137 = and i32 %23, %14
  %138 = or i32 %52, %0
  %139 = and i32 %27, %58
  %140 = and i32 %21, %31
  %141 = xor i32 %54, %32
  %142 = and i32 %23, %28
  %143 = or i32 %54, %31
  %144 = and i32 %28, %37
  %145 = or i32 %19, %8
  %146 = shl i32 %145, 1
  %147 = and i32 %27, %37
  %148 = and i32 %52, %39
  %149 = or i32 %15, %0
  %150 = xor i32 %22, %1
  %151 = xor i32 %54, %1
  %152 = and i32 %25, %39
  %153 = add i32 %25, 1
  %154 = xor i32 %32, %2
  %155 = xor i32 %54, %16
  %156 = and i32 %28, %47
  %157 = or i32 %49, %66
  %158 = shl i32 %157, 1
  %159 = or i32 %54, %72
  %160 = or i32 %35, %66
  %161 = shl i32 %160, 1
  %162 = or i32 %66, %2
  %163 = xor i32 %64, %2
  %164 = xor i32 %36, %2
  %165 = or i32 %35, %39
  %166 = and i32 %43, %39
  %167 = and i32 %15, %39
  %168 = shl i32 %167, 5
  %169 = and i32 %43, %0
  %170 = mul i32 %169, -11
  %171 = and i32 %15, %0
  %172 = and i32 %40, %39
  %173 = mul i32 %172, -20
  %174 = and i32 %51, %39
  %175 = mul i32 %174, -12
  %176 = and i32 %40, %0
  %177 = mul i32 %83, -17
  %178 = or i32 %4, %3
  %179 = xor i32 %178, -1
  %180 = and i32 %4, %3
  %181 = xor i32 %5, %3
  %182 = or i32 %181, %180
  %183 = and i32 %10, %3
  %184 = xor i32 %183, -1
  %185 = or i32 %184, %4
  %186 = or i32 %5, %3
  %187 = or i32 %186, %4
  %188 = shl i32 %4, 1
  %189 = or i32 %5, %4
  %190 = and i32 %5, %4
  %191 = xor i32 %4, %3
  %192 = xor i32 %191, -1
  %193 = or i32 %190, %192
  %194 = xor i32 %3, -1
  %195 = and i32 %194, %4
  %196 = xor i32 %195, -1
  %197 = and i32 %181, %196
  %198 = and i32 %5, %3
  %199 = or i32 %198, %4
  %200 = xor i32 %190, -1
  %201 = and i32 %200, %3
  %202 = xor i32 %180, -1
  %203 = and i32 %181, %202
  %204 = and i32 %10, %4
  %205 = or i32 %204, %191
  %206 = and i32 %194, %5
  %207 = and i32 %206, %4
  %208 = or i32 %194, %5
  %209 = xor i32 %208, %4
  %210 = or i32 %207, %209
  %211 = xor i32 %5, %4
  %212 = xor i32 %211, -1
  %213 = or i32 %212, %192
  %214 = shl i32 %213, 1
  %215 = or i32 %194, %4
  %216 = xor i32 %215, %5
  %217 = or i32 %10, %192
  %218 = and i32 %212, %196
  %219 = shl i32 %218, 1
  %220 = xor i32 %215, -1
  %221 = or i32 %212, %220
  %222 = shl i32 %221, 1
  %223 = and i32 %178, %10
  %224 = xor i32 %186, -1
  %225 = or i32 %224, %4
  %226 = xor i32 %204, -1
  %227 = and i32 %226, %194
  %228 = and i32 %226, %3
  %229 = or i32 %180, %224
  %230 = or i32 %179, %5
  %231 = shl i32 %230, 1
  %232 = xor i32 %181, %4
  %233 = or i32 %207, %232
  %234 = xor i32 %4, -1
  %235 = and i32 %208, %234
  %236 = or i32 %207, %235
  %237 = xor i32 %195, %5
  %238 = or i32 %212, %194
  %239 = shl i32 %238, 1
  %240 = xor i32 %190, %215
  %241 = or i32 %190, %191
  %242 = and i32 %198, %4
  %243 = and i32 %181, %234
  %244 = xor i32 %242, -1
  %245 = xor i32 %243, %244
  %246 = xor i32 %11, -1
  %247 = or i32 %180, %246
  %248 = and i32 %200, %194
  %249 = or i32 %181, %179
  %250 = or i32 %181, %195
  %251 = or i32 %220, %5
  %252 = or i32 %180, %212
  %253 = and i32 %200, %192
  %254 = xor i32 %198, -1
  %255 = add i32 %198, 1
  %256 = or i32 %10, %3
  %257 = xor i32 %256, -1
  %258 = or i32 %257, %234
  %259 = or i32 %195, %5
  %260 = shl i32 %259, 1
  %261 = and i32 %206, %234
  %262 = xor i32 %181, -1
  %263 = and i32 %262, %4
  %264 = or i32 %261, %263
  %265 = xor i32 %178, %5
  %266 = or i32 %246, %194
  %267 = or i32 %181, %220
  %268 = and i32 %181, %4
  %269 = and i32 %198, %234
  %270 = and i32 %186, %4
  %271 = xor i32 %270, -1
  %272 = xor i32 %269, %271
  %273 = xor i32 %195, %254
  %274 = add i32 %186, 1
  %275 = or i32 %10, %220
  %276 = and i32 %215, %212
  %277 = or i32 %181, %4
  %278 = xor i32 %207, %277
  %279 = and i32 %189, %194
  %280 = and i32 %211, %192
  %281 = xor i32 %256, %180
  %282 = xor i32 %196, %5
  %283 = or i32 %195, %212
  %284 = or i32 %211, %220
  %285 = and i32 %208, %4
  %286 = or i32 %261, %285
  %287 = xor i32 %189, %3
  %288 = shl i32 %215, 1
  %289 = or i32 %198, %195
  %290 = and i32 %211, %3
  %291 = and i32 %10, %202
  %292 = xor i32 %186, %4
  %293 = xor i32 %246, %3
  %294 = and i32 %181, %178
  %295 = add i32 %3, 1
  %296 = and i32 %212, %202
  %297 = and i32 %10, %196
  %298 = and i32 %186, %234
  %299 = xor i32 %298, %244
  %300 = and i32 %11, %191
  %301 = and i32 %262, %196
  %302 = xor i32 %277, -1
  %303 = or i32 %207, %302
  %304 = or i32 %262, %220
  %305 = xor i32 %204, %254
  %306 = or i32 %204, %3
  %307 = shl i32 %306, 1
  %308 = add i32 %11, 1
  %309 = and i32 %191, %212
  %310 = and i32 %11, %192
  %311 = and i32 %181, %215
  %312 = shl i32 %311, 1
  %313 = xor i32 %312, -1
  %314 = and i32 %11, %3
  %315 = and i32 %212, %192
  %316 = or i32 %183, %234
  %317 = and i32 %10, %192
  %318 = and i32 %189, %3
  %319 = or i32 %204, %257
  %320 = shl i32 %298, 1
  %321 = xor i32 %204, %3
  %322 = or i32 %242, %243
  %323 = and i32 %224, %234
  %324 = and i32 %183, %234
  %325 = and i32 %224, %4
  %326 = mul i32 %325, 18
  %327 = and i32 %183, %4
  %328 = and i32 %257, %234
  %329 = shl i32 %328, 3
  %330 = and i32 %257, %4
  %331 = add i32 %66, %1
  %332 = add i32 %331, %162
  %333 = add i32 %332, %95
  %334 = add i32 %333, %150
  %335 = add i32 %334, %139
  %336 = add i32 %335, %122
  %337 = add i32 %336, %92
  %338 = add i32 %337, %71
  %339 = add i32 %338, %57
  %340 = add i32 %339, %291
  %341 = add i32 %340, %98
  %342 = add i32 %341, %315
  %343 = add i32 %342, %318
  %344 = add i32 %343, %293
  %345 = add i32 %344, %250
  %346 = add i32 %345, %228
  %347 = add i32 %346, %227
  %348 = add i32 %347, %199
  %349 = add i32 %348, %187
  %350 = shl i32 %349, 1
  %351 = add i32 %144, %16
  %352 = sub i32 %351, %211
  %353 = add i32 %352, %189
  %354 = sub i32 %353, %321
  %355 = sub i32 %354, %327
  %356 = add i32 %355, %290
  %357 = mul i32 %356, 3
  %358 = sub i32 %64, %21
  %359 = add i32 %358, %15
  %360 = add i32 %359, %82
  %361 = add i32 %360, %324
  %362 = sub i32 %361, %245
  %363 = mul i32 %362, 5
  %364 = add i32 %176, %171
  %365 = mul i32 %364, -26
  %366 = sub i32 %330, %166
  %367 = mul i32 %366, 15
  %368 = add i32 %138, %114
  %369 = shl i32 %368, 2
  %370 = add i32 %323, -1
  %371 = add i32 %370, %269
  %372 = mul i32 %371, 6
  %373 = sub i32 %35, %32
  %374 = sub i32 %373, %38
  %375 = sub i32 %374, %42
  %376 = sub i32 %375, %48
  %377 = add i32 %376, %52
  %378 = sub i32 %377, %53
  %379 = sub i32 %378, %7
  %380 = sub i32 %379, %70
  %381 = add i32 %380, %79
  %382 = add i32 %381, %86
  %383 = add i32 %382, %100
  %384 = add i32 %383, %101
  %385 = add i32 %384, %103
  %386 = sub i32 %385, %51
  %387 = add i32 %386, %89
  %388 = add i32 %387, %120
  %389 = add i32 %388, %124
  %390 = sub i32 %389, %125
  %391 = add i32 %390, %131
  %392 = sub i32 %391, %137
  %393 = add i32 %392, %153
  %394 = add i32 %393, %154
  %395 = sub i32 %394, %163
  %396 = add i32 %395, %164
  %397 = add i32 %396, %295
  %398 = sub i32 %397, %20
  %399 = sub i32 %398, %24
  %400 = sub i32 %399, %26
  %401 = add i32 %400, %29
  %402 = sub i32 %401, %30
  %403 = sub i32 %402, %34
  %404 = add i32 %403, %41
  %405 = sub i32 %404, %46
  %406 = sub i32 %405, %50
  %407 = sub i32 %406, %56
  %408 = add i32 %407, %59
  %409 = add i32 %408, %63
  %410 = sub i32 %409, %65
  %411 = add i32 %410, %67
  %412 = add i32 %411, %68
  %413 = add i32 %412, %69
  %414 = sub i32 %413, %73
  %415 = add i32 %414, %74
  %416 = add i32 %415, %77
  %417 = add i32 %416, %78
  %418 = add i32 %417, %80
  %419 = add i32 %418, %81
  %420 = sub i32 %419, %87
  %421 = add i32 %420, %88
  %422 = add i32 %421, %90
  %423 = sub i32 %422, %91
  %424 = sub i32 %423, %93
  %425 = sub i32 %424, %94
  %426 = sub i32 %425, %99
  %427 = add i32 %426, %102
  %428 = sub i32 %427, %106
  %429 = sub i32 %428, %107
  %430 = sub i32 %429, %108
  %431 = add i32 %430, %109
  %432 = sub i32 %431, %110
  %433 = add i32 %432, %111
  %434 = add i32 %433, %112
  %435 = add i32 %434, %113
  %436 = add i32 %435, %115
  %437 = sub i32 %436, %116
  %438 = sub i32 %437, %117
  %439 = sub i32 %438, %118
  %440 = add i32 %439, %119
  %441 = sub i32 %440, %96
  %442 = add i32 %441, %121
  %443 = sub i32 %442, %123
  %444 = add i32 %443, %133
  %445 = sub i32 %444, %134
  %446 = add i32 %445, %135
  %447 = add i32 %446, %136
  %448 = sub i32 %447, %140
  %449 = add i32 %448, %141
  %450 = add i32 %449, %142
  %451 = sub i32 %450, %143
  %452 = sub i32 %451, %147
  %453 = add i32 %452, %148
  %454 = add i32 %453, %149
  %455 = add i32 %454, %151
  %456 = sub i32 %455, %152
  %457 = sub i32 %456, %155
  %458 = sub i32 %457, %156
  %459 = sub i32 %458, %159
  %460 = add i32 %459, %165
  %461 = add i32 %460, %18
  %462 = sub i32 %461, %45
  %463 = sub i32 %462, %61
  %464 = sub i32 %463, %76
  %465 = sub i32 %464, %85
  %466 = sub i32 %465, %105
  %467 = add i32 %466, %130
  %468 = sub i32 %467, %132
  %469 = sub i32 %468, %146
  %470 = sub i32 %469, %158
  %471 = sub i32 %470, %161
  %472 = sub i32 %471, %168
  %473 = add i32 %472, %170
  %474 = add i32 %473, %173
  %475 = add i32 %474, %175
  %476 = add i32 %475, %177
  %477 = sub i32 %476, %188
  %478 = add i32 %477, %202
  %479 = sub i32 %478, %195
  %480 = add i32 %479, %196
  %481 = add i32 %480, %189
  %482 = sub i32 %481, %216
  %483 = add i32 %482, %217
  %484 = add i32 %483, %223
  %485 = add i32 %484, %237
  %486 = add i32 %485, %181
  %487 = sub i32 %486, %251
  %488 = add i32 %487, %255
  %489 = sub i32 %488, %265
  %490 = add i32 %489, %274
  %491 = add i32 %490, %275
  %492 = add i32 %491, %282
  %493 = sub i32 %492, %288
  %494 = add i32 %493, %198
  %495 = sub i32 %494, %297
  %496 = add i32 %495, %308
  %497 = add i32 %496, %317
  %498 = add i32 %497, %365
  %499 = add i32 %498, %369
  %500 = add i32 %499, %182
  %501 = sub i32 %500, %185
  %502 = add i32 %501, %193
  %503 = sub i32 %502, %197
  %504 = sub i32 %503, %201
  %505 = sub i32 %504, %203
  %506 = sub i32 %505, %205
  %507 = add i32 %506, %225
  %508 = sub i32 %507, %229
  %509 = sub i32 %508, %231
  %510 = add i32 %509, %240
  %511 = add i32 %510, %241
  %512 = add i32 %511, %247
  %513 = sub i32 %512, %248
  %514 = sub i32 %513, %249
  %515 = add i32 %514, %252
  %516 = add i32 %515, %253
  %517 = add i32 %516, %258
  %518 = sub i32 %517, %260
  %519 = sub i32 %518, %266
  %520 = sub i32 %519, %267
  %521 = sub i32 %520, %268
  %522 = add i32 %521, %273
  %523 = sub i32 %522, %276
  %524 = add i32 %523, %279
  %525 = add i32 %524, %280
  %526 = add i32 %525, %281
  %527 = add i32 %526, %270
  %528 = sub i32 %527, %283
  %529 = sub i32 %528, %284
  %530 = sub i32 %529, %287
  %531 = sub i32 %530, %263
  %532 = sub i32 %531, %289
  %533 = sub i32 %532, %292
  %534 = add i32 %533, %294
  %535 = add i32 %534, %296
  %536 = sub i32 %535, %300
  %537 = add i32 %536, %301
  %538 = add i32 %537, %304
  %539 = add i32 %538, %305
  %540 = add i32 %539, %309
  %541 = add i32 %540, %310
  %542 = add i32 %541, %232
  %543 = sub i32 %542, %314
  %544 = add i32 %543, %316
  %545 = sub i32 %544, %319
  %546 = add i32 %545, %242
  %547 = sub i32 %546, %210
  %548 = sub i32 %547, %214
  %549 = sub i32 %548, %219
  %550 = sub i32 %549, %222
  %551 = sub i32 %550, %233
  %552 = sub i32 %551, %236
  %553 = sub i32 %552, %239
  %554 = add i32 %553, %264
  %555 = sub i32 %554, %272
  %556 = sub i32 %555, %278
  %557 = sub i32 %556, %286
  %558 = add i32 %557, %299
  %559 = sub i32 %558, %303
  %560 = sub i32 %559, %307
  %561 = add i32 %560, %313
  %562 = sub i32 %561, %320
  %563 = sub i32 %562, %322
  %564 = add i32 %563, %326
  %565 = add i32 %564, %329
  %566 = add i32 %565, %367
  %567 = add i32 %566, %372
  %568 = add i32 %567, %357
  %569 = add i32 %568, %363
  %570 = add i32 %569, %350
  %571 = icmp eq i32 %13, %570
  %572 = select i1 %571, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %573 = tail call i32 @puts(i8* nonnull dereferenceable(1) %572)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
