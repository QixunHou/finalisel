; ModuleID = '../.././c_source_file/0448_path_condition_crackme.c'
source_filename = "../.././c_source_file/0448_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = or i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = xor i32 %5, -1
  %12 = or i32 %11, %3
  %13 = add i32 %12, %10
  %14 = and i32 %5, %3
  %15 = and i32 %14, %4
  %16 = or i32 %5, %3
  %17 = xor i32 %16, %4
  %18 = or i32 %15, %17
  %19 = sub i32 %13, %18
  %20 = xor i32 %1, -1
  %21 = xor i32 %2, %0
  %22 = and i32 %21, %20
  %23 = xor i32 %21, -1
  %24 = or i32 %23, %1
  %25 = xor i32 %2, -1
  %26 = and i32 %20, %2
  %27 = xor i32 %26, %0
  %28 = xor i32 %0, -1
  %29 = xor i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %28
  %32 = and i32 %28, %1
  %33 = xor i32 %32, %2
  %34 = or i32 %26, %7
  %35 = and i32 %2, %1
  %36 = xor i32 %35, 2147483647
  %37 = and i32 %36, %28
  %38 = or i32 %29, %28
  %39 = and i32 %26, %0
  %40 = or i32 %29, %0
  %41 = xor i32 %39, %40
  %42 = or i32 %25, %0
  %43 = xor i32 %1, %0
  %44 = and i32 %42, %43
  %45 = shl i32 %44, 1
  %46 = or i32 %2, %0
  %47 = xor i32 %46, %7
  %48 = or i32 %21, %1
  %49 = and i32 %43, %2
  %50 = shl i32 %49, 2
  %51 = and i32 %2, %0
  %52 = or i32 %1, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %51, %53
  %55 = or i32 %29, %32
  %56 = and i32 %25, %0
  %57 = xor i32 %43, -1
  %58 = or i32 %56, %57
  %59 = or i32 %32, %2
  %60 = or i32 %20, %2
  %61 = and i32 %60, %28
  %62 = or i32 %39, %61
  %63 = and i32 %25, %1
  %64 = or i32 %51, %63
  %65 = and i32 %29, %0
  %66 = shl i32 %65, 1
  %67 = or i32 %30, %0
  %68 = and i32 %35, %28
  %69 = and i32 %8, %0
  %70 = or i32 %68, %69
  %71 = xor i32 %7, %25
  %72 = and i32 %20, %0
  %73 = xor i32 %51, -1
  %74 = and i32 %73, %1
  %75 = xor i32 %72, 2147483647
  %76 = and i32 %29, %75
  %77 = and i32 %9, %28
  %78 = and i32 %9, %0
  %79 = and i32 %63, %0
  %80 = mul i32 %79, 6
  %81 = and i32 %26, %28
  %82 = shl i32 %81, 2
  %83 = mul i32 %68, 11
  %84 = shl i32 %39, 4
  %85 = and i32 %35, %0
  %86 = and i32 %4, %3
  %87 = xor i32 %5, %3
  %88 = xor i32 %87, -1
  %89 = or i32 %86, %88
  %90 = and i32 %5, %4
  %91 = or i32 %90, %3
  %92 = xor i32 %86, -1
  %93 = and i32 %92, %5
  %94 = xor i32 %14, -1
  %95 = xor i32 %94, %4
  %96 = xor i32 %16, -1
  %97 = or i32 %86, %11
  %98 = or i32 %5, %4
  %99 = xor i32 %98, %86
  %100 = xor i32 %3, -1
  %101 = and i32 %100, %4
  %102 = and i32 %11, %3
  %103 = or i32 %102, %101
  %104 = xor i32 %98, -1
  %105 = xor i32 %4, %3
  %106 = or i32 %105, %104
  %107 = shl i32 %106, 1
  %108 = xor i32 %4, -1
  %109 = or i32 %14, %108
  %110 = or i32 %4, %3
  %111 = and i32 %110, %11
  %112 = xor i32 %87, %4
  %113 = xor i32 %112, -1
  %114 = or i32 %15, %113
  %115 = xor i32 %105, -1
  %116 = and i32 %98, %115
  %117 = xor i32 %5, %4
  %118 = and i32 %117, %110
  %119 = shl i32 %118, 1
  %120 = and i32 %14, %108
  %121 = and i32 %16, %4
  %122 = xor i32 %121, -1
  %123 = xor i32 %120, %122
  %124 = or i32 %100, %4
  %125 = xor i32 %124, -1
  %126 = or i32 %90, %96
  %127 = and i32 %11, %92
  %128 = and i32 %87, %4
  %129 = or i32 %120, %128
  %130 = and i32 %100, %5
  %131 = and i32 %130, %108
  %132 = or i32 %87, %108
  %133 = xor i32 %132, -1
  %134 = or i32 %131, %133
  %135 = xor i32 %102, -1
  %136 = or i32 %135, %4
  %137 = and i32 %87, %108
  %138 = xor i32 %137, 2147483647
  %139 = xor i32 %138, %15
  %140 = shl i32 %139, 1
  %141 = xor i32 %90, %110
  %142 = shl i32 %141, 1
  %143 = shl i32 %135, 2
  %144 = xor i32 %92, %5
  %145 = or i32 %86, %104
  %146 = xor i32 %12, %4
  %147 = and i32 %11, %4
  %148 = xor i32 %12, -1
  %149 = or i32 %147, %148
  %150 = or i32 %117, %125
  %151 = or i32 %11, %4
  %152 = xor i32 %151, -1
  %153 = or i32 %105, %152
  %154 = xor i32 %117, -1
  %155 = or i32 %154, %100
  %156 = xor i32 %101, -1
  %157 = and i32 %87, %156
  %158 = and i32 %130, %4
  %159 = or i32 %87, %4
  %160 = xor i32 %158, %159
  %161 = or i32 %100, %5
  %162 = xor i32 %161, %4
  %163 = xor i32 %158, -1
  %164 = xor i32 %162, %163
  %165 = add i32 %151, 1
  %166 = or i32 %87, %125
  %167 = shl i32 %98, 2
  %168 = and i32 %105, %5
  %169 = or i32 %152, %115
  %170 = and i32 %12, %4
  %171 = shl i32 %170, 1
  %172 = xor i32 %90, -1
  %173 = add i32 %90, 1
  %174 = and i32 %87, %124
  %175 = and i32 %110, %88
  %176 = xor i32 %110, -1
  %177 = xor i32 %176, %5
  %178 = xor i32 %15, %112
  %179 = and i32 %16, %108
  %180 = and i32 %98, %100
  %181 = or i32 %147, %3
  %182 = xor i32 %104, %3
  %183 = and i32 %110, %5
  %184 = xor i32 %147, -1
  %185 = and i32 %172, %3
  %186 = and i32 %88, %4
  %187 = and i32 %117, %115
  %188 = shl i32 %187, 1
  %189 = or i32 %105, %5
  %190 = and i32 %11, %156
  %191 = or i32 %117, %100
  %192 = shl i32 %191, 1
  %193 = and i32 %124, %11
  %194 = shl i32 %193, 1
  %195 = and i32 %151, %3
  %196 = and i32 %151, %115
  %197 = or i32 %104, %115
  %198 = xor i32 %90, %16
  %199 = and i32 %124, %154
  %200 = xor i32 %14, %4
  %201 = or i32 %154, %3
  %202 = or i32 %16, %4
  %203 = shl i32 %117, 1
  %204 = xor i32 %158, %113
  %205 = and i32 %115, %5
  %206 = and i32 %161, %108
  %207 = xor i32 %206, %163
  %208 = or i32 %120, %121
  %209 = or i32 %117, %105
  %210 = and i32 %105, %154
  %211 = shl i32 %210, 1
  %212 = and i32 %105, %172
  %213 = and i32 %151, %100
  %214 = or i32 %148, %4
  %215 = xor i32 %98, %3
  %216 = or i32 %90, %102
  %217 = or i32 %90, %125
  %218 = or i32 %90, %115
  %219 = and i32 %98, %105
  %220 = and i32 %88, %156
  %221 = xor i32 %15, -1
  %222 = xor i32 %17, %221
  %223 = or i32 %147, %105
  %224 = xor i32 %172, %3
  %225 = or i32 %87, %101
  %226 = shl i32 %225, 1
  %227 = or i32 %147, %115
  %228 = and i32 %117, %156
  %229 = or i32 %96, %108
  %230 = shl i32 %229, 1
  %231 = and i32 %154, %3
  %232 = shl i32 %154, 1
  %233 = add i32 %86, 1
  %234 = or i32 %104, %100
  %235 = or i32 %86, %154
  %236 = or i32 %117, %115
  %237 = xor i32 %12, %86
  %238 = and i32 %94, %4
  %239 = or i32 %87, %86
  %240 = or i32 %101, %88
  %241 = and i32 %88, %92
  %242 = or i32 %101, %11
  %243 = or i32 %88, %4
  %244 = or i32 %135, %108
  %245 = shl i32 %244, 1
  %246 = or i32 %86, %5
  %247 = or i32 %11, %176
  %248 = and i32 %117, %92
  %249 = or i32 %102, %108
  %250 = and i32 %154, %100
  %251 = and i32 %184, %115
  %252 = and i32 %105, %184
  %253 = or i32 %88, %125
  %254 = or i32 %87, %176
  %255 = xor i32 %90, %3
  %256 = xor i32 %184, %3
  %257 = or i32 %14, %4
  %258 = and i32 %12, %108
  %259 = or i32 %102, %4
  %260 = shl i32 %259, 1
  %261 = and i32 %184, %100
  %262 = and i32 %184, %3
  %263 = or i32 %158, %206
  %264 = xor i32 %88, %4
  %265 = xor i32 %16, %86
  %266 = and i32 %87, %110
  %267 = and i32 %98, %3
  %268 = or i32 %105, %154
  %269 = xor i32 %110, %5
  %270 = xor i32 %125, %5
  %271 = add i32 %105, 1
  %272 = or i32 %101, %154
  %273 = xor i32 %101, %135
  %274 = or i32 %12, %108
  %275 = or i32 %86, %96
  %276 = or i32 %117, %86
  %277 = and i32 %11, %115
  %278 = or i32 %11, %125
  %279 = or i32 %86, %148
  %280 = shl i32 %279, 1
  %281 = and i32 %88, %108
  %282 = and i32 %117, %124
  %283 = xor i32 %86, %5
  %284 = xor i32 %96, %4
  %285 = xor i32 %101, %5
  %286 = shl i32 %285, 1
  %287 = or i32 %158, %162
  %288 = and i32 %117, %105
  %289 = shl i32 %288, 1
  %290 = xor i32 %90, %135
  %291 = and i32 %135, %108
  %292 = and i32 %154, %156
  %293 = and i32 %154, %92
  %294 = or i32 %148, %108
  %295 = xor i32 %128, 2147483647
  %296 = xor i32 %295, %120
  %297 = shl i32 %296, 1
  %298 = xor i32 %179, %221
  %299 = xor i32 %90, %124
  %300 = or i32 %11, %115
  %301 = add i32 %14, 1
  %302 = xor i32 %147, %12
  %303 = shl i32 %302, 1
  %304 = or i32 %14, %101
  %305 = or i32 %105, %11
  %306 = or i32 %117, %101
  %307 = or i32 %104, %3
  %308 = and i32 %156, %5
  %309 = and i32 %87, %92
  %310 = xor i32 %135, %4
  %311 = and i32 %105, %11
  %312 = and i32 %154, %115
  %313 = xor i32 %102, %4
  %314 = shl i32 %313, 1
  %315 = and i32 %161, %4
  %316 = xor i32 %315, -1
  %317 = xor i32 %131, %316
  %318 = or i32 %154, %176
  %319 = or i32 %90, %100
  %320 = or i32 %152, %3
  %321 = or i32 %117, %3
  %322 = and i32 %124, %88
  %323 = or i32 %12, %4
  %324 = or i32 %88, %108
  %325 = or i32 %176, %5
  %326 = xor i32 %151, %86
  %327 = xor i32 %147, %94
  %328 = xor i32 %151, %3
  %329 = xor i32 %148, %4
  %330 = or i32 %117, %176
  %331 = xor i32 %152, %3
  %332 = or i32 %15, %179
  %333 = shl i32 %332, 1
  %334 = xor i32 %156, %5
  %335 = or i32 %16, %108
  %336 = shl i32 %335, 1
  %337 = and i32 %117, %100
  %338 = xor i32 %124, %5
  %339 = shl i32 %338, 1
  %340 = shl i32 %105, 1
  %341 = xor i32 %159, -1
  %342 = or i32 %158, %341
  %343 = add i32 %87, 1
  %344 = or i32 %154, %115
  %345 = shl i32 %344, 1
  %346 = and i32 %124, %5
  %347 = or i32 %152, %100
  %348 = or i32 %131, %315
  %349 = xor i32 %131, %132
  %350 = or i32 %96, %4
  %351 = or i32 %86, %152
  %352 = or i32 %15, %137
  %353 = and i32 %172, %100
  %354 = or i32 %90, %176
  %355 = and i32 %94, %108
  %356 = and i32 %96, %108
  %357 = and i32 %102, %108
  %358 = and i32 %96, %4
  %359 = mul i32 %358, 24
  %360 = and i32 %102, %4
  %361 = and i32 %148, %108
  %362 = mul i32 %361, 18
  %363 = and i32 %148, %4
  %364 = add i32 %76, %59
  %365 = add i32 %364, %41
  %366 = add i32 %365, %37
  %367 = add i32 %366, %151
  %368 = add i32 %367, %246
  %369 = add i32 %368, %184
  %370 = add i32 %369, %111
  %371 = add i32 %370, %93
  %372 = add i32 %371, %330
  %373 = add i32 %372, %121
  %374 = add i32 %373, %307
  %375 = add i32 %374, %294
  %376 = add i32 %375, %293
  %377 = add i32 %376, %264
  %378 = add i32 %377, %262
  %379 = add i32 %378, %212
  %380 = add i32 %379, %200
  %381 = add i32 %380, %198
  %382 = add i32 %381, %166
  %383 = add i32 %382, %126
  %384 = add i32 %383, %129
  %385 = shl i32 %384, 1
  %386 = sub i32 %277, %70
  %387 = add i32 %386, %357
  %388 = sub i32 %387, %284
  %389 = add i32 %388, %274
  %390 = add i32 %389, %240
  %391 = sub i32 %390, %160
  %392 = mul i32 %391, 5
  %393 = or i32 %363, %120
  %394 = shl i32 %393, 3
  %395 = add i32 %15, %360
  %396 = mul i32 %395, 9
  %397 = xor i32 %63, -1
  %398 = or i32 %397, %0
  %399 = add i32 %78, %398
  %400 = add i32 %399, %242
  %401 = sub i32 %400, %287
  %402 = mul i32 %401, 3
  %403 = add i32 %32, 2
  %404 = sub i32 %403, %72
  %405 = sub i32 %404, %52
  %406 = sub i32 %405, %33
  %407 = add i32 %406, %35
  %408 = add i32 %407, %71
  %409 = add i32 %408, %3
  %410 = sub i32 %409, %24
  %411 = sub i32 %410, %22
  %412 = sub i32 %411, %27
  %413 = sub i32 %412, %31
  %414 = add i32 %413, %34
  %415 = sub i32 %414, %38
  %416 = add i32 %415, %40
  %417 = sub i32 %416, %47
  %418 = sub i32 %417, %48
  %419 = sub i32 %418, %50
  %420 = add i32 %419, %54
  %421 = sub i32 %420, %55
  %422 = add i32 %421, %58
  %423 = sub i32 %422, %64
  %424 = add i32 %423, %67
  %425 = add i32 %424, %74
  %426 = sub i32 %425, %77
  %427 = add i32 %426, %85
  %428 = add i32 %427, 1
  %429 = sub i32 %428, %45
  %430 = sub i32 %429, %62
  %431 = sub i32 %430, %66
  %432 = add i32 %431, %80
  %433 = sub i32 %432, %82
  %434 = add i32 %433, %83
  %435 = add i32 %434, %84
  %436 = sub i32 %435, %110
  %437 = add i32 %436, %176
  %438 = add i32 %437, %233
  %439 = sub i32 %438, %5
  %440 = sub i32 %439, %86
  %441 = add i32 %440, %271
  %442 = add i32 %441, %11
  %443 = sub i32 %442, %97
  %444 = add i32 %443, %102
  %445 = add i32 %444, %127
  %446 = sub i32 %445, %144
  %447 = add i32 %446, %165
  %448 = add i32 %447, %168
  %449 = add i32 %448, %90
  %450 = add i32 %449, %173
  %451 = add i32 %450, %177
  %452 = add i32 %451, %183
  %453 = sub i32 %452, %189
  %454 = add i32 %453, %190
  %455 = sub i32 %454, %14
  %456 = add i32 %455, %205
  %457 = add i32 %456, %247
  %458 = sub i32 %457, %269
  %459 = add i32 %458, %270
  %460 = add i32 %459, %278
  %461 = sub i32 %460, %283
  %462 = add i32 %461, %300
  %463 = add i32 %462, %301
  %464 = sub i32 %463, %305
  %465 = add i32 %464, %308
  %466 = sub i32 %465, %311
  %467 = add i32 %466, %325
  %468 = add i32 %467, %147
  %469 = sub i32 %468, %334
  %470 = sub i32 %469, %340
  %471 = add i32 %470, %343
  %472 = sub i32 %471, %346
  %473 = sub i32 %472, %89
  %474 = add i32 %473, %91
  %475 = sub i32 %474, %95
  %476 = sub i32 %475, %99
  %477 = sub i32 %476, %103
  %478 = add i32 %477, %109
  %479 = add i32 %478, %116
  %480 = add i32 %479, %136
  %481 = sub i32 %480, %143
  %482 = add i32 %481, %145
  %483 = sub i32 %482, %146
  %484 = add i32 %483, %149
  %485 = sub i32 %484, %150
  %486 = add i32 %485, %153
  %487 = add i32 %486, %155
  %488 = sub i32 %487, %157
  %489 = add i32 %488, %167
  %490 = add i32 %489, %169
  %491 = add i32 %490, %174
  %492 = sub i32 %491, %175
  %493 = sub i32 %492, %179
  %494 = sub i32 %493, %180
  %495 = add i32 %494, %181
  %496 = add i32 %495, %182
  %497 = sub i32 %496, %185
  %498 = sub i32 %497, %186
  %499 = sub i32 %498, %194
  %500 = sub i32 %499, %195
  %501 = add i32 %500, %128
  %502 = add i32 %501, %196
  %503 = add i32 %502, %197
  %504 = add i32 %503, %199
  %505 = add i32 %504, %201
  %506 = add i32 %505, %202
  %507 = sub i32 %506, %203
  %508 = sub i32 %507, %209
  %509 = add i32 %508, %213
  %510 = sub i32 %509, %214
  %511 = sub i32 %510, %215
  %512 = add i32 %511, %216
  %513 = sub i32 %512, %217
  %514 = sub i32 %513, %218
  %515 = sub i32 %514, %219
  %516 = sub i32 %515, %220
  %517 = add i32 %516, %223
  %518 = add i32 %517, %224
  %519 = add i32 %518, %227
  %520 = sub i32 %519, %228
  %521 = add i32 %520, %231
  %522 = sub i32 %521, %232
  %523 = add i32 %522, %234
  %524 = add i32 %523, %235
  %525 = sub i32 %524, %236
  %526 = sub i32 %525, %237
  %527 = sub i32 %526, %238
  %528 = add i32 %527, %239
  %529 = add i32 %528, %241
  %530 = sub i32 %529, %243
  %531 = sub i32 %530, %248
  %532 = sub i32 %531, %249
  %533 = add i32 %532, %250
  %534 = add i32 %533, %251
  %535 = sub i32 %534, %252
  %536 = sub i32 %535, %132
  %537 = sub i32 %536, %253
  %538 = add i32 %537, %17
  %539 = sub i32 %538, %254
  %540 = sub i32 %539, %255
  %541 = sub i32 %540, %256
  %542 = sub i32 %541, %257
  %543 = add i32 %542, %258
  %544 = sub i32 %543, %261
  %545 = sub i32 %544, %112
  %546 = add i32 %545, %265
  %547 = add i32 %546, %266
  %548 = sub i32 %547, %267
  %549 = add i32 %548, %268
  %550 = sub i32 %549, %272
  %551 = add i32 %550, %273
  %552 = sub i32 %551, %275
  %553 = add i32 %552, %276
  %554 = sub i32 %553, %281
  %555 = sub i32 %554, %282
  %556 = sub i32 %555, %286
  %557 = add i32 %556, %290
  %558 = sub i32 %557, %291
  %559 = sub i32 %558, %292
  %560 = add i32 %559, %299
  %561 = add i32 %560, %304
  %562 = add i32 %561, %137
  %563 = sub i32 %562, %306
  %564 = add i32 %563, %309
  %565 = add i32 %564, %310
  %566 = sub i32 %565, %312
  %567 = sub i32 %566, %318
  %568 = sub i32 %567, %319
  %569 = sub i32 %568, %320
  %570 = add i32 %569, %321
  %571 = add i32 %570, %322
  %572 = add i32 %571, %323
  %573 = add i32 %572, %324
  %574 = add i32 %573, %326
  %575 = add i32 %574, %327
  %576 = sub i32 %575, %328
  %577 = sub i32 %576, %329
  %578 = sub i32 %577, %159
  %579 = sub i32 %578, %331
  %580 = add i32 %579, %337
  %581 = sub i32 %580, %339
  %582 = add i32 %581, %347
  %583 = add i32 %582, %350
  %584 = sub i32 %583, %351
  %585 = sub i32 %584, %353
  %586 = sub i32 %585, %354
  %587 = add i32 %586, %355
  %588 = sub i32 %587, %356
  %589 = sub i32 %588, %107
  %590 = sub i32 %589, %114
  %591 = sub i32 %590, %119
  %592 = sub i32 %591, %123
  %593 = sub i32 %592, %134
  %594 = sub i32 %593, %142
  %595 = add i32 %594, %164
  %596 = sub i32 %595, %171
  %597 = add i32 %596, %178
  %598 = sub i32 %597, %188
  %599 = sub i32 %598, %192
  %600 = add i32 %599, %204
  %601 = add i32 %600, %207
  %602 = sub i32 %601, %208
  %603 = sub i32 %602, %211
  %604 = add i32 %603, %222
  %605 = sub i32 %604, %226
  %606 = sub i32 %605, %230
  %607 = sub i32 %606, %245
  %608 = sub i32 %607, %260
  %609 = sub i32 %608, %263
  %610 = sub i32 %609, %280
  %611 = sub i32 %610, %289
  %612 = sub i32 %611, %298
  %613 = sub i32 %612, %303
  %614 = sub i32 %613, %314
  %615 = sub i32 %614, %317
  %616 = sub i32 %615, %336
  %617 = add i32 %616, %342
  %618 = sub i32 %617, %345
  %619 = sub i32 %618, %348
  %620 = sub i32 %619, %349
  %621 = add i32 %620, %352
  %622 = add i32 %621, %359
  %623 = add i32 %622, %362
  %624 = sub i32 %623, %333
  %625 = add i32 %624, %394
  %626 = add i32 %625, %396
  %627 = sub i32 %626, %140
  %628 = sub i32 %627, %297
  %629 = add i32 %628, %402
  %630 = add i32 %629, %392
  %631 = add i32 %630, %385
  %632 = icmp eq i32 %19, %631
  %633 = select i1 %632, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %634 = tail call i32 @puts(i8* nonnull dereferenceable(1) %633)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
