; ModuleID = '../.././c_source_file/1745_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1745_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %6, %4
  %8 = mul i32 %7, -2
  %9 = xor i32 %1, %0
  %10 = and i32 %9, %6
  %11 = sub i32 %8, %10
  %12 = and i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %2
  %15 = or i32 %1, %0
  %16 = xor i32 %15, -1
  %17 = and i32 %2, %1
  %18 = and i32 %17, %0
  %19 = xor i32 %0, -1
  %20 = xor i32 %2, %1
  %21 = and i32 %20, %19
  %22 = or i32 %18, %21
  %23 = and i32 %4, %0
  %24 = or i32 %17, %23
  %25 = and i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %9, -1
  %28 = and i32 %26, %27
  %29 = or i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %12, %30
  %32 = or i32 %20, %12
  %33 = xor i32 %2, -1
  %34 = or i32 %33, %1
  %35 = xor i32 %34, -1
  %36 = xor i32 %35, %0
  %37 = shl i32 %36, 1
  %38 = or i32 %2, %0
  %39 = and i32 %38, %9
  %40 = or i32 %4, %0
  %41 = and i32 %40, %2
  %42 = or i32 %33, %0
  %43 = and i32 %42, %9
  %44 = add i32 %9, 1
  %45 = and i32 %33, %0
  %46 = xor i32 %17, -1
  %47 = xor i32 %45, %46
  %48 = and i32 %46, %19
  %49 = and i32 %33, %1
  %50 = xor i32 %49, -1
  %51 = xor i32 %25, %50
  %52 = xor i32 %23, -1
  %53 = xor i32 %20, -1
  %54 = and i32 %53, %52
  %55 = xor i32 %17, %0
  %56 = shl i32 %55, 1
  %57 = add i32 %17, 1
  %58 = or i32 %25, %49
  %59 = and i32 %4, %2
  %60 = and i32 %59, %0
  %61 = xor i32 %20, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %60, %62
  %64 = xor i32 %45, %1
  %65 = or i32 %12, %33
  %66 = xor i32 %49, %0
  %67 = and i32 %5, %13
  %68 = xor i32 %38, %12
  %69 = and i32 %42, %1
  %70 = and i32 %33, %13
  %71 = shl i32 %70, 2
  %72 = and i32 %53, %13
  %73 = and i32 %20, %0
  %74 = xor i32 %38, -1
  %75 = and i32 %17, %19
  %76 = xor i32 %75, -1
  %77 = xor i32 %73, %76
  %78 = xor i32 %21, -1
  %79 = xor i32 %18, %78
  %80 = and i32 %42, %27
  %81 = xor i32 %18, %61
  %82 = xor i32 %29, %12
  %83 = xor i32 %40, %2
  %84 = xor i32 %40, -1
  %85 = or i32 %84, %2
  %86 = or i32 %18, %62
  %87 = or i32 %20, %19
  %88 = or i32 %45, %1
  %89 = or i32 %9, %33
  %90 = and i32 %5, %40
  %91 = and i32 %15, %33
  %92 = xor i32 %13, %2
  %93 = xor i32 %42, %12
  %94 = or i32 %25, %27
  %95 = and i32 %33, %52
  %96 = xor i32 %25, %40
  %97 = and i32 %20, %52
  %98 = and i32 %5, %9
  %99 = or i32 %45, %27
  %100 = xor i32 %42, -1
  %101 = or i32 %20, %0
  %102 = shl i32 %101, 1
  %103 = or i32 %12, %35
  %104 = and i32 %9, %33
  %105 = or i32 %23, %33
  %106 = and i32 %46, %0
  %107 = xor i32 %18, 2147483647
  %108 = xor i32 %107, %0
  %109 = xor i32 %108, %29
  %110 = shl i32 %109, 1
  %111 = or i32 %53, %16
  %112 = and i32 %59, %19
  %113 = or i32 %4, %2
  %114 = and i32 %113, %0
  %115 = xor i32 %114, -1
  %116 = xor i32 %112, %115
  %117 = or i32 %12, %2
  %118 = or i32 %5, %9
  %119 = shl i32 %118, 2
  %120 = or i32 %27, %2
  %121 = and i32 %40, %6
  %122 = and i32 %15, %6
  %123 = or i32 %35, %0
  %124 = or i32 %16, %2
  %125 = and i32 %29, %0
  %126 = xor i32 %125, %76
  %127 = or i32 %45, %4
  %128 = xor i32 %74, %1
  %129 = and i32 %52, %2
  %130 = or i32 %33, %27
  %131 = or i32 %12, %100
  %132 = or i32 %74, %27
  %133 = or i32 %74, %4
  %134 = add i32 %25, 1
  %135 = xor i32 %46, %0
  %136 = and i32 %6, %27
  %137 = xor i32 %25, %29
  %138 = and i32 %29, %19
  %139 = or i32 %5, %4
  %140 = shl i32 %139, 1
  %141 = or i32 %60, %61
  %142 = shl i32 %53, 1
  %143 = xor i32 %45, -1
  %144 = and i32 %143, %27
  %145 = or i32 %17, %0
  %146 = and i32 %5, %1
  %147 = or i32 %50, %0
  %148 = and i32 %26, %1
  %149 = or i32 %5, %27
  %150 = or i32 %34, %0
  %151 = and i32 %50, %19
  %152 = or i32 %5, %16
  %153 = or i32 %9, %2
  %154 = or i32 %23, %6
  %155 = or i32 %100, %27
  %156 = xor i32 %34, %12
  %157 = xor i32 %52, %2
  %158 = and i32 %9, %26
  %159 = and i32 %20, %13
  %160 = and i32 %143, %4
  %161 = or i32 %50, %19
  %162 = xor i32 %113, %0
  %163 = or i32 %60, %162
  %164 = and i32 %5, %4
  %165 = or i32 %5, %12
  %166 = xor i32 %87, -1
  %167 = or i32 %112, %166
  %168 = or i32 %53, %0
  %169 = shl i32 %168, 1
  %170 = add i32 %2, 1
  %171 = or i32 %12, %53
  %172 = shl i32 %171, 1
  %173 = and i32 %38, %4
  %174 = or i32 %23, %2
  %175 = shl i32 %174, 1
  %176 = or i32 %45, %17
  %177 = or i32 %30, %0
  %178 = xor i32 %143, %1
  %179 = shl i32 %178, 1
  %180 = xor i32 %16, %2
  %181 = or i32 %25, %9
  %182 = xor i32 %181, -1
  %183 = or i32 %33, %16
  %184 = add i32 %34, 1
  %185 = or i32 %12, %6
  %186 = or i32 %23, %53
  %187 = shl i32 %186, 2
  %188 = or i32 %9, %100
  %189 = and i32 %33, %27
  %190 = shl i32 %5, 1
  %191 = and i32 %53, %0
  %192 = xor i32 %45, %34
  %193 = shl i32 %192, 1
  %194 = and i32 %143, %1
  %195 = or i32 %29, %0
  %196 = and i32 %34, %19
  %197 = xor i32 %107, %138
  %198 = xor i32 %42, %1
  %199 = and i32 %30, %19
  %200 = and i32 %49, %19
  %201 = mul i32 %200, -9
  %202 = and i32 %30, %0
  %203 = mul i32 %202, 25
  %204 = and i32 %49, %0
  %205 = and i32 %35, %19
  %206 = shl i32 %75, 4
  %207 = and i32 %35, %0
  %208 = add i32 %95, %104
  %209 = add i32 %208, %194
  %210 = add i32 %209, %61
  %211 = add i32 %210, %160
  %212 = add i32 %211, %152
  %213 = add i32 %212, %136
  %214 = add i32 %213, %94
  %215 = add i32 %214, %54
  %216 = add i32 %215, %31
  %217 = add i32 %216, %24
  %218 = add i32 %217, %197
  %219 = shl i32 %218, 1
  %220 = add i32 %207, %6
  %221 = sub i32 %220, %18
  %222 = add i32 %221, %32
  %223 = mul i32 %222, 5
  %224 = add i32 %151, %34
  %225 = add i32 %224, %205
  %226 = sub i32 %225, %149
  %227 = mul i32 %226, 3
  %228 = sub i32 %204, %199
  %229 = mul i32 %228, 13
  %230 = add i32 %1, %0
  %231 = add i32 %230, %16
  %232 = add i32 %231, %44
  %233 = add i32 %232, %13
  %234 = sub i32 %233, %2
  %235 = add i32 %234, %84
  %236 = add i32 %235, %170
  %237 = add i32 %236, %52
  %238 = sub i32 %237, %14
  %239 = add i32 %238, %41
  %240 = add i32 %239, %57
  %241 = sub i32 %240, %65
  %242 = add i32 %241, %74
  %243 = add i32 %242, %29
  %244 = add i32 %243, %83
  %245 = sub i32 %244, %85
  %246 = sub i32 %245, %89
  %247 = sub i32 %246, %91
  %248 = sub i32 %247, %92
  %249 = add i32 %248, %100
  %250 = sub i32 %249, %105
  %251 = sub i32 %250, %117
  %252 = add i32 %251, %120
  %253 = sub i32 %252, %42
  %254 = add i32 %253, %124
  %255 = sub i32 %254, %129
  %256 = add i32 %255, %130
  %257 = add i32 %256, %134
  %258 = add i32 %257, %153
  %259 = sub i32 %258, %157
  %260 = sub i32 %259, %45
  %261 = sub i32 %260, %180
  %262 = sub i32 %261, %183
  %263 = add i32 %262, %184
  %264 = sub i32 %263, %189
  %265 = add i32 %264, %28
  %266 = sub i32 %265, %39
  %267 = sub i32 %266, %43
  %268 = sub i32 %267, %47
  %269 = sub i32 %268, %48
  %270 = add i32 %269, %51
  %271 = add i32 %270, %58
  %272 = sub i32 %271, %64
  %273 = sub i32 %272, %66
  %274 = sub i32 %273, %67
  %275 = add i32 %274, %68
  %276 = sub i32 %275, %69
  %277 = add i32 %276, %71
  %278 = add i32 %277, %72
  %279 = sub i32 %278, %73
  %280 = sub i32 %279, %80
  %281 = sub i32 %280, %82
  %282 = add i32 %281, %87
  %283 = add i32 %282, %88
  %284 = sub i32 %283, %90
  %285 = sub i32 %284, %93
  %286 = add i32 %285, %96
  %287 = add i32 %286, %97
  %288 = add i32 %287, %98
  %289 = sub i32 %288, %99
  %290 = add i32 %289, %103
  %291 = sub i32 %290, %106
  %292 = sub i32 %291, %111
  %293 = add i32 %292, %121
  %294 = sub i32 %293, %122
  %295 = add i32 %294, %123
  %296 = add i32 %295, %127
  %297 = add i32 %296, %128
  %298 = sub i32 %297, %131
  %299 = add i32 %298, %132
  %300 = add i32 %299, %133
  %301 = add i32 %300, %135
  %302 = sub i32 %301, %137
  %303 = sub i32 %302, %138
  %304 = sub i32 %303, %142
  %305 = add i32 %304, %144
  %306 = add i32 %305, %145
  %307 = sub i32 %306, %146
  %308 = add i32 %307, %147
  %309 = sub i32 %308, %148
  %310 = sub i32 %309, %150
  %311 = add i32 %310, %154
  %312 = sub i32 %311, %155
  %313 = add i32 %312, %156
  %314 = add i32 %313, %158
  %315 = add i32 %314, %159
  %316 = sub i32 %315, %161
  %317 = sub i32 %316, %164
  %318 = add i32 %317, %125
  %319 = sub i32 %318, %165
  %320 = sub i32 %319, %173
  %321 = sub i32 %320, %175
  %322 = sub i32 %321, %176
  %323 = sub i32 %322, %177
  %324 = add i32 %323, %182
  %325 = add i32 %324, %185
  %326 = add i32 %325, %188
  %327 = sub i32 %326, %190
  %328 = sub i32 %327, %191
  %329 = sub i32 %328, %195
  %330 = sub i32 %329, %196
  %331 = sub i32 %330, %198
  %332 = add i32 %331, %22
  %333 = sub i32 %332, %37
  %334 = sub i32 %333, %56
  %335 = add i32 %334, %63
  %336 = add i32 %335, %77
  %337 = sub i32 %336, %79
  %338 = sub i32 %337, %81
  %339 = add i32 %338, %86
  %340 = sub i32 %339, %102
  %341 = sub i32 %340, %116
  %342 = sub i32 %341, %119
  %343 = sub i32 %342, %126
  %344 = sub i32 %343, %140
  %345 = sub i32 %344, %141
  %346 = add i32 %345, %163
  %347 = sub i32 %346, %167
  %348 = sub i32 %347, %169
  %349 = sub i32 %348, %172
  %350 = sub i32 %349, %179
  %351 = sub i32 %350, %187
  %352 = sub i32 %351, %193
  %353 = add i32 %352, %201
  %354 = add i32 %353, %203
  %355 = add i32 %354, %206
  %356 = add i32 %355, %229
  %357 = sub i32 %356, %110
  %358 = add i32 %357, %223
  %359 = add i32 %358, %227
  %360 = add i32 %359, %219
  %361 = icmp eq i32 %11, %360
  %362 = select i1 %361, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %363 = tail call i32 @puts(i8* nonnull dereferenceable(1) %362)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
