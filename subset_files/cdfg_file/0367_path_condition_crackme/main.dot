digraph "DFG for'main' function" {
	Node0x53be88[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x53bf08[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x53bf98[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x53bff8[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x53c0a8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x53c4d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x53c5b8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x53c6b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x53c778[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x53c828[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x53c8e8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x53c998[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x536800[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x53cb98[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x53db08[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x53e178[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x53e1d8[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x53e2e8[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0x53e548[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x53e6a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x53e7b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x53e8c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x53e988[shape=record, label="  ret i32 0"];
	Node0x53be88 -> Node0x53bf08;
	Node0x53bf08 -> Node0x53bf98;
	Node0x53bf98 -> Node0x53bff8;
	Node0x53bff8 -> Node0x53c0a8;
	Node0x53c0a8 -> Node0x53c4d8;
	Node0x53c4d8 -> Node0x53c5b8;
	Node0x53c5b8 -> Node0x53c6b8;
	Node0x53c6b8 -> Node0x53c778;
	Node0x53c778 -> Node0x53c828;
	Node0x53c828 -> Node0x53c8e8;
	Node0x53c8e8 -> Node0x53c998;
	Node0x53c998 -> Node0x536800;
	Node0x536800 -> Node0x53cb98;
	Node0x53cb98 -> Node0x53db08;
	Node0x53db08 -> Node0x53e178;
	Node0x53e178 -> Node0x53e1d8;
	Node0x53e1d8 -> Node0x53e2e8;
	Node0x53e2e8 -> Node0x53e548;
	Node0x53e548 -> Node0x53e6a8;
	Node0x53e6a8 -> Node0x53e7b8;
	Node0x53e7b8 -> Node0x53e8c8;
	Node0x53e8c8 -> Node0x53e988;
edge [color=red]
	Node0x53be88 -> Node0x53c0a8;
	Node0x53c0a8 -> Node0x53c4d8;
	Node0x53bf08 -> Node0x53c5b8;
	Node0x53c5b8 -> Node0x53c6b8;
	Node0x53bf98 -> Node0x53c778;
	Node0x53c778 -> Node0x53c828;
	Node0x53bff8 -> Node0x53c8e8;
	Node0x53c8e8 -> Node0x53c998;
	Node0x53be88 -> Node0x536800;
	Node0x53bf08 -> Node0x536800;
	Node0x53bf98 -> Node0x536800;
	Node0x53bff8 -> Node0x536800;
	Node0x53be88 -> Node0x53cb98;
	Node0x53bf08 -> Node0x53db08;
	Node0x53bf98 -> Node0x53e178;
	Node0x53bff8 -> Node0x53e1d8;
	Node0x53cb98 -> Node0x53e2e8;
	Node0x53db08 -> Node0x53e2e8;
	Node0x53e178 -> Node0x53e2e8;
	Node0x53e1d8 -> Node0x53e2e8;
	Node0x53c8e8 -> Node0x53e548;
	Node0x53c778 -> Node0x53e6a8;
	Node0x53c5b8 -> Node0x53e7b8;
	Node0x53c0a8 -> Node0x53e8c8;
}
