digraph "DFG for'crackme' function" {
	Node0x210f790[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x210fe10[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x210feb0[shape=record, label="  %7 = mul i32 %6, 5"];
	Node0x210ff50[shape=record, label="  %8 = shl i32 %0, 1"];
	Node0x210ffc0[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x2110030[shape=record, label="  %10 = sub i32 %1, %8"];
	Node0x21100a0[shape=record, label="  %11 = add i32 %10, %7"];
	Node0x2110110[shape=record, label="  %12 = add i32 %11, %9"];
	Node0x2110180[shape=record, label="  %13 = or i32 %2, %1"];
	Node0x21101f0[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x2110260[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x21102d0[shape=record, label="  %16 = xor i32 %1, -1"];
	Node0x2110340[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x21103b0[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x2110420[shape=record, label="  %19 = shl i32 %13, 1"];
	Node0x21104c0[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x2110530[shape=record, label="  %21 = and i32 %16, %2"];
	Node0x21105d0[shape=record, label="  %22 = mul i32 %21, -7"];
	Node0x2110670[shape=record, label="  %23 = mul i32 %15, -6"];
	Node0x21106e0[shape=record, label="  %24 = shl i32 %17, 1"];
	Node0x2110750[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x21107c0[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x2110830[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x21108a0[shape=record, label="  %28 = xor i32 %0, -1"];
	Node0x2110910[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x2110980[shape=record, label="  %30 = and i32 %3, %0"];
	Node0x21109f0[shape=record, label="  %31 = xor i32 %9, -1"];
	Node0x2110a60[shape=record, label="  %32 = xor i32 %3, -1"];
	Node0x2110ce0[shape=record, label="  %33 = and i32 %32, %0"];
	Node0x2110d50[shape=record, label="  %34 = and i32 %28, %3"];
	Node0x2110dc0[shape=record, label="  %35 = mul i32 %34, 5"];
	Node0x2110e60[shape=record, label="  %36 = mul i32 %30, -3"];
	Node0x2110f00[shape=record, label="  %37 = sub i32 -5, %1"];
	Node0x2110f70[shape=record, label="  %38 = sub i32 %37, %29"];
	Node0x2110fe0[shape=record, label="  %39 = sub i32 %38, %13"];
	Node0x2111050[shape=record, label="  %40 = add i32 %39, %5"];
	Node0x21110c0[shape=record, label="  %41 = add i32 %40, %15"];
	Node0x2111130[shape=record, label="  %42 = add i32 %41, %18"];
	Node0x21111a0[shape=record, label="  %43 = add i32 %42, %22"];
	Node0x2111210[shape=record, label="  %44 = add i32 %43, %23"];
	Node0x2111280[shape=record, label="  %45 = add i32 %44, %24"];
	Node0x21112f0[shape=record, label="  %46 = sub i32 %45, %25"];
	Node0x2111360[shape=record, label="  %47 = add i32 %46, %30"];
	Node0x21113d0[shape=record, label="  %48 = add i32 %47, %31"];
	Node0x2111440[shape=record, label="  %49 = add i32 %48, %33"];
	Node0x21114b0[shape=record, label="  %50 = sub i32 %49, %20"];
	Node0x2111520[shape=record, label="  %51 = add i32 %50, %35"];
	Node0x2111590[shape=record, label="  %52 = add i32 %51, %36"];
	Node0x2111600[shape=record, label="  %53 = add i32 %52, %27"];
	Node0x2111670[shape=record, label="  %54 = icmp eq i32 %12, %53"];
	Node0x20b0268[shape=record, label="  %55 = select i1 %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2111b10[shape=record, label="  %56 = tail call i32 @puts(i8* nonnull dereferenceable(1) %55)"];
	Node0x2111b60[shape=record, label="  ret void"];
	Node0x210f790 -> Node0x210fe10;
	Node0x210fe10 -> Node0x210feb0;
	Node0x210feb0 -> Node0x210ff50;
	Node0x210ff50 -> Node0x210ffc0;
	Node0x210ffc0 -> Node0x2110030;
	Node0x2110030 -> Node0x21100a0;
	Node0x21100a0 -> Node0x2110110;
	Node0x2110110 -> Node0x2110180;
	Node0x2110180 -> Node0x21101f0;
	Node0x21101f0 -> Node0x2110260;
	Node0x2110260 -> Node0x21102d0;
	Node0x21102d0 -> Node0x2110340;
	Node0x2110340 -> Node0x21103b0;
	Node0x21103b0 -> Node0x2110420;
	Node0x2110420 -> Node0x21104c0;
	Node0x21104c0 -> Node0x2110530;
	Node0x2110530 -> Node0x21105d0;
	Node0x21105d0 -> Node0x2110670;
	Node0x2110670 -> Node0x21106e0;
	Node0x21106e0 -> Node0x2110750;
	Node0x2110750 -> Node0x21107c0;
	Node0x21107c0 -> Node0x2110830;
	Node0x2110830 -> Node0x21108a0;
	Node0x21108a0 -> Node0x2110910;
	Node0x2110910 -> Node0x2110980;
	Node0x2110980 -> Node0x21109f0;
	Node0x21109f0 -> Node0x2110a60;
	Node0x2110a60 -> Node0x2110ce0;
	Node0x2110ce0 -> Node0x2110d50;
	Node0x2110d50 -> Node0x2110dc0;
	Node0x2110dc0 -> Node0x2110e60;
	Node0x2110e60 -> Node0x2110f00;
	Node0x2110f00 -> Node0x2110f70;
	Node0x2110f70 -> Node0x2110fe0;
	Node0x2110fe0 -> Node0x2111050;
	Node0x2111050 -> Node0x21110c0;
	Node0x21110c0 -> Node0x2111130;
	Node0x2111130 -> Node0x21111a0;
	Node0x21111a0 -> Node0x2111210;
	Node0x2111210 -> Node0x2111280;
	Node0x2111280 -> Node0x21112f0;
	Node0x21112f0 -> Node0x2111360;
	Node0x2111360 -> Node0x21113d0;
	Node0x21113d0 -> Node0x2111440;
	Node0x2111440 -> Node0x21114b0;
	Node0x21114b0 -> Node0x2111520;
	Node0x2111520 -> Node0x2111590;
	Node0x2111590 -> Node0x2111600;
	Node0x2111600 -> Node0x2111670;
	Node0x2111670 -> Node0x20b0268;
	Node0x20b0268 -> Node0x2111b10;
	Node0x2111b10 -> Node0x2111b60;
edge [color=red]
	Node0x210f790 -> Node0x210fe10;
	Node0x210fe10 -> Node0x210feb0;
	Node0x210ff50 -> Node0x2110030;
	Node0x2110030 -> Node0x21100a0;
	Node0x210feb0 -> Node0x21100a0;
	Node0x21100a0 -> Node0x2110110;
	Node0x210ffc0 -> Node0x2110110;
	Node0x21101f0 -> Node0x2110260;
	Node0x2110340 -> Node0x21103b0;
	Node0x2110180 -> Node0x2110420;
	Node0x2110420 -> Node0x21104c0;
	Node0x21102d0 -> Node0x2110530;
	Node0x2110530 -> Node0x21105d0;
	Node0x2110260 -> Node0x2110670;
	Node0x2110340 -> Node0x21106e0;
	Node0x2110750 -> Node0x21107c0;
	Node0x21107c0 -> Node0x2110830;
	Node0x21108a0 -> Node0x2110910;
	Node0x210ffc0 -> Node0x21109f0;
	Node0x2110a60 -> Node0x2110ce0;
	Node0x21108a0 -> Node0x2110d50;
	Node0x2110d50 -> Node0x2110dc0;
	Node0x2110980 -> Node0x2110e60;
	Node0x2110f00 -> Node0x2110f70;
	Node0x2110910 -> Node0x2110f70;
	Node0x2110f70 -> Node0x2110fe0;
	Node0x2110180 -> Node0x2110fe0;
	Node0x2110fe0 -> Node0x2111050;
	Node0x210f790 -> Node0x2111050;
	Node0x2111050 -> Node0x21110c0;
	Node0x2110260 -> Node0x21110c0;
	Node0x21110c0 -> Node0x2111130;
	Node0x21103b0 -> Node0x2111130;
	Node0x2111130 -> Node0x21111a0;
	Node0x21105d0 -> Node0x21111a0;
	Node0x21111a0 -> Node0x2111210;
	Node0x2110670 -> Node0x2111210;
	Node0x2111210 -> Node0x2111280;
	Node0x21106e0 -> Node0x2111280;
	Node0x2111280 -> Node0x21112f0;
	Node0x2110750 -> Node0x21112f0;
	Node0x21112f0 -> Node0x2111360;
	Node0x2110980 -> Node0x2111360;
	Node0x2111360 -> Node0x21113d0;
	Node0x21109f0 -> Node0x21113d0;
	Node0x21113d0 -> Node0x2111440;
	Node0x2110ce0 -> Node0x2111440;
	Node0x2111440 -> Node0x21114b0;
	Node0x21104c0 -> Node0x21114b0;
	Node0x21114b0 -> Node0x2111520;
	Node0x2110dc0 -> Node0x2111520;
	Node0x2111520 -> Node0x2111590;
	Node0x2110e60 -> Node0x2111590;
	Node0x2111590 -> Node0x2111600;
	Node0x2110830 -> Node0x2111600;
	Node0x2110110 -> Node0x2111670;
	Node0x2111600 -> Node0x2111670;
	Node0x2111670 -> Node0x20b0268;
	Node0x20b0268 -> Node0x2111b10;
}
