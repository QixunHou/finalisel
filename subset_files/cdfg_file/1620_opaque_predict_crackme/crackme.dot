digraph "DFG for'crackme' function" {
	Node0x1e1ea60[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1e1ead0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1e1eb90[shape=record, label="  %5 = mul i32 %4, 3"];
	Node0x1e1ec00[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x1e1eca0[shape=record, label="  %7 = add i32 %6, 1"];
	Node0x1e1ed10[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x1e1ed80[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1e1edf0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1e1ee90[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1e1ef00[shape=record, label="  %12 = shl i32 %4, 1"];
	Node0x1e1ef70[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1e1efe0[shape=record, label="  %14 = shl i32 %0, 1"];
	Node0x1e1f050[shape=record, label="  %15 = add i32 %1, %0"];
	Node0x1e1f0c0[shape=record, label="  %16 = sub i32 %10, %15"];
	Node0x1e1f130[shape=record, label="  %17 = add i32 %16, %11"];
	Node0x1e1f1a0[shape=record, label="  %18 = sub i32 %17, %13"];
	Node0x1e1f210[shape=record, label="  %19 = add i32 %18, %14"];
	Node0x1e1f280[shape=record, label="  %20 = icmp eq i32 %8, %19"];
	Node0x1dbf268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e1f720[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1e1f770[shape=record, label="  ret void"];
	Node0x1e1ea60 -> Node0x1e1ead0;
	Node0x1e1ead0 -> Node0x1e1eb90;
	Node0x1e1eb90 -> Node0x1e1ec00;
	Node0x1e1ec00 -> Node0x1e1eca0;
	Node0x1e1eca0 -> Node0x1e1ed10;
	Node0x1e1ed10 -> Node0x1e1ed80;
	Node0x1e1ed80 -> Node0x1e1edf0;
	Node0x1e1edf0 -> Node0x1e1ee90;
	Node0x1e1ee90 -> Node0x1e1ef00;
	Node0x1e1ef00 -> Node0x1e1ef70;
	Node0x1e1ef70 -> Node0x1e1efe0;
	Node0x1e1efe0 -> Node0x1e1f050;
	Node0x1e1f050 -> Node0x1e1f0c0;
	Node0x1e1f0c0 -> Node0x1e1f130;
	Node0x1e1f130 -> Node0x1e1f1a0;
	Node0x1e1f1a0 -> Node0x1e1f210;
	Node0x1e1f210 -> Node0x1e1f280;
	Node0x1e1f280 -> Node0x1dbf268;
	Node0x1dbf268 -> Node0x1e1f720;
	Node0x1e1f720 -> Node0x1e1f770;
edge [color=red]
	Node0x1e1ea60 -> Node0x1e1ead0;
	Node0x1e1ead0 -> Node0x1e1eb90;
	Node0x1e1ea60 -> Node0x1e1ec00;
	Node0x1e1ec00 -> Node0x1e1eca0;
	Node0x1e1eca0 -> Node0x1e1ed10;
	Node0x1e1eb90 -> Node0x1e1ed10;
	Node0x1e1ed80 -> Node0x1e1edf0;
	Node0x1e1edf0 -> Node0x1e1ee90;
	Node0x1e1ead0 -> Node0x1e1ef00;
	Node0x1e1ef00 -> Node0x1e1ef70;
	Node0x1e1edf0 -> Node0x1e1f0c0;
	Node0x1e1f050 -> Node0x1e1f0c0;
	Node0x1e1f0c0 -> Node0x1e1f130;
	Node0x1e1ee90 -> Node0x1e1f130;
	Node0x1e1f130 -> Node0x1e1f1a0;
	Node0x1e1ef70 -> Node0x1e1f1a0;
	Node0x1e1f1a0 -> Node0x1e1f210;
	Node0x1e1efe0 -> Node0x1e1f210;
	Node0x1e1ed10 -> Node0x1e1f280;
	Node0x1e1f210 -> Node0x1e1f280;
	Node0x1e1f280 -> Node0x1dbf268;
	Node0x1dbf268 -> Node0x1e1f720;
}
