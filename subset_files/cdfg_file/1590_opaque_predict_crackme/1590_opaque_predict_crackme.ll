; ModuleID = '../.././c_source_file/1590_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1590_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %6
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %11, %13
  %15 = sub i32 %9, %14
  %16 = and i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %17, %1
  %19 = and i32 %4, %2
  %20 = and i32 %19, %0
  %21 = xor i32 %0, -1
  %22 = or i32 %4, %2
  %23 = and i32 %22, %21
  %24 = xor i32 %23, 2147483647
  %25 = xor i32 %24, %20
  %26 = shl i32 %25, 1
  %27 = or i32 %20, %23
  %28 = shl i32 %27, 2
  %29 = or i32 %16, %1
  %30 = xor i32 %7, %21
  %31 = xor i32 %20, %30
  %32 = or i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %12, %33
  %35 = xor i32 %8, %0
  %36 = or i32 %1, %0
  %37 = xor i32 %16, %36
  %38 = shl i32 %37, 1
  %39 = and i32 %2, %1
  %40 = and i32 %39, %0
  %41 = or i32 %2, %1
  %42 = and i32 %41, %21
  %43 = xor i32 %42, 2147483647
  %44 = xor i32 %43, %40
  %45 = shl i32 %44, 1
  %46 = and i32 %10, %1
  %47 = or i32 %46, %0
  %48 = shl i32 %47, 1
  %49 = and i32 %1, %0
  %50 = xor i32 %49, -1
  %51 = xor i32 %50, %2
  %52 = and i32 %17, %1
  %53 = xor i32 %2, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %12, %54
  %56 = shl i32 %32, 1
  %57 = xor i32 %16, %1
  %58 = and i32 %53, %6
  %59 = shl i32 %58, 1
  %60 = or i32 %10, %1
  %61 = xor i32 %60, -1
  %62 = or i32 %61, %0
  %63 = or i32 %54, %13
  %64 = and i32 %32, %12
  %65 = shl i32 %17, 1
  %66 = xor i32 %41, %49
  %67 = and i32 %36, %2
  %68 = or i32 %4, %0
  %69 = xor i32 %68, -1
  %70 = or i32 %10, %69
  %71 = and i32 %53, %50
  %72 = or i32 %10, %13
  %73 = shl i32 %72, 1
  %74 = xor i32 %41, %0
  %75 = xor i32 %40, -1
  %76 = xor i32 %74, %75
  %77 = or i32 %7, %49
  %78 = xor i32 %36, -1
  %79 = or i32 %53, %78
  %80 = or i32 %53, %13
  %81 = shl i32 %80, 1
  %82 = or i32 %16, %13
  %83 = xor i32 %46, -1
  %84 = add i32 %46, 1
  %85 = and i32 %7, %50
  %86 = xor i32 %39, -1
  %87 = or i32 %86, %0
  %88 = and i32 %10, %13
  %89 = and i32 %41, %0
  %90 = and i32 %68, %8
  %91 = or i32 %53, %49
  %92 = and i32 %10, %0
  %93 = or i32 %92, %1
  %94 = or i32 %54, %1
  %95 = xor i32 %92, -1
  %96 = and i32 %12, %95
  %97 = and i32 %95, %13
  %98 = xor i32 %92, %86
  %99 = xor i32 %41, -1
  %100 = or i32 %99, %0
  %101 = and i32 %32, %1
  %102 = or i32 %39, %5
  %103 = and i32 %7, %0
  %104 = or i32 %5, %54
  %105 = or i32 %7, %5
  %106 = and i32 %54, %50
  %107 = shl i32 %21, 1
  %108 = or i32 %83, %0
  %109 = shl i32 %108, 1
  %110 = xor i32 %46, %0
  %111 = or i32 %54, %78
  %112 = and i32 %7, %21
  %113 = or i32 %40, %112
  %114 = or i32 %8, %21
  %115 = or i32 %33, %4
  %116 = or i32 %49, %99
  %117 = add i32 %32, 1
  %118 = xor i32 %112, %75
  %119 = and i32 %36, %10
  %120 = and i32 %8, %0
  %121 = or i32 %53, %12
  %122 = xor i32 %11, -1
  %123 = xor i32 %122, %1
  %124 = and i32 %13, %2
  %125 = shl i32 %124, 1
  %126 = xor i32 %11, %49
  %127 = and i32 %50, %2
  %128 = xor i32 %60, %0
  %129 = and i32 %54, %13
  %130 = and i32 %11, %12
  %131 = add i32 %49, 1
  %132 = xor i32 %99, %0
  %133 = and i32 %53, %13
  %134 = and i32 %68, %10
  %135 = or i32 %49, %122
  %136 = or i32 %33, %1
  %137 = and i32 %6, %2
  %138 = shl i32 %60, 1
  %139 = xor i32 %138, -1
  %140 = or i32 %40, %74
  %141 = and i32 %86, %21
  %142 = shl i32 %141, 1
  %143 = and i32 %8, %21
  %144 = and i32 %32, %4
  %145 = or i32 %53, %1
  %146 = and i32 %53, %4
  %147 = or i32 %10, %78
  %148 = or i32 %5, %10
  %149 = or i32 %13, %2
  %150 = or i32 %53, %5
  %151 = and i32 %53, %36
  %152 = xor i32 %92, %1
  %153 = and i32 %12, %10
  %154 = xor i32 %16, %41
  %155 = and i32 %83, %21
  %156 = xor i32 %6, %2
  %157 = or i32 %54, %4
  %158 = or i32 %46, %5
  %159 = shl i32 %158, 2
  %160 = and i32 %36, %54
  %161 = or i32 %49, %33
  %162 = or i32 %39, %21
  %163 = shl i32 %162, 1
  %164 = and i32 %83, %0
  %165 = and i32 %60, %0
  %166 = shl i32 %165, 1
  %167 = xor i32 %5, %86
  %168 = or i32 %12, %10
  %169 = or i32 %41, %21
  %170 = and i32 %19, %21
  %171 = or i32 %7, %21
  %172 = xor i32 %170, %171
  %173 = and i32 %22, %0
  %174 = xor i32 %173, -1
  %175 = xor i32 %170, %174
  %176 = or i32 %60, %0
  %177 = and i32 %39, %21
  %178 = xor i32 %103, 1073741823
  %179 = xor i32 %178, %177
  %180 = or i32 %5, %2
  %181 = xor i32 %39, %0
  %182 = and i32 %10, %50
  %183 = or i32 %16, %99
  %184 = or i32 %8, %78
  %185 = or i32 %177, %89
  %186 = shl i32 %185, 1
  %187 = or i32 %40, %30
  %188 = xor i32 %68, %2
  %189 = or i32 %49, %8
  %190 = or i32 %122, %1
  %191 = and i32 %7, %68
  %192 = or i32 %41, %0
  %193 = xor i32 %22, %0
  %194 = xor i32 %193, -1
  %195 = xor i32 %20, %194
  %196 = or i32 %49, %61
  %197 = and i32 %53, %12
  %198 = or i32 %49, %2
  %199 = and i32 %54, %4
  %200 = or i32 %16, %12
  %201 = xor i32 %60, %49
  %202 = or i32 %20, %193
  %203 = or i32 %16, %78
  %204 = and i32 %86, %0
  %205 = shl i32 %204, 1
  %206 = or i32 %7, %69
  %207 = add i32 %53, 1
  %208 = or i32 %16, %46
  %209 = and i32 %53, %68
  %210 = and i32 %99, %21
  %211 = mul i32 %210, -11
  %212 = and i32 %46, %21
  %213 = and i32 %99, %0
  %214 = and i32 %46, %0
  %215 = mul i32 %214, 23
  %216 = and i32 %61, %21
  %217 = mul i32 %216, 9
  %218 = and i32 %61, %0
  %219 = mul i32 %218, 13
  %220 = add i32 %53, %2
  %221 = add i32 %220, %213
  %222 = add i32 %221, %203
  %223 = add i32 %222, %197
  %224 = add i32 %223, %184
  %225 = add i32 %224, %176
  %226 = add i32 %225, %169
  %227 = add i32 %226, %164
  %228 = add i32 %227, %157
  %229 = add i32 %228, %154
  %230 = add i32 %229, %130
  %231 = add i32 %230, %129
  %232 = add i32 %231, %111
  %233 = add i32 %232, %97
  %234 = add i32 %233, %93
  %235 = add i32 %234, %90
  %236 = add i32 %235, %79
  %237 = add i32 %236, %55
  %238 = add i32 %237, %34
  %239 = add i32 %238, %31
  %240 = shl i32 %239, 1
  %241 = add i32 %177, %147
  %242 = sub i32 %241, %40
  %243 = sub i32 %242, %144
  %244 = sub i32 %243, %100
  %245 = mul i32 %244, 5
  %246 = sub i32 %136, %212
  %247 = sub i32 %246, %103
  %248 = add i32 %247, %89
  %249 = mul i32 %248, 3
  %250 = add i32 %179, %181
  %251 = shl i32 %250, 2
  %252 = sub i32 %21, %1
  %253 = sub i32 %252, %107
  %254 = add i32 %253, %13
  %255 = sub i32 %254, %68
  %256 = add i32 %255, %131
  %257 = sub i32 %256, %68
  %258 = add i32 %257, %51
  %259 = sub i32 %258, %67
  %260 = add i32 %259, %70
  %261 = add i32 %260, %84
  %262 = sub i32 %261, %88
  %263 = add i32 %262, %7
  %264 = sub i32 %263, %11
  %265 = add i32 %264, %117
  %266 = sub i32 %265, %119
  %267 = sub i32 %266, %127
  %268 = add i32 %267, %134
  %269 = sub i32 %268, %137
  %270 = add i32 %269, %86
  %271 = add i32 %270, %95
  %272 = sub i32 %271, %148
  %273 = add i32 %272, %149
  %274 = add i32 %273, %153
  %275 = add i32 %274, %156
  %276 = sub i32 %275, %168
  %277 = add i32 %276, %180
  %278 = sub i32 %277, %16
  %279 = add i32 %278, %182
  %280 = sub i32 %279, %188
  %281 = sub i32 %280, %198
  %282 = add i32 %281, %207
  %283 = add i32 %282, %18
  %284 = add i32 %283, %29
  %285 = add i32 %284, %35
  %286 = sub i32 %285, %52
  %287 = sub i32 %286, %56
  %288 = sub i32 %287, %57
  %289 = sub i32 %288, %62
  %290 = sub i32 %289, %63
  %291 = sub i32 %290, %64
  %292 = sub i32 %291, %65
  %293 = sub i32 %292, %66
  %294 = sub i32 %293, %71
  %295 = sub i32 %294, %73
  %296 = add i32 %295, %77
  %297 = sub i32 %296, %82
  %298 = add i32 %297, %85
  %299 = sub i32 %298, %87
  %300 = sub i32 %299, %91
  %301 = add i32 %300, %94
  %302 = sub i32 %301, %96
  %303 = sub i32 %302, %98
  %304 = sub i32 %303, %101
  %305 = add i32 %304, %102
  %306 = add i32 %305, %104
  %307 = sub i32 %306, %105
  %308 = add i32 %307, %106
  %309 = sub i32 %308, %110
  %310 = add i32 %309, %114
  %311 = add i32 %310, %115
  %312 = sub i32 %311, %116
  %313 = add i32 %312, %120
  %314 = sub i32 %313, %121
  %315 = sub i32 %314, %123
  %316 = sub i32 %315, %125
  %317 = add i32 %316, %126
  %318 = sub i32 %317, %128
  %319 = sub i32 %318, %132
  %320 = sub i32 %319, %133
  %321 = sub i32 %320, %135
  %322 = add i32 %321, %139
  %323 = sub i32 %322, %143
  %324 = add i32 %323, %145
  %325 = add i32 %324, %146
  %326 = add i32 %325, %150
  %327 = add i32 %326, %151
  %328 = add i32 %327, %152
  %329 = add i32 %328, %155
  %330 = sub i32 %329, %160
  %331 = add i32 %330, %161
  %332 = sub i32 %331, %167
  %333 = sub i32 %332, %171
  %334 = add i32 %333, %183
  %335 = sub i32 %334, %42
  %336 = sub i32 %335, %189
  %337 = add i32 %336, %190
  %338 = add i32 %337, %191
  %339 = sub i32 %338, %192
  %340 = add i32 %339, %196
  %341 = add i32 %340, %199
  %342 = add i32 %341, %200
  %343 = add i32 %342, %201
  %344 = sub i32 %343, %206
  %345 = add i32 %344, %208
  %346 = sub i32 %345, %209
  %347 = sub i32 %346, %38
  %348 = sub i32 %347, %48
  %349 = sub i32 %348, %59
  %350 = add i32 %349, %76
  %351 = sub i32 %350, %81
  %352 = sub i32 %351, %109
  %353 = sub i32 %352, %113
  %354 = sub i32 %353, %118
  %355 = sub i32 %354, %140
  %356 = sub i32 %355, %142
  %357 = sub i32 %356, %159
  %358 = sub i32 %357, %163
  %359 = sub i32 %358, %166
  %360 = sub i32 %359, %172
  %361 = sub i32 %360, %175
  %362 = add i32 %361, %187
  %363 = sub i32 %362, %195
  %364 = sub i32 %363, %202
  %365 = sub i32 %364, %205
  %366 = add i32 %365, %211
  %367 = add i32 %366, %215
  %368 = add i32 %367, %217
  %369 = add i32 %368, %219
  %370 = sub i32 %369, %28
  %371 = sub i32 %370, %186
  %372 = sub i32 %371, %26
  %373 = sub i32 %372, %45
  %374 = add i32 %373, %249
  %375 = add i32 %374, %251
  %376 = add i32 %375, %245
  %377 = add i32 %376, %240
  %378 = icmp eq i32 %15, %377
  %379 = select i1 %378, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %380 = tail call i32 @puts(i8* nonnull dereferenceable(1) %379)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
