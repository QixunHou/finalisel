digraph "DFG for'crackme' function" {
	Node0x51f0f0[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x51f160[shape=record, label="  %6 = xor i32 %5, %1"];
	Node0x51f1d0[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x51f240[shape=record, label="  %8 = xor i32 %3, %0"];
	Node0x51f2b0[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0x51f320[shape=record, label="  %10 = or i32 %5, %1"];
	Node0x51f390[shape=record, label="  %11 = and i32 %5, %1"];
	Node0x51f430[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x51f4d0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x51f540[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x51f5b0[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x51f620[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x51f6c0[shape=record, label="  %17 = shl i32 %14, 2"];
	Node0x51f760[shape=record, label="  %18 = xor i32 %17, -4"];
	Node0x51f7d0[shape=record, label="  %19 = shl i32 %10, 1"];
	Node0x51f840[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x51f8e0[shape=record, label="  %21 = mul i32 %15, 6"];
	Node0x51f950[shape=record, label="  %22 = xor i32 %8, -1"];
	Node0x51f9c0[shape=record, label="  %23 = xor i32 %0, -1"];
	Node0x51fa30[shape=record, label="  %24 = or i32 %23, %3"];
	Node0x51faa0[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x51fb10[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x51fb80[shape=record, label="  %27 = xor i32 %26, -1"];
	Node0x51fbf0[shape=record, label="  %28 = add i32 %24, 1"];
	Node0x51fc60[shape=record, label="  %29 = add i32 %28, %11"];
	Node0x51fd00[shape=record, label="  %30 = mul i32 %29, 3"];
	Node0x51fd70[shape=record, label="  %31 = sub i32 %0, %1"];
	Node0x51fde0[shape=record, label="  %32 = sub i32 %31, %10"];
	Node0x520060[shape=record, label="  %33 = sub i32 %32, %14"];
	Node0x5200d0[shape=record, label="  %34 = add i32 %33, %16"];
	Node0x520140[shape=record, label="  %35 = add i32 %34, %21"];
	Node0x5201b0[shape=record, label="  %36 = add i32 %35, %22"];
	Node0x520220[shape=record, label="  %37 = add i32 %36, %27"];
	Node0x520290[shape=record, label="  %38 = sub i32 %37, %13"];
	Node0x520300[shape=record, label="  %39 = add i32 %38, %18"];
	Node0x520370[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x5203e0[shape=record, label="  %41 = sub i32 %40, %25"];
	Node0x520450[shape=record, label="  %42 = add i32 %41, %30"];
	Node0x5204c0[shape=record, label="  %43 = icmp eq i32 %9, %42"];
	Node0x4bf268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x520960[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x5209b0[shape=record, label="  ret void"];
	Node0x51f0f0 -> Node0x51f160;
	Node0x51f160 -> Node0x51f1d0;
	Node0x51f1d0 -> Node0x51f240;
	Node0x51f240 -> Node0x51f2b0;
	Node0x51f2b0 -> Node0x51f320;
	Node0x51f320 -> Node0x51f390;
	Node0x51f390 -> Node0x51f430;
	Node0x51f430 -> Node0x51f4d0;
	Node0x51f4d0 -> Node0x51f540;
	Node0x51f540 -> Node0x51f5b0;
	Node0x51f5b0 -> Node0x51f620;
	Node0x51f620 -> Node0x51f6c0;
	Node0x51f6c0 -> Node0x51f760;
	Node0x51f760 -> Node0x51f7d0;
	Node0x51f7d0 -> Node0x51f840;
	Node0x51f840 -> Node0x51f8e0;
	Node0x51f8e0 -> Node0x51f950;
	Node0x51f950 -> Node0x51f9c0;
	Node0x51f9c0 -> Node0x51fa30;
	Node0x51fa30 -> Node0x51faa0;
	Node0x51faa0 -> Node0x51fb10;
	Node0x51fb10 -> Node0x51fb80;
	Node0x51fb80 -> Node0x51fbf0;
	Node0x51fbf0 -> Node0x51fc60;
	Node0x51fc60 -> Node0x51fd00;
	Node0x51fd00 -> Node0x51fd70;
	Node0x51fd70 -> Node0x51fde0;
	Node0x51fde0 -> Node0x520060;
	Node0x520060 -> Node0x5200d0;
	Node0x5200d0 -> Node0x520140;
	Node0x520140 -> Node0x5201b0;
	Node0x5201b0 -> Node0x520220;
	Node0x520220 -> Node0x520290;
	Node0x520290 -> Node0x520300;
	Node0x520300 -> Node0x520370;
	Node0x520370 -> Node0x5203e0;
	Node0x5203e0 -> Node0x520450;
	Node0x520450 -> Node0x5204c0;
	Node0x5204c0 -> Node0x4bf268;
	Node0x4bf268 -> Node0x520960;
	Node0x520960 -> Node0x5209b0;
edge [color=red]
	Node0x51f0f0 -> Node0x51f160;
	Node0x51f160 -> Node0x51f1d0;
	Node0x51f0f0 -> Node0x51f1d0;
	Node0x51f1d0 -> Node0x51f2b0;
	Node0x51f240 -> Node0x51f2b0;
	Node0x51f0f0 -> Node0x51f320;
	Node0x51f0f0 -> Node0x51f390;
	Node0x51f390 -> Node0x51f430;
	Node0x51f430 -> Node0x51f4d0;
	Node0x51f5b0 -> Node0x51f620;
	Node0x51f540 -> Node0x51f6c0;
	Node0x51f6c0 -> Node0x51f760;
	Node0x51f320 -> Node0x51f7d0;
	Node0x51f7d0 -> Node0x51f840;
	Node0x51f5b0 -> Node0x51f8e0;
	Node0x51f240 -> Node0x51f950;
	Node0x51f9c0 -> Node0x51fa30;
	Node0x51fa30 -> Node0x51faa0;
	Node0x51fb10 -> Node0x51fb80;
	Node0x51fa30 -> Node0x51fbf0;
	Node0x51fbf0 -> Node0x51fc60;
	Node0x51f390 -> Node0x51fc60;
	Node0x51fc60 -> Node0x51fd00;
	Node0x51fd70 -> Node0x51fde0;
	Node0x51f320 -> Node0x51fde0;
	Node0x51fde0 -> Node0x520060;
	Node0x51f540 -> Node0x520060;
	Node0x520060 -> Node0x5200d0;
	Node0x51f620 -> Node0x5200d0;
	Node0x5200d0 -> Node0x520140;
	Node0x51f8e0 -> Node0x520140;
	Node0x520140 -> Node0x5201b0;
	Node0x51f950 -> Node0x5201b0;
	Node0x5201b0 -> Node0x520220;
	Node0x51fb80 -> Node0x520220;
	Node0x520220 -> Node0x520290;
	Node0x51f4d0 -> Node0x520290;
	Node0x520290 -> Node0x520300;
	Node0x51f760 -> Node0x520300;
	Node0x520300 -> Node0x520370;
	Node0x51f840 -> Node0x520370;
	Node0x520370 -> Node0x5203e0;
	Node0x51faa0 -> Node0x5203e0;
	Node0x5203e0 -> Node0x520450;
	Node0x51fd00 -> Node0x520450;
	Node0x51f2b0 -> Node0x5204c0;
	Node0x520450 -> Node0x5204c0;
	Node0x5204c0 -> Node0x4bf268;
	Node0x4bf268 -> Node0x520960;
}
