digraph "DFG for'crackme' function" {
	Node0x1b66140[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x1b661e0[shape=record, label="  %6 = mul i32 %5, -5"];
	Node0x1b66280[shape=record, label="  %7 = add i32 %6, 2"];
	Node0x1b662f0[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x1b66360[shape=record, label="  %9 = add i32 %7, %8"];
	Node0x1b66400[shape=record, label="  %10 = xor i32 %2, 2147483647"];
	Node0x1b66470[shape=record, label="  %11 = and i32 %10, %1"];
	Node0x1b66510[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1b665b0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1b66620[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1b66690[shape=record, label="  %15 = xor i32 %2, %1"];
	Node0x1b66700[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x1b66770[shape=record, label="  %17 = xor i32 %1, -1"];
	Node0x1b667e0[shape=record, label="  %18 = and i32 %17, %2"];
	Node0x1b66880[shape=record, label="  %19 = mul i32 %18, -3"];
	Node0x1b668f0[shape=record, label="  %20 = shl i32 %14, 2"];
	Node0x1b66960[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x1b669d0[shape=record, label="  %22 = shl i32 %21, 2"];
	Node0x1b66a70[shape=record, label="  %23 = xor i32 %22, -4"];
	Node0x1b66ae0[shape=record, label="  %24 = or i32 %5, %3"];
	Node0x1b66b50[shape=record, label="  %25 = and i32 %5, %3"];
	Node0x1b66bf0[shape=record, label="  %26 = mul i32 %25, -7"];
	Node0x1b66c60[shape=record, label="  %27 = shl i32 %16, 1"];
	Node0x1b66cd0[shape=record, label="  %28 = xor i32 %3, %0"];
	Node0x1b66d70[shape=record, label="  %29 = mul i32 %28, 5"];
	Node0x1b66de0[shape=record, label="  %30 = sub i32 2, %0"];
	Node0x1b66e50[shape=record, label="  %31 = add i32 %30, %1"];
	Node0x1b66ec0[shape=record, label="  %32 = add i32 %31, 1"];
	Node0x1b67140[shape=record, label="  %33 = add i32 %32, %14"];
	Node0x1b671b0[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x1b67220[shape=record, label="  %35 = add i32 %34, %3"];
	Node0x1b67290[shape=record, label="  %36 = add i32 %35, %19"];
	Node0x1b67300[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0x1b67370[shape=record, label="  %38 = sub i32 %37, %20"];
	Node0x1b673e0[shape=record, label="  %39 = sub i32 %38, %24"];
	Node0x1b67450[shape=record, label="  %40 = add i32 %39, %27"];
	Node0x1b674c0[shape=record, label="  %41 = add i32 %40, %13"];
	Node0x1b67530[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x1b675a0[shape=record, label="  %43 = sub i32 %42, %23"];
	Node0x1b67610[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x1b67680[shape=record, label="  %45 = icmp eq i32 %9, %44"];
	Node0x1b06268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b67b20[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x1b67b70[shape=record, label="  ret void"];
	Node0x1b66140 -> Node0x1b661e0;
	Node0x1b661e0 -> Node0x1b66280;
	Node0x1b66280 -> Node0x1b662f0;
	Node0x1b662f0 -> Node0x1b66360;
	Node0x1b66360 -> Node0x1b66400;
	Node0x1b66400 -> Node0x1b66470;
	Node0x1b66470 -> Node0x1b66510;
	Node0x1b66510 -> Node0x1b665b0;
	Node0x1b665b0 -> Node0x1b66620;
	Node0x1b66620 -> Node0x1b66690;
	Node0x1b66690 -> Node0x1b66700;
	Node0x1b66700 -> Node0x1b66770;
	Node0x1b66770 -> Node0x1b667e0;
	Node0x1b667e0 -> Node0x1b66880;
	Node0x1b66880 -> Node0x1b668f0;
	Node0x1b668f0 -> Node0x1b66960;
	Node0x1b66960 -> Node0x1b669d0;
	Node0x1b669d0 -> Node0x1b66a70;
	Node0x1b66a70 -> Node0x1b66ae0;
	Node0x1b66ae0 -> Node0x1b66b50;
	Node0x1b66b50 -> Node0x1b66bf0;
	Node0x1b66bf0 -> Node0x1b66c60;
	Node0x1b66c60 -> Node0x1b66cd0;
	Node0x1b66cd0 -> Node0x1b66d70;
	Node0x1b66d70 -> Node0x1b66de0;
	Node0x1b66de0 -> Node0x1b66e50;
	Node0x1b66e50 -> Node0x1b66ec0;
	Node0x1b66ec0 -> Node0x1b67140;
	Node0x1b67140 -> Node0x1b671b0;
	Node0x1b671b0 -> Node0x1b67220;
	Node0x1b67220 -> Node0x1b67290;
	Node0x1b67290 -> Node0x1b67300;
	Node0x1b67300 -> Node0x1b67370;
	Node0x1b67370 -> Node0x1b673e0;
	Node0x1b673e0 -> Node0x1b67450;
	Node0x1b67450 -> Node0x1b674c0;
	Node0x1b674c0 -> Node0x1b67530;
	Node0x1b67530 -> Node0x1b675a0;
	Node0x1b675a0 -> Node0x1b67610;
	Node0x1b67610 -> Node0x1b67680;
	Node0x1b67680 -> Node0x1b06268;
	Node0x1b06268 -> Node0x1b67b20;
	Node0x1b67b20 -> Node0x1b67b70;
edge [color=red]
	Node0x1b66140 -> Node0x1b661e0;
	Node0x1b661e0 -> Node0x1b66280;
	Node0x1b66280 -> Node0x1b66360;
	Node0x1b662f0 -> Node0x1b66360;
	Node0x1b66400 -> Node0x1b66470;
	Node0x1b66470 -> Node0x1b66510;
	Node0x1b66510 -> Node0x1b665b0;
	Node0x1b66770 -> Node0x1b667e0;
	Node0x1b667e0 -> Node0x1b66880;
	Node0x1b66620 -> Node0x1b668f0;
	Node0x1b66960 -> Node0x1b669d0;
	Node0x1b669d0 -> Node0x1b66a70;
	Node0x1b66140 -> Node0x1b66ae0;
	Node0x1b66140 -> Node0x1b66b50;
	Node0x1b66b50 -> Node0x1b66bf0;
	Node0x1b66700 -> Node0x1b66c60;
	Node0x1b66cd0 -> Node0x1b66d70;
	Node0x1b66de0 -> Node0x1b66e50;
	Node0x1b66e50 -> Node0x1b66ec0;
	Node0x1b66ec0 -> Node0x1b67140;
	Node0x1b66620 -> Node0x1b67140;
	Node0x1b67140 -> Node0x1b671b0;
	Node0x1b66690 -> Node0x1b671b0;
	Node0x1b671b0 -> Node0x1b67220;
	Node0x1b67220 -> Node0x1b67290;
	Node0x1b66880 -> Node0x1b67290;
	Node0x1b67290 -> Node0x1b67300;
	Node0x1b66510 -> Node0x1b67300;
	Node0x1b67300 -> Node0x1b67370;
	Node0x1b668f0 -> Node0x1b67370;
	Node0x1b67370 -> Node0x1b673e0;
	Node0x1b66ae0 -> Node0x1b673e0;
	Node0x1b673e0 -> Node0x1b67450;
	Node0x1b66c60 -> Node0x1b67450;
	Node0x1b67450 -> Node0x1b674c0;
	Node0x1b665b0 -> Node0x1b674c0;
	Node0x1b674c0 -> Node0x1b67530;
	Node0x1b66bf0 -> Node0x1b67530;
	Node0x1b67530 -> Node0x1b675a0;
	Node0x1b66a70 -> Node0x1b675a0;
	Node0x1b675a0 -> Node0x1b67610;
	Node0x1b66d70 -> Node0x1b67610;
	Node0x1b66360 -> Node0x1b67680;
	Node0x1b67610 -> Node0x1b67680;
	Node0x1b67680 -> Node0x1b06268;
	Node0x1b06268 -> Node0x1b67b20;
}
