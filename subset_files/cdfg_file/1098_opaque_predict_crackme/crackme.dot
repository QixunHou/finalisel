digraph "DFG for'crackme' function" {
	Node0x1039000[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1039070[shape=record, label="  %6 = sub i32 %5, %1"];
	Node0x10390e0[shape=record, label="  %7 = or i32 %3, %0"];
	Node0x1039150[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x10391c0[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x1039230[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x10392a0[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x1039310[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x1039380[shape=record, label="  %13 = or i32 %11, %1"];
	Node0x1039420[shape=record, label="  %14 = shl i32 %10, 2"];
	Node0x10394c0[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0x1039530[shape=record, label="  %16 = xor i32 %13, -1"];
	Node0x10395a0[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x1039610[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x1039680[shape=record, label="  %19 = xor i32 %0, -1"];
	Node0x10396f0[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x1039760[shape=record, label="  %21 = and i32 %19, %3"];
	Node0x10397d0[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x1039840[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x10398b0[shape=record, label="  %24 = and i32 %23, %0"];
	Node0x1039950[shape=record, label="  %25 = add i32 %2, 4"];
	Node0x10399c0[shape=record, label="  %26 = add i32 %25, %12"];
	Node0x1039a30[shape=record, label="  %27 = add i32 %26, %10"];
	Node0x1039aa0[shape=record, label="  %28 = sub i32 %27, %13"];
	Node0x1039b10[shape=record, label="  %29 = add i32 %28, %16"];
	Node0x1039b80[shape=record, label="  %30 = add i32 %29, %3"];
	Node0x1039bf0[shape=record, label="  %31 = add i32 %30, %18"];
	Node0x1039c60[shape=record, label="  %32 = add i32 %31, %20"];
	Node0x1039ee0[shape=record, label="  %33 = add i32 %32, %22"];
	Node0x1039f50[shape=record, label="  %34 = add i32 %33, %8"];
	Node0x1039fc0[shape=record, label="  %35 = sub i32 %34, %24"];
	Node0x103a030[shape=record, label="  %36 = sub i32 %35, %21"];
	Node0x103a0a0[shape=record, label="  %37 = add i32 %36, %15"];
	Node0x103a110[shape=record, label="  %38 = icmp eq i32 %9, %37"];
	Node0xfd9268[shape=record, label="  %39 = select i1 %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x103a5b0[shape=record, label="  %40 = tail call i32 @puts(i8* nonnull dereferenceable(1) %39)"];
	Node0x103a600[shape=record, label="  ret void"];
	Node0x1039000 -> Node0x1039070;
	Node0x1039070 -> Node0x10390e0;
	Node0x10390e0 -> Node0x1039150;
	Node0x1039150 -> Node0x10391c0;
	Node0x10391c0 -> Node0x1039230;
	Node0x1039230 -> Node0x10392a0;
	Node0x10392a0 -> Node0x1039310;
	Node0x1039310 -> Node0x1039380;
	Node0x1039380 -> Node0x1039420;
	Node0x1039420 -> Node0x10394c0;
	Node0x10394c0 -> Node0x1039530;
	Node0x1039530 -> Node0x10395a0;
	Node0x10395a0 -> Node0x1039610;
	Node0x1039610 -> Node0x1039680;
	Node0x1039680 -> Node0x10396f0;
	Node0x10396f0 -> Node0x1039760;
	Node0x1039760 -> Node0x10397d0;
	Node0x10397d0 -> Node0x1039840;
	Node0x1039840 -> Node0x10398b0;
	Node0x10398b0 -> Node0x1039950;
	Node0x1039950 -> Node0x10399c0;
	Node0x10399c0 -> Node0x1039a30;
	Node0x1039a30 -> Node0x1039aa0;
	Node0x1039aa0 -> Node0x1039b10;
	Node0x1039b10 -> Node0x1039b80;
	Node0x1039b80 -> Node0x1039bf0;
	Node0x1039bf0 -> Node0x1039c60;
	Node0x1039c60 -> Node0x1039ee0;
	Node0x1039ee0 -> Node0x1039f50;
	Node0x1039f50 -> Node0x1039fc0;
	Node0x1039fc0 -> Node0x103a030;
	Node0x103a030 -> Node0x103a0a0;
	Node0x103a0a0 -> Node0x103a110;
	Node0x103a110 -> Node0xfd9268;
	Node0xfd9268 -> Node0x103a5b0;
	Node0x103a5b0 -> Node0x103a600;
edge [color=red]
	Node0x1039000 -> Node0x1039070;
	Node0x10390e0 -> Node0x1039150;
	Node0x1039070 -> Node0x10391c0;
	Node0x1039150 -> Node0x10391c0;
	Node0x10392a0 -> Node0x1039310;
	Node0x10392a0 -> Node0x1039380;
	Node0x1039230 -> Node0x1039420;
	Node0x1039420 -> Node0x10394c0;
	Node0x1039380 -> Node0x1039530;
	Node0x10395a0 -> Node0x1039610;
	Node0x1039680 -> Node0x1039760;
	Node0x1039760 -> Node0x10397d0;
	Node0x1039840 -> Node0x10398b0;
	Node0x1039950 -> Node0x10399c0;
	Node0x1039310 -> Node0x10399c0;
	Node0x10399c0 -> Node0x1039a30;
	Node0x1039230 -> Node0x1039a30;
	Node0x1039a30 -> Node0x1039aa0;
	Node0x1039380 -> Node0x1039aa0;
	Node0x1039aa0 -> Node0x1039b10;
	Node0x1039530 -> Node0x1039b10;
	Node0x1039b10 -> Node0x1039b80;
	Node0x1039b80 -> Node0x1039bf0;
	Node0x1039610 -> Node0x1039bf0;
	Node0x1039bf0 -> Node0x1039c60;
	Node0x10396f0 -> Node0x1039c60;
	Node0x1039c60 -> Node0x1039ee0;
	Node0x10397d0 -> Node0x1039ee0;
	Node0x1039ee0 -> Node0x1039f50;
	Node0x1039150 -> Node0x1039f50;
	Node0x1039f50 -> Node0x1039fc0;
	Node0x10398b0 -> Node0x1039fc0;
	Node0x1039fc0 -> Node0x103a030;
	Node0x1039760 -> Node0x103a030;
	Node0x103a030 -> Node0x103a0a0;
	Node0x10394c0 -> Node0x103a0a0;
	Node0x10391c0 -> Node0x103a110;
	Node0x103a0a0 -> Node0x103a110;
	Node0x103a110 -> Node0xfd9268;
	Node0xfd9268 -> Node0x103a5b0;
}
