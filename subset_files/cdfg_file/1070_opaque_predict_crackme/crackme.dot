digraph "DFG for'crackme' function" {
	Node0x130bb70[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x130bbe0[shape=record, label="  %6 = xor i32 %2, %1"];
	Node0x130c260[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x130c2d0[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x130c340[shape=record, label="  %9 = sub i32 1, %5"];
	Node0x130c3b0[shape=record, label="  %10 = sub i32 %9, %7"];
	Node0x130c420[shape=record, label="  %11 = add i32 %10, %8"];
	Node0x130c4c0[shape=record, label="  %12 = xor i32 %2, -1"];
	Node0x130c530[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x130c5a0[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x130c610[shape=record, label="  %15 = xor i32 %1, -1"];
	Node0x130c680[shape=record, label="  %16 = and i32 %15, %2"];
	Node0x130c720[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x130c790[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x130c800[shape=record, label="  %19 = xor i32 %0, -1"];
	Node0x130c870[shape=record, label="  %20 = or i32 %19, %3"];
	Node0x130c8e0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x130c950[shape=record, label="  %22 = shl i32 %3, 1"];
	Node0x130c9c0[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x130ca30[shape=record, label="  %24 = shl i32 %19, 1"];
	Node0x130caa0[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x130cb10[shape=record, label="  %26 = xor i32 %23, -1"];
	Node0x130cb80[shape=record, label="  %27 = xor i32 %20, -1"];
	Node0x130cc20[shape=record, label="  %28 = mul i32 %3, 6"];
	Node0x130cc90[shape=record, label="  %29 = add i32 %27, %26"];
	Node0x130cd00[shape=record, label="  %30 = mul i32 %29, 5"];
	Node0x130cda0[shape=record, label="  %31 = mul i32 %1, -3"];
	Node0x130ce40[shape=record, label="  %32 = sub i32 7, %24"];
	Node0x130d0c0[shape=record, label="  %33 = add i32 %32, %2"];
	Node0x130d130[shape=record, label="  %34 = sub i32 %33, %13"];
	Node0x130d1a0[shape=record, label="  %35 = add i32 %34, %6"];
	Node0x130d210[shape=record, label="  %36 = add i32 %35, %14"];
	Node0x130d280[shape=record, label="  %37 = add i32 %36, %3"];
	Node0x130d2f0[shape=record, label="  %38 = add i32 %37, %18"];
	Node0x130d360[shape=record, label="  %39 = sub i32 %38, %22"];
	Node0x130d3d0[shape=record, label="  %40 = sub i32 %39, %23"];
	Node0x130d440[shape=record, label="  %41 = add i32 %40, %25"];
	Node0x130d4b0[shape=record, label="  %42 = add i32 %41, %21"];
	Node0x130d520[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x130d590[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x130d600[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x130d670[shape=record, label="  %46 = icmp eq i32 %11, %45"];
	Node0x12ac268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x130db10[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x130db60[shape=record, label="  ret void"];
	Node0x130bb70 -> Node0x130bbe0;
	Node0x130bbe0 -> Node0x130c260;
	Node0x130c260 -> Node0x130c2d0;
	Node0x130c2d0 -> Node0x130c340;
	Node0x130c340 -> Node0x130c3b0;
	Node0x130c3b0 -> Node0x130c420;
	Node0x130c420 -> Node0x130c4c0;
	Node0x130c4c0 -> Node0x130c530;
	Node0x130c530 -> Node0x130c5a0;
	Node0x130c5a0 -> Node0x130c610;
	Node0x130c610 -> Node0x130c680;
	Node0x130c680 -> Node0x130c720;
	Node0x130c720 -> Node0x130c790;
	Node0x130c790 -> Node0x130c800;
	Node0x130c800 -> Node0x130c870;
	Node0x130c870 -> Node0x130c8e0;
	Node0x130c8e0 -> Node0x130c950;
	Node0x130c950 -> Node0x130c9c0;
	Node0x130c9c0 -> Node0x130ca30;
	Node0x130ca30 -> Node0x130caa0;
	Node0x130caa0 -> Node0x130cb10;
	Node0x130cb10 -> Node0x130cb80;
	Node0x130cb80 -> Node0x130cc20;
	Node0x130cc20 -> Node0x130cc90;
	Node0x130cc90 -> Node0x130cd00;
	Node0x130cd00 -> Node0x130cda0;
	Node0x130cda0 -> Node0x130ce40;
	Node0x130ce40 -> Node0x130d0c0;
	Node0x130d0c0 -> Node0x130d130;
	Node0x130d130 -> Node0x130d1a0;
	Node0x130d1a0 -> Node0x130d210;
	Node0x130d210 -> Node0x130d280;
	Node0x130d280 -> Node0x130d2f0;
	Node0x130d2f0 -> Node0x130d360;
	Node0x130d360 -> Node0x130d3d0;
	Node0x130d3d0 -> Node0x130d440;
	Node0x130d440 -> Node0x130d4b0;
	Node0x130d4b0 -> Node0x130d520;
	Node0x130d520 -> Node0x130d590;
	Node0x130d590 -> Node0x130d600;
	Node0x130d600 -> Node0x130d670;
	Node0x130d670 -> Node0x12ac268;
	Node0x12ac268 -> Node0x130db10;
	Node0x130db10 -> Node0x130db60;
edge [color=red]
	Node0x130bbe0 -> Node0x130c260;
	Node0x130bb70 -> Node0x130c340;
	Node0x130c340 -> Node0x130c3b0;
	Node0x130c260 -> Node0x130c3b0;
	Node0x130c3b0 -> Node0x130c420;
	Node0x130c2d0 -> Node0x130c420;
	Node0x130c4c0 -> Node0x130c530;
	Node0x130c610 -> Node0x130c680;
	Node0x130c680 -> Node0x130c720;
	Node0x130c720 -> Node0x130c790;
	Node0x130c800 -> Node0x130c870;
	Node0x130c870 -> Node0x130c8e0;
	Node0x130c800 -> Node0x130ca30;
	Node0x130c9c0 -> Node0x130cb10;
	Node0x130c870 -> Node0x130cb80;
	Node0x130cb80 -> Node0x130cc90;
	Node0x130cb10 -> Node0x130cc90;
	Node0x130cc90 -> Node0x130cd00;
	Node0x130ca30 -> Node0x130ce40;
	Node0x130ce40 -> Node0x130d0c0;
	Node0x130d0c0 -> Node0x130d130;
	Node0x130c530 -> Node0x130d130;
	Node0x130d130 -> Node0x130d1a0;
	Node0x130bbe0 -> Node0x130d1a0;
	Node0x130d1a0 -> Node0x130d210;
	Node0x130c5a0 -> Node0x130d210;
	Node0x130d210 -> Node0x130d280;
	Node0x130d280 -> Node0x130d2f0;
	Node0x130c790 -> Node0x130d2f0;
	Node0x130d2f0 -> Node0x130d360;
	Node0x130c950 -> Node0x130d360;
	Node0x130d360 -> Node0x130d3d0;
	Node0x130c9c0 -> Node0x130d3d0;
	Node0x130d3d0 -> Node0x130d440;
	Node0x130caa0 -> Node0x130d440;
	Node0x130d440 -> Node0x130d4b0;
	Node0x130c8e0 -> Node0x130d4b0;
	Node0x130d4b0 -> Node0x130d520;
	Node0x130cda0 -> Node0x130d520;
	Node0x130d520 -> Node0x130d590;
	Node0x130cc20 -> Node0x130d590;
	Node0x130d590 -> Node0x130d600;
	Node0x130cd00 -> Node0x130d600;
	Node0x130c420 -> Node0x130d670;
	Node0x130d600 -> Node0x130d670;
	Node0x130d670 -> Node0x12ac268;
	Node0x12ac268 -> Node0x130db10;
}
