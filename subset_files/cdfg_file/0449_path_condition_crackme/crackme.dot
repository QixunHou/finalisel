digraph "DFG for'crackme' function" {
	Node0xeb84b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xeb8b60[shape=record, label="  %4 = add i32 %3, 2"];
	Node0xeb8c20[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0xeb8c90[shape=record, label="  %6 = or i32 %1, %0"];
	Node0xeb8d30[shape=record, label="  %7 = mul i32 %6, 3"];
	Node0xeb8dd0[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0xeb8e40[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0xeb8eb0[shape=record, label="  %10 = and i32 %9, %1"];
	Node0xeb8f20[shape=record, label="  %11 = and i32 %8, %0"];
	Node0xeb8f90[shape=record, label="  %12 = and i32 %1, %0"];
	Node0xeb9000[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0xeb9070[shape=record, label="  %14 = add i32 %0, 2"];
	Node0xeb90e0[shape=record, label="  %15 = sub i32 %14, %1"];
	Node0xeb9150[shape=record, label="  %16 = sub i32 %15, %5"];
	Node0xeb91c0[shape=record, label="  %17 = sub i32 %16, %3"];
	Node0xeb9230[shape=record, label="  %18 = add i32 %17, %6"];
	Node0xeb92a0[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0xeb9310[shape=record, label="  %20 = sub i32 %19, %11"];
	Node0xeb9380[shape=record, label="  %21 = add i32 %20, %7"];
	Node0xeb93f0[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0xeb9460[shape=record, label="  %23 = icmp eq i32 %4, %22"];
	Node0xe59268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xeb9900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xeb9950[shape=record, label="  ret void"];
	Node0xeb84b0 -> Node0xeb8b60;
	Node0xeb8b60 -> Node0xeb8c20;
	Node0xeb8c20 -> Node0xeb8c90;
	Node0xeb8c90 -> Node0xeb8d30;
	Node0xeb8d30 -> Node0xeb8dd0;
	Node0xeb8dd0 -> Node0xeb8e40;
	Node0xeb8e40 -> Node0xeb8eb0;
	Node0xeb8eb0 -> Node0xeb8f20;
	Node0xeb8f20 -> Node0xeb8f90;
	Node0xeb8f90 -> Node0xeb9000;
	Node0xeb9000 -> Node0xeb9070;
	Node0xeb9070 -> Node0xeb90e0;
	Node0xeb90e0 -> Node0xeb9150;
	Node0xeb9150 -> Node0xeb91c0;
	Node0xeb91c0 -> Node0xeb9230;
	Node0xeb9230 -> Node0xeb92a0;
	Node0xeb92a0 -> Node0xeb9310;
	Node0xeb9310 -> Node0xeb9380;
	Node0xeb9380 -> Node0xeb93f0;
	Node0xeb93f0 -> Node0xeb9460;
	Node0xeb9460 -> Node0xe59268;
	Node0xe59268 -> Node0xeb9900;
	Node0xeb9900 -> Node0xeb9950;
edge [color=red]
	Node0xeb84b0 -> Node0xeb8b60;
	Node0xeb8c90 -> Node0xeb8d30;
	Node0xeb8e40 -> Node0xeb8eb0;
	Node0xeb8dd0 -> Node0xeb8f20;
	Node0xeb8f90 -> Node0xeb9000;
	Node0xeb9070 -> Node0xeb90e0;
	Node0xeb90e0 -> Node0xeb9150;
	Node0xeb8c20 -> Node0xeb9150;
	Node0xeb9150 -> Node0xeb91c0;
	Node0xeb84b0 -> Node0xeb91c0;
	Node0xeb91c0 -> Node0xeb9230;
	Node0xeb8c90 -> Node0xeb9230;
	Node0xeb9230 -> Node0xeb92a0;
	Node0xeb8eb0 -> Node0xeb92a0;
	Node0xeb92a0 -> Node0xeb9310;
	Node0xeb8f20 -> Node0xeb9310;
	Node0xeb9310 -> Node0xeb9380;
	Node0xeb8d30 -> Node0xeb9380;
	Node0xeb9380 -> Node0xeb93f0;
	Node0xeb9000 -> Node0xeb93f0;
	Node0xeb8b60 -> Node0xeb9460;
	Node0xeb93f0 -> Node0xeb9460;
	Node0xeb9460 -> Node0xe59268;
	Node0xe59268 -> Node0xeb9900;
}
