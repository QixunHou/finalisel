digraph "DFG for'crackme' function" {
	Node0x11db570[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x11db5e0[shape=record, label="  %4 = sub i32 %3, %1"];
	Node0x11dbcb0[shape=record, label="  %5 = shl i32 %3, 1"];
	Node0x11dbd50[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x11dbdc0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x11dbe30[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x11dbed0[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x11dbf40[shape=record, label="  %10 = and i32 %9, %0"];
	Node0x11dbfb0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x11dc020[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x11dc090[shape=record, label="  %13 = or i32 %9, %0"];
	Node0x11dc100[shape=record, label="  %14 = add i32 %7, 1"];
	Node0x11dc170[shape=record, label="  %15 = shl i32 %13, 1"];
	Node0x11dc1e0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x11dc250[shape=record, label="  %17 = add i32 %10, %14"];
	Node0x11dc2f0[shape=record, label="  %18 = mul i32 %17, 3"];
	Node0x11dc360[shape=record, label="  %19 = sub i32 1, %10"];
	Node0x11dc3d0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x11dc440[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x11dc4b0[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0x11dc520[shape=record, label="  %23 = sub i32 %22, %8"];
	Node0x11dc590[shape=record, label="  %24 = add i32 %23, %6"];
	Node0x11dc600[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x11dc670[shape=record, label="  %26 = add i32 %25, %18"];
	Node0x11dc6e0[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x117c268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x11dcb80[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x11dcbd0[shape=record, label="  ret void"];
	Node0x11db570 -> Node0x11db5e0;
	Node0x11db5e0 -> Node0x11dbcb0;
	Node0x11dbcb0 -> Node0x11dbd50;
	Node0x11dbd50 -> Node0x11dbdc0;
	Node0x11dbdc0 -> Node0x11dbe30;
	Node0x11dbe30 -> Node0x11dbed0;
	Node0x11dbed0 -> Node0x11dbf40;
	Node0x11dbf40 -> Node0x11dbfb0;
	Node0x11dbfb0 -> Node0x11dc020;
	Node0x11dc020 -> Node0x11dc090;
	Node0x11dc090 -> Node0x11dc100;
	Node0x11dc100 -> Node0x11dc170;
	Node0x11dc170 -> Node0x11dc1e0;
	Node0x11dc1e0 -> Node0x11dc250;
	Node0x11dc250 -> Node0x11dc2f0;
	Node0x11dc2f0 -> Node0x11dc360;
	Node0x11dc360 -> Node0x11dc3d0;
	Node0x11dc3d0 -> Node0x11dc440;
	Node0x11dc440 -> Node0x11dc4b0;
	Node0x11dc4b0 -> Node0x11dc520;
	Node0x11dc520 -> Node0x11dc590;
	Node0x11dc590 -> Node0x11dc600;
	Node0x11dc600 -> Node0x11dc670;
	Node0x11dc670 -> Node0x11dc6e0;
	Node0x11dc6e0 -> Node0x117c268;
	Node0x117c268 -> Node0x11dcb80;
	Node0x11dcb80 -> Node0x11dcbd0;
edge [color=red]
	Node0x11db570 -> Node0x11db5e0;
	Node0x11db570 -> Node0x11dbcb0;
	Node0x11dbcb0 -> Node0x11dbd50;
	Node0x11dbdc0 -> Node0x11dbe30;
	Node0x11dbed0 -> Node0x11dbf40;
	Node0x11dbfb0 -> Node0x11dc020;
	Node0x11dbed0 -> Node0x11dc090;
	Node0x11dbdc0 -> Node0x11dc100;
	Node0x11dc090 -> Node0x11dc170;
	Node0x11dc170 -> Node0x11dc1e0;
	Node0x11dbf40 -> Node0x11dc250;
	Node0x11dc100 -> Node0x11dc250;
	Node0x11dc250 -> Node0x11dc2f0;
	Node0x11dbf40 -> Node0x11dc360;
	Node0x11dc360 -> Node0x11dc3d0;
	Node0x11dc020 -> Node0x11dc3d0;
	Node0x11dc3d0 -> Node0x11dc440;
	Node0x11dc090 -> Node0x11dc440;
	Node0x11dc440 -> Node0x11dc4b0;
	Node0x11dbfb0 -> Node0x11dc4b0;
	Node0x11dc4b0 -> Node0x11dc520;
	Node0x11dbe30 -> Node0x11dc520;
	Node0x11dc520 -> Node0x11dc590;
	Node0x11dbd50 -> Node0x11dc590;
	Node0x11dc590 -> Node0x11dc600;
	Node0x11dc1e0 -> Node0x11dc600;
	Node0x11dc600 -> Node0x11dc670;
	Node0x11dc2f0 -> Node0x11dc670;
	Node0x11db5e0 -> Node0x11dc6e0;
	Node0x11dc670 -> Node0x11dc6e0;
	Node0x11dc6e0 -> Node0x117c268;
	Node0x117c268 -> Node0x11dcb80;
}
