; ModuleID = '../.././c_source_file/1813_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1813_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %1
  %5 = xor i32 %4, %0
  %6 = mul i32 %5, -4
  %7 = and i32 %1, %0
  %8 = xor i32 %7, %2
  %9 = add i32 %6, %8
  %10 = xor i32 %1, -1
  %11 = xor i32 %2, -1
  %12 = and i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %10
  %15 = xor i32 %1, %0
  %16 = or i32 %15, %11
  %17 = xor i32 %0, -1
  %18 = and i32 %2, %1
  %19 = or i32 %18, %17
  %20 = and i32 %18, %17
  %21 = xor i32 %2, %1
  %22 = and i32 %21, %0
  %23 = or i32 %20, %22
  %24 = and i32 %10, %0
  %25 = and i32 %11, %1
  %26 = or i32 %25, %24
  %27 = or i32 %21, %0
  %28 = or i32 %12, %15
  %29 = or i32 %21, %7
  %30 = or i32 %2, %0
  %31 = and i32 %10, %2
  %32 = and i32 %31, %0
  %33 = or i32 %10, %2
  %34 = xor i32 %33, %0
  %35 = or i32 %32, %34
  %36 = and i32 %18, %0
  %37 = or i32 %36, %5
  %38 = shl i32 %37, 1
  %39 = xor i32 %18, -1
  %40 = add i32 %18, 1
  %41 = or i32 %12, %18
  %42 = xor i32 %15, -1
  %43 = xor i32 %2, %0
  %44 = and i32 %43, %42
  %45 = shl i32 %10, 1
  %46 = and i32 %2, %0
  %47 = or i32 %46, %15
  %48 = or i32 %43, %1
  %49 = xor i32 %5, -1
  %50 = xor i32 %36, %49
  %51 = and i32 %13, %1
  %52 = shl i32 %51, 1
  %53 = or i32 %7, %2
  %54 = or i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %43, %55
  %57 = xor i32 %24, -1
  %58 = and i32 %21, %57
  %59 = or i32 %12, %10
  %60 = xor i32 %43, -1
  %61 = or i32 %7, %60
  %62 = or i32 %43, %42
  %63 = xor i32 %27, 2147483647
  %64 = or i32 %63, %32
  %65 = shl i32 %64, 1
  %66 = or i32 %11, %1
  %67 = xor i32 %66, -1
  %68 = or i32 %7, %67
  %69 = and i32 %21, %54
  %70 = or i32 %39, %0
  %71 = xor i32 %55, %2
  %72 = xor i32 %46, %4
  %73 = and i32 %15, %13
  %74 = xor i32 %66, %7
  %75 = and i32 %39, %0
  %76 = and i32 %30, %15
  %77 = or i32 %10, %0
  %78 = xor i32 %77, -1
  %79 = or i32 %46, %78
  %80 = xor i32 %21, -1
  %81 = xor i32 %80, %0
  %82 = and i32 %43, %77
  %83 = xor i32 %54, %2
  %84 = or i32 %39, %17
  %85 = xor i32 %34, -1
  %86 = xor i32 %32, %85
  %87 = shl i32 %42, 1
  %88 = or i32 %11, %0
  %89 = xor i32 %88, %7
  %90 = xor i32 %21, %0
  %91 = or i32 %32, %90
  %92 = or i32 %46, %1
  %93 = shl i32 %92, 1
  %94 = or i32 %67, %17
  %95 = or i32 %24, %80
  %96 = xor i32 %4, -1
  %97 = xor i32 %96, %0
  %98 = or i32 %25, %0
  %99 = and i32 %30, %1
  %100 = xor i32 %7, -1
  %101 = and i32 %80, %100
  %102 = shl i32 %101, 1
  %103 = and i32 %42, %2
  %104 = and i32 %15, %2
  %105 = or i32 %43, %7
  %106 = xor i32 %32, %27
  %107 = xor i32 %46, -1
  %108 = add i32 %46, 1
  %109 = or i32 %15, %2
  %110 = or i32 %46, %25
  %111 = and i32 %88, %42
  %112 = xor i32 %46, %1
  %113 = xor i32 %30, -1
  %114 = or i32 %15, %113
  %115 = and i32 %15, %60
  %116 = and i32 %4, %0
  %117 = xor i32 %116, -1
  %118 = xor i32 %20, %117
  %119 = and i32 %107, %10
  %120 = shl i32 %119, 1
  %121 = or i32 %21, %17
  %122 = shl i32 %121, 1
  %123 = xor i32 %36, %90
  %124 = and i32 %88, %15
  %125 = xor i32 %66, %0
  %126 = or i32 %96, %0
  %127 = or i32 %46, %96
  %128 = or i32 %60, %78
  %129 = shl i32 %128, 1
  %130 = or i32 %18, %0
  %131 = or i32 %21, %78
  %132 = or i32 %24, %11
  %133 = shl i32 %132, 2
  %134 = add i32 %43, 1
  %135 = and i32 %88, %10
  %136 = shl i32 %135, 2
  %137 = xor i32 %107, %1
  %138 = and i32 %43, %54
  %139 = xor i32 %88, -1
  %140 = or i32 %139, %10
  %141 = and i32 %88, %1
  %142 = xor i32 %67, %0
  %143 = shl i32 %142, 1
  %144 = or i32 %43, %78
  %145 = shl i32 %144, 1
  %146 = and i32 %30, %42
  %147 = shl i32 %2, 1
  %148 = or i32 %24, %60
  %149 = and i32 %57, %2
  %150 = and i32 %15, %107
  %151 = and i32 %21, %17
  %152 = or i32 %36, %151
  %153 = and i32 %39, %17
  %154 = or i32 %42, %2
  %155 = shl i32 %154, 1
  %156 = xor i32 %155, -1
  %157 = or i32 %139, %1
  %158 = or i32 %4, %0
  %159 = or i32 %80, %55
  %160 = and i32 %80, %0
  %161 = and i32 %21, %100
  %162 = and i32 %107, %1
  %163 = or i32 %60, %55
  %164 = and i32 %54, %80
  %165 = or i32 %78, %2
  %166 = xor i32 %12, %66
  %167 = xor i32 %18, %0
  %168 = and i32 %31, %17
  %169 = and i32 %33, %0
  %170 = xor i32 %169, -1
  %171 = xor i32 %168, %170
  %172 = or i32 %113, %42
  %173 = or i32 %24, %2
  %174 = and i32 %54, %60
  %175 = and i32 %100, %2
  %176 = shl i32 %175, 1
  %177 = xor i32 %25, -1
  %178 = add i32 %25, 1
  %179 = or i32 %43, %10
  %180 = or i32 %66, %0
  %181 = shl i32 %180, 1
  %182 = and i32 %80, %57
  %183 = xor i32 %12, %39
  %184 = or i32 %11, %55
  %185 = xor i32 %39, %0
  %186 = and i32 %4, %17
  %187 = or i32 %36, %186
  %188 = and i32 %43, %1
  %189 = shl i32 %188, 1
  %190 = or i32 %177, %0
  %191 = or i32 %7, %139
  %192 = and i32 %33, %17
  %193 = or i32 %32, %192
  %194 = xor i32 %24, %39
  %195 = and i32 %43, %57
  %196 = or i32 %168, %169
  %197 = or i32 %15, %139
  %198 = and i32 %107, %42
  %199 = and i32 %43, %10
  %200 = add i32 %30, 1
  %201 = and i32 %177, %0
  %202 = and i32 %54, %11
  %203 = or i32 %21, %55
  %204 = add i32 %4, 1
  %205 = xor i32 %46, %77
  %206 = xor i32 %13, %1
  %207 = xor i32 %177, %0
  %208 = or i32 %46, %42
  %209 = shl i32 %208, 1
  %210 = or i32 %12, %1
  %211 = or i32 %18, %24
  %212 = or i32 %60, %10
  %213 = and i32 %21, %77
  %214 = or i32 %60, %1
  %215 = xor i32 %121, -1
  %216 = or i32 %168, %215
  %217 = or i32 %12, %67
  %218 = and i32 %80, %17
  %219 = xor i32 %46, %54
  %220 = and i32 %66, %0
  %221 = and i32 %54, %2
  %222 = xor i32 %24, %177
  %223 = or i32 %55, %2
  %224 = and i32 %77, %2
  %225 = or i32 %7, %11
  %226 = and i32 %43, %15
  %227 = and i32 %96, %17
  %228 = mul i32 %227, 35
  %229 = and i32 %25, %17
  %230 = mul i32 %229, 13
  %231 = and i32 %96, %0
  %232 = and i32 %25, %0
  %233 = shl i32 %232, 2
  %234 = and i32 %67, %17
  %235 = mul i32 %234, 19
  %236 = mul i32 %20, 7
  %237 = and i32 %67, %0
  %238 = add i32 %71, %225
  %239 = add i32 %238, %46
  %240 = add i32 %239, %220
  %241 = add i32 %240, %36
  %242 = add i32 %241, %214
  %243 = add i32 %242, %182
  %244 = add i32 %243, %164
  %245 = add i32 %244, %115
  %246 = add i32 %245, %76
  %247 = add i32 %246, %72
  %248 = add i32 %247, %68
  %249 = shl i32 %248, 1
  %250 = add i32 %237, %231
  %251 = shl i32 %250, 4
  %252 = sub i32 %146, %125
  %253 = mul i32 %252, 3
  %254 = sub i32 %99, %153
  %255 = mul i32 %254, 5
  %256 = add i32 %17, %1
  %257 = add i32 %256, %15
  %258 = sub i32 %257, %45
  %259 = sub i32 %258, %54
  %260 = add i32 %259, %11
  %261 = add i32 %260, %57
  %262 = add i32 %261, %77
  %263 = sub i32 %262, %24
  %264 = add i32 %263, %55
  %265 = add i32 %264, %16
  %266 = add i32 %265, %30
  %267 = add i32 %266, %40
  %268 = add i32 %267, %13
  %269 = add i32 %268, %53
  %270 = sub i32 %269, %83
  %271 = sub i32 %270, %87
  %272 = sub i32 %271, %103
  %273 = add i32 %272, %104
  %274 = add i32 %273, %108
  %275 = sub i32 %274, %109
  %276 = add i32 %275, %134
  %277 = sub i32 %276, %147
  %278 = add i32 %277, %149
  %279 = sub i32 %278, %165
  %280 = add i32 %279, %173
  %281 = add i32 %280, %178
  %282 = sub i32 %281, %184
  %283 = add i32 %282, %200
  %284 = sub i32 %283, %202
  %285 = add i32 %284, %204
  %286 = add i32 %285, %25
  %287 = sub i32 %286, %18
  %288 = sub i32 %287, %221
  %289 = add i32 %288, %223
  %290 = add i32 %289, %224
  %291 = add i32 %290, %14
  %292 = add i32 %291, %19
  %293 = add i32 %292, %26
  %294 = add i32 %293, %27
  %295 = add i32 %294, %28
  %296 = sub i32 %295, %29
  %297 = add i32 %296, %41
  %298 = sub i32 %297, %44
  %299 = sub i32 %298, %47
  %300 = add i32 %299, %48
  %301 = add i32 %300, %56
  %302 = add i32 %301, %58
  %303 = sub i32 %302, %59
  %304 = sub i32 %303, %61
  %305 = sub i32 %304, %62
  %306 = sub i32 %305, %69
  %307 = add i32 %306, %70
  %308 = add i32 %307, %73
  %309 = sub i32 %308, %74
  %310 = add i32 %309, %75
  %311 = add i32 %310, %79
  %312 = add i32 %311, %81
  %313 = sub i32 %312, %82
  %314 = add i32 %313, %84
  %315 = sub i32 %314, %22
  %316 = add i32 %315, %89
  %317 = sub i32 %316, %94
  %318 = add i32 %317, %95
  %319 = sub i32 %318, %97
  %320 = sub i32 %319, %98
  %321 = sub i32 %320, %105
  %322 = add i32 %321, %110
  %323 = sub i32 %322, %111
  %324 = sub i32 %323, %112
  %325 = sub i32 %324, %114
  %326 = add i32 %325, %124
  %327 = add i32 %326, %126
  %328 = sub i32 %327, %127
  %329 = add i32 %328, %130
  %330 = add i32 %329, %131
  %331 = sub i32 %330, %133
  %332 = sub i32 %331, %137
  %333 = add i32 %332, %138
  %334 = sub i32 %333, %140
  %335 = sub i32 %334, %141
  %336 = sub i32 %335, %148
  %337 = sub i32 %336, %150
  %338 = add i32 %337, %156
  %339 = sub i32 %338, %157
  %340 = add i32 %339, %158
  %341 = add i32 %340, %159
  %342 = sub i32 %341, %160
  %343 = add i32 %342, %161
  %344 = sub i32 %343, %162
  %345 = add i32 %344, %163
  %346 = sub i32 %345, %166
  %347 = sub i32 %346, %167
  %348 = sub i32 %347, %172
  %349 = add i32 %348, %174
  %350 = sub i32 %349, %176
  %351 = sub i32 %350, %179
  %352 = sub i32 %351, %183
  %353 = sub i32 %352, %185
  %354 = sub i32 %353, %186
  %355 = sub i32 %354, %190
  %356 = sub i32 %355, %191
  %357 = sub i32 %356, %194
  %358 = add i32 %357, %195
  %359 = sub i32 %358, %197
  %360 = sub i32 %359, %198
  %361 = sub i32 %360, %199
  %362 = sub i32 %361, %201
  %363 = add i32 %362, %203
  %364 = sub i32 %363, %205
  %365 = sub i32 %364, %206
  %366 = add i32 %365, %207
  %367 = sub i32 %366, %210
  %368 = sub i32 %367, %211
  %369 = sub i32 %368, %212
  %370 = add i32 %369, %213
  %371 = sub i32 %370, %217
  %372 = sub i32 %371, %218
  %373 = add i32 %372, %219
  %374 = add i32 %373, %151
  %375 = sub i32 %374, %222
  %376 = sub i32 %375, %226
  %377 = add i32 %376, %23
  %378 = sub i32 %377, %35
  %379 = add i32 %378, %50
  %380 = sub i32 %379, %52
  %381 = add i32 %380, %86
  %382 = add i32 %381, %91
  %383 = sub i32 %382, %93
  %384 = sub i32 %383, %102
  %385 = add i32 %384, %106
  %386 = add i32 %385, %118
  %387 = sub i32 %386, %120
  %388 = sub i32 %387, %122
  %389 = add i32 %388, %123
  %390 = sub i32 %389, %129
  %391 = sub i32 %390, %136
  %392 = sub i32 %391, %143
  %393 = sub i32 %392, %145
  %394 = sub i32 %393, %152
  %395 = add i32 %394, %171
  %396 = sub i32 %395, %181
  %397 = sub i32 %396, %187
  %398 = sub i32 %397, %189
  %399 = add i32 %398, %193
  %400 = sub i32 %399, %196
  %401 = sub i32 %400, %209
  %402 = add i32 %401, %216
  %403 = add i32 %402, %228
  %404 = add i32 %403, %230
  %405 = add i32 %404, %233
  %406 = add i32 %405, %235
  %407 = add i32 %406, %236
  %408 = sub i32 %407, %38
  %409 = add i32 %408, %251
  %410 = add i32 %409, %253
  %411 = add i32 %410, %255
  %412 = sub i32 %411, %65
  %413 = add i32 %412, %249
  %414 = icmp eq i32 %9, %413
  %415 = select i1 %414, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %416 = tail call i32 @puts(i8* nonnull dereferenceable(1) %415)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
