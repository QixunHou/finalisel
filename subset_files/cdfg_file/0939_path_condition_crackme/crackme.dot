digraph "DFG for'crackme' function" {
	Node0x6a7bd0[shape=record, label="  %5 = xor i32 %3, %0"];
	Node0x6a8250[shape=record, label="  %6 = sub i32 1, %1"];
	Node0x6a82c0[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x6a8360[shape=record, label="  %8 = xor i32 %2, -1"];
	Node0x6a83d0[shape=record, label="  %9 = and i32 %8, %1"];
	Node0x6a8440[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x6a84b0[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x6a8520[shape=record, label="  %12 = shl i32 %2, 1"];
	Node0x6a8590[shape=record, label="  %13 = add i32 %2, 1"];
	Node0x6a8600[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x6a8670[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x6a8710[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x6a8780[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x6a87f0[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x6a8860[shape=record, label="  %19 = xor i32 %3, -1"];
	Node0x6a88d0[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x6a8940[shape=record, label="  %21 = and i32 %20, %3"];
	Node0x6a89b0[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x6a8a20[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x6a8a90[shape=record, label="  %24 = or i32 %20, %3"];
	Node0x6a8b30[shape=record, label="  %25 = shl i32 %23, 2"];
	Node0x6a8bd0[shape=record, label="  %26 = xor i32 %25, -4"];
	Node0x6a8c40[shape=record, label="  %27 = xor i32 %24, -1"];
	Node0x6a8ce0[shape=record, label="  %28 = mul i32 %27, -7"];
	Node0x6a8d50[shape=record, label="  %29 = and i32 %3, %0"];
	Node0x6a8df0[shape=record, label="  %30 = mul i32 %29, -5"];
	Node0x6a8e60[shape=record, label="  %31 = sub i32 %9, %21"];
	Node0x6a8f00[shape=record, label="  %32 = mul i32 %31, 3"];
	Node0x6a9180[shape=record, label="  %33 = add i32 %13, %0"];
	Node0x6a91f0[shape=record, label="  %34 = add i32 %33, %10"];
	Node0x6a9260[shape=record, label="  %35 = sub i32 %34, %11"];
	Node0x6a92d0[shape=record, label="  %36 = add i32 %35, %12"];
	Node0x6a9340[shape=record, label="  %37 = add i32 %36, %19"];
	Node0x6a93b0[shape=record, label="  %38 = sub i32 %37, %18"];
	Node0x6a9420[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x6a9490[shape=record, label="  %40 = add i32 %39, %5"];
	Node0x6a9500[shape=record, label="  %41 = add i32 %40, %23"];
	Node0x6a9570[shape=record, label="  %42 = sub i32 %41, %24"];
	Node0x6a95e0[shape=record, label="  %43 = add i32 %42, %16"];
	Node0x6a9650[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x6a96c0[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x6a9730[shape=record, label="  %46 = sub i32 %45, %26"];
	Node0x6a97a0[shape=record, label="  %47 = add i32 %46, %32"];
	Node0x6a9810[shape=record, label="  %48 = icmp eq i32 %7, %47"];
	Node0x648268[shape=record, label="  %49 = select i1 %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x6a9cb0[shape=record, label="  %50 = tail call i32 @puts(i8* nonnull dereferenceable(1) %49)"];
	Node0x6a9d00[shape=record, label="  ret void"];
	Node0x6a7bd0 -> Node0x6a8250;
	Node0x6a8250 -> Node0x6a82c0;
	Node0x6a82c0 -> Node0x6a8360;
	Node0x6a8360 -> Node0x6a83d0;
	Node0x6a83d0 -> Node0x6a8440;
	Node0x6a8440 -> Node0x6a84b0;
	Node0x6a84b0 -> Node0x6a8520;
	Node0x6a8520 -> Node0x6a8590;
	Node0x6a8590 -> Node0x6a8600;
	Node0x6a8600 -> Node0x6a8670;
	Node0x6a8670 -> Node0x6a8710;
	Node0x6a8710 -> Node0x6a8780;
	Node0x6a8780 -> Node0x6a87f0;
	Node0x6a87f0 -> Node0x6a8860;
	Node0x6a8860 -> Node0x6a88d0;
	Node0x6a88d0 -> Node0x6a8940;
	Node0x6a8940 -> Node0x6a89b0;
	Node0x6a89b0 -> Node0x6a8a20;
	Node0x6a8a20 -> Node0x6a8a90;
	Node0x6a8a90 -> Node0x6a8b30;
	Node0x6a8b30 -> Node0x6a8bd0;
	Node0x6a8bd0 -> Node0x6a8c40;
	Node0x6a8c40 -> Node0x6a8ce0;
	Node0x6a8ce0 -> Node0x6a8d50;
	Node0x6a8d50 -> Node0x6a8df0;
	Node0x6a8df0 -> Node0x6a8e60;
	Node0x6a8e60 -> Node0x6a8f00;
	Node0x6a8f00 -> Node0x6a9180;
	Node0x6a9180 -> Node0x6a91f0;
	Node0x6a91f0 -> Node0x6a9260;
	Node0x6a9260 -> Node0x6a92d0;
	Node0x6a92d0 -> Node0x6a9340;
	Node0x6a9340 -> Node0x6a93b0;
	Node0x6a93b0 -> Node0x6a9420;
	Node0x6a9420 -> Node0x6a9490;
	Node0x6a9490 -> Node0x6a9500;
	Node0x6a9500 -> Node0x6a9570;
	Node0x6a9570 -> Node0x6a95e0;
	Node0x6a95e0 -> Node0x6a9650;
	Node0x6a9650 -> Node0x6a96c0;
	Node0x6a96c0 -> Node0x6a9730;
	Node0x6a9730 -> Node0x6a97a0;
	Node0x6a97a0 -> Node0x6a9810;
	Node0x6a9810 -> Node0x648268;
	Node0x648268 -> Node0x6a9cb0;
	Node0x6a9cb0 -> Node0x6a9d00;
edge [color=red]
	Node0x6a8250 -> Node0x6a82c0;
	Node0x6a7bd0 -> Node0x6a82c0;
	Node0x6a8360 -> Node0x6a83d0;
	Node0x6a83d0 -> Node0x6a8440;
	Node0x6a8600 -> Node0x6a8670;
	Node0x6a8670 -> Node0x6a8710;
	Node0x6a8780 -> Node0x6a87f0;
	Node0x6a88d0 -> Node0x6a8940;
	Node0x6a8940 -> Node0x6a89b0;
	Node0x6a88d0 -> Node0x6a8a90;
	Node0x6a8a20 -> Node0x6a8b30;
	Node0x6a8b30 -> Node0x6a8bd0;
	Node0x6a8a90 -> Node0x6a8c40;
	Node0x6a8c40 -> Node0x6a8ce0;
	Node0x6a8d50 -> Node0x6a8df0;
	Node0x6a83d0 -> Node0x6a8e60;
	Node0x6a8940 -> Node0x6a8e60;
	Node0x6a8e60 -> Node0x6a8f00;
	Node0x6a8590 -> Node0x6a9180;
	Node0x6a9180 -> Node0x6a91f0;
	Node0x6a8440 -> Node0x6a91f0;
	Node0x6a91f0 -> Node0x6a9260;
	Node0x6a84b0 -> Node0x6a9260;
	Node0x6a9260 -> Node0x6a92d0;
	Node0x6a8520 -> Node0x6a92d0;
	Node0x6a92d0 -> Node0x6a9340;
	Node0x6a8860 -> Node0x6a9340;
	Node0x6a9340 -> Node0x6a93b0;
	Node0x6a87f0 -> Node0x6a93b0;
	Node0x6a93b0 -> Node0x6a9420;
	Node0x6a89b0 -> Node0x6a9420;
	Node0x6a9420 -> Node0x6a9490;
	Node0x6a7bd0 -> Node0x6a9490;
	Node0x6a9490 -> Node0x6a9500;
	Node0x6a8a20 -> Node0x6a9500;
	Node0x6a9500 -> Node0x6a9570;
	Node0x6a8a90 -> Node0x6a9570;
	Node0x6a9570 -> Node0x6a95e0;
	Node0x6a8710 -> Node0x6a95e0;
	Node0x6a95e0 -> Node0x6a9650;
	Node0x6a8ce0 -> Node0x6a9650;
	Node0x6a9650 -> Node0x6a96c0;
	Node0x6a8df0 -> Node0x6a96c0;
	Node0x6a96c0 -> Node0x6a9730;
	Node0x6a8bd0 -> Node0x6a9730;
	Node0x6a9730 -> Node0x6a97a0;
	Node0x6a8f00 -> Node0x6a97a0;
	Node0x6a82c0 -> Node0x6a9810;
	Node0x6a97a0 -> Node0x6a9810;
	Node0x6a9810 -> Node0x648268;
	Node0x648268 -> Node0x6a9cb0;
}
