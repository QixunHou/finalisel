digraph "DFG for'crackme' function" {
	Node0x1324460[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1324b10[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x1324bd0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x1324c40[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x1324cb0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1324d50[shape=record, label="  %8 = xor i32 %1, 2147483647"];
	Node0x1324df0[shape=record, label="  %9 = shl i32 %7, 1"];
	Node0x1324e60[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1324ed0[shape=record, label="  %11 = and i32 %8, %0"];
	Node0x1324f40[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1324fb0[shape=record, label="  %13 = shl i32 %5, 1"];
	Node0x1325020[shape=record, label="  %14 = add i32 %0, -1"];
	Node0x1325090[shape=record, label="  %15 = add i32 %14, %6"];
	Node0x1325100[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x1325170[shape=record, label="  %17 = add i32 %16, %4"];
	Node0x13251e0[shape=record, label="  %18 = sub i32 %17, %12"];
	Node0x1325250[shape=record, label="  %19 = sub i32 %18, %13"];
	Node0x13252c0[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0x1325330[shape=record, label="  %21 = icmp eq i32 %20, %1"];
	Node0x12c5268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x13257d0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x1325820[shape=record, label="  ret void"];
	Node0x1324460 -> Node0x1324b10;
	Node0x1324b10 -> Node0x1324bd0;
	Node0x1324bd0 -> Node0x1324c40;
	Node0x1324c40 -> Node0x1324cb0;
	Node0x1324cb0 -> Node0x1324d50;
	Node0x1324d50 -> Node0x1324df0;
	Node0x1324df0 -> Node0x1324e60;
	Node0x1324e60 -> Node0x1324ed0;
	Node0x1324ed0 -> Node0x1324f40;
	Node0x1324f40 -> Node0x1324fb0;
	Node0x1324fb0 -> Node0x1325020;
	Node0x1325020 -> Node0x1325090;
	Node0x1325090 -> Node0x1325100;
	Node0x1325100 -> Node0x1325170;
	Node0x1325170 -> Node0x13251e0;
	Node0x13251e0 -> Node0x1325250;
	Node0x1325250 -> Node0x13252c0;
	Node0x13252c0 -> Node0x1325330;
	Node0x1325330 -> Node0x12c5268;
	Node0x12c5268 -> Node0x13257d0;
	Node0x13257d0 -> Node0x1325820;
edge [color=red]
	Node0x1324460 -> Node0x1324b10;
	Node0x1324bd0 -> Node0x1324c40;
	Node0x1324cb0 -> Node0x1324df0;
	Node0x1324df0 -> Node0x1324e60;
	Node0x1324d50 -> Node0x1324ed0;
	Node0x1324ed0 -> Node0x1324f40;
	Node0x1324bd0 -> Node0x1324fb0;
	Node0x1325020 -> Node0x1325090;
	Node0x1324c40 -> Node0x1325090;
	Node0x1325090 -> Node0x1325100;
	Node0x1324cb0 -> Node0x1325100;
	Node0x1325100 -> Node0x1325170;
	Node0x1324b10 -> Node0x1325170;
	Node0x1325170 -> Node0x13251e0;
	Node0x1324f40 -> Node0x13251e0;
	Node0x13251e0 -> Node0x1325250;
	Node0x1324fb0 -> Node0x1325250;
	Node0x1325250 -> Node0x13252c0;
	Node0x1324e60 -> Node0x13252c0;
	Node0x13252c0 -> Node0x1325330;
	Node0x1325330 -> Node0x12c5268;
	Node0x12c5268 -> Node0x13257d0;
}
