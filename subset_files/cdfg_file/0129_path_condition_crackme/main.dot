digraph "DFG for'main' function" {
	Node0x1e8d688[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1e8d738[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1e8d7c8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1e8dc28[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1e8dd08[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1e8de28[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1e8e060[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1e8e118[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1e8f088[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1e8f710[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x1e8f780[shape=record, label="  %9 = and i32 %7, %6"];
	Node0x1e8f7f0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1e8f860[shape=record, label="  %11 = or i32 %7, %6"];
	Node0x1e8f8d0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1e8f940[shape=record, label="  %13 = shl i32 %9, 1"];
	Node0x1e8f9b0[shape=record, label="  %14 = add i32 %12, %10"];
	Node0x1e8fa20[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x1e8fa90[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x1e8fb00[shape=record, label="  %17 = icmp eq i32 %16, -2"];
	Node0x1e2e9d8[shape=record, label="  %18 = select i1 %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e8fb90[shape=record, label="  %19 = call i32 @puts(i8* nonnull dereferenceable(1) %18) #5"];
	Node0x1e8fde8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1e8ff48[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1e90008[shape=record, label="  ret i32 0"];
	Node0x1e8d688 -> Node0x1e8d738;
	Node0x1e8d738 -> Node0x1e8d7c8;
	Node0x1e8d7c8 -> Node0x1e8dc28;
	Node0x1e8dc28 -> Node0x1e8dd08;
	Node0x1e8dd08 -> Node0x1e8de28;
	Node0x1e8de28 -> Node0x1e8e060;
	Node0x1e8e060 -> Node0x1e8e118;
	Node0x1e8e118 -> Node0x1e8f088;
	Node0x1e8f088 -> Node0x1e8f710;
	Node0x1e8f710 -> Node0x1e8f780;
	Node0x1e8f780 -> Node0x1e8f7f0;
	Node0x1e8f7f0 -> Node0x1e8f860;
	Node0x1e8f860 -> Node0x1e8f8d0;
	Node0x1e8f8d0 -> Node0x1e8f940;
	Node0x1e8f940 -> Node0x1e8f9b0;
	Node0x1e8f9b0 -> Node0x1e8fa20;
	Node0x1e8fa20 -> Node0x1e8fa90;
	Node0x1e8fa90 -> Node0x1e8fb00;
	Node0x1e8fb00 -> Node0x1e2e9d8;
	Node0x1e2e9d8 -> Node0x1e8fb90;
	Node0x1e8fb90 -> Node0x1e8fde8;
	Node0x1e8fde8 -> Node0x1e8ff48;
	Node0x1e8ff48 -> Node0x1e90008;
edge [color=red]
	Node0x1e8d688 -> Node0x1e8d7c8;
	Node0x1e8d7c8 -> Node0x1e8dc28;
	Node0x1e8d738 -> Node0x1e8dd08;
	Node0x1e8dd08 -> Node0x1e8de28;
	Node0x1e8d688 -> Node0x1e8e060;
	Node0x1e8d738 -> Node0x1e8e060;
	Node0x1e8d688 -> Node0x1e8e118;
	Node0x1e8d738 -> Node0x1e8f088;
	Node0x1e8f088 -> Node0x1e8f710;
	Node0x1e8e118 -> Node0x1e8f710;
	Node0x1e8f088 -> Node0x1e8f780;
	Node0x1e8e118 -> Node0x1e8f780;
	Node0x1e8f780 -> Node0x1e8f7f0;
	Node0x1e8f088 -> Node0x1e8f860;
	Node0x1e8e118 -> Node0x1e8f860;
	Node0x1e8f860 -> Node0x1e8f8d0;
	Node0x1e8f780 -> Node0x1e8f940;
	Node0x1e8f8d0 -> Node0x1e8f9b0;
	Node0x1e8f7f0 -> Node0x1e8f9b0;
	Node0x1e8f9b0 -> Node0x1e8fa20;
	Node0x1e8f710 -> Node0x1e8fa20;
	Node0x1e8fa20 -> Node0x1e8fa90;
	Node0x1e8f940 -> Node0x1e8fa90;
	Node0x1e8fa90 -> Node0x1e8fb00;
	Node0x1e8fb00 -> Node0x1e2e9d8;
	Node0x1e2e9d8 -> Node0x1e8fb90;
	Node0x1e8dd08 -> Node0x1e8fde8;
	Node0x1e8d7c8 -> Node0x1e8ff48;
}
