digraph "DFG for'crackme' function" {
	Node0x17c54b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x17c5b60[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x17c5c20[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x17c5c90[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x17c5d00[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0x17c5d70[shape=record, label="  %8 = or i32 %5, %0"];
	Node0x17c5e10[shape=record, label="  %9 = shl i32 %0, 2"];
	Node0x17c5e80[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x17c5ef0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x17c5f60[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x17c5fd0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x17c6070[shape=record, label="  %14 = mul i32 %3, -7"];
	Node0x17c60e0[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x17c6150[shape=record, label="  %16 = add i32 %9, %15"];
	Node0x17c61c0[shape=record, label="  %17 = sub i32 %16, %6"];
	Node0x17c6230[shape=record, label="  %18 = add i32 %17, %7"];
	Node0x17c62a0[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x17c6310[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x17c6380[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0x17c63f0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x17c6460[shape=record, label="  %23 = icmp eq i32 %22, %4"];
	Node0x1766268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x17c6900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x17c6950[shape=record, label="  ret void"];
	Node0x17c54b0 -> Node0x17c5b60;
	Node0x17c5b60 -> Node0x17c5c20;
	Node0x17c5c20 -> Node0x17c5c90;
	Node0x17c5c90 -> Node0x17c5d00;
	Node0x17c5d00 -> Node0x17c5d70;
	Node0x17c5d70 -> Node0x17c5e10;
	Node0x17c5e10 -> Node0x17c5e80;
	Node0x17c5e80 -> Node0x17c5ef0;
	Node0x17c5ef0 -> Node0x17c5f60;
	Node0x17c5f60 -> Node0x17c5fd0;
	Node0x17c5fd0 -> Node0x17c6070;
	Node0x17c6070 -> Node0x17c60e0;
	Node0x17c60e0 -> Node0x17c6150;
	Node0x17c6150 -> Node0x17c61c0;
	Node0x17c61c0 -> Node0x17c6230;
	Node0x17c6230 -> Node0x17c62a0;
	Node0x17c62a0 -> Node0x17c6310;
	Node0x17c6310 -> Node0x17c6380;
	Node0x17c6380 -> Node0x17c63f0;
	Node0x17c63f0 -> Node0x17c6460;
	Node0x17c6460 -> Node0x1766268;
	Node0x1766268 -> Node0x17c6900;
	Node0x17c6900 -> Node0x17c6950;
edge [color=red]
	Node0x17c54b0 -> Node0x17c5b60;
	Node0x17c5c20 -> Node0x17c5c90;
	Node0x17c5c20 -> Node0x17c5d70;
	Node0x17c5e80 -> Node0x17c5ef0;
	Node0x17c5f60 -> Node0x17c5fd0;
	Node0x17c54b0 -> Node0x17c6070;
	Node0x17c5e10 -> Node0x17c6150;
	Node0x17c60e0 -> Node0x17c6150;
	Node0x17c6150 -> Node0x17c61c0;
	Node0x17c5c90 -> Node0x17c61c0;
	Node0x17c61c0 -> Node0x17c6230;
	Node0x17c5d00 -> Node0x17c6230;
	Node0x17c6230 -> Node0x17c62a0;
	Node0x17c5d70 -> Node0x17c62a0;
	Node0x17c62a0 -> Node0x17c6310;
	Node0x17c5fd0 -> Node0x17c6310;
	Node0x17c6310 -> Node0x17c6380;
	Node0x17c5ef0 -> Node0x17c6380;
	Node0x17c6380 -> Node0x17c63f0;
	Node0x17c6070 -> Node0x17c63f0;
	Node0x17c63f0 -> Node0x17c6460;
	Node0x17c5b60 -> Node0x17c6460;
	Node0x17c6460 -> Node0x1766268;
	Node0x1766268 -> Node0x17c6900;
}
