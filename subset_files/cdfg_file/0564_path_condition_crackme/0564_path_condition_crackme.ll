; ModuleID = '../.././c_source_file/0564_path_condition_crackme.c'
source_filename = "../.././c_source_file/0564_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = xor i32 %5, -1
  %13 = and i32 %12, %4
  %14 = xor i32 %13, %3
  %15 = shl i32 %14, 1
  %16 = sub i32 %11, %15
  %17 = or i32 %1, %0
  %18 = and i32 %17, %10
  %19 = and i32 %2, %1
  %20 = and i32 %19, %0
  %21 = xor i32 %0, -1
  %22 = and i32 %9, %21
  %23 = or i32 %20, %22
  %24 = and i32 %2, %0
  %25 = or i32 %24, %1
  %26 = or i32 %7, %0
  %27 = xor i32 %24, %26
  %28 = xor i32 %2, -1
  %29 = xor i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %28, %30
  %32 = or i32 %24, %7
  %33 = xor i32 %9, %0
  %34 = and i32 %28, %1
  %35 = xor i32 %34, %0
  %36 = xor i32 %24, -1
  %37 = and i32 %36, %1
  %38 = or i32 %28, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %39, %1
  %41 = or i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %29, %42
  %44 = or i32 %29, %28
  %45 = shl i32 %44, 1
  %46 = xor i32 %8, -1
  %47 = add i32 %8, 1
  %48 = or i32 %8, %28
  %49 = and i32 %28, %0
  %50 = or i32 %49, %7
  %51 = xor i32 %19, -1
  %52 = xor i32 %49, %51
  %53 = shl i32 %52, 1
  %54 = xor i32 %34, -1
  %55 = xor i32 %54, %0
  %56 = and i32 %1, %0
  %57 = xor i32 %38, %56
  %58 = xor i32 %49, -1
  %59 = and i32 %58, %7
  %60 = xor i32 %2, %0
  %61 = and i32 %60, %29
  %62 = or i32 %42, %30
  %63 = or i32 %9, %56
  %64 = xor i32 %17, -1
  %65 = shl i32 %64, 1
  %66 = or i32 %2, %1
  %67 = xor i32 %24, %66
  %68 = or i32 %42, %7
  %69 = and i32 %51, %21
  %70 = xor i32 %38, %1
  %71 = or i32 %8, %2
  %72 = xor i32 %60, -1
  %73 = and i32 %72, %46
  %74 = or i32 %24, %30
  %75 = add i32 %60, 1
  %76 = or i32 %10, %0
  %77 = and i32 %17, %2
  %78 = and i32 %17, %72
  %79 = or i32 %28, %1
  %80 = or i32 %79, %0
  %81 = and i32 %36, %7
  %82 = or i32 %60, %64
  %83 = or i32 %39, %30
  %84 = xor i32 %22, -1
  %85 = xor i32 %20, %84
  %86 = xor i32 %79, %0
  %87 = and i32 %66, %21
  %88 = shl i32 %24, 1
  %89 = or i32 %64, %2
  %90 = or i32 %56, %2
  %91 = and i32 %66, %0
  %92 = or i32 %28, %30
  %93 = and i32 %7, %2
  %94 = and i32 %93, %0
  %95 = or i32 %94, %33
  %96 = xor i32 %26, %2
  %97 = and i32 %26, %72
  %98 = xor i32 %66, %56
  %99 = add i32 %34, 1
  %100 = and i32 %28, %46
  %101 = and i32 %29, %72
  %102 = or i32 %56, %42
  %103 = or i32 %24, %64
  %104 = and i32 %93, %21
  %105 = or i32 %9, %21
  %106 = xor i32 %104, %105
  %107 = xor i32 %20, %33
  %108 = and i32 %29, %58
  %109 = shl i32 %108, 1
  %110 = xor i32 %49, %79
  %111 = shl i32 %110, 1
  %112 = and i32 %60, %26
  %113 = xor i32 %66, -1
  %114 = or i32 %24, %113
  %115 = shl i32 %114, 1
  %116 = and i32 %60, %30
  %117 = and i32 %19, %21
  %118 = or i32 %117, %91
  %119 = and i32 %29, %2
  %120 = or i32 %34, %8
  %121 = or i32 %39, %1
  %122 = xor i32 %8, %54
  %123 = and i32 %29, %28
  %124 = and i32 %26, %2
  %125 = or i32 %9, %0
  %126 = xor i32 %94, %125
  %127 = shl i32 %126, 2
  %128 = or i32 %28, %64
  %129 = xor i32 %125, -1
  %130 = or i32 %94, %129
  %131 = and i32 %10, %0
  %132 = shl i32 %131, 1
  %133 = add i32 %38, 1
  %134 = add i32 %96, 1
  %135 = or i32 %60, %1
  %136 = or i32 %34, %0
  %137 = xor i32 %94, %136
  %138 = or i32 %51, %0
  %139 = shl i32 %138, 1
  %140 = xor i32 %79, -1
  %141 = xor i32 %140, %0
  %142 = and i32 %79, %0
  %143 = or i32 %29, %39
  %144 = or i32 %29, %2
  %145 = and i32 %113, %21
  %146 = shl i32 %145, 2
  %147 = and i32 %34, %21
  %148 = mul i32 %147, 10
  %149 = and i32 %113, %0
  %150 = and i32 %34, %0
  %151 = mul i32 %150, 11
  %152 = and i32 %140, %21
  %153 = shl i32 %117, 1
  %154 = and i32 %140, %0
  %155 = shl i32 %154, 1
  %156 = and i32 %5, %4
  %157 = xor i32 %4, %3
  %158 = xor i32 %157, -1
  %159 = or i32 %156, %158
  %160 = or i32 %4, %3
  %161 = xor i32 %160, -1
  %162 = xor i32 %5, %3
  %163 = xor i32 %162, -1
  %164 = or i32 %163, %161
  %165 = xor i32 %3, -1
  %166 = and i32 %165, %4
  %167 = xor i32 %166, -1
  %168 = and i32 %167, %5
  %169 = or i32 %166, %12
  %170 = or i32 %166, %5
  %171 = or i32 %157, %5
  %172 = and i32 %4, %3
  %173 = or i32 %5, %4
  %174 = xor i32 %173, %172
  %175 = xor i32 %162, %4
  %176 = or i32 %165, %4
  %177 = xor i32 %176, -1
  %178 = or i32 %162, %177
  %179 = xor i32 %173, -1
  %180 = or i32 %179, %165
  %181 = shl i32 %180, 1
  %182 = and i32 %160, %12
  %183 = shl i32 %182, 1
  %184 = xor i32 %172, -1
  %185 = xor i32 %5, %4
  %186 = and i32 %185, %184
  %187 = xor i32 %185, -1
  %188 = and i32 %157, %187
  %189 = and i32 %5, %3
  %190 = xor i32 %189, %4
  %191 = or i32 %187, %177
  %192 = xor i32 %189, -1
  %193 = xor i32 %177, %5
  %194 = and i32 %165, %5
  %195 = and i32 %194, %4
  %196 = or i32 %165, %5
  %197 = xor i32 %4, -1
  %198 = xor i32 %196, %197
  %199 = xor i32 %198, %195
  %200 = or i32 %166, %187
  %201 = or i32 %195, %175
  %202 = or i32 %156, %161
  %203 = or i32 %189, %197
  %204 = shl i32 %203, 1
  %205 = or i32 %13, %158
  %206 = and i32 %160, %187
  %207 = or i32 %162, %161
  %208 = and i32 %187, %158
  %209 = or i32 %185, %158
  %210 = or i32 %163, %4
  %211 = or i32 %5, %3
  %212 = xor i32 %211, -1
  %213 = xor i32 %212, %4
  %214 = or i32 %156, %157
  %215 = and i32 %189, %197
  %216 = and i32 %211, %4
  %217 = or i32 %215, %216
  %218 = xor i32 %13, -1
  %219 = and i32 %157, %218
  %220 = and i32 %185, %3
  %221 = and i32 %12, %3
  %222 = or i32 %156, %221
  %223 = and i32 %162, %184
  %224 = xor i32 %156, %160
  %225 = or i32 %185, %157
  %226 = xor i32 %221, -1
  %227 = xor i32 %226, %4
  %228 = and i32 %12, %167
  %229 = or i32 %162, %4
  %230 = and i32 %194, %197
  %231 = or i32 %162, %197
  %232 = xor i32 %230, %231
  %233 = xor i32 %156, %3
  %234 = and i32 %163, %184
  %235 = xor i32 %192, %4
  %236 = or i32 %192, %197
  %237 = add i32 %211, 1
  %238 = or i32 %157, %12
  %239 = xor i32 %166, %226
  %240 = shl i32 %239, 1
  %241 = xor i32 %175, -1
  %242 = xor i32 %195, %241
  %243 = and i32 %189, %4
  %244 = xor i32 %211, %4
  %245 = xor i32 %244, 2147483647
  %246 = xor i32 %245, %243
  %247 = and i32 %196, %4
  %248 = or i32 %230, %247
  %249 = xor i32 %156, %176
  %250 = xor i32 %156, %226
  %251 = or i32 %172, %179
  %252 = and i32 %197, %5
  %253 = or i32 %252, %165
  %254 = xor i32 %216, 2147483647
  %255 = xor i32 %254, %215
  %256 = or i32 %185, %166
  %257 = or i32 %163, %197
  %258 = and i32 %226, %197
  %259 = or i32 %13, %189
  %260 = shl i32 %259, 1
  %261 = xor i32 %211, %172
  %262 = xor i32 %221, %4
  %263 = or i32 %243, %241
  %264 = and i32 %160, %163
  %265 = add i32 %221, 1
  %266 = xor i32 %247, 2147483647
  %267 = xor i32 %266, %230
  %268 = shl i32 %267, 1
  %269 = and i32 %187, %165
  %270 = and i32 %218, %158
  %271 = or i32 %252, %172
  %272 = or i32 %172, %163
  %273 = or i32 %163, %177
  %274 = xor i32 %163, %4
  %275 = or i32 %13, %157
  %276 = and i32 %162, %4
  %277 = or i32 %215, %276
  %278 = and i32 %157, %12
  %279 = or i32 %194, %197
  %280 = or i32 %194, %172
  %281 = or i32 %185, %3
  %282 = shl i32 %281, 1
  %283 = and i32 %218, %3
  %284 = or i32 %179, %158
  %285 = shl i32 %284, 1
  %286 = and i32 %185, %160
  %287 = and i32 %185, %165
  %288 = and i32 %212, %197
  %289 = and i32 %221, %197
  %290 = and i32 %212, %4
  %291 = shl i32 %290, 3
  %292 = and i32 %221, %4
  %293 = shl i32 %292, 3
  %294 = shl i32 %230, 4
  %295 = shl i32 %215, 3
  %296 = add i32 %8, %51
  %297 = add i32 %296, %89
  %298 = add i32 %297, %77
  %299 = add i32 %298, %71
  %300 = add i32 %299, %48
  %301 = add i32 %300, %76
  %302 = add i32 %301, %106
  %303 = add i32 %302, %228
  %304 = add i32 %303, %243
  %305 = add i32 %304, %283
  %306 = add i32 %305, %257
  %307 = add i32 %306, %244
  %308 = add i32 %307, %249
  %309 = add i32 %308, %202
  %310 = add i32 %309, %174
  %311 = add i32 %310, %164
  %312 = add i32 %311, %246
  %313 = add i32 %312, %255
  %314 = shl i32 %313, 1
  %315 = sub i32 %20, %90
  %316 = sub i32 %315, %86
  %317 = add i32 %316, %32
  %318 = add i32 %317, %27
  %319 = sub i32 %318, %262
  %320 = sub i32 %319, %289
  %321 = sub i32 %320, %213
  %322 = add i32 %321, %175
  %323 = mul i32 %322, 3
  %324 = add i32 %31, %4
  %325 = add i32 %324, %141
  %326 = sub i32 %263, %325
  %327 = mul i32 %326, 5
  %328 = sub i32 %152, %288
  %329 = sub i32 %328, %195
  %330 = mul i32 %329, 6
  %331 = add i32 %236, %170
  %332 = shl i32 %331, 2
  %333 = sub i32 1, %0
  %334 = add i32 %333, %47
  %335 = sub i32 %334, %17
  %336 = add i32 %335, %134
  %337 = add i32 %336, %10
  %338 = sub i32 %337, %65
  %339 = add i32 %338, %41
  %340 = add i32 %339, %58
  %341 = add i32 %340, %75
  %342 = sub i32 %341, %9
  %343 = add i32 %342, %34
  %344 = sub i32 %343, %19
  %345 = sub i32 %344, %92
  %346 = sub i32 %345, %96
  %347 = add i32 %346, %99
  %348 = sub i32 %347, %100
  %349 = add i32 %348, %38
  %350 = add i32 %349, %119
  %351 = add i32 %350, %123
  %352 = sub i32 %351, %124
  %353 = sub i32 %352, %128
  %354 = add i32 %353, %133
  %355 = add i32 %354, %144
  %356 = add i32 %355, %18
  %357 = add i32 %356, %25
  %358 = add i32 %357, %33
  %359 = add i32 %358, %35
  %360 = sub i32 %359, %37
  %361 = add i32 %360, %40
  %362 = add i32 %361, %43
  %363 = sub i32 %362, %45
  %364 = sub i32 %363, %50
  %365 = sub i32 %364, %55
  %366 = add i32 %365, %57
  %367 = add i32 %366, %59
  %368 = add i32 %367, %61
  %369 = add i32 %368, %62
  %370 = add i32 %369, %63
  %371 = add i32 %370, %67
  %372 = sub i32 %371, %68
  %373 = add i32 %372, %69
  %374 = add i32 %373, %70
  %375 = add i32 %374, %73
  %376 = add i32 %375, %74
  %377 = sub i32 %376, %78
  %378 = add i32 %377, %80
  %379 = add i32 %378, %81
  %380 = add i32 %379, %82
  %381 = add i32 %380, %83
  %382 = sub i32 %381, %87
  %383 = sub i32 %382, %88
  %384 = sub i32 %383, %91
  %385 = add i32 %384, %97
  %386 = sub i32 %385, %98
  %387 = sub i32 %386, %101
  %388 = add i32 %387, %102
  %389 = add i32 %388, %103
  %390 = sub i32 %389, %112
  %391 = sub i32 %390, %116
  %392 = sub i32 %391, %120
  %393 = add i32 %392, %121
  %394 = add i32 %393, %122
  %395 = sub i32 %394, %135
  %396 = add i32 %395, %125
  %397 = sub i32 %396, %142
  %398 = sub i32 %397, %143
  %399 = add i32 %398, %149
  %400 = add i32 %399, %23
  %401 = sub i32 %400, %53
  %402 = add i32 %401, %85
  %403 = sub i32 %402, %95
  %404 = sub i32 %403, %107
  %405 = sub i32 %404, %109
  %406 = sub i32 %405, %111
  %407 = sub i32 %406, %115
  %408 = add i32 %407, %118
  %409 = sub i32 %408, %130
  %410 = sub i32 %409, %132
  %411 = sub i32 %410, %137
  %412 = sub i32 %411, %139
  %413 = sub i32 %412, %146
  %414 = add i32 %413, %148
  %415 = add i32 %414, %151
  %416 = sub i32 %415, %153
  %417 = sub i32 %416, %155
  %418 = add i32 %417, %157
  %419 = add i32 %418, %161
  %420 = add i32 %419, %166
  %421 = add i32 %420, %184
  %422 = sub i32 %421, %176
  %423 = sub i32 %422, %127
  %424 = add i32 %423, %168
  %425 = add i32 %424, %169
  %426 = add i32 %425, %171
  %427 = add i32 %426, %192
  %428 = sub i32 %427, %193
  %429 = add i32 %428, %211
  %430 = add i32 %429, %237
  %431 = sub i32 %430, %238
  %432 = add i32 %431, %265
  %433 = sub i32 %432, %278
  %434 = sub i32 %433, %159
  %435 = add i32 %434, %178
  %436 = sub i32 %435, %183
  %437 = add i32 %436, %186
  %438 = sub i32 %437, %188
  %439 = sub i32 %438, %190
  %440 = add i32 %439, %191
  %441 = add i32 %440, %200
  %442 = add i32 %441, %205
  %443 = add i32 %442, %206
  %444 = add i32 %443, %207
  %445 = add i32 %444, %208
  %446 = sub i32 %445, %209
  %447 = add i32 %446, %210
  %448 = sub i32 %447, %214
  %449 = sub i32 %448, %219
  %450 = sub i32 %449, %220
  %451 = sub i32 %450, %216
  %452 = sub i32 %451, %222
  %453 = sub i32 %452, %223
  %454 = sub i32 %453, %224
  %455 = add i32 %454, %225
  %456 = sub i32 %455, %227
  %457 = add i32 %456, %229
  %458 = sub i32 %457, %233
  %459 = sub i32 %458, %234
  %460 = sub i32 %459, %235
  %461 = sub i32 %460, %250
  %462 = add i32 %461, %251
  %463 = add i32 %462, %253
  %464 = add i32 %463, %256
  %465 = sub i32 %464, %258
  %466 = add i32 %465, %261
  %467 = add i32 %466, %264
  %468 = add i32 %467, %269
  %469 = sub i32 %468, %270
  %470 = sub i32 %469, %271
  %471 = sub i32 %470, %272
  %472 = sub i32 %471, %273
  %473 = sub i32 %472, %274
  %474 = sub i32 %473, %275
  %475 = sub i32 %474, %279
  %476 = add i32 %475, %280
  %477 = sub i32 %476, %286
  %478 = add i32 %477, %287
  %479 = sub i32 %478, %181
  %480 = add i32 %479, %199
  %481 = sub i32 %480, %201
  %482 = sub i32 %481, %204
  %483 = sub i32 %482, %217
  %484 = sub i32 %483, %232
  %485 = sub i32 %484, %240
  %486 = add i32 %485, %242
  %487 = sub i32 %486, %248
  %488 = sub i32 %487, %260
  %489 = add i32 %488, %277
  %490 = sub i32 %489, %282
  %491 = sub i32 %490, %285
  %492 = sub i32 %491, %291
  %493 = add i32 %492, %293
  %494 = sub i32 %493, %294
  %495 = sub i32 %494, %295
  %496 = add i32 %495, %332
  %497 = sub i32 %496, %268
  %498 = add i32 %497, %330
  %499 = add i32 %498, %327
  %500 = add i32 %499, %323
  %501 = add i32 %500, %314
  %502 = icmp eq i32 %16, %501
  %503 = select i1 %502, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %504 = tail call i32 @puts(i8* nonnull dereferenceable(1) %503)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
