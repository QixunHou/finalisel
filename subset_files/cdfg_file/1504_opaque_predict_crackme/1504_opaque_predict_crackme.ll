; ModuleID = '../.././c_source_file/1504_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1504_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = or i32 %4, %1
  %7 = xor i32 %6, -1
  %8 = or i32 %5, %7
  %9 = or i32 %1, %0
  %10 = and i32 %9, %2
  %11 = sub i32 %8, %10
  %12 = and i32 %1, %0
  %13 = or i32 %2, %1
  %14 = xor i32 %13, -1
  %15 = or i32 %12, %14
  %16 = xor i32 %1, -1
  %17 = or i32 %5, %16
  %18 = xor i32 %2, %0
  %19 = xor i32 %18, -1
  %20 = and i32 %9, %19
  %21 = or i32 %5, %1
  %22 = xor i32 %13, %12
  %23 = xor i32 %0, -1
  %24 = xor i32 %2, %1
  %25 = or i32 %24, %23
  %26 = and i32 %16, %0
  %27 = or i32 %24, %26
  %28 = or i32 %16, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %24, %29
  %31 = and i32 %18, %28
  %32 = or i32 %12, %2
  %33 = shl i32 %32, 1
  %34 = or i32 %4, %0
  %35 = or i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = add i32 %35, 1
  %38 = xor i32 %12, -1
  %39 = and i32 %19, %38
  %40 = or i32 %6, %23
  %41 = xor i32 %1, %0
  %42 = and i32 %35, %41
  %43 = and i32 %2, %0
  %44 = or i32 %43, %41
  %45 = shl i32 %44, 1
  %46 = xor i32 %9, -1
  %47 = or i32 %24, %46
  %48 = or i32 %41, %36
  %49 = xor i32 %38, %2
  %50 = xor i32 %24, -1
  %51 = add i32 %24, 1
  %52 = or i32 %12, %7
  %53 = and i32 %4, %1
  %54 = and i32 %35, %1
  %55 = or i32 %18, %46
  %56 = xor i32 %26, -1
  %57 = and i32 %24, %56
  %58 = and i32 %16, %2
  %59 = and i32 %58, %0
  %60 = or i32 %16, %2
  %61 = xor i32 %60, -1
  %62 = or i32 %61, %0
  %63 = xor i32 %59, %62
  %64 = xor i32 %34, -1
  %65 = shl i32 %64, 1
  %66 = xor i32 %5, -1
  %67 = xor i32 %41, -1
  %68 = and i32 %66, %67
  %69 = or i32 %43, %53
  %70 = shl i32 %69, 1
  %71 = and i32 %35, %67
  %72 = shl i32 %2, 1
  %73 = xor i32 %43, -1
  %74 = xor i32 %73, %1
  %75 = shl i32 %67, 1
  %76 = or i32 %19, %46
  %77 = shl i32 %76, 1
  %78 = xor i32 %53, -1
  %79 = xor i32 %78, %0
  %80 = or i32 %36, %67
  %81 = or i32 %43, %14
  %82 = or i32 %78, %23
  %83 = add i32 %43, 1
  %84 = xor i32 %43, %28
  %85 = or i32 %26, %2
  %86 = and i32 %4, %56
  %87 = shl i32 %86, 1
  %88 = and i32 %2, %1
  %89 = and i32 %88, %0
  %90 = and i32 %24, %23
  %91 = or i32 %89, %90
  %92 = and i32 %4, %67
  %93 = and i32 %4, %38
  %94 = and i32 %88, %23
  %95 = and i32 %24, %0
  %96 = xor i32 %95, -1
  %97 = xor i32 %94, %96
  %98 = xor i32 %7, %0
  %99 = xor i32 %28, %2
  %100 = xor i32 %43, %78
  %101 = xor i32 %26, %2
  %102 = or i32 %24, %12
  %103 = xor i32 %60, %0
  %104 = or i32 %59, %103
  %105 = shl i32 %104, 2
  %106 = or i32 %50, %29
  %107 = and i32 %9, %50
  %108 = and i32 %78, %0
  %109 = shl i32 %108, 1
  %110 = or i32 %50, %0
  %111 = or i32 %13, %0
  %112 = and i32 %19, %67
  %113 = xor i32 %24, %23
  %114 = xor i32 %113, %59
  %115 = and i32 %18, %1
  %116 = and i32 %78, %23
  %117 = add i32 %6, 1
  %118 = and i32 %34, %16
  %119 = xor i32 %88, -1
  %120 = and i32 %119, %0
  %121 = shl i32 %119, 1
  %122 = or i32 %88, %23
  %123 = and i32 %58, %23
  %124 = and i32 %60, %0
  %125 = xor i32 %124, -1
  %126 = xor i32 %123, %125
  %127 = or i32 %119, %23
  %128 = xor i32 %119, %0
  %129 = or i32 %12, %50
  %130 = or i32 %64, %1
  %131 = and i32 %56, %2
  %132 = shl i32 %131, 2
  %133 = xor i32 %123, %25
  %134 = xor i32 %56, %2
  %135 = or i32 %50, %46
  %136 = or i32 %5, %41
  %137 = and i32 %73, %16
  %138 = shl i32 %137, 1
  %139 = or i32 %43, %16
  %140 = or i32 %18, %16
  %141 = shl i32 %140, 1
  %142 = and i32 %18, %16
  %143 = and i32 %67, %2
  %144 = or i32 %36, %16
  %145 = and i32 %73, %1
  %146 = and i32 %35, %16
  %147 = and i32 %18, %56
  %148 = shl i32 %147, 1
  %149 = add i32 %5, 1
  %150 = or i32 %12, %64
  %151 = or i32 %88, %26
  %152 = xor i32 %12, %2
  %153 = or i32 %53, %23
  %154 = or i32 %18, %67
  %155 = or i32 %5, %88
  %156 = and i32 %41, %19
  %157 = xor i32 %5, %6
  %158 = or i32 %19, %1
  %159 = or i32 %7, %23
  %160 = and i32 %41, %4
  %161 = and i32 %28, %4
  %162 = shl i32 %161, 1
  %163 = xor i32 %9, %2
  %164 = xor i32 %6, %0
  %165 = and i32 %28, %19
  %166 = and i32 %38, %2
  %167 = shl i32 %166, 1
  %168 = xor i32 %66, %1
  %169 = and i32 %18, %67
  %170 = shl i32 %169, 1
  %171 = xor i32 %35, %12
  %172 = or i32 %14, %0
  %173 = xor i32 %26, %119
  %174 = and i32 %9, %4
  %175 = and i32 %6, %0
  %176 = and i32 %50, %23
  %177 = and i32 %13, %23
  %178 = xor i32 %177, 1073741823
  %179 = xor i32 %178, %89
  %180 = and i32 %19, %1
  %181 = xor i32 %26, %78
  %182 = or i32 %53, %0
  %183 = xor i32 %64, %1
  %184 = xor i32 %34, %12
  %185 = or i32 %123, %124
  %186 = and i32 %50, %56
  %187 = xor i32 %90, -1
  %188 = xor i32 %89, %187
  %189 = xor i32 %13, %0
  %190 = or i32 %89, %189
  %191 = or i32 %41, %19
  %192 = or i32 %43, %67
  %193 = and i32 %19, %16
  %194 = and i32 %19, %56
  %195 = or i32 %14, %23
  %196 = or i32 %13, %23
  %197 = or i32 %4, %67
  %198 = or i32 %43, %1
  %199 = or i32 %18, %41
  %200 = shl i32 %199, 1
  %201 = and i32 %41, %73
  %202 = xor i32 %5, %119
  %203 = and i32 %18, %41
  %204 = or i32 %36, %1
  %205 = or i32 %53, %26
  %206 = and i32 %41, %66
  %207 = or i32 %19, %67
  %208 = or i32 %43, %29
  %209 = xor i32 %53, %0
  %210 = or i32 %26, %50
  %211 = and i32 %53, %23
  %212 = mul i32 %211, -14
  %213 = and i32 %14, %0
  %214 = and i32 %53, %0
  %215 = mul i32 %214, 6
  %216 = and i32 %7, %23
  %217 = mul i32 %216, 7
  %218 = shl i32 %94, 3
  %219 = and i32 %7, %0
  %220 = mul i32 %219, 17
  %221 = shl i32 %89, 2
  %222 = add i32 %88, %29
  %223 = add i32 %222, %5
  %224 = add i32 %223, %177
  %225 = add i32 %224, %189
  %226 = add i32 %225, %168
  %227 = add i32 %226, %157
  %228 = add i32 %227, %155
  %229 = add i32 %228, %130
  %230 = add i32 %229, %116
  %231 = add i32 %230, %102
  %232 = add i32 %231, %82
  %233 = add i32 %232, %79
  %234 = add i32 %233, %55
  %235 = add i32 %234, %39
  %236 = add i32 %235, %22
  %237 = add i32 %236, %21
  %238 = add i32 %237, %15
  %239 = add i32 %238, %190
  %240 = shl i32 %239, 1
  %241 = add i32 %181, %111
  %242 = add i32 %241, %74
  %243 = sub i32 %48, %242
  %244 = mul i32 %243, 3
  %245 = add i32 %90, %154
  %246 = add i32 %245, %179
  %247 = shl i32 %246, 2
  %248 = add i32 %80, %26
  %249 = sub i32 %97, %248
  %250 = mul i32 %249, 5
  %251 = sub i32 -2, %0
  %252 = add i32 %251, %4
  %253 = add i32 %252, %12
  %254 = add i32 %253, %13
  %255 = sub i32 %254, %34
  %256 = add i32 %255, %37
  %257 = add i32 %256, %49
  %258 = add i32 %257, %51
  %259 = sub i32 %258, %53
  %260 = sub i32 %259, %72
  %261 = sub i32 %260, %75
  %262 = add i32 %261, %35
  %263 = add i32 %262, %83
  %264 = sub i32 %263, %85
  %265 = sub i32 %264, %92
  %266 = sub i32 %265, %93
  %267 = sub i32 %266, %99
  %268 = sub i32 %267, %101
  %269 = add i32 %268, %117
  %270 = add i32 %269, %134
  %271 = sub i32 %270, %143
  %272 = add i32 %271, %149
  %273 = add i32 %272, %152
  %274 = add i32 %273, %160
  %275 = sub i32 %274, %163
  %276 = sub i32 %275, %174
  %277 = sub i32 %276, %24
  %278 = add i32 %277, %197
  %279 = add i32 %278, %17
  %280 = sub i32 %279, %20
  %281 = add i32 %280, %25
  %282 = add i32 %281, %27
  %283 = sub i32 %282, %30
  %284 = sub i32 %283, %31
  %285 = sub i32 %284, %33
  %286 = sub i32 %285, %40
  %287 = sub i32 %286, %42
  %288 = sub i32 %287, %47
  %289 = add i32 %288, %52
  %290 = add i32 %289, %54
  %291 = sub i32 %290, %57
  %292 = sub i32 %291, %65
  %293 = add i32 %292, %68
  %294 = add i32 %293, %71
  %295 = sub i32 %294, %81
  %296 = sub i32 %295, %84
  %297 = sub i32 %296, %87
  %298 = add i32 %297, %98
  %299 = add i32 %298, %100
  %300 = add i32 %299, %106
  %301 = add i32 %300, %107
  %302 = sub i32 %301, %110
  %303 = add i32 %302, %112
  %304 = sub i32 %303, %115
  %305 = sub i32 %304, %118
  %306 = add i32 %305, %120
  %307 = sub i32 %306, %121
  %308 = add i32 %307, %122
  %309 = sub i32 %308, %127
  %310 = sub i32 %309, %128
  %311 = sub i32 %310, %129
  %312 = sub i32 %311, %132
  %313 = sub i32 %312, %135
  %314 = add i32 %313, %136
  %315 = sub i32 %314, %139
  %316 = add i32 %315, %142
  %317 = sub i32 %316, %144
  %318 = add i32 %317, %145
  %319 = add i32 %318, %146
  %320 = sub i32 %319, %150
  %321 = sub i32 %320, %151
  %322 = add i32 %321, %153
  %323 = add i32 %322, %156
  %324 = add i32 %323, %158
  %325 = sub i32 %324, %159
  %326 = sub i32 %325, %162
  %327 = sub i32 %326, %164
  %328 = add i32 %327, %165
  %329 = sub i32 %328, %167
  %330 = add i32 %329, %171
  %331 = sub i32 %330, %172
  %332 = sub i32 %331, %173
  %333 = add i32 %332, %175
  %334 = add i32 %333, %176
  %335 = sub i32 %334, %180
  %336 = sub i32 %335, %182
  %337 = add i32 %336, %183
  %338 = sub i32 %337, %184
  %339 = sub i32 %338, %186
  %340 = add i32 %339, %191
  %341 = add i32 %340, %192
  %342 = sub i32 %341, %193
  %343 = add i32 %342, %194
  %344 = add i32 %343, %195
  %345 = add i32 %344, %196
  %346 = add i32 %345, %198
  %347 = add i32 %346, %201
  %348 = add i32 %347, %202
  %349 = sub i32 %348, %203
  %350 = add i32 %349, %204
  %351 = sub i32 %350, %205
  %352 = sub i32 %351, %206
  %353 = add i32 %352, %207
  %354 = add i32 %353, %208
  %355 = sub i32 %354, %209
  %356 = add i32 %355, %210
  %357 = add i32 %356, %213
  %358 = sub i32 %357, %45
  %359 = sub i32 %358, %63
  %360 = sub i32 %359, %70
  %361 = sub i32 %360, %77
  %362 = add i32 %361, %91
  %363 = sub i32 %362, %109
  %364 = add i32 %363, %114
  %365 = sub i32 %364, %126
  %366 = sub i32 %365, %133
  %367 = sub i32 %366, %138
  %368 = sub i32 %367, %141
  %369 = sub i32 %368, %148
  %370 = sub i32 %369, %170
  %371 = add i32 %370, %185
  %372 = sub i32 %371, %188
  %373 = sub i32 %372, %200
  %374 = add i32 %373, %212
  %375 = add i32 %374, %215
  %376 = add i32 %375, %217
  %377 = sub i32 %376, %218
  %378 = add i32 %377, %220
  %379 = sub i32 %378, %221
  %380 = sub i32 %379, %105
  %381 = add i32 %380, %244
  %382 = add i32 %381, %250
  %383 = add i32 %382, %247
  %384 = add i32 %383, %240
  %385 = icmp eq i32 %11, %384
  %386 = select i1 %385, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %387 = tail call i32 @puts(i8* nonnull dereferenceable(1) %386)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
