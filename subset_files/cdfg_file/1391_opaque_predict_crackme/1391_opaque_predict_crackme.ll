; ModuleID = '../.././c_source_file/1391_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1391_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = xor i32 %1, -1
  %9 = mul i32 %8, -5
  %10 = sub i32 %9, %7
  %11 = and i32 %8, %2
  %12 = and i32 %11, %0
  %13 = xor i32 %0, -1
  %14 = or i32 %8, %2
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %0
  %17 = xor i32 %12, %16
  %18 = and i32 %1, %0
  %19 = or i32 %2, %1
  %20 = xor i32 %19, %18
  %21 = xor i32 %2, -1
  %22 = or i32 %21, %1
  %23 = or i32 %22, %0
  %24 = xor i32 %18, -1
  %25 = and i32 %21, %24
  %26 = and i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %13
  %29 = or i32 %4, %21
  %30 = and i32 %4, %2
  %31 = xor i32 %22, %18
  %32 = and i32 %21, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %33, %8
  %35 = or i32 %1, %0
  %36 = xor i32 %35, %2
  %37 = or i32 %21, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %1
  %40 = and i32 %21, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %13
  %43 = xor i32 %2, %1
  %44 = or i32 %43, %0
  %45 = and i32 %2, %0
  %46 = shl i32 %45, 1
  %47 = xor i32 %32, %22
  %48 = xor i32 %19, %0
  %49 = or i32 %2, %0
  %50 = and i32 %49, %1
  %51 = shl i32 %50, 1
  %52 = xor i32 %38, %1
  %53 = or i32 %8, %0
  %54 = xor i32 %6, -1
  %55 = and i32 %53, %54
  %56 = and i32 %8, %0
  %57 = or i32 %43, %56
  %58 = and i32 %49, %5
  %59 = xor i32 %43, -1
  %60 = and i32 %35, %59
  %61 = and i32 %6, %53
  %62 = xor i32 %22, -1
  %63 = or i32 %32, %62
  %64 = xor i32 %19, -1
  %65 = or i32 %18, %64
  %66 = or i32 %5, %2
  %67 = xor i32 %45, -1
  %68 = and i32 %4, %67
  %69 = shl i32 %68, 1
  %70 = xor i32 %14, %0
  %71 = or i32 %12, %70
  %72 = or i32 %45, %40
  %73 = and i32 %19, %13
  %74 = and i32 %43, %53
  %75 = and i32 %53, %2
  %76 = and i32 %11, %13
  %77 = and i32 %14, %0
  %78 = xor i32 %77, -1
  %79 = xor i32 %76, %78
  %80 = or i32 %64, %0
  %81 = xor i32 %49, -1
  %82 = or i32 %81, %1
  %83 = and i32 %37, %5
  %84 = or i32 %54, %8
  %85 = xor i32 %53, -1
  %86 = xor i32 %85, %2
  %87 = xor i32 %43, %0
  %88 = or i32 %12, %87
  %89 = xor i32 %35, -1
  %90 = or i32 %54, %89
  %91 = xor i32 %18, %2
  %92 = xor i32 %45, %35
  %93 = or i32 %6, %56
  %94 = and i32 %26, %0
  %95 = xor i32 %94, %87
  %96 = and i32 %27, %0
  %97 = shl i32 %13, 1
  %98 = and i32 %6, %8
  %99 = shl i32 %98, 2
  %100 = and i32 %67, %5
  %101 = or i32 %56, %59
  %102 = and i32 %4, %21
  %103 = or i32 %18, %81
  %104 = or i32 %43, %13
  %105 = xor i32 %76, %104
  %106 = or i32 %81, %8
  %107 = or i32 %18, %2
  %108 = xor i32 %33, %1
  %109 = or i32 %64, %13
  %110 = or i32 %22, %13
  %111 = or i32 %45, %85
  %112 = and i32 %49, %4
  %113 = and i32 %67, %1
  %114 = or i32 %43, %89
  %115 = or i32 %56, %21
  %116 = xor i32 %40, %0
  %117 = and i32 %54, %8
  %118 = or i32 %85, %2
  %119 = xor i32 %26, %0
  %120 = or i32 %59, %13
  %121 = or i32 %21, %89
  %122 = or i32 %45, %89
  %123 = or i32 %4, %2
  %124 = shl i32 %123, 1
  %125 = and i32 %53, %59
  %126 = add i32 %18, 1
  %127 = xor i32 %48, 2147483647
  %128 = xor i32 %127, %94
  %129 = or i32 %45, %64
  %130 = or i32 %76, %77
  %131 = shl i32 %130, 2
  %132 = and i32 %33, %5
  %133 = and i32 %24, %2
  %134 = and i32 %26, %13
  %135 = and i32 %19, %0
  %136 = or i32 %134, %135
  %137 = xor i32 %24, %2
  %138 = or i32 %62, %13
  %139 = and i32 %43, %0
  %140 = xor i32 %139, 2147483647
  %141 = xor i32 %140, %134
  %142 = shl i32 %141, 1
  %143 = xor i32 %56, -1
  %144 = and i32 %43, %143
  %145 = and i32 %54, %1
  %146 = and i32 %35, %2
  %147 = and i32 %35, %21
  %148 = and i32 %37, %8
  %149 = xor i32 %49, %1
  %150 = or i32 %26, %0
  %151 = or i32 %45, %5
  %152 = and i32 %6, %24
  %153 = xor i32 %135, -1
  %154 = xor i32 %134, %153
  %155 = or i32 %26, %13
  %156 = or i32 %40, %13
  %157 = and i32 %41, %13
  %158 = or i32 %18, %54
  %159 = xor i32 %70, -1
  %160 = xor i32 %12, %159
  %161 = or i32 %4, %38
  %162 = and i32 %4, %33
  %163 = or i32 %4, %54
  %164 = or i32 %56, %54
  %165 = or i32 %59, %89
  %166 = or i32 %43, %85
  %167 = or i32 %32, %1
  %168 = and i32 %21, %143
  %169 = and i32 %37, %4
  %170 = or i32 %18, %62
  %171 = shl i32 %170, 1
  %172 = or i32 %6, %18
  %173 = xor i32 %89, %2
  %174 = or i32 %62, %0
  %175 = or i32 %4, %81
  %176 = and i32 %59, %24
  %177 = or i32 %6, %8
  %178 = xor i32 %12, %44
  %179 = or i32 %54, %5
  %180 = or i32 %32, %4
  %181 = xor i32 %49, %18
  %182 = and i32 %22, %0
  %183 = xor i32 %22, %0
  %184 = shl i32 %4, 1
  %185 = and i32 %6, %143
  %186 = and i32 %41, %0
  %187 = xor i32 %56, %27
  %188 = and i32 %54, %143
  %189 = add i32 %45, 1
  %190 = or i32 %18, %21
  %191 = add i32 %53, 1
  %192 = and i32 %59, %143
  %193 = and i32 %59, %13
  %194 = add i32 %40, 1
  %195 = xor i32 %45, %1
  %196 = and i32 %64, %13
  %197 = mul i32 %196, -6
  %198 = and i32 %40, %13
  %199 = and i32 %64, %0
  %200 = shl i32 %199, 2
  %201 = and i32 %40, %0
  %202 = mul i32 %201, -21
  %203 = and i32 %62, %13
  %204 = mul i32 %203, 18
  %205 = and i32 %62, %0
  %206 = shl i32 %205, 1
  %207 = shl i32 %94, 1
  %208 = add i32 %190, %53
  %209 = add i32 %208, %27
  %210 = add i32 %209, %147
  %211 = add i32 %210, %102
  %212 = add i32 %211, %91
  %213 = add i32 %212, %192
  %214 = add i32 %213, %176
  %215 = add i32 %214, %167
  %216 = add i32 %215, %114
  %217 = add i32 %216, %111
  %218 = add i32 %217, %74
  %219 = add i32 %218, %178
  %220 = add i32 %219, %128
  %221 = shl i32 %220, 1
  %222 = add i32 %134, %174
  %223 = sub i32 %82, %222
  %224 = add i32 %223, %23
  %225 = mul i32 %224, 3
  %226 = add i32 %195, %96
  %227 = shl i32 %226, 2
  %228 = add i32 %133, %36
  %229 = mul i32 %228, -5
  %230 = add i32 %1, 1
  %231 = sub i32 %230, %97
  %232 = add i32 %231, %126
  %233 = add i32 %232, %2
  %234 = add i32 %233, %191
  %235 = add i32 %234, %25
  %236 = add i32 %235, %29
  %237 = add i32 %236, %30
  %238 = add i32 %237, %66
  %239 = sub i32 %238, %75
  %240 = sub i32 %239, %26
  %241 = sub i32 %240, %86
  %242 = sub i32 %241, %40
  %243 = add i32 %242, %107
  %244 = sub i32 %243, %115
  %245 = sub i32 %244, %118
  %246 = sub i32 %245, %121
  %247 = sub i32 %246, %137
  %248 = add i32 %247, %19
  %249 = sub i32 %248, %146
  %250 = sub i32 %249, %168
  %251 = sub i32 %250, %173
  %252 = add i32 %251, %59
  %253 = sub i32 %252, %184
  %254 = sub i32 %253, %6
  %255 = add i32 %254, %189
  %256 = add i32 %255, %194
  %257 = sub i32 %256, %20
  %258 = sub i32 %257, %28
  %259 = add i32 %258, %31
  %260 = sub i32 %259, %34
  %261 = add i32 %260, %39
  %262 = sub i32 %261, %42
  %263 = sub i32 %262, %44
  %264 = sub i32 %263, %46
  %265 = add i32 %264, %47
  %266 = sub i32 %265, %48
  %267 = sub i32 %266, %52
  %268 = sub i32 %267, %55
  %269 = add i32 %268, %57
  %270 = add i32 %269, %58
  %271 = add i32 %270, %60
  %272 = add i32 %271, %61
  %273 = add i32 %272, %63
  %274 = add i32 %273, %65
  %275 = add i32 %274, %72
  %276 = add i32 %275, %73
  %277 = add i32 %276, %80
  %278 = sub i32 %277, %83
  %279 = sub i32 %278, %84
  %280 = sub i32 %279, %90
  %281 = sub i32 %280, %92
  %282 = sub i32 %281, %93
  %283 = add i32 %282, %100
  %284 = add i32 %283, %101
  %285 = sub i32 %284, %103
  %286 = add i32 %285, %87
  %287 = sub i32 %286, %106
  %288 = sub i32 %287, %108
  %289 = sub i32 %288, %109
  %290 = sub i32 %289, %110
  %291 = sub i32 %290, %112
  %292 = sub i32 %291, %113
  %293 = add i32 %292, %116
  %294 = sub i32 %293, %117
  %295 = sub i32 %294, %119
  %296 = add i32 %295, %120
  %297 = sub i32 %296, %122
  %298 = sub i32 %297, %124
  %299 = add i32 %298, %125
  %300 = sub i32 %299, %129
  %301 = add i32 %300, %132
  %302 = sub i32 %301, %138
  %303 = add i32 %302, %144
  %304 = sub i32 %303, %145
  %305 = sub i32 %304, %148
  %306 = add i32 %305, %149
  %307 = add i32 %306, %150
  %308 = sub i32 %307, %151
  %309 = add i32 %308, %152
  %310 = sub i32 %309, %155
  %311 = sub i32 %310, %156
  %312 = add i32 %311, %157
  %313 = add i32 %312, %158
  %314 = add i32 %313, %161
  %315 = add i32 %314, %162
  %316 = sub i32 %315, %163
  %317 = add i32 %316, %164
  %318 = add i32 %317, %165
  %319 = add i32 %318, %166
  %320 = add i32 %319, %169
  %321 = add i32 %320, %172
  %322 = sub i32 %321, %175
  %323 = add i32 %322, %177
  %324 = add i32 %323, %179
  %325 = sub i32 %324, %180
  %326 = add i32 %325, %181
  %327 = sub i32 %326, %182
  %328 = add i32 %327, %183
  %329 = sub i32 %328, %185
  %330 = add i32 %329, %186
  %331 = sub i32 %330, %187
  %332 = sub i32 %331, %188
  %333 = sub i32 %332, %193
  %334 = add i32 %333, %198
  %335 = add i32 %334, %17
  %336 = sub i32 %335, %51
  %337 = sub i32 %336, %69
  %338 = sub i32 %337, %71
  %339 = add i32 %338, %79
  %340 = sub i32 %339, %88
  %341 = add i32 %340, %95
  %342 = sub i32 %341, %99
  %343 = sub i32 %342, %105
  %344 = add i32 %343, %136
  %345 = sub i32 %344, %154
  %346 = sub i32 %345, %160
  %347 = sub i32 %346, %171
  %348 = add i32 %347, %197
  %349 = sub i32 %348, %200
  %350 = add i32 %349, %202
  %351 = add i32 %350, %204
  %352 = sub i32 %351, %206
  %353 = sub i32 %352, %207
  %354 = add i32 %353, %229
  %355 = sub i32 %354, %131
  %356 = add i32 %355, %227
  %357 = sub i32 %356, %142
  %358 = add i32 %357, %225
  %359 = add i32 %358, %221
  %360 = icmp eq i32 %10, %359
  %361 = select i1 %360, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %362 = tail call i32 @puts(i8* nonnull dereferenceable(1) %361)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
