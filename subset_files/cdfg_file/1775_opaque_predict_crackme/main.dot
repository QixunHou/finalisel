digraph "DFG for'main' function" {
	Node0x1d04a98[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1d04b18[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1d04ba8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1d04c08[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x1d05088[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d07338[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x1d07418[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1d074d8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x1d07588[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1d077e8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x1d078a8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1d08818[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1d08e88[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1d08f80[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x1d09188[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1d092e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1d093f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d094b8[shape=record, label="  ret i32 0"];
	Node0x1d04a98 -> Node0x1d04b18;
	Node0x1d04b18 -> Node0x1d04ba8;
	Node0x1d04ba8 -> Node0x1d04c08;
	Node0x1d04c08 -> Node0x1d05088;
	Node0x1d05088 -> Node0x1d07338;
	Node0x1d07338 -> Node0x1d07418;
	Node0x1d07418 -> Node0x1d074d8;
	Node0x1d074d8 -> Node0x1d07588;
	Node0x1d07588 -> Node0x1d077e8;
	Node0x1d077e8 -> Node0x1d078a8;
	Node0x1d078a8 -> Node0x1d08818;
	Node0x1d08818 -> Node0x1d08e88;
	Node0x1d08e88 -> Node0x1d08f80;
	Node0x1d08f80 -> Node0x1d09188;
	Node0x1d09188 -> Node0x1d092e8;
	Node0x1d092e8 -> Node0x1d093f8;
	Node0x1d093f8 -> Node0x1d094b8;
edge [color=red]
	Node0x1d04a98 -> Node0x1d04c08;
	Node0x1d04c08 -> Node0x1d05088;
	Node0x1d04b18 -> Node0x1d07338;
	Node0x1d07338 -> Node0x1d07418;
	Node0x1d04ba8 -> Node0x1d074d8;
	Node0x1d074d8 -> Node0x1d07588;
	Node0x1d04a98 -> Node0x1d077e8;
	Node0x1d04b18 -> Node0x1d077e8;
	Node0x1d04ba8 -> Node0x1d077e8;
	Node0x1d04a98 -> Node0x1d078a8;
	Node0x1d04b18 -> Node0x1d08818;
	Node0x1d04ba8 -> Node0x1d08e88;
	Node0x1d078a8 -> Node0x1d08f80;
	Node0x1d08818 -> Node0x1d08f80;
	Node0x1d08e88 -> Node0x1d08f80;
	Node0x1d074d8 -> Node0x1d09188;
	Node0x1d07338 -> Node0x1d092e8;
	Node0x1d04c08 -> Node0x1d093f8;
}
