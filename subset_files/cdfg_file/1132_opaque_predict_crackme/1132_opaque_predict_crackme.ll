; ModuleID = '../.././c_source_file/1132_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1132_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %6, %4
  %8 = xor i32 %4, -1
  %9 = or i32 %8, %3
  %10 = xor i32 %1, -1
  %11 = or i32 %10, %0
  %12 = and i32 %11, %2
  %13 = sub i32 %12, %9
  %14 = add i32 %13, %7
  %15 = or i32 %4, %3
  %16 = shl i32 %8, 1
  %17 = shl i32 %15, 2
  %18 = xor i32 %17, -4
  %19 = shl i32 %9, 3
  %20 = xor i32 %19, -8
  %21 = and i32 %8, %3
  %22 = and i32 %4, %3
  %23 = mul i32 %22, -7
  %24 = or i32 %1, %0
  %25 = xor i32 %2, %1
  %26 = and i32 %25, %24
  %27 = and i32 %10, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %28
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %1
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %0
  %36 = and i32 %2, %0
  %37 = xor i32 %36, %24
  %38 = xor i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %29, %39
  %41 = xor i32 %0, -1
  %42 = and i32 %25, %41
  %43 = or i32 %2, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %0
  %46 = and i32 %1, %0
  %47 = or i32 %46, %2
  %48 = and i32 %10, %2
  %49 = and i32 %48, %0
  %50 = xor i32 %25, %0
  %51 = or i32 %49, %50
  %52 = or i32 %32, %1
  %53 = xor i32 %52, -1
  %54 = or i32 %53, %0
  %55 = xor i32 %11, -1
  %56 = or i32 %55, %2
  %57 = and i32 %2, %1
  %58 = and i32 %57, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %42, %59
  %61 = xor i32 %24, -1
  %62 = or i32 %36, %61
  %63 = xor i32 %46, %2
  %64 = shl i32 %63, 1
  %65 = and i32 %34, %41
  %66 = xor i32 %57, -1
  %67 = and i32 %66, %41
  %68 = shl i32 %67, 1
  %69 = or i32 %32, %0
  %70 = xor i32 %61, %2
  %71 = or i32 %46, %44
  %72 = and i32 %32, %28
  %73 = shl i32 %72, 1
  %74 = xor i32 %46, -1
  %75 = xor i32 %74, %2
  %76 = and i32 %29, %10
  %77 = and i32 %30, %1
  %78 = or i32 %10, %2
  %79 = and i32 %78, %41
  %80 = or i32 %49, %79
  %81 = and i32 %32, %0
  %82 = or i32 %81, %53
  %83 = or i32 %52, %0
  %84 = shl i32 %83, 1
  %85 = or i32 %36, %10
  %86 = and i32 %57, %41
  %87 = and i32 %25, %0
  %88 = xor i32 %86, -1
  %89 = xor i32 %87, %88
  %90 = or i32 %27, %2
  %91 = or i32 %36, %55
  %92 = xor i32 %36, %44
  %93 = add i32 %43, 1
  %94 = or i32 %25, %0
  %95 = xor i32 %94, -1
  %96 = or i32 %49, %95
  %97 = and i32 %24, %32
  %98 = xor i32 %25, -1
  %99 = and i32 %11, %98
  %100 = or i32 %29, %10
  %101 = xor i32 %43, %0
  %102 = or i32 %58, %101
  %103 = or i32 %2, %0
  %104 = and i32 %103, %39
  %105 = and i32 %98, %0
  %106 = xor i32 %28, %2
  %107 = and i32 %25, %74
  %108 = xor i32 %69, -1
  %109 = or i32 %38, %108
  %110 = xor i32 %81, -1
  %111 = xor i32 %110, %1
  %112 = and i32 %25, %28
  %113 = or i32 %36, %44
  %114 = xor i32 %57, %0
  %115 = or i32 %81, %57
  %116 = or i32 %34, %0
  %117 = add i32 %25, 1
  %118 = and i32 %69, %10
  %119 = or i32 %43, %0
  %120 = xor i32 %78, %0
  %121 = or i32 %49, %120
  %122 = and i32 %29, %24
  %123 = shl i32 %122, 1
  %124 = or i32 %53, %41
  %125 = or i32 %81, %1
  %126 = and i32 %43, %0
  %127 = xor i32 %36, -1
  %128 = and i32 %127, %1
  %129 = or i32 %61, %2
  %130 = xor i32 %103, -1
  %131 = or i32 %46, %130
  %132 = or i32 %130, %10
  %133 = or i32 %29, %1
  %134 = or i32 %81, %39
  %135 = xor i32 %43, %46
  %136 = and i32 %11, %30
  %137 = or i32 %39, %2
  %138 = shl i32 %137, 1
  %139 = shl i32 %130, 1
  %140 = or i32 %29, %46
  %141 = or i32 %38, %2
  %142 = or i32 %98, %61
  %143 = and i32 %103, %10
  %144 = and i32 %28, %2
  %145 = xor i32 %126, %88
  %146 = and i32 %30, %10
  %147 = xor i32 %81, %66
  %148 = or i32 %57, %27
  %149 = and i32 %29, %38
  %150 = and i32 %110, %39
  %151 = or i32 %36, %39
  %152 = and i32 %38, %32
  %153 = and i32 %38, %30
  %154 = shl i32 %34, 1
  %155 = or i32 %33, %0
  %156 = shl i32 %155, 1
  %157 = or i32 %30, %1
  %158 = or i32 %25, %55
  %159 = or i32 %46, %30
  %160 = and i32 %43, %41
  %161 = and i32 %32, %74
  %162 = xor i32 %55, %2
  %163 = and i32 %110, %1
  %164 = xor i32 %58, %50
  %165 = or i32 %36, %38
  %166 = or i32 %81, %10
  %167 = and i32 %24, %30
  %168 = and i32 %48, %41
  %169 = and i32 %78, %0
  %170 = xor i32 %169, -1
  %171 = xor i32 %168, %170
  %172 = and i32 %29, %11
  %173 = or i32 %43, %41
  %174 = shl i32 %173, 1
  %175 = or i32 %108, %39
  %176 = and i32 %110, %10
  %177 = or i32 %32, %61
  %178 = or i32 %81, %38
  %179 = or i32 %30, %55
  %180 = or i32 %25, %27
  %181 = shl i32 %180, 1
  %182 = xor i32 %130, %1
  %183 = xor i32 %27, %34
  %184 = xor i32 %108, %1
  %185 = xor i32 %53, %0
  %186 = xor i32 %120, 2147483647
  %187 = xor i32 %186, %49
  %188 = shl i32 %187, 1
  %189 = xor i32 %103, %1
  %190 = or i32 %29, %61
  %191 = and i32 %24, %2
  %192 = shl i32 %191, 1
  %193 = xor i32 %11, %2
  %194 = xor i32 %98, %0
  %195 = or i32 %38, %32
  %196 = shl i32 %195, 1
  %197 = and i32 %98, %41
  %198 = shl i32 %197, 1
  %199 = or i32 %34, %41
  %200 = add i32 %1, 1
  %201 = or i32 %30, %39
  %202 = xor i32 %52, %0
  %203 = and i32 %52, %0
  %204 = and i32 %30, %39
  %205 = xor i32 %34, %0
  %206 = shl i32 %205, 1
  %207 = add i32 %57, 1
  %208 = or i32 %25, %46
  %209 = and i32 %38, %2
  %210 = and i32 %69, %38
  %211 = and i32 %24, %98
  %212 = or i32 %32, %55
  %213 = xor i32 %103, %46
  %214 = shl i32 %213, 1
  %215 = or i32 %29, %27
  %216 = or i32 %25, %41
  %217 = xor i32 %216, -1
  %218 = or i32 %168, %217
  %219 = xor i32 %127, %1
  %220 = and i32 %29, %28
  %221 = shl i32 %220, 1
  %222 = or i32 %57, %0
  %223 = and i32 %98, %74
  %224 = xor i32 %36, %1
  %225 = and i32 %30, %74
  %226 = or i32 %25, %61
  %227 = or i32 %29, %39
  %228 = and i32 %103, %1
  %229 = and i32 %32, %39
  %230 = and i32 %11, %32
  %231 = or i32 %46, %53
  %232 = or i32 %46, %32
  %233 = and i32 %74, %2
  %234 = and i32 %103, %38
  %235 = and i32 %66, %0
  %236 = shl i32 %235, 2
  %237 = xor i32 %69, %46
  %238 = or i32 %27, %98
  %239 = xor i32 %49, %94
  %240 = and i32 %69, %39
  %241 = shl i32 %240, 1
  %242 = xor i32 %33, %0
  %243 = or i32 %33, %41
  %244 = or i32 %46, %108
  %245 = and i32 %69, %1
  %246 = xor i32 %81, %1
  %247 = xor i32 %27, %66
  %248 = or i32 %66, %0
  %249 = xor i32 %44, %0
  %250 = and i32 %98, %28
  %251 = shl i32 %33, 1
  %252 = or i32 %52, %41
  %253 = shl i32 %252, 2
  %254 = or i32 %27, %32
  %255 = or i32 %66, %41
  %256 = or i32 %38, %130
  %257 = xor i32 %101, %59
  %258 = xor i32 %69, %1
  %259 = or i32 %44, %41
  %260 = and i32 %127, %10
  %261 = shl i32 %260, 1
  %262 = xor i32 %52, %46
  %263 = and i32 %38, %110
  %264 = xor i32 %79, -1
  %265 = xor i32 %49, %264
  %266 = or i32 %130, %1
  %267 = or i32 %46, %98
  %268 = and i32 %38, %127
  %269 = xor i32 %81, %52
  %270 = and i32 %29, %74
  %271 = or i32 %29, %38
  %272 = xor i32 %168, %216
  %273 = shl i32 %272, 1
  %274 = xor i32 %36, %11
  %275 = or i32 %108, %10
  %276 = and i32 %44, %41
  %277 = mul i32 %276, -6
  %278 = and i32 %33, %41
  %279 = mul i32 %278, -10
  %280 = and i32 %44, %0
  %281 = mul i32 %280, -18
  %282 = and i32 %33, %0
  %283 = shl i32 %282, 4
  %284 = and i32 %53, %41
  %285 = mul i32 %284, -12
  %286 = mul i32 %86, -9
  %287 = and i32 %53, %0
  %288 = mul i32 %287, 11
  %289 = mul i32 %58, -28
  %290 = add i32 %75, %57
  %291 = add i32 %290, %56
  %292 = add i32 %291, %29
  %293 = add i32 %292, %275
  %294 = add i32 %293, %266
  %295 = add i32 %294, %246
  %296 = add i32 %295, %101
  %297 = add i32 %296, %219
  %298 = add i32 %297, %208
  %299 = add i32 %298, %183
  %300 = add i32 %299, %159
  %301 = add i32 %300, %150
  %302 = add i32 %301, %142
  %303 = add i32 %302, %125
  %304 = add i32 %303, %115
  %305 = add i32 %304, %104
  %306 = add i32 %305, %65
  %307 = add i32 %306, %62
  %308 = add i32 %307, %35
  %309 = add i32 %308, %121
  %310 = shl i32 %309, 1
  %311 = sub i32 %163, %131
  %312 = add i32 %311, %105
  %313 = sub i32 %312, %80
  %314 = mul i32 %313, 3
  %315 = add i32 %149, %1
  %316 = sub i32 %315, %21
  %317 = add i32 %316, %145
  %318 = mul i32 %317, 5
  %319 = sub i32 -6, %0
  %320 = add i32 %319, %200
  %321 = sub i32 %320, %38
  %322 = add i32 %321, %55
  %323 = add i32 %322, %28
  %324 = sub i32 %323, %27
  %325 = sub i32 %324, %2
  %326 = add i32 %325, %38
  %327 = add i32 %326, 2
  %328 = add i32 %327, %6
  %329 = sub i32 %328, %47
  %330 = sub i32 %329, %69
  %331 = add i32 %330, %70
  %332 = sub i32 %331, %25
  %333 = add i32 %332, %90
  %334 = add i32 %333, %81
  %335 = add i32 %334, %93
  %336 = sub i32 %335, %97
  %337 = add i32 %336, %106
  %338 = sub i32 %337, %43
  %339 = add i32 %338, %117
  %340 = add i32 %339, %129
  %341 = add i32 %340, %141
  %342 = add i32 %341, %30
  %343 = add i32 %342, %144
  %344 = add i32 %343, %152
  %345 = add i32 %344, %161
  %346 = add i32 %345, %162
  %347 = sub i32 %346, %177
  %348 = add i32 %347, %193
  %349 = add i32 %348, %207
  %350 = sub i32 %349, %209
  %351 = sub i32 %350, %212
  %352 = sub i32 %351, %229
  %353 = sub i32 %352, %230
  %354 = add i32 %353, %232
  %355 = add i32 %354, %233
  %356 = sub i32 %355, %36
  %357 = add i32 %356, %254
  %358 = sub i32 %357, %103
  %359 = add i32 %358, %4
  %360 = add i32 %359, %26
  %361 = sub i32 %360, %31
  %362 = sub i32 %361, %37
  %363 = add i32 %362, %40
  %364 = add i32 %363, %42
  %365 = add i32 %364, %45
  %366 = sub i32 %365, %54
  %367 = sub i32 %366, %64
  %368 = sub i32 %367, %71
  %369 = sub i32 %368, %73
  %370 = sub i32 %369, %76
  %371 = sub i32 %370, %77
  %372 = sub i32 %371, %50
  %373 = sub i32 %372, %82
  %374 = add i32 %373, %85
  %375 = sub i32 %374, %91
  %376 = add i32 %375, %92
  %377 = add i32 %376, %99
  %378 = add i32 %377, %100
  %379 = add i32 %378, %107
  %380 = sub i32 %379, %109
  %381 = add i32 %380, %111
  %382 = add i32 %381, %112
  %383 = sub i32 %382, %113
  %384 = add i32 %383, %114
  %385 = add i32 %384, %116
  %386 = add i32 %385, %118
  %387 = sub i32 %386, %119
  %388 = sub i32 %387, %124
  %389 = add i32 %388, %126
  %390 = sub i32 %389, %128
  %391 = sub i32 %390, %132
  %392 = add i32 %391, %133
  %393 = add i32 %392, %134
  %394 = add i32 %393, %135
  %395 = add i32 %394, %136
  %396 = sub i32 %395, %138
  %397 = sub i32 %396, %139
  %398 = sub i32 %397, %140
  %399 = sub i32 %398, %143
  %400 = add i32 %399, %146
  %401 = add i32 %400, %147
  %402 = add i32 %401, %148
  %403 = add i32 %402, %151
  %404 = sub i32 %403, %153
  %405 = sub i32 %404, %154
  %406 = add i32 %405, %157
  %407 = sub i32 %406, %158
  %408 = sub i32 %407, %160
  %409 = add i32 %408, %165
  %410 = sub i32 %409, %166
  %411 = sub i32 %410, %167
  %412 = add i32 %411, %172
  %413 = sub i32 %412, %175
  %414 = add i32 %413, %176
  %415 = sub i32 %414, %178
  %416 = sub i32 %415, %179
  %417 = add i32 %416, %182
  %418 = sub i32 %417, %184
  %419 = add i32 %418, %185
  %420 = add i32 %419, %189
  %421 = sub i32 %420, %190
  %422 = sub i32 %421, %192
  %423 = sub i32 %422, %194
  %424 = sub i32 %423, %196
  %425 = sub i32 %424, %199
  %426 = sub i32 %425, %201
  %427 = sub i32 %426, %202
  %428 = sub i32 %427, %203
  %429 = add i32 %428, %204
  %430 = add i32 %429, %210
  %431 = sub i32 %430, %211
  %432 = sub i32 %431, %215
  %433 = add i32 %432, %222
  %434 = add i32 %433, %223
  %435 = sub i32 %434, %224
  %436 = add i32 %435, %225
  %437 = sub i32 %436, %226
  %438 = add i32 %437, %227
  %439 = sub i32 %438, %228
  %440 = add i32 %439, %231
  %441 = add i32 %440, %234
  %442 = add i32 %441, %237
  %443 = sub i32 %442, %238
  %444 = add i32 %443, %242
  %445 = sub i32 %444, %243
  %446 = sub i32 %445, %244
  %447 = add i32 %446, %245
  %448 = add i32 %447, %247
  %449 = add i32 %448, %248
  %450 = add i32 %449, %249
  %451 = sub i32 %450, %250
  %452 = sub i32 %451, %251
  %453 = sub i32 %452, %94
  %454 = add i32 %453, %255
  %455 = add i32 %454, %256
  %456 = sub i32 %455, %258
  %457 = add i32 %456, %259
  %458 = add i32 %457, %262
  %459 = add i32 %458, %263
  %460 = sub i32 %459, %267
  %461 = sub i32 %460, %268
  %462 = add i32 %461, %269
  %463 = add i32 %462, %270
  %464 = add i32 %463, %271
  %465 = add i32 %464, %274
  %466 = add i32 %465, %15
  %467 = sub i32 %466, %16
  %468 = add i32 %467, %51
  %469 = add i32 %468, %60
  %470 = sub i32 %469, %68
  %471 = sub i32 %470, %84
  %472 = sub i32 %471, %89
  %473 = sub i32 %472, %96
  %474 = add i32 %473, %102
  %475 = sub i32 %474, %123
  %476 = sub i32 %475, %156
  %477 = add i32 %476, %164
  %478 = sub i32 %477, %171
  %479 = sub i32 %478, %174
  %480 = sub i32 %479, %181
  %481 = sub i32 %480, %198
  %482 = sub i32 %481, %206
  %483 = sub i32 %482, %214
  %484 = sub i32 %483, %218
  %485 = sub i32 %484, %221
  %486 = sub i32 %485, %236
  %487 = sub i32 %486, %239
  %488 = sub i32 %487, %241
  %489 = add i32 %488, %253
  %490 = sub i32 %489, %257
  %491 = sub i32 %490, %261
  %492 = add i32 %491, %265
  %493 = add i32 %492, %277
  %494 = add i32 %493, %279
  %495 = add i32 %494, %281
  %496 = add i32 %495, %283
  %497 = add i32 %496, %285
  %498 = add i32 %497, %286
  %499 = add i32 %498, %288
  %500 = add i32 %499, %289
  %501 = add i32 %500, %23
  %502 = sub i32 %501, %273
  %503 = sub i32 %502, %18
  %504 = sub i32 %503, %20
  %505 = sub i32 %504, %188
  %506 = add i32 %505, %314
  %507 = add i32 %506, %318
  %508 = add i32 %507, %310
  %509 = icmp eq i32 %14, %508
  %510 = select i1 %509, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %511 = tail call i32 @puts(i8* nonnull dereferenceable(1) %510)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
