digraph "DFG for'crackme' function" {
	Node0xc81480[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xc81b30[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0xc81bf0[shape=record, label="  %5 = mul i32 %4, 3"];
	Node0xc81c90[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0xc81d00[shape=record, label="  %7 = or i32 %6, 1"];
	Node0xc81d70[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0xc81de0[shape=record, label="  %9 = xor i32 %8, %0"];
	Node0xc81e50[shape=record, label="  %10 = or i32 %1, %0"];
	Node0xc81ef0[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0xc81f90[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0xc82000[shape=record, label="  %13 = and i32 %8, %0"];
	Node0xc820a0[shape=record, label="  %14 = mul i32 %3, -6"];
	Node0xc82110[shape=record, label="  %15 = add i32 %1, 1"];
	Node0xc82180[shape=record, label="  %16 = add i32 %15, %9"];
	Node0xc821f0[shape=record, label="  %17 = add i32 %16, %7"];
	Node0xc82260[shape=record, label="  %18 = sub i32 %17, %13"];
	Node0xc822d0[shape=record, label="  %19 = add i32 %18, %11"];
	Node0xc82340[shape=record, label="  %20 = add i32 %19, %14"];
	Node0xc823b0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0xc82420[shape=record, label="  %22 = icmp eq i32 %5, %21"];
	Node0xc22268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc828c0[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0xc82910[shape=record, label="  ret void"];
	Node0xc81480 -> Node0xc81b30;
	Node0xc81b30 -> Node0xc81bf0;
	Node0xc81bf0 -> Node0xc81c90;
	Node0xc81c90 -> Node0xc81d00;
	Node0xc81d00 -> Node0xc81d70;
	Node0xc81d70 -> Node0xc81de0;
	Node0xc81de0 -> Node0xc81e50;
	Node0xc81e50 -> Node0xc81ef0;
	Node0xc81ef0 -> Node0xc81f90;
	Node0xc81f90 -> Node0xc82000;
	Node0xc82000 -> Node0xc820a0;
	Node0xc820a0 -> Node0xc82110;
	Node0xc82110 -> Node0xc82180;
	Node0xc82180 -> Node0xc821f0;
	Node0xc821f0 -> Node0xc82260;
	Node0xc82260 -> Node0xc822d0;
	Node0xc822d0 -> Node0xc82340;
	Node0xc82340 -> Node0xc823b0;
	Node0xc823b0 -> Node0xc82420;
	Node0xc82420 -> Node0xc22268;
	Node0xc22268 -> Node0xc828c0;
	Node0xc828c0 -> Node0xc82910;
edge [color=red]
	Node0xc81480 -> Node0xc81b30;
	Node0xc81b30 -> Node0xc81bf0;
	Node0xc81c90 -> Node0xc81d00;
	Node0xc81d70 -> Node0xc81de0;
	Node0xc81e50 -> Node0xc81ef0;
	Node0xc81ef0 -> Node0xc81f90;
	Node0xc81d70 -> Node0xc82000;
	Node0xc81480 -> Node0xc820a0;
	Node0xc82110 -> Node0xc82180;
	Node0xc81de0 -> Node0xc82180;
	Node0xc82180 -> Node0xc821f0;
	Node0xc81d00 -> Node0xc821f0;
	Node0xc821f0 -> Node0xc82260;
	Node0xc82000 -> Node0xc82260;
	Node0xc82260 -> Node0xc822d0;
	Node0xc81ef0 -> Node0xc822d0;
	Node0xc822d0 -> Node0xc82340;
	Node0xc820a0 -> Node0xc82340;
	Node0xc82340 -> Node0xc823b0;
	Node0xc81f90 -> Node0xc823b0;
	Node0xc81bf0 -> Node0xc82420;
	Node0xc823b0 -> Node0xc82420;
	Node0xc82420 -> Node0xc22268;
	Node0xc22268 -> Node0xc828c0;
}
