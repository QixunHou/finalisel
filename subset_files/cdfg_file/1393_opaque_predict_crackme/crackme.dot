digraph "DFG for'crackme' function" {
	Node0x85dbb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x85dc50[shape=record, label="  %4 = add i32 %1, 1"];
	Node0x85dd10[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x85dd80[shape=record, label="  %6 = add i32 %4, %5"];
	Node0x85ddf0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x85de60[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x85ded0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x85df40[shape=record, label="  %10 = or i32 %3, %0"];
	Node0x85dfe0[shape=record, label="  %11 = mul i32 %1, 5"];
	Node0x85e050[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x85e0c0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x85e130[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x85e1a0[shape=record, label="  %15 = xor i32 %10, -1"];
	Node0x85e240[shape=record, label="  %16 = mul i32 %15, -6"];
	Node0x85e2b0[shape=record, label="  %17 = and i32 %3, %0"];
	Node0x85e350[shape=record, label="  %18 = mul i32 %7, -3"];
	Node0x85e3c0[shape=record, label="  %19 = sub i32 %5, %10"];
	Node0x85e430[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x85e4a0[shape=record, label="  %21 = sub i32 %20, %12"];
	Node0x85e510[shape=record, label="  %22 = sub i32 %21, %17"];
	Node0x85e580[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x85e5f0[shape=record, label="  %24 = add i32 %23, %18"];
	Node0x85e660[shape=record, label="  %25 = add i32 %24, %9"];
	Node0x85e6d0[shape=record, label="  %26 = sub i32 %25, %14"];
	Node0x85e740[shape=record, label="  %27 = icmp eq i32 %6, %26"];
	Node0x7fe268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x85ebe0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x85ec30[shape=record, label="  ret void"];
	Node0x85dbb0 -> Node0x85dc50;
	Node0x85dc50 -> Node0x85dd10;
	Node0x85dd10 -> Node0x85dd80;
	Node0x85dd80 -> Node0x85ddf0;
	Node0x85ddf0 -> Node0x85de60;
	Node0x85de60 -> Node0x85ded0;
	Node0x85ded0 -> Node0x85df40;
	Node0x85df40 -> Node0x85dfe0;
	Node0x85dfe0 -> Node0x85e050;
	Node0x85e050 -> Node0x85e0c0;
	Node0x85e0c0 -> Node0x85e130;
	Node0x85e130 -> Node0x85e1a0;
	Node0x85e1a0 -> Node0x85e240;
	Node0x85e240 -> Node0x85e2b0;
	Node0x85e2b0 -> Node0x85e350;
	Node0x85e350 -> Node0x85e3c0;
	Node0x85e3c0 -> Node0x85e430;
	Node0x85e430 -> Node0x85e4a0;
	Node0x85e4a0 -> Node0x85e510;
	Node0x85e510 -> Node0x85e580;
	Node0x85e580 -> Node0x85e5f0;
	Node0x85e5f0 -> Node0x85e660;
	Node0x85e660 -> Node0x85e6d0;
	Node0x85e6d0 -> Node0x85e740;
	Node0x85e740 -> Node0x7fe268;
	Node0x7fe268 -> Node0x85ebe0;
	Node0x85ebe0 -> Node0x85ec30;
edge [color=red]
	Node0x85dc50 -> Node0x85dd80;
	Node0x85dd10 -> Node0x85dd80;
	Node0x85ddf0 -> Node0x85de60;
	Node0x85de60 -> Node0x85ded0;
	Node0x85dbb0 -> Node0x85df40;
	Node0x85e050 -> Node0x85e0c0;
	Node0x85e0c0 -> Node0x85e130;
	Node0x85df40 -> Node0x85e1a0;
	Node0x85e1a0 -> Node0x85e240;
	Node0x85dbb0 -> Node0x85e2b0;
	Node0x85ddf0 -> Node0x85e350;
	Node0x85dd10 -> Node0x85e3c0;
	Node0x85df40 -> Node0x85e3c0;
	Node0x85e3c0 -> Node0x85e430;
	Node0x85dfe0 -> Node0x85e430;
	Node0x85e430 -> Node0x85e4a0;
	Node0x85e050 -> Node0x85e4a0;
	Node0x85e4a0 -> Node0x85e510;
	Node0x85e2b0 -> Node0x85e510;
	Node0x85e510 -> Node0x85e580;
	Node0x85e240 -> Node0x85e580;
	Node0x85e580 -> Node0x85e5f0;
	Node0x85e350 -> Node0x85e5f0;
	Node0x85e5f0 -> Node0x85e660;
	Node0x85ded0 -> Node0x85e660;
	Node0x85e660 -> Node0x85e6d0;
	Node0x85e130 -> Node0x85e6d0;
	Node0x85dd80 -> Node0x85e740;
	Node0x85e6d0 -> Node0x85e740;
	Node0x85e740 -> Node0x7fe268;
	Node0x7fe268 -> Node0x85ebe0;
}
