; ModuleID = '../.././c_source_file/0153_path_condition_crackme.c'
source_filename = "../.././c_source_file/0153_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %2
  %9 = and i32 %8, %0
  %10 = or i32 %7, %2
  %11 = xor i32 %10, %0
  %12 = or i32 %9, %11
  %13 = and i32 %2, %1
  %14 = and i32 %13, %0
  %15 = xor i32 %2, %1
  %16 = xor i32 %15, %0
  %17 = xor i32 %16, -1
  %18 = or i32 %14, %17
  %19 = add i32 %12, %18
  %20 = xor i32 %5, -1
  %21 = or i32 %20, %4
  %22 = sub i32 %21, %19
  %23 = xor i32 %1, %0
  %24 = and i32 %23, %2
  %25 = xor i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %7
  %28 = xor i32 %2, -1
  %29 = and i32 %28, %0
  %30 = or i32 %28, %1
  %31 = xor i32 %29, %30
  %32 = or i32 %2, %0
  %33 = and i32 %1, %0
  %34 = or i32 %33, %28
  %35 = xor i32 %15, -1
  %36 = or i32 %28, %0
  %37 = and i32 %36, %23
  %38 = or i32 %35, %0
  %39 = xor i32 %32, -1
  %40 = and i32 %15, %0
  %41 = xor i32 %0, -1
  %42 = xor i32 %13, 1073741823
  %43 = and i32 %42, %41
  %44 = and i32 %2, %0
  %45 = or i32 %44, %23
  %46 = shl i32 %45, 1
  %47 = and i32 %7, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %48, %2
  %50 = xor i32 %23, -1
  %51 = and i32 %50, %2
  %52 = or i32 %25, %1
  %53 = and i32 %25, %1
  %54 = and i32 %26, %48
  %55 = shl i32 %54, 1
  %56 = and i32 %25, %7
  %57 = shl i32 %56, 1
  %58 = or i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %28, %59
  %61 = or i32 %7, %0
  %62 = and i32 %25, %61
  %63 = and i32 %61, %26
  %64 = and i32 %28, %1
  %65 = xor i32 %64, %0
  %66 = xor i32 %39, %1
  %67 = and i32 %15, %41
  %68 = xor i32 %36, -1
  %69 = or i32 %68, %1
  %70 = or i32 %29, %50
  %71 = or i32 %15, %0
  %72 = or i32 %59, %2
  %73 = shl i32 %72, 1
  %74 = or i32 %64, %0
  %75 = and i32 %25, %58
  %76 = or i32 %23, %2
  %77 = shl i32 %76, 1
  %78 = or i32 %2, %1
  %79 = xor i32 %0, 2147483647
  %80 = xor i32 %79, %78
  %81 = xor i32 %80, %14
  %82 = shl i32 %81, 1
  %83 = xor i32 %48, %2
  %84 = or i32 %44, %59
  %85 = xor i32 %33, -1
  %86 = xor i32 %85, %2
  %87 = or i32 %47, %35
  %88 = xor i32 %30, -1
  %89 = or i32 %29, %88
  %90 = and i32 %61, %35
  %91 = or i32 %33, %35
  %92 = and i32 %58, %2
  %93 = and i32 %30, %0
  %94 = or i32 %33, %68
  %95 = or i32 %29, %23
  %96 = or i32 %29, %13
  %97 = and i32 %13, %41
  %98 = and i32 %78, %0
  %99 = or i32 %97, %98
  %100 = and i32 %15, %58
  %101 = xor i32 %29, %1
  %102 = shl i32 %101, 1
  %103 = xor i32 %44, %78
  %104 = shl i32 %103, 1
  %105 = and i32 %8, %41
  %106 = and i32 %10, %0
  %107 = or i32 %105, %106
  %108 = and i32 %28, %48
  %109 = xor i32 %61, -1
  %110 = or i32 %35, %109
  %111 = xor i32 %61, %2
  %112 = and i32 %61, %2
  %113 = and i32 %15, %85
  %114 = xor i32 %29, -1
  %115 = and i32 %23, %114
  %116 = shl i32 %68, 1
  %117 = or i32 %47, %2
  %118 = add i32 %23, 1
  %119 = xor i32 %35, %0
  %120 = xor i32 %64, -1
  %121 = and i32 %120, %41
  %122 = xor i32 %30, %0
  %123 = xor i32 %114, %1
  %124 = and i32 %114, %50
  %125 = or i32 %15, %41
  %126 = xor i32 %105, %125
  %127 = shl i32 %126, 1
  %128 = or i32 %14, %67
  %129 = and i32 %36, %7
  %130 = or i32 %26, %7
  %131 = or i32 %39, %1
  %132 = or i32 %78, %41
  %133 = xor i32 %9, %17
  %134 = and i32 %61, %28
  %135 = or i32 %64, %41
  %136 = xor i32 %78, -1
  %137 = or i32 %136, %0
  %138 = xor i32 %14, %137
  %139 = xor i32 %30, %33
  %140 = and i32 %85, %2
  %141 = xor i32 %136, %0
  %142 = or i32 %97, %40
  %143 = and i32 %25, %48
  %144 = shl i32 %143, 1
  %145 = or i32 %33, %2
  %146 = shl i32 %33, 1
  %147 = or i32 %25, %109
  %148 = shl i32 %147, 2
  %149 = or i32 %120, %0
  %150 = or i32 %33, %39
  %151 = or i32 %47, %28
  %152 = or i32 %29, %1
  %153 = or i32 %9, %16
  %154 = xor i32 %58, %2
  %155 = and i32 %23, %28
  %156 = xor i32 %44, %120
  %157 = shl i32 %156, 1
  %158 = and i32 %136, %41
  %159 = shl i32 %158, 2
  %160 = and i32 %64, %41
  %161 = and i32 %136, %0
  %162 = and i32 %64, %0
  %163 = and i32 %88, %41
  %164 = and i32 %88, %0
  %165 = mul i32 %164, -12
  %166 = and i32 %4, %3
  %167 = xor i32 %166, -1
  %168 = add i32 %166, 1
  %169 = and i32 %20, %3
  %170 = xor i32 %169, -1
  %171 = xor i32 %3, -1
  %172 = and i32 %20, %4
  %173 = xor i32 %172, -1
  %174 = and i32 %173, %171
  %175 = shl i32 %174, 1
  %176 = and i32 %5, %3
  %177 = xor i32 %176, -1
  %178 = and i32 %177, %4
  %179 = or i32 %20, %3
  %180 = and i32 %179, %4
  %181 = or i32 %171, %4
  %182 = xor i32 %181, -1
  %183 = xor i32 %5, %3
  %184 = xor i32 %183, -1
  %185 = or i32 %184, %182
  %186 = or i32 %166, %184
  %187 = or i32 %4, %3
  %188 = xor i32 %187, -1
  %189 = xor i32 %21, -1
  %190 = xor i32 %189, %3
  %191 = shl i32 %190, 1
  %192 = xor i32 %5, %4
  %193 = xor i32 %192, -1
  %194 = or i32 %193, %188
  %195 = xor i32 %187, %5
  %196 = and i32 %171, %4
  %197 = or i32 %196, %5
  %198 = and i32 %187, %184
  %199 = or i32 %189, %171
  %200 = xor i32 %196, %177
  %201 = or i32 %192, %171
  %202 = or i32 %193, %182
  %203 = and i32 %181, %184
  %204 = xor i32 %4, -1
  %205 = and i32 %184, %204
  %206 = xor i32 %167, %5
  %207 = and i32 %192, %167
  %208 = shl i32 %207, 1
  %209 = and i32 %192, %171
  %210 = xor i32 %196, -1
  %211 = and i32 %20, %210
  %212 = and i32 %5, %4
  %213 = or i32 %5, %3
  %214 = xor i32 %213, -1
  %215 = or i32 %212, %214
  %216 = xor i32 %4, %3
  %217 = xor i32 %216, -1
  %218 = and i32 %20, %217
  %219 = and i32 %176, %4
  %220 = xor i32 %183, %4
  %221 = xor i32 %219, %220
  %222 = shl i32 %221, 1
  %223 = or i32 %216, %193
  %224 = or i32 %169, %4
  %225 = or i32 %20, %182
  %226 = shl i32 %225, 1
  %227 = or i32 %212, %217
  %228 = or i32 %5, %4
  %229 = xor i32 %228, -1
  %230 = or i32 %229, %3
  %231 = or i32 %166, %214
  %232 = xor i32 %177, %4
  %233 = or i32 %192, %166
  %234 = or i32 %193, %3
  %235 = and i32 %187, %5
  %236 = and i32 %176, %204
  %237 = and i32 %183, %4
  %238 = or i32 %236, %237
  %239 = and i32 %183, %204
  %240 = xor i32 %21, %3
  %241 = and i32 %171, %5
  %242 = and i32 %241, %4
  %243 = or i32 %171, %5
  %244 = xor i32 %243, %4
  %245 = or i32 %242, %244
  %246 = and i32 %183, %167
  %247 = shl i32 %246, 1
  %248 = xor i32 %179, -1
  %249 = or i32 %248, %204
  %250 = xor i32 %248, %4
  %251 = xor i32 %181, %5
  %252 = xor i32 %196, %170
  %253 = or i32 %184, %204
  %254 = or i32 %166, %193
  %255 = and i32 %241, %204
  %256 = and i32 %243, %4
  %257 = xor i32 %256, -1
  %258 = xor i32 %255, %257
  %259 = or i32 %184, %188
  %260 = and i32 %213, %4
  %261 = or i32 %236, %260
  %262 = shl i32 %261, 1
  %263 = xor i32 %172, %179
  %264 = xor i32 %184, %4
  %265 = or i32 %184, %4
  %266 = or i32 %192, %217
  %267 = and i32 %183, %210
  %268 = or i32 %212, %216
  %269 = or i32 %166, %20
  %270 = and i32 %184, %4
  %271 = or i32 %255, %270
  %272 = or i32 %192, %3
  %273 = add i32 %179, 1
  %274 = or i32 %177, %204
  %275 = xor i32 %212, -1
  %276 = and i32 %275, %3
  %277 = or i32 %183, %188
  %278 = and i32 %193, %210
  %279 = xor i32 %172, %177
  %280 = and i32 %192, %217
  %281 = xor i32 %173, %3
  %282 = or i32 %166, %229
  %283 = and i32 %275, %217
  %284 = xor i32 %179, %166
  %285 = add i32 %3, 1
  %286 = and i32 %210, %5
  %287 = xor i32 %212, %170
  %288 = or i32 %179, %204
  %289 = or i32 %212, %188
  %290 = xor i32 %166, %5
  %291 = xor i32 %260, -1
  %292 = xor i32 %236, %291
  %293 = and i32 %173, %3
  %294 = or i32 %166, %248
  %295 = xor i32 %212, %213
  %296 = and i32 %181, %5
  %297 = or i32 %172, %216
  %298 = shl i32 %297, 1
  %299 = and i32 %193, %167
  %300 = or i32 %176, %4
  %301 = or i32 %20, %188
  %302 = or i32 %217, %5
  %303 = shl i32 %302, 2
  %304 = xor i32 %179, %4
  %305 = and i32 %193, %217
  %306 = or i32 %176, %204
  %307 = and i32 %192, %216
  %308 = xor i32 %212, %3
  %309 = or i32 %255, %256
  %310 = shl i32 %309, 1
  %311 = or i32 %170, %4
  %312 = or i32 %219, %239
  %313 = or i32 %213, %4
  %314 = shl i32 %313, 1
  %315 = or i32 %177, %4
  %316 = xor i32 %214, %4
  %317 = xor i32 %220, -1
  %318 = or i32 %219, %317
  %319 = or i32 %169, %196
  %320 = or i32 %192, %188
  %321 = or i32 %242, %220
  %322 = xor i32 %21, %166
  %323 = shl i32 %213, 1
  %324 = xor i32 %242, %317
  %325 = xor i32 %239, 2147483647
  %326 = xor i32 %325, %219
  %327 = shl i32 %326, 1
  %328 = and i32 %21, %3
  %329 = shl i32 %328, 1
  %330 = and i32 %213, %204
  %331 = or i32 %183, %4
  %332 = xor i32 %242, %331
  %333 = and i32 %216, %275
  %334 = xor i32 %275, %3
  %335 = and i32 %228, %171
  %336 = or i32 %172, %217
  %337 = shl i32 %336, 1
  %338 = and i32 %177, %204
  %339 = or i32 %213, %204
  %340 = and i32 %183, %181
  %341 = shl i32 %340, 1
  %342 = xor i32 %169, %4
  %343 = xor i32 %228, %166
  %344 = or i32 %196, %193
  %345 = shl i32 %344, 1
  %346 = and i32 %216, %5
  %347 = or i32 %212, %171
  %348 = xor i32 %243, -1
  %349 = or i32 %348, %4
  %350 = xor i32 %242, %349
  %351 = xor i32 %172, %3
  %352 = shl i32 %351, 1
  %353 = or i32 %179, %4
  %354 = shl i32 %353, 1
  %355 = and i32 %21, %171
  %356 = xor i32 %213, %4
  %357 = or i32 %219, %356
  %358 = and i32 %184, %210
  %359 = xor i32 %196, %5
  %360 = or i32 %170, %204
  %361 = or i32 %248, %4
  %362 = and i32 %214, %204
  %363 = and i32 %169, %204
  %364 = mul i32 %363, 20
  %365 = and i32 %214, %4
  %366 = mul i32 %365, 7
  %367 = and i32 %169, %4
  %368 = and i32 %248, %204
  %369 = and i32 %248, %4
  %370 = add i32 %134, %154
  %371 = add i32 %370, %131
  %372 = add i32 %371, %124
  %373 = add i32 %372, %123
  %374 = add i32 %373, %122
  %375 = add i32 %374, %100
  %376 = add i32 %375, %96
  %377 = add i32 %376, %90
  %378 = add i32 %377, %66
  %379 = add i32 %378, %40
  %380 = add i32 %379, %188
  %381 = add i32 %380, %359
  %382 = add i32 %381, %193
  %383 = add i32 %382, %315
  %384 = add i32 %383, %330
  %385 = add i32 %384, %300
  %386 = add i32 %385, %237
  %387 = add i32 %386, %265
  %388 = add i32 %387, %240
  %389 = add i32 %388, %202
  %390 = add i32 %389, %198
  %391 = add i32 %390, %194
  %392 = shl i32 %391, 1
  %393 = sub i32 %163, %133
  %394 = add i32 %393, %316
  %395 = sub i32 %394, %362
  %396 = add i32 %395, %305
  %397 = sub i32 %396, %239
  %398 = sub i32 %397, %200
  %399 = mul i32 %398, 5
  %400 = sub i32 %14, %251
  %401 = mul i32 %400, 3
  %402 = sub i32 %97, %219
  %403 = mul i32 %402, 9
  %404 = sub i32 %368, %161
  %405 = mul i32 %404, 6
  %406 = add i32 %117, 1073741823
  %407 = add i32 %406, %37
  %408 = add i32 %407, %43
  %409 = add i32 %408, %266
  %410 = add i32 %409, %280
  %411 = shl i32 %410, 2
  %412 = sub i32 1, %0
  %413 = add i32 %412, %7
  %414 = add i32 %413, %23
  %415 = sub i32 %414, %47
  %416 = add i32 %415, %118
  %417 = add i32 %416, %24
  %418 = sub i32 %417, %34
  %419 = add i32 %418, %35
  %420 = sub i32 %419, %49
  %421 = sub i32 %420, %51
  %422 = sub i32 %421, %60
  %423 = sub i32 %422, %25
  %424 = add i32 %423, %83
  %425 = add i32 %424, %44
  %426 = sub i32 %425, %86
  %427 = sub i32 %426, %92
  %428 = sub i32 %427, %108
  %429 = sub i32 %428, %111
  %430 = sub i32 %429, %112
  %431 = sub i32 %430, %13
  %432 = add i32 %431, %36
  %433 = add i32 %432, %140
  %434 = add i32 %433, %145
  %435 = sub i32 %434, %146
  %436 = add i32 %435, %78
  %437 = add i32 %436, %29
  %438 = sub i32 %437, %151
  %439 = add i32 %438, %155
  %440 = add i32 %439, %285
  %441 = add i32 %440, %27
  %442 = add i32 %441, %31
  %443 = add i32 %442, %38
  %444 = add i32 %443, %52
  %445 = add i32 %444, %53
  %446 = sub i32 %445, %62
  %447 = sub i32 %446, %63
  %448 = add i32 %447, %65
  %449 = sub i32 %448, %67
  %450 = sub i32 %449, %69
  %451 = add i32 %450, %70
  %452 = add i32 %451, %71
  %453 = sub i32 %452, %73
  %454 = add i32 %453, %74
  %455 = add i32 %454, %75
  %456 = sub i32 %455, %77
  %457 = add i32 %456, %84
  %458 = sub i32 %457, %87
  %459 = add i32 %458, %89
  %460 = add i32 %459, %91
  %461 = add i32 %460, %93
  %462 = sub i32 %461, %94
  %463 = sub i32 %462, %95
  %464 = sub i32 %463, %110
  %465 = add i32 %464, %113
  %466 = add i32 %465, %115
  %467 = sub i32 %466, %116
  %468 = sub i32 %467, %119
  %469 = add i32 %468, %121
  %470 = sub i32 %469, %129
  %471 = add i32 %470, %130
  %472 = sub i32 %471, %132
  %473 = add i32 %472, %135
  %474 = add i32 %473, %139
  %475 = sub i32 %474, %141
  %476 = sub i32 %475, %98
  %477 = add i32 %476, %149
  %478 = sub i32 %477, %150
  %479 = add i32 %478, %152
  %480 = sub i32 %479, %160
  %481 = add i32 %480, %162
  %482 = sub i32 %481, %46
  %483 = sub i32 %482, %55
  %484 = sub i32 %483, %57
  %485 = sub i32 %484, %99
  %486 = sub i32 %485, %102
  %487 = sub i32 %486, %104
  %488 = sub i32 %487, %107
  %489 = sub i32 %488, %128
  %490 = add i32 %489, %138
  %491 = add i32 %490, %142
  %492 = sub i32 %491, %144
  %493 = sub i32 %492, %148
  %494 = sub i32 %493, %153
  %495 = sub i32 %494, %157
  %496 = sub i32 %495, %159
  %497 = add i32 %496, %165
  %498 = add i32 %497, %168
  %499 = add i32 %498, %217
  %500 = sub i32 %499, %166
  %501 = sub i32 %500, %127
  %502 = add i32 %501, %170
  %503 = add i32 %502, %195
  %504 = add i32 %503, %197
  %505 = sub i32 %504, %206
  %506 = add i32 %505, %211
  %507 = add i32 %506, %218
  %508 = sub i32 %507, %235
  %509 = sub i32 %508, %179
  %510 = add i32 %509, %176
  %511 = sub i32 %510, %192
  %512 = add i32 %511, %269
  %513 = add i32 %512, %273
  %514 = add i32 %513, %286
  %515 = sub i32 %514, %290
  %516 = add i32 %515, %296
  %517 = add i32 %516, %301
  %518 = add i32 %517, %346
  %519 = sub i32 %518, %82
  %520 = add i32 %519, %178
  %521 = add i32 %520, %180
  %522 = sub i32 %521, %185
  %523 = sub i32 %522, %186
  %524 = add i32 %523, %199
  %525 = add i32 %524, %201
  %526 = sub i32 %525, %203
  %527 = sub i32 %526, %205
  %528 = add i32 %527, %209
  %529 = sub i32 %528, %215
  %530 = add i32 %529, %223
  %531 = add i32 %530, %224
  %532 = sub i32 %531, %226
  %533 = add i32 %532, %227
  %534 = add i32 %533, %230
  %535 = sub i32 %534, %231
  %536 = add i32 %535, %232
  %537 = add i32 %536, %233
  %538 = sub i32 %537, %234
  %539 = add i32 %538, %249
  %540 = sub i32 %539, %250
  %541 = sub i32 %540, %252
  %542 = sub i32 %541, %253
  %543 = add i32 %542, %254
  %544 = sub i32 %543, %259
  %545 = sub i32 %544, %263
  %546 = add i32 %545, %264
  %547 = sub i32 %546, %267
  %548 = add i32 %547, %268
  %549 = sub i32 %548, %272
  %550 = sub i32 %549, %274
  %551 = add i32 %550, %276
  %552 = add i32 %551, %277
  %553 = sub i32 %552, %278
  %554 = sub i32 %553, %279
  %555 = sub i32 %554, %281
  %556 = add i32 %555, %282
  %557 = sub i32 %556, %283
  %558 = add i32 %557, %284
  %559 = add i32 %558, %287
  %560 = add i32 %559, %288
  %561 = sub i32 %560, %289
  %562 = sub i32 %561, %260
  %563 = sub i32 %562, %293
  %564 = add i32 %563, %294
  %565 = add i32 %564, %295
  %566 = add i32 %565, %299
  %567 = sub i32 %566, %303
  %568 = sub i32 %567, %304
  %569 = sub i32 %568, %306
  %570 = sub i32 %569, %307
  %571 = sub i32 %570, %308
  %572 = add i32 %571, %311
  %573 = sub i32 %572, %319
  %574 = add i32 %573, %320
  %575 = sub i32 %574, %322
  %576 = sub i32 %575, %323
  %577 = sub i32 %576, %333
  %578 = sub i32 %577, %334
  %579 = add i32 %578, %335
  %580 = sub i32 %579, %338
  %581 = sub i32 %580, %339
  %582 = sub i32 %581, %342
  %583 = add i32 %582, %343
  %584 = sub i32 %583, %347
  %585 = sub i32 %584, %355
  %586 = add i32 %585, %358
  %587 = add i32 %586, %360
  %588 = add i32 %587, %361
  %589 = add i32 %588, %367
  %590 = sub i32 %589, %236
  %591 = sub i32 %590, %369
  %592 = sub i32 %591, %175
  %593 = sub i32 %592, %191
  %594 = sub i32 %593, %208
  %595 = sub i32 %594, %238
  %596 = add i32 %595, %245
  %597 = sub i32 %596, %247
  %598 = add i32 %597, %258
  %599 = sub i32 %598, %271
  %600 = sub i32 %599, %292
  %601 = sub i32 %600, %298
  %602 = add i32 %601, %312
  %603 = sub i32 %602, %314
  %604 = add i32 %603, %318
  %605 = sub i32 %604, %321
  %606 = sub i32 %605, %324
  %607 = sub i32 %606, %329
  %608 = add i32 %607, %332
  %609 = sub i32 %608, %337
  %610 = sub i32 %609, %341
  %611 = sub i32 %610, %345
  %612 = sub i32 %611, %350
  %613 = sub i32 %612, %352
  %614 = sub i32 %613, %354
  %615 = add i32 %614, %357
  %616 = add i32 %615, %364
  %617 = add i32 %616, %366
  %618 = add i32 %617, %401
  %619 = sub i32 %618, %222
  %620 = sub i32 %619, %262
  %621 = sub i32 %620, %310
  %622 = add i32 %621, %403
  %623 = add i32 %622, %405
  %624 = sub i32 %623, %327
  %625 = add i32 %624, %411
  %626 = add i32 %625, %399
  %627 = add i32 %626, %392
  %628 = icmp eq i32 %22, %627
  %629 = select i1 %628, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %630 = tail call i32 @puts(i8* nonnull dereferenceable(1) %629)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
