; ModuleID = '../.././c_source_file/1695_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1695_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = xor i32 %3, -1
  %12 = and i32 %11, %5
  %13 = and i32 %12, %4
  %14 = xor i32 %5, %3
  %15 = or i32 %14, %4
  %16 = xor i32 %13, %15
  %17 = sub i32 %16, %10
  %18 = and i32 %2, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %7, -1
  %21 = and i32 %19, %20
  %22 = xor i32 %2, %1
  %23 = xor i32 %22, -1
  %24 = and i32 %23, %0
  %25 = xor i32 %1, -1
  %26 = or i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %18, %27
  %29 = xor i32 %0, -1
  %30 = and i32 %2, %1
  %31 = and i32 %30, %29
  %32 = or i32 %2, %1
  %33 = and i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, %34
  %36 = and i32 %9, %1
  %37 = and i32 %1, %0
  %38 = or i32 %37, %2
  %39 = xor i32 %18, %32
  %40 = or i32 %1, %0
  %41 = and i32 %22, %40
  %42 = shl i32 %41, 2
  %43 = xor i32 %32, -1
  %44 = or i32 %37, %43
  %45 = shl i32 %44, 1
  %46 = xor i32 %40, -1
  %47 = or i32 %9, %46
  %48 = and i32 %25, %2
  %49 = and i32 %48, %0
  %50 = or i32 %25, %2
  %51 = xor i32 %50, %0
  %52 = or i32 %49, %51
  %53 = or i32 %2, %0
  %54 = and i32 %53, %20
  %55 = shl i32 %54, 1
  %56 = xor i32 %40, %2
  %57 = xor i32 %2, -1
  %58 = and i32 %57, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %59, %1
  %61 = and i32 %19, %25
  %62 = xor i32 %32, %37
  %63 = xor i32 %26, %2
  %64 = xor i32 %43, %0
  %65 = xor i32 %30, -1
  %66 = and i32 %65, %0
  %67 = or i32 %57, %0
  %68 = xor i32 %67, -1
  %69 = or i32 %68, %25
  %70 = and i32 %48, %29
  %71 = and i32 %50, %0
  %72 = xor i32 %71, -1
  %73 = xor i32 %70, %72
  %74 = and i32 %25, %0
  %75 = or i32 %8, %74
  %76 = xor i32 %53, %1
  %77 = or i32 %18, %25
  %78 = or i32 %18, %7
  %79 = or i32 %18, %46
  %80 = xor i32 %74, -1
  %81 = and i32 %23, %80
  %82 = and i32 %22, %0
  %83 = or i32 %31, %82
  %84 = and i32 %7, %59
  %85 = or i32 %18, %1
  %86 = shl i32 %85, 1
  %87 = and i32 %57, %1
  %88 = xor i32 %87, -1
  %89 = xor i32 %18, %88
  %90 = and i32 %40, %57
  %91 = or i32 %27, %2
  %92 = and i32 %20, %2
  %93 = and i32 %8, %40
  %94 = xor i32 %65, %0
  %95 = xor i32 %53, -1
  %96 = xor i32 %95, %1
  %97 = or i32 %74, %9
  %98 = or i32 %43, %29
  %99 = or i32 %57, %1
  %100 = xor i32 %99, %37
  %101 = xor i32 %37, -1
  %102 = and i32 %9, %101
  %103 = and i32 %26, %57
  %104 = shl i32 %103, 1
  %105 = and i32 %67, %1
  %106 = or i32 %18, %20
  %107 = or i32 %87, %0
  %108 = and i32 %8, %1
  %109 = and i32 %59, %25
  %110 = xor i32 %37, %2
  %111 = and i32 %26, %23
  %112 = xor i32 %18, %40
  %113 = and i32 %19, %1
  %114 = or i32 %22, %0
  %115 = and i32 %30, %0
  %116 = and i32 %32, %29
  %117 = or i32 %115, %116
  %118 = and i32 %26, %2
  %119 = or i32 %23, %46
  %120 = or i32 %9, %1
  %121 = and i32 %57, %101
  %122 = or i32 %7, %2
  %123 = xor i32 %74, %2
  %124 = and i32 %9, %25
  %125 = and i32 %22, %101
  %126 = or i32 %8, %20
  %127 = xor i32 %74, %65
  %128 = or i32 %23, %27
  %129 = shl i32 %67, 1
  %130 = xor i32 %99, -1
  %131 = or i32 %37, %130
  %132 = shl i32 %131, 1
  %133 = and i32 %67, %7
  %134 = or i32 %88, %29
  %135 = and i32 %22, %26
  %136 = shl i32 %30, 1
  %137 = and i32 %8, %7
  %138 = shl i32 %137, 1
  %139 = xor i32 %99, %0
  %140 = or i32 %32, %29
  %141 = and i32 %101, %2
  %142 = and i32 %40, %2
  %143 = and i32 %7, %9
  %144 = and i32 %88, %29
  %145 = or i32 %88, %0
  %146 = xor i32 %18, %26
  %147 = shl i32 %146, 1
  %148 = and i32 %7, %19
  %149 = or i32 %57, %20
  %150 = or i32 %95, %25
  %151 = xor i32 %58, %65
  %152 = or i32 %37, %23
  %153 = xor i32 %32, %0
  %154 = or i32 %115, %153
  %155 = or i32 %65, %29
  %156 = shl i32 %155, 1
  %157 = or i32 %37, %95
  %158 = and i32 %8, %26
  %159 = or i32 %32, %0
  %160 = and i32 %9, %80
  %161 = shl i32 %160, 1
  %162 = add i32 %0, 1
  %163 = and i32 %7, %57
  %164 = and i32 %57, %20
  %165 = or i32 %18, %43
  %166 = shl i32 %165, 2
  %167 = or i32 %37, %9
  %168 = and i32 %8, %20
  %169 = xor i32 %80, %2
  %170 = or i32 %58, %1
  %171 = or i32 %9, %27
  %172 = or i32 %68, %1
  %173 = and i32 %67, %20
  %174 = or i32 %65, %0
  %175 = or i32 %8, %37
  %176 = or i32 %31, %33
  %177 = xor i32 %22, %0
  %178 = or i32 %49, %177
  %179 = xor i32 %30, %0
  %180 = xor i32 %23, %0
  %181 = xor i32 %87, %0
  %182 = and i32 %67, %25
  %183 = or i32 %37, %68
  %184 = xor i32 %67, %1
  %185 = or i32 %22, %27
  %186 = or i32 %130, %0
  %187 = or i32 %58, %20
  %188 = and i32 %43, %29
  %189 = shl i32 %188, 1
  %190 = and i32 %87, %29
  %191 = shl i32 %190, 2
  %192 = and i32 %43, %0
  %193 = shl i32 %192, 3
  %194 = and i32 %87, %0
  %195 = and i32 %130, %29
  %196 = mul i32 %195, -14
  %197 = mul i32 %31, -21
  %198 = and i32 %130, %0
  %199 = xor i32 %5, -1
  %200 = and i32 %199, %4
  %201 = xor i32 %200, %3
  %202 = and i32 %5, %4
  %203 = and i32 %11, %4
  %204 = or i32 %199, %3
  %205 = xor i32 %204, -1
  %206 = xor i32 %205, %4
  %207 = xor i32 %5, %4
  %208 = xor i32 %207, -1
  %209 = or i32 %208, %3
  %210 = xor i32 %4, %3
  %211 = xor i32 %210, -1
  %212 = and i32 %207, %211
  %213 = and i32 %199, %3
  %214 = xor i32 %213, -1
  %215 = xor i32 %202, %214
  %216 = or i32 %11, %4
  %217 = xor i32 %216, -1
  %218 = and i32 %208, %3
  %219 = or i32 %4, %3
  %220 = and i32 %207, %219
  %221 = xor i32 %219, -1
  %222 = or i32 %221, %5
  %223 = xor i32 %3, 2147483647
  %224 = xor i32 %223, %202
  %225 = or i32 %207, %203
  %226 = shl i32 %225, 1
  %227 = and i32 %5, %3
  %228 = or i32 %227, %203
  %229 = xor i32 %202, %219
  %230 = and i32 %4, %3
  %231 = xor i32 %14, -1
  %232 = or i32 %230, %231
  %233 = xor i32 %4, -1
  %234 = and i32 %233, %5
  %235 = or i32 %234, %230
  %236 = xor i32 %227, -1
  %237 = xor i32 %236, %4
  %238 = or i32 %202, %11
  %239 = xor i32 %204, %230
  %240 = or i32 %234, %11
  %241 = and i32 %227, %4
  %242 = xor i32 %14, %4
  %243 = xor i32 %241, %242
  %244 = xor i32 %230, -1
  %245 = xor i32 %244, %5
  %246 = shl i32 %245, 1
  %247 = xor i32 %203, %236
  %248 = or i32 %199, %211
  %249 = xor i32 %214, %4
  %250 = or i32 %5, %3
  %251 = xor i32 %250, %4
  %252 = or i32 %241, %251
  %253 = xor i32 %15, -1
  %254 = or i32 %13, %253
  %255 = and i32 %250, %4
  %256 = or i32 %208, %221
  %257 = or i32 %200, %227
  %258 = and i32 %250, %233
  %259 = or i32 %210, %199
  %260 = or i32 %202, %213
  %261 = or i32 %210, %208
  %262 = xor i32 %203, 2147483647
  %263 = and i32 %262, %208
  %264 = shl i32 %263, 1
  %265 = and i32 %219, %5
  %266 = and i32 %199, %211
  %267 = and i32 %231, %4
  %268 = and i32 %211, %5
  %269 = or i32 %208, %211
  %270 = shl i32 %242, 1
  %271 = and i32 %207, %3
  %272 = or i32 %213, %203
  %273 = xor i32 %250, -1
  %274 = or i32 %230, %273
  %275 = or i32 %213, %4
  %276 = or i32 %203, %231
  %277 = add i32 %207, 1
  %278 = xor i32 %231, %4
  %279 = and i32 %219, %199
  %280 = and i32 %231, %233
  %281 = or i32 %202, %217
  %282 = or i32 %241, %258
  %283 = xor i32 %234, %3
  %284 = and i32 %14, %233
  %285 = and i32 %207, %244
  %286 = and i32 %12, %233
  %287 = or i32 %11, %5
  %288 = and i32 %287, %4
  %289 = xor i32 %288, -1
  %290 = xor i32 %286, %289
  %291 = or i32 %213, %233
  %292 = and i32 %273, %233
  %293 = mul i32 %292, -6
  %294 = and i32 %213, %233
  %295 = and i32 %273, %4
  %296 = and i32 %213, %4
  %297 = and i32 %205, %233
  %298 = mul i32 %297, -11
  %299 = and i32 %227, %233
  %300 = mul i32 %299, -19
  %301 = and i32 %205, %4
  %302 = mul i32 %241, -9
  %303 = add i32 %110, %142
  %304 = add i32 %303, %115
  %305 = sub i32 %304, %194
  %306 = add i32 %305, %108
  %307 = add i32 %306, %239
  %308 = mul i32 %307, 3
  %309 = sub i32 %204, %107
  %310 = add i32 %309, %252
  %311 = mul i32 %310, 5
  %312 = add i32 %125, %68
  %313 = add i32 %312, %259
  %314 = shl i32 %313, 2
  %315 = or i32 %295, %294
  %316 = mul i32 %315, -18
  %317 = add i32 %296, %198
  %318 = mul i32 %317, -7
  %319 = sub i32 -3, %30
  %320 = add i32 %319, %9
  %321 = add i32 %320, %63
  %322 = add i32 %321, %180
  %323 = add i32 %322, %168
  %324 = add i32 %323, %139
  %325 = add i32 %324, %60
  %326 = add i32 %325, %47
  %327 = add i32 %326, %217
  %328 = add i32 %327, %284
  %329 = add i32 %328, %260
  %330 = add i32 %329, %229
  %331 = add i32 %330, %243
  %332 = add i32 %331, %282
  %333 = add i32 %332, %224
  %334 = shl i32 %333, 1
  %335 = sub i32 %162, %7
  %336 = add i32 %335, %38
  %337 = add i32 %336, %56
  %338 = add i32 %337, %18
  %339 = add i32 %338, %90
  %340 = sub i32 %339, %91
  %341 = sub i32 %340, %92
  %342 = add i32 %341, %118
  %343 = sub i32 %342, %121
  %344 = add i32 %343, %122
  %345 = add i32 %344, %123
  %346 = sub i32 %345, %53
  %347 = add i32 %346, %141
  %348 = add i32 %347, %149
  %349 = add i32 %348, %95
  %350 = add i32 %349, %163
  %351 = add i32 %350, %164
  %352 = sub i32 %351, %169
  %353 = sub i32 %352, %21
  %354 = add i32 %353, %24
  %355 = add i32 %354, %28
  %356 = add i32 %355, %36
  %357 = add i32 %356, %39
  %358 = sub i32 %357, %61
  %359 = sub i32 %358, %62
  %360 = sub i32 %359, %64
  %361 = add i32 %360, %66
  %362 = sub i32 %361, %69
  %363 = sub i32 %362, %75
  %364 = add i32 %363, %76
  %365 = sub i32 %364, %77
  %366 = sub i32 %365, %78
  %367 = sub i32 %366, %79
  %368 = sub i32 %367, %81
  %369 = add i32 %368, %84
  %370 = add i32 %369, %89
  %371 = add i32 %370, %93
  %372 = sub i32 %371, %94
  %373 = add i32 %372, %82
  %374 = add i32 %373, %96
  %375 = add i32 %374, %97
  %376 = sub i32 %375, %98
  %377 = sub i32 %376, %100
  %378 = add i32 %377, %102
  %379 = sub i32 %378, %104
  %380 = sub i32 %379, %105
  %381 = add i32 %380, %106
  %382 = add i32 %381, %109
  %383 = sub i32 %382, %111
  %384 = add i32 %383, %112
  %385 = add i32 %384, %113
  %386 = add i32 %385, %114
  %387 = sub i32 %386, %119
  %388 = sub i32 %387, %120
  %389 = add i32 %388, %124
  %390 = sub i32 %389, %33
  %391 = add i32 %390, %126
  %392 = sub i32 %391, %127
  %393 = add i32 %392, %128
  %394 = sub i32 %393, %129
  %395 = sub i32 %394, %133
  %396 = add i32 %395, %134
  %397 = add i32 %396, %135
  %398 = sub i32 %397, %136
  %399 = add i32 %398, %140
  %400 = sub i32 %399, %143
  %401 = add i32 %400, %144
  %402 = add i32 %401, %145
  %403 = add i32 %402, %148
  %404 = add i32 %403, %150
  %405 = sub i32 %404, %151
  %406 = add i32 %405, %152
  %407 = sub i32 %406, %157
  %408 = sub i32 %407, %158
  %409 = sub i32 %408, %159
  %410 = add i32 %409, %167
  %411 = add i32 %410, %170
  %412 = add i32 %411, %171
  %413 = add i32 %412, %172
  %414 = add i32 %413, %173
  %415 = add i32 %414, %174
  %416 = sub i32 %415, %175
  %417 = sub i32 %416, %116
  %418 = add i32 %417, %179
  %419 = sub i32 %418, %181
  %420 = sub i32 %419, %182
  %421 = sub i32 %420, %183
  %422 = sub i32 %421, %184
  %423 = sub i32 %422, %185
  %424 = sub i32 %423, %186
  %425 = add i32 %424, %187
  %426 = sub i32 %425, %35
  %427 = sub i32 %426, %42
  %428 = sub i32 %427, %45
  %429 = sub i32 %428, %52
  %430 = sub i32 %429, %55
  %431 = sub i32 %430, %73
  %432 = sub i32 %431, %83
  %433 = sub i32 %432, %86
  %434 = add i32 %433, %117
  %435 = sub i32 %434, %132
  %436 = sub i32 %435, %138
  %437 = sub i32 %436, %147
  %438 = add i32 %437, %154
  %439 = sub i32 %438, %156
  %440 = sub i32 %439, %161
  %441 = sub i32 %440, %166
  %442 = add i32 %441, %176
  %443 = sub i32 %442, %178
  %444 = sub i32 %443, %189
  %445 = sub i32 %444, %191
  %446 = add i32 %445, %193
  %447 = add i32 %446, %196
  %448 = add i32 %447, %197
  %449 = add i32 %448, %203
  %450 = sub i32 %449, %216
  %451 = add i32 %450, %221
  %452 = sub i32 %451, %202
  %453 = sub i32 %452, %222
  %454 = sub i32 %453, %248
  %455 = add i32 %454, %265
  %456 = add i32 %455, %205
  %457 = sub i32 %456, %266
  %458 = sub i32 %457, %268
  %459 = add i32 %458, %277
  %460 = add i32 %459, %227
  %461 = sub i32 %460, %279
  %462 = sub i32 %461, %201
  %463 = add i32 %462, %206
  %464 = sub i32 %463, %209
  %465 = add i32 %464, %212
  %466 = sub i32 %465, %215
  %467 = add i32 %466, %218
  %468 = sub i32 %467, %220
  %469 = sub i32 %468, %228
  %470 = add i32 %469, %232
  %471 = add i32 %470, %235
  %472 = add i32 %471, %237
  %473 = add i32 %472, %238
  %474 = add i32 %473, %240
  %475 = sub i32 %474, %246
  %476 = add i32 %475, %247
  %477 = sub i32 %476, %249
  %478 = add i32 %477, %255
  %479 = sub i32 %478, %256
  %480 = add i32 %479, %257
  %481 = add i32 %480, %258
  %482 = add i32 %481, %261
  %483 = add i32 %482, %267
  %484 = sub i32 %483, %269
  %485 = sub i32 %484, %271
  %486 = sub i32 %485, %272
  %487 = add i32 %486, %274
  %488 = add i32 %487, %275
  %489 = sub i32 %488, %276
  %490 = sub i32 %489, %278
  %491 = sub i32 %490, %280
  %492 = sub i32 %491, %281
  %493 = sub i32 %492, %283
  %494 = add i32 %493, %285
  %495 = add i32 %494, %291
  %496 = sub i32 %495, %301
  %497 = sub i32 %496, %226
  %498 = add i32 %497, %254
  %499 = sub i32 %498, %264
  %500 = sub i32 %499, %270
  %501 = sub i32 %500, %290
  %502 = add i32 %501, %293
  %503 = add i32 %502, %298
  %504 = add i32 %503, %300
  %505 = add i32 %504, %302
  %506 = add i32 %505, %314
  %507 = add i32 %506, %316
  %508 = add i32 %507, %318
  %509 = add i32 %508, %311
  %510 = add i32 %509, %308
  %511 = add i32 %510, %334
  %512 = icmp eq i32 %17, %511
  %513 = select i1 %512, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %514 = tail call i32 @puts(i8* nonnull dereferenceable(1) %513)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
