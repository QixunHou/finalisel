digraph "DFG for'crackme' function" {
	Node0x23434e0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x2343550[shape=record, label="  %4 = sub i32 %0, %3"];
	Node0x2343c20[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2343c90[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x2343d00[shape=record, label="  %7 = add i32 %6, %1"];
	Node0x2343d70[shape=record, label="  %8 = or i32 %5, %0"];
	Node0x2343e10[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x2343e80[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x2343f20[shape=record, label="  %11 = mul i32 %10, -3"];
	Node0x2343f90[shape=record, label="  %12 = shl i32 %10, 1"];
	Node0x2344030[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x23440a0[shape=record, label="  %14 = xor i32 %8, -1"];
	Node0x2344140[shape=record, label="  %15 = shl i32 %6, 2"];
	Node0x23441b0[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x2344250[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x23442c0[shape=record, label="  %18 = add i32 %7, %14"];
	Node0x2344330[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x23443a0[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x2344410[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x2344480[shape=record, label="  %22 = add i32 %21, %17"];
	Node0x23444f0[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x2344560[shape=record, label="  %24 = icmp eq i32 %4, %23"];
	Node0x22e4268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2344a00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x2344a50[shape=record, label="  ret void"];
	Node0x23434e0 -> Node0x2343550;
	Node0x2343550 -> Node0x2343c20;
	Node0x2343c20 -> Node0x2343c90;
	Node0x2343c90 -> Node0x2343d00;
	Node0x2343d00 -> Node0x2343d70;
	Node0x2343d70 -> Node0x2343e10;
	Node0x2343e10 -> Node0x2343e80;
	Node0x2343e80 -> Node0x2343f20;
	Node0x2343f20 -> Node0x2343f90;
	Node0x2343f90 -> Node0x2344030;
	Node0x2344030 -> Node0x23440a0;
	Node0x23440a0 -> Node0x2344140;
	Node0x2344140 -> Node0x23441b0;
	Node0x23441b0 -> Node0x2344250;
	Node0x2344250 -> Node0x23442c0;
	Node0x23442c0 -> Node0x2344330;
	Node0x2344330 -> Node0x23443a0;
	Node0x23443a0 -> Node0x2344410;
	Node0x2344410 -> Node0x2344480;
	Node0x2344480 -> Node0x23444f0;
	Node0x23444f0 -> Node0x2344560;
	Node0x2344560 -> Node0x22e4268;
	Node0x22e4268 -> Node0x2344a00;
	Node0x2344a00 -> Node0x2344a50;
edge [color=red]
	Node0x23434e0 -> Node0x2343550;
	Node0x2343c20 -> Node0x2343c90;
	Node0x2343c90 -> Node0x2343d00;
	Node0x2343c20 -> Node0x2343d70;
	Node0x2343d70 -> Node0x2343e10;
	Node0x2343e80 -> Node0x2343f20;
	Node0x2343e80 -> Node0x2343f90;
	Node0x2343f90 -> Node0x2344030;
	Node0x2343d70 -> Node0x23440a0;
	Node0x2343c90 -> Node0x2344140;
	Node0x23441b0 -> Node0x2344250;
	Node0x2343d00 -> Node0x23442c0;
	Node0x23440a0 -> Node0x23442c0;
	Node0x23442c0 -> Node0x2344330;
	Node0x2343e10 -> Node0x2344330;
	Node0x2344330 -> Node0x23443a0;
	Node0x2343f20 -> Node0x23443a0;
	Node0x23443a0 -> Node0x2344410;
	Node0x2344140 -> Node0x2344410;
	Node0x2344410 -> Node0x2344480;
	Node0x2344250 -> Node0x2344480;
	Node0x2344480 -> Node0x23444f0;
	Node0x2344030 -> Node0x23444f0;
	Node0x2343550 -> Node0x2344560;
	Node0x23444f0 -> Node0x2344560;
	Node0x2344560 -> Node0x22e4268;
	Node0x22e4268 -> Node0x2344a00;
}
