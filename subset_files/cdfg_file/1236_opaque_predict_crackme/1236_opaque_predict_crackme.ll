; ModuleID = '../.././c_source_file/1236_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1236_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %2, %0
  %5 = xor i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %4, %6
  %8 = mul i32 %7, -3
  %9 = or i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %2
  %12 = add i32 %8, %11
  %13 = xor i32 %2, -1
  %14 = and i32 %13, %0
  %15 = or i32 %14, %6
  %16 = and i32 %4, %1
  %17 = xor i32 %0, -1
  %18 = or i32 %13, %1
  %19 = or i32 %18, %17
  %20 = and i32 %13, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %0
  %23 = or i32 %13, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %24, %1
  %26 = and i32 %18, %0
  %27 = and i32 %2, %1
  %28 = and i32 %27, %0
  %29 = or i32 %2, %1
  %30 = and i32 %29, %17
  %31 = xor i32 %28, -1
  %32 = xor i32 %30, %31
  %33 = xor i32 %1, -1
  %34 = and i32 %4, %33
  %35 = and i32 %33, %0
  %36 = xor i32 %2, %0
  %37 = or i32 %36, %35
  %38 = or i32 %20, %35
  %39 = shl i32 %38, 2
  %40 = xor i32 %23, %1
  %41 = or i32 %33, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %13, %42
  %44 = or i32 %27, %17
  %45 = and i32 %2, %0
  %46 = xor i32 %45, %21
  %47 = or i32 %6, %2
  %48 = and i32 %1, %0
  %49 = xor i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %48, %50
  %52 = xor i32 %29, -1
  %53 = and i32 %4, %5
  %54 = xor i32 %29, %0
  %55 = or i32 %28, %54
  %56 = xor i32 %4, -1
  %57 = or i32 %56, %6
  %58 = or i32 %35, %13
  %59 = and i32 %23, %33
  %60 = or i32 %45, %5
  %61 = xor i32 %27, -1
  %62 = or i32 %61, %0
  %63 = or i32 %48, %2
  %64 = or i32 %45, %20
  %65 = xor i32 %45, %9
  %66 = and i32 %49, %17
  %67 = xor i32 %66, %31
  %68 = xor i32 %45, -1
  %69 = and i32 %68, %6
  %70 = and i32 %61, %0
  %71 = and i32 %27, %17
  %72 = and i32 %29, %0
  %73 = or i32 %71, %72
  %74 = and i32 %41, %2
  %75 = xor i32 %49, %0
  %76 = xor i32 %75, -1
  %77 = or i32 %28, %76
  %78 = or i32 %27, %35
  %79 = xor i32 %14, -1
  %80 = and i32 %5, %79
  %81 = xor i32 %36, -1
  %82 = or i32 %81, %33
  %83 = xor i32 %14, %61
  %84 = or i32 %36, %48
  %85 = or i32 %48, %81
  %86 = or i32 %52, %0
  %87 = and i32 %36, %9
  %88 = and i32 %21, %0
  %89 = shl i32 %88, 1
  %90 = xor i32 %14, %18
  %91 = and i32 %79, %1
  %92 = xor i32 %42, %2
  %93 = xor i32 %18, -1
  %94 = or i32 %14, %93
  %95 = xor i32 %45, %41
  %96 = or i32 %48, %56
  %97 = or i32 %49, %17
  %98 = shl i32 %97, 1
  %99 = xor i32 %35, %2
  %100 = shl i32 %99, 1
  %101 = and i32 %36, %41
  %102 = and i32 %41, %13
  %103 = xor i32 %48, -1
  %104 = and i32 %49, %103
  %105 = xor i32 %27, %0
  %106 = xor i32 %18, %0
  %107 = xor i32 %54, %31
  %108 = or i32 %45, %33
  %109 = xor i32 %45, %1
  %110 = or i32 %28, %66
  %111 = shl i32 %110, 1
  %112 = and i32 %33, %2
  %113 = and i32 %112, %0
  %114 = or i32 %49, %0
  %115 = xor i32 %113, %114
  %116 = and i32 %112, %17
  %117 = or i32 %33, %2
  %118 = and i32 %117, %0
  %119 = xor i32 %118, 2147483647
  %120 = xor i32 %119, %116
  %121 = add i32 %36, 1
  %122 = or i32 %14, %1
  %123 = shl i32 %122, 1
  %124 = xor i32 %4, %48
  %125 = shl i32 %124, 1
  %126 = xor i32 %35, -1
  %127 = and i32 %36, %126
  %128 = and i32 %5, %81
  %129 = or i32 %14, %33
  %130 = or i32 %48, %13
  %131 = and i32 %49, %0
  %132 = shl i32 %131, 1
  %133 = and i32 %81, %103
  %134 = or i32 %18, %0
  %135 = xor i32 %103, %2
  %136 = and i32 %117, %17
  %137 = or i32 %113, %136
  %138 = shl i32 %137, 1
  %139 = xor i32 %18, %48
  %140 = and i32 %5, %68
  %141 = or i32 %52, %17
  %142 = xor i32 %93, %0
  %143 = xor i32 %45, %29
  %144 = xor i32 %114, 2147483647
  %145 = or i32 %144, %113
  %146 = xor i32 %20, %17
  %147 = and i32 %5, %13
  %148 = and i32 %126, %2
  %149 = xor i32 %117, %0
  %150 = xor i32 %113, -1
  %151 = xor i32 %149, %150
  %152 = xor i32 %28, %75
  %153 = or i32 %81, %10
  %154 = or i32 %113, %149
  %155 = or i32 %36, %5
  %156 = xor i32 %29, %48
  %157 = or i32 %93, %0
  %158 = xor i32 %48, %2
  %159 = and i32 %9, %2
  %160 = xor i32 %35, %61
  %161 = or i32 %50, %0
  %162 = and i32 %36, %1
  %163 = or i32 %49, %35
  %164 = or i32 %5, %13
  %165 = or i32 %42, %2
  %166 = or i32 %36, %33
  %167 = or i32 %81, %42
  %168 = or i32 %29, %17
  %169 = or i32 %5, %24
  %170 = and i32 %81, %33
  %171 = and i32 %13, %103
  %172 = xor i32 %136, %150
  %173 = xor i32 %72, -1
  %174 = xor i32 %71, %173
  %175 = xor i32 %68, %1
  %176 = or i32 %5, %56
  %177 = xor i32 %126, %2
  %178 = and i32 %81, %126
  %179 = and i32 %36, %5
  %180 = or i32 %35, %50
  %181 = xor i32 %4, %1
  %182 = or i32 %10, %2
  %183 = or i32 %71, %131
  %184 = add i32 %14, 1
  %185 = and i32 %81, %6
  %186 = or i32 %45, %52
  %187 = xor i32 %35, %21
  %188 = and i32 %9, %13
  %189 = xor i32 %9, %2
  %190 = xor i32 %113, %76
  %191 = or i32 %27, %0
  %192 = and i32 %23, %6
  %193 = and i32 %23, %1
  %194 = and i32 %5, %2
  %195 = or i32 %20, %0
  %196 = and i32 %52, %17
  %197 = mul i32 %196, -26
  %198 = and i32 %52, %0
  %199 = and i32 %20, %0
  %200 = mul i32 %199, -14
  %201 = and i32 %93, %17
  %202 = mul i32 %201, -10
  %203 = shl i32 %71, 4
  %204 = and i32 %93, %0
  %205 = mul i32 %204, 7
  %206 = add i32 %148, %61
  %207 = add i32 %206, %74
  %208 = add i32 %207, %181
  %209 = add i32 %208, %170
  %210 = add i32 %209, %167
  %211 = add i32 %210, %141
  %212 = add i32 %211, %19
  %213 = add i32 %212, %154
  %214 = add i32 %213, %120
  %215 = add i32 %214, %145
  %216 = shl i32 %215, 1
  %217 = add i32 %92, %165
  %218 = sub i32 %65, %217
  %219 = mul i32 %218, 5
  %220 = add i32 %158, %48
  %221 = add i32 %220, %182
  %222 = shl i32 %221, 2
  %223 = sub i32 %35, %175
  %224 = mul i32 %223, 3
  %225 = sub i32 %1, %0
  %226 = add i32 %225, %13
  %227 = add i32 %226, %103
  %228 = add i32 %227, %10
  %229 = sub i32 %228, %41
  %230 = add i32 %229, %5
  %231 = add i32 %230, %43
  %232 = sub i32 %231, %47
  %233 = add i32 %232, %52
  %234 = sub i32 %233, %58
  %235 = sub i32 %234, %63
  %236 = add i32 %235, %49
  %237 = add i32 %236, %56
  %238 = sub i32 %237, %102
  %239 = add i32 %238, %121
  %240 = sub i32 %239, %130
  %241 = add i32 %240, %135
  %242 = add i32 %241, %147
  %243 = add i32 %242, %18
  %244 = add i32 %243, %159
  %245 = add i32 %244, %164
  %246 = add i32 %245, %171
  %247 = sub i32 %246, %177
  %248 = add i32 %247, %184
  %249 = sub i32 %248, %188
  %250 = sub i32 %249, %189
  %251 = sub i32 %250, %194
  %252 = add i32 %251, %16
  %253 = add i32 %252, %15
  %254 = sub i32 %253, %22
  %255 = add i32 %254, %25
  %256 = add i32 %255, %26
  %257 = add i32 %256, %34
  %258 = sub i32 %257, %37
  %259 = sub i32 %258, %40
  %260 = add i32 %259, %44
  %261 = add i32 %260, %46
  %262 = sub i32 %261, %51
  %263 = sub i32 %262, %53
  %264 = add i32 %263, %57
  %265 = add i32 %264, %59
  %266 = sub i32 %265, %60
  %267 = sub i32 %266, %62
  %268 = sub i32 %267, %64
  %269 = add i32 %268, %69
  %270 = sub i32 %269, %70
  %271 = add i32 %270, %78
  %272 = add i32 %271, %80
  %273 = add i32 %272, %82
  %274 = add i32 %273, %83
  %275 = add i32 %274, %84
  %276 = add i32 %275, %85
  %277 = sub i32 %276, %86
  %278 = add i32 %277, %87
  %279 = add i32 %278, %90
  %280 = add i32 %279, %91
  %281 = sub i32 %280, %94
  %282 = add i32 %281, %95
  %283 = sub i32 %282, %96
  %284 = sub i32 %283, %100
  %285 = add i32 %284, %101
  %286 = add i32 %285, %54
  %287 = add i32 %286, %104
  %288 = sub i32 %287, %105
  %289 = add i32 %288, %106
  %290 = sub i32 %289, %108
  %291 = sub i32 %290, %109
  %292 = add i32 %291, %66
  %293 = sub i32 %292, %127
  %294 = sub i32 %293, %128
  %295 = add i32 %294, %129
  %296 = sub i32 %295, %133
  %297 = add i32 %296, %134
  %298 = sub i32 %297, %139
  %299 = sub i32 %298, %140
  %300 = add i32 %299, %142
  %301 = add i32 %300, %143
  %302 = add i32 %301, %146
  %303 = sub i32 %302, %153
  %304 = sub i32 %303, %155
  %305 = sub i32 %304, %156
  %306 = add i32 %305, %157
  %307 = add i32 %306, %160
  %308 = add i32 %307, %161
  %309 = sub i32 %308, %162
  %310 = sub i32 %309, %163
  %311 = add i32 %310, %166
  %312 = sub i32 %311, %168
  %313 = sub i32 %312, %169
  %314 = add i32 %313, %176
  %315 = add i32 %314, %178
  %316 = sub i32 %315, %179
  %317 = sub i32 %316, %180
  %318 = add i32 %317, %75
  %319 = add i32 %318, %185
  %320 = add i32 %319, %186
  %321 = add i32 %320, %187
  %322 = sub i32 %321, %191
  %323 = sub i32 %322, %192
  %324 = add i32 %323, %114
  %325 = sub i32 %324, %193
  %326 = add i32 %325, %30
  %327 = sub i32 %326, %195
  %328 = add i32 %327, %198
  %329 = add i32 %328, %28
  %330 = add i32 %329, %32
  %331 = sub i32 %330, %39
  %332 = sub i32 %331, %55
  %333 = sub i32 %332, %67
  %334 = add i32 %333, %73
  %335 = add i32 %334, %77
  %336 = sub i32 %335, %89
  %337 = sub i32 %336, %98
  %338 = add i32 %337, %107
  %339 = sub i32 %338, %115
  %340 = sub i32 %339, %123
  %341 = sub i32 %340, %125
  %342 = sub i32 %341, %132
  %343 = sub i32 %342, %151
  %344 = sub i32 %343, %152
  %345 = sub i32 %344, %172
  %346 = sub i32 %345, %174
  %347 = add i32 %346, %183
  %348 = add i32 %347, %190
  %349 = add i32 %348, %197
  %350 = add i32 %349, %200
  %351 = add i32 %350, %202
  %352 = sub i32 %351, %203
  %353 = add i32 %352, %205
  %354 = sub i32 %353, %111
  %355 = sub i32 %354, %138
  %356 = add i32 %355, %222
  %357 = add i32 %356, %224
  %358 = add i32 %357, %219
  %359 = add i32 %358, %216
  %360 = icmp eq i32 %12, %359
  %361 = select i1 %360, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %362 = tail call i32 @puts(i8* nonnull dereferenceable(1) %361)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
