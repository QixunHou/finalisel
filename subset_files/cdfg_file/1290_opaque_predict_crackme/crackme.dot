digraph "DFG for'crackme' function" {
	Node0x1ef9d80[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1ef9df0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1ef9e60[shape=record, label="  %7 = sub i32 %1, %6"];
	Node0x1ef9ed0[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x1ef9f40[shape=record, label="  %9 = xor i32 %3, %0"];
	Node0x1ef9fb0[shape=record, label="  %10 = sub i32 %7, %9"];
	Node0x1efa020[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x1efa090[shape=record, label="  %12 = and i32 %5, %1"];
	Node0x1efa100[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x1efa1a0[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x1efa240[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0x1efa2b0[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x1efa320[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1efa3c0[shape=record, label="  %18 = shl i32 %6, 1"];
	Node0x1efa460[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1efa500[shape=record, label="  %20 = mul i32 %11, -3"];
	Node0x1efa570[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x1efa5e0[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x1efa650[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x1efa6c0[shape=record, label="  %24 = and i32 %21, %3"];
	Node0x1efa730[shape=record, label="  %25 = xor i32 %24, -1"];
	Node0x1efa7a0[shape=record, label="  %26 = or i32 %3, %0"];
	Node0x1efa810[shape=record, label="  %27 = xor i32 %26, -1"];
	Node0x1efa880[shape=record, label="  %28 = and i32 %8, %0"];
	Node0x1efa920[shape=record, label="  %29 = shl i32 %24, 3"];
	Node0x1efa990[shape=record, label="  %30 = shl i32 %23, 1"];
	Node0x1efaa00[shape=record, label="  %31 = add i32 %9, %17"];
	Node0x1efaaa0[shape=record, label="  %32 = mul i32 %31, -5"];
	Node0x1efad20[shape=record, label="  %33 = add i32 %12, %0"];
	Node0x1efad90[shape=record, label="  %34 = shl i32 %33, 1"];
	Node0x1efae00[shape=record, label="  %35 = sub i32 1, %22"];
	Node0x1efae70[shape=record, label="  %36 = sub i32 %35, %2"];
	Node0x1efaee0[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0x1efaf50[shape=record, label="  %38 = add i32 %37, %11"];
	Node0x1efafc0[shape=record, label="  %39 = sub i32 %38, %16"];
	Node0x1efb030[shape=record, label="  %40 = sub i32 %39, %3"];
	Node0x1efb0a0[shape=record, label="  %41 = add i32 %40, %8"];
	Node0x1efb110[shape=record, label="  %42 = add i32 %41, %20"];
	Node0x1efb180[shape=record, label="  %43 = add i32 %42, %23"];
	Node0x1efb1f0[shape=record, label="  %44 = add i32 %43, %25"];
	Node0x1efb260[shape=record, label="  %45 = add i32 %44, %27"];
	Node0x1efb2d0[shape=record, label="  %46 = add i32 %45, %28"];
	Node0x1efb340[shape=record, label="  %47 = add i32 %46, %15"];
	Node0x1efb3b0[shape=record, label="  %48 = add i32 %47, %19"];
	Node0x1efb420[shape=record, label="  %49 = add i32 %48, %29"];
	Node0x1efb490[shape=record, label="  %50 = sub i32 %49, %30"];
	Node0x1efb500[shape=record, label="  %51 = add i32 %50, %34"];
	Node0x1efb570[shape=record, label="  %52 = add i32 %51, %32"];
	Node0x1efb5e0[shape=record, label="  %53 = icmp eq i32 %10, %52"];
	Node0x1e9a268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1efba80[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x1efbad0[shape=record, label="  ret void"];
	Node0x1ef9d80 -> Node0x1ef9df0;
	Node0x1ef9df0 -> Node0x1ef9e60;
	Node0x1ef9e60 -> Node0x1ef9ed0;
	Node0x1ef9ed0 -> Node0x1ef9f40;
	Node0x1ef9f40 -> Node0x1ef9fb0;
	Node0x1ef9fb0 -> Node0x1efa020;
	Node0x1efa020 -> Node0x1efa090;
	Node0x1efa090 -> Node0x1efa100;
	Node0x1efa100 -> Node0x1efa1a0;
	Node0x1efa1a0 -> Node0x1efa240;
	Node0x1efa240 -> Node0x1efa2b0;
	Node0x1efa2b0 -> Node0x1efa320;
	Node0x1efa320 -> Node0x1efa3c0;
	Node0x1efa3c0 -> Node0x1efa460;
	Node0x1efa460 -> Node0x1efa500;
	Node0x1efa500 -> Node0x1efa570;
	Node0x1efa570 -> Node0x1efa5e0;
	Node0x1efa5e0 -> Node0x1efa650;
	Node0x1efa650 -> Node0x1efa6c0;
	Node0x1efa6c0 -> Node0x1efa730;
	Node0x1efa730 -> Node0x1efa7a0;
	Node0x1efa7a0 -> Node0x1efa810;
	Node0x1efa810 -> Node0x1efa880;
	Node0x1efa880 -> Node0x1efa920;
	Node0x1efa920 -> Node0x1efa990;
	Node0x1efa990 -> Node0x1efaa00;
	Node0x1efaa00 -> Node0x1efaaa0;
	Node0x1efaaa0 -> Node0x1efad20;
	Node0x1efad20 -> Node0x1efad90;
	Node0x1efad90 -> Node0x1efae00;
	Node0x1efae00 -> Node0x1efae70;
	Node0x1efae70 -> Node0x1efaee0;
	Node0x1efaee0 -> Node0x1efaf50;
	Node0x1efaf50 -> Node0x1efafc0;
	Node0x1efafc0 -> Node0x1efb030;
	Node0x1efb030 -> Node0x1efb0a0;
	Node0x1efb0a0 -> Node0x1efb110;
	Node0x1efb110 -> Node0x1efb180;
	Node0x1efb180 -> Node0x1efb1f0;
	Node0x1efb1f0 -> Node0x1efb260;
	Node0x1efb260 -> Node0x1efb2d0;
	Node0x1efb2d0 -> Node0x1efb340;
	Node0x1efb340 -> Node0x1efb3b0;
	Node0x1efb3b0 -> Node0x1efb420;
	Node0x1efb420 -> Node0x1efb490;
	Node0x1efb490 -> Node0x1efb500;
	Node0x1efb500 -> Node0x1efb570;
	Node0x1efb570 -> Node0x1efb5e0;
	Node0x1efb5e0 -> Node0x1e9a268;
	Node0x1e9a268 -> Node0x1efba80;
	Node0x1efba80 -> Node0x1efbad0;
edge [color=red]
	Node0x1ef9d80 -> Node0x1ef9df0;
	Node0x1ef9df0 -> Node0x1ef9e60;
	Node0x1ef9e60 -> Node0x1ef9fb0;
	Node0x1ef9f40 -> Node0x1ef9fb0;
	Node0x1ef9d80 -> Node0x1efa090;
	Node0x1efa100 -> Node0x1efa1a0;
	Node0x1efa1a0 -> Node0x1efa240;
	Node0x1efa2b0 -> Node0x1efa320;
	Node0x1ef9df0 -> Node0x1efa3c0;
	Node0x1efa3c0 -> Node0x1efa460;
	Node0x1efa020 -> Node0x1efa500;
	Node0x1efa570 -> Node0x1efa5e0;
	Node0x1efa570 -> Node0x1efa6c0;
	Node0x1efa6c0 -> Node0x1efa730;
	Node0x1efa7a0 -> Node0x1efa810;
	Node0x1ef9ed0 -> Node0x1efa880;
	Node0x1efa6c0 -> Node0x1efa920;
	Node0x1efa650 -> Node0x1efa990;
	Node0x1ef9f40 -> Node0x1efaa00;
	Node0x1efa320 -> Node0x1efaa00;
	Node0x1efaa00 -> Node0x1efaaa0;
	Node0x1efa090 -> Node0x1efad20;
	Node0x1efad20 -> Node0x1efad90;
	Node0x1efa5e0 -> Node0x1efae00;
	Node0x1efae00 -> Node0x1efae70;
	Node0x1efae70 -> Node0x1efaee0;
	Node0x1efa090 -> Node0x1efaee0;
	Node0x1efaee0 -> Node0x1efaf50;
	Node0x1efa020 -> Node0x1efaf50;
	Node0x1efaf50 -> Node0x1efafc0;
	Node0x1efa2b0 -> Node0x1efafc0;
	Node0x1efafc0 -> Node0x1efb030;
	Node0x1efb030 -> Node0x1efb0a0;
	Node0x1ef9ed0 -> Node0x1efb0a0;
	Node0x1efb0a0 -> Node0x1efb110;
	Node0x1efa500 -> Node0x1efb110;
	Node0x1efb110 -> Node0x1efb180;
	Node0x1efa650 -> Node0x1efb180;
	Node0x1efb180 -> Node0x1efb1f0;
	Node0x1efa730 -> Node0x1efb1f0;
	Node0x1efb1f0 -> Node0x1efb260;
	Node0x1efa810 -> Node0x1efb260;
	Node0x1efb260 -> Node0x1efb2d0;
	Node0x1efa880 -> Node0x1efb2d0;
	Node0x1efb2d0 -> Node0x1efb340;
	Node0x1efa240 -> Node0x1efb340;
	Node0x1efb340 -> Node0x1efb3b0;
	Node0x1efa460 -> Node0x1efb3b0;
	Node0x1efb3b0 -> Node0x1efb420;
	Node0x1efa920 -> Node0x1efb420;
	Node0x1efb420 -> Node0x1efb490;
	Node0x1efa990 -> Node0x1efb490;
	Node0x1efb490 -> Node0x1efb500;
	Node0x1efad90 -> Node0x1efb500;
	Node0x1efb500 -> Node0x1efb570;
	Node0x1efaaa0 -> Node0x1efb570;
	Node0x1ef9fb0 -> Node0x1efb5e0;
	Node0x1efb570 -> Node0x1efb5e0;
	Node0x1efb5e0 -> Node0x1e9a268;
	Node0x1e9a268 -> Node0x1efba80;
}
