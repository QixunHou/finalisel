; ModuleID = '../.././c_source_file/0174_path_condition_crackme.c'
source_filename = "../.././c_source_file/0174_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %0, -1
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %1
  %9 = or i32 %8, %6
  %10 = add i32 %0, 1
  %11 = sub i32 %10, %3
  %12 = sub i32 %11, %9
  %13 = xor i32 %4, -1
  %14 = or i32 %13, %3
  %15 = shl i32 %4, 1
  %16 = or i32 %4, %3
  %17 = xor i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = add i32 %4, 1
  %20 = and i32 %4, %3
  %21 = shl i32 %16, 2
  %22 = xor i32 %21, -4
  %23 = xor i32 %14, -1
  %24 = and i32 %13, %3
  %25 = xor i32 %1, %0
  %26 = xor i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %25, %27
  %29 = or i32 %1, %0
  %30 = and i32 %29, %27
  %31 = shl i32 %30, 1
  %32 = and i32 %26, %25
  %33 = xor i32 %1, -1
  %34 = or i32 %7, %0
  %35 = and i32 %34, %33
  %36 = and i32 %2, %1
  %37 = and i32 %36, %0
  %38 = or i32 %2, %1
  %39 = and i32 %38, %6
  %40 = xor i32 %37, -1
  %41 = xor i32 %39, %40
  %42 = and i32 %33, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %2, %1
  %45 = and i32 %44, %43
  %46 = and i32 %2, %0
  %47 = xor i32 %46, %29
  %48 = or i32 %33, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %44, %49
  %51 = and i32 %33, %2
  %52 = and i32 %51, %0
  %53 = or i32 %44, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %52, %54
  %56 = shl i32 %42, 1
  %57 = xor i32 %29, %2
  %58 = xor i32 %46, -1
  %59 = add i32 %46, 1
  %60 = and i32 %8, %6
  %61 = and i32 %51, %6
  %62 = or i32 %33, %2
  %63 = and i32 %62, %0
  %64 = xor i32 %63, 2147483647
  %65 = xor i32 %64, %61
  %66 = shl i32 %65, 1
  %67 = xor i32 %34, -1
  %68 = or i32 %67, %33
  %69 = shl i32 %68, 1
  %70 = or i32 %2, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %71, %33
  %73 = xor i32 %29, -1
  %74 = or i32 %7, %73
  %75 = and i32 %58, %1
  %76 = add i32 %70, 1
  %77 = and i32 %7, %43
  %78 = and i32 %26, %33
  %79 = and i32 %7, %0
  %80 = xor i32 %79, %1
  %81 = xor i32 %8, -1
  %82 = or i32 %81, %6
  %83 = or i32 %42, %2
  %84 = or i32 %67, %1
  %85 = and i32 %62, %6
  %86 = xor i32 %52, -1
  %87 = xor i32 %85, %86
  %88 = and i32 %1, %0
  %89 = xor i32 %88, -1
  %90 = xor i32 %89, %2
  %91 = and i32 %27, %33
  %92 = xor i32 %81, %0
  %93 = xor i32 %8, %88
  %94 = and i32 %48, %2
  %95 = xor i32 %43, %2
  %96 = and i32 %89, %2
  %97 = or i32 %88, %67
  %98 = and i32 %44, %6
  %99 = or i32 %37, %98
  %100 = or i32 %46, %1
  %101 = xor i32 %25, -1
  %102 = and i32 %34, %101
  %103 = and i32 %36, %6
  %104 = and i32 %38, %0
  %105 = or i32 %103, %104
  %106 = or i32 %44, %6
  %107 = xor i32 %44, -1
  %108 = and i32 %29, %107
  %109 = shl i32 %108, 1
  %110 = or i32 %36, %42
  %111 = xor i32 %38, -1
  %112 = or i32 %88, %111
  %113 = and i32 %7, %1
  %114 = xor i32 %113, -1
  %115 = and i32 %114, %6
  %116 = shl i32 %115, 1
  %117 = xor i32 %79, -1
  %118 = and i32 %117, %101
  %119 = xor i32 %113, %0
  %120 = or i32 %44, %88
  %121 = shl i32 %120, 1
  %122 = or i32 %26, %101
  %123 = or i32 %7, %49
  %124 = add i32 %29, 1
  %125 = xor i32 %46, %1
  %126 = xor i32 %49, %2
  %127 = xor i32 %70, %88
  %128 = or i32 %46, %73
  %129 = xor i32 %106, -1
  %130 = or i32 %61, %129
  %131 = or i32 %42, %27
  %132 = shl i32 %131, 1
  %133 = or i32 %25, %7
  %134 = xor i32 %98, %40
  %135 = shl i32 %26, 1
  %136 = or i32 %107, %73
  %137 = or i32 %26, %73
  %138 = shl i32 %137, 1
  %139 = xor i32 %36, -1
  %140 = and i32 %139, %0
  %141 = or i32 %113, %6
  %142 = or i32 %38, %6
  %143 = shl i32 %142, 1
  %144 = xor i32 %79, %8
  %145 = shl i32 %144, 1
  %146 = or i32 %139, %6
  %147 = or i32 %46, %25
  %148 = and i32 %44, %29
  %149 = or i32 %139, %0
  %150 = xor i32 %61, %106
  %151 = xor i32 %107, %0
  %152 = or i32 %27, %101
  %153 = or i32 %27, %1
  %154 = or i32 %107, %6
  %155 = and i32 %29, %2
  %156 = and i32 %27, %89
  %157 = or i32 %111, %0
  %158 = xor i32 %117, %1
  %159 = and i32 %26, %29
  %160 = or i32 %71, %101
  %161 = xor i32 %88, %2
  %162 = shl i32 %161, 1
  %163 = or i32 %46, %111
  %164 = and i32 %114, %0
  %165 = xor i32 %46, %48
  %166 = or i32 %26, %88
  %167 = or i32 %26, %1
  %168 = or i32 %46, %101
  %169 = and i32 %25, %117
  %170 = and i32 %70, %1
  %171 = shl i32 %170, 1
  %172 = and i32 %139, %6
  %173 = or i32 %36, %6
  %174 = and i32 %29, %7
  %175 = xor i32 %42, %114
  %176 = xor i32 %73, %2
  %177 = shl i32 %176, 1
  %178 = and i32 %107, %6
  %179 = or i32 %49, %2
  %180 = or i32 %73, %2
  %181 = shl i32 %180, 2
  %182 = or i32 %26, %25
  %183 = or i32 %67, %101
  %184 = and i32 %107, %43
  %185 = or i32 %79, %33
  %186 = or i32 %26, %49
  %187 = and i32 %26, %48
  %188 = shl i32 %187, 1
  %189 = or i32 %26, %33
  %190 = and i32 %70, %33
  %191 = and i32 %27, %43
  %192 = xor i32 %111, %0
  %193 = and i32 %25, %2
  %194 = and i32 %26, %1
  %195 = or i32 %42, %7
  %196 = xor i32 %8, %0
  %197 = or i32 %88, %107
  %198 = xor i32 %62, %0
  %199 = or i32 %52, %198
  %200 = and i32 %27, %101
  %201 = and i32 %70, %101
  %202 = or i32 %46, %113
  %203 = xor i32 %198, %86
  %204 = and i32 %7, %89
  %205 = and i32 %26, %89
  %206 = and i32 %44, %89
  %207 = or i32 %38, %0
  %208 = and i32 %48, %107
  %209 = add i32 %34, 1
  %210 = and i32 %44, %0
  %211 = or i32 %103, %210
  %212 = xor i32 %79, %139
  %213 = or i32 %25, %71
  %214 = xor i32 %42, %139
  %215 = xor i32 %103, -1
  %216 = xor i32 %104, %215
  %217 = or i32 %88, %27
  %218 = or i32 %44, %42
  %219 = shl i32 %218, 1
  %220 = and i32 %107, %0
  %221 = or i32 %79, %25
  %222 = xor i32 %44, %0
  %223 = and i32 %34, %1
  %224 = xor i32 %52, %53
  %225 = or i32 %42, %107
  %226 = add i32 %36, 1
  %227 = and i32 %25, %27
  %228 = and i32 %107, %89
  %229 = or i32 %81, %0
  %230 = or i32 %88, %2
  %231 = xor i32 %67, %1
  %232 = and i32 %34, %25
  %233 = and i32 %58, %101
  %234 = or i32 %113, %0
  %235 = and i32 %25, %58
  %236 = or i32 %61, %63
  %237 = add i32 %1, 1
  %238 = or i32 %88, %7
  %239 = shl i32 %238, 1
  %240 = or i32 %71, %1
  %241 = shl i32 %240, 2
  %242 = or i32 %52, %222
  %243 = xor i32 %222, -1
  %244 = xor i32 %52, %243
  %245 = or i32 %101, %2
  %246 = shl i32 %245, 1
  %247 = or i32 %27, %73
  %248 = or i32 %36, %0
  %249 = and i32 %25, %7
  %250 = xor i32 %34, %1
  %251 = or i32 %25, %67
  %252 = or i32 %26, %42
  %253 = or i32 %25, %2
  %254 = xor i32 %46, %114
  %255 = and i32 %70, %25
  %256 = and i32 %58, %33
  %257 = or i32 %44, %73
  %258 = xor i32 %70, %1
  %259 = add i32 %113, 1
  %260 = xor i32 %38, %88
  %261 = xor i32 %42, %2
  %262 = xor i32 %114, %0
  %263 = xor i32 %38, %0
  %264 = xor i32 %263, %40
  %265 = or i32 %114, %6
  %266 = or i32 %27, %49
  %267 = shl i32 %266, 1
  %268 = and i32 %44, %48
  %269 = xor i32 %210, %215
  %270 = or i32 %52, %85
  %271 = xor i32 %139, %0
  %272 = or i32 %114, %0
  %273 = shl i32 %272, 1
  %274 = or i32 %37, %243
  %275 = and i32 %48, %7
  %276 = and i32 %26, %43
  %277 = or i32 %37, %263
  %278 = xor i32 %34, %88
  %279 = or i32 %8, %0
  %280 = and i32 %101, %2
  %281 = shl i32 %280, 1
  %282 = xor i32 %46, %38
  %283 = shl i32 %282, 1
  %284 = xor i32 %37, %222
  %285 = xor i32 %71, %1
  %286 = or i32 %107, %0
  %287 = or i32 %113, %42
  %288 = shl i32 %287, 1
  %289 = or i32 %37, %39
  %290 = or i32 %46, %33
  %291 = shl i32 %290, 1
  %292 = and i32 %43, %2
  %293 = or i32 %88, %71
  %294 = xor i32 %58, %1
  %295 = or i32 %107, %49
  %296 = and i32 %117, %1
  %297 = or i32 %7, %101
  %298 = and i32 %26, %101
  %299 = shl i32 %298, 1
  %300 = or i32 %88, %81
  %301 = or i32 %111, %6
  %302 = or i32 %79, %1
  %303 = xor i32 %48, %2
  %304 = and i32 %7, %101
  %305 = or i32 %79, %81
  %306 = or i32 %79, %101
  %307 = or i32 %46, %49
  %308 = and i32 %111, %6
  %309 = shl i32 %308, 3
  %310 = and i32 %113, %6
  %311 = mul i32 %310, -11
  %312 = and i32 %111, %0
  %313 = shl i32 %312, 3
  %314 = and i32 %113, %0
  %315 = mul i32 %314, -6
  %316 = and i32 %81, %6
  %317 = shl i32 %316, 2
  %318 = and i32 %81, %0
  %319 = mul i32 %318, -12
  %320 = mul i32 %37, -14
  %321 = add i32 %133, %101
  %322 = add i32 %321, %103
  %323 = add i32 %322, %294
  %324 = add i32 %323, %262
  %325 = add i32 %324, %250
  %326 = add i32 %325, %248
  %327 = add i32 %326, %233
  %328 = add i32 %327, %227
  %329 = add i32 %328, %208
  %330 = add i32 %329, %197
  %331 = add i32 %330, %185
  %332 = add i32 %331, %112
  %333 = add i32 %332, %106
  %334 = add i32 %333, %82
  %335 = add i32 %334, %50
  %336 = add i32 %335, %45
  %337 = add i32 %336, %270
  %338 = add i32 %337, %289
  %339 = add i32 %338, %20
  %340 = add i32 %339, %17
  %341 = sub i32 %340, %14
  %342 = shl i32 %341, 1
  %343 = add i32 %230, %259
  %344 = add i32 %343, %164
  %345 = add i32 %344, %229
  %346 = mul i32 %345, 5
  %347 = add i32 %43, %1
  %348 = add i32 %347, %234
  %349 = shl i32 %348, 2
  %350 = add i32 %70, -1
  %351 = add i32 %350, %57
  %352 = sub i32 %351, %201
  %353 = add i32 %352, %260
  %354 = add i32 %353, %159
  %355 = mul i32 %354, 3
  %356 = add i32 %237, %0
  %357 = sub i32 %356, %48
  %358 = sub i32 %357, %25
  %359 = add i32 %358, %124
  %360 = sub i32 %359, %48
  %361 = sub i32 %360, %56
  %362 = add i32 %361, %59
  %363 = sub i32 %362, %74
  %364 = add i32 %363, %76
  %365 = sub i32 %364, %77
  %366 = sub i32 %365, %83
  %367 = add i32 %366, %90
  %368 = add i32 %367, %94
  %369 = sub i32 %368, %95
  %370 = add i32 %369, %96
  %371 = sub i32 %370, %8
  %372 = sub i32 %371, %38
  %373 = sub i32 %372, %123
  %374 = sub i32 %373, %126
  %375 = add i32 %374, %34
  %376 = add i32 %375, %155
  %377 = add i32 %376, %174
  %378 = add i32 %377, %179
  %379 = add i32 %378, %193
  %380 = add i32 %379, %195
  %381 = add i32 %380, %36
  %382 = sub i32 %381, %204
  %383 = add i32 %382, %209
  %384 = sub i32 %383, %113
  %385 = add i32 %384, %226
  %386 = add i32 %385, %111
  %387 = add i32 %386, %249
  %388 = add i32 %387, %253
  %389 = add i32 %388, %27
  %390 = add i32 %389, %46
  %391 = add i32 %390, %81
  %392 = sub i32 %391, %261
  %393 = add i32 %392, %275
  %394 = sub i32 %393, %292
  %395 = add i32 %394, %297
  %396 = add i32 %395, %303
  %397 = add i32 %396, %304
  %398 = add i32 %397, %19
  %399 = sub i32 %398, %28
  %400 = sub i32 %399, %32
  %401 = sub i32 %400, %35
  %402 = add i32 %401, %47
  %403 = sub i32 %402, %60
  %404 = sub i32 %403, %72
  %405 = sub i32 %404, %75
  %406 = sub i32 %405, %78
  %407 = sub i32 %406, %80
  %408 = sub i32 %407, %84
  %409 = add i32 %408, %91
  %410 = sub i32 %409, %92
  %411 = sub i32 %410, %93
  %412 = add i32 %411, %97
  %413 = sub i32 %412, %100
  %414 = sub i32 %413, %102
  %415 = add i32 %414, %110
  %416 = add i32 %415, %118
  %417 = add i32 %416, %119
  %418 = add i32 %417, %122
  %419 = add i32 %418, %125
  %420 = add i32 %419, %98
  %421 = sub i32 %420, %127
  %422 = add i32 %421, %128
  %423 = sub i32 %422, %135
  %424 = sub i32 %423, %136
  %425 = add i32 %424, %140
  %426 = add i32 %425, %141
  %427 = sub i32 %426, %104
  %428 = add i32 %427, %146
  %429 = add i32 %428, %147
  %430 = sub i32 %429, %148
  %431 = add i32 %430, %149
  %432 = sub i32 %431, %151
  %433 = add i32 %432, %152
  %434 = add i32 %433, %153
  %435 = add i32 %434, %154
  %436 = add i32 %435, %156
  %437 = add i32 %436, %157
  %438 = add i32 %437, %158
  %439 = add i32 %438, %160
  %440 = sub i32 %439, %162
  %441 = sub i32 %440, %163
  %442 = sub i32 %441, %165
  %443 = add i32 %442, %166
  %444 = add i32 %443, %167
  %445 = sub i32 %444, %168
  %446 = sub i32 %445, %169
  %447 = add i32 %446, %172
  %448 = add i32 %447, %173
  %449 = sub i32 %448, %175
  %450 = sub i32 %449, %177
  %451 = add i32 %450, %178
  %452 = sub i32 %451, %181
  %453 = sub i32 %452, %182
  %454 = sub i32 %453, %183
  %455 = add i32 %454, %184
  %456 = sub i32 %455, %186
  %457 = add i32 %456, %189
  %458 = sub i32 %457, %53
  %459 = add i32 %458, %190
  %460 = add i32 %459, %191
  %461 = add i32 %460, %192
  %462 = sub i32 %461, %194
  %463 = add i32 %462, %196
  %464 = add i32 %463, %200
  %465 = sub i32 %464, %202
  %466 = sub i32 %465, %205
  %467 = add i32 %466, %206
  %468 = add i32 %467, %207
  %469 = sub i32 %468, %212
  %470 = sub i32 %469, %213
  %471 = sub i32 %470, %214
  %472 = sub i32 %471, %217
  %473 = sub i32 %472, %220
  %474 = add i32 %473, %221
  %475 = add i32 %474, %222
  %476 = sub i32 %475, %223
  %477 = add i32 %476, %225
  %478 = sub i32 %477, %228
  %479 = sub i32 %478, %231
  %480 = add i32 %479, %232
  %481 = add i32 %480, %39
  %482 = sub i32 %481, %235
  %483 = sub i32 %482, %239
  %484 = sub i32 %483, %246
  %485 = add i32 %484, %247
  %486 = sub i32 %485, %251
  %487 = sub i32 %486, %252
  %488 = sub i32 %487, %210
  %489 = sub i32 %488, %254
  %490 = sub i32 %489, %255
  %491 = add i32 %490, %256
  %492 = sub i32 %491, %257
  %493 = sub i32 %492, %258
  %494 = sub i32 %493, %265
  %495 = sub i32 %494, %268
  %496 = sub i32 %495, %271
  %497 = sub i32 %496, %276
  %498 = sub i32 %497, %278
  %499 = add i32 %498, %279
  %500 = sub i32 %499, %281
  %501 = add i32 %500, %285
  %502 = sub i32 %501, %286
  %503 = sub i32 %502, %293
  %504 = add i32 %503, %295
  %505 = add i32 %504, %296
  %506 = sub i32 %505, %300
  %507 = sub i32 %506, %301
  %508 = sub i32 %507, %302
  %509 = add i32 %508, %305
  %510 = sub i32 %509, %306
  %511 = add i32 %510, %307
  %512 = add i32 %511, %263
  %513 = sub i32 %512, %15
  %514 = add i32 %513, %16
  %515 = add i32 %514, %18
  %516 = add i32 %515, %20
  %517 = add i32 %516, %23
  %518 = add i32 %517, %24
  %519 = sub i32 %518, %31
  %520 = sub i32 %519, %41
  %521 = sub i32 %520, %55
  %522 = sub i32 %521, %69
  %523 = sub i32 %522, %87
  %524 = add i32 %523, %99
  %525 = add i32 %524, %105
  %526 = sub i32 %525, %109
  %527 = sub i32 %526, %116
  %528 = sub i32 %527, %121
  %529 = add i32 %528, %130
  %530 = sub i32 %529, %132
  %531 = sub i32 %530, %134
  %532 = sub i32 %531, %138
  %533 = sub i32 %532, %143
  %534 = sub i32 %533, %145
  %535 = add i32 %534, %150
  %536 = sub i32 %535, %171
  %537 = sub i32 %536, %188
  %538 = sub i32 %537, %199
  %539 = sub i32 %538, %203
  %540 = sub i32 %539, %211
  %541 = add i32 %540, %216
  %542 = sub i32 %541, %219
  %543 = sub i32 %542, %224
  %544 = add i32 %543, %236
  %545 = sub i32 %544, %241
  %546 = add i32 %545, %242
  %547 = sub i32 %546, %244
  %548 = add i32 %547, %264
  %549 = sub i32 %548, %267
  %550 = sub i32 %549, %269
  %551 = sub i32 %550, %273
  %552 = sub i32 %551, %274
  %553 = add i32 %552, %277
  %554 = sub i32 %553, %283
  %555 = add i32 %554, %284
  %556 = sub i32 %555, %288
  %557 = sub i32 %556, %291
  %558 = sub i32 %557, %299
  %559 = add i32 %558, %309
  %560 = add i32 %559, %311
  %561 = sub i32 %560, %313
  %562 = add i32 %561, %315
  %563 = sub i32 %562, %317
  %564 = add i32 %563, %319
  %565 = add i32 %564, %320
  %566 = add i32 %565, %22
  %567 = sub i32 %566, %66
  %568 = add i32 %567, %349
  %569 = add i32 %568, %346
  %570 = add i32 %569, %355
  %571 = add i32 %570, %342
  %572 = icmp eq i32 %12, %571
  %573 = select i1 %572, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %574 = tail call i32 @puts(i8* nonnull dereferenceable(1) %573)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
