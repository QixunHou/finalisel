digraph "DFG for'crackme' function" {
	Node0x7f5420[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x7f5490[shape=record, label="  %4 = sub i32 %1, %3"];
	Node0x7f5b60[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x7f5bd0[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x7f5c70[shape=record, label="  %7 = mul i32 %6, 5"];
	Node0x7f5ce0[shape=record, label="  %8 = and i32 %5, %0"];
	Node0x7f5d80[shape=record, label="  %9 = shl i32 %8, 2"];
	Node0x7f5df0[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x7f5e60[shape=record, label="  %11 = sub i32 %3, %6"];
	Node0x7f5f00[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x7f5f70[shape=record, label="  %13 = sub i32 3, %0"];
	Node0x7f5fe0[shape=record, label="  %14 = add i32 %13, %5"];
	Node0x7f6050[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x7f60c0[shape=record, label="  %16 = sub i32 %15, %10"];
	Node0x7f6130[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x7f61a0[shape=record, label="  %18 = sub i32 %17, %9"];
	Node0x7f6210[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x7f6280[shape=record, label="  %20 = icmp eq i32 %4, %19"];
	Node0x796268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7f6720[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x7f6770[shape=record, label="  ret void"];
	Node0x7f5420 -> Node0x7f5490;
	Node0x7f5490 -> Node0x7f5b60;
	Node0x7f5b60 -> Node0x7f5bd0;
	Node0x7f5bd0 -> Node0x7f5c70;
	Node0x7f5c70 -> Node0x7f5ce0;
	Node0x7f5ce0 -> Node0x7f5d80;
	Node0x7f5d80 -> Node0x7f5df0;
	Node0x7f5df0 -> Node0x7f5e60;
	Node0x7f5e60 -> Node0x7f5f00;
	Node0x7f5f00 -> Node0x7f5f70;
	Node0x7f5f70 -> Node0x7f5fe0;
	Node0x7f5fe0 -> Node0x7f6050;
	Node0x7f6050 -> Node0x7f60c0;
	Node0x7f60c0 -> Node0x7f6130;
	Node0x7f6130 -> Node0x7f61a0;
	Node0x7f61a0 -> Node0x7f6210;
	Node0x7f6210 -> Node0x7f6280;
	Node0x7f6280 -> Node0x796268;
	Node0x796268 -> Node0x7f6720;
	Node0x7f6720 -> Node0x7f6770;
edge [color=red]
	Node0x7f5420 -> Node0x7f5490;
	Node0x7f5b60 -> Node0x7f5bd0;
	Node0x7f5bd0 -> Node0x7f5c70;
	Node0x7f5b60 -> Node0x7f5ce0;
	Node0x7f5ce0 -> Node0x7f5d80;
	Node0x7f5420 -> Node0x7f5e60;
	Node0x7f5bd0 -> Node0x7f5e60;
	Node0x7f5e60 -> Node0x7f5f00;
	Node0x7f5f70 -> Node0x7f5fe0;
	Node0x7f5b60 -> Node0x7f5fe0;
	Node0x7f5fe0 -> Node0x7f6050;
	Node0x7f5ce0 -> Node0x7f6050;
	Node0x7f6050 -> Node0x7f60c0;
	Node0x7f5df0 -> Node0x7f60c0;
	Node0x7f60c0 -> Node0x7f6130;
	Node0x7f5c70 -> Node0x7f6130;
	Node0x7f6130 -> Node0x7f61a0;
	Node0x7f5d80 -> Node0x7f61a0;
	Node0x7f61a0 -> Node0x7f6210;
	Node0x7f5f00 -> Node0x7f6210;
	Node0x7f5490 -> Node0x7f6280;
	Node0x7f6210 -> Node0x7f6280;
	Node0x7f6280 -> Node0x796268;
	Node0x796268 -> Node0x7f6720;
}
