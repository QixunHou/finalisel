digraph "DFG for'crackme' function" {
	Node0x233eb20[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x233eb90[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x233ec50[shape=record, label="  %5 = add i32 %4, %3"];
	Node0x233ecc0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x233ed30[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x233eda0[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x233ee10[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x233ee80[shape=record, label="  %10 = xor i32 %4, -1"];
	Node0x233eef0[shape=record, label="  %11 = shl i32 %7, 1"];
	Node0x233ef90[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x233f000[shape=record, label="  %13 = and i32 %6, %0"];
	Node0x233f070[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x233f0e0[shape=record, label="  %15 = sub i32 %8, %1"];
	Node0x233f180[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x233f1f0[shape=record, label="  %17 = xor i32 %7, -1"];
	Node0x233f260[shape=record, label="  %18 = add i32 %17, %1"];
	Node0x233f2d0[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x233f340[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0x233f3b0[shape=record, label="  %21 = sub i32 %20, %14"];
	Node0x233f420[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x233f490[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x233f500[shape=record, label="  %24 = icmp eq i32 %5, %23"];
	Node0x22df268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x233f9a0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x233f9f0[shape=record, label="  ret void"];
	Node0x233eb20 -> Node0x233eb90;
	Node0x233eb90 -> Node0x233ec50;
	Node0x233ec50 -> Node0x233ecc0;
	Node0x233ecc0 -> Node0x233ed30;
	Node0x233ed30 -> Node0x233eda0;
	Node0x233eda0 -> Node0x233ee10;
	Node0x233ee10 -> Node0x233ee80;
	Node0x233ee80 -> Node0x233eef0;
	Node0x233eef0 -> Node0x233ef90;
	Node0x233ef90 -> Node0x233f000;
	Node0x233f000 -> Node0x233f070;
	Node0x233f070 -> Node0x233f0e0;
	Node0x233f0e0 -> Node0x233f180;
	Node0x233f180 -> Node0x233f1f0;
	Node0x233f1f0 -> Node0x233f260;
	Node0x233f260 -> Node0x233f2d0;
	Node0x233f2d0 -> Node0x233f340;
	Node0x233f340 -> Node0x233f3b0;
	Node0x233f3b0 -> Node0x233f420;
	Node0x233f420 -> Node0x233f490;
	Node0x233f490 -> Node0x233f500;
	Node0x233f500 -> Node0x22df268;
	Node0x22df268 -> Node0x233f9a0;
	Node0x233f9a0 -> Node0x233f9f0;
edge [color=red]
	Node0x233eb90 -> Node0x233ec50;
	Node0x233eb20 -> Node0x233ec50;
	Node0x233ecc0 -> Node0x233ed30;
	Node0x233eda0 -> Node0x233ee10;
	Node0x233eb90 -> Node0x233ee80;
	Node0x233ed30 -> Node0x233eef0;
	Node0x233eef0 -> Node0x233ef90;
	Node0x233ecc0 -> Node0x233f000;
	Node0x233f000 -> Node0x233f070;
	Node0x233eda0 -> Node0x233f0e0;
	Node0x233f0e0 -> Node0x233f180;
	Node0x233ed30 -> Node0x233f1f0;
	Node0x233f1f0 -> Node0x233f260;
	Node0x233f260 -> Node0x233f2d0;
	Node0x233ee80 -> Node0x233f2d0;
	Node0x233f2d0 -> Node0x233f340;
	Node0x233ee10 -> Node0x233f340;
	Node0x233f340 -> Node0x233f3b0;
	Node0x233f070 -> Node0x233f3b0;
	Node0x233f3b0 -> Node0x233f420;
	Node0x233ef90 -> Node0x233f420;
	Node0x233f420 -> Node0x233f490;
	Node0x233f180 -> Node0x233f490;
	Node0x233ec50 -> Node0x233f500;
	Node0x233f490 -> Node0x233f500;
	Node0x233f500 -> Node0x22df268;
	Node0x22df268 -> Node0x233f9a0;
}
