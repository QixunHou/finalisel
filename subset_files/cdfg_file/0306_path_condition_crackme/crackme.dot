digraph "DFG for'crackme' function" {
	Node0x10252d0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1025980[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1025a40[shape=record, label="  %5 = add i32 %1, 1"];
	Node0x1025ab0[shape=record, label="  %6 = add i32 %3, %5"];
	Node0x1025b20[shape=record, label="  %7 = or i32 %4, %0"];
	Node0x1025b90[shape=record, label="  %8 = add i32 %6, %7"];
	Node0x1025c00[shape=record, label="  %9 = and i32 %4, %0"];
	Node0x1025c70[shape=record, label="  %10 = add i32 %8, %9"];
	Node0x1025ce0[shape=record, label="  %11 = shl i32 %9, 1"];
	Node0x1025d50[shape=record, label="  %12 = sub i32 %10, %11"];
	Node0x1025dc0[shape=record, label="  %13 = icmp eq i32 %12, %1"];
	Node0xfc6388[shape=record, label="  %14 = select i1 %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1026260[shape=record, label="  %15 = tail call i32 @puts(i8* nonnull dereferenceable(1) %14)"];
	Node0x10262b0[shape=record, label="  ret void"];
	Node0x10252d0 -> Node0x1025980;
	Node0x1025980 -> Node0x1025a40;
	Node0x1025a40 -> Node0x1025ab0;
	Node0x1025ab0 -> Node0x1025b20;
	Node0x1025b20 -> Node0x1025b90;
	Node0x1025b90 -> Node0x1025c00;
	Node0x1025c00 -> Node0x1025c70;
	Node0x1025c70 -> Node0x1025ce0;
	Node0x1025ce0 -> Node0x1025d50;
	Node0x1025d50 -> Node0x1025dc0;
	Node0x1025dc0 -> Node0xfc6388;
	Node0xfc6388 -> Node0x1026260;
	Node0x1026260 -> Node0x10262b0;
edge [color=red]
	Node0x10252d0 -> Node0x1025ab0;
	Node0x1025a40 -> Node0x1025ab0;
	Node0x1025980 -> Node0x1025b20;
	Node0x1025ab0 -> Node0x1025b90;
	Node0x1025b20 -> Node0x1025b90;
	Node0x1025980 -> Node0x1025c00;
	Node0x1025b90 -> Node0x1025c70;
	Node0x1025c00 -> Node0x1025c70;
	Node0x1025c00 -> Node0x1025ce0;
	Node0x1025c70 -> Node0x1025d50;
	Node0x1025ce0 -> Node0x1025d50;
	Node0x1025d50 -> Node0x1025dc0;
	Node0x1025dc0 -> Node0xfc6388;
	Node0xfc6388 -> Node0x1026260;
}
