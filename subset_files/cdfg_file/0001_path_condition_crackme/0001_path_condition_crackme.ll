; ModuleID = '../.././c_source_file/0001_path_condition_crackme.c'
source_filename = "../.././c_source_file/0001_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = xor i32 %6, -2
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %2, %0
  %11 = and i32 %10, %9
  %12 = add i32 %6, %1
  %13 = add i32 %12, %11
  %14 = add i32 %13, %7
  %15 = xor i32 %4, -1
  %16 = and i32 %15, %3
  %17 = xor i32 %16, -1
  %18 = and i32 %4, %3
  %19 = xor i32 %18, -1
  %20 = xor i32 %4, %3
  %21 = or i32 %15, %3
  %22 = or i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = xor i32 %10, -1
  %25 = and i32 %9, %24
  %26 = or i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = xor i32 %27, %0
  %29 = and i32 %2, %0
  %30 = or i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %29, %31
  %33 = and i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = add i32 %33, 1
  %36 = and i32 %8, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %2, %1
  %39 = xor i32 %38, -1
  %40 = and i32 %39, %37
  %41 = xor i32 %1, %0
  %42 = xor i32 %41, -1
  %43 = and i32 %24, %42
  %44 = xor i32 %0, -1
  %45 = and i32 %33, %44
  %46 = and i32 %38, %0
  %47 = or i32 %45, %46
  %48 = and i32 %1, %0
  %49 = xor i32 %2, -1
  %50 = or i32 %49, %0
  %51 = xor i32 %50, %48
  %52 = or i32 %36, %39
  %53 = shl i32 %52, 1
  %54 = or i32 %49, %1
  %55 = and i32 %54, %0
  %56 = and i32 %10, %1
  %57 = or i32 %2, %0
  %58 = and i32 %57, %41
  %59 = or i32 %42, %2
  %60 = and i32 %24, %37
  %61 = or i32 %36, %24
  %62 = and i32 %33, %0
  %63 = xor i32 %38, %0
  %64 = xor i32 %62, %63
  %65 = xor i32 %54, %0
  %66 = shl i32 %65, 1
  %67 = and i32 %50, %41
  %68 = and i32 %8, %2
  %69 = and i32 %68, %0
  %70 = or i32 %8, %2
  %71 = and i32 %70, %44
  %72 = xor i32 %69, -1
  %73 = xor i32 %71, %72
  %74 = xor i32 %57, %48
  %75 = shl i32 %74, 1
  %76 = xor i32 %26, %0
  %77 = xor i32 %62, -1
  %78 = xor i32 %76, %77
  %79 = xor i32 %50, -1
  %80 = xor i32 %79, %1
  %81 = and i32 %38, %44
  %82 = xor i32 %81, %77
  %83 = or i32 %24, %8
  %84 = and i32 %26, %0
  %85 = and i32 %50, %8
  %86 = shl i32 %85, 1
  %87 = xor i32 %54, %48
  %88 = xor i32 %45, -1
  %89 = xor i32 %46, %88
  %90 = and i32 %49, %1
  %91 = xor i32 %90, -1
  %92 = or i32 %91, %44
  %93 = xor i32 %31, %2
  %94 = and i32 %10, %37
  %95 = xor i32 %29, -1
  %96 = and i32 %95, %42
  %97 = or i32 %26, %44
  %98 = and i32 %24, %8
  %99 = xor i32 %29, %30
  %100 = and i32 %49, %0
  %101 = xor i32 %100, -1
  %102 = and i32 %41, %101
  %103 = and i32 %9, %49
  %104 = and i32 %10, %42
  %105 = or i32 %79, %1
  %106 = or i32 %69, %63
  %107 = xor i32 %70, %0
  %108 = or i32 %69, %107
  %109 = and i32 %41, %2
  %110 = or i32 %29, %27
  %111 = or i32 %69, %71
  %112 = xor i32 %48, -1
  %113 = and i32 %10, %30
  %114 = xor i32 %29, %1
  %115 = or i32 %41, %49
  %116 = or i32 %49, %31
  %117 = or i32 %100, %1
  %118 = and i32 %68, %44
  %119 = or i32 %38, %44
  %120 = xor i32 %119, -1
  %121 = or i32 %118, %120
  %122 = and i32 %37, %2
  %123 = add i32 %36, 1
  %124 = and i32 %101, %1
  %125 = xor i32 %29, %26
  %126 = xor i32 %29, %9
  %127 = and i32 %24, %112
  %128 = or i32 %79, %42
  %129 = xor i32 %34, %0
  %130 = xor i32 %112, %2
  %131 = or i32 %48, %27
  %132 = or i32 %38, %0
  %133 = or i32 %33, %36
  %134 = or i32 %54, %0
  %135 = or i32 %39, %0
  %136 = and i32 %91, %44
  %137 = xor i32 %9, -1
  %138 = or i32 %38, %137
  %139 = xor i32 %9, %2
  %140 = and i32 %49, %112
  %141 = xor i32 %26, %48
  %142 = or i32 %90, %44
  %143 = xor i32 %63, -1
  %144 = or i32 %62, %143
  %145 = or i32 %10, %1
  %146 = and i32 %70, %0
  %147 = xor i32 %146, -1
  %148 = xor i32 %118, %147
  %149 = and i32 %95, %8
  %150 = and i32 %50, %42
  %151 = xor i32 %100, %54
  %152 = and i32 %34, %44
  %153 = and i32 %9, %39
  %154 = xor i32 %57, -1
  %155 = or i32 %154, %1
  %156 = and i32 %41, %24
  %157 = xor i32 %91, %0
  %158 = or i32 %29, %8
  %159 = or i32 %36, %2
  %160 = or i32 %39, %44
  %161 = or i32 %29, %41
  %162 = or i32 %39, %31
  %163 = or i32 %24, %31
  %164 = or i32 %49, %42
  %165 = and i32 %49, %42
  %166 = shl i32 %31, 1
  %167 = xor i32 %54, -1
  %168 = or i32 %167, %0
  %169 = xor i32 %118, %119
  %170 = shl i32 %169, 1
  %171 = or i32 %48, %49
  %172 = and i32 %9, %2
  %173 = or i32 %33, %0
  %174 = or i32 %29, %1
  %175 = or i32 %100, %167
  %176 = shl i32 %175, 1
  %177 = and i32 %101, %8
  %178 = or i32 %118, %146
  %179 = or i32 %90, %36
  %180 = xor i32 %69, %132
  %181 = shl i32 %46, 1
  %182 = or i32 %137, %2
  %183 = xor i32 %137, %2
  %184 = and i32 %91, %0
  %185 = shl i32 %184, 1
  %186 = xor i32 %84, %88
  %187 = xor i32 %132, -1
  %188 = or i32 %69, %187
  %189 = or i32 %41, %2
  %190 = or i32 %41, %154
  %191 = shl i32 %190, 1
  %192 = and i32 %38, %30
  %193 = or i32 %27, %0
  %194 = xor i32 %107, %72
  %195 = xor i32 %90, %0
  %196 = and i32 %10, %112
  %197 = xor i32 %101, %1
  %198 = or i32 %90, %0
  %199 = or i32 %154, %8
  %200 = or i32 %39, %137
  %201 = or i32 %100, %41
  %202 = and i32 %38, %112
  %203 = or i32 %34, %44
  %204 = or i32 %34, %0
  %205 = or i32 %38, %31
  %206 = or i32 %48, %79
  %207 = and i32 %30, %2
  %208 = and i32 %30, %49
  %209 = shl i32 %208, 1
  %210 = xor i32 %30, %2
  %211 = xor i32 %100, %1
  %212 = and i32 %54, %44
  %213 = add i32 %54, 1
  %214 = and i32 %39, %112
  %215 = or i32 %79, %8
  %216 = xor i32 %36, %91
  %217 = or i32 %10, %31
  %218 = or i32 %48, %24
  %219 = shl i32 %218, 1
  %220 = xor i32 %36, %2
  %221 = or i32 %41, %79
  %222 = and i32 %57, %1
  %223 = or i32 %24, %42
  %224 = xor i32 %37, %2
  %225 = and i32 %27, %44
  %226 = mul i32 %225, -22
  %227 = and i32 %90, %44
  %228 = mul i32 %227, -10
  %229 = and i32 %27, %0
  %230 = and i32 %90, %0
  %231 = mul i32 %230, -20
  %232 = and i32 %167, %44
  %233 = shl i32 %232, 4
  %234 = mul i32 %45, -17
  %235 = and i32 %167, %0
  %236 = mul i32 %235, -25
  %237 = shl i32 %62, 4
  %238 = or i32 %165, %172
  %239 = add i32 %238, %79
  %240 = add i32 %239, %54
  %241 = add i32 %240, %33
  %242 = add i32 %241, %91
  %243 = add i32 %242, %116
  %244 = add i32 %243, %103
  %245 = add i32 %244, %204
  %246 = add i32 %245, %203
  %247 = add i32 %246, %196
  %248 = add i32 %247, %174
  %249 = add i32 %248, %160
  %250 = add i32 %249, %76
  %251 = add i32 %250, %135
  %252 = add i32 %251, %128
  %253 = add i32 %252, %96
  %254 = add i32 %253, %16
  %255 = add i32 %216, %229
  %256 = sub i32 %197, %255
  %257 = sub i32 %256, %162
  %258 = add i32 %257, %111
  %259 = add i32 %258, %188
  %260 = sub i32 %259, %82
  %261 = mul i32 %260, 5
  %262 = add i32 %25, %43
  %263 = add i32 %262, %23
  %264 = mul i32 %263, 3
  %265 = add i32 %18, %84
  %266 = shl i32 %265, 2
  %267 = add i32 %254, %20
  %268 = shl i32 %267, 1
  %269 = add i32 %0, %1
  %270 = add i32 %269, %36
  %271 = add i32 %270, %123
  %272 = add i32 %271, %49
  %273 = sub i32 %272, %2
  %274 = add i32 %273, %30
  %275 = add i32 %274, %35
  %276 = add i32 %275, %59
  %277 = add i32 %276, %93
  %278 = add i32 %277, %109
  %279 = sub i32 %278, %38
  %280 = sub i32 %279, %115
  %281 = sub i32 %280, %122
  %282 = add i32 %281, %130
  %283 = sub i32 %282, %139
  %284 = add i32 %283, %140
  %285 = add i32 %284, %159
  %286 = add i32 %285, %164
  %287 = sub i32 %286, %166
  %288 = add i32 %287, %171
  %289 = add i32 %288, %26
  %290 = add i32 %289, %182
  %291 = sub i32 %290, %183
  %292 = add i32 %291, %50
  %293 = sub i32 %292, %100
  %294 = add i32 %293, %189
  %295 = add i32 %294, %95
  %296 = sub i32 %295, %207
  %297 = add i32 %296, %210
  %298 = add i32 %297, %57
  %299 = add i32 %298, %213
  %300 = sub i32 %299, %90
  %301 = sub i32 %300, %220
  %302 = add i32 %301, %224
  %303 = add i32 %302, 1
  %304 = add i32 %303, %28
  %305 = sub i32 %304, %32
  %306 = add i32 %305, %40
  %307 = sub i32 %306, %51
  %308 = sub i32 %307, %55
  %309 = add i32 %308, %56
  %310 = add i32 %309, %58
  %311 = sub i32 %310, %60
  %312 = add i32 %311, %61
  %313 = add i32 %312, %67
  %314 = sub i32 %313, %80
  %315 = add i32 %314, %83
  %316 = add i32 %315, %87
  %317 = add i32 %316, %92
  %318 = add i32 %317, %94
  %319 = add i32 %318, %63
  %320 = add i32 %319, %97
  %321 = sub i32 %320, %98
  %322 = add i32 %321, %99
  %323 = add i32 %322, %102
  %324 = add i32 %323, %104
  %325 = sub i32 %324, %81
  %326 = sub i32 %325, %105
  %327 = sub i32 %326, %110
  %328 = add i32 %327, %113
  %329 = sub i32 %328, %114
  %330 = sub i32 %329, %117
  %331 = sub i32 %330, %119
  %332 = sub i32 %331, %124
  %333 = add i32 %332, %125
  %334 = add i32 %333, %126
  %335 = add i32 %334, %127
  %336 = sub i32 %335, %129
  %337 = sub i32 %336, %131
  %338 = sub i32 %337, %132
  %339 = add i32 %338, %133
  %340 = sub i32 %339, %134
  %341 = sub i32 %340, %136
  %342 = sub i32 %341, %138
  %343 = add i32 %342, %141
  %344 = sub i32 %343, %142
  %345 = sub i32 %344, %145
  %346 = add i32 %345, %149
  %347 = add i32 %346, %150
  %348 = add i32 %347, %151
  %349 = sub i32 %348, %152
  %350 = sub i32 %349, %153
  %351 = sub i32 %350, %155
  %352 = add i32 %351, %156
  %353 = add i32 %352, %157
  %354 = sub i32 %353, %158
  %355 = add i32 %354, %161
  %356 = add i32 %355, %163
  %357 = sub i32 %356, %168
  %358 = sub i32 %357, %173
  %359 = add i32 %358, %177
  %360 = add i32 %359, %179
  %361 = add i32 %360, %192
  %362 = add i32 %361, %193
  %363 = sub i32 %362, %195
  %364 = add i32 %363, %198
  %365 = sub i32 %364, %199
  %366 = sub i32 %365, %200
  %367 = sub i32 %366, %201
  %368 = add i32 %367, %202
  %369 = sub i32 %368, %205
  %370 = add i32 %369, %206
  %371 = sub i32 %370, %209
  %372 = add i32 %371, %211
  %373 = add i32 %372, %212
  %374 = add i32 %373, %214
  %375 = add i32 %374, %215
  %376 = sub i32 %375, %217
  %377 = add i32 %376, %221
  %378 = sub i32 %377, %222
  %379 = add i32 %378, %223
  %380 = add i32 %379, %19
  %381 = add i32 %380, %17
  %382 = sub i32 %381, %21
  %383 = sub i32 %382, %47
  %384 = sub i32 %383, %53
  %385 = sub i32 %384, %64
  %386 = sub i32 %385, %66
  %387 = add i32 %386, %73
  %388 = sub i32 %387, %75
  %389 = add i32 %388, %78
  %390 = sub i32 %389, %86
  %391 = sub i32 %390, %89
  %392 = sub i32 %391, %106
  %393 = add i32 %392, %108
  %394 = sub i32 %393, %121
  %395 = add i32 %394, %144
  %396 = sub i32 %395, %148
  %397 = sub i32 %396, %176
  %398 = add i32 %397, %178
  %399 = add i32 %398, %180
  %400 = sub i32 %399, %181
  %401 = sub i32 %400, %185
  %402 = sub i32 %401, %186
  %403 = sub i32 %402, %191
  %404 = sub i32 %403, %194
  %405 = sub i32 %404, %219
  %406 = add i32 %405, %226
  %407 = add i32 %406, %228
  %408 = add i32 %407, %231
  %409 = sub i32 %408, %233
  %410 = add i32 %409, %234
  %411 = add i32 %410, %236
  %412 = sub i32 %411, %237
  %413 = sub i32 %412, %170
  %414 = add i32 %413, %266
  %415 = add i32 %414, %264
  %416 = add i32 %415, %261
  %417 = add i32 %416, %268
  %418 = icmp eq i32 %14, %417
  %419 = select i1 %418, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %420 = tail call i32 @puts(i8* nonnull dereferenceable(1) %419)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
