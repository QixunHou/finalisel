; ModuleID = '../.././c_source_file/0650_path_condition_crackme.c'
source_filename = "../.././c_source_file/0650_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %0
  %6 = and i32 %5, %1
  %7 = and i32 %4, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = add i32 %6, %11
  %13 = xor i32 %1, -1
  %14 = or i32 %13, %0
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %2
  %17 = xor i32 %0, -1
  %18 = or i32 %2, %1
  %19 = or i32 %18, %17
  %20 = and i32 %2, %1
  %21 = and i32 %20, %0
  %22 = xor i32 %2, %1
  %23 = and i32 %22, %17
  %24 = xor i32 %21, -1
  %25 = xor i32 %23, %24
  %26 = or i32 %1, %0
  %27 = and i32 %22, %26
  %28 = xor i32 %20, -1
  %29 = xor i32 %28, %0
  %30 = and i32 %1, %0
  %31 = or i32 %30, %2
  %32 = shl i32 %31, 1
  %33 = or i32 %4, %1
  %34 = xor i32 %33, %0
  %35 = xor i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %30, %36
  %38 = shl i32 %37, 2
  %39 = and i32 %13, %2
  %40 = and i32 %39, %0
  %41 = or i32 %13, %2
  %42 = xor i32 %41, %0
  %43 = or i32 %40, %42
  %44 = and i32 %2, %0
  %45 = and i32 %4, %1
  %46 = or i32 %44, %45
  %47 = xor i32 %7, %33
  %48 = xor i32 %30, -1
  %49 = and i32 %36, %48
  %50 = or i32 %7, %10
  %51 = or i32 %2, %0
  %52 = xor i32 %51, -1
  %53 = xor i32 %52, %1
  %54 = and i32 %9, %4
  %55 = xor i32 %15, %2
  %56 = xor i32 %41, -1
  %57 = or i32 %56, %0
  %58 = xor i32 %40, %57
  %59 = xor i32 %22, %0
  %60 = xor i32 %59, -1
  %61 = xor i32 %40, %60
  %62 = xor i32 %45, -1
  %63 = or i32 %62, %0
  %64 = and i32 %35, %14
  %65 = and i32 %13, %0
  %66 = xor i32 %65, -1
  %67 = and i32 %22, %66
  %68 = and i32 %18, %0
  %69 = and i32 %51, %1
  %70 = and i32 %36, %66
  %71 = or i32 %30, %4
  %72 = xor i32 %26, -1
  %73 = or i32 %44, %72
  %74 = shl i32 %73, 1
  %75 = add i32 %51, 1
  %76 = xor i32 %30, %2
  %77 = or i32 %9, %52
  %78 = and i32 %39, %17
  %79 = or i32 %22, %17
  %80 = xor i32 %79, -1
  %81 = or i32 %78, %80
  %82 = xor i32 %22, -1
  %83 = and i32 %82, %17
  %84 = or i32 %65, %2
  %85 = xor i32 %33, %30
  %86 = xor i32 %44, -1
  %87 = xor i32 %86, %1
  %88 = xor i32 %44, %62
  %89 = and i32 %20, %17
  %90 = or i32 %89, %68
  %91 = and i32 %26, %82
  %92 = xor i32 %7, %28
  %93 = and i32 %18, %17
  %94 = or i32 %21, %93
  %95 = or i32 %21, %23
  %96 = xor i32 %18, -1
  %97 = xor i32 %96, %0
  %98 = or i32 %9, %2
  %99 = or i32 %72, %2
  %100 = xor i32 %62, %0
  %101 = or i32 %82, %0
  %102 = and i32 %86, %1
  %103 = xor i32 %5, -1
  %104 = or i32 %9, %103
  %105 = or i32 %52, %10
  %106 = shl i32 %105, 1
  %107 = add i32 %30, 1
  %108 = and i32 %66, %2
  %109 = and i32 %82, %0
  %110 = xor i32 %33, -1
  %111 = or i32 %7, %110
  %112 = and i32 %35, %9
  %113 = shl i32 %112, 1
  %114 = or i32 %44, %96
  %115 = xor i32 %78, %79
  %116 = or i32 %82, %15
  %117 = or i32 %35, %13
  %118 = shl i32 %117, 1
  %119 = or i32 %103, %10
  %120 = xor i32 %18, %0
  %121 = or i32 %21, %120
  %122 = or i32 %7, %9
  %123 = or i32 %22, %30
  %124 = shl i32 %123, 1
  %125 = or i32 %22, %0
  %126 = xor i32 %45, %0
  %127 = or i32 %52, %13
  %128 = and i32 %9, %2
  %129 = shl i32 %128, 1
  %130 = and i32 %28, %0
  %131 = or i32 %65, %82
  %132 = or i32 %62, %17
  %133 = and i32 %41, %0
  %134 = xor i32 %133, -1
  %135 = xor i32 %78, %134
  %136 = or i32 %20, %17
  %137 = or i32 %7, %1
  %138 = and i32 %14, %4
  %139 = xor i32 %103, %1
  %140 = or i32 %36, %72
  %141 = and i32 %8, %13
  %142 = shl i32 %141, 1
  %143 = or i32 %22, %72
  %144 = or i32 %35, %72
  %145 = shl i32 %17, 1
  %146 = or i32 %103, %1
  %147 = or i32 %33, %0
  %148 = and i32 %22, %48
  %149 = and i32 %35, %13
  %150 = xor i32 %5, %30
  %151 = and i32 %82, %66
  %152 = or i32 %9, %4
  %153 = xor i32 %40, %125
  %154 = or i32 %22, %65
  %155 = and i32 %35, %48
  %156 = and i32 %86, %13
  %157 = xor i32 %20, %0
  %158 = add i32 %22, 1
  %159 = and i32 %5, %13
  %160 = and i32 %82, %48
  %161 = shl i32 %160, 1
  %162 = or i32 %18, %0
  %163 = xor i32 %48, %2
  %164 = or i32 %44, %9
  %165 = or i32 %45, %65
  %166 = xor i32 %72, %2
  %167 = xor i32 %125, 1073741823
  %168 = or i32 %167, %40
  %169 = or i32 %36, %15
  %170 = xor i32 %26, %2
  %171 = xor i32 %44, %14
  %172 = xor i32 %7, %1
  %173 = shl i32 %172, 1
  %174 = and i32 %62, %0
  %175 = or i32 %36, %10
  %176 = and i32 %22, %0
  %177 = and i32 %51, %10
  %178 = and i32 %10, %2
  %179 = or i32 %44, %15
  %180 = or i32 %4, %72
  %181 = or i32 %36, %13
  %182 = xor i32 %82, %0
  %183 = or i32 %33, %17
  %184 = or i32 %30, %52
  %185 = or i32 %28, %17
  %186 = and i32 %62, %17
  %187 = or i32 %52, %1
  %188 = xor i32 %51, %1
  %189 = xor i32 %110, %0
  %190 = and i32 %36, %1
  %191 = or i32 %35, %15
  %192 = xor i32 %8, %1
  %193 = or i32 %110, %0
  %194 = and i32 %35, %1
  %195 = shl i32 %194, 1
  %196 = and i32 %22, %14
  %197 = and i32 %14, %82
  %198 = or i32 %30, %96
  %199 = or i32 %96, %17
  %200 = or i32 %35, %1
  %201 = xor i32 %5, %1
  %202 = or i32 %35, %30
  %203 = and i32 %9, %86
  %204 = or i32 %20, %0
  %205 = or i32 %96, %0
  %206 = and i32 %28, %17
  %207 = or i32 %35, %65
  %208 = xor i32 %93, %24
  %209 = add i32 %7, 1
  %210 = xor i32 %51, %30
  %211 = or i32 %4, %15
  %212 = shl i32 %211, 1
  %213 = or i32 %30, %103
  %214 = shl i32 %213, 1
  %215 = or i32 %110, %17
  %216 = and i32 %26, %36
  %217 = shl i32 %216, 1
  %218 = or i32 %7, %13
  %219 = or i32 %20, %65
  %220 = and i32 %96, %17
  %221 = mul i32 %220, 20
  %222 = and i32 %45, %17
  %223 = mul i32 %222, 23
  %224 = and i32 %96, %0
  %225 = shl i32 %224, 1
  %226 = and i32 %45, %0
  %227 = mul i32 %226, 21
  %228 = and i32 %110, %17
  %229 = mul i32 %89, 14
  %230 = and i32 %110, %0
  %231 = shl i32 %230, 3
  %232 = mul i32 %21, 6
  %233 = add i32 %178, %15
  %234 = add i32 %233, %103
  %235 = add i32 %234, %218
  %236 = add i32 %235, %181
  %237 = add i32 %236, %157
  %238 = add i32 %237, %63
  %239 = add i32 %238, %29
  %240 = add i32 %239, %94
  %241 = shl i32 %240, 1
  %242 = sub i32 %110, %149
  %243 = add i32 %242, %155
  %244 = sub i32 %243, %79
  %245 = mul i32 %244, 5
  %246 = add i32 %168, %228
  %247 = shl i32 %246, 2
  %248 = add i32 %109, %70
  %249 = mul i32 %248, 3
  %250 = sub i32 -3, %0
  %251 = sub i32 %250, %145
  %252 = add i32 %251, %107
  %253 = add i32 %252, %72
  %254 = add i32 %253, %30
  %255 = add i32 %254, %65
  %256 = add i32 %255, 1
  %257 = sub i32 %256, %26
  %258 = add i32 %257, %16
  %259 = sub i32 %258, %54
  %260 = sub i32 %259, %55
  %261 = sub i32 %260, %71
  %262 = add i32 %261, %75
  %263 = sub i32 %262, %76
  %264 = sub i32 %263, %84
  %265 = sub i32 %264, %35
  %266 = add i32 %265, %98
  %267 = sub i32 %266, %99
  %268 = add i32 %267, %108
  %269 = add i32 %268, %7
  %270 = add i32 %269, %20
  %271 = sub i32 %270, %138
  %272 = sub i32 %271, %152
  %273 = add i32 %272, %158
  %274 = add i32 %273, %163
  %275 = sub i32 %274, %166
  %276 = add i32 %275, %170
  %277 = sub i32 %276, %22
  %278 = sub i32 %277, %180
  %279 = add i32 %278, %44
  %280 = sub i32 %279, %45
  %281 = add i32 %280, %209
  %282 = sub i32 %281, %19
  %283 = add i32 %282, %27
  %284 = sub i32 %283, %32
  %285 = add i32 %284, %34
  %286 = sub i32 %285, %46
  %287 = sub i32 %286, %47
  %288 = sub i32 %287, %49
  %289 = add i32 %288, %50
  %290 = add i32 %289, %53
  %291 = add i32 %290, %64
  %292 = add i32 %291, %67
  %293 = sub i32 %292, %68
  %294 = add i32 %293, %69
  %295 = sub i32 %294, %77
  %296 = add i32 %295, %83
  %297 = sub i32 %296, %85
  %298 = sub i32 %297, %87
  %299 = add i32 %298, %88
  %300 = add i32 %299, %91
  %301 = sub i32 %300, %92
  %302 = add i32 %301, %97
  %303 = sub i32 %302, %100
  %304 = sub i32 %303, %101
  %305 = add i32 %304, %102
  %306 = add i32 %305, %104
  %307 = add i32 %306, %111
  %308 = sub i32 %307, %114
  %309 = sub i32 %308, %93
  %310 = add i32 %309, %116
  %311 = add i32 %310, %119
  %312 = sub i32 %311, %122
  %313 = sub i32 %312, %125
  %314 = add i32 %313, %126
  %315 = add i32 %314, %127
  %316 = sub i32 %315, %129
  %317 = add i32 %316, %130
  %318 = sub i32 %317, %131
  %319 = add i32 %318, %132
  %320 = sub i32 %319, %136
  %321 = sub i32 %320, %137
  %322 = sub i32 %321, %139
  %323 = add i32 %322, %140
  %324 = sub i32 %323, %143
  %325 = add i32 %324, %144
  %326 = add i32 %325, %146
  %327 = sub i32 %326, %147
  %328 = add i32 %327, %148
  %329 = add i32 %328, %150
  %330 = sub i32 %329, %151
  %331 = add i32 %330, %154
  %332 = sub i32 %331, %156
  %333 = sub i32 %332, %159
  %334 = sub i32 %333, %120
  %335 = sub i32 %334, %162
  %336 = add i32 %335, %164
  %337 = sub i32 %336, %165
  %338 = add i32 %337, %169
  %339 = add i32 %338, %171
  %340 = sub i32 %339, %174
  %341 = sub i32 %340, %175
  %342 = add i32 %341, %176
  %343 = sub i32 %342, %177
  %344 = sub i32 %343, %179
  %345 = add i32 %344, %182
  %346 = sub i32 %345, %183
  %347 = add i32 %346, %184
  %348 = sub i32 %347, %185
  %349 = sub i32 %348, %186
  %350 = sub i32 %349, %187
  %351 = add i32 %350, %188
  %352 = sub i32 %351, %189
  %353 = sub i32 %352, %190
  %354 = add i32 %353, %191
  %355 = add i32 %354, %192
  %356 = add i32 %355, %193
  %357 = add i32 %356, %196
  %358 = add i32 %357, %197
  %359 = sub i32 %358, %198
  %360 = add i32 %359, %199
  %361 = add i32 %360, %200
  %362 = add i32 %361, %201
  %363 = sub i32 %362, %202
  %364 = add i32 %363, %59
  %365 = sub i32 %364, %203
  %366 = add i32 %365, %204
  %367 = add i32 %366, %205
  %368 = sub i32 %367, %206
  %369 = sub i32 %368, %207
  %370 = add i32 %369, %210
  %371 = sub i32 %370, %212
  %372 = sub i32 %371, %215
  %373 = add i32 %372, %219
  %374 = sub i32 %373, %25
  %375 = sub i32 %374, %38
  %376 = sub i32 %375, %43
  %377 = add i32 %376, %58
  %378 = add i32 %377, %61
  %379 = sub i32 %378, %74
  %380 = add i32 %379, %81
  %381 = add i32 %380, %90
  %382 = add i32 %381, %95
  %383 = sub i32 %382, %106
  %384 = sub i32 %383, %113
  %385 = sub i32 %384, %115
  %386 = sub i32 %385, %118
  %387 = sub i32 %386, %121
  %388 = sub i32 %387, %124
  %389 = sub i32 %388, %135
  %390 = sub i32 %389, %142
  %391 = sub i32 %390, %153
  %392 = sub i32 %391, %161
  %393 = sub i32 %392, %173
  %394 = sub i32 %393, %195
  %395 = add i32 %394, %208
  %396 = sub i32 %395, %214
  %397 = sub i32 %396, %217
  %398 = add i32 %397, %221
  %399 = add i32 %398, %223
  %400 = sub i32 %399, %225
  %401 = add i32 %400, %227
  %402 = add i32 %401, %229
  %403 = add i32 %402, %231
  %404 = add i32 %403, %232
  %405 = add i32 %404, %249
  %406 = add i32 %405, %245
  %407 = add i32 %406, %247
  %408 = add i32 %407, %241
  %409 = icmp eq i32 %12, %408
  %410 = select i1 %409, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %411 = tail call i32 @puts(i8* nonnull dereferenceable(1) %410)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
