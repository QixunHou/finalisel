; ModuleID = '../.././c_source_file/1665_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1665_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %2, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %4, %6
  %8 = xor i32 %2, -1
  %9 = xor i32 %4, -1
  %10 = and i32 %8, %9
  %11 = add i32 %7, %10
  %12 = sub i32 0, %11
  %13 = and i32 %9, %2
  %14 = or i32 %2, %0
  %15 = and i32 %14, %4
  %16 = shl i32 %15, 1
  %17 = and i32 %8, %1
  %18 = or i32 %17, %0
  %19 = and i32 %6, %1
  %20 = and i32 %2, %1
  %21 = and i32 %20, %0
  %22 = or i32 %2, %1
  %23 = xor i32 %22, %0
  %24 = xor i32 %21, -1
  %25 = xor i32 %23, %24
  %26 = or i32 %1, %0
  %27 = and i32 %26, %6
  %28 = xor i32 %0, -1
  %29 = or i32 %22, %28
  %30 = xor i32 %1, -1
  %31 = and i32 %30, %2
  %32 = and i32 %31, %28
  %33 = xor i32 %2, %1
  %34 = or i32 %33, %28
  %35 = xor i32 %34, 2147483647
  %36 = or i32 %35, %32
  %37 = shl i32 %36, 1
  %38 = and i32 %8, %0
  %39 = or i32 %38, %1
  %40 = or i32 %8, %0
  %41 = and i32 %40, %30
  %42 = or i32 %30, %0
  %43 = and i32 %42, %6
  %44 = xor i32 %17, -1
  %45 = shl i32 %44, 1
  %46 = or i32 %38, %9
  %47 = or i32 %30, %2
  %48 = and i32 %47, %0
  %49 = or i32 %32, %48
  %50 = and i32 %22, %28
  %51 = and i32 %5, %26
  %52 = xor i32 %14, %1
  %53 = and i32 %22, %0
  %54 = xor i32 %20, -1
  %55 = or i32 %54, %28
  %56 = xor i32 %42, -1
  %57 = xor i32 %33, -1
  %58 = or i32 %57, %56
  %59 = or i32 %8, %1
  %60 = xor i32 %38, %59
  %61 = and i32 %30, %0
  %62 = or i32 %61, %8
  %63 = xor i32 %59, -1
  %64 = or i32 %63, %28
  %65 = or i32 %56, %2
  %66 = shl i32 %65, 2
  %67 = or i32 %5, %9
  %68 = and i32 %1, %0
  %69 = xor i32 %22, -1
  %70 = or i32 %68, %69
  %71 = shl i32 %70, 1
  %72 = xor i32 %40, -1
  %73 = or i32 %68, %72
  %74 = shl i32 %73, 1
  %75 = or i32 %72, %9
  %76 = xor i32 %59, %68
  %77 = or i32 %5, %4
  %78 = and i32 %20, %28
  %79 = and i32 %33, %0
  %80 = or i32 %78, %79
  %81 = or i32 %61, %6
  %82 = shl i32 %81, 1
  %83 = xor i32 %78, -1
  %84 = xor i32 %79, %83
  %85 = or i32 %6, %30
  %86 = or i32 %63, %0
  %87 = or i32 %57, %28
  %88 = or i32 %38, %4
  %89 = and i32 %2, %0
  %90 = xor i32 %89, %42
  %91 = and i32 %31, %0
  %92 = and i32 %47, %28
  %93 = or i32 %91, %92
  %94 = xor i32 %26, -1
  %95 = or i32 %57, %94
  %96 = xor i32 %89, %44
  %97 = and i32 %44, %28
  %98 = or i32 %44, %0
  %99 = xor i32 %68, -1
  %100 = and i32 %8, %99
  %101 = and i32 %54, %28
  %102 = or i32 %6, %56
  %103 = xor i32 %61, -1
  %104 = and i32 %5, %103
  %105 = xor i32 %72, %1
  %106 = and i32 %42, %2
  %107 = or i32 %33, %61
  %108 = shl i32 %107, 2
  %109 = or i32 %68, %6
  %110 = xor i32 %40, %68
  %111 = xor i32 %47, %0
  %112 = or i32 %91, %111
  %113 = or i32 %89, %17
  %114 = or i32 %89, %30
  %115 = or i32 %69, %0
  %116 = or i32 %5, %30
  %117 = or i32 %61, %2
  %118 = xor i32 %22, %68
  %119 = and i32 %44, %0
  %120 = or i32 %38, %20
  %121 = xor i32 %14, -1
  %122 = or i32 %121, %30
  %123 = xor i32 %38, -1
  %124 = and i32 %123, %30
  %125 = xor i32 %38, %54
  %126 = or i32 %89, %1
  %127 = xor i32 %53, %83
  %128 = or i32 %20, %61
  %129 = xor i32 %50, 2147483647
  %130 = xor i32 %129, %21
  %131 = shl i32 %130, 1
  %132 = and i32 %123, %1
  %133 = or i32 %33, %56
  %134 = or i32 %5, %56
  %135 = or i32 %5, %61
  %136 = xor i32 %121, %1
  %137 = add i32 %40, 1
  %138 = and i32 %33, %42
  %139 = or i32 %33, %68
  %140 = xor i32 %63, %0
  %141 = shl i32 %140, 1
  %142 = xor i32 %54, %0
  %143 = add i32 %14, 1
  %144 = or i32 %61, %57
  %145 = and i32 %6, %9
  %146 = xor i32 %94, %2
  %147 = or i32 %89, %56
  %148 = xor i32 %32, %34
  %149 = and i32 %5, %1
  %150 = or i32 %6, %94
  %151 = and i32 %5, %42
  %152 = xor i32 %38, %1
  %153 = shl i32 %152, 1
  %154 = or i32 %69, %28
  %155 = add i32 %38, 1
  %156 = and i32 %103, %2
  %157 = or i32 %6, %9
  %158 = and i32 %26, %2
  %159 = xor i32 %89, -1
  %160 = and i32 %159, %30
  %161 = xor i32 %14, %68
  %162 = add i32 %20, 1
  %163 = and i32 %59, %0
  %164 = or i32 %38, %30
  %165 = and i32 %40, %4
  %166 = shl i32 %0, 1
  %167 = or i32 %54, %0
  %168 = and i32 %8, %103
  %169 = shl i32 %168, 1
  %170 = xor i32 %57, %0
  %171 = or i32 %9, %2
  %172 = and i32 %33, %103
  %173 = or i32 %94, %2
  %174 = xor i32 %103, %2
  %175 = or i32 %8, %56
  %176 = or i32 %59, %0
  %177 = and i32 %26, %57
  %178 = and i32 %42, %8
  %179 = xor i32 %61, %54
  %180 = or i32 %89, %69
  %181 = shl i32 %180, 1
  %182 = and i32 %123, %9
  %183 = and i32 %57, %0
  %184 = and i32 %14, %1
  %185 = shl i32 %184, 1
  %186 = and i32 %5, %4
  %187 = xor i32 %20, %0
  %188 = xor i32 %56, %2
  %189 = or i32 %8, %94
  %190 = shl i32 %189, 2
  %191 = or i32 %44, %28
  %192 = or i32 %21, %50
  %193 = xor i32 %68, %2
  %194 = or i32 %5, %94
  %195 = or i32 %33, %94
  %196 = and i32 %40, %9
  %197 = and i32 %99, %2
  %198 = and i32 %5, %9
  %199 = and i32 %57, %99
  %200 = xor i32 %111, -1
  %201 = xor i32 %91, %200
  %202 = and i32 %33, %28
  %203 = xor i32 %202, %24
  %204 = and i32 %6, %30
  %205 = or i32 %8, %9
  %206 = shl i32 %69, 2
  %207 = or i32 %38, %63
  %208 = or i32 %22, %0
  %209 = or i32 %33, %0
  %210 = xor i32 %91, %209
  %211 = and i32 %4, %8
  %212 = or i32 %4, %2
  %213 = xor i32 %89, %22
  %214 = shl i32 %213, 1
  %215 = shl i32 %202, 1
  %216 = and i32 %14, %9
  %217 = or i32 %21, %23
  %218 = or i32 %59, %28
  %219 = or i32 %17, %28
  %220 = or i32 %121, %1
  %221 = shl i32 %220, 1
  %222 = and i32 %5, %99
  %223 = shl i32 %222, 1
  %224 = and i32 %26, %8
  %225 = xor i32 %209, -1
  %226 = or i32 %91, %225
  %227 = and i32 %40, %1
  %228 = xor i32 %33, %0
  %229 = or i32 %4, %121
  %230 = xor i32 %21, %228
  %231 = or i32 %4, %72
  %232 = and i32 %4, %2
  %233 = or i32 %68, %63
  %234 = shl i32 %233, 1
  %235 = and i32 %159, %9
  %236 = xor i32 %26, %2
  %237 = or i32 %68, %8
  %238 = xor i32 %40, %1
  %239 = xor i32 %17, %0
  %240 = or i32 %5, %1
  %241 = and i32 %14, %30
  %242 = or i32 %4, %8
  %243 = and i32 %69, %28
  %244 = and i32 %17, %28
  %245 = and i32 %69, %0
  %246 = and i32 %17, %0
  %247 = mul i32 %246, -6
  %248 = and i32 %63, %28
  %249 = mul i32 %248, 19
  %250 = mul i32 %78, 26
  %251 = and i32 %63, %0
  %252 = mul i32 %21, 15
  %253 = add i32 %158, %57
  %254 = add i32 %253, %100
  %255 = add i32 %254, %172
  %256 = add i32 %255, %163
  %257 = add i32 %256, %142
  %258 = add i32 %257, %125
  %259 = add i32 %258, %113
  %260 = add i32 %259, %105
  %261 = add i32 %260, %88
  %262 = add i32 %261, %86
  %263 = add i32 %262, %19
  %264 = add i32 %263, %18
  %265 = add i32 %264, %210
  %266 = shl i32 %265, 1
  %267 = sub i32 %235, %207
  %268 = add i32 %267, %116
  %269 = sub i32 %268, %192
  %270 = sub i32 %269, %217
  %271 = mul i32 %270, 5
  %272 = sub i32 %251, %244
  %273 = sub i32 %272, %243
  %274 = mul i32 %273, 10
  %275 = add i32 %40, %69
  %276 = add i32 %275, %62
  %277 = add i32 %276, %245
  %278 = mul i32 %277, 3
  %279 = sub i32 -3, %0
  %280 = sub i32 %279, %166
  %281 = sub i32 %280, %1
  %282 = sub i32 %281, %2
  %283 = add i32 %282, %8
  %284 = add i32 %283, %9
  %285 = add i32 %284, %68
  %286 = add i32 %285, 1
  %287 = add i32 %286, %13
  %288 = sub i32 %287, %20
  %289 = sub i32 %288, %14
  %290 = add i32 %289, %63
  %291 = sub i32 %290, %106
  %292 = sub i32 %291, %117
  %293 = add i32 %292, %137
  %294 = add i32 %293, %143
  %295 = sub i32 %294, %146
  %296 = sub i32 %295, %89
  %297 = add i32 %296, %155
  %298 = add i32 %297, %156
  %299 = add i32 %298, %162
  %300 = sub i32 %299, %171
  %301 = add i32 %300, %173
  %302 = add i32 %301, %33
  %303 = sub i32 %302, %174
  %304 = add i32 %303, %175
  %305 = add i32 %304, %178
  %306 = sub i32 %305, %188
  %307 = sub i32 %306, %193
  %308 = sub i32 %307, %197
  %309 = sub i32 %308, %205
  %310 = add i32 %309, %211
  %311 = sub i32 %310, %212
  %312 = sub i32 %311, %59
  %313 = add i32 %312, %224
  %314 = add i32 %313, %17
  %315 = sub i32 %314, %232
  %316 = add i32 %315, %236
  %317 = sub i32 %316, %237
  %318 = add i32 %317, %242
  %319 = sub i32 %318, %38
  %320 = add i32 %319, %27
  %321 = sub i32 %320, %29
  %322 = add i32 %321, %39
  %323 = add i32 %322, %41
  %324 = sub i32 %323, %43
  %325 = sub i32 %324, %45
  %326 = add i32 %325, %46
  %327 = add i32 %326, %50
  %328 = sub i32 %327, %51
  %329 = add i32 %328, %52
  %330 = sub i32 %329, %53
  %331 = add i32 %330, %55
  %332 = sub i32 %331, %58
  %333 = add i32 %332, %60
  %334 = add i32 %333, %64
  %335 = sub i32 %334, %66
  %336 = add i32 %335, %67
  %337 = add i32 %336, %75
  %338 = add i32 %337, %76
  %339 = add i32 %338, %77
  %340 = add i32 %339, %85
  %341 = add i32 %340, %87
  %342 = sub i32 %341, %90
  %343 = sub i32 %342, %95
  %344 = sub i32 %343, %96
  %345 = sub i32 %344, %97
  %346 = sub i32 %345, %98
  %347 = add i32 %346, %101
  %348 = add i32 %347, %102
  %349 = add i32 %348, %104
  %350 = add i32 %349, %109
  %351 = add i32 %350, %110
  %352 = sub i32 %351, %114
  %353 = add i32 %352, %115
  %354 = add i32 %353, %118
  %355 = sub i32 %354, %79
  %356 = add i32 %355, %119
  %357 = add i32 %356, %120
  %358 = sub i32 %357, %122
  %359 = sub i32 %358, %124
  %360 = add i32 %359, %126
  %361 = add i32 %360, %128
  %362 = add i32 %361, %132
  %363 = sub i32 %362, %133
  %364 = sub i32 %363, %134
  %365 = add i32 %364, %135
  %366 = add i32 %365, %136
  %367 = sub i32 %366, %138
  %368 = sub i32 %367, %139
  %369 = add i32 %368, %144
  %370 = sub i32 %369, %145
  %371 = sub i32 %370, %147
  %372 = add i32 %371, %149
  %373 = add i32 %372, %150
  %374 = sub i32 %373, %151
  %375 = sub i32 %374, %154
  %376 = add i32 %375, %157
  %377 = add i32 %376, %160
  %378 = sub i32 %377, %161
  %379 = sub i32 %378, %164
  %380 = add i32 %379, %165
  %381 = add i32 %380, %167
  %382 = sub i32 %381, %169
  %383 = sub i32 %382, %170
  %384 = add i32 %383, %176
  %385 = sub i32 %384, %177
  %386 = sub i32 %385, %179
  %387 = sub i32 %386, %182
  %388 = add i32 %387, %183
  %389 = add i32 %388, %186
  %390 = sub i32 %389, %187
  %391 = add i32 %390, %190
  %392 = sub i32 %391, %191
  %393 = sub i32 %392, %194
  %394 = add i32 %393, %195
  %395 = sub i32 %394, %196
  %396 = sub i32 %395, %198
  %397 = add i32 %396, %199
  %398 = sub i32 %397, %204
  %399 = sub i32 %398, %206
  %400 = add i32 %399, %23
  %401 = add i32 %400, %208
  %402 = add i32 %401, %216
  %403 = sub i32 %402, %218
  %404 = sub i32 %403, %219
  %405 = sub i32 %404, %227
  %406 = add i32 %405, %228
  %407 = sub i32 %406, %229
  %408 = sub i32 %407, %231
  %409 = sub i32 %408, %238
  %410 = sub i32 %409, %239
  %411 = sub i32 %410, %240
  %412 = add i32 %411, %241
  %413 = sub i32 %412, %16
  %414 = add i32 %413, %25
  %415 = add i32 %414, %49
  %416 = sub i32 %415, %71
  %417 = sub i32 %416, %74
  %418 = sub i32 %417, %80
  %419 = sub i32 %418, %82
  %420 = sub i32 %419, %84
  %421 = sub i32 %420, %93
  %422 = sub i32 %421, %108
  %423 = add i32 %422, %112
  %424 = sub i32 %423, %127
  %425 = sub i32 %424, %141
  %426 = sub i32 %425, %148
  %427 = sub i32 %426, %153
  %428 = sub i32 %427, %181
  %429 = sub i32 %428, %185
  %430 = add i32 %429, %201
  %431 = sub i32 %430, %203
  %432 = sub i32 %431, %214
  %433 = sub i32 %432, %215
  %434 = sub i32 %433, %221
  %435 = sub i32 %434, %223
  %436 = add i32 %435, %226
  %437 = add i32 %436, %230
  %438 = sub i32 %437, %234
  %439 = add i32 %438, %247
  %440 = add i32 %439, %249
  %441 = add i32 %440, %250
  %442 = add i32 %441, %252
  %443 = sub i32 %442, %37
  %444 = sub i32 %443, %131
  %445 = add i32 %444, %274
  %446 = add i32 %445, %278
  %447 = add i32 %446, %271
  %448 = add i32 %447, %266
  %449 = icmp eq i32 %448, %12
  %450 = select i1 %449, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %451 = tail call i32 @puts(i8* nonnull dereferenceable(1) %450)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
