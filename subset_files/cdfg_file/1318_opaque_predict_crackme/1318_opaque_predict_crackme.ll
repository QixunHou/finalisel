; ModuleID = '../.././c_source_file/1318_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1318_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = xor i32 %4, %3
  %8 = mul i32 %7, -5
  %9 = or i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %10, %0
  %12 = shl i32 %11, 2
  %13 = add i32 %6, %12
  %14 = add i32 %13, %8
  %15 = xor i32 %4, -1
  %16 = or i32 %15, %3
  %17 = and i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = or i32 %4, %3
  %20 = add i32 %19, 1
  %21 = xor i32 %16, -1
  %22 = mul i32 %21, -6
  %23 = and i32 %15, %3
  %24 = mul i32 %23, -12
  %25 = shl i32 %17, 2
  %26 = xor i32 %2, -1
  %27 = xor i32 %1, -1
  %28 = or i32 %27, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %26, %29
  %31 = and i32 %28, %26
  %32 = and i32 %26, %0
  %33 = or i32 %32, %1
  %34 = xor i32 %29, %2
  %35 = and i32 %2, %1
  %36 = or i32 %32, %35
  %37 = xor i32 %0, -1
  %38 = and i32 %35, %37
  %39 = xor i32 %2, %1
  %40 = and i32 %39, %0
  %41 = or i32 %38, %40
  %42 = and i32 %27, %0
  %43 = or i32 %39, %42
  %44 = and i32 %26, %1
  %45 = or i32 %44, %42
  %46 = xor i32 %1, %0
  %47 = xor i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %46, %48
  %50 = xor i32 %28, %2
  %51 = or i32 %26, %0
  %52 = xor i32 %51, -1
  %53 = xor i32 %52, %1
  %54 = xor i32 %42, %2
  %55 = or i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %48, %56
  %58 = xor i32 %39, %0
  %59 = or i32 %2, %0
  %60 = xor i32 %59, -1
  %61 = or i32 %46, %60
  %62 = xor i32 %39, -1
  %63 = and i32 %62, %37
  %64 = and i32 %2, %0
  %65 = xor i32 %64, -1
  %66 = and i32 %46, %65
  %67 = xor i32 %32, -1
  %68 = and i32 %67, %27
  %69 = and i32 %1, %0
  %70 = or i32 %47, %69
  %71 = or i32 %39, %29
  %72 = or i32 %44, %37
  %73 = and i32 %27, %2
  %74 = and i32 %73, %0
  %75 = or i32 %39, %0
  %76 = xor i32 %75, 2147483647
  %77 = or i32 %76, %74
  %78 = shl i32 %77, 1
  %79 = or i32 %56, %2
  %80 = or i32 %27, %2
  %81 = xor i32 %80, %0
  %82 = or i32 %74, %81
  %83 = shl i32 %82, 1
  %84 = xor i32 %35, -1
  %85 = xor i32 %42, %84
  %86 = add i32 %55, 1
  %87 = add i32 %39, 1
  %88 = or i32 %46, %26
  %89 = xor i32 %58, -1
  %90 = xor i32 %74, %89
  %91 = xor i32 %42, -1
  %92 = and i32 %47, %91
  %93 = and i32 %62, %0
  %94 = and i32 %80, %37
  %95 = or i32 %74, %94
  %96 = or i32 %64, %44
  %97 = xor i32 %56, %2
  %98 = shl i32 %97, 1
  %99 = and i32 %28, %2
  %100 = shl i32 %99, 1
  %101 = and i32 %84, %37
  %102 = and i32 %47, %28
  %103 = and i32 %73, %37
  %104 = or i32 %39, %37
  %105 = xor i32 %103, %104
  %106 = and i32 %65, %27
  %107 = xor i32 %84, %0
  %108 = or i32 %47, %27
  %109 = xor i32 %74, 2147483647
  %110 = xor i32 %109, %94
  %111 = shl i32 %110, 1
  %112 = and i32 %26, %91
  %113 = xor i32 %51, %69
  %114 = or i32 %74, %58
  %115 = xor i32 %44, %0
  %116 = or i32 %64, %46
  %117 = shl i32 %47, 1
  %118 = and i32 %47, %27
  %119 = xor i32 %69, -1
  %120 = and i32 %119, %2
  %121 = and i32 %9, %0
  %122 = or i32 %47, %42
  %123 = xor i32 %109, %81
  %124 = xor i32 %46, -1
  %125 = and i32 %26, %124
  %126 = or i32 %26, %1
  %127 = xor i32 %126, -1
  %128 = or i32 %127, %37
  %129 = xor i32 %32, %126
  %130 = xor i32 %119, %2
  %131 = and i32 %48, %119
  %132 = and i32 %91, %2
  %133 = xor i32 %69, %2
  %134 = xor i32 %126, %69
  %135 = shl i32 %134, 1
  %136 = xor i32 %44, -1
  %137 = xor i32 %136, %0
  %138 = or i32 %42, %48
  %139 = or i32 %64, %124
  %140 = and i32 %39, %37
  %141 = and i32 %48, %124
  %142 = shl i32 %141, 1
  %143 = or i32 %62, %0
  %144 = or i32 %69, %60
  %145 = or i32 %52, %27
  %146 = xor i32 %59, %69
  %147 = xor i32 %64, %1
  %148 = and i32 %46, %48
  %149 = and i32 %136, %37
  %150 = and i32 %39, %28
  %151 = or i32 %47, %1
  %152 = or i32 %9, %0
  %153 = xor i32 %9, %0
  %154 = and i32 %51, %1
  %155 = and i32 %46, %26
  %156 = or i32 %46, %2
  %157 = shl i32 %156, 1
  %158 = and i32 %126, %0
  %159 = shl i32 %158, 1
  %160 = or i32 %35, %42
  %161 = or i32 %39, %56
  %162 = and i32 %46, %67
  %163 = or i32 %48, %29
  %164 = or i32 %69, %48
  %165 = or i32 %69, %26
  %166 = and i32 %46, %2
  %167 = or i32 %64, %1
  %168 = shl i32 %167, 1
  %169 = and i32 %59, %1
  %170 = xor i32 %60, %1
  %171 = xor i32 %127, %0
  %172 = xor i32 %67, %1
  %173 = and i32 %47, %55
  %174 = and i32 %55, %26
  %175 = or i32 %124, %2
  %176 = xor i32 %38, -1
  %177 = xor i32 %121, %176
  %178 = add i32 %59, 1
  %179 = xor i32 %55, %2
  %180 = and i32 %47, %124
  %181 = and i32 %35, %0
  %182 = or i32 %181, %140
  %183 = and i32 %47, %46
  %184 = and i32 %65, %124
  %185 = or i32 %64, %10
  %186 = and i32 %28, %48
  %187 = and i32 %59, %46
  %188 = or i32 %38, %121
  %189 = xor i32 %40, %176
  %190 = or i32 %47, %124
  %191 = or i32 %69, %62
  %192 = or i32 %44, %0
  %193 = or i32 %32, %46
  %194 = or i32 %52, %124
  %195 = or i32 %62, %29
  %196 = and i32 %65, %1
  %197 = and i32 %80, %0
  %198 = xor i32 %197, -1
  %199 = xor i32 %103, %198
  %200 = or i32 %181, %153
  %201 = and i32 %126, %37
  %202 = add i32 %46, 1
  %203 = or i32 %48, %1
  %204 = or i32 %29, %2
  %205 = and i32 %67, %1
  %206 = shl i32 %205, 1
  %207 = xor i32 %62, %0
  %208 = xor i32 %64, %136
  %209 = or i32 %48, %124
  %210 = and i32 %55, %2
  %211 = add i32 %51, 1
  %212 = xor i32 %32, %1
  %213 = xor i32 %9, %69
  %214 = add i32 %126, 1
  %215 = xor i32 %91, %2
  %216 = and i32 %10, %37
  %217 = and i32 %44, %37
  %218 = mul i32 %217, -20
  %219 = and i32 %10, %0
  %220 = and i32 %44, %0
  %221 = shl i32 %220, 1
  %222 = and i32 %127, %37
  %223 = mul i32 %222, 18
  %224 = and i32 %127, %0
  %225 = mul i32 %181, 9
  %226 = add i32 %48, %65
  %227 = add i32 %226, %120
  %228 = add i32 %227, %195
  %229 = add i32 %228, %185
  %230 = add i32 %229, %183
  %231 = add i32 %230, %153
  %232 = add i32 %231, %139
  %233 = add i32 %232, %138
  %234 = add i32 %233, %93
  %235 = add i32 %234, %123
  %236 = shl i32 %235, 1
  %237 = add i32 %112, %214
  %238 = sub i32 %237, %38
  %239 = add i32 %238, %105
  %240 = mul i32 %239, 5
  %241 = sub i32 %203, %166
  %242 = add i32 %241, %20
  %243 = mul i32 %242, 3
  %244 = add i32 %88, %3
  %245 = add i32 %244, %219
  %246 = shl i32 %245, 2
  %247 = sub i32 %224, %216
  %248 = mul i32 %247, 14
  %249 = sub i32 %86, %0
  %250 = add i32 %249, %29
  %251 = sub i32 %250, %42
  %252 = add i32 %251, %2
  %253 = add i32 %252, %202
  %254 = add i32 %253, %30
  %255 = add i32 %254, %31
  %256 = add i32 %255, %34
  %257 = add i32 %256, %50
  %258 = add i32 %257, %54
  %259 = sub i32 %258, %79
  %260 = add i32 %259, %87
  %261 = add i32 %260, %125
  %262 = sub i32 %261, %130
  %263 = add i32 %262, %132
  %264 = sub i32 %263, %133
  %265 = sub i32 %264, %35
  %266 = add i32 %265, %64
  %267 = sub i32 %266, %155
  %268 = sub i32 %267, %39
  %269 = sub i32 %268, %165
  %270 = add i32 %269, %174
  %271 = sub i32 %270, %175
  %272 = add i32 %271, %178
  %273 = add i32 %272, %179
  %274 = add i32 %273, %44
  %275 = sub i32 %274, %59
  %276 = sub i32 %275, %204
  %277 = add i32 %276, %67
  %278 = add i32 %277, %210
  %279 = add i32 %278, %211
  %280 = sub i32 %279, %215
  %281 = sub i32 %280, %4
  %282 = add i32 %281, %15
  %283 = add i32 %282, %33
  %284 = sub i32 %283, %36
  %285 = add i32 %284, %43
  %286 = sub i32 %285, %45
  %287 = sub i32 %286, %49
  %288 = add i32 %287, %53
  %289 = sub i32 %288, %57
  %290 = sub i32 %289, %58
  %291 = add i32 %290, %61
  %292 = add i32 %291, %63
  %293 = sub i32 %292, %66
  %294 = add i32 %293, %68
  %295 = sub i32 %294, %70
  %296 = add i32 %295, %71
  %297 = sub i32 %296, %72
  %298 = sub i32 %297, %85
  %299 = add i32 %298, %92
  %300 = sub i32 %299, %96
  %301 = sub i32 %300, %98
  %302 = sub i32 %301, %100
  %303 = sub i32 %302, %101
  %304 = add i32 %303, %102
  %305 = sub i32 %304, %106
  %306 = add i32 %305, %107
  %307 = sub i32 %306, %108
  %308 = add i32 %307, %113
  %309 = sub i32 %308, %115
  %310 = add i32 %309, %116
  %311 = sub i32 %310, %117
  %312 = sub i32 %311, %118
  %313 = sub i32 %312, %121
  %314 = sub i32 %313, %122
  %315 = add i32 %314, %128
  %316 = add i32 %315, %129
  %317 = sub i32 %316, %131
  %318 = sub i32 %317, %137
  %319 = add i32 %318, %140
  %320 = add i32 %319, %143
  %321 = add i32 %320, %144
  %322 = sub i32 %321, %145
  %323 = sub i32 %322, %146
  %324 = add i32 %323, %147
  %325 = sub i32 %324, %148
  %326 = add i32 %325, %149
  %327 = sub i32 %326, %150
  %328 = sub i32 %327, %151
  %329 = sub i32 %328, %152
  %330 = sub i32 %329, %154
  %331 = sub i32 %330, %157
  %332 = sub i32 %331, %160
  %333 = add i32 %332, %161
  %334 = add i32 %333, %162
  %335 = add i32 %334, %163
  %336 = sub i32 %335, %164
  %337 = add i32 %336, %169
  %338 = sub i32 %337, %170
  %339 = sub i32 %338, %171
  %340 = sub i32 %339, %172
  %341 = sub i32 %340, %173
  %342 = sub i32 %341, %180
  %343 = add i32 %342, %184
  %344 = add i32 %343, %186
  %345 = sub i32 %344, %187
  %346 = add i32 %345, %190
  %347 = add i32 %346, %191
  %348 = sub i32 %347, %192
  %349 = add i32 %348, %104
  %350 = sub i32 %349, %193
  %351 = sub i32 %350, %194
  %352 = add i32 %351, %196
  %353 = add i32 %352, %201
  %354 = sub i32 %353, %207
  %355 = sub i32 %354, %208
  %356 = add i32 %355, %209
  %357 = add i32 %356, %212
  %358 = sub i32 %357, %213
  %359 = add i32 %358, %16
  %360 = add i32 %359, %18
  %361 = add i32 %360, %19
  %362 = sub i32 %361, %41
  %363 = add i32 %362, %90
  %364 = sub i32 %363, %95
  %365 = sub i32 %364, %114
  %366 = sub i32 %365, %135
  %367 = sub i32 %366, %142
  %368 = sub i32 %367, %159
  %369 = sub i32 %368, %168
  %370 = sub i32 %369, %177
  %371 = sub i32 %370, %182
  %372 = add i32 %371, %188
  %373 = sub i32 %372, %189
  %374 = add i32 %373, %199
  %375 = add i32 %374, %200
  %376 = sub i32 %375, %206
  %377 = add i32 %376, %218
  %378 = sub i32 %377, %221
  %379 = add i32 %378, %223
  %380 = add i32 %379, %225
  %381 = add i32 %380, %22
  %382 = add i32 %381, %24
  %383 = sub i32 %382, %25
  %384 = sub i32 %383, %83
  %385 = add i32 %384, %248
  %386 = sub i32 %385, %78
  %387 = sub i32 %386, %111
  %388 = add i32 %387, %246
  %389 = add i32 %388, %243
  %390 = add i32 %389, %240
  %391 = add i32 %390, %236
  %392 = icmp eq i32 %14, %391
  %393 = select i1 %392, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %394 = tail call i32 @puts(i8* nonnull dereferenceable(1) %393)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
