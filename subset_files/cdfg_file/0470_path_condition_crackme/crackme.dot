digraph "DFG for'crackme' function" {
	Node0x20ecba0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x20ecc10[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x20eccd0[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0x20ecd40[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x20ecde0[shape=record, label="  %7 = shl i32 %0, 1"];
	Node0x20ece50[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x20ecec0[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x20ecf30[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x20ecfa0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x20ed010[shape=record, label="  %12 = and i32 %3, %0"];
	Node0x20ed080[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x20ed120[shape=record, label="  %14 = shl i32 %9, 2"];
	Node0x20ed190[shape=record, label="  %15 = shl i32 %8, 1"];
	Node0x20ed200[shape=record, label="  %16 = sub i32 %0, %4"];
	Node0x20ed2a0[shape=record, label="  %17 = mul i32 %16, 3"];
	Node0x20ed310[shape=record, label="  %18 = sub i32 2, %7"];
	Node0x20ed380[shape=record, label="  %19 = sub i32 %18, %1"];
	Node0x20ed3f0[shape=record, label="  %20 = add i32 %19, %3"];
	Node0x20ed460[shape=record, label="  %21 = sub i32 %20, %6"];
	Node0x20ed4d0[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0x20ed540[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x20ed5b0[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x20ed620[shape=record, label="  %25 = add i32 %24, %11"];
	Node0x20ed690[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x20ed700[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0x208d268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x20edba0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x20edbf0[shape=record, label="  ret void"];
	Node0x20ecba0 -> Node0x20ecc10;
	Node0x20ecc10 -> Node0x20eccd0;
	Node0x20eccd0 -> Node0x20ecd40;
	Node0x20ecd40 -> Node0x20ecde0;
	Node0x20ecde0 -> Node0x20ece50;
	Node0x20ece50 -> Node0x20ecec0;
	Node0x20ecec0 -> Node0x20ecf30;
	Node0x20ecf30 -> Node0x20ecfa0;
	Node0x20ecfa0 -> Node0x20ed010;
	Node0x20ed010 -> Node0x20ed080;
	Node0x20ed080 -> Node0x20ed120;
	Node0x20ed120 -> Node0x20ed190;
	Node0x20ed190 -> Node0x20ed200;
	Node0x20ed200 -> Node0x20ed2a0;
	Node0x20ed2a0 -> Node0x20ed310;
	Node0x20ed310 -> Node0x20ed380;
	Node0x20ed380 -> Node0x20ed3f0;
	Node0x20ed3f0 -> Node0x20ed460;
	Node0x20ed460 -> Node0x20ed4d0;
	Node0x20ed4d0 -> Node0x20ed540;
	Node0x20ed540 -> Node0x20ed5b0;
	Node0x20ed5b0 -> Node0x20ed620;
	Node0x20ed620 -> Node0x20ed690;
	Node0x20ed690 -> Node0x20ed700;
	Node0x20ed700 -> Node0x208d268;
	Node0x208d268 -> Node0x20edba0;
	Node0x20edba0 -> Node0x20edbf0;
edge [color=red]
	Node0x20ecba0 -> Node0x20ecc10;
	Node0x20ecc10 -> Node0x20eccd0;
	Node0x20ecec0 -> Node0x20ecf30;
	Node0x20ecf30 -> Node0x20ecfa0;
	Node0x20ecba0 -> Node0x20ed010;
	Node0x20ed010 -> Node0x20ed080;
	Node0x20ecec0 -> Node0x20ed120;
	Node0x20ece50 -> Node0x20ed190;
	Node0x20ecc10 -> Node0x20ed200;
	Node0x20ed200 -> Node0x20ed2a0;
	Node0x20ecde0 -> Node0x20ed310;
	Node0x20ed310 -> Node0x20ed380;
	Node0x20ed380 -> Node0x20ed3f0;
	Node0x20ecba0 -> Node0x20ed3f0;
	Node0x20ed3f0 -> Node0x20ed460;
	Node0x20ecd40 -> Node0x20ed460;
	Node0x20ed460 -> Node0x20ed4d0;
	Node0x20ed080 -> Node0x20ed4d0;
	Node0x20ed4d0 -> Node0x20ed540;
	Node0x20ed120 -> Node0x20ed540;
	Node0x20ed540 -> Node0x20ed5b0;
	Node0x20ed190 -> Node0x20ed5b0;
	Node0x20ed5b0 -> Node0x20ed620;
	Node0x20ecfa0 -> Node0x20ed620;
	Node0x20ed620 -> Node0x20ed690;
	Node0x20ed2a0 -> Node0x20ed690;
	Node0x20eccd0 -> Node0x20ed700;
	Node0x20ed690 -> Node0x20ed700;
	Node0x20ed700 -> Node0x208d268;
	Node0x208d268 -> Node0x20edba0;
}
