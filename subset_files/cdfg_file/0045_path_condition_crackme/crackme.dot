digraph "DFG for'crackme' function" {
	Node0xe29b90[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0xe29c30[shape=record, label="  %4 = xor i32 %1, 2147483647"];
	Node0xe29cf0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0xe29d60[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0xe29e00[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0xe29e70[shape=record, label="  %8 = sub i32 1, %7"];
	Node0xe29ee0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0xe29f50[shape=record, label="  %10 = mul i32 %9, -2"];
	Node0xe29fc0[shape=record, label="  %11 = xor i32 %3, %1"];
	Node0xe2a030[shape=record, label="  %12 = shl i32 %0, 1"];
	Node0xe2a0a0[shape=record, label="  %13 = xor i32 %9, -1"];
	Node0xe2a140[shape=record, label="  %14 = mul i32 %13, -6"];
	Node0xe2a1b0[shape=record, label="  %15 = and i32 %3, %1"];
	Node0xe2a250[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0xe2a2c0[shape=record, label="  %17 = and i32 %1, %0"];
	Node0xe2a330[shape=record, label="  %18 = sub i32 -2, %0"];
	Node0xe2a3a0[shape=record, label="  %19 = sub i32 %18, %12"];
	Node0xe2a410[shape=record, label="  %20 = add i32 %19, %11"];
	Node0xe2a480[shape=record, label="  %21 = sub i32 %20, %17"];
	Node0xe2a4f0[shape=record, label="  %22 = add i32 %21, %10"];
	Node0xe2a560[shape=record, label="  %23 = add i32 %22, %14"];
	Node0xe2a5d0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0xe2a640[shape=record, label="  %25 = add i32 %24, %6"];
	Node0xe2a6b0[shape=record, label="  %26 = icmp eq i32 %8, %25"];
	Node0xdca268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xe2ab50[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xe2aba0[shape=record, label="  ret void"];
	Node0xe29b90 -> Node0xe29c30;
	Node0xe29c30 -> Node0xe29cf0;
	Node0xe29cf0 -> Node0xe29d60;
	Node0xe29d60 -> Node0xe29e00;
	Node0xe29e00 -> Node0xe29e70;
	Node0xe29e70 -> Node0xe29ee0;
	Node0xe29ee0 -> Node0xe29f50;
	Node0xe29f50 -> Node0xe29fc0;
	Node0xe29fc0 -> Node0xe2a030;
	Node0xe2a030 -> Node0xe2a0a0;
	Node0xe2a0a0 -> Node0xe2a140;
	Node0xe2a140 -> Node0xe2a1b0;
	Node0xe2a1b0 -> Node0xe2a250;
	Node0xe2a250 -> Node0xe2a2c0;
	Node0xe2a2c0 -> Node0xe2a330;
	Node0xe2a330 -> Node0xe2a3a0;
	Node0xe2a3a0 -> Node0xe2a410;
	Node0xe2a410 -> Node0xe2a480;
	Node0xe2a480 -> Node0xe2a4f0;
	Node0xe2a4f0 -> Node0xe2a560;
	Node0xe2a560 -> Node0xe2a5d0;
	Node0xe2a5d0 -> Node0xe2a640;
	Node0xe2a640 -> Node0xe2a6b0;
	Node0xe2a6b0 -> Node0xdca268;
	Node0xdca268 -> Node0xe2ab50;
	Node0xe2ab50 -> Node0xe2aba0;
edge [color=red]
	Node0xe29c30 -> Node0xe29cf0;
	Node0xe29cf0 -> Node0xe29d60;
	Node0xe29d60 -> Node0xe29e00;
	Node0xe29e00 -> Node0xe29e70;
	Node0xe29ee0 -> Node0xe29f50;
	Node0xe29b90 -> Node0xe29fc0;
	Node0xe29ee0 -> Node0xe2a0a0;
	Node0xe2a0a0 -> Node0xe2a140;
	Node0xe29b90 -> Node0xe2a1b0;
	Node0xe2a1b0 -> Node0xe2a250;
	Node0xe2a330 -> Node0xe2a3a0;
	Node0xe2a030 -> Node0xe2a3a0;
	Node0xe2a3a0 -> Node0xe2a410;
	Node0xe29fc0 -> Node0xe2a410;
	Node0xe2a410 -> Node0xe2a480;
	Node0xe2a2c0 -> Node0xe2a480;
	Node0xe2a480 -> Node0xe2a4f0;
	Node0xe29f50 -> Node0xe2a4f0;
	Node0xe2a4f0 -> Node0xe2a560;
	Node0xe2a140 -> Node0xe2a560;
	Node0xe2a560 -> Node0xe2a5d0;
	Node0xe2a250 -> Node0xe2a5d0;
	Node0xe2a5d0 -> Node0xe2a640;
	Node0xe29d60 -> Node0xe2a640;
	Node0xe29e70 -> Node0xe2a6b0;
	Node0xe2a640 -> Node0xe2a6b0;
	Node0xe2a6b0 -> Node0xdca268;
	Node0xdca268 -> Node0xe2ab50;
}
