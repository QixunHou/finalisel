digraph "DFG for'crackme' function" {
	Node0x1bfb090[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1bfb100[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x1bfb170[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x1bfb1e0[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1bfb250[shape=record, label="  %9 = xor i32 %8, %3"];
	Node0x1bfb2f0[shape=record, label="  %10 = add i32 %1, 2"];
	Node0x1bfb360[shape=record, label="  %11 = add i32 %10, %6"];
	Node0x1bfb3d0[shape=record, label="  %12 = add i32 %11, %7"];
	Node0x1bfb440[shape=record, label="  %13 = add i32 %12, %9"];
	Node0x1bfb4b0[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0x1bfb520[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x1bfb590[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x1bfb600[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x1bfb670[shape=record, label="  %18 = xor i32 %1, -1"];
	Node0x1bfb6e0[shape=record, label="  %19 = and i32 %18, %2"];
	Node0x1bfb750[shape=record, label="  %20 = and i32 %8, %3"];
	Node0x1bfb7f0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x1bfb890[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x1bfb900[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x1bfb970[shape=record, label="  %24 = shl i32 %3, 1"];
	Node0x1bfb9e0[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x1bfba80[shape=record, label="  %26 = mul i32 %7, 5"];
	Node0x1bfbaf0[shape=record, label="  %27 = shl i32 %17, 1"];
	Node0x1bfbb60[shape=record, label="  %28 = sub i32 1, %0"];
	Node0x1bfbbd0[shape=record, label="  %29 = sub i32 %28, %0"];
	Node0x1bfbc40[shape=record, label="  %30 = add i32 %29, 1"];
	Node0x1bfbcb0[shape=record, label="  %31 = sub i32 %30, %14"];
	Node0x1bfbd20[shape=record, label="  %32 = add i32 %31, %16"];
	Node0x1bfbfa0[shape=record, label="  %33 = sub i32 %32, %19"];
	Node0x1bfc010[shape=record, label="  %34 = add i32 %33, %6"];
	Node0x1bfc080[shape=record, label="  %35 = sub i32 %34, %3"];
	Node0x1bfc0f0[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x1bfc160[shape=record, label="  %37 = sub i32 %36, %20"];
	Node0x1bfc1d0[shape=record, label="  %38 = add i32 %37, %27"];
	Node0x1bfc240[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x1bfc2b0[shape=record, label="  %40 = add i32 %39, %26"];
	Node0x1bfc320[shape=record, label="  %41 = sub i32 %40, %22"];
	Node0x1bfc390[shape=record, label="  %42 = icmp eq i32 %13, %41"];
	Node0x1b9b268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1bfc830[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x1bfc880[shape=record, label="  ret void"];
	Node0x1bfb090 -> Node0x1bfb100;
	Node0x1bfb100 -> Node0x1bfb170;
	Node0x1bfb170 -> Node0x1bfb1e0;
	Node0x1bfb1e0 -> Node0x1bfb250;
	Node0x1bfb250 -> Node0x1bfb2f0;
	Node0x1bfb2f0 -> Node0x1bfb360;
	Node0x1bfb360 -> Node0x1bfb3d0;
	Node0x1bfb3d0 -> Node0x1bfb440;
	Node0x1bfb440 -> Node0x1bfb4b0;
	Node0x1bfb4b0 -> Node0x1bfb520;
	Node0x1bfb520 -> Node0x1bfb590;
	Node0x1bfb590 -> Node0x1bfb600;
	Node0x1bfb600 -> Node0x1bfb670;
	Node0x1bfb670 -> Node0x1bfb6e0;
	Node0x1bfb6e0 -> Node0x1bfb750;
	Node0x1bfb750 -> Node0x1bfb7f0;
	Node0x1bfb7f0 -> Node0x1bfb890;
	Node0x1bfb890 -> Node0x1bfb900;
	Node0x1bfb900 -> Node0x1bfb970;
	Node0x1bfb970 -> Node0x1bfb9e0;
	Node0x1bfb9e0 -> Node0x1bfba80;
	Node0x1bfba80 -> Node0x1bfbaf0;
	Node0x1bfbaf0 -> Node0x1bfbb60;
	Node0x1bfbb60 -> Node0x1bfbbd0;
	Node0x1bfbbd0 -> Node0x1bfbc40;
	Node0x1bfbc40 -> Node0x1bfbcb0;
	Node0x1bfbcb0 -> Node0x1bfbd20;
	Node0x1bfbd20 -> Node0x1bfbfa0;
	Node0x1bfbfa0 -> Node0x1bfc010;
	Node0x1bfc010 -> Node0x1bfc080;
	Node0x1bfc080 -> Node0x1bfc0f0;
	Node0x1bfc0f0 -> Node0x1bfc160;
	Node0x1bfc160 -> Node0x1bfc1d0;
	Node0x1bfc1d0 -> Node0x1bfc240;
	Node0x1bfc240 -> Node0x1bfc2b0;
	Node0x1bfc2b0 -> Node0x1bfc320;
	Node0x1bfc320 -> Node0x1bfc390;
	Node0x1bfc390 -> Node0x1b9b268;
	Node0x1b9b268 -> Node0x1bfc830;
	Node0x1bfc830 -> Node0x1bfc880;
edge [color=red]
	Node0x1bfb090 -> Node0x1bfb100;
	Node0x1bfb1e0 -> Node0x1bfb250;
	Node0x1bfb2f0 -> Node0x1bfb360;
	Node0x1bfb100 -> Node0x1bfb360;
	Node0x1bfb360 -> Node0x1bfb3d0;
	Node0x1bfb170 -> Node0x1bfb3d0;
	Node0x1bfb3d0 -> Node0x1bfb440;
	Node0x1bfb250 -> Node0x1bfb440;
	Node0x1bfb520 -> Node0x1bfb590;
	Node0x1bfb670 -> Node0x1bfb6e0;
	Node0x1bfb1e0 -> Node0x1bfb750;
	Node0x1bfb750 -> Node0x1bfb7f0;
	Node0x1bfb7f0 -> Node0x1bfb890;
	Node0x1bfb970 -> Node0x1bfb9e0;
	Node0x1bfb170 -> Node0x1bfba80;
	Node0x1bfb600 -> Node0x1bfbaf0;
	Node0x1bfbb60 -> Node0x1bfbbd0;
	Node0x1bfbbd0 -> Node0x1bfbc40;
	Node0x1bfbc40 -> Node0x1bfbcb0;
	Node0x1bfb4b0 -> Node0x1bfbcb0;
	Node0x1bfbcb0 -> Node0x1bfbd20;
	Node0x1bfb590 -> Node0x1bfbd20;
	Node0x1bfbd20 -> Node0x1bfbfa0;
	Node0x1bfb6e0 -> Node0x1bfbfa0;
	Node0x1bfbfa0 -> Node0x1bfc010;
	Node0x1bfb100 -> Node0x1bfc010;
	Node0x1bfc010 -> Node0x1bfc080;
	Node0x1bfc080 -> Node0x1bfc0f0;
	Node0x1bfb900 -> Node0x1bfc0f0;
	Node0x1bfc0f0 -> Node0x1bfc160;
	Node0x1bfb750 -> Node0x1bfc160;
	Node0x1bfc160 -> Node0x1bfc1d0;
	Node0x1bfbaf0 -> Node0x1bfc1d0;
	Node0x1bfc1d0 -> Node0x1bfc240;
	Node0x1bfb9e0 -> Node0x1bfc240;
	Node0x1bfc240 -> Node0x1bfc2b0;
	Node0x1bfba80 -> Node0x1bfc2b0;
	Node0x1bfc2b0 -> Node0x1bfc320;
	Node0x1bfb890 -> Node0x1bfc320;
	Node0x1bfb440 -> Node0x1bfc390;
	Node0x1bfc320 -> Node0x1bfc390;
	Node0x1bfc390 -> Node0x1b9b268;
	Node0x1b9b268 -> Node0x1bfc830;
}
