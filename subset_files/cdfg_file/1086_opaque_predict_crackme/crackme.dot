digraph "DFG for'crackme' function" {
	Node0x227e1a0[shape=record, label="  %5 = mul i32 %3, 3"];
	Node0x227e210[shape=record, label="  %6 = sub i32 %5, %1"];
	Node0x227e2b0[shape=record, label="  %7 = shl i32 %3, 1"];
	Node0x227e350[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x227e3c0[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x227e460[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x227e4d0[shape=record, label="  %11 = and i32 %10, %1"];
	Node0x227e540[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x227e5b0[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x227e620[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x227e690[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x227e700[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x227e770[shape=record, label="  %17 = mul i32 %11, 3"];
	Node0x227e7e0[shape=record, label="  %18 = and i32 %2, %1"];
	Node0x227e850[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x227e8c0[shape=record, label="  %20 = xor i32 %3, %0"];
	Node0x227e930[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x227e9a0[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x227ea10[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x227ea80[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x227eaf0[shape=record, label="  %25 = or i32 %21, %3"];
	Node0x227eb60[shape=record, label="  %26 = or i32 %3, %0"];
	Node0x227ec00[shape=record, label="  %27 = shl i32 %26, 2"];
	Node0x227eca0[shape=record, label="  %28 = xor i32 %27, -4"];
	Node0x227ed40[shape=record, label="  %29 = mul i32 %22, 5"];
	Node0x227edb0[shape=record, label="  %30 = and i32 %3, %0"];
	Node0x227ee20[shape=record, label="  %31 = shl i32 %30, 2"];
	Node0x227ee90[shape=record, label="  %32 = add i32 %20, %2"];
	Node0x227f110[shape=record, label="  %33 = shl i32 %32, 1"];
	Node0x227f180[shape=record, label="  %34 = add i32 %0, %2"];
	Node0x227f220[shape=record, label="  %35 = add i32 %34, 6"];
	Node0x227f290[shape=record, label="  %36 = add i32 %35, %12"];
	Node0x227f300[shape=record, label="  %37 = sub i32 %36, %13"];
	Node0x227f370[shape=record, label="  %38 = add i32 %37, %17"];
	Node0x227f3e0[shape=record, label="  %39 = sub i32 %38, %19"];
	Node0x227f450[shape=record, label="  %40 = sub i32 %39, %25"];
	Node0x227f4c0[shape=record, label="  %41 = add i32 %40, %16"];
	Node0x227f530[shape=record, label="  %42 = add i32 %41, %29"];
	Node0x227f5a0[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x227f610[shape=record, label="  %44 = add i32 %43, %24"];
	Node0x227f680[shape=record, label="  %45 = add i32 %44, %28"];
	Node0x227f6f0[shape=record, label="  %46 = add i32 %45, %33"];
	Node0x227f760[shape=record, label="  %47 = icmp eq i32 %9, %46"];
	Node0x221e268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x227fc00[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0x227fc50[shape=record, label="  ret void"];
	Node0x227e1a0 -> Node0x227e210;
	Node0x227e210 -> Node0x227e2b0;
	Node0x227e2b0 -> Node0x227e350;
	Node0x227e350 -> Node0x227e3c0;
	Node0x227e3c0 -> Node0x227e460;
	Node0x227e460 -> Node0x227e4d0;
	Node0x227e4d0 -> Node0x227e540;
	Node0x227e540 -> Node0x227e5b0;
	Node0x227e5b0 -> Node0x227e620;
	Node0x227e620 -> Node0x227e690;
	Node0x227e690 -> Node0x227e700;
	Node0x227e700 -> Node0x227e770;
	Node0x227e770 -> Node0x227e7e0;
	Node0x227e7e0 -> Node0x227e850;
	Node0x227e850 -> Node0x227e8c0;
	Node0x227e8c0 -> Node0x227e930;
	Node0x227e930 -> Node0x227e9a0;
	Node0x227e9a0 -> Node0x227ea10;
	Node0x227ea10 -> Node0x227ea80;
	Node0x227ea80 -> Node0x227eaf0;
	Node0x227eaf0 -> Node0x227eb60;
	Node0x227eb60 -> Node0x227ec00;
	Node0x227ec00 -> Node0x227eca0;
	Node0x227eca0 -> Node0x227ed40;
	Node0x227ed40 -> Node0x227edb0;
	Node0x227edb0 -> Node0x227ee20;
	Node0x227ee20 -> Node0x227ee90;
	Node0x227ee90 -> Node0x227f110;
	Node0x227f110 -> Node0x227f180;
	Node0x227f180 -> Node0x227f220;
	Node0x227f220 -> Node0x227f290;
	Node0x227f290 -> Node0x227f300;
	Node0x227f300 -> Node0x227f370;
	Node0x227f370 -> Node0x227f3e0;
	Node0x227f3e0 -> Node0x227f450;
	Node0x227f450 -> Node0x227f4c0;
	Node0x227f4c0 -> Node0x227f530;
	Node0x227f530 -> Node0x227f5a0;
	Node0x227f5a0 -> Node0x227f610;
	Node0x227f610 -> Node0x227f680;
	Node0x227f680 -> Node0x227f6f0;
	Node0x227f6f0 -> Node0x227f760;
	Node0x227f760 -> Node0x221e268;
	Node0x221e268 -> Node0x227fc00;
	Node0x227fc00 -> Node0x227fc50;
edge [color=red]
	Node0x227e1a0 -> Node0x227e210;
	Node0x227e2b0 -> Node0x227e350;
	Node0x227e210 -> Node0x227e3c0;
	Node0x227e350 -> Node0x227e3c0;
	Node0x227e460 -> Node0x227e4d0;
	Node0x227e4d0 -> Node0x227e540;
	Node0x227e620 -> Node0x227e690;
	Node0x227e690 -> Node0x227e700;
	Node0x227e4d0 -> Node0x227e770;
	Node0x227e7e0 -> Node0x227e850;
	Node0x227e930 -> Node0x227e9a0;
	Node0x227e9a0 -> Node0x227ea10;
	Node0x227ea10 -> Node0x227ea80;
	Node0x227e930 -> Node0x227eaf0;
	Node0x227eb60 -> Node0x227ec00;
	Node0x227ec00 -> Node0x227eca0;
	Node0x227e9a0 -> Node0x227ed40;
	Node0x227edb0 -> Node0x227ee20;
	Node0x227e8c0 -> Node0x227ee90;
	Node0x227ee90 -> Node0x227f110;
	Node0x227f180 -> Node0x227f220;
	Node0x227f220 -> Node0x227f290;
	Node0x227e540 -> Node0x227f290;
	Node0x227f290 -> Node0x227f300;
	Node0x227e5b0 -> Node0x227f300;
	Node0x227f300 -> Node0x227f370;
	Node0x227e770 -> Node0x227f370;
	Node0x227f370 -> Node0x227f3e0;
	Node0x227e850 -> Node0x227f3e0;
	Node0x227f3e0 -> Node0x227f450;
	Node0x227eaf0 -> Node0x227f450;
	Node0x227f450 -> Node0x227f4c0;
	Node0x227e700 -> Node0x227f4c0;
	Node0x227f4c0 -> Node0x227f530;
	Node0x227ed40 -> Node0x227f530;
	Node0x227f530 -> Node0x227f5a0;
	Node0x227ee20 -> Node0x227f5a0;
	Node0x227f5a0 -> Node0x227f610;
	Node0x227ea80 -> Node0x227f610;
	Node0x227f610 -> Node0x227f680;
	Node0x227eca0 -> Node0x227f680;
	Node0x227f680 -> Node0x227f6f0;
	Node0x227f110 -> Node0x227f6f0;
	Node0x227e3c0 -> Node0x227f760;
	Node0x227f6f0 -> Node0x227f760;
	Node0x227f760 -> Node0x221e268;
	Node0x221e268 -> Node0x227fc00;
}
