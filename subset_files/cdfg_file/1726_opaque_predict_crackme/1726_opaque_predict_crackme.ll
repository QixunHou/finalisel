; ModuleID = '../.././c_source_file/1726_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1726_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %10, %8
  %12 = and i32 %2, %0
  %13 = xor i32 %2, -1
  %14 = and i32 %13, %1
  %15 = or i32 %12, %14
  %16 = sub i32 %15, %11
  %17 = or i32 %5, %4
  %18 = xor i32 %4, %3
  %19 = and i32 %17, %18
  %20 = add i32 %16, %19
  %21 = xor i32 %3, -1
  %22 = and i32 %21, %4
  %23 = xor i32 %22, -1
  %24 = xor i32 %5, %4
  %25 = xor i32 %24, -1
  %26 = and i32 %25, %23
  %27 = shl i32 %26, 1
  %28 = add i32 %20, %27
  %29 = or i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %10, %30
  %32 = xor i32 %1, -1
  %33 = or i32 %13, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %32
  %36 = xor i32 %2, %1
  %37 = and i32 %36, %29
  %38 = and i32 %33, %1
  %39 = shl i32 %38, 1
  %40 = or i32 %32, %0
  %41 = xor i32 %40, %2
  %42 = and i32 %32, %0
  %43 = and i32 %42, %2
  %44 = xor i32 %0, -1
  %45 = or i32 %32, %2
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %0
  %48 = xor i32 %43, %47
  %49 = and i32 %33, %7
  %50 = shl i32 %49, 1
  %51 = or i32 %2, %1
  %52 = and i32 %51, %0
  %53 = or i32 %36, %44
  %54 = xor i32 %14, -1
  %55 = and i32 %8, %2
  %56 = xor i32 %42, -1
  %57 = and i32 %13, %56
  %58 = and i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %59, %2
  %61 = or i32 %30, %2
  %62 = or i32 %12, %32
  %63 = xor i32 %51, %58
  %64 = or i32 %7, %34
  %65 = shl i32 %64, 1
  %66 = xor i32 %36, %0
  %67 = xor i32 %36, -1
  %68 = or i32 %67, %0
  %69 = and i32 %2, %1
  %70 = xor i32 %69, -1
  %71 = add i32 %69, 1
  %72 = or i32 %12, %1
  %73 = and i32 %69, %0
  %74 = and i32 %51, %44
  %75 = xor i32 %74, -1
  %76 = xor i32 %73, %75
  %77 = xor i32 %40, -1
  %78 = or i32 %67, %77
  %79 = or i32 %58, %13
  %80 = and i32 %33, %8
  %81 = or i32 %13, %77
  %82 = shl i32 %81, 1
  %83 = or i32 %13, %1
  %84 = or i32 %83, %44
  %85 = or i32 %8, %2
  %86 = or i32 %42, %2
  %87 = or i32 %36, %58
  %88 = shl i32 %87, 1
  %89 = xor i32 %56, %2
  %90 = and i32 %13, %0
  %91 = xor i32 %90, -1
  %92 = and i32 %91, %1
  %93 = and i32 %33, %32
  %94 = and i32 %36, %0
  %95 = or i32 %9, %1
  %96 = or i32 %12, %77
  %97 = shl i32 %96, 1
  %98 = or i32 %34, %1
  %99 = or i32 %9, %58
  %100 = or i32 %83, %0
  %101 = or i32 %12, %30
  %102 = and i32 %10, %32
  %103 = xor i32 %73, %66
  %104 = xor i32 %91, %1
  %105 = or i32 %51, %44
  %106 = shl i32 %105, 1
  %107 = xor i32 %70, %0
  %108 = or i32 %36, %0
  %109 = and i32 %7, %13
  %110 = and i32 %9, %29
  %111 = or i32 %58, %10
  %112 = or i32 %2, %0
  %113 = and i32 %112, %32
  %114 = xor i32 %66, -1
  %115 = or i32 %73, %114
  %116 = or i32 %14, %42
  %117 = or i32 %67, %44
  %118 = and i32 %54, %44
  %119 = or i32 %51, %0
  %120 = and i32 %112, %8
  %121 = or i32 %10, %1
  %122 = and i32 %36, %59
  %123 = and i32 %10, %59
  %124 = or i32 %54, %44
  %125 = or i32 %58, %67
  %126 = and i32 %29, %67
  %127 = and i32 %7, %91
  %128 = xor i32 %12, %32
  %129 = xor i32 %51, -1
  %130 = and i32 %69, %44
  %131 = or i32 %130, %52
  %132 = or i32 %9, %7
  %133 = xor i32 %45, %0
  %134 = or i32 %43, %133
  %135 = xor i32 %12, %40
  %136 = and i32 %7, %10
  %137 = shl i32 %136, 1
  %138 = and i32 %29, %2
  %139 = or i32 %90, %32
  %140 = shl i32 %139, 1
  %141 = or i32 %130, %94
  %142 = shl i32 %141, 1
  %143 = xor i32 %83, -1
  %144 = add i32 %83, 1
  %145 = and i32 %36, %44
  %146 = or i32 %14, %44
  %147 = xor i32 %33, %58
  %148 = or i32 %12, %8
  %149 = or i32 %73, %74
  %150 = xor i32 %112, -1
  %151 = or i32 %150, %8
  %152 = or i32 %143, %0
  %153 = and i32 %83, %0
  %154 = and i32 %67, %59
  %155 = or i32 %9, %32
  %156 = add i32 %112, 1
  %157 = xor i32 %67, %0
  %158 = xor i32 %94, 2147483647
  %159 = xor i32 %158, %130
  %160 = or i32 %43, %66
  %161 = xor i32 %133, -1
  %162 = xor i32 %43, %161
  %163 = and i32 %129, %44
  %164 = shl i32 %163, 4
  %165 = and i32 %14, %44
  %166 = mul i32 %165, 21
  %167 = and i32 %129, %0
  %168 = and i32 %14, %0
  %169 = and i32 %143, %44
  %170 = and i32 %143, %0
  %171 = xor i32 %5, -1
  %172 = xor i32 %18, -1
  %173 = or i32 %171, %172
  %174 = or i32 %5, %3
  %175 = xor i32 %174, %4
  %176 = xor i32 %17, -1
  %177 = xor i32 %176, %3
  %178 = and i32 %5, %4
  %179 = xor i32 %178, -1
  %180 = shl i32 %179, 1
  %181 = xor i32 %4, -1
  %182 = and i32 %171, %3
  %183 = xor i32 %182, -1
  %184 = and i32 %183, %181
  %185 = shl i32 %184, 2
  %186 = or i32 %171, %4
  %187 = xor i32 %186, -1
  %188 = xor i32 %187, %3
  %189 = or i32 %4, %3
  %190 = xor i32 %189, -1
  %191 = xor i32 %5, %3
  %192 = xor i32 %191, -1
  %193 = or i32 %192, %190
  %194 = and i32 %171, %4
  %195 = or i32 %194, %3
  %196 = or i32 %24, %3
  %197 = or i32 %24, %172
  %198 = or i32 %21, %4
  %199 = xor i32 %198, %5
  %200 = or i32 %22, %171
  %201 = or i32 %18, %176
  %202 = and i32 %21, %5
  %203 = and i32 %202, %4
  %204 = xor i32 %191, %4
  %205 = or i32 %203, %204
  %206 = shl i32 %205, 1
  %207 = xor i32 %182, %4
  %208 = or i32 %172, %5
  %209 = xor i32 %178, %183
  %210 = or i32 %18, %25
  %211 = and i32 %17, %3
  %212 = or i32 %174, %4
  %213 = and i32 %5, %3
  %214 = and i32 %213, %4
  %215 = and i32 %191, %181
  %216 = or i32 %214, %215
  %217 = and i32 %174, %4
  %218 = and i32 %202, %181
  %219 = and i32 %192, %4
  %220 = or i32 %218, %219
  %221 = xor i32 %194, -1
  %222 = and i32 %18, %221
  %223 = shl i32 %222, 1
  %224 = and i32 %221, %172
  %225 = or i32 %191, %4
  %226 = xor i32 %225, -1
  %227 = or i32 %203, %226
  %228 = and i32 %18, %5
  %229 = and i32 %174, %181
  %230 = or i32 %214, %229
  %231 = and i32 %183, %4
  %232 = shl i32 %231, 1
  %233 = xor i32 %174, -1
  %234 = xor i32 %233, %4
  %235 = shl i32 %234, 1
  %236 = add i32 %4, 1
  %237 = and i32 %18, %179
  %238 = and i32 %4, %3
  %239 = xor i32 %238, -1
  %240 = and i32 %191, %239
  %241 = or i32 %25, %190
  %242 = or i32 %24, %22
  %243 = and i32 %239, %5
  %244 = and i32 %213, %181
  %245 = and i32 %191, %4
  %246 = or i32 %244, %245
  %247 = or i32 %213, %181
  %248 = and i32 %17, %21
  %249 = or i32 %183, %4
  %250 = shl i32 %190, 2
  %251 = or i32 %187, %172
  %252 = and i32 %198, %192
  %253 = and i32 %186, %3
  %254 = shl i32 %219, 1
  %255 = xor i32 %221, %3
  %256 = xor i32 %175, -1
  %257 = xor i32 %214, %256
  %258 = and i32 %189, %171
  %259 = or i32 %182, %22
  %260 = and i32 %25, %172
  %261 = xor i32 %213, -1
  %262 = and i32 %261, %181
  %263 = or i32 %171, %3
  %264 = xor i32 %194, %263
  %265 = or i32 %213, %4
  %266 = shl i32 %265, 1
  %267 = and i32 %191, %198
  %268 = and i32 %191, %23
  %269 = or i32 %194, %172
  %270 = or i32 %178, %3
  %271 = or i32 %191, %190
  %272 = xor i32 %178, %174
  %273 = or i32 %238, %192
  %274 = shl i32 %273, 1
  %275 = and i32 %263, %4
  %276 = and i32 %198, %5
  %277 = and i32 %233, %181
  %278 = mul i32 %277, 6
  %279 = and i32 %182, %181
  %280 = and i32 %233, %4
  %281 = and i32 %182, %4
  %282 = mul i32 %281, -23
  %283 = xor i32 %263, -1
  %284 = and i32 %283, %181
  %285 = mul i32 %284, -7
  %286 = and i32 %283, %4
  %287 = shl i32 %286, 1
  %288 = mul i32 %214, -11
  %289 = add i32 %138, %30
  %290 = add i32 %289, %89
  %291 = add i32 %290, %85
  %292 = add i32 %291, %153
  %293 = add i32 %292, %151
  %294 = add i32 %293, %117
  %295 = add i32 %294, %101
  %296 = add i32 %295, %78
  %297 = add i32 %296, %62
  %298 = add i32 %297, %22
  %299 = add i32 %298, %173
  %300 = add i32 %299, %159
  %301 = add i32 %300, %269
  %302 = add i32 %301, %270
  %303 = add i32 %302, %237
  %304 = add i32 %303, %188
  %305 = add i32 %304, %177
  %306 = add i32 %305, %175
  %307 = shl i32 %306, 1
  %308 = sub i32 %57, %60
  %309 = add i32 %308, %130
  %310 = sub i32 %309, %116
  %311 = sub i32 %310, %110
  %312 = add i32 %311, %194
  %313 = sub i32 %312, %229
  %314 = add i32 %313, %216
  %315 = add i32 %314, %230
  %316 = mul i32 %315, 5
  %317 = add i32 %169, %73
  %318 = add i32 %317, %280
  %319 = mul i32 %318, -9
  %320 = add i32 %182, %72
  %321 = add i32 %320, %240
  %322 = shl i32 %321, 2
  %323 = sub i32 %168, %279
  %324 = mul i32 %323, 12
  %325 = add i32 %170, %167
  %326 = shl i32 %325, 4
  %327 = add i32 %70, %0
  %328 = mul i32 %327, -3
  %329 = sub i32 %0, %1
  %330 = sub i32 %329, %2
  %331 = add i32 %330, %58
  %332 = sub i32 %331, %40
  %333 = add i32 %332, %8
  %334 = sub i32 %333, %7
  %335 = sub i32 %334, %41
  %336 = add i32 %335, %54
  %337 = add i32 %336, %55
  %338 = sub i32 %337, %51
  %339 = add i32 %338, %61
  %340 = add i32 %339, %71
  %341 = add i32 %340, %79
  %342 = add i32 %341, %86
  %343 = add i32 %342, %12
  %344 = add i32 %343, %36
  %345 = sub i32 %344, %109
  %346 = sub i32 %345, %33
  %347 = add i32 %346, %129
  %348 = add i32 %347, %83
  %349 = add i32 %348, %144
  %350 = sub i32 %349, %14
  %351 = add i32 %350, %156
  %352 = sub i32 %351, %31
  %353 = add i32 %352, %35
  %354 = sub i32 %353, %37
  %355 = add i32 %354, %52
  %356 = sub i32 %355, %53
  %357 = sub i32 %356, %63
  %358 = sub i32 %357, %66
  %359 = sub i32 %358, %68
  %360 = sub i32 %359, %80
  %361 = sub i32 %360, %82
  %362 = add i32 %361, %84
  %363 = sub i32 %362, %92
  %364 = add i32 %363, %93
  %365 = sub i32 %364, %94
  %366 = add i32 %365, %95
  %367 = sub i32 %366, %98
  %368 = add i32 %367, %99
  %369 = add i32 %368, %100
  %370 = sub i32 %369, %102
  %371 = add i32 %370, %104
  %372 = add i32 %371, %107
  %373 = sub i32 %372, %108
  %374 = add i32 %373, %111
  %375 = add i32 %374, %113
  %376 = add i32 %375, %118
  %377 = sub i32 %376, %119
  %378 = add i32 %377, %120
  %379 = sub i32 %378, %121
  %380 = add i32 %379, %122
  %381 = add i32 %380, %123
  %382 = add i32 %381, %124
  %383 = add i32 %382, %125
  %384 = sub i32 %383, %126
  %385 = sub i32 %384, %127
  %386 = sub i32 %385, %128
  %387 = add i32 %386, %132
  %388 = add i32 %387, %135
  %389 = add i32 %388, %145
  %390 = sub i32 %389, %146
  %391 = sub i32 %390, %147
  %392 = add i32 %391, %148
  %393 = add i32 %392, %152
  %394 = add i32 %393, %154
  %395 = sub i32 %394, %155
  %396 = add i32 %395, %157
  %397 = add i32 %396, %236
  %398 = add i32 %397, %4
  %399 = sub i32 %398, %39
  %400 = sub i32 %399, %48
  %401 = sub i32 %400, %50
  %402 = sub i32 %401, %65
  %403 = add i32 %402, %76
  %404 = sub i32 %403, %88
  %405 = sub i32 %404, %97
  %406 = sub i32 %405, %103
  %407 = sub i32 %406, %106
  %408 = sub i32 %407, %115
  %409 = sub i32 %408, %131
  %410 = add i32 %409, %134
  %411 = sub i32 %410, %137
  %412 = sub i32 %411, %140
  %413 = add i32 %412, %149
  %414 = sub i32 %413, %160
  %415 = add i32 %414, %162
  %416 = sub i32 %415, %164
  %417 = add i32 %416, %166
  %418 = add i32 %417, %172
  %419 = sub i32 %418, %142
  %420 = add i32 %419, %199
  %421 = add i32 %420, %200
  %422 = add i32 %421, %208
  %423 = add i32 %422, %228
  %424 = sub i32 %423, %243
  %425 = sub i32 %424, %250
  %426 = sub i32 %425, %17
  %427 = sub i32 %426, %258
  %428 = sub i32 %427, %276
  %429 = add i32 %428, %326
  %430 = add i32 %429, %328
  %431 = sub i32 %430, %180
  %432 = add i32 %431, %193
  %433 = sub i32 %432, %195
  %434 = add i32 %433, %196
  %435 = add i32 %434, %197
  %436 = sub i32 %435, %201
  %437 = sub i32 %436, %207
  %438 = add i32 %437, %209
  %439 = add i32 %438, %210
  %440 = add i32 %439, %211
  %441 = add i32 %440, %212
  %442 = add i32 %441, %217
  %443 = add i32 %442, %224
  %444 = sub i32 %443, %241
  %445 = add i32 %444, %242
  %446 = add i32 %445, %225
  %447 = sub i32 %446, %247
  %448 = sub i32 %447, %248
  %449 = sub i32 %448, %249
  %450 = add i32 %449, %251
  %451 = add i32 %450, %252
  %452 = sub i32 %451, %253
  %453 = sub i32 %452, %255
  %454 = add i32 %453, %215
  %455 = add i32 %454, %259
  %456 = sub i32 %455, %260
  %457 = sub i32 %456, %262
  %458 = sub i32 %457, %264
  %459 = add i32 %458, %267
  %460 = sub i32 %459, %268
  %461 = add i32 %460, %271
  %462 = sub i32 %461, %272
  %463 = add i32 %462, %275
  %464 = add i32 %463, %244
  %465 = sub i32 %464, %185
  %466 = sub i32 %465, %220
  %467 = sub i32 %466, %223
  %468 = sub i32 %467, %227
  %469 = sub i32 %468, %232
  %470 = sub i32 %469, %235
  %471 = add i32 %470, %246
  %472 = sub i32 %471, %254
  %473 = add i32 %472, %257
  %474 = sub i32 %473, %266
  %475 = sub i32 %474, %274
  %476 = add i32 %475, %278
  %477 = add i32 %476, %282
  %478 = add i32 %477, %285
  %479 = sub i32 %478, %287
  %480 = add i32 %479, %288
  %481 = sub i32 %480, %206
  %482 = add i32 %481, %324
  %483 = add i32 %482, %319
  %484 = add i32 %483, %322
  %485 = add i32 %484, %316
  %486 = add i32 %485, %307
  %487 = icmp eq i32 %28, %486
  %488 = select i1 %487, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %489 = tail call i32 @puts(i8* nonnull dereferenceable(1) %488)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
