digraph "DFG for'crackme' function" {
	Node0x1103b20[shape=record, label="  %3 = shl i32 %0, 1"];
	Node0x1103bc0[shape=record, label="  %4 = xor i32 %3, -2"];
	Node0x1103c80[shape=record, label="  %5 = add i32 %4, %3"];
	Node0x1103cf0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1103d60[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x1103dd0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1103e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1103eb0[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1103f20[shape=record, label="  %11 = or i32 %6, %0"];
	Node0x1103f90[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x1104000[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x11040a0[shape=record, label="  %14 = mul i32 %13, 3"];
	Node0x1104140[shape=record, label="  %15 = shl i32 %9, 2"];
	Node0x11041b0[shape=record, label="  %16 = add i32 %10, %7"];
	Node0x1104220[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x1104290[shape=record, label="  %18 = sub i32 1, %9"];
	Node0x1104300[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x1104370[shape=record, label="  %20 = sub i32 %19, %11"];
	Node0x11043e0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x1104450[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x11044c0[shape=record, label="  %23 = add i32 %22, %17"];
	Node0x1104530[shape=record, label="  %24 = icmp eq i32 %5, %23"];
	Node0x10a4268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x11049d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1104a20[shape=record, label="  ret void"];
	Node0x1103b20 -> Node0x1103bc0;
	Node0x1103bc0 -> Node0x1103c80;
	Node0x1103c80 -> Node0x1103cf0;
	Node0x1103cf0 -> Node0x1103d60;
	Node0x1103d60 -> Node0x1103dd0;
	Node0x1103dd0 -> Node0x1103e40;
	Node0x1103e40 -> Node0x1103eb0;
	Node0x1103eb0 -> Node0x1103f20;
	Node0x1103f20 -> Node0x1103f90;
	Node0x1103f90 -> Node0x1104000;
	Node0x1104000 -> Node0x11040a0;
	Node0x11040a0 -> Node0x1104140;
	Node0x1104140 -> Node0x11041b0;
	Node0x11041b0 -> Node0x1104220;
	Node0x1104220 -> Node0x1104290;
	Node0x1104290 -> Node0x1104300;
	Node0x1104300 -> Node0x1104370;
	Node0x1104370 -> Node0x11043e0;
	Node0x11043e0 -> Node0x1104450;
	Node0x1104450 -> Node0x11044c0;
	Node0x11044c0 -> Node0x1104530;
	Node0x1104530 -> Node0x10a4268;
	Node0x10a4268 -> Node0x11049d0;
	Node0x11049d0 -> Node0x1104a20;
edge [color=red]
	Node0x1103b20 -> Node0x1103bc0;
	Node0x1103bc0 -> Node0x1103c80;
	Node0x1103b20 -> Node0x1103c80;
	Node0x1103cf0 -> Node0x1103d60;
	Node0x1103d60 -> Node0x1103dd0;
	Node0x1103cf0 -> Node0x1103f20;
	Node0x1103f90 -> Node0x1104000;
	Node0x1104000 -> Node0x11040a0;
	Node0x1103e40 -> Node0x1104140;
	Node0x1103eb0 -> Node0x11041b0;
	Node0x1103d60 -> Node0x11041b0;
	Node0x11041b0 -> Node0x1104220;
	Node0x1103e40 -> Node0x1104290;
	Node0x1104290 -> Node0x1104300;
	Node0x1103dd0 -> Node0x1104300;
	Node0x1104300 -> Node0x1104370;
	Node0x1103f20 -> Node0x1104370;
	Node0x1104370 -> Node0x11043e0;
	Node0x11040a0 -> Node0x11043e0;
	Node0x11043e0 -> Node0x1104450;
	Node0x1104140 -> Node0x1104450;
	Node0x1104450 -> Node0x11044c0;
	Node0x1104220 -> Node0x11044c0;
	Node0x1103c80 -> Node0x1104530;
	Node0x11044c0 -> Node0x1104530;
	Node0x1104530 -> Node0x10a4268;
	Node0x10a4268 -> Node0x11049d0;
}
