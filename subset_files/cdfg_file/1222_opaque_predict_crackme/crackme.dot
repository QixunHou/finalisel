digraph "DFG for'crackme' function" {
	Node0x1a10970[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1a109e0[shape=record, label="  %6 = xor i32 %2, %1"];
	Node0x1a11060[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1a11100[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x1a11170[shape=record, label="  %9 = sub i32 %8, %5"];
	Node0x1a111e0[shape=record, label="  %10 = sub i32 %9, %7"];
	Node0x1a11250[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x1a112c0[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x1a11330[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x1a113a0[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x1a11410[shape=record, label="  %15 = and i32 %14, %2"];
	Node0x1a114b0[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x1a11520[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1a11590[shape=record, label="  %18 = or i32 %3, %0"];
	Node0x1a11600[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1a116a0[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x1a11740[shape=record, label="  %21 = xor i32 %0, 2147483647"];
	Node0x1a117b0[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x1a11850[shape=record, label="  %23 = mul i32 %1, -3"];
	Node0x1a118c0[shape=record, label="  %24 = add i32 %22, %0"];
	Node0x1a11930[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x1a119d0[shape=record, label="  %26 = add i32 %2, 2"];
	Node0x1a11a40[shape=record, label="  %27 = sub i32 %26, %12"];
	Node0x1a11ab0[shape=record, label="  %28 = add i32 %27, %6"];
	Node0x1a11b20[shape=record, label="  %29 = add i32 %28, %13"];
	Node0x1a11b90[shape=record, label="  %30 = sub i32 %29, %3"];
	Node0x1a11c00[shape=record, label="  %31 = add i32 %30, %17"];
	Node0x1a11c70[shape=record, label="  %32 = add i32 %31, %23"];
	Node0x1a11ef0[shape=record, label="  %33 = add i32 %32, %20"];
	Node0x1a11f60[shape=record, label="  %34 = add i32 %33, %25"];
	Node0x1a11fd0[shape=record, label="  %35 = icmp eq i32 %10, %34"];
	Node0x19b1268[shape=record, label="  %36 = select i1 %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a12470[shape=record, label="  %37 = tail call i32 @puts(i8* nonnull dereferenceable(1) %36)"];
	Node0x1a124c0[shape=record, label="  ret void"];
	Node0x1a10970 -> Node0x1a109e0;
	Node0x1a109e0 -> Node0x1a11060;
	Node0x1a11060 -> Node0x1a11100;
	Node0x1a11100 -> Node0x1a11170;
	Node0x1a11170 -> Node0x1a111e0;
	Node0x1a111e0 -> Node0x1a11250;
	Node0x1a11250 -> Node0x1a112c0;
	Node0x1a112c0 -> Node0x1a11330;
	Node0x1a11330 -> Node0x1a113a0;
	Node0x1a113a0 -> Node0x1a11410;
	Node0x1a11410 -> Node0x1a114b0;
	Node0x1a114b0 -> Node0x1a11520;
	Node0x1a11520 -> Node0x1a11590;
	Node0x1a11590 -> Node0x1a11600;
	Node0x1a11600 -> Node0x1a116a0;
	Node0x1a116a0 -> Node0x1a11740;
	Node0x1a11740 -> Node0x1a117b0;
	Node0x1a117b0 -> Node0x1a11850;
	Node0x1a11850 -> Node0x1a118c0;
	Node0x1a118c0 -> Node0x1a11930;
	Node0x1a11930 -> Node0x1a119d0;
	Node0x1a119d0 -> Node0x1a11a40;
	Node0x1a11a40 -> Node0x1a11ab0;
	Node0x1a11ab0 -> Node0x1a11b20;
	Node0x1a11b20 -> Node0x1a11b90;
	Node0x1a11b90 -> Node0x1a11c00;
	Node0x1a11c00 -> Node0x1a11c70;
	Node0x1a11c70 -> Node0x1a11ef0;
	Node0x1a11ef0 -> Node0x1a11f60;
	Node0x1a11f60 -> Node0x1a11fd0;
	Node0x1a11fd0 -> Node0x19b1268;
	Node0x19b1268 -> Node0x1a12470;
	Node0x1a12470 -> Node0x1a124c0;
edge [color=red]
	Node0x1a109e0 -> Node0x1a11060;
	Node0x1a11100 -> Node0x1a11170;
	Node0x1a10970 -> Node0x1a11170;
	Node0x1a11170 -> Node0x1a111e0;
	Node0x1a11060 -> Node0x1a111e0;
	Node0x1a11250 -> Node0x1a112c0;
	Node0x1a113a0 -> Node0x1a11410;
	Node0x1a11410 -> Node0x1a114b0;
	Node0x1a114b0 -> Node0x1a11520;
	Node0x1a11590 -> Node0x1a11600;
	Node0x1a11600 -> Node0x1a116a0;
	Node0x1a11740 -> Node0x1a117b0;
	Node0x1a117b0 -> Node0x1a118c0;
	Node0x1a118c0 -> Node0x1a11930;
	Node0x1a119d0 -> Node0x1a11a40;
	Node0x1a112c0 -> Node0x1a11a40;
	Node0x1a11a40 -> Node0x1a11ab0;
	Node0x1a109e0 -> Node0x1a11ab0;
	Node0x1a11ab0 -> Node0x1a11b20;
	Node0x1a11330 -> Node0x1a11b20;
	Node0x1a11b20 -> Node0x1a11b90;
	Node0x1a11b90 -> Node0x1a11c00;
	Node0x1a11520 -> Node0x1a11c00;
	Node0x1a11c00 -> Node0x1a11c70;
	Node0x1a11850 -> Node0x1a11c70;
	Node0x1a11c70 -> Node0x1a11ef0;
	Node0x1a116a0 -> Node0x1a11ef0;
	Node0x1a11ef0 -> Node0x1a11f60;
	Node0x1a11930 -> Node0x1a11f60;
	Node0x1a111e0 -> Node0x1a11fd0;
	Node0x1a11f60 -> Node0x1a11fd0;
	Node0x1a11fd0 -> Node0x19b1268;
	Node0x19b1268 -> Node0x1a12470;
}
