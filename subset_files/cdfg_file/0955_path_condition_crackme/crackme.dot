digraph "DFG for'crackme' function" {
	Node0x10e1d90[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x10e1e00[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x10e1e70[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x10e1ee0[shape=record, label="  %8 = and i32 %2, %1"];
	Node0x10e1f50[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x10e1ff0[shape=record, label="  %10 = mul i32 %9, -5"];
	Node0x10e2090[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0x10e2100[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0x10e2170[shape=record, label="  %13 = or i32 %12, %3"];
	Node0x10e21e0[shape=record, label="  %14 = sub i32 %7, %11"];
	Node0x10e2250[shape=record, label="  %15 = add i32 %14, %10"];
	Node0x10e22c0[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x10e2330[shape=record, label="  %17 = xor i32 %2, %1"];
	Node0x10e23d0[shape=record, label="  %18 = mul i32 %2, 5"];
	Node0x10e2440[shape=record, label="  %19 = or i32 %5, %1"];
	Node0x10e24b0[shape=record, label="  %20 = or i32 %2, %1"];
	Node0x10e2520[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x10e25c0[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x10e2630[shape=record, label="  %23 = xor i32 %19, -1"];
	Node0x10e26d0[shape=record, label="  %24 = mul i32 %23, -7"];
	Node0x10e2740[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x10e27b0[shape=record, label="  %26 = and i32 %12, %3"];
	Node0x10e2820[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x10e2890[shape=record, label="  %28 = xor i32 %27, -2"];
	Node0x10e2900[shape=record, label="  %29 = or i32 %3, %0"];
	Node0x10e2970[shape=record, label="  %30 = and i32 %3, %0"];
	Node0x10e29e0[shape=record, label="  %31 = shl i32 %29, 1"];
	Node0x10e2a50[shape=record, label="  %32 = xor i32 %31, -2"];
	Node0x10e2cd0[shape=record, label="  %33 = xor i32 %13, -1"];
	Node0x10e2d70[shape=record, label="  %34 = mul i32 %33, 3"];
	Node0x10e2e10[shape=record, label="  %35 = shl i32 %30, 2"];
	Node0x10e2e80[shape=record, label="  %36 = add i32 %17, %12"];
	Node0x10e2ef0[shape=record, label="  %37 = shl i32 %36, 1"];
	Node0x10e2f90[shape=record, label="  %38 = add i32 %2, 6"];
	Node0x10e3000[shape=record, label="  %39 = add i32 %38, %18"];
	Node0x10e3070[shape=record, label="  %40 = sub i32 %39, %19"];
	Node0x10e30e0[shape=record, label="  %41 = sub i32 %40, %6"];
	Node0x10e3150[shape=record, label="  %42 = add i32 %41, %8"];
	Node0x10e31c0[shape=record, label="  %43 = add i32 %42, %24"];
	Node0x10e3230[shape=record, label="  %44 = sub i32 %43, %25"];
	Node0x10e32a0[shape=record, label="  %45 = sub i32 %44, %29"];
	Node0x10e3310[shape=record, label="  %46 = sub i32 %45, %30"];
	Node0x10e3380[shape=record, label="  %47 = add i32 %46, %22"];
	Node0x10e33f0[shape=record, label="  %48 = add i32 %47, %34"];
	Node0x10e3460[shape=record, label="  %49 = add i32 %48, %27"];
	Node0x10e34d0[shape=record, label="  %50 = add i32 %49, %35"];
	Node0x10e3540[shape=record, label="  %51 = add i32 %50, %37"];
	Node0x10e35b0[shape=record, label="  %52 = sub i32 %51, %28"];
	Node0x10e3620[shape=record, label="  %53 = add i32 %52, %32"];
	Node0x10e3690[shape=record, label="  %54 = icmp eq i32 %16, %53"];
	Node0x1082268[shape=record, label="  %55 = select i1 %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10e3b30[shape=record, label="  %56 = tail call i32 @puts(i8* nonnull dereferenceable(1) %55)"];
	Node0x10e3b80[shape=record, label="  ret void"];
	Node0x10e1d90 -> Node0x10e1e00;
	Node0x10e1e00 -> Node0x10e1e70;
	Node0x10e1e70 -> Node0x10e1ee0;
	Node0x10e1ee0 -> Node0x10e1f50;
	Node0x10e1f50 -> Node0x10e1ff0;
	Node0x10e1ff0 -> Node0x10e2090;
	Node0x10e2090 -> Node0x10e2100;
	Node0x10e2100 -> Node0x10e2170;
	Node0x10e2170 -> Node0x10e21e0;
	Node0x10e21e0 -> Node0x10e2250;
	Node0x10e2250 -> Node0x10e22c0;
	Node0x10e22c0 -> Node0x10e2330;
	Node0x10e2330 -> Node0x10e23d0;
	Node0x10e23d0 -> Node0x10e2440;
	Node0x10e2440 -> Node0x10e24b0;
	Node0x10e24b0 -> Node0x10e2520;
	Node0x10e2520 -> Node0x10e25c0;
	Node0x10e25c0 -> Node0x10e2630;
	Node0x10e2630 -> Node0x10e26d0;
	Node0x10e26d0 -> Node0x10e2740;
	Node0x10e2740 -> Node0x10e27b0;
	Node0x10e27b0 -> Node0x10e2820;
	Node0x10e2820 -> Node0x10e2890;
	Node0x10e2890 -> Node0x10e2900;
	Node0x10e2900 -> Node0x10e2970;
	Node0x10e2970 -> Node0x10e29e0;
	Node0x10e29e0 -> Node0x10e2a50;
	Node0x10e2a50 -> Node0x10e2cd0;
	Node0x10e2cd0 -> Node0x10e2d70;
	Node0x10e2d70 -> Node0x10e2e10;
	Node0x10e2e10 -> Node0x10e2e80;
	Node0x10e2e80 -> Node0x10e2ef0;
	Node0x10e2ef0 -> Node0x10e2f90;
	Node0x10e2f90 -> Node0x10e3000;
	Node0x10e3000 -> Node0x10e3070;
	Node0x10e3070 -> Node0x10e30e0;
	Node0x10e30e0 -> Node0x10e3150;
	Node0x10e3150 -> Node0x10e31c0;
	Node0x10e31c0 -> Node0x10e3230;
	Node0x10e3230 -> Node0x10e32a0;
	Node0x10e32a0 -> Node0x10e3310;
	Node0x10e3310 -> Node0x10e3380;
	Node0x10e3380 -> Node0x10e33f0;
	Node0x10e33f0 -> Node0x10e3460;
	Node0x10e3460 -> Node0x10e34d0;
	Node0x10e34d0 -> Node0x10e3540;
	Node0x10e3540 -> Node0x10e35b0;
	Node0x10e35b0 -> Node0x10e3620;
	Node0x10e3620 -> Node0x10e3690;
	Node0x10e3690 -> Node0x1082268;
	Node0x1082268 -> Node0x10e3b30;
	Node0x10e3b30 -> Node0x10e3b80;
edge [color=red]
	Node0x10e1d90 -> Node0x10e1e00;
	Node0x10e1e00 -> Node0x10e1e70;
	Node0x10e1ee0 -> Node0x10e1f50;
	Node0x10e1f50 -> Node0x10e1ff0;
	Node0x10e2100 -> Node0x10e2170;
	Node0x10e1e70 -> Node0x10e21e0;
	Node0x10e2090 -> Node0x10e21e0;
	Node0x10e21e0 -> Node0x10e2250;
	Node0x10e1ff0 -> Node0x10e2250;
	Node0x10e2250 -> Node0x10e22c0;
	Node0x10e2170 -> Node0x10e22c0;
	Node0x10e1d90 -> Node0x10e2440;
	Node0x10e24b0 -> Node0x10e2520;
	Node0x10e2520 -> Node0x10e25c0;
	Node0x10e2440 -> Node0x10e2630;
	Node0x10e2630 -> Node0x10e26d0;
	Node0x10e2100 -> Node0x10e27b0;
	Node0x10e27b0 -> Node0x10e2820;
	Node0x10e2820 -> Node0x10e2890;
	Node0x10e2900 -> Node0x10e29e0;
	Node0x10e29e0 -> Node0x10e2a50;
	Node0x10e2170 -> Node0x10e2cd0;
	Node0x10e2cd0 -> Node0x10e2d70;
	Node0x10e2970 -> Node0x10e2e10;
	Node0x10e2330 -> Node0x10e2e80;
	Node0x10e2100 -> Node0x10e2e80;
	Node0x10e2e80 -> Node0x10e2ef0;
	Node0x10e2f90 -> Node0x10e3000;
	Node0x10e23d0 -> Node0x10e3000;
	Node0x10e3000 -> Node0x10e3070;
	Node0x10e2440 -> Node0x10e3070;
	Node0x10e3070 -> Node0x10e30e0;
	Node0x10e1e00 -> Node0x10e30e0;
	Node0x10e30e0 -> Node0x10e3150;
	Node0x10e1ee0 -> Node0x10e3150;
	Node0x10e3150 -> Node0x10e31c0;
	Node0x10e26d0 -> Node0x10e31c0;
	Node0x10e31c0 -> Node0x10e3230;
	Node0x10e2740 -> Node0x10e3230;
	Node0x10e3230 -> Node0x10e32a0;
	Node0x10e2900 -> Node0x10e32a0;
	Node0x10e32a0 -> Node0x10e3310;
	Node0x10e2970 -> Node0x10e3310;
	Node0x10e3310 -> Node0x10e3380;
	Node0x10e25c0 -> Node0x10e3380;
	Node0x10e3380 -> Node0x10e33f0;
	Node0x10e2d70 -> Node0x10e33f0;
	Node0x10e33f0 -> Node0x10e3460;
	Node0x10e2820 -> Node0x10e3460;
	Node0x10e3460 -> Node0x10e34d0;
	Node0x10e2e10 -> Node0x10e34d0;
	Node0x10e34d0 -> Node0x10e3540;
	Node0x10e2ef0 -> Node0x10e3540;
	Node0x10e3540 -> Node0x10e35b0;
	Node0x10e2890 -> Node0x10e35b0;
	Node0x10e35b0 -> Node0x10e3620;
	Node0x10e2a50 -> Node0x10e3620;
	Node0x10e22c0 -> Node0x10e3690;
	Node0x10e3620 -> Node0x10e3690;
	Node0x10e3690 -> Node0x1082268;
	Node0x1082268 -> Node0x10e3b30;
}
