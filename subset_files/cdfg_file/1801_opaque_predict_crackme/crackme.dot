digraph "DFG for'crackme' function" {
	Node0x21114b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x2111b60[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x2111c20[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2111c90[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x2111d00[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x2111d70[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x2111de0[shape=record, label="  %9 = or i32 %5, %0"];
	Node0x2111e50[shape=record, label="  %10 = xor i32 %7, -1"];
	Node0x2111ec0[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0x2111f30[shape=record, label="  %12 = mul i32 %6, 3"];
	Node0x2111fd0[shape=record, label="  %13 = shl i32 %8, 1"];
	Node0x2112040[shape=record, label="  %14 = add i32 %3, %11"];
	Node0x21120b0[shape=record, label="  %15 = sub i32 %14, %7"];
	Node0x2112150[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x21121c0[shape=record, label="  %17 = add i32 %6, 1"];
	Node0x2112230[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x21122a0[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x2112310[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x2112380[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x21123f0[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x2112460[shape=record, label="  %23 = icmp eq i32 %22, %4"];
	Node0x20b2268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2112900[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x2112950[shape=record, label="  ret void"];
	Node0x21114b0 -> Node0x2111b60;
	Node0x2111b60 -> Node0x2111c20;
	Node0x2111c20 -> Node0x2111c90;
	Node0x2111c90 -> Node0x2111d00;
	Node0x2111d00 -> Node0x2111d70;
	Node0x2111d70 -> Node0x2111de0;
	Node0x2111de0 -> Node0x2111e50;
	Node0x2111e50 -> Node0x2111ec0;
	Node0x2111ec0 -> Node0x2111f30;
	Node0x2111f30 -> Node0x2111fd0;
	Node0x2111fd0 -> Node0x2112040;
	Node0x2112040 -> Node0x21120b0;
	Node0x21120b0 -> Node0x2112150;
	Node0x2112150 -> Node0x21121c0;
	Node0x21121c0 -> Node0x2112230;
	Node0x2112230 -> Node0x21122a0;
	Node0x21122a0 -> Node0x2112310;
	Node0x2112310 -> Node0x2112380;
	Node0x2112380 -> Node0x21123f0;
	Node0x21123f0 -> Node0x2112460;
	Node0x2112460 -> Node0x20b2268;
	Node0x20b2268 -> Node0x2112900;
	Node0x2112900 -> Node0x2112950;
edge [color=red]
	Node0x21114b0 -> Node0x2111b60;
	Node0x2111c20 -> Node0x2111c90;
	Node0x2111c20 -> Node0x2111de0;
	Node0x2111d00 -> Node0x2111e50;
	Node0x2111de0 -> Node0x2111ec0;
	Node0x2111c90 -> Node0x2111f30;
	Node0x2111d70 -> Node0x2111fd0;
	Node0x21114b0 -> Node0x2112040;
	Node0x2111ec0 -> Node0x2112040;
	Node0x2112040 -> Node0x21120b0;
	Node0x2111d00 -> Node0x21120b0;
	Node0x21120b0 -> Node0x2112150;
	Node0x2111c90 -> Node0x21121c0;
	Node0x21121c0 -> Node0x2112230;
	Node0x2111de0 -> Node0x2112230;
	Node0x2112230 -> Node0x21122a0;
	Node0x2111e50 -> Node0x21122a0;
	Node0x21122a0 -> Node0x2112310;
	Node0x2111f30 -> Node0x2112310;
	Node0x2112310 -> Node0x2112380;
	Node0x2111fd0 -> Node0x2112380;
	Node0x2112380 -> Node0x21123f0;
	Node0x2112150 -> Node0x21123f0;
	Node0x21123f0 -> Node0x2112460;
	Node0x2111b60 -> Node0x2112460;
	Node0x2112460 -> Node0x20b2268;
	Node0x20b2268 -> Node0x2112900;
}
