digraph "DFG for'crackme' function" {
	Node0x19f1180[shape=record, label="  %5 = xor i32 %3, -1"];
	Node0x19f1220[shape=record, label="  %6 = add i32 %1, 1"];
	Node0x19f1290[shape=record, label="  %7 = sub i32 %6, %3"];
	Node0x19f1300[shape=record, label="  %8 = xor i32 %2, -1"];
	Node0x19f1370[shape=record, label="  %9 = or i32 %8, %1"];
	Node0x19f13e0[shape=record, label="  %10 = and i32 %8, %1"];
	Node0x19f1450[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x19f14c0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x19f1560[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x19f15d0[shape=record, label="  %14 = xor i32 %9, -1"];
	Node0x19f1640[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x19f16e0[shape=record, label="  %16 = shl i32 %15, 3"];
	Node0x19f1750[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x19f17c0[shape=record, label="  %18 = and i32 %17, %3"];
	Node0x19f1830[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x19f18a0[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x19f1910[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x19f1980[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x19f19f0[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x19f1a60[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x19f1ad0[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x19f1b40[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x19f1bb0[shape=record, label="  %27 = add i32 %18, %24"];
	Node0x19f1c50[shape=record, label="  %28 = mul i32 %27, -3"];
	Node0x19f1cc0[shape=record, label="  %29 = add i32 %10, %14"];
	Node0x19f1d60[shape=record, label="  %30 = mul i32 %29, 5"];
	Node0x19f1dd0[shape=record, label="  %31 = add i32 %0, %1"];
	Node0x19f1e40[shape=record, label="  %32 = add i32 %31, %2"];
	Node0x19f20c0[shape=record, label="  %33 = sub i32 %8, %32"];
	Node0x19f2130[shape=record, label="  %34 = sub i32 %33, %9"];
	Node0x19f21a0[shape=record, label="  %35 = add i32 %34, %10"];
	Node0x19f2210[shape=record, label="  %36 = add i32 %35, %5"];
	Node0x19f2280[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0x19f22f0[shape=record, label="  %38 = add i32 %37, %16"];
	Node0x19f2360[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x19f23d0[shape=record, label="  %40 = sub i32 %39, %21"];
	Node0x19f2440[shape=record, label="  %41 = add i32 %40, %13"];
	Node0x19f24b0[shape=record, label="  %42 = sub i32 %41, %26"];
	Node0x19f2520[shape=record, label="  %43 = add i32 %42, %30"];
	Node0x19f2590[shape=record, label="  %44 = sub i32 %43, %20"];
	Node0x19f2600[shape=record, label="  %45 = add i32 %44, %28"];
	Node0x19f2670[shape=record, label="  %46 = icmp eq i32 %7, %45"];
	Node0x1991268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x19f2b10[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x19f2b60[shape=record, label="  ret void"];
	Node0x19f1180 -> Node0x19f1220;
	Node0x19f1220 -> Node0x19f1290;
	Node0x19f1290 -> Node0x19f1300;
	Node0x19f1300 -> Node0x19f1370;
	Node0x19f1370 -> Node0x19f13e0;
	Node0x19f13e0 -> Node0x19f1450;
	Node0x19f1450 -> Node0x19f14c0;
	Node0x19f14c0 -> Node0x19f1560;
	Node0x19f1560 -> Node0x19f15d0;
	Node0x19f15d0 -> Node0x19f1640;
	Node0x19f1640 -> Node0x19f16e0;
	Node0x19f16e0 -> Node0x19f1750;
	Node0x19f1750 -> Node0x19f17c0;
	Node0x19f17c0 -> Node0x19f1830;
	Node0x19f1830 -> Node0x19f18a0;
	Node0x19f18a0 -> Node0x19f1910;
	Node0x19f1910 -> Node0x19f1980;
	Node0x19f1980 -> Node0x19f19f0;
	Node0x19f19f0 -> Node0x19f1a60;
	Node0x19f1a60 -> Node0x19f1ad0;
	Node0x19f1ad0 -> Node0x19f1b40;
	Node0x19f1b40 -> Node0x19f1bb0;
	Node0x19f1bb0 -> Node0x19f1c50;
	Node0x19f1c50 -> Node0x19f1cc0;
	Node0x19f1cc0 -> Node0x19f1d60;
	Node0x19f1d60 -> Node0x19f1dd0;
	Node0x19f1dd0 -> Node0x19f1e40;
	Node0x19f1e40 -> Node0x19f20c0;
	Node0x19f20c0 -> Node0x19f2130;
	Node0x19f2130 -> Node0x19f21a0;
	Node0x19f21a0 -> Node0x19f2210;
	Node0x19f2210 -> Node0x19f2280;
	Node0x19f2280 -> Node0x19f22f0;
	Node0x19f22f0 -> Node0x19f2360;
	Node0x19f2360 -> Node0x19f23d0;
	Node0x19f23d0 -> Node0x19f2440;
	Node0x19f2440 -> Node0x19f24b0;
	Node0x19f24b0 -> Node0x19f2520;
	Node0x19f2520 -> Node0x19f2590;
	Node0x19f2590 -> Node0x19f2600;
	Node0x19f2600 -> Node0x19f2670;
	Node0x19f2670 -> Node0x1991268;
	Node0x1991268 -> Node0x19f2b10;
	Node0x19f2b10 -> Node0x19f2b60;
edge [color=red]
	Node0x19f1220 -> Node0x19f1290;
	Node0x19f1300 -> Node0x19f1370;
	Node0x19f1300 -> Node0x19f13e0;
	Node0x19f1450 -> Node0x19f14c0;
	Node0x19f14c0 -> Node0x19f1560;
	Node0x19f1370 -> Node0x19f15d0;
	Node0x19f1640 -> Node0x19f16e0;
	Node0x19f1750 -> Node0x19f17c0;
	Node0x19f17c0 -> Node0x19f1830;
	Node0x19f1830 -> Node0x19f18a0;
	Node0x19f1910 -> Node0x19f1980;
	Node0x19f19f0 -> Node0x19f1a60;
	Node0x19f1ad0 -> Node0x19f1b40;
	Node0x19f17c0 -> Node0x19f1bb0;
	Node0x19f1a60 -> Node0x19f1bb0;
	Node0x19f1bb0 -> Node0x19f1c50;
	Node0x19f13e0 -> Node0x19f1cc0;
	Node0x19f15d0 -> Node0x19f1cc0;
	Node0x19f1cc0 -> Node0x19f1d60;
	Node0x19f1dd0 -> Node0x19f1e40;
	Node0x19f1300 -> Node0x19f20c0;
	Node0x19f1e40 -> Node0x19f20c0;
	Node0x19f20c0 -> Node0x19f2130;
	Node0x19f1370 -> Node0x19f2130;
	Node0x19f2130 -> Node0x19f21a0;
	Node0x19f13e0 -> Node0x19f21a0;
	Node0x19f21a0 -> Node0x19f2210;
	Node0x19f1180 -> Node0x19f2210;
	Node0x19f2210 -> Node0x19f2280;
	Node0x19f14c0 -> Node0x19f2280;
	Node0x19f2280 -> Node0x19f22f0;
	Node0x19f16e0 -> Node0x19f22f0;
	Node0x19f22f0 -> Node0x19f2360;
	Node0x19f1980 -> Node0x19f2360;
	Node0x19f2360 -> Node0x19f23d0;
	Node0x19f1910 -> Node0x19f23d0;
	Node0x19f23d0 -> Node0x19f2440;
	Node0x19f1560 -> Node0x19f2440;
	Node0x19f2440 -> Node0x19f24b0;
	Node0x19f1b40 -> Node0x19f24b0;
	Node0x19f24b0 -> Node0x19f2520;
	Node0x19f1d60 -> Node0x19f2520;
	Node0x19f2520 -> Node0x19f2590;
	Node0x19f18a0 -> Node0x19f2590;
	Node0x19f2590 -> Node0x19f2600;
	Node0x19f1c50 -> Node0x19f2600;
	Node0x19f1290 -> Node0x19f2670;
	Node0x19f2600 -> Node0x19f2670;
	Node0x19f2670 -> Node0x1991268;
	Node0x1991268 -> Node0x19f2b10;
}
