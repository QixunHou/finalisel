digraph "DFG for'crackme' function" {
	Node0x1651b50[shape=record, label="  %3 = shl i32 %1, 1"];
	Node0x1651bf0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1651cb0[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x1651d20[shape=record, label="  %6 = mul i32 %5, 3"];
	Node0x1651d90[shape=record, label="  %7 = add i32 %6, %3"];
	Node0x1651e00[shape=record, label="  %8 = and i32 %4, %0"];
	Node0x1651ea0[shape=record, label="  %9 = shl i32 %0, 2"];
	Node0x1651f10[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1651f80[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1652020[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x1652090[shape=record, label="  %13 = shl i32 %5, 2"];
	Node0x1652130[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x16521d0[shape=record, label="  %15 = mul i32 %8, -5"];
	Node0x1652240[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x16522b0[shape=record, label="  %17 = shl i32 %16, 2"];
	Node0x1652350[shape=record, label="  %18 = sub i32 -6, %0"];
	Node0x16523c0[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x1652430[shape=record, label="  %20 = sub i32 %19, %8"];
	Node0x16524a0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x1652510[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x1652580[shape=record, label="  %23 = sub i32 %22, %17"];
	Node0x16525f0[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0x1652660[shape=record, label="  %25 = icmp eq i32 %7, %24"];
	Node0x15f2268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1652b00[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1652b50[shape=record, label="  ret void"];
	Node0x1651b50 -> Node0x1651bf0;
	Node0x1651bf0 -> Node0x1651cb0;
	Node0x1651cb0 -> Node0x1651d20;
	Node0x1651d20 -> Node0x1651d90;
	Node0x1651d90 -> Node0x1651e00;
	Node0x1651e00 -> Node0x1651ea0;
	Node0x1651ea0 -> Node0x1651f10;
	Node0x1651f10 -> Node0x1651f80;
	Node0x1651f80 -> Node0x1652020;
	Node0x1652020 -> Node0x1652090;
	Node0x1652090 -> Node0x1652130;
	Node0x1652130 -> Node0x16521d0;
	Node0x16521d0 -> Node0x1652240;
	Node0x1652240 -> Node0x16522b0;
	Node0x16522b0 -> Node0x1652350;
	Node0x1652350 -> Node0x16523c0;
	Node0x16523c0 -> Node0x1652430;
	Node0x1652430 -> Node0x16524a0;
	Node0x16524a0 -> Node0x1652510;
	Node0x1652510 -> Node0x1652580;
	Node0x1652580 -> Node0x16525f0;
	Node0x16525f0 -> Node0x1652660;
	Node0x1652660 -> Node0x15f2268;
	Node0x15f2268 -> Node0x1652b00;
	Node0x1652b00 -> Node0x1652b50;
edge [color=red]
	Node0x1651bf0 -> Node0x1651cb0;
	Node0x1651cb0 -> Node0x1651d20;
	Node0x1651d20 -> Node0x1651d90;
	Node0x1651b50 -> Node0x1651d90;
	Node0x1651bf0 -> Node0x1651e00;
	Node0x1651f10 -> Node0x1651f80;
	Node0x1651f80 -> Node0x1652020;
	Node0x1651cb0 -> Node0x1652090;
	Node0x1652090 -> Node0x1652130;
	Node0x1651e00 -> Node0x16521d0;
	Node0x1652240 -> Node0x16522b0;
	Node0x1652350 -> Node0x16523c0;
	Node0x1651ea0 -> Node0x16523c0;
	Node0x16523c0 -> Node0x1652430;
	Node0x1651e00 -> Node0x1652430;
	Node0x1652430 -> Node0x16524a0;
	Node0x1652020 -> Node0x16524a0;
	Node0x16524a0 -> Node0x1652510;
	Node0x16521d0 -> Node0x1652510;
	Node0x1652510 -> Node0x1652580;
	Node0x16522b0 -> Node0x1652580;
	Node0x1652580 -> Node0x16525f0;
	Node0x1652130 -> Node0x16525f0;
	Node0x1651d90 -> Node0x1652660;
	Node0x16525f0 -> Node0x1652660;
	Node0x1652660 -> Node0x15f2268;
	Node0x15f2268 -> Node0x1652b00;
}
