; ModuleID = '../.././c_source_file/1446_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1446_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %2, %1
  %6 = xor i32 %5, -1
  %7 = and i32 %4, %6
  %8 = xor i32 %1, -1
  %9 = xor i32 %2, -1
  %10 = or i32 %9, %0
  %11 = and i32 %10, %8
  %12 = add i32 %7, %11
  %13 = sub i32 0, %12
  %14 = xor i32 %2, %0
  %15 = xor i32 %14, -1
  %16 = or i32 %2, %0
  %17 = and i32 %16, %1
  %18 = and i32 %14, %4
  %19 = and i32 %10, %1
  %20 = shl i32 %19, 1
  %21 = and i32 %4, %2
  %22 = xor i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = and i32 %15, %23
  %25 = xor i32 %4, -1
  %26 = or i32 %14, %25
  %27 = and i32 %1, %0
  %28 = or i32 %9, %1
  %29 = xor i32 %28, %27
  %30 = xor i32 %27, -1
  %31 = and i32 %9, %30
  %32 = xor i32 %0, -1
  %33 = and i32 %2, %1
  %34 = and i32 %33, %32
  %35 = or i32 %2, %1
  %36 = and i32 %35, %0
  %37 = or i32 %34, %36
  %38 = and i32 %2, %0
  %39 = or i32 %38, %22
  %40 = or i32 %22, %2
  %41 = and i32 %9, %0
  %42 = or i32 %41, %22
  %43 = xor i32 %16, -1
  %44 = xor i32 %36, 2147483647
  %45 = xor i32 %44, %34
  %46 = or i32 %8, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %2
  %49 = or i32 %5, %0
  %50 = shl i32 %49, 1
  %51 = and i32 %8, %0
  %52 = xor i32 %51, -1
  %53 = and i32 %52, %2
  %54 = shl i32 %53, 1
  %55 = xor i32 %30, %2
  %56 = shl i32 %55, 1
  %57 = xor i32 %5, %0
  %58 = or i32 %15, %47
  %59 = and i32 %35, %32
  %60 = or i32 %28, %32
  %61 = or i32 %14, %47
  %62 = or i32 %22, %43
  %63 = and i32 %9, %23
  %64 = xor i32 %35, -1
  %65 = or i32 %64, %0
  %66 = shl i32 %65, 1
  %67 = and i32 %14, %23
  %68 = xor i32 %6, %0
  %69 = or i32 %27, %43
  %70 = xor i32 %41, -1
  %71 = and i32 %70, %8
  %72 = or i32 %5, %25
  %73 = or i32 %43, %8
  %74 = or i32 %33, %32
  %75 = and i32 %28, %0
  %76 = and i32 %33, %0
  %77 = xor i32 %35, %0
  %78 = or i32 %76, %77
  %79 = and i32 %8, %2
  %80 = and i32 %79, %0
  %81 = xor i32 %49, -1
  %82 = or i32 %80, %81
  %83 = xor i32 %38, %1
  %84 = and i32 %14, %30
  %85 = and i32 %6, %52
  %86 = or i32 %5, %32
  %87 = or i32 %15, %25
  %88 = or i32 %33, %0
  %89 = and i32 %14, %46
  %90 = and i32 %16, %22
  %91 = or i32 %38, %1
  %92 = or i32 %27, %2
  %93 = and i32 %79, %32
  %94 = or i32 %8, %2
  %95 = and i32 %94, %0
  %96 = xor i32 %95, -1
  %97 = xor i32 %93, %96
  %98 = xor i32 %33, -1
  %99 = or i32 %98, %32
  %100 = xor i32 %10, %27
  %101 = xor i32 %27, %2
  %102 = xor i32 %28, %0
  %103 = xor i32 %76, %57
  %104 = or i32 %5, %51
  %105 = xor i32 %86, -1
  %106 = or i32 %93, %105
  %107 = or i32 %64, %32
  %108 = shl i32 %107, 1
  %109 = xor i32 %10, -1
  %110 = xor i32 %109, %1
  %111 = and i32 %5, %4
  %112 = xor i32 %4, %2
  %113 = or i32 %14, %27
  %114 = or i32 %47, %2
  %115 = xor i32 %94, %0
  %116 = xor i32 %80, -1
  %117 = xor i32 %115, %116
  %118 = xor i32 %38, -1
  %119 = and i32 %118, %1
  %120 = and i32 %9, %1
  %121 = xor i32 %120, -1
  %122 = or i32 %121, %0
  %123 = shl i32 %122, 1
  %124 = xor i32 %93, %86
  %125 = xor i32 %46, %2
  %126 = or i32 %120, %51
  %127 = shl i32 %126, 1
  %128 = and i32 %5, %0
  %129 = or i32 %34, %128
  %130 = and i32 %70, %23
  %131 = xor i32 %51, %121
  %132 = xor i32 %120, %0
  %133 = or i32 %35, %32
  %134 = or i32 %109, %23
  %135 = and i32 %5, %30
  %136 = and i32 %10, %22
  %137 = or i32 %51, %15
  %138 = xor i32 %41, %98
  %139 = or i32 %38, %8
  %140 = or i32 %120, %0
  %141 = xor i32 %57, -1
  %142 = or i32 %76, %141
  %143 = or i32 %6, %0
  %144 = and i32 %98, %0
  %145 = shl i32 %120, 1
  %146 = xor i32 %28, -1
  %147 = or i32 %41, %146
  %148 = and i32 %14, %22
  %149 = shl i32 %148, 1
  %150 = xor i32 %38, %46
  %151 = or i32 %9, %47
  %152 = and i32 %6, %30
  %153 = add i32 %5, 1
  %154 = or i32 %6, %47
  %155 = xor i32 %76, -1
  %156 = xor i32 %77, %155
  %157 = or i32 %27, %109
  %158 = and i32 %28, %32
  %159 = and i32 %15, %52
  %160 = xor i32 %38, %35
  %161 = shl i32 %160, 2
  %162 = and i32 %15, %8
  %163 = or i32 %109, %1
  %164 = or i32 %146, %0
  %165 = or i32 %38, %120
  %166 = and i32 %4, %9
  %167 = xor i32 %80, %49
  %168 = or i32 %15, %23
  %169 = or i32 %146, %32
  %170 = xor i32 %10, %1
  %171 = and i32 %46, %6
  %172 = shl i32 %46, 1
  %173 = or i32 %41, %1
  %174 = xor i32 %121, %0
  %175 = shl i32 %146, 1
  %176 = and i32 %22, %9
  %177 = shl i32 %47, 1
  %178 = and i32 %4, %15
  %179 = or i32 %33, %51
  %180 = or i32 %27, %9
  %181 = or i32 %51, %6
  %182 = or i32 %14, %1
  %183 = xor i32 %51, %98
  %184 = and i32 %22, %2
  %185 = add i32 %4, 1
  %186 = and i32 %9, %52
  %187 = shl i32 %186, 1
  %188 = and i32 %14, %1
  %189 = xor i32 %41, %28
  %190 = or i32 %109, %8
  %191 = shl i32 %190, 1
  %192 = or i32 %14, %23
  %193 = or i32 %43, %1
  %194 = or i32 %9, %23
  %195 = shl i32 %194, 1
  %196 = xor i32 %35, %27
  %197 = or i32 %41, %33
  %198 = and i32 %14, %52
  %199 = or i32 %5, %47
  %200 = shl i32 %199, 1
  %201 = and i32 %6, %32
  %202 = or i32 %35, %0
  %203 = xor i32 %43, %1
  %204 = shl i32 %203, 1
  %205 = and i32 %16, %8
  %206 = and i32 %30, %2
  %207 = or i32 %27, %146
  %208 = or i32 %41, %8
  %209 = or i32 %80, %115
  %210 = xor i32 %38, %121
  %211 = or i32 %41, %23
  %212 = shl i32 %211, 1
  %213 = and i32 %118, %23
  %214 = or i32 %38, %64
  %215 = or i32 %27, %6
  %216 = and i32 %15, %1
  %217 = and i32 %70, %1
  %218 = shl i32 %28, 1
  %219 = or i32 %9, %25
  %220 = shl i32 %219, 1
  %221 = and i32 %94, %32
  %222 = or i32 %80, %221
  %223 = and i32 %5, %32
  %224 = xor i32 %223, %155
  %225 = xor i32 %80, %141
  %226 = xor i32 %41, %1
  %227 = or i32 %51, %2
  %228 = or i32 %38, %23
  %229 = xor i32 %16, %1
  %230 = xor i32 %118, %1
  %231 = or i32 %15, %8
  %232 = shl i32 %231, 1
  %233 = or i32 %27, %64
  %234 = shl i32 %233, 1
  %235 = and i32 %22, %118
  %236 = and i32 %23, %2
  %237 = xor i32 %128, -1
  %238 = xor i32 %34, %237
  %239 = or i32 %14, %8
  %240 = and i32 %46, %9
  %241 = or i32 %121, %32
  %242 = or i32 %43, %23
  %243 = and i32 %22, %15
  %244 = or i32 %51, %9
  %245 = shl i32 %244, 1
  %246 = xor i32 %221, %116
  %247 = and i32 %10, %23
  %248 = or i32 %28, %0
  %249 = or i32 %76, %223
  %250 = or i32 %25, %2
  %251 = and i32 %46, %15
  %252 = and i32 %5, %46
  %253 = or i32 %76, %59
  %254 = or i32 %14, %51
  %255 = and i32 %16, %23
  %256 = xor i32 %52, %2
  %257 = shl i32 %256, 1
  %258 = and i32 %6, %0
  %259 = and i32 %64, %32
  %260 = and i32 %120, %32
  %261 = and i32 %64, %0
  %262 = mul i32 %261, 13
  %263 = and i32 %120, %0
  %264 = mul i32 %34, -17
  %265 = and i32 %146, %0
  %266 = mul i32 %265, -12
  %267 = mul i32 %76, 6
  %268 = add i32 %10, %14
  %269 = sub i32 %183, %268
  %270 = add i32 %269, %239
  %271 = sub i32 %270, %168
  %272 = mul i32 %271, 3
  %273 = add i32 %92, %185
  %274 = add i32 %273, %15
  %275 = add i32 %274, %259
  %276 = mul i32 %275, 5
  %277 = add i32 %133, %223
  %278 = add i32 %277, %225
  %279 = shl i32 %278, 2
  %280 = sub i32 %263, %260
  %281 = mul i32 %280, 10
  %282 = add i32 %227, -1
  %283 = add i32 %282, %35
  %284 = add i32 %283, %43
  %285 = add i32 %284, %31
  %286 = add i32 %285, %251
  %287 = add i32 %286, %208
  %288 = add i32 %287, %197
  %289 = add i32 %288, %188
  %290 = add i32 %289, %152
  %291 = add i32 %290, %111
  %292 = add i32 %291, %88
  %293 = add i32 %292, %87
  %294 = add i32 %293, %73
  %295 = add i32 %294, %67
  %296 = add i32 %295, %61
  %297 = add i32 %296, %60
  %298 = add i32 %297, %253
  %299 = add i32 %298, %249
  %300 = add i32 %299, %103
  %301 = add i32 %300, %45
  %302 = shl i32 %301, 1
  %303 = add i32 %2, %1
  %304 = sub i32 %9, %303
  %305 = add i32 %304, %21
  %306 = sub i32 %305, %40
  %307 = add i32 %306, %16
  %308 = add i32 %307, %48
  %309 = sub i32 %308, %63
  %310 = add i32 %309, %101
  %311 = sub i32 %310, %112
  %312 = add i32 %311, %114
  %313 = sub i32 %312, %125
  %314 = add i32 %313, %64
  %315 = add i32 %314, %41
  %316 = add i32 %315, %98
  %317 = add i32 %316, %151
  %318 = add i32 %317, %153
  %319 = sub i32 %318, %166
  %320 = sub i32 %319, %172
  %321 = add i32 %320, %176
  %322 = sub i32 %321, %177
  %323 = sub i32 %322, %38
  %324 = sub i32 %323, %180
  %325 = add i32 %324, %184
  %326 = sub i32 %325, %5
  %327 = sub i32 %326, %33
  %328 = sub i32 %327, %206
  %329 = add i32 %328, %121
  %330 = sub i32 %329, %236
  %331 = add i32 %330, %240
  %332 = sub i32 %331, %250
  %333 = add i32 %332, %17
  %334 = sub i32 %333, %18
  %335 = sub i32 %334, %24
  %336 = add i32 %335, %26
  %337 = add i32 %336, %29
  %338 = add i32 %337, %39
  %339 = sub i32 %338, %42
  %340 = sub i32 %339, %54
  %341 = sub i32 %340, %56
  %342 = add i32 %341, %57
  %343 = sub i32 %342, %58
  %344 = sub i32 %343, %59
  %345 = sub i32 %344, %62
  %346 = sub i32 %345, %68
  %347 = sub i32 %346, %69
  %348 = add i32 %347, %71
  %349 = sub i32 %348, %72
  %350 = add i32 %349, %74
  %351 = sub i32 %350, %75
  %352 = add i32 %351, %83
  %353 = sub i32 %352, %84
  %354 = add i32 %353, %85
  %355 = add i32 %354, %86
  %356 = sub i32 %355, %89
  %357 = add i32 %356, %90
  %358 = add i32 %357, %91
  %359 = add i32 %358, %99
  %360 = sub i32 %359, %100
  %361 = add i32 %360, %102
  %362 = sub i32 %361, %104
  %363 = sub i32 %362, %110
  %364 = sub i32 %363, %113
  %365 = add i32 %364, %36
  %366 = add i32 %365, %119
  %367 = sub i32 %366, %130
  %368 = sub i32 %367, %131
  %369 = sub i32 %368, %132
  %370 = sub i32 %369, %134
  %371 = add i32 %370, %135
  %372 = add i32 %371, %136
  %373 = add i32 %372, %137
  %374 = sub i32 %373, %138
  %375 = add i32 %374, %139
  %376 = add i32 %375, %140
  %377 = add i32 %376, %143
  %378 = add i32 %377, %144
  %379 = sub i32 %378, %145
  %380 = sub i32 %379, %147
  %381 = sub i32 %380, %150
  %382 = sub i32 %381, %154
  %383 = sub i32 %382, %157
  %384 = add i32 %383, %158
  %385 = add i32 %384, %159
  %386 = add i32 %385, %162
  %387 = sub i32 %386, %163
  %388 = sub i32 %387, %164
  %389 = add i32 %388, %165
  %390 = add i32 %389, %169
  %391 = sub i32 %390, %170
  %392 = sub i32 %391, %171
  %393 = add i32 %392, %173
  %394 = add i32 %393, %174
  %395 = sub i32 %394, %175
  %396 = sub i32 %395, %178
  %397 = add i32 %396, %179
  %398 = sub i32 %397, %128
  %399 = sub i32 %398, %181
  %400 = add i32 %399, %182
  %401 = sub i32 %400, %187
  %402 = sub i32 %401, %189
  %403 = sub i32 %402, %192
  %404 = sub i32 %403, %193
  %405 = sub i32 %404, %195
  %406 = add i32 %405, %196
  %407 = add i32 %406, %198
  %408 = add i32 %407, %201
  %409 = sub i32 %408, %202
  %410 = sub i32 %409, %205
  %411 = sub i32 %410, %207
  %412 = sub i32 %411, %210
  %413 = add i32 %412, %213
  %414 = sub i32 %413, %214
  %415 = sub i32 %414, %215
  %416 = add i32 %415, %216
  %417 = sub i32 %416, %217
  %418 = sub i32 %417, %218
  %419 = sub i32 %418, %220
  %420 = sub i32 %419, %226
  %421 = sub i32 %420, %228
  %422 = add i32 %421, %229
  %423 = add i32 %422, %230
  %424 = add i32 %423, %235
  %425 = sub i32 %424, %241
  %426 = add i32 %425, %242
  %427 = sub i32 %426, %243
  %428 = sub i32 %427, %245
  %429 = sub i32 %428, %247
  %430 = add i32 %429, %248
  %431 = sub i32 %430, %252
  %432 = sub i32 %431, %254
  %433 = add i32 %432, %255
  %434 = sub i32 %433, %257
  %435 = sub i32 %434, %258
  %436 = sub i32 %435, %20
  %437 = add i32 %436, %37
  %438 = sub i32 %437, %50
  %439 = sub i32 %438, %66
  %440 = add i32 %439, %78
  %441 = sub i32 %440, %82
  %442 = add i32 %441, %97
  %443 = add i32 %442, %106
  %444 = sub i32 %443, %108
  %445 = add i32 %444, %117
  %446 = sub i32 %445, %123
  %447 = add i32 %446, %124
  %448 = sub i32 %447, %127
  %449 = add i32 %448, %129
  %450 = add i32 %449, %142
  %451 = sub i32 %450, %149
  %452 = sub i32 %451, %156
  %453 = sub i32 %452, %161
  %454 = sub i32 %453, %167
  %455 = sub i32 %454, %191
  %456 = sub i32 %455, %200
  %457 = sub i32 %456, %204
  %458 = add i32 %457, %209
  %459 = sub i32 %458, %212
  %460 = add i32 %459, %222
  %461 = sub i32 %460, %224
  %462 = sub i32 %461, %232
  %463 = sub i32 %462, %234
  %464 = sub i32 %463, %238
  %465 = add i32 %464, %246
  %466 = add i32 %465, %262
  %467 = add i32 %466, %264
  %468 = add i32 %467, %266
  %469 = add i32 %468, %267
  %470 = add i32 %469, %281
  %471 = add i32 %470, %276
  %472 = add i32 %471, %279
  %473 = add i32 %472, %272
  %474 = add i32 %473, %302
  %475 = icmp eq i32 %474, %13
  %476 = select i1 %475, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %477 = tail call i32 @puts(i8* nonnull dereferenceable(1) %476)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
