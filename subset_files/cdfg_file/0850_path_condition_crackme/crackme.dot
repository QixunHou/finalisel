digraph "DFG for'crackme' function" {
	Node0x1ce3b90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1ce3c00[shape=record, label="  %4 = add i32 %0, %1"];
	Node0x1ce3cc0[shape=record, label="  %5 = add i32 %4, 2"];
	Node0x1ce3d60[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0x1ce3dd0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1ce3e40[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1ce3eb0[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x1ce3f20[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1ce3f90[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1ce4000[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0x1ce40a0[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x1ce4140[shape=record, label="  %14 = xor i32 %0, 1073741823"];
	Node0x1ce41b0[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x1ce4220[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x1ce4290[shape=record, label="  %17 = shl i32 %9, 2"];
	Node0x1ce4300[shape=record, label="  %18 = shl i32 %7, 2"];
	Node0x1ce4370[shape=record, label="  %19 = add i32 %6, %1"];
	Node0x1ce43e0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x1ce4450[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x1ce44c0[shape=record, label="  %22 = sub i32 %21, %16"];
	Node0x1ce4530[shape=record, label="  %23 = sub i32 %22, %17"];
	Node0x1ce45a0[shape=record, label="  %24 = sub i32 %23, %18"];
	Node0x1ce4610[shape=record, label="  %25 = sub i32 %24, %13"];
	Node0x1ce4680[shape=record, label="  %26 = icmp eq i32 %5, %25"];
	Node0x1c84268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ce4b20[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1ce4b70[shape=record, label="  ret void"];
	Node0x1ce3b90 -> Node0x1ce3c00;
	Node0x1ce3c00 -> Node0x1ce3cc0;
	Node0x1ce3cc0 -> Node0x1ce3d60;
	Node0x1ce3d60 -> Node0x1ce3dd0;
	Node0x1ce3dd0 -> Node0x1ce3e40;
	Node0x1ce3e40 -> Node0x1ce3eb0;
	Node0x1ce3eb0 -> Node0x1ce3f20;
	Node0x1ce3f20 -> Node0x1ce3f90;
	Node0x1ce3f90 -> Node0x1ce4000;
	Node0x1ce4000 -> Node0x1ce40a0;
	Node0x1ce40a0 -> Node0x1ce4140;
	Node0x1ce4140 -> Node0x1ce41b0;
	Node0x1ce41b0 -> Node0x1ce4220;
	Node0x1ce4220 -> Node0x1ce4290;
	Node0x1ce4290 -> Node0x1ce4300;
	Node0x1ce4300 -> Node0x1ce4370;
	Node0x1ce4370 -> Node0x1ce43e0;
	Node0x1ce43e0 -> Node0x1ce4450;
	Node0x1ce4450 -> Node0x1ce44c0;
	Node0x1ce44c0 -> Node0x1ce4530;
	Node0x1ce4530 -> Node0x1ce45a0;
	Node0x1ce45a0 -> Node0x1ce4610;
	Node0x1ce4610 -> Node0x1ce4680;
	Node0x1ce4680 -> Node0x1c84268;
	Node0x1c84268 -> Node0x1ce4b20;
	Node0x1ce4b20 -> Node0x1ce4b70;
edge [color=red]
	Node0x1ce3c00 -> Node0x1ce3cc0;
	Node0x1ce3dd0 -> Node0x1ce3e40;
	Node0x1ce3b90 -> Node0x1ce3eb0;
	Node0x1ce3eb0 -> Node0x1ce3f20;
	Node0x1ce3f90 -> Node0x1ce4000;
	Node0x1ce4000 -> Node0x1ce40a0;
	Node0x1ce4140 -> Node0x1ce41b0;
	Node0x1ce41b0 -> Node0x1ce4220;
	Node0x1ce3eb0 -> Node0x1ce4290;
	Node0x1ce3dd0 -> Node0x1ce4300;
	Node0x1ce3d60 -> Node0x1ce4370;
	Node0x1ce4370 -> Node0x1ce43e0;
	Node0x1ce3e40 -> Node0x1ce43e0;
	Node0x1ce43e0 -> Node0x1ce4450;
	Node0x1ce3f20 -> Node0x1ce4450;
	Node0x1ce4450 -> Node0x1ce44c0;
	Node0x1ce4220 -> Node0x1ce44c0;
	Node0x1ce44c0 -> Node0x1ce4530;
	Node0x1ce4290 -> Node0x1ce4530;
	Node0x1ce4530 -> Node0x1ce45a0;
	Node0x1ce4300 -> Node0x1ce45a0;
	Node0x1ce45a0 -> Node0x1ce4610;
	Node0x1ce40a0 -> Node0x1ce4610;
	Node0x1ce3cc0 -> Node0x1ce4680;
	Node0x1ce4610 -> Node0x1ce4680;
	Node0x1ce4680 -> Node0x1c84268;
	Node0x1c84268 -> Node0x1ce4b20;
}
