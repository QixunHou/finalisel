digraph "DFG for'crackme' function" {
	Node0x1813bb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1813c20[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1813ce0[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x1813d80[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x1813df0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1813e60[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1813ed0[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x1813f40[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1813fe0[shape=record, label="  %11 = shl i32 %7, 2"];
	Node0x1814080[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x18140f0[shape=record, label="  %13 = xor i32 %4, -1"];
	Node0x1814190[shape=record, label="  %14 = mul i32 %9, 7"];
	Node0x1814200[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x1814270[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x1814310[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x1814380[shape=record, label="  %18 = sub i32 1, %5"];
	Node0x18143f0[shape=record, label="  %19 = sub i32 %18, %4"];
	Node0x1814460[shape=record, label="  %20 = sub i32 %19, %6"];
	Node0x18144d0[shape=record, label="  %21 = sub i32 %20, %7"];
	Node0x1814540[shape=record, label="  %22 = sub i32 %21, %8"];
	Node0x18145b0[shape=record, label="  %23 = add i32 %22, %10"];
	Node0x1814620[shape=record, label="  %24 = add i32 %23, %14"];
	Node0x1814690[shape=record, label="  %25 = add i32 %24, %12"];
	Node0x1814700[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x1814770[shape=record, label="  %27 = icmp eq i32 %26, -1"];
	Node0x17b4268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1814c10[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1814c60[shape=record, label="  ret void"];
	Node0x1813bb0 -> Node0x1813c20;
	Node0x1813c20 -> Node0x1813ce0;
	Node0x1813ce0 -> Node0x1813d80;
	Node0x1813d80 -> Node0x1813df0;
	Node0x1813df0 -> Node0x1813e60;
	Node0x1813e60 -> Node0x1813ed0;
	Node0x1813ed0 -> Node0x1813f40;
	Node0x1813f40 -> Node0x1813fe0;
	Node0x1813fe0 -> Node0x1814080;
	Node0x1814080 -> Node0x18140f0;
	Node0x18140f0 -> Node0x1814190;
	Node0x1814190 -> Node0x1814200;
	Node0x1814200 -> Node0x1814270;
	Node0x1814270 -> Node0x1814310;
	Node0x1814310 -> Node0x1814380;
	Node0x1814380 -> Node0x18143f0;
	Node0x18143f0 -> Node0x1814460;
	Node0x1814460 -> Node0x18144d0;
	Node0x18144d0 -> Node0x1814540;
	Node0x1814540 -> Node0x18145b0;
	Node0x18145b0 -> Node0x1814620;
	Node0x1814620 -> Node0x1814690;
	Node0x1814690 -> Node0x1814700;
	Node0x1814700 -> Node0x1814770;
	Node0x1814770 -> Node0x17b4268;
	Node0x17b4268 -> Node0x1814c10;
	Node0x1814c10 -> Node0x1814c60;
edge [color=red]
	Node0x1813bb0 -> Node0x1813c20;
	Node0x1813ce0 -> Node0x1813d80;
	Node0x1813bb0 -> Node0x1813ed0;
	Node0x1813ed0 -> Node0x1813f40;
	Node0x1813df0 -> Node0x1813fe0;
	Node0x1813fe0 -> Node0x1814080;
	Node0x1813c20 -> Node0x18140f0;
	Node0x1813ed0 -> Node0x1814190;
	Node0x1814200 -> Node0x1814270;
	Node0x18140f0 -> Node0x1814270;
	Node0x1814270 -> Node0x1814310;
	Node0x1813ce0 -> Node0x1814380;
	Node0x1814380 -> Node0x18143f0;
	Node0x1813c20 -> Node0x18143f0;
	Node0x18143f0 -> Node0x1814460;
	Node0x1813d80 -> Node0x1814460;
	Node0x1814460 -> Node0x18144d0;
	Node0x1813df0 -> Node0x18144d0;
	Node0x18144d0 -> Node0x1814540;
	Node0x1813e60 -> Node0x1814540;
	Node0x1814540 -> Node0x18145b0;
	Node0x1813f40 -> Node0x18145b0;
	Node0x18145b0 -> Node0x1814620;
	Node0x1814190 -> Node0x1814620;
	Node0x1814620 -> Node0x1814690;
	Node0x1814080 -> Node0x1814690;
	Node0x1814690 -> Node0x1814700;
	Node0x1814310 -> Node0x1814700;
	Node0x1814700 -> Node0x1814770;
	Node0x1814770 -> Node0x17b4268;
	Node0x17b4268 -> Node0x1814c10;
}
