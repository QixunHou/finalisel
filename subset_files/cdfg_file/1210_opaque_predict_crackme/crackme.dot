digraph "DFG for'crackme' function" {
	Node0x21dbd60[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x21dbdd0[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x21dbe40[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x21dbeb0[shape=record, label="  %8 = or i32 %7, %3"];
	Node0x21dbf20[shape=record, label="  %9 = add i32 %8, %6"];
	Node0x21dbfc0[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x21dc030[shape=record, label="  %11 = add i32 %10, -1"];
	Node0x21dc0a0[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0x21dc140[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x21dc1b0[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x21dc220[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x21dc290[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x21dc300[shape=record, label="  %17 = or i32 %14, %1"];
	Node0x21dc370[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x21dc3e0[shape=record, label="  %19 = or i32 %2, %1"];
	Node0x21dc450[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x21dc4f0[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x21dc560[shape=record, label="  %22 = xor i32 %18, -2"];
	Node0x21dc5d0[shape=record, label="  %23 = xor i32 %3, -1"];
	Node0x21dc640[shape=record, label="  %24 = and i32 %7, %3"];
	Node0x21dc6b0[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x21dc720[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x21dc790[shape=record, label="  %27 = xor i32 %3, %0"];
	Node0x21dc800[shape=record, label="  %28 = xor i32 %6, -1"];
	Node0x21dc8a0[shape=record, label="  %29 = mul i32 %28, 5"];
	Node0x21dc910[shape=record, label="  %30 = xor i32 %8, -1"];
	Node0x21dc9b0[shape=record, label="  %31 = mul i32 %30, 6"];
	Node0x21dca50[shape=record, label="  %32 = mul i32 %24, 7"];
	Node0x21dccd0[shape=record, label="  %33 = and i32 %3, %0"];
	Node0x21dcd70[shape=record, label="  %34 = mul i32 %33, 12"];
	Node0x21dcde0[shape=record, label="  %35 = sub i32 1, %0"];
	Node0x21dce50[shape=record, label="  %36 = sub i32 %35, %0"];
	Node0x21dcec0[shape=record, label="  %37 = sub i32 %36, %1"];
	Node0x21dcf30[shape=record, label="  %38 = add i32 %37, %5"];
	Node0x21dcfa0[shape=record, label="  %39 = add i32 %38, %16"];
	Node0x21dd010[shape=record, label="  %40 = sub i32 %39, %15"];
	Node0x21dd080[shape=record, label="  %41 = add i32 %40, %23"];
	Node0x21dd0f0[shape=record, label="  %42 = add i32 %41, %13"];
	Node0x21dd160[shape=record, label="  %43 = add i32 %42, %18"];
	Node0x21dd1d0[shape=record, label="  %44 = add i32 %43, %27"];
	Node0x21dd240[shape=record, label="  %45 = sub i32 %44, %21"];
	Node0x21dd2b0[shape=record, label="  %46 = sub i32 %45, %22"];
	Node0x21dd320[shape=record, label="  %47 = add i32 %46, %29"];
	Node0x21dd390[shape=record, label="  %48 = add i32 %47, %31"];
	Node0x21dd400[shape=record, label="  %49 = add i32 %48, %32"];
	Node0x21dd470[shape=record, label="  %50 = add i32 %49, %34"];
	Node0x21dd4e0[shape=record, label="  %51 = sub i32 %50, %26"];
	Node0x21dd550[shape=record, label="  %52 = icmp eq i32 %11, %51"];
	Node0x217c268[shape=record, label="  %53 = select i1 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x21dd9f0[shape=record, label="  %54 = tail call i32 @puts(i8* nonnull dereferenceable(1) %53)"];
	Node0x21dda40[shape=record, label="  ret void"];
	Node0x21dbd60 -> Node0x21dbdd0;
	Node0x21dbdd0 -> Node0x21dbe40;
	Node0x21dbe40 -> Node0x21dbeb0;
	Node0x21dbeb0 -> Node0x21dbf20;
	Node0x21dbf20 -> Node0x21dbfc0;
	Node0x21dbfc0 -> Node0x21dc030;
	Node0x21dc030 -> Node0x21dc0a0;
	Node0x21dc0a0 -> Node0x21dc140;
	Node0x21dc140 -> Node0x21dc1b0;
	Node0x21dc1b0 -> Node0x21dc220;
	Node0x21dc220 -> Node0x21dc290;
	Node0x21dc290 -> Node0x21dc300;
	Node0x21dc300 -> Node0x21dc370;
	Node0x21dc370 -> Node0x21dc3e0;
	Node0x21dc3e0 -> Node0x21dc450;
	Node0x21dc450 -> Node0x21dc4f0;
	Node0x21dc4f0 -> Node0x21dc560;
	Node0x21dc560 -> Node0x21dc5d0;
	Node0x21dc5d0 -> Node0x21dc640;
	Node0x21dc640 -> Node0x21dc6b0;
	Node0x21dc6b0 -> Node0x21dc720;
	Node0x21dc720 -> Node0x21dc790;
	Node0x21dc790 -> Node0x21dc800;
	Node0x21dc800 -> Node0x21dc8a0;
	Node0x21dc8a0 -> Node0x21dc910;
	Node0x21dc910 -> Node0x21dc9b0;
	Node0x21dc9b0 -> Node0x21dca50;
	Node0x21dca50 -> Node0x21dccd0;
	Node0x21dccd0 -> Node0x21dcd70;
	Node0x21dcd70 -> Node0x21dcde0;
	Node0x21dcde0 -> Node0x21dce50;
	Node0x21dce50 -> Node0x21dcec0;
	Node0x21dcec0 -> Node0x21dcf30;
	Node0x21dcf30 -> Node0x21dcfa0;
	Node0x21dcfa0 -> Node0x21dd010;
	Node0x21dd010 -> Node0x21dd080;
	Node0x21dd080 -> Node0x21dd0f0;
	Node0x21dd0f0 -> Node0x21dd160;
	Node0x21dd160 -> Node0x21dd1d0;
	Node0x21dd1d0 -> Node0x21dd240;
	Node0x21dd240 -> Node0x21dd2b0;
	Node0x21dd2b0 -> Node0x21dd320;
	Node0x21dd320 -> Node0x21dd390;
	Node0x21dd390 -> Node0x21dd400;
	Node0x21dd400 -> Node0x21dd470;
	Node0x21dd470 -> Node0x21dd4e0;
	Node0x21dd4e0 -> Node0x21dd550;
	Node0x21dd550 -> Node0x217c268;
	Node0x217c268 -> Node0x21dd9f0;
	Node0x21dd9f0 -> Node0x21dda40;
edge [color=red]
	Node0x21dbe40 -> Node0x21dbeb0;
	Node0x21dbeb0 -> Node0x21dbf20;
	Node0x21dbdd0 -> Node0x21dbf20;
	Node0x21dbf20 -> Node0x21dbfc0;
	Node0x21dbfc0 -> Node0x21dc030;
	Node0x21dc0a0 -> Node0x21dc140;
	Node0x21dc1b0 -> Node0x21dc220;
	Node0x21dc220 -> Node0x21dc290;
	Node0x21dc1b0 -> Node0x21dc300;
	Node0x21dc300 -> Node0x21dc370;
	Node0x21dc3e0 -> Node0x21dc450;
	Node0x21dc450 -> Node0x21dc4f0;
	Node0x21dc370 -> Node0x21dc560;
	Node0x21dbe40 -> Node0x21dc640;
	Node0x21dc640 -> Node0x21dc6b0;
	Node0x21dc6b0 -> Node0x21dc720;
	Node0x21dbdd0 -> Node0x21dc800;
	Node0x21dc800 -> Node0x21dc8a0;
	Node0x21dbeb0 -> Node0x21dc910;
	Node0x21dc910 -> Node0x21dc9b0;
	Node0x21dc640 -> Node0x21dca50;
	Node0x21dccd0 -> Node0x21dcd70;
	Node0x21dcde0 -> Node0x21dce50;
	Node0x21dce50 -> Node0x21dcec0;
	Node0x21dcec0 -> Node0x21dcf30;
	Node0x21dbd60 -> Node0x21dcf30;
	Node0x21dcf30 -> Node0x21dcfa0;
	Node0x21dc290 -> Node0x21dcfa0;
	Node0x21dcfa0 -> Node0x21dd010;
	Node0x21dc220 -> Node0x21dd010;
	Node0x21dd010 -> Node0x21dd080;
	Node0x21dc5d0 -> Node0x21dd080;
	Node0x21dd080 -> Node0x21dd0f0;
	Node0x21dc140 -> Node0x21dd0f0;
	Node0x21dd0f0 -> Node0x21dd160;
	Node0x21dc370 -> Node0x21dd160;
	Node0x21dd160 -> Node0x21dd1d0;
	Node0x21dc790 -> Node0x21dd1d0;
	Node0x21dd1d0 -> Node0x21dd240;
	Node0x21dc4f0 -> Node0x21dd240;
	Node0x21dd240 -> Node0x21dd2b0;
	Node0x21dc560 -> Node0x21dd2b0;
	Node0x21dd2b0 -> Node0x21dd320;
	Node0x21dc8a0 -> Node0x21dd320;
	Node0x21dd320 -> Node0x21dd390;
	Node0x21dc9b0 -> Node0x21dd390;
	Node0x21dd390 -> Node0x21dd400;
	Node0x21dca50 -> Node0x21dd400;
	Node0x21dd400 -> Node0x21dd470;
	Node0x21dcd70 -> Node0x21dd470;
	Node0x21dd470 -> Node0x21dd4e0;
	Node0x21dc720 -> Node0x21dd4e0;
	Node0x21dc030 -> Node0x21dd550;
	Node0x21dd4e0 -> Node0x21dd550;
	Node0x21dd550 -> Node0x217c268;
	Node0x217c268 -> Node0x21dd9f0;
}
