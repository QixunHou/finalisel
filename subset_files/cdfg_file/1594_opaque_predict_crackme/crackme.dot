digraph "DFG for'crackme' function" {
	Node0xbba9a0[shape=record, label="  %5 = or i32 %2, %1"];
	Node0xbbaa10[shape=record, label="  %6 = and i32 %2, %1"];
	Node0xbbb090[shape=record, label="  %7 = add i32 %5, 1"];
	Node0xbbb100[shape=record, label="  %8 = add i32 %7, %6"];
	Node0xbbb1a0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0xbbb210[shape=record, label="  %10 = and i32 %9, %3"];
	Node0xbbb280[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0xbbb320[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xbbb390[shape=record, label="  %13 = add i32 %8, %12"];
	Node0xbbb400[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0xbbb470[shape=record, label="  %15 = xor i32 %2, -1"];
	Node0xbbb4e0[shape=record, label="  %16 = or i32 %15, %1"];
	Node0xbbb580[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0xbbb5f0[shape=record, label="  %18 = and i32 %15, %1"];
	Node0xbbb660[shape=record, label="  %19 = or i32 %9, %3"];
	Node0xbbb6d0[shape=record, label="  %20 = or i32 %3, %0"];
	Node0xbbb740[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0xbbb7b0[shape=record, label="  %22 = and i32 %3, %0"];
	Node0xbbb820[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0xbbb890[shape=record, label="  %24 = sub i32 %18, %14"];
	Node0xbbb900[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0xbbb970[shape=record, label="  %26 = add i32 %0, -2"];
	Node0xbbb9e0[shape=record, label="  %27 = add i32 %26, %0"];
	Node0xbbba50[shape=record, label="  %28 = add i32 %27, %1"];
	Node0xbbbac0[shape=record, label="  %29 = add i32 %28, %6"];
	Node0xbbbb30[shape=record, label="  %30 = add i32 %29, %3"];
	Node0xbbbba0[shape=record, label="  %31 = add i32 %30, %17"];
	Node0xbbbc10[shape=record, label="  %32 = add i32 %31, %19"];
	Node0xbbbe90[shape=record, label="  %33 = add i32 %32, %21"];
	Node0xbbbf00[shape=record, label="  %34 = sub i32 %33, %11"];
	Node0xbbbf70[shape=record, label="  %35 = sub i32 %34, %23"];
	Node0xbbbfe0[shape=record, label="  %36 = add i32 %35, %25"];
	Node0xbbc050[shape=record, label="  %37 = icmp eq i32 %13, %36"];
	Node0xb5b268[shape=record, label="  %38 = select i1 %37, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbbc4f0[shape=record, label="  %39 = tail call i32 @puts(i8* nonnull dereferenceable(1) %38)"];
	Node0xbbc540[shape=record, label="  ret void"];
	Node0xbba9a0 -> Node0xbbaa10;
	Node0xbbaa10 -> Node0xbbb090;
	Node0xbbb090 -> Node0xbbb100;
	Node0xbbb100 -> Node0xbbb1a0;
	Node0xbbb1a0 -> Node0xbbb210;
	Node0xbbb210 -> Node0xbbb280;
	Node0xbbb280 -> Node0xbbb320;
	Node0xbbb320 -> Node0xbbb390;
	Node0xbbb390 -> Node0xbbb400;
	Node0xbbb400 -> Node0xbbb470;
	Node0xbbb470 -> Node0xbbb4e0;
	Node0xbbb4e0 -> Node0xbbb580;
	Node0xbbb580 -> Node0xbbb5f0;
	Node0xbbb5f0 -> Node0xbbb660;
	Node0xbbb660 -> Node0xbbb6d0;
	Node0xbbb6d0 -> Node0xbbb740;
	Node0xbbb740 -> Node0xbbb7b0;
	Node0xbbb7b0 -> Node0xbbb820;
	Node0xbbb820 -> Node0xbbb890;
	Node0xbbb890 -> Node0xbbb900;
	Node0xbbb900 -> Node0xbbb970;
	Node0xbbb970 -> Node0xbbb9e0;
	Node0xbbb9e0 -> Node0xbbba50;
	Node0xbbba50 -> Node0xbbbac0;
	Node0xbbbac0 -> Node0xbbbb30;
	Node0xbbbb30 -> Node0xbbbba0;
	Node0xbbbba0 -> Node0xbbbc10;
	Node0xbbbc10 -> Node0xbbbe90;
	Node0xbbbe90 -> Node0xbbbf00;
	Node0xbbbf00 -> Node0xbbbf70;
	Node0xbbbf70 -> Node0xbbbfe0;
	Node0xbbbfe0 -> Node0xbbc050;
	Node0xbbc050 -> Node0xb5b268;
	Node0xb5b268 -> Node0xbbc4f0;
	Node0xbbc4f0 -> Node0xbbc540;
edge [color=red]
	Node0xbba9a0 -> Node0xbbb090;
	Node0xbbb090 -> Node0xbbb100;
	Node0xbbaa10 -> Node0xbbb100;
	Node0xbbb1a0 -> Node0xbbb210;
	Node0xbbb210 -> Node0xbbb280;
	Node0xbbb280 -> Node0xbbb320;
	Node0xbbb100 -> Node0xbbb390;
	Node0xbbb320 -> Node0xbbb390;
	Node0xbbb470 -> Node0xbbb4e0;
	Node0xbbb4e0 -> Node0xbbb580;
	Node0xbbb470 -> Node0xbbb5f0;
	Node0xbbb1a0 -> Node0xbbb660;
	Node0xbbb6d0 -> Node0xbbb740;
	Node0xbbb7b0 -> Node0xbbb820;
	Node0xbbb5f0 -> Node0xbbb890;
	Node0xbbb400 -> Node0xbbb890;
	Node0xbbb890 -> Node0xbbb900;
	Node0xbbb970 -> Node0xbbb9e0;
	Node0xbbb9e0 -> Node0xbbba50;
	Node0xbbba50 -> Node0xbbbac0;
	Node0xbbaa10 -> Node0xbbbac0;
	Node0xbbbac0 -> Node0xbbbb30;
	Node0xbbbb30 -> Node0xbbbba0;
	Node0xbbb580 -> Node0xbbbba0;
	Node0xbbbba0 -> Node0xbbbc10;
	Node0xbbb660 -> Node0xbbbc10;
	Node0xbbbc10 -> Node0xbbbe90;
	Node0xbbb740 -> Node0xbbbe90;
	Node0xbbbe90 -> Node0xbbbf00;
	Node0xbbb280 -> Node0xbbbf00;
	Node0xbbbf00 -> Node0xbbbf70;
	Node0xbbb820 -> Node0xbbbf70;
	Node0xbbbf70 -> Node0xbbbfe0;
	Node0xbbb900 -> Node0xbbbfe0;
	Node0xbbb390 -> Node0xbbc050;
	Node0xbbbfe0 -> Node0xbbc050;
	Node0xbbc050 -> Node0xb5b268;
	Node0xb5b268 -> Node0xbbc4f0;
}
