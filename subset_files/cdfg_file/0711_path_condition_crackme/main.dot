digraph "DFG for'main' function" {
	Node0x14fdad8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x14fdb58[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x14fdbe8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x14fdc48[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x14fdcf8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x14fe128[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x14fe208[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x14fe308[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x14fe3c8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x14fe478[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x14fe538[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x14fe5e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x14f8ae0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x14fe7e8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x14ff758[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x14ffdc8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x14ffe28[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x14ffea0[shape=record, label="  %14 = xor i32 %12, -1"];
	Node0x14fff10[shape=record, label="  %15 = add i32 %12, 1"];
	Node0x14fff80[shape=record, label="  %16 = sub i32 %15, %13"];
	Node0x14ffff0[shape=record, label="  %17 = or i32 %13, %10"];
	Node0x1500060[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x15000d0[shape=record, label="  %19 = sub i32 %16, %18"];
	Node0x1500140[shape=record, label="  %20 = xor i32 %12, %11"];
	Node0x15001b0[shape=record, label="  %21 = shl i32 %20, 2"];
	Node0x1500220[shape=record, label="  %22 = and i32 %11, %14"];
	Node0x1500290[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x1500300[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x1500370[shape=record, label="  %25 = and i32 %12, %11"];
	Node0x15003e0[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x1500450[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x15004c0[shape=record, label="  %28 = or i32 %11, %14"];
	Node0x1500530[shape=record, label="  %29 = or i32 %12, %11"];
	Node0x15005a0[shape=record, label="  %30 = xor i32 %29, -1"];
	Node0x1500610[shape=record, label="  %31 = shl i32 %28, 2"];
	Node0x1500680[shape=record, label="  %32 = xor i32 %31, -4"];
	Node0x15006f0[shape=record, label="  %33 = mul i32 %22, -5"];
	Node0x1500760[shape=record, label="  %34 = xor i32 %13, %10"];
	Node0x15007d0[shape=record, label="  %35 = shl i32 %34, 1"];
	Node0x1500840[shape=record, label="  %36 = xor i32 %10, -1"];
	Node0x15008b0[shape=record, label="  %37 = and i32 %13, %36"];
	Node0x1500920[shape=record, label="  %38 = and i32 %13, %10"];
	Node0x1500990[shape=record, label="  %39 = add i32 %25, %30"];
	Node0x1500a00[shape=record, label="  %40 = add i32 %39, %38"];
	Node0x1500a70[shape=record, label="  %41 = mul i32 %40, -3"];
	Node0x1500ae0[shape=record, label="  %42 = add i32 %28, %14"];
	Node0x1500b50[shape=record, label="  %43 = add i32 %42, %21"];
	Node0x1500bc0[shape=record, label="  %44 = add i32 %43, %33"];
	Node0x1500c30[shape=record, label="  %45 = sub i32 %44, %37"];
	Node0x1500ca0[shape=record, label="  %46 = add i32 %45, %24"];
	Node0x1500d10[shape=record, label="  %47 = sub i32 %46, %27"];
	Node0x1500d80[shape=record, label="  %48 = sub i32 %47, %32"];
	Node0x1500df0[shape=record, label="  %49 = sub i32 %48, %35"];
	Node0x1500e60[shape=record, label="  %50 = add i32 %49, %41"];
	Node0x1500ed0[shape=record, label="  %51 = icmp eq i32 %19, %50"];
	Node0x149d8b8[shape=record, label="  %52 = select i1 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1500f60[shape=record, label="  %53 = call i32 @puts(i8* nonnull dereferenceable(1) %52) #5"];
	Node0x1501208[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x1501368[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x1501478[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1501588[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1501648[shape=record, label="  ret i32 0"];
	Node0x14fdad8 -> Node0x14fdb58;
	Node0x14fdb58 -> Node0x14fdbe8;
	Node0x14fdbe8 -> Node0x14fdc48;
	Node0x14fdc48 -> Node0x14fdcf8;
	Node0x14fdcf8 -> Node0x14fe128;
	Node0x14fe128 -> Node0x14fe208;
	Node0x14fe208 -> Node0x14fe308;
	Node0x14fe308 -> Node0x14fe3c8;
	Node0x14fe3c8 -> Node0x14fe478;
	Node0x14fe478 -> Node0x14fe538;
	Node0x14fe538 -> Node0x14fe5e8;
	Node0x14fe5e8 -> Node0x14f8ae0;
	Node0x14f8ae0 -> Node0x14fe7e8;
	Node0x14fe7e8 -> Node0x14ff758;
	Node0x14ff758 -> Node0x14ffdc8;
	Node0x14ffdc8 -> Node0x14ffe28;
	Node0x14ffe28 -> Node0x14ffea0;
	Node0x14ffea0 -> Node0x14fff10;
	Node0x14fff10 -> Node0x14fff80;
	Node0x14fff80 -> Node0x14ffff0;
	Node0x14ffff0 -> Node0x1500060;
	Node0x1500060 -> Node0x15000d0;
	Node0x15000d0 -> Node0x1500140;
	Node0x1500140 -> Node0x15001b0;
	Node0x15001b0 -> Node0x1500220;
	Node0x1500220 -> Node0x1500290;
	Node0x1500290 -> Node0x1500300;
	Node0x1500300 -> Node0x1500370;
	Node0x1500370 -> Node0x15003e0;
	Node0x15003e0 -> Node0x1500450;
	Node0x1500450 -> Node0x15004c0;
	Node0x15004c0 -> Node0x1500530;
	Node0x1500530 -> Node0x15005a0;
	Node0x15005a0 -> Node0x1500610;
	Node0x1500610 -> Node0x1500680;
	Node0x1500680 -> Node0x15006f0;
	Node0x15006f0 -> Node0x1500760;
	Node0x1500760 -> Node0x15007d0;
	Node0x15007d0 -> Node0x1500840;
	Node0x1500840 -> Node0x15008b0;
	Node0x15008b0 -> Node0x1500920;
	Node0x1500920 -> Node0x1500990;
	Node0x1500990 -> Node0x1500a00;
	Node0x1500a00 -> Node0x1500a70;
	Node0x1500a70 -> Node0x1500ae0;
	Node0x1500ae0 -> Node0x1500b50;
	Node0x1500b50 -> Node0x1500bc0;
	Node0x1500bc0 -> Node0x1500c30;
	Node0x1500c30 -> Node0x1500ca0;
	Node0x1500ca0 -> Node0x1500d10;
	Node0x1500d10 -> Node0x1500d80;
	Node0x1500d80 -> Node0x1500df0;
	Node0x1500df0 -> Node0x1500e60;
	Node0x1500e60 -> Node0x1500ed0;
	Node0x1500ed0 -> Node0x149d8b8;
	Node0x149d8b8 -> Node0x1500f60;
	Node0x1500f60 -> Node0x1501208;
	Node0x1501208 -> Node0x1501368;
	Node0x1501368 -> Node0x1501478;
	Node0x1501478 -> Node0x1501588;
	Node0x1501588 -> Node0x1501648;
edge [color=red]
	Node0x14fdad8 -> Node0x14fdcf8;
	Node0x14fdcf8 -> Node0x14fe128;
	Node0x14fdb58 -> Node0x14fe208;
	Node0x14fe208 -> Node0x14fe308;
	Node0x14fdbe8 -> Node0x14fe3c8;
	Node0x14fe3c8 -> Node0x14fe478;
	Node0x14fdc48 -> Node0x14fe538;
	Node0x14fe538 -> Node0x14fe5e8;
	Node0x14fdad8 -> Node0x14f8ae0;
	Node0x14fdb58 -> Node0x14f8ae0;
	Node0x14fdbe8 -> Node0x14f8ae0;
	Node0x14fdc48 -> Node0x14f8ae0;
	Node0x14fdad8 -> Node0x14fe7e8;
	Node0x14fdb58 -> Node0x14ff758;
	Node0x14fdbe8 -> Node0x14ffdc8;
	Node0x14fdc48 -> Node0x14ffe28;
	Node0x14ffdc8 -> Node0x14ffea0;
	Node0x14ffdc8 -> Node0x14fff10;
	Node0x14fff10 -> Node0x14fff80;
	Node0x14ffe28 -> Node0x14fff80;
	Node0x14ffe28 -> Node0x14ffff0;
	Node0x14fe7e8 -> Node0x14ffff0;
	Node0x14ffff0 -> Node0x1500060;
	Node0x14fff80 -> Node0x15000d0;
	Node0x1500060 -> Node0x15000d0;
	Node0x14ffdc8 -> Node0x1500140;
	Node0x14ff758 -> Node0x1500140;
	Node0x1500140 -> Node0x15001b0;
	Node0x14ff758 -> Node0x1500220;
	Node0x14ffea0 -> Node0x1500220;
	Node0x1500220 -> Node0x1500290;
	Node0x1500290 -> Node0x1500300;
	Node0x14ffdc8 -> Node0x1500370;
	Node0x14ff758 -> Node0x1500370;
	Node0x1500370 -> Node0x15003e0;
	Node0x15003e0 -> Node0x1500450;
	Node0x14ff758 -> Node0x15004c0;
	Node0x14ffea0 -> Node0x15004c0;
	Node0x14ffdc8 -> Node0x1500530;
	Node0x14ff758 -> Node0x1500530;
	Node0x1500530 -> Node0x15005a0;
	Node0x15004c0 -> Node0x1500610;
	Node0x1500610 -> Node0x1500680;
	Node0x1500220 -> Node0x15006f0;
	Node0x14ffe28 -> Node0x1500760;
	Node0x14fe7e8 -> Node0x1500760;
	Node0x1500760 -> Node0x15007d0;
	Node0x14fe7e8 -> Node0x1500840;
	Node0x14ffe28 -> Node0x15008b0;
	Node0x1500840 -> Node0x15008b0;
	Node0x14ffe28 -> Node0x1500920;
	Node0x14fe7e8 -> Node0x1500920;
	Node0x1500370 -> Node0x1500990;
	Node0x15005a0 -> Node0x1500990;
	Node0x1500990 -> Node0x1500a00;
	Node0x1500920 -> Node0x1500a00;
	Node0x1500a00 -> Node0x1500a70;
	Node0x15004c0 -> Node0x1500ae0;
	Node0x14ffea0 -> Node0x1500ae0;
	Node0x1500ae0 -> Node0x1500b50;
	Node0x15001b0 -> Node0x1500b50;
	Node0x1500b50 -> Node0x1500bc0;
	Node0x15006f0 -> Node0x1500bc0;
	Node0x1500bc0 -> Node0x1500c30;
	Node0x15008b0 -> Node0x1500c30;
	Node0x1500c30 -> Node0x1500ca0;
	Node0x1500300 -> Node0x1500ca0;
	Node0x1500ca0 -> Node0x1500d10;
	Node0x1500450 -> Node0x1500d10;
	Node0x1500d10 -> Node0x1500d80;
	Node0x1500680 -> Node0x1500d80;
	Node0x1500d80 -> Node0x1500df0;
	Node0x15007d0 -> Node0x1500df0;
	Node0x1500df0 -> Node0x1500e60;
	Node0x1500a70 -> Node0x1500e60;
	Node0x15000d0 -> Node0x1500ed0;
	Node0x1500e60 -> Node0x1500ed0;
	Node0x1500ed0 -> Node0x149d8b8;
	Node0x149d8b8 -> Node0x1500f60;
	Node0x14fe538 -> Node0x1501208;
	Node0x14fe3c8 -> Node0x1501368;
	Node0x14fe208 -> Node0x1501478;
	Node0x14fdcf8 -> Node0x1501588;
}
