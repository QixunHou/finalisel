; ModuleID = '../.././c_source_file/0532_path_condition_crackme.c'
source_filename = "../.././c_source_file/0532_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = and i32 %8, %1
  %10 = and i32 %7, %1
  %11 = xor i32 %10, %0
  %12 = sub i32 %11, %9
  %13 = xor i32 %4, -1
  %14 = and i32 %5, %3
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %13
  %17 = sub i32 %12, %16
  %18 = xor i32 %3, -1
  %19 = xor i32 %5, -1
  %20 = and i32 %19, %4
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %18
  %23 = sub i32 %17, %22
  %24 = and i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %25, %2
  %27 = shl i32 %26, 1
  %28 = xor i32 %1, -1
  %29 = and i32 %28, %2
  %30 = and i32 %29, %0
  %31 = xor i32 %2, %1
  %32 = xor i32 %31, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %30, %33
  %35 = xor i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %1
  %38 = and i32 %2, %1
  %39 = and i32 %38, %0
  %40 = or i32 %39, %33
  %41 = or i32 %2, %0
  %42 = and i32 %28, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %31, -1
  %45 = and i32 %44, %43
  %46 = and i32 %31, %0
  %47 = or i32 %7, %1
  %48 = xor i32 %47, -1
  %49 = or i32 %24, %48
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = and i32 %41, %28
  %53 = or i32 %31, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %30, %54
  %56 = xor i32 %0, -1
  %57 = xor i32 %38, -1
  %58 = or i32 %57, %56
  %59 = or i32 %28, %2
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %0
  %62 = xor i32 %30, %61
  %63 = and i32 %2, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %1, %0
  %66 = xor i32 %65, -1
  %67 = and i32 %64, %66
  %68 = shl i32 %25, 1
  %69 = or i32 %28, %0
  %70 = xor i32 %69, -1
  %71 = xor i32 %70, %2
  %72 = and i32 %36, %28
  %73 = or i32 %44, %0
  %74 = or i32 %2, %1
  %75 = xor i32 %74, -1
  %76 = add i32 %74, 1
  %77 = or i32 %35, %66
  %78 = xor i32 %8, -1
  %79 = xor i32 %78, %1
  %80 = or i32 %38, %56
  %81 = or i32 %10, %42
  %82 = or i32 %36, %28
  %83 = or i32 %36, %51
  %84 = shl i32 %83, 1
  %85 = and i32 %38, %56
  %86 = xor i32 %46, 2147483647
  %87 = xor i32 %86, %85
  %88 = shl i32 %87, 1
  %89 = xor i32 %41, %1
  %90 = xor i32 %51, %2
  %91 = and i32 %7, %0
  %92 = xor i32 %91, -1
  %93 = xor i32 %92, %1
  %94 = shl i32 %93, 1
  %95 = and i32 %29, %56
  %96 = and i32 %59, %0
  %97 = xor i32 %96, -1
  %98 = xor i32 %95, %97
  %99 = or i32 %65, %2
  %100 = and i32 %74, %56
  %101 = or i32 %39, %100
  %102 = or i32 %91, %28
  %103 = and i32 %92, %66
  %104 = or i32 %63, %65
  %105 = or i32 %35, %70
  %106 = xor i32 %69, %2
  %107 = or i32 %78, %66
  %108 = shl i32 %107, 1
  %109 = and i32 %92, %28
  %110 = and i32 %44, %0
  %111 = and i32 %47, %56
  %112 = or i32 %31, %51
  %113 = and i32 %36, %1
  %114 = xor i32 %41, -1
  %115 = xor i32 %114, %1
  %116 = and i32 %65, %2
  %117 = and i32 %8, %65
  %118 = add i32 %2, 1
  %119 = or i32 %38, %42
  %120 = and i32 %36, %66
  %121 = xor i32 %41, %24
  %122 = xor i32 %39, %73
  %123 = and i32 %31, %43
  %124 = xor i32 %10, -1
  %125 = xor i32 %124, %0
  %126 = and i32 %69, %7
  %127 = and i32 %44, %25
  %128 = or i32 %31, %24
  %129 = shl i32 %128, 1
  %130 = and i32 %66, %2
  %131 = and i32 %65, %64
  %132 = or i32 %75, %56
  %133 = and i32 %65, %7
  %134 = and i32 %36, %43
  %135 = and i32 %31, %25
  %136 = or i32 %63, %28
  %137 = and i32 %57, %56
  %138 = xor i32 %42, %2
  %139 = xor i32 %30, %53
  %140 = or i32 %63, %1
  %141 = xor i32 %100, 2147483647
  %142 = xor i32 %141, %39
  %143 = shl i32 %142, 1
  %144 = xor i32 %31, 2147483647
  %145 = and i32 %144, %0
  %146 = or i32 %145, %95
  %147 = or i32 %42, %44
  %148 = or i32 %91, %65
  %149 = or i32 %7, %70
  %150 = shl i32 %100, 1
  %151 = and i32 %50, %36
  %152 = or i32 %114, %1
  %153 = shl i32 %152, 1
  %154 = and i32 %7, %25
  %155 = or i32 %85, %46
  %156 = xor i32 %75, %0
  %157 = and i32 %31, %69
  %158 = or i32 %24, %114
  %159 = or i32 %75, %0
  %160 = or i32 %47, %56
  %161 = or i32 %36, %66
  %162 = xor i32 %91, %57
  %163 = and i32 %35, %66
  %164 = or i32 %63, %10
  %165 = and i32 %35, %28
  %166 = or i32 %70, %2
  %167 = xor i32 %74, %0
  %168 = and i32 %36, %25
  %169 = or i32 %39, %167
  %170 = and i32 %35, %50
  %171 = or i32 %30, %32
  %172 = shl i32 %171, 1
  %173 = and i32 %35, %25
  %174 = shl i32 %38, 1
  %175 = or i32 %10, %0
  %176 = and i32 %31, %50
  %177 = and i32 %124, %0
  %178 = or i32 %44, %70
  %179 = add i32 %10, 1
  %180 = and i32 %8, %28
  %181 = xor i32 %48, %0
  %182 = xor i32 %42, %57
  %183 = and i32 %43, %2
  %184 = shl i32 %183, 1
  %185 = xor i32 %38, %0
  %186 = and i32 %75, %56
  %187 = and i32 %10, %56
  %188 = and i32 %75, %0
  %189 = and i32 %10, %0
  %190 = mul i32 %189, -9
  %191 = and i32 %48, %56
  %192 = and i32 %48, %0
  %193 = xor i32 %5, %4
  %194 = and i32 %4, %3
  %195 = or i32 %5, %3
  %196 = xor i32 %195, -1
  %197 = or i32 %194, %196
  %198 = and i32 %5, %4
  %199 = xor i32 %198, -1
  %200 = and i32 %199, %3
  %201 = and i32 %19, %3
  %202 = xor i32 %201, -1
  %203 = and i32 %202, %4
  %204 = and i32 %14, %4
  %205 = and i32 %195, %13
  %206 = xor i32 %205, -1
  %207 = xor i32 %204, %206
  %208 = xor i32 %201, %4
  %209 = or i32 %198, %196
  %210 = or i32 %19, %4
  %211 = xor i32 %4, %3
  %212 = xor i32 %211, -1
  %213 = and i32 %210, %212
  %214 = and i32 %18, %4
  %215 = xor i32 %214, -1
  %216 = xor i32 %5, %3
  %217 = xor i32 %216, -1
  %218 = and i32 %217, %215
  %219 = and i32 %13, %18
  %220 = and i32 %219, %5
  %221 = and i32 %217, %4
  %222 = or i32 %220, %221
  %223 = or i32 %194, %217
  %224 = and i32 %210, %211
  %225 = xor i32 %217, %4
  %226 = xor i32 %195, %194
  %227 = xor i32 %216, %4
  %228 = xor i32 %227, %204
  %229 = or i32 %19, %3
  %230 = xor i32 %229, -1
  %231 = and i32 %13, %3
  %232 = xor i32 %231, %5
  %233 = or i32 %216, %231
  %234 = or i32 %196, %4
  %235 = or i32 %4, %3
  %236 = xor i32 %198, %235
  %237 = and i32 %211, %21
  %238 = or i32 %229, %4
  %239 = xor i32 %210, -1
  %240 = shl i32 %239, 1
  %241 = or i32 %198, %212
  %242 = and i32 %229, %4
  %243 = and i32 %216, %215
  %244 = or i32 %5, %4
  %245 = and i32 %244, %18
  %246 = xor i32 %214, %15
  %247 = or i32 %216, %4
  %248 = and i32 %199, %18
  %249 = or i32 %20, %14
  %250 = and i32 %211, %5
  %251 = xor i32 %202, %4
  %252 = and i32 %202, %13
  %253 = or i32 %239, %3
  %254 = shl i32 %229, 1
  %255 = or i32 %230, %13
  %256 = or i32 %193, %212
  %257 = or i32 %216, %194
  %258 = shl i32 %257, 1
  %259 = or i32 %217, %4
  %260 = and i32 %196, %13
  %261 = and i32 %201, %13
  %262 = mul i32 %261, 12
  %263 = and i32 %196, %4
  %264 = and i32 %201, %4
  %265 = and i32 %230, %13
  %266 = shl i32 %265, 3
  %267 = and i32 %14, %13
  %268 = mul i32 %267, 10
  %269 = and i32 %230, %4
  %270 = sub i32 %39, %192
  %271 = add i32 %270, %73
  %272 = add i32 %271, %264
  %273 = add i32 %272, %269
  %274 = sub i32 %273, %200
  %275 = mul i32 %274, 5
  %276 = add i32 %191, %116
  %277 = add i32 %276, %186
  %278 = add i32 %277, %55
  %279 = mul i32 %278, -3
  %280 = sub i32 %187, %85
  %281 = sub i32 %280, %263
  %282 = mul i32 %281, 6
  %283 = add i32 %204, %111
  %284 = shl i32 %283, 2
  %285 = sub i32 -2, %1
  %286 = add i32 %285, %18
  %287 = add i32 %286, %166
  %288 = add i32 %287, %176
  %289 = add i32 %288, %162
  %290 = add i32 %289, %135
  %291 = add i32 %290, %115
  %292 = add i32 %291, %72
  %293 = add i32 %292, %58
  %294 = add i32 %293, %40
  %295 = add i32 %294, %230
  %296 = add i32 %295, %196
  %297 = add i32 %296, %146
  %298 = add i32 %297, %248
  %299 = add i32 %298, %249
  %300 = add i32 %299, %242
  %301 = shl i32 %300, 1
  %302 = sub i32 %2, %0
  %303 = add i32 %302, %118
  %304 = sub i32 %303, %69
  %305 = add i32 %304, %24
  %306 = add i32 %305, %41
  %307 = sub i32 %306, %68
  %308 = sub i32 %307, %71
  %309 = add i32 %308, %76
  %310 = sub i32 %309, %90
  %311 = sub i32 %310, %99
  %312 = add i32 %311, %106
  %313 = add i32 %312, %57
  %314 = add i32 %313, %74
  %315 = sub i32 %314, %63
  %316 = sub i32 %315, %126
  %317 = add i32 %316, %130
  %318 = sub i32 %317, %133
  %319 = add i32 %318, %48
  %320 = add i32 %319, %138
  %321 = add i32 %320, %149
  %322 = sub i32 %321, %154
  %323 = add i32 %322, %179
  %324 = add i32 %323, %27
  %325 = add i32 %324, %37
  %326 = add i32 %325, %45
  %327 = add i32 %326, %46
  %328 = add i32 %327, %49
  %329 = sub i32 %328, %52
  %330 = sub i32 %329, %67
  %331 = add i32 %330, %77
  %332 = sub i32 %331, %79
  %333 = sub i32 %332, %80
  %334 = sub i32 %333, %81
  %335 = add i32 %334, %82
  %336 = sub i32 %335, %89
  %337 = add i32 %336, %102
  %338 = sub i32 %337, %103
  %339 = sub i32 %338, %104
  %340 = sub i32 %339, %105
  %341 = add i32 %340, %109
  %342 = sub i32 %341, %110
  %343 = add i32 %342, %112
  %344 = sub i32 %343, %113
  %345 = sub i32 %344, %117
  %346 = add i32 %345, %53
  %347 = add i32 %346, %119
  %348 = add i32 %347, %120
  %349 = add i32 %348, %121
  %350 = sub i32 %349, %123
  %351 = sub i32 %350, %125
  %352 = sub i32 %351, %127
  %353 = add i32 %352, %131
  %354 = add i32 %353, %132
  %355 = sub i32 %354, %134
  %356 = sub i32 %355, %136
  %357 = add i32 %356, %137
  %358 = sub i32 %357, %140
  %359 = sub i32 %358, %147
  %360 = add i32 %359, %148
  %361 = add i32 %360, %151
  %362 = sub i32 %361, %32
  %363 = add i32 %362, %156
  %364 = sub i32 %363, %157
  %365 = sub i32 %364, %158
  %366 = add i32 %365, %159
  %367 = add i32 %366, %160
  %368 = sub i32 %367, %161
  %369 = add i32 %368, %163
  %370 = sub i32 %369, %164
  %371 = add i32 %370, %165
  %372 = sub i32 %371, %167
  %373 = sub i32 %372, %168
  %374 = add i32 %373, %170
  %375 = add i32 %374, %173
  %376 = sub i32 %375, %174
  %377 = add i32 %376, %175
  %378 = sub i32 %377, %177
  %379 = sub i32 %378, %178
  %380 = sub i32 %379, %180
  %381 = sub i32 %380, %181
  %382 = add i32 %381, %182
  %383 = sub i32 %382, %184
  %384 = sub i32 %383, %185
  %385 = add i32 %384, %188
  %386 = sub i32 %385, %34
  %387 = sub i32 %386, %62
  %388 = sub i32 %387, %84
  %389 = sub i32 %388, %94
  %390 = sub i32 %389, %98
  %391 = add i32 %390, %101
  %392 = sub i32 %391, %108
  %393 = add i32 %392, %122
  %394 = sub i32 %393, %129
  %395 = add i32 %394, %139
  %396 = sub i32 %395, %150
  %397 = sub i32 %396, %153
  %398 = sub i32 %397, %155
  %399 = sub i32 %398, %169
  %400 = add i32 %399, %190
  %401 = sub i32 %400, %172
  %402 = add i32 %401, %193
  %403 = sub i32 %402, %232
  %404 = sub i32 %403, %250
  %405 = sub i32 %404, %88
  %406 = sub i32 %405, %143
  %407 = sub i32 %406, %197
  %408 = add i32 %407, %203
  %409 = sub i32 %408, %208
  %410 = sub i32 %409, %209
  %411 = sub i32 %410, %213
  %412 = sub i32 %411, %205
  %413 = sub i32 %412, %218
  %414 = add i32 %413, %223
  %415 = sub i32 %414, %224
  %416 = sub i32 %415, %225
  %417 = add i32 %416, %226
  %418 = add i32 %417, %233
  %419 = sub i32 %418, %234
  %420 = sub i32 %419, %236
  %421 = add i32 %420, %221
  %422 = sub i32 %421, %237
  %423 = sub i32 %422, %238
  %424 = sub i32 %423, %240
  %425 = add i32 %424, %241
  %426 = add i32 %425, %243
  %427 = sub i32 %426, %245
  %428 = add i32 %427, %246
  %429 = sub i32 %428, %247
  %430 = sub i32 %429, %251
  %431 = add i32 %430, %252
  %432 = add i32 %431, %253
  %433 = sub i32 %432, %254
  %434 = sub i32 %433, %255
  %435 = add i32 %434, %256
  %436 = sub i32 %435, %259
  %437 = sub i32 %436, %260
  %438 = add i32 %437, %207
  %439 = add i32 %438, %222
  %440 = add i32 %439, %228
  %441 = sub i32 %440, %258
  %442 = add i32 %441, %262
  %443 = sub i32 %442, %266
  %444 = add i32 %443, %268
  %445 = add i32 %444, %279
  %446 = add i32 %445, %284
  %447 = add i32 %446, %282
  %448 = add i32 %447, %275
  %449 = add i32 %448, %301
  %450 = icmp eq i32 %23, %449
  %451 = select i1 %450, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %452 = tail call i32 @puts(i8* nonnull dereferenceable(1) %451)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
