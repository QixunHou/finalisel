; ModuleID = '../.././c_source_file/0366_path_condition_crackme.c'
source_filename = "../.././c_source_file/0366_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %2, -1
  %8 = xor i32 %2, %1
  %9 = add i32 %8, %2
  %10 = sub i32 %9, %4
  %11 = xor i32 %4, %3
  %12 = shl i32 %11, 1
  %13 = xor i32 %12, -2
  %14 = or i32 %6, %3
  %15 = shl i32 %14, 1
  %16 = and i32 %6, %3
  %17 = or i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %14, -1
  %20 = or i32 %7, %0
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %20, %22
  %24 = xor i32 %1, -1
  %25 = xor i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %24
  %28 = or i32 %24, %0
  %29 = and i32 %8, %28
  %30 = and i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %0
  %33 = or i32 %1, %0
  %34 = and i32 %33, %26
  %35 = xor i32 %20, -1
  %36 = shl i32 %35, 1
  %37 = and i32 %2, %0
  %38 = xor i32 %37, %33
  %39 = and i32 %1, %0
  %40 = or i32 %2, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %39, %41
  %43 = or i32 %39, %2
  %44 = xor i32 %0, -1
  %45 = and i32 %40, %44
  %46 = and i32 %24, %0
  %47 = xor i32 %46, %2
  %48 = and i32 %30, %0
  %49 = xor i32 %40, %0
  %50 = or i32 %48, %49
  %51 = xor i32 %46, -1
  %52 = and i32 %25, %51
  %53 = and i32 %22, %2
  %54 = or i32 %21, %26
  %55 = or i32 %7, %1
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %0
  %58 = xor i32 %37, -1
  %59 = xor i32 %58, %1
  %60 = and i32 %26, %1
  %61 = and i32 %25, %28
  %62 = and i32 %8, %44
  %63 = or i32 %48, %62
  %64 = and i32 %21, %58
  %65 = or i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %66, %1
  %68 = xor i32 %8, -1
  %69 = and i32 %7, %22
  %70 = xor i32 %55, %39
  %71 = xor i32 %8, %0
  %72 = and i32 %24, %2
  %73 = and i32 %72, %44
  %74 = or i32 %8, %44
  %75 = xor i32 %73, %74
  %76 = and i32 %8, %51
  %77 = xor i32 %48, -1
  %78 = xor i32 %45, %77
  %79 = xor i32 %28, -1
  %80 = or i32 %7, %79
  %81 = shl i32 %80, 1
  %82 = or i32 %39, %7
  %83 = xor i32 %28, %2
  %84 = or i32 %25, %24
  %85 = and i32 %21, %2
  %86 = and i32 %72, %0
  %87 = or i32 %24, %2
  %88 = and i32 %87, %44
  %89 = or i32 %86, %88
  %90 = shl i32 %89, 1
  %91 = xor i32 %39, -1
  %92 = and i32 %7, %91
  %93 = and i32 %65, %1
  %94 = and i32 %7, %1
  %95 = or i32 %94, %0
  %96 = xor i32 %94, -1
  %97 = xor i32 %37, %96
  %98 = and i32 %28, %7
  %99 = or i32 %35, %22
  %100 = shl i32 %22, 1
  %101 = xor i32 %30, %0
  %102 = and i32 %25, %33
  %103 = or i32 %37, %1
  %104 = and i32 %30, %44
  %105 = and i32 %8, %0
  %106 = or i32 %104, %105
  %107 = and i32 %8, %91
  %108 = and i32 %21, %7
  %109 = or i32 %66, %24
  %110 = or i32 %8, %0
  %111 = xor i32 %41, %0
  %112 = and i32 %7, %0
  %113 = xor i32 %112, -1
  %114 = and i32 %21, %113
  %115 = or i32 %7, %22
  %116 = or i32 %21, %66
  %117 = or i32 %22, %2
  %118 = shl i32 %117, 1
  %119 = xor i32 %104, -1
  %120 = xor i32 %105, %119
  %121 = xor i32 %62, %77
  %122 = xor i32 %91, %2
  %123 = xor i32 %33, -1
  %124 = or i32 %30, %46
  %125 = and i32 %68, %91
  %126 = or i32 %25, %79
  %127 = xor i32 %87, %0
  %128 = or i32 %86, %127
  %129 = and i32 %28, %68
  %130 = or i32 %21, %7
  %131 = and i32 %55, %0
  %132 = xor i32 %56, %0
  %133 = add i32 %55, 1
  %134 = xor i32 %86, -1
  %135 = xor i32 %127, %134
  %136 = or i32 %112, %22
  %137 = or i32 %41, %44
  %138 = or i32 %25, %1
  %139 = xor i32 %31, %0
  %140 = or i32 %26, %22
  %141 = and i32 %58, %22
  %142 = or i32 %25, %39
  %143 = and i32 %55, %44
  %144 = shl i32 %143, 1
  %145 = xor i32 %79, %2
  %146 = xor i32 %33, %2
  %147 = xor i32 %35, %1
  %148 = and i32 %25, %22
  %149 = or i32 %26, %79
  %150 = or i32 %39, %66
  %151 = and i32 %58, %1
  %152 = and i32 %68, %44
  %153 = xor i32 %68, %0
  %154 = shl i32 %153, 1
  %155 = xor i32 %48, %71
  %156 = shl i32 %24, 1
  %157 = xor i32 %112, %55
  %158 = or i32 %37, %24
  %159 = xor i32 %51, %2
  %160 = shl i32 %159, 1
  %161 = and i32 %21, %26
  %162 = or i32 %21, %35
  %163 = or i32 %37, %41
  %164 = and i32 %40, %0
  %165 = or i32 %25, %46
  %166 = xor i32 %49, %77
  %167 = and i32 %25, %91
  %168 = xor i32 %96, %0
  %169 = or i32 %7, %123
  %170 = and i32 %65, %24
  %171 = or i32 %46, %7
  %172 = and i32 %113, %24
  %173 = or i32 %39, %26
  %174 = or i32 %8, %39
  %175 = or i32 %66, %22
  %176 = xor i32 %113, %1
  %177 = xor i32 %46, %31
  %178 = add i32 %39, 1
  %179 = xor i32 %37, %40
  %180 = xor i32 %65, %1
  %181 = or i32 %39, %56
  %182 = and i32 %113, %22
  %183 = shl i32 %182, 2
  %184 = and i32 %26, %51
  %185 = or i32 %96, %0
  %186 = and i32 %33, %7
  %187 = shl i32 %186, 1
  %188 = shl i32 %66, 2
  %189 = or i32 %30, %44
  %190 = xor i32 %40, %39
  %191 = or i32 %94, %46
  %192 = and i32 %25, %21
  %193 = or i32 %40, %44
  %194 = shl i32 %193, 1
  %195 = or i32 %68, %0
  %196 = and i32 %87, %0
  %197 = or i32 %73, %196
  %198 = shl i32 %197, 1
  %199 = or i32 %68, %79
  %200 = or i32 %31, %0
  %201 = and i32 %8, %33
  %202 = or i32 %21, %2
  %203 = shl i32 %202, 1
  %204 = or i32 %8, %46
  %205 = xor i32 %196, -1
  %206 = xor i32 %73, %205
  %207 = or i32 %55, %0
  %208 = and i32 %33, %2
  %209 = or i32 %26, %1
  %210 = and i32 %33, %68
  %211 = or i32 %35, %24
  %212 = shl i32 %211, 1
  %213 = or i32 %46, %26
  %214 = xor i32 %164, %119
  %215 = or i32 %46, %2
  %216 = and i32 %20, %21
  %217 = and i32 %7, %51
  %218 = xor i32 %112, %1
  %219 = xor i32 %55, %0
  %220 = or i32 %26, %123
  %221 = and i32 %113, %1
  %222 = and i32 %68, %0
  %223 = xor i32 %37, %1
  %224 = xor i32 %94, %0
  %225 = and i32 %28, %2
  %226 = or i32 %39, %68
  %227 = or i32 %86, %71
  %228 = or i32 %104, %164
  %229 = or i32 %112, %21
  %230 = shl i32 %229, 1
  %231 = or i32 %30, %0
  %232 = or i32 %94, %44
  %233 = or i32 %56, %44
  %234 = and i32 %96, %44
  %235 = and i32 %96, %0
  %236 = shl i32 %235, 1
  %237 = and i32 %65, %22
  %238 = shl i32 %237, 1
  %239 = or i32 %112, %1
  %240 = and i32 %26, %22
  %241 = or i32 %31, %44
  %242 = or i32 %66, %1
  %243 = xor i32 %20, %39
  %244 = shl i32 %243, 1
  %245 = or i32 %37, %79
  %246 = shl i32 %245, 1
  %247 = or i32 %68, %44
  %248 = or i32 %112, %56
  %249 = or i32 %8, %79
  %250 = xor i32 %46, %96
  %251 = shl i32 %250, 2
  %252 = and i32 %58, %24
  %253 = add i32 %28, 1
  %254 = or i32 %46, %68
  %255 = and i32 %25, %24
  %256 = or i32 %48, %45
  %257 = or i32 %68, %123
  %258 = xor i32 %110, 2147483647
  %259 = or i32 %258, %86
  %260 = or i32 %123, %2
  %261 = and i32 %20, %1
  %262 = shl i32 %261, 1
  %263 = xor i32 %39, %2
  %264 = or i32 %37, %22
  %265 = or i32 %112, %30
  %266 = or i32 %39, %35
  %267 = and i32 %68, %51
  %268 = and i32 %51, %2
  %269 = or i32 %37, %21
  %270 = and i32 %28, %26
  %271 = or i32 %41, %0
  %272 = or i32 %40, %0
  %273 = and i32 %25, %1
  %274 = shl i32 %273, 1
  %275 = or i32 %25, %21
  %276 = or i32 %37, %123
  %277 = xor i32 %71, -1
  %278 = or i32 %48, %277
  %279 = or i32 %112, %24
  %280 = xor i32 %88, %134
  %281 = and i32 %65, %21
  %282 = xor i32 %74, 2147483647
  %283 = or i32 %282, %73
  %284 = xor i32 %37, %28
  %285 = shl i32 %284, 1
  %286 = or i32 %79, %2
  %287 = xor i32 %123, %2
  %288 = shl i32 %287, 1
  %289 = and i32 %20, %24
  %290 = or i32 %96, %44
  %291 = xor i32 %65, %39
  %292 = shl i32 %291, 1
  %293 = and i32 %91, %2
  %294 = shl i32 %31, 1
  %295 = and i32 %26, %24
  %296 = xor i32 %20, %1
  %297 = xor i32 %112, %31
  %298 = or i32 %55, %44
  %299 = or i32 %25, %22
  %300 = xor i32 %86, %277
  %301 = or i32 %35, %1
  %302 = and i32 %26, %91
  %303 = or i32 %37, %94
  %304 = or i32 %25, %123
  %305 = and i32 %31, %44
  %306 = shl i32 %305, 1
  %307 = and i32 %41, %44
  %308 = mul i32 %307, -13
  %309 = and i32 %94, %44
  %310 = mul i32 %309, 17
  %311 = and i32 %41, %0
  %312 = mul i32 %311, -20
  %313 = and i32 %94, %0
  %314 = and i32 %56, %44
  %315 = mul i32 %314, 18
  %316 = mul i32 %104, -6
  %317 = and i32 %56, %0
  %318 = mul i32 %48, -19
  %319 = add i32 %171, %113
  %320 = add i32 %319, %41
  %321 = add i32 %320, %83
  %322 = sub i32 %240, %37
  %323 = sub i32 %322, %257
  %324 = add i32 %323, %224
  %325 = sub i32 %324, %221
  %326 = add i32 %325, %59
  %327 = mul i32 %326, 5
  %328 = add i32 %321, %3
  %329 = add i32 %328, %298
  %330 = add i32 %329, %270
  %331 = add i32 %330, %267
  %332 = add i32 %331, %239
  %333 = add i32 %332, %226
  %334 = add i32 %333, %177
  %335 = add i32 %334, %168
  %336 = add i32 %335, %152
  %337 = add i32 %336, %149
  %338 = add i32 %337, %93
  %339 = add i32 %338, %61
  %340 = add i32 %339, %54
  %341 = add i32 %340, %34
  %342 = add i32 %341, %228
  %343 = add i32 %342, %259
  %344 = add i32 %343, %283
  %345 = shl i32 %344, 1
  %346 = sub i32 %96, %190
  %347 = sub i32 %346, %116
  %348 = add i32 %347, %19
  %349 = add i32 %348, %16
  %350 = add i32 %349, %18
  %351 = mul i32 %350, 3
  %352 = sub i32 %44, %0
  %353 = sub i32 %352, %1
  %354 = sub i32 %353, %28
  %355 = add i32 %354, 1
  %356 = sub i32 %355, %156
  %357 = add i32 %356, %178
  %358 = add i32 %357, %21
  %359 = sub i32 %358, %2
  %360 = sub i32 %359, %39
  %361 = add i32 %360, %253
  %362 = add i32 %361, %43
  %363 = add i32 %362, %47
  %364 = sub i32 %363, %53
  %365 = sub i32 %364, %40
  %366 = add i32 %365, %68
  %367 = add i32 %366, %69
  %368 = add i32 %367, %82
  %369 = add i32 %368, %85
  %370 = add i32 %369, %92
  %371 = sub i32 %370, %55
  %372 = add i32 %371, %98
  %373 = sub i32 %372, %100
  %374 = sub i32 %373, %108
  %375 = sub i32 %374, %115
  %376 = sub i32 %375, %122
  %377 = add i32 %376, %130
  %378 = add i32 %377, %133
  %379 = sub i32 %378, %145
  %380 = sub i32 %379, %146
  %381 = sub i32 %380, %169
  %382 = add i32 %381, %58
  %383 = sub i32 %382, %25
  %384 = sub i32 %383, %112
  %385 = add i32 %384, %208
  %386 = add i32 %385, %30
  %387 = add i32 %386, %215
  %388 = sub i32 %387, %217
  %389 = sub i32 %388, %225
  %390 = sub i32 %389, %260
  %391 = add i32 %390, %96
  %392 = add i32 %391, %263
  %393 = add i32 %392, %26
  %394 = add i32 %393, %20
  %395 = add i32 %394, %268
  %396 = add i32 %395, %286
  %397 = add i32 %396, %293
  %398 = add i32 %397, %65
  %399 = sub i32 %398, %23
  %400 = add i32 %399, %27
  %401 = sub i32 %400, %29
  %402 = add i32 %401, %32
  %403 = sub i32 %402, %36
  %404 = add i32 %403, %38
  %405 = add i32 %404, %42
  %406 = sub i32 %405, %45
  %407 = add i32 %406, %52
  %408 = add i32 %407, %57
  %409 = add i32 %408, %60
  %410 = add i32 %409, %64
  %411 = sub i32 %410, %67
  %412 = add i32 %411, %70
  %413 = sub i32 %412, %71
  %414 = sub i32 %413, %76
  %415 = sub i32 %414, %81
  %416 = sub i32 %415, %84
  %417 = add i32 %416, %95
  %418 = add i32 %417, %97
  %419 = sub i32 %418, %99
  %420 = add i32 %419, %49
  %421 = add i32 %420, %101
  %422 = add i32 %421, %102
  %423 = sub i32 %422, %103
  %424 = add i32 %423, %107
  %425 = add i32 %424, %109
  %426 = add i32 %425, %110
  %427 = add i32 %426, %111
  %428 = sub i32 %427, %114
  %429 = sub i32 %428, %118
  %430 = add i32 %429, %124
  %431 = sub i32 %430, %125
  %432 = add i32 %431, %126
  %433 = sub i32 %432, %129
  %434 = sub i32 %433, %131
  %435 = sub i32 %434, %132
  %436 = add i32 %435, %136
  %437 = sub i32 %436, %137
  %438 = add i32 %437, %138
  %439 = sub i32 %438, %139
  %440 = sub i32 %439, %140
  %441 = sub i32 %440, %141
  %442 = add i32 %441, %142
  %443 = add i32 %442, %147
  %444 = add i32 %443, %148
  %445 = add i32 %444, %150
  %446 = sub i32 %445, %151
  %447 = add i32 %446, %157
  %448 = add i32 %447, %158
  %449 = sub i32 %448, %160
  %450 = sub i32 %449, %161
  %451 = sub i32 %450, %162
  %452 = add i32 %451, %163
  %453 = add i32 %452, %164
  %454 = add i32 %453, %165
  %455 = sub i32 %454, %167
  %456 = sub i32 %455, %62
  %457 = sub i32 %456, %170
  %458 = add i32 %457, %172
  %459 = add i32 %458, %173
  %460 = add i32 %459, %174
  %461 = add i32 %460, %175
  %462 = sub i32 %461, %176
  %463 = sub i32 %462, %179
  %464 = sub i32 %463, %180
  %465 = sub i32 %464, %181
  %466 = add i32 %465, %184
  %467 = add i32 %466, %185
  %468 = sub i32 %467, %187
  %469 = sub i32 %468, %188
  %470 = sub i32 %469, %189
  %471 = add i32 %470, %191
  %472 = add i32 %471, %192
  %473 = add i32 %472, %195
  %474 = sub i32 %473, %199
  %475 = sub i32 %474, %200
  %476 = sub i32 %475, %201
  %477 = sub i32 %476, %203
  %478 = sub i32 %477, %204
  %479 = add i32 %478, %207
  %480 = add i32 %479, %209
  %481 = sub i32 %480, %210
  %482 = sub i32 %481, %213
  %483 = add i32 %482, %216
  %484 = sub i32 %483, %218
  %485 = add i32 %484, %219
  %486 = add i32 %485, %220
  %487 = add i32 %486, %222
  %488 = add i32 %487, %223
  %489 = add i32 %488, %231
  %490 = add i32 %489, %232
  %491 = add i32 %490, %233
  %492 = add i32 %491, %234
  %493 = sub i32 %492, %241
  %494 = sub i32 %493, %242
  %495 = sub i32 %494, %247
  %496 = sub i32 %495, %248
  %497 = sub i32 %496, %249
  %498 = add i32 %497, %252
  %499 = sub i32 %498, %254
  %500 = add i32 %499, %255
  %501 = add i32 %500, %264
  %502 = add i32 %501, %265
  %503 = add i32 %502, %105
  %504 = add i32 %503, %266
  %505 = add i32 %504, %269
  %506 = add i32 %505, %271
  %507 = sub i32 %506, %272
  %508 = sub i32 %507, %74
  %509 = sub i32 %508, %275
  %510 = sub i32 %509, %276
  %511 = add i32 %510, %279
  %512 = add i32 %511, %281
  %513 = sub i32 %512, %288
  %514 = add i32 %513, %289
  %515 = sub i32 %514, %290
  %516 = sub i32 %515, %294
  %517 = sub i32 %516, %295
  %518 = add i32 %517, %296
  %519 = add i32 %518, %297
  %520 = sub i32 %519, %299
  %521 = sub i32 %520, %301
  %522 = add i32 %521, %302
  %523 = sub i32 %522, %303
  %524 = add i32 %523, %304
  %525 = sub i32 %524, %313
  %526 = add i32 %525, %317
  %527 = sub i32 %526, %11
  %528 = add i32 %527, %16
  %529 = add i32 %528, %50
  %530 = add i32 %529, %63
  %531 = sub i32 %530, %75
  %532 = add i32 %531, %78
  %533 = add i32 %532, %106
  %534 = sub i32 %533, %120
  %535 = add i32 %534, %121
  %536 = sub i32 %535, %128
  %537 = add i32 %536, %135
  %538 = sub i32 %537, %144
  %539 = sub i32 %538, %154
  %540 = sub i32 %539, %155
  %541 = sub i32 %540, %166
  %542 = sub i32 %541, %183
  %543 = sub i32 %542, %194
  %544 = add i32 %543, %206
  %545 = sub i32 %544, %212
  %546 = add i32 %545, %214
  %547 = add i32 %546, %227
  %548 = sub i32 %547, %230
  %549 = sub i32 %548, %236
  %550 = sub i32 %549, %238
  %551 = sub i32 %550, %244
  %552 = sub i32 %551, %246
  %553 = add i32 %552, %251
  %554 = add i32 %553, %256
  %555 = sub i32 %554, %262
  %556 = sub i32 %555, %274
  %557 = add i32 %556, %278
  %558 = sub i32 %557, %280
  %559 = sub i32 %558, %285
  %560 = sub i32 %559, %292
  %561 = sub i32 %560, %300
  %562 = sub i32 %561, %306
  %563 = add i32 %562, %308
  %564 = add i32 %563, %310
  %565 = add i32 %564, %312
  %566 = add i32 %565, %315
  %567 = add i32 %566, %316
  %568 = add i32 %567, %318
  %569 = sub i32 %568, %15
  %570 = sub i32 %569, %90
  %571 = sub i32 %570, %198
  %572 = add i32 %571, %13
  %573 = add i32 %572, %327
  %574 = add i32 %573, %351
  %575 = add i32 %574, %345
  %576 = icmp eq i32 %10, %575
  %577 = select i1 %576, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %578 = tail call i32 @puts(i8* nonnull dereferenceable(1) %577)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
