; ModuleID = '../.././c_source_file/0752_path_condition_crackme.c'
source_filename = "../.././c_source_file/0752_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %0
  %10 = xor i32 %0, -1
  %11 = xor i32 %9, -1
  %12 = and i32 %7, %11
  %13 = and i32 %5, %4
  %14 = xor i32 %13, %3
  %15 = add i32 %14, %12
  %16 = and i32 %1, %0
  %17 = xor i32 %2, -1
  %18 = or i32 %17, %1
  %19 = xor i32 %18, -1
  %20 = or i32 %16, %19
  %21 = or i32 %2, %0
  %22 = and i32 %21, %8
  %23 = xor i32 %1, -1
  %24 = or i32 %23, %0
  %25 = and i32 %9, %24
  %26 = or i32 %16, %17
  %27 = or i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %10
  %30 = and i32 %2, %0
  %31 = and i32 %17, %1
  %32 = xor i32 %31, -1
  %33 = xor i32 %30, %32
  %34 = or i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %2
  %37 = shl i32 %36, 1
  %38 = xor i32 %34, %2
  %39 = xor i32 %24, %2
  %40 = and i32 %24, %17
  %41 = xor i32 %16, -1
  %42 = xor i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %41
  %45 = xor i32 %27, %0
  %46 = and i32 %17, %0
  %47 = xor i32 %46, -1
  %48 = and i32 %7, %47
  %49 = and i32 %42, %0
  %50 = or i32 %30, %23
  %51 = shl i32 %50, 1
  %52 = or i32 %46, %8
  %53 = and i32 %42, %41
  %54 = shl i32 %53, 1
  %55 = xor i32 %46, %1
  %56 = shl i32 %19, 2
  %57 = or i32 %17, %0
  %58 = and i32 %57, %1
  %59 = and i32 %34, %17
  %60 = and i32 %23, %2
  %61 = and i32 %60, %10
  %62 = or i32 %23, %2
  %63 = and i32 %62, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %61, %64
  %66 = and i32 %23, %0
  %67 = or i32 %66, %43
  %68 = and i32 %2, %1
  %69 = xor i32 %68, %0
  %70 = xor i32 %30, %34
  %71 = and i32 %68, %0
  %72 = xor i32 %45, -1
  %73 = xor i32 %71, %72
  %74 = xor i32 %30, %27
  %75 = shl i32 %74, 1
  %76 = and i32 %27, %10
  %77 = or i32 %11, %35
  %78 = shl i32 %77, 1
  %79 = and i32 %11, %41
  %80 = xor i32 %21, -1
  %81 = or i32 %16, %80
  %82 = or i32 %42, %10
  %83 = or i32 %46, %68
  %84 = add i32 %42, 1
  %85 = and i32 %60, %0
  %86 = xor i32 %42, %0
  %87 = xor i32 %86, -1
  %88 = xor i32 %85, %87
  %89 = or i32 %66, %11
  %90 = xor i32 %57, -1
  %91 = or i32 %90, %8
  %92 = shl i32 %91, 1
  %93 = and i32 %32, %10
  %94 = xor i32 %35, %2
  %95 = or i32 %17, %8
  %96 = and i32 %34, %11
  %97 = or i32 %16, %11
  %98 = xor i32 %30, %1
  %99 = and i32 %27, %0
  %100 = and i32 %57, %8
  %101 = shl i32 %100, 1
  %102 = and i32 %9, %41
  %103 = xor i32 %31, %0
  %104 = xor i32 %24, -1
  %105 = or i32 %30, %104
  %106 = or i32 %80, %23
  %107 = and i32 %9, %8
  %108 = or i32 %8, %2
  %109 = shl i32 %108, 1
  %110 = xor i32 %21, %1
  %111 = and i32 %47, %23
  %112 = or i32 %18, %0
  %113 = xor i32 %68, -1
  %114 = or i32 %113, %0
  %115 = xor i32 %62, %10
  %116 = xor i32 %115, %85
  %117 = or i32 %80, %1
  %118 = or i32 %16, %28
  %119 = xor i32 %46, %113
  %120 = and i32 %68, %10
  %121 = or i32 %120, %99
  %122 = or i32 %43, %10
  %123 = or i32 %31, %10
  %124 = xor i32 %66, %32
  %125 = xor i32 %90, %1
  %126 = and i32 %42, %34
  %127 = or i32 %16, %2
  %128 = or i32 %43, %0
  %129 = xor i32 %71, %128
  %130 = or i32 %42, %35
  %131 = or i32 %120, %49
  %132 = or i32 %16, %43
  %133 = or i32 %17, %35
  %134 = xor i32 %32, %0
  %135 = and i32 %7, %2
  %136 = and i32 %9, %7
  %137 = and i32 %43, %10
  %138 = shl i32 %137, 1
  %139 = and i32 %9, %34
  %140 = shl i32 %139, 1
  %141 = xor i32 %104, %2
  %142 = shl i32 %141, 1
  %143 = or i32 %68, %0
  %144 = or i32 %9, %16
  %145 = or i32 %30, %28
  %146 = or i32 %7, %2
  %147 = and i32 %57, %7
  %148 = or i32 %7, %80
  %149 = xor i32 %21, %16
  %150 = add i32 %27, 1
  %151 = and i32 %24, %43
  %152 = or i32 %46, %7
  %153 = xor i32 %30, -1
  %154 = and i32 %153, %23
  %155 = and i32 %8, %2
  %156 = xor i32 %16, %2
  %157 = or i32 %46, %19
  %158 = or i32 %85, %86
  %159 = and i32 %9, %1
  %160 = or i32 %71, %76
  %161 = or i32 %71, %87
  %162 = or i32 %66, %17
  %163 = and i32 %21, %7
  %164 = shl i32 %163, 2
  %165 = or i32 %9, %23
  %166 = or i32 %19, %0
  %167 = shl i32 %166, 1
  %168 = xor i32 %49, -1
  %169 = xor i32 %120, %168
  %170 = add i32 %24, 1
  %171 = and i32 %17, %41
  %172 = or i32 %30, %1
  %173 = shl i32 %172, 1
  %174 = or i32 %7, %17
  %175 = xor i32 %66, -1
  %176 = and i32 %175, %2
  %177 = and i32 %17, %8
  %178 = and i32 %113, %10
  %179 = or i32 %28, %0
  %180 = and i32 %28, %10
  %181 = and i32 %31, %10
  %182 = and i32 %28, %0
  %183 = and i32 %31, %0
  %184 = and i32 %19, %10
  %185 = and i32 %19, %0
  %186 = xor i32 %4, %3
  %187 = xor i32 %186, -1
  %188 = xor i32 %5, %4
  %189 = xor i32 %188, -1
  %190 = or i32 %189, %187
  %191 = or i32 %5, %4
  %192 = xor i32 %191, %3
  %193 = or i32 %5, %3
  %194 = xor i32 %193, -1
  %195 = or i32 %194, %4
  %196 = xor i32 %5, -1
  %197 = or i32 %196, %3
  %198 = or i32 %197, %4
  %199 = and i32 %188, %187
  %200 = xor i32 %3, -1
  %201 = or i32 %200, %4
  %202 = and i32 %196, %3
  %203 = xor i32 %202, %4
  %204 = and i32 %200, %4
  %205 = or i32 %204, %189
  %206 = and i32 %186, %5
  %207 = or i32 %4, %3
  %208 = xor i32 %207, -1
  %209 = or i32 %208, %5
  %210 = or i32 %196, %4
  %211 = and i32 %210, %187
  %212 = xor i32 %201, -1
  %213 = or i32 %212, %5
  %214 = shl i32 %213, 1
  %215 = or i32 %204, %5
  %216 = and i32 %201, %5
  %217 = and i32 %200, %5
  %218 = and i32 %217, %4
  %219 = xor i32 %5, %3
  %220 = or i32 %219, %4
  %221 = xor i32 %220, -1
  %222 = or i32 %218, %221
  %223 = and i32 %193, %4
  %224 = xor i32 %4, -1
  %225 = and i32 %5, %3
  %226 = and i32 %225, %224
  %227 = or i32 %226, %223
  %228 = xor i32 %210, -1
  %229 = or i32 %228, %187
  %230 = and i32 %196, %4
  %231 = xor i32 %230, -1
  %232 = xor i32 %231, %3
  %233 = shl i32 %4, 1
  %234 = and i32 %217, %224
  %235 = or i32 %200, %5
  %236 = and i32 %235, %4
  %237 = xor i32 %236, -1
  %238 = xor i32 %234, %237
  %239 = xor i32 %235, 2147483647
  %240 = or i32 %239, %4
  %241 = xor i32 %240, %218
  %242 = or i32 %225, %224
  %243 = and i32 %186, %189
  %244 = shl i32 %243, 1
  %245 = and i32 %225, %4
  %246 = and i32 %193, %224
  %247 = xor i32 %246, 2147483647
  %248 = xor i32 %247, %245
  %249 = shl i32 %248, 1
  %250 = and i32 %187, %5
  %251 = xor i32 %210, %3
  %252 = or i32 %13, %208
  %253 = shl i32 %252, 1
  %254 = and i32 %4, %3
  %255 = or i32 %254, %189
  %256 = xor i32 %235, %4
  %257 = or i32 %218, %256
  %258 = and i32 %210, %3
  %259 = or i32 %245, %246
  %260 = xor i32 %225, -1
  %261 = xor i32 %204, -1
  %262 = and i32 %188, %261
  %263 = shl i32 %262, 1
  %264 = xor i32 %260, %4
  %265 = add i32 %210, 1
  %266 = xor i32 %219, -1
  %267 = or i32 %266, %208
  %268 = xor i32 %191, -1
  %269 = add i32 %191, 1
  %270 = and i32 %191, %200
  %271 = and i32 %191, %187
  %272 = and i32 %231, %3
  %273 = or i32 %230, %200
  %274 = or i32 %219, %224
  %275 = xor i32 %234, %274
  %276 = shl i32 %275, 1
  %277 = xor i32 %13, %193
  %278 = xor i32 %197, %4
  %279 = or i32 %196, %187
  %280 = and i32 %201, %266
  %281 = or i32 %266, %4
  %282 = xor i32 %204, %260
  %283 = and i32 %266, %4
  %284 = or i32 %188, %204
  %285 = and i32 %231, %200
  %286 = xor i32 %204, %5
  %287 = and i32 %188, %3
  %288 = or i32 %204, %266
  %289 = shl i32 %210, 1
  %290 = or i32 %225, %4
  %291 = or i32 %196, %212
  %292 = xor i32 %13, %207
  %293 = and i32 %260, %224
  %294 = and i32 %266, %261
  %295 = or i32 %268, %3
  %296 = or i32 %13, %3
  %297 = xor i32 %218, %220
  %298 = xor i32 %228, %3
  %299 = and i32 %197, %224
  %300 = and i32 %207, %5
  %301 = xor i32 %197, -1
  %302 = or i32 %254, %301
  %303 = xor i32 %219, %4
  %304 = or i32 %218, %303
  %305 = xor i32 %303, -1
  %306 = or i32 %245, %305
  %307 = xor i32 %193, %4
  %308 = xor i32 %245, -1
  %309 = xor i32 %307, %308
  %310 = or i32 %197, %224
  %311 = xor i32 %191, %254
  %312 = or i32 %202, %4
  %313 = or i32 %186, %228
  %314 = and i32 %207, %189
  %315 = xor i32 %256, -1
  %316 = xor i32 %218, %315
  %317 = shl i32 %191, 2
  %318 = xor i32 %207, %5
  %319 = shl i32 %318, 1
  %320 = or i32 %13, %187
  %321 = or i32 %219, %254
  %322 = or i32 %254, %268
  %323 = or i32 %186, %189
  %324 = xor i32 %13, %201
  %325 = xor i32 %254, -1
  %326 = and i32 %189, %325
  %327 = xor i32 %230, %260
  %328 = xor i32 %266, %4
  %329 = or i32 %260, %4
  %330 = or i32 %186, %196
  %331 = and i32 %201, %189
  %332 = or i32 %188, %187
  %333 = shl i32 %224, 1
  %334 = xor i32 %230, %3
  %335 = xor i32 %261, %5
  %336 = xor i32 %197, %254
  %337 = and i32 %186, %196
  %338 = add i32 %201, 1
  %339 = or i32 %254, %5
  %340 = shl i32 %339, 1
  %341 = and i32 %231, %187
  %342 = xor i32 %13, -1
  %343 = xor i32 %342, %3
  %344 = and i32 %196, %187
  %345 = or i32 %234, %236
  %346 = shl i32 %345, 1
  %347 = or i32 %219, %204
  %348 = and i32 %219, %261
  %349 = xor i32 %202, -1
  %350 = and i32 %349, %4
  %351 = and i32 %325, %5
  %352 = and i32 %186, %231
  %353 = xor i32 %210, %254
  %354 = shl i32 %274, 1
  %355 = and i32 %188, %201
  %356 = or i32 %230, %225
  %357 = or i32 %13, %186
  %358 = xor i32 %13, %349
  %359 = or i32 %254, %194
  %360 = and i32 %210, %186
  %361 = and i32 %191, %3
  %362 = or i32 %204, %196
  %363 = shl i32 %362, 1
  %364 = and i32 %188, %186
  %365 = xor i32 %208, %5
  %366 = or i32 %245, %307
  %367 = xor i32 %194, %4
  %368 = or i32 %194, %224
  %369 = or i32 %188, %212
  %370 = and i32 %188, %207
  %371 = and i32 %207, %266
  %372 = and i32 %197, %4
  %373 = xor i32 %225, %4
  %374 = or i32 %219, %212
  %375 = xor i32 %212, %5
  %376 = and i32 %219, %201
  %377 = shl i32 %376, 1
  %378 = and i32 %189, %3
  %379 = and i32 %188, %325
  %380 = xor i32 %204, %349
  %381 = or i32 %189, %208
  %382 = or i32 %187, %5
  %383 = and i32 %189, %200
  %384 = or i32 %193, %224
  %385 = and i32 %219, %207
  %386 = and i32 %186, %342
  %387 = and i32 %219, %224
  %388 = xor i32 %387, %308
  %389 = and i32 %342, %200
  %390 = or i32 %188, %254
  %391 = xor i32 %268, %3
  %392 = or i32 %13, %194
  %393 = and i32 %219, %4
  %394 = xor i32 %226, -1
  %395 = xor i32 %393, %394
  %396 = or i32 %301, %224
  %397 = or i32 %228, %200
  %398 = or i32 %260, %224
  %399 = shl i32 %398, 2
  %400 = and i32 %266, %224
  %401 = or i32 %266, %224
  %402 = or i32 %245, %387
  %403 = xor i32 %223, %394
  %404 = or i32 %349, %4
  %405 = or i32 %189, %3
  %406 = xor i32 %254, %5
  %407 = add i32 %202, 1
  %408 = or i32 %228, %3
  %409 = or i32 %268, %200
  %410 = or i32 %225, %204
  %411 = or i32 %196, %208
  %412 = xor i32 %218, %305
  %413 = or i32 %13, %202
  %414 = or i32 %189, %200
  %415 = and i32 %196, %261
  %416 = or i32 %13, %212
  %417 = and i32 %189, %187
  %418 = or i32 %226, %393
  %419 = or i32 %188, %208
  %420 = or i32 %230, %187
  %421 = and i32 %188, %200
  %422 = and i32 %342, %3
  %423 = or i32 %266, %212
  %424 = or i32 %13, %200
  %425 = or i32 %254, %266
  %426 = and i32 %260, %4
  %427 = or i32 %186, %5
  %428 = and i32 %194, %224
  %429 = and i32 %202, %224
  %430 = and i32 %194, %4
  %431 = mul i32 %430, -21
  %432 = and i32 %202, %4
  %433 = and i32 %301, %224
  %434 = and i32 %301, %4
  %435 = mul i32 %434, 10
  %436 = mul i32 %245, -17
  %437 = add i32 %133, %162
  %438 = add i32 %437, %68
  %439 = add i32 %438, %11
  %440 = add i32 %439, %148
  %441 = add i32 %440, %126
  %442 = add i32 %441, %125
  %443 = add i32 %442, %111
  %444 = add i32 %443, %99
  %445 = add i32 %444, %52
  %446 = add i32 %445, %44
  %447 = add i32 %446, %29
  %448 = add i32 %447, %196
  %449 = add i32 %448, %194
  %450 = add i32 %449, %344
  %451 = add i32 %450, %300
  %452 = add i32 %451, %209
  %453 = add i32 %452, %400
  %454 = add i32 %453, %381
  %455 = add i32 %454, %369
  %456 = add i32 %455, %347
  %457 = add i32 %456, %332
  %458 = add i32 %457, %320
  %459 = add i32 %458, %271
  %460 = add i32 %459, %270
  %461 = add i32 %460, %264
  %462 = add i32 %461, %258
  %463 = add i32 %462, %255
  %464 = add i32 %463, %232
  %465 = add i32 %464, %195
  %466 = add i32 %465, %241
  %467 = shl i32 %466, 1
  %468 = sub i32 %145, %193
  %469 = add i32 %468, %215
  %470 = sub i32 %469, %429
  %471 = add i32 %470, %425
  %472 = add i32 %471, %418
  %473 = mul i32 %472, 3
  %474 = add i32 %32, %10
  %475 = add i32 %474, %184
  %476 = sub i32 %475, %182
  %477 = sub i32 %476, %123
  %478 = add i32 %477, %366
  %479 = mul i32 %478, 5
  %480 = add i32 %185, %183
  %481 = sub i32 %480, %181
  %482 = mul i32 %481, 7
  %483 = add i32 %226, %428
  %484 = mul i32 %483, -9
  %485 = add i32 %120, 1073741823
  %486 = add i32 %485, %180
  %487 = add i32 %486, %322
  %488 = add i32 %487, %432
  %489 = shl i32 %488, 2
  %490 = add i32 %1, 2
  %491 = add i32 %490, %17
  %492 = add i32 %491, %41
  %493 = sub i32 %492, %2
  %494 = add i32 %493, %170
  %495 = sub i32 %494, %26
  %496 = sub i32 %495, %38
  %497 = sub i32 %496, %39
  %498 = sub i32 %497, %40
  %499 = add i32 %498, %59
  %500 = add i32 %499, %84
  %501 = sub i32 %500, %94
  %502 = sub i32 %501, %95
  %503 = add i32 %502, %127
  %504 = add i32 %503, %90
  %505 = add i32 %504, %135
  %506 = add i32 %505, %146
  %507 = add i32 %506, %150
  %508 = sub i32 %507, %155
  %509 = sub i32 %508, %156
  %510 = sub i32 %509, %57
  %511 = add i32 %510, %18
  %512 = add i32 %511, %171
  %513 = sub i32 %512, %174
  %514 = add i32 %513, %176
  %515 = add i32 %514, %177
  %516 = sub i32 %515, %3
  %517 = add i32 %516, %200
  %518 = add i32 %517, %22
  %519 = add i32 %518, %20
  %520 = add i32 %519, %25
  %521 = sub i32 %520, %33
  %522 = sub i32 %521, %37
  %523 = add i32 %522, %45
  %524 = sub i32 %523, %48
  %525 = add i32 %524, %49
  %526 = add i32 %525, %55
  %527 = sub i32 %526, %56
  %528 = sub i32 %527, %58
  %529 = sub i32 %528, %67
  %530 = add i32 %529, %69
  %531 = add i32 %530, %70
  %532 = sub i32 %531, %76
  %533 = add i32 %532, %79
  %534 = add i32 %533, %81
  %535 = sub i32 %534, %82
  %536 = add i32 %535, %83
  %537 = sub i32 %536, %89
  %538 = add i32 %537, %93
  %539 = add i32 %538, %96
  %540 = add i32 %539, %97
  %541 = sub i32 %540, %98
  %542 = add i32 %541, %102
  %543 = sub i32 %542, %103
  %544 = add i32 %543, %105
  %545 = sub i32 %544, %106
  %546 = sub i32 %545, %107
  %547 = sub i32 %546, %109
  %548 = add i32 %547, %110
  %549 = sub i32 %548, %112
  %550 = add i32 %549, %114
  %551 = sub i32 %550, %117
  %552 = sub i32 %551, %118
  %553 = sub i32 %552, %119
  %554 = sub i32 %553, %122
  %555 = add i32 %554, %124
  %556 = sub i32 %555, %130
  %557 = sub i32 %556, %132
  %558 = add i32 %557, %134
  %559 = add i32 %558, %12
  %560 = sub i32 %559, %136
  %561 = sub i32 %560, %142
  %562 = add i32 %561, %143
  %563 = add i32 %562, %144
  %564 = add i32 %563, %147
  %565 = sub i32 %564, %149
  %566 = sub i32 %565, %151
  %567 = add i32 %566, %152
  %568 = sub i32 %567, %154
  %569 = sub i32 %568, %157
  %570 = add i32 %569, %159
  %571 = sub i32 %570, %165
  %572 = add i32 %571, %86
  %573 = add i32 %572, %178
  %574 = sub i32 %573, %179
  %575 = sub i32 %574, %51
  %576 = sub i32 %575, %54
  %577 = add i32 %576, %65
  %578 = sub i32 %577, %73
  %579 = sub i32 %578, %75
  %580 = sub i32 %579, %78
  %581 = sub i32 %580, %88
  %582 = sub i32 %581, %92
  %583 = sub i32 %582, %101
  %584 = sub i32 %583, %116
  %585 = add i32 %584, %121
  %586 = sub i32 %585, %129
  %587 = add i32 %586, %131
  %588 = sub i32 %587, %138
  %589 = sub i32 %588, %140
  %590 = add i32 %589, %158
  %591 = sub i32 %590, %160
  %592 = sub i32 %591, %161
  %593 = sub i32 %592, %164
  %594 = sub i32 %593, %167
  %595 = add i32 %594, %169
  %596 = sub i32 %595, %173
  %597 = sub i32 %596, %201
  %598 = sub i32 %597, %233
  %599 = sub i32 %598, %5
  %600 = sub i32 %599, %333
  %601 = add i32 %600, %338
  %602 = add i32 %601, %325
  %603 = sub i32 %602, %254
  %604 = sub i32 %603, %186
  %605 = add i32 %604, %206
  %606 = sub i32 %605, %216
  %607 = add i32 %606, %250
  %608 = add i32 %607, %265
  %609 = add i32 %608, %269
  %610 = sub i32 %609, %279
  %611 = add i32 %610, %286
  %612 = add i32 %611, %291
  %613 = sub i32 %612, %202
  %614 = add i32 %613, %231
  %615 = add i32 %614, %330
  %616 = sub i32 %615, %335
  %617 = add i32 %616, %301
  %618 = add i32 %617, %337
  %619 = add i32 %618, %351
  %620 = add i32 %619, %365
  %621 = sub i32 %620, %375
  %622 = sub i32 %621, %382
  %623 = sub i32 %622, %197
  %624 = add i32 %623, %266
  %625 = sub i32 %624, %406
  %626 = add i32 %625, %407
  %627 = add i32 %626, %411
  %628 = sub i32 %627, %415
  %629 = sub i32 %628, %427
  %630 = add i32 %629, %190
  %631 = sub i32 %630, %192
  %632 = add i32 %631, %198
  %633 = add i32 %632, %199
  %634 = add i32 %633, %203
  %635 = add i32 %634, %205
  %636 = sub i32 %635, %211
  %637 = sub i32 %636, %214
  %638 = sub i32 %637, %220
  %639 = add i32 %638, %223
  %640 = sub i32 %639, %229
  %641 = sub i32 %640, %242
  %642 = add i32 %641, %251
  %643 = add i32 %642, %267
  %644 = sub i32 %643, %272
  %645 = add i32 %644, %273
  %646 = sub i32 %645, %277
  %647 = sub i32 %646, %278
  %648 = add i32 %647, %280
  %649 = sub i32 %648, %281
  %650 = sub i32 %649, %282
  %651 = add i32 %650, %283
  %652 = add i32 %651, %246
  %653 = sub i32 %652, %284
  %654 = sub i32 %653, %285
  %655 = sub i32 %654, %287
  %656 = sub i32 %655, %288
  %657 = sub i32 %656, %289
  %658 = sub i32 %657, %290
  %659 = sub i32 %658, %292
  %660 = sub i32 %659, %293
  %661 = add i32 %660, %294
  %662 = add i32 %661, %295
  %663 = sub i32 %662, %296
  %664 = sub i32 %663, %298
  %665 = add i32 %664, %299
  %666 = add i32 %665, %302
  %667 = sub i32 %666, %310
  %668 = add i32 %667, %311
  %669 = add i32 %668, %312
  %670 = add i32 %669, %313
  %671 = sub i32 %670, %314
  %672 = sub i32 %671, %317
  %673 = sub i32 %672, %319
  %674 = add i32 %673, %321
  %675 = sub i32 %674, %323
  %676 = sub i32 %675, %324
  %677 = sub i32 %676, %326
  %678 = sub i32 %677, %327
  %679 = add i32 %678, %328
  %680 = add i32 %679, %329
  %681 = sub i32 %680, %331
  %682 = add i32 %681, %334
  %683 = add i32 %682, %336
  %684 = sub i32 %683, %340
  %685 = sub i32 %684, %341
  %686 = sub i32 %685, %343
  %687 = sub i32 %686, %348
  %688 = sub i32 %687, %350
  %689 = add i32 %688, %352
  %690 = add i32 %689, %353
  %691 = add i32 %690, %355
  %692 = sub i32 %691, %356
  %693 = sub i32 %692, %357
  %694 = add i32 %693, %358
  %695 = add i32 %694, %359
  %696 = add i32 %695, %360
  %697 = add i32 %696, %361
  %698 = sub i32 %697, %363
  %699 = add i32 %698, %364
  %700 = sub i32 %699, %367
  %701 = sub i32 %700, %368
  %702 = add i32 %701, %370
  %703 = add i32 %702, %371
  %704 = sub i32 %703, %372
  %705 = add i32 %704, %373
  %706 = add i32 %705, %374
  %707 = add i32 %706, %378
  %708 = add i32 %707, %379
  %709 = sub i32 %708, %380
  %710 = add i32 %709, %383
  %711 = add i32 %710, %384
  %712 = add i32 %711, %385
  %713 = add i32 %712, %386
  %714 = add i32 %713, %389
  %715 = sub i32 %714, %390
  %716 = add i32 %715, %391
  %717 = sub i32 %716, %392
  %718 = add i32 %717, %396
  %719 = add i32 %718, %397
  %720 = add i32 %719, %401
  %721 = sub i32 %720, %404
  %722 = sub i32 %721, %387
  %723 = sub i32 %722, %405
  %724 = add i32 %723, %408
  %725 = sub i32 %724, %409
  %726 = add i32 %725, %410
  %727 = add i32 %726, %413
  %728 = sub i32 %727, %414
  %729 = add i32 %728, %416
  %730 = add i32 %729, %417
  %731 = add i32 %730, %419
  %732 = sub i32 %731, %420
  %733 = add i32 %732, %421
  %734 = sub i32 %733, %422
  %735 = add i32 %734, %423
  %736 = sub i32 %735, %424
  %737 = add i32 %736, %426
  %738 = add i32 %737, %433
  %739 = add i32 %738, %482
  %740 = sub i32 %739, %222
  %741 = add i32 %740, %227
  %742 = sub i32 %741, %238
  %743 = sub i32 %742, %244
  %744 = sub i32 %743, %253
  %745 = add i32 %744, %257
  %746 = add i32 %745, %259
  %747 = sub i32 %746, %263
  %748 = add i32 %747, %297
  %749 = sub i32 %748, %304
  %750 = sub i32 %749, %306
  %751 = sub i32 %750, %309
  %752 = add i32 %751, %316
  %753 = sub i32 %752, %354
  %754 = sub i32 %753, %377
  %755 = sub i32 %754, %388
  %756 = add i32 %755, %395
  %757 = sub i32 %756, %399
  %758 = add i32 %757, %402
  %759 = sub i32 %758, %403
  %760 = sub i32 %759, %412
  %761 = add i32 %760, %431
  %762 = add i32 %761, %435
  %763 = add i32 %762, %436
  %764 = sub i32 %763, %276
  %765 = sub i32 %764, %346
  %766 = add i32 %765, %484
  %767 = sub i32 %766, %249
  %768 = add i32 %767, %489
  %769 = add i32 %768, %473
  %770 = add i32 %769, %479
  %771 = add i32 %770, %467
  %772 = icmp eq i32 %15, %771
  %773 = select i1 %772, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %774 = tail call i32 @puts(i8* nonnull dereferenceable(1) %773)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
