digraph "DFG for'crackme' function" {
	Node0x1cc5b00[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x1cc5b70[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x1cc5c30[shape=record, label="  %5 = add i32 %4, %3"];
	Node0x1cc5ca0[shape=record, label="  %6 = add i32 %4, 1"];
	Node0x1cc5d10[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0x1cc5d80[shape=record, label="  %8 = sub i32 %6, %7"];
	Node0x1cc5df0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1cc5e60[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1cc5f00[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x1cc5f70[shape=record, label="  %12 = xor i32 %1, -1"];
	Node0x1cc6010[shape=record, label="  %13 = xor i32 %0, 1073741823"];
	Node0x1cc6080[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x1cc6120[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0x1cc6190[shape=record, label="  %16 = and i32 %12, %0"];
	Node0x1cc6200[shape=record, label="  %17 = and i32 %1, %0"];
	Node0x1cc62a0[shape=record, label="  %18 = mul i32 %17, 3"];
	Node0x1cc6310[shape=record, label="  %19 = add i32 %8, %16"];
	Node0x1cc6380[shape=record, label="  %20 = add i32 %19, %15"];
	Node0x1cc63f0[shape=record, label="  %21 = add i32 %20, %18"];
	Node0x1cc6460[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x1cc64d0[shape=record, label="  %23 = icmp eq i32 %5, %22"];
	Node0x1c66268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1cc6970[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1cc69c0[shape=record, label="  ret void"];
	Node0x1cc5b00 -> Node0x1cc5b70;
	Node0x1cc5b70 -> Node0x1cc5c30;
	Node0x1cc5c30 -> Node0x1cc5ca0;
	Node0x1cc5ca0 -> Node0x1cc5d10;
	Node0x1cc5d10 -> Node0x1cc5d80;
	Node0x1cc5d80 -> Node0x1cc5df0;
	Node0x1cc5df0 -> Node0x1cc5e60;
	Node0x1cc5e60 -> Node0x1cc5f00;
	Node0x1cc5f00 -> Node0x1cc5f70;
	Node0x1cc5f70 -> Node0x1cc6010;
	Node0x1cc6010 -> Node0x1cc6080;
	Node0x1cc6080 -> Node0x1cc6120;
	Node0x1cc6120 -> Node0x1cc6190;
	Node0x1cc6190 -> Node0x1cc6200;
	Node0x1cc6200 -> Node0x1cc62a0;
	Node0x1cc62a0 -> Node0x1cc6310;
	Node0x1cc6310 -> Node0x1cc6380;
	Node0x1cc6380 -> Node0x1cc63f0;
	Node0x1cc63f0 -> Node0x1cc6460;
	Node0x1cc6460 -> Node0x1cc64d0;
	Node0x1cc64d0 -> Node0x1c66268;
	Node0x1c66268 -> Node0x1cc6970;
	Node0x1cc6970 -> Node0x1cc69c0;
edge [color=red]
	Node0x1cc5b70 -> Node0x1cc5c30;
	Node0x1cc5b00 -> Node0x1cc5c30;
	Node0x1cc5b70 -> Node0x1cc5ca0;
	Node0x1cc5ca0 -> Node0x1cc5d80;
	Node0x1cc5d10 -> Node0x1cc5d80;
	Node0x1cc5df0 -> Node0x1cc5e60;
	Node0x1cc5e60 -> Node0x1cc5f00;
	Node0x1cc6010 -> Node0x1cc6080;
	Node0x1cc6080 -> Node0x1cc6120;
	Node0x1cc5f70 -> Node0x1cc6190;
	Node0x1cc6200 -> Node0x1cc62a0;
	Node0x1cc5d80 -> Node0x1cc6310;
	Node0x1cc6190 -> Node0x1cc6310;
	Node0x1cc6310 -> Node0x1cc6380;
	Node0x1cc6120 -> Node0x1cc6380;
	Node0x1cc6380 -> Node0x1cc63f0;
	Node0x1cc62a0 -> Node0x1cc63f0;
	Node0x1cc63f0 -> Node0x1cc6460;
	Node0x1cc5f00 -> Node0x1cc6460;
	Node0x1cc5c30 -> Node0x1cc64d0;
	Node0x1cc6460 -> Node0x1cc64d0;
	Node0x1cc64d0 -> Node0x1c66268;
	Node0x1c66268 -> Node0x1cc6970;
}
