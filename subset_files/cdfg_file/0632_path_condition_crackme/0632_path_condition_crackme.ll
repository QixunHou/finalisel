; ModuleID = '../.././c_source_file/0632_path_condition_crackme.c'
source_filename = "../.././c_source_file/0632_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = mul i32 %7, -2
  %9 = and i32 %2, %0
  %10 = xor i32 %9, %1
  %11 = xor i32 %1, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %2, %0
  %14 = and i32 %13, %12
  %15 = sub i32 %10, %14
  %16 = add i32 %15, %8
  %17 = xor i32 %4, -1
  %18 = and i32 %17, %3
  %19 = add i32 %18, 1
  %20 = and i32 %4, %3
  %21 = shl i32 %20, 2
  %22 = xor i32 %21, -4
  %23 = shl i32 %3, 1
  %24 = xor i32 %23, -2
  %25 = or i32 %17, %3
  %26 = shl i32 %4, 1
  %27 = or i32 %4, %3
  %28 = shl i32 %27, 2
  %29 = xor i32 %28, -4
  %30 = xor i32 %25, -1
  %31 = mul i32 %30, 7
  %32 = and i32 %2, %1
  %33 = and i32 %32, %0
  %34 = xor i32 %2, %1
  %35 = xor i32 %34, %0
  %36 = xor i32 %33, %35
  %37 = or i32 %2, %1
  %38 = and i32 %37, %0
  %39 = xor i32 %2, -1
  %40 = and i32 %39, %1
  %41 = xor i32 %40, -1
  %42 = xor i32 %9, %41
  %43 = xor i32 %1, -1
  %44 = and i32 %43, %2
  %45 = and i32 %44, %0
  %46 = xor i32 %35, -1
  %47 = xor i32 %45, %46
  %48 = and i32 %43, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %34, -1
  %51 = and i32 %50, %49
  %52 = or i32 %41, %0
  %53 = xor i32 %0, -1
  %54 = or i32 %39, %1
  %55 = and i32 %54, %53
  %56 = xor i32 %41, %0
  %57 = xor i32 %9, -1
  %58 = xor i32 %57, %1
  %59 = or i32 %43, %0
  %60 = and i32 %34, %59
  %61 = or i32 %2, %0
  %62 = and i32 %61, %43
  %63 = and i32 %39, %49
  %64 = xor i32 %54, -1
  %65 = or i32 %64, %53
  %66 = and i32 %13, %11
  %67 = and i32 %13, %43
  %68 = xor i32 %61, -1
  %69 = or i32 %68, %43
  %70 = or i32 %33, %46
  %71 = or i32 %1, %0
  %72 = xor i32 %71, -1
  %73 = or i32 %34, %72
  %74 = or i32 %11, %39
  %75 = and i32 %50, %53
  %76 = xor i32 %13, -1
  %77 = and i32 %59, %76
  %78 = xor i32 %37, -1
  %79 = or i32 %9, %78
  %80 = and i32 %1, %0
  %81 = xor i32 %61, %80
  %82 = or i32 %50, %53
  %83 = xor i32 %37, %0
  %84 = and i32 %61, %12
  %85 = and i32 %59, %50
  %86 = and i32 %71, %2
  %87 = or i32 %54, %53
  %88 = xor i32 %50, %0
  %89 = shl i32 %88, 2
  %90 = and i32 %34, %49
  %91 = and i32 %76, %12
  %92 = and i32 %61, %11
  %93 = or i32 %9, %11
  %94 = or i32 %37, %53
  %95 = shl i32 %94, 1
  %96 = xor i32 %59, -1
  %97 = or i32 %76, %96
  %98 = or i32 %80, %64
  %99 = or i32 %78, %53
  %100 = xor i32 %80, -1
  %101 = and i32 %50, %100
  %102 = and i32 %11, %39
  %103 = or i32 %96, %2
  %104 = or i32 %39, %0
  %105 = xor i32 %104, -1
  %106 = or i32 %11, %105
  %107 = or i32 %12, %2
  %108 = and i32 %44, %53
  %109 = or i32 %43, %2
  %110 = and i32 %109, %0
  %111 = or i32 %108, %110
  %112 = and i32 %39, %0
  %113 = xor i32 %32, -1
  %114 = xor i32 %112, %113
  %115 = and i32 %104, %11
  %116 = shl i32 %115, 1
  %117 = or i32 %112, %12
  %118 = add i32 %59, 1
  %119 = xor i32 %100, %2
  %120 = or i32 %39, %72
  %121 = shl i32 %120, 2
  %122 = xor i32 %80, %2
  %123 = or i32 %113, %0
  %124 = or i32 %64, %0
  %125 = and i32 %71, %39
  %126 = xor i32 %110, 2147483647
  %127 = xor i32 %126, %108
  %128 = shl i32 %127, 1
  %129 = or i32 %105, %43
  %130 = or i32 %11, %2
  %131 = or i32 %48, %50
  %132 = or i32 %32, %53
  %133 = or i32 %50, %72
  %134 = or i32 %9, %12
  %135 = or i32 %112, %11
  %136 = or i32 %48, %2
  %137 = or i32 %40, %53
  %138 = or i32 %9, %1
  %139 = or i32 %13, %1
  %140 = or i32 %39, %96
  %141 = and i32 %109, %53
  %142 = or i32 %45, %141
  %143 = and i32 %76, %49
  %144 = and i32 %34, %53
  %145 = xor i32 %105, %1
  %146 = and i32 %34, %0
  %147 = xor i32 %104, %80
  %148 = and i32 %32, %53
  %149 = xor i32 %148, 2147483647
  %150 = xor i32 %149, %146
  %151 = shl i32 %150, 1
  %152 = xor i32 %112, -1
  %153 = and i32 %152, %43
  %154 = or i32 %148, %146
  %155 = add i32 %48, 1
  %156 = and i32 %34, %100
  %157 = shl i32 %156, 1
  %158 = xor i32 %68, %1
  %159 = or i32 %40, %48
  %160 = xor i32 %113, %0
  %161 = or i32 %34, %0
  %162 = xor i32 %45, %161
  %163 = xor i32 %104, %1
  %164 = and i32 %61, %1
  %165 = or i32 %13, %12
  %166 = or i32 %40, %0
  %167 = or i32 %80, %50
  %168 = and i32 %37, %53
  %169 = or i32 %33, %168
  %170 = or i32 %50, %96
  %171 = shl i32 %152, 1
  %172 = and i32 %34, %71
  %173 = add i32 %40, 1
  %174 = or i32 %33, %83
  %175 = and i32 %57, %1
  %176 = xor i32 %45, -1
  %177 = xor i32 %141, %176
  %178 = or i32 %13, %48
  %179 = or i32 %76, %12
  %180 = shl i32 %179, 2
  %181 = xor i32 %78, %0
  %182 = or i32 %68, %12
  %183 = or i32 %11, %76
  %184 = and i32 %11, %2
  %185 = shl i32 %184, 1
  %186 = and i32 %100, %2
  %187 = xor i32 %61, %1
  %188 = xor i32 %72, %2
  %189 = or i32 %13, %96
  %190 = xor i32 %152, %1
  %191 = and i32 %57, %43
  %192 = shl i32 %191, 1
  %193 = and i32 %104, %1
  %194 = or i32 %76, %1
  %195 = add i32 %0, 1
  %196 = and i32 %104, %12
  %197 = shl i32 %112, 1
  %198 = shl i32 %12, 1
  %199 = and i32 %41, %53
  %200 = and i32 %41, %0
  %201 = or i32 %112, %64
  %202 = or i32 %34, %48
  %203 = xor i32 %48, %41
  %204 = or i32 %13, %72
  %205 = or i32 %48, %39
  %206 = xor i32 %149, %38
  %207 = or i32 %76, %43
  %208 = xor i32 %161, -1
  %209 = or i32 %45, %208
  %210 = and i32 %76, %1
  %211 = shl i32 %9, 1
  %212 = or i32 %148, %38
  %213 = xor i32 %64, %0
  %214 = or i32 %72, %2
  %215 = xor i32 %109, %53
  %216 = xor i32 %215, %45
  %217 = or i32 %105, %1
  %218 = xor i32 %71, %2
  %219 = and i32 %50, %0
  %220 = or i32 %108, %219
  %221 = or i32 %13, %11
  %222 = and i32 %49, %2
  %223 = xor i32 %48, %2
  %224 = and i32 %39, %100
  %225 = or i32 %113, %53
  %226 = xor i32 %37, %80
  %227 = or i32 %9, %43
  %228 = or i32 %76, %72
  %229 = xor i32 %9, %37
  %230 = or i32 %54, %0
  %231 = shl i32 %230, 1
  %232 = and i32 %11, %152
  %233 = or i32 %9, %96
  %234 = or i32 %80, %78
  %235 = or i32 %78, %0
  %236 = and i32 %113, %53
  %237 = and i32 %13, %1
  %238 = xor i32 %54, %0
  %239 = and i32 %59, %39
  %240 = or i32 %34, %80
  %241 = and i32 %78, %53
  %242 = and i32 %40, %53
  %243 = mul i32 %242, 12
  %244 = and i32 %78, %0
  %245 = shl i32 %244, 1
  %246 = and i32 %40, %0
  %247 = shl i32 %246, 3
  %248 = and i32 %64, %53
  %249 = mul i32 %248, 11
  %250 = and i32 %64, %0
  %251 = mul i32 %33, -21
  %252 = add i32 %223, %0
  %253 = add i32 %252, %140
  %254 = add i32 %253, %113
  %255 = add i32 %254, %76
  %256 = add i32 %255, %236
  %257 = add i32 %256, %217
  %258 = add i32 %257, %213
  %259 = add i32 %258, %204
  %260 = add i32 %259, %175
  %261 = add i32 %260, %167
  %262 = add i32 %261, %153
  %263 = add i32 %262, %97
  %264 = add i32 %263, %85
  %265 = add i32 %264, %75
  %266 = add i32 %265, %62
  %267 = add i32 %266, %51
  %268 = add i32 %267, %38
  %269 = add i32 %268, %70
  %270 = add i32 %269, %206
  %271 = shl i32 %270, 1
  %272 = add i32 %241, %195
  %273 = sub i32 %272, %199
  %274 = add i32 %273, %183
  %275 = sub i32 %274, %135
  %276 = add i32 %275, %19
  %277 = mul i32 %276, 5
  %278 = sub i32 %98, %207
  %279 = add i32 %278, %154
  %280 = add i32 %279, %209
  %281 = mul i32 %280, 3
  %282 = sub i32 %20, %250
  %283 = mul i32 %282, 6
  %284 = add i32 %1, 2
  %285 = add i32 %284, %2
  %286 = add i32 %285, %80
  %287 = sub i32 %286, %48
  %288 = add i32 %287, %118
  %289 = add i32 %288, %155
  %290 = add i32 %289, %59
  %291 = add i32 %290, %3
  %292 = add i32 %291, %63
  %293 = sub i32 %292, %40
  %294 = sub i32 %293, %74
  %295 = sub i32 %294, %86
  %296 = add i32 %295, %50
  %297 = sub i32 %296, %102
  %298 = add i32 %297, %103
  %299 = sub i32 %298, %107
  %300 = sub i32 %299, %34
  %301 = sub i32 %300, %119
  %302 = sub i32 %301, %122
  %303 = sub i32 %302, %125
  %304 = add i32 %303, %130
  %305 = add i32 %304, %136
  %306 = add i32 %305, %104
  %307 = sub i32 %306, %61
  %308 = add i32 %307, %68
  %309 = add i32 %308, %173
  %310 = add i32 %309, %186
  %311 = add i32 %310, %188
  %312 = sub i32 %311, %198
  %313 = sub i32 %312, %205
  %314 = sub i32 %313, %214
  %315 = sub i32 %314, %218
  %316 = sub i32 %315, %222
  %317 = add i32 %316, %224
  %318 = sub i32 %317, %239
  %319 = add i32 %318, %4
  %320 = add i32 %319, %42
  %321 = add i32 %320, %52
  %322 = add i32 %321, %55
  %323 = add i32 %322, %56
  %324 = sub i32 %323, %58
  %325 = sub i32 %324, %60
  %326 = sub i32 %325, %65
  %327 = add i32 %326, %66
  %328 = add i32 %327, %67
  %329 = add i32 %328, %69
  %330 = add i32 %329, %73
  %331 = add i32 %330, %77
  %332 = add i32 %331, %79
  %333 = sub i32 %332, %81
  %334 = add i32 %333, %82
  %335 = sub i32 %334, %83
  %336 = sub i32 %335, %84
  %337 = add i32 %336, %87
  %338 = sub i32 %337, %90
  %339 = add i32 %338, %91
  %340 = add i32 %339, %92
  %341 = add i32 %340, %93
  %342 = add i32 %341, %99
  %343 = sub i32 %342, %101
  %344 = sub i32 %343, %106
  %345 = add i32 %344, %114
  %346 = sub i32 %345, %117
  %347 = sub i32 %346, %121
  %348 = sub i32 %347, %123
  %349 = sub i32 %348, %124
  %350 = sub i32 %349, %129
  %351 = add i32 %350, %131
  %352 = sub i32 %351, %132
  %353 = sub i32 %352, %133
  %354 = add i32 %353, %134
  %355 = add i32 %354, %137
  %356 = add i32 %355, %138
  %357 = sub i32 %356, %139
  %358 = sub i32 %357, %143
  %359 = add i32 %358, %144
  %360 = sub i32 %359, %145
  %361 = add i32 %360, %146
  %362 = sub i32 %361, %147
  %363 = sub i32 %362, %158
  %364 = sub i32 %363, %159
  %365 = sub i32 %364, %160
  %366 = sub i32 %365, %163
  %367 = sub i32 %366, %164
  %368 = sub i32 %367, %165
  %369 = add i32 %368, %166
  %370 = sub i32 %369, %170
  %371 = sub i32 %370, %171
  %372 = add i32 %371, %172
  %373 = sub i32 %372, %178
  %374 = sub i32 %373, %181
  %375 = sub i32 %374, %182
  %376 = sub i32 %375, %185
  %377 = add i32 %376, %187
  %378 = sub i32 %377, %189
  %379 = add i32 %378, %190
  %380 = sub i32 %379, %193
  %381 = add i32 %380, %194
  %382 = add i32 %381, %196
  %383 = sub i32 %382, %197
  %384 = add i32 %383, %200
  %385 = add i32 %384, %201
  %386 = add i32 %385, %202
  %387 = add i32 %386, %203
  %388 = add i32 %387, %210
  %389 = sub i32 %388, %211
  %390 = sub i32 %389, %221
  %391 = sub i32 %390, %225
  %392 = add i32 %391, %226
  %393 = sub i32 %392, %227
  %394 = add i32 %393, %228
  %395 = sub i32 %394, %229
  %396 = sub i32 %395, %232
  %397 = add i32 %396, %233
  %398 = add i32 %397, %234
  %399 = sub i32 %398, %235
  %400 = add i32 %399, %237
  %401 = sub i32 %400, %238
  %402 = add i32 %401, %240
  %403 = add i32 %402, %148
  %404 = sub i32 %403, %24
  %405 = sub i32 %404, %25
  %406 = sub i32 %405, %6
  %407 = sub i32 %406, %26
  %408 = sub i32 %407, %18
  %409 = add i32 %408, %36
  %410 = sub i32 %409, %47
  %411 = sub i32 %410, %89
  %412 = sub i32 %411, %95
  %413 = add i32 %412, %111
  %414 = sub i32 %413, %116
  %415 = add i32 %414, %142
  %416 = sub i32 %415, %157
  %417 = add i32 %416, %162
  %418 = add i32 %417, %169
  %419 = add i32 %418, %174
  %420 = add i32 %419, %177
  %421 = sub i32 %420, %180
  %422 = sub i32 %421, %192
  %423 = add i32 %422, %212
  %424 = add i32 %423, %216
  %425 = add i32 %424, %220
  %426 = sub i32 %425, %231
  %427 = add i32 %426, %243
  %428 = sub i32 %427, %245
  %429 = add i32 %428, %247
  %430 = add i32 %429, %249
  %431 = add i32 %430, %251
  %432 = add i32 %431, %31
  %433 = add i32 %432, %22
  %434 = add i32 %433, %29
  %435 = sub i32 %434, %128
  %436 = sub i32 %435, %151
  %437 = add i32 %436, %283
  %438 = add i32 %437, %281
  %439 = add i32 %438, %277
  %440 = add i32 %439, %271
  %441 = icmp eq i32 %16, %440
  %442 = select i1 %441, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %443 = tail call i32 @puts(i8* nonnull dereferenceable(1) %442)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
