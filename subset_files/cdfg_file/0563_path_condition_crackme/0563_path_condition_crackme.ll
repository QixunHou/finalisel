; ModuleID = '../.././c_source_file/0563_path_condition_crackme.c'
source_filename = "../.././c_source_file/0563_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = shl i32 %3, 1
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %0
  %10 = and i32 %9, %8
  %11 = add i32 %6, %10
  %12 = xor i32 %0, -1
  %13 = xor i32 %2, -1
  %14 = or i32 %13, %1
  %15 = or i32 %14, %12
  %16 = sub i32 %11, %15
  %17 = xor i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %4, -1
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -1
  %22 = xor i32 %3, 2147483647
  %23 = and i32 %22, %4
  %24 = and i32 %19, %3
  %25 = and i32 %4, %3
  %26 = and i32 %13, %0
  %27 = or i32 %26, %7
  %28 = or i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %9, %29
  %31 = xor i32 %26, -1
  %32 = and i32 %7, %31
  %33 = xor i32 %2, %1
  %34 = and i32 %33, %28
  %35 = xor i32 %9, -1
  %36 = and i32 %7, %35
  %37 = or i32 %13, %0
  %38 = xor i32 %37, -1
  %39 = xor i32 %38, %1
  %40 = xor i32 %26, %14
  %41 = xor i32 %1, -1
  %42 = or i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %41
  %45 = or i32 %2, %1
  %46 = xor i32 %45, %0
  %47 = and i32 %14, %0
  %48 = xor i32 %14, -1
  %49 = or i32 %26, %48
  %50 = shl i32 %49, 1
  %51 = and i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = xor i32 %52, %0
  %54 = and i32 %41, %2
  %55 = and i32 %54, %0
  %56 = xor i32 %33, %0
  %57 = or i32 %55, %56
  %58 = and i32 %42, %1
  %59 = xor i32 %33, -1
  %60 = and i32 %59, %12
  %61 = or i32 %41, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %9, %62
  %64 = and i32 %61, %13
  %65 = shl i32 %64, 1
  %66 = and i32 %41, %0
  %67 = or i32 %66, %35
  %68 = and i32 %51, %0
  %69 = xor i32 %68, 2147483647
  %70 = xor i32 %69, %46
  %71 = shl i32 %70, 1
  %72 = and i32 %37, %41
  %73 = and i32 %2, %0
  %74 = xor i32 %73, -1
  %75 = and i32 %7, %74
  %76 = or i32 %7, %2
  %77 = and i32 %1, %0
  %78 = xor i32 %42, %77
  %79 = and i32 %31, %1
  %80 = and i32 %45, %12
  %81 = or i32 %68, %80
  %82 = or i32 %33, %77
  %83 = or i32 %9, %1
  %84 = xor i32 %66, -1
  %85 = add i32 %66, 1
  %86 = xor i32 %48, %0
  %87 = and i32 %51, %12
  %88 = and i32 %45, %0
  %89 = xor i32 %88, -1
  %90 = xor i32 %87, %89
  %91 = and i32 %14, %12
  %92 = or i32 %8, %2
  %93 = or i32 %73, %29
  %94 = and i32 %54, %12
  %95 = or i32 %41, %2
  %96 = and i32 %95, %0
  %97 = or i32 %94, %96
  %98 = xor i32 %73, %28
  %99 = or i32 %52, %0
  %100 = and i32 %33, %84
  %101 = and i32 %31, %8
  %102 = xor i32 %77, -1
  %103 = shl i32 %102, 1
  %104 = and i32 %59, %0
  %105 = and i32 %9, %41
  %106 = or i32 %73, %8
  %107 = xor i32 %37, %77
  %108 = shl i32 %7, 1
  %109 = add i32 %7, 1
  %110 = or i32 %77, %48
  %111 = and i32 %59, %102
  %112 = and i32 %102, %2
  %113 = or i32 %59, %12
  %114 = shl i32 %113, 1
  %115 = xor i32 %28, %2
  %116 = or i32 %26, %41
  %117 = and i32 %42, %7
  %118 = xor i32 %14, %77
  %119 = or i32 %14, %0
  %120 = and i32 %35, %102
  %121 = and i32 %13, %1
  %122 = xor i32 %121, -1
  %123 = add i32 %121, 1
  %124 = xor i32 %66, %122
  %125 = and i32 %9, %102
  %126 = xor i32 %69, %80
  %127 = shl i32 %126, 1
  %128 = or i32 %33, %12
  %129 = xor i32 %94, %128
  %130 = or i32 %7, %38
  %131 = or i32 %38, %1
  %132 = shl i32 %131, 1
  %133 = xor i32 %121, %0
  %134 = xor i32 %68, %56
  %135 = or i32 %121, %12
  %136 = or i32 %59, %29
  %137 = shl i32 %41, 1
  %138 = or i32 %13, %62
  %139 = or i32 %77, %13
  %140 = and i32 %61, %35
  %141 = xor i32 %45, -1
  %142 = or i32 %73, %141
  %143 = xor i32 %51, %0
  %144 = and i32 %9, %7
  %145 = add i32 %37, 1
  %146 = and i32 %13, %8
  %147 = or i32 %122, %12
  %148 = and i32 %33, %0
  %149 = xor i32 %84, %2
  %150 = shl i32 %149, 1
  %151 = or i32 %73, %41
  %152 = xor i32 %66, %2
  %153 = or i32 %73, %62
  %154 = xor i32 %128, 2147483647
  %155 = or i32 %154, %94
  %156 = shl i32 %155, 1
  %157 = or i32 %87, %148
  %158 = or i32 %7, %13
  %159 = or i32 %77, %2
  %160 = or i32 %26, %51
  %161 = or i32 %9, %8
  %162 = or i32 %66, %59
  %163 = and i32 %37, %1
  %164 = and i32 %28, %13
  %165 = or i32 %33, %0
  %166 = xor i32 %165, -1
  %167 = or i32 %55, %166
  %168 = or i32 %45, %12
  %169 = shl i32 %168, 2
  %170 = xor i32 %43, %1
  %171 = and i32 %33, %61
  %172 = or i32 %35, %62
  %173 = or i32 %73, %1
  %174 = and i32 %33, %12
  %175 = or i32 %121, %66
  %176 = shl i32 %175, 1
  %177 = xor i32 %66, %52
  %178 = and i32 %13, %84
  %179 = or i32 %122, %0
  %180 = and i32 %95, %12
  %181 = or i32 %55, %180
  %182 = shl i32 %181, 1
  %183 = or i32 %33, %66
  %184 = or i32 %35, %41
  %185 = and i32 %7, %2
  %186 = and i32 %9, %84
  %187 = and i32 %42, %41
  %188 = or i32 %59, %62
  %189 = or i32 %9, %41
  %190 = xor i32 %56, -1
  %191 = or i32 %68, %190
  %192 = xor i32 %102, %2
  %193 = and i32 %35, %1
  %194 = or i32 %51, %66
  %195 = xor i32 %14, %0
  %196 = or i32 %45, %0
  %197 = xor i32 %31, %1
  %198 = xor i32 %122, %0
  %199 = xor i32 %73, %45
  %200 = or i32 %52, %12
  %201 = xor i32 %96, -1
  %202 = xor i32 %94, %201
  %203 = or i32 %9, %66
  %204 = and i32 %9, %61
  %205 = and i32 %122, %0
  %206 = or i32 %7, %35
  %207 = and i32 %28, %2
  %208 = or i32 %77, %43
  %209 = or i32 %51, %0
  %210 = and i32 %37, %8
  %211 = and i32 %28, %59
  %212 = or i32 %13, %8
  %213 = xor i32 %73, %61
  %214 = and i32 %61, %2
  %215 = xor i32 %59, %0
  %216 = or i32 %68, %174
  %217 = or i32 %73, %121
  %218 = and i32 %7, %13
  %219 = xor i32 %141, %0
  %220 = or i32 %29, %2
  %221 = shl i32 %220, 1
  %222 = xor i32 %77, %2
  %223 = or i32 %26, %8
  %224 = xor i32 %180, -1
  %225 = xor i32 %55, %224
  %226 = and i32 %74, %1
  %227 = or i32 %9, %77
  %228 = and i32 %42, %8
  %229 = shl i32 %228, 1
  %230 = xor i32 %74, %1
  %231 = add i32 %33, 1
  %232 = or i32 %35, %1
  %233 = or i32 %48, %12
  %234 = and i32 %59, %84
  %235 = shl i32 %234, 1
  %236 = or i32 %51, %12
  %237 = and i32 %74, %41
  %238 = and i32 %33, %102
  %239 = and i32 %52, %0
  %240 = or i32 %7, %43
  %241 = shl i32 %240, 1
  %242 = or i32 %73, %7
  %243 = and i32 %141, %12
  %244 = mul i32 %243, -10
  %245 = and i32 %121, %12
  %246 = mul i32 %245, -27
  %247 = and i32 %141, %0
  %248 = shl i32 %247, 4
  %249 = and i32 %121, %0
  %250 = and i32 %48, %12
  %251 = mul i32 %87, -17
  %252 = and i32 %48, %0
  %253 = mul i32 %252, -18
  %254 = mul i32 %68, -21
  %255 = add i32 %212, %0
  %256 = add i32 %255, %31
  %257 = add i32 %256, %92
  %258 = add i32 %257, %230
  %259 = add i32 %258, %211
  %260 = add i32 %259, %200
  %261 = add i32 %260, %198
  %262 = add i32 %261, %179
  %263 = add i32 %262, %177
  %264 = add i32 %263, %162
  %265 = add i32 %264, %160
  %266 = add i32 %265, %144
  %267 = add i32 %266, %140
  %268 = add i32 %267, %105
  %269 = add i32 %268, %98
  %270 = add i32 %269, %79
  %271 = add i32 %270, %78
  %272 = add i32 %271, %72
  %273 = add i32 %272, %44
  %274 = add i32 %273, %34
  %275 = add i32 %274, %32
  %276 = sub i32 %275, %4
  %277 = add i32 %276, %25
  %278 = add i32 %277, %216
  %279 = add i32 %278, %23
  %280 = shl i32 %279, 1
  %281 = sub i32 %222, %152
  %282 = sub i32 %281, %209
  %283 = add i32 %282, %40
  %284 = add i32 %283, %57
  %285 = mul i32 %284, 3
  %286 = add i32 %143, %62
  %287 = sub i32 %286, %110
  %288 = add i32 %287, %81
  %289 = add i32 %288, %97
  %290 = mul i32 %289, 5
  %291 = add i32 %147, %249
  %292 = add i32 %291, %120
  %293 = add i32 %292, %24
  %294 = shl i32 %293, 2
  %295 = sub i32 3, %0
  %296 = sub i32 %295, %2
  %297 = add i32 %296, %85
  %298 = add i32 %297, %109
  %299 = sub i32 %298, %137
  %300 = add i32 %299, %13
  %301 = sub i32 %300, %45
  %302 = add i32 %301, %76
  %303 = sub i32 %302, %103
  %304 = sub i32 %303, %108
  %305 = sub i32 %304, %9
  %306 = add i32 %305, %112
  %307 = add i32 %306, %115
  %308 = add i32 %307, %123
  %309 = sub i32 %308, %138
  %310 = add i32 %309, %139
  %311 = add i32 %310, %145
  %312 = sub i32 %311, %146
  %313 = sub i32 %312, %158
  %314 = add i32 %313, %35
  %315 = add i32 %314, %159
  %316 = add i32 %315, %164
  %317 = sub i32 %316, %51
  %318 = add i32 %317, %178
  %319 = sub i32 %318, %185
  %320 = add i32 %319, %37
  %321 = add i32 %320, %192
  %322 = sub i32 %321, %26
  %323 = add i32 %322, %207
  %324 = add i32 %323, %214
  %325 = sub i32 %324, %218
  %326 = add i32 %325, %141
  %327 = add i32 %326, %73
  %328 = add i32 %327, %231
  %329 = add i32 %328, %27
  %330 = add i32 %329, %30
  %331 = add i32 %330, %36
  %332 = sub i32 %331, %39
  %333 = sub i32 %332, %46
  %334 = add i32 %333, %47
  %335 = add i32 %334, %53
  %336 = add i32 %335, %58
  %337 = sub i32 %336, %60
  %338 = add i32 %337, %63
  %339 = sub i32 %338, %65
  %340 = sub i32 %339, %67
  %341 = add i32 %340, %75
  %342 = add i32 %341, %82
  %343 = sub i32 %342, %83
  %344 = sub i32 %343, %86
  %345 = add i32 %344, %91
  %346 = add i32 %345, %93
  %347 = add i32 %346, %99
  %348 = sub i32 %347, %100
  %349 = sub i32 %348, %101
  %350 = add i32 %349, %104
  %351 = add i32 %350, %106
  %352 = sub i32 %351, %107
  %353 = add i32 %352, %111
  %354 = add i32 %353, %116
  %355 = sub i32 %354, %117
  %356 = add i32 %355, %118
  %357 = add i32 %356, %119
  %358 = sub i32 %357, %124
  %359 = sub i32 %358, %125
  %360 = sub i32 %359, %130
  %361 = add i32 %360, %133
  %362 = sub i32 %361, %135
  %363 = add i32 %362, %136
  %364 = add i32 %363, %142
  %365 = sub i32 %364, %148
  %366 = sub i32 %365, %150
  %367 = sub i32 %366, %151
  %368 = add i32 %367, %153
  %369 = add i32 %368, %161
  %370 = sub i32 %369, %163
  %371 = sub i32 %370, %170
  %372 = add i32 %371, %171
  %373 = sub i32 %372, %172
  %374 = sub i32 %373, %173
  %375 = sub i32 %374, %174
  %376 = sub i32 %375, %183
  %377 = add i32 %376, %184
  %378 = add i32 %377, %186
  %379 = sub i32 %378, %187
  %380 = sub i32 %379, %188
  %381 = sub i32 %380, %189
  %382 = add i32 %381, %193
  %383 = add i32 %382, %194
  %384 = add i32 %383, %195
  %385 = sub i32 %384, %196
  %386 = sub i32 %385, %197
  %387 = sub i32 %386, %199
  %388 = add i32 %387, %203
  %389 = sub i32 %388, %204
  %390 = add i32 %389, %205
  %391 = sub i32 %390, %206
  %392 = sub i32 %391, %208
  %393 = sub i32 %392, %210
  %394 = sub i32 %393, %213
  %395 = sub i32 %394, %80
  %396 = add i32 %395, %215
  %397 = add i32 %396, %165
  %398 = sub i32 %397, %217
  %399 = add i32 %398, %219
  %400 = sub i32 %399, %221
  %401 = add i32 %400, %223
  %402 = add i32 %401, %88
  %403 = add i32 %402, %226
  %404 = sub i32 %403, %227
  %405 = add i32 %404, %232
  %406 = sub i32 %405, %233
  %407 = add i32 %406, %236
  %408 = sub i32 %407, %237
  %409 = add i32 %408, %238
  %410 = sub i32 %409, %239
  %411 = sub i32 %410, %242
  %412 = sub i32 %411, %250
  %413 = sub i32 %412, %17
  %414 = add i32 %413, %18
  %415 = add i32 %414, %21
  %416 = sub i32 %415, %50
  %417 = sub i32 %416, %90
  %418 = sub i32 %417, %114
  %419 = add i32 %418, %129
  %420 = sub i32 %419, %132
  %421 = sub i32 %420, %134
  %422 = sub i32 %421, %157
  %423 = add i32 %422, %167
  %424 = sub i32 %423, %169
  %425 = sub i32 %424, %176
  %426 = sub i32 %425, %191
  %427 = add i32 %426, %202
  %428 = add i32 %427, %225
  %429 = sub i32 %428, %229
  %430 = sub i32 %429, %235
  %431 = sub i32 %430, %241
  %432 = add i32 %431, %244
  %433 = add i32 %432, %246
  %434 = sub i32 %433, %248
  %435 = add i32 %434, %251
  %436 = add i32 %435, %253
  %437 = add i32 %436, %254
  %438 = sub i32 %437, %182
  %439 = sub i32 %438, %71
  %440 = sub i32 %439, %127
  %441 = sub i32 %440, %156
  %442 = add i32 %441, %294
  %443 = add i32 %442, %285
  %444 = add i32 %443, %290
  %445 = add i32 %444, %280
  %446 = icmp eq i32 %16, %445
  %447 = select i1 %446, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %448 = tail call i32 @puts(i8* nonnull dereferenceable(1) %447)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
