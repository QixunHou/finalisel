digraph "DFG for'crackme' function" {
	Node0x2026b40[shape=record, label="  %5 = xor i32 %3, %0"];
	Node0x20271c0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x2027260[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x20272d0[shape=record, label="  %8 = add i32 %7, %1"];
	Node0x2027370[shape=record, label="  %9 = sub i32 0, %8"];
	Node0x20273e0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x2027450[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x20274c0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x2027530[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x20275a0[shape=record, label="  %14 = shl i32 %2, 1"];
	Node0x2027610[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x2027680[shape=record, label="  %16 = shl i32 %10, 1"];
	Node0x2027720[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x2027790[shape=record, label="  %18 = or i32 %17, %3"];
	Node0x2027800[shape=record, label="  %19 = or i32 %3, %0"];
	Node0x2027870[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x20278e0[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x2027950[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x20279c0[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x2027a60[shape=record, label="  %24 = mul i32 %3, 5"];
	Node0x2027ad0[shape=record, label="  %25 = xor i32 %3, -1"];
	Node0x2027b40[shape=record, label="  %26 = xor i32 %18, -1"];
	Node0x2027be0[shape=record, label="  %27 = mul i32 %26, -3"];
	Node0x2027c50[shape=record, label="  %28 = and i32 %17, %3"];
	Node0x2027cf0[shape=record, label="  %29 = mul i32 %28, -6"];
	Node0x2027d90[shape=record, label="  %30 = mul i32 %21, -9"];
	Node0x2027e00[shape=record, label="  %31 = sub i32 %10, %2"];
	Node0x2027e70[shape=record, label="  %32 = sub i32 %31, %15"];
	Node0x20280f0[shape=record, label="  %33 = add i32 %32, %25"];
	Node0x2028160[shape=record, label="  %34 = sub i32 %33, %16"];
	Node0x20281d0[shape=record, label="  %35 = sub i32 %34, %18"];
	Node0x2028240[shape=record, label="  %36 = add i32 %35, %5"];
	Node0x20282b0[shape=record, label="  %37 = add i32 %36, %24"];
	Node0x2028320[shape=record, label="  %38 = add i32 %37, %19"];
	Node0x2028390[shape=record, label="  %39 = add i32 %38, %13"];
	Node0x2028400[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x2028470[shape=record, label="  %41 = add i32 %40, %27"];
	Node0x20284e0[shape=record, label="  %42 = add i32 %41, %29"];
	Node0x2028550[shape=record, label="  %43 = add i32 %42, %30"];
	Node0x20285c0[shape=record, label="  %44 = sub i32 %43, %23"];
	Node0x2028630[shape=record, label="  %45 = icmp eq i32 %44, %9"];
	Node0x1fc7268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2028ad0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x2028b20[shape=record, label="  ret void"];
	Node0x2026b40 -> Node0x20271c0;
	Node0x20271c0 -> Node0x2027260;
	Node0x2027260 -> Node0x20272d0;
	Node0x20272d0 -> Node0x2027370;
	Node0x2027370 -> Node0x20273e0;
	Node0x20273e0 -> Node0x2027450;
	Node0x2027450 -> Node0x20274c0;
	Node0x20274c0 -> Node0x2027530;
	Node0x2027530 -> Node0x20275a0;
	Node0x20275a0 -> Node0x2027610;
	Node0x2027610 -> Node0x2027680;
	Node0x2027680 -> Node0x2027720;
	Node0x2027720 -> Node0x2027790;
	Node0x2027790 -> Node0x2027800;
	Node0x2027800 -> Node0x2027870;
	Node0x2027870 -> Node0x20278e0;
	Node0x20278e0 -> Node0x2027950;
	Node0x2027950 -> Node0x20279c0;
	Node0x20279c0 -> Node0x2027a60;
	Node0x2027a60 -> Node0x2027ad0;
	Node0x2027ad0 -> Node0x2027b40;
	Node0x2027b40 -> Node0x2027be0;
	Node0x2027be0 -> Node0x2027c50;
	Node0x2027c50 -> Node0x2027cf0;
	Node0x2027cf0 -> Node0x2027d90;
	Node0x2027d90 -> Node0x2027e00;
	Node0x2027e00 -> Node0x2027e70;
	Node0x2027e70 -> Node0x20280f0;
	Node0x20280f0 -> Node0x2028160;
	Node0x2028160 -> Node0x20281d0;
	Node0x20281d0 -> Node0x2028240;
	Node0x2028240 -> Node0x20282b0;
	Node0x20282b0 -> Node0x2028320;
	Node0x2028320 -> Node0x2028390;
	Node0x2028390 -> Node0x2028400;
	Node0x2028400 -> Node0x2028470;
	Node0x2028470 -> Node0x20284e0;
	Node0x20284e0 -> Node0x2028550;
	Node0x2028550 -> Node0x20285c0;
	Node0x20285c0 -> Node0x2028630;
	Node0x2028630 -> Node0x1fc7268;
	Node0x1fc7268 -> Node0x2028ad0;
	Node0x2028ad0 -> Node0x2028b20;
edge [color=red]
	Node0x2026b40 -> Node0x20271c0;
	Node0x20271c0 -> Node0x2027260;
	Node0x2027260 -> Node0x20272d0;
	Node0x20272d0 -> Node0x2027370;
	Node0x2027450 -> Node0x20274c0;
	Node0x20274c0 -> Node0x2027530;
	Node0x20275a0 -> Node0x2027610;
	Node0x20273e0 -> Node0x2027680;
	Node0x2027720 -> Node0x2027790;
	Node0x2027800 -> Node0x2027870;
	Node0x20278e0 -> Node0x2027950;
	Node0x2027950 -> Node0x20279c0;
	Node0x2027790 -> Node0x2027b40;
	Node0x2027b40 -> Node0x2027be0;
	Node0x2027720 -> Node0x2027c50;
	Node0x2027c50 -> Node0x2027cf0;
	Node0x20278e0 -> Node0x2027d90;
	Node0x20273e0 -> Node0x2027e00;
	Node0x2027e00 -> Node0x2027e70;
	Node0x2027610 -> Node0x2027e70;
	Node0x2027e70 -> Node0x20280f0;
	Node0x2027ad0 -> Node0x20280f0;
	Node0x20280f0 -> Node0x2028160;
	Node0x2027680 -> Node0x2028160;
	Node0x2028160 -> Node0x20281d0;
	Node0x2027790 -> Node0x20281d0;
	Node0x20281d0 -> Node0x2028240;
	Node0x2026b40 -> Node0x2028240;
	Node0x2028240 -> Node0x20282b0;
	Node0x2027a60 -> Node0x20282b0;
	Node0x20282b0 -> Node0x2028320;
	Node0x2027800 -> Node0x2028320;
	Node0x2028320 -> Node0x2028390;
	Node0x2027530 -> Node0x2028390;
	Node0x2028390 -> Node0x2028400;
	Node0x2027870 -> Node0x2028400;
	Node0x2028400 -> Node0x2028470;
	Node0x2027be0 -> Node0x2028470;
	Node0x2028470 -> Node0x20284e0;
	Node0x2027cf0 -> Node0x20284e0;
	Node0x20284e0 -> Node0x2028550;
	Node0x2027d90 -> Node0x2028550;
	Node0x2028550 -> Node0x20285c0;
	Node0x20279c0 -> Node0x20285c0;
	Node0x20285c0 -> Node0x2028630;
	Node0x2027370 -> Node0x2028630;
	Node0x2028630 -> Node0x1fc7268;
	Node0x1fc7268 -> Node0x2028ad0;
}
