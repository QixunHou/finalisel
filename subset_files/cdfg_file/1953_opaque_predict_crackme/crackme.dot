digraph "DFG for'crackme' function" {
	Node0x132f130[shape=record, label="  %5 = sub i32 0, %2"];
	Node0x132f1d0[shape=record, label="  %6 = xor i32 %2, -1"];
	Node0x132f240[shape=record, label="  %7 = and i32 %2, %1"];
	Node0x132f2b0[shape=record, label="  %8 = xor i32 %2, %1"];
	Node0x132f320[shape=record, label="  %9 = and i32 %6, %1"];
	Node0x132f390[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x132f400[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x132f470[shape=record, label="  %12 = xor i32 %1, -1"];
	Node0x132f4e0[shape=record, label="  %13 = and i32 %12, %2"];
	Node0x132f580[shape=record, label="  %14 = mul i32 %13, 5"];
	Node0x132f620[shape=record, label="  %15 = shl i32 %9, 2"];
	Node0x132f690[shape=record, label="  %16 = or i32 %3, %0"];
	Node0x132f700[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x132f770[shape=record, label="  %18 = or i32 %17, %3"];
	Node0x132f7e0[shape=record, label="  %19 = and i32 %3, %0"];
	Node0x132f880[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x132f920[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x132f990[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x132fa00[shape=record, label="  %23 = sub i32 %18, %16"];
	Node0x132faa0[shape=record, label="  %24 = mul i32 %23, 3"];
	Node0x132fb10[shape=record, label="  %25 = add i32 %7, %11"];
	Node0x132fbb0[shape=record, label="  %26 = mul i32 %25, 7"];
	Node0x132fc20[shape=record, label="  %27 = add i32 %22, %8"];
	Node0x132fc90[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x132fd00[shape=record, label="  %29 = add i32 %0, 7"];
	Node0x132fd70[shape=record, label="  %30 = add i32 %29, %0"];
	Node0x132fde0[shape=record, label="  %31 = sub i32 %30, %2"];
	Node0x132fe50[shape=record, label="  %32 = add i32 %31, %7"];
	Node0x13300d0[shape=record, label="  %33 = add i32 %32, %9"];
	Node0x1330140[shape=record, label="  %34 = sub i32 %33, %10"];
	Node0x13301b0[shape=record, label="  %35 = add i32 %34, %8"];
	Node0x1330220[shape=record, label="  %36 = add i32 %35, %14"];
	Node0x1330290[shape=record, label="  %37 = add i32 %36, %15"];
	Node0x1330300[shape=record, label="  %38 = add i32 %37, %16"];
	Node0x1330370[shape=record, label="  %39 = sub i32 %38, %18"];
	Node0x13303e0[shape=record, label="  %40 = sub i32 %39, %20"];
	Node0x1330450[shape=record, label="  %41 = add i32 %40, %26"];
	Node0x13304c0[shape=record, label="  %42 = sub i32 %41, %21"];
	Node0x1330530[shape=record, label="  %43 = add i32 %42, %24"];
	Node0x13305a0[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x1330610[shape=record, label="  %45 = icmp eq i32 %44, %5"];
	Node0x12cf268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1330ab0[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x1330b00[shape=record, label="  ret void"];
	Node0x132f130 -> Node0x132f1d0;
	Node0x132f1d0 -> Node0x132f240;
	Node0x132f240 -> Node0x132f2b0;
	Node0x132f2b0 -> Node0x132f320;
	Node0x132f320 -> Node0x132f390;
	Node0x132f390 -> Node0x132f400;
	Node0x132f400 -> Node0x132f470;
	Node0x132f470 -> Node0x132f4e0;
	Node0x132f4e0 -> Node0x132f580;
	Node0x132f580 -> Node0x132f620;
	Node0x132f620 -> Node0x132f690;
	Node0x132f690 -> Node0x132f700;
	Node0x132f700 -> Node0x132f770;
	Node0x132f770 -> Node0x132f7e0;
	Node0x132f7e0 -> Node0x132f880;
	Node0x132f880 -> Node0x132f920;
	Node0x132f920 -> Node0x132f990;
	Node0x132f990 -> Node0x132fa00;
	Node0x132fa00 -> Node0x132faa0;
	Node0x132faa0 -> Node0x132fb10;
	Node0x132fb10 -> Node0x132fbb0;
	Node0x132fbb0 -> Node0x132fc20;
	Node0x132fc20 -> Node0x132fc90;
	Node0x132fc90 -> Node0x132fd00;
	Node0x132fd00 -> Node0x132fd70;
	Node0x132fd70 -> Node0x132fde0;
	Node0x132fde0 -> Node0x132fe50;
	Node0x132fe50 -> Node0x13300d0;
	Node0x13300d0 -> Node0x1330140;
	Node0x1330140 -> Node0x13301b0;
	Node0x13301b0 -> Node0x1330220;
	Node0x1330220 -> Node0x1330290;
	Node0x1330290 -> Node0x1330300;
	Node0x1330300 -> Node0x1330370;
	Node0x1330370 -> Node0x13303e0;
	Node0x13303e0 -> Node0x1330450;
	Node0x1330450 -> Node0x13304c0;
	Node0x13304c0 -> Node0x1330530;
	Node0x1330530 -> Node0x13305a0;
	Node0x13305a0 -> Node0x1330610;
	Node0x1330610 -> Node0x12cf268;
	Node0x12cf268 -> Node0x1330ab0;
	Node0x1330ab0 -> Node0x1330b00;
edge [color=red]
	Node0x132f1d0 -> Node0x132f320;
	Node0x132f390 -> Node0x132f400;
	Node0x132f470 -> Node0x132f4e0;
	Node0x132f4e0 -> Node0x132f580;
	Node0x132f320 -> Node0x132f620;
	Node0x132f700 -> Node0x132f770;
	Node0x132f7e0 -> Node0x132f880;
	Node0x132f880 -> Node0x132f920;
	Node0x132f770 -> Node0x132fa00;
	Node0x132f690 -> Node0x132fa00;
	Node0x132fa00 -> Node0x132faa0;
	Node0x132f240 -> Node0x132fb10;
	Node0x132f400 -> Node0x132fb10;
	Node0x132fb10 -> Node0x132fbb0;
	Node0x132f990 -> Node0x132fc20;
	Node0x132f2b0 -> Node0x132fc20;
	Node0x132fc20 -> Node0x132fc90;
	Node0x132fd00 -> Node0x132fd70;
	Node0x132fd70 -> Node0x132fde0;
	Node0x132fde0 -> Node0x132fe50;
	Node0x132f240 -> Node0x132fe50;
	Node0x132fe50 -> Node0x13300d0;
	Node0x132f320 -> Node0x13300d0;
	Node0x13300d0 -> Node0x1330140;
	Node0x132f390 -> Node0x1330140;
	Node0x1330140 -> Node0x13301b0;
	Node0x132f2b0 -> Node0x13301b0;
	Node0x13301b0 -> Node0x1330220;
	Node0x132f580 -> Node0x1330220;
	Node0x1330220 -> Node0x1330290;
	Node0x132f620 -> Node0x1330290;
	Node0x1330290 -> Node0x1330300;
	Node0x132f690 -> Node0x1330300;
	Node0x1330300 -> Node0x1330370;
	Node0x132f770 -> Node0x1330370;
	Node0x1330370 -> Node0x13303e0;
	Node0x132f880 -> Node0x13303e0;
	Node0x13303e0 -> Node0x1330450;
	Node0x132fbb0 -> Node0x1330450;
	Node0x1330450 -> Node0x13304c0;
	Node0x132f920 -> Node0x13304c0;
	Node0x13304c0 -> Node0x1330530;
	Node0x132faa0 -> Node0x1330530;
	Node0x1330530 -> Node0x13305a0;
	Node0x132fc90 -> Node0x13305a0;
	Node0x13305a0 -> Node0x1330610;
	Node0x132f130 -> Node0x1330610;
	Node0x1330610 -> Node0x12cf268;
	Node0x12cf268 -> Node0x1330ab0;
}
