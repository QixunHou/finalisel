; ModuleID = '../.././c_source_file/1203_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1203_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %1, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = xor i32 %0, -1
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %2
  %11 = and i32 %10, %8
  %12 = xor i32 %2, %1
  %13 = or i32 %12, %8
  %14 = xor i32 %11, %13
  %15 = shl i32 %14, 1
  %16 = add i32 %15, %7
  %17 = sub i32 0, %16
  %18 = and i32 %9, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %19
  %23 = and i32 %2, %1
  %24 = and i32 %23, %8
  %25 = or i32 %2, %1
  %26 = and i32 %25, %0
  %27 = or i32 %24, %26
  %28 = or i32 %2, %0
  %29 = xor i32 %28, %1
  %30 = xor i32 %12, -1
  %31 = or i32 %20, %6
  %32 = xor i32 %28, -1
  %33 = xor i32 %1, %0
  %34 = or i32 %33, %32
  %35 = xor i32 %6, %2
  %36 = xor i32 %23, -1
  %37 = and i32 %28, %1
  %38 = or i32 %20, %18
  %39 = and i32 %5, %21
  %40 = xor i32 %25, -1
  %41 = or i32 %40, %8
  %42 = and i32 %12, %8
  %43 = and i32 %4, %0
  %44 = and i32 %12, %5
  %45 = and i32 %23, %0
  %46 = xor i32 %25, %0
  %47 = xor i32 %45, -1
  %48 = xor i32 %46, %47
  %49 = or i32 %4, %1
  %50 = xor i32 %43, %49
  %51 = and i32 %2, %0
  %52 = xor i32 %51, -1
  %53 = and i32 %52, %9
  %54 = xor i32 %33, -1
  %55 = or i32 %21, %54
  %56 = or i32 %9, %2
  %57 = and i32 %56, %0
  %58 = or i32 %11, %57
  %59 = and i32 %1, %0
  %60 = or i32 %59, %40
  %61 = or i32 %12, %59
  %62 = shl i32 %61, 1
  %63 = or i32 %45, %42
  %64 = and i32 %20, %19
  %65 = or i32 %33, %2
  %66 = xor i32 %49, -1
  %67 = or i32 %43, %66
  %68 = xor i32 %51, %5
  %69 = xor i32 %18, %36
  %70 = or i32 %4, %54
  %71 = and i32 %25, %8
  %72 = xor i32 %71, %47
  %73 = xor i32 %43, -1
  %74 = and i32 %10, %0
  %75 = xor i32 %12, %0
  %76 = or i32 %74, %75
  %77 = shl i32 %76, 1
  %78 = or i32 %12, %0
  %79 = xor i32 %59, -1
  %80 = and i32 %20, %79
  %81 = and i32 %4, %1
  %82 = or i32 %81, %0
  %83 = or i32 %32, %54
  %84 = xor i32 %73, %1
  %85 = or i32 %9, %0
  %86 = xor i32 %85, -1
  %87 = or i32 %12, %86
  %88 = or i32 %32, %1
  %89 = xor i32 %74, %78
  %90 = xor i32 %52, %1
  %91 = and i32 %5, %30
  %92 = or i32 %4, %0
  %93 = xor i32 %92, -1
  %94 = or i32 %93, %1
  %95 = shl i32 %94, 1
  %96 = and i32 %52, %54
  %97 = and i32 %21, %79
  %98 = shl i32 %97, 1
  %99 = and i32 %85, %4
  %100 = shl i32 %99, 1
  %101 = or i32 %18, %21
  %102 = and i32 %21, %9
  %103 = xor i32 %75, -1
  %104 = or i32 %45, %103
  %105 = xor i32 %81, -1
  %106 = xor i32 %105, %0
  %107 = or i32 %21, %86
  %108 = and i32 %20, %9
  %109 = or i32 %43, %9
  %110 = xor i32 %57, -1
  %111 = xor i32 %11, %110
  %112 = or i32 %93, %54
  %113 = xor i32 %86, %2
  %114 = and i32 %92, %33
  %115 = or i32 %20, %9
  %116 = or i32 %93, %9
  %117 = and i32 %19, %2
  %118 = and i32 %85, %2
  %119 = shl i32 %118, 1
  %120 = and i32 %20, %1
  %121 = xor i32 %28, %59
  %122 = or i32 %21, %9
  %123 = xor i32 %18, %2
  %124 = or i32 %43, %54
  %125 = or i32 %25, %8
  %126 = or i32 %81, %8
  %127 = and i32 %73, %9
  %128 = or i32 %30, %0
  %129 = or i32 %51, %40
  %130 = and i32 %21, %1
  %131 = or i32 %54, %2
  %132 = or i32 %59, %21
  %133 = or i32 %81, %18
  %134 = xor i32 %92, %1
  %135 = and i32 %20, %33
  %136 = xor i32 %92, %59
  %137 = and i32 %30, %79
  %138 = shl i32 %137, 1
  %139 = and i32 %56, %8
  %140 = xor i32 %139, -1
  %141 = xor i32 %74, %140
  %142 = and i32 %12, %85
  %143 = or i32 %51, %9
  %144 = or i32 %18, %2
  %145 = xor i32 %32, %1
  %146 = xor i32 %13, 2147483647
  %147 = or i32 %146, %11
  %148 = and i32 %33, %4
  %149 = shl i32 %148, 1
  %150 = and i32 %49, %0
  %151 = or i32 %12, %18
  %152 = or i32 %33, %4
  %153 = xor i32 %45, %75
  %154 = and i32 %30, %19
  %155 = or i32 %51, %1
  %156 = and i32 %92, %1
  %157 = add i32 %92, 1
  %158 = or i32 %49, %8
  %159 = and i32 %20, %85
  %160 = shl i32 %85, 1
  %161 = or i32 %51, %33
  %162 = and i32 %12, %19
  %163 = xor i32 %56, %0
  %164 = or i32 %74, %163
  %165 = xor i32 %30, %0
  %166 = xor i32 %81, %0
  %167 = and i32 %92, %9
  %168 = shl i32 %167, 1
  %169 = or i32 %33, %93
  %170 = xor i32 %66, %0
  %171 = xor i32 %40, %0
  %172 = or i32 %25, %0
  %173 = and i32 %52, %1
  %174 = xor i32 %18, %105
  %175 = add i32 %28, 1
  %176 = and i32 %54, %2
  %177 = xor i32 %163, 2147483647
  %178 = xor i32 %177, %74
  %179 = shl i32 %178, 1
  %180 = or i32 %74, %139
  %181 = or i32 %30, %86
  %182 = or i32 %59, %66
  %183 = and i32 %33, %2
  %184 = and i32 %12, %0
  %185 = or i32 %24, %184
  %186 = or i32 %66, %8
  %187 = xor i32 %42, %47
  %188 = xor i32 %49, %59
  %189 = or i32 %18, %30
  %190 = or i32 %59, %32
  %191 = shl i32 %190, 1
  %192 = and i32 %28, %9
  %193 = and i32 %85, %21
  %194 = shl i32 %193, 1
  %195 = or i32 %20, %54
  %196 = xor i32 %59, %2
  %197 = or i32 %20, %86
  %198 = or i32 %51, %6
  %199 = and i32 %73, %1
  %200 = shl i32 %199, 1
  %201 = and i32 %49, %8
  %202 = and i32 %20, %5
  %203 = or i32 %20, %1
  %204 = xor i32 %36, %0
  %205 = and i32 %85, %30
  %206 = shl i32 %205, 1
  %207 = or i32 %59, %4
  %208 = and i32 %33, %73
  %209 = and i32 %36, %8
  %210 = xor i32 %43, %1
  %211 = and i32 %4, %19
  %212 = and i32 %40, %8
  %213 = mul i32 %212, 14
  %214 = and i32 %81, %8
  %215 = mul i32 %214, 6
  %216 = and i32 %40, %0
  %217 = shl i32 %216, 1
  %218 = and i32 %81, %0
  %219 = mul i32 %218, -7
  %220 = and i32 %66, %8
  %221 = and i32 %66, %0
  %222 = mul i32 %221, -12
  %223 = sub i32 %114, %112
  %224 = sub i32 %223, %108
  %225 = mul i32 %224, 5
  %226 = add i32 %181, %132
  %227 = sub i32 %96, %226
  %228 = mul i32 %227, 3
  %229 = sub i32 %45, %24
  %230 = mul i32 %229, 10
  %231 = add i32 %37, %51
  %232 = shl i32 %231, 2
  %233 = add i32 %176, -1
  %234 = add i32 %233, %35
  %235 = add i32 %234, %220
  %236 = add i32 %235, %210
  %237 = add i32 %236, %188
  %238 = add i32 %237, %134
  %239 = add i32 %238, %125
  %240 = add i32 %239, %124
  %241 = add i32 %240, %122
  %242 = add i32 %241, %120
  %243 = add i32 %242, %107
  %244 = add i32 %243, %64
  %245 = add i32 %244, %53
  %246 = add i32 %245, %38
  %247 = add i32 %246, %164
  %248 = add i32 %247, %147
  %249 = shl i32 %248, 1
  %250 = add i32 %1, 2
  %251 = add i32 %250, %6
  %252 = add i32 %251, %2
  %253 = add i32 %252, %18
  %254 = add i32 %253, %18
  %255 = add i32 %254, %12
  %256 = add i32 %255, 3
  %257 = add i32 %256, %36
  %258 = add i32 %257, %65
  %259 = add i32 %258, %70
  %260 = sub i32 %259, %113
  %261 = add i32 %260, %92
  %262 = add i32 %261, %40
  %263 = sub i32 %262, %117
  %264 = sub i32 %263, %123
  %265 = sub i32 %264, %131
  %266 = add i32 %265, %144
  %267 = sub i32 %266, %152
  %268 = add i32 %267, %157
  %269 = sub i32 %268, %160
  %270 = add i32 %269, %175
  %271 = add i32 %270, %183
  %272 = add i32 %271, %28
  %273 = add i32 %272, %196
  %274 = add i32 %273, %207
  %275 = add i32 %274, %211
  %276 = sub i32 %275, %22
  %277 = add i32 %276, %29
  %278 = sub i32 %277, %31
  %279 = add i32 %278, %34
  %280 = sub i32 %279, %39
  %281 = sub i32 %280, %41
  %282 = add i32 %281, %42
  %283 = add i32 %282, %44
  %284 = sub i32 %283, %50
  %285 = add i32 %284, %55
  %286 = add i32 %285, %60
  %287 = add i32 %286, %67
  %288 = sub i32 %287, %68
  %289 = sub i32 %288, %69
  %290 = sub i32 %289, %78
  %291 = add i32 %290, %80
  %292 = add i32 %291, %82
  %293 = add i32 %292, %83
  %294 = sub i32 %293, %84
  %295 = sub i32 %294, %87
  %296 = sub i32 %295, %88
  %297 = add i32 %296, %90
  %298 = sub i32 %297, %91
  %299 = sub i32 %298, %100
  %300 = sub i32 %299, %101
  %301 = sub i32 %300, %102
  %302 = sub i32 %301, %106
  %303 = sub i32 %302, %109
  %304 = sub i32 %303, %115
  %305 = add i32 %304, %116
  %306 = sub i32 %305, %119
  %307 = add i32 %306, %121
  %308 = add i32 %307, %126
  %309 = sub i32 %308, %127
  %310 = add i32 %309, %128
  %311 = sub i32 %310, %129
  %312 = sub i32 %311, %130
  %313 = add i32 %312, %133
  %314 = add i32 %313, %135
  %315 = sub i32 %314, %136
  %316 = sub i32 %315, %142
  %317 = sub i32 %316, %143
  %318 = add i32 %317, %145
  %319 = sub i32 %318, %149
  %320 = sub i32 %319, %150
  %321 = sub i32 %320, %151
  %322 = sub i32 %321, %154
  %323 = add i32 %322, %155
  %324 = sub i32 %323, %156
  %325 = sub i32 %324, %158
  %326 = sub i32 %325, %159
  %327 = sub i32 %326, %13
  %328 = sub i32 %327, %161
  %329 = sub i32 %328, %46
  %330 = add i32 %329, %162
  %331 = sub i32 %330, %165
  %332 = add i32 %331, %166
  %333 = add i32 %332, %169
  %334 = add i32 %333, %170
  %335 = sub i32 %334, %171
  %336 = add i32 %335, %172
  %337 = add i32 %336, %173
  %338 = sub i32 %337, %174
  %339 = add i32 %338, %182
  %340 = sub i32 %339, %186
  %341 = add i32 %340, %184
  %342 = add i32 %341, %189
  %343 = sub i32 %342, %192
  %344 = add i32 %343, %195
  %345 = sub i32 %344, %197
  %346 = add i32 %345, %198
  %347 = add i32 %346, %201
  %348 = add i32 %347, %71
  %349 = add i32 %348, %202
  %350 = sub i32 %349, %203
  %351 = sub i32 %350, %204
  %352 = add i32 %351, %208
  %353 = sub i32 %352, %209
  %354 = sub i32 %353, %27
  %355 = add i32 %354, %48
  %356 = add i32 %355, %58
  %357 = sub i32 %356, %62
  %358 = sub i32 %357, %63
  %359 = sub i32 %358, %72
  %360 = add i32 %359, %89
  %361 = sub i32 %360, %95
  %362 = sub i32 %361, %98
  %363 = add i32 %362, %104
  %364 = add i32 %363, %111
  %365 = sub i32 %364, %138
  %366 = sub i32 %365, %141
  %367 = add i32 %366, %153
  %368 = sub i32 %367, %168
  %369 = sub i32 %368, %180
  %370 = add i32 %369, %185
  %371 = sub i32 %370, %187
  %372 = sub i32 %371, %191
  %373 = sub i32 %372, %194
  %374 = sub i32 %373, %200
  %375 = sub i32 %374, %206
  %376 = add i32 %375, %213
  %377 = add i32 %376, %215
  %378 = sub i32 %377, %217
  %379 = add i32 %378, %219
  %380 = add i32 %379, %222
  %381 = sub i32 %380, %77
  %382 = add i32 %381, %230
  %383 = add i32 %382, %232
  %384 = sub i32 %383, %179
  %385 = add i32 %384, %225
  %386 = add i32 %385, %228
  %387 = add i32 %386, %249
  %388 = icmp eq i32 %387, %17
  %389 = select i1 %388, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %390 = tail call i32 @puts(i8* nonnull dereferenceable(1) %389)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
