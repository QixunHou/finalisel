digraph "DFG for'crackme' function" {
	Node0x2251b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2251bc0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x2251c80[shape=record, label="  %5 = shl i32 %4, 2"];
	Node0x2251cf0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x2251d60[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x2251dd0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x2251e40[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x2251ee0[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x2251f80[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x2251ff0[shape=record, label="  %12 = shl i32 %6, 1"];
	Node0x2252060[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x22520d0[shape=record, label="  %14 = shl i32 %4, 1"];
	Node0x2252140[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x22521e0[shape=record, label="  %16 = mul i32 %9, 3"];
	Node0x2252280[shape=record, label="  %17 = sub i32 -3, %1"];
	Node0x22522f0[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0x2252360[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x22523d0[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0x2252440[shape=record, label="  %21 = add i32 %20, %16"];
	Node0x22524b0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x2252520[shape=record, label="  %23 = sub i32 %22, %13"];
	Node0x2252590[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x2252600[shape=record, label="  %25 = icmp eq i32 %5, %24"];
	Node0x21f2268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2252aa0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x2252af0[shape=record, label="  ret void"];
	Node0x2251b50 -> Node0x2251bc0;
	Node0x2251bc0 -> Node0x2251c80;
	Node0x2251c80 -> Node0x2251cf0;
	Node0x2251cf0 -> Node0x2251d60;
	Node0x2251d60 -> Node0x2251dd0;
	Node0x2251dd0 -> Node0x2251e40;
	Node0x2251e40 -> Node0x2251ee0;
	Node0x2251ee0 -> Node0x2251f80;
	Node0x2251f80 -> Node0x2251ff0;
	Node0x2251ff0 -> Node0x2252060;
	Node0x2252060 -> Node0x22520d0;
	Node0x22520d0 -> Node0x2252140;
	Node0x2252140 -> Node0x22521e0;
	Node0x22521e0 -> Node0x2252280;
	Node0x2252280 -> Node0x22522f0;
	Node0x22522f0 -> Node0x2252360;
	Node0x2252360 -> Node0x22523d0;
	Node0x22523d0 -> Node0x2252440;
	Node0x2252440 -> Node0x22524b0;
	Node0x22524b0 -> Node0x2252520;
	Node0x2252520 -> Node0x2252590;
	Node0x2252590 -> Node0x2252600;
	Node0x2252600 -> Node0x21f2268;
	Node0x21f2268 -> Node0x2252aa0;
	Node0x2252aa0 -> Node0x2252af0;
edge [color=red]
	Node0x2251b50 -> Node0x2251bc0;
	Node0x2251bc0 -> Node0x2251c80;
	Node0x2251d60 -> Node0x2251dd0;
	Node0x2251b50 -> Node0x2251e40;
	Node0x2251e40 -> Node0x2251ee0;
	Node0x2251ee0 -> Node0x2251f80;
	Node0x2251cf0 -> Node0x2251ff0;
	Node0x2251ff0 -> Node0x2252060;
	Node0x2251bc0 -> Node0x22520d0;
	Node0x22520d0 -> Node0x2252140;
	Node0x2251e40 -> Node0x22521e0;
	Node0x2252280 -> Node0x22522f0;
	Node0x2251cf0 -> Node0x22522f0;
	Node0x22522f0 -> Node0x2252360;
	Node0x2251dd0 -> Node0x2252360;
	Node0x2252360 -> Node0x22523d0;
	Node0x2251d60 -> Node0x22523d0;
	Node0x22523d0 -> Node0x2252440;
	Node0x22521e0 -> Node0x2252440;
	Node0x2252440 -> Node0x22524b0;
	Node0x2251f80 -> Node0x22524b0;
	Node0x22524b0 -> Node0x2252520;
	Node0x2252060 -> Node0x2252520;
	Node0x2252520 -> Node0x2252590;
	Node0x2252140 -> Node0x2252590;
	Node0x2251c80 -> Node0x2252600;
	Node0x2252590 -> Node0x2252600;
	Node0x2252600 -> Node0x21f2268;
	Node0x21f2268 -> Node0x2252aa0;
}
