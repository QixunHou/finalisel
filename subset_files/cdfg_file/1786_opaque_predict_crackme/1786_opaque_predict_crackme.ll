; ModuleID = '../.././c_source_file/1786_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1786_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = or i32 %6, %3
  %9 = xor i32 %1, -1
  %10 = xor i32 %2, %0
  %11 = xor i32 %10, -1
  %12 = and i32 %11, %9
  %13 = shl i32 %12, 1
  %14 = xor i32 %1, %0
  %15 = and i32 %14, %11
  %16 = sub i32 1, %15
  %17 = add i32 %16, %7
  %18 = sub i32 %17, %8
  %19 = sub i32 %18, %13
  %20 = or i32 %4, %3
  %21 = xor i32 %4, %3
  %22 = add i32 %20, 1
  %23 = shl i32 %7, 1
  %24 = and i32 %4, %3
  %25 = and i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %2
  %28 = or i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %2, %1
  %31 = and i32 %30, %0
  %32 = xor i32 %0, -1
  %33 = xor i32 %2, %1
  %34 = and i32 %33, %32
  %35 = or i32 %31, %34
  %36 = and i32 %9, %0
  %37 = or i32 %30, %36
  %38 = and i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %14, -1
  %41 = and i32 %39, %40
  %42 = or i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %25, %43
  %45 = or i32 %33, %25
  %46 = xor i32 %2, -1
  %47 = or i32 %46, %1
  %48 = xor i32 %47, -1
  %49 = xor i32 %48, %0
  %50 = shl i32 %49, 1
  %51 = or i32 %2, %0
  %52 = and i32 %51, %14
  %53 = or i32 %9, %0
  %54 = and i32 %53, %2
  %55 = or i32 %46, %0
  %56 = and i32 %55, %14
  %57 = add i32 %14, 1
  %58 = and i32 %46, %0
  %59 = xor i32 %30, -1
  %60 = xor i32 %58, %59
  %61 = and i32 %59, %32
  %62 = and i32 %46, %1
  %63 = xor i32 %62, -1
  %64 = xor i32 %38, %63
  %65 = xor i32 %36, -1
  %66 = xor i32 %33, -1
  %67 = and i32 %66, %65
  %68 = xor i32 %30, %0
  %69 = shl i32 %68, 1
  %70 = add i32 %30, 1
  %71 = or i32 %38, %62
  %72 = and i32 %9, %2
  %73 = and i32 %72, %0
  %74 = xor i32 %33, %0
  %75 = xor i32 %74, -1
  %76 = xor i32 %73, %75
  %77 = xor i32 %58, %1
  %78 = or i32 %25, %46
  %79 = xor i32 %62, %0
  %80 = and i32 %10, %26
  %81 = xor i32 %51, %25
  %82 = and i32 %55, %1
  %83 = and i32 %46, %26
  %84 = shl i32 %83, 2
  %85 = and i32 %66, %26
  %86 = and i32 %33, %0
  %87 = xor i32 %51, -1
  %88 = and i32 %30, %32
  %89 = xor i32 %88, -1
  %90 = xor i32 %86, %89
  %91 = xor i32 %34, -1
  %92 = xor i32 %31, %91
  %93 = and i32 %55, %40
  %94 = xor i32 %31, %74
  %95 = xor i32 %42, %25
  %96 = xor i32 %53, %2
  %97 = xor i32 %53, -1
  %98 = or i32 %97, %2
  %99 = or i32 %31, %75
  %100 = or i32 %33, %32
  %101 = or i32 %58, %1
  %102 = or i32 %14, %46
  %103 = and i32 %10, %53
  %104 = and i32 %28, %46
  %105 = xor i32 %26, %2
  %106 = xor i32 %55, %25
  %107 = or i32 %38, %40
  %108 = and i32 %46, %65
  %109 = xor i32 %38, %53
  %110 = and i32 %33, %65
  %111 = and i32 %10, %14
  %112 = or i32 %58, %40
  %113 = xor i32 %55, -1
  %114 = or i32 %33, %0
  %115 = shl i32 %114, 1
  %116 = or i32 %25, %48
  %117 = and i32 %14, %46
  %118 = or i32 %36, %46
  %119 = and i32 %59, %0
  %120 = xor i32 %31, 2147483647
  %121 = xor i32 %120, %0
  %122 = xor i32 %121, %42
  %123 = shl i32 %122, 1
  %124 = or i32 %66, %29
  %125 = and i32 %72, %32
  %126 = or i32 %9, %2
  %127 = and i32 %126, %0
  %128 = xor i32 %127, -1
  %129 = xor i32 %125, %128
  %130 = or i32 %25, %2
  %131 = or i32 %10, %14
  %132 = shl i32 %131, 2
  %133 = or i32 %40, %2
  %134 = and i32 %53, %11
  %135 = and i32 %28, %11
  %136 = or i32 %48, %0
  %137 = or i32 %29, %2
  %138 = and i32 %42, %0
  %139 = xor i32 %138, %89
  %140 = or i32 %58, %9
  %141 = xor i32 %87, %1
  %142 = and i32 %65, %2
  %143 = or i32 %46, %40
  %144 = or i32 %25, %113
  %145 = or i32 %87, %40
  %146 = or i32 %87, %9
  %147 = add i32 %38, 1
  %148 = xor i32 %59, %0
  %149 = and i32 %11, %40
  %150 = xor i32 %38, %42
  %151 = and i32 %42, %32
  %152 = or i32 %10, %9
  %153 = shl i32 %152, 1
  %154 = or i32 %73, %74
  %155 = shl i32 %66, 1
  %156 = xor i32 %58, -1
  %157 = and i32 %156, %40
  %158 = or i32 %30, %0
  %159 = and i32 %10, %1
  %160 = or i32 %63, %0
  %161 = and i32 %39, %1
  %162 = or i32 %10, %40
  %163 = or i32 %47, %0
  %164 = and i32 %63, %32
  %165 = or i32 %10, %29
  %166 = or i32 %14, %2
  %167 = or i32 %36, %11
  %168 = or i32 %113, %40
  %169 = xor i32 %47, %25
  %170 = xor i32 %65, %2
  %171 = and i32 %14, %39
  %172 = and i32 %33, %26
  %173 = and i32 %156, %9
  %174 = or i32 %63, %32
  %175 = xor i32 %126, %0
  %176 = or i32 %73, %175
  %177 = and i32 %10, %9
  %178 = or i32 %10, %25
  %179 = xor i32 %100, -1
  %180 = or i32 %125, %179
  %181 = or i32 %66, %0
  %182 = shl i32 %181, 1
  %183 = add i32 %2, 1
  %184 = or i32 %25, %66
  %185 = shl i32 %184, 1
  %186 = and i32 %51, %9
  %187 = or i32 %36, %2
  %188 = shl i32 %187, 1
  %189 = or i32 %58, %30
  %190 = or i32 %43, %0
  %191 = xor i32 %156, %1
  %192 = shl i32 %191, 1
  %193 = xor i32 %29, %2
  %194 = or i32 %38, %14
  %195 = xor i32 %194, -1
  %196 = or i32 %46, %29
  %197 = add i32 %47, 1
  %198 = or i32 %25, %11
  %199 = or i32 %36, %66
  %200 = shl i32 %199, 2
  %201 = or i32 %14, %113
  %202 = and i32 %46, %40
  %203 = shl i32 %10, 1
  %204 = and i32 %66, %0
  %205 = xor i32 %58, %47
  %206 = shl i32 %205, 1
  %207 = and i32 %156, %1
  %208 = or i32 %42, %0
  %209 = and i32 %47, %32
  %210 = xor i32 %120, %151
  %211 = xor i32 %55, %1
  %212 = and i32 %43, %32
  %213 = and i32 %62, %32
  %214 = mul i32 %213, -9
  %215 = and i32 %43, %0
  %216 = mul i32 %215, 25
  %217 = and i32 %62, %0
  %218 = and i32 %48, %32
  %219 = shl i32 %88, 4
  %220 = and i32 %48, %0
  %221 = add i32 %108, %117
  %222 = add i32 %221, %207
  %223 = add i32 %222, %74
  %224 = add i32 %223, %173
  %225 = add i32 %224, %165
  %226 = add i32 %225, %149
  %227 = add i32 %226, %107
  %228 = add i32 %227, %67
  %229 = add i32 %228, %44
  %230 = add i32 %229, %37
  %231 = add i32 %230, %210
  %232 = shl i32 %231, 1
  %233 = sub i32 %11, %31
  %234 = add i32 %233, %220
  %235 = add i32 %234, %45
  %236 = add i32 %235, %22
  %237 = mul i32 %236, 5
  %238 = add i32 %218, %47
  %239 = add i32 %238, %164
  %240 = sub i32 %239, %162
  %241 = sub i32 %240, %24
  %242 = mul i32 %241, 3
  %243 = sub i32 %217, %212
  %244 = mul i32 %243, 13
  %245 = add i32 %0, -1
  %246 = add i32 %245, %1
  %247 = add i32 %246, %29
  %248 = add i32 %247, %57
  %249 = add i32 %248, %26
  %250 = sub i32 %249, %2
  %251 = add i32 %250, %97
  %252 = add i32 %251, %183
  %253 = add i32 %252, %65
  %254 = sub i32 %253, %27
  %255 = add i32 %254, %54
  %256 = add i32 %255, %70
  %257 = sub i32 %256, %78
  %258 = add i32 %257, %87
  %259 = add i32 %258, %42
  %260 = add i32 %259, %96
  %261 = sub i32 %260, %98
  %262 = sub i32 %261, %102
  %263 = sub i32 %262, %104
  %264 = sub i32 %263, %105
  %265 = add i32 %264, %113
  %266 = sub i32 %265, %118
  %267 = sub i32 %266, %130
  %268 = add i32 %267, %133
  %269 = sub i32 %268, %55
  %270 = add i32 %269, %137
  %271 = sub i32 %270, %142
  %272 = add i32 %271, %143
  %273 = add i32 %272, %147
  %274 = add i32 %273, %166
  %275 = sub i32 %274, %170
  %276 = sub i32 %275, %58
  %277 = sub i32 %276, %193
  %278 = sub i32 %277, %196
  %279 = add i32 %278, %197
  %280 = sub i32 %279, %202
  %281 = add i32 %280, %6
  %282 = add i32 %281, %41
  %283 = sub i32 %282, %52
  %284 = sub i32 %283, %56
  %285 = sub i32 %284, %60
  %286 = sub i32 %285, %61
  %287 = add i32 %286, %64
  %288 = add i32 %287, %71
  %289 = sub i32 %288, %77
  %290 = sub i32 %289, %79
  %291 = sub i32 %290, %80
  %292 = add i32 %291, %81
  %293 = sub i32 %292, %82
  %294 = add i32 %293, %84
  %295 = add i32 %294, %85
  %296 = sub i32 %295, %86
  %297 = sub i32 %296, %93
  %298 = sub i32 %297, %95
  %299 = add i32 %298, %100
  %300 = add i32 %299, %101
  %301 = sub i32 %300, %103
  %302 = sub i32 %301, %106
  %303 = add i32 %302, %109
  %304 = add i32 %303, %110
  %305 = add i32 %304, %111
  %306 = sub i32 %305, %112
  %307 = add i32 %306, %116
  %308 = sub i32 %307, %119
  %309 = sub i32 %308, %124
  %310 = add i32 %309, %134
  %311 = sub i32 %310, %135
  %312 = add i32 %311, %136
  %313 = add i32 %312, %140
  %314 = add i32 %313, %141
  %315 = sub i32 %314, %144
  %316 = add i32 %315, %145
  %317 = add i32 %316, %146
  %318 = add i32 %317, %148
  %319 = sub i32 %318, %150
  %320 = sub i32 %319, %151
  %321 = sub i32 %320, %155
  %322 = add i32 %321, %157
  %323 = add i32 %322, %158
  %324 = sub i32 %323, %159
  %325 = add i32 %324, %160
  %326 = sub i32 %325, %161
  %327 = sub i32 %326, %163
  %328 = add i32 %327, %167
  %329 = sub i32 %328, %168
  %330 = add i32 %329, %169
  %331 = add i32 %330, %171
  %332 = add i32 %331, %172
  %333 = sub i32 %332, %174
  %334 = sub i32 %333, %177
  %335 = add i32 %334, %138
  %336 = sub i32 %335, %178
  %337 = sub i32 %336, %186
  %338 = sub i32 %337, %188
  %339 = sub i32 %338, %189
  %340 = sub i32 %339, %190
  %341 = add i32 %340, %195
  %342 = add i32 %341, %198
  %343 = add i32 %342, %201
  %344 = sub i32 %343, %203
  %345 = sub i32 %344, %204
  %346 = sub i32 %345, %208
  %347 = sub i32 %346, %209
  %348 = sub i32 %347, %211
  %349 = sub i32 %348, %20
  %350 = sub i32 %349, %21
  %351 = add i32 %350, %8
  %352 = add i32 %351, %35
  %353 = sub i32 %352, %50
  %354 = sub i32 %353, %69
  %355 = add i32 %354, %76
  %356 = add i32 %355, %90
  %357 = sub i32 %356, %92
  %358 = sub i32 %357, %94
  %359 = add i32 %358, %99
  %360 = sub i32 %359, %115
  %361 = sub i32 %360, %129
  %362 = sub i32 %361, %132
  %363 = sub i32 %362, %139
  %364 = sub i32 %363, %153
  %365 = sub i32 %364, %154
  %366 = add i32 %365, %176
  %367 = sub i32 %366, %180
  %368 = sub i32 %367, %182
  %369 = sub i32 %368, %185
  %370 = sub i32 %369, %192
  %371 = sub i32 %370, %200
  %372 = sub i32 %371, %206
  %373 = add i32 %372, %214
  %374 = add i32 %373, %216
  %375 = add i32 %374, %219
  %376 = sub i32 %375, %23
  %377 = add i32 %376, %244
  %378 = sub i32 %377, %123
  %379 = add i32 %378, %237
  %380 = add i32 %379, %242
  %381 = add i32 %380, %232
  %382 = icmp eq i32 %19, %381
  %383 = select i1 %382, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %384 = tail call i32 @puts(i8* nonnull dereferenceable(1) %383)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
