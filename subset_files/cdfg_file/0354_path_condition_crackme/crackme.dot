digraph "DFG for'crackme' function" {
	Node0x881510[shape=record, label="  %3 = sub i32 %0, %1"];
	Node0x881580[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x881640[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x881cc0[shape=record, label="  %6 = shl i32 %5, 2"];
	Node0x881d60[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x881dd0[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x881e40[shape=record, label="  %9 = or i32 %7, %0"];
	Node0x881ee0[shape=record, label="  %10 = shl i32 %5, 1"];
	Node0x881f80[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x881ff0[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x882060[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x8820d0[shape=record, label="  %14 = xor i32 %9, -1"];
	Node0x882170[shape=record, label="  %15 = mul i32 %14, -5"];
	Node0x8821e0[shape=record, label="  %16 = shl i32 %4, 2"];
	Node0x882250[shape=record, label="  %17 = sub i32 %13, %8"];
	Node0x8822f0[shape=record, label="  %18 = mul i32 %17, 3"];
	Node0x882360[shape=record, label="  %19 = sub i32 %8, %4"];
	Node0x8823d0[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0x882440[shape=record, label="  %21 = add i32 %20, %6"];
	Node0x8824b0[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x882520[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x882590[shape=record, label="  %24 = sub i32 %23, %11"];
	Node0x882600[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x882670[shape=record, label="  %26 = icmp eq i32 %3, %25"];
	Node0x822268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x882b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x882b60[shape=record, label="  ret void"];
	Node0x881510 -> Node0x881580;
	Node0x881580 -> Node0x881640;
	Node0x881640 -> Node0x881cc0;
	Node0x881cc0 -> Node0x881d60;
	Node0x881d60 -> Node0x881dd0;
	Node0x881dd0 -> Node0x881e40;
	Node0x881e40 -> Node0x881ee0;
	Node0x881ee0 -> Node0x881f80;
	Node0x881f80 -> Node0x881ff0;
	Node0x881ff0 -> Node0x882060;
	Node0x882060 -> Node0x8820d0;
	Node0x8820d0 -> Node0x882170;
	Node0x882170 -> Node0x8821e0;
	Node0x8821e0 -> Node0x882250;
	Node0x882250 -> Node0x8822f0;
	Node0x8822f0 -> Node0x882360;
	Node0x882360 -> Node0x8823d0;
	Node0x8823d0 -> Node0x882440;
	Node0x882440 -> Node0x8824b0;
	Node0x8824b0 -> Node0x882520;
	Node0x882520 -> Node0x882590;
	Node0x882590 -> Node0x882600;
	Node0x882600 -> Node0x882670;
	Node0x882670 -> Node0x822268;
	Node0x822268 -> Node0x882b10;
	Node0x882b10 -> Node0x882b60;
edge [color=red]
	Node0x881640 -> Node0x881cc0;
	Node0x881d60 -> Node0x881dd0;
	Node0x881d60 -> Node0x881e40;
	Node0x881640 -> Node0x881ee0;
	Node0x881ee0 -> Node0x881f80;
	Node0x881ff0 -> Node0x882060;
	Node0x881e40 -> Node0x8820d0;
	Node0x8820d0 -> Node0x882170;
	Node0x881580 -> Node0x8821e0;
	Node0x882060 -> Node0x882250;
	Node0x881dd0 -> Node0x882250;
	Node0x882250 -> Node0x8822f0;
	Node0x881dd0 -> Node0x882360;
	Node0x881580 -> Node0x882360;
	Node0x882360 -> Node0x8823d0;
	Node0x881e40 -> Node0x8823d0;
	Node0x8823d0 -> Node0x882440;
	Node0x881cc0 -> Node0x882440;
	Node0x882440 -> Node0x8824b0;
	Node0x882170 -> Node0x8824b0;
	Node0x8824b0 -> Node0x882520;
	Node0x8821e0 -> Node0x882520;
	Node0x882520 -> Node0x882590;
	Node0x881f80 -> Node0x882590;
	Node0x882590 -> Node0x882600;
	Node0x8822f0 -> Node0x882600;
	Node0x881510 -> Node0x882670;
	Node0x882600 -> Node0x882670;
	Node0x882670 -> Node0x822268;
	Node0x822268 -> Node0x882b10;
}
