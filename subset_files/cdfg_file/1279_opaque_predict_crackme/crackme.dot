digraph "DFG for'crackme' function" {
	Node0x15704b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1570b60[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x1570c20[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0x1570c90[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x1570d00[shape=record, label="  %7 = sub i32 %5, %6"];
	Node0x1570da0[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x1570e10[shape=record, label="  %9 = sub i32 %1, %0"];
	Node0x1570e80[shape=record, label="  %10 = shl i32 %1, 1"];
	Node0x1570ef0[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0x1570f60[shape=record, label="  %12 = sub i32 %9, %10"];
	Node0x1570fd0[shape=record, label="  %13 = add i32 %12, %11"];
	Node0x1571040[shape=record, label="  %14 = shl i32 %6, 1"];
	Node0x15710b0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1571120[shape=record, label="  %16 = xor i32 %0, -1"];
	Node0x1571190[shape=record, label="  %17 = and i32 %16, %1"];
	Node0x1571200[shape=record, label="  %18 = and i32 %8, %0"];
	Node0x1571270[shape=record, label="  %19 = add i32 %13, %17"];
	Node0x15712e0[shape=record, label="  %20 = add i32 %19, %18"];
	Node0x1571350[shape=record, label="  %21 = add i32 %20, %3"];
	Node0x15713c0[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x1571430[shape=record, label="  %23 = icmp eq i32 %7, %22"];
	Node0x1511268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x15718d0[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1571920[shape=record, label="  ret void"];
	Node0x15704b0 -> Node0x1570b60;
	Node0x1570b60 -> Node0x1570c20;
	Node0x1570c20 -> Node0x1570c90;
	Node0x1570c90 -> Node0x1570d00;
	Node0x1570d00 -> Node0x1570da0;
	Node0x1570da0 -> Node0x1570e10;
	Node0x1570e10 -> Node0x1570e80;
	Node0x1570e80 -> Node0x1570ef0;
	Node0x1570ef0 -> Node0x1570f60;
	Node0x1570f60 -> Node0x1570fd0;
	Node0x1570fd0 -> Node0x1571040;
	Node0x1571040 -> Node0x15710b0;
	Node0x15710b0 -> Node0x1571120;
	Node0x1571120 -> Node0x1571190;
	Node0x1571190 -> Node0x1571200;
	Node0x1571200 -> Node0x1571270;
	Node0x1571270 -> Node0x15712e0;
	Node0x15712e0 -> Node0x1571350;
	Node0x1571350 -> Node0x15713c0;
	Node0x15713c0 -> Node0x1571430;
	Node0x1571430 -> Node0x1511268;
	Node0x1511268 -> Node0x15718d0;
	Node0x15718d0 -> Node0x1571920;
edge [color=red]
	Node0x15704b0 -> Node0x1570b60;
	Node0x1570b60 -> Node0x1570c20;
	Node0x1570c20 -> Node0x1570d00;
	Node0x1570c90 -> Node0x1570d00;
	Node0x1570e10 -> Node0x1570f60;
	Node0x1570e80 -> Node0x1570f60;
	Node0x1570f60 -> Node0x1570fd0;
	Node0x1570ef0 -> Node0x1570fd0;
	Node0x1570c90 -> Node0x1571040;
	Node0x1571040 -> Node0x15710b0;
	Node0x1571120 -> Node0x1571190;
	Node0x1570da0 -> Node0x1571200;
	Node0x1570fd0 -> Node0x1571270;
	Node0x1571190 -> Node0x1571270;
	Node0x1571270 -> Node0x15712e0;
	Node0x1571200 -> Node0x15712e0;
	Node0x15712e0 -> Node0x1571350;
	Node0x15704b0 -> Node0x1571350;
	Node0x1571350 -> Node0x15713c0;
	Node0x15710b0 -> Node0x15713c0;
	Node0x1570d00 -> Node0x1571430;
	Node0x15713c0 -> Node0x1571430;
	Node0x1571430 -> Node0x1511268;
	Node0x1511268 -> Node0x15718d0;
}
