digraph "DFG for'crackme' function" {
	Node0x1052080[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x10520f0[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1052160[shape=record, label="  %7 = and i32 %2, %1"];
	Node0x1052200[shape=record, label="  %8 = sub i32 2, %6"];
	Node0x1052270[shape=record, label="  %9 = add i32 %8, %7"];
	Node0x10522e0[shape=record, label="  %10 = or i32 %2, %1"];
	Node0x1052350[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x10523c0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1052430[shape=record, label="  %13 = shl i32 %10, 2"];
	Node0x10524d0[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x1052540[shape=record, label="  %15 = xor i32 %6, -1"];
	Node0x10525e0[shape=record, label="  %16 = mul i32 %15, -5"];
	Node0x1052650[shape=record, label="  %17 = and i32 %5, %1"];
	Node0x10526f0[shape=record, label="  %18 = mul i32 %17, -6"];
	Node0x1052760[shape=record, label="  %19 = shl i32 %7, 2"];
	Node0x1052800[shape=record, label="  %20 = shl i32 %3, 1"];
	Node0x10528a0[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x1052910[shape=record, label="  %22 = xor i32 %3, %0"];
	Node0x1052980[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x10529f0[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x1052a90[shape=record, label="  %25 = add i32 %11, 2147483647"];
	Node0x1052b00[shape=record, label="  %26 = add i32 %25, %23"];
	Node0x1052b70[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x1052c10[shape=record, label="  %28 = sub i32 4, %0"];
	Node0x1052c80[shape=record, label="  %29 = sub i32 %28, %0"];
	Node0x1052cf0[shape=record, label="  %30 = add i32 %29, %10"];
	Node0x1052d60[shape=record, label="  %31 = add i32 %30, %12"];
	Node0x1052dd0[shape=record, label="  %32 = add i32 %31, %16"];
	Node0x1053050[shape=record, label="  %33 = add i32 %32, %18"];
	Node0x10530c0[shape=record, label="  %34 = sub i32 %33, %19"];
	Node0x1053130[shape=record, label="  %35 = add i32 %34, %22"];
	Node0x10531a0[shape=record, label="  %36 = add i32 %35, %23"];
	Node0x1053210[shape=record, label="  %37 = add i32 %36, %24"];
	Node0x1053280[shape=record, label="  %38 = sub i32 %37, %14"];
	Node0x10532f0[shape=record, label="  %39 = add i32 %38, %21"];
	Node0x1053360[shape=record, label="  %40 = add i32 %39, %27"];
	Node0x10533d0[shape=record, label="  %41 = icmp eq i32 %9, %40"];
	Node0xff2268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1053870[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0x10538c0[shape=record, label="  ret void"];
	Node0x1052080 -> Node0x10520f0;
	Node0x10520f0 -> Node0x1052160;
	Node0x1052160 -> Node0x1052200;
	Node0x1052200 -> Node0x1052270;
	Node0x1052270 -> Node0x10522e0;
	Node0x10522e0 -> Node0x1052350;
	Node0x1052350 -> Node0x10523c0;
	Node0x10523c0 -> Node0x1052430;
	Node0x1052430 -> Node0x10524d0;
	Node0x10524d0 -> Node0x1052540;
	Node0x1052540 -> Node0x10525e0;
	Node0x10525e0 -> Node0x1052650;
	Node0x1052650 -> Node0x10526f0;
	Node0x10526f0 -> Node0x1052760;
	Node0x1052760 -> Node0x1052800;
	Node0x1052800 -> Node0x10528a0;
	Node0x10528a0 -> Node0x1052910;
	Node0x1052910 -> Node0x1052980;
	Node0x1052980 -> Node0x10529f0;
	Node0x10529f0 -> Node0x1052a90;
	Node0x1052a90 -> Node0x1052b00;
	Node0x1052b00 -> Node0x1052b70;
	Node0x1052b70 -> Node0x1052c10;
	Node0x1052c10 -> Node0x1052c80;
	Node0x1052c80 -> Node0x1052cf0;
	Node0x1052cf0 -> Node0x1052d60;
	Node0x1052d60 -> Node0x1052dd0;
	Node0x1052dd0 -> Node0x1053050;
	Node0x1053050 -> Node0x10530c0;
	Node0x10530c0 -> Node0x1053130;
	Node0x1053130 -> Node0x10531a0;
	Node0x10531a0 -> Node0x1053210;
	Node0x1053210 -> Node0x1053280;
	Node0x1053280 -> Node0x10532f0;
	Node0x10532f0 -> Node0x1053360;
	Node0x1053360 -> Node0x10533d0;
	Node0x10533d0 -> Node0xff2268;
	Node0xff2268 -> Node0x1053870;
	Node0x1053870 -> Node0x10538c0;
edge [color=red]
	Node0x1052080 -> Node0x10520f0;
	Node0x10520f0 -> Node0x1052200;
	Node0x1052200 -> Node0x1052270;
	Node0x1052160 -> Node0x1052270;
	Node0x1052350 -> Node0x10523c0;
	Node0x10522e0 -> Node0x1052430;
	Node0x1052430 -> Node0x10524d0;
	Node0x10520f0 -> Node0x1052540;
	Node0x1052540 -> Node0x10525e0;
	Node0x1052080 -> Node0x1052650;
	Node0x1052650 -> Node0x10526f0;
	Node0x1052160 -> Node0x1052760;
	Node0x1052800 -> Node0x10528a0;
	Node0x1052350 -> Node0x1052a90;
	Node0x1052a90 -> Node0x1052b00;
	Node0x1052980 -> Node0x1052b00;
	Node0x1052b00 -> Node0x1052b70;
	Node0x1052c10 -> Node0x1052c80;
	Node0x1052c80 -> Node0x1052cf0;
	Node0x10522e0 -> Node0x1052cf0;
	Node0x1052cf0 -> Node0x1052d60;
	Node0x10523c0 -> Node0x1052d60;
	Node0x1052d60 -> Node0x1052dd0;
	Node0x10525e0 -> Node0x1052dd0;
	Node0x1052dd0 -> Node0x1053050;
	Node0x10526f0 -> Node0x1053050;
	Node0x1053050 -> Node0x10530c0;
	Node0x1052760 -> Node0x10530c0;
	Node0x10530c0 -> Node0x1053130;
	Node0x1052910 -> Node0x1053130;
	Node0x1053130 -> Node0x10531a0;
	Node0x1052980 -> Node0x10531a0;
	Node0x10531a0 -> Node0x1053210;
	Node0x10529f0 -> Node0x1053210;
	Node0x1053210 -> Node0x1053280;
	Node0x10524d0 -> Node0x1053280;
	Node0x1053280 -> Node0x10532f0;
	Node0x10528a0 -> Node0x10532f0;
	Node0x10532f0 -> Node0x1053360;
	Node0x1052b70 -> Node0x1053360;
	Node0x1052270 -> Node0x10533d0;
	Node0x1053360 -> Node0x10533d0;
	Node0x10533d0 -> Node0xff2268;
	Node0xff2268 -> Node0x1053870;
}
