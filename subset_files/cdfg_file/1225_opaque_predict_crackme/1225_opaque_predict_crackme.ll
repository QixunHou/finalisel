; ModuleID = '../.././c_source_file/1225_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1225_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %0
  %6 = and i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = xor i32 %5, %7
  %9 = or i32 %6, %0
  %10 = and i32 %4, %1
  %11 = xor i32 %10, -1
  %12 = xor i32 %11, %0
  %13 = and i32 %2, %0
  %14 = xor i32 %13, %11
  %15 = xor i32 %1, -1
  %16 = or i32 %15, %0
  %17 = xor i32 %16, -1
  %18 = or i32 %17, %2
  %19 = or i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %1, %0
  %22 = or i32 %21, %20
  %23 = or i32 %2, %1
  %24 = xor i32 %23, %0
  %25 = shl i32 %21, 1
  %26 = xor i32 %20, %1
  %27 = shl i32 %26, 1
  %28 = xor i32 %13, -1
  %29 = xor i32 %21, -1
  %30 = and i32 %28, %29
  %31 = or i32 %29, %2
  %32 = or i32 %13, %21
  %33 = or i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %13, %34
  %36 = or i32 %4, %1
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %0
  %39 = add i32 %6, 1
  %40 = and i32 %7, %0
  %41 = shl i32 %40, 1
  %42 = shl i32 %29, 1
  %43 = xor i32 %2, %0
  %44 = or i32 %43, %21
  %45 = shl i32 %44, 1
  %46 = or i32 %4, %0
  %47 = and i32 %46, %1
  %48 = and i32 %6, %0
  %49 = xor i32 %2, %1
  %50 = xor i32 %0, -1
  %51 = xor i32 %49, %50
  %52 = or i32 %48, %51
  %53 = and i32 %43, %21
  %54 = and i32 %21, %4
  %55 = and i32 %15, %0
  %56 = xor i32 %5, -1
  %57 = and i32 %56, %1
  %58 = and i32 %46, %29
  %59 = or i32 %21, %2
  %60 = or i32 %5, %6
  %61 = xor i32 %55, -1
  %62 = and i32 %4, %61
  %63 = and i32 %11, %0
  %64 = and i32 %36, %0
  %65 = and i32 %43, %61
  %66 = shl i32 %65, 1
  %67 = or i32 %20, %1
  %68 = or i32 %5, %37
  %69 = shl i32 %68, 1
  %70 = xor i32 %5, %1
  %71 = xor i32 %49, -1
  %72 = or i32 %71, %50
  %73 = and i32 %1, %0
  %74 = or i32 %73, %2
  %75 = or i32 %13, %10
  %76 = and i32 %19, %1
  %77 = shl i32 %76, 1
  %78 = and i32 %33, %71
  %79 = or i32 %43, %15
  %80 = or i32 %71, %34
  %81 = shl i32 %80, 1
  %82 = or i32 %71, %17
  %83 = and i32 %19, %21
  %84 = or i32 %43, %34
  %85 = and i32 %46, %21
  %86 = or i32 %5, %15
  %87 = xor i32 %43, -1
  %88 = and i32 %21, %87
  %89 = or i32 %87, %17
  %90 = xor i32 %33, %2
  %91 = xor i32 %23, %73
  %92 = or i32 %11, %50
  %93 = xor i32 %16, %2
  %94 = and i32 %36, %50
  %95 = and i32 %87, %1
  %96 = xor i32 %56, %1
  %97 = shl i32 %96, 2
  %98 = or i32 %13, %17
  %99 = or i32 %20, %15
  %100 = shl i32 %99, 1
  %101 = and i32 %23, %50
  %102 = or i32 %48, %101
  %103 = xor i32 %73, -1
  %104 = and i32 %71, %103
  %105 = or i32 %21, %87
  %106 = and i32 %6, %50
  %107 = and i32 %23, %0
  %108 = xor i32 %107, -1
  %109 = xor i32 %106, %108
  %110 = or i32 %73, %71
  %111 = or i32 %49, %55
  %112 = or i32 %13, %1
  %113 = and i32 %28, %1
  %114 = xor i32 %46, -1
  %115 = or i32 %114, %15
  %116 = and i32 %15, %2
  %117 = and i32 %116, %50
  %118 = or i32 %15, %2
  %119 = and i32 %118, %0
  %120 = or i32 %117, %119
  %121 = and i32 %49, %50
  %122 = and i32 %71, %0
  %123 = and i32 %43, %33
  %124 = and i32 %33, %4
  %125 = and i32 %43, %1
  %126 = xor i32 %46, %73
  %127 = shl i32 %126, 1
  %128 = xor i32 %37, %0
  %129 = or i32 %13, %29
  %130 = or i32 %21, %4
  %131 = shl i32 %11, 1
  %132 = or i32 %49, %50
  %133 = xor i32 %117, %132
  %134 = or i32 %36, %0
  %135 = and i32 %16, %71
  %136 = or i32 %48, %121
  %137 = or i32 %43, %1
  %138 = or i32 %55, %87
  %139 = or i32 %6, %50
  %140 = or i32 %87, %1
  %141 = and i32 %116, %0
  %142 = xor i32 %118, -1
  %143 = or i32 %142, %0
  %144 = xor i32 %141, %143
  %145 = and i32 %16, %2
  %146 = xor i32 %13, %16
  %147 = or i32 %43, %73
  %148 = xor i32 %23, -1
  %149 = xor i32 %148, %0
  %150 = and i32 %49, %61
  %151 = or i32 %5, %1
  %152 = and i32 %4, %103
  %153 = or i32 %49, %0
  %154 = or i32 %73, %4
  %155 = or i32 %36, %50
  %156 = or i32 %5, %21
  %157 = xor i32 %13, %33
  %158 = or i32 %87, %29
  %159 = xor i32 %10, %0
  %160 = or i32 %5, %29
  %161 = xor i32 %7, %0
  %162 = or i32 %73, %20
  %163 = xor i32 %17, %2
  %164 = and i32 %46, %15
  %165 = or i32 %43, %29
  %166 = or i32 %10, %50
  %167 = xor i32 %141, %51
  %168 = and i32 %87, %61
  %169 = or i32 %10, %55
  %170 = and i32 %29, %2
  %171 = and i32 %103, %2
  %172 = or i32 %49, %17
  %173 = xor i32 %73, %2
  %174 = and i32 %43, %29
  %175 = or i32 %11, %0
  %176 = and i32 %148, %50
  %177 = and i32 %10, %50
  %178 = mul i32 %177, 10
  %179 = and i32 %148, %0
  %180 = and i32 %10, %0
  %181 = shl i32 %180, 2
  %182 = and i32 %37, %50
  %183 = shl i32 %182, 1
  %184 = and i32 %37, %0
  %185 = add i32 %171, %34
  %186 = add i32 %185, %170
  %187 = add i32 %186, %93
  %188 = add i32 %187, %168
  %189 = add i32 %188, %162
  %190 = add i32 %189, %149
  %191 = add i32 %190, %137
  %192 = add i32 %191, %24
  %193 = add i32 %192, %14
  %194 = add i32 %193, %102
  %195 = add i32 %194, %167
  %196 = shl i32 %195, 1
  %197 = add i32 %98, %16
  %198 = sub i32 %197, %176
  %199 = mul i32 %198, 3
  %200 = mul i32 %6, 5
  %201 = add i32 %184, %179
  %202 = mul i32 %201, 9
  %203 = add i32 %55, %1
  %204 = sub i32 %61, %203
  %205 = sub i32 %204, %73
  %206 = sub i32 %205, %18
  %207 = add i32 %206, %6
  %208 = sub i32 %207, %25
  %209 = sub i32 %208, %31
  %210 = add i32 %209, %39
  %211 = sub i32 %210, %42
  %212 = add i32 %211, %5
  %213 = sub i32 %212, %54
  %214 = sub i32 %213, %59
  %215 = add i32 %214, %62
  %216 = add i32 %215, %74
  %217 = add i32 %216, %19
  %218 = sub i32 %217, %90
  %219 = add i32 %218, %36
  %220 = add i32 %219, %124
  %221 = add i32 %220, %71
  %222 = sub i32 %221, %130
  %223 = sub i32 %222, %13
  %224 = sub i32 %223, %145
  %225 = sub i32 %224, %152
  %226 = add i32 %225, %154
  %227 = add i32 %226, %163
  %228 = add i32 %227, %173
  %229 = sub i32 %228, %12
  %230 = sub i32 %229, %9
  %231 = add i32 %230, %22
  %232 = add i32 %231, %30
  %233 = sub i32 %232, %32
  %234 = add i32 %233, %35
  %235 = add i32 %234, %38
  %236 = add i32 %235, %47
  %237 = sub i32 %236, %53
  %238 = sub i32 %237, %57
  %239 = sub i32 %238, %58
  %240 = sub i32 %239, %60
  %241 = add i32 %240, %63
  %242 = add i32 %241, %64
  %243 = sub i32 %242, %67
  %244 = add i32 %243, %70
  %245 = sub i32 %244, %72
  %246 = sub i32 %245, %75
  %247 = add i32 %246, %78
  %248 = add i32 %247, %79
  %249 = add i32 %248, %82
  %250 = sub i32 %249, %83
  %251 = add i32 %250, %84
  %252 = sub i32 %251, %85
  %253 = add i32 %252, %86
  %254 = sub i32 %253, %88
  %255 = sub i32 %254, %89
  %256 = add i32 %255, %91
  %257 = sub i32 %256, %92
  %258 = add i32 %257, %94
  %259 = sub i32 %258, %95
  %260 = sub i32 %259, %104
  %261 = sub i32 %260, %105
  %262 = sub i32 %261, %110
  %263 = add i32 %262, %111
  %264 = sub i32 %263, %112
  %265 = add i32 %264, %113
  %266 = sub i32 %265, %115
  %267 = add i32 %266, %121
  %268 = add i32 %267, %122
  %269 = add i32 %268, %123
  %270 = sub i32 %269, %125
  %271 = sub i32 %270, %128
  %272 = sub i32 %271, %129
  %273 = sub i32 %272, %131
  %274 = sub i32 %273, %134
  %275 = add i32 %274, %135
  %276 = sub i32 %275, %138
  %277 = sub i32 %276, %139
  %278 = sub i32 %277, %101
  %279 = sub i32 %278, %140
  %280 = add i32 %279, %146
  %281 = sub i32 %280, %147
  %282 = sub i32 %281, %150
  %283 = add i32 %282, %151
  %284 = sub i32 %283, %153
  %285 = sub i32 %284, %155
  %286 = sub i32 %285, %156
  %287 = sub i32 %286, %157
  %288 = sub i32 %287, %158
  %289 = sub i32 %288, %159
  %290 = sub i32 %289, %160
  %291 = sub i32 %290, %161
  %292 = add i32 %291, %164
  %293 = sub i32 %292, %165
  %294 = add i32 %293, %166
  %295 = add i32 %294, %169
  %296 = add i32 %295, %172
  %297 = add i32 %296, %174
  %298 = add i32 %297, %175
  %299 = sub i32 %298, %27
  %300 = sub i32 %299, %41
  %301 = sub i32 %300, %45
  %302 = add i32 %301, %52
  %303 = sub i32 %302, %66
  %304 = sub i32 %303, %69
  %305 = sub i32 %304, %77
  %306 = sub i32 %305, %81
  %307 = add i32 %306, %97
  %308 = sub i32 %307, %100
  %309 = sub i32 %308, %109
  %310 = add i32 %309, %120
  %311 = sub i32 %310, %127
  %312 = add i32 %311, %133
  %313 = sub i32 %312, %136
  %314 = add i32 %313, %144
  %315 = add i32 %314, %178
  %316 = sub i32 %315, %181
  %317 = sub i32 %316, %183
  %318 = add i32 %317, %200
  %319 = add i32 %318, %202
  %320 = add i32 %319, %199
  %321 = add i32 %320, %196
  %322 = icmp eq i32 %8, %321
  %323 = select i1 %322, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %324 = tail call i32 @puts(i8* nonnull dereferenceable(1) %323)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
