; ModuleID = '../.././c_source_file/0350_path_condition_crackme.c'
source_filename = "../.././c_source_file/0350_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = xor i32 %7, %0
  %9 = shl i32 %8, 1
  %10 = sub i32 %9, %4
  %11 = and i32 %6, %0
  %12 = or i32 %2, %1
  %13 = xor i32 %12, %0
  %14 = or i32 %11, %13
  %15 = shl i32 %14, 1
  %16 = add i32 %10, %15
  %17 = xor i32 %3, -1
  %18 = and i32 %17, %4
  %19 = xor i32 %4, %3
  %20 = or i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = xor i32 %3, 2147483647
  %24 = and i32 %23, %4
  %25 = shl i32 %24, 1
  %26 = xor i32 %2, %0
  %27 = or i32 %26, %1
  %28 = xor i32 %0, -1
  %29 = xor i32 %1, -1
  %30 = and i32 %29, %2
  %31 = and i32 %30, %28
  %32 = or i32 %29, %2
  %33 = and i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, %34
  %36 = and i32 %1, %0
  %37 = xor i32 %12, %36
  %38 = xor i32 %2, -1
  %39 = or i32 %38, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %1, %0
  %42 = or i32 %41, %40
  %43 = or i32 %2, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %29
  %46 = and i32 %38, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %1
  %49 = xor i32 %12, -1
  %50 = or i32 %36, %49
  %51 = or i32 %29, %0
  %52 = xor i32 %51, -1
  %53 = xor i32 %2, %1
  %54 = or i32 %53, %52
  %55 = or i32 %53, %36
  %56 = or i32 %1, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %53, %57
  %59 = xor i32 %26, -1
  %60 = and i32 %56, %59
  %61 = and i32 %53, %28
  %62 = xor i32 %61, -1
  %63 = xor i32 %11, %62
  %64 = and i32 %59, %29
  %65 = xor i32 %44, %1
  %66 = and i32 %51, %59
  %67 = shl i32 %66, 1
  %68 = and i32 %26, %56
  %69 = xor i32 %46, %1
  %70 = shl i32 %69, 1
  %71 = and i32 %29, %0
  %72 = or i32 %26, %71
  %73 = xor i32 %43, %1
  %74 = xor i32 %41, -1
  %75 = or i32 %44, %74
  %76 = and i32 %6, %28
  %77 = and i32 %12, %0
  %78 = xor i32 %77, -1
  %79 = xor i32 %76, %78
  %80 = xor i32 %53, -1
  %81 = or i32 %80, %0
  %82 = and i32 %53, %56
  %83 = or i32 %59, %1
  %84 = or i32 %49, %0
  %85 = and i32 %2, %0
  %86 = or i32 %85, %49
  %87 = shl i32 %86, 1
  %88 = xor i32 %71, -1
  %89 = or i32 %38, %1
  %90 = xor i32 %89, %36
  %91 = and i32 %12, %28
  %92 = or i32 %85, %74
  %93 = or i32 %38, %74
  %94 = or i32 %7, %0
  %95 = and i32 %59, %1
  %96 = shl i32 %51, 1
  %97 = and i32 %30, %0
  %98 = xor i32 %32, %0
  %99 = or i32 %97, %98
  %100 = or i32 %26, %41
  %101 = xor i32 %89, -1
  %102 = or i32 %36, %101
  %103 = and i32 %88, %2
  %104 = or i32 %44, %1
  %105 = xor i32 %89, %0
  %106 = and i32 %53, %0
  %107 = or i32 %59, %52
  %108 = and i32 %7, %0
  %109 = and i32 %41, %38
  %110 = or i32 %59, %57
  %111 = or i32 %41, %59
  %112 = or i32 %53, %28
  %113 = xor i32 %112, -1
  %114 = or i32 %31, %113
  %115 = and i32 %43, %1
  %116 = or i32 %49, %28
  %117 = and i32 %38, %74
  %118 = or i32 %11, %91
  %119 = or i32 %46, %1
  %120 = or i32 %7, %28
  %121 = and i32 %38, %1
  %122 = xor i32 %121, -1
  %123 = and i32 %122, %28
  %124 = and i32 %43, %74
  %125 = and i32 %7, %28
  %126 = or i32 %80, %52
  %127 = xor i32 %85, %12
  %128 = or i32 %41, %2
  %129 = shl i32 %128, 1
  %130 = or i32 %46, %74
  %131 = xor i32 %39, %36
  %132 = xor i32 %53, %0
  %133 = xor i32 %132, -1
  %134 = or i32 %11, %133
  %135 = or i32 %85, %57
  %136 = xor i32 %57, %2
  %137 = and i32 %41, %59
  %138 = or i32 %89, %28
  %139 = xor i32 %31, %112
  %140 = xor i32 %36, -1
  %141 = and i32 %38, %140
  %142 = or i32 %41, %44
  %143 = or i32 %52, %2
  %144 = or i32 %121, %28
  %145 = xor i32 %43, %36
  %146 = xor i32 %121, %0
  %147 = or i32 %80, %57
  %148 = and i32 %39, %74
  %149 = and i32 %51, %38
  %150 = xor i32 %71, %122
  %151 = and i32 %38, %88
  %152 = and i32 %53, %140
  %153 = or i32 %53, %0
  %154 = or i32 %85, %41
  %155 = xor i32 %97, %153
  %156 = or i32 %46, %41
  %157 = or i32 %40, %1
  %158 = or i32 %26, %74
  %159 = and i32 %122, %0
  %160 = and i32 %80, %28
  %161 = and i32 %140, %2
  %162 = and i32 %56, %2
  %163 = xor i32 %52, %2
  %164 = xor i32 %71, %7
  %165 = or i32 %38, %57
  %166 = or i32 %71, %38
  %167 = and i32 %89, %28
  %168 = shl i32 %167, 1
  %169 = xor i32 %85, -1
  %170 = add i32 %85, 1
  %171 = or i32 %101, %0
  %172 = add i32 %43, 1
  %173 = and i32 %59, %74
  %174 = and i32 %26, %41
  %175 = xor i32 %6, %0
  %176 = xor i32 %169, %1
  %177 = or i32 %36, %80
  %178 = or i32 %26, %52
  %179 = or i32 %6, %28
  %180 = and i32 %26, %74
  %181 = and i32 %74, %2
  %182 = and i32 %89, %0
  %183 = or i32 %121, %0
  %184 = and i32 %169, %29
  %185 = xor i32 %11, %132
  %186 = and i32 %26, %29
  %187 = xor i32 %106, 1073741823
  %188 = xor i32 %187, %76
  %189 = xor i32 %36, %2
  %190 = or i32 %76, %106
  %191 = or i32 %85, %121
  %192 = and i32 %49, %28
  %193 = and i32 %121, %28
  %194 = and i32 %49, %0
  %195 = mul i32 %194, -14
  %196 = and i32 %121, %0
  %197 = shl i32 %196, 2
  %198 = and i32 %101, %28
  %199 = mul i32 %198, -13
  %200 = and i32 %101, %0
  %201 = shl i32 %11, 2
  %202 = add i32 %13, %2
  %203 = add i32 %202, %191
  %204 = add i32 %203, %174
  %205 = add i32 %204, %145
  %206 = add i32 %205, %119
  %207 = add i32 %206, %115
  %208 = add i32 %207, %107
  %209 = add i32 %208, %106
  %210 = add i32 %209, %84
  %211 = add i32 %210, %68
  %212 = add i32 %211, %65
  %213 = add i32 %212, %27
  %214 = shl i32 %213, 1
  %215 = add i32 %173, %156
  %216 = sub i32 %147, %215
  %217 = add i32 %216, %130
  %218 = mul i32 %217, 5
  %219 = sub i32 %192, %76
  %220 = mul i32 %219, 9
  %221 = add i32 %188, %53
  %222 = shl i32 %221, 2
  %223 = sub i32 %109, %134
  %224 = mul i32 %223, 3
  %225 = add i32 %71, 4
  %226 = add i32 %225, %71
  %227 = add i32 %226, %57
  %228 = add i32 %227, %40
  %229 = sub i32 %228, %85
  %230 = sub i32 %229, %93
  %231 = sub i32 %230, %96
  %232 = sub i32 %231, %103
  %233 = add i32 %232, %59
  %234 = add i32 %233, %117
  %235 = add i32 %234, %47
  %236 = sub i32 %235, %12
  %237 = add i32 %236, %136
  %238 = sub i32 %237, %141
  %239 = add i32 %238, %143
  %240 = sub i32 %239, %149
  %241 = sub i32 %240, %151
  %242 = sub i32 %241, %161
  %243 = sub i32 %242, %162
  %244 = add i32 %243, %163
  %245 = sub i32 %244, %121
  %246 = sub i32 %245, %165
  %247 = add i32 %246, %166
  %248 = add i32 %247, %170
  %249 = add i32 %248, %172
  %250 = add i32 %249, %89
  %251 = add i32 %250, %181
  %252 = sub i32 %251, %189
  %253 = add i32 %252, %37
  %254 = add i32 %253, %42
  %255 = sub i32 %254, %45
  %256 = sub i32 %255, %48
  %257 = add i32 %256, %50
  %258 = add i32 %257, %54
  %259 = add i32 %258, %55
  %260 = add i32 %259, %58
  %261 = add i32 %260, %60
  %262 = sub i32 %261, %64
  %263 = add i32 %262, %72
  %264 = add i32 %263, %73
  %265 = sub i32 %264, %75
  %266 = add i32 %265, %81
  %267 = add i32 %266, %82
  %268 = sub i32 %267, %83
  %269 = add i32 %268, %90
  %270 = sub i32 %269, %91
  %271 = sub i32 %270, %92
  %272 = sub i32 %271, %94
  %273 = add i32 %272, %95
  %274 = sub i32 %273, %100
  %275 = sub i32 %274, %102
  %276 = add i32 %275, %104
  %277 = sub i32 %276, %105
  %278 = add i32 %277, %108
  %279 = sub i32 %278, %110
  %280 = sub i32 %279, %111
  %281 = add i32 %280, %116
  %282 = sub i32 %281, %120
  %283 = add i32 %282, %123
  %284 = sub i32 %283, %77
  %285 = sub i32 %284, %124
  %286 = sub i32 %285, %125
  %287 = add i32 %286, %126
  %288 = add i32 %287, %127
  %289 = sub i32 %288, %129
  %290 = sub i32 %289, %131
  %291 = add i32 %290, %135
  %292 = sub i32 %291, %137
  %293 = sub i32 %292, %138
  %294 = sub i32 %293, %142
  %295 = add i32 %294, %144
  %296 = add i32 %295, %146
  %297 = sub i32 %296, %148
  %298 = sub i32 %297, %150
  %299 = sub i32 %298, %152
  %300 = add i32 %299, %153
  %301 = sub i32 %300, %154
  %302 = add i32 %301, %157
  %303 = add i32 %302, %158
  %304 = add i32 %303, %159
  %305 = sub i32 %304, %160
  %306 = add i32 %305, %132
  %307 = sub i32 %306, %164
  %308 = sub i32 %307, %171
  %309 = add i32 %308, %175
  %310 = sub i32 %309, %176
  %311 = sub i32 %310, %177
  %312 = sub i32 %311, %178
  %313 = sub i32 %312, %179
  %314 = sub i32 %313, %180
  %315 = sub i32 %314, %182
  %316 = sub i32 %315, %183
  %317 = add i32 %316, %184
  %318 = sub i32 %317, %186
  %319 = sub i32 %318, %61
  %320 = sub i32 %319, %193
  %321 = add i32 %320, %200
  %322 = add i32 %321, %18
  %323 = add i32 %322, %19
  %324 = add i32 %323, %20
  %325 = sub i32 %324, %35
  %326 = sub i32 %325, %63
  %327 = sub i32 %326, %67
  %328 = sub i32 %327, %70
  %329 = add i32 %328, %79
  %330 = sub i32 %329, %87
  %331 = add i32 %330, %99
  %332 = add i32 %331, %114
  %333 = add i32 %332, %118
  %334 = add i32 %333, %139
  %335 = sub i32 %334, %155
  %336 = sub i32 %335, %168
  %337 = add i32 %336, %185
  %338 = add i32 %337, %190
  %339 = add i32 %338, %195
  %340 = sub i32 %339, %197
  %341 = add i32 %340, %199
  %342 = sub i32 %341, %201
  %343 = sub i32 %342, %25
  %344 = add i32 %343, %220
  %345 = add i32 %344, %22
  %346 = add i32 %345, %224
  %347 = add i32 %346, %218
  %348 = add i32 %347, %222
  %349 = add i32 %348, %214
  %350 = icmp eq i32 %16, %349
  %351 = select i1 %350, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %352 = tail call i32 @puts(i8* nonnull dereferenceable(1) %351)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
