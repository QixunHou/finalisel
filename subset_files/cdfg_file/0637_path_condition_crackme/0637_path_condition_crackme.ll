; ModuleID = '../.././c_source_file/0637_path_condition_crackme.c'
source_filename = "../.././c_source_file/0637_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %10
  %14 = xor i32 %2, %1
  %15 = mul i32 %14, 5
  %16 = add i32 %15, %13
  %17 = add i32 %16, %7
  %18 = shl i32 %3, 2
  %19 = xor i32 %18, -4
  %20 = xor i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = and i32 %4, %3
  %24 = xor i32 %23, -1
  %25 = or i32 %4, %3
  %26 = xor i32 %25, -1
  %27 = mul i32 %26, -6
  %28 = shl i32 %7, 3
  %29 = xor i32 %28, -8
  %30 = and i32 %6, %3
  %31 = shl i32 %23, 1
  %32 = xor i32 %2, -1
  %33 = and i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %32, %34
  %36 = or i32 %2, %1
  %37 = xor i32 %36, %0
  %38 = xor i32 %0, -1
  %39 = and i32 %32, %1
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %38
  %42 = or i32 %1, %0
  %43 = and i32 %11, %42
  %44 = and i32 %8, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %10, %2
  %47 = or i32 %32, %1
  %48 = or i32 %47, %38
  %49 = and i32 %8, %2
  %50 = and i32 %49, %0
  %51 = or i32 %8, %2
  %52 = and i32 %51, %38
  %53 = or i32 %50, %52
  %54 = or i32 %44, %2
  %55 = or i32 %14, %44
  %56 = and i32 %2, %0
  %57 = xor i32 %56, %9
  %58 = and i32 %2, %1
  %59 = or i32 %58, %0
  %60 = or i32 %32, %0
  %61 = xor i32 %60, %1
  %62 = xor i32 %42, -1
  %63 = or i32 %62, %2
  %64 = xor i32 %1, %0
  %65 = xor i32 %64, -1
  %66 = or i32 %2, %0
  %67 = xor i32 %66, %1
  %68 = xor i32 %14, -1
  %69 = xor i32 %68, %0
  %70 = add i32 %2, 1
  %71 = or i32 %12, %1
  %72 = xor i32 %56, -1
  %73 = and i32 %72, %8
  %74 = and i32 %58, %38
  %75 = and i32 %14, %0
  %76 = or i32 %74, %75
  %77 = xor i32 %47, -1
  %78 = or i32 %33, %77
  %79 = and i32 %12, %8
  %80 = xor i32 %72, %1
  %81 = or i32 %11, %10
  %82 = or i32 %14, %62
  %83 = and i32 %42, %12
  %84 = and i32 %32, %65
  %85 = shl i32 %84, 1
  %86 = and i32 %12, %1
  %87 = or i32 %39, %38
  %88 = and i32 %14, %34
  %89 = or i32 %33, %68
  %90 = xor i32 %40, %0
  %91 = shl i32 %90, 1
  %92 = and i32 %58, %0
  %93 = and i32 %14, %38
  %94 = or i32 %92, %93
  %95 = xor i32 %60, -1
  %96 = or i32 %64, %95
  %97 = xor i32 %66, -1
  %98 = or i32 %64, %97
  %99 = or i32 %11, %65
  %100 = xor i32 %56, %42
  %101 = or i32 %68, %38
  %102 = shl i32 %101, 2
  %103 = and i32 %42, %32
  %104 = add i32 %11, 1
  %105 = or i32 %11, %33
  %106 = and i32 %47, %0
  %107 = xor i32 %36, -1
  %108 = add i32 %36, 1
  %109 = or i32 %14, %0
  %110 = xor i32 %109, -1
  %111 = or i32 %50, %110
  %112 = or i32 %12, %65
  %113 = xor i32 %44, %2
  %114 = and i32 %42, %68
  %115 = xor i32 %58, -1
  %116 = xor i32 %115, %0
  %117 = shl i32 %116, 1
  %118 = and i32 %72, %65
  %119 = xor i32 %107, %0
  %120 = or i32 %44, %68
  %121 = or i32 %56, %8
  %122 = or i32 %33, %97
  %123 = and i32 %11, %65
  %124 = and i32 %32, %0
  %125 = xor i32 %124, -1
  %126 = and i32 %125, %1
  %127 = or i32 %56, %39
  %128 = or i32 %107, %0
  %129 = shl i32 %128, 1
  %130 = and i32 %60, %65
  %131 = add i32 %56, 1
  %132 = xor i32 %39, %0
  %133 = and i32 %9, %32
  %134 = add i32 %124, 1
  %135 = or i32 %11, %8
  %136 = xor i32 %34, %2
  %137 = and i32 %9, %12
  %138 = add i32 %39, 1
  %139 = xor i32 %60, %33
  %140 = shl i32 %139, 1
  %141 = and i32 %72, %1
  %142 = and i32 %14, %9
  %143 = or i32 %44, %32
  %144 = shl i32 %143, 1
  %145 = xor i32 %66, %33
  %146 = or i32 %12, %8
  %147 = or i32 %12, %62
  %148 = shl i32 %147, 1
  %149 = and i32 %125, %65
  %150 = shl i32 %149, 1
  %151 = or i32 %56, %1
  %152 = xor i32 %50, -1
  %153 = xor i32 %52, %152
  %154 = or i32 %65, %2
  %155 = and i32 %66, %8
  %156 = xor i32 %92, -1
  %157 = xor i32 %37, %156
  %158 = or i32 %124, %8
  %159 = shl i32 %158, 1
  %160 = or i32 %92, %37
  %161 = xor i32 %14, %0
  %162 = xor i32 %161, -1
  %163 = xor i32 %50, %162
  %164 = and i32 %68, %45
  %165 = or i32 %56, %107
  %166 = xor i32 %56, %36
  %167 = or i32 %68, %62
  %168 = and i32 %64, %72
  %169 = and i32 %36, %0
  %170 = or i32 %97, %1
  %171 = or i32 %36, %0
  %172 = shl i32 %171, 1
  %173 = xor i32 %95, %1
  %174 = or i32 %44, %12
  %175 = shl i32 %174, 1
  %176 = and i32 %115, %0
  %177 = xor i32 %58, %0
  %178 = xor i32 %97, %1
  %179 = or i32 %97, %65
  %180 = or i32 %68, %10
  %181 = or i32 %124, %1
  %182 = or i32 %95, %1
  %183 = or i32 %39, %0
  %184 = and i32 %47, %38
  %185 = xor i32 %169, -1
  %186 = xor i32 %74, %185
  %187 = xor i32 %44, %40
  %188 = or i32 %107, %38
  %189 = or i32 %95, %8
  %190 = and i32 %66, %65
  %191 = shl i32 %190, 1
  %192 = or i32 %64, %2
  %193 = shl i32 %2, 1
  %194 = and i32 %14, %45
  %195 = xor i32 %124, %1
  %196 = and i32 %66, %64
  %197 = and i32 %11, %34
  %198 = or i32 %33, %32
  %199 = and i32 %9, %2
  %200 = or i32 %74, %169
  %201 = or i32 %32, %65
  %202 = or i32 %124, %64
  %203 = shl i32 %202, 1
  %204 = or i32 %11, %62
  %205 = or i32 %124, %77
  %206 = xor i32 %33, %2
  %207 = or i32 %50, %161
  %208 = xor i32 %124, %47
  %209 = and i32 %60, %8
  %210 = shl i32 %209, 1
  %211 = add i32 %42, 1
  %212 = xor i32 %47, %0
  %213 = and i32 %11, %1
  %214 = xor i32 %9, %2
  %215 = shl i32 %214, 1
  %216 = xor i32 %125, %1
  %217 = and i32 %60, %64
  %218 = xor i32 %56, %1
  %219 = or i32 %11, %1
  %220 = and i32 %60, %1
  %221 = and i32 %40, %0
  %222 = or i32 %77, %0
  %223 = and i32 %40, %38
  %224 = shl i32 %223, 1
  %225 = xor i32 %44, %115
  %226 = shl i32 %95, 2
  %227 = add i32 %58, 1
  %228 = or i32 %32, %62
  %229 = and i32 %64, %125
  %230 = or i32 %56, %10
  %231 = xor i32 %62, %2
  %232 = xor i32 %51, %0
  %233 = xor i32 %232, %152
  %234 = and i32 %66, %1
  %235 = xor i32 %10, %2
  %236 = xor i32 %47, %33
  %237 = or i32 %97, %8
  %238 = or i32 %11, %64
  %239 = and i32 %36, %38
  %240 = or i32 %92, %239
  %241 = and i32 %64, %12
  %242 = and i32 %11, %8
  %243 = and i32 %115, %38
  %244 = or i32 %33, %12
  %245 = and i32 %49, %38
  %246 = or i32 %14, %38
  %247 = xor i32 %245, %246
  %248 = or i32 %11, %44
  %249 = shl i32 %248, 1
  %250 = and i32 %64, %2
  %251 = and i32 %14, %42
  %252 = and i32 %11, %64
  %253 = or i32 %58, %44
  %254 = xor i32 %239, %156
  %255 = or i32 %36, %38
  %256 = and i32 %11, %45
  %257 = or i32 %33, %107
  %258 = or i32 %95, %65
  %259 = and i32 %12, %45
  %260 = shl i32 %68, 1
  %261 = or i32 %124, %58
  %262 = xor i32 %45, %2
  %263 = and i32 %125, %8
  %264 = and i32 %42, %2
  %265 = xor i32 %93, 2147483647
  %266 = xor i32 %265, %92
  %267 = shl i32 %266, 1
  %268 = or i32 %56, %62
  %269 = xor i32 %50, %109
  %270 = add i32 %66, 1
  %271 = or i32 %56, %65
  %272 = and i32 %64, %32
  %273 = xor i32 %56, %40
  %274 = or i32 %33, %2
  %275 = shl i32 %274, 1
  %276 = or i32 %92, %162
  %277 = or i32 %33, %95
  %278 = xor i32 %92, %161
  %279 = shl i32 %278, 1
  %280 = and i32 %12, %34
  %281 = or i32 %58, %38
  %282 = or i32 %68, %0
  %283 = shl i32 %66, 1
  %284 = or i32 %47, %0
  %285 = or i32 %115, %0
  %286 = and i32 %11, %9
  %287 = and i32 %12, %65
  %288 = shl i32 %287, 1
  %289 = or i32 %124, %65
  %290 = xor i32 %36, %33
  %291 = or i32 %77, %38
  %292 = and i32 %32, %45
  %293 = xor i32 %246, -1
  %294 = or i32 %245, %293
  %295 = or i32 %64, %12
  %296 = or i32 %40, %0
  %297 = and i32 %51, %0
  %298 = xor i32 %297, -1
  %299 = xor i32 %245, %298
  %300 = or i32 %245, %297
  %301 = and i32 %68, %0
  %302 = and i32 %45, %2
  %303 = xor i32 %124, %115
  %304 = shl i32 %303, 1
  %305 = xor i32 %75, 2147483647
  %306 = xor i32 %305, %74
  %307 = shl i32 %306, 1
  %308 = and i32 %34, %2
  %309 = and i32 %9, %68
  %310 = or i32 %14, %33
  %311 = or i32 %32, %10
  %312 = or i32 %39, %44
  %313 = or i32 %56, %64
  %314 = or i32 %50, %232
  %315 = xor i32 %42, %2
  %316 = or i32 %14, %10
  %317 = and i32 %65, %2
  %318 = or i32 %64, %32
  %319 = shl i32 %33, 1
  %320 = and i32 %107, %38
  %321 = mul i32 %320, 12
  %322 = and i32 %39, %38
  %323 = mul i32 %322, -14
  %324 = and i32 %107, %0
  %325 = and i32 %39, %0
  %326 = shl i32 %325, 3
  %327 = and i32 %77, %38
  %328 = shl i32 %327, 4
  %329 = mul i32 %74, -22
  %330 = and i32 %77, %0
  %331 = shl i32 %330, 2
  %332 = add i32 %8, %0
  %333 = add i32 %332, %42
  %334 = add i32 %333, %64
  %335 = add i32 %334, %39
  %336 = add i32 %335, %36
  %337 = add i32 %336, %124
  %338 = add i32 %337, %136
  %339 = add i32 %338, %113
  %340 = add i32 %339, %290
  %341 = add i32 %340, %284
  %342 = add i32 %341, %256
  %343 = add i32 %342, %244
  %344 = add i32 %343, %221
  %345 = add i32 %344, %194
  %346 = add i32 %345, %180
  %347 = add i32 %346, %167
  %348 = add i32 %347, %127
  %349 = add i32 %348, %105
  %350 = add i32 %349, %4
  %351 = add i32 %350, %163
  %352 = shl i32 %351, 1
  %353 = add i32 %268, %253
  %354 = sub i32 %353, %142
  %355 = add i32 %354, %130
  %356 = sub i32 %355, %98
  %357 = add i32 %356, %57
  %358 = mul i32 %357, 3
  %359 = sub i32 %324, %92
  %360 = mul i32 %359, 7
  %361 = sub i32 %230, %176
  %362 = mul i32 %361, 5
  %363 = add i32 %286, %47
  %364 = shl i32 %363, 2
  %365 = sub i32 %1, %0
  %366 = add i32 %365, %65
  %367 = add i32 %366, %70
  %368 = add i32 %367, %10
  %369 = sub i32 %368, %9
  %370 = add i32 %369, %211
  %371 = add i32 %370, %34
  %372 = sub i32 %371, %3
  %373 = sub i32 %372, %35
  %374 = add i32 %373, %46
  %375 = sub i32 %374, %54
  %376 = add i32 %375, %63
  %377 = add i32 %376, %58
  %378 = add i32 %377, %103
  %379 = add i32 %378, %104
  %380 = add i32 %379, %108
  %381 = add i32 %380, %131
  %382 = sub i32 %381, %133
  %383 = add i32 %382, %134
  %384 = add i32 %383, %138
  %385 = sub i32 %384, %154
  %386 = sub i32 %385, %11
  %387 = add i32 %386, %192
  %388 = sub i32 %387, %193
  %389 = add i32 %388, %198
  %390 = sub i32 %389, %199
  %391 = sub i32 %390, %201
  %392 = add i32 %391, %206
  %393 = add i32 %392, %227
  %394 = add i32 %393, %228
  %395 = add i32 %394, %231
  %396 = add i32 %395, %235
  %397 = add i32 %396, %250
  %398 = sub i32 %397, %262
  %399 = add i32 %398, %264
  %400 = add i32 %399, %270
  %401 = sub i32 %400, %272
  %402 = add i32 %401, %60
  %403 = sub i32 %402, %292
  %404 = add i32 %403, %302
  %405 = add i32 %404, %308
  %406 = add i32 %405, %311
  %407 = sub i32 %406, %56
  %408 = add i32 %407, %77
  %409 = sub i32 %408, %315
  %410 = add i32 %409, %317
  %411 = add i32 %410, %318
  %412 = sub i32 %411, %319
  %413 = add i32 %412, %4
  %414 = add i32 %413, %37
  %415 = add i32 %414, %41
  %416 = sub i32 %415, %43
  %417 = sub i32 %416, %48
  %418 = add i32 %417, %55
  %419 = sub i32 %418, %59
  %420 = add i32 %419, %61
  %421 = add i32 %420, %67
  %422 = add i32 %421, %69
  %423 = sub i32 %422, %71
  %424 = sub i32 %423, %73
  %425 = sub i32 %424, %78
  %426 = add i32 %425, %79
  %427 = sub i32 %426, %80
  %428 = add i32 %427, %81
  %429 = add i32 %428, %82
  %430 = add i32 %429, %83
  %431 = sub i32 %430, %85
  %432 = sub i32 %431, %86
  %433 = sub i32 %432, %87
  %434 = add i32 %433, %88
  %435 = add i32 %434, %89
  %436 = add i32 %435, %96
  %437 = sub i32 %436, %99
  %438 = sub i32 %437, %100
  %439 = add i32 %438, %106
  %440 = add i32 %439, %112
  %441 = sub i32 %440, %114
  %442 = add i32 %441, %118
  %443 = add i32 %442, %119
  %444 = sub i32 %443, %120
  %445 = add i32 %444, %121
  %446 = add i32 %445, %122
  %447 = add i32 %446, %123
  %448 = add i32 %447, %126
  %449 = add i32 %448, %132
  %450 = add i32 %449, %135
  %451 = add i32 %450, %137
  %452 = add i32 %451, %141
  %453 = sub i32 %452, %144
  %454 = add i32 %453, %145
  %455 = sub i32 %454, %146
  %456 = sub i32 %455, %151
  %457 = sub i32 %456, %155
  %458 = sub i32 %457, %164
  %459 = sub i32 %458, %165
  %460 = add i32 %459, %166
  %461 = add i32 %460, %168
  %462 = sub i32 %461, %169
  %463 = add i32 %462, %170
  %464 = add i32 %463, %173
  %465 = add i32 %464, %177
  %466 = sub i32 %465, %178
  %467 = add i32 %466, %179
  %468 = sub i32 %467, %181
  %469 = add i32 %468, %182
  %470 = sub i32 %469, %183
  %471 = add i32 %470, %184
  %472 = sub i32 %471, %187
  %473 = add i32 %472, %188
  %474 = add i32 %473, %75
  %475 = add i32 %474, %189
  %476 = sub i32 %475, %195
  %477 = sub i32 %476, %109
  %478 = add i32 %477, %196
  %479 = add i32 %478, %197
  %480 = sub i32 %479, %161
  %481 = sub i32 %480, %204
  %482 = sub i32 %481, %205
  %483 = sub i32 %482, %208
  %484 = add i32 %483, %212
  %485 = add i32 %484, %213
  %486 = sub i32 %485, %215
  %487 = sub i32 %486, %216
  %488 = sub i32 %487, %217
  %489 = add i32 %488, %218
  %490 = sub i32 %489, %219
  %491 = add i32 %490, %220
  %492 = add i32 %491, %222
  %493 = add i32 %492, %225
  %494 = sub i32 %493, %226
  %495 = add i32 %494, %229
  %496 = sub i32 %495, %234
  %497 = add i32 %496, %236
  %498 = add i32 %497, %237
  %499 = add i32 %498, %238
  %500 = sub i32 %499, %241
  %501 = sub i32 %500, %242
  %502 = sub i32 %501, %243
  %503 = add i32 %502, %251
  %504 = add i32 %503, %252
  %505 = add i32 %504, %255
  %506 = sub i32 %505, %257
  %507 = add i32 %506, %258
  %508 = add i32 %507, %259
  %509 = sub i32 %508, %260
  %510 = add i32 %509, %261
  %511 = sub i32 %510, %263
  %512 = sub i32 %511, %93
  %513 = add i32 %512, %271
  %514 = add i32 %513, %273
  %515 = sub i32 %514, %275
  %516 = sub i32 %515, %239
  %517 = add i32 %516, %277
  %518 = add i32 %517, %280
  %519 = sub i32 %518, %281
  %520 = add i32 %519, %282
  %521 = sub i32 %520, %283
  %522 = add i32 %521, %285
  %523 = sub i32 %522, %289
  %524 = sub i32 %523, %291
  %525 = add i32 %524, %246
  %526 = sub i32 %525, %295
  %527 = sub i32 %526, %296
  %528 = sub i32 %527, %301
  %529 = add i32 %528, %309
  %530 = add i32 %529, %310
  %531 = add i32 %530, %312
  %532 = add i32 %531, %313
  %533 = sub i32 %532, %316
  %534 = add i32 %533, %19
  %535 = add i32 %534, %24
  %536 = add i32 %535, %20
  %537 = sub i32 %536, %25
  %538 = add i32 %537, %30
  %539 = sub i32 %538, %53
  %540 = sub i32 %539, %76
  %541 = sub i32 %540, %91
  %542 = sub i32 %541, %94
  %543 = sub i32 %542, %102
  %544 = add i32 %543, %111
  %545 = sub i32 %544, %117
  %546 = sub i32 %545, %129
  %547 = sub i32 %546, %140
  %548 = sub i32 %547, %148
  %549 = sub i32 %548, %150
  %550 = sub i32 %549, %153
  %551 = sub i32 %550, %157
  %552 = sub i32 %551, %159
  %553 = add i32 %552, %160
  %554 = sub i32 %553, %172
  %555 = sub i32 %554, %175
  %556 = sub i32 %555, %186
  %557 = sub i32 %556, %191
  %558 = sub i32 %557, %200
  %559 = sub i32 %558, %203
  %560 = add i32 %559, %207
  %561 = sub i32 %560, %210
  %562 = sub i32 %561, %224
  %563 = add i32 %562, %233
  %564 = sub i32 %563, %240
  %565 = add i32 %564, %247
  %566 = sub i32 %565, %249
  %567 = add i32 %566, %254
  %568 = sub i32 %567, %269
  %569 = add i32 %568, %276
  %570 = sub i32 %569, %288
  %571 = sub i32 %570, %294
  %572 = add i32 %571, %299
  %573 = sub i32 %572, %300
  %574 = sub i32 %573, %304
  %575 = add i32 %574, %314
  %576 = add i32 %575, %321
  %577 = add i32 %576, %323
  %578 = sub i32 %577, %326
  %579 = add i32 %578, %328
  %580 = add i32 %579, %329
  %581 = sub i32 %580, %331
  %582 = add i32 %581, %27
  %583 = sub i32 %582, %31
  %584 = sub i32 %583, %279
  %585 = add i32 %584, %360
  %586 = add i32 %585, %362
  %587 = add i32 %586, %364
  %588 = add i32 %587, %22
  %589 = sub i32 %588, %29
  %590 = sub i32 %589, %267
  %591 = sub i32 %590, %307
  %592 = add i32 %591, %358
  %593 = add i32 %592, %352
  %594 = icmp eq i32 %17, %593
  %595 = select i1 %594, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %596 = tail call i32 @puts(i8* nonnull dereferenceable(1) %595)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
