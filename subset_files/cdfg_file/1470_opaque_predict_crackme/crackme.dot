digraph "DFG for'crackme' function" {
	Node0x16cd030[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x16cd0d0[shape=record, label="  %6 = shl i32 %3, 1"];
	Node0x16cd140[shape=record, label="  %7 = sub i32 %6, %2"];
	Node0x16cd1b0[shape=record, label="  %8 = and i32 %5, %1"];
	Node0x16cd220[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x16cd2c0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x16cd330[shape=record, label="  %11 = or i32 %5, %1"];
	Node0x16cd3d0[shape=record, label="  %12 = shl i32 %1, 2"];
	Node0x16cd470[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x16cd4e0[shape=record, label="  %14 = or i32 %2, %1"];
	Node0x16cd550[shape=record, label="  %15 = add i32 %14, 1"];
	Node0x16cd5c0[shape=record, label="  %16 = xor i32 %11, -1"];
	Node0x16cd660[shape=record, label="  %17 = mul i32 %16, -5"];
	Node0x16cd6d0[shape=record, label="  %18 = and i32 %2, %1"];
	Node0x16cd740[shape=record, label="  %19 = xor i32 %3, -1"];
	Node0x16cd7b0[shape=record, label="  %20 = or i32 %19, %0"];
	Node0x16cd820[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x16cd890[shape=record, label="  %22 = and i32 %3, %0"];
	Node0x16cd900[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x16cd970[shape=record, label="  %24 = add i32 %8, %15"];
	Node0x16cda10[shape=record, label="  %25 = mul i32 %24, 3"];
	Node0x16cda80[shape=record, label="  %26 = sub i32 1, %0"];
	Node0x16cdaf0[shape=record, label="  %27 = sub i32 %26, %1"];
	Node0x16cdb60[shape=record, label="  %28 = sub i32 %27, %2"];
	Node0x16cdbd0[shape=record, label="  %29 = sub i32 %28, %11"];
	Node0x16cdc40[shape=record, label="  %30 = add i32 %29, %13"];
	Node0x16cdcb0[shape=record, label="  %31 = add i32 %30, %14"];
	Node0x16cdd20[shape=record, label="  %32 = add i32 %31, %18"];
	Node0x16cdfa0[shape=record, label="  %33 = add i32 %32, %17"];
	Node0x16ce010[shape=record, label="  %34 = sub i32 %33, %20"];
	Node0x16ce080[shape=record, label="  %35 = add i32 %34, %21"];
	Node0x16ce0f0[shape=record, label="  %36 = add i32 %35, %10"];
	Node0x16ce160[shape=record, label="  %37 = add i32 %36, %23"];
	Node0x16ce1d0[shape=record, label="  %38 = add i32 %37, %25"];
	Node0x16ce240[shape=record, label="  %39 = icmp eq i32 %7, %38"];
	Node0x166d268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16ce6e0[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x16ce730[shape=record, label="  ret void"];
	Node0x16cd030 -> Node0x16cd0d0;
	Node0x16cd0d0 -> Node0x16cd140;
	Node0x16cd140 -> Node0x16cd1b0;
	Node0x16cd1b0 -> Node0x16cd220;
	Node0x16cd220 -> Node0x16cd2c0;
	Node0x16cd2c0 -> Node0x16cd330;
	Node0x16cd330 -> Node0x16cd3d0;
	Node0x16cd3d0 -> Node0x16cd470;
	Node0x16cd470 -> Node0x16cd4e0;
	Node0x16cd4e0 -> Node0x16cd550;
	Node0x16cd550 -> Node0x16cd5c0;
	Node0x16cd5c0 -> Node0x16cd660;
	Node0x16cd660 -> Node0x16cd6d0;
	Node0x16cd6d0 -> Node0x16cd740;
	Node0x16cd740 -> Node0x16cd7b0;
	Node0x16cd7b0 -> Node0x16cd820;
	Node0x16cd820 -> Node0x16cd890;
	Node0x16cd890 -> Node0x16cd900;
	Node0x16cd900 -> Node0x16cd970;
	Node0x16cd970 -> Node0x16cda10;
	Node0x16cda10 -> Node0x16cda80;
	Node0x16cda80 -> Node0x16cdaf0;
	Node0x16cdaf0 -> Node0x16cdb60;
	Node0x16cdb60 -> Node0x16cdbd0;
	Node0x16cdbd0 -> Node0x16cdc40;
	Node0x16cdc40 -> Node0x16cdcb0;
	Node0x16cdcb0 -> Node0x16cdd20;
	Node0x16cdd20 -> Node0x16cdfa0;
	Node0x16cdfa0 -> Node0x16ce010;
	Node0x16ce010 -> Node0x16ce080;
	Node0x16ce080 -> Node0x16ce0f0;
	Node0x16ce0f0 -> Node0x16ce160;
	Node0x16ce160 -> Node0x16ce1d0;
	Node0x16ce1d0 -> Node0x16ce240;
	Node0x16ce240 -> Node0x166d268;
	Node0x166d268 -> Node0x16ce6e0;
	Node0x16ce6e0 -> Node0x16ce730;
edge [color=red]
	Node0x16cd0d0 -> Node0x16cd140;
	Node0x16cd030 -> Node0x16cd1b0;
	Node0x16cd1b0 -> Node0x16cd220;
	Node0x16cd220 -> Node0x16cd2c0;
	Node0x16cd030 -> Node0x16cd330;
	Node0x16cd3d0 -> Node0x16cd470;
	Node0x16cd4e0 -> Node0x16cd550;
	Node0x16cd330 -> Node0x16cd5c0;
	Node0x16cd5c0 -> Node0x16cd660;
	Node0x16cd740 -> Node0x16cd7b0;
	Node0x16cd890 -> Node0x16cd900;
	Node0x16cd1b0 -> Node0x16cd970;
	Node0x16cd550 -> Node0x16cd970;
	Node0x16cd970 -> Node0x16cda10;
	Node0x16cda80 -> Node0x16cdaf0;
	Node0x16cdaf0 -> Node0x16cdb60;
	Node0x16cdb60 -> Node0x16cdbd0;
	Node0x16cd330 -> Node0x16cdbd0;
	Node0x16cdbd0 -> Node0x16cdc40;
	Node0x16cd470 -> Node0x16cdc40;
	Node0x16cdc40 -> Node0x16cdcb0;
	Node0x16cd4e0 -> Node0x16cdcb0;
	Node0x16cdcb0 -> Node0x16cdd20;
	Node0x16cd6d0 -> Node0x16cdd20;
	Node0x16cdd20 -> Node0x16cdfa0;
	Node0x16cd660 -> Node0x16cdfa0;
	Node0x16cdfa0 -> Node0x16ce010;
	Node0x16cd7b0 -> Node0x16ce010;
	Node0x16ce010 -> Node0x16ce080;
	Node0x16cd820 -> Node0x16ce080;
	Node0x16ce080 -> Node0x16ce0f0;
	Node0x16cd2c0 -> Node0x16ce0f0;
	Node0x16ce0f0 -> Node0x16ce160;
	Node0x16cd900 -> Node0x16ce160;
	Node0x16ce160 -> Node0x16ce1d0;
	Node0x16cda10 -> Node0x16ce1d0;
	Node0x16cd140 -> Node0x16ce240;
	Node0x16ce1d0 -> Node0x16ce240;
	Node0x16ce240 -> Node0x166d268;
	Node0x166d268 -> Node0x16ce6e0;
}
