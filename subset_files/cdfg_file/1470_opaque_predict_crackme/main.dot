digraph "DFG for'main' function" {
	Node0x16ce8f8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x16ce978[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x16cea08[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x16cea68[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x16ceb18[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x16cef48[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x16cf028[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x16cf128[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x16cf1e8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x16cf298[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x16cf358[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x16cf408[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x16c9a50[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x16cf608[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x16d0578[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x16d0be8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x16d0c48[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x16d0cc0[shape=record, label="  %14 = xor i32 %12, -1"];
	Node0x16d0d30[shape=record, label="  %15 = shl i32 %13, 1"];
	Node0x16d0da0[shape=record, label="  %16 = sub i32 %15, %12"];
	Node0x16d0e10[shape=record, label="  %17 = and i32 %11, %14"];
	Node0x16d0e80[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x16d0ef0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x16d0f60[shape=record, label="  %20 = or i32 %11, %14"];
	Node0x16d0fd0[shape=record, label="  %21 = shl i32 %11, 2"];
	Node0x16d1040[shape=record, label="  %22 = xor i32 %21, -4"];
	Node0x16d10b0[shape=record, label="  %23 = or i32 %12, %11"];
	Node0x16d1120[shape=record, label="  %24 = add i32 %23, 1"];
	Node0x16d1190[shape=record, label="  %25 = xor i32 %20, -1"];
	Node0x16d1200[shape=record, label="  %26 = mul i32 %25, -5"];
	Node0x16d1270[shape=record, label="  %27 = and i32 %12, %11"];
	Node0x16d12e0[shape=record, label="  %28 = xor i32 %13, -1"];
	Node0x16d1350[shape=record, label="  %29 = or i32 %10, %28"];
	Node0x16d13c0[shape=record, label="  %30 = or i32 %13, %10"];
	Node0x16d1430[shape=record, label="  %31 = and i32 %13, %10"];
	Node0x16d14a0[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0x16d1510[shape=record, label="  %33 = add i32 %24, %17"];
	Node0x16d1580[shape=record, label="  %34 = mul i32 %33, 3"];
	Node0x16d15f0[shape=record, label="  %35 = sub i32 1, %10"];
	Node0x16d1660[shape=record, label="  %36 = sub i32 %35, %11"];
	Node0x16d16d0[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0x16d1740[shape=record, label="  %38 = sub i32 %37, %20"];
	Node0x16d17b0[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x16d1820[shape=record, label="  %40 = add i32 %39, %23"];
	Node0x16d1890[shape=record, label="  %41 = add i32 %40, %27"];
	Node0x16d1900[shape=record, label="  %42 = add i32 %41, %26"];
	Node0x16d1970[shape=record, label="  %43 = sub i32 %42, %29"];
	Node0x16d19e0[shape=record, label="  %44 = add i32 %43, %30"];
	Node0x16d1a50[shape=record, label="  %45 = add i32 %44, %19"];
	Node0x16d1ac0[shape=record, label="  %46 = add i32 %45, %32"];
	Node0x16d1b30[shape=record, label="  %47 = add i32 %46, %34"];
	Node0x16d1ba0[shape=record, label="  %48 = icmp eq i32 %16, %47"];
	Node0x166e8b8[shape=record, label="  %49 = select i1 %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16d1c30[shape=record, label="  %50 = call i32 @puts(i8* nonnull dereferenceable(1) %49) #5"];
	Node0x16d1ed8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x16d2038[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x16d2148[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x16d2258[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x16d2318[shape=record, label="  ret i32 0"];
	Node0x16ce8f8 -> Node0x16ce978;
	Node0x16ce978 -> Node0x16cea08;
	Node0x16cea08 -> Node0x16cea68;
	Node0x16cea68 -> Node0x16ceb18;
	Node0x16ceb18 -> Node0x16cef48;
	Node0x16cef48 -> Node0x16cf028;
	Node0x16cf028 -> Node0x16cf128;
	Node0x16cf128 -> Node0x16cf1e8;
	Node0x16cf1e8 -> Node0x16cf298;
	Node0x16cf298 -> Node0x16cf358;
	Node0x16cf358 -> Node0x16cf408;
	Node0x16cf408 -> Node0x16c9a50;
	Node0x16c9a50 -> Node0x16cf608;
	Node0x16cf608 -> Node0x16d0578;
	Node0x16d0578 -> Node0x16d0be8;
	Node0x16d0be8 -> Node0x16d0c48;
	Node0x16d0c48 -> Node0x16d0cc0;
	Node0x16d0cc0 -> Node0x16d0d30;
	Node0x16d0d30 -> Node0x16d0da0;
	Node0x16d0da0 -> Node0x16d0e10;
	Node0x16d0e10 -> Node0x16d0e80;
	Node0x16d0e80 -> Node0x16d0ef0;
	Node0x16d0ef0 -> Node0x16d0f60;
	Node0x16d0f60 -> Node0x16d0fd0;
	Node0x16d0fd0 -> Node0x16d1040;
	Node0x16d1040 -> Node0x16d10b0;
	Node0x16d10b0 -> Node0x16d1120;
	Node0x16d1120 -> Node0x16d1190;
	Node0x16d1190 -> Node0x16d1200;
	Node0x16d1200 -> Node0x16d1270;
	Node0x16d1270 -> Node0x16d12e0;
	Node0x16d12e0 -> Node0x16d1350;
	Node0x16d1350 -> Node0x16d13c0;
	Node0x16d13c0 -> Node0x16d1430;
	Node0x16d1430 -> Node0x16d14a0;
	Node0x16d14a0 -> Node0x16d1510;
	Node0x16d1510 -> Node0x16d1580;
	Node0x16d1580 -> Node0x16d15f0;
	Node0x16d15f0 -> Node0x16d1660;
	Node0x16d1660 -> Node0x16d16d0;
	Node0x16d16d0 -> Node0x16d1740;
	Node0x16d1740 -> Node0x16d17b0;
	Node0x16d17b0 -> Node0x16d1820;
	Node0x16d1820 -> Node0x16d1890;
	Node0x16d1890 -> Node0x16d1900;
	Node0x16d1900 -> Node0x16d1970;
	Node0x16d1970 -> Node0x16d19e0;
	Node0x16d19e0 -> Node0x16d1a50;
	Node0x16d1a50 -> Node0x16d1ac0;
	Node0x16d1ac0 -> Node0x16d1b30;
	Node0x16d1b30 -> Node0x16d1ba0;
	Node0x16d1ba0 -> Node0x166e8b8;
	Node0x166e8b8 -> Node0x16d1c30;
	Node0x16d1c30 -> Node0x16d1ed8;
	Node0x16d1ed8 -> Node0x16d2038;
	Node0x16d2038 -> Node0x16d2148;
	Node0x16d2148 -> Node0x16d2258;
	Node0x16d2258 -> Node0x16d2318;
edge [color=red]
	Node0x16ce8f8 -> Node0x16ceb18;
	Node0x16ceb18 -> Node0x16cef48;
	Node0x16ce978 -> Node0x16cf028;
	Node0x16cf028 -> Node0x16cf128;
	Node0x16cea08 -> Node0x16cf1e8;
	Node0x16cf1e8 -> Node0x16cf298;
	Node0x16cea68 -> Node0x16cf358;
	Node0x16cf358 -> Node0x16cf408;
	Node0x16ce8f8 -> Node0x16c9a50;
	Node0x16ce978 -> Node0x16c9a50;
	Node0x16cea08 -> Node0x16c9a50;
	Node0x16cea68 -> Node0x16c9a50;
	Node0x16ce8f8 -> Node0x16cf608;
	Node0x16ce978 -> Node0x16d0578;
	Node0x16cea08 -> Node0x16d0be8;
	Node0x16cea68 -> Node0x16d0c48;
	Node0x16d0be8 -> Node0x16d0cc0;
	Node0x16d0c48 -> Node0x16d0d30;
	Node0x16d0d30 -> Node0x16d0da0;
	Node0x16d0be8 -> Node0x16d0da0;
	Node0x16d0578 -> Node0x16d0e10;
	Node0x16d0cc0 -> Node0x16d0e10;
	Node0x16d0e10 -> Node0x16d0e80;
	Node0x16d0e80 -> Node0x16d0ef0;
	Node0x16d0578 -> Node0x16d0f60;
	Node0x16d0cc0 -> Node0x16d0f60;
	Node0x16d0578 -> Node0x16d0fd0;
	Node0x16d0fd0 -> Node0x16d1040;
	Node0x16d0be8 -> Node0x16d10b0;
	Node0x16d0578 -> Node0x16d10b0;
	Node0x16d10b0 -> Node0x16d1120;
	Node0x16d0f60 -> Node0x16d1190;
	Node0x16d1190 -> Node0x16d1200;
	Node0x16d0be8 -> Node0x16d1270;
	Node0x16d0578 -> Node0x16d1270;
	Node0x16d0c48 -> Node0x16d12e0;
	Node0x16cf608 -> Node0x16d1350;
	Node0x16d12e0 -> Node0x16d1350;
	Node0x16d0c48 -> Node0x16d13c0;
	Node0x16cf608 -> Node0x16d13c0;
	Node0x16d0c48 -> Node0x16d1430;
	Node0x16cf608 -> Node0x16d1430;
	Node0x16d1430 -> Node0x16d14a0;
	Node0x16d1120 -> Node0x16d1510;
	Node0x16d0e10 -> Node0x16d1510;
	Node0x16d1510 -> Node0x16d1580;
	Node0x16cf608 -> Node0x16d15f0;
	Node0x16d15f0 -> Node0x16d1660;
	Node0x16d0578 -> Node0x16d1660;
	Node0x16d1660 -> Node0x16d16d0;
	Node0x16d0be8 -> Node0x16d16d0;
	Node0x16d16d0 -> Node0x16d1740;
	Node0x16d0f60 -> Node0x16d1740;
	Node0x16d1740 -> Node0x16d17b0;
	Node0x16d1040 -> Node0x16d17b0;
	Node0x16d17b0 -> Node0x16d1820;
	Node0x16d10b0 -> Node0x16d1820;
	Node0x16d1820 -> Node0x16d1890;
	Node0x16d1270 -> Node0x16d1890;
	Node0x16d1890 -> Node0x16d1900;
	Node0x16d1200 -> Node0x16d1900;
	Node0x16d1900 -> Node0x16d1970;
	Node0x16d1350 -> Node0x16d1970;
	Node0x16d1970 -> Node0x16d19e0;
	Node0x16d13c0 -> Node0x16d19e0;
	Node0x16d19e0 -> Node0x16d1a50;
	Node0x16d0ef0 -> Node0x16d1a50;
	Node0x16d1a50 -> Node0x16d1ac0;
	Node0x16d14a0 -> Node0x16d1ac0;
	Node0x16d1ac0 -> Node0x16d1b30;
	Node0x16d1580 -> Node0x16d1b30;
	Node0x16d0da0 -> Node0x16d1ba0;
	Node0x16d1b30 -> Node0x16d1ba0;
	Node0x16d1ba0 -> Node0x166e8b8;
	Node0x166e8b8 -> Node0x16d1c30;
	Node0x16cf358 -> Node0x16d1ed8;
	Node0x16cf1e8 -> Node0x16d2038;
	Node0x16cf028 -> Node0x16d2148;
	Node0x16ceb18 -> Node0x16d2258;
}
