digraph "DFG for'crackme' function" {
	Node0x1acdbb0[shape=record, label="  %3 = shl i32 %0, 1"];
	Node0x1acdc20[shape=record, label="  %4 = add i32 %3, %1"];
	Node0x1acdce0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1acdd50[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x1acddc0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1acde30[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1acded0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x1acdf40[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1acdfb0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1ace020[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1ace090[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x1ace100[shape=record, label="  %14 = xor i32 %6, -1"];
	Node0x1ace1a0[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x1ace210[shape=record, label="  %16 = and i32 %5, %0"];
	Node0x1ace2b0[shape=record, label="  %17 = add i32 %0, 2"];
	Node0x1ace320[shape=record, label="  %18 = add i32 %17, %5"];
	Node0x1ace390[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x1ace400[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x1ace470[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x1ace4e0[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x1ace550[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x1ace5c0[shape=record, label="  %24 = add i32 %23, %8"];
	Node0x1ace630[shape=record, label="  %25 = sub i32 %24, %9"];
	Node0x1ace6a0[shape=record, label="  %26 = add i32 %25, %13"];
	Node0x1ace710[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x1a6e268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1acebb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1acec00[shape=record, label="  ret void"];
	Node0x1acdbb0 -> Node0x1acdc20;
	Node0x1acdc20 -> Node0x1acdce0;
	Node0x1acdce0 -> Node0x1acdd50;
	Node0x1acdd50 -> Node0x1acddc0;
	Node0x1acddc0 -> Node0x1acde30;
	Node0x1acde30 -> Node0x1acded0;
	Node0x1acded0 -> Node0x1acdf40;
	Node0x1acdf40 -> Node0x1acdfb0;
	Node0x1acdfb0 -> Node0x1ace020;
	Node0x1ace020 -> Node0x1ace090;
	Node0x1ace090 -> Node0x1ace100;
	Node0x1ace100 -> Node0x1ace1a0;
	Node0x1ace1a0 -> Node0x1ace210;
	Node0x1ace210 -> Node0x1ace2b0;
	Node0x1ace2b0 -> Node0x1ace320;
	Node0x1ace320 -> Node0x1ace390;
	Node0x1ace390 -> Node0x1ace400;
	Node0x1ace400 -> Node0x1ace470;
	Node0x1ace470 -> Node0x1ace4e0;
	Node0x1ace4e0 -> Node0x1ace550;
	Node0x1ace550 -> Node0x1ace5c0;
	Node0x1ace5c0 -> Node0x1ace630;
	Node0x1ace630 -> Node0x1ace6a0;
	Node0x1ace6a0 -> Node0x1ace710;
	Node0x1ace710 -> Node0x1a6e268;
	Node0x1a6e268 -> Node0x1acebb0;
	Node0x1acebb0 -> Node0x1acec00;
edge [color=red]
	Node0x1acdbb0 -> Node0x1acdc20;
	Node0x1acdce0 -> Node0x1acdd50;
	Node0x1acddc0 -> Node0x1acde30;
	Node0x1acde30 -> Node0x1acded0;
	Node0x1acdfb0 -> Node0x1ace020;
	Node0x1ace020 -> Node0x1ace090;
	Node0x1acdd50 -> Node0x1ace100;
	Node0x1ace100 -> Node0x1ace1a0;
	Node0x1acdce0 -> Node0x1ace210;
	Node0x1ace2b0 -> Node0x1ace320;
	Node0x1acdce0 -> Node0x1ace320;
	Node0x1ace320 -> Node0x1ace390;
	Node0x1acdd50 -> Node0x1ace390;
	Node0x1ace390 -> Node0x1ace400;
	Node0x1acdf40 -> Node0x1ace400;
	Node0x1ace400 -> Node0x1ace470;
	Node0x1acdfb0 -> Node0x1ace470;
	Node0x1ace470 -> Node0x1ace4e0;
	Node0x1ace210 -> Node0x1ace4e0;
	Node0x1ace4e0 -> Node0x1ace550;
	Node0x1ace1a0 -> Node0x1ace550;
	Node0x1ace550 -> Node0x1ace5c0;
	Node0x1acde30 -> Node0x1ace5c0;
	Node0x1ace5c0 -> Node0x1ace630;
	Node0x1acded0 -> Node0x1ace630;
	Node0x1ace630 -> Node0x1ace6a0;
	Node0x1ace090 -> Node0x1ace6a0;
	Node0x1acdc20 -> Node0x1ace710;
	Node0x1ace6a0 -> Node0x1ace710;
	Node0x1ace710 -> Node0x1a6e268;
	Node0x1a6e268 -> Node0x1acebb0;
}
