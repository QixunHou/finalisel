; ModuleID = '../.././c_source_file/0393_path_condition_crackme.c'
source_filename = "../.././c_source_file/0393_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %1, %0
  %10 = and i32 %8, %9
  %11 = xor i32 %3, -1
  %12 = xor i32 %5, -1
  %13 = and i32 %12, %4
  %14 = xor i32 %13, -1
  %15 = and i32 %14, %11
  %16 = sub i32 %10, %15
  %17 = or i32 %11, %4
  %18 = xor i32 %5, %3
  %19 = xor i32 %18, -1
  %20 = and i32 %17, %19
  %21 = add i32 %16, %20
  %22 = xor i32 %0, -1
  %23 = xor i32 %2, %1
  %24 = and i32 %23, %22
  %25 = and i32 %7, %0
  %26 = or i32 %7, %1
  %27 = xor i32 %25, %26
  %28 = xor i32 %1, -1
  %29 = or i32 %28, %0
  %30 = xor i32 %23, -1
  %31 = and i32 %29, %30
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %33, %28
  %35 = shl i32 %34, 2
  %36 = or i32 %2, %1
  %37 = xor i32 %36, -1
  %38 = xor i32 %36, %0
  %39 = and i32 %2, %0
  %40 = or i32 %39, %37
  %41 = or i32 %1, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %29, -1
  %44 = or i32 %39, %43
  %45 = and i32 %28, %2
  %46 = and i32 %45, %0
  %47 = or i32 %28, %2
  %48 = xor i32 %47, %0
  %49 = or i32 %46, %48
  %50 = shl i32 %41, 1
  %51 = and i32 %36, %0
  %52 = and i32 %1, %0
  %53 = or i32 %2, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %52, %54
  %56 = or i32 %25, %9
  %57 = and i32 %28, %0
  %58 = xor i32 %57, %2
  %59 = xor i32 %9, -1
  %60 = and i32 %59, %2
  %61 = or i32 %32, %9
  %62 = xor i32 %39, -1
  %63 = and i32 %9, %62
  %64 = or i32 %9, %2
  %65 = and i32 %32, %9
  %66 = or i32 %52, %30
  %67 = and i32 %7, %1
  %68 = or i32 %67, %22
  %69 = xor i32 %52, -1
  %70 = and i32 %7, %69
  %71 = xor i32 %36, %52
  %72 = shl i32 %71, 1
  %73 = xor i32 %26, -1
  %74 = or i32 %25, %73
  %75 = xor i32 %25, -1
  %76 = and i32 %75, %59
  %77 = or i32 %52, %73
  %78 = and i32 %2, %1
  %79 = xor i32 %78, -1
  %80 = xor i32 %57, %79
  %81 = xor i32 %67, -1
  %82 = and i32 %81, %0
  %83 = and i32 %45, %22
  %84 = and i32 %47, %0
  %85 = or i32 %83, %84
  %86 = or i32 %23, %0
  %87 = and i32 %78, %0
  %88 = or i32 %87, %24
  %89 = and i32 %81, %22
  %90 = or i32 %30, %43
  %91 = and i32 %9, %33
  %92 = or i32 %23, %22
  %93 = xor i32 %69, %2
  %94 = and i32 %26, %0
  %95 = or i32 %39, %28
  %96 = xor i32 %8, %1
  %97 = or i32 %52, %7
  %98 = or i32 %25, %28
  %99 = or i32 %32, %52
  %100 = and i32 %36, %22
  %101 = or i32 %87, %100
  %102 = or i32 %54, %1
  %103 = and i32 %7, %59
  %104 = xor i32 %83, %92
  %105 = or i32 %32, %28
  %106 = or i32 %78, %57
  %107 = xor i32 %75, %1
  %108 = xor i32 %25, %1
  %109 = and i32 %62, %59
  %110 = or i32 %52, %33
  %111 = xor i32 %57, -1
  %112 = and i32 %7, %111
  %113 = or i32 %23, %42
  %114 = or i32 %36, %22
  %115 = and i32 %53, %1
  %116 = and i32 %33, %111
  %117 = and i32 %33, %59
  %118 = add i32 %0, 1
  %119 = xor i32 %26, %52
  %120 = xor i32 %57, %81
  %121 = xor i32 %54, %1
  %122 = shl i32 %121, 1
  %123 = or i32 %32, %43
  %124 = shl i32 %123, 1
  %125 = or i32 %42, %2
  %126 = xor i32 %26, %0
  %127 = xor i32 %39, %41
  %128 = shl i32 %127, 1
  %129 = or i32 %39, %67
  %130 = and i32 %32, %69
  %131 = and i32 %23, %111
  %132 = and i32 %32, %41
  %133 = shl i32 %132, 1
  %134 = add i32 %53, 1
  %135 = or i32 %23, %43
  %136 = and i32 %79, %0
  %137 = and i32 %26, %22
  %138 = or i32 %9, %54
  %139 = or i32 %54, %28
  %140 = xor i32 %8, -1
  %141 = or i32 %9, %140
  %142 = or i32 %79, %0
  %143 = xor i32 %25, %79
  %144 = or i32 %57, %7
  %145 = and i32 %75, %28
  %146 = shl i32 %145, 1
  %147 = or i32 %9, %7
  %148 = add i32 %29, 1
  %149 = or i32 %52, %2
  %150 = or i32 %67, %0
  %151 = or i32 %33, %1
  %152 = or i32 %25, %59
  %153 = or i32 %33, %43
  %154 = xor i32 %47, -1
  %155 = or i32 %154, %0
  %156 = xor i32 %46, %155
  %157 = and i32 %8, %1
  %158 = or i32 %9, %33
  %159 = and i32 %78, %22
  %160 = xor i32 %51, -1
  %161 = xor i32 %159, %160
  %162 = and i32 %30, %22
  %163 = and i32 %23, %69
  %164 = and i32 %53, %59
  %165 = xor i32 %84, -1
  %166 = xor i32 %83, %165
  %167 = and i32 %41, %7
  %168 = xor i32 %48, -1
  %169 = xor i32 %46, %168
  %170 = and i32 %8, %59
  %171 = and i32 %75, %1
  %172 = and i32 %33, %1
  %173 = or i32 %78, %22
  %174 = shl i32 %173, 1
  %175 = xor i32 %30, %0
  %176 = xor i32 %8, %52
  %177 = xor i32 %53, %1
  %178 = xor i32 %43, %2
  %179 = xor i32 %29, %2
  %180 = xor i32 %67, %0
  %181 = or i32 %30, %42
  %182 = and i32 %8, %28
  %183 = shl i32 %182, 1
  %184 = or i32 %23, %52
  %185 = and i32 %37, %22
  %186 = shl i32 %185, 1
  %187 = and i32 %67, %22
  %188 = mul i32 %187, -9
  %189 = and i32 %37, %0
  %190 = mul i32 %189, -21
  %191 = and i32 %67, %0
  %192 = and i32 %73, %22
  %193 = mul i32 %192, -20
  %194 = and i32 %73, %0
  %195 = shl i32 %194, 1
  %196 = or i32 %12, %4
  %197 = and i32 %196, %11
  %198 = and i32 %11, %4
  %199 = and i32 %12, %3
  %200 = or i32 %199, %198
  %201 = xor i32 %196, -1
  %202 = xor i32 %201, %3
  %203 = xor i32 %4, -1
  %204 = xor i32 %199, -1
  %205 = or i32 %204, %203
  %206 = or i32 %204, %4
  %207 = or i32 %4, %3
  %208 = xor i32 %207, -1
  %209 = or i32 %5, %3
  %210 = or i32 %209, %4
  %211 = xor i32 %209, -1
  %212 = add i32 %209, 1
  %213 = and i32 %5, %3
  %214 = or i32 %5, %4
  %215 = and i32 %5, %4
  %216 = xor i32 %215, -1
  %217 = xor i32 %4, %3
  %218 = xor i32 %217, -1
  %219 = and i32 %216, %218
  %220 = shl i32 %219, 1
  %221 = xor i32 %17, -1
  %222 = or i32 %19, %221
  %223 = shl i32 %222, 2
  %224 = or i32 %12, %218
  %225 = and i32 %17, %12
  %226 = xor i32 %213, -1
  %227 = xor i32 %198, %226
  %228 = and i32 %11, %5
  %229 = and i32 %228, %4
  %230 = or i32 %18, %4
  %231 = xor i32 %230, -1
  %232 = or i32 %229, %231
  %233 = or i32 %12, %3
  %234 = xor i32 %198, -1
  %235 = and i32 %12, %234
  %236 = or i32 %226, %4
  %237 = xor i32 %234, %5
  %238 = and i32 %228, %203
  %239 = or i32 %18, %203
  %240 = xor i32 %239, -1
  %241 = or i32 %238, %240
  %242 = or i32 %215, %221
  %243 = and i32 %19, %203
  %244 = xor i32 %233, -1
  %245 = or i32 %244, %4
  %246 = xor i32 %5, %4
  %247 = xor i32 %246, -1
  %248 = or i32 %198, %247
  %249 = or i32 %11, %5
  %250 = and i32 %249, %4
  %251 = xor i32 %250, -1
  %252 = xor i32 %238, %251
  %253 = and i32 %17, %5
  %254 = shl i32 %253, 1
  %255 = xor i32 %214, -1
  %256 = or i32 %217, %255
  %257 = add i32 %4, 1
  %258 = xor i32 %214, %3
  %259 = and i32 %4, %3
  %260 = or i32 %259, %255
  %261 = or i32 %211, %203
  %262 = and i32 %214, %3
  %263 = xor i32 %199, %4
  %264 = or i32 %215, %217
  %265 = or i32 %217, %201
  %266 = or i32 %13, %11
  %267 = or i32 %233, %4
  %268 = xor i32 %249, %4
  %269 = or i32 %229, %268
  %270 = xor i32 %215, %207
  %271 = xor i32 %221, %5
  %272 = and i32 %218, %5
  %273 = xor i32 %215, %204
  %274 = or i32 %12, %221
  %275 = shl i32 %274, 1
  %276 = xor i32 %196, %3
  %277 = xor i32 %209, %259
  %278 = xor i32 %13, %226
  %279 = and i32 %18, %207
  %280 = and i32 %247, %234
  %281 = and i32 %214, %218
  %282 = or i32 %238, %250
  %283 = and i32 %14, %218
  %284 = or i32 %217, %12
  %285 = and i32 %207, %247
  %286 = and i32 %18, %4
  %287 = and i32 %207, %5
  %288 = and i32 %213, %4
  %289 = xor i32 %209, %4
  %290 = xor i32 %288, 2147483647
  %291 = xor i32 %290, %289
  %292 = shl i32 %291, 1
  %293 = and i32 %196, %217
  %294 = and i32 %209, %203
  %295 = xor i32 %290, %294
  %296 = and i32 %18, %203
  %297 = or i32 %288, %296
  %298 = or i32 %288, %294
  %299 = or i32 %247, %221
  %300 = or i32 %247, %3
  %301 = xor i32 %204, %4
  %302 = or i32 %18, %221
  %303 = or i32 %201, %3
  %304 = add i32 %196, 1
  %305 = or i32 %199, %203
  %306 = and i32 %214, %217
  %307 = or i32 %13, %213
  %308 = xor i32 %226, %4
  %309 = add i32 %13, 1
  %310 = and i32 %18, %234
  %311 = shl i32 %310, 1
  %312 = and i32 %213, %203
  %313 = xor i32 %312, -1
  %314 = xor i32 %286, %313
  %315 = or i32 %209, %203
  %316 = or i32 %218, %5
  %317 = shl i32 %316, 1
  %318 = or i32 %215, %11
  %319 = or i32 %244, %203
  %320 = or i32 %255, %3
  %321 = xor i32 %259, -1
  %322 = and i32 %246, %321
  %323 = or i32 %288, %289
  %324 = xor i32 %229, %230
  %325 = and i32 %249, %203
  %326 = or i32 %229, %325
  %327 = and i32 %226, %4
  %328 = and i32 %233, %4
  %329 = shl i32 %328, 1
  %330 = and i32 %209, %4
  %331 = xor i32 %330, %313
  %332 = and i32 %234, %5
  %333 = add i32 %5, 1
  %334 = or i32 %198, %12
  %335 = shl i32 %334, 1
  %336 = and i32 %246, %17
  %337 = or i32 %18, %198
  %338 = xor i32 %296, -1
  %339 = xor i32 %288, %338
  %340 = or i32 %247, %11
  %341 = shl i32 %340, 1
  %342 = and i32 %217, %216
  %343 = xor i32 %18, %4
  %344 = xor i32 %343, %288
  %345 = or i32 %215, %218
  %346 = or i32 %221, %5
  %347 = shl i32 %346, 2
  %348 = or i32 %215, %208
  %349 = or i32 %213, %4
  %350 = xor i32 %215, %17
  %351 = and i32 %196, %3
  %352 = and i32 %211, %203
  %353 = and i32 %199, %203
  %354 = and i32 %211, %4
  %355 = shl i32 %354, 3
  %356 = and i32 %199, %4
  %357 = and i32 %244, %203
  %358 = and i32 %244, %4
  %359 = add i32 %8, %33
  %360 = add i32 %359, %25
  %361 = add i32 %360, %70
  %362 = add i32 %361, %64
  %363 = add i32 %362, %175
  %364 = add i32 %363, %171
  %365 = add i32 %364, %157
  %366 = add i32 %365, %137
  %367 = add i32 %366, %96
  %368 = add i32 %367, %94
  %369 = add i32 %368, %76
  %370 = add i32 %369, %68
  %371 = sub i32 %99, %109
  %372 = sub i32 %371, %44
  %373 = sub i32 %372, %353
  %374 = sub i32 %373, %312
  %375 = add i32 %374, %327
  %376 = sub i32 %375, %286
  %377 = add i32 %376, %197
  %378 = mul i32 %377, 5
  %379 = sub i32 %142, %159
  %380 = add i32 %379, %234
  %381 = sub i32 %380, %166
  %382 = add i32 %381, %161
  %383 = add i32 %382, %204
  %384 = mul i32 %383, 3
  %385 = add i32 %288, %357
  %386 = mul i32 %385, -10
  %387 = add i32 %358, %356
  %388 = mul i32 %387, -6
  %389 = add i32 %87, %191
  %390 = mul i32 %389, -11
  %391 = add i32 %370, %38
  %392 = add i32 %391, %88
  %393 = add i32 %392, %332
  %394 = add i32 %393, %271
  %395 = add i32 %394, %224
  %396 = add i32 %395, %352
  %397 = add i32 %396, %349
  %398 = add i32 %397, %345
  %399 = add i32 %398, %280
  %400 = add i32 %399, %277
  %401 = add i32 %400, %262
  %402 = add i32 %401, %200
  %403 = add i32 %402, %295
  %404 = shl i32 %403, 1
  %405 = add i32 %105, 1073741823
  %406 = add i32 %405, %324
  %407 = shl i32 %406, 2
  %408 = add i32 %118, %0
  %409 = add i32 %408, %42
  %410 = add i32 %409, %59
  %411 = add i32 %410, %7
  %412 = add i32 %411, %148
  %413 = sub i32 %412, %9
  %414 = sub i32 %413, %50
  %415 = sub i32 %414, %58
  %416 = sub i32 %415, %60
  %417 = sub i32 %416, %93
  %418 = add i32 %417, %97
  %419 = sub i32 %418, %103
  %420 = sub i32 %419, %112
  %421 = add i32 %420, %125
  %422 = add i32 %421, %32
  %423 = add i32 %422, %134
  %424 = sub i32 %423, %144
  %425 = sub i32 %424, %147
  %426 = add i32 %425, %149
  %427 = add i32 %426, %167
  %428 = sub i32 %427, %178
  %429 = sub i32 %428, %179
  %430 = sub i32 %429, %3
  %431 = sub i32 %430, %27
  %432 = add i32 %431, %24
  %433 = sub i32 %432, %31
  %434 = add i32 %433, %40
  %435 = sub i32 %434, %51
  %436 = sub i32 %435, %55
  %437 = add i32 %436, %56
  %438 = add i32 %437, %61
  %439 = add i32 %438, %63
  %440 = add i32 %439, %65
  %441 = add i32 %440, %66
  %442 = sub i32 %441, %74
  %443 = sub i32 %442, %77
  %444 = add i32 %443, %80
  %445 = add i32 %444, %82
  %446 = sub i32 %445, %86
  %447 = sub i32 %446, %89
  %448 = sub i32 %447, %90
  %449 = sub i32 %448, %91
  %450 = add i32 %449, %92
  %451 = sub i32 %450, %95
  %452 = sub i32 %451, %98
  %453 = sub i32 %452, %102
  %454 = sub i32 %453, %106
  %455 = sub i32 %454, %107
  %456 = add i32 %455, %108
  %457 = add i32 %456, %110
  %458 = sub i32 %457, %113
  %459 = add i32 %458, %114
  %460 = sub i32 %459, %115
  %461 = sub i32 %460, %116
  %462 = add i32 %461, %117
  %463 = add i32 %462, %119
  %464 = sub i32 %463, %120
  %465 = sub i32 %464, %126
  %466 = sub i32 %465, %129
  %467 = add i32 %466, %130
  %468 = add i32 %467, %131
  %469 = add i32 %468, %135
  %470 = sub i32 %469, %136
  %471 = sub i32 %470, %138
  %472 = add i32 %471, %139
  %473 = add i32 %472, %141
  %474 = add i32 %473, %143
  %475 = sub i32 %474, %100
  %476 = add i32 %475, %150
  %477 = add i32 %476, %151
  %478 = add i32 %477, %152
  %479 = add i32 %478, %153
  %480 = sub i32 %479, %158
  %481 = sub i32 %480, %162
  %482 = add i32 %481, %163
  %483 = sub i32 %482, %164
  %484 = add i32 %483, %170
  %485 = sub i32 %484, %172
  %486 = sub i32 %485, %176
  %487 = add i32 %486, %177
  %488 = sub i32 %487, %180
  %489 = sub i32 %488, %181
  %490 = add i32 %489, %184
  %491 = add i32 %490, %257
  %492 = sub i32 %491, %35
  %493 = add i32 %492, %49
  %494 = sub i32 %493, %72
  %495 = add i32 %494, %85
  %496 = add i32 %495, %101
  %497 = add i32 %496, %104
  %498 = sub i32 %497, %122
  %499 = sub i32 %498, %124
  %500 = sub i32 %499, %128
  %501 = sub i32 %500, %133
  %502 = sub i32 %501, %146
  %503 = sub i32 %502, %156
  %504 = add i32 %503, %169
  %505 = sub i32 %504, %174
  %506 = sub i32 %505, %183
  %507 = sub i32 %506, %186
  %508 = add i32 %507, %188
  %509 = add i32 %508, %190
  %510 = add i32 %509, %193
  %511 = sub i32 %510, %195
  %512 = add i32 %511, %5
  %513 = add i32 %512, %218
  %514 = add i32 %513, %333
  %515 = add i32 %514, %212
  %516 = sub i32 %515, %213
  %517 = add i32 %516, %214
  %518 = sub i32 %517, %225
  %519 = add i32 %518, %235
  %520 = sub i32 %519, %237
  %521 = add i32 %520, %226
  %522 = add i32 %521, %272
  %523 = sub i32 %522, %284
  %524 = add i32 %523, %287
  %525 = add i32 %524, %304
  %526 = add i32 %525, %309
  %527 = sub i32 %526, %209
  %528 = add i32 %527, %390
  %529 = sub i32 %528, %202
  %530 = sub i32 %529, %205
  %531 = sub i32 %530, %206
  %532 = add i32 %531, %210
  %533 = add i32 %532, %227
  %534 = add i32 %533, %236
  %535 = add i32 %534, %242
  %536 = add i32 %535, %243
  %537 = sub i32 %536, %245
  %538 = sub i32 %537, %248
  %539 = sub i32 %538, %254
  %540 = add i32 %539, %256
  %541 = sub i32 %540, %258
  %542 = sub i32 %541, %260
  %543 = sub i32 %542, %261
  %544 = add i32 %543, %263
  %545 = add i32 %544, %264
  %546 = sub i32 %545, %265
  %547 = sub i32 %546, %266
  %548 = sub i32 %547, %267
  %549 = add i32 %548, %270
  %550 = add i32 %549, %273
  %551 = sub i32 %550, %275
  %552 = sub i32 %551, %276
  %553 = add i32 %552, %278
  %554 = sub i32 %553, %279
  %555 = add i32 %554, %281
  %556 = sub i32 %555, %283
  %557 = add i32 %556, %285
  %558 = add i32 %557, %293
  %559 = sub i32 %558, %299
  %560 = sub i32 %559, %300
  %561 = add i32 %560, %301
  %562 = add i32 %561, %302
  %563 = add i32 %562, %303
  %564 = add i32 %563, %305
  %565 = sub i32 %564, %306
  %566 = add i32 %565, %307
  %567 = sub i32 %566, %308
  %568 = add i32 %567, %315
  %569 = sub i32 %568, %317
  %570 = sub i32 %569, %318
  %571 = add i32 %570, %319
  %572 = sub i32 %571, %320
  %573 = sub i32 %572, %322
  %574 = sub i32 %573, %335
  %575 = add i32 %574, %336
  %576 = sub i32 %575, %337
  %577 = add i32 %576, %342
  %578 = sub i32 %577, %347
  %579 = sub i32 %578, %239
  %580 = sub i32 %579, %348
  %581 = sub i32 %580, %350
  %582 = add i32 %581, %351
  %583 = sub i32 %582, %220
  %584 = sub i32 %583, %223
  %585 = add i32 %584, %232
  %586 = sub i32 %585, %241
  %587 = add i32 %586, %252
  %588 = sub i32 %587, %269
  %589 = add i32 %588, %282
  %590 = add i32 %589, %297
  %591 = add i32 %590, %298
  %592 = sub i32 %591, %311
  %593 = add i32 %592, %314
  %594 = sub i32 %593, %323
  %595 = add i32 %594, %326
  %596 = sub i32 %595, %329
  %597 = add i32 %596, %331
  %598 = sub i32 %597, %339
  %599 = sub i32 %598, %341
  %600 = sub i32 %599, %344
  %601 = sub i32 %600, %355
  %602 = add i32 %601, %386
  %603 = add i32 %602, %388
  %604 = sub i32 %603, %292
  %605 = add i32 %604, %407
  %606 = add i32 %605, %384
  %607 = add i32 %606, %378
  %608 = add i32 %607, %404
  %609 = icmp eq i32 %21, %608
  %610 = select i1 %609, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %611 = tail call i32 @puts(i8* nonnull dereferenceable(1) %610)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
