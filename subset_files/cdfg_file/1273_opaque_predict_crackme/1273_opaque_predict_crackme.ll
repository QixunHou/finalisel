; ModuleID = '../.././c_source_file/1273_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1273_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = mul i32 %6, 5
  %8 = xor i32 %4, -1
  %9 = and i32 %8, %3
  %10 = xor i32 %9, -1
  %11 = xor i32 %1, -1
  %12 = xor i32 %2, %0
  %13 = and i32 %12, %11
  %14 = shl i32 %13, 1
  %15 = or i32 %2, %0
  %16 = and i32 %15, %1
  %17 = add i32 %16, %10
  %18 = sub i32 %17, %14
  %19 = add i32 %18, %7
  %20 = add i32 %3, 1
  %21 = or i32 %8, %3
  %22 = shl i32 %4, 1
  %23 = shl i32 %6, 1
  %24 = xor i32 %23, -2
  %25 = xor i32 %21, -1
  %26 = and i32 %4, %3
  %27 = mul i32 %26, 7
  %28 = xor i32 %2, -1
  %29 = or i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %28, %30
  %32 = or i32 %11, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %2, %1
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %33
  %37 = and i32 %2, %1
  %38 = and i32 %37, %0
  %39 = xor i32 %34, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %38, %40
  %42 = and i32 %28, %1
  %43 = xor i32 %42, %0
  %44 = or i32 %34, %33
  %45 = and i32 %11, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %12, -1
  %48 = and i32 %47, %46
  %49 = and i32 %28, %0
  %50 = xor i32 %49, -1
  %51 = xor i32 %50, %1
  %52 = xor i32 %1, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %28, %53
  %55 = and i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = and i32 %56, %11
  %58 = xor i32 %56, %1
  %59 = xor i32 %0, -1
  %60 = or i32 %34, %59
  %61 = or i32 %35, %0
  %62 = and i32 %1, %0
  %63 = or i32 %28, %1
  %64 = xor i32 %63, -1
  %65 = or i32 %62, %64
  %66 = and i32 %29, %35
  %67 = xor i32 %55, %1
  %68 = and i32 %11, %2
  %69 = and i32 %68, %0
  %70 = or i32 %11, %2
  %71 = xor i32 %70, %0
  %72 = xor i32 %69, -1
  %73 = xor i32 %71, %72
  %74 = or i32 %63, %59
  %75 = or i32 %12, %53
  %76 = shl i32 %75, 1
  %77 = xor i32 %15, -1
  %78 = add i32 %15, 1
  %79 = or i32 %2, %1
  %80 = and i32 %29, %47
  %81 = xor i32 %79, -1
  %82 = add i32 %79, 1
  %83 = and i32 %52, %2
  %84 = or i32 %49, %64
  %85 = xor i32 %45, %2
  %86 = xor i32 %37, -1
  %87 = or i32 %86, %59
  %88 = shl i32 %87, 1
  %89 = or i32 %64, %59
  %90 = or i32 %30, %2
  %91 = or i32 %28, %0
  %92 = xor i32 %91, -1
  %93 = or i32 %92, %1
  %94 = and i32 %50, %11
  %95 = xor i32 %92, %1
  %96 = or i32 %45, %28
  %97 = xor i32 %42, -1
  %98 = and i32 %97, %59
  %99 = and i32 %68, %59
  %100 = xor i32 %99, %60
  %101 = and i32 %29, %28
  %102 = or i32 %62, %77
  %103 = or i32 %77, %53
  %104 = and i32 %32, %35
  %105 = xor i32 %37, %0
  %106 = or i32 %34, %30
  %107 = or i32 %28, %33
  %108 = and i32 %37, %59
  %109 = and i32 %79, %0
  %110 = or i32 %108, %109
  %111 = or i32 %77, %1
  %112 = or i32 %79, %0
  %113 = or i32 %77, %11
  %114 = or i32 %92, %11
  %115 = xor i32 %91, %62
  %116 = or i32 %81, %59
  %117 = and i32 %79, %59
  %118 = xor i32 %38, -1
  %119 = xor i32 %117, %118
  %120 = and i32 %70, %0
  %121 = xor i32 %120, -1
  %122 = xor i32 %99, %121
  %123 = or i32 %38, %117
  %124 = and i32 %35, %59
  %125 = xor i32 %15, %62
  %126 = or i32 %79, %59
  %127 = or i32 %34, %45
  %128 = or i32 %52, %2
  %129 = xor i32 %46, %2
  %130 = or i32 %64, %0
  %131 = and i32 %50, %1
  %132 = xor i32 %49, %63
  %133 = xor i32 %91, %1
  %134 = xor i32 %81, %0
  %135 = shl i32 %134, 1
  %136 = xor i32 %38, %39
  %137 = xor i32 %62, -1
  %138 = and i32 %35, %137
  %139 = or i32 %52, %28
  %140 = and i32 %34, %0
  %141 = xor i32 %140, -1
  %142 = xor i32 %108, %141
  %143 = xor i32 %45, %86
  %144 = and i32 %97, %0
  %145 = or i32 %45, %35
  %146 = or i32 %49, %52
  %147 = and i32 %34, %137
  %148 = or i32 %55, %42
  %149 = xor i32 %79, %62
  %150 = xor i32 %55, %32
  %151 = or i32 %86, %0
  %152 = and i32 %12, %32
  %153 = or i32 %49, %53
  %154 = or i32 %34, %0
  %155 = and i32 %35, %46
  %156 = xor i32 %33, %2
  %157 = xor i32 %77, %1
  %158 = xor i32 %79, %59
  %159 = xor i32 %158, %38
  %160 = or i32 %55, %53
  %161 = and i32 %63, %59
  %162 = or i32 %12, %1
  %163 = add i32 %2, 1
  %164 = xor i32 %86, %0
  %165 = shl i32 %164, 1
  %166 = and i32 %34, %32
  %167 = shl i32 %1, 1
  %168 = shl i32 %53, 2
  %169 = and i32 %47, %137
  %170 = or i32 %108, %140
  %171 = and i32 %52, %50
  %172 = and i32 %12, %46
  %173 = or i32 %69, %39
  %174 = xor i32 %154, -1
  %175 = or i32 %69, %174
  %176 = and i32 %28, %53
  %177 = and i32 %70, %59
  %178 = or i32 %69, %177
  %179 = shl i32 %178, 1
  %180 = or i32 %12, %45
  %181 = or i32 %55, %11
  %182 = or i32 %62, %92
  %183 = and i32 %56, %53
  %184 = xor i32 %62, %2
  %185 = or i32 %37, %59
  %186 = or i32 %12, %33
  %187 = or i32 %35, %59
  %188 = and i32 %52, %56
  %189 = or i32 %34, %62
  %190 = xor i32 %55, %97
  %191 = or i32 %63, %0
  %192 = and i32 %29, %2
  %193 = xor i32 %30, %2
  %194 = add i32 %91, 1
  %195 = or i32 %47, %33
  %196 = xor i32 %69, %40
  %197 = and i32 %52, %47
  %198 = or i32 %69, %71
  %199 = or i32 %49, %1
  %200 = shl i32 %199, 1
  %201 = and i32 %86, %0
  %202 = and i32 %15, %11
  %203 = add i32 %63, 1
  %204 = or i32 %55, %52
  %205 = xor i32 %49, %86
  %206 = xor i32 %35, %0
  %207 = and i32 %91, %11
  %208 = or i32 %47, %30
  %209 = and i32 %15, %53
  %210 = xor i32 %177, %72
  %211 = or i32 %62, %28
  %212 = and i32 %81, %59
  %213 = shl i32 %212, 3
  %214 = and i32 %42, %59
  %215 = shl i32 %214, 4
  %216 = and i32 %81, %0
  %217 = and i32 %42, %0
  %218 = shl i32 %217, 1
  %219 = and i32 %64, %59
  %220 = shl i32 %219, 3
  %221 = mul i32 %108, 11
  %222 = and i32 %64, %0
  %223 = mul i32 %222, -18
  %224 = mul i32 %38, 14
  %225 = add i32 %9, %60
  %226 = add i32 %225, %175
  %227 = mul i32 %226, 3
  %228 = add i32 %107, %2
  %229 = sub i32 %115, %228
  %230 = mul i32 %229, 5
  %231 = sub i32 %25, %216
  %232 = mul i32 %231, 12
  %233 = add i32 %48, %20
  %234 = shl i32 %233, 2
  %235 = add i32 %63, -1
  %236 = add i32 %235, %156
  %237 = add i32 %236, %96
  %238 = add i32 %237, %79
  %239 = add i32 %238, %207
  %240 = add i32 %239, %206
  %241 = add i32 %240, %190
  %242 = add i32 %241, %189
  %243 = add i32 %242, %180
  %244 = add i32 %243, %152
  %245 = add i32 %244, %133
  %246 = add i32 %245, %95
  %247 = add i32 %246, %94
  %248 = add i32 %247, %58
  %249 = add i32 %248, %51
  %250 = add i32 %249, %21
  %251 = add i32 %250, %198
  %252 = shl i32 %251, 1
  %253 = add i32 %11, %0
  %254 = add i32 %253, %163
  %255 = sub i32 %254, %167
  %256 = sub i32 %255, %62
  %257 = add i32 %256, %30
  %258 = sub i32 %257, %3
  %259 = add i32 %258, %31
  %260 = sub i32 %259, %54
  %261 = add i32 %260, %78
  %262 = add i32 %261, %82
  %263 = add i32 %262, %83
  %264 = add i32 %263, %85
  %265 = add i32 %264, %47
  %266 = sub i32 %265, %90
  %267 = sub i32 %266, %91
  %268 = add i32 %267, %101
  %269 = add i32 %268, %86
  %270 = sub i32 %269, %128
  %271 = sub i32 %270, %129
  %272 = sub i32 %271, %15
  %273 = add i32 %272, %139
  %274 = add i32 %273, %42
  %275 = sub i32 %274, %12
  %276 = sub i32 %275, %168
  %277 = add i32 %276, %176
  %278 = add i32 %277, %184
  %279 = sub i32 %278, %192
  %280 = sub i32 %279, %193
  %281 = add i32 %280, %194
  %282 = add i32 %281, %203
  %283 = add i32 %282, %211
  %284 = sub i32 %283, %4
  %285 = add i32 %284, %36
  %286 = sub i32 %285, %43
  %287 = add i32 %286, %44
  %288 = sub i32 %287, %57
  %289 = sub i32 %288, %61
  %290 = sub i32 %289, %65
  %291 = add i32 %290, %66
  %292 = sub i32 %291, %67
  %293 = sub i32 %292, %74
  %294 = add i32 %293, %80
  %295 = add i32 %294, %84
  %296 = sub i32 %295, %89
  %297 = sub i32 %296, %93
  %298 = sub i32 %297, %98
  %299 = sub i32 %298, %102
  %300 = add i32 %299, %103
  %301 = sub i32 %300, %104
  %302 = sub i32 %301, %105
  %303 = add i32 %302, %106
  %304 = add i32 %303, %111
  %305 = sub i32 %304, %112
  %306 = add i32 %305, %113
  %307 = sub i32 %306, %114
  %308 = add i32 %307, %116
  %309 = add i32 %308, %124
  %310 = sub i32 %309, %125
  %311 = sub i32 %310, %126
  %312 = add i32 %311, %127
  %313 = add i32 %312, %130
  %314 = add i32 %313, %131
  %315 = sub i32 %314, %132
  %316 = add i32 %315, %138
  %317 = add i32 %316, %143
  %318 = sub i32 %317, %144
  %319 = sub i32 %318, %145
  %320 = add i32 %319, %146
  %321 = add i32 %320, %147
  %322 = add i32 %321, %148
  %323 = add i32 %322, %149
  %324 = sub i32 %323, %150
  %325 = add i32 %324, %151
  %326 = add i32 %325, %153
  %327 = add i32 %326, %39
  %328 = sub i32 %327, %154
  %329 = add i32 %328, %155
  %330 = sub i32 %329, %157
  %331 = add i32 %330, %160
  %332 = sub i32 %331, %161
  %333 = sub i32 %332, %162
  %334 = sub i32 %333, %166
  %335 = sub i32 %334, %169
  %336 = sub i32 %335, %171
  %337 = add i32 %336, %172
  %338 = sub i32 %337, %181
  %339 = sub i32 %338, %182
  %340 = sub i32 %339, %183
  %341 = sub i32 %340, %185
  %342 = sub i32 %341, %186
  %343 = sub i32 %342, %187
  %344 = add i32 %343, %188
  %345 = add i32 %344, %191
  %346 = sub i32 %345, %195
  %347 = add i32 %346, %197
  %348 = add i32 %347, %201
  %349 = sub i32 %348, %202
  %350 = add i32 %349, %204
  %351 = add i32 %350, %205
  %352 = sub i32 %351, %109
  %353 = sub i32 %352, %208
  %354 = add i32 %353, %209
  %355 = sub i32 %354, %22
  %356 = sub i32 %355, %41
  %357 = sub i32 %356, %73
  %358 = sub i32 %357, %76
  %359 = sub i32 %358, %88
  %360 = sub i32 %359, %100
  %361 = add i32 %360, %110
  %362 = add i32 %361, %119
  %363 = add i32 %362, %122
  %364 = add i32 %363, %123
  %365 = sub i32 %364, %135
  %366 = add i32 %365, %136
  %367 = sub i32 %366, %142
  %368 = sub i32 %367, %159
  %369 = sub i32 %368, %165
  %370 = sub i32 %369, %170
  %371 = add i32 %370, %173
  %372 = sub i32 %371, %196
  %373 = sub i32 %372, %200
  %374 = sub i32 %373, %210
  %375 = sub i32 %374, %213
  %376 = sub i32 %375, %215
  %377 = sub i32 %376, %218
  %378 = sub i32 %377, %220
  %379 = add i32 %378, %221
  %380 = add i32 %379, %223
  %381 = add i32 %380, %224
  %382 = add i32 %381, %27
  %383 = sub i32 %382, %179
  %384 = add i32 %383, %234
  %385 = add i32 %384, %24
  %386 = add i32 %385, %230
  %387 = add i32 %386, %232
  %388 = add i32 %387, %227
  %389 = add i32 %388, %252
  %390 = icmp eq i32 %19, %389
  %391 = select i1 %390, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %392 = tail call i32 @puts(i8* nonnull dereferenceable(1) %391)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
