; ModuleID = '../.././c_source_file/1510_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1510_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = xor i32 %1, -1
  %6 = and i32 %5, %0
  %7 = xor i32 %6, -1
  %8 = and i32 %4, %7
  %9 = or i32 %4, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %1, %0
  %12 = or i32 %11, %10
  %13 = and i32 %4, %0
  %14 = or i32 %13, %11
  %15 = xor i32 %11, -1
  %16 = xor i32 %2, %0
  %17 = or i32 %16, %15
  %18 = or i32 %2, %0
  %19 = and i32 %18, %5
  %20 = or i32 %2, %1
  %21 = and i32 %20, %0
  %22 = and i32 %1, %0
  %23 = or i32 %16, %22
  %24 = and i32 %5, %2
  %25 = and i32 %24, %0
  %26 = xor i32 %2, %1
  %27 = or i32 %26, %0
  %28 = xor i32 %25, %27
  %29 = or i32 %1, %0
  %30 = and i32 %26, %29
  %31 = and i32 %11, %2
  %32 = shl i32 %31, 1
  %33 = and i32 %2, %1
  %34 = and i32 %33, %0
  %35 = xor i32 %0, -1
  %36 = and i32 %20, %35
  %37 = or i32 %34, %36
  %38 = and i32 %4, %1
  %39 = xor i32 %38, -1
  %40 = xor i32 %6, %39
  %41 = xor i32 %20, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %34, %42
  %44 = xor i32 %33, -1
  %45 = and i32 %44, %0
  %46 = xor i32 %22, -1
  %47 = and i32 %4, %46
  %48 = or i32 %20, %0
  %49 = and i32 %9, %5
  %50 = and i32 %2, %0
  %51 = xor i32 %20, -1
  %52 = or i32 %50, %51
  %53 = or i32 %4, %1
  %54 = xor i32 %53, -1
  %55 = xor i32 %54, %0
  %56 = or i32 %11, %2
  %57 = xor i32 %29, -1
  %58 = xor i32 %16, -1
  %59 = or i32 %58, %57
  %60 = xor i32 %7, %2
  %61 = xor i32 %26, -1
  %62 = or i32 %61, %57
  %63 = xor i32 %38, %0
  %64 = xor i32 %18, %22
  %65 = xor i32 %22, %2
  %66 = xor i32 %18, -1
  %67 = or i32 %22, %66
  %68 = xor i32 %50, %39
  %69 = and i32 %26, %46
  %70 = shl i32 %69, 1
  %71 = or i32 %15, %2
  %72 = shl i32 %71, 1
  %73 = add i32 %16, 1
  %74 = xor i32 %53, %0
  %75 = or i32 %4, %57
  %76 = xor i32 %13, %1
  %77 = or i32 %44, %0
  %78 = or i32 %66, %1
  %79 = and i32 %26, %7
  %80 = shl i32 %79, 1
  %81 = and i32 %33, %35
  %82 = and i32 %26, %0
  %83 = xor i32 %82, -1
  %84 = xor i32 %81, %83
  %85 = xor i32 %50, %1
  %86 = xor i32 %46, %2
  %87 = and i32 %16, %7
  %88 = and i32 %29, %58
  %89 = shl i32 %88, 1
  %90 = or i32 %5, %2
  %91 = xor i32 %90, -1
  %92 = or i32 %91, %0
  %93 = xor i32 %25, %92
  %94 = or i32 %5, %0
  %95 = xor i32 %94, -1
  %96 = xor i32 %95, %2
  %97 = and i32 %58, %15
  %98 = or i32 %66, %15
  %99 = and i32 %58, %46
  %100 = xor i32 %9, %1
  %101 = or i32 %33, %6
  %102 = shl i32 %101, 1
  %103 = or i32 %13, %5
  %104 = shl i32 %5, 2
  %105 = and i32 %15, %2
  %106 = or i32 %4, %95
  %107 = xor i32 %18, %1
  %108 = or i32 %50, %57
  %109 = or i32 %16, %6
  %110 = and i32 %53, %0
  %111 = or i32 %57, %2
  %112 = shl i32 %111, 1
  %113 = or i32 %54, %35
  %114 = or i32 %95, %2
  %115 = xor i32 %20, %22
  %116 = xor i32 %13, %53
  %117 = xor i32 %50, -1
  %118 = and i32 %117, %5
  %119 = xor i32 %26, %0
  %120 = xor i32 %34, %119
  %121 = shl i32 %35, 1
  %122 = and i32 %94, %61
  %123 = add i32 %50, 1
  %124 = add i32 %94, 1
  %125 = xor i32 %50, %20
  %126 = and i32 %18, %15
  %127 = or i32 %22, %10
  %128 = or i32 %11, %66
  %129 = xor i32 %51, %0
  %130 = shl i32 %129, 1
  %131 = and i32 %26, %35
  %132 = or i32 %34, %131
  %133 = and i32 %18, %1
  %134 = shl i32 %39, 1
  %135 = xor i32 %39, %0
  %136 = and i32 %9, %15
  %137 = xor i32 %6, %2
  %138 = and i32 %46, %2
  %139 = and i32 %16, %94
  %140 = and i32 %94, %58
  %141 = or i32 %16, %1
  %142 = and i32 %94, %4
  %143 = and i32 %44, %35
  %144 = or i32 %50, %38
  %145 = add i32 %11, 1
  %146 = xor i32 %119, -1
  %147 = xor i32 %25, %146
  %148 = xor i32 %9, %22
  %149 = or i32 %25, %119
  %150 = or i32 %81, %82
  %151 = or i32 %58, %5
  %152 = and i32 %4, %15
  %153 = shl i32 %152, 1
  %154 = xor i32 %90, %0
  %155 = or i32 %25, %154
  %156 = or i32 %50, %11
  %157 = xor i32 %13, %44
  %158 = and i32 %58, %1
  %159 = shl i32 %158, 1
  %160 = or i32 %50, %15
  %161 = and i32 %58, %5
  %162 = shl i32 %161, 1
  %163 = or i32 %26, %22
  %164 = add i32 %22, 1
  %165 = and i32 %26, %94
  %166 = and i32 %16, %46
  %167 = xor i32 %66, %1
  %168 = and i32 %11, %4
  %169 = xor i32 %6, %44
  %170 = or i32 %81, %21
  %171 = and i32 %29, %4
  %172 = and i32 %117, %15
  %173 = add i32 %9, 1
  %174 = or i32 %26, %35
  %175 = xor i32 %44, %0
  %176 = or i32 %51, %35
  %177 = or i32 %33, %0
  %178 = and i32 %61, %46
  %179 = or i32 %6, %58
  %180 = shl i32 %179, 1
  %181 = or i32 %13, %33
  %182 = add i32 %20, 1
  %183 = or i32 %22, %2
  %184 = shl i32 %183, 1
  %185 = or i32 %22, %58
  %186 = or i32 %58, %95
  %187 = shl i32 %41, 1
  %188 = xor i32 %13, -1
  %189 = xor i32 %50, %94
  %190 = shl i32 %189, 2
  %191 = or i32 %53, %35
  %192 = or i32 %34, %146
  %193 = and i32 %188, %1
  %194 = or i32 %50, %95
  %195 = and i32 %7, %2
  %196 = and i32 %188, %5
  %197 = shl i32 %196, 1
  %198 = or i32 %20, %35
  %199 = and i32 %24, %35
  %200 = and i32 %90, %0
  %201 = xor i32 %200, -1
  %202 = xor i32 %199, %201
  %203 = or i32 %50, %5
  %204 = and i32 %11, %117
  %205 = or i32 %61, %95
  %206 = xor i32 %94, %2
  %207 = and i32 %9, %11
  %208 = shl i32 %207, 2
  %209 = or i32 %50, %1
  %210 = or i32 %16, %57
  %211 = and i32 %11, %58
  %212 = and i32 %61, %35
  %213 = shl i32 %212, 1
  %214 = or i32 %34, %41
  %215 = or i32 %16, %95
  %216 = and i32 %188, %15
  %217 = or i32 %66, %5
  %218 = or i32 %22, %61
  %219 = and i32 %61, %7
  %220 = shl i32 %219, 1
  %221 = or i32 %22, %4
  %222 = shl i32 %221, 1
  %223 = xor i32 %27, -1
  %224 = or i32 %25, %223
  %225 = add i32 %53, 1
  %226 = and i32 %16, %15
  %227 = xor i32 %117, %1
  %228 = and i32 %16, %11
  %229 = shl i32 %228, 1
  %230 = or i32 %16, %11
  %231 = or i32 %13, %54
  %232 = and i32 %39, %0
  %233 = or i32 %22, %51
  %234 = or i32 %39, %0
  %235 = and i32 %51, %35
  %236 = mul i32 %235, 17
  %237 = and i32 %38, %35
  %238 = shl i32 %237, 1
  %239 = and i32 %51, %0
  %240 = shl i32 %239, 1
  %241 = and i32 %38, %0
  %242 = mul i32 %241, -19
  %243 = and i32 %54, %35
  %244 = mul i32 %243, 6
  %245 = and i32 %54, %0
  %246 = mul i32 %34, 9
  %247 = add i32 %168, %66
  %248 = add i32 %247, %105
  %249 = add i32 %248, %47
  %250 = add i32 %249, %215
  %251 = add i32 %250, %167
  %252 = add i32 %251, %166
  %253 = add i32 %252, %139
  %254 = add i32 %253, %107
  %255 = add i32 %254, %68
  %256 = add i32 %255, %62
  %257 = add i32 %256, %19
  %258 = add i32 %257, %150
  %259 = shl i32 %258, 1
  %260 = add i32 %23, %245
  %261 = add i32 %260, %192
  %262 = shl i32 %261, 2
  %263 = add i32 %211, %173
  %264 = sub i32 %263, %233
  %265 = mul i32 %264, 5
  %266 = add i32 %43, %182
  %267 = mul i32 %266, 3
  %268 = xor i32 %121, -1
  %269 = add i32 %268, %0
  %270 = sub i32 %269, %1
  %271 = add i32 %270, %7
  %272 = sub i32 %271, %11
  %273 = sub i32 %272, %2
  %274 = sub i32 %273, %104
  %275 = add i32 %274, %124
  %276 = sub i32 %275, %29
  %277 = add i32 %276, %145
  %278 = add i32 %277, %164
  %279 = add i32 %278, %94
  %280 = add i32 %279, %22
  %281 = add i32 %280, %56
  %282 = add i32 %281, %60
  %283 = sub i32 %282, %65
  %284 = add i32 %283, %44
  %285 = add i32 %284, %16
  %286 = add i32 %285, %73
  %287 = sub i32 %286, %75
  %288 = add i32 %287, %86
  %289 = add i32 %288, %96
  %290 = add i32 %289, %9
  %291 = add i32 %290, %18
  %292 = sub i32 %291, %106
  %293 = sub i32 %292, %114
  %294 = add i32 %293, %53
  %295 = add i32 %294, %123
  %296 = sub i32 %295, %137
  %297 = add i32 %296, %138
  %298 = sub i32 %297, %142
  %299 = sub i32 %298, %171
  %300 = sub i32 %299, %50
  %301 = sub i32 %300, %195
  %302 = add i32 %301, %206
  %303 = add i32 %302, %20
  %304 = add i32 %303, %225
  %305 = sub i32 %304, %12
  %306 = add i32 %305, %14
  %307 = add i32 %306, %17
  %308 = add i32 %307, %21
  %309 = add i32 %308, %30
  %310 = sub i32 %309, %32
  %311 = sub i32 %310, %40
  %312 = add i32 %311, %45
  %313 = add i32 %312, %48
  %314 = add i32 %313, %49
  %315 = sub i32 %314, %52
  %316 = sub i32 %315, %55
  %317 = add i32 %316, %59
  %318 = sub i32 %317, %63
  %319 = add i32 %318, %64
  %320 = add i32 %319, %67
  %321 = sub i32 %320, %72
  %322 = sub i32 %321, %74
  %323 = add i32 %322, %76
  %324 = sub i32 %323, %77
  %325 = add i32 %324, %78
  %326 = add i32 %325, %85
  %327 = add i32 %326, %87
  %328 = sub i32 %327, %97
  %329 = sub i32 %328, %82
  %330 = add i32 %329, %98
  %331 = sub i32 %330, %99
  %332 = add i32 %331, %100
  %333 = sub i32 %332, %103
  %334 = sub i32 %333, %108
  %335 = add i32 %334, %109
  %336 = sub i32 %335, %110
  %337 = sub i32 %336, %112
  %338 = add i32 %337, %113
  %339 = sub i32 %338, %115
  %340 = sub i32 %339, %116
  %341 = sub i32 %340, %118
  %342 = sub i32 %341, %36
  %343 = add i32 %342, %122
  %344 = add i32 %343, %27
  %345 = add i32 %344, %125
  %346 = add i32 %345, %126
  %347 = sub i32 %346, %127
  %348 = add i32 %347, %128
  %349 = add i32 %348, %133
  %350 = sub i32 %349, %134
  %351 = sub i32 %350, %135
  %352 = add i32 %351, %136
  %353 = add i32 %352, %140
  %354 = add i32 %353, %141
  %355 = add i32 %354, %143
  %356 = add i32 %355, %144
  %357 = sub i32 %356, %148
  %358 = add i32 %357, %151
  %359 = sub i32 %358, %153
  %360 = sub i32 %359, %156
  %361 = sub i32 %360, %157
  %362 = add i32 %361, %160
  %363 = sub i32 %362, %163
  %364 = sub i32 %363, %165
  %365 = add i32 %364, %169
  %366 = add i32 %365, %172
  %367 = add i32 %366, %174
  %368 = sub i32 %367, %175
  %369 = add i32 %368, %176
  %370 = add i32 %369, %177
  %371 = add i32 %370, %178
  %372 = sub i32 %371, %181
  %373 = sub i32 %372, %184
  %374 = add i32 %373, %185
  %375 = sub i32 %374, %186
  %376 = sub i32 %375, %191
  %377 = add i32 %376, %193
  %378 = sub i32 %377, %194
  %379 = sub i32 %378, %198
  %380 = sub i32 %379, %203
  %381 = add i32 %380, %204
  %382 = sub i32 %381, %205
  %383 = sub i32 %382, %209
  %384 = add i32 %383, %210
  %385 = sub i32 %384, %216
  %386 = add i32 %385, %217
  %387 = sub i32 %386, %218
  %388 = sub i32 %387, %222
  %389 = add i32 %388, %226
  %390 = sub i32 %389, %227
  %391 = add i32 %390, %230
  %392 = add i32 %391, %231
  %393 = add i32 %392, %232
  %394 = add i32 %393, %234
  %395 = sub i32 %394, %28
  %396 = add i32 %395, %37
  %397 = sub i32 %396, %70
  %398 = sub i32 %397, %80
  %399 = add i32 %398, %84
  %400 = sub i32 %399, %89
  %401 = add i32 %400, %93
  %402 = sub i32 %401, %102
  %403 = add i32 %402, %120
  %404 = sub i32 %403, %130
  %405 = sub i32 %404, %132
  %406 = add i32 %405, %147
  %407 = add i32 %406, %149
  %408 = sub i32 %407, %155
  %409 = sub i32 %408, %159
  %410 = sub i32 %409, %162
  %411 = add i32 %410, %170
  %412 = sub i32 %411, %180
  %413 = sub i32 %412, %187
  %414 = sub i32 %413, %190
  %415 = sub i32 %414, %197
  %416 = add i32 %415, %202
  %417 = sub i32 %416, %208
  %418 = sub i32 %417, %213
  %419 = sub i32 %418, %214
  %420 = sub i32 %419, %220
  %421 = add i32 %420, %224
  %422 = sub i32 %421, %229
  %423 = add i32 %422, %236
  %424 = sub i32 %423, %238
  %425 = sub i32 %424, %240
  %426 = add i32 %425, %242
  %427 = add i32 %426, %244
  %428 = add i32 %427, %246
  %429 = add i32 %428, %265
  %430 = add i32 %429, %267
  %431 = add i32 %430, %262
  %432 = add i32 %431, %259
  %433 = icmp eq i32 %8, %432
  %434 = select i1 %433, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %435 = tail call i32 @puts(i8* nonnull dereferenceable(1) %434)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
