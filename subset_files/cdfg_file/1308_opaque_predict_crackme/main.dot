digraph "DFG for'main' function" {
	Node0x1f05d28[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1f05da8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1f05e38[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1f06298[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1f06378[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1f06498[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1f066d0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1f06788[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1f076f8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1f07d80[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x1f07df0[shape=record, label="  %9 = and i32 %6, %8"];
	Node0x1f07e60[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1f07ed0[shape=record, label="  %11 = or i32 %7, %6"];
	Node0x1f07f40[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x1f07fb0[shape=record, label="  %13 = add i32 %12, %10"];
	Node0x1f08020[shape=record, label="  %14 = xor i32 %7, %6"];
	Node0x1f08090[shape=record, label="  %15 = or i32 %6, %8"];
	Node0x1f08100[shape=record, label="  %16 = and i32 %7, %6"];
	Node0x1f08170[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x1f081e0[shape=record, label="  %18 = xor i32 %14, -1"];
	Node0x1f08250[shape=record, label="  %19 = xor i32 %12, -2"];
	Node0x1f082c0[shape=record, label="  %20 = shl i32 %15, 2"];
	Node0x1f08330[shape=record, label="  %21 = xor i32 %20, -4"];
	Node0x1f083a0[shape=record, label="  %22 = shl i32 %16, 1"];
	Node0x1f08410[shape=record, label="  %23 = add i32 %14, %7"];
	Node0x1f08480[shape=record, label="  %24 = sub i32 %15, %23"];
	Node0x1f084f0[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x1f08560[shape=record, label="  %26 = add i32 %25, %18"];
	Node0x1f085d0[shape=record, label="  %27 = add i32 %26, %9"];
	Node0x1f08640[shape=record, label="  %28 = add i32 %27, %22"];
	Node0x1f086b0[shape=record, label="  %29 = sub i32 %28, %19"];
	Node0x1f08720[shape=record, label="  %30 = add i32 %29, %21"];
	Node0x1f08790[shape=record, label="  %31 = icmp eq i32 %13, %30"];
	Node0x1ea69d8[shape=record, label="  %32 = select i1 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f08a30[shape=record, label="  %33 = call i32 @puts(i8* nonnull dereferenceable(1) %32) #5"];
	Node0x1f08c88[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1f08de8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1f08ea8[shape=record, label="  ret i32 0"];
	Node0x1f05d28 -> Node0x1f05da8;
	Node0x1f05da8 -> Node0x1f05e38;
	Node0x1f05e38 -> Node0x1f06298;
	Node0x1f06298 -> Node0x1f06378;
	Node0x1f06378 -> Node0x1f06498;
	Node0x1f06498 -> Node0x1f066d0;
	Node0x1f066d0 -> Node0x1f06788;
	Node0x1f06788 -> Node0x1f076f8;
	Node0x1f076f8 -> Node0x1f07d80;
	Node0x1f07d80 -> Node0x1f07df0;
	Node0x1f07df0 -> Node0x1f07e60;
	Node0x1f07e60 -> Node0x1f07ed0;
	Node0x1f07ed0 -> Node0x1f07f40;
	Node0x1f07f40 -> Node0x1f07fb0;
	Node0x1f07fb0 -> Node0x1f08020;
	Node0x1f08020 -> Node0x1f08090;
	Node0x1f08090 -> Node0x1f08100;
	Node0x1f08100 -> Node0x1f08170;
	Node0x1f08170 -> Node0x1f081e0;
	Node0x1f081e0 -> Node0x1f08250;
	Node0x1f08250 -> Node0x1f082c0;
	Node0x1f082c0 -> Node0x1f08330;
	Node0x1f08330 -> Node0x1f083a0;
	Node0x1f083a0 -> Node0x1f08410;
	Node0x1f08410 -> Node0x1f08480;
	Node0x1f08480 -> Node0x1f084f0;
	Node0x1f084f0 -> Node0x1f08560;
	Node0x1f08560 -> Node0x1f085d0;
	Node0x1f085d0 -> Node0x1f08640;
	Node0x1f08640 -> Node0x1f086b0;
	Node0x1f086b0 -> Node0x1f08720;
	Node0x1f08720 -> Node0x1f08790;
	Node0x1f08790 -> Node0x1ea69d8;
	Node0x1ea69d8 -> Node0x1f08a30;
	Node0x1f08a30 -> Node0x1f08c88;
	Node0x1f08c88 -> Node0x1f08de8;
	Node0x1f08de8 -> Node0x1f08ea8;
edge [color=red]
	Node0x1f05d28 -> Node0x1f05e38;
	Node0x1f05e38 -> Node0x1f06298;
	Node0x1f05da8 -> Node0x1f06378;
	Node0x1f06378 -> Node0x1f06498;
	Node0x1f05d28 -> Node0x1f066d0;
	Node0x1f05da8 -> Node0x1f066d0;
	Node0x1f05d28 -> Node0x1f06788;
	Node0x1f05da8 -> Node0x1f076f8;
	Node0x1f076f8 -> Node0x1f07d80;
	Node0x1f06788 -> Node0x1f07df0;
	Node0x1f07d80 -> Node0x1f07df0;
	Node0x1f07df0 -> Node0x1f07e60;
	Node0x1f076f8 -> Node0x1f07ed0;
	Node0x1f06788 -> Node0x1f07ed0;
	Node0x1f07ed0 -> Node0x1f07f40;
	Node0x1f07f40 -> Node0x1f07fb0;
	Node0x1f07e60 -> Node0x1f07fb0;
	Node0x1f076f8 -> Node0x1f08020;
	Node0x1f06788 -> Node0x1f08020;
	Node0x1f06788 -> Node0x1f08090;
	Node0x1f07d80 -> Node0x1f08090;
	Node0x1f076f8 -> Node0x1f08100;
	Node0x1f06788 -> Node0x1f08100;
	Node0x1f08100 -> Node0x1f08170;
	Node0x1f08020 -> Node0x1f081e0;
	Node0x1f07f40 -> Node0x1f08250;
	Node0x1f08090 -> Node0x1f082c0;
	Node0x1f082c0 -> Node0x1f08330;
	Node0x1f08100 -> Node0x1f083a0;
	Node0x1f08020 -> Node0x1f08410;
	Node0x1f076f8 -> Node0x1f08410;
	Node0x1f08090 -> Node0x1f08480;
	Node0x1f08410 -> Node0x1f08480;
	Node0x1f08480 -> Node0x1f084f0;
	Node0x1f08170 -> Node0x1f084f0;
	Node0x1f084f0 -> Node0x1f08560;
	Node0x1f081e0 -> Node0x1f08560;
	Node0x1f08560 -> Node0x1f085d0;
	Node0x1f07df0 -> Node0x1f085d0;
	Node0x1f085d0 -> Node0x1f08640;
	Node0x1f083a0 -> Node0x1f08640;
	Node0x1f08640 -> Node0x1f086b0;
	Node0x1f08250 -> Node0x1f086b0;
	Node0x1f086b0 -> Node0x1f08720;
	Node0x1f08330 -> Node0x1f08720;
	Node0x1f07fb0 -> Node0x1f08790;
	Node0x1f08720 -> Node0x1f08790;
	Node0x1f08790 -> Node0x1ea69d8;
	Node0x1ea69d8 -> Node0x1f08a30;
	Node0x1f06378 -> Node0x1f08c88;
	Node0x1f05e38 -> Node0x1f08de8;
}
