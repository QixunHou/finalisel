digraph "DFG for'crackme' function" {
	Node0x1f04b80[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1f04bf0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1f04cb0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x1f04d20[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x1f04d90[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1f04e00[shape=record, label="  %8 = add i32 %7, %5"];
	Node0x1f04e70[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x1f04ee0[shape=record, label="  %10 = or i32 %3, %0"];
	Node0x1f04f50[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x1f04fc0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1f05030[shape=record, label="  %13 = xor i32 %9, -1"];
	Node0x1f050d0[shape=record, label="  %14 = xor i32 %7, -2"];
	Node0x1f05170[shape=record, label="  %15 = shl i32 %10, 2"];
	Node0x1f05210[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0x1f05280[shape=record, label="  %17 = shl i32 %11, 1"];
	Node0x1f052f0[shape=record, label="  %18 = add i32 %9, %1"];
	Node0x1f05360[shape=record, label="  %19 = sub i32 %10, %18"];
	Node0x1f053d0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x1f05440[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x1f054b0[shape=record, label="  %22 = add i32 %21, %4"];
	Node0x1f05520[shape=record, label="  %23 = add i32 %22, %17"];
	Node0x1f05590[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0x1f05600[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x1f05670[shape=record, label="  %26 = icmp eq i32 %8, %25"];
	Node0x1ea5268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f05b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1f05b60[shape=record, label="  ret void"];
	Node0x1f04b80 -> Node0x1f04bf0;
	Node0x1f04bf0 -> Node0x1f04cb0;
	Node0x1f04cb0 -> Node0x1f04d20;
	Node0x1f04d20 -> Node0x1f04d90;
	Node0x1f04d90 -> Node0x1f04e00;
	Node0x1f04e00 -> Node0x1f04e70;
	Node0x1f04e70 -> Node0x1f04ee0;
	Node0x1f04ee0 -> Node0x1f04f50;
	Node0x1f04f50 -> Node0x1f04fc0;
	Node0x1f04fc0 -> Node0x1f05030;
	Node0x1f05030 -> Node0x1f050d0;
	Node0x1f050d0 -> Node0x1f05170;
	Node0x1f05170 -> Node0x1f05210;
	Node0x1f05210 -> Node0x1f05280;
	Node0x1f05280 -> Node0x1f052f0;
	Node0x1f052f0 -> Node0x1f05360;
	Node0x1f05360 -> Node0x1f053d0;
	Node0x1f053d0 -> Node0x1f05440;
	Node0x1f05440 -> Node0x1f054b0;
	Node0x1f054b0 -> Node0x1f05520;
	Node0x1f05520 -> Node0x1f05590;
	Node0x1f05590 -> Node0x1f05600;
	Node0x1f05600 -> Node0x1f05670;
	Node0x1f05670 -> Node0x1ea5268;
	Node0x1ea5268 -> Node0x1f05b10;
	Node0x1f05b10 -> Node0x1f05b60;
edge [color=red]
	Node0x1f04b80 -> Node0x1f04bf0;
	Node0x1f04bf0 -> Node0x1f04cb0;
	Node0x1f04d20 -> Node0x1f04d90;
	Node0x1f04d90 -> Node0x1f04e00;
	Node0x1f04cb0 -> Node0x1f04e00;
	Node0x1f04b80 -> Node0x1f04ee0;
	Node0x1f04f50 -> Node0x1f04fc0;
	Node0x1f04e70 -> Node0x1f05030;
	Node0x1f04d90 -> Node0x1f050d0;
	Node0x1f04ee0 -> Node0x1f05170;
	Node0x1f05170 -> Node0x1f05210;
	Node0x1f04f50 -> Node0x1f05280;
	Node0x1f04e70 -> Node0x1f052f0;
	Node0x1f04ee0 -> Node0x1f05360;
	Node0x1f052f0 -> Node0x1f05360;
	Node0x1f05360 -> Node0x1f053d0;
	Node0x1f04fc0 -> Node0x1f053d0;
	Node0x1f053d0 -> Node0x1f05440;
	Node0x1f05030 -> Node0x1f05440;
	Node0x1f05440 -> Node0x1f054b0;
	Node0x1f04bf0 -> Node0x1f054b0;
	Node0x1f054b0 -> Node0x1f05520;
	Node0x1f05280 -> Node0x1f05520;
	Node0x1f05520 -> Node0x1f05590;
	Node0x1f050d0 -> Node0x1f05590;
	Node0x1f05590 -> Node0x1f05600;
	Node0x1f05210 -> Node0x1f05600;
	Node0x1f04e00 -> Node0x1f05670;
	Node0x1f05600 -> Node0x1f05670;
	Node0x1f05670 -> Node0x1ea5268;
	Node0x1ea5268 -> Node0x1f05b10;
}
