digraph "DFG for'main' function" {
	Node0x1d05938[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1d059e8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1d05a78[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1d05ed8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d05fb8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1d060d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d06310[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1d063c8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1d07338[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1d079c0[shape=record, label="  %8 = mul i32 %7, -4"];
	Node0x1d07a30[shape=record, label="  %9 = and i32 %7, %6"];
	Node0x1d07aa0[shape=record, label="  %10 = xor i32 %7, -1"];
	Node0x1d07b10[shape=record, label="  %11 = and i32 %6, %10"];
	Node0x1d07b80[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0x1d07bf0[shape=record, label="  %13 = and i32 %7, %12"];
	Node0x1d07c60[shape=record, label="  %14 = or i32 %7, %6"];
	Node0x1d07cd0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1d07d40[shape=record, label="  %16 = or i32 %7, %12"];
	Node0x1d07db0[shape=record, label="  %17 = sub i32 %15, %9"];
	Node0x1d07e20[shape=record, label="  %18 = mul i32 %17, 3"];
	Node0x1d07e90[shape=record, label="  %19 = add i32 %6, 2"];
	Node0x1d07f00[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x1d07f70[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0x1d07fe0[shape=record, label="  %22 = sub i32 %21, %16"];
	Node0x1d08050[shape=record, label="  %23 = add i32 %22, %9"];
	Node0x1d080c0[shape=record, label="  %24 = add i32 %23, %18"];
	Node0x1d08130[shape=record, label="  %25 = icmp eq i32 %8, %24"];
	Node0x1ca69d8[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d081c0[shape=record, label="  %27 = call i32 @puts(i8* nonnull dereferenceable(1) %26) #5"];
	Node0x1d08418[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d08578[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d08638[shape=record, label="  ret i32 0"];
	Node0x1d05938 -> Node0x1d059e8;
	Node0x1d059e8 -> Node0x1d05a78;
	Node0x1d05a78 -> Node0x1d05ed8;
	Node0x1d05ed8 -> Node0x1d05fb8;
	Node0x1d05fb8 -> Node0x1d060d8;
	Node0x1d060d8 -> Node0x1d06310;
	Node0x1d06310 -> Node0x1d063c8;
	Node0x1d063c8 -> Node0x1d07338;
	Node0x1d07338 -> Node0x1d079c0;
	Node0x1d079c0 -> Node0x1d07a30;
	Node0x1d07a30 -> Node0x1d07aa0;
	Node0x1d07aa0 -> Node0x1d07b10;
	Node0x1d07b10 -> Node0x1d07b80;
	Node0x1d07b80 -> Node0x1d07bf0;
	Node0x1d07bf0 -> Node0x1d07c60;
	Node0x1d07c60 -> Node0x1d07cd0;
	Node0x1d07cd0 -> Node0x1d07d40;
	Node0x1d07d40 -> Node0x1d07db0;
	Node0x1d07db0 -> Node0x1d07e20;
	Node0x1d07e20 -> Node0x1d07e90;
	Node0x1d07e90 -> Node0x1d07f00;
	Node0x1d07f00 -> Node0x1d07f70;
	Node0x1d07f70 -> Node0x1d07fe0;
	Node0x1d07fe0 -> Node0x1d08050;
	Node0x1d08050 -> Node0x1d080c0;
	Node0x1d080c0 -> Node0x1d08130;
	Node0x1d08130 -> Node0x1ca69d8;
	Node0x1ca69d8 -> Node0x1d081c0;
	Node0x1d081c0 -> Node0x1d08418;
	Node0x1d08418 -> Node0x1d08578;
	Node0x1d08578 -> Node0x1d08638;
edge [color=red]
	Node0x1d05938 -> Node0x1d05a78;
	Node0x1d05a78 -> Node0x1d05ed8;
	Node0x1d059e8 -> Node0x1d05fb8;
	Node0x1d05fb8 -> Node0x1d060d8;
	Node0x1d05938 -> Node0x1d06310;
	Node0x1d059e8 -> Node0x1d06310;
	Node0x1d05938 -> Node0x1d063c8;
	Node0x1d059e8 -> Node0x1d07338;
	Node0x1d07338 -> Node0x1d079c0;
	Node0x1d07338 -> Node0x1d07a30;
	Node0x1d063c8 -> Node0x1d07a30;
	Node0x1d07338 -> Node0x1d07aa0;
	Node0x1d063c8 -> Node0x1d07b10;
	Node0x1d07aa0 -> Node0x1d07b10;
	Node0x1d063c8 -> Node0x1d07b80;
	Node0x1d07338 -> Node0x1d07bf0;
	Node0x1d07b80 -> Node0x1d07bf0;
	Node0x1d07338 -> Node0x1d07c60;
	Node0x1d063c8 -> Node0x1d07c60;
	Node0x1d07c60 -> Node0x1d07cd0;
	Node0x1d07338 -> Node0x1d07d40;
	Node0x1d07b80 -> Node0x1d07d40;
	Node0x1d07cd0 -> Node0x1d07db0;
	Node0x1d07a30 -> Node0x1d07db0;
	Node0x1d07db0 -> Node0x1d07e20;
	Node0x1d063c8 -> Node0x1d07e90;
	Node0x1d07e90 -> Node0x1d07f00;
	Node0x1d07b10 -> Node0x1d07f00;
	Node0x1d07f00 -> Node0x1d07f70;
	Node0x1d07bf0 -> Node0x1d07f70;
	Node0x1d07f70 -> Node0x1d07fe0;
	Node0x1d07d40 -> Node0x1d07fe0;
	Node0x1d07fe0 -> Node0x1d08050;
	Node0x1d07a30 -> Node0x1d08050;
	Node0x1d08050 -> Node0x1d080c0;
	Node0x1d07e20 -> Node0x1d080c0;
	Node0x1d079c0 -> Node0x1d08130;
	Node0x1d080c0 -> Node0x1d08130;
	Node0x1d08130 -> Node0x1ca69d8;
	Node0x1ca69d8 -> Node0x1d081c0;
	Node0x1d05fb8 -> Node0x1d08418;
	Node0x1d05a78 -> Node0x1d08578;
}
