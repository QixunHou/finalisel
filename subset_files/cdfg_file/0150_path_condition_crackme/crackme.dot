digraph "DFG for'crackme' function" {
	Node0x1d04a60[shape=record, label="  %3 = mul i32 %1, -4"];
	Node0x1d04ad0[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x1d04b90[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1d04c00[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x1d04c70[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1d04ce0[shape=record, label="  %8 = and i32 %7, %1"];
	Node0x1d04d50[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1d04dc0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1d04e30[shape=record, label="  %11 = or i32 %7, %1"];
	Node0x1d04ea0[shape=record, label="  %12 = sub i32 %10, %4"];
	Node0x1d04f40[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0x1d04fe0[shape=record, label="  %14 = add i32 %0, 2"];
	Node0x1d05050[shape=record, label="  %15 = add i32 %14, %6"];
	Node0x1d050c0[shape=record, label="  %16 = sub i32 %15, %8"];
	Node0x1d05130[shape=record, label="  %17 = sub i32 %16, %11"];
	Node0x1d051a0[shape=record, label="  %18 = add i32 %17, %4"];
	Node0x1d05210[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x1d05280[shape=record, label="  %20 = icmp eq i32 %3, %19"];
	Node0x1ca5268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d05720[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1d05770[shape=record, label="  ret void"];
	Node0x1d04a60 -> Node0x1d04ad0;
	Node0x1d04ad0 -> Node0x1d04b90;
	Node0x1d04b90 -> Node0x1d04c00;
	Node0x1d04c00 -> Node0x1d04c70;
	Node0x1d04c70 -> Node0x1d04ce0;
	Node0x1d04ce0 -> Node0x1d04d50;
	Node0x1d04d50 -> Node0x1d04dc0;
	Node0x1d04dc0 -> Node0x1d04e30;
	Node0x1d04e30 -> Node0x1d04ea0;
	Node0x1d04ea0 -> Node0x1d04f40;
	Node0x1d04f40 -> Node0x1d04fe0;
	Node0x1d04fe0 -> Node0x1d05050;
	Node0x1d05050 -> Node0x1d050c0;
	Node0x1d050c0 -> Node0x1d05130;
	Node0x1d05130 -> Node0x1d051a0;
	Node0x1d051a0 -> Node0x1d05210;
	Node0x1d05210 -> Node0x1d05280;
	Node0x1d05280 -> Node0x1ca5268;
	Node0x1ca5268 -> Node0x1d05720;
	Node0x1d05720 -> Node0x1d05770;
edge [color=red]
	Node0x1d04b90 -> Node0x1d04c00;
	Node0x1d04c70 -> Node0x1d04ce0;
	Node0x1d04d50 -> Node0x1d04dc0;
	Node0x1d04c70 -> Node0x1d04e30;
	Node0x1d04dc0 -> Node0x1d04ea0;
	Node0x1d04ad0 -> Node0x1d04ea0;
	Node0x1d04ea0 -> Node0x1d04f40;
	Node0x1d04fe0 -> Node0x1d05050;
	Node0x1d04c00 -> Node0x1d05050;
	Node0x1d05050 -> Node0x1d050c0;
	Node0x1d04ce0 -> Node0x1d050c0;
	Node0x1d050c0 -> Node0x1d05130;
	Node0x1d04e30 -> Node0x1d05130;
	Node0x1d05130 -> Node0x1d051a0;
	Node0x1d04ad0 -> Node0x1d051a0;
	Node0x1d051a0 -> Node0x1d05210;
	Node0x1d04f40 -> Node0x1d05210;
	Node0x1d04a60 -> Node0x1d05280;
	Node0x1d05210 -> Node0x1d05280;
	Node0x1d05280 -> Node0x1ca5268;
	Node0x1ca5268 -> Node0x1d05720;
}
