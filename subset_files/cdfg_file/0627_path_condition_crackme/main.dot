digraph "DFG for'main' function" {
	Node0xbfc9f8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xbfca78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xbfcb08[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xbfcb68[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xbfcfe8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xbfd0c8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xbfd1c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xbfd288[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xbfd338[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xbfd598[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xbfd658[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xbfe5c8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xbfec38[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xbfed30[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xbfef38[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xbff098[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xbff1a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xbff268[shape=record, label="  ret i32 0"];
	Node0xbfc9f8 -> Node0xbfca78;
	Node0xbfca78 -> Node0xbfcb08;
	Node0xbfcb08 -> Node0xbfcb68;
	Node0xbfcb68 -> Node0xbfcfe8;
	Node0xbfcfe8 -> Node0xbfd0c8;
	Node0xbfd0c8 -> Node0xbfd1c8;
	Node0xbfd1c8 -> Node0xbfd288;
	Node0xbfd288 -> Node0xbfd338;
	Node0xbfd338 -> Node0xbfd598;
	Node0xbfd598 -> Node0xbfd658;
	Node0xbfd658 -> Node0xbfe5c8;
	Node0xbfe5c8 -> Node0xbfec38;
	Node0xbfec38 -> Node0xbfed30;
	Node0xbfed30 -> Node0xbfef38;
	Node0xbfef38 -> Node0xbff098;
	Node0xbff098 -> Node0xbff1a8;
	Node0xbff1a8 -> Node0xbff268;
edge [color=red]
	Node0xbfc9f8 -> Node0xbfcb68;
	Node0xbfcb68 -> Node0xbfcfe8;
	Node0xbfca78 -> Node0xbfd0c8;
	Node0xbfd0c8 -> Node0xbfd1c8;
	Node0xbfcb08 -> Node0xbfd288;
	Node0xbfd288 -> Node0xbfd338;
	Node0xbfc9f8 -> Node0xbfd598;
	Node0xbfca78 -> Node0xbfd598;
	Node0xbfcb08 -> Node0xbfd598;
	Node0xbfc9f8 -> Node0xbfd658;
	Node0xbfca78 -> Node0xbfe5c8;
	Node0xbfcb08 -> Node0xbfec38;
	Node0xbfd658 -> Node0xbfed30;
	Node0xbfe5c8 -> Node0xbfed30;
	Node0xbfec38 -> Node0xbfed30;
	Node0xbfd288 -> Node0xbfef38;
	Node0xbfd0c8 -> Node0xbff098;
	Node0xbfcb68 -> Node0xbff1a8;
}
