digraph "DFG for'crackme' function" {
	Node0xbc0be0[shape=record, label="  %3 = shl i32 %0, 1"];
	Node0xbc0c80[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xbc0d40[shape=record, label="  %5 = and i32 %4, %0"];
	Node0xbc0db0[shape=record, label="  %6 = xor i32 %4, %0"];
	Node0xbc0e20[shape=record, label="  %7 = or i32 %1, %0"];
	Node0xbc0e90[shape=record, label="  %8 = or i32 %4, %0"];
	Node0xbc0f00[shape=record, label="  %9 = and i32 %1, %0"];
	Node0xbc0f70[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xbc0fe0[shape=record, label="  %11 = xor i32 %7, -1"];
	Node0xbc1050[shape=record, label="  %12 = shl i32 %8, 2"];
	Node0xbc10f0[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0xbc1160[shape=record, label="  %14 = shl i32 %5, 1"];
	Node0xbc1200[shape=record, label="  %15 = mul i32 %9, 11"];
	Node0xbc1270[shape=record, label="  %16 = sub i32 %11, %6"];
	Node0xbc1310[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0xbc13b0[shape=record, label="  %18 = sub i32 3, %1"];
	Node0xbc1420[shape=record, label="  %19 = add i32 %18, %4"];
	Node0xbc1490[shape=record, label="  %20 = add i32 %19, %5"];
	Node0xbc1500[shape=record, label="  %21 = sub i32 %20, %7"];
	Node0xbc1570[shape=record, label="  %22 = add i32 %21, %8"];
	Node0xbc15e0[shape=record, label="  %23 = add i32 %22, %10"];
	Node0xbc1650[shape=record, label="  %24 = add i32 %23, %14"];
	Node0xbc16c0[shape=record, label="  %25 = add i32 %24, %15"];
	Node0xbc1730[shape=record, label="  %26 = add i32 %25, %13"];
	Node0xbc17a0[shape=record, label="  %27 = add i32 %26, %17"];
	Node0xbc1810[shape=record, label="  %28 = icmp eq i32 %3, %27"];
	Node0xb61268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xbc1cb0[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xbc1d00[shape=record, label="  ret void"];
	Node0xbc0be0 -> Node0xbc0c80;
	Node0xbc0c80 -> Node0xbc0d40;
	Node0xbc0d40 -> Node0xbc0db0;
	Node0xbc0db0 -> Node0xbc0e20;
	Node0xbc0e20 -> Node0xbc0e90;
	Node0xbc0e90 -> Node0xbc0f00;
	Node0xbc0f00 -> Node0xbc0f70;
	Node0xbc0f70 -> Node0xbc0fe0;
	Node0xbc0fe0 -> Node0xbc1050;
	Node0xbc1050 -> Node0xbc10f0;
	Node0xbc10f0 -> Node0xbc1160;
	Node0xbc1160 -> Node0xbc1200;
	Node0xbc1200 -> Node0xbc1270;
	Node0xbc1270 -> Node0xbc1310;
	Node0xbc1310 -> Node0xbc13b0;
	Node0xbc13b0 -> Node0xbc1420;
	Node0xbc1420 -> Node0xbc1490;
	Node0xbc1490 -> Node0xbc1500;
	Node0xbc1500 -> Node0xbc1570;
	Node0xbc1570 -> Node0xbc15e0;
	Node0xbc15e0 -> Node0xbc1650;
	Node0xbc1650 -> Node0xbc16c0;
	Node0xbc16c0 -> Node0xbc1730;
	Node0xbc1730 -> Node0xbc17a0;
	Node0xbc17a0 -> Node0xbc1810;
	Node0xbc1810 -> Node0xb61268;
	Node0xb61268 -> Node0xbc1cb0;
	Node0xbc1cb0 -> Node0xbc1d00;
edge [color=red]
	Node0xbc0c80 -> Node0xbc0d40;
	Node0xbc0c80 -> Node0xbc0db0;
	Node0xbc0c80 -> Node0xbc0e90;
	Node0xbc0f00 -> Node0xbc0f70;
	Node0xbc0e20 -> Node0xbc0fe0;
	Node0xbc0e90 -> Node0xbc1050;
	Node0xbc1050 -> Node0xbc10f0;
	Node0xbc0d40 -> Node0xbc1160;
	Node0xbc0f00 -> Node0xbc1200;
	Node0xbc0fe0 -> Node0xbc1270;
	Node0xbc0db0 -> Node0xbc1270;
	Node0xbc1270 -> Node0xbc1310;
	Node0xbc13b0 -> Node0xbc1420;
	Node0xbc0c80 -> Node0xbc1420;
	Node0xbc1420 -> Node0xbc1490;
	Node0xbc0d40 -> Node0xbc1490;
	Node0xbc1490 -> Node0xbc1500;
	Node0xbc0e20 -> Node0xbc1500;
	Node0xbc1500 -> Node0xbc1570;
	Node0xbc0e90 -> Node0xbc1570;
	Node0xbc1570 -> Node0xbc15e0;
	Node0xbc0f70 -> Node0xbc15e0;
	Node0xbc15e0 -> Node0xbc1650;
	Node0xbc1160 -> Node0xbc1650;
	Node0xbc1650 -> Node0xbc16c0;
	Node0xbc1200 -> Node0xbc16c0;
	Node0xbc16c0 -> Node0xbc1730;
	Node0xbc10f0 -> Node0xbc1730;
	Node0xbc1730 -> Node0xbc17a0;
	Node0xbc1310 -> Node0xbc17a0;
	Node0xbc0be0 -> Node0xbc1810;
	Node0xbc17a0 -> Node0xbc1810;
	Node0xbc1810 -> Node0xb61268;
	Node0xb61268 -> Node0xbc1cb0;
}
