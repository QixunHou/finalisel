; ModuleID = '../.././c_source_file/1117_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1117_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = xor i32 %7, -1
  %9 = xor i32 %0, -1
  %10 = xor i32 %1, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = sub i32 %11, %0
  %14 = add i32 %13, %8
  %15 = or i32 %4, %3
  %16 = or i32 %6, %3
  %17 = shl i32 %15, 2
  %18 = xor i32 %17, -4
  %19 = xor i32 %16, -1
  %20 = and i32 %4, %3
  %21 = and i32 %1, %0
  %22 = shl i32 %21, 1
  %23 = and i32 %10, %0
  %24 = and i32 %2, %1
  %25 = or i32 %24, %23
  %26 = and i32 %2, %0
  %27 = or i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %26, %28
  %30 = xor i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = or i32 %21, %31
  %33 = xor i32 %2, %0
  %34 = xor i32 %1, %0
  %35 = xor i32 %33, -1
  %36 = or i32 %34, %35
  %37 = and i32 %24, %9
  %38 = and i32 %30, %0
  %39 = or i32 %37, %38
  %40 = or i32 %2, %1
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %0
  %43 = or i32 %2, %0
  %44 = and i32 %43, %10
  %45 = and i32 %43, %34
  %46 = and i32 %33, %34
  %47 = xor i32 %26, %11
  %48 = xor i32 %2, -1
  %49 = or i32 %21, %48
  %50 = xor i32 %43, -1
  %51 = xor i32 %34, -1
  %52 = or i32 %50, %51
  %53 = xor i32 %23, -1
  %54 = xor i32 %53, %2
  %55 = xor i32 %26, -1
  %56 = xor i32 %43, %21
  %57 = and i32 %48, %0
  %58 = xor i32 %57, -1
  %59 = xor i32 %58, %1
  %60 = and i32 %34, %58
  %61 = or i32 %50, %10
  %62 = shl i32 %51, 1
  %63 = and i32 %30, %27
  %64 = and i32 %48, %1
  %65 = xor i32 %64, %0
  %66 = or i32 %30, %9
  %67 = or i32 %48, %0
  %68 = xor i32 %67, -1
  %69 = or i32 %21, %68
  %70 = or i32 %57, %51
  %71 = and i32 %35, %51
  %72 = and i32 %10, %2
  %73 = and i32 %72, %9
  %74 = xor i32 %73, %66
  %75 = and i32 %34, %55
  %76 = xor i32 %37, -1
  %77 = xor i32 %38, %76
  %78 = add i32 %57, 1
  %79 = xor i32 %24, -1
  %80 = xor i32 %79, %0
  %81 = and i32 %53, %2
  %82 = or i32 %26, %64
  %83 = xor i32 %64, -1
  %84 = xor i32 %83, %0
  %85 = or i32 %21, %41
  %86 = or i32 %26, %12
  %87 = xor i32 %21, -1
  %88 = and i32 %87, %2
  %89 = shl i32 %88, 1
  %90 = and i32 %55, %51
  %91 = xor i32 %68, %1
  %92 = or i32 %48, %28
  %93 = xor i32 %28, %2
  %94 = or i32 %57, %24
  %95 = or i32 %40, %9
  %96 = or i32 %33, %10
  %97 = and i32 %27, %35
  %98 = or i32 %48, %12
  %99 = and i32 %55, %10
  %100 = and i32 %34, %2
  %101 = add i32 %24, 1
  %102 = and i32 %33, %53
  %103 = shl i32 %102, 2
  %104 = and i32 %48, %51
  %105 = and i32 %43, %51
  %106 = shl i32 %105, 1
  %107 = or i32 %33, %28
  %108 = add i32 %67, 1
  %109 = or i32 %48, %1
  %110 = xor i32 %66, -1
  %111 = or i32 %73, %110
  %112 = or i32 %10, %2
  %113 = and i32 %112, %0
  %114 = or i32 %73, %113
  %115 = and i32 %55, %1
  %116 = xor i32 %109, -1
  %117 = or i32 %116, %0
  %118 = xor i32 %67, %21
  %119 = shl i32 %118, 1
  %120 = and i32 %24, %0
  %121 = and i32 %30, %9
  %122 = xor i32 %121, -1
  %123 = xor i32 %120, %122
  %124 = and i32 %72, %0
  %125 = xor i32 %30, %9
  %126 = xor i32 %125, %124
  %127 = and i32 %58, %10
  %128 = or i32 %33, %12
  %129 = and i32 %35, %1
  %130 = or i32 %35, %12
  %131 = or i32 %51, %2
  %132 = and i32 %109, %9
  %133 = xor i32 %31, %0
  %134 = shl i32 %133, 1
  %135 = xor i32 %26, %27
  %136 = or i32 %30, %0
  %137 = or i32 %31, %9
  %138 = or i32 %48, %51
  %139 = and i32 %112, %9
  %140 = xor i32 %124, -1
  %141 = xor i32 %139, %140
  %142 = and i32 %34, %35
  %143 = and i32 %79, %0
  %144 = and i32 %40, %0
  %145 = xor i32 %112, %0
  %146 = or i32 %124, %145
  %147 = or i32 %57, %116
  %148 = or i32 %24, %9
  %149 = and i32 %11, %35
  %150 = xor i32 %26, %83
  %151 = shl i32 %150, 1
  %152 = and i32 %11, %48
  %153 = xor i32 %40, %21
  %154 = or i32 %83, %9
  %155 = xor i32 %144, %76
  %156 = or i32 %79, %9
  %157 = and i32 %48, %53
  %158 = and i32 %31, %9
  %159 = and i32 %31, %87
  %160 = shl i32 %159, 1
  %161 = or i32 %35, %10
  %162 = or i32 %40, %0
  %163 = and i32 %30, %87
  %164 = xor i32 %136, -1
  %165 = or i32 %124, %164
  %166 = or i32 %57, %10
  %167 = shl i32 %166, 1
  %168 = or i32 %64, %23
  %169 = or i32 %28, %2
  %170 = or i32 %109, %0
  %171 = shl i32 %170, 1
  %172 = xor i32 %23, %2
  %173 = shl i32 %172, 1
  %174 = and i32 %58, %1
  %175 = shl i32 %174, 1
  %176 = xor i32 %116, %0
  %177 = or i32 %23, %48
  %178 = or i32 %33, %34
  %179 = shl i32 %178, 1
  %180 = and i32 %43, %1
  %181 = or i32 %35, %28
  %182 = shl i32 %181, 1
  %183 = or i32 %34, %50
  %184 = xor i32 %67, %1
  %185 = xor i32 %23, %79
  %186 = or i32 %64, %9
  %187 = or i32 %41, %9
  %188 = xor i32 %55, %1
  %189 = and i32 %51, %2
  %190 = or i32 %23, %2
  %191 = xor i32 %26, %40
  %192 = or i32 %12, %2
  %193 = xor i32 %57, %1
  %194 = and i32 %27, %2
  %195 = or i32 %124, %139
  %196 = or i32 %31, %0
  %197 = shl i32 %196, 1
  %198 = and i32 %109, %0
  %199 = or i32 %21, %2
  %200 = shl i32 %199, 1
  %201 = or i32 %31, %28
  %202 = and i32 %33, %27
  %203 = shl i32 %202, 1
  %204 = and i32 %11, %2
  %205 = shl i32 %204, 1
  %206 = and i32 %31, %53
  %207 = or i32 %26, %1
  %208 = or i32 %50, %1
  %209 = or i32 %30, %23
  %210 = and i32 %31, %0
  %211 = and i32 %27, %31
  %212 = and i32 %48, %87
  %213 = and i32 %33, %87
  %214 = xor i32 %113, -1
  %215 = xor i32 %73, %214
  %216 = or i32 %21, %35
  %217 = or i32 %79, %0
  %218 = or i32 %57, %34
  %219 = add i32 %33, 1
  %220 = or i32 %120, %121
  %221 = or i32 %34, %2
  %222 = or i32 %30, %21
  %223 = and i32 %33, %1
  %224 = shl i32 %223, 1
  %225 = xor i32 %57, %79
  %226 = and i32 %35, %87
  %227 = or i32 %24, %0
  %228 = and i32 %41, %9
  %229 = and i32 %64, %9
  %230 = mul i32 %229, -10
  %231 = and i32 %41, %0
  %232 = and i32 %64, %0
  %233 = and i32 %116, %9
  %234 = mul i32 %37, 9
  %235 = and i32 %116, %0
  %236 = add i32 %23, %0
  %237 = add i32 %236, %116
  %238 = add i32 %237, %190
  %239 = add i32 %238, %216
  %240 = add i32 %239, %211
  %241 = add i32 %240, %210
  %242 = add i32 %241, %207
  %243 = add i32 %242, %206
  %244 = add i32 %243, %188
  %245 = add i32 %244, %137
  %246 = add i32 %245, %115
  %247 = add i32 %246, %97
  %248 = add i32 %247, %80
  %249 = add i32 %248, %25
  %250 = add i32 %249, %7
  %251 = shl i32 %250, 1
  %252 = sub i32 %128, %187
  %253 = sub i32 %252, %60
  %254 = sub i32 %253, %59
  %255 = add i32 %254, %220
  %256 = mul i32 %255, 5
  %257 = sub i32 %121, %117
  %258 = sub i32 %257, %96
  %259 = add i32 %258, %19
  %260 = mul i32 %259, 3
  %261 = add i32 %63, %91
  %262 = add i32 %261, %20
  %263 = shl i32 %262, 2
  %264 = add i32 %235, %232
  %265 = mul i32 %264, 11
  %266 = add i32 %233, %231
  %267 = mul i32 %266, 7
  %268 = sub i32 %228, %120
  %269 = mul i32 %268, 13
  %270 = add i32 %27, 4
  %271 = sub i32 %270, %34
  %272 = add i32 %271, %87
  %273 = add i32 %272, %2
  %274 = add i32 %273, %11
  %275 = sub i32 %274, %22
  %276 = add i32 %275, %33
  %277 = add i32 %276, %49
  %278 = add i32 %277, %54
  %279 = add i32 %278, %55
  %280 = sub i32 %279, %62
  %281 = add i32 %280, %78
  %282 = add i32 %281, %81
  %283 = add i32 %282, %92
  %284 = sub i32 %283, %93
  %285 = add i32 %284, %98
  %286 = sub i32 %285, %100
  %287 = add i32 %286, %101
  %288 = sub i32 %287, %30
  %289 = sub i32 %288, %104
  %290 = add i32 %289, %108
  %291 = add i32 %290, %109
  %292 = sub i32 %291, %57
  %293 = add i32 %292, %131
  %294 = add i32 %293, %138
  %295 = sub i32 %294, %43
  %296 = add i32 %295, %152
  %297 = sub i32 %296, %26
  %298 = sub i32 %297, %157
  %299 = add i32 %298, %41
  %300 = add i32 %299, %169
  %301 = sub i32 %300, %177
  %302 = add i32 %301, %189
  %303 = add i32 %302, %192
  %304 = add i32 %303, %64
  %305 = add i32 %304, %194
  %306 = sub i32 %305, %212
  %307 = add i32 %306, %219
  %308 = add i32 %307, %221
  %309 = add i32 %308, %6
  %310 = add i32 %309, %29
  %311 = sub i32 %310, %32
  %312 = sub i32 %311, %36
  %313 = add i32 %312, %42
  %314 = sub i32 %313, %44
  %315 = add i32 %314, %45
  %316 = sub i32 %315, %46
  %317 = add i32 %316, %47
  %318 = sub i32 %317, %52
  %319 = add i32 %318, %56
  %320 = sub i32 %319, %61
  %321 = add i32 %320, %65
  %322 = add i32 %321, %66
  %323 = add i32 %322, %69
  %324 = sub i32 %323, %70
  %325 = add i32 %324, %71
  %326 = add i32 %325, %75
  %327 = sub i32 %326, %82
  %328 = add i32 %327, %84
  %329 = add i32 %328, %85
  %330 = sub i32 %329, %86
  %331 = sub i32 %330, %89
  %332 = add i32 %331, %90
  %333 = sub i32 %332, %94
  %334 = add i32 %333, %95
  %335 = sub i32 %334, %99
  %336 = sub i32 %335, %107
  %337 = add i32 %336, %127
  %338 = sub i32 %337, %129
  %339 = add i32 %338, %130
  %340 = add i32 %339, %132
  %341 = add i32 %340, %135
  %342 = sub i32 %341, %136
  %343 = sub i32 %342, %142
  %344 = sub i32 %343, %143
  %345 = sub i32 %344, %144
  %346 = add i32 %345, %147
  %347 = sub i32 %346, %148
  %348 = sub i32 %347, %149
  %349 = add i32 %348, %153
  %350 = add i32 %349, %154
  %351 = sub i32 %350, %156
  %352 = sub i32 %351, %158
  %353 = sub i32 %352, %161
  %354 = add i32 %353, %162
  %355 = sub i32 %354, %163
  %356 = add i32 %355, %168
  %357 = sub i32 %356, %173
  %358 = sub i32 %357, %176
  %359 = sub i32 %358, %180
  %360 = sub i32 %359, %183
  %361 = add i32 %360, %184
  %362 = sub i32 %361, %185
  %363 = sub i32 %362, %186
  %364 = add i32 %363, %191
  %365 = sub i32 %364, %193
  %366 = sub i32 %365, %198
  %367 = sub i32 %366, %200
  %368 = add i32 %367, %201
  %369 = sub i32 %368, %205
  %370 = add i32 %369, %38
  %371 = add i32 %370, %208
  %372 = sub i32 %371, %209
  %373 = sub i32 %372, %213
  %374 = add i32 %373, %217
  %375 = sub i32 %374, %218
  %376 = sub i32 %375, %222
  %377 = sub i32 %376, %225
  %378 = add i32 %377, %226
  %379 = add i32 %378, %227
  %380 = add i32 %379, %15
  %381 = sub i32 %380, %16
  %382 = sub i32 %381, %39
  %383 = add i32 %382, %74
  %384 = sub i32 %383, %77
  %385 = sub i32 %384, %103
  %386 = sub i32 %385, %106
  %387 = add i32 %386, %111
  %388 = add i32 %387, %114
  %389 = sub i32 %388, %119
  %390 = add i32 %389, %123
  %391 = sub i32 %390, %126
  %392 = sub i32 %391, %134
  %393 = sub i32 %392, %141
  %394 = add i32 %393, %146
  %395 = sub i32 %394, %151
  %396 = sub i32 %395, %155
  %397 = sub i32 %396, %160
  %398 = add i32 %397, %165
  %399 = sub i32 %398, %167
  %400 = sub i32 %399, %171
  %401 = sub i32 %400, %175
  %402 = sub i32 %401, %179
  %403 = sub i32 %402, %182
  %404 = add i32 %403, %195
  %405 = sub i32 %404, %197
  %406 = sub i32 %405, %203
  %407 = add i32 %406, %215
  %408 = sub i32 %407, %224
  %409 = add i32 %408, %230
  %410 = add i32 %409, %234
  %411 = add i32 %410, %265
  %412 = add i32 %411, %267
  %413 = add i32 %412, %269
  %414 = add i32 %413, %18
  %415 = add i32 %414, %263
  %416 = add i32 %415, %260
  %417 = add i32 %416, %256
  %418 = add i32 %417, %251
  %419 = icmp eq i32 %14, %418
  %420 = select i1 %419, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %421 = tail call i32 @puts(i8* nonnull dereferenceable(1) %420)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
