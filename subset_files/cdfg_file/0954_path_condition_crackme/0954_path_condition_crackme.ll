; ModuleID = '../.././c_source_file/0954_path_condition_crackme.c'
source_filename = "../.././c_source_file/0954_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = add i32 %4, 1
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %0
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %10
  %14 = shl i32 %13, 1
  %15 = add i32 %7, %14
  %16 = or i32 %2, %0
  %17 = xor i32 %1, %0
  %18 = and i32 %16, %17
  %19 = shl i32 %18, 1
  %20 = sub i32 %15, %19
  %21 = or i32 %4, %3
  %22 = xor i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = shl i32 %4, 1
  %25 = or i32 %6, %3
  %26 = xor i32 %25, -1
  %27 = and i32 %6, %3
  %28 = and i32 %4, %3
  %29 = or i32 %1, %0
  %30 = and i32 %1, %0
  %31 = xor i32 %2, -1
  %32 = or i32 %31, %0
  %33 = xor i32 %32, %30
  %34 = or i32 %30, %2
  %35 = xor i32 %0, -1
  %36 = and i32 %2, %1
  %37 = and i32 %36, %35
  %38 = or i32 %2, %1
  %39 = and i32 %38, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %37, %40
  %42 = xor i32 %36, -1
  %43 = and i32 %42, %35
  %44 = xor i32 %30, -1
  %45 = and i32 %44, %2
  %46 = and i32 %2, %0
  %47 = xor i32 %46, -1
  %48 = and i32 %47, %1
  %49 = xor i32 %17, -1
  %50 = or i32 %46, %49
  %51 = or i32 %10, %2
  %52 = shl i32 %51, 2
  %53 = and i32 %8, %0
  %54 = and i32 %8, %2
  %55 = and i32 %54, %0
  %56 = xor i32 %2, %1
  %57 = or i32 %56, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %55, %58
  %60 = and i32 %17, %31
  %61 = shl i32 %60, 1
  %62 = xor i32 %42, %0
  %63 = add i32 %11, 1
  %64 = and i32 %31, %1
  %65 = xor i32 %64, -1
  %66 = or i32 %65, %35
  %67 = and i32 %9, %12
  %68 = or i32 %36, %53
  %69 = xor i32 %38, -1
  %70 = or i32 %69, %35
  %71 = or i32 %31, %1
  %72 = and i32 %71, %0
  %73 = xor i32 %71, -1
  %74 = or i32 %73, %0
  %75 = or i32 %53, %31
  %76 = or i32 %11, %53
  %77 = shl i32 %76, 1
  %78 = xor i32 %16, -1
  %79 = xor i32 %78, %1
  %80 = or i32 %31, %10
  %81 = xor i32 %53, %42
  %82 = and i32 %56, %9
  %83 = or i32 %37, %39
  %84 = and i32 %36, %0
  %85 = and i32 %56, %35
  %86 = or i32 %84, %85
  %87 = shl i32 %86, 1
  %88 = xor i32 %16, %30
  %89 = or i32 %46, %17
  %90 = xor i32 %29, -1
  %91 = xor i32 %56, -1
  %92 = or i32 %91, %90
  %93 = shl i32 %92, 2
  %94 = xor i32 %46, %9
  %95 = shl i32 %94, 1
  %96 = and i32 %11, %49
  %97 = shl i32 %96, 1
  %98 = and i32 %12, %8
  %99 = or i32 %46, %1
  %100 = xor i32 %90, %2
  %101 = and i32 %31, %0
  %102 = xor i32 %101, -1
  %103 = and i32 %102, %1
  %104 = xor i32 %32, -1
  %105 = or i32 %104, %49
  %106 = or i32 %31, %90
  %107 = xor i32 %16, %1
  %108 = or i32 %11, %90
  %109 = or i32 %46, %10
  %110 = and i32 %9, %31
  %111 = xor i32 %29, %2
  %112 = xor i32 %65, %0
  %113 = and i32 %11, %17
  %114 = or i32 %42, %35
  %115 = shl i32 %114, 1
  %116 = and i32 %16, %1
  %117 = xor i32 %56, %0
  %118 = and i32 %17, %102
  %119 = and i32 %32, %8
  %120 = xor i32 %104, %1
  %121 = or i32 %104, %1
  %122 = xor i32 %91, %0
  %123 = or i32 %46, %90
  %124 = or i32 %11, %8
  %125 = or i32 %11, %49
  %126 = xor i32 %46, %1
  %127 = and i32 %12, %49
  %128 = and i32 %71, %35
  %129 = or i32 %36, %35
  %130 = shl i32 %129, 1
  %131 = and i32 %47, %49
  %132 = shl i32 %131, 1
  %133 = xor i32 %101, %42
  %134 = xor i32 %36, %0
  %135 = add i32 %71, 1
  %136 = xor i32 %46, %29
  %137 = xor i32 %46, %65
  %138 = and i32 %11, %8
  %139 = xor i32 %53, -1
  %140 = and i32 %12, %139
  %141 = or i32 %49, %2
  %142 = and i32 %31, %44
  %143 = or i32 %11, %17
  %144 = or i32 %38, %35
  %145 = or i32 %69, %0
  %146 = and i32 %17, %12
  %147 = shl i32 %146, 1
  %148 = or i32 %12, %90
  %149 = xor i32 %55, %57
  %150 = or i32 %46, %8
  %151 = and i32 %32, %49
  %152 = or i32 %8, %2
  %153 = and i32 %152, %35
  %154 = or i32 %55, %153
  %155 = xor i32 %38, %0
  %156 = and i32 %29, %2
  %157 = or i32 %71, %0
  %158 = xor i32 %0, 2147483647
  %159 = xor i32 %158, %152
  %160 = xor i32 %159, %55
  %161 = or i32 %42, %0
  %162 = xor i32 %153, -1
  %163 = xor i32 %55, %162
  %164 = or i32 %17, %2
  %165 = or i32 %30, %78
  %166 = shl i32 %165, 1
  %167 = or i32 %101, %49
  %168 = or i32 %30, %73
  %169 = and i32 %91, %0
  %170 = or i32 %64, %0
  %171 = shl i32 %170, 1
  %172 = or i32 %30, %31
  %173 = or i32 %56, %30
  %174 = xor i32 %38, %30
  %175 = and i32 %91, %35
  %176 = and i32 %54, %35
  %177 = and i32 %152, %0
  %178 = xor i32 %177, 2147483647
  %179 = xor i32 %178, %176
  %180 = shl i32 %179, 1
  %181 = and i32 %16, %49
  %182 = and i32 %56, %44
  %183 = or i32 %17, %12
  %184 = add i32 %32, 1
  %185 = or i32 %31, %49
  %186 = and i32 %38, %35
  %187 = or i32 %84, %186
  %188 = and i32 %9, %2
  %189 = xor i32 %71, %30
  %190 = and i32 %12, %1
  %191 = and i32 %9, %91
  %192 = or i32 %64, %35
  %193 = and i32 %102, %49
  %194 = shl i32 %78, 1
  %195 = xor i32 %71, %0
  %196 = add i32 %38, 1
  %197 = xor i32 %101, %71
  %198 = or i32 %56, %35
  %199 = xor i32 %85, 2147483647
  %200 = xor i32 %199, %84
  %201 = shl i32 %200, 1
  %202 = and i32 %91, %139
  %203 = xor i32 %101, %1
  %204 = or i32 %11, %30
  %205 = xor i32 %47, %1
  %206 = xor i32 %32, %1
  %207 = xor i32 %84, -1
  %208 = xor i32 %155, %207
  %209 = or i32 %56, %53
  %210 = shl i32 %209, 1
  %211 = and i32 %31, %139
  %212 = or i32 %30, %69
  %213 = xor i32 %117, -1
  %214 = xor i32 %55, %213
  %215 = add i32 %53, 1
  %216 = and i32 %32, %17
  %217 = shl i32 %216, 1
  %218 = or i32 %56, %90
  %219 = or i32 %36, %0
  %220 = or i32 %30, %91
  %221 = and i32 %65, %35
  %222 = or i32 %17, %78
  %223 = or i32 %53, %91
  %224 = or i32 %11, %1
  %225 = and i32 %47, %8
  %226 = and i32 %11, %29
  %227 = xor i32 %102, %1
  %228 = or i32 %30, %104
  %229 = or i32 %78, %8
  %230 = xor i32 %9, %2
  %231 = or i32 %53, %2
  %232 = and i32 %16, %8
  %233 = or i32 %56, %10
  %234 = xor i32 %73, %0
  %235 = and i32 %91, %44
  %236 = or i32 %30, %12
  %237 = or i32 %176, %177
  %238 = and i32 %11, %1
  %239 = or i32 %46, %64
  %240 = shl i32 %239, 1
  %241 = xor i32 %10, %2
  %242 = or i32 %17, %104
  %243 = and i32 %11, %44
  %244 = or i32 %84, %155
  %245 = or i32 %71, %35
  %246 = xor i32 %53, %2
  %247 = and i32 %139, %2
  %248 = or i32 %91, %35
  %249 = and i32 %42, %0
  %250 = and i32 %12, %44
  %251 = or i32 %73, %35
  %252 = or i32 %101, %1
  %253 = xor i32 %30, %2
  %254 = or i32 %78, %1
  %255 = or i32 %11, %10
  %256 = shl i32 %255, 1
  %257 = and i32 %32, %1
  %258 = and i32 %56, %139
  %259 = and i32 %29, %31
  %260 = xor i32 %198, -1
  %261 = or i32 %176, %260
  %262 = or i32 %84, %213
  %263 = add i32 %2, 1
  %264 = or i32 %12, %49
  %265 = and i32 %56, %0
  %266 = or i32 %37, %265
  %267 = or i32 %17, %31
  %268 = or i32 %101, %73
  %269 = xor i32 %186, %207
  %270 = and i32 %17, %2
  %271 = and i32 %49, %2
  %272 = shl i32 %271, 1
  %273 = or i32 %65, %0
  %274 = and i32 %102, %8
  %275 = and i32 %69, %35
  %276 = mul i32 %275, -10
  %277 = and i32 %64, %35
  %278 = and i32 %69, %0
  %279 = and i32 %64, %0
  %280 = and i32 %73, %35
  %281 = mul i32 %280, -9
  %282 = mul i32 %37, -17
  %283 = and i32 %73, %0
  %284 = sub i32 %135, %259
  %285 = add i32 %284, %197
  %286 = sub i32 %285, %39
  %287 = sub i32 %286, %157
  %288 = add i32 %287, %28
  %289 = mul i32 %288, 3
  %290 = sub i32 %47, %84
  %291 = add i32 %290, %221
  %292 = sub i32 %291, %181
  %293 = add i32 %292, %26
  %294 = mul i32 %293, 5
  %295 = add i32 %151, %74
  %296 = shl i32 %295, 2
  %297 = add i32 %270, -1
  %298 = add i32 %297, %156
  %299 = add i32 %298, %11
  %300 = add i32 %299, %283
  %301 = add i32 %300, %277
  %302 = add i32 %301, %273
  %303 = add i32 %302, %249
  %304 = add i32 %303, %227
  %305 = add i32 %304, %224
  %306 = add i32 %305, %219
  %307 = add i32 %306, %198
  %308 = add i32 %307, %193
  %309 = add i32 %308, %192
  %310 = add i32 %309, %173
  %311 = add i32 %310, %136
  %312 = add i32 %311, %121
  %313 = add i32 %312, %116
  %314 = add i32 %313, %109
  %315 = add i32 %314, %262
  %316 = add i32 %315, %149
  %317 = add i32 %316, %27
  %318 = add i32 %317, %160
  %319 = shl i32 %318, 1
  %320 = add i32 %29, %1
  %321 = add i32 %320, %53
  %322 = sub i32 %90, %321
  %323 = add i32 %322, %10
  %324 = add i32 %323, %49
  %325 = add i32 %324, %215
  %326 = sub i32 %325, %17
  %327 = sub i32 %326, %30
  %328 = add i32 %327, %44
  %329 = add i32 %328, %263
  %330 = add i32 %329, %3
  %331 = sub i32 %330, %34
  %332 = add i32 %331, %45
  %333 = add i32 %332, %63
  %334 = add i32 %333, %75
  %335 = sub i32 %334, %80
  %336 = add i32 %335, %100
  %337 = sub i32 %336, %106
  %338 = add i32 %337, %110
  %339 = add i32 %338, %111
  %340 = add i32 %339, %16
  %341 = add i32 %340, %141
  %342 = sub i32 %341, %142
  %343 = add i32 %342, %101
  %344 = sub i32 %343, %164
  %345 = sub i32 %344, %172
  %346 = sub i32 %345, %64
  %347 = add i32 %346, %184
  %348 = add i32 %347, %71
  %349 = add i32 %348, %185
  %350 = add i32 %349, %188
  %351 = add i32 %350, %196
  %352 = add i32 %351, %211
  %353 = sub i32 %352, %46
  %354 = add i32 %353, %38
  %355 = sub i32 %354, %230
  %356 = sub i32 %355, %231
  %357 = add i32 %356, %241
  %358 = sub i32 %357, %246
  %359 = add i32 %358, %36
  %360 = add i32 %359, %247
  %361 = sub i32 %360, %253
  %362 = sub i32 %361, %267
  %363 = add i32 %362, %33
  %364 = add i32 %363, %43
  %365 = sub i32 %364, %48
  %366 = add i32 %365, %50
  %367 = sub i32 %366, %52
  %368 = sub i32 %367, %61
  %369 = sub i32 %368, %62
  %370 = add i32 %369, %66
  %371 = sub i32 %370, %67
  %372 = sub i32 %371, %68
  %373 = sub i32 %372, %70
  %374 = sub i32 %373, %72
  %375 = add i32 %374, %79
  %376 = add i32 %375, %81
  %377 = sub i32 %376, %82
  %378 = sub i32 %377, %88
  %379 = add i32 %378, %89
  %380 = add i32 %379, %98
  %381 = add i32 %380, %99
  %382 = sub i32 %381, %103
  %383 = sub i32 %382, %105
  %384 = sub i32 %383, %107
  %385 = add i32 %384, %108
  %386 = sub i32 %385, %112
  %387 = sub i32 %386, %113
  %388 = add i32 %387, %117
  %389 = add i32 %388, %118
  %390 = sub i32 %389, %119
  %391 = add i32 %390, %120
  %392 = add i32 %391, %122
  %393 = add i32 %392, %123
  %394 = sub i32 %393, %124
  %395 = sub i32 %394, %125
  %396 = sub i32 %395, %126
  %397 = sub i32 %396, %127
  %398 = add i32 %397, %128
  %399 = add i32 %398, %133
  %400 = sub i32 %399, %134
  %401 = sub i32 %400, %137
  %402 = add i32 %401, %138
  %403 = add i32 %402, %140
  %404 = add i32 %403, %143
  %405 = sub i32 %404, %144
  %406 = add i32 %405, %145
  %407 = sub i32 %406, %148
  %408 = sub i32 %407, %150
  %409 = add i32 %408, %155
  %410 = add i32 %409, %161
  %411 = add i32 %410, %167
  %412 = sub i32 %411, %168
  %413 = add i32 %412, %169
  %414 = add i32 %413, %174
  %415 = add i32 %414, %175
  %416 = sub i32 %415, %182
  %417 = add i32 %416, %183
  %418 = add i32 %417, %189
  %419 = add i32 %418, %190
  %420 = sub i32 %419, %191
  %421 = sub i32 %420, %194
  %422 = add i32 %421, %195
  %423 = sub i32 %422, %202
  %424 = add i32 %423, %203
  %425 = sub i32 %424, %204
  %426 = sub i32 %425, %205
  %427 = sub i32 %426, %206
  %428 = add i32 %427, %212
  %429 = sub i32 %428, %218
  %430 = add i32 %429, %220
  %431 = sub i32 %430, %222
  %432 = add i32 %431, %223
  %433 = sub i32 %432, %225
  %434 = sub i32 %433, %226
  %435 = add i32 %434, %228
  %436 = add i32 %435, %229
  %437 = add i32 %436, %232
  %438 = sub i32 %437, %233
  %439 = sub i32 %438, %234
  %440 = sub i32 %439, %235
  %441 = sub i32 %440, %236
  %442 = add i32 %441, %238
  %443 = add i32 %442, %242
  %444 = add i32 %443, %243
  %445 = add i32 %444, %245
  %446 = sub i32 %445, %248
  %447 = add i32 %446, %250
  %448 = add i32 %447, %251
  %449 = sub i32 %448, %252
  %450 = sub i32 %449, %254
  %451 = sub i32 %450, %257
  %452 = add i32 %451, %258
  %453 = sub i32 %452, %264
  %454 = add i32 %453, %268
  %455 = sub i32 %454, %272
  %456 = sub i32 %455, %274
  %457 = sub i32 %456, %278
  %458 = add i32 %457, %279
  %459 = sub i32 %458, %21
  %460 = add i32 %459, %23
  %461 = sub i32 %460, %24
  %462 = sub i32 %461, %25
  %463 = sub i32 %462, %22
  %464 = add i32 %463, %41
  %465 = add i32 %464, %59
  %466 = sub i32 %465, %77
  %467 = sub i32 %466, %83
  %468 = sub i32 %467, %93
  %469 = sub i32 %468, %95
  %470 = sub i32 %469, %97
  %471 = sub i32 %470, %115
  %472 = sub i32 %471, %130
  %473 = sub i32 %472, %132
  %474 = sub i32 %473, %147
  %475 = sub i32 %474, %154
  %476 = sub i32 %475, %163
  %477 = sub i32 %476, %166
  %478 = sub i32 %477, %171
  %479 = add i32 %478, %187
  %480 = sub i32 %479, %208
  %481 = sub i32 %480, %210
  %482 = add i32 %481, %214
  %483 = sub i32 %482, %217
  %484 = add i32 %483, %237
  %485 = sub i32 %484, %240
  %486 = add i32 %485, %244
  %487 = sub i32 %486, %256
  %488 = add i32 %487, %261
  %489 = sub i32 %488, %266
  %490 = add i32 %489, %269
  %491 = add i32 %490, %276
  %492 = add i32 %491, %281
  %493 = add i32 %492, %282
  %494 = sub i32 %493, %87
  %495 = add i32 %494, %296
  %496 = sub i32 %495, %180
  %497 = sub i32 %496, %201
  %498 = add i32 %497, %294
  %499 = add i32 %498, %289
  %500 = add i32 %499, %319
  %501 = icmp eq i32 %20, %500
  %502 = select i1 %501, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %503 = tail call i32 @puts(i8* nonnull dereferenceable(1) %502)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
