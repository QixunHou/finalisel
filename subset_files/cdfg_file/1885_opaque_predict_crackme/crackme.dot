digraph "DFG for'crackme' function" {
	Node0x2263580[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x2263c30[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x2263cf0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x2263d60[shape=record, label="  %6 = mul i32 %5, 3"];
	Node0x2263e00[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x2263e70[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x2263ee0[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x2263f50[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0x2263ff0[shape=record, label="  %11 = mul i32 %10, -5"];
	Node0x2264060[shape=record, label="  %12 = xor i32 %3, -1"];
	Node0x2264100[shape=record, label="  %13 = mul i32 %12, 6"];
	Node0x22641a0[shape=record, label="  %14 = xor i32 %0, 2147483647"];
	Node0x2264210[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x2264280[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x22642f0[shape=record, label="  %17 = and i32 %7, %0"];
	Node0x2264360[shape=record, label="  %18 = and i32 %1, %0"];
	Node0x2264400[shape=record, label="  %19 = mul i32 %18, 7"];
	Node0x2264470[shape=record, label="  %20 = sub i32 %9, %8"];
	Node0x22644e0[shape=record, label="  %21 = add i32 %20, %17"];
	Node0x2264550[shape=record, label="  %22 = add i32 %21, %6"];
	Node0x22645c0[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x2264630[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x22646a0[shape=record, label="  %25 = sub i32 %24, %16"];
	Node0x2264710[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x2264780[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x2204268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2264c20[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x2264c70[shape=record, label="  ret void"];
	Node0x2263580 -> Node0x2263c30;
	Node0x2263c30 -> Node0x2263cf0;
	Node0x2263cf0 -> Node0x2263d60;
	Node0x2263d60 -> Node0x2263e00;
	Node0x2263e00 -> Node0x2263e70;
	Node0x2263e70 -> Node0x2263ee0;
	Node0x2263ee0 -> Node0x2263f50;
	Node0x2263f50 -> Node0x2263ff0;
	Node0x2263ff0 -> Node0x2264060;
	Node0x2264060 -> Node0x2264100;
	Node0x2264100 -> Node0x22641a0;
	Node0x22641a0 -> Node0x2264210;
	Node0x2264210 -> Node0x2264280;
	Node0x2264280 -> Node0x22642f0;
	Node0x22642f0 -> Node0x2264360;
	Node0x2264360 -> Node0x2264400;
	Node0x2264400 -> Node0x2264470;
	Node0x2264470 -> Node0x22644e0;
	Node0x22644e0 -> Node0x2264550;
	Node0x2264550 -> Node0x22645c0;
	Node0x22645c0 -> Node0x2264630;
	Node0x2264630 -> Node0x22646a0;
	Node0x22646a0 -> Node0x2264710;
	Node0x2264710 -> Node0x2264780;
	Node0x2264780 -> Node0x2204268;
	Node0x2204268 -> Node0x2264c20;
	Node0x2264c20 -> Node0x2264c70;
edge [color=red]
	Node0x2263580 -> Node0x2263c30;
	Node0x2263cf0 -> Node0x2263d60;
	Node0x2263e00 -> Node0x2263e70;
	Node0x2263cf0 -> Node0x2263f50;
	Node0x2263f50 -> Node0x2263ff0;
	Node0x2263580 -> Node0x2264060;
	Node0x2264060 -> Node0x2264100;
	Node0x22641a0 -> Node0x2264210;
	Node0x2264210 -> Node0x2264280;
	Node0x2263e00 -> Node0x22642f0;
	Node0x2264360 -> Node0x2264400;
	Node0x2263ee0 -> Node0x2264470;
	Node0x2263e70 -> Node0x2264470;
	Node0x2264470 -> Node0x22644e0;
	Node0x22642f0 -> Node0x22644e0;
	Node0x22644e0 -> Node0x2264550;
	Node0x2263d60 -> Node0x2264550;
	Node0x2264550 -> Node0x22645c0;
	Node0x2263ff0 -> Node0x22645c0;
	Node0x22645c0 -> Node0x2264630;
	Node0x2264100 -> Node0x2264630;
	Node0x2264630 -> Node0x22646a0;
	Node0x2264280 -> Node0x22646a0;
	Node0x22646a0 -> Node0x2264710;
	Node0x2264400 -> Node0x2264710;
	Node0x2263c30 -> Node0x2264780;
	Node0x2264710 -> Node0x2264780;
	Node0x2264780 -> Node0x2204268;
	Node0x2204268 -> Node0x2264c20;
}
