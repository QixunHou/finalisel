; ModuleID = '../.././c_source_file/0933_path_condition_crackme.c'
source_filename = "../.././c_source_file/0933_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = xor i32 %2, %0
  %9 = and i32 %8, %7
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %12, %0
  %14 = xor i32 %4, -1
  %15 = and i32 %5, %4
  %16 = or i32 %15, %3
  %17 = sub i32 1, %9
  %18 = add i32 %17, %13
  %19 = add i32 %18, %16
  %20 = xor i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %10, %21
  %23 = or i32 %20, %10
  %24 = and i32 %7, %0
  %25 = and i32 %8, %21
  %26 = and i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %0
  %29 = or i32 %7, %0
  %30 = xor i32 %29, -1
  %31 = shl i32 %30, 2
  %32 = xor i32 %11, %0
  %33 = or i32 %2, %0
  %34 = and i32 %33, %20
  %35 = and i32 %10, %0
  %36 = xor i32 %35, -1
  %37 = add i32 %35, 1
  %38 = xor i32 %8, -1
  %39 = and i32 %38, %1
  %40 = or i32 %8, %21
  %41 = xor i32 %0, -1
  %42 = and i32 %26, %41
  %43 = or i32 %2, %1
  %44 = and i32 %43, %0
  %45 = xor i32 %44, -1
  %46 = xor i32 %42, %45
  %47 = and i32 %1, %0
  %48 = xor i32 %33, -1
  %49 = or i32 %47, %48
  %50 = or i32 %10, %1
  %51 = xor i32 %50, -1
  %52 = or i32 %51, %41
  %53 = or i32 %1, %0
  %54 = xor i32 %53, %2
  %55 = or i32 %51, %0
  %56 = xor i32 %43, %0
  %57 = xor i32 %24, -1
  %58 = xor i32 %2, %1
  %59 = and i32 %58, %57
  %60 = or i32 %35, %26
  %61 = and i32 %2, %0
  %62 = or i32 %61, %20
  %63 = or i32 %42, %44
  %64 = shl i32 %63, 2
  %65 = and i32 %26, %0
  %66 = xor i32 %58, %0
  %67 = xor i32 %66, -1
  %68 = or i32 %65, %67
  %69 = or i32 %58, %47
  %70 = and i32 %53, %2
  %71 = xor i32 %47, -1
  %72 = and i32 %71, %2
  %73 = and i32 %58, %29
  %74 = xor i32 %58, -1
  %75 = or i32 %47, %74
  %76 = shl i32 %66, 2
  %77 = and i32 %20, %36
  %78 = xor i32 %50, %0
  %79 = and i32 %74, %71
  %80 = shl i32 %38, 1
  %81 = xor i32 %74, %0
  %82 = and i32 %58, %0
  %83 = xor i32 %65, %66
  %84 = or i32 %74, %30
  %85 = xor i32 %61, %12
  %86 = xor i32 %24, %27
  %87 = and i32 %43, %41
  %88 = or i32 %65, %87
  %89 = add i32 %1, 1
  %90 = or i32 %58, %41
  %91 = or i32 %24, %74
  %92 = or i32 %38, %7
  %93 = or i32 %65, %56
  %94 = shl i32 %93, 1
  %95 = and i32 %20, %10
  %96 = or i32 %10, %0
  %97 = xor i32 %96, -1
  %98 = xor i32 %97, %1
  %99 = xor i32 %43, -1
  %100 = or i32 %99, %41
  %101 = or i32 %43, %41
  %102 = or i32 %48, %21
  %103 = or i32 %27, %41
  %104 = and i32 %96, %21
  %105 = xor i32 %99, %0
  %106 = or i32 %10, %30
  %107 = xor i32 %53, -1
  %108 = or i32 %74, %107
  %109 = shl i32 %108, 1
  %110 = xor i32 %61, -1
  %111 = xor i32 %110, %1
  %112 = shl i32 %111, 1
  %113 = or i32 %74, %0
  %114 = or i32 %58, %24
  %115 = xor i32 %33, %1
  %116 = and i32 %38, %57
  %117 = or i32 %24, %10
  %118 = or i32 %20, %38
  %119 = or i32 %43, %0
  %120 = add i32 %96, 1
  %121 = and i32 %7, %2
  %122 = and i32 %121, %0
  %123 = or i32 %7, %2
  %124 = xor i32 %123, %0
  %125 = xor i32 %124, -1
  %126 = xor i32 %122, %125
  %127 = and i32 %50, %41
  %128 = and i32 %29, %2
  %129 = xor i32 %61, %43
  %130 = shl i32 %129, 1
  %131 = or i32 %35, %1
  %132 = and i32 %58, %53
  %133 = xor i32 %71, %2
  %134 = shl i32 %133, 1
  %135 = xor i32 %61, %1
  %136 = and i32 %121, %41
  %137 = and i32 %123, %0
  %138 = or i32 %136, %137
  %139 = shl i32 %138, 1
  %140 = or i32 %50, %0
  %141 = shl i32 %140, 1
  %142 = xor i32 %35, %1
  %143 = and i32 %10, %57
  %144 = and i32 %58, %41
  %145 = or i32 %47, %38
  %146 = shl i32 %145, 1
  %147 = and i32 %8, %57
  %148 = and i32 %8, %53
  %149 = or i32 %47, %97
  %150 = shl i32 %149, 1
  %151 = or i32 %97, %7
  %152 = xor i32 %90, -1
  %153 = or i32 %136, %152
  %154 = and i32 %8, %20
  %155 = xor i32 %24, %12
  %156 = xor i32 %57, %2
  %157 = shl i32 %156, 1
  %158 = shl i32 %10, 1
  %159 = xor i32 %33, %47
  %160 = and i32 %110, %7
  %161 = or i32 %38, %30
  %162 = or i32 %61, %21
  %163 = or i32 %35, %51
  %164 = or i32 %65, %144
  %165 = or i32 %11, %24
  %166 = shl i32 %165, 1
  %167 = xor i32 %122, %67
  %168 = shl i32 %167, 1
  %169 = or i32 %97, %1
  %170 = xor i32 %35, %27
  %171 = xor i32 %96, %47
  %172 = shl i32 %171, 1
  %173 = xor i32 %61, %29
  %174 = xor i32 %107, %2
  %175 = or i32 %24, %2
  %176 = or i32 %10, %107
  %177 = or i32 %8, %7
  %178 = xor i32 %96, %1
  %179 = and i32 %33, %7
  %180 = and i32 %50, %0
  %181 = xor i32 %51, %0
  %182 = or i32 %27, %0
  %183 = or i32 %61, %1
  %184 = or i32 %8, %107
  %185 = xor i32 %137, -1
  %186 = xor i32 %136, %185
  %187 = xor i32 %43, %47
  %188 = and i32 %12, %0
  %189 = or i32 %99, %0
  %190 = or i32 %20, %97
  %191 = xor i32 %65, -1
  %192 = xor i32 %144, %191
  %193 = xor i32 %136, %90
  %194 = or i32 %122, %124
  %195 = or i32 %38, %1
  %196 = or i32 %35, %21
  %197 = and i32 %36, %1
  %198 = or i32 %10, %21
  %199 = and i32 %110, %21
  %200 = xor i32 %87, %191
  %201 = or i32 %58, %107
  %202 = xor i32 %56, 1073741823
  %203 = xor i32 %202, %65
  %204 = xor i32 %48, %1
  %205 = and i32 %74, %57
  %206 = or i32 %8, %1
  %207 = or i32 %122, %66
  %208 = or i32 %61, %11
  %209 = and i32 %27, %41
  %210 = or i32 %20, %48
  %211 = or i32 %61, %7
  %212 = and i32 %21, %2
  %213 = and i32 %53, %10
  %214 = add i32 %50, 1
  %215 = xor i32 %47, %2
  %216 = or i32 %61, %30
  %217 = or i32 %42, %82
  %218 = or i32 %11, %0
  %219 = shl i32 %218, 1
  %220 = and i32 %20, %38
  %221 = and i32 %20, %110
  %222 = and i32 %74, %41
  %223 = xor i32 %29, %2
  %224 = and i32 %33, %21
  %225 = and i32 %33, %1
  %226 = xor i32 %50, %47
  %227 = add i32 %26, 1
  %228 = or i32 %35, %20
  %229 = xor i32 %61, %53
  %230 = or i32 %8, %20
  %231 = and i32 %123, %41
  %232 = or i32 %122, %231
  %233 = or i32 %26, %41
  %234 = xor i32 %26, %0
  %235 = or i32 %38, %107
  %236 = or i32 %97, %21
  %237 = and i32 %36, %7
  %238 = and i32 %96, %1
  %239 = or i32 %47, %51
  %240 = and i32 %38, %7
  %241 = shl i32 %44, 1
  %242 = or i32 %58, %0
  %243 = xor i32 %122, %242
  %244 = and i32 %12, %41
  %245 = or i32 %48, %7
  %246 = and i32 %8, %71
  %247 = or i32 %26, %24
  %248 = and i32 %99, %41
  %249 = mul i32 %248, 12
  %250 = and i32 %11, %41
  %251 = shl i32 %250, 3
  %252 = and i32 %11, %0
  %253 = mul i32 %252, -11
  %254 = and i32 %51, %41
  %255 = and i32 %51, %0
  %256 = mul i32 %255, 19
  %257 = xor i32 %3, -1
  %258 = or i32 %5, %4
  %259 = xor i32 %258, -1
  %260 = or i32 %259, %257
  %261 = xor i32 %5, -1
  %262 = and i32 %261, %4
  %263 = and i32 %5, %3
  %264 = xor i32 %263, -1
  %265 = xor i32 %262, %264
  %266 = or i32 %14, %3
  %267 = xor i32 %5, %4
  %268 = and i32 %267, %266
  %269 = xor i32 %259, %3
  %270 = shl i32 %269, 1
  %271 = or i32 %261, %4
  %272 = xor i32 %271, -1
  %273 = and i32 %257, %5
  %274 = and i32 %273, %4
  %275 = xor i32 %5, %3
  %276 = xor i32 %275, %4
  %277 = or i32 %274, %276
  %278 = or i32 %267, %3
  %279 = xor i32 %15, -1
  %280 = and i32 %279, %257
  %281 = and i32 %273, %14
  %282 = or i32 %275, %14
  %283 = xor i32 %282, -1
  %284 = or i32 %281, %283
  %285 = xor i32 %257, %4
  %286 = or i32 %285, %259
  %287 = and i32 %4, %3
  %288 = or i32 %5, %3
  %289 = xor i32 %288, -1
  %290 = or i32 %287, %289
  %291 = or i32 %257, %4
  %292 = and i32 %275, %291
  %293 = or i32 %287, %272
  %294 = and i32 %263, %4
  %295 = xor i32 %294, %276
  %296 = and i32 %271, %285
  %297 = or i32 %15, %285
  %298 = and i32 %289, %14
  %299 = and i32 %261, %3
  %300 = and i32 %299, %14
  %301 = and i32 %289, %4
  %302 = and i32 %299, %4
  %303 = mul i32 %281, -9
  %304 = shl i32 %274, 2
  %305 = add i32 %48, %107
  %306 = add i32 %305, %72
  %307 = add i32 %306, %23
  %308 = add i32 %307, %236
  %309 = add i32 %308, %229
  %310 = add i32 %309, %211
  %311 = add i32 %310, %208
  %312 = add i32 %311, %189
  %313 = add i32 %312, %169
  %314 = add i32 %313, %131
  %315 = add i32 %314, %103
  %316 = add i32 %315, %98
  %317 = add i32 %316, %60
  %318 = add i32 %317, %40
  %319 = add i32 %318, %88
  %320 = add i32 %319, %292
  %321 = shl i32 %320, 1
  %322 = add i32 %254, %95
  %323 = add i32 %322, %237
  %324 = sub i32 %205, %323
  %325 = add i32 %324, %59
  %326 = add i32 %325, %56
  %327 = sub i32 %326, %302
  %328 = sub i32 %327, %294
  %329 = sub i32 %328, %300
  %330 = mul i32 %329, 3
  %331 = sub i32 %223, %70
  %332 = sub i32 %331, %42
  %333 = sub i32 %332, %91
  %334 = sub i32 %333, %49
  %335 = sub i32 %334, %301
  %336 = mul i32 %335, 5
  %337 = add i32 %32, %65
  %338 = add i32 %337, %203
  %339 = shl i32 %338, 2
  %340 = add i32 %89, %0
  %341 = add i32 %340, %1
  %342 = sub i32 %341, %24
  %343 = add i32 %342, %29
  %344 = add i32 %343, %53
  %345 = add i32 %344, %21
  %346 = sub i32 %345, %20
  %347 = add i32 %346, %2
  %348 = add i32 %347, %22
  %349 = sub i32 %348, %31
  %350 = add i32 %349, %37
  %351 = add i32 %350, %54
  %352 = add i32 %351, %33
  %353 = add i32 %352, %58
  %354 = add i32 %353, %26
  %355 = add i32 %354, %106
  %356 = sub i32 %355, %117
  %357 = add i32 %356, %120
  %358 = add i32 %357, %128
  %359 = add i32 %358, %35
  %360 = add i32 %359, %61
  %361 = sub i32 %360, %143
  %362 = add i32 %361, %96
  %363 = sub i32 %362, %158
  %364 = sub i32 %363, %174
  %365 = sub i32 %364, %175
  %366 = add i32 %365, %50
  %367 = sub i32 %366, %176
  %368 = sub i32 %367, %198
  %369 = add i32 %368, %212
  %370 = sub i32 %369, %213
  %371 = add i32 %370, %214
  %372 = add i32 %371, %215
  %373 = add i32 %372, %227
  %374 = sub i32 %373, %25
  %375 = add i32 %374, %28
  %376 = sub i32 %375, %34
  %377 = add i32 %376, %39
  %378 = sub i32 %377, %52
  %379 = sub i32 %378, %55
  %380 = sub i32 %379, %62
  %381 = sub i32 %380, %69
  %382 = add i32 %381, %73
  %383 = sub i32 %382, %75
  %384 = add i32 %383, %77
  %385 = add i32 %384, %78
  %386 = add i32 %385, %79
  %387 = sub i32 %386, %80
  %388 = add i32 %387, %81
  %389 = add i32 %388, %82
  %390 = add i32 %389, %84
  %391 = sub i32 %390, %85
  %392 = sub i32 %391, %86
  %393 = sub i32 %392, %90
  %394 = add i32 %393, %92
  %395 = add i32 %394, %100
  %396 = sub i32 %395, %101
  %397 = add i32 %396, %102
  %398 = sub i32 %397, %104
  %399 = add i32 %398, %105
  %400 = add i32 %399, %113
  %401 = add i32 %400, %114
  %402 = add i32 %401, %115
  %403 = add i32 %402, %116
  %404 = sub i32 %403, %118
  %405 = add i32 %404, %119
  %406 = add i32 %405, %127
  %407 = sub i32 %406, %132
  %408 = sub i32 %407, %134
  %409 = sub i32 %408, %135
  %410 = sub i32 %409, %142
  %411 = sub i32 %410, %144
  %412 = sub i32 %411, %147
  %413 = sub i32 %412, %148
  %414 = sub i32 %413, %151
  %415 = add i32 %414, %154
  %416 = add i32 %415, %155
  %417 = sub i32 %416, %157
  %418 = add i32 %417, %159
  %419 = sub i32 %418, %160
  %420 = sub i32 %419, %161
  %421 = sub i32 %420, %162
  %422 = add i32 %421, %163
  %423 = sub i32 %422, %170
  %424 = sub i32 %423, %173
  %425 = add i32 %424, %177
  %426 = sub i32 %425, %178
  %427 = add i32 %426, %179
  %428 = sub i32 %427, %180
  %429 = add i32 %428, %181
  %430 = add i32 %429, %182
  %431 = add i32 %430, %183
  %432 = add i32 %431, %184
  %433 = sub i32 %432, %187
  %434 = sub i32 %433, %188
  %435 = sub i32 %434, %190
  %436 = add i32 %435, %195
  %437 = sub i32 %436, %196
  %438 = add i32 %437, %197
  %439 = add i32 %438, %199
  %440 = sub i32 %439, %201
  %441 = add i32 %440, %204
  %442 = sub i32 %441, %206
  %443 = sub i32 %442, %209
  %444 = add i32 %443, %210
  %445 = sub i32 %444, %216
  %446 = sub i32 %445, %220
  %447 = add i32 %446, %221
  %448 = sub i32 %447, %222
  %449 = sub i32 %448, %224
  %450 = add i32 %449, %225
  %451 = add i32 %450, %226
  %452 = add i32 %451, %228
  %453 = add i32 %452, %230
  %454 = add i32 %453, %233
  %455 = sub i32 %454, %234
  %456 = add i32 %455, %235
  %457 = sub i32 %456, %238
  %458 = add i32 %457, %239
  %459 = sub i32 %458, %240
  %460 = add i32 %459, %244
  %461 = sub i32 %460, %245
  %462 = sub i32 %461, %246
  %463 = add i32 %462, %247
  %464 = sub i32 %463, %46
  %465 = sub i32 %464, %68
  %466 = sub i32 %465, %76
  %467 = add i32 %466, %83
  %468 = sub i32 %467, %109
  %469 = sub i32 %468, %112
  %470 = add i32 %469, %126
  %471 = sub i32 %470, %130
  %472 = sub i32 %471, %141
  %473 = sub i32 %472, %146
  %474 = sub i32 %473, %150
  %475 = add i32 %474, %153
  %476 = add i32 %475, %164
  %477 = sub i32 %476, %166
  %478 = sub i32 %477, %172
  %479 = add i32 %478, %186
  %480 = sub i32 %479, %192
  %481 = sub i32 %480, %193
  %482 = sub i32 %481, %194
  %483 = sub i32 %482, %200
  %484 = sub i32 %483, %207
  %485 = add i32 %484, %217
  %486 = sub i32 %485, %219
  %487 = sub i32 %486, %232
  %488 = sub i32 %487, %241
  %489 = add i32 %488, %243
  %490 = add i32 %489, %249
  %491 = add i32 %490, %251
  %492 = add i32 %491, %253
  %493 = add i32 %492, %256
  %494 = sub i32 %493, %64
  %495 = sub i32 %494, %94
  %496 = sub i32 %495, %139
  %497 = sub i32 %496, %168
  %498 = add i32 %497, %272
  %499 = add i32 %498, %258
  %500 = sub i32 %499, %260
  %501 = sub i32 %500, %265
  %502 = sub i32 %501, %268
  %503 = add i32 %502, %278
  %504 = add i32 %503, %280
  %505 = add i32 %504, %286
  %506 = add i32 %505, %282
  %507 = sub i32 %506, %290
  %508 = sub i32 %507, %293
  %509 = add i32 %508, %296
  %510 = add i32 %509, %297
  %511 = sub i32 %510, %298
  %512 = sub i32 %511, %270
  %513 = add i32 %512, %277
  %514 = add i32 %513, %284
  %515 = add i32 %514, %295
  %516 = add i32 %515, %303
  %517 = sub i32 %516, %304
  %518 = add i32 %517, %339
  %519 = add i32 %518, %336
  %520 = add i32 %519, %330
  %521 = add i32 %520, %321
  %522 = icmp eq i32 %19, %521
  %523 = select i1 %522, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %524 = tail call i32 @puts(i8* nonnull dereferenceable(1) %523)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
