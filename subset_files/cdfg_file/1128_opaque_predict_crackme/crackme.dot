digraph "DFG for'crackme' function" {
	Node0x2049a60[shape=record, label="  %3 = mul i32 %0, -2"];
	Node0x2049ad0[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x2049b90[shape=record, label="  %5 = sub i32 %3, %4"];
	Node0x2049c00[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x2049c70[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x2049ce0[shape=record, label="  %8 = or i32 %7, %0"];
	Node0x2049d50[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x2049dc0[shape=record, label="  %10 = and i32 %7, %0"];
	Node0x2049e60[shape=record, label="  %11 = shl i32 %10, 2"];
	Node0x2049f00[shape=record, label="  %12 = mul i32 %6, -5"];
	Node0x2049fa0[shape=record, label="  %13 = add i32 %0, 1"];
	Node0x204a010[shape=record, label="  %14 = sub i32 %13, %4"];
	Node0x204a080[shape=record, label="  %15 = add i32 %14, %6"];
	Node0x204a0f0[shape=record, label="  %16 = add i32 %15, %8"];
	Node0x204a160[shape=record, label="  %17 = add i32 %16, %9"];
	Node0x204a1d0[shape=record, label="  %18 = sub i32 %17, %11"];
	Node0x204a240[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x204a2b0[shape=record, label="  %20 = icmp eq i32 %5, %19"];
	Node0x1fea268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x204a750[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x204a7a0[shape=record, label="  ret void"];
	Node0x2049a60 -> Node0x2049ad0;
	Node0x2049ad0 -> Node0x2049b90;
	Node0x2049b90 -> Node0x2049c00;
	Node0x2049c00 -> Node0x2049c70;
	Node0x2049c70 -> Node0x2049ce0;
	Node0x2049ce0 -> Node0x2049d50;
	Node0x2049d50 -> Node0x2049dc0;
	Node0x2049dc0 -> Node0x2049e60;
	Node0x2049e60 -> Node0x2049f00;
	Node0x2049f00 -> Node0x2049fa0;
	Node0x2049fa0 -> Node0x204a010;
	Node0x204a010 -> Node0x204a080;
	Node0x204a080 -> Node0x204a0f0;
	Node0x204a0f0 -> Node0x204a160;
	Node0x204a160 -> Node0x204a1d0;
	Node0x204a1d0 -> Node0x204a240;
	Node0x204a240 -> Node0x204a2b0;
	Node0x204a2b0 -> Node0x1fea268;
	Node0x1fea268 -> Node0x204a750;
	Node0x204a750 -> Node0x204a7a0;
edge [color=red]
	Node0x2049a60 -> Node0x2049b90;
	Node0x2049ad0 -> Node0x2049b90;
	Node0x2049c70 -> Node0x2049ce0;
	Node0x2049c70 -> Node0x2049dc0;
	Node0x2049dc0 -> Node0x2049e60;
	Node0x2049c00 -> Node0x2049f00;
	Node0x2049fa0 -> Node0x204a010;
	Node0x2049ad0 -> Node0x204a010;
	Node0x204a010 -> Node0x204a080;
	Node0x2049c00 -> Node0x204a080;
	Node0x204a080 -> Node0x204a0f0;
	Node0x2049ce0 -> Node0x204a0f0;
	Node0x204a0f0 -> Node0x204a160;
	Node0x2049d50 -> Node0x204a160;
	Node0x204a160 -> Node0x204a1d0;
	Node0x2049e60 -> Node0x204a1d0;
	Node0x204a1d0 -> Node0x204a240;
	Node0x2049f00 -> Node0x204a240;
	Node0x2049b90 -> Node0x204a2b0;
	Node0x204a240 -> Node0x204a2b0;
	Node0x204a2b0 -> Node0x1fea268;
	Node0x1fea268 -> Node0x204a750;
}
