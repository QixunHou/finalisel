digraph "DFG for'crackme' function" {
	Node0x1a11ae0[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1a12160[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x1a121d0[shape=record, label="  %7 = and i32 %6, %3"];
	Node0x1a12270[shape=record, label="  %8 = shl i32 %6, 1"];
	Node0x1a122e0[shape=record, label="  %9 = or i32 %8, 1"];
	Node0x1a12350[shape=record, label="  %10 = add i32 %9, %2"];
	Node0x1a123c0[shape=record, label="  %11 = sub i32 %10, %5"];
	Node0x1a12430[shape=record, label="  %12 = add i32 %11, %7"];
	Node0x1a124a0[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x1a12510[shape=record, label="  %14 = or i32 %13, %1"];
	Node0x1a12580[shape=record, label="  %15 = and i32 %13, %1"];
	Node0x1a12620[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x1a12690[shape=record, label="  %17 = and i32 %2, %1"];
	Node0x1a12700[shape=record, label="  %18 = or i32 %6, %3"];
	Node0x1a12770[shape=record, label="  %19 = and i32 %3, %0"];
	Node0x1a127e0[shape=record, label="  %20 = shl i32 %0, 1"];
	Node0x1a12850[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x1a128c0[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x1a12960[shape=record, label="  %23 = mul i32 %22, 6"];
	Node0x1a129d0[shape=record, label="  %24 = xor i32 %18, -1"];
	Node0x1a12a70[shape=record, label="  %25 = mul i32 %7, 7"];
	Node0x1a12ae0[shape=record, label="  %26 = add i32 %14, %24"];
	Node0x1a12b50[shape=record, label="  %27 = add i32 %26, %19"];
	Node0x1a12bf0[shape=record, label="  %28 = mul i32 %27, 5"];
	Node0x1a12c60[shape=record, label="  %29 = sub i32 %5, %14"];
	Node0x1a12d00[shape=record, label="  %30 = mul i32 %29, 3"];
	Node0x1a12d70[shape=record, label="  %31 = sub i32 7, %1"];
	Node0x1a12de0[shape=record, label="  %32 = sub i32 %31, %20"];
	Node0x1a13060[shape=record, label="  %33 = add i32 %32, %13"];
	Node0x1a130d0[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x1a13140[shape=record, label="  %35 = sub i32 %34, %17"];
	Node0x1a131b0[shape=record, label="  %36 = sub i32 %35, %16"];
	Node0x1a13220[shape=record, label="  %37 = sub i32 %36, %18"];
	Node0x1a13290[shape=record, label="  %38 = add i32 %37, %19"];
	Node0x1a13300[shape=record, label="  %39 = add i32 %38, %23"];
	Node0x1a13370[shape=record, label="  %40 = add i32 %39, %25"];
	Node0x1a133e0[shape=record, label="  %41 = add i32 %40, %30"];
	Node0x1a13450[shape=record, label="  %42 = add i32 %41, %28"];
	Node0x1a134c0[shape=record, label="  %43 = icmp eq i32 %12, %42"];
	Node0x19b2268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a13960[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x1a139b0[shape=record, label="  ret void"];
	Node0x1a11ae0 -> Node0x1a12160;
	Node0x1a12160 -> Node0x1a121d0;
	Node0x1a121d0 -> Node0x1a12270;
	Node0x1a12270 -> Node0x1a122e0;
	Node0x1a122e0 -> Node0x1a12350;
	Node0x1a12350 -> Node0x1a123c0;
	Node0x1a123c0 -> Node0x1a12430;
	Node0x1a12430 -> Node0x1a124a0;
	Node0x1a124a0 -> Node0x1a12510;
	Node0x1a12510 -> Node0x1a12580;
	Node0x1a12580 -> Node0x1a12620;
	Node0x1a12620 -> Node0x1a12690;
	Node0x1a12690 -> Node0x1a12700;
	Node0x1a12700 -> Node0x1a12770;
	Node0x1a12770 -> Node0x1a127e0;
	Node0x1a127e0 -> Node0x1a12850;
	Node0x1a12850 -> Node0x1a128c0;
	Node0x1a128c0 -> Node0x1a12960;
	Node0x1a12960 -> Node0x1a129d0;
	Node0x1a129d0 -> Node0x1a12a70;
	Node0x1a12a70 -> Node0x1a12ae0;
	Node0x1a12ae0 -> Node0x1a12b50;
	Node0x1a12b50 -> Node0x1a12bf0;
	Node0x1a12bf0 -> Node0x1a12c60;
	Node0x1a12c60 -> Node0x1a12d00;
	Node0x1a12d00 -> Node0x1a12d70;
	Node0x1a12d70 -> Node0x1a12de0;
	Node0x1a12de0 -> Node0x1a13060;
	Node0x1a13060 -> Node0x1a130d0;
	Node0x1a130d0 -> Node0x1a13140;
	Node0x1a13140 -> Node0x1a131b0;
	Node0x1a131b0 -> Node0x1a13220;
	Node0x1a13220 -> Node0x1a13290;
	Node0x1a13290 -> Node0x1a13300;
	Node0x1a13300 -> Node0x1a13370;
	Node0x1a13370 -> Node0x1a133e0;
	Node0x1a133e0 -> Node0x1a13450;
	Node0x1a13450 -> Node0x1a134c0;
	Node0x1a134c0 -> Node0x19b2268;
	Node0x19b2268 -> Node0x1a13960;
	Node0x1a13960 -> Node0x1a139b0;
edge [color=red]
	Node0x1a12160 -> Node0x1a121d0;
	Node0x1a12160 -> Node0x1a12270;
	Node0x1a12270 -> Node0x1a122e0;
	Node0x1a122e0 -> Node0x1a12350;
	Node0x1a12350 -> Node0x1a123c0;
	Node0x1a11ae0 -> Node0x1a123c0;
	Node0x1a123c0 -> Node0x1a12430;
	Node0x1a121d0 -> Node0x1a12430;
	Node0x1a124a0 -> Node0x1a12510;
	Node0x1a124a0 -> Node0x1a12580;
	Node0x1a12580 -> Node0x1a12620;
	Node0x1a12160 -> Node0x1a12700;
	Node0x1a12850 -> Node0x1a128c0;
	Node0x1a128c0 -> Node0x1a12960;
	Node0x1a12700 -> Node0x1a129d0;
	Node0x1a121d0 -> Node0x1a12a70;
	Node0x1a12510 -> Node0x1a12ae0;
	Node0x1a129d0 -> Node0x1a12ae0;
	Node0x1a12ae0 -> Node0x1a12b50;
	Node0x1a12770 -> Node0x1a12b50;
	Node0x1a12b50 -> Node0x1a12bf0;
	Node0x1a11ae0 -> Node0x1a12c60;
	Node0x1a12510 -> Node0x1a12c60;
	Node0x1a12c60 -> Node0x1a12d00;
	Node0x1a12d70 -> Node0x1a12de0;
	Node0x1a127e0 -> Node0x1a12de0;
	Node0x1a12de0 -> Node0x1a13060;
	Node0x1a124a0 -> Node0x1a13060;
	Node0x1a13060 -> Node0x1a130d0;
	Node0x1a12580 -> Node0x1a130d0;
	Node0x1a130d0 -> Node0x1a13140;
	Node0x1a12690 -> Node0x1a13140;
	Node0x1a13140 -> Node0x1a131b0;
	Node0x1a12620 -> Node0x1a131b0;
	Node0x1a131b0 -> Node0x1a13220;
	Node0x1a12700 -> Node0x1a13220;
	Node0x1a13220 -> Node0x1a13290;
	Node0x1a12770 -> Node0x1a13290;
	Node0x1a13290 -> Node0x1a13300;
	Node0x1a12960 -> Node0x1a13300;
	Node0x1a13300 -> Node0x1a13370;
	Node0x1a12a70 -> Node0x1a13370;
	Node0x1a13370 -> Node0x1a133e0;
	Node0x1a12d00 -> Node0x1a133e0;
	Node0x1a133e0 -> Node0x1a13450;
	Node0x1a12bf0 -> Node0x1a13450;
	Node0x1a12430 -> Node0x1a134c0;
	Node0x1a13450 -> Node0x1a134c0;
	Node0x1a134c0 -> Node0x19b2268;
	Node0x19b2268 -> Node0x1a13960;
}
