digraph "DFG for'crackme' function" {
	Node0xf99bb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xf99c20[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xf99ce0[shape=record, label="  %5 = sub i32 %4, %1"];
	Node0xf99d50[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0xf99dc0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xf99e30[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xf99ea0[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0xf99f10[shape=record, label="  %10 = or i32 %1, %0"];
	Node0xf99f80[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xf99ff0[shape=record, label="  %12 = shl i32 %4, 1"];
	Node0xf9a090[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xf9a100[shape=record, label="  %14 = and i32 %3, %0"];
	Node0xf9a170[shape=record, label="  %15 = shl i32 %8, 1"];
	Node0xf9a1e0[shape=record, label="  %16 = add i32 %11, %0"];
	Node0xf9a280[shape=record, label="  %17 = mul i32 %16, 3"];
	Node0xf9a320[shape=record, label="  %18 = add i32 %0, 4"];
	Node0xf9a390[shape=record, label="  %19 = add i32 %18, %1"];
	Node0xf9a400[shape=record, label="  %20 = add i32 %19, %7"];
	Node0xf9a470[shape=record, label="  %21 = add i32 %20, %9"];
	Node0xf9a4e0[shape=record, label="  %22 = sub i32 %21, %6"];
	Node0xf9a550[shape=record, label="  %23 = add i32 %22, %14"];
	Node0xf9a5c0[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0xf9a630[shape=record, label="  %25 = add i32 %24, %13"];
	Node0xf9a6a0[shape=record, label="  %26 = add i32 %25, %17"];
	Node0xf9a710[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0xf3a268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xf9abb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0xf9ac00[shape=record, label="  ret void"];
	Node0xf99bb0 -> Node0xf99c20;
	Node0xf99c20 -> Node0xf99ce0;
	Node0xf99ce0 -> Node0xf99d50;
	Node0xf99d50 -> Node0xf99dc0;
	Node0xf99dc0 -> Node0xf99e30;
	Node0xf99e30 -> Node0xf99ea0;
	Node0xf99ea0 -> Node0xf99f10;
	Node0xf99f10 -> Node0xf99f80;
	Node0xf99f80 -> Node0xf99ff0;
	Node0xf99ff0 -> Node0xf9a090;
	Node0xf9a090 -> Node0xf9a100;
	Node0xf9a100 -> Node0xf9a170;
	Node0xf9a170 -> Node0xf9a1e0;
	Node0xf9a1e0 -> Node0xf9a280;
	Node0xf9a280 -> Node0xf9a320;
	Node0xf9a320 -> Node0xf9a390;
	Node0xf9a390 -> Node0xf9a400;
	Node0xf9a400 -> Node0xf9a470;
	Node0xf9a470 -> Node0xf9a4e0;
	Node0xf9a4e0 -> Node0xf9a550;
	Node0xf9a550 -> Node0xf9a5c0;
	Node0xf9a5c0 -> Node0xf9a630;
	Node0xf9a630 -> Node0xf9a6a0;
	Node0xf9a6a0 -> Node0xf9a710;
	Node0xf9a710 -> Node0xf3a268;
	Node0xf3a268 -> Node0xf9abb0;
	Node0xf9abb0 -> Node0xf9ac00;
edge [color=red]
	Node0xf99bb0 -> Node0xf99c20;
	Node0xf99c20 -> Node0xf99ce0;
	Node0xf99d50 -> Node0xf99dc0;
	Node0xf99e30 -> Node0xf99ea0;
	Node0xf99f10 -> Node0xf99f80;
	Node0xf99c20 -> Node0xf99ff0;
	Node0xf99ff0 -> Node0xf9a090;
	Node0xf99bb0 -> Node0xf9a100;
	Node0xf99e30 -> Node0xf9a170;
	Node0xf99f80 -> Node0xf9a1e0;
	Node0xf9a1e0 -> Node0xf9a280;
	Node0xf9a320 -> Node0xf9a390;
	Node0xf9a390 -> Node0xf9a400;
	Node0xf99dc0 -> Node0xf9a400;
	Node0xf9a400 -> Node0xf9a470;
	Node0xf99ea0 -> Node0xf9a470;
	Node0xf9a470 -> Node0xf9a4e0;
	Node0xf99d50 -> Node0xf9a4e0;
	Node0xf9a4e0 -> Node0xf9a550;
	Node0xf9a100 -> Node0xf9a550;
	Node0xf9a550 -> Node0xf9a5c0;
	Node0xf9a170 -> Node0xf9a5c0;
	Node0xf9a5c0 -> Node0xf9a630;
	Node0xf9a090 -> Node0xf9a630;
	Node0xf9a630 -> Node0xf9a6a0;
	Node0xf9a280 -> Node0xf9a6a0;
	Node0xf99ce0 -> Node0xf9a710;
	Node0xf9a6a0 -> Node0xf9a710;
	Node0xf9a710 -> Node0xf3a268;
	Node0xf3a268 -> Node0xf9abb0;
}
