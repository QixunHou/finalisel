digraph "DFG for'main' function" {
	Node0x19ef158[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x19ef208[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x19ef298[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x19ef6f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x19ef7d8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x19ef8f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x19efb30[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x19efbe8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x19f0b58[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x19f11e0[shape=record, label="  %8 = sub i32 0, %6"];
	Node0x19f1250[shape=record, label="  %9 = xor i32 %6, -1"];
	Node0x19f12c0[shape=record, label="  %10 = and i32 %7, %9"];
	Node0x19f1330[shape=record, label="  %11 = or i32 %7, %6"];
	Node0x19f13a0[shape=record, label="  %12 = sub i32 %10, %11"];
	Node0x19f1410[shape=record, label="  %13 = icmp eq i32 %12, %8"];
	Node0x19f1498[shape=record, label="  %14 = select i1 %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x19f1530[shape=record, label="  %15 = call i32 @puts(i8* nonnull dereferenceable(1) %14) #5"];
	Node0x19f1788[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x19f18e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x19f19a8[shape=record, label="  ret i32 0"];
	Node0x19ef158 -> Node0x19ef208;
	Node0x19ef208 -> Node0x19ef298;
	Node0x19ef298 -> Node0x19ef6f8;
	Node0x19ef6f8 -> Node0x19ef7d8;
	Node0x19ef7d8 -> Node0x19ef8f8;
	Node0x19ef8f8 -> Node0x19efb30;
	Node0x19efb30 -> Node0x19efbe8;
	Node0x19efbe8 -> Node0x19f0b58;
	Node0x19f0b58 -> Node0x19f11e0;
	Node0x19f11e0 -> Node0x19f1250;
	Node0x19f1250 -> Node0x19f12c0;
	Node0x19f12c0 -> Node0x19f1330;
	Node0x19f1330 -> Node0x19f13a0;
	Node0x19f13a0 -> Node0x19f1410;
	Node0x19f1410 -> Node0x19f1498;
	Node0x19f1498 -> Node0x19f1530;
	Node0x19f1530 -> Node0x19f1788;
	Node0x19f1788 -> Node0x19f18e8;
	Node0x19f18e8 -> Node0x19f19a8;
edge [color=red]
	Node0x19ef158 -> Node0x19ef298;
	Node0x19ef298 -> Node0x19ef6f8;
	Node0x19ef208 -> Node0x19ef7d8;
	Node0x19ef7d8 -> Node0x19ef8f8;
	Node0x19ef158 -> Node0x19efb30;
	Node0x19ef208 -> Node0x19efb30;
	Node0x19ef158 -> Node0x19efbe8;
	Node0x19ef208 -> Node0x19f0b58;
	Node0x19efbe8 -> Node0x19f11e0;
	Node0x19efbe8 -> Node0x19f1250;
	Node0x19f0b58 -> Node0x19f12c0;
	Node0x19f1250 -> Node0x19f12c0;
	Node0x19f0b58 -> Node0x19f1330;
	Node0x19efbe8 -> Node0x19f1330;
	Node0x19f12c0 -> Node0x19f13a0;
	Node0x19f1330 -> Node0x19f13a0;
	Node0x19f13a0 -> Node0x19f1410;
	Node0x19f11e0 -> Node0x19f1410;
	Node0x19f1410 -> Node0x19f1498;
	Node0x19f1498 -> Node0x19f1530;
	Node0x19ef7d8 -> Node0x19f1788;
	Node0x19ef298 -> Node0x19f18e8;
}
