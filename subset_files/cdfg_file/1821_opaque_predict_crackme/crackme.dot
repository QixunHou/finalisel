digraph "DFG for'crackme' function" {
	Node0x2143450[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x2143b00[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x2143bc0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2143c30[shape=record, label="  %6 = add i32 %1, 1"];
	Node0x2143ca0[shape=record, label="  %7 = or i32 %5, %0"];
	Node0x2143d10[shape=record, label="  %8 = and i32 %5, %0"];
	Node0x2143d80[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x2143df0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x2143e60[shape=record, label="  %11 = shl i32 %7, 1"];
	Node0x2143f00[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x2143fa0[shape=record, label="  %13 = mul i32 %8, 3"];
	Node0x2144010[shape=record, label="  %14 = add i32 %1, %0"];
	Node0x2144080[shape=record, label="  %15 = sub i32 %6, %14"];
	Node0x21440f0[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x2144160[shape=record, label="  %17 = add i32 %16, %9"];
	Node0x21441d0[shape=record, label="  %18 = sub i32 %17, %10"];
	Node0x2144240[shape=record, label="  %19 = add i32 %18, %3"];
	Node0x21442b0[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x2144320[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x2144390[shape=record, label="  %22 = icmp eq i32 %21, %4"];
	Node0x20e4268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2144830[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x2144880[shape=record, label="  ret void"];
	Node0x2143450 -> Node0x2143b00;
	Node0x2143b00 -> Node0x2143bc0;
	Node0x2143bc0 -> Node0x2143c30;
	Node0x2143c30 -> Node0x2143ca0;
	Node0x2143ca0 -> Node0x2143d10;
	Node0x2143d10 -> Node0x2143d80;
	Node0x2143d80 -> Node0x2143df0;
	Node0x2143df0 -> Node0x2143e60;
	Node0x2143e60 -> Node0x2143f00;
	Node0x2143f00 -> Node0x2143fa0;
	Node0x2143fa0 -> Node0x2144010;
	Node0x2144010 -> Node0x2144080;
	Node0x2144080 -> Node0x21440f0;
	Node0x21440f0 -> Node0x2144160;
	Node0x2144160 -> Node0x21441d0;
	Node0x21441d0 -> Node0x2144240;
	Node0x2144240 -> Node0x21442b0;
	Node0x21442b0 -> Node0x2144320;
	Node0x2144320 -> Node0x2144390;
	Node0x2144390 -> Node0x20e4268;
	Node0x20e4268 -> Node0x2144830;
	Node0x2144830 -> Node0x2144880;
edge [color=red]
	Node0x2143450 -> Node0x2143b00;
	Node0x2143bc0 -> Node0x2143ca0;
	Node0x2143bc0 -> Node0x2143d10;
	Node0x2143d10 -> Node0x2143d80;
	Node0x2143ca0 -> Node0x2143e60;
	Node0x2143e60 -> Node0x2143f00;
	Node0x2143d10 -> Node0x2143fa0;
	Node0x2143c30 -> Node0x2144080;
	Node0x2144010 -> Node0x2144080;
	Node0x2144080 -> Node0x21440f0;
	Node0x2143ca0 -> Node0x21440f0;
	Node0x21440f0 -> Node0x2144160;
	Node0x2143d80 -> Node0x2144160;
	Node0x2144160 -> Node0x21441d0;
	Node0x2143df0 -> Node0x21441d0;
	Node0x21441d0 -> Node0x2144240;
	Node0x2143450 -> Node0x2144240;
	Node0x2144240 -> Node0x21442b0;
	Node0x2143fa0 -> Node0x21442b0;
	Node0x21442b0 -> Node0x2144320;
	Node0x2143f00 -> Node0x2144320;
	Node0x2144320 -> Node0x2144390;
	Node0x2143b00 -> Node0x2144390;
	Node0x2144390 -> Node0x20e4268;
	Node0x20e4268 -> Node0x2144830;
}
