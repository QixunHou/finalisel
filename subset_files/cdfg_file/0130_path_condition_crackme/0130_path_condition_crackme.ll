; ModuleID = '../.././c_source_file/0130_path_condition_crackme.c'
source_filename = "../.././c_source_file/0130_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %6, %4
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %0
  %10 = or i32 %8, %1
  %11 = xor i32 %9, %10
  %12 = sub i32 %7, %11
  %13 = xor i32 %2, %1
  %14 = or i32 %13, %0
  %15 = and i32 %5, %4
  %16 = xor i32 %0, -1
  %17 = or i32 %2, %1
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %16
  %20 = and i32 %4, %2
  %21 = and i32 %20, %16
  %22 = or i32 %13, %16
  %23 = xor i32 %21, %22
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %8, %25
  %27 = and i32 %1, %0
  %28 = xor i32 %10, %27
  %29 = or i32 %8, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %24, %30
  %32 = and i32 %4, %0
  %33 = and i32 %2, %1
  %34 = or i32 %33, %32
  %35 = xor i32 %27, -1
  %36 = add i32 %27, 1
  %37 = xor i32 %32, %2
  %38 = xor i32 %33, -1
  %39 = and i32 %38, %16
  %40 = or i32 %4, %0
  %41 = xor i32 %13, -1
  %42 = and i32 %40, %41
  %43 = xor i32 %35, %2
  %44 = or i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %2
  %47 = or i32 %2, %0
  %48 = and i32 %47, %25
  %49 = and i32 %40, %2
  %50 = or i32 %13, %27
  %51 = and i32 %10, %16
  %52 = or i32 %17, %0
  %53 = shl i32 %52, 2
  %54 = and i32 %2, %0
  %55 = and i32 %8, %1
  %56 = xor i32 %55, -1
  %57 = xor i32 %54, %56
  %58 = or i32 %27, %30
  %59 = or i32 %27, %8
  %60 = and i32 %33, %0
  %61 = and i32 %17, %16
  %62 = xor i32 %60, -1
  %63 = xor i32 %61, %62
  %64 = or i32 %30, %1
  %65 = or i32 %38, %16
  %66 = and i32 %8, %25
  %67 = xor i32 %9, -1
  %68 = and i32 %67, %4
  %69 = xor i32 %47, %1
  %70 = and i32 %20, %0
  %71 = or i32 %4, %2
  %72 = xor i32 %71, %0
  %73 = or i32 %70, %72
  %74 = xor i32 %41, %0
  %75 = xor i32 %10, -1
  %76 = or i32 %75, %16
  %77 = shl i32 %25, 1
  %78 = xor i32 %27, %2
  %79 = or i32 %32, %6
  %80 = shl i32 %79, 1
  %81 = and i32 %33, %16
  %82 = and i32 %17, %0
  %83 = xor i32 %81, -1
  %84 = xor i32 %82, %83
  %85 = or i32 %13, %32
  %86 = and i32 %29, %25
  %87 = and i32 %56, %16
  %88 = xor i32 %40, -1
  %89 = or i32 %54, %55
  %90 = and i32 %44, %8
  %91 = shl i32 %90, 1
  %92 = or i32 %55, %32
  %93 = xor i32 %32, -1
  %94 = shl i32 %93, 1
  %95 = xor i32 %47, %27
  %96 = xor i32 %54, -1
  %97 = and i32 %24, %96
  %98 = and i32 %5, %25
  %99 = xor i32 %54, %40
  %100 = shl i32 %99, 1
  %101 = and i32 %5, %40
  %102 = and i32 %47, %1
  %103 = xor i32 %38, %0
  %104 = xor i32 %75, %0
  %105 = xor i32 %47, -1
  %106 = or i32 %105, %25
  %107 = and i32 %13, %0
  %108 = or i32 %81, %107
  %109 = or i32 %6, %25
  %110 = xor i32 %17, %0
  %111 = xor i32 %110, 2147483647
  %112 = xor i32 %111, %60
  %113 = shl i32 %112, 1
  %114 = xor i32 %45, %2
  %115 = or i32 %81, %82
  %116 = and i32 %13, %40
  %117 = xor i32 %18, %0
  %118 = or i32 %9, %25
  %119 = shl i32 %118, 2
  %120 = and i32 %44, %2
  %121 = and i32 %71, %0
  %122 = or i32 %21, %121
  %123 = add i32 %54, 1
  %124 = and i32 %13, %93
  %125 = and i32 %56, %0
  %126 = shl i32 %125, 1
  %127 = xor i32 %22, -1
  %128 = or i32 %21, %127
  %129 = and i32 %67, %1
  %130 = or i32 %32, %41
  %131 = and i32 %5, %24
  %132 = and i32 %24, %8
  %133 = or i32 %41, %0
  %134 = and i32 %24, %2
  %135 = or i32 %10, %0
  %136 = or i32 %75, %0
  %137 = and i32 %29, %24
  %138 = and i32 %5, %35
  %139 = xor i32 %14, -1
  %140 = or i32 %70, %139
  %141 = xor i32 %54, %1
  %142 = and i32 %35, %2
  %143 = or i32 %55, %16
  %144 = and i32 %13, %44
  %145 = xor i32 %44, %2
  %146 = xor i32 %13, %0
  %147 = xor i32 %146, -1
  %148 = xor i32 %70, %147
  %149 = xor i32 %33, %0
  %150 = and i32 %41, %35
  %151 = shl i32 %150, 2
  %152 = and i32 %29, %4
  %153 = shl i32 %152, 1
  %154 = xor i32 %93, %2
  %155 = or i32 %5, %1
  %156 = shl i32 %107, 2
  %157 = shl i32 %32, 1
  %158 = and i32 %93, %2
  %159 = or i32 %27, %105
  %160 = or i32 %33, %16
  %161 = and i32 %40, %8
  %162 = or i32 %27, %2
  %163 = or i32 %25, %2
  %164 = xor i32 %9, %38
  %165 = and i32 %24, %67
  %166 = or i32 %56, %16
  %167 = xor i32 %121, -1
  %168 = xor i32 %21, %167
  %169 = xor i32 %55, %0
  %170 = or i32 %5, %32
  %171 = and i32 %13, %16
  %172 = or i32 %60, %171
  %173 = or i32 %9, %1
  %174 = xor i32 %17, %27
  %175 = or i32 %24, %2
  %176 = or i32 %9, %33
  %177 = and i32 %24, %6
  %178 = and i32 %41, %0
  %179 = or i32 %32, %2
  %180 = xor i32 %72, -1
  %181 = xor i32 %70, %180
  %182 = or i32 %9, %4
  %183 = and i32 %96, %4
  %184 = shl i32 %16, 1
  %185 = or i32 %6, %88
  %186 = shl i32 %185, 1
  %187 = and i32 %47, %24
  %188 = or i32 %41, %88
  %189 = or i32 %9, %24
  %190 = or i32 %70, %146
  %191 = and i32 %5, %93
  %192 = or i32 %54, %24
  %193 = xor i32 %56, %0
  %194 = add i32 %2, 1
  %195 = and i32 %5, %44
  %196 = xor i32 %40, %2
  %197 = add i32 %47, 1
  %198 = and i32 %13, %35
  %199 = shl i32 %198, 1
  %200 = or i32 %32, %8
  %201 = and i32 %41, %16
  %202 = add i32 %5, 1
  %203 = xor i32 %60, %146
  %204 = and i32 %47, %4
  %205 = add i32 %29, 1
  %206 = xor i32 %10, %0
  %207 = xor i32 %67, %1
  %208 = or i32 %60, %61
  %209 = and i32 %6, %4
  %210 = and i32 %67, %25
  %211 = xor i32 %70, %14
  %212 = or i32 %6, %45
  %213 = xor i32 %9, %1
  %214 = or i32 %13, %88
  %215 = or i32 %33, %0
  %216 = or i32 %88, %2
  %217 = or i32 %8, %45
  %218 = shl i32 %217, 2
  %219 = or i32 %54, %45
  %220 = and i32 %29, %1
  %221 = and i32 %6, %35
  %222 = or i32 %5, %24
  %223 = or i32 %5, %25
  %224 = and i32 %71, %16
  %225 = xor i32 %224, 2147483647
  %226 = xor i32 %225, %70
  %227 = or i32 %24, %6
  %228 = shl i32 %227, 1
  %229 = xor i32 %107, %83
  %230 = or i32 %24, %105
  %231 = or i32 %38, %0
  %232 = xor i32 %32, %56
  %233 = shl i32 %232, 1
  %234 = xor i32 %54, %17
  %235 = or i32 %17, %16
  %236 = shl i32 %235, 1
  %237 = and i32 %38, %0
  %238 = shl i32 %237, 1
  %239 = xor i32 %96, %1
  %240 = or i32 %13, %45
  %241 = and i32 %44, %41
  %242 = and i32 %5, %1
  %243 = or i32 %10, %16
  %244 = xor i32 %171, %62
  %245 = xor i32 %54, %44
  %246 = and i32 %8, %93
  %247 = or i32 %5, %88
  %248 = and i32 %6, %1
  %249 = and i32 %96, %1
  %250 = or i32 %54, %25
  %251 = or i32 %18, %0
  %252 = or i32 %8, %88
  %253 = and i32 %6, %25
  %254 = xor i32 %32, %38
  %255 = or i32 %60, %147
  %256 = or i32 %27, %6
  %257 = or i32 %54, %4
  %258 = or i32 %54, %18
  %259 = shl i32 %258, 1
  %260 = and i32 %41, %93
  %261 = or i32 %105, %4
  %262 = and i32 %8, %35
  %263 = xor i32 %88, %2
  %264 = and i32 %96, %25
  %265 = or i32 %27, %41
  %266 = or i32 %5, %45
  %267 = or i32 %105, %1
  %268 = or i32 %56, %0
  %269 = or i32 %54, %88
  %270 = xor i32 %30, %1
  %271 = xor i32 %29, %1
  %272 = or i32 %30, %4
  %273 = and i32 %10, %0
  %274 = or i32 %54, %1
  %275 = or i32 %70, %224
  %276 = shl i32 %275, 1
  %277 = or i32 %41, %16
  %278 = shl i32 %277, 1
  %279 = and i32 %18, %16
  %280 = mul i32 %279, 6
  %281 = and i32 %55, %16
  %282 = and i32 %18, %0
  %283 = and i32 %55, %0
  %284 = mul i32 %283, 21
  %285 = and i32 %75, %16
  %286 = and i32 %75, %0
  %287 = mul i32 %286, 10
  %288 = mul i32 %60, 18
  %289 = add i32 %252, %67
  %290 = sub i32 %289, %200
  %291 = add i32 %290, %169
  %292 = sub i32 %291, %171
  %293 = mul i32 %292, 5
  %294 = add i32 %267, %282
  %295 = sub i32 %128, %294
  %296 = mul i32 %295, 3
  %297 = add i32 %281, %204
  %298 = add i32 %297, %164
  %299 = shl i32 %298, 2
  %300 = add i32 %5, -1
  %301 = add i32 %300, %161
  %302 = add i32 %301, %158
  %303 = add i32 %302, %154
  %304 = add i32 %303, %66
  %305 = add i32 %304, %273
  %306 = add i32 %305, %270
  %307 = add i32 %306, %257
  %308 = add i32 %307, %251
  %309 = add i32 %308, %249
  %310 = add i32 %309, %234
  %311 = add i32 %310, %210
  %312 = add i32 %311, %177
  %313 = add i32 %312, %116
  %314 = add i32 %313, %106
  %315 = add i32 %314, %85
  %316 = add i32 %315, %57
  %317 = add i32 %316, %42
  %318 = add i32 %317, %39
  %319 = add i32 %318, %19
  %320 = add i32 %319, %226
  %321 = shl i32 %320, 1
  %322 = add i32 %184, %1
  %323 = sub i32 %4, %322
  %324 = add i32 %323, %36
  %325 = add i32 %324, %88
  %326 = add i32 %325, %194
  %327 = add i32 %326, %2
  %328 = sub i32 %327, %27
  %329 = add i32 %328, %26
  %330 = sub i32 %329, %37
  %331 = sub i32 %330, %43
  %332 = add i32 %331, %46
  %333 = sub i32 %332, %49
  %334 = sub i32 %333, %59
  %335 = add i32 %334, %9
  %336 = sub i32 %335, %77
  %337 = sub i32 %336, %78
  %338 = sub i32 %337, %94
  %339 = add i32 %338, %114
  %340 = add i32 %339, %120
  %341 = add i32 %340, %123
  %342 = add i32 %341, %132
  %343 = add i32 %342, %134
  %344 = add i32 %343, %18
  %345 = sub i32 %344, %142
  %346 = add i32 %345, %145
  %347 = sub i32 %346, %54
  %348 = sub i32 %347, %157
  %349 = sub i32 %348, %162
  %350 = add i32 %349, %163
  %351 = sub i32 %350, %175
  %352 = sub i32 %351, %17
  %353 = sub i32 %352, %179
  %354 = sub i32 %353, %33
  %355 = add i32 %354, %196
  %356 = add i32 %355, %197
  %357 = add i32 %356, %202
  %358 = add i32 %357, %205
  %359 = sub i32 %358, %55
  %360 = sub i32 %359, %216
  %361 = sub i32 %360, %29
  %362 = add i32 %361, %246
  %363 = add i32 %362, %38
  %364 = add i32 %363, %262
  %365 = add i32 %364, %263
  %366 = add i32 %365, %41
  %367 = sub i32 %366, %14
  %368 = add i32 %367, %15
  %369 = add i32 %368, %28
  %370 = sub i32 %369, %31
  %371 = add i32 %370, %34
  %372 = sub i32 %371, %48
  %373 = add i32 %372, %50
  %374 = add i32 %373, %51
  %375 = sub i32 %374, %58
  %376 = sub i32 %375, %64
  %377 = sub i32 %376, %65
  %378 = add i32 %377, %68
  %379 = add i32 %378, %69
  %380 = add i32 %379, %74
  %381 = add i32 %380, %76
  %382 = sub i32 %381, %86
  %383 = add i32 %382, %61
  %384 = add i32 %383, %87
  %385 = sub i32 %384, %89
  %386 = sub i32 %385, %91
  %387 = sub i32 %386, %92
  %388 = add i32 %387, %95
  %389 = sub i32 %388, %97
  %390 = sub i32 %389, %98
  %391 = sub i32 %390, %101
  %392 = sub i32 %391, %102
  %393 = add i32 %392, %103
  %394 = sub i32 %393, %104
  %395 = sub i32 %394, %109
  %396 = sub i32 %395, %117
  %397 = sub i32 %396, %124
  %398 = sub i32 %397, %129
  %399 = add i32 %398, %130
  %400 = add i32 %399, %131
  %401 = add i32 %400, %133
  %402 = sub i32 %401, %135
  %403 = sub i32 %402, %136
  %404 = add i32 %403, %137
  %405 = add i32 %404, %138
  %406 = add i32 %405, %141
  %407 = sub i32 %406, %143
  %408 = add i32 %407, %144
  %409 = add i32 %408, %149
  %410 = add i32 %409, %155
  %411 = sub i32 %410, %159
  %412 = add i32 %411, %160
  %413 = add i32 %412, %165
  %414 = sub i32 %413, %166
  %415 = sub i32 %414, %170
  %416 = sub i32 %415, %173
  %417 = add i32 %416, %174
  %418 = add i32 %417, %176
  %419 = sub i32 %418, %178
  %420 = add i32 %419, %110
  %421 = sub i32 %420, %182
  %422 = sub i32 %421, %183
  %423 = sub i32 %422, %187
  %424 = sub i32 %423, %188
  %425 = add i32 %424, %189
  %426 = sub i32 %425, %191
  %427 = sub i32 %426, %192
  %428 = sub i32 %427, %193
  %429 = add i32 %428, %195
  %430 = sub i32 %429, %146
  %431 = sub i32 %430, %201
  %432 = sub i32 %431, %206
  %433 = sub i32 %432, %207
  %434 = sub i32 %433, %209
  %435 = sub i32 %434, %212
  %436 = sub i32 %435, %213
  %437 = sub i32 %436, %214
  %438 = sub i32 %437, %215
  %439 = sub i32 %438, %218
  %440 = sub i32 %439, %219
  %441 = add i32 %440, %220
  %442 = sub i32 %441, %221
  %443 = add i32 %442, %222
  %444 = add i32 %443, %223
  %445 = sub i32 %444, %230
  %446 = sub i32 %445, %82
  %447 = sub i32 %446, %231
  %448 = add i32 %447, %239
  %449 = add i32 %448, %240
  %450 = add i32 %449, %241
  %451 = add i32 %450, %242
  %452 = sub i32 %451, %243
  %453 = add i32 %452, %245
  %454 = add i32 %453, %247
  %455 = add i32 %454, %248
  %456 = add i32 %455, %250
  %457 = add i32 %456, %253
  %458 = add i32 %457, %254
  %459 = add i32 %458, %256
  %460 = add i32 %459, %260
  %461 = add i32 %460, %261
  %462 = sub i32 %461, %264
  %463 = sub i32 %462, %265
  %464 = sub i32 %463, %266
  %465 = add i32 %464, %268
  %466 = sub i32 %465, %269
  %467 = add i32 %466, %271
  %468 = add i32 %467, %272
  %469 = sub i32 %468, %274
  %470 = sub i32 %469, %285
  %471 = sub i32 %470, %23
  %472 = sub i32 %471, %53
  %473 = add i32 %472, %63
  %474 = add i32 %473, %73
  %475 = sub i32 %474, %80
  %476 = add i32 %475, %84
  %477 = sub i32 %476, %100
  %478 = add i32 %477, %108
  %479 = sub i32 %478, %115
  %480 = sub i32 %479, %119
  %481 = add i32 %480, %122
  %482 = sub i32 %481, %126
  %483 = add i32 %482, %140
  %484 = sub i32 %483, %148
  %485 = sub i32 %484, %151
  %486 = sub i32 %485, %153
  %487 = sub i32 %486, %156
  %488 = add i32 %487, %168
  %489 = sub i32 %488, %172
  %490 = add i32 %489, %181
  %491 = sub i32 %490, %186
  %492 = sub i32 %491, %190
  %493 = sub i32 %492, %199
  %494 = add i32 %493, %203
  %495 = add i32 %494, %208
  %496 = sub i32 %495, %211
  %497 = sub i32 %496, %228
  %498 = add i32 %497, %229
  %499 = sub i32 %498, %233
  %500 = sub i32 %499, %236
  %501 = sub i32 %500, %238
  %502 = add i32 %501, %244
  %503 = sub i32 %502, %255
  %504 = sub i32 %503, %259
  %505 = sub i32 %504, %278
  %506 = add i32 %505, %280
  %507 = add i32 %506, %284
  %508 = add i32 %507, %287
  %509 = add i32 %508, %288
  %510 = sub i32 %509, %276
  %511 = sub i32 %510, %113
  %512 = add i32 %511, %299
  %513 = add i32 %512, %296
  %514 = add i32 %513, %293
  %515 = add i32 %514, %321
  %516 = icmp eq i32 %12, %515
  %517 = select i1 %516, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %518 = tail call i32 @puts(i8* nonnull dereferenceable(1) %517)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
