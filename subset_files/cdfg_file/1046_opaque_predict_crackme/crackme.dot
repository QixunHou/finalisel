digraph "DFG for'crackme' function" {
	Node0x513520[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x513590[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x513c60[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x513cd0[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x513d40[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x513db0[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x513e20[shape=record, label="  %9 = and i32 %8, %0"];
	Node0x513e90[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x513f30[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x513fa0[shape=record, label="  %12 = xor i32 %3, -1"];
	Node0x514040[shape=record, label="  %13 = mul i32 %12, -5"];
	Node0x5140e0[shape=record, label="  %14 = xor i32 %0, 2147483647"];
	Node0x514150[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x5141f0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x514260[shape=record, label="  %17 = sub i32 %5, %1"];
	Node0x5142d0[shape=record, label="  %18 = sub i32 %17, %4"];
	Node0x514340[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x5143b0[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x514420[shape=record, label="  %21 = sub i32 %20, %6"];
	Node0x514490[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x514500[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x514570[shape=record, label="  %24 = sub i32 %23, %16"];
	Node0x5145e0[shape=record, label="  %25 = icmp eq i32 %3, %24"];
	Node0x4b4268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x514a80[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x514ad0[shape=record, label="  ret void"];
	Node0x513520 -> Node0x513590;
	Node0x513590 -> Node0x513c60;
	Node0x513c60 -> Node0x513cd0;
	Node0x513cd0 -> Node0x513d40;
	Node0x513d40 -> Node0x513db0;
	Node0x513db0 -> Node0x513e20;
	Node0x513e20 -> Node0x513e90;
	Node0x513e90 -> Node0x513f30;
	Node0x513f30 -> Node0x513fa0;
	Node0x513fa0 -> Node0x514040;
	Node0x514040 -> Node0x5140e0;
	Node0x5140e0 -> Node0x514150;
	Node0x514150 -> Node0x5141f0;
	Node0x5141f0 -> Node0x514260;
	Node0x514260 -> Node0x5142d0;
	Node0x5142d0 -> Node0x514340;
	Node0x514340 -> Node0x5143b0;
	Node0x5143b0 -> Node0x514420;
	Node0x514420 -> Node0x514490;
	Node0x514490 -> Node0x514500;
	Node0x514500 -> Node0x514570;
	Node0x514570 -> Node0x5145e0;
	Node0x5145e0 -> Node0x4b4268;
	Node0x4b4268 -> Node0x514a80;
	Node0x514a80 -> Node0x514ad0;
edge [color=red]
	Node0x513cd0 -> Node0x513d40;
	Node0x513db0 -> Node0x513e20;
	Node0x513e20 -> Node0x513e90;
	Node0x513e90 -> Node0x513f30;
	Node0x513520 -> Node0x513fa0;
	Node0x513fa0 -> Node0x514040;
	Node0x5140e0 -> Node0x514150;
	Node0x514150 -> Node0x5141f0;
	Node0x513c60 -> Node0x514260;
	Node0x514260 -> Node0x5142d0;
	Node0x513590 -> Node0x5142d0;
	Node0x5142d0 -> Node0x514340;
	Node0x513d40 -> Node0x514340;
	Node0x514340 -> Node0x5143b0;
	Node0x513e20 -> Node0x5143b0;
	Node0x5143b0 -> Node0x514420;
	Node0x513cd0 -> Node0x514420;
	Node0x514420 -> Node0x514490;
	Node0x513f30 -> Node0x514490;
	Node0x514490 -> Node0x514500;
	Node0x514040 -> Node0x514500;
	Node0x514500 -> Node0x514570;
	Node0x5141f0 -> Node0x514570;
	Node0x513520 -> Node0x5145e0;
	Node0x514570 -> Node0x5145e0;
	Node0x5145e0 -> Node0x4b4268;
	Node0x4b4268 -> Node0x514a80;
}
