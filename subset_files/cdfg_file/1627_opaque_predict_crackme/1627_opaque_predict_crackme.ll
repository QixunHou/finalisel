; ModuleID = '../.././c_source_file/1627_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1627_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %2, -1
  %6 = or i32 %5, %1
  %7 = xor i32 %6, -1
  %8 = or i32 %4, %7
  %9 = or i32 %5, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %1, %0
  %12 = or i32 %11, %10
  %13 = shl i32 %12, 1
  %14 = sub i32 %8, %13
  %15 = xor i32 %1, -1
  %16 = and i32 %15, %2
  %17 = and i32 %16, %0
  %18 = xor i32 %0, -1
  %19 = or i32 %15, %2
  %20 = xor i32 %19, 2147483647
  %21 = or i32 %20, %0
  %22 = xor i32 %17, %21
  %23 = and i32 %5, %1
  %24 = xor i32 %23, -1
  %25 = and i32 %2, %0
  %26 = or i32 %25, %23
  %27 = or i32 %2, %1
  %28 = and i32 %27, %18
  %29 = and i32 %11, %5
  %30 = and i32 %24, %0
  %31 = and i32 %2, %1
  %32 = and i32 %31, %18
  %33 = and i32 %27, %0
  %34 = xor i32 %32, -1
  %35 = xor i32 %33, %34
  %36 = and i32 %5, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %11, %37
  %39 = or i32 %25, %1
  %40 = xor i32 %11, -1
  %41 = or i32 %5, %40
  %42 = xor i32 %25, -1
  %43 = and i32 %11, %42
  %44 = or i32 %10, %1
  %45 = or i32 %7, %18
  %46 = xor i32 %25, %24
  %47 = xor i32 %2, %1
  %48 = xor i32 %47, -1
  %49 = add i32 %47, 1
  %50 = and i32 %16, %18
  %51 = or i32 %47, %18
  %52 = xor i32 %50, %51
  %53 = or i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %25, %54
  %56 = shl i32 %42, 1
  %57 = or i32 %24, %18
  %58 = or i32 %4, %2
  %59 = or i32 %36, %11
  %60 = xor i32 %19, %0
  %61 = or i32 %17, %60
  %62 = xor i32 %2, %0
  %63 = xor i32 %62, -1
  %64 = or i32 %4, %63
  %65 = or i32 %24, %0
  %66 = and i32 %15, %0
  %67 = xor i32 %66, %2
  %68 = or i32 %11, %63
  %69 = or i32 %23, %0
  %70 = or i32 %36, %15
  %71 = or i32 %4, %5
  %72 = and i32 %37, %40
  %73 = or i32 %15, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %62, %74
  %76 = xor i32 %4, -1
  %77 = or i32 %63, %40
  %78 = or i32 %7, %0
  %79 = xor i32 %31, -1
  %80 = or i32 %79, %0
  %81 = or i32 %2, %0
  %82 = xor i32 %81, -1
  %83 = or i32 %82, %1
  %84 = or i32 %63, %54
  %85 = xor i32 %4, %2
  %86 = xor i32 %73, %2
  %87 = or i32 %62, %15
  %88 = and i32 %63, %1
  %89 = xor i32 %10, %1
  %90 = or i32 %25, %74
  %91 = shl i32 %90, 1
  %92 = or i32 %23, %66
  %93 = xor i32 %27, -1
  %94 = xor i32 %93, %0
  %95 = and i32 %48, %0
  %96 = or i32 %4, %82
  %97 = xor i32 %7, %0
  %98 = xor i32 %47, %0
  %99 = xor i32 %98, -1
  %100 = xor i32 %17, %99
  %101 = and i32 %11, %2
  %102 = or i32 %25, %93
  %103 = xor i32 %9, %4
  %104 = or i32 %82, %40
  %105 = shl i32 %104, 1
  %106 = xor i32 %53, %2
  %107 = xor i32 %66, -1
  %108 = add i32 %66, 1
  %109 = xor i32 %27, %0
  %110 = xor i32 %24, %0
  %111 = and i32 %19, %0
  %112 = xor i32 %111, -1
  %113 = xor i32 %50, %112
  %114 = or i32 %31, %66
  %115 = and i32 %47, %107
  %116 = xor i32 %54, %2
  %117 = and i32 %42, %1
  %118 = or i32 %10, %40
  %119 = shl i32 %118, 1
  %120 = or i32 %48, %74
  %121 = shl i32 %120, 1
  %122 = and i32 %37, %15
  %123 = or i32 %36, %1
  %124 = and i32 %9, %1
  %125 = and i32 %62, %11
  %126 = or i32 %93, %18
  %127 = and i32 %73, %63
  %128 = xor i32 %42, %1
  %129 = xor i32 %74, %2
  %130 = shl i32 %129, 1
  %131 = add i32 %11, 1
  %132 = xor i32 %48, %0
  %133 = or i32 %50, %111
  %134 = and i32 %73, %5
  %135 = and i32 %63, %40
  %136 = and i32 %63, %15
  %137 = shl i32 %136, 1
  %138 = xor i32 %25, %1
  %139 = or i32 %48, %18
  %140 = shl i32 %139, 1
  %141 = and i32 %47, %0
  %142 = or i32 %32, %141
  %143 = or i32 %82, %15
  %144 = and i32 %31, %0
  %145 = or i32 %144, %99
  %146 = xor i32 %37, %1
  %147 = or i32 %63, %15
  %148 = or i32 %66, %2
  %149 = or i32 %36, %40
  %150 = xor i32 %81, %1
  %151 = and i32 %62, %107
  %152 = or i32 %4, %48
  %153 = or i32 %48, %54
  %154 = xor i32 %79, %0
  %155 = and i32 %6, %18
  %156 = xor i32 %141, %34
  %157 = and i32 %40, %2
  %158 = xor i32 %6, %4
  %159 = and i32 %79, %18
  %160 = or i32 %144, %109
  %161 = or i32 %5, %74
  %162 = and i32 %47, %73
  %163 = and i32 %11, %63
  %164 = xor i32 %81, %4
  %165 = and i32 %48, %107
  %166 = or i32 %62, %66
  %167 = and i32 %62, %40
  %168 = shl i32 %167, 1
  %169 = or i32 %47, %54
  %170 = or i32 %47, %74
  %171 = and i32 %63, %76
  %172 = and i32 %62, %76
  %173 = and i32 %79, %0
  %174 = and i32 %9, %11
  %175 = and i32 %48, %18
  %176 = shl i32 %175, 1
  %177 = and i32 %47, %53
  %178 = add i32 %6, 1
  %179 = or i32 %11, %82
  %180 = and i32 %6, %0
  %181 = and i32 %53, %5
  %182 = or i32 %31, %18
  %183 = and i32 %5, %76
  %184 = or i32 %63, %1
  %185 = xor i32 %51, -1
  %186 = or i32 %50, %185
  %187 = and i32 %9, %40
  %188 = or i32 %48, %0
  %189 = xor i32 %144, %188
  %190 = shl i32 %54, 1
  %191 = or i32 %62, %40
  %192 = or i32 %63, %74
  %193 = or i32 %6, %18
  %194 = or i32 %4, %93
  %195 = and i32 %53, %48
  %196 = or i32 %144, %28
  %197 = xor i32 %25, %73
  %198 = shl i32 %197, 1
  %199 = or i32 %79, %18
  %200 = and i32 %37, %1
  %201 = or i32 %62, %11
  %202 = and i32 %62, %15
  %203 = or i32 %47, %0
  %204 = xor i32 %17, %203
  %205 = xor i32 %144, -1
  %206 = xor i32 %28, %205
  %207 = or i32 %25, %40
  %208 = xor i32 %36, %6
  %209 = or i32 %66, %48
  %210 = shl i32 %209, 1
  %211 = or i32 %32, %33
  %212 = xor i32 %31, %0
  %213 = and i32 %63, %107
  %214 = and i32 %47, %76
  %215 = shl i32 %214, 1
  %216 = xor i32 %9, %1
  %217 = and i32 %81, %15
  %218 = or i32 %25, %15
  %219 = add i32 %31, 1
  %220 = or i32 %62, %1
  %221 = or i32 %66, %5
  %222 = or i32 %36, %7
  %223 = and i32 %24, %18
  %224 = and i32 %9, %15
  %225 = shl i32 %224, 2
  %226 = and i32 %42, %40
  %227 = or i32 %6, %0
  %228 = shl i32 %51, 1
  %229 = or i32 %93, %0
  %230 = xor i32 %36, %79
  %231 = and i32 %53, %63
  %232 = xor i32 %25, %53
  %233 = and i32 %81, %40
  %234 = or i32 %11, %2
  %235 = xor i32 %66, %79
  %236 = xor i32 %36, %1
  %237 = or i32 %27, %0
  %238 = or i32 %66, %63
  %239 = or i32 %62, %54
  %240 = or i32 %74, %2
  %241 = or i32 %23, %18
  %242 = or i32 %11, %5
  %243 = xor i32 %25, %27
  %244 = or i32 %27, %18
  %245 = xor i32 %60, -1
  %246 = xor i32 %17, %245
  %247 = and i32 %73, %48
  %248 = or i32 %36, %31
  %249 = and i32 %42, %15
  %250 = xor i32 %107, %2
  %251 = or i32 %54, %2
  %252 = and i32 %62, %1
  %253 = xor i32 %23, %0
  %254 = or i32 %47, %4
  %255 = xor i32 %6, %0
  %256 = and i32 %53, %2
  %257 = or i32 %5, %54
  %258 = xor i32 %109, %205
  %259 = and i32 %73, %2
  %260 = or i32 %62, %4
  %261 = shl i32 %260, 1
  %262 = and i32 %93, %18
  %263 = and i32 %23, %18
  %264 = and i32 %93, %0
  %265 = shl i32 %264, 1
  %266 = and i32 %23, %0
  %267 = shl i32 %266, 3
  %268 = and i32 %7, %18
  %269 = and i32 %7, %0
  %270 = shl i32 %269, 1
  %271 = mul i32 %144, 14
  %272 = add i32 %66, %5
  %273 = add i32 %272, %250
  %274 = add i32 %273, %183
  %275 = add i32 %274, %161
  %276 = add i32 %275, %148
  %277 = add i32 %276, %101
  %278 = add i32 %277, %86
  %279 = add i32 %278, %71
  %280 = add i32 %279, %227
  %281 = add i32 %280, %218
  %282 = add i32 %281, %213
  %283 = add i32 %282, %207
  %284 = add i32 %283, %193
  %285 = add i32 %284, %192
  %286 = add i32 %285, %143
  %287 = add i32 %286, %128
  %288 = add i32 %287, %127
  %289 = add i32 %288, %123
  %290 = add i32 %289, %94
  %291 = sub i32 %290, %22
  %292 = shl i32 %291, 1
  %293 = add i32 %85, %18
  %294 = sub i32 %293, %39
  %295 = sub i32 %294, %262
  %296 = mul i32 %295, 5
  %297 = add i32 %47, %9
  %298 = add i32 %297, %170
  %299 = shl i32 %298, 2
  %300 = add i32 %268, %263
  %301 = mul i32 %300, -20
  %302 = add i32 %171, %54
  %303 = add i32 %302, %220
  %304 = add i32 %303, %146
  %305 = add i32 %304, %97
  %306 = mul i32 %305, 3
  %307 = sub i32 2, %0
  %308 = add i32 %307, %108
  %309 = add i32 %308, %131
  %310 = sub i32 %309, %73
  %311 = sub i32 %310, %11
  %312 = add i32 %311, %74
  %313 = sub i32 %312, %29
  %314 = add i32 %313, %41
  %315 = add i32 %314, %49
  %316 = sub i32 %315, %58
  %317 = add i32 %316, %27
  %318 = sub i32 %317, %67
  %319 = sub i32 %318, %31
  %320 = sub i32 %319, %106
  %321 = sub i32 %320, %25
  %322 = sub i32 %321, %116
  %323 = sub i32 %322, %134
  %324 = sub i32 %323, %81
  %325 = add i32 %324, %157
  %326 = add i32 %325, %62
  %327 = add i32 %326, %178
  %328 = add i32 %327, %181
  %329 = sub i32 %328, %190
  %330 = add i32 %329, %10
  %331 = add i32 %330, %219
  %332 = add i32 %331, %221
  %333 = sub i32 %332, %234
  %334 = sub i32 %333, %6
  %335 = add i32 %334, %240
  %336 = sub i32 %335, %242
  %337 = add i32 %336, %251
  %338 = add i32 %337, %256
  %339 = add i32 %338, %257
  %340 = sub i32 %339, %259
  %341 = sub i32 %340, %26
  %342 = sub i32 %341, %28
  %343 = sub i32 %342, %30
  %344 = sub i32 %343, %38
  %345 = add i32 %344, %43
  %346 = add i32 %345, %44
  %347 = sub i32 %346, %45
  %348 = add i32 %347, %46
  %349 = sub i32 %348, %55
  %350 = sub i32 %349, %56
  %351 = add i32 %350, %57
  %352 = add i32 %351, %59
  %353 = sub i32 %352, %64
  %354 = add i32 %353, %65
  %355 = sub i32 %354, %68
  %356 = sub i32 %355, %69
  %357 = sub i32 %356, %70
  %358 = sub i32 %357, %72
  %359 = add i32 %358, %75
  %360 = sub i32 %359, %77
  %361 = add i32 %360, %78
  %362 = sub i32 %361, %80
  %363 = add i32 %362, %83
  %364 = add i32 %363, %84
  %365 = add i32 %364, %87
  %366 = add i32 %365, %88
  %367 = add i32 %366, %89
  %368 = sub i32 %367, %92
  %369 = add i32 %368, %95
  %370 = sub i32 %369, %96
  %371 = sub i32 %370, %102
  %372 = sub i32 %371, %103
  %373 = add i32 %372, %109
  %374 = sub i32 %373, %110
  %375 = sub i32 %374, %114
  %376 = sub i32 %375, %115
  %377 = add i32 %376, %117
  %378 = add i32 %377, %122
  %379 = add i32 %378, %124
  %380 = sub i32 %379, %125
  %381 = add i32 %380, %98
  %382 = add i32 %381, %126
  %383 = sub i32 %382, %130
  %384 = sub i32 %383, %132
  %385 = add i32 %384, %135
  %386 = sub i32 %385, %138
  %387 = sub i32 %386, %147
  %388 = sub i32 %387, %149
  %389 = sub i32 %388, %150
  %390 = sub i32 %389, %151
  %391 = sub i32 %390, %152
  %392 = add i32 %391, %153
  %393 = sub i32 %392, %154
  %394 = sub i32 %393, %155
  %395 = add i32 %394, %158
  %396 = add i32 %395, %159
  %397 = add i32 %396, %141
  %398 = add i32 %397, %162
  %399 = add i32 %398, %163
  %400 = sub i32 %399, %164
  %401 = sub i32 %400, %165
  %402 = add i32 %401, %166
  %403 = add i32 %402, %169
  %404 = add i32 %403, %172
  %405 = sub i32 %404, %173
  %406 = add i32 %405, %174
  %407 = add i32 %406, %177
  %408 = sub i32 %407, %179
  %409 = sub i32 %408, %180
  %410 = sub i32 %409, %182
  %411 = sub i32 %410, %184
  %412 = sub i32 %411, %187
  %413 = sub i32 %412, %191
  %414 = sub i32 %413, %194
  %415 = sub i32 %414, %195
  %416 = sub i32 %415, %199
  %417 = sub i32 %416, %200
  %418 = add i32 %417, %201
  %419 = add i32 %418, %202
  %420 = add i32 %419, %208
  %421 = sub i32 %420, %203
  %422 = sub i32 %421, %212
  %423 = sub i32 %422, %216
  %424 = sub i32 %423, %217
  %425 = add i32 %424, %222
  %426 = add i32 %425, %223
  %427 = sub i32 %426, %226
  %428 = sub i32 %427, %229
  %429 = sub i32 %428, %230
  %430 = sub i32 %429, %231
  %431 = sub i32 %430, %232
  %432 = sub i32 %431, %233
  %433 = add i32 %432, %235
  %434 = sub i32 %433, %236
  %435 = add i32 %434, %237
  %436 = add i32 %435, %238
  %437 = sub i32 %436, %239
  %438 = sub i32 %437, %241
  %439 = add i32 %438, %33
  %440 = add i32 %439, %243
  %441 = sub i32 %440, %244
  %442 = sub i32 %441, %247
  %443 = add i32 %442, %248
  %444 = add i32 %443, %249
  %445 = sub i32 %444, %252
  %446 = sub i32 %445, %253
  %447 = sub i32 %446, %188
  %448 = sub i32 %447, %254
  %449 = add i32 %448, %255
  %450 = sub i32 %449, %32
  %451 = add i32 %450, %35
  %452 = add i32 %451, %52
  %453 = add i32 %452, %61
  %454 = sub i32 %453, %91
  %455 = sub i32 %454, %100
  %456 = sub i32 %455, %105
  %457 = add i32 %456, %113
  %458 = sub i32 %457, %119
  %459 = sub i32 %458, %121
  %460 = sub i32 %459, %133
  %461 = sub i32 %460, %137
  %462 = sub i32 %461, %140
  %463 = sub i32 %462, %142
  %464 = add i32 %463, %145
  %465 = add i32 %464, %156
  %466 = sub i32 %465, %160
  %467 = sub i32 %466, %168
  %468 = sub i32 %467, %176
  %469 = add i32 %468, %186
  %470 = sub i32 %469, %189
  %471 = add i32 %470, %196
  %472 = sub i32 %471, %198
  %473 = add i32 %472, %204
  %474 = add i32 %473, %206
  %475 = sub i32 %474, %210
  %476 = add i32 %475, %211
  %477 = sub i32 %476, %215
  %478 = sub i32 %477, %225
  %479 = sub i32 %478, %228
  %480 = sub i32 %479, %246
  %481 = sub i32 %480, %258
  %482 = sub i32 %481, %261
  %483 = sub i32 %482, %265
  %484 = sub i32 %483, %267
  %485 = sub i32 %484, %270
  %486 = add i32 %485, %271
  %487 = add i32 %486, %301
  %488 = add i32 %487, %299
  %489 = add i32 %488, %296
  %490 = add i32 %489, %306
  %491 = add i32 %490, %292
  %492 = icmp eq i32 %14, %491
  %493 = select i1 %492, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %494 = tail call i32 @puts(i8* nonnull dereferenceable(1) %493)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
