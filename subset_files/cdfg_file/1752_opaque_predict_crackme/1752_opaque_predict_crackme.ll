; ModuleID = '../.././c_source_file/1752_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1752_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = xor i32 %4, -1
  %6 = and i32 %5, %0
  %7 = mul i32 %6, -5
  %8 = xor i32 %2, -1
  %9 = and i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = add i32 %7, %11
  %13 = and i32 %8, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %1, -1
  %16 = and i32 %15, %0
  %17 = or i32 %16, %2
  %18 = xor i32 %0, -1
  %19 = xor i32 %2, %1
  %20 = xor i32 %19, -1
  %21 = or i32 %20, %18
  %22 = or i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = xor i32 %2, %0
  %25 = or i32 %24, %23
  %26 = and i32 %8, %1
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %0
  %29 = or i32 %24, %1
  %30 = or i32 %2, %1
  %31 = and i32 %2, %0
  %32 = or i32 %15, %0
  %33 = xor i32 %31, %32
  %34 = shl i32 %33, 1
  %35 = and i32 %22, %8
  %36 = or i32 %8, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %37, %1
  %39 = or i32 %23, %2
  %40 = xor i32 %24, -1
  %41 = and i32 %40, %1
  %42 = or i32 %40, %23
  %43 = and i32 %15, %2
  %44 = and i32 %43, %0
  %45 = or i32 %15, %2
  %46 = and i32 %45, %18
  %47 = or i32 %44, %46
  %48 = and i32 %24, %10
  %49 = or i32 %9, %37
  %50 = shl i32 %49, 1
  %51 = add i32 %4, 1
  %52 = xor i32 %16, %5
  %53 = and i32 %19, %18
  %54 = xor i32 %32, -1
  %55 = or i32 %19, %54
  %56 = xor i32 %1, %0
  %57 = or i32 %13, %56
  %58 = or i32 %26, %0
  %59 = shl i32 %58, 2
  %60 = or i32 %19, %23
  %61 = or i32 %9, %2
  %62 = or i32 %19, %0
  %63 = xor i32 %44, %62
  %64 = or i32 %24, %15
  %65 = xor i32 %56, -1
  %66 = or i32 %8, %65
  %67 = shl i32 %66, 1
  %68 = and i32 %30, %18
  %69 = shl i32 %68, 1
  %70 = or i32 %2, %0
  %71 = and i32 %70, %15
  %72 = and i32 %19, %10
  %73 = or i32 %40, %65
  %74 = and i32 %56, %2
  %75 = and i32 %20, %10
  %76 = xor i32 %70, -1
  %77 = add i32 %70, 1
  %78 = and i32 %24, %32
  %79 = and i32 %14, %15
  %80 = xor i32 %31, -1
  %81 = or i32 %8, %1
  %82 = xor i32 %81, -1
  %83 = xor i32 %82, %0
  %84 = xor i32 %81, %9
  %85 = or i32 %65, %2
  %86 = or i32 %40, %1
  %87 = or i32 %13, %65
  %88 = and i32 %4, %18
  %89 = and i32 %30, %0
  %90 = or i32 %88, %89
  %91 = and i32 %36, %15
  %92 = shl i32 %31, 1
  %93 = and i32 %14, %1
  %94 = or i32 %56, %8
  %95 = shl i32 %94, 2
  %96 = and i32 %24, %15
  %97 = shl i32 %96, 1
  %98 = and i32 %4, %0
  %99 = xor i32 %98, -1
  %100 = xor i32 %68, %99
  %101 = or i32 %9, %8
  %102 = and i32 %22, %40
  %103 = or i32 %19, %16
  %104 = xor i32 %76, %1
  %105 = and i32 %24, %22
  %106 = or i32 %20, %0
  %107 = xor i32 %19, %0
  %108 = or i32 %31, %23
  %109 = and i32 %8, %65
  %110 = xor i32 %23, %2
  %111 = or i32 %8, %23
  %112 = or i32 %76, %15
  %113 = xor i32 %16, -1
  %114 = and i32 %40, %113
  %115 = and i32 %80, %15
  %116 = xor i32 %30, %0
  %117 = or i32 %98, %116
  %118 = or i32 %27, %0
  %119 = shl i32 %27, 1
  %120 = and i32 %36, %1
  %121 = or i32 %56, %40
  %122 = shl i32 %121, 1
  %123 = or i32 %24, %16
  %124 = xor i32 %89, -1
  %125 = xor i32 %88, %124
  %126 = xor i32 %13, %81
  %127 = xor i32 %30, %9
  %128 = add i32 %9, 1
  %129 = or i32 %27, %18
  %130 = shl i32 %129, 1
  %131 = or i32 %26, %16
  %132 = shl i32 %131, 1
  %133 = and i32 %43, %18
  %134 = and i32 %45, %0
  %135 = or i32 %133, %134
  %136 = or i32 %9, %76
  %137 = xor i32 %62, -1
  %138 = or i32 %44, %137
  %139 = or i32 %26, %18
  %140 = or i32 %16, %8
  %141 = xor i32 %31, %1
  %142 = xor i32 %30, -1
  %143 = or i32 %142, %0
  %144 = or i32 %16, %20
  %145 = and i32 %24, %113
  %146 = or i32 %19, %18
  %147 = xor i32 %133, %146
  %148 = xor i32 %44, -1
  %149 = xor i32 %46, %148
  %150 = and i32 %19, %0
  %151 = xor i32 %150, 1073741823
  %152 = xor i32 %151, %88
  %153 = shl i32 %152, 2
  %154 = and i32 %14, %65
  %155 = or i32 %4, %18
  %156 = or i32 %56, %37
  %157 = and i32 %8, %113
  %158 = shl i32 %157, 1
  %159 = or i32 %98, %68
  %160 = xor i32 %13, %1
  %161 = or i32 %81, %18
  %162 = or i32 %31, %56
  %163 = or i32 %9, %40
  %164 = shl i32 %163, 1
  %165 = xor i32 %9, %2
  %166 = or i32 %31, %15
  %167 = and i32 %40, %65
  %168 = xor i32 %4, %0
  %169 = or i32 %82, %18
  %170 = and i32 %36, %65
  %171 = and i32 %24, %56
  %172 = shl i32 %171, 1
  %173 = shl i32 %116, 1
  %174 = xor i32 %13, %5
  %175 = xor i32 %81, %0
  %176 = and i32 %81, %18
  %177 = or i32 %9, %82
  %178 = xor i32 %16, %27
  %179 = and i32 %27, %18
  %180 = xor i32 %36, %1
  %181 = and i32 %24, %65
  %182 = and i32 %56, %80
  %183 = xor i32 %146, -1
  %184 = or i32 %133, %183
  %185 = or i32 %9, %142
  %186 = and i32 %19, %22
  %187 = or i32 %31, %1
  %188 = or i32 %37, %15
  %189 = or i32 %8, %54
  %190 = add i32 %30, 1
  %191 = and i32 %5, %18
  %192 = shl i32 %191, 1
  %193 = or i32 %20, %54
  %194 = xor i32 %116, 2147483647
  %195 = xor i32 %194, %98
  %196 = or i32 %40, %54
  %197 = xor i32 %31, %30
  %198 = or i32 %4, %0
  %199 = or i32 %5, %18
  %200 = xor i32 %36, %9
  %201 = or i32 %76, %1
  %202 = or i32 %13, %1
  %203 = xor i32 %22, %2
  %204 = and i32 %22, %2
  %205 = or i32 %37, %1
  %206 = and i32 %70, %1
  %207 = or i32 %19, %9
  %208 = or i32 %56, %76
  %209 = or i32 %76, %65
  %210 = and i32 %56, %8
  %211 = xor i32 %70, %1
  %212 = and i32 %32, %40
  %213 = and i32 %19, %113
  %214 = shl i32 %213, 1
  %215 = and i32 %81, %0
  %216 = shl i32 %215, 1
  %217 = xor i32 %107, -1
  %218 = or i32 %98, %217
  %219 = xor i32 %31, %22
  %220 = and i32 %10, %2
  %221 = and i32 %80, %1
  %222 = xor i32 %98, %107
  %223 = and i32 %56, %14
  %224 = or i32 %4, %16
  %225 = and i32 %113, %2
  %226 = xor i32 %5, %0
  %227 = and i32 %22, %20
  %228 = and i32 %32, %2
  %229 = xor i32 %53, %99
  %230 = or i32 %37, %65
  %231 = or i32 %40, %15
  %232 = or i32 %98, %53
  %233 = or i32 %31, %142
  %234 = xor i32 %45, %0
  %235 = or i32 %44, %234
  %236 = shl i32 %235, 1
  %237 = or i32 %24, %56
  %238 = and i32 %24, %1
  %239 = and i32 %70, %56
  %240 = xor i32 %113, %2
  %241 = or i32 %30, %18
  %242 = or i32 %30, %0
  %243 = shl i32 %242, 1
  %244 = or i32 %13, %15
  %245 = xor i32 %44, %217
  %246 = and i32 %70, %65
  %247 = xor i32 %20, %0
  %248 = xor i32 %70, %9
  %249 = or i32 %24, %65
  %250 = or i32 %24, %54
  %251 = or i32 %20, %23
  %252 = or i32 %82, %0
  %253 = or i32 %56, %2
  %254 = or i32 %13, %4
  %255 = xor i32 %80, %1
  %256 = or i32 %16, %40
  %257 = or i32 %88, %150
  %258 = add i32 %32, 1
  %259 = xor i32 %234, %148
  %260 = and i32 %32, %20
  %261 = add i32 %24, 1
  %262 = and i32 %19, %32
  %263 = xor i32 %10, %2
  %264 = and i32 %32, %8
  %265 = and i32 %40, %10
  %266 = and i32 %142, %18
  %267 = and i32 %26, %18
  %268 = and i32 %142, %0
  %269 = shl i32 %268, 3
  %270 = and i32 %26, %0
  %271 = and i32 %82, %18
  %272 = mul i32 %271, 17
  %273 = mul i32 %88, -28
  %274 = mul i32 %98, 9
  %275 = sub i32 %170, %120
  %276 = sub i32 %275, %108
  %277 = sub i32 %276, %78
  %278 = add i32 %277, %232
  %279 = mul i32 %278, 3
  %280 = add i32 %266, %193
  %281 = add i32 %280, %127
  %282 = add i32 %281, %60
  %283 = shl i32 %282, 2
  %284 = sub i32 %267, %270
  %285 = mul i32 %284, 10
  %286 = add i32 %262, %212
  %287 = mul i32 %286, -5
  %288 = sub i32 -2, %16
  %289 = add i32 %288, %210
  %290 = add i32 %289, %204
  %291 = add i32 %290, %19
  %292 = add i32 %291, %82
  %293 = add i32 %292, %85
  %294 = add i32 %293, %260
  %295 = add i32 %294, %251
  %296 = add i32 %295, %238
  %297 = add i32 %296, %237
  %298 = add i32 %297, %219
  %299 = add i32 %298, %198
  %300 = add i32 %299, %187
  %301 = add i32 %300, %179
  %302 = add i32 %301, %177
  %303 = add i32 %302, %166
  %304 = add i32 %303, %162
  %305 = add i32 %304, %161
  %306 = add i32 %305, %160
  %307 = add i32 %306, %126
  %308 = add i32 %307, %123
  %309 = add i32 %308, %106
  %310 = add i32 %309, %52
  %311 = add i32 %310, %28
  %312 = add i32 %311, %195
  %313 = shl i32 %312, 1
  %314 = add i32 %1, 4
  %315 = sub i32 %314, %9
  %316 = sub i32 %315, %32
  %317 = add i32 %316, %128
  %318 = sub i32 %317, %16
  %319 = add i32 %318, %65
  %320 = sub i32 %319, %56
  %321 = add i32 %320, %258
  %322 = add i32 %321, %17
  %323 = sub i32 %322, %30
  %324 = add i32 %323, %35
  %325 = add i32 %324, %39
  %326 = add i32 %325, %51
  %327 = add i32 %326, %20
  %328 = sub i32 %327, %61
  %329 = add i32 %328, %74
  %330 = add i32 %329, %77
  %331 = add i32 %330, %80
  %332 = sub i32 %331, %101
  %333 = add i32 %332, %81
  %334 = add i32 %333, %109
  %335 = sub i32 %334, %110
  %336 = sub i32 %335, %111
  %337 = add i32 %336, %36
  %338 = sub i32 %337, %140
  %339 = add i32 %338, %165
  %340 = add i32 %339, %189
  %341 = add i32 %340, %190
  %342 = add i32 %341, %203
  %343 = sub i32 %342, %24
  %344 = sub i32 %343, %220
  %345 = sub i32 %344, %225
  %346 = sub i32 %345, %228
  %347 = add i32 %346, %240
  %348 = sub i32 %347, %253
  %349 = add i32 %348, %26
  %350 = sub i32 %349, %70
  %351 = add i32 %350, %261
  %352 = add i32 %351, %263
  %353 = sub i32 %352, %4
  %354 = sub i32 %353, %264
  %355 = sub i32 %354, %21
  %356 = add i32 %355, %25
  %357 = add i32 %356, %29
  %358 = add i32 %357, %38
  %359 = add i32 %358, %41
  %360 = sub i32 %359, %42
  %361 = add i32 %360, %48
  %362 = sub i32 %361, %53
  %363 = sub i32 %362, %55
  %364 = sub i32 %363, %57
  %365 = add i32 %364, %64
  %366 = sub i32 %365, %67
  %367 = add i32 %366, %71
  %368 = sub i32 %367, %72
  %369 = sub i32 %368, %73
  %370 = add i32 %369, %75
  %371 = sub i32 %370, %79
  %372 = add i32 %371, %83
  %373 = sub i32 %372, %84
  %374 = add i32 %373, %86
  %375 = sub i32 %374, %87
  %376 = sub i32 %375, %91
  %377 = sub i32 %376, %92
  %378 = sub i32 %377, %93
  %379 = sub i32 %378, %95
  %380 = add i32 %379, %102
  %381 = sub i32 %380, %103
  %382 = add i32 %381, %104
  %383 = add i32 %382, %105
  %384 = add i32 %383, %107
  %385 = sub i32 %384, %112
  %386 = sub i32 %385, %114
  %387 = add i32 %386, %115
  %388 = sub i32 %387, %118
  %389 = sub i32 %388, %119
  %390 = sub i32 %389, %136
  %391 = sub i32 %390, %139
  %392 = add i32 %391, %141
  %393 = add i32 %392, %143
  %394 = sub i32 %393, %144
  %395 = add i32 %394, %145
  %396 = add i32 %395, %146
  %397 = sub i32 %396, %154
  %398 = add i32 %397, %155
  %399 = sub i32 %398, %156
  %400 = sub i32 %399, %158
  %401 = sub i32 %400, %167
  %402 = add i32 %401, %168
  %403 = add i32 %402, %169
  %404 = sub i32 %403, %174
  %405 = add i32 %404, %175
  %406 = add i32 %405, %176
  %407 = sub i32 %406, %178
  %408 = add i32 %407, %180
  %409 = add i32 %408, %181
  %410 = sub i32 %409, %182
  %411 = add i32 %410, %185
  %412 = add i32 %411, %186
  %413 = add i32 %412, %188
  %414 = sub i32 %413, %196
  %415 = sub i32 %414, %197
  %416 = add i32 %415, %199
  %417 = sub i32 %416, %200
  %418 = add i32 %417, %201
  %419 = add i32 %418, %202
  %420 = sub i32 %419, %205
  %421 = add i32 %420, %150
  %422 = add i32 %421, %206
  %423 = sub i32 %422, %207
  %424 = sub i32 %423, %62
  %425 = add i32 %424, %208
  %426 = sub i32 %425, %209
  %427 = add i32 %426, %211
  %428 = sub i32 %427, %221
  %429 = add i32 %428, %223
  %430 = add i32 %429, %224
  %431 = add i32 %430, %226
  %432 = sub i32 %431, %227
  %433 = add i32 %432, %230
  %434 = sub i32 %433, %231
  %435 = add i32 %434, %233
  %436 = add i32 %435, %89
  %437 = sub i32 %436, %239
  %438 = add i32 %437, %241
  %439 = sub i32 %438, %244
  %440 = sub i32 %439, %246
  %441 = sub i32 %440, %247
  %442 = add i32 %441, %248
  %443 = sub i32 %442, %249
  %444 = add i32 %443, %250
  %445 = add i32 %444, %252
  %446 = sub i32 %445, %254
  %447 = sub i32 %446, %255
  %448 = sub i32 %447, %256
  %449 = sub i32 %448, %265
  %450 = sub i32 %449, %34
  %451 = add i32 %450, %47
  %452 = sub i32 %451, %50
  %453 = sub i32 %452, %59
  %454 = sub i32 %453, %63
  %455 = sub i32 %454, %69
  %456 = add i32 %455, %90
  %457 = sub i32 %456, %97
  %458 = sub i32 %457, %100
  %459 = sub i32 %458, %117
  %460 = sub i32 %459, %122
  %461 = add i32 %460, %125
  %462 = sub i32 %461, %130
  %463 = sub i32 %462, %132
  %464 = sub i32 %463, %135
  %465 = add i32 %464, %138
  %466 = add i32 %465, %147
  %467 = sub i32 %466, %149
  %468 = sub i32 %467, %159
  %469 = sub i32 %468, %164
  %470 = sub i32 %469, %172
  %471 = sub i32 %470, %173
  %472 = sub i32 %471, %184
  %473 = sub i32 %472, %192
  %474 = sub i32 %473, %214
  %475 = sub i32 %474, %216
  %476 = add i32 %475, %218
  %477 = add i32 %476, %222
  %478 = add i32 %477, %229
  %479 = sub i32 %478, %243
  %480 = add i32 %479, %245
  %481 = add i32 %480, %257
  %482 = add i32 %481, %259
  %483 = add i32 %482, %269
  %484 = add i32 %483, %272
  %485 = add i32 %484, %273
  %486 = add i32 %485, %274
  %487 = sub i32 %486, %236
  %488 = add i32 %487, %285
  %489 = add i32 %488, %287
  %490 = sub i32 %489, %153
  %491 = add i32 %490, %283
  %492 = add i32 %491, %279
  %493 = add i32 %492, %313
  %494 = icmp eq i32 %12, %493
  %495 = select i1 %494, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %496 = tail call i32 @puts(i8* nonnull dereferenceable(1) %495)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
