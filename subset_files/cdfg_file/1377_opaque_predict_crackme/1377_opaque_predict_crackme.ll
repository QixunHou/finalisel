; ModuleID = '../.././c_source_file/1377_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1377_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %1
  %11 = or i32 %10, %8
  %12 = xor i32 %3, -1
  %13 = and i32 %12, %4
  %14 = xor i32 %13, %5
  %15 = mul i32 %14, -5
  %16 = sub i32 %15, %11
  %17 = and i32 %4, %3
  %18 = or i32 %5, %3
  %19 = xor i32 %18, -1
  %20 = or i32 %17, %19
  %21 = shl i32 %20, 1
  %22 = sub i32 %16, %21
  %23 = or i32 %7, %0
  %24 = and i32 %23, %2
  %25 = shl i32 %24, 1
  %26 = xor i32 %2, %0
  %27 = and i32 %26, %1
  %28 = shl i32 %27, 2
  %29 = and i32 %2, %0
  %30 = xor i32 %29, %1
  %31 = xor i32 %0, -1
  %32 = and i32 %2, %1
  %33 = and i32 %32, %31
  %34 = or i32 %2, %1
  %35 = and i32 %34, %0
  %36 = xor i32 %33, -1
  %37 = xor i32 %35, %36
  %38 = xor i32 %2, %1
  %39 = and i32 %38, %0
  %40 = xor i32 %39, %36
  %41 = or i32 %26, %7
  %42 = or i32 %8, %2
  %43 = xor i32 %32, -1
  %44 = shl i32 %43, 1
  %45 = or i32 %26, %1
  %46 = or i32 %9, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %0
  %49 = or i32 %29, %1
  %50 = and i32 %1, %0
  %51 = or i32 %50, %47
  %52 = xor i32 %43, %0
  %53 = xor i32 %50, %2
  %54 = or i32 %2, %0
  %55 = xor i32 %54, -1
  %56 = xor i32 %1, %0
  %57 = or i32 %56, %55
  %58 = xor i32 %8, -1
  %59 = and i32 %26, %58
  %60 = or i32 %38, %31
  %61 = xor i32 %23, -1
  %62 = or i32 %26, %61
  %63 = xor i32 %38, -1
  %64 = add i32 %38, 1
  %65 = and i32 %7, %2
  %66 = and i32 %65, %31
  %67 = xor i32 %60, -1
  %68 = or i32 %66, %67
  %69 = and i32 %65, %0
  %70 = or i32 %7, %2
  %71 = xor i32 %70, %0
  %72 = or i32 %69, %71
  %73 = and i32 %54, %56
  %74 = shl i32 %73, 1
  %75 = xor i32 %55, %1
  %76 = shl i32 %75, 1
  %77 = and i32 %9, %0
  %78 = or i32 %77, %47
  %79 = or i32 %77, %56
  %80 = xor i32 %71, -1
  %81 = xor i32 %69, %80
  %82 = or i32 %50, %55
  %83 = xor i32 %26, -1
  %84 = or i32 %50, %83
  %85 = xor i32 %10, -1
  %86 = and i32 %85, %31
  %87 = and i32 %83, %1
  %88 = or i32 %63, %61
  %89 = xor i32 %61, %2
  %90 = xor i32 %77, -1
  %91 = and i32 %90, %1
  %92 = xor i32 %56, -1
  %93 = or i32 %9, %92
  %94 = or i32 %9, %0
  %95 = xor i32 %94, -1
  %96 = or i32 %95, %1
  %97 = or i32 %32, %8
  %98 = or i32 %1, %0
  %99 = and i32 %98, %83
  %100 = xor i32 %46, %50
  %101 = shl i32 %100, 1
  %102 = and i32 %26, %92
  %103 = or i32 %38, %0
  %104 = xor i32 %103, -1
  %105 = or i32 %69, %104
  %106 = or i32 %77, %7
  %107 = xor i32 %29, -1
  %108 = and i32 %56, %107
  %109 = and i32 %94, %92
  %110 = xor i32 %34, -1
  %111 = and i32 %110, %31
  %112 = and i32 %10, %31
  %113 = and i32 %110, %0
  %114 = and i32 %10, %0
  %115 = and i32 %47, %31
  %116 = shl i32 %115, 1
  %117 = mul i32 %33, 17
  %118 = and i32 %47, %0
  %119 = mul i32 %118, 15
  %120 = and i32 %32, %0
  %121 = xor i32 %5, %3
  %122 = xor i32 %121, -1
  %123 = or i32 %12, %4
  %124 = xor i32 %123, -1
  %125 = shl i32 %124, 1
  %126 = or i32 %4, %3
  %127 = and i32 %126, %5
  %128 = xor i32 %5, -1
  %129 = or i32 %128, %4
  %130 = xor i32 %4, %3
  %131 = and i32 %129, %130
  %132 = xor i32 %130, -1
  %133 = xor i32 %5, %4
  %134 = or i32 %133, %132
  %135 = and i32 %123, %5
  %136 = xor i32 %126, %5
  %137 = and i32 %5, %4
  %138 = and i32 %128, %3
  %139 = xor i32 %138, -1
  %140 = xor i32 %137, %139
  %141 = and i32 %128, %4
  %142 = or i32 %141, %3
  %143 = xor i32 %4, -1
  %144 = or i32 %18, %143
  %145 = shl i32 %144, 1
  %146 = and i32 %128, %132
  %147 = and i32 %5, %3
  %148 = and i32 %147, %4
  %149 = xor i32 %18, %4
  %150 = or i32 %148, %149
  %151 = or i32 %137, %132
  %152 = or i32 %5, %4
  %153 = xor i32 %152, -1
  %154 = add i32 %152, 1
  %155 = or i32 %128, %3
  %156 = xor i32 %155, -1
  %157 = or i32 %156, %143
  %158 = xor i32 %13, -1
  %159 = xor i32 %133, -1
  %160 = and i32 %159, %158
  %161 = xor i32 %126, -1
  %162 = xor i32 %161, %5
  %163 = or i32 %159, %124
  %164 = or i32 %153, %12
  %165 = and i32 %128, %158
  %166 = and i32 %12, %5
  %167 = and i32 %166, %4
  %168 = xor i32 %121, %4
  %169 = xor i32 %168, -1
  %170 = xor i32 %167, %169
  %171 = xor i32 %17, -1
  %172 = and i32 %133, %171
  %173 = and i32 %123, %128
  %174 = and i32 %166, %143
  %175 = or i32 %121, %143
  %176 = xor i32 %175, 2147483647
  %177 = or i32 %176, %174
  %178 = shl i32 %177, 1
  %179 = or i32 %156, %4
  %180 = shl i32 %179, 1
  %181 = or i32 %17, %5
  %182 = or i32 %121, %17
  %183 = xor i32 %129, -1
  %184 = xor i32 %183, %3
  %185 = shl i32 %184, 1
  %186 = xor i32 %147, -1
  %187 = xor i32 %186, %4
  %188 = or i32 %133, %130
  %189 = and i32 %18, %143
  %190 = xor i32 %189, -1
  %191 = xor i32 %148, %190
  %192 = or i32 %137, %12
  %193 = or i32 %186, %143
  %194 = or i32 %121, %124
  %195 = xor i32 %152, %17
  %196 = xor i32 %137, %123
  %197 = xor i32 %18, %17
  %198 = xor i32 %137, -1
  %199 = xor i32 %198, %3
  %200 = and i32 %129, %132
  %201 = or i32 %13, %5
  %202 = xor i32 %148, %168
  %203 = shl i32 %137, 1
  %204 = xor i32 %153, %3
  %205 = or i32 %139, %4
  %206 = shl i32 %205, 1
  %207 = or i32 %13, %122
  %208 = or i32 %12, %5
  %209 = xor i32 %208, %143
  %210 = xor i32 %209, %167
  %211 = and i32 %139, %4
  %212 = xor i32 %123, %5
  %213 = or i32 %141, %130
  %214 = and i32 %126, %159
  %215 = or i32 %183, %12
  %216 = shl i32 %161, 1
  %217 = or i32 %128, %124
  %218 = and i32 %126, %122
  %219 = or i32 %130, %159
  %220 = or i32 %17, %153
  %221 = or i32 %147, %4
  %222 = xor i32 %174, %175
  %223 = or i32 %133, %161
  %224 = or i32 %137, %19
  %225 = and i32 %171, %5
  %226 = or i32 %138, %13
  %227 = shl i32 %226, 1
  %228 = add i32 %17, 1
  %229 = and i32 %159, %132
  %230 = and i32 %126, %128
  %231 = or i32 %153, %132
  %232 = and i32 %123, %122
  %233 = and i32 %123, %159
  %234 = and i32 %159, %12
  %235 = and i32 %130, %198
  %236 = shl i32 %235, 1
  %237 = or i32 %155, %4
  %238 = shl i32 %237, 1
  %239 = xor i32 %13, %186
  %240 = or i32 %122, %4
  %241 = xor i32 %148, %240
  %242 = or i32 %121, %4
  %243 = xor i32 %167, %242
  %244 = and i32 %133, %132
  %245 = or i32 %122, %161
  %246 = xor i32 %137, %126
  %247 = and i32 %133, %158
  %248 = or i32 %148, %169
  %249 = or i32 %159, %132
  %250 = and i32 %121, %4
  %251 = and i32 %147, %143
  %252 = xor i32 %250, -1
  %253 = xor i32 %251, %252
  %254 = xor i32 %171, %5
  %255 = and i32 %121, %171
  %256 = or i32 %251, %250
  %257 = or i32 %17, %128
  %258 = xor i32 %19, %4
  %259 = shl i32 %258, 1
  %260 = or i32 %159, %12
  %261 = xor i32 %141, %186
  %262 = xor i32 %156, %4
  %263 = and i32 %139, %143
  %264 = and i32 %122, %4
  %265 = and i32 %122, %158
  %266 = and i32 %198, %3
  %267 = xor i32 %17, %5
  %268 = or i32 %147, %143
  %269 = and i32 %133, %3
  %270 = or i32 %155, %143
  %271 = xor i32 %13, %139
  %272 = or i32 %133, %124
  %273 = or i32 %186, %4
  %274 = and i32 %152, %132
  %275 = xor i32 %158, %5
  %276 = xor i32 %122, %4
  %277 = or i32 %167, %168
  %278 = or i32 %130, %183
  %279 = shl i32 %278, 1
  %280 = or i32 %141, %12
  %281 = xor i32 %137, %18
  %282 = or i32 %137, %130
  %283 = xor i32 %242, -1
  %284 = or i32 %167, %283
  %285 = xor i32 %141, %12
  %286 = and i32 %121, %158
  %287 = or i32 %137, %161
  %288 = or i32 %13, %159
  %289 = and i32 %130, %5
  %290 = or i32 %130, %5
  %291 = and i32 %19, %143
  %292 = mul i32 %291, -10
  %293 = and i32 %138, %143
  %294 = and i32 %19, %4
  %295 = mul i32 %294, -13
  %296 = and i32 %138, %4
  %297 = and i32 %156, %143
  %298 = mul i32 %297, -11
  %299 = and i32 %156, %4
  %300 = add i32 %49, %111
  %301 = sub i32 %262, %300
  %302 = add i32 %301, %264
  %303 = sub i32 %302, %232
  %304 = add i32 %303, %215
  %305 = sub i32 %304, %131
  %306 = mul i32 %305, 3
  %307 = sub i32 %114, %97
  %308 = sub i32 %307, %270
  %309 = add i32 %308, %296
  %310 = mul i32 %309, 5
  %311 = or i32 %112, %113
  %312 = add i32 %311, %152
  %313 = shl i32 %312, 2
  %314 = sub i32 %293, %148
  %315 = mul i32 %314, 6
  %316 = sub i32 %120, %251
  %317 = mul i32 %316, 9
  %318 = sub i32 -2, %3
  %319 = add i32 %318, %102
  %320 = add i32 %319, %57
  %321 = add i32 %320, %41
  %322 = add i32 %321, %186
  %323 = add i32 %322, %254
  %324 = add i32 %323, %201
  %325 = add i32 %324, %162
  %326 = add i32 %325, %282
  %327 = add i32 %326, %273
  %328 = add i32 %327, %245
  %329 = add i32 %328, %239
  %330 = add i32 %329, %164
  %331 = add i32 %330, %163
  %332 = add i32 %331, %222
  %333 = shl i32 %332, 1
  %334 = sub i32 1, %0
  %335 = add i32 %334, %23
  %336 = sub i32 %335, %56
  %337 = sub i32 %336, %42
  %338 = add i32 %337, %53
  %339 = add i32 %338, %64
  %340 = sub i32 %339, %89
  %341 = add i32 %340, %93
  %342 = sub i32 %341, %25
  %343 = sub i32 %342, %30
  %344 = sub i32 %343, %44
  %345 = add i32 %344, %45
  %346 = add i32 %345, %48
  %347 = sub i32 %346, %51
  %348 = add i32 %347, %52
  %349 = add i32 %348, %59
  %350 = sub i32 %349, %60
  %351 = sub i32 %350, %62
  %352 = sub i32 %351, %78
  %353 = add i32 %352, %79
  %354 = add i32 %353, %82
  %355 = sub i32 %354, %84
  %356 = sub i32 %355, %86
  %357 = add i32 %356, %87
  %358 = add i32 %357, %88
  %359 = sub i32 %358, %91
  %360 = sub i32 %359, %96
  %361 = sub i32 %360, %99
  %362 = sub i32 %361, %106
  %363 = sub i32 %362, %108
  %364 = add i32 %363, %109
  %365 = sub i32 %364, %4
  %366 = sub i32 %365, %28
  %367 = add i32 %366, %37
  %368 = add i32 %367, %40
  %369 = add i32 %368, %68
  %370 = add i32 %369, %72
  %371 = sub i32 %370, %74
  %372 = sub i32 %371, %76
  %373 = add i32 %372, %81
  %374 = sub i32 %373, %101
  %375 = add i32 %374, %105
  %376 = sub i32 %375, %116
  %377 = add i32 %376, %117
  %378 = add i32 %377, %119
  %379 = add i32 %378, %17
  %380 = sub i32 %379, %13
  %381 = add i32 %380, %228
  %382 = add i32 %381, %5
  %383 = add i32 %382, %122
  %384 = sub i32 %383, %125
  %385 = add i32 %384, %127
  %386 = sub i32 %385, %135
  %387 = sub i32 %386, %136
  %388 = sub i32 %387, %146
  %389 = add i32 %388, %154
  %390 = sub i32 %389, %165
  %391 = sub i32 %390, %173
  %392 = add i32 %391, %181
  %393 = sub i32 %392, %133
  %394 = add i32 %393, %212
  %395 = sub i32 %394, %216
  %396 = add i32 %395, %217
  %397 = sub i32 %396, %141
  %398 = sub i32 %397, %225
  %399 = add i32 %398, %183
  %400 = sub i32 %399, %230
  %401 = sub i32 %400, %147
  %402 = sub i32 %401, %138
  %403 = add i32 %402, %257
  %404 = add i32 %403, %198
  %405 = sub i32 %404, %267
  %406 = add i32 %405, %275
  %407 = add i32 %406, %289
  %408 = add i32 %407, %290
  %409 = add i32 %408, %134
  %410 = add i32 %409, %140
  %411 = sub i32 %410, %142
  %412 = sub i32 %411, %151
  %413 = sub i32 %412, %157
  %414 = add i32 %413, %160
  %415 = sub i32 %414, %172
  %416 = sub i32 %415, %182
  %417 = sub i32 %416, %187
  %418 = add i32 %417, %188
  %419 = sub i32 %418, %192
  %420 = sub i32 %419, %193
  %421 = sub i32 %420, %194
  %422 = add i32 %421, %195
  %423 = add i32 %422, %196
  %424 = sub i32 %423, %189
  %425 = add i32 %424, %197
  %426 = add i32 %425, %199
  %427 = sub i32 %426, %200
  %428 = sub i32 %427, %203
  %429 = add i32 %428, %204
  %430 = sub i32 %429, %207
  %431 = sub i32 %430, %211
  %432 = add i32 %431, %213
  %433 = sub i32 %432, %214
  %434 = sub i32 %433, %218
  %435 = sub i32 %434, %219
  %436 = sub i32 %435, %220
  %437 = sub i32 %436, %221
  %438 = add i32 %437, %223
  %439 = add i32 %438, %224
  %440 = sub i32 %439, %229
  %441 = add i32 %440, %231
  %442 = add i32 %441, %233
  %443 = sub i32 %442, %234
  %444 = sub i32 %443, %244
  %445 = add i32 %444, %246
  %446 = sub i32 %445, %247
  %447 = add i32 %446, %249
  %448 = sub i32 %447, %250
  %449 = sub i32 %448, %255
  %450 = sub i32 %449, %260
  %451 = add i32 %450, %261
  %452 = add i32 %451, %263
  %453 = add i32 %452, %265
  %454 = add i32 %453, %266
  %455 = sub i32 %454, %240
  %456 = sub i32 %455, %268
  %457 = sub i32 %456, %269
  %458 = sub i32 %457, %271
  %459 = add i32 %458, %272
  %460 = add i32 %459, %274
  %461 = sub i32 %460, %276
  %462 = add i32 %461, %280
  %463 = sub i32 %462, %281
  %464 = add i32 %463, %175
  %465 = sub i32 %464, %285
  %466 = add i32 %465, %286
  %467 = add i32 %466, %287
  %468 = add i32 %467, %288
  %469 = add i32 %468, %149
  %470 = sub i32 %469, %299
  %471 = sub i32 %470, %145
  %472 = sub i32 %471, %150
  %473 = sub i32 %472, %170
  %474 = sub i32 %473, %180
  %475 = sub i32 %474, %185
  %476 = add i32 %475, %191
  %477 = sub i32 %476, %202
  %478 = sub i32 %477, %206
  %479 = add i32 %478, %210
  %480 = sub i32 %479, %227
  %481 = sub i32 %480, %236
  %482 = sub i32 %481, %238
  %483 = sub i32 %482, %241
  %484 = add i32 %483, %243
  %485 = sub i32 %484, %248
  %486 = add i32 %485, %253
  %487 = add i32 %486, %256
  %488 = sub i32 %487, %259
  %489 = sub i32 %488, %277
  %490 = sub i32 %489, %279
  %491 = add i32 %490, %284
  %492 = add i32 %491, %292
  %493 = add i32 %492, %295
  %494 = add i32 %493, %298
  %495 = add i32 %494, %313
  %496 = add i32 %495, %315
  %497 = add i32 %496, %317
  %498 = sub i32 %497, %178
  %499 = add i32 %498, %310
  %500 = add i32 %499, %306
  %501 = add i32 %500, %333
  %502 = icmp eq i32 %22, %501
  %503 = select i1 %502, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %504 = tail call i32 @puts(i8* nonnull dereferenceable(1) %503)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
