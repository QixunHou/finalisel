digraph "DFG for'main' function" {
	Node0x1e4f378[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1e4f3f8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1e4f488[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1e4f8e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1e4f9c8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1e4fae8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1e4fd20[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1e4fdd8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1e50d48[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1e513d0[shape=record, label="  %8 = mul i32 %7, -2"];
	Node0x1e51440[shape=record, label="  %9 = xor i32 %6, 2147483647"];
	Node0x1e514b0[shape=record, label="  %10 = and i32 %9, %7"];
	Node0x1e51520[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1e51590[shape=record, label="  %12 = xor i32 %7, %6"];
	Node0x1e51600[shape=record, label="  %13 = add i32 %7, %6"];
	Node0x1e51670[shape=record, label="  %14 = sub i32 %12, %13"];
	Node0x1e516e0[shape=record, label="  %15 = sub i32 %14, %11"];
	Node0x1e51750[shape=record, label="  %16 = icmp eq i32 %8, %15"];
	Node0x1df09d8[shape=record, label="  %17 = select i1 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e517e0[shape=record, label="  %18 = call i32 @puts(i8* nonnull dereferenceable(1) %17) #5"];
	Node0x1e51a38[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1e51b98[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1e51c58[shape=record, label="  ret i32 0"];
	Node0x1e4f378 -> Node0x1e4f3f8;
	Node0x1e4f3f8 -> Node0x1e4f488;
	Node0x1e4f488 -> Node0x1e4f8e8;
	Node0x1e4f8e8 -> Node0x1e4f9c8;
	Node0x1e4f9c8 -> Node0x1e4fae8;
	Node0x1e4fae8 -> Node0x1e4fd20;
	Node0x1e4fd20 -> Node0x1e4fdd8;
	Node0x1e4fdd8 -> Node0x1e50d48;
	Node0x1e50d48 -> Node0x1e513d0;
	Node0x1e513d0 -> Node0x1e51440;
	Node0x1e51440 -> Node0x1e514b0;
	Node0x1e514b0 -> Node0x1e51520;
	Node0x1e51520 -> Node0x1e51590;
	Node0x1e51590 -> Node0x1e51600;
	Node0x1e51600 -> Node0x1e51670;
	Node0x1e51670 -> Node0x1e516e0;
	Node0x1e516e0 -> Node0x1e51750;
	Node0x1e51750 -> Node0x1df09d8;
	Node0x1df09d8 -> Node0x1e517e0;
	Node0x1e517e0 -> Node0x1e51a38;
	Node0x1e51a38 -> Node0x1e51b98;
	Node0x1e51b98 -> Node0x1e51c58;
edge [color=red]
	Node0x1e4f378 -> Node0x1e4f488;
	Node0x1e4f488 -> Node0x1e4f8e8;
	Node0x1e4f3f8 -> Node0x1e4f9c8;
	Node0x1e4f9c8 -> Node0x1e4fae8;
	Node0x1e4f378 -> Node0x1e4fd20;
	Node0x1e4f3f8 -> Node0x1e4fd20;
	Node0x1e4f378 -> Node0x1e4fdd8;
	Node0x1e4f3f8 -> Node0x1e50d48;
	Node0x1e50d48 -> Node0x1e513d0;
	Node0x1e4fdd8 -> Node0x1e51440;
	Node0x1e51440 -> Node0x1e514b0;
	Node0x1e50d48 -> Node0x1e514b0;
	Node0x1e514b0 -> Node0x1e51520;
	Node0x1e50d48 -> Node0x1e51590;
	Node0x1e4fdd8 -> Node0x1e51590;
	Node0x1e50d48 -> Node0x1e51600;
	Node0x1e4fdd8 -> Node0x1e51600;
	Node0x1e51590 -> Node0x1e51670;
	Node0x1e51600 -> Node0x1e51670;
	Node0x1e51670 -> Node0x1e516e0;
	Node0x1e51520 -> Node0x1e516e0;
	Node0x1e513d0 -> Node0x1e51750;
	Node0x1e516e0 -> Node0x1e51750;
	Node0x1e51750 -> Node0x1df09d8;
	Node0x1df09d8 -> Node0x1e517e0;
	Node0x1e4f9c8 -> Node0x1e51a38;
	Node0x1e4f488 -> Node0x1e51b98;
}
