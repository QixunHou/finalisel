digraph "DFG for'crackme' function" {
	Node0x5ed510[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x5edbc0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x5edc80[shape=record, label="  %5 = sub i32 %4, %0"];
	Node0x5edcf0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x5edd60[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x5eddd0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x5ede40[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x5edeb0[shape=record, label="  %10 = mul i32 %9, 3"];
	Node0x5edf20[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0x5edfc0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x5ee030[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x5ee0a0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x5ee140[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x5ee1e0[shape=record, label="  %16 = shl i32 %7, 2"];
	Node0x5ee250[shape=record, label="  %17 = add i32 %10, 1"];
	Node0x5ee2c0[shape=record, label="  %18 = add i32 %17, %1"];
	Node0x5ee330[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x5ee3a0[shape=record, label="  %20 = sub i32 %19, %13"];
	Node0x5ee410[shape=record, label="  %21 = sub i32 %20, %3"];
	Node0x5ee480[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0x5ee4f0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x5ee560[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x5ee5d0[shape=record, label="  %25 = icmp eq i32 %5, %24"];
	Node0x58e268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x5eea70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x5eeac0[shape=record, label="  ret void"];
	Node0x5ed510 -> Node0x5edbc0;
	Node0x5edbc0 -> Node0x5edc80;
	Node0x5edc80 -> Node0x5edcf0;
	Node0x5edcf0 -> Node0x5edd60;
	Node0x5edd60 -> Node0x5eddd0;
	Node0x5eddd0 -> Node0x5ede40;
	Node0x5ede40 -> Node0x5edeb0;
	Node0x5edeb0 -> Node0x5edf20;
	Node0x5edf20 -> Node0x5edfc0;
	Node0x5edfc0 -> Node0x5ee030;
	Node0x5ee030 -> Node0x5ee0a0;
	Node0x5ee0a0 -> Node0x5ee140;
	Node0x5ee140 -> Node0x5ee1e0;
	Node0x5ee1e0 -> Node0x5ee250;
	Node0x5ee250 -> Node0x5ee2c0;
	Node0x5ee2c0 -> Node0x5ee330;
	Node0x5ee330 -> Node0x5ee3a0;
	Node0x5ee3a0 -> Node0x5ee410;
	Node0x5ee410 -> Node0x5ee480;
	Node0x5ee480 -> Node0x5ee4f0;
	Node0x5ee4f0 -> Node0x5ee560;
	Node0x5ee560 -> Node0x5ee5d0;
	Node0x5ee5d0 -> Node0x58e268;
	Node0x58e268 -> Node0x5eea70;
	Node0x5eea70 -> Node0x5eeac0;
edge [color=red]
	Node0x5ed510 -> Node0x5edbc0;
	Node0x5edbc0 -> Node0x5edc80;
	Node0x5edcf0 -> Node0x5edd60;
	Node0x5edd60 -> Node0x5eddd0;
	Node0x5ede40 -> Node0x5edeb0;
	Node0x5edf20 -> Node0x5edfc0;
	Node0x5ee030 -> Node0x5ee0a0;
	Node0x5ee0a0 -> Node0x5ee140;
	Node0x5edd60 -> Node0x5ee1e0;
	Node0x5edeb0 -> Node0x5ee250;
	Node0x5ee250 -> Node0x5ee2c0;
	Node0x5ee2c0 -> Node0x5ee330;
	Node0x5eddd0 -> Node0x5ee330;
	Node0x5ee330 -> Node0x5ee3a0;
	Node0x5ee030 -> Node0x5ee3a0;
	Node0x5ee3a0 -> Node0x5ee410;
	Node0x5ed510 -> Node0x5ee410;
	Node0x5ee410 -> Node0x5ee480;
	Node0x5edfc0 -> Node0x5ee480;
	Node0x5ee480 -> Node0x5ee4f0;
	Node0x5ee1e0 -> Node0x5ee4f0;
	Node0x5ee4f0 -> Node0x5ee560;
	Node0x5ee140 -> Node0x5ee560;
	Node0x5edc80 -> Node0x5ee5d0;
	Node0x5ee560 -> Node0x5ee5d0;
	Node0x5ee5d0 -> Node0x58e268;
	Node0x58e268 -> Node0x5eea70;
}
