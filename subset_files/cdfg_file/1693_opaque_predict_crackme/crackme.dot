digraph "DFG for'crackme' function" {
	Node0xe525a0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0xe52c50[shape=record, label="  %4 = sub i32 0, %3"];
	Node0xe52d10[shape=record, label="  %5 = mul i32 %1, 5"];
	Node0xe52db0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0xe52e20[shape=record, label="  %7 = or i32 %6, %0"];
	Node0xe52e90[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xe52f00[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0xe52f70[shape=record, label="  %10 = xor i32 %0, -1"];
	Node0xe52fe0[shape=record, label="  %11 = or i32 %10, %1"];
	Node0xe53050[shape=record, label="  %12 = xor i32 %1, %0"];
	Node0xe530f0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0xe53190[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0xe53200[shape=record, label="  %15 = xor i32 %3, -1"];
	Node0xe532a0[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0xe53340[shape=record, label="  %17 = shl i32 %7, 3"];
	Node0xe533e0[shape=record, label="  %18 = xor i32 %17, -8"];
	Node0xe53480[shape=record, label="  %19 = mul i32 %8, -7"];
	Node0xe534f0[shape=record, label="  %20 = add i32 %7, %0"];
	Node0xe53560[shape=record, label="  %21 = sub i32 %5, %20"];
	Node0xe535d0[shape=record, label="  %22 = add i32 %21, %9"];
	Node0xe53640[shape=record, label="  %23 = add i32 %22, %11"];
	Node0xe536b0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0xe53720[shape=record, label="  %25 = add i32 %24, %19"];
	Node0xe53790[shape=record, label="  %26 = add i32 %25, %14"];
	Node0xe53800[shape=record, label="  %27 = sub i32 %26, %18"];
	Node0xe53870[shape=record, label="  %28 = icmp eq i32 %27, %4"];
	Node0xdf3268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xe53d10[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xe53d60[shape=record, label="  ret void"];
	Node0xe525a0 -> Node0xe52c50;
	Node0xe52c50 -> Node0xe52d10;
	Node0xe52d10 -> Node0xe52db0;
	Node0xe52db0 -> Node0xe52e20;
	Node0xe52e20 -> Node0xe52e90;
	Node0xe52e90 -> Node0xe52f00;
	Node0xe52f00 -> Node0xe52f70;
	Node0xe52f70 -> Node0xe52fe0;
	Node0xe52fe0 -> Node0xe53050;
	Node0xe53050 -> Node0xe530f0;
	Node0xe530f0 -> Node0xe53190;
	Node0xe53190 -> Node0xe53200;
	Node0xe53200 -> Node0xe532a0;
	Node0xe532a0 -> Node0xe53340;
	Node0xe53340 -> Node0xe533e0;
	Node0xe533e0 -> Node0xe53480;
	Node0xe53480 -> Node0xe534f0;
	Node0xe534f0 -> Node0xe53560;
	Node0xe53560 -> Node0xe535d0;
	Node0xe535d0 -> Node0xe53640;
	Node0xe53640 -> Node0xe536b0;
	Node0xe536b0 -> Node0xe53720;
	Node0xe53720 -> Node0xe53790;
	Node0xe53790 -> Node0xe53800;
	Node0xe53800 -> Node0xe53870;
	Node0xe53870 -> Node0xdf3268;
	Node0xdf3268 -> Node0xe53d10;
	Node0xe53d10 -> Node0xe53d60;
edge [color=red]
	Node0xe525a0 -> Node0xe52c50;
	Node0xe52db0 -> Node0xe52e20;
	Node0xe52e90 -> Node0xe52f00;
	Node0xe52f70 -> Node0xe52fe0;
	Node0xe53050 -> Node0xe530f0;
	Node0xe530f0 -> Node0xe53190;
	Node0xe525a0 -> Node0xe53200;
	Node0xe53200 -> Node0xe532a0;
	Node0xe52e20 -> Node0xe53340;
	Node0xe53340 -> Node0xe533e0;
	Node0xe52e90 -> Node0xe53480;
	Node0xe52e20 -> Node0xe534f0;
	Node0xe52d10 -> Node0xe53560;
	Node0xe534f0 -> Node0xe53560;
	Node0xe53560 -> Node0xe535d0;
	Node0xe52f00 -> Node0xe535d0;
	Node0xe535d0 -> Node0xe53640;
	Node0xe52fe0 -> Node0xe53640;
	Node0xe53640 -> Node0xe536b0;
	Node0xe532a0 -> Node0xe536b0;
	Node0xe536b0 -> Node0xe53720;
	Node0xe53480 -> Node0xe53720;
	Node0xe53720 -> Node0xe53790;
	Node0xe53190 -> Node0xe53790;
	Node0xe53790 -> Node0xe53800;
	Node0xe533e0 -> Node0xe53800;
	Node0xe53800 -> Node0xe53870;
	Node0xe52c50 -> Node0xe53870;
	Node0xe53870 -> Node0xdf3268;
	Node0xdf3268 -> Node0xe53d10;
}
