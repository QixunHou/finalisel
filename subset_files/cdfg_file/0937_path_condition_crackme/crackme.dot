digraph "DFG for'crackme' function" {
	Node0x22f1b70[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x22f21f0[shape=record, label="  %6 = sub i32 1, %5"];
	Node0x22f2260[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x22f22d0[shape=record, label="  %8 = add i32 %6, %7"];
	Node0x22f2340[shape=record, label="  %9 = and i32 %2, %1"];
	Node0x22f23e0[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0x22f2450[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x22f24c0[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x22f2530[shape=record, label="  %13 = and i32 %11, %1"];
	Node0x22f25d0[shape=record, label="  %14 = shl i32 %9, 2"];
	Node0x22f2640[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x22f26b0[shape=record, label="  %16 = xor i32 %3, -1"];
	Node0x22f2720[shape=record, label="  %17 = or i32 %16, %0"];
	Node0x22f2790[shape=record, label="  %18 = or i32 %3, %0"];
	Node0x22f2800[shape=record, label="  %19 = or i32 %15, %3"];
	Node0x22f2870[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x22f28e0[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x22f2950[shape=record, label="  %22 = shl i32 %0, 2"];
	Node0x22f29c0[shape=record, label="  %23 = shl i32 %3, 2"];
	Node0x22f2a60[shape=record, label="  %24 = xor i32 %23, -4"];
	Node0x22f2ad0[shape=record, label="  %25 = xor i32 %19, -1"];
	Node0x22f2b70[shape=record, label="  %26 = mul i32 %25, 3"];
	Node0x22f2c10[shape=record, label="  %27 = mul i32 %3, 6"];
	Node0x22f2c80[shape=record, label="  %28 = add i32 %12, %2"];
	Node0x22f2cf0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x22f2d90[shape=record, label="  %30 = add i32 %0, 7"];
	Node0x22f2e00[shape=record, label="  %31 = add i32 %30, %1"];
	Node0x22f2e70[shape=record, label="  %32 = sub i32 %31, %22"];
	Node0x22f30f0[shape=record, label="  %33 = add i32 %32, %9"];
	Node0x22f3160[shape=record, label="  %34 = add i32 %33, %10"];
	Node0x22f31d0[shape=record, label="  %35 = sub i32 %34, %13"];
	Node0x22f3240[shape=record, label="  %36 = add i32 %35, %3"];
	Node0x22f32b0[shape=record, label="  %37 = sub i32 %36, %14"];
	Node0x22f3320[shape=record, label="  %38 = add i32 %37, %17"];
	Node0x22f3390[shape=record, label="  %39 = sub i32 %38, %18"];
	Node0x22f3400[shape=record, label="  %40 = add i32 %39, %21"];
	Node0x22f3470[shape=record, label="  %41 = sub i32 %40, %20"];
	Node0x22f34e0[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x22f3550[shape=record, label="  %43 = add i32 %42, %26"];
	Node0x22f35c0[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x22f3630[shape=record, label="  %45 = add i32 %44, %27"];
	Node0x22f36a0[shape=record, label="  %46 = icmp eq i32 %8, %45"];
	Node0x2292268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x22f3b40[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x22f3b90[shape=record, label="  ret void"];
	Node0x22f1b70 -> Node0x22f21f0;
	Node0x22f21f0 -> Node0x22f2260;
	Node0x22f2260 -> Node0x22f22d0;
	Node0x22f22d0 -> Node0x22f2340;
	Node0x22f2340 -> Node0x22f23e0;
	Node0x22f23e0 -> Node0x22f2450;
	Node0x22f2450 -> Node0x22f24c0;
	Node0x22f24c0 -> Node0x22f2530;
	Node0x22f2530 -> Node0x22f25d0;
	Node0x22f25d0 -> Node0x22f2640;
	Node0x22f2640 -> Node0x22f26b0;
	Node0x22f26b0 -> Node0x22f2720;
	Node0x22f2720 -> Node0x22f2790;
	Node0x22f2790 -> Node0x22f2800;
	Node0x22f2800 -> Node0x22f2870;
	Node0x22f2870 -> Node0x22f28e0;
	Node0x22f28e0 -> Node0x22f2950;
	Node0x22f2950 -> Node0x22f29c0;
	Node0x22f29c0 -> Node0x22f2a60;
	Node0x22f2a60 -> Node0x22f2ad0;
	Node0x22f2ad0 -> Node0x22f2b70;
	Node0x22f2b70 -> Node0x22f2c10;
	Node0x22f2c10 -> Node0x22f2c80;
	Node0x22f2c80 -> Node0x22f2cf0;
	Node0x22f2cf0 -> Node0x22f2d90;
	Node0x22f2d90 -> Node0x22f2e00;
	Node0x22f2e00 -> Node0x22f2e70;
	Node0x22f2e70 -> Node0x22f30f0;
	Node0x22f30f0 -> Node0x22f3160;
	Node0x22f3160 -> Node0x22f31d0;
	Node0x22f31d0 -> Node0x22f3240;
	Node0x22f3240 -> Node0x22f32b0;
	Node0x22f32b0 -> Node0x22f3320;
	Node0x22f3320 -> Node0x22f3390;
	Node0x22f3390 -> Node0x22f3400;
	Node0x22f3400 -> Node0x22f3470;
	Node0x22f3470 -> Node0x22f34e0;
	Node0x22f34e0 -> Node0x22f3550;
	Node0x22f3550 -> Node0x22f35c0;
	Node0x22f35c0 -> Node0x22f3630;
	Node0x22f3630 -> Node0x22f36a0;
	Node0x22f36a0 -> Node0x2292268;
	Node0x2292268 -> Node0x22f3b40;
	Node0x22f3b40 -> Node0x22f3b90;
edge [color=red]
	Node0x22f1b70 -> Node0x22f21f0;
	Node0x22f21f0 -> Node0x22f22d0;
	Node0x22f2260 -> Node0x22f22d0;
	Node0x22f1b70 -> Node0x22f23e0;
	Node0x22f2450 -> Node0x22f24c0;
	Node0x22f2450 -> Node0x22f2530;
	Node0x22f2340 -> Node0x22f25d0;
	Node0x22f26b0 -> Node0x22f2720;
	Node0x22f2640 -> Node0x22f2800;
	Node0x22f2800 -> Node0x22f2870;
	Node0x22f29c0 -> Node0x22f2a60;
	Node0x22f2800 -> Node0x22f2ad0;
	Node0x22f2ad0 -> Node0x22f2b70;
	Node0x22f24c0 -> Node0x22f2c80;
	Node0x22f2c80 -> Node0x22f2cf0;
	Node0x22f2d90 -> Node0x22f2e00;
	Node0x22f2e00 -> Node0x22f2e70;
	Node0x22f2950 -> Node0x22f2e70;
	Node0x22f2e70 -> Node0x22f30f0;
	Node0x22f2340 -> Node0x22f30f0;
	Node0x22f30f0 -> Node0x22f3160;
	Node0x22f23e0 -> Node0x22f3160;
	Node0x22f3160 -> Node0x22f31d0;
	Node0x22f2530 -> Node0x22f31d0;
	Node0x22f31d0 -> Node0x22f3240;
	Node0x22f3240 -> Node0x22f32b0;
	Node0x22f25d0 -> Node0x22f32b0;
	Node0x22f32b0 -> Node0x22f3320;
	Node0x22f2720 -> Node0x22f3320;
	Node0x22f3320 -> Node0x22f3390;
	Node0x22f2790 -> Node0x22f3390;
	Node0x22f3390 -> Node0x22f3400;
	Node0x22f28e0 -> Node0x22f3400;
	Node0x22f3400 -> Node0x22f3470;
	Node0x22f2870 -> Node0x22f3470;
	Node0x22f3470 -> Node0x22f34e0;
	Node0x22f2a60 -> Node0x22f34e0;
	Node0x22f34e0 -> Node0x22f3550;
	Node0x22f2b70 -> Node0x22f3550;
	Node0x22f3550 -> Node0x22f35c0;
	Node0x22f2cf0 -> Node0x22f35c0;
	Node0x22f35c0 -> Node0x22f3630;
	Node0x22f2c10 -> Node0x22f3630;
	Node0x22f22d0 -> Node0x22f36a0;
	Node0x22f3630 -> Node0x22f36a0;
	Node0x22f36a0 -> Node0x2292268;
	Node0x2292268 -> Node0x22f3b40;
}
