; ModuleID = '../.././c_source_file/1535_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1535_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = xor i32 %4, %3
  %9 = shl i32 %8, 1
  %10 = and i32 %2, %1
  %11 = xor i32 %10, -1
  %12 = or i32 %11, %0
  %13 = sub i32 1, %12
  %14 = add i32 %13, %7
  %15 = add i32 %14, %9
  %16 = xor i32 %3, -1
  %17 = or i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %18, -2
  %20 = and i32 %16, %4
  %21 = and i32 %4, %3
  %22 = xor i32 %2, -1
  %23 = or i32 %22, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %1
  %26 = and i32 %22, %1
  %27 = xor i32 %26, -1
  %28 = xor i32 %27, %0
  %29 = or i32 %1, %0
  %30 = xor i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %29, %31
  %33 = xor i32 %1, -1
  %34 = and i32 %33, %0
  %35 = xor i32 %34, -1
  %36 = and i32 %35, %2
  %37 = xor i32 %29, -1
  %38 = or i32 %22, %37
  %39 = xor i32 %1, %0
  %40 = or i32 %39, %2
  %41 = xor i32 %11, %0
  %42 = xor i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %37
  %45 = shl i32 %44, 1
  %46 = or i32 %33, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %42, %47
  %49 = or i32 %30, %39
  %50 = and i32 %42, %29
  %51 = and i32 %46, %43
  %52 = and i32 %1, %0
  %53 = xor i32 %52, %2
  %54 = or i32 %52, %22
  %55 = and i32 %2, %0
  %56 = xor i32 %55, %27
  %57 = xor i32 %0, -1
  %58 = or i32 %27, %57
  %59 = add i32 %23, 1
  %60 = xor i32 %52, -1
  %61 = xor i32 %39, -1
  %62 = or i32 %24, %61
  %63 = or i32 %22, %1
  %64 = and i32 %63, %0
  %65 = or i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = or i32 %66, %1
  %68 = and i32 %10, %0
  %69 = xor i32 %42, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %68, %70
  %72 = and i32 %42, %46
  %73 = shl i32 %72, 1
  %74 = or i32 %39, %24
  %75 = and i32 %22, %0
  %76 = xor i32 %75, -1
  %77 = and i32 %39, %76
  %78 = and i32 %42, %57
  %79 = or i32 %30, %1
  %80 = shl i32 %79, 1
  %81 = and i32 %33, %2
  %82 = and i32 %81, %0
  %83 = or i32 %33, %2
  %84 = and i32 %83, %57
  %85 = xor i32 %84, -1
  %86 = xor i32 %82, %85
  %87 = or i32 %2, %1
  %88 = xor i32 %55, %87
  %89 = and i32 %61, %2
  %90 = xor i32 %87, %52
  %91 = or i32 %34, %31
  %92 = and i32 %76, %1
  %93 = or i32 %66, %61
  %94 = xor i32 %55, -1
  %95 = and i32 %94, %33
  %96 = or i32 %30, %37
  %97 = shl i32 %96, 1
  %98 = xor i32 %82, %70
  %99 = or i32 %37, %2
  %100 = xor i32 %68, -1
  %101 = xor i32 %78, %100
  %102 = and i32 %31, %35
  %103 = shl i32 %102, 1
  %104 = or i32 %30, %52
  %105 = add i32 %30, 1
  %106 = or i32 %31, %1
  %107 = xor i32 %23, %52
  %108 = or i32 %52, %2
  %109 = or i32 %30, %33
  %110 = xor i32 %23, %1
  %111 = or i32 %39, %31
  %112 = or i32 %63, %0
  %113 = and i32 %10, %57
  %114 = and i32 %42, %0
  %115 = xor i32 %113, -1
  %116 = xor i32 %114, %115
  %117 = and i32 %60, %2
  %118 = or i32 %27, %0
  %119 = xor i32 %60, %2
  %120 = or i32 %42, %0
  %121 = shl i32 %39, 1
  %122 = xor i32 %46, %2
  %123 = or i32 %34, %43
  %124 = or i32 %26, %0
  %125 = and i32 %39, %31
  %126 = or i32 %11, %57
  %127 = and i32 %43, %35
  %128 = mul i32 %127, -5
  %129 = or i32 %82, %69
  %130 = add i32 %65, 1
  %131 = and i32 %81, %57
  %132 = and i32 %83, %0
  %133 = or i32 %131, %132
  %134 = xor i32 %34, %2
  %135 = and i32 %87, %57
  %136 = xor i32 %87, -1
  %137 = or i32 %55, %136
  %138 = and i32 %87, %0
  %139 = xor i32 %138, %115
  %140 = xor i32 %37, %2
  %141 = xor i32 %63, -1
  %142 = or i32 %141, %0
  %143 = xor i32 %136, %0
  %144 = and i32 %43, %60
  %145 = shl i32 %144, 1
  %146 = xor i32 %47, %2
  %147 = and i32 %46, %22
  %148 = shl i32 %147, 1
  %149 = xor i32 %63, %52
  %150 = and i32 %42, %35
  %151 = or i32 %87, %57
  %152 = or i32 %52, %24
  %153 = and i32 %23, %61
  %154 = and i32 %29, %43
  %155 = and i32 %29, %2
  %156 = or i32 %31, %47
  %157 = or i32 %61, %2
  %158 = and i32 %46, %31
  %159 = or i32 %10, %34
  %160 = add i32 %46, 1
  %161 = and i32 %30, %29
  %162 = xor i32 %65, %52
  %163 = or i32 %30, %34
  %164 = or i32 %30, %47
  %165 = or i32 %55, %26
  %166 = shl i32 %165, 1
  %167 = add i32 %87, 1
  %168 = or i32 %113, %138
  %169 = and i32 %27, %57
  %170 = or i32 %52, %136
  %171 = xor i32 %82, %120
  %172 = or i32 %82, %84
  %173 = and i32 %31, %1
  %174 = or i32 %113, %114
  %175 = or i32 %22, %47
  %176 = or i32 %42, %57
  %177 = or i32 %52, %43
  %178 = and i32 %94, %1
  %179 = or i32 %75, %33
  %180 = and i32 %31, %60
  %181 = xor i32 %55, %1
  %182 = or i32 %22, %61
  %183 = xor i32 %87, %0
  %184 = shl i32 %183, 1
  %185 = and i32 %23, %1
  %186 = shl i32 %185, 2
  %187 = xor i32 %76, %1
  %188 = and i32 %30, %1
  %189 = add i32 %55, 1
  %190 = or i32 %136, %0
  %191 = and i32 %29, %22
  %192 = xor i32 %183, %100
  %193 = and i32 %30, %46
  %194 = or i32 %55, %61
  %195 = shl i32 %27, 1
  %196 = xor i32 %135, %100
  %197 = or i32 %68, %78
  %198 = xor i32 %35, %2
  %199 = and i32 %39, %22
  %200 = and i32 %11, %0
  %201 = xor i32 %34, %27
  %202 = or i32 %55, %1
  %203 = shl i32 %202, 1
  %204 = and i32 %22, %61
  %205 = shl i32 %204, 1
  %206 = and i32 %27, %0
  %207 = and i32 %136, %57
  %208 = mul i32 %207, -11
  %209 = and i32 %26, %57
  %210 = and i32 %136, %0
  %211 = and i32 %26, %0
  %212 = shl i32 %211, 3
  %213 = and i32 %141, %57
  %214 = shl i32 %213, 2
  %215 = and i32 %141, %0
  %216 = mul i32 %215, -27
  %217 = mul i32 %68, -15
  %218 = add i32 %55, %198
  %219 = sub i32 %218, %3
  %220 = add i32 %219, %113
  %221 = add i32 %220, %194
  %222 = add i32 %221, %180
  %223 = add i32 %222, %177
  %224 = add i32 %223, %162
  %225 = add i32 %224, %149
  %226 = add i32 %225, %123
  %227 = add i32 %226, %109
  %228 = add i32 %227, %92
  %229 = add i32 %228, %21
  %230 = shl i32 %229, 1
  %231 = add i32 %111, %76
  %232 = add i32 %231, %7
  %233 = add i32 %232, %197
  %234 = shl i32 %233, 2
  %235 = sub i32 %151, %170
  %236 = add i32 %235, %32
  %237 = mul i32 %236, 3
  %238 = or i32 %210, %209
  %239 = mul i32 %238, -7
  %240 = sub i32 %60, %1
  %241 = sub i32 %240, %52
  %242 = add i32 %241, %46
  %243 = add i32 %242, %37
  %244 = add i32 %243, %160
  %245 = add i32 %244, %16
  %246 = add i32 %245, %36
  %247 = sub i32 %246, %38
  %248 = add i32 %247, %40
  %249 = add i32 %248, %53
  %250 = add i32 %249, %54
  %251 = add i32 %250, %59
  %252 = add i32 %251, %89
  %253 = sub i32 %252, %99
  %254 = add i32 %253, %105
  %255 = sub i32 %254, %108
  %256 = sub i32 %255, %117
  %257 = add i32 %256, %30
  %258 = add i32 %257, %119
  %259 = sub i32 %258, %121
  %260 = sub i32 %259, %122
  %261 = add i32 %260, %130
  %262 = add i32 %261, %134
  %263 = sub i32 %262, %140
  %264 = sub i32 %263, %65
  %265 = sub i32 %264, %146
  %266 = sub i32 %265, %75
  %267 = add i32 %266, %155
  %268 = sub i32 %267, %157
  %269 = add i32 %268, %167
  %270 = add i32 %269, %175
  %271 = sub i32 %270, %182
  %272 = add i32 %271, %189
  %273 = sub i32 %272, %191
  %274 = add i32 %273, %141
  %275 = add i32 %274, %23
  %276 = add i32 %275, %199
  %277 = add i32 %276, %43
  %278 = sub i32 %277, %4
  %279 = add i32 %278, %25
  %280 = sub i32 %279, %28
  %281 = sub i32 %280, %41
  %282 = sub i32 %281, %48
  %283 = sub i32 %282, %49
  %284 = sub i32 %283, %50
  %285 = add i32 %284, %51
  %286 = sub i32 %285, %56
  %287 = sub i32 %286, %58
  %288 = sub i32 %287, %62
  %289 = add i32 %288, %64
  %290 = sub i32 %289, %67
  %291 = add i32 %290, %74
  %292 = sub i32 %291, %77
  %293 = sub i32 %292, %78
  %294 = sub i32 %293, %88
  %295 = sub i32 %294, %90
  %296 = add i32 %295, %91
  %297 = add i32 %296, %93
  %298 = sub i32 %297, %95
  %299 = add i32 %298, %104
  %300 = add i32 %299, %106
  %301 = add i32 %300, %107
  %302 = add i32 %301, %110
  %303 = add i32 %302, %112
  %304 = add i32 %303, %118
  %305 = add i32 %304, %120
  %306 = add i32 %305, %124
  %307 = sub i32 %306, %125
  %308 = sub i32 %307, %126
  %309 = add i32 %308, %135
  %310 = sub i32 %309, %137
  %311 = add i32 %310, %142
  %312 = add i32 %311, %143
  %313 = sub i32 %312, %148
  %314 = sub i32 %313, %150
  %315 = sub i32 %314, %152
  %316 = add i32 %315, %153
  %317 = sub i32 %316, %154
  %318 = add i32 %317, %156
  %319 = sub i32 %318, %158
  %320 = sub i32 %319, %159
  %321 = sub i32 %320, %161
  %322 = add i32 %321, %163
  %323 = add i32 %322, %164
  %324 = add i32 %323, %169
  %325 = sub i32 %324, %173
  %326 = add i32 %325, %176
  %327 = add i32 %326, %178
  %328 = sub i32 %327, %179
  %329 = sub i32 %328, %181
  %330 = add i32 %329, %187
  %331 = sub i32 %330, %188
  %332 = add i32 %331, %190
  %333 = sub i32 %332, %193
  %334 = sub i32 %333, %195
  %335 = add i32 %334, %200
  %336 = add i32 %335, %201
  %337 = sub i32 %336, %205
  %338 = add i32 %337, %138
  %339 = add i32 %338, %206
  %340 = add i32 %339, %20
  %341 = sub i32 %340, %45
  %342 = add i32 %341, %71
  %343 = sub i32 %342, %73
  %344 = sub i32 %343, %80
  %345 = sub i32 %344, %86
  %346 = sub i32 %345, %97
  %347 = add i32 %346, %98
  %348 = add i32 %347, %101
  %349 = sub i32 %348, %103
  %350 = add i32 %349, %116
  %351 = add i32 %350, %128
  %352 = add i32 %351, %129
  %353 = add i32 %352, %133
  %354 = sub i32 %353, %139
  %355 = sub i32 %354, %145
  %356 = sub i32 %355, %166
  %357 = sub i32 %356, %168
  %358 = sub i32 %357, %171
  %359 = sub i32 %358, %172
  %360 = sub i32 %359, %174
  %361 = sub i32 %360, %184
  %362 = sub i32 %361, %186
  %363 = add i32 %362, %192
  %364 = add i32 %363, %196
  %365 = sub i32 %364, %203
  %366 = add i32 %365, %208
  %367 = add i32 %366, %212
  %368 = sub i32 %367, %214
  %369 = add i32 %368, %216
  %370 = add i32 %369, %217
  %371 = add i32 %370, %239
  %372 = sub i32 %371, %19
  %373 = add i32 %372, %237
  %374 = add i32 %373, %234
  %375 = add i32 %374, %230
  %376 = icmp eq i32 %15, %375
  %377 = select i1 %376, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %378 = tail call i32 @puts(i8* nonnull dereferenceable(1) %377)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
