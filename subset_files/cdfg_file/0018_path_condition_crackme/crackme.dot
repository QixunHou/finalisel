digraph "DFG for'crackme' function" {
	Node0xd225d0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xd22c80[shape=record, label="  %4 = sub i32 -2, %3"];
	Node0xd22d40[shape=record, label="  %5 = and i32 %1, %0"];
	Node0xd22db0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0xd22e20[shape=record, label="  %7 = or i32 %6, %0"];
	Node0xd22e90[shape=record, label="  %8 = and i32 %6, %0"];
	Node0xd22f30[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0xd22fa0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0xd23010[shape=record, label="  %11 = or i32 %1, %0"];
	Node0xd23080[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0xd230f0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0xd23160[shape=record, label="  %14 = shl i32 %7, 1"];
	Node0xd231d0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xd23270[shape=record, label="  %16 = shl i32 %8, 2"];
	Node0xd23310[shape=record, label="  %17 = mul i32 %5, 5"];
	Node0xd23380[shape=record, label="  %18 = sub i32 1, %0"];
	Node0xd233f0[shape=record, label="  %19 = sub i32 %18, %1"];
	Node0xd23460[shape=record, label="  %20 = add i32 %19, %5"];
	Node0xd234d0[shape=record, label="  %21 = sub i32 %20, %7"];
	Node0xd23540[shape=record, label="  %22 = add i32 %21, %8"];
	Node0xd235b0[shape=record, label="  %23 = add i32 %22, %10"];
	Node0xd23620[shape=record, label="  %24 = sub i32 %23, %3"];
	Node0xd23690[shape=record, label="  %25 = add i32 %24, %16"];
	Node0xd23700[shape=record, label="  %26 = add i32 %25, %17"];
	Node0xd23770[shape=record, label="  %27 = add i32 %26, %13"];
	Node0xd237e0[shape=record, label="  %28 = add i32 %27, %15"];
	Node0xd23850[shape=record, label="  %29 = icmp eq i32 %4, %28"];
	Node0xcc3268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xd23cf0[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0xd23d40[shape=record, label="  ret void"];
	Node0xd225d0 -> Node0xd22c80;
	Node0xd22c80 -> Node0xd22d40;
	Node0xd22d40 -> Node0xd22db0;
	Node0xd22db0 -> Node0xd22e20;
	Node0xd22e20 -> Node0xd22e90;
	Node0xd22e90 -> Node0xd22f30;
	Node0xd22f30 -> Node0xd22fa0;
	Node0xd22fa0 -> Node0xd23010;
	Node0xd23010 -> Node0xd23080;
	Node0xd23080 -> Node0xd230f0;
	Node0xd230f0 -> Node0xd23160;
	Node0xd23160 -> Node0xd231d0;
	Node0xd231d0 -> Node0xd23270;
	Node0xd23270 -> Node0xd23310;
	Node0xd23310 -> Node0xd23380;
	Node0xd23380 -> Node0xd233f0;
	Node0xd233f0 -> Node0xd23460;
	Node0xd23460 -> Node0xd234d0;
	Node0xd234d0 -> Node0xd23540;
	Node0xd23540 -> Node0xd235b0;
	Node0xd235b0 -> Node0xd23620;
	Node0xd23620 -> Node0xd23690;
	Node0xd23690 -> Node0xd23700;
	Node0xd23700 -> Node0xd23770;
	Node0xd23770 -> Node0xd237e0;
	Node0xd237e0 -> Node0xd23850;
	Node0xd23850 -> Node0xcc3268;
	Node0xcc3268 -> Node0xd23cf0;
	Node0xd23cf0 -> Node0xd23d40;
edge [color=red]
	Node0xd225d0 -> Node0xd22c80;
	Node0xd22db0 -> Node0xd22e20;
	Node0xd22db0 -> Node0xd22e90;
	Node0xd22f30 -> Node0xd22fa0;
	Node0xd23010 -> Node0xd23080;
	Node0xd23080 -> Node0xd230f0;
	Node0xd22e20 -> Node0xd23160;
	Node0xd23160 -> Node0xd231d0;
	Node0xd22e90 -> Node0xd23270;
	Node0xd22d40 -> Node0xd23310;
	Node0xd23380 -> Node0xd233f0;
	Node0xd233f0 -> Node0xd23460;
	Node0xd22d40 -> Node0xd23460;
	Node0xd23460 -> Node0xd234d0;
	Node0xd22e20 -> Node0xd234d0;
	Node0xd234d0 -> Node0xd23540;
	Node0xd22e90 -> Node0xd23540;
	Node0xd23540 -> Node0xd235b0;
	Node0xd22fa0 -> Node0xd235b0;
	Node0xd235b0 -> Node0xd23620;
	Node0xd225d0 -> Node0xd23620;
	Node0xd23620 -> Node0xd23690;
	Node0xd23270 -> Node0xd23690;
	Node0xd23690 -> Node0xd23700;
	Node0xd23310 -> Node0xd23700;
	Node0xd23700 -> Node0xd23770;
	Node0xd230f0 -> Node0xd23770;
	Node0xd23770 -> Node0xd237e0;
	Node0xd231d0 -> Node0xd237e0;
	Node0xd22c80 -> Node0xd23850;
	Node0xd237e0 -> Node0xd23850;
	Node0xd23850 -> Node0xcc3268;
	Node0xcc3268 -> Node0xd23cf0;
}
