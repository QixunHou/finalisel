digraph "DFG for'main' function" {
	Node0xd23f08[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xd23f88[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xd24018[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0xd24478[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0xd24558[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0xd24678[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xd248b0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0xd24968[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xd258d8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xd25f60[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0xd25fd0[shape=record, label="  %9 = sub i32 -2, %8"];
	Node0xd26040[shape=record, label="  %10 = and i32 %7, %6"];
	Node0xd260b0[shape=record, label="  %11 = xor i32 %7, -1"];
	Node0xd26120[shape=record, label="  %12 = or i32 %6, %11"];
	Node0xd26190[shape=record, label="  %13 = and i32 %6, %11"];
	Node0xd26200[shape=record, label="  %14 = shl i32 %6, 1"];
	Node0xd26270[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xd262e0[shape=record, label="  %16 = or i32 %7, %6"];
	Node0xd26350[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0xd263c0[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0xd26430[shape=record, label="  %19 = shl i32 %12, 1"];
	Node0xd264a0[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0xd26510[shape=record, label="  %21 = shl i32 %13, 2"];
	Node0xd26580[shape=record, label="  %22 = mul i32 %10, 5"];
	Node0xd265f0[shape=record, label="  %23 = sub i32 1, %6"];
	Node0xd26660[shape=record, label="  %24 = sub i32 %23, %7"];
	Node0xd266d0[shape=record, label="  %25 = add i32 %24, %10"];
	Node0xd26740[shape=record, label="  %26 = sub i32 %25, %12"];
	Node0xd267b0[shape=record, label="  %27 = add i32 %26, %13"];
	Node0xd26820[shape=record, label="  %28 = add i32 %27, %15"];
	Node0xd26890[shape=record, label="  %29 = sub i32 %28, %8"];
	Node0xd26900[shape=record, label="  %30 = add i32 %29, %21"];
	Node0xd26970[shape=record, label="  %31 = add i32 %30, %22"];
	Node0xd269e0[shape=record, label="  %32 = add i32 %31, %18"];
	Node0xd26c60[shape=record, label="  %33 = add i32 %32, %20"];
	Node0xd26cd0[shape=record, label="  %34 = icmp eq i32 %9, %33"];
	Node0xcc49d8[shape=record, label="  %35 = select i1 %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xd26d60[shape=record, label="  %36 = call i32 @puts(i8* nonnull dereferenceable(1) %35) #5"];
	Node0xd26fb8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xd27118[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0xd271d8[shape=record, label="  ret i32 0"];
	Node0xd23f08 -> Node0xd23f88;
	Node0xd23f88 -> Node0xd24018;
	Node0xd24018 -> Node0xd24478;
	Node0xd24478 -> Node0xd24558;
	Node0xd24558 -> Node0xd24678;
	Node0xd24678 -> Node0xd248b0;
	Node0xd248b0 -> Node0xd24968;
	Node0xd24968 -> Node0xd258d8;
	Node0xd258d8 -> Node0xd25f60;
	Node0xd25f60 -> Node0xd25fd0;
	Node0xd25fd0 -> Node0xd26040;
	Node0xd26040 -> Node0xd260b0;
	Node0xd260b0 -> Node0xd26120;
	Node0xd26120 -> Node0xd26190;
	Node0xd26190 -> Node0xd26200;
	Node0xd26200 -> Node0xd26270;
	Node0xd26270 -> Node0xd262e0;
	Node0xd262e0 -> Node0xd26350;
	Node0xd26350 -> Node0xd263c0;
	Node0xd263c0 -> Node0xd26430;
	Node0xd26430 -> Node0xd264a0;
	Node0xd264a0 -> Node0xd26510;
	Node0xd26510 -> Node0xd26580;
	Node0xd26580 -> Node0xd265f0;
	Node0xd265f0 -> Node0xd26660;
	Node0xd26660 -> Node0xd266d0;
	Node0xd266d0 -> Node0xd26740;
	Node0xd26740 -> Node0xd267b0;
	Node0xd267b0 -> Node0xd26820;
	Node0xd26820 -> Node0xd26890;
	Node0xd26890 -> Node0xd26900;
	Node0xd26900 -> Node0xd26970;
	Node0xd26970 -> Node0xd269e0;
	Node0xd269e0 -> Node0xd26c60;
	Node0xd26c60 -> Node0xd26cd0;
	Node0xd26cd0 -> Node0xcc49d8;
	Node0xcc49d8 -> Node0xd26d60;
	Node0xd26d60 -> Node0xd26fb8;
	Node0xd26fb8 -> Node0xd27118;
	Node0xd27118 -> Node0xd271d8;
edge [color=red]
	Node0xd23f08 -> Node0xd24018;
	Node0xd24018 -> Node0xd24478;
	Node0xd23f88 -> Node0xd24558;
	Node0xd24558 -> Node0xd24678;
	Node0xd23f08 -> Node0xd248b0;
	Node0xd23f88 -> Node0xd248b0;
	Node0xd23f08 -> Node0xd24968;
	Node0xd23f88 -> Node0xd258d8;
	Node0xd258d8 -> Node0xd25f60;
	Node0xd24968 -> Node0xd25f60;
	Node0xd25f60 -> Node0xd25fd0;
	Node0xd258d8 -> Node0xd26040;
	Node0xd24968 -> Node0xd26040;
	Node0xd258d8 -> Node0xd260b0;
	Node0xd24968 -> Node0xd26120;
	Node0xd260b0 -> Node0xd26120;
	Node0xd24968 -> Node0xd26190;
	Node0xd260b0 -> Node0xd26190;
	Node0xd24968 -> Node0xd26200;
	Node0xd26200 -> Node0xd26270;
	Node0xd258d8 -> Node0xd262e0;
	Node0xd24968 -> Node0xd262e0;
	Node0xd262e0 -> Node0xd26350;
	Node0xd26350 -> Node0xd263c0;
	Node0xd26120 -> Node0xd26430;
	Node0xd26430 -> Node0xd264a0;
	Node0xd26190 -> Node0xd26510;
	Node0xd26040 -> Node0xd26580;
	Node0xd24968 -> Node0xd265f0;
	Node0xd265f0 -> Node0xd26660;
	Node0xd258d8 -> Node0xd26660;
	Node0xd26660 -> Node0xd266d0;
	Node0xd26040 -> Node0xd266d0;
	Node0xd266d0 -> Node0xd26740;
	Node0xd26120 -> Node0xd26740;
	Node0xd26740 -> Node0xd267b0;
	Node0xd26190 -> Node0xd267b0;
	Node0xd267b0 -> Node0xd26820;
	Node0xd26270 -> Node0xd26820;
	Node0xd26820 -> Node0xd26890;
	Node0xd25f60 -> Node0xd26890;
	Node0xd26890 -> Node0xd26900;
	Node0xd26510 -> Node0xd26900;
	Node0xd26900 -> Node0xd26970;
	Node0xd26580 -> Node0xd26970;
	Node0xd26970 -> Node0xd269e0;
	Node0xd263c0 -> Node0xd269e0;
	Node0xd269e0 -> Node0xd26c60;
	Node0xd264a0 -> Node0xd26c60;
	Node0xd25fd0 -> Node0xd26cd0;
	Node0xd26c60 -> Node0xd26cd0;
	Node0xd26cd0 -> Node0xcc49d8;
	Node0xcc49d8 -> Node0xd26d60;
	Node0xd24558 -> Node0xd26fb8;
	Node0xd24018 -> Node0xd27118;
}
