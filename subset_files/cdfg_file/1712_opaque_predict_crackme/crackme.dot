digraph "DFG for'crackme' function" {
	Node0xd9fba0[shape=record, label="  %5 = and i32 %2, %1"];
	Node0xda0220[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0xda0290[shape=record, label="  %7 = sub i32 %2, %5"];
	Node0xda0300[shape=record, label="  %8 = xor i32 %2, %1"];
	Node0xda0370[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0xda03e0[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0xda0450[shape=record, label="  %11 = or i32 %10, %1"];
	Node0xda04f0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0xda0560[shape=record, label="  %13 = shl i32 %8, 1"];
	Node0xda0600[shape=record, label="  %14 = shl i32 %1, 2"];
	Node0xda0670[shape=record, label="  %15 = or i32 %2, %1"];
	Node0xda06e0[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0xda0750[shape=record, label="  %17 = xor i32 %11, -1"];
	Node0xda07f0[shape=record, label="  %18 = mul i32 %17, 6"];
	Node0xda0860[shape=record, label="  %19 = and i32 %10, %1"];
	Node0xda0900[shape=record, label="  %20 = mul i32 %19, 9"];
	Node0xda09a0[shape=record, label="  %21 = mul i32 %5, 7"];
	Node0xda0a10[shape=record, label="  %22 = or i32 %6, %3"];
	Node0xda0a80[shape=record, label="  %23 = xor i32 %3, %0"];
	Node0xda0af0[shape=record, label="  %24 = or i32 %3, %0"];
	Node0xda0b60[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0xda0c00[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0xda0c70[shape=record, label="  %27 = and i32 %6, %3"];
	Node0xda0ce0[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0xda0d50[shape=record, label="  %29 = and i32 %3, %0"];
	Node0xda0dc0[shape=record, label="  %30 = sub i32 %16, %29"];
	Node0xda0e60[shape=record, label="  %31 = mul i32 %30, 3"];
	Node0xda0ed0[shape=record, label="  %32 = add i32 %1, 2"];
	Node0xda1150[shape=record, label="  %33 = add i32 %32, %10"];
	Node0xda11c0[shape=record, label="  %34 = sub i32 %33, %14"];
	Node0xda1230[shape=record, label="  %35 = add i32 %34, %9"];
	Node0xda12a0[shape=record, label="  %36 = add i32 %35, %3"];
	Node0xda1310[shape=record, label="  %37 = sub i32 %36, %12"];
	Node0xda1380[shape=record, label="  %38 = sub i32 %37, %13"];
	Node0xda13f0[shape=record, label="  %39 = add i32 %38, %18"];
	Node0xda1460[shape=record, label="  %40 = add i32 %39, %20"];
	Node0xda14d0[shape=record, label="  %41 = add i32 %40, %21"];
	Node0xda1540[shape=record, label="  %42 = add i32 %41, %22"];
	Node0xda15b0[shape=record, label="  %43 = sub i32 %42, %23"];
	Node0xda1620[shape=record, label="  %44 = sub i32 %43, %28"];
	Node0xda1690[shape=record, label="  %45 = sub i32 %44, %26"];
	Node0xda1700[shape=record, label="  %46 = add i32 %45, %31"];
	Node0xda1770[shape=record, label="  %47 = icmp eq i32 %7, %46"];
	Node0xd40268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xda1c10[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0xda1c60[shape=record, label="  ret void"];
	Node0xd9fba0 -> Node0xda0220;
	Node0xda0220 -> Node0xda0290;
	Node0xda0290 -> Node0xda0300;
	Node0xda0300 -> Node0xda0370;
	Node0xda0370 -> Node0xda03e0;
	Node0xda03e0 -> Node0xda0450;
	Node0xda0450 -> Node0xda04f0;
	Node0xda04f0 -> Node0xda0560;
	Node0xda0560 -> Node0xda0600;
	Node0xda0600 -> Node0xda0670;
	Node0xda0670 -> Node0xda06e0;
	Node0xda06e0 -> Node0xda0750;
	Node0xda0750 -> Node0xda07f0;
	Node0xda07f0 -> Node0xda0860;
	Node0xda0860 -> Node0xda0900;
	Node0xda0900 -> Node0xda09a0;
	Node0xda09a0 -> Node0xda0a10;
	Node0xda0a10 -> Node0xda0a80;
	Node0xda0a80 -> Node0xda0af0;
	Node0xda0af0 -> Node0xda0b60;
	Node0xda0b60 -> Node0xda0c00;
	Node0xda0c00 -> Node0xda0c70;
	Node0xda0c70 -> Node0xda0ce0;
	Node0xda0ce0 -> Node0xda0d50;
	Node0xda0d50 -> Node0xda0dc0;
	Node0xda0dc0 -> Node0xda0e60;
	Node0xda0e60 -> Node0xda0ed0;
	Node0xda0ed0 -> Node0xda1150;
	Node0xda1150 -> Node0xda11c0;
	Node0xda11c0 -> Node0xda1230;
	Node0xda1230 -> Node0xda12a0;
	Node0xda12a0 -> Node0xda1310;
	Node0xda1310 -> Node0xda1380;
	Node0xda1380 -> Node0xda13f0;
	Node0xda13f0 -> Node0xda1460;
	Node0xda1460 -> Node0xda14d0;
	Node0xda14d0 -> Node0xda1540;
	Node0xda1540 -> Node0xda15b0;
	Node0xda15b0 -> Node0xda1620;
	Node0xda1620 -> Node0xda1690;
	Node0xda1690 -> Node0xda1700;
	Node0xda1700 -> Node0xda1770;
	Node0xda1770 -> Node0xd40268;
	Node0xd40268 -> Node0xda1c10;
	Node0xda1c10 -> Node0xda1c60;
edge [color=red]
	Node0xd9fba0 -> Node0xda0290;
	Node0xda0300 -> Node0xda0370;
	Node0xda03e0 -> Node0xda0450;
	Node0xda0450 -> Node0xda04f0;
	Node0xda0300 -> Node0xda0560;
	Node0xda0670 -> Node0xda06e0;
	Node0xda0450 -> Node0xda0750;
	Node0xda0750 -> Node0xda07f0;
	Node0xda03e0 -> Node0xda0860;
	Node0xda0860 -> Node0xda0900;
	Node0xd9fba0 -> Node0xda09a0;
	Node0xda0220 -> Node0xda0a10;
	Node0xda0af0 -> Node0xda0b60;
	Node0xda0b60 -> Node0xda0c00;
	Node0xda0220 -> Node0xda0c70;
	Node0xda0c70 -> Node0xda0ce0;
	Node0xda06e0 -> Node0xda0dc0;
	Node0xda0d50 -> Node0xda0dc0;
	Node0xda0dc0 -> Node0xda0e60;
	Node0xda0ed0 -> Node0xda1150;
	Node0xda03e0 -> Node0xda1150;
	Node0xda1150 -> Node0xda11c0;
	Node0xda0600 -> Node0xda11c0;
	Node0xda11c0 -> Node0xda1230;
	Node0xda0370 -> Node0xda1230;
	Node0xda1230 -> Node0xda12a0;
	Node0xda12a0 -> Node0xda1310;
	Node0xda04f0 -> Node0xda1310;
	Node0xda1310 -> Node0xda1380;
	Node0xda0560 -> Node0xda1380;
	Node0xda1380 -> Node0xda13f0;
	Node0xda07f0 -> Node0xda13f0;
	Node0xda13f0 -> Node0xda1460;
	Node0xda0900 -> Node0xda1460;
	Node0xda1460 -> Node0xda14d0;
	Node0xda09a0 -> Node0xda14d0;
	Node0xda14d0 -> Node0xda1540;
	Node0xda0a10 -> Node0xda1540;
	Node0xda1540 -> Node0xda15b0;
	Node0xda0a80 -> Node0xda15b0;
	Node0xda15b0 -> Node0xda1620;
	Node0xda0ce0 -> Node0xda1620;
	Node0xda1620 -> Node0xda1690;
	Node0xda0c00 -> Node0xda1690;
	Node0xda1690 -> Node0xda1700;
	Node0xda0e60 -> Node0xda1700;
	Node0xda0290 -> Node0xda1770;
	Node0xda1700 -> Node0xda1770;
	Node0xda1770 -> Node0xd40268;
	Node0xd40268 -> Node0xda1c10;
}
