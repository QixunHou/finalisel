digraph "DFG for'main' function" {
	Node0x1d7d1e8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1d7d268[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1d7d2f8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1d7d758[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d7d838[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1d7d958[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d7db90[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1d7dc48[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1d7ebb8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1d7f240[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x1d7f2b0[shape=record, label="  %9 = shl i32 %8, 2"];
	Node0x1d7f320[shape=record, label="  %10 = xor i32 %7, -1"];
	Node0x1d7f390[shape=record, label="  %11 = and i32 %6, %10"];
	Node0x1d7f400[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1d7f470[shape=record, label="  %13 = or i32 %7, %6"];
	Node0x1d7f4e0[shape=record, label="  %14 = and i32 %7, %6"];
	Node0x1d7f550[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x1d7f5c0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x1d7f630[shape=record, label="  %17 = xor i32 %8, -1"];
	Node0x1d7f6a0[shape=record, label="  %18 = or i32 %6, %10"];
	Node0x1d7f710[shape=record, label="  %19 = shl i32 %10, 1"];
	Node0x1d7f780[shape=record, label="  %20 = xor i32 %13, -1"];
	Node0x1d7f7f0[shape=record, label="  %21 = mul i32 %20, -5"];
	Node0x1d7f860[shape=record, label="  %22 = xor i32 %18, -1"];
	Node0x1d7f8d0[shape=record, label="  %23 = add i32 %11, %22"];
	Node0x1d7f940[shape=record, label="  %24 = mul i32 %23, 3"];
	Node0x1d7f9b0[shape=record, label="  %25 = add i32 %7, %6"];
	Node0x1d7fa20[shape=record, label="  %26 = sub i32 %12, %25"];
	Node0x1d7fa90[shape=record, label="  %27 = sub i32 %26, %13"];
	Node0x1d7fb00[shape=record, label="  %28 = add i32 %27, %17"];
	Node0x1d7fb70[shape=record, label="  %29 = sub i32 %28, %18"];
	Node0x1d7fbe0[shape=record, label="  %30 = add i32 %29, %19"];
	Node0x1d7fc50[shape=record, label="  %31 = add i32 %30, %21"];
	Node0x1d7fcc0[shape=record, label="  %32 = add i32 %31, %15"];
	Node0x1d7fd30[shape=record, label="  %33 = add i32 %32, %16"];
	Node0x1d7fda0[shape=record, label="  %34 = add i32 %33, %24"];
	Node0x1d7fe10[shape=record, label="  %35 = icmp eq i32 %9, %34"];
	Node0x1d1d9d8[shape=record, label="  %36 = select i1 %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d7fea0[shape=record, label="  %37 = call i32 @puts(i8* nonnull dereferenceable(1) %36) #5"];
	Node0x1d800f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d80258[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1d80318[shape=record, label="  ret i32 0"];
	Node0x1d7d1e8 -> Node0x1d7d268;
	Node0x1d7d268 -> Node0x1d7d2f8;
	Node0x1d7d2f8 -> Node0x1d7d758;
	Node0x1d7d758 -> Node0x1d7d838;
	Node0x1d7d838 -> Node0x1d7d958;
	Node0x1d7d958 -> Node0x1d7db90;
	Node0x1d7db90 -> Node0x1d7dc48;
	Node0x1d7dc48 -> Node0x1d7ebb8;
	Node0x1d7ebb8 -> Node0x1d7f240;
	Node0x1d7f240 -> Node0x1d7f2b0;
	Node0x1d7f2b0 -> Node0x1d7f320;
	Node0x1d7f320 -> Node0x1d7f390;
	Node0x1d7f390 -> Node0x1d7f400;
	Node0x1d7f400 -> Node0x1d7f470;
	Node0x1d7f470 -> Node0x1d7f4e0;
	Node0x1d7f4e0 -> Node0x1d7f550;
	Node0x1d7f550 -> Node0x1d7f5c0;
	Node0x1d7f5c0 -> Node0x1d7f630;
	Node0x1d7f630 -> Node0x1d7f6a0;
	Node0x1d7f6a0 -> Node0x1d7f710;
	Node0x1d7f710 -> Node0x1d7f780;
	Node0x1d7f780 -> Node0x1d7f7f0;
	Node0x1d7f7f0 -> Node0x1d7f860;
	Node0x1d7f860 -> Node0x1d7f8d0;
	Node0x1d7f8d0 -> Node0x1d7f940;
	Node0x1d7f940 -> Node0x1d7f9b0;
	Node0x1d7f9b0 -> Node0x1d7fa20;
	Node0x1d7fa20 -> Node0x1d7fa90;
	Node0x1d7fa90 -> Node0x1d7fb00;
	Node0x1d7fb00 -> Node0x1d7fb70;
	Node0x1d7fb70 -> Node0x1d7fbe0;
	Node0x1d7fbe0 -> Node0x1d7fc50;
	Node0x1d7fc50 -> Node0x1d7fcc0;
	Node0x1d7fcc0 -> Node0x1d7fd30;
	Node0x1d7fd30 -> Node0x1d7fda0;
	Node0x1d7fda0 -> Node0x1d7fe10;
	Node0x1d7fe10 -> Node0x1d1d9d8;
	Node0x1d1d9d8 -> Node0x1d7fea0;
	Node0x1d7fea0 -> Node0x1d800f8;
	Node0x1d800f8 -> Node0x1d80258;
	Node0x1d80258 -> Node0x1d80318;
edge [color=red]
	Node0x1d7d1e8 -> Node0x1d7d2f8;
	Node0x1d7d2f8 -> Node0x1d7d758;
	Node0x1d7d268 -> Node0x1d7d838;
	Node0x1d7d838 -> Node0x1d7d958;
	Node0x1d7d1e8 -> Node0x1d7db90;
	Node0x1d7d268 -> Node0x1d7db90;
	Node0x1d7d1e8 -> Node0x1d7dc48;
	Node0x1d7d268 -> Node0x1d7ebb8;
	Node0x1d7ebb8 -> Node0x1d7f240;
	Node0x1d7dc48 -> Node0x1d7f240;
	Node0x1d7f240 -> Node0x1d7f2b0;
	Node0x1d7ebb8 -> Node0x1d7f320;
	Node0x1d7dc48 -> Node0x1d7f390;
	Node0x1d7f320 -> Node0x1d7f390;
	Node0x1d7f390 -> Node0x1d7f400;
	Node0x1d7ebb8 -> Node0x1d7f470;
	Node0x1d7dc48 -> Node0x1d7f470;
	Node0x1d7ebb8 -> Node0x1d7f4e0;
	Node0x1d7dc48 -> Node0x1d7f4e0;
	Node0x1d7f4e0 -> Node0x1d7f550;
	Node0x1d7f550 -> Node0x1d7f5c0;
	Node0x1d7f240 -> Node0x1d7f630;
	Node0x1d7dc48 -> Node0x1d7f6a0;
	Node0x1d7f320 -> Node0x1d7f6a0;
	Node0x1d7f320 -> Node0x1d7f710;
	Node0x1d7f470 -> Node0x1d7f780;
	Node0x1d7f780 -> Node0x1d7f7f0;
	Node0x1d7f6a0 -> Node0x1d7f860;
	Node0x1d7f390 -> Node0x1d7f8d0;
	Node0x1d7f860 -> Node0x1d7f8d0;
	Node0x1d7f8d0 -> Node0x1d7f940;
	Node0x1d7ebb8 -> Node0x1d7f9b0;
	Node0x1d7dc48 -> Node0x1d7f9b0;
	Node0x1d7f400 -> Node0x1d7fa20;
	Node0x1d7f9b0 -> Node0x1d7fa20;
	Node0x1d7fa20 -> Node0x1d7fa90;
	Node0x1d7f470 -> Node0x1d7fa90;
	Node0x1d7fa90 -> Node0x1d7fb00;
	Node0x1d7f630 -> Node0x1d7fb00;
	Node0x1d7fb00 -> Node0x1d7fb70;
	Node0x1d7f6a0 -> Node0x1d7fb70;
	Node0x1d7fb70 -> Node0x1d7fbe0;
	Node0x1d7f710 -> Node0x1d7fbe0;
	Node0x1d7fbe0 -> Node0x1d7fc50;
	Node0x1d7f7f0 -> Node0x1d7fc50;
	Node0x1d7fc50 -> Node0x1d7fcc0;
	Node0x1d7f550 -> Node0x1d7fcc0;
	Node0x1d7fcc0 -> Node0x1d7fd30;
	Node0x1d7f5c0 -> Node0x1d7fd30;
	Node0x1d7fd30 -> Node0x1d7fda0;
	Node0x1d7f940 -> Node0x1d7fda0;
	Node0x1d7f2b0 -> Node0x1d7fe10;
	Node0x1d7fda0 -> Node0x1d7fe10;
	Node0x1d7fe10 -> Node0x1d1d9d8;
	Node0x1d1d9d8 -> Node0x1d7fea0;
	Node0x1d7d838 -> Node0x1d800f8;
	Node0x1d7d2f8 -> Node0x1d80258;
}
