digraph "DFG for'crackme' function" {
	Node0x798ba0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x798c10[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x798cd0[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0x798d40[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x798de0[shape=record, label="  %7 = shl i32 %0, 1"];
	Node0x798e50[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x798ec0[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x798f30[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x798fa0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x799010[shape=record, label="  %12 = and i32 %3, %0"];
	Node0x799080[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x799120[shape=record, label="  %14 = shl i32 %9, 2"];
	Node0x799190[shape=record, label="  %15 = shl i32 %8, 1"];
	Node0x799200[shape=record, label="  %16 = sub i32 %0, %4"];
	Node0x7992a0[shape=record, label="  %17 = mul i32 %16, 3"];
	Node0x799310[shape=record, label="  %18 = sub i32 2, %7"];
	Node0x799380[shape=record, label="  %19 = sub i32 %18, %1"];
	Node0x7993f0[shape=record, label="  %20 = add i32 %19, %3"];
	Node0x799460[shape=record, label="  %21 = sub i32 %20, %6"];
	Node0x7994d0[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0x799540[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x7995b0[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x799620[shape=record, label="  %25 = add i32 %24, %11"];
	Node0x799690[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x799700[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0x739268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x799ba0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x799bf0[shape=record, label="  ret void"];
	Node0x798ba0 -> Node0x798c10;
	Node0x798c10 -> Node0x798cd0;
	Node0x798cd0 -> Node0x798d40;
	Node0x798d40 -> Node0x798de0;
	Node0x798de0 -> Node0x798e50;
	Node0x798e50 -> Node0x798ec0;
	Node0x798ec0 -> Node0x798f30;
	Node0x798f30 -> Node0x798fa0;
	Node0x798fa0 -> Node0x799010;
	Node0x799010 -> Node0x799080;
	Node0x799080 -> Node0x799120;
	Node0x799120 -> Node0x799190;
	Node0x799190 -> Node0x799200;
	Node0x799200 -> Node0x7992a0;
	Node0x7992a0 -> Node0x799310;
	Node0x799310 -> Node0x799380;
	Node0x799380 -> Node0x7993f0;
	Node0x7993f0 -> Node0x799460;
	Node0x799460 -> Node0x7994d0;
	Node0x7994d0 -> Node0x799540;
	Node0x799540 -> Node0x7995b0;
	Node0x7995b0 -> Node0x799620;
	Node0x799620 -> Node0x799690;
	Node0x799690 -> Node0x799700;
	Node0x799700 -> Node0x739268;
	Node0x739268 -> Node0x799ba0;
	Node0x799ba0 -> Node0x799bf0;
edge [color=red]
	Node0x798ba0 -> Node0x798c10;
	Node0x798c10 -> Node0x798cd0;
	Node0x798ec0 -> Node0x798f30;
	Node0x798f30 -> Node0x798fa0;
	Node0x798ba0 -> Node0x799010;
	Node0x799010 -> Node0x799080;
	Node0x798ec0 -> Node0x799120;
	Node0x798e50 -> Node0x799190;
	Node0x798c10 -> Node0x799200;
	Node0x799200 -> Node0x7992a0;
	Node0x798de0 -> Node0x799310;
	Node0x799310 -> Node0x799380;
	Node0x799380 -> Node0x7993f0;
	Node0x798ba0 -> Node0x7993f0;
	Node0x7993f0 -> Node0x799460;
	Node0x798d40 -> Node0x799460;
	Node0x799460 -> Node0x7994d0;
	Node0x799080 -> Node0x7994d0;
	Node0x7994d0 -> Node0x799540;
	Node0x799120 -> Node0x799540;
	Node0x799540 -> Node0x7995b0;
	Node0x799190 -> Node0x7995b0;
	Node0x7995b0 -> Node0x799620;
	Node0x798fa0 -> Node0x799620;
	Node0x799620 -> Node0x799690;
	Node0x7992a0 -> Node0x799690;
	Node0x798cd0 -> Node0x799700;
	Node0x799690 -> Node0x799700;
	Node0x799700 -> Node0x739268;
	Node0x739268 -> Node0x799ba0;
}
