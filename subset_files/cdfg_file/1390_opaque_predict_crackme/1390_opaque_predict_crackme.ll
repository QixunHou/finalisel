; ModuleID = '../.././c_source_file/1390_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1390_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, %7
  %11 = and i32 %4, %3
  %12 = xor i32 %5, -1
  %13 = or i32 %12, %4
  %14 = xor i32 %13, %11
  %15 = add i32 %14, %10
  %16 = xor i32 %3, -1
  %17 = and i32 %16, %4
  %18 = and i32 %5, %3
  %19 = or i32 %18, %17
  %20 = shl i32 %19, 1
  %21 = sub i32 %15, %20
  %22 = and i32 %2, %0
  %23 = xor i32 %22, -1
  %24 = xor i32 %23, %1
  %25 = xor i32 %0, -1
  %26 = and i32 %8, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %25
  %29 = xor i32 %1, -1
  %30 = and i32 %29, %2
  %31 = and i32 %30, %0
  %32 = xor i32 %2, %1
  %33 = xor i32 %32, %0
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, %34
  %36 = or i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = add i32 %36, 1
  %39 = or i32 %2, %1
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %25
  %42 = or i32 %22, %1
  %43 = shl i32 %42, 1
  %44 = xor i32 %1, %0
  %45 = and i32 %44, %23
  %46 = shl i32 %45, 1
  %47 = or i32 %1, %0
  %48 = xor i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %47, %49
  %51 = or i32 %44, %49
  %52 = or i32 %7, %8
  %53 = and i32 %8, %0
  %54 = xor i32 %53, -1
  %55 = xor i32 %54, %1
  %56 = xor i32 %26, %0
  %57 = shl i32 %56, 1
  %58 = xor i32 %47, -1
  %59 = or i32 %58, %2
  %60 = or i32 %29, %0
  %61 = xor i32 %60, -1
  %62 = add i32 %60, 1
  %63 = or i32 %29, %2
  %64 = and i32 %63, %25
  %65 = or i32 %31, %64
  %66 = or i32 %22, %44
  %67 = xor i32 %44, -1
  %68 = and i32 %48, %67
  %69 = and i32 %44, %2
  %70 = xor i32 %7, -1
  %71 = add i32 %7, 1
  %72 = xor i32 %36, %7
  %73 = and i32 %9, %44
  %74 = shl i32 %36, 1
  %75 = xor i32 %7, %2
  %76 = and i32 %48, %70
  %77 = shl i32 %76, 1
  %78 = and i32 %29, %0
  %79 = or i32 %78, %49
  %80 = and i32 %54, %1
  %81 = or i32 %8, %1
  %82 = xor i32 %53, %81
  %83 = or i32 %7, %49
  %84 = and i32 %2, %1
  %85 = xor i32 %84, -1
  %86 = and i32 %85, %0
  %87 = and i32 %30, %25
  %88 = or i32 %32, %25
  %89 = xor i32 %88, 2147483647
  %90 = or i32 %89, %87
  %91 = and i32 %84, %0
  %92 = xor i32 %39, %0
  %93 = xor i32 %91, -1
  %94 = xor i32 %92, %93
  %95 = and i32 %23, %1
  %96 = and i32 %39, %25
  %97 = and i32 %48, %47
  %98 = and i32 %23, %29
  %99 = shl i32 %98, 1
  %100 = and i32 %60, %2
  %101 = and i32 %54, %29
  %102 = or i32 %49, %1
  %103 = or i32 %91, %96
  %104 = xor i32 %60, %2
  %105 = xor i32 %36, %1
  %106 = add i32 %22, 1
  %107 = and i32 %85, %25
  %108 = and i32 %36, %44
  %109 = xor i32 %63, %0
  %110 = xor i32 %31, -1
  %111 = xor i32 %109, %110
  %112 = or i32 %32, %58
  %113 = and i32 %63, %0
  %114 = xor i32 %113, -1
  %115 = xor i32 %87, %114
  %116 = or i32 %53, %1
  %117 = or i32 %48, %7
  %118 = xor i32 %61, %2
  %119 = shl i32 %118, 1
  %120 = xor i32 %78, %27
  %121 = or i32 %22, %40
  %122 = xor i32 %64, %110
  %123 = and i32 %84, %25
  %124 = and i32 %32, %0
  %125 = xor i32 %123, -1
  %126 = xor i32 %124, %125
  %127 = or i32 %39, %25
  %128 = and i32 %8, %67
  %129 = and i32 %48, %44
  %130 = shl i32 %129, 2
  %131 = xor i32 %81, -1
  %132 = xor i32 %78, -1
  %133 = and i32 %49, %132
  %134 = or i32 %39, %0
  %135 = or i32 %32, %0
  %136 = xor i32 %31, %135
  %137 = xor i32 %32, -1
  %138 = or i32 %7, %137
  %139 = or i32 %27, %0
  %140 = and i32 %48, %132
  %141 = shl i32 %9, 2
  %142 = or i32 %40, %0
  %143 = and i32 %32, %25
  %144 = xor i32 %9, -1
  %145 = or i32 %144, %1
  %146 = or i32 %7, %37
  %147 = or i32 %53, %131
  %148 = shl i32 %147, 1
  %149 = shl i32 %44, 1
  %150 = and i32 %9, %1
  %151 = add i32 %39, 1
  %152 = and i32 %44, %8
  %153 = or i32 %48, %78
  %154 = or i32 %48, %1
  %155 = xor i32 %96, 2147483647
  %156 = xor i32 %155, %91
  %157 = xor i32 %47, %2
  %158 = xor i32 %22, %1
  %159 = add i32 %32, 1
  %160 = xor i32 %81, %0
  %161 = xor i32 %58, %2
  %162 = xor i32 %39, %7
  %163 = and i32 %9, %67
  %164 = xor i32 %135, -1
  %165 = or i32 %31, %164
  %166 = and i32 %27, %25
  %167 = xor i32 %27, %0
  %168 = or i32 %44, %8
  %169 = or i32 %48, %58
  %170 = or i32 %32, %7
  %171 = or i32 %37, %1
  %172 = shl i32 %171, 1
  %173 = and i32 %137, %132
  %174 = and i32 %47, %137
  %175 = or i32 %26, %0
  %176 = shl i32 %175, 1
  %177 = or i32 %123, %124
  %178 = or i32 %37, %29
  %179 = and i32 %48, %1
  %180 = and i32 %60, %137
  %181 = shl i32 %180, 1
  %182 = xor i32 %84, %0
  %183 = or i32 %137, %0
  %184 = or i32 %78, %2
  %185 = or i32 %7, %144
  %186 = or i32 %53, %67
  %187 = or i32 %53, %84
  %188 = and i32 %39, %0
  %189 = xor i32 %188, %125
  %190 = and i32 %8, %70
  %191 = and i32 %47, %2
  %192 = xor i32 %132, %2
  %193 = xor i32 %40, %0
  %194 = add i32 %53, 1
  %195 = or i32 %22, %61
  %196 = add i32 %26, 1
  %197 = or i32 %137, %58
  %198 = or i32 %91, %34
  %199 = or i32 %8, %58
  %200 = or i32 %137, %25
  %201 = or i32 %81, %0
  %202 = xor i32 %81, %7
  %203 = or i32 %22, %58
  %204 = or i32 %7, %2
  %205 = or i32 %22, %67
  %206 = shl i32 %33, 1
  %207 = and i32 %23, %67
  %208 = shl i32 %207, 1
  %209 = and i32 %137, %70
  %210 = and i32 %132, %2
  %211 = xor i32 %143, %93
  %212 = xor i32 %85, %0
  %213 = shl i32 %212, 1
  %214 = or i32 %131, %0
  %215 = or i32 %81, %25
  %216 = and i32 %49, %1
  %217 = add i32 %47, 1
  %218 = or i32 %31, %109
  %219 = or i32 %32, %61
  %220 = and i32 %27, %0
  %221 = shl i32 %220, 1
  %222 = or i32 %85, %0
  %223 = xor i32 %78, %85
  %224 = and i32 %137, %25
  %225 = and i32 %60, %49
  %226 = or i32 %44, %37
  %227 = or i32 %91, %143
  %228 = shl i32 %227, 1
  %229 = xor i32 %22, %60
  %230 = xor i32 %22, %47
  %231 = or i32 %26, %25
  %232 = or i32 %49, %29
  %233 = or i32 %85, %25
  %234 = or i32 %87, %113
  %235 = or i32 %44, %144
  %236 = or i32 %37, %67
  %237 = and i32 %36, %29
  %238 = xor i32 %53, %1
  %239 = xor i32 %9, %1
  %240 = and i32 %44, %49
  %241 = or i32 %123, %188
  %242 = shl i32 %241, 1
  %243 = and i32 %67, %2
  %244 = xor i32 %37, %1
  %245 = xor i32 %53, %85
  %246 = or i32 %78, %137
  %247 = or i32 %22, %26
  %248 = or i32 %137, %61
  %249 = shl i32 %248, 1
  %250 = xor i32 %131, %0
  %251 = xor i32 %70, %2
  %252 = shl i32 %188, 1
  %253 = or i32 %32, %78
  %254 = or i32 %61, %2
  %255 = or i32 %53, %29
  %256 = or i32 %48, %44
  %257 = or i32 %8, %61
  %258 = or i32 %84, %78
  %259 = shl i32 %258, 1
  %260 = or i32 %8, %67
  %261 = or i32 %144, %29
  %262 = or i32 %7, %40
  %263 = or i32 %84, %0
  %264 = and i32 %49, %29
  %265 = or i32 %7, %131
  %266 = and i32 %9, %29
  %267 = and i32 %36, %1
  %268 = shl i32 %267, 1
  %269 = and i32 %26, %25
  %270 = shl i32 %269, 4
  %271 = and i32 %40, %0
  %272 = mul i32 %271, 23
  %273 = and i32 %26, %0
  %274 = mul i32 %273, -13
  %275 = and i32 %131, %25
  %276 = and i32 %131, %0
  %277 = xor i32 %4, %3
  %278 = xor i32 %277, -1
  %279 = or i32 %12, %278
  %280 = or i32 %5, %4
  %281 = and i32 %280, %277
  %282 = xor i32 %13, -1
  %283 = xor i32 %282, %3
  %284 = xor i32 %5, %4
  %285 = xor i32 %284, -1
  %286 = or i32 %277, %285
  %287 = or i32 %277, %5
  %288 = and i32 %12, %4
  %289 = or i32 %288, %3
  %290 = and i32 %13, %3
  %291 = shl i32 %290, 1
  %292 = xor i32 %5, %3
  %293 = xor i32 %292, -1
  %294 = or i32 %11, %293
  %295 = add i32 %3, 1
  %296 = xor i32 %288, -1
  %297 = and i32 %296, %3
  %298 = and i32 %16, %5
  %299 = and i32 %298, %4
  %300 = or i32 %292, %4
  %301 = xor i32 %299, %300
  %302 = and i32 %18, %4
  %303 = xor i32 %4, -1
  %304 = or i32 %5, %3
  %305 = and i32 %304, %303
  %306 = xor i32 %305, -1
  %307 = xor i32 %302, %306
  %308 = xor i32 %17, -1
  %309 = and i32 %284, %308
  %310 = or i32 %4, %3
  %311 = and i32 %310, %5
  %312 = and i32 %12, %3
  %313 = xor i32 %312, %4
  %314 = and i32 %310, %12
  %315 = shl i32 %314, 1
  %316 = or i32 %12, %3
  %317 = xor i32 %316, -1
  %318 = or i32 %317, %4
  %319 = and i32 %293, %4
  %320 = shl i32 %319, 1
  %321 = xor i32 %304, -1
  %322 = or i32 %11, %321
  %323 = or i32 %284, %3
  %324 = or i32 %11, %282
  %325 = xor i32 %312, -1
  %326 = or i32 %325, %4
  %327 = shl i32 %326, 1
  %328 = xor i32 %18, -1
  %329 = xor i32 %288, %328
  %330 = shl i32 %4, 2
  %331 = xor i32 %310, %5
  %332 = and i32 %5, %4
  %333 = xor i32 %332, %304
  %334 = or i32 %288, %278
  %335 = and i32 %292, %310
  %336 = add i32 %292, 1
  %337 = or i32 %285, %278
  %338 = xor i32 %304, %4
  %339 = or i32 %302, %338
  %340 = shl i32 %339, 1
  %341 = or i32 %288, %317
  %342 = xor i32 %288, %3
  %343 = and i32 %285, %3
  %344 = and i32 %18, %303
  %345 = and i32 %292, %4
  %346 = or i32 %344, %345
  %347 = and i32 %298, %303
  %348 = or i32 %347, %319
  %349 = xor i32 %308, %5
  %350 = xor i32 %17, %325
  %351 = and i32 %280, %16
  %352 = and i32 %303, %3
  %353 = or i32 %352, %12
  %354 = xor i32 %280, -1
  %355 = or i32 %11, %354
  %356 = xor i32 %344, -1
  %357 = xor i32 %345, %356
  %358 = and i32 %292, %303
  %359 = or i32 %302, %358
  %360 = and i32 %328, %4
  %361 = and i32 %13, %16
  %362 = shl i32 %361, 1
  %363 = shl i32 %5, 2
  %364 = xor i32 %17, %5
  %365 = xor i32 %18, %4
  %366 = xor i32 %292, %4
  %367 = or i32 %299, %366
  %368 = and i32 %304, %4
  %369 = xor i32 %368, %356
  %370 = xor i32 %11, 2147483647
  %371 = and i32 %370, %5
  %372 = xor i32 %304, %11
  %373 = or i32 %292, %352
  %374 = xor i32 %316, %11
  %375 = or i32 %277, %282
  %376 = and i32 %328, %303
  %377 = or i32 %293, %303
  %378 = or i32 %18, %4
  %379 = or i32 %321, %4
  %380 = xor i32 %310, -1
  %381 = or i32 %12, %380
  %382 = or i32 %312, %17
  %383 = xor i32 %332, %310
  %384 = xor i32 %317, %4
  %385 = or i32 %11, %317
  %386 = and i32 %325, %303
  %387 = xor i32 %332, -1
  %388 = and i32 %277, %387
  %389 = shl i32 %388, 1
  %390 = xor i32 %387, %3
  %391 = add i32 %288, 1
  %392 = or i32 %16, %5
  %393 = xor i32 %392, %303
  %394 = xor i32 %393, %299
  %395 = and i32 %310, %293
  %396 = and i32 %308, %5
  %397 = xor i32 %13, %3
  %398 = and i32 %321, %303
  %399 = and i32 %312, %303
  %400 = mul i32 %399, 18
  %401 = and i32 %321, %4
  %402 = mul i32 %401, 14
  %403 = and i32 %312, %4
  %404 = and i32 %317, %303
  %405 = and i32 %317, %4
  %406 = add i32 %254, %1
  %407 = add i32 %406, %49
  %408 = add i32 %407, %85
  %409 = add i32 %408, %131
  %410 = add i32 %409, %52
  %411 = add i32 %410, %263
  %412 = add i32 %411, %256
  %413 = add i32 %412, %246
  %414 = add i32 %413, %236
  %415 = add i32 %414, %224
  %416 = add i32 %415, %222
  %417 = add i32 %416, %187
  %418 = add i32 %417, %146
  %419 = add i32 %418, %97
  %420 = add i32 %419, %95
  %421 = add i32 %420, %35
  %422 = add i32 %421, %156
  %423 = add i32 %422, %90
  %424 = add i32 %423, %302
  %425 = add i32 %424, %395
  %426 = add i32 %425, %371
  %427 = add i32 %426, %351
  %428 = add i32 %427, %333
  %429 = add i32 %428, %294
  %430 = add i32 %429, %286
  %431 = add i32 %430, %346
  %432 = shl i32 %431, 1
  %433 = sub i32 %276, %152
  %434 = sub i32 %433, %79
  %435 = sub i32 %434, %331
  %436 = add i32 %435, %287
  %437 = sub i32 %436, %358
  %438 = sub i32 %437, %344
  %439 = mul i32 %438, 5
  %440 = add i32 %123, %2
  %441 = sub i32 %440, %160
  %442 = sub i32 %441, %134
  %443 = add i32 %442, %117
  %444 = sub i32 %443, %338
  %445 = sub i32 %444, %398
  %446 = mul i32 %445, 3
  %447 = sub i32 %404, %405
  %448 = add i32 %447, %403
  %449 = mul i32 %448, 6
  %450 = add i32 %50, %245
  %451 = add i32 %450, %337
  %452 = shl i32 %451, 2
  %453 = sub i32 %91, %275
  %454 = mul i32 %453, 10
  %455 = sub i32 %62, %1
  %456 = add i32 %455, %71
  %457 = add i32 %456, %2
  %458 = sub i32 %457, %78
  %459 = add i32 %458, %217
  %460 = add i32 %459, %7
  %461 = add i32 %460, %38
  %462 = add i32 %461, %59
  %463 = add i32 %462, %69
  %464 = add i32 %463, %75
  %465 = add i32 %464, %22
  %466 = add i32 %465, %100
  %467 = add i32 %466, %104
  %468 = add i32 %467, %106
  %469 = add i32 %468, %48
  %470 = add i32 %469, %53
  %471 = sub i32 %470, %128
  %472 = sub i32 %471, %84
  %473 = sub i32 %472, %149
  %474 = add i32 %473, %151
  %475 = sub i32 %474, %157
  %476 = add i32 %475, %159
  %477 = add i32 %476, %161
  %478 = add i32 %477, %144
  %479 = sub i32 %478, %168
  %480 = add i32 %479, %184
  %481 = add i32 %480, %26
  %482 = sub i32 %481, %190
  %483 = add i32 %482, %191
  %484 = sub i32 %483, %192
  %485 = add i32 %484, %194
  %486 = add i32 %485, %196
  %487 = sub i32 %486, %199
  %488 = add i32 %487, %204
  %489 = sub i32 %488, %39
  %490 = sub i32 %489, %210
  %491 = add i32 %490, %243
  %492 = add i32 %491, %251
  %493 = add i32 %492, %257
  %494 = sub i32 %493, %81
  %495 = add i32 %494, %260
  %496 = add i32 %495, %295
  %497 = sub i32 %496, %28
  %498 = sub i32 %497, %24
  %499 = sub i32 %498, %41
  %500 = add i32 %499, %51
  %501 = add i32 %500, %55
  %502 = sub i32 %501, %66
  %503 = sub i32 %502, %68
  %504 = add i32 %503, %72
  %505 = sub i32 %504, %73
  %506 = sub i32 %505, %74
  %507 = add i32 %506, %80
  %508 = sub i32 %507, %82
  %509 = sub i32 %508, %83
  %510 = add i32 %509, %86
  %511 = add i32 %510, %96
  %512 = sub i32 %511, %101
  %513 = sub i32 %512, %102
  %514 = sub i32 %513, %105
  %515 = add i32 %514, %107
  %516 = sub i32 %515, %108
  %517 = add i32 %516, %112
  %518 = add i32 %517, %116
  %519 = sub i32 %518, %119
  %520 = add i32 %519, %120
  %521 = add i32 %520, %121
  %522 = add i32 %521, %127
  %523 = add i32 %522, %133
  %524 = sub i32 %523, %138
  %525 = add i32 %524, %139
  %526 = add i32 %525, %140
  %527 = sub i32 %526, %141
  %528 = add i32 %527, %142
  %529 = add i32 %528, %143
  %530 = sub i32 %529, %145
  %531 = add i32 %530, %150
  %532 = add i32 %531, %153
  %533 = add i32 %532, %154
  %534 = add i32 %533, %158
  %535 = sub i32 %534, %162
  %536 = add i32 %535, %163
  %537 = add i32 %536, %166
  %538 = sub i32 %537, %167
  %539 = add i32 %538, %135
  %540 = sub i32 %539, %169
  %541 = sub i32 %540, %170
  %542 = sub i32 %541, %173
  %543 = sub i32 %542, %174
  %544 = add i32 %543, %178
  %545 = sub i32 %544, %179
  %546 = add i32 %545, %182
  %547 = sub i32 %546, %183
  %548 = sub i32 %547, %185
  %549 = sub i32 %548, %186
  %550 = add i32 %549, %193
  %551 = sub i32 %550, %195
  %552 = add i32 %551, %92
  %553 = sub i32 %552, %197
  %554 = add i32 %553, %200
  %555 = sub i32 %554, %201
  %556 = add i32 %555, %202
  %557 = sub i32 %556, %203
  %558 = add i32 %557, %205
  %559 = add i32 %558, %209
  %560 = sub i32 %559, %214
  %561 = sub i32 %560, %215
  %562 = sub i32 %561, %216
  %563 = add i32 %562, %219
  %564 = add i32 %563, %223
  %565 = sub i32 %564, %225
  %566 = add i32 %565, %226
  %567 = sub i32 %566, %229
  %568 = add i32 %567, %230
  %569 = add i32 %568, %231
  %570 = add i32 %569, %232
  %571 = add i32 %570, %233
  %572 = sub i32 %571, %88
  %573 = add i32 %572, %235
  %574 = sub i32 %573, %237
  %575 = sub i32 %574, %238
  %576 = add i32 %575, %239
  %577 = sub i32 %576, %240
  %578 = add i32 %577, %244
  %579 = sub i32 %578, %247
  %580 = add i32 %579, %250
  %581 = sub i32 %580, %253
  %582 = add i32 %581, %255
  %583 = add i32 %582, %124
  %584 = sub i32 %583, %261
  %585 = add i32 %584, %262
  %586 = add i32 %585, %264
  %587 = sub i32 %586, %265
  %588 = sub i32 %587, %266
  %589 = sub i32 %588, %43
  %590 = sub i32 %589, %46
  %591 = sub i32 %590, %57
  %592 = add i32 %591, %65
  %593 = sub i32 %592, %77
  %594 = add i32 %593, %94
  %595 = sub i32 %594, %99
  %596 = sub i32 %595, %103
  %597 = add i32 %596, %111
  %598 = sub i32 %597, %115
  %599 = add i32 %598, %122
  %600 = add i32 %599, %126
  %601 = sub i32 %600, %130
  %602 = add i32 %601, %136
  %603 = sub i32 %602, %148
  %604 = sub i32 %603, %165
  %605 = sub i32 %604, %172
  %606 = sub i32 %605, %176
  %607 = sub i32 %606, %177
  %608 = sub i32 %607, %181
  %609 = add i32 %608, %189
  %610 = add i32 %609, %198
  %611 = sub i32 %610, %206
  %612 = sub i32 %611, %208
  %613 = sub i32 %612, %211
  %614 = sub i32 %613, %213
  %615 = add i32 %614, %218
  %616 = sub i32 %615, %221
  %617 = sub i32 %616, %234
  %618 = sub i32 %617, %249
  %619 = sub i32 %618, %252
  %620 = sub i32 %619, %259
  %621 = sub i32 %620, %268
  %622 = add i32 %621, %270
  %623 = add i32 %622, %272
  %624 = add i32 %623, %274
  %625 = sub i32 %624, %330
  %626 = add i32 %625, %11
  %627 = sub i32 %626, %228
  %628 = sub i32 %627, %242
  %629 = sub i32 %628, %279
  %630 = add i32 %629, %311
  %631 = add i32 %630, %336
  %632 = sub i32 %631, %349
  %633 = add i32 %632, %353
  %634 = add i32 %633, %317
  %635 = sub i32 %634, %363
  %636 = sub i32 %635, %364
  %637 = sub i32 %636, %312
  %638 = sub i32 %637, %381
  %639 = add i32 %638, %391
  %640 = add i32 %639, %396
  %641 = add i32 %640, %454
  %642 = sub i32 %641, %281
  %643 = sub i32 %642, %283
  %644 = sub i32 %643, %289
  %645 = sub i32 %644, %297
  %646 = add i32 %645, %309
  %647 = sub i32 %646, %313
  %648 = sub i32 %647, %315
  %649 = sub i32 %648, %318
  %650 = add i32 %649, %322
  %651 = sub i32 %650, %323
  %652 = add i32 %651, %324
  %653 = add i32 %652, %329
  %654 = sub i32 %653, %334
  %655 = add i32 %654, %335
  %656 = sub i32 %655, %305
  %657 = add i32 %656, %341
  %658 = add i32 %657, %342
  %659 = sub i32 %658, %343
  %660 = add i32 %659, %350
  %661 = add i32 %660, %355
  %662 = add i32 %661, %360
  %663 = sub i32 %662, %365
  %664 = add i32 %663, %372
  %665 = sub i32 %664, %373
  %666 = sub i32 %665, %374
  %667 = add i32 %666, %375
  %668 = sub i32 %667, %376
  %669 = sub i32 %668, %377
  %670 = sub i32 %669, %378
  %671 = sub i32 %670, %379
  %672 = sub i32 %671, %382
  %673 = add i32 %672, %383
  %674 = add i32 %673, %384
  %675 = add i32 %674, %385
  %676 = add i32 %675, %386
  %677 = add i32 %676, %368
  %678 = add i32 %677, %390
  %679 = add i32 %678, %397
  %680 = sub i32 %679, %291
  %681 = sub i32 %680, %301
  %682 = add i32 %681, %307
  %683 = sub i32 %682, %320
  %684 = sub i32 %683, %327
  %685 = add i32 %684, %348
  %686 = add i32 %685, %357
  %687 = sub i32 %686, %359
  %688 = sub i32 %687, %362
  %689 = sub i32 %688, %367
  %690 = add i32 %689, %369
  %691 = sub i32 %690, %389
  %692 = add i32 %691, %394
  %693 = add i32 %692, %400
  %694 = add i32 %693, %402
  %695 = sub i32 %694, %340
  %696 = add i32 %695, %449
  %697 = add i32 %696, %452
  %698 = add i32 %697, %439
  %699 = add i32 %698, %446
  %700 = add i32 %699, %432
  %701 = icmp eq i32 %21, %700
  %702 = select i1 %701, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %703 = tail call i32 @puts(i8* nonnull dereferenceable(1) %702)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
