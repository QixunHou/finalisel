digraph "DFG for'crackme' function" {
	Node0xa763c0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0xa76430[shape=record, label="  %4 = and i32 %1, %0"];
	Node0xa76b00[shape=record, label="  %5 = sub i32 1, %3"];
	Node0xa76b70[shape=record, label="  %6 = add i32 %5, %4"];
	Node0xa76be0[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0xa76c80[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0xa76cf0[shape=record, label="  %9 = or i32 %8, %1"];
	Node0xa76d60[shape=record, label="  %10 = shl i32 %3, 1"];
	Node0xa76e00[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0xa76ea0[shape=record, label="  %12 = mul i32 %4, 3"];
	Node0xa76f40[shape=record, label="  %13 = sub i32 2, %0"];
	Node0xa76fb0[shape=record, label="  %14 = add i32 %13, %7"];
	Node0xa77020[shape=record, label="  %15 = sub i32 %14, %9"];
	Node0xa77090[shape=record, label="  %16 = add i32 %15, %12"];
	Node0xa77100[shape=record, label="  %17 = add i32 %16, %11"];
	Node0xa77170[shape=record, label="  %18 = icmp eq i32 %6, %17"];
	Node0xa17268[shape=record, label="  %19 = select i1 %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa77610[shape=record, label="  %20 = tail call i32 @puts(i8* nonnull dereferenceable(1) %19)"];
	Node0xa77660[shape=record, label="  ret void"];
	Node0xa763c0 -> Node0xa76430;
	Node0xa76430 -> Node0xa76b00;
	Node0xa76b00 -> Node0xa76b70;
	Node0xa76b70 -> Node0xa76be0;
	Node0xa76be0 -> Node0xa76c80;
	Node0xa76c80 -> Node0xa76cf0;
	Node0xa76cf0 -> Node0xa76d60;
	Node0xa76d60 -> Node0xa76e00;
	Node0xa76e00 -> Node0xa76ea0;
	Node0xa76ea0 -> Node0xa76f40;
	Node0xa76f40 -> Node0xa76fb0;
	Node0xa76fb0 -> Node0xa77020;
	Node0xa77020 -> Node0xa77090;
	Node0xa77090 -> Node0xa77100;
	Node0xa77100 -> Node0xa77170;
	Node0xa77170 -> Node0xa17268;
	Node0xa17268 -> Node0xa77610;
	Node0xa77610 -> Node0xa77660;
edge [color=red]
	Node0xa763c0 -> Node0xa76b00;
	Node0xa76b00 -> Node0xa76b70;
	Node0xa76430 -> Node0xa76b70;
	Node0xa76c80 -> Node0xa76cf0;
	Node0xa763c0 -> Node0xa76d60;
	Node0xa76d60 -> Node0xa76e00;
	Node0xa76430 -> Node0xa76ea0;
	Node0xa76f40 -> Node0xa76fb0;
	Node0xa76be0 -> Node0xa76fb0;
	Node0xa76fb0 -> Node0xa77020;
	Node0xa76cf0 -> Node0xa77020;
	Node0xa77020 -> Node0xa77090;
	Node0xa76ea0 -> Node0xa77090;
	Node0xa77090 -> Node0xa77100;
	Node0xa76e00 -> Node0xa77100;
	Node0xa76b70 -> Node0xa77170;
	Node0xa77100 -> Node0xa77170;
	Node0xa77170 -> Node0xa17268;
	Node0xa17268 -> Node0xa77610;
}
