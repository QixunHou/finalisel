digraph "DFG for'crackme' function" {
	Node0xc8fb80[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0xc8fbf0[shape=record, label="  %4 = and i32 %1, %0"];
	Node0xc8fcb0[shape=record, label="  %5 = sub i32 -2, %4"];
	Node0xc8fd20[shape=record, label="  %6 = or i32 %1, %0"];
	Node0xc8fd90[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0xc8fe00[shape=record, label="  %8 = or i32 %7, %0"];
	Node0xc8fea0[shape=record, label="  %9 = mul i32 %3, -5"];
	Node0xc8ff10[shape=record, label="  %10 = xor i32 %3, %1"];
	Node0xc8ff80[shape=record, label="  %11 = or i32 %3, %1"];
	Node0xc8fff0[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0xc90090[shape=record, label="  %13 = mul i32 %12, 7"];
	Node0xc90130[shape=record, label="  %14 = shl i32 %8, 3"];
	Node0xc901d0[shape=record, label="  %15 = xor i32 %14, -8"];
	Node0xc90240[shape=record, label="  %16 = add i32 %9, %0"];
	Node0xc902b0[shape=record, label="  %17 = sub i32 %16, %1"];
	Node0xc90320[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xc90390[shape=record, label="  %19 = add i32 %18, %6"];
	Node0xc90400[shape=record, label="  %20 = sub i32 %19, %8"];
	Node0xc90470[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xc904e0[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0xc90550[shape=record, label="  %23 = add i32 %22, %4"];
	Node0xc905c0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0xc90630[shape=record, label="  %25 = add i32 %24, %15"];
	Node0xc906a0[shape=record, label="  %26 = icmp eq i32 %5, %25"];
	Node0xc30268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc90b40[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xc90b90[shape=record, label="  ret void"];
	Node0xc8fb80 -> Node0xc8fbf0;
	Node0xc8fbf0 -> Node0xc8fcb0;
	Node0xc8fcb0 -> Node0xc8fd20;
	Node0xc8fd20 -> Node0xc8fd90;
	Node0xc8fd90 -> Node0xc8fe00;
	Node0xc8fe00 -> Node0xc8fea0;
	Node0xc8fea0 -> Node0xc8ff10;
	Node0xc8ff10 -> Node0xc8ff80;
	Node0xc8ff80 -> Node0xc8fff0;
	Node0xc8fff0 -> Node0xc90090;
	Node0xc90090 -> Node0xc90130;
	Node0xc90130 -> Node0xc901d0;
	Node0xc901d0 -> Node0xc90240;
	Node0xc90240 -> Node0xc902b0;
	Node0xc902b0 -> Node0xc90320;
	Node0xc90320 -> Node0xc90390;
	Node0xc90390 -> Node0xc90400;
	Node0xc90400 -> Node0xc90470;
	Node0xc90470 -> Node0xc904e0;
	Node0xc904e0 -> Node0xc90550;
	Node0xc90550 -> Node0xc905c0;
	Node0xc905c0 -> Node0xc90630;
	Node0xc90630 -> Node0xc906a0;
	Node0xc906a0 -> Node0xc30268;
	Node0xc30268 -> Node0xc90b40;
	Node0xc90b40 -> Node0xc90b90;
edge [color=red]
	Node0xc8fbf0 -> Node0xc8fcb0;
	Node0xc8fd90 -> Node0xc8fe00;
	Node0xc8fb80 -> Node0xc8fea0;
	Node0xc8fb80 -> Node0xc8ff10;
	Node0xc8fb80 -> Node0xc8ff80;
	Node0xc8fd20 -> Node0xc8fff0;
	Node0xc8fff0 -> Node0xc90090;
	Node0xc8fe00 -> Node0xc90130;
	Node0xc90130 -> Node0xc901d0;
	Node0xc8fea0 -> Node0xc90240;
	Node0xc90240 -> Node0xc902b0;
	Node0xc902b0 -> Node0xc90320;
	Node0xc8fd90 -> Node0xc90320;
	Node0xc90320 -> Node0xc90390;
	Node0xc8fd20 -> Node0xc90390;
	Node0xc90390 -> Node0xc90400;
	Node0xc8fe00 -> Node0xc90400;
	Node0xc90400 -> Node0xc90470;
	Node0xc8ff10 -> Node0xc90470;
	Node0xc90470 -> Node0xc904e0;
	Node0xc8ff80 -> Node0xc904e0;
	Node0xc904e0 -> Node0xc90550;
	Node0xc8fbf0 -> Node0xc90550;
	Node0xc90550 -> Node0xc905c0;
	Node0xc90090 -> Node0xc905c0;
	Node0xc905c0 -> Node0xc90630;
	Node0xc901d0 -> Node0xc90630;
	Node0xc8fcb0 -> Node0xc906a0;
	Node0xc90630 -> Node0xc906a0;
	Node0xc906a0 -> Node0xc30268;
	Node0xc30268 -> Node0xc90b40;
}
