digraph "DFG for'crackme' function" {
	Node0x1e3f5a0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1e3f610[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x1e3fce0[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x1e3fd80[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1e3fdf0[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1e3fe60[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1e3fed0[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1e3ff70[shape=record, label="  %10 = xor i32 %5, -2"];
	Node0x1e3ffe0[shape=record, label="  %11 = shl i32 %3, 1"];
	Node0x1e40050[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1e400c0[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x1e40130[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x1e401a0[shape=record, label="  %15 = and i32 %6, %0"];
	Node0x1e40240[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x1e402e0[shape=record, label="  %17 = mul i32 %8, 6"];
	Node0x1e40350[shape=record, label="  %18 = shl i32 %4, 1"];
	Node0x1e403f0[shape=record, label="  %19 = sub i32 3, %5"];
	Node0x1e40460[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0x1e404d0[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x1e40540[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x1e405b0[shape=record, label="  %23 = sub i32 %22, %14"];
	Node0x1e40620[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1e40690[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x1e40700[shape=record, label="  %26 = add i32 %25, %18"];
	Node0x1e40770[shape=record, label="  %27 = add i32 %26, %12"];
	Node0x1e407e0[shape=record, label="  %28 = icmp eq i32 %3, %27"];
	Node0x1de0268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e40c80[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x1e40cd0[shape=record, label="  ret void"];
	Node0x1e3f5a0 -> Node0x1e3f610;
	Node0x1e3f610 -> Node0x1e3fce0;
	Node0x1e3fce0 -> Node0x1e3fd80;
	Node0x1e3fd80 -> Node0x1e3fdf0;
	Node0x1e3fdf0 -> Node0x1e3fe60;
	Node0x1e3fe60 -> Node0x1e3fed0;
	Node0x1e3fed0 -> Node0x1e3ff70;
	Node0x1e3ff70 -> Node0x1e3ffe0;
	Node0x1e3ffe0 -> Node0x1e40050;
	Node0x1e40050 -> Node0x1e400c0;
	Node0x1e400c0 -> Node0x1e40130;
	Node0x1e40130 -> Node0x1e401a0;
	Node0x1e401a0 -> Node0x1e40240;
	Node0x1e40240 -> Node0x1e402e0;
	Node0x1e402e0 -> Node0x1e40350;
	Node0x1e40350 -> Node0x1e403f0;
	Node0x1e403f0 -> Node0x1e40460;
	Node0x1e40460 -> Node0x1e404d0;
	Node0x1e404d0 -> Node0x1e40540;
	Node0x1e40540 -> Node0x1e405b0;
	Node0x1e405b0 -> Node0x1e40620;
	Node0x1e40620 -> Node0x1e40690;
	Node0x1e40690 -> Node0x1e40700;
	Node0x1e40700 -> Node0x1e40770;
	Node0x1e40770 -> Node0x1e407e0;
	Node0x1e407e0 -> Node0x1de0268;
	Node0x1de0268 -> Node0x1e40c80;
	Node0x1e40c80 -> Node0x1e40cd0;
edge [color=red]
	Node0x1e3fd80 -> Node0x1e3fdf0;
	Node0x1e3fe60 -> Node0x1e3fed0;
	Node0x1e3fce0 -> Node0x1e3ff70;
	Node0x1e3f5a0 -> Node0x1e3ffe0;
	Node0x1e3ffe0 -> Node0x1e40050;
	Node0x1e400c0 -> Node0x1e40130;
	Node0x1e3fd80 -> Node0x1e401a0;
	Node0x1e401a0 -> Node0x1e40240;
	Node0x1e3fe60 -> Node0x1e402e0;
	Node0x1e3f610 -> Node0x1e40350;
	Node0x1e3fce0 -> Node0x1e403f0;
	Node0x1e403f0 -> Node0x1e40460;
	Node0x1e3fdf0 -> Node0x1e40460;
	Node0x1e40460 -> Node0x1e404d0;
	Node0x1e3fed0 -> Node0x1e404d0;
	Node0x1e404d0 -> Node0x1e40540;
	Node0x1e3ff70 -> Node0x1e40540;
	Node0x1e40540 -> Node0x1e405b0;
	Node0x1e40130 -> Node0x1e405b0;
	Node0x1e405b0 -> Node0x1e40620;
	Node0x1e40240 -> Node0x1e40620;
	Node0x1e40620 -> Node0x1e40690;
	Node0x1e402e0 -> Node0x1e40690;
	Node0x1e40690 -> Node0x1e40700;
	Node0x1e40350 -> Node0x1e40700;
	Node0x1e40700 -> Node0x1e40770;
	Node0x1e40050 -> Node0x1e40770;
	Node0x1e3f5a0 -> Node0x1e407e0;
	Node0x1e40770 -> Node0x1e407e0;
	Node0x1e407e0 -> Node0x1de0268;
	Node0x1de0268 -> Node0x1e40c80;
}
