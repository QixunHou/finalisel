; ModuleID = '../.././c_source_file/0242_path_condition_crackme.c'
source_filename = "../.././c_source_file/0242_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %1
  %10 = xor i32 %3, -1
  %11 = xor i32 %5, %4
  %12 = or i32 %11, %10
  %13 = shl i32 %12, 1
  %14 = add i32 %13, %9
  %15 = sub i32 0, %14
  %16 = and i32 %1, %0
  %17 = or i32 %16, %8
  %18 = xor i32 %1, -1
  %19 = or i32 %18, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %2, %1
  %22 = xor i32 %21, -1
  %23 = or i32 %22, %20
  %24 = and i32 %18, %2
  %25 = and i32 %24, %0
  %26 = xor i32 %0, -1
  %27 = or i32 %18, %2
  %28 = and i32 %27, %26
  %29 = xor i32 %28, -1
  %30 = xor i32 %25, %29
  %31 = or i32 %1, %0
  %32 = and i32 %31, %22
  %33 = or i32 %21, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %25, %34
  %36 = or i32 %7, %20
  %37 = and i32 %2, %1
  %38 = and i32 %37, %26
  %39 = or i32 %2, %1
  %40 = and i32 %39, %0
  %41 = or i32 %38, %40
  %42 = or i32 %21, %26
  %43 = shl i32 %42, 1
  %44 = and i32 %2, %0
  %45 = xor i32 %2, -1
  %46 = and i32 %45, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %44, %47
  %49 = and i32 %24, %26
  %50 = and i32 %27, %0
  %51 = xor i32 %50, 2147483647
  %52 = xor i32 %51, %49
  %53 = shl i32 %52, 1
  %54 = xor i32 %31, -1
  %55 = or i32 %8, %54
  %56 = and i32 %39, %26
  %57 = or i32 %45, %1
  %58 = xor i32 %57, %0
  %59 = xor i32 %39, -1
  %60 = or i32 %44, %59
  %61 = and i32 %18, %0
  %62 = or i32 %37, %61
  %63 = xor i32 %39, %16
  %64 = or i32 %37, %26
  %65 = or i32 %16, %45
  %66 = and i32 %45, %0
  %67 = or i32 %66, %37
  %68 = xor i32 %1, %0
  %69 = and i32 %68, %45
  %70 = or i32 %21, %61
  %71 = and i32 %7, %68
  %72 = xor i32 %16, %2
  %73 = or i32 %8, %20
  %74 = or i32 %21, %54
  %75 = xor i32 %66, -1
  %76 = and i32 %68, %75
  %77 = xor i32 %44, %1
  %78 = or i32 %16, %22
  %79 = or i32 %2, %0
  %80 = xor i32 %68, -1
  %81 = and i32 %79, %80
  %82 = or i32 %37, %0
  %83 = and i32 %37, %0
  %84 = xor i32 %39, %0
  %85 = or i32 %83, %84
  %86 = xor i32 %21, %0
  %87 = xor i32 %83, %86
  %88 = or i32 %83, %56
  %89 = and i32 %31, %2
  %90 = xor i32 %61, -1
  %91 = and i32 %21, %90
  %92 = xor i32 %42, -1
  %93 = or i32 %49, %92
  %94 = or i32 %25, %86
  %95 = shl i32 %94, 1
  %96 = or i32 %54, %2
  %97 = or i32 %57, %26
  %98 = or i32 %21, %16
  %99 = xor i32 %57, -1
  %100 = xor i32 %99, %0
  %101 = and i32 %7, %80
  %102 = xor i32 %79, -1
  %103 = or i32 %68, %102
  %104 = or i32 %61, %22
  %105 = and i32 %31, %8
  %106 = xor i32 %83, -1
  %107 = xor i32 %56, %106
  %108 = or i32 %44, %1
  %109 = shl i32 %20, 2
  %110 = xor i32 %19, %2
  %111 = or i32 %7, %1
  %112 = shl i32 %111, 1
  %113 = xor i32 %79, %1
  %114 = xor i32 %16, -1
  %115 = and i32 %8, %114
  %116 = or i32 %66, %18
  %117 = or i32 %66, %80
  %118 = or i32 %7, %68
  %119 = shl i32 %118, 2
  %120 = xor i32 %79, %16
  %121 = and i32 %79, %18
  %122 = and i32 %21, %26
  %123 = xor i32 %122, 2147483647
  %124 = xor i32 %123, %83
  %125 = and i32 %79, %1
  %126 = or i32 %61, %45
  %127 = or i32 %7, %80
  %128 = and i32 %45, %90
  %129 = xor i32 %86, -1
  %130 = or i32 %83, %129
  %131 = xor i32 %37, -1
  %132 = xor i32 %61, %131
  %133 = or i32 %66, %1
  %134 = and i32 %75, %80
  %135 = shl i32 %134, 2
  %136 = and i32 %90, %2
  %137 = or i32 %7, %18
  %138 = shl i32 %86, 1
  %139 = or i32 %68, %45
  %140 = and i32 %21, %0
  %141 = xor i32 %140, -1
  %142 = xor i32 %38, %141
  %143 = or i32 %8, %18
  %144 = and i32 %80, %2
  %145 = and i32 %68, %8
  %146 = xor i32 %47, %0
  %147 = or i32 %46, %61
  %148 = shl i32 %147, 1
  %149 = or i32 %25, %28
  %150 = and i32 %57, %0
  %151 = shl i32 %150, 1
  %152 = or i32 %102, %18
  %153 = xor i32 %27, %0
  %154 = xor i32 %153, 2147483647
  %155 = xor i32 %154, %25
  %156 = shl i32 %155, 1
  %157 = and i32 %22, %0
  %158 = or i32 %45, %0
  %159 = xor i32 %158, -1
  %160 = or i32 %159, %80
  %161 = or i32 %39, %26
  %162 = shl i32 %161, 1
  %163 = xor i32 %20, %2
  %164 = xor i32 %22, %0
  %165 = or i32 %22, %54
  %166 = or i32 %25, %153
  %167 = or i32 %16, %59
  %168 = xor i32 %44, -1
  %169 = and i32 %68, %168
  %170 = or i32 %46, %26
  %171 = and i32 %114, %2
  %172 = or i32 %16, %159
  %173 = or i32 %20, %2
  %174 = and i32 %158, %18
  %175 = shl i32 %174, 1
  %176 = xor i32 %66, %1
  %177 = or i32 %45, %20
  %178 = or i32 %61, %8
  %179 = and i32 %21, %114
  %180 = or i32 %44, %54
  %181 = and i32 %7, %90
  %182 = or i32 %7, %16
  %183 = or i32 %99, %26
  %184 = shl i32 %61, 2
  %185 = or i32 %66, %99
  %186 = or i32 %83, %122
  %187 = xor i32 %66, %131
  %188 = and i32 %7, %114
  %189 = xor i32 %114, %2
  %190 = or i32 %7, %54
  %191 = or i32 %68, %2
  %192 = and i32 %22, %26
  %193 = or i32 %47, %26
  %194 = or i32 %68, %159
  %195 = xor i32 %54, %2
  %196 = or i32 %61, %2
  %197 = or i32 %22, %0
  %198 = xor i32 %158, %16
  %199 = xor i32 %84, %106
  %200 = and i32 %31, %45
  %201 = and i32 %47, %26
  %202 = and i32 %131, %0
  %203 = shl i32 %202, 1
  %204 = and i32 %19, %45
  %205 = and i32 %7, %31
  %206 = or i32 %16, %2
  %207 = and i32 %7, %19
  %208 = add i32 %46, 1
  %209 = or i32 %59, %26
  %210 = or i32 %66, %68
  %211 = or i32 %80, %2
  %212 = shl i32 %211, 1
  %213 = or i32 %49, %50
  %214 = or i32 %45, %54
  %215 = and i32 %21, %31
  %216 = xor i32 %159, %1
  %217 = and i32 %168, %18
  %218 = or i32 %102, %1
  %219 = shl i32 %39, 1
  %220 = or i32 %131, %0
  %221 = xor i32 %66, %57
  %222 = and i32 %158, %1
  %223 = and i32 %75, %18
  %224 = and i32 %131, %26
  %225 = or i32 %44, %46
  %226 = or i32 %159, %1
  %227 = shl i32 %90, 1
  %228 = or i32 %99, %0
  %229 = and i32 %59, %26
  %230 = mul i32 %229, -10
  %231 = and i32 %46, %26
  %232 = mul i32 %231, -6
  %233 = and i32 %59, %0
  %234 = and i32 %46, %0
  %235 = and i32 %99, %26
  %236 = shl i32 %235, 1
  %237 = and i32 %99, %0
  %238 = shl i32 %237, 2
  %239 = shl i32 %5, 1
  %240 = and i32 %10, %4
  %241 = xor i32 %240, -1
  %242 = xor i32 %5, %3
  %243 = and i32 %242, %241
  %244 = xor i32 %5, -1
  %245 = and i32 %244, %4
  %246 = xor i32 %245, %3
  %247 = xor i32 %11, -1
  %248 = or i32 %247, %10
  %249 = xor i32 %4, %3
  %250 = xor i32 %249, -1
  %251 = or i32 %250, %5
  %252 = or i32 %247, %3
  %253 = shl i32 %252, 1
  %254 = and i32 %4, %3
  %255 = xor i32 %254, -1
  %256 = and i32 %244, %255
  %257 = and i32 %241, %5
  %258 = shl i32 %257, 1
  %259 = or i32 %4, %3
  %260 = and i32 %259, %247
  %261 = and i32 %5, %3
  %262 = and i32 %261, %4
  %263 = or i32 %5, %3
  %264 = xor i32 %263, %4
  %265 = xor i32 %264, -1
  %266 = xor i32 %262, %265
  %267 = xor i32 %245, -1
  %268 = add i32 %245, 1
  %269 = xor i32 %4, -1
  %270 = xor i32 %261, -1
  %271 = and i32 %270, %269
  %272 = shl i32 %271, 1
  %273 = xor i32 %259, -1
  %274 = xor i32 %273, %5
  %275 = shl i32 %274, 1
  %276 = and i32 %5, %4
  %277 = xor i32 %276, -1
  %278 = and i32 %277, %250
  %279 = xor i32 %267, %3
  %280 = or i32 %247, %250
  %281 = and i32 %244, %241
  %282 = and i32 %249, %277
  %283 = and i32 %11, %250
  %284 = or i32 %11, %249
  %285 = xor i32 %242, %4
  %286 = xor i32 %262, %285
  %287 = shl i32 %286, 1
  %288 = or i32 %240, %5
  %289 = or i32 %276, %249
  %290 = xor i32 %263, %254
  %291 = or i32 %244, %3
  %292 = xor i32 %291, %4
  %293 = and i32 %261, %269
  %294 = and i32 %263, %4
  %295 = xor i32 %294, -1
  %296 = xor i32 %293, %295
  %297 = or i32 %5, %4
  %298 = and i32 %244, %250
  %299 = and i32 %242, %255
  %300 = xor i32 %291, %254
  %301 = xor i32 %276, %263
  %302 = xor i32 %291, -1
  %303 = and i32 %297, %249
  %304 = or i32 %10, %4
  %305 = xor i32 %304, %5
  %306 = or i32 %273, %5
  %307 = or i32 %276, %250
  %308 = shl i32 %307, 1
  %309 = and i32 %244, %3
  %310 = or i32 %309, %269
  %311 = or i32 %11, %3
  %312 = or i32 %276, %10
  %313 = xor i32 %245, %291
  %314 = or i32 %254, %302
  %315 = xor i32 %309, -1
  %316 = and i32 %10, %5
  %317 = and i32 %316, %4
  %318 = or i32 %10, %5
  %319 = xor i32 %318, %4
  %320 = or i32 %317, %319
  %321 = xor i32 %242, -1
  %322 = and i32 %259, %321
  %323 = or i32 %276, %3
  %324 = or i32 %321, %269
  %325 = or i32 %244, %4
  %326 = and i32 %325, %3
  %327 = and i32 %297, %10
  %328 = shl i32 %327, 1
  %329 = and i32 %316, %269
  %330 = or i32 %242, %269
  %331 = xor i32 %329, %330
  %332 = shl i32 %331, 1
  %333 = or i32 %309, %4
  %334 = xor i32 %297, %254
  %335 = xor i32 %285, -1
  %336 = xor i32 %317, %335
  %337 = and i32 %325, %249
  %338 = or i32 %11, %254
  %339 = xor i32 %304, -1
  %340 = or i32 %339, %5
  %341 = and i32 %263, %269
  %342 = or i32 %245, %3
  %343 = or i32 %242, %4
  %344 = xor i32 %317, %343
  %345 = xor i32 %325, -1
  %346 = or i32 %254, %345
  %347 = shl i32 %346, 1
  %348 = and i32 %11, %304
  %349 = or i32 %244, %339
  %350 = xor i32 %319, 2147483647
  %351 = xor i32 %350, %317
  %352 = or i32 %321, %339
  %353 = or i32 %315, %269
  %354 = and i32 %277, %10
  %355 = or i32 %245, %302
  %356 = shl i32 %355, 1
  %357 = xor i32 %276, %259
  %358 = shl i32 %357, 1
  %359 = and i32 %315, %4
  %360 = and i32 %249, %267
  %361 = and i32 %297, %3
  %362 = and i32 %321, %241
  %363 = shl i32 %362, 1
  %364 = add i32 %11, 1
  %365 = xor i32 %297, %3
  %366 = or i32 %309, %240
  %367 = xor i32 %345, %3
  %368 = shl i32 %367, 1
  %369 = and i32 %267, %10
  %370 = and i32 %270, %4
  %371 = and i32 %11, %255
  %372 = xor i32 %330, 2147483647
  %373 = or i32 %372, %329
  %374 = xor i32 %276, %3
  %375 = or i32 %263, %269
  %376 = or i32 %276, %273
  %377 = shl i32 %376, 1
  %378 = or i32 %321, %4
  %379 = xor i32 %262, %378
  %380 = xor i32 %263, -1
  %381 = and i32 %380, %269
  %382 = mul i32 %381, -9
  %383 = and i32 %309, %269
  %384 = and i32 %380, %4
  %385 = and i32 %309, %4
  %386 = and i32 %302, %269
  %387 = and i32 %302, %4
  %388 = shl i32 %387, 3
  %389 = shl i32 %262, 1
  %390 = add i32 %96, %191
  %391 = add i32 %390, %59
  %392 = add i32 %391, %234
  %393 = add i32 %392, %224
  %394 = add i32 %393, %207
  %395 = add i32 %394, %104
  %396 = add i32 %395, %101
  %397 = add i32 %396, %70
  %398 = add i32 %397, %67
  %399 = add i32 %398, %56
  %400 = add i32 %399, %55
  %401 = add i32 %400, %339
  %402 = add i32 %401, %241
  %403 = add i32 %402, %213
  %404 = add i32 %403, %349
  %405 = add i32 %404, %124
  %406 = add i32 %405, %310
  %407 = add i32 %406, %299
  %408 = add i32 %407, %248
  %409 = add i32 %408, %351
  %410 = add i32 %409, %373
  %411 = shl i32 %410, 1
  %412 = add i32 %223, %83
  %413 = add i32 %412, %58
  %414 = add i32 %413, %361
  %415 = sub i32 %414, %293
  %416 = add i32 %415, %352
  %417 = mul i32 %416, 3
  %418 = sub i32 %221, %125
  %419 = add i32 %418, %313
  %420 = add i32 %419, %348
  %421 = sub i32 %420, %282
  %422 = mul i32 %421, 5
  %423 = or i32 %38, %233
  %424 = add i32 %423, %210
  %425 = add i32 %424, %185
  %426 = add i32 %425, %77
  %427 = shl i32 %426, 2
  %428 = sub i32 %386, %384
  %429 = mul i32 %428, 7
  %430 = sub i32 -2, %1
  %431 = add i32 %430, %68
  %432 = sub i32 %431, %16
  %433 = add i32 %432, %45
  %434 = add i32 %433, %54
  %435 = add i32 %434, %65
  %436 = sub i32 %435, %69
  %437 = sub i32 %436, %72
  %438 = add i32 %437, %7
  %439 = sub i32 %438, %89
  %440 = sub i32 %439, %109
  %441 = add i32 %440, %110
  %442 = sub i32 %441, %126
  %443 = add i32 %442, %128
  %444 = sub i32 %443, %136
  %445 = sub i32 %444, %139
  %446 = add i32 %445, %75
  %447 = add i32 %446, %144
  %448 = sub i32 %447, %163
  %449 = add i32 %448, %171
  %450 = add i32 %449, %173
  %451 = add i32 %450, %177
  %452 = add i32 %451, %99
  %453 = sub i32 %452, %184
  %454 = add i32 %453, %22
  %455 = add i32 %454, %189
  %456 = sub i32 %455, %195
  %457 = sub i32 %456, %196
  %458 = sub i32 %457, %200
  %459 = sub i32 %458, %204
  %460 = sub i32 %459, %206
  %461 = add i32 %460, %208
  %462 = add i32 %461, %214
  %463 = sub i32 %462, %227
  %464 = sub i32 %463, %17
  %465 = add i32 %464, %23
  %466 = sub i32 %465, %32
  %467 = add i32 %466, %36
  %468 = sub i32 %467, %48
  %469 = sub i32 %468, %60
  %470 = sub i32 %469, %62
  %471 = add i32 %470, %63
  %472 = add i32 %471, %64
  %473 = add i32 %472, %71
  %474 = add i32 %473, %73
  %475 = sub i32 %474, %74
  %476 = sub i32 %475, %76
  %477 = sub i32 %476, %78
  %478 = sub i32 %477, %81
  %479 = add i32 %478, %82
  %480 = add i32 %479, %91
  %481 = sub i32 %480, %97
  %482 = add i32 %481, %98
  %483 = sub i32 %482, %100
  %484 = add i32 %483, %103
  %485 = add i32 %484, %105
  %486 = add i32 %485, %108
  %487 = sub i32 %486, %113
  %488 = sub i32 %487, %115
  %489 = add i32 %488, %116
  %490 = sub i32 %489, %117
  %491 = sub i32 %490, %120
  %492 = sub i32 %491, %121
  %493 = add i32 %492, %127
  %494 = sub i32 %493, %122
  %495 = add i32 %494, %132
  %496 = sub i32 %495, %133
  %497 = add i32 %496, %137
  %498 = sub i32 %497, %84
  %499 = sub i32 %498, %143
  %500 = add i32 %499, %145
  %501 = sub i32 %500, %146
  %502 = add i32 %501, %152
  %503 = add i32 %502, %157
  %504 = add i32 %503, %160
  %505 = sub i32 %504, %164
  %506 = sub i32 %505, %165
  %507 = add i32 %506, %167
  %508 = sub i32 %507, %169
  %509 = sub i32 %508, %170
  %510 = add i32 %509, %172
  %511 = add i32 %510, %40
  %512 = add i32 %511, %176
  %513 = sub i32 %512, %178
  %514 = sub i32 %513, %179
  %515 = add i32 %514, %180
  %516 = sub i32 %515, %181
  %517 = add i32 %516, %182
  %518 = sub i32 %517, %183
  %519 = sub i32 %518, %187
  %520 = sub i32 %519, %188
  %521 = sub i32 %520, %190
  %522 = sub i32 %521, %192
  %523 = add i32 %522, %193
  %524 = sub i32 %523, %194
  %525 = sub i32 %524, %197
  %526 = sub i32 %525, %198
  %527 = sub i32 %526, %201
  %528 = sub i32 %527, %205
  %529 = add i32 %528, %209
  %530 = sub i32 %529, %212
  %531 = add i32 %530, %215
  %532 = add i32 %531, %216
  %533 = add i32 %532, %217
  %534 = add i32 %533, %218
  %535 = sub i32 %534, %219
  %536 = add i32 %535, %220
  %537 = add i32 %536, %222
  %538 = sub i32 %537, %225
  %539 = add i32 %538, %226
  %540 = add i32 %539, %228
  %541 = sub i32 %540, %30
  %542 = sub i32 %541, %35
  %543 = add i32 %542, %41
  %544 = sub i32 %543, %43
  %545 = sub i32 %544, %85
  %546 = add i32 %545, %87
  %547 = sub i32 %546, %88
  %548 = sub i32 %547, %93
  %549 = sub i32 %548, %107
  %550 = sub i32 %549, %112
  %551 = sub i32 %550, %119
  %552 = add i32 %551, %130
  %553 = sub i32 %552, %135
  %554 = sub i32 %553, %138
  %555 = add i32 %554, %142
  %556 = sub i32 %555, %148
  %557 = add i32 %556, %149
  %558 = sub i32 %557, %151
  %559 = sub i32 %558, %162
  %560 = sub i32 %559, %166
  %561 = sub i32 %560, %175
  %562 = add i32 %561, %186
  %563 = add i32 %562, %199
  %564 = sub i32 %563, %203
  %565 = add i32 %564, %230
  %566 = add i32 %565, %232
  %567 = sub i32 %566, %236
  %568 = sub i32 %567, %238
  %569 = add i32 %568, %254
  %570 = sub i32 %569, %95
  %571 = sub i32 %570, %239
  %572 = sub i32 %571, %251
  %573 = add i32 %572, %256
  %574 = add i32 %573, %268
  %575 = add i32 %574, %281
  %576 = add i32 %575, %276
  %577 = add i32 %576, %288
  %578 = sub i32 %577, %297
  %579 = sub i32 %578, %298
  %580 = add i32 %579, %302
  %581 = add i32 %580, %305
  %582 = add i32 %581, %306
  %583 = add i32 %582, %315
  %584 = sub i32 %583, %11
  %585 = add i32 %584, %340
  %586 = add i32 %585, %270
  %587 = add i32 %586, %245
  %588 = add i32 %587, %364
  %589 = sub i32 %588, %53
  %590 = sub i32 %589, %156
  %591 = sub i32 %590, %243
  %592 = add i32 %591, %246
  %593 = sub i32 %592, %258
  %594 = add i32 %593, %260
  %595 = sub i32 %594, %275
  %596 = add i32 %595, %278
  %597 = sub i32 %596, %279
  %598 = sub i32 %597, %280
  %599 = sub i32 %598, %283
  %600 = add i32 %599, %284
  %601 = add i32 %600, %289
  %602 = sub i32 %601, %290
  %603 = add i32 %602, %292
  %604 = sub i32 %603, %300
  %605 = add i32 %604, %301
  %606 = add i32 %605, %303
  %607 = sub i32 %606, %311
  %608 = sub i32 %607, %312
  %609 = sub i32 %608, %314
  %610 = sub i32 %609, %322
  %611 = add i32 %610, %323
  %612 = add i32 %611, %324
  %613 = sub i32 %612, %326
  %614 = sub i32 %613, %333
  %615 = sub i32 %614, %334
  %616 = sub i32 %615, %337
  %617 = add i32 %616, %338
  %618 = sub i32 %617, %341
  %619 = sub i32 %618, %342
  %620 = sub i32 %619, %353
  %621 = sub i32 %620, %264
  %622 = sub i32 %621, %354
  %623 = add i32 %622, %359
  %624 = sub i32 %623, %360
  %625 = sub i32 %624, %365
  %626 = sub i32 %625, %366
  %627 = add i32 %626, %369
  %628 = add i32 %627, %370
  %629 = add i32 %628, %371
  %630 = sub i32 %629, %374
  %631 = add i32 %630, %375
  %632 = sub i32 %631, %383
  %633 = sub i32 %632, %385
  %634 = sub i32 %633, %253
  %635 = add i32 %634, %266
  %636 = sub i32 %635, %272
  %637 = add i32 %636, %296
  %638 = sub i32 %637, %308
  %639 = sub i32 %638, %320
  %640 = sub i32 %639, %328
  %641 = add i32 %640, %336
  %642 = sub i32 %641, %344
  %643 = sub i32 %642, %347
  %644 = sub i32 %643, %356
  %645 = sub i32 %644, %358
  %646 = sub i32 %645, %363
  %647 = sub i32 %646, %368
  %648 = sub i32 %647, %377
  %649 = add i32 %648, %379
  %650 = add i32 %649, %382
  %651 = add i32 %650, %388
  %652 = sub i32 %651, %389
  %653 = sub i32 %652, %287
  %654 = sub i32 %653, %332
  %655 = add i32 %654, %427
  %656 = add i32 %655, %429
  %657 = add i32 %656, %422
  %658 = add i32 %657, %417
  %659 = add i32 %658, %411
  %660 = icmp eq i32 %659, %15
  %661 = select i1 %660, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %662 = tail call i32 @puts(i8* nonnull dereferenceable(1) %661)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
