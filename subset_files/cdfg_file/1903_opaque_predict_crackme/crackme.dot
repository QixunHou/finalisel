digraph "DFG for'crackme' function" {
	Node0x249fb80[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x249fbf0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x249fcb0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x249fd20[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x249fd90[shape=record, label="  %7 = mul i32 %6, 3"];
	Node0x249fe00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x249fe70[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x249fee0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x249ff50[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x249fff0[shape=record, label="  %12 = mul i32 %11, -6"];
	Node0x24a0090[shape=record, label="  %13 = shl i32 %4, 1"];
	Node0x24a0130[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x24a01d0[shape=record, label="  %15 = shl i32 %8, 2"];
	Node0x24a0240[shape=record, label="  %16 = shl i32 %0, 1"];
	Node0x24a02b0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x24a0320[shape=record, label="  %18 = add i32 %17, %1"];
	Node0x24a0390[shape=record, label="  %19 = add i32 %18, %4"];
	Node0x24a0400[shape=record, label="  %20 = sub i32 %19, %5"];
	Node0x24a0470[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x24a04e0[shape=record, label="  %22 = add i32 %21, %7"];
	Node0x24a0550[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x24a05c0[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x24a0630[shape=record, label="  %25 = sub i32 %24, %14"];
	Node0x24a06a0[shape=record, label="  %26 = icmp eq i32 %25, -1"];
	Node0x2440268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24a0b40[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x24a0b90[shape=record, label="  ret void"];
	Node0x249fb80 -> Node0x249fbf0;
	Node0x249fbf0 -> Node0x249fcb0;
	Node0x249fcb0 -> Node0x249fd20;
	Node0x249fd20 -> Node0x249fd90;
	Node0x249fd90 -> Node0x249fe00;
	Node0x249fe00 -> Node0x249fe70;
	Node0x249fe70 -> Node0x249fee0;
	Node0x249fee0 -> Node0x249ff50;
	Node0x249ff50 -> Node0x249fff0;
	Node0x249fff0 -> Node0x24a0090;
	Node0x24a0090 -> Node0x24a0130;
	Node0x24a0130 -> Node0x24a01d0;
	Node0x24a01d0 -> Node0x24a0240;
	Node0x24a0240 -> Node0x24a02b0;
	Node0x24a02b0 -> Node0x24a0320;
	Node0x24a0320 -> Node0x24a0390;
	Node0x24a0390 -> Node0x24a0400;
	Node0x24a0400 -> Node0x24a0470;
	Node0x24a0470 -> Node0x24a04e0;
	Node0x24a04e0 -> Node0x24a0550;
	Node0x24a0550 -> Node0x24a05c0;
	Node0x24a05c0 -> Node0x24a0630;
	Node0x24a0630 -> Node0x24a06a0;
	Node0x24a06a0 -> Node0x2440268;
	Node0x2440268 -> Node0x24a0b40;
	Node0x24a0b40 -> Node0x24a0b90;
edge [color=red]
	Node0x249fb80 -> Node0x249fbf0;
	Node0x249fcb0 -> Node0x249fd20;
	Node0x249fd20 -> Node0x249fd90;
	Node0x249fe00 -> Node0x249fe70;
	Node0x249fee0 -> Node0x249ff50;
	Node0x249ff50 -> Node0x249fff0;
	Node0x249fbf0 -> Node0x24a0090;
	Node0x24a0090 -> Node0x24a0130;
	Node0x249fe00 -> Node0x24a01d0;
	Node0x24a0240 -> Node0x24a02b0;
	Node0x24a02b0 -> Node0x24a0320;
	Node0x24a0320 -> Node0x24a0390;
	Node0x249fbf0 -> Node0x24a0390;
	Node0x24a0390 -> Node0x24a0400;
	Node0x249fcb0 -> Node0x24a0400;
	Node0x24a0400 -> Node0x24a0470;
	Node0x249fe70 -> Node0x24a0470;
	Node0x24a0470 -> Node0x24a04e0;
	Node0x249fd90 -> Node0x24a04e0;
	Node0x24a04e0 -> Node0x24a0550;
	Node0x249fff0 -> Node0x24a0550;
	Node0x24a0550 -> Node0x24a05c0;
	Node0x24a01d0 -> Node0x24a05c0;
	Node0x24a05c0 -> Node0x24a0630;
	Node0x24a0130 -> Node0x24a0630;
	Node0x24a0630 -> Node0x24a06a0;
	Node0x24a06a0 -> Node0x2440268;
	Node0x2440268 -> Node0x24a0b40;
}
