digraph "DFG for'crackme' function" {
	Node0x1975d50[shape=record, label="  %5 = sub i32 -3, %3"];
	Node0x1975dc0[shape=record, label="  %6 = and i32 %2, %1"];
	Node0x1975e60[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1975ed0[shape=record, label="  %8 = xor i32 %2, -1"];
	Node0x1975f40[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x1975fb0[shape=record, label="  %10 = or i32 %9, %2"];
	Node0x1976050[shape=record, label="  %11 = mul i32 %8, 3"];
	Node0x19760c0[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0x1976160[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x1976200[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x1976270[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x19762e0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x1976350[shape=record, label="  %17 = xor i32 %15, -1"];
	Node0x19763f0[shape=record, label="  %18 = mul i32 %17, -6"];
	Node0x1976460[shape=record, label="  %19 = shl i32 %3, 1"];
	Node0x19764d0[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x1976540[shape=record, label="  %21 = and i32 %20, %3"];
	Node0x19765b0[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x1976620[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x1976690[shape=record, label="  %24 = shl i32 %20, 1"];
	Node0x1976700[shape=record, label="  %25 = or i32 %3, %0"];
	Node0x1976770[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x19767e0[shape=record, label="  %27 = xor i32 %26, -1"];
	Node0x1976850[shape=record, label="  %28 = shl i32 %25, 1"];
	Node0x19768c0[shape=record, label="  %29 = xor i32 %28, -2"];
	Node0x1976960[shape=record, label="  %30 = xor i32 %3, 2147483647"];
	Node0x19769d0[shape=record, label="  %31 = and i32 %30, %0"];
	Node0x1976a40[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0x1976cc0[shape=record, label="  %33 = sub i32 1, %0"];
	Node0x1976d30[shape=record, label="  %34 = sub i32 %33, %1"];
	Node0x1976da0[shape=record, label="  %35 = sub i32 %34, %24"];
	Node0x1976e10[shape=record, label="  %36 = add i32 %35, %2"];
	Node0x1976e80[shape=record, label="  %37 = add i32 %36, %7"];
	Node0x1976ef0[shape=record, label="  %38 = add i32 %37, %10"];
	Node0x1976f60[shape=record, label="  %39 = add i32 %38, %11"];
	Node0x1976fd0[shape=record, label="  %40 = sub i32 %39, %16"];
	Node0x1977040[shape=record, label="  %41 = add i32 %40, %18"];
	Node0x19770b0[shape=record, label="  %42 = sub i32 %41, %19"];
	Node0x1977120[shape=record, label="  %43 = add i32 %42, %25"];
	Node0x1977190[shape=record, label="  %44 = add i32 %43, %27"];
	Node0x1977200[shape=record, label="  %45 = add i32 %44, %14"];
	Node0x1977270[shape=record, label="  %46 = add i32 %45, %22"];
	Node0x19772e0[shape=record, label="  %47 = add i32 %46, %23"];
	Node0x1977350[shape=record, label="  %48 = add i32 %47, %29"];
	Node0x19773c0[shape=record, label="  %49 = sub i32 %48, %32"];
	Node0x1977430[shape=record, label="  %50 = add i32 %49, %28"];
	Node0x19774a0[shape=record, label="  %51 = icmp eq i32 %5, %50"];
	Node0x1916268[shape=record, label="  %52 = select i1 %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1977940[shape=record, label="  %53 = tail call i32 @puts(i8* nonnull dereferenceable(1) %52)"];
	Node0x1977990[shape=record, label="  ret void"];
	Node0x1975d50 -> Node0x1975dc0;
	Node0x1975dc0 -> Node0x1975e60;
	Node0x1975e60 -> Node0x1975ed0;
	Node0x1975ed0 -> Node0x1975f40;
	Node0x1975f40 -> Node0x1975fb0;
	Node0x1975fb0 -> Node0x1976050;
	Node0x1976050 -> Node0x19760c0;
	Node0x19760c0 -> Node0x1976160;
	Node0x1976160 -> Node0x1976200;
	Node0x1976200 -> Node0x1976270;
	Node0x1976270 -> Node0x19762e0;
	Node0x19762e0 -> Node0x1976350;
	Node0x1976350 -> Node0x19763f0;
	Node0x19763f0 -> Node0x1976460;
	Node0x1976460 -> Node0x19764d0;
	Node0x19764d0 -> Node0x1976540;
	Node0x1976540 -> Node0x19765b0;
	Node0x19765b0 -> Node0x1976620;
	Node0x1976620 -> Node0x1976690;
	Node0x1976690 -> Node0x1976700;
	Node0x1976700 -> Node0x1976770;
	Node0x1976770 -> Node0x19767e0;
	Node0x19767e0 -> Node0x1976850;
	Node0x1976850 -> Node0x19768c0;
	Node0x19768c0 -> Node0x1976960;
	Node0x1976960 -> Node0x19769d0;
	Node0x19769d0 -> Node0x1976a40;
	Node0x1976a40 -> Node0x1976cc0;
	Node0x1976cc0 -> Node0x1976d30;
	Node0x1976d30 -> Node0x1976da0;
	Node0x1976da0 -> Node0x1976e10;
	Node0x1976e10 -> Node0x1976e80;
	Node0x1976e80 -> Node0x1976ef0;
	Node0x1976ef0 -> Node0x1976f60;
	Node0x1976f60 -> Node0x1976fd0;
	Node0x1976fd0 -> Node0x1977040;
	Node0x1977040 -> Node0x19770b0;
	Node0x19770b0 -> Node0x1977120;
	Node0x1977120 -> Node0x1977190;
	Node0x1977190 -> Node0x1977200;
	Node0x1977200 -> Node0x1977270;
	Node0x1977270 -> Node0x19772e0;
	Node0x19772e0 -> Node0x1977350;
	Node0x1977350 -> Node0x19773c0;
	Node0x19773c0 -> Node0x1977430;
	Node0x1977430 -> Node0x19774a0;
	Node0x19774a0 -> Node0x1916268;
	Node0x1916268 -> Node0x1977940;
	Node0x1977940 -> Node0x1977990;
edge [color=red]
	Node0x1975dc0 -> Node0x1975e60;
	Node0x1975f40 -> Node0x1975fb0;
	Node0x1975ed0 -> Node0x1976050;
	Node0x19760c0 -> Node0x1976160;
	Node0x1976160 -> Node0x1976200;
	Node0x1976270 -> Node0x19762e0;
	Node0x1976270 -> Node0x1976350;
	Node0x1976350 -> Node0x19763f0;
	Node0x19764d0 -> Node0x1976540;
	Node0x1976540 -> Node0x19765b0;
	Node0x19765b0 -> Node0x1976620;
	Node0x19764d0 -> Node0x1976690;
	Node0x1976770 -> Node0x19767e0;
	Node0x1976700 -> Node0x1976850;
	Node0x1976850 -> Node0x19768c0;
	Node0x1976960 -> Node0x19769d0;
	Node0x19769d0 -> Node0x1976a40;
	Node0x1976cc0 -> Node0x1976d30;
	Node0x1976d30 -> Node0x1976da0;
	Node0x1976690 -> Node0x1976da0;
	Node0x1976da0 -> Node0x1976e10;
	Node0x1976e10 -> Node0x1976e80;
	Node0x1975e60 -> Node0x1976e80;
	Node0x1976e80 -> Node0x1976ef0;
	Node0x1975fb0 -> Node0x1976ef0;
	Node0x1976ef0 -> Node0x1976f60;
	Node0x1976050 -> Node0x1976f60;
	Node0x1976f60 -> Node0x1976fd0;
	Node0x19762e0 -> Node0x1976fd0;
	Node0x1976fd0 -> Node0x1977040;
	Node0x19763f0 -> Node0x1977040;
	Node0x1977040 -> Node0x19770b0;
	Node0x1976460 -> Node0x19770b0;
	Node0x19770b0 -> Node0x1977120;
	Node0x1976700 -> Node0x1977120;
	Node0x1977120 -> Node0x1977190;
	Node0x19767e0 -> Node0x1977190;
	Node0x1977190 -> Node0x1977200;
	Node0x1976200 -> Node0x1977200;
	Node0x1977200 -> Node0x1977270;
	Node0x19765b0 -> Node0x1977270;
	Node0x1977270 -> Node0x19772e0;
	Node0x1976620 -> Node0x19772e0;
	Node0x19772e0 -> Node0x1977350;
	Node0x19768c0 -> Node0x1977350;
	Node0x1977350 -> Node0x19773c0;
	Node0x1976a40 -> Node0x19773c0;
	Node0x19773c0 -> Node0x1977430;
	Node0x1976850 -> Node0x1977430;
	Node0x1975d50 -> Node0x19774a0;
	Node0x1977430 -> Node0x19774a0;
	Node0x19774a0 -> Node0x1916268;
	Node0x1916268 -> Node0x1977940;
}
