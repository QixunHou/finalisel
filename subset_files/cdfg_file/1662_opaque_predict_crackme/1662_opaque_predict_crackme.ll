; ModuleID = '../.././c_source_file/1662_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1662_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %3, -1
  %10 = and i32 %5, %4
  %11 = or i32 %10, %9
  %12 = shl i32 %11, 1
  %13 = sub i32 %8, %12
  %14 = and i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = and i32 %7, %1
  %17 = xor i32 %16, -1
  %18 = xor i32 %1, -1
  %19 = and i32 %7, %0
  %20 = xor i32 %19, -1
  %21 = and i32 %20, %18
  %22 = shl i32 %21, 1
  %23 = and i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = and i32 %24, %0
  %26 = or i32 %7, %1
  %27 = and i32 %26, %0
  %28 = or i32 %18, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = or i32 %31, %29
  %33 = or i32 %14, %31
  %34 = or i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %8, -1
  %37 = xor i32 %36, %1
  %38 = shl i32 %37, 1
  %39 = xor i32 %2, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %35
  %42 = xor i32 %34, %2
  %43 = and i32 %18, %0
  %44 = or i32 %43, %2
  %45 = and i32 %34, %31
  %46 = or i32 %36, %18
  %47 = xor i32 %43, %24
  %48 = or i32 %39, %18
  %49 = or i32 %40, %29
  %50 = and i32 %28, %31
  %51 = xor i32 %0, -1
  %52 = and i32 %31, %51
  %53 = xor i32 %15, %2
  %54 = and i32 %39, %15
  %55 = shl i32 %54, 1
  %56 = and i32 %39, %18
  %57 = xor i32 %43, -1
  %58 = and i32 %7, %57
  %59 = and i32 %2, %0
  %60 = or i32 %2, %1
  %61 = xor i32 %60, -1
  %62 = or i32 %59, %61
  %63 = xor i32 %1, %0
  %64 = xor i32 %63, -1
  %65 = and i32 %7, %64
  %66 = and i32 %23, %0
  %67 = xor i32 %30, %0
  %68 = xor i32 %66, %67
  %69 = shl i32 %68, 1
  %70 = or i32 %63, %40
  %71 = or i32 %16, %0
  %72 = or i32 %7, %29
  %73 = shl i32 %72, 1
  %74 = or i32 %59, %64
  %75 = or i32 %2, %0
  %76 = xor i32 %75, -1
  %77 = or i32 %76, %1
  %78 = or i32 %14, %61
  %79 = xor i32 %24, %0
  %80 = or i32 %39, %14
  %81 = or i32 %40, %1
  %82 = and i32 %34, %2
  %83 = and i32 %23, %51
  %84 = and i32 %30, %0
  %85 = or i32 %83, %84
  %86 = and i32 %30, %51
  %87 = xor i32 %8, %1
  %88 = and i32 %18, %2
  %89 = and i32 %88, %0
  %90 = or i32 %18, %2
  %91 = xor i32 %90, %0
  %92 = or i32 %89, %91
  %93 = and i32 %30, %15
  %94 = shl i32 %93, 1
  %95 = xor i32 %26, -1
  %96 = or i32 %95, %51
  %97 = xor i32 %95, %0
  %98 = xor i32 %28, %2
  %99 = xor i32 %43, %17
  %100 = or i32 %31, %51
  %101 = or i32 %14, %40
  %102 = and i32 %88, %51
  %103 = and i32 %90, %0
  %104 = xor i32 %103, -1
  %105 = xor i32 %102, %104
  %106 = or i32 %31, %35
  %107 = and i32 %60, %0
  %108 = or i32 %83, %107
  %109 = shl i32 %108, 1
  %110 = xor i32 %19, %26
  %111 = xor i32 %31, %0
  %112 = or i32 %31, %0
  %113 = and i32 %30, %57
  %114 = or i32 %59, %63
  %115 = or i32 %14, %7
  %116 = and i32 %31, %0
  %117 = or i32 %102, %116
  %118 = or i32 %39, %1
  %119 = add i32 %26, 1
  %120 = or i32 %24, %51
  %121 = xor i32 %59, -1
  %122 = and i32 %121, %1
  %123 = or i32 %30, %35
  %124 = and i32 %40, %57
  %125 = xor i32 %19, %24
  %126 = xor i32 %20, %1
  %127 = or i32 %14, %76
  %128 = and i32 %121, %64
  %129 = xor i32 %26, %14
  %130 = and i32 %57, %2
  %131 = xor i32 %59, %17
  %132 = or i32 %26, %51
  %133 = or i32 %59, %35
  %134 = xor i32 %14, %2
  %135 = xor i32 %107, -1
  %136 = xor i32 %83, %135
  %137 = and i32 %20, %1
  %138 = or i32 %14, %95
  %139 = xor i32 %59, %60
  %140 = and i32 %28, %2
  %141 = or i32 %19, %63
  %142 = shl i32 %141, 1
  %143 = and i32 %40, %15
  %144 = or i32 %23, %0
  %145 = or i32 %7, %35
  %146 = or i32 %64, %2
  %147 = shl i32 %146, 2
  %148 = xor i32 %26, %0
  %149 = and i32 %40, %64
  %150 = or i32 %23, %51
  %151 = and i32 %39, %63
  %152 = xor i32 %59, %1
  %153 = or i32 %102, %103
  %154 = shl i32 %153, 1
  %155 = or i32 %17, %0
  %156 = or i32 %66, %86
  %157 = or i32 %60, %0
  %158 = shl i32 %157, 1
  %159 = or i32 %24, %0
  %160 = xor i32 %61, %0
  %161 = xor i32 %67, -1
  %162 = or i32 %66, %161
  %163 = or i32 %16, %43
  %164 = or i32 %39, %35
  %165 = or i32 %89, %67
  %166 = xor i32 %8, %14
  %167 = shl i32 %60, 1
  %168 = xor i32 %89, %161
  %169 = xor i32 %86, 2147483647
  %170 = xor i32 %169, %66
  %171 = shl i32 %170, 1
  %172 = and i32 %8, %1
  %173 = shl i32 %172, 1
  %174 = and i32 %60, %51
  %175 = or i32 %30, %0
  %176 = xor i32 %89, %175
  %177 = and i32 %63, %121
  %178 = xor i32 %121, %1
  %179 = and i32 %75, %18
  %180 = or i32 %19, %64
  %181 = shl i32 %180, 1
  %182 = and i32 %24, %51
  %183 = or i32 %60, %51
  %184 = and i32 %30, %28
  %185 = shl i32 %184, 1
  %186 = xor i32 %16, %0
  %187 = xor i32 %75, %14
  %188 = or i32 %43, %40
  %189 = shl i32 %188, 1
  %190 = and i32 %63, %2
  %191 = or i32 %59, %18
  %192 = xor i32 %90, -1
  %193 = or i32 %192, %0
  %194 = xor i32 %89, %193
  %195 = xor i32 %19, %1
  %196 = shl i32 %195, 1
  %197 = or i32 %26, %0
  %198 = shl i32 %197, 1
  %199 = and i32 %8, %18
  %200 = xor i32 %60, %0
  %201 = or i32 %66, %200
  %202 = and i32 %31, %57
  %203 = xor i32 %43, %2
  %204 = or i32 %17, %51
  %205 = or i32 %95, %0
  %206 = and i32 %61, %51
  %207 = and i32 %16, %51
  %208 = and i32 %61, %0
  %209 = mul i32 %208, 7
  %210 = and i32 %16, %0
  %211 = and i32 %95, %51
  %212 = mul i32 %211, 6
  %213 = and i32 %95, %0
  %214 = mul i32 %66, -9
  %215 = and i32 %4, %3
  %216 = xor i32 %5, -1
  %217 = or i32 %216, %4
  %218 = xor i32 %217, %215
  %219 = xor i32 %217, -1
  %220 = or i32 %219, %3
  %221 = or i32 %5, %4
  %222 = xor i32 %221, -1
  %223 = or i32 %215, %222
  %224 = and i32 %9, %4
  %225 = and i32 %216, %3
  %226 = xor i32 %225, -1
  %227 = xor i32 %224, %226
  %228 = xor i32 %224, -1
  %229 = xor i32 %228, %5
  %230 = xor i32 %10, -1
  %231 = xor i32 %230, %3
  %232 = xor i32 %4, -1
  %233 = and i32 %9, %5
  %234 = and i32 %233, %232
  %235 = xor i32 %5, %3
  %236 = xor i32 %235, -1
  %237 = and i32 %236, %4
  %238 = or i32 %234, %237
  %239 = and i32 %233, %4
  %240 = or i32 %9, %5
  %241 = and i32 %240, %232
  %242 = or i32 %239, %241
  %243 = xor i32 %10, %3
  %244 = or i32 %4, %3
  %245 = and i32 %244, %236
  %246 = or i32 %5, %3
  %247 = xor i32 %246, -1
  %248 = or i32 %9, %4
  %249 = xor i32 %248, %5
  %250 = and i32 %246, %4
  %251 = xor i32 %4, %3
  %252 = xor i32 %251, -1
  %253 = or i32 %252, %5
  %254 = xor i32 %244, %5
  %255 = xor i32 %5, %4
  %256 = or i32 %255, %251
  %257 = or i32 %222, %252
  %258 = xor i32 %244, -1
  %259 = or i32 %216, %258
  %260 = and i32 %5, %3
  %261 = and i32 %260, %4
  %262 = and i32 %246, %232
  %263 = or i32 %261, %262
  %264 = shl i32 %263, 1
  %265 = xor i32 %235, %4
  %266 = shl i32 %265, 1
  %267 = xor i32 %260, %4
  %268 = or i32 %260, %4
  %269 = and i32 %235, %228
  %270 = or i32 %216, %3
  %271 = and i32 %270, %4
  %272 = xor i32 %255, -1
  %273 = and i32 %248, %272
  %274 = or i32 %215, %236
  %275 = or i32 %224, %216
  %276 = xor i32 %270, -1
  %277 = xor i32 %276, %4
  %278 = xor i32 %262, -1
  %279 = xor i32 %261, %278
  %280 = or i32 %276, %4
  %281 = xor i32 %221, %3
  %282 = or i32 %225, %232
  %283 = and i32 %251, %230
  %284 = xor i32 %10, %246
  %285 = and i32 %272, %3
  %286 = xor i32 %247, %4
  %287 = add i32 %244, 1
  %288 = or i32 %251, %216
  %289 = xor i32 %240, %4
  %290 = xor i32 %289, -1
  %291 = xor i32 %239, %290
  %292 = or i32 %235, %215
  %293 = and i32 %251, %272
  %294 = xor i32 %222, %3
  %295 = or i32 %255, %215
  %296 = or i32 %239, %289
  %297 = or i32 %215, %219
  %298 = or i32 %251, %222
  %299 = xor i32 %215, -1
  %300 = and i32 %272, %299
  %301 = or i32 %10, %247
  %302 = xor i32 %226, %4
  %303 = and i32 %235, %248
  %304 = and i32 %221, %3
  %305 = or i32 %10, %252
  %306 = or i32 %232, %5
  %307 = and i32 %306, %9
  %308 = or i32 %235, %224
  %309 = or i32 %260, %232
  %310 = shl i32 %217, 1
  %311 = and i32 %260, %232
  %312 = and i32 %235, %4
  %313 = or i32 %311, %312
  %314 = and i32 %270, %232
  %315 = and i32 %272, %252
  %316 = shl i32 %315, 1
  %317 = xor i32 %265, -1
  %318 = or i32 %261, %317
  %319 = and i32 %240, %4
  %320 = xor i32 %319, -1
  %321 = xor i32 %234, %320
  %322 = and i32 %216, %228
  %323 = or i32 %272, %252
  %324 = xor i32 %261, %265
  %325 = xor i32 %219, %3
  %326 = or i32 %251, %219
  %327 = add i32 %221, 1
  %328 = or i32 %246, %4
  %329 = xor i32 %312, -1
  %330 = xor i32 %311, %329
  %331 = and i32 %248, %216
  %332 = xor i32 %258, %5
  %333 = xor i32 %241, 2147483647
  %334 = xor i32 %333, %239
  %335 = and i32 %247, %232
  %336 = and i32 %225, %232
  %337 = mul i32 %336, -17
  %338 = and i32 %247, %4
  %339 = mul i32 %338, -24
  %340 = and i32 %225, %4
  %341 = and i32 %276, %232
  %342 = mul i32 %341, -19
  %343 = mul i32 %311, -21
  %344 = and i32 %276, %4
  %345 = add i32 %203, %35
  %346 = add i32 %345, %40
  %347 = add i32 %346, %174
  %348 = add i32 %347, %159
  %349 = add i32 %348, %144
  %350 = add i32 %349, %84
  %351 = add i32 %350, %112
  %352 = add i32 %351, %87
  %353 = add i32 %352, %49
  %354 = add i32 %353, %45
  %355 = add i32 %354, %41
  %356 = add i32 %355, %216
  %357 = add i32 %356, %224
  %358 = add i32 %357, %10
  %359 = add i32 %358, %247
  %360 = sub i32 %160, %206
  %361 = add i32 %360, %149
  %362 = sub i32 %361, %86
  %363 = sub i32 %362, %47
  %364 = add i32 %363, %304
  %365 = sub i32 %364, %321
  %366 = mul i32 %365, 5
  %367 = add i32 %261, %344
  %368 = add i32 %367, %340
  %369 = mul i32 %368, -27
  %370 = sub i32 %207, %335
  %371 = mul i32 %370, 20
  %372 = add i32 %39, %64
  %373 = shl i32 %372, 2
  %374 = add i32 %359, %260
  %375 = add i32 %374, %301
  %376 = add i32 %375, %283
  %377 = add i32 %376, %282
  %378 = add i32 %377, %273
  %379 = add i32 %378, %223
  %380 = add i32 %379, %220
  %381 = add i32 %380, %334
  %382 = shl i32 %381, 1
  %383 = xor i32 %98, -1
  %384 = add i32 %383, %299
  %385 = add i32 %384, %277
  %386 = mul i32 %385, 3
  %387 = add i32 %1, -1
  %388 = add i32 %387, %64
  %389 = sub i32 %388, %16
  %390 = add i32 %389, %42
  %391 = add i32 %390, %44
  %392 = sub i32 %391, %53
  %393 = add i32 %392, %58
  %394 = add i32 %393, %65
  %395 = sub i32 %394, %82
  %396 = sub i32 %395, %26
  %397 = add i32 %396, %23
  %398 = sub i32 %397, %39
  %399 = add i32 %398, %115
  %400 = add i32 %399, %119
  %401 = add i32 %400, %130
  %402 = sub i32 %401, %134
  %403 = add i32 %402, %140
  %404 = add i32 %403, %145
  %405 = add i32 %404, %190
  %406 = add i32 %405, %3
  %407 = add i32 %406, %25
  %408 = add i32 %407, %27
  %409 = sub i32 %408, %32
  %410 = sub i32 %409, %33
  %411 = add i32 %410, %46
  %412 = add i32 %411, %48
  %413 = sub i32 %412, %50
  %414 = sub i32 %413, %52
  %415 = add i32 %414, %56
  %416 = sub i32 %415, %62
  %417 = add i32 %416, %70
  %418 = add i32 %417, %71
  %419 = sub i32 %418, %73
  %420 = add i32 %419, %74
  %421 = add i32 %420, %77
  %422 = sub i32 %421, %78
  %423 = add i32 %422, %79
  %424 = add i32 %423, %80
  %425 = sub i32 %424, %81
  %426 = add i32 %425, %96
  %427 = sub i32 %426, %97
  %428 = sub i32 %427, %99
  %429 = sub i32 %428, %100
  %430 = add i32 %429, %101
  %431 = sub i32 %430, %106
  %432 = sub i32 %431, %110
  %433 = add i32 %432, %111
  %434 = sub i32 %433, %113
  %435 = add i32 %434, %114
  %436 = sub i32 %435, %118
  %437 = sub i32 %436, %120
  %438 = add i32 %437, %122
  %439 = add i32 %438, %123
  %440 = sub i32 %439, %124
  %441 = sub i32 %440, %125
  %442 = sub i32 %441, %126
  %443 = add i32 %442, %127
  %444 = sub i32 %443, %128
  %445 = add i32 %444, %129
  %446 = add i32 %445, %131
  %447 = add i32 %446, %132
  %448 = sub i32 %447, %133
  %449 = sub i32 %448, %107
  %450 = sub i32 %449, %137
  %451 = add i32 %450, %138
  %452 = add i32 %451, %139
  %453 = add i32 %452, %143
  %454 = sub i32 %453, %147
  %455 = sub i32 %454, %148
  %456 = sub i32 %455, %150
  %457 = sub i32 %456, %151
  %458 = sub i32 %457, %152
  %459 = add i32 %458, %155
  %460 = sub i32 %459, %163
  %461 = add i32 %460, %164
  %462 = sub i32 %461, %166
  %463 = sub i32 %462, %167
  %464 = sub i32 %463, %177
  %465 = sub i32 %464, %178
  %466 = add i32 %465, %179
  %467 = sub i32 %466, %182
  %468 = sub i32 %467, %183
  %469 = sub i32 %468, %186
  %470 = add i32 %469, %187
  %471 = sub i32 %470, %191
  %472 = sub i32 %471, %199
  %473 = add i32 %472, %202
  %474 = add i32 %473, %204
  %475 = add i32 %474, %205
  %476 = add i32 %475, %210
  %477 = sub i32 %476, %83
  %478 = sub i32 %477, %213
  %479 = sub i32 %478, %4
  %480 = sub i32 %479, %22
  %481 = sub i32 %480, %38
  %482 = sub i32 %481, %55
  %483 = sub i32 %482, %85
  %484 = add i32 %483, %92
  %485 = sub i32 %484, %94
  %486 = add i32 %485, %105
  %487 = sub i32 %486, %117
  %488 = sub i32 %487, %136
  %489 = sub i32 %488, %142
  %490 = add i32 %489, %156
  %491 = sub i32 %490, %158
  %492 = add i32 %491, %162
  %493 = sub i32 %492, %165
  %494 = sub i32 %493, %168
  %495 = sub i32 %494, %173
  %496 = add i32 %495, %176
  %497 = sub i32 %496, %181
  %498 = sub i32 %497, %185
  %499 = sub i32 %498, %189
  %500 = sub i32 %499, %194
  %501 = sub i32 %500, %196
  %502 = sub i32 %501, %198
  %503 = add i32 %502, %201
  %504 = add i32 %503, %209
  %505 = add i32 %504, %212
  %506 = add i32 %505, %214
  %507 = add i32 %506, %287
  %508 = sub i32 %507, %69
  %509 = sub i32 %508, %109
  %510 = sub i32 %509, %154
  %511 = sub i32 %510, %229
  %512 = add i32 %511, %249
  %513 = add i32 %512, %253
  %514 = sub i32 %513, %221
  %515 = sub i32 %514, %254
  %516 = add i32 %515, %259
  %517 = add i32 %516, %275
  %518 = add i32 %517, %288
  %519 = add i32 %518, %322
  %520 = add i32 %519, %270
  %521 = add i32 %520, %327
  %522 = sub i32 %521, %331
  %523 = add i32 %522, %332
  %524 = add i32 %523, %373
  %525 = sub i32 %524, %171
  %526 = sub i32 %525, %218
  %527 = add i32 %526, %227
  %528 = sub i32 %527, %231
  %529 = add i32 %528, %243
  %530 = add i32 %529, %245
  %531 = sub i32 %530, %250
  %532 = add i32 %531, %256
  %533 = add i32 %532, %257
  %534 = add i32 %533, %267
  %535 = add i32 %534, %268
  %536 = add i32 %535, %269
  %537 = sub i32 %536, %271
  %538 = add i32 %537, %274
  %539 = add i32 %538, %237
  %540 = add i32 %539, %280
  %541 = add i32 %540, %281
  %542 = add i32 %541, %284
  %543 = sub i32 %542, %285
  %544 = add i32 %543, %286
  %545 = add i32 %544, %292
  %546 = add i32 %545, %293
  %547 = sub i32 %546, %294
  %548 = sub i32 %547, %295
  %549 = sub i32 %548, %297
  %550 = sub i32 %549, %298
  %551 = add i32 %550, %300
  %552 = sub i32 %551, %302
  %553 = add i32 %552, %303
  %554 = add i32 %553, %305
  %555 = add i32 %554, %307
  %556 = sub i32 %555, %308
  %557 = sub i32 %556, %309
  %558 = sub i32 %557, %310
  %559 = add i32 %558, %314
  %560 = add i32 %559, %323
  %561 = add i32 %560, %325
  %562 = sub i32 %561, %326
  %563 = add i32 %562, %328
  %564 = add i32 %563, %238
  %565 = add i32 %564, %242
  %566 = sub i32 %565, %266
  %567 = add i32 %566, %279
  %568 = add i32 %567, %291
  %569 = add i32 %568, %296
  %570 = add i32 %569, %313
  %571 = sub i32 %570, %316
  %572 = add i32 %571, %318
  %573 = add i32 %572, %324
  %574 = add i32 %573, %330
  %575 = add i32 %574, %337
  %576 = add i32 %575, %339
  %577 = add i32 %576, %342
  %578 = add i32 %577, %343
  %579 = sub i32 %578, %264
  %580 = add i32 %579, %371
  %581 = add i32 %580, %369
  %582 = add i32 %581, %386
  %583 = add i32 %582, %366
  %584 = add i32 %583, %382
  %585 = icmp eq i32 %13, %584
  %586 = select i1 %585, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %587 = tail call i32 @puts(i8* nonnull dereferenceable(1) %586)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
