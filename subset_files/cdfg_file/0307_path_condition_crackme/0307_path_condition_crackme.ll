; ModuleID = '../.././c_source_file/0307_path_condition_crackme.c'
source_filename = "../.././c_source_file/0307_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %1, %0
  %8 = or i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = xor i32 %2, -1
  %12 = xor i32 %1, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %11, %13
  %15 = sub i32 %10, %14
  %16 = xor i32 %4, %3
  %17 = xor i32 %16, -1
  %18 = add i32 %16, 1
  %19 = add i32 %15, %18
  %20 = xor i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %7, %21
  %23 = xor i32 %1, -1
  %24 = and i32 %23, %0
  %25 = xor i32 %2, %1
  %26 = xor i32 %25, -1
  %27 = or i32 %24, %26
  %28 = and i32 %2, %1
  %29 = and i32 %28, %0
  %30 = xor i32 %8, %0
  %31 = xor i32 %29, 2147483647
  %32 = xor i32 %31, %30
  %33 = shl i32 %32, 1
  %34 = or i32 %9, %0
  %35 = or i32 %1, %0
  %36 = xor i32 %35, -1
  %37 = or i32 %11, %36
  %38 = or i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %39, %1
  %41 = and i32 %2, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %42, %1
  %44 = or i32 %11, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %23
  %47 = xor i32 %24, -1
  %48 = and i32 %20, %13
  %49 = shl i32 %48, 1
  %50 = and i32 %20, %1
  %51 = or i32 %25, %36
  %52 = xor i32 %7, -1
  %53 = xor i32 %0, -1
  %54 = xor i32 %8, %7
  %55 = shl i32 %54, 1
  %56 = or i32 %23, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %20, %57
  %59 = xor i32 %57, %2
  %60 = and i32 %11, %0
  %61 = or i32 %60, %28
  %62 = and i32 %44, %12
  %63 = xor i32 %60, -1
  %64 = and i32 %12, %63
  %65 = shl i32 %64, 2
  %66 = and i32 %63, %23
  %67 = or i32 %28, %0
  %68 = or i32 %60, %1
  %69 = and i32 %47, %2
  %70 = and i32 %25, %53
  %71 = or i32 %29, %70
  %72 = shl i32 %71, 1
  %73 = and i32 %44, %1
  %74 = or i32 %11, %57
  %75 = or i32 %7, %11
  %76 = shl i32 %75, 1
  %77 = and i32 %11, %1
  %78 = xor i32 %77, -1
  %79 = and i32 %28, %53
  %80 = and i32 %8, %0
  %81 = xor i32 %80, -1
  %82 = xor i32 %79, %81
  %83 = xor i32 %44, %1
  %84 = and i32 %23, %2
  %85 = and i32 %84, %0
  %86 = or i32 %25, %0
  %87 = xor i32 %86, 2147483647
  %88 = or i32 %87, %85
  %89 = or i32 %78, %53
  %90 = or i32 %7, %39
  %91 = and i32 %84, %53
  %92 = or i32 %25, %53
  %93 = xor i32 %92, -1
  %94 = or i32 %91, %93
  %95 = xor i32 %28, -1
  %96 = xor i32 %95, %0
  %97 = or i32 %23, %2
  %98 = xor i32 %97, %0
  %99 = or i32 %85, %98
  %100 = and i32 %26, %47
  %101 = xor i32 %85, %86
  %102 = and i32 %21, %13
  %103 = shl i32 %102, 1
  %104 = or i32 %11, %1
  %105 = xor i32 %104, %0
  %106 = or i32 %41, %9
  %107 = xor i32 %104, -1
  %108 = or i32 %7, %107
  %109 = or i32 %45, %1
  %110 = or i32 %20, %12
  %111 = or i32 %26, %0
  %112 = and i32 %21, %1
  %113 = and i32 %26, %0
  %114 = xor i32 %98, -1
  %115 = xor i32 %85, %114
  %116 = and i32 %35, %11
  %117 = and i32 %78, %53
  %118 = or i32 %60, %13
  %119 = shl i32 %118, 1
  %120 = or i32 %8, %0
  %121 = shl i32 %120, 1
  %122 = add i32 %60, 1
  %123 = xor i32 %7, %2
  %124 = and i32 %38, %23
  %125 = or i32 %20, %36
  %126 = or i32 %20, %1
  %127 = shl i32 %1, 1
  %128 = and i32 %56, %11
  %129 = or i32 %12, %45
  %130 = xor i32 %41, %35
  %131 = or i32 %78, %0
  %132 = or i32 %77, %0
  %133 = or i32 %41, %77
  %134 = and i32 %25, %47
  %135 = and i32 %21, %47
  %136 = xor i32 %78, %0
  %137 = and i32 %97, %0
  %138 = xor i32 %137, 2147483647
  %139 = xor i32 %138, %91
  %140 = or i32 %21, %36
  %141 = and i32 %38, %1
  %142 = xor i32 %91, %92
  %143 = xor i32 %56, %2
  %144 = and i32 %44, %23
  %145 = or i32 %77, %24
  %146 = xor i32 %24, %78
  %147 = or i32 %41, %36
  %148 = shl i32 %147, 1
  %149 = or i32 %26, %53
  %150 = and i32 %11, %47
  %151 = or i32 %104, %0
  %152 = xor i32 %25, %0
  %153 = or i32 %85, %152
  %154 = and i32 %38, %12
  %155 = and i32 %20, %47
  %156 = shl i32 %155, 1
  %157 = or i32 %39, %23
  %158 = and i32 %21, %23
  %159 = and i32 %44, %13
  %160 = shl i32 %159, 1
  %161 = and i32 %95, %53
  %162 = xor i32 %77, %0
  %163 = xor i32 %36, %2
  %164 = or i32 %25, %7
  %165 = or i32 %9, %53
  %166 = shl i32 %165, 1
  %167 = and i32 %63, %13
  %168 = xor i32 %24, %2
  %169 = xor i32 %28, %0
  %170 = and i32 %63, %1
  %171 = or i32 %41, %57
  %172 = or i32 %41, %23
  %173 = and i32 %104, %53
  %174 = and i32 %8, %53
  %175 = or i32 %29, %174
  %176 = xor i32 %31, %70
  %177 = and i32 %35, %21
  %178 = and i32 %25, %0
  %179 = or i32 %57, %2
  %180 = xor i32 %24, %95
  %181 = and i32 %12, %42
  %182 = and i32 %11, %52
  %183 = or i32 %60, %12
  %184 = shl i32 %183, 1
  %185 = or i32 %24, %21
  %186 = or i32 %41, %13
  %187 = shl i32 %186, 1
  %188 = xor i32 %47, %2
  %189 = or i32 %24, %11
  %190 = xor i32 %41, %56
  %191 = shl i32 %190, 2
  %192 = or i32 %77, %53
  %193 = or i32 %20, %24
  %194 = and i32 %25, %35
  %195 = and i32 %21, %52
  %196 = or i32 %95, %0
  %197 = xor i32 %104, %7
  %198 = xor i32 %60, %95
  %199 = and i32 %25, %56
  %200 = or i32 %12, %11
  %201 = or i32 %107, %0
  %202 = or i32 %26, %57
  %203 = and i32 %38, %13
  %204 = shl i32 %20, 1
  %205 = xor i32 %60, %104
  %206 = xor i32 %35, %2
  %207 = or i32 %7, %26
  %208 = xor i32 %174, -1
  %209 = xor i32 %29, %208
  %210 = and i32 %20, %23
  %211 = xor i32 %39, %1
  %212 = or i32 %36, %2
  %213 = and i32 %42, %1
  %214 = xor i32 %60, %1
  %215 = and i32 %56, %26
  %216 = or i32 %45, %13
  %217 = shl i32 %216, 1
  %218 = xor i32 %26, %0
  %219 = or i32 %12, %21
  %220 = xor i32 %152, -1
  %221 = or i32 %29, %220
  %222 = and i32 %35, %26
  %223 = and i32 %56, %2
  %224 = add i32 %104, 1
  %225 = or i32 %41, %1
  %226 = or i32 %25, %24
  %227 = or i32 %7, %2
  %228 = shl i32 %227, 1
  %229 = or i32 %107, %53
  %230 = or i32 %12, %39
  %231 = add i32 %41, 1
  %232 = or i32 %7, %45
  %233 = and i32 %104, %0
  %234 = or i32 %60, %107
  %235 = xor i32 %41, %1
  %236 = or i32 %13, %2
  %237 = xor i32 %63, %1
  %238 = and i32 %13, %2
  %239 = or i32 %28, %24
  %240 = and i32 %20, %12
  %241 = or i32 %91, %137
  %242 = and i32 %42, %23
  %243 = and i32 %20, %56
  %244 = or i32 %21, %13
  %245 = and i32 %56, %21
  %246 = xor i32 %38, %1
  %247 = or i32 %25, %57
  %248 = xor i32 %29, %152
  %249 = and i32 %52, %2
  %250 = and i32 %12, %2
  %251 = or i32 %12, %2
  %252 = or i32 %24, %2
  %253 = and i32 %26, %52
  %254 = shl i32 %253, 1
  %255 = and i32 %78, %0
  %256 = xor i32 %41, %78
  %257 = or i32 %104, %53
  %258 = or i32 %21, %1
  %259 = or i32 %26, %36
  %260 = or i32 %21, %57
  %261 = shl i32 %260, 1
  %262 = or i32 %39, %13
  %263 = add i32 %56, 1
  %264 = xor i32 %45, %1
  %265 = xor i32 %97, -1
  %266 = or i32 %265, %0
  %267 = xor i32 %85, %266
  %268 = or i32 %21, %23
  %269 = shl i32 %268, 1
  %270 = xor i32 %38, %7
  %271 = xor i32 %107, %0
  %272 = or i32 %20, %23
  %273 = xor i32 %9, %0
  %274 = and i32 %9, %53
  %275 = and i32 %77, %53
  %276 = and i32 %9, %0
  %277 = mul i32 %276, -26
  %278 = and i32 %77, %0
  %279 = mul i32 %278, 6
  %280 = and i32 %107, %53
  %281 = shl i32 %280, 2
  %282 = and i32 %107, %0
  %283 = mul i32 %282, -25
  %284 = xor i32 %3, -1
  %285 = xor i32 %5, %4
  %286 = and i32 %285, %284
  %287 = shl i32 %286, 1
  %288 = xor i32 %4, -1
  %289 = or i32 %5, %3
  %290 = or i32 %289, %288
  %291 = or i32 %5, %4
  %292 = xor i32 %291, -1
  %293 = or i32 %16, %292
  %294 = and i32 %4, %3
  %295 = xor i32 %5, -1
  %296 = or i32 %295, %4
  %297 = xor i32 %296, -1
  %298 = or i32 %294, %297
  %299 = and i32 %284, %4
  %300 = or i32 %299, %295
  %301 = shl i32 %300, 1
  %302 = and i32 %5, %3
  %303 = xor i32 %302, -1
  %304 = or i32 %303, %4
  %305 = xor i32 %5, %3
  %306 = and i32 %305, %4
  %307 = or i32 %297, %17
  %308 = and i32 %295, %4
  %309 = xor i32 %308, -1
  %310 = and i32 %309, %17
  %311 = and i32 %299, %5
  %312 = or i32 %284, %5
  %313 = xor i32 %312, %4
  %314 = xor i32 %311, -1
  %315 = xor i32 %313, %314
  %316 = or i32 %284, %4
  %317 = xor i32 %308, %303
  %318 = and i32 %296, %16
  %319 = or i32 %16, %5
  %320 = or i32 %308, %17
  %321 = or i32 %308, %302
  %322 = xor i32 %316, -1
  %323 = xor i32 %322, %5
  %324 = xor i32 %294, -1
  %325 = and i32 %285, %324
  %326 = xor i32 %291, %3
  %327 = and i32 %5, %4
  %328 = or i32 %327, %322
  %329 = xor i32 %299, -1
  %330 = xor i32 %305, -1
  %331 = and i32 %330, %324
  %332 = xor i32 %324, %5
  %333 = or i32 %302, %4
  %334 = and i32 %16, %5
  %335 = or i32 %295, %3
  %336 = xor i32 %335, %294
  %337 = or i32 %308, %284
  %338 = xor i32 %302, %4
  %339 = and i32 %291, %3
  %340 = or i32 %305, %4
  %341 = xor i32 %340, -1
  %342 = or i32 %311, %341
  %343 = or i32 %311, %313
  %344 = shl i32 %343, 1
  %345 = xor i32 %327, -1
  %346 = and i32 %345, %284
  %347 = or i32 %285, %299
  %348 = or i32 %322, %5
  %349 = shl i32 %348, 1
  %350 = xor i32 %299, %303
  %351 = xor i32 %316, %5
  %352 = or i32 %330, %4
  %353 = xor i32 %285, -1
  %354 = or i32 %353, %284
  %355 = xor i32 %335, -1
  %356 = xor i32 %355, %4
  %357 = xor i32 %309, %3
  %358 = shl i32 %357, 2
  %359 = xor i32 %305, %4
  %360 = and i32 %353, %284
  %361 = shl i32 %360, 1
  %362 = or i32 %4, %3
  %363 = and i32 %305, %362
  %364 = and i32 %295, %3
  %365 = xor i32 %364, -1
  %366 = and i32 %365, %4
  %367 = or i32 %364, %288
  %368 = or i32 %294, %353
  %369 = and i32 %330, %288
  %370 = xor i32 %359, %314
  %371 = and i32 %362, %353
  %372 = and i32 %285, %17
  %373 = or i32 %353, %322
  %374 = and i32 %365, %288
  %375 = xor i32 %327, %316
  %376 = xor i32 %335, %4
  %377 = shl i32 %376, 1
  %378 = and i32 %285, %316
  %379 = shl i32 %378, 2
  %380 = or i32 %330, %322
  %381 = shl i32 %294, 1
  %382 = or i32 %353, %17
  %383 = and i32 %302, %4
  %384 = xor i32 %289, %4
  %385 = xor i32 %384, -1
  %386 = xor i32 %383, %385
  %387 = xor i32 %362, -1
  %388 = or i32 %295, %387
  %389 = xor i32 %362, %5
  %390 = xor i32 %312, -1
  %391 = or i32 %390, %4
  %392 = xor i32 %311, %391
  %393 = or i32 %365, %288
  %394 = xor i32 %299, %365
  %395 = and i32 %295, %329
  %396 = and i32 %324, %5
  %397 = or i32 %383, %384
  %398 = xor i32 %345, %3
  %399 = xor i32 %289, -1
  %400 = or i32 %399, %288
  %401 = xor i32 %327, %289
  %402 = shl i32 %401, 1
  %403 = or i32 %355, %4
  %404 = and i32 %16, %295
  %405 = and i32 %16, %353
  %406 = xor i32 %294, %5
  %407 = or i32 %16, %295
  %408 = or i32 %305, %387
  %409 = and i32 %362, %330
  %410 = and i32 %305, %324
  %411 = xor i32 %296, %294
  %412 = xor i32 %297, %3
  %413 = shl i32 %412, 1
  %414 = or i32 %302, %299
  %415 = add i32 %327, 1
  %416 = and i32 %335, %288
  %417 = or i32 %294, %292
  %418 = and i32 %353, %324
  %419 = xor i32 %330, %4
  %420 = or i32 %399, %4
  %421 = and i32 %289, %288
  %422 = and i32 %16, %309
  %423 = or i32 %17, %5
  %424 = and i32 %309, %3
  %425 = or i32 %353, %387
  %426 = shl i32 %425, 1
  %427 = add i32 %294, 1
  %428 = shl i32 %327, 1
  %429 = and i32 %399, %288
  %430 = and i32 %364, %288
  %431 = and i32 %399, %4
  %432 = and i32 %364, %4
  %433 = shl i32 %432, 3
  %434 = and i32 %355, %288
  %435 = mul i32 %434, 19
  %436 = and i32 %302, %288
  %437 = mul i32 %436, 15
  %438 = and i32 %355, %4
  %439 = add i32 %44, %2
  %440 = add i32 %439, %212
  %441 = add i32 %440, %116
  %442 = add i32 %441, %59
  %443 = add i32 %442, %262
  %444 = add i32 %443, %246
  %445 = add i32 %444, %240
  %446 = add i32 %445, %233
  %447 = add i32 %446, %195
  %448 = add i32 %447, %169
  %449 = add i32 %448, %145
  %450 = add i32 %449, %140
  %451 = add i32 %450, %105
  %452 = add i32 %451, %83
  %453 = add i32 %452, %61
  %454 = add i32 %453, %27
  %455 = add i32 %8, %53
  %456 = sub i32 %455, %150
  %457 = add i32 %456, %245
  %458 = add i32 %457, %203
  %459 = add i32 %458, %267
  %460 = sub i32 %459, %400
  %461 = add i32 %460, %422
  %462 = mul i32 %461, 3
  %463 = sub i32 %226, %255
  %464 = add i32 %463, %207
  %465 = sub i32 %464, %192
  %466 = sub i32 %465, %321
  %467 = add i32 %466, %356
  %468 = mul i32 %467, 5
  %469 = add i32 %383, %431
  %470 = add i32 %469, %430
  %471 = mul i32 %470, 12
  %472 = add i32 %79, %275
  %473 = add i32 %472, %274
  %474 = mul i32 %473, -13
  %475 = add i32 %51, %179
  %476 = add i32 %475, %429
  %477 = shl i32 %476, 2
  %478 = sub i32 %438, %29
  %479 = mul i32 %478, 10
  %480 = add i32 %454, %22
  %481 = add i32 %480, %153
  %482 = add i32 %481, %395
  %483 = add i32 %482, %176
  %484 = add i32 %483, %139
  %485 = add i32 %484, %88
  %486 = add i32 %485, %336
  %487 = add i32 %486, %366
  %488 = add i32 %487, %310
  %489 = add i32 %488, %293
  %490 = shl i32 %489, 1
  %491 = sub i32 %1, %0
  %492 = add i32 %491, %47
  %493 = sub i32 %492, %127
  %494 = sub i32 %493, %2
  %495 = sub i32 %494, %7
  %496 = sub i32 %495, %24
  %497 = add i32 %496, %52
  %498 = add i32 %497, %263
  %499 = sub i32 %498, %37
  %500 = sub i32 %499, %69
  %501 = add i32 %500, %74
  %502 = add i32 %501, %78
  %503 = add i32 %502, %26
  %504 = add i32 %503, %45
  %505 = add i32 %504, %122
  %506 = add i32 %505, %123
  %507 = sub i32 %506, %128
  %508 = add i32 %507, %21
  %509 = sub i32 %508, %143
  %510 = add i32 %509, %163
  %511 = add i32 %510, %168
  %512 = sub i32 %511, %38
  %513 = add i32 %512, %9
  %514 = sub i32 %513, %77
  %515 = add i32 %514, %182
  %516 = sub i32 %515, %188
  %517 = add i32 %516, %189
  %518 = add i32 %517, %41
  %519 = sub i32 %518, %200
  %520 = sub i32 %519, %206
  %521 = add i32 %520, %104
  %522 = sub i32 %521, %223
  %523 = add i32 %522, %224
  %524 = add i32 %523, %231
  %525 = add i32 %524, %39
  %526 = add i32 %525, %236
  %527 = sub i32 %526, %238
  %528 = sub i32 %527, %249
  %529 = sub i32 %528, %250
  %530 = sub i32 %529, %251
  %531 = add i32 %530, %252
  %532 = sub i32 %531, %34
  %533 = sub i32 %532, %40
  %534 = sub i32 %533, %43
  %535 = add i32 %534, %46
  %536 = sub i32 %535, %50
  %537 = sub i32 %536, %58
  %538 = sub i32 %537, %62
  %539 = add i32 %538, %66
  %540 = sub i32 %539, %67
  %541 = add i32 %540, %68
  %542 = sub i32 %541, %73
  %543 = sub i32 %542, %76
  %544 = sub i32 %543, %89
  %545 = add i32 %544, %90
  %546 = sub i32 %545, %96
  %547 = add i32 %546, %100
  %548 = add i32 %547, %106
  %549 = sub i32 %548, %108
  %550 = sub i32 %549, %109
  %551 = add i32 %550, %110
  %552 = add i32 %551, %111
  %553 = sub i32 %552, %112
  %554 = sub i32 %553, %113
  %555 = add i32 %554, %117
  %556 = add i32 %555, %80
  %557 = add i32 %556, %124
  %558 = add i32 %557, %125
  %559 = sub i32 %558, %126
  %560 = add i32 %559, %129
  %561 = sub i32 %560, %86
  %562 = sub i32 %561, %130
  %563 = add i32 %562, %131
  %564 = add i32 %563, %132
  %565 = sub i32 %564, %133
  %566 = add i32 %565, %134
  %567 = add i32 %566, %135
  %568 = sub i32 %567, %136
  %569 = add i32 %568, %141
  %570 = add i32 %569, %144
  %571 = sub i32 %570, %146
  %572 = add i32 %571, %149
  %573 = sub i32 %572, %151
  %574 = add i32 %573, %154
  %575 = add i32 %574, %157
  %576 = sub i32 %575, %158
  %577 = sub i32 %576, %161
  %578 = add i32 %577, %162
  %579 = sub i32 %578, %164
  %580 = sub i32 %579, %167
  %581 = sub i32 %580, %92
  %582 = add i32 %581, %170
  %583 = sub i32 %582, %171
  %584 = add i32 %583, %172
  %585 = sub i32 %584, %173
  %586 = sub i32 %585, %177
  %587 = sub i32 %586, %178
  %588 = sub i32 %587, %180
  %589 = add i32 %588, %181
  %590 = add i32 %589, %185
  %591 = add i32 %590, %193
  %592 = sub i32 %591, %194
  %593 = sub i32 %592, %196
  %594 = add i32 %593, %197
  %595 = add i32 %594, %198
  %596 = add i32 %595, %199
  %597 = sub i32 %596, %201
  %598 = add i32 %597, %202
  %599 = sub i32 %598, %204
  %600 = sub i32 %599, %205
  %601 = add i32 %600, %210
  %602 = sub i32 %601, %211
  %603 = sub i32 %602, %213
  %604 = add i32 %603, %214
  %605 = sub i32 %604, %215
  %606 = add i32 %605, %218
  %607 = add i32 %606, %30
  %608 = sub i32 %607, %219
  %609 = add i32 %608, %222
  %610 = add i32 %609, %225
  %611 = sub i32 %610, %228
  %612 = sub i32 %611, %229
  %613 = add i32 %612, %230
  %614 = add i32 %613, %232
  %615 = add i32 %614, %234
  %616 = sub i32 %615, %235
  %617 = sub i32 %616, %70
  %618 = add i32 %617, %237
  %619 = add i32 %618, %239
  %620 = add i32 %619, %242
  %621 = add i32 %620, %243
  %622 = add i32 %621, %244
  %623 = sub i32 %622, %247
  %624 = add i32 %623, %256
  %625 = sub i32 %624, %257
  %626 = add i32 %625, %258
  %627 = sub i32 %626, %259
  %628 = add i32 %627, %264
  %629 = add i32 %628, %174
  %630 = sub i32 %629, %270
  %631 = sub i32 %630, %271
  %632 = add i32 %631, %272
  %633 = add i32 %632, %273
  %634 = add i32 %633, %288
  %635 = sub i32 %634, %49
  %636 = sub i32 %635, %55
  %637 = sub i32 %636, %65
  %638 = add i32 %637, %82
  %639 = add i32 %638, %94
  %640 = add i32 %639, %99
  %641 = sub i32 %640, %101
  %642 = sub i32 %641, %103
  %643 = add i32 %642, %115
  %644 = sub i32 %643, %119
  %645 = sub i32 %644, %121
  %646 = sub i32 %645, %142
  %647 = sub i32 %646, %148
  %648 = sub i32 %647, %156
  %649 = sub i32 %648, %160
  %650 = sub i32 %649, %166
  %651 = add i32 %650, %175
  %652 = sub i32 %651, %184
  %653 = sub i32 %652, %187
  %654 = sub i32 %653, %191
  %655 = sub i32 %654, %209
  %656 = sub i32 %655, %217
  %657 = sub i32 %656, %221
  %658 = sub i32 %657, %241
  %659 = add i32 %658, %248
  %660 = sub i32 %659, %254
  %661 = sub i32 %660, %261
  %662 = sub i32 %661, %269
  %663 = add i32 %662, %277
  %664 = add i32 %663, %279
  %665 = sub i32 %664, %281
  %666 = add i32 %665, %283
  %667 = sub i32 %666, %299
  %668 = add i32 %667, %316
  %669 = add i32 %668, %329
  %670 = sub i32 %669, %5
  %671 = add i32 %670, %427
  %672 = sub i32 %671, %72
  %673 = sub i32 %672, %319
  %674 = sub i32 %673, %323
  %675 = sub i32 %674, %332
  %676 = add i32 %675, %334
  %677 = sub i32 %676, %285
  %678 = add i32 %677, %351
  %679 = sub i32 %678, %381
  %680 = sub i32 %679, %388
  %681 = sub i32 %680, %389
  %682 = add i32 %681, %396
  %683 = add i32 %682, %291
  %684 = sub i32 %683, %404
  %685 = add i32 %684, %406
  %686 = sub i32 %685, %407
  %687 = add i32 %686, %415
  %688 = sub i32 %687, %423
  %689 = sub i32 %688, %33
  %690 = sub i32 %689, %290
  %691 = sub i32 %690, %298
  %692 = sub i32 %691, %301
  %693 = add i32 %692, %304
  %694 = add i32 %693, %306
  %695 = add i32 %694, %307
  %696 = sub i32 %695, %317
  %697 = sub i32 %696, %318
  %698 = add i32 %697, %320
  %699 = sub i32 %698, %325
  %700 = sub i32 %699, %326
  %701 = sub i32 %700, %328
  %702 = sub i32 %701, %331
  %703 = sub i32 %702, %333
  %704 = add i32 %703, %337
  %705 = add i32 %704, %338
  %706 = add i32 %705, %339
  %707 = add i32 %706, %346
  %708 = add i32 %707, %347
  %709 = sub i32 %708, %349
  %710 = add i32 %709, %350
  %711 = add i32 %710, %352
  %712 = add i32 %711, %354
  %713 = add i32 %712, %340
  %714 = sub i32 %713, %359
  %715 = add i32 %714, %363
  %716 = add i32 %715, %367
  %717 = add i32 %716, %368
  %718 = add i32 %717, %369
  %719 = sub i32 %718, %371
  %720 = sub i32 %719, %372
  %721 = sub i32 %720, %373
  %722 = sub i32 %721, %374
  %723 = sub i32 %722, %375
  %724 = sub i32 %723, %380
  %725 = sub i32 %724, %382
  %726 = add i32 %725, %384
  %727 = add i32 %726, %393
  %728 = sub i32 %727, %394
  %729 = add i32 %728, %398
  %730 = sub i32 %729, %403
  %731 = add i32 %730, %405
  %732 = sub i32 %731, %408
  %733 = sub i32 %732, %409
  %734 = add i32 %733, %410
  %735 = add i32 %734, %411
  %736 = sub i32 %735, %414
  %737 = add i32 %736, %416
  %738 = add i32 %737, %417
  %739 = add i32 %738, %418
  %740 = add i32 %739, %419
  %741 = sub i32 %740, %420
  %742 = sub i32 %741, %421
  %743 = sub i32 %742, %424
  %744 = sub i32 %743, %428
  %745 = add i32 %744, %474
  %746 = sub i32 %745, %287
  %747 = sub i32 %746, %315
  %748 = sub i32 %747, %342
  %749 = sub i32 %748, %358
  %750 = sub i32 %749, %361
  %751 = sub i32 %750, %370
  %752 = sub i32 %751, %377
  %753 = sub i32 %752, %379
  %754 = add i32 %753, %386
  %755 = add i32 %754, %392
  %756 = sub i32 %755, %397
  %757 = sub i32 %756, %402
  %758 = sub i32 %757, %413
  %759 = sub i32 %758, %426
  %760 = add i32 %759, %433
  %761 = add i32 %760, %435
  %762 = add i32 %761, %437
  %763 = sub i32 %762, %344
  %764 = add i32 %763, %479
  %765 = add i32 %764, %471
  %766 = add i32 %765, %477
  %767 = add i32 %766, %468
  %768 = add i32 %767, %462
  %769 = add i32 %768, %490
  %770 = icmp eq i32 %19, %769
  %771 = select i1 %770, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %772 = tail call i32 @puts(i8* nonnull dereferenceable(1) %771)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
