; ModuleID = '../.././c_source_file/0291_path_condition_crackme.c'
source_filename = "../.././c_source_file/0291_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = and i32 %8, %6
  %10 = or i32 %5, %8
  %11 = or i32 %4, %0
  %12 = and i32 %7, %11
  %13 = and i32 %7, %0
  %14 = and i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = xor i32 %15, %0
  %17 = xor i32 %2, %0
  %18 = or i32 %17, %4
  %19 = xor i32 %2, -1
  %20 = or i32 %19, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %21, %1
  %23 = and i32 %17, %4
  %24 = and i32 %19, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %1, %0
  %27 = and i32 %26, %25
  %28 = and i32 %8, %0
  %29 = shl i32 %28, 1
  %30 = and i32 %19, %1
  %31 = xor i32 %30, %0
  %32 = or i32 %2, %1
  %33 = and i32 %14, %0
  %34 = xor i32 %0, -1
  %35 = and i32 %7, %34
  %36 = xor i32 %33, -1
  %37 = xor i32 %35, %36
  %38 = xor i32 %5, %15
  %39 = and i32 %4, %2
  %40 = and i32 %39, %0
  %41 = or i32 %4, %2
  %42 = xor i32 %41, %0
  %43 = xor i32 %40, -1
  %44 = xor i32 %42, %43
  %45 = and i32 %1, %0
  %46 = xor i32 %20, %45
  %47 = xor i32 %32, %0
  %48 = or i32 %33, %47
  %49 = and i32 %39, %34
  %50 = and i32 %41, %0
  %51 = or i32 %49, %50
  %52 = shl i32 %51, 1
  %53 = or i32 %40, %42
  %54 = xor i32 %17, -1
  %55 = and i32 %26, %54
  %56 = or i32 %54, %1
  %57 = and i32 %32, %0
  %58 = xor i32 %26, -1
  %59 = or i32 %24, %58
  %60 = and i32 %25, %58
  %61 = shl i32 %60, 1
  %62 = or i32 %54, %58
  %63 = and i32 %2, %0
  %64 = xor i32 %63, -1
  %65 = add i32 %63, 1
  %66 = xor i32 %32, -1
  %67 = xor i32 %66, %0
  %68 = or i32 %24, %4
  %69 = or i32 %45, %2
  %70 = or i32 %1, %0
  %71 = xor i32 %63, %70
  %72 = or i32 %19, %1
  %73 = xor i32 %72, -1
  %74 = or i32 %73, %34
  %75 = shl i32 %74, 1
  %76 = xor i32 %24, %72
  %77 = or i32 %15, %34
  %78 = xor i32 %30, -1
  %79 = and i32 %78, %34
  %80 = and i32 %7, %70
  %81 = or i32 %2, %0
  %82 = and i32 %81, %1
  %83 = shl i32 %82, 1
  %84 = or i32 %26, %54
  %85 = and i32 %17, %58
  %86 = and i32 %14, %34
  %87 = xor i32 %86, -1
  %88 = xor i32 %13, %87
  %89 = xor i32 %7, %0
  %90 = or i32 %40, %89
  %91 = xor i32 %81, -1
  %92 = or i32 %45, %91
  %93 = or i32 %66, %34
  %94 = or i32 %19, %58
  %95 = or i32 %63, %58
  %96 = and i32 %32, %34
  %97 = or i32 %86, %13
  %98 = xor i32 %11, -1
  %99 = or i32 %17, %98
  %100 = and i32 %64, %4
  %101 = or i32 %54, %98
  %102 = or i32 %58, %2
  %103 = or i32 %24, %73
  %104 = xor i32 %70, -1
  %105 = or i32 %17, %104
  %106 = xor i32 %33, %89
  %107 = shl i32 %106, 1
  %108 = or i32 %7, %34
  %109 = xor i32 %108, -1
  %110 = or i32 %49, %109
  %111 = or i32 %30, %5
  %112 = or i32 %24, %1
  %113 = and i32 %70, %54
  %114 = or i32 %19, %98
  %115 = or i32 %72, %34
  %116 = shl i32 %54, 1
  %117 = or i32 %63, %98
  %118 = and i32 %15, %34
  %119 = xor i32 %63, %32
  %120 = xor i32 %89, %43
  %121 = or i32 %8, %0
  %122 = xor i32 %45, -1
  %123 = and i32 %7, %122
  %124 = or i32 %45, %73
  %125 = and i32 %41, %34
  %126 = or i32 %40, %125
  %127 = xor i32 %32, %45
  %128 = and i32 %25, %4
  %129 = and i32 %26, %19
  %130 = or i32 %63, %1
  %131 = xor i32 %72, %45
  %132 = xor i32 %91, %1
  %133 = xor i32 %20, %1
  %134 = or i32 %24, %26
  %135 = and i32 %70, %19
  %136 = or i32 %8, %34
  %137 = or i32 %91, %58
  %138 = and i32 %54, %58
  %139 = and i32 %19, %122
  %140 = and i32 %54, %6
  %141 = and i32 %122, %2
  %142 = xor i32 %64, %1
  %143 = and i32 %54, %1
  %144 = and i32 %70, %8
  %145 = or i32 %17, %45
  %146 = or i32 %5, %54
  %147 = or i32 %21, %58
  %148 = or i32 %21, %4
  %149 = and i32 %11, %19
  %150 = shl i32 %149, 1
  %151 = or i32 %14, %5
  %152 = and i32 %15, %0
  %153 = xor i32 %78, %0
  %154 = or i32 %19, %104
  %155 = xor i32 %49, %108
  %156 = xor i32 %125, %43
  %157 = shl i32 %0, 1
  %158 = or i32 %21, %1
  %159 = and i32 %54, %4
  %160 = xor i32 %47, %36
  %161 = or i32 %7, %0
  %162 = xor i32 %40, %161
  %163 = and i32 %17, %1
  %164 = and i32 %70, %2
  %165 = add i32 %24, 1
  %166 = xor i32 %63, %78
  %167 = xor i32 %63, %1
  %168 = or i32 %30, %34
  %169 = or i32 %7, %5
  %170 = or i32 %63, %26
  %171 = or i32 %73, %0
  %172 = and i32 %81, %58
  %173 = or i32 %7, %45
  %174 = or i32 %33, %96
  %175 = shl i32 %174, 1
  %176 = or i32 %91, %4
  %177 = and i32 %20, %26
  %178 = or i32 %17, %26
  %179 = and i32 %11, %54
  %180 = or i32 %8, %98
  %181 = and i32 %58, %2
  %182 = xor i32 %96, %36
  %183 = or i32 %26, %21
  %184 = or i32 %5, %19
  %185 = shl i32 %184, 1
  %186 = or i32 %91, %1
  %187 = and i32 %19, %6
  %188 = xor i32 %24, %15
  %189 = add i32 %26, 1
  %190 = or i32 %98, %2
  %191 = or i32 %45, %19
  %192 = and i32 %8, %122
  %193 = and i32 %26, %64
  %194 = shl i32 %193, 2
  %195 = and i32 %17, %6
  %196 = and i32 %6, %2
  %197 = or i32 %63, %30
  %198 = and i32 %11, %8
  %199 = xor i32 %5, %78
  %200 = xor i32 %122, %2
  %201 = or i32 %5, %2
  %202 = and i32 %11, %2
  %203 = xor i32 %81, %1
  %204 = and i32 %8, %34
  %205 = or i32 %78, %0
  %206 = and i32 %7, %6
  %207 = shl i32 %206, 1
  %208 = or i32 %66, %0
  %209 = and i32 %20, %1
  %210 = xor i32 %14, %0
  %211 = shl i32 %66, 1
  %212 = and i32 %19, %58
  %213 = xor i32 %81, %45
  %214 = or i32 %63, %4
  %215 = xor i32 %161, -1
  %216 = or i32 %40, %215
  %217 = or i32 %7, %98
  %218 = or i32 %86, %57
  %219 = or i32 %32, %0
  %220 = xor i32 %98, %2
  %221 = xor i32 %8, %0
  %222 = or i32 %15, %0
  %223 = or i32 %54, %4
  %224 = or i32 %45, %54
  %225 = xor i32 %70, %2
  %226 = xor i32 %50, -1
  %227 = xor i32 %49, %226
  %228 = or i32 %26, %19
  %229 = and i32 %81, %26
  %230 = shl i32 %229, 1
  %231 = or i32 %63, %66
  %232 = or i32 %17, %1
  %233 = or i32 %63, %104
  %234 = or i32 %26, %2
  %235 = xor i32 %6, %2
  %236 = or i32 %24, %14
  %237 = xor i32 %57, %87
  %238 = or i32 %14, %34
  %239 = shl i32 %91, 1
  %240 = and i32 %20, %58
  %241 = and i32 %25, %1
  %242 = shl i32 %19, 1
  %243 = and i32 %64, %1
  %244 = or i32 %7, %104
  %245 = shl i32 %244, 2
  %246 = and i32 %66, %34
  %247 = and i32 %30, %34
  %248 = and i32 %66, %0
  %249 = mul i32 %248, 10
  %250 = and i32 %30, %0
  %251 = and i32 %73, %34
  %252 = mul i32 %86, -6
  %253 = and i32 %73, %0
  %254 = mul i32 %253, -17
  %255 = add i32 %70, %98
  %256 = add i32 %255, %15
  %257 = add i32 %256, %190
  %258 = add i32 %257, %181
  %259 = add i32 %258, %141
  %260 = add i32 %259, %250
  %261 = add i32 %260, %251
  %262 = add i32 %261, %231
  %263 = add i32 %262, %183
  %264 = add i32 %263, %172
  %265 = add i32 %264, %167
  %266 = add i32 %265, %145
  %267 = add i32 %266, %143
  %268 = add i32 %267, %119
  %269 = add i32 %268, %56
  %270 = add i32 %269, %13
  %271 = shl i32 %270, 1
  %272 = sub i32 %189, %164
  %273 = add i32 %272, %146
  %274 = sub i32 %273, %192
  %275 = add i32 %274, %131
  %276 = mul i32 %275, 5
  %277 = sub i32 %21, %209
  %278 = sub i32 %277, %247
  %279 = sub i32 %278, %158
  %280 = mul i32 %279, 3
  %281 = add i32 %1, -4
  %282 = sub i32 %281, %157
  %283 = add i32 %282, %26
  %284 = add i32 %283, %2
  %285 = add i32 %284, %104
  %286 = add i32 %285, %45
  %287 = add i32 %286, %32
  %288 = sub i32 %287, %14
  %289 = add i32 %288, %65
  %290 = sub i32 %289, %69
  %291 = add i32 %290, %20
  %292 = sub i32 %291, %94
  %293 = add i32 %292, %102
  %294 = sub i32 %293, %114
  %295 = add i32 %294, %129
  %296 = sub i32 %295, %135
  %297 = add i32 %296, %139
  %298 = sub i32 %297, %24
  %299 = sub i32 %298, %154
  %300 = add i32 %299, %165
  %301 = sub i32 %300, %187
  %302 = sub i32 %301, %191
  %303 = add i32 %302, %196
  %304 = add i32 %303, %200
  %305 = sub i32 %304, %201
  %306 = sub i32 %305, %202
  %307 = add i32 %306, %73
  %308 = add i32 %307, %212
  %309 = sub i32 %308, %220
  %310 = sub i32 %309, %225
  %311 = add i32 %310, %228
  %312 = sub i32 %311, %72
  %313 = sub i32 %312, %234
  %314 = sub i32 %313, %235
  %315 = sub i32 %314, %242
  %316 = sub i32 %315, %10
  %317 = add i32 %316, %12
  %318 = sub i32 %317, %16
  %319 = add i32 %318, %18
  %320 = add i32 %319, %22
  %321 = sub i32 %320, %23
  %322 = sub i32 %321, %27
  %323 = add i32 %322, %31
  %324 = add i32 %323, %38
  %325 = sub i32 %324, %46
  %326 = add i32 %325, %55
  %327 = sub i32 %326, %57
  %328 = sub i32 %327, %59
  %329 = add i32 %328, %62
  %330 = add i32 %329, %67
  %331 = add i32 %330, %68
  %332 = sub i32 %331, %71
  %333 = add i32 %332, %76
  %334 = add i32 %333, %77
  %335 = add i32 %334, %79
  %336 = sub i32 %335, %80
  %337 = sub i32 %336, %84
  %338 = sub i32 %337, %85
  %339 = add i32 %338, %92
  %340 = add i32 %339, %93
  %341 = sub i32 %340, %95
  %342 = sub i32 %341, %96
  %343 = sub i32 %342, %99
  %344 = sub i32 %343, %100
  %345 = add i32 %344, %101
  %346 = sub i32 %345, %103
  %347 = add i32 %346, %105
  %348 = sub i32 %347, %111
  %349 = sub i32 %348, %112
  %350 = sub i32 %349, %113
  %351 = sub i32 %350, %115
  %352 = sub i32 %351, %108
  %353 = sub i32 %352, %116
  %354 = add i32 %353, %117
  %355 = sub i32 %354, %118
  %356 = add i32 %355, %121
  %357 = sub i32 %356, %123
  %358 = sub i32 %357, %124
  %359 = add i32 %358, %127
  %360 = add i32 %359, %128
  %361 = add i32 %360, %130
  %362 = add i32 %361, %132
  %363 = add i32 %362, %89
  %364 = sub i32 %363, %133
  %365 = add i32 %364, %134
  %366 = add i32 %365, %136
  %367 = sub i32 %366, %137
  %368 = add i32 %367, %138
  %369 = sub i32 %368, %140
  %370 = sub i32 %369, %142
  %371 = add i32 %370, %144
  %372 = add i32 %371, %147
  %373 = add i32 %372, %148
  %374 = sub i32 %373, %150
  %375 = sub i32 %374, %47
  %376 = sub i32 %375, %151
  %377 = sub i32 %376, %152
  %378 = sub i32 %377, %153
  %379 = sub i32 %378, %159
  %380 = sub i32 %379, %163
  %381 = sub i32 %380, %166
  %382 = add i32 %381, %168
  %383 = add i32 %382, %169
  %384 = add i32 %383, %170
  %385 = add i32 %384, %171
  %386 = sub i32 %385, %173
  %387 = sub i32 %386, %176
  %388 = sub i32 %387, %177
  %389 = add i32 %388, %178
  %390 = add i32 %389, %179
  %391 = add i32 %390, %35
  %392 = add i32 %391, %180
  %393 = sub i32 %392, %185
  %394 = add i32 %393, %186
  %395 = add i32 %394, %188
  %396 = add i32 %395, %195
  %397 = add i32 %396, %197
  %398 = add i32 %397, %198
  %399 = sub i32 %398, %199
  %400 = sub i32 %399, %203
  %401 = sub i32 %400, %204
  %402 = add i32 %401, %205
  %403 = add i32 %402, %208
  %404 = sub i32 %403, %210
  %405 = sub i32 %404, %211
  %406 = add i32 %405, %213
  %407 = add i32 %406, %214
  %408 = sub i32 %407, %217
  %409 = sub i32 %408, %219
  %410 = sub i32 %409, %221
  %411 = sub i32 %410, %222
  %412 = add i32 %411, %223
  %413 = add i32 %412, %224
  %414 = sub i32 %413, %161
  %415 = add i32 %414, %232
  %416 = sub i32 %415, %233
  %417 = add i32 %416, %236
  %418 = sub i32 %417, %238
  %419 = sub i32 %418, %239
  %420 = add i32 %419, %240
  %421 = add i32 %420, %241
  %422 = sub i32 %421, %243
  %423 = add i32 %422, %246
  %424 = sub i32 %423, %33
  %425 = sub i32 %424, %29
  %426 = add i32 %425, %37
  %427 = sub i32 %426, %44
  %428 = sub i32 %427, %48
  %429 = sub i32 %428, %53
  %430 = sub i32 %429, %61
  %431 = sub i32 %430, %75
  %432 = sub i32 %431, %83
  %433 = add i32 %432, %88
  %434 = add i32 %433, %90
  %435 = add i32 %434, %97
  %436 = sub i32 %435, %110
  %437 = sub i32 %436, %120
  %438 = sub i32 %437, %126
  %439 = add i32 %438, %155
  %440 = sub i32 %439, %156
  %441 = sub i32 %440, %160
  %442 = sub i32 %441, %162
  %443 = add i32 %442, %182
  %444 = sub i32 %443, %194
  %445 = sub i32 %444, %207
  %446 = sub i32 %445, %216
  %447 = add i32 %446, %218
  %448 = sub i32 %447, %227
  %449 = sub i32 %448, %230
  %450 = sub i32 %449, %237
  %451 = add i32 %450, %245
  %452 = add i32 %451, %249
  %453 = add i32 %452, %252
  %454 = add i32 %453, %254
  %455 = sub i32 %454, %52
  %456 = sub i32 %455, %107
  %457 = sub i32 %456, %175
  %458 = add i32 %457, %280
  %459 = add i32 %458, %276
  %460 = add i32 %459, %271
  %461 = icmp eq i32 %9, %460
  %462 = select i1 %461, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %463 = tail call i32 @puts(i8* nonnull dereferenceable(1) %462)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
