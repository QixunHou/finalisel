; ModuleID = '../.././c_source_file/1921_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1921_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = or i32 %2, %0
  %6 = xor i32 %5, %4
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, %2
  %10 = shl i32 %9, 1
  %11 = add i32 %6, %10
  %12 = xor i32 %5, -1
  %13 = xor i32 %1, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %12, %14
  %16 = or i32 %1, %0
  %17 = xor i32 %2, %1
  %18 = and i32 %17, %16
  %19 = xor i32 %2, -1
  %20 = or i32 %7, %0
  %21 = and i32 %20, %19
  %22 = and i32 %19, %1
  %23 = xor i32 %22, -1
  %24 = and i32 %23, %0
  %25 = and i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %7
  %28 = xor i32 %4, -1
  %29 = and i32 %28, %2
  %30 = xor i32 %22, %0
  %31 = or i32 %22, %8
  %32 = shl i32 %31, 1
  %33 = xor i32 %20, -1
  %34 = or i32 %17, %33
  %35 = or i32 %25, %22
  %36 = or i32 %19, %0
  %37 = and i32 %36, %1
  %38 = or i32 %2, %1
  %39 = xor i32 %38, -1
  %40 = or i32 %25, %39
  %41 = and i32 %19, %0
  %42 = or i32 %41, %7
  %43 = xor i32 %0, -1
  %44 = or i32 %12, %1
  %45 = and i32 %13, %19
  %46 = and i32 %2, %1
  %47 = and i32 %46, %43
  %48 = and i32 %17, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %47, %49
  %51 = and i32 %7, %2
  %52 = and i32 %51, %43
  %53 = or i32 %17, %43
  %54 = xor i32 %53, 2147483647
  %55 = or i32 %54, %52
  %56 = xor i32 %2, %0
  %57 = or i32 %56, %7
  %58 = and i32 %5, %7
  %59 = xor i32 %56, -1
  %60 = and i32 %59, %14
  %61 = xor i32 %17, -1
  %62 = or i32 %8, %61
  %63 = xor i32 %16, -1
  %64 = or i32 %59, %63
  %65 = xor i32 %8, -1
  %66 = and i32 %65, %2
  %67 = and i32 %59, %65
  %68 = or i32 %8, %2
  %69 = or i32 %41, %14
  %70 = and i32 %56, %14
  %71 = or i32 %19, %1
  %72 = or i32 %71, %0
  %73 = shl i32 %72, 1
  %74 = and i32 %26, %14
  %75 = or i32 %25, %13
  %76 = xor i32 %52, %53
  %77 = and i32 %5, %14
  %78 = or i32 %17, %8
  %79 = xor i32 %36, -1
  %80 = or i32 %4, %79
  %81 = shl i32 %80, 1
  %82 = xor i32 %23, %0
  %83 = or i32 %25, %1
  %84 = or i32 %61, %33
  %85 = xor i32 %71, -1
  %86 = or i32 %85, %0
  %87 = or i32 %61, %43
  %88 = and i32 %56, %20
  %89 = add i32 %4, 1
  %90 = or i32 %79, %1
  %91 = xor i32 %41, -1
  %92 = and i32 %13, %91
  %93 = and i32 %17, %65
  %94 = xor i32 %79, %1
  %95 = xor i32 %85, %0
  %96 = xor i32 %41, %71
  %97 = or i32 %4, %59
  %98 = xor i32 %91, %1
  %99 = and i32 %61, %43
  %100 = xor i32 %61, %0
  %101 = shl i32 %100, 1
  %102 = or i32 %23, %0
  %103 = xor i32 %16, %2
  %104 = or i32 %39, %0
  %105 = or i32 %59, %14
  %106 = or i32 %23, %43
  %107 = or i32 %39, %43
  %108 = or i32 %41, %46
  %109 = shl i32 %108, 1
  %110 = or i32 %56, %8
  %111 = shl i32 %110, 2
  %112 = and i32 %51, %0
  %113 = or i32 %7, %2
  %114 = xor i32 %113, %0
  %115 = or i32 %112, %114
  %116 = xor i32 %25, %16
  %117 = and i32 %36, %7
  %118 = and i32 %17, %28
  %119 = xor i32 %8, %23
  %120 = or i32 %61, %0
  %121 = xor i32 %46, -1
  %122 = and i32 %121, %43
  %123 = and i32 %46, %0
  %124 = xor i32 %17, %0
  %125 = xor i32 %123, %124
  %126 = and i32 %16, %61
  %127 = and i32 %19, %65
  %128 = or i32 %4, %39
  %129 = or i32 %56, %13
  %130 = or i32 %59, %7
  %131 = or i32 %19, %63
  %132 = and i32 %59, %28
  %133 = or i32 %25, %7
  %134 = and i32 %61, %28
  %135 = and i32 %13, %26
  %136 = or i32 %41, %13
  %137 = add i32 %16, 1
  %138 = or i32 %4, %61
  %139 = xor i32 %28, %2
  %140 = or i32 %13, %59
  %141 = shl i32 %140, 2
  %142 = or i32 %59, %1
  %143 = or i32 %33, %2
  %144 = xor i32 %46, %0
  %145 = or i32 %4, %85
  %146 = xor i32 %41, %121
  %147 = shl i32 %146, 1
  %148 = or i32 %41, %1
  %149 = or i32 %121, %0
  %150 = or i32 %38, %0
  %151 = or i32 %13, %79
  %152 = and i32 %56, %65
  %153 = or i32 %46, %0
  %154 = shl i32 %153, 1
  %155 = and i32 %56, %1
  %156 = xor i32 %26, %1
  %157 = and i32 %16, %2
  %158 = xor i32 %63, %2
  %159 = and i32 %19, %14
  %160 = xor i32 %25, %20
  %161 = xor i32 %38, %4
  %162 = and i32 %38, %43
  %163 = and i32 %16, %19
  %164 = or i32 %17, %0
  %165 = xor i32 %112, %164
  %166 = and i32 %13, %2
  %167 = or i32 %22, %0
  %168 = and i32 %61, %0
  %169 = shl i32 %53, 1
  %170 = xor i32 %124, -1
  %171 = or i32 %123, %170
  %172 = add i32 %2, 1
  %173 = or i32 %56, %14
  %174 = shl i32 %173, 1
  %175 = and i32 %16, %59
  %176 = and i32 %39, %43
  %177 = shl i32 %176, 4
  %178 = and i32 %22, %43
  %179 = mul i32 %178, 6
  %180 = and i32 %39, %0
  %181 = shl i32 %180, 3
  %182 = and i32 %22, %0
  %183 = and i32 %85, %43
  %184 = mul i32 %183, -7
  %185 = mul i32 %47, 18
  %186 = and i32 %85, %0
  %187 = shl i32 %186, 1
  %188 = add i32 %8, %43
  %189 = add i32 %188, %160
  %190 = add i32 %189, %142
  %191 = add i32 %190, %132
  %192 = add i32 %191, %120
  %193 = add i32 %192, %82
  %194 = add i32 %193, %30
  %195 = add i32 %194, %115
  %196 = add i32 %195, %55
  %197 = shl i32 %196, 1
  %198 = or i32 %182, %162
  %199 = sub i32 %70, %198
  %200 = mul i32 %199, 5
  %201 = sub i32 %144, %46
  %202 = sub i32 %201, %123
  %203 = mul i32 %202, 3
  %204 = add i32 %78, %36
  %205 = add i32 %204, %119
  %206 = shl i32 %205, 2
  %207 = add i32 %1, %0
  %208 = sub i32 %7, %207
  %209 = add i32 %208, %89
  %210 = add i32 %209, %4
  %211 = add i32 %210, %137
  %212 = add i32 %211, %14
  %213 = add i32 %212, %172
  %214 = sub i32 %213, %21
  %215 = sub i32 %214, %29
  %216 = add i32 %215, %45
  %217 = sub i32 %216, %66
  %218 = add i32 %217, %68
  %219 = add i32 %218, %5
  %220 = add i32 %219, %103
  %221 = add i32 %220, %127
  %222 = sub i32 %221, %131
  %223 = sub i32 %222, %17
  %224 = add i32 %223, %139
  %225 = add i32 %224, %143
  %226 = sub i32 %225, %157
  %227 = sub i32 %226, %158
  %228 = add i32 %227, %159
  %229 = add i32 %228, %163
  %230 = sub i32 %229, %166
  %231 = sub i32 %230, %15
  %232 = sub i32 %231, %18
  %233 = sub i32 %232, %24
  %234 = sub i32 %233, %27
  %235 = sub i32 %234, %34
  %236 = sub i32 %235, %35
  %237 = add i32 %236, %37
  %238 = add i32 %237, %40
  %239 = add i32 %238, %42
  %240 = sub i32 %239, %44
  %241 = add i32 %240, %57
  %242 = sub i32 %241, %58
  %243 = sub i32 %242, %60
  %244 = add i32 %243, %62
  %245 = add i32 %244, %64
  %246 = sub i32 %245, %67
  %247 = add i32 %246, %69
  %248 = add i32 %247, %74
  %249 = sub i32 %248, %75
  %250 = add i32 %249, %77
  %251 = add i32 %250, %83
  %252 = sub i32 %251, %84
  %253 = add i32 %252, %86
  %254 = sub i32 %253, %87
  %255 = sub i32 %254, %88
  %256 = sub i32 %255, %90
  %257 = add i32 %256, %92
  %258 = sub i32 %257, %93
  %259 = add i32 %258, %94
  %260 = sub i32 %259, %95
  %261 = add i32 %260, %96
  %262 = sub i32 %261, %97
  %263 = sub i32 %262, %98
  %264 = add i32 %263, %99
  %265 = add i32 %264, %102
  %266 = add i32 %265, %104
  %267 = add i32 %266, %105
  %268 = add i32 %267, %106
  %269 = add i32 %268, %107
  %270 = sub i32 %269, %116
  %271 = add i32 %270, %117
  %272 = sub i32 %271, %118
  %273 = sub i32 %272, %122
  %274 = add i32 %273, %126
  %275 = add i32 %274, %128
  %276 = sub i32 %275, %129
  %277 = add i32 %276, %130
  %278 = add i32 %277, %133
  %279 = add i32 %278, %134
  %280 = add i32 %279, %135
  %281 = sub i32 %280, %136
  %282 = sub i32 %281, %138
  %283 = add i32 %282, %124
  %284 = add i32 %283, %145
  %285 = sub i32 %284, %148
  %286 = sub i32 %285, %149
  %287 = add i32 %286, %150
  %288 = add i32 %287, %151
  %289 = sub i32 %288, %152
  %290 = add i32 %289, %155
  %291 = add i32 %290, %156
  %292 = sub i32 %291, %161
  %293 = sub i32 %292, %167
  %294 = sub i32 %293, %168
  %295 = sub i32 %294, %175
  %296 = sub i32 %295, %32
  %297 = add i32 %296, %50
  %298 = sub i32 %297, %73
  %299 = add i32 %298, %76
  %300 = sub i32 %299, %81
  %301 = sub i32 %300, %101
  %302 = sub i32 %301, %109
  %303 = sub i32 %302, %111
  %304 = sub i32 %303, %125
  %305 = sub i32 %304, %141
  %306 = sub i32 %305, %147
  %307 = sub i32 %306, %154
  %308 = add i32 %307, %165
  %309 = sub i32 %308, %169
  %310 = sub i32 %309, %171
  %311 = sub i32 %310, %174
  %312 = sub i32 %311, %177
  %313 = add i32 %312, %179
  %314 = sub i32 %313, %181
  %315 = add i32 %314, %184
  %316 = add i32 %315, %185
  %317 = sub i32 %316, %187
  %318 = add i32 %317, %200
  %319 = add i32 %318, %203
  %320 = add i32 %319, %206
  %321 = add i32 %320, %197
  %322 = icmp eq i32 %11, %321
  %323 = select i1 %322, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %324 = tail call i32 @puts(i8* nonnull dereferenceable(1) %323)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
