; ModuleID = '../.././c_source_file/0007_path_condition_crackme.c'
source_filename = "../.././c_source_file/0007_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = xor i32 %1, -1
  %6 = and i32 %5, %2
  %7 = and i32 %6, %4
  %8 = xor i32 %2, %1
  %9 = or i32 %8, %4
  %10 = xor i32 %7, %9
  %11 = sub i32 0, %10
  %12 = xor i32 %2, -1
  %13 = and i32 %12, %0
  %14 = xor i32 %1, %0
  %15 = or i32 %13, %14
  %16 = or i32 %2, %1
  %17 = xor i32 %16, -1
  %18 = or i32 %5, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %8, -1
  %21 = or i32 %20, %19
  %22 = or i32 %1, %0
  %23 = xor i32 %2, %0
  %24 = and i32 %23, %22
  %25 = xor i32 %20, %0
  %26 = shl i32 %25, 1
  %27 = and i32 %5, %0
  %28 = or i32 %27, %20
  %29 = and i32 %2, %0
  %30 = or i32 %29, %17
  %31 = xor i32 %13, -1
  %32 = and i32 %14, %31
  %33 = or i32 %13, %5
  %34 = xor i32 %13, %1
  %35 = and i32 %12, %1
  %36 = xor i32 %35, -1
  %37 = or i32 %36, %0
  %38 = or i32 %12, %0
  %39 = and i32 %38, %14
  %40 = shl i32 %39, 1
  %41 = and i32 %23, %5
  %42 = and i32 %2, %1
  %43 = and i32 %42, %0
  %44 = and i32 %16, %4
  %45 = xor i32 %44, 1073741823
  %46 = xor i32 %45, %43
  %47 = xor i32 %17, %0
  %48 = or i32 %17, %4
  %49 = or i32 %8, %0
  %50 = shl i32 %49, 1
  %51 = or i32 %12, %1
  %52 = xor i32 %13, %51
  %53 = and i32 %6, %0
  %54 = or i32 %5, %2
  %55 = xor i32 %54, %4
  %56 = xor i32 %55, %53
  %57 = and i32 %54, %4
  %58 = xor i32 %53, -1
  %59 = xor i32 %57, %58
  %60 = xor i32 %38, %1
  %61 = xor i32 %42, %0
  %62 = xor i32 %23, -1
  %63 = and i32 %14, %62
  %64 = xor i32 %27, %36
  %65 = xor i32 %51, -1
  %66 = or i32 %65, %4
  %67 = and i32 %38, %1
  %68 = xor i32 %8, %0
  %69 = or i32 %53, %68
  %70 = and i32 %1, %0
  %71 = or i32 %70, %20
  %72 = xor i32 %29, -1
  %73 = and i32 %72, %5
  %74 = xor i32 %31, %1
  %75 = xor i32 %9, -1
  %76 = or i32 %7, %75
  %77 = xor i32 %27, -1
  %78 = and i32 %77, %2
  %79 = shl i32 %78, 1
  %80 = xor i32 %29, %36
  %81 = shl i32 %80, 1
  %82 = or i32 %35, %0
  %83 = or i32 %29, %14
  %84 = or i32 %36, %4
  %85 = xor i32 %27, %2
  %86 = xor i32 %14, -1
  %87 = or i32 %62, %86
  %88 = xor i32 %38, -1
  %89 = or i32 %70, %88
  %90 = and i32 %51, %4
  %91 = or i32 %53, %57
  %92 = xor i32 %35, %0
  %93 = or i32 %14, %2
  %94 = and i32 %36, %4
  %95 = or i32 %20, %4
  %96 = xor i32 %42, -1
  %97 = or i32 %96, %4
  %98 = or i32 %43, %44
  %99 = xor i32 %22, -1
  %100 = or i32 %12, %99
  %101 = or i32 %23, %1
  %102 = and i32 %42, %4
  %103 = and i32 %8, %0
  %104 = or i32 %102, %103
  %105 = or i32 %29, %5
  %106 = add i32 %2, 1
  %107 = and i32 %18, %20
  %108 = or i32 %62, %19
  %109 = xor i32 %27, %96
  %110 = or i32 %23, %99
  %111 = and i32 %96, %4
  %112 = or i32 %35, %27
  %113 = xor i32 %70, -1
  %114 = and i32 %62, %113
  %115 = xor i32 %65, %0
  %116 = add i32 %14, 1
  %117 = or i32 %88, %86
  %118 = xor i32 %49, -1
  %119 = or i32 %53, %118
  %120 = xor i32 %70, %2
  %121 = and i32 %20, %4
  %122 = and i32 %22, %62
  %123 = or i32 %2, %0
  %124 = xor i32 %123, -1
  %125 = or i32 %14, %124
  %126 = and i32 %14, %12
  %127 = or i32 %70, %124
  %128 = or i32 %23, %14
  %129 = or i32 %29, %1
  %130 = or i32 %20, %99
  %131 = xor i32 %68, 2147483647
  %132 = or i32 %131, %43
  %133 = xor i32 %29, %18
  %134 = and i32 %22, %12
  %135 = xor i32 %16, %0
  %136 = or i32 %43, %135
  %137 = add i32 %27, 1
  %138 = and i32 %72, %1
  %139 = or i32 %27, %2
  %140 = xor i32 %51, %70
  %141 = or i32 %14, %12
  %142 = or i32 %17, %0
  %143 = and i32 %23, %14
  %144 = shl i32 %143, 1
  %145 = or i32 %51, %4
  %146 = or i32 %70, %65
  %147 = or i32 %70, %17
  %148 = or i32 %70, %2
  %149 = or i32 %19, %2
  %150 = xor i32 %19, %2
  %151 = and i32 %54, %0
  %152 = xor i32 %151, -1
  %153 = xor i32 %7, %152
  %154 = or i32 %88, %1
  %155 = or i32 %13, %1
  %156 = or i32 %14, %88
  %157 = xor i32 %123, %70
  %158 = and i32 %23, %86
  %159 = shl i32 %123, 1
  %160 = xor i32 %29, %16
  %161 = and i32 %38, %86
  %162 = xor i32 %123, %1
  %163 = or i32 %29, %19
  %164 = xor i32 %96, %0
  %165 = or i32 %51, %0
  %166 = and i32 %20, %0
  %167 = and i32 %22, %20
  %168 = or i32 %8, %99
  %169 = or i32 %23, %86
  %170 = and i32 %20, %113
  %171 = and i32 %20, %77
  %172 = shl i32 %171, 1
  %173 = xor i32 %72, %1
  %174 = or i32 %27, %62
  %175 = or i32 %13, %42
  %176 = and i32 %18, %2
  %177 = and i32 %16, %0
  %178 = or i32 %102, %177
  %179 = and i32 %51, %0
  %180 = or i32 %8, %70
  %181 = xor i32 %22, %2
  %182 = or i32 %20, %0
  %183 = or i32 %8, %19
  %184 = and i32 %123, %5
  %185 = or i32 %8, %27
  %186 = shl i32 %185, 1
  %187 = add i32 %38, 1
  %188 = and i32 %12, %86
  %189 = or i32 %13, %65
  %190 = shl i32 %35, 1
  %191 = and i32 %123, %86
  %192 = shl i32 %191, 1
  %193 = xor i32 %43, %68
  %194 = xor i32 %77, %2
  %195 = and i32 %18, %62
  %196 = or i32 %42, %4
  %197 = shl i32 %196, 1
  %198 = xor i32 %13, %96
  %199 = and i32 %123, %14
  %200 = or i32 %124, %5
  %201 = and i32 %23, %113
  %202 = and i32 %62, %77
  %203 = or i32 %27, %12
  %204 = and i32 %23, %18
  %205 = and i32 %8, %22
  %206 = xor i32 %36, %0
  %207 = or i32 %62, %5
  %208 = xor i32 %124, %1
  %209 = and i32 %72, %86
  %210 = shl i32 %209, 1
  %211 = and i32 %12, %113
  %212 = shl i32 %211, 1
  %213 = and i32 %8, %4
  %214 = or i32 %62, %99
  %215 = or i32 %12, %19
  %216 = xor i32 %99, %2
  %217 = and i32 %62, %86
  %218 = shl i32 %217, 1
  %219 = and i32 %14, %2
  %220 = and i32 %18, %12
  %221 = or i32 %65, %0
  %222 = and i32 %8, %18
  %223 = add i32 %13, 1
  %224 = xor i32 %38, %70
  %225 = or i32 %23, %27
  %226 = xor i32 %135, -1
  %227 = xor i32 %43, %226
  %228 = or i32 %23, %70
  %229 = shl i32 %228, 2
  %230 = and i32 %36, %0
  %231 = or i32 %99, %2
  %232 = and i32 %38, %5
  %233 = or i32 %124, %1
  %234 = xor i32 %51, %0
  %235 = xor i32 %29, %1
  %236 = or i32 %43, %213
  %237 = and i32 %22, %2
  %238 = or i32 %96, %0
  %239 = and i32 %23, %77
  %240 = shl i32 %239, 2
  %241 = and i32 %62, %5
  %242 = and i32 %31, %1
  %243 = and i32 %23, %1
  %244 = or i32 %88, %5
  %245 = or i32 %23, %5
  %246 = or i32 %124, %86
  %247 = and i32 %17, %4
  %248 = mul i32 %247, -12
  %249 = and i32 %35, %4
  %250 = mul i32 %249, 14
  %251 = and i32 %17, %0
  %252 = and i32 %35, %0
  %253 = mul i32 %252, 11
  %254 = and i32 %65, %4
  %255 = mul i32 %254, 23
  %256 = shl i32 %102, 3
  %257 = and i32 %65, %0
  %258 = shl i32 %257, 3
  %259 = add i32 %237, %4
  %260 = add i32 %259, %42
  %261 = add i32 %260, %13
  %262 = add i32 %261, %238
  %263 = add i32 %262, %233
  %264 = add i32 %263, %183
  %265 = add i32 %264, %166
  %266 = add i32 %265, %157
  %267 = add i32 %266, %125
  %268 = add i32 %267, %97
  %269 = add i32 %268, %44
  %270 = add i32 %269, %71
  %271 = add i32 %270, %47
  %272 = add i32 %271, %28
  %273 = add i32 %272, %98
  %274 = add i32 %273, %132
  %275 = shl i32 %274, 1
  %276 = add i32 %232, %124
  %277 = add i32 %276, %251
  %278 = sub i32 %277, %213
  %279 = sub i32 %278, %145
  %280 = mul i32 %279, 3
  %281 = add i32 %46, %156
  %282 = shl i32 %281, 2
  %283 = sub i32 %202, %95
  %284 = mul i32 %283, 5
  %285 = add i32 %86, %1
  %286 = sub i32 %285, %70
  %287 = add i32 %286, %106
  %288 = add i32 %287, %116
  %289 = add i32 %288, %137
  %290 = add i32 %289, %17
  %291 = sub i32 %290, %51
  %292 = sub i32 %291, %85
  %293 = sub i32 %292, %93
  %294 = add i32 %293, %100
  %295 = add i32 %294, %20
  %296 = sub i32 %295, %120
  %297 = sub i32 %296, %29
  %298 = sub i32 %297, %126
  %299 = add i32 %298, %134
  %300 = sub i32 %299, %16
  %301 = add i32 %300, %139
  %302 = sub i32 %301, %141
  %303 = add i32 %302, %148
  %304 = sub i32 %303, %23
  %305 = sub i32 %304, %149
  %306 = sub i32 %305, %150
  %307 = sub i32 %306, %176
  %308 = sub i32 %307, %181
  %309 = add i32 %308, %187
  %310 = sub i32 %309, %188
  %311 = sub i32 %310, %194
  %312 = sub i32 %311, %203
  %313 = sub i32 %312, %215
  %314 = add i32 %313, %216
  %315 = add i32 %314, %219
  %316 = add i32 %315, %220
  %317 = add i32 %316, %223
  %318 = sub i32 %317, %231
  %319 = sub i32 %318, %15
  %320 = add i32 %319, %21
  %321 = add i32 %320, %24
  %322 = add i32 %321, %30
  %323 = sub i32 %322, %9
  %324 = add i32 %323, %32
  %325 = sub i32 %324, %33
  %326 = sub i32 %325, %34
  %327 = add i32 %326, %37
  %328 = add i32 %327, %41
  %329 = sub i32 %328, %48
  %330 = sub i32 %329, %52
  %331 = sub i32 %330, %60
  %332 = sub i32 %331, %61
  %333 = sub i32 %332, %63
  %334 = sub i32 %333, %64
  %335 = sub i32 %334, %66
  %336 = sub i32 %335, %67
  %337 = add i32 %336, %73
  %338 = sub i32 %337, %74
  %339 = sub i32 %338, %79
  %340 = add i32 %339, %82
  %341 = sub i32 %340, %83
  %342 = sub i32 %341, %84
  %343 = add i32 %342, %87
  %344 = add i32 %343, %89
  %345 = add i32 %344, %68
  %346 = sub i32 %345, %90
  %347 = sub i32 %346, %92
  %348 = sub i32 %347, %94
  %349 = add i32 %348, %101
  %350 = add i32 %349, %105
  %351 = add i32 %350, %107
  %352 = sub i32 %351, %108
  %353 = add i32 %352, %109
  %354 = add i32 %353, %110
  %355 = add i32 %354, %111
  %356 = sub i32 %355, %112
  %357 = sub i32 %356, %114
  %358 = add i32 %357, %115
  %359 = add i32 %358, %117
  %360 = sub i32 %359, %121
  %361 = sub i32 %360, %122
  %362 = add i32 %361, %127
  %363 = sub i32 %362, %128
  %364 = add i32 %363, %129
  %365 = add i32 %364, %130
  %366 = add i32 %365, %133
  %367 = add i32 %366, %135
  %368 = sub i32 %367, %138
  %369 = add i32 %368, %140
  %370 = add i32 %369, %142
  %371 = sub i32 %370, %146
  %372 = add i32 %371, %147
  %373 = add i32 %372, %154
  %374 = add i32 %373, %155
  %375 = sub i32 %374, %158
  %376 = sub i32 %375, %159
  %377 = sub i32 %376, %160
  %378 = sub i32 %377, %161
  %379 = sub i32 %378, %162
  %380 = add i32 %379, %163
  %381 = add i32 %380, %164
  %382 = add i32 %381, %165
  %383 = sub i32 %382, %167
  %384 = add i32 %383, %168
  %385 = add i32 %384, %169
  %386 = sub i32 %385, %170
  %387 = add i32 %386, %173
  %388 = sub i32 %387, %174
  %389 = sub i32 %388, %175
  %390 = sub i32 %389, %179
  %391 = add i32 %390, %180
  %392 = add i32 %391, %182
  %393 = add i32 %392, %184
  %394 = sub i32 %393, %189
  %395 = sub i32 %394, %190
  %396 = add i32 %395, %195
  %397 = sub i32 %396, %198
  %398 = add i32 %397, %199
  %399 = sub i32 %398, %200
  %400 = add i32 %399, %201
  %401 = sub i32 %400, %204
  %402 = add i32 %401, %205
  %403 = sub i32 %402, %206
  %404 = add i32 %403, %207
  %405 = sub i32 %404, %208
  %406 = sub i32 %405, %212
  %407 = add i32 %406, %214
  %408 = sub i32 %407, %177
  %409 = sub i32 %408, %221
  %410 = add i32 %409, %222
  %411 = sub i32 %410, %224
  %412 = sub i32 %411, %225
  %413 = sub i32 %412, %230
  %414 = add i32 %413, %234
  %415 = sub i32 %414, %235
  %416 = add i32 %415, %241
  %417 = add i32 %416, %242
  %418 = add i32 %417, %243
  %419 = add i32 %418, %244
  %420 = sub i32 %419, %245
  %421 = sub i32 %420, %246
  %422 = add i32 %421, %43
  %423 = sub i32 %422, %26
  %424 = sub i32 %423, %40
  %425 = sub i32 %424, %50
  %426 = sub i32 %425, %56
  %427 = sub i32 %426, %59
  %428 = sub i32 %427, %69
  %429 = add i32 %428, %76
  %430 = sub i32 %429, %81
  %431 = add i32 %430, %91
  %432 = add i32 %431, %104
  %433 = sub i32 %432, %119
  %434 = sub i32 %433, %136
  %435 = sub i32 %434, %144
  %436 = sub i32 %435, %153
  %437 = sub i32 %436, %172
  %438 = add i32 %437, %178
  %439 = sub i32 %438, %186
  %440 = sub i32 %439, %192
  %441 = sub i32 %440, %193
  %442 = sub i32 %441, %197
  %443 = sub i32 %442, %210
  %444 = sub i32 %443, %218
  %445 = add i32 %444, %227
  %446 = sub i32 %445, %229
  %447 = sub i32 %446, %236
  %448 = sub i32 %447, %240
  %449 = add i32 %448, %248
  %450 = add i32 %449, %250
  %451 = add i32 %450, %253
  %452 = add i32 %451, %255
  %453 = add i32 %452, %256
  %454 = sub i32 %453, %258
  %455 = add i32 %454, %284
  %456 = add i32 %455, %282
  %457 = add i32 %456, %280
  %458 = add i32 %457, %275
  %459 = icmp eq i32 %458, %11
  %460 = select i1 %459, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %461 = tail call i32 @puts(i8* nonnull dereferenceable(1) %460)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
