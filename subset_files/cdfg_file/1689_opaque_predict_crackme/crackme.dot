digraph "DFG for'crackme' function" {
	Node0x22ff510[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x22ffbc0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x22ffc80[shape=record, label="  %5 = shl i32 %3, 1"];
	Node0x22ffcf0[shape=record, label="  %6 = or i32 %5, 1"];
	Node0x22ffd60[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x22ffdd0[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x22ffe40[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x22ffee0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x22fff50[shape=record, label="  %11 = or i32 %7, %0"];
	Node0x22fffc0[shape=record, label="  %12 = shl i32 %0, 1"];
	Node0x2300030[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x23000a0[shape=record, label="  %14 = xor i32 %11, -1"];
	Node0x2300140[shape=record, label="  %15 = mul i32 %14, -5"];
	Node0x23001b0[shape=record, label="  %16 = shl i32 %13, 1"];
	Node0x2300220[shape=record, label="  %17 = add i32 %7, %0"];
	Node0x2300290[shape=record, label="  %18 = sub i32 %17, %12"];
	Node0x2300300[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0x2300370[shape=record, label="  %20 = add i32 %19, %15"];
	Node0x23003e0[shape=record, label="  %21 = sub i32 %20, %9"];
	Node0x2300450[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x23004c0[shape=record, label="  %23 = add i32 %22, %6"];
	Node0x2300530[shape=record, label="  %24 = add i32 %23, %10"];
	Node0x23005a0[shape=record, label="  %25 = icmp eq i32 %24, %4"];
	Node0x22a0268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2300a40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x2300a90[shape=record, label="  ret void"];
	Node0x22ff510 -> Node0x22ffbc0;
	Node0x22ffbc0 -> Node0x22ffc80;
	Node0x22ffc80 -> Node0x22ffcf0;
	Node0x22ffcf0 -> Node0x22ffd60;
	Node0x22ffd60 -> Node0x22ffdd0;
	Node0x22ffdd0 -> Node0x22ffe40;
	Node0x22ffe40 -> Node0x22ffee0;
	Node0x22ffee0 -> Node0x22fff50;
	Node0x22fff50 -> Node0x22fffc0;
	Node0x22fffc0 -> Node0x2300030;
	Node0x2300030 -> Node0x23000a0;
	Node0x23000a0 -> Node0x2300140;
	Node0x2300140 -> Node0x23001b0;
	Node0x23001b0 -> Node0x2300220;
	Node0x2300220 -> Node0x2300290;
	Node0x2300290 -> Node0x2300300;
	Node0x2300300 -> Node0x2300370;
	Node0x2300370 -> Node0x23003e0;
	Node0x23003e0 -> Node0x2300450;
	Node0x2300450 -> Node0x23004c0;
	Node0x23004c0 -> Node0x2300530;
	Node0x2300530 -> Node0x23005a0;
	Node0x23005a0 -> Node0x22a0268;
	Node0x22a0268 -> Node0x2300a40;
	Node0x2300a40 -> Node0x2300a90;
edge [color=red]
	Node0x22ff510 -> Node0x22ffbc0;
	Node0x22ff510 -> Node0x22ffc80;
	Node0x22ffc80 -> Node0x22ffcf0;
	Node0x22ffd60 -> Node0x22ffdd0;
	Node0x22ffdd0 -> Node0x22ffe40;
	Node0x22ffe40 -> Node0x22ffee0;
	Node0x22ffd60 -> Node0x22fff50;
	Node0x22fff50 -> Node0x23000a0;
	Node0x23000a0 -> Node0x2300140;
	Node0x2300030 -> Node0x23001b0;
	Node0x22ffd60 -> Node0x2300220;
	Node0x2300220 -> Node0x2300290;
	Node0x22fffc0 -> Node0x2300290;
	Node0x2300290 -> Node0x2300300;
	Node0x22fff50 -> Node0x2300300;
	Node0x2300300 -> Node0x2300370;
	Node0x2300140 -> Node0x2300370;
	Node0x2300370 -> Node0x23003e0;
	Node0x22ffe40 -> Node0x23003e0;
	Node0x23003e0 -> Node0x2300450;
	Node0x23001b0 -> Node0x2300450;
	Node0x2300450 -> Node0x23004c0;
	Node0x22ffcf0 -> Node0x23004c0;
	Node0x23004c0 -> Node0x2300530;
	Node0x22ffee0 -> Node0x2300530;
	Node0x2300530 -> Node0x23005a0;
	Node0x22ffbc0 -> Node0x23005a0;
	Node0x23005a0 -> Node0x22a0268;
	Node0x22a0268 -> Node0x2300a40;
}
