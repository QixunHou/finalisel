digraph "DFG for'crackme' function" {
	Node0x12f5b20[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x12f5bc0[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x12f5c80[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x12f5cf0[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x12f5d60[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x12f5dd0[shape=record, label="  %8 = and i32 %5, %0"];
	Node0x12f5e40[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x12f5eb0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x12f5f20[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x12f5f90[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0x12f6030[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x12f60d0[shape=record, label="  %14 = shl i32 %7, 1"];
	Node0x12f6140[shape=record, label="  %15 = shl i32 %6, 1"];
	Node0x12f61b0[shape=record, label="  %16 = sub i32 1, %0"];
	Node0x12f6220[shape=record, label="  %17 = add i32 %16, %7"];
	Node0x12f6290[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x12f6300[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x12f6370[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x12f63e0[shape=record, label="  %21 = sub i32 %20, %14"];
	Node0x12f6450[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x12f64c0[shape=record, label="  %23 = sub i32 %22, %13"];
	Node0x12f6530[shape=record, label="  %24 = icmp eq i32 %4, %23"];
	Node0x1296268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x12f69d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x12f6a20[shape=record, label="  ret void"];
	Node0x12f5b20 -> Node0x12f5bc0;
	Node0x12f5bc0 -> Node0x12f5c80;
	Node0x12f5c80 -> Node0x12f5cf0;
	Node0x12f5cf0 -> Node0x12f5d60;
	Node0x12f5d60 -> Node0x12f5dd0;
	Node0x12f5dd0 -> Node0x12f5e40;
	Node0x12f5e40 -> Node0x12f5eb0;
	Node0x12f5eb0 -> Node0x12f5f20;
	Node0x12f5f20 -> Node0x12f5f90;
	Node0x12f5f90 -> Node0x12f6030;
	Node0x12f6030 -> Node0x12f60d0;
	Node0x12f60d0 -> Node0x12f6140;
	Node0x12f6140 -> Node0x12f61b0;
	Node0x12f61b0 -> Node0x12f6220;
	Node0x12f6220 -> Node0x12f6290;
	Node0x12f6290 -> Node0x12f6300;
	Node0x12f6300 -> Node0x12f6370;
	Node0x12f6370 -> Node0x12f63e0;
	Node0x12f63e0 -> Node0x12f6450;
	Node0x12f6450 -> Node0x12f64c0;
	Node0x12f64c0 -> Node0x12f6530;
	Node0x12f6530 -> Node0x1296268;
	Node0x1296268 -> Node0x12f69d0;
	Node0x12f69d0 -> Node0x12f6a20;
edge [color=red]
	Node0x12f5b20 -> Node0x12f5bc0;
	Node0x12f5c80 -> Node0x12f5cf0;
	Node0x12f5c80 -> Node0x12f5dd0;
	Node0x12f5e40 -> Node0x12f5eb0;
	Node0x12f5f20 -> Node0x12f5f90;
	Node0x12f5f90 -> Node0x12f6030;
	Node0x12f5d60 -> Node0x12f60d0;
	Node0x12f5cf0 -> Node0x12f6140;
	Node0x12f61b0 -> Node0x12f6220;
	Node0x12f5d60 -> Node0x12f6220;
	Node0x12f6220 -> Node0x12f6290;
	Node0x12f5dd0 -> Node0x12f6290;
	Node0x12f6290 -> Node0x12f6300;
	Node0x12f5e40 -> Node0x12f6300;
	Node0x12f6300 -> Node0x12f6370;
	Node0x12f5eb0 -> Node0x12f6370;
	Node0x12f6370 -> Node0x12f63e0;
	Node0x12f60d0 -> Node0x12f63e0;
	Node0x12f63e0 -> Node0x12f6450;
	Node0x12f6140 -> Node0x12f6450;
	Node0x12f6450 -> Node0x12f64c0;
	Node0x12f6030 -> Node0x12f64c0;
	Node0x12f5bc0 -> Node0x12f6530;
	Node0x12f64c0 -> Node0x12f6530;
	Node0x12f6530 -> Node0x1296268;
	Node0x1296268 -> Node0x12f69d0;
}
