digraph "DFG for'crackme' function" {
	Node0x65f070[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x65f0e0[shape=record, label="  %6 = xor i32 %5, %1"];
	Node0x65f180[shape=record, label="  %7 = mul i32 %6, -4"];
	Node0x65f1f0[shape=record, label="  %8 = sub i32 %7, %3"];
	Node0x65f260[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x65f2d0[shape=record, label="  %10 = sub i32 %8, %9"];
	Node0x65f340[shape=record, label="  %11 = or i32 %5, %1"];
	Node0x65f3b0[shape=record, label="  %12 = and i32 %5, %1"];
	Node0x65f450[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x65f4f0[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x65f560[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x65f5d0[shape=record, label="  %16 = shl i32 %11, 1"];
	Node0x65f640[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x65f6b0[shape=record, label="  %18 = shl i32 %15, 1"];
	Node0x65f720[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0x65f790[shape=record, label="  %20 = xor i32 %9, -1"];
	Node0x65f830[shape=record, label="  %21 = mul i32 %20, 3"];
	Node0x65f8a0[shape=record, label="  %22 = xor i32 %3, -1"];
	Node0x65f910[shape=record, label="  %23 = and i32 %22, %0"];
	Node0x65f980[shape=record, label="  %24 = and i32 %3, %0"];
	Node0x65fa20[shape=record, label="  %25 = xor i32 %1, 2147483647"];
	Node0x65fa90[shape=record, label="  %26 = and i32 %25, %2"];
	Node0x65fb00[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x65fba0[shape=record, label="  %28 = add i32 %2, 6"];
	Node0x65fc10[shape=record, label="  %29 = add i32 %28, %11"];
	Node0x65fc80[shape=record, label="  %30 = add i32 %29, %15"];
	Node0x65fcf0[shape=record, label="  %31 = add i32 %30, %13"];
	Node0x65fd60[shape=record, label="  %32 = sub i32 %31, %18"];
	Node0x65ffe0[shape=record, label="  %33 = add i32 %32, %19"];
	Node0x660050[shape=record, label="  %34 = add i32 %33, %23"];
	Node0x6600c0[shape=record, label="  %35 = add i32 %34, %24"];
	Node0x660130[shape=record, label="  %36 = sub i32 %35, %14"];
	Node0x6601a0[shape=record, label="  %37 = add i32 %36, %17"];
	Node0x660210[shape=record, label="  %38 = add i32 %37, %21"];
	Node0x660280[shape=record, label="  %39 = add i32 %38, %27"];
	Node0x6602f0[shape=record, label="  %40 = icmp eq i32 %10, %39"];
	Node0x5ff268[shape=record, label="  %41 = select i1 %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x660790[shape=record, label="  %42 = tail call i32 @puts(i8* nonnull dereferenceable(1) %41)"];
	Node0x6607e0[shape=record, label="  ret void"];
	Node0x65f070 -> Node0x65f0e0;
	Node0x65f0e0 -> Node0x65f180;
	Node0x65f180 -> Node0x65f1f0;
	Node0x65f1f0 -> Node0x65f260;
	Node0x65f260 -> Node0x65f2d0;
	Node0x65f2d0 -> Node0x65f340;
	Node0x65f340 -> Node0x65f3b0;
	Node0x65f3b0 -> Node0x65f450;
	Node0x65f450 -> Node0x65f4f0;
	Node0x65f4f0 -> Node0x65f560;
	Node0x65f560 -> Node0x65f5d0;
	Node0x65f5d0 -> Node0x65f640;
	Node0x65f640 -> Node0x65f6b0;
	Node0x65f6b0 -> Node0x65f720;
	Node0x65f720 -> Node0x65f790;
	Node0x65f790 -> Node0x65f830;
	Node0x65f830 -> Node0x65f8a0;
	Node0x65f8a0 -> Node0x65f910;
	Node0x65f910 -> Node0x65f980;
	Node0x65f980 -> Node0x65fa20;
	Node0x65fa20 -> Node0x65fa90;
	Node0x65fa90 -> Node0x65fb00;
	Node0x65fb00 -> Node0x65fba0;
	Node0x65fba0 -> Node0x65fc10;
	Node0x65fc10 -> Node0x65fc80;
	Node0x65fc80 -> Node0x65fcf0;
	Node0x65fcf0 -> Node0x65fd60;
	Node0x65fd60 -> Node0x65ffe0;
	Node0x65ffe0 -> Node0x660050;
	Node0x660050 -> Node0x6600c0;
	Node0x6600c0 -> Node0x660130;
	Node0x660130 -> Node0x6601a0;
	Node0x6601a0 -> Node0x660210;
	Node0x660210 -> Node0x660280;
	Node0x660280 -> Node0x6602f0;
	Node0x6602f0 -> Node0x5ff268;
	Node0x5ff268 -> Node0x660790;
	Node0x660790 -> Node0x6607e0;
edge [color=red]
	Node0x65f070 -> Node0x65f0e0;
	Node0x65f0e0 -> Node0x65f180;
	Node0x65f180 -> Node0x65f1f0;
	Node0x65f1f0 -> Node0x65f2d0;
	Node0x65f260 -> Node0x65f2d0;
	Node0x65f070 -> Node0x65f340;
	Node0x65f070 -> Node0x65f3b0;
	Node0x65f3b0 -> Node0x65f450;
	Node0x65f450 -> Node0x65f4f0;
	Node0x65f340 -> Node0x65f5d0;
	Node0x65f5d0 -> Node0x65f640;
	Node0x65f560 -> Node0x65f6b0;
	Node0x65f260 -> Node0x65f790;
	Node0x65f790 -> Node0x65f830;
	Node0x65f8a0 -> Node0x65f910;
	Node0x65fa20 -> Node0x65fa90;
	Node0x65fa90 -> Node0x65fb00;
	Node0x65fba0 -> Node0x65fc10;
	Node0x65f340 -> Node0x65fc10;
	Node0x65fc10 -> Node0x65fc80;
	Node0x65f560 -> Node0x65fc80;
	Node0x65fc80 -> Node0x65fcf0;
	Node0x65f450 -> Node0x65fcf0;
	Node0x65fcf0 -> Node0x65fd60;
	Node0x65f6b0 -> Node0x65fd60;
	Node0x65fd60 -> Node0x65ffe0;
	Node0x65f720 -> Node0x65ffe0;
	Node0x65ffe0 -> Node0x660050;
	Node0x65f910 -> Node0x660050;
	Node0x660050 -> Node0x6600c0;
	Node0x65f980 -> Node0x6600c0;
	Node0x6600c0 -> Node0x660130;
	Node0x65f4f0 -> Node0x660130;
	Node0x660130 -> Node0x6601a0;
	Node0x65f640 -> Node0x6601a0;
	Node0x6601a0 -> Node0x660210;
	Node0x65f830 -> Node0x660210;
	Node0x660210 -> Node0x660280;
	Node0x65fb00 -> Node0x660280;
	Node0x65f2d0 -> Node0x6602f0;
	Node0x660280 -> Node0x6602f0;
	Node0x6602f0 -> Node0x5ff268;
	Node0x5ff268 -> Node0x660790;
}
