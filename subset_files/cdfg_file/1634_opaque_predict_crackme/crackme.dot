digraph "DFG for'crackme' function" {
	Node0x68db30[shape=record, label="  %3 = xor i32 %1, 2147483647"];
	Node0x68dba0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x68dc60[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x68dd00[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x68dd70[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x68dde0[shape=record, label="  %8 = add i32 %6, %7"];
	Node0x68de50[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x68def0[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x68df90[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0x68e030[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0x68e0a0[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x68e140[shape=record, label="  %14 = mul i32 %13, 3"];
	Node0x68e1b0[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x68e220[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x68e290[shape=record, label="  %17 = sub i32 2, %0"];
	Node0x68e300[shape=record, label="  %18 = add i32 %17, %7"];
	Node0x68e370[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x68e3e0[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x68e450[shape=record, label="  %21 = add i32 %20, %16"];
	Node0x68e4c0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x68e530[shape=record, label="  %23 = add i32 %22, %5"];
	Node0x68e5a0[shape=record, label="  %24 = icmp eq i32 %8, %23"];
	Node0x62e268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x68ea40[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x68ea90[shape=record, label="  ret void"];
	Node0x68db30 -> Node0x68dba0;
	Node0x68dba0 -> Node0x68dc60;
	Node0x68dc60 -> Node0x68dd00;
	Node0x68dd00 -> Node0x68dd70;
	Node0x68dd70 -> Node0x68dde0;
	Node0x68dde0 -> Node0x68de50;
	Node0x68de50 -> Node0x68def0;
	Node0x68def0 -> Node0x68df90;
	Node0x68df90 -> Node0x68e030;
	Node0x68e030 -> Node0x68e0a0;
	Node0x68e0a0 -> Node0x68e140;
	Node0x68e140 -> Node0x68e1b0;
	Node0x68e1b0 -> Node0x68e220;
	Node0x68e220 -> Node0x68e290;
	Node0x68e290 -> Node0x68e300;
	Node0x68e300 -> Node0x68e370;
	Node0x68e370 -> Node0x68e3e0;
	Node0x68e3e0 -> Node0x68e450;
	Node0x68e450 -> Node0x68e4c0;
	Node0x68e4c0 -> Node0x68e530;
	Node0x68e530 -> Node0x68e5a0;
	Node0x68e5a0 -> Node0x62e268;
	Node0x62e268 -> Node0x68ea40;
	Node0x68ea40 -> Node0x68ea90;
edge [color=red]
	Node0x68db30 -> Node0x68dba0;
	Node0x68dba0 -> Node0x68dc60;
	Node0x68dc60 -> Node0x68dd00;
	Node0x68dd00 -> Node0x68dde0;
	Node0x68dd70 -> Node0x68dde0;
	Node0x68de50 -> Node0x68def0;
	Node0x68def0 -> Node0x68df90;
	Node0x68e030 -> Node0x68e0a0;
	Node0x68e0a0 -> Node0x68e140;
	Node0x68e1b0 -> Node0x68e220;
	Node0x68e290 -> Node0x68e300;
	Node0x68dd70 -> Node0x68e300;
	Node0x68e300 -> Node0x68e370;
	Node0x68de50 -> Node0x68e370;
	Node0x68e370 -> Node0x68e3e0;
	Node0x68e140 -> Node0x68e3e0;
	Node0x68e3e0 -> Node0x68e450;
	Node0x68e220 -> Node0x68e450;
	Node0x68e450 -> Node0x68e4c0;
	Node0x68df90 -> Node0x68e4c0;
	Node0x68e4c0 -> Node0x68e530;
	Node0x68dc60 -> Node0x68e530;
	Node0x68dde0 -> Node0x68e5a0;
	Node0x68e530 -> Node0x68e5a0;
	Node0x68e5a0 -> Node0x62e268;
	Node0x62e268 -> Node0x68ea40;
}
