; ModuleID = '../.././c_source_file/1115_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1115_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %1
  %8 = xor i32 %0, -1
  %9 = add i32 %7, 1
  %10 = xor i32 %4, -1
  %11 = xor i32 %3, -1
  %12 = and i32 %11, %5
  %13 = and i32 %12, %10
  %14 = xor i32 %5, %3
  %15 = or i32 %14, %10
  %16 = xor i32 %15, 2147483647
  %17 = or i32 %16, %13
  %18 = shl i32 %17, 1
  %19 = and i32 %11, %4
  %20 = or i32 %19, %5
  %21 = sub i32 %9, %20
  %22 = sub i32 %21, %18
  %23 = xor i32 %2, -1
  %24 = or i32 %23, %1
  %25 = xor i32 %24, %0
  %26 = xor i32 %1, %0
  %27 = and i32 %26, %23
  %28 = and i32 %2, %1
  %29 = and i32 %28, %0
  %30 = and i32 %7, %8
  %31 = or i32 %29, %30
  %32 = and i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %26, -1
  %35 = and i32 %33, %34
  %36 = or i32 %23, %0
  %37 = and i32 %36, %34
  %38 = shl i32 %37, 1
  %39 = and i32 %7, %0
  %40 = xor i32 %1, -1
  %41 = and i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %7, -1
  %44 = and i32 %43, %42
  %45 = and i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %46, %2
  %48 = or i32 %40, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %51, %49
  %53 = or i32 %41, %23
  %54 = or i32 %51, %34
  %55 = shl i32 %54, 1
  %56 = and i32 %40, %2
  %57 = and i32 %56, %0
  %58 = or i32 %7, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %57, %59
  %61 = or i32 %28, %41
  %62 = or i32 %1, %0
  %63 = xor i32 %62, -1
  %64 = xor i32 %63, %2
  %65 = and i32 %23, %1
  %66 = xor i32 %32, %1
  %67 = or i32 %2, %0
  %68 = or i32 %50, %45
  %69 = and i32 %23, %0
  %70 = or i32 %69, %34
  %71 = and i32 %48, %51
  %72 = and i32 %51, %42
  %73 = or i32 %7, %49
  %74 = or i32 %24, %0
  %75 = or i32 %41, %2
  %76 = or i32 %32, %63
  %77 = xor i32 %65, -1
  %78 = shl i32 %77, 1
  %79 = xor i32 %36, -1
  %80 = add i32 %36, 1
  %81 = or i32 %43, %0
  %82 = and i32 %48, %23
  %83 = xor i32 %28, %0
  %84 = and i32 %7, %48
  %85 = or i32 %40, %2
  %86 = xor i32 %85, %0
  %87 = or i32 %57, %86
  %88 = or i32 %2, %1
  %89 = xor i32 %88, -1
  %90 = or i32 %7, %41
  %91 = and i32 %56, %8
  %92 = or i32 %7, %8
  %93 = xor i32 %91, %92
  %94 = or i32 %50, %1
  %95 = xor i32 %32, %88
  %96 = xor i32 %67, -1
  %97 = or i32 %45, %96
  %98 = or i32 %45, %89
  %99 = xor i32 %69, %24
  %100 = shl i32 %99, 1
  %101 = and i32 %23, %42
  %102 = and i32 %24, %0
  %103 = and i32 %50, %40
  %104 = xor i32 %36, %45
  %105 = or i32 %96, %40
  %106 = or i32 %79, %34
  %107 = xor i32 %24, -1
  %108 = or i32 %107, %0
  %109 = and i32 %48, %2
  %110 = or i32 %50, %41
  %111 = or i32 %28, %0
  %112 = or i32 %49, %2
  %113 = and i32 %77, %0
  %114 = xor i32 %28, -1
  %115 = or i32 %32, %40
  %116 = or i32 %32, %34
  %117 = shl i32 %33, 1
  %118 = or i32 %32, %26
  %119 = and i32 %36, %1
  %120 = and i32 %43, %0
  %121 = xor i32 %45, %2
  %122 = shl i32 %121, 1
  %123 = xor i32 %89, %0
  %124 = xor i32 %77, %0
  %125 = or i32 %50, %26
  %126 = and i32 %50, %48
  %127 = xor i32 %62, %2
  %128 = or i32 %45, %43
  %129 = shl i32 %128, 1
  %130 = xor i32 %57, %58
  %131 = and i32 %26, %51
  %132 = or i32 %26, %23
  %133 = or i32 %88, %8
  %134 = xor i32 %32, %48
  %135 = and i32 %88, %8
  %136 = xor i32 %96, %1
  %137 = and i32 %67, %26
  %138 = xor i32 %7, %0
  %139 = xor i32 %138, -1
  %140 = or i32 %29, %139
  %141 = or i32 %45, %79
  %142 = xor i32 %69, -1
  %143 = and i32 %26, %142
  %144 = and i32 %43, %46
  %145 = and i32 %142, %40
  %146 = and i32 %51, %1
  %147 = and i32 %36, %40
  %148 = or i32 %45, %51
  %149 = and i32 %7, %42
  %150 = shl i32 %149, 1
  %151 = or i32 %29, %135
  %152 = and i32 %142, %1
  %153 = or i32 %7, %45
  %154 = xor i32 %88, %0
  %155 = or i32 %29, %154
  %156 = or i32 %57, %138
  %157 = xor i32 %32, %77
  %158 = and i32 %7, %46
  %159 = shl i32 %0, 1
  %160 = or i32 %26, %79
  %161 = or i32 %69, %1
  %162 = xor i32 %29, -1
  %163 = xor i32 %154, %162
  %164 = and i32 %67, %1
  %165 = add i32 %45, 1
  %166 = or i32 %65, %41
  %167 = shl i32 %166, 1
  %168 = add i32 %2, 1
  %169 = or i32 %63, %2
  %170 = xor i32 %41, %2
  %171 = xor i32 %107, %0
  %172 = or i32 %45, %107
  %173 = or i32 %32, %89
  %174 = xor i32 %65, %0
  %175 = xor i32 %41, %114
  %176 = xor i32 %142, %1
  %177 = and i32 %28, %8
  %178 = or i32 %177, %39
  %179 = and i32 %7, %62
  %180 = or i32 %32, %65
  %181 = and i32 %142, %34
  %182 = add i32 %50, 1
  %183 = or i32 %43, %8
  %184 = xor i32 %30, %162
  %185 = or i32 %23, %49
  %186 = and i32 %67, %34
  %187 = and i32 %62, %23
  %188 = xor i32 %85, -1
  %189 = or i32 %188, %0
  %190 = xor i32 %57, %189
  %191 = and i32 %67, %40
  %192 = or i32 %69, %26
  %193 = shl i32 %192, 1
  %194 = or i32 %77, %8
  %195 = or i32 %65, %8
  %196 = and i32 %62, %43
  %197 = or i32 %69, %107
  %198 = xor i32 %69, %114
  %199 = xor i32 %135, %162
  %200 = or i32 %7, %63
  %201 = or i32 %23, %63
  %202 = and i32 %88, %0
  %203 = xor i32 %202, 2147483647
  %204 = xor i32 %203, %177
  %205 = shl i32 %1, 1
  %206 = and i32 %26, %2
  %207 = xor i32 %24, %45
  %208 = and i32 %89, %8
  %209 = mul i32 %208, -26
  %210 = and i32 %65, %8
  %211 = and i32 %89, %0
  %212 = shl i32 %211, 3
  %213 = and i32 %65, %0
  %214 = and i32 %107, %8
  %215 = and i32 %107, %0
  %216 = or i32 %5, %4
  %217 = xor i32 %4, %3
  %218 = and i32 %216, %217
  %219 = and i32 %5, %3
  %220 = and i32 %219, %10
  %221 = and i32 %14, %4
  %222 = xor i32 %221, -1
  %223 = xor i32 %220, %222
  %224 = and i32 %5, %4
  %225 = xor i32 %224, -1
  %226 = and i32 %217, %225
  %227 = or i32 %4, %3
  %228 = xor i32 %224, %227
  %229 = xor i32 %5, -1
  %230 = and i32 %229, %3
  %231 = xor i32 %230, -1
  %232 = xor i32 %224, %231
  %233 = xor i32 %5, %4
  %234 = xor i32 %233, -1
  %235 = and i32 %217, %234
  %236 = or i32 %229, %4
  %237 = xor i32 %236, -1
  %238 = xor i32 %217, -1
  %239 = or i32 %237, %238
  %240 = and i32 %236, %3
  %241 = or i32 %234, %238
  %242 = and i32 %229, %4
  %243 = xor i32 %242, -1
  %244 = and i32 %217, %243
  %245 = xor i32 %227, -1
  %246 = and i32 %4, %3
  %247 = or i32 %246, %5
  %248 = or i32 %245, %5
  %249 = or i32 %217, %5
  %250 = xor i32 %216, -1
  %251 = or i32 %250, %3
  %252 = or i32 %233, %19
  %253 = or i32 %229, %3
  %254 = xor i32 %253, -1
  %255 = or i32 %242, %254
  %256 = or i32 %242, %3
  %257 = and i32 %234, %3
  %258 = or i32 %5, %3
  %259 = xor i32 %258, -1
  %260 = or i32 %259, %10
  %261 = or i32 %230, %19
  %262 = or i32 %234, %245
  %263 = and i32 %234, %238
  %264 = and i32 %12, %4
  %265 = or i32 %14, %4
  %266 = xor i32 %265, -1
  %267 = or i32 %264, %266
  %268 = or i32 %220, %221
  %269 = and i32 %219, %4
  %270 = xor i32 %258, %4
  %271 = xor i32 %269, -1
  %272 = xor i32 %270, %271
  %273 = or i32 %242, %238
  %274 = xor i32 %14, -1
  %275 = or i32 %224, %259
  %276 = or i32 %11, %5
  %277 = xor i32 %276, %4
  %278 = or i32 %264, %277
  %279 = xor i32 %19, -1
  %280 = xor i32 %279, %5
  %281 = or i32 %246, %229
  %282 = or i32 %219, %19
  %283 = xor i32 %14, %4
  %284 = or i32 %264, %283
  %285 = or i32 %11, %4
  %286 = xor i32 %285, -1
  %287 = or i32 %229, %286
  %288 = and i32 %233, %217
  %289 = and i32 %243, %3
  %290 = shl i32 %289, 1
  %291 = or i32 %242, %11
  %292 = or i32 %246, %254
  %293 = xor i32 %227, %5
  %294 = xor i32 %224, %285
  %295 = or i32 %234, %3
  %296 = or i32 %250, %11
  %297 = xor i32 %219, -1
  %298 = xor i32 %242, %297
  %299 = and i32 %233, %285
  %300 = and i32 %233, %11
  %301 = xor i32 %246, -1
  %302 = and i32 %233, %301
  %303 = and i32 %274, %10
  %304 = add i32 %217, 1
  %305 = or i32 %14, %19
  %306 = xor i32 %13, %15
  %307 = shl i32 %306, 1
  %308 = and i32 %225, %11
  %309 = xor i32 %219, %4
  %310 = shl i32 %309, 1
  %311 = and i32 %258, %10
  %312 = or i32 %269, %311
  %313 = or i32 %224, %230
  %314 = or i32 %254, %4
  %315 = xor i32 %259, %4
  %316 = xor i32 %19, %231
  %317 = or i32 %246, %234
  %318 = and i32 %236, %238
  %319 = or i32 %19, %274
  %320 = and i32 %216, %3
  %321 = or i32 %219, %4
  %322 = and i32 %229, %301
  %323 = or i32 %242, %217
  %324 = or i32 %246, %259
  %325 = and i32 %229, %238
  %326 = or i32 %19, %234
  %327 = xor i32 %224, %3
  %328 = or i32 %224, %245
  %329 = xor i32 %277, -1
  %330 = xor i32 %264, %329
  %331 = or i32 %258, %10
  %332 = or i32 %224, %217
  %333 = or i32 %233, %11
  %334 = or i32 %286, %5
  %335 = or i32 %234, %286
  %336 = and i32 %231, %10
  %337 = xor i32 %242, %3
  %338 = shl i32 %337, 1
  %339 = or i32 %229, %238
  %340 = shl i32 %339, 1
  %341 = and i32 %243, %238
  %342 = or i32 %229, %245
  %343 = xor i32 %253, %246
  %344 = and i32 %236, %11
  %345 = xor i32 %242, %253
  %346 = xor i32 %243, %3
  %347 = xor i32 %254, %4
  %348 = and i32 %234, %301
  %349 = and i32 %258, %4
  %350 = and i32 %14, %10
  %351 = xor i32 %350, 2147483647
  %352 = xor i32 %351, %269
  %353 = shl i32 %352, 1
  %354 = or i32 %297, %4
  %355 = xor i32 %19, %297
  %356 = shl i32 %355, 1
  %357 = or i32 %224, %11
  %358 = and i32 %227, %229
  %359 = xor i32 %19, %5
  %360 = xor i32 %237, %3
  %361 = or i32 %14, %245
  %362 = xor i32 %246, %5
  %363 = shl i32 %362, 1
  %364 = xor i32 %264, %265
  %365 = or i32 %217, %234
  %366 = xor i32 %311, %271
  %367 = or i32 %224, %3
  %368 = and i32 %216, %238
  %369 = or i32 %233, %245
  %370 = xor i32 %250, %3
  %371 = shl i32 %370, 1
  %372 = and i32 %279, %5
  %373 = xor i32 %236, %246
  %374 = xor i32 %230, %4
  %375 = add i32 %5, 1
  %376 = or i32 %233, %3
  %377 = and i32 %14, %227
  %378 = and i32 %276, %10
  %379 = or i32 %264, %378
  %380 = and i32 %276, %4
  %381 = or i32 %13, %380
  %382 = or i32 %233, %246
  %383 = or i32 %297, %10
  %384 = or i32 %217, %229
  %385 = or i32 %250, %238
  %386 = xor i32 %258, %246
  %387 = or i32 %238, %5
  %388 = shl i32 %234, 1
  %389 = add i32 %246, 1
  %390 = xor i32 %245, %5
  %391 = or i32 %274, %10
  %392 = or i32 %246, %250
  %393 = and i32 %234, %11
  %394 = xor i32 %283, 2147483647
  %395 = or i32 %394, %269
  %396 = shl i32 %395, 1
  %397 = add i32 %236, 1
  %398 = and i32 %259, %10
  %399 = mul i32 %398, -6
  %400 = and i32 %230, %10
  %401 = shl i32 %400, 2
  %402 = and i32 %259, %4
  %403 = and i32 %230, %4
  %404 = and i32 %254, %10
  %405 = and i32 %254, %4
  %406 = add i32 %213, %101
  %407 = add i32 %406, %158
  %408 = add i32 %407, %143
  %409 = add i32 %408, %390
  %410 = add i32 %409, %263
  %411 = add i32 %410, %403
  %412 = shl i32 %411, 2
  %413 = sub i32 %134, %67
  %414 = sub i32 %413, %155
  %415 = add i32 %414, %269
  %416 = add i32 %415, %251
  %417 = sub i32 %416, %312
  %418 = sub i32 %417, %381
  %419 = mul i32 %418, 5
  %420 = sub i32 %215, %62
  %421 = sub i32 %420, %214
  %422 = add i32 %421, %164
  %423 = sub i32 %422, %39
  %424 = sub i32 %423, %324
  %425 = sub i32 %424, %405
  %426 = mul i32 %425, 3
  %427 = sub i32 %28, %210
  %428 = sub i32 %427, %404
  %429 = mul i32 %428, 10
  %430 = or i32 %220, %402
  %431 = mul i32 %430, -15
  %432 = sub i32 -2, %41
  %433 = add i32 %432, %112
  %434 = add i32 %433, %64
  %435 = add i32 %434, %191
  %436 = add i32 %435, %180
  %437 = add i32 %436, %174
  %438 = add i32 %437, %161
  %439 = add i32 %438, %125
  %440 = add i32 %439, %124
  %441 = add i32 %440, %115
  %442 = add i32 %441, %105
  %443 = add i32 %442, %97
  %444 = add i32 %443, %71
  %445 = add i32 %444, %5
  %446 = add i32 %445, %204
  %447 = add i32 %446, %377
  %448 = add i32 %447, %382
  %449 = add i32 %448, %367
  %450 = add i32 %449, %350
  %451 = add i32 %450, %343
  %452 = add i32 %451, %336
  %453 = add i32 %452, %319
  %454 = add i32 %453, %256
  %455 = add i32 %454, %232
  %456 = add i32 %455, %228
  %457 = add i32 %456, %218
  %458 = shl i32 %457, 1
  %459 = sub i32 -4, %0
  %460 = sub i32 %459, %159
  %461 = add i32 %460, %2
  %462 = sub i32 %461, %48
  %463 = add i32 %462, %165
  %464 = add i32 %463, %168
  %465 = sub i32 %464, %205
  %466 = add i32 %465, %27
  %467 = sub i32 %466, %47
  %468 = add i32 %467, %24
  %469 = add i32 %468, %53
  %470 = sub i32 %469, %65
  %471 = sub i32 %470, %75
  %472 = add i32 %471, %80
  %473 = add i32 %472, %82
  %474 = add i32 %473, %89
  %475 = add i32 %474, %43
  %476 = sub i32 %475, %109
  %477 = add i32 %476, %114
  %478 = sub i32 %477, %127
  %479 = add i32 %478, %132
  %480 = sub i32 %479, %69
  %481 = sub i32 %480, %50
  %482 = add i32 %481, %36
  %483 = sub i32 %482, %169
  %484 = sub i32 %483, %170
  %485 = add i32 %484, %182
  %486 = sub i32 %485, %185
  %487 = sub i32 %486, %187
  %488 = add i32 %487, %201
  %489 = sub i32 %488, %206
  %490 = add i32 %489, 1
  %491 = sub i32 %490, %25
  %492 = add i32 %491, %35
  %493 = add i32 %492, %44
  %494 = sub i32 %493, %52
  %495 = sub i32 %494, %61
  %496 = add i32 %495, %66
  %497 = add i32 %496, %68
  %498 = sub i32 %497, %70
  %499 = add i32 %498, %72
  %500 = add i32 %499, %73
  %501 = sub i32 %500, %74
  %502 = add i32 %501, %76
  %503 = sub i32 %502, %78
  %504 = sub i32 %503, %81
  %505 = sub i32 %504, %83
  %506 = sub i32 %505, %84
  %507 = sub i32 %506, %90
  %508 = sub i32 %507, %94
  %509 = sub i32 %508, %95
  %510 = add i32 %509, %98
  %511 = sub i32 %510, %102
  %512 = add i32 %511, %103
  %513 = sub i32 %512, %104
  %514 = add i32 %513, %106
  %515 = sub i32 %514, %108
  %516 = add i32 %515, %110
  %517 = sub i32 %516, %111
  %518 = sub i32 %517, %113
  %519 = add i32 %518, %116
  %520 = sub i32 %519, %117
  %521 = add i32 %520, %118
  %522 = sub i32 %521, %119
  %523 = add i32 %522, %120
  %524 = sub i32 %523, %122
  %525 = add i32 %524, %123
  %526 = add i32 %525, %126
  %527 = sub i32 %526, %131
  %528 = add i32 %527, %133
  %529 = add i32 %528, %135
  %530 = sub i32 %529, %136
  %531 = sub i32 %530, %137
  %532 = add i32 %531, %141
  %533 = sub i32 %532, %144
  %534 = sub i32 %533, %145
  %535 = sub i32 %534, %146
  %536 = add i32 %535, %147
  %537 = add i32 %536, %148
  %538 = sub i32 %537, %152
  %539 = sub i32 %538, %153
  %540 = add i32 %539, %157
  %541 = sub i32 %540, %160
  %542 = add i32 %541, %58
  %543 = add i32 %542, %171
  %544 = sub i32 %543, %172
  %545 = sub i32 %544, %173
  %546 = add i32 %545, %175
  %547 = add i32 %546, %176
  %548 = add i32 %547, %179
  %549 = sub i32 %548, %181
  %550 = add i32 %549, %183
  %551 = sub i32 %550, %186
  %552 = sub i32 %551, %194
  %553 = add i32 %552, %195
  %554 = add i32 %553, %196
  %555 = sub i32 %554, %197
  %556 = add i32 %555, %198
  %557 = add i32 %556, %200
  %558 = add i32 %557, %207
  %559 = add i32 %558, %10
  %560 = sub i32 %559, %4
  %561 = sub i32 %560, %31
  %562 = sub i32 %561, %38
  %563 = sub i32 %562, %55
  %564 = add i32 %563, %60
  %565 = sub i32 %564, %87
  %566 = add i32 %565, %93
  %567 = sub i32 %566, %100
  %568 = sub i32 %567, %129
  %569 = sub i32 %568, %130
  %570 = add i32 %569, %140
  %571 = sub i32 %570, %150
  %572 = sub i32 %571, %151
  %573 = add i32 %572, %156
  %574 = sub i32 %573, %163
  %575 = sub i32 %574, %167
  %576 = add i32 %575, %178
  %577 = sub i32 %576, %184
  %578 = add i32 %577, %190
  %579 = sub i32 %578, %193
  %580 = add i32 %579, %199
  %581 = add i32 %580, %209
  %582 = add i32 %581, %212
  %583 = add i32 %582, %285
  %584 = add i32 %583, %304
  %585 = add i32 %584, %246
  %586 = sub i32 %585, %217
  %587 = add i32 %586, %375
  %588 = add i32 %587, %389
  %589 = add i32 %588, %247
  %590 = add i32 %589, %248
  %591 = add i32 %590, %249
  %592 = add i32 %591, %250
  %593 = sub i32 %592, %280
  %594 = sub i32 %593, %281
  %595 = add i32 %594, %287
  %596 = add i32 %595, %293
  %597 = add i32 %596, %254
  %598 = sub i32 %597, %322
  %599 = sub i32 %598, %325
  %600 = add i32 %599, %334
  %601 = add i32 %600, %297
  %602 = add i32 %601, %342
  %603 = sub i32 %602, %253
  %604 = add i32 %603, %259
  %605 = add i32 %604, %358
  %606 = sub i32 %605, %359
  %607 = add i32 %606, %372
  %608 = add i32 %607, %384
  %609 = sub i32 %608, %387
  %610 = sub i32 %609, %219
  %611 = add i32 %610, %397
  %612 = add i32 %611, %226
  %613 = sub i32 %612, %235
  %614 = sub i32 %613, %239
  %615 = sub i32 %614, %240
  %616 = add i32 %615, %241
  %617 = add i32 %616, %244
  %618 = add i32 %617, %252
  %619 = sub i32 %618, %255
  %620 = add i32 %619, %257
  %621 = add i32 %620, %260
  %622 = sub i32 %621, %261
  %623 = sub i32 %622, %262
  %624 = add i32 %623, %273
  %625 = add i32 %624, %275
  %626 = add i32 %625, %282
  %627 = add i32 %626, %288
  %628 = sub i32 %627, %270
  %629 = add i32 %628, %291
  %630 = sub i32 %629, %292
  %631 = add i32 %630, %294
  %632 = sub i32 %631, %295
  %633 = add i32 %632, %296
  %634 = sub i32 %633, %298
  %635 = sub i32 %634, %299
  %636 = sub i32 %635, %300
  %637 = add i32 %636, %302
  %638 = sub i32 %637, %303
  %639 = sub i32 %638, %305
  %640 = add i32 %639, %308
  %641 = sub i32 %640, %313
  %642 = sub i32 %641, %314
  %643 = sub i32 %642, %315
  %644 = sub i32 %643, %316
  %645 = sub i32 %644, %317
  %646 = sub i32 %645, %318
  %647 = sub i32 %646, %320
  %648 = sub i32 %647, %321
  %649 = add i32 %648, %323
  %650 = sub i32 %649, %326
  %651 = add i32 %650, %327
  %652 = sub i32 %651, %328
  %653 = add i32 %652, %331
  %654 = add i32 %653, %332
  %655 = add i32 %654, %333
  %656 = sub i32 %655, %335
  %657 = sub i32 %656, %340
  %658 = sub i32 %657, %341
  %659 = add i32 %658, %344
  %660 = sub i32 %659, %345
  %661 = add i32 %660, %346
  %662 = add i32 %661, %347
  %663 = sub i32 %662, %348
  %664 = sub i32 %663, %349
  %665 = add i32 %664, %354
  %666 = add i32 %665, %283
  %667 = add i32 %666, %357
  %668 = add i32 %667, %360
  %669 = sub i32 %668, %361
  %670 = sub i32 %669, %363
  %671 = sub i32 %670, %365
  %672 = sub i32 %671, %368
  %673 = add i32 %672, %369
  %674 = add i32 %673, %373
  %675 = sub i32 %674, %374
  %676 = sub i32 %675, %376
  %677 = sub i32 %676, %383
  %678 = add i32 %677, %385
  %679 = add i32 %678, %386
  %680 = sub i32 %679, %388
  %681 = sub i32 %680, %391
  %682 = sub i32 %681, %392
  %683 = add i32 %682, %393
  %684 = add i32 %683, %223
  %685 = add i32 %684, %267
  %686 = add i32 %685, %268
  %687 = add i32 %686, %272
  %688 = sub i32 %687, %278
  %689 = add i32 %688, %284
  %690 = sub i32 %689, %290
  %691 = sub i32 %690, %310
  %692 = sub i32 %691, %330
  %693 = sub i32 %692, %338
  %694 = sub i32 %693, %356
  %695 = add i32 %694, %364
  %696 = sub i32 %695, %366
  %697 = sub i32 %696, %371
  %698 = sub i32 %697, %379
  %699 = add i32 %698, %399
  %700 = sub i32 %699, %401
  %701 = sub i32 %700, %307
  %702 = add i32 %701, %431
  %703 = sub i32 %702, %353
  %704 = sub i32 %703, %396
  %705 = add i32 %704, %429
  %706 = add i32 %705, %412
  %707 = add i32 %706, %426
  %708 = add i32 %707, %419
  %709 = add i32 %708, %458
  %710 = icmp eq i32 %22, %709
  %711 = select i1 %710, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %712 = tail call i32 @puts(i8* nonnull dereferenceable(1) %711)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
