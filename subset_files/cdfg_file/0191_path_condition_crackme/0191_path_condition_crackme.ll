; ModuleID = '../.././c_source_file/0191_path_condition_crackme.c'
source_filename = "../.././c_source_file/0191_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %0, -1
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = or i32 %8, %6
  %10 = shl i32 %9, 1
  %11 = add i32 %10, %3
  %12 = xor i32 %4, -1
  %13 = and i32 %12, %3
  %14 = xor i32 %4, %3
  %15 = shl i32 %14, 1
  %16 = xor i32 %15, -2
  %17 = or i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = and i32 %4, %3
  %20 = or i32 %12, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -1
  %23 = shl i32 %17, 2
  %24 = xor i32 %23, -4
  %25 = xor i32 %21, -2
  %26 = mul i32 %13, 6
  %27 = and i32 %1, %0
  %28 = or i32 %2, %0
  %29 = xor i32 %28, %27
  %30 = xor i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = add i32 %30, 1
  %33 = xor i32 %1, %0
  %34 = or i32 %30, %33
  %35 = xor i32 %1, -1
  %36 = or i32 %35, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %30, %37
  %39 = xor i32 %8, %0
  %40 = and i32 %7, %0
  %41 = or i32 %40, %33
  %42 = shl i32 %41, 1
  %43 = xor i32 %2, %1
  %44 = or i32 %43, %0
  %45 = xor i32 %28, %1
  %46 = xor i32 %33, -1
  %47 = or i32 %31, %46
  %48 = or i32 %37, %2
  %49 = shl i32 %48, 1
  %50 = and i32 %2, %1
  %51 = or i32 %50, %6
  %52 = and i32 %36, %31
  %53 = and i32 %28, %46
  %54 = or i32 %30, %35
  %55 = shl i32 %54, 1
  %56 = and i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = and i32 %57, %46
  %59 = and i32 %50, %0
  %60 = or i32 %2, %1
  %61 = xor i32 %60, %0
  %62 = or i32 %59, %61
  %63 = and i32 %43, %0
  %64 = shl i32 %63, 1
  %65 = or i32 %7, %1
  %66 = or i32 %65, %0
  %67 = xor i32 %50, -1
  %68 = add i32 %50, 1
  %69 = or i32 %1, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %56, %70
  %72 = or i32 %43, %70
  %73 = xor i32 %43, -1
  %74 = or i32 %73, %6
  %75 = and i32 %33, %2
  %76 = and i32 %43, %36
  %77 = or i32 %7, %0
  %78 = and i32 %77, %46
  %79 = xor i32 %65, -1
  %80 = or i32 %79, %6
  %81 = and i32 %60, %6
  %82 = xor i32 %27, -1
  %83 = xor i32 %82, %2
  %84 = and i32 %35, %0
  %85 = xor i32 %84, -1
  %86 = xor i32 %85, %2
  %87 = and i32 %50, %6
  %88 = xor i32 %63, 2147483647
  %89 = xor i32 %88, %87
  %90 = or i32 %59, %81
  %91 = and i32 %35, %2
  %92 = and i32 %91, %0
  %93 = or i32 %35, %2
  %94 = xor i32 %93, %6
  %95 = xor i32 %94, %92
  %96 = shl i32 %50, 1
  %97 = and i32 %93, %6
  %98 = xor i32 %92, -1
  %99 = xor i32 %97, %98
  %100 = or i32 %27, %79
  %101 = xor i32 %28, -1
  %102 = and i32 %46, %2
  %103 = xor i32 %43, %0
  %104 = xor i32 %103, -1
  %105 = or i32 %59, %104
  %106 = or i32 %33, %101
  %107 = or i32 %40, %35
  %108 = or i32 %27, %101
  %109 = xor i32 %40, -1
  %110 = and i32 %109, %1
  %111 = xor i32 %77, %27
  %112 = xor i32 %37, %2
  %113 = xor i32 %70, %2
  %114 = and i32 %31, %46
  %115 = and i32 %30, %35
  %116 = and i32 %33, %57
  %117 = or i32 %87, %63
  %118 = or i32 %7, %46
  %119 = or i32 %67, %0
  %120 = shl i32 %119, 1
  %121 = or i32 %50, %0
  %122 = and i32 %31, %85
  %123 = xor i32 %8, -1
  %124 = or i32 %123, %6
  %125 = and i32 %36, %73
  %126 = xor i32 %79, %0
  %127 = and i32 %123, %6
  %128 = xor i32 %69, %2
  %129 = add i32 %36, 1
  %130 = or i32 %40, %46
  %131 = or i32 %30, %1
  %132 = or i32 %31, %37
  %133 = and i32 %7, %85
  %134 = or i32 %56, %1
  %135 = or i32 %92, %97
  %136 = xor i32 %56, %123
  %137 = xor i32 %56, %69
  %138 = xor i32 %77, %1
  %139 = shl i32 %138, 1
  %140 = or i32 %65, %6
  %141 = or i32 %8, %84
  %142 = add i32 %8, 1
  %143 = xor i32 %84, %67
  %144 = and i32 %65, %6
  %145 = xor i32 %73, %0
  %146 = or i32 %84, %2
  %147 = xor i32 %60, -1
  %148 = or i32 %56, %147
  %149 = xor i32 %77, -1
  %150 = xor i32 %149, %1
  %151 = or i32 %27, %7
  %152 = and i32 %73, %82
  %153 = or i32 %43, %27
  %154 = or i32 %33, %31
  %155 = or i32 %31, %1
  %156 = shl i32 %155, 1
  %157 = and i32 %31, %1
  %158 = or i32 %84, %31
  %159 = and i32 %85, %2
  %160 = shl i32 %159, 1
  %161 = and i32 %91, %6
  %162 = or i32 %43, %6
  %163 = xor i32 %162, -1
  %164 = or i32 %161, %163
  %165 = xor i32 %123, %0
  %166 = or i32 %56, %46
  %167 = or i32 %56, %35
  %168 = or i32 %40, %50
  %169 = shl i32 %69, 1
  %170 = or i32 %43, %37
  %171 = or i32 %30, %70
  %172 = and i32 %67, %0
  %173 = xor i32 %84, %2
  %174 = or i32 %33, %2
  %175 = and i32 %7, %82
  %176 = or i32 %70, %2
  %177 = xor i32 %67, %0
  %178 = and i32 %33, %31
  %179 = and i32 %67, %6
  %180 = xor i32 %40, %67
  %181 = shl i32 %180, 1
  %182 = or i32 %149, %46
  %183 = and i32 %30, %1
  %184 = and i32 %60, %0
  %185 = xor i32 %184, -1
  %186 = xor i32 %87, %185
  %187 = or i32 %101, %35
  %188 = xor i32 %65, %27
  %189 = and i32 %69, %7
  %190 = xor i32 %56, %36
  %191 = or i32 %67, %6
  %192 = or i32 %27, %2
  %193 = and i32 %77, %33
  %194 = and i32 %43, %6
  %195 = or i32 %59, %194
  %196 = xor i32 %40, %65
  %197 = or i32 %30, %27
  %198 = and i32 %82, %2
  %199 = or i32 %43, %84
  %200 = or i32 %60, %6
  %201 = xor i32 %101, %1
  %202 = and i32 %30, %82
  %203 = and i32 %43, %69
  %204 = or i32 %56, %33
  %205 = and i32 %93, %0
  %206 = xor i32 %205, -1
  %207 = xor i32 %161, %206
  %208 = or i32 %31, %35
  %209 = xor i32 %40, %1
  %210 = and i32 %43, %85
  %211 = and i32 %30, %85
  %212 = and i32 %30, %36
  %213 = or i32 %33, %149
  %214 = shl i32 %213, 1
  %215 = or i32 %101, %46
  %216 = or i32 %149, %1
  %217 = and i32 %30, %69
  %218 = and i32 %109, %35
  %219 = and i32 %7, %46
  %220 = and i32 %28, %1
  %221 = or i32 %84, %7
  %222 = or i32 %27, %73
  %223 = xor i32 %59, -1
  %224 = xor i32 %81, %223
  %225 = add i32 %65, 1
  %226 = xor i32 %92, %44
  %227 = xor i32 %92, %104
  %228 = and i32 %65, %0
  %229 = and i32 %36, %2
  %230 = shl i32 %229, 1
  %231 = xor i32 %194, %223
  %232 = and i32 %33, %7
  %233 = or i32 %147, %0
  %234 = or i32 %73, %37
  %235 = xor i32 %84, %123
  %236 = or i32 %147, %6
  %237 = or i32 %33, %7
  %238 = xor i32 %57, %1
  %239 = and i32 %73, %6
  %240 = or i32 %56, %8
  %241 = shl i32 %65, 2
  %242 = or i32 %7, %37
  %243 = and i32 %69, %2
  %244 = and i32 %69, %73
  %245 = or i32 %84, %73
  %246 = xor i32 %50, %0
  %247 = and i32 %73, %85
  %248 = xor i32 %109, %1
  %249 = and i32 %31, %82
  %250 = add i32 %77, 1
  %251 = or i32 %40, %79
  %252 = and i32 %31, %35
  %253 = and i32 %77, %35
  %254 = add i32 %84, 1
  %255 = xor i32 %61, %223
  %256 = or i32 %149, %35
  %257 = or i32 %87, %184
  %258 = and i32 %33, %109
  %259 = shl i32 %258, 1
  %260 = and i32 %43, %82
  %261 = or i32 %46, %2
  %262 = or i32 %101, %1
  %263 = or i32 %79, %0
  %264 = xor i32 %60, %27
  %265 = or i32 %8, %0
  %266 = xor i32 %147, %0
  %267 = or i32 %27, %31
  %268 = xor i32 %36, %2
  %269 = and i32 %147, %6
  %270 = and i32 %8, %6
  %271 = mul i32 %270, -10
  %272 = and i32 %147, %0
  %273 = and i32 %8, %0
  %274 = and i32 %79, %6
  %275 = mul i32 %274, -12
  %276 = and i32 %79, %0
  %277 = mul i32 %276, 33
  %278 = mul i32 %59, -13
  %279 = add i32 %6, %1
  %280 = add i32 %279, %84
  %281 = add i32 %280, %232
  %282 = add i32 %281, %113
  %283 = add i32 %282, %272
  %284 = add i32 %283, %228
  %285 = add i32 %284, %211
  %286 = add i32 %285, %208
  %287 = add i32 %286, %201
  %288 = add i32 %287, %107
  %289 = add i32 %288, %227
  %290 = add i32 %289, %195
  %291 = add i32 %290, %89
  %292 = shl i32 %291, 1
  %293 = sub i32 %86, %269
  %294 = add i32 %293, %167
  %295 = sub i32 %294, %165
  %296 = sub i32 %295, %145
  %297 = add i32 %296, %44
  %298 = sub i32 %297, %224
  %299 = mul i32 %298, 3
  %300 = add i32 %83, %112
  %301 = add i32 %300, %74
  %302 = add i32 %301, %19
  %303 = shl i32 %302, 2
  %304 = or i32 %87, %273
  %305 = mul i32 %304, 15
  %306 = sub i32 %116, %221
  %307 = mul i32 %306, 5
  %308 = sub i32 %6, %33
  %309 = sub i32 %308, %36
  %310 = add i32 %309, %7
  %311 = add i32 %310, %129
  %312 = add i32 %311, %27
  %313 = add i32 %312, %46
  %314 = sub i32 %313, %2
  %315 = add i32 %314, %254
  %316 = add i32 %315, %3
  %317 = add i32 %316, %32
  %318 = add i32 %317, %68
  %319 = add i32 %318, %75
  %320 = add i32 %319, %102
  %321 = add i32 %320, %118
  %322 = add i32 %321, %30
  %323 = sub i32 %322, %56
  %324 = sub i32 %323, %128
  %325 = sub i32 %324, %133
  %326 = add i32 %325, %142
  %327 = sub i32 %326, %146
  %328 = add i32 %327, %151
  %329 = sub i32 %328, %169
  %330 = add i32 %329, %173
  %331 = add i32 %330, %57
  %332 = add i32 %331, %174
  %333 = add i32 %332, %175
  %334 = sub i32 %333, %176
  %335 = add i32 %334, %189
  %336 = add i32 %335, %192
  %337 = add i32 %336, %77
  %338 = sub i32 %337, %40
  %339 = sub i32 %338, %198
  %340 = add i32 %339, %147
  %341 = add i32 %340, %219
  %342 = add i32 %341, %225
  %343 = sub i32 %342, %43
  %344 = add i32 %343, %237
  %345 = sub i32 %344, %242
  %346 = sub i32 %345, %243
  %347 = add i32 %346, %250
  %348 = add i32 %347, %261
  %349 = add i32 %348, %73
  %350 = sub i32 %349, %268
  %351 = add i32 %350, %4
  %352 = sub i32 %351, %29
  %353 = sub i32 %352, %34
  %354 = add i32 %353, %38
  %355 = sub i32 %354, %39
  %356 = add i32 %355, %45
  %357 = add i32 %356, %47
  %358 = sub i32 %357, %49
  %359 = add i32 %358, %51
  %360 = sub i32 %359, %52
  %361 = add i32 %360, %53
  %362 = sub i32 %361, %58
  %363 = sub i32 %362, %66
  %364 = add i32 %363, %71
  %365 = sub i32 %364, %72
  %366 = sub i32 %365, %76
  %367 = add i32 %366, %78
  %368 = add i32 %367, %80
  %369 = add i32 %368, %81
  %370 = sub i32 %369, %96
  %371 = sub i32 %370, %100
  %372 = sub i32 %371, %106
  %373 = add i32 %372, %108
  %374 = add i32 %373, %110
  %375 = add i32 %374, %111
  %376 = sub i32 %375, %114
  %377 = add i32 %376, %115
  %378 = add i32 %377, %121
  %379 = add i32 %378, %122
  %380 = sub i32 %379, %124
  %381 = sub i32 %380, %125
  %382 = add i32 %381, %103
  %383 = add i32 %382, %126
  %384 = add i32 %383, %127
  %385 = sub i32 %384, %130
  %386 = add i32 %385, %131
  %387 = sub i32 %386, %132
  %388 = sub i32 %387, %134
  %389 = sub i32 %388, %136
  %390 = add i32 %389, %137
  %391 = add i32 %390, %140
  %392 = sub i32 %391, %141
  %393 = add i32 %392, %143
  %394 = sub i32 %393, %144
  %395 = sub i32 %394, %148
  %396 = sub i32 %395, %150
  %397 = sub i32 %396, %152
  %398 = sub i32 %397, %153
  %399 = add i32 %398, %154
  %400 = add i32 %399, %157
  %401 = add i32 %400, %158
  %402 = sub i32 %401, %160
  %403 = add i32 %402, %166
  %404 = add i32 %403, %168
  %405 = add i32 %404, %170
  %406 = add i32 %405, %171
  %407 = sub i32 %406, %172
  %408 = add i32 %407, %177
  %409 = sub i32 %408, %178
  %410 = add i32 %409, %179
  %411 = sub i32 %410, %182
  %412 = add i32 %411, %183
  %413 = sub i32 %412, %187
  %414 = sub i32 %413, %188
  %415 = sub i32 %414, %190
  %416 = sub i32 %415, %191
  %417 = sub i32 %416, %193
  %418 = sub i32 %417, %196
  %419 = sub i32 %418, %197
  %420 = sub i32 %419, %199
  %421 = add i32 %420, %200
  %422 = add i32 %421, %202
  %423 = add i32 %422, %203
  %424 = add i32 %423, %204
  %425 = sub i32 %424, %209
  %426 = add i32 %425, %210
  %427 = sub i32 %426, %212
  %428 = add i32 %427, %215
  %429 = sub i32 %428, %216
  %430 = sub i32 %429, %217
  %431 = add i32 %430, %218
  %432 = add i32 %431, %220
  %433 = sub i32 %432, %222
  %434 = sub i32 %433, %230
  %435 = add i32 %434, %194
  %436 = add i32 %435, %233
  %437 = sub i32 %436, %234
  %438 = sub i32 %437, %235
  %439 = add i32 %438, %236
  %440 = sub i32 %439, %61
  %441 = add i32 %440, %238
  %442 = add i32 %441, %239
  %443 = add i32 %442, %240
  %444 = sub i32 %443, %241
  %445 = sub i32 %444, %244
  %446 = add i32 %445, %245
  %447 = sub i32 %446, %246
  %448 = add i32 %447, %247
  %449 = add i32 %448, %162
  %450 = add i32 %449, %248
  %451 = sub i32 %450, %249
  %452 = add i32 %451, %251
  %453 = add i32 %452, %252
  %454 = sub i32 %453, %253
  %455 = sub i32 %454, %184
  %456 = sub i32 %455, %256
  %457 = sub i32 %456, %260
  %458 = add i32 %457, %262
  %459 = sub i32 %458, %263
  %460 = sub i32 %459, %264
  %461 = sub i32 %460, %265
  %462 = sub i32 %461, %266
  %463 = sub i32 %462, %267
  %464 = sub i32 %463, %13
  %465 = add i32 %464, %19
  %466 = sub i32 %465, %14
  %467 = sub i32 %466, %42
  %468 = sub i32 %467, %55
  %469 = add i32 %468, %62
  %470 = sub i32 %469, %64
  %471 = sub i32 %470, %90
  %472 = sub i32 %471, %95
  %473 = sub i32 %472, %99
  %474 = sub i32 %473, %105
  %475 = add i32 %474, %117
  %476 = sub i32 %475, %120
  %477 = add i32 %476, %135
  %478 = sub i32 %477, %139
  %479 = sub i32 %478, %156
  %480 = sub i32 %479, %164
  %481 = sub i32 %480, %181
  %482 = add i32 %481, %186
  %483 = sub i32 %482, %207
  %484 = sub i32 %483, %214
  %485 = sub i32 %484, %226
  %486 = sub i32 %485, %231
  %487 = sub i32 %486, %255
  %488 = sub i32 %487, %257
  %489 = sub i32 %488, %259
  %490 = add i32 %489, %271
  %491 = add i32 %490, %275
  %492 = add i32 %491, %277
  %493 = add i32 %492, %278
  %494 = sub i32 %493, %18
  %495 = add i32 %494, %22
  %496 = add i32 %495, %26
  %497 = add i32 %496, %305
  %498 = add i32 %497, %307
  %499 = sub i32 %498, %16
  %500 = add i32 %499, %24
  %501 = add i32 %500, %25
  %502 = add i32 %501, %303
  %503 = add i32 %502, %299
  %504 = add i32 %503, %292
  %505 = icmp eq i32 %11, %504
  %506 = select i1 %505, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %507 = tail call i32 @puts(i8* nonnull dereferenceable(1) %506)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
