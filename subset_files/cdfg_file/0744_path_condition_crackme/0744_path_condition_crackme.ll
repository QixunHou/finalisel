; ModuleID = '../.././c_source_file/0744_path_condition_crackme.c'
source_filename = "../.././c_source_file/0744_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, %0
  %10 = and i32 %9, %8
  %11 = xor i32 %0, -1
  %12 = xor i32 %2, -1
  %13 = or i32 %12, %1
  %14 = or i32 %13, %11
  %15 = sub i32 %10, %14
  %16 = xor i32 %4, -1
  %17 = or i32 %5, %3
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %16
  %20 = sub i32 %15, %19
  %21 = and i32 %12, %0
  %22 = or i32 %21, %7
  %23 = or i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %9, %24
  %26 = xor i32 %21, -1
  %27 = and i32 %7, %26
  %28 = xor i32 %2, %1
  %29 = and i32 %28, %23
  %30 = xor i32 %9, -1
  %31 = and i32 %7, %30
  %32 = or i32 %12, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %33, %1
  %35 = xor i32 %21, %13
  %36 = xor i32 %1, -1
  %37 = or i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %36
  %40 = or i32 %2, %1
  %41 = xor i32 %40, %0
  %42 = and i32 %13, %0
  %43 = xor i32 %13, -1
  %44 = or i32 %21, %43
  %45 = shl i32 %44, 1
  %46 = and i32 %2, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %0
  %49 = and i32 %36, %2
  %50 = and i32 %49, %0
  %51 = xor i32 %28, %0
  %52 = or i32 %50, %51
  %53 = and i32 %37, %1
  %54 = xor i32 %28, -1
  %55 = and i32 %54, %11
  %56 = or i32 %36, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %9, %57
  %59 = and i32 %56, %12
  %60 = shl i32 %59, 1
  %61 = and i32 %36, %0
  %62 = or i32 %61, %30
  %63 = and i32 %46, %0
  %64 = xor i32 %63, 2147483647
  %65 = xor i32 %64, %41
  %66 = shl i32 %65, 1
  %67 = and i32 %32, %36
  %68 = and i32 %2, %0
  %69 = xor i32 %68, -1
  %70 = and i32 %7, %69
  %71 = or i32 %7, %2
  %72 = and i32 %1, %0
  %73 = xor i32 %37, %72
  %74 = and i32 %26, %1
  %75 = and i32 %40, %11
  %76 = or i32 %63, %75
  %77 = or i32 %28, %72
  %78 = or i32 %9, %1
  %79 = xor i32 %61, -1
  %80 = add i32 %61, 1
  %81 = xor i32 %43, %0
  %82 = and i32 %46, %11
  %83 = and i32 %40, %0
  %84 = xor i32 %83, -1
  %85 = xor i32 %82, %84
  %86 = and i32 %13, %11
  %87 = or i32 %8, %2
  %88 = or i32 %68, %24
  %89 = and i32 %49, %11
  %90 = or i32 %36, %2
  %91 = and i32 %90, %0
  %92 = or i32 %89, %91
  %93 = xor i32 %68, %23
  %94 = or i32 %47, %0
  %95 = and i32 %28, %79
  %96 = and i32 %26, %8
  %97 = xor i32 %72, -1
  %98 = shl i32 %97, 1
  %99 = and i32 %54, %0
  %100 = and i32 %9, %36
  %101 = or i32 %68, %8
  %102 = xor i32 %32, %72
  %103 = shl i32 %7, 1
  %104 = add i32 %7, 1
  %105 = or i32 %72, %43
  %106 = and i32 %54, %97
  %107 = and i32 %97, %2
  %108 = or i32 %54, %11
  %109 = shl i32 %108, 1
  %110 = xor i32 %23, %2
  %111 = or i32 %21, %36
  %112 = and i32 %37, %7
  %113 = xor i32 %13, %72
  %114 = or i32 %13, %0
  %115 = and i32 %30, %97
  %116 = and i32 %12, %1
  %117 = xor i32 %116, -1
  %118 = add i32 %116, 1
  %119 = xor i32 %61, %117
  %120 = and i32 %9, %97
  %121 = xor i32 %64, %75
  %122 = shl i32 %121, 1
  %123 = or i32 %28, %11
  %124 = xor i32 %89, %123
  %125 = or i32 %7, %33
  %126 = or i32 %33, %1
  %127 = shl i32 %126, 1
  %128 = xor i32 %116, %0
  %129 = xor i32 %63, %51
  %130 = or i32 %116, %11
  %131 = or i32 %54, %24
  %132 = shl i32 %36, 1
  %133 = or i32 %12, %57
  %134 = or i32 %72, %12
  %135 = and i32 %56, %30
  %136 = xor i32 %40, -1
  %137 = or i32 %68, %136
  %138 = xor i32 %46, %0
  %139 = and i32 %9, %7
  %140 = add i32 %32, 1
  %141 = and i32 %12, %8
  %142 = or i32 %117, %11
  %143 = and i32 %28, %0
  %144 = xor i32 %79, %2
  %145 = shl i32 %144, 1
  %146 = or i32 %68, %36
  %147 = xor i32 %61, %2
  %148 = or i32 %68, %57
  %149 = xor i32 %123, 2147483647
  %150 = or i32 %149, %89
  %151 = shl i32 %150, 1
  %152 = or i32 %82, %143
  %153 = or i32 %7, %12
  %154 = or i32 %72, %2
  %155 = or i32 %21, %46
  %156 = or i32 %9, %8
  %157 = or i32 %61, %54
  %158 = and i32 %32, %1
  %159 = and i32 %23, %12
  %160 = or i32 %28, %0
  %161 = xor i32 %160, -1
  %162 = or i32 %50, %161
  %163 = or i32 %40, %11
  %164 = shl i32 %163, 2
  %165 = xor i32 %38, %1
  %166 = and i32 %28, %56
  %167 = or i32 %30, %57
  %168 = or i32 %68, %1
  %169 = and i32 %28, %11
  %170 = or i32 %116, %61
  %171 = shl i32 %170, 1
  %172 = xor i32 %61, %47
  %173 = and i32 %12, %79
  %174 = or i32 %117, %0
  %175 = and i32 %90, %11
  %176 = or i32 %50, %175
  %177 = shl i32 %176, 1
  %178 = or i32 %28, %61
  %179 = or i32 %30, %36
  %180 = and i32 %7, %2
  %181 = and i32 %9, %79
  %182 = and i32 %37, %36
  %183 = or i32 %54, %57
  %184 = or i32 %9, %36
  %185 = xor i32 %51, -1
  %186 = or i32 %63, %185
  %187 = xor i32 %97, %2
  %188 = and i32 %30, %1
  %189 = or i32 %46, %61
  %190 = xor i32 %13, %0
  %191 = or i32 %40, %0
  %192 = xor i32 %26, %1
  %193 = xor i32 %117, %0
  %194 = xor i32 %68, %40
  %195 = or i32 %47, %11
  %196 = xor i32 %91, -1
  %197 = xor i32 %89, %196
  %198 = or i32 %9, %61
  %199 = and i32 %9, %56
  %200 = and i32 %117, %0
  %201 = or i32 %7, %30
  %202 = and i32 %23, %2
  %203 = or i32 %72, %38
  %204 = or i32 %46, %0
  %205 = and i32 %32, %8
  %206 = and i32 %23, %54
  %207 = or i32 %12, %8
  %208 = xor i32 %68, %56
  %209 = and i32 %56, %2
  %210 = xor i32 %54, %0
  %211 = or i32 %63, %169
  %212 = or i32 %68, %116
  %213 = and i32 %7, %12
  %214 = xor i32 %136, %0
  %215 = or i32 %24, %2
  %216 = shl i32 %215, 1
  %217 = xor i32 %72, %2
  %218 = or i32 %21, %8
  %219 = xor i32 %175, -1
  %220 = xor i32 %50, %219
  %221 = and i32 %69, %1
  %222 = or i32 %9, %72
  %223 = and i32 %37, %8
  %224 = shl i32 %223, 1
  %225 = xor i32 %69, %1
  %226 = add i32 %28, 1
  %227 = or i32 %30, %1
  %228 = or i32 %43, %11
  %229 = and i32 %54, %79
  %230 = shl i32 %229, 1
  %231 = or i32 %46, %11
  %232 = and i32 %69, %36
  %233 = and i32 %28, %97
  %234 = and i32 %47, %0
  %235 = or i32 %7, %38
  %236 = shl i32 %235, 1
  %237 = or i32 %68, %7
  %238 = and i32 %136, %11
  %239 = mul i32 %238, -10
  %240 = and i32 %116, %11
  %241 = mul i32 %240, -27
  %242 = and i32 %136, %0
  %243 = shl i32 %242, 4
  %244 = and i32 %116, %0
  %245 = and i32 %43, %11
  %246 = mul i32 %82, -17
  %247 = and i32 %43, %0
  %248 = mul i32 %247, -18
  %249 = mul i32 %63, -21
  %250 = and i32 %4, %3
  %251 = xor i32 %250, -1
  %252 = xor i32 %5, %3
  %253 = xor i32 %252, -1
  %254 = and i32 %253, %251
  %255 = xor i32 %5, -1
  %256 = or i32 %255, %4
  %257 = xor i32 %256, -1
  %258 = xor i32 %4, %3
  %259 = xor i32 %258, -1
  %260 = or i32 %257, %259
  %261 = and i32 %5, %3
  %262 = xor i32 %261, -1
  %263 = and i32 %262, %16
  %264 = add i32 %5, 1
  %265 = or i32 %4, %3
  %266 = xor i32 %265, -1
  %267 = xor i32 %5, %4
  %268 = or i32 %267, %266
  %269 = shl i32 %268, 1
  %270 = or i32 %253, %4
  %271 = xor i32 %253, %4
  %272 = or i32 %5, %4
  %273 = xor i32 %272, %250
  %274 = xor i32 %3, -1
  %275 = and i32 %274, %4
  %276 = xor i32 %275, -1
  %277 = and i32 %255, %276
  %278 = and i32 %255, %3
  %279 = xor i32 %278, -1
  %280 = xor i32 %275, %279
  %281 = or i32 %250, %257
  %282 = or i32 %267, %275
  %283 = shl i32 %282, 1
  %284 = and i32 %256, %3
  %285 = or i32 %258, %5
  %286 = and i32 %255, %4
  %287 = xor i32 %286, -1
  %288 = add i32 %286, 1
  %289 = add i32 %278, 1
  %290 = or i32 %258, %255
  %291 = shl i32 %290, 2
  %292 = and i32 %253, %276
  %293 = xor i32 %272, -1
  %294 = or i32 %293, %3
  %295 = and i32 %17, %4
  %296 = or i32 %250, %255
  %297 = or i32 %250, %18
  %298 = shl i32 %297, 1
  %299 = and i32 %272, %3
  %300 = or i32 %255, %3
  %301 = xor i32 %286, %300
  %302 = and i32 %287, %274
  %303 = xor i32 %267, -1
  %304 = or i32 %275, %303
  %305 = and i32 %303, %274
  %306 = and i32 %251, %5
  %307 = and i32 %274, %5
  %308 = and i32 %307, %16
  %309 = or i32 %252, %16
  %310 = xor i32 %309, -1
  %311 = or i32 %308, %310
  %312 = and i32 %303, %251
  %313 = and i32 %276, %5
  %314 = or i32 %303, %259
  %315 = and i32 %252, %265
  %316 = and i32 %5, %4
  %317 = or i32 %316, %259
  %318 = and i32 %261, %4
  %319 = and i32 %252, %16
  %320 = or i32 %318, %319
  %321 = and i32 %265, %303
  %322 = or i32 %274, %4
  %323 = and i32 %267, %322
  %324 = shl i32 %323, 1
  %325 = xor i32 %316, -1
  %326 = xor i32 %325, %3
  %327 = and i32 %17, %16
  %328 = or i32 %318, %327
  %329 = and i32 %287, %3
  %330 = xor i32 %257, %3
  %331 = and i32 %307, %4
  %332 = or i32 %252, %4
  %333 = xor i32 %332, -1
  %334 = or i32 %331, %333
  %335 = or i32 %279, %16
  %336 = and i32 %303, %3
  %337 = and i32 %255, %251
  %338 = or i32 %257, %3
  %339 = xor i32 %318, -1
  %340 = xor i32 %327, %339
  %341 = and i32 %287, %259
  %342 = and i32 %256, %258
  %343 = and i32 %325, %259
  %344 = or i32 %267, %258
  %345 = xor i32 %300, -1
  %346 = or i32 %286, %345
  %347 = shl i32 %346, 1
  %348 = or i32 %275, %255
  %349 = xor i32 %316, %3
  %350 = and i32 %252, %4
  %351 = or i32 %18, %4
  %352 = or i32 %300, %16
  %353 = and i32 %279, %4
  %354 = xor i32 %252, %4
  %355 = or i32 %331, %354
  %356 = or i32 %278, %16
  %357 = or i32 %255, %266
  %358 = shl i32 %357, 1
  %359 = xor i32 %293, %3
  %360 = and i32 %261, %16
  %361 = or i32 %360, %295
  %362 = xor i32 %272, %3
  %363 = or i32 %316, %274
  %364 = or i32 %250, %5
  %365 = xor i32 %345, %4
  %366 = and i32 %252, %251
  %367 = xor i32 %322, -1
  %368 = or i32 %255, %367
  %369 = or i32 %367, %5
  %370 = or i32 %293, %259
  %371 = or i32 %261, %16
  %372 = xor i32 %287, %3
  %373 = and i32 %252, %276
  %374 = xor i32 %279, %4
  %375 = shl i32 %374, 1
  %376 = and i32 %303, %259
  %377 = xor i32 %261, %4
  %378 = xor i32 %354, -1
  %379 = or i32 %318, %378
  %380 = or i32 %258, %303
  %381 = add i32 %250, 1
  %382 = and i32 %256, %274
  %383 = xor i32 %275, %262
  %384 = shl i32 %383, 2
  %385 = and i32 %322, %5
  %386 = and i32 %272, %274
  %387 = or i32 %262, %4
  %388 = and i32 %300, %4
  %389 = xor i32 %250, %5
  %390 = and i32 %322, %255
  %391 = shl i32 %390, 1
  %392 = or i32 %278, %4
  %393 = xor i32 %331, %392
  %394 = or i32 %286, %258
  %395 = xor i32 %308, %309
  %396 = or i32 %250, %253
  %397 = or i32 %267, %250
  %398 = or i32 %250, %303
  %399 = xor i32 %316, %17
  %400 = xor i32 %319, %339
  %401 = xor i32 %339, %4
  %402 = xor i32 %401, %17
  %403 = xor i32 %256, %3
  %404 = shl i32 %403, 1
  %405 = xor i32 %331, %332
  %406 = or i32 %275, %253
  %407 = or i32 %316, %367
  %408 = or i32 %316, %3
  %409 = or i32 %267, %274
  %410 = xor i32 %17, %250
  %411 = shl i32 %410, 1
  %412 = or i32 %252, %266
  %413 = shl i32 %412, 1
  %414 = xor i32 %316, %322
  %415 = and i32 %265, %253
  %416 = or i32 %286, %274
  %417 = or i32 %258, %257
  %418 = and i32 %303, %276
  %419 = and i32 %18, %16
  %420 = mul i32 %419, 29
  %421 = and i32 %278, %16
  %422 = mul i32 %421, 12
  %423 = and i32 %18, %4
  %424 = mul i32 %423, 9
  %425 = and i32 %278, %4
  %426 = and i32 %345, %16
  %427 = mul i32 %360, 11
  %428 = and i32 %345, %4
  %429 = mul i32 %428, -13
  %430 = shl i32 %318, 2
  %431 = add i32 %0, -1
  %432 = add i32 %431, %207
  %433 = add i32 %432, %26
  %434 = add i32 %433, %87
  %435 = add i32 %434, %225
  %436 = add i32 %435, %206
  %437 = add i32 %436, %195
  %438 = add i32 %437, %193
  %439 = add i32 %438, %174
  %440 = add i32 %439, %172
  %441 = add i32 %440, %157
  %442 = add i32 %441, %155
  %443 = add i32 %442, %139
  %444 = add i32 %443, %135
  %445 = add i32 %444, %100
  %446 = add i32 %445, %93
  %447 = add i32 %446, %74
  %448 = add i32 %447, %73
  %449 = add i32 %448, %67
  %450 = add i32 %449, %39
  %451 = add i32 %450, %29
  %452 = add i32 %451, %27
  %453 = add i32 %452, %211
  %454 = add i32 %453, %389
  %455 = add i32 %454, %385
  %456 = add i32 %455, %277
  %457 = add i32 %456, %398
  %458 = add i32 %457, %399
  %459 = add i32 %458, %388
  %460 = add i32 %459, %386
  %461 = shl i32 %460, 1
  %462 = add i32 %138, %57
  %463 = sub i32 %462, %105
  %464 = add i32 %463, %92
  %465 = add i32 %464, %76
  %466 = add i32 %465, %316
  %467 = add i32 %466, %426
  %468 = add i32 %467, %344
  %469 = sub i32 %468, %263
  %470 = add i32 %469, %402
  %471 = mul i32 %470, 5
  %472 = sub i32 %217, %147
  %473 = add i32 %472, %4
  %474 = sub i32 %473, %204
  %475 = add i32 %474, %35
  %476 = add i32 %475, %52
  %477 = sub i32 %476, %292
  %478 = sub i32 %477, %377
  %479 = mul i32 %478, 3
  %480 = add i32 %142, %244
  %481 = add i32 %480, %115
  %482 = add i32 %481, %353
  %483 = add i32 %482, %425
  %484 = shl i32 %483, 2
  %485 = sub i32 4, %0
  %486 = sub i32 %485, %2
  %487 = add i32 %486, %80
  %488 = add i32 %487, %104
  %489 = sub i32 %488, %132
  %490 = add i32 %489, %12
  %491 = sub i32 %490, %40
  %492 = add i32 %491, %71
  %493 = sub i32 %492, %98
  %494 = sub i32 %493, %103
  %495 = sub i32 %494, %9
  %496 = add i32 %495, %107
  %497 = add i32 %496, %110
  %498 = add i32 %497, %118
  %499 = sub i32 %498, %133
  %500 = add i32 %499, %134
  %501 = add i32 %500, %140
  %502 = sub i32 %501, %141
  %503 = sub i32 %502, %153
  %504 = add i32 %503, %30
  %505 = add i32 %504, %154
  %506 = add i32 %505, %159
  %507 = sub i32 %506, %46
  %508 = add i32 %507, %173
  %509 = sub i32 %508, %180
  %510 = add i32 %509, %32
  %511 = add i32 %510, %187
  %512 = sub i32 %511, %21
  %513 = add i32 %512, %202
  %514 = add i32 %513, %209
  %515 = sub i32 %514, %213
  %516 = add i32 %515, %136
  %517 = add i32 %516, %68
  %518 = add i32 %517, %226
  %519 = add i32 %518, %25
  %520 = add i32 %519, %22
  %521 = add i32 %520, %31
  %522 = sub i32 %521, %34
  %523 = sub i32 %522, %41
  %524 = add i32 %523, %42
  %525 = add i32 %524, %48
  %526 = add i32 %525, %53
  %527 = sub i32 %526, %55
  %528 = add i32 %527, %58
  %529 = sub i32 %528, %60
  %530 = sub i32 %529, %62
  %531 = add i32 %530, %70
  %532 = add i32 %531, %77
  %533 = sub i32 %532, %78
  %534 = sub i32 %533, %81
  %535 = add i32 %534, %86
  %536 = add i32 %535, %88
  %537 = add i32 %536, %94
  %538 = sub i32 %537, %95
  %539 = sub i32 %538, %96
  %540 = add i32 %539, %99
  %541 = add i32 %540, %101
  %542 = sub i32 %541, %102
  %543 = add i32 %542, %106
  %544 = add i32 %543, %111
  %545 = sub i32 %544, %112
  %546 = add i32 %545, %113
  %547 = add i32 %546, %114
  %548 = sub i32 %547, %119
  %549 = sub i32 %548, %120
  %550 = sub i32 %549, %125
  %551 = add i32 %550, %128
  %552 = sub i32 %551, %130
  %553 = add i32 %552, %131
  %554 = add i32 %553, %137
  %555 = sub i32 %554, %143
  %556 = sub i32 %555, %145
  %557 = sub i32 %556, %146
  %558 = add i32 %557, %148
  %559 = add i32 %558, %156
  %560 = sub i32 %559, %158
  %561 = sub i32 %560, %165
  %562 = add i32 %561, %166
  %563 = sub i32 %562, %167
  %564 = sub i32 %563, %168
  %565 = sub i32 %564, %169
  %566 = sub i32 %565, %178
  %567 = add i32 %566, %179
  %568 = add i32 %567, %181
  %569 = sub i32 %568, %182
  %570 = sub i32 %569, %183
  %571 = sub i32 %570, %184
  %572 = add i32 %571, %188
  %573 = add i32 %572, %189
  %574 = add i32 %573, %190
  %575 = sub i32 %574, %191
  %576 = sub i32 %575, %192
  %577 = sub i32 %576, %194
  %578 = add i32 %577, %198
  %579 = sub i32 %578, %199
  %580 = add i32 %579, %200
  %581 = sub i32 %580, %201
  %582 = sub i32 %581, %203
  %583 = sub i32 %582, %205
  %584 = sub i32 %583, %208
  %585 = sub i32 %584, %75
  %586 = add i32 %585, %210
  %587 = add i32 %586, %160
  %588 = sub i32 %587, %212
  %589 = add i32 %588, %214
  %590 = sub i32 %589, %216
  %591 = add i32 %590, %218
  %592 = add i32 %591, %83
  %593 = add i32 %592, %221
  %594 = sub i32 %593, %222
  %595 = add i32 %594, %227
  %596 = sub i32 %595, %228
  %597 = add i32 %596, %231
  %598 = sub i32 %597, %232
  %599 = add i32 %598, %233
  %600 = sub i32 %599, %234
  %601 = sub i32 %600, %237
  %602 = sub i32 %601, %245
  %603 = sub i32 %602, %45
  %604 = sub i32 %603, %85
  %605 = sub i32 %604, %109
  %606 = add i32 %605, %124
  %607 = sub i32 %606, %127
  %608 = sub i32 %607, %129
  %609 = sub i32 %608, %152
  %610 = add i32 %609, %162
  %611 = sub i32 %610, %164
  %612 = sub i32 %611, %171
  %613 = sub i32 %612, %186
  %614 = add i32 %613, %197
  %615 = add i32 %614, %220
  %616 = sub i32 %615, %224
  %617 = sub i32 %616, %230
  %618 = sub i32 %617, %236
  %619 = add i32 %618, %239
  %620 = add i32 %619, %241
  %621 = sub i32 %620, %243
  %622 = add i32 %621, %246
  %623 = add i32 %622, %248
  %624 = add i32 %623, %249
  %625 = add i32 %624, %264
  %626 = add i32 %625, %275
  %627 = add i32 %626, %265
  %628 = add i32 %627, %258
  %629 = add i32 %628, %381
  %630 = sub i32 %629, %177
  %631 = add i32 %630, %285
  %632 = add i32 %631, %288
  %633 = add i32 %632, %289
  %634 = sub i32 %633, %296
  %635 = add i32 %634, %306
  %636 = add i32 %635, %313
  %637 = sub i32 %636, %337
  %638 = add i32 %637, %348
  %639 = sub i32 %638, %272
  %640 = add i32 %639, %364
  %641 = sub i32 %640, %368
  %642 = add i32 %641, %369
  %643 = add i32 %642, %256
  %644 = add i32 %643, %18
  %645 = add i32 %644, %278
  %646 = add i32 %645, %325
  %647 = sub i32 %646, %66
  %648 = sub i32 %647, %122
  %649 = sub i32 %648, %151
  %650 = add i32 %649, %254
  %651 = add i32 %650, %260
  %652 = sub i32 %651, %270
  %653 = add i32 %652, %271
  %654 = add i32 %653, %273
  %655 = sub i32 %654, %280
  %656 = add i32 %655, %281
  %657 = sub i32 %656, %284
  %658 = sub i32 %657, %291
  %659 = add i32 %658, %294
  %660 = sub i32 %659, %295
  %661 = add i32 %660, %299
  %662 = sub i32 %661, %301
  %663 = add i32 %662, %302
  %664 = add i32 %663, %304
  %665 = sub i32 %664, %305
  %666 = sub i32 %665, %312
  %667 = add i32 %666, %314
  %668 = add i32 %667, %315
  %669 = sub i32 %668, %317
  %670 = sub i32 %669, %321
  %671 = add i32 %670, %326
  %672 = sub i32 %671, %319
  %673 = sub i32 %672, %329
  %674 = add i32 %673, %330
  %675 = sub i32 %674, %335
  %676 = sub i32 %675, %336
  %677 = sub i32 %676, %338
  %678 = sub i32 %677, %341
  %679 = add i32 %678, %342
  %680 = add i32 %679, %343
  %681 = add i32 %680, %349
  %682 = add i32 %681, %350
  %683 = sub i32 %682, %351
  %684 = sub i32 %683, %352
  %685 = sub i32 %684, %356
  %686 = sub i32 %685, %358
  %687 = sub i32 %686, %359
  %688 = add i32 %687, %309
  %689 = sub i32 %688, %362
  %690 = add i32 %689, %363
  %691 = sub i32 %690, %365
  %692 = add i32 %691, %366
  %693 = add i32 %692, %370
  %694 = sub i32 %693, %371
  %695 = add i32 %694, %372
  %696 = sub i32 %695, %373
  %697 = sub i32 %696, %376
  %698 = sub i32 %697, %380
  %699 = sub i32 %698, %382
  %700 = sub i32 %699, %387
  %701 = sub i32 %700, %332
  %702 = sub i32 %701, %391
  %703 = sub i32 %702, %394
  %704 = sub i32 %703, %396
  %705 = add i32 %704, %397
  %706 = sub i32 %705, %406
  %707 = sub i32 %706, %407
  %708 = sub i32 %707, %408
  %709 = sub i32 %708, %409
  %710 = add i32 %709, %414
  %711 = add i32 %710, %415
  %712 = sub i32 %711, %416
  %713 = add i32 %712, %417
  %714 = sub i32 %713, %418
  %715 = sub i32 %714, %269
  %716 = sub i32 %715, %283
  %717 = sub i32 %716, %298
  %718 = add i32 %717, %311
  %719 = add i32 %718, %320
  %720 = sub i32 %719, %324
  %721 = add i32 %720, %328
  %722 = sub i32 %721, %334
  %723 = add i32 %722, %340
  %724 = sub i32 %723, %347
  %725 = sub i32 %724, %355
  %726 = sub i32 %725, %361
  %727 = sub i32 %726, %375
  %728 = add i32 %727, %379
  %729 = sub i32 %728, %384
  %730 = sub i32 %729, %393
  %731 = add i32 %730, %395
  %732 = sub i32 %731, %400
  %733 = sub i32 %732, %404
  %734 = add i32 %733, %405
  %735 = sub i32 %734, %411
  %736 = sub i32 %735, %413
  %737 = add i32 %736, %420
  %738 = add i32 %737, %422
  %739 = add i32 %738, %424
  %740 = add i32 %739, %427
  %741 = add i32 %740, %429
  %742 = sub i32 %741, %430
  %743 = add i32 %742, %484
  %744 = add i32 %743, %479
  %745 = add i32 %744, %471
  %746 = add i32 %745, %461
  %747 = icmp eq i32 %20, %746
  %748 = select i1 %747, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %749 = tail call i32 @puts(i8* nonnull dereferenceable(1) %748)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
