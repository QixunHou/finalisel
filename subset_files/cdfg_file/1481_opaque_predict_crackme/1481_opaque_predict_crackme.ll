; ModuleID = '../.././c_source_file/1481_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1481_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = mul i32 %9, -2
  %11 = xor i32 %1, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %2, %0
  %14 = and i32 %13, %12
  %15 = add i32 %10, %14
  %16 = xor i32 %3, -1
  %17 = and i32 %16, %4
  %18 = and i32 %5, %3
  %19 = xor i32 %18, -1
  %20 = xor i32 %17, %19
  %21 = shl i32 %20, 1
  %22 = sub i32 %15, %21
  %23 = or i32 %1, %0
  %24 = and i32 %23, %7
  %25 = or i32 %7, %1
  %26 = and i32 %2, %1
  %27 = and i32 %26, %0
  %28 = xor i32 %0, -1
  %29 = or i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %0
  %32 = xor i32 %27, %31
  %33 = and i32 %7, %0
  %34 = xor i32 %25, -1
  %35 = or i32 %33, %34
  %36 = shl i32 %35, 1
  %37 = xor i32 %1, -1
  %38 = and i32 %37, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %39, %2
  %41 = or i32 %37, %0
  %42 = and i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %37
  %45 = or i32 %2, %0
  %46 = xor i32 %45, %1
  %47 = xor i32 %2, %1
  %48 = and i32 %47, %41
  %49 = xor i32 %47, -1
  %50 = and i32 %49, %28
  %51 = xor i32 %45, -1
  %52 = or i32 %11, %51
  %53 = xor i32 %41, -1
  %54 = xor i32 %13, -1
  %55 = or i32 %54, %53
  %56 = add i32 %45, 1
  %57 = or i32 %42, %30
  %58 = and i32 %45, %37
  %59 = and i32 %38, %2
  %60 = or i32 %37, %2
  %61 = and i32 %60, %28
  %62 = or i32 %59, %61
  %63 = or i32 %7, %53
  %64 = and i32 %1, %0
  %65 = xor i32 %64, -1
  %66 = and i32 %54, %65
  %67 = xor i32 %53, %2
  %68 = or i32 %42, %12
  %69 = or i32 %9, %37
  %70 = and i32 %8, %37
  %71 = xor i32 %23, -1
  %72 = or i32 %47, %71
  %73 = or i32 %47, %0
  %74 = xor i32 %73, -1
  %75 = or i32 %59, %74
  %76 = or i32 %30, %28
  %77 = and i32 %12, %2
  %78 = or i32 %64, %51
  %79 = xor i32 %71, %2
  %80 = and i32 %7, %1
  %81 = xor i32 %80, -1
  %82 = or i32 %81, %28
  %83 = shl i32 %82, 1
  %84 = or i32 %51, %37
  %85 = shl i32 %84, 1
  %86 = xor i32 %42, %41
  %87 = or i32 %47, %28
  %88 = or i32 %80, %0
  %89 = and i32 %11, %54
  %90 = or i32 %49, %53
  %91 = or i32 %54, %37
  %92 = and i32 %13, %1
  %93 = xor i32 %33, -1
  %94 = xor i32 %93, %1
  %95 = or i32 %42, %11
  %96 = xor i32 %42, %23
  %97 = shl i32 %96, 1
  %98 = or i32 %71, %2
  %99 = add i32 %38, 1
  %100 = or i32 %29, %28
  %101 = shl i32 %43, 1
  %102 = xor i32 %38, %81
  %103 = shl i32 %102, 1
  %104 = and i32 %8, %12
  %105 = or i32 %47, %38
  %106 = xor i32 %38, %2
  %107 = or i32 %11, %9
  %108 = and i32 %41, %49
  %109 = xor i32 %8, %64
  %110 = or i32 %47, %64
  %111 = xor i32 %59, -1
  %112 = xor i32 %61, %111
  %113 = or i32 %26, %28
  %114 = and i32 %93, %1
  %115 = xor i32 %59, %73
  %116 = shl i32 %115, 1
  %117 = and i32 %26, %28
  %118 = and i32 %47, %0
  %119 = xor i32 %118, 2147483647
  %120 = xor i32 %119, %117
  %121 = add i32 %25, 1
  %122 = xor i32 %29, %28
  %123 = xor i32 %122, %27
  %124 = and i32 %7, %12
  %125 = xor i32 %60, %0
  %126 = or i32 %59, %125
  %127 = add i32 %29, 1
  %128 = xor i32 %47, %0
  %129 = or i32 %59, %128
  %130 = and i32 %47, %23
  %131 = and i32 %54, %1
  %132 = or i32 %54, %71
  %133 = or i32 %80, %28
  %134 = xor i32 %125, %111
  %135 = and i32 %13, %23
  %136 = or i32 %9, %1
  %137 = xor i32 %80, %0
  %138 = shl i32 %137, 1
  %139 = or i32 %11, %54
  %140 = shl i32 %139, 1
  %141 = and i32 %30, %28
  %142 = shl i32 %141, 3
  %143 = and i32 %80, %28
  %144 = mul i32 %143, 6
  %145 = and i32 %30, %0
  %146 = and i32 %34, %0
  %147 = mul i32 %146, -9
  %148 = and i32 %5, %4
  %149 = xor i32 %148, -1
  %150 = add i32 %148, 1
  %151 = and i32 %16, %5
  %152 = and i32 %151, %4
  %153 = xor i32 %5, %3
  %154 = or i32 %153, %4
  %155 = xor i32 %154, -1
  %156 = or i32 %152, %155
  %157 = xor i32 %17, -1
  %158 = xor i32 %157, %5
  %159 = xor i32 %4, -1
  %160 = or i32 %19, %159
  %161 = and i32 %153, %4
  %162 = or i32 %4, %3
  %163 = and i32 %153, %162
  %164 = xor i32 %5, -1
  %165 = or i32 %164, %3
  %166 = and i32 %165, %4
  %167 = and i32 %4, %3
  %168 = or i32 %167, %164
  %169 = or i32 %16, %4
  %170 = xor i32 %169, -1
  %171 = add i32 %169, 1
  %172 = or i32 %5, %4
  %173 = xor i32 %172, -1
  %174 = or i32 %173, %3
  %175 = and i32 %18, %159
  %176 = xor i32 %175, -1
  %177 = xor i32 %161, %176
  %178 = and i32 %164, %3
  %179 = xor i32 %178, -1
  %180 = xor i32 %179, %4
  %181 = xor i32 %5, %4
  %182 = xor i32 %181, -1
  %183 = and i32 %182, %3
  %184 = xor i32 %4, %3
  %185 = xor i32 %184, -1
  %186 = or i32 %181, %185
  %187 = and i32 %181, %3
  %188 = or i32 %181, %17
  %189 = or i32 %167, %5
  %190 = or i32 %5, %3
  %191 = xor i32 %190, -1
  %192 = or i32 %191, %4
  %193 = and i32 %164, %4
  %194 = or i32 %193, %184
  %195 = or i32 %185, %5
  %196 = shl i32 %195, 1
  %197 = or i32 %16, %5
  %198 = and i32 %197, %159
  %199 = xor i32 %152, -1
  %200 = xor i32 %198, %199
  %201 = xor i32 %193, %3
  %202 = xor i32 %165, -1
  %203 = or i32 %167, %202
  %204 = xor i32 %148, %3
  %205 = or i32 %164, %4
  %206 = and i32 %205, %184
  %207 = and i32 %182, %16
  %208 = shl i32 %207, 1
  %209 = xor i32 %162, -1
  %210 = or i32 %148, %209
  %211 = or i32 %184, %5
  %212 = shl i32 %211, 1
  %213 = or i32 %182, %185
  %214 = and i32 %18, %4
  %215 = xor i32 %190, %4
  %216 = xor i32 %214, -1
  %217 = xor i32 %215, %216
  %218 = and i32 %151, %159
  %219 = and i32 %197, %4
  %220 = xor i32 %219, 1073741823
  %221 = xor i32 %220, %218
  %222 = shl i32 %221, 2
  %223 = or i32 %153, %209
  %224 = shl i32 %157, 1
  %225 = or i32 %148, %178
  %226 = or i32 %182, %16
  %227 = or i32 %178, %4
  %228 = xor i32 %167, %5
  %229 = xor i32 %172, %3
  %230 = xor i32 %17, %5
  %231 = xor i32 %205, -1
  %232 = or i32 %231, %185
  %233 = shl i32 %232, 1
  %234 = xor i32 %197, %4
  %235 = xor i32 %234, %199
  %236 = or i32 %191, %159
  %237 = xor i32 %231, %3
  %238 = or i32 %190, %159
  %239 = or i32 %184, %231
  %240 = xor i32 %148, %190
  %241 = or i32 %182, %3
  %242 = shl i32 %241, 1
  %243 = and i32 %153, %159
  %244 = shl i32 %243, 1
  %245 = or i32 %181, %3
  %246 = or i32 %181, %209
  %247 = xor i32 %173, %3
  %248 = and i32 %182, %157
  %249 = shl i32 %248, 1
  %250 = and i32 %149, %16
  %251 = or i32 %167, %173
  %252 = or i32 %178, %17
  %253 = or i32 %173, %185
  %254 = xor i32 %153, -1
  %255 = or i32 %17, %254
  %256 = or i32 %164, %209
  %257 = xor i32 %193, -1
  %258 = and i32 %257, %185
  %259 = xor i32 %153, %4
  %260 = xor i32 %172, %167
  %261 = xor i32 %148, %162
  %262 = xor i32 %170, %5
  %263 = and i32 %205, %3
  %264 = or i32 %214, %243
  %265 = xor i32 %169, %5
  %266 = shl i32 %257, 2
  %267 = xor i32 %167, -1
  %268 = and i32 %153, %267
  %269 = and i32 %165, %159
  %270 = xor i32 %259, -1
  %271 = or i32 %214, %270
  %272 = and i32 %190, %4
  %273 = xor i32 %272, %176
  %274 = and i32 %181, %185
  %275 = and i32 %182, %267
  %276 = or i32 %153, %159
  %277 = xor i32 %218, %276
  %278 = or i32 %214, %215
  %279 = or i32 %184, %173
  %280 = and i32 %172, %185
  %281 = or i32 %178, %159
  %282 = or i32 %231, %3
  %283 = xor i32 %276, 2147483647
  %284 = or i32 %283, %218
  %285 = or i32 %19, %4
  %286 = xor i32 %148, %179
  %287 = and i32 %190, %159
  %288 = or i32 %214, %287
  %289 = and i32 %181, %169
  %290 = and i32 %184, %182
  %291 = and i32 %172, %3
  %292 = or i32 %190, %4
  %293 = add i32 %178, 1
  %294 = or i32 %173, %16
  %295 = or i32 %167, %254
  %296 = and i32 %162, %182
  %297 = and i32 %257, %16
  %298 = and i32 %19, %4
  %299 = add i32 %165, 1
  %300 = xor i32 %152, %270
  %301 = xor i32 %149, %3
  %302 = shl i32 %301, 1
  %303 = xor i32 %267, %5
  %304 = xor i32 %19, %4
  %305 = or i32 %167, %231
  %306 = or i32 %148, %191
  %307 = or i32 %18, %4
  %308 = and i32 %172, %16
  %309 = xor i32 %205, %3
  %310 = or i32 %193, %3
  %311 = and i32 %169, %164
  %312 = and i32 %181, %16
  %313 = and i32 %19, %159
  %314 = or i32 %17, %182
  %315 = xor i32 %202, %4
  %316 = and i32 %179, %4
  %317 = or i32 %167, %182
  %318 = or i32 %231, %16
  %319 = and i32 %162, %164
  %320 = and i32 %181, %162
  %321 = and i32 %205, %185
  %322 = xor i32 %209, %5
  %323 = or i32 %193, %18
  %324 = and i32 %267, %5
  %325 = and i32 %164, %157
  %326 = shl i32 %325, 1
  %327 = xor i32 %254, %4
  %328 = or i32 %193, %16
  %329 = or i32 %170, %5
  %330 = xor i32 %17, %179
  %331 = or i32 %175, %272
  %332 = shl i32 %159, 1
  %333 = and i32 %172, %184
  %334 = and i32 %185, %5
  %335 = and i32 %179, %159
  %336 = or i32 %148, %16
  %337 = or i32 %181, %16
  %338 = shl i32 %337, 1
  %339 = and i32 %153, %157
  %340 = shl i32 %339, 1
  %341 = or i32 %254, %159
  %342 = and i32 %182, %185
  %343 = xor i32 %243, %216
  %344 = or i32 %202, %4
  %345 = or i32 %175, %161
  %346 = xor i32 %190, %167
  %347 = and i32 %184, %257
  %348 = and i32 %164, %267
  %349 = and i32 %254, %157
  %350 = or i32 %179, %4
  %351 = or i32 %165, %159
  %352 = and i32 %153, %169
  %353 = or i32 %153, %167
  %354 = xor i32 %162, %5
  %355 = or i32 %164, %170
  %356 = shl i32 %355, 1
  %357 = or i32 %181, %167
  %358 = and i32 %254, %4
  %359 = and i32 %184, %149
  %360 = or i32 %148, %184
  %361 = or i32 %152, %234
  %362 = or i32 %152, %198
  %363 = or i32 %165, %4
  %364 = xor i32 %178, %4
  %365 = and i32 %149, %185
  %366 = xor i32 %152, %154
  %367 = and i32 %205, %16
  %368 = and i32 %169, %182
  %369 = and i32 %162, %254
  %370 = shl i32 %369, 1
  %371 = and i32 %181, %267
  %372 = shl i32 %209, 1
  %373 = or i32 %181, %184
  %374 = shl i32 %373, 1
  %375 = or i32 %18, %159
  %376 = or i32 %181, %170
  %377 = xor i32 %193, %165
  %378 = and i32 %254, %267
  %379 = shl i32 %378, 1
  %380 = or i32 %209, %5
  %381 = xor i32 %191, %4
  %382 = or i32 %152, %259
  %383 = or i32 %182, %209
  %384 = shl i32 %383, 1
  %385 = and i32 %169, %5
  %386 = and i32 %164, %185
  %387 = and i32 %157, %5
  %388 = or i32 %184, %164
  %389 = shl i32 %388, 1
  %390 = xor i32 %165, %167
  %391 = xor i32 %214, %259
  %392 = xor i32 %205, %167
  %393 = or i32 %218, %219
  %394 = xor i32 %148, %169
  %395 = add i32 %181, 1
  %396 = and i32 %184, %5
  %397 = and i32 %162, %5
  %398 = or i32 %17, %5
  %399 = shl i32 %154, 1
  %400 = and i32 %184, %164
  %401 = shl i32 %400, 1
  %402 = and i32 %181, %157
  %403 = or i32 %254, %209
  %404 = shl i32 %403, 1
  %405 = or i32 %254, %170
  %406 = and i32 %169, %254
  %407 = or i32 %193, %202
  %408 = or i32 %148, %185
  %409 = shl i32 %167, 1
  %410 = xor i32 %257, %3
  %411 = and i32 %191, %159
  %412 = and i32 %178, %159
  %413 = and i32 %191, %4
  %414 = shl i32 %413, 3
  %415 = and i32 %178, %4
  %416 = mul i32 %415, -14
  %417 = and i32 %202, %159
  %418 = mul i32 %417, -20
  %419 = mul i32 %175, 19
  %420 = and i32 %202, %4
  %421 = shl i32 %420, 3
  %422 = sub i32 %40, %117
  %423 = sub i32 %422, %398
  %424 = add i32 %423, %214
  %425 = sub i32 %424, %357
  %426 = add i32 %425, %344
  %427 = add i32 %426, %210
  %428 = add i32 %427, %300
  %429 = sub i32 %428, %362
  %430 = mul i32 %429, 3
  %431 = sub i32 %79, %27
  %432 = sub i32 %431, %105
  %433 = add i32 %432, %228
  %434 = add i32 %433, %295
  %435 = add i32 %434, %250
  %436 = sub i32 %435, %345
  %437 = mul i32 %436, 5
  %438 = add i32 %365, %329
  %439 = add i32 %438, %411
  %440 = add i32 %439, %237
  %441 = shl i32 %440, 2
  %442 = add i32 %412, %145
  %443 = shl i32 %442, 4
  %444 = add i32 %29, -1
  %445 = add i32 %444, %136
  %446 = add i32 %445, %108
  %447 = add i32 %446, %58
  %448 = add i32 %447, %185
  %449 = add i32 %448, %62
  %450 = add i32 %449, %205
  %451 = add i32 %450, %387
  %452 = add i32 %451, %120
  %453 = add i32 %452, %381
  %454 = add i32 %453, %341
  %455 = add i32 %454, %336
  %456 = add i32 %455, %330
  %457 = add i32 %456, %327
  %458 = add i32 %457, %316
  %459 = add i32 %458, %309
  %460 = add i32 %459, %286
  %461 = add i32 %460, %281
  %462 = add i32 %461, %274
  %463 = add i32 %462, %226
  %464 = add i32 %463, %203
  %465 = add i32 %464, %180
  %466 = add i32 %465, %166
  %467 = add i32 %466, %284
  %468 = shl i32 %467, 1
  %469 = sub i32 2, %41
  %470 = add i32 %469, %23
  %471 = add i32 %470, %38
  %472 = sub i32 %471, %2
  %473 = add i32 %472, %99
  %474 = sub i32 %473, %25
  %475 = add i32 %474, %24
  %476 = add i32 %475, %56
  %477 = add i32 %476, %63
  %478 = add i32 %477, %67
  %479 = add i32 %478, %77
  %480 = add i32 %479, %26
  %481 = add i32 %480, %81
  %482 = add i32 %481, %98
  %483 = sub i32 %482, %106
  %484 = add i32 %483, %121
  %485 = add i32 %484, %45
  %486 = add i32 %485, %124
  %487 = add i32 %486, %127
  %488 = add i32 %487, 1
  %489 = add i32 %488, %44
  %490 = add i32 %489, %46
  %491 = add i32 %490, %48
  %492 = add i32 %491, %50
  %493 = sub i32 %492, %52
  %494 = sub i32 %493, %55
  %495 = sub i32 %494, %57
  %496 = add i32 %495, %66
  %497 = add i32 %496, %68
  %498 = sub i32 %497, %69
  %499 = add i32 %498, %70
  %500 = add i32 %499, %72
  %501 = sub i32 %500, %76
  %502 = add i32 %501, %78
  %503 = add i32 %502, %86
  %504 = add i32 %503, %87
  %505 = add i32 %504, %88
  %506 = add i32 %505, %89
  %507 = add i32 %506, %90
  %508 = add i32 %507, %91
  %509 = sub i32 %508, %92
  %510 = add i32 %509, %94
  %511 = sub i32 %510, %31
  %512 = add i32 %511, %95
  %513 = add i32 %512, %100
  %514 = sub i32 %513, %101
  %515 = sub i32 %514, %104
  %516 = sub i32 %515, %107
  %517 = sub i32 %516, %109
  %518 = add i32 %517, %110
  %519 = add i32 %518, %113
  %520 = sub i32 %519, %114
  %521 = add i32 %520, %130
  %522 = add i32 %521, %131
  %523 = sub i32 %522, %132
  %524 = sub i32 %523, %133
  %525 = sub i32 %524, %135
  %526 = add i32 %525, %4
  %527 = add i32 %526, %32
  %528 = sub i32 %527, %36
  %529 = add i32 %528, %75
  %530 = sub i32 %529, %83
  %531 = sub i32 %530, %85
  %532 = sub i32 %531, %97
  %533 = sub i32 %532, %103
  %534 = sub i32 %533, %112
  %535 = sub i32 %534, %123
  %536 = add i32 %535, %126
  %537 = sub i32 %536, %129
  %538 = sub i32 %537, %134
  %539 = sub i32 %538, %138
  %540 = sub i32 %539, %140
  %541 = sub i32 %540, %142
  %542 = add i32 %541, %144
  %543 = add i32 %542, %147
  %544 = add i32 %543, %171
  %545 = add i32 %544, %17
  %546 = add i32 %545, %184
  %547 = add i32 %546, %267
  %548 = sub i32 %547, %162
  %549 = sub i32 %548, %332
  %550 = sub i32 %549, %116
  %551 = add i32 %550, %150
  %552 = add i32 %551, %158
  %553 = sub i32 %552, %168
  %554 = add i32 %553, %189
  %555 = add i32 %554, %173
  %556 = sub i32 %555, %172
  %557 = sub i32 %556, %224
  %558 = sub i32 %557, %181
  %559 = add i32 %558, %230
  %560 = sub i32 %559, %178
  %561 = sub i32 %560, %256
  %562 = sub i32 %561, %262
  %563 = add i32 %562, %265
  %564 = add i32 %563, %19
  %565 = add i32 %564, %231
  %566 = add i32 %565, %293
  %567 = add i32 %566, %299
  %568 = sub i32 %567, %303
  %569 = add i32 %568, %165
  %570 = sub i32 %569, %311
  %571 = add i32 %570, %319
  %572 = add i32 %571, %322
  %573 = sub i32 %572, %324
  %574 = sub i32 %573, %334
  %575 = sub i32 %574, %348
  %576 = sub i32 %575, %354
  %577 = sub i32 %576, %190
  %578 = sub i32 %577, %372
  %579 = add i32 %578, %380
  %580 = add i32 %579, %385
  %581 = add i32 %580, %386
  %582 = add i32 %581, %395
  %583 = sub i32 %582, %396
  %584 = sub i32 %583, %397
  %585 = sub i32 %584, %409
  %586 = sub i32 %585, %160
  %587 = add i32 %586, %161
  %588 = add i32 %587, %163
  %589 = add i32 %588, %174
  %590 = add i32 %589, %183
  %591 = add i32 %590, %186
  %592 = add i32 %591, %187
  %593 = add i32 %592, %188
  %594 = sub i32 %593, %192
  %595 = add i32 %594, %194
  %596 = sub i32 %595, %196
  %597 = sub i32 %596, %201
  %598 = add i32 %597, %204
  %599 = sub i32 %598, %206
  %600 = sub i32 %599, %212
  %601 = add i32 %600, %213
  %602 = add i32 %601, %223
  %603 = add i32 %602, %225
  %604 = add i32 %603, %227
  %605 = add i32 %604, %229
  %606 = add i32 %605, %236
  %607 = sub i32 %606, %238
  %608 = add i32 %607, %239
  %609 = add i32 %608, %240
  %610 = sub i32 %609, %245
  %611 = add i32 %610, %246
  %612 = sub i32 %611, %247
  %613 = sub i32 %612, %251
  %614 = sub i32 %613, %252
  %615 = sub i32 %614, %253
  %616 = add i32 %615, %255
  %617 = sub i32 %616, %258
  %618 = sub i32 %617, %259
  %619 = add i32 %618, %260
  %620 = sub i32 %619, %261
  %621 = add i32 %620, %263
  %622 = sub i32 %621, %266
  %623 = add i32 %622, %268
  %624 = add i32 %623, %269
  %625 = add i32 %624, %275
  %626 = sub i32 %625, %279
  %627 = add i32 %626, %280
  %628 = sub i32 %627, %282
  %629 = add i32 %628, %285
  %630 = add i32 %629, %289
  %631 = sub i32 %630, %290
  %632 = sub i32 %631, %291
  %633 = add i32 %632, %292
  %634 = sub i32 %633, %294
  %635 = sub i32 %634, %296
  %636 = sub i32 %635, %297
  %637 = sub i32 %636, %298
  %638 = sub i32 %637, %304
  %639 = sub i32 %638, %305
  %640 = add i32 %639, %306
  %641 = sub i32 %640, %307
  %642 = add i32 %641, %308
  %643 = sub i32 %642, %310
  %644 = add i32 %643, %312
  %645 = add i32 %644, %276
  %646 = sub i32 %645, %313
  %647 = sub i32 %646, %314
  %648 = add i32 %647, %315
  %649 = add i32 %648, %317
  %650 = add i32 %649, %318
  %651 = add i32 %650, %320
  %652 = add i32 %651, %321
  %653 = add i32 %652, %287
  %654 = sub i32 %653, %323
  %655 = sub i32 %654, %326
  %656 = add i32 %655, %328
  %657 = sub i32 %656, %333
  %658 = sub i32 %657, %335
  %659 = sub i32 %658, %342
  %660 = add i32 %659, %346
  %661 = add i32 %660, %347
  %662 = sub i32 %661, %349
  %663 = sub i32 %662, %350
  %664 = sub i32 %663, %351
  %665 = add i32 %664, %352
  %666 = sub i32 %665, %353
  %667 = sub i32 %666, %356
  %668 = add i32 %667, %358
  %669 = add i32 %668, %359
  %670 = add i32 %669, %360
  %671 = add i32 %670, %363
  %672 = add i32 %671, %364
  %673 = sub i32 %672, %367
  %674 = sub i32 %673, %368
  %675 = add i32 %674, %371
  %676 = add i32 %675, %375
  %677 = add i32 %676, %376
  %678 = sub i32 %677, %377
  %679 = sub i32 %678, %389
  %680 = sub i32 %679, %390
  %681 = add i32 %680, %392
  %682 = sub i32 %681, %394
  %683 = sub i32 %682, %401
  %684 = sub i32 %683, %402
  %685 = sub i32 %684, %405
  %686 = sub i32 %685, %406
  %687 = add i32 %686, %407
  %688 = add i32 %687, %408
  %689 = sub i32 %688, %215
  %690 = add i32 %689, %410
  %691 = sub i32 %690, %156
  %692 = sub i32 %691, %177
  %693 = add i32 %692, %200
  %694 = sub i32 %693, %208
  %695 = add i32 %694, %217
  %696 = sub i32 %695, %233
  %697 = sub i32 %696, %235
  %698 = sub i32 %697, %242
  %699 = sub i32 %698, %244
  %700 = sub i32 %699, %249
  %701 = sub i32 %700, %264
  %702 = sub i32 %701, %271
  %703 = add i32 %702, %273
  %704 = sub i32 %703, %277
  %705 = add i32 %704, %278
  %706 = sub i32 %705, %288
  %707 = sub i32 %706, %302
  %708 = sub i32 %707, %331
  %709 = sub i32 %708, %338
  %710 = sub i32 %709, %340
  %711 = sub i32 %710, %343
  %712 = sub i32 %711, %361
  %713 = add i32 %712, %366
  %714 = sub i32 %713, %370
  %715 = sub i32 %714, %374
  %716 = sub i32 %715, %379
  %717 = add i32 %716, %382
  %718 = sub i32 %717, %384
  %719 = add i32 %718, %391
  %720 = sub i32 %719, %393
  %721 = sub i32 %720, %399
  %722 = sub i32 %721, %404
  %723 = sub i32 %722, %414
  %724 = add i32 %723, %416
  %725 = add i32 %724, %418
  %726 = add i32 %725, %419
  %727 = sub i32 %726, %421
  %728 = add i32 %727, %443
  %729 = sub i32 %728, %222
  %730 = add i32 %729, %441
  %731 = add i32 %730, %437
  %732 = add i32 %731, %430
  %733 = add i32 %732, %468
  %734 = icmp eq i32 %22, %733
  %735 = select i1 %734, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %736 = tail call i32 @puts(i8* nonnull dereferenceable(1) %735)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
