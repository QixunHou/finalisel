; ModuleID = '../.././c_source_file/1219_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1219_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = or i32 %4, %3
  %9 = shl i32 %8, 1
  %10 = and i32 %2, %1
  %11 = xor i32 %10, %0
  %12 = xor i32 %2, -1
  %13 = and i32 %12, %1
  %14 = xor i32 %13, -1
  %15 = shl i32 %14, 1
  %16 = sub i32 %15, %11
  %17 = add i32 %16, %7
  %18 = sub i32 %17, %9
  %19 = xor i32 %4, -1
  %20 = and i32 %19, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = xor i32 %4, %3
  %24 = shl i32 %23, 1
  %25 = xor i32 %3, -1
  %26 = or i32 %19, %3
  %27 = shl i32 %3, 1
  %28 = xor i32 %23, -1
  %29 = add i32 %8, 1
  %30 = shl i32 %26, 1
  %31 = xor i32 %30, -2
  %32 = shl i32 %6, 2
  %33 = or i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = add i32 %33, 1
  %36 = and i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = add i32 %36, 1
  %39 = or i32 %12, %0
  %40 = xor i32 %39, %1
  %41 = xor i32 %1, -1
  %42 = and i32 %41, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = and i32 %45, %43
  %47 = xor i32 %39, -1
  %48 = xor i32 %1, %0
  %49 = or i32 %48, %47
  %50 = or i32 %36, %48
  %51 = or i32 %36, %1
  %52 = and i32 %1, %0
  %53 = xor i32 %2, %1
  %54 = xor i32 %53, -1
  %55 = or i32 %52, %54
  %56 = xor i32 %0, -1
  %57 = xor i32 %53, %0
  %58 = or i32 %41, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %59, %2
  %61 = or i32 %36, %59
  %62 = and i32 %44, %48
  %63 = and i32 %53, %43
  %64 = xor i32 %13, %0
  %65 = and i32 %10, %56
  %66 = or i32 %2, %1
  %67 = and i32 %66, %0
  %68 = or i32 %65, %67
  %69 = shl i32 %68, 1
  %70 = and i32 %44, %1
  %71 = or i32 %1, %0
  %72 = xor i32 %71, -1
  %73 = or i32 %53, %72
  %74 = or i32 %53, %42
  %75 = and i32 %12, %0
  %76 = xor i32 %75, -1
  %77 = and i32 %76, %1
  %78 = or i32 %42, %2
  %79 = xor i32 %10, -1
  %80 = or i32 %44, %59
  %81 = xor i32 %39, %52
  %82 = xor i32 %48, -1
  %83 = or i32 %45, %82
  %84 = shl i32 %83, 1
  %85 = or i32 %36, %82
  %86 = or i32 %52, %12
  %87 = or i32 %54, %59
  %88 = or i32 %44, %82
  %89 = or i32 %12, %1
  %90 = xor i32 %75, %89
  %91 = and i32 %43, %2
  %92 = and i32 %54, %56
  %93 = and i32 %41, %2
  %94 = and i32 %93, %0
  %95 = or i32 %94, %57
  %96 = xor i32 %14, %0
  %97 = and i32 %39, %41
  %98 = or i32 %52, %2
  %99 = add i32 %53, 1
  %100 = or i32 %14, %0
  %101 = or i32 %75, %1
  %102 = and i32 %37, %41
  %103 = xor i32 %52, -1
  %104 = add i32 %52, 1
  %105 = xor i32 %89, -1
  %106 = or i32 %52, %105
  %107 = and i32 %45, %41
  %108 = and i32 %53, %0
  %109 = or i32 %65, %108
  %110 = shl i32 %109, 1
  %111 = and i32 %48, %45
  %112 = xor i32 %47, %1
  %113 = or i32 %45, %59
  %114 = xor i32 %72, %2
  %115 = and i32 %54, %0
  %116 = xor i32 %89, %52
  %117 = or i32 %36, %72
  %118 = shl i32 %117, 2
  %119 = and i32 %66, %56
  %120 = or i32 %10, %56
  %121 = and i32 %10, %0
  %122 = xor i32 %121, %57
  %123 = and i32 %37, %82
  %124 = and i32 %33, %48
  %125 = add i32 %89, 1
  %126 = xor i32 %34, %1
  %127 = xor i32 %57, -1
  %128 = xor i32 %94, %127
  %129 = or i32 %42, %45
  %130 = or i32 %105, %0
  %131 = shl i32 %130, 1
  %132 = and i32 %44, %103
  %133 = or i32 %36, %13
  %134 = or i32 %48, %12
  %135 = and i32 %53, %56
  %136 = or i32 %121, %135
  %137 = or i32 %10, %0
  %138 = xor i32 %66, -1
  %139 = or i32 %138, %56
  %140 = or i32 %121, %119
  %141 = or i32 %54, %0
  %142 = xor i32 %66, %56
  %143 = xor i32 %142, %121
  %144 = xor i32 %103, %2
  %145 = or i32 %13, %42
  %146 = shl i32 %145, 1
  %147 = or i32 %53, %52
  %148 = and i32 %44, %71
  %149 = and i32 %79, %0
  %150 = and i32 %44, %41
  %151 = xor i32 %36, %1
  %152 = xor i32 %36, %14
  %153 = and i32 %44, %43
  %154 = xor i32 %43, %2
  %155 = or i32 %75, %48
  %156 = and i32 %54, %103
  %157 = or i32 %10, %42
  %158 = or i32 %52, %45
  %159 = or i32 %45, %1
  %160 = and i32 %71, %45
  %161 = or i32 %48, %34
  %162 = xor i32 %138, %0
  %163 = shl i32 %162, 2
  %164 = xor i32 %89, %0
  %165 = or i32 %13, %0
  %166 = shl i32 %165, 1
  %167 = or i32 %12, %82
  %168 = and i32 %48, %12
  %169 = or i32 %42, %54
  %170 = or i32 %75, %10
  %171 = and i32 %39, %1
  %172 = or i32 %52, %138
  %173 = and i32 %14, %0
  %174 = or i32 %54, %56
  %175 = xor i32 %52, %2
  %176 = and i32 %53, %58
  %177 = xor i32 %33, %52
  %178 = xor i32 %54, %0
  %179 = and i32 %93, %56
  %180 = or i32 %41, %2
  %181 = and i32 %180, %0
  %182 = or i32 %179, %181
  %183 = xor i32 %37, %1
  %184 = and i32 %48, %37
  %185 = or i32 %44, %1
  %186 = and i32 %45, %103
  %187 = shl i32 %186, 1
  %188 = or i32 %75, %41
  %189 = and i32 %58, %54
  %190 = xor i32 %42, %14
  %191 = or i32 %52, %47
  %192 = xor i32 %59, %2
  %193 = xor i32 %181, -1
  %194 = xor i32 %179, %193
  %195 = xor i32 %36, %66
  %196 = or i32 %89, %56
  %197 = and i32 %89, %56
  %198 = and i32 %48, %76
  %199 = or i32 %44, %42
  %200 = shl i32 %199, 1
  %201 = and i32 %45, %1
  %202 = shl i32 %201, 1
  %203 = or i32 %44, %48
  %204 = or i32 %13, %56
  %205 = or i32 %53, %0
  %206 = and i32 %71, %54
  %207 = xor i32 %71, %2
  %208 = or i32 %105, %56
  %209 = and i32 %138, %56
  %210 = mul i32 %209, 6
  %211 = and i32 %13, %56
  %212 = and i32 %138, %0
  %213 = and i32 %13, %0
  %214 = mul i32 %213, -15
  %215 = and i32 %105, %56
  %216 = shl i32 %65, 4
  %217 = and i32 %105, %0
  %218 = mul i32 %121, 9
  %219 = add i32 %168, %42
  %220 = add i32 %219, %211
  %221 = sub i32 %155, %220
  %222 = add i32 %221, %26
  %223 = add i32 %222, %29
  %224 = mul i32 %223, 5
  %225 = sub i32 %198, %215
  %226 = sub i32 %225, %161
  %227 = mul i32 %226, 3
  %228 = add i32 %64, %79
  %229 = add i32 %228, %100
  %230 = shl i32 %229, 2
  %231 = sub i32 %212, %217
  %232 = mul i32 %231, 10
  %233 = sub i32 -2, %42
  %234 = add i32 %233, %58
  %235 = add i32 %234, %36
  %236 = add i32 %235, %134
  %237 = add i32 %236, %98
  %238 = add i32 %237, %75
  %239 = add i32 %238, %78
  %240 = add i32 %239, %60
  %241 = add i32 %240, %151
  %242 = add i32 %241, %176
  %243 = add i32 %242, %148
  %244 = add i32 %243, %123
  %245 = add i32 %244, %107
  %246 = add i32 %245, %96
  %247 = add i32 %246, %80
  %248 = add i32 %247, %51
  %249 = add i32 %248, %50
  %250 = shl i32 %249, 1
  %251 = sub i32 3, %1
  %252 = add i32 %251, %104
  %253 = sub i32 %252, %48
  %254 = add i32 %253, %25
  %255 = add i32 %254, %35
  %256 = add i32 %255, %38
  %257 = sub i32 %256, %86
  %258 = add i32 %257, %91
  %259 = add i32 %258, %99
  %260 = add i32 %259, %114
  %261 = sub i32 %260, %66
  %262 = sub i32 %261, %10
  %263 = add i32 %262, %125
  %264 = sub i32 %263, %144
  %265 = sub i32 %264, %89
  %266 = add i32 %265, %154
  %267 = sub i32 %266, %167
  %268 = add i32 %267, %33
  %269 = add i32 %268, %175
  %270 = sub i32 %269, %13
  %271 = add i32 %270, %138
  %272 = add i32 %271, %192
  %273 = sub i32 %272, %207
  %274 = add i32 %273, %19
  %275 = sub i32 %274, %27
  %276 = sub i32 %275, %40
  %277 = sub i32 %276, %46
  %278 = sub i32 %277, %49
  %279 = sub i32 %278, %55
  %280 = add i32 %279, %57
  %281 = add i32 %280, %61
  %282 = add i32 %281, %62
  %283 = sub i32 %282, %63
  %284 = add i32 %283, %70
  %285 = sub i32 %284, %73
  %286 = sub i32 %285, %74
  %287 = sub i32 %286, %77
  %288 = add i32 %287, %81
  %289 = add i32 %288, %85
  %290 = add i32 %289, %87
  %291 = add i32 %290, %88
  %292 = sub i32 %291, %90
  %293 = sub i32 %292, %92
  %294 = sub i32 %293, %97
  %295 = add i32 %294, %101
  %296 = sub i32 %295, %102
  %297 = sub i32 %296, %106
  %298 = add i32 %297, %111
  %299 = add i32 %298, %112
  %300 = sub i32 %299, %113
  %301 = sub i32 %300, %115
  %302 = add i32 %301, %116
  %303 = add i32 %302, %67
  %304 = sub i32 %303, %119
  %305 = sub i32 %304, %120
  %306 = sub i32 %305, %124
  %307 = sub i32 %306, %126
  %308 = add i32 %307, %129
  %309 = sub i32 %308, %132
  %310 = add i32 %309, %133
  %311 = sub i32 %310, %137
  %312 = sub i32 %311, %139
  %313 = add i32 %312, %141
  %314 = sub i32 %313, %147
  %315 = sub i32 %314, %149
  %316 = sub i32 %315, %150
  %317 = add i32 %316, %152
  %318 = add i32 %317, %153
  %319 = sub i32 %318, %156
  %320 = sub i32 %319, %157
  %321 = add i32 %320, %158
  %322 = add i32 %321, %159
  %323 = add i32 %322, %160
  %324 = add i32 %323, %164
  %325 = sub i32 %324, %169
  %326 = sub i32 %325, %170
  %327 = add i32 %326, %171
  %328 = sub i32 %327, %172
  %329 = sub i32 %328, %173
  %330 = sub i32 %329, %174
  %331 = add i32 %330, %177
  %332 = add i32 %331, %178
  %333 = add i32 %332, %183
  %334 = add i32 %333, %184
  %335 = sub i32 %334, %185
  %336 = sub i32 %335, %188
  %337 = sub i32 %336, %189
  %338 = sub i32 %337, %190
  %339 = sub i32 %338, %191
  %340 = add i32 %339, %195
  %341 = sub i32 %340, %196
  %342 = add i32 %341, %197
  %343 = add i32 %342, %203
  %344 = add i32 %343, %204
  %345 = sub i32 %344, %205
  %346 = sub i32 %345, %206
  %347 = add i32 %346, %208
  %348 = add i32 %347, %28
  %349 = add i32 %348, %20
  %350 = sub i32 %349, %84
  %351 = sub i32 %350, %95
  %352 = sub i32 %351, %118
  %353 = sub i32 %352, %122
  %354 = sub i32 %353, %128
  %355 = sub i32 %354, %131
  %356 = sub i32 %355, %136
  %357 = sub i32 %356, %140
  %358 = sub i32 %357, %143
  %359 = sub i32 %358, %146
  %360 = sub i32 %359, %163
  %361 = sub i32 %360, %166
  %362 = sub i32 %361, %182
  %363 = sub i32 %362, %187
  %364 = sub i32 %363, %194
  %365 = sub i32 %364, %200
  %366 = sub i32 %365, %202
  %367 = add i32 %366, %210
  %368 = add i32 %367, %214
  %369 = sub i32 %368, %216
  %370 = add i32 %369, %218
  %371 = sub i32 %370, %24
  %372 = sub i32 %371, %32
  %373 = sub i32 %372, %69
  %374 = sub i32 %373, %110
  %375 = add i32 %374, %232
  %376 = add i32 %375, %22
  %377 = add i32 %376, %31
  %378 = add i32 %377, %227
  %379 = add i32 %378, %230
  %380 = add i32 %379, %224
  %381 = add i32 %380, %250
  %382 = icmp eq i32 %18, %381
  %383 = select i1 %382, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %384 = tail call i32 @puts(i8* nonnull dereferenceable(1) %383)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
