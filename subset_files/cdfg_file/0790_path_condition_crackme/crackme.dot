digraph "DFG for'crackme' function" {
	Node0x11b8a00[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x11b8a70[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x11b8b30[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x11b8ba0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x11b8c10[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x11b8cb0[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x11b8d20[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x11b8d90[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x11b8e00[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x11b8ea0[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x11b8f10[shape=record, label="  %13 = sub i32 %0, %5"];
	Node0x11b8f80[shape=record, label="  %14 = add i32 %13, %4"];
	Node0x11b8ff0[shape=record, label="  %15 = sub i32 %14, %10"];
	Node0x11b9060[shape=record, label="  %16 = add i32 %15, %12"];
	Node0x11b90d0[shape=record, label="  %17 = sub i32 %16, %8"];
	Node0x11b9140[shape=record, label="  %18 = icmp eq i32 %17, 1"];
	Node0x1159268[shape=record, label="  %19 = select i1 %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x11b95e0[shape=record, label="  %20 = tail call i32 @puts(i8* nonnull dereferenceable(1) %19)"];
	Node0x11b9630[shape=record, label="  ret void"];
	Node0x11b8a00 -> Node0x11b8a70;
	Node0x11b8a70 -> Node0x11b8b30;
	Node0x11b8b30 -> Node0x11b8ba0;
	Node0x11b8ba0 -> Node0x11b8c10;
	Node0x11b8c10 -> Node0x11b8cb0;
	Node0x11b8cb0 -> Node0x11b8d20;
	Node0x11b8d20 -> Node0x11b8d90;
	Node0x11b8d90 -> Node0x11b8e00;
	Node0x11b8e00 -> Node0x11b8ea0;
	Node0x11b8ea0 -> Node0x11b8f10;
	Node0x11b8f10 -> Node0x11b8f80;
	Node0x11b8f80 -> Node0x11b8ff0;
	Node0x11b8ff0 -> Node0x11b9060;
	Node0x11b9060 -> Node0x11b90d0;
	Node0x11b90d0 -> Node0x11b9140;
	Node0x11b9140 -> Node0x1159268;
	Node0x1159268 -> Node0x11b95e0;
	Node0x11b95e0 -> Node0x11b9630;
edge [color=red]
	Node0x11b8a00 -> Node0x11b8a70;
	Node0x11b8ba0 -> Node0x11b8c10;
	Node0x11b8c10 -> Node0x11b8cb0;
	Node0x11b8a00 -> Node0x11b8d20;
	Node0x11b8d20 -> Node0x11b8d90;
	Node0x11b8e00 -> Node0x11b8ea0;
	Node0x11b8b30 -> Node0x11b8f10;
	Node0x11b8f10 -> Node0x11b8f80;
	Node0x11b8a70 -> Node0x11b8f80;
	Node0x11b8f80 -> Node0x11b8ff0;
	Node0x11b8d90 -> Node0x11b8ff0;
	Node0x11b8ff0 -> Node0x11b9060;
	Node0x11b8ea0 -> Node0x11b9060;
	Node0x11b9060 -> Node0x11b90d0;
	Node0x11b8cb0 -> Node0x11b90d0;
	Node0x11b90d0 -> Node0x11b9140;
	Node0x11b9140 -> Node0x1159268;
	Node0x1159268 -> Node0x11b95e0;
}
