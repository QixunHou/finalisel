; ModuleID = '../.././c_source_file/0120_path_condition_crackme.c'
source_filename = "../.././c_source_file/0120_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %4, %3
  %7 = mul i32 %6, -2
  %8 = and i32 %1, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = add i32 %7, %11
  %13 = xor i32 %3, -1
  %14 = or i32 %13, %4
  %15 = shl i32 %6, 2
  %16 = xor i32 %15, -4
  %17 = and i32 %13, %4
  %18 = mul i32 %17, -6
  %19 = and i32 %4, %3
  %20 = xor i32 %0, -1
  %21 = xor i32 %1, -1
  %22 = and i32 %21, %2
  %23 = and i32 %22, %20
  %24 = or i32 %9, %20
  %25 = xor i32 %23, %24
  %26 = xor i32 %2, -1
  %27 = and i32 %22, %0
  %28 = or i32 %9, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %27, %29
  %31 = and i32 %2, %1
  %32 = xor i32 %31, %0
  %33 = shl i32 %32, 1
  %34 = and i32 %21, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %35, %2
  %37 = and i32 %31, %0
  %38 = or i32 %2, %1
  %39 = xor i32 %38, %0
  %40 = or i32 %37, %39
  %41 = or i32 %26, %1
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %0
  %44 = xor i32 %27, %28
  %45 = shl i32 %44, 1
  %46 = and i32 %2, %0
  %47 = xor i32 %1, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %46, %48
  %50 = or i32 %1, %0
  %51 = and i32 %9, %50
  %52 = or i32 %26, %48
  %53 = or i32 %2, %0
  %54 = and i32 %53, %47
  %55 = xor i32 %9, %0
  %56 = or i32 %21, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %26, %57
  %59 = and i32 %38, %20
  %60 = or i32 %37, %59
  %61 = xor i32 %2, %0
  %62 = xor i32 %61, -1
  %63 = and i32 %62, %35
  %64 = or i32 %21, %2
  %65 = and i32 %64, %0
  %66 = or i32 %23, %65
  %67 = xor i32 %38, -1
  %68 = or i32 %8, %67
  %69 = and i32 %9, %20
  %70 = or i32 %62, %48
  %71 = shl i32 %70, 1
  %72 = xor i32 %37, -1
  %73 = xor i32 %39, %72
  %74 = xor i32 %46, %1
  %75 = xor i32 %59, %72
  %76 = xor i32 %46, -1
  %77 = and i32 %47, %76
  %78 = and i32 %62, %48
  %79 = shl i32 %78, 2
  %80 = xor i32 %53, -1
  %81 = or i32 %8, %80
  %82 = and i32 %56, %26
  %83 = or i32 %46, %67
  %84 = xor i32 %31, -1
  %85 = and i32 %84, %20
  %86 = and i32 %61, %48
  %87 = and i32 %26, %0
  %88 = xor i32 %87, -1
  %89 = and i32 %88, %1
  %90 = and i32 %26, %35
  %91 = and i32 %48, %2
  %92 = xor i32 %57, %2
  %93 = and i32 %26, %1
  %94 = xor i32 %93, -1
  %95 = or i32 %94, %0
  %96 = xor i32 %50, -1
  %97 = or i32 %46, %96
  %98 = or i32 %57, %2
  %99 = or i32 %61, %34
  %100 = xor i32 %46, %94
  %101 = xor i32 %8, -1
  %102 = or i32 %93, %20
  %103 = or i32 %9, %34
  %104 = shl i32 %103, 1
  %105 = and i32 %84, %0
  %106 = and i32 %76, %21
  %107 = and i32 %53, %1
  %108 = shl i32 %107, 1
  %109 = xor i32 %69, %72
  %110 = and i32 %88, %48
  %111 = or i32 %26, %0
  %112 = xor i32 %111, -1
  %113 = or i32 %47, %26
  %114 = or i32 %87, %42
  %115 = and i32 %41, %20
  %116 = shl i32 %115, 1
  %117 = xor i32 %34, %84
  %118 = shl i32 %117, 1
  %119 = or i32 %62, %1
  %120 = or i32 %8, %26
  %121 = xor i32 %67, %0
  %122 = and i32 %10, %20
  %123 = xor i32 %111, %8
  %124 = and i32 %10, %35
  %125 = shl i32 %124, 1
  %126 = or i32 %46, %57
  %127 = or i32 %31, %34
  %128 = and i32 %41, %0
  %129 = and i32 %94, %0
  %130 = xor i32 %42, %0
  %131 = shl i32 %130, 1
  %132 = or i32 %34, %26
  %133 = shl i32 %132, 1
  %134 = or i32 %26, %96
  %135 = and i32 %9, %35
  %136 = and i32 %111, %48
  %137 = and i32 %31, %20
  %138 = and i32 %9, %0
  %139 = xor i32 %137, -1
  %140 = xor i32 %138, %139
  %141 = and i32 %35, %2
  %142 = and i32 %47, %88
  %143 = or i32 %67, %20
  %144 = and i32 %50, %2
  %145 = and i32 %56, %62
  %146 = shl i32 %145, 1
  %147 = or i32 %38, %20
  %148 = xor i32 %88, %1
  %149 = xor i32 %55, -1
  %150 = or i32 %37, %149
  %151 = or i32 %10, %96
  %152 = xor i32 %87, %41
  %153 = xor i32 %41, %8
  %154 = or i32 %87, %1
  %155 = or i32 %96, %2
  %156 = add i32 %31, 1
  %157 = and i32 %56, %2
  %158 = and i32 %88, %21
  %159 = shl i32 %61, 2
  %160 = or i32 %8, %62
  %161 = xor i32 %112, %1
  %162 = or i32 %10, %57
  %163 = xor i32 %8, %2
  %164 = or i32 %137, %138
  %165 = xor i32 %87, %84
  %166 = or i32 %31, %20
  %167 = shl i32 %166, 1
  %168 = or i32 %46, %1
  %169 = xor i32 %53, %8
  %170 = xor i32 %94, %0
  %171 = shl i32 %170, 1
  %172 = and i32 %56, %10
  %173 = and i32 %10, %0
  %174 = and i32 %61, %101
  %175 = xor i32 %38, %8
  %176 = and i32 %9, %56
  %177 = shl i32 %176, 1
  %178 = xor i32 %50, %2
  %179 = or i32 %10, %0
  %180 = xor i32 %41, %0
  %181 = or i32 %93, %0
  %182 = or i32 %42, %20
  %183 = and i32 %61, %47
  %184 = and i32 %38, %0
  %185 = or i32 %137, %184
  %186 = or i32 %27, %55
  %187 = or i32 %61, %47
  %188 = and i32 %61, %50
  %189 = or i32 %80, %1
  %190 = xor i32 %46, %56
  %191 = and i32 %47, %2
  %192 = or i32 %8, %2
  %193 = and i32 %111, %47
  %194 = or i32 %80, %48
  %195 = xor i32 %34, %94
  %196 = or i32 %87, %48
  %197 = or i32 %112, %21
  %198 = shl i32 %197, 1
  %199 = and i32 %47, %62
  %200 = or i32 %112, %48
  %201 = or i32 %61, %48
  %202 = or i32 %93, %34
  %203 = or i32 %46, %21
  %204 = or i32 %46, %93
  %205 = or i32 %31, %0
  %206 = and i32 %53, %48
  %207 = and i32 %111, %1
  %208 = xor i32 %93, %0
  %209 = or i32 %47, %112
  %210 = or i32 %84, %20
  %211 = and i32 %61, %56
  %212 = shl i32 %80, 1
  %213 = xor i32 %80, %1
  %214 = xor i32 %64, %0
  %215 = xor i32 %27, -1
  %216 = xor i32 %214, %215
  %217 = xor i32 %184, %139
  %218 = shl i32 %67, 1
  %219 = and i32 %76, %48
  %220 = or i32 %37, %69
  %221 = or i32 %47, %62
  %222 = xor i32 %56, %2
  %223 = and i32 %50, %62
  %224 = or i32 %48, %2
  %225 = shl i32 %224, 1
  %226 = or i32 %41, %0
  %227 = and i32 %61, %21
  %228 = and i32 %64, %20
  %229 = or i32 %27, %228
  %230 = shl i32 %229, 1
  %231 = xor i32 %228, %215
  %232 = or i32 %61, %8
  %233 = and i32 %94, %20
  %234 = and i32 %9, %101
  %235 = and i32 %76, %1
  %236 = or i32 %34, %2
  %237 = or i32 %38, %0
  %238 = or i32 %62, %21
  %239 = xor i32 %96, %2
  %240 = and i32 %10, %101
  %241 = shl i32 %240, 2
  %242 = or i32 %62, %96
  %243 = or i32 %27, %214
  %244 = and i32 %101, %2
  %245 = shl i32 %244, 2
  %246 = or i32 %9, %57
  %247 = shl i32 %246, 1
  %248 = or i32 %84, %0
  %249 = or i32 %46, %47
  %250 = or i32 %87, %47
  %251 = and i32 %26, %101
  %252 = or i32 %47, %80
  %253 = and i32 %62, %1
  %254 = or i32 %112, %1
  %255 = or i32 %47, %2
  %256 = or i32 %9, %8
  %257 = or i32 %62, %57
  %258 = or i32 %87, %21
  %259 = xor i32 %27, %149
  %260 = or i32 %80, %21
  %261 = and i32 %50, %26
  %262 = and i32 %61, %35
  %263 = and i32 %62, %101
  %264 = xor i32 %111, %1
  %265 = xor i32 %46, %38
  %266 = shl i32 %265, 1
  %267 = or i32 %61, %96
  %268 = and i32 %47, %26
  %269 = and i32 %111, %21
  %270 = and i32 %50, %10
  %271 = shl i32 %28, 1
  %272 = xor i32 %37, %55
  %273 = or i32 %87, %31
  %274 = or i32 %8, %42
  %275 = or i32 %67, %0
  %276 = and i32 %61, %1
  %277 = or i32 %61, %21
  %278 = or i32 %8, %112
  %279 = and i32 %26, %48
  %280 = or i32 %34, %62
  %281 = or i32 %41, %20
  %282 = xor i32 %10, %0
  %283 = or i32 %61, %57
  %284 = and i32 %67, %20
  %285 = mul i32 %284, 20
  %286 = and i32 %93, %20
  %287 = and i32 %67, %0
  %288 = and i32 %93, %0
  %289 = mul i32 %288, 9
  %290 = and i32 %42, %20
  %291 = mul i32 %290, 25
  %292 = mul i32 %137, 17
  %293 = and i32 %42, %0
  %294 = mul i32 %293, 21
  %295 = add i32 %34, %26
  %296 = add i32 %295, %279
  %297 = add i32 %296, %88
  %298 = add i32 %297, %76
  %299 = add i32 %298, %62
  %300 = add i32 %299, %10
  %301 = add i32 %300, %92
  %302 = add i32 %301, %42
  %303 = add i32 %302, %273
  %304 = add i32 %303, %196
  %305 = add i32 %304, %195
  %306 = add i32 %305, %188
  %307 = add i32 %306, %99
  %308 = add i32 %307, %95
  %309 = add i32 %308, %164
  %310 = add i32 %309, %272
  %311 = add i32 %310, %40
  %312 = add i32 %311, %25
  %313 = shl i32 %312, 1
  %314 = sub i32 %37, %191
  %315 = add i32 %314, %237
  %316 = sub i32 %315, %158
  %317 = add i32 %316, %14
  %318 = sub i32 %317, %19
  %319 = mul i32 %318, 5
  %320 = add i32 %184, %135
  %321 = sub i32 %320, %123
  %322 = sub i32 %321, %106
  %323 = sub i32 %322, %83
  %324 = mul i32 %323, 3
  %325 = shl i32 %0, 1
  %326 = add i32 %325, 3
  %327 = add i32 %326, %35
  %328 = add i32 %327, %57
  %329 = add i32 %328, %101
  %330 = sub i32 %329, %56
  %331 = add i32 %330, %2
  %332 = sub i32 %331, %8
  %333 = sub i32 %332, %3
  %334 = add i32 %333, %36
  %335 = sub i32 %334, %52
  %336 = sub i32 %335, %58
  %337 = sub i32 %336, %38
  %338 = sub i32 %337, %82
  %339 = add i32 %338, %90
  %340 = sub i32 %339, %46
  %341 = add i32 %340, %91
  %342 = sub i32 %341, %53
  %343 = sub i32 %342, %98
  %344 = add i32 %343, %113
  %345 = sub i32 %344, %120
  %346 = sub i32 %345, %9
  %347 = add i32 %346, %134
  %348 = sub i32 %347, %141
  %349 = sub i32 %348, %144
  %350 = sub i32 %349, %155
  %351 = add i32 %350, %156
  %352 = add i32 %351, %157
  %353 = sub i32 %352, %163
  %354 = sub i32 %353, %93
  %355 = add i32 %354, %178
  %356 = sub i32 %355, %192
  %357 = add i32 %356, %87
  %358 = sub i32 %357, %222
  %359 = add i32 %358, %31
  %360 = sub i32 %359, %236
  %361 = sub i32 %360, %239
  %362 = sub i32 %361, %251
  %363 = add i32 %362, %255
  %364 = add i32 %363, %41
  %365 = add i32 %364, %261
  %366 = sub i32 %365, %268
  %367 = add i32 %366, %43
  %368 = add i32 %367, %49
  %369 = add i32 %368, %51
  %370 = add i32 %369, %54
  %371 = add i32 %370, %55
  %372 = add i32 %371, %63
  %373 = add i32 %372, %68
  %374 = add i32 %373, %69
  %375 = add i32 %374, %74
  %376 = add i32 %375, %77
  %377 = add i32 %376, %81
  %378 = sub i32 %377, %85
  %379 = sub i32 %378, %86
  %380 = sub i32 %379, %89
  %381 = add i32 %380, %97
  %382 = add i32 %381, %100
  %383 = add i32 %382, %102
  %384 = sub i32 %383, %105
  %385 = sub i32 %384, %110
  %386 = add i32 %385, %114
  %387 = sub i32 %386, %119
  %388 = add i32 %387, %121
  %389 = add i32 %388, %122
  %390 = sub i32 %389, %126
  %391 = sub i32 %390, %127
  %392 = sub i32 %391, %128
  %393 = sub i32 %392, %129
  %394 = sub i32 %393, %133
  %395 = sub i32 %394, %135
  %396 = add i32 %395, %136
  %397 = add i32 %396, %142
  %398 = sub i32 %397, %143
  %399 = add i32 %398, %147
  %400 = sub i32 %399, %148
  %401 = add i32 %400, %151
  %402 = add i32 %401, %138
  %403 = add i32 %402, %152
  %404 = add i32 %403, %153
  %405 = sub i32 %404, %154
  %406 = sub i32 %405, %159
  %407 = sub i32 %406, %160
  %408 = sub i32 %407, %161
  %409 = add i32 %408, %162
  %410 = sub i32 %409, %165
  %411 = add i32 %410, %168
  %412 = sub i32 %411, %169
  %413 = sub i32 %412, %172
  %414 = add i32 %413, %173
  %415 = add i32 %414, %174
  %416 = add i32 %415, %175
  %417 = sub i32 %416, %179
  %418 = add i32 %417, %180
  %419 = add i32 %418, %181
  %420 = sub i32 %419, %182
  %421 = add i32 %420, %183
  %422 = add i32 %421, %187
  %423 = add i32 %422, %189
  %424 = add i32 %423, %190
  %425 = add i32 %424, %193
  %426 = sub i32 %425, %194
  %427 = sub i32 %426, %199
  %428 = sub i32 %427, %200
  %429 = sub i32 %428, %201
  %430 = sub i32 %429, %202
  %431 = add i32 %430, %203
  %432 = add i32 %431, %204
  %433 = add i32 %432, %205
  %434 = sub i32 %433, %206
  %435 = sub i32 %434, %207
  %436 = sub i32 %435, %208
  %437 = add i32 %436, %209
  %438 = add i32 %437, %210
  %439 = sub i32 %438, %211
  %440 = sub i32 %439, %212
  %441 = sub i32 %440, %213
  %442 = sub i32 %441, %218
  %443 = sub i32 %442, %219
  %444 = sub i32 %443, %221
  %445 = sub i32 %444, %223
  %446 = sub i32 %445, %225
  %447 = add i32 %446, %226
  %448 = add i32 %447, %227
  %449 = sub i32 %448, %232
  %450 = add i32 %449, %233
  %451 = sub i32 %450, %234
  %452 = sub i32 %451, %235
  %453 = sub i32 %452, %59
  %454 = add i32 %453, %238
  %455 = sub i32 %454, %242
  %456 = sub i32 %455, %245
  %457 = add i32 %456, %248
  %458 = add i32 %457, %24
  %459 = sub i32 %458, %249
  %460 = add i32 %459, %250
  %461 = sub i32 %460, %252
  %462 = add i32 %461, %253
  %463 = add i32 %462, %254
  %464 = sub i32 %463, %256
  %465 = sub i32 %464, %257
  %466 = add i32 %465, %258
  %467 = sub i32 %466, %260
  %468 = sub i32 %467, %262
  %469 = add i32 %468, %263
  %470 = add i32 %469, %264
  %471 = add i32 %470, %267
  %472 = sub i32 %471, %269
  %473 = sub i32 %472, %270
  %474 = sub i32 %473, %274
  %475 = sub i32 %474, %275
  %476 = sub i32 %475, %39
  %477 = add i32 %476, %276
  %478 = add i32 %477, %277
  %479 = sub i32 %478, %278
  %480 = add i32 %479, %280
  %481 = add i32 %480, %281
  %482 = add i32 %481, %282
  %483 = sub i32 %482, %283
  %484 = add i32 %483, %286
  %485 = add i32 %484, %287
  %486 = sub i32 %485, %30
  %487 = sub i32 %486, %33
  %488 = sub i32 %487, %60
  %489 = add i32 %488, %66
  %490 = sub i32 %489, %71
  %491 = sub i32 %490, %73
  %492 = add i32 %491, %75
  %493 = add i32 %492, %79
  %494 = sub i32 %493, %104
  %495 = sub i32 %494, %108
  %496 = sub i32 %495, %109
  %497 = sub i32 %496, %116
  %498 = sub i32 %497, %118
  %499 = sub i32 %498, %125
  %500 = sub i32 %499, %131
  %501 = add i32 %500, %140
  %502 = sub i32 %501, %146
  %503 = sub i32 %502, %150
  %504 = sub i32 %503, %167
  %505 = sub i32 %504, %171
  %506 = sub i32 %505, %177
  %507 = sub i32 %506, %185
  %508 = sub i32 %507, %186
  %509 = sub i32 %508, %198
  %510 = add i32 %509, %216
  %511 = sub i32 %510, %217
  %512 = sub i32 %511, %220
  %513 = sub i32 %512, %231
  %514 = sub i32 %513, %241
  %515 = sub i32 %514, %243
  %516 = sub i32 %515, %247
  %517 = sub i32 %516, %259
  %518 = sub i32 %517, %266
  %519 = sub i32 %518, %271
  %520 = add i32 %519, %285
  %521 = add i32 %520, %289
  %522 = add i32 %521, %291
  %523 = add i32 %522, %292
  %524 = add i32 %523, %294
  %525 = add i32 %524, %18
  %526 = sub i32 %525, %45
  %527 = sub i32 %526, %230
  %528 = sub i32 %527, %16
  %529 = add i32 %528, %324
  %530 = add i32 %529, %319
  %531 = add i32 %530, %313
  %532 = icmp eq i32 %12, %531
  %533 = select i1 %532, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %534 = tail call i32 @puts(i8* nonnull dereferenceable(1) %533)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
