; ModuleID = '../.././c_source_file/0509_path_condition_crackme.c'
source_filename = "../.././c_source_file/0509_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %4, %3
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = and i32 %9, %1
  %11 = add i32 %6, %10
  %12 = xor i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = shl i32 %13, 1
  %15 = sub i32 %14, %11
  %16 = xor i32 %4, -1
  %17 = or i32 %16, %3
  %18 = and i32 %16, %3
  %19 = xor i32 %4, %3
  %20 = or i32 %4, %3
  %21 = xor i32 %20, -1
  %22 = xor i32 %17, -1
  %23 = and i32 %4, %3
  %24 = and i32 %7, %1
  %25 = xor i32 %24, -1
  %26 = and i32 %25, %0
  %27 = or i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %1
  %30 = or i32 %29, %28
  %31 = and i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %32, %1
  %34 = or i32 %29, %0
  %35 = and i32 %2, %1
  %36 = and i32 %35, %0
  %37 = or i32 %2, %1
  %38 = xor i32 %37, %0
  %39 = or i32 %36, %38
  %40 = xor i32 %1, -1
  %41 = and i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %29, -1
  %44 = and i32 %43, %42
  %45 = xor i32 %27, %2
  %46 = or i32 %40, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %12, %47
  %49 = xor i32 %46, %2
  %50 = or i32 %24, %0
  %51 = xor i32 %35, %0
  %52 = and i32 %40, %2
  %53 = and i32 %52, %0
  %54 = xor i32 %0, -1
  %55 = or i32 %40, %2
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %0
  %58 = xor i32 %53, %57
  %59 = or i32 %7, %0
  %60 = and i32 %59, %1
  %61 = and i32 %1, %0
  %62 = xor i32 %37, %61
  %63 = and i32 %52, %54
  %64 = and i32 %55, %0
  %65 = or i32 %63, %64
  %66 = or i32 %37, %0
  %67 = or i32 %2, %0
  %68 = xor i32 %67, -1
  %69 = xor i32 %1, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %68, %70
  %72 = and i32 %37, %0
  %73 = or i32 %12, %69
  %74 = or i32 %41, %7
  %75 = xor i32 %67, %1
  %76 = and i32 %59, %70
  %77 = and i32 %37, %54
  %78 = xor i32 %77, 2147483647
  %79 = xor i32 %78, %36
  %80 = and i32 %46, %7
  %81 = or i32 %7, %1
  %82 = and i32 %81, %0
  %83 = shl i32 %82, 1
  %84 = or i32 %61, %13
  %85 = or i32 %35, %54
  %86 = and i32 %35, %54
  %87 = or i32 %86, %72
  %88 = shl i32 %87, 1
  %89 = xor i32 %59, -1
  %90 = or i32 %89, %40
  %91 = shl i32 %31, 1
  %92 = or i32 %70, %2
  %93 = shl i32 %92, 1
  %94 = or i32 %41, %43
  %95 = shl i32 %94, 1
  %96 = or i32 %29, %54
  %97 = xor i32 %63, %96
  %98 = shl i32 %97, 2
  %99 = xor i32 %31, %37
  %100 = or i32 %43, %47
  %101 = xor i32 %37, -1
  %102 = or i32 %101, %0
  %103 = xor i32 %35, -1
  %104 = or i32 %103, %0
  %105 = shl i32 %104, 1
  %106 = xor i32 %9, %1
  %107 = xor i32 %25, %0
  %108 = or i32 %12, %28
  %109 = or i32 %36, %77
  %110 = and i32 %29, %54
  %111 = xor i32 %8, %81
  %112 = and i32 %46, %43
  %113 = shl i32 %103, 1
  %114 = xor i32 %31, %27
  %115 = or i32 %81, %0
  %116 = shl i32 %2, 1
  %117 = shl i32 %43, 1
  %118 = add i32 %37, 1
  %119 = or i32 %35, %41
  %120 = or i32 %31, %1
  %121 = shl i32 %120, 1
  %122 = xor i32 %86, -1
  %123 = xor i32 %72, %122
  %124 = or i32 %7, %47
  %125 = or i32 %31, %40
  %126 = or i32 %12, %41
  %127 = and i32 %13, %70
  %128 = or i32 %12, %61
  %129 = add i32 %27, 1
  %130 = xor i32 %103, %0
  %131 = and i32 %46, %13
  %132 = shl i32 %131, 1
  %133 = or i32 %7, %28
  %134 = and i32 %12, %69
  %135 = and i32 %103, %0
  %136 = or i32 %13, %28
  %137 = xor i32 %61, %2
  %138 = xor i32 %64, 2147483647
  %139 = xor i32 %138, %63
  %140 = and i32 %69, %2
  %141 = xor i32 %67, %61
  %142 = and i32 %32, %40
  %143 = and i32 %70, %2
  %144 = and i32 %12, %42
  %145 = shl i32 %7, 1
  %146 = and i32 %67, %1
  %147 = xor i32 %55, %0
  %148 = xor i32 %147, 2147483647
  %149 = xor i32 %148, %53
  %150 = or i32 %43, %0
  %151 = and i32 %43, %0
  %152 = or i32 %31, %47
  %153 = and i32 %29, %42
  %154 = xor i32 %89, %1
  %155 = add i32 %67, 1
  %156 = xor i32 %36, -1
  %157 = xor i32 %110, %156
  %158 = or i32 %69, %68
  %159 = and i32 %29, %0
  %160 = xor i32 %159, %122
  %161 = or i32 %101, %54
  %162 = or i32 %43, %54
  %163 = xor i32 %42, %2
  %164 = and i32 %12, %27
  %165 = or i32 %53, %147
  %166 = or i32 %12, %40
  %167 = and i32 %67, %70
  %168 = or i32 %61, %89
  %169 = or i32 %31, %24
  %170 = or i32 %69, %2
  %171 = or i32 %69, %7
  %172 = and i32 %103, %54
  %173 = xor i32 %41, %2
  %174 = or i32 %31, %70
  %175 = and i32 %12, %1
  %176 = or i32 %81, %54
  %177 = shl i32 %176, 1
  %178 = xor i32 %47, %2
  %179 = xor i32 %81, -1
  %180 = or i32 %8, %179
  %181 = shl i32 %54, 1
  %182 = and i32 %59, %69
  %183 = xor i32 %61, -1
  %184 = and i32 %183, %2
  %185 = xor i32 %31, %25
  %186 = and i32 %67, %40
  %187 = or i32 %89, %1
  %188 = and i32 %43, %54
  %189 = xor i32 %8, %103
  %190 = shl i32 %189, 2
  %191 = or i32 %61, %7
  %192 = or i32 %37, %54
  %193 = and i32 %32, %1
  %194 = or i32 %86, %159
  %195 = and i32 %12, %183
  %196 = or i32 %13, %70
  %197 = or i32 %29, %47
  %198 = xor i32 %29, %0
  %199 = or i32 %61, %101
  %200 = or i32 %89, %70
  %201 = and i32 %12, %46
  %202 = or i32 %8, %35
  %203 = and i32 %43, %183
  %204 = or i32 %28, %2
  %205 = shl i32 %204, 1
  %206 = or i32 %24, %41
  %207 = and i32 %7, %183
  %208 = xor i32 %59, %1
  %209 = shl i32 %208, 1
  %210 = or i32 %25, %54
  %211 = or i32 %13, %40
  %212 = and i32 %29, %27
  %213 = and i32 %81, %54
  %214 = xor i32 %59, %61
  %215 = and i32 %27, %43
  %216 = shl i32 %215, 1
  %217 = and i32 %67, %69
  %218 = shl i32 %217, 1
  %219 = and i32 %27, %13
  %220 = xor i32 %31, %1
  %221 = xor i32 %183, %2
  %222 = and i32 %27, %2
  %223 = or i32 %69, %13
  %224 = and i32 %42, %2
  %225 = or i32 %179, %54
  %226 = and i32 %9, %70
  %227 = or i32 %31, %69
  %228 = xor i32 %38, %156
  %229 = and i32 %13, %183
  %230 = shl i32 %229, 1
  %231 = and i32 %69, %9
  %232 = or i32 %61, %179
  %233 = xor i32 %41, %103
  %234 = xor i32 %198, -1
  %235 = or i32 %36, %234
  %236 = xor i32 %8, %1
  %237 = shl i32 %236, 1
  %238 = and i32 %59, %40
  %239 = xor i32 %179, %0
  %240 = or i32 %29, %41
  %241 = shl i32 %240, 1
  %242 = xor i32 %81, %0
  %243 = xor i32 %28, %2
  %244 = or i32 %8, %40
  %245 = and i32 %29, %183
  %246 = or i32 %69, %89
  %247 = and i32 %12, %70
  %248 = and i32 %12, %40
  %249 = or i32 %61, %68
  %250 = or i32 %68, %40
  %251 = or i32 %68, %1
  %252 = and i32 %69, %7
  %253 = or i32 %8, %1
  %254 = xor i32 %101, %0
  %255 = xor i32 %24, %0
  %256 = xor i32 %96, -1
  %257 = or i32 %63, %256
  %258 = or i32 %53, %198
  %259 = and i32 %46, %2
  %260 = shl i32 %96, 1
  %261 = and i32 %101, %54
  %262 = and i32 %24, %54
  %263 = and i32 %101, %0
  %264 = and i32 %24, %0
  %265 = mul i32 %264, 11
  %266 = and i32 %179, %54
  %267 = mul i32 %266, 14
  %268 = shl i32 %86, 1
  %269 = and i32 %179, %0
  %270 = mul i32 %269, 28
  %271 = add i32 %191, %183
  %272 = add i32 %271, %36
  %273 = sub i32 %272, %159
  %274 = add i32 %273, %26
  %275 = sub i32 %274, %258
  %276 = mul i32 %275, 5
  %277 = add i32 %261, %251
  %278 = add i32 %277, %134
  %279 = add i32 %278, %85
  %280 = shl i32 %279, 2
  %281 = add i32 %74, %61
  %282 = sub i32 %281, %107
  %283 = sub i32 %282, %228
  %284 = mul i32 %283, 3
  %285 = sub i32 %262, %263
  %286 = mul i32 %285, 6
  %287 = sub i32 -2, %41
  %288 = add i32 %287, %143
  %289 = add i32 %288, %49
  %290 = add i32 %289, %24
  %291 = add i32 %290, %185
  %292 = add i32 %291, %182
  %293 = add i32 %292, %150
  %294 = add i32 %293, %102
  %295 = add i32 %294, %18
  %296 = add i32 %295, %139
  %297 = add i32 %296, %149
  %298 = add i32 %297, %79
  %299 = shl i32 %298, 1
  %300 = add i32 %1, %0
  %301 = add i32 %300, %181
  %302 = sub i32 %129, %301
  %303 = sub i32 %302, %3
  %304 = sub i32 %303, %45
  %305 = sub i32 %304, %29
  %306 = add i32 %305, %37
  %307 = add i32 %306, %8
  %308 = sub i32 %307, %80
  %309 = add i32 %308, %25
  %310 = sub i32 %309, %116
  %311 = add i32 %310, %118
  %312 = add i32 %311, %124
  %313 = sub i32 %312, %35
  %314 = sub i32 %313, %133
  %315 = add i32 %314, %137
  %316 = add i32 %315, %140
  %317 = sub i32 %316, %145
  %318 = add i32 %317, %155
  %319 = sub i32 %318, %163
  %320 = sub i32 %319, %67
  %321 = add i32 %320, %32
  %322 = sub i32 %321, %170
  %323 = add i32 %322, %171
  %324 = sub i32 %323, %173
  %325 = add i32 %324, %178
  %326 = add i32 %325, %179
  %327 = sub i32 %326, %184
  %328 = add i32 %327, %207
  %329 = add i32 %328, %12
  %330 = add i32 %329, %221
  %331 = add i32 %330, %222
  %332 = sub i32 %331, %224
  %333 = add i32 %332, %243
  %334 = add i32 %333, %252
  %335 = sub i32 %334, %81
  %336 = add i32 %335, %259
  %337 = sub i32 %336, %4
  %338 = sub i32 %337, %30
  %339 = add i32 %338, %33
  %340 = add i32 %339, %34
  %341 = sub i32 %340, %44
  %342 = sub i32 %341, %48
  %343 = add i32 %342, %38
  %344 = sub i32 %343, %50
  %345 = sub i32 %344, %51
  %346 = sub i32 %345, %60
  %347 = sub i32 %346, %62
  %348 = sub i32 %347, %66
  %349 = sub i32 %348, %71
  %350 = sub i32 %349, %72
  %351 = add i32 %350, %73
  %352 = sub i32 %351, %75
  %353 = add i32 %352, %76
  %354 = sub i32 %353, %84
  %355 = add i32 %354, %90
  %356 = sub i32 %355, %91
  %357 = sub i32 %356, %93
  %358 = sub i32 %357, %99
  %359 = add i32 %358, %100
  %360 = add i32 %359, %106
  %361 = sub i32 %360, %108
  %362 = sub i32 %361, %110
  %363 = sub i32 %362, %111
  %364 = sub i32 %363, %112
  %365 = sub i32 %364, %113
  %366 = add i32 %365, %114
  %367 = sub i32 %366, %115
  %368 = sub i32 %367, %117
  %369 = sub i32 %368, %119
  %370 = add i32 %369, %125
  %371 = add i32 %370, %126
  %372 = add i32 %371, %127
  %373 = add i32 %372, %128
  %374 = sub i32 %373, %130
  %375 = add i32 %374, %135
  %376 = add i32 %375, %136
  %377 = add i32 %376, %141
  %378 = add i32 %377, %142
  %379 = add i32 %378, %144
  %380 = add i32 %379, %146
  %381 = sub i32 %380, %151
  %382 = add i32 %381, %152
  %383 = add i32 %382, %153
  %384 = sub i32 %383, %154
  %385 = add i32 %384, %158
  %386 = sub i32 %385, %161
  %387 = add i32 %386, %162
  %388 = sub i32 %387, %164
  %389 = sub i32 %388, %166
  %390 = sub i32 %389, %167
  %391 = sub i32 %390, %168
  %392 = sub i32 %391, %169
  %393 = sub i32 %392, %172
  %394 = sub i32 %393, %174
  %395 = add i32 %394, %175
  %396 = sub i32 %395, %180
  %397 = add i32 %396, %186
  %398 = add i32 %397, %187
  %399 = sub i32 %398, %188
  %400 = add i32 %399, %192
  %401 = sub i32 %400, %193
  %402 = sub i32 %401, %195
  %403 = add i32 %402, %196
  %404 = sub i32 %403, %197
  %405 = add i32 %404, %198
  %406 = sub i32 %405, %199
  %407 = add i32 %406, %200
  %408 = sub i32 %407, %201
  %409 = sub i32 %408, %202
  %410 = add i32 %409, %203
  %411 = sub i32 %410, %205
  %412 = sub i32 %411, %206
  %413 = add i32 %412, %210
  %414 = sub i32 %413, %211
  %415 = sub i32 %414, %212
  %416 = add i32 %415, %213
  %417 = add i32 %416, %214
  %418 = sub i32 %417, %219
  %419 = add i32 %418, %220
  %420 = add i32 %419, %223
  %421 = add i32 %420, %225
  %422 = sub i32 %421, %226
  %423 = sub i32 %422, %227
  %424 = add i32 %423, %231
  %425 = add i32 %424, %232
  %426 = sub i32 %425, %233
  %427 = add i32 %426, %238
  %428 = add i32 %427, %239
  %429 = sub i32 %428, %242
  %430 = sub i32 %429, %244
  %431 = add i32 %430, %245
  %432 = sub i32 %431, %246
  %433 = add i32 %432, %247
  %434 = sub i32 %433, %248
  %435 = add i32 %434, %249
  %436 = sub i32 %435, %250
  %437 = add i32 %436, %253
  %438 = sub i32 %437, %254
  %439 = sub i32 %438, %255
  %440 = sub i32 %439, %17
  %441 = sub i32 %440, %19
  %442 = add i32 %441, %21
  %443 = add i32 %442, %22
  %444 = add i32 %443, %23
  %445 = sub i32 %444, %39
  %446 = add i32 %445, %58
  %447 = sub i32 %446, %65
  %448 = sub i32 %447, %83
  %449 = sub i32 %448, %95
  %450 = sub i32 %449, %105
  %451 = add i32 %450, %109
  %452 = sub i32 %451, %121
  %453 = add i32 %452, %123
  %454 = sub i32 %453, %132
  %455 = sub i32 %454, %157
  %456 = sub i32 %455, %160
  %457 = add i32 %456, %165
  %458 = sub i32 %457, %177
  %459 = sub i32 %458, %190
  %460 = add i32 %459, %194
  %461 = sub i32 %460, %209
  %462 = sub i32 %461, %216
  %463 = sub i32 %462, %218
  %464 = sub i32 %463, %230
  %465 = add i32 %464, %235
  %466 = sub i32 %465, %237
  %467 = sub i32 %466, %241
  %468 = add i32 %467, %257
  %469 = sub i32 %468, %260
  %470 = add i32 %469, %265
  %471 = add i32 %470, %267
  %472 = sub i32 %471, %268
  %473 = add i32 %472, %270
  %474 = sub i32 %473, %88
  %475 = sub i32 %474, %98
  %476 = add i32 %475, %286
  %477 = add i32 %476, %280
  %478 = add i32 %477, %284
  %479 = add i32 %478, %276
  %480 = add i32 %479, %299
  %481 = icmp eq i32 %15, %480
  %482 = select i1 %481, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %483 = tail call i32 @puts(i8* nonnull dereferenceable(1) %482)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
