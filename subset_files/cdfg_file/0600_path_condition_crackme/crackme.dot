digraph "DFG for'crackme' function" {
	Node0x13dba90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x13dbb00[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x13dbbc0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x13dbc30[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x13dbca0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x13dbd10[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x13dbd80[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x13dbdf0[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0x13dbe60[shape=record, label="  %11 = mul i32 %10, -3"];
	Node0x13dbf00[shape=record, label="  %12 = shl i32 %4, 1"];
	Node0x13dbfa0[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x13dc010[shape=record, label="  %14 = sub i32 -2, %1"];
	Node0x13dc080[shape=record, label="  %15 = sub i32 %14, %5"];
	Node0x13dc0f0[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x13dc160[shape=record, label="  %17 = add i32 %16, %9"];
	Node0x13dc1d0[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0x13dc240[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x13dc2b0[shape=record, label="  %20 = sub i32 %19, %13"];
	Node0x13dc320[shape=record, label="  %21 = icmp eq i32 %4, %20"];
	Node0x137c268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x13dc7c0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x13dc810[shape=record, label="  ret void"];
	Node0x13dba90 -> Node0x13dbb00;
	Node0x13dbb00 -> Node0x13dbbc0;
	Node0x13dbbc0 -> Node0x13dbc30;
	Node0x13dbc30 -> Node0x13dbca0;
	Node0x13dbca0 -> Node0x13dbd10;
	Node0x13dbd10 -> Node0x13dbd80;
	Node0x13dbd80 -> Node0x13dbdf0;
	Node0x13dbdf0 -> Node0x13dbe60;
	Node0x13dbe60 -> Node0x13dbf00;
	Node0x13dbf00 -> Node0x13dbfa0;
	Node0x13dbfa0 -> Node0x13dc010;
	Node0x13dc010 -> Node0x13dc080;
	Node0x13dc080 -> Node0x13dc0f0;
	Node0x13dc0f0 -> Node0x13dc160;
	Node0x13dc160 -> Node0x13dc1d0;
	Node0x13dc1d0 -> Node0x13dc240;
	Node0x13dc240 -> Node0x13dc2b0;
	Node0x13dc2b0 -> Node0x13dc320;
	Node0x13dc320 -> Node0x137c268;
	Node0x137c268 -> Node0x13dc7c0;
	Node0x13dc7c0 -> Node0x13dc810;
edge [color=red]
	Node0x13dba90 -> Node0x13dbb00;
	Node0x13dba90 -> Node0x13dbc30;
	Node0x13dbc30 -> Node0x13dbca0;
	Node0x13dbd10 -> Node0x13dbd80;
	Node0x13dbbc0 -> Node0x13dbdf0;
	Node0x13dbdf0 -> Node0x13dbe60;
	Node0x13dbb00 -> Node0x13dbf00;
	Node0x13dbf00 -> Node0x13dbfa0;
	Node0x13dc010 -> Node0x13dc080;
	Node0x13dbbc0 -> Node0x13dc080;
	Node0x13dc080 -> Node0x13dc0f0;
	Node0x13dbca0 -> Node0x13dc0f0;
	Node0x13dc0f0 -> Node0x13dc160;
	Node0x13dbd80 -> Node0x13dc160;
	Node0x13dc160 -> Node0x13dc1d0;
	Node0x13dbc30 -> Node0x13dc1d0;
	Node0x13dc1d0 -> Node0x13dc240;
	Node0x13dbe60 -> Node0x13dc240;
	Node0x13dc240 -> Node0x13dc2b0;
	Node0x13dbfa0 -> Node0x13dc2b0;
	Node0x13dbb00 -> Node0x13dc320;
	Node0x13dc2b0 -> Node0x13dc320;
	Node0x13dc320 -> Node0x137c268;
	Node0x137c268 -> Node0x13dc7c0;
}
