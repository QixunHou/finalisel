digraph "DFG for'main' function" {
	Node0x1ef7338[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1ef73e8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1ef7478[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1ef78d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1ef79b8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1ef7ad8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1ef7d10[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1ef7dc8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1ef8d38[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1ef93c0[shape=record, label="  %8 = mul i32 %7, -2"];
	Node0x1ef9430[shape=record, label="  %9 = xor i32 %7, -1"];
	Node0x1ef94a0[shape=record, label="  %10 = or i32 %6, %9"];
	Node0x1ef9510[shape=record, label="  %11 = add i32 %7, %6"];
	Node0x1ef9580[shape=record, label="  %12 = sub i32 %10, %11"];
	Node0x1ef95f0[shape=record, label="  %13 = xor i32 %6, -1"];
	Node0x1ef9660[shape=record, label="  %14 = or i32 %7, %13"];
	Node0x1ef96d0[shape=record, label="  %15 = sub i32 %12, %14"];
	Node0x1ef9740[shape=record, label="  %16 = icmp eq i32 %8, %15"];
	Node0x1e989d8[shape=record, label="  %17 = select i1 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ef97d0[shape=record, label="  %18 = call i32 @puts(i8* nonnull dereferenceable(1) %17) #5"];
	Node0x1ef9a28[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1ef9b88[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1ef9c48[shape=record, label="  ret i32 0"];
	Node0x1ef7338 -> Node0x1ef73e8;
	Node0x1ef73e8 -> Node0x1ef7478;
	Node0x1ef7478 -> Node0x1ef78d8;
	Node0x1ef78d8 -> Node0x1ef79b8;
	Node0x1ef79b8 -> Node0x1ef7ad8;
	Node0x1ef7ad8 -> Node0x1ef7d10;
	Node0x1ef7d10 -> Node0x1ef7dc8;
	Node0x1ef7dc8 -> Node0x1ef8d38;
	Node0x1ef8d38 -> Node0x1ef93c0;
	Node0x1ef93c0 -> Node0x1ef9430;
	Node0x1ef9430 -> Node0x1ef94a0;
	Node0x1ef94a0 -> Node0x1ef9510;
	Node0x1ef9510 -> Node0x1ef9580;
	Node0x1ef9580 -> Node0x1ef95f0;
	Node0x1ef95f0 -> Node0x1ef9660;
	Node0x1ef9660 -> Node0x1ef96d0;
	Node0x1ef96d0 -> Node0x1ef9740;
	Node0x1ef9740 -> Node0x1e989d8;
	Node0x1e989d8 -> Node0x1ef97d0;
	Node0x1ef97d0 -> Node0x1ef9a28;
	Node0x1ef9a28 -> Node0x1ef9b88;
	Node0x1ef9b88 -> Node0x1ef9c48;
edge [color=red]
	Node0x1ef7338 -> Node0x1ef7478;
	Node0x1ef7478 -> Node0x1ef78d8;
	Node0x1ef73e8 -> Node0x1ef79b8;
	Node0x1ef79b8 -> Node0x1ef7ad8;
	Node0x1ef7338 -> Node0x1ef7d10;
	Node0x1ef73e8 -> Node0x1ef7d10;
	Node0x1ef7338 -> Node0x1ef7dc8;
	Node0x1ef73e8 -> Node0x1ef8d38;
	Node0x1ef8d38 -> Node0x1ef93c0;
	Node0x1ef8d38 -> Node0x1ef9430;
	Node0x1ef7dc8 -> Node0x1ef94a0;
	Node0x1ef9430 -> Node0x1ef94a0;
	Node0x1ef8d38 -> Node0x1ef9510;
	Node0x1ef7dc8 -> Node0x1ef9510;
	Node0x1ef94a0 -> Node0x1ef9580;
	Node0x1ef9510 -> Node0x1ef9580;
	Node0x1ef7dc8 -> Node0x1ef95f0;
	Node0x1ef8d38 -> Node0x1ef9660;
	Node0x1ef95f0 -> Node0x1ef9660;
	Node0x1ef9580 -> Node0x1ef96d0;
	Node0x1ef9660 -> Node0x1ef96d0;
	Node0x1ef93c0 -> Node0x1ef9740;
	Node0x1ef96d0 -> Node0x1ef9740;
	Node0x1ef9740 -> Node0x1e989d8;
	Node0x1e989d8 -> Node0x1ef97d0;
	Node0x1ef79b8 -> Node0x1ef9a28;
	Node0x1ef7478 -> Node0x1ef9b88;
}
