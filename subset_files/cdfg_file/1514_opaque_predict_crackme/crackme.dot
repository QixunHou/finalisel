digraph "DFG for'crackme' function" {
	Node0x1ef68b0[shape=record, label="  %3 = mul i32 %1, -2"];
	Node0x1ef6920[shape=record, label="  %4 = add i32 %1, %0"];
	Node0x1ef69e0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1ef6a50[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x1ef6ac0[shape=record, label="  %7 = sub i32 %6, %4"];
	Node0x1ef6b30[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1ef6ba0[shape=record, label="  %9 = or i32 %8, %1"];
	Node0x1ef6c10[shape=record, label="  %10 = sub i32 %7, %9"];
	Node0x1ef6c80[shape=record, label="  %11 = icmp eq i32 %3, %10"];
	Node0x1e97388[shape=record, label="  %12 = select i1 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ef7120[shape=record, label="  %13 = tail call i32 @puts(i8* nonnull dereferenceable(1) %12)"];
	Node0x1ef7170[shape=record, label="  ret void"];
	Node0x1ef68b0 -> Node0x1ef6920;
	Node0x1ef6920 -> Node0x1ef69e0;
	Node0x1ef69e0 -> Node0x1ef6a50;
	Node0x1ef6a50 -> Node0x1ef6ac0;
	Node0x1ef6ac0 -> Node0x1ef6b30;
	Node0x1ef6b30 -> Node0x1ef6ba0;
	Node0x1ef6ba0 -> Node0x1ef6c10;
	Node0x1ef6c10 -> Node0x1ef6c80;
	Node0x1ef6c80 -> Node0x1e97388;
	Node0x1e97388 -> Node0x1ef7120;
	Node0x1ef7120 -> Node0x1ef7170;
edge [color=red]
	Node0x1ef69e0 -> Node0x1ef6a50;
	Node0x1ef6a50 -> Node0x1ef6ac0;
	Node0x1ef6920 -> Node0x1ef6ac0;
	Node0x1ef6b30 -> Node0x1ef6ba0;
	Node0x1ef6ac0 -> Node0x1ef6c10;
	Node0x1ef6ba0 -> Node0x1ef6c10;
	Node0x1ef68b0 -> Node0x1ef6c80;
	Node0x1ef6c10 -> Node0x1ef6c80;
	Node0x1ef6c80 -> Node0x1e97388;
	Node0x1e97388 -> Node0x1ef7120;
}
