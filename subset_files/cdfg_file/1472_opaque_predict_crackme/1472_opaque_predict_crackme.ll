; ModuleID = '../.././c_source_file/1472_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1472_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %2
  %10 = and i32 %9, %7
  %11 = xor i32 %2, %1
  %12 = or i32 %11, %7
  %13 = xor i32 %12, -1
  %14 = or i32 %10, %13
  %15 = add i32 %0, 1
  %16 = add i32 %14, %15
  %17 = and i32 %5, %3
  %18 = xor i32 %4, -1
  %19 = xor i32 %17, %18
  %20 = add i32 %16, %19
  %21 = or i32 %5, %4
  %22 = xor i32 %21, 2147483647
  %23 = xor i32 %18, %3
  %24 = or i32 %22, %23
  %25 = shl i32 %24, 1
  %26 = sub i32 %20, %25
  %27 = and i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %28
  %32 = xor i32 %11, -1
  %33 = or i32 %32, %0
  %34 = xor i32 %2, -1
  %35 = and i32 %34, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %1, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %36, %38
  %40 = or i32 %8, %2
  %41 = and i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %10, %42
  %44 = and i32 %9, %0
  %45 = and i32 %40, %7
  %46 = xor i32 %44, -1
  %47 = xor i32 %45, %46
  %48 = or i32 %34, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %37, %49
  %51 = or i32 %2, %0
  %52 = and i32 %51, %1
  %53 = or i32 %2, %1
  %54 = xor i32 %53, %0
  %55 = or i32 %29, %8
  %56 = and i32 %2, %0
  %57 = and i32 %34, %1
  %58 = or i32 %56, %57
  %59 = or i32 %34, %1
  %60 = xor i32 %59, %27
  %61 = or i32 %8, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %56, %62
  %64 = and i32 %34, %28
  %65 = and i32 %2, %1
  %66 = xor i32 %65, -1
  %67 = xor i32 %66, %0
  %68 = or i32 %56, %37
  %69 = xor i32 %57, -1
  %70 = xor i32 %56, %69
  %71 = and i32 %51, %38
  %72 = and i32 %65, %7
  %73 = and i32 %11, %0
  %74 = or i32 %72, %73
  %75 = xor i32 %35, %66
  %76 = or i32 %66, %7
  %77 = and i32 %65, %0
  %78 = xor i32 %11, %0
  %79 = xor i32 %78, -1
  %80 = or i32 %77, %79
  %81 = or i32 %1, %0
  %82 = shl i32 %81, 1
  %83 = xor i32 %51, %27
  %84 = xor i32 %59, -1
  %85 = or i32 %27, %84
  %86 = or i32 %29, %62
  %87 = and i32 %34, %38
  %88 = xor i32 %28, %2
  %89 = xor i32 %56, %53
  %90 = xor i32 %81, -1
  %91 = shl i32 %90, 1
  %92 = and i32 %37, %34
  %93 = shl i32 %92, 1
  %94 = add i32 %59, 1
  %95 = and i32 %53, %0
  %96 = xor i32 %72, -1
  %97 = xor i32 %95, %96
  %98 = or i32 %29, %38
  %99 = xor i32 %51, -1
  %100 = or i32 %27, %99
  %101 = or i32 %69, %0
  %102 = xor i32 %53, -1
  %103 = xor i32 %102, %0
  %104 = and i32 %8, %0
  %105 = or i32 %11, %104
  %106 = and i32 %61, %34
  %107 = or i32 %99, %1
  %108 = shl i32 %107, 1
  %109 = xor i32 %104, -1
  %110 = and i32 %32, %109
  %111 = or i32 %32, %7
  %112 = or i32 %84, %0
  %113 = and i32 %66, %7
  %114 = or i32 %59, %0
  %115 = or i32 %66, %0
  %116 = or i32 %38, %2
  %117 = or i32 %56, %90
  %118 = or i32 %27, %34
  %119 = and i32 %66, %0
  %120 = or i32 %99, %8
  %121 = and i32 %29, %81
  %122 = shl i32 %121, 1
  %123 = or i32 %44, %78
  %124 = and i32 %11, %7
  %125 = xor i32 %57, %0
  %126 = and i32 %30, %8
  %127 = shl i32 %126, 1
  %128 = and i32 %29, %61
  %129 = xor i32 %104, %2
  %130 = or i32 %104, %30
  %131 = or i32 %29, %90
  %132 = or i32 %72, %95
  %133 = and i32 %48, %38
  %134 = xor i32 %40, %0
  %135 = xor i32 %134, %46
  %136 = or i32 %53, %7
  %137 = or i32 %29, %27
  %138 = or i32 %27, %32
  %139 = shl i32 %49, 1
  %140 = xor i32 %56, %81
  %141 = and i32 %37, %36
  %142 = or i32 %35, %37
  %143 = and i32 %30, %38
  %144 = and i32 %61, %2
  %145 = xor i32 %59, %0
  %146 = or i32 %104, %34
  %147 = or i32 %65, %7
  %148 = or i32 %49, %38
  %149 = and i32 %30, %1
  %150 = shl i32 %59, 1
  %151 = xor i32 %56, -1
  %152 = xor i32 %151, %1
  %153 = shl i32 %152, 1
  %154 = xor i32 %56, %1
  %155 = xor i32 %109, %2
  %156 = shl i32 %155, 1
  %157 = and i32 %37, %2
  %158 = xor i32 %35, %1
  %159 = shl i32 %158, 1
  %160 = xor i32 %10, %12
  %161 = or i32 %90, %2
  %162 = xor i32 %65, %0
  %163 = xor i32 %104, %66
  %164 = or i32 %30, %1
  %165 = or i32 %30, %90
  %166 = shl i32 %165, 1
  %167 = and i32 %30, %109
  %168 = xor i32 %69, %0
  %169 = and i32 %48, %8
  %170 = or i32 %27, %2
  %171 = or i32 %57, %0
  %172 = or i32 %11, %0
  %173 = xor i32 %172, 2147483647
  %174 = or i32 %173, %44
  %175 = and i32 %37, %30
  %176 = or i32 %30, %62
  %177 = shl i32 %48, 1
  %178 = or i32 %37, %2
  %179 = xor i32 %77, -1
  %180 = xor i32 %54, %179
  %181 = xor i32 %84, %0
  %182 = or i32 %69, %7
  %183 = xor i32 %77, %78
  %184 = and i32 %32, %28
  %185 = xor i32 %56, %61
  %186 = xor i32 %44, %172
  %187 = xor i32 %124, %179
  %188 = and i32 %81, %2
  %189 = xor i32 %81, %2
  %190 = and i32 %11, %28
  %191 = or i32 %49, %8
  %192 = and i32 %48, %1
  %193 = shl i32 %172, 1
  %194 = or i32 %30, %8
  %195 = or i32 %77, %124
  %196 = and i32 %151, %1
  %197 = shl i32 %196, 1
  %198 = or i32 %35, %8
  %199 = or i32 %99, %38
  %200 = shl i32 %199, 1
  %201 = and i32 %34, %109
  %202 = or i32 %37, %34
  %203 = or i32 %49, %1
  %204 = and i32 %81, %32
  %205 = and i32 %53, %7
  %206 = xor i32 %205, %179
  %207 = or i32 %27, %49
  %208 = and i32 %29, %38
  %209 = or i32 %102, %7
  %210 = add i32 %61, 1
  %211 = and i32 %109, %2
  %212 = and i32 %37, %151
  %213 = and i32 %69, %0
  %214 = and i32 %28, %2
  %215 = shl i32 %214, 1
  %216 = or i32 %32, %62
  %217 = and i32 %29, %37
  %218 = shl i32 %217, 1
  %219 = or i32 %53, %0
  %220 = or i32 %102, %0
  %221 = or i32 %84, %7
  %222 = or i32 %57, %104
  %223 = shl i32 %222, 1
  %224 = and i32 %29, %8
  %225 = shl i32 %224, 1
  %226 = and i32 %36, %1
  %227 = or i32 %34, %38
  %228 = and i32 %38, %2
  %229 = and i32 %51, %8
  %230 = or i32 %35, %65
  %231 = or i32 %34, %90
  %232 = shl i32 %231, 1
  %233 = and i32 %11, %81
  %234 = xor i32 %32, %0
  %235 = or i32 %57, %7
  %236 = shl i32 %235, 1
  %237 = and i32 %81, %30
  %238 = or i32 %35, %38
  %239 = and i32 %81, %34
  %240 = or i32 %77, %205
  %241 = and i32 %59, %7
  %242 = xor i32 %51, %1
  %243 = xor i32 %36, %1
  %244 = or i32 %27, %30
  %245 = or i32 %59, %7
  %246 = and i32 %32, %0
  %247 = and i32 %29, %1
  %248 = and i32 %11, %109
  %249 = xor i32 %99, %1
  %250 = xor i32 %73, %96
  %251 = and i32 %61, %30
  %252 = or i32 %56, %1
  %253 = or i32 %29, %37
  %254 = or i32 %77, %54
  %255 = or i32 %44, %45
  %256 = or i32 %10, %41
  %257 = or i32 %29, %1
  %258 = add i32 %56, 1
  %259 = and i32 %36, %8
  %260 = or i32 %104, %32
  %261 = or i32 %104, %2
  %262 = or i32 %32, %90
  %263 = and i32 %32, %7
  %264 = xor i32 %44, %79
  %265 = shl i32 %264, 1
  %266 = or i32 %56, %38
  %267 = xor i32 %90, %2
  %268 = or i32 %37, %99
  %269 = and i32 %11, %61
  %270 = and i32 %48, %37
  %271 = shl i32 %270, 1
  %272 = or i32 %35, %1
  %273 = xor i32 %61, %2
  %274 = xor i32 %53, %27
  %275 = or i32 %35, %84
  %276 = or i32 %11, %27
  %277 = and i32 %69, %7
  %278 = and i32 %29, %109
  %279 = or i32 %29, %104
  %280 = and i32 %61, %32
  %281 = or i32 %56, %8
  %282 = xor i32 %62, %2
  %283 = or i32 %56, %102
  %284 = xor i32 %48, %1
  %285 = and i32 %51, %37
  %286 = xor i32 %104, %69
  %287 = or i32 %65, %104
  %288 = xor i32 %27, %2
  %289 = or i32 %30, %38
  %290 = xor i32 %48, %27
  %291 = or i32 %65, %0
  %292 = and i32 %151, %38
  %293 = shl i32 %292, 2
  %294 = and i32 %29, %28
  %295 = and i32 %151, %8
  %296 = or i32 %34, %62
  %297 = shl i32 %296, 1
  %298 = and i32 %59, %0
  %299 = or i32 %37, %30
  %300 = xor i32 %35, %59
  %301 = add i32 %65, 1
  %302 = or i32 %11, %90
  %303 = or i32 %27, %102
  %304 = or i32 %62, %2
  %305 = or i32 %44, %134
  %306 = xor i32 %49, %1
  %307 = and i32 %102, %7
  %308 = mul i32 %307, -13
  %309 = and i32 %57, %7
  %310 = mul i32 %309, -15
  %311 = and i32 %102, %0
  %312 = and i32 %57, %0
  %313 = and i32 %84, %7
  %314 = mul i32 %313, -27
  %315 = mul i32 %72, -11
  %316 = and i32 %84, %0
  %317 = mul i32 %316, -12
  %318 = mul i32 %77, -26
  %319 = and i32 %4, %3
  %320 = xor i32 %5, %3
  %321 = xor i32 %320, 2147483647
  %322 = or i32 %321, %319
  %323 = shl i32 %322, 1
  %324 = xor i32 %3, -1
  %325 = and i32 %324, %4
  %326 = or i32 %17, %325
  %327 = xor i32 %5, -1
  %328 = or i32 %327, %4
  %329 = xor i32 %328, %3
  %330 = and i32 %5, %4
  %331 = or i32 %330, %23
  %332 = and i32 %324, %5
  %333 = xor i32 %332, %4
  %334 = or i32 %5, %3
  %335 = xor i32 %334, %319
  %336 = and i32 %17, %4
  %337 = and i32 %320, %18
  %338 = or i32 %336, %337
  %339 = or i32 %324, %4
  %340 = and i32 %339, %327
  %341 = and i32 %327, %4
  %342 = or i32 %341, %332
  %343 = shl i32 %342, 1
  %344 = xor i32 %5, %4
  %345 = or i32 %344, %23
  %346 = xor i32 %325, %327
  %347 = or i32 %344, %3
  %348 = xor i32 %328, %319
  %349 = xor i32 %328, -1
  %350 = or i32 %349, %324
  %351 = and i32 %344, %324
  %352 = xor i32 %334, -1
  %353 = and i32 %352, %18
  %354 = mul i32 %353, -10
  %355 = and i32 %327, %3
  %356 = and i32 %355, %18
  %357 = shl i32 %356, 3
  %358 = and i32 %352, %4
  %359 = shl i32 %358, 1
  %360 = and i32 %355, %4
  %361 = and i32 %332, %18
  %362 = shl i32 %361, 1
  %363 = and i32 %17, %18
  %364 = and i32 %332, %4
  %365 = add i32 %38, %8
  %366 = add i32 %365, %288
  %367 = add i32 %366, %56
  %368 = add i32 %367, %57
  %369 = add i32 %368, %88
  %370 = add i32 %369, %64
  %371 = add i32 %370, %290
  %372 = add i32 %371, %278
  %373 = add i32 %372, %277
  %374 = add i32 %373, %274
  %375 = add i32 %374, %260
  %376 = add i32 %375, %248
  %377 = add i32 %376, %241
  %378 = add i32 %377, %220
  %379 = add i32 %378, %147
  %380 = add i32 %379, %145
  %381 = add i32 %380, %142
  %382 = add i32 %381, %140
  %383 = add i32 %382, %120
  %384 = add i32 %383, %112
  %385 = add i32 %384, %160
  %386 = add i32 %385, %174
  %387 = shl i32 %386, 1
  %388 = sub i32 %216, %146
  %389 = add i32 %388, %101
  %390 = sub i32 %389, %55
  %391 = sub i32 %390, %187
  %392 = add i32 %391, %123
  %393 = sub i32 %392, %43
  %394 = add i32 %393, %346
  %395 = sub i32 %394, %360
  %396 = mul i32 %395, 5
  %397 = add i32 %312, %210
  %398 = sub i32 %397, %95
  %399 = add i32 %398, %192
  %400 = add i32 %399, %113
  %401 = add i32 %400, %329
  %402 = mul i32 %401, 3
  %403 = add i32 %33, %201
  %404 = add i32 %403, %137
  %405 = shl i32 %404, 2
  %406 = add i32 %364, %311
  %407 = mul i32 %406, -7
  %408 = add i32 %1, %0
  %409 = sub i32 %34, %408
  %410 = add i32 %409, %28
  %411 = sub i32 %410, %2
  %412 = sub i32 %411, %27
  %413 = sub i32 %412, %61
  %414 = sub i32 %413, %37
  %415 = add i32 %414, %109
  %416 = sub i32 %415, %104
  %417 = sub i32 %416, %82
  %418 = add i32 %417, %87
  %419 = sub i32 %418, %91
  %420 = add i32 %419, %94
  %421 = add i32 %420, %106
  %422 = add i32 %421, %53
  %423 = add i32 %422, %116
  %424 = sub i32 %423, %118
  %425 = add i32 %424, %129
  %426 = sub i32 %425, %144
  %427 = sub i32 %426, %157
  %428 = add i32 %427, %161
  %429 = sub i32 %428, %65
  %430 = add i32 %429, %170
  %431 = add i32 %430, %178
  %432 = sub i32 %431, %11
  %433 = add i32 %432, %188
  %434 = add i32 %433, %189
  %435 = add i32 %434, %30
  %436 = add i32 %435, %202
  %437 = add i32 %436, %32
  %438 = add i32 %437, %211
  %439 = sub i32 %438, %29
  %440 = add i32 %439, %69
  %441 = add i32 %440, %227
  %442 = sub i32 %441, %228
  %443 = add i32 %442, %239
  %444 = add i32 %443, %258
  %445 = sub i32 %444, %261
  %446 = sub i32 %445, %267
  %447 = sub i32 %446, %273
  %448 = sub i32 %447, %282
  %449 = add i32 %448, %301
  %450 = sub i32 %449, %304
  %451 = add i32 %450, %31
  %452 = add i32 %451, %39
  %453 = sub i32 %452, %50
  %454 = add i32 %453, %52
  %455 = add i32 %454, %54
  %456 = add i32 %455, %58
  %457 = sub i32 %456, %60
  %458 = sub i32 %457, %63
  %459 = add i32 %458, %67
  %460 = sub i32 %459, %68
  %461 = sub i32 %460, %70
  %462 = add i32 %461, %71
  %463 = add i32 %462, %75
  %464 = sub i32 %463, %76
  %465 = add i32 %464, %83
  %466 = add i32 %465, %85
  %467 = add i32 %466, %86
  %468 = sub i32 %467, %78
  %469 = sub i32 %468, %89
  %470 = sub i32 %469, %93
  %471 = add i32 %470, %98
  %472 = add i32 %471, %100
  %473 = sub i32 %472, %103
  %474 = add i32 %473, %105
  %475 = sub i32 %474, %110
  %476 = sub i32 %475, %111
  %477 = add i32 %476, %114
  %478 = add i32 %477, %115
  %479 = add i32 %478, %117
  %480 = add i32 %479, %119
  %481 = sub i32 %480, %124
  %482 = add i32 %481, %125
  %483 = sub i32 %482, %128
  %484 = sub i32 %483, %130
  %485 = add i32 %484, %131
  %486 = add i32 %485, %133
  %487 = sub i32 %486, %136
  %488 = sub i32 %487, %138
  %489 = sub i32 %488, %139
  %490 = add i32 %489, %141
  %491 = add i32 %490, %143
  %492 = add i32 %491, %148
  %493 = sub i32 %492, %149
  %494 = sub i32 %493, %150
  %495 = add i32 %494, %154
  %496 = sub i32 %495, %156
  %497 = sub i32 %496, %162
  %498 = sub i32 %497, %163
  %499 = add i32 %498, %164
  %500 = sub i32 %499, %167
  %501 = sub i32 %500, %168
  %502 = sub i32 %501, %169
  %503 = sub i32 %502, %171
  %504 = add i32 %503, %12
  %505 = sub i32 %504, %175
  %506 = add i32 %505, %176
  %507 = sub i32 %506, %177
  %508 = add i32 %507, %181
  %509 = sub i32 %508, %182
  %510 = add i32 %509, %184
  %511 = add i32 %510, %185
  %512 = add i32 %511, %190
  %513 = sub i32 %512, %191
  %514 = add i32 %513, %194
  %515 = sub i32 %514, %198
  %516 = add i32 %515, %203
  %517 = add i32 %516, %204
  %518 = sub i32 %517, %207
  %519 = sub i32 %518, %208
  %520 = add i32 %519, %209
  %521 = add i32 %520, %212
  %522 = sub i32 %521, %213
  %523 = sub i32 %522, %215
  %524 = add i32 %523, %219
  %525 = add i32 %524, %221
  %526 = add i32 %525, %226
  %527 = sub i32 %526, %229
  %528 = add i32 %527, %230
  %529 = sub i32 %528, %232
  %530 = add i32 %529, %233
  %531 = sub i32 %530, %234
  %532 = add i32 %531, %237
  %533 = add i32 %532, %238
  %534 = add i32 %533, %242
  %535 = sub i32 %534, %243
  %536 = sub i32 %535, %244
  %537 = add i32 %536, %245
  %538 = add i32 %537, %246
  %539 = add i32 %538, %247
  %540 = sub i32 %539, %249
  %541 = sub i32 %540, %251
  %542 = sub i32 %541, %252
  %543 = add i32 %542, %253
  %544 = sub i32 %543, %257
  %545 = sub i32 %544, %73
  %546 = add i32 %545, %259
  %547 = sub i32 %546, %262
  %548 = add i32 %547, %263
  %549 = add i32 %548, %266
  %550 = sub i32 %549, %268
  %551 = add i32 %550, %269
  %552 = add i32 %551, %272
  %553 = add i32 %552, %275
  %554 = sub i32 %553, %276
  %555 = add i32 %554, %279
  %556 = sub i32 %555, %280
  %557 = add i32 %556, %281
  %558 = sub i32 %557, %205
  %559 = add i32 %558, %283
  %560 = add i32 %559, %284
  %561 = add i32 %560, %285
  %562 = sub i32 %561, %286
  %563 = sub i32 %562, %287
  %564 = add i32 %563, %289
  %565 = sub i32 %564, %291
  %566 = add i32 %565, %294
  %567 = add i32 %566, %295
  %568 = sub i32 %567, %297
  %569 = sub i32 %568, %298
  %570 = add i32 %569, %299
  %571 = add i32 %570, %300
  %572 = add i32 %571, %302
  %573 = sub i32 %572, %303
  %574 = add i32 %573, %306
  %575 = sub i32 %574, %47
  %576 = sub i32 %575, %74
  %577 = sub i32 %576, %80
  %578 = sub i32 %577, %97
  %579 = sub i32 %578, %108
  %580 = sub i32 %579, %122
  %581 = sub i32 %580, %127
  %582 = add i32 %581, %132
  %583 = sub i32 %582, %135
  %584 = sub i32 %583, %153
  %585 = sub i32 %584, %159
  %586 = sub i32 %585, %166
  %587 = add i32 %586, %180
  %588 = add i32 %587, %183
  %589 = add i32 %588, %186
  %590 = sub i32 %589, %193
  %591 = add i32 %590, %195
  %592 = sub i32 %591, %197
  %593 = sub i32 %592, %200
  %594 = sub i32 %593, %206
  %595 = sub i32 %594, %218
  %596 = sub i32 %595, %223
  %597 = sub i32 %596, %225
  %598 = sub i32 %597, %236
  %599 = sub i32 %598, %240
  %600 = sub i32 %599, %250
  %601 = add i32 %600, %254
  %602 = add i32 %601, %255
  %603 = add i32 %602, %256
  %604 = sub i32 %603, %271
  %605 = sub i32 %604, %293
  %606 = add i32 %605, %305
  %607 = add i32 %606, %308
  %608 = add i32 %607, %310
  %609 = add i32 %608, %314
  %610 = add i32 %609, %315
  %611 = add i32 %610, %317
  %612 = add i32 %611, %318
  %613 = sub i32 %612, %265
  %614 = add i32 %613, %340
  %615 = sub i32 %614, %344
  %616 = sub i32 %615, %326
  %617 = add i32 %616, %331
  %618 = add i32 %617, %333
  %619 = sub i32 %618, %335
  %620 = sub i32 %619, %345
  %621 = add i32 %620, %347
  %622 = add i32 %621, %348
  %623 = add i32 %622, %350
  %624 = add i32 %623, %351
  %625 = add i32 %624, %363
  %626 = sub i32 %625, %336
  %627 = add i32 %626, %405
  %628 = add i32 %627, %338
  %629 = sub i32 %628, %343
  %630 = add i32 %629, %354
  %631 = sub i32 %630, %357
  %632 = sub i32 %631, %359
  %633 = sub i32 %632, %362
  %634 = sub i32 %633, %323
  %635 = add i32 %634, %407
  %636 = add i32 %635, %402
  %637 = add i32 %636, %396
  %638 = add i32 %637, %387
  %639 = icmp eq i32 %26, %638
  %640 = select i1 %639, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %641 = tail call i32 @puts(i8* nonnull dereferenceable(1) %640)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
