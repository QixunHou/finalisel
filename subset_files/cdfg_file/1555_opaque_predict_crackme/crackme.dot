digraph "DFG for'crackme' function" {
	Node0x1883b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1883bc0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1883c80[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x1883cf0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x1883d90[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1883e00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1883e70[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1883ee0[shape=record, label="  %10 = and i32 %3, %0"];
	Node0x1883f50[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0x1883ff0[shape=record, label="  %12 = shl i32 %4, 2"];
	Node0x1884090[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x1884100[shape=record, label="  %14 = shl i32 %10, 2"];
	Node0x18841a0[shape=record, label="  %15 = mul i32 %8, 5"];
	Node0x1884240[shape=record, label="  %16 = mul i32 %0, -2"];
	Node0x18842b0[shape=record, label="  %17 = add i32 %16, 2"];
	Node0x1884320[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x1884390[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x1884400[shape=record, label="  %20 = sub i32 %19, %11"];
	Node0x1884470[shape=record, label="  %21 = sub i32 %20, %7"];
	Node0x18844e0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x1884550[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x18845c0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x1884630[shape=record, label="  %25 = icmp eq i32 %24, %5"];
	Node0x1824268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1884ad0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1884b20[shape=record, label="  ret void"];
	Node0x1883b50 -> Node0x1883bc0;
	Node0x1883bc0 -> Node0x1883c80;
	Node0x1883c80 -> Node0x1883cf0;
	Node0x1883cf0 -> Node0x1883d90;
	Node0x1883d90 -> Node0x1883e00;
	Node0x1883e00 -> Node0x1883e70;
	Node0x1883e70 -> Node0x1883ee0;
	Node0x1883ee0 -> Node0x1883f50;
	Node0x1883f50 -> Node0x1883ff0;
	Node0x1883ff0 -> Node0x1884090;
	Node0x1884090 -> Node0x1884100;
	Node0x1884100 -> Node0x18841a0;
	Node0x18841a0 -> Node0x1884240;
	Node0x1884240 -> Node0x18842b0;
	Node0x18842b0 -> Node0x1884320;
	Node0x1884320 -> Node0x1884390;
	Node0x1884390 -> Node0x1884400;
	Node0x1884400 -> Node0x1884470;
	Node0x1884470 -> Node0x18844e0;
	Node0x18844e0 -> Node0x1884550;
	Node0x1884550 -> Node0x18845c0;
	Node0x18845c0 -> Node0x1884630;
	Node0x1884630 -> Node0x1824268;
	Node0x1824268 -> Node0x1884ad0;
	Node0x1884ad0 -> Node0x1884b20;
edge [color=red]
	Node0x1883b50 -> Node0x1883bc0;
	Node0x1883bc0 -> Node0x1883c80;
	Node0x1883cf0 -> Node0x1883d90;
	Node0x1883e00 -> Node0x1883e70;
	Node0x1883b50 -> Node0x1883ee0;
	Node0x1883bc0 -> Node0x1883ff0;
	Node0x1883ff0 -> Node0x1884090;
	Node0x1883ee0 -> Node0x1884100;
	Node0x1883e00 -> Node0x18841a0;
	Node0x1884240 -> Node0x18842b0;
	Node0x18842b0 -> Node0x1884320;
	Node0x1883e70 -> Node0x1884320;
	Node0x1884320 -> Node0x1884390;
	Node0x1883ee0 -> Node0x1884390;
	Node0x1884390 -> Node0x1884400;
	Node0x1883f50 -> Node0x1884400;
	Node0x1884400 -> Node0x1884470;
	Node0x1883d90 -> Node0x1884470;
	Node0x1884470 -> Node0x18844e0;
	Node0x1884100 -> Node0x18844e0;
	Node0x18844e0 -> Node0x1884550;
	Node0x18841a0 -> Node0x1884550;
	Node0x1884550 -> Node0x18845c0;
	Node0x1884090 -> Node0x18845c0;
	Node0x18845c0 -> Node0x1884630;
	Node0x1883c80 -> Node0x1884630;
	Node0x1884630 -> Node0x1824268;
	Node0x1824268 -> Node0x1884ad0;
}
