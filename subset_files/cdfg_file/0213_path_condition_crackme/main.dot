digraph "DFG for'main' function" {
	Node0x646df8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x646e78[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x646f08[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x646f68[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x6473e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x64a938[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x64aa18[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x64aad8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x64ab88[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x64ade8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x64aea8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x64be18[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x64c488[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x64c580[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x64c788[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x64c8e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x64c9f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x64cab8[shape=record, label="  ret i32 0"];
	Node0x646df8 -> Node0x646e78;
	Node0x646e78 -> Node0x646f08;
	Node0x646f08 -> Node0x646f68;
	Node0x646f68 -> Node0x6473e8;
	Node0x6473e8 -> Node0x64a938;
	Node0x64a938 -> Node0x64aa18;
	Node0x64aa18 -> Node0x64aad8;
	Node0x64aad8 -> Node0x64ab88;
	Node0x64ab88 -> Node0x64ade8;
	Node0x64ade8 -> Node0x64aea8;
	Node0x64aea8 -> Node0x64be18;
	Node0x64be18 -> Node0x64c488;
	Node0x64c488 -> Node0x64c580;
	Node0x64c580 -> Node0x64c788;
	Node0x64c788 -> Node0x64c8e8;
	Node0x64c8e8 -> Node0x64c9f8;
	Node0x64c9f8 -> Node0x64cab8;
edge [color=red]
	Node0x646df8 -> Node0x646f68;
	Node0x646f68 -> Node0x6473e8;
	Node0x646e78 -> Node0x64a938;
	Node0x64a938 -> Node0x64aa18;
	Node0x646f08 -> Node0x64aad8;
	Node0x64aad8 -> Node0x64ab88;
	Node0x646df8 -> Node0x64ade8;
	Node0x646e78 -> Node0x64ade8;
	Node0x646f08 -> Node0x64ade8;
	Node0x646df8 -> Node0x64aea8;
	Node0x646e78 -> Node0x64be18;
	Node0x646f08 -> Node0x64c488;
	Node0x64aea8 -> Node0x64c580;
	Node0x64be18 -> Node0x64c580;
	Node0x64c488 -> Node0x64c580;
	Node0x64aad8 -> Node0x64c788;
	Node0x64a938 -> Node0x64c8e8;
	Node0x646f68 -> Node0x64c9f8;
}
