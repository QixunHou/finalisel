; ModuleID = '../.././c_source_file/1615_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1615_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %0
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %9, %12
  %14 = and i32 %10, %0
  %15 = or i32 %14, %1
  %16 = add i32 %13, -2
  %17 = add i32 %16, %15
  %18 = sub i32 %17, %7
  %19 = or i32 %4, %3
  %20 = xor i32 %4, %3
  %21 = or i32 %6, %3
  %22 = xor i32 %19, -1
  %23 = xor i32 %21, -1
  %24 = and i32 %4, %3
  %25 = and i32 %2, %1
  %26 = xor i32 %25, -1
  %27 = xor i32 %14, %26
  %28 = xor i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %29, %2
  %31 = shl i32 %30, 1
  %32 = and i32 %25, %0
  %33 = or i32 %2, %1
  %34 = xor i32 %33, %0
  %35 = or i32 %32, %34
  %36 = or i32 %1, %0
  %37 = xor i32 %0, -1
  %38 = or i32 %10, %1
  %39 = and i32 %38, %37
  %40 = or i32 %2, %0
  %41 = and i32 %40, %29
  %42 = xor i32 %2, %1
  %43 = xor i32 %42, %0
  %44 = shl i32 %43, 1
  %45 = and i32 %8, %2
  %46 = and i32 %45, %0
  %47 = or i32 %42, %0
  %48 = xor i32 %46, %47
  %49 = and i32 %2, %0
  %50 = xor i32 %49, -1
  %51 = and i32 %50, %8
  %52 = shl i32 %51, 1
  %53 = and i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = and i32 %54, %2
  %56 = xor i32 %40, %1
  %57 = xor i32 %36, -1
  %58 = xor i32 %2, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %59, %57
  %61 = or i32 %8, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %62, %2
  %64 = and i32 %36, %2
  %65 = xor i32 %9, %26
  %66 = xor i32 %40, -1
  %67 = or i32 %53, %66
  %68 = xor i32 %42, -1
  %69 = and i32 %68, %37
  %70 = and i32 %38, %0
  %71 = shl i32 %70, 1
  %72 = xor i32 %25, %0
  %73 = xor i32 %61, %2
  %74 = shl i32 %9, 1
  %75 = or i32 %59, %8
  %76 = shl i32 %75, 1
  %77 = or i32 %10, %0
  %78 = and i32 %77, %29
  %79 = xor i32 %9, -1
  %80 = and i32 %79, %2
  %81 = or i32 %58, %8
  %82 = and i32 %10, %79
  %83 = xor i32 %66, %1
  %84 = xor i32 %12, %0
  %85 = shl i32 %84, 1
  %86 = or i32 %9, %68
  %87 = and i32 %61, %59
  %88 = xor i32 %50, %1
  %89 = and i32 %59, %54
  %90 = xor i32 %38, -1
  %91 = or i32 %14, %90
  %92 = and i32 %58, %54
  %93 = or i32 %49, %28
  %94 = xor i32 %62, %2
  %95 = xor i32 %32, %43
  %96 = xor i32 %49, %12
  %97 = xor i32 %14, %1
  %98 = xor i32 %9, %2
  %99 = shl i32 %98, 1
  %100 = or i32 %28, %10
  %101 = xor i32 %49, %33
  %102 = and i32 %45, %37
  %103 = or i32 %8, %2
  %104 = and i32 %103, %0
  %105 = xor i32 %104, -1
  %106 = xor i32 %102, %105
  %107 = and i32 %33, %37
  %108 = xor i32 %107, -1
  %109 = xor i32 %32, %108
  %110 = xor i32 %14, -1
  %111 = xor i32 %110, %1
  %112 = or i32 %14, %29
  %113 = or i32 %46, %43
  %114 = or i32 %28, %59
  %115 = xor i32 %33, -1
  %116 = or i32 %115, %0
  %117 = and i32 %103, %37
  %118 = or i32 %46, %117
  %119 = xor i32 %77, %53
  %120 = add i32 %49, 1
  %121 = or i32 %38, %0
  %122 = or i32 %26, %37
  %123 = xor i32 %38, %53
  %124 = and i32 %36, %68
  %125 = and i32 %59, %79
  %126 = or i32 %28, %66
  %127 = xor i32 %117, 2147483647
  %128 = xor i32 %127, %46
  %129 = xor i32 %54, %2
  %130 = or i32 %59, %62
  %131 = shl i32 %130, 1
  %132 = xor i32 %36, %2
  %133 = shl i32 %132, 2
  %134 = or i32 %9, %59
  %135 = or i32 %49, %8
  %136 = or i32 %53, %115
  %137 = xor i32 %103, %0
  %138 = xor i32 %137, -1
  %139 = xor i32 %46, %138
  %140 = and i32 %25, %37
  %141 = and i32 %33, %0
  %142 = or i32 %140, %141
  %143 = and i32 %10, %29
  %144 = and i32 %59, %8
  %145 = or i32 %53, %2
  %146 = xor i32 %79, %2
  %147 = shl i32 %146, 1
  %148 = and i32 %10, %54
  %149 = xor i32 %40, %53
  %150 = and i32 %42, %37
  %151 = or i32 %32, %150
  %152 = xor i32 %77, -1
  %153 = or i32 %152, %8
  %154 = xor i32 %115, %0
  %155 = and i32 %58, %1
  %156 = and i32 %68, %54
  %157 = and i32 %40, %1
  %158 = or i32 %58, %9
  %159 = xor i32 %11, %0
  %160 = and i32 %61, %2
  %161 = or i32 %49, %62
  %162 = and i32 %42, %54
  %163 = or i32 %11, %0
  %164 = shl i32 %163, 1
  %165 = or i32 %42, %62
  %166 = and i32 %58, %61
  %167 = or i32 %59, %29
  %168 = or i32 %28, %152
  %169 = or i32 %14, %8
  %170 = or i32 %53, %59
  %171 = or i32 %68, %62
  %172 = and i32 %58, %28
  %173 = or i32 %9, %10
  %174 = or i32 %38, %37
  %175 = or i32 %46, %137
  %176 = and i32 %42, %0
  %177 = or i32 %140, %176
  %178 = or i32 %32, %107
  %179 = and i32 %40, %8
  %180 = xor i32 %152, %1
  %181 = or i32 %90, %0
  %182 = and i32 %110, %1
  %183 = or i32 %28, %2
  %184 = and i32 %26, %37
  %185 = or i32 %152, %1
  %186 = or i32 %12, %0
  %187 = or i32 %49, %115
  %188 = xor i32 %43, -1
  %189 = or i32 %32, %188
  %190 = xor i32 %38, %0
  %191 = and i32 %110, %29
  %192 = xor i32 %49, %1
  %193 = shl i32 %192, 1
  %194 = xor i32 %33, %53
  %195 = or i32 %49, %11
  %196 = xor i32 %32, 2147483647
  %197 = xor i32 %196, %34
  %198 = shl i32 %197, 1
  %199 = and i32 %59, %1
  %200 = and i32 %42, %36
  %201 = and i32 %77, %28
  %202 = or i32 %11, %9
  %203 = shl i32 %202, 1
  %204 = and i32 %61, %68
  %205 = and i32 %58, %29
  %206 = or i32 %33, %0
  %207 = and i32 %28, %110
  %208 = xor i32 %26, %0
  %209 = or i32 %10, %62
  %210 = and i32 %58, %36
  %211 = xor i32 %77, %1
  %212 = or i32 %12, %37
  %213 = xor i32 %90, %0
  %214 = and i32 %77, %8
  %215 = xor i32 %47, -1
  %216 = or i32 %46, %215
  %217 = or i32 %14, %25
  %218 = or i32 %102, %104
  %219 = or i32 %68, %0
  %220 = shl i32 %219, 1
  %221 = or i32 %25, %9
  %222 = or i32 %53, %10
  %223 = or i32 %90, %37
  %224 = and i32 %42, %79
  %225 = xor i32 %49, %61
  %226 = and i32 %12, %37
  %227 = and i32 %28, %59
  %228 = and i32 %58, %79
  %229 = shl i32 %152, 1
  %230 = and i32 %12, %0
  %231 = or i32 %152, %29
  %232 = xor i32 %14, %38
  %233 = and i32 %28, %2
  %234 = and i32 %40, %28
  %235 = or i32 %42, %53
  %236 = shl i32 %61, 1
  %237 = or i32 %66, %1
  %238 = and i32 %61, %10
  %239 = xor i32 %53, %2
  %240 = add i32 %53, 1
  %241 = add i32 %9, 1
  %242 = and i32 %26, %0
  %243 = or i32 %10, %29
  %244 = shl i32 %243, 1
  %245 = and i32 %68, %0
  %246 = and i32 %50, %29
  %247 = xor i32 %57, %2
  %248 = or i32 %14, %28
  %249 = or i32 %9, %2
  %250 = or i32 %57, %2
  %251 = xor i32 %176, 2147483647
  %252 = xor i32 %251, %140
  %253 = or i32 %58, %1
  %254 = or i32 %68, %57
  %255 = or i32 %29, %2
  %256 = shl i32 %255, 1
  %257 = or i32 %26, %0
  %258 = and i32 %28, %50
  %259 = or i32 %10, %57
  %260 = xor i32 %46, %188
  %261 = and i32 %110, %8
  %262 = or i32 %33, %37
  %263 = shl i32 %262, 1
  %264 = or i32 %58, %62
  %265 = shl i32 %176, 1
  %266 = or i32 %25, %0
  %267 = and i32 %28, %10
  %268 = or i32 %66, %29
  %269 = or i32 %42, %57
  %270 = and i32 %77, %1
  %271 = or i32 %115, %37
  %272 = and i32 %36, %10
  %273 = xor i32 %196, %150
  %274 = shl i32 %273, 1
  %275 = or i32 %11, %37
  %276 = and i32 %36, %59
  %277 = or i32 %66, %8
  %278 = or i32 %42, %9
  %279 = or i32 %49, %57
  %280 = and i32 %50, %1
  %281 = and i32 %42, %61
  %282 = add i32 %58, 1
  %283 = xor i32 %68, %0
  %284 = or i32 %58, %29
  %285 = shl i32 %68, 1
  %286 = xor i32 %49, %36
  %287 = and i32 %58, %8
  %288 = or i32 %42, %37
  %289 = xor i32 %288, -1
  %290 = or i32 %102, %289
  %291 = or i32 %53, %68
  %292 = or i32 %58, %57
  %293 = or i32 %25, %37
  %294 = xor i32 %141, -1
  %295 = xor i32 %140, %294
  %296 = add i32 %2, 1
  %297 = or i32 %53, %90
  %298 = shl i32 %297, 1
  %299 = and i32 %59, %29
  %300 = or i32 %49, %29
  %301 = or i32 %58, %53
  %302 = and i32 %68, %79
  %303 = or i32 %49, %1
  %304 = or i32 %59, %1
  %305 = xor i32 %102, %288
  %306 = and i32 %115, %37
  %307 = mul i32 %306, -10
  %308 = and i32 %11, %37
  %309 = mul i32 %308, 11
  %310 = and i32 %115, %0
  %311 = and i32 %11, %0
  %312 = shl i32 %311, 2
  %313 = and i32 %90, %37
  %314 = mul i32 %313, -20
  %315 = mul i32 %140, 22
  %316 = and i32 %90, %0
  %317 = shl i32 %316, 3
  %318 = mul i32 %32, -7
  %319 = sub i32 -2, %61
  %320 = add i32 %319, %14
  %321 = add i32 %320, %239
  %322 = add i32 %321, %66
  %323 = add i32 %322, %160
  %324 = add i32 %323, %129
  %325 = add i32 %324, %64
  %326 = sub i32 %325, %3
  %327 = add i32 %326, %281
  %328 = add i32 %327, %269
  %329 = add i32 %328, %150
  %330 = add i32 %329, %224
  %331 = add i32 %330, %214
  %332 = add i32 %331, %205
  %333 = add i32 %332, %191
  %334 = add i32 %333, %186
  %335 = add i32 %334, %180
  %336 = add i32 %335, %167
  %337 = add i32 %336, %162
  %338 = add i32 %337, %154
  %339 = add i32 %338, %144
  %340 = add i32 %339, %136
  %341 = add i32 %340, %121
  %342 = add i32 %341, %87
  %343 = add i32 %342, %81
  %344 = add i32 %343, %60
  %345 = add i32 %344, %128
  %346 = add i32 %345, %252
  %347 = shl i32 %346, 1
  %348 = sub i32 1, %310
  %349 = sub i32 %348, %34
  %350 = add i32 %349, %213
  %351 = sub i32 %350, %89
  %352 = add i32 %351, %22
  %353 = add i32 %352, %23
  %354 = mul i32 %353, 3
  %355 = add i32 %73, %26
  %356 = add i32 %355, %228
  %357 = add i32 %356, %24
  %358 = shl i32 %357, 2
  %359 = sub i32 %7, %1
  %360 = add i32 %359, %218
  %361 = mul i32 %360, 5
  %362 = shl i32 %37, 1
  %363 = add i32 %362, %8
  %364 = add i32 %363, %29
  %365 = sub i32 %364, %53
  %366 = sub i32 %365, %2
  %367 = sub i32 %366, %28
  %368 = add i32 %367, %240
  %369 = add i32 %368, %241
  %370 = add i32 %369, %296
  %371 = add i32 %370, %3
  %372 = add i32 %371, %55
  %373 = add i32 %372, %63
  %374 = sub i32 %373, %74
  %375 = sub i32 %374, %42
  %376 = sub i32 %375, %80
  %377 = add i32 %376, %82
  %378 = sub i32 %377, %94
  %379 = add i32 %378, %100
  %380 = add i32 %379, %40
  %381 = add i32 %380, %120
  %382 = add i32 %381, %143
  %383 = add i32 %382, %145
  %384 = add i32 %383, %148
  %385 = sub i32 %384, %11
  %386 = sub i32 %385, %173
  %387 = sub i32 %386, %183
  %388 = sub i32 %387, %33
  %389 = sub i32 %388, %25
  %390 = add i32 %389, %12
  %391 = sub i32 %390, %209
  %392 = add i32 %391, %222
  %393 = sub i32 %392, %233
  %394 = sub i32 %393, %236
  %395 = add i32 %394, %77
  %396 = add i32 %395, %238
  %397 = add i32 %396, %247
  %398 = sub i32 %397, %249
  %399 = sub i32 %398, %250
  %400 = sub i32 %399, %259
  %401 = add i32 %400, %110
  %402 = sub i32 %401, %58
  %403 = add i32 %402, %267
  %404 = sub i32 %403, %272
  %405 = add i32 %404, %282
  %406 = add i32 %405, %115
  %407 = add i32 %406, %4
  %408 = sub i32 %407, %27
  %409 = sub i32 %408, %31
  %410 = sub i32 %409, %39
  %411 = add i32 %410, %41
  %412 = add i32 %411, %56
  %413 = sub i32 %412, %65
  %414 = sub i32 %413, %67
  %415 = sub i32 %414, %69
  %416 = sub i32 %415, %72
  %417 = add i32 %416, %78
  %418 = sub i32 %417, %83
  %419 = sub i32 %418, %86
  %420 = add i32 %419, %88
  %421 = add i32 %420, %91
  %422 = add i32 %421, %92
  %423 = add i32 %422, %93
  %424 = add i32 %423, %96
  %425 = add i32 %424, %97
  %426 = sub i32 %425, %99
  %427 = sub i32 %426, %101
  %428 = sub i32 %427, %111
  %429 = sub i32 %428, %107
  %430 = add i32 %429, %112
  %431 = sub i32 %430, %114
  %432 = sub i32 %431, %116
  %433 = add i32 %432, %119
  %434 = sub i32 %433, %122
  %435 = sub i32 %434, %123
  %436 = add i32 %435, %124
  %437 = sub i32 %436, %125
  %438 = sub i32 %437, %126
  %439 = sub i32 %438, %133
  %440 = add i32 %439, %134
  %441 = add i32 %440, %135
  %442 = sub i32 %441, %147
  %443 = sub i32 %442, %149
  %444 = add i32 %443, %153
  %445 = sub i32 %444, %155
  %446 = sub i32 %445, %156
  %447 = add i32 %446, %157
  %448 = sub i32 %447, %158
  %449 = add i32 %448, %159
  %450 = sub i32 %449, %161
  %451 = add i32 %450, %165
  %452 = add i32 %451, %166
  %453 = sub i32 %452, %168
  %454 = sub i32 %453, %169
  %455 = add i32 %454, %170
  %456 = add i32 %455, %171
  %457 = sub i32 %456, %172
  %458 = sub i32 %457, %174
  %459 = add i32 %458, %179
  %460 = sub i32 %459, %181
  %461 = sub i32 %460, %182
  %462 = add i32 %461, %184
  %463 = add i32 %462, %185
  %464 = add i32 %463, %47
  %465 = sub i32 %464, %187
  %466 = add i32 %465, %190
  %467 = add i32 %466, %194
  %468 = sub i32 %467, %195
  %469 = sub i32 %468, %199
  %470 = sub i32 %469, %200
  %471 = add i32 %470, %201
  %472 = add i32 %471, %204
  %473 = add i32 %472, %206
  %474 = sub i32 %473, %207
  %475 = add i32 %474, %208
  %476 = sub i32 %475, %210
  %477 = add i32 %476, %211
  %478 = sub i32 %477, %212
  %479 = sub i32 %478, %217
  %480 = sub i32 %479, %221
  %481 = add i32 %480, %223
  %482 = sub i32 %481, %225
  %483 = sub i32 %482, %226
  %484 = add i32 %483, %227
  %485 = sub i32 %484, %229
  %486 = add i32 %485, %141
  %487 = sub i32 %486, %230
  %488 = add i32 %487, %231
  %489 = sub i32 %488, %232
  %490 = add i32 %489, %234
  %491 = add i32 %490, %235
  %492 = add i32 %491, %237
  %493 = add i32 %492, %242
  %494 = sub i32 %493, %244
  %495 = sub i32 %494, %245
  %496 = add i32 %495, %246
  %497 = add i32 %496, %248
  %498 = add i32 %497, %253
  %499 = add i32 %498, %254
  %500 = sub i32 %499, %256
  %501 = sub i32 %500, %257
  %502 = sub i32 %501, %258
  %503 = add i32 %502, %261
  %504 = sub i32 %503, %264
  %505 = add i32 %504, %266
  %506 = sub i32 %505, %268
  %507 = add i32 %506, %270
  %508 = sub i32 %507, %271
  %509 = sub i32 %508, %275
  %510 = sub i32 %509, %276
  %511 = sub i32 %510, %277
  %512 = sub i32 %511, %278
  %513 = add i32 %512, %279
  %514 = add i32 %513, %280
  %515 = add i32 %514, %283
  %516 = add i32 %515, %284
  %517 = sub i32 %516, %285
  %518 = sub i32 %517, %286
  %519 = add i32 %518, %287
  %520 = sub i32 %519, %291
  %521 = add i32 %520, %292
  %522 = sub i32 %521, %293
  %523 = sub i32 %522, %299
  %524 = add i32 %523, %300
  %525 = add i32 %524, %301
  %526 = add i32 %525, %302
  %527 = add i32 %526, %303
  %528 = sub i32 %527, %304
  %529 = sub i32 %528, %19
  %530 = sub i32 %529, %20
  %531 = sub i32 %530, %21
  %532 = sub i32 %531, %35
  %533 = sub i32 %532, %44
  %534 = add i32 %533, %48
  %535 = sub i32 %534, %52
  %536 = sub i32 %535, %71
  %537 = sub i32 %536, %76
  %538 = sub i32 %537, %85
  %539 = add i32 %538, %95
  %540 = sub i32 %539, %106
  %541 = add i32 %540, %109
  %542 = add i32 %541, %113
  %543 = sub i32 %542, %118
  %544 = sub i32 %543, %131
  %545 = add i32 %544, %139
  %546 = sub i32 %545, %142
  %547 = add i32 %546, %151
  %548 = sub i32 %547, %164
  %549 = sub i32 %548, %175
  %550 = add i32 %549, %177
  %551 = add i32 %550, %178
  %552 = add i32 %551, %189
  %553 = sub i32 %552, %193
  %554 = sub i32 %553, %203
  %555 = sub i32 %554, %216
  %556 = sub i32 %555, %220
  %557 = add i32 %556, %260
  %558 = sub i32 %557, %263
  %559 = sub i32 %558, %265
  %560 = sub i32 %559, %290
  %561 = add i32 %560, %295
  %562 = sub i32 %561, %298
  %563 = add i32 %562, %305
  %564 = add i32 %563, %307
  %565 = add i32 %564, %309
  %566 = sub i32 %565, %312
  %567 = add i32 %566, %314
  %568 = add i32 %567, %315
  %569 = sub i32 %568, %317
  %570 = add i32 %569, %318
  %571 = sub i32 %570, %198
  %572 = sub i32 %571, %274
  %573 = add i32 %572, %361
  %574 = add i32 %573, %358
  %575 = add i32 %574, %354
  %576 = add i32 %575, %347
  %577 = icmp eq i32 %18, %576
  %578 = select i1 %577, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %579 = tail call i32 @puts(i8* nonnull dereferenceable(1) %578)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
