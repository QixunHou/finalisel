; ModuleID = '../.././c_source_file/0905_path_condition_crackme.c'
source_filename = "../.././c_source_file/0905_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %5, -1
  %10 = and i32 %9, %4
  %11 = xor i32 %4, %3
  %12 = xor i32 %11, -1
  %13 = or i32 %10, %12
  %14 = add i32 %13, %8
  %15 = xor i32 %3, -1
  %16 = or i32 %15, %4
  %17 = xor i32 %5, %3
  %18 = xor i32 %17, -1
  %19 = and i32 %16, %18
  %20 = sub i32 %14, %19
  %21 = and i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %24, %26
  %28 = xor i32 %2, %1
  %29 = xor i32 %28, %0
  %30 = xor i32 %24, %1
  %31 = xor i32 %2, %0
  %32 = and i32 %31, %26
  %33 = or i32 %28, %0
  %34 = or i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %28, -1
  %37 = or i32 %36, %35
  %38 = xor i32 %31, 1073741823
  %39 = or i32 %38, %21
  %40 = xor i32 %1, -1
  %41 = and i32 %40, %0
  %42 = xor i32 %2, -1
  %43 = and i32 %42, %1
  %44 = xor i32 %43, -1
  %45 = xor i32 %41, %44
  %46 = shl i32 %45, 1
  %47 = or i32 %21, %36
  %48 = or i32 %40, %0
  %49 = and i32 %28, %48
  %50 = xor i32 %7, %21
  %51 = shl i32 %50, 1
  %52 = and i32 %25, %42
  %53 = and i32 %7, %26
  %54 = xor i32 %23, %44
  %55 = and i32 %7, %1
  %56 = xor i32 %0, -1
  %57 = or i32 %2, %1
  %58 = or i32 %57, %56
  %59 = and i32 %2, %1
  %60 = and i32 %59, %0
  %61 = xor i32 %57, %56
  %62 = xor i32 %61, %60
  %63 = or i32 %42, %1
  %64 = and i32 %63, %56
  %65 = xor i32 %59, 2147483647
  %66 = or i32 %65, %56
  %67 = xor i32 %63, -1
  %68 = xor i32 %67, %0
  %69 = or i32 %21, %2
  %70 = xor i32 %57, -1
  %71 = and i32 %70, %56
  %72 = and i32 %43, %56
  %73 = and i32 %70, %0
  %74 = and i32 %43, %0
  %75 = and i32 %67, %56
  %76 = shl i32 %75, 2
  %77 = and i32 %59, %56
  %78 = and i32 %67, %0
  %79 = shl i32 %60, 2
  %80 = and i32 %5, %3
  %81 = and i32 %80, %4
  %82 = or i32 %5, %3
  %83 = xor i32 %4, -1
  %84 = xor i32 %82, %83
  %85 = xor i32 %84, %81
  %86 = xor i32 %80, -1
  %87 = xor i32 %10, %86
  %88 = shl i32 %87, 1
  %89 = and i32 %5, %4
  %90 = xor i32 %89, -1
  %91 = shl i32 %90, 1
  %92 = xor i32 %5, %4
  %93 = xor i32 %92, -1
  %94 = and i32 %11, %93
  %95 = shl i32 %94, 1
  %96 = and i32 %92, %12
  %97 = xor i32 %82, -1
  %98 = or i32 %97, %4
  %99 = xor i32 %16, -1
  %100 = or i32 %99, %5
  %101 = shl i32 %100, 1
  %102 = and i32 %17, %83
  %103 = or i32 %81, %102
  %104 = and i32 %4, %3
  %105 = xor i32 %104, -1
  %106 = and i32 %93, %105
  %107 = or i32 %9, %3
  %108 = and i32 %107, %4
  %109 = xor i32 %105, %5
  %110 = xor i32 %10, %107
  %111 = or i32 %17, %99
  %112 = shl i32 %3, 1
  %113 = or i32 %4, %3
  %114 = and i32 %17, %113
  %115 = xor i32 %16, %5
  %116 = or i32 %89, %99
  %117 = shl i32 %116, 1
  %118 = and i32 %16, %9
  %119 = and i32 %9, %3
  %120 = or i32 %89, %119
  %121 = xor i32 %17, %4
  %122 = xor i32 %81, %121
  %123 = or i32 %9, %4
  %124 = and i32 %123, %11
  %125 = and i32 %113, %93
  %126 = and i32 %123, %15
  %127 = and i32 %107, %83
  %128 = or i32 %89, %11
  %129 = and i32 %15, %5
  %130 = and i32 %129, %83
  %131 = or i32 %17, %83
  %132 = xor i32 %131, -1
  %133 = or i32 %130, %132
  %134 = or i32 %104, %93
  %135 = or i32 %93, %12
  %136 = xor i32 %107, %4
  %137 = shl i32 %136, 1
  %138 = xor i32 %113, -1
  %139 = or i32 %89, %138
  %140 = xor i32 %113, %5
  %141 = and i32 %15, %4
  %142 = xor i32 %141, -1
  %143 = and i32 %17, %142
  %144 = xor i32 %10, -1
  %145 = and i32 %11, %144
  %146 = and i32 %18, %83
  %147 = and i32 %90, %15
  %148 = and i32 %105, %5
  %149 = or i32 %92, %104
  %150 = and i32 %144, %3
  %151 = or i32 %9, %12
  %152 = shl i32 %151, 1
  %153 = and i32 %86, %4
  %154 = and i32 %144, %15
  %155 = xor i32 %123, -1
  %156 = or i32 %11, %155
  %157 = xor i32 %18, %4
  %158 = and i32 %129, %4
  %159 = or i32 %15, %5
  %160 = xor i32 %159, %4
  %161 = or i32 %158, %160
  %162 = or i32 %5, %4
  %163 = xor i32 %162, -1
  %164 = or i32 %163, %3
  %165 = or i32 %10, %15
  %166 = and i32 %93, %142
  %167 = and i32 %80, %83
  %168 = and i32 %17, %4
  %169 = or i32 %167, %168
  %170 = or i32 %104, %155
  %171 = xor i32 %107, -1
  %172 = or i32 %171, %4
  %173 = add i32 %5, 1
  %174 = or i32 %10, %80
  %175 = xor i32 %159, -1
  %176 = or i32 %175, %4
  %177 = xor i32 %158, %176
  %178 = xor i32 %121, -1
  %179 = or i32 %81, %178
  %180 = or i32 %119, %141
  %181 = and i32 %92, %11
  %182 = or i32 %17, %4
  %183 = xor i32 %81, -1
  %184 = xor i32 %102, %183
  %185 = or i32 %155, %15
  %186 = shl i32 %185, 1
  %187 = xor i32 %141, %86
  %188 = and i32 %162, %11
  %189 = and i32 %90, %12
  %190 = add i32 %11, 1
  %191 = xor i32 %160, -1
  %192 = xor i32 %158, %191
  %193 = and i32 %92, %16
  %194 = xor i32 %123, %104
  %195 = or i32 %11, %9
  %196 = xor i32 %119, %4
  %197 = xor i32 %99, %5
  %198 = or i32 %141, %9
  %199 = or i32 %104, %18
  %200 = or i32 %119, %83
  %201 = shl i32 %11, 1
  %202 = or i32 %12, %5
  %203 = or i32 %92, %141
  %204 = or i32 %17, %141
  %205 = xor i32 %82, %104
  %206 = xor i32 %144, %3
  %207 = and i32 %123, %3
  %208 = shl i32 %207, 1
  %209 = and i32 %162, %3
  %210 = xor i32 %155, %3
  %211 = or i32 %89, %97
  %212 = and i32 %92, %142
  %213 = shl i32 %212, 1
  %214 = xor i32 %119, %142
  %215 = or i32 %155, %3
  %216 = or i32 %11, %5
  %217 = and i32 %86, %83
  %218 = and i32 %82, %4
  %219 = xor i32 %218, -1
  %220 = xor i32 %167, %219
  %221 = or i32 %18, %4
  %222 = mul i32 %221, 3
  %223 = or i32 %17, %138
  %224 = shl i32 %218, 1
  %225 = or i32 %86, %4
  %226 = shl i32 %225, 1
  %227 = and i32 %97, %83
  %228 = and i32 %119, %83
  %229 = and i32 %97, %4
  %230 = and i32 %119, %4
  %231 = shl i32 %230, 1
  %232 = and i32 %171, %83
  %233 = shl i32 %167, 1
  %234 = and i32 %171, %4
  %235 = add i32 %66, %73
  %236 = add i32 %235, %123
  %237 = add i32 %236, %148
  %238 = add i32 %237, %118
  %239 = add i32 %238, %131
  %240 = add i32 %239, %228
  %241 = add i32 %240, %150
  %242 = add i32 %241, %126
  %243 = add i32 %242, %108
  %244 = shl i32 %243, 1
  %245 = sub i32 %195, %77
  %246 = add i32 %245, %181
  %247 = add i32 %246, %232
  %248 = sub i32 %247, %139
  %249 = add i32 %248, %134
  %250 = mul i32 %249, 5
  %251 = add i32 %39, %58
  %252 = add i32 %251, %170
  %253 = add i32 %252, %217
  %254 = add i32 %253, %154
  %255 = shl i32 %254, 2
  %256 = add i32 %71, %74
  %257 = add i32 %256, %227
  %258 = mul i32 %257, -11
  %259 = add i32 %234, %229
  %260 = mul i32 %259, -7
  %261 = or i32 %78, %72
  %262 = mul i32 %261, -10
  %263 = sub i32 %22, %0
  %264 = sub i32 %263, %52
  %265 = add i32 %264, %69
  %266 = add i32 %265, %15
  %267 = add i32 %266, %27
  %268 = add i32 %267, %29
  %269 = sub i32 %268, %30
  %270 = sub i32 %269, %32
  %271 = sub i32 %270, %33
  %272 = sub i32 %271, %37
  %273 = add i32 %272, %47
  %274 = add i32 %273, %49
  %275 = add i32 %274, %53
  %276 = add i32 %275, %54
  %277 = sub i32 %276, %55
  %278 = add i32 %277, %64
  %279 = sub i32 %278, %68
  %280 = sub i32 %279, %112
  %281 = sub i32 %280, %46
  %282 = sub i32 %281, %51
  %283 = add i32 %282, %62
  %284 = sub i32 %283, %76
  %285 = sub i32 %284, %79
  %286 = sub i32 %285, %16
  %287 = add i32 %286, %173
  %288 = add i32 %287, %190
  %289 = add i32 %288, %109
  %290 = sub i32 %289, %115
  %291 = add i32 %290, %140
  %292 = sub i32 %291, %107
  %293 = add i32 %292, %18
  %294 = sub i32 %293, %92
  %295 = add i32 %294, %10
  %296 = add i32 %295, %197
  %297 = sub i32 %296, %198
  %298 = sub i32 %297, %201
  %299 = add i32 %298, %202
  %300 = add i32 %299, %216
  %301 = add i32 %300, %262
  %302 = sub i32 %301, %91
  %303 = sub i32 %302, %96
  %304 = add i32 %303, %98
  %305 = sub i32 %304, %101
  %306 = add i32 %305, %106
  %307 = add i32 %306, %110
  %308 = add i32 %307, %111
  %309 = add i32 %308, %114
  %310 = sub i32 %309, %120
  %311 = add i32 %310, %124
  %312 = add i32 %311, %125
  %313 = sub i32 %312, %127
  %314 = sub i32 %313, %128
  %315 = sub i32 %314, %135
  %316 = sub i32 %315, %143
  %317 = add i32 %316, %145
  %318 = add i32 %317, %146
  %319 = sub i32 %318, %147
  %320 = sub i32 %319, %149
  %321 = sub i32 %320, %152
  %322 = sub i32 %321, %153
  %323 = add i32 %322, %156
  %324 = add i32 %323, %157
  %325 = sub i32 %324, %164
  %326 = add i32 %325, %165
  %327 = sub i32 %326, %166
  %328 = add i32 %327, %172
  %329 = sub i32 %328, %174
  %330 = sub i32 %329, %180
  %331 = add i32 %330, %182
  %332 = add i32 %331, %187
  %333 = sub i32 %332, %188
  %334 = sub i32 %333, %189
  %335 = sub i32 %334, %193
  %336 = sub i32 %335, %194
  %337 = sub i32 %336, %196
  %338 = sub i32 %337, %199
  %339 = sub i32 %338, %200
  %340 = sub i32 %339, %203
  %341 = sub i32 %340, %204
  %342 = sub i32 %341, %205
  %343 = add i32 %342, %206
  %344 = add i32 %343, %209
  %345 = sub i32 %344, %210
  %346 = add i32 %345, %211
  %347 = sub i32 %346, %214
  %348 = add i32 %347, %215
  %349 = add i32 %348, %223
  %350 = add i32 %349, %81
  %351 = add i32 %350, %85
  %352 = sub i32 %351, %88
  %353 = sub i32 %352, %95
  %354 = sub i32 %353, %103
  %355 = sub i32 %354, %117
  %356 = add i32 %355, %122
  %357 = add i32 %356, %133
  %358 = sub i32 %357, %137
  %359 = sub i32 %358, %161
  %360 = sub i32 %359, %169
  %361 = add i32 %360, %177
  %362 = add i32 %361, %179
  %363 = sub i32 %362, %184
  %364 = sub i32 %363, %186
  %365 = sub i32 %364, %192
  %366 = sub i32 %365, %208
  %367 = sub i32 %366, %213
  %368 = add i32 %367, %220
  %369 = add i32 %368, %222
  %370 = sub i32 %369, %224
  %371 = sub i32 %370, %226
  %372 = sub i32 %371, %231
  %373 = sub i32 %372, %233
  %374 = add i32 %373, %260
  %375 = add i32 %374, %258
  %376 = add i32 %375, %255
  %377 = add i32 %376, %250
  %378 = add i32 %377, %244
  %379 = icmp eq i32 %20, %378
  %380 = select i1 %379, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %381 = tail call i32 @puts(i8* nonnull dereferenceable(1) %380)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
