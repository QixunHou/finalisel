digraph "DFG for'crackme' function" {
	Node0x1762bb0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x1762c20[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x1762ce0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1762d50[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x1762dc0[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x1762e30[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1762ed0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x1762f40[shape=record, label="  %10 = add i32 %1, 1"];
	Node0x1762fe0[shape=record, label="  %11 = shl i32 %4, 2"];
	Node0x1763080[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x17630f0[shape=record, label="  %13 = and i32 %3, %1"];
	Node0x1763190[shape=record, label="  %14 = mul i32 %13, -3"];
	Node0x1763200[shape=record, label="  %15 = shl i32 %6, 2"];
	Node0x1763270[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x17632e0[shape=record, label="  %17 = add i32 %10, %0"];
	Node0x1763350[shape=record, label="  %18 = add i32 %17, %1"];
	Node0x17633c0[shape=record, label="  %19 = add i32 %18, %4"];
	Node0x1763430[shape=record, label="  %20 = add i32 %19, %6"];
	Node0x17634a0[shape=record, label="  %21 = sub i32 %20, %16"];
	Node0x1763510[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x1763580[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x17635f0[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x1763660[shape=record, label="  %25 = sub i32 %24, %9"];
	Node0x17636d0[shape=record, label="  %26 = add i32 %25, %12"];
	Node0x1763740[shape=record, label="  %27 = icmp eq i32 %26, %3"];
	Node0x1703268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1763be0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1763c30[shape=record, label="  ret void"];
	Node0x1762bb0 -> Node0x1762c20;
	Node0x1762c20 -> Node0x1762ce0;
	Node0x1762ce0 -> Node0x1762d50;
	Node0x1762d50 -> Node0x1762dc0;
	Node0x1762dc0 -> Node0x1762e30;
	Node0x1762e30 -> Node0x1762ed0;
	Node0x1762ed0 -> Node0x1762f40;
	Node0x1762f40 -> Node0x1762fe0;
	Node0x1762fe0 -> Node0x1763080;
	Node0x1763080 -> Node0x17630f0;
	Node0x17630f0 -> Node0x1763190;
	Node0x1763190 -> Node0x1763200;
	Node0x1763200 -> Node0x1763270;
	Node0x1763270 -> Node0x17632e0;
	Node0x17632e0 -> Node0x1763350;
	Node0x1763350 -> Node0x17633c0;
	Node0x17633c0 -> Node0x1763430;
	Node0x1763430 -> Node0x17634a0;
	Node0x17634a0 -> Node0x1763510;
	Node0x1763510 -> Node0x1763580;
	Node0x1763580 -> Node0x17635f0;
	Node0x17635f0 -> Node0x1763660;
	Node0x1763660 -> Node0x17636d0;
	Node0x17636d0 -> Node0x1763740;
	Node0x1763740 -> Node0x1703268;
	Node0x1703268 -> Node0x1763be0;
	Node0x1763be0 -> Node0x1763c30;
edge [color=red]
	Node0x1762ce0 -> Node0x1762d50;
	Node0x1762dc0 -> Node0x1762e30;
	Node0x1762e30 -> Node0x1762ed0;
	Node0x1762c20 -> Node0x1762fe0;
	Node0x1762fe0 -> Node0x1763080;
	Node0x1762bb0 -> Node0x17630f0;
	Node0x17630f0 -> Node0x1763190;
	Node0x1762d50 -> Node0x1763200;
	Node0x1762f40 -> Node0x17632e0;
	Node0x17632e0 -> Node0x1763350;
	Node0x1763350 -> Node0x17633c0;
	Node0x1762c20 -> Node0x17633c0;
	Node0x17633c0 -> Node0x1763430;
	Node0x1762d50 -> Node0x1763430;
	Node0x1763430 -> Node0x17634a0;
	Node0x1763270 -> Node0x17634a0;
	Node0x17634a0 -> Node0x1763510;
	Node0x1762e30 -> Node0x1763510;
	Node0x1763510 -> Node0x1763580;
	Node0x1763190 -> Node0x1763580;
	Node0x1763580 -> Node0x17635f0;
	Node0x1763200 -> Node0x17635f0;
	Node0x17635f0 -> Node0x1763660;
	Node0x1762ed0 -> Node0x1763660;
	Node0x1763660 -> Node0x17636d0;
	Node0x1763080 -> Node0x17636d0;
	Node0x17636d0 -> Node0x1763740;
	Node0x1762bb0 -> Node0x1763740;
	Node0x1763740 -> Node0x1703268;
	Node0x1703268 -> Node0x1763be0;
}
