; ModuleID = '../.././c_source_file/0168_path_condition_crackme.c'
source_filename = "../.././c_source_file/0168_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %2, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = and i32 %9, %6
  %11 = sub i32 %10, %7
  %12 = and i32 %8, %2
  %13 = and i32 %12, %0
  %14 = xor i32 %0, -1
  %15 = or i32 %8, %2
  %16 = and i32 %15, %14
  %17 = or i32 %13, %16
  %18 = xor i32 %2, -1
  %19 = and i32 %18, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %20, %22
  %24 = shl i32 %1, 1
  %25 = and i32 %2, %1
  %26 = and i32 %25, %0
  %27 = or i32 %2, %1
  %28 = xor i32 %27, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %26, %29
  %31 = and i32 %9, %18
  %32 = and i32 %22, %2
  %33 = shl i32 %32, 1
  %34 = xor i32 %2, %1
  %35 = or i32 %34, %14
  %36 = xor i32 %27, -1
  %37 = and i32 %18, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %0
  %40 = and i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = and i32 %41, %22
  %43 = or i32 %2, %0
  %44 = and i32 %43, %1
  %45 = xor i32 %40, %27
  %46 = or i32 %6, %8
  %47 = and i32 %20, %1
  %48 = or i32 %38, %14
  %49 = shl i32 %48, 2
  %50 = xor i32 %43, -1
  %51 = or i32 %50, %22
  %52 = or i32 %21, %2
  %53 = shl i32 %52, 1
  %54 = xor i32 %34, -1
  %55 = xor i32 %54, %0
  %56 = or i32 %18, %0
  %57 = xor i32 %56, -1
  %58 = or i32 %57, %8
  %59 = or i32 %25, %14
  %60 = and i32 %43, %21
  %61 = xor i32 %25, -1
  %62 = or i32 %61, %0
  %63 = or i32 %21, %6
  %64 = and i32 %21, %2
  %65 = xor i32 %43, %1
  %66 = xor i32 %34, %0
  %67 = xor i32 %66, -1
  %68 = or i32 %26, %67
  %69 = and i32 %21, %18
  %70 = or i32 %54, %0
  %71 = and i32 %8, %0
  %72 = xor i32 %71, %61
  %73 = xor i32 %4, -1
  %74 = xor i32 %73, %2
  %75 = and i32 %21, %20
  %76 = and i32 %56, %1
  %77 = or i32 %27, %0
  %78 = shl i32 %77, 1
  %79 = xor i32 %15, %0
  %80 = or i32 %13, %79
  %81 = or i32 %5, %1
  %82 = or i32 %40, %22
  %83 = shl i32 %8, 1
  %84 = and i32 %34, %73
  %85 = shl i32 %57, 1
  %86 = and i32 %5, %73
  %87 = or i32 %1, %0
  %88 = xor i32 %87, -1
  %89 = or i32 %54, %88
  %90 = or i32 %36, %0
  %91 = xor i32 %26, %90
  %92 = or i32 %34, %0
  %93 = and i32 %25, %14
  %94 = and i32 %27, %0
  %95 = xor i32 %93, -1
  %96 = xor i32 %94, %95
  %97 = or i32 %37, %71
  %98 = shl i32 %97, 1
  %99 = or i32 %13, %66
  %100 = xor i32 %9, -1
  %101 = or i32 %54, %100
  %102 = shl i32 %101, 2
  %103 = or i32 %93, %94
  %104 = or i32 %37, %14
  %105 = and i32 %9, %2
  %106 = shl i32 %105, 1
  %107 = or i32 %88, %2
  %108 = or i32 %40, %37
  %109 = shl i32 %94, 1
  %110 = or i32 %100, %2
  %111 = or i32 %18, %1
  %112 = xor i32 %111, -1
  %113 = or i32 %112, %0
  %114 = shl i32 %113, 1
  %115 = and i32 %34, %14
  %116 = or i32 %26, %115
  %117 = or i32 %5, %4
  %118 = or i32 %40, %36
  %119 = or i32 %40, %8
  %120 = shl i32 %119, 1
  %121 = and i32 %41, %1
  %122 = or i32 %5, %22
  %123 = xor i32 %26, %66
  %124 = xor i32 %40, %38
  %125 = or i32 %4, %50
  %126 = or i32 %112, %14
  %127 = or i32 %34, %4
  %128 = xor i32 %71, -1
  %129 = xor i32 %128, %2
  %130 = and i32 %12, %14
  %131 = and i32 %15, %0
  %132 = or i32 %130, %131
  %133 = and i32 %87, %6
  %134 = or i32 %22, %2
  %135 = or i32 %37, %0
  %136 = or i32 %18, %88
  %137 = and i32 %6, %8
  %138 = or i32 %4, %36
  %139 = and i32 %18, %22
  %140 = add i32 %21, 1
  %141 = or i32 %5, %100
  %142 = xor i32 %56, %4
  %143 = shl i32 %142, 1
  %144 = xor i32 %38, %0
  %145 = and i32 %73, %2
  %146 = or i32 %40, %88
  %147 = or i32 %50, %8
  %148 = shl i32 %147, 1
  %149 = or i32 %5, %71
  %150 = or i32 %4, %57
  %151 = xor i32 %131, -1
  %152 = xor i32 %130, %151
  %153 = or i32 %21, %18
  %154 = xor i32 %13, -1
  %155 = xor i32 %16, %154
  %156 = and i32 %5, %22
  %157 = xor i32 %87, %2
  %158 = and i32 %43, %22
  %159 = shl i32 %158, 2
  %160 = xor i32 %40, %9
  %161 = or i32 %19, %8
  %162 = xor i32 %19, %111
  %163 = and i32 %6, %22
  %164 = xor i32 %92, 1073741823
  %165 = or i32 %164, %13
  %166 = shl i32 %165, 2
  %167 = or i32 %111, %14
  %168 = xor i32 %19, %61
  %169 = and i32 %5, %128
  %170 = xor i32 %57, %1
  %171 = add i32 %34, 1
  %172 = xor i32 %37, %0
  %173 = xor i32 %40, %87
  %174 = and i32 %34, %0
  %175 = or i32 %93, %174
  %176 = shl i32 %175, 1
  %177 = shl i32 %174, 1
  %178 = and i32 %20, %8
  %179 = shl i32 %178, 1
  %180 = or i32 %25, %71
  %181 = shl i32 %180, 1
  %182 = xor i32 %43, %4
  %183 = xor i32 %112, %0
  %184 = xor i32 %111, %4
  %185 = xor i32 %71, %2
  %186 = or i32 %6, %1
  %187 = and i32 %61, %14
  %188 = xor i32 %56, %1
  %189 = and i32 %54, %73
  %190 = or i32 %61, %14
  %191 = and i32 %87, %18
  %192 = and i32 %6, %73
  %193 = or i32 %6, %22
  %194 = xor i32 %13, %92
  %195 = add i32 %19, 1
  %196 = and i32 %128, %2
  %197 = xor i32 %50, %1
  %198 = xor i32 %111, %0
  %199 = or i32 %26, %28
  %200 = and i32 %21, %41
  %201 = xor i32 %9, %2
  %202 = shl i32 %201, 1
  %203 = shl i32 %19, 1
  %204 = or i32 %71, %2
  %205 = and i32 %5, %87
  %206 = shl i32 %205, 1
  %207 = and i32 %54, %0
  %208 = or i32 %36, %14
  %209 = and i32 %38, %0
  %210 = or i32 %34, %100
  %211 = and i32 %5, %9
  %212 = or i32 %5, %88
  %213 = or i32 %5, %21
  %214 = and i32 %21, %6
  %215 = or i32 %71, %6
  %216 = and i32 %87, %54
  %217 = and i32 %18, %73
  %218 = and i32 %54, %14
  %219 = xor i32 %174, %95
  %220 = xor i32 %100, %2
  %221 = and i32 %9, %54
  %222 = xor i32 %41, %1
  %223 = xor i32 %20, %1
  %224 = shl i32 %223, 1
  %225 = and i32 %34, %9
  %226 = or i32 %71, %18
  %227 = and i32 %34, %128
  %228 = shl i32 %38, 1
  %229 = xor i32 %79, %154
  %230 = or i32 %71, %54
  %231 = and i32 %56, %21
  %232 = or i32 %27, %14
  %233 = and i32 %56, %22
  %234 = or i32 %18, %22
  %235 = or i32 %4, %2
  %236 = xor i32 %19, %1
  %237 = xor i32 %13, %67
  %238 = or i32 %19, %1
  %239 = xor i32 %36, %0
  %240 = shl i32 %239, 1
  %241 = or i32 %50, %1
  %242 = and i32 %111, %0
  %243 = or i32 %19, %112
  %244 = shl i32 %243, 1
  %245 = shl i32 %5, 1
  %246 = or i32 %19, %22
  %247 = and i32 %36, %14
  %248 = mul i32 %247, -19
  %249 = and i32 %37, %14
  %250 = mul i32 %249, -6
  %251 = and i32 %36, %0
  %252 = shl i32 %251, 2
  %253 = and i32 %37, %0
  %254 = mul i32 %253, -15
  %255 = and i32 %112, %14
  %256 = mul i32 %255, 21
  %257 = mul i32 %93, -18
  %258 = and i32 %112, %0
  %259 = mul i32 %258, 27
  %260 = add i32 %9, %2
  %261 = add i32 %260, %21
  %262 = add i32 %261, %37
  %263 = add i32 %262, %204
  %264 = add i32 %263, %31
  %265 = add i32 %264, %232
  %266 = add i32 %265, %238
  %267 = add i32 %266, %221
  %268 = add i32 %267, %218
  %269 = add i32 %268, %186
  %270 = add i32 %269, %66
  %271 = add i32 %270, %70
  %272 = add i32 %271, %46
  %273 = shl i32 %272, 1
  %274 = sub i32 %139, %209
  %275 = add i32 %274, %26
  %276 = add i32 %275, %197
  %277 = add i32 %276, %173
  %278 = add i32 %277, %117
  %279 = mul i32 %278, 5
  %280 = xor i32 %45, -1
  %281 = add i32 %122, %280
  %282 = mul i32 %281, 3
  %283 = add i32 %0, -3
  %284 = sub i32 %283, %24
  %285 = add i32 %284, %18
  %286 = sub i32 %285, %83
  %287 = add i32 %286, %140
  %288 = sub i32 %287, %27
  %289 = sub i32 %288, %64
  %290 = sub i32 %289, %69
  %291 = add i32 %290, %74
  %292 = sub i32 %291, %107
  %293 = sub i32 %292, %110
  %294 = add i32 %293, %129
  %295 = sub i32 %294, %134
  %296 = sub i32 %295, %34
  %297 = add i32 %296, %136
  %298 = sub i32 %297, %27
  %299 = add i32 %298, %111
  %300 = sub i32 %299, %145
  %301 = add i32 %300, %153
  %302 = sub i32 %301, %157
  %303 = add i32 %302, %171
  %304 = add i32 %303, %185
  %305 = add i32 %304, %191
  %306 = add i32 %305, %195
  %307 = sub i32 %306, %196
  %308 = add i32 %307, %217
  %309 = add i32 %308, %220
  %310 = add i32 %309, %50
  %311 = add i32 %310, %6
  %312 = sub i32 %311, %226
  %313 = sub i32 %312, %234
  %314 = add i32 %313, %235
  %315 = sub i32 %314, %23
  %316 = sub i32 %315, %33
  %317 = sub i32 %316, %35
  %318 = add i32 %317, %39
  %319 = sub i32 %318, %42
  %320 = add i32 %319, %44
  %321 = add i32 %320, %47
  %322 = sub i32 %321, %51
  %323 = sub i32 %322, %53
  %324 = add i32 %323, %55
  %325 = sub i32 %324, %58
  %326 = sub i32 %325, %59
  %327 = sub i32 %326, %60
  %328 = add i32 %327, %62
  %329 = add i32 %328, %63
  %330 = add i32 %329, %65
  %331 = add i32 %330, %72
  %332 = add i32 %331, %75
  %333 = add i32 %332, %76
  %334 = sub i32 %333, %81
  %335 = add i32 %334, %82
  %336 = sub i32 %335, %84
  %337 = sub i32 %336, %85
  %338 = add i32 %337, %86
  %339 = add i32 %338, %89
  %340 = sub i32 %339, %92
  %341 = add i32 %340, %104
  %342 = sub i32 %341, %106
  %343 = sub i32 %342, %108
  %344 = add i32 %343, %118
  %345 = add i32 %344, %121
  %346 = sub i32 %345, %28
  %347 = add i32 %346, %124
  %348 = sub i32 %347, %125
  %349 = sub i32 %348, %126
  %350 = sub i32 %349, %127
  %351 = add i32 %350, %133
  %352 = sub i32 %351, %135
  %353 = sub i32 %352, %137
  %354 = sub i32 %353, %138
  %355 = add i32 %354, %115
  %356 = add i32 %355, %141
  %357 = sub i32 %356, %144
  %358 = sub i32 %357, %146
  %359 = add i32 %358, %149
  %360 = add i32 %359, %150
  %361 = sub i32 %360, %156
  %362 = add i32 %361, %160
  %363 = sub i32 %362, %161
  %364 = sub i32 %363, %162
  %365 = add i32 %364, %163
  %366 = sub i32 %365, %167
  %367 = sub i32 %366, %168
  %368 = add i32 %367, %169
  %369 = add i32 %368, %170
  %370 = sub i32 %369, %172
  %371 = add i32 %370, %182
  %372 = sub i32 %371, %183
  %373 = sub i32 %372, %184
  %374 = add i32 %373, %187
  %375 = sub i32 %374, %90
  %376 = add i32 %375, %188
  %377 = add i32 %376, %189
  %378 = add i32 %377, %190
  %379 = add i32 %378, %192
  %380 = add i32 %379, %193
  %381 = sub i32 %380, %198
  %382 = add i32 %381, %200
  %383 = sub i32 %382, %202
  %384 = sub i32 %383, %203
  %385 = add i32 %384, %207
  %386 = sub i32 %385, %208
  %387 = sub i32 %386, %210
  %388 = add i32 %387, %211
  %389 = add i32 %388, %212
  %390 = add i32 %389, %213
  %391 = add i32 %390, %214
  %392 = add i32 %391, %215
  %393 = add i32 %392, %216
  %394 = sub i32 %393, %222
  %395 = sub i32 %394, %225
  %396 = sub i32 %395, %227
  %397 = sub i32 %396, %228
  %398 = sub i32 %397, %230
  %399 = sub i32 %398, %231
  %400 = add i32 %399, %233
  %401 = sub i32 %400, %236
  %402 = add i32 %401, %241
  %403 = add i32 %402, %242
  %404 = sub i32 %403, %245
  %405 = add i32 %404, %246
  %406 = add i32 %405, %17
  %407 = add i32 %406, %30
  %408 = sub i32 %407, %49
  %409 = sub i32 %408, %68
  %410 = sub i32 %409, %78
  %411 = add i32 %410, %80
  %412 = sub i32 %411, %91
  %413 = add i32 %412, %96
  %414 = sub i32 %413, %98
  %415 = sub i32 %414, %99
  %416 = sub i32 %415, %102
  %417 = sub i32 %416, %103
  %418 = sub i32 %417, %109
  %419 = sub i32 %418, %114
  %420 = sub i32 %419, %116
  %421 = sub i32 %420, %120
  %422 = add i32 %421, %123
  %423 = sub i32 %422, %132
  %424 = sub i32 %423, %143
  %425 = sub i32 %424, %148
  %426 = add i32 %425, %152
  %427 = add i32 %426, %155
  %428 = sub i32 %427, %159
  %429 = sub i32 %428, %177
  %430 = sub i32 %429, %179
  %431 = sub i32 %430, %181
  %432 = sub i32 %431, %194
  %433 = add i32 %432, %199
  %434 = sub i32 %433, %206
  %435 = sub i32 %434, %219
  %436 = sub i32 %435, %224
  %437 = add i32 %436, %229
  %438 = add i32 %437, %237
  %439 = sub i32 %438, %240
  %440 = sub i32 %439, %244
  %441 = add i32 %440, %248
  %442 = add i32 %441, %250
  %443 = sub i32 %442, %252
  %444 = add i32 %443, %254
  %445 = add i32 %444, %256
  %446 = add i32 %445, %257
  %447 = add i32 %446, %259
  %448 = sub i32 %447, %176
  %449 = add i32 %448, %166
  %450 = add i32 %449, %282
  %451 = add i32 %450, %279
  %452 = add i32 %451, %273
  %453 = icmp eq i32 %11, %452
  %454 = select i1 %453, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %455 = tail call i32 @puts(i8* nonnull dereferenceable(1) %454)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
