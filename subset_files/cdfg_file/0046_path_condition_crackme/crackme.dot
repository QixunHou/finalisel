digraph "DFG for'crackme' function" {
	Node0x1b1fd40[shape=record, label="  %5 = shl i32 %1, 1"];
	Node0x1b1fde0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x1b1fe80[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x1b1fef0[shape=record, label="  %8 = add i32 %6, %7"];
	Node0x1b1ff60[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x1b1ffd0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1b20040[shape=record, label="  %11 = add i32 %8, %10"];
	Node0x1b200b0[shape=record, label="  %12 = xor i32 %2, -1"];
	Node0x1b20120[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x1b20190[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1b20200[shape=record, label="  %15 = shl i32 %2, 1"];
	Node0x1b20270[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x1b202e0[shape=record, label="  %17 = or i32 %12, %1"];
	Node0x1b20350[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x1b203c0[shape=record, label="  %19 = and i32 %2, %1"];
	Node0x1b20430[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x1b204a0[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x1b20510[shape=record, label="  %22 = xor i32 %2, %1"];
	Node0x1b20580[shape=record, label="  %23 = xor i32 %18, -2"];
	Node0x1b20620[shape=record, label="  %24 = mul i32 %13, -6"];
	Node0x1b20690[shape=record, label="  %25 = and i32 %7, %3"];
	Node0x1b20700[shape=record, label="  %26 = xor i32 %3, -1"];
	Node0x1b20770[shape=record, label="  %27 = or i32 %3, %0"];
	Node0x1b207e0[shape=record, label="  %28 = xor i32 %3, %0"];
	Node0x1b20850[shape=record, label="  %29 = and i32 %26, %0"];
	Node0x1b208c0[shape=record, label="  %30 = sub i32 %16, %27"];
	Node0x1b20960[shape=record, label="  %31 = mul i32 %30, 3"];
	Node0x1b209d0[shape=record, label="  %32 = add i32 %25, %22"];
	Node0x1b20c50[shape=record, label="  %33 = shl i32 %32, 1"];
	Node0x1b20cf0[shape=record, label="  %34 = add i32 %0, 2"];
	Node0x1b20d60[shape=record, label="  %35 = sub i32 %34, %1"];
	Node0x1b20dd0[shape=record, label="  %36 = sub i32 %35, %15"];
	Node0x1b20e40[shape=record, label="  %37 = add i32 %36, %14"];
	Node0x1b20eb0[shape=record, label="  %38 = add i32 %37, %16"];
	Node0x1b20f20[shape=record, label="  %39 = sub i32 %38, %19"];
	Node0x1b20f90[shape=record, label="  %40 = add i32 %39, %26"];
	Node0x1b21000[shape=record, label="  %41 = add i32 %40, %18"];
	Node0x1b21070[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x1b210e0[shape=record, label="  %43 = add i32 %42, %27"];
	Node0x1b21150[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x1b211c0[shape=record, label="  %45 = sub i32 %44, %29"];
	Node0x1b21230[shape=record, label="  %46 = add i32 %45, %21"];
	Node0x1b212a0[shape=record, label="  %47 = sub i32 %46, %23"];
	Node0x1b21310[shape=record, label="  %48 = add i32 %47, %31"];
	Node0x1b21380[shape=record, label="  %49 = add i32 %48, %33"];
	Node0x1b213f0[shape=record, label="  %50 = icmp eq i32 %11, %49"];
	Node0x1ac0268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b21890[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x1b218e0[shape=record, label="  ret void"];
	Node0x1b1fd40 -> Node0x1b1fde0;
	Node0x1b1fde0 -> Node0x1b1fe80;
	Node0x1b1fe80 -> Node0x1b1fef0;
	Node0x1b1fef0 -> Node0x1b1ff60;
	Node0x1b1ff60 -> Node0x1b1ffd0;
	Node0x1b1ffd0 -> Node0x1b20040;
	Node0x1b20040 -> Node0x1b200b0;
	Node0x1b200b0 -> Node0x1b20120;
	Node0x1b20120 -> Node0x1b20190;
	Node0x1b20190 -> Node0x1b20200;
	Node0x1b20200 -> Node0x1b20270;
	Node0x1b20270 -> Node0x1b202e0;
	Node0x1b202e0 -> Node0x1b20350;
	Node0x1b20350 -> Node0x1b203c0;
	Node0x1b203c0 -> Node0x1b20430;
	Node0x1b20430 -> Node0x1b204a0;
	Node0x1b204a0 -> Node0x1b20510;
	Node0x1b20510 -> Node0x1b20580;
	Node0x1b20580 -> Node0x1b20620;
	Node0x1b20620 -> Node0x1b20690;
	Node0x1b20690 -> Node0x1b20700;
	Node0x1b20700 -> Node0x1b20770;
	Node0x1b20770 -> Node0x1b207e0;
	Node0x1b207e0 -> Node0x1b20850;
	Node0x1b20850 -> Node0x1b208c0;
	Node0x1b208c0 -> Node0x1b20960;
	Node0x1b20960 -> Node0x1b209d0;
	Node0x1b209d0 -> Node0x1b20c50;
	Node0x1b20c50 -> Node0x1b20cf0;
	Node0x1b20cf0 -> Node0x1b20d60;
	Node0x1b20d60 -> Node0x1b20dd0;
	Node0x1b20dd0 -> Node0x1b20e40;
	Node0x1b20e40 -> Node0x1b20eb0;
	Node0x1b20eb0 -> Node0x1b20f20;
	Node0x1b20f20 -> Node0x1b20f90;
	Node0x1b20f90 -> Node0x1b21000;
	Node0x1b21000 -> Node0x1b21070;
	Node0x1b21070 -> Node0x1b210e0;
	Node0x1b210e0 -> Node0x1b21150;
	Node0x1b21150 -> Node0x1b211c0;
	Node0x1b211c0 -> Node0x1b21230;
	Node0x1b21230 -> Node0x1b212a0;
	Node0x1b212a0 -> Node0x1b21310;
	Node0x1b21310 -> Node0x1b21380;
	Node0x1b21380 -> Node0x1b213f0;
	Node0x1b213f0 -> Node0x1ac0268;
	Node0x1ac0268 -> Node0x1b21890;
	Node0x1b21890 -> Node0x1b218e0;
edge [color=red]
	Node0x1b1fd40 -> Node0x1b1fde0;
	Node0x1b1fde0 -> Node0x1b1fef0;
	Node0x1b1fe80 -> Node0x1b1fef0;
	Node0x1b1ff60 -> Node0x1b1ffd0;
	Node0x1b1fef0 -> Node0x1b20040;
	Node0x1b1ffd0 -> Node0x1b20040;
	Node0x1b200b0 -> Node0x1b20120;
	Node0x1b20120 -> Node0x1b20190;
	Node0x1b200b0 -> Node0x1b202e0;
	Node0x1b202e0 -> Node0x1b20350;
	Node0x1b203c0 -> Node0x1b20430;
	Node0x1b20430 -> Node0x1b204a0;
	Node0x1b20350 -> Node0x1b20580;
	Node0x1b20120 -> Node0x1b20620;
	Node0x1b1fe80 -> Node0x1b20690;
	Node0x1b20700 -> Node0x1b20850;
	Node0x1b20270 -> Node0x1b208c0;
	Node0x1b20770 -> Node0x1b208c0;
	Node0x1b208c0 -> Node0x1b20960;
	Node0x1b20690 -> Node0x1b209d0;
	Node0x1b20510 -> Node0x1b209d0;
	Node0x1b209d0 -> Node0x1b20c50;
	Node0x1b20cf0 -> Node0x1b20d60;
	Node0x1b20d60 -> Node0x1b20dd0;
	Node0x1b20200 -> Node0x1b20dd0;
	Node0x1b20dd0 -> Node0x1b20e40;
	Node0x1b20190 -> Node0x1b20e40;
	Node0x1b20e40 -> Node0x1b20eb0;
	Node0x1b20270 -> Node0x1b20eb0;
	Node0x1b20eb0 -> Node0x1b20f20;
	Node0x1b203c0 -> Node0x1b20f20;
	Node0x1b20f20 -> Node0x1b20f90;
	Node0x1b20700 -> Node0x1b20f90;
	Node0x1b20f90 -> Node0x1b21000;
	Node0x1b20350 -> Node0x1b21000;
	Node0x1b21000 -> Node0x1b21070;
	Node0x1b20620 -> Node0x1b21070;
	Node0x1b21070 -> Node0x1b210e0;
	Node0x1b20770 -> Node0x1b210e0;
	Node0x1b210e0 -> Node0x1b21150;
	Node0x1b207e0 -> Node0x1b21150;
	Node0x1b21150 -> Node0x1b211c0;
	Node0x1b20850 -> Node0x1b211c0;
	Node0x1b211c0 -> Node0x1b21230;
	Node0x1b204a0 -> Node0x1b21230;
	Node0x1b21230 -> Node0x1b212a0;
	Node0x1b20580 -> Node0x1b212a0;
	Node0x1b212a0 -> Node0x1b21310;
	Node0x1b20960 -> Node0x1b21310;
	Node0x1b21310 -> Node0x1b21380;
	Node0x1b20c50 -> Node0x1b21380;
	Node0x1b20040 -> Node0x1b213f0;
	Node0x1b21380 -> Node0x1b213f0;
	Node0x1b213f0 -> Node0x1ac0268;
	Node0x1ac0268 -> Node0x1b21890;
}
