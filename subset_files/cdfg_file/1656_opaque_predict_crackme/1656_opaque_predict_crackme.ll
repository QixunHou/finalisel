; ModuleID = '../.././c_source_file/1656_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1656_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = and i32 %2, %0
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %7, %10
  %12 = shl i32 %11, 1
  %13 = add i32 %6, %12
  %14 = xor i32 %4, -1
  %15 = or i32 %14, %3
  %16 = shl i32 %14, 1
  %17 = and i32 %14, %3
  %18 = or i32 %4, %3
  %19 = shl i32 %18, 1
  %20 = and i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = xor i32 %19, -2
  %24 = shl i32 %15, 1
  %25 = xor i32 %24, -2
  %26 = or i32 %1, %0
  %27 = xor i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = and i32 %26, %28
  %30 = xor i32 %2, %0
  %31 = or i32 %30, %1
  %32 = and i32 %8, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %33, %2
  %35 = xor i32 %2, -1
  %36 = and i32 %35, %1
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %0
  %39 = and i32 %30, %9
  %40 = xor i32 %7, %9
  %41 = or i32 %35, %10
  %42 = xor i32 %26, -1
  %43 = xor i32 %42, %2
  %44 = and i32 %8, %2
  %45 = and i32 %44, %0
  %46 = or i32 %27, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %45, %47
  %49 = or i32 %35, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %8
  %52 = and i32 %49, %8
  %53 = xor i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = add i32 %53, 1
  %56 = or i32 %35, %42
  %57 = or i32 %2, %1
  %58 = or i32 %57, %0
  %59 = and i32 %35, %0
  %60 = or i32 %59, %8
  %61 = xor i32 %59, -1
  %62 = xor i32 %61, %1
  %63 = xor i32 %9, %2
  %64 = and i32 %1, %0
  %65 = or i32 %64, %50
  %66 = xor i32 %0, -1
  %67 = or i32 %35, %1
  %68 = xor i32 %67, -1
  %69 = or i32 %68, %66
  %70 = and i32 %30, %26
  %71 = xor i32 %68, %0
  %72 = or i32 %2, %0
  %73 = and i32 %72, %8
  %74 = xor i32 %72, %1
  %75 = xor i32 %10, %2
  %76 = xor i32 %72, -1
  %77 = xor i32 %76, %1
  %78 = xor i32 %30, -1
  %79 = and i32 %78, %54
  %80 = xor i32 %64, -1
  %81 = and i32 %67, %0
  %82 = add i32 %32, 1
  %83 = or i32 %32, %28
  %84 = xor i32 %37, %0
  %85 = xor i32 %49, %1
  %86 = xor i32 %26, %2
  %87 = and i32 %2, %1
  %88 = and i32 %87, %0
  %89 = xor i32 %57, %0
  %90 = or i32 %88, %89
  %91 = xor i32 %49, %64
  %92 = and i32 %30, %33
  %93 = xor i32 %57, -1
  %94 = or i32 %93, %0
  %95 = or i32 %30, %42
  %96 = or i32 %54, %2
  %97 = or i32 %78, %8
  %98 = and i32 %30, %53
  %99 = or i32 %64, %93
  %100 = and i32 %57, %66
  %101 = xor i32 %100, 2147483647
  %102 = xor i32 %101, %88
  %103 = or i32 %7, %1
  %104 = shl i32 %103, 1
  %105 = xor i32 %64, %2
  %106 = and i32 %27, %9
  %107 = xor i32 %87, -1
  %108 = or i32 %107, %0
  %109 = shl i32 %108, 1
  %110 = xor i32 %7, -1
  %111 = and i32 %110, %8
  %112 = or i32 %8, %2
  %113 = and i32 %112, %66
  %114 = xor i32 %45, -1
  %115 = xor i32 %113, %114
  %116 = or i32 %64, %2
  %117 = and i32 %72, %1
  %118 = and i32 %9, %2
  %119 = xor i32 %59, %107
  %120 = and i32 %107, %0
  %121 = and i32 %54, %2
  %122 = and i32 %53, %78
  %123 = or i32 %78, %1
  %124 = and i32 %35, %54
  %125 = and i32 %61, %54
  %126 = or i32 %27, %32
  %127 = or i32 %7, %93
  %128 = or i32 %87, %66
  %129 = xor i32 %32, %107
  %130 = xor i32 %45, %46
  %131 = and i32 %49, %54
  %132 = and i32 %53, %61
  %133 = or i32 %93, %66
  %134 = and i32 %110, %54
  %135 = or i32 %64, %76
  %136 = and i32 %30, %54
  %137 = or i32 %28, %42
  %138 = shl i32 %137, 1
  %139 = and i32 %61, %8
  %140 = and i32 %33, %2
  %141 = or i32 %27, %64
  %142 = shl i32 %141, 1
  %143 = or i32 %59, %68
  %144 = and i32 %35, %80
  %145 = xor i32 %27, %0
  %146 = xor i32 %145, -1
  %147 = xor i32 %45, %146
  %148 = or i32 %7, %54
  %149 = and i32 %53, %35
  %150 = xor i32 %28, %0
  %151 = and i32 %107, %66
  %152 = xor i32 %87, %0
  %153 = and i32 %30, %80
  %154 = and i32 %44, %66
  %155 = and i32 %112, %0
  %156 = or i32 %154, %155
  %157 = and i32 %27, %66
  %158 = or i32 %88, %157
  %159 = shl i32 %158, 1
  %160 = or i32 %53, %78
  %161 = and i32 %61, %1
  %162 = or i32 %36, %66
  %163 = and i32 %78, %80
  %164 = shl i32 %163, 1
  %165 = shl i32 %100, 1
  %166 = xor i32 %155, -1
  %167 = xor i32 %154, %166
  %168 = or i32 %28, %0
  %169 = and i32 %67, %66
  %170 = shl i32 %169, 1
  %171 = or i32 %30, %54
  %172 = or i32 %59, %87
  %173 = or i32 %67, %0
  %174 = and i32 %78, %1
  %175 = and i32 %110, %1
  %176 = xor i32 %107, %0
  %177 = or i32 %53, %76
  %178 = and i32 %78, %8
  %179 = xor i32 %67, %0
  %180 = and i32 %27, %33
  %181 = and i32 %87, %66
  %182 = and i32 %27, %0
  %183 = or i32 %181, %182
  %184 = xor i32 %89, -1
  %185 = xor i32 %88, %184
  %186 = xor i32 %7, %37
  %187 = and i32 %53, %110
  %188 = or i32 %76, %54
  %189 = or i32 %64, %78
  %190 = xor i32 %182, -1
  %191 = xor i32 %181, %190
  %192 = or i32 %45, %113
  %193 = or i32 %27, %42
  %194 = xor i32 %32, %2
  %195 = shl i32 %194, 1
  %196 = xor i32 %88, %145
  %197 = and i32 %53, %2
  %198 = add i32 %2, 1
  %199 = and i32 %49, %1
  %200 = or i32 %107, %66
  %201 = xor i32 %112, %0
  %202 = xor i32 %201, %114
  %203 = xor i32 %59, %67
  %204 = or i32 %53, %35
  %205 = or i32 %78, %54
  %206 = and i32 %26, %35
  %207 = or i32 %27, %66
  %208 = xor i32 %154, %207
  %209 = shl i32 %208, 1
  %210 = xor i32 %7, %1
  %211 = xor i32 %93, %0
  %212 = or i32 %64, %35
  %213 = or i32 %7, %8
  %214 = or i32 %28, %10
  %215 = shl i32 %214, 1
  %216 = or i32 %76, %8
  %217 = xor i32 %32, %37
  %218 = or i32 %7, %42
  %219 = or i32 %87, %0
  %220 = shl i32 %219, 1
  %221 = or i32 %78, %42
  %222 = or i32 %59, %53
  %223 = or i32 %36, %0
  %224 = add i32 %36, 1
  %225 = or i32 %68, %0
  %226 = and i32 %28, %33
  %227 = shl i32 %226, 2
  %228 = or i32 %67, %66
  %229 = xor i32 %7, %57
  %230 = and i32 %28, %0
  %231 = and i32 %57, %0
  %232 = or i32 %32, %2
  %233 = and i32 %80, %2
  %234 = or i32 %7, %36
  %235 = and i32 %72, %54
  %236 = xor i32 %57, %64
  %237 = or i32 %32, %78
  %238 = or i32 %76, %1
  %239 = or i32 %30, %8
  %240 = and i32 %30, %1
  %241 = or i32 %28, %66
  %242 = and i32 %26, %2
  %243 = or i32 %42, %2
  %244 = or i32 %45, %201
  %245 = or i32 %53, %2
  %246 = and i32 %72, %53
  %247 = and i32 %9, %28
  %248 = shl i32 %247, 1
  %249 = or i32 %30, %10
  %250 = or i32 %45, %145
  %251 = and i32 %9, %78
  %252 = xor i32 %59, %1
  %253 = xor i32 %207, -1
  %254 = or i32 %154, %253
  %255 = and i32 %49, %53
  %256 = or i32 %78, %10
  %257 = or i32 %88, %146
  %258 = and i32 %27, %80
  %259 = xor i32 %110, %1
  %260 = or i32 %32, %35
  %261 = shl i32 %260, 1
  %262 = or i32 %37, %66
  %263 = and i32 %28, %80
  %264 = xor i32 %7, %26
  %265 = or i32 %181, %231
  %266 = or i32 %53, %50
  %267 = and i32 %9, %35
  %268 = or i32 %57, %66
  %269 = or i32 %10, %2
  %270 = or i32 %30, %32
  %271 = xor i32 %36, %0
  %272 = and i32 %93, %66
  %273 = shl i32 %272, 3
  %274 = and i32 %36, %66
  %275 = shl i32 %274, 1
  %276 = and i32 %93, %0
  %277 = mul i32 %276, 7
  %278 = and i32 %36, %0
  %279 = and i32 %68, %66
  %280 = shl i32 %279, 2
  %281 = and i32 %68, %0
  %282 = add i32 %93, %8
  %283 = add i32 %282, %67
  %284 = add i32 %283, %264
  %285 = add i32 %284, %229
  %286 = add i32 %285, %187
  %287 = add i32 %286, %178
  %288 = add i32 %287, %175
  %289 = add i32 %288, %132
  %290 = add i32 %289, %98
  %291 = add i32 %290, %97
  %292 = add i32 %291, %77
  %293 = add i32 %292, %62
  %294 = add i32 %293, %265
  %295 = add i32 %294, %183
  %296 = add i32 %295, %130
  %297 = add i32 %81, %212
  %298 = add i32 %297, %167
  %299 = mul i32 %298, -5
  %300 = add i32 %199, %107
  %301 = add i32 %300, %205
  %302 = shl i32 %301, 2
  %303 = sub i32 %181, %281
  %304 = mul i32 %303, 6
  %305 = add i32 %88, %278
  %306 = shl i32 %305, 4
  %307 = add i32 %296, %17
  %308 = add i32 %307, %102
  %309 = shl i32 %308, 1
  %310 = add i32 %41, -1
  %311 = add i32 %310, %203
  %312 = add i32 %311, %176
  %313 = add i32 %312, %20
  %314 = sub i32 %313, %48
  %315 = mul i32 %314, 3
  %316 = sub i32 2, %0
  %317 = sub i32 %316, %0
  %318 = sub i32 %317, %1
  %319 = add i32 %318, %55
  %320 = add i32 %319, %82
  %321 = sub i32 %320, %9
  %322 = add i32 %321, %53
  %323 = add i32 %322, %10
  %324 = sub i32 %323, %32
  %325 = add i32 %324, %198
  %326 = add i32 %325, %2
  %327 = sub i32 %326, %34
  %328 = sub i32 %327, %43
  %329 = sub i32 %328, %56
  %330 = sub i32 %329, %63
  %331 = add i32 %330, %75
  %332 = sub i32 %331, %86
  %333 = add i32 %332, %61
  %334 = sub i32 %333, %36
  %335 = add i32 %334, %96
  %336 = add i32 %335, %105
  %337 = add i32 %336, %116
  %338 = add i32 %337, %118
  %339 = add i32 %338, %121
  %340 = add i32 %339, %124
  %341 = sub i32 %340, %59
  %342 = sub i32 %341, %140
  %343 = add i32 %342, %144
  %344 = add i32 %343, %149
  %345 = add i32 %344, %68
  %346 = add i32 %345, %28
  %347 = sub i32 %346, %27
  %348 = add i32 %347, %197
  %349 = sub i32 %348, %204
  %350 = sub i32 %349, %206
  %351 = add i32 %350, %224
  %352 = sub i32 %351, %57
  %353 = sub i32 %352, %72
  %354 = sub i32 %353, %232
  %355 = sub i32 %354, %233
  %356 = add i32 %355, %242
  %357 = add i32 %356, %243
  %358 = sub i32 %357, %245
  %359 = add i32 %358, %7
  %360 = sub i32 %359, %267
  %361 = sub i32 %360, %269
  %362 = add i32 %361, %4
  %363 = add i32 %362, %29
  %364 = add i32 %363, %31
  %365 = sub i32 %364, %38
  %366 = sub i32 %365, %39
  %367 = add i32 %366, %40
  %368 = add i32 %367, %51
  %369 = sub i32 %368, %52
  %370 = add i32 %369, %58
  %371 = add i32 %370, %60
  %372 = add i32 %371, %65
  %373 = add i32 %372, %69
  %374 = add i32 %373, %70
  %375 = add i32 %374, %71
  %376 = add i32 %375, %73
  %377 = sub i32 %376, %74
  %378 = sub i32 %377, %79
  %379 = add i32 %378, %83
  %380 = sub i32 %379, %84
  %381 = add i32 %380, %85
  %382 = add i32 %381, %91
  %383 = add i32 %382, %92
  %384 = add i32 %383, %94
  %385 = sub i32 %384, %95
  %386 = sub i32 %385, %99
  %387 = sub i32 %386, %106
  %388 = sub i32 %387, %111
  %389 = add i32 %388, %117
  %390 = sub i32 %389, %119
  %391 = sub i32 %390, %120
  %392 = sub i32 %391, %122
  %393 = sub i32 %392, %123
  %394 = add i32 %393, %125
  %395 = sub i32 %394, %126
  %396 = add i32 %395, %127
  %397 = sub i32 %396, %128
  %398 = add i32 %397, %129
  %399 = sub i32 %398, %131
  %400 = sub i32 %399, %133
  %401 = sub i32 %400, %134
  %402 = add i32 %401, %135
  %403 = sub i32 %402, %136
  %404 = sub i32 %403, %139
  %405 = sub i32 %404, %143
  %406 = sub i32 %405, %148
  %407 = sub i32 %406, %150
  %408 = add i32 %407, %151
  %409 = sub i32 %408, %152
  %410 = add i32 %409, %153
  %411 = add i32 %410, %89
  %412 = add i32 %411, %160
  %413 = sub i32 %412, %161
  %414 = sub i32 %413, %162
  %415 = sub i32 %414, %168
  %416 = sub i32 %415, %171
  %417 = add i32 %416, %172
  %418 = add i32 %417, %173
  %419 = sub i32 %418, %174
  %420 = add i32 %419, %177
  %421 = sub i32 %420, %179
  %422 = add i32 %421, %180
  %423 = add i32 %422, %186
  %424 = sub i32 %423, %188
  %425 = add i32 %424, %182
  %426 = sub i32 %425, %189
  %427 = add i32 %426, %193
  %428 = sub i32 %427, %195
  %429 = sub i32 %428, %200
  %430 = sub i32 %429, %145
  %431 = add i32 %430, %210
  %432 = sub i32 %431, %211
  %433 = add i32 %432, %213
  %434 = add i32 %433, %216
  %435 = sub i32 %434, %217
  %436 = sub i32 %435, %218
  %437 = add i32 %436, %221
  %438 = add i32 %437, %222
  %439 = add i32 %438, %223
  %440 = sub i32 %439, %225
  %441 = sub i32 %440, %228
  %442 = sub i32 %441, %230
  %443 = sub i32 %442, %231
  %444 = add i32 %443, %234
  %445 = sub i32 %444, %235
  %446 = sub i32 %445, %236
  %447 = add i32 %446, %237
  %448 = add i32 %447, %207
  %449 = sub i32 %448, %238
  %450 = add i32 %449, %239
  %451 = sub i32 %450, %240
  %452 = sub i32 %451, %241
  %453 = sub i32 %452, %246
  %454 = sub i32 %453, %46
  %455 = sub i32 %454, %249
  %456 = sub i32 %455, %251
  %457 = sub i32 %456, %252
  %458 = sub i32 %457, %255
  %459 = add i32 %458, %256
  %460 = add i32 %459, %258
  %461 = add i32 %460, %259
  %462 = sub i32 %461, %261
  %463 = sub i32 %462, %262
  %464 = sub i32 %463, %263
  %465 = add i32 %464, %266
  %466 = add i32 %465, %268
  %467 = sub i32 %466, %270
  %468 = add i32 %467, %271
  %469 = sub i32 %468, %15
  %470 = add i32 %469, %16
  %471 = sub i32 %470, %6
  %472 = add i32 %471, %90
  %473 = sub i32 %472, %104
  %474 = sub i32 %473, %109
  %475 = sub i32 %474, %115
  %476 = sub i32 %475, %138
  %477 = sub i32 %476, %142
  %478 = sub i32 %477, %147
  %479 = sub i32 %478, %156
  %480 = sub i32 %479, %164
  %481 = sub i32 %480, %165
  %482 = sub i32 %481, %170
  %483 = add i32 %482, %185
  %484 = add i32 %483, %191
  %485 = add i32 %484, %192
  %486 = sub i32 %485, %196
  %487 = sub i32 %486, %202
  %488 = sub i32 %487, %215
  %489 = sub i32 %488, %220
  %490 = sub i32 %489, %227
  %491 = sub i32 %490, %244
  %492 = sub i32 %491, %248
  %493 = add i32 %492, %250
  %494 = add i32 %493, %254
  %495 = sub i32 %494, %257
  %496 = add i32 %495, %273
  %497 = sub i32 %496, %275
  %498 = add i32 %497, %277
  %499 = sub i32 %498, %280
  %500 = sub i32 %499, %19
  %501 = sub i32 %500, %159
  %502 = sub i32 %501, %209
  %503 = add i32 %502, %304
  %504 = add i32 %503, %306
  %505 = add i32 %504, %22
  %506 = sub i32 %505, %23
  %507 = add i32 %506, %25
  %508 = add i32 %507, %302
  %509 = add i32 %508, %299
  %510 = add i32 %509, %315
  %511 = add i32 %510, %309
  %512 = icmp eq i32 %13, %511
  %513 = select i1 %512, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %514 = tail call i32 @puts(i8* nonnull dereferenceable(1) %513)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
