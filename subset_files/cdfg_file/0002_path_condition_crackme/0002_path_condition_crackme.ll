; ModuleID = '../.././c_source_file/0002_path_condition_crackme.c'
source_filename = "../.././c_source_file/0002_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = and i32 %4, %1
  %6 = or i32 %5, %0
  %7 = xor i32 %2, %1
  %8 = shl i32 %7, 2
  %9 = sub i32 %8, %6
  %10 = and i32 %2, %1
  %11 = or i32 %10, %0
  %12 = or i32 %1, %0
  %13 = and i32 %12, %4
  %14 = xor i32 %1, -1
  %15 = or i32 %4, %0
  %16 = and i32 %15, %14
  %17 = and i32 %1, %0
  %18 = xor i32 %17, -1
  %19 = xor i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = and i32 %20, %18
  %22 = and i32 %4, %0
  %23 = xor i32 %22, %1
  %24 = xor i32 %15, -1
  %25 = xor i32 %24, %1
  %26 = or i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %1, %0
  %29 = or i32 %28, %27
  %30 = or i32 %19, %1
  %31 = and i32 %2, %0
  %32 = or i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = or i32 %31, %33
  %35 = or i32 %14, %0
  %36 = and i32 %35, %2
  %37 = xor i32 %31, -1
  %38 = and i32 %37, %14
  %39 = and i32 %15, %1
  %40 = shl i32 %39, 1
  %41 = xor i32 %27, %1
  %42 = xor i32 %0, -1
  %43 = and i32 %14, %0
  %44 = or i32 %43, %2
  %45 = xor i32 %12, -1
  %46 = xor i32 %7, -1
  %47 = or i32 %46, %45
  %48 = and i32 %46, %0
  %49 = xor i32 %10, -1
  %50 = or i32 %49, %42
  %51 = xor i32 %35, -1
  %52 = or i32 %19, %51
  %53 = and i32 %14, %2
  %54 = and i32 %53, %0
  %55 = xor i32 %7, %0
  %56 = or i32 %54, %55
  %57 = xor i32 %28, -1
  %58 = or i32 %27, %57
  %59 = or i32 %4, %1
  %60 = xor i32 %59, -1
  %61 = or i32 %60, %0
  %62 = xor i32 %5, -1
  %63 = and i32 %62, %0
  %64 = or i32 %19, %43
  %65 = or i32 %22, %14
  %66 = and i32 %4, %18
  %67 = xor i32 %46, %0
  %68 = and i32 %28, %2
  %69 = or i32 %46, %0
  %70 = or i32 %32, %42
  %71 = xor i32 %31, %12
  %72 = and i32 %7, %42
  %73 = and i32 %7, %18
  %74 = or i32 %24, %14
  %75 = or i32 %17, %33
  %76 = shl i32 %75, 1
  %77 = and i32 %10, %42
  %78 = and i32 %7, %0
  %79 = xor i32 %77, -1
  %80 = xor i32 %78, %79
  %81 = and i32 %32, %0
  %82 = xor i32 %81, %79
  %83 = or i32 %62, %42
  %84 = or i32 %7, %17
  %85 = add i32 %7, 1
  %86 = or i32 %33, %0
  %87 = or i32 %27, %14
  %88 = xor i32 %31, %32
  %89 = and i32 %20, %57
  %90 = or i32 %20, %1
  %91 = shl i32 %90, 1
  %92 = or i32 %17, %27
  %93 = xor i32 %22, %59
  %94 = xor i32 %5, %0
  %95 = or i32 %24, %57
  %96 = or i32 %19, %45
  %97 = or i32 %60, %42
  %98 = and i32 %26, %1
  %99 = shl i32 %98, 1
  %100 = or i32 %33, %42
  %101 = or i32 %4, %51
  %102 = and i32 %19, %1
  %103 = or i32 %10, %42
  %104 = or i32 %46, %51
  %105 = and i32 %10, %0
  %106 = xor i32 %32, %0
  %107 = or i32 %105, %106
  %108 = xor i32 %43, %49
  %109 = xor i32 %22, -1
  %110 = shl i32 %109, 1
  %111 = or i32 %59, %42
  %112 = shl i32 %111, 1
  %113 = and i32 %18, %2
  %114 = xor i32 %10, %0
  %115 = shl i32 %114, 1
  %116 = xor i32 %15, %1
  %117 = or i32 %49, %0
  %118 = and i32 %46, %18
  %119 = and i32 %32, %42
  %120 = or i32 %105, %119
  %121 = or i32 %31, %14
  %122 = or i32 %14, %2
  %123 = xor i32 %122, %0
  %124 = xor i32 %123, -1
  %125 = xor i32 %54, %124
  %126 = xor i32 %72, -1
  %127 = xor i32 %105, %126
  %128 = or i32 %7, %0
  %129 = or i32 %31, %5
  %130 = or i32 %22, %1
  %131 = shl i32 %130, 1
  %132 = or i32 %7, %42
  %133 = or i32 %77, %78
  %134 = shl i32 %133, 1
  %135 = xor i32 %49, %0
  %136 = and i32 %35, %4
  %137 = or i32 %4, %45
  %138 = or i32 %20, %45
  %139 = or i32 %17, %46
  %140 = xor i32 %26, %1
  %141 = and i32 %37, %1
  %142 = or i32 %5, %43
  %143 = xor i32 %51, %2
  %144 = xor i32 %43, -1
  %145 = and i32 %46, %144
  %146 = xor i32 %15, %17
  %147 = xor i32 %62, %0
  %148 = xor i32 %33, %0
  %149 = or i32 %20, %57
  %150 = or i32 %10, %43
  %151 = and i32 %53, %42
  %152 = and i32 %122, %0
  %153 = or i32 %151, %152
  %154 = xor i32 %31, %62
  %155 = or i32 %17, %20
  %156 = xor i32 %128, -1
  %157 = or i32 %54, %156
  %158 = or i32 %28, %4
  %159 = or i32 %20, %51
  %160 = and i32 %12, %20
  %161 = or i32 %31, %57
  %162 = and i32 %20, %14
  %163 = shl i32 %162, 1
  %164 = or i32 %7, %43
  %165 = or i32 %51, %2
  %166 = or i32 %28, %2
  %167 = shl i32 %166, 1
  %168 = and i32 %46, %42
  %169 = and i32 %12, %2
  %170 = or i32 %19, %28
  %171 = shl i32 %43, 1
  %172 = add i32 %59, 1
  %173 = or i32 %27, %1
  %174 = or i32 %17, %4
  %175 = and i32 %28, %20
  %176 = or i32 %7, %51
  %177 = and i32 %26, %28
  %178 = shl i32 %177, 1
  %179 = xor i32 %43, %2
  %180 = or i32 %31, %1
  %181 = and i32 %26, %57
  %182 = and i32 %144, %2
  %183 = xor i32 %106, 2147483647
  %184 = xor i32 %183, %105
  %185 = shl i32 %184, 1
  %186 = or i32 %19, %57
  %187 = and i32 %57, %2
  %188 = or i32 %31, %45
  %189 = or i32 %32, %0
  %190 = or i32 %54, %123
  %191 = and i32 %19, %12
  %192 = and i32 %28, %109
  %193 = or i32 %7, %45
  %194 = or i32 %22, %10
  %195 = shl i32 %194, 1
  %196 = or i32 %43, %4
  %197 = and i32 %33, %42
  %198 = and i32 %33, %0
  %199 = and i32 %5, %0
  %200 = mul i32 %199, 14
  %201 = and i32 %60, %42
  %202 = and i32 %60, %0
  %203 = add i32 %45, %57
  %204 = add i32 %203, %196
  %205 = add i32 %204, %143
  %206 = add i32 %205, %113
  %207 = add i32 %206, %173
  %208 = add i32 %207, %77
  %209 = add i32 %208, %159
  %210 = add i32 %209, %150
  %211 = add i32 %210, %147
  %212 = add i32 %211, %83
  %213 = add i32 %212, %47
  %214 = shl i32 %213, 1
  %215 = add i32 %187, %28
  %216 = sub i32 %215, %198
  %217 = sub i32 %216, %157
  %218 = mul i32 %217, 3
  %219 = sub i32 %179, %189
  %220 = sub i32 %219, %201
  %221 = mul i32 %220, 5
  %222 = add i32 %202, %19
  %223 = add i32 %222, %56
  %224 = shl i32 %223, 2
  %225 = sub i32 %14, %17
  %226 = add i32 %225, %51
  %227 = add i32 %226, %4
  %228 = add i32 %227, %12
  %229 = sub i32 %228, %35
  %230 = add i32 %229, %13
  %231 = sub i32 %230, %15
  %232 = sub i32 %231, %36
  %233 = add i32 %232, %44
  %234 = sub i32 %233, %22
  %235 = add i32 %234, %66
  %236 = add i32 %235, %68
  %237 = add i32 %236, %85
  %238 = sub i32 %237, %5
  %239 = add i32 %238, %32
  %240 = sub i32 %239, %26
  %241 = sub i32 %240, %101
  %242 = add i32 %241, %136
  %243 = add i32 %242, %20
  %244 = sub i32 %243, %137
  %245 = add i32 %244, %62
  %246 = add i32 %245, %158
  %247 = sub i32 %246, %165
  %248 = add i32 %247, %169
  %249 = sub i32 %248, %171
  %250 = add i32 %249, %172
  %251 = add i32 %250, %174
  %252 = sub i32 %251, %182
  %253 = add i32 %252, %59
  %254 = add i32 %253, %11
  %255 = add i32 %254, %16
  %256 = add i32 %255, %21
  %257 = sub i32 %256, %23
  %258 = sub i32 %257, %25
  %259 = sub i32 %258, %29
  %260 = add i32 %259, %30
  %261 = sub i32 %260, %34
  %262 = sub i32 %261, %38
  %263 = add i32 %262, %41
  %264 = sub i32 %263, %48
  %265 = sub i32 %264, %50
  %266 = sub i32 %265, %52
  %267 = add i32 %266, %58
  %268 = sub i32 %267, %61
  %269 = sub i32 %268, %63
  %270 = add i32 %269, %64
  %271 = sub i32 %270, %65
  %272 = sub i32 %271, %67
  %273 = add i32 %272, %69
  %274 = sub i32 %273, %70
  %275 = add i32 %274, %71
  %276 = add i32 %275, %72
  %277 = sub i32 %276, %73
  %278 = sub i32 %277, %74
  %279 = sub i32 %278, %84
  %280 = sub i32 %279, %86
  %281 = add i32 %280, %87
  %282 = sub i32 %281, %88
  %283 = sub i32 %282, %89
  %284 = sub i32 %283, %92
  %285 = sub i32 %284, %93
  %286 = add i32 %285, %94
  %287 = sub i32 %286, %95
  %288 = add i32 %287, %96
  %289 = sub i32 %288, %97
  %290 = sub i32 %289, %100
  %291 = sub i32 %290, %102
  %292 = add i32 %291, %103
  %293 = sub i32 %292, %104
  %294 = add i32 %293, %108
  %295 = sub i32 %294, %110
  %296 = add i32 %295, %116
  %297 = sub i32 %296, %117
  %298 = sub i32 %297, %118
  %299 = sub i32 %298, %121
  %300 = add i32 %299, %78
  %301 = add i32 %300, %128
  %302 = add i32 %301, %129
  %303 = add i32 %302, %132
  %304 = add i32 %303, %135
  %305 = sub i32 %304, %138
  %306 = add i32 %305, %139
  %307 = sub i32 %306, %140
  %308 = sub i32 %307, %141
  %309 = add i32 %308, %142
  %310 = sub i32 %309, %145
  %311 = add i32 %310, %146
  %312 = add i32 %311, %148
  %313 = sub i32 %312, %149
  %314 = sub i32 %313, %154
  %315 = sub i32 %314, %155
  %316 = add i32 %315, %160
  %317 = add i32 %316, %161
  %318 = sub i32 %317, %164
  %319 = sub i32 %318, %167
  %320 = add i32 %319, %168
  %321 = sub i32 %320, %170
  %322 = add i32 %321, %175
  %323 = sub i32 %322, %176
  %324 = add i32 %323, %180
  %325 = add i32 %324, %181
  %326 = sub i32 %325, %186
  %327 = add i32 %326, %188
  %328 = add i32 %327, %191
  %329 = add i32 %328, %192
  %330 = add i32 %329, %193
  %331 = sub i32 %330, %197
  %332 = sub i32 %331, %105
  %333 = sub i32 %332, %40
  %334 = sub i32 %333, %76
  %335 = sub i32 %334, %80
  %336 = add i32 %335, %82
  %337 = sub i32 %336, %91
  %338 = sub i32 %337, %99
  %339 = sub i32 %338, %107
  %340 = sub i32 %339, %112
  %341 = sub i32 %340, %115
  %342 = add i32 %341, %120
  %343 = add i32 %342, %125
  %344 = add i32 %343, %127
  %345 = sub i32 %344, %131
  %346 = add i32 %345, %153
  %347 = sub i32 %346, %163
  %348 = sub i32 %347, %178
  %349 = add i32 %348, %190
  %350 = sub i32 %349, %195
  %351 = add i32 %350, %200
  %352 = sub i32 %351, %134
  %353 = sub i32 %352, %185
  %354 = add i32 %353, %221
  %355 = add i32 %354, %224
  %356 = add i32 %355, %218
  %357 = add i32 %356, %214
  %358 = icmp eq i32 %9, %357
  %359 = select i1 %358, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %360 = tail call i32 @puts(i8* nonnull dereferenceable(1) %359)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
