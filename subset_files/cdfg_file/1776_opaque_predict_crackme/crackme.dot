digraph "DFG for'crackme' function" {
	Node0x19a8720[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x19a8da0[shape=record, label="  %6 = add i32 %5, 1"];
	Node0x19a8e10[shape=record, label="  %7 = xor i32 %3, %0"];
	Node0x19a8e80[shape=record, label="  %8 = add i32 %6, %7"];
	Node0x19a8ef0[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0x19a8f90[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0x19a9000[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x19a9070[shape=record, label="  %12 = or i32 %10, %1"];
	Node0x19a90e0[shape=record, label="  %13 = xor i32 %11, -1"];
	Node0x19a9180[shape=record, label="  %14 = mul i32 %13, 3"];
	Node0x19a91f0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x19a9260[shape=record, label="  %16 = shl i32 %12, 1"];
	Node0x19a9300[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x19a9370[shape=record, label="  %18 = and i32 %10, %1"];
	Node0x19a93e0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x19a9450[shape=record, label="  %20 = xor i32 %7, -1"];
	Node0x19a94c0[shape=record, label="  %21 = xor i32 %0, -1"];
	Node0x19a9530[shape=record, label="  %22 = and i32 %21, %3"];
	Node0x19a95a0[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x19a9610[shape=record, label="  %24 = or i32 %3, %0"];
	Node0x19a9680[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x19a96f0[shape=record, label="  %26 = shl i32 %24, 1"];
	Node0x19a9760[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x19a97d0[shape=record, label="  %28 = xor i32 %3, -1"];
	Node0x19a9840[shape=record, label="  %29 = and i32 %28, %0"];
	Node0x19a98b0[shape=record, label="  %30 = shl i32 %22, 1"];
	Node0x19a9950[shape=record, label="  %31 = shl i32 %25, 2"];
	Node0x19a99c0[shape=record, label="  %32 = shl i32 %3, 1"];
	Node0x19a9c40[shape=record, label="  %33 = sub i32 %1, %2"];
	Node0x19a9cb0[shape=record, label="  %34 = sub i32 %33, %2"];
	Node0x19a9d20[shape=record, label="  %35 = sub i32 %34, %9"];
	Node0x19a9d90[shape=record, label="  %36 = sub i32 %35, %11"];
	Node0x19a9e00[shape=record, label="  %37 = add i32 %36, %12"];
	Node0x19a9e70[shape=record, label="  %38 = add i32 %37, %15"];
	Node0x19a9ee0[shape=record, label="  %39 = sub i32 %38, %19"];
	Node0x19a9f50[shape=record, label="  %40 = add i32 %39, %20"];
	Node0x19a9fc0[shape=record, label="  %41 = add i32 %40, %23"];
	Node0x19aa030[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x19aa0a0[shape=record, label="  %43 = sub i32 %42, %25"];
	Node0x19aa110[shape=record, label="  %44 = sub i32 %43, %29"];
	Node0x19aa180[shape=record, label="  %45 = add i32 %44, %32"];
	Node0x19aa1f0[shape=record, label="  %46 = add i32 %45, %17"];
	Node0x19aa260[shape=record, label="  %47 = sub i32 %46, %30"];
	Node0x19aa2d0[shape=record, label="  %48 = sub i32 %47, %31"];
	Node0x19aa340[shape=record, label="  %49 = sub i32 %48, %27"];
	Node0x19aa3b0[shape=record, label="  %50 = icmp eq i32 %8, %49"];
	Node0x1949268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x19aa850[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x19aa8a0[shape=record, label="  ret void"];
	Node0x19a8720 -> Node0x19a8da0;
	Node0x19a8da0 -> Node0x19a8e10;
	Node0x19a8e10 -> Node0x19a8e80;
	Node0x19a8e80 -> Node0x19a8ef0;
	Node0x19a8ef0 -> Node0x19a8f90;
	Node0x19a8f90 -> Node0x19a9000;
	Node0x19a9000 -> Node0x19a9070;
	Node0x19a9070 -> Node0x19a90e0;
	Node0x19a90e0 -> Node0x19a9180;
	Node0x19a9180 -> Node0x19a91f0;
	Node0x19a91f0 -> Node0x19a9260;
	Node0x19a9260 -> Node0x19a9300;
	Node0x19a9300 -> Node0x19a9370;
	Node0x19a9370 -> Node0x19a93e0;
	Node0x19a93e0 -> Node0x19a9450;
	Node0x19a9450 -> Node0x19a94c0;
	Node0x19a94c0 -> Node0x19a9530;
	Node0x19a9530 -> Node0x19a95a0;
	Node0x19a95a0 -> Node0x19a9610;
	Node0x19a9610 -> Node0x19a9680;
	Node0x19a9680 -> Node0x19a96f0;
	Node0x19a96f0 -> Node0x19a9760;
	Node0x19a9760 -> Node0x19a97d0;
	Node0x19a97d0 -> Node0x19a9840;
	Node0x19a9840 -> Node0x19a98b0;
	Node0x19a98b0 -> Node0x19a9950;
	Node0x19a9950 -> Node0x19a99c0;
	Node0x19a99c0 -> Node0x19a9c40;
	Node0x19a9c40 -> Node0x19a9cb0;
	Node0x19a9cb0 -> Node0x19a9d20;
	Node0x19a9d20 -> Node0x19a9d90;
	Node0x19a9d90 -> Node0x19a9e00;
	Node0x19a9e00 -> Node0x19a9e70;
	Node0x19a9e70 -> Node0x19a9ee0;
	Node0x19a9ee0 -> Node0x19a9f50;
	Node0x19a9f50 -> Node0x19a9fc0;
	Node0x19a9fc0 -> Node0x19aa030;
	Node0x19aa030 -> Node0x19aa0a0;
	Node0x19aa0a0 -> Node0x19aa110;
	Node0x19aa110 -> Node0x19aa180;
	Node0x19aa180 -> Node0x19aa1f0;
	Node0x19aa1f0 -> Node0x19aa260;
	Node0x19aa260 -> Node0x19aa2d0;
	Node0x19aa2d0 -> Node0x19aa340;
	Node0x19aa340 -> Node0x19aa3b0;
	Node0x19aa3b0 -> Node0x1949268;
	Node0x1949268 -> Node0x19aa850;
	Node0x19aa850 -> Node0x19aa8a0;
edge [color=red]
	Node0x19a8720 -> Node0x19a8da0;
	Node0x19a8da0 -> Node0x19a8e80;
	Node0x19a8e10 -> Node0x19a8e80;
	Node0x19a8f90 -> Node0x19a9070;
	Node0x19a9000 -> Node0x19a90e0;
	Node0x19a90e0 -> Node0x19a9180;
	Node0x19a9180 -> Node0x19a91f0;
	Node0x19a9070 -> Node0x19a9260;
	Node0x19a9260 -> Node0x19a9300;
	Node0x19a8f90 -> Node0x19a9370;
	Node0x19a9370 -> Node0x19a93e0;
	Node0x19a8e10 -> Node0x19a9450;
	Node0x19a94c0 -> Node0x19a9530;
	Node0x19a9530 -> Node0x19a95a0;
	Node0x19a9610 -> Node0x19a96f0;
	Node0x19a96f0 -> Node0x19a9760;
	Node0x19a97d0 -> Node0x19a9840;
	Node0x19a9530 -> Node0x19a98b0;
	Node0x19a9680 -> Node0x19a9950;
	Node0x19a9c40 -> Node0x19a9cb0;
	Node0x19a9cb0 -> Node0x19a9d20;
	Node0x19a8ef0 -> Node0x19a9d20;
	Node0x19a9d20 -> Node0x19a9d90;
	Node0x19a9000 -> Node0x19a9d90;
	Node0x19a9d90 -> Node0x19a9e00;
	Node0x19a9070 -> Node0x19a9e00;
	Node0x19a9e00 -> Node0x19a9e70;
	Node0x19a91f0 -> Node0x19a9e70;
	Node0x19a9e70 -> Node0x19a9ee0;
	Node0x19a93e0 -> Node0x19a9ee0;
	Node0x19a9ee0 -> Node0x19a9f50;
	Node0x19a9450 -> Node0x19a9f50;
	Node0x19a9f50 -> Node0x19a9fc0;
	Node0x19a95a0 -> Node0x19a9fc0;
	Node0x19a9fc0 -> Node0x19aa030;
	Node0x19a9610 -> Node0x19aa030;
	Node0x19aa030 -> Node0x19aa0a0;
	Node0x19a9680 -> Node0x19aa0a0;
	Node0x19aa0a0 -> Node0x19aa110;
	Node0x19a9840 -> Node0x19aa110;
	Node0x19aa110 -> Node0x19aa180;
	Node0x19a99c0 -> Node0x19aa180;
	Node0x19aa180 -> Node0x19aa1f0;
	Node0x19a9300 -> Node0x19aa1f0;
	Node0x19aa1f0 -> Node0x19aa260;
	Node0x19a98b0 -> Node0x19aa260;
	Node0x19aa260 -> Node0x19aa2d0;
	Node0x19a9950 -> Node0x19aa2d0;
	Node0x19aa2d0 -> Node0x19aa340;
	Node0x19a9760 -> Node0x19aa340;
	Node0x19a8e80 -> Node0x19aa3b0;
	Node0x19aa340 -> Node0x19aa3b0;
	Node0x19aa3b0 -> Node0x1949268;
	Node0x1949268 -> Node0x19aa850;
}
