; ModuleID = '../.././c_source_file/1179_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1179_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = xor i32 %2, %1
  %11 = and i32 %10, %0
  %12 = or i32 %9, %11
  %13 = mul i32 %12, -2
  %14 = xor i32 %1, -1
  %15 = and i32 %14, %2
  %16 = and i32 %15, %0
  %17 = or i32 %14, %2
  %18 = xor i32 %17, %0
  %19 = or i32 %16, %18
  %20 = sub i32 %13, %19
  %21 = and i32 %5, %4
  %22 = or i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = or i32 %21, %23
  %25 = sub i32 %20, %24
  %26 = xor i32 %1, %0
  %27 = and i32 %26, %2
  %28 = xor i32 %2, -1
  %29 = and i32 %1, %0
  %30 = or i32 %29, %28
  %31 = or i32 %10, %7
  %32 = and i32 %2, %0
  %33 = or i32 %2, %1
  %34 = xor i32 %32, %33
  %35 = and i32 %28, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %36, %1
  %38 = and i32 %8, %0
  %39 = and i32 %10, %7
  %40 = or i32 %38, %39
  %41 = and i32 %14, %0
  %42 = xor i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %41, %43
  %45 = xor i32 %17, -1
  %46 = or i32 %45, %0
  %47 = xor i32 %16, %46
  %48 = or i32 %2, %0
  %49 = and i32 %48, %14
  %50 = or i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = or i32 %28, %51
  %53 = xor i32 %33, -1
  %54 = shl i32 %53, 1
  %55 = or i32 %14, %0
  %56 = or i32 %42, %26
  %57 = and i32 %42, %26
  %58 = xor i32 %33, %29
  %59 = xor i32 %55, -1
  %60 = xor i32 %10, -1
  %61 = and i32 %55, %60
  %62 = or i32 %59, %2
  %63 = or i32 %28, %1
  %64 = xor i32 %63, %29
  %65 = xor i32 %26, -1
  %66 = or i32 %43, %65
  %67 = shl i32 %66, 2
  %68 = and i32 %28, %1
  %69 = xor i32 %68, -1
  %70 = or i32 %69, %7
  %71 = xor i32 %63, -1
  %72 = xor i32 %69, %0
  %73 = xor i32 %29, -1
  %74 = and i32 %10, %73
  %75 = shl i32 %74, 1
  %76 = or i32 %35, %14
  %77 = and i32 %69, %0
  %78 = and i32 %33, %0
  %79 = or i32 %9, %78
  %80 = or i32 %29, %43
  %81 = or i32 %42, %41
  %82 = or i32 %35, %1
  %83 = shl i32 %82, 1
  %84 = or i32 %60, %7
  %85 = or i32 %71, %7
  %86 = or i32 %35, %65
  %87 = or i32 %28, %0
  %88 = and i32 %87, %14
  %89 = and i32 %26, %36
  %90 = shl i32 %89, 1
  %91 = xor i32 %8, -1
  %92 = xor i32 %35, %91
  %93 = and i32 %42, %73
  %94 = and i32 %91, %7
  %95 = xor i32 %87, %29
  %96 = and i32 %48, %26
  %97 = or i32 %68, %0
  %98 = or i32 %29, %60
  %99 = or i32 %10, %41
  %100 = shl i32 %99, 1
  %101 = or i32 %26, %43
  %102 = and i32 %15, %7
  %103 = and i32 %17, %0
  %104 = xor i32 %103, -1
  %105 = xor i32 %102, %104
  %106 = or i32 %32, %1
  %107 = shl i32 %106, 1
  %108 = xor i32 %41, -1
  %109 = and i32 %43, %108
  %110 = or i32 %43, %51
  %111 = xor i32 %35, %63
  %112 = xor i32 %32, %50
  %113 = and i32 %43, %65
  %114 = or i32 %32, %68
  %115 = xor i32 %32, %55
  %116 = xor i32 %102, %31
  %117 = or i32 %32, %14
  %118 = or i32 %43, %59
  %119 = or i32 %29, %2
  %120 = and i32 %42, %50
  %121 = or i32 %10, %0
  %122 = xor i32 %121, 2147483647
  %123 = or i32 %122, %16
  %124 = xor i32 %48, %29
  %125 = xor i32 %48, -1
  %126 = or i32 %125, %14
  %127 = xor i32 %33, %0
  %128 = or i32 %102, %103
  %129 = or i32 %42, %51
  %130 = and i32 %28, %65
  %131 = xor i32 %125, %1
  %132 = xor i32 %32, -1
  %133 = or i32 %43, %14
  %134 = xor i32 %127, 2147483647
  %135 = xor i32 %134, %38
  %136 = and i32 %50, %43
  %137 = and i32 %43, %1
  %138 = xor i32 %10, %0
  %139 = or i32 %16, %138
  %140 = add i32 %29, 1
  %141 = or i32 %29, %71
  %142 = xor i32 %87, -1
  %143 = or i32 %142, %65
  %144 = xor i32 %71, %0
  %145 = shl i32 %144, 1
  %146 = or i32 %8, %7
  %147 = or i32 %42, %14
  %148 = and i32 %28, %108
  %149 = xor i32 %18, -1
  %150 = xor i32 %16, %149
  %151 = and i32 %36, %65
  %152 = xor i32 %36, %1
  %153 = and i32 %87, %26
  %154 = or i32 %8, %0
  %155 = and i32 %10, %50
  %156 = xor i32 %48, %1
  %157 = or i32 %142, %1
  %158 = or i32 %51, %2
  %159 = shl i32 %158, 2
  %160 = and i32 %60, %0
  %161 = add i32 %87, 1
  %162 = and i32 %60, %73
  %163 = or i32 %63, %0
  %164 = shl i32 %163, 1
  %165 = or i32 %41, %60
  %166 = or i32 %29, %53
  %167 = xor i32 %39, -1
  %168 = xor i32 %38, %167
  %169 = xor i32 %108, %2
  %170 = xor i32 %68, %0
  %171 = and i32 %53, %7
  %172 = mul i32 %171, -26
  %173 = and i32 %68, %7
  %174 = and i32 %53, %0
  %175 = mul i32 %174, 10
  %176 = and i32 %68, %0
  %177 = and i32 %71, %7
  %178 = and i32 %71, %0
  %179 = shl i32 %38, 3
  %180 = xor i32 %3, -1
  %181 = and i32 %180, %5
  %182 = and i32 %181, %4
  %183 = or i32 %180, %5
  %184 = xor i32 %4, -1
  %185 = xor i32 %183, %184
  %186 = xor i32 %185, %182
  %187 = xor i32 %21, -1
  %188 = and i32 %187, %180
  %189 = xor i32 %5, -1
  %190 = and i32 %189, %3
  %191 = xor i32 %4, 2147483647
  %192 = xor i32 %191, %190
  %193 = shl i32 %192, 1
  %194 = or i32 %180, %4
  %195 = xor i32 %5, %3
  %196 = xor i32 %195, -1
  %197 = and i32 %194, %196
  %198 = xor i32 %23, %5
  %199 = or i32 %5, %4
  %200 = xor i32 %199, 2147483647
  %201 = xor i32 %200, %3
  %202 = xor i32 %22, %5
  %203 = xor i32 %21, %3
  %204 = shl i32 %203, 2
  %205 = and i32 %4, %3
  %206 = xor i32 %205, -1
  %207 = xor i32 %206, %5
  %208 = and i32 %5, %3
  %209 = xor i32 %208, -1
  %210 = and i32 %209, %184
  %211 = xor i32 %194, -1
  %212 = or i32 %189, %211
  %213 = and i32 %199, %3
  %214 = add i32 %205, 1
  %215 = and i32 %184, %5
  %216 = or i32 %215, %180
  %217 = and i32 %180, %4
  %218 = xor i32 %217, -1
  %219 = and i32 %218, %5
  %220 = and i32 %194, %5
  %221 = xor i32 %4, %3
  %222 = xor i32 %221, -1
  %223 = xor i32 %5, %4
  %224 = and i32 %223, %222
  %225 = xor i32 %223, -1
  %226 = or i32 %225, %3
  %227 = or i32 %195, %211
  %228 = or i32 %196, %23
  %229 = add i32 %199, 1
  %230 = and i32 %189, %206
  %231 = or i32 %5, %3
  %232 = xor i32 %231, %4
  %233 = or i32 %21, %3
  %234 = xor i32 %231, -1
  %235 = or i32 %234, %4
  %236 = and i32 %208, %4
  %237 = and i32 %231, %184
  %238 = or i32 %236, %237
  %239 = add i32 %208, 1
  %240 = and i32 %225, %3
  %241 = or i32 %195, %4
  %242 = xor i32 %182, %241
  %243 = and i32 %231, %4
  %244 = and i32 %189, %4
  %245 = or i32 %244, %180
  %246 = xor i32 %195, %4
  %247 = or i32 %182, %246
  %248 = add i32 %223, 1
  %249 = or i32 %217, %196
  %250 = and i32 %221, %5
  %251 = and i32 %234, %184
  %252 = and i32 %190, %184
  %253 = and i32 %234, %4
  %254 = and i32 %190, %4
  %255 = and i32 %181, %184
  %256 = and i32 %208, %184
  %257 = or i32 %55, %2
  %258 = sub i32 %257, %27
  %259 = add i32 %258, %157
  %260 = add i32 %259, %58
  %261 = add i32 %260, %44
  %262 = add i32 %261, %128
  %263 = add i32 %262, %220
  %264 = add i32 %263, %135
  %265 = add i32 %264, %123
  %266 = add i32 %265, %256
  %267 = add i32 %266, %253
  %268 = add i32 %267, %201
  %269 = add i32 %268, %197
  %270 = add i32 %269, %247
  %271 = shl i32 %270, 1
  %272 = sub i32 %9, %177
  %273 = add i32 %272, %176
  %274 = sub i32 %273, %156
  %275 = sub i32 %274, %155
  %276 = add i32 %275, %39
  %277 = add i32 %276, %85
  %278 = add i32 %277, %252
  %279 = mul i32 %278, 5
  %280 = add i32 %151, %169
  %281 = sub i32 %280, %79
  %282 = add i32 %281, %251
  %283 = sub i32 %282, %255
  %284 = mul i32 %283, 3
  %285 = sub i32 %254, %173
  %286 = sub i32 %285, %236
  %287 = mul i32 %286, 7
  %288 = mul i32 %0, -3
  %289 = sub i32 %288, %50
  %290 = sub i32 %289, %2
  %291 = add i32 %290, %26
  %292 = add i32 %291, %140
  %293 = sub i32 %292, %41
  %294 = add i32 %293, %30
  %295 = add i32 %294, %52
  %296 = sub i32 %295, %62
  %297 = add i32 %296, %43
  %298 = sub i32 %297, %119
  %299 = add i32 %298, %130
  %300 = add i32 %299, %132
  %301 = add i32 %300, %69
  %302 = add i32 %301, %48
  %303 = add i32 %302, 1
  %304 = add i32 %303, %148
  %305 = add i32 %304, %161
  %306 = add i32 %305, %87
  %307 = add i32 %306, %31
  %308 = sub i32 %307, %34
  %309 = sub i32 %308, %37
  %310 = sub i32 %309, %49
  %311 = sub i32 %310, %54
  %312 = add i32 %311, %56
  %313 = sub i32 %312, %57
  %314 = add i32 %313, %61
  %315 = add i32 %314, %64
  %316 = sub i32 %315, %70
  %317 = add i32 %316, %72
  %318 = sub i32 %317, %76
  %319 = add i32 %318, %77
  %320 = sub i32 %319, %80
  %321 = add i32 %320, %81
  %322 = sub i32 %321, %84
  %323 = sub i32 %322, %86
  %324 = add i32 %323, %88
  %325 = add i32 %324, %92
  %326 = sub i32 %325, %93
  %327 = sub i32 %326, %94
  %328 = add i32 %327, %95
  %329 = add i32 %328, %96
  %330 = sub i32 %329, %97
  %331 = sub i32 %330, %98
  %332 = add i32 %331, %101
  %333 = add i32 %332, %109
  %334 = add i32 %333, %110
  %335 = sub i32 %334, %111
  %336 = add i32 %335, %112
  %337 = add i32 %336, %113
  %338 = add i32 %337, %114
  %339 = sub i32 %338, %115
  %340 = add i32 %339, %117
  %341 = add i32 %340, %118
  %342 = sub i32 %341, %120
  %343 = sub i32 %342, %124
  %344 = add i32 %343, %126
  %345 = add i32 %344, %127
  %346 = sub i32 %345, %129
  %347 = sub i32 %346, %131
  %348 = add i32 %347, %133
  %349 = sub i32 %348, %136
  %350 = add i32 %349, %137
  %351 = sub i32 %350, %141
  %352 = add i32 %351, %143
  %353 = sub i32 %352, %146
  %354 = sub i32 %353, %147
  %355 = add i32 %354, %152
  %356 = add i32 %355, %153
  %357 = add i32 %356, %154
  %358 = sub i32 %357, %159
  %359 = sub i32 %358, %160
  %360 = add i32 %359, %162
  %361 = sub i32 %360, %165
  %362 = sub i32 %361, %166
  %363 = add i32 %362, %170
  %364 = sub i32 %363, %178
  %365 = sub i32 %364, %4
  %366 = sub i32 %365, %40
  %367 = sub i32 %366, %47
  %368 = add i32 %367, %67
  %369 = sub i32 %368, %75
  %370 = sub i32 %369, %83
  %371 = sub i32 %370, %90
  %372 = sub i32 %371, %100
  %373 = add i32 %372, %105
  %374 = sub i32 %373, %107
  %375 = sub i32 %374, %116
  %376 = sub i32 %375, %139
  %377 = sub i32 %376, %145
  %378 = sub i32 %377, %150
  %379 = sub i32 %378, %164
  %380 = add i32 %379, %168
  %381 = add i32 %380, %172
  %382 = add i32 %381, %175
  %383 = add i32 %382, %179
  %384 = add i32 %383, %214
  %385 = sub i32 %384, %198
  %386 = sub i32 %385, %202
  %387 = sub i32 %386, %207
  %388 = sub i32 %387, %212
  %389 = add i32 %388, %219
  %390 = add i32 %389, %229
  %391 = add i32 %390, %230
  %392 = add i32 %391, %239
  %393 = add i32 %392, %248
  %394 = add i32 %393, %250
  %395 = sub i32 %394, %188
  %396 = sub i32 %395, %210
  %397 = sub i32 %396, %213
  %398 = add i32 %397, %216
  %399 = add i32 %398, %224
  %400 = add i32 %399, %226
  %401 = add i32 %400, %227
  %402 = add i32 %401, %228
  %403 = sub i32 %402, %232
  %404 = add i32 %403, %233
  %405 = sub i32 %404, %235
  %406 = add i32 %405, %240
  %407 = sub i32 %406, %243
  %408 = add i32 %407, %245
  %409 = sub i32 %408, %249
  %410 = add i32 %409, %182
  %411 = add i32 %410, %186
  %412 = sub i32 %411, %204
  %413 = add i32 %412, %238
  %414 = sub i32 %413, %242
  %415 = sub i32 %414, %193
  %416 = add i32 %415, %287
  %417 = add i32 %416, %284
  %418 = add i32 %417, %279
  %419 = add i32 %418, %271
  %420 = icmp eq i32 %25, %419
  %421 = select i1 %420, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %422 = tail call i32 @puts(i8* nonnull dereferenceable(1) %421)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
