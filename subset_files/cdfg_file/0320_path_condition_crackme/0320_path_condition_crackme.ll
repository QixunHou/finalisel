; ModuleID = '../.././c_source_file/0320_path_condition_crackme.c'
source_filename = "../.././c_source_file/0320_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = shl i32 %4, 1
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = and i32 %2, %1
  %10 = and i32 %9, %0
  %11 = xor i32 %0, -1
  %12 = xor i32 %2, %1
  %13 = and i32 %12, %11
  %14 = xor i32 %10, -1
  %15 = xor i32 %13, %14
  %16 = sub i32 %3, %8
  %17 = add i32 %16, %6
  %18 = add i32 %17, %15
  %19 = xor i32 %4, -1
  %20 = or i32 %4, %3
  %21 = add i32 %3, 1
  %22 = and i32 %19, %3
  %23 = or i32 %19, %3
  %24 = xor i32 %4, %3
  %25 = xor i32 %20, -1
  %26 = xor i32 %23, -1
  %27 = shl i32 %22, 1
  %28 = and i32 %4, %3
  %29 = or i32 %10, %13
  %30 = xor i32 %1, -1
  %31 = and i32 %30, %2
  %32 = and i32 %31, %0
  %33 = xor i32 %12, %0
  %34 = or i32 %32, %33
  %35 = or i32 %30, %2
  %36 = and i32 %35, %11
  %37 = or i32 %32, %36
  %38 = or i32 %30, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %2, %0
  %41 = or i32 %40, %39
  %42 = or i32 %2, %0
  %43 = xor i32 %42, %1
  %44 = or i32 %7, %0
  %45 = xor i32 %1, %0
  %46 = and i32 %44, %45
  %47 = and i32 %30, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %7, %48
  %50 = xor i32 %45, -1
  %51 = or i32 %50, %2
  %52 = and i32 %1, %0
  %53 = xor i32 %52, %2
  %54 = and i32 %12, %48
  %55 = shl i32 %54, 1
  %56 = and i32 %2, %0
  %57 = xor i32 %56, %38
  %58 = or i32 %1, %0
  %59 = and i32 %12, %58
  %60 = xor i32 %40, -1
  %61 = and i32 %60, %1
  %62 = shl i32 %61, 1
  %63 = and i32 %31, %11
  %64 = or i32 %12, %11
  %65 = xor i32 %63, %64
  %66 = xor i32 %32, -1
  %67 = xor i32 %36, %66
  %68 = or i32 %12, %0
  %69 = xor i32 %58, -1
  %70 = or i32 %40, %69
  %71 = xor i32 %42, -1
  %72 = or i32 %71, %50
  %73 = shl i32 %72, 1
  %74 = and i32 %7, %0
  %75 = or i32 %74, %1
  %76 = or i32 %7, %39
  %77 = or i32 %7, %1
  %78 = xor i32 %77, -1
  %79 = or i32 %78, %0
  %80 = or i32 %45, %2
  %81 = or i32 %2, %1
  %82 = xor i32 %81, -1
  %83 = or i32 %56, %82
  %84 = xor i32 %12, -1
  %85 = add i32 %12, 1
  %86 = xor i32 %33, -1
  %87 = xor i32 %32, %86
  %88 = or i32 %71, %30
  %89 = xor i32 %32, %68
  %90 = xor i32 %8, -1
  %91 = xor i32 %56, %90
  %92 = and i32 %42, %45
  %93 = and i32 %7, %50
  %94 = or i32 %40, %50
  %95 = or i32 %47, %60
  %96 = shl i32 %95, 1
  %97 = and i32 %40, %38
  %98 = xor i32 %38, %2
  %99 = or i32 %47, %84
  %100 = and i32 %44, %1
  %101 = shl i32 %100, 1
  %102 = xor i32 %81, %0
  %103 = xor i32 %102, %14
  %104 = or i32 %74, %50
  %105 = xor i32 %44, %1
  %106 = shl i32 %105, 1
  %107 = xor i32 %56, %58
  %108 = or i32 %10, %102
  %109 = or i32 %9, %47
  %110 = or i32 %56, %8
  %111 = xor i32 %42, %52
  %112 = or i32 %56, %69
  %113 = xor i32 %74, %77
  %114 = and i32 %44, %30
  %115 = xor i32 %52, -1
  %116 = and i32 %7, %115
  %117 = or i32 %52, %60
  %118 = xor i32 %9, -1
  %119 = or i32 %118, %11
  %120 = and i32 %42, %50
  %121 = and i32 %40, %58
  %122 = shl i32 %121, 1
  %123 = and i32 %60, %50
  %124 = or i32 %56, %50
  %125 = or i32 %12, %47
  %126 = or i32 %84, %0
  %127 = or i32 %8, %47
  %128 = and i32 %12, %115
  %129 = xor i32 %74, -1
  %130 = and i32 %129, %1
  %131 = xor i32 %82, %0
  %132 = xor i32 %44, -1
  %133 = xor i32 %132, %1
  %134 = and i32 %81, %0
  %135 = or i32 %47, %2
  %136 = and i32 %48, %2
  %137 = and i32 %45, %2
  %138 = and i32 %60, %115
  %139 = or i32 %90, %0
  %140 = or i32 %45, %132
  %141 = or i32 %45, %60
  %142 = shl i32 %141, 1
  %143 = xor i32 %44, %52
  %144 = and i32 %9, %11
  %145 = xor i32 %134, -1
  %146 = xor i32 %144, %145
  %147 = or i32 %52, %2
  %148 = xor i32 %69, %2
  %149 = and i32 %118, %11
  %150 = xor i32 %56, -1
  %151 = and i32 %150, %30
  %152 = shl i32 %77, 1
  %153 = or i32 %74, %78
  %154 = and i32 %12, %0
  %155 = shl i32 %154, 1
  %156 = xor i32 %71, %1
  %157 = xor i32 %35, %0
  %158 = or i32 %32, %157
  %159 = add i32 %77, 1
  %160 = or i32 %81, %11
  %161 = and i32 %77, %11
  %162 = xor i32 %56, %81
  %163 = xor i32 %48, %2
  %164 = or i32 %90, %11
  %165 = or i32 %132, %50
  %166 = or i32 %69, %2
  %167 = and i32 %60, %48
  %168 = or i32 %52, %84
  %169 = shl i32 %168, 1
  %170 = and i32 %50, %2
  %171 = and i32 %40, %1
  %172 = or i32 %84, %11
  %173 = and i32 %40, %48
  %174 = and i32 %58, %84
  %175 = and i32 %44, %50
  %176 = shl i32 %175, 1
  %177 = or i32 %78, %11
  %178 = or i32 %84, %69
  %179 = xor i32 %115, %2
  %180 = or i32 %39, %2
  %181 = and i32 %40, %30
  %182 = and i32 %38, %60
  %183 = add i32 %44, 1
  %184 = xor i32 %74, %118
  %185 = xor i32 %150, %1
  %186 = or i32 %71, %1
  %187 = and i32 %118, %0
  %188 = or i32 %9, %0
  %189 = or i32 %52, %78
  %190 = shl i32 %9, 1
  %191 = or i32 %144, %134
  %192 = xor i32 %10, %33
  %193 = or i32 %45, %7
  %194 = or i32 %45, %71
  %195 = or i32 %40, %52
  %196 = xor i32 %118, %0
  %197 = xor i32 %154, 1073741823
  %198 = xor i32 %197, %144
  %199 = xor i32 %56, %1
  %200 = xor i32 %68, -1
  %201 = or i32 %32, %200
  %202 = xor i32 %8, %0
  %203 = and i32 %40, %50
  %204 = and i32 %90, %11
  %205 = or i32 %74, %30
  %206 = or i32 %60, %50
  %207 = and i32 %60, %30
  %208 = shl i32 %207, 1
  %209 = and i32 %40, %45
  %210 = or i32 %118, %0
  %211 = or i32 %132, %30
  %212 = xor i32 %77, %52
  %213 = and i32 %81, %11
  %214 = xor i32 %213, %14
  %215 = and i32 %38, %7
  %216 = and i32 %90, %0
  %217 = or i32 %56, %30
  %218 = or i32 %132, %1
  %219 = xor i32 %74, %1
  %220 = xor i32 %47, %118
  %221 = shl i32 %0, 1
  %222 = and i32 %77, %0
  %223 = or i32 %77, %0
  %224 = and i32 %84, %115
  %225 = or i32 %8, %0
  %226 = or i32 %74, %45
  %227 = or i32 %82, %0
  %228 = or i32 %52, %71
  %229 = and i32 %84, %11
  %230 = or i32 %10, %86
  %231 = add i32 %40, 1
  %232 = xor i32 %78, %0
  %233 = and i32 %58, %60
  %234 = and i32 %38, %84
  %235 = shl i32 %234, 1
  %236 = and i32 %45, %129
  %237 = or i32 %60, %1
  %238 = or i32 %12, %69
  %239 = or i32 %56, %39
  %240 = or i32 %60, %30
  %241 = xor i32 %64, 2147483647
  %242 = or i32 %241, %63
  %243 = and i32 %129, %30
  %244 = shl i32 %243, 1
  %245 = or i32 %60, %39
  %246 = or i32 %12, %39
  %247 = shl i32 %246, 1
  %248 = xor i32 %9, %0
  %249 = and i32 %45, %60
  %250 = and i32 %42, %30
  %251 = or i32 %7, %69
  %252 = xor i32 %47, %90
  %253 = or i32 %9, %11
  %254 = xor i32 %47, %2
  %255 = xor i32 %157, %66
  %256 = xor i32 %39, %2
  %257 = or i32 %81, %0
  %258 = or i32 %82, %11
  %259 = or i32 %52, %132
  %260 = and i32 %45, %7
  %261 = or i32 %52, %7
  %262 = xor i32 %90, %0
  %263 = shl i32 %262, 1
  %264 = and i32 %129, %50
  %265 = and i32 %35, %0
  %266 = or i32 %63, %265
  %267 = or i32 %7, %50
  %268 = xor i32 %77, %0
  %269 = and i32 %45, %150
  %270 = or i32 %47, %7
  %271 = add i32 %42, 1
  %272 = or i32 %12, %52
  %273 = xor i32 %58, %2
  %274 = shl i32 %273, 1
  %275 = or i32 %77, %11
  %276 = and i32 %82, %11
  %277 = mul i32 %276, -22
  %278 = and i32 %8, %11
  %279 = and i32 %82, %0
  %280 = and i32 %8, %0
  %281 = mul i32 %280, 12
  %282 = and i32 %78, %11
  %283 = mul i32 %282, -31
  %284 = mul i32 %144, -17
  %285 = and i32 %78, %0
  %286 = add i32 %48, %11
  %287 = add i32 %286, %256
  %288 = add i32 %287, %251
  %289 = add i32 %288, %148
  %290 = add i32 %289, %116
  %291 = add i32 %290, %259
  %292 = add i32 %291, %250
  %293 = add i32 %292, %238
  %294 = add i32 %293, %232
  %295 = add i32 %294, %229
  %296 = add i32 %295, %13
  %297 = add i32 %296, %182
  %298 = add i32 %297, %173
  %299 = add i32 %298, %171
  %300 = add i32 %299, %165
  %301 = add i32 %300, %164
  %302 = add i32 %301, %156
  %303 = add i32 %302, %107
  %304 = add i32 %303, %83
  %305 = add i32 %304, %46
  %306 = add i32 %305, %242
  %307 = shl i32 %306, 1
  %308 = sub i32 %10, %44
  %309 = add i32 %308, %64
  %310 = add i32 %309, %236
  %311 = add i32 %310, %225
  %312 = sub i32 %311, %216
  %313 = sub i32 %312, %97
  %314 = add i32 %313, %25
  %315 = add i32 %314, %230
  %316 = mul i32 %315, 3
  %317 = sub i32 %21, %199
  %318 = sub i32 %317, %226
  %319 = sub i32 %318, %124
  %320 = sub i32 %319, %110
  %321 = add i32 %320, %59
  %322 = mul i32 %321, 5
  %323 = add i32 %112, %82
  %324 = add i32 %323, %43
  %325 = add i32 %324, %198
  %326 = shl i32 %325, 2
  %327 = sub i32 %26, %285
  %328 = mul i32 %327, 7
  %329 = or i32 %279, %278
  %330 = mul i32 %329, -13
  %331 = sub i32 -5, %1
  %332 = sub i32 %331, %221
  %333 = sub i32 %332, %2
  %334 = add i32 %333, %69
  %335 = add i32 %334, %7
  %336 = add i32 %335, %45
  %337 = sub i32 %336, %58
  %338 = sub i32 %337, %47
  %339 = sub i32 %338, %49
  %340 = add i32 %339, %51
  %341 = add i32 %340, %53
  %342 = add i32 %341, %12
  %343 = add i32 %342, %76
  %344 = add i32 %343, %80
  %345 = add i32 %344, %85
  %346 = sub i32 %345, %93
  %347 = sub i32 %346, %98
  %348 = add i32 %347, %81
  %349 = add i32 %348, %90
  %350 = sub i32 %349, %135
  %351 = add i32 %350, %136
  %352 = add i32 %351, %137
  %353 = add i32 %352, %147
  %354 = add i32 %353, %159
  %355 = sub i32 %354, %163
  %356 = add i32 %355, %166
  %357 = add i32 %356, %170
  %358 = add i32 %357, %179
  %359 = sub i32 %358, %180
  %360 = add i32 %359, %74
  %361 = add i32 %360, %183
  %362 = add i32 %361, %193
  %363 = add i32 %362, %150
  %364 = sub i32 %363, %215
  %365 = add i32 %364, %231
  %366 = add i32 %365, %40
  %367 = sub i32 %366, %254
  %368 = sub i32 %367, %260
  %369 = add i32 %368, %261
  %370 = sub i32 %369, %267
  %371 = add i32 %370, %270
  %372 = add i32 %371, %271
  %373 = sub i32 %372, %4
  %374 = sub i32 %373, %41
  %375 = add i32 %374, %57
  %376 = sub i32 %375, %68
  %377 = sub i32 %376, %70
  %378 = sub i32 %377, %75
  %379 = add i32 %378, %79
  %380 = sub i32 %379, %88
  %381 = add i32 %380, %91
  %382 = add i32 %381, %92
  %383 = add i32 %382, %94
  %384 = add i32 %383, %99
  %385 = add i32 %384, %104
  %386 = sub i32 %385, %109
  %387 = add i32 %386, %111
  %388 = sub i32 %387, %113
  %389 = sub i32 %388, %114
  %390 = add i32 %389, %117
  %391 = add i32 %390, %119
  %392 = add i32 %391, %120
  %393 = sub i32 %392, %123
  %394 = add i32 %393, %125
  %395 = sub i32 %394, %126
  %396 = add i32 %395, %127
  %397 = sub i32 %396, %128
  %398 = add i32 %397, %130
  %399 = sub i32 %398, %131
  %400 = sub i32 %399, %133
  %401 = sub i32 %400, %134
  %402 = add i32 %401, %138
  %403 = add i32 %402, %139
  %404 = add i32 %403, %140
  %405 = add i32 %404, %143
  %406 = add i32 %405, %149
  %407 = sub i32 %406, %151
  %408 = sub i32 %407, %152
  %409 = add i32 %408, %153
  %410 = add i32 %409, %160
  %411 = add i32 %410, %161
  %412 = sub i32 %411, %162
  %413 = add i32 %412, %167
  %414 = add i32 %413, %172
  %415 = sub i32 %414, %174
  %416 = add i32 %415, %177
  %417 = add i32 %416, %178
  %418 = sub i32 %417, %181
  %419 = sub i32 %418, %184
  %420 = sub i32 %419, %185
  %421 = sub i32 %420, %186
  %422 = add i32 %421, %187
  %423 = sub i32 %422, %188
  %424 = sub i32 %423, %189
  %425 = sub i32 %424, %190
  %426 = sub i32 %425, %194
  %427 = sub i32 %426, %195
  %428 = sub i32 %427, %102
  %429 = add i32 %428, %196
  %430 = sub i32 %429, %202
  %431 = sub i32 %430, %203
  %432 = sub i32 %431, %204
  %433 = sub i32 %432, %205
  %434 = sub i32 %433, %206
  %435 = sub i32 %434, %209
  %436 = add i32 %435, %210
  %437 = sub i32 %436, %211
  %438 = add i32 %437, %212
  %439 = sub i32 %438, %217
  %440 = add i32 %439, %218
  %441 = add i32 %440, %219
  %442 = sub i32 %441, %220
  %443 = sub i32 %442, %222
  %444 = sub i32 %443, %223
  %445 = add i32 %444, %224
  %446 = sub i32 %445, %33
  %447 = add i32 %446, %227
  %448 = sub i32 %447, %228
  %449 = sub i32 %448, %233
  %450 = sub i32 %449, %237
  %451 = add i32 %450, %239
  %452 = add i32 %451, %240
  %453 = sub i32 %452, %245
  %454 = add i32 %453, %248
  %455 = sub i32 %454, %249
  %456 = sub i32 %455, %252
  %457 = add i32 %456, %253
  %458 = add i32 %457, %257
  %459 = sub i32 %458, %213
  %460 = add i32 %459, %258
  %461 = add i32 %460, %264
  %462 = add i32 %461, %268
  %463 = add i32 %462, %269
  %464 = sub i32 %463, %272
  %465 = sub i32 %464, %274
  %466 = sub i32 %465, %275
  %467 = add i32 %466, %20
  %468 = add i32 %467, %22
  %469 = add i32 %468, %23
  %470 = sub i32 %469, %24
  %471 = add i32 %470, %28
  %472 = sub i32 %471, %29
  %473 = sub i32 %472, %34
  %474 = add i32 %473, %37
  %475 = sub i32 %474, %55
  %476 = sub i32 %475, %62
  %477 = sub i32 %476, %65
  %478 = sub i32 %477, %67
  %479 = sub i32 %478, %73
  %480 = add i32 %479, %87
  %481 = add i32 %480, %89
  %482 = sub i32 %481, %96
  %483 = sub i32 %482, %101
  %484 = add i32 %483, %103
  %485 = sub i32 %484, %106
  %486 = add i32 %485, %108
  %487 = sub i32 %486, %122
  %488 = sub i32 %487, %142
  %489 = sub i32 %488, %146
  %490 = sub i32 %489, %155
  %491 = sub i32 %490, %158
  %492 = sub i32 %491, %169
  %493 = sub i32 %492, %176
  %494 = sub i32 %493, %191
  %495 = add i32 %494, %192
  %496 = add i32 %495, %201
  %497 = sub i32 %496, %208
  %498 = add i32 %497, %214
  %499 = sub i32 %498, %235
  %500 = sub i32 %499, %244
  %501 = sub i32 %500, %247
  %502 = add i32 %501, %255
  %503 = sub i32 %502, %263
  %504 = add i32 %503, %266
  %505 = add i32 %504, %277
  %506 = add i32 %505, %281
  %507 = add i32 %506, %283
  %508 = add i32 %507, %284
  %509 = sub i32 %508, %27
  %510 = add i32 %509, %330
  %511 = add i32 %510, %328
  %512 = add i32 %511, %322
  %513 = add i32 %512, %326
  %514 = add i32 %513, %316
  %515 = add i32 %514, %307
  %516 = icmp eq i32 %18, %515
  %517 = select i1 %516, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %518 = tail call i32 @puts(i8* nonnull dereferenceable(1) %517)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
