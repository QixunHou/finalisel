digraph "DFG for'main' function" {
	Node0x8e2cb8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x8e2d38[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x8e2dc8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x8e2e28[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x8e32a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x8e6338[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x8e6418[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x8e64d8[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x8e6588[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x8e67e8[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x8e68a8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x8e7818[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x8e7e88[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x8e7f80[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x8e8188[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x8e82e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x8e83f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x8e84b8[shape=record, label="  ret i32 0"];
	Node0x8e2cb8 -> Node0x8e2d38;
	Node0x8e2d38 -> Node0x8e2dc8;
	Node0x8e2dc8 -> Node0x8e2e28;
	Node0x8e2e28 -> Node0x8e32a8;
	Node0x8e32a8 -> Node0x8e6338;
	Node0x8e6338 -> Node0x8e6418;
	Node0x8e6418 -> Node0x8e64d8;
	Node0x8e64d8 -> Node0x8e6588;
	Node0x8e6588 -> Node0x8e67e8;
	Node0x8e67e8 -> Node0x8e68a8;
	Node0x8e68a8 -> Node0x8e7818;
	Node0x8e7818 -> Node0x8e7e88;
	Node0x8e7e88 -> Node0x8e7f80;
	Node0x8e7f80 -> Node0x8e8188;
	Node0x8e8188 -> Node0x8e82e8;
	Node0x8e82e8 -> Node0x8e83f8;
	Node0x8e83f8 -> Node0x8e84b8;
edge [color=red]
	Node0x8e2cb8 -> Node0x8e2e28;
	Node0x8e2e28 -> Node0x8e32a8;
	Node0x8e2d38 -> Node0x8e6338;
	Node0x8e6338 -> Node0x8e6418;
	Node0x8e2dc8 -> Node0x8e64d8;
	Node0x8e64d8 -> Node0x8e6588;
	Node0x8e2cb8 -> Node0x8e67e8;
	Node0x8e2d38 -> Node0x8e67e8;
	Node0x8e2dc8 -> Node0x8e67e8;
	Node0x8e2cb8 -> Node0x8e68a8;
	Node0x8e2d38 -> Node0x8e7818;
	Node0x8e2dc8 -> Node0x8e7e88;
	Node0x8e68a8 -> Node0x8e7f80;
	Node0x8e7818 -> Node0x8e7f80;
	Node0x8e7e88 -> Node0x8e7f80;
	Node0x8e64d8 -> Node0x8e8188;
	Node0x8e6338 -> Node0x8e82e8;
	Node0x8e2e28 -> Node0x8e83f8;
}
