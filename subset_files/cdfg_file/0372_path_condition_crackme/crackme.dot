digraph "DFG for'crackme' function" {
	Node0x1974af0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1974b60[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1974c20[shape=record, label="  %5 = mul i32 %4, 5"];
	Node0x1974c90[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1974d30[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1974da0[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x1974e10[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1974eb0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1974f20[shape=record, label="  %11 = xor i32 %6, -1"];
	Node0x1974f90[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x1975000[shape=record, label="  %13 = xor i32 %4, -1"];
	Node0x19750a0[shape=record, label="  %14 = mul i32 %13, 7"];
	Node0x1975140[shape=record, label="  %15 = sub i32 3, %0"];
	Node0x19751b0[shape=record, label="  %16 = add i32 %15, %11"];
	Node0x1975220[shape=record, label="  %17 = add i32 %16, %12"];
	Node0x1975290[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x1975300[shape=record, label="  %19 = add i32 %18, %5"];
	Node0x1975370[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0x19753e0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x1975450[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x19754c0[shape=record, label="  %23 = icmp eq i32 %22, -1"];
	Node0x1915268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1975960[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x19759b0[shape=record, label="  ret void"];
	Node0x1974af0 -> Node0x1974b60;
	Node0x1974b60 -> Node0x1974c20;
	Node0x1974c20 -> Node0x1974c90;
	Node0x1974c90 -> Node0x1974d30;
	Node0x1974d30 -> Node0x1974da0;
	Node0x1974da0 -> Node0x1974e10;
	Node0x1974e10 -> Node0x1974eb0;
	Node0x1974eb0 -> Node0x1974f20;
	Node0x1974f20 -> Node0x1974f90;
	Node0x1974f90 -> Node0x1975000;
	Node0x1975000 -> Node0x19750a0;
	Node0x19750a0 -> Node0x1975140;
	Node0x1975140 -> Node0x19751b0;
	Node0x19751b0 -> Node0x1975220;
	Node0x1975220 -> Node0x1975290;
	Node0x1975290 -> Node0x1975300;
	Node0x1975300 -> Node0x1975370;
	Node0x1975370 -> Node0x19753e0;
	Node0x19753e0 -> Node0x1975450;
	Node0x1975450 -> Node0x19754c0;
	Node0x19754c0 -> Node0x1915268;
	Node0x1915268 -> Node0x1975960;
	Node0x1975960 -> Node0x19759b0;
edge [color=red]
	Node0x1974af0 -> Node0x1974b60;
	Node0x1974b60 -> Node0x1974c20;
	Node0x1974c90 -> Node0x1974d30;
	Node0x1974af0 -> Node0x1974da0;
	Node0x1974da0 -> Node0x1974e10;
	Node0x1974e10 -> Node0x1974eb0;
	Node0x1974c90 -> Node0x1974f20;
	Node0x1974b60 -> Node0x1975000;
	Node0x1975000 -> Node0x19750a0;
	Node0x1975140 -> Node0x19751b0;
	Node0x1974f20 -> Node0x19751b0;
	Node0x19751b0 -> Node0x1975220;
	Node0x1974f90 -> Node0x1975220;
	Node0x1975220 -> Node0x1975290;
	Node0x1974da0 -> Node0x1975290;
	Node0x1975290 -> Node0x1975300;
	Node0x1974c20 -> Node0x1975300;
	Node0x1975300 -> Node0x1975370;
	Node0x1974d30 -> Node0x1975370;
	Node0x1975370 -> Node0x19753e0;
	Node0x19750a0 -> Node0x19753e0;
	Node0x19753e0 -> Node0x1975450;
	Node0x1974eb0 -> Node0x1975450;
	Node0x1975450 -> Node0x19754c0;
	Node0x19754c0 -> Node0x1915268;
	Node0x1915268 -> Node0x1975960;
}
