; ModuleID = '../.././c_source_file/1051_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1051_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %0
  %8 = and i32 %4, %3
  %9 = xor i32 %5, -1
  %10 = or i32 %9, %4
  %11 = xor i32 %10, -1
  %12 = or i32 %8, %11
  %13 = shl i32 %12, 1
  %14 = sub i32 %13, %7
  %15 = xor i32 %4, %3
  %16 = xor i32 %15, -1
  %17 = xor i32 %5, %4
  %18 = xor i32 %17, -1
  %19 = or i32 %18, %16
  %20 = shl i32 %19, 1
  %21 = add i32 %14, %20
  %22 = xor i32 %2, -1
  %23 = and i32 %22, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %24, %1
  %26 = xor i32 %1, -1
  %27 = and i32 %26, %0
  %28 = xor i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %27, %29
  %31 = xor i32 %1, %0
  %32 = or i32 %23, %31
  %33 = shl i32 %32, 1
  %34 = and i32 %2, %1
  %35 = and i32 %34, %0
  %36 = or i32 %2, %1
  %37 = xor i32 %36, %0
  %38 = xor i32 %35, -1
  %39 = xor i32 %37, %38
  %40 = or i32 %26, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %29, %41
  %43 = xor i32 %2, %0
  %44 = and i32 %43, %1
  %45 = and i32 %26, %2
  %46 = and i32 %45, %0
  %47 = xor i32 %0, -1
  %48 = or i32 %26, %2
  %49 = and i32 %48, %47
  %50 = xor i32 %46, -1
  %51 = xor i32 %49, %50
  %52 = or i32 %27, %2
  %53 = xor i32 %34, -1
  %54 = or i32 %53, %0
  %55 = and i32 %2, %0
  %56 = xor i32 %55, %1
  %57 = xor i32 %43, -1
  %58 = or i32 %57, %41
  %59 = xor i32 %34, %0
  %60 = and i32 %28, %47
  %61 = xor i32 %28, %0
  %62 = xor i32 %61, %50
  %63 = and i32 %1, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %64, %2
  %66 = shl i32 %65, 1
  %67 = xor i32 %55, -1
  %68 = xor i32 %67, %1
  %69 = xor i32 %36, -1
  %70 = xor i32 %69, %0
  %71 = shl i32 %28, 1
  %72 = or i32 %43, %27
  %73 = and i32 %22, %1
  %74 = xor i32 %73, -1
  %75 = xor i32 %7, -1
  %76 = or i32 %31, %75
  %77 = xor i32 %27, -1
  %78 = xor i32 %77, %2
  %79 = or i32 %22, %0
  %80 = xor i32 %79, -1
  %81 = or i32 %63, %80
  %82 = and i32 %28, %40
  %83 = or i32 %1, %0
  %84 = and i32 %83, %57
  %85 = shl i32 %84, 1
  %86 = xor i32 %31, -1
  %87 = or i32 %23, %86
  %88 = and i32 %45, %47
  %89 = or i32 %28, %47
  %90 = xor i32 %88, %89
  %91 = and i32 %83, %22
  %92 = add i32 %28, 1
  %93 = or i32 %22, %1
  %94 = or i32 %93, %0
  %95 = or i32 %46, %49
  %96 = or i32 %75, %26
  %97 = and i32 %7, %1
  %98 = xor i32 %93, %63
  %99 = shl i32 %37, 1
  %100 = and i32 %79, %31
  %101 = or i32 %34, %0
  %102 = and i32 %29, %64
  %103 = shl i32 %102, 1
  %104 = or i32 %55, %31
  %105 = and i32 %28, %64
  %106 = xor i32 %55, %74
  %107 = and i32 %36, %0
  %108 = and i32 %53, %47
  %109 = or i32 %22, %86
  %110 = or i32 %55, %73
  %111 = or i32 %80, %26
  %112 = xor i32 %93, -1
  %113 = or i32 %112, %47
  %114 = xor i32 %53, %0
  %115 = shl i32 %114, 1
  %116 = and i32 %22, %77
  %117 = or i32 %55, %26
  %118 = xor i32 %36, %63
  %119 = xor i32 %74, %0
  %120 = or i32 %57, %26
  %121 = shl i32 %120, 2
  %122 = or i32 %43, %26
  %123 = and i32 %7, %31
  %124 = or i32 %73, %0
  %125 = and i32 %24, %86
  %126 = xor i32 %73, %0
  %127 = xor i32 %83, -1
  %128 = or i32 %43, %127
  %129 = xor i32 %60, %38
  %130 = and i32 %31, %57
  %131 = and i32 %53, %0
  %132 = xor i32 %27, %74
  %133 = xor i32 %55, %83
  %134 = or i32 %63, %2
  %135 = and i32 %28, %0
  %136 = and i32 %34, %47
  %137 = xor i32 %107, 2147483647
  %138 = xor i32 %137, %136
  %139 = shl i32 %138, 1
  %140 = and i32 %29, %0
  %141 = shl i32 %140, 1
  %142 = and i32 %7, %26
  %143 = or i32 %34, %27
  %144 = shl i32 %143, 1
  %145 = or i32 %29, %127
  %146 = and i32 %31, %2
  %147 = and i32 %93, %47
  %148 = add i32 %40, 1
  %149 = or i32 %31, %22
  %150 = xor i32 %23, %53
  %151 = xor i32 %83, %2
  %152 = and i32 %36, %47
  %153 = or i32 %35, %152
  %154 = and i32 %40, %57
  %155 = xor i32 %152, %38
  %156 = and i32 %28, %77
  %157 = and i32 %79, %1
  %158 = shl i32 %157, 1
  %159 = and i32 %28, %83
  %160 = or i32 %22, %41
  %161 = or i32 %31, %57
  %162 = shl i32 %161, 2
  %163 = xor i32 %7, %1
  %164 = or i32 %53, %47
  %165 = or i32 %23, %1
  %166 = or i32 %73, %47
  %167 = or i32 %28, %127
  %168 = or i32 %41, %2
  %169 = or i32 %28, %63
  %170 = or i32 %36, %47
  %171 = shl i32 %170, 2
  %172 = or i32 %28, %0
  %173 = xor i32 %172, -1
  %174 = or i32 %46, %173
  %175 = and i32 %86, %2
  %176 = and i32 %57, %26
  %177 = and i32 %79, %86
  %178 = xor i32 %63, %2
  %179 = or i32 %136, %135
  %180 = add i32 %34, 1
  %181 = and i32 %40, %2
  %182 = or i32 %23, %112
  %183 = or i32 %136, %107
  %184 = or i32 %27, %22
  %185 = and i32 %57, %77
  %186 = add i32 %7, 1
  %187 = or i32 %23, %34
  %188 = or i32 %63, %112
  %189 = xor i32 %27, %53
  %190 = xor i32 %80, %1
  %191 = or i32 %28, %41
  %192 = xor i32 %89, -1
  %193 = or i32 %88, %192
  %194 = xor i32 %0, 2147483647
  %195 = xor i32 %194, %48
  %196 = xor i32 %195, %46
  %197 = or i32 %86, %2
  %198 = or i32 %23, %26
  %199 = or i32 %57, %86
  %200 = shl i32 %199, 1
  %201 = or i32 %55, %1
  %202 = and i32 %29, %47
  %203 = and i32 %48, %0
  %204 = xor i32 %203, -1
  %205 = xor i32 %88, %204
  %206 = or i32 %22, %127
  %207 = and i32 %29, %77
  %208 = add i32 %55, 1
  %209 = or i32 %43, %41
  %210 = or i32 %43, %86
  %211 = or i32 %29, %0
  %212 = and i32 %74, %0
  %213 = and i32 %43, %83
  %214 = or i32 %43, %1
  %215 = xor i32 %135, -1
  %216 = xor i32 %136, %215
  %217 = or i32 %46, %61
  %218 = or i32 %69, %47
  %219 = and i32 %31, %67
  %220 = or i32 %74, %0
  %221 = or i32 %57, %1
  %222 = or i32 %75, %1
  %223 = add i32 %83, 1
  %224 = and i32 %79, %26
  %225 = and i32 %69, %47
  %226 = and i32 %73, %47
  %227 = and i32 %69, %0
  %228 = mul i32 %227, 12
  %229 = and i32 %73, %0
  %230 = mul i32 %229, -9
  %231 = and i32 %112, %47
  %232 = mul i32 %136, 11
  %233 = and i32 %112, %0
  %234 = mul i32 %35, 6
  %235 = and i32 %9, %4
  %236 = xor i32 %235, %3
  %237 = or i32 %4, %3
  %238 = xor i32 %237, -1
  %239 = or i32 %17, %238
  %240 = xor i32 %3, -1
  %241 = and i32 %240, %4
  %242 = xor i32 %241, %5
  %243 = or i32 %17, %241
  %244 = and i32 %18, %3
  %245 = and i32 %18, %16
  %246 = or i32 %9, %3
  %247 = xor i32 %246, -1
  %248 = or i32 %247, %4
  %249 = shl i32 %248, 1
  %250 = or i32 %240, %4
  %251 = xor i32 %5, %3
  %252 = xor i32 %251, -1
  %253 = and i32 %250, %252
  %254 = xor i32 %235, -1
  %255 = and i32 %254, %16
  %256 = or i32 %5, %3
  %257 = xor i32 %256, -1
  %258 = or i32 %246, %4
  %259 = and i32 %9, %3
  %260 = xor i32 %259, -1
  %261 = add i32 %259, 1
  %262 = xor i32 %8, -1
  %263 = and i32 %9, %262
  %264 = xor i32 %252, %4
  %265 = xor i32 %4, -1
  %266 = or i32 %259, %265
  %267 = and i32 %5, %4
  %268 = or i32 %267, %259
  %269 = and i32 %241, %5
  %270 = or i32 %240, %5
  %271 = xor i32 %270, %4
  %272 = or i32 %269, %271
  %273 = and i32 %256, %265
  %274 = xor i32 %267, %250
  %275 = and i32 %250, %18
  %276 = or i32 %5, %4
  %277 = xor i32 %276, -1
  %278 = or i32 %277, %240
  %279 = and i32 %5, %3
  %280 = and i32 %279, %4
  %281 = and i32 %251, %265
  %282 = or i32 %280, %281
  %283 = xor i32 %279, %4
  %284 = shl i32 %283, 1
  %285 = xor i32 %279, -1
  %286 = xor i32 %235, %285
  %287 = xor i32 %10, %3
  %288 = shl i32 %287, 1
  %289 = xor i32 %10, %8
  %290 = xor i32 %256, %8
  %291 = xor i32 %260, %4
  %292 = xor i32 %241, -1
  %293 = xor i32 %292, %5
  %294 = and i32 %279, %265
  %295 = and i32 %256, %4
  %296 = or i32 %294, %295
  %297 = or i32 %15, %18
  %298 = or i32 %241, %9
  %299 = and i32 %10, %240
  %300 = xor i32 %267, %256
  %301 = xor i32 %251, %4
  %302 = xor i32 %280, %301
  %303 = xor i32 %269, -1
  %304 = xor i32 %301, %303
  %305 = or i32 %257, %265
  %306 = or i32 %11, %16
  %307 = add i32 %237, 1
  %308 = xor i32 %295, 2147483647
  %309 = xor i32 %308, %294
  %310 = and i32 %270, %265
  %311 = or i32 %269, %310
  %312 = or i32 %8, %277
  %313 = shl i32 %312, 1
  %314 = and i32 %15, %9
  %315 = xor i32 %262, %5
  %316 = xor i32 %267, -1
  %317 = xor i32 %316, %3
  %318 = or i32 %269, %301
  %319 = or i32 %260, %265
  %320 = shl i32 %319, 1
  %321 = and i32 %254, %3
  %322 = and i32 %276, %15
  %323 = or i32 %235, %247
  %324 = or i32 %18, %240
  %325 = or i32 %285, %4
  %326 = or i32 %235, %279
  %327 = xor i32 %277, %3
  %328 = or i32 %267, %3
  %329 = and i32 %251, %4
  %330 = or i32 %294, %329
  %331 = xor i32 %329, -1
  %332 = xor i32 %294, %331
  %333 = or i32 %259, %241
  %334 = or i32 %9, %238
  %335 = or i32 %17, %240
  %336 = shl i32 %295, 1
  %337 = or i32 %17, %15
  %338 = or i32 %235, %16
  %339 = and i32 %252, %4
  %340 = or i32 %279, %265
  %341 = xor i32 %256, %4
  %342 = or i32 %8, %18
  %343 = xor i32 %310, %303
  %344 = and i32 %276, %240
  %345 = shl i32 %344, 1
  %346 = and i32 %17, %262
  %347 = and i32 %262, %5
  %348 = or i32 %251, %8
  %349 = and i32 %252, %292
  %350 = shl i32 %349, 1
  %351 = xor i32 %246, %4
  %352 = and i32 %316, %16
  %353 = shl i32 %352, 1
  %354 = xor i32 %250, %5
  %355 = and i32 %250, %5
  %356 = shl i32 %355, 1
  %357 = or i32 %260, %4
  %358 = xor i32 %259, %4
  %359 = and i32 %251, %250
  %360 = or i32 %18, %3
  %361 = or i32 %11, %3
  %362 = or i32 %279, %241
  %363 = or i32 %15, %277
  %364 = or i32 %267, %240
  %365 = and i32 %246, %4
  %366 = and i32 %18, %292
  %367 = or i32 %256, %4
  %368 = xor i32 %237, %5
  %369 = xor i32 %267, %260
  %370 = xor i32 %250, -1
  %371 = or i32 %279, %4
  %372 = or i32 %267, %16
  %373 = xor i32 %8, %5
  %374 = and i32 %237, %9
  %375 = or i32 %238, %5
  %376 = shl i32 %375, 1
  %377 = or i32 %267, %15
  %378 = and i32 %251, %237
  %379 = or i32 %267, %238
  %380 = and i32 %260, %265
  %381 = and i32 %285, %4
  %382 = and i32 %292, %5
  %383 = shl i32 %382, 1
  %384 = or i32 %280, %273
  %385 = and i32 %10, %16
  %386 = and i32 %10, %3
  %387 = or i32 %251, %238
  %388 = or i32 %277, %16
  %389 = or i32 %241, %5
  %390 = and i32 %257, %265
  %391 = and i32 %259, %265
  %392 = and i32 %257, %4
  %393 = and i32 %259, %4
  %394 = mul i32 %393, 22
  %395 = and i32 %247, %265
  %396 = shl i32 %395, 3
  %397 = and i32 %247, %4
  %398 = mul i32 %397, 21
  %399 = add i32 %280, %185
  %400 = add i32 %399, %392
  %401 = add i32 %400, %391
  %402 = sub i32 %401, %291
  %403 = sub i32 %402, %289
  %404 = add i32 %403, %282
  %405 = add i32 %404, %384
  %406 = mul i32 %405, 5
  %407 = add i32 %135, %77
  %408 = sub i32 %407, %30
  %409 = sub i32 %408, %388
  %410 = add i32 %409, %294
  %411 = add i32 %410, %346
  %412 = mul i32 %411, 3
  %413 = add i32 %390, %233
  %414 = shl i32 %413, 4
  %415 = add i32 %226, %225
  %416 = mul i32 %415, 15
  %417 = add i32 %63, -1
  %418 = add i32 %417, %184
  %419 = add i32 %418, %79
  %420 = add i32 %419, %52
  %421 = add i32 %420, %210
  %422 = add i32 %421, %190
  %423 = add i32 %422, %169
  %424 = add i32 %423, %164
  %425 = add i32 %424, %145
  %426 = add i32 %425, %96
  %427 = add i32 %426, %87
  %428 = add i32 %427, %153
  %429 = add i32 %428, %373
  %430 = add i32 %429, %196
  %431 = add i32 %430, %367
  %432 = add i32 %431, %365
  %433 = add i32 %432, %323
  %434 = add i32 %433, %322
  %435 = add i32 %434, %300
  %436 = add i32 %435, %239
  %437 = add i32 %436, %236
  %438 = add i32 %437, %330
  %439 = add i32 %438, %309
  %440 = shl i32 %439, 1
  %441 = add i32 %0, 3
  %442 = sub i32 %441, %1
  %443 = sub i32 %442, %83
  %444 = add i32 %443, %40
  %445 = add i32 %444, %86
  %446 = add i32 %445, %148
  %447 = sub i32 %446, %27
  %448 = add i32 %447, %64
  %449 = sub i32 %448, %31
  %450 = add i32 %449, %223
  %451 = add i32 %450, %78
  %452 = add i32 %451, %91
  %453 = add i32 %452, %92
  %454 = add i32 %453, %55
  %455 = add i32 %454, %93
  %456 = sub i32 %455, %109
  %457 = add i32 %456, %116
  %458 = add i32 %457, %43
  %459 = add i32 %458, %134
  %460 = sub i32 %459, %146
  %461 = add i32 %460, %149
  %462 = sub i32 %461, %151
  %463 = add i32 %462, %160
  %464 = add i32 %463, %168
  %465 = add i32 %464, %175
  %466 = add i32 %465, %178
  %467 = add i32 %466, %180
  %468 = add i32 %467, %181
  %469 = add i32 %468, %186
  %470 = sub i32 %469, %197
  %471 = sub i32 %470, %206
  %472 = add i32 %471, %208
  %473 = sub i32 %472, %79
  %474 = sub i32 %473, %25
  %475 = add i32 %474, %42
  %476 = sub i32 %475, %44
  %477 = add i32 %476, %54
  %478 = add i32 %477, %56
  %479 = sub i32 %478, %58
  %480 = add i32 %479, %59
  %481 = add i32 %480, %60
  %482 = sub i32 %481, %66
  %483 = add i32 %482, %68
  %484 = sub i32 %483, %70
  %485 = sub i32 %484, %71
  %486 = add i32 %485, %72
  %487 = sub i32 %486, %76
  %488 = sub i32 %487, %81
  %489 = add i32 %488, %82
  %490 = sub i32 %489, %94
  %491 = sub i32 %490, %97
  %492 = sub i32 %491, %98
  %493 = sub i32 %492, %100
  %494 = sub i32 %493, %101
  %495 = sub i32 %494, %104
  %496 = add i32 %495, %105
  %497 = sub i32 %496, %106
  %498 = sub i32 %497, %107
  %499 = sub i32 %498, %108
  %500 = add i32 %499, %110
  %501 = add i32 %500, %111
  %502 = sub i32 %501, %113
  %503 = add i32 %502, %117
  %504 = sub i32 %503, %118
  %505 = sub i32 %504, %119
  %506 = add i32 %505, %122
  %507 = sub i32 %506, %123
  %508 = sub i32 %507, %124
  %509 = sub i32 %508, %125
  %510 = add i32 %509, %126
  %511 = add i32 %510, %128
  %512 = sub i32 %511, %130
  %513 = sub i32 %512, %131
  %514 = sub i32 %513, %132
  %515 = sub i32 %514, %133
  %516 = sub i32 %515, %142
  %517 = add i32 %516, %147
  %518 = sub i32 %517, %150
  %519 = sub i32 %518, %154
  %520 = sub i32 %519, %156
  %521 = add i32 %520, %159
  %522 = sub i32 %521, %163
  %523 = add i32 %522, %165
  %524 = add i32 %523, %166
  %525 = add i32 %524, %167
  %526 = sub i32 %525, %176
  %527 = add i32 %526, %89
  %528 = add i32 %527, %177
  %529 = sub i32 %528, %182
  %530 = add i32 %529, %187
  %531 = add i32 %530, %188
  %532 = sub i32 %531, %189
  %533 = sub i32 %532, %191
  %534 = sub i32 %533, %198
  %535 = add i32 %534, %201
  %536 = sub i32 %535, %202
  %537 = sub i32 %536, %207
  %538 = sub i32 %537, %209
  %539 = sub i32 %538, %61
  %540 = sub i32 %539, %211
  %541 = add i32 %540, %212
  %542 = add i32 %541, %213
  %543 = add i32 %542, %214
  %544 = add i32 %543, %218
  %545 = add i32 %544, %219
  %546 = sub i32 %545, %220
  %547 = sub i32 %546, %221
  %548 = sub i32 %547, %222
  %549 = add i32 %548, %224
  %550 = add i32 %549, %231
  %551 = sub i32 %550, %4
  %552 = sub i32 %551, %33
  %553 = sub i32 %552, %39
  %554 = sub i32 %553, %51
  %555 = sub i32 %554, %62
  %556 = sub i32 %555, %85
  %557 = add i32 %556, %90
  %558 = sub i32 %557, %95
  %559 = sub i32 %558, %99
  %560 = sub i32 %559, %103
  %561 = sub i32 %560, %115
  %562 = sub i32 %561, %121
  %563 = add i32 %562, %129
  %564 = sub i32 %563, %141
  %565 = sub i32 %564, %144
  %566 = sub i32 %565, %155
  %567 = sub i32 %566, %158
  %568 = sub i32 %567, %162
  %569 = sub i32 %568, %171
  %570 = add i32 %569, %174
  %571 = add i32 %570, %179
  %572 = sub i32 %571, %183
  %573 = add i32 %572, %193
  %574 = sub i32 %573, %200
  %575 = add i32 %574, %205
  %576 = sub i32 %575, %216
  %577 = sub i32 %576, %217
  %578 = add i32 %577, %228
  %579 = add i32 %578, %230
  %580 = add i32 %579, %232
  %581 = add i32 %580, %234
  %582 = sub i32 %581, %5
  %583 = add i32 %582, %307
  %584 = add i32 %583, %370
  %585 = add i32 %584, %9
  %586 = add i32 %585, %242
  %587 = add i32 %586, %257
  %588 = add i32 %587, %261
  %589 = sub i32 %588, %263
  %590 = add i32 %589, %277
  %591 = sub i32 %590, %293
  %592 = add i32 %591, %267
  %593 = sub i32 %592, %298
  %594 = sub i32 %593, %314
  %595 = add i32 %594, %315
  %596 = sub i32 %595, %334
  %597 = sub i32 %596, %347
  %598 = sub i32 %597, %276
  %599 = add i32 %598, %354
  %600 = sub i32 %599, %17
  %601 = sub i32 %600, %368
  %602 = sub i32 %601, %374
  %603 = sub i32 %602, %389
  %604 = add i32 %603, %416
  %605 = sub i32 %604, %139
  %606 = sub i32 %605, %243
  %607 = add i32 %606, %244
  %608 = sub i32 %607, %245
  %609 = add i32 %608, %253
  %610 = add i32 %609, %255
  %611 = sub i32 %610, %258
  %612 = sub i32 %611, %264
  %613 = sub i32 %612, %266
  %614 = sub i32 %613, %268
  %615 = add i32 %614, %273
  %616 = add i32 %615, %274
  %617 = add i32 %616, %275
  %618 = add i32 %617, %278
  %619 = sub i32 %618, %286
  %620 = add i32 %619, %290
  %621 = add i32 %620, %297
  %622 = add i32 %621, %299
  %623 = sub i32 %622, %305
  %624 = add i32 %623, %306
  %625 = sub i32 %624, %317
  %626 = sub i32 %625, %321
  %627 = sub i32 %626, %324
  %628 = sub i32 %627, %325
  %629 = sub i32 %628, %326
  %630 = add i32 %629, %327
  %631 = sub i32 %630, %328
  %632 = sub i32 %631, %333
  %633 = sub i32 %632, %335
  %634 = sub i32 %633, %337
  %635 = add i32 %634, %338
  %636 = sub i32 %635, %339
  %637 = add i32 %636, %340
  %638 = sub i32 %637, %341
  %639 = add i32 %638, %342
  %640 = sub i32 %639, %348
  %641 = add i32 %640, %351
  %642 = sub i32 %641, %356
  %643 = add i32 %642, %357
  %644 = sub i32 %643, %358
  %645 = sub i32 %644, %359
  %646 = add i32 %645, %360
  %647 = sub i32 %646, %361
  %648 = add i32 %647, %362
  %649 = sub i32 %648, %363
  %650 = add i32 %649, %364
  %651 = add i32 %650, %366
  %652 = add i32 %651, %369
  %653 = add i32 %652, %371
  %654 = add i32 %653, %372
  %655 = sub i32 %654, %376
  %656 = add i32 %655, %377
  %657 = sub i32 %656, %378
  %658 = add i32 %657, %379
  %659 = add i32 %658, %380
  %660 = add i32 %659, %381
  %661 = sub i32 %660, %383
  %662 = add i32 %661, %385
  %663 = sub i32 %662, %386
  %664 = add i32 %663, %387
  %665 = sub i32 %664, %249
  %666 = sub i32 %665, %272
  %667 = sub i32 %666, %284
  %668 = sub i32 %667, %288
  %669 = sub i32 %668, %296
  %670 = add i32 %669, %302
  %671 = sub i32 %670, %304
  %672 = sub i32 %671, %311
  %673 = sub i32 %672, %313
  %674 = add i32 %673, %318
  %675 = sub i32 %674, %320
  %676 = sub i32 %675, %332
  %677 = sub i32 %676, %336
  %678 = sub i32 %677, %343
  %679 = sub i32 %678, %345
  %680 = sub i32 %679, %350
  %681 = sub i32 %680, %353
  %682 = add i32 %681, %394
  %683 = add i32 %682, %396
  %684 = add i32 %683, %398
  %685 = add i32 %684, %414
  %686 = add i32 %685, %412
  %687 = add i32 %686, %406
  %688 = add i32 %687, %440
  %689 = icmp eq i32 %21, %688
  %690 = select i1 %689, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %691 = tail call i32 @puts(i8* nonnull dereferenceable(1) %690)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
