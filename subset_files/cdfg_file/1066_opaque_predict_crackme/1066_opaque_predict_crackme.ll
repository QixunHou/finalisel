; ModuleID = '../.././c_source_file/1066_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1066_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %0, -1
  %8 = or i32 %2, %1
  %9 = and i32 %8, %7
  %10 = shl i32 %9, 1
  %11 = sub i32 %10, %6
  %12 = xor i32 %3, -1
  %13 = or i32 %4, %3
  %14 = xor i32 %4, -1
  %15 = add i32 %4, 1
  %16 = xor i32 %6, -1
  %17 = and i32 %14, %3
  %18 = xor i32 %17, -1
  %19 = add i32 %13, 1
  %20 = xor i32 %3, 1073741823
  %21 = and i32 %20, %4
  %22 = shl i32 %21, 2
  %23 = shl i32 %17, 1
  %24 = and i32 %4, %3
  %25 = and i32 %2, %1
  %26 = and i32 %25, %7
  %27 = xor i32 %2, %1
  %28 = and i32 %27, %0
  %29 = xor i32 %26, -1
  %30 = xor i32 %28, %29
  %31 = and i32 %2, %0
  %32 = xor i32 %2, -1
  %33 = and i32 %32, %1
  %34 = xor i32 %33, -1
  %35 = xor i32 %31, %34
  %36 = xor i32 %1, -1
  %37 = and i32 %36, %2
  %38 = and i32 %37, %0
  %39 = or i32 %27, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %38, %40
  %42 = and i32 %36, %0
  %43 = or i32 %42, %32
  %44 = xor i32 %27, %0
  %45 = xor i32 %42, %34
  %46 = or i32 %26, %28
  %47 = or i32 %32, %1
  %48 = xor i32 %47, -1
  %49 = xor i32 %48, %0
  %50 = or i32 %36, %0
  %51 = and i32 %50, %2
  %52 = xor i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %53, %1
  %55 = xor i32 %27, -1
  %56 = and i32 %50, %55
  %57 = and i32 %1, %0
  %58 = or i32 %57, %53
  %59 = xor i32 %50, -1
  %60 = or i32 %27, %59
  %61 = or i32 %1, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %52, %62
  %64 = xor i32 %31, -1
  %65 = and i32 %64, %1
  %66 = or i32 %2, %0
  %67 = xor i32 %66, %57
  %68 = shl i32 %28, 1
  %69 = xor i32 %57, -1
  %70 = xor i32 %50, %2
  %71 = xor i32 %42, -1
  %72 = and i32 %52, %71
  %73 = or i32 %31, %33
  %74 = or i32 %25, %42
  %75 = and i32 %32, %0
  %76 = xor i32 %69, %2
  %77 = or i32 %34, %7
  %78 = or i32 %75, %36
  %79 = xor i32 %71, %2
  %80 = or i32 %31, %59
  %81 = or i32 %52, %59
  %82 = shl i32 %81, 2
  %83 = and i32 %27, %7
  %84 = shl i32 %2, 2
  %85 = and i32 %27, %69
  %86 = xor i32 %66, -1
  %87 = or i32 %86, %36
  %88 = or i32 %75, %25
  %89 = or i32 %32, %0
  %90 = xor i32 %89, %1
  %91 = and i32 %34, %7
  %92 = or i32 %31, %62
  %93 = and i32 %50, %53
  %94 = xor i32 %89, -1
  %95 = xor i32 %1, %0
  %96 = xor i32 %95, -1
  %97 = or i32 %94, %96
  %98 = and i32 %89, %1
  %99 = and i32 %32, %69
  %100 = and i32 %37, %7
  %101 = or i32 %36, %2
  %102 = and i32 %101, %0
  %103 = xor i32 %102, -1
  %104 = xor i32 %100, %103
  %105 = or i32 %52, %36
  %106 = and i32 %25, %0
  %107 = or i32 %106, %83
  %108 = or i32 %94, %36
  %109 = and i32 %47, %7
  %110 = shl i32 %109, 1
  %111 = or i32 %57, %2
  %112 = xor i32 %25, -1
  %113 = xor i32 %42, %112
  %114 = or i32 %62, %2
  %115 = and i32 %27, %50
  %116 = and i32 %95, %53
  %117 = shl i32 %116, 1
  %118 = xor i32 %75, -1
  %119 = and i32 %118, %96
  %120 = xor i32 %38, %39
  %121 = and i32 %112, %7
  %122 = xor i32 %31, %50
  %123 = or i32 %32, %62
  %124 = xor i32 %47, %0
  %125 = or i32 %52, %1
  %126 = shl i32 %125, 1
  %127 = xor i32 %75, %47
  %128 = or i32 %75, %1
  %129 = or i32 %27, %57
  %130 = shl i32 %129, 1
  %131 = and i32 %118, %1
  %132 = and i32 %71, %2
  %133 = and i32 %64, %36
  %134 = or i32 %95, %32
  %135 = and i32 %32, %96
  %136 = shl i32 %48, 1
  %137 = and i32 %112, %0
  %138 = and i32 %101, %7
  %139 = xor i32 %38, -1
  %140 = xor i32 %138, %139
  %141 = and i32 %53, %1
  %142 = xor i32 %8, %0
  %143 = xor i32 %142, 2147483647
  %144 = xor i32 %143, %106
  %145 = shl i32 %144, 1
  %146 = and i32 %95, %32
  %147 = or i32 %47, %0
  %148 = and i32 %52, %96
  %149 = and i32 %50, %32
  %150 = xor i32 %101, %0
  %151 = or i32 %38, %150
  %152 = xor i32 %64, %1
  %153 = and i32 %66, %96
  %154 = xor i32 %25, %0
  %155 = and i32 %27, %61
  %156 = and i32 %53, %69
  %157 = xor i32 %34, %0
  %158 = xor i32 %8, -1
  %159 = or i32 %57, %158
  %160 = or i32 %52, %96
  %161 = or i32 %112, %0
  %162 = xor i32 %94, %1
  %163 = and i32 %8, %0
  %164 = xor i32 %163, %29
  %165 = xor i32 %55, %0
  %166 = or i32 %31, %95
  %167 = and i32 %95, %2
  %168 = or i32 %86, %1
  %169 = or i32 %26, %163
  %170 = or i32 %52, %57
  %171 = xor i32 %31, %61
  %172 = shl i32 %171, 1
  %173 = and i32 %61, %32
  %174 = xor i32 %44, %139
  %175 = or i32 %158, %7
  %176 = xor i32 %158, %0
  %177 = or i32 %48, %0
  %178 = and i32 %95, %118
  %179 = or i32 %34, %0
  %180 = and i32 %55, %71
  %181 = shl i32 %25, 1
  %182 = xor i32 %33, %0
  %183 = shl i32 %182, 1
  %184 = or i32 %96, %2
  %185 = xor i32 %31, %8
  %186 = and i32 %53, %71
  %187 = or i32 %38, %138
  %188 = and i32 %89, %96
  %189 = or i32 %95, %94
  %190 = or i32 %95, %53
  %191 = or i32 %55, %0
  %192 = or i32 %75, %48
  %193 = and i32 %64, %96
  %194 = or i32 %27, %7
  %195 = or i32 %42, %55
  %196 = or i32 %106, %142
  %197 = and i32 %34, %0
  %198 = or i32 %8, %0
  %199 = add i32 %31, 1
  %200 = xor i32 %86, %1
  %201 = and i32 %53, %96
  %202 = or i32 %53, %62
  %203 = or i32 %57, %94
  %204 = or i32 %53, %36
  %205 = and i32 %66, %95
  %206 = or i32 %55, %59
  %207 = xor i32 %59, %2
  %208 = xor i32 %47, %57
  %209 = shl i32 %208, 1
  %210 = xor i32 %100, %194
  %211 = or i32 %42, %53
  %212 = shl i32 %211, 1
  %213 = xor i32 %57, %2
  %214 = xor i32 %106, %44
  %215 = and i32 %89, %95
  %216 = shl i32 %215, 1
  %217 = or i32 %27, %42
  %218 = shl i32 %217, 1
  %219 = or i32 %55, %62
  %220 = or i32 %75, %96
  %221 = or i32 %33, %0
  %222 = or i32 %48, %7
  %223 = shl i32 %53, 2
  %224 = or i32 %31, %96
  %225 = add i32 %95, 1
  %226 = shl i32 %47, 1
  %227 = or i32 %75, %95
  %228 = or i32 %38, %44
  %229 = or i32 %57, %86
  %230 = and i32 %52, %95
  %231 = or i32 %47, %7
  %232 = or i32 %31, %36
  %233 = or i32 %57, %55
  %234 = and i32 %27, %71
  %235 = and i32 %52, %1
  %236 = or i32 %158, %0
  %237 = and i32 %89, %36
  %238 = and i32 %52, %50
  %239 = or i32 %8, %7
  %240 = or i32 %42, %2
  %241 = and i32 %55, %0
  %242 = or i32 %95, %2
  %243 = xor i32 %75, %112
  %244 = and i32 %69, %2
  %245 = xor i32 %61, %2
  %246 = add i32 %75, 1
  %247 = xor i32 %31, %1
  %248 = or i32 %59, %2
  %249 = or i32 %53, %59
  %250 = add i32 %33, 1
  %251 = xor i32 %150, %139
  %252 = or i32 %52, %95
  %253 = add i32 %25, 1
  %254 = or i32 %31, %1
  %255 = or i32 %32, %59
  %256 = and i32 %61, %55
  %257 = or i32 %94, %1
  %258 = xor i32 %83, -1
  %259 = xor i32 %106, %258
  %260 = and i32 %61, %53
  %261 = or i32 %57, %48
  %262 = xor i32 %42, %2
  %263 = and i32 %95, %64
  %264 = and i32 %158, %7
  %265 = mul i32 %264, 6
  %266 = and i32 %33, %7
  %267 = mul i32 %266, -11
  %268 = and i32 %158, %0
  %269 = shl i32 %268, 4
  %270 = and i32 %33, %0
  %271 = mul i32 %270, 13
  %272 = and i32 %48, %7
  %273 = mul i32 %272, 23
  %274 = mul i32 %26, -10
  %275 = and i32 %48, %0
  %276 = shl i32 %275, 3
  %277 = add i32 %61, %1
  %278 = add i32 %277, %8
  %279 = add i32 %278, %184
  %280 = add i32 %279, %123
  %281 = add i32 %280, %31
  %282 = add i32 %281, %254
  %283 = add i32 %282, %260
  %284 = add i32 %283, %252
  %285 = add i32 %284, %241
  %286 = add i32 %285, %206
  %287 = add i32 %286, %202
  %288 = add i32 %287, %161
  %289 = add i32 %288, %156
  %290 = add i32 %289, %141
  %291 = add i32 %290, %133
  %292 = add i32 %291, %124
  %293 = add i32 %292, %119
  %294 = add i32 %293, %98
  %295 = add i32 %294, %77
  %296 = shl i32 %295, 1
  %297 = sub i32 %239, %163
  %298 = sub i32 %297, %220
  %299 = add i32 %298, %58
  %300 = sub i32 %299, %4
  %301 = add i32 %300, %18
  %302 = sub i32 %301, %24
  %303 = mul i32 %302, 3
  %304 = add i32 %106, %253
  %305 = sub i32 %304, %122
  %306 = add i32 %305, %35
  %307 = add i32 %306, %19
  %308 = sub i32 %307, %228
  %309 = mul i32 %308, 5
  %310 = add i32 %227, %146
  %311 = shl i32 %310, 2
  %312 = add i32 %0, %1
  %313 = add i32 %312, %57
  %314 = add i32 %313, 4
  %315 = add i32 %314, %59
  %316 = sub i32 %315, %50
  %317 = add i32 %316, %95
  %318 = add i32 %317, %225
  %319 = add i32 %318, %12
  %320 = add i32 %319, %43
  %321 = add i32 %320, %51
  %322 = add i32 %321, %52
  %323 = sub i32 %322, %70
  %324 = sub i32 %323, %33
  %325 = add i32 %324, %75
  %326 = sub i32 %325, %76
  %327 = sub i32 %326, %79
  %328 = sub i32 %327, %84
  %329 = sub i32 %328, %99
  %330 = sub i32 %329, %111
  %331 = sub i32 %330, %114
  %332 = add i32 %331, %132
  %333 = add i32 %332, %134
  %334 = add i32 %333, %135
  %335 = add i32 %334, %94
  %336 = add i32 %335, %149
  %337 = add i32 %336, %167
  %338 = sub i32 %337, %173
  %339 = add i32 %338, %199
  %340 = add i32 %339, %207
  %341 = sub i32 %340, %213
  %342 = sub i32 %341, %89
  %343 = sub i32 %342, %240
  %344 = add i32 %343, %242
  %345 = add i32 %344, %244
  %346 = sub i32 %345, %245
  %347 = add i32 %346, %246
  %348 = add i32 %347, %248
  %349 = add i32 %348, %250
  %350 = sub i32 %349, %255
  %351 = sub i32 %350, %262
  %352 = add i32 %351, %15
  %353 = sub i32 %352, %44
  %354 = add i32 %353, %45
  %355 = sub i32 %354, %49
  %356 = add i32 %355, %54
  %357 = sub i32 %356, %56
  %358 = add i32 %357, %60
  %359 = sub i32 %358, %63
  %360 = sub i32 %359, %65
  %361 = sub i32 %360, %67
  %362 = sub i32 %361, %72
  %363 = add i32 %362, %73
  %364 = sub i32 %363, %74
  %365 = sub i32 %364, %78
  %366 = add i32 %365, %80
  %367 = add i32 %366, %83
  %368 = add i32 %367, %85
  %369 = add i32 %368, %87
  %370 = sub i32 %369, %88
  %371 = add i32 %370, %90
  %372 = add i32 %371, %91
  %373 = sub i32 %372, %92
  %374 = sub i32 %373, %93
  %375 = sub i32 %374, %97
  %376 = sub i32 %375, %105
  %377 = add i32 %376, %108
  %378 = add i32 %377, %113
  %379 = sub i32 %378, %115
  %380 = sub i32 %379, %121
  %381 = add i32 %380, %127
  %382 = add i32 %381, %128
  %383 = add i32 %382, %131
  %384 = sub i32 %383, %136
  %385 = sub i32 %384, %137
  %386 = add i32 %385, %147
  %387 = add i32 %386, %148
  %388 = sub i32 %387, %152
  %389 = sub i32 %388, %153
  %390 = add i32 %389, %154
  %391 = sub i32 %390, %155
  %392 = sub i32 %391, %157
  %393 = add i32 %392, %159
  %394 = add i32 %393, %160
  %395 = sub i32 %394, %162
  %396 = sub i32 %395, %165
  %397 = sub i32 %396, %166
  %398 = sub i32 %397, %168
  %399 = sub i32 %398, %170
  %400 = add i32 %399, %175
  %401 = add i32 %400, %176
  %402 = sub i32 %401, %177
  %403 = add i32 %402, %178
  %404 = sub i32 %403, %179
  %405 = sub i32 %404, %180
  %406 = sub i32 %405, %181
  %407 = sub i32 %406, %185
  %408 = add i32 %407, %186
  %409 = sub i32 %408, %188
  %410 = sub i32 %409, %189
  %411 = add i32 %410, %190
  %412 = sub i32 %411, %191
  %413 = add i32 %412, %192
  %414 = sub i32 %413, %193
  %415 = add i32 %414, %194
  %416 = sub i32 %415, %195
  %417 = sub i32 %416, %197
  %418 = add i32 %417, %198
  %419 = add i32 %418, %200
  %420 = add i32 %419, %201
  %421 = sub i32 %420, %203
  %422 = sub i32 %421, %204
  %423 = add i32 %422, %205
  %424 = add i32 %423, %219
  %425 = add i32 %424, %221
  %426 = add i32 %425, %222
  %427 = sub i32 %426, %223
  %428 = sub i32 %427, %224
  %429 = sub i32 %428, %226
  %430 = add i32 %429, %39
  %431 = sub i32 %430, %229
  %432 = sub i32 %431, %230
  %433 = add i32 %432, %231
  %434 = sub i32 %433, %232
  %435 = add i32 %434, %233
  %436 = add i32 %435, %234
  %437 = sub i32 %436, %235
  %438 = add i32 %437, %236
  %439 = sub i32 %438, %237
  %440 = add i32 %439, %238
  %441 = sub i32 %440, %243
  %442 = add i32 %441, %247
  %443 = sub i32 %442, %249
  %444 = add i32 %443, %256
  %445 = add i32 %444, %257
  %446 = add i32 %445, %261
  %447 = add i32 %446, %263
  %448 = sub i32 %447, %142
  %449 = add i32 %448, %13
  %450 = add i32 %449, %16
  %451 = add i32 %450, %30
  %452 = sub i32 %451, %41
  %453 = add i32 %452, %46
  %454 = sub i32 %453, %68
  %455 = sub i32 %454, %82
  %456 = add i32 %455, %104
  %457 = sub i32 %456, %107
  %458 = sub i32 %457, %110
  %459 = sub i32 %458, %117
  %460 = sub i32 %459, %120
  %461 = sub i32 %460, %126
  %462 = sub i32 %461, %130
  %463 = add i32 %462, %140
  %464 = sub i32 %463, %151
  %465 = add i32 %464, %164
  %466 = sub i32 %465, %169
  %467 = sub i32 %466, %172
  %468 = add i32 %467, %174
  %469 = sub i32 %468, %183
  %470 = add i32 %469, %187
  %471 = sub i32 %470, %196
  %472 = sub i32 %471, %209
  %473 = add i32 %472, %210
  %474 = sub i32 %473, %212
  %475 = add i32 %474, %214
  %476 = sub i32 %475, %216
  %477 = sub i32 %476, %218
  %478 = add i32 %477, %251
  %479 = add i32 %478, %259
  %480 = add i32 %479, %265
  %481 = add i32 %480, %267
  %482 = add i32 %481, %269
  %483 = add i32 %482, %271
  %484 = add i32 %483, %273
  %485 = add i32 %484, %274
  %486 = add i32 %485, %276
  %487 = sub i32 %486, %22
  %488 = sub i32 %487, %23
  %489 = add i32 %488, %311
  %490 = sub i32 %489, %145
  %491 = add i32 %490, %309
  %492 = add i32 %491, %303
  %493 = add i32 %492, %296
  %494 = icmp eq i32 %11, %493
  %495 = select i1 %494, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %496 = tail call i32 @puts(i8* nonnull dereferenceable(1) %495)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
