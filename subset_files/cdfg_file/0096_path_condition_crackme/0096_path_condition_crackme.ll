; ModuleID = '../.././c_source_file/0096_path_condition_crackme.c'
source_filename = "../.././c_source_file/0096_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = shl i32 %4, 1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %0
  %10 = xor i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = or i32 %9, %11
  %13 = shl i32 %12, 1
  %14 = xor i32 %2, %1
  %15 = xor i32 %14, -1
  %16 = xor i32 %15, %0
  %17 = sub i32 %16, %6
  %18 = add i32 %17, %7
  %19 = add i32 %18, %13
  %20 = xor i32 %4, -1
  %21 = xor i32 %3, -1
  %22 = or i32 %21, %4
  %23 = or i32 %20, %3
  %24 = or i32 %4, %3
  %25 = add i32 %4, 1
  %26 = and i32 %4, %3
  %27 = xor i32 %26, -1
  %28 = xor i32 %24, -1
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %11
  %32 = and i32 %2, %0
  %33 = and i32 %1, %0
  %34 = shl i32 %33, 1
  %35 = or i32 %30, %11
  %36 = xor i32 %1, -1
  %37 = or i32 %36, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %30, %38
  %40 = or i32 %2, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %0
  %43 = and i32 %36, %0
  %44 = or i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %14, %45
  %47 = and i32 %2, %1
  %48 = and i32 %47, %0
  %49 = xor i32 %0, -1
  %50 = and i32 %40, %49
  %51 = xor i32 %48, 2147483647
  %52 = xor i32 %51, %50
  %53 = shl i32 %52, 1
  %54 = or i32 %2, %0
  %55 = and i32 %54, %1
  %56 = xor i32 %47, -1
  %57 = and i32 %56, %49
  %58 = xor i32 %54, -1
  %59 = or i32 %10, %58
  %60 = shl i32 %59, 1
  %61 = and i32 %29, %11
  %62 = xor i32 %38, %2
  %63 = xor i32 %43, -1
  %64 = and i32 %63, %2
  %65 = xor i32 %45, %2
  %66 = or i32 %43, %2
  %67 = xor i32 %9, %56
  %68 = or i32 %10, %30
  %69 = shl i32 %68, 1
  %70 = and i32 %10, %8
  %71 = or i32 %8, %1
  %72 = and i32 %47, %49
  %73 = and i32 %40, %0
  %74 = or i32 %72, %73
  %75 = and i32 %8, %1
  %76 = or i32 %75, %49
  %77 = xor i32 %44, %2
  %78 = add i32 %2, 1
  %79 = xor i32 %37, %2
  %80 = or i32 %41, %49
  %81 = or i32 %32, %10
  %82 = xor i32 %33, -1
  %83 = and i32 %30, %82
  %84 = xor i32 %75, -1
  %85 = or i32 %84, %0
  %86 = xor i32 %32, -1
  %87 = and i32 %86, %36
  %88 = shl i32 %87, 1
  %89 = and i32 %15, %0
  %90 = or i32 %15, %45
  %91 = or i32 %11, %2
  %92 = and i32 %36, %2
  %93 = and i32 %92, %0
  %94 = or i32 %36, %2
  %95 = xor i32 %94, %0
  %96 = or i32 %93, %95
  %97 = and i32 %10, %86
  %98 = xor i32 %41, %0
  %99 = xor i32 %9, -1
  %100 = and i32 %99, %11
  %101 = xor i32 %9, %1
  %102 = xor i32 %84, %0
  %103 = shl i32 %102, 2
  %104 = or i32 %29, %11
  %105 = shl i32 %104, 1
  %106 = or i32 %15, %38
  %107 = xor i32 %71, -1
  %108 = or i32 %107, %49
  %109 = and i32 %30, %36
  %110 = and i32 %29, %44
  %111 = and i32 %71, %49
  %112 = or i32 %29, %38
  %113 = and i32 %82, %2
  %114 = and i32 %92, %49
  %115 = or i32 %14, %49
  %116 = xor i32 %114, %115
  %117 = or i32 %8, %0
  %118 = and i32 %117, %36
  %119 = xor i32 %117, -1
  %120 = or i32 %119, %36
  %121 = or i32 %32, %38
  %122 = or i32 %10, %119
  %123 = xor i32 %32, %44
  %124 = shl i32 %123, 1
  %125 = and i32 %99, %1
  %126 = xor i32 %86, %1
  %127 = and i32 %29, %10
  %128 = or i32 %33, %58
  %129 = or i32 %29, %10
  %130 = xor i32 %117, %1
  %131 = and i32 %44, %15
  %132 = and i32 %30, %63
  %133 = xor i32 %14, %0
  %134 = xor i32 %133, -1
  %135 = xor i32 %93, %134
  %136 = or i32 %9, %10
  %137 = xor i32 %94, -1
  %138 = or i32 %137, %0
  %139 = xor i32 %93, %138
  %140 = xor i32 %63, %2
  %141 = or i32 %30, %1
  %142 = and i32 %30, %1
  %143 = or i32 %43, %15
  %144 = and i32 %14, %37
  %145 = or i32 %45, %2
  %146 = xor i32 %47, %0
  %147 = shl i32 %146, 1
  %148 = and i32 %54, %11
  %149 = add i32 %71, 1
  %150 = or i32 %40, %49
  %151 = shl i32 %150, 1
  %152 = or i32 %10, %8
  %153 = or i32 %47, %43
  %154 = and i32 %14, %0
  %155 = xor i32 %154, -1
  %156 = xor i32 %72, %155
  %157 = or i32 %38, %2
  %158 = or i32 %33, %119
  %159 = or i32 %15, %49
  %160 = and i32 %44, %8
  %161 = xor i32 %32, %40
  %162 = and i32 %15, %49
  %163 = xor i32 %40, %33
  %164 = and i32 %29, %37
  %165 = or i32 %30, %45
  %166 = or i32 %9, %47
  %167 = or i32 %15, %0
  %168 = or i32 %84, %49
  %169 = or i32 %14, %43
  %170 = or i32 %8, %11
  %171 = or i32 %56, %0
  %172 = xor i32 %73, 2147483647
  %173 = xor i32 %172, %72
  %174 = or i32 %29, %36
  %175 = or i32 %75, %0
  %176 = and i32 %94, %0
  %177 = or i32 %114, %176
  %178 = and i32 %8, %63
  %179 = or i32 %48, %134
  %180 = shl i32 %179, 2
  %181 = and i32 %14, %44
  %182 = shl i32 %181, 1
  %183 = and i32 %37, %8
  %184 = or i32 %33, %8
  %185 = or i32 %14, %0
  %186 = xor i32 %43, %56
  %187 = or i32 %107, %0
  %188 = shl i32 %99, 1
  %189 = or i32 %9, %1
  %190 = xor i32 %99, %1
  %191 = and i32 %15, %63
  %192 = xor i32 %107, %0
  %193 = and i32 %117, %11
  %194 = or i32 %93, %133
  %195 = xor i32 %82, %2
  %196 = or i32 %33, %30
  %197 = or i32 %29, %33
  %198 = and i32 %29, %63
  %199 = xor i32 %43, %2
  %200 = or i32 %8, %45
  %201 = and i32 %8, %82
  %202 = shl i32 %115, 2
  %203 = and i32 %29, %36
  %204 = xor i32 %48, %133
  %205 = or i32 %32, %1
  %206 = and i32 %29, %1
  %207 = or i32 %33, %2
  %208 = or i32 %48, %50
  %209 = and i32 %37, %30
  %210 = or i32 %14, %33
  %211 = or i32 %32, %11
  %212 = shl i32 %38, 1
  %213 = or i32 %33, %41
  %214 = xor i32 %40, %0
  %215 = xor i32 %51, %214
  %216 = or i32 %48, %214
  %217 = or i32 %29, %43
  %218 = or i32 %119, %1
  %219 = xor i32 %9, %71
  %220 = and i32 %84, %49
  %221 = add i32 %47, 1
  %222 = or i32 %30, %36
  %223 = xor i32 %32, %37
  %224 = and i32 %37, %2
  %225 = xor i32 %32, %84
  %226 = or i32 %75, %43
  %227 = or i32 %8, %38
  %228 = and i32 %29, %82
  %229 = or i32 %32, %41
  %230 = or i32 %71, %0
  %231 = and i32 %11, %2
  %232 = xor i32 %115, -1
  %233 = or i32 %114, %232
  %234 = and i32 %44, %2
  %235 = shl i32 %234, 1
  %236 = xor i32 %71, %0
  %237 = xor i32 %56, %0
  %238 = xor i32 %75, %0
  %239 = xor i32 %71, %33
  %240 = and i32 %84, %0
  %241 = and i32 %86, %11
  %242 = xor i32 %54, %33
  %243 = and i32 %86, %1
  %244 = or i32 %9, %107
  %245 = xor i32 %33, %2
  %246 = and i32 %117, %10
  %247 = xor i32 %176, -1
  %248 = xor i32 %114, %247
  %249 = and i32 %14, %49
  %250 = or i32 %48, %249
  %251 = or i32 %43, %30
  %252 = or i32 %58, %1
  %253 = xor i32 %58, %1
  %254 = shl i32 %253, 1
  %255 = and i32 %44, %30
  %256 = or i32 %71, %49
  %257 = and i32 %37, %15
  %258 = or i32 %14, %38
  %259 = and i32 %56, %0
  %260 = xor i32 %32, %1
  %261 = or i32 %9, %36
  %262 = or i32 %33, %107
  %263 = and i32 %10, %2
  %264 = add i32 %75, 1
  %265 = xor i32 %249, -1
  %266 = xor i32 %48, %265
  %267 = xor i32 %119, %1
  %268 = or i32 %32, %75
  %269 = and i32 %10, %30
  %270 = xor i32 %54, %1
  %271 = shl i32 %270, 1
  %272 = or i32 %29, %45
  %273 = shl i32 %45, 1
  %274 = xor i32 %43, %84
  %275 = or i32 %43, %8
  %276 = or i32 %33, %15
  %277 = or i32 %56, %49
  %278 = shl i32 %277, 1
  %279 = and i32 %71, %0
  %280 = shl i32 %41, 1
  %281 = or i32 %32, %45
  %282 = and i32 %41, %49
  %283 = and i32 %75, %49
  %284 = mul i32 %283, -12
  %285 = and i32 %41, %0
  %286 = and i32 %75, %0
  %287 = and i32 %107, %49
  %288 = shl i32 %287, 3
  %289 = mul i32 %72, 18
  %290 = and i32 %107, %0
  %291 = mul i32 %290, 15
  %292 = add i32 %245, %43
  %293 = add i32 %292, %195
  %294 = add i32 %293, %15
  %295 = add i32 %294, %285
  %296 = add i32 %295, %279
  %297 = add i32 %296, %269
  %298 = add i32 %297, %267
  %299 = add i32 %298, %240
  %300 = add i32 %299, %238
  %301 = add i32 %300, %213
  %302 = add i32 %301, %206
  %303 = add i32 %302, %205
  %304 = add i32 %303, %189
  %305 = add i32 %304, %187
  %306 = add i32 %305, %158
  %307 = add i32 %306, %132
  %308 = add i32 %307, %126
  %309 = add i32 %308, %111
  %310 = add i32 %309, %173
  %311 = add i32 %310, %215
  %312 = shl i32 %311, 1
  %313 = sub i32 %81, %144
  %314 = add i32 %313, %216
  %315 = sub i32 %314, %233
  %316 = add i32 %315, %28
  %317 = mul i32 %316, 3
  %318 = add i32 %47, %0
  %319 = sub i32 %67, %318
  %320 = add i32 %319, %26
  %321 = mul i32 %320, 5
  %322 = add i32 %75, %199
  %323 = add i32 %322, %109
  %324 = add i32 %323, %129
  %325 = shl i32 %324, 2
  %326 = add i32 %286, %282
  %327 = mul i32 %326, 27
  %328 = shl i32 %0, 1
  %329 = add i32 %328, 3
  %330 = add i32 %329, %63
  %331 = add i32 %330, %78
  %332 = add i32 %331, 1
  %333 = add i32 %332, %37
  %334 = add i32 %333, %2
  %335 = sub i32 %334, %3
  %336 = sub i32 %335, %32
  %337 = sub i32 %336, %34
  %338 = add i32 %337, %62
  %339 = add i32 %338, %64
  %340 = sub i32 %339, %47
  %341 = sub i32 %340, %65
  %342 = add i32 %341, %66
  %343 = add i32 %342, %70
  %344 = sub i32 %343, %71
  %345 = add i32 %344, %77
  %346 = sub i32 %345, %79
  %347 = add i32 %346, %54
  %348 = add i32 %347, %91
  %349 = add i32 %348, %86
  %350 = add i32 %349, %113
  %351 = sub i32 %350, %117
  %352 = sub i32 %351, %140
  %353 = add i32 %352, %145
  %354 = add i32 %353, %149
  %355 = add i32 %354, %152
  %356 = add i32 %355, %157
  %357 = add i32 %356, %160
  %358 = add i32 %357, %40
  %359 = add i32 %358, %170
  %360 = add i32 %359, %178
  %361 = sub i32 %360, %183
  %362 = add i32 %361, %184
  %363 = sub i32 %362, %29
  %364 = sub i32 %363, %9
  %365 = sub i32 %364, %200
  %366 = add i32 %365, %201
  %367 = add i32 %366, %207
  %368 = sub i32 %367, %212
  %369 = add i32 %368, %221
  %370 = add i32 %369, %119
  %371 = sub i32 %370, %224
  %372 = sub i32 %371, %227
  %373 = add i32 %372, %30
  %374 = add i32 %373, %231
  %375 = sub i32 %374, %14
  %376 = sub i32 %375, %263
  %377 = add i32 %376, %264
  %378 = sub i32 %377, %273
  %379 = add i32 %378, %275
  %380 = add i32 %379, %25
  %381 = add i32 %380, %31
  %382 = sub i32 %381, %35
  %383 = sub i32 %382, %39
  %384 = sub i32 %383, %42
  %385 = sub i32 %384, %46
  %386 = sub i32 %385, %55
  %387 = add i32 %386, %57
  %388 = add i32 %387, %61
  %389 = sub i32 %388, %76
  %390 = add i32 %389, %80
  %391 = add i32 %390, %83
  %392 = sub i32 %391, %85
  %393 = add i32 %392, %89
  %394 = sub i32 %393, %90
  %395 = sub i32 %394, %97
  %396 = sub i32 %395, %98
  %397 = add i32 %396, %100
  %398 = add i32 %397, %101
  %399 = sub i32 %398, %106
  %400 = sub i32 %399, %108
  %401 = sub i32 %400, %110
  %402 = sub i32 %401, %112
  %403 = sub i32 %402, %50
  %404 = sub i32 %403, %118
  %405 = add i32 %404, %120
  %406 = add i32 %405, %121
  %407 = sub i32 %406, %122
  %408 = add i32 %407, %125
  %409 = sub i32 %408, %127
  %410 = sub i32 %409, %128
  %411 = add i32 %410, %130
  %412 = sub i32 %411, %131
  %413 = sub i32 %412, %136
  %414 = add i32 %413, %141
  %415 = sub i32 %414, %142
  %416 = add i32 %415, %143
  %417 = sub i32 %416, %148
  %418 = add i32 %417, %153
  %419 = sub i32 %418, %159
  %420 = add i32 %419, %161
  %421 = add i32 %420, %162
  %422 = sub i32 %421, %163
  %423 = add i32 %422, %164
  %424 = sub i32 %423, %165
  %425 = add i32 %424, %166
  %426 = sub i32 %425, %167
  %427 = add i32 %426, %168
  %428 = add i32 %427, %169
  %429 = sub i32 %428, %171
  %430 = sub i32 %429, %174
  %431 = sub i32 %430, %175
  %432 = sub i32 %431, %185
  %433 = sub i32 %432, %186
  %434 = sub i32 %433, %188
  %435 = sub i32 %434, %190
  %436 = add i32 %435, %191
  %437 = sub i32 %436, %192
  %438 = add i32 %437, %193
  %439 = sub i32 %438, %196
  %440 = add i32 %439, %197
  %441 = sub i32 %440, %198
  %442 = add i32 %441, %203
  %443 = sub i32 %442, %209
  %444 = sub i32 %443, %210
  %445 = sub i32 %444, %211
  %446 = sub i32 %445, %217
  %447 = sub i32 %446, %218
  %448 = sub i32 %447, %219
  %449 = sub i32 %448, %220
  %450 = add i32 %449, %222
  %451 = add i32 %450, %223
  %452 = sub i32 %451, %225
  %453 = add i32 %452, %226
  %454 = sub i32 %453, %228
  %455 = sub i32 %454, %229
  %456 = add i32 %455, %230
  %457 = sub i32 %456, %235
  %458 = add i32 %457, %236
  %459 = add i32 %458, %237
  %460 = add i32 %459, %239
  %461 = sub i32 %460, %241
  %462 = add i32 %461, %242
  %463 = add i32 %462, %243
  %464 = sub i32 %463, %244
  %465 = sub i32 %464, %214
  %466 = sub i32 %465, %246
  %467 = sub i32 %466, %251
  %468 = sub i32 %467, %252
  %469 = add i32 %468, %255
  %470 = add i32 %469, %256
  %471 = add i32 %470, %154
  %472 = sub i32 %471, %257
  %473 = sub i32 %472, %258
  %474 = sub i32 %473, %259
  %475 = add i32 %474, %260
  %476 = sub i32 %475, %73
  %477 = add i32 %476, %261
  %478 = add i32 %477, %262
  %479 = add i32 %478, %249
  %480 = add i32 %479, %268
  %481 = add i32 %480, %272
  %482 = sub i32 %481, %274
  %483 = sub i32 %482, %276
  %484 = sub i32 %483, %280
  %485 = sub i32 %484, %281
  %486 = sub i32 %485, %23
  %487 = sub i32 %486, %22
  %488 = add i32 %487, %24
  %489 = add i32 %488, %6
  %490 = add i32 %489, %27
  %491 = sub i32 %490, %60
  %492 = sub i32 %491, %69
  %493 = sub i32 %492, %74
  %494 = sub i32 %493, %88
  %495 = sub i32 %494, %96
  %496 = sub i32 %495, %103
  %497 = sub i32 %496, %105
  %498 = sub i32 %497, %116
  %499 = sub i32 %498, %124
  %500 = add i32 %499, %135
  %501 = add i32 %500, %139
  %502 = sub i32 %501, %147
  %503 = sub i32 %502, %151
  %504 = sub i32 %503, %156
  %505 = add i32 %504, %177
  %506 = sub i32 %505, %182
  %507 = add i32 %506, %194
  %508 = sub i32 %507, %202
  %509 = sub i32 %508, %204
  %510 = add i32 %509, %208
  %511 = add i32 %510, %248
  %512 = sub i32 %511, %250
  %513 = sub i32 %512, %254
  %514 = sub i32 %513, %266
  %515 = sub i32 %514, %271
  %516 = sub i32 %515, %278
  %517 = add i32 %516, %284
  %518 = add i32 %517, %288
  %519 = add i32 %518, %289
  %520 = add i32 %519, %291
  %521 = sub i32 %520, %180
  %522 = add i32 %521, %327
  %523 = sub i32 %522, %53
  %524 = add i32 %523, %325
  %525 = add i32 %524, %321
  %526 = add i32 %525, %317
  %527 = add i32 %526, %312
  %528 = icmp eq i32 %19, %527
  %529 = select i1 %528, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %530 = tail call i32 @puts(i8* nonnull dereferenceable(1) %529)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
