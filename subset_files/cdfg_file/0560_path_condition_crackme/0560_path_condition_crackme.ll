; ModuleID = '../.././c_source_file/0560_path_condition_crackme.c'
source_filename = "../.././c_source_file/0560_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = xor i32 %2, %1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %9, %12
  %14 = sub i32 %6, %0
  %15 = add i32 %14, %13
  %16 = xor i32 %4, %3
  %17 = shl i32 %16, 1
  %18 = xor i32 %17, -2
  %19 = xor i32 %3, 1073741823
  %20 = or i32 %19, %4
  %21 = xor i32 %3, 2147483647
  %22 = and i32 %21, %4
  %23 = shl i32 %22, 1
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %0
  %26 = xor i32 %8, -1
  %27 = xor i32 %25, %26
  %28 = xor i32 %2, -1
  %29 = and i32 %28, %1
  %30 = or i32 %29, %7
  %31 = or i32 %26, %7
  %32 = xor i32 %1, %0
  %33 = or i32 %32, %28
  %34 = or i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %10, %35
  %37 = xor i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %1
  %40 = xor i32 %29, -1
  %41 = and i32 %40, %0
  %42 = or i32 %28, %1
  %43 = xor i32 %10, -1
  %44 = xor i32 %25, -1
  %45 = and i32 %44, %2
  %46 = and i32 %1, %0
  %47 = xor i32 %42, %0
  %48 = or i32 %28, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %46, %49
  %51 = and i32 %2, %0
  %52 = or i32 %2, %1
  %53 = xor i32 %52, -1
  %54 = or i32 %51, %53
  %55 = or i32 %43, %35
  %56 = and i32 %24, %2
  %57 = and i32 %56, %0
  %58 = xor i32 %10, %0
  %59 = or i32 %57, %58
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %61, %1
  %63 = and i32 %10, %34
  %64 = xor i32 %32, -1
  %65 = and i32 %64, %2
  %66 = and i32 %32, %2
  %67 = or i32 %51, %32
  %68 = xor i32 %40, %0
  %69 = or i32 %51, %64
  %70 = and i32 %26, %0
  %71 = or i32 %10, %0
  %72 = and i32 %34, %38
  %73 = xor i32 %51, -1
  %74 = and i32 %73, %24
  %75 = or i32 %52, %0
  %76 = xor i32 %42, -1
  %77 = or i32 %46, %76
  %78 = shl i32 %77, 1
  %79 = or i32 %76, %0
  %80 = and i32 %28, %0
  %81 = xor i32 %80, %1
  %82 = or i32 %24, %2
  %83 = and i32 %82, %7
  %84 = or i32 %57, %83
  %85 = shl i32 %84, 1
  %86 = or i32 %24, %0
  %87 = xor i32 %86, -1
  %88 = or i32 %87, %2
  %89 = or i32 %37, %64
  %90 = shl i32 %89, 1
  %91 = or i32 %61, %1
  %92 = or i32 %42, %7
  %93 = or i32 %37, %32
  %94 = add i32 %34, 1
  %95 = and i32 %56, %7
  %96 = and i32 %82, %0
  %97 = xor i32 %96, 2147483647
  %98 = xor i32 %97, %95
  %99 = shl i32 %98, 1
  %100 = or i32 %43, %7
  %101 = shl i32 %100, 1
  %102 = xor i32 %51, %40
  %103 = shl i32 %102, 1
  %104 = or i32 %10, %25
  %105 = shl i32 %104, 1
  %106 = xor i32 %48, %1
  %107 = or i32 %10, %7
  %108 = and i32 %60, %1
  %109 = add i32 %86, 1
  %110 = or i32 %32, %61
  %111 = or i32 %46, %2
  %112 = or i32 %25, %43
  %113 = shl i32 %112, 1
  %114 = xor i32 %46, %2
  %115 = xor i32 %51, %52
  %116 = and i32 %10, %7
  %117 = xor i32 %80, -1
  %118 = and i32 %32, %117
  %119 = and i32 %86, %38
  %120 = and i32 %40, %7
  %121 = xor i32 %25, %2
  %122 = and i32 %38, %44
  %123 = or i32 %80, %8
  %124 = shl i32 %123, 1
  %125 = or i32 %40, %7
  %126 = and i32 %8, %0
  %127 = and i32 %52, %7
  %128 = xor i32 %126, -1
  %129 = xor i32 %127, %128
  %130 = or i32 %80, %1
  %131 = or i32 %8, %25
  %132 = or i32 %38, %24
  %133 = add i32 %80, 1
  %134 = xor i32 %35, %2
  %135 = or i32 %46, %61
  %136 = shl i32 %135, 1
  %137 = or i32 %95, %96
  %138 = xor i32 %87, %2
  %139 = xor i32 %73, %1
  %140 = and i32 %117, %24
  %141 = or i32 %46, %43
  %142 = or i32 %28, %35
  %143 = or i32 %80, %76
  %144 = and i32 %34, %43
  %145 = xor i32 %80, %42
  %146 = or i32 %28, %64
  %147 = add i32 %2, 1
  %148 = or i32 %29, %0
  %149 = or i32 %43, %87
  %150 = xor i32 %86, %2
  %151 = or i32 %37, %46
  %152 = or i32 %25, %38
  %153 = xor i32 %49, %1
  %154 = xor i32 %82, %7
  %155 = xor i32 %154, %57
  %156 = or i32 %126, %127
  %157 = xor i32 %34, %2
  %158 = or i32 %35, %2
  %159 = shl i32 %158, 2
  %160 = and i32 %117, %1
  %161 = and i32 %42, %0
  %162 = and i32 %32, %38
  %163 = xor i32 %51, %86
  %164 = or i32 %51, %87
  %165 = xor i32 %29, %0
  %166 = xor i32 %43, %0
  %167 = xor i32 %46, -1
  %168 = add i32 %8, 1
  %169 = or i32 %49, %24
  %170 = xor i32 %52, %0
  %171 = or i32 %126, %170
  %172 = add i32 %48, 1
  %173 = xor i32 %107, -1
  %174 = or i32 %95, %173
  %175 = or i32 %52, %7
  %176 = xor i32 %53, %0
  %177 = xor i32 %42, %46
  %178 = or i32 %40, %0
  %179 = and i32 %37, %44
  %180 = and i32 %10, %44
  %181 = xor i32 %52, %46
  %182 = and i32 %60, %64
  %183 = or i32 %51, %24
  %184 = or i32 %51, %35
  %185 = shl i32 %184, 1
  %186 = and i32 %28, %44
  %187 = or i32 %64, %2
  %188 = add i32 %51, 1
  %189 = xor i32 %26, %0
  %190 = and i32 %60, %32
  %191 = shl i32 %190, 1
  %192 = and i32 %37, %32
  %193 = xor i32 %170, %128
  %194 = or i32 %80, %32
  %195 = xor i32 %60, %1
  %196 = or i32 %61, %24
  %197 = or i32 %29, %25
  %198 = xor i32 %8, %0
  %199 = xor i32 %126, %58
  %200 = and i32 %38, %1
  %201 = and i32 %53, %7
  %202 = mul i32 %201, -10
  %203 = and i32 %29, %7
  %204 = mul i32 %203, -7
  %205 = and i32 %53, %0
  %206 = mul i32 %205, -18
  %207 = and i32 %29, %0
  %208 = and i32 %76, %7
  %209 = mul i32 %208, -23
  %210 = mul i32 %9, -13
  %211 = and i32 %76, %0
  %212 = mul i32 %211, -12
  %213 = add i32 %38, %1
  %214 = add i32 %213, %111
  %215 = add i32 %214, %33
  %216 = add i32 %215, %179
  %217 = add i32 %216, %195
  %218 = add i32 %217, %175
  %219 = add i32 %218, %169
  %220 = add i32 %219, %143
  %221 = add i32 %220, %139
  %222 = add i32 %221, %107
  %223 = add i32 %222, %81
  %224 = add i32 %223, %30
  %225 = shl i32 %224, 1
  %226 = add i32 %146, %121
  %227 = add i32 %226, %43
  %228 = mul i32 %227, 5
  %229 = add i32 %126, %207
  %230 = mul i32 %229, -19
  %231 = add i32 %20, %178
  %232 = shl i32 %231, 2
  %233 = add i32 %60, %24
  %234 = mul i32 %233, 3
  %235 = sub i32 2, %46
  %236 = add i32 %235, %94
  %237 = add i32 %236, %109
  %238 = add i32 %237, %34
  %239 = add i32 %238, %147
  %240 = add i32 %239, %167
  %241 = add i32 %240, %44
  %242 = add i32 %241, %64
  %243 = sub i32 %242, %42
  %244 = add i32 %243, %45
  %245 = add i32 %244, %65
  %246 = add i32 %245, %52
  %247 = sub i32 %246, %66
  %248 = add i32 %247, %88
  %249 = add i32 %248, %51
  %250 = add i32 %249, %114
  %251 = add i32 %250, %76
  %252 = add i32 %251, %133
  %253 = add i32 %252, %80
  %254 = add i32 %253, %134
  %255 = sub i32 %254, %138
  %256 = add i32 %255, %48
  %257 = sub i32 %256, %142
  %258 = sub i32 %257, %150
  %259 = sub i32 %258, %157
  %260 = add i32 %259, %8
  %261 = add i32 %260, %168
  %262 = add i32 %261, %172
  %263 = sub i32 %262, %10
  %264 = add i32 %263, %186
  %265 = add i32 %264, %187
  %266 = add i32 %265, %188
  %267 = sub i32 %266, %4
  %268 = add i32 %267, %27
  %269 = sub i32 %268, %31
  %270 = add i32 %269, %36
  %271 = sub i32 %270, %39
  %272 = sub i32 %271, %41
  %273 = add i32 %272, %47
  %274 = sub i32 %273, %50
  %275 = add i32 %274, %11
  %276 = sub i32 %275, %54
  %277 = add i32 %276, %55
  %278 = sub i32 %277, %62
  %279 = sub i32 %278, %63
  %280 = sub i32 %279, %67
  %281 = sub i32 %280, %68
  %282 = add i32 %281, %69
  %283 = add i32 %282, %70
  %284 = add i32 %283, %71
  %285 = sub i32 %284, %72
  %286 = sub i32 %285, %74
  %287 = sub i32 %286, %75
  %288 = sub i32 %287, %79
  %289 = sub i32 %288, %91
  %290 = add i32 %289, %92
  %291 = sub i32 %290, %93
  %292 = sub i32 %291, %106
  %293 = sub i32 %292, %108
  %294 = sub i32 %293, %110
  %295 = sub i32 %294, %115
  %296 = sub i32 %295, %116
  %297 = sub i32 %296, %118
  %298 = add i32 %297, %119
  %299 = sub i32 %298, %120
  %300 = add i32 %299, %122
  %301 = add i32 %300, %125
  %302 = add i32 %301, %130
  %303 = add i32 %302, %131
  %304 = add i32 %303, %132
  %305 = sub i32 %304, %140
  %306 = add i32 %305, %141
  %307 = sub i32 %306, %144
  %308 = add i32 %307, %145
  %309 = sub i32 %308, %148
  %310 = sub i32 %309, %149
  %311 = add i32 %310, %151
  %312 = sub i32 %311, %152
  %313 = add i32 %312, %153
  %314 = sub i32 %313, %159
  %315 = add i32 %314, %160
  %316 = sub i32 %315, %161
  %317 = add i32 %316, %162
  %318 = add i32 %317, %163
  %319 = sub i32 %318, %164
  %320 = sub i32 %319, %165
  %321 = add i32 %320, %166
  %322 = sub i32 %321, %176
  %323 = add i32 %322, %177
  %324 = add i32 %323, %180
  %325 = add i32 %324, %181
  %326 = add i32 %325, %182
  %327 = sub i32 %326, %183
  %328 = sub i32 %327, %189
  %329 = sub i32 %328, %192
  %330 = add i32 %329, %194
  %331 = add i32 %330, %196
  %332 = sub i32 %331, %197
  %333 = add i32 %332, %198
  %334 = add i32 %333, %200
  %335 = add i32 %334, %16
  %336 = sub i32 %335, %59
  %337 = sub i32 %336, %78
  %338 = sub i32 %337, %90
  %339 = sub i32 %338, %101
  %340 = sub i32 %339, %103
  %341 = sub i32 %340, %105
  %342 = sub i32 %341, %113
  %343 = sub i32 %342, %124
  %344 = add i32 %343, %129
  %345 = sub i32 %344, %136
  %346 = add i32 %345, %137
  %347 = sub i32 %346, %155
  %348 = sub i32 %347, %156
  %349 = add i32 %348, %171
  %350 = add i32 %349, %174
  %351 = sub i32 %350, %185
  %352 = sub i32 %351, %191
  %353 = add i32 %352, %193
  %354 = add i32 %353, %199
  %355 = add i32 %354, %202
  %356 = add i32 %355, %204
  %357 = add i32 %356, %206
  %358 = add i32 %357, %209
  %359 = add i32 %358, %210
  %360 = add i32 %359, %212
  %361 = add i32 %360, %234
  %362 = sub i32 %361, %23
  %363 = sub i32 %362, %85
  %364 = add i32 %363, %228
  %365 = add i32 %364, %230
  %366 = sub i32 %365, %18
  %367 = sub i32 %366, %99
  %368 = add i32 %367, %232
  %369 = add i32 %368, %225
  %370 = icmp eq i32 %15, %369
  %371 = select i1 %370, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %372 = tail call i32 @puts(i8* nonnull dereferenceable(1) %371)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
