digraph "DFG for'main' function" {
	Node0x61c2e8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x61c368[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x61c3f8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x61c858[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x61c938[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x61ca58[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x61cc90[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x61cd48[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x61dcb8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x61e340[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x61e3b0[shape=record, label="  %9 = xor i32 %7, %6"];
	Node0x61e420[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x61e490[shape=record, label="  %11 = xor i32 %6, -1"];
	Node0x61e500[shape=record, label="  %12 = mul i32 %11, -5"];
	Node0x61e570[shape=record, label="  %13 = and i32 %6, %8"];
	Node0x61e5e0[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x61e650[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0x61e6c0[shape=record, label="  %16 = xor i32 %9, -1"];
	Node0x61e730[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0x61e7a0[shape=record, label="  %18 = and i32 %7, %6"];
	Node0x61e810[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x61e880[shape=record, label="  %20 = or i32 %7, %6"];
	Node0x61e8f0[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x61e960[shape=record, label="  %22 = mul i32 %21, 9"];
	Node0x61e9d0[shape=record, label="  %23 = and i32 %7, %11"];
	Node0x61ea40[shape=record, label="  %24 = sub i32 %18, %13"];
	Node0x61eab0[shape=record, label="  %25 = add i32 %24, %23"];
	Node0x61eb20[shape=record, label="  %26 = mul i32 %25, 6"];
	Node0x61eb90[shape=record, label="  %27 = add i32 %6, -1"];
	Node0x61ec00[shape=record, label="  %28 = add i32 %27, %8"];
	Node0x61ec70[shape=record, label="  %29 = add i32 %28, %12"];
	Node0x61ece0[shape=record, label="  %30 = add i32 %29, %19"];
	Node0x61ed50[shape=record, label="  %31 = add i32 %30, %10"];
	Node0x61edc0[shape=record, label="  %32 = add i32 %31, %17"];
	Node0x61ee30[shape=record, label="  %33 = add i32 %32, %22"];
	Node0x61eea0[shape=record, label="  %34 = sub i32 %33, %15"];
	Node0x61ef10[shape=record, label="  %35 = add i32 %34, %26"];
	Node0x61ef80[shape=record, label="  %36 = icmp eq i32 %35, %7"];
	Node0x5bc9d8[shape=record, label="  %37 = select i1 %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x61f010[shape=record, label="  %38 = call i32 @puts(i8* nonnull dereferenceable(1) %37) #5"];
	Node0x61f268[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x61f3c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x61f488[shape=record, label="  ret i32 0"];
	Node0x61c2e8 -> Node0x61c368;
	Node0x61c368 -> Node0x61c3f8;
	Node0x61c3f8 -> Node0x61c858;
	Node0x61c858 -> Node0x61c938;
	Node0x61c938 -> Node0x61ca58;
	Node0x61ca58 -> Node0x61cc90;
	Node0x61cc90 -> Node0x61cd48;
	Node0x61cd48 -> Node0x61dcb8;
	Node0x61dcb8 -> Node0x61e340;
	Node0x61e340 -> Node0x61e3b0;
	Node0x61e3b0 -> Node0x61e420;
	Node0x61e420 -> Node0x61e490;
	Node0x61e490 -> Node0x61e500;
	Node0x61e500 -> Node0x61e570;
	Node0x61e570 -> Node0x61e5e0;
	Node0x61e5e0 -> Node0x61e650;
	Node0x61e650 -> Node0x61e6c0;
	Node0x61e6c0 -> Node0x61e730;
	Node0x61e730 -> Node0x61e7a0;
	Node0x61e7a0 -> Node0x61e810;
	Node0x61e810 -> Node0x61e880;
	Node0x61e880 -> Node0x61e8f0;
	Node0x61e8f0 -> Node0x61e960;
	Node0x61e960 -> Node0x61e9d0;
	Node0x61e9d0 -> Node0x61ea40;
	Node0x61ea40 -> Node0x61eab0;
	Node0x61eab0 -> Node0x61eb20;
	Node0x61eb20 -> Node0x61eb90;
	Node0x61eb90 -> Node0x61ec00;
	Node0x61ec00 -> Node0x61ec70;
	Node0x61ec70 -> Node0x61ece0;
	Node0x61ece0 -> Node0x61ed50;
	Node0x61ed50 -> Node0x61edc0;
	Node0x61edc0 -> Node0x61ee30;
	Node0x61ee30 -> Node0x61eea0;
	Node0x61eea0 -> Node0x61ef10;
	Node0x61ef10 -> Node0x61ef80;
	Node0x61ef80 -> Node0x5bc9d8;
	Node0x5bc9d8 -> Node0x61f010;
	Node0x61f010 -> Node0x61f268;
	Node0x61f268 -> Node0x61f3c8;
	Node0x61f3c8 -> Node0x61f488;
edge [color=red]
	Node0x61c2e8 -> Node0x61c3f8;
	Node0x61c3f8 -> Node0x61c858;
	Node0x61c368 -> Node0x61c938;
	Node0x61c938 -> Node0x61ca58;
	Node0x61c2e8 -> Node0x61cc90;
	Node0x61c368 -> Node0x61cc90;
	Node0x61c2e8 -> Node0x61cd48;
	Node0x61c368 -> Node0x61dcb8;
	Node0x61dcb8 -> Node0x61e340;
	Node0x61dcb8 -> Node0x61e3b0;
	Node0x61cd48 -> Node0x61e3b0;
	Node0x61e3b0 -> Node0x61e420;
	Node0x61cd48 -> Node0x61e490;
	Node0x61e490 -> Node0x61e500;
	Node0x61cd48 -> Node0x61e570;
	Node0x61e340 -> Node0x61e570;
	Node0x61e570 -> Node0x61e5e0;
	Node0x61e5e0 -> Node0x61e650;
	Node0x61e3b0 -> Node0x61e6c0;
	Node0x61e6c0 -> Node0x61e730;
	Node0x61dcb8 -> Node0x61e7a0;
	Node0x61cd48 -> Node0x61e7a0;
	Node0x61e7a0 -> Node0x61e810;
	Node0x61dcb8 -> Node0x61e880;
	Node0x61cd48 -> Node0x61e880;
	Node0x61e880 -> Node0x61e8f0;
	Node0x61e8f0 -> Node0x61e960;
	Node0x61dcb8 -> Node0x61e9d0;
	Node0x61e490 -> Node0x61e9d0;
	Node0x61e7a0 -> Node0x61ea40;
	Node0x61e570 -> Node0x61ea40;
	Node0x61ea40 -> Node0x61eab0;
	Node0x61e9d0 -> Node0x61eab0;
	Node0x61eab0 -> Node0x61eb20;
	Node0x61cd48 -> Node0x61eb90;
	Node0x61eb90 -> Node0x61ec00;
	Node0x61e340 -> Node0x61ec00;
	Node0x61ec00 -> Node0x61ec70;
	Node0x61e500 -> Node0x61ec70;
	Node0x61ec70 -> Node0x61ece0;
	Node0x61e810 -> Node0x61ece0;
	Node0x61ece0 -> Node0x61ed50;
	Node0x61e420 -> Node0x61ed50;
	Node0x61ed50 -> Node0x61edc0;
	Node0x61e730 -> Node0x61edc0;
	Node0x61edc0 -> Node0x61ee30;
	Node0x61e960 -> Node0x61ee30;
	Node0x61ee30 -> Node0x61eea0;
	Node0x61e650 -> Node0x61eea0;
	Node0x61eea0 -> Node0x61ef10;
	Node0x61eb20 -> Node0x61ef10;
	Node0x61ef10 -> Node0x61ef80;
	Node0x61dcb8 -> Node0x61ef80;
	Node0x61ef80 -> Node0x5bc9d8;
	Node0x5bc9d8 -> Node0x61f010;
	Node0x61c938 -> Node0x61f268;
	Node0x61c3f8 -> Node0x61f3c8;
}
