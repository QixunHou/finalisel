digraph "DFG for'crackme' function" {
	Node0x93e3f0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x93eaa0[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x93eb60[shape=record, label="  %5 = shl i32 %0, 1"];
	Node0x93ebd0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x93ec40[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x93ecb0[shape=record, label="  %8 = or i32 %5, 1"];
	Node0x93ed20[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x93ed90[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x93ee00[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x93eea0[shape=record, label="  %12 = mul i32 %0, -5"];
	Node0x93ef10[shape=record, label="  %13 = sub i32 %0, %1"];
	Node0x93ef80[shape=record, label="  %14 = add i32 %13, %7"];
	Node0x93eff0[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x93f060[shape=record, label="  %16 = add i32 %15, %9"];
	Node0x93f0d0[shape=record, label="  %17 = add i32 %16, %11"];
	Node0x93f140[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x93f1b0[shape=record, label="  %19 = icmp eq i32 %4, %18"];
	Node0x8df268[shape=record, label="  %20 = select i1 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x93f650[shape=record, label="  %21 = tail call i32 @puts(i8* nonnull dereferenceable(1) %20)"];
	Node0x93f6a0[shape=record, label="  ret void"];
	Node0x93e3f0 -> Node0x93eaa0;
	Node0x93eaa0 -> Node0x93eb60;
	Node0x93eb60 -> Node0x93ebd0;
	Node0x93ebd0 -> Node0x93ec40;
	Node0x93ec40 -> Node0x93ecb0;
	Node0x93ecb0 -> Node0x93ed20;
	Node0x93ed20 -> Node0x93ed90;
	Node0x93ed90 -> Node0x93ee00;
	Node0x93ee00 -> Node0x93eea0;
	Node0x93eea0 -> Node0x93ef10;
	Node0x93ef10 -> Node0x93ef80;
	Node0x93ef80 -> Node0x93eff0;
	Node0x93eff0 -> Node0x93f060;
	Node0x93f060 -> Node0x93f0d0;
	Node0x93f0d0 -> Node0x93f140;
	Node0x93f140 -> Node0x93f1b0;
	Node0x93f1b0 -> Node0x8df268;
	Node0x8df268 -> Node0x93f650;
	Node0x93f650 -> Node0x93f6a0;
edge [color=red]
	Node0x93e3f0 -> Node0x93eaa0;
	Node0x93ebd0 -> Node0x93ec40;
	Node0x93eb60 -> Node0x93ecb0;
	Node0x93ed90 -> Node0x93ee00;
	Node0x93ef10 -> Node0x93ef80;
	Node0x93ec40 -> Node0x93ef80;
	Node0x93ef80 -> Node0x93eff0;
	Node0x93ecb0 -> Node0x93eff0;
	Node0x93eff0 -> Node0x93f060;
	Node0x93ed20 -> Node0x93f060;
	Node0x93f060 -> Node0x93f0d0;
	Node0x93ee00 -> Node0x93f0d0;
	Node0x93f0d0 -> Node0x93f140;
	Node0x93eea0 -> Node0x93f140;
	Node0x93eaa0 -> Node0x93f1b0;
	Node0x93f140 -> Node0x93f1b0;
	Node0x93f1b0 -> Node0x8df268;
	Node0x8df268 -> Node0x93f650;
}
