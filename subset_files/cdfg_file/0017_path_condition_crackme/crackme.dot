digraph "DFG for'crackme' function" {
	Node0x1a46be0[shape=record, label="  %3 = mul i32 %1, -2"];
	Node0x1a46c80[shape=record, label="  %4 = shl i32 %0, 1"];
	Node0x1a46d40[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0x1a46db0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1a46e20[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1a46e90[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x1a46f00[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1a46f70[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1a47010[shape=record, label="  %11 = mul i32 %10, 5"];
	Node0x1a47080[shape=record, label="  %12 = or i32 %7, %0"];
	Node0x1a470f0[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0x1a47160[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x1a471d0[shape=record, label="  %15 = xor i32 %12, -1"];
	Node0x1a47240[shape=record, label="  %16 = add i32 %15, %0"];
	Node0x1a472e0[shape=record, label="  %17 = mul i32 %16, -9"];
	Node0x1a47350[shape=record, label="  %18 = add i32 %6, %12"];
	Node0x1a473c0[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x1a47460[shape=record, label="  %20 = add i32 %0, 2"];
	Node0x1a474d0[shape=record, label="  %21 = add i32 %20, %5"];
	Node0x1a47540[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x1a475b0[shape=record, label="  %23 = add i32 %22, %9"];
	Node0x1a47620[shape=record, label="  %24 = add i32 %23, %11"];
	Node0x1a47690[shape=record, label="  %25 = sub i32 %24, %14"];
	Node0x1a47700[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x1a47770[shape=record, label="  %27 = add i32 %26, %17"];
	Node0x1a477e0[shape=record, label="  %28 = icmp eq i32 %3, %27"];
	Node0x19e7268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a47c80[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x1a47cd0[shape=record, label="  ret void"];
	Node0x1a46be0 -> Node0x1a46c80;
	Node0x1a46c80 -> Node0x1a46d40;
	Node0x1a46d40 -> Node0x1a46db0;
	Node0x1a46db0 -> Node0x1a46e20;
	Node0x1a46e20 -> Node0x1a46e90;
	Node0x1a46e90 -> Node0x1a46f00;
	Node0x1a46f00 -> Node0x1a46f70;
	Node0x1a46f70 -> Node0x1a47010;
	Node0x1a47010 -> Node0x1a47080;
	Node0x1a47080 -> Node0x1a470f0;
	Node0x1a470f0 -> Node0x1a47160;
	Node0x1a47160 -> Node0x1a471d0;
	Node0x1a471d0 -> Node0x1a47240;
	Node0x1a47240 -> Node0x1a472e0;
	Node0x1a472e0 -> Node0x1a47350;
	Node0x1a47350 -> Node0x1a473c0;
	Node0x1a473c0 -> Node0x1a47460;
	Node0x1a47460 -> Node0x1a474d0;
	Node0x1a474d0 -> Node0x1a47540;
	Node0x1a47540 -> Node0x1a475b0;
	Node0x1a475b0 -> Node0x1a47620;
	Node0x1a47620 -> Node0x1a47690;
	Node0x1a47690 -> Node0x1a47700;
	Node0x1a47700 -> Node0x1a47770;
	Node0x1a47770 -> Node0x1a477e0;
	Node0x1a477e0 -> Node0x19e7268;
	Node0x19e7268 -> Node0x1a47c80;
	Node0x1a47c80 -> Node0x1a47cd0;
edge [color=red]
	Node0x1a46c80 -> Node0x1a46d40;
	Node0x1a46e20 -> Node0x1a46e90;
	Node0x1a46f70 -> Node0x1a47010;
	Node0x1a46e20 -> Node0x1a47080;
	Node0x1a46f70 -> Node0x1a470f0;
	Node0x1a470f0 -> Node0x1a47160;
	Node0x1a47080 -> Node0x1a471d0;
	Node0x1a471d0 -> Node0x1a47240;
	Node0x1a47240 -> Node0x1a472e0;
	Node0x1a46db0 -> Node0x1a47350;
	Node0x1a47080 -> Node0x1a47350;
	Node0x1a47350 -> Node0x1a473c0;
	Node0x1a47460 -> Node0x1a474d0;
	Node0x1a46d40 -> Node0x1a474d0;
	Node0x1a474d0 -> Node0x1a47540;
	Node0x1a46e90 -> Node0x1a47540;
	Node0x1a47540 -> Node0x1a475b0;
	Node0x1a46f00 -> Node0x1a475b0;
	Node0x1a475b0 -> Node0x1a47620;
	Node0x1a47010 -> Node0x1a47620;
	Node0x1a47620 -> Node0x1a47690;
	Node0x1a47160 -> Node0x1a47690;
	Node0x1a47690 -> Node0x1a47700;
	Node0x1a473c0 -> Node0x1a47700;
	Node0x1a47700 -> Node0x1a47770;
	Node0x1a472e0 -> Node0x1a47770;
	Node0x1a46be0 -> Node0x1a477e0;
	Node0x1a47770 -> Node0x1a477e0;
	Node0x1a477e0 -> Node0x19e7268;
	Node0x19e7268 -> Node0x1a47c80;
}
