digraph "DFG for'main' function" {
	Node0x1a47e98[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1a47f18[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1a47fa8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1a48408[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1a484e8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1a48608[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1a48840[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1a488f8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1a49868[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1a49ef0[shape=record, label="  %8 = mul i32 %7, -2"];
	Node0x1a49f60[shape=record, label="  %9 = shl i32 %6, 1"];
	Node0x1a49fd0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1a4a040[shape=record, label="  %11 = xor i32 %7, %6"];
	Node0x1a4a0b0[shape=record, label="  %12 = xor i32 %7, -1"];
	Node0x1a4a120[shape=record, label="  %13 = and i32 %6, %12"];
	Node0x1a4a190[shape=record, label="  %14 = and i32 %7, %6"];
	Node0x1a4a200[shape=record, label="  %15 = or i32 %7, %6"];
	Node0x1a4a270[shape=record, label="  %16 = mul i32 %15, 5"];
	Node0x1a4a2e0[shape=record, label="  %17 = or i32 %6, %12"];
	Node0x1a4a350[shape=record, label="  %18 = shl i32 %15, 1"];
	Node0x1a4a3c0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1a4a430[shape=record, label="  %20 = xor i32 %17, -1"];
	Node0x1a4a4a0[shape=record, label="  %21 = add i32 %6, %20"];
	Node0x1a4a510[shape=record, label="  %22 = mul i32 %21, -9"];
	Node0x1a4a580[shape=record, label="  %23 = add i32 %11, %17"];
	Node0x1a4a5f0[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x1a4a660[shape=record, label="  %25 = add i32 %6, 2"];
	Node0x1a4a6d0[shape=record, label="  %26 = add i32 %25, %10"];
	Node0x1a4a740[shape=record, label="  %27 = add i32 %26, %13"];
	Node0x1a4a7b0[shape=record, label="  %28 = add i32 %27, %14"];
	Node0x1a4a820[shape=record, label="  %29 = add i32 %28, %16"];
	Node0x1a4a890[shape=record, label="  %30 = sub i32 %29, %19"];
	Node0x1a4a900[shape=record, label="  %31 = add i32 %30, %24"];
	Node0x1a4a970[shape=record, label="  %32 = add i32 %31, %22"];
	Node0x1a4abf0[shape=record, label="  %33 = icmp eq i32 %8, %32"];
	Node0x19e89d8[shape=record, label="  %34 = select i1 %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a4ac80[shape=record, label="  %35 = call i32 @puts(i8* nonnull dereferenceable(1) %34) #5"];
	Node0x1a4aed8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1a4b038[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1a4b0f8[shape=record, label="  ret i32 0"];
	Node0x1a47e98 -> Node0x1a47f18;
	Node0x1a47f18 -> Node0x1a47fa8;
	Node0x1a47fa8 -> Node0x1a48408;
	Node0x1a48408 -> Node0x1a484e8;
	Node0x1a484e8 -> Node0x1a48608;
	Node0x1a48608 -> Node0x1a48840;
	Node0x1a48840 -> Node0x1a488f8;
	Node0x1a488f8 -> Node0x1a49868;
	Node0x1a49868 -> Node0x1a49ef0;
	Node0x1a49ef0 -> Node0x1a49f60;
	Node0x1a49f60 -> Node0x1a49fd0;
	Node0x1a49fd0 -> Node0x1a4a040;
	Node0x1a4a040 -> Node0x1a4a0b0;
	Node0x1a4a0b0 -> Node0x1a4a120;
	Node0x1a4a120 -> Node0x1a4a190;
	Node0x1a4a190 -> Node0x1a4a200;
	Node0x1a4a200 -> Node0x1a4a270;
	Node0x1a4a270 -> Node0x1a4a2e0;
	Node0x1a4a2e0 -> Node0x1a4a350;
	Node0x1a4a350 -> Node0x1a4a3c0;
	Node0x1a4a3c0 -> Node0x1a4a430;
	Node0x1a4a430 -> Node0x1a4a4a0;
	Node0x1a4a4a0 -> Node0x1a4a510;
	Node0x1a4a510 -> Node0x1a4a580;
	Node0x1a4a580 -> Node0x1a4a5f0;
	Node0x1a4a5f0 -> Node0x1a4a660;
	Node0x1a4a660 -> Node0x1a4a6d0;
	Node0x1a4a6d0 -> Node0x1a4a740;
	Node0x1a4a740 -> Node0x1a4a7b0;
	Node0x1a4a7b0 -> Node0x1a4a820;
	Node0x1a4a820 -> Node0x1a4a890;
	Node0x1a4a890 -> Node0x1a4a900;
	Node0x1a4a900 -> Node0x1a4a970;
	Node0x1a4a970 -> Node0x1a4abf0;
	Node0x1a4abf0 -> Node0x19e89d8;
	Node0x19e89d8 -> Node0x1a4ac80;
	Node0x1a4ac80 -> Node0x1a4aed8;
	Node0x1a4aed8 -> Node0x1a4b038;
	Node0x1a4b038 -> Node0x1a4b0f8;
edge [color=red]
	Node0x1a47e98 -> Node0x1a47fa8;
	Node0x1a47fa8 -> Node0x1a48408;
	Node0x1a47f18 -> Node0x1a484e8;
	Node0x1a484e8 -> Node0x1a48608;
	Node0x1a47e98 -> Node0x1a48840;
	Node0x1a47f18 -> Node0x1a48840;
	Node0x1a47e98 -> Node0x1a488f8;
	Node0x1a47f18 -> Node0x1a49868;
	Node0x1a49868 -> Node0x1a49ef0;
	Node0x1a488f8 -> Node0x1a49f60;
	Node0x1a49f60 -> Node0x1a49fd0;
	Node0x1a49868 -> Node0x1a4a040;
	Node0x1a488f8 -> Node0x1a4a040;
	Node0x1a49868 -> Node0x1a4a0b0;
	Node0x1a488f8 -> Node0x1a4a120;
	Node0x1a4a0b0 -> Node0x1a4a120;
	Node0x1a49868 -> Node0x1a4a190;
	Node0x1a488f8 -> Node0x1a4a190;
	Node0x1a49868 -> Node0x1a4a200;
	Node0x1a488f8 -> Node0x1a4a200;
	Node0x1a4a200 -> Node0x1a4a270;
	Node0x1a488f8 -> Node0x1a4a2e0;
	Node0x1a4a0b0 -> Node0x1a4a2e0;
	Node0x1a4a200 -> Node0x1a4a350;
	Node0x1a4a350 -> Node0x1a4a3c0;
	Node0x1a4a2e0 -> Node0x1a4a430;
	Node0x1a488f8 -> Node0x1a4a4a0;
	Node0x1a4a430 -> Node0x1a4a4a0;
	Node0x1a4a4a0 -> Node0x1a4a510;
	Node0x1a4a040 -> Node0x1a4a580;
	Node0x1a4a2e0 -> Node0x1a4a580;
	Node0x1a4a580 -> Node0x1a4a5f0;
	Node0x1a488f8 -> Node0x1a4a660;
	Node0x1a4a660 -> Node0x1a4a6d0;
	Node0x1a49fd0 -> Node0x1a4a6d0;
	Node0x1a4a6d0 -> Node0x1a4a740;
	Node0x1a4a120 -> Node0x1a4a740;
	Node0x1a4a740 -> Node0x1a4a7b0;
	Node0x1a4a190 -> Node0x1a4a7b0;
	Node0x1a4a7b0 -> Node0x1a4a820;
	Node0x1a4a270 -> Node0x1a4a820;
	Node0x1a4a820 -> Node0x1a4a890;
	Node0x1a4a3c0 -> Node0x1a4a890;
	Node0x1a4a890 -> Node0x1a4a900;
	Node0x1a4a5f0 -> Node0x1a4a900;
	Node0x1a4a900 -> Node0x1a4a970;
	Node0x1a4a510 -> Node0x1a4a970;
	Node0x1a49ef0 -> Node0x1a4abf0;
	Node0x1a4a970 -> Node0x1a4abf0;
	Node0x1a4abf0 -> Node0x19e89d8;
	Node0x19e89d8 -> Node0x1a4ac80;
	Node0x1a484e8 -> Node0x1a4aed8;
	Node0x1a47fa8 -> Node0x1a4b038;
}
