digraph "DFG for'main' function" {
	Node0x20cfd58[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x20cfdd8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x20cfe68[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x20cfec8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x20d0348[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x20d33d8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x20d34b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x20d3578[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x20d3628[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x20d3888[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x20d3948[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x20d48b8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x20d4f28[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x20d5020[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x20d5228[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x20d5388[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x20d5498[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x20d5558[shape=record, label="  ret i32 0"];
	Node0x20cfd58 -> Node0x20cfdd8;
	Node0x20cfdd8 -> Node0x20cfe68;
	Node0x20cfe68 -> Node0x20cfec8;
	Node0x20cfec8 -> Node0x20d0348;
	Node0x20d0348 -> Node0x20d33d8;
	Node0x20d33d8 -> Node0x20d34b8;
	Node0x20d34b8 -> Node0x20d3578;
	Node0x20d3578 -> Node0x20d3628;
	Node0x20d3628 -> Node0x20d3888;
	Node0x20d3888 -> Node0x20d3948;
	Node0x20d3948 -> Node0x20d48b8;
	Node0x20d48b8 -> Node0x20d4f28;
	Node0x20d4f28 -> Node0x20d5020;
	Node0x20d5020 -> Node0x20d5228;
	Node0x20d5228 -> Node0x20d5388;
	Node0x20d5388 -> Node0x20d5498;
	Node0x20d5498 -> Node0x20d5558;
edge [color=red]
	Node0x20cfd58 -> Node0x20cfec8;
	Node0x20cfec8 -> Node0x20d0348;
	Node0x20cfdd8 -> Node0x20d33d8;
	Node0x20d33d8 -> Node0x20d34b8;
	Node0x20cfe68 -> Node0x20d3578;
	Node0x20d3578 -> Node0x20d3628;
	Node0x20cfd58 -> Node0x20d3888;
	Node0x20cfdd8 -> Node0x20d3888;
	Node0x20cfe68 -> Node0x20d3888;
	Node0x20cfd58 -> Node0x20d3948;
	Node0x20cfdd8 -> Node0x20d48b8;
	Node0x20cfe68 -> Node0x20d4f28;
	Node0x20d3948 -> Node0x20d5020;
	Node0x20d48b8 -> Node0x20d5020;
	Node0x20d4f28 -> Node0x20d5020;
	Node0x20d3578 -> Node0x20d5228;
	Node0x20d33d8 -> Node0x20d5388;
	Node0x20cfec8 -> Node0x20d5498;
}
