; ModuleID = '../.././c_source_file/1297_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1297_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %1, -1
  %7 = or i32 %6, %0
  %8 = xor i32 %7, %2
  %9 = add i32 %8, %4
  %10 = xor i32 %2, %0
  %11 = and i32 %10, %6
  %12 = add i32 %9, %11
  %13 = xor i32 %4, -1
  %14 = or i32 %13, %3
  %15 = add i32 %4, 1
  %16 = and i32 %13, %3
  %17 = xor i32 %16, -1
  %18 = or i32 %4, %3
  %19 = add i32 %18, 1
  %20 = and i32 %4, %3
  %21 = xor i32 %1, %0
  %22 = and i32 %10, %21
  %23 = xor i32 %0, -1
  %24 = xor i32 %2, -1
  %25 = or i32 %24, %1
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %23
  %28 = and i32 %2, %1
  %29 = shl i32 %28, 1
  %30 = or i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = or i32 %31, %23
  %33 = xor i32 %10, -1
  %34 = or i32 %2, %0
  %35 = xor i32 %34, %1
  %36 = and i32 %6, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %2
  %39 = xor i32 %21, -1
  %40 = and i32 %24, %39
  %41 = and i32 %1, %0
  %42 = xor i32 %41, -1
  %43 = xor i32 %42, %2
  %44 = and i32 %39, %2
  %45 = and i32 %10, %39
  %46 = and i32 %6, %2
  %47 = and i32 %46, %0
  %48 = xor i32 %2, %1
  %49 = or i32 %48, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %47, %50
  %52 = or i32 %6, %2
  %53 = and i32 %52, %23
  %54 = or i32 %47, %53
  %55 = xor i32 %48, -1
  %56 = or i32 %55, %0
  %57 = or i32 %10, %36
  %58 = xor i32 %7, -1
  %59 = xor i32 %58, %2
  %60 = xor i32 %28, -1
  %61 = or i32 %60, %23
  %62 = and i32 %24, %1
  %63 = xor i32 %62, -1
  %64 = and i32 %63, %23
  %65 = add i32 %62, 1
  %66 = and i32 %55, %0
  %67 = and i32 %24, %37
  %68 = shl i32 %67, 1
  %69 = or i32 %24, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %21, %70
  %72 = shl i32 %71, 1
  %73 = and i32 %55, %42
  %74 = shl i32 %42, 1
  %75 = xor i32 %25, %0
  %76 = or i32 %36, %24
  %77 = and i32 %34, %39
  %78 = xor i32 %34, -1
  %79 = or i32 %78, %6
  %80 = xor i32 %52, %0
  %81 = or i32 %47, %80
  %82 = and i32 %24, %0
  %83 = and i32 %24, %42
  %84 = xor i32 %48, %0
  %85 = or i32 %21, %2
  %86 = or i32 %78, %39
  %87 = and i32 %2, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %88, %1
  %90 = and i32 %21, %24
  %91 = xor i32 %28, %0
  %92 = and i32 %46, %23
  %93 = or i32 %48, %23
  %94 = xor i32 %93, -1
  %95 = or i32 %92, %94
  %96 = or i32 %58, %2
  %97 = xor i32 %25, %41
  %98 = xor i32 %84, -1
  %99 = xor i32 %47, %98
  %100 = or i32 %1, %0
  %101 = xor i32 %87, %100
  %102 = shl i32 %101, 1
  %103 = or i32 %70, %6
  %104 = and i32 %7, %24
  %105 = or i32 %41, %26
  %106 = shl i32 %62, 1
  %107 = and i32 %88, %1
  %108 = xor i32 %60, %0
  %109 = or i32 %47, %84
  %110 = or i32 %28, %0
  %111 = xor i32 %36, %2
  %112 = and i32 %60, %23
  %113 = and i32 %28, %0
  %114 = and i32 %48, %23
  %115 = xor i32 %114, 1073741823
  %116 = xor i32 %115, %113
  %117 = xor i32 %82, %25
  %118 = or i32 %87, %6
  %119 = or i32 %48, %36
  %120 = or i32 %48, %58
  %121 = shl i32 %120, 1
  %122 = or i32 %82, %28
  %123 = xor i32 %80, -1
  %124 = xor i32 %47, %123
  %125 = and i32 %10, %100
  %126 = or i32 %24, %39
  %127 = or i32 %41, %2
  %128 = and i32 %25, %23
  %129 = or i32 %55, %23
  %130 = or i32 %21, %33
  %131 = or i32 %87, %58
  %132 = xor i32 %82, -1
  %133 = shl i32 %132, 1
  %134 = xor i32 %100, -1
  %135 = or i32 %33, %134
  %136 = and i32 %100, %55
  %137 = xor i32 %55, %0
  %138 = or i32 %41, %33
  %139 = or i32 %24, %134
  %140 = or i32 %87, %21
  %141 = and i32 %28, %23
  %142 = and i32 %30, %0
  %143 = or i32 %141, %142
  %144 = and i32 %34, %6
  %145 = and i32 %48, %37
  %146 = xor i32 %78, %1
  %147 = or i32 %10, %39
  %148 = or i32 %87, %31
  %149 = or i32 %82, %1
  %150 = and i32 %33, %37
  %151 = or i32 %70, %1
  %152 = shl i32 %151, 1
  %153 = and i32 %88, %39
  %154 = xor i32 %87, %1
  %155 = or i32 %26, %0
  %156 = or i32 %33, %1
  %157 = or i32 %48, %134
  %158 = and i32 %10, %1
  %159 = or i32 %41, %55
  %160 = and i32 %132, %1
  %161 = and i32 %33, %39
  %162 = or i32 %10, %134
  %163 = or i32 %28, %23
  %164 = and i32 %52, %0
  %165 = or i32 %92, %164
  %166 = or i32 %36, %2
  %167 = and i32 %48, %100
  %168 = xor i32 %30, %0
  %169 = or i32 %113, %168
  %170 = xor i32 %87, %30
  %171 = or i32 %10, %41
  %172 = and i32 %132, %6
  %173 = or i32 %28, %36
  %174 = xor i32 %37, %2
  %175 = and i32 %132, %39
  %176 = or i32 %33, %6
  %177 = shl i32 %176, 1
  %178 = and i32 %55, %37
  %179 = or i32 %39, %2
  %180 = xor i32 %30, %41
  %181 = and i32 %21, %33
  %182 = xor i32 %142, 2147483647
  %183 = xor i32 %182, %141
  %184 = shl i32 %183, 1
  %185 = or i32 %10, %6
  %186 = and i32 %100, %24
  %187 = or i32 %24, %58
  %188 = or i32 %25, %0
  %189 = and i32 %69, %6
  %190 = xor i32 %100, %2
  %191 = xor i32 %82, %1
  %192 = and i32 %30, %23
  %193 = or i32 %10, %1
  %194 = or i32 %30, %0
  %195 = shl i32 %194, 1
  %196 = or i32 %113, %114
  %197 = or i32 %134, %2
  %198 = shl i32 %197, 1
  %199 = and i32 %48, %42
  %200 = or i32 %55, %134
  %201 = or i32 %33, %58
  %202 = or i32 %41, %24
  %203 = or i32 %48, %41
  %204 = xor i32 %31, %0
  %205 = xor i32 %82, %60
  %206 = xor i32 %62, %0
  %207 = and i32 %10, %42
  %208 = and i32 %60, %0
  %209 = and i32 %55, %23
  %210 = and i32 %48, %0
  %211 = xor i32 %210, -1
  %212 = xor i32 %141, %211
  %213 = and i32 %33, %42
  %214 = or i32 %36, %33
  %215 = and i32 %100, %33
  %216 = xor i32 %92, %93
  %217 = add i32 %100, 1
  %218 = xor i32 %34, %41
  %219 = xor i32 %47, %49
  %220 = and i32 %33, %6
  %221 = shl i32 %220, 1
  %222 = or i32 %41, %31
  %223 = or i32 %63, %0
  %224 = add i32 %34, 1
  %225 = and i32 %21, %88
  %226 = or i32 %21, %78
  %227 = and i32 %48, %7
  %228 = and i32 %7, %55
  %229 = and i32 %69, %21
  %230 = or i32 %113, %98
  %231 = xor i32 %134, %2
  %232 = or i32 %62, %0
  %233 = and i32 %7, %33
  %234 = or i32 %78, %1
  %235 = and i32 %21, %2
  %236 = and i32 %69, %1
  %237 = or i32 %87, %1
  %238 = or i32 %33, %39
  %239 = or i32 %87, %39
  %240 = xor i32 %87, %63
  %241 = and i32 %10, %37
  %242 = xor i32 %132, %1
  %243 = or i32 %87, %62
  %244 = or i32 %10, %58
  %245 = and i32 %42, %2
  %246 = or i32 %41, %70
  %247 = and i32 %31, %23
  %248 = mul i32 %247, -35
  %249 = and i32 %62, %23
  %250 = and i32 %31, %0
  %251 = mul i32 %250, -15
  %252 = and i32 %62, %0
  %253 = mul i32 %252, -33
  %254 = and i32 %26, %23
  %255 = mul i32 %254, -13
  %256 = mul i32 %141, -17
  %257 = and i32 %26, %0
  %258 = mul i32 %257, -26
  %259 = mul i32 %113, -22
  %260 = add i32 %34, %39
  %261 = add i32 %260, %166
  %262 = add i32 %261, %30
  %263 = add i32 %262, %126
  %264 = add i32 %263, %76
  %265 = add i32 %199, %246
  %266 = sub i32 %129, %265
  %267 = add i32 %266, %107
  %268 = add i32 %267, %79
  %269 = add i32 %268, %45
  %270 = add i32 %269, %19
  %271 = mul i32 %270, 3
  %272 = add i32 %77, %6
  %273 = add i32 %272, %143
  %274 = add i32 %273, %14
  %275 = add i32 %274, %116
  %276 = shl i32 %275, 2
  %277 = sub i32 %245, %232
  %278 = sub i32 %277, %16
  %279 = add i32 %278, %216
  %280 = mul i32 %279, 5
  %281 = add i32 %20, %249
  %282 = mul i32 %281, -6
  %283 = add i32 %264, %3
  %284 = add i32 %283, %242
  %285 = add i32 %284, %243
  %286 = add i32 %285, %241
  %287 = add i32 %286, %234
  %288 = add i32 %287, %233
  %289 = add i32 %288, %214
  %290 = add i32 %289, %192
  %291 = add i32 %290, %155
  %292 = add i32 %291, %140
  %293 = add i32 %292, %118
  %294 = add i32 %293, %75
  %295 = add i32 %294, %66
  %296 = add i32 %295, %22
  %297 = shl i32 %296, 1
  %298 = add i32 %1, 3
  %299 = sub i32 %298, %2
  %300 = sub i32 %299, %41
  %301 = add i32 %300, %24
  %302 = sub i32 %301, %36
  %303 = add i32 %302, %217
  %304 = add i32 %303, %100
  %305 = add i32 %304, %37
  %306 = add i32 %305, %33
  %307 = sub i32 %306, %38
  %308 = sub i32 %307, %40
  %309 = sub i32 %308, %43
  %310 = sub i32 %309, %44
  %311 = add i32 %310, %59
  %312 = add i32 %311, %65
  %313 = sub i32 %312, %74
  %314 = add i32 %313, %82
  %315 = sub i32 %314, %83
  %316 = add i32 %315, %85
  %317 = sub i32 %316, %90
  %318 = add i32 %317, %60
  %319 = sub i32 %318, %96
  %320 = sub i32 %319, %104
  %321 = add i32 %320, %31
  %322 = sub i32 %321, %111
  %323 = sub i32 %322, %127
  %324 = add i32 %323, %139
  %325 = add i32 %324, %88
  %326 = add i32 %325, %174
  %327 = add i32 %326, %179
  %328 = add i32 %327, %186
  %329 = sub i32 %328, %187
  %330 = sub i32 %329, %190
  %331 = sub i32 %330, %10
  %332 = add i32 %331, %202
  %333 = add i32 %332, %224
  %334 = add i32 %333, %231
  %335 = sub i32 %334, %235
  %336 = sub i32 %335, %48
  %337 = sub i32 %336, %87
  %338 = add i32 %337, %55
  %339 = add i32 %338, %15
  %340 = sub i32 %339, %27
  %341 = sub i32 %340, %29
  %342 = sub i32 %341, %32
  %343 = sub i32 %342, %35
  %344 = sub i32 %343, %56
  %345 = add i32 %344, %57
  %346 = sub i32 %345, %61
  %347 = add i32 %346, %64
  %348 = sub i32 %347, %68
  %349 = sub i32 %348, %73
  %350 = add i32 %349, %84
  %351 = add i32 %350, %86
  %352 = add i32 %351, %89
  %353 = add i32 %352, %91
  %354 = add i32 %353, %97
  %355 = add i32 %354, %103
  %356 = sub i32 %355, %105
  %357 = sub i32 %356, %106
  %358 = sub i32 %357, %108
  %359 = sub i32 %358, %110
  %360 = add i32 %359, %112
  %361 = add i32 %360, %117
  %362 = sub i32 %361, %119
  %363 = add i32 %362, %122
  %364 = add i32 %363, %125
  %365 = sub i32 %364, %128
  %366 = add i32 %365, %130
  %367 = sub i32 %366, %131
  %368 = sub i32 %367, %133
  %369 = sub i32 %368, %135
  %370 = add i32 %369, %136
  %371 = sub i32 %370, %137
  %372 = add i32 %371, %138
  %373 = add i32 %372, %144
  %374 = add i32 %373, %145
  %375 = sub i32 %374, %146
  %376 = sub i32 %375, %147
  %377 = add i32 %376, %148
  %378 = add i32 %377, %149
  %379 = add i32 %378, %150
  %380 = sub i32 %379, %153
  %381 = sub i32 %380, %154
  %382 = add i32 %381, %156
  %383 = add i32 %382, %157
  %384 = sub i32 %383, %158
  %385 = add i32 %384, %159
  %386 = sub i32 %385, %49
  %387 = add i32 %386, %160
  %388 = add i32 %387, %161
  %389 = sub i32 %388, %162
  %390 = sub i32 %389, %163
  %391 = add i32 %390, %167
  %392 = sub i32 %391, %170
  %393 = add i32 %392, %171
  %394 = add i32 %393, %172
  %395 = sub i32 %394, %173
  %396 = add i32 %395, %175
  %397 = sub i32 %396, %178
  %398 = sub i32 %397, %180
  %399 = sub i32 %398, %181
  %400 = add i32 %399, %93
  %401 = sub i32 %400, %185
  %402 = add i32 %401, %188
  %403 = add i32 %402, %189
  %404 = sub i32 %403, %191
  %405 = add i32 %404, %193
  %406 = sub i32 %405, %198
  %407 = sub i32 %406, %200
  %408 = sub i32 %407, %201
  %409 = add i32 %408, %203
  %410 = sub i32 %409, %204
  %411 = add i32 %410, %205
  %412 = add i32 %411, %206
  %413 = add i32 %412, %207
  %414 = add i32 %413, %208
  %415 = sub i32 %414, %209
  %416 = add i32 %415, %213
  %417 = sub i32 %416, %215
  %418 = sub i32 %417, %114
  %419 = sub i32 %418, %218
  %420 = sub i32 %419, %222
  %421 = add i32 %420, %223
  %422 = sub i32 %421, %225
  %423 = sub i32 %422, %226
  %424 = sub i32 %423, %227
  %425 = add i32 %424, %228
  %426 = sub i32 %425, %229
  %427 = add i32 %426, %236
  %428 = add i32 %427, %237
  %429 = add i32 %428, %238
  %430 = add i32 %429, %239
  %431 = add i32 %430, %240
  %432 = add i32 %431, %244
  %433 = add i32 %432, %142
  %434 = add i32 %433, %17
  %435 = add i32 %434, %18
  %436 = add i32 %435, %51
  %437 = add i32 %436, %54
  %438 = sub i32 %437, %72
  %439 = add i32 %438, %81
  %440 = sub i32 %439, %95
  %441 = add i32 %440, %99
  %442 = sub i32 %441, %102
  %443 = sub i32 %442, %109
  %444 = sub i32 %443, %121
  %445 = sub i32 %444, %124
  %446 = sub i32 %445, %152
  %447 = sub i32 %446, %165
  %448 = sub i32 %447, %169
  %449 = sub i32 %448, %177
  %450 = sub i32 %449, %195
  %451 = add i32 %450, %196
  %452 = add i32 %451, %212
  %453 = sub i32 %452, %219
  %454 = sub i32 %453, %221
  %455 = add i32 %454, %230
  %456 = add i32 %455, %248
  %457 = add i32 %456, %251
  %458 = add i32 %457, %253
  %459 = add i32 %458, %255
  %460 = add i32 %459, %256
  %461 = add i32 %460, %258
  %462 = add i32 %461, %259
  %463 = sub i32 %462, %184
  %464 = add i32 %463, %282
  %465 = add i32 %464, %280
  %466 = add i32 %465, %276
  %467 = add i32 %466, %271
  %468 = add i32 %467, %297
  %469 = icmp eq i32 %12, %468
  %470 = select i1 %469, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %471 = tail call i32 @puts(i8* nonnull dereferenceable(1) %470)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
