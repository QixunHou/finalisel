digraph "DFG for'crackme' function" {
	Node0xb60af0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xb60b60[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0xb60c20[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0xb60cc0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0xb60d30[shape=record, label="  %7 = or i32 %3, %0"];
	Node0xb60da0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0xb60e10[shape=record, label="  %9 = and i32 %3, %0"];
	Node0xb60e80[shape=record, label="  %10 = or i32 %1, %0"];
	Node0xb60ef0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xb60f60[shape=record, label="  %12 = xor i32 %7, -1"];
	Node0xb60fd0[shape=record, label="  %13 = shl i32 %0, 1"];
	Node0xb61040[shape=record, label="  %14 = add i32 %9, %12"];
	Node0xb610b0[shape=record, label="  %15 = add i32 %14, %11"];
	Node0xb61150[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0xb611f0[shape=record, label="  %17 = add i32 %13, 2"];
	Node0xb61260[shape=record, label="  %18 = sub i32 %17, %4"];
	Node0xb612d0[shape=record, label="  %19 = add i32 %18, %9"];
	Node0xb61340[shape=record, label="  %20 = sub i32 %19, %8"];
	Node0xb613b0[shape=record, label="  %21 = add i32 %20, %6"];
	Node0xb61420[shape=record, label="  %22 = add i32 %21, %16"];
	Node0xb61490[shape=record, label="  %23 = icmp eq i32 %22, %3"];
	Node0xb01268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb61930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xb61980[shape=record, label="  ret void"];
	Node0xb60af0 -> Node0xb60b60;
	Node0xb60b60 -> Node0xb60c20;
	Node0xb60c20 -> Node0xb60cc0;
	Node0xb60cc0 -> Node0xb60d30;
	Node0xb60d30 -> Node0xb60da0;
	Node0xb60da0 -> Node0xb60e10;
	Node0xb60e10 -> Node0xb60e80;
	Node0xb60e80 -> Node0xb60ef0;
	Node0xb60ef0 -> Node0xb60f60;
	Node0xb60f60 -> Node0xb60fd0;
	Node0xb60fd0 -> Node0xb61040;
	Node0xb61040 -> Node0xb610b0;
	Node0xb610b0 -> Node0xb61150;
	Node0xb61150 -> Node0xb611f0;
	Node0xb611f0 -> Node0xb61260;
	Node0xb61260 -> Node0xb612d0;
	Node0xb612d0 -> Node0xb61340;
	Node0xb61340 -> Node0xb613b0;
	Node0xb613b0 -> Node0xb61420;
	Node0xb61420 -> Node0xb61490;
	Node0xb61490 -> Node0xb01268;
	Node0xb01268 -> Node0xb61930;
	Node0xb61930 -> Node0xb61980;
edge [color=red]
	Node0xb60b60 -> Node0xb60c20;
	Node0xb60c20 -> Node0xb60cc0;
	Node0xb60af0 -> Node0xb60d30;
	Node0xb60d30 -> Node0xb60da0;
	Node0xb60af0 -> Node0xb60e10;
	Node0xb60e80 -> Node0xb60ef0;
	Node0xb60d30 -> Node0xb60f60;
	Node0xb60e10 -> Node0xb61040;
	Node0xb60f60 -> Node0xb61040;
	Node0xb61040 -> Node0xb610b0;
	Node0xb60ef0 -> Node0xb610b0;
	Node0xb610b0 -> Node0xb61150;
	Node0xb60fd0 -> Node0xb611f0;
	Node0xb611f0 -> Node0xb61260;
	Node0xb60b60 -> Node0xb61260;
	Node0xb61260 -> Node0xb612d0;
	Node0xb60e10 -> Node0xb612d0;
	Node0xb612d0 -> Node0xb61340;
	Node0xb60da0 -> Node0xb61340;
	Node0xb61340 -> Node0xb613b0;
	Node0xb60cc0 -> Node0xb613b0;
	Node0xb613b0 -> Node0xb61420;
	Node0xb61150 -> Node0xb61420;
	Node0xb61420 -> Node0xb61490;
	Node0xb60af0 -> Node0xb61490;
	Node0xb61490 -> Node0xb01268;
	Node0xb01268 -> Node0xb61930;
}
