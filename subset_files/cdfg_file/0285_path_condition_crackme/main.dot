digraph "DFG for'main' function" {
	Node0x4ffaa8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x4ffb28[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x4ffbb8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x4ffc18[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x4ffcc8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x5000f8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x5001d8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x5002d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x500398[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x500448[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x500508[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x5005b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x4fa760[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x5007b8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x501728[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x501d98[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x501df8[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x501f08[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0x502168[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x5022c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x5023d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x5024e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x5025a8[shape=record, label="  ret i32 0"];
	Node0x4ffaa8 -> Node0x4ffb28;
	Node0x4ffb28 -> Node0x4ffbb8;
	Node0x4ffbb8 -> Node0x4ffc18;
	Node0x4ffc18 -> Node0x4ffcc8;
	Node0x4ffcc8 -> Node0x5000f8;
	Node0x5000f8 -> Node0x5001d8;
	Node0x5001d8 -> Node0x5002d8;
	Node0x5002d8 -> Node0x500398;
	Node0x500398 -> Node0x500448;
	Node0x500448 -> Node0x500508;
	Node0x500508 -> Node0x5005b8;
	Node0x5005b8 -> Node0x4fa760;
	Node0x4fa760 -> Node0x5007b8;
	Node0x5007b8 -> Node0x501728;
	Node0x501728 -> Node0x501d98;
	Node0x501d98 -> Node0x501df8;
	Node0x501df8 -> Node0x501f08;
	Node0x501f08 -> Node0x502168;
	Node0x502168 -> Node0x5022c8;
	Node0x5022c8 -> Node0x5023d8;
	Node0x5023d8 -> Node0x5024e8;
	Node0x5024e8 -> Node0x5025a8;
edge [color=red]
	Node0x4ffaa8 -> Node0x4ffcc8;
	Node0x4ffcc8 -> Node0x5000f8;
	Node0x4ffb28 -> Node0x5001d8;
	Node0x5001d8 -> Node0x5002d8;
	Node0x4ffbb8 -> Node0x500398;
	Node0x500398 -> Node0x500448;
	Node0x4ffc18 -> Node0x500508;
	Node0x500508 -> Node0x5005b8;
	Node0x4ffaa8 -> Node0x4fa760;
	Node0x4ffb28 -> Node0x4fa760;
	Node0x4ffbb8 -> Node0x4fa760;
	Node0x4ffc18 -> Node0x4fa760;
	Node0x4ffaa8 -> Node0x5007b8;
	Node0x4ffb28 -> Node0x501728;
	Node0x4ffbb8 -> Node0x501d98;
	Node0x4ffc18 -> Node0x501df8;
	Node0x5007b8 -> Node0x501f08;
	Node0x501728 -> Node0x501f08;
	Node0x501d98 -> Node0x501f08;
	Node0x501df8 -> Node0x501f08;
	Node0x500508 -> Node0x502168;
	Node0x500398 -> Node0x5022c8;
	Node0x5001d8 -> Node0x5023d8;
	Node0x4ffcc8 -> Node0x5024e8;
}
