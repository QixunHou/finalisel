; ModuleID = '../.././c_source_file/0896_path_condition_crackme.c'
source_filename = "../.././c_source_file/0896_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, %1
  %5 = xor i32 %0, -1
  %6 = add i32 %4, 1
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %1
  %9 = xor i32 %8, %0
  %10 = xor i32 %1, %0
  %11 = and i32 %10, %7
  %12 = and i32 %2, %1
  %13 = and i32 %12, %0
  %14 = and i32 %4, %5
  %15 = or i32 %13, %14
  %16 = and i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %10, -1
  %19 = and i32 %17, %18
  %20 = or i32 %7, %0
  %21 = and i32 %20, %18
  %22 = shl i32 %21, 1
  %23 = and i32 %4, %0
  %24 = xor i32 %1, -1
  %25 = and i32 %24, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %4, -1
  %28 = and i32 %27, %26
  %29 = and i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %2
  %32 = or i32 %24, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %33
  %37 = or i32 %25, %7
  %38 = or i32 %35, %18
  %39 = shl i32 %38, 1
  %40 = and i32 %24, %2
  %41 = and i32 %40, %0
  %42 = or i32 %4, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %41, %43
  %45 = or i32 %12, %25
  %46 = or i32 %1, %0
  %47 = xor i32 %46, -1
  %48 = xor i32 %47, %2
  %49 = and i32 %7, %1
  %50 = xor i32 %16, %1
  %51 = or i32 %2, %0
  %52 = or i32 %34, %29
  %53 = and i32 %7, %0
  %54 = or i32 %53, %18
  %55 = and i32 %32, %35
  %56 = and i32 %35, %26
  %57 = or i32 %4, %33
  %58 = or i32 %8, %0
  %59 = or i32 %25, %2
  %60 = or i32 %16, %47
  %61 = xor i32 %49, -1
  %62 = shl i32 %61, 1
  %63 = xor i32 %20, -1
  %64 = add i32 %20, 1
  %65 = or i32 %27, %0
  %66 = and i32 %32, %7
  %67 = xor i32 %12, %0
  %68 = and i32 %4, %32
  %69 = or i32 %24, %2
  %70 = xor i32 %69, %0
  %71 = or i32 %41, %70
  %72 = or i32 %2, %1
  %73 = xor i32 %72, -1
  %74 = or i32 %4, %25
  %75 = and i32 %40, %5
  %76 = or i32 %4, %5
  %77 = xor i32 %75, %76
  %78 = or i32 %34, %1
  %79 = xor i32 %16, %72
  %80 = xor i32 %51, -1
  %81 = or i32 %29, %80
  %82 = or i32 %29, %73
  %83 = xor i32 %53, %8
  %84 = shl i32 %83, 1
  %85 = and i32 %7, %26
  %86 = and i32 %8, %0
  %87 = and i32 %34, %24
  %88 = xor i32 %20, %29
  %89 = or i32 %80, %24
  %90 = or i32 %63, %18
  %91 = xor i32 %8, -1
  %92 = or i32 %91, %0
  %93 = and i32 %32, %2
  %94 = or i32 %34, %25
  %95 = or i32 %12, %0
  %96 = or i32 %33, %2
  %97 = and i32 %61, %0
  %98 = xor i32 %12, -1
  %99 = or i32 %16, %24
  %100 = or i32 %16, %18
  %101 = shl i32 %17, 1
  %102 = or i32 %16, %10
  %103 = and i32 %20, %1
  %104 = and i32 %27, %0
  %105 = xor i32 %29, %2
  %106 = shl i32 %105, 1
  %107 = xor i32 %73, %0
  %108 = xor i32 %61, %0
  %109 = or i32 %34, %10
  %110 = and i32 %34, %32
  %111 = xor i32 %46, %2
  %112 = or i32 %29, %27
  %113 = shl i32 %112, 1
  %114 = xor i32 %41, %42
  %115 = and i32 %10, %35
  %116 = or i32 %10, %7
  %117 = or i32 %72, %5
  %118 = xor i32 %16, %32
  %119 = and i32 %72, %5
  %120 = xor i32 %80, %1
  %121 = and i32 %51, %10
  %122 = xor i32 %4, %0
  %123 = xor i32 %122, -1
  %124 = or i32 %13, %123
  %125 = or i32 %29, %63
  %126 = xor i32 %53, -1
  %127 = and i32 %10, %126
  %128 = and i32 %27, %30
  %129 = and i32 %126, %24
  %130 = and i32 %35, %1
  %131 = and i32 %20, %24
  %132 = or i32 %29, %35
  %133 = and i32 %4, %26
  %134 = shl i32 %133, 1
  %135 = or i32 %13, %119
  %136 = and i32 %126, %1
  %137 = or i32 %4, %29
  %138 = xor i32 %72, %0
  %139 = or i32 %13, %138
  %140 = or i32 %41, %122
  %141 = xor i32 %16, %61
  %142 = and i32 %4, %30
  %143 = shl i32 %0, 1
  %144 = or i32 %10, %63
  %145 = or i32 %53, %1
  %146 = xor i32 %13, -1
  %147 = xor i32 %138, %146
  %148 = and i32 %51, %1
  %149 = add i32 %29, 1
  %150 = or i32 %49, %25
  %151 = shl i32 %150, 1
  %152 = add i32 %2, 1
  %153 = or i32 %47, %2
  %154 = xor i32 %25, %2
  %155 = xor i32 %91, %0
  %156 = or i32 %29, %91
  %157 = or i32 %16, %73
  %158 = xor i32 %49, %0
  %159 = xor i32 %25, %98
  %160 = xor i32 %126, %1
  %161 = and i32 %12, %5
  %162 = or i32 %161, %23
  %163 = and i32 %4, %46
  %164 = or i32 %16, %49
  %165 = and i32 %126, %18
  %166 = add i32 %34, 1
  %167 = or i32 %27, %5
  %168 = xor i32 %14, %146
  %169 = or i32 %7, %33
  %170 = and i32 %51, %18
  %171 = and i32 %46, %7
  %172 = xor i32 %69, -1
  %173 = or i32 %172, %0
  %174 = xor i32 %41, %173
  %175 = and i32 %51, %24
  %176 = or i32 %53, %10
  %177 = shl i32 %176, 1
  %178 = or i32 %61, %5
  %179 = or i32 %49, %5
  %180 = and i32 %46, %27
  %181 = or i32 %53, %91
  %182 = xor i32 %53, %98
  %183 = xor i32 %119, %146
  %184 = or i32 %4, %47
  %185 = or i32 %7, %47
  %186 = and i32 %72, %0
  %187 = xor i32 %186, 2147483647
  %188 = xor i32 %187, %161
  %189 = shl i32 %1, 1
  %190 = and i32 %10, %2
  %191 = xor i32 %8, %29
  %192 = and i32 %73, %5
  %193 = mul i32 %192, -26
  %194 = and i32 %49, %5
  %195 = and i32 %73, %0
  %196 = shl i32 %195, 3
  %197 = and i32 %49, %0
  %198 = and i32 %91, %5
  %199 = and i32 %91, %0
  %200 = add i32 %96, %26
  %201 = add i32 %200, %48
  %202 = add i32 %201, %175
  %203 = add i32 %202, %164
  %204 = add i32 %203, %158
  %205 = add i32 %204, %145
  %206 = add i32 %205, %109
  %207 = add i32 %206, %108
  %208 = add i32 %207, %99
  %209 = add i32 %208, %89
  %210 = add i32 %209, %81
  %211 = add i32 %210, %55
  %212 = add i32 %211, %188
  %213 = shl i32 %212, 1
  %214 = add i32 %198, %46
  %215 = sub i32 %199, %214
  %216 = add i32 %215, %148
  %217 = sub i32 %216, %23
  %218 = mul i32 %217, 3
  %219 = add i32 %142, %85
  %220 = add i32 %219, %197
  %221 = add i32 %220, %127
  %222 = shl i32 %221, 2
  %223 = sub i32 %12, %194
  %224 = mul i32 %223, 10
  %225 = sub i32 %118, %51
  %226 = sub i32 %225, %139
  %227 = mul i32 %226, 5
  %228 = sub i32 %5, %143
  %229 = add i32 %228, %2
  %230 = sub i32 %229, %32
  %231 = add i32 %230, %149
  %232 = add i32 %231, %152
  %233 = sub i32 %232, %189
  %234 = add i32 %233, %11
  %235 = sub i32 %234, %31
  %236 = add i32 %235, %8
  %237 = add i32 %236, %37
  %238 = sub i32 %237, %49
  %239 = sub i32 %238, %59
  %240 = add i32 %239, %64
  %241 = add i32 %240, %66
  %242 = add i32 %241, %73
  %243 = add i32 %242, %27
  %244 = sub i32 %243, %93
  %245 = add i32 %244, %98
  %246 = sub i32 %245, %111
  %247 = add i32 %246, %116
  %248 = sub i32 %247, %53
  %249 = sub i32 %248, %34
  %250 = add i32 %249, %20
  %251 = sub i32 %250, %153
  %252 = sub i32 %251, %154
  %253 = add i32 %252, %166
  %254 = sub i32 %253, %169
  %255 = sub i32 %254, %171
  %256 = add i32 %255, %185
  %257 = sub i32 %256, %190
  %258 = sub i32 %257, %9
  %259 = add i32 %258, %19
  %260 = add i32 %259, %28
  %261 = sub i32 %260, %36
  %262 = sub i32 %261, %45
  %263 = add i32 %262, %50
  %264 = add i32 %263, %52
  %265 = sub i32 %264, %54
  %266 = add i32 %265, %56
  %267 = add i32 %266, %57
  %268 = sub i32 %267, %58
  %269 = add i32 %268, %60
  %270 = sub i32 %269, %62
  %271 = sub i32 %270, %65
  %272 = sub i32 %271, %67
  %273 = sub i32 %272, %68
  %274 = sub i32 %273, %74
  %275 = sub i32 %274, %78
  %276 = sub i32 %275, %79
  %277 = add i32 %276, %82
  %278 = sub i32 %277, %86
  %279 = add i32 %278, %87
  %280 = sub i32 %279, %88
  %281 = add i32 %280, %90
  %282 = sub i32 %281, %92
  %283 = add i32 %282, %94
  %284 = sub i32 %283, %95
  %285 = sub i32 %284, %97
  %286 = add i32 %285, %100
  %287 = sub i32 %286, %101
  %288 = add i32 %287, %102
  %289 = sub i32 %288, %103
  %290 = add i32 %289, %104
  %291 = sub i32 %290, %106
  %292 = add i32 %291, %107
  %293 = add i32 %292, %110
  %294 = sub i32 %293, %115
  %295 = add i32 %294, %117
  %296 = add i32 %295, %119
  %297 = sub i32 %296, %120
  %298 = sub i32 %297, %121
  %299 = add i32 %298, %125
  %300 = sub i32 %299, %128
  %301 = sub i32 %300, %129
  %302 = sub i32 %301, %130
  %303 = add i32 %302, %131
  %304 = add i32 %303, %132
  %305 = sub i32 %304, %136
  %306 = sub i32 %305, %137
  %307 = add i32 %306, %141
  %308 = sub i32 %307, %144
  %309 = add i32 %308, %42
  %310 = add i32 %309, %155
  %311 = sub i32 %310, %156
  %312 = sub i32 %311, %157
  %313 = add i32 %312, %159
  %314 = add i32 %313, %160
  %315 = add i32 %314, %163
  %316 = sub i32 %315, %165
  %317 = add i32 %316, %167
  %318 = sub i32 %317, %170
  %319 = sub i32 %318, %178
  %320 = add i32 %319, %179
  %321 = add i32 %320, %180
  %322 = sub i32 %321, %181
  %323 = add i32 %322, %182
  %324 = add i32 %323, %184
  %325 = add i32 %324, %191
  %326 = sub i32 %325, %15
  %327 = sub i32 %326, %22
  %328 = sub i32 %327, %39
  %329 = add i32 %328, %44
  %330 = sub i32 %329, %71
  %331 = add i32 %330, %77
  %332 = sub i32 %331, %84
  %333 = sub i32 %332, %113
  %334 = sub i32 %333, %114
  %335 = add i32 %334, %124
  %336 = sub i32 %335, %134
  %337 = sub i32 %336, %135
  %338 = add i32 %337, %140
  %339 = sub i32 %338, %147
  %340 = sub i32 %339, %151
  %341 = add i32 %340, %162
  %342 = sub i32 %341, %168
  %343 = add i32 %342, %174
  %344 = sub i32 %343, %177
  %345 = add i32 %344, %183
  %346 = add i32 %345, %193
  %347 = add i32 %346, %196
  %348 = add i32 %347, %224
  %349 = add i32 %348, %222
  %350 = add i32 %349, %227
  %351 = add i32 %350, %218
  %352 = add i32 %351, %213
  %353 = icmp eq i32 %6, %352
  %354 = select i1 %353, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %355 = tail call i32 @puts(i8* nonnull dereferenceable(1) %354)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
