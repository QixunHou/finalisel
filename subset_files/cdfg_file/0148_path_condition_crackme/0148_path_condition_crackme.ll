; ModuleID = '../.././c_source_file/0148_path_condition_crackme.c'
source_filename = "../.././c_source_file/0148_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %1, %0
  %8 = xor i32 %7, %2
  %9 = xor i32 %5, -1
  %10 = xor i32 %3, -1
  %11 = and i32 %10, %4
  %12 = or i32 %11, %9
  %13 = add i32 %12, %8
  %14 = xor i32 %11, -1
  %15 = xor i32 %14, %5
  %16 = sub i32 %13, %15
  %17 = xor i32 %1, -1
  %18 = xor i32 %0, -1
  %19 = xor i32 %2, -1
  %20 = or i32 %19, %1
  %21 = or i32 %20, %18
  %22 = xor i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = and i32 %23, %2
  %25 = and i32 %2, %0
  %26 = or i32 %17, %0
  %27 = xor i32 %25, %26
  %28 = and i32 %19, %1
  %29 = xor i32 %28, -1
  %30 = xor i32 %29, %0
  %31 = or i32 %2, %1
  %32 = and i32 %31, %0
  %33 = and i32 %2, %1
  %34 = and i32 %33, %0
  %35 = xor i32 %31, 2147483647
  %36 = or i32 %35, %0
  %37 = xor i32 %36, %34
  %38 = and i32 %17, %2
  %39 = and i32 %38, %0
  %40 = or i32 %17, %2
  %41 = xor i32 %40, %18
  %42 = xor i32 %41, %39
  %43 = and i32 %20, %18
  %44 = shl i32 %43, 1
  %45 = xor i32 %25, %7
  %46 = and i32 %17, %0
  %47 = or i32 %28, %46
  %48 = xor i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %49, %23
  %51 = or i32 %25, %23
  %52 = xor i32 %2, %1
  %53 = and i32 %52, %0
  %54 = and i32 %19, %0
  %55 = xor i32 %54, %20
  %56 = shl i32 %55, 1
  %57 = or i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %58, %1
  %60 = and i32 %7, %2
  %61 = or i32 %29, %18
  %62 = xor i32 %31, %0
  %63 = xor i32 %7, -1
  %64 = xor i32 %52, 2147483647
  %65 = or i32 %64, %63
  %66 = shl i32 %65, 1
  %67 = and i32 %1, %0
  %68 = xor i32 %67, -1
  %69 = and i32 %48, %68
  %70 = shl i32 %69, 1
  %71 = or i32 %52, %63
  %72 = shl i32 %71, 1
  %73 = xor i32 %33, -1
  %74 = xor i32 %46, %73
  %75 = and i32 %22, %49
  %76 = or i32 %19, %63
  %77 = or i32 %28, %18
  %78 = xor i32 %25, -1
  %79 = xor i32 %78, %1
  %80 = and i32 %33, %18
  %81 = xor i32 %53, -1
  %82 = xor i32 %80, %81
  %83 = or i32 %25, %17
  %84 = or i32 %22, %19
  %85 = xor i32 %26, -1
  %86 = or i32 %49, %85
  %87 = and i32 %22, %78
  %88 = or i32 %49, %23
  %89 = or i32 %31, %0
  %90 = and i32 %18, %2
  %91 = or i32 %90, %67
  %92 = xor i32 %68, %2
  %93 = or i32 %54, %33
  %94 = xor i32 %28, %0
  %95 = and i32 %48, %7
  %96 = or i32 %67, %2
  %97 = shl i32 %96, 1
  %98 = xor i32 %46, %29
  %99 = or i32 %19, %23
  %100 = and i32 %38, %18
  %101 = or i32 %52, %18
  %102 = xor i32 %100, %101
  %103 = xor i32 %52, -1
  %104 = or i32 %103, %0
  %105 = xor i32 %34, %104
  %106 = or i32 %48, %1
  %107 = shl i32 %73, 1
  %108 = and i32 %57, %17
  %109 = or i32 %52, %0
  %110 = xor i32 %39, %109
  %111 = xor i32 %57, %67
  %112 = add i32 %67, 1
  %113 = or i32 %90, %22
  %114 = and i32 %26, %19
  %115 = xor i32 %40, -1
  %116 = or i32 %115, %0
  %117 = xor i32 %39, %116
  %118 = and i32 %48, %22
  %119 = xor i32 %31, -1
  %120 = and i32 %119, %18
  %121 = and i32 %28, %18
  %122 = and i32 %119, %0
  %123 = and i32 %28, %0
  %124 = xor i32 %20, -1
  %125 = and i32 %124, %18
  %126 = and i32 %124, %0
  %127 = mul i32 %126, -10
  %128 = and i32 %5, %4
  %129 = or i32 %9, %4
  %130 = xor i32 %129, -1
  %131 = or i32 %130, %10
  %132 = xor i32 %5, %4
  %133 = and i32 %132, %10
  %134 = or i32 %4, %3
  %135 = and i32 %134, %9
  %136 = and i32 %5, %3
  %137 = and i32 %136, %4
  %138 = xor i32 %4, -1
  %139 = or i32 %5, %3
  %140 = and i32 %139, %138
  %141 = or i32 %137, %140
  %142 = xor i32 %139, -1
  %143 = or i32 %142, %138
  %144 = shl i32 %143, 1
  %145 = or i32 %9, %3
  %146 = or i32 %145, %4
  %147 = xor i32 %5, %3
  %148 = and i32 %147, %138
  %149 = xor i32 %137, -1
  %150 = xor i32 %148, %149
  %151 = and i32 %9, %3
  %152 = xor i32 %151, -1
  %153 = or i32 %152, %4
  %154 = or i32 %151, %11
  %155 = or i32 %5, %4
  %156 = and i32 %155, %10
  %157 = and i32 %4, %3
  %158 = xor i32 %136, -1
  %159 = and i32 %158, %138
  %160 = xor i32 %134, -1
  %161 = or i32 %132, %160
  %162 = or i32 %151, %138
  %163 = xor i32 %4, %3
  %164 = xor i32 %163, -1
  %165 = xor i32 %132, -1
  %166 = or i32 %165, %164
  %167 = xor i32 %139, %4
  %168 = xor i32 %167, %149
  %169 = xor i32 %128, -1
  %170 = and i32 %169, %164
  %171 = and i32 %132, %164
  %172 = and i32 %9, %4
  %173 = or i32 %172, %163
  %174 = or i32 %132, %10
  %175 = and i32 %145, %138
  %176 = xor i32 %151, %4
  %177 = or i32 %11, %5
  %178 = add i32 %134, 1
  %179 = and i32 %169, %10
  %180 = or i32 %145, %138
  %181 = and i32 %129, %3
  %182 = xor i32 %145, -1
  %183 = or i32 %182, %138
  %184 = or i32 %165, %160
  %185 = xor i32 %182, %4
  %186 = and i32 %136, %138
  %187 = and i32 %147, %4
  %188 = or i32 %186, %187
  %189 = and i32 %10, %5
  %190 = and i32 %189, %4
  %191 = xor i32 %147, %4
  %192 = xor i32 %191, -1
  %193 = xor i32 %190, %192
  %194 = shl i32 %193, 1
  %195 = xor i32 %155, -1
  %196 = or i32 %195, %164
  %197 = xor i32 %136, %4
  %198 = or i32 %10, %4
  %199 = xor i32 %198, -1
  %200 = or i32 %128, %199
  %201 = xor i32 %199, %5
  %202 = and i32 %152, %4
  %203 = and i32 %134, %5
  %204 = xor i32 %158, %4
  %205 = shl i32 %204, 1
  %206 = xor i32 %195, %3
  %207 = xor i32 %157, %5
  %208 = or i32 %147, %11
  %209 = and i32 %155, %164
  %210 = or i32 %10, %5
  %211 = and i32 %210, %138
  %212 = xor i32 %211, -1
  %213 = xor i32 %190, %212
  %214 = xor i32 %145, %4
  %215 = and i32 %147, %14
  %216 = or i32 %157, %182
  %217 = xor i32 %128, %134
  %218 = and i32 %163, %169
  %219 = xor i32 %172, -1
  %220 = and i32 %219, %164
  %221 = xor i32 %157, -1
  %222 = and i32 %9, %221
  %223 = shl i32 %222, 1
  %224 = or i32 %137, %192
  %225 = or i32 %147, %4
  %226 = xor i32 %129, %3
  %227 = xor i32 %147, -1
  %228 = or i32 %227, %160
  %229 = or i32 %147, %138
  %230 = shl i32 %229, 1
  %231 = shl i32 %5, 1
  %232 = xor i32 %152, %4
  %233 = and i32 %219, %10
  %234 = xor i32 %145, %157
  %235 = and i32 %169, %3
  %236 = xor i32 %160, %5
  %237 = add i32 %147, 1
  %238 = shl i32 %3, 1
  %239 = or i32 %147, %157
  %240 = and i32 %132, %198
  %241 = shl i32 %240, 1
  %242 = xor i32 %130, %3
  %243 = or i32 %227, %138
  %244 = xor i32 %155, %157
  %245 = and i32 %147, %221
  %246 = xor i32 %142, %4
  %247 = shl i32 %246, 2
  %248 = and i32 %139, %4
  %249 = and i32 %165, %14
  %250 = or i32 %227, %4
  %251 = or i32 %157, %195
  %252 = shl i32 %251, 1
  %253 = or i32 %132, %3
  %254 = or i32 %227, %199
  %255 = and i32 %164, %5
  %256 = shl i32 %255, 1
  %257 = and i32 %134, %165
  %258 = shl i32 %129, 1
  %259 = or i32 %128, %163
  %260 = shl i32 %259, 1
  %261 = or i32 %132, %164
  %262 = or i32 %165, %199
  %263 = xor i32 %4, 2147483647
  %264 = xor i32 %263, %210
  %265 = xor i32 %264, %190
  %266 = shl i32 %265, 1
  %267 = and i32 %219, %3
  %268 = and i32 %132, %163
  %269 = or i32 %137, %148
  %270 = or i32 %163, %130
  %271 = or i32 %151, %4
  %272 = xor i32 %190, %225
  %273 = or i32 %147, %199
  %274 = or i32 %132, %163
  %275 = and i32 %134, %227
  %276 = or i32 %128, %164
  %277 = and i32 %152, %138
  %278 = and i32 %147, %134
  %279 = or i32 %136, %138
  %280 = or i32 %11, %165
  %281 = or i32 %152, %138
  %282 = or i32 %9, %199
  %283 = or i32 %128, %10
  %284 = and i32 %189, %138
  %285 = xor i32 %229, -1
  %286 = or i32 %284, %285
  %287 = and i32 %198, %227
  %288 = xor i32 %186, -1
  %289 = xor i32 %248, %288
  %290 = and i32 %163, %9
  %291 = and i32 %147, %198
  %292 = and i32 %165, %221
  %293 = and i32 %132, %221
  %294 = or i32 %158, %138
  %295 = or i32 %172, %10
  %296 = or i32 %182, %4
  %297 = or i32 %130, %164
  %298 = or i32 %136, %11
  %299 = or i32 %147, %160
  %300 = or i32 %165, %3
  %301 = and i32 %132, %134
  %302 = and i32 %145, %4
  %303 = or i32 %139, %4
  %304 = shl i32 %303, 1
  %305 = shl i32 %138, 1
  %306 = or i32 %137, %167
  %307 = or i32 %199, %5
  %308 = and i32 %9, %14
  %309 = add i32 %145, 1
  %310 = and i32 %210, %4
  %311 = xor i32 %310, -1
  %312 = xor i32 %284, %311
  %313 = and i32 %129, %164
  %314 = or i32 %9, %164
  %315 = and i32 %132, %3
  %316 = or i32 %164, %5
  %317 = and i32 %227, %221
  %318 = or i32 %190, %211
  %319 = xor i32 %219, %3
  %320 = shl i32 %319, 1
  %321 = and i32 %163, %5
  %322 = shl i32 %152, 1
  %323 = or i32 %165, %10
  %324 = and i32 %221, %5
  %325 = xor i32 %134, %5
  %326 = and i32 %198, %9
  %327 = xor i32 %139, %157
  %328 = or i32 %284, %310
  %329 = xor i32 %129, %157
  %330 = or i32 %132, %157
  %331 = and i32 %165, %10
  %332 = or i32 %195, %3
  %333 = shl i32 %4, 1
  %334 = xor i32 %221, %5
  %335 = and i32 %163, %165
  %336 = or i32 %128, %3
  %337 = xor i32 %11, %152
  %338 = and i32 %155, %163
  %339 = or i32 %128, %151
  %340 = xor i32 %137, %191
  %341 = and i32 %129, %10
  %342 = or i32 %132, %11
  %343 = and i32 %9, %164
  %344 = or i32 %158, %4
  %345 = or i32 %128, %142
  %346 = and i32 %155, %3
  %347 = and i32 %14, %5
  %348 = shl i32 %163, 1
  %349 = or i32 %157, %130
  %350 = or i32 %142, %4
  %351 = or i32 %186, %248
  %352 = xor i32 %187, %288
  %353 = and i32 %198, %5
  %354 = xor i32 %128, %139
  %355 = or i32 %157, %5
  %356 = or i32 %172, %164
  %357 = shl i32 %356, 1
  %358 = or i32 %172, %182
  %359 = or i32 %172, %136
  %360 = or i32 %157, %165
  %361 = and i32 %165, %164
  %362 = and i32 %227, %4
  %363 = or i32 %160, %5
  %364 = xor i32 %225, -1
  %365 = or i32 %190, %364
  %366 = or i32 %163, %9
  %367 = or i32 %130, %3
  %368 = and i32 %227, %14
  %369 = xor i32 %11, %158
  %370 = xor i32 %128, %3
  %371 = and i32 %198, %165
  %372 = or i32 %157, %142
  %373 = and i32 %158, %4
  %374 = xor i32 %172, %145
  %375 = xor i32 %172, %3
  %376 = or i32 %157, %227
  %377 = xor i32 %11, %5
  %378 = or i32 %9, %160
  %379 = shl i32 %378, 1
  %380 = xor i32 %155, %3
  %381 = shl i32 %134, 1
  %382 = xor i32 %227, %4
  %383 = xor i32 %128, %152
  %384 = shl i32 %383, 1
  %385 = and i32 %163, %219
  %386 = or i32 %157, %9
  %387 = or i32 %132, %199
  %388 = or i32 %190, %191
  %389 = add i32 %163, 1
  %390 = and i32 %165, %3
  %391 = xor i32 %172, %158
  %392 = or i32 %139, %138
  %393 = or i32 %163, %165
  %394 = add i32 %5, 1
  %395 = and i32 %227, %138
  %396 = or i32 %11, %227
  %397 = shl i32 %130, 1
  %398 = xor i32 %140, %149
  %399 = or i32 %163, %5
  %400 = shl i32 %399, 1
  %401 = and i32 %142, %138
  %402 = and i32 %151, %138
  %403 = and i32 %142, %4
  %404 = mul i32 %403, -15
  %405 = and i32 %151, %4
  %406 = mul i32 %405, -13
  %407 = and i32 %182, %138
  %408 = shl i32 %407, 3
  %409 = and i32 %182, %4
  %410 = shl i32 %409, 2
  %411 = sub i32 %325, %91
  %412 = sub i32 %411, %396
  %413 = sub i32 %412, %402
  %414 = sub i32 %413, %371
  %415 = sub i32 %414, %276
  %416 = add i32 %415, %146
  %417 = mul i32 %416, 5
  %418 = sub i32 %350, %273
  %419 = add i32 %418, %216
  %420 = add i32 %419, %131
  %421 = mul i32 %420, 3
  %422 = add i32 %366, %353
  %423 = shl i32 %422, 2
  %424 = sub i32 %80, %137
  %425 = mul i32 %424, 7
  %426 = sub i32 %125, %186
  %427 = mul i32 %426, 9
  %428 = add i32 %401, %122
  %429 = mul i32 %428, -12
  %430 = add i32 %123, %120
  %431 = mul i32 %430, 6
  %432 = add i32 %0, -1
  %433 = add i32 %432, %60
  %434 = add i32 %433, %34
  %435 = add i32 %434, %111
  %436 = add i32 %435, %98
  %437 = add i32 %436, %94
  %438 = add i32 %437, %89
  %439 = add i32 %438, %158
  %440 = add i32 %439, %377
  %441 = add i32 %440, %132
  %442 = add i32 %441, %343
  %443 = add i32 %442, %334
  %444 = add i32 %443, %203
  %445 = add i32 %444, %37
  %446 = add i32 %445, %395
  %447 = add i32 %446, %391
  %448 = add i32 %447, %380
  %449 = add i32 %448, %374
  %450 = add i32 %449, %369
  %451 = add i32 %450, %368
  %452 = add i32 %451, %367
  %453 = add i32 %452, %361
  %454 = add i32 %453, %330
  %455 = add i32 %454, %278
  %456 = add i32 %455, %267
  %457 = add i32 %456, %250
  %458 = add i32 %457, %234
  %459 = add i32 %458, %232
  %460 = add i32 %459, %220
  %461 = add i32 %460, %181
  %462 = add i32 %461, %174
  %463 = add i32 %462, %173
  %464 = add i32 %463, %328
  %465 = add i32 %464, %351
  %466 = shl i32 %465, 1
  %467 = sub i32 3, %1
  %468 = add i32 %467, %112
  %469 = add i32 %468, %46
  %470 = sub i32 %469, %26
  %471 = add i32 %470, %22
  %472 = sub i32 %471, %24
  %473 = sub i32 %472, %76
  %474 = add i32 %473, %84
  %475 = add i32 %474, %28
  %476 = sub i32 %475, %92
  %477 = add i32 %476, %78
  %478 = sub i32 %477, %99
  %479 = sub i32 %478, %25
  %480 = add i32 %479, %58
  %481 = add i32 %480, %114
  %482 = add i32 %481, %10
  %483 = sub i32 %482, %21
  %484 = add i32 %483, %27
  %485 = sub i32 %484, %30
  %486 = add i32 %485, %32
  %487 = sub i32 %486, %45
  %488 = add i32 %487, %47
  %489 = add i32 %488, %50
  %490 = sub i32 %489, %51
  %491 = sub i32 %490, %53
  %492 = sub i32 %491, %59
  %493 = add i32 %492, %61
  %494 = add i32 %493, %62
  %495 = sub i32 %494, %74
  %496 = add i32 %495, %75
  %497 = add i32 %496, %77
  %498 = sub i32 %497, %79
  %499 = add i32 %498, %83
  %500 = sub i32 %499, %86
  %501 = add i32 %500, %87
  %502 = add i32 %501, %88
  %503 = sub i32 %502, %93
  %504 = sub i32 %503, %95
  %505 = sub i32 %504, %97
  %506 = add i32 %505, %106
  %507 = sub i32 %506, %107
  %508 = add i32 %507, %108
  %509 = sub i32 %508, %113
  %510 = add i32 %509, %118
  %511 = sub i32 %510, %121
  %512 = sub i32 %511, %238
  %513 = add i32 %512, %42
  %514 = sub i32 %513, %44
  %515 = sub i32 %514, %56
  %516 = sub i32 %515, %70
  %517 = sub i32 %516, %72
  %518 = add i32 %517, %82
  %519 = sub i32 %518, %102
  %520 = add i32 %519, %105
  %521 = add i32 %520, %110
  %522 = add i32 %521, %117
  %523 = add i32 %522, %127
  %524 = add i32 %523, %178
  %525 = add i32 %524, %199
  %526 = sub i32 %525, %305
  %527 = add i32 %526, %14
  %528 = sub i32 %527, %333
  %529 = sub i32 %528, %11
  %530 = sub i32 %529, %198
  %531 = add i32 %530, %389
  %532 = add i32 %531, %394
  %533 = sub i32 %532, %66
  %534 = sub i32 %533, %128
  %535 = sub i32 %534, %135
  %536 = sub i32 %535, %151
  %537 = add i32 %536, %177
  %538 = sub i32 %537, %201
  %539 = add i32 %538, %207
  %540 = sub i32 %539, %231
  %541 = sub i32 %540, %236
  %542 = add i32 %541, %237
  %543 = add i32 %542, %147
  %544 = add i32 %543, %136
  %545 = add i32 %544, %282
  %546 = add i32 %545, %145
  %547 = sub i32 %546, %290
  %548 = add i32 %547, %165
  %549 = sub i32 %548, %307
  %550 = add i32 %549, %308
  %551 = add i32 %550, %309
  %552 = sub i32 %551, %314
  %553 = add i32 %552, %316
  %554 = sub i32 %553, %172
  %555 = sub i32 %554, %321
  %556 = sub i32 %555, %324
  %557 = add i32 %556, %326
  %558 = sub i32 %557, %347
  %559 = sub i32 %558, %348
  %560 = sub i32 %559, %139
  %561 = sub i32 %560, %355
  %562 = add i32 %561, %363
  %563 = sub i32 %562, %381
  %564 = add i32 %563, %386
  %565 = add i32 %564, %431
  %566 = add i32 %565, %133
  %567 = add i32 %566, %153
  %568 = sub i32 %567, %154
  %569 = sub i32 %568, %156
  %570 = sub i32 %569, %159
  %571 = add i32 %570, %161
  %572 = sub i32 %571, %162
  %573 = add i32 %572, %166
  %574 = sub i32 %573, %170
  %575 = sub i32 %574, %171
  %576 = sub i32 %575, %175
  %577 = add i32 %576, %176
  %578 = sub i32 %577, %179
  %579 = add i32 %578, %180
  %580 = add i32 %579, %183
  %581 = sub i32 %580, %184
  %582 = sub i32 %581, %185
  %583 = sub i32 %582, %196
  %584 = sub i32 %583, %197
  %585 = add i32 %584, %200
  %586 = add i32 %585, %202
  %587 = add i32 %586, %206
  %588 = sub i32 %587, %208
  %589 = add i32 %588, %209
  %590 = add i32 %589, %214
  %591 = sub i32 %590, %215
  %592 = sub i32 %591, %217
  %593 = sub i32 %592, %218
  %594 = sub i32 %593, %223
  %595 = add i32 %594, %140
  %596 = sub i32 %595, %225
  %597 = sub i32 %596, %167
  %598 = add i32 %597, %226
  %599 = sub i32 %598, %228
  %600 = add i32 %599, %233
  %601 = add i32 %600, %235
  %602 = add i32 %601, %148
  %603 = add i32 %602, %239
  %604 = add i32 %603, %242
  %605 = add i32 %604, %243
  %606 = add i32 %605, %244
  %607 = sub i32 %606, %245
  %608 = sub i32 %607, %248
  %609 = sub i32 %608, %249
  %610 = sub i32 %609, %253
  %611 = add i32 %610, %254
  %612 = sub i32 %611, %256
  %613 = sub i32 %612, %257
  %614 = sub i32 %613, %258
  %615 = add i32 %614, %261
  %616 = add i32 %615, %262
  %617 = sub i32 %616, %268
  %618 = sub i32 %617, %270
  %619 = add i32 %618, %271
  %620 = add i32 %619, %274
  %621 = add i32 %620, %275
  %622 = sub i32 %621, %277
  %623 = add i32 %622, %191
  %624 = sub i32 %623, %279
  %625 = add i32 %624, %280
  %626 = add i32 %625, %281
  %627 = sub i32 %626, %283
  %628 = sub i32 %627, %287
  %629 = add i32 %628, %291
  %630 = add i32 %629, %292
  %631 = add i32 %630, %293
  %632 = sub i32 %631, %294
  %633 = sub i32 %632, %295
  %634 = sub i32 %633, %296
  %635 = add i32 %634, %297
  %636 = add i32 %635, %298
  %637 = add i32 %636, %299
  %638 = sub i32 %637, %300
  %639 = sub i32 %638, %301
  %640 = add i32 %639, %302
  %641 = sub i32 %640, %313
  %642 = sub i32 %641, %315
  %643 = add i32 %642, %317
  %644 = sub i32 %643, %322
  %645 = add i32 %644, %323
  %646 = sub i32 %645, %327
  %647 = add i32 %646, %329
  %648 = add i32 %647, %331
  %649 = sub i32 %648, %332
  %650 = sub i32 %649, %335
  %651 = add i32 %650, %336
  %652 = sub i32 %651, %337
  %653 = sub i32 %652, %338
  %654 = add i32 %653, %339
  %655 = add i32 %654, %341
  %656 = add i32 %655, %342
  %657 = add i32 %656, %344
  %658 = add i32 %657, %345
  %659 = add i32 %658, %346
  %660 = sub i32 %659, %349
  %661 = sub i32 %660, %354
  %662 = add i32 %661, %358
  %663 = add i32 %662, %359
  %664 = add i32 %663, %360
  %665 = add i32 %664, %362
  %666 = sub i32 %665, %370
  %667 = add i32 %666, %372
  %668 = sub i32 %667, %373
  %669 = add i32 %668, %375
  %670 = sub i32 %669, %376
  %671 = sub i32 %670, %187
  %672 = sub i32 %671, %379
  %673 = add i32 %672, %382
  %674 = sub i32 %673, %385
  %675 = sub i32 %674, %387
  %676 = add i32 %675, %390
  %677 = sub i32 %676, %392
  %678 = sub i32 %677, %393
  %679 = sub i32 %678, %397
  %680 = sub i32 %679, %400
  %681 = sub i32 %680, %141
  %682 = sub i32 %681, %144
  %683 = add i32 %682, %150
  %684 = add i32 %683, %168
  %685 = add i32 %684, %188
  %686 = sub i32 %685, %205
  %687 = add i32 %686, %213
  %688 = add i32 %687, %224
  %689 = sub i32 %688, %230
  %690 = sub i32 %689, %241
  %691 = sub i32 %690, %247
  %692 = sub i32 %691, %252
  %693 = sub i32 %692, %260
  %694 = sub i32 %693, %269
  %695 = add i32 %694, %272
  %696 = add i32 %695, %286
  %697 = add i32 %696, %289
  %698 = sub i32 %697, %304
  %699 = add i32 %698, %306
  %700 = add i32 %699, %312
  %701 = sub i32 %700, %318
  %702 = sub i32 %701, %320
  %703 = sub i32 %702, %340
  %704 = add i32 %703, %352
  %705 = sub i32 %704, %357
  %706 = add i32 %705, %365
  %707 = sub i32 %706, %384
  %708 = sub i32 %707, %388
  %709 = add i32 %708, %398
  %710 = add i32 %709, %404
  %711 = add i32 %710, %406
  %712 = add i32 %711, %408
  %713 = sub i32 %712, %410
  %714 = add i32 %713, %423
  %715 = sub i32 %714, %194
  %716 = add i32 %715, %425
  %717 = add i32 %716, %427
  %718 = add i32 %717, %429
  %719 = sub i32 %718, %266
  %720 = add i32 %719, %421
  %721 = add i32 %720, %417
  %722 = add i32 %721, %466
  %723 = icmp eq i32 %16, %722
  %724 = select i1 %723, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %725 = tail call i32 @puts(i8* nonnull dereferenceable(1) %724)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
