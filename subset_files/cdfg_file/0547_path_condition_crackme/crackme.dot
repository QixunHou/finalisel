digraph "DFG for'crackme' function" {
	Node0x1da9750[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1da9dd0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x1da9e40[shape=record, label="  %7 = and i32 %2, %1"];
	Node0x1da9ee0[shape=record, label="  %8 = or i32 %6, 1"];
	Node0x1da9f50[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x1da9ff0[shape=record, label="  %10 = xor i32 %0, -1"];
	Node0x1daa060[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1daa0d0[shape=record, label="  %12 = or i32 %11, 1"];
	Node0x1daa140[shape=record, label="  %13 = add i32 %12, %7"];
	Node0x1daa1b0[shape=record, label="  %14 = add i32 %13, %9"];
	Node0x1daa220[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x1daa290[shape=record, label="  %16 = xor i32 %2, -1"];
	Node0x1daa300[shape=record, label="  %17 = and i32 %16, %1"];
	Node0x1daa370[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x1daa3e0[shape=record, label="  %19 = shl i32 %1, 1"];
	Node0x1daa450[shape=record, label="  %20 = xor i32 %1, -1"];
	Node0x1daa4c0[shape=record, label="  %21 = or i32 %16, %1"];
	Node0x1daa560[shape=record, label="  %22 = shl i32 %5, 2"];
	Node0x1daa600[shape=record, label="  %23 = xor i32 %22, -4"];
	Node0x1daa670[shape=record, label="  %24 = shl i32 %17, 1"];
	Node0x1daa6e0[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x1daa750[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x1daa7c0[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x1daa830[shape=record, label="  %28 = or i32 %10, %3"];
	Node0x1daa8a0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x1daa910[shape=record, label="  %30 = or i32 %3, %0"];
	Node0x1daa980[shape=record, label="  %31 = xor i32 %3, -1"];
	Node0x1daa9f0[shape=record, label="  %32 = or i32 %31, %0"];
	Node0x1daac70[shape=record, label="  %33 = sub i32 %21, %30"];
	Node0x1daad10[shape=record, label="  %34 = mul i32 %33, 3"];
	Node0x1daad80[shape=record, label="  %35 = add i32 %30, %3"];
	Node0x1daadf0[shape=record, label="  %36 = shl i32 %35, 1"];
	Node0x1daae60[shape=record, label="  %37 = sub i32 2, %0"];
	Node0x1daaed0[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x1daaf40[shape=record, label="  %39 = sub i32 %38, %19"];
	Node0x1daafb0[shape=record, label="  %40 = add i32 %39, %16"];
	Node0x1dab020[shape=record, label="  %41 = sub i32 %40, %2"];
	Node0x1dab090[shape=record, label="  %42 = add i32 %41, %18"];
	Node0x1dab100[shape=record, label="  %43 = add i32 %42, %21"];
	Node0x1dab170[shape=record, label="  %44 = sub i32 %43, %24"];
	Node0x1dab1e0[shape=record, label="  %45 = sub i32 %44, %32"];
	Node0x1dab250[shape=record, label="  %46 = sub i32 %45, %9"];
	Node0x1dab2c0[shape=record, label="  %47 = sub i32 %46, %23"];
	Node0x1dab330[shape=record, label="  %48 = sub i32 %47, %29"];
	Node0x1dab3a0[shape=record, label="  %49 = add i32 %48, %27"];
	Node0x1dab410[shape=record, label="  %50 = add i32 %49, %34"];
	Node0x1dab480[shape=record, label="  %51 = add i32 %50, %36"];
	Node0x1dab4f0[shape=record, label="  %52 = icmp eq i32 %15, %51"];
	Node0x1d4a268[shape=record, label="  %53 = select i1 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1dab990[shape=record, label="  %54 = tail call i32 @puts(i8* nonnull dereferenceable(1) %53)"];
	Node0x1dab9e0[shape=record, label="  ret void"];
	Node0x1da9750 -> Node0x1da9dd0;
	Node0x1da9dd0 -> Node0x1da9e40;
	Node0x1da9e40 -> Node0x1da9ee0;
	Node0x1da9ee0 -> Node0x1da9f50;
	Node0x1da9f50 -> Node0x1da9ff0;
	Node0x1da9ff0 -> Node0x1daa060;
	Node0x1daa060 -> Node0x1daa0d0;
	Node0x1daa0d0 -> Node0x1daa140;
	Node0x1daa140 -> Node0x1daa1b0;
	Node0x1daa1b0 -> Node0x1daa220;
	Node0x1daa220 -> Node0x1daa290;
	Node0x1daa290 -> Node0x1daa300;
	Node0x1daa300 -> Node0x1daa370;
	Node0x1daa370 -> Node0x1daa3e0;
	Node0x1daa3e0 -> Node0x1daa450;
	Node0x1daa450 -> Node0x1daa4c0;
	Node0x1daa4c0 -> Node0x1daa560;
	Node0x1daa560 -> Node0x1daa600;
	Node0x1daa600 -> Node0x1daa670;
	Node0x1daa670 -> Node0x1daa6e0;
	Node0x1daa6e0 -> Node0x1daa750;
	Node0x1daa750 -> Node0x1daa7c0;
	Node0x1daa7c0 -> Node0x1daa830;
	Node0x1daa830 -> Node0x1daa8a0;
	Node0x1daa8a0 -> Node0x1daa910;
	Node0x1daa910 -> Node0x1daa980;
	Node0x1daa980 -> Node0x1daa9f0;
	Node0x1daa9f0 -> Node0x1daac70;
	Node0x1daac70 -> Node0x1daad10;
	Node0x1daad10 -> Node0x1daad80;
	Node0x1daad80 -> Node0x1daadf0;
	Node0x1daadf0 -> Node0x1daae60;
	Node0x1daae60 -> Node0x1daaed0;
	Node0x1daaed0 -> Node0x1daaf40;
	Node0x1daaf40 -> Node0x1daafb0;
	Node0x1daafb0 -> Node0x1dab020;
	Node0x1dab020 -> Node0x1dab090;
	Node0x1dab090 -> Node0x1dab100;
	Node0x1dab100 -> Node0x1dab170;
	Node0x1dab170 -> Node0x1dab1e0;
	Node0x1dab1e0 -> Node0x1dab250;
	Node0x1dab250 -> Node0x1dab2c0;
	Node0x1dab2c0 -> Node0x1dab330;
	Node0x1dab330 -> Node0x1dab3a0;
	Node0x1dab3a0 -> Node0x1dab410;
	Node0x1dab410 -> Node0x1dab480;
	Node0x1dab480 -> Node0x1dab4f0;
	Node0x1dab4f0 -> Node0x1d4a268;
	Node0x1d4a268 -> Node0x1dab990;
	Node0x1dab990 -> Node0x1dab9e0;
edge [color=red]
	Node0x1da9750 -> Node0x1da9dd0;
	Node0x1da9dd0 -> Node0x1da9ee0;
	Node0x1da9ff0 -> Node0x1daa060;
	Node0x1daa060 -> Node0x1daa0d0;
	Node0x1daa0d0 -> Node0x1daa140;
	Node0x1da9e40 -> Node0x1daa140;
	Node0x1daa140 -> Node0x1daa1b0;
	Node0x1da9f50 -> Node0x1daa1b0;
	Node0x1daa1b0 -> Node0x1daa220;
	Node0x1da9ee0 -> Node0x1daa220;
	Node0x1daa290 -> Node0x1daa300;
	Node0x1daa300 -> Node0x1daa370;
	Node0x1daa290 -> Node0x1daa4c0;
	Node0x1da9750 -> Node0x1daa560;
	Node0x1daa560 -> Node0x1daa600;
	Node0x1daa300 -> Node0x1daa670;
	Node0x1daa6e0 -> Node0x1daa750;
	Node0x1daa750 -> Node0x1daa7c0;
	Node0x1da9ff0 -> Node0x1daa830;
	Node0x1daa830 -> Node0x1daa8a0;
	Node0x1daa980 -> Node0x1daa9f0;
	Node0x1daa4c0 -> Node0x1daac70;
	Node0x1daa910 -> Node0x1daac70;
	Node0x1daac70 -> Node0x1daad10;
	Node0x1daa910 -> Node0x1daad80;
	Node0x1daad80 -> Node0x1daadf0;
	Node0x1daae60 -> Node0x1daaed0;
	Node0x1daa450 -> Node0x1daaed0;
	Node0x1daaed0 -> Node0x1daaf40;
	Node0x1daa3e0 -> Node0x1daaf40;
	Node0x1daaf40 -> Node0x1daafb0;
	Node0x1daa290 -> Node0x1daafb0;
	Node0x1daafb0 -> Node0x1dab020;
	Node0x1dab020 -> Node0x1dab090;
	Node0x1daa370 -> Node0x1dab090;
	Node0x1dab090 -> Node0x1dab100;
	Node0x1daa4c0 -> Node0x1dab100;
	Node0x1dab100 -> Node0x1dab170;
	Node0x1daa670 -> Node0x1dab170;
	Node0x1dab170 -> Node0x1dab1e0;
	Node0x1daa9f0 -> Node0x1dab1e0;
	Node0x1dab1e0 -> Node0x1dab250;
	Node0x1da9f50 -> Node0x1dab250;
	Node0x1dab250 -> Node0x1dab2c0;
	Node0x1daa600 -> Node0x1dab2c0;
	Node0x1dab2c0 -> Node0x1dab330;
	Node0x1daa8a0 -> Node0x1dab330;
	Node0x1dab330 -> Node0x1dab3a0;
	Node0x1daa7c0 -> Node0x1dab3a0;
	Node0x1dab3a0 -> Node0x1dab410;
	Node0x1daad10 -> Node0x1dab410;
	Node0x1dab410 -> Node0x1dab480;
	Node0x1daadf0 -> Node0x1dab480;
	Node0x1daa220 -> Node0x1dab4f0;
	Node0x1dab480 -> Node0x1dab4f0;
	Node0x1dab4f0 -> Node0x1d4a268;
	Node0x1d4a268 -> Node0x1dab990;
}
