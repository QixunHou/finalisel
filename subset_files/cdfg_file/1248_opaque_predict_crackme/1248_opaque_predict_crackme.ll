; ModuleID = '../.././c_source_file/1248_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1248_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %1
  %10 = mul i32 %9, -2
  %11 = or i32 %5, %3
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %4
  %14 = mul i32 %13, 3
  %15 = add i32 %14, %10
  %16 = xor i32 %2, -1
  %17 = or i32 %16, %0
  %18 = xor i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = and i32 %17, %19
  %21 = shl i32 %20, 1
  %22 = xor i32 %1, -1
  %23 = xor i32 %17, -1
  %24 = or i32 %23, %22
  %25 = shl i32 %24, 2
  %26 = or i32 %22, %0
  %27 = xor i32 %2, %0
  %28 = and i32 %27, %26
  %29 = or i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %27, -1
  %32 = or i32 %31, %30
  %33 = xor i32 %0, -1
  %34 = xor i32 %2, %1
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %33
  %37 = xor i32 %30, %2
  %38 = and i32 %19, %2
  %39 = shl i32 %38, 1
  %40 = and i32 %2, %0
  %41 = xor i32 %40, -1
  %42 = and i32 %1, %0
  %43 = or i32 %42, %16
  %44 = or i32 %8, %22
  %45 = or i32 %16, %1
  %46 = or i32 %45, %33
  %47 = and i32 %41, %1
  %48 = and i32 %22, %0
  %49 = or i32 %48, %35
  %50 = or i32 %35, %0
  %51 = and i32 %45, %0
  %52 = xor i32 %48, -1
  %53 = and i32 %27, %52
  %54 = shl i32 %53, 1
  %55 = xor i32 %42, -1
  %56 = and i32 %16, %55
  %57 = or i32 %2, %1
  %58 = or i32 %57, %33
  %59 = or i32 %42, %31
  %60 = and i32 %27, %18
  %61 = shl i32 %60, 1
  %62 = xor i32 %17, %1
  %63 = and i32 %2, %1
  %64 = xor i32 %63, -1
  %65 = xor i32 %64, %0
  %66 = and i32 %63, %0
  %67 = xor i32 %34, %0
  %68 = xor i32 %66, %67
  %69 = xor i32 %45, -1
  %70 = add i32 %45, 1
  %71 = xor i32 %40, %26
  %72 = and i32 %26, %2
  %73 = and i32 %27, %19
  %74 = xor i32 %57, %33
  %75 = xor i32 %74, %66
  %76 = and i32 %31, %55
  %77 = xor i32 %57, -1
  %78 = or i32 %42, %77
  %79 = xor i32 %26, -1
  %80 = or i32 %34, %79
  %81 = or i32 %27, %22
  %82 = shl i32 %81, 1
  %83 = and i32 %22, %2
  %84 = and i32 %83, %0
  %85 = or i32 %34, %0
  %86 = xor i32 %84, %85
  %87 = add i32 %27, 1
  %88 = and i32 %7, %1
  %89 = or i32 %16, %30
  %90 = and i32 %16, %0
  %91 = xor i32 %90, %1
  %92 = shl i32 %91, 1
  %93 = xor i32 %92, -2
  %94 = or i32 %40, %22
  %95 = or i32 %23, %19
  %96 = xor i32 %69, %0
  %97 = or i32 %90, %18
  %98 = and i32 %35, %52
  %99 = or i32 %77, %0
  %100 = xor i32 %66, %99
  %101 = and i32 %63, %33
  %102 = and i32 %34, %0
  %103 = or i32 %101, %102
  %104 = and i32 %18, %16
  %105 = shl i32 %40, 1
  %106 = and i32 %16, %1
  %107 = or i32 %106, %33
  %108 = or i32 %27, %1
  %109 = xor i32 %41, %1
  %110 = and i32 %7, %22
  %111 = or i32 %48, %2
  %112 = xor i32 %106, -1
  %113 = and i32 %112, %33
  %114 = and i32 %29, %35
  %115 = and i32 %29, %16
  %116 = or i32 %34, %33
  %117 = or i32 %57, %0
  %118 = or i32 %35, %30
  %119 = and i32 %27, %1
  %120 = and i32 %29, %2
  %121 = add i32 %18, 1
  %122 = and i32 %83, %33
  %123 = or i32 %22, %2
  %124 = and i32 %123, %0
  %125 = xor i32 %124, -1
  %126 = xor i32 %122, %125
  %127 = and i32 %34, %55
  %128 = or i32 %23, %1
  %129 = xor i32 %123, -1
  %130 = or i32 %129, %0
  %131 = xor i32 %84, %130
  %132 = and i32 %31, %1
  %133 = or i32 %18, %23
  %134 = or i32 %90, %1
  %135 = xor i32 %106, %0
  %136 = xor i32 %35, %0
  %137 = shl i32 %136, 1
  %138 = or i32 %77, %33
  %139 = and i32 %7, %18
  %140 = or i32 %40, %79
  %141 = xor i32 %23, %1
  %142 = and i32 %7, %19
  %143 = and i32 %41, %22
  %144 = or i32 %40, %106
  %145 = or i32 %19, %2
  %146 = or i32 %34, %42
  %147 = or i32 %69, %0
  %148 = and i32 %31, %19
  %149 = or i32 %90, %22
  %150 = and i32 %17, %1
  %151 = or i32 %40, %18
  %152 = and i32 %26, %31
  %153 = or i32 %40, %19
  %154 = xor i32 %48, %112
  %155 = or i32 %8, %19
  %156 = xor i32 %26, %2
  %157 = or i32 %27, %79
  %158 = xor i32 %67, -1
  %159 = or i32 %66, %158
  %160 = and i32 %31, %22
  %161 = and i32 %77, %33
  %162 = and i32 %106, %33
  %163 = mul i32 %162, -30
  %164 = and i32 %77, %0
  %165 = and i32 %106, %0
  %166 = mul i32 %165, -24
  %167 = and i32 %69, %33
  %168 = mul i32 %167, -11
  %169 = and i32 %69, %0
  %170 = mul i32 %66, -26
  %171 = xor i32 %5, -1
  %172 = and i32 %171, %3
  %173 = xor i32 %172, -1
  %174 = and i32 %173, %4
  %175 = and i32 %5, %4
  %176 = or i32 %175, %3
  %177 = xor i32 %3, -1
  %178 = and i32 %177, %4
  %179 = xor i32 %5, %4
  %180 = xor i32 %179, -1
  %181 = or i32 %178, %180
  %182 = or i32 %4, %3
  %183 = and i32 %182, %171
  %184 = shl i32 %183, 1
  %185 = xor i32 %5, %3
  %186 = xor i32 %185, -1
  %187 = or i32 %186, %4
  %188 = and i32 %171, %4
  %189 = or i32 %171, %3
  %190 = xor i32 %188, %189
  %191 = or i32 %171, %4
  %192 = xor i32 %191, %3
  %193 = and i32 %179, %3
  %194 = and i32 %179, %182
  %195 = xor i32 %182, %5
  %196 = and i32 %180, %3
  %197 = shl i32 %196, 1
  %198 = and i32 %5, %3
  %199 = or i32 %198, %178
  %200 = shl i32 %199, 1
  %201 = and i32 %182, %186
  %202 = xor i32 %172, %4
  %203 = xor i32 %188, -1
  %204 = xor i32 %4, %3
  %205 = and i32 %204, %203
  %206 = or i32 %188, %3
  %207 = shl i32 %206, 1
  %208 = xor i32 %4, -1
  %209 = and i32 %177, %5
  %210 = and i32 %209, %208
  %211 = or i32 %185, %208
  %212 = xor i32 %210, %211
  %213 = and i32 %182, %5
  %214 = xor i32 %178, %5
  %215 = and i32 %4, %3
  %216 = xor i32 %11, %215
  %217 = and i32 %198, %4
  %218 = and i32 %11, %208
  %219 = xor i32 %217, 2147483647
  %220 = xor i32 %219, %218
  %221 = and i32 %203, %177
  %222 = xor i32 %182, -1
  %223 = or i32 %180, %222
  %224 = xor i32 %178, -1
  %225 = xor i32 %224, %5
  %226 = and i32 %209, %4
  %227 = or i32 %177, %5
  %228 = xor i32 %227, %4
  %229 = or i32 %226, %228
  %230 = and i32 %11, %4
  %231 = xor i32 %204, -1
  %232 = or i32 %231, %5
  %233 = and i32 %191, %177
  %234 = and i32 %185, %208
  %235 = xor i32 %219, %234
  %236 = or i32 %171, %231
  %237 = xor i32 %203, %3
  %238 = xor i32 %189, -1
  %239 = or i32 %238, %208
  %240 = or i32 %215, %171
  %241 = and i32 %227, %4
  %242 = xor i32 %241, 2147483647
  %243 = xor i32 %242, %210
  %244 = xor i32 %11, %4
  %245 = xor i32 %198, %4
  %246 = shl i32 %245, 2
  %247 = xor i32 %175, %182
  %248 = or i32 %177, %4
  %249 = xor i32 %248, -1
  %250 = or i32 %185, %249
  %251 = or i32 %179, %3
  %252 = or i32 %204, %171
  %253 = shl i32 %252, 1
  %254 = xor i32 %191, -1
  %255 = or i32 %254, %231
  %256 = or i32 %185, %215
  %257 = or i32 %171, %249
  %258 = or i32 %179, %222
  %259 = or i32 %217, %218
  %260 = add i32 %4, 1
  %261 = or i32 %217, %244
  %262 = and i32 %185, %182
  %263 = shl i32 %262, 1
  %264 = or i32 %185, %222
  %265 = xor i32 %198, -1
  %266 = or i32 %265, %208
  %267 = and i32 %186, %208
  %268 = xor i32 %215, -1
  %269 = and i32 %185, %268
  %270 = shl i32 %269, 1
  %271 = xor i32 %185, %4
  %272 = or i32 %226, %271
  %273 = or i32 %175, %204
  %274 = shl i32 %273, 1
  %275 = and i32 %185, %4
  %276 = or i32 %5, %4
  %277 = xor i32 %276, -1
  %278 = or i32 %277, %3
  %279 = and i32 %204, %180
  %280 = and i32 %186, %224
  %281 = xor i32 %173, %4
  %282 = xor i32 %254, %3
  %283 = xor i32 %175, -1
  %284 = shl i32 %283, 1
  %285 = or i32 %180, %3
  %286 = or i32 %277, %177
  %287 = and i32 %227, %208
  %288 = xor i32 %287, -1
  %289 = xor i32 %226, %288
  %290 = and i32 %189, %4
  %291 = xor i32 %175, %11
  %292 = or i32 %178, %171
  %293 = or i32 %198, %4
  %294 = or i32 %185, %4
  %295 = xor i32 %217, %271
  %296 = xor i32 %248, %5
  %297 = or i32 %172, %208
  %298 = or i32 %179, %204
  %299 = and i32 %180, %224
  %300 = shl i32 %299, 1
  %301 = xor i32 %276, %215
  %302 = or i32 %188, %231
  %303 = shl i32 %302, 1
  %304 = or i32 %175, %172
  %305 = and i32 %231, %5
  %306 = shl i32 %305, 1
  %307 = or i32 %188, %204
  %308 = and i32 %179, %248
  %309 = and i32 %182, %180
  %310 = and i32 %179, %231
  %311 = shl i32 %310, 1
  %312 = xor i32 %188, %265
  %313 = and i32 %191, %204
  %314 = or i32 %249, %5
  %315 = or i32 %217, %234
  %316 = xor i32 %189, %4
  %317 = shl i32 %171, 1
  %318 = or i32 %204, %180
  %319 = or i32 %215, %277
  %320 = and i32 %180, %177
  %321 = or i32 %180, %177
  %322 = xor i32 %244, -1
  %323 = xor i32 %217, %322
  %324 = xor i32 %211, -1
  %325 = or i32 %210, %324
  %326 = and i32 %180, %268
  %327 = or i32 %178, %186
  %328 = and i32 %265, %4
  %329 = and i32 %191, %3
  %330 = and i32 %179, %224
  %331 = and i32 %198, %208
  %332 = or i32 %331, %230
  %333 = or i32 %188, %198
  %334 = xor i32 %283, %3
  %335 = shl i32 %334, 1
  %336 = xor i32 %222, %5
  %337 = or i32 %215, %180
  %338 = and i32 %276, %177
  %339 = or i32 %226, %287
  %340 = or i32 %331, %275
  %341 = and i32 %276, %204
  %342 = and i32 %203, %3
  %343 = xor i32 %230, 2147483647
  %344 = xor i32 %343, %331
  %345 = and i32 %248, %5
  %346 = xor i32 %228, 2147483647
  %347 = xor i32 %346, %226
  %348 = shl i32 %347, 1
  %349 = or i32 %186, %222
  %350 = or i32 %175, %249
  %351 = or i32 %179, %249
  %352 = or i32 %215, %254
  %353 = or i32 %215, %186
  %354 = and i32 %12, %208
  %355 = mul i32 %354, -22
  %356 = and i32 %172, %208
  %357 = and i32 %12, %4
  %358 = shl i32 %357, 1
  %359 = and i32 %172, %4
  %360 = shl i32 %359, 2
  %361 = and i32 %238, %208
  %362 = shl i32 %361, 3
  %363 = mul i32 %331, -25
  %364 = and i32 %238, %4
  %365 = mul i32 %217, -10
  %366 = add i32 %34, %41
  %367 = add i32 %366, %143
  %368 = add i32 %367, %135
  %369 = sub i32 %368, %76
  %370 = add i32 %369, %181
  %371 = add i32 %370, %230
  %372 = mul i32 %371, 5
  %373 = sub i32 %37, %169
  %374 = add i32 %373, %336
  %375 = sub i32 %374, %356
  %376 = mul i32 %375, 3
  %377 = add i32 %161, %164
  %378 = add i32 %377, %364
  %379 = mul i32 %378, -20
  %380 = add i32 %44, %115
  %381 = add i32 %380, %216
  %382 = shl i32 %381, 2
  %383 = sub i32 -3, %2
  %384 = add i32 %383, %43
  %385 = add i32 %384, %160
  %386 = add i32 %385, %146
  %387 = add i32 %386, %133
  %388 = add i32 %387, %95
  %389 = add i32 %388, %94
  %390 = add i32 %389, %73
  %391 = add i32 %390, %265
  %392 = add i32 %391, %180
  %393 = add i32 %392, %186
  %394 = add i32 %393, %351
  %395 = add i32 %394, %328
  %396 = add i32 %395, %318
  %397 = add i32 %396, %301
  %398 = add i32 %397, %297
  %399 = add i32 %398, %290
  %400 = add i32 %399, %192
  %401 = add i32 %400, %187
  %402 = add i32 %401, %261
  %403 = add i32 %402, %229
  %404 = add i32 %403, %243
  %405 = add i32 %404, %344
  %406 = add i32 %405, %235
  %407 = add i32 %406, %220
  %408 = shl i32 %407, 1
  %409 = shl i32 %0, 1
  %410 = add i32 %409, 3
  %411 = sub i32 %410, %48
  %412 = add i32 %411, %52
  %413 = add i32 %412, %121
  %414 = add i32 %413, %56
  %415 = add i32 %414, %70
  %416 = sub i32 %415, %72
  %417 = add i32 %416, %87
  %418 = sub i32 %417, %89
  %419 = sub i32 %418, %104
  %420 = sub i32 %419, %111
  %421 = add i32 %420, %64
  %422 = sub i32 %421, %120
  %423 = sub i32 %422, %90
  %424 = add i32 %423, %106
  %425 = add i32 %424, %145
  %426 = add i32 %425, %156
  %427 = add i32 %426, %45
  %428 = sub i32 %427, %28
  %429 = add i32 %428, %32
  %430 = add i32 %429, %36
  %431 = sub i32 %430, %39
  %432 = sub i32 %431, %46
  %433 = sub i32 %432, %47
  %434 = add i32 %433, %49
  %435 = sub i32 %434, %50
  %436 = sub i32 %435, %51
  %437 = add i32 %436, %58
  %438 = add i32 %437, %59
  %439 = sub i32 %438, %62
  %440 = add i32 %439, %65
  %441 = add i32 %440, %71
  %442 = add i32 %441, %78
  %443 = sub i32 %442, %80
  %444 = sub i32 %443, %88
  %445 = add i32 %444, %96
  %446 = add i32 %445, %97
  %447 = add i32 %446, %98
  %448 = sub i32 %447, %105
  %449 = sub i32 %448, %107
  %450 = sub i32 %449, %108
  %451 = sub i32 %450, %109
  %452 = sub i32 %451, %110
  %453 = sub i32 %452, %113
  %454 = sub i32 %453, %114
  %455 = sub i32 %454, %116
  %456 = add i32 %455, %117
  %457 = add i32 %456, %118
  %458 = sub i32 %457, %119
  %459 = sub i32 %458, %99
  %460 = sub i32 %459, %127
  %461 = sub i32 %460, %128
  %462 = add i32 %461, %132
  %463 = add i32 %462, %134
  %464 = sub i32 %463, %138
  %465 = add i32 %464, %139
  %466 = sub i32 %465, %140
  %467 = add i32 %466, %141
  %468 = add i32 %467, %142
  %469 = add i32 %468, %144
  %470 = sub i32 %469, %147
  %471 = add i32 %470, %148
  %472 = sub i32 %471, %149
  %473 = add i32 %472, %150
  %474 = sub i32 %473, %151
  %475 = sub i32 %474, %152
  %476 = sub i32 %475, %153
  %477 = add i32 %476, %91
  %478 = add i32 %477, %154
  %479 = add i32 %478, %155
  %480 = sub i32 %479, %157
  %481 = add i32 %480, %101
  %482 = add i32 %481, %260
  %483 = sub i32 %482, %25
  %484 = add i32 %483, %21
  %485 = sub i32 %484, %54
  %486 = sub i32 %485, %61
  %487 = sub i32 %486, %68
  %488 = add i32 %487, %75
  %489 = sub i32 %488, %82
  %490 = add i32 %489, %86
  %491 = sub i32 %490, %100
  %492 = add i32 %491, %103
  %493 = sub i32 %492, %126
  %494 = add i32 %493, %131
  %495 = sub i32 %494, %137
  %496 = add i32 %495, %159
  %497 = add i32 %496, %163
  %498 = add i32 %497, %166
  %499 = add i32 %498, %168
  %500 = add i32 %499, %170
  %501 = add i32 %500, %5
  %502 = add i32 %501, %249
  %503 = sub i32 %502, %178
  %504 = sub i32 %503, %93
  %505 = add i32 %504, %195
  %506 = add i32 %505, %213
  %507 = add i32 %506, %214
  %508 = sub i32 %507, %225
  %509 = sub i32 %508, %232
  %510 = add i32 %509, %175
  %511 = sub i32 %510, %236
  %512 = add i32 %511, %240
  %513 = sub i32 %512, %257
  %514 = sub i32 %513, %185
  %515 = add i32 %514, %11
  %516 = sub i32 %515, %292
  %517 = add i32 %516, %296
  %518 = add i32 %517, %172
  %519 = sub i32 %518, %276
  %520 = add i32 %519, %203
  %521 = add i32 %520, %314
  %522 = sub i32 %521, %179
  %523 = sub i32 %522, %317
  %524 = add i32 %523, %191
  %525 = sub i32 %524, %345
  %526 = sub i32 %525, %174
  %527 = sub i32 %526, %176
  %528 = sub i32 %527, %184
  %529 = sub i32 %528, %190
  %530 = add i32 %529, %193
  %531 = sub i32 %530, %194
  %532 = sub i32 %531, %201
  %533 = add i32 %532, %202
  %534 = sub i32 %533, %205
  %535 = add i32 %534, %221
  %536 = add i32 %535, %223
  %537 = sub i32 %536, %233
  %538 = add i32 %537, %237
  %539 = add i32 %538, %239
  %540 = add i32 %539, %244
  %541 = add i32 %540, %247
  %542 = sub i32 %541, %250
  %543 = add i32 %542, %251
  %544 = sub i32 %543, %253
  %545 = add i32 %544, %255
  %546 = sub i32 %545, %256
  %547 = add i32 %546, %258
  %548 = add i32 %547, %264
  %549 = sub i32 %548, %266
  %550 = sub i32 %549, %267
  %551 = add i32 %550, %275
  %552 = sub i32 %551, %278
  %553 = sub i32 %552, %279
  %554 = add i32 %553, %280
  %555 = sub i32 %554, %281
  %556 = sub i32 %555, %282
  %557 = sub i32 %556, %284
  %558 = sub i32 %557, %234
  %559 = sub i32 %558, %285
  %560 = sub i32 %559, %286
  %561 = add i32 %560, %291
  %562 = add i32 %561, %293
  %563 = add i32 %562, %211
  %564 = sub i32 %563, %294
  %565 = sub i32 %564, %298
  %566 = sub i32 %565, %304
  %567 = sub i32 %566, %306
  %568 = add i32 %567, %307
  %569 = sub i32 %568, %308
  %570 = sub i32 %569, %218
  %571 = sub i32 %570, %309
  %572 = add i32 %571, %312
  %573 = sub i32 %572, %313
  %574 = add i32 %573, %316
  %575 = add i32 %574, %319
  %576 = sub i32 %575, %320
  %577 = sub i32 %576, %321
  %578 = add i32 %577, %326
  %579 = add i32 %578, %327
  %580 = add i32 %579, %329
  %581 = sub i32 %580, %330
  %582 = sub i32 %581, %333
  %583 = sub i32 %582, %337
  %584 = add i32 %583, %338
  %585 = sub i32 %584, %341
  %586 = add i32 %585, %342
  %587 = add i32 %586, %349
  %588 = add i32 %587, %350
  %589 = add i32 %588, %352
  %590 = add i32 %589, %353
  %591 = sub i32 %590, %197
  %592 = sub i32 %591, %200
  %593 = sub i32 %592, %207
  %594 = add i32 %593, %212
  %595 = sub i32 %594, %246
  %596 = add i32 %595, %259
  %597 = sub i32 %596, %263
  %598 = sub i32 %597, %270
  %599 = sub i32 %598, %272
  %600 = sub i32 %599, %274
  %601 = sub i32 %600, %289
  %602 = add i32 %601, %295
  %603 = sub i32 %602, %300
  %604 = sub i32 %603, %303
  %605 = sub i32 %604, %311
  %606 = sub i32 %605, %315
  %607 = add i32 %606, %323
  %608 = add i32 %607, %325
  %609 = add i32 %608, %332
  %610 = sub i32 %609, %335
  %611 = sub i32 %610, %339
  %612 = add i32 %611, %340
  %613 = add i32 %612, %355
  %614 = sub i32 %613, %358
  %615 = sub i32 %614, %360
  %616 = sub i32 %615, %362
  %617 = add i32 %616, %363
  %618 = add i32 %617, %365
  %619 = sub i32 %618, %348
  %620 = add i32 %619, %379
  %621 = add i32 %620, %382
  %622 = add i32 %621, %376
  %623 = add i32 %622, %372
  %624 = add i32 %623, %408
  %625 = icmp eq i32 %15, %624
  %626 = select i1 %625, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %627 = tail call i32 @puts(i8* nonnull dereferenceable(1) %626)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
