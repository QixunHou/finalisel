; ModuleID = '../.././c_source_file/0801_path_condition_crackme.c'
source_filename = "../.././c_source_file/0801_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = sub i32 %6, %3
  %9 = xor i32 %4, %3
  %10 = xor i32 %4, -1
  %11 = and i32 %10, %3
  %12 = shl i32 %11, 1
  %13 = xor i32 %12, -2
  %14 = and i32 %4, %3
  %15 = shl i32 %14, 1
  %16 = xor i32 %15, -2
  %17 = shl i32 %9, 1
  %18 = xor i32 %17, -2
  %19 = add i32 %4, 1
  %20 = or i32 %4, %3
  %21 = xor i32 %3, -1
  %22 = and i32 %21, %4
  %23 = shl i32 %20, 2
  %24 = xor i32 %23, -4
  %25 = xor i32 %0, -1
  %26 = and i32 %2, %1
  %27 = and i32 %26, %25
  %28 = and i32 %6, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %27, %29
  %31 = xor i32 %1, -1
  %32 = add i32 %1, 1
  %33 = and i32 %1, %0
  %34 = xor i32 %2, -1
  %35 = or i32 %34, %1
  %36 = xor i32 %35, -1
  %37 = or i32 %33, %36
  %38 = and i32 %26, %0
  %39 = and i32 %6, %25
  %40 = or i32 %38, %39
  %41 = and i32 %35, %25
  %42 = xor i32 %33, -1
  %43 = and i32 %7, %42
  %44 = and i32 %31, %2
  %45 = and i32 %44, %0
  %46 = or i32 %31, %2
  %47 = xor i32 %46, %25
  %48 = xor i32 %47, %45
  %49 = xor i32 %36, %0
  %50 = and i32 %2, %0
  %51 = xor i32 %50, %1
  %52 = or i32 %2, %1
  %53 = and i32 %52, %25
  %54 = or i32 %52, %0
  %55 = xor i32 %26, -1
  %56 = and i32 %55, %25
  %57 = or i32 %33, %7
  %58 = and i32 %31, %0
  %59 = xor i32 %58, -1
  %60 = xor i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = and i32 %61, %59
  %63 = and i32 %59, %2
  %64 = or i32 %34, %0
  %65 = and i32 %64, %31
  %66 = and i32 %34, %1
  %67 = xor i32 %66, -1
  %68 = xor i32 %67, %0
  %69 = and i32 %34, %0
  %70 = and i32 %7, %25
  %71 = xor i32 %58, %55
  %72 = or i32 %2, %0
  %73 = xor i32 %72, %33
  %74 = xor i32 %6, %0
  %75 = or i32 %45, %74
  %76 = xor i32 %1, %0
  %77 = and i32 %76, %61
  %78 = xor i32 %72, %1
  %79 = shl i32 %33, 1
  %80 = xor i32 %69, -1
  %81 = add i32 %69, 1
  %82 = xor i32 %52, -1
  %83 = xor i32 %82, %0
  %84 = or i32 %33, %82
  %85 = xor i32 %50, -1
  %86 = xor i32 %85, %1
  %87 = and i32 %52, %0
  %88 = or i32 %31, %0
  %89 = xor i32 %88, -1
  %90 = or i32 %34, %89
  %91 = and i32 %61, %42
  %92 = xor i32 %38, %74
  %93 = xor i32 %76, -1
  %94 = or i32 %61, %93
  %95 = and i32 %88, %7
  %96 = or i32 %1, %0
  %97 = and i32 %96, %2
  %98 = xor i32 %96, -1
  %99 = xor i32 %98, %2
  %100 = or i32 %33, %34
  %101 = and i32 %76, %85
  %102 = and i32 %80, %1
  %103 = or i32 %61, %1
  %104 = and i32 %44, %25
  %105 = and i32 %7, %0
  %106 = or i32 %104, %105
  %107 = xor i32 %26, %0
  %108 = and i32 %42, %2
  %109 = or i32 %50, %93
  %110 = or i32 %7, %89
  %111 = or i32 %6, %98
  %112 = or i32 %35, %0
  %113 = xor i32 %50, %52
  %114 = and i32 %6, %59
  %115 = xor i32 %74, -1
  %116 = or i32 %38, %115
  %117 = xor i32 %52, %33
  %118 = xor i32 %53, -1
  %119 = xor i32 %38, %118
  %120 = and i32 %76, %2
  %121 = shl i32 %36, 1
  %122 = and i32 %6, %42
  %123 = and i32 %60, %88
  %124 = or i32 %66, %58
  %125 = and i32 %7, %59
  %126 = or i32 %98, %2
  %127 = or i32 %76, %34
  %128 = or i32 %69, %76
  %129 = and i32 %64, %76
  %130 = xor i32 %58, %2
  %131 = and i32 %61, %93
  %132 = or i32 %6, %0
  %133 = or i32 %27, %28
  %134 = or i32 %36, %0
  %135 = shl i32 %134, 1
  %136 = or i32 %52, %25
  %137 = and i32 %6, %88
  %138 = or i32 %60, %76
  %139 = or i32 %69, %93
  %140 = xor i32 %52, %0
  %141 = and i32 %96, %34
  %142 = and i32 %76, %34
  %143 = and i32 %34, %59
  %144 = or i32 %60, %58
  %145 = or i32 %36, %25
  %146 = xor i32 %88, %2
  %147 = and i32 %34, %93
  %148 = or i32 %55, %0
  %149 = xor i32 %69, %55
  %150 = or i32 %61, %31
  %151 = or i32 %50, %82
  %152 = and i32 %85, %1
  %153 = or i32 %67, %0
  %154 = or i32 %82, %25
  %155 = or i32 %66, %0
  %156 = xor i32 %140, 1073741823
  %157 = xor i32 %156, %38
  %158 = shl i32 %157, 2
  %159 = or i32 %50, %1
  %160 = and i32 %72, %1
  %161 = or i32 %76, %61
  %162 = shl i32 %161, 1
  %163 = or i32 %6, %33
  %164 = and i32 %6, %96
  %165 = xor i32 %45, %132
  %166 = xor i32 %66, %0
  %167 = xor i32 %132, -1
  %168 = or i32 %45, %167
  %169 = xor i32 %50, %88
  %170 = and i32 %96, %7
  %171 = and i32 %46, %0
  %172 = or i32 %104, %171
  %173 = shl i32 %172, 1
  %174 = and i32 %88, %61
  %175 = or i32 %26, %0
  %176 = xor i32 %72, -1
  %177 = or i32 %176, %93
  %178 = and i32 %72, %76
  %179 = or i32 %38, %140
  %180 = or i32 %7, %98
  %181 = and i32 %88, %2
  %182 = and i32 %34, %42
  %183 = and i32 %67, %0
  %184 = xor i32 %80, %1
  %185 = add i32 %72, 1
  %186 = or i32 %38, %53
  %187 = shl i32 %186, 1
  %188 = xor i32 %64, -1
  %189 = or i32 %188, %93
  %190 = or i32 %50, %66
  %191 = or i32 %7, %25
  %192 = shl i32 %191, 1
  %193 = or i32 %58, %7
  %194 = or i32 %60, %33
  %195 = and i32 %61, %31
  %196 = xor i32 %64, %1
  %197 = or i32 %69, %26
  %198 = shl i32 %197, 1
  %199 = xor i32 %46, -1
  %200 = or i32 %199, %0
  %201 = xor i32 %45, %200
  %202 = and i32 %60, %1
  %203 = xor i32 %50, %67
  %204 = or i32 %55, %25
  %205 = shl i32 %204, 1
  %206 = or i32 %89, %2
  %207 = and i32 %82, %25
  %208 = and i32 %66, %25
  %209 = mul i32 %208, -7
  %210 = and i32 %82, %0
  %211 = mul i32 %210, -10
  %212 = and i32 %66, %0
  %213 = mul i32 %212, 17
  %214 = and i32 %36, %25
  %215 = shl i32 %214, 3
  %216 = and i32 %36, %0
  %217 = sub i32 -2, %96
  %218 = add i32 %217, %206
  %219 = add i32 %218, %127
  %220 = add i32 %219, %69
  %221 = add i32 %220, %63
  %222 = add i32 %221, %163
  %223 = add i32 %222, %144
  %224 = add i32 %223, %110
  %225 = add i32 %224, %95
  %226 = add i32 %225, %91
  %227 = add i32 %226, %78
  %228 = add i32 %227, %70
  %229 = add i32 %228, %179
  %230 = shl i32 %229, 1
  %231 = sub i32 %190, %38
  %232 = add i32 %231, %137
  %233 = sub i32 %232, %136
  %234 = sub i32 %233, %57
  %235 = sub i32 %234, %22
  %236 = sub i32 %235, %116
  %237 = mul i32 %236, 5
  %238 = sub i32 %216, %14
  %239 = mul i32 %238, 6
  %240 = add i32 %27, %207
  %241 = mul i32 %240, 11
  %242 = sub i32 %150, %109
  %243 = mul i32 %242, 3
  %244 = sub i32 %32, %0
  %245 = add i32 %244, %1
  %246 = add i32 %245, %93
  %247 = add i32 %246, %34
  %248 = add i32 %247, %88
  %249 = sub i32 %248, %79
  %250 = add i32 %249, %81
  %251 = sub i32 %250, %72
  %252 = sub i32 %251, %6
  %253 = sub i32 %252, %90
  %254 = sub i32 %253, %97
  %255 = sub i32 %254, %99
  %256 = add i32 %255, %100
  %257 = add i32 %256, %108
  %258 = add i32 %257, %120
  %259 = add i32 %258, %126
  %260 = add i32 %259, %130
  %261 = sub i32 %260, %141
  %262 = add i32 %261, %142
  %263 = add i32 %262, %143
  %264 = sub i32 %263, %64
  %265 = add i32 %264, %66
  %266 = add i32 %265, %146
  %267 = sub i32 %266, %147
  %268 = sub i32 %267, %181
  %269 = sub i32 %268, %182
  %270 = add i32 %269, %185
  %271 = add i32 %270, %19
  %272 = add i32 %271, %4
  %273 = sub i32 %272, %37
  %274 = sub i32 %273, %41
  %275 = sub i32 %274, %43
  %276 = add i32 %275, %49
  %277 = sub i32 %276, %51
  %278 = add i32 %277, %53
  %279 = add i32 %278, %54
  %280 = sub i32 %279, %56
  %281 = add i32 %280, %62
  %282 = add i32 %281, %65
  %283 = add i32 %282, %68
  %284 = add i32 %283, %39
  %285 = sub i32 %284, %71
  %286 = add i32 %285, %73
  %287 = add i32 %286, %77
  %288 = add i32 %287, %83
  %289 = add i32 %288, %84
  %290 = add i32 %289, %86
  %291 = add i32 %290, %87
  %292 = add i32 %291, %94
  %293 = sub i32 %292, %101
  %294 = add i32 %293, %102
  %295 = sub i32 %294, %103
  %296 = add i32 %295, %105
  %297 = sub i32 %296, %107
  %298 = add i32 %297, %74
  %299 = sub i32 %298, %111
  %300 = sub i32 %299, %112
  %301 = sub i32 %300, %113
  %302 = sub i32 %301, %114
  %303 = add i32 %302, %117
  %304 = sub i32 %303, %121
  %305 = add i32 %304, %122
  %306 = add i32 %305, %123
  %307 = sub i32 %306, %124
  %308 = add i32 %307, %125
  %309 = sub i32 %308, %128
  %310 = sub i32 %309, %129
  %311 = add i32 %310, %131
  %312 = sub i32 %311, %132
  %313 = add i32 %312, %138
  %314 = sub i32 %313, %139
  %315 = add i32 %314, %140
  %316 = sub i32 %315, %145
  %317 = add i32 %316, %148
  %318 = sub i32 %317, %149
  %319 = add i32 %318, %151
  %320 = sub i32 %319, %152
  %321 = add i32 %320, %153
  %322 = sub i32 %321, %154
  %323 = add i32 %322, %155
  %324 = sub i32 %323, %159
  %325 = sub i32 %324, %160
  %326 = sub i32 %325, %164
  %327 = sub i32 %326, %166
  %328 = sub i32 %327, %169
  %329 = add i32 %328, %170
  %330 = add i32 %329, %174
  %331 = add i32 %330, %175
  %332 = add i32 %331, %177
  %333 = add i32 %332, %178
  %334 = add i32 %333, %180
  %335 = add i32 %334, %183
  %336 = sub i32 %335, %184
  %337 = sub i32 %336, %189
  %338 = add i32 %337, %193
  %339 = sub i32 %338, %194
  %340 = add i32 %339, %195
  %341 = sub i32 %340, %196
  %342 = sub i32 %341, %202
  %343 = add i32 %342, %203
  %344 = sub i32 %343, %9
  %345 = add i32 %344, %20
  %346 = add i32 %345, %22
  %347 = sub i32 %346, %11
  %348 = sub i32 %347, %30
  %349 = add i32 %348, %40
  %350 = add i32 %349, %48
  %351 = sub i32 %350, %75
  %352 = add i32 %351, %92
  %353 = sub i32 %352, %106
  %354 = sub i32 %353, %119
  %355 = sub i32 %354, %133
  %356 = sub i32 %355, %135
  %357 = sub i32 %356, %162
  %358 = add i32 %357, %165
  %359 = sub i32 %358, %168
  %360 = sub i32 %359, %192
  %361 = sub i32 %360, %198
  %362 = add i32 %361, %201
  %363 = sub i32 %362, %205
  %364 = add i32 %363, %209
  %365 = add i32 %364, %211
  %366 = add i32 %365, %213
  %367 = sub i32 %366, %215
  %368 = sub i32 %367, %173
  %369 = sub i32 %368, %187
  %370 = add i32 %369, %241
  %371 = add i32 %370, %243
  %372 = add i32 %371, %13
  %373 = add i32 %372, %16
  %374 = add i32 %373, %18
  %375 = sub i32 %374, %24
  %376 = sub i32 %375, %158
  %377 = add i32 %376, %239
  %378 = add i32 %377, %237
  %379 = add i32 %378, %230
  %380 = icmp eq i32 %8, %379
  %381 = select i1 %380, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %382 = tail call i32 @puts(i8* nonnull dereferenceable(1) %381)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
