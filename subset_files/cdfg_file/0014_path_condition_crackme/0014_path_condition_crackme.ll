; ModuleID = '../.././c_source_file/0014_path_condition_crackme.c'
source_filename = "../.././c_source_file/0014_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = add i32 %6, 1
  %8 = xor i32 %4, -1
  %9 = or i32 %8, %3
  %10 = shl i32 %9, 1
  %11 = sub i32 %7, %10
  %12 = and i32 %2, %1
  %13 = and i32 %12, %0
  %14 = or i32 %2, %1
  %15 = xor i32 %14, %0
  %16 = xor i32 %15, 2147483647
  %17 = xor i32 %16, %13
  %18 = shl i32 %17, 1
  %19 = add i32 %11, %18
  %20 = xor i32 %8, %3
  %21 = or i32 %4, %3
  %22 = shl i32 %21, 2
  %23 = xor i32 %22, -4
  %24 = and i32 %8, %3
  %25 = shl i32 %24, 1
  %26 = xor i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %2, %0
  %29 = or i32 %28, %27
  %30 = and i32 %28, %27
  %31 = and i32 %1, %0
  %32 = or i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %31, %33
  %35 = or i32 %31, %2
  %36 = shl i32 %35, 1
  %37 = xor i32 %2, -1
  %38 = or i32 %37, %1
  %39 = xor i32 %38, -1
  %40 = xor i32 %39, %0
  %41 = or i32 %1, %0
  %42 = xor i32 %28, -1
  %43 = and i32 %41, %42
  %44 = or i32 %37, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %1
  %47 = xor i32 %44, %1
  %48 = xor i32 %1, -1
  %49 = or i32 %48, %0
  %50 = and i32 %49, %2
  %51 = or i32 %38, %0
  %52 = and i32 %48, %0
  %53 = and i32 %37, %1
  %54 = or i32 %53, %52
  %55 = or i32 %52, %42
  %56 = xor i32 %2, %1
  %57 = and i32 %56, %41
  %58 = and i32 %2, %0
  %59 = xor i32 %0, -1
  %60 = xor i32 %58, -1
  %61 = and i32 %26, %60
  %62 = xor i32 %52, -1
  %63 = and i32 %28, %62
  %64 = shl i32 %41, 1
  %65 = and i32 %28, %41
  %66 = and i32 %37, %0
  %67 = xor i32 %66, -1
  %68 = and i32 %67, %27
  %69 = xor i32 %41, -1
  %70 = xor i32 %56, -1
  %71 = or i32 %70, %69
  %72 = and i32 %44, %27
  %73 = or i32 %38, %59
  %74 = xor i32 %12, -1
  %75 = xor i32 %52, %74
  %76 = xor i32 %49, -1
  %77 = or i32 %37, %76
  %78 = or i32 %56, %76
  %79 = and i32 %28, %49
  %80 = shl i32 %79, 1
  %81 = or i32 %52, %37
  %82 = or i32 %58, %76
  %83 = and i32 %48, %2
  %84 = and i32 %83, %0
  %85 = or i32 %48, %2
  %86 = xor i32 %85, %0
  %87 = or i32 %84, %86
  %88 = xor i32 %58, %1
  %89 = or i32 %76, %2
  %90 = xor i32 %14, -1
  %91 = or i32 %58, %90
  %92 = xor i32 %60, %1
  %93 = add i32 %66, 1
  %94 = or i32 %70, %59
  %95 = xor i32 %67, %1
  %96 = and i32 %14, %59
  %97 = xor i32 %31, -1
  %98 = or i32 %56, %52
  %99 = or i32 %52, %2
  %100 = and i32 %74, %0
  %101 = and i32 %42, %97
  %102 = and i32 %38, %59
  %103 = and i32 %44, %26
  %104 = shl i32 %76, 1
  %105 = and i32 %14, %0
  %106 = shl i32 %105, 1
  %107 = and i32 %70, %97
  %108 = and i32 %85, %59
  %109 = or i32 %84, %108
  %110 = shl i32 %109, 1
  %111 = or i32 %39, %59
  %112 = or i32 %28, %52
  %113 = and i32 %32, %1
  %114 = xor i32 %31, %2
  %115 = xor i32 %56, %0
  %116 = xor i32 %13, %115
  %117 = or i32 %14, %59
  %118 = and i32 %83, %59
  %119 = or i32 %56, %59
  %120 = xor i32 %119, -1
  %121 = or i32 %118, %120
  %122 = add i32 %52, 1
  %123 = and i32 %70, %62
  %124 = and i32 %12, %59
  %125 = or i32 %124, %105
  %126 = and i32 %56, %59
  %127 = or i32 %37, %69
  %128 = xor i32 %105, 2147483647
  %129 = xor i32 %128, %124
  %130 = add i32 %0, 1
  %131 = or i32 %33, %1
  %132 = xor i32 %32, %31
  %133 = shl i32 %132, 1
  %134 = or i32 %28, %48
  %135 = and i32 %37, %27
  %136 = and i32 %42, %1
  %137 = and i32 %56, %49
  %138 = shl i32 %137, 1
  %139 = or i32 %66, %26
  %140 = or i32 %53, %59
  %141 = and i32 %42, %62
  %142 = shl i32 %141, 1
  %143 = or i32 %28, %69
  %144 = and i32 %38, %0
  %145 = shl i32 %144, 1
  %146 = shl i32 %53, 1
  %147 = xor i32 %108, 2147483647
  %148 = xor i32 %147, %84
  %149 = shl i32 %148, 1
  %150 = or i32 %26, %45
  %151 = or i32 %12, %59
  %152 = and i32 %56, %0
  %153 = xor i32 %152, -1
  %154 = xor i32 %124, %153
  %155 = or i32 %13, %15
  %156 = or i32 %52, %70
  %157 = xor i32 %115, -1
  %158 = or i32 %13, %157
  %159 = or i32 %70, %0
  %160 = or i32 %31, %90
  %161 = or i32 %33, %48
  %162 = or i32 %31, %45
  %163 = or i32 %42, %69
  %164 = shl i32 %163, 2
  %165 = xor i32 %53, -1
  %166 = and i32 %165, %59
  %167 = xor i32 %58, %14
  %168 = shl i32 %167, 1
  %169 = or i32 %42, %27
  %170 = and i32 %28, %48
  %171 = xor i32 %33, %1
  %172 = or i32 %74, %0
  %173 = or i32 %66, %1
  %174 = xor i32 %58, %165
  %175 = xor i32 %97, %2
  %176 = xor i32 %66, %38
  %177 = or i32 %56, %0
  %178 = or i32 %90, %0
  %179 = shl i32 %178, 1
  %180 = xor i32 %165, %0
  %181 = or i32 %84, %115
  %182 = and i32 %26, %42
  %183 = and i32 %37, %97
  %184 = or i32 %58, %48
  %185 = xor i32 %53, %0
  %186 = and i32 %28, %26
  %187 = or i32 %66, %27
  %188 = or i32 %66, %48
  %189 = and i32 %44, %48
  %190 = and i32 %26, %67
  %191 = shl i32 %190, 2
  %192 = and i32 %49, %70
  %193 = or i32 %12, %52
  %194 = shl i32 %69, 1
  %195 = and i32 %62, %2
  %196 = shl i32 %2, 1
  %197 = xor i32 %66, %74
  %198 = and i32 %56, %62
  %199 = and i32 %32, %26
  %200 = xor i32 %66, %1
  %201 = and i32 %165, %0
  %202 = and i32 %85, %0
  %203 = xor i32 %202, 2147483647
  %204 = xor i32 %203, %118
  %205 = add i32 %53, 1
  %206 = or i32 %27, %2
  %207 = and i32 %60, %1
  %208 = xor i32 %44, %31
  %209 = or i32 %28, %1
  %210 = xor i32 %84, %177
  %211 = shl i32 %210, 1
  %212 = or i32 %31, %39
  %213 = and i32 %70, %0
  %214 = and i32 %41, %2
  %215 = xor i32 %14, %31
  %216 = and i32 %28, %97
  %217 = shl i32 %216, 1
  %218 = or i32 %53, %0
  %219 = or i32 %58, %26
  %220 = xor i32 %76, %2
  %221 = or i32 %31, %37
  %222 = xor i32 %38, %0
  %223 = and i32 %32, %48
  %224 = or i32 %124, %152
  %225 = add i32 %12, 1
  %226 = xor i32 %45, %1
  %227 = shl i32 %226, 1
  %228 = and i32 %67, %48
  %229 = xor i32 %177, -1
  %230 = or i32 %84, %229
  %231 = and i32 %70, %59
  %232 = add i32 %28, 1
  %233 = or i32 %13, %96
  %234 = xor i32 %62, %2
  %235 = shl i32 %234, 1
  %236 = xor i32 %58, %41
  %237 = xor i32 %41, %2
  %238 = or i32 %69, %2
  %239 = xor i32 %58, %49
  %240 = or i32 %42, %48
  %241 = and i32 %97, %2
  %242 = xor i32 %49, %2
  %243 = and i32 %56, %97
  %244 = and i32 %90, %59
  %245 = and i32 %53, %59
  %246 = mul i32 %245, -14
  %247 = and i32 %90, %0
  %248 = mul i32 %247, -19
  %249 = and i32 %53, %0
  %250 = shl i32 %249, 4
  %251 = and i32 %39, %59
  %252 = and i32 %39, %0
  %253 = add i32 %44, %52
  %254 = add i32 %253, %32
  %255 = add i32 %254, %99
  %256 = add i32 %255, %15
  %257 = add i32 %256, %207
  %258 = add i32 %257, %189
  %259 = add i32 %258, %180
  %260 = add i32 %259, %174
  %261 = add i32 %260, %173
  %262 = add i32 %261, %101
  %263 = add i32 %262, %73
  %264 = add i32 %263, %57
  %265 = add i32 %264, %40
  %266 = add i32 %265, %34
  %267 = add i32 %266, %233
  %268 = add i32 %267, %129
  %269 = add i32 %268, %204
  %270 = shl i32 %269, 1
  %271 = sub i32 %252, %239
  %272 = add i32 %271, %161
  %273 = add i32 %272, %139
  %274 = add i32 %273, %126
  %275 = sub i32 %274, %88
  %276 = mul i32 %275, 5
  %277 = add i32 %124, %251
  %278 = add i32 %277, %95
  %279 = shl i32 %278, 2
  %280 = sub i32 %13, %244
  %281 = mul i32 %280, 6
  %282 = sub i32 %55, %125
  %283 = mul i32 %282, 3
  %284 = add i32 %130, %0
  %285 = add i32 %284, %48
  %286 = add i32 %285, %97
  %287 = add i32 %286, %122
  %288 = add i32 %287, %27
  %289 = add i32 %288, %37
  %290 = sub i32 %289, %3
  %291 = sub i32 %290, %50
  %292 = sub i32 %291, %64
  %293 = sub i32 %292, %77
  %294 = sub i32 %293, %81
  %295 = add i32 %294, %89
  %296 = add i32 %295, %93
  %297 = add i32 %296, %58
  %298 = sub i32 %297, %104
  %299 = sub i32 %298, %114
  %300 = sub i32 %299, %127
  %301 = add i32 %300, %135
  %302 = add i32 %301, %175
  %303 = sub i32 %302, %183
  %304 = sub i32 %303, %194
  %305 = sub i32 %304, %195
  %306 = sub i32 %305, %196
  %307 = add i32 %306, %205
  %308 = sub i32 %307, %206
  %309 = add i32 %308, %214
  %310 = add i32 %309, %220
  %311 = sub i32 %310, %221
  %312 = add i32 %311, %225
  %313 = add i32 %312, %232
  %314 = add i32 %313, %237
  %315 = sub i32 %314, %238
  %316 = sub i32 %315, %241
  %317 = sub i32 %316, %242
  %318 = sub i32 %317, %4
  %319 = sub i32 %318, %29
  %320 = add i32 %319, %30
  %321 = sub i32 %320, %36
  %322 = add i32 %321, %43
  %323 = add i32 %322, %46
  %324 = add i32 %323, %47
  %325 = sub i32 %324, %51
  %326 = sub i32 %325, %54
  %327 = add i32 %326, %61
  %328 = sub i32 %327, %63
  %329 = add i32 %328, %65
  %330 = sub i32 %329, %68
  %331 = add i32 %330, %71
  %332 = add i32 %331, %72
  %333 = sub i32 %332, %75
  %334 = add i32 %333, %78
  %335 = add i32 %334, %82
  %336 = sub i32 %335, %91
  %337 = sub i32 %336, %92
  %338 = sub i32 %337, %94
  %339 = sub i32 %338, %96
  %340 = sub i32 %339, %98
  %341 = add i32 %340, %100
  %342 = add i32 %341, %102
  %343 = add i32 %342, %103
  %344 = add i32 %343, %107
  %345 = sub i32 %344, %111
  %346 = add i32 %345, %112
  %347 = sub i32 %346, %113
  %348 = add i32 %347, %117
  %349 = sub i32 %348, %123
  %350 = add i32 %349, %131
  %351 = add i32 %350, %134
  %352 = add i32 %351, %136
  %353 = add i32 %352, %140
  %354 = sub i32 %353, %143
  %355 = sub i32 %354, %146
  %356 = sub i32 %355, %150
  %357 = sub i32 %356, %151
  %358 = add i32 %357, %156
  %359 = sub i32 %358, %159
  %360 = sub i32 %359, %160
  %361 = add i32 %360, %162
  %362 = add i32 %361, %166
  %363 = add i32 %362, %169
  %364 = sub i32 %363, %170
  %365 = add i32 %364, %171
  %366 = add i32 %365, %172
  %367 = sub i32 %366, %176
  %368 = sub i32 %367, %177
  %369 = sub i32 %368, %182
  %370 = add i32 %369, %184
  %371 = sub i32 %370, %185
  %372 = add i32 %371, %152
  %373 = add i32 %372, %186
  %374 = sub i32 %373, %187
  %375 = add i32 %374, %188
  %376 = add i32 %375, %192
  %377 = sub i32 %376, %193
  %378 = add i32 %377, %197
  %379 = sub i32 %378, %198
  %380 = sub i32 %379, %199
  %381 = sub i32 %380, %119
  %382 = add i32 %381, %200
  %383 = add i32 %382, %201
  %384 = add i32 %383, %208
  %385 = add i32 %384, %209
  %386 = sub i32 %385, %212
  %387 = sub i32 %386, %213
  %388 = sub i32 %387, %215
  %389 = sub i32 %388, %218
  %390 = add i32 %389, %219
  %391 = add i32 %390, %222
  %392 = sub i32 %391, %223
  %393 = sub i32 %392, %228
  %394 = add i32 %393, %231
  %395 = sub i32 %394, %235
  %396 = add i32 %395, %236
  %397 = add i32 %396, %240
  %398 = add i32 %397, %243
  %399 = add i32 %398, %20
  %400 = sub i32 %399, %6
  %401 = sub i32 %400, %80
  %402 = sub i32 %401, %87
  %403 = sub i32 %402, %106
  %404 = add i32 %403, %116
  %405 = add i32 %404, %121
  %406 = sub i32 %405, %133
  %407 = sub i32 %406, %138
  %408 = sub i32 %407, %142
  %409 = sub i32 %408, %145
  %410 = add i32 %409, %154
  %411 = add i32 %410, %155
  %412 = sub i32 %411, %158
  %413 = sub i32 %412, %164
  %414 = sub i32 %413, %168
  %415 = sub i32 %414, %179
  %416 = add i32 %415, %181
  %417 = sub i32 %416, %191
  %418 = sub i32 %417, %217
  %419 = sub i32 %418, %224
  %420 = sub i32 %419, %227
  %421 = add i32 %420, %230
  %422 = add i32 %421, %246
  %423 = add i32 %422, %248
  %424 = add i32 %423, %250
  %425 = sub i32 %424, %25
  %426 = sub i32 %425, %110
  %427 = sub i32 %426, %211
  %428 = add i32 %427, %281
  %429 = sub i32 %428, %23
  %430 = sub i32 %429, %149
  %431 = add i32 %430, %279
  %432 = add i32 %431, %283
  %433 = add i32 %432, %276
  %434 = add i32 %433, %270
  %435 = icmp eq i32 %19, %434
  %436 = select i1 %435, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %437 = tail call i32 @puts(i8* nonnull dereferenceable(1) %436)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
