; ModuleID = '../.././c_source_file/0216_path_condition_crackme.c'
source_filename = "../.././c_source_file/0216_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %0
  %8 = xor i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = and i32 %7, %9
  %11 = xor i32 %0, -1
  %12 = and i32 %2, %1
  %13 = and i32 %12, %11
  %14 = or i32 %2, %1
  %15 = and i32 %14, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %13, %16
  %18 = sub i32 %10, %17
  %19 = or i32 %4, %3
  %20 = xor i32 %5, %3
  %21 = and i32 %20, %19
  %22 = add i32 %18, %21
  %23 = xor i32 %2, -1
  %24 = and i32 %23, %0
  %25 = or i32 %24, %8
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %11
  %29 = xor i32 %14, -1
  %30 = or i32 %29, %0
  %31 = and i32 %2, %0
  %32 = or i32 %31, %29
  %33 = and i32 %1, %0
  %34 = xor i32 %2, %0
  %35 = or i32 %34, %33
  %36 = and i32 %26, %11
  %37 = shl i32 %36, 1
  %38 = xor i32 %1, -1
  %39 = and i32 %38, %2
  %40 = and i32 %39, %11
  %41 = or i32 %26, %11
  %42 = xor i32 %40, %41
  %43 = and i32 %39, %0
  %44 = or i32 %26, %0
  %45 = xor i32 %43, %44
  %46 = xor i32 %34, -1
  %47 = or i32 %33, %46
  %48 = and i32 %7, %1
  %49 = or i32 %1, %0
  %50 = and i32 %26, %49
  %51 = and i32 %23, %1
  %52 = xor i32 %51, -1
  %53 = add i32 %51, 1
  %54 = or i32 %38, %0
  %55 = and i32 %26, %54
  %56 = xor i32 %7, -1
  %57 = xor i32 %56, %1
  %58 = and i32 %38, %0
  %59 = or i32 %58, %2
  %60 = xor i32 %58, -1
  %61 = and i32 %34, %60
  %62 = or i32 %23, %1
  %63 = and i32 %62, %0
  %64 = xor i32 %54, -1
  %65 = xor i32 %64, %2
  %66 = shl i32 %65, 1
  %67 = xor i32 %33, %2
  %68 = and i32 %12, %0
  %69 = and i32 %14, %11
  %70 = or i32 %68, %69
  %71 = xor i32 %27, %0
  %72 = xor i32 %49, -1
  %73 = xor i32 %72, %2
  %74 = and i32 %27, %0
  %75 = or i32 %38, %2
  %76 = and i32 %75, %0
  %77 = xor i32 %76, -1
  %78 = xor i32 %40, %77
  %79 = xor i32 %54, %2
  %80 = or i32 %56, %9
  %81 = xor i32 %33, -1
  %82 = and i32 %27, %81
  %83 = and i32 %34, %81
  %84 = xor i32 %62, -1
  %85 = xor i32 %44, -1
  %86 = or i32 %43, %85
  %87 = and i32 %26, %60
  %88 = or i32 %58, %23
  %89 = or i32 %51, %0
  %90 = and i32 %46, %9
  %91 = and i32 %34, %9
  %92 = or i32 %33, %23
  %93 = xor i32 %31, -1
  %94 = and i32 %8, %93
  %95 = shl i32 %94, 1
  %96 = xor i32 %62, %33
  %97 = shl i32 %96, 1
  %98 = xor i32 %52, %0
  %99 = shl i32 %98, 1
  %100 = or i32 %31, %64
  %101 = and i32 %8, %46
  %102 = or i32 %9, %2
  %103 = or i32 %23, %0
  %104 = or i32 %26, %33
  %105 = or i32 %52, %0
  %106 = or i32 %51, %11
  %107 = shl i32 %106, 1
  %108 = or i32 %34, %38
  %109 = xor i32 %7, %33
  %110 = and i32 %93, %1
  %111 = shl i32 %110, 1
  %112 = or i32 %52, %11
  %113 = or i32 %26, %72
  %114 = xor i32 %14, %33
  %115 = xor i32 %31, %49
  %116 = shl i32 %49, 1
  %117 = or i32 %56, %38
  %118 = or i32 %12, %0
  %119 = and i32 %52, %0
  %120 = shl i32 %119, 1
  %121 = or i32 %31, %38
  %122 = xor i32 %24, -1
  %123 = add i32 %24, 1
  %124 = and i32 %34, %38
  %125 = xor i32 %103, -1
  %126 = or i32 %33, %84
  %127 = shl i32 %126, 1
  %128 = or i32 %33, %56
  %129 = and i32 %54, %23
  %130 = xor i32 %12, -1
  %131 = xor i32 %24, %130
  %132 = shl i32 %131, 2
  %133 = or i32 %62, %11
  %134 = or i32 %27, %64
  %135 = or i32 %34, %8
  %136 = shl i32 %135, 1
  %137 = xor i32 %84, %0
  %138 = and i32 %26, %0
  %139 = and i32 %93, %38
  %140 = and i32 %62, %11
  %141 = or i32 %46, %9
  %142 = shl i32 %81, 1
  %143 = or i32 %12, %11
  %144 = or i32 %72, %2
  %145 = or i32 %23, %64
  %146 = and i32 %49, %2
  %147 = or i32 %40, %76
  %148 = or i32 %8, %56
  %149 = and i32 %103, %9
  %150 = or i32 %62, %0
  %151 = and i32 %130, %11
  %152 = shl i32 %151, 1
  %153 = or i32 %24, %1
  %154 = xor i32 %58, %2
  %155 = or i32 %58, %27
  %156 = xor i32 %24, %1
  %157 = xor i32 %58, %52
  %158 = add i32 %34, 1
  %159 = xor i32 %26, %0
  %160 = or i32 %68, %36
  %161 = and i32 %7, %8
  %162 = shl i32 %161, 1
  %163 = or i32 %46, %64
  %164 = shl i32 %163, 1
  %165 = xor i32 %125, %1
  %166 = and i32 %54, %46
  %167 = and i32 %130, %0
  %168 = or i32 %51, %58
  %169 = xor i32 %31, %14
  %170 = or i32 %8, %46
  %171 = and i32 %46, %60
  %172 = or i32 %8, %125
  %173 = and i32 %49, %46
  %174 = or i32 %27, %72
  %175 = or i32 %8, %23
  %176 = or i32 %46, %72
  %177 = xor i32 %75, -1
  %178 = or i32 %177, %0
  %179 = xor i32 %43, %178
  %180 = or i32 %58, %46
  %181 = xor i32 %12, %0
  %182 = xor i32 %75, %11
  %183 = xor i32 %182, %43
  %184 = or i32 %31, %9
  %185 = xor i32 %14, %0
  %186 = xor i32 %185, -1
  %187 = xor i32 %68, %186
  %188 = or i32 %31, %72
  %189 = and i32 %122, %38
  %190 = or i32 %33, %27
  %191 = and i32 %46, %1
  %192 = shl i32 %191, 1
  %193 = or i32 %33, %2
  %194 = or i32 %56, %1
  %195 = or i32 %130, %0
  %196 = or i32 %34, %1
  %197 = or i32 %13, %138
  %198 = and i32 %7, %38
  %199 = and i32 %103, %1
  %200 = xor i32 %49, %2
  %201 = or i32 %26, %64
  %202 = xor i32 %31, %1
  %203 = and i32 %23, %60
  %204 = and i32 %29, %11
  %205 = and i32 %51, %11
  %206 = and i32 %29, %0
  %207 = and i32 %51, %0
  %208 = and i32 %84, %11
  %209 = shl i32 %13, 3
  %210 = and i32 %84, %0
  %211 = mul i32 %210, 11
  %212 = or i32 %5, %4
  %213 = xor i32 %4, %3
  %214 = xor i32 %213, -1
  %215 = and i32 %212, %214
  %216 = xor i32 %5, %4
  %217 = xor i32 %216, -1
  %218 = or i32 %217, %214
  %219 = and i32 %4, %3
  %220 = xor i32 %5, -1
  %221 = or i32 %220, %4
  %222 = xor i32 %221, -1
  %223 = or i32 %219, %222
  %224 = and i32 %220, %4
  %225 = and i32 %213, %220
  %226 = shl i32 %225, 1
  %227 = xor i32 %224, -1
  %228 = and i32 %227, %3
  %229 = shl i32 %228, 1
  %230 = xor i32 %4, -1
  %231 = and i32 %20, %230
  %232 = and i32 %5, %3
  %233 = and i32 %232, %4
  %234 = or i32 %5, %3
  %235 = xor i32 %234, %4
  %236 = xor i32 %233, -1
  %237 = xor i32 %235, %236
  %238 = xor i32 %232, -1
  %239 = or i32 %238, %4
  %240 = xor i32 %3, -1
  %241 = or i32 %240, %4
  %242 = xor i32 %241, -1
  %243 = or i32 %217, %242
  %244 = and i32 %220, %3
  %245 = or i32 %244, %4
  %246 = shl i32 %245, 1
  %247 = and i32 %5, %4
  %248 = xor i32 %244, -1
  %249 = xor i32 %247, %248
  %250 = or i32 %238, %230
  %251 = or i32 %216, %214
  %252 = xor i32 %212, -1
  %253 = add i32 %212, 1
  %254 = and i32 %240, %4
  %255 = xor i32 %254, -1
  %256 = and i32 %255, %5
  %257 = xor i32 %20, -1
  %258 = or i32 %219, %257
  %259 = shl i32 %258, 1
  %260 = xor i32 %242, %5
  %261 = xor i32 %247, -1
  %262 = and i32 %213, %261
  %263 = and i32 %220, %255
  %264 = and i32 %248, %4
  %265 = or i32 %220, %214
  %266 = or i32 %220, %3
  %267 = xor i32 %266, %4
  %268 = xor i32 %234, -1
  %269 = xor i32 %20, %4
  %270 = xor i32 %233, %269
  %271 = and i32 %213, %217
  %272 = or i32 %219, %220
  %273 = and i32 %216, %255
  %274 = and i32 %217, %214
  %275 = and i32 %240, %5
  %276 = and i32 %275, %4
  %277 = or i32 %240, %5
  %278 = and i32 %277, %230
  %279 = or i32 %276, %278
  %280 = xor i32 %19, -1
  %281 = or i32 %217, %280
  %282 = xor i32 %227, %3
  %283 = or i32 %257, %4
  %284 = or i32 %216, %242
  %285 = and i32 %217, %255
  %286 = xor i32 %266, -1
  %287 = xor i32 %286, %4
  %288 = shl i32 %287, 1
  %289 = or i32 %268, %230
  %290 = xor i32 %276, -1
  %291 = xor i32 %278, %290
  %292 = xor i32 %244, %4
  %293 = or i32 %234, %230
  %294 = xor i32 %255, %5
  %295 = xor i32 %254, %5
  %296 = shl i32 %295, 1
  %297 = or i32 %257, %242
  %298 = xor i32 %219, -1
  %299 = and i32 %220, %298
  %300 = and i32 %213, %5
  %301 = xor i32 %234, %219
  %302 = and i32 %232, %230
  %303 = and i32 %234, %4
  %304 = xor i32 %303, -1
  %305 = xor i32 %302, %304
  %306 = or i32 %219, %268
  %307 = and i32 %216, %240
  %308 = shl i32 %307, 1
  %309 = or i32 %254, %5
  %310 = or i32 %213, %217
  %311 = or i32 %247, %268
  %312 = or i32 %224, %286
  %313 = and i32 %298, %5
  %314 = and i32 %238, %230
  %315 = shl i32 %314, 1
  %316 = and i32 %19, %217
  %317 = xor i32 %222, %3
  %318 = and i32 %217, %240
  %319 = or i32 %222, %240
  %320 = add i32 %232, 1
  %321 = and i32 %20, %4
  %322 = or i32 %302, %321
  %323 = or i32 %252, %240
  %324 = and i32 %266, %230
  %325 = or i32 %247, %214
  %326 = or i32 %224, %3
  %327 = or i32 %247, %240
  %328 = or i32 %247, %244
  %329 = and i32 %20, %255
  %330 = and i32 %257, %255
  %331 = shl i32 %20, 2
  %332 = or i32 %216, %219
  %333 = or i32 %213, %5
  %334 = shl i32 %333, 1
  %335 = and i32 %213, %227
  %336 = or i32 %224, %240
  %337 = and i32 %275, %230
  %338 = xor i32 %20, 2147483647
  %339 = and i32 %338, %4
  %340 = or i32 %339, %337
  %341 = and i32 %19, %5
  %342 = shl i32 %286, 1
  %343 = and i32 %19, %220
  %344 = or i32 %232, %230
  %345 = or i32 %214, %5
  %346 = xor i32 %254, %238
  %347 = or i32 %248, %230
  %348 = and i32 %241, %257
  %349 = or i32 %268, %4
  %350 = or i32 %216, %240
  %351 = and i32 %234, %230
  %352 = xor i32 %351, %236
  %353 = or i32 %266, %4
  %354 = add i32 %244, 1
  %355 = shl i32 %261, 1
  %356 = and i32 %216, %19
  %357 = xor i32 %212, %3
  %358 = and i32 %248, %230
  %359 = or i32 %219, %252
  %360 = or i32 %20, %242
  %361 = and i32 %277, %4
  %362 = xor i32 %361, -1
  %363 = xor i32 %337, %362
  %364 = xor i32 %224, %3
  %365 = or i32 %224, %232
  %366 = or i32 %219, %286
  %367 = or i32 %280, %5
  %368 = shl i32 %367, 1
  %369 = xor i32 %247, %234
  %370 = and i32 %216, %213
  %371 = xor i32 %19, %5
  %372 = and i32 %20, %298
  %373 = or i32 %337, %361
  %374 = and i32 %241, %5
  %375 = shl i32 %374, 1
  %376 = xor i32 %221, %219
  %377 = or i32 %247, %213
  %378 = or i32 %220, %280
  %379 = xor i32 %298, %5
  %380 = xor i32 %232, %4
  %381 = shl i32 %380, 2
  %382 = xor i32 %241, %5
  %383 = or i32 %242, %5
  %384 = and i32 %221, %214
  %385 = or i32 %254, %257
  %386 = and i32 %220, %214
  %387 = xor i32 %269, %290
  %388 = or i32 %20, %280
  %389 = or i32 %213, %220
  %390 = or i32 %234, %4
  %391 = or i32 %216, %213
  %392 = xor i32 %266, %219
  %393 = xor i32 %224, %238
  %394 = or i32 %222, %3
  %395 = and i32 %266, %4
  %396 = or i32 %254, %220
  %397 = or i32 %257, %280
  %398 = or i32 %266, %230
  %399 = shl i32 %398, 1
  %400 = xor i32 %247, %3
  %401 = or i32 %220, %242
  %402 = or i32 %286, %230
  %403 = and i32 %238, %4
  %404 = and i32 %216, %241
  %405 = or i32 %286, %4
  %406 = and i32 %261, %3
  %407 = or i32 %20, %4
  %408 = and i32 %257, %4
  %409 = xor i32 %224, %266
  %410 = or i32 %213, %252
  %411 = and i32 %261, %240
  %412 = or i32 %252, %3
  %413 = shl i32 %412, 1
  %414 = and i32 %268, %230
  %415 = and i32 %244, %230
  %416 = shl i32 %415, 2
  %417 = and i32 %268, %4
  %418 = and i32 %244, %4
  %419 = shl i32 %418, 4
  %420 = and i32 %286, %230
  %421 = mul i32 %420, 22
  %422 = shl i32 %302, 1
  %423 = and i32 %286, %4
  %424 = add i32 %125, %3
  %425 = add i32 %424, %56
  %426 = add i32 %425, %34
  %427 = add i32 %426, %156
  %428 = add i32 %427, %143
  %429 = add i32 %428, %139
  %430 = add i32 %429, %108
  %431 = add i32 %430, %147
  %432 = add i32 %431, %379
  %433 = add i32 %432, %263
  %434 = add i32 %433, %411
  %435 = add i32 %434, %400
  %436 = add i32 %435, %366
  %437 = add i32 %436, %356
  %438 = add i32 %437, %326
  %439 = add i32 %438, %324
  %440 = add i32 %439, %323
  %441 = add i32 %440, %318
  %442 = add i32 %441, %316
  %443 = add i32 %442, %311
  %444 = add i32 %443, %289
  %445 = add i32 %444, %285
  %446 = add i32 %445, %340
  %447 = shl i32 %446, 1
  %448 = add i32 %165, %175
  %449 = sub i32 %448, %153
  %450 = sub i32 %449, %272
  %451 = sub i32 %450, %360
  %452 = add i32 %451, %423
  %453 = add i32 %452, %297
  %454 = add i32 %453, %243
  %455 = mul i32 %454, 3
  %456 = add i32 %207, %68
  %457 = add i32 %456, %205
  %458 = add i32 %457, %80
  %459 = add i32 %458, %257
  %460 = add i32 %459, %265
  %461 = sub i32 %460, %394
  %462 = mul i32 %461, 5
  %463 = add i32 %160, %195
  %464 = add i32 %463, %370
  %465 = add i32 %464, %410
  %466 = shl i32 %465, 2
  %467 = add i32 %414, %208
  %468 = mul i32 %467, -13
  %469 = sub i32 %206, %417
  %470 = mul i32 %469, 9
  %471 = sub i32 -4, %0
  %472 = sub i32 %471, %1
  %473 = sub i32 %472, %33
  %474 = sub i32 %473, %8
  %475 = add i32 %474, %9
  %476 = add i32 %475, %23
  %477 = add i32 %476, %64
  %478 = add i32 %477, %53
  %479 = sub i32 %478, %59
  %480 = sub i32 %479, %67
  %481 = add i32 %480, %73
  %482 = sub i32 %481, %31
  %483 = sub i32 %482, %79
  %484 = add i32 %483, %84
  %485 = sub i32 %484, %88
  %486 = sub i32 %485, %26
  %487 = sub i32 %486, %92
  %488 = add i32 %487, %93
  %489 = sub i32 %488, %102
  %490 = add i32 %489, %103
  %491 = sub i32 %490, %116
  %492 = add i32 %491, %12
  %493 = add i32 %492, %123
  %494 = sub i32 %493, %129
  %495 = add i32 %494, %7
  %496 = add i32 %495, %27
  %497 = sub i32 %496, %14
  %498 = sub i32 %497, %142
  %499 = add i32 %498, %144
  %500 = add i32 %499, %145
  %501 = sub i32 %500, %146
  %502 = sub i32 %501, %154
  %503 = add i32 %502, %51
  %504 = add i32 %503, %158
  %505 = add i32 %504, %193
  %506 = add i32 %505, %200
  %507 = sub i32 %506, %203
  %508 = add i32 %507, %240
  %509 = sub i32 %508, %28
  %510 = add i32 %509, %25
  %511 = sub i32 %510, %30
  %512 = sub i32 %511, %32
  %513 = sub i32 %512, %35
  %514 = sub i32 %513, %47
  %515 = add i32 %514, %48
  %516 = add i32 %515, %50
  %517 = add i32 %516, %55
  %518 = sub i32 %517, %57
  %519 = sub i32 %518, %61
  %520 = sub i32 %519, %63
  %521 = sub i32 %520, %66
  %522 = add i32 %521, %71
  %523 = add i32 %522, %74
  %524 = sub i32 %523, %82
  %525 = add i32 %524, %83
  %526 = sub i32 %525, %87
  %527 = sub i32 %526, %89
  %528 = add i32 %527, %90
  %529 = add i32 %528, %91
  %530 = add i32 %529, %100
  %531 = sub i32 %530, %101
  %532 = sub i32 %531, %104
  %533 = add i32 %532, %105
  %534 = add i32 %533, %41
  %535 = sub i32 %534, %109
  %536 = add i32 %535, %112
  %537 = sub i32 %536, %113
  %538 = add i32 %537, %114
  %539 = sub i32 %538, %15
  %540 = sub i32 %539, %115
  %541 = add i32 %540, %117
  %542 = sub i32 %541, %118
  %543 = sub i32 %542, %121
  %544 = sub i32 %543, %124
  %545 = sub i32 %544, %128
  %546 = add i32 %545, %133
  %547 = sub i32 %546, %134
  %548 = sub i32 %547, %137
  %549 = add i32 %548, %138
  %550 = sub i32 %549, %140
  %551 = add i32 %550, %141
  %552 = sub i32 %551, %148
  %553 = sub i32 %552, %149
  %554 = add i32 %553, %150
  %555 = add i32 %554, %155
  %556 = add i32 %555, %157
  %557 = sub i32 %556, %159
  %558 = add i32 %557, %166
  %559 = sub i32 %558, %167
  %560 = add i32 %559, %168
  %561 = add i32 %560, %169
  %562 = sub i32 %561, %170
  %563 = sub i32 %562, %171
  %564 = add i32 %563, %172
  %565 = add i32 %564, %173
  %566 = sub i32 %565, %174
  %567 = add i32 %566, %176
  %568 = sub i32 %567, %180
  %569 = sub i32 %568, %181
  %570 = add i32 %569, %184
  %571 = add i32 %570, %188
  %572 = sub i32 %571, %189
  %573 = sub i32 %572, %190
  %574 = add i32 %573, %185
  %575 = sub i32 %574, %194
  %576 = add i32 %575, %196
  %577 = add i32 %576, %198
  %578 = sub i32 %577, %199
  %579 = sub i32 %578, %201
  %580 = add i32 %579, %202
  %581 = add i32 %580, %204
  %582 = sub i32 %581, %37
  %583 = add i32 %582, %42
  %584 = sub i32 %583, %45
  %585 = add i32 %584, %70
  %586 = add i32 %585, %78
  %587 = sub i32 %586, %86
  %588 = sub i32 %587, %95
  %589 = sub i32 %588, %97
  %590 = sub i32 %589, %99
  %591 = sub i32 %590, %107
  %592 = sub i32 %591, %111
  %593 = sub i32 %592, %120
  %594 = sub i32 %593, %127
  %595 = sub i32 %594, %132
  %596 = sub i32 %595, %136
  %597 = sub i32 %596, %152
  %598 = sub i32 %597, %162
  %599 = sub i32 %598, %164
  %600 = sub i32 %599, %179
  %601 = add i32 %600, %183
  %602 = sub i32 %601, %187
  %603 = sub i32 %602, %192
  %604 = add i32 %603, %197
  %605 = add i32 %604, %209
  %606 = add i32 %605, %211
  %607 = add i32 %606, %213
  %608 = add i32 %607, %19
  %609 = add i32 %608, %254
  %610 = add i32 %609, %213
  %611 = add i32 %610, 4
  %612 = sub i32 %611, %224
  %613 = add i32 %612, %253
  %614 = sub i32 %613, %256
  %615 = add i32 %614, %260
  %616 = add i32 %615, %294
  %617 = sub i32 %616, %299
  %618 = add i32 %617, %300
  %619 = sub i32 %618, %244
  %620 = add i32 %619, %309
  %621 = add i32 %620, %313
  %622 = add i32 %621, %320
  %623 = add i32 %622, %227
  %624 = sub i32 %623, %216
  %625 = add i32 %624, %341
  %626 = sub i32 %625, %266
  %627 = sub i32 %626, %343
  %628 = sub i32 %627, %345
  %629 = add i32 %628, %354
  %630 = add i32 %629, %232
  %631 = sub i32 %630, %371
  %632 = add i32 %631, %378
  %633 = add i32 %632, %217
  %634 = add i32 %633, %382
  %635 = sub i32 %634, %383
  %636 = add i32 %635, %386
  %637 = sub i32 %636, %389
  %638 = add i32 %637, %396
  %639 = sub i32 %638, %401
  %640 = sub i32 %639, %215
  %641 = sub i32 %640, %218
  %642 = add i32 %641, %223
  %643 = sub i32 %642, %226
  %644 = add i32 %643, %231
  %645 = add i32 %644, %239
  %646 = sub i32 %645, %249
  %647 = sub i32 %646, %250
  %648 = add i32 %647, %251
  %649 = add i32 %648, %262
  %650 = sub i32 %649, %264
  %651 = sub i32 %650, %267
  %652 = sub i32 %651, %271
  %653 = add i32 %652, %273
  %654 = sub i32 %653, %274
  %655 = add i32 %654, %281
  %656 = add i32 %655, %282
  %657 = sub i32 %656, %283
  %658 = add i32 %657, %284
  %659 = sub i32 %658, %292
  %660 = add i32 %659, %293
  %661 = sub i32 %660, %296
  %662 = add i32 %661, %301
  %663 = add i32 %662, %306
  %664 = sub i32 %663, %310
  %665 = add i32 %664, %312
  %666 = add i32 %665, %317
  %667 = sub i32 %666, %319
  %668 = add i32 %667, %235
  %669 = sub i32 %668, %325
  %670 = add i32 %669, %269
  %671 = sub i32 %670, %327
  %672 = add i32 %671, %328
  %673 = sub i32 %672, %329
  %674 = add i32 %673, %330
  %675 = sub i32 %674, %331
  %676 = sub i32 %675, %332
  %677 = sub i32 %676, %334
  %678 = sub i32 %677, %335
  %679 = sub i32 %678, %336
  %680 = sub i32 %679, %342
  %681 = add i32 %680, %344
  %682 = sub i32 %681, %346
  %683 = sub i32 %682, %347
  %684 = sub i32 %683, %348
  %685 = sub i32 %684, %349
  %686 = add i32 %685, %350
  %687 = add i32 %686, %353
  %688 = sub i32 %687, %355
  %689 = add i32 %688, %357
  %690 = sub i32 %689, %358
  %691 = sub i32 %690, %359
  %692 = sub i32 %691, %364
  %693 = add i32 %692, %365
  %694 = sub i32 %693, %368
  %695 = add i32 %694, %369
  %696 = sub i32 %695, %372
  %697 = sub i32 %696, %375
  %698 = add i32 %697, %376
  %699 = add i32 %698, %377
  %700 = sub i32 %699, %384
  %701 = sub i32 %700, %385
  %702 = sub i32 %701, %388
  %703 = sub i32 %702, %390
  %704 = sub i32 %703, %391
  %705 = add i32 %704, %303
  %706 = add i32 %705, %392
  %707 = sub i32 %706, %393
  %708 = sub i32 %707, %395
  %709 = sub i32 %708, %397
  %710 = sub i32 %709, %351
  %711 = sub i32 %710, %402
  %712 = add i32 %711, %403
  %713 = add i32 %712, %404
  %714 = sub i32 %713, %405
  %715 = add i32 %714, %406
  %716 = add i32 %715, %407
  %717 = sub i32 %716, %408
  %718 = add i32 %717, %409
  %719 = sub i32 %718, %233
  %720 = sub i32 %719, %229
  %721 = add i32 %720, %237
  %722 = sub i32 %721, %246
  %723 = sub i32 %722, %259
  %724 = sub i32 %723, %270
  %725 = sub i32 %724, %279
  %726 = sub i32 %725, %288
  %727 = add i32 %726, %291
  %728 = add i32 %727, %305
  %729 = sub i32 %728, %308
  %730 = sub i32 %729, %315
  %731 = sub i32 %730, %322
  %732 = add i32 %731, %352
  %733 = sub i32 %732, %363
  %734 = sub i32 %733, %373
  %735 = sub i32 %734, %381
  %736 = sub i32 %735, %387
  %737 = sub i32 %736, %399
  %738 = sub i32 %737, %413
  %739 = sub i32 %738, %416
  %740 = add i32 %739, %419
  %741 = add i32 %740, %421
  %742 = sub i32 %741, %422
  %743 = add i32 %742, %468
  %744 = add i32 %743, %470
  %745 = add i32 %744, %466
  %746 = add i32 %745, %462
  %747 = add i32 %746, %455
  %748 = add i32 %747, %447
  %749 = icmp eq i32 %22, %748
  %750 = select i1 %749, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %751 = tail call i32 @puts(i8* nonnull dereferenceable(1) %750)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
