digraph "DFG for'main' function" {
	Node0x1b01698[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1b01718[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1b017a8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1b01808[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x1b01c88[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b01d68[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x1b01e68[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1b01f28[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x1b01fd8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1b02238[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x1b022f8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1b02458[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1b024b8[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1b09df0[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x1b09ff8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1b0a158[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1b0a268[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1b0a328[shape=record, label="  ret i32 0"];
	Node0x1b01698 -> Node0x1b01718;
	Node0x1b01718 -> Node0x1b017a8;
	Node0x1b017a8 -> Node0x1b01808;
	Node0x1b01808 -> Node0x1b01c88;
	Node0x1b01c88 -> Node0x1b01d68;
	Node0x1b01d68 -> Node0x1b01e68;
	Node0x1b01e68 -> Node0x1b01f28;
	Node0x1b01f28 -> Node0x1b01fd8;
	Node0x1b01fd8 -> Node0x1b02238;
	Node0x1b02238 -> Node0x1b022f8;
	Node0x1b022f8 -> Node0x1b02458;
	Node0x1b02458 -> Node0x1b024b8;
	Node0x1b024b8 -> Node0x1b09df0;
	Node0x1b09df0 -> Node0x1b09ff8;
	Node0x1b09ff8 -> Node0x1b0a158;
	Node0x1b0a158 -> Node0x1b0a268;
	Node0x1b0a268 -> Node0x1b0a328;
edge [color=red]
	Node0x1b01698 -> Node0x1b01808;
	Node0x1b01808 -> Node0x1b01c88;
	Node0x1b01718 -> Node0x1b01d68;
	Node0x1b01d68 -> Node0x1b01e68;
	Node0x1b017a8 -> Node0x1b01f28;
	Node0x1b01f28 -> Node0x1b01fd8;
	Node0x1b01698 -> Node0x1b02238;
	Node0x1b01718 -> Node0x1b02238;
	Node0x1b017a8 -> Node0x1b02238;
	Node0x1b01698 -> Node0x1b022f8;
	Node0x1b01718 -> Node0x1b02458;
	Node0x1b017a8 -> Node0x1b024b8;
	Node0x1b022f8 -> Node0x1b09df0;
	Node0x1b02458 -> Node0x1b09df0;
	Node0x1b024b8 -> Node0x1b09df0;
	Node0x1b01f28 -> Node0x1b09ff8;
	Node0x1b01d68 -> Node0x1b0a158;
	Node0x1b01808 -> Node0x1b0a268;
}
