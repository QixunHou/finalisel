; ModuleID = '../.././c_source_file/0389_path_condition_crackme.c'
source_filename = "../.././c_source_file/0389_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = xor i32 %2, -1
  %6 = and i32 %5, %1
  %7 = or i32 %6, %4
  %8 = sub i32 0, %7
  %9 = or i32 %2, %0
  %10 = xor i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = and i32 %9, %11
  %13 = and i32 %5, %0
  %14 = xor i32 %13, -1
  %15 = add i32 %13, 1
  %16 = xor i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %10, %5
  %19 = xor i32 %6, -1
  %20 = xor i32 %19, %0
  %21 = xor i32 %1, -1
  %22 = and i32 %21, %0
  %23 = or i32 %6, %22
  %24 = shl i32 %23, 1
  %25 = and i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %5, %26
  %28 = and i32 %2, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %10, %29
  %31 = shl i32 %30, 2
  %32 = and i32 %2, %1
  %33 = or i32 %32, %4
  %34 = or i32 %22, %2
  %35 = or i32 %5, %1
  %36 = xor i32 %35, -1
  %37 = or i32 %25, %36
  %38 = xor i32 %32, -1
  %39 = and i32 %38, %4
  %40 = or i32 %21, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %2, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %41
  %45 = or i32 %2, %1
  %46 = xor i32 %45, -1
  %47 = or i32 %28, %46
  %48 = and i32 %16, %40
  %49 = xor i32 %25, %2
  %50 = shl i32 %49, 1
  %51 = xor i32 %22, -1
  %52 = xor i32 %51, %2
  %53 = or i32 %1, %0
  %54 = and i32 %53, %43
  %55 = or i32 %46, %0
  %56 = or i32 %13, %21
  %57 = or i32 %17, %41
  %58 = or i32 %42, %41
  %59 = xor i32 %42, %0
  %60 = and i32 %21, %2
  %61 = and i32 %60, %0
  %62 = or i32 %42, %0
  %63 = xor i32 %61, %62
  %64 = and i32 %32, %0
  %65 = and i32 %45, %4
  %66 = xor i32 %64, -1
  %67 = xor i32 %65, %66
  %68 = and i32 %10, %14
  %69 = or i32 %25, %46
  %70 = or i32 %5, %41
  %71 = xor i32 %13, %1
  %72 = xor i32 %9, -1
  %73 = or i32 %72, %21
  %74 = or i32 %16, %21
  %75 = xor i32 %53, -1
  %76 = or i32 %5, %0
  %77 = xor i32 %13, %38
  %78 = or i32 %28, %6
  %79 = shl i32 %78, 1
  %80 = add i32 %45, 1
  %81 = and i32 %16, %26
  %82 = or i32 %17, %1
  %83 = and i32 %16, %21
  %84 = and i32 %42, %4
  %85 = xor i32 %84, %66
  %86 = or i32 %25, %43
  %87 = and i32 %40, %5
  %88 = xor i32 %76, -1
  %89 = or i32 %88, %21
  %90 = xor i32 %28, %1
  %91 = or i32 %16, %10
  %92 = or i32 %21, %2
  %93 = and i32 %92, %4
  %94 = xor i32 %93, -1
  %95 = xor i32 %61, %94
  %96 = and i32 %32, %4
  %97 = and i32 %45, %0
  %98 = or i32 %96, %97
  %99 = xor i32 %13, %35
  %100 = or i32 %22, %17
  %101 = or i32 %28, %11
  %102 = shl i32 %32, 1
  %103 = xor i32 %22, %2
  %104 = xor i32 %36, %0
  %105 = or i32 %5, %11
  %106 = shl i32 %105, 1
  %107 = or i32 %45, %0
  %108 = or i32 %10, %72
  %109 = and i32 %9, %10
  %110 = xor i32 %76, %25
  %111 = xor i32 %96, -1
  %112 = xor i32 %97, %111
  %113 = and i32 %14, %1
  %114 = or i32 %16, %22
  %115 = or i32 %32, %22
  %116 = xor i32 %28, %45
  %117 = and i32 %43, %4
  %118 = or i32 %16, %11
  %119 = xor i32 %9, %25
  %120 = and i32 %42, %0
  %121 = and i32 %11, %2
  %122 = or i32 %13, %1
  %123 = or i32 %13, %10
  %124 = shl i32 %123, 2
  %125 = and i32 %9, %1
  %126 = and i32 %40, %43
  %127 = or i32 %36, %0
  %128 = add i32 %6, 1
  %129 = and i32 %42, %53
  %130 = xor i32 %59, -1
  %131 = xor i32 %61, %130
  %132 = and i32 %60, %4
  %133 = and i32 %92, %0
  %134 = xor i32 %133, -1
  %135 = xor i32 %132, %134
  %136 = or i32 %64, %130
  %137 = or i32 %6, %0
  %138 = or i32 %42, %4
  %139 = xor i32 %132, %138
  %140 = and i32 %16, %51
  %141 = or i32 %13, %36
  %142 = or i32 %36, %4
  %143 = or i32 %45, %4
  %144 = xor i32 %28, %19
  %145 = shl i32 %26, 1
  %146 = or i32 %16, %1
  %147 = or i32 %28, %1
  %148 = xor i32 %35, %25
  %149 = or i32 %61, %93
  %150 = shl i32 %149, 1
  %151 = xor i32 %14, %1
  %152 = shl i32 %151, 1
  %153 = xor i32 %45, %0
  %154 = or i32 %64, %153
  %155 = shl i32 %154, 1
  %156 = and i32 %17, %26
  %157 = and i32 %14, %11
  %158 = and i32 %29, %1
  %159 = or i32 %17, %11
  %160 = and i32 %35, %4
  %161 = or i32 %22, %5
  %162 = or i32 %132, %133
  %163 = and i32 %16, %1
  %164 = and i32 %19, %4
  %165 = xor i32 %120, %111
  %166 = and i32 %51, %2
  %167 = and i32 %5, %11
  %168 = and i32 %76, %21
  %169 = and i32 %76, %10
  %170 = or i32 %25, %5
  %171 = add i32 %76, 1
  %172 = and i32 %19, %0
  %173 = and i32 %29, %11
  %174 = xor i32 %153, %66
  %175 = and i32 %16, %11
  %176 = xor i32 %0, 2147483647
  %177 = xor i32 %176, %92
  %178 = xor i32 %177, %61
  %179 = or i32 %46, %4
  %180 = and i32 %76, %1
  %181 = add i32 %22, 1
  %182 = and i32 %5, %51
  %183 = or i32 %64, %84
  %184 = xor i32 %28, %40
  %185 = shl i32 %184, 1
  %186 = xor i32 %35, %0
  %187 = shl i32 %186, 1
  %188 = xor i32 %38, %0
  %189 = and i32 %17, %11
  %190 = xor i32 %76, %1
  %191 = xor i32 %88, %1
  %192 = or i32 %19, %4
  %193 = or i32 %25, %17
  %194 = shl i32 %193, 1
  %195 = or i32 %10, %2
  %196 = and i32 %40, %17
  %197 = or i32 %28, %41
  %198 = xor i32 %43, %0
  %199 = or i32 %5, %75
  %200 = xor i32 %29, %1
  %201 = add i32 %9, 1
  %202 = and i32 %42, %40
  %203 = or i32 %17, %75
  %204 = xor i32 %62, -1
  %205 = or i32 %61, %204
  %206 = add i32 %2, 1
  %207 = or i32 %35, %4
  %208 = or i32 %75, %2
  %209 = xor i32 %22, %19
  %210 = or i32 %38, %0
  %211 = or i32 %16, %75
  %212 = and i32 %14, %21
  %213 = shl i32 %212, 1
  %214 = or i32 %17, %21
  %215 = xor i32 %46, %0
  %216 = and i32 %76, %11
  %217 = xor i32 %32, %0
  %218 = or i32 %25, %88
  %219 = xor i32 %6, %0
  %220 = and i32 %9, %21
  %221 = or i32 %28, %10
  %222 = xor i32 %28, %53
  %223 = or i32 %42, %25
  %224 = shl i32 %223, 1
  %225 = and i32 %17, %1
  %226 = xor i32 %9, %1
  %227 = and i32 %53, %2
  %228 = xor i32 %72, %1
  %229 = and i32 %40, %2
  %230 = or i32 %32, %0
  %231 = or i32 %72, %11
  %232 = or i32 %28, %21
  %233 = or i32 %43, %0
  %234 = and i32 %53, %17
  %235 = or i32 %19, %0
  %236 = or i32 %43, %4
  %237 = or i32 %72, %1
  %238 = and i32 %26, %2
  %239 = xor i32 %75, %2
  %240 = and i32 %42, %26
  %241 = shl i32 %240, 1
  %242 = and i32 %10, %2
  %243 = or i32 %10, %5
  %244 = or i32 %13, %32
  %245 = or i32 %41, %2
  %246 = or i32 %13, %11
  %247 = xor i32 %45, %25
  %248 = and i32 %16, %10
  %249 = and i32 %16, %53
  %250 = or i32 %28, %75
  %251 = or i32 %11, %2
  %252 = or i32 %35, %0
  %253 = shl i32 %252, 2
  %254 = or i32 %22, %43
  %255 = or i32 %88, %11
  %256 = shl i32 %255, 1
  %257 = or i32 %10, %88
  %258 = xor i32 %40, %2
  %259 = and i32 %43, %26
  %260 = or i32 %42, %75
  %261 = or i32 %42, %22
  %262 = or i32 %10, %17
  %263 = and i32 %46, %4
  %264 = mul i32 %263, 9
  %265 = and i32 %6, %4
  %266 = and i32 %46, %0
  %267 = and i32 %6, %0
  %268 = and i32 %36, %4
  %269 = and i32 %36, %0
  %270 = shl i32 %64, 3
  %271 = add i32 %16, %11
  %272 = add i32 %271, %167
  %273 = add i32 %272, %121
  %274 = add i32 %273, %35
  %275 = add i32 %274, %27
  %276 = add i32 %275, %257
  %277 = add i32 %276, %233
  %278 = add i32 %277, %226
  %279 = add i32 %278, %225
  %280 = add i32 %279, %209
  %281 = add i32 %280, %191
  %282 = add i32 %281, %147
  %283 = add i32 %282, %117
  %284 = add i32 %283, %115
  %285 = add i32 %284, %108
  %286 = add i32 %285, %99
  %287 = add i32 %286, %59
  %288 = add i32 %287, %183
  %289 = add i32 %288, %178
  %290 = shl i32 %289, 1
  %291 = sub i32 %43, %166
  %292 = add i32 %291, %129
  %293 = sub i32 %292, %198
  %294 = add i32 %293, %119
  %295 = mul i32 %294, 3
  %296 = add i32 %249, %171
  %297 = sub i32 %296, %265
  %298 = add i32 %297, %200
  %299 = mul i32 %298, 5
  %300 = add i32 %269, %268
  %301 = mul i32 %300, 22
  %302 = sub i32 %267, %266
  %303 = mul i32 %302, 18
  %304 = add i32 %40, %2
  %305 = add i32 %304, %53
  %306 = add i32 %305, 4
  %307 = add i32 %306, %22
  %308 = add i32 %307, %10
  %309 = add i32 %308, %181
  %310 = add i32 %309, %206
  %311 = add i32 %310, %25
  %312 = add i32 %311, %53
  %313 = add i32 %312, %15
  %314 = add i32 %313, %17
  %315 = add i32 %314, %18
  %316 = sub i32 %315, %34
  %317 = add i32 %316, %52
  %318 = add i32 %317, %70
  %319 = sub i32 %318, %76
  %320 = add i32 %319, %80
  %321 = sub i32 %320, %87
  %322 = sub i32 %321, %13
  %323 = sub i32 %322, %103
  %324 = add i32 %323, %28
  %325 = add i32 %324, %45
  %326 = add i32 %325, %128
  %327 = sub i32 %326, %145
  %328 = sub i32 %327, %161
  %329 = add i32 %328, %38
  %330 = add i32 %329, %42
  %331 = sub i32 %330, %170
  %332 = add i32 %331, %182
  %333 = sub i32 %332, %6
  %334 = add i32 %333, %195
  %335 = sub i32 %334, %199
  %336 = add i32 %335, %201
  %337 = sub i32 %336, %208
  %338 = sub i32 %337, %227
  %339 = add i32 %338, %229
  %340 = sub i32 %339, %9
  %341 = add i32 %340, %238
  %342 = sub i32 %341, %239
  %343 = add i32 %342, %242
  %344 = add i32 %343, %243
  %345 = sub i32 %344, %245
  %346 = sub i32 %345, %251
  %347 = sub i32 %346, %258
  %348 = add i32 %347, %12
  %349 = sub i32 %348, %20
  %350 = add i32 %349, %33
  %351 = sub i32 %350, %37
  %352 = add i32 %351, %39
  %353 = sub i32 %352, %44
  %354 = sub i32 %353, %47
  %355 = add i32 %354, %48
  %356 = sub i32 %355, %50
  %357 = sub i32 %356, %54
  %358 = add i32 %357, %55
  %359 = sub i32 %358, %56
  %360 = add i32 %359, %57
  %361 = add i32 %360, %58
  %362 = sub i32 %361, %68
  %363 = add i32 %362, %69
  %364 = add i32 %363, %71
  %365 = sub i32 %364, %73
  %366 = sub i32 %365, %74
  %367 = sub i32 %366, %77
  %368 = sub i32 %367, %81
  %369 = sub i32 %368, %82
  %370 = sub i32 %369, %83
  %371 = add i32 %370, %86
  %372 = sub i32 %371, %89
  %373 = sub i32 %372, %90
  %374 = add i32 %373, %91
  %375 = add i32 %374, %100
  %376 = sub i32 %375, %101
  %377 = sub i32 %376, %102
  %378 = sub i32 %377, %104
  %379 = sub i32 %378, %106
  %380 = sub i32 %379, %107
  %381 = add i32 %380, %109
  %382 = add i32 %381, %110
  %383 = add i32 %382, %113
  %384 = add i32 %383, %114
  %385 = sub i32 %384, %116
  %386 = add i32 %385, %62
  %387 = sub i32 %386, %118
  %388 = sub i32 %387, %120
  %389 = add i32 %388, %122
  %390 = add i32 %389, %125
  %391 = sub i32 %390, %126
  %392 = sub i32 %391, %127
  %393 = sub i32 %392, %137
  %394 = sub i32 %393, %140
  %395 = sub i32 %394, %141
  %396 = sub i32 %395, %142
  %397 = add i32 %396, %143
  %398 = add i32 %397, %144
  %399 = sub i32 %398, %146
  %400 = add i32 %399, %148
  %401 = add i32 %400, %156
  %402 = add i32 %401, %157
  %403 = add i32 %402, %153
  %404 = add i32 %403, %158
  %405 = sub i32 %404, %159
  %406 = sub i32 %405, %160
  %407 = add i32 %406, %163
  %408 = sub i32 %407, %164
  %409 = add i32 %408, %65
  %410 = add i32 %409, %168
  %411 = sub i32 %410, %169
  %412 = sub i32 %411, %172
  %413 = add i32 %412, %173
  %414 = sub i32 %413, %175
  %415 = sub i32 %414, %138
  %416 = sub i32 %415, %179
  %417 = sub i32 %416, %180
  %418 = add i32 %417, %188
  %419 = add i32 %418, %189
  %420 = sub i32 %419, %190
  %421 = add i32 %420, %192
  %422 = add i32 %421, %196
  %423 = sub i32 %422, %197
  %424 = sub i32 %423, %97
  %425 = sub i32 %424, %202
  %426 = sub i32 %425, %203
  %427 = add i32 %426, %207
  %428 = add i32 %427, %210
  %429 = add i32 %428, %211
  %430 = sub i32 %429, %214
  %431 = sub i32 %430, %215
  %432 = sub i32 %431, %216
  %433 = add i32 %432, %217
  %434 = sub i32 %433, %218
  %435 = add i32 %434, %219
  %436 = add i32 %435, %220
  %437 = add i32 %436, %221
  %438 = add i32 %437, %222
  %439 = add i32 %438, %228
  %440 = add i32 %439, %230
  %441 = sub i32 %440, %231
  %442 = add i32 %441, %232
  %443 = sub i32 %442, %234
  %444 = sub i32 %443, %235
  %445 = add i32 %444, %236
  %446 = add i32 %445, %237
  %447 = sub i32 %446, %244
  %448 = add i32 %447, %246
  %449 = sub i32 %448, %247
  %450 = add i32 %449, %248
  %451 = sub i32 %450, %250
  %452 = add i32 %451, %254
  %453 = sub i32 %452, %259
  %454 = sub i32 %453, %260
  %455 = sub i32 %454, %261
  %456 = add i32 %455, %262
  %457 = sub i32 %456, %96
  %458 = sub i32 %457, %24
  %459 = add i32 %458, %31
  %460 = sub i32 %459, %63
  %461 = add i32 %460, %67
  %462 = sub i32 %461, %79
  %463 = sub i32 %462, %85
  %464 = sub i32 %463, %95
  %465 = add i32 %464, %98
  %466 = sub i32 %465, %112
  %467 = sub i32 %466, %124
  %468 = sub i32 %467, %131
  %469 = sub i32 %468, %135
  %470 = add i32 %469, %136
  %471 = add i32 %470, %139
  %472 = sub i32 %471, %152
  %473 = sub i32 %472, %162
  %474 = add i32 %473, %165
  %475 = add i32 %474, %174
  %476 = sub i32 %475, %185
  %477 = sub i32 %476, %187
  %478 = sub i32 %477, %194
  %479 = sub i32 %478, %205
  %480 = sub i32 %479, %213
  %481 = sub i32 %480, %224
  %482 = sub i32 %481, %241
  %483 = sub i32 %482, %253
  %484 = sub i32 %483, %256
  %485 = add i32 %484, %264
  %486 = sub i32 %485, %270
  %487 = sub i32 %486, %150
  %488 = sub i32 %487, %155
  %489 = add i32 %488, %301
  %490 = add i32 %489, %303
  %491 = add i32 %490, %299
  %492 = add i32 %491, %295
  %493 = add i32 %492, %290
  %494 = icmp eq i32 %493, %8
  %495 = select i1 %494, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %496 = tail call i32 @puts(i8* nonnull dereferenceable(1) %495)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
