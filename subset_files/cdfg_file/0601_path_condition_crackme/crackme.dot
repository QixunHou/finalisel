digraph "DFG for'crackme' function" {
	Node0x1620120[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1620190[shape=record, label="  %6 = or i32 %5, %1"];
	Node0x1620200[shape=record, label="  %7 = sub i32 %6, %2"];
	Node0x16202a0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1620310[shape=record, label="  %9 = shl i32 %3, 1"];
	Node0x16203b0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1620420[shape=record, label="  %11 = sub i32 %8, %10"];
	Node0x1620490[shape=record, label="  %12 = and i32 %5, %1"];
	Node0x1620500[shape=record, label="  %13 = and i32 %2, %1"];
	Node0x1620570[shape=record, label="  %14 = add i32 %6, 1"];
	Node0x1620610[shape=record, label="  %15 = mul i32 %12, -5"];
	Node0x16206b0[shape=record, label="  %16 = shl i32 %13, 2"];
	Node0x1620720[shape=record, label="  %17 = xor i32 %0, -1"];
	Node0x1620790[shape=record, label="  %18 = or i32 %17, %3"];
	Node0x1620800[shape=record, label="  %19 = and i32 %17, %3"];
	Node0x1620870[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x16208e0[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x1620950[shape=record, label="  %22 = or i32 %3, %0"];
	Node0x16209c0[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x1620a30[shape=record, label="  %24 = xor i32 %3, %0"];
	Node0x1620aa0[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x1620b10[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x1620bb0[shape=record, label="  %27 = mul i32 %26, 3"];
	Node0x1620c20[shape=record, label="  %28 = add i32 %19, %1"];
	Node0x1620c90[shape=record, label="  %29 = shl i32 %28, 2"];
	Node0x1620d00[shape=record, label="  %30 = shl i32 %0, 1"];
	Node0x1620da0[shape=record, label="  %31 = add i32 %30, -3"];
	Node0x1620e10[shape=record, label="  %32 = sub i32 %31, %2"];
	Node0x1621090[shape=record, label="  %33 = add i32 %32, %12"];
	Node0x1621100[shape=record, label="  %34 = sub i32 %33, %13"];
	Node0x1621170[shape=record, label="  %35 = sub i32 %34, %3"];
	Node0x16211e0[shape=record, label="  %36 = add i32 %35, %15"];
	Node0x1621250[shape=record, label="  %37 = sub i32 %36, %16"];
	Node0x16212c0[shape=record, label="  %38 = sub i32 %37, %18"];
	Node0x1621330[shape=record, label="  %39 = sub i32 %38, %24"];
	Node0x16213a0[shape=record, label="  %40 = sub i32 %39, %23"];
	Node0x1621410[shape=record, label="  %41 = sub i32 %40, %21"];
	Node0x1621480[shape=record, label="  %42 = add i32 %41, %27"];
	Node0x16214f0[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x1621560[shape=record, label="  %44 = icmp eq i32 %11, %43"];
	Node0x15c0268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1621a00[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x1621a50[shape=record, label="  ret void"];
	Node0x1620120 -> Node0x1620190;
	Node0x1620190 -> Node0x1620200;
	Node0x1620200 -> Node0x16202a0;
	Node0x16202a0 -> Node0x1620310;
	Node0x1620310 -> Node0x16203b0;
	Node0x16203b0 -> Node0x1620420;
	Node0x1620420 -> Node0x1620490;
	Node0x1620490 -> Node0x1620500;
	Node0x1620500 -> Node0x1620570;
	Node0x1620570 -> Node0x1620610;
	Node0x1620610 -> Node0x16206b0;
	Node0x16206b0 -> Node0x1620720;
	Node0x1620720 -> Node0x1620790;
	Node0x1620790 -> Node0x1620800;
	Node0x1620800 -> Node0x1620870;
	Node0x1620870 -> Node0x16208e0;
	Node0x16208e0 -> Node0x1620950;
	Node0x1620950 -> Node0x16209c0;
	Node0x16209c0 -> Node0x1620a30;
	Node0x1620a30 -> Node0x1620aa0;
	Node0x1620aa0 -> Node0x1620b10;
	Node0x1620b10 -> Node0x1620bb0;
	Node0x1620bb0 -> Node0x1620c20;
	Node0x1620c20 -> Node0x1620c90;
	Node0x1620c90 -> Node0x1620d00;
	Node0x1620d00 -> Node0x1620da0;
	Node0x1620da0 -> Node0x1620e10;
	Node0x1620e10 -> Node0x1621090;
	Node0x1621090 -> Node0x1621100;
	Node0x1621100 -> Node0x1621170;
	Node0x1621170 -> Node0x16211e0;
	Node0x16211e0 -> Node0x1621250;
	Node0x1621250 -> Node0x16212c0;
	Node0x16212c0 -> Node0x1621330;
	Node0x1621330 -> Node0x16213a0;
	Node0x16213a0 -> Node0x1621410;
	Node0x1621410 -> Node0x1621480;
	Node0x1621480 -> Node0x16214f0;
	Node0x16214f0 -> Node0x1621560;
	Node0x1621560 -> Node0x15c0268;
	Node0x15c0268 -> Node0x1621a00;
	Node0x1621a00 -> Node0x1621a50;
edge [color=red]
	Node0x1620120 -> Node0x1620190;
	Node0x1620190 -> Node0x1620200;
	Node0x1620200 -> Node0x16202a0;
	Node0x1620310 -> Node0x16203b0;
	Node0x16202a0 -> Node0x1620420;
	Node0x16203b0 -> Node0x1620420;
	Node0x1620120 -> Node0x1620490;
	Node0x1620190 -> Node0x1620570;
	Node0x1620490 -> Node0x1620610;
	Node0x1620500 -> Node0x16206b0;
	Node0x1620720 -> Node0x1620790;
	Node0x1620720 -> Node0x1620800;
	Node0x1620800 -> Node0x1620870;
	Node0x1620870 -> Node0x16208e0;
	Node0x1620950 -> Node0x16209c0;
	Node0x1620aa0 -> Node0x1620b10;
	Node0x1620570 -> Node0x1620b10;
	Node0x1620b10 -> Node0x1620bb0;
	Node0x1620800 -> Node0x1620c20;
	Node0x1620c20 -> Node0x1620c90;
	Node0x1620d00 -> Node0x1620da0;
	Node0x1620da0 -> Node0x1620e10;
	Node0x1620e10 -> Node0x1621090;
	Node0x1620490 -> Node0x1621090;
	Node0x1621090 -> Node0x1621100;
	Node0x1620500 -> Node0x1621100;
	Node0x1621100 -> Node0x1621170;
	Node0x1621170 -> Node0x16211e0;
	Node0x1620610 -> Node0x16211e0;
	Node0x16211e0 -> Node0x1621250;
	Node0x16206b0 -> Node0x1621250;
	Node0x1621250 -> Node0x16212c0;
	Node0x1620790 -> Node0x16212c0;
	Node0x16212c0 -> Node0x1621330;
	Node0x1620a30 -> Node0x1621330;
	Node0x1621330 -> Node0x16213a0;
	Node0x16209c0 -> Node0x16213a0;
	Node0x16213a0 -> Node0x1621410;
	Node0x16208e0 -> Node0x1621410;
	Node0x1621410 -> Node0x1621480;
	Node0x1620bb0 -> Node0x1621480;
	Node0x1621480 -> Node0x16214f0;
	Node0x1620c90 -> Node0x16214f0;
	Node0x1620420 -> Node0x1621560;
	Node0x16214f0 -> Node0x1621560;
	Node0x1621560 -> Node0x15c0268;
	Node0x15c0268 -> Node0x1621a00;
}
