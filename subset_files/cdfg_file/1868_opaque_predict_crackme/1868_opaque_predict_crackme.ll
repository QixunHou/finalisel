; ModuleID = '../.././c_source_file/1868_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1868_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = sub i32 %3, %4
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, %0
  %9 = add i32 %6, %8
  %10 = xor i32 %3, -1
  %11 = xor i32 %4, -1
  %12 = or i32 %4, %3
  %13 = or i32 %11, %3
  %14 = xor i32 %4, %3
  %15 = shl i32 %13, 1
  %16 = xor i32 %15, -2
  %17 = and i32 %11, %3
  %18 = or i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = xor i32 %19, %0
  %21 = xor i32 %2, -1
  %22 = or i32 %21, %0
  %23 = xor i32 %22, -1
  %24 = xor i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = or i32 %23, %25
  %27 = xor i32 %0, -1
  %28 = and i32 %21, %1
  %29 = xor i32 %28, -1
  %30 = and i32 %29, %27
  %31 = xor i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %19, %27
  %34 = or i32 %21, %1
  %35 = and i32 %34, %27
  %36 = or i32 %31, %1
  %37 = xor i32 %29, %0
  %38 = shl i32 %37, 2
  %39 = xor i32 %1, -1
  %40 = and i32 %39, %0
  %41 = xor i32 %7, -1
  %42 = or i32 %40, %41
  %43 = or i32 %1, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %41, %44
  %46 = or i32 %32, %1
  %47 = or i32 %29, %27
  %48 = and i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %49, %1
  %51 = xor i32 %43, %2
  %52 = and i32 %31, %24
  %53 = or i32 %39, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %31, %54
  %56 = or i32 %2, %0
  %57 = and i32 %56, %39
  %58 = and i32 %29, %0
  %59 = xor i32 %40, -1
  %60 = and i32 %41, %59
  %61 = and i32 %21, %0
  %62 = xor i32 %61, -1
  %63 = and i32 %62, %39
  %64 = and i32 %41, %0
  %65 = or i32 %18, %27
  %66 = and i32 %1, %0
  %67 = xor i32 %66, -1
  %68 = and i32 %67, %2
  %69 = or i32 %48, %39
  %70 = and i32 %18, %0
  %71 = and i32 %41, %27
  %72 = and i32 %43, %21
  %73 = shl i32 %72, 1
  %74 = and i32 %39, %2
  %75 = and i32 %74, %0
  %76 = xor i32 %75, 2147483647
  %77 = xor i32 %76, %8
  %78 = and i32 %2, %1
  %79 = xor i32 %78, -1
  %80 = xor i32 %79, %0
  %81 = or i32 %48, %24
  %82 = and i32 %41, %67
  %83 = and i32 %78, %0
  %84 = xor i32 %83, %8
  %85 = xor i32 %18, %0
  %86 = or i32 %83, %85
  %87 = xor i32 %48, %53
  %88 = shl i32 %87, 1
  %89 = or i32 %48, %54
  %90 = or i32 %40, %2
  %91 = and i32 %31, %59
  %92 = shl i32 %91, 1
  %93 = xor i32 %56, %66
  %94 = or i32 %34, %0
  %95 = or i32 %79, %27
  %96 = xor i32 %85, -1
  %97 = xor i32 %83, %96
  %98 = and i32 %62, %1
  %99 = add i32 %61, 1
  %100 = or i32 %7, %40
  %101 = xor i32 %54, %2
  %102 = and i32 %22, %25
  %103 = xor i32 %34, -1
  %104 = or i32 %66, %103
  %105 = shl i32 %104, 1
  %106 = or i32 %31, %25
  %107 = xor i32 %48, %29
  %108 = xor i32 %67, %2
  %109 = shl i32 %108, 1
  %110 = or i32 %41, %27
  %111 = and i32 %7, %27
  %112 = or i32 %83, %111
  %113 = or i32 %48, %1
  %114 = xor i32 %22, %66
  %115 = xor i32 %41, %0
  %116 = xor i32 %56, %1
  %117 = shl i32 %116, 2
  %118 = xor i32 %59, %2
  %119 = and i32 %79, %27
  %120 = or i32 %103, %27
  %121 = or i32 %48, %44
  %122 = xor i32 %56, -1
  %123 = xor i32 %122, %1
  %124 = or i32 %7, %27
  %125 = and i32 %78, %27
  %126 = and i32 %7, %0
  %127 = or i32 %125, %126
  %128 = or i32 %41, %0
  %129 = and i32 %53, %41
  %130 = or i32 %40, %32
  %131 = and i32 %22, %39
  %132 = xor i32 %40, %2
  %133 = and i32 %21, %59
  %134 = and i32 %74, %27
  %135 = xor i32 %124, 2147483647
  %136 = or i32 %135, %134
  %137 = shl i32 %136, 1
  %138 = and i32 %32, %39
  %139 = or i32 %21, %44
  %140 = or i32 %24, %21
  %141 = xor i32 %28, %0
  %142 = and i32 %56, %25
  %143 = and i32 %31, %1
  %144 = xor i32 %126, -1
  %145 = xor i32 %125, %144
  %146 = xor i32 %78, %0
  %147 = or i32 %39, %2
  %148 = xor i32 %147, %0
  %149 = xor i32 %148, -1
  %150 = xor i32 %75, %149
  %151 = and i32 %49, %1
  %152 = or i32 %31, %40
  %153 = or i32 %61, %25
  %154 = or i32 %122, %1
  %155 = and i32 %31, %39
  %156 = and i32 %79, %0
  %157 = or i32 %31, %66
  %158 = and i32 %18, %27
  %159 = or i32 %83, %158
  %160 = shl i32 %159, 2
  %161 = or i32 %48, %25
  %162 = and i32 %24, %62
  %163 = and i32 %43, %32
  %164 = xor i32 %23, %1
  %165 = xor i32 %22, %1
  %166 = and i32 %32, %25
  %167 = and i32 %53, %21
  %168 = shl i32 %167, 1
  %169 = or i32 %7, %0
  %170 = add i32 %24, 1
  %171 = xor i32 %48, %18
  %172 = xor i32 %53, %2
  %173 = or i32 %66, %2
  %174 = or i32 %78, %0
  %175 = xor i32 %111, 2147483647
  %176 = xor i32 %175, %83
  %177 = and i32 %56, %1
  %178 = or i32 %40, %21
  %179 = and i32 %24, %49
  %180 = xor i32 %103, %0
  %181 = and i32 %53, %2
  %182 = shl i32 %181, 1
  %183 = shl i32 %111, 1
  %184 = xor i32 %40, %79
  %185 = or i32 %103, %0
  %186 = and i32 %7, %59
  %187 = and i32 %24, %21
  %188 = or i32 %28, %40
  %189 = or i32 %66, %32
  %190 = shl i32 %189, 1
  %191 = and i32 %24, %32
  %192 = or i32 %75, %148
  %193 = and i32 %31, %67
  %194 = and i32 %43, %41
  %195 = or i32 %24, %23
  %196 = or i32 %28, %0
  %197 = or i32 %48, %28
  %198 = and i32 %34, %0
  %199 = shl i32 %198, 1
  %200 = or i32 %66, %21
  %201 = xor i32 %40, %29
  %202 = or i32 %125, %70
  %203 = and i32 %43, %2
  %204 = xor i32 %18, %66
  %205 = xor i32 %169, -1
  %206 = or i32 %75, %205
  %207 = and i32 %31, %53
  %208 = and i32 %53, %32
  %209 = shl i32 %208, 1
  %210 = and i32 %22, %24
  %211 = and i32 %59, %2
  %212 = and i32 %25, %2
  %213 = xor i32 %48, %43
  %214 = and i32 %32, %67
  %215 = add i32 %43, 1
  %216 = xor i32 %44, %2
  %217 = shl i32 %39, 1
  %218 = or i32 %7, %66
  %219 = and i32 %7, %53
  %220 = or i32 %28, %27
  %221 = shl i32 %220, 1
  %222 = and i32 %147, %27
  %223 = or i32 %75, %222
  %224 = shl i32 %223, 1
  %225 = or i32 %25, %2
  %226 = or i32 %54, %2
  %227 = xor i32 %76, %222
  %228 = or i32 %24, %2
  %229 = xor i32 %48, %1
  %230 = or i32 %78, %27
  %231 = or i32 %29, %0
  %232 = or i32 %66, %19
  %233 = or i32 %7, %54
  %234 = shl i32 %233, 1
  %235 = or i32 %122, %25
  %236 = shl i32 %235, 2
  %237 = shl i32 %67, 1
  %238 = and i32 %19, %27
  %239 = shl i32 %238, 2
  %240 = and i32 %28, %27
  %241 = mul i32 %240, -17
  %242 = and i32 %19, %0
  %243 = and i32 %28, %0
  %244 = and i32 %103, %27
  %245 = shl i32 %244, 2
  %246 = mul i32 %125, -9
  %247 = and i32 %103, %0
  %248 = mul i32 %83, -19
  %249 = add i32 %165, %207
  %250 = sub i32 %26, %249
  %251 = add i32 %250, %86
  %252 = mul i32 %251, 3
  %253 = add i32 %247, %243
  %254 = add i32 %253, %242
  %255 = mul i32 %254, -15
  %256 = sub i32 %145, %63
  %257 = mul i32 %256, 5
  %258 = add i32 %2, -1
  %259 = add i32 %258, %216
  %260 = add i32 %259, %18
  %261 = add i32 %260, %31
  %262 = add i32 %261, %140
  %263 = add i32 %262, %231
  %264 = add i32 %263, %185
  %265 = add i32 %264, %184
  %266 = add i32 %265, %174
  %267 = add i32 %266, %153
  %268 = add i32 %267, %143
  %269 = add i32 %268, %100
  %270 = add i32 %269, %70
  %271 = add i32 %270, %65
  %272 = add i32 %271, %50
  %273 = add i32 %272, %84
  %274 = add i32 %273, %12
  %275 = add i32 %274, %176
  %276 = add i32 %275, %227
  %277 = add i32 %276, %77
  %278 = shl i32 %277, 1
  %279 = add i32 %53, 2
  %280 = sub i32 %279, %40
  %281 = add i32 %280, %53
  %282 = add i32 %281, %43
  %283 = add i32 %282, %170
  %284 = sub i32 %283, %66
  %285 = add i32 %284, %24
  %286 = add i32 %285, %215
  %287 = sub i32 %286, %217
  %288 = add i32 %287, %10
  %289 = add i32 %288, %19
  %290 = add i32 %289, %32
  %291 = sub i32 %290, %34
  %292 = add i32 %291, %51
  %293 = add i32 %292, %68
  %294 = add i32 %293, %49
  %295 = add i32 %294, %90
  %296 = add i32 %295, %99
  %297 = sub i32 %296, %101
  %298 = sub i32 %297, %118
  %299 = sub i32 %298, %132
  %300 = sub i32 %299, %133
  %301 = add i32 %300, %139
  %302 = add i32 %301, %61
  %303 = add i32 %302, %103
  %304 = sub i32 %303, %172
  %305 = sub i32 %304, %173
  %306 = add i32 %305, %178
  %307 = sub i32 %306, %187
  %308 = add i32 %307, %200
  %309 = sub i32 %308, %203
  %310 = add i32 %309, %22
  %311 = add i32 %310, %211
  %312 = add i32 %311, %212
  %313 = add i32 %312, %225
  %314 = add i32 %313, %226
  %315 = add i32 %314, %228
  %316 = sub i32 %315, %237
  %317 = sub i32 %316, %4
  %318 = sub i32 %317, %20
  %319 = sub i32 %318, %30
  %320 = add i32 %319, %33
  %321 = sub i32 %320, %35
  %322 = sub i32 %321, %36
  %323 = sub i32 %322, %42
  %324 = sub i32 %323, %45
  %325 = add i32 %324, %46
  %326 = add i32 %325, %47
  %327 = add i32 %326, %52
  %328 = add i32 %327, %55
  %329 = sub i32 %328, %57
  %330 = add i32 %329, %58
  %331 = sub i32 %330, %60
  %332 = sub i32 %331, %64
  %333 = add i32 %332, %69
  %334 = sub i32 %333, %71
  %335 = sub i32 %334, %73
  %336 = sub i32 %335, %80
  %337 = add i32 %336, %81
  %338 = sub i32 %337, %82
  %339 = add i32 %338, %89
  %340 = sub i32 %339, %93
  %341 = sub i32 %340, %94
  %342 = sub i32 %341, %95
  %343 = sub i32 %342, %98
  %344 = add i32 %343, %102
  %345 = sub i32 %344, %106
  %346 = add i32 %345, %107
  %347 = sub i32 %346, %109
  %348 = sub i32 %347, %110
  %349 = add i32 %348, %85
  %350 = add i32 %349, %113
  %351 = add i32 %350, %114
  %352 = sub i32 %351, %115
  %353 = add i32 %352, %119
  %354 = add i32 %353, %120
  %355 = add i32 %354, %121
  %356 = sub i32 %355, %123
  %357 = add i32 %356, %124
  %358 = add i32 %357, %128
  %359 = sub i32 %358, %129
  %360 = add i32 %359, %130
  %361 = add i32 %360, %131
  %362 = add i32 %361, %138
  %363 = sub i32 %362, %141
  %364 = sub i32 %363, %142
  %365 = sub i32 %364, %146
  %366 = sub i32 %365, %151
  %367 = add i32 %366, %152
  %368 = add i32 %367, %154
  %369 = sub i32 %368, %155
  %370 = sub i32 %369, %156
  %371 = add i32 %370, %157
  %372 = add i32 %371, %161
  %373 = sub i32 %372, %162
  %374 = add i32 %373, %163
  %375 = sub i32 %374, %164
  %376 = add i32 %375, %166
  %377 = sub i32 %376, %168
  %378 = sub i32 %377, %169
  %379 = sub i32 %378, %171
  %380 = sub i32 %379, %177
  %381 = add i32 %380, %179
  %382 = add i32 %381, %180
  %383 = sub i32 %382, %182
  %384 = sub i32 %383, %158
  %385 = sub i32 %384, %186
  %386 = add i32 %385, %188
  %387 = add i32 %386, %191
  %388 = add i32 %387, %193
  %389 = sub i32 %388, %194
  %390 = add i32 %389, %195
  %391 = add i32 %390, %196
  %392 = sub i32 %391, %197
  %393 = sub i32 %392, %201
  %394 = add i32 %393, %204
  %395 = add i32 %394, %210
  %396 = add i32 %395, %213
  %397 = add i32 %396, %214
  %398 = add i32 %397, %218
  %399 = add i32 %398, %219
  %400 = add i32 %399, %229
  %401 = add i32 %400, %230
  %402 = sub i32 %401, %232
  %403 = sub i32 %402, %13
  %404 = sub i32 %403, %14
  %405 = add i32 %404, %17
  %406 = sub i32 %405, %38
  %407 = sub i32 %406, %88
  %408 = sub i32 %407, %92
  %409 = sub i32 %408, %97
  %410 = sub i32 %409, %105
  %411 = sub i32 %410, %112
  %412 = sub i32 %411, %117
  %413 = sub i32 %412, %127
  %414 = sub i32 %413, %150
  %415 = sub i32 %414, %183
  %416 = sub i32 %415, %190
  %417 = add i32 %416, %192
  %418 = sub i32 %417, %199
  %419 = add i32 %418, %202
  %420 = sub i32 %419, %206
  %421 = sub i32 %420, %209
  %422 = sub i32 %421, %221
  %423 = sub i32 %422, %234
  %424 = add i32 %423, %236
  %425 = sub i32 %424, %239
  %426 = add i32 %425, %241
  %427 = sub i32 %426, %245
  %428 = add i32 %427, %246
  %429 = add i32 %428, %248
  %430 = sub i32 %429, %160
  %431 = sub i32 %430, %224
  %432 = sub i32 %431, %16
  %433 = sub i32 %432, %137
  %434 = add i32 %433, %255
  %435 = add i32 %434, %257
  %436 = add i32 %435, %252
  %437 = add i32 %436, %278
  %438 = icmp eq i32 %9, %437
  %439 = select i1 %438, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %440 = tail call i32 @puts(i8* nonnull dereferenceable(1) %439)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
