; ModuleID = '../.././c_source_file/1542_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1542_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %5, %8
  %10 = sub i32 0, %9
  %11 = xor i32 %1, -1
  %12 = xor i32 %2, -1
  %13 = or i32 %12, %0
  %14 = and i32 %13, %11
  %15 = or i32 %1, %0
  %16 = xor i32 %15, %2
  %17 = shl i32 %16, 1
  %18 = xor i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %19
  %23 = shl i32 %22, 1
  %24 = and i32 %11, %0
  %25 = xor i32 %6, -1
  %26 = or i32 %24, %25
  %27 = and i32 %2, %0
  %28 = or i32 %11, %0
  %29 = xor i32 %27, %28
  %30 = or i32 %20, %1
  %31 = xor i32 %15, -1
  %32 = or i32 %21, %31
  %33 = xor i32 %24, -1
  %34 = and i32 %33, %2
  %35 = and i32 %12, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %36, %19
  %38 = xor i32 %13, -1
  %39 = or i32 %38, %1
  %40 = or i32 %12, %19
  %41 = shl i32 %40, 1
  %42 = and i32 %28, %21
  %43 = and i32 %1, %0
  %44 = or i32 %2, %0
  %45 = xor i32 %44, %43
  %46 = or i32 %2, %1
  %47 = xor i32 %46, %0
  %48 = or i32 %5, %47
  %49 = xor i32 %43, -1
  %50 = and i32 %21, %49
  %51 = and i32 %28, %25
  %52 = and i32 %20, %33
  %53 = xor i32 %0, -1
  %54 = and i32 %46, %53
  %55 = or i32 %5, %54
  %56 = xor i32 %27, -1
  %57 = and i32 %56, %11
  %58 = shl i32 %57, 1
  %59 = or i32 %21, %19
  %60 = xor i32 %56, %1
  %61 = or i32 %6, %43
  %62 = or i32 %24, %21
  %63 = xor i32 %28, -1
  %64 = or i32 %6, %63
  %65 = and i32 %6, %28
  %66 = xor i32 %36, %1
  %67 = and i32 %28, %12
  %68 = and i32 %46, %0
  %69 = xor i32 %49, %2
  %70 = or i32 %12, %1
  %71 = xor i32 %70, -1
  %72 = xor i32 %71, %0
  %73 = and i32 %12, %1
  %74 = xor i32 %73, %0
  %75 = and i32 %6, %0
  %76 = or i32 %4, %0
  %77 = or i32 %20, %18
  %78 = and i32 %4, %53
  %79 = xor i32 %68, 2147483647
  %80 = xor i32 %79, %78
  %81 = shl i32 %80, 1
  %82 = or i32 %43, %21
  %83 = or i32 %27, %18
  %84 = or i32 %73, %0
  %85 = xor i32 %46, -1
  %86 = or i32 %27, %85
  %87 = and i32 %25, %53
  %88 = and i32 %12, %19
  %89 = or i32 %12, %63
  %90 = and i32 %21, %1
  %91 = shl i32 %90, 1
  %92 = xor i32 %44, -1
  %93 = or i32 %43, %92
  %94 = or i32 %63, %2
  %95 = and i32 %20, %1
  %96 = or i32 %92, %11
  %97 = and i32 %21, %33
  %98 = or i32 %73, %24
  %99 = or i32 %20, %43
  %100 = shl i32 %99, 1
  %101 = or i32 %35, %11
  %102 = and i32 %11, %2
  %103 = and i32 %102, %0
  %104 = xor i32 %103, %8
  %105 = or i32 %27, %1
  %106 = and i32 %20, %11
  %107 = xor i32 %46, %43
  %108 = or i32 %11, %2
  %109 = xor i32 %108, %0
  %110 = xor i32 %109, -1
  %111 = xor i32 %103, %110
  %112 = or i32 %103, %7
  %113 = or i32 %25, %31
  %114 = xor i32 %73, -1
  %115 = and i32 %114, %53
  %116 = or i32 %27, %63
  %117 = or i32 %35, %1
  %118 = shl i32 %117, 1
  %119 = and i32 %70, %53
  %120 = add i32 %70, 1
  %121 = xor i32 %4, %0
  %122 = or i32 %38, %11
  %123 = shl i32 %122, 1
  %124 = or i32 %85, %53
  %125 = xor i32 %75, -1
  %126 = xor i32 %78, %125
  %127 = or i32 %43, %71
  %128 = and i32 %44, %11
  %129 = add i32 %6, 1
  %130 = and i32 %13, %1
  %131 = shl i32 %130, 1
  %132 = xor i32 %13, %1
  %133 = and i32 %44, %19
  %134 = or i32 %73, %53
  %135 = shl i32 %134, 1
  %136 = and i32 %44, %18
  %137 = and i32 %20, %49
  %138 = xor i32 %27, %114
  %139 = xor i32 %4, -1
  %140 = xor i32 %24, %139
  %141 = xor i32 %44, %1
  %142 = or i32 %92, %1
  %143 = xor i32 %27, %46
  %144 = shl i32 %143, 1
  %145 = xor i32 %70, %0
  %146 = and i32 %13, %18
  %147 = or i32 %85, %0
  %148 = and i32 %56, %19
  %149 = and i32 %25, %49
  %150 = and i32 %102, %53
  %151 = and i32 %108, %0
  %152 = xor i32 %151, -1
  %153 = xor i32 %150, %152
  %154 = xor i32 %33, %2
  %155 = or i32 %71, %53
  %156 = xor i32 %43, %2
  %157 = shl i32 %35, 1
  %158 = or i32 %114, %53
  %159 = xor i32 %139, %0
  %160 = and i32 %12, %33
  %161 = or i32 %18, %21
  %162 = or i32 %6, %53
  %163 = xor i32 %162, -1
  %164 = or i32 %150, %163
  %165 = or i32 %6, %24
  %166 = and i32 %49, %2
  %167 = xor i32 %92, %1
  %168 = shl i32 %167, 1
  %169 = and i32 %139, %0
  %170 = or i32 %18, %92
  %171 = and i32 %6, %53
  %172 = xor i32 %5, -1
  %173 = xor i32 %171, %172
  %174 = or i32 %21, %1
  %175 = or i32 %24, %12
  %176 = or i32 %27, %19
  %177 = or i32 %43, %2
  %178 = xor i32 %150, %162
  %179 = or i32 %6, %0
  %180 = xor i32 %103, %179
  %181 = or i32 %139, %53
  %182 = or i32 %103, %109
  %183 = shl i32 %182, 1
  %184 = or i32 %35, %19
  %185 = xor i32 %24, %114
  %186 = and i32 %18, %56
  %187 = and i32 %15, %25
  %188 = xor i32 %35, %70
  %189 = xor i32 %31, %2
  %190 = or i32 %18, %12
  %191 = xor i32 %114, %0
  %192 = shl i32 %191, 2
  %193 = or i32 %4, %24
  %194 = xor i32 %13, %43
  %195 = xor i32 %24, %2
  %196 = xor i32 %27, %15
  %197 = or i32 %78, %75
  %198 = and i32 %20, %15
  %199 = shl i32 %198, 1
  %200 = xor i32 %27, %1
  %201 = or i32 %150, %151
  %202 = and i32 %18, %21
  %203 = shl i32 %202, 1
  %204 = and i32 %70, %0
  %205 = or i32 %18, %38
  %206 = and i32 %15, %21
  %207 = or i32 %21, %11
  %208 = and i32 %108, %53
  %209 = or i32 %103, %208
  %210 = or i32 %35, %4
  %211 = and i32 %20, %19
  %212 = xor i32 %25, %0
  %213 = and i32 %139, %53
  %214 = or i32 %70, %53
  %215 = or i32 %4, %53
  %216 = and i32 %18, %36
  %217 = or i32 %5, %171
  %218 = xor i32 %28, %2
  %219 = or i32 %139, %0
  %220 = and i32 %15, %12
  %221 = xor i32 %47, %172
  %222 = or i32 %20, %31
  %223 = or i32 %43, %38
  %224 = shl i32 %223, 2
  %225 = or i32 %46, %53
  %226 = or i32 %70, %0
  %227 = xor i32 %179, 2147483647
  %228 = or i32 %227, %103
  %229 = and i32 %36, %11
  %230 = and i32 %20, %28
  %231 = and i32 %15, %2
  %232 = or i32 %43, %85
  %233 = or i32 %27, %11
  %234 = and i32 %114, %0
  %235 = and i32 %6, %15
  %236 = or i32 %78, %68
  %237 = or i32 %35, %18
  %238 = or i32 %24, %2
  %239 = shl i32 %238, 1
  %240 = and i32 %36, %1
  %241 = shl i32 %240, 1
  %242 = or i32 %25, %63
  %243 = xor i32 %208, 2147483647
  %244 = xor i32 %243, %103
  %245 = shl i32 %244, 1
  %246 = or i32 %43, %25
  %247 = xor i32 %38, %1
  %248 = xor i32 %63, %2
  %249 = shl i32 %248, 1
  %250 = or i32 %20, %11
  %251 = xor i32 %5, %7
  %252 = and i32 %85, %53
  %253 = mul i32 %252, -11
  %254 = and i32 %73, %53
  %255 = mul i32 %254, -22
  %256 = and i32 %85, %0
  %257 = shl i32 %256, 1
  %258 = and i32 %73, %0
  %259 = mul i32 %258, 7
  %260 = and i32 %71, %53
  %261 = mul i32 %78, 9
  %262 = and i32 %71, %0
  %263 = sub i32 %215, %260
  %264 = add i32 %263, %74
  %265 = sub i32 %264, %50
  %266 = sub i32 %265, %104
  %267 = mul i32 %266, 3
  %268 = add i32 %46, %175
  %269 = add i32 %268, %165
  %270 = shl i32 %269, 2
  %271 = add i32 %262, %113
  %272 = mul i32 %271, -5
  %273 = add i32 %189, -1
  %274 = add i32 %273, %139
  %275 = add i32 %274, %177
  %276 = add i32 %275, %44
  %277 = add i32 %276, %67
  %278 = add i32 %277, %21
  %279 = add i32 %278, %214
  %280 = add i32 %279, %211
  %281 = add i32 %280, %204
  %282 = add i32 %281, %194
  %283 = add i32 %282, %188
  %284 = add i32 %283, %184
  %285 = add i32 %284, %146
  %286 = add i32 %285, %65
  %287 = add i32 %286, %52
  %288 = add i32 %287, %39
  %289 = add i32 %288, %37
  %290 = add i32 %289, %26
  %291 = add i32 %290, %228
  %292 = shl i32 %291, 1
  %293 = add i32 %0, %1
  %294 = add i32 %293, 4
  %295 = sub i32 %294, %24
  %296 = add i32 %295, %33
  %297 = add i32 %296, %49
  %298 = add i32 %297, %19
  %299 = sub i32 %298, %34
  %300 = sub i32 %299, %27
  %301 = add i32 %300, %69
  %302 = add i32 %301, %88
  %303 = add i32 %302, %89
  %304 = sub i32 %303, %94
  %305 = add i32 %304, %120
  %306 = add i32 %305, %129
  %307 = add i32 %306, %92
  %308 = add i32 %307, %154
  %309 = sub i32 %308, %156
  %310 = add i32 %309, %160
  %311 = sub i32 %310, %6
  %312 = add i32 %311, %166
  %313 = add i32 %312, %70
  %314 = sub i32 %313, %190
  %315 = add i32 %314, %195
  %316 = add i32 %315, %36
  %317 = sub i32 %316, %218
  %318 = sub i32 %317, %220
  %319 = sub i32 %318, %4
  %320 = sub i32 %319, %231
  %321 = sub i32 %320, %17
  %322 = sub i32 %321, %14
  %323 = sub i32 %322, %29
  %324 = sub i32 %323, %30
  %325 = add i32 %324, %32
  %326 = sub i32 %325, %41
  %327 = add i32 %326, %42
  %328 = add i32 %327, %45
  %329 = sub i32 %328, %51
  %330 = sub i32 %329, %59
  %331 = add i32 %330, %60
  %332 = sub i32 %331, %61
  %333 = add i32 %332, %62
  %334 = add i32 %333, %64
  %335 = sub i32 %334, %66
  %336 = sub i32 %335, %68
  %337 = add i32 %336, %72
  %338 = sub i32 %337, %75
  %339 = sub i32 %338, %76
  %340 = add i32 %339, %77
  %341 = sub i32 %340, %82
  %342 = sub i32 %341, %83
  %343 = add i32 %342, %84
  %344 = add i32 %343, %86
  %345 = add i32 %344, %87
  %346 = add i32 %345, %93
  %347 = sub i32 %346, %95
  %348 = add i32 %347, %96
  %349 = add i32 %348, %97
  %350 = add i32 %349, %98
  %351 = sub i32 %350, %101
  %352 = sub i32 %351, %105
  %353 = sub i32 %352, %106
  %354 = sub i32 %353, %107
  %355 = add i32 %354, %115
  %356 = sub i32 %355, %116
  %357 = add i32 %356, %119
  %358 = add i32 %357, %121
  %359 = add i32 %358, %124
  %360 = sub i32 %359, %127
  %361 = add i32 %360, %128
  %362 = sub i32 %361, %132
  %363 = sub i32 %362, %133
  %364 = sub i32 %363, %136
  %365 = add i32 %364, %137
  %366 = add i32 %365, %138
  %367 = add i32 %366, %140
  %368 = add i32 %367, %141
  %369 = add i32 %368, %142
  %370 = add i32 %369, %145
  %371 = sub i32 %370, %147
  %372 = add i32 %371, %148
  %373 = add i32 %372, %149
  %374 = sub i32 %373, %155
  %375 = sub i32 %374, %157
  %376 = sub i32 %375, %158
  %377 = add i32 %376, %159
  %378 = add i32 %377, %161
  %379 = sub i32 %378, %169
  %380 = sub i32 %379, %170
  %381 = add i32 %380, %174
  %382 = sub i32 %381, %171
  %383 = add i32 %382, %176
  %384 = add i32 %383, %181
  %385 = add i32 %384, %185
  %386 = add i32 %385, %186
  %387 = sub i32 %386, %187
  %388 = add i32 %387, %162
  %389 = sub i32 %388, %193
  %390 = add i32 %389, %196
  %391 = sub i32 %390, %200
  %392 = add i32 %391, %205
  %393 = add i32 %392, %206
  %394 = sub i32 %393, %207
  %395 = sub i32 %394, %210
  %396 = sub i32 %395, %212
  %397 = add i32 %396, %213
  %398 = add i32 %397, %216
  %399 = sub i32 %398, %219
  %400 = add i32 %399, %222
  %401 = sub i32 %400, %225
  %402 = add i32 %401, %226
  %403 = sub i32 %402, %229
  %404 = add i32 %403, %230
  %405 = add i32 %404, %179
  %406 = sub i32 %405, %47
  %407 = sub i32 %406, %232
  %408 = sub i32 %407, %233
  %409 = sub i32 %408, %234
  %410 = sub i32 %409, %235
  %411 = sub i32 %410, %237
  %412 = sub i32 %411, %239
  %413 = add i32 %412, %242
  %414 = sub i32 %413, %246
  %415 = sub i32 %414, %247
  %416 = sub i32 %415, %249
  %417 = sub i32 %416, %250
  %418 = sub i32 %417, %23
  %419 = add i32 %418, %48
  %420 = add i32 %419, %55
  %421 = sub i32 %420, %58
  %422 = sub i32 %421, %91
  %423 = sub i32 %422, %100
  %424 = sub i32 %423, %111
  %425 = add i32 %424, %112
  %426 = sub i32 %425, %118
  %427 = sub i32 %426, %123
  %428 = add i32 %427, %126
  %429 = sub i32 %428, %131
  %430 = sub i32 %429, %135
  %431 = sub i32 %430, %144
  %432 = add i32 %431, %153
  %433 = add i32 %432, %164
  %434 = sub i32 %433, %168
  %435 = sub i32 %434, %173
  %436 = sub i32 %435, %178
  %437 = add i32 %436, %180
  %438 = sub i32 %437, %192
  %439 = add i32 %438, %197
  %440 = sub i32 %439, %199
  %441 = sub i32 %440, %201
  %442 = sub i32 %441, %203
  %443 = sub i32 %442, %209
  %444 = add i32 %443, %217
  %445 = sub i32 %444, %221
  %446 = sub i32 %445, %224
  %447 = sub i32 %446, %236
  %448 = sub i32 %447, %241
  %449 = sub i32 %448, %251
  %450 = add i32 %449, %253
  %451 = add i32 %450, %255
  %452 = sub i32 %451, %257
  %453 = add i32 %452, %259
  %454 = add i32 %453, %261
  %455 = sub i32 %454, %183
  %456 = add i32 %455, %272
  %457 = sub i32 %456, %81
  %458 = sub i32 %457, %245
  %459 = add i32 %458, %270
  %460 = add i32 %459, %267
  %461 = add i32 %460, %292
  %462 = icmp eq i32 %461, %10
  %463 = select i1 %462, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %464 = tail call i32 @puts(i8* nonnull dereferenceable(1) %463)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
