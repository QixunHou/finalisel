; ModuleID = '../.././c_source_file/0264_path_condition_crackme.c'
source_filename = "../.././c_source_file/0264_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = xor i32 %1, -1
  %6 = or i32 %5, %0
  %7 = xor i32 %6, -1
  %8 = or i32 %4, %7
  %9 = or i32 %1, %0
  %10 = xor i32 %9, %2
  %11 = add i32 %8, %10
  %12 = xor i32 %0, -1
  %13 = xor i32 %2, -1
  %14 = or i32 %13, %1
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %12
  %17 = xor i32 %1, %0
  %18 = xor i32 %17, -1
  %19 = and i32 %18, %2
  %20 = shl i32 %19, 1
  %21 = or i32 %2, %1
  %22 = and i32 %21, %0
  %23 = and i32 %13, %0
  %24 = xor i32 %23, -1
  %25 = and i32 %24, %5
  %26 = xor i32 %2, %0
  %27 = and i32 %26, %9
  %28 = and i32 %5, %2
  %29 = and i32 %28, %12
  %30 = xor i32 %2, %1
  %31 = or i32 %30, %12
  %32 = xor i32 %31, -1
  %33 = or i32 %29, %32
  %34 = and i32 %2, %1
  %35 = and i32 %34, %0
  %36 = and i32 %30, %12
  %37 = or i32 %35, %36
  %38 = xor i32 %29, %31
  %39 = xor i32 %34, -1
  %40 = or i32 %39, %12
  %41 = shl i32 %9, 1
  %42 = or i32 %13, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %24, %1
  %45 = or i32 %14, %12
  %46 = and i32 %13, %1
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %12
  %49 = shl i32 %48, 1
  %50 = and i32 %30, %0
  %51 = and i32 %5, %0
  %52 = or i32 %30, %51
  %53 = and i32 %42, %1
  %54 = or i32 %4, %17
  %55 = or i32 %26, %7
  %56 = and i32 %42, %17
  %57 = xor i32 %26, -1
  %58 = or i32 %51, %57
  %59 = and i32 %14, %12
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %9, -1
  %63 = or i32 %5, %2
  %64 = and i32 %63, %0
  %65 = xor i32 %64, -1
  %66 = xor i32 %29, %65
  %67 = and i32 %34, %12
  %68 = xor i32 %50, -1
  %69 = xor i32 %67, %68
  %70 = xor i32 %4, %6
  %71 = xor i32 %51, -1
  %72 = and i32 %57, %71
  %73 = and i32 %1, %0
  %74 = xor i32 %30, -1
  %75 = or i32 %73, %74
  %76 = or i32 %15, %0
  %77 = shl i32 %76, 1
  %78 = xor i32 %21, %0
  %79 = xor i32 %35, -1
  %80 = xor i32 %78, %79
  %81 = and i32 %6, %74
  %82 = shl i32 %81, 1
  %83 = and i32 %30, %6
  %84 = xor i32 %4, %47
  %85 = and i32 %6, %2
  %86 = and i32 %74, %0
  %87 = and i32 %57, %18
  %88 = shl i32 %87, 1
  %89 = xor i32 %21, -1
  %90 = xor i32 %89, %0
  %91 = or i32 %13, %62
  %92 = and i32 %14, %0
  %93 = or i32 %61, %5
  %94 = shl i32 %30, 2
  %95 = and i32 %39, %0
  %96 = xor i32 %15, %0
  %97 = xor i32 %43, %1
  %98 = shl i32 %97, 1
  %99 = or i32 %34, %51
  %100 = shl i32 %99, 1
  %101 = or i32 %4, %5
  %102 = shl i32 %101, 2
  %103 = or i32 %46, %12
  %104 = or i32 %73, %2
  %105 = or i32 %26, %1
  %106 = and i32 %28, %0
  %107 = xor i32 %30, %0
  %108 = or i32 %106, %107
  %109 = or i32 %26, %18
  %110 = and i32 %17, %24
  %111 = and i32 %71, %2
  %112 = xor i32 %73, -1
  %113 = and i32 %13, %112
  %114 = xor i32 %4, -1
  %115 = xor i32 %114, %1
  %116 = or i32 %74, %0
  %117 = and i32 %21, %12
  %118 = xor i32 %117, %79
  %119 = or i32 %57, %1
  %120 = xor i32 %107, -1
  %121 = xor i32 %106, %120
  %122 = add i32 %30, 1
  %123 = xor i32 %23, %39
  %124 = or i32 %73, %15
  %125 = or i32 %47, %0
  %126 = or i32 %17, %61
  %127 = or i32 %30, %0
  %128 = xor i32 %127, -1
  %129 = or i32 %106, %128
  %130 = or i32 %17, %43
  %131 = and i32 %42, %18
  %132 = and i32 %60, %1
  %133 = and i32 %13, %18
  %134 = shl i32 %133, 2
  %135 = or i32 %4, %89
  %136 = or i32 %4, %62
  %137 = or i32 %43, %5
  %138 = or i32 %21, %12
  %139 = or i32 %74, %12
  %140 = shl i32 %139, 1
  %141 = xor i32 %42, %1
  %142 = or i32 %57, %18
  %143 = and i32 %26, %18
  %144 = or i32 %4, %1
  %145 = xor i32 %60, %1
  %146 = and i32 %9, %57
  %147 = shl i32 %146, 1
  %148 = and i32 %26, %112
  %149 = or i32 %23, %18
  %150 = shl i32 %149, 1
  %151 = and i32 %63, %12
  %152 = or i32 %106, %151
  %153 = or i32 %13, %18
  %154 = xor i32 %42, %73
  %155 = shl i32 %154, 1
  %156 = and i32 %26, %1
  %157 = or i32 %67, %22
  %158 = shl i32 %157, 1
  %159 = xor i32 %51, %39
  %160 = xor i32 %61, %1
  %161 = or i32 %62, %2
  %162 = or i32 %35, %78
  %163 = or i32 %46, %51
  %164 = and i32 %24, %18
  %165 = or i32 %4, %18
  %166 = or i32 %43, %1
  %167 = xor i32 %14, %73
  %168 = add i32 %34, 1
  %169 = shl i32 %51, 1
  %170 = xor i32 %60, %73
  %171 = shl i32 %170, 2
  %172 = and i32 %13, %71
  %173 = and i32 %57, %112
  %174 = xor i32 %22, 2147483647
  %175 = xor i32 %174, %67
  %176 = shl i32 %175, 1
  %177 = or i32 %26, %62
  %178 = xor i32 %36, %79
  %179 = xor i32 %14, %0
  %180 = xor i32 %23, %1
  %181 = shl i32 %180, 1
  %182 = and i32 %30, %71
  %183 = and i32 %26, %17
  %184 = or i32 %23, %1
  %185 = and i32 %9, %74
  %186 = or i32 %89, %12
  %187 = or i32 %57, %7
  %188 = and i32 %6, %13
  %189 = xor i32 %21, %73
  %190 = and i32 %24, %1
  %191 = xor i32 %46, %0
  %192 = and i32 %47, %12
  %193 = xor i32 %23, %14
  %194 = xor i32 %4, %1
  %195 = or i32 %39, %0
  %196 = or i32 %51, %74
  %197 = shl i32 %196, 1
  %198 = xor i32 %35, %107
  %199 = and i32 %89, %12
  %200 = and i32 %46, %12
  %201 = and i32 %89, %0
  %202 = and i32 %46, %0
  %203 = and i32 %15, %12
  %204 = shl i32 %67, 2
  %205 = and i32 %15, %0
  %206 = mul i32 %205, 20
  %207 = mul i32 %35, 15
  %208 = add i32 %26, %0
  %209 = add i32 %208, %153
  %210 = add i32 %209, %91
  %211 = add i32 %210, %186
  %212 = add i32 %211, %124
  %213 = add i32 %212, %105
  %214 = add i32 %213, %96
  %215 = add i32 %214, %55
  %216 = add i32 %215, %45
  %217 = add i32 %216, %16
  %218 = sub i32 %201, %203
  %219 = mul i32 %218, 6
  %220 = sub i32 %200, %202
  %221 = mul i32 %220, 11
  %222 = add i32 %143, %115
  %223 = mul i32 %222, 5
  %224 = add i32 %183, %89
  %225 = mul i32 %224, 3
  %226 = add i32 %217, %58
  %227 = add i32 %226, %37
  %228 = shl i32 %227, 1
  %229 = add i32 %1, 2
  %230 = add i32 %229, %18
  %231 = add i32 %230, %62
  %232 = add i32 %231, %71
  %233 = sub i32 %232, %41
  %234 = add i32 %233, %43
  %235 = sub i32 %234, %23
  %236 = add i32 %235, %61
  %237 = add i32 %236, %85
  %238 = add i32 %237, %104
  %239 = sub i32 %238, %111
  %240 = sub i32 %239, %113
  %241 = add i32 %240, %122
  %242 = sub i32 %241, %161
  %243 = sub i32 %242, %21
  %244 = add i32 %243, %114
  %245 = add i32 %244, %168
  %246 = sub i32 %245, %169
  %247 = sub i32 %246, %172
  %248 = add i32 %247, %188
  %249 = sub i32 %248, %20
  %250 = sub i32 %249, %22
  %251 = sub i32 %250, %25
  %252 = add i32 %251, %27
  %253 = add i32 %252, %40
  %254 = add i32 %253, %44
  %255 = add i32 %254, %50
  %256 = sub i32 %255, %52
  %257 = sub i32 %256, %53
  %258 = add i32 %257, %54
  %259 = add i32 %258, %56
  %260 = sub i32 %259, %59
  %261 = add i32 %260, %70
  %262 = add i32 %261, %72
  %263 = add i32 %262, %75
  %264 = add i32 %263, %83
  %265 = sub i32 %264, %84
  %266 = sub i32 %265, %86
  %267 = sub i32 %266, %90
  %268 = sub i32 %267, %92
  %269 = add i32 %268, %93
  %270 = sub i32 %269, %94
  %271 = add i32 %270, %95
  %272 = sub i32 %271, %103
  %273 = add i32 %272, %109
  %274 = sub i32 %273, %110
  %275 = add i32 %274, %116
  %276 = sub i32 %275, %119
  %277 = sub i32 %276, %123
  %278 = add i32 %277, %125
  %279 = add i32 %278, %126
  %280 = sub i32 %279, %130
  %281 = sub i32 %280, %131
  %282 = add i32 %281, %132
  %283 = sub i32 %282, %134
  %284 = add i32 %283, %135
  %285 = sub i32 %284, %136
  %286 = sub i32 %285, %137
  %287 = sub i32 %286, %138
  %288 = sub i32 %287, %141
  %289 = add i32 %288, %142
  %290 = sub i32 %289, %144
  %291 = sub i32 %290, %145
  %292 = sub i32 %291, %148
  %293 = add i32 %292, %156
  %294 = sub i32 %293, %159
  %295 = add i32 %294, %160
  %296 = add i32 %295, %163
  %297 = add i32 %296, %164
  %298 = add i32 %297, %165
  %299 = sub i32 %298, %166
  %300 = sub i32 %299, %167
  %301 = add i32 %300, %31
  %302 = add i32 %301, %173
  %303 = add i32 %302, %177
  %304 = add i32 %303, %179
  %305 = sub i32 %304, %182
  %306 = sub i32 %305, %184
  %307 = sub i32 %306, %185
  %308 = sub i32 %307, %187
  %309 = sub i32 %308, %117
  %310 = add i32 %309, %189
  %311 = sub i32 %310, %190
  %312 = sub i32 %311, %191
  %313 = add i32 %312, %192
  %314 = add i32 %313, %193
  %315 = add i32 %314, %194
  %316 = add i32 %315, %195
  %317 = sub i32 %316, %199
  %318 = sub i32 %317, %33
  %319 = add i32 %318, %38
  %320 = sub i32 %319, %49
  %321 = sub i32 %320, %66
  %322 = sub i32 %321, %69
  %323 = sub i32 %322, %77
  %324 = add i32 %323, %80
  %325 = sub i32 %324, %82
  %326 = sub i32 %325, %88
  %327 = sub i32 %326, %98
  %328 = sub i32 %327, %100
  %329 = sub i32 %328, %102
  %330 = add i32 %329, %108
  %331 = sub i32 %330, %118
  %332 = add i32 %331, %121
  %333 = sub i32 %332, %129
  %334 = sub i32 %333, %140
  %335 = sub i32 %334, %147
  %336 = sub i32 %335, %150
  %337 = add i32 %336, %152
  %338 = sub i32 %337, %155
  %339 = add i32 %338, %162
  %340 = sub i32 %339, %171
  %341 = sub i32 %340, %178
  %342 = sub i32 %341, %181
  %343 = sub i32 %342, %197
  %344 = sub i32 %343, %198
  %345 = add i32 %344, %204
  %346 = add i32 %345, %206
  %347 = add i32 %346, %207
  %348 = sub i32 %347, %158
  %349 = add i32 %348, %219
  %350 = add i32 %349, %221
  %351 = add i32 %350, %223
  %352 = add i32 %351, %225
  %353 = sub i32 %352, %176
  %354 = add i32 %353, %228
  %355 = icmp eq i32 %11, %354
  %356 = select i1 %355, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %357 = tail call i32 @puts(i8* nonnull dereferenceable(1) %356)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
