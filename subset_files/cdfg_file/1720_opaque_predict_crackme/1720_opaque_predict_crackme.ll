; ModuleID = '../.././c_source_file/1720_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1720_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %1, %0
  %8 = xor i32 %2, %1
  %9 = and i32 %8, %7
  %10 = xor i32 %5, -1
  %11 = or i32 %10, %4
  %12 = xor i32 %11, -1
  %13 = xor i32 %4, %3
  %14 = or i32 %13, %12
  %15 = sub i32 %14, %9
  %16 = and i32 %1, %0
  %17 = xor i32 %2, %0
  %18 = or i32 %17, %16
  %19 = xor i32 %1, -1
  %20 = and i32 %17, %19
  %21 = and i32 %19, %0
  %22 = or i32 %21, %2
  %23 = xor i32 %2, -1
  %24 = or i32 %16, %23
  %25 = or i32 %23, %0
  %26 = xor i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %25, %27
  %29 = xor i32 %0, -1
  %30 = and i32 %2, %1
  %31 = and i32 %30, %29
  %32 = and i32 %8, %0
  %33 = or i32 %31, %32
  %34 = or i32 %21, %23
  %35 = and i32 %23, %1
  %36 = xor i32 %35, -1
  %37 = xor i32 %7, -1
  %38 = xor i32 %37, %2
  %39 = or i32 %2, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %40, %1
  %42 = or i32 %8, %21
  %43 = or i32 %35, %21
  %44 = and i32 %23, %0
  %45 = or i32 %44, %1
  %46 = or i32 %2, %1
  %47 = or i32 %46, %0
  %48 = or i32 %26, %23
  %49 = or i32 %17, %26
  %50 = xor i32 %31, -1
  %51 = xor i32 %32, %50
  %52 = and i32 %7, %2
  %53 = or i32 %35, %0
  %54 = or i32 %19, %0
  %55 = and i32 %54, %23
  %56 = or i32 %26, %2
  %57 = xor i32 %8, -1
  %58 = or i32 %16, %57
  %59 = xor i32 %46, -1
  %60 = or i32 %16, %59
  %61 = or i32 %17, %21
  %62 = shl i32 %61, 1
  %63 = xor i32 %17, -1
  %64 = or i32 %63, %19
  %65 = and i32 %2, %0
  %66 = or i32 %65, %27
  %67 = and i32 %19, %2
  %68 = and i32 %67, %29
  %69 = and i32 %57, %0
  %70 = or i32 %68, %69
  %71 = xor i32 %44, -1
  %72 = and i32 %26, %71
  %73 = xor i32 %65, %54
  %74 = xor i32 %25, -1
  %75 = xor i32 %74, %1
  %76 = or i32 %23, %1
  %77 = xor i32 %76, %16
  %78 = or i32 %17, %37
  %79 = or i32 %40, %1
  %80 = and i32 %7, %23
  %81 = or i32 %65, %59
  %82 = and i32 %57, %29
  %83 = xor i32 %39, %16
  %84 = or i32 %19, %2
  %85 = and i32 %84, %0
  %86 = or i32 %68, %85
  %87 = or i32 %8, %37
  %88 = xor i32 %16, -1
  %89 = and i32 %23, %88
  %90 = and i32 %46, %0
  %91 = xor i32 %90, %50
  %92 = and i32 %71, %19
  %93 = and i32 %54, %63
  %94 = and i32 %63, %88
  %95 = xor i32 %65, %36
  %96 = or i32 %16, %74
  %97 = add i32 %46, 1
  %98 = and i32 %39, %19
  %99 = xor i32 %88, %2
  %100 = and i32 %17, %7
  %101 = and i32 %67, %0
  %102 = xor i32 %84, %29
  %103 = xor i32 %102, %101
  %104 = and i32 %54, %57
  %105 = and i32 %84, %29
  %106 = or i32 %101, %105
  %107 = and i32 %39, %27
  %108 = xor i32 %30, -1
  %109 = and i32 %108, %0
  %110 = xor i32 %71, %1
  %111 = xor i32 %57, %0
  %112 = or i32 %44, %30
  %113 = xor i32 %54, -1
  %114 = add i32 %54, 1
  %115 = or i32 %26, %63
  %116 = xor i32 %25, %16
  %117 = or i32 %76, %29
  %118 = or i32 %113, %2
  %119 = or i32 %21, %57
  %120 = shl i32 %119, 1
  %121 = and i32 %30, %0
  %122 = and i32 %46, %29
  %123 = or i32 %121, %122
  %124 = or i32 %16, %63
  %125 = xor i32 %59, %0
  %126 = shl i32 %35, 2
  %127 = xor i32 %21, -1
  %128 = and i32 %71, %1
  %129 = shl i32 %128, 1
  %130 = or i32 %23, %113
  %131 = or i32 %8, %0
  %132 = or i32 %30, %29
  %133 = or i32 %59, %29
  %134 = and i32 %36, %0
  %135 = xor i32 %46, %0
  %136 = xor i32 %121, -1
  %137 = xor i32 %135, %136
  %138 = xor i32 %39, %1
  %139 = xor i32 %8, %0
  %140 = or i32 %101, %139
  %141 = or i32 %74, %1
  %142 = shl i32 %141, 1
  %143 = or i32 %16, %2
  %144 = xor i32 %113, %2
  %145 = xor i32 %7, %2
  %146 = xor i32 %35, %0
  %147 = or i32 %17, %1
  %148 = shl i32 %147, 1
  %149 = or i32 %40, %27
  %150 = and i32 %39, %1
  %151 = xor i32 %122, %136
  %152 = xor i32 %65, -1
  %153 = and i32 %152, %1
  %154 = xor i32 %76, -1
  %155 = or i32 %154, %0
  %156 = and i32 %76, %29
  %157 = and i32 %152, %19
  %158 = shl i32 %157, 1
  %159 = xor i32 %36, %0
  %160 = and i32 %8, %88
  %161 = and i32 %8, %29
  %162 = xor i32 %161, 2147483647
  %163 = xor i32 %162, %121
  %164 = shl i32 %163, 1
  %165 = or i32 %16, %154
  %166 = and i32 %25, %1
  %167 = shl i32 %166, 1
  %168 = xor i32 %76, %0
  %169 = xor i32 %16, %2
  %170 = or i32 %35, %29
  %171 = or i32 %63, %27
  %172 = xor i32 %44, %108
  %173 = or i32 %36, %0
  %174 = xor i32 %46, %16
  %175 = xor i32 %54, %2
  %176 = xor i32 %44, %1
  %177 = or i32 %121, %135
  %178 = and i32 %17, %1
  %179 = xor i32 %44, %76
  %180 = shl i32 %179, 1
  %181 = and i32 %26, %63
  %182 = shl i32 %181, 1
  %183 = and i32 %39, %26
  %184 = and i32 %7, %63
  %185 = and i32 %23, %27
  %186 = xor i32 %65, %46
  %187 = xor i32 %152, %1
  %188 = or i32 %108, %0
  %189 = or i32 %27, %2
  %190 = and i32 %17, %88
  %191 = or i32 %154, %29
  %192 = and i32 %57, %127
  %193 = or i32 %65, %19
  %194 = or i32 %44, %19
  %195 = and i32 %57, %88
  %196 = and i32 %17, %127
  %197 = xor i32 %85, -1
  %198 = xor i32 %68, %197
  %199 = or i32 %26, %40
  %200 = or i32 %23, %37
  %201 = or i32 %17, %27
  %202 = and i32 %25, %26
  %203 = and i32 %25, %19
  %204 = and i32 %108, %29
  %205 = or i32 %65, %1
  %206 = and i32 %152, %27
  %207 = or i32 %74, %19
  %208 = xor i32 %21, %36
  %209 = or i32 %65, %35
  %210 = and i32 %36, %29
  %211 = and i32 %26, %23
  %212 = add i32 %2, 1
  %213 = or i32 %121, %161
  %214 = or i32 %16, %40
  %215 = shl i32 %214, 1
  %216 = xor i32 %21, %108
  %217 = xor i32 %121, %139
  %218 = shl i32 %217, 1
  %219 = or i32 %8, %16
  %220 = or i32 %37, %2
  %221 = or i32 %57, %37
  %222 = or i32 %36, %29
  %223 = or i32 %57, %0
  %224 = or i32 %65, %26
  %225 = and i32 %26, %152
  %226 = xor i32 %30, %0
  %227 = or i32 %108, %29
  %228 = xor i32 %127, %2
  %229 = shl i32 %228, 1
  %230 = and i32 %127, %2
  %231 = and i32 %17, %54
  %232 = and i32 %59, %29
  %233 = mul i32 %232, 21
  %234 = and i32 %35, %29
  %235 = shl i32 %234, 4
  %236 = and i32 %59, %0
  %237 = mul i32 %236, 13
  %238 = and i32 %35, %0
  %239 = and i32 %154, %29
  %240 = shl i32 %239, 1
  %241 = and i32 %154, %0
  %242 = mul i32 %241, 10
  %243 = xor i32 %4, -1
  %244 = and i32 %5, %3
  %245 = and i32 %244, %243
  %246 = xor i32 %5, %3
  %247 = and i32 %246, %4
  %248 = xor i32 %245, -1
  %249 = xor i32 %247, %248
  %250 = xor i32 %5, %4
  %251 = xor i32 %250, -1
  %252 = or i32 %13, %251
  %253 = xor i32 %244, %4
  %254 = or i32 %13, %10
  %255 = and i32 %4, %3
  %256 = or i32 %255, %5
  %257 = or i32 %4, %3
  %258 = xor i32 %257, -1
  %259 = xor i32 %3, -1
  %260 = and i32 %259, %4
  %261 = xor i32 %260, -1
  %262 = xor i32 %246, -1
  %263 = and i32 %262, %261
  %264 = or i32 %259, %4
  %265 = or i32 %255, %10
  %266 = or i32 %5, %4
  %267 = xor i32 %266, -1
  %268 = xor i32 %267, %3
  %269 = and i32 %259, %5
  %270 = and i32 %269, %4
  %271 = or i32 %246, %4
  %272 = xor i32 %270, %271
  %273 = xor i32 %12, %3
  %274 = and i32 %13, %10
  %275 = and i32 %257, %10
  %276 = xor i32 %255, -1
  %277 = and i32 %246, %276
  %278 = or i32 %259, %5
  %279 = and i32 %278, %243
  %280 = xor i32 %279, -1
  %281 = xor i32 %270, %280
  %282 = and i32 %246, %264
  %283 = and i32 %10, %3
  %284 = xor i32 %283, -1
  %285 = xor i32 %260, %284
  %286 = and i32 %5, %4
  %287 = xor i32 %286, -1
  %288 = xor i32 %13, -1
  %289 = and i32 %287, %288
  %290 = and i32 %13, %5
  %291 = and i32 %244, %4
  %292 = or i32 %5, %3
  %293 = and i32 %292, %243
  %294 = or i32 %291, %293
  %295 = xor i32 %292, %4
  %296 = xor i32 %295, -1
  %297 = xor i32 %291, %296
  %298 = and i32 %292, %4
  %299 = or i32 %245, %298
  %300 = xor i32 %261, %5
  %301 = and i32 %266, %13
  %302 = and i32 %10, %4
  %303 = xor i32 %302, %3
  %304 = xor i32 %246, %4
  %305 = xor i32 %255, %5
  %306 = or i32 %302, %259
  %307 = xor i32 %264, -1
  %308 = or i32 %250, %307
  %309 = or i32 %302, %288
  %310 = and i32 %10, %276
  %311 = or i32 %292, %243
  %312 = and i32 %11, %288
  %313 = xor i32 %244, -1
  %314 = xor i32 %302, %313
  %315 = and i32 %250, %13
  %316 = shl i32 %315, 1
  %317 = or i32 %246, %260
  %318 = or i32 %255, %267
  %319 = shl i32 %318, 1
  %320 = and i32 %246, %261
  %321 = or i32 %13, %5
  %322 = shl i32 %321, 1
  %323 = or i32 %291, %295
  %324 = and i32 %313, %4
  %325 = or i32 %10, %3
  %326 = xor i32 %302, %325
  %327 = xor i32 %325, -1
  %328 = or i32 %255, %327
  %329 = and i32 %13, %251
  %330 = xor i32 %293, -1
  %331 = xor i32 %291, %330
  %332 = xor i32 %298, %248
  %333 = or i32 %250, %13
  %334 = or i32 %284, %4
  %335 = and i32 %266, %288
  %336 = shl i32 %335, 1
  %337 = and i32 %11, %259
  %338 = and i32 %251, %259
  %339 = xor i32 %271, 1073741823
  %340 = or i32 %339, %270
  %341 = xor i32 %291, %304
  %342 = or i32 %307, %5
  %343 = shl i32 %342, 1
  %344 = and i32 %250, %3
  %345 = or i32 %283, %260
  %346 = and i32 %246, %243
  %347 = shl i32 %346, 1
  %348 = and i32 %257, %251
  %349 = or i32 %286, %288
  %350 = or i32 %255, %12
  %351 = or i32 %250, %3
  %352 = and i32 %10, %288
  %353 = and i32 %257, %5
  %354 = or i32 %260, %5
  %355 = shl i32 %354, 1
  %356 = and i32 %251, %3
  %357 = or i32 %244, %243
  %358 = or i32 %260, %262
  %359 = xor i32 %327, %4
  %360 = xor i32 %302, -1
  %361 = xor i32 %360, %3
  %362 = xor i32 %266, %255
  %363 = or i32 %292, %4
  %364 = and i32 %11, %13
  %365 = or i32 %260, %10
  %366 = or i32 %291, %346
  %367 = xor i32 %287, %3
  %368 = or i32 %302, %244
  %369 = and i32 %246, %257
  %370 = xor i32 %346, 2147483647
  %371 = xor i32 %370, %291
  %372 = or i32 %302, %3
  %373 = and i32 %250, %261
  %374 = or i32 %283, %243
  %375 = shl i32 %374, 1
  %376 = and i32 %287, %259
  %377 = add i32 %244, 1
  %378 = or i32 %325, %243
  %379 = or i32 %250, %258
  %380 = xor i32 %260, %313
  %381 = and i32 %251, %288
  %382 = and i32 %250, %264
  %383 = or i32 %270, %279
  %384 = or i32 %250, %255
  %385 = shl i32 %384, 2
  %386 = xor i32 %286, %264
  %387 = and i32 %284, %243
  %388 = and i32 %251, %276
  %389 = or i32 %251, %3
  %390 = and i32 %13, %287
  %391 = and i32 %11, %3
  %392 = shl i32 %391, 1
  %393 = add i32 %4, 1
  %394 = or i32 %246, %307
  %395 = or i32 %245, %247
  %396 = and i32 %262, %276
  %397 = and i32 %250, %288
  %398 = and i32 %251, %261
  %399 = xor i32 %325, %4
  %400 = and i32 %313, %243
  %401 = shl i32 %400, 1
  %402 = and i32 %284, %4
  %403 = xor i32 %284, %4
  %404 = xor i32 %325, %255
  %405 = and i32 %264, %10
  %406 = shl i32 %405, 1
  %407 = or i32 %251, %258
  %408 = or i32 %286, %283
  %409 = and i32 %266, %3
  %410 = shl i32 %11, 1
  %411 = or i32 %267, %259
  %412 = or i32 %10, %288
  %413 = shl i32 %412, 1
  %414 = or i32 %255, %251
  %415 = or i32 %327, %243
  %416 = or i32 %13, %267
  %417 = or i32 %251, %307
  %418 = and i32 %325, %4
  %419 = shl i32 %418, 2
  %420 = add i32 %266, 1
  %421 = and i32 %250, %257
  %422 = and i32 %257, %262
  %423 = shl i32 %259, 1
  %424 = and i32 %269, %243
  %425 = or i32 %246, %243
  %426 = xor i32 %424, %425
  %427 = xor i32 %304, 2147483647
  %428 = xor i32 %427, %270
  %429 = and i32 %250, %276
  %430 = shl i32 %429, 1
  %431 = or i32 %302, %327
  %432 = xor i32 %264, %5
  %433 = or i32 %12, %259
  %434 = or i32 %244, %260
  %435 = and i32 %276, %5
  %436 = or i32 %284, %243
  %437 = or i32 %260, %251
  %438 = xor i32 %425, -1
  %439 = or i32 %424, %438
  %440 = xor i32 %258, %5
  %441 = or i32 %313, %243
  %442 = or i32 %250, %259
  %443 = xor i32 %307, %5
  %444 = or i32 %267, %3
  %445 = or i32 %10, %307
  %446 = shl i32 %445, 1
  %447 = or i32 %283, %4
  %448 = or i32 %262, %258
  %449 = or i32 %288, %5
  %450 = xor i32 %292, %255
  %451 = and i32 %13, %360
  %452 = xor i32 %292, -1
  %453 = and i32 %452, %243
  %454 = and i32 %283, %243
  %455 = mul i32 %454, 29
  %456 = and i32 %452, %4
  %457 = shl i32 %456, 3
  %458 = and i32 %283, %4
  %459 = mul i32 %458, 9
  %460 = and i32 %327, %243
  %461 = mul i32 %460, 15
  %462 = and i32 %327, %4
  %463 = shl i32 %462, 4
  %464 = mul i32 %291, 19
  %465 = sub i32 -2, %8
  %466 = add i32 %465, %189
  %467 = add i32 %466, %44
  %468 = add i32 %467, %216
  %469 = add i32 %468, %204
  %470 = add i32 %469, %199
  %471 = add i32 %470, %195
  %472 = add i32 %471, %178
  %473 = add i32 %472, %174
  %474 = add i32 %473, %165
  %475 = add i32 %474, %135
  %476 = add i32 %475, %146
  %477 = add i32 %476, %138
  %478 = add i32 %477, %110
  %479 = add i32 %478, %53
  %480 = add i32 %479, %47
  %481 = add i32 %480, %276
  %482 = add i32 %481, %264
  %483 = add i32 %482, %258
  %484 = add i32 %483, %353
  %485 = add i32 %484, %451
  %486 = add i32 %485, %434
  %487 = add i32 %486, %433
  %488 = add i32 %487, %415
  %489 = add i32 %488, %407
  %490 = add i32 %489, %368
  %491 = add i32 %490, %367
  %492 = add i32 %491, %364
  %493 = add i32 %492, %359
  %494 = add i32 %493, %277
  %495 = add i32 %494, %268
  %496 = add i32 %495, %371
  %497 = add i32 %496, %428
  %498 = shl i32 %497, 1
  %499 = add i32 %238, %74
  %500 = add i32 %499, %186
  %501 = sub i32 %500, %109
  %502 = add i32 %501, %96
  %503 = add i32 %502, %352
  %504 = sub i32 %503, %310
  %505 = sub i32 %504, %311
  %506 = add i32 %505, %324
  %507 = mul i32 %506, 5
  %508 = add i32 %25, %114
  %509 = sub i32 %508, %201
  %510 = sub i32 %509, %133
  %511 = sub i32 %510, %137
  %512 = add i32 %511, %358
  %513 = add i32 %512, %245
  %514 = mul i32 %513, 3
  %515 = add i32 %378, %58
  %516 = add i32 %515, %340
  %517 = shl i32 %516, 2
  %518 = sub i32 %453, %31
  %519 = mul i32 %518, 7
  %520 = add i32 %54, %1
  %521 = sub i32 %127, %520
  %522 = add i32 %521, 1
  %523 = add i32 %522, %16
  %524 = add i32 %523, %2
  %525 = add i32 %524, %26
  %526 = add i32 %525, %212
  %527 = sub i32 %526, %22
  %528 = add i32 %527, %24
  %529 = sub i32 %528, %34
  %530 = add i32 %529, %36
  %531 = add i32 %530, %38
  %532 = sub i32 %531, %39
  %533 = add i32 %532, %48
  %534 = sub i32 %533, %52
  %535 = sub i32 %534, %55
  %536 = add i32 %535, %56
  %537 = add i32 %536, %80
  %538 = sub i32 %537, %89
  %539 = add i32 %538, %97
  %540 = add i32 %539, %99
  %541 = sub i32 %540, %118
  %542 = sub i32 %541, %130
  %543 = sub i32 %542, %143
  %544 = add i32 %543, %144
  %545 = sub i32 %544, %145
  %546 = add i32 %545, %17
  %547 = sub i32 %546, %169
  %548 = sub i32 %547, %175
  %549 = add i32 %548, %40
  %550 = add i32 %549, %185
  %551 = sub i32 %550, %65
  %552 = add i32 %551, %200
  %553 = sub i32 %552, %211
  %554 = add i32 %553, %220
  %555 = add i32 %554, %8
  %556 = add i32 %555, %46
  %557 = add i32 %556, %230
  %558 = add i32 %557, %3
  %559 = sub i32 %558, %20
  %560 = add i32 %559, %18
  %561 = sub i32 %560, %28
  %562 = sub i32 %561, %41
  %563 = sub i32 %562, %42
  %564 = sub i32 %563, %43
  %565 = add i32 %564, %45
  %566 = sub i32 %565, %49
  %567 = sub i32 %566, %60
  %568 = sub i32 %567, %64
  %569 = add i32 %568, %66
  %570 = sub i32 %569, %72
  %571 = add i32 %570, %73
  %572 = sub i32 %571, %75
  %573 = sub i32 %572, %77
  %574 = sub i32 %573, %78
  %575 = add i32 %574, %79
  %576 = sub i32 %575, %81
  %577 = sub i32 %576, %82
  %578 = sub i32 %577, %83
  %579 = sub i32 %578, %87
  %580 = sub i32 %579, %92
  %581 = sub i32 %580, %93
  %582 = add i32 %581, %94
  %583 = add i32 %582, %95
  %584 = add i32 %583, %98
  %585 = add i32 %584, %100
  %586 = add i32 %585, %104
  %587 = add i32 %586, %107
  %588 = add i32 %587, %111
  %589 = sub i32 %588, %112
  %590 = sub i32 %589, %115
  %591 = sub i32 %590, %116
  %592 = sub i32 %591, %117
  %593 = sub i32 %592, %124
  %594 = sub i32 %593, %125
  %595 = sub i32 %594, %126
  %596 = sub i32 %595, %131
  %597 = sub i32 %596, %132
  %598 = sub i32 %597, %134
  %599 = sub i32 %598, %149
  %600 = add i32 %599, %150
  %601 = add i32 %600, %153
  %602 = add i32 %601, %155
  %603 = sub i32 %602, %156
  %604 = sub i32 %603, %159
  %605 = sub i32 %604, %160
  %606 = add i32 %605, %32
  %607 = add i32 %606, %168
  %608 = sub i32 %607, %170
  %609 = add i32 %608, %139
  %610 = sub i32 %609, %171
  %611 = sub i32 %610, %172
  %612 = sub i32 %611, %173
  %613 = add i32 %612, %176
  %614 = add i32 %613, %183
  %615 = add i32 %614, %184
  %616 = sub i32 %615, %187
  %617 = sub i32 %616, %188
  %618 = add i32 %617, %90
  %619 = add i32 %618, %190
  %620 = sub i32 %619, %191
  %621 = add i32 %620, %192
  %622 = sub i32 %621, %193
  %623 = add i32 %622, %194
  %624 = add i32 %623, %196
  %625 = sub i32 %624, %202
  %626 = add i32 %625, %203
  %627 = add i32 %626, %205
  %628 = sub i32 %627, %206
  %629 = sub i32 %628, %207
  %630 = add i32 %629, %208
  %631 = sub i32 %630, %209
  %632 = sub i32 %631, %210
  %633 = sub i32 %632, %219
  %634 = add i32 %633, %69
  %635 = sub i32 %634, %221
  %636 = sub i32 %635, %222
  %637 = sub i32 %636, %223
  %638 = add i32 %637, %224
  %639 = sub i32 %638, %225
  %640 = sub i32 %639, %226
  %641 = sub i32 %640, %227
  %642 = sub i32 %641, %229
  %643 = add i32 %642, %231
  %644 = sub i32 %643, %121
  %645 = add i32 %644, %4
  %646 = add i32 %645, %393
  %647 = sub i32 %646, %423
  %648 = sub i32 %647, %33
  %649 = sub i32 %648, %51
  %650 = sub i32 %649, %62
  %651 = sub i32 %650, %70
  %652 = sub i32 %651, %86
  %653 = sub i32 %652, %91
  %654 = add i32 %653, %103
  %655 = add i32 %654, %106
  %656 = sub i32 %655, %120
  %657 = add i32 %656, %123
  %658 = sub i32 %657, %129
  %659 = add i32 %658, %140
  %660 = sub i32 %659, %142
  %661 = sub i32 %660, %148
  %662 = add i32 %661, %151
  %663 = sub i32 %662, %158
  %664 = sub i32 %663, %167
  %665 = sub i32 %664, %177
  %666 = sub i32 %665, %180
  %667 = sub i32 %666, %182
  %668 = sub i32 %667, %198
  %669 = sub i32 %668, %213
  %670 = sub i32 %669, %215
  %671 = add i32 %670, %233
  %672 = add i32 %671, %235
  %673 = add i32 %672, %237
  %674 = sub i32 %673, %240
  %675 = add i32 %674, %242
  %676 = add i32 %675, %13
  %677 = add i32 %676, %260
  %678 = sub i32 %677, %218
  %679 = add i32 %678, %254
  %680 = sub i32 %679, %256
  %681 = add i32 %680, %246
  %682 = add i32 %681, %265
  %683 = sub i32 %682, %274
  %684 = add i32 %683, %275
  %685 = add i32 %684, %266
  %686 = sub i32 %685, %290
  %687 = sub i32 %686, %300
  %688 = add i32 %687, %305
  %689 = add i32 %688, %327
  %690 = sub i32 %689, %365
  %691 = add i32 %690, %377
  %692 = add i32 %691, %283
  %693 = sub i32 %692, %250
  %694 = add i32 %693, %420
  %695 = sub i32 %694, %432
  %696 = sub i32 %695, %435
  %697 = add i32 %696, %440
  %698 = add i32 %697, %286
  %699 = add i32 %698, %443
  %700 = add i32 %699, %449
  %701 = sub i32 %700, %164
  %702 = sub i32 %701, %252
  %703 = add i32 %702, %253
  %704 = sub i32 %703, %263
  %705 = sub i32 %704, %273
  %706 = add i32 %705, %282
  %707 = sub i32 %706, %285
  %708 = add i32 %707, %289
  %709 = add i32 %708, %301
  %710 = sub i32 %709, %303
  %711 = sub i32 %710, %304
  %712 = sub i32 %711, %306
  %713 = sub i32 %712, %308
  %714 = sub i32 %713, %309
  %715 = sub i32 %714, %312
  %716 = sub i32 %715, %314
  %717 = add i32 %716, %317
  %718 = add i32 %717, %320
  %719 = sub i32 %718, %322
  %720 = sub i32 %719, %326
  %721 = sub i32 %720, %328
  %722 = add i32 %721, %295
  %723 = add i32 %722, %329
  %724 = sub i32 %723, %333
  %725 = add i32 %724, %334
  %726 = add i32 %725, %337
  %727 = sub i32 %726, %338
  %728 = sub i32 %727, %343
  %729 = sub i32 %728, %344
  %730 = sub i32 %729, %345
  %731 = add i32 %730, %348
  %732 = add i32 %731, %349
  %733 = sub i32 %732, %350
  %734 = add i32 %733, %351
  %735 = sub i32 %734, %355
  %736 = sub i32 %735, %356
  %737 = sub i32 %736, %357
  %738 = sub i32 %737, %361
  %739 = sub i32 %738, %362
  %740 = add i32 %739, %363
  %741 = add i32 %740, %330
  %742 = sub i32 %741, %369
  %743 = add i32 %742, %372
  %744 = sub i32 %743, %373
  %745 = sub i32 %744, %376
  %746 = add i32 %745, %379
  %747 = add i32 %746, %380
  %748 = sub i32 %747, %381
  %749 = sub i32 %748, %382
  %750 = sub i32 %749, %386
  %751 = add i32 %750, %387
  %752 = sub i32 %751, %388
  %753 = add i32 %752, %389
  %754 = sub i32 %753, %390
  %755 = sub i32 %754, %394
  %756 = sub i32 %755, %396
  %757 = add i32 %756, %397
  %758 = sub i32 %757, %398
  %759 = add i32 %758, %399
  %760 = sub i32 %759, %402
  %761 = sub i32 %760, %403
  %762 = sub i32 %761, %404
  %763 = sub i32 %762, %406
  %764 = sub i32 %763, %408
  %765 = sub i32 %764, %409
  %766 = sub i32 %765, %410
  %767 = sub i32 %766, %411
  %768 = sub i32 %767, %413
  %769 = sub i32 %768, %414
  %770 = add i32 %769, %416
  %771 = sub i32 %770, %417
  %772 = sub i32 %771, %421
  %773 = sub i32 %772, %422
  %774 = add i32 %773, %431
  %775 = sub i32 %774, %436
  %776 = sub i32 %775, %437
  %777 = add i32 %776, %441
  %778 = add i32 %777, %442
  %779 = sub i32 %778, %444
  %780 = sub i32 %779, %446
  %781 = sub i32 %780, %447
  %782 = add i32 %781, %448
  %783 = sub i32 %782, %450
  %784 = sub i32 %783, %249
  %785 = sub i32 %784, %272
  %786 = add i32 %785, %281
  %787 = sub i32 %786, %294
  %788 = sub i32 %787, %297
  %789 = sub i32 %788, %299
  %790 = sub i32 %789, %316
  %791 = sub i32 %790, %319
  %792 = add i32 %791, %323
  %793 = sub i32 %792, %331
  %794 = sub i32 %793, %332
  %795 = sub i32 %794, %336
  %796 = add i32 %795, %341
  %797 = sub i32 %796, %347
  %798 = sub i32 %797, %366
  %799 = sub i32 %798, %375
  %800 = add i32 %799, %383
  %801 = sub i32 %800, %385
  %802 = sub i32 %801, %392
  %803 = sub i32 %802, %395
  %804 = sub i32 %803, %401
  %805 = sub i32 %804, %419
  %806 = sub i32 %805, %426
  %807 = sub i32 %806, %430
  %808 = sub i32 %807, %439
  %809 = add i32 %808, %455
  %810 = add i32 %809, %457
  %811 = add i32 %810, %459
  %812 = add i32 %811, %461
  %813 = sub i32 %812, %463
  %814 = add i32 %813, %464
  %815 = add i32 %814, %519
  %816 = add i32 %815, %517
  %817 = add i32 %816, %514
  %818 = add i32 %817, %507
  %819 = add i32 %818, %498
  %820 = icmp eq i32 %15, %819
  %821 = select i1 %820, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %822 = tail call i32 @puts(i8* nonnull dereferenceable(1) %821)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
