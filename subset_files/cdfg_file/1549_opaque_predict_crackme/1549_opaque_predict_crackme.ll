; ModuleID = '../.././c_source_file/1549_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1549_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = add i32 %4, 1
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, %0
  %11 = xor i32 %2, %0
  %12 = and i32 %11, %1
  %13 = add i32 %10, %8
  %14 = add i32 %13, %12
  %15 = add i32 %14, %7
  %16 = xor i32 %3, -1
  %17 = or i32 %16, %4
  %18 = xor i32 %4, %3
  %19 = and i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = xor i32 %1, -1
  %23 = or i32 %22, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %1, %0
  %26 = or i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = or i32 %27, %0
  %29 = and i32 %1, %0
  %30 = xor i32 %29, %2
  %31 = xor i32 %9, -1
  %32 = and i32 %23, %31
  %33 = xor i32 %2, -1
  %34 = or i32 %33, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %25, -1
  %37 = or i32 %35, %36
  %38 = and i32 %33, %0
  %39 = or i32 %33, %1
  %40 = xor i32 %38, %39
  %41 = xor i32 %0, -1
  %42 = and i32 %33, %1
  %43 = or i32 %42, %41
  %44 = xor i32 %11, -1
  %45 = or i32 %44, %24
  %46 = xor i32 %29, -1
  %47 = and i32 %33, %46
  %48 = and i32 %2, %0
  %49 = or i32 %48, %22
  %50 = and i32 %2, %1
  %51 = and i32 %50, %41
  %52 = and i32 %26, %0
  %53 = or i32 %51, %52
  %54 = or i32 %48, %1
  %55 = shl i32 %54, 1
  %56 = and i32 %22, %0
  %57 = or i32 %56, %33
  %58 = and i32 %25, %33
  %59 = and i32 %11, %36
  %60 = xor i32 %56, %2
  %61 = xor i32 %48, -1
  %62 = and i32 %25, %61
  %63 = and i32 %44, %36
  %64 = or i32 %1, %0
  %65 = xor i32 %64, -1
  %66 = or i32 %33, %65
  %67 = shl i32 %66, 1
  %68 = and i32 %64, %33
  %69 = shl i32 %68, 1
  %70 = and i32 %22, %2
  %71 = and i32 %70, %0
  %72 = xor i32 %10, -1
  %73 = xor i32 %71, %72
  %74 = and i32 %9, %23
  %75 = shl i32 %74, 1
  %76 = or i32 %48, %24
  %77 = xor i32 %56, -1
  %78 = and i32 %31, %77
  %79 = and i32 %61, %1
  %80 = or i32 %48, %36
  %81 = or i32 %31, %65
  %82 = or i32 %50, %0
  %83 = xor i32 %39, -1
  %84 = or i32 %83, %41
  %85 = xor i32 %64, %2
  %86 = or i32 %2, %0
  %87 = xor i32 %86, -1
  %88 = or i32 %25, %87
  %89 = or i32 %31, %41
  %90 = or i32 %29, %31
  %91 = xor i32 %52, -1
  %92 = xor i32 %51, %91
  %93 = xor i32 %48, %1
  %94 = xor i32 %26, %29
  %95 = and i32 %50, %0
  %96 = xor i32 %26, %0
  %97 = or i32 %95, %96
  %98 = and i32 %64, %2
  %99 = or i32 %29, %35
  %100 = or i32 %38, %25
  %101 = xor i32 %87, %1
  %102 = and i32 %86, %36
  %103 = or i32 %25, %2
  %104 = or i32 %11, %1
  %105 = xor i32 %50, %0
  %106 = xor i32 %86, %1
  %107 = or i32 %11, %36
  %108 = and i32 %86, %25
  %109 = xor i32 %35, %1
  %110 = and i32 %64, %44
  %111 = and i32 %9, %64
  %112 = or i32 %29, %83
  %113 = and i32 %9, %41
  %114 = or i32 %95, %113
  %115 = or i32 %71, %10
  %116 = and i32 %34, %22
  %117 = xor i32 %31, %0
  %118 = shl i32 %117, 1
  %119 = and i32 %11, %46
  %120 = or i32 %44, %65
  %121 = and i32 %26, %41
  %122 = xor i32 %121, -1
  %123 = xor i32 %95, %122
  %124 = or i32 %25, %33
  %125 = add i32 %29, 1
  %126 = or i32 %48, %27
  %127 = xor i32 %50, -1
  %128 = and i32 %127, %41
  %129 = or i32 %11, %22
  %130 = or i32 %9, %24
  %131 = or i32 %38, %50
  %132 = shl i32 %131, 2
  %133 = or i32 %11, %56
  %134 = shl i32 %133, 1
  %135 = and i32 %70, %41
  %136 = or i32 %9, %41
  %137 = xor i32 %135, %136
  %138 = xor i32 %42, -1
  %139 = xor i32 %138, %0
  %140 = or i32 %87, %1
  %141 = or i32 %42, %0
  %142 = and i32 %11, %64
  %143 = or i32 %9, %29
  %144 = xor i32 %38, -1
  %145 = and i32 %144, %1
  %146 = shl i32 %145, 1
  %147 = xor i32 %23, %2
  %148 = shl i32 %147, 1
  %149 = or i32 %42, %56
  %150 = shl i32 %42, 1
  %151 = add i32 %2, 1
  %152 = or i32 %9, %56
  %153 = or i32 %31, %24
  %154 = xor i32 %86, %29
  %155 = and i32 %44, %46
  %156 = and i32 %39, %41
  %157 = shl i32 %156, 1
  %158 = shl i32 %64, 1
  %159 = or i32 %83, %0
  %160 = or i32 %29, %33
  %161 = shl i32 %160, 1
  %162 = and i32 %23, %2
  %163 = and i32 %44, %22
  %164 = shl i32 %113, 1
  %165 = or i32 %50, %41
  %166 = or i32 %35, %22
  %167 = or i32 %33, %36
  %168 = shl i32 %167, 1
  %169 = or i32 %36, %2
  %170 = or i32 %38, %83
  %171 = xor i32 %48, %26
  %172 = xor i32 %96, 2147483647
  %173 = xor i32 %172, %95
  %174 = and i32 %11, %22
  %175 = or i32 %44, %1
  %176 = or i32 %44, %36
  %177 = or i32 %27, %41
  %178 = and i32 %31, %46
  %179 = shl i32 %22, 1
  %180 = or i32 %26, %41
  %181 = or i32 %25, %44
  %182 = or i32 %29, %87
  %183 = or i32 %11, %65
  %184 = xor i32 %42, %0
  %185 = xor i32 %38, %1
  %186 = xor i32 %61, %1
  %187 = shl i32 %186, 1
  %188 = or i32 %22, %2
  %189 = and i32 %188, %0
  %190 = xor i32 %189, -1
  %191 = xor i32 %135, %190
  %192 = or i32 %138, %0
  %193 = and i32 %64, %31
  %194 = shl i32 %193, 1
  %195 = or i32 %31, %0
  %196 = shl i32 %195, 1
  %197 = or i32 %9, %0
  %198 = xor i32 %197, -1
  %199 = or i32 %71, %198
  %200 = and i32 %36, %2
  %201 = and i32 %11, %23
  %202 = and i32 %44, %1
  %203 = xor i32 %34, %1
  %204 = xor i32 %83, %0
  %205 = and i32 %188, %41
  %206 = or i32 %71, %205
  %207 = and i32 %9, %46
  %208 = shl i32 %207, 2
  %209 = and i32 %25, %2
  %210 = or i32 %33, %24
  %211 = shl i32 %210, 1
  %212 = and i32 %86, %1
  %213 = xor i32 %188, %0
  %214 = or i32 %71, %213
  %215 = or i32 %87, %36
  %216 = or i32 %87, %22
  %217 = and i32 %39, %0
  %218 = or i32 %95, %72
  %219 = or i32 %50, %56
  %220 = and i32 %31, %41
  %221 = and i32 %33, %77
  %222 = or i32 %11, %25
  %223 = and i32 %44, %77
  %224 = or i32 %48, %25
  %225 = or i32 %138, %41
  %226 = and i32 %23, %33
  %227 = shl i32 %226, 1
  %228 = or i32 %39, %0
  %229 = or i32 %26, %0
  %230 = or i32 %25, %35
  %231 = or i32 %29, %2
  %232 = xor i32 %127, %0
  %233 = xor i32 %56, %138
  %234 = xor i32 %95, %10
  %235 = or i32 %11, %24
  %236 = and i32 %61, %22
  %237 = or i32 %9, %65
  %238 = xor i32 %213, -1
  %239 = xor i32 %71, %238
  %240 = and i32 %33, %36
  %241 = or i32 %95, %121
  %242 = xor i32 %65, %2
  %243 = and i32 %25, %144
  %244 = or i32 %135, %189
  %245 = shl i32 %244, 1
  %246 = and i32 %11, %25
  %247 = and i32 %9, %0
  %248 = xor i32 %247, 2147483647
  %249 = xor i32 %248, %51
  %250 = shl i32 %249, 1
  %251 = add i32 %64, 1
  %252 = and i32 %61, %36
  %253 = add i32 %50, 1
  %254 = add i32 %48, 1
  %255 = and i32 %27, %41
  %256 = and i32 %42, %41
  %257 = and i32 %27, %0
  %258 = and i32 %42, %0
  %259 = mul i32 %258, 36
  %260 = and i32 %83, %41
  %261 = mul i32 %95, 14
  %262 = add i32 %231, %242
  %263 = add i32 %262, %27
  %264 = add i32 %263, %57
  %265 = add i32 %264, %96
  %266 = add i32 %265, %222
  %267 = add i32 %266, %217
  %268 = add i32 %267, %163
  %269 = add i32 %268, %154
  %270 = add i32 %269, %128
  %271 = add i32 %270, %104
  %272 = add i32 %271, %94
  %273 = add i32 %272, %88
  %274 = add i32 %273, %82
  %275 = add i32 %274, %81
  %276 = add i32 %275, %76
  %277 = add i32 %276, %32
  %278 = add i32 %277, %97
  %279 = add i32 %278, %173
  %280 = shl i32 %279, 1
  %281 = add i32 %11, %200
  %282 = add i32 %281, %165
  %283 = add i32 %282, %182
  %284 = mul i32 %283, -5
  %285 = or i32 %257, %256
  %286 = mul i32 %285, 20
  %287 = add i32 %260, %255
  %288 = mul i32 %287, 13
  %289 = add i32 %174, %108
  %290 = shl i32 %289, 2
  %291 = sub i32 %60, %203
  %292 = add i32 %291, %19
  %293 = mul i32 %292, 3
  %294 = sub i32 4, %0
  %295 = add i32 %294, %1
  %296 = add i32 %295, %25
  %297 = sub i32 %296, %56
  %298 = add i32 %297, %125
  %299 = add i32 %298, %151
  %300 = sub i32 %299, %29
  %301 = sub i32 %300, %179
  %302 = add i32 %301, %251
  %303 = sub i32 %302, %30
  %304 = add i32 %303, %47
  %305 = sub i32 %304, %58
  %306 = sub i32 %305, %60
  %307 = add i32 %306, %85
  %308 = add i32 %307, %98
  %309 = sub i32 %308, %34
  %310 = add i32 %309, %103
  %311 = add i32 %310, %86
  %312 = add i32 %311, %124
  %313 = sub i32 %312, %158
  %314 = add i32 %313, %162
  %315 = sub i32 %314, %169
  %316 = sub i32 %315, %209
  %317 = add i32 %316, %44
  %318 = sub i32 %317, %39
  %319 = sub i32 %318, %221
  %320 = add i32 %319, %35
  %321 = add i32 %320, %240
  %322 = add i32 %321, %253
  %323 = add i32 %322, %254
  %324 = add i32 %323, %28
  %325 = add i32 %324, %37
  %326 = add i32 %325, %40
  %327 = add i32 %326, %43
  %328 = sub i32 %327, %45
  %329 = add i32 %328, %49
  %330 = sub i32 %329, %59
  %331 = sub i32 %330, %62
  %332 = sub i32 %331, %63
  %333 = sub i32 %332, %67
  %334 = sub i32 %333, %69
  %335 = sub i32 %334, %52
  %336 = add i32 %335, %78
  %337 = sub i32 %336, %79
  %338 = sub i32 %337, %80
  %339 = add i32 %338, %84
  %340 = sub i32 %339, %89
  %341 = add i32 %340, %90
  %342 = add i32 %341, %93
  %343 = add i32 %342, %99
  %344 = add i32 %343, %100
  %345 = add i32 %344, %101
  %346 = sub i32 %345, %102
  %347 = add i32 %346, %105
  %348 = sub i32 %347, %106
  %349 = sub i32 %348, %107
  %350 = add i32 %349, %109
  %351 = sub i32 %350, %110
  %352 = sub i32 %351, %111
  %353 = add i32 %352, %112
  %354 = sub i32 %353, %116
  %355 = add i32 %354, %119
  %356 = add i32 %355, %120
  %357 = sub i32 %356, %126
  %358 = add i32 %357, %129
  %359 = sub i32 %358, %130
  %360 = add i32 %359, %139
  %361 = sub i32 %360, %140
  %362 = sub i32 %361, %141
  %363 = sub i32 %362, %142
  %364 = add i32 %363, %143
  %365 = sub i32 %364, %148
  %366 = sub i32 %365, %149
  %367 = sub i32 %366, %150
  %368 = add i32 %367, %152
  %369 = add i32 %368, %153
  %370 = sub i32 %369, %155
  %371 = sub i32 %370, %159
  %372 = sub i32 %371, %161
  %373 = add i32 %372, %166
  %374 = sub i32 %373, %168
  %375 = sub i32 %374, %170
  %376 = sub i32 %375, %171
  %377 = add i32 %376, %175
  %378 = sub i32 %377, %176
  %379 = add i32 %378, %177
  %380 = sub i32 %379, %178
  %381 = add i32 %380, %180
  %382 = add i32 %381, %181
  %383 = sub i32 %382, %183
  %384 = add i32 %383, %184
  %385 = sub i32 %384, %185
  %386 = sub i32 %385, %192
  %387 = sub i32 %386, %201
  %388 = add i32 %387, %202
  %389 = sub i32 %388, %204
  %390 = sub i32 %389, %211
  %391 = add i32 %390, %212
  %392 = add i32 %391, %215
  %393 = add i32 %392, %216
  %394 = sub i32 %393, %219
  %395 = add i32 %394, %220
  %396 = add i32 %395, %223
  %397 = add i32 %396, %224
  %398 = sub i32 %397, %225
  %399 = sub i32 %398, %227
  %400 = add i32 %399, %228
  %401 = sub i32 %400, %229
  %402 = sub i32 %401, %230
  %403 = add i32 %402, %232
  %404 = sub i32 %403, %233
  %405 = sub i32 %404, %235
  %406 = add i32 %405, %236
  %407 = sub i32 %406, %237
  %408 = sub i32 %407, %243
  %409 = sub i32 %408, %197
  %410 = sub i32 %409, %246
  %411 = sub i32 %410, %252
  %412 = sub i32 %411, %51
  %413 = add i32 %412, %17
  %414 = add i32 %413, %18
  %415 = add i32 %414, %7
  %416 = add i32 %415, %53
  %417 = sub i32 %416, %55
  %418 = add i32 %417, %73
  %419 = sub i32 %418, %75
  %420 = add i32 %419, %92
  %421 = add i32 %420, %114
  %422 = sub i32 %421, %115
  %423 = sub i32 %422, %118
  %424 = sub i32 %423, %123
  %425 = sub i32 %424, %132
  %426 = sub i32 %425, %134
  %427 = add i32 %426, %137
  %428 = sub i32 %427, %146
  %429 = sub i32 %428, %157
  %430 = sub i32 %429, %164
  %431 = sub i32 %430, %187
  %432 = sub i32 %431, %191
  %433 = sub i32 %432, %194
  %434 = sub i32 %433, %196
  %435 = sub i32 %434, %199
  %436 = add i32 %435, %206
  %437 = sub i32 %436, %208
  %438 = add i32 %437, %214
  %439 = add i32 %438, %218
  %440 = add i32 %439, %234
  %441 = sub i32 %440, %239
  %442 = add i32 %441, %241
  %443 = add i32 %442, %259
  %444 = add i32 %443, %261
  %445 = sub i32 %444, %245
  %446 = add i32 %445, %286
  %447 = add i32 %446, %288
  %448 = add i32 %447, %290
  %449 = add i32 %448, %21
  %450 = sub i32 %449, %250
  %451 = add i32 %450, %284
  %452 = add i32 %451, %293
  %453 = add i32 %452, %280
  %454 = icmp eq i32 %15, %453
  %455 = select i1 %454, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %456 = tail call i32 @puts(i8* nonnull dereferenceable(1) %455)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
