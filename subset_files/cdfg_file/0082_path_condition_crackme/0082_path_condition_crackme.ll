; ModuleID = '../.././c_source_file/0082_path_condition_crackme.c'
source_filename = "../.././c_source_file/0082_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %0, -1
  %5 = xor i32 %2, -1
  %6 = and i32 %5, %1
  %7 = or i32 %6, %4
  %8 = shl i32 %7, 1
  %9 = and i32 %1, %0
  %10 = or i32 %2, %0
  %11 = xor i32 %10, %9
  %12 = xor i32 %2, %0
  %13 = xor i32 %12, -1
  %14 = add i32 %12, 1
  %15 = xor i32 %1, %0
  %16 = or i32 %12, %15
  %17 = xor i32 %1, -1
  %18 = or i32 %17, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %12, %19
  %21 = xor i32 %6, %0
  %22 = and i32 %5, %0
  %23 = or i32 %22, %15
  %24 = shl i32 %23, 1
  %25 = xor i32 %2, %1
  %26 = or i32 %25, %0
  %27 = xor i32 %10, %1
  %28 = xor i32 %15, -1
  %29 = or i32 %13, %28
  %30 = or i32 %19, %2
  %31 = shl i32 %30, 1
  %32 = and i32 %2, %1
  %33 = or i32 %32, %4
  %34 = and i32 %18, %13
  %35 = and i32 %10, %28
  %36 = or i32 %12, %17
  %37 = shl i32 %36, 1
  %38 = and i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %39, %28
  %41 = and i32 %32, %0
  %42 = or i32 %2, %1
  %43 = xor i32 %42, %0
  %44 = or i32 %41, %43
  %45 = and i32 %25, %0
  %46 = shl i32 %45, 1
  %47 = or i32 %5, %1
  %48 = or i32 %47, %0
  %49 = xor i32 %32, -1
  %50 = add i32 %32, 1
  %51 = or i32 %1, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %38, %52
  %54 = or i32 %25, %52
  %55 = xor i32 %25, -1
  %56 = or i32 %55, %4
  %57 = and i32 %15, %2
  %58 = and i32 %25, %18
  %59 = or i32 %5, %0
  %60 = and i32 %59, %28
  %61 = xor i32 %47, -1
  %62 = or i32 %61, %4
  %63 = and i32 %42, %4
  %64 = xor i32 %9, -1
  %65 = xor i32 %64, %2
  %66 = and i32 %17, %0
  %67 = xor i32 %66, -1
  %68 = xor i32 %67, %2
  %69 = and i32 %32, %4
  %70 = xor i32 %45, 2147483647
  %71 = xor i32 %70, %69
  %72 = or i32 %41, %63
  %73 = and i32 %17, %2
  %74 = and i32 %73, %0
  %75 = or i32 %17, %2
  %76 = xor i32 %75, %4
  %77 = xor i32 %76, %74
  %78 = shl i32 %32, 1
  %79 = and i32 %75, %4
  %80 = xor i32 %74, -1
  %81 = xor i32 %79, %80
  %82 = or i32 %9, %61
  %83 = xor i32 %10, -1
  %84 = and i32 %28, %2
  %85 = xor i32 %25, %0
  %86 = xor i32 %85, -1
  %87 = or i32 %41, %86
  %88 = or i32 %15, %83
  %89 = or i32 %22, %17
  %90 = or i32 %9, %83
  %91 = xor i32 %22, -1
  %92 = and i32 %91, %1
  %93 = xor i32 %59, %9
  %94 = xor i32 %19, %2
  %95 = xor i32 %52, %2
  %96 = and i32 %13, %28
  %97 = and i32 %12, %17
  %98 = and i32 %15, %39
  %99 = or i32 %69, %45
  %100 = or i32 %5, %28
  %101 = or i32 %49, %0
  %102 = shl i32 %101, 1
  %103 = or i32 %32, %0
  %104 = and i32 %13, %67
  %105 = xor i32 %6, -1
  %106 = or i32 %105, %4
  %107 = and i32 %18, %55
  %108 = xor i32 %61, %0
  %109 = and i32 %105, %4
  %110 = xor i32 %51, %2
  %111 = add i32 %18, 1
  %112 = or i32 %22, %28
  %113 = or i32 %12, %1
  %114 = or i32 %13, %19
  %115 = and i32 %5, %67
  %116 = or i32 %38, %1
  %117 = or i32 %74, %79
  %118 = xor i32 %38, %105
  %119 = xor i32 %38, %51
  %120 = xor i32 %59, %1
  %121 = shl i32 %120, 1
  %122 = or i32 %47, %4
  %123 = or i32 %6, %66
  %124 = add i32 %6, 1
  %125 = xor i32 %66, %49
  %126 = and i32 %47, %4
  %127 = xor i32 %55, %0
  %128 = or i32 %66, %2
  %129 = xor i32 %42, -1
  %130 = or i32 %38, %129
  %131 = xor i32 %59, -1
  %132 = xor i32 %131, %1
  %133 = or i32 %9, %5
  %134 = and i32 %55, %64
  %135 = or i32 %25, %9
  %136 = or i32 %15, %13
  %137 = or i32 %13, %1
  %138 = shl i32 %137, 1
  %139 = and i32 %13, %1
  %140 = or i32 %66, %13
  %141 = and i32 %67, %2
  %142 = shl i32 %141, 1
  %143 = and i32 %73, %4
  %144 = or i32 %25, %4
  %145 = xor i32 %144, -1
  %146 = or i32 %143, %145
  %147 = xor i32 %105, %0
  %148 = or i32 %38, %28
  %149 = or i32 %38, %17
  %150 = or i32 %22, %32
  %151 = shl i32 %51, 1
  %152 = or i32 %25, %19
  %153 = or i32 %12, %52
  %154 = and i32 %49, %0
  %155 = xor i32 %66, %2
  %156 = or i32 %15, %2
  %157 = and i32 %5, %64
  %158 = or i32 %52, %2
  %159 = xor i32 %49, %0
  %160 = and i32 %15, %13
  %161 = and i32 %49, %4
  %162 = xor i32 %22, %49
  %163 = shl i32 %162, 1
  %164 = or i32 %131, %28
  %165 = and i32 %12, %1
  %166 = and i32 %42, %0
  %167 = xor i32 %166, -1
  %168 = xor i32 %69, %167
  %169 = or i32 %83, %17
  %170 = xor i32 %47, %9
  %171 = and i32 %51, %5
  %172 = xor i32 %38, %18
  %173 = or i32 %49, %4
  %174 = or i32 %9, %2
  %175 = and i32 %59, %15
  %176 = and i32 %25, %4
  %177 = or i32 %41, %176
  %178 = xor i32 %22, %47
  %179 = or i32 %12, %9
  %180 = and i32 %64, %2
  %181 = or i32 %25, %66
  %182 = or i32 %42, %4
  %183 = xor i32 %83, %1
  %184 = and i32 %12, %64
  %185 = and i32 %25, %51
  %186 = or i32 %38, %15
  %187 = and i32 %75, %0
  %188 = xor i32 %187, -1
  %189 = xor i32 %143, %188
  %190 = or i32 %13, %17
  %191 = xor i32 %22, %1
  %192 = and i32 %25, %67
  %193 = and i32 %12, %67
  %194 = and i32 %12, %18
  %195 = or i32 %15, %131
  %196 = shl i32 %195, 1
  %197 = or i32 %83, %28
  %198 = or i32 %131, %1
  %199 = and i32 %12, %51
  %200 = and i32 %91, %17
  %201 = and i32 %5, %28
  %202 = and i32 %10, %1
  %203 = or i32 %66, %5
  %204 = or i32 %9, %55
  %205 = xor i32 %41, -1
  %206 = xor i32 %63, %205
  %207 = add i32 %47, 1
  %208 = xor i32 %74, %26
  %209 = xor i32 %74, %86
  %210 = and i32 %47, %0
  %211 = and i32 %18, %2
  %212 = shl i32 %211, 1
  %213 = xor i32 %176, %205
  %214 = and i32 %15, %5
  %215 = or i32 %129, %0
  %216 = or i32 %55, %19
  %217 = xor i32 %66, %105
  %218 = or i32 %129, %4
  %219 = or i32 %15, %5
  %220 = xor i32 %39, %1
  %221 = and i32 %55, %4
  %222 = or i32 %38, %6
  %223 = shl i32 %47, 2
  %224 = or i32 %5, %19
  %225 = and i32 %51, %2
  %226 = and i32 %51, %55
  %227 = or i32 %66, %55
  %228 = xor i32 %32, %0
  %229 = and i32 %55, %67
  %230 = xor i32 %91, %1
  %231 = and i32 %13, %64
  %232 = add i32 %59, 1
  %233 = or i32 %22, %61
  %234 = and i32 %13, %17
  %235 = and i32 %59, %17
  %236 = add i32 %66, 1
  %237 = xor i32 %43, %205
  %238 = or i32 %131, %17
  %239 = or i32 %69, %166
  %240 = and i32 %15, %91
  %241 = shl i32 %240, 1
  %242 = and i32 %25, %64
  %243 = or i32 %28, %2
  %244 = or i32 %83, %1
  %245 = or i32 %61, %0
  %246 = xor i32 %42, %9
  %247 = or i32 %6, %0
  %248 = xor i32 %129, %0
  %249 = or i32 %9, %13
  %250 = xor i32 %18, %2
  %251 = and i32 %129, %4
  %252 = and i32 %6, %4
  %253 = mul i32 %252, -10
  %254 = and i32 %129, %0
  %255 = and i32 %6, %0
  %256 = and i32 %61, %4
  %257 = mul i32 %256, -12
  %258 = and i32 %61, %0
  %259 = mul i32 %258, 33
  %260 = mul i32 %41, -13
  %261 = add i32 %4, %1
  %262 = add i32 %261, %66
  %263 = add i32 %262, %214
  %264 = add i32 %263, %95
  %265 = add i32 %264, %254
  %266 = add i32 %265, %210
  %267 = add i32 %266, %193
  %268 = add i32 %267, %190
  %269 = add i32 %268, %183
  %270 = add i32 %269, %89
  %271 = add i32 %270, %209
  %272 = add i32 %271, %177
  %273 = add i32 %272, %71
  %274 = shl i32 %273, 1
  %275 = sub i32 %68, %251
  %276 = add i32 %275, %149
  %277 = sub i32 %276, %147
  %278 = sub i32 %277, %127
  %279 = add i32 %278, %26
  %280 = sub i32 %279, %206
  %281 = mul i32 %280, 3
  %282 = add i32 %65, %94
  %283 = add i32 %282, %56
  %284 = shl i32 %283, 2
  %285 = or i32 %69, %255
  %286 = mul i32 %285, 15
  %287 = sub i32 %98, %203
  %288 = mul i32 %287, 5
  %289 = sub i32 -2, %0
  %290 = sub i32 %289, %15
  %291 = sub i32 %290, %18
  %292 = add i32 %291, %5
  %293 = add i32 %292, %111
  %294 = add i32 %293, %9
  %295 = add i32 %294, %28
  %296 = sub i32 %295, %2
  %297 = add i32 %296, %236
  %298 = add i32 %297, %14
  %299 = add i32 %298, %50
  %300 = add i32 %299, %57
  %301 = add i32 %300, %84
  %302 = add i32 %301, %100
  %303 = add i32 %302, %12
  %304 = sub i32 %303, %38
  %305 = sub i32 %304, %110
  %306 = sub i32 %305, %115
  %307 = add i32 %306, %124
  %308 = sub i32 %307, %128
  %309 = add i32 %308, %133
  %310 = sub i32 %309, %151
  %311 = add i32 %310, %155
  %312 = add i32 %311, %39
  %313 = add i32 %312, %156
  %314 = add i32 %313, %157
  %315 = sub i32 %314, %158
  %316 = add i32 %315, %171
  %317 = add i32 %316, %174
  %318 = add i32 %317, %59
  %319 = sub i32 %318, %22
  %320 = sub i32 %319, %180
  %321 = add i32 %320, %129
  %322 = add i32 %321, %201
  %323 = add i32 %322, %207
  %324 = sub i32 %323, %25
  %325 = add i32 %324, %219
  %326 = sub i32 %325, %224
  %327 = sub i32 %326, %225
  %328 = add i32 %327, %232
  %329 = add i32 %328, %243
  %330 = add i32 %329, %55
  %331 = sub i32 %330, %250
  %332 = sub i32 %331, %11
  %333 = sub i32 %332, %16
  %334 = add i32 %333, %20
  %335 = sub i32 %334, %21
  %336 = add i32 %335, %27
  %337 = add i32 %336, %29
  %338 = sub i32 %337, %31
  %339 = add i32 %338, %33
  %340 = sub i32 %339, %34
  %341 = add i32 %340, %35
  %342 = sub i32 %341, %40
  %343 = sub i32 %342, %48
  %344 = add i32 %343, %53
  %345 = sub i32 %344, %54
  %346 = sub i32 %345, %58
  %347 = add i32 %346, %60
  %348 = add i32 %347, %62
  %349 = add i32 %348, %63
  %350 = sub i32 %349, %78
  %351 = sub i32 %350, %82
  %352 = sub i32 %351, %88
  %353 = add i32 %352, %90
  %354 = add i32 %353, %92
  %355 = add i32 %354, %93
  %356 = sub i32 %355, %96
  %357 = add i32 %356, %97
  %358 = add i32 %357, %103
  %359 = add i32 %358, %104
  %360 = sub i32 %359, %106
  %361 = sub i32 %360, %107
  %362 = add i32 %361, %85
  %363 = add i32 %362, %108
  %364 = add i32 %363, %109
  %365 = sub i32 %364, %112
  %366 = add i32 %365, %113
  %367 = sub i32 %366, %114
  %368 = sub i32 %367, %116
  %369 = sub i32 %368, %118
  %370 = add i32 %369, %119
  %371 = add i32 %370, %122
  %372 = sub i32 %371, %123
  %373 = add i32 %372, %125
  %374 = sub i32 %373, %126
  %375 = sub i32 %374, %130
  %376 = sub i32 %375, %132
  %377 = sub i32 %376, %134
  %378 = sub i32 %377, %135
  %379 = add i32 %378, %136
  %380 = add i32 %379, %139
  %381 = add i32 %380, %140
  %382 = sub i32 %381, %142
  %383 = add i32 %382, %148
  %384 = add i32 %383, %150
  %385 = add i32 %384, %152
  %386 = add i32 %385, %153
  %387 = sub i32 %386, %154
  %388 = add i32 %387, %159
  %389 = sub i32 %388, %160
  %390 = add i32 %389, %161
  %391 = sub i32 %390, %164
  %392 = add i32 %391, %165
  %393 = sub i32 %392, %169
  %394 = sub i32 %393, %170
  %395 = sub i32 %394, %172
  %396 = sub i32 %395, %173
  %397 = sub i32 %396, %175
  %398 = sub i32 %397, %178
  %399 = sub i32 %398, %179
  %400 = sub i32 %399, %181
  %401 = add i32 %400, %182
  %402 = add i32 %401, %184
  %403 = add i32 %402, %185
  %404 = add i32 %403, %186
  %405 = sub i32 %404, %191
  %406 = add i32 %405, %192
  %407 = sub i32 %406, %194
  %408 = add i32 %407, %197
  %409 = sub i32 %408, %198
  %410 = sub i32 %409, %199
  %411 = add i32 %410, %200
  %412 = add i32 %411, %202
  %413 = sub i32 %412, %204
  %414 = sub i32 %413, %212
  %415 = add i32 %414, %176
  %416 = add i32 %415, %215
  %417 = sub i32 %416, %216
  %418 = sub i32 %417, %217
  %419 = add i32 %418, %218
  %420 = sub i32 %419, %43
  %421 = add i32 %420, %220
  %422 = add i32 %421, %221
  %423 = add i32 %422, %222
  %424 = sub i32 %423, %223
  %425 = sub i32 %424, %226
  %426 = add i32 %425, %227
  %427 = sub i32 %426, %228
  %428 = add i32 %427, %229
  %429 = add i32 %428, %144
  %430 = add i32 %429, %230
  %431 = sub i32 %430, %231
  %432 = add i32 %431, %233
  %433 = add i32 %432, %234
  %434 = sub i32 %433, %235
  %435 = sub i32 %434, %166
  %436 = sub i32 %435, %238
  %437 = sub i32 %436, %242
  %438 = add i32 %437, %244
  %439 = sub i32 %438, %245
  %440 = sub i32 %439, %246
  %441 = sub i32 %440, %247
  %442 = sub i32 %441, %248
  %443 = sub i32 %442, %249
  %444 = sub i32 %443, %24
  %445 = sub i32 %444, %37
  %446 = add i32 %445, %44
  %447 = sub i32 %446, %46
  %448 = sub i32 %447, %72
  %449 = sub i32 %448, %77
  %450 = sub i32 %449, %81
  %451 = sub i32 %450, %87
  %452 = add i32 %451, %99
  %453 = sub i32 %452, %102
  %454 = add i32 %453, %117
  %455 = sub i32 %454, %121
  %456 = sub i32 %455, %138
  %457 = sub i32 %456, %146
  %458 = sub i32 %457, %163
  %459 = add i32 %458, %168
  %460 = sub i32 %459, %189
  %461 = sub i32 %460, %196
  %462 = sub i32 %461, %208
  %463 = sub i32 %462, %213
  %464 = sub i32 %463, %237
  %465 = sub i32 %464, %239
  %466 = sub i32 %465, %241
  %467 = add i32 %466, %253
  %468 = add i32 %467, %257
  %469 = add i32 %468, %259
  %470 = add i32 %469, %260
  %471 = add i32 %470, %286
  %472 = add i32 %471, %288
  %473 = add i32 %472, %284
  %474 = add i32 %473, %281
  %475 = add i32 %474, %274
  %476 = icmp eq i32 %8, %475
  %477 = select i1 %476, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %478 = tail call i32 @puts(i8* nonnull dereferenceable(1) %477)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
