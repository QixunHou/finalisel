digraph "DFG for'crackme' function" {
	Node0x23dfb50[shape=record, label="  %3 = shl i32 %0, 1"];
	Node0x23dfbf0[shape=record, label="  %4 = xor i32 %3, -2"];
	Node0x23dfcb0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x23dfd20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x23dfd90[shape=record, label="  %7 = sub i32 %4, %6"];
	Node0x23dfe00[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x23dfe70[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x23dfee0[shape=record, label="  %10 = mul i32 %9, -2"];
	Node0x23dff50[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x23dfff0[shape=record, label="  %12 = shl i32 %11, 2"];
	Node0x23e0090[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x23e0100[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x23e0170[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x23e01e0[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x23e0250[shape=record, label="  %17 = and i32 %14, %0"];
	Node0x23e02c0[shape=record, label="  %18 = shl i32 %8, 1"];
	Node0x23e0330[shape=record, label="  %19 = add i32 %1, %0"];
	Node0x23e03a0[shape=record, label="  %20 = add i32 %19, %16"];
	Node0x23e0410[shape=record, label="  %21 = sub i32 %20, %17"];
	Node0x23e0480[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x23e04f0[shape=record, label="  %23 = sub i32 %22, %18"];
	Node0x23e0560[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x23e05d0[shape=record, label="  %25 = icmp eq i32 %7, %24"];
	Node0x2380268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x23e0a70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x23e0ac0[shape=record, label="  ret void"];
	Node0x23dfb50 -> Node0x23dfbf0;
	Node0x23dfbf0 -> Node0x23dfcb0;
	Node0x23dfcb0 -> Node0x23dfd20;
	Node0x23dfd20 -> Node0x23dfd90;
	Node0x23dfd90 -> Node0x23dfe00;
	Node0x23dfe00 -> Node0x23dfe70;
	Node0x23dfe70 -> Node0x23dfee0;
	Node0x23dfee0 -> Node0x23dff50;
	Node0x23dff50 -> Node0x23dfff0;
	Node0x23dfff0 -> Node0x23e0090;
	Node0x23e0090 -> Node0x23e0100;
	Node0x23e0100 -> Node0x23e0170;
	Node0x23e0170 -> Node0x23e01e0;
	Node0x23e01e0 -> Node0x23e0250;
	Node0x23e0250 -> Node0x23e02c0;
	Node0x23e02c0 -> Node0x23e0330;
	Node0x23e0330 -> Node0x23e03a0;
	Node0x23e03a0 -> Node0x23e0410;
	Node0x23e0410 -> Node0x23e0480;
	Node0x23e0480 -> Node0x23e04f0;
	Node0x23e04f0 -> Node0x23e0560;
	Node0x23e0560 -> Node0x23e05d0;
	Node0x23e05d0 -> Node0x2380268;
	Node0x2380268 -> Node0x23e0a70;
	Node0x23e0a70 -> Node0x23e0ac0;
edge [color=red]
	Node0x23dfb50 -> Node0x23dfbf0;
	Node0x23dfcb0 -> Node0x23dfd20;
	Node0x23dfbf0 -> Node0x23dfd90;
	Node0x23dfd20 -> Node0x23dfd90;
	Node0x23dfe00 -> Node0x23dfe70;
	Node0x23dfe70 -> Node0x23dfee0;
	Node0x23dff50 -> Node0x23dfff0;
	Node0x23dfff0 -> Node0x23e0090;
	Node0x23e0170 -> Node0x23e01e0;
	Node0x23e0100 -> Node0x23e0250;
	Node0x23dfe00 -> Node0x23e02c0;
	Node0x23e0330 -> Node0x23e03a0;
	Node0x23e01e0 -> Node0x23e03a0;
	Node0x23e03a0 -> Node0x23e0410;
	Node0x23e0250 -> Node0x23e0410;
	Node0x23e0410 -> Node0x23e0480;
	Node0x23dfee0 -> Node0x23e0480;
	Node0x23e0480 -> Node0x23e04f0;
	Node0x23e02c0 -> Node0x23e04f0;
	Node0x23e04f0 -> Node0x23e0560;
	Node0x23e0090 -> Node0x23e0560;
	Node0x23dfd90 -> Node0x23e05d0;
	Node0x23e0560 -> Node0x23e05d0;
	Node0x23e05d0 -> Node0x2380268;
	Node0x2380268 -> Node0x23e0a70;
}
