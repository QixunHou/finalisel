; ModuleID = '../.././c_source_file/0308_path_condition_crackme.c'
source_filename = "../.././c_source_file/0308_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = add i32 %6, %8
  %10 = and i32 %4, %3
  %11 = add i32 %10, 1
  %12 = xor i32 %4, %3
  %13 = xor i32 %4, -1
  %14 = and i32 %13, %3
  %15 = or i32 %4, %3
  %16 = xor i32 %12, -1
  %17 = shl i32 %15, 1
  %18 = xor i32 %17, -2
  %19 = xor i32 %3, 1073741823
  %20 = and i32 %19, %4
  %21 = and i32 %2, %1
  %22 = and i32 %21, %0
  %23 = xor i32 %0, -1
  %24 = or i32 %2, %1
  %25 = and i32 %24, %23
  %26 = xor i32 %22, -1
  %27 = xor i32 %25, %26
  %28 = or i32 %24, %0
  %29 = xor i32 %2, -1
  %30 = and i32 %29, %1
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %23
  %33 = and i32 %7, %29
  %34 = or i32 %1, %0
  %35 = and i32 %34, %29
  %36 = and i32 %29, %0
  %37 = or i32 %29, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %36, %38
  %40 = xor i32 %1, -1
  %41 = or i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %2
  %44 = and i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = and i32 %45, %2
  %47 = xor i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %41, %48
  %50 = xor i32 %2, %1
  %51 = xor i32 %50, -1
  %52 = and i32 %34, %51
  %53 = and i32 %7, %48
  %54 = and i32 %50, %23
  %55 = or i32 %22, %54
  %56 = xor i32 %30, %0
  %57 = shl i32 %56, 1
  %58 = add i32 %50, 1
  %59 = or i32 %44, %38
  %60 = or i32 %36, %40
  %61 = xor i32 %36, -1
  %62 = and i32 %61, %1
  %63 = or i32 %36, %1
  %64 = xor i32 %24, %0
  %65 = xor i32 %64, %26
  %66 = or i32 %29, %0
  %67 = xor i32 %66, -1
  %68 = xor i32 %67, %1
  %69 = or i32 %7, %48
  %70 = and i32 %51, %0
  %71 = shl i32 %70, 1
  %72 = and i32 %40, %2
  %73 = and i32 %72, %0
  %74 = or i32 %40, %2
  %75 = xor i32 %74, %0
  %76 = or i32 %73, %75
  %77 = and i32 %47, %7
  %78 = or i32 %2, %0
  %79 = and i32 %78, %1
  %80 = and i32 %2, %0
  %81 = xor i32 %21, %0
  %82 = xor i32 %80, %34
  %83 = or i32 %50, %0
  %84 = xor i32 %83, -1
  %85 = or i32 %73, %84
  %86 = and i32 %72, %23
  %87 = and i32 %74, %0
  %88 = or i32 %86, %87
  %89 = and i32 %48, %40
  %90 = shl i32 %89, 1
  %91 = and i32 %7, %2
  %92 = or i32 %38, %23
  %93 = xor i32 %34, -1
  %94 = and i32 %50, %34
  %95 = xor i32 %93, %2
  %96 = shl i32 %95, 1
  %97 = or i32 %24, %23
  %98 = and i32 %37, %0
  %99 = or i32 %93, %2
  %100 = or i32 %36, %21
  %101 = or i32 %67, %40
  %102 = and i32 %40, %0
  %103 = or i32 %102, %29
  %104 = or i32 %21, %102
  %105 = or i32 %44, %29
  %106 = and i32 %74, %23
  %107 = xor i32 %106, 2147483647
  %108 = xor i32 %107, %73
  %109 = or i32 %47, %7
  %110 = xor i32 %24, -1
  %111 = xor i32 %110, %0
  %112 = or i32 %30, %0
  %113 = shl i32 %112, 1
  %114 = xor i32 %36, %37
  %115 = shl i32 %114, 1
  %116 = and i32 %37, %23
  %117 = xor i32 %78, -1
  %118 = or i32 %7, %117
  %119 = shl i32 %118, 1
  %120 = xor i32 %102, %31
  %121 = xor i32 %78, %1
  %122 = xor i32 %21, -1
  %123 = and i32 %8, %2
  %124 = xor i32 %24, %44
  %125 = or i32 %47, %1
  %126 = or i32 %48, %8
  %127 = and i32 %47, %45
  %128 = xor i32 %36, %122
  %129 = xor i32 %73, %83
  %130 = and i32 %34, %48
  %131 = xor i32 %51, %0
  %132 = and i32 %66, %40
  %133 = or i32 %8, %2
  %134 = shl i32 %102, 1
  %135 = and i32 %48, %45
  %136 = or i32 %36, %8
  %137 = shl i32 %136, 1
  %138 = or i32 %50, %44
  %139 = shl i32 %138, 1
  %140 = or i32 %44, %110
  %141 = xor i32 %75, -1
  %142 = xor i32 %73, %141
  %143 = or i32 %73, %106
  %144 = xor i32 %80, %1
  %145 = or i32 %102, %51
  %146 = xor i32 %66, %1
  %147 = xor i32 %80, -1
  %148 = add i32 %80, 1
  %149 = xor i32 %54, %26
  %150 = and i32 %66, %1
  %151 = shl i32 %150, 1
  %152 = or i32 %47, %102
  %153 = mul i32 %152, -5
  %154 = or i32 %31, %23
  %155 = shl i32 %154, 1
  %156 = or i32 %44, %51
  %157 = and i32 %61, %40
  %158 = and i32 %51, %45
  %159 = xor i32 %61, %1
  %160 = add i32 %37, 1
  %161 = and i32 %29, %8
  %162 = xor i32 %31, %0
  %163 = and i32 %66, %7
  %164 = xor i32 %37, %44
  %165 = and i32 %21, %23
  %166 = and i32 %24, %0
  %167 = xor i32 %166, -1
  %168 = xor i32 %165, %167
  %169 = or i32 %80, %42
  %170 = xor i32 %102, %2
  %171 = and i32 %41, %29
  %172 = shl i32 %171, 1
  %173 = and i32 %61, %8
  %174 = xor i32 %134, -2
  %175 = or i32 %48, %93
  %176 = or i32 %80, %7
  %177 = add i32 %24, 1
  %178 = and i32 %7, %147
  %179 = or i32 %80, %8
  %180 = and i32 %41, %51
  %181 = shl i32 %180, 1
  %182 = and i32 %50, %0
  %183 = xor i32 %50, %0
  %184 = xor i32 %183, %22
  %185 = shl i32 %184, 1
  %186 = and i32 %47, %8
  %187 = and i32 %78, %8
  %188 = shl i32 %187, 1
  %189 = xor i32 %42, %2
  %190 = or i32 %7, %67
  %191 = or i32 %110, %0
  %192 = xor i32 %102, %122
  %193 = and i32 %147, %40
  %194 = xor i32 %87, -1
  %195 = xor i32 %86, %194
  %196 = xor i32 %41, %2
  %197 = shl i32 %196, 1
  %198 = or i32 %117, %40
  %199 = shl i32 %198, 1
  %200 = xor i32 %34, %2
  %201 = xor i32 %80, %41
  %202 = or i32 %44, %117
  %203 = and i32 %29, %45
  %204 = shl i32 %203, 2
  %205 = and i32 %110, %23
  %206 = mul i32 %205, 19
  %207 = and i32 %30, %23
  %208 = shl i32 %207, 3
  %209 = and i32 %110, %0
  %210 = mul i32 %209, 23
  %211 = and i32 %30, %0
  %212 = and i32 %38, %23
  %213 = and i32 %38, %0
  %214 = mul i32 %213, 17
  %215 = mul i32 %22, 11
  %216 = add i32 %0, -1
  %217 = add i32 %216, %34
  %218 = add i32 %217, %78
  %219 = add i32 %218, %21
  %220 = add i32 %219, %179
  %221 = add i32 %220, %178
  %222 = add i32 %221, %64
  %223 = add i32 %222, %146
  %224 = add i32 %223, %101
  %225 = add i32 %224, %63
  %226 = add i32 %225, %11
  %227 = add i32 %226, %108
  %228 = shl i32 %227, 1
  %229 = add i32 %212, %58
  %230 = add i32 %229, %211
  %231 = add i32 %230, %14
  %232 = mul i32 %231, 3
  %233 = add i32 %55, %20
  %234 = shl i32 %233, 2
  %235 = add i32 %1, %2
  %236 = add i32 %235, %34
  %237 = add i32 %236, 4
  %238 = sub i32 %237, %2
  %239 = add i32 %238, %7
  %240 = sub i32 %239, %33
  %241 = add i32 %240, %35
  %242 = sub i32 %241, %43
  %243 = sub i32 %242, %46
  %244 = sub i32 %243, %80
  %245 = sub i32 %244, %91
  %246 = sub i32 %245, %99
  %247 = sub i32 %246, %103
  %248 = sub i32 %247, %105
  %249 = add i32 %248, %122
  %250 = add i32 %249, %123
  %251 = add i32 %250, %133
  %252 = add i32 %251, %66
  %253 = sub i32 %252, %134
  %254 = add i32 %253, %148
  %255 = add i32 %254, %117
  %256 = add i32 %255, %160
  %257 = add i32 %256, %161
  %258 = add i32 %257, %170
  %259 = add i32 %258, %177
  %260 = sub i32 %259, %189
  %261 = sub i32 %260, %36
  %262 = sub i32 %261, %200
  %263 = sub i32 %262, %4
  %264 = add i32 %263, %28
  %265 = add i32 %264, %32
  %266 = add i32 %265, %39
  %267 = add i32 %266, %49
  %268 = add i32 %267, %52
  %269 = sub i32 %268, %53
  %270 = add i32 %269, %59
  %271 = add i32 %270, %60
  %272 = sub i32 %271, %62
  %273 = add i32 %272, %68
  %274 = sub i32 %273, %69
  %275 = sub i32 %274, %77
  %276 = add i32 %275, %79
  %277 = sub i32 %276, %81
  %278 = add i32 %277, %82
  %279 = add i32 %278, %92
  %280 = sub i32 %279, %94
  %281 = sub i32 %280, %96
  %282 = sub i32 %281, %97
  %283 = sub i32 %282, %98
  %284 = add i32 %283, %100
  %285 = sub i32 %284, %104
  %286 = add i32 %285, %109
  %287 = sub i32 %286, %111
  %288 = sub i32 %287, %116
  %289 = sub i32 %288, %83
  %290 = sub i32 %289, %120
  %291 = sub i32 %290, %121
  %292 = add i32 %291, %25
  %293 = sub i32 %292, %124
  %294 = sub i32 %293, %125
  %295 = sub i32 %294, %126
  %296 = add i32 %295, %127
  %297 = add i32 %296, %128
  %298 = sub i32 %297, %130
  %299 = sub i32 %298, %131
  %300 = sub i32 %299, %132
  %301 = sub i32 %300, %135
  %302 = sub i32 %301, %140
  %303 = add i32 %302, %144
  %304 = add i32 %303, %145
  %305 = sub i32 %304, %156
  %306 = add i32 %305, %157
  %307 = sub i32 %306, %158
  %308 = add i32 %307, %159
  %309 = sub i32 %308, %162
  %310 = sub i32 %309, %163
  %311 = add i32 %310, %164
  %312 = sub i32 %311, %169
  %313 = sub i32 %312, %172
  %314 = sub i32 %313, %173
  %315 = add i32 %314, %174
  %316 = add i32 %315, %175
  %317 = add i32 %316, %176
  %318 = add i32 %317, %182
  %319 = sub i32 %318, %186
  %320 = sub i32 %319, %190
  %321 = sub i32 %320, %54
  %322 = sub i32 %321, %191
  %323 = add i32 %322, %192
  %324 = add i32 %323, %193
  %325 = sub i32 %324, %197
  %326 = sub i32 %325, %201
  %327 = add i32 %326, %202
  %328 = sub i32 %327, %204
  %329 = add i32 %328, %165
  %330 = sub i32 %329, %12
  %331 = sub i32 %330, %14
  %332 = add i32 %331, %15
  %333 = add i32 %332, %16
  %334 = sub i32 %333, %10
  %335 = add i32 %334, %27
  %336 = sub i32 %335, %57
  %337 = add i32 %336, %65
  %338 = sub i32 %337, %71
  %339 = add i32 %338, %76
  %340 = add i32 %339, %85
  %341 = sub i32 %340, %88
  %342 = sub i32 %341, %90
  %343 = sub i32 %342, %113
  %344 = sub i32 %343, %115
  %345 = sub i32 %344, %119
  %346 = add i32 %345, %129
  %347 = sub i32 %346, %137
  %348 = sub i32 %347, %139
  %349 = add i32 %348, %142
  %350 = add i32 %349, %143
  %351 = sub i32 %350, %149
  %352 = sub i32 %351, %151
  %353 = add i32 %352, %153
  %354 = sub i32 %353, %155
  %355 = add i32 %354, %168
  %356 = sub i32 %355, %181
  %357 = sub i32 %356, %188
  %358 = add i32 %357, %195
  %359 = sub i32 %358, %199
  %360 = add i32 %359, %206
  %361 = add i32 %360, %208
  %362 = add i32 %361, %210
  %363 = add i32 %362, %214
  %364 = add i32 %363, %215
  %365 = sub i32 %364, %185
  %366 = add i32 %365, %18
  %367 = add i32 %366, %234
  %368 = add i32 %367, %232
  %369 = add i32 %368, %228
  %370 = icmp eq i32 %9, %369
  %371 = select i1 %370, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %372 = tail call i32 @puts(i8* nonnull dereferenceable(1) %371)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
