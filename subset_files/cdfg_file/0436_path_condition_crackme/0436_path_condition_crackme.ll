; ModuleID = '../.././c_source_file/0436_path_condition_crackme.c'
source_filename = "../.././c_source_file/0436_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %2, %0
  %7 = xor i32 %6, -1
  %8 = xor i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = and i32 %7, %9
  %11 = sub i32 %10, %3
  %12 = or i32 %4, %3
  %13 = xor i32 %4, 2147483647
  %14 = xor i32 %3, -1
  %15 = and i32 %14, %4
  %16 = xor i32 %14, %4
  %17 = and i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = shl i32 %3, 1
  %20 = xor i32 %19, -2
  %21 = and i32 %13, %3
  %22 = shl i32 %12, 1
  %23 = xor i32 %22, -2
  %24 = xor i32 %2, -1
  %25 = or i32 %24, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %0, -1
  %28 = or i32 %2, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %27
  %31 = or i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %32
  %36 = shl i32 %35, 1
  %37 = and i32 %1, %0
  %38 = or i32 %37, %26
  %39 = or i32 %24, %1
  %40 = xor i32 %39, %0
  %41 = xor i32 %1, -1
  %42 = or i32 %41, %0
  %43 = xor i32 %42, -1
  %44 = shl i32 %43, 1
  %45 = xor i32 %2, %0
  %46 = and i32 %45, %8
  %47 = and i32 %41, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %33, %48
  %50 = and i32 %28, %27
  %51 = or i32 %26, %1
  %52 = add i32 %28, 1
  %53 = add i32 %2, 1
  %54 = and i32 %41, %2
  %55 = and i32 %54, %27
  %56 = or i32 %33, %27
  %57 = xor i32 %55, %56
  %58 = xor i32 %45, -1
  %59 = or i32 %58, %1
  %60 = and i32 %24, %1
  %61 = xor i32 %60, %0
  %62 = or i32 %32, %2
  %63 = or i32 %45, %37
  %64 = or i32 %37, %24
  %65 = and i32 %2, %1
  %66 = xor i32 %65, -1
  %67 = xor i32 %47, %66
  %68 = or i32 %6, %8
  %69 = or i32 %45, %8
  %70 = xor i32 %37, -1
  %71 = or i32 %2, %0
  %72 = and i32 %71, %1
  %73 = shl i32 %72, 1
  %74 = and i32 %8, %58
  %75 = and i32 %70, %2
  %76 = and i32 %31, %34
  %77 = and i32 %34, %48
  %78 = or i32 %33, %0
  %79 = xor i32 %60, -1
  %80 = and i32 %79, %27
  %81 = add i32 %1, 1
  %82 = xor i32 %39, %37
  %83 = and i32 %71, %9
  %84 = xor i32 %65, %0
  %85 = and i32 %31, %24
  %86 = xor i32 %71, %37
  %87 = and i32 %25, %41
  %88 = and i32 %24, %0
  %89 = xor i32 %88, %1
  %90 = or i32 %58, %32
  %91 = or i32 %47, %24
  %92 = xor i32 %25, %1
  %93 = and i32 %45, %42
  %94 = xor i32 %6, %42
  %95 = shl i32 %94, 1
  %96 = or i32 %45, %9
  %97 = shl i32 %96, 1
  %98 = xor i32 %6, %28
  %99 = and i32 %8, %24
  %100 = xor i32 %32, %2
  %101 = xor i32 %29, %0
  %102 = shl i32 %101, 1
  %103 = or i32 %88, %1
  %104 = or i32 %24, %32
  %105 = and i32 %65, %0
  %106 = xor i32 %33, %0
  %107 = xor i32 %105, %106
  %108 = or i32 %60, %0
  %109 = and i32 %65, %27
  %110 = and i32 %33, %0
  %111 = or i32 %109, %110
  %112 = or i32 %66, %27
  %113 = or i32 %8, %58
  %114 = xor i32 %88, %39
  %115 = xor i32 %79, %0
  %116 = and i32 %25, %9
  %117 = or i32 %8, %2
  %118 = and i32 %66, %27
  %119 = and i32 %33, %27
  %120 = or i32 %105, %119
  %121 = and i32 %58, %9
  %122 = xor i32 %88, -1
  %123 = and i32 %122, %1
  %124 = or i32 %33, %43
  %125 = xor i32 %28, %37
  %126 = and i32 %71, %41
  %127 = or i32 %28, %27
  %128 = shl i32 %66, 1
  %129 = xor i32 %71, -1
  %130 = or i32 %129, %1
  %131 = and i32 %28, %0
  %132 = or i32 %109, %131
  %133 = or i32 %37, %129
  %134 = or i32 %34, %27
  %135 = or i32 %47, %58
  %136 = or i32 %58, %41
  %137 = shl i32 %136, 1
  %138 = xor i32 %34, %0
  %139 = or i32 %105, %50
  %140 = and i32 %54, %0
  %141 = or i32 %41, %2
  %142 = and i32 %141, %27
  %143 = or i32 %140, %142
  %144 = or i32 %33, %32
  %145 = xor i32 %39, -1
  %146 = or i32 %65, %27
  %147 = or i32 %34, %0
  %148 = xor i32 %7, %1
  %149 = or i32 %37, %145
  %150 = or i32 %24, %9
  %151 = xor i32 %141, %0
  %152 = or i32 %140, %151
  %153 = and i32 %45, %9
  %154 = shl i32 %153, 1
  %155 = and i32 %58, %41
  %156 = or i32 %6, %32
  %157 = or i32 %6, %9
  %158 = or i32 %24, %43
  %159 = or i32 %8, %26
  %160 = xor i32 %56, -1
  %161 = or i32 %55, %160
  %162 = or i32 %45, %41
  %163 = and i32 %42, %58
  %164 = xor i32 %48, %2
  %165 = or i32 %43, %2
  %166 = xor i32 %106, -1
  %167 = xor i32 %140, %166
  %168 = and i32 %42, %2
  %169 = xor i32 %145, %0
  %170 = and i32 %66, %0
  %171 = shl i32 %170, 1
  %172 = or i32 %88, %41
  %173 = and i32 %58, %48
  %174 = and i32 %39, %0
  %175 = and i32 %39, %27
  %176 = xor i32 %129, %1
  %177 = and i32 %31, %2
  %178 = or i32 %140, %106
  %179 = and i32 %8, %2
  %180 = shl i32 %179, 1
  %181 = or i32 %39, %0
  %182 = and i32 %33, %31
  %183 = xor i32 %6, %79
  %184 = xor i32 %119, -1
  %185 = xor i32 %105, %184
  %186 = or i32 %39, %27
  %187 = or i32 %88, %145
  %188 = or i32 %88, %65
  %189 = shl i32 %32, 2
  %190 = and i32 %33, %70
  %191 = or i32 %28, %0
  %192 = and i32 %122, %9
  %193 = and i32 %8, %7
  %194 = and i32 %34, %0
  %195 = or i32 %129, %41
  %196 = or i32 %66, %0
  %197 = or i32 %79, %0
  %198 = and i32 %45, %31
  %199 = and i32 %24, %9
  %200 = xor i32 %43, %2
  %201 = shl i32 %200, 2
  %202 = or i32 %45, %47
  %203 = xor i32 %47, %79
  %204 = or i32 %6, %41
  %205 = and i32 %58, %1
  %206 = and i32 %45, %41
  %207 = or i32 %58, %43
  %208 = and i32 %122, %41
  %209 = and i32 %24, %70
  %210 = and i32 %7, %41
  %211 = and i32 %79, %0
  %212 = or i32 %47, %2
  %213 = xor i32 %26, %1
  %214 = and i32 %8, %122
  %215 = shl i32 %214, 1
  %216 = or i32 %129, %9
  %217 = or i32 %6, %60
  %218 = or i32 %105, %166
  %219 = or i32 %6, %43
  %220 = or i32 %88, %9
  %221 = or i32 %45, %32
  %222 = or i32 %47, %34
  %223 = xor i32 %70, %2
  %224 = or i32 %37, %29
  %225 = and i32 %7, %1
  %226 = and i32 %42, %24
  %227 = or i32 %26, %9
  %228 = and i32 %45, %48
  %229 = and i32 %34, %70
  %230 = or i32 %45, %1
  %231 = or i32 %26, %41
  %232 = xor i32 %28, %0
  %233 = xor i32 %142, -1
  %234 = xor i32 %140, %233
  %235 = or i32 %105, %232
  %236 = xor i32 %122, %1
  %237 = or i32 %88, %8
  %238 = and i32 %24, %48
  %239 = xor i32 %131, -1
  %240 = xor i32 %109, %239
  %241 = or i32 %60, %27
  %242 = and i32 %29, %27
  %243 = mul i32 %242, 6
  %244 = and i32 %60, %27
  %245 = and i32 %29, %0
  %246 = mul i32 %245, -17
  %247 = and i32 %60, %0
  %248 = mul i32 %247, -19
  %249 = and i32 %145, %27
  %250 = mul i32 %249, -10
  %251 = mul i32 %109, -30
  %252 = and i32 %145, %0
  %253 = shl i32 %252, 3
  %254 = add i32 %8, -1
  %255 = add i32 %254, %212
  %256 = add i32 %255, %117
  %257 = add i32 %256, %58
  %258 = add i32 %257, %7
  %259 = add i32 %258, %62
  %260 = add i32 %259, %232
  %261 = add i32 %260, %202
  %262 = add i32 %261, %198
  %263 = add i32 %262, %186
  %264 = add i32 %263, %157
  %265 = add i32 %264, %113
  %266 = add i32 %265, %84
  %267 = add i32 %266, %82
  %268 = add i32 %267, %61
  %269 = add i32 %268, %107
  %270 = add i32 %269, %139
  %271 = add i32 %270, %17
  %272 = sub i32 %271, %12
  %273 = add i32 %159, %207
  %274 = add i32 %273, %167
  %275 = shl i32 %274, 2
  %276 = add i32 %115, %182
  %277 = add i32 %276, %218
  %278 = mul i32 %277, 5
  %279 = sub i32 %103, %135
  %280 = add i32 %279, %234
  %281 = mul i32 %280, 3
  %282 = or i32 %105, %244
  %283 = mul i32 %282, -21
  %284 = add i32 %272, %21
  %285 = shl i32 %284, 1
  %286 = sub i32 %1, %0
  %287 = add i32 %286, %81
  %288 = add i32 %287, %2
  %289 = add i32 %288, %9
  %290 = add i32 %289, %53
  %291 = add i32 %290, %70
  %292 = sub i32 %291, %47
  %293 = add i32 %292, %48
  %294 = add i32 %293, %42
  %295 = sub i32 %294, %44
  %296 = add i32 %295, %52
  %297 = sub i32 %296, %64
  %298 = add i32 %297, %75
  %299 = add i32 %298, %85
  %300 = add i32 %299, %91
  %301 = sub i32 %300, %99
  %302 = sub i32 %301, %100
  %303 = add i32 %302, %104
  %304 = add i32 %303, %33
  %305 = add i32 %304, %145
  %306 = sub i32 %305, %150
  %307 = sub i32 %306, %158
  %308 = sub i32 %307, %28
  %309 = add i32 %308, %164
  %310 = sub i32 %309, %165
  %311 = sub i32 %310, %168
  %312 = add i32 %311, %177
  %313 = sub i32 %312, %189
  %314 = add i32 %313, %6
  %315 = sub i32 %314, %199
  %316 = sub i32 %315, %45
  %317 = sub i32 %316, %209
  %318 = sub i32 %317, %223
  %319 = add i32 %318, %226
  %320 = add i32 %319, %88
  %321 = add i32 %320, %129
  %322 = sub i32 %321, %238
  %323 = add i32 %322, 1
  %324 = sub i32 %323, %30
  %325 = add i32 %324, %38
  %326 = sub i32 %325, %40
  %327 = sub i32 %326, %46
  %328 = sub i32 %327, %49
  %329 = add i32 %328, %50
  %330 = add i32 %329, %51
  %331 = sub i32 %330, %59
  %332 = add i32 %331, %63
  %333 = add i32 %332, %67
  %334 = add i32 %333, %68
  %335 = sub i32 %334, %69
  %336 = sub i32 %335, %74
  %337 = sub i32 %336, %76
  %338 = sub i32 %337, %77
  %339 = sub i32 %338, %78
  %340 = sub i32 %339, %80
  %341 = add i32 %340, %83
  %342 = add i32 %341, %86
  %343 = sub i32 %342, %87
  %344 = add i32 %343, %89
  %345 = add i32 %344, %90
  %346 = sub i32 %345, %92
  %347 = add i32 %346, %93
  %348 = sub i32 %347, %98
  %349 = add i32 %348, %108
  %350 = sub i32 %349, %112
  %351 = add i32 %350, %114
  %352 = add i32 %351, %116
  %353 = add i32 %352, %118
  %354 = add i32 %353, %121
  %355 = add i32 %354, %123
  %356 = sub i32 %355, %124
  %357 = sub i32 %356, %125
  %358 = add i32 %357, %126
  %359 = sub i32 %358, %127
  %360 = sub i32 %359, %128
  %361 = sub i32 %360, %130
  %362 = sub i32 %361, %133
  %363 = add i32 %362, %134
  %364 = sub i32 %363, %56
  %365 = sub i32 %364, %138
  %366 = add i32 %365, %144
  %367 = sub i32 %366, %146
  %368 = add i32 %367, %147
  %369 = sub i32 %368, %148
  %370 = add i32 %369, %149
  %371 = sub i32 %370, %155
  %372 = add i32 %371, %156
  %373 = sub i32 %372, %162
  %374 = sub i32 %373, %163
  %375 = add i32 %374, %169
  %376 = sub i32 %375, %172
  %377 = sub i32 %376, %173
  %378 = add i32 %377, %174
  %379 = sub i32 %378, %175
  %380 = sub i32 %379, %176
  %381 = sub i32 %380, %180
  %382 = add i32 %381, %181
  %383 = add i32 %382, %183
  %384 = add i32 %383, %187
  %385 = sub i32 %384, %188
  %386 = add i32 %385, %106
  %387 = sub i32 %386, %190
  %388 = sub i32 %387, %191
  %389 = sub i32 %388, %192
  %390 = add i32 %389, %193
  %391 = sub i32 %390, %194
  %392 = sub i32 %391, %195
  %393 = sub i32 %392, %196
  %394 = add i32 %393, %197
  %395 = sub i32 %394, %201
  %396 = add i32 %395, %203
  %397 = sub i32 %396, %204
  %398 = sub i32 %397, %131
  %399 = add i32 %398, %205
  %400 = add i32 %399, %206
  %401 = add i32 %400, %208
  %402 = sub i32 %401, %210
  %403 = add i32 %402, %211
  %404 = add i32 %403, %213
  %405 = sub i32 %404, %216
  %406 = sub i32 %405, %217
  %407 = add i32 %406, %219
  %408 = add i32 %407, %220
  %409 = sub i32 %408, %221
  %410 = add i32 %409, %110
  %411 = sub i32 %410, %222
  %412 = sub i32 %411, %224
  %413 = add i32 %412, %225
  %414 = add i32 %413, %227
  %415 = sub i32 %414, %228
  %416 = sub i32 %415, %229
  %417 = add i32 %416, %230
  %418 = sub i32 %417, %231
  %419 = sub i32 %418, %236
  %420 = sub i32 %419, %237
  %421 = sub i32 %420, %241
  %422 = add i32 %421, %15
  %423 = add i32 %422, %16
  %424 = add i32 %423, %18
  %425 = add i32 %424, %20
  %426 = sub i32 %425, %36
  %427 = sub i32 %426, %57
  %428 = sub i32 %427, %73
  %429 = sub i32 %428, %95
  %430 = sub i32 %429, %97
  %431 = sub i32 %430, %102
  %432 = sub i32 %431, %111
  %433 = sub i32 %432, %120
  %434 = sub i32 %433, %132
  %435 = sub i32 %434, %137
  %436 = sub i32 %435, %143
  %437 = sub i32 %436, %152
  %438 = sub i32 %437, %154
  %439 = sub i32 %438, %161
  %440 = sub i32 %439, %171
  %441 = sub i32 %440, %178
  %442 = add i32 %441, %185
  %443 = sub i32 %442, %215
  %444 = add i32 %443, %235
  %445 = add i32 %444, %240
  %446 = add i32 %445, %243
  %447 = add i32 %446, %246
  %448 = add i32 %447, %248
  %449 = add i32 %448, %250
  %450 = add i32 %449, %251
  %451 = sub i32 %450, %253
  %452 = add i32 %451, %283
  %453 = sub i32 %452, %23
  %454 = add i32 %453, %275
  %455 = add i32 %454, %278
  %456 = add i32 %455, %281
  %457 = add i32 %456, %285
  %458 = icmp eq i32 %11, %457
  %459 = select i1 %458, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %460 = tail call i32 @puts(i8* nonnull dereferenceable(1) %459)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
