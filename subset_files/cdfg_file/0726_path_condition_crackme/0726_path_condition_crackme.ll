; ModuleID = '../.././c_source_file/0726_path_condition_crackme.c'
source_filename = "../.././c_source_file/0726_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = or i32 %9, %7
  %11 = sub i32 1, %3
  %12 = sub i32 %11, %10
  %13 = add i32 %12, %6
  %14 = or i32 %4, %3
  %15 = xor i32 %3, -1
  %16 = and i32 %15, %4
  %17 = or i32 %2, %0
  %18 = xor i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = and i32 %17, %19
  %21 = and i32 %8, %0
  %22 = xor i32 %21, -1
  %23 = add i32 %21, 1
  %24 = xor i32 %2, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %18, %8
  %27 = xor i32 %9, -1
  %28 = xor i32 %27, %0
  %29 = xor i32 %1, -1
  %30 = and i32 %29, %0
  %31 = or i32 %9, %30
  %32 = shl i32 %31, 1
  %33 = and i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %8, %34
  %36 = and i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %18, %37
  %39 = shl i32 %38, 2
  %40 = and i32 %2, %1
  %41 = or i32 %40, %7
  %42 = or i32 %30, %2
  %43 = or i32 %8, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %33, %44
  %46 = xor i32 %40, -1
  %47 = and i32 %46, %7
  %48 = or i32 %29, %0
  %49 = xor i32 %48, -1
  %50 = xor i32 %2, %1
  %51 = xor i32 %50, -1
  %52 = or i32 %51, %49
  %53 = or i32 %2, %1
  %54 = xor i32 %53, -1
  %55 = or i32 %36, %54
  %56 = and i32 %24, %48
  %57 = xor i32 %33, %2
  %58 = shl i32 %57, 1
  %59 = xor i32 %30, -1
  %60 = xor i32 %59, %2
  %61 = or i32 %1, %0
  %62 = and i32 %61, %51
  %63 = or i32 %54, %0
  %64 = or i32 %21, %29
  %65 = or i32 %25, %49
  %66 = or i32 %50, %49
  %67 = xor i32 %50, %0
  %68 = and i32 %29, %2
  %69 = and i32 %68, %0
  %70 = or i32 %50, %0
  %71 = xor i32 %69, %70
  %72 = and i32 %40, %0
  %73 = and i32 %53, %7
  %74 = xor i32 %72, -1
  %75 = xor i32 %73, %74
  %76 = and i32 %18, %22
  %77 = or i32 %33, %54
  %78 = or i32 %8, %49
  %79 = xor i32 %21, %1
  %80 = xor i32 %17, -1
  %81 = or i32 %80, %29
  %82 = or i32 %24, %29
  %83 = xor i32 %61, -1
  %84 = or i32 %8, %0
  %85 = xor i32 %21, %46
  %86 = or i32 %36, %9
  %87 = shl i32 %86, 1
  %88 = add i32 %53, 1
  %89 = and i32 %24, %34
  %90 = or i32 %25, %1
  %91 = and i32 %24, %29
  %92 = and i32 %50, %7
  %93 = xor i32 %92, %74
  %94 = or i32 %33, %51
  %95 = and i32 %48, %8
  %96 = xor i32 %84, -1
  %97 = or i32 %96, %29
  %98 = xor i32 %36, %1
  %99 = or i32 %24, %18
  %100 = or i32 %29, %2
  %101 = and i32 %100, %7
  %102 = xor i32 %101, -1
  %103 = xor i32 %69, %102
  %104 = and i32 %40, %7
  %105 = and i32 %53, %0
  %106 = or i32 %104, %105
  %107 = xor i32 %21, %43
  %108 = or i32 %30, %25
  %109 = or i32 %36, %19
  %110 = shl i32 %40, 1
  %111 = xor i32 %30, %2
  %112 = xor i32 %44, %0
  %113 = or i32 %8, %19
  %114 = shl i32 %113, 1
  %115 = or i32 %53, %0
  %116 = or i32 %18, %80
  %117 = and i32 %17, %18
  %118 = xor i32 %84, %33
  %119 = xor i32 %104, -1
  %120 = xor i32 %105, %119
  %121 = and i32 %22, %1
  %122 = or i32 %24, %30
  %123 = or i32 %40, %30
  %124 = xor i32 %36, %53
  %125 = and i32 %51, %7
  %126 = or i32 %24, %19
  %127 = xor i32 %17, %33
  %128 = and i32 %50, %0
  %129 = and i32 %19, %2
  %130 = or i32 %21, %1
  %131 = or i32 %21, %18
  %132 = shl i32 %131, 2
  %133 = and i32 %17, %1
  %134 = and i32 %48, %51
  %135 = or i32 %44, %0
  %136 = add i32 %9, 1
  %137 = and i32 %50, %61
  %138 = xor i32 %67, -1
  %139 = xor i32 %69, %138
  %140 = and i32 %68, %7
  %141 = and i32 %100, %0
  %142 = xor i32 %141, -1
  %143 = xor i32 %140, %142
  %144 = or i32 %72, %138
  %145 = or i32 %9, %0
  %146 = or i32 %50, %7
  %147 = xor i32 %140, %146
  %148 = and i32 %24, %59
  %149 = or i32 %21, %44
  %150 = or i32 %44, %7
  %151 = or i32 %53, %7
  %152 = xor i32 %36, %27
  %153 = shl i32 %34, 1
  %154 = or i32 %24, %1
  %155 = or i32 %36, %1
  %156 = xor i32 %43, %33
  %157 = or i32 %69, %101
  %158 = shl i32 %157, 1
  %159 = xor i32 %22, %1
  %160 = shl i32 %159, 1
  %161 = xor i32 %53, %0
  %162 = or i32 %72, %161
  %163 = shl i32 %162, 1
  %164 = and i32 %25, %34
  %165 = and i32 %22, %19
  %166 = and i32 %37, %1
  %167 = or i32 %25, %19
  %168 = and i32 %43, %7
  %169 = or i32 %30, %8
  %170 = or i32 %140, %141
  %171 = and i32 %24, %1
  %172 = and i32 %27, %7
  %173 = xor i32 %128, %119
  %174 = and i32 %59, %2
  %175 = and i32 %8, %19
  %176 = and i32 %84, %29
  %177 = and i32 %84, %18
  %178 = or i32 %33, %8
  %179 = add i32 %84, 1
  %180 = and i32 %27, %0
  %181 = and i32 %37, %19
  %182 = xor i32 %161, %74
  %183 = and i32 %24, %19
  %184 = xor i32 %0, 2147483647
  %185 = xor i32 %184, %100
  %186 = xor i32 %185, %69
  %187 = or i32 %54, %7
  %188 = and i32 %84, %1
  %189 = add i32 %30, 1
  %190 = and i32 %8, %59
  %191 = or i32 %72, %92
  %192 = xor i32 %36, %48
  %193 = shl i32 %192, 1
  %194 = xor i32 %43, %0
  %195 = shl i32 %194, 1
  %196 = xor i32 %46, %0
  %197 = and i32 %25, %19
  %198 = xor i32 %84, %1
  %199 = xor i32 %96, %1
  %200 = or i32 %27, %7
  %201 = or i32 %33, %25
  %202 = shl i32 %201, 1
  %203 = or i32 %18, %2
  %204 = and i32 %48, %25
  %205 = or i32 %36, %49
  %206 = xor i32 %51, %0
  %207 = or i32 %8, %83
  %208 = xor i32 %37, %1
  %209 = add i32 %17, 1
  %210 = and i32 %50, %48
  %211 = or i32 %25, %83
  %212 = xor i32 %70, -1
  %213 = or i32 %69, %212
  %214 = add i32 %2, 1
  %215 = or i32 %43, %7
  %216 = or i32 %83, %2
  %217 = xor i32 %30, %27
  %218 = or i32 %46, %0
  %219 = or i32 %24, %83
  %220 = and i32 %22, %29
  %221 = shl i32 %220, 1
  %222 = or i32 %25, %29
  %223 = xor i32 %54, %0
  %224 = and i32 %84, %19
  %225 = xor i32 %40, %0
  %226 = or i32 %33, %96
  %227 = xor i32 %9, %0
  %228 = and i32 %17, %29
  %229 = or i32 %36, %18
  %230 = xor i32 %36, %61
  %231 = or i32 %50, %33
  %232 = shl i32 %231, 1
  %233 = and i32 %25, %1
  %234 = xor i32 %17, %1
  %235 = and i32 %61, %2
  %236 = xor i32 %80, %1
  %237 = and i32 %48, %2
  %238 = or i32 %40, %0
  %239 = or i32 %80, %19
  %240 = or i32 %36, %29
  %241 = or i32 %51, %0
  %242 = and i32 %61, %25
  %243 = or i32 %27, %0
  %244 = or i32 %51, %7
  %245 = or i32 %80, %1
  %246 = and i32 %34, %2
  %247 = xor i32 %83, %2
  %248 = and i32 %50, %34
  %249 = shl i32 %248, 1
  %250 = and i32 %18, %2
  %251 = or i32 %18, %8
  %252 = or i32 %21, %40
  %253 = or i32 %49, %2
  %254 = or i32 %21, %19
  %255 = xor i32 %53, %33
  %256 = and i32 %24, %18
  %257 = and i32 %24, %61
  %258 = or i32 %36, %83
  %259 = or i32 %19, %2
  %260 = or i32 %43, %0
  %261 = shl i32 %260, 2
  %262 = or i32 %30, %51
  %263 = or i32 %96, %19
  %264 = shl i32 %263, 1
  %265 = or i32 %18, %96
  %266 = xor i32 %48, %2
  %267 = and i32 %51, %34
  %268 = or i32 %50, %83
  %269 = or i32 %50, %30
  %270 = or i32 %18, %25
  %271 = and i32 %54, %7
  %272 = mul i32 %271, 9
  %273 = and i32 %9, %7
  %274 = and i32 %54, %0
  %275 = and i32 %9, %0
  %276 = and i32 %44, %7
  %277 = and i32 %44, %0
  %278 = shl i32 %72, 3
  %279 = add i32 %24, %19
  %280 = add i32 %279, %175
  %281 = add i32 %280, %129
  %282 = add i32 %281, %43
  %283 = add i32 %282, %35
  %284 = add i32 %283, %265
  %285 = add i32 %284, %241
  %286 = add i32 %285, %234
  %287 = add i32 %286, %233
  %288 = add i32 %287, %217
  %289 = add i32 %288, %199
  %290 = add i32 %289, %155
  %291 = add i32 %290, %125
  %292 = add i32 %291, %123
  %293 = add i32 %292, %116
  %294 = add i32 %293, %107
  %295 = add i32 %294, %67
  %296 = add i32 %295, %191
  %297 = add i32 %296, %186
  %298 = shl i32 %297, 1
  %299 = sub i32 %51, %174
  %300 = sub i32 %299, %206
  %301 = add i32 %300, %137
  %302 = add i32 %301, %127
  %303 = add i32 %302, %16
  %304 = mul i32 %303, 3
  %305 = add i32 %257, %179
  %306 = sub i32 %305, %273
  %307 = add i32 %306, %208
  %308 = mul i32 %307, 5
  %309 = add i32 %277, %276
  %310 = mul i32 %309, 22
  %311 = sub i32 %275, %274
  %312 = mul i32 %311, 18
  %313 = add i32 %48, %2
  %314 = add i32 %313, %61
  %315 = add i32 %314, 5
  %316 = add i32 %315, %30
  %317 = add i32 %316, %18
  %318 = add i32 %317, %189
  %319 = add i32 %318, %214
  %320 = add i32 %319, %33
  %321 = add i32 %320, %61
  %322 = add i32 %321, %3
  %323 = add i32 %322, %23
  %324 = add i32 %323, %25
  %325 = add i32 %324, %26
  %326 = sub i32 %325, %42
  %327 = add i32 %326, %60
  %328 = add i32 %327, %78
  %329 = sub i32 %328, %84
  %330 = add i32 %329, %88
  %331 = sub i32 %330, %95
  %332 = sub i32 %331, %21
  %333 = sub i32 %332, %111
  %334 = add i32 %333, %36
  %335 = add i32 %334, %53
  %336 = add i32 %335, %136
  %337 = sub i32 %336, %153
  %338 = sub i32 %337, %169
  %339 = add i32 %338, %46
  %340 = add i32 %339, %50
  %341 = sub i32 %340, %178
  %342 = add i32 %341, %190
  %343 = sub i32 %342, %9
  %344 = add i32 %343, %203
  %345 = sub i32 %344, %207
  %346 = add i32 %345, %209
  %347 = sub i32 %346, %216
  %348 = sub i32 %347, %235
  %349 = add i32 %348, %237
  %350 = sub i32 %349, %17
  %351 = add i32 %350, %246
  %352 = sub i32 %351, %247
  %353 = add i32 %352, %250
  %354 = add i32 %353, %251
  %355 = sub i32 %354, %253
  %356 = sub i32 %355, %259
  %357 = sub i32 %356, %266
  %358 = sub i32 %357, %4
  %359 = add i32 %358, %20
  %360 = sub i32 %359, %28
  %361 = add i32 %360, %41
  %362 = sub i32 %361, %45
  %363 = add i32 %362, %47
  %364 = sub i32 %363, %52
  %365 = sub i32 %364, %55
  %366 = add i32 %365, %56
  %367 = sub i32 %366, %58
  %368 = sub i32 %367, %62
  %369 = add i32 %368, %63
  %370 = sub i32 %369, %64
  %371 = add i32 %370, %65
  %372 = add i32 %371, %66
  %373 = sub i32 %372, %76
  %374 = add i32 %373, %77
  %375 = add i32 %374, %79
  %376 = sub i32 %375, %81
  %377 = sub i32 %376, %82
  %378 = sub i32 %377, %85
  %379 = sub i32 %378, %89
  %380 = sub i32 %379, %90
  %381 = sub i32 %380, %91
  %382 = add i32 %381, %94
  %383 = sub i32 %382, %97
  %384 = sub i32 %383, %98
  %385 = add i32 %384, %99
  %386 = add i32 %385, %108
  %387 = sub i32 %386, %109
  %388 = sub i32 %387, %110
  %389 = sub i32 %388, %112
  %390 = sub i32 %389, %114
  %391 = sub i32 %390, %115
  %392 = add i32 %391, %117
  %393 = add i32 %392, %118
  %394 = add i32 %393, %121
  %395 = add i32 %394, %122
  %396 = sub i32 %395, %124
  %397 = add i32 %396, %70
  %398 = sub i32 %397, %126
  %399 = sub i32 %398, %128
  %400 = add i32 %399, %130
  %401 = add i32 %400, %133
  %402 = sub i32 %401, %134
  %403 = sub i32 %402, %135
  %404 = sub i32 %403, %145
  %405 = sub i32 %404, %148
  %406 = sub i32 %405, %149
  %407 = sub i32 %406, %150
  %408 = add i32 %407, %151
  %409 = add i32 %408, %152
  %410 = sub i32 %409, %154
  %411 = add i32 %410, %156
  %412 = add i32 %411, %164
  %413 = add i32 %412, %165
  %414 = add i32 %413, %161
  %415 = add i32 %414, %166
  %416 = sub i32 %415, %167
  %417 = sub i32 %416, %168
  %418 = add i32 %417, %171
  %419 = sub i32 %418, %172
  %420 = add i32 %419, %73
  %421 = add i32 %420, %176
  %422 = sub i32 %421, %177
  %423 = sub i32 %422, %180
  %424 = add i32 %423, %181
  %425 = sub i32 %424, %183
  %426 = sub i32 %425, %146
  %427 = sub i32 %426, %187
  %428 = sub i32 %427, %188
  %429 = add i32 %428, %196
  %430 = add i32 %429, %197
  %431 = sub i32 %430, %198
  %432 = add i32 %431, %200
  %433 = add i32 %432, %204
  %434 = sub i32 %433, %205
  %435 = sub i32 %434, %105
  %436 = sub i32 %435, %210
  %437 = sub i32 %436, %211
  %438 = add i32 %437, %215
  %439 = add i32 %438, %218
  %440 = add i32 %439, %219
  %441 = sub i32 %440, %222
  %442 = sub i32 %441, %223
  %443 = sub i32 %442, %224
  %444 = add i32 %443, %225
  %445 = sub i32 %444, %226
  %446 = add i32 %445, %227
  %447 = add i32 %446, %228
  %448 = add i32 %447, %229
  %449 = add i32 %448, %230
  %450 = add i32 %449, %236
  %451 = add i32 %450, %238
  %452 = sub i32 %451, %239
  %453 = add i32 %452, %240
  %454 = sub i32 %453, %242
  %455 = sub i32 %454, %243
  %456 = add i32 %455, %244
  %457 = add i32 %456, %245
  %458 = sub i32 %457, %252
  %459 = add i32 %458, %254
  %460 = sub i32 %459, %255
  %461 = add i32 %460, %256
  %462 = sub i32 %461, %258
  %463 = add i32 %462, %262
  %464 = sub i32 %463, %267
  %465 = sub i32 %464, %268
  %466 = sub i32 %465, %269
  %467 = add i32 %466, %270
  %468 = sub i32 %467, %104
  %469 = sub i32 %468, %14
  %470 = sub i32 %469, %32
  %471 = add i32 %470, %39
  %472 = sub i32 %471, %71
  %473 = add i32 %472, %75
  %474 = sub i32 %473, %87
  %475 = sub i32 %474, %93
  %476 = sub i32 %475, %103
  %477 = add i32 %476, %106
  %478 = sub i32 %477, %120
  %479 = sub i32 %478, %132
  %480 = sub i32 %479, %139
  %481 = sub i32 %480, %143
  %482 = add i32 %481, %144
  %483 = add i32 %482, %147
  %484 = sub i32 %483, %160
  %485 = sub i32 %484, %170
  %486 = add i32 %485, %173
  %487 = add i32 %486, %182
  %488 = sub i32 %487, %193
  %489 = sub i32 %488, %195
  %490 = sub i32 %489, %202
  %491 = sub i32 %490, %213
  %492 = sub i32 %491, %221
  %493 = sub i32 %492, %232
  %494 = sub i32 %493, %249
  %495 = sub i32 %494, %261
  %496 = sub i32 %495, %264
  %497 = add i32 %496, %272
  %498 = sub i32 %497, %278
  %499 = sub i32 %498, %158
  %500 = sub i32 %499, %163
  %501 = add i32 %500, %310
  %502 = add i32 %501, %312
  %503 = add i32 %502, %308
  %504 = add i32 %503, %304
  %505 = add i32 %504, %298
  %506 = icmp eq i32 %13, %505
  %507 = select i1 %506, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %508 = tail call i32 @puts(i8* nonnull dereferenceable(1) %507)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
