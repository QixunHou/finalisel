digraph "DFG for'crackme' function" {
	Node0x1c62b90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1c62c30[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x1c62cf0[shape=record, label="  %5 = or i32 %4, 1"];
	Node0x1c62d60[shape=record, label="  %6 = xor i32 %3, %0"];
	Node0x1c62dd0[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0x1c62e40[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x1c62eb0[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1c62f50[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x1c62ff0[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0x1c63060[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x1c630d0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x1c63170[shape=record, label="  %14 = xor i32 %0, 2147483647"];
	Node0x1c631e0[shape=record, label="  %15 = and i32 %14, %1"];
	Node0x1c63250[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x1c632c0[shape=record, label="  %17 = add i32 %8, %13"];
	Node0x1c63360[shape=record, label="  %18 = mul i32 %17, -7"];
	Node0x1c633d0[shape=record, label="  %19 = sub i32 1, %7"];
	Node0x1c63440[shape=record, label="  %20 = add i32 %19, %6"];
	Node0x1c634b0[shape=record, label="  %21 = add i32 %20, %8"];
	Node0x1c63520[shape=record, label="  %22 = add i32 %21, %9"];
	Node0x1c63590[shape=record, label="  %23 = sub i32 %22, %16"];
	Node0x1c63600[shape=record, label="  %24 = add i32 %23, %11"];
	Node0x1c63670[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x1c636e0[shape=record, label="  %26 = icmp eq i32 %5, %25"];
	Node0x1c03268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c63b80[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1c63bd0[shape=record, label="  ret void"];
	Node0x1c62b90 -> Node0x1c62c30;
	Node0x1c62c30 -> Node0x1c62cf0;
	Node0x1c62cf0 -> Node0x1c62d60;
	Node0x1c62d60 -> Node0x1c62dd0;
	Node0x1c62dd0 -> Node0x1c62e40;
	Node0x1c62e40 -> Node0x1c62eb0;
	Node0x1c62eb0 -> Node0x1c62f50;
	Node0x1c62f50 -> Node0x1c62ff0;
	Node0x1c62ff0 -> Node0x1c63060;
	Node0x1c63060 -> Node0x1c630d0;
	Node0x1c630d0 -> Node0x1c63170;
	Node0x1c63170 -> Node0x1c631e0;
	Node0x1c631e0 -> Node0x1c63250;
	Node0x1c63250 -> Node0x1c632c0;
	Node0x1c632c0 -> Node0x1c63360;
	Node0x1c63360 -> Node0x1c633d0;
	Node0x1c633d0 -> Node0x1c63440;
	Node0x1c63440 -> Node0x1c634b0;
	Node0x1c634b0 -> Node0x1c63520;
	Node0x1c63520 -> Node0x1c63590;
	Node0x1c63590 -> Node0x1c63600;
	Node0x1c63600 -> Node0x1c63670;
	Node0x1c63670 -> Node0x1c636e0;
	Node0x1c636e0 -> Node0x1c03268;
	Node0x1c03268 -> Node0x1c63b80;
	Node0x1c63b80 -> Node0x1c63bd0;
edge [color=red]
	Node0x1c62b90 -> Node0x1c62c30;
	Node0x1c62c30 -> Node0x1c62cf0;
	Node0x1c62b90 -> Node0x1c62d60;
	Node0x1c62b90 -> Node0x1c62e40;
	Node0x1c62eb0 -> Node0x1c62f50;
	Node0x1c62f50 -> Node0x1c62ff0;
	Node0x1c63060 -> Node0x1c630d0;
	Node0x1c63170 -> Node0x1c631e0;
	Node0x1c631e0 -> Node0x1c63250;
	Node0x1c62e40 -> Node0x1c632c0;
	Node0x1c630d0 -> Node0x1c632c0;
	Node0x1c632c0 -> Node0x1c63360;
	Node0x1c62dd0 -> Node0x1c633d0;
	Node0x1c633d0 -> Node0x1c63440;
	Node0x1c62d60 -> Node0x1c63440;
	Node0x1c63440 -> Node0x1c634b0;
	Node0x1c62e40 -> Node0x1c634b0;
	Node0x1c634b0 -> Node0x1c63520;
	Node0x1c62eb0 -> Node0x1c63520;
	Node0x1c63520 -> Node0x1c63590;
	Node0x1c63250 -> Node0x1c63590;
	Node0x1c63590 -> Node0x1c63600;
	Node0x1c62ff0 -> Node0x1c63600;
	Node0x1c63600 -> Node0x1c63670;
	Node0x1c63360 -> Node0x1c63670;
	Node0x1c62cf0 -> Node0x1c636e0;
	Node0x1c63670 -> Node0x1c636e0;
	Node0x1c636e0 -> Node0x1c03268;
	Node0x1c03268 -> Node0x1c63b80;
}
