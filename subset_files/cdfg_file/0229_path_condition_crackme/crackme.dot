digraph "DFG for'crackme' function" {
	Node0x1e1a3f0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1e1a460[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x1e1ab30[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x1e1aba0[shape=record, label="  %6 = or i32 %5, 1"];
	Node0x1e1ac40[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1e1acb0[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x1e1ad20[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1e1adc0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1e1ae30[shape=record, label="  %11 = or i32 %7, %0"];
	Node0x1e1aea0[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x1e1af10[shape=record, label="  %13 = add i32 %11, %1"];
	Node0x1e1af80[shape=record, label="  %14 = sub i32 %12, %13"];
	Node0x1e1aff0[shape=record, label="  %15 = add i32 %14, %9"];
	Node0x1e1b060[shape=record, label="  %16 = sub i32 %15, %5"];
	Node0x1e1b0d0[shape=record, label="  %17 = add i32 %16, %10"];
	Node0x1e1b140[shape=record, label="  %18 = add i32 %17, %6"];
	Node0x1e1b1b0[shape=record, label="  %19 = icmp eq i32 %3, %18"];
	Node0x1dbb268[shape=record, label="  %20 = select i1 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e1b650[shape=record, label="  %21 = tail call i32 @puts(i8* nonnull dereferenceable(1) %20)"];
	Node0x1e1b6a0[shape=record, label="  ret void"];
	Node0x1e1a3f0 -> Node0x1e1a460;
	Node0x1e1a460 -> Node0x1e1ab30;
	Node0x1e1ab30 -> Node0x1e1aba0;
	Node0x1e1aba0 -> Node0x1e1ac40;
	Node0x1e1ac40 -> Node0x1e1acb0;
	Node0x1e1acb0 -> Node0x1e1ad20;
	Node0x1e1ad20 -> Node0x1e1adc0;
	Node0x1e1adc0 -> Node0x1e1ae30;
	Node0x1e1ae30 -> Node0x1e1aea0;
	Node0x1e1aea0 -> Node0x1e1af10;
	Node0x1e1af10 -> Node0x1e1af80;
	Node0x1e1af80 -> Node0x1e1aff0;
	Node0x1e1aff0 -> Node0x1e1b060;
	Node0x1e1b060 -> Node0x1e1b0d0;
	Node0x1e1b0d0 -> Node0x1e1b140;
	Node0x1e1b140 -> Node0x1e1b1b0;
	Node0x1e1b1b0 -> Node0x1dbb268;
	Node0x1dbb268 -> Node0x1e1b650;
	Node0x1e1b650 -> Node0x1e1b6a0;
edge [color=red]
	Node0x1e1a460 -> Node0x1e1ab30;
	Node0x1e1ab30 -> Node0x1e1aba0;
	Node0x1e1ac40 -> Node0x1e1acb0;
	Node0x1e1acb0 -> Node0x1e1ad20;
	Node0x1e1ad20 -> Node0x1e1adc0;
	Node0x1e1ac40 -> Node0x1e1ae30;
	Node0x1e1ae30 -> Node0x1e1af10;
	Node0x1e1aea0 -> Node0x1e1af80;
	Node0x1e1af10 -> Node0x1e1af80;
	Node0x1e1af80 -> Node0x1e1aff0;
	Node0x1e1ad20 -> Node0x1e1aff0;
	Node0x1e1aff0 -> Node0x1e1b060;
	Node0x1e1ab30 -> Node0x1e1b060;
	Node0x1e1b060 -> Node0x1e1b0d0;
	Node0x1e1adc0 -> Node0x1e1b0d0;
	Node0x1e1b0d0 -> Node0x1e1b140;
	Node0x1e1aba0 -> Node0x1e1b140;
	Node0x1e1a3f0 -> Node0x1e1b1b0;
	Node0x1e1b140 -> Node0x1e1b1b0;
	Node0x1e1b1b0 -> Node0x1dbb268;
	Node0x1dbb268 -> Node0x1e1b650;
}
