; ModuleID = '../.././c_source_file/1274_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1274_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = shl i32 %8, 1
  %10 = xor i32 %4, -1
  %11 = and i32 %5, %3
  %12 = and i32 %11, %10
  %13 = or i32 %5, %3
  %14 = and i32 %13, %4
  %15 = xor i32 %12, -1
  %16 = xor i32 %14, %15
  %17 = sub i32 %9, %16
  %18 = and i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %2, %1
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %19
  %23 = xor i32 %1, -1
  %24 = xor i32 %0, -1
  %25 = or i32 %24, %1
  %26 = xor i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %25, %27
  %29 = shl i32 %28, 1
  %30 = and i32 %2, %0
  %31 = or i32 %23, %0
  %32 = xor i32 %30, %31
  %33 = and i32 %21, %24
  %34 = xor i32 %18, %2
  %35 = and i32 %2, %1
  %36 = and i32 %35, %0
  %37 = or i32 %2, %1
  %38 = xor i32 %37, %24
  %39 = xor i32 %38, %36
  %40 = xor i32 %2, -1
  %41 = and i32 %25, %40
  %42 = and i32 %40, %8
  %43 = or i32 %40, %1
  %44 = or i32 %40, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %23
  %47 = and i32 %40, %1
  %48 = xor i32 %30, -1
  %49 = xor i32 %47, %48
  %50 = xor i32 %43, -1
  %51 = shl i32 %50, 1
  %52 = or i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %7, %53
  %55 = shl i32 %25, 1
  %56 = or i32 %30, %8
  %57 = or i32 %1, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %30, %58
  %60 = and i32 %52, %23
  %61 = xor i32 %37, -1
  %62 = or i32 %30, %61
  %63 = and i32 %20, %0
  %64 = add i32 %44, 1
  %65 = and i32 %26, %1
  %66 = xor i32 %31, -1
  %67 = or i32 %30, %66
  %68 = and i32 %23, %2
  %69 = and i32 %68, %24
  %70 = or i32 %20, %24
  %71 = xor i32 %69, %70
  %72 = and i32 %20, %24
  %73 = or i32 %43, %0
  %74 = or i32 %45, %8
  %75 = and i32 %26, %7
  %76 = or i32 %27, %23
  %77 = or i32 %47, %24
  %78 = shl i32 %77, 1
  %79 = and i32 %40, %0
  %80 = xor i32 %79, %1
  %81 = or i32 %21, %66
  %82 = and i32 %26, %25
  %83 = or i32 %18, %2
  %84 = and i32 %68, %0
  %85 = or i32 %20, %0
  %86 = xor i32 %84, %85
  %87 = and i32 %44, %1
  %88 = shl i32 %87, 1
  %89 = and i32 %37, %0
  %90 = or i32 %18, %21
  %91 = xor i32 %36, %0
  %92 = xor i32 %91, %20
  %93 = and i32 %44, %8
  %94 = xor i32 %79, -1
  %95 = and i32 %94, %8
  %96 = shl i32 %95, 1
  %97 = xor i32 %35, %0
  %98 = and i32 %7, %2
  %99 = or i32 %50, %24
  %100 = and i32 %94, %23
  %101 = or i32 %7, %27
  %102 = xor i32 %30, %23
  %103 = shl i32 %26, 1
  %104 = or i32 %26, %7
  %105 = and i32 %61, %24
  %106 = and i32 %47, %24
  %107 = and i32 %61, %0
  %108 = and i32 %47, %0
  %109 = and i32 %50, %24
  %110 = mul i32 %109, -7
  %111 = and i32 %35, %24
  %112 = and i32 %50, %0
  %113 = mul i32 %112, -11
  %114 = and i32 %4, %3
  %115 = or i32 %5, %4
  %116 = xor i32 %115, %114
  %117 = or i32 %4, %3
  %118 = xor i32 %117, -1
  %119 = xor i32 %13, -1
  %120 = or i32 %119, %10
  %121 = xor i32 %5, -1
  %122 = or i32 %121, %3
  %123 = or i32 %122, %10
  %124 = and i32 %121, %3
  %125 = xor i32 %124, -1
  %126 = add i32 %124, 1
  %127 = xor i32 %3, -1
  %128 = and i32 %127, %5
  %129 = and i32 %128, %4
  %130 = or i32 %127, %5
  %131 = and i32 %130, %10
  %132 = or i32 %129, %131
  %133 = and i32 %128, %10
  %134 = xor i32 %5, %3
  %135 = or i32 %134, %10
  %136 = xor i32 %133, %135
  %137 = and i32 %127, %4
  %138 = and i32 %5, %4
  %139 = or i32 %127, %4
  %140 = xor i32 %138, %139
  %141 = xor i32 %4, %3
  %142 = xor i32 %141, -1
  %143 = xor i32 %5, %4
  %144 = xor i32 %143, -1
  %145 = and i32 %144, %142
  %146 = and i32 %117, %121
  %147 = shl i32 %146, 1
  %148 = xor i32 %134, %4
  %149 = xor i32 %148, -1
  %150 = xor i32 %129, %149
  %151 = shl i32 %150, 1
  %152 = xor i32 %138, %117
  %153 = and i32 %139, %5
  %154 = or i32 %137, %121
  %155 = and i32 %121, %4
  %156 = xor i32 %155, %122
  %157 = shl i32 %156, 1
  %158 = xor i32 %139, -1
  %159 = add i32 %139, 1
  %160 = or i32 %122, %4
  %161 = xor i32 %137, -1
  %162 = xor i32 %161, %5
  %163 = xor i32 %122, -1
  %164 = or i32 %163, %4
  %165 = or i32 %144, %142
  %166 = and i32 %11, %4
  %167 = or i32 %166, %149
  %168 = or i32 %143, %3
  %169 = and i32 %134, %10
  %170 = or i32 %166, %169
  %171 = shl i32 %117, 1
  %172 = or i32 %124, %4
  %173 = xor i32 %115, -1
  %174 = or i32 %173, %127
  %175 = xor i32 %117, %5
  %176 = shl i32 %175, 1
  %177 = xor i32 %166, 2147483647
  %178 = xor i32 %177, %169
  %179 = shl i32 %178, 1
  %180 = xor i32 %135, -1
  %181 = or i32 %133, %180
  %182 = or i32 %173, %142
  %183 = or i32 %143, %137
  %184 = and i32 %134, %139
  %185 = or i32 %144, %118
  %186 = shl i32 %185, 1
  %187 = and i32 %134, %117
  %188 = xor i32 %166, %148
  %189 = shl i32 %188, 2
  %190 = and i32 %143, %127
  %191 = and i32 %115, %142
  %192 = or i32 %119, %4
  %193 = and i32 %143, %161
  %194 = or i32 %143, %158
  %195 = xor i32 %114, -1
  %196 = and i32 %195, %5
  %197 = xor i32 %155, -1
  %198 = and i32 %144, %161
  %199 = or i32 %143, %114
  %200 = xor i32 %139, %5
  %201 = or i32 %134, %158
  %202 = add i32 %137, 1
  %203 = xor i32 %138, -1
  %204 = and i32 %141, %203
  %205 = xor i32 %138, %125
  %206 = or i32 %121, %4
  %207 = xor i32 %206, %3
  %208 = and i32 %13, %10
  %209 = or i32 %121, %118
  %210 = and i32 %143, %3
  %211 = and i32 %134, %4
  %212 = or i32 %12, %211
  %213 = or i32 %141, %5
  %214 = and i32 %115, %3
  %215 = or i32 %134, %4
  %216 = xor i32 %129, %215
  %217 = xor i32 %137, %5
  %218 = xor i32 %11, %4
  %219 = and i32 %206, %3
  %220 = xor i32 %173, %3
  %221 = and i32 %134, %161
  %222 = and i32 %141, %5
  %223 = xor i32 %206, -1
  %224 = or i32 %114, %223
  %225 = and i32 %143, %141
  %226 = and i32 %121, %142
  %227 = or i32 %124, %10
  %228 = or i32 %173, %3
  %229 = xor i32 %11, -1
  %230 = add i32 %11, 1
  %231 = xor i32 %130, %4
  %232 = or i32 %129, %231
  %233 = and i32 %115, %127
  %234 = or i32 %138, %141
  %235 = and i32 %139, %121
  %236 = or i32 %141, %223
  %237 = xor i32 %129, -1
  %238 = xor i32 %131, %237
  %239 = or i32 %155, %11
  %240 = and i32 %125, %4
  %241 = shl i32 %240, 1
  %242 = or i32 %143, %118
  %243 = xor i32 %197, %3
  %244 = xor i32 %134, -1
  %245 = and i32 %244, %161
  %246 = or i32 %142, %5
  %247 = shl i32 %246, 2
  %248 = xor i32 %115, %3
  %249 = xor i32 %155, %3
  %250 = and i32 %130, %4
  %251 = xor i32 %250, -1
  %252 = xor i32 %133, %251
  %253 = and i32 %117, %244
  %254 = or i32 %137, %5
  %255 = or i32 %134, %114
  %256 = shl i32 %255, 1
  %257 = and i32 %125, %10
  %258 = and i32 %143, %117
  %259 = or i32 %223, %142
  %260 = or i32 %114, %163
  %261 = or i32 %229, %4
  %262 = xor i32 %138, %3
  %263 = or i32 %138, %118
  %264 = or i32 %13, %10
  %265 = shl i32 %264, 1
  %266 = xor i32 %223, %3
  %267 = and i32 %134, %195
  %268 = shl i32 %267, 1
  %269 = or i32 %244, %4
  %270 = shl i32 %269, 1
  %271 = or i32 %163, %10
  %272 = or i32 %144, %127
  %273 = xor i32 %215, -1
  %274 = or i32 %129, %273
  %275 = or i32 %12, %14
  %276 = or i32 %133, %250
  %277 = and i32 %121, %161
  %278 = or i32 %244, %158
  %279 = xor i32 %114, %5
  %280 = xor i32 %229, %4
  %281 = or i32 %137, %144
  %282 = xor i32 %177, %208
  %283 = shl i32 %282, 1
  %284 = or i32 %141, %144
  %285 = xor i32 %118, %5
  %286 = or i32 %141, %173
  %287 = shl i32 %286, 1
  %288 = and i32 %206, %142
  %289 = or i32 %114, %5
  %290 = or i32 %13, %4
  %291 = xor i32 %125, %4
  %292 = and i32 %139, %144
  %293 = or i32 %114, %119
  %294 = xor i32 %137, %125
  %295 = or i32 %125, %10
  %296 = or i32 %124, %137
  %297 = or i32 %121, %158
  %298 = and i32 %142, %5
  %299 = or i32 %114, %144
  %300 = and i32 %197, %142
  %301 = or i32 %129, %148
  %302 = or i32 %166, %208
  %303 = or i32 %121, %142
  %304 = or i32 %11, %137
  %305 = and i32 %115, %141
  %306 = or i32 %11, %4
  %307 = or i32 %138, %142
  %308 = and i32 %197, %3
  %309 = shl i32 %308, 1
  %310 = xor i32 %122, %4
  %311 = xor i32 %124, %4
  %312 = xor i32 %158, %5
  %313 = or i32 %138, %124
  %314 = and i32 %141, %197
  %315 = or i32 %141, %121
  %316 = and i32 %143, %139
  %317 = or i32 %138, %3
  %318 = and i32 %206, %141
  %319 = or i32 %134, %137
  %320 = shl i32 %319, 1
  %321 = xor i32 %137, %229
  %322 = or i32 %137, %244
  %323 = and i32 %203, %3
  %324 = add i32 %5, 1
  %325 = xor i32 %13, %4
  %326 = xor i32 %325, -1
  %327 = xor i32 %166, %326
  %328 = and i32 %229, %4
  %329 = or i32 %138, %119
  %330 = or i32 %155, %141
  %331 = or i32 %223, %3
  %332 = or i32 %244, %118
  %333 = or i32 %138, %127
  %334 = and i32 %117, %144
  %335 = xor i32 %211, %15
  %336 = and i32 %139, %244
  %337 = add i32 %122, 1
  %338 = or i32 %158, %5
  %339 = shl i32 %338, 2
  %340 = or i32 %125, %4
  %341 = and i32 %161, %5
  %342 = or i32 %143, %141
  %343 = shl i32 %342, 2
  %344 = and i32 %144, %3
  %345 = xor i32 %231, %237
  %346 = or i32 %114, %173
  %347 = xor i32 %13, %114
  %348 = or i32 %143, %127
  %349 = or i32 %144, %3
  %350 = or i32 %114, %121
  %351 = xor i32 %122, %114
  %352 = or i32 %138, %158
  %353 = and i32 %197, %127
  %354 = shl i32 %353, 2
  %355 = and i32 %121, %195
  %356 = and i32 %117, %5
  %357 = or i32 %155, %142
  %358 = and i32 %203, %127
  %359 = and i32 %141, %121
  %360 = and i32 %144, %127
  %361 = or i32 %143, %142
  %362 = shl i32 %361, 1
  %363 = or i32 %155, %127
  %364 = and i32 %143, %195
  %365 = xor i32 %203, %3
  %366 = xor i32 %206, %114
  %367 = and i32 %143, %142
  %368 = and i32 %119, %10
  %369 = mul i32 %368, 12
  %370 = and i32 %124, %10
  %371 = mul i32 %370, 22
  %372 = and i32 %119, %4
  %373 = and i32 %124, %4
  %374 = mul i32 %373, 19
  %375 = and i32 %163, %10
  %376 = mul i32 %375, 23
  %377 = mul i32 %12, 9
  %378 = and i32 %163, %4
  %379 = mul i32 %378, 26
  %380 = add i32 %31, %2
  %381 = add i32 %380, %83
  %382 = add i32 %381, %104
  %383 = add i32 %382, %76
  %384 = add i32 %383, %72
  %385 = add i32 %384, %60
  %386 = add i32 %385, %134
  %387 = add i32 %386, %144
  %388 = add i32 %387, %285
  %389 = add i32 %388, %226
  %390 = add i32 %389, %349
  %391 = add i32 %390, %333
  %392 = add i32 %391, %316
  %393 = add i32 %392, %258
  %394 = add i32 %393, %248
  %395 = add i32 %394, %242
  %396 = add i32 %395, %239
  %397 = add i32 %396, %236
  %398 = add i32 %397, %214
  %399 = add i32 %398, %148
  %400 = add i32 %399, %199
  %401 = add i32 %400, %145
  %402 = add i32 %62, %107
  %403 = sub i32 %138, %402
  %404 = sub i32 %403, %154
  %405 = sub i32 %404, %346
  %406 = add i32 %405, %328
  %407 = sub i32 %406, %243
  %408 = sub i32 %407, %216
  %409 = mul i32 %408, 3
  %410 = sub i32 %36, %101
  %411 = add i32 %410, %59
  %412 = add i32 %411, %233
  %413 = add i32 %412, %372
  %414 = mul i32 %413, 5
  %415 = sub i32 %111, %166
  %416 = mul i32 %415, 6
  %417 = add i32 %401, %310
  %418 = add i32 %417, %170
  %419 = add i32 %418, %302
  %420 = shl i32 %419, 1
  %421 = add i32 %41, 1073741823
  %422 = add i32 %421, %123
  %423 = add i32 %422, %228
  %424 = shl i32 %423, 2
  %425 = add i32 %34, %57
  %426 = sub i32 %425, %42
  %427 = add i32 %426, %43
  %428 = sub i32 %427, %55
  %429 = add i32 %428, %64
  %430 = add i32 %429, %53
  %431 = sub i32 %430, %52
  %432 = sub i32 %431, %98
  %433 = add i32 %432, 1
  %434 = sub i32 %433, %22
  %435 = add i32 %434, %32
  %436 = sub i32 %435, %33
  %437 = add i32 %436, %46
  %438 = add i32 %437, %49
  %439 = sub i32 %438, %51
  %440 = add i32 %439, %54
  %441 = sub i32 %440, %56
  %442 = sub i32 %441, %63
  %443 = sub i32 %442, %65
  %444 = add i32 %443, %67
  %445 = sub i32 %444, %73
  %446 = sub i32 %445, %74
  %447 = add i32 %446, %75
  %448 = sub i32 %447, %80
  %449 = add i32 %448, %81
  %450 = sub i32 %449, %82
  %451 = add i32 %450, %89
  %452 = sub i32 %451, %90
  %453 = add i32 %452, %93
  %454 = add i32 %453, %97
  %455 = sub i32 %454, %99
  %456 = add i32 %455, %100
  %457 = add i32 %456, %102
  %458 = sub i32 %457, %103
  %459 = add i32 %458, %105
  %460 = sub i32 %459, %106
  %461 = add i32 %460, %108
  %462 = sub i32 %461, %29
  %463 = add i32 %462, %39
  %464 = add i32 %463, %71
  %465 = sub i32 %464, %78
  %466 = sub i32 %465, %86
  %467 = sub i32 %466, %88
  %468 = add i32 %467, %92
  %469 = sub i32 %468, %96
  %470 = add i32 %469, %110
  %471 = add i32 %470, %113
  %472 = add i32 %471, %118
  %473 = add i32 %472, %137
  %474 = add i32 %473, %159
  %475 = add i32 %474, %5
  %476 = sub i32 %475, %114
  %477 = add i32 %476, %202
  %478 = add i32 %477, %195
  %479 = sub i32 %478, %141
  %480 = add i32 %479, %324
  %481 = sub i32 %480, %139
  %482 = add i32 %481, %126
  %483 = add i32 %482, %153
  %484 = sub i32 %483, %162
  %485 = sub i32 %484, %171
  %486 = add i32 %485, %143
  %487 = sub i32 %486, %196
  %488 = add i32 %487, %200
  %489 = sub i32 %488, %209
  %490 = sub i32 %489, %213
  %491 = add i32 %490, %217
  %492 = sub i32 %491, %222
  %493 = add i32 %492, %122
  %494 = add i32 %493, %230
  %495 = add i32 %494, %235
  %496 = add i32 %495, %244
  %497 = add i32 %496, %11
  %498 = sub i32 %497, %254
  %499 = sub i32 %498, %277
  %500 = sub i32 %499, %279
  %501 = sub i32 %500, %289
  %502 = sub i32 %501, %297
  %503 = add i32 %502, %298
  %504 = add i32 %503, %119
  %505 = sub i32 %504, %303
  %506 = add i32 %505, %312
  %507 = sub i32 %506, %13
  %508 = add i32 %507, %315
  %509 = add i32 %508, %337
  %510 = sub i32 %509, %341
  %511 = add i32 %510, %350
  %512 = add i32 %511, %355
  %513 = add i32 %512, %356
  %514 = sub i32 %513, %359
  %515 = sub i32 %514, %116
  %516 = add i32 %515, %120
  %517 = sub i32 %516, %140
  %518 = sub i32 %517, %147
  %519 = add i32 %518, %152
  %520 = sub i32 %519, %160
  %521 = sub i32 %520, %164
  %522 = sub i32 %521, %165
  %523 = sub i32 %522, %135
  %524 = add i32 %523, %168
  %525 = add i32 %524, %172
  %526 = sub i32 %525, %174
  %527 = sub i32 %526, %176
  %528 = add i32 %527, %182
  %529 = add i32 %528, %183
  %530 = sub i32 %529, %184
  %531 = sub i32 %530, %187
  %532 = add i32 %531, %190
  %533 = add i32 %532, %191
  %534 = add i32 %533, %192
  %535 = sub i32 %534, %193
  %536 = sub i32 %535, %194
  %537 = add i32 %536, %198
  %538 = sub i32 %537, %201
  %539 = sub i32 %538, %204
  %540 = add i32 %539, %205
  %541 = sub i32 %540, %207
  %542 = add i32 %541, %208
  %543 = add i32 %542, %14
  %544 = sub i32 %543, %210
  %545 = sub i32 %544, %218
  %546 = sub i32 %545, %219
  %547 = add i32 %546, %220
  %548 = add i32 %547, %221
  %549 = add i32 %548, %224
  %550 = sub i32 %549, %225
  %551 = sub i32 %550, %227
  %552 = sub i32 %551, %234
  %553 = add i32 %552, %245
  %554 = sub i32 %553, %247
  %555 = sub i32 %554, %249
  %556 = add i32 %555, %253
  %557 = sub i32 %556, %257
  %558 = sub i32 %557, %259
  %559 = sub i32 %558, %260
  %560 = add i32 %559, %261
  %561 = add i32 %560, %262
  %562 = add i32 %561, %263
  %563 = add i32 %562, %266
  %564 = sub i32 %563, %271
  %565 = add i32 %564, %272
  %566 = add i32 %565, %211
  %567 = sub i32 %566, %278
  %568 = sub i32 %567, %280
  %569 = add i32 %568, %281
  %570 = add i32 %569, %284
  %571 = sub i32 %570, %288
  %572 = sub i32 %571, %290
  %573 = sub i32 %572, %291
  %574 = sub i32 %573, %292
  %575 = sub i32 %574, %293
  %576 = sub i32 %575, %294
  %577 = add i32 %576, %295
  %578 = sub i32 %577, %296
  %579 = add i32 %578, %299
  %580 = sub i32 %579, %300
  %581 = add i32 %580, %304
  %582 = sub i32 %581, %305
  %583 = add i32 %582, %306
  %584 = add i32 %583, %307
  %585 = sub i32 %584, %311
  %586 = add i32 %585, %313
  %587 = sub i32 %586, %314
  %588 = sub i32 %587, %317
  %589 = sub i32 %588, %318
  %590 = sub i32 %589, %321
  %591 = sub i32 %590, %322
  %592 = add i32 %591, %323
  %593 = add i32 %592, %329
  %594 = add i32 %593, %330
  %595 = add i32 %594, %331
  %596 = sub i32 %595, %332
  %597 = sub i32 %596, %169
  %598 = sub i32 %597, %334
  %599 = add i32 %598, %336
  %600 = sub i32 %599, %339
  %601 = add i32 %600, %340
  %602 = add i32 %601, %344
  %603 = add i32 %602, %347
  %604 = add i32 %603, %348
  %605 = add i32 %604, %351
  %606 = sub i32 %605, %352
  %607 = sub i32 %606, %325
  %608 = sub i32 %607, %357
  %609 = sub i32 %608, %358
  %610 = sub i32 %609, %360
  %611 = sub i32 %610, %363
  %612 = sub i32 %611, %364
  %613 = sub i32 %612, %365
  %614 = add i32 %613, %366
  %615 = add i32 %614, %367
  %616 = sub i32 %615, %132
  %617 = sub i32 %616, %136
  %618 = sub i32 %617, %157
  %619 = add i32 %618, %167
  %620 = sub i32 %619, %181
  %621 = sub i32 %620, %186
  %622 = add i32 %621, %212
  %623 = sub i32 %622, %232
  %624 = sub i32 %623, %238
  %625 = sub i32 %624, %241
  %626 = add i32 %625, %252
  %627 = sub i32 %626, %256
  %628 = sub i32 %627, %265
  %629 = sub i32 %628, %268
  %630 = sub i32 %629, %270
  %631 = add i32 %630, %274
  %632 = sub i32 %631, %275
  %633 = sub i32 %632, %276
  %634 = sub i32 %633, %287
  %635 = add i32 %634, %301
  %636 = sub i32 %635, %309
  %637 = sub i32 %636, %320
  %638 = sub i32 %637, %327
  %639 = add i32 %638, %335
  %640 = sub i32 %639, %343
  %641 = sub i32 %640, %345
  %642 = sub i32 %641, %354
  %643 = sub i32 %642, %362
  %644 = add i32 %643, %369
  %645 = add i32 %644, %371
  %646 = add i32 %645, %374
  %647 = add i32 %646, %376
  %648 = add i32 %647, %377
  %649 = add i32 %648, %379
  %650 = sub i32 %649, %151
  %651 = sub i32 %650, %189
  %652 = add i32 %651, %416
  %653 = sub i32 %652, %179
  %654 = sub i32 %653, %283
  %655 = add i32 %654, %424
  %656 = add i32 %655, %414
  %657 = add i32 %656, %409
  %658 = add i32 %657, %420
  %659 = icmp eq i32 %17, %658
  %660 = select i1 %659, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %661 = tail call i32 @puts(i8* nonnull dereferenceable(1) %660)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
