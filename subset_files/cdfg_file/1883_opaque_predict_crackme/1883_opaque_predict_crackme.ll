; ModuleID = '../.././c_source_file/1883_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1883_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %1
  %5 = or i32 %4, %0
  %6 = xor i32 %1, -1
  %7 = and i32 %6, %0
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %1
  %10 = or i32 %9, %7
  %11 = shl i32 %10, 1
  %12 = sub i32 %5, %11
  %13 = xor i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = or i32 %8, %0
  %16 = xor i32 %1, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %15, %17
  %19 = shl i32 %18, 1
  %20 = and i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %21, %1
  %23 = or i32 %20, %16
  %24 = xor i32 %9, -1
  %25 = or i32 %24, %0
  %26 = xor i32 %7, -1
  %27 = and i32 %14, %26
  %28 = shl i32 %27, 1
  %29 = and i32 %4, %0
  %30 = xor i32 %0, -1
  %31 = xor i32 %2, %1
  %32 = and i32 %31, %30
  %33 = or i32 %29, %32
  %34 = or i32 %1, %0
  %35 = and i32 %13, %34
  %36 = add i32 %9, 1
  %37 = add i32 %16, 1
  %38 = and i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = and i32 %39, %2
  %41 = and i32 %16, %21
  %42 = shl i32 %41, 1
  %43 = and i32 %8, %0
  %44 = or i32 %43, %17
  %45 = shl i32 %44, 1
  %46 = and i32 %6, %2
  %47 = and i32 %46, %0
  %48 = or i32 %6, %2
  %49 = xor i32 %48, %30
  %50 = xor i32 %49, %47
  %51 = or i32 %20, %1
  %52 = or i32 %8, %1
  %53 = xor i32 %52, -1
  %54 = or i32 %53, %30
  %55 = xor i32 %31, %0
  %56 = xor i32 %29, %55
  %57 = or i32 %31, %38
  %58 = xor i32 %26, %2
  %59 = xor i32 %31, -1
  %60 = xor i32 %59, %0
  %61 = xor i32 %4, -1
  %62 = xor i32 %43, %61
  %63 = and i32 %4, %30
  %64 = or i32 %2, %1
  %65 = and i32 %64, %0
  %66 = xor i32 %63, -1
  %67 = xor i32 %65, %66
  %68 = xor i32 %64, -1
  %69 = shl i32 %32, 2
  %70 = or i32 %63, %65
  %71 = or i32 %47, %55
  %72 = xor i32 %43, -1
  %73 = and i32 %72, %1
  %74 = and i32 %16, %14
  %75 = or i32 %13, %16
  %76 = or i32 %38, %53
  %77 = or i32 %6, %0
  %78 = xor i32 %77, -1
  %79 = or i32 %31, %78
  %80 = or i32 %13, %1
  %81 = and i32 %13, %1
  %82 = shl i32 %6, 1
  %83 = and i32 %61, %0
  %84 = xor i32 %55, -1
  %85 = or i32 %29, %84
  %86 = or i32 %16, %8
  %87 = or i32 %2, %0
  %88 = and i32 %87, %6
  %89 = xor i32 %34, -1
  %90 = or i32 %14, %89
  %91 = and i32 %46, %30
  %92 = or i32 %31, %30
  %93 = xor i32 %92, -1
  %94 = or i32 %91, %93
  %95 = or i32 %7, %2
  %96 = and i32 %77, %2
  %97 = or i32 %38, %14
  %98 = xor i32 %7, %2
  %99 = and i32 %59, %39
  %100 = xor i32 %0, 2147483647
  %101 = xor i32 %100, %64
  %102 = xor i32 %101, %29
  %103 = shl i32 %102, 1
  %104 = and i32 %64, %30
  %105 = and i32 %34, %14
  %106 = xor i32 %15, -1
  %107 = or i32 %106, %17
  %108 = or i32 %20, %89
  %109 = or i32 %31, %7
  %110 = or i32 %38, %59
  %111 = xor i32 %61, %0
  %112 = and i32 %61, %30
  %113 = and i32 %8, %26
  %114 = shl i32 %113, 1
  %115 = or i32 %106, %6
  %116 = and i32 %21, %1
  %117 = and i32 %77, %59
  %118 = shl i32 %117, 1
  %119 = xor i32 %87, -1
  %120 = or i32 %38, %119
  %121 = xor i32 %7, %24
  %122 = shl i32 %121, 1
  %123 = add i32 %7, 1
  %124 = and i32 %26, %2
  %125 = or i32 %17, %2
  %126 = or i32 %43, %6
  %127 = or i32 %14, %17
  %128 = or i32 %20, %78
  %129 = xor i32 %15, %38
  %130 = shl i32 %129, 1
  %131 = or i32 %61, %0
  %132 = or i32 %78, %2
  %133 = or i32 %16, %14
  %134 = shl i32 %133, 1
  %135 = and i32 %52, %30
  %136 = xor i32 %68, %0
  %137 = xor i32 %119, %1
  %138 = or i32 %4, %7
  %139 = xor i32 %20, %77
  %140 = or i32 %29, %104
  %141 = or i32 %43, %1
  %142 = or i32 %64, %30
  %143 = xor i32 %77, %2
  %144 = and i32 %77, %14
  %145 = or i32 %68, %0
  %146 = and i32 %16, %8
  %147 = and i32 %34, %59
  %148 = or i32 %13, %89
  %149 = and i32 %52, %0
  %150 = or i32 %68, %30
  %151 = or i32 %8, %17
  %152 = xor i32 %34, %2
  %153 = xor i32 %87, %1
  %154 = or i32 %38, %68
  %155 = shl i32 %154, 1
  %156 = and i32 %14, %17
  %157 = xor i32 %38, %2
  %158 = or i32 %43, %53
  %159 = and i32 %72, %6
  %160 = or i32 %89, %2
  %161 = and i32 %15, %6
  %162 = or i32 %16, %106
  %163 = xor i32 %43, %52
  %164 = and i32 %13, %39
  %165 = shl i32 %164, 1
  %166 = or i32 %16, %119
  %167 = or i32 %31, %0
  %168 = xor i32 %167, -1
  %169 = or i32 %47, %168
  %170 = or i32 %20, %17
  %171 = or i32 %64, %0
  %172 = or i32 %13, %78
  %173 = shl i32 %172, 1
  %174 = xor i32 %32, -1
  %175 = xor i32 %29, %174
  %176 = and i32 %31, %0
  %177 = xor i32 %176, %66
  %178 = and i32 %59, %30
  %179 = and i32 %17, %2
  %180 = and i32 %13, %26
  %181 = xor i32 %89, %2
  %182 = shl i32 %181, 1
  %183 = or i32 %9, %0
  %184 = shl i32 %183, 2
  %185 = and i32 %16, %2
  %186 = or i32 %9, %30
  %187 = or i32 %13, %7
  %188 = shl i32 %187, 2
  %189 = or i32 %106, %1
  %190 = and i32 %31, %26
  %191 = or i32 %59, %0
  %192 = xor i32 %52, %38
  %193 = or i32 %52, %30
  %194 = or i32 %59, %30
  %195 = or i32 %119, %17
  %196 = xor i32 %52, %0
  %197 = xor i32 %39, %2
  %198 = or i32 %20, %68
  %199 = and i32 %31, %39
  %200 = xor i32 %20, %1
  %201 = xor i32 %53, %0
  %202 = or i32 %20, %6
  %203 = and i32 %72, %17
  %204 = and i32 %24, %0
  %205 = or i32 %52, %0
  %206 = and i32 %31, %34
  %207 = or i32 %13, %38
  %208 = xor i32 %24, %0
  %209 = and i32 %16, %72
  %210 = or i32 %119, %1
  %211 = or i32 %38, %8
  %212 = and i32 %14, %1
  %213 = and i32 %13, %17
  %214 = and i32 %59, %0
  %215 = or i32 %14, %78
  %216 = and i32 %87, %1
  %217 = shl i32 %216, 1
  %218 = and i32 %48, %0
  %219 = or i32 %91, %218
  %220 = xor i32 %47, %84
  %221 = or i32 %13, %17
  %222 = or i32 %14, %1
  %223 = xor i32 %72, %1
  %224 = and i32 %9, %30
  %225 = mul i32 %224, -13
  %226 = and i32 %68, %0
  %227 = shl i32 %226, 2
  %228 = and i32 %9, %0
  %229 = and i32 %53, %30
  %230 = mul i32 %229, -21
  %231 = mul i32 %63, -6
  %232 = and i32 %53, %0
  %233 = mul i32 %29, -7
  %234 = or i32 %124, %146
  %235 = add i32 %234, %205
  %236 = sub i32 %235, %212
  %237 = mul i32 %236, 3
  %238 = sub i32 %201, %147
  %239 = add i32 %238, %90
  %240 = mul i32 %239, 5
  %241 = add i32 %232, %228
  %242 = mul i32 %241, -9
  %243 = add i32 %141, %0
  %244 = shl i32 %243, 2
  %245 = sub i32 -2, %38
  %246 = add i32 %245, %89
  %247 = add i32 %246, %59
  %248 = add i32 %247, %21
  %249 = add i32 %248, %68
  %250 = add i32 %249, %40
  %251 = add i32 %250, %13
  %252 = add i32 %251, %221
  %253 = add i32 %252, %204
  %254 = add i32 %253, %195
  %255 = add i32 %254, %194
  %256 = add i32 %255, %180
  %257 = add i32 %256, %153
  %258 = add i32 %257, %145
  %259 = add i32 %258, %127
  %260 = add i32 %259, %107
  %261 = add i32 %260, %62
  %262 = add i32 %261, %71
  %263 = shl i32 %262, 1
  %264 = add i32 %1, 1
  %265 = add i32 %264, %16
  %266 = add i32 %265, %37
  %267 = sub i32 %266, %82
  %268 = add i32 %267, %123
  %269 = add i32 %268, %77
  %270 = add i32 %269, %38
  %271 = add i32 %270, %36
  %272 = sub i32 %271, %58
  %273 = sub i32 %272, %20
  %274 = sub i32 %273, %31
  %275 = sub i32 %274, %15
  %276 = sub i32 %275, %86
  %277 = sub i32 %276, %95
  %278 = sub i32 %277, %96
  %279 = sub i32 %278, %9
  %280 = sub i32 %279, %98
  %281 = add i32 %280, %125
  %282 = add i32 %281, %64
  %283 = add i32 %282, %132
  %284 = sub i32 %283, %143
  %285 = sub i32 %284, %151
  %286 = add i32 %285, %152
  %287 = sub i32 %286, %157
  %288 = add i32 %287, %160
  %289 = add i32 %288, %179
  %290 = sub i32 %289, %185
  %291 = sub i32 %290, %43
  %292 = sub i32 %291, %197
  %293 = add i32 %292, %211
  %294 = add i32 %293, %72
  %295 = sub i32 %294, %22
  %296 = add i32 %295, %23
  %297 = sub i32 %296, %25
  %298 = add i32 %297, %35
  %299 = sub i32 %298, %51
  %300 = add i32 %299, %54
  %301 = add i32 %300, %57
  %302 = add i32 %301, %60
  %303 = add i32 %302, %73
  %304 = add i32 %303, %74
  %305 = sub i32 %304, %75
  %306 = sub i32 %305, %76
  %307 = add i32 %306, %79
  %308 = add i32 %307, %80
  %309 = sub i32 %308, %81
  %310 = add i32 %309, %83
  %311 = sub i32 %310, %88
  %312 = sub i32 %311, %65
  %313 = add i32 %312, %97
  %314 = add i32 %313, %99
  %315 = add i32 %314, %104
  %316 = add i32 %315, %105
  %317 = add i32 %316, %108
  %318 = sub i32 %317, %109
  %319 = sub i32 %318, %110
  %320 = add i32 %319, %111
  %321 = sub i32 %320, %112
  %322 = sub i32 %321, %114
  %323 = add i32 %322, %115
  %324 = add i32 %323, %116
  %325 = sub i32 %324, %120
  %326 = sub i32 %325, %126
  %327 = sub i32 %326, %128
  %328 = sub i32 %327, %131
  %329 = add i32 %328, %135
  %330 = sub i32 %329, %136
  %331 = add i32 %330, %137
  %332 = add i32 %331, %138
  %333 = add i32 %332, %139
  %334 = add i32 %333, %142
  %335 = sub i32 %334, %144
  %336 = sub i32 %335, %148
  %337 = add i32 %336, %149
  %338 = add i32 %337, %150
  %339 = add i32 %338, %156
  %340 = add i32 %339, %158
  %341 = sub i32 %340, %159
  %342 = add i32 %341, %161
  %343 = add i32 %342, %162
  %344 = sub i32 %343, %163
  %345 = sub i32 %344, %166
  %346 = add i32 %345, %170
  %347 = add i32 %346, %171
  %348 = sub i32 %347, %178
  %349 = sub i32 %348, %182
  %350 = sub i32 %349, %186
  %351 = sub i32 %350, %189
  %352 = sub i32 %351, %190
  %353 = sub i32 %352, %191
  %354 = sub i32 %353, %192
  %355 = sub i32 %354, %193
  %356 = sub i32 %355, %196
  %357 = sub i32 %356, %198
  %358 = sub i32 %357, %199
  %359 = sub i32 %358, %176
  %360 = add i32 %359, %200
  %361 = add i32 %360, %202
  %362 = sub i32 %361, %203
  %363 = sub i32 %362, %55
  %364 = add i32 %363, %206
  %365 = add i32 %364, %207
  %366 = add i32 %365, %208
  %367 = sub i32 %366, %209
  %368 = add i32 %367, %210
  %369 = add i32 %368, %213
  %370 = sub i32 %369, %214
  %371 = add i32 %370, %215
  %372 = add i32 %371, %222
  %373 = add i32 %372, %223
  %374 = add i32 %373, %92
  %375 = sub i32 %374, %19
  %376 = sub i32 %375, %28
  %377 = sub i32 %376, %33
  %378 = sub i32 %377, %42
  %379 = sub i32 %378, %45
  %380 = add i32 %379, %50
  %381 = add i32 %380, %56
  %382 = sub i32 %381, %67
  %383 = sub i32 %382, %69
  %384 = sub i32 %383, %70
  %385 = sub i32 %384, %85
  %386 = sub i32 %385, %94
  %387 = sub i32 %386, %118
  %388 = sub i32 %387, %122
  %389 = sub i32 %388, %130
  %390 = sub i32 %389, %134
  %391 = sub i32 %390, %140
  %392 = sub i32 %391, %155
  %393 = sub i32 %392, %165
  %394 = sub i32 %393, %169
  %395 = sub i32 %394, %173
  %396 = sub i32 %395, %175
  %397 = sub i32 %396, %177
  %398 = sub i32 %397, %184
  %399 = sub i32 %398, %188
  %400 = sub i32 %399, %217
  %401 = sub i32 %400, %219
  %402 = sub i32 %401, %220
  %403 = add i32 %402, %225
  %404 = sub i32 %403, %227
  %405 = add i32 %404, %230
  %406 = add i32 %405, %231
  %407 = add i32 %406, %233
  %408 = add i32 %407, %242
  %409 = add i32 %408, %244
  %410 = sub i32 %409, %103
  %411 = add i32 %410, %240
  %412 = add i32 %411, %237
  %413 = add i32 %412, %263
  %414 = icmp eq i32 %12, %413
  %415 = select i1 %414, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %416 = tail call i32 @puts(i8* nonnull dereferenceable(1) %415)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
