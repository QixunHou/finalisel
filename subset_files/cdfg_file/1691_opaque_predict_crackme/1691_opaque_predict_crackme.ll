; ModuleID = '../.././c_source_file/1691_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1691_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %3, -1
  %7 = xor i32 %6, %4
  %8 = and i32 %1, %0
  %9 = shl i32 %8, 1
  %10 = add i32 %9, %4
  %11 = sub i32 %7, %10
  %12 = or i32 %4, %3
  %13 = xor i32 %4, -1
  %14 = or i32 %6, %4
  %15 = and i32 %4, %3
  %16 = xor i32 %12, -1
  %17 = and i32 %6, %4
  %18 = or i32 %1, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %2, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %19
  %23 = or i32 %2, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %2, -1
  %26 = xor i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %25, %27
  %29 = and i32 %25, %0
  %30 = or i32 %29, %27
  %31 = xor i32 %8, -1
  %32 = and i32 %25, %31
  %33 = or i32 %20, %19
  %34 = and i32 %2, %1
  %35 = or i32 %29, %34
  %36 = shl i32 %35, 1
  %37 = xor i32 %2, %1
  %38 = or i32 %37, %8
  %39 = or i32 %20, %8
  %40 = or i32 %27, %2
  %41 = shl i32 %40, 1
  %42 = or i32 %26, %25
  %43 = xor i32 %1, -1
  %44 = or i32 %29, %43
  %45 = or i32 %20, %26
  %46 = shl i32 %45, 2
  %47 = or i32 %25, %1
  %48 = or i32 %47, %0
  %49 = or i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %8, %50
  %52 = xor i32 %37, -1
  %53 = or i32 %25, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %54, %27
  %56 = xor i32 %52, %0
  %57 = or i32 %50, %0
  %58 = xor i32 %0, -1
  %59 = and i32 %43, %2
  %60 = and i32 %59, %58
  %61 = or i32 %43, %2
  %62 = and i32 %61, %0
  %63 = or i32 %60, %62
  %64 = xor i32 %34, -1
  %65 = or i32 %64, %0
  %66 = and i32 %43, %0
  %67 = or i32 %66, %52
  %68 = shl i32 %67, 1
  %69 = and i32 %18, %2
  %70 = xor i32 %18, %2
  %71 = or i32 %26, %54
  %72 = or i32 %66, %2
  %73 = and i32 %2, %0
  %74 = or i32 %73, %19
  %75 = and i32 %18, %25
  %76 = xor i32 %66, -1
  %77 = and i32 %37, %76
  %78 = shl i32 %43, 1
  %79 = and i32 %49, %0
  %80 = xor i32 %66, %2
  %81 = shl i32 %80, 1
  %82 = or i32 %43, %0
  %83 = and i32 %82, %52
  %84 = or i32 %8, %2
  %85 = and i32 %37, %31
  %86 = or i32 %47, %58
  %87 = and i32 %25, %1
  %88 = or i32 %87, %66
  %89 = and i32 %59, %0
  %90 = or i32 %37, %0
  %91 = xor i32 %90, -1
  %92 = or i32 %89, %91
  %93 = xor i32 %73, -1
  %94 = and i32 %93, %1
  %95 = and i32 %93, %27
  %96 = xor i32 %76, %2
  %97 = or i32 %20, %27
  %98 = and i32 %26, %2
  %99 = and i32 %20, %76
  %100 = and i32 %34, %0
  %101 = xor i32 %49, %0
  %102 = xor i32 %100, -1
  %103 = xor i32 %101, %102
  %104 = and i32 %37, %58
  %105 = or i32 %100, %104
  %106 = xor i32 %34, %0
  %107 = xor i32 %82, -1
  %108 = or i32 %25, %107
  %109 = or i32 %26, %24
  %110 = and i32 %23, %27
  %111 = or i32 %20, %1
  %112 = shl i32 %111, 1
  %113 = and i32 %49, %58
  %114 = or i32 %100, %113
  %115 = and i32 %20, %27
  %116 = xor i32 %87, -1
  %117 = or i32 %116, %0
  %118 = and i32 %52, %76
  %119 = or i32 %21, %107
  %120 = xor i32 %47, -1
  %121 = xor i32 %120, %0
  %122 = xor i32 %54, %1
  %123 = and i32 %47, %58
  %124 = xor i32 %24, %1
  %125 = xor i32 %47, %0
  %126 = and i32 %21, %27
  %127 = and i32 %52, %0
  %128 = shl i32 %127, 1
  %129 = xor i32 %61, %0
  %130 = xor i32 %89, -1
  %131 = xor i32 %129, %130
  %132 = xor i32 %66, %116
  %133 = xor i32 %29, -1
  %134 = and i32 %133, %43
  %135 = or i32 %20, %66
  %136 = and i32 %20, %31
  %137 = and i32 %82, %21
  %138 = and i32 %116, %58
  %139 = add i32 %53, 1
  %140 = and i32 %18, %21
  %141 = xor i32 %0, 2147483647
  %142 = xor i32 %141, %37
  %143 = xor i32 %142, %89
  %144 = shl i32 %143, 1
  %145 = xor i32 %66, %64
  %146 = shl i32 %145, 2
  %147 = and i32 %26, %133
  %148 = or i32 %120, %0
  %149 = xor i32 %82, %2
  %150 = shl i32 %149, 2
  %151 = or i32 %73, %27
  %152 = and i32 %34, %58
  %153 = xor i32 %79, -1
  %154 = xor i32 %152, %153
  %155 = and i32 %27, %2
  %156 = xor i32 %19, %2
  %157 = or i32 %49, %58
  %158 = or i32 %25, %27
  %159 = or i32 %152, %79
  %160 = xor i32 %47, %8
  %161 = or i32 %73, %1
  %162 = xor i32 %29, %64
  %163 = or i32 %8, %120
  %164 = and i32 %133, %27
  %165 = and i32 %53, %1
  %166 = xor i32 %93, %1
  %167 = or i32 %34, %58
  %168 = and i32 %21, %1
  %169 = or i32 %20, %43
  %170 = or i32 %89, %129
  %171 = xor i32 %73, %1
  %172 = or i32 %52, %58
  %173 = and i32 %61, %58
  %174 = xor i32 %173, %130
  %175 = or i32 %107, %2
  %176 = or i32 %89, %173
  %177 = or i32 %29, %26
  %178 = and i32 %64, %58
  %179 = or i32 %29, %1
  %180 = xor i32 %49, %8
  %181 = and i32 %52, %31
  %182 = or i32 %34, %66
  %183 = or i32 %29, %120
  %184 = shl i32 %183, 1
  %185 = or i32 %52, %107
  %186 = shl i32 %23, 1
  %187 = or i32 %66, %25
  %188 = or i32 %21, %1
  %189 = and i32 %37, %0
  %190 = or i32 %116, %58
  %191 = shl i32 %190, 1
  %192 = or i32 %21, %43
  %193 = or i32 %73, %50
  %194 = xor i32 %73, %82
  %195 = or i32 %37, %58
  %196 = xor i32 %195, -1
  %197 = or i32 %60, %196
  %198 = or i32 %50, %58
  %199 = shl i32 %198, 1
  %200 = xor i32 %89, %90
  %201 = xor i32 %73, %116
  %202 = and i32 %82, %25
  %203 = or i32 %54, %1
  %204 = or i32 %87, %0
  %205 = or i32 %54, %43
  %206 = xor i32 %87, %0
  %207 = or i32 %73, %107
  %208 = xor i32 %104, %102
  %209 = or i32 %73, %26
  %210 = xor i32 %113, %102
  %211 = or i32 %24, %27
  %212 = xor i32 %73, %49
  %213 = or i32 %52, %0
  %214 = add i32 %8, 1
  %215 = and i32 %64, %0
  %216 = or i32 %52, %19
  %217 = or i32 %34, %0
  %218 = or i32 %21, %27
  %219 = or i32 %49, %0
  %220 = xor i32 %31, %2
  %221 = and i32 %53, %26
  %222 = xor i32 %64, %0
  %223 = and i32 %50, %58
  %224 = mul i32 %223, -20
  %225 = and i32 %87, %58
  %226 = mul i32 %225, -19
  %227 = and i32 %50, %0
  %228 = mul i32 %227, -6
  %229 = and i32 %87, %0
  %230 = mul i32 %229, -13
  %231 = and i32 %120, %58
  %232 = mul i32 %231, -7
  %233 = shl i32 %152, 1
  %234 = and i32 %120, %0
  %235 = shl i32 %100, 1
  %236 = sub i32 %135, %234
  %237 = sub i32 %236, %121
  %238 = add i32 %237, %30
  %239 = add i32 %238, %16
  %240 = add i32 %239, %154
  %241 = mul i32 %240, 5
  %242 = or i32 %32, %98
  %243 = add i32 %242, %17
  %244 = sub i32 %243, %103
  %245 = mul i32 %244, 3
  %246 = add i32 %187, %27
  %247 = add i32 %246, %192
  %248 = shl i32 %247, 2
  %249 = add i32 %108, %3
  %250 = add i32 %249, %217
  %251 = add i32 %250, %215
  %252 = add i32 %251, %207
  %253 = add i32 %252, %178
  %254 = add i32 %253, %177
  %255 = add i32 %254, %172
  %256 = add i32 %255, %171
  %257 = add i32 %256, %161
  %258 = add i32 %257, %157
  %259 = add i32 %258, %137
  %260 = add i32 %259, %136
  %261 = add i32 %260, %124
  %262 = add i32 %261, %122
  %263 = add i32 %262, %95
  %264 = add i32 %263, %77
  %265 = add i32 %264, %55
  %266 = add i32 %265, %39
  %267 = add i32 %266, %170
  %268 = add i32 %267, %15
  %269 = shl i32 %268, 1
  %270 = sub i32 2, %78
  %271 = sub i32 %270, %82
  %272 = sub i32 %271, %26
  %273 = add i32 %272, %18
  %274 = add i32 %273, %66
  %275 = add i32 %274, %214
  %276 = add i32 %275, %24
  %277 = add i32 %276, %28
  %278 = add i32 %277, %42
  %279 = add i32 %278, %52
  %280 = add i32 %279, %50
  %281 = sub i32 %280, %69
  %282 = add i32 %281, %70
  %283 = sub i32 %282, %72
  %284 = add i32 %283, %75
  %285 = add i32 %284, %84
  %286 = sub i32 %285, %96
  %287 = add i32 %286, %21
  %288 = add i32 %287, %29
  %289 = add i32 %288, %139
  %290 = sub i32 %289, %155
  %291 = sub i32 %290, %156
  %292 = sub i32 %291, %20
  %293 = sub i32 %292, %37
  %294 = add i32 %293, %158
  %295 = sub i32 %294, %175
  %296 = sub i32 %295, %53
  %297 = add i32 %296, %202
  %298 = sub i32 %297, %73
  %299 = sub i32 %298, %220
  %300 = add i32 %299, %13
  %301 = sub i32 %300, %22
  %302 = sub i32 %301, %33
  %303 = sub i32 %302, %38
  %304 = sub i32 %303, %41
  %305 = add i32 %304, %44
  %306 = sub i32 %305, %48
  %307 = sub i32 %306, %51
  %308 = add i32 %307, %56
  %309 = sub i32 %308, %57
  %310 = add i32 %309, %65
  %311 = add i32 %310, %71
  %312 = add i32 %311, %74
  %313 = add i32 %312, %79
  %314 = sub i32 %313, %81
  %315 = add i32 %314, %83
  %316 = sub i32 %315, %85
  %317 = sub i32 %316, %86
  %318 = add i32 %317, %88
  %319 = sub i32 %318, %94
  %320 = sub i32 %319, %97
  %321 = sub i32 %320, %99
  %322 = sub i32 %321, %106
  %323 = add i32 %322, %109
  %324 = add i32 %323, %110
  %325 = sub i32 %324, %115
  %326 = sub i32 %325, %117
  %327 = add i32 %326, %118
  %328 = sub i32 %327, %119
  %329 = sub i32 %328, %123
  %330 = sub i32 %329, %125
  %331 = add i32 %330, %126
  %332 = sub i32 %331, %132
  %333 = sub i32 %332, %134
  %334 = sub i32 %333, %138
  %335 = add i32 %334, %140
  %336 = sub i32 %335, %147
  %337 = add i32 %336, %148
  %338 = sub i32 %337, %150
  %339 = sub i32 %338, %151
  %340 = add i32 %339, %104
  %341 = add i32 %340, %160
  %342 = add i32 %341, %162
  %343 = add i32 %342, %163
  %344 = sub i32 %343, %164
  %345 = sub i32 %344, %165
  %346 = add i32 %345, %166
  %347 = add i32 %346, %167
  %348 = add i32 %347, %168
  %349 = sub i32 %348, %169
  %350 = add i32 %349, %101
  %351 = sub i32 %350, %179
  %352 = sub i32 %351, %180
  %353 = add i32 %352, %181
  %354 = sub i32 %353, %182
  %355 = sub i32 %354, %185
  %356 = sub i32 %355, %186
  %357 = sub i32 %356, %188
  %358 = add i32 %357, %189
  %359 = sub i32 %358, %193
  %360 = sub i32 %359, %194
  %361 = add i32 %360, %195
  %362 = add i32 %361, %201
  %363 = add i32 %362, %203
  %364 = sub i32 %363, %204
  %365 = add i32 %364, %205
  %366 = sub i32 %365, %206
  %367 = add i32 %366, %209
  %368 = add i32 %367, %211
  %369 = add i32 %368, %212
  %370 = add i32 %369, %213
  %371 = sub i32 %370, %90
  %372 = sub i32 %371, %216
  %373 = sub i32 %372, %218
  %374 = sub i32 %373, %219
  %375 = sub i32 %374, %221
  %376 = sub i32 %375, %222
  %377 = add i32 %376, %12
  %378 = sub i32 %377, %14
  %379 = sub i32 %378, %36
  %380 = sub i32 %379, %46
  %381 = sub i32 %380, %63
  %382 = sub i32 %381, %68
  %383 = add i32 %382, %92
  %384 = sub i32 %383, %105
  %385 = sub i32 %384, %112
  %386 = add i32 %385, %114
  %387 = sub i32 %386, %128
  %388 = add i32 %387, %131
  %389 = sub i32 %388, %146
  %390 = sub i32 %389, %159
  %391 = sub i32 %390, %174
  %392 = add i32 %391, %176
  %393 = sub i32 %392, %184
  %394 = sub i32 %393, %191
  %395 = sub i32 %394, %197
  %396 = sub i32 %395, %199
  %397 = add i32 %396, %200
  %398 = add i32 %397, %208
  %399 = sub i32 %398, %210
  %400 = add i32 %399, %224
  %401 = add i32 %400, %226
  %402 = add i32 %401, %228
  %403 = add i32 %402, %230
  %404 = add i32 %403, %232
  %405 = sub i32 %404, %233
  %406 = sub i32 %405, %235
  %407 = sub i32 %406, %144
  %408 = add i32 %407, %248
  %409 = add i32 %408, %245
  %410 = add i32 %409, %241
  %411 = add i32 %410, %269
  %412 = icmp eq i32 %11, %411
  %413 = select i1 %412, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %414 = tail call i32 @puts(i8* nonnull dereferenceable(1) %413)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
