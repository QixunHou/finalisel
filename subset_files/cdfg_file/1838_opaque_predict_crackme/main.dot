digraph "DFG for'main' function" {
	Node0x1f06c18[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1f06c98[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1f06d28[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1f07188[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1f07268[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1f07388[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1f075c0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1f07678[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1f085e8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1f08c70[shape=record, label="  %8 = xor i32 %7, %6"];
	Node0x1f08ce0[shape=record, label="  %9 = sub i32 %6, %8"];
	Node0x1f08d50[shape=record, label="  %10 = xor i32 %7, -1"];
	Node0x1f08dc0[shape=record, label="  %11 = and i32 %6, %10"];
	Node0x1f08e30[shape=record, label="  %12 = add i32 %11, %7"];
	Node0x1f08ea0[shape=record, label="  %13 = or i32 %6, %10"];
	Node0x1f08f10[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1f08f80[shape=record, label="  %15 = or i32 %7, %6"];
	Node0x1f08ff0[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x1f09060[shape=record, label="  %17 = shl i32 %15, 1"];
	Node0x1f090d0[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x1f09140[shape=record, label="  %19 = xor i32 %13, -1"];
	Node0x1f091b0[shape=record, label="  %20 = shl i32 %11, 2"];
	Node0x1f09220[shape=record, label="  %21 = and i32 %7, %6"];
	Node0x1f09290[shape=record, label="  %22 = mul i32 %21, 5"];
	Node0x1f09300[shape=record, label="  %23 = add i32 %12, %19"];
	Node0x1f09370[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0x1f093e0[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x1f09450[shape=record, label="  %26 = add i32 %25, %20"];
	Node0x1f094c0[shape=record, label="  %27 = add i32 %26, %22"];
	Node0x1f09530[shape=record, label="  %28 = add i32 %27, %18"];
	Node0x1f095a0[shape=record, label="  %29 = icmp eq i32 %9, %28"];
	Node0x1ea79d8[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f09630[shape=record, label="  %31 = call i32 @puts(i8* nonnull dereferenceable(1) %30) #5"];
	Node0x1f09888[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1f099e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1f09aa8[shape=record, label="  ret i32 0"];
	Node0x1f06c18 -> Node0x1f06c98;
	Node0x1f06c98 -> Node0x1f06d28;
	Node0x1f06d28 -> Node0x1f07188;
	Node0x1f07188 -> Node0x1f07268;
	Node0x1f07268 -> Node0x1f07388;
	Node0x1f07388 -> Node0x1f075c0;
	Node0x1f075c0 -> Node0x1f07678;
	Node0x1f07678 -> Node0x1f085e8;
	Node0x1f085e8 -> Node0x1f08c70;
	Node0x1f08c70 -> Node0x1f08ce0;
	Node0x1f08ce0 -> Node0x1f08d50;
	Node0x1f08d50 -> Node0x1f08dc0;
	Node0x1f08dc0 -> Node0x1f08e30;
	Node0x1f08e30 -> Node0x1f08ea0;
	Node0x1f08ea0 -> Node0x1f08f10;
	Node0x1f08f10 -> Node0x1f08f80;
	Node0x1f08f80 -> Node0x1f08ff0;
	Node0x1f08ff0 -> Node0x1f09060;
	Node0x1f09060 -> Node0x1f090d0;
	Node0x1f090d0 -> Node0x1f09140;
	Node0x1f09140 -> Node0x1f091b0;
	Node0x1f091b0 -> Node0x1f09220;
	Node0x1f09220 -> Node0x1f09290;
	Node0x1f09290 -> Node0x1f09300;
	Node0x1f09300 -> Node0x1f09370;
	Node0x1f09370 -> Node0x1f093e0;
	Node0x1f093e0 -> Node0x1f09450;
	Node0x1f09450 -> Node0x1f094c0;
	Node0x1f094c0 -> Node0x1f09530;
	Node0x1f09530 -> Node0x1f095a0;
	Node0x1f095a0 -> Node0x1ea79d8;
	Node0x1ea79d8 -> Node0x1f09630;
	Node0x1f09630 -> Node0x1f09888;
	Node0x1f09888 -> Node0x1f099e8;
	Node0x1f099e8 -> Node0x1f09aa8;
edge [color=red]
	Node0x1f06c18 -> Node0x1f06d28;
	Node0x1f06d28 -> Node0x1f07188;
	Node0x1f06c98 -> Node0x1f07268;
	Node0x1f07268 -> Node0x1f07388;
	Node0x1f06c18 -> Node0x1f075c0;
	Node0x1f06c98 -> Node0x1f075c0;
	Node0x1f06c18 -> Node0x1f07678;
	Node0x1f06c98 -> Node0x1f085e8;
	Node0x1f085e8 -> Node0x1f08c70;
	Node0x1f07678 -> Node0x1f08c70;
	Node0x1f07678 -> Node0x1f08ce0;
	Node0x1f08c70 -> Node0x1f08ce0;
	Node0x1f085e8 -> Node0x1f08d50;
	Node0x1f07678 -> Node0x1f08dc0;
	Node0x1f08d50 -> Node0x1f08dc0;
	Node0x1f08dc0 -> Node0x1f08e30;
	Node0x1f085e8 -> Node0x1f08e30;
	Node0x1f07678 -> Node0x1f08ea0;
	Node0x1f08d50 -> Node0x1f08ea0;
	Node0x1f08ea0 -> Node0x1f08f10;
	Node0x1f085e8 -> Node0x1f08f80;
	Node0x1f07678 -> Node0x1f08f80;
	Node0x1f08f80 -> Node0x1f08ff0;
	Node0x1f08f80 -> Node0x1f09060;
	Node0x1f09060 -> Node0x1f090d0;
	Node0x1f08ea0 -> Node0x1f09140;
	Node0x1f08dc0 -> Node0x1f091b0;
	Node0x1f085e8 -> Node0x1f09220;
	Node0x1f07678 -> Node0x1f09220;
	Node0x1f09220 -> Node0x1f09290;
	Node0x1f08e30 -> Node0x1f09300;
	Node0x1f09140 -> Node0x1f09300;
	Node0x1f09300 -> Node0x1f09370;
	Node0x1f08f10 -> Node0x1f09370;
	Node0x1f09370 -> Node0x1f093e0;
	Node0x1f08ff0 -> Node0x1f093e0;
	Node0x1f093e0 -> Node0x1f09450;
	Node0x1f091b0 -> Node0x1f09450;
	Node0x1f09450 -> Node0x1f094c0;
	Node0x1f09290 -> Node0x1f094c0;
	Node0x1f094c0 -> Node0x1f09530;
	Node0x1f090d0 -> Node0x1f09530;
	Node0x1f08ce0 -> Node0x1f095a0;
	Node0x1f09530 -> Node0x1f095a0;
	Node0x1f095a0 -> Node0x1ea79d8;
	Node0x1ea79d8 -> Node0x1f09630;
	Node0x1f07268 -> Node0x1f09888;
	Node0x1f06d28 -> Node0x1f099e8;
}
