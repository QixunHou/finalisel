digraph "DFG for'crackme' function" {
	Node0x103dbb0[shape=record, label="  %3 = shl i32 %0, 1"];
	Node0x103dc20[shape=record, label="  %4 = add i32 %3, %1"];
	Node0x103dce0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x103dd50[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x103ddc0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x103de30[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x103ded0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x103df40[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x103dfb0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x103e020[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x103e090[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x103e100[shape=record, label="  %14 = xor i32 %6, -1"];
	Node0x103e1a0[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x103e210[shape=record, label="  %16 = and i32 %5, %0"];
	Node0x103e2b0[shape=record, label="  %17 = add i32 %0, 2"];
	Node0x103e320[shape=record, label="  %18 = add i32 %17, %5"];
	Node0x103e390[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x103e400[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x103e470[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x103e4e0[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x103e550[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x103e5c0[shape=record, label="  %24 = add i32 %23, %8"];
	Node0x103e630[shape=record, label="  %25 = sub i32 %24, %9"];
	Node0x103e6a0[shape=record, label="  %26 = add i32 %25, %13"];
	Node0x103e710[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0xfde268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x103ebb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x103ec00[shape=record, label="  ret void"];
	Node0x103dbb0 -> Node0x103dc20;
	Node0x103dc20 -> Node0x103dce0;
	Node0x103dce0 -> Node0x103dd50;
	Node0x103dd50 -> Node0x103ddc0;
	Node0x103ddc0 -> Node0x103de30;
	Node0x103de30 -> Node0x103ded0;
	Node0x103ded0 -> Node0x103df40;
	Node0x103df40 -> Node0x103dfb0;
	Node0x103dfb0 -> Node0x103e020;
	Node0x103e020 -> Node0x103e090;
	Node0x103e090 -> Node0x103e100;
	Node0x103e100 -> Node0x103e1a0;
	Node0x103e1a0 -> Node0x103e210;
	Node0x103e210 -> Node0x103e2b0;
	Node0x103e2b0 -> Node0x103e320;
	Node0x103e320 -> Node0x103e390;
	Node0x103e390 -> Node0x103e400;
	Node0x103e400 -> Node0x103e470;
	Node0x103e470 -> Node0x103e4e0;
	Node0x103e4e0 -> Node0x103e550;
	Node0x103e550 -> Node0x103e5c0;
	Node0x103e5c0 -> Node0x103e630;
	Node0x103e630 -> Node0x103e6a0;
	Node0x103e6a0 -> Node0x103e710;
	Node0x103e710 -> Node0xfde268;
	Node0xfde268 -> Node0x103ebb0;
	Node0x103ebb0 -> Node0x103ec00;
edge [color=red]
	Node0x103dbb0 -> Node0x103dc20;
	Node0x103dce0 -> Node0x103dd50;
	Node0x103ddc0 -> Node0x103de30;
	Node0x103de30 -> Node0x103ded0;
	Node0x103dfb0 -> Node0x103e020;
	Node0x103e020 -> Node0x103e090;
	Node0x103dd50 -> Node0x103e100;
	Node0x103e100 -> Node0x103e1a0;
	Node0x103dce0 -> Node0x103e210;
	Node0x103e2b0 -> Node0x103e320;
	Node0x103dce0 -> Node0x103e320;
	Node0x103e320 -> Node0x103e390;
	Node0x103dd50 -> Node0x103e390;
	Node0x103e390 -> Node0x103e400;
	Node0x103df40 -> Node0x103e400;
	Node0x103e400 -> Node0x103e470;
	Node0x103dfb0 -> Node0x103e470;
	Node0x103e470 -> Node0x103e4e0;
	Node0x103e210 -> Node0x103e4e0;
	Node0x103e4e0 -> Node0x103e550;
	Node0x103e1a0 -> Node0x103e550;
	Node0x103e550 -> Node0x103e5c0;
	Node0x103de30 -> Node0x103e5c0;
	Node0x103e5c0 -> Node0x103e630;
	Node0x103ded0 -> Node0x103e630;
	Node0x103e630 -> Node0x103e6a0;
	Node0x103e090 -> Node0x103e6a0;
	Node0x103dc20 -> Node0x103e710;
	Node0x103e6a0 -> Node0x103e710;
	Node0x103e710 -> Node0xfde268;
	Node0xfde268 -> Node0x103ebb0;
}
