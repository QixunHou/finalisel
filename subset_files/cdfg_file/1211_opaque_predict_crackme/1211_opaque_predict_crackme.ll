; ModuleID = '../.././c_source_file/1211_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1211_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %2, %1
  %6 = xor i32 %5, -1
  %7 = or i32 %4, %6
  %8 = or i32 %5, %4
  %9 = xor i32 %1, %0
  %10 = xor i32 %2, %0
  %11 = xor i32 %10, -1
  %12 = and i32 %9, %11
  %13 = xor i32 %2, -1
  %14 = or i32 %13, %1
  %15 = xor i32 %14, %0
  %16 = or i32 %13, %0
  %17 = xor i32 %16, %1
  %18 = xor i32 %4, -1
  %19 = and i32 %10, %18
  %20 = xor i32 %0, -1
  %21 = or i32 %2, %1
  %22 = and i32 %21, %20
  %23 = xor i32 %14, -1
  %24 = and i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %0
  %27 = xor i32 %16, -1
  %28 = and i32 %2, %0
  %29 = xor i32 %1, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %28, %30
  %32 = and i32 %29, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %6, %33
  %35 = and i32 %29, %2
  %36 = and i32 %35, %20
  %37 = or i32 %29, %2
  %38 = and i32 %37, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %36, %39
  %41 = or i32 %5, %20
  %42 = or i32 %5, %32
  %43 = and i32 %35, %0
  %44 = xor i32 %5, %0
  %45 = xor i32 %44, -1
  %46 = xor i32 %43, %45
  %47 = and i32 %11, %1
  %48 = or i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %49, %29
  %51 = or i32 %27, %29
  %52 = shl i32 %32, 1
  %53 = or i32 %1, %0
  %54 = xor i32 %53, -1
  %55 = or i32 %10, %54
  %56 = xor i32 %30, -1
  %57 = or i32 %11, %56
  %58 = and i32 %13, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %59, %1
  %61 = and i32 %24, %0
  %62 = or i32 %61, %22
  %63 = and i32 %10, %30
  %64 = xor i32 %48, %4
  %65 = shl i32 %64, 1
  %66 = xor i32 %9, -1
  %67 = and i32 %5, %20
  %68 = or i32 %61, %67
  %69 = or i32 %5, %54
  %70 = or i32 %11, %29
  %71 = and i32 %10, %66
  %72 = or i32 %13, %66
  %73 = shl i32 %72, 1
  %74 = or i32 %61, %45
  %75 = xor i32 %21, %4
  %76 = xor i32 %37, %0
  %77 = or i32 %43, %76
  %78 = and i32 %16, %66
  %79 = or i32 %66, %2
  %80 = or i32 %5, %0
  %81 = shl i32 %80, 1
  %82 = and i32 %30, %6
  %83 = or i32 %9, %13
  %84 = xor i32 %6, %0
  %85 = or i32 %6, %54
  %86 = or i32 %4, %2
  %87 = shl i32 %86, 1
  %88 = xor i32 %18, %2
  %89 = and i32 %16, %1
  %90 = shl i32 %89, 1
  %91 = and i32 %11, %18
  %92 = or i32 %32, %11
  %93 = and i32 %24, %20
  %94 = and i32 %21, %0
  %95 = xor i32 %94, 2147483647
  %96 = xor i32 %95, %93
  %97 = and i32 %10, %33
  %98 = shl i32 %97, 1
  %99 = and i32 %5, %30
  %100 = shl i32 %99, 2
  %101 = or i32 %21, %20
  %102 = add i32 %24, 1
  %103 = xor i32 %48, %1
  %104 = xor i32 %21, -1
  %105 = add i32 %21, 1
  %106 = and i32 %11, %29
  %107 = xor i32 %36, %41
  %108 = and i32 %16, %29
  %109 = and i32 %30, %2
  %110 = or i32 %24, %0
  %111 = xor i32 %28, -1
  %112 = and i32 %9, %111
  %113 = or i32 %93, %94
  %114 = xor i32 %16, %4
  %115 = shl i32 %114, 1
  %116 = xor i32 %54, %2
  %117 = or i32 %23, %20
  %118 = or i32 %4, %23
  %119 = or i32 %58, %23
  %120 = or i32 %4, %104
  %121 = or i32 %6, %20
  %122 = or i32 %10, %66
  %123 = add i32 %10, 1
  %124 = or i32 %4, %13
  %125 = or i32 %27, %1
  %126 = or i32 %10, %29
  %127 = or i32 %11, %1
  %128 = xor i32 %58, %25
  %129 = shl i32 %128, 1
  %130 = and i32 %10, %1
  %131 = xor i32 %61, -1
  %132 = xor i32 %22, %131
  %133 = and i32 %13, %1
  %134 = or i32 %28, %133
  %135 = or i32 %14, %0
  %136 = xor i32 %133, -1
  %137 = xor i32 %28, %136
  %138 = and i32 %6, %20
  %139 = or i32 %32, %2
  %140 = xor i32 %49, %1
  %141 = xor i32 %104, %0
  %142 = add i32 %5, 1
  %143 = or i32 %28, %29
  %144 = xor i32 %53, %2
  %145 = and i32 %53, %6
  %146 = or i32 %136, %20
  %147 = shl i32 %146, 2
  %148 = or i32 %25, %0
  %149 = and i32 %59, %66
  %150 = shl i32 %149, 1
  %151 = and i32 %13, %66
  %152 = xor i32 %32, %136
  %153 = and i32 %10, %9
  %154 = and i32 %30, %11
  %155 = xor i32 %32, %25
  %156 = shl i32 %155, 1
  %157 = or i32 %24, %32
  %158 = xor i32 %14, %4
  %159 = xor i32 %21, %0
  %160 = xor i32 %67, %131
  %161 = xor i32 %43, %80
  %162 = xor i32 %4, %2
  %163 = and i32 %37, %20
  %164 = or i32 %43, %163
  %165 = shl i32 %164, 1
  %166 = add i32 %30, 1
  %167 = xor i32 %76, -1
  %168 = xor i32 %43, %167
  %169 = and i32 %59, %29
  %170 = shl i32 %169, 1
  %171 = and i32 %6, %18
  %172 = or i32 %6, %56
  %173 = and i32 %48, %9
  %174 = and i32 %13, %33
  %175 = or i32 %58, %9
  %176 = xor i32 %159, %131
  %177 = xor i32 %133, %0
  %178 = or i32 %10, %4
  %179 = and i32 %9, %13
  %180 = or i32 %24, %20
  %181 = or i32 %4, %11
  %182 = or i32 %21, %0
  %183 = and i32 %136, %0
  %184 = or i32 %6, %0
  %185 = and i32 %18, %2
  %186 = or i32 %43, %44
  %187 = shl i32 %186, 1
  %188 = or i32 %36, %38
  %189 = or i32 %25, %20
  %190 = or i32 %136, %0
  %191 = or i32 %58, %29
  %192 = or i32 %10, %56
  %193 = xor i32 %111, %1
  %194 = or i32 %9, %11
  %195 = and i32 %53, %2
  %196 = shl i32 %195, 1
  %197 = or i32 %58, %66
  %198 = or i32 %28, %54
  %199 = and i32 %104, %20
  %200 = and i32 %133, %20
  %201 = and i32 %104, %0
  %202 = and i32 %133, %0
  %203 = and i32 %23, %20
  %204 = mul i32 %203, 11
  %205 = and i32 %23, %0
  %206 = mul i32 %205, 29
  %207 = sub i32 %66, %162
  %208 = add i32 %207, %199
  %209 = sub i32 %208, %201
  %210 = add i32 %209, %153
  %211 = mul i32 %210, 3
  %212 = add i32 %151, %166
  %213 = sub i32 %212, %107
  %214 = mul i32 %213, 5
  %215 = add i32 %93, %200
  %216 = mul i32 %215, 22
  %217 = add i32 %140, %69
  %218 = shl i32 %217, 2
  %219 = add i32 %4, -1
  %220 = add i32 %219, %202
  %221 = add i32 %220, %178
  %222 = add i32 %221, %177
  %223 = add i32 %222, %148
  %224 = add i32 %223, %117
  %225 = add i32 %224, %106
  %226 = add i32 %225, %71
  %227 = add i32 %226, %22
  %228 = add i32 %227, %19
  %229 = add i32 %228, %113
  %230 = add i32 %229, %96
  %231 = shl i32 %230, 1
  %232 = add i32 %53, %14
  %233 = add i32 %232, %16
  %234 = add i32 %233, 4
  %235 = add i32 %234, %5
  %236 = sub i32 %235, %52
  %237 = add i32 %236, %21
  %238 = sub i32 %237, %79
  %239 = add i32 %238, %83
  %240 = add i32 %239, %88
  %241 = add i32 %240, %16
  %242 = add i32 %241, %102
  %243 = add i32 %242, %105
  %244 = add i32 %243, %109
  %245 = add i32 %244, %116
  %246 = add i32 %245, %123
  %247 = add i32 %246, %124
  %248 = sub i32 %247, %133
  %249 = add i32 %248, %139
  %250 = add i32 %249, %142
  %251 = sub i32 %250, %144
  %252 = add i32 %251, %174
  %253 = sub i32 %252, %14
  %254 = sub i32 %253, %179
  %255 = sub i32 %254, %185
  %256 = sub i32 %255, %12
  %257 = sub i32 %256, %8
  %258 = sub i32 %257, %15
  %259 = sub i32 %258, %17
  %260 = add i32 %259, %26
  %261 = add i32 %260, %31
  %262 = sub i32 %261, %34
  %263 = sub i32 %262, %41
  %264 = sub i32 %263, %42
  %265 = sub i32 %264, %47
  %266 = add i32 %265, %50
  %267 = add i32 %266, %44
  %268 = sub i32 %267, %51
  %269 = add i32 %268, %55
  %270 = sub i32 %269, %57
  %271 = sub i32 %270, %60
  %272 = add i32 %271, %63
  %273 = sub i32 %272, %70
  %274 = sub i32 %273, %73
  %275 = add i32 %274, %75
  %276 = sub i32 %275, %78
  %277 = add i32 %276, %82
  %278 = sub i32 %277, %84
  %279 = add i32 %278, %85
  %280 = sub i32 %279, %87
  %281 = sub i32 %280, %91
  %282 = add i32 %281, %92
  %283 = sub i32 %282, %101
  %284 = add i32 %283, %94
  %285 = add i32 %284, %103
  %286 = add i32 %285, %108
  %287 = add i32 %286, %110
  %288 = sub i32 %287, %112
  %289 = add i32 %288, %118
  %290 = add i32 %289, %119
  %291 = add i32 %290, %120
  %292 = add i32 %291, %121
  %293 = sub i32 %292, %122
  %294 = sub i32 %293, %125
  %295 = sub i32 %294, %126
  %296 = sub i32 %295, %127
  %297 = sub i32 %296, %130
  %298 = sub i32 %297, %134
  %299 = sub i32 %298, %135
  %300 = add i32 %299, %137
  %301 = sub i32 %300, %138
  %302 = sub i32 %301, %141
  %303 = sub i32 %302, %143
  %304 = add i32 %303, %145
  %305 = sub i32 %304, %152
  %306 = add i32 %305, %154
  %307 = add i32 %306, %157
  %308 = add i32 %307, %158
  %309 = sub i32 %308, %159
  %310 = sub i32 %309, %171
  %311 = add i32 %310, %172
  %312 = sub i32 %311, %173
  %313 = sub i32 %312, %175
  %314 = sub i32 %313, %180
  %315 = sub i32 %314, %181
  %316 = sub i32 %315, %182
  %317 = add i32 %316, %183
  %318 = sub i32 %317, %184
  %319 = add i32 %318, %189
  %320 = sub i32 %319, %190
  %321 = add i32 %320, %191
  %322 = sub i32 %321, %192
  %323 = add i32 %322, %193
  %324 = sub i32 %323, %194
  %325 = sub i32 %324, %196
  %326 = add i32 %325, %197
  %327 = add i32 %326, %198
  %328 = add i32 %327, %40
  %329 = add i32 %328, %46
  %330 = add i32 %329, %62
  %331 = sub i32 %330, %65
  %332 = sub i32 %331, %68
  %333 = add i32 %332, %74
  %334 = add i32 %333, %77
  %335 = sub i32 %334, %81
  %336 = sub i32 %335, %90
  %337 = sub i32 %336, %98
  %338 = sub i32 %337, %100
  %339 = sub i32 %338, %115
  %340 = sub i32 %339, %129
  %341 = sub i32 %340, %132
  %342 = sub i32 %341, %147
  %343 = sub i32 %342, %150
  %344 = sub i32 %343, %156
  %345 = add i32 %344, %160
  %346 = add i32 %345, %161
  %347 = add i32 %346, %168
  %348 = sub i32 %347, %170
  %349 = sub i32 %348, %176
  %350 = sub i32 %349, %188
  %351 = add i32 %350, %204
  %352 = add i32 %351, %206
  %353 = sub i32 %352, %165
  %354 = sub i32 %353, %187
  %355 = add i32 %354, %216
  %356 = add i32 %355, %218
  %357 = add i32 %356, %214
  %358 = add i32 %357, %211
  %359 = add i32 %358, %231
  %360 = icmp eq i32 %7, %359
  %361 = select i1 %360, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %362 = tail call i32 @puts(i8* nonnull dereferenceable(1) %361)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
