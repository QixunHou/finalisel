; ModuleID = '../.././c_source_file/0837_path_condition_crackme.c'
source_filename = "../.././c_source_file/0837_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %1
  %6 = or i32 %5, %0
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = and i32 %4, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %8, %10
  %12 = sub i32 %11, %6
  %13 = xor i32 %1, %0
  %14 = and i32 %13, %2
  %15 = and i32 %7, %2
  %16 = and i32 %15, %0
  %17 = xor i32 %0, -1
  %18 = or i32 %7, %2
  %19 = and i32 %18, %17
  %20 = xor i32 %16, -1
  %21 = xor i32 %19, %20
  %22 = or i32 %2, %0
  %23 = and i32 %2, %1
  %24 = and i32 %23, %17
  %25 = xor i32 %2, %1
  %26 = and i32 %25, %0
  %27 = or i32 %24, %26
  %28 = or i32 %1, %0
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %28, %30
  %32 = xor i32 %8, -1
  %33 = and i32 %32, %2
  %34 = and i32 %30, %1
  %35 = shl i32 %28, 1
  %36 = and i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %13, %37
  %39 = xor i32 %9, %0
  %40 = shl i32 %39, 1
  %41 = xor i32 %22, -1
  %42 = or i32 %41, %1
  %43 = or i32 %23, %8
  %44 = and i32 %1, %0
  %45 = or i32 %25, %44
  %46 = xor i32 %44, -1
  %47 = and i32 %46, %2
  %48 = or i32 %23, %17
  %49 = or i32 %4, %0
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %1
  %52 = shl i32 %51, 2
  %53 = xor i32 %23, -1
  %54 = add i32 %23, 1
  %55 = and i32 %25, %46
  %56 = and i32 %23, %0
  %57 = or i32 %2, %1
  %58 = xor i32 %57, %0
  %59 = or i32 %56, %58
  %60 = and i32 %25, %32
  %61 = shl i32 %0, 1
  %62 = or i32 %7, %0
  %63 = and i32 %62, %4
  %64 = and i32 %4, %0
  %65 = xor i32 %64, -1
  %66 = and i32 %65, %7
  %67 = shl i32 %66, 1
  %68 = or i32 %23, %0
  %69 = or i32 %13, %2
  %70 = or i32 %8, %4
  %71 = xor i32 %25, -1
  %72 = and i32 %71, %32
  %73 = xor i32 %13, -1
  %74 = shl i32 %73, 1
  %75 = and i32 %65, %73
  %76 = or i32 %16, %19
  %77 = xor i32 %25, %0
  %78 = xor i32 %56, %77
  %79 = and i32 %29, %46
  %80 = and i32 %65, %1
  %81 = and i32 %25, %17
  %82 = shl i32 %81, 2
  %83 = xor i32 %57, -1
  %84 = xor i32 %83, %0
  %85 = and i32 %37, %1
  %86 = or i32 %44, %50
  %87 = shl i32 %86, 2
  %88 = xor i32 %5, -1
  %89 = or i32 %88, %0
  %90 = add i32 %5, 1
  %91 = and i32 %29, %1
  %92 = or i32 %30, %1
  %93 = xor i32 %53, %0
  %94 = or i32 %44, %83
  %95 = xor i32 %23, %0
  %96 = xor i32 %22, %1
  %97 = xor i32 %28, -1
  %98 = or i32 %36, %97
  %99 = or i32 %29, %97
  %100 = and i32 %37, %73
  %101 = or i32 %13, %30
  %102 = or i32 %29, %73
  %103 = and i32 %22, %73
  %104 = and i32 %25, %62
  %105 = xor i32 %36, %62
  %106 = and i32 %57, %17
  %107 = or i32 %56, %106
  %108 = and i32 %62, %71
  %109 = or i32 %30, %73
  %110 = or i32 %25, %97
  %111 = or i32 %36, %13
  %112 = add i32 %2, 1
  %113 = and i32 %71, %46
  %114 = shl i32 %113, 1
  %115 = xor i32 %64, %1
  %116 = and i32 %71, %17
  %117 = and i32 %22, %13
  %118 = xor i32 %62, -1
  %119 = or i32 %29, %118
  %120 = xor i32 %24, -1
  %121 = xor i32 %26, %120
  %122 = or i32 %44, %30
  %123 = and i32 %71, %0
  %124 = shl i32 %123, 2
  %125 = and i32 %57, %0
  %126 = xor i32 %125, %120
  %127 = or i32 %30, %97
  %128 = xor i32 %18, %0
  %129 = or i32 %16, %128
  %130 = or i32 %29, %1
  %131 = or i32 %83, %0
  %132 = or i32 %53, %0
  %133 = and i32 %25, %28
  %134 = or i32 %36, %73
  %135 = xor i32 %97, %2
  %136 = and i32 %30, %7
  %137 = xor i32 %5, %0
  %138 = xor i32 %118, %2
  %139 = xor i32 %77, -1
  %140 = xor i32 %16, %139
  %141 = or i32 %16, %77
  %142 = or i32 %25, %8
  %143 = xor i32 %50, %1
  %144 = or i32 %25, %0
  %145 = xor i32 %144, -1
  %146 = or i32 %16, %145
  %147 = and i32 %29, %73
  %148 = and i32 %28, %4
  %149 = or i32 %13, %41
  %150 = or i32 %50, %73
  %151 = shl i32 %5, 1
  %152 = xor i32 %16, %144
  %153 = and i32 %28, %2
  %154 = or i32 %71, %97
  %155 = and i32 %30, %73
  %156 = or i32 %36, %118
  %157 = or i32 %50, %7
  %158 = or i32 %97, %2
  %159 = shl i32 %158, 1
  %160 = or i32 %71, %118
  %161 = and i32 %4, %73
  %162 = or i32 %64, %1
  %163 = or i32 %8, %71
  %164 = xor i32 %36, %28
  %165 = or i32 %44, %71
  %166 = shl i32 %46, 1
  %167 = xor i32 %65, %1
  %168 = shl i32 %167, 1
  %169 = and i32 %49, %1
  %170 = or i32 %8, %30
  %171 = shl i32 %170, 1
  %172 = and i32 %22, %1
  %173 = or i32 %88, %17
  %174 = and i32 %28, %71
  %175 = shl i32 %174, 1
  %176 = xor i32 %62, %2
  %177 = and i32 %13, %65
  %178 = or i32 %57, %17
  %179 = xor i32 %49, %1
  %180 = xor i32 %64, %53
  %181 = xor i32 %64, %5
  %182 = and i32 %53, %0
  %183 = and i32 %37, %7
  %184 = or i32 %10, %17
  %185 = shl i32 %184, 1
  %186 = or i32 %83, %17
  %187 = or i32 %44, %4
  %188 = or i32 %4, %118
  %189 = and i32 %29, %7
  %190 = xor i32 %36, %10
  %191 = and i32 %22, %7
  %192 = and i32 %10, %0
  %193 = or i32 %9, %0
  %194 = xor i32 %5, %44
  %195 = or i32 %4, %97
  %196 = or i32 %8, %2
  %197 = or i32 %25, %17
  %198 = and i32 %13, %4
  %199 = and i32 %49, %73
  %200 = xor i32 %28, %2
  %201 = or i32 %118, %2
  %202 = xor i32 %56, -1
  %203 = xor i32 %81, %202
  %204 = and i32 %4, %46
  %205 = and i32 %10, %17
  %206 = xor i32 %49, %44
  %207 = and i32 %5, %0
  %208 = xor i32 %8, %53
  %209 = xor i32 %32, %2
  %210 = or i32 %5, %17
  %211 = or i32 %4, %73
  %212 = xor i32 %57, %44
  %213 = or i32 %29, %44
  %214 = shl i32 %213, 1
  %215 = or i32 %36, %7
  %216 = xor i32 %88, %0
  %217 = or i32 %30, %7
  %218 = xor i32 %36, %1
  %219 = xor i32 %128, %20
  %220 = and i32 %4, %32
  %221 = add i32 %0, 1
  %222 = or i32 %29, %7
  %223 = and i32 %15, %17
  %224 = and i32 %18, %0
  %225 = xor i32 %224, 2147483647
  %226 = xor i32 %225, %223
  %227 = and i32 %30, %46
  %228 = or i32 %64, %73
  %229 = shl i32 %228, 1
  %230 = or i32 %41, %7
  %231 = and i32 %53, %17
  %232 = and i32 %29, %28
  %233 = and i32 %29, %32
  %234 = or i32 %9, %17
  %235 = and i32 %29, %62
  %236 = xor i32 %106, %202
  %237 = or i32 %64, %88
  %238 = or i32 %30, %118
  %239 = and i32 %62, %30
  %240 = shl i32 %239, 1
  %241 = xor i32 %46, %2
  %242 = or i32 %36, %83
  %243 = or i32 %56, %139
  %244 = and i32 %83, %17
  %245 = mul i32 %244, 15
  %246 = and i32 %9, %17
  %247 = mul i32 %246, 18
  %248 = and i32 %83, %0
  %249 = mul i32 %248, 22
  %250 = and i32 %9, %0
  %251 = and i32 %88, %17
  %252 = mul i32 %24, 10
  %253 = and i32 %88, %0
  %254 = mul i32 %253, 28
  %255 = mul i32 %56, 12
  %256 = add i32 %69, %32
  %257 = add i32 %256, %237
  %258 = add i32 %257, %207
  %259 = add i32 %258, %157
  %260 = add i32 %259, %156
  %261 = add i32 %260, %147
  %262 = add i32 %261, %122
  %263 = add i32 %262, %119
  %264 = add i32 %263, %107
  %265 = add i32 %264, %59
  %266 = add i32 %265, %226
  %267 = shl i32 %266, 1
  %268 = sub i32 %150, %111
  %269 = sub i32 %268, %104
  %270 = sub i32 %269, %101
  %271 = mul i32 %270, 3
  %272 = add i32 %251, %250
  %273 = shl i32 %272, 3
  %274 = add i32 %190, %55
  %275 = mul i32 %274, -5
  %276 = sub i32 %221, %61
  %277 = add i32 %276, %1
  %278 = add i32 %277, %112
  %279 = add i32 %278, %118
  %280 = sub i32 %279, %13
  %281 = sub i32 %280, %44
  %282 = sub i32 %281, %62
  %283 = sub i32 %282, %14
  %284 = sub i32 %283, %33
  %285 = sub i32 %284, %35
  %286 = add i32 %285, %47
  %287 = add i32 %286, %54
  %288 = add i32 %287, %63
  %289 = add i32 %288, %70
  %290 = sub i32 %289, %74
  %291 = add i32 %290, %90
  %292 = add i32 %291, %37
  %293 = add i32 %292, %50
  %294 = add i32 %293, %10
  %295 = add i32 %294, %135
  %296 = sub i32 %295, %138
  %297 = add i32 %296, %71
  %298 = sub i32 %297, %64
  %299 = sub i32 %298, %148
  %300 = add i32 %299, %153
  %301 = sub i32 %300, %161
  %302 = sub i32 %301, %166
  %303 = add i32 %302, %176
  %304 = sub i32 %303, %25
  %305 = add i32 %304, %187
  %306 = add i32 %305, %188
  %307 = sub i32 %306, %195
  %308 = sub i32 %307, %196
  %309 = sub i32 %308, %198
  %310 = sub i32 %309, %200
  %311 = sub i32 %310, %201
  %312 = add i32 %311, %204
  %313 = add i32 %312, %209
  %314 = add i32 %313, %211
  %315 = sub i32 %314, %220
  %316 = add i32 %315, %83
  %317 = sub i32 %316, %241
  %318 = add i32 %317, %31
  %319 = sub i32 %318, %34
  %320 = add i32 %319, %38
  %321 = sub i32 %320, %42
  %322 = sub i32 %321, %43
  %323 = add i32 %322, %45
  %324 = add i32 %323, %48
  %325 = add i32 %324, %60
  %326 = sub i32 %325, %68
  %327 = add i32 %326, %72
  %328 = add i32 %327, %75
  %329 = add i32 %328, %79
  %330 = sub i32 %329, %80
  %331 = sub i32 %330, %84
  %332 = sub i32 %331, %85
  %333 = add i32 %332, %89
  %334 = sub i32 %333, %91
  %335 = sub i32 %334, %92
  %336 = add i32 %335, %93
  %337 = sub i32 %336, %94
  %338 = sub i32 %337, %95
  %339 = add i32 %338, %96
  %340 = add i32 %339, %98
  %341 = add i32 %340, %99
  %342 = add i32 %341, %100
  %343 = add i32 %342, %102
  %344 = add i32 %343, %103
  %345 = sub i32 %344, %105
  %346 = add i32 %345, %108
  %347 = sub i32 %346, %109
  %348 = sub i32 %347, %110
  %349 = add i32 %348, %106
  %350 = sub i32 %349, %115
  %351 = sub i32 %350, %116
  %352 = sub i32 %351, %117
  %353 = add i32 %352, %127
  %354 = add i32 %353, %130
  %355 = sub i32 %354, %26
  %356 = add i32 %355, %131
  %357 = sub i32 %356, %132
  %358 = sub i32 %357, %133
  %359 = sub i32 %358, %134
  %360 = add i32 %359, %136
  %361 = sub i32 %360, %137
  %362 = add i32 %361, %77
  %363 = add i32 %362, %142
  %364 = sub i32 %363, %143
  %365 = sub i32 %364, %125
  %366 = sub i32 %365, %149
  %367 = sub i32 %366, %151
  %368 = sub i32 %367, %154
  %369 = sub i32 %368, %155
  %370 = sub i32 %369, %159
  %371 = add i32 %370, %160
  %372 = sub i32 %371, %162
  %373 = add i32 %372, %163
  %374 = sub i32 %373, %164
  %375 = sub i32 %374, %165
  %376 = sub i32 %375, %169
  %377 = add i32 %376, %172
  %378 = sub i32 %377, %173
  %379 = add i32 %378, %177
  %380 = add i32 %379, %178
  %381 = sub i32 %380, %179
  %382 = add i32 %381, %144
  %383 = add i32 %382, %180
  %384 = sub i32 %383, %181
  %385 = add i32 %384, %182
  %386 = add i32 %385, %183
  %387 = add i32 %386, %186
  %388 = sub i32 %387, %189
  %389 = sub i32 %388, %191
  %390 = add i32 %389, %192
  %391 = sub i32 %390, %193
  %392 = sub i32 %391, %194
  %393 = sub i32 %392, %197
  %394 = sub i32 %393, %199
  %395 = sub i32 %394, %205
  %396 = sub i32 %395, %206
  %397 = add i32 %396, %208
  %398 = add i32 %397, %210
  %399 = add i32 %398, %212
  %400 = add i32 %399, %215
  %401 = add i32 %400, %216
  %402 = sub i32 %401, %217
  %403 = add i32 %402, %218
  %404 = add i32 %403, %222
  %405 = add i32 %404, %227
  %406 = sub i32 %405, %230
  %407 = add i32 %406, %231
  %408 = sub i32 %407, %232
  %409 = add i32 %408, %58
  %410 = add i32 %409, %233
  %411 = sub i32 %410, %234
  %412 = add i32 %411, %235
  %413 = add i32 %412, %238
  %414 = add i32 %413, %242
  %415 = add i32 %414, %21
  %416 = sub i32 %415, %27
  %417 = sub i32 %416, %40
  %418 = sub i32 %417, %52
  %419 = sub i32 %418, %67
  %420 = sub i32 %419, %76
  %421 = sub i32 %420, %78
  %422 = sub i32 %421, %82
  %423 = add i32 %422, %87
  %424 = sub i32 %423, %114
  %425 = add i32 %424, %121
  %426 = sub i32 %425, %124
  %427 = sub i32 %426, %126
  %428 = sub i32 %427, %129
  %429 = sub i32 %428, %140
  %430 = sub i32 %429, %141
  %431 = add i32 %430, %146
  %432 = sub i32 %431, %152
  %433 = sub i32 %432, %168
  %434 = sub i32 %433, %171
  %435 = sub i32 %434, %175
  %436 = sub i32 %435, %185
  %437 = sub i32 %436, %203
  %438 = sub i32 %437, %214
  %439 = add i32 %438, %219
  %440 = sub i32 %439, %229
  %441 = add i32 %440, %236
  %442 = sub i32 %441, %240
  %443 = add i32 %442, %243
  %444 = add i32 %443, %245
  %445 = add i32 %444, %247
  %446 = add i32 %445, %249
  %447 = add i32 %446, %252
  %448 = add i32 %447, %254
  %449 = add i32 %448, %255
  %450 = add i32 %449, %273
  %451 = add i32 %450, %275
  %452 = add i32 %451, %271
  %453 = add i32 %452, %267
  %454 = icmp eq i32 %12, %453
  %455 = select i1 %454, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %456 = tail call i32 @puts(i8* nonnull dereferenceable(1) %455)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
