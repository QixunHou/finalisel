; ModuleID = '../.././c_source_file/0638_path_condition_crackme.c'
source_filename = "../.././c_source_file/0638_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = or i32 %1, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = xor i32 %3, -1
  %12 = and i32 %11, %5
  %13 = and i32 %12, %4
  %14 = xor i32 %5, %3
  %15 = xor i32 %4, -1
  %16 = xor i32 %14, %15
  %17 = xor i32 %16, %13
  %18 = or i32 %11, %4
  %19 = xor i32 %15, %5
  %20 = and i32 %19, %18
  %21 = sub i32 %20, %10
  %22 = sub i32 %21, %17
  %23 = xor i32 %1, -1
  %24 = and i32 %23, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %2, %0
  %27 = and i32 %26, %25
  %28 = xor i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = xor i32 %26, -1
  %31 = or i32 %30, %29
  %32 = xor i32 %24, %2
  %33 = or i32 %23, %0
  %34 = and i32 %33, %2
  %35 = and i32 %1, %0
  %36 = or i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %35, %37
  %39 = xor i32 %0, -1
  %40 = xor i32 %2, -1
  %41 = and i32 %40, %1
  %42 = or i32 %41, %39
  %43 = or i32 %35, %30
  %44 = shl i32 %43, 1
  %45 = and i32 %2, %1
  %46 = xor i32 %45, -1
  %47 = and i32 %8, %40
  %48 = and i32 %40, %0
  %49 = or i32 %48, %23
  %50 = xor i32 %33, -1
  %51 = or i32 %50, %2
  %52 = and i32 %36, %28
  %53 = shl i32 %52, 1
  %54 = or i32 %2, %1
  %55 = xor i32 %54, -1
  %56 = or i32 %55, %0
  %57 = xor i32 %41, -1
  %58 = or i32 %57, %0
  %59 = or i32 %40, %0
  %60 = and i32 %59, %1
  %61 = xor i32 %2, %1
  %62 = or i32 %61, %24
  %63 = and i32 %26, %8
  %64 = and i32 %59, %23
  %65 = or i32 %28, %37
  %66 = shl i32 %65, 1
  %67 = xor i32 %7, %8
  %68 = xor i32 %35, -1
  %69 = and i32 %30, %68
  %70 = and i32 %26, %28
  %71 = xor i32 %61, -1
  %72 = or i32 %35, %71
  %73 = and i32 %61, %25
  %74 = xor i32 %48, -1
  %75 = xor i32 %54, %35
  %76 = or i32 %37, %29
  %77 = and i32 %46, %0
  %78 = and i32 %33, %40
  %79 = and i32 %23, %2
  %80 = and i32 %79, %39
  %81 = or i32 %61, %39
  %82 = xor i32 %80, %81
  %83 = or i32 %30, %1
  %84 = and i32 %8, %30
  %85 = or i32 %26, %9
  %86 = and i32 %40, %68
  %87 = or i32 %24, %71
  %88 = or i32 %7, %28
  %89 = shl i32 %88, 1
  %90 = and i32 %79, %0
  %91 = or i32 %23, %2
  %92 = and i32 %91, %39
  %93 = xor i32 %92, -1
  %94 = xor i32 %90, %93
  %95 = or i32 %35, %2
  %96 = xor i32 %7, -1
  %97 = and i32 %96, %1
  %98 = or i32 %61, %0
  %99 = xor i32 %90, %98
  %100 = or i32 %48, %1
  %101 = xor i32 %100, -1
  %102 = and i32 %28, %74
  %103 = and i32 %45, %0
  %104 = xor i32 %61, %0
  %105 = xor i32 %103, %104
  %106 = and i32 %30, %1
  %107 = or i32 %48, %29
  %108 = or i32 %61, %50
  %109 = or i32 %40, %50
  %110 = and i32 %74, %23
  %111 = xor i32 %35, %2
  %112 = or i32 %40, %1
  %113 = and i32 %112, %0
  %114 = or i32 %48, %28
  %115 = xor i32 %112, -1
  %116 = or i32 %35, %115
  %117 = or i32 %7, %55
  %118 = or i32 %48, %115
  %119 = xor i32 %59, %35
  %120 = or i32 %71, %39
  %121 = and i32 %36, %23
  %122 = or i32 %41, %0
  %123 = shl i32 %122, 1
  %124 = and i32 %71, %25
  %125 = xor i32 %41, %0
  %126 = shl i32 %125, 1
  %127 = or i32 %26, %24
  %128 = and i32 %33, %30
  %129 = shl i32 %128, 1
  %130 = and i32 %61, %8
  %131 = shl i32 %130, 1
  %132 = shl i32 %8, 1
  %133 = or i32 %90, %92
  %134 = xor i32 %59, -1
  %135 = or i32 %28, %134
  %136 = xor i32 %71, %0
  %137 = and i32 %25, %2
  %138 = and i32 %28, %96
  %139 = xor i32 %81, -1
  %140 = or i32 %80, %139
  %141 = or i32 %30, %9
  %142 = and i32 %61, %68
  %143 = and i32 %96, %29
  %144 = or i32 %71, %9
  %145 = or i32 %35, %40
  %146 = and i32 %28, %2
  %147 = xor i32 %112, %0
  %148 = xor i32 %54, %0
  %149 = or i32 %103, %148
  %150 = or i32 %48, %45
  %151 = or i32 %45, %39
  %152 = or i32 %26, %50
  %153 = and i32 %29, %2
  %154 = or i32 %28, %40
  %155 = xor i32 %104, -1
  %156 = or i32 %103, %155
  %157 = or i32 %41, %24
  %158 = shl i32 %157, 1
  %159 = and i32 %91, %0
  %160 = or i32 %80, %159
  %161 = and i32 %26, %23
  %162 = or i32 %61, %35
  %163 = or i32 %35, %55
  %164 = or i32 %26, %28
  %165 = xor i32 %96, %1
  %166 = and i32 %30, %29
  %167 = or i32 %9, %2
  %168 = xor i32 %57, %0
  %169 = shl i32 %168, 1
  %170 = or i32 %40, %9
  %171 = and i32 %26, %29
  %172 = or i32 %54, %0
  %173 = and i32 %54, %39
  %174 = xor i32 %173, 2147483647
  %175 = xor i32 %174, %103
  %176 = or i32 %35, %134
  %177 = and i32 %112, %39
  %178 = or i32 %71, %50
  %179 = and i32 %28, %40
  %180 = or i32 %7, %29
  %181 = and i32 %71, %39
  %182 = xor i32 %134, %1
  %183 = xor i32 %98, -1
  %184 = or i32 %90, %183
  %185 = or i32 %134, %23
  %186 = and i32 %30, %23
  %187 = and i32 %8, %71
  %188 = or i32 %134, %1
  %189 = or i32 %46, %0
  %190 = shl i32 %189, 2
  %191 = and i32 %55, %39
  %192 = shl i32 %191, 2
  %193 = and i32 %41, %39
  %194 = and i32 %55, %0
  %195 = and i32 %41, %0
  %196 = mul i32 %195, -6
  %197 = and i32 %115, %39
  %198 = mul i32 %197, -13
  %199 = and i32 %115, %0
  %200 = shl i32 %199, 3
  %201 = and i32 %4, %3
  %202 = or i32 %201, %5
  %203 = or i32 %5, %4
  %204 = xor i32 %203, %201
  %205 = or i32 %4, %3
  %206 = and i32 %19, %205
  %207 = xor i32 %5, -1
  %208 = or i32 %207, %4
  %209 = and i32 %208, %11
  %210 = xor i32 %203, -1
  %211 = or i32 %210, %3
  %212 = xor i32 %201, -1
  %213 = and i32 %14, %212
  %214 = xor i32 %4, %3
  %215 = xor i32 %214, -1
  %216 = and i32 %215, %5
  %217 = and i32 %5, %4
  %218 = or i32 %5, %3
  %219 = xor i32 %218, -1
  %220 = or i32 %217, %219
  %221 = shl i32 %220, 1
  %222 = xor i32 %217, %18
  %223 = and i32 %207, %4
  %224 = or i32 %223, %214
  %225 = xor i32 %205, 2147483647
  %226 = or i32 %14, %225
  %227 = shl i32 %226, 1
  %228 = and i32 %219, %15
  %229 = and i32 %207, %3
  %230 = and i32 %229, %15
  %231 = and i32 %219, %4
  %232 = and i32 %229, %4
  %233 = and i32 %12, %15
  %234 = and i32 %5, %3
  %235 = and i32 %234, %15
  %236 = and i32 %234, %4
  %237 = add i32 %28, %30
  %238 = add i32 %237, %153
  %239 = add i32 %238, %176
  %240 = add i32 %239, %166
  %241 = add i32 %240, %164
  %242 = add i32 %241, %104
  %243 = add i32 %242, %142
  %244 = add i32 %243, %110
  %245 = add i32 %244, %108
  %246 = add i32 %245, %83
  %247 = add i32 %246, %60
  %248 = add i32 %247, %160
  %249 = add i32 %248, %82
  %250 = add i32 %249, %175
  %251 = add i32 %250, %230
  %252 = add i32 %251, %231
  %253 = shl i32 %252, 1
  %254 = add i32 %151, %193
  %255 = sub i32 %117, %254
  %256 = add i32 %255, %70
  %257 = add i32 %256, %232
  %258 = add i32 %257, %236
  %259 = add i32 %258, %228
  %260 = mul i32 %259, 5
  %261 = sub i32 %182, %165
  %262 = sub i32 %261, %184
  %263 = add i32 %262, %233
  %264 = add i32 %263, %13
  %265 = mul i32 %264, 3
  %266 = mul i32 %45, -12
  %267 = add i32 %194, %25
  %268 = shl i32 %267, 2
  %269 = add i32 %1, 1
  %270 = sub i32 %269, %32
  %271 = sub i32 %270, %34
  %272 = add i32 %271, %47
  %273 = add i32 %272, %51
  %274 = add i32 %273, %74
  %275 = sub i32 %274, %78
  %276 = sub i32 %275, %86
  %277 = add i32 %276, %95
  %278 = add i32 %277, %109
  %279 = sub i32 %278, %111
  %280 = sub i32 %279, %132
  %281 = add i32 %280, %7
  %282 = sub i32 %281, %137
  %283 = add i32 %282, %112
  %284 = add i32 %283, %145
  %285 = add i32 %284, %146
  %286 = add i32 %285, %57
  %287 = sub i32 %286, %154
  %288 = add i32 %287, %26
  %289 = add i32 %288, %167
  %290 = add i32 %289, %71
  %291 = sub i32 %290, %170
  %292 = sub i32 %291, %179
  %293 = sub i32 %292, %27
  %294 = add i32 %293, %31
  %295 = add i32 %294, %38
  %296 = sub i32 %295, %42
  %297 = add i32 %296, %49
  %298 = sub i32 %297, %56
  %299 = add i32 %298, %58
  %300 = add i32 %299, %62
  %301 = sub i32 %300, %63
  %302 = add i32 %301, %64
  %303 = sub i32 %302, %67
  %304 = sub i32 %303, %69
  %305 = sub i32 %304, %72
  %306 = add i32 %305, %73
  %307 = add i32 %306, %75
  %308 = add i32 %307, %76
  %309 = sub i32 %308, %77
  %310 = sub i32 %309, %84
  %311 = sub i32 %310, %85
  %312 = add i32 %311, %87
  %313 = sub i32 %312, %97
  %314 = add i32 %313, %101
  %315 = add i32 %314, %102
  %316 = sub i32 %315, %106
  %317 = sub i32 %316, %107
  %318 = sub i32 %317, %113
  %319 = add i32 %318, %114
  %320 = sub i32 %319, %116
  %321 = sub i32 %320, %118
  %322 = sub i32 %321, %119
  %323 = add i32 %322, %120
  %324 = sub i32 %323, %121
  %325 = add i32 %324, %124
  %326 = add i32 %325, %127
  %327 = add i32 %326, %135
  %328 = add i32 %327, %136
  %329 = add i32 %328, %138
  %330 = add i32 %329, %141
  %331 = add i32 %330, %143
  %332 = sub i32 %331, %144
  %333 = add i32 %332, %147
  %334 = sub i32 %333, %150
  %335 = add i32 %334, %152
  %336 = sub i32 %335, %161
  %337 = sub i32 %336, %162
  %338 = add i32 %337, %163
  %339 = sub i32 %338, %171
  %340 = add i32 %339, %172
  %341 = sub i32 %340, %173
  %342 = sub i32 %341, %177
  %343 = sub i32 %342, %178
  %344 = sub i32 %343, %180
  %345 = sub i32 %344, %181
  %346 = sub i32 %345, %185
  %347 = sub i32 %346, %186
  %348 = add i32 %347, %187
  %349 = add i32 %348, %188
  %350 = sub i32 %349, %44
  %351 = sub i32 %350, %53
  %352 = sub i32 %351, %66
  %353 = sub i32 %352, %89
  %354 = sub i32 %353, %94
  %355 = add i32 %354, %99
  %356 = sub i32 %355, %105
  %357 = sub i32 %356, %123
  %358 = sub i32 %357, %126
  %359 = sub i32 %358, %129
  %360 = sub i32 %359, %131
  %361 = add i32 %360, %133
  %362 = add i32 %361, %140
  %363 = sub i32 %362, %149
  %364 = add i32 %363, %156
  %365 = sub i32 %364, %158
  %366 = sub i32 %365, %169
  %367 = sub i32 %366, %190
  %368 = sub i32 %367, %192
  %369 = add i32 %368, %196
  %370 = add i32 %369, %198
  %371 = sub i32 %370, %200
  %372 = sub i32 %371, %202
  %373 = sub i32 %372, %216
  %374 = add i32 %373, %266
  %375 = add i32 %374, %268
  %376 = add i32 %375, %204
  %377 = add i32 %376, %206
  %378 = add i32 %377, %209
  %379 = sub i32 %378, %211
  %380 = add i32 %379, %213
  %381 = sub i32 %380, %222
  %382 = sub i32 %381, %224
  %383 = add i32 %382, %235
  %384 = sub i32 %383, %221
  %385 = sub i32 %384, %227
  %386 = add i32 %385, %265
  %387 = add i32 %386, %260
  %388 = add i32 %387, %253
  %389 = icmp eq i32 %22, %388
  %390 = select i1 %389, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %391 = tail call i32 @puts(i8* nonnull dereferenceable(1) %390)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
