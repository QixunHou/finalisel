; ModuleID = '../.././c_source_file/1604_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1604_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %1, %0
  %8 = or i32 %7, %6
  %9 = xor i32 %0, -1
  %10 = and i32 %2, %1
  %11 = and i32 %10, %9
  %12 = xor i32 %2, %1
  %13 = and i32 %12, %0
  %14 = xor i32 %11, -1
  %15 = xor i32 %13, %14
  %16 = xor i32 %2, %0
  %17 = xor i32 %16, -1
  %18 = or i32 %7, %17
  %19 = xor i32 %10, %0
  %20 = or i32 %7, %4
  %21 = and i32 %1, %0
  %22 = or i32 %21, %2
  %23 = or i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = xor i32 %1, -1
  %26 = and i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %12, -1
  %29 = and i32 %28, %27
  %30 = or i32 %25, %0
  %31 = or i32 %21, %4
  %32 = or i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %33, %1
  %35 = and i32 %25, %2
  %36 = and i32 %35, %0
  %37 = or i32 %12, %0
  %38 = xor i32 %36, %37
  %39 = xor i32 %6, %1
  %40 = and i32 %7, %4
  %41 = and i32 %23, %4
  %42 = xor i32 %21, -1
  %43 = and i32 %12, %42
  %44 = or i32 %25, %2
  %45 = and i32 %44, %9
  %46 = xor i32 %45, -1
  %47 = xor i32 %36, %46
  %48 = and i32 %12, %30
  %49 = and i32 %4, %1
  %50 = xor i32 %49, -1
  %51 = xor i32 %26, %50
  %52 = and i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = xor i32 %7, -1
  %55 = and i32 %53, %54
  %56 = and i32 %7, %2
  %57 = and i32 %10, %0
  %58 = or i32 %2, %1
  %59 = and i32 %58, %9
  %60 = or i32 %57, %59
  %61 = xor i32 %58, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %57, %62
  %64 = and i32 %58, %0
  %65 = or i32 %11, %64
  %66 = xor i32 %27, %2
  %67 = and i32 %32, %7
  %68 = and i32 %4, %0
  %69 = xor i32 %68, %1
  %70 = xor i32 %12, %0
  %71 = xor i32 %21, %2
  %72 = or i32 %68, %25
  %73 = xor i32 %30, -1
  %74 = or i32 %16, %73
  %75 = or i32 %68, %54
  %76 = and i32 %4, %42
  %77 = or i32 %58, %9
  %78 = and i32 %5, %54
  %79 = xor i32 %10, -1
  %80 = xor i32 %68, %79
  %81 = and i32 %16, %7
  %82 = shl i32 %81, 1
  %83 = or i32 %12, %26
  %84 = or i32 %21, %33
  %85 = shl i32 %84, 1
  %86 = and i32 %12, %27
  %87 = or i32 %7, %2
  %88 = shl i32 %87, 1
  %89 = or i32 %57, %61
  %90 = and i32 %79, %0
  %91 = or i32 %4, %1
  %92 = xor i32 %68, %91
  %93 = xor i32 %91, -1
  %94 = or i32 %21, %93
  %95 = and i32 %7, %17
  %96 = xor i32 %59, -1
  %97 = xor i32 %57, %96
  %98 = xor i32 %64, %14
  %99 = or i32 %16, %7
  %100 = or i32 %50, %0
  %101 = and i32 %32, %54
  %102 = shl i32 %101, 1
  %103 = and i32 %5, %25
  %104 = and i32 %17, %25
  %105 = xor i32 %37, 1073741823
  %106 = or i32 %105, %36
  %107 = xor i32 %57, %70
  %108 = or i32 %73, %2
  %109 = shl i32 %108, 1
  %110 = and i32 %16, %1
  %111 = or i32 %49, %26
  %112 = and i32 %12, %9
  %113 = shl i32 %112, 1
  %114 = and i32 %23, %17
  %115 = or i32 %52, %54
  %116 = or i32 %21, %6
  %117 = or i32 %16, %1
  %118 = and i32 %4, %54
  %119 = and i32 %23, %2
  %120 = or i32 %26, %2
  %121 = shl i32 %120, 1
  %122 = and i32 %17, %1
  %123 = or i32 %10, %9
  %124 = or i32 %26, %28
  %125 = xor i32 %93, %0
  %126 = xor i32 %68, -1
  %127 = xor i32 %126, %1
  %128 = xor i32 %32, %21
  %129 = or i32 %58, %0
  %130 = and i32 %5, %7
  %131 = or i32 %26, %4
  %132 = or i32 %57, %112
  %133 = xor i32 %53, %1
  %134 = or i32 %68, %10
  %135 = and i32 %12, %23
  %136 = xor i32 %112, 2147483647
  %137 = xor i32 %136, %57
  %138 = or i32 %68, %1
  %139 = and i32 %16, %27
  %140 = or i32 %49, %9
  %141 = shl i32 %140, 1
  %142 = and i32 %53, %25
  %143 = add i32 %10, 1
  %144 = or i32 %91, %9
  %145 = or i32 %16, %24
  %146 = xor i32 %26, %79
  %147 = and i32 %17, %54
  %148 = and i32 %16, %30
  %149 = or i32 %36, %45
  %150 = or i32 %16, %21
  %151 = shl i32 %150, 2
  %152 = xor i32 %52, %30
  %153 = and i32 %50, %9
  %154 = and i32 %17, %42
  %155 = or i32 %17, %1
  %156 = and i32 %7, %53
  %157 = and i32 %5, %1
  %158 = shl i32 %157, 1
  %159 = add i32 %0, 1
  %160 = or i32 %12, %73
  %161 = or i32 %11, %13
  %162 = and i32 %28, %42
  %163 = and i32 %16, %54
  %164 = and i32 %17, %27
  %165 = xor i32 %91, %0
  %166 = and i32 %79, %9
  %167 = shl i32 %166, 1
  %168 = and i32 %50, %0
  %169 = xor i32 %50, %0
  %170 = xor i32 %91, %21
  %171 = and i32 %30, %4
  %172 = shl i32 %171, 1
  %173 = or i32 %17, %24
  %174 = or i32 %52, %49
  %175 = and i32 %32, %1
  %176 = shl i32 %5, 1
  %177 = or i32 %33, %25
  %178 = or i32 %4, %54
  %179 = shl i32 %178, 1
  %180 = or i32 %21, %17
  %181 = or i32 %93, %9
  %182 = or i32 %7, %33
  %183 = or i32 %17, %73
  %184 = and i32 %91, %0
  %185 = shl i32 %184, 2
  %186 = add i32 %32, 1
  %187 = and i32 %16, %23
  %188 = and i32 %23, %28
  %189 = shl i32 %25, 1
  %190 = and i32 %35, %9
  %191 = or i32 %12, %9
  %192 = xor i32 %190, %191
  %193 = xor i32 %70, 2147483647
  %194 = xor i32 %193, %36
  %195 = and i32 %16, %42
  %196 = shl i32 %195, 1
  %197 = or i32 %68, %93
  %198 = xor i32 %30, %2
  %199 = or i32 %6, %25
  %200 = or i32 %10, %26
  %201 = and i32 %42, %2
  %202 = or i32 %50, %9
  %203 = or i32 %26, %17
  %204 = xor i32 %191, -1
  %205 = or i32 %190, %204
  %206 = xor i32 %24, %2
  %207 = or i32 %79, %9
  %208 = or i32 %16, %25
  %209 = xor i32 %73, %2
  %210 = or i32 %33, %1
  %211 = or i32 %4, %73
  %212 = shl i32 %211, 1
  %213 = or i32 %49, %0
  %214 = or i32 %28, %24
  %215 = or i32 %54, %2
  %216 = xor i32 %58, %21
  %217 = and i32 %7, %126
  %218 = xor i32 %58, -1
  %219 = and i32 %218, %9
  %220 = mul i32 %219, 7
  %221 = and i32 %49, %9
  %222 = mul i32 %221, 29
  %223 = and i32 %218, %0
  %224 = shl i32 %223, 3
  %225 = and i32 %49, %0
  %226 = mul i32 %225, 9
  %227 = and i32 %93, %9
  %228 = mul i32 %227, 15
  %229 = and i32 %93, %0
  %230 = shl i32 %229, 4
  %231 = mul i32 %57, 19
  %232 = add i32 %30, %42
  %233 = add i32 %232, %24
  %234 = add i32 %233, %119
  %235 = add i32 %234, %217
  %236 = add i32 %235, %200
  %237 = add i32 %236, %199
  %238 = add i32 %237, %181
  %239 = add i32 %238, %173
  %240 = add i32 %239, %134
  %241 = add i32 %240, %133
  %242 = add i32 %241, %130
  %243 = add i32 %242, %125
  %244 = add i32 %243, %43
  %245 = add i32 %244, %34
  %246 = add i32 %245, %137
  %247 = add i32 %246, %194
  %248 = shl i32 %247, 1
  %249 = sub i32 %118, %76
  %250 = sub i32 %249, %77
  %251 = add i32 %250, %90
  %252 = mul i32 %251, 5
  %253 = add i32 %106, %144
  %254 = shl i32 %253, 2
  %255 = add i32 %11, %124
  %256 = mul i32 %255, 3
  %257 = add i32 %159, %0
  %258 = add i32 %257, %1
  %259 = add i32 %258, %7
  %260 = add i32 %259, %26
  %261 = sub i32 %260, %189
  %262 = add i32 %261, %20
  %263 = sub i32 %262, %22
  %264 = add i32 %263, %12
  %265 = add i32 %264, %31
  %266 = sub i32 %265, %40
  %267 = add i32 %266, %41
  %268 = add i32 %267, %32
  %269 = sub i32 %268, %56
  %270 = sub i32 %269, %66
  %271 = add i32 %270, %71
  %272 = add i32 %271, %93
  %273 = sub i32 %272, %131
  %274 = add i32 %273, %143
  %275 = add i32 %274, %49
  %276 = sub i32 %275, %16
  %277 = add i32 %276, %186
  %278 = sub i32 %277, %198
  %279 = sub i32 %278, %201
  %280 = add i32 %279, %206
  %281 = add i32 %280, %52
  %282 = add i32 %281, %209
  %283 = add i32 %282, %215
  %284 = sub i32 %283, %18
  %285 = add i32 %284, %19
  %286 = sub i32 %285, %29
  %287 = sub i32 %286, %39
  %288 = add i32 %287, %48
  %289 = sub i32 %288, %51
  %290 = add i32 %289, %55
  %291 = add i32 %290, %67
  %292 = sub i32 %291, %69
  %293 = sub i32 %292, %70
  %294 = sub i32 %293, %72
  %295 = sub i32 %294, %74
  %296 = sub i32 %295, %75
  %297 = sub i32 %296, %78
  %298 = sub i32 %297, %80
  %299 = add i32 %298, %83
  %300 = add i32 %299, %86
  %301 = sub i32 %300, %88
  %302 = sub i32 %301, %92
  %303 = sub i32 %302, %94
  %304 = add i32 %303, %61
  %305 = add i32 %304, %95
  %306 = sub i32 %305, %99
  %307 = add i32 %306, %100
  %308 = add i32 %307, %103
  %309 = sub i32 %308, %104
  %310 = sub i32 %309, %109
  %311 = sub i32 %310, %110
  %312 = sub i32 %311, %111
  %313 = add i32 %312, %114
  %314 = add i32 %313, %115
  %315 = sub i32 %314, %116
  %316 = add i32 %315, %117
  %317 = sub i32 %316, %121
  %318 = sub i32 %317, %122
  %319 = sub i32 %318, %123
  %320 = sub i32 %319, %127
  %321 = sub i32 %320, %128
  %322 = add i32 %321, %129
  %323 = add i32 %322, %96
  %324 = sub i32 %323, %135
  %325 = add i32 %324, %138
  %326 = sub i32 %325, %139
  %327 = sub i32 %326, %142
  %328 = add i32 %327, %145
  %329 = add i32 %328, %146
  %330 = sub i32 %329, %147
  %331 = sub i32 %330, %148
  %332 = sub i32 %331, %152
  %333 = add i32 %332, %153
  %334 = sub i32 %333, %154
  %335 = add i32 %334, %155
  %336 = sub i32 %335, %156
  %337 = sub i32 %336, %160
  %338 = sub i32 %337, %162
  %339 = add i32 %338, %163
  %340 = sub i32 %339, %164
  %341 = add i32 %340, %165
  %342 = sub i32 %341, %168
  %343 = sub i32 %342, %169
  %344 = sub i32 %343, %170
  %345 = sub i32 %344, %172
  %346 = sub i32 %345, %174
  %347 = sub i32 %346, %175
  %348 = sub i32 %347, %176
  %349 = sub i32 %348, %177
  %350 = sub i32 %349, %179
  %351 = sub i32 %350, %180
  %352 = add i32 %351, %182
  %353 = sub i32 %352, %183
  %354 = sub i32 %353, %187
  %355 = sub i32 %354, %188
  %356 = add i32 %355, %197
  %357 = sub i32 %356, %202
  %358 = sub i32 %357, %203
  %359 = add i32 %358, %207
  %360 = add i32 %359, %208
  %361 = sub i32 %360, %210
  %362 = sub i32 %361, %212
  %363 = sub i32 %362, %213
  %364 = add i32 %363, %214
  %365 = sub i32 %364, %216
  %366 = sub i32 %365, %15
  %367 = sub i32 %366, %38
  %368 = add i32 %367, %47
  %369 = sub i32 %368, %60
  %370 = sub i32 %369, %63
  %371 = sub i32 %370, %65
  %372 = sub i32 %371, %82
  %373 = sub i32 %372, %85
  %374 = add i32 %373, %89
  %375 = sub i32 %374, %97
  %376 = sub i32 %375, %98
  %377 = sub i32 %376, %102
  %378 = add i32 %377, %107
  %379 = sub i32 %378, %113
  %380 = sub i32 %379, %132
  %381 = sub i32 %380, %141
  %382 = add i32 %381, %149
  %383 = sub i32 %382, %151
  %384 = sub i32 %383, %158
  %385 = sub i32 %384, %161
  %386 = sub i32 %385, %167
  %387 = sub i32 %386, %185
  %388 = sub i32 %387, %192
  %389 = sub i32 %388, %196
  %390 = sub i32 %389, %205
  %391 = add i32 %390, %220
  %392 = add i32 %391, %222
  %393 = add i32 %392, %224
  %394 = add i32 %393, %226
  %395 = add i32 %394, %228
  %396 = sub i32 %395, %230
  %397 = add i32 %396, %231
  %398 = add i32 %397, %256
  %399 = add i32 %398, %252
  %400 = add i32 %399, %254
  %401 = add i32 %400, %248
  %402 = icmp eq i32 %8, %401
  %403 = select i1 %402, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %404 = tail call i32 @puts(i8* nonnull dereferenceable(1) %403)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
