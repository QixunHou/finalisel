digraph "DFG for'crackme' function" {
	Node0xae8540[shape=record, label="  %3 = or i32 %1, %0"];
	Node0xae8bf0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xae8cb0[shape=record, label="  %5 = sub i32 %4, %3"];
	Node0xae8d20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0xae8d90[shape=record, label="  %7 = and i32 %4, %0"];
	Node0xae8e00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0xae8e70[shape=record, label="  %9 = and i32 %1, %0"];
	Node0xae8ee0[shape=record, label="  %10 = or i32 %4, %0"];
	Node0xae8f50[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0xae8fc0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0xae9030[shape=record, label="  %13 = xor i32 %3, -1"];
	Node0xae90d0[shape=record, label="  %14 = mul i32 %13, 5"];
	Node0xae9170[shape=record, label="  %15 = mul i32 %9, -3"];
	Node0xae91e0[shape=record, label="  %16 = add i32 %7, %0"];
	Node0xae9250[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0xae92f0[shape=record, label="  %18 = add i32 %1, 3"];
	Node0xae9360[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0xae93d0[shape=record, label="  %20 = add i32 %19, %9"];
	Node0xae9440[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xae94b0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0xae9520[shape=record, label="  %23 = add i32 %22, %14"];
	Node0xae9590[shape=record, label="  %24 = add i32 %23, %15"];
	Node0xae9600[shape=record, label="  %25 = add i32 %24, %17"];
	Node0xae9670[shape=record, label="  %26 = icmp eq i32 %6, %25"];
	Node0xa89268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xae9b10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xae9b60[shape=record, label="  ret void"];
	Node0xae8540 -> Node0xae8bf0;
	Node0xae8bf0 -> Node0xae8cb0;
	Node0xae8cb0 -> Node0xae8d20;
	Node0xae8d20 -> Node0xae8d90;
	Node0xae8d90 -> Node0xae8e00;
	Node0xae8e00 -> Node0xae8e70;
	Node0xae8e70 -> Node0xae8ee0;
	Node0xae8ee0 -> Node0xae8f50;
	Node0xae8f50 -> Node0xae8fc0;
	Node0xae8fc0 -> Node0xae9030;
	Node0xae9030 -> Node0xae90d0;
	Node0xae90d0 -> Node0xae9170;
	Node0xae9170 -> Node0xae91e0;
	Node0xae91e0 -> Node0xae9250;
	Node0xae9250 -> Node0xae92f0;
	Node0xae92f0 -> Node0xae9360;
	Node0xae9360 -> Node0xae93d0;
	Node0xae93d0 -> Node0xae9440;
	Node0xae9440 -> Node0xae94b0;
	Node0xae94b0 -> Node0xae9520;
	Node0xae9520 -> Node0xae9590;
	Node0xae9590 -> Node0xae9600;
	Node0xae9600 -> Node0xae9670;
	Node0xae9670 -> Node0xa89268;
	Node0xa89268 -> Node0xae9b10;
	Node0xae9b10 -> Node0xae9b60;
edge [color=red]
	Node0xae8bf0 -> Node0xae8cb0;
	Node0xae8540 -> Node0xae8cb0;
	Node0xae8cb0 -> Node0xae8d20;
	Node0xae8bf0 -> Node0xae8d90;
	Node0xae8bf0 -> Node0xae8ee0;
	Node0xae8ee0 -> Node0xae8f50;
	Node0xae8f50 -> Node0xae8fc0;
	Node0xae8540 -> Node0xae9030;
	Node0xae9030 -> Node0xae90d0;
	Node0xae8e70 -> Node0xae9170;
	Node0xae8d90 -> Node0xae91e0;
	Node0xae91e0 -> Node0xae9250;
	Node0xae92f0 -> Node0xae9360;
	Node0xae8e00 -> Node0xae9360;
	Node0xae9360 -> Node0xae93d0;
	Node0xae8e70 -> Node0xae93d0;
	Node0xae93d0 -> Node0xae9440;
	Node0xae8ee0 -> Node0xae9440;
	Node0xae9440 -> Node0xae94b0;
	Node0xae8fc0 -> Node0xae94b0;
	Node0xae94b0 -> Node0xae9520;
	Node0xae90d0 -> Node0xae9520;
	Node0xae9520 -> Node0xae9590;
	Node0xae9170 -> Node0xae9590;
	Node0xae9590 -> Node0xae9600;
	Node0xae9250 -> Node0xae9600;
	Node0xae8d20 -> Node0xae9670;
	Node0xae9600 -> Node0xae9670;
	Node0xae9670 -> Node0xa89268;
	Node0xa89268 -> Node0xae9b10;
}
