digraph "DFG for'crackme' function" {
	Node0x2121a90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2121b00[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x2121bc0[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x2121c30[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x2121ca0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x2121d10[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x2121d80[shape=record, label="  %9 = or i32 %8, %1"];
	Node0x2121df0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x2121e60[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x2121ed0[shape=record, label="  %12 = xor i32 %4, -1"];
	Node0x2121f40[shape=record, label="  %13 = shl i32 %6, 2"];
	Node0x2121fb0[shape=record, label="  %14 = sub i32 %5, %1"];
	Node0x2122020[shape=record, label="  %15 = add i32 %14, %7"];
	Node0x2122090[shape=record, label="  %16 = sub i32 %15, %9"];
	Node0x2122100[shape=record, label="  %17 = sub i32 %16, %10"];
	Node0x2122170[shape=record, label="  %18 = add i32 %17, %11"];
	Node0x21221e0[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x2122250[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x21222c0[shape=record, label="  %21 = icmp eq i32 %4, %20"];
	Node0x20c2268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2122760[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x21227b0[shape=record, label="  ret void"];
	Node0x2121a90 -> Node0x2121b00;
	Node0x2121b00 -> Node0x2121bc0;
	Node0x2121bc0 -> Node0x2121c30;
	Node0x2121c30 -> Node0x2121ca0;
	Node0x2121ca0 -> Node0x2121d10;
	Node0x2121d10 -> Node0x2121d80;
	Node0x2121d80 -> Node0x2121df0;
	Node0x2121df0 -> Node0x2121e60;
	Node0x2121e60 -> Node0x2121ed0;
	Node0x2121ed0 -> Node0x2121f40;
	Node0x2121f40 -> Node0x2121fb0;
	Node0x2121fb0 -> Node0x2122020;
	Node0x2122020 -> Node0x2122090;
	Node0x2122090 -> Node0x2122100;
	Node0x2122100 -> Node0x2122170;
	Node0x2122170 -> Node0x21221e0;
	Node0x21221e0 -> Node0x2122250;
	Node0x2122250 -> Node0x21222c0;
	Node0x21222c0 -> Node0x20c2268;
	Node0x20c2268 -> Node0x2122760;
	Node0x2122760 -> Node0x21227b0;
edge [color=red]
	Node0x2121a90 -> Node0x2121b00;
	Node0x2121c30 -> Node0x2121ca0;
	Node0x2121d10 -> Node0x2121d80;
	Node0x2121df0 -> Node0x2121e60;
	Node0x2121b00 -> Node0x2121ed0;
	Node0x2121c30 -> Node0x2121f40;
	Node0x2121bc0 -> Node0x2121fb0;
	Node0x2121fb0 -> Node0x2122020;
	Node0x2121ca0 -> Node0x2122020;
	Node0x2122020 -> Node0x2122090;
	Node0x2121d80 -> Node0x2122090;
	Node0x2122090 -> Node0x2122100;
	Node0x2121df0 -> Node0x2122100;
	Node0x2122100 -> Node0x2122170;
	Node0x2121e60 -> Node0x2122170;
	Node0x2122170 -> Node0x21221e0;
	Node0x2121ed0 -> Node0x21221e0;
	Node0x21221e0 -> Node0x2122250;
	Node0x2121f40 -> Node0x2122250;
	Node0x2121b00 -> Node0x21222c0;
	Node0x2122250 -> Node0x21222c0;
	Node0x21222c0 -> Node0x20c2268;
	Node0x20c2268 -> Node0x2122760;
}
