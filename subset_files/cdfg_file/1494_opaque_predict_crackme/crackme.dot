digraph "DFG for'crackme' function" {
	Node0x649730[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x649db0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x649e20[shape=record, label="  %7 = xor i32 %6, %3"];
	Node0x649e90[shape=record, label="  %8 = or i32 %3, %0"];
	Node0x649f30[shape=record, label="  %9 = add i32 %1, 1"];
	Node0x649fa0[shape=record, label="  %10 = add i32 %9, %5"];
	Node0x64a010[shape=record, label="  %11 = add i32 %10, %7"];
	Node0x64a080[shape=record, label="  %12 = sub i32 %11, %8"];
	Node0x64a120[shape=record, label="  %13 = xor i32 %2, 2147483647"];
	Node0x64a190[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x64a200[shape=record, label="  %15 = xor i32 %2, %1"];
	Node0x64a270[shape=record, label="  %16 = or i32 %2, %1"];
	Node0x64a2e0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x64a350[shape=record, label="  %18 = xor i32 %1, -1"];
	Node0x64a3c0[shape=record, label="  %19 = and i32 %18, %2"];
	Node0x64a460[shape=record, label="  %20 = mul i32 %5, 3"];
	Node0x64a4d0[shape=record, label="  %21 = or i32 %6, %3"];
	Node0x64a540[shape=record, label="  %22 = and i32 %6, %3"];
	Node0x64a5b0[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x64a650[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x64a6c0[shape=record, label="  %25 = and i32 %3, %0"];
	Node0x64a730[shape=record, label="  %26 = xor i32 %3, -1"];
	Node0x64a7a0[shape=record, label="  %27 = xor i32 %8, -1"];
	Node0x64a810[shape=record, label="  %28 = mul i32 %27, 3"];
	Node0x64a880[shape=record, label="  %29 = xor i32 %28, -1"];
	Node0x64a920[shape=record, label="  %30 = shl i32 %21, 2"];
	Node0x64a9c0[shape=record, label="  %31 = xor i32 %30, -4"];
	Node0x64aa30[shape=record, label="  %32 = shl i32 %25, 2"];
	Node0x64acb0[shape=record, label="  %33 = shl i32 %14, 1"];
	Node0x64ad20[shape=record, label="  %34 = sub i32 2, %1"];
	Node0x64ad90[shape=record, label="  %35 = add i32 %34, %2"];
	Node0x64ae00[shape=record, label="  %36 = add i32 %35, %15"];
	Node0x64ae70[shape=record, label="  %37 = add i32 %36, %16"];
	Node0x64aee0[shape=record, label="  %38 = sub i32 %37, %19"];
	Node0x64af50[shape=record, label="  %39 = add i32 %38, %26"];
	Node0x64afc0[shape=record, label="  %40 = sub i32 %39, %17"];
	Node0x64b030[shape=record, label="  %41 = add i32 %40, %20"];
	Node0x64b0a0[shape=record, label="  %42 = add i32 %41, %21"];
	Node0x64b110[shape=record, label="  %43 = add i32 %42, %25"];
	Node0x64b180[shape=record, label="  %44 = add i32 %43, %33"];
	Node0x64b1f0[shape=record, label="  %45 = add i32 %44, %29"];
	Node0x64b260[shape=record, label="  %46 = sub i32 %45, %23"];
	Node0x64b2d0[shape=record, label="  %47 = sub i32 %46, %32"];
	Node0x64b340[shape=record, label="  %48 = add i32 %47, %24"];
	Node0x64b3b0[shape=record, label="  %49 = sub i32 %48, %31"];
	Node0x64b420[shape=record, label="  %50 = icmp eq i32 %12, %49"];
	Node0x5ea268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x64b8c0[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x64b910[shape=record, label="  ret void"];
	Node0x649730 -> Node0x649db0;
	Node0x649db0 -> Node0x649e20;
	Node0x649e20 -> Node0x649e90;
	Node0x649e90 -> Node0x649f30;
	Node0x649f30 -> Node0x649fa0;
	Node0x649fa0 -> Node0x64a010;
	Node0x64a010 -> Node0x64a080;
	Node0x64a080 -> Node0x64a120;
	Node0x64a120 -> Node0x64a190;
	Node0x64a190 -> Node0x64a200;
	Node0x64a200 -> Node0x64a270;
	Node0x64a270 -> Node0x64a2e0;
	Node0x64a2e0 -> Node0x64a350;
	Node0x64a350 -> Node0x64a3c0;
	Node0x64a3c0 -> Node0x64a460;
	Node0x64a460 -> Node0x64a4d0;
	Node0x64a4d0 -> Node0x64a540;
	Node0x64a540 -> Node0x64a5b0;
	Node0x64a5b0 -> Node0x64a650;
	Node0x64a650 -> Node0x64a6c0;
	Node0x64a6c0 -> Node0x64a730;
	Node0x64a730 -> Node0x64a7a0;
	Node0x64a7a0 -> Node0x64a810;
	Node0x64a810 -> Node0x64a880;
	Node0x64a880 -> Node0x64a920;
	Node0x64a920 -> Node0x64a9c0;
	Node0x64a9c0 -> Node0x64aa30;
	Node0x64aa30 -> Node0x64acb0;
	Node0x64acb0 -> Node0x64ad20;
	Node0x64ad20 -> Node0x64ad90;
	Node0x64ad90 -> Node0x64ae00;
	Node0x64ae00 -> Node0x64ae70;
	Node0x64ae70 -> Node0x64aee0;
	Node0x64aee0 -> Node0x64af50;
	Node0x64af50 -> Node0x64afc0;
	Node0x64afc0 -> Node0x64b030;
	Node0x64b030 -> Node0x64b0a0;
	Node0x64b0a0 -> Node0x64b110;
	Node0x64b110 -> Node0x64b180;
	Node0x64b180 -> Node0x64b1f0;
	Node0x64b1f0 -> Node0x64b260;
	Node0x64b260 -> Node0x64b2d0;
	Node0x64b2d0 -> Node0x64b340;
	Node0x64b340 -> Node0x64b3b0;
	Node0x64b3b0 -> Node0x64b420;
	Node0x64b420 -> Node0x5ea268;
	Node0x5ea268 -> Node0x64b8c0;
	Node0x64b8c0 -> Node0x64b910;
edge [color=red]
	Node0x649db0 -> Node0x649e20;
	Node0x649f30 -> Node0x649fa0;
	Node0x649730 -> Node0x649fa0;
	Node0x649fa0 -> Node0x64a010;
	Node0x649e20 -> Node0x64a010;
	Node0x64a010 -> Node0x64a080;
	Node0x649e90 -> Node0x64a080;
	Node0x64a120 -> Node0x64a190;
	Node0x64a270 -> Node0x64a2e0;
	Node0x64a350 -> Node0x64a3c0;
	Node0x649730 -> Node0x64a460;
	Node0x649db0 -> Node0x64a4d0;
	Node0x649db0 -> Node0x64a540;
	Node0x64a540 -> Node0x64a5b0;
	Node0x64a5b0 -> Node0x64a650;
	Node0x649e90 -> Node0x64a7a0;
	Node0x64a7a0 -> Node0x64a810;
	Node0x64a810 -> Node0x64a880;
	Node0x64a4d0 -> Node0x64a920;
	Node0x64a920 -> Node0x64a9c0;
	Node0x64a6c0 -> Node0x64aa30;
	Node0x64a190 -> Node0x64acb0;
	Node0x64ad20 -> Node0x64ad90;
	Node0x64ad90 -> Node0x64ae00;
	Node0x64a200 -> Node0x64ae00;
	Node0x64ae00 -> Node0x64ae70;
	Node0x64a270 -> Node0x64ae70;
	Node0x64ae70 -> Node0x64aee0;
	Node0x64a3c0 -> Node0x64aee0;
	Node0x64aee0 -> Node0x64af50;
	Node0x64a730 -> Node0x64af50;
	Node0x64af50 -> Node0x64afc0;
	Node0x64a2e0 -> Node0x64afc0;
	Node0x64afc0 -> Node0x64b030;
	Node0x64a460 -> Node0x64b030;
	Node0x64b030 -> Node0x64b0a0;
	Node0x64a4d0 -> Node0x64b0a0;
	Node0x64b0a0 -> Node0x64b110;
	Node0x64a6c0 -> Node0x64b110;
	Node0x64b110 -> Node0x64b180;
	Node0x64acb0 -> Node0x64b180;
	Node0x64b180 -> Node0x64b1f0;
	Node0x64a880 -> Node0x64b1f0;
	Node0x64b1f0 -> Node0x64b260;
	Node0x64a5b0 -> Node0x64b260;
	Node0x64b260 -> Node0x64b2d0;
	Node0x64aa30 -> Node0x64b2d0;
	Node0x64b2d0 -> Node0x64b340;
	Node0x64a650 -> Node0x64b340;
	Node0x64b340 -> Node0x64b3b0;
	Node0x64a9c0 -> Node0x64b3b0;
	Node0x64a080 -> Node0x64b420;
	Node0x64b3b0 -> Node0x64b420;
	Node0x64b420 -> Node0x5ea268;
	Node0x5ea268 -> Node0x64b8c0;
}
