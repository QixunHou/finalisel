digraph "DFG for'main' function" {
	Node0x64bad8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x64bb58[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x64bbe8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x64bc48[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x64bcf8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x64c128[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x64c208[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x64c308[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x64c3c8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x64c478[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x64c538[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x64c5e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x646760[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x64c7e8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x64d758[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x64ddc8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x64de28[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x64df38[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0x64e198[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x64e2f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x64e408[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x64e518[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x64e5d8[shape=record, label="  ret i32 0"];
	Node0x64bad8 -> Node0x64bb58;
	Node0x64bb58 -> Node0x64bbe8;
	Node0x64bbe8 -> Node0x64bc48;
	Node0x64bc48 -> Node0x64bcf8;
	Node0x64bcf8 -> Node0x64c128;
	Node0x64c128 -> Node0x64c208;
	Node0x64c208 -> Node0x64c308;
	Node0x64c308 -> Node0x64c3c8;
	Node0x64c3c8 -> Node0x64c478;
	Node0x64c478 -> Node0x64c538;
	Node0x64c538 -> Node0x64c5e8;
	Node0x64c5e8 -> Node0x646760;
	Node0x646760 -> Node0x64c7e8;
	Node0x64c7e8 -> Node0x64d758;
	Node0x64d758 -> Node0x64ddc8;
	Node0x64ddc8 -> Node0x64de28;
	Node0x64de28 -> Node0x64df38;
	Node0x64df38 -> Node0x64e198;
	Node0x64e198 -> Node0x64e2f8;
	Node0x64e2f8 -> Node0x64e408;
	Node0x64e408 -> Node0x64e518;
	Node0x64e518 -> Node0x64e5d8;
edge [color=red]
	Node0x64bad8 -> Node0x64bcf8;
	Node0x64bcf8 -> Node0x64c128;
	Node0x64bb58 -> Node0x64c208;
	Node0x64c208 -> Node0x64c308;
	Node0x64bbe8 -> Node0x64c3c8;
	Node0x64c3c8 -> Node0x64c478;
	Node0x64bc48 -> Node0x64c538;
	Node0x64c538 -> Node0x64c5e8;
	Node0x64bad8 -> Node0x646760;
	Node0x64bb58 -> Node0x646760;
	Node0x64bbe8 -> Node0x646760;
	Node0x64bc48 -> Node0x646760;
	Node0x64bad8 -> Node0x64c7e8;
	Node0x64bb58 -> Node0x64d758;
	Node0x64bbe8 -> Node0x64ddc8;
	Node0x64bc48 -> Node0x64de28;
	Node0x64c7e8 -> Node0x64df38;
	Node0x64d758 -> Node0x64df38;
	Node0x64ddc8 -> Node0x64df38;
	Node0x64de28 -> Node0x64df38;
	Node0x64c538 -> Node0x64e198;
	Node0x64c3c8 -> Node0x64e2f8;
	Node0x64c208 -> Node0x64e408;
	Node0x64bcf8 -> Node0x64e518;
}
