; ModuleID = '../.././c_source_file/1947_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1947_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %2
  %9 = and i32 %8, %0
  %10 = xor i32 %2, %1
  %11 = xor i32 %10, %0
  %12 = or i32 %9, %11
  %13 = or i32 %2, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %14, %1
  %16 = sub i32 1, %15
  %17 = add i32 %16, %6
  %18 = add i32 %17, %12
  %19 = or i32 %4, %3
  %20 = shl i32 %4, 1
  %21 = and i32 %4, %3
  %22 = xor i32 %4, -1
  %23 = and i32 %22, %3
  %24 = shl i32 %23, 1
  %25 = xor i32 %24, -2
  %26 = xor i32 %3, -1
  %27 = or i32 %22, %3
  %28 = add i32 %4, 1
  %29 = xor i32 %19, -1
  %30 = xor i32 %27, -1
  %31 = and i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %32
  %36 = and i32 %33, %7
  %37 = or i32 %7, %0
  %38 = and i32 %33, %37
  %39 = xor i32 %2, -1
  %40 = and i32 %39, %1
  %41 = or i32 %40, %0
  %42 = shl i32 %41, 1
  %43 = and i32 %39, %0
  %44 = xor i32 %1, %0
  %45 = or i32 %43, %44
  %46 = or i32 %1, %0
  %47 = xor i32 %10, -1
  %48 = and i32 %46, %47
  %49 = and i32 %7, %0
  %50 = and i32 %2, %1
  %51 = or i32 %50, %49
  %52 = or i32 %49, %47
  %53 = or i32 %49, %2
  %54 = xor i32 %0, -1
  %55 = and i32 %50, %54
  %56 = and i32 %10, %0
  %57 = xor i32 %56, -1
  %58 = xor i32 %55, %57
  %59 = or i32 %31, %47
  %60 = xor i32 %37, %2
  %61 = or i32 %2, %1
  %62 = or i32 %61, %0
  %63 = xor i32 %44, -1
  %64 = and i32 %13, %63
  %65 = and i32 %44, %2
  %66 = xor i32 %49, -1
  %67 = or i32 %10, %0
  %68 = xor i32 %9, %67
  %69 = and i32 %2, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %31, %2
  %72 = or i32 %33, %44
  %73 = shl i32 %72, 1
  %74 = xor i32 %70, %1
  %75 = or i32 %39, %0
  %76 = xor i32 %75, -1
  %77 = add i32 %75, 1
  %78 = xor i32 %69, %46
  %79 = or i32 %47, %54
  %80 = xor i32 %49, %2
  %81 = xor i32 %50, -1
  %82 = or i32 %81, %54
  %83 = xor i32 %46, -1
  %84 = or i32 %34, %83
  %85 = or i32 %33, %83
  %86 = xor i32 %40, -1
  %87 = and i32 %86, %0
  %88 = and i32 %39, %63
  %89 = xor i32 %37, -1
  %90 = or i32 %34, %89
  %91 = and i32 %33, %44
  %92 = or i32 %34, %1
  %93 = xor i32 %43, -1
  %94 = xor i32 %93, %1
  %95 = and i32 %50, %0
  %96 = xor i32 %95, %11
  %97 = and i32 %39, %66
  %98 = xor i32 %49, %86
  %99 = xor i32 %83, %2
  %100 = or i32 %55, %56
  %101 = shl i32 %100, 1
  %102 = and i32 %8, %54
  %103 = or i32 %7, %2
  %104 = and i32 %103, %0
  %105 = or i32 %102, %104
  %106 = and i32 %61, %0
  %107 = or i32 %55, %106
  %108 = and i32 %81, %0
  %109 = or i32 %43, %7
  %110 = shl i32 %109, 1
  %111 = or i32 %86, %0
  %112 = and i32 %37, %39
  %113 = xor i32 %81, %0
  %114 = and i32 %33, %66
  %115 = shl i32 %114, 1
  %116 = or i32 %39, %63
  %117 = shl i32 %116, 1
  %118 = and i32 %37, %47
  %119 = xor i32 %75, %1
  %120 = xor i32 %61, %31
  %121 = or i32 %50, %54
  %122 = or i32 %33, %1
  %123 = and i32 %33, %46
  %124 = xor i32 %61, -1
  %125 = or i32 %69, %124
  %126 = xor i32 %89, %2
  %127 = or i32 %31, %76
  %128 = and i32 %47, %32
  %129 = and i32 %103, %54
  %130 = xor i32 %9, -1
  %131 = xor i32 %129, %130
  %132 = xor i32 %104, -1
  %133 = xor i32 %102, %132
  %134 = xor i32 %86, %0
  %135 = and i32 %33, %32
  %136 = and i32 %61, %54
  %137 = or i32 %95, %136
  %138 = or i32 %69, %44
  %139 = shl i32 %138, 1
  %140 = and i32 %44, %39
  %141 = and i32 %13, %44
  %142 = and i32 %75, %44
  %143 = and i32 %47, %66
  %144 = and i32 %33, %1
  %145 = or i32 %43, %63
  %146 = shl i32 %145, 1
  %147 = or i32 %69, %63
  %148 = xor i32 %106, 2147483647
  %149 = xor i32 %148, %55
  %150 = or i32 %31, %14
  %151 = xor i32 %66, %2
  %152 = shl i32 %151, 2
  %153 = and i32 %13, %1
  %154 = and i32 %66, %2
  %155 = or i32 %39, %1
  %156 = xor i32 %155, -1
  %157 = xor i32 %156, %0
  %158 = and i32 %34, %66
  %159 = xor i32 %61, %0
  %160 = or i32 %95, %159
  %161 = add i32 %13, 1
  %162 = or i32 %61, %54
  %163 = and i32 %37, %34
  %164 = xor i32 %69, %37
  %165 = xor i32 %103, %0
  %166 = or i32 %9, %165
  %167 = or i32 %69, %89
  %168 = xor i32 %69, %61
  %169 = or i32 %31, %124
  %170 = shl i32 %169, 1
  %171 = xor i32 %11, %130
  %172 = and i32 %10, %32
  %173 = shl i32 %172, 1
  %174 = or i32 %40, %54
  %175 = or i32 %47, %0
  %176 = add i32 %37, 1
  %177 = or i32 %9, %129
  %178 = and i32 %46, %2
  %179 = and i32 %33, %63
  %180 = and i32 %34, %7
  %181 = xor i32 %95, %175
  %182 = and i32 %32, %2
  %183 = xor i32 %155, %0
  %184 = and i32 %46, %34
  %185 = or i32 %156, %0
  %186 = or i32 %33, %89
  %187 = and i32 %93, %63
  %188 = or i32 %33, %63
  %189 = or i32 %44, %76
  %190 = or i32 %40, %49
  %191 = xor i32 %159, -1
  %192 = xor i32 %95, %191
  %193 = or i32 %33, %7
  %194 = xor i32 %69, %1
  %195 = or i32 %76, %63
  %196 = and i32 %34, %63
  %197 = shl i32 %196, 2
  %198 = shl i32 %11, 1
  %199 = or i32 %10, %83
  %200 = and i32 %44, %34
  %201 = and i32 %75, %63
  %202 = and i32 %40, %54
  %203 = and i32 %124, %0
  %204 = and i32 %40, %0
  %205 = mul i32 %204, 17
  %206 = and i32 %156, %54
  %207 = and i32 %156, %0
  %208 = shl i32 %207, 3
  %209 = add i32 %202, %55
  %210 = sub i32 %209, %201
  %211 = add i32 %210, %163
  %212 = sub i32 %211, %150
  %213 = add i32 %212, %29
  %214 = mul i32 %213, 3
  %215 = sub i32 %23, %206
  %216 = add i32 %215, %21
  %217 = add i32 %216, %30
  %218 = mul i32 %217, 6
  %219 = add i32 %141, %193
  %220 = sub i32 %74, %219
  %221 = add i32 %220, %58
  %222 = mul i32 %221, 5
  %223 = add i32 %194, %70
  %224 = shl i32 %223, 2
  %225 = sub i32 -2, %1
  %226 = add i32 %225, %33
  %227 = add i32 %226, %53
  %228 = add i32 %227, %95
  %229 = add i32 %228, %168
  %230 = add i32 %229, %142
  %231 = add i32 %230, %125
  %232 = add i32 %231, %64
  %233 = add i32 %232, %96
  %234 = add i32 %233, %149
  %235 = shl i32 %234, 1
  %236 = add i32 %44, %49
  %237 = add i32 %236, 2
  %238 = add i32 %237, %37
  %239 = add i32 %238, %46
  %240 = add i32 %239, %176
  %241 = sub i32 %240, %3
  %242 = add i32 %241, %26
  %243 = sub i32 %242, %60
  %244 = add i32 %243, %65
  %245 = sub i32 %244, %71
  %246 = add i32 %245, %77
  %247 = add i32 %246, %80
  %248 = add i32 %247, %88
  %249 = sub i32 %248, %97
  %250 = add i32 %249, %99
  %251 = add i32 %250, %50
  %252 = sub i32 %251, %112
  %253 = sub i32 %252, %126
  %254 = sub i32 %253, %140
  %255 = sub i32 %254, %154
  %256 = add i32 %255, %161
  %257 = sub i32 %256, %40
  %258 = sub i32 %257, %178
  %259 = sub i32 %258, %182
  %260 = add i32 %259, %28
  %261 = add i32 %260, %35
  %262 = add i32 %261, %36
  %263 = sub i32 %262, %38
  %264 = sub i32 %263, %45
  %265 = sub i32 %264, %48
  %266 = sub i32 %265, %51
  %267 = sub i32 %266, %52
  %268 = sub i32 %267, %59
  %269 = add i32 %268, %62
  %270 = add i32 %269, %78
  %271 = add i32 %270, %79
  %272 = sub i32 %271, %82
  %273 = sub i32 %272, %84
  %274 = sub i32 %273, %85
  %275 = sub i32 %274, %87
  %276 = sub i32 %275, %90
  %277 = sub i32 %276, %91
  %278 = add i32 %277, %92
  %279 = add i32 %278, %94
  %280 = add i32 %279, %98
  %281 = add i32 %280, %108
  %282 = sub i32 %281, %111
  %283 = add i32 %282, %113
  %284 = sub i32 %283, %117
  %285 = sub i32 %284, %118
  %286 = add i32 %285, %119
  %287 = add i32 %286, %120
  %288 = sub i32 %287, %121
  %289 = add i32 %288, %122
  %290 = add i32 %289, %123
  %291 = add i32 %290, %127
  %292 = add i32 %291, %128
  %293 = add i32 %292, %134
  %294 = sub i32 %293, %135
  %295 = add i32 %294, %143
  %296 = sub i32 %295, %144
  %297 = sub i32 %296, %147
  %298 = sub i32 %297, %152
  %299 = sub i32 %298, %153
  %300 = add i32 %299, %157
  %301 = add i32 %300, %158
  %302 = add i32 %301, %162
  %303 = add i32 %302, %164
  %304 = sub i32 %303, %167
  %305 = add i32 %304, %174
  %306 = add i32 %305, %175
  %307 = sub i32 %306, %179
  %308 = add i32 %307, %180
  %309 = add i32 %308, %183
  %310 = add i32 %309, %184
  %311 = add i32 %310, %185
  %312 = sub i32 %311, %186
  %313 = sub i32 %312, %187
  %314 = sub i32 %313, %188
  %315 = add i32 %314, %189
  %316 = sub i32 %315, %190
  %317 = add i32 %316, %106
  %318 = sub i32 %317, %56
  %319 = add i32 %318, %195
  %320 = sub i32 %319, %199
  %321 = sub i32 %320, %200
  %322 = sub i32 %321, %203
  %323 = sub i32 %322, %19
  %324 = sub i32 %323, %20
  %325 = add i32 %324, %21
  %326 = sub i32 %325, %27
  %327 = sub i32 %326, %6
  %328 = sub i32 %327, %42
  %329 = sub i32 %328, %68
  %330 = sub i32 %329, %73
  %331 = add i32 %330, %105
  %332 = add i32 %331, %107
  %333 = sub i32 %332, %110
  %334 = sub i32 %333, %115
  %335 = sub i32 %334, %131
  %336 = sub i32 %335, %133
  %337 = sub i32 %336, %137
  %338 = sub i32 %337, %139
  %339 = sub i32 %338, %146
  %340 = sub i32 %339, %160
  %341 = sub i32 %340, %166
  %342 = sub i32 %341, %170
  %343 = add i32 %342, %171
  %344 = sub i32 %343, %173
  %345 = sub i32 %344, %177
  %346 = add i32 %345, %181
  %347 = sub i32 %346, %192
  %348 = sub i32 %347, %197
  %349 = sub i32 %348, %198
  %350 = add i32 %349, %205
  %351 = add i32 %350, %208
  %352 = sub i32 %351, %101
  %353 = add i32 %352, %224
  %354 = sub i32 %353, %25
  %355 = add i32 %354, %218
  %356 = add i32 %355, %222
  %357 = add i32 %356, %214
  %358 = add i32 %357, %235
  %359 = icmp eq i32 %18, %358
  %360 = select i1 %359, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %361 = tail call i32 @puts(i8* nonnull dereferenceable(1) %360)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
