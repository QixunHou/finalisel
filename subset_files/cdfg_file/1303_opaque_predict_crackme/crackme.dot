digraph "DFG for'crackme' function" {
	Node0x1a2ca80[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x1a2d100[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1a2d1a0[shape=record, label="  %7 = xor i32 %2, -1"];
	Node0x1a2d210[shape=record, label="  %8 = and i32 %7, %1"];
	Node0x1a2d280[shape=record, label="  %9 = xor i32 %3, %0"];
	Node0x1a2d2f0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1a2d390[shape=record, label="  %11 = sub i32 -2, %8"];
	Node0x1a2d400[shape=record, label="  %12 = add i32 %11, %6"];
	Node0x1a2d470[shape=record, label="  %13 = add i32 %12, %10"];
	Node0x1a2d4e0[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x1a2d550[shape=record, label="  %15 = or i32 %7, %1"];
	Node0x1a2d5f0[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x1a2d690[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0x1a2d700[shape=record, label="  %18 = xor i32 %3, -1"];
	Node0x1a2d770[shape=record, label="  %19 = or i32 %18, %0"];
	Node0x1a2d7e0[shape=record, label="  %20 = shl i32 %0, 1"];
	Node0x1a2d850[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x1a2d8c0[shape=record, label="  %22 = xor i32 %21, -1"];
	Node0x1a2d960[shape=record, label="  %23 = mul i32 %22, 3"];
	Node0x1a2d9d0[shape=record, label="  %24 = and i32 %18, %0"];
	Node0x1a2da40[shape=record, label="  %25 = add i32 %24, %3"];
	Node0x1a2dae0[shape=record, label="  %26 = mul i32 %25, 5"];
	Node0x1a2db50[shape=record, label="  %27 = sub i32 %15, %1"];
	Node0x1a2dbc0[shape=record, label="  %28 = add i32 %27, %8"];
	Node0x1a2dc30[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x1a2dca0[shape=record, label="  %30 = add i32 %0, 3"];
	Node0x1a2dd10[shape=record, label="  %31 = add i32 %30, %1"];
	Node0x1a2dd80[shape=record, label="  %32 = sub i32 %31, %20"];
	Node0x1a2e000[shape=record, label="  %33 = add i32 %32, %14"];
	Node0x1a2e070[shape=record, label="  %34 = add i32 %33, %19"];
	Node0x1a2e0e0[shape=record, label="  %35 = sub i32 %34, %9"];
	Node0x1a2e150[shape=record, label="  %36 = sub i32 %35, %21"];
	Node0x1a2e1c0[shape=record, label="  %37 = add i32 %36, %17"];
	Node0x1a2e230[shape=record, label="  %38 = add i32 %37, %23"];
	Node0x1a2e2a0[shape=record, label="  %39 = add i32 %38, %29"];
	Node0x1a2e310[shape=record, label="  %40 = add i32 %39, %26"];
	Node0x1a2e380[shape=record, label="  %41 = icmp eq i32 %13, %40"];
	Node0x19cd268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a2e820[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0x1a2e870[shape=record, label="  ret void"];
	Node0x1a2ca80 -> Node0x1a2d100;
	Node0x1a2d100 -> Node0x1a2d1a0;
	Node0x1a2d1a0 -> Node0x1a2d210;
	Node0x1a2d210 -> Node0x1a2d280;
	Node0x1a2d280 -> Node0x1a2d2f0;
	Node0x1a2d2f0 -> Node0x1a2d390;
	Node0x1a2d390 -> Node0x1a2d400;
	Node0x1a2d400 -> Node0x1a2d470;
	Node0x1a2d470 -> Node0x1a2d4e0;
	Node0x1a2d4e0 -> Node0x1a2d550;
	Node0x1a2d550 -> Node0x1a2d5f0;
	Node0x1a2d5f0 -> Node0x1a2d690;
	Node0x1a2d690 -> Node0x1a2d700;
	Node0x1a2d700 -> Node0x1a2d770;
	Node0x1a2d770 -> Node0x1a2d7e0;
	Node0x1a2d7e0 -> Node0x1a2d850;
	Node0x1a2d850 -> Node0x1a2d8c0;
	Node0x1a2d8c0 -> Node0x1a2d960;
	Node0x1a2d960 -> Node0x1a2d9d0;
	Node0x1a2d9d0 -> Node0x1a2da40;
	Node0x1a2da40 -> Node0x1a2dae0;
	Node0x1a2dae0 -> Node0x1a2db50;
	Node0x1a2db50 -> Node0x1a2dbc0;
	Node0x1a2dbc0 -> Node0x1a2dc30;
	Node0x1a2dc30 -> Node0x1a2dca0;
	Node0x1a2dca0 -> Node0x1a2dd10;
	Node0x1a2dd10 -> Node0x1a2dd80;
	Node0x1a2dd80 -> Node0x1a2e000;
	Node0x1a2e000 -> Node0x1a2e070;
	Node0x1a2e070 -> Node0x1a2e0e0;
	Node0x1a2e0e0 -> Node0x1a2e150;
	Node0x1a2e150 -> Node0x1a2e1c0;
	Node0x1a2e1c0 -> Node0x1a2e230;
	Node0x1a2e230 -> Node0x1a2e2a0;
	Node0x1a2e2a0 -> Node0x1a2e310;
	Node0x1a2e310 -> Node0x1a2e380;
	Node0x1a2e380 -> Node0x19cd268;
	Node0x19cd268 -> Node0x1a2e820;
	Node0x1a2e820 -> Node0x1a2e870;
edge [color=red]
	Node0x1a2ca80 -> Node0x1a2d100;
	Node0x1a2d1a0 -> Node0x1a2d210;
	Node0x1a2d280 -> Node0x1a2d2f0;
	Node0x1a2d210 -> Node0x1a2d390;
	Node0x1a2d390 -> Node0x1a2d400;
	Node0x1a2d100 -> Node0x1a2d400;
	Node0x1a2d400 -> Node0x1a2d470;
	Node0x1a2d2f0 -> Node0x1a2d470;
	Node0x1a2d1a0 -> Node0x1a2d550;
	Node0x1a2d550 -> Node0x1a2d5f0;
	Node0x1a2d5f0 -> Node0x1a2d690;
	Node0x1a2d700 -> Node0x1a2d770;
	Node0x1a2d850 -> Node0x1a2d8c0;
	Node0x1a2d8c0 -> Node0x1a2d960;
	Node0x1a2d700 -> Node0x1a2d9d0;
	Node0x1a2d9d0 -> Node0x1a2da40;
	Node0x1a2da40 -> Node0x1a2dae0;
	Node0x1a2d550 -> Node0x1a2db50;
	Node0x1a2db50 -> Node0x1a2dbc0;
	Node0x1a2d210 -> Node0x1a2dbc0;
	Node0x1a2dbc0 -> Node0x1a2dc30;
	Node0x1a2dca0 -> Node0x1a2dd10;
	Node0x1a2dd10 -> Node0x1a2dd80;
	Node0x1a2d7e0 -> Node0x1a2dd80;
	Node0x1a2dd80 -> Node0x1a2e000;
	Node0x1a2d4e0 -> Node0x1a2e000;
	Node0x1a2e000 -> Node0x1a2e070;
	Node0x1a2d770 -> Node0x1a2e070;
	Node0x1a2e070 -> Node0x1a2e0e0;
	Node0x1a2d280 -> Node0x1a2e0e0;
	Node0x1a2e0e0 -> Node0x1a2e150;
	Node0x1a2d850 -> Node0x1a2e150;
	Node0x1a2e150 -> Node0x1a2e1c0;
	Node0x1a2d690 -> Node0x1a2e1c0;
	Node0x1a2e1c0 -> Node0x1a2e230;
	Node0x1a2d960 -> Node0x1a2e230;
	Node0x1a2e230 -> Node0x1a2e2a0;
	Node0x1a2dc30 -> Node0x1a2e2a0;
	Node0x1a2e2a0 -> Node0x1a2e310;
	Node0x1a2dae0 -> Node0x1a2e310;
	Node0x1a2d470 -> Node0x1a2e380;
	Node0x1a2e310 -> Node0x1a2e380;
	Node0x1a2e380 -> Node0x19cd268;
	Node0x19cd268 -> Node0x1a2e820;
}
