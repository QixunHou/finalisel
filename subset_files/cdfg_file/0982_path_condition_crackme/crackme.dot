digraph "DFG for'crackme' function" {
	Node0x131bc10[shape=record, label="  %3 = shl i32 %0, 1"];
	Node0x131bcb0[shape=record, label="  %4 = add i32 %3, -1"];
	Node0x131bd70[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x131bde0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x131be50[shape=record, label="  %7 = mul i32 %6, 3"];
	Node0x131bec0[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x131bf30[shape=record, label="  %9 = add i32 %1, 1"];
	Node0x131bfa0[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x131c010[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x131c080[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0x131c0f0[shape=record, label="  %13 = or i32 %8, %0"];
	Node0x131c160[shape=record, label="  %14 = xor i32 %5, -1"];
	Node0x131c200[shape=record, label="  %15 = shl i32 %13, 2"];
	Node0x131c2a0[shape=record, label="  %16 = xor i32 %15, -4"];
	Node0x131c310[shape=record, label="  %17 = and i32 %8, %0"];
	Node0x131c380[shape=record, label="  %18 = add i32 %17, %1"];
	Node0x131c3f0[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x131c460[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x131c4d0[shape=record, label="  %21 = sub i32 %9, %5"];
	Node0x131c540[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x131c5b0[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x131c620[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0x131c690[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x131c700[shape=record, label="  %26 = add i32 %25, %7"];
	Node0x131c770[shape=record, label="  %27 = sub i32 %26, %16"];
	Node0x131c7e0[shape=record, label="  %28 = add i32 %27, %20"];
	Node0x131c850[shape=record, label="  %29 = icmp eq i32 %4, %28"];
	Node0x12bc268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x131ccf0[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0x131cd40[shape=record, label="  ret void"];
	Node0x131bc10 -> Node0x131bcb0;
	Node0x131bcb0 -> Node0x131bd70;
	Node0x131bd70 -> Node0x131bde0;
	Node0x131bde0 -> Node0x131be50;
	Node0x131be50 -> Node0x131bec0;
	Node0x131bec0 -> Node0x131bf30;
	Node0x131bf30 -> Node0x131bfa0;
	Node0x131bfa0 -> Node0x131c010;
	Node0x131c010 -> Node0x131c080;
	Node0x131c080 -> Node0x131c0f0;
	Node0x131c0f0 -> Node0x131c160;
	Node0x131c160 -> Node0x131c200;
	Node0x131c200 -> Node0x131c2a0;
	Node0x131c2a0 -> Node0x131c310;
	Node0x131c310 -> Node0x131c380;
	Node0x131c380 -> Node0x131c3f0;
	Node0x131c3f0 -> Node0x131c460;
	Node0x131c460 -> Node0x131c4d0;
	Node0x131c4d0 -> Node0x131c540;
	Node0x131c540 -> Node0x131c5b0;
	Node0x131c5b0 -> Node0x131c620;
	Node0x131c620 -> Node0x131c690;
	Node0x131c690 -> Node0x131c700;
	Node0x131c700 -> Node0x131c770;
	Node0x131c770 -> Node0x131c7e0;
	Node0x131c7e0 -> Node0x131c850;
	Node0x131c850 -> Node0x12bc268;
	Node0x12bc268 -> Node0x131ccf0;
	Node0x131ccf0 -> Node0x131cd40;
edge [color=red]
	Node0x131bc10 -> Node0x131bcb0;
	Node0x131bde0 -> Node0x131be50;
	Node0x131bfa0 -> Node0x131c010;
	Node0x131bde0 -> Node0x131c080;
	Node0x131bec0 -> Node0x131c0f0;
	Node0x131bd70 -> Node0x131c160;
	Node0x131c0f0 -> Node0x131c200;
	Node0x131c200 -> Node0x131c2a0;
	Node0x131bec0 -> Node0x131c310;
	Node0x131c310 -> Node0x131c380;
	Node0x131c380 -> Node0x131c3f0;
	Node0x131bfa0 -> Node0x131c3f0;
	Node0x131c3f0 -> Node0x131c460;
	Node0x131bf30 -> Node0x131c4d0;
	Node0x131bd70 -> Node0x131c4d0;
	Node0x131c4d0 -> Node0x131c540;
	Node0x131c010 -> Node0x131c540;
	Node0x131c540 -> Node0x131c5b0;
	Node0x131c080 -> Node0x131c5b0;
	Node0x131c5b0 -> Node0x131c620;
	Node0x131c0f0 -> Node0x131c620;
	Node0x131c620 -> Node0x131c690;
	Node0x131c160 -> Node0x131c690;
	Node0x131c690 -> Node0x131c700;
	Node0x131be50 -> Node0x131c700;
	Node0x131c700 -> Node0x131c770;
	Node0x131c2a0 -> Node0x131c770;
	Node0x131c770 -> Node0x131c7e0;
	Node0x131c460 -> Node0x131c7e0;
	Node0x131bcb0 -> Node0x131c850;
	Node0x131c7e0 -> Node0x131c850;
	Node0x131c850 -> Node0x12bc268;
	Node0x12bc268 -> Node0x131ccf0;
}
