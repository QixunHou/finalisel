digraph "DFG for'crackme' function" {
	Node0x19f64c0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x19f6b70[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x19f6c30[shape=record, label="  %5 = add i32 %4, %0"];
	Node0x19f6ca0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x19f6d10[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x19f6d80[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x19f6df0[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x19f6e60[shape=record, label="  %10 = xor i32 %3, -1"];
	Node0x19f6f00[shape=record, label="  %11 = mul i32 %10, 5"];
	Node0x19f6fa0[shape=record, label="  %12 = xor i32 %0, 2147483647"];
	Node0x19f7010[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x19f70b0[shape=record, label="  %14 = mul i32 %8, 3"];
	Node0x19f7120[shape=record, label="  %15 = or i32 %7, %13"];
	Node0x19f71c0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x19f7230[shape=record, label="  %17 = add i32 %7, 5"];
	Node0x19f72a0[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x19f7310[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x19f7380[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x19f73f0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x19f7460[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x19f74d0[shape=record, label="  %23 = icmp eq i32 %5, %22"];
	Node0x1997268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x19f7970[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x19f79c0[shape=record, label="  ret void"];
	Node0x19f64c0 -> Node0x19f6b70;
	Node0x19f6b70 -> Node0x19f6c30;
	Node0x19f6c30 -> Node0x19f6ca0;
	Node0x19f6ca0 -> Node0x19f6d10;
	Node0x19f6d10 -> Node0x19f6d80;
	Node0x19f6d80 -> Node0x19f6df0;
	Node0x19f6df0 -> Node0x19f6e60;
	Node0x19f6e60 -> Node0x19f6f00;
	Node0x19f6f00 -> Node0x19f6fa0;
	Node0x19f6fa0 -> Node0x19f7010;
	Node0x19f7010 -> Node0x19f70b0;
	Node0x19f70b0 -> Node0x19f7120;
	Node0x19f7120 -> Node0x19f71c0;
	Node0x19f71c0 -> Node0x19f7230;
	Node0x19f7230 -> Node0x19f72a0;
	Node0x19f72a0 -> Node0x19f7310;
	Node0x19f7310 -> Node0x19f7380;
	Node0x19f7380 -> Node0x19f73f0;
	Node0x19f73f0 -> Node0x19f7460;
	Node0x19f7460 -> Node0x19f74d0;
	Node0x19f74d0 -> Node0x1997268;
	Node0x1997268 -> Node0x19f7970;
	Node0x19f7970 -> Node0x19f79c0;
edge [color=red]
	Node0x19f64c0 -> Node0x19f6b70;
	Node0x19f6b70 -> Node0x19f6c30;
	Node0x19f6ca0 -> Node0x19f6d10;
	Node0x19f64c0 -> Node0x19f6e60;
	Node0x19f6e60 -> Node0x19f6f00;
	Node0x19f6fa0 -> Node0x19f7010;
	Node0x19f6d80 -> Node0x19f70b0;
	Node0x19f6d10 -> Node0x19f7120;
	Node0x19f7010 -> Node0x19f7120;
	Node0x19f7120 -> Node0x19f71c0;
	Node0x19f6d10 -> Node0x19f7230;
	Node0x19f7230 -> Node0x19f72a0;
	Node0x19f6d80 -> Node0x19f72a0;
	Node0x19f72a0 -> Node0x19f7310;
	Node0x19f6df0 -> Node0x19f7310;
	Node0x19f7310 -> Node0x19f7380;
	Node0x19f6f00 -> Node0x19f7380;
	Node0x19f7380 -> Node0x19f73f0;
	Node0x19f70b0 -> Node0x19f73f0;
	Node0x19f73f0 -> Node0x19f7460;
	Node0x19f71c0 -> Node0x19f7460;
	Node0x19f6c30 -> Node0x19f74d0;
	Node0x19f7460 -> Node0x19f74d0;
	Node0x19f74d0 -> Node0x1997268;
	Node0x1997268 -> Node0x19f7970;
}
