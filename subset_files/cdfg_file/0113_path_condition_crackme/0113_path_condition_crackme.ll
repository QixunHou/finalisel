; ModuleID = '../.././c_source_file/0113_path_condition_crackme.c'
source_filename = "../.././c_source_file/0113_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %4, %3
  %9 = xor i32 %8, -1
  %10 = xor i32 %0, -1
  %11 = xor i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %10
  %14 = xor i32 %1, -1
  %15 = xor i32 %2, %0
  %16 = xor i32 %15, -1
  %17 = and i32 %16, %14
  %18 = shl i32 %17, 1
  %19 = add i32 %13, %9
  %20 = add i32 %19, %7
  %21 = sub i32 %20, %18
  %22 = and i32 %4, %3
  %23 = or i32 %4, %3
  %24 = xor i32 %23, -1
  %25 = shl i32 %7, 1
  %26 = xor i32 %25, -2
  %27 = and i32 %6, %3
  %28 = xor i32 %2, -1
  %29 = and i32 %28, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %30, %32
  %34 = shl i32 %15, 1
  %35 = and i32 %2, %1
  %36 = xor i32 %35, -1
  %37 = xor i32 %29, %36
  %38 = or i32 %28, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %31, %39
  %41 = xor i32 %29, %1
  %42 = or i32 %39, %1
  %43 = and i32 %14, %2
  %44 = and i32 %43, %0
  %45 = or i32 %14, %2
  %46 = and i32 %45, %10
  %47 = xor i32 %46, -1
  %48 = xor i32 %44, %47
  %49 = and i32 %43, %10
  %50 = and i32 %45, %0
  %51 = or i32 %49, %50
  %52 = shl i32 %51, 1
  %53 = and i32 %1, %0
  %54 = or i32 %53, %28
  %55 = or i32 %31, %28
  %56 = or i32 %1, %0
  %57 = and i32 %56, %28
  %58 = xor i32 %53, -1
  %59 = and i32 %12, %58
  %60 = and i32 %2, %0
  %61 = or i32 %2, %1
  %62 = xor i32 %60, %61
  %63 = or i32 %28, %1
  %64 = or i32 %63, %10
  %65 = or i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %66, %1
  %68 = and i32 %38, %31
  %69 = xor i32 %58, %2
  %70 = and i32 %35, %0
  %71 = xor i32 %11, %0
  %72 = xor i32 %70, %71
  %73 = and i32 %14, %0
  %74 = or i32 %73, %2
  %75 = or i32 %11, %0
  %76 = xor i32 %44, %75
  %77 = xor i32 %63, -1
  %78 = or i32 %77, %0
  %79 = and i32 %16, %58
  %80 = or i32 %14, %0
  %81 = xor i32 %80, -1
  %82 = or i32 %16, %81
  %83 = xor i32 %36, %0
  %84 = add i32 %11, 1
  %85 = xor i32 %63, %0
  %86 = shl i32 %85, 1
  %87 = and i32 %35, %10
  %88 = and i32 %11, %0
  %89 = xor i32 %87, -1
  %90 = xor i32 %88, %89
  %91 = and i32 %28, %1
  %92 = xor i32 %91, %0
  %93 = and i32 %12, %0
  %94 = and i32 %65, %32
  %95 = and i32 %31, %30
  %96 = or i32 %31, %2
  %97 = or i32 %12, %0
  %98 = xor i32 %56, -1
  %99 = or i32 %11, %98
  %100 = and i32 %63, %10
  %101 = xor i32 %56, %2
  %102 = or i32 %53, %12
  %103 = and i32 %56, %12
  %104 = add i32 %80, 1
  %105 = or i32 %15, %53
  %106 = shl i32 %105, 1
  %107 = or i32 %11, %10
  %108 = xor i32 %49, %107
  %109 = shl i32 %108, 1
  %110 = xor i32 %60, -1
  %111 = and i32 %110, %14
  %112 = and i32 %15, %14
  %113 = shl i32 %31, 1
  %114 = and i32 %110, %1
  %115 = xor i32 %91, -1
  %116 = or i32 %35, %0
  %117 = or i32 %29, %1
  %118 = or i32 %36, %0
  %119 = or i32 %91, %73
  %120 = and i32 %80, %12
  %121 = or i32 %53, %39
  %122 = and i32 %32, %2
  %123 = or i32 %115, %10
  %124 = shl i32 %123, 1
  %125 = and i32 %65, %14
  %126 = and i32 %15, %80
  %127 = or i32 %29, %31
  %128 = or i32 %53, %2
  %129 = and i32 %31, %2
  %130 = or i32 %91, %10
  %131 = or i32 %28, %81
  %132 = and i32 %16, %1
  %133 = or i32 %28, %32
  %134 = or i32 %44, %46
  %135 = and i32 %11, %10
  %136 = or i32 %70, %135
  %137 = and i32 %80, %28
  %138 = xor i32 %61, %0
  %139 = shl i32 %138, 1
  %140 = or i32 %11, %81
  %141 = or i32 %91, %0
  %142 = shl i32 %141, 1
  %143 = or i32 %77, %10
  %144 = or i32 %53, %66
  %145 = or i32 %12, %81
  %146 = or i32 %60, %31
  %147 = xor i32 %65, %53
  %148 = and i32 %115, %0
  %149 = or i32 %60, %14
  %150 = add i32 %1, 1
  %151 = xor i32 %50, -1
  %152 = xor i32 %49, %151
  %153 = or i32 %87, %88
  %154 = and i32 %36, %0
  %155 = or i32 %15, %98
  %156 = and i32 %31, %110
  %157 = and i32 %36, %10
  %158 = and i32 %61, %10
  %159 = or i32 %115, %0
  %160 = or i32 %12, %10
  %161 = add i32 %65, 1
  %162 = xor i32 %73, %115
  %163 = or i32 %61, %0
  %164 = or i32 %35, %10
  %165 = and i32 %31, %28
  %166 = or i32 %60, %81
  %167 = and i32 %28, %32
  %168 = and i32 %15, %31
  %169 = xor i32 %61, -1
  %170 = or i32 %169, %0
  %171 = and i32 %80, %2
  %172 = or i32 %60, %98
  %173 = xor i32 %107, -1
  %174 = or i32 %49, %173
  %175 = or i32 %70, %138
  %176 = or i32 %53, %169
  %177 = xor i32 %60, %56
  %178 = or i32 %15, %81
  %179 = and i32 %115, %10
  %180 = xor i32 %73, %2
  %181 = shl i32 %180, 2
  %182 = or i32 %15, %1
  %183 = or i32 %16, %98
  %184 = shl i32 %183, 2
  %185 = or i32 %36, %10
  %186 = or i32 %70, %158
  %187 = xor i32 %45, %0
  %188 = or i32 %44, %187
  %189 = or i32 %35, %73
  %190 = and i32 %11, %80
  %191 = and i32 %63, %0
  %192 = shl i32 %191, 1
  %193 = and i32 %80, %16
  %194 = xor i32 %70, -1
  %195 = xor i32 %158, %194
  %196 = or i32 %39, %32
  %197 = or i32 %53, %77
  %198 = or i32 %73, %28
  %199 = and i32 %15, %58
  %200 = and i32 %15, %32
  %201 = xor i32 %135, %194
  %202 = or i32 %16, %32
  %203 = or i32 %29, %35
  %204 = xor i32 %98, %2
  %205 = or i32 %66, %1
  %206 = xor i32 %73, -1
  %207 = and i32 %16, %206
  %208 = shl i32 %207, 1
  %209 = xor i32 %110, %1
  %210 = or i32 %73, %12
  %211 = and i32 %65, %31
  %212 = or i32 %73, %16
  %213 = shl i32 %212, 1
  %214 = xor i32 %206, %2
  %215 = or i32 %98, %2
  %216 = xor i32 %75, -1
  %217 = or i32 %44, %216
  %218 = and i32 %38, %1
  %219 = or i32 %60, %1
  %220 = or i32 %44, %71
  %221 = xor i32 %81, %2
  %222 = xor i32 %35, %0
  %223 = shl i32 %222, 2
  %224 = xor i32 %115, %0
  %225 = xor i32 %29, %63
  %226 = shl i32 %225, 1
  %227 = shl i32 %88, 1
  %228 = and i32 %61, %0
  %229 = or i32 %87, %228
  %230 = and i32 %11, %56
  %231 = and i32 %58, %2
  %232 = add i32 %35, 1
  %233 = xor i32 %228, %89
  %234 = xor i32 %71, -1
  %235 = xor i32 %44, %234
  %236 = or i32 %28, %98
  %237 = xor i32 %60, %1
  %238 = or i32 %70, %234
  %239 = or i32 %11, %73
  %240 = or i32 %31, %66
  %241 = or i32 %29, %14
  %242 = or i32 %39, %14
  %243 = xor i32 %63, %53
  %244 = add i32 %15, 1
  %245 = xor i32 %61, %53
  %246 = shl i32 %245, 1
  %247 = or i32 %15, %73
  %248 = and i32 %28, %58
  %249 = or i32 %53, %16
  %250 = xor i32 %38, %53
  %251 = and i32 %11, %58
  %252 = shl i32 %251, 1
  %253 = shl i32 %0, 1
  %254 = or i32 %15, %32
  %255 = shl i32 %254, 1
  %256 = or i32 %32, %2
  %257 = or i32 %66, %14
  %258 = or i32 %60, %169
  %259 = or i32 %15, %14
  %260 = shl i32 %259, 2
  %261 = xor i32 %73, %36
  %262 = xor i32 %138, %194
  %263 = or i32 %66, %32
  %264 = or i32 %29, %77
  %265 = shl i32 %264, 1
  %266 = or i32 %12, %98
  %267 = or i32 %81, %2
  %268 = xor i32 %60, %80
  %269 = or i32 %63, %0
  %270 = shl i32 %269, 1
  %271 = or i32 %31, %16
  %272 = shl i32 %271, 1
  %273 = and i32 %110, %32
  %274 = and i32 %15, %206
  %275 = shl i32 %274, 1
  %276 = and i32 %169, %10
  %277 = and i32 %91, %10
  %278 = shl i32 %277, 3
  %279 = and i32 %169, %0
  %280 = and i32 %91, %0
  %281 = shl i32 %280, 1
  %282 = and i32 %77, %0
  %283 = shl i32 %70, 2
  %284 = add i32 %61, %110
  %285 = add i32 %284, %167
  %286 = add i32 %285, %69
  %287 = add i32 %286, %218
  %288 = add i32 %287, %75
  %289 = add i32 %288, %211
  %290 = add i32 %289, %210
  %291 = add i32 %290, %209
  %292 = add i32 %291, %190
  %293 = add i32 %292, %168
  %294 = add i32 %293, %166
  %295 = add i32 %294, %156
  %296 = add i32 %295, %114
  %297 = add i32 %296, %82
  %298 = add i32 %297, %64
  %299 = add i32 %298, %42
  %300 = add i32 %299, %27
  %301 = shl i32 %300, 1
  %302 = sub i32 %282, %131
  %303 = add i32 %302, %87
  %304 = add i32 %303, %120
  %305 = add i32 %304, %24
  %306 = mul i32 %305, 5
  %307 = sub i32 %84, %53
  %308 = add i32 %307, %97
  %309 = add i32 %308, %22
  %310 = mul i32 %309, 3
  %311 = add i32 %279, %276
  %312 = mul i32 %311, 11
  %313 = add i32 %237, %117
  %314 = shl i32 %313, 2
  %315 = sub i32 %150, %0
  %316 = sub i32 %315, %1
  %317 = sub i32 %316, %253
  %318 = sub i32 %317, %56
  %319 = add i32 %318, %104
  %320 = add i32 %319, %2
  %321 = add i32 %320, %58
  %322 = add i32 %321, %32
  %323 = sub i32 %322, %73
  %324 = add i32 %323, %98
  %325 = add i32 %324, %3
  %326 = sub i32 %325, %54
  %327 = sub i32 %326, %55
  %328 = sub i32 %327, %57
  %329 = add i32 %328, %74
  %330 = add i32 %329, %60
  %331 = add i32 %330, %96
  %332 = sub i32 %331, %101
  %333 = sub i32 %332, %113
  %334 = add i32 %333, %115
  %335 = sub i32 %334, %122
  %336 = add i32 %335, %65
  %337 = sub i32 %336, %128
  %338 = sub i32 %337, %38
  %339 = sub i32 %338, %129
  %340 = add i32 %339, %133
  %341 = add i32 %340, %137
  %342 = add i32 %341, %161
  %343 = sub i32 %342, %165
  %344 = sub i32 %343, %171
  %345 = add i32 %344, %198
  %346 = sub i32 %345, %204
  %347 = add i32 %346, %214
  %348 = sub i32 %347, %215
  %349 = sub i32 %348, %221
  %350 = add i32 %349, %231
  %351 = add i32 %350, %35
  %352 = add i32 %351, %232
  %353 = add i32 %352, %236
  %354 = add i32 %353, %244
  %355 = sub i32 %354, %248
  %356 = add i32 %355, %256
  %357 = add i32 %356, %267
  %358 = add i32 %357, %33
  %359 = sub i32 %358, %34
  %360 = add i32 %359, %37
  %361 = add i32 %360, %40
  %362 = add i32 %361, %41
  %363 = sub i32 %362, %59
  %364 = add i32 %363, %62
  %365 = add i32 %364, %67
  %366 = add i32 %365, %68
  %367 = add i32 %366, %78
  %368 = add i32 %367, %79
  %369 = add i32 %368, %83
  %370 = sub i32 %369, %92
  %371 = sub i32 %370, %93
  %372 = sub i32 %371, %94
  %373 = sub i32 %372, %95
  %374 = sub i32 %373, %99
  %375 = add i32 %374, %100
  %376 = add i32 %375, %102
  %377 = add i32 %376, %103
  %378 = sub i32 %377, %111
  %379 = add i32 %378, %112
  %380 = add i32 %379, %116
  %381 = add i32 %380, %118
  %382 = sub i32 %381, %119
  %383 = add i32 %382, %121
  %384 = add i32 %383, %125
  %385 = add i32 %384, %126
  %386 = sub i32 %385, %127
  %387 = add i32 %386, %130
  %388 = add i32 %387, %132
  %389 = add i32 %388, %140
  %390 = add i32 %389, %143
  %391 = sub i32 %390, %144
  %392 = sub i32 %391, %145
  %393 = add i32 %392, %146
  %394 = sub i32 %393, %147
  %395 = add i32 %394, %148
  %396 = add i32 %395, %149
  %397 = add i32 %396, %154
  %398 = sub i32 %397, %155
  %399 = add i32 %398, %157
  %400 = sub i32 %399, %158
  %401 = sub i32 %400, %159
  %402 = sub i32 %401, %160
  %403 = sub i32 %402, %162
  %404 = sub i32 %403, %163
  %405 = add i32 %404, %164
  %406 = add i32 %405, %170
  %407 = sub i32 %406, %172
  %408 = sub i32 %407, %176
  %409 = add i32 %408, %177
  %410 = add i32 %409, %178
  %411 = sub i32 %410, %179
  %412 = sub i32 %411, %181
  %413 = sub i32 %412, %182
  %414 = add i32 %413, %185
  %415 = add i32 %414, %189
  %416 = add i32 %415, %193
  %417 = sub i32 %416, %196
  %418 = add i32 %417, %197
  %419 = add i32 %418, %199
  %420 = add i32 %419, %200
  %421 = add i32 %420, %202
  %422 = add i32 %421, %203
  %423 = sub i32 %422, %205
  %424 = add i32 %423, %107
  %425 = sub i32 %424, %219
  %426 = sub i32 %425, %224
  %427 = add i32 %426, %230
  %428 = add i32 %427, %239
  %429 = sub i32 %428, %240
  %430 = add i32 %429, %241
  %431 = sub i32 %430, %242
  %432 = add i32 %431, %243
  %433 = add i32 %432, %247
  %434 = add i32 %433, %249
  %435 = add i32 %434, %250
  %436 = sub i32 %435, %257
  %437 = sub i32 %436, %258
  %438 = add i32 %437, %261
  %439 = add i32 %438, %263
  %440 = sub i32 %439, %266
  %441 = sub i32 %440, %268
  %442 = sub i32 %441, %273
  %443 = add i32 %442, %8
  %444 = add i32 %443, %22
  %445 = add i32 %444, %48
  %446 = sub i32 %445, %72
  %447 = add i32 %446, %76
  %448 = sub i32 %447, %86
  %449 = sub i32 %448, %90
  %450 = sub i32 %449, %106
  %451 = sub i32 %450, %124
  %452 = add i32 %451, %134
  %453 = sub i32 %452, %136
  %454 = sub i32 %453, %139
  %455 = sub i32 %454, %142
  %456 = add i32 %455, %152
  %457 = add i32 %456, %153
  %458 = sub i32 %457, %174
  %459 = add i32 %458, %175
  %460 = sub i32 %459, %184
  %461 = add i32 %460, %186
  %462 = sub i32 %461, %188
  %463 = sub i32 %462, %192
  %464 = sub i32 %463, %195
  %465 = sub i32 %464, %201
  %466 = sub i32 %465, %208
  %467 = sub i32 %466, %213
  %468 = sub i32 %467, %217
  %469 = add i32 %468, %220
  %470 = sub i32 %469, %223
  %471 = sub i32 %470, %226
  %472 = sub i32 %471, %227
  %473 = add i32 %472, %229
  %474 = add i32 %473, %233
  %475 = sub i32 %474, %235
  %476 = sub i32 %475, %238
  %477 = sub i32 %476, %246
  %478 = sub i32 %477, %252
  %479 = sub i32 %478, %255
  %480 = sub i32 %479, %260
  %481 = sub i32 %480, %262
  %482 = sub i32 %481, %265
  %483 = sub i32 %482, %270
  %484 = sub i32 %483, %272
  %485 = sub i32 %484, %275
  %486 = sub i32 %485, %278
  %487 = sub i32 %486, %281
  %488 = sub i32 %487, %283
  %489 = sub i32 %488, %52
  %490 = sub i32 %489, %109
  %491 = add i32 %490, %312
  %492 = add i32 %491, %314
  %493 = add i32 %492, %26
  %494 = add i32 %493, %310
  %495 = add i32 %494, %306
  %496 = add i32 %495, %301
  %497 = icmp eq i32 %21, %496
  %498 = select i1 %497, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %499 = tail call i32 @puts(i8* nonnull dereferenceable(1) %498)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
