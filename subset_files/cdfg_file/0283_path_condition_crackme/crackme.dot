digraph "DFG for'crackme' function" {
	Node0x175cb20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x175cb90[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x175cc50[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x175ccc0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x175cd30[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x175cda0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x175ce10[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x175ce80[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x175cef0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x175cf60[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x175d000[shape=record, label="  %13 = shl i32 %7, 2"];
	Node0x175d0a0[shape=record, label="  %14 = shl i32 %0, 1"];
	Node0x175d110[shape=record, label="  %15 = add i32 %9, %12"];
	Node0x175d1b0[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x175d220[shape=record, label="  %17 = or i32 %14, 1"];
	Node0x175d290[shape=record, label="  %18 = sub i32 %17, %6"];
	Node0x175d300[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x175d370[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x175d3e0[shape=record, label="  %21 = add i32 %20, %4"];
	Node0x175d450[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0x175d4c0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x175d530[shape=record, label="  %24 = icmp eq i32 %23, %5"];
	Node0x16fd268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x175d9d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x175da20[shape=record, label="  ret void"];
	Node0x175cb20 -> Node0x175cb90;
	Node0x175cb90 -> Node0x175cc50;
	Node0x175cc50 -> Node0x175ccc0;
	Node0x175ccc0 -> Node0x175cd30;
	Node0x175cd30 -> Node0x175cda0;
	Node0x175cda0 -> Node0x175ce10;
	Node0x175ce10 -> Node0x175ce80;
	Node0x175ce80 -> Node0x175cef0;
	Node0x175cef0 -> Node0x175cf60;
	Node0x175cf60 -> Node0x175d000;
	Node0x175d000 -> Node0x175d0a0;
	Node0x175d0a0 -> Node0x175d110;
	Node0x175d110 -> Node0x175d1b0;
	Node0x175d1b0 -> Node0x175d220;
	Node0x175d220 -> Node0x175d290;
	Node0x175d290 -> Node0x175d300;
	Node0x175d300 -> Node0x175d370;
	Node0x175d370 -> Node0x175d3e0;
	Node0x175d3e0 -> Node0x175d450;
	Node0x175d450 -> Node0x175d4c0;
	Node0x175d4c0 -> Node0x175d530;
	Node0x175d530 -> Node0x16fd268;
	Node0x16fd268 -> Node0x175d9d0;
	Node0x175d9d0 -> Node0x175da20;
edge [color=red]
	Node0x175cb20 -> Node0x175cb90;
	Node0x175cb90 -> Node0x175cc50;
	Node0x175cd30 -> Node0x175cda0;
	Node0x175cb20 -> Node0x175ce10;
	Node0x175ce10 -> Node0x175ce80;
	Node0x175cef0 -> Node0x175cf60;
	Node0x175cd30 -> Node0x175d000;
	Node0x175ce10 -> Node0x175d110;
	Node0x175cf60 -> Node0x175d110;
	Node0x175d110 -> Node0x175d1b0;
	Node0x175d0a0 -> Node0x175d220;
	Node0x175d220 -> Node0x175d290;
	Node0x175ccc0 -> Node0x175d290;
	Node0x175d290 -> Node0x175d300;
	Node0x175cda0 -> Node0x175d300;
	Node0x175d300 -> Node0x175d370;
	Node0x175ce80 -> Node0x175d370;
	Node0x175d370 -> Node0x175d3e0;
	Node0x175cb90 -> Node0x175d3e0;
	Node0x175d3e0 -> Node0x175d450;
	Node0x175d000 -> Node0x175d450;
	Node0x175d450 -> Node0x175d4c0;
	Node0x175d1b0 -> Node0x175d4c0;
	Node0x175d4c0 -> Node0x175d530;
	Node0x175cc50 -> Node0x175d530;
	Node0x175d530 -> Node0x16fd268;
	Node0x16fd268 -> Node0x175d9d0;
}
