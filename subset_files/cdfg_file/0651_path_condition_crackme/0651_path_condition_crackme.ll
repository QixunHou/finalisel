; ModuleID = '../.././c_source_file/0651_path_condition_crackme.c'
source_filename = "../.././c_source_file/0651_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, %2
  %10 = and i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %11, %2
  %13 = sub i32 %12, %9
  %14 = xor i32 %5, -1
  %15 = xor i32 %4, %3
  %16 = or i32 %15, %14
  %17 = sub i32 %13, %16
  %18 = and i32 %7, %2
  %19 = and i32 %18, %0
  %20 = or i32 %7, %2
  %21 = xor i32 %20, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %19, %22
  %24 = and i32 %11, %2
  %25 = xor i32 %2, -1
  %26 = and i32 %25, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %1, %0
  %29 = xor i32 %28, -1
  %30 = and i32 %27, %29
  %31 = and i32 %2, %1
  %32 = and i32 %31, %0
  %33 = xor i32 %2, %1
  %34 = xor i32 %33, %0
  %35 = xor i32 %32, %34
  %36 = xor i32 %0, -1
  %37 = or i32 %25, %1
  %38 = or i32 %37, %36
  %39 = and i32 %31, %36
  %40 = or i32 %2, %1
  %41 = and i32 %40, %0
  %42 = or i32 %39, %41
  %43 = and i32 %25, %29
  %44 = xor i32 %8, -1
  %45 = xor i32 %37, -1
  %46 = or i32 %45, %0
  %47 = and i32 %7, %0
  %48 = xor i32 %47, -1
  %49 = xor i32 %48, %2
  %50 = xor i32 %31, -1
  %51 = or i32 %50, %0
  %52 = xor i32 %31, %0
  %53 = xor i32 %33, -1
  %54 = add i32 %33, 1
  %55 = or i32 %10, %45
  %56 = xor i32 %40, %0
  %57 = or i32 %25, %0
  %58 = xor i32 %57, %1
  %59 = shl i32 %58, 1
  %60 = or i32 %45, %36
  %61 = or i32 %2, %0
  %62 = and i32 %61, %29
  %63 = xor i32 %37, %0
  %64 = and i32 %53, %0
  %65 = and i32 %57, %1
  %66 = or i32 %44, %2
  %67 = shl i32 %66, 1
  %68 = xor i32 %57, %10
  %69 = or i32 %32, %56
  %70 = xor i32 %2, %0
  %71 = xor i32 %70, -1
  %72 = and i32 %71, %29
  %73 = and i32 %20, %36
  %74 = or i32 %19, %73
  %75 = shl i32 %74, 1
  %76 = or i32 %26, %28
  %77 = and i32 %2, %0
  %78 = or i32 %77, %29
  %79 = and i32 %18, %36
  %80 = and i32 %20, %0
  %81 = or i32 %79, %80
  %82 = or i32 %40, %36
  %83 = or i32 %1, %0
  %84 = and i32 %33, %83
  %85 = or i32 %19, %21
  %86 = shl i32 %71, 1
  %87 = xor i32 %40, -1
  %88 = or i32 %77, %87
  %89 = and i32 %33, %0
  %90 = xor i32 %89, 2147483647
  %91 = xor i32 %90, %39
  %92 = shl i32 %91, 1
  %93 = and i32 %50, %36
  %94 = and i32 %53, %11
  %95 = xor i32 %77, -1
  %96 = or i32 %71, %7
  %97 = or i32 %33, %47
  %98 = and i32 %28, %2
  %99 = and i32 %57, %7
  %100 = and i32 %70, %28
  %101 = or i32 %53, %44
  %102 = or i32 %70, %10
  %103 = and i32 %71, %11
  %104 = or i32 %28, %2
  %105 = shl i32 %104, 1
  %106 = xor i32 %77, %8
  %107 = shl i32 %106, 2
  %108 = and i32 %50, %0
  %109 = or i32 %47, %25
  %110 = and i32 %53, %48
  %111 = and i32 %71, %48
  %112 = or i32 %53, %36
  %113 = or i32 %10, %2
  %114 = and i32 %28, %27
  %115 = xor i32 %44, %2
  %116 = or i32 %77, %28
  %117 = shl i32 %25, 1
  %118 = or i32 %77, %1
  %119 = and i32 %25, %1
  %120 = xor i32 %119, -1
  %121 = or i32 %120, %36
  %122 = or i32 %10, %53
  %123 = shl i32 %122, 1
  %124 = and i32 %40, %36
  %125 = and i32 %61, %28
  %126 = or i32 %77, %44
  %127 = and i32 %95, %7
  %128 = and i32 %8, %2
  %129 = shl i32 %128, 1
  %130 = xor i32 %26, %37
  %131 = or i32 %70, %28
  %132 = or i32 %39, %89
  %133 = xor i32 %41, -1
  %134 = xor i32 %39, %133
  %135 = or i32 %71, %29
  %136 = and i32 %95, %1
  %137 = xor i32 %124, -1
  %138 = xor i32 %32, %137
  %139 = xor i32 %26, %50
  %140 = and i32 %95, %29
  %141 = xor i32 %53, %0
  %142 = and i32 %70, %83
  %143 = or i32 %77, %7
  %144 = xor i32 %83, -1
  %145 = or i32 %71, %144
  %146 = xor i32 %73, 2147483647
  %147 = xor i32 %146, %19
  %148 = shl i32 %147, 1
  %149 = xor i32 %77, %40
  %150 = or i32 %33, %10
  %151 = or i32 %31, %36
  %152 = and i32 %70, %8
  %153 = xor i32 %34, -1
  %154 = xor i32 %19, %153
  %155 = and i32 %70, %11
  %156 = add i32 %26, 1
  %157 = xor i32 %26, %1
  %158 = xor i32 %10, %2
  %159 = xor i32 %61, -1
  %160 = or i32 %159, %1
  %161 = or i32 %10, %71
  %162 = xor i32 %61, %1
  %163 = or i32 %31, %0
  %164 = or i32 %159, %29
  %165 = xor i32 %159, %1
  %166 = and i32 %83, %25
  %167 = or i32 %33, %44
  %168 = or i32 %77, %144
  %169 = or i32 %70, %44
  %170 = and i32 %29, %2
  %171 = and i32 %70, %48
  %172 = shl i32 %171, 1
  %173 = add i32 %10, 1
  %174 = or i32 %53, %0
  %175 = xor i32 %32, %174
  %176 = xor i32 %95, %1
  %177 = and i32 %83, %53
  %178 = xor i32 %57, -1
  %179 = or i32 %178, %7
  %180 = and i32 %83, %71
  %181 = or i32 %10, %25
  %182 = shl i32 %181, 1
  %183 = xor i32 %37, %10
  %184 = and i32 %71, %1
  %185 = xor i32 %119, %0
  %186 = xor i32 %45, %0
  %187 = and i32 %8, %25
  %188 = or i32 %53, %144
  %189 = shl i32 %188, 1
  %190 = or i32 %28, %178
  %191 = add i32 %57, 1
  %192 = and i32 %8, %53
  %193 = shl i32 %192, 1
  %194 = or i32 %26, %1
  %195 = and i32 %71, %7
  %196 = and i32 %57, %29
  %197 = and i32 %33, %48
  %198 = xor i32 %27, %1
  %199 = or i32 %119, %47
  %200 = and i32 %27, %7
  %201 = shl i32 %200, 1
  %202 = or i32 %47, %53
  %203 = and i32 %83, %2
  %204 = or i32 %70, %1
  %205 = or i32 %32, %153
  %206 = or i32 %10, %159
  %207 = shl i32 %206, 2
  %208 = and i32 %8, %71
  %209 = or i32 %70, %47
  %210 = or i32 %29, %2
  %211 = or i32 %33, %36
  %212 = or i32 %77, %119
  %213 = or i32 %32, %124
  %214 = and i32 %53, %36
  %215 = xor i32 %47, %2
  %216 = and i32 %120, %0
  %217 = or i32 %37, %0
  %218 = and i32 %33, %8
  %219 = or i32 %25, %29
  %220 = or i32 %87, %36
  %221 = xor i32 %50, %0
  %222 = and i32 %28, %95
  %223 = xor i32 %47, %120
  %224 = or i32 %25, %144
  %225 = or i32 %10, %87
  %226 = xor i32 %77, %1
  %227 = or i32 %119, %0
  %228 = and i32 %28, %25
  %229 = xor i32 %80, 2147483647
  %230 = xor i32 %229, %79
  %231 = shl i32 %230, 1
  %232 = and i32 %57, %28
  %233 = or i32 %19, %34
  %234 = or i32 %40, %0
  %235 = or i32 %33, %0
  %236 = and i32 %87, %36
  %237 = mul i32 %236, 30
  %238 = and i32 %119, %36
  %239 = mul i32 %238, 29
  %240 = and i32 %87, %0
  %241 = and i32 %119, %0
  %242 = and i32 %45, %36
  %243 = mul i32 %39, 15
  %244 = and i32 %45, %0
  %245 = xor i32 %3, -1
  %246 = and i32 %245, %4
  %247 = or i32 %246, %14
  %248 = and i32 %5, %3
  %249 = and i32 %248, %4
  %250 = xor i32 %4, -1
  %251 = xor i32 %5, %3
  %252 = and i32 %251, %250
  %253 = xor i32 %249, -1
  %254 = xor i32 %252, %253
  %255 = or i32 %245, %4
  %256 = xor i32 %255, -1
  %257 = xor i32 %5, %4
  %258 = or i32 %257, %256
  %259 = or i32 %246, %5
  %260 = and i32 %14, %3
  %261 = xor i32 %260, -1
  %262 = or i32 %261, %4
  %263 = or i32 %5, %3
  %264 = xor i32 %263, -1
  %265 = or i32 %264, %4
  %266 = xor i32 %249, %265
  %267 = and i32 %4, %3
  %268 = or i32 %14, %3
  %269 = xor i32 %268, -1
  %270 = or i32 %267, %269
  %271 = shl i32 %270, 1
  %272 = or i32 %257, %267
  %273 = xor i32 %257, -1
  %274 = or i32 %246, %273
  %275 = or i32 %5, %4
  %276 = xor i32 %275, -1
  %277 = shl i32 %276, 1
  %278 = xor i32 %15, -1
  %279 = and i32 %278, %5
  %280 = or i32 %273, %256
  %281 = or i32 %4, %3
  %282 = xor i32 %281, %5
  %283 = shl i32 %282, 1
  %284 = xor i32 %248, -1
  %285 = and i32 %284, %4
  %286 = or i32 %14, %278
  %287 = and i32 %255, %5
  %288 = or i32 %257, %3
  %289 = xor i32 %263, %4
  %290 = xor i32 %289, %253
  %291 = xor i32 %251, -1
  %292 = and i32 %291, %250
  %293 = add i32 %251, 1
  %294 = or i32 %249, %252
  %295 = or i32 %260, %4
  %296 = and i32 %257, %15
  %297 = and i32 %245, %5
  %298 = and i32 %297, %250
  %299 = or i32 %245, %5
  %300 = and i32 %299, %4
  %301 = xor i32 %300, -1
  %302 = xor i32 %298, %301
  %303 = or i32 %276, %278
  %304 = or i32 %248, %246
  %305 = shl i32 %304, 1
  %306 = and i32 %14, %4
  %307 = or i32 %306, %3
  %308 = and i32 %15, %5
  %309 = shl i32 %308, 1
  %310 = xor i32 %281, -1
  %311 = or i32 %14, %310
  %312 = and i32 %250, %5
  %313 = or i32 %312, %278
  %314 = and i32 %297, %4
  %315 = xor i32 %299, %250
  %316 = xor i32 %315, %314
  %317 = xor i32 %246, %284
  %318 = shl i32 %317, 1
  %319 = or i32 %269, %250
  %320 = and i32 %281, %14
  %321 = and i32 %263, %4
  %322 = and i32 %261, %4
  %323 = and i32 %273, %3
  %324 = or i32 %273, %3
  %325 = and i32 %268, %250
  %326 = xor i32 %264, %4
  %327 = shl i32 %326, 1
  %328 = or i32 %312, %3
  %329 = or i32 %257, %246
  %330 = xor i32 %291, %4
  %331 = or i32 %312, %245
  %332 = or i32 %291, %4
  %333 = and i32 %264, %250
  %334 = mul i32 %333, 9
  %335 = and i32 %260, %250
  %336 = and i32 %264, %4
  %337 = and i32 %260, %4
  %338 = mul i32 %337, 7
  %339 = and i32 %269, %250
  %340 = mul i32 %339, 6
  %341 = and i32 %248, %250
  %342 = and i32 %269, %4
  %343 = add i32 %10, %29
  %344 = add i32 %343, %83
  %345 = add i32 %344, %215
  %346 = add i32 %345, %95
  %347 = add i32 %346, %218
  %348 = add i32 %347, %209
  %349 = add i32 %348, %194
  %350 = add i32 %349, %179
  %351 = add i32 %350, %168
  %352 = add i32 %351, %136
  %353 = add i32 %352, %96
  %354 = add i32 %353, %51
  %355 = add i32 %354, %38
  %356 = add i32 %355, %14
  %357 = add i32 %356, %85
  %358 = add i32 %357, %275
  %359 = add i32 %358, %287
  %360 = add i32 %359, %285
  %361 = add i32 %360, %330
  %362 = add i32 %361, %272
  %363 = shl i32 %362, 1
  %364 = add i32 %203, %173
  %365 = add i32 %364, %77
  %366 = add i32 %365, %41
  %367 = sub i32 %366, %130
  %368 = sub i32 %367, %63
  %369 = sub i32 %368, %262
  %370 = sub i32 %369, %324
  %371 = mul i32 %370, 5
  %372 = sub i32 %342, %336
  %373 = mul i32 %372, 3
  %374 = add i32 %341, %335
  %375 = shl i32 %374, 3
  %376 = add i32 %244, %241
  %377 = mul i32 %376, -13
  %378 = add i32 %249, %240
  %379 = mul i32 %378, 10
  %380 = add i32 %198, %158
  %381 = shl i32 %380, 2
  %382 = add i32 %0, 2
  %383 = add i32 %382, %7
  %384 = add i32 %383, %44
  %385 = sub i32 %384, %2
  %386 = add i32 %385, %24
  %387 = add i32 %386, %43
  %388 = sub i32 %387, %49
  %389 = add i32 %388, %54
  %390 = sub i32 %389, %98
  %391 = sub i32 %390, %109
  %392 = sub i32 %391, %113
  %393 = sub i32 %392, %115
  %394 = sub i32 %393, %117
  %395 = add i32 %394, %119
  %396 = sub i32 %395, %33
  %397 = add i32 %396, %156
  %398 = add i32 %397, %166
  %399 = add i32 %398, %87
  %400 = add i32 %399, %170
  %401 = add i32 %400, %57
  %402 = sub i32 %401, %187
  %403 = add i32 %402, %191
  %404 = add i32 %403, %210
  %405 = sub i32 %404, %70
  %406 = sub i32 %405, %219
  %407 = add i32 %406, %31
  %408 = sub i32 %407, %37
  %409 = add i32 %408, %224
  %410 = add i32 %409, %228
  %411 = sub i32 %410, %30
  %412 = add i32 %411, %46
  %413 = sub i32 %412, %52
  %414 = add i32 %413, %55
  %415 = sub i32 %414, %56
  %416 = add i32 %415, %60
  %417 = sub i32 %416, %62
  %418 = add i32 %417, %64
  %419 = add i32 %418, %65
  %420 = sub i32 %419, %67
  %421 = sub i32 %420, %68
  %422 = sub i32 %421, %72
  %423 = add i32 %422, %76
  %424 = sub i32 %423, %78
  %425 = sub i32 %424, %82
  %426 = add i32 %425, %84
  %427 = sub i32 %426, %86
  %428 = add i32 %427, %88
  %429 = add i32 %428, %93
  %430 = sub i32 %429, %94
  %431 = add i32 %430, %97
  %432 = sub i32 %431, %99
  %433 = sub i32 %432, %100
  %434 = add i32 %433, %101
  %435 = sub i32 %434, %89
  %436 = add i32 %435, %102
  %437 = sub i32 %436, %103
  %438 = sub i32 %437, %105
  %439 = sub i32 %438, %108
  %440 = add i32 %439, %110
  %441 = add i32 %440, %111
  %442 = sub i32 %441, %112
  %443 = sub i32 %442, %114
  %444 = sub i32 %443, %116
  %445 = sub i32 %444, %118
  %446 = add i32 %445, %121
  %447 = add i32 %446, %124
  %448 = add i32 %447, %125
  %449 = add i32 %448, %126
  %450 = add i32 %449, %127
  %451 = sub i32 %450, %129
  %452 = sub i32 %451, %131
  %453 = sub i32 %452, %135
  %454 = add i32 %453, %139
  %455 = add i32 %454, %140
  %456 = sub i32 %455, %141
  %457 = add i32 %456, %142
  %458 = sub i32 %457, %143
  %459 = add i32 %458, %145
  %460 = sub i32 %459, %149
  %461 = sub i32 %460, %150
  %462 = sub i32 %461, %151
  %463 = sub i32 %462, %152
  %464 = sub i32 %463, %155
  %465 = sub i32 %464, %157
  %466 = sub i32 %465, %160
  %467 = add i32 %466, %161
  %468 = sub i32 %467, %162
  %469 = add i32 %468, %163
  %470 = sub i32 %469, %164
  %471 = sub i32 %470, %165
  %472 = sub i32 %471, %167
  %473 = add i32 %472, %169
  %474 = sub i32 %473, %176
  %475 = sub i32 %474, %177
  %476 = add i32 %475, %180
  %477 = sub i32 %476, %182
  %478 = sub i32 %477, %183
  %479 = sub i32 %478, %184
  %480 = add i32 %479, %185
  %481 = add i32 %480, %186
  %482 = add i32 %481, %190
  %483 = add i32 %482, %195
  %484 = add i32 %483, %196
  %485 = add i32 %484, %197
  %486 = add i32 %485, %199
  %487 = add i32 %486, %202
  %488 = add i32 %487, %204
  %489 = add i32 %488, %208
  %490 = add i32 %489, %211
  %491 = sub i32 %490, %212
  %492 = add i32 %491, %214
  %493 = add i32 %492, %216
  %494 = sub i32 %493, %217
  %495 = sub i32 %494, %220
  %496 = add i32 %495, %221
  %497 = sub i32 %496, %222
  %498 = sub i32 %497, %223
  %499 = add i32 %498, %225
  %500 = sub i32 %499, %226
  %501 = add i32 %500, %227
  %502 = sub i32 %501, %232
  %503 = add i32 %502, %234
  %504 = sub i32 %503, %235
  %505 = add i32 %504, %242
  %506 = sub i32 %505, %32
  %507 = sub i32 %506, %23
  %508 = sub i32 %507, %35
  %509 = sub i32 %508, %42
  %510 = sub i32 %509, %59
  %511 = add i32 %510, %69
  %512 = add i32 %511, %81
  %513 = sub i32 %512, %107
  %514 = sub i32 %513, %123
  %515 = add i32 %514, %132
  %516 = sub i32 %515, %134
  %517 = sub i32 %516, %138
  %518 = add i32 %517, %154
  %519 = sub i32 %518, %172
  %520 = add i32 %519, %175
  %521 = sub i32 %520, %189
  %522 = sub i32 %521, %193
  %523 = sub i32 %522, %201
  %524 = sub i32 %523, %205
  %525 = sub i32 %524, %207
  %526 = sub i32 %525, %213
  %527 = add i32 %526, %233
  %528 = add i32 %527, %237
  %529 = add i32 %528, %239
  %530 = add i32 %529, %243
  %531 = sub i32 %530, %15
  %532 = add i32 %531, %255
  %533 = sub i32 %532, %267
  %534 = sub i32 %533, %75
  %535 = add i32 %534, %247
  %536 = sub i32 %535, %259
  %537 = sub i32 %536, %279
  %538 = sub i32 %537, %286
  %539 = add i32 %538, %261
  %540 = add i32 %539, %293
  %541 = sub i32 %540, %257
  %542 = sub i32 %541, %311
  %543 = add i32 %542, %320
  %544 = add i32 %543, %377
  %545 = add i32 %544, %381
  %546 = sub i32 %545, %92
  %547 = sub i32 %546, %148
  %548 = sub i32 %547, %231
  %549 = sub i32 %548, %258
  %550 = add i32 %549, %274
  %551 = sub i32 %550, %277
  %552 = sub i32 %551, %280
  %553 = sub i32 %552, %283
  %554 = add i32 %553, %288
  %555 = sub i32 %554, %292
  %556 = add i32 %555, %295
  %557 = add i32 %556, %296
  %558 = sub i32 %557, %303
  %559 = sub i32 %558, %265
  %560 = sub i32 %559, %307
  %561 = sub i32 %560, %309
  %562 = add i32 %561, %313
  %563 = add i32 %562, %289
  %564 = add i32 %563, %319
  %565 = add i32 %564, %321
  %566 = add i32 %565, %322
  %567 = sub i32 %566, %323
  %568 = sub i32 %567, %325
  %569 = sub i32 %568, %328
  %570 = sub i32 %569, %329
  %571 = add i32 %570, %331
  %572 = add i32 %571, %332
  %573 = add i32 %572, %254
  %574 = sub i32 %573, %266
  %575 = sub i32 %574, %271
  %576 = add i32 %575, %290
  %577 = add i32 %576, %294
  %578 = add i32 %577, %302
  %579 = sub i32 %578, %305
  %580 = add i32 %579, %316
  %581 = sub i32 %580, %318
  %582 = sub i32 %581, %327
  %583 = add i32 %582, %334
  %584 = add i32 %583, %338
  %585 = add i32 %584, %340
  %586 = add i32 %585, %373
  %587 = add i32 %586, %375
  %588 = add i32 %587, %379
  %589 = add i32 %588, %371
  %590 = add i32 %589, %363
  %591 = icmp eq i32 %17, %590
  %592 = select i1 %591, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %593 = tail call i32 @puts(i8* nonnull dereferenceable(1) %592)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
