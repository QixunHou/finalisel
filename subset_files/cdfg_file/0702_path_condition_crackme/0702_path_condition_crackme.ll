; ModuleID = '../.././c_source_file/0702_path_condition_crackme.c'
source_filename = "../.././c_source_file/0702_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = and i32 %7, %5
  %9 = xor i32 %2, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %11, %1
  %13 = add i32 %8, %12
  %14 = sub i32 0, %13
  %15 = or i32 %2, %1
  %16 = xor i32 %15, -1
  %17 = or i32 %4, %16
  %18 = or i32 %1, %0
  %19 = and i32 %18, %2
  %20 = xor i32 %2, %0
  %21 = and i32 %20, %5
  %22 = xor i32 %1, -1
  %23 = or i32 %22, %0
  %24 = and i32 %6, %23
  %25 = and i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %1
  %28 = xor i32 %0, -1
  %29 = and i32 %2, %1
  %30 = and i32 %29, %28
  %31 = and i32 %15, %0
  %32 = xor i32 %30, -1
  %33 = xor i32 %31, %32
  %34 = or i32 %9, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %1, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %35, %37
  %39 = shl i32 %38, 1
  %40 = and i32 %6, %18
  %41 = and i32 %20, %23
  %42 = shl i32 %41, 1
  %43 = and i32 %9, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %44, %28
  %46 = shl i32 %45, 1
  %47 = and i32 %29, %0
  %48 = and i32 %6, %28
  %49 = xor i32 %47, -1
  %50 = xor i32 %48, %49
  %51 = or i32 %2, %0
  %52 = xor i32 %51, %1
  %53 = and i32 %22, %2
  %54 = and i32 %53, %0
  %55 = or i32 %22, %2
  %56 = xor i32 %55, %0
  %57 = or i32 %54, %56
  %58 = xor i32 %18, -1
  %59 = xor i32 %58, %2
  %60 = or i32 %16, %28
  %61 = and i32 %44, %28
  %62 = or i32 %10, %36
  %63 = and i32 %26, %22
  %64 = xor i32 %25, %23
  %65 = and i32 %20, %36
  %66 = and i32 %22, %0
  %67 = xor i32 %66, -1
  %68 = and i32 %20, %67
  %69 = xor i32 %66, %44
  %70 = or i32 %25, %1
  %71 = xor i32 %20, -1
  %72 = and i32 %71, %5
  %73 = or i32 %66, %9
  %74 = or i32 %9, %37
  %75 = or i32 %71, %1
  %76 = xor i32 %51, -1
  %77 = or i32 %36, %76
  %78 = or i32 %29, %0
  %79 = add i32 %36, 1
  %80 = or i32 %9, %1
  %81 = and i32 %80, %0
  %82 = and i32 %15, %28
  %83 = xor i32 %6, %0
  %84 = xor i32 %47, %83
  %85 = xor i32 %34, %4
  %86 = and i32 %18, %9
  %87 = or i32 %20, %36
  %88 = xor i32 %25, %18
  %89 = xor i32 %56, 2147483647
  %90 = xor i32 %89, %54
  %91 = shl i32 %90, 1
  %92 = and i32 %6, %0
  %93 = or i32 %30, %92
  %94 = and i32 %36, %2
  %95 = add i32 %34, 1
  %96 = xor i32 %25, %1
  %97 = xor i32 %80, -1
  %98 = or i32 %10, %97
  %99 = xor i32 %15, %0
  %100 = or i32 %10, %29
  %101 = or i32 %97, %0
  %102 = or i32 %36, %9
  %103 = and i32 %53, %28
  %104 = or i32 %6, %28
  %105 = xor i32 %104, 2147483647
  %106 = or i32 %105, %103
  %107 = add i32 %25, 1
  %108 = or i32 %43, %66
  %109 = or i32 %20, %66
  %110 = xor i32 %26, %1
  %111 = and i32 %71, %1
  %112 = shl i32 %111, 1
  %113 = or i32 %80, %0
  %114 = xor i32 %18, %2
  %115 = xor i32 %44, %0
  %116 = xor i32 %29, %0
  %117 = or i32 %10, %22
  %118 = and i32 %23, %71
  %119 = xor i32 %97, %0
  %120 = xor i32 %5, %2
  %121 = or i32 %76, %22
  %122 = or i32 %47, %99
  %123 = or i32 %66, %2
  %124 = and i32 %51, %37
  %125 = and i32 %55, %0
  %126 = or i32 %103, %125
  %127 = xor i32 %125, -1
  %128 = xor i32 %103, %127
  %129 = xor i32 %83, -1
  %130 = xor i32 %54, %129
  %131 = shl i32 %130, 1
  %132 = xor i32 %34, %1
  %133 = or i32 %25, %43
  %134 = or i32 %9, %58
  %135 = shl i32 %134, 2
  %136 = or i32 %71, %58
  %137 = or i32 %37, %2
  %138 = shl i32 %137, 1
  %139 = add i32 %20, 1
  %140 = and i32 %36, %9
  %141 = and i32 %51, %1
  %142 = or i32 %29, %66
  %143 = and i32 %20, %37
  %144 = xor i32 %80, %4
  %145 = and i32 %11, %1
  %146 = add i32 %6, 1
  %147 = or i32 %20, %1
  %148 = xor i32 %66, %2
  %149 = or i32 %4, %9
  %150 = xor i32 %25, %15
  %151 = shl i32 %150, 1
  %152 = and i32 %9, %67
  %153 = and i32 %5, %2
  %154 = xor i32 %29, -1
  %155 = shl i32 %154, 1
  %156 = and i32 %36, %11
  %157 = or i32 %4, %35
  %158 = or i32 %76, %1
  %159 = and i32 %18, %7
  %160 = or i32 %29, %28
  %161 = shl i32 %160, 2
  %162 = and i32 %23, %7
  %163 = or i32 %10, %37
  %164 = and i32 %154, %0
  %165 = shl i32 %164, 1
  %166 = or i32 %10, %1
  %167 = shl i32 %166, 1
  %168 = and i32 %7, %28
  %169 = or i32 %35, %22
  %170 = xor i32 %35, %1
  %171 = or i32 %7, %28
  %172 = and i32 %51, %22
  %173 = and i32 %9, %37
  %174 = or i32 %35, %1
  %175 = or i32 %30, %31
  %176 = shl i32 %175, 1
  %177 = and i32 %80, %28
  %178 = or i32 %66, %7
  %179 = shl i32 %76, 1
  %180 = xor i32 %99, %49
  %181 = and i32 %154, %28
  %182 = or i32 %20, %22
  %183 = or i32 %58, %2
  %184 = shl i32 %183, 1
  %185 = xor i32 %92, %32
  %186 = and i32 %7, %0
  %187 = xor i32 %4, %2
  %188 = shl i32 %187, 1
  %189 = xor i32 %76, %1
  %190 = or i32 %4, %76
  %191 = or i32 %4, %2
  %192 = and i32 %55, %28
  %193 = or i32 %54, %192
  %194 = and i32 %11, %37
  %195 = shl i32 %194, 1
  %196 = xor i32 %23, -1
  %197 = or i32 %6, %196
  %198 = or i32 %25, %36
  %199 = xor i32 %43, %0
  %200 = and i32 %11, %22
  %201 = and i32 %44, %0
  %202 = or i32 %43, %0
  %203 = or i32 %7, %0
  %204 = or i32 %25, %196
  %205 = or i32 %154, %0
  %206 = and i32 %34, %22
  %207 = and i32 %20, %1
  %208 = shl i32 %207, 1
  %209 = shl i32 %25, 1
  %210 = and i32 %9, %5
  %211 = and i32 %23, %9
  %212 = shl i32 %211, 1
  %213 = and i32 %34, %37
  %214 = shl i32 %213, 1
  %215 = or i32 %36, %35
  %216 = or i32 %20, %37
  %217 = or i32 %76, %37
  %218 = or i32 %25, %22
  %219 = or i32 %71, %22
  %220 = xor i32 %196, %2
  %221 = and i32 %36, %71
  %222 = or i32 %25, %16
  %223 = xor i32 %103, %104
  %224 = shl i32 %223, 1
  %225 = or i32 %47, %48
  %226 = and i32 %67, %2
  %227 = or i32 %25, %58
  %228 = xor i32 %82, %49
  %229 = or i32 %20, %58
  %230 = or i32 %20, %4
  %231 = add i32 %10, 1
  %232 = xor i32 %51, %4
  %233 = xor i32 %154, %0
  %234 = and i32 %23, %2
  %235 = xor i32 %80, %0
  %236 = or i32 %6, %66
  %237 = add i32 %18, 1
  %238 = or i32 %47, %82
  %239 = or i32 %196, %2
  %240 = shl i32 %239, 1
  %241 = xor i32 %23, %2
  %242 = and i32 %37, %2
  %243 = or i32 %6, %0
  %244 = xor i32 %54, %243
  %245 = xor i32 %67, %2
  %246 = or i32 %80, %28
  %247 = or i32 %7, %196
  %248 = or i32 %4, %7
  %249 = or i32 %15, %28
  %250 = or i32 %47, %129
  %251 = or i32 %20, %196
  %252 = and i32 %18, %71
  %253 = and i32 %36, %26
  %254 = and i32 %7, %67
  %255 = xor i32 %25, %44
  %256 = or i32 %36, %71
  %257 = and i32 %6, %5
  %258 = and i32 %71, %67
  %259 = shl i32 %258, 1
  %260 = and i32 %16, %28
  %261 = mul i32 %260, 20
  %262 = and i32 %43, %28
  %263 = shl i32 %262, 1
  %264 = and i32 %16, %0
  %265 = mul i32 %264, -29
  %266 = and i32 %43, %0
  %267 = shl i32 %266, 3
  %268 = and i32 %97, %28
  %269 = mul i32 %268, 7
  %270 = mul i32 %30, 27
  %271 = and i32 %97, %0
  %272 = shl i32 %271, 1
  %273 = mul i32 %47, 14
  %274 = add i32 %20, %242
  %275 = add i32 %274, %10
  %276 = add i32 %275, %114
  %277 = add i32 %276, %73
  %278 = add i32 %277, %19
  %279 = add i32 %278, %247
  %280 = add i32 %279, %230
  %281 = add i32 %280, %221
  %282 = add i32 %281, %219
  %283 = add i32 %282, %143
  %284 = add i32 %283, %132
  %285 = add i32 %284, %100
  %286 = add i32 %285, %87
  %287 = add i32 %286, %64
  %288 = add i32 %287, %238
  %289 = add i32 %288, %106
  %290 = shl i32 %289, 1
  %291 = sub i32 %36, %29
  %292 = add i32 %291, %95
  %293 = sub i32 %292, %142
  %294 = add i32 %293, %190
  %295 = add i32 %294, %24
  %296 = mul i32 %295, 5
  %297 = add i32 %85, %59
  %298 = add i32 %297, %101
  %299 = add i32 %298, %62
  %300 = shl i32 %299, 2
  %301 = sub i32 %7, %94
  %302 = sub i32 %301, %256
  %303 = add i32 %302, %198
  %304 = add i32 %303, %174
  %305 = add i32 %304, %126
  %306 = sub i32 %305, %228
  %307 = mul i32 %306, 3
  %308 = add i32 %0, 2
  %309 = sub i32 %308, %1
  %310 = add i32 %309, %22
  %311 = add i32 %310, %18
  %312 = add i32 %311, %79
  %313 = add i32 %312, %67
  %314 = sub i32 %313, %66
  %315 = add i32 %314, %237
  %316 = add i32 %315, %74
  %317 = sub i32 %316, %86
  %318 = add i32 %317, %34
  %319 = add i32 %318, %102
  %320 = add i32 %319, %107
  %321 = add i32 %320, %120
  %322 = add i32 %321, %123
  %323 = add i32 %322, %139
  %324 = add i32 %323, %140
  %325 = add i32 %324, %146
  %326 = add i32 %325, %148
  %327 = add i32 %326, %149
  %328 = add i32 %327, %152
  %329 = sub i32 %328, %153
  %330 = sub i32 %329, %173
  %331 = sub i32 %330, %191
  %332 = sub i32 %331, %210
  %333 = sub i32 %332, %220
  %334 = sub i32 %333, %226
  %335 = add i32 %334, %231
  %336 = add i32 %335, %234
  %337 = add i32 %336, %241
  %338 = sub i32 %337, %245
  %339 = add i32 %338, %80
  %340 = add i32 %339, %17
  %341 = sub i32 %340, %21
  %342 = sub i32 %341, %27
  %343 = add i32 %342, %40
  %344 = add i32 %343, %52
  %345 = add i32 %344, %60
  %346 = add i32 %345, %61
  %347 = add i32 %346, %63
  %348 = sub i32 %347, %65
  %349 = sub i32 %348, %68
  %350 = sub i32 %349, %69
  %351 = add i32 %350, %70
  %352 = sub i32 %351, %72
  %353 = add i32 %352, %75
  %354 = add i32 %353, %77
  %355 = sub i32 %354, %78
  %356 = add i32 %355, %81
  %357 = add i32 %356, %82
  %358 = sub i32 %357, %88
  %359 = add i32 %358, %96
  %360 = sub i32 %359, %98
  %361 = sub i32 %360, %99
  %362 = add i32 %361, %108
  %363 = sub i32 %362, %109
  %364 = sub i32 %363, %110
  %365 = sub i32 %364, %113
  %366 = sub i32 %365, %115
  %367 = add i32 %366, %116
  %368 = sub i32 %367, %117
  %369 = sub i32 %368, %118
  %370 = add i32 %369, %119
  %371 = add i32 %370, %121
  %372 = sub i32 %371, %124
  %373 = sub i32 %372, %133
  %374 = sub i32 %373, %135
  %375 = sub i32 %374, %136
  %376 = sub i32 %375, %138
  %377 = sub i32 %376, %141
  %378 = sub i32 %377, %144
  %379 = add i32 %378, %145
  %380 = sub i32 %379, %147
  %381 = sub i32 %380, %155
  %382 = sub i32 %381, %156
  %383 = add i32 %382, %157
  %384 = add i32 %383, %48
  %385 = sub i32 %384, %158
  %386 = add i32 %385, %159
  %387 = add i32 %386, %162
  %388 = add i32 %387, %163
  %389 = sub i32 %388, %168
  %390 = add i32 %389, %169
  %391 = sub i32 %390, %170
  %392 = sub i32 %391, %171
  %393 = sub i32 %392, %172
  %394 = add i32 %393, %177
  %395 = sub i32 %394, %92
  %396 = sub i32 %395, %178
  %397 = sub i32 %396, %179
  %398 = add i32 %397, %181
  %399 = add i32 %398, %182
  %400 = sub i32 %399, %184
  %401 = add i32 %400, %186
  %402 = sub i32 %401, %188
  %403 = sub i32 %402, %189
  %404 = sub i32 %403, %197
  %405 = add i32 %404, %199
  %406 = add i32 %405, %200
  %407 = add i32 %406, %201
  %408 = sub i32 %407, %31
  %409 = sub i32 %408, %202
  %410 = sub i32 %409, %203
  %411 = sub i32 %410, %204
  %412 = sub i32 %411, %205
  %413 = add i32 %412, %206
  %414 = sub i32 %413, %209
  %415 = sub i32 %414, %212
  %416 = sub i32 %415, %215
  %417 = sub i32 %416, %216
  %418 = sub i32 %417, %217
  %419 = add i32 %418, %218
  %420 = add i32 %419, %104
  %421 = add i32 %420, %222
  %422 = sub i32 %421, %227
  %423 = add i32 %422, %229
  %424 = sub i32 %423, %232
  %425 = sub i32 %424, %233
  %426 = sub i32 %425, %235
  %427 = add i32 %426, %236
  %428 = sub i32 %427, %240
  %429 = add i32 %428, %246
  %430 = sub i32 %429, %248
  %431 = sub i32 %430, %249
  %432 = add i32 %431, %251
  %433 = add i32 %432, %252
  %434 = add i32 %433, %253
  %435 = sub i32 %434, %254
  %436 = add i32 %435, %255
  %437 = add i32 %436, %257
  %438 = sub i32 %437, %33
  %439 = sub i32 %438, %39
  %440 = sub i32 %439, %42
  %441 = sub i32 %440, %46
  %442 = sub i32 %441, %50
  %443 = sub i32 %442, %57
  %444 = sub i32 %443, %84
  %445 = sub i32 %444, %93
  %446 = sub i32 %445, %112
  %447 = sub i32 %446, %122
  %448 = sub i32 %447, %128
  %449 = sub i32 %448, %151
  %450 = sub i32 %449, %161
  %451 = sub i32 %450, %165
  %452 = sub i32 %451, %167
  %453 = sub i32 %452, %180
  %454 = sub i32 %453, %185
  %455 = add i32 %454, %193
  %456 = sub i32 %455, %195
  %457 = sub i32 %456, %208
  %458 = sub i32 %457, %214
  %459 = sub i32 %458, %225
  %460 = add i32 %459, %244
  %461 = sub i32 %460, %250
  %462 = sub i32 %461, %259
  %463 = add i32 %462, %261
  %464 = sub i32 %463, %263
  %465 = add i32 %464, %265
  %466 = add i32 %465, %267
  %467 = add i32 %466, %269
  %468 = add i32 %467, %270
  %469 = sub i32 %468, %272
  %470 = add i32 %469, %273
  %471 = sub i32 %470, %131
  %472 = sub i32 %471, %176
  %473 = sub i32 %472, %224
  %474 = sub i32 %473, %91
  %475 = add i32 %474, %300
  %476 = add i32 %475, %296
  %477 = add i32 %476, %307
  %478 = add i32 %477, %290
  %479 = icmp eq i32 %478, %14
  %480 = select i1 %479, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %481 = tail call i32 @puts(i8* nonnull dereferenceable(1) %480)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
