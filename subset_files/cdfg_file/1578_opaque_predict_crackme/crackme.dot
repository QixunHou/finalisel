digraph "DFG for'crackme' function" {
	Node0x2167720[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x2167da0[shape=record, label="  %6 = xor i32 %2, -1"];
	Node0x2167e10[shape=record, label="  %7 = sub i32 %6, %5"];
	Node0x2167eb0[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x2167f20[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x2167f90[shape=record, label="  %10 = or i32 %8, 1"];
	Node0x2168000[shape=record, label="  %11 = add i32 %10, %9"];
	Node0x2168070[shape=record, label="  %12 = and i32 %6, %1"];
	Node0x21680e0[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x2168150[shape=record, label="  %14 = and i32 %2, %1"];
	Node0x21681c0[shape=record, label="  %15 = or i32 %6, %1"];
	Node0x2168230[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x21682a0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x2168310[shape=record, label="  %18 = xor i32 %5, -1"];
	Node0x21683b0[shape=record, label="  %19 = mul i32 %18, 5"];
	Node0x2168420[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x2168490[shape=record, label="  %21 = and i32 %20, %3"];
	Node0x2168500[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0x21685a0[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x2168610[shape=record, label="  %24 = or i32 %20, %3"];
	Node0x2168680[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0x21686f0[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x2168760[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0x21687d0[shape=record, label="  %28 = or i32 %3, %0"];
	Node0x2168840[shape=record, label="  %29 = xor i32 %24, -1"];
	Node0x21688b0[shape=record, label="  %30 = add i32 %14, %29"];
	Node0x2168920[shape=record, label="  %31 = add i32 %30, %21"];
	Node0x21689c0[shape=record, label="  %32 = mul i32 %31, -3"];
	Node0x2168c40[shape=record, label="  %33 = add i32 %3, %1"];
	Node0x2168cb0[shape=record, label="  %34 = add i32 %33, %12"];
	Node0x2168d20[shape=record, label="  %35 = shl i32 %34, 1"];
	Node0x2168dc0[shape=record, label="  %36 = sub i32 3, %0"];
	Node0x2168e30[shape=record, label="  %37 = add i32 %36, %2"];
	Node0x2168ea0[shape=record, label="  %38 = sub i32 %37, %13"];
	Node0x2168f10[shape=record, label="  %39 = add i32 %38, %14"];
	Node0x2168f80[shape=record, label="  %40 = add i32 %39, %15"];
	Node0x2168ff0[shape=record, label="  %41 = add i32 %40, %17"];
	Node0x2169060[shape=record, label="  %42 = add i32 %41, %19"];
	Node0x21690d0[shape=record, label="  %43 = sub i32 %42, %24"];
	Node0x2169140[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x21691b0[shape=record, label="  %45 = sub i32 %44, %9"];
	Node0x2169220[shape=record, label="  %46 = add i32 %45, %23"];
	Node0x2169290[shape=record, label="  %47 = sub i32 %46, %27"];
	Node0x2169300[shape=record, label="  %48 = add i32 %47, %35"];
	Node0x2169370[shape=record, label="  %49 = add i32 %48, %32"];
	Node0x21693e0[shape=record, label="  %50 = icmp eq i32 %11, %49"];
	Node0x2108268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2169880[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0x21698d0[shape=record, label="  ret void"];
	Node0x2167720 -> Node0x2167da0;
	Node0x2167da0 -> Node0x2167e10;
	Node0x2167e10 -> Node0x2167eb0;
	Node0x2167eb0 -> Node0x2167f20;
	Node0x2167f20 -> Node0x2167f90;
	Node0x2167f90 -> Node0x2168000;
	Node0x2168000 -> Node0x2168070;
	Node0x2168070 -> Node0x21680e0;
	Node0x21680e0 -> Node0x2168150;
	Node0x2168150 -> Node0x21681c0;
	Node0x21681c0 -> Node0x2168230;
	Node0x2168230 -> Node0x21682a0;
	Node0x21682a0 -> Node0x2168310;
	Node0x2168310 -> Node0x21683b0;
	Node0x21683b0 -> Node0x2168420;
	Node0x2168420 -> Node0x2168490;
	Node0x2168490 -> Node0x2168500;
	Node0x2168500 -> Node0x21685a0;
	Node0x21685a0 -> Node0x2168610;
	Node0x2168610 -> Node0x2168680;
	Node0x2168680 -> Node0x21686f0;
	Node0x21686f0 -> Node0x2168760;
	Node0x2168760 -> Node0x21687d0;
	Node0x21687d0 -> Node0x2168840;
	Node0x2168840 -> Node0x21688b0;
	Node0x21688b0 -> Node0x2168920;
	Node0x2168920 -> Node0x21689c0;
	Node0x21689c0 -> Node0x2168c40;
	Node0x2168c40 -> Node0x2168cb0;
	Node0x2168cb0 -> Node0x2168d20;
	Node0x2168d20 -> Node0x2168dc0;
	Node0x2168dc0 -> Node0x2168e30;
	Node0x2168e30 -> Node0x2168ea0;
	Node0x2168ea0 -> Node0x2168f10;
	Node0x2168f10 -> Node0x2168f80;
	Node0x2168f80 -> Node0x2168ff0;
	Node0x2168ff0 -> Node0x2169060;
	Node0x2169060 -> Node0x21690d0;
	Node0x21690d0 -> Node0x2169140;
	Node0x2169140 -> Node0x21691b0;
	Node0x21691b0 -> Node0x2169220;
	Node0x2169220 -> Node0x2169290;
	Node0x2169290 -> Node0x2169300;
	Node0x2169300 -> Node0x2169370;
	Node0x2169370 -> Node0x21693e0;
	Node0x21693e0 -> Node0x2108268;
	Node0x2108268 -> Node0x2169880;
	Node0x2169880 -> Node0x21698d0;
edge [color=red]
	Node0x2167da0 -> Node0x2167e10;
	Node0x2167720 -> Node0x2167e10;
	Node0x2167e10 -> Node0x2167eb0;
	Node0x2167eb0 -> Node0x2167f90;
	Node0x2167f90 -> Node0x2168000;
	Node0x2167f20 -> Node0x2168000;
	Node0x2167da0 -> Node0x2168070;
	Node0x2167da0 -> Node0x21681c0;
	Node0x21681c0 -> Node0x2168230;
	Node0x2168230 -> Node0x21682a0;
	Node0x2167720 -> Node0x2168310;
	Node0x2168310 -> Node0x21683b0;
	Node0x2168420 -> Node0x2168490;
	Node0x2168490 -> Node0x2168500;
	Node0x2168500 -> Node0x21685a0;
	Node0x2168420 -> Node0x2168610;
	Node0x2168680 -> Node0x21686f0;
	Node0x21686f0 -> Node0x2168760;
	Node0x2168610 -> Node0x2168840;
	Node0x2168150 -> Node0x21688b0;
	Node0x2168840 -> Node0x21688b0;
	Node0x21688b0 -> Node0x2168920;
	Node0x2168490 -> Node0x2168920;
	Node0x2168920 -> Node0x21689c0;
	Node0x2168c40 -> Node0x2168cb0;
	Node0x2168070 -> Node0x2168cb0;
	Node0x2168cb0 -> Node0x2168d20;
	Node0x2168dc0 -> Node0x2168e30;
	Node0x2168e30 -> Node0x2168ea0;
	Node0x21680e0 -> Node0x2168ea0;
	Node0x2168ea0 -> Node0x2168f10;
	Node0x2168150 -> Node0x2168f10;
	Node0x2168f10 -> Node0x2168f80;
	Node0x21681c0 -> Node0x2168f80;
	Node0x2168f80 -> Node0x2168ff0;
	Node0x21682a0 -> Node0x2168ff0;
	Node0x2168ff0 -> Node0x2169060;
	Node0x21683b0 -> Node0x2169060;
	Node0x2169060 -> Node0x21690d0;
	Node0x2168610 -> Node0x21690d0;
	Node0x21690d0 -> Node0x2169140;
	Node0x21687d0 -> Node0x2169140;
	Node0x2169140 -> Node0x21691b0;
	Node0x2167f20 -> Node0x21691b0;
	Node0x21691b0 -> Node0x2169220;
	Node0x21685a0 -> Node0x2169220;
	Node0x2169220 -> Node0x2169290;
	Node0x2168760 -> Node0x2169290;
	Node0x2169290 -> Node0x2169300;
	Node0x2168d20 -> Node0x2169300;
	Node0x2169300 -> Node0x2169370;
	Node0x21689c0 -> Node0x2169370;
	Node0x2168000 -> Node0x21693e0;
	Node0x2169370 -> Node0x21693e0;
	Node0x21693e0 -> Node0x2108268;
	Node0x2108268 -> Node0x2169880;
}
