; ModuleID = '../.././c_source_file/0840_path_condition_crackme.c'
source_filename = "../.././c_source_file/0840_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = or i32 %4, %3
  %8 = shl i32 %7, 1
  %9 = xor i32 %1, -1
  %10 = xor i32 %2, %0
  %11 = xor i32 %10, -1
  %12 = and i32 %11, %9
  %13 = xor i32 %2, %1
  %14 = xor i32 %13, -1
  %15 = and i32 %14, %0
  %16 = add i32 %12, 1
  %17 = add i32 %16, %15
  %18 = add i32 %17, %6
  %19 = sub i32 %18, %8
  %20 = xor i32 %4, -1
  %21 = and i32 %20, %3
  %22 = xor i32 %21, -1
  %23 = or i32 %20, %3
  %24 = xor i32 %3, -1
  %25 = xor i32 %4, %3
  %26 = shl i32 %25, 1
  %27 = xor i32 %26, -2
  %28 = add i32 %7, 1
  %29 = shl i32 %23, 2
  %30 = xor i32 %29, -4
  %31 = shl i32 %21, 2
  %32 = xor i32 %0, -1
  %33 = and i32 %1, %0
  %34 = or i32 %33, %2
  %35 = and i32 %9, %2
  %36 = and i32 %35, %0
  %37 = or i32 %9, %2
  %38 = and i32 %37, %32
  %39 = or i32 %36, %38
  %40 = or i32 %2, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %33, %41
  %43 = or i32 %9, %0
  %44 = xor i32 %43, -1
  %45 = or i32 %14, %44
  %46 = and i32 %11, %1
  %47 = or i32 %1, %0
  %48 = and i32 %47, %11
  %49 = or i32 %33, %11
  %50 = and i32 %9, %0
  %51 = and i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = xor i32 %50, %52
  %54 = and i32 %13, %43
  %55 = xor i32 %47, -1
  %56 = or i32 %11, %55
  %57 = shl i32 %56, 1
  %58 = xor i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %11, %59
  %61 = and i32 %2, %0
  %62 = xor i32 %61, -1
  %63 = add i32 %61, 1
  %64 = and i32 %13, %0
  %65 = or i32 %10, %1
  %66 = and i32 %43, %11
  %67 = xor i32 %2, -1
  %68 = or i32 %67, %0
  %69 = and i32 %68, %1
  %70 = and i32 %11, %59
  %71 = or i32 %13, %55
  %72 = xor i32 %50, -1
  %73 = and i32 %51, %32
  %74 = xor i32 %73, -1
  %75 = xor i32 %64, %74
  %76 = xor i32 %68, -1
  %77 = add i32 %68, 1
  %78 = and i32 %35, %32
  %79 = or i32 %13, %32
  %80 = xor i32 %78, %79
  %81 = or i32 %14, %55
  %82 = and i32 %10, %58
  %83 = xor i32 %47, %2
  %84 = and i32 %51, %0
  %85 = and i32 %40, %32
  %86 = xor i32 %84, -1
  %87 = xor i32 %85, %86
  %88 = and i32 %67, %0
  %89 = or i32 %88, %58
  %90 = or i32 %2, %0
  %91 = xor i32 %90, -1
  %92 = or i32 %58, %91
  %93 = xor i32 %88, -1
  %94 = xor i32 %93, %1
  %95 = or i32 %11, %44
  %96 = shl i32 %95, 1
  %97 = or i32 %59, %2
  %98 = or i32 %88, %51
  %99 = shl i32 %98, 1
  %100 = or i32 %67, %1
  %101 = or i32 %100, %0
  %102 = and i32 %67, %1
  %103 = or i32 %61, %102
  %104 = xor i32 %88, %52
  %105 = or i32 %61, %9
  %106 = shl i32 %105, 1
  %107 = or i32 %58, %2
  %108 = xor i32 %40, %33
  %109 = add i32 %43, 1
  %110 = xor i32 %33, -1
  %111 = and i32 %67, %110
  %112 = and i32 %100, %0
  %113 = shl i32 %112, 1
  %114 = xor i32 %52, %0
  %115 = or i32 %11, %1
  %116 = shl i32 %115, 1
  %117 = and i32 %47, %67
  %118 = or i32 %50, %14
  %119 = or i32 %67, %44
  %120 = and i32 %58, %62
  %121 = and i32 %10, %110
  %122 = and i32 %72, %2
  %123 = and i32 %68, %9
  %124 = or i32 %11, %9
  %125 = or i32 %61, %58
  %126 = shl i32 %125, 1
  %127 = or i32 %10, %58
  %128 = shl i32 %90, 1
  %129 = or i32 %58, %76
  %130 = xor i32 %62, %1
  %131 = or i32 %10, %59
  %132 = or i32 %10, %9
  %133 = add i32 %40, 1
  %134 = and i32 %67, %72
  %135 = and i32 %90, %59
  %136 = shl i32 %135, 1
  %137 = or i32 %61, %44
  %138 = and i32 %40, %0
  %139 = xor i32 %138, %74
  %140 = xor i32 %100, %33
  %141 = shl i32 %140, 1
  %142 = xor i32 %76, %1
  %143 = and i32 %10, %43
  %144 = and i32 %52, %32
  %145 = and i32 %58, %67
  %146 = shl i32 %145, 1
  %147 = and i32 %62, %1
  %148 = or i32 %102, %32
  %149 = xor i32 %91, %1
  %150 = shl i32 %102, 1
  %151 = xor i32 %102, %0
  %152 = and i32 %10, %72
  %153 = or i32 %10, %44
  %154 = xor i32 %90, %1
  %155 = shl i32 %154, 2
  %156 = or i32 %67, %59
  %157 = or i32 %88, %59
  %158 = and i32 %52, %0
  %159 = or i32 %61, %55
  %160 = xor i32 %14, %0
  %161 = or i32 %33, %14
  %162 = or i32 %10, %50
  %163 = and i32 %67, %59
  %164 = shl i32 %163, 1
  %165 = xor i32 %100, -1
  %166 = or i32 %165, %32
  %167 = or i32 %50, %2
  %168 = and i32 %110, %2
  %169 = and i32 %11, %72
  %170 = and i32 %43, %2
  %171 = xor i32 %55, %2
  %172 = or i32 %51, %0
  %173 = or i32 %100, %32
  %174 = and i32 %100, %32
  %175 = or i32 %40, %0
  %176 = xor i32 %61, %43
  %177 = or i32 %50, %67
  %178 = shl i32 %177, 1
  %179 = and i32 %62, %59
  %180 = and i32 %10, %47
  %181 = or i32 %13, %0
  %182 = or i32 %51, %50
  %183 = xor i32 %40, %0
  %184 = xor i32 %183, %86
  %185 = and i32 %37, %0
  %186 = or i32 %78, %185
  %187 = or i32 %13, %50
  %188 = or i32 %52, %0
  %189 = xor i32 %68, %1
  %190 = and i32 %58, %93
  %191 = xor i32 %0, 2147483647
  %192 = xor i32 %191, %13
  %193 = or i32 %84, %192
  %194 = and i32 %68, %59
  %195 = xor i32 %185, -1
  %196 = xor i32 %78, %195
  %197 = and i32 %68, %58
  %198 = or i32 %14, %0
  %199 = shl i32 %43, 1
  %200 = or i32 %40, %32
  %201 = xor i32 %37, %0
  %202 = xor i32 %36, -1
  %203 = xor i32 %201, %202
  %204 = xor i32 %38, %202
  %205 = and i32 %14, %110
  %206 = or i32 %76, %9
  %207 = xor i32 %88, %1
  %208 = or i32 %84, %85
  %209 = or i32 %76, %59
  %210 = and i32 %43, %14
  %211 = xor i32 %43, %2
  %212 = or i32 %13, %33
  %213 = xor i32 %102, 2147483647
  %214 = or i32 %213, %32
  %215 = shl i32 %214, 1
  %216 = and i32 %13, %110
  %217 = or i32 %36, %201
  %218 = shl i32 %217, 1
  %219 = or i32 %61, %41
  %220 = and i32 %58, %2
  %221 = or i32 %102, %0
  %222 = or i32 %73, %138
  %223 = or i32 %84, %183
  %224 = or i32 %51, %32
  %225 = and i32 %41, %32
  %226 = and i32 %102, %32
  %227 = and i32 %41, %0
  %228 = shl i32 %227, 1
  %229 = and i32 %102, %0
  %230 = and i32 %165, %32
  %231 = mul i32 %73, -19
  %232 = and i32 %165, %0
  %233 = shl i32 %84, 3
  %234 = add i32 %47, %2
  %235 = add i32 %234, %11
  %236 = add i32 %235, %134
  %237 = add i32 %236, %122
  %238 = add i32 %237, %205
  %239 = add i32 %238, %200
  %240 = add i32 %239, %190
  %241 = add i32 %240, %189
  %242 = add i32 %241, %188
  %243 = add i32 %242, %181
  %244 = add i32 %243, %169
  %245 = add i32 %244, %151
  %246 = add i32 %245, %130
  %247 = add i32 %246, %101
  %248 = add i32 %247, %69
  %249 = add i32 %248, %46
  %250 = add i32 %249, %39
  %251 = add i32 %250, %193
  %252 = shl i32 %251, 1
  %253 = add i32 %197, %63
  %254 = sub i32 %253, %226
  %255 = sub i32 %254, %166
  %256 = add i32 %255, %153
  %257 = add i32 %256, %82
  %258 = mul i32 %257, 3
  %259 = add i32 %61, %0
  %260 = add i32 %259, %232
  %261 = sub i32 %42, %260
  %262 = sub i32 %261, %6
  %263 = add i32 %262, %196
  %264 = mul i32 %263, 5
  %265 = sub i32 %229, %225
  %266 = add i32 %265, %28
  %267 = mul i32 %266, 6
  %268 = add i32 %230, %219
  %269 = add i32 %268, %206
  %270 = shl i32 %269, 2
  %271 = add i32 %50, %109
  %272 = add i32 %271, %110
  %273 = add i32 %272, %24
  %274 = add i32 %273, %34
  %275 = add i32 %274, %77
  %276 = add i32 %275, %83
  %277 = add i32 %276, %97
  %278 = add i32 %277, %93
  %279 = sub i32 %278, %107
  %280 = sub i32 %279, %111
  %281 = sub i32 %280, %88
  %282 = sub i32 %281, %117
  %283 = add i32 %282, %119
  %284 = add i32 %283, %133
  %285 = add i32 %284, %14
  %286 = sub i32 %285, %13
  %287 = sub i32 %286, %156
  %288 = add i32 %287, %167
  %289 = add i32 %288, %168
  %290 = sub i32 %289, %170
  %291 = sub i32 %290, %171
  %292 = sub i32 %291, %68
  %293 = sub i32 %292, %199
  %294 = add i32 %293, %211
  %295 = sub i32 %294, %220
  %296 = sub i32 %295, %4
  %297 = sub i32 %296, %45
  %298 = add i32 %297, %48
  %299 = sub i32 %298, %49
  %300 = sub i32 %299, %53
  %301 = sub i32 %300, %54
  %302 = sub i32 %301, %60
  %303 = add i32 %302, %64
  %304 = sub i32 %303, %65
  %305 = sub i32 %304, %66
  %306 = add i32 %305, %70
  %307 = sub i32 %306, %71
  %308 = sub i32 %307, %81
  %309 = sub i32 %308, %89
  %310 = add i32 %309, %92
  %311 = sub i32 %310, %94
  %312 = add i32 %311, %103
  %313 = add i32 %312, %104
  %314 = add i32 %313, %108
  %315 = sub i32 %314, %114
  %316 = sub i32 %315, %118
  %317 = sub i32 %316, %120
  %318 = sub i32 %317, %121
  %319 = add i32 %318, %123
  %320 = add i32 %319, %124
  %321 = sub i32 %320, %127
  %322 = sub i32 %321, %128
  %323 = sub i32 %322, %129
  %324 = add i32 %323, %131
  %325 = add i32 %324, %132
  %326 = add i32 %325, %137
  %327 = add i32 %326, %142
  %328 = sub i32 %327, %143
  %329 = sub i32 %328, %144
  %330 = sub i32 %329, %146
  %331 = add i32 %330, %147
  %332 = sub i32 %331, %148
  %333 = sub i32 %332, %149
  %334 = sub i32 %333, %150
  %335 = sub i32 %334, %152
  %336 = add i32 %335, %157
  %337 = add i32 %336, %158
  %338 = add i32 %337, %159
  %339 = sub i32 %338, %160
  %340 = sub i32 %339, %161
  %341 = add i32 %340, %162
  %342 = sub i32 %341, %164
  %343 = add i32 %342, %172
  %344 = sub i32 %343, %173
  %345 = add i32 %344, %174
  %346 = add i32 %345, %175
  %347 = sub i32 %346, %176
  %348 = sub i32 %347, %178
  %349 = sub i32 %348, %179
  %350 = sub i32 %349, %180
  %351 = add i32 %350, %182
  %352 = add i32 %351, %187
  %353 = add i32 %352, %85
  %354 = sub i32 %353, %194
  %355 = add i32 %354, %198
  %356 = add i32 %355, %207
  %357 = add i32 %356, %209
  %358 = sub i32 %357, %210
  %359 = add i32 %358, %212
  %360 = sub i32 %359, %216
  %361 = sub i32 %360, %221
  %362 = add i32 %361, %224
  %363 = add i32 %362, %22
  %364 = add i32 %363, %23
  %365 = sub i32 %364, %57
  %366 = add i32 %365, %75
  %367 = add i32 %366, %80
  %368 = sub i32 %367, %87
  %369 = sub i32 %368, %96
  %370 = sub i32 %369, %99
  %371 = sub i32 %370, %106
  %372 = sub i32 %371, %113
  %373 = sub i32 %372, %116
  %374 = sub i32 %373, %126
  %375 = sub i32 %374, %136
  %376 = sub i32 %375, %139
  %377 = sub i32 %376, %141
  %378 = sub i32 %377, %155
  %379 = sub i32 %378, %184
  %380 = add i32 %379, %186
  %381 = sub i32 %380, %203
  %382 = sub i32 %381, %204
  %383 = sub i32 %382, %208
  %384 = add i32 %383, %222
  %385 = add i32 %384, %223
  %386 = sub i32 %385, %228
  %387 = add i32 %386, %231
  %388 = sub i32 %387, %233
  %389 = sub i32 %388, %31
  %390 = sub i32 %389, %215
  %391 = sub i32 %390, %218
  %392 = add i32 %391, %27
  %393 = sub i32 %392, %30
  %394 = add i32 %393, %270
  %395 = add i32 %394, %267
  %396 = add i32 %395, %258
  %397 = add i32 %396, %264
  %398 = add i32 %397, %252
  %399 = icmp eq i32 %19, %398
  %400 = select i1 %399, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %401 = tail call i32 @puts(i8* nonnull dereferenceable(1) %400)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
