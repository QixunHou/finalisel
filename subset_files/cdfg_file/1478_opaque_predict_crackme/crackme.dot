digraph "DFG for'crackme' function" {
	Node0x900b30[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x900ba0[shape=record, label="  %4 = xor i32 %3, %0"];
	Node0x900c60[shape=record, label="  %5 = sub i32 %4, %1"];
	Node0x900cd0[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x900d40[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x900db0[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x900e20[shape=record, label="  %9 = and i32 %3, %0"];
	Node0x900e90[shape=record, label="  %10 = xor i32 %8, -1"];
	Node0x900f00[shape=record, label="  %11 = xor i32 %0, 2147483647"];
	Node0x900f70[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x901010[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x9010b0[shape=record, label="  %14 = mul i32 %6, 5"];
	Node0x901120[shape=record, label="  %15 = add i32 %9, %10"];
	Node0x9011c0[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x901230[shape=record, label="  %17 = sub i32 3, %0"];
	Node0x9012a0[shape=record, label="  %18 = sub i32 %17, %8"];
	Node0x901310[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x901380[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x9013f0[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x901460[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x9014d0[shape=record, label="  %23 = add i32 %22, %16"];
	Node0x901540[shape=record, label="  %24 = icmp eq i32 %5, %23"];
	Node0x8a1268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x9019e0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x901a30[shape=record, label="  ret void"];
	Node0x900b30 -> Node0x900ba0;
	Node0x900ba0 -> Node0x900c60;
	Node0x900c60 -> Node0x900cd0;
	Node0x900cd0 -> Node0x900d40;
	Node0x900d40 -> Node0x900db0;
	Node0x900db0 -> Node0x900e20;
	Node0x900e20 -> Node0x900e90;
	Node0x900e90 -> Node0x900f00;
	Node0x900f00 -> Node0x900f70;
	Node0x900f70 -> Node0x901010;
	Node0x901010 -> Node0x9010b0;
	Node0x9010b0 -> Node0x901120;
	Node0x901120 -> Node0x9011c0;
	Node0x9011c0 -> Node0x901230;
	Node0x901230 -> Node0x9012a0;
	Node0x9012a0 -> Node0x901310;
	Node0x901310 -> Node0x901380;
	Node0x901380 -> Node0x9013f0;
	Node0x9013f0 -> Node0x901460;
	Node0x901460 -> Node0x9014d0;
	Node0x9014d0 -> Node0x901540;
	Node0x901540 -> Node0x8a1268;
	Node0x8a1268 -> Node0x9019e0;
	Node0x9019e0 -> Node0x901a30;
edge [color=red]
	Node0x900b30 -> Node0x900ba0;
	Node0x900ba0 -> Node0x900c60;
	Node0x900cd0 -> Node0x900d40;
	Node0x900b30 -> Node0x900e20;
	Node0x900db0 -> Node0x900e90;
	Node0x900f00 -> Node0x900f70;
	Node0x900f70 -> Node0x901010;
	Node0x900cd0 -> Node0x9010b0;
	Node0x900e20 -> Node0x901120;
	Node0x900e90 -> Node0x901120;
	Node0x901120 -> Node0x9011c0;
	Node0x901230 -> Node0x9012a0;
	Node0x900db0 -> Node0x9012a0;
	Node0x9012a0 -> Node0x901310;
	Node0x900d40 -> Node0x901310;
	Node0x901310 -> Node0x901380;
	Node0x900e20 -> Node0x901380;
	Node0x901380 -> Node0x9013f0;
	Node0x901010 -> Node0x9013f0;
	Node0x9013f0 -> Node0x901460;
	Node0x9010b0 -> Node0x901460;
	Node0x901460 -> Node0x9014d0;
	Node0x9011c0 -> Node0x9014d0;
	Node0x900c60 -> Node0x901540;
	Node0x9014d0 -> Node0x901540;
	Node0x901540 -> Node0x8a1268;
	Node0x8a1268 -> Node0x9019e0;
}
