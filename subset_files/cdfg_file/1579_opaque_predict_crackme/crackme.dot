digraph "DFG for'crackme' function" {
	Node0x1f4c410[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1f4cac0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1f4cb80[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x1f4cbf0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1f4cc90[shape=record, label="  %7 = xor i32 %1, 2147483647"];
	Node0x1f4cd00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1f4cd70[shape=record, label="  %9 = and i32 %7, %0"];
	Node0x1f4ce10[shape=record, label="  %10 = shl i32 %5, 2"];
	Node0x1f4ceb0[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0x1f4cf50[shape=record, label="  %12 = mul i32 %3, 3"];
	Node0x1f4cfc0[shape=record, label="  %13 = sub i32 %9, %0"];
	Node0x1f4d030[shape=record, label="  %14 = add i32 %13, %8"];
	Node0x1f4d0a0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x1f4d110[shape=record, label="  %16 = add i32 %6, 3"];
	Node0x1f4d180[shape=record, label="  %17 = add i32 %16, %12"];
	Node0x1f4d1f0[shape=record, label="  %18 = add i32 %17, %11"];
	Node0x1f4d260[shape=record, label="  %19 = add i32 %18, %15"];
	Node0x1f4d2d0[shape=record, label="  %20 = icmp eq i32 %19, %4"];
	Node0x1eed268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f4d770[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1f4d7c0[shape=record, label="  ret void"];
	Node0x1f4c410 -> Node0x1f4cac0;
	Node0x1f4cac0 -> Node0x1f4cb80;
	Node0x1f4cb80 -> Node0x1f4cbf0;
	Node0x1f4cbf0 -> Node0x1f4cc90;
	Node0x1f4cc90 -> Node0x1f4cd00;
	Node0x1f4cd00 -> Node0x1f4cd70;
	Node0x1f4cd70 -> Node0x1f4ce10;
	Node0x1f4ce10 -> Node0x1f4ceb0;
	Node0x1f4ceb0 -> Node0x1f4cf50;
	Node0x1f4cf50 -> Node0x1f4cfc0;
	Node0x1f4cfc0 -> Node0x1f4d030;
	Node0x1f4d030 -> Node0x1f4d0a0;
	Node0x1f4d0a0 -> Node0x1f4d110;
	Node0x1f4d110 -> Node0x1f4d180;
	Node0x1f4d180 -> Node0x1f4d1f0;
	Node0x1f4d1f0 -> Node0x1f4d260;
	Node0x1f4d260 -> Node0x1f4d2d0;
	Node0x1f4d2d0 -> Node0x1eed268;
	Node0x1eed268 -> Node0x1f4d770;
	Node0x1f4d770 -> Node0x1f4d7c0;
edge [color=red]
	Node0x1f4c410 -> Node0x1f4cac0;
	Node0x1f4cb80 -> Node0x1f4cbf0;
	Node0x1f4cc90 -> Node0x1f4cd70;
	Node0x1f4cb80 -> Node0x1f4ce10;
	Node0x1f4ce10 -> Node0x1f4ceb0;
	Node0x1f4c410 -> Node0x1f4cf50;
	Node0x1f4cd70 -> Node0x1f4cfc0;
	Node0x1f4cfc0 -> Node0x1f4d030;
	Node0x1f4cd00 -> Node0x1f4d030;
	Node0x1f4d030 -> Node0x1f4d0a0;
	Node0x1f4cbf0 -> Node0x1f4d110;
	Node0x1f4d110 -> Node0x1f4d180;
	Node0x1f4cf50 -> Node0x1f4d180;
	Node0x1f4d180 -> Node0x1f4d1f0;
	Node0x1f4ceb0 -> Node0x1f4d1f0;
	Node0x1f4d1f0 -> Node0x1f4d260;
	Node0x1f4d0a0 -> Node0x1f4d260;
	Node0x1f4d260 -> Node0x1f4d2d0;
	Node0x1f4cac0 -> Node0x1f4d2d0;
	Node0x1f4d2d0 -> Node0x1eed268;
	Node0x1eed268 -> Node0x1f4d770;
}
