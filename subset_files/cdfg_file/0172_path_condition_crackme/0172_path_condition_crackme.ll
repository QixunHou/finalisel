; ModuleID = '../.././c_source_file/0172_path_condition_crackme.c'
source_filename = "../.././c_source_file/0172_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %2, %0
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %6, %8
  %10 = sub i32 %9, %3
  %11 = and i32 %2, %1
  %12 = and i32 %11, %0
  %13 = xor i32 %0, -1
  %14 = or i32 %2, %1
  %15 = and i32 %14, %13
  %16 = xor i32 %12, -1
  %17 = xor i32 %15, %16
  %18 = sub i32 %10, %17
  %19 = xor i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = and i32 %4, %3
  %23 = shl i32 %3, 2
  %24 = xor i32 %23, -4
  %25 = or i32 %4, %3
  %26 = shl i32 %25, 1
  %27 = xor i32 %26, -2
  %28 = xor i32 %3, -1
  %29 = and i32 %28, %4
  %30 = shl i32 %22, 2
  %31 = or i32 %6, %7
  %32 = and i32 %11, %13
  %33 = and i32 %14, %0
  %34 = xor i32 %32, -1
  %35 = xor i32 %33, %34
  %36 = and i32 %7, %0
  %37 = xor i32 %36, -1
  %38 = xor i32 %2, %1
  %39 = and i32 %38, %37
  %40 = xor i32 %1, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %8, -1
  %43 = xor i32 %42, %2
  %44 = and i32 %38, %0
  %45 = xor i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %40, %46
  %48 = or i32 %1, %0
  %49 = xor i32 %38, -1
  %50 = and i32 %48, %49
  %51 = and i32 %1, %0
  %52 = xor i32 %2, -1
  %53 = or i32 %52, %1
  %54 = xor i32 %53, %51
  %55 = or i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %51, %56
  %58 = or i32 %52, %0
  %59 = xor i32 %58, -1
  %60 = add i32 %58, 1
  %61 = and i32 %41, %2
  %62 = and i32 %55, %7
  %63 = and i32 %52, %0
  %64 = and i32 %40, %2
  %65 = and i32 %52, %41
  %66 = and i32 %52, %1
  %67 = xor i32 %66, %0
  %68 = xor i32 %66, -1
  %69 = xor i32 %68, %0
  %70 = or i32 %40, %56
  %71 = and i32 %58, %7
  %72 = or i32 %59, %7
  %73 = shl i32 %72, 1
  %74 = and i32 %68, %13
  %75 = xor i32 %63, -1
  %76 = and i32 %40, %75
  %77 = or i32 %66, %0
  %78 = and i32 %40, %46
  %79 = or i32 %38, %51
  %80 = shl i32 %79, 1
  %81 = and i32 %46, %7
  %82 = and i32 %58, %40
  %83 = xor i32 %6, -1
  %84 = and i32 %40, %83
  %85 = xor i32 %11, -1
  %86 = or i32 %85, %0
  %87 = xor i32 %51, -1
  %88 = and i32 %45, %87
  %89 = and i32 %7, %2
  %90 = and i32 %89, %13
  %91 = or i32 %38, %13
  %92 = xor i32 %90, %91
  %93 = or i32 %6, %41
  %94 = and i32 %83, %7
  %95 = and i32 %45, %41
  %96 = xor i32 %36, %68
  %97 = and i32 %89, %0
  %98 = or i32 %7, %2
  %99 = and i32 %98, %13
  %100 = or i32 %97, %99
  %101 = or i32 %59, %41
  %102 = xor i32 %75, %1
  %103 = shl i32 %102, 1
  %104 = or i32 %36, %52
  %105 = xor i32 %63, %85
  %106 = or i32 %40, %59
  %107 = xor i32 %48, -1
  %108 = or i32 %52, %107
  %109 = or i32 %51, %2
  %110 = and i32 %38, %13
  %111 = or i32 %12, %110
  %112 = and i32 %40, %52
  %113 = and i32 %46, %37
  %114 = and i32 %38, %48
  %115 = and i32 %58, %41
  %116 = xor i32 %48, %2
  %117 = shl i32 %116, 1
  %118 = and i32 %38, %8
  %119 = and i32 %55, %40
  %120 = or i32 %42, %2
  %121 = xor i32 %51, %2
  %122 = xor i32 %38, %0
  %123 = xor i32 %122, -1
  %124 = xor i32 %97, %123
  %125 = or i32 %56, %41
  %126 = shl i32 %125, 2
  %127 = xor i32 %53, %0
  %128 = shl i32 %127, 1
  %129 = xor i32 %91, 2147483647
  %130 = or i32 %129, %90
  %131 = shl i32 %130, 1
  %132 = and i32 %98, %0
  %133 = or i32 %90, %132
  %134 = xor i32 %98, %0
  %135 = xor i32 %97, -1
  %136 = xor i32 %134, %135
  %137 = or i32 %68, %13
  %138 = and i32 %68, %0
  %139 = shl i32 %138, 1
  %140 = or i32 %40, %2
  %141 = xor i32 %58, %1
  %142 = or i32 %45, %107
  %143 = xor i32 %14, -1
  %144 = xor i32 %143, %0
  %145 = or i32 %45, %51
  %146 = xor i32 %59, %1
  %147 = shl i32 %146, 1
  %148 = and i32 %37, %2
  %149 = xor i32 %55, %51
  %150 = and i32 %38, %87
  %151 = xor i32 %14, %51
  %152 = and i32 %49, %13
  %153 = or i32 %12, %15
  %154 = xor i32 %83, %1
  %155 = or i32 %45, %36
  %156 = xor i32 %107, %2
  %157 = and i32 %48, %52
  %158 = xor i32 %49, %0
  %159 = xor i32 %110, %16
  %160 = or i32 %143, %13
  %161 = or i32 %68, %0
  %162 = or i32 %32, %33
  %163 = xor i32 %36, %2
  %164 = and i32 %49, %87
  %165 = or i32 %11, %13
  %166 = xor i32 %53, -1
  %167 = add i32 %53, 1
  %168 = or i32 %51, %46
  %169 = and i32 %45, %37
  %170 = shl i32 %55, 1
  %171 = or i32 %38, %0
  %172 = xor i32 %171, -1
  %173 = or i32 %97, %172
  %174 = or i32 %6, %107
  %175 = xor i32 %44, %34
  %176 = or i32 %63, %166
  %177 = or i32 %14, %0
  %178 = or i32 %49, %42
  %179 = shl i32 %2, 1
  %180 = and i32 %55, %41
  %181 = xor i32 %6, %68
  %182 = shl i32 %181, 1
  %183 = or i32 %36, %49
  %184 = shl i32 %183, 1
  %185 = or i32 %40, %52
  %186 = shl i32 %185, 1
  %187 = or i32 %46, %41
  %188 = or i32 %41, %2
  %189 = and i32 %75, %1
  %190 = or i32 %14, %13
  %191 = and i32 %8, %46
  %192 = or i32 %38, %36
  %193 = xor i32 %85, %0
  %194 = and i32 %83, %41
  %195 = and i32 %8, %2
  %196 = or i32 %6, %1
  %197 = or i32 %49, %0
  %198 = and i32 %55, %1
  %199 = or i32 %12, %123
  %200 = and i32 %58, %1
  %201 = add i32 %38, 1
  %202 = xor i32 %6, %1
  %203 = or i32 %52, %42
  %204 = shl i32 %203, 1
  %205 = or i32 %56, %1
  %206 = or i32 %11, %0
  %207 = or i32 %49, %107
  %208 = or i32 %97, %134
  %209 = xor i32 %14, %0
  %210 = or i32 %12, %209
  %211 = or i32 %107, %2
  %212 = and i32 %85, %0
  %213 = shl i32 %212, 1
  %214 = or i32 %6, %42
  %215 = add i32 %6, 1
  %216 = and i32 %52, %37
  %217 = or i32 %56, %7
  %218 = shl i32 %217, 1
  %219 = or i32 %38, %42
  %220 = shl i32 %219, 1
  %221 = or i32 %59, %1
  %222 = or i32 %45, %41
  %223 = xor i32 %63, %53
  %224 = and i32 %48, %46
  %225 = or i32 %51, %52
  %226 = and i32 %48, %2
  %227 = or i32 %46, %107
  %228 = or i32 %6, %143
  %229 = or i32 %63, %1
  %230 = or i32 %45, %42
  %231 = shl i32 %230, 1
  %232 = xor i32 %99, %135
  %233 = and i32 %45, %7
  %234 = or i32 %36, %2
  %235 = or i32 %166, %0
  %236 = xor i32 %37, %2
  %237 = and i32 %45, %48
  %238 = or i32 %97, %122
  %239 = xor i32 %12, %122
  %240 = and i32 %143, %13
  %241 = mul i32 %240, -12
  %242 = and i32 %66, %13
  %243 = and i32 %143, %0
  %244 = mul i32 %243, 9
  %245 = and i32 %66, %0
  %246 = mul i32 %245, 11
  %247 = and i32 %166, %13
  %248 = mul i32 %247, 10
  %249 = and i32 %166, %0
  %250 = mul i32 %249, 24
  %251 = shl i32 %12, 2
  %252 = add i32 %51, %52
  %253 = add i32 %252, %41
  %254 = add i32 %253, %75
  %255 = add i32 %254, %112
  %256 = add i32 %255, %104
  %257 = add i32 %256, %64
  %258 = add i32 %257, %165
  %259 = add i32 %258, %161
  %260 = add i32 %259, %141
  %261 = add i32 %260, %84
  %262 = add i32 %261, %57
  %263 = add i32 %262, %133
  %264 = add i32 %263, %162
  %265 = shl i32 %264, 1
  %266 = sub i32 %228, %61
  %267 = sub i32 %266, %191
  %268 = sub i32 %267, %158
  %269 = sub i32 %268, %33
  %270 = add i32 %269, %29
  %271 = add i32 %270, %100
  %272 = mul i32 %271, 5
  %273 = sub i32 %156, %120
  %274 = add i32 %273, %242
  %275 = add i32 %274, %32
  %276 = sub i32 %275, %81
  %277 = mul i32 %276, 3
  %278 = sub i32 -2, %1
  %279 = add i32 %278, %40
  %280 = sub i32 %279, %36
  %281 = add i32 %280, %87
  %282 = sub i32 %281, %8
  %283 = add i32 %282, %42
  %284 = add i32 %283, %37
  %285 = sub i32 %284, %48
  %286 = sub i32 %285, %43
  %287 = add i32 %286, %60
  %288 = sub i32 %287, %63
  %289 = sub i32 %288, %65
  %290 = add i32 %289, %14
  %291 = add i32 %290, %58
  %292 = add i32 %291, %53
  %293 = add i32 %292, %108
  %294 = add i32 %293, %109
  %295 = add i32 %294, %121
  %296 = sub i32 %295, %140
  %297 = sub i32 %296, %148
  %298 = add i32 %297, %157
  %299 = add i32 %298, %163
  %300 = add i32 %299, %167
  %301 = add i32 %300, %68
  %302 = sub i32 %301, %179
  %303 = add i32 %302, %188
  %304 = sub i32 %303, %195
  %305 = add i32 %304, %201
  %306 = add i32 %305, %85
  %307 = add i32 %306, %211
  %308 = add i32 %307, %215
  %309 = sub i32 %308, %216
  %310 = sub i32 %309, %225
  %311 = sub i32 %310, %226
  %312 = add i32 %311, %234
  %313 = sub i32 %312, %236
  %314 = add i32 %313, %31
  %315 = sub i32 %314, %39
  %316 = sub i32 %315, %44
  %317 = add i32 %316, %47
  %318 = add i32 %317, %50
  %319 = add i32 %318, %54
  %320 = sub i32 %319, %62
  %321 = add i32 %320, %67
  %322 = sub i32 %321, %69
  %323 = sub i32 %322, %70
  %324 = sub i32 %323, %71
  %325 = add i32 %324, %74
  %326 = add i32 %325, %76
  %327 = sub i32 %326, %77
  %328 = sub i32 %327, %78
  %329 = sub i32 %328, %82
  %330 = sub i32 %329, %86
  %331 = add i32 %330, %88
  %332 = add i32 %331, %93
  %333 = add i32 %332, %94
  %334 = sub i32 %333, %95
  %335 = add i32 %334, %96
  %336 = add i32 %335, %101
  %337 = add i32 %336, %105
  %338 = sub i32 %337, %106
  %339 = sub i32 %338, %113
  %340 = add i32 %339, %114
  %341 = add i32 %340, %115
  %342 = sub i32 %341, %117
  %343 = sub i32 %342, %118
  %344 = sub i32 %343, %119
  %345 = add i32 %344, %137
  %346 = add i32 %345, %142
  %347 = add i32 %346, %144
  %348 = sub i32 %347, %145
  %349 = sub i32 %348, %149
  %350 = sub i32 %349, %150
  %351 = sub i32 %350, %151
  %352 = add i32 %351, %152
  %353 = sub i32 %352, %154
  %354 = sub i32 %353, %155
  %355 = sub i32 %354, %160
  %356 = sub i32 %355, %164
  %357 = add i32 %356, %168
  %358 = add i32 %357, %169
  %359 = sub i32 %358, %170
  %360 = add i32 %359, %174
  %361 = sub i32 %360, %176
  %362 = add i32 %361, %177
  %363 = add i32 %362, %178
  %364 = add i32 %363, %180
  %365 = sub i32 %364, %186
  %366 = sub i32 %365, %187
  %367 = sub i32 %366, %189
  %368 = add i32 %367, %190
  %369 = add i32 %368, %192
  %370 = add i32 %369, %193
  %371 = sub i32 %370, %194
  %372 = sub i32 %371, %196
  %373 = sub i32 %372, %197
  %374 = add i32 %373, %198
  %375 = add i32 %374, %200
  %376 = sub i32 %375, %202
  %377 = sub i32 %376, %204
  %378 = add i32 %377, %205
  %379 = sub i32 %378, %206
  %380 = sub i32 %379, %207
  %381 = sub i32 %380, %214
  %382 = add i32 %381, %221
  %383 = add i32 %382, %91
  %384 = sub i32 %383, %222
  %385 = sub i32 %384, %223
  %386 = add i32 %385, %224
  %387 = sub i32 %386, %227
  %388 = sub i32 %387, %171
  %389 = sub i32 %388, %229
  %390 = add i32 %389, %233
  %391 = add i32 %390, %235
  %392 = sub i32 %391, %237
  %393 = sub i32 %392, %19
  %394 = add i32 %393, %22
  %395 = sub i32 %394, %24
  %396 = sub i32 %395, %35
  %397 = sub i32 %396, %73
  %398 = sub i32 %397, %80
  %399 = sub i32 %398, %92
  %400 = sub i32 %399, %103
  %401 = add i32 %400, %111
  %402 = add i32 %401, %124
  %403 = add i32 %402, %126
  %404 = sub i32 %403, %128
  %405 = sub i32 %404, %136
  %406 = sub i32 %405, %139
  %407 = sub i32 %406, %147
  %408 = sub i32 %407, %153
  %409 = add i32 %408, %159
  %410 = sub i32 %409, %173
  %411 = add i32 %410, %175
  %412 = sub i32 %411, %182
  %413 = sub i32 %412, %184
  %414 = sub i32 %413, %199
  %415 = sub i32 %414, %208
  %416 = add i32 %415, %210
  %417 = sub i32 %416, %213
  %418 = sub i32 %417, %218
  %419 = sub i32 %418, %220
  %420 = sub i32 %419, %231
  %421 = add i32 %420, %232
  %422 = sub i32 %421, %238
  %423 = sub i32 %422, %239
  %424 = add i32 %423, %241
  %425 = add i32 %424, %244
  %426 = add i32 %425, %246
  %427 = add i32 %426, %248
  %428 = add i32 %427, %250
  %429 = sub i32 %428, %251
  %430 = sub i32 %429, %30
  %431 = add i32 %430, %21
  %432 = add i32 %431, %27
  %433 = sub i32 %432, %131
  %434 = add i32 %433, %277
  %435 = add i32 %434, %272
  %436 = add i32 %435, %265
  %437 = icmp eq i32 %18, %436
  %438 = select i1 %437, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %439 = tail call i32 @puts(i8* nonnull dereferenceable(1) %438)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
