digraph "DFG for'crackme' function" {
	Node0x20e84b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x20e8b60[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x20e8c20[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x20e8c90[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x20e8d00[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x20e8d70[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x20e8de0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x20e8e50[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x20e8ec0[shape=record, label="  %11 = xor i32 %0, -1"];
	Node0x20e8f30[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x20e8fd0[shape=record, label="  %13 = mul i32 %12, -3"];
	Node0x20e9040[shape=record, label="  %14 = add i32 %7, %10"];
	Node0x20e90e0[shape=record, label="  %15 = mul i32 %14, -5"];
	Node0x20e9150[shape=record, label="  %16 = sub i32 %0, %1"];
	Node0x20e91c0[shape=record, label="  %17 = add i32 %16, %6"];
	Node0x20e9230[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x20e92a0[shape=record, label="  %19 = add i32 %18, %5"];
	Node0x20e9310[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x20e9380[shape=record, label="  %21 = sub i32 %20, %4"];
	Node0x20e93f0[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x20e9490[shape=record, label="  %23 = icmp eq i32 %22, 2"];
	Node0x2089268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x20e9930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x20e9980[shape=record, label="  ret void"];
	Node0x20e84b0 -> Node0x20e8b60;
	Node0x20e8b60 -> Node0x20e8c20;
	Node0x20e8c20 -> Node0x20e8c90;
	Node0x20e8c90 -> Node0x20e8d00;
	Node0x20e8d00 -> Node0x20e8d70;
	Node0x20e8d70 -> Node0x20e8de0;
	Node0x20e8de0 -> Node0x20e8e50;
	Node0x20e8e50 -> Node0x20e8ec0;
	Node0x20e8ec0 -> Node0x20e8f30;
	Node0x20e8f30 -> Node0x20e8fd0;
	Node0x20e8fd0 -> Node0x20e9040;
	Node0x20e9040 -> Node0x20e90e0;
	Node0x20e90e0 -> Node0x20e9150;
	Node0x20e9150 -> Node0x20e91c0;
	Node0x20e91c0 -> Node0x20e9230;
	Node0x20e9230 -> Node0x20e92a0;
	Node0x20e92a0 -> Node0x20e9310;
	Node0x20e9310 -> Node0x20e9380;
	Node0x20e9380 -> Node0x20e93f0;
	Node0x20e93f0 -> Node0x20e9490;
	Node0x20e9490 -> Node0x2089268;
	Node0x2089268 -> Node0x20e9930;
	Node0x20e9930 -> Node0x20e9980;
edge [color=red]
	Node0x20e84b0 -> Node0x20e8b60;
	Node0x20e8b60 -> Node0x20e8c20;
	Node0x20e8c90 -> Node0x20e8d00;
	Node0x20e8d00 -> Node0x20e8d70;
	Node0x20e8de0 -> Node0x20e8e50;
	Node0x20e8ec0 -> Node0x20e8f30;
	Node0x20e8f30 -> Node0x20e8fd0;
	Node0x20e8d00 -> Node0x20e9040;
	Node0x20e8e50 -> Node0x20e9040;
	Node0x20e9040 -> Node0x20e90e0;
	Node0x20e9150 -> Node0x20e91c0;
	Node0x20e8c90 -> Node0x20e91c0;
	Node0x20e91c0 -> Node0x20e9230;
	Node0x20e8d70 -> Node0x20e9230;
	Node0x20e9230 -> Node0x20e92a0;
	Node0x20e8c20 -> Node0x20e92a0;
	Node0x20e92a0 -> Node0x20e9310;
	Node0x20e8fd0 -> Node0x20e9310;
	Node0x20e9310 -> Node0x20e9380;
	Node0x20e8b60 -> Node0x20e9380;
	Node0x20e9380 -> Node0x20e93f0;
	Node0x20e90e0 -> Node0x20e93f0;
	Node0x20e93f0 -> Node0x20e9490;
	Node0x20e9490 -> Node0x2089268;
	Node0x2089268 -> Node0x20e9930;
}
