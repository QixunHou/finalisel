; ModuleID = '../.././c_source_file/0053_path_condition_crackme.c'
source_filename = "../.././c_source_file/0053_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = add i32 %4, 1
  %8 = or i32 %4, %3
  %9 = and i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %1
  %12 = and i32 %11, %10
  %13 = xor i32 %1, -1
  %14 = and i32 %13, %0
  %15 = xor i32 %14, -1
  %16 = xor i32 %2, %0
  %17 = and i32 %16, %15
  %18 = shl i32 %17, 1
  %19 = sub i32 %7, %12
  %20 = add i32 %19, %8
  %21 = sub i32 %20, %18
  %22 = and i32 %4, %3
  %23 = shl i32 %22, 1
  %24 = xor i32 %23, -2
  %25 = or i32 %6, %3
  %26 = and i32 %6, %3
  %27 = shl i32 %26, 1
  %28 = xor i32 %27, -2
  %29 = xor i32 %8, -1
  %30 = xor i32 %25, -1
  %31 = mul i32 %22, 7
  %32 = xor i32 %2, -1
  %33 = xor i32 %1, %0
  %34 = or i32 %33, %32
  %35 = or i32 %32, %0
  %36 = and i32 %32, %0
  %37 = or i32 %32, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %36, %38
  %40 = or i32 %2, %0
  %41 = xor i32 %40, %1
  %42 = or i32 %13, %0
  %43 = and i32 %42, %32
  %44 = and i32 %2, %1
  %45 = or i32 %44, %0
  %46 = or i32 %1, %0
  %47 = and i32 %11, %46
  %48 = xor i32 %11, -1
  %49 = and i32 %48, %10
  %50 = and i32 %2, %0
  %51 = xor i32 %33, -1
  %52 = and i32 %51, %2
  %53 = shl i32 %52, 1
  %54 = xor i32 %37, %0
  %55 = xor i32 %16, -1
  %56 = or i32 %14, %55
  %57 = xor i32 %36, -1
  %58 = and i32 %57, %1
  %59 = xor i32 %40, -1
  %60 = or i32 %59, %13
  %61 = and i32 %32, %1
  %62 = or i32 %61, %14
  %63 = and i32 %13, %2
  %64 = and i32 %63, %0
  %65 = or i32 %13, %2
  %66 = xor i32 %65, %0
  %67 = or i32 %64, %66
  %68 = xor i32 %61, -1
  %69 = xor i32 %35, -1
  %70 = shl i32 %69, 1
  %71 = xor i32 %40, %9
  %72 = xor i32 %42, -1
  %73 = or i32 %55, %72
  %74 = and i32 %55, %1
  %75 = and i32 %37, %0
  %76 = xor i32 %37, %9
  %77 = or i32 %2, %1
  %78 = xor i32 %77, -1
  %79 = xor i32 %78, %0
  %80 = or i32 %16, %1
  %81 = shl i32 %80, 1
  %82 = or i32 %11, %14
  %83 = and i32 %16, %42
  %84 = xor i32 %46, -1
  %85 = add i32 %46, 1
  %86 = and i32 %44, %0
  %87 = xor i32 %77, %0
  %88 = xor i32 %87, -1
  %89 = xor i32 %86, %88
  %90 = xor i32 %0, -1
  %91 = or i32 %48, %90
  %92 = or i32 %50, %84
  %93 = xor i32 %44, -1
  %94 = or i32 %93, %90
  %95 = shl i32 %94, 1
  %96 = or i32 %78, %90
  %97 = or i32 %77, %90
  %98 = shl i32 %97, 2
  %99 = or i32 %9, %32
  %100 = and i32 %63, %90
  %101 = or i32 %11, %90
  %102 = xor i32 %100, %101
  %103 = or i32 %9, %38
  %104 = and i32 %65, %0
  %105 = xor i32 %104, -1
  %106 = xor i32 %100, %105
  %107 = or i32 %37, %90
  %108 = or i32 %44, %90
  %109 = or i32 %32, %84
  %110 = or i32 %9, %2
  %111 = and i32 %15, %2
  %112 = or i32 %14, %2
  %113 = or i32 %51, %2
  %114 = or i32 %11, %84
  %115 = or i32 %68, %90
  %116 = and i32 %44, %90
  %117 = and i32 %11, %0
  %118 = xor i32 %117, -1
  %119 = xor i32 %116, %118
  %120 = xor i32 %11, %0
  %121 = xor i32 %120, -1
  %122 = or i32 %86, %121
  %123 = or i32 %55, %1
  %124 = or i32 %9, %55
  %125 = or i32 %11, %0
  %126 = xor i32 %64, %125
  %127 = or i32 %50, %61
  %128 = add i32 %9, 1
  %129 = or i32 %38, %0
  %130 = shl i32 %129, 1
  %131 = and i32 %35, %33
  %132 = xor i32 %14, %68
  %133 = and i32 %11, %15
  %134 = xor i32 %50, %42
  %135 = shl i32 %134, 1
  %136 = or i32 %59, %51
  %137 = or i32 %33, %69
  %138 = or i32 %16, %33
  %139 = add i32 %37, 1
  %140 = or i32 %48, %84
  %141 = xor i32 %46, %2
  %142 = add i32 %77, 1
  %143 = or i32 %11, %9
  %144 = xor i32 %50, -1
  %145 = xor i32 %144, %1
  %146 = or i32 %64, %120
  %147 = or i32 %72, %2
  %148 = shl i32 %147, 1
  %149 = xor i32 %72, %2
  %150 = xor i32 %44, %0
  %151 = xor i32 %35, %9
  %152 = or i32 %16, %51
  %153 = and i32 %16, %10
  %154 = or i32 %33, %55
  %155 = or i32 %59, %1
  %156 = xor i32 %38, %0
  %157 = or i32 %16, %84
  %158 = xor i32 %15, %2
  %159 = shl i32 %158, 1
  %160 = and i32 %65, %90
  %161 = or i32 %64, %160
  %162 = xor i32 %57, %1
  %163 = or i32 %78, %0
  %164 = xor i32 %86, %163
  %165 = and i32 %42, %2
  %166 = xor i32 %36, %93
  %167 = and i32 %40, %1
  %168 = shl i32 %167, 2
  %169 = xor i32 %10, %2
  %170 = or i32 %69, %1
  %171 = and i32 %48, %90
  %172 = shl i32 %171, 1
  %173 = xor i32 %93, %0
  %174 = and i32 %46, %48
  %175 = and i32 %16, %46
  %176 = and i32 %32, %10
  %177 = xor i32 %64, %121
  %178 = and i32 %16, %13
  %179 = and i32 %93, %90
  %180 = or i32 %55, %13
  %181 = or i32 %69, %13
  %182 = and i32 %35, %51
  %183 = and i32 %48, %15
  %184 = and i32 %46, %55
  %185 = and i32 %55, %15
  %186 = or i32 %32, %72
  %187 = and i32 %42, %48
  %188 = shl i32 %187, 1
  %189 = and i32 %33, %2
  %190 = and i32 %16, %51
  %191 = and i32 %144, %1
  %192 = or i32 %14, %48
  %193 = and i32 %55, %13
  %194 = and i32 %11, %42
  %195 = or i32 %36, %13
  %196 = shl i32 %195, 1
  %197 = or i32 %50, %33
  %198 = or i32 %14, %32
  %199 = and i32 %10, %2
  %200 = or i32 %100, %104
  %201 = or i32 %11, %72
  %202 = xor i32 %84, %2
  %203 = or i32 %36, %1
  %204 = and i32 %32, %51
  %205 = xor i32 %59, %1
  %206 = xor i32 %42, %2
  %207 = or i32 %86, %87
  %208 = xor i32 %68, %0
  %209 = and i32 %78, %90
  %210 = mul i32 %209, 11
  %211 = and i32 %61, %90
  %212 = and i32 %78, %0
  %213 = shl i32 %212, 2
  %214 = and i32 %61, %0
  %215 = mul i32 %214, 20
  %216 = and i32 %38, %90
  %217 = and i32 %38, %0
  %218 = sub i32 %68, %198
  %219 = sub i32 %218, %191
  %220 = add i32 %219, %30
  %221 = add i32 %220, %102
  %222 = mul i32 %221, 5
  %223 = add i32 %87, %199
  %224 = add i32 %223, %29
  %225 = add i32 %224, %146
  %226 = mul i32 %225, 3
  %227 = sub i32 %116, %217
  %228 = mul i32 %227, 6
  %229 = add i32 %86, %216
  %230 = mul i32 %229, 9
  %231 = add i32 %202, -1
  %232 = add i32 %231, %59
  %233 = add i32 %232, %48
  %234 = add i32 %233, %163
  %235 = add i32 %234, %155
  %236 = add i32 %235, %114
  %237 = add i32 %236, %108
  %238 = add i32 %237, %103
  %239 = add i32 %238, %60
  %240 = add i32 %239, %126
  %241 = shl i32 %240, 1
  %242 = add i32 %1, 4
  %243 = add i32 %242, %46
  %244 = add i32 %243, %85
  %245 = add i32 %244, %128
  %246 = add i32 %245, %33
  %247 = add i32 %246, 2
  %248 = add i32 %247, %3
  %249 = add i32 %248, %34
  %250 = add i32 %249, %35
  %251 = add i32 %250, %43
  %252 = sub i32 %251, %50
  %253 = add i32 %252, %99
  %254 = add i32 %253, %61
  %255 = sub i32 %254, %109
  %256 = sub i32 %255, %110
  %257 = sub i32 %256, %111
  %258 = sub i32 %257, %112
  %259 = add i32 %258, %113
  %260 = add i32 %259, %55
  %261 = sub i32 %260, %77
  %262 = add i32 %261, %139
  %263 = add i32 %262, %141
  %264 = add i32 %263, %142
  %265 = add i32 %264, %149
  %266 = sub i32 %265, %165
  %267 = sub i32 %266, %169
  %268 = sub i32 %267, %176
  %269 = add i32 %268, %11
  %270 = add i32 %269, %186
  %271 = sub i32 %270, %189
  %272 = add i32 %271, %36
  %273 = add i32 %272, %144
  %274 = add i32 %273, %44
  %275 = add i32 %274, %204
  %276 = sub i32 %275, %206
  %277 = sub i32 %276, %4
  %278 = add i32 %277, %39
  %279 = sub i32 %278, %41
  %280 = add i32 %279, %45
  %281 = add i32 %280, %47
  %282 = sub i32 %281, %49
  %283 = sub i32 %282, %53
  %284 = add i32 %283, %54
  %285 = sub i32 %284, %56
  %286 = sub i32 %285, %58
  %287 = sub i32 %286, %62
  %288 = sub i32 %287, %70
  %289 = sub i32 %288, %71
  %290 = add i32 %289, %73
  %291 = add i32 %290, %74
  %292 = sub i32 %291, %75
  %293 = sub i32 %292, %76
  %294 = sub i32 %293, %79
  %295 = add i32 %294, %82
  %296 = sub i32 %295, %83
  %297 = sub i32 %296, %91
  %298 = sub i32 %297, %92
  %299 = sub i32 %298, %96
  %300 = add i32 %299, %107
  %301 = sub i32 %300, %115
  %302 = sub i32 %301, %123
  %303 = sub i32 %302, %124
  %304 = add i32 %303, %127
  %305 = add i32 %304, %131
  %306 = add i32 %305, %132
  %307 = sub i32 %306, %133
  %308 = sub i32 %307, %136
  %309 = add i32 %308, %137
  %310 = sub i32 %309, %138
  %311 = sub i32 %310, %140
  %312 = sub i32 %311, %143
  %313 = add i32 %312, %145
  %314 = sub i32 %313, %148
  %315 = add i32 %314, %150
  %316 = add i32 %315, %151
  %317 = sub i32 %316, %152
  %318 = add i32 %317, %153
  %319 = sub i32 %318, %154
  %320 = sub i32 %319, %156
  %321 = sub i32 %320, %157
  %322 = sub i32 %321, %159
  %323 = sub i32 %322, %162
  %324 = add i32 %323, %166
  %325 = sub i32 %324, %170
  %326 = sub i32 %325, %101
  %327 = sub i32 %326, %173
  %328 = add i32 %327, %174
  %329 = add i32 %328, %175
  %330 = sub i32 %329, %178
  %331 = sub i32 %330, %179
  %332 = add i32 %331, %180
  %333 = add i32 %332, %181
  %334 = sub i32 %333, %182
  %335 = sub i32 %334, %183
  %336 = add i32 %335, %184
  %337 = add i32 %336, %185
  %338 = sub i32 %337, %190
  %339 = sub i32 %338, %192
  %340 = sub i32 %339, %193
  %341 = add i32 %340, %194
  %342 = sub i32 %341, %117
  %343 = add i32 %342, %197
  %344 = sub i32 %343, %120
  %345 = sub i32 %344, %201
  %346 = sub i32 %345, %203
  %347 = sub i32 %346, %205
  %348 = add i32 %347, %208
  %349 = add i32 %348, %211
  %350 = sub i32 %349, %25
  %351 = add i32 %350, %26
  %352 = add i32 %351, %67
  %353 = sub i32 %352, %81
  %354 = sub i32 %353, %89
  %355 = sub i32 %354, %95
  %356 = sub i32 %355, %98
  %357 = sub i32 %356, %106
  %358 = sub i32 %357, %119
  %359 = sub i32 %358, %122
  %360 = sub i32 %359, %130
  %361 = sub i32 %360, %135
  %362 = add i32 %361, %161
  %363 = sub i32 %362, %164
  %364 = sub i32 %363, %168
  %365 = sub i32 %364, %172
  %366 = sub i32 %365, %177
  %367 = sub i32 %366, %188
  %368 = sub i32 %367, %196
  %369 = add i32 %368, %200
  %370 = sub i32 %369, %207
  %371 = add i32 %370, %210
  %372 = add i32 %371, %213
  %373 = add i32 %372, %215
  %374 = add i32 %373, %31
  %375 = add i32 %374, %228
  %376 = add i32 %375, %230
  %377 = add i32 %376, %24
  %378 = sub i32 %377, %28
  %379 = add i32 %378, %226
  %380 = add i32 %379, %222
  %381 = add i32 %380, %241
  %382 = icmp eq i32 %21, %381
  %383 = select i1 %382, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %384 = tail call i32 @puts(i8* nonnull dereferenceable(1) %383)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
