digraph "DFG for'main' function" {
	Node0x77db48[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x77dbc8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x77dc58[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x77dcb8[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x77dd68[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x77e198[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x77e278[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x77e378[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x77e438[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x77e4e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x77e5a8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x77e658[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x778b10[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x77e858[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x77f7c8[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x77fe38[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x77fe98[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x77ff10[shape=record, label="  %14 = and i32 %12, %11"];
	Node0x77ff80[shape=record, label="  %15 = xor i32 %13, %10"];
	Node0x77fff0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x780060[shape=record, label="  %17 = xor i32 %10, -1"];
	Node0x7800d0[shape=record, label="  %18 = and i32 %13, %17"];
	Node0x780140[shape=record, label="  %19 = sub i32 %14, %18"];
	Node0x7801b0[shape=record, label="  %20 = add i32 %19, %16"];
	Node0x780220[shape=record, label="  %21 = xor i32 %12, -1"];
	Node0x780290[shape=record, label="  %22 = add i32 %12, 1"];
	Node0x780300[shape=record, label="  %23 = xor i32 %11, -1"];
	Node0x780370[shape=record, label="  %24 = and i32 %12, %23"];
	Node0x7803e0[shape=record, label="  %25 = or i32 %12, %11"];
	Node0x780450[shape=record, label="  %26 = shl i32 %12, 1"];
	Node0x7804c0[shape=record, label="  %27 = and i32 %11, %21"];
	Node0x780530[shape=record, label="  %28 = xor i32 %25, -1"];
	Node0x7805a0[shape=record, label="  %29 = shl i32 %13, 1"];
	Node0x780610[shape=record, label="  %30 = and i32 %13, %10"];
	Node0x780680[shape=record, label="  %31 = or i32 %13, %17"];
	Node0x7806f0[shape=record, label="  %32 = shl i32 %31, 2"];
	Node0x780760[shape=record, label="  %33 = xor i32 %32, -4"];
	Node0x7807d0[shape=record, label="  %34 = add i32 %22, %31"];
	Node0x780840[shape=record, label="  %35 = add i32 %34, %18"];
	Node0x7808b0[shape=record, label="  %36 = shl i32 %35, 1"];
	Node0x780920[shape=record, label="  %37 = xor i32 %12, %11"];
	Node0x780990[shape=record, label="  %38 = mul i32 %37, -5"];
	Node0x780a00[shape=record, label="  %39 = add i32 %14, %28"];
	Node0x780a70[shape=record, label="  %40 = mul i32 %39, -3"];
	Node0x780ae0[shape=record, label="  %41 = add i32 %24, -3"];
	Node0x780b50[shape=record, label="  %42 = add i32 %41, %25"];
	Node0x780bc0[shape=record, label="  %43 = sub i32 %42, %26"];
	Node0x780c30[shape=record, label="  %44 = add i32 %43, %27"];
	Node0x780ca0[shape=record, label="  %45 = add i32 %44, %13"];
	Node0x780d10[shape=record, label="  %46 = sub i32 %45, %29"];
	Node0x780d80[shape=record, label="  %47 = add i32 %46, %30"];
	Node0x780df0[shape=record, label="  %48 = add i32 %47, %38"];
	Node0x780e60[shape=record, label="  %49 = add i32 %48, %40"];
	Node0x780ed0[shape=record, label="  %50 = add i32 %49, %33"];
	Node0x780f40[shape=record, label="  %51 = add i32 %50, %36"];
	Node0x780fb0[shape=record, label="  %52 = icmp eq i32 %20, %51"];
	Node0x71d8b8[shape=record, label="  %53 = select i1 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x781040[shape=record, label="  %54 = call i32 @puts(i8* nonnull dereferenceable(1) %53) #5"];
	Node0x7812e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x781448[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x781558[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x781668[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x781728[shape=record, label="  ret i32 0"];
	Node0x77db48 -> Node0x77dbc8;
	Node0x77dbc8 -> Node0x77dc58;
	Node0x77dc58 -> Node0x77dcb8;
	Node0x77dcb8 -> Node0x77dd68;
	Node0x77dd68 -> Node0x77e198;
	Node0x77e198 -> Node0x77e278;
	Node0x77e278 -> Node0x77e378;
	Node0x77e378 -> Node0x77e438;
	Node0x77e438 -> Node0x77e4e8;
	Node0x77e4e8 -> Node0x77e5a8;
	Node0x77e5a8 -> Node0x77e658;
	Node0x77e658 -> Node0x778b10;
	Node0x778b10 -> Node0x77e858;
	Node0x77e858 -> Node0x77f7c8;
	Node0x77f7c8 -> Node0x77fe38;
	Node0x77fe38 -> Node0x77fe98;
	Node0x77fe98 -> Node0x77ff10;
	Node0x77ff10 -> Node0x77ff80;
	Node0x77ff80 -> Node0x77fff0;
	Node0x77fff0 -> Node0x780060;
	Node0x780060 -> Node0x7800d0;
	Node0x7800d0 -> Node0x780140;
	Node0x780140 -> Node0x7801b0;
	Node0x7801b0 -> Node0x780220;
	Node0x780220 -> Node0x780290;
	Node0x780290 -> Node0x780300;
	Node0x780300 -> Node0x780370;
	Node0x780370 -> Node0x7803e0;
	Node0x7803e0 -> Node0x780450;
	Node0x780450 -> Node0x7804c0;
	Node0x7804c0 -> Node0x780530;
	Node0x780530 -> Node0x7805a0;
	Node0x7805a0 -> Node0x780610;
	Node0x780610 -> Node0x780680;
	Node0x780680 -> Node0x7806f0;
	Node0x7806f0 -> Node0x780760;
	Node0x780760 -> Node0x7807d0;
	Node0x7807d0 -> Node0x780840;
	Node0x780840 -> Node0x7808b0;
	Node0x7808b0 -> Node0x780920;
	Node0x780920 -> Node0x780990;
	Node0x780990 -> Node0x780a00;
	Node0x780a00 -> Node0x780a70;
	Node0x780a70 -> Node0x780ae0;
	Node0x780ae0 -> Node0x780b50;
	Node0x780b50 -> Node0x780bc0;
	Node0x780bc0 -> Node0x780c30;
	Node0x780c30 -> Node0x780ca0;
	Node0x780ca0 -> Node0x780d10;
	Node0x780d10 -> Node0x780d80;
	Node0x780d80 -> Node0x780df0;
	Node0x780df0 -> Node0x780e60;
	Node0x780e60 -> Node0x780ed0;
	Node0x780ed0 -> Node0x780f40;
	Node0x780f40 -> Node0x780fb0;
	Node0x780fb0 -> Node0x71d8b8;
	Node0x71d8b8 -> Node0x781040;
	Node0x781040 -> Node0x7812e8;
	Node0x7812e8 -> Node0x781448;
	Node0x781448 -> Node0x781558;
	Node0x781558 -> Node0x781668;
	Node0x781668 -> Node0x781728;
edge [color=red]
	Node0x77db48 -> Node0x77dd68;
	Node0x77dd68 -> Node0x77e198;
	Node0x77dbc8 -> Node0x77e278;
	Node0x77e278 -> Node0x77e378;
	Node0x77dc58 -> Node0x77e438;
	Node0x77e438 -> Node0x77e4e8;
	Node0x77dcb8 -> Node0x77e5a8;
	Node0x77e5a8 -> Node0x77e658;
	Node0x77db48 -> Node0x778b10;
	Node0x77dbc8 -> Node0x778b10;
	Node0x77dc58 -> Node0x778b10;
	Node0x77dcb8 -> Node0x778b10;
	Node0x77db48 -> Node0x77e858;
	Node0x77dbc8 -> Node0x77f7c8;
	Node0x77dc58 -> Node0x77fe38;
	Node0x77dcb8 -> Node0x77fe98;
	Node0x77fe38 -> Node0x77ff10;
	Node0x77f7c8 -> Node0x77ff10;
	Node0x77fe98 -> Node0x77ff80;
	Node0x77e858 -> Node0x77ff80;
	Node0x77ff80 -> Node0x77fff0;
	Node0x77e858 -> Node0x780060;
	Node0x77fe98 -> Node0x7800d0;
	Node0x780060 -> Node0x7800d0;
	Node0x77ff10 -> Node0x780140;
	Node0x7800d0 -> Node0x780140;
	Node0x780140 -> Node0x7801b0;
	Node0x77fff0 -> Node0x7801b0;
	Node0x77fe38 -> Node0x780220;
	Node0x77fe38 -> Node0x780290;
	Node0x77f7c8 -> Node0x780300;
	Node0x77fe38 -> Node0x780370;
	Node0x780300 -> Node0x780370;
	Node0x77fe38 -> Node0x7803e0;
	Node0x77f7c8 -> Node0x7803e0;
	Node0x77fe38 -> Node0x780450;
	Node0x77f7c8 -> Node0x7804c0;
	Node0x780220 -> Node0x7804c0;
	Node0x7803e0 -> Node0x780530;
	Node0x77fe98 -> Node0x7805a0;
	Node0x77fe98 -> Node0x780610;
	Node0x77e858 -> Node0x780610;
	Node0x77fe98 -> Node0x780680;
	Node0x780060 -> Node0x780680;
	Node0x780680 -> Node0x7806f0;
	Node0x7806f0 -> Node0x780760;
	Node0x780290 -> Node0x7807d0;
	Node0x780680 -> Node0x7807d0;
	Node0x7807d0 -> Node0x780840;
	Node0x7800d0 -> Node0x780840;
	Node0x780840 -> Node0x7808b0;
	Node0x77fe38 -> Node0x780920;
	Node0x77f7c8 -> Node0x780920;
	Node0x780920 -> Node0x780990;
	Node0x77ff10 -> Node0x780a00;
	Node0x780530 -> Node0x780a00;
	Node0x780a00 -> Node0x780a70;
	Node0x780370 -> Node0x780ae0;
	Node0x780ae0 -> Node0x780b50;
	Node0x7803e0 -> Node0x780b50;
	Node0x780b50 -> Node0x780bc0;
	Node0x780450 -> Node0x780bc0;
	Node0x780bc0 -> Node0x780c30;
	Node0x7804c0 -> Node0x780c30;
	Node0x780c30 -> Node0x780ca0;
	Node0x77fe98 -> Node0x780ca0;
	Node0x780ca0 -> Node0x780d10;
	Node0x7805a0 -> Node0x780d10;
	Node0x780d10 -> Node0x780d80;
	Node0x780610 -> Node0x780d80;
	Node0x780d80 -> Node0x780df0;
	Node0x780990 -> Node0x780df0;
	Node0x780df0 -> Node0x780e60;
	Node0x780a70 -> Node0x780e60;
	Node0x780e60 -> Node0x780ed0;
	Node0x780760 -> Node0x780ed0;
	Node0x780ed0 -> Node0x780f40;
	Node0x7808b0 -> Node0x780f40;
	Node0x7801b0 -> Node0x780fb0;
	Node0x780f40 -> Node0x780fb0;
	Node0x780fb0 -> Node0x71d8b8;
	Node0x71d8b8 -> Node0x781040;
	Node0x77e5a8 -> Node0x7812e8;
	Node0x77e438 -> Node0x781448;
	Node0x77e278 -> Node0x781558;
	Node0x77dd68 -> Node0x781668;
}
