; ModuleID = '../.././c_source_file/1490_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1490_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = and i32 %2, %0
  %9 = or i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %8, %10
  %12 = sub i32 %7, %11
  %13 = and i32 %4, %3
  %14 = or i32 %5, %4
  %15 = xor i32 %14, -1
  %16 = or i32 %13, %15
  %17 = sub i32 %12, %16
  %18 = xor i32 %2, %0
  %19 = and i32 %18, %9
  %20 = xor i32 %2, %1
  %21 = xor i32 %20, %0
  %22 = xor i32 %1, -1
  %23 = or i32 %18, %22
  %24 = and i32 %22, %0
  %25 = xor i32 %2, -1
  %26 = and i32 %25, %1
  %27 = or i32 %26, %24
  %28 = or i32 %10, %2
  %29 = shl i32 %28, 1
  %30 = xor i32 %18, -1
  %31 = and i32 %30, %22
  %32 = and i32 %1, %0
  %33 = or i32 %32, %25
  %34 = or i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %1
  %37 = or i32 %22, %0
  %38 = and i32 %37, %30
  %39 = or i32 %32, %30
  %40 = xor i32 %26, -1
  %41 = and i32 %40, %0
  %42 = shl i32 %41, 1
  %43 = or i32 %32, %35
  %44 = and i32 %2, %1
  %45 = and i32 %44, %0
  %46 = xor i32 %0, -1
  %47 = or i32 %2, %1
  %48 = xor i32 %47, -1
  %49 = or i32 %48, %0
  %50 = xor i32 %45, %49
  %51 = or i32 %25, %0
  %52 = xor i32 %32, -1
  %53 = and i32 %18, %52
  %54 = or i32 %18, %32
  %55 = or i32 %20, %24
  %56 = or i32 %18, %1
  %57 = or i32 %7, %35
  %58 = or i32 %40, %46
  %59 = xor i32 %7, -1
  %60 = or i32 %18, %59
  %61 = and i32 %25, %0
  %62 = xor i32 %44, -1
  %63 = xor i32 %61, %62
  %64 = shl i32 %63, 1
  %65 = and i32 %52, %2
  %66 = xor i32 %32, %2
  %67 = or i32 %25, %1
  %68 = or i32 %67, %0
  %69 = add i32 %7, 1
  %70 = xor i32 %67, -1
  %71 = or i32 %32, %70
  %72 = and i32 %22, %2
  %73 = and i32 %72, %46
  %74 = or i32 %22, %2
  %75 = and i32 %74, %0
  %76 = xor i32 %75, -1
  %77 = xor i32 %73, %76
  %78 = xor i32 %51, -1
  %79 = or i32 %78, %1
  %80 = and i32 %18, %59
  %81 = shl i32 %80, 2
  %82 = xor i32 %61, -1
  %83 = and i32 %82, %59
  %84 = shl i32 %83, 1
  %85 = or i32 %59, %2
  %86 = or i32 %32, %78
  %87 = or i32 %8, %22
  %88 = and i32 %20, %9
  %89 = xor i32 %20, -1
  %90 = and i32 %9, %89
  %91 = and i32 %34, %22
  %92 = xor i32 %24, -1
  %93 = and i32 %20, %92
  %94 = or i32 %62, %46
  %95 = or i32 %24, %2
  %96 = and i32 %89, %92
  %97 = shl i32 %96, 1
  %98 = and i32 %20, %46
  %99 = or i32 %45, %98
  %100 = and i32 %59, %2
  %101 = and i32 %34, %1
  %102 = and i32 %44, %46
  %103 = and i32 %20, %0
  %104 = or i32 %102, %103
  %105 = and i32 %67, %46
  %106 = and i32 %47, %0
  %107 = xor i32 %102, -1
  %108 = xor i32 %106, %107
  %109 = or i32 %30, %1
  %110 = shl i32 %109, 1
  %111 = xor i32 %8, %37
  %112 = and i32 %72, %0
  %113 = or i32 %20, %0
  %114 = xor i32 %113, -1
  %115 = or i32 %112, %114
  %116 = or i32 %61, %44
  %117 = xor i32 %62, %0
  %118 = xor i32 %8, %47
  %119 = add i32 %9, 1
  %120 = xor i32 %8, -1
  %121 = add i32 %8, 1
  %122 = or i32 %47, %46
  %123 = or i32 %78, %22
  %124 = shl i32 %123, 1
  %125 = and i32 %120, %22
  %126 = or i32 %26, %46
  %127 = or i32 %8, %59
  %128 = or i32 %8, %7
  %129 = or i32 %25, %59
  %130 = or i32 %61, %59
  %131 = or i32 %8, %1
  %132 = shl i32 %131, 1
  %133 = xor i32 %37, -1
  %134 = xor i32 %133, %2
  %135 = xor i32 %8, %40
  %136 = xor i32 %21, -1
  %137 = or i32 %45, %136
  %138 = and i32 %40, %46
  %139 = and i32 %92, %2
  %140 = shl i32 %139, 1
  %141 = xor i32 %61, %67
  %142 = shl i32 %141, 1
  %143 = and i32 %20, %37
  %144 = and i32 %7, %25
  %145 = or i32 %25, %10
  %146 = xor i32 %9, %2
  %147 = or i32 %89, %10
  %148 = shl i32 %147, 1
  %149 = xor i32 %82, %1
  %150 = or i32 %48, %46
  %151 = xor i32 %89, %0
  %152 = and i32 %30, %52
  %153 = and i32 %62, %46
  %154 = and i32 %9, %2
  %155 = and i32 %82, %1
  %156 = and i32 %67, %0
  %157 = or i32 %30, %10
  %158 = shl i32 %157, 1
  %159 = or i32 %70, %46
  %160 = or i32 %61, %22
  %161 = or i32 %89, %0
  %162 = xor i32 %51, %32
  %163 = shl i32 %162, 1
  %164 = shl i32 %113, 1
  %165 = and i32 %89, %0
  %166 = shl i32 %165, 1
  %167 = or i32 %30, %133
  %168 = and i32 %18, %37
  %169 = xor i32 %34, %1
  %170 = xor i32 %112, %136
  %171 = or i32 %35, %59
  %172 = and i32 %18, %92
  %173 = or i32 %70, %0
  %174 = and i32 %18, %1
  %175 = xor i32 %40, %0
  %176 = or i32 %20, %32
  %177 = xor i32 %120, %1
  %178 = xor i32 %112, %113
  %179 = or i32 %7, %25
  %180 = shl i32 %179, 1
  %181 = and i32 %25, %59
  %182 = shl i32 %181, 1
  %183 = and i32 %62, %0
  %184 = xor i32 %98, -1
  %185 = xor i32 %45, %184
  %186 = or i32 %20, %46
  %187 = xor i32 %186, -1
  %188 = or i32 %73, %187
  %189 = and i32 %37, %89
  %190 = xor i32 %45, %21
  %191 = shl i32 %133, 2
  %192 = or i32 %18, %7
  %193 = xor i32 %61, %1
  %194 = shl i32 %193, 1
  %195 = or i32 %30, %22
  %196 = and i32 %9, %30
  %197 = and i32 %51, %1
  %198 = or i32 %32, %48
  %199 = and i32 %7, %2
  %200 = xor i32 %78, %1
  %201 = and i32 %7, %30
  %202 = or i32 %47, %0
  %203 = xor i32 %48, %0
  %204 = xor i32 %47, %0
  %205 = or i32 %45, %204
  %206 = xor i32 %67, %0
  %207 = shl i32 %206, 1
  %208 = and i32 %34, %59
  %209 = xor i32 %51, %1
  %210 = shl i32 %209, 1
  %211 = and i32 %20, %52
  %212 = shl i32 %211, 2
  %213 = or i32 %61, %70
  %214 = shl i32 %213, 1
  %215 = and i32 %89, %46
  %216 = or i32 %44, %0
  %217 = and i32 %51, %22
  %218 = or i32 %78, %59
  %219 = shl i32 %218, 1
  %220 = and i32 %34, %7
  %221 = or i32 %133, %2
  %222 = or i32 %8, %26
  %223 = and i32 %37, %25
  %224 = or i32 %18, %24
  %225 = or i32 %35, %22
  %226 = xor i32 %70, %0
  %227 = xor i32 %8, %1
  %228 = xor i32 %10, %2
  %229 = or i32 %62, %0
  %230 = xor i32 %103, %107
  %231 = xor i32 %24, %2
  %232 = and i32 %25, %52
  %233 = and i32 %30, %92
  %234 = or i32 %8, %133
  %235 = shl i32 %234, 1
  %236 = and i32 %82, %22
  %237 = xor i32 %74, %46
  %238 = xor i32 %237, %112
  %239 = or i32 %8, %48
  %240 = and i32 %74, %46
  %241 = or i32 %112, %240
  %242 = and i32 %48, %46
  %243 = mul i32 %242, 9
  %244 = and i32 %26, %46
  %245 = and i32 %48, %0
  %246 = mul i32 %245, -14
  %247 = and i32 %26, %0
  %248 = and i32 %70, %46
  %249 = mul i32 %102, 19
  %250 = and i32 %70, %0
  %251 = mul i32 %250, 25
  %252 = mul i32 %45, -6
  %253 = xor i32 %3, -1
  %254 = or i32 %253, %4
  %255 = xor i32 %254, %5
  %256 = xor i32 %5, -1
  %257 = or i32 %256, %4
  %258 = xor i32 %257, -1
  %259 = or i32 %13, %258
  %260 = and i32 %253, %5
  %261 = and i32 %260, %4
  %262 = xor i32 %4, -1
  %263 = or i32 %253, %5
  %264 = xor i32 %263, 1073741823
  %265 = or i32 %264, %4
  %266 = xor i32 %265, %261
  %267 = shl i32 %266, 2
  %268 = xor i32 %5, %4
  %269 = add i32 %5, 1
  %270 = xor i32 %4, %3
  %271 = and i32 %270, %5
  %272 = and i32 %253, %4
  %273 = xor i32 %5, %3
  %274 = or i32 %273, %272
  %275 = and i32 %256, %3
  %276 = or i32 %275, %272
  %277 = xor i32 %270, -1
  %278 = and i32 %277, %5
  %279 = or i32 %268, %270
  %280 = or i32 %4, %3
  %281 = xor i32 %280, -1
  %282 = xor i32 %273, -1
  %283 = or i32 %282, %281
  %284 = or i32 %5, %3
  %285 = and i32 %284, %262
  %286 = and i32 %5, %4
  %287 = xor i32 %286, -1
  %288 = and i32 %287, %253
  %289 = or i32 %15, %277
  %290 = or i32 %277, %5
  %291 = and i32 %273, %280
  %292 = xor i32 %254, -1
  %293 = add i32 %254, 1
  %294 = and i32 %256, %4
  %295 = or i32 %294, %277
  %296 = xor i32 %286, %280
  %297 = xor i32 %272, -1
  %298 = add i32 %272, 1
  %299 = or i32 %273, %292
  %300 = xor i32 %275, 2147483647
  %301 = and i32 %300, %4
  %302 = shl i32 %301, 1
  %303 = or i32 %268, %281
  %304 = and i32 %5, %3
  %305 = or i32 %294, %304
  %306 = and i32 %304, %4
  %307 = and i32 %273, %262
  %308 = or i32 %306, %307
  %309 = xor i32 %14, %13
  %310 = or i32 %272, %5
  %311 = and i32 %260, %262
  %312 = xor i32 %273, 2147483647
  %313 = and i32 %312, %4
  %314 = or i32 %313, %311
  %315 = xor i32 %284, -1
  %316 = xor i32 %315, %4
  %317 = or i32 %286, %281
  %318 = xor i32 %304, -1
  %319 = xor i32 %273, %4
  %320 = xor i32 %272, %318
  %321 = shl i32 %320, 1
  %322 = or i32 %286, %270
  %323 = xor i32 %306, %319
  %324 = and i32 %282, %4
  %325 = or i32 %13, %256
  %326 = or i32 %286, %292
  %327 = shl i32 %326, 1
  %328 = xor i32 %268, -1
  %329 = or i32 %328, %277
  %330 = xor i32 %13, %5
  %331 = and i32 %328, %297
  %332 = or i32 %284, %262
  %333 = or i32 %282, %4
  %334 = or i32 %318, %262
  %335 = shl i32 %334, 1
  %336 = and i32 %280, %328
  %337 = or i32 %286, %277
  %338 = or i32 %294, %3
  %339 = or i32 %256, %3
  %340 = xor i32 %339, %4
  %341 = and i32 %268, %280
  %342 = and i32 %328, %3
  %343 = xor i32 %284, %262
  %344 = xor i32 %343, %306
  %345 = xor i32 %287, %3
  %346 = or i32 %281, %5
  %347 = shl i32 %346, 1
  %348 = and i32 %268, %3
  %349 = or i32 %258, %253
  %350 = or i32 %304, %262
  %351 = or i32 %286, %253
  %352 = and i32 %339, %4
  %353 = xor i32 %286, %3
  %354 = and i32 %14, %253
  %355 = and i32 %257, %270
  %356 = xor i32 %297, %5
  %357 = xor i32 %257, %13
  %358 = or i32 %15, %253
  %359 = or i32 %272, %328
  %360 = and i32 %14, %270
  %361 = xor i32 %13, -1
  %362 = and i32 %361, %5
  %363 = or i32 %318, %4
  %364 = xor i32 %263, %4
  %365 = or i32 %261, %364
  %366 = xor i32 %319, 1073741823
  %367 = or i32 %366, %306
  %368 = and i32 %315, %262
  %369 = and i32 %275, %262
  %370 = mul i32 %369, 7
  %371 = and i32 %315, %4
  %372 = and i32 %275, %4
  %373 = xor i32 %339, -1
  %374 = and i32 %373, %262
  %375 = and i32 %304, %262
  %376 = and i32 %373, %4
  %377 = shl i32 %306, 3
  %378 = add i32 %231, %22
  %379 = add i32 %378, %35
  %380 = add i32 %379, %247
  %381 = add i32 %380, %229
  %382 = add i32 %381, %222
  %383 = add i32 %382, %202
  %384 = add i32 %383, %198
  %385 = add i32 %384, %177
  %386 = add i32 %385, %155
  %387 = add i32 %386, %116
  %388 = add i32 %387, %111
  %389 = add i32 %388, %57
  %390 = add i32 %389, %56
  %391 = add i32 %390, %55
  %392 = add i32 %391, %36
  %393 = add i32 %392, %27
  %394 = sub i32 %393, %19
  %395 = add i32 %394, %104
  %396 = add i32 %395, %99
  %397 = add i32 %396, %374
  %398 = add i32 %397, %348
  %399 = add i32 %398, %336
  %400 = add i32 %399, %296
  %401 = add i32 %400, %365
  %402 = add i32 %401, %323
  %403 = add i32 %402, %314
  %404 = shl i32 %403, 1
  %405 = sub i32 %145, %105
  %406 = sub i32 %405, %238
  %407 = add i32 %406, %230
  %408 = add i32 %407, %319
  %409 = sub i32 %408, %363
  %410 = mul i32 %409, 5
  %411 = add i32 %233, %244
  %412 = add i32 %411, %226
  %413 = add i32 %412, %178
  %414 = add i32 %413, %367
  %415 = shl i32 %414, 2
  %416 = sub i32 %28, %34
  %417 = sub i32 %416, %248
  %418 = sub i32 %417, %50
  %419 = sub i32 %418, %278
  %420 = add i32 %419, %360
  %421 = add i32 %420, %372
  %422 = mul i32 %421, 3
  %423 = add i32 %0, 3
  %424 = sub i32 %423, %9
  %425 = add i32 %424, %69
  %426 = add i32 %425, %24
  %427 = add i32 %426, %119
  %428 = sub i32 %427, %2
  %429 = sub i32 %428, %33
  %430 = sub i32 %429, %51
  %431 = add i32 %430, %65
  %432 = add i32 %431, %66
  %433 = add i32 %432, %85
  %434 = add i32 %433, %95
  %435 = sub i32 %434, %26
  %436 = sub i32 %435, %100
  %437 = add i32 %436, %89
  %438 = add i32 %437, %121
  %439 = sub i32 %438, %129
  %440 = sub i32 %439, %18
  %441 = sub i32 %440, %134
  %442 = sub i32 %441, %144
  %443 = sub i32 %442, %146
  %444 = sub i32 %443, %154
  %445 = add i32 %444, %44
  %446 = sub i32 %445, %191
  %447 = add i32 %446, %199
  %448 = add i32 %447, %67
  %449 = add i32 %448, %221
  %450 = add i32 %449, %223
  %451 = sub i32 %450, %228
  %452 = add i32 %451, %232
  %453 = sub i32 %452, %21
  %454 = sub i32 %453, %23
  %455 = sub i32 %454, %29
  %456 = sub i32 %455, %31
  %457 = add i32 %456, %38
  %458 = add i32 %457, %39
  %459 = sub i32 %458, %43
  %460 = add i32 %459, %53
  %461 = add i32 %460, %54
  %462 = add i32 %461, %58
  %463 = sub i32 %462, %60
  %464 = add i32 %463, %68
  %465 = sub i32 %464, %71
  %466 = add i32 %465, %79
  %467 = add i32 %466, %86
  %468 = add i32 %467, %87
  %469 = add i32 %468, %88
  %470 = add i32 %469, %90
  %471 = add i32 %470, %91
  %472 = sub i32 %471, %93
  %473 = add i32 %472, %94
  %474 = sub i32 %473, %101
  %475 = add i32 %474, %117
  %476 = sub i32 %475, %118
  %477 = add i32 %476, %122
  %478 = add i32 %477, %125
  %479 = add i32 %478, %126
  %480 = sub i32 %479, %127
  %481 = add i32 %480, %128
  %482 = add i32 %481, %130
  %483 = sub i32 %482, %135
  %484 = add i32 %483, %138
  %485 = sub i32 %484, %140
  %486 = sub i32 %485, %143
  %487 = sub i32 %486, %149
  %488 = add i32 %487, %150
  %489 = sub i32 %488, %151
  %490 = sub i32 %489, %152
  %491 = add i32 %490, %153
  %492 = add i32 %491, %106
  %493 = add i32 %492, %156
  %494 = sub i32 %493, %159
  %495 = add i32 %494, %160
  %496 = add i32 %495, %161
  %497 = sub i32 %496, %167
  %498 = add i32 %497, %168
  %499 = sub i32 %498, %169
  %500 = sub i32 %499, %171
  %501 = add i32 %500, %172
  %502 = sub i32 %501, %173
  %503 = sub i32 %502, %174
  %504 = sub i32 %503, %175
  %505 = sub i32 %504, %176
  %506 = sub i32 %505, %180
  %507 = sub i32 %506, %182
  %508 = sub i32 %507, %183
  %509 = add i32 %508, %189
  %510 = add i32 %509, %192
  %511 = add i32 %510, %195
  %512 = add i32 %511, %196
  %513 = add i32 %512, %197
  %514 = sub i32 %513, %103
  %515 = sub i32 %514, %200
  %516 = sub i32 %515, %201
  %517 = sub i32 %516, %49
  %518 = sub i32 %517, %203
  %519 = sub i32 %518, %208
  %520 = add i32 %519, %215
  %521 = add i32 %520, %216
  %522 = add i32 %521, %217
  %523 = sub i32 %522, %220
  %524 = sub i32 %523, %224
  %525 = add i32 %524, %225
  %526 = add i32 %525, %227
  %527 = add i32 %526, %98
  %528 = sub i32 %527, %236
  %529 = sub i32 %528, %239
  %530 = sub i32 %529, %186
  %531 = sub i32 %530, %42
  %532 = sub i32 %531, %64
  %533 = sub i32 %532, %77
  %534 = sub i32 %533, %81
  %535 = sub i32 %534, %84
  %536 = sub i32 %535, %97
  %537 = sub i32 %536, %108
  %538 = sub i32 %537, %110
  %539 = sub i32 %538, %115
  %540 = sub i32 %539, %124
  %541 = sub i32 %540, %132
  %542 = add i32 %541, %137
  %543 = sub i32 %542, %142
  %544 = sub i32 %543, %148
  %545 = sub i32 %544, %158
  %546 = sub i32 %545, %163
  %547 = sub i32 %546, %164
  %548 = sub i32 %547, %166
  %549 = add i32 %548, %170
  %550 = sub i32 %549, %185
  %551 = sub i32 %550, %188
  %552 = add i32 %551, %190
  %553 = sub i32 %552, %194
  %554 = add i32 %553, %205
  %555 = sub i32 %554, %207
  %556 = sub i32 %555, %210
  %557 = sub i32 %556, %212
  %558 = sub i32 %557, %214
  %559 = sub i32 %558, %219
  %560 = sub i32 %559, %235
  %561 = sub i32 %560, %241
  %562 = add i32 %561, %243
  %563 = add i32 %562, %246
  %564 = add i32 %563, %249
  %565 = add i32 %564, %251
  %566 = add i32 %565, %252
  %567 = add i32 %566, %269
  %568 = add i32 %567, %293
  %569 = add i32 %568, %298
  %570 = add i32 %569, %254
  %571 = sub i32 %570, %270
  %572 = sub i32 %571, %255
  %573 = sub i32 %572, %268
  %574 = sub i32 %573, %271
  %575 = sub i32 %574, %290
  %576 = add i32 %575, %310
  %577 = add i32 %576, %318
  %578 = add i32 %577, %325
  %579 = sub i32 %578, %330
  %580 = add i32 %579, %14
  %581 = add i32 %580, %356
  %582 = sub i32 %581, %362
  %583 = sub i32 %582, %259
  %584 = sub i32 %583, %274
  %585 = sub i32 %584, %276
  %586 = sub i32 %585, %279
  %587 = add i32 %586, %283
  %588 = add i32 %587, %285
  %589 = add i32 %588, %288
  %590 = add i32 %589, %289
  %591 = add i32 %590, %291
  %592 = sub i32 %591, %295
  %593 = add i32 %592, %299
  %594 = add i32 %593, %303
  %595 = add i32 %594, %305
  %596 = add i32 %595, %309
  %597 = add i32 %596, %316
  %598 = sub i32 %597, %317
  %599 = sub i32 %598, %322
  %600 = sub i32 %599, %324
  %601 = add i32 %600, %329
  %602 = add i32 %601, %331
  %603 = add i32 %602, %332
  %604 = add i32 %603, %333
  %605 = sub i32 %604, %337
  %606 = sub i32 %605, %338
  %607 = sub i32 %606, %340
  %608 = sub i32 %607, %341
  %609 = sub i32 %608, %342
  %610 = sub i32 %609, %345
  %611 = sub i32 %610, %347
  %612 = add i32 %611, %349
  %613 = sub i32 %612, %350
  %614 = sub i32 %613, %351
  %615 = sub i32 %614, %352
  %616 = sub i32 %615, %353
  %617 = add i32 %616, %354
  %618 = sub i32 %617, %355
  %619 = add i32 %618, %357
  %620 = add i32 %619, %358
  %621 = sub i32 %620, %359
  %622 = sub i32 %621, %368
  %623 = add i32 %622, %371
  %624 = sub i32 %623, %375
  %625 = add i32 %624, %376
  %626 = sub i32 %625, %308
  %627 = sub i32 %626, %321
  %628 = sub i32 %627, %327
  %629 = sub i32 %628, %335
  %630 = add i32 %629, %344
  %631 = add i32 %630, %370
  %632 = add i32 %631, %377
  %633 = sub i32 %632, %302
  %634 = sub i32 %633, %267
  %635 = add i32 %634, %410
  %636 = add i32 %635, %415
  %637 = add i32 %636, %422
  %638 = add i32 %637, %404
  %639 = icmp eq i32 %17, %638
  %640 = select i1 %639, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %641 = tail call i32 @puts(i8* nonnull dereferenceable(1) %640)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
