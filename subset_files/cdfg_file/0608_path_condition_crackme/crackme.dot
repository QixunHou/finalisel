digraph "DFG for'crackme' function" {
	Node0x1add030[shape=record, label="  %5 = add i32 %2, 1"];
	Node0x1add0d0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1add140[shape=record, label="  %7 = or i32 %6, %2"];
	Node0x1add1b0[shape=record, label="  %8 = sub i32 %5, %7"];
	Node0x1add220[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x1add290[shape=record, label="  %10 = and i32 %9, %3"];
	Node0x1add300[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1add370[shape=record, label="  %12 = add i32 %8, %11"];
	Node0x1add3e0[shape=record, label="  %13 = or i32 %9, %3"];
	Node0x1add450[shape=record, label="  %14 = sub i32 %12, %13"];
	Node0x1add4c0[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x1add530[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x1add5a0[shape=record, label="  %17 = xor i32 %6, %2"];
	Node0x1add610[shape=record, label="  %18 = or i32 %2, %1"];
	Node0x1add680[shape=record, label="  %19 = shl i32 %2, 1"];
	Node0x1add6f0[shape=record, label="  %20 = shl i32 %1, 1"];
	Node0x1add790[shape=record, label="  %21 = xor i32 %20, -2"];
	Node0x1add800[shape=record, label="  %22 = and i32 %6, %2"];
	Node0x1add870[shape=record, label="  %23 = shl i32 %15, 1"];
	Node0x1add8e0[shape=record, label="  %24 = shl i32 %13, 1"];
	Node0x1add950[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x1add9c0[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x1adda60[shape=record, label="  %27 = sub i32 2, %0"];
	Node0x1addad0[shape=record, label="  %28 = add i32 %27, %1"];
	Node0x1addb40[shape=record, label="  %29 = add i32 %28, %17"];
	Node0x1addbb0[shape=record, label="  %30 = add i32 %29, %16"];
	Node0x1addc20[shape=record, label="  %31 = sub i32 %30, %18"];
	Node0x1addc90[shape=record, label="  %32 = add i32 %31, %19"];
	Node0x1addf10[shape=record, label="  %33 = sub i32 %32, %21"];
	Node0x1addf80[shape=record, label="  %34 = add i32 %33, %22"];
	Node0x1addff0[shape=record, label="  %35 = sub i32 %34, %23"];
	Node0x1ade060[shape=record, label="  %36 = sub i32 %35, %10"];
	Node0x1ade0d0[shape=record, label="  %37 = add i32 %36, %26"];
	Node0x1ade140[shape=record, label="  %38 = add i32 %37, %25"];
	Node0x1ade1b0[shape=record, label="  %39 = icmp eq i32 %14, %38"];
	Node0x1a7d268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ade650[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x1ade6a0[shape=record, label="  ret void"];
	Node0x1add030 -> Node0x1add0d0;
	Node0x1add0d0 -> Node0x1add140;
	Node0x1add140 -> Node0x1add1b0;
	Node0x1add1b0 -> Node0x1add220;
	Node0x1add220 -> Node0x1add290;
	Node0x1add290 -> Node0x1add300;
	Node0x1add300 -> Node0x1add370;
	Node0x1add370 -> Node0x1add3e0;
	Node0x1add3e0 -> Node0x1add450;
	Node0x1add450 -> Node0x1add4c0;
	Node0x1add4c0 -> Node0x1add530;
	Node0x1add530 -> Node0x1add5a0;
	Node0x1add5a0 -> Node0x1add610;
	Node0x1add610 -> Node0x1add680;
	Node0x1add680 -> Node0x1add6f0;
	Node0x1add6f0 -> Node0x1add790;
	Node0x1add790 -> Node0x1add800;
	Node0x1add800 -> Node0x1add870;
	Node0x1add870 -> Node0x1add8e0;
	Node0x1add8e0 -> Node0x1add950;
	Node0x1add950 -> Node0x1add9c0;
	Node0x1add9c0 -> Node0x1adda60;
	Node0x1adda60 -> Node0x1addad0;
	Node0x1addad0 -> Node0x1addb40;
	Node0x1addb40 -> Node0x1addbb0;
	Node0x1addbb0 -> Node0x1addc20;
	Node0x1addc20 -> Node0x1addc90;
	Node0x1addc90 -> Node0x1addf10;
	Node0x1addf10 -> Node0x1addf80;
	Node0x1addf80 -> Node0x1addff0;
	Node0x1addff0 -> Node0x1ade060;
	Node0x1ade060 -> Node0x1ade0d0;
	Node0x1ade0d0 -> Node0x1ade140;
	Node0x1ade140 -> Node0x1ade1b0;
	Node0x1ade1b0 -> Node0x1a7d268;
	Node0x1a7d268 -> Node0x1ade650;
	Node0x1ade650 -> Node0x1ade6a0;
edge [color=red]
	Node0x1add0d0 -> Node0x1add140;
	Node0x1add030 -> Node0x1add1b0;
	Node0x1add140 -> Node0x1add1b0;
	Node0x1add220 -> Node0x1add290;
	Node0x1add290 -> Node0x1add300;
	Node0x1add1b0 -> Node0x1add370;
	Node0x1add300 -> Node0x1add370;
	Node0x1add220 -> Node0x1add3e0;
	Node0x1add370 -> Node0x1add450;
	Node0x1add3e0 -> Node0x1add450;
	Node0x1add4c0 -> Node0x1add530;
	Node0x1add0d0 -> Node0x1add5a0;
	Node0x1add6f0 -> Node0x1add790;
	Node0x1add0d0 -> Node0x1add800;
	Node0x1add4c0 -> Node0x1add870;
	Node0x1add3e0 -> Node0x1add8e0;
	Node0x1add8e0 -> Node0x1add950;
	Node0x1adda60 -> Node0x1addad0;
	Node0x1addad0 -> Node0x1addb40;
	Node0x1add5a0 -> Node0x1addb40;
	Node0x1addb40 -> Node0x1addbb0;
	Node0x1add530 -> Node0x1addbb0;
	Node0x1addbb0 -> Node0x1addc20;
	Node0x1add610 -> Node0x1addc20;
	Node0x1addc20 -> Node0x1addc90;
	Node0x1add680 -> Node0x1addc90;
	Node0x1addc90 -> Node0x1addf10;
	Node0x1add790 -> Node0x1addf10;
	Node0x1addf10 -> Node0x1addf80;
	Node0x1add800 -> Node0x1addf80;
	Node0x1addf80 -> Node0x1addff0;
	Node0x1add870 -> Node0x1addff0;
	Node0x1addff0 -> Node0x1ade060;
	Node0x1add290 -> Node0x1ade060;
	Node0x1ade060 -> Node0x1ade0d0;
	Node0x1add9c0 -> Node0x1ade0d0;
	Node0x1ade0d0 -> Node0x1ade140;
	Node0x1add950 -> Node0x1ade140;
	Node0x1add450 -> Node0x1ade1b0;
	Node0x1ade140 -> Node0x1ade1b0;
	Node0x1ade1b0 -> Node0x1a7d268;
	Node0x1a7d268 -> Node0x1ade650;
}
