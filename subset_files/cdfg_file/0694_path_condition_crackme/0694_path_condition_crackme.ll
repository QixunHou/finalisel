; ModuleID = '../.././c_source_file/0694_path_condition_crackme.c'
source_filename = "../.././c_source_file/0694_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %1, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %2, %0
  %11 = or i32 %10, %9
  %12 = add i32 %3, 1
  %13 = sub i32 %12, %11
  %14 = add i32 %13, %6
  %15 = xor i32 %4, 2147483647
  %16 = and i32 %15, %3
  %17 = xor i32 %4, %3
  %18 = or i32 %4, %3
  %19 = shl i32 %18, 1
  %20 = xor i32 %3, -1
  %21 = and i32 %20, %4
  %22 = xor i32 %2, %1
  %23 = xor i32 %22, -1
  %24 = and i32 %8, %23
  %25 = or i32 %10, %7
  %26 = xor i32 %2, -1
  %27 = xor i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %26, %28
  %30 = shl i32 %29, 1
  %31 = and i32 %2, %0
  %32 = or i32 %31, %9
  %33 = or i32 %27, %2
  %34 = and i32 %2, %1
  %35 = and i32 %34, %0
  %36 = or i32 %2, %1
  %37 = xor i32 %36, %0
  %38 = xor i32 %35, -1
  %39 = xor i32 %37, %38
  %40 = xor i32 %34, -1
  %41 = xor i32 %40, %0
  %42 = and i32 %7, %0
  %43 = or i32 %42, %26
  %44 = shl i32 %43, 1
  %45 = and i32 %1, %0
  %46 = xor i32 %45, %2
  %47 = shl i32 %46, 1
  %48 = or i32 %1, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %23, %49
  %51 = and i32 %8, %2
  %52 = or i32 %26, %0
  %53 = xor i32 %52, -1
  %54 = xor i32 %53, %1
  %55 = and i32 %28, %2
  %56 = xor i32 %49, %2
  %57 = or i32 %10, %27
  %58 = xor i32 %31, -1
  %59 = and i32 %58, %28
  %60 = xor i32 %0, -1
  %61 = and i32 %7, %2
  %62 = and i32 %61, %60
  %63 = or i32 %7, %2
  %64 = and i32 %63, %0
  %65 = xor i32 %64, -1
  %66 = xor i32 %62, %65
  %67 = and i32 %40, %0
  %68 = xor i32 %48, %2
  %69 = or i32 %22, %60
  %70 = xor i32 %62, %69
  %71 = and i32 %26, %1
  %72 = xor i32 %71, -1
  %73 = xor i32 %31, %72
  %74 = xor i32 %22, %0
  %75 = xor i32 %10, -1
  %76 = or i32 %27, %75
  %77 = or i32 %45, %75
  %78 = xor i32 %31, %48
  %79 = shl i32 %31, 1
  %80 = or i32 %31, %28
  %81 = or i32 %31, %49
  %82 = or i32 %34, %42
  %83 = and i32 %61, %0
  %84 = and i32 %63, %60
  %85 = xor i32 %84, -1
  %86 = xor i32 %83, %85
  %87 = or i32 %45, %26
  %88 = xor i32 %36, -1
  %89 = or i32 %31, %88
  %90 = xor i32 %45, -1
  %91 = and i32 %26, %90
  %92 = or i32 %83, %74
  %93 = shl i32 %92, 1
  %94 = xor i32 %93, -1
  %95 = and i32 %36, %0
  %96 = or i32 %2, %0
  %97 = xor i32 %96, %45
  %98 = or i32 %26, %1
  %99 = shl i32 %98, 1
  %100 = and i32 %26, %0
  %101 = xor i32 %100, %40
  %102 = xor i32 %96, -1
  %103 = or i32 %45, %102
  %104 = or i32 %100, %7
  %105 = shl i32 %104, 1
  %106 = xor i32 %100, -1
  %107 = and i32 %27, %106
  %108 = or i32 %34, %0
  %109 = and i32 %98, %60
  %110 = xor i32 %63, %0
  %111 = or i32 %83, %110
  %112 = add i32 %100, 1
  %113 = or i32 %31, %71
  %114 = or i32 %88, %60
  %115 = and i32 %8, %26
  %116 = and i32 %22, %60
  %117 = xor i32 %116, %38
  %118 = xor i32 %42, -1
  %119 = and i32 %22, %118
  %120 = or i32 %10, %49
  %121 = and i32 %52, %1
  %122 = xor i32 %98, -1
  %123 = or i32 %122, %60
  %124 = or i32 %10, %28
  %125 = and i32 %58, %7
  %126 = and i32 %106, %7
  %127 = or i32 %83, %84
  %128 = xor i32 %35, %74
  %129 = shl i32 %128, 1
  %130 = and i32 %8, %75
  %131 = xor i32 %72, %0
  %132 = xor i32 %8, %2
  %133 = and i32 %10, %28
  %134 = xor i32 %23, %0
  %135 = shl i32 %134, 1
  %136 = or i32 %42, %23
  %137 = or i32 %27, %53
  %138 = shl i32 %137, 1
  %139 = and i32 %22, %0
  %140 = and i32 %22, %8
  %141 = or i32 %22, %0
  %142 = xor i32 %141, -1
  %143 = or i32 %83, %142
  %144 = or i32 %45, %122
  %145 = and i32 %34, %60
  %146 = xor i32 %145, -1
  %147 = xor i32 %95, %146
  %148 = or i32 %31, %1
  %149 = or i32 %42, %2
  %150 = shl i32 %149, 1
  %151 = xor i32 %31, %1
  %152 = xor i32 %122, %0
  %153 = and i32 %48, %26
  %154 = xor i32 %90, %2
  %155 = and i32 %96, %7
  %156 = xor i32 %83, %141
  %157 = and i32 %27, %58
  %158 = and i32 %23, %60
  %159 = or i32 %100, %34
  %160 = xor i32 %69, -1
  %161 = or i32 %62, %160
  %162 = and i32 %72, %60
  %163 = or i32 %88, %0
  %164 = xor i32 %31, %8
  %165 = shl i32 %164, 1
  %166 = or i32 %53, %1
  %167 = or i32 %45, %53
  %168 = or i32 %122, %0
  %169 = or i32 %28, %2
  %170 = shl i32 %169, 1
  %171 = or i32 %49, %2
  %172 = or i32 %145, %139
  %173 = or i32 %27, %102
  %174 = and i32 %10, %48
  %175 = shl i32 %174, 1
  %176 = and i32 %106, %28
  %177 = xor i32 %74, -1
  %178 = xor i32 %83, %177
  %179 = xor i32 %96, %1
  %180 = shl i32 %179, 1
  %181 = or i32 %145, %95
  %182 = and i32 %10, %90
  %183 = shl i32 %182, 2
  %184 = or i32 %40, %60
  %185 = add i32 %10, 1
  %186 = and i32 %23, %0
  %187 = or i32 %23, %0
  %188 = or i32 %22, %45
  %189 = or i32 %98, %60
  %190 = and i32 %10, %7
  %191 = or i32 %31, %7
  %192 = and i32 %75, %90
  %193 = or i32 %75, %1
  %194 = and i32 %52, %7
  %195 = and i32 %75, %28
  %196 = or i32 %75, %7
  %197 = and i32 %27, %2
  %198 = or i32 %98, %0
  %199 = shl i32 %198, 1
  %200 = and i32 %96, %28
  %201 = and i32 %48, %75
  %202 = and i32 %98, %0
  %203 = or i32 %75, %28
  %204 = xor i32 %118, %2
  %205 = xor i32 %42, %72
  %206 = or i32 %102, %1
  %207 = shl i32 %206, 1
  %208 = xor i32 %52, %45
  %209 = and i32 %118, %2
  %210 = and i32 %96, %1
  %211 = and i32 %26, %118
  %212 = xor i32 %139, %146
  %213 = or i32 %36, %60
  %214 = or i32 %34, %60
  %215 = or i32 %22, %42
  %216 = and i32 %75, %118
  %217 = or i32 %102, %7
  %218 = xor i32 %31, %36
  %219 = or i32 %40, %0
  %220 = or i32 %23, %9
  %221 = or i32 %100, %122
  %222 = xor i32 %102, %1
  %223 = or i32 %53, %7
  %224 = or i32 %35, %37
  %225 = and i32 %36, %60
  %226 = or i32 %35, %225
  %227 = xor i32 %58, %1
  %228 = and i32 %22, %48
  %229 = and i32 %10, %27
  %230 = add i32 %36, 1
  %231 = or i32 %53, %28
  %232 = or i32 %72, %0
  %233 = xor i32 %9, %2
  %234 = xor i32 %110, 2147483647
  %235 = xor i32 %234, %83
  %236 = shl i32 %235, 1
  %237 = and i32 %52, %27
  %238 = and i32 %72, %0
  %239 = or i32 %71, %42
  %240 = or i32 %35, %116
  %241 = or i32 %22, %49
  %242 = or i32 %71, %0
  %243 = and i32 %27, %75
  %244 = xor i32 %100, %98
  %245 = and i32 %22, %90
  %246 = xor i32 %100, %1
  %247 = shl i32 %246, 1
  %248 = or i32 %26, %9
  %249 = shl i32 %248, 1
  %250 = and i32 %106, %1
  %251 = or i32 %9, %2
  %252 = xor i32 %42, %2
  %253 = or i32 %71, %60
  %254 = xor i32 %106, %1
  %255 = or i32 %100, %27
  %256 = xor i32 %36, %45
  %257 = or i32 %100, %28
  %258 = xor i32 %71, %0
  %259 = and i32 %23, %90
  %260 = or i32 %100, %1
  %261 = xor i32 %34, %0
  %262 = and i32 %52, %28
  %263 = or i32 %62, %64
  %264 = and i32 %10, %118
  %265 = or i32 %26, %49
  %266 = and i32 %96, %27
  %267 = and i32 %10, %1
  %268 = or i32 %35, %177
  %269 = or i32 %31, %27
  %270 = add i32 %1, 1
  %271 = or i32 %36, %0
  %272 = or i32 %10, %1
  %273 = and i32 %48, %23
  %274 = and i32 %75, %7
  %275 = xor i32 %225, %38
  %276 = or i32 %45, %23
  %277 = or i32 %26, %28
  %278 = and i32 %23, %118
  %279 = xor i32 %98, %45
  %280 = shl i32 %279, 1
  %281 = shl i32 %118, 1
  %282 = or i32 %27, %26
  %283 = shl i32 %282, 1
  %284 = and i32 %40, %60
  %285 = and i32 %58, %1
  %286 = xor i32 %88, %0
  %287 = or i32 %45, %2
  %288 = or i32 %75, %9
  %289 = or i32 %102, %28
  %290 = xor i32 %52, %1
  %291 = xor i32 %42, %40
  %292 = and i32 %27, %26
  %293 = shl i32 %292, 1
  %294 = or i32 %10, %42
  %295 = add i32 %34, 1
  %296 = and i32 %88, %60
  %297 = mul i32 %296, -10
  %298 = and i32 %71, %60
  %299 = mul i32 %298, -14
  %300 = and i32 %88, %0
  %301 = and i32 %71, %0
  %302 = mul i32 %301, -23
  %303 = and i32 %122, %60
  %304 = mul i32 %303, -22
  %305 = mul i32 %145, -11
  %306 = and i32 %122, %0
  %307 = mul i32 %306, -12
  %308 = mul i32 %35, -37
  %309 = add i32 %23, %2
  %310 = add i32 %309, %286
  %311 = add i32 %310, %276
  %312 = add i32 %311, %259
  %313 = add i32 %312, %245
  %314 = add i32 %313, %241
  %315 = add i32 %314, %69
  %316 = add i32 %315, %214
  %317 = add i32 %316, %213
  %318 = add i32 %317, %168
  %319 = add i32 %318, %163
  %320 = add i32 %319, %152
  %321 = add i32 %320, %126
  %322 = add i32 %321, %121
  %323 = add i32 %322, %108
  %324 = add i32 %323, %41
  %325 = add i32 %324, %127
  %326 = add i32 %325, %181
  %327 = add i32 %36, %287
  %328 = add i32 %327, %261
  %329 = add i32 %328, %300
  %330 = sub i32 %329, %256
  %331 = sub i32 %330, %195
  %332 = add i32 %331, %24
  %333 = mul i32 %332, 5
  %334 = add i32 %34, %102
  %335 = add i32 %334, %269
  %336 = sub i32 %335, %260
  %337 = sub i32 %336, %107
  %338 = add i32 %337, %6
  %339 = sub i32 %338, %143
  %340 = mul i32 %339, 3
  %341 = add i32 %326, %16
  %342 = shl i32 %341, 1
  %343 = add i32 %197, 1073741823
  %344 = add i32 %343, %193
  %345 = add i32 %344, %262
  %346 = shl i32 %345, 2
  %347 = sub i32 1, %0
  %348 = add i32 %347, %60
  %349 = add i32 %348, %1
  %350 = add i32 %349, %270
  %351 = add i32 %350, %26
  %352 = add i32 %351, %49
  %353 = add i32 %352, %42
  %354 = add i32 %353, %90
  %355 = sub i32 %354, %45
  %356 = sub i32 %355, %48
  %357 = sub i32 %356, %3
  %358 = add i32 %357, %33
  %359 = add i32 %358, %51
  %360 = add i32 %359, %55
  %361 = add i32 %360, %56
  %362 = add i32 %361, %68
  %363 = sub i32 %362, %87
  %364 = add i32 %363, %10
  %365 = add i32 %364, %91
  %366 = add i32 %365, %100
  %367 = add i32 %366, %112
  %368 = add i32 %367, %115
  %369 = add i32 %368, %132
  %370 = add i32 %369, %153
  %371 = add i32 %370, %154
  %372 = sub i32 %371, %171
  %373 = add i32 %372, %185
  %374 = sub i32 %373, %96
  %375 = add i32 %374, %22
  %376 = sub i32 %375, %204
  %377 = add i32 %376, %209
  %378 = add i32 %377, %211
  %379 = add i32 %378, %230
  %380 = sub i32 %379, %233
  %381 = add i32 %380, %251
  %382 = add i32 %381, %252
  %383 = add i32 %382, %58
  %384 = add i32 %383, %265
  %385 = sub i32 %384, %277
  %386 = sub i32 %385, %281
  %387 = add i32 %386, %295
  %388 = add i32 %387, %4
  %389 = sub i32 %388, %25
  %390 = sub i32 %389, %30
  %391 = sub i32 %390, %32
  %392 = sub i32 %391, %44
  %393 = sub i32 %392, %47
  %394 = add i32 %393, %50
  %395 = sub i32 %394, %54
  %396 = add i32 %395, %57
  %397 = sub i32 %396, %59
  %398 = sub i32 %397, %67
  %399 = sub i32 %398, %73
  %400 = sub i32 %399, %74
  %401 = sub i32 %400, %76
  %402 = add i32 %401, %77
  %403 = sub i32 %402, %78
  %404 = sub i32 %403, %79
  %405 = sub i32 %404, %80
  %406 = sub i32 %405, %81
  %407 = sub i32 %406, %82
  %408 = sub i32 %407, %89
  %409 = add i32 %408, %95
  %410 = add i32 %409, %97
  %411 = sub i32 %410, %99
  %412 = add i32 %411, %101
  %413 = add i32 %412, %103
  %414 = add i32 %413, %109
  %415 = sub i32 %414, %113
  %416 = sub i32 %415, %114
  %417 = add i32 %416, %119
  %418 = sub i32 %417, %120
  %419 = add i32 %418, %123
  %420 = sub i32 %419, %124
  %421 = add i32 %420, %125
  %422 = add i32 %421, %130
  %423 = add i32 %422, %131
  %424 = sub i32 %423, %133
  %425 = sub i32 %424, %136
  %426 = sub i32 %425, %139
  %427 = sub i32 %426, %140
  %428 = sub i32 %427, %144
  %429 = add i32 %428, %148
  %430 = sub i32 %429, %150
  %431 = sub i32 %430, %151
  %432 = sub i32 %431, %155
  %433 = add i32 %432, %157
  %434 = sub i32 %433, %158
  %435 = add i32 %434, %159
  %436 = sub i32 %435, %162
  %437 = sub i32 %436, %166
  %438 = add i32 %437, %167
  %439 = sub i32 %438, %170
  %440 = add i32 %439, %173
  %441 = add i32 %440, %176
  %442 = sub i32 %441, %184
  %443 = add i32 %442, %186
  %444 = sub i32 %443, %187
  %445 = add i32 %444, %188
  %446 = sub i32 %445, %189
  %447 = sub i32 %446, %190
  %448 = sub i32 %447, %191
  %449 = sub i32 %448, %192
  %450 = sub i32 %449, %194
  %451 = sub i32 %450, %196
  %452 = sub i32 %451, %200
  %453 = add i32 %452, %201
  %454 = add i32 %453, %202
  %455 = add i32 %454, %203
  %456 = add i32 %455, %205
  %457 = add i32 %456, %208
  %458 = sub i32 %457, %210
  %459 = add i32 %458, %215
  %460 = add i32 %459, %216
  %461 = sub i32 %460, %217
  %462 = sub i32 %461, %218
  %463 = sub i32 %462, %219
  %464 = sub i32 %463, %220
  %465 = add i32 %464, %221
  %466 = sub i32 %465, %222
  %467 = add i32 %466, %223
  %468 = add i32 %467, %227
  %469 = add i32 %468, %228
  %470 = sub i32 %469, %229
  %471 = add i32 %470, %231
  %472 = add i32 %471, %232
  %473 = sub i32 %472, %237
  %474 = add i32 %473, %238
  %475 = add i32 %474, %239
  %476 = add i32 %475, %242
  %477 = sub i32 %476, %243
  %478 = sub i32 %477, %244
  %479 = sub i32 %478, %249
  %480 = sub i32 %479, %250
  %481 = add i32 %480, %253
  %482 = sub i32 %481, %254
  %483 = sub i32 %482, %255
  %484 = add i32 %483, %257
  %485 = add i32 %484, %116
  %486 = add i32 %485, %258
  %487 = add i32 %486, %264
  %488 = add i32 %487, %266
  %489 = sub i32 %488, %267
  %490 = sub i32 %489, %271
  %491 = add i32 %490, %272
  %492 = sub i32 %491, %273
  %493 = add i32 %492, %274
  %494 = sub i32 %493, %278
  %495 = add i32 %494, %37
  %496 = sub i32 %495, %283
  %497 = add i32 %496, %284
  %498 = add i32 %497, %285
  %499 = add i32 %498, %225
  %500 = add i32 %499, %288
  %501 = add i32 %500, %289
  %502 = sub i32 %501, %290
  %503 = add i32 %502, %291
  %504 = sub i32 %503, %293
  %505 = sub i32 %504, %294
  %506 = add i32 %505, %17
  %507 = add i32 %506, %18
  %508 = sub i32 %507, %21
  %509 = sub i32 %508, %39
  %510 = add i32 %509, %66
  %511 = add i32 %510, %70
  %512 = add i32 %511, %86
  %513 = sub i32 %512, %105
  %514 = sub i32 %513, %111
  %515 = sub i32 %514, %117
  %516 = sub i32 %515, %135
  %517 = sub i32 %516, %138
  %518 = add i32 %517, %147
  %519 = add i32 %518, %156
  %520 = add i32 %519, %161
  %521 = sub i32 %520, %165
  %522 = add i32 %521, %172
  %523 = sub i32 %522, %175
  %524 = sub i32 %523, %178
  %525 = sub i32 %524, %180
  %526 = sub i32 %525, %183
  %527 = sub i32 %526, %199
  %528 = sub i32 %527, %207
  %529 = sub i32 %528, %212
  %530 = add i32 %529, %224
  %531 = add i32 %530, %226
  %532 = add i32 %531, %240
  %533 = sub i32 %532, %247
  %534 = add i32 %533, %263
  %535 = add i32 %534, %268
  %536 = sub i32 %535, %275
  %537 = sub i32 %536, %280
  %538 = add i32 %537, %297
  %539 = add i32 %538, %299
  %540 = add i32 %539, %302
  %541 = add i32 %540, %304
  %542 = add i32 %541, %305
  %543 = add i32 %542, %307
  %544 = add i32 %543, %308
  %545 = sub i32 %544, %19
  %546 = add i32 %545, %94
  %547 = sub i32 %546, %129
  %548 = sub i32 %547, %236
  %549 = add i32 %548, %346
  %550 = add i32 %549, %333
  %551 = add i32 %550, %340
  %552 = add i32 %551, %342
  %553 = icmp eq i32 %14, %552
  %554 = select i1 %553, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %555 = tail call i32 @puts(i8* nonnull dereferenceable(1) %554)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
