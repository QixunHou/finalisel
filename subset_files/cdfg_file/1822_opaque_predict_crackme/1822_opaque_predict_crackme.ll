; ModuleID = '../.././c_source_file/1822_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1822_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %1
  %10 = and i32 %9, %7
  %11 = and i32 %4, %3
  %12 = xor i32 %5, -1
  %13 = or i32 %12, %4
  %14 = xor i32 %13, -1
  %15 = or i32 %11, %14
  %16 = shl i32 %15, 1
  %17 = add i32 %16, %10
  %18 = xor i32 %1, -1
  %19 = or i32 %18, %0
  %20 = and i32 %19, %8
  %21 = or i32 %8, %0
  %22 = xor i32 %21, -1
  %23 = or i32 %22, %1
  %24 = add i32 %2, 1
  %25 = and i32 %8, %1
  %26 = and i32 %2, %1
  %27 = and i32 %26, %0
  %28 = xor i32 %2, %1
  %29 = and i32 %28, %7
  %30 = xor i32 %27, -1
  %31 = xor i32 %29, %30
  %32 = and i32 %8, %0
  %33 = or i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = xor i32 %34, %0
  %36 = xor i32 %1, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %21, %37
  %39 = and i32 %1, %0
  %40 = or i32 %2, %0
  %41 = xor i32 %40, %39
  %42 = and i32 %18, %2
  %43 = and i32 %42, %0
  %44 = xor i32 %28, %0
  %45 = xor i32 %44, 2147483647
  %46 = xor i32 %45, %43
  %47 = xor i32 %2, %0
  %48 = or i32 %47, %37
  %49 = and i32 %47, %36
  %50 = xor i32 %9, -1
  %51 = xor i32 %39, %2
  %52 = shl i32 %51, 1
  %53 = and i32 %36, %8
  %54 = or i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %47, %55
  %57 = xor i32 %47, -1
  %58 = or i32 %36, %57
  %59 = and i32 %18, %0
  %60 = or i32 %47, %59
  %61 = shl i32 %0, 1
  %62 = shl i32 %37, 1
  %63 = or i32 %8, %37
  %64 = shl i32 %63, 2
  %65 = xor i32 %28, -1
  %66 = or i32 %65, %0
  %67 = and i32 %2, %0
  %68 = or i32 %67, %1
  %69 = or i32 %57, %1
  %70 = shl i32 %18, 1
  %71 = and i32 %21, %36
  %72 = xor i32 %25, -1
  %73 = xor i32 %25, %0
  %74 = and i32 %47, %18
  %75 = add i32 %28, 1
  %76 = or i32 %47, %18
  %77 = or i32 %72, %0
  %78 = or i32 %27, %29
  %79 = or i32 %32, %26
  %80 = or i32 %59, %2
  %81 = or i32 %9, %7
  %82 = xor i32 %19, %2
  %83 = xor i32 %39, -1
  %84 = xor i32 %83, %2
  %85 = xor i32 %22, %1
  %86 = xor i32 %32, -1
  %87 = xor i32 %86, %1
  %88 = and i32 %72, %7
  %89 = xor i32 %59, %2
  %90 = shl i32 %89, 1
  %91 = xor i32 %40, %1
  %92 = xor i32 %21, %1
  %93 = xor i32 %19, -1
  %94 = or i32 %93, %2
  %95 = xor i32 %67, -1
  %96 = and i32 %95, %18
  %97 = or i32 %59, %57
  %98 = or i32 %47, %1
  %99 = or i32 %28, %0
  %100 = xor i32 %99, -1
  %101 = or i32 %43, %100
  %102 = xor i32 %67, %1
  %103 = and i32 %36, %57
  %104 = xor i32 %40, -1
  %105 = or i32 %104, %18
  %106 = shl i32 %105, 1
  %107 = or i32 %32, %37
  %108 = and i32 %54, %65
  %109 = or i32 %37, %2
  %110 = or i32 %39, %8
  %111 = and i32 %40, %18
  %112 = or i32 %57, %18
  %113 = or i32 %28, %55
  %114 = xor i32 %95, %1
  %115 = and i32 %19, %57
  %116 = and i32 %86, %18
  %117 = or i32 %28, %39
  %118 = xor i32 %67, %72
  %119 = or i32 %65, %93
  %120 = xor i32 %93, %2
  %121 = and i32 %42, %7
  %122 = or i32 %18, %2
  %123 = and i32 %122, %0
  %124 = xor i32 %123, -1
  %125 = xor i32 %121, %124
  %126 = or i32 %47, %93
  %127 = and i32 %9, %0
  %128 = or i32 %39, %2
  %129 = shl i32 %128, 1
  %130 = shl i32 %33, 1
  %131 = xor i32 %54, %2
  %132 = xor i32 %26, -1
  %133 = or i32 %132, %7
  %134 = or i32 %39, %104
  %135 = or i32 %33, %0
  %136 = shl i32 %135, 1
  %137 = or i32 %36, %104
  %138 = xor i32 %26, %0
  %139 = and i32 %21, %1
  %140 = and i32 %65, %0
  %141 = or i32 %47, %36
  %142 = or i32 %104, %1
  %143 = or i32 %67, %55
  %144 = or i32 %26, %7
  %145 = and i32 %28, %0
  %146 = shl i32 %145, 2
  %147 = or i32 %72, %7
  %148 = and i32 %47, %37
  %149 = and i32 %36, %95
  %150 = xor i32 %33, %0
  %151 = or i32 %27, %150
  %152 = shl i32 %151, 2
  %153 = and i32 %36, %2
  %154 = shl i32 %153, 1
  %155 = and i32 %8, %37
  %156 = or i32 %28, %93
  %157 = xor i32 %59, -1
  %158 = and i32 %8, %157
  %159 = and i32 %28, %83
  %160 = and i32 %33, %0
  %161 = or i32 %39, %65
  %162 = and i32 %33, %7
  %163 = xor i32 %32, %132
  %164 = xor i32 %27, %44
  %165 = and i32 %95, %37
  %166 = or i32 %59, %65
  %167 = and i32 %132, %7
  %168 = or i32 %50, %0
  %169 = or i32 %57, %55
  %170 = and i32 %47, %19
  %171 = or i32 %65, %55
  %172 = and i32 %47, %157
  %173 = and i32 %57, %157
  %174 = or i32 %28, %59
  %175 = and i32 %26, %7
  %176 = or i32 %175, %145
  %177 = and i32 %19, %2
  %178 = and i32 %28, %54
  %179 = or i32 %39, %57
  %180 = xor i32 %33, %39
  %181 = or i32 %32, %36
  %182 = or i32 %175, %160
  %183 = and i32 %47, %1
  %184 = and i32 %132, %0
  %185 = xor i32 %162, %30
  %186 = or i32 %8, %93
  %187 = shl i32 %186, 1
  %188 = or i32 %36, %2
  %189 = xor i32 %104, %1
  %190 = or i32 %59, %8
  %191 = xor i32 %59, %132
  %192 = or i32 %39, %50
  %193 = and i32 %21, %18
  %194 = xor i32 %145, -1
  %195 = xor i32 %175, %194
  %196 = or i32 %47, %39
  %197 = add i32 %67, 1
  %198 = or i32 %25, %7
  %199 = or i32 %28, %7
  %200 = xor i32 %121, %199
  %201 = and i32 %36, %86
  %202 = and i32 %72, %0
  %203 = xor i32 %21, %39
  %204 = xor i32 %43, %99
  %205 = or i32 %26, %59
  %206 = or i32 %67, %36
  %207 = or i32 %26, %0
  %208 = and i32 %86, %1
  %209 = and i32 %57, %1
  %210 = and i32 %37, %2
  %211 = shl i32 %210, 1
  %212 = or i32 %50, %7
  %213 = and i32 %47, %83
  %214 = and i32 %57, %18
  %215 = xor i32 %132, %0
  %216 = and i32 %54, %8
  %217 = and i32 %65, %7
  %218 = xor i32 %9, %39
  %219 = or i32 %67, %93
  %220 = or i32 %36, %22
  %221 = or i32 %39, %22
  %222 = shl i32 %221, 1
  %223 = or i32 %55, %2
  %224 = or i32 %67, %34
  %225 = xor i32 %199, -1
  %226 = or i32 %121, %225
  %227 = or i32 %34, %0
  %228 = xor i32 %67, %54
  %229 = or i32 %25, %59
  %230 = or i32 %22, %37
  %231 = or i32 %32, %50
  %232 = or i32 %36, %8
  %233 = and i32 %47, %54
  %234 = shl i32 %233, 1
  %235 = or i32 %22, %18
  %236 = or i32 %132, %0
  %237 = or i32 %27, %162
  %238 = or i32 %57, %93
  %239 = and i32 %95, %1
  %240 = and i32 %40, %37
  %241 = and i32 %40, %36
  %242 = shl i32 %157, 1
  %243 = and i32 %57, %37
  %244 = or i32 %67, %25
  %245 = xor i32 %50, %0
  %246 = xor i32 %157, %2
  %247 = or i32 %32, %1
  %248 = xor i32 %122, %0
  %249 = xor i32 %248, -1
  %250 = xor i32 %43, %249
  %251 = or i32 %33, %7
  %252 = xor i32 %72, %0
  %253 = shl i32 %252, 1
  %254 = or i32 %67, %18
  %255 = and i32 %54, %2
  %256 = or i32 %43, %248
  %257 = and i32 %122, %7
  %258 = or i32 %43, %257
  %259 = xor i32 %150, 2147483647
  %260 = xor i32 %259, %27
  %261 = or i32 %121, %123
  %262 = xor i32 %67, %19
  %263 = or i32 %39, %34
  %264 = xor i32 %160, 2147483647
  %265 = xor i32 %264, %175
  %266 = xor i32 %67, %33
  %267 = xor i32 %65, %0
  %268 = xor i32 %55, %2
  %269 = and i32 %8, %83
  %270 = xor i32 %32, %1
  %271 = shl i32 %270, 1
  %272 = or i32 %104, %37
  %273 = shl i32 %272, 1
  %274 = and i32 %54, %57
  %275 = and i32 %34, %7
  %276 = and i32 %34, %0
  %277 = mul i32 %276, 19
  %278 = and i32 %25, %0
  %279 = and i32 %50, %7
  %280 = mul i32 %279, 15
  %281 = and i32 %50, %0
  %282 = mul i32 %281, 18
  %283 = xor i32 %4, -1
  %284 = or i32 %12, %3
  %285 = xor i32 %284, -1
  %286 = or i32 %285, %283
  %287 = shl i32 %286, 1
  %288 = xor i32 %11, -1
  %289 = xor i32 %5, %3
  %290 = xor i32 %289, -1
  %291 = and i32 %290, %288
  %292 = xor i32 %289, %4
  %293 = xor i32 %4, %3
  %294 = or i32 %293, %14
  %295 = shl i32 %3, 1
  %296 = or i32 %4, %3
  %297 = xor i32 %296, -1
  %298 = or i32 %290, %297
  %299 = xor i32 %3, -1
  %300 = and i32 %299, %4
  %301 = xor i32 %5, %4
  %302 = xor i32 %301, -1
  %303 = or i32 %300, %302
  %304 = shl i32 %303, 1
  %305 = and i32 %5, %3
  %306 = and i32 %305, %283
  %307 = or i32 %5, %3
  %308 = and i32 %307, %4
  %309 = xor i32 %308, 1073741823
  %310 = xor i32 %309, %306
  %311 = shl i32 %310, 2
  %312 = and i32 %12, %3
  %313 = or i32 %312, %4
  %314 = xor i32 %293, -1
  %315 = and i32 %314, %5
  %316 = and i32 %13, %314
  %317 = and i32 %296, %5
  %318 = or i32 %5, %4
  %319 = xor i32 %318, -1
  %320 = xor i32 %319, %3
  %321 = or i32 %293, %5
  %322 = and i32 %13, %299
  %323 = and i32 %12, %4
  %324 = xor i32 %323, %3
  %325 = or i32 %299, %4
  %326 = or i32 %323, %285
  %327 = and i32 %283, %299
  %328 = and i32 %327, %5
  %329 = or i32 %289, %283
  %330 = xor i32 %329, -1
  %331 = or i32 %328, %330
  %332 = and i32 %5, %4
  %333 = or i32 %332, %293
  %334 = xor i32 %333, -1
  %335 = add i32 %3, 1
  %336 = xor i32 %328, %329
  %337 = or i32 %11, %319
  %338 = and i32 %301, %325
  %339 = and i32 %301, %299
  %340 = and i32 %289, %296
  %341 = xor i32 %323, -1
  %342 = and i32 %341, %299
  %343 = and i32 %305, %4
  %344 = and i32 %307, %283
  %345 = or i32 %343, %344
  %346 = shl i32 %345, 1
  %347 = xor i32 %312, -1
  %348 = xor i32 %347, %4
  %349 = or i32 %312, %283
  %350 = xor i32 %296, %5
  %351 = shl i32 %350, 1
  %352 = xor i32 %11, %5
  %353 = and i32 %302, %314
  %354 = xor i32 %332, %347
  %355 = or i32 %284, %4
  %356 = and i32 %325, %12
  %357 = shl i32 %307, 1
  %358 = xor i32 %305, %341
  %359 = xor i32 %307, -1
  %360 = and i32 %289, %283
  %361 = or i32 %343, %360
  %362 = or i32 %289, %297
  %363 = and i32 %289, %288
  %364 = xor i32 %14, %3
  %365 = xor i32 %325, -1
  %366 = or i32 %12, %365
  %367 = and i32 %290, %4
  %368 = or i32 %323, %305
  %369 = or i32 %293, %302
  %370 = xor i32 %332, 2147483647
  %371 = and i32 %370, %314
  %372 = shl i32 %371, 1
  %373 = or i32 %289, %11
  %374 = xor i32 %288, %5
  %375 = xor i32 %285, %4
  %376 = or i32 %12, %314
  %377 = and i32 %359, %283
  %378 = mul i32 %377, 7
  %379 = and i32 %312, %283
  %380 = and i32 %359, %4
  %381 = shl i32 %380, 3
  %382 = and i32 %312, %4
  %383 = and i32 %285, %283
  %384 = mul i32 %383, 10
  %385 = and i32 %285, %4
  %386 = add i32 %216, %22
  %387 = add i32 %386, %34
  %388 = add i32 %387, %266
  %389 = add i32 %388, %247
  %390 = add i32 %389, %215
  %391 = add i32 %390, %184
  %392 = add i32 %391, %172
  %393 = add i32 %392, %126
  %394 = add i32 %393, %114
  %395 = add i32 %394, %97
  %396 = add i32 %395, %261
  %397 = add i32 %396, %374
  %398 = add i32 %397, %366
  %399 = add i32 %398, %315
  %400 = add i32 %399, %265
  %401 = add i32 %400, %260
  %402 = add i32 %401, %46
  %403 = add i32 %402, %373
  %404 = add i32 %403, %375
  %405 = add i32 %404, %298
  %406 = shl i32 %405, 1
  %407 = add i32 %32, %232
  %408 = add i32 %407, %220
  %409 = sub i32 %147, %408
  %410 = sub i32 %409, %140
  %411 = sub i32 %410, %92
  %412 = add i32 %411, %69
  %413 = sub i32 %412, %306
  %414 = sub i32 %413, %343
  %415 = sub i32 %414, %316
  %416 = mul i32 %415, 3
  %417 = sub i32 %278, %193
  %418 = add i32 %417, %165
  %419 = add i32 %418, %119
  %420 = sub i32 %419, %85
  %421 = add i32 %420, %38
  %422 = sub i32 %421, %313
  %423 = add i32 %422, %368
  %424 = mul i32 %423, 5
  %425 = add i32 %379, %27
  %426 = add i32 %425, %382
  %427 = mul i32 %426, 9
  %428 = sub i32 %175, %275
  %429 = mul i32 %428, 11
  %430 = add i32 %385, %81
  %431 = shl i32 %430, 2
  %432 = add i32 %0, -2
  %433 = sub i32 %432, %61
  %434 = add i32 %433, %1
  %435 = add i32 %434, %24
  %436 = sub i32 %435, %70
  %437 = sub i32 %436, %36
  %438 = add i32 %437, %2
  %439 = sub i32 %438, %39
  %440 = sub i32 %439, %19
  %441 = add i32 %440, %54
  %442 = add i32 %441, %93
  %443 = sub i32 %442, %59
  %444 = add i32 %443, %20
  %445 = sub i32 %444, %25
  %446 = sub i32 %445, %53
  %447 = sub i32 %446, %62
  %448 = sub i32 %447, %40
  %449 = add i32 %448, %72
  %450 = add i32 %449, %57
  %451 = add i32 %450, %75
  %452 = sub i32 %451, %80
  %453 = sub i32 %452, %82
  %454 = add i32 %453, %84
  %455 = add i32 %454, %94
  %456 = add i32 %455, %109
  %457 = sub i32 %456, %110
  %458 = sub i32 %457, %120
  %459 = sub i32 %458, %47
  %460 = add i32 %459, %131
  %461 = add i32 %460, %104
  %462 = sub i32 %461, %67
  %463 = add i32 %462, %155
  %464 = add i32 %463, %158
  %465 = sub i32 %464, %177
  %466 = add i32 %465, %188
  %467 = sub i32 %466, %190
  %468 = add i32 %467, %197
  %469 = add i32 %468, %21
  %470 = add i32 %469, %86
  %471 = sub i32 %470, %223
  %472 = add i32 %471, 1
  %473 = sub i32 %472, %242
  %474 = add i32 %473, %246
  %475 = sub i32 %474, %255
  %476 = add i32 %475, %268
  %477 = add i32 %476, %269
  %478 = add i32 %477, %335
  %479 = add i32 %478, %23
  %480 = add i32 %479, %35
  %481 = sub i32 %480, %41
  %482 = add i32 %481, %48
  %483 = add i32 %482, %49
  %484 = sub i32 %483, %52
  %485 = sub i32 %484, %56
  %486 = sub i32 %485, %58
  %487 = add i32 %486, %60
  %488 = sub i32 %487, %64
  %489 = sub i32 %488, %66
  %490 = add i32 %489, %68
  %491 = add i32 %490, %71
  %492 = sub i32 %491, %73
  %493 = sub i32 %492, %74
  %494 = sub i32 %493, %44
  %495 = add i32 %494, %76
  %496 = add i32 %495, %77
  %497 = add i32 %496, %79
  %498 = sub i32 %497, %87
  %499 = sub i32 %498, %88
  %500 = sub i32 %499, %90
  %501 = sub i32 %500, %91
  %502 = add i32 %501, %96
  %503 = add i32 %502, %98
  %504 = sub i32 %503, %102
  %505 = sub i32 %504, %103
  %506 = sub i32 %505, %107
  %507 = sub i32 %506, %108
  %508 = sub i32 %507, %111
  %509 = sub i32 %508, %112
  %510 = add i32 %509, %113
  %511 = sub i32 %510, %115
  %512 = sub i32 %511, %116
  %513 = sub i32 %512, %117
  %514 = sub i32 %513, %118
  %515 = add i32 %514, %127
  %516 = sub i32 %515, %129
  %517 = sub i32 %516, %130
  %518 = add i32 %517, %133
  %519 = add i32 %518, %134
  %520 = add i32 %519, %137
  %521 = sub i32 %520, %138
  %522 = add i32 %521, %139
  %523 = sub i32 %522, %141
  %524 = sub i32 %523, %142
  %525 = add i32 %524, %143
  %526 = sub i32 %525, %144
  %527 = add i32 %526, %148
  %528 = add i32 %527, %149
  %529 = sub i32 %528, %154
  %530 = sub i32 %529, %156
  %531 = add i32 %530, %159
  %532 = sub i32 %531, %160
  %533 = sub i32 %532, %161
  %534 = add i32 %533, %162
  %535 = sub i32 %534, %163
  %536 = sub i32 %535, %166
  %537 = add i32 %536, %167
  %538 = add i32 %537, %168
  %539 = add i32 %538, %169
  %540 = sub i32 %539, %170
  %541 = sub i32 %540, %171
  %542 = sub i32 %541, %173
  %543 = add i32 %542, %174
  %544 = sub i32 %543, %178
  %545 = sub i32 %544, %179
  %546 = add i32 %545, %180
  %547 = sub i32 %546, %181
  %548 = sub i32 %547, %183
  %549 = sub i32 %548, %187
  %550 = add i32 %549, %189
  %551 = sub i32 %550, %29
  %552 = add i32 %551, %191
  %553 = add i32 %552, %192
  %554 = add i32 %553, %196
  %555 = sub i32 %554, %198
  %556 = sub i32 %555, %201
  %557 = add i32 %556, %202
  %558 = add i32 %557, %203
  %559 = add i32 %558, %205
  %560 = add i32 %559, %206
  %561 = add i32 %560, %207
  %562 = add i32 %561, %208
  %563 = sub i32 %562, %209
  %564 = sub i32 %563, %211
  %565 = add i32 %564, %212
  %566 = add i32 %565, %213
  %567 = sub i32 %566, %214
  %568 = sub i32 %567, %217
  %569 = sub i32 %568, %218
  %570 = sub i32 %569, %219
  %571 = sub i32 %570, %224
  %572 = add i32 %571, %227
  %573 = sub i32 %572, %228
  %574 = add i32 %573, %229
  %575 = sub i32 %574, %230
  %576 = sub i32 %575, %231
  %577 = add i32 %576, %235
  %578 = add i32 %577, %236
  %579 = sub i32 %578, %238
  %580 = add i32 %579, %239
  %581 = sub i32 %580, %240
  %582 = sub i32 %581, %241
  %583 = sub i32 %582, %243
  %584 = add i32 %583, %244
  %585 = add i32 %584, %245
  %586 = sub i32 %585, %251
  %587 = add i32 %586, %254
  %588 = add i32 %587, %262
  %589 = sub i32 %588, %263
  %590 = add i32 %589, %267
  %591 = add i32 %590, %274
  %592 = sub i32 %591, %295
  %593 = add i32 %592, %283
  %594 = add i32 %593, %31
  %595 = add i32 %594, %78
  %596 = add i32 %595, %101
  %597 = sub i32 %596, %106
  %598 = add i32 %597, %125
  %599 = sub i32 %598, %136
  %600 = sub i32 %599, %146
  %601 = sub i32 %600, %164
  %602 = sub i32 %601, %176
  %603 = sub i32 %602, %182
  %604 = sub i32 %603, %185
  %605 = sub i32 %604, %195
  %606 = add i32 %605, %200
  %607 = sub i32 %606, %204
  %608 = sub i32 %607, %222
  %609 = sub i32 %608, %226
  %610 = sub i32 %609, %234
  %611 = sub i32 %610, %237
  %612 = sub i32 %611, %250
  %613 = sub i32 %612, %253
  %614 = sub i32 %613, %256
  %615 = add i32 %614, %258
  %616 = sub i32 %615, %271
  %617 = sub i32 %616, %273
  %618 = add i32 %617, %277
  %619 = add i32 %618, %280
  %620 = add i32 %619, %282
  %621 = sub i32 %620, %325
  %622 = add i32 %621, %296
  %623 = add i32 %622, %365
  %624 = sub i32 %623, %152
  %625 = add i32 %624, %317
  %626 = add i32 %625, %302
  %627 = add i32 %626, %321
  %628 = sub i32 %627, %352
  %629 = add i32 %628, %356
  %630 = add i32 %629, %359
  %631 = add i32 %630, %376
  %632 = add i32 %631, %429
  %633 = add i32 %632, %291
  %634 = sub i32 %633, %292
  %635 = add i32 %634, %294
  %636 = sub i32 %635, %320
  %637 = add i32 %636, %322
  %638 = add i32 %637, %324
  %639 = add i32 %638, %326
  %640 = add i32 %639, %334
  %641 = sub i32 %640, %337
  %642 = sub i32 %641, %338
  %643 = add i32 %642, %339
  %644 = add i32 %643, %340
  %645 = sub i32 %644, %342
  %646 = sub i32 %645, %348
  %647 = sub i32 %646, %349
  %648 = sub i32 %647, %351
  %649 = add i32 %648, %353
  %650 = sub i32 %649, %354
  %651 = sub i32 %650, %355
  %652 = sub i32 %651, %357
  %653 = sub i32 %652, %358
  %654 = sub i32 %653, %362
  %655 = add i32 %654, %363
  %656 = sub i32 %655, %364
  %657 = add i32 %656, %367
  %658 = add i32 %657, %369
  %659 = add i32 %658, %308
  %660 = sub i32 %659, %287
  %661 = sub i32 %660, %304
  %662 = add i32 %661, %331
  %663 = add i32 %662, %336
  %664 = add i32 %663, %361
  %665 = add i32 %664, %378
  %666 = sub i32 %665, %381
  %667 = add i32 %666, %384
  %668 = sub i32 %667, %346
  %669 = sub i32 %668, %372
  %670 = add i32 %669, %431
  %671 = sub i32 %670, %311
  %672 = add i32 %671, %427
  %673 = add i32 %672, %424
  %674 = add i32 %673, %416
  %675 = add i32 %674, %406
  %676 = icmp eq i32 %17, %675
  %677 = select i1 %676, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %678 = tail call i32 @puts(i8* nonnull dereferenceable(1) %677)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
