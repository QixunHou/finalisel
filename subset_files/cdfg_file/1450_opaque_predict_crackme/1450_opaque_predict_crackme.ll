; ModuleID = '../.././c_source_file/1450_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1450_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %2, %1
  %8 = xor i32 %7, %0
  %9 = shl i32 %8, 1
  %10 = and i32 %1, %0
  %11 = xor i32 %7, -1
  %12 = or i32 %10, %11
  %13 = add i32 %12, 1
  %14 = sub i32 %13, %9
  %15 = or i32 %6, %3
  %16 = xor i32 %4, %3
  %17 = or i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %18, -2
  %20 = and i32 %6, %3
  %21 = shl i32 %20, 1
  %22 = and i32 %4, %3
  %23 = xor i32 %2, -1
  %24 = and i32 %23, %1
  %25 = xor i32 %24, %0
  %26 = shl i32 %25, 2
  %27 = and i32 %2, %0
  %28 = shl i32 %27, 1
  %29 = xor i32 %24, -1
  %30 = or i32 %29, %0
  %31 = and i32 %2, %1
  %32 = and i32 %31, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %8, %33
  %35 = xor i32 %1, -1
  %36 = xor i32 %2, %0
  %37 = or i32 %36, %35
  %38 = shl i32 %37, 1
  %39 = xor i32 %0, -1
  %40 = and i32 %7, %39
  %41 = xor i32 %40, %33
  %42 = xor i32 %36, -1
  %43 = or i32 %42, %35
  %44 = and i32 %35, %2
  %45 = and i32 %44, %0
  %46 = xor i32 %2, %1
  %47 = or i32 %46, %0
  %48 = xor i32 %45, %47
  %49 = or i32 %1, %0
  %50 = xor i32 %49, -1
  %51 = xor i32 %50, %2
  %52 = xor i32 %10, -1
  %53 = and i32 %36, %52
  %54 = xor i32 %46, %39
  %55 = xor i32 %45, %54
  %56 = or i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = xor i32 %57, %1
  %59 = xor i32 %1, %0
  %60 = xor i32 %59, -1
  %61 = and i32 %23, %60
  %62 = xor i32 %27, -1
  %63 = and i32 %62, %35
  %64 = shl i32 %63, 1
  %65 = xor i32 %31, %0
  %66 = or i32 %23, %0
  %67 = and i32 %66, %35
  %68 = xor i32 %56, %1
  %69 = and i32 %46, %39
  %70 = xor i32 %69, %33
  %71 = shl i32 %29, 2
  %72 = xor i32 %29, %0
  %73 = and i32 %56, %59
  %74 = or i32 %46, %10
  %75 = shl i32 %74, 1
  %76 = xor i32 %66, %10
  %77 = and i32 %23, %52
  %78 = and i32 %35, %0
  %79 = xor i32 %78, -1
  %80 = and i32 %42, %79
  %81 = or i32 %31, %78
  %82 = shl i32 %81, 1
  %83 = and i32 %23, %0
  %84 = or i32 %27, %11
  %85 = xor i32 %66, -1
  %86 = or i32 %35, %0
  %87 = and i32 %36, %86
  %88 = xor i32 %86, -1
  %89 = or i32 %88, %2
  %90 = xor i32 %83, -1
  %91 = and i32 %90, %60
  %92 = and i32 %49, %23
  %93 = xor i32 %46, -1
  %94 = and i32 %86, %93
  %95 = or i32 %23, %1
  %96 = xor i32 %95, -1
  %97 = or i32 %42, %60
  %98 = and i32 %62, %1
  %99 = or i32 %78, %2
  %100 = or i32 %27, %60
  %101 = and i32 %29, %39
  %102 = or i32 %78, %42
  %103 = or i32 %27, %35
  %104 = add i32 %78, 1
  %105 = or i32 %93, %88
  %106 = and i32 %29, %0
  %107 = and i32 %46, %52
  %108 = or i32 %59, %42
  %109 = or i32 %59, %85
  %110 = xor i32 %95, %10
  %111 = and i32 %46, %0
  %112 = xor i32 %52, %2
  %113 = xor i32 %31, -1
  %114 = and i32 %113, %39
  %115 = xor i32 %85, %1
  %116 = or i32 %57, %1
  %117 = shl i32 %116, 1
  %118 = xor i32 %78, %2
  %119 = or i32 %83, %31
  %120 = xor i32 %83, %113
  %121 = xor i32 %93, %0
  %122 = or i32 %11, %39
  %123 = and i32 %44, %39
  %124 = or i32 %35, %2
  %125 = and i32 %124, %0
  %126 = xor i32 %125, -1
  %127 = xor i32 %123, %126
  %128 = or i32 %93, %0
  %129 = or i32 %93, %50
  %130 = or i32 %36, %50
  %131 = or i32 %123, %125
  %132 = or i32 %24, %0
  %133 = and i32 %56, %60
  %134 = and i32 %49, %2
  %135 = and i32 %31, %39
  %136 = and i32 %7, %0
  %137 = xor i32 %136, -1
  %138 = xor i32 %135, %137
  %139 = or i32 %46, %88
  %140 = or i32 %27, %59
  %141 = or i32 %36, %10
  %142 = and i32 %36, %1
  %143 = xor i32 %7, %10
  %144 = or i32 %36, %1
  %145 = and i32 %124, %39
  %146 = or i32 %45, %145
  %147 = or i32 %31, %0
  %148 = and i32 %66, %59
  %149 = xor i32 %11, %0
  %150 = shl i32 %149, 1
  %151 = or i32 %46, %39
  %152 = xor i32 %123, %151
  %153 = shl i32 %152, 1
  %154 = add i32 %27, 1
  %155 = or i32 %78, %23
  %156 = shl i32 %155, 1
  %157 = or i32 %85, %60
  %158 = or i32 %36, %88
  %159 = and i32 %59, %2
  %160 = xor i32 %47, -1
  %161 = or i32 %45, %160
  %162 = xor i32 %27, %86
  %163 = xor i32 %56, %10
  %164 = or i32 %46, %78
  %165 = and i32 %46, %86
  %166 = or i32 %83, %1
  %167 = or i32 %23, %88
  %168 = and i32 %49, %42
  %169 = xor i32 %86, %2
  %170 = xor i32 %27, %29
  %171 = and i32 %93, %79
  %172 = or i32 %32, %69
  %173 = and i32 %113, %0
  %174 = or i32 %7, %39
  %175 = xor i32 %95, %0
  %176 = or i32 %10, %42
  %177 = or i32 %31, %39
  %178 = or i32 %96, %39
  %179 = or i32 %32, %54
  %180 = and i32 %42, %35
  %181 = xor i32 %90, %1
  %182 = shl i32 %181, 1
  %183 = and i32 %66, %1
  %184 = and i32 %86, %2
  %185 = and i32 %36, %35
  %186 = and i32 %60, %2
  %187 = xor i32 %151, -1
  %188 = or i32 %123, %187
  %189 = and i32 %52, %2
  %190 = or i32 %10, %93
  %191 = and i32 %36, %79
  %192 = and i32 %11, %39
  %193 = mul i32 %192, -23
  %194 = and i32 %24, %39
  %195 = and i32 %11, %0
  %196 = mul i32 %195, -7
  %197 = and i32 %24, %0
  %198 = and i32 %96, %39
  %199 = mul i32 %135, -12
  %200 = and i32 %96, %0
  %201 = mul i32 %200, 6
  %202 = add i32 %186, %0
  %203 = add i32 %202, %197
  %204 = add i32 %203, %185
  %205 = add i32 %204, %173
  %206 = add i32 %205, %47
  %207 = add i32 %206, %94
  %208 = add i32 %207, %80
  %209 = add i32 %208, %76
  %210 = add i32 %209, %73
  %211 = add i32 %210, %58
  %212 = add i32 %211, %55
  %213 = shl i32 %212, 1
  %214 = sub i32 %32, %198
  %215 = sub i32 %214, %194
  %216 = add i32 %215, %148
  %217 = sub i32 %216, %22
  %218 = add i32 %217, %138
  %219 = mul i32 %218, 3
  %220 = sub i32 %167, %189
  %221 = add i32 %220, %101
  %222 = mul i32 %221, 5
  %223 = add i32 %35, %39
  %224 = add i32 %223, %104
  %225 = add i32 %224, 1
  %226 = sub i32 %225, %49
  %227 = sub i32 %226, %59
  %228 = sub i32 %227, %2
  %229 = add i32 %228, %50
  %230 = add i32 %229, %3
  %231 = add i32 %230, %51
  %232 = add i32 %231, %61
  %233 = sub i32 %232, %77
  %234 = sub i32 %233, %83
  %235 = add i32 %234, %85
  %236 = sub i32 %235, %89
  %237 = sub i32 %236, %92
  %238 = add i32 %237, %96
  %239 = add i32 %238, %99
  %240 = add i32 %239, %112
  %241 = add i32 %240, %93
  %242 = sub i32 %241, %118
  %243 = add i32 %242, %134
  %244 = add i32 %243, %11
  %245 = add i32 %244, %24
  %246 = sub i32 %245, %7
  %247 = add i32 %246, %154
  %248 = sub i32 %247, %36
  %249 = add i32 %248, %159
  %250 = add i32 %249, %169
  %251 = add i32 %250, %184
  %252 = add i32 %251, %113
  %253 = sub i32 %252, %28
  %254 = sub i32 %253, %30
  %255 = sub i32 %254, %43
  %256 = sub i32 %255, %53
  %257 = sub i32 %256, %65
  %258 = add i32 %257, %67
  %259 = sub i32 %258, %68
  %260 = add i32 %259, %40
  %261 = add i32 %260, %71
  %262 = add i32 %261, %72
  %263 = sub i32 %262, %84
  %264 = sub i32 %263, %87
  %265 = add i32 %264, %91
  %266 = sub i32 %265, %97
  %267 = sub i32 %266, %98
  %268 = sub i32 %267, %100
  %269 = add i32 %268, %102
  %270 = sub i32 %269, %103
  %271 = sub i32 %270, %105
  %272 = sub i32 %271, %106
  %273 = add i32 %272, %107
  %274 = add i32 %273, %108
  %275 = add i32 %274, %109
  %276 = sub i32 %275, %110
  %277 = sub i32 %276, %111
  %278 = sub i32 %277, %114
  %279 = add i32 %278, %115
  %280 = sub i32 %279, %119
  %281 = sub i32 %280, %120
  %282 = add i32 %281, %121
  %283 = add i32 %282, %122
  %284 = sub i32 %283, %128
  %285 = sub i32 %284, %129
  %286 = add i32 %285, %130
  %287 = add i32 %286, %132
  %288 = add i32 %287, %133
  %289 = sub i32 %288, %139
  %290 = sub i32 %289, %140
  %291 = sub i32 %290, %141
  %292 = sub i32 %291, %142
  %293 = add i32 %292, %143
  %294 = add i32 %293, %144
  %295 = add i32 %294, %147
  %296 = sub i32 %295, %156
  %297 = add i32 %296, %157
  %298 = add i32 %297, %158
  %299 = add i32 %298, %162
  %300 = add i32 %299, %163
  %301 = sub i32 %300, %164
  %302 = add i32 %301, %165
  %303 = sub i32 %302, %166
  %304 = add i32 %303, %168
  %305 = sub i32 %304, %170
  %306 = add i32 %305, %171
  %307 = sub i32 %306, %174
  %308 = add i32 %307, %175
  %309 = add i32 %308, %176
  %310 = sub i32 %309, %69
  %311 = add i32 %310, %177
  %312 = add i32 %311, %178
  %313 = sub i32 %312, %151
  %314 = add i32 %313, %180
  %315 = add i32 %314, %183
  %316 = add i32 %315, %190
  %317 = add i32 %316, %191
  %318 = sub i32 %317, %16
  %319 = add i32 %318, %15
  %320 = sub i32 %319, %26
  %321 = add i32 %320, %34
  %322 = sub i32 %321, %38
  %323 = sub i32 %322, %41
  %324 = sub i32 %323, %48
  %325 = sub i32 %324, %64
  %326 = add i32 %325, %70
  %327 = sub i32 %326, %75
  %328 = sub i32 %327, %82
  %329 = sub i32 %328, %117
  %330 = add i32 %329, %127
  %331 = sub i32 %330, %131
  %332 = sub i32 %331, %146
  %333 = sub i32 %332, %150
  %334 = add i32 %333, %161
  %335 = sub i32 %334, %172
  %336 = add i32 %335, %179
  %337 = sub i32 %336, %182
  %338 = sub i32 %337, %188
  %339 = add i32 %338, %193
  %340 = add i32 %339, %196
  %341 = add i32 %340, %199
  %342 = add i32 %341, %201
  %343 = sub i32 %342, %21
  %344 = sub i32 %343, %153
  %345 = sub i32 %344, %19
  %346 = add i32 %345, %222
  %347 = add i32 %346, %219
  %348 = add i32 %347, %213
  %349 = icmp eq i32 %14, %348
  %350 = select i1 %349, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %351 = tail call i32 @puts(i8* nonnull dereferenceable(1) %350)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
