digraph "DFG for'crackme' function" {
	Node0xac5c00[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xac5c70[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xac5d30[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0xac5da0[shape=record, label="  %6 = or i32 %5, 1"];
	Node0xac5e10[shape=record, label="  %7 = and i32 %1, %0"];
	Node0xac5eb0[shape=record, label="  %8 = add i32 %1, 2"];
	Node0xac5f20[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0xac5f90[shape=record, label="  %10 = shl i32 %1, 1"];
	Node0xac6000[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0xac6070[shape=record, label="  %12 = and i32 %3, %0"];
	Node0xac60e0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0xac6150[shape=record, label="  %14 = or i32 %1, %0"];
	Node0xac61c0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0xac6260[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0xac62d0[shape=record, label="  %17 = xor i32 %5, -2"];
	Node0xac6370[shape=record, label="  %18 = mul i32 %12, 6"];
	Node0xac63e0[shape=record, label="  %19 = shl i32 %7, 2"];
	Node0xac6450[shape=record, label="  %20 = sub i32 %8, %9"];
	Node0xac64c0[shape=record, label="  %21 = add i32 %20, %7"];
	Node0xac6530[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0xac65a0[shape=record, label="  %23 = sub i32 %22, %11"];
	Node0xac6610[shape=record, label="  %24 = add i32 %23, %13"];
	Node0xac6680[shape=record, label="  %25 = add i32 %24, %18"];
	Node0xac66f0[shape=record, label="  %26 = add i32 %25, %19"];
	Node0xac6760[shape=record, label="  %27 = add i32 %26, %16"];
	Node0xac67d0[shape=record, label="  %28 = add i32 %27, %17"];
	Node0xac6840[shape=record, label="  %29 = icmp eq i32 %6, %28"];
	Node0xa66268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xac6ce0[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0xac6d30[shape=record, label="  ret void"];
	Node0xac5c00 -> Node0xac5c70;
	Node0xac5c70 -> Node0xac5d30;
	Node0xac5d30 -> Node0xac5da0;
	Node0xac5da0 -> Node0xac5e10;
	Node0xac5e10 -> Node0xac5eb0;
	Node0xac5eb0 -> Node0xac5f20;
	Node0xac5f20 -> Node0xac5f90;
	Node0xac5f90 -> Node0xac6000;
	Node0xac6000 -> Node0xac6070;
	Node0xac6070 -> Node0xac60e0;
	Node0xac60e0 -> Node0xac6150;
	Node0xac6150 -> Node0xac61c0;
	Node0xac61c0 -> Node0xac6260;
	Node0xac6260 -> Node0xac62d0;
	Node0xac62d0 -> Node0xac6370;
	Node0xac6370 -> Node0xac63e0;
	Node0xac63e0 -> Node0xac6450;
	Node0xac6450 -> Node0xac64c0;
	Node0xac64c0 -> Node0xac6530;
	Node0xac6530 -> Node0xac65a0;
	Node0xac65a0 -> Node0xac6610;
	Node0xac6610 -> Node0xac6680;
	Node0xac6680 -> Node0xac66f0;
	Node0xac66f0 -> Node0xac6760;
	Node0xac6760 -> Node0xac67d0;
	Node0xac67d0 -> Node0xac6840;
	Node0xac6840 -> Node0xa66268;
	Node0xa66268 -> Node0xac6ce0;
	Node0xac6ce0 -> Node0xac6d30;
edge [color=red]
	Node0xac5c00 -> Node0xac5c70;
	Node0xac5c70 -> Node0xac5d30;
	Node0xac5d30 -> Node0xac5da0;
	Node0xac5c00 -> Node0xac6070;
	Node0xac6070 -> Node0xac60e0;
	Node0xac6150 -> Node0xac61c0;
	Node0xac61c0 -> Node0xac6260;
	Node0xac5d30 -> Node0xac62d0;
	Node0xac6070 -> Node0xac6370;
	Node0xac5e10 -> Node0xac63e0;
	Node0xac5eb0 -> Node0xac6450;
	Node0xac5f20 -> Node0xac6450;
	Node0xac6450 -> Node0xac64c0;
	Node0xac5e10 -> Node0xac64c0;
	Node0xac64c0 -> Node0xac6530;
	Node0xac5f90 -> Node0xac6530;
	Node0xac6530 -> Node0xac65a0;
	Node0xac6000 -> Node0xac65a0;
	Node0xac65a0 -> Node0xac6610;
	Node0xac60e0 -> Node0xac6610;
	Node0xac6610 -> Node0xac6680;
	Node0xac6370 -> Node0xac6680;
	Node0xac6680 -> Node0xac66f0;
	Node0xac63e0 -> Node0xac66f0;
	Node0xac66f0 -> Node0xac6760;
	Node0xac6260 -> Node0xac6760;
	Node0xac6760 -> Node0xac67d0;
	Node0xac62d0 -> Node0xac67d0;
	Node0xac5da0 -> Node0xac6840;
	Node0xac67d0 -> Node0xac6840;
	Node0xac6840 -> Node0xa66268;
	Node0xa66268 -> Node0xac6ce0;
}
