; ModuleID = '../.././c_source_file/0643_path_condition_crackme.c'
source_filename = "../.././c_source_file/0643_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = add i32 %6, 1
  %9 = sub i32 %8, %4
  %10 = and i32 %4, %3
  %11 = xor i32 %4, 2147483647
  %12 = and i32 %11, %3
  %13 = xor i32 %3, -1
  %14 = or i32 %4, %3
  %15 = xor i32 %4, %3
  %16 = shl i32 %15, 1
  %17 = xor i32 %16, -2
  %18 = shl i32 %14, 1
  %19 = xor i32 %18, -2
  %20 = shl i32 %10, 2
  %21 = xor i32 %0, -1
  %22 = and i32 %2, %1
  %23 = and i32 %22, %21
  %24 = and i32 %6, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %23, %25
  %27 = xor i32 %1, -1
  %28 = add i32 %1, 1
  %29 = and i32 %1, %0
  %30 = xor i32 %2, -1
  %31 = or i32 %30, %1
  %32 = xor i32 %31, -1
  %33 = or i32 %29, %32
  %34 = and i32 %22, %0
  %35 = and i32 %6, %21
  %36 = or i32 %34, %35
  %37 = and i32 %31, %21
  %38 = xor i32 %29, -1
  %39 = and i32 %7, %38
  %40 = and i32 %27, %2
  %41 = and i32 %40, %0
  %42 = or i32 %27, %2
  %43 = xor i32 %42, %21
  %44 = xor i32 %43, %41
  %45 = xor i32 %32, %0
  %46 = and i32 %2, %0
  %47 = xor i32 %46, %1
  %48 = or i32 %2, %1
  %49 = and i32 %48, %21
  %50 = or i32 %48, %0
  %51 = xor i32 %22, -1
  %52 = and i32 %51, %21
  %53 = or i32 %29, %7
  %54 = and i32 %27, %0
  %55 = xor i32 %54, -1
  %56 = xor i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = and i32 %57, %55
  %59 = and i32 %55, %2
  %60 = or i32 %30, %0
  %61 = and i32 %60, %27
  %62 = and i32 %30, %1
  %63 = xor i32 %62, -1
  %64 = xor i32 %63, %0
  %65 = and i32 %30, %0
  %66 = and i32 %7, %21
  %67 = xor i32 %54, %51
  %68 = or i32 %2, %0
  %69 = xor i32 %68, %29
  %70 = xor i32 %6, %0
  %71 = or i32 %41, %70
  %72 = xor i32 %1, %0
  %73 = and i32 %72, %57
  %74 = xor i32 %68, %1
  %75 = shl i32 %29, 1
  %76 = xor i32 %65, -1
  %77 = add i32 %65, 1
  %78 = xor i32 %48, -1
  %79 = xor i32 %78, %0
  %80 = or i32 %29, %78
  %81 = xor i32 %46, -1
  %82 = xor i32 %81, %1
  %83 = and i32 %48, %0
  %84 = or i32 %27, %0
  %85 = xor i32 %84, -1
  %86 = or i32 %30, %85
  %87 = and i32 %57, %38
  %88 = xor i32 %34, %70
  %89 = xor i32 %72, -1
  %90 = or i32 %57, %89
  %91 = and i32 %84, %7
  %92 = or i32 %1, %0
  %93 = and i32 %92, %2
  %94 = xor i32 %92, -1
  %95 = xor i32 %94, %2
  %96 = or i32 %29, %30
  %97 = and i32 %72, %81
  %98 = and i32 %76, %1
  %99 = or i32 %57, %1
  %100 = and i32 %40, %21
  %101 = and i32 %7, %0
  %102 = or i32 %100, %101
  %103 = xor i32 %22, %0
  %104 = and i32 %38, %2
  %105 = or i32 %46, %89
  %106 = or i32 %7, %85
  %107 = or i32 %6, %94
  %108 = or i32 %31, %0
  %109 = xor i32 %46, %48
  %110 = and i32 %6, %55
  %111 = xor i32 %70, -1
  %112 = or i32 %34, %111
  %113 = xor i32 %48, %29
  %114 = xor i32 %49, -1
  %115 = xor i32 %34, %114
  %116 = and i32 %72, %2
  %117 = shl i32 %32, 1
  %118 = and i32 %6, %38
  %119 = and i32 %56, %84
  %120 = or i32 %62, %54
  %121 = and i32 %7, %55
  %122 = or i32 %94, %2
  %123 = or i32 %72, %30
  %124 = or i32 %65, %72
  %125 = and i32 %60, %72
  %126 = xor i32 %54, %2
  %127 = and i32 %57, %89
  %128 = or i32 %6, %0
  %129 = or i32 %23, %24
  %130 = or i32 %32, %0
  %131 = shl i32 %130, 1
  %132 = or i32 %48, %21
  %133 = and i32 %6, %84
  %134 = or i32 %56, %72
  %135 = or i32 %65, %89
  %136 = xor i32 %48, %0
  %137 = and i32 %92, %30
  %138 = and i32 %72, %30
  %139 = and i32 %30, %55
  %140 = or i32 %56, %54
  %141 = or i32 %32, %21
  %142 = xor i32 %84, %2
  %143 = and i32 %30, %89
  %144 = or i32 %51, %0
  %145 = xor i32 %65, %51
  %146 = or i32 %57, %27
  %147 = or i32 %46, %78
  %148 = and i32 %81, %1
  %149 = or i32 %63, %0
  %150 = or i32 %78, %21
  %151 = or i32 %62, %0
  %152 = xor i32 %136, 1073741823
  %153 = xor i32 %152, %34
  %154 = shl i32 %153, 2
  %155 = or i32 %46, %1
  %156 = and i32 %68, %1
  %157 = or i32 %72, %57
  %158 = shl i32 %157, 1
  %159 = or i32 %6, %29
  %160 = and i32 %6, %92
  %161 = xor i32 %41, %128
  %162 = xor i32 %62, %0
  %163 = xor i32 %128, -1
  %164 = or i32 %41, %163
  %165 = xor i32 %46, %84
  %166 = and i32 %92, %7
  %167 = and i32 %42, %0
  %168 = or i32 %100, %167
  %169 = shl i32 %168, 1
  %170 = and i32 %84, %57
  %171 = or i32 %22, %0
  %172 = xor i32 %68, -1
  %173 = or i32 %172, %89
  %174 = and i32 %68, %72
  %175 = or i32 %34, %136
  %176 = or i32 %7, %94
  %177 = and i32 %84, %2
  %178 = and i32 %30, %38
  %179 = and i32 %63, %0
  %180 = xor i32 %76, %1
  %181 = add i32 %68, 1
  %182 = or i32 %34, %49
  %183 = shl i32 %182, 1
  %184 = xor i32 %60, -1
  %185 = or i32 %184, %89
  %186 = or i32 %46, %62
  %187 = or i32 %7, %21
  %188 = shl i32 %187, 1
  %189 = or i32 %54, %7
  %190 = or i32 %56, %29
  %191 = and i32 %57, %27
  %192 = xor i32 %60, %1
  %193 = or i32 %65, %22
  %194 = shl i32 %193, 1
  %195 = xor i32 %42, -1
  %196 = or i32 %195, %0
  %197 = xor i32 %41, %196
  %198 = and i32 %56, %1
  %199 = xor i32 %46, %63
  %200 = or i32 %51, %21
  %201 = shl i32 %200, 1
  %202 = or i32 %85, %2
  %203 = and i32 %78, %21
  %204 = and i32 %62, %21
  %205 = mul i32 %204, -7
  %206 = and i32 %78, %0
  %207 = mul i32 %206, -10
  %208 = and i32 %62, %0
  %209 = mul i32 %208, 17
  %210 = and i32 %32, %21
  %211 = shl i32 %210, 3
  %212 = and i32 %32, %0
  %213 = mul i32 %212, 6
  %214 = sub i32 -2, %92
  %215 = add i32 %214, %202
  %216 = add i32 %215, %123
  %217 = add i32 %216, %65
  %218 = add i32 %217, %59
  %219 = add i32 %218, %159
  %220 = add i32 %219, %140
  %221 = add i32 %220, %106
  %222 = add i32 %221, %91
  %223 = add i32 %222, %87
  %224 = add i32 %223, %74
  %225 = add i32 %224, %66
  %226 = add i32 %225, %175
  %227 = sub i32 %186, %34
  %228 = add i32 %227, %133
  %229 = sub i32 %228, %132
  %230 = sub i32 %229, %53
  %231 = sub i32 %230, %112
  %232 = mul i32 %231, 5
  %233 = add i32 %23, %203
  %234 = mul i32 %233, 11
  %235 = sub i32 %146, %105
  %236 = mul i32 %235, 3
  %237 = add i32 %226, %12
  %238 = shl i32 %237, 1
  %239 = sub i32 1, %0
  %240 = add i32 %239, %28
  %241 = add i32 %240, %1
  %242 = add i32 %241, %89
  %243 = add i32 %242, %30
  %244 = add i32 %243, %84
  %245 = add i32 %244, %13
  %246 = sub i32 %245, %75
  %247 = add i32 %246, %77
  %248 = sub i32 %247, %68
  %249 = sub i32 %248, %6
  %250 = sub i32 %249, %86
  %251 = sub i32 %250, %93
  %252 = sub i32 %251, %95
  %253 = add i32 %252, %96
  %254 = add i32 %253, %104
  %255 = add i32 %254, %116
  %256 = add i32 %255, %122
  %257 = add i32 %256, %126
  %258 = sub i32 %257, %137
  %259 = add i32 %258, %138
  %260 = add i32 %259, %139
  %261 = sub i32 %260, %60
  %262 = add i32 %261, %62
  %263 = add i32 %262, %142
  %264 = sub i32 %263, %143
  %265 = sub i32 %264, %177
  %266 = sub i32 %265, %178
  %267 = add i32 %266, %181
  %268 = sub i32 %267, %33
  %269 = sub i32 %268, %37
  %270 = sub i32 %269, %39
  %271 = add i32 %270, %45
  %272 = sub i32 %271, %47
  %273 = add i32 %272, %49
  %274 = add i32 %273, %50
  %275 = sub i32 %274, %52
  %276 = add i32 %275, %58
  %277 = add i32 %276, %61
  %278 = add i32 %277, %64
  %279 = add i32 %278, %35
  %280 = sub i32 %279, %67
  %281 = add i32 %280, %69
  %282 = add i32 %281, %73
  %283 = add i32 %282, %79
  %284 = add i32 %283, %80
  %285 = add i32 %284, %82
  %286 = add i32 %285, %83
  %287 = add i32 %286, %90
  %288 = sub i32 %287, %97
  %289 = add i32 %288, %98
  %290 = sub i32 %289, %99
  %291 = add i32 %290, %101
  %292 = sub i32 %291, %103
  %293 = add i32 %292, %70
  %294 = sub i32 %293, %107
  %295 = sub i32 %294, %108
  %296 = sub i32 %295, %109
  %297 = sub i32 %296, %110
  %298 = add i32 %297, %113
  %299 = sub i32 %298, %117
  %300 = add i32 %299, %118
  %301 = add i32 %300, %119
  %302 = sub i32 %301, %120
  %303 = add i32 %302, %121
  %304 = sub i32 %303, %124
  %305 = sub i32 %304, %125
  %306 = add i32 %305, %127
  %307 = sub i32 %306, %128
  %308 = add i32 %307, %134
  %309 = sub i32 %308, %135
  %310 = add i32 %309, %136
  %311 = sub i32 %310, %141
  %312 = add i32 %311, %144
  %313 = sub i32 %312, %145
  %314 = add i32 %313, %147
  %315 = sub i32 %314, %148
  %316 = add i32 %315, %149
  %317 = sub i32 %316, %150
  %318 = add i32 %317, %151
  %319 = sub i32 %318, %155
  %320 = sub i32 %319, %156
  %321 = sub i32 %320, %160
  %322 = sub i32 %321, %162
  %323 = sub i32 %322, %165
  %324 = add i32 %323, %166
  %325 = add i32 %324, %170
  %326 = add i32 %325, %171
  %327 = add i32 %326, %173
  %328 = add i32 %327, %174
  %329 = add i32 %328, %176
  %330 = add i32 %329, %179
  %331 = sub i32 %330, %180
  %332 = sub i32 %331, %185
  %333 = add i32 %332, %189
  %334 = sub i32 %333, %190
  %335 = add i32 %334, %191
  %336 = sub i32 %335, %192
  %337 = sub i32 %336, %198
  %338 = add i32 %337, %199
  %339 = sub i32 %338, %10
  %340 = sub i32 %339, %14
  %341 = sub i32 %340, %26
  %342 = add i32 %341, %36
  %343 = add i32 %342, %44
  %344 = sub i32 %343, %71
  %345 = add i32 %344, %88
  %346 = sub i32 %345, %102
  %347 = sub i32 %346, %115
  %348 = sub i32 %347, %129
  %349 = sub i32 %348, %131
  %350 = sub i32 %349, %158
  %351 = add i32 %350, %161
  %352 = sub i32 %351, %164
  %353 = sub i32 %352, %188
  %354 = sub i32 %353, %194
  %355 = add i32 %354, %197
  %356 = sub i32 %355, %201
  %357 = add i32 %356, %205
  %358 = add i32 %357, %207
  %359 = add i32 %358, %209
  %360 = sub i32 %359, %211
  %361 = add i32 %360, %213
  %362 = add i32 %361, %20
  %363 = sub i32 %362, %169
  %364 = sub i32 %363, %183
  %365 = add i32 %364, %234
  %366 = add i32 %365, %236
  %367 = sub i32 %366, %17
  %368 = add i32 %367, %19
  %369 = sub i32 %368, %154
  %370 = add i32 %369, %232
  %371 = add i32 %370, %238
  %372 = icmp eq i32 %9, %371
  %373 = select i1 %372, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %374 = tail call i32 @puts(i8* nonnull dereferenceable(1) %373)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
