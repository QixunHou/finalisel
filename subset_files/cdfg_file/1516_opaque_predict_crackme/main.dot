digraph "DFG for'main' function" {
	Node0x6cfe08[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x6cfe88[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x6cff18[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x6cff78[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x6d0028[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x6d0458[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x6d0538[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x6d0638[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x6d06f8[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x6d07a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x6d0868[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x6d0918[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x6caba0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x6d0b18[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x6d1a88[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x6d20f8[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x6d2158[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x6d21d0[shape=record, label="  %14 = xor i32 %12, %11"];
	Node0x6d2240[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0x6d22b0[shape=record, label="  %16 = xor i32 %10, -1"];
	Node0x6d2320[shape=record, label="  %17 = or i32 %13, %10"];
	Node0x6d2390[shape=record, label="  %18 = sub i32 %16, %11"];
	Node0x6d2400[shape=record, label="  %19 = add i32 %18, %15"];
	Node0x6d2470[shape=record, label="  %20 = add i32 %19, %17"];
	Node0x6d24e0[shape=record, label="  %21 = xor i32 %12, -1"];
	Node0x6d2550[shape=record, label="  %22 = or i32 %11, %21"];
	Node0x6d25c0[shape=record, label="  %23 = mul i32 %22, -2"];
	Node0x6d2630[shape=record, label="  %24 = xor i32 %15, -2"];
	Node0x6d26a0[shape=record, label="  %25 = sub i32 %23, %24"];
	Node0x6d2710[shape=record, label="  %26 = or i32 %25, 1"];
	Node0x6d2780[shape=record, label="  %27 = and i32 %12, %11"];
	Node0x6d27f0[shape=record, label="  %28 = shl i32 %27, 1"];
	Node0x6d2860[shape=record, label="  %29 = xor i32 %28, -2"];
	Node0x6d28d0[shape=record, label="  %30 = xor i32 %22, -1"];
	Node0x6d2940[shape=record, label="  %31 = and i32 %11, %21"];
	Node0x6d29b0[shape=record, label="  %32 = and i32 %13, %10"];
	Node0x6d2a20[shape=record, label="  %33 = and i32 %13, %16"];
	Node0x6d2a90[shape=record, label="  %34 = xor i32 %33, -1"];
	Node0x6d2b00[shape=record, label="  %35 = or i32 %13, %16"];
	Node0x6d2b70[shape=record, label="  %36 = shl i32 %35, 1"];
	Node0x6d2be0[shape=record, label="  %37 = xor i32 %36, -2"];
	Node0x6d2c50[shape=record, label="  %38 = shl i32 %32, 2"];
	Node0x6d2cc0[shape=record, label="  %39 = add i32 %31, %30"];
	Node0x6d2d30[shape=record, label="  %40 = add i32 %39, %35"];
	Node0x6d2da0[shape=record, label="  %41 = sub i32 %40, %33"];
	Node0x6d2e10[shape=record, label="  %42 = mul i32 %41, 3"];
	Node0x6d2e80[shape=record, label="  %43 = sub i32 %17, %14"];
	Node0x6d2ef0[shape=record, label="  %44 = mul i32 %43, 5"];
	Node0x6d2f60[shape=record, label="  %45 = sub i32 %11, %32"];
	Node0x6d2fd0[shape=record, label="  %46 = add i32 %45, %34"];
	Node0x6d3040[shape=record, label="  %47 = add i32 %46, %29"];
	Node0x6d30b0[shape=record, label="  %48 = sub i32 %47, %38"];
	Node0x6d3120[shape=record, label="  %49 = sub i32 %48, %37"];
	Node0x6d3190[shape=record, label="  %50 = add i32 %49, %44"];
	Node0x6d3200[shape=record, label="  %51 = add i32 %50, %26"];
	Node0x6d3270[shape=record, label="  %52 = add i32 %51, %42"];
	Node0x6d32e0[shape=record, label="  %53 = icmp eq i32 %20, %52"];
	Node0x66f8b8[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x6d3370[shape=record, label="  %55 = call i32 @puts(i8* nonnull dereferenceable(1) %54) #5"];
	Node0x6d3618[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x6d3778[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x6d3888[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x6d3998[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x6d3a58[shape=record, label="  ret i32 0"];
	Node0x6cfe08 -> Node0x6cfe88;
	Node0x6cfe88 -> Node0x6cff18;
	Node0x6cff18 -> Node0x6cff78;
	Node0x6cff78 -> Node0x6d0028;
	Node0x6d0028 -> Node0x6d0458;
	Node0x6d0458 -> Node0x6d0538;
	Node0x6d0538 -> Node0x6d0638;
	Node0x6d0638 -> Node0x6d06f8;
	Node0x6d06f8 -> Node0x6d07a8;
	Node0x6d07a8 -> Node0x6d0868;
	Node0x6d0868 -> Node0x6d0918;
	Node0x6d0918 -> Node0x6caba0;
	Node0x6caba0 -> Node0x6d0b18;
	Node0x6d0b18 -> Node0x6d1a88;
	Node0x6d1a88 -> Node0x6d20f8;
	Node0x6d20f8 -> Node0x6d2158;
	Node0x6d2158 -> Node0x6d21d0;
	Node0x6d21d0 -> Node0x6d2240;
	Node0x6d2240 -> Node0x6d22b0;
	Node0x6d22b0 -> Node0x6d2320;
	Node0x6d2320 -> Node0x6d2390;
	Node0x6d2390 -> Node0x6d2400;
	Node0x6d2400 -> Node0x6d2470;
	Node0x6d2470 -> Node0x6d24e0;
	Node0x6d24e0 -> Node0x6d2550;
	Node0x6d2550 -> Node0x6d25c0;
	Node0x6d25c0 -> Node0x6d2630;
	Node0x6d2630 -> Node0x6d26a0;
	Node0x6d26a0 -> Node0x6d2710;
	Node0x6d2710 -> Node0x6d2780;
	Node0x6d2780 -> Node0x6d27f0;
	Node0x6d27f0 -> Node0x6d2860;
	Node0x6d2860 -> Node0x6d28d0;
	Node0x6d28d0 -> Node0x6d2940;
	Node0x6d2940 -> Node0x6d29b0;
	Node0x6d29b0 -> Node0x6d2a20;
	Node0x6d2a20 -> Node0x6d2a90;
	Node0x6d2a90 -> Node0x6d2b00;
	Node0x6d2b00 -> Node0x6d2b70;
	Node0x6d2b70 -> Node0x6d2be0;
	Node0x6d2be0 -> Node0x6d2c50;
	Node0x6d2c50 -> Node0x6d2cc0;
	Node0x6d2cc0 -> Node0x6d2d30;
	Node0x6d2d30 -> Node0x6d2da0;
	Node0x6d2da0 -> Node0x6d2e10;
	Node0x6d2e10 -> Node0x6d2e80;
	Node0x6d2e80 -> Node0x6d2ef0;
	Node0x6d2ef0 -> Node0x6d2f60;
	Node0x6d2f60 -> Node0x6d2fd0;
	Node0x6d2fd0 -> Node0x6d3040;
	Node0x6d3040 -> Node0x6d30b0;
	Node0x6d30b0 -> Node0x6d3120;
	Node0x6d3120 -> Node0x6d3190;
	Node0x6d3190 -> Node0x6d3200;
	Node0x6d3200 -> Node0x6d3270;
	Node0x6d3270 -> Node0x6d32e0;
	Node0x6d32e0 -> Node0x66f8b8;
	Node0x66f8b8 -> Node0x6d3370;
	Node0x6d3370 -> Node0x6d3618;
	Node0x6d3618 -> Node0x6d3778;
	Node0x6d3778 -> Node0x6d3888;
	Node0x6d3888 -> Node0x6d3998;
	Node0x6d3998 -> Node0x6d3a58;
edge [color=red]
	Node0x6cfe08 -> Node0x6d0028;
	Node0x6d0028 -> Node0x6d0458;
	Node0x6cfe88 -> Node0x6d0538;
	Node0x6d0538 -> Node0x6d0638;
	Node0x6cff18 -> Node0x6d06f8;
	Node0x6d06f8 -> Node0x6d07a8;
	Node0x6cff78 -> Node0x6d0868;
	Node0x6d0868 -> Node0x6d0918;
	Node0x6cfe08 -> Node0x6caba0;
	Node0x6cfe88 -> Node0x6caba0;
	Node0x6cff18 -> Node0x6caba0;
	Node0x6cff78 -> Node0x6caba0;
	Node0x6cfe08 -> Node0x6d0b18;
	Node0x6cfe88 -> Node0x6d1a88;
	Node0x6cff18 -> Node0x6d20f8;
	Node0x6cff78 -> Node0x6d2158;
	Node0x6d20f8 -> Node0x6d21d0;
	Node0x6d1a88 -> Node0x6d21d0;
	Node0x6d21d0 -> Node0x6d2240;
	Node0x6d0b18 -> Node0x6d22b0;
	Node0x6d2158 -> Node0x6d2320;
	Node0x6d0b18 -> Node0x6d2320;
	Node0x6d22b0 -> Node0x6d2390;
	Node0x6d1a88 -> Node0x6d2390;
	Node0x6d2390 -> Node0x6d2400;
	Node0x6d2240 -> Node0x6d2400;
	Node0x6d2400 -> Node0x6d2470;
	Node0x6d2320 -> Node0x6d2470;
	Node0x6d20f8 -> Node0x6d24e0;
	Node0x6d1a88 -> Node0x6d2550;
	Node0x6d24e0 -> Node0x6d2550;
	Node0x6d2550 -> Node0x6d25c0;
	Node0x6d2240 -> Node0x6d2630;
	Node0x6d25c0 -> Node0x6d26a0;
	Node0x6d2630 -> Node0x6d26a0;
	Node0x6d26a0 -> Node0x6d2710;
	Node0x6d20f8 -> Node0x6d2780;
	Node0x6d1a88 -> Node0x6d2780;
	Node0x6d2780 -> Node0x6d27f0;
	Node0x6d27f0 -> Node0x6d2860;
	Node0x6d2550 -> Node0x6d28d0;
	Node0x6d1a88 -> Node0x6d2940;
	Node0x6d24e0 -> Node0x6d2940;
	Node0x6d2158 -> Node0x6d29b0;
	Node0x6d0b18 -> Node0x6d29b0;
	Node0x6d2158 -> Node0x6d2a20;
	Node0x6d22b0 -> Node0x6d2a20;
	Node0x6d2a20 -> Node0x6d2a90;
	Node0x6d2158 -> Node0x6d2b00;
	Node0x6d22b0 -> Node0x6d2b00;
	Node0x6d2b00 -> Node0x6d2b70;
	Node0x6d2b70 -> Node0x6d2be0;
	Node0x6d29b0 -> Node0x6d2c50;
	Node0x6d2940 -> Node0x6d2cc0;
	Node0x6d28d0 -> Node0x6d2cc0;
	Node0x6d2cc0 -> Node0x6d2d30;
	Node0x6d2b00 -> Node0x6d2d30;
	Node0x6d2d30 -> Node0x6d2da0;
	Node0x6d2a20 -> Node0x6d2da0;
	Node0x6d2da0 -> Node0x6d2e10;
	Node0x6d2320 -> Node0x6d2e80;
	Node0x6d21d0 -> Node0x6d2e80;
	Node0x6d2e80 -> Node0x6d2ef0;
	Node0x6d1a88 -> Node0x6d2f60;
	Node0x6d29b0 -> Node0x6d2f60;
	Node0x6d2f60 -> Node0x6d2fd0;
	Node0x6d2a90 -> Node0x6d2fd0;
	Node0x6d2fd0 -> Node0x6d3040;
	Node0x6d2860 -> Node0x6d3040;
	Node0x6d3040 -> Node0x6d30b0;
	Node0x6d2c50 -> Node0x6d30b0;
	Node0x6d30b0 -> Node0x6d3120;
	Node0x6d2be0 -> Node0x6d3120;
	Node0x6d3120 -> Node0x6d3190;
	Node0x6d2ef0 -> Node0x6d3190;
	Node0x6d3190 -> Node0x6d3200;
	Node0x6d2710 -> Node0x6d3200;
	Node0x6d3200 -> Node0x6d3270;
	Node0x6d2e10 -> Node0x6d3270;
	Node0x6d2470 -> Node0x6d32e0;
	Node0x6d3270 -> Node0x6d32e0;
	Node0x6d32e0 -> Node0x66f8b8;
	Node0x66f8b8 -> Node0x6d3370;
	Node0x6d0868 -> Node0x6d3618;
	Node0x6d06f8 -> Node0x6d3778;
	Node0x6d0538 -> Node0x6d3888;
	Node0x6d0028 -> Node0x6d3998;
}
