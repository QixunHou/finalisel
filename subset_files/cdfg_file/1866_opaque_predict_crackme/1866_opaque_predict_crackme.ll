; ModuleID = '../.././c_source_file/1866_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1866_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = or i32 %7, %0
  %9 = shl i32 %8, 1
  %10 = or i32 %1, %0
  %11 = xor i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = and i32 %10, %12
  %14 = sub i32 %9, %13
  %15 = and i32 %5, %3
  %16 = and i32 %15, %4
  %17 = or i32 %5, %3
  %18 = xor i32 %17, %4
  %19 = or i32 %16, %18
  %20 = sub i32 %14, %19
  %21 = xor i32 %1, -1
  %22 = and i32 %21, %2
  %23 = and i32 %22, %0
  %24 = xor i32 %11, %0
  %25 = xor i32 %23, -1
  %26 = xor i32 %24, %25
  %27 = or i32 %21, %0
  %28 = and i32 %11, %27
  %29 = xor i32 %2, -1
  %30 = xor i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %29, %31
  %33 = and i32 %1, %0
  %34 = or i32 %29, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %33, %35
  %37 = and i32 %29, %1
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %0
  %40 = shl i32 %39, 1
  %41 = xor i32 %0, -1
  %42 = or i32 %11, %41
  %43 = xor i32 %2, %0
  %44 = and i32 %43, %31
  %45 = or i32 %2, %0
  %46 = and i32 %45, %1
  %47 = or i32 %30, %35
  %48 = and i32 %21, %0
  %49 = or i32 %43, %48
  %50 = or i32 %33, %12
  %51 = and i32 %2, %0
  %52 = or i32 %51, %21
  %53 = shl i32 %52, 1
  %54 = xor i32 %33, -1
  %55 = xor i32 %43, -1
  %56 = and i32 %55, %54
  %57 = and i32 %11, %10
  %58 = or i32 %29, %1
  %59 = xor i32 %58, %0
  %60 = or i32 %30, %2
  %61 = or i32 %43, %30
  %62 = or i32 %55, %21
  %63 = or i32 %7, %41
  %64 = shl i32 %63, 1
  %65 = and i32 %29, %0
  %66 = xor i32 %65, %58
  %67 = xor i32 %7, -1
  %68 = or i32 %67, %0
  %69 = add i32 %11, 1
  %70 = and i32 %58, %0
  %71 = or i32 %11, %33
  %72 = or i32 %21, %2
  %73 = xor i32 %72, %0
  %74 = xor i32 %73, %25
  %75 = add i32 %33, 1
  %76 = xor i32 %65, -1
  %77 = and i32 %30, %76
  %78 = or i32 %48, %55
  %79 = xor i32 %45, -1
  %80 = or i32 %79, %1
  %81 = or i32 %51, %30
  %82 = xor i32 %51, -1
  %83 = and i32 %82, %21
  %84 = xor i32 %10, -1
  %85 = xor i32 %84, %2
  %86 = and i32 %43, %27
  %87 = or i32 %38, %41
  %88 = xor i32 %67, %0
  %89 = or i32 %48, %2
  %90 = and i32 %34, %30
  %91 = xor i32 %58, -1
  %92 = or i32 %91, %0
  %93 = and i32 %45, %31
  %94 = xor i32 %48, %38
  %95 = or i32 %2, %1
  %96 = xor i32 %95, %0
  %97 = or i32 %23, %73
  %98 = xor i32 %10, %2
  %99 = and i32 %7, %0
  %100 = or i32 %99, %96
  %101 = or i32 %55, %84
  %102 = xor i32 %27, -1
  %103 = or i32 %43, %102
  %104 = xor i32 %95, %33
  %105 = shl i32 %104, 1
  %106 = or i32 %84, %2
  %107 = or i32 %65, %7
  %108 = or i32 %65, %21
  %109 = xor i32 %82, %1
  %110 = or i32 %55, %1
  %111 = or i32 %30, %55
  %112 = xor i32 %35, %1
  %113 = or i32 %12, %102
  %114 = and i32 %12, %54
  %115 = and i32 %11, %54
  %116 = or i32 %55, %31
  %117 = or i32 %48, %29
  %118 = or i32 %23, %24
  %119 = or i32 %7, %48
  %120 = xor i32 %48, -1
  %121 = and i32 %120, %2
  %122 = and i32 %27, %29
  %123 = shl i32 %122, 1
  %124 = and i32 %95, %41
  %125 = or i32 %99, %124
  %126 = add i32 %58, 1
  %127 = xor i32 %45, %33
  %128 = or i32 %65, %30
  %129 = xor i32 %99, -1
  %130 = xor i32 %96, %129
  %131 = xor i32 %54, %2
  %132 = xor i32 %34, %1
  %133 = and i32 %95, %0
  %134 = xor i32 %65, %67
  %135 = xor i32 %95, -1
  %136 = or i32 %51, %135
  %137 = xor i32 %27, %2
  %138 = and i32 %76, %1
  %139 = and i32 %11, %41
  %140 = xor i32 %139, %129
  %141 = and i32 %30, %82
  %142 = and i32 %67, %0
  %143 = or i32 %51, %31
  %144 = or i32 %43, %21
  %145 = xor i32 %58, %33
  %146 = shl i32 %145, 1
  %147 = xor i32 %12, %0
  %148 = xor i32 %48, %2
  %149 = or i32 %30, %79
  %150 = shl i32 %124, 1
  %151 = or i32 %11, %0
  %152 = xor i32 %23, %151
  %153 = and i32 %55, %1
  %154 = xor i32 %91, %0
  %155 = or i32 %99, %139
  %156 = shl i32 %155, 1
  %157 = and i32 %43, %10
  %158 = and i32 %27, %12
  %159 = or i32 %12, %0
  %160 = and i32 %34, %31
  %161 = or i32 %65, %31
  %162 = shl i32 %161, 1
  %163 = and i32 %55, %120
  %164 = xor i32 %151, -1
  %165 = or i32 %23, %164
  %166 = or i32 %58, %0
  %167 = xor i32 %7, %0
  %168 = xor i32 %45, %1
  %169 = shl i32 %168, 1
  %170 = or i32 %48, %12
  %171 = xor i32 %48, %67
  %172 = and i32 %43, %21
  %173 = xor i32 %72, -1
  %174 = or i32 %173, %0
  %175 = xor i32 %23, %174
  %176 = and i32 %22, %41
  %177 = and i32 %72, %0
  %178 = xor i32 %177, -1
  %179 = xor i32 %176, %178
  %180 = xor i32 %34, %33
  %181 = and i32 %27, %55
  %182 = or i32 %135, %0
  %183 = and i32 %10, %2
  %184 = or i32 %11, %84
  %185 = and i32 %27, %2
  %186 = or i32 %35, %1
  %187 = and i32 %43, %30
  %188 = and i32 %12, %41
  %189 = shl i32 %102, 1
  %190 = shl i32 %51, 1
  %191 = and i32 %43, %1
  %192 = xor i32 %51, %38
  %193 = xor i32 %51, %27
  %194 = shl i32 %193, 1
  %195 = and i32 %45, %30
  %196 = shl i32 %195, 1
  %197 = and i32 %67, %41
  %198 = or i32 %31, %2
  %199 = and i32 %55, %31
  %200 = xor i32 %176, %42
  %201 = shl i32 %200, 1
  %202 = and i32 %7, %41
  %203 = and i32 %11, %0
  %204 = or i32 %202, %203
  %205 = shl i32 %204, 1
  %206 = add i32 %51, 1
  %207 = or i32 %51, %102
  %208 = and i32 %76, %31
  %209 = or i32 %58, %41
  %210 = shl i32 %209, 1
  %211 = and i32 %29, %54
  %212 = or i32 %79, %21
  %213 = xor i32 %135, %0
  %214 = or i32 %202, %133
  %215 = or i32 %33, %2
  %216 = shl i32 %215, 1
  %217 = and i32 %34, %21
  %218 = and i32 %29, %120
  %219 = xor i32 %133, 2147483647
  %220 = xor i32 %219, %202
  %221 = shl i32 %220, 1
  %222 = xor i32 %102, %2
  %223 = or i32 %12, %41
  %224 = or i32 %11, %102
  %225 = or i32 %91, %41
  %226 = xor i32 %203, -1
  %227 = xor i32 %202, %226
  %228 = or i32 %33, %91
  %229 = and i32 %10, %55
  %230 = and i32 %29, %31
  %231 = or i32 %55, %102
  %232 = and i32 %34, %1
  %233 = or i32 %51, %84
  %234 = shl i32 %233, 1
  %235 = or i32 %43, %84
  %236 = or i32 %37, %0
  %237 = and i32 %43, %54
  %238 = shl i32 %237, 1
  %239 = shl i32 %7, 1
  %240 = or i32 %33, %135
  %241 = xor i32 %99, %24
  %242 = and i32 %12, %0
  %243 = and i32 %12, %120
  %244 = or i32 %30, %29
  %245 = or i32 %65, %1
  %246 = xor i32 %33, %2
  %247 = and i32 %58, %41
  %248 = or i32 %102, %2
  %249 = or i32 %43, %33
  %250 = xor i32 %51, %1
  %251 = and i32 %55, %21
  %252 = and i32 %38, %0
  %253 = xor i32 %38, %0
  %254 = or i32 %11, %48
  %255 = and i32 %38, %41
  %256 = shl i32 %45, 1
  %257 = or i32 %65, %91
  %258 = xor i32 %51, %10
  %259 = shl i32 %258, 1
  %260 = or i32 %33, %79
  %261 = or i32 %12, %84
  %262 = shl i32 %261, 2
  %263 = or i32 %51, %1
  %264 = and i32 %10, %29
  %265 = or i32 %33, %29
  %266 = or i32 %95, %41
  %267 = xor i32 %79, %1
  %268 = or i32 %29, %102
  %269 = and i32 %54, %2
  %270 = xor i32 %65, %1
  %271 = and i32 %30, %2
  %272 = and i32 %30, %55
  %273 = add i32 %45, 1
  %274 = or i32 %51, %37
  %275 = or i32 %29, %84
  %276 = xor i32 %76, %1
  %277 = or i32 %35, %21
  %278 = and i32 %135, %41
  %279 = and i32 %37, %41
  %280 = and i32 %135, %0
  %281 = and i32 %37, %0
  %282 = and i32 %91, %41
  %283 = and i32 %91, %0
  %284 = shl i32 %99, 2
  %285 = xor i32 %3, -1
  %286 = or i32 %5, %4
  %287 = and i32 %286, %285
  %288 = xor i32 %5, -1
  %289 = or i32 %288, %4
  %290 = and i32 %289, %3
  %291 = and i32 %4, %3
  %292 = xor i32 %291, -1
  %293 = xor i32 %4, %3
  %294 = and i32 %293, %288
  %295 = and i32 %288, %4
  %296 = or i32 %288, %3
  %297 = xor i32 %295, %296
  %298 = and i32 %285, %4
  %299 = and i32 %288, %3
  %300 = xor i32 %299, -1
  %301 = xor i32 %298, %300
  %302 = xor i32 %298, -1
  %303 = xor i32 %5, %4
  %304 = xor i32 %303, -1
  %305 = and i32 %304, %302
  %306 = and i32 %303, %302
  %307 = and i32 %285, %5
  %308 = and i32 %307, %4
  %309 = or i32 %285, %5
  %310 = xor i32 %4, -1
  %311 = xor i32 %309, %310
  %312 = xor i32 %311, %308
  %313 = and i32 %303, %3
  %314 = xor i32 %15, -1
  %315 = add i32 %15, 1
  %316 = and i32 %300, %4
  %317 = xor i32 %289, -1
  %318 = or i32 %291, %317
  %319 = or i32 %295, %15
  %320 = xor i32 %5, %3
  %321 = xor i32 %320, -1
  %322 = or i32 %321, %310
  %323 = xor i32 %302, %5
  %324 = xor i32 %292, %5
  %325 = and i32 %286, %293
  %326 = xor i32 %295, %314
  %327 = and i32 %320, %292
  %328 = and i32 %5, %4
  %329 = xor i32 %328, -1
  %330 = xor i32 %296, -1
  %331 = or i32 %291, %330
  %332 = xor i32 %293, -1
  %333 = and i32 %288, %332
  %334 = shl i32 %333, 1
  %335 = or i32 %285, %4
  %336 = xor i32 %335, %5
  %337 = shl i32 %336, 1
  %338 = or i32 %328, %3
  %339 = or i32 %314, %4
  %340 = or i32 %4, %3
  %341 = xor i32 %340, -1
  %342 = or i32 %321, %341
  %343 = or i32 %295, %332
  %344 = or i32 %299, %310
  %345 = and i32 %320, %310
  %346 = or i32 %16, %345
  %347 = or i32 %328, %285
  %348 = or i32 %320, %4
  %349 = or i32 %328, %341
  %350 = shl i32 %349, 1
  %351 = and i32 %335, %304
  %352 = xor i32 %328, %300
  %353 = or i32 %17, %4
  %354 = or i32 %291, %288
  %355 = shl i32 %354, 1
  %356 = or i32 %293, %5
  %357 = or i32 %293, %288
  %358 = shl i32 %357, 2
  %359 = and i32 %304, %3
  %360 = and i32 %321, %4
  %361 = or i32 %304, %285
  %362 = xor i32 %291, %5
  %363 = shl i32 %362, 1
  %364 = and i32 %329, %3
  %365 = xor i32 %286, %3
  %366 = and i32 %314, %4
  %367 = and i32 %304, %285
  %368 = and i32 %307, %310
  %369 = or i32 %368, %360
  %370 = or i32 %295, %330
  %371 = and i32 %288, %292
  %372 = and i32 %335, %321
  %373 = and i32 %303, %292
  %374 = xor i32 %314, %4
  %375 = xor i32 %320, %4
  %376 = xor i32 %16, %375
  %377 = or i32 %330, %4
  %378 = or i32 %15, %310
  %379 = xor i32 %289, %3
  %380 = xor i32 %330, %4
  %381 = and i32 %340, %288
  %382 = shl i32 %381, 1
  %383 = or i32 %288, %341
  %384 = or i32 %288, %332
  %385 = and i32 %303, %285
  %386 = xor i32 %17, -1
  %387 = or i32 %386, %310
  %388 = and i32 %340, %304
  %389 = and i32 %17, %310
  %390 = or i32 %317, %3
  %391 = xor i32 %286, -1
  %392 = or i32 %291, %391
  %393 = or i32 %391, %3
  %394 = or i32 %317, %285
  %395 = xor i32 %348, -1
  %396 = or i32 %308, %395
  %397 = and i32 %300, %310
  %398 = xor i32 %328, %340
  %399 = or i32 %298, %5
  %400 = xor i32 %335, 1073741823
  %401 = or i32 %400, %304
  %402 = xor i32 %18, -1
  %403 = xor i32 %16, %402
  %404 = or i32 %303, %298
  %405 = and i32 %340, %5
  %406 = or i32 %330, %310
  %407 = or i32 %308, %375
  %408 = or i32 %320, %291
  %409 = and i32 %386, %310
  %410 = and i32 %299, %310
  %411 = and i32 %386, %4
  %412 = and i32 %299, %4
  %413 = and i32 %330, %310
  %414 = mul i32 %413, -12
  %415 = and i32 %15, %310
  %416 = mul i32 %415, -20
  %417 = and i32 %330, %4
  %418 = mul i32 %16, -9
  %419 = add i32 %251, %206
  %420 = sub i32 %419, %228
  %421 = sub i32 %420, %109
  %422 = sub i32 %421, %81
  %423 = sub i32 %422, %408
  %424 = add i32 %423, %417
  %425 = mul i32 %424, 5
  %426 = sub i32 %202, %225
  %427 = add i32 %426, %90
  %428 = add i32 %427, %152
  %429 = sub i32 %428, %323
  %430 = sub i32 %429, %324
  %431 = mul i32 %430, 3
  %432 = add i32 %283, %265
  %433 = add i32 %432, %154
  %434 = add i32 %433, %147
  %435 = add i32 %434, %401
  %436 = shl i32 %435, 2
  %437 = sub i32 %412, %281
  %438 = mul i32 %437, 13
  %439 = add i32 %282, %280
  %440 = shl i32 %439, 4
  %441 = add i32 %0, -2
  %442 = add i32 %441, %120
  %443 = add i32 %442, %268
  %444 = add i32 %443, %222
  %445 = add i32 %444, %89
  %446 = add i32 %445, %67
  %447 = add i32 %446, %43
  %448 = add i32 %447, %278
  %449 = add i32 %448, %276
  %450 = add i32 %449, %242
  %451 = add i32 %450, %240
  %452 = add i32 %451, %235
  %453 = add i32 %452, %232
  %454 = add i32 %453, %223
  %455 = add i32 %454, %191
  %456 = add i32 %455, %181
  %457 = add i32 %456, %160
  %458 = add i32 %457, %127
  %459 = add i32 %458, %119
  %460 = add i32 %459, %94
  %461 = add i32 %460, %61
  %462 = add i32 %461, %57
  %463 = add i32 %462, %46
  %464 = add i32 %463, %292
  %465 = add i32 %464, %214
  %466 = add i32 %465, %410
  %467 = add i32 %466, %409
  %468 = add i32 %467, %393
  %469 = add i32 %468, %389
  %470 = add i32 %469, %373
  %471 = add i32 %470, %360
  %472 = add i32 %471, %353
  %473 = add i32 %472, %351
  %474 = add i32 %473, %343
  %475 = add i32 %474, %376
  %476 = add i32 %475, %407
  %477 = add i32 %476, %346
  %478 = shl i32 %477, 1
  %479 = sub i32 %75, %0
  %480 = add i32 %479, %27
  %481 = add i32 %480, %33
  %482 = add i32 %481, 1
  %483 = sub i32 %482, %48
  %484 = sub i32 %483, %2
  %485 = sub i32 %484, %32
  %486 = add i32 %485, %60
  %487 = sub i32 %486, %58
  %488 = add i32 %487, %69
  %489 = sub i32 %488, %85
  %490 = add i32 %489, %98
  %491 = add i32 %490, %106
  %492 = add i32 %491, %117
  %493 = add i32 %492, %121
  %494 = add i32 %493, %126
  %495 = sub i32 %494, %131
  %496 = sub i32 %495, %137
  %497 = sub i32 %496, %148
  %498 = sub i32 %497, %34
  %499 = add i32 %498, %183
  %500 = add i32 %499, %185
  %501 = sub i32 %500, %189
  %502 = add i32 %501, %198
  %503 = add i32 %502, %76
  %504 = sub i32 %503, %211
  %505 = sub i32 %504, %218
  %506 = sub i32 %505, %230
  %507 = add i32 %506, %244
  %508 = add i32 %507, %246
  %509 = add i32 %508, %248
  %510 = sub i32 %509, %11
  %511 = sub i32 %510, %264
  %512 = add i32 %511, %269
  %513 = sub i32 %512, %271
  %514 = add i32 %513, %273
  %515 = add i32 %514, %275
  %516 = sub i32 %515, %28
  %517 = add i32 %516, %36
  %518 = sub i32 %517, %42
  %519 = add i32 %518, %44
  %520 = sub i32 %519, %47
  %521 = add i32 %520, %49
  %522 = sub i32 %521, %50
  %523 = sub i32 %522, %56
  %524 = add i32 %523, %59
  %525 = sub i32 %524, %62
  %526 = add i32 %525, %66
  %527 = add i32 %526, %68
  %528 = sub i32 %527, %70
  %529 = add i32 %528, %71
  %530 = add i32 %529, %77
  %531 = sub i32 %530, %78
  %532 = add i32 %531, %24
  %533 = add i32 %532, %80
  %534 = add i32 %533, %83
  %535 = sub i32 %534, %86
  %536 = sub i32 %535, %87
  %537 = add i32 %536, %88
  %538 = add i32 %537, %92
  %539 = add i32 %538, %93
  %540 = add i32 %539, %96
  %541 = sub i32 %540, %101
  %542 = sub i32 %541, %103
  %543 = add i32 %542, %107
  %544 = sub i32 %543, %108
  %545 = add i32 %544, %110
  %546 = add i32 %545, %111
  %547 = sub i32 %546, %112
  %548 = add i32 %547, %113
  %549 = add i32 %548, %114
  %550 = sub i32 %549, %115
  %551 = sub i32 %550, %116
  %552 = sub i32 %551, %123
  %553 = add i32 %552, %128
  %554 = add i32 %553, %132
  %555 = sub i32 %554, %133
  %556 = add i32 %555, %134
  %557 = sub i32 %556, %136
  %558 = sub i32 %557, %138
  %559 = add i32 %558, %141
  %560 = sub i32 %559, %142
  %561 = sub i32 %560, %143
  %562 = sub i32 %561, %144
  %563 = add i32 %562, %149
  %564 = add i32 %563, %153
  %565 = add i32 %564, %157
  %566 = sub i32 %565, %158
  %567 = sub i32 %566, %159
  %568 = sub i32 %567, %163
  %569 = sub i32 %568, %166
  %570 = add i32 %569, %167
  %571 = add i32 %570, %170
  %572 = add i32 %571, %171
  %573 = add i32 %572, %172
  %574 = add i32 %573, %180
  %575 = sub i32 %574, %182
  %576 = add i32 %575, %184
  %577 = add i32 %576, %186
  %578 = sub i32 %577, %187
  %579 = sub i32 %578, %188
  %580 = sub i32 %579, %190
  %581 = sub i32 %580, %192
  %582 = add i32 %581, %197
  %583 = add i32 %582, %199
  %584 = sub i32 %583, %151
  %585 = sub i32 %584, %207
  %586 = add i32 %585, %208
  %587 = sub i32 %586, %212
  %588 = add i32 %587, %213
  %589 = sub i32 %588, %216
  %590 = sub i32 %589, %217
  %591 = sub i32 %590, %224
  %592 = add i32 %591, %229
  %593 = add i32 %592, %231
  %594 = sub i32 %593, %203
  %595 = add i32 %594, %236
  %596 = sub i32 %595, %239
  %597 = add i32 %596, %243
  %598 = sub i32 %597, %245
  %599 = add i32 %598, %247
  %600 = add i32 %599, %249
  %601 = add i32 %600, %250
  %602 = sub i32 %601, %252
  %603 = sub i32 %602, %253
  %604 = sub i32 %603, %254
  %605 = add i32 %604, %255
  %606 = sub i32 %605, %256
  %607 = sub i32 %606, %257
  %608 = add i32 %607, %260
  %609 = add i32 %608, %263
  %610 = sub i32 %609, %266
  %611 = add i32 %610, %267
  %612 = add i32 %611, %270
  %613 = add i32 %612, %272
  %614 = sub i32 %613, %274
  %615 = add i32 %614, %139
  %616 = sub i32 %615, %277
  %617 = sub i32 %616, %279
  %618 = sub i32 %617, %4
  %619 = sub i32 %618, %26
  %620 = sub i32 %619, %40
  %621 = sub i32 %620, %53
  %622 = sub i32 %621, %64
  %623 = add i32 %622, %74
  %624 = add i32 %623, %97
  %625 = sub i32 %624, %100
  %626 = sub i32 %625, %105
  %627 = sub i32 %626, %118
  %628 = sub i32 %627, %125
  %629 = add i32 %628, %130
  %630 = sub i32 %629, %140
  %631 = sub i32 %630, %146
  %632 = sub i32 %631, %150
  %633 = sub i32 %632, %162
  %634 = add i32 %633, %165
  %635 = sub i32 %634, %169
  %636 = sub i32 %635, %175
  %637 = add i32 %636, %179
  %638 = sub i32 %637, %194
  %639 = sub i32 %638, %196
  %640 = sub i32 %639, %210
  %641 = add i32 %640, %227
  %642 = sub i32 %641, %234
  %643 = sub i32 %642, %238
  %644 = add i32 %643, %241
  %645 = sub i32 %644, %259
  %646 = sub i32 %645, %262
  %647 = sub i32 %646, %284
  %648 = add i32 %647, %341
  %649 = add i32 %648, %293
  %650 = add i32 %649, %302
  %651 = sub i32 %650, %291
  %652 = sub i32 %651, %156
  %653 = sub i32 %652, %201
  %654 = sub i32 %653, %205
  %655 = sub i32 %654, %294
  %656 = add i32 %655, %315
  %657 = add i32 %656, %329
  %658 = sub i32 %657, %286
  %659 = add i32 %658, %356
  %660 = add i32 %659, %320
  %661 = sub i32 %660, %371
  %662 = sub i32 %661, %383
  %663 = sub i32 %662, %384
  %664 = add i32 %663, %399
  %665 = add i32 %664, %405
  %666 = add i32 %665, %440
  %667 = sub i32 %666, %221
  %668 = add i32 %667, %287
  %669 = sub i32 %668, %290
  %670 = add i32 %669, %297
  %671 = add i32 %670, %301
  %672 = sub i32 %671, %305
  %673 = add i32 %672, %306
  %674 = add i32 %673, %313
  %675 = add i32 %674, %316
  %676 = add i32 %675, %318
  %677 = add i32 %676, %319
  %678 = add i32 %677, %322
  %679 = sub i32 %678, %325
  %680 = sub i32 %679, %326
  %681 = sub i32 %680, %327
  %682 = sub i32 %681, %331
  %683 = sub i32 %682, %334
  %684 = sub i32 %683, %337
  %685 = sub i32 %684, %338
  %686 = add i32 %685, %339
  %687 = add i32 %686, %342
  %688 = add i32 %687, %344
  %689 = sub i32 %688, %347
  %690 = sub i32 %689, %348
  %691 = add i32 %690, %352
  %692 = sub i32 %691, %355
  %693 = sub i32 %692, %358
  %694 = sub i32 %693, %359
  %695 = sub i32 %694, %361
  %696 = sub i32 %695, %363
  %697 = add i32 %696, %364
  %698 = add i32 %697, %365
  %699 = add i32 %698, %366
  %700 = sub i32 %699, %367
  %701 = sub i32 %700, %18
  %702 = sub i32 %701, %370
  %703 = add i32 %702, %372
  %704 = sub i32 %703, %374
  %705 = add i32 %704, %377
  %706 = sub i32 %705, %378
  %707 = add i32 %706, %379
  %708 = add i32 %707, %380
  %709 = sub i32 %708, %382
  %710 = sub i32 %709, %385
  %711 = add i32 %710, %387
  %712 = add i32 %711, %388
  %713 = add i32 %712, %390
  %714 = add i32 %713, %392
  %715 = sub i32 %714, %394
  %716 = add i32 %715, %397
  %717 = sub i32 %716, %398
  %718 = sub i32 %717, %404
  %719 = add i32 %718, %406
  %720 = sub i32 %719, %411
  %721 = sub i32 %720, %312
  %722 = sub i32 %721, %350
  %723 = sub i32 %722, %369
  %724 = sub i32 %723, %396
  %725 = add i32 %724, %403
  %726 = add i32 %725, %414
  %727 = add i32 %726, %416
  %728 = add i32 %727, %418
  %729 = add i32 %728, %438
  %730 = add i32 %729, %431
  %731 = add i32 %730, %436
  %732 = add i32 %731, %425
  %733 = add i32 %732, %478
  %734 = icmp eq i32 %20, %733
  %735 = select i1 %734, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %736 = tail call i32 @puts(i8* nonnull dereferenceable(1) %735)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
