digraph "DFG for'crackme' function" {
	Node0x1c97450[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1c974c0[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x1c97b90[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0x1c97c30[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1c97ca0[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x1c97d10[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x1c97db0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1c97e20[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1c97e90[shape=record, label="  %11 = shl i32 %7, 1"];
	Node0x1c97f00[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x1c97fa0[shape=record, label="  %13 = shl i32 %0, 2"];
	Node0x1c98010[shape=record, label="  %14 = sub i32 1, %0"];
	Node0x1c98080[shape=record, label="  %15 = add i32 %14, %4"];
	Node0x1c980f0[shape=record, label="  %16 = sub i32 %15, %7"];
	Node0x1c98160[shape=record, label="  %17 = add i32 %16, %5"];
	Node0x1c981d0[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x1c98240[shape=record, label="  %19 = add i32 %18, %12"];
	Node0x1c982b0[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x1c98320[shape=record, label="  %21 = icmp eq i32 %3, %20"];
	Node0x1c38268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c987c0[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x1c98810[shape=record, label="  ret void"];
	Node0x1c97450 -> Node0x1c974c0;
	Node0x1c974c0 -> Node0x1c97b90;
	Node0x1c97b90 -> Node0x1c97c30;
	Node0x1c97c30 -> Node0x1c97ca0;
	Node0x1c97ca0 -> Node0x1c97d10;
	Node0x1c97d10 -> Node0x1c97db0;
	Node0x1c97db0 -> Node0x1c97e20;
	Node0x1c97e20 -> Node0x1c97e90;
	Node0x1c97e90 -> Node0x1c97f00;
	Node0x1c97f00 -> Node0x1c97fa0;
	Node0x1c97fa0 -> Node0x1c98010;
	Node0x1c98010 -> Node0x1c98080;
	Node0x1c98080 -> Node0x1c980f0;
	Node0x1c980f0 -> Node0x1c98160;
	Node0x1c98160 -> Node0x1c981d0;
	Node0x1c981d0 -> Node0x1c98240;
	Node0x1c98240 -> Node0x1c982b0;
	Node0x1c982b0 -> Node0x1c98320;
	Node0x1c98320 -> Node0x1c38268;
	Node0x1c38268 -> Node0x1c987c0;
	Node0x1c987c0 -> Node0x1c98810;
edge [color=red]
	Node0x1c974c0 -> Node0x1c97b90;
	Node0x1c97c30 -> Node0x1c97ca0;
	Node0x1c97d10 -> Node0x1c97db0;
	Node0x1c97db0 -> Node0x1c97e20;
	Node0x1c97ca0 -> Node0x1c97e90;
	Node0x1c97e90 -> Node0x1c97f00;
	Node0x1c98010 -> Node0x1c98080;
	Node0x1c974c0 -> Node0x1c98080;
	Node0x1c98080 -> Node0x1c980f0;
	Node0x1c97ca0 -> Node0x1c980f0;
	Node0x1c980f0 -> Node0x1c98160;
	Node0x1c97b90 -> Node0x1c98160;
	Node0x1c98160 -> Node0x1c981d0;
	Node0x1c97e20 -> Node0x1c981d0;
	Node0x1c981d0 -> Node0x1c98240;
	Node0x1c97f00 -> Node0x1c98240;
	Node0x1c98240 -> Node0x1c982b0;
	Node0x1c97fa0 -> Node0x1c982b0;
	Node0x1c97450 -> Node0x1c98320;
	Node0x1c982b0 -> Node0x1c98320;
	Node0x1c98320 -> Node0x1c38268;
	Node0x1c38268 -> Node0x1c987c0;
}
