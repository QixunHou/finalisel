digraph "DFG for'crackme' function" {
	Node0xba5520[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xba5bd0[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0xba5c90[shape=record, label="  %5 = xor i32 %4, -2"];
	Node0xba5d00[shape=record, label="  %6 = sub i32 1, %5"];
	Node0xba5da0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0xba5e40[shape=record, label="  %8 = xor i32 %0, 2147483647"];
	Node0xba5eb0[shape=record, label="  %9 = or i32 %8, %1"];
	Node0xba5f20[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0xba5f90[shape=record, label="  %11 = shl i32 %0, 1"];
	Node0xba6000[shape=record, label="  %12 = or i32 %1, %0"];
	Node0xba6070[shape=record, label="  %13 = or i32 %7, %0"];
	Node0xba60e0[shape=record, label="  %14 = shl i32 %12, 1"];
	Node0xba6150[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xba61f0[shape=record, label="  %16 = shl i32 %13, 2"];
	Node0xba6290[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0xba6300[shape=record, label="  %18 = add i32 %0, 2"];
	Node0xba6370[shape=record, label="  %19 = sub i32 %18, %11"];
	Node0xba63e0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0xba6450[shape=record, label="  %21 = sub i32 %20, %13"];
	Node0xba64c0[shape=record, label="  %22 = add i32 %21, %10"];
	Node0xba6530[shape=record, label="  %23 = sub i32 %22, %15"];
	Node0xba65a0[shape=record, label="  %24 = sub i32 %23, %17"];
	Node0xba6610[shape=record, label="  %25 = icmp eq i32 %6, %24"];
	Node0xb46268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xba6ab0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0xba6b00[shape=record, label="  ret void"];
	Node0xba5520 -> Node0xba5bd0;
	Node0xba5bd0 -> Node0xba5c90;
	Node0xba5c90 -> Node0xba5d00;
	Node0xba5d00 -> Node0xba5da0;
	Node0xba5da0 -> Node0xba5e40;
	Node0xba5e40 -> Node0xba5eb0;
	Node0xba5eb0 -> Node0xba5f20;
	Node0xba5f20 -> Node0xba5f90;
	Node0xba5f90 -> Node0xba6000;
	Node0xba6000 -> Node0xba6070;
	Node0xba6070 -> Node0xba60e0;
	Node0xba60e0 -> Node0xba6150;
	Node0xba6150 -> Node0xba61f0;
	Node0xba61f0 -> Node0xba6290;
	Node0xba6290 -> Node0xba6300;
	Node0xba6300 -> Node0xba6370;
	Node0xba6370 -> Node0xba63e0;
	Node0xba63e0 -> Node0xba6450;
	Node0xba6450 -> Node0xba64c0;
	Node0xba64c0 -> Node0xba6530;
	Node0xba6530 -> Node0xba65a0;
	Node0xba65a0 -> Node0xba6610;
	Node0xba6610 -> Node0xb46268;
	Node0xb46268 -> Node0xba6ab0;
	Node0xba6ab0 -> Node0xba6b00;
edge [color=red]
	Node0xba5520 -> Node0xba5bd0;
	Node0xba5bd0 -> Node0xba5c90;
	Node0xba5c90 -> Node0xba5d00;
	Node0xba5e40 -> Node0xba5eb0;
	Node0xba5eb0 -> Node0xba5f20;
	Node0xba5da0 -> Node0xba6070;
	Node0xba6000 -> Node0xba60e0;
	Node0xba60e0 -> Node0xba6150;
	Node0xba6070 -> Node0xba61f0;
	Node0xba61f0 -> Node0xba6290;
	Node0xba6300 -> Node0xba6370;
	Node0xba5f90 -> Node0xba6370;
	Node0xba6370 -> Node0xba63e0;
	Node0xba6000 -> Node0xba63e0;
	Node0xba63e0 -> Node0xba6450;
	Node0xba6070 -> Node0xba6450;
	Node0xba6450 -> Node0xba64c0;
	Node0xba5f20 -> Node0xba64c0;
	Node0xba64c0 -> Node0xba6530;
	Node0xba6150 -> Node0xba6530;
	Node0xba6530 -> Node0xba65a0;
	Node0xba6290 -> Node0xba65a0;
	Node0xba5d00 -> Node0xba6610;
	Node0xba65a0 -> Node0xba6610;
	Node0xba6610 -> Node0xb46268;
	Node0xb46268 -> Node0xba6ab0;
}
