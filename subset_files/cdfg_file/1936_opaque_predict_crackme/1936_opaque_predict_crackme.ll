; ModuleID = '../.././c_source_file/1936_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1936_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %1, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %2
  %10 = shl i32 %9, 1
  %11 = sub i32 %6, %10
  %12 = xor i32 %3, -1
  %13 = shl i32 %3, 1
  %14 = xor i32 %13, -2
  %15 = xor i32 %4, %3
  %16 = shl i32 %4, 1
  %17 = and i32 %6, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %2, -1
  %20 = and i32 %19, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %21, %1
  %23 = xor i32 %0, -1
  %24 = and i32 %2, %1
  %25 = and i32 %24, %23
  %26 = or i32 %2, %1
  %27 = and i32 %26, %0
  %28 = or i32 %25, %27
  %29 = and i32 %24, %0
  %30 = and i32 %26, %23
  %31 = or i32 %29, %30
  %32 = xor i32 %26, -1
  %33 = add i32 %26, 1
  %34 = and i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %1, %0
  %37 = and i32 %36, %35
  %38 = and i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %1, -1
  %41 = and i32 %40, %0
  %42 = xor i32 %41, %2
  %43 = shl i32 %42, 1
  %44 = or i32 %19, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %40
  %47 = or i32 %2, %0
  %48 = xor i32 %36, -1
  %49 = and i32 %47, %48
  %50 = shl i32 %49, 2
  %51 = xor i32 %47, -1
  %52 = or i32 %51, %48
  %53 = shl i32 %52, 1
  %54 = xor i32 %2, %0
  %55 = or i32 %54, %48
  %56 = shl i32 %55, 1
  %57 = and i32 %19, %48
  %58 = xor i32 %45, %1
  %59 = xor i32 %26, %38
  %60 = or i32 %40, %0
  %61 = xor i32 %60, %2
  %62 = xor i32 %54, -1
  %63 = or i32 %41, %62
  %64 = and i32 %40, %2
  %65 = and i32 %64, %23
  %66 = or i32 %40, %2
  %67 = and i32 %66, %0
  %68 = xor i32 %67, -1
  %69 = xor i32 %65, %68
  %70 = and i32 %19, %1
  %71 = xor i32 %70, -1
  %72 = or i32 %71, %0
  %73 = xor i32 %2, %1
  %74 = and i32 %73, %0
  %75 = and i32 %35, %40
  %76 = xor i32 %30, -1
  %77 = xor i32 %29, %76
  %78 = xor i32 %26, %0
  %79 = or i32 %29, %78
  %80 = or i32 %36, %2
  %81 = and i32 %54, %60
  %82 = or i32 %73, %23
  %83 = xor i32 %82, -1
  %84 = or i32 %65, %83
  %85 = xor i32 %24, -1
  %86 = or i32 %85, %0
  %87 = or i32 %32, %0
  %88 = or i32 %20, %48
  %89 = xor i32 %41, -1
  %90 = and i32 %54, %89
  %91 = or i32 %73, %38
  %92 = or i32 %20, %24
  %93 = shl i32 %92, 2
  %94 = xor i32 %73, -1
  %95 = xor i32 %94, %0
  %96 = shl i32 %95, 1
  %97 = xor i32 %21, %1
  %98 = xor i32 %34, %71
  %99 = and i32 %64, %0
  %100 = xor i32 %66, %0
  %101 = or i32 %99, %100
  %102 = shl i32 %101, 1
  %103 = and i32 %36, %2
  %104 = or i32 %65, %67
  %105 = and i32 %7, %62
  %106 = or i32 %19, %1
  %107 = or i32 %106, %23
  %108 = or i32 %19, %8
  %109 = shl i32 %0, 1
  %110 = xor i32 %32, %0
  %111 = or i32 %85, %23
  %112 = xor i32 %38, %2
  %113 = xor i32 %106, -1
  %114 = or i32 %20, %113
  %115 = shl i32 %114, 1
  %116 = xor i32 %34, %1
  %117 = xor i32 %34, %60
  %118 = and i32 %85, %0
  %119 = add i32 %34, 1
  %120 = and i32 %47, %40
  %121 = and i32 %44, %36
  %122 = and i32 %73, %39
  %123 = and i32 %44, %40
  %124 = xor i32 %44, %38
  %125 = or i32 %19, %48
  %126 = xor i32 %60, -1
  %127 = or i32 %94, %126
  %128 = and i32 %36, %62
  %129 = or i32 %38, %2
  %130 = xor i32 %74, -1
  %131 = xor i32 %25, %130
  %132 = and i32 %35, %48
  %133 = and i32 %21, %48
  %134 = or i32 %41, %19
  %135 = or i32 %51, %1
  %136 = shl i32 %135, 1
  %137 = xor i32 %78, 2147483647
  %138 = xor i32 %137, %29
  %139 = shl i32 %113, 2
  %140 = or i32 %62, %48
  %141 = and i32 %62, %1
  %142 = or i32 %71, %23
  %143 = or i32 %73, %0
  %144 = xor i32 %143, -1
  %145 = or i32 %99, %144
  %146 = and i32 %62, %39
  %147 = or i32 %36, %62
  %148 = or i32 %45, %1
  %149 = and i32 %54, %48
  %150 = and i32 %47, %36
  %151 = xor i32 %99, -1
  %152 = xor i32 %100, %151
  %153 = and i32 %60, %94
  %154 = or i32 %73, %126
  %155 = xor i32 %113, %0
  %156 = shl i32 %155, 2
  %157 = or i32 %20, %36
  %158 = xor i32 %35, %1
  %159 = xor i32 %73, %0
  %160 = xor i32 %159, %151
  %161 = or i32 %38, %94
  %162 = and i32 %89, %2
  %163 = add i32 %7, 1
  %164 = and i32 %60, %19
  %165 = or i32 %34, %8
  %166 = add i32 %2, 1
  %167 = or i32 %38, %45
  %168 = or i32 %34, %1
  %169 = shl i32 %168, 1
  %170 = xor i32 %24, %0
  %171 = xor i32 %44, %1
  %172 = or i32 %62, %1
  %173 = or i32 %51, %40
  %174 = or i32 %54, %40
  %175 = or i32 %41, %2
  %176 = or i32 %54, %8
  %177 = or i32 %70, %23
  %178 = or i32 %20, %40
  %179 = and i32 %19, %39
  %180 = or i32 %73, %41
  %181 = or i32 %62, %126
  %182 = shl i32 %181, 1
  %183 = and i32 %106, %23
  %184 = and i32 %73, %7
  %185 = add i32 %20, 1
  %186 = xor i32 %41, %71
  %187 = or i32 %54, %41
  %188 = xor i32 %99, %143
  %189 = and i32 %36, %19
  %190 = or i32 %38, %51
  %191 = and i32 %66, %23
  %192 = or i32 %99, %191
  %193 = xor i32 %65, %82
  %194 = and i32 %48, %2
  %195 = or i32 %26, %0
  %196 = or i32 %36, %51
  %197 = xor i32 %29, %159
  %198 = add i32 %70, 1
  %199 = xor i32 %70, %0
  %200 = and i32 %19, %89
  %201 = and i32 %32, %23
  %202 = and i32 %70, %23
  %203 = and i32 %32, %0
  %204 = and i32 %70, %0
  %205 = shl i32 %204, 1
  %206 = and i32 %113, %23
  %207 = mul i32 %25, -9
  %208 = and i32 %113, %0
  %209 = mul i32 %208, -15
  %210 = mul i32 %29, 14
  %211 = add i32 %206, %185
  %212 = add i32 %211, %104
  %213 = mul i32 %212, 3
  %214 = add i32 %98, %103
  %215 = add i32 %214, %184
  %216 = mul i32 %215, 5
  %217 = sub i32 %201, %203
  %218 = mul i32 %217, 10
  %219 = add i32 %134, -1
  %220 = add i32 %219, %129
  %221 = add i32 %220, %196
  %222 = add i32 %221, %187
  %223 = add i32 %222, %132
  %224 = add i32 %223, %118
  %225 = add i32 %224, %81
  %226 = add i32 %225, %74
  %227 = add i32 %226, %22
  %228 = add i32 %227, %138
  %229 = shl i32 %228, 1
  %230 = sub i32 %39, %109
  %231 = add i32 %230, %7
  %232 = add i32 %231, %36
  %233 = add i32 %232, %163
  %234 = add i32 %233, %166
  %235 = add i32 %234, %89
  %236 = add i32 %235, %12
  %237 = add i32 %236, %33
  %238 = add i32 %237, %34
  %239 = sub i32 %238, %57
  %240 = sub i32 %239, %61
  %241 = add i32 %240, %54
  %242 = add i32 %241, %80
  %243 = sub i32 %242, %70
  %244 = sub i32 %243, %108
  %245 = add i32 %244, %112
  %246 = add i32 %245, %119
  %247 = sub i32 %246, %125
  %248 = add i32 %247, %45
  %249 = sub i32 %248, %162
  %250 = add i32 %249, %164
  %251 = sub i32 %250, %175
  %252 = add i32 %251, %179
  %253 = sub i32 %252, %189
  %254 = add i32 %253, %194
  %255 = add i32 %254, %198
  %256 = sub i32 %255, %200
  %257 = add i32 %256, %37
  %258 = sub i32 %257, %43
  %259 = add i32 %258, %46
  %260 = sub i32 %259, %58
  %261 = add i32 %260, %59
  %262 = add i32 %261, %63
  %263 = add i32 %262, %72
  %264 = add i32 %263, %75
  %265 = add i32 %264, %86
  %266 = sub i32 %265, %87
  %267 = add i32 %266, %88
  %268 = add i32 %267, %90
  %269 = sub i32 %268, %91
  %270 = add i32 %269, %97
  %271 = add i32 %270, %105
  %272 = add i32 %271, %107
  %273 = sub i32 %272, %110
  %274 = sub i32 %273, %111
  %275 = sub i32 %274, %116
  %276 = add i32 %275, %117
  %277 = add i32 %276, %120
  %278 = sub i32 %277, %121
  %279 = sub i32 %278, %122
  %280 = sub i32 %279, %123
  %281 = sub i32 %280, %124
  %282 = sub i32 %281, %127
  %283 = add i32 %282, %128
  %284 = add i32 %283, %133
  %285 = sub i32 %284, %139
  %286 = sub i32 %285, %140
  %287 = add i32 %286, %141
  %288 = sub i32 %287, %142
  %289 = add i32 %288, %146
  %290 = sub i32 %289, %147
  %291 = add i32 %290, %148
  %292 = add i32 %291, %149
  %293 = add i32 %292, %150
  %294 = sub i32 %293, %153
  %295 = add i32 %294, %154
  %296 = sub i32 %295, %157
  %297 = sub i32 %296, %158
  %298 = sub i32 %297, %161
  %299 = sub i32 %298, %165
  %300 = sub i32 %299, %167
  %301 = sub i32 %300, %170
  %302 = sub i32 %301, %171
  %303 = add i32 %302, %172
  %304 = sub i32 %303, %173
  %305 = sub i32 %304, %174
  %306 = add i32 %305, %176
  %307 = add i32 %306, %177
  %308 = add i32 %307, %178
  %309 = add i32 %308, %180
  %310 = add i32 %309, %183
  %311 = sub i32 %310, %186
  %312 = sub i32 %311, %190
  %313 = add i32 %312, %195
  %314 = add i32 %313, %199
  %315 = sub i32 %314, %202
  %316 = sub i32 %315, %14
  %317 = add i32 %316, %15
  %318 = sub i32 %317, %16
  %319 = add i32 %318, %18
  %320 = sub i32 %319, %17
  %321 = add i32 %320, %28
  %322 = sub i32 %321, %31
  %323 = sub i32 %322, %50
  %324 = sub i32 %323, %53
  %325 = sub i32 %324, %56
  %326 = sub i32 %325, %69
  %327 = add i32 %326, %77
  %328 = sub i32 %327, %79
  %329 = sub i32 %328, %84
  %330 = add i32 %329, %93
  %331 = sub i32 %330, %96
  %332 = sub i32 %331, %115
  %333 = sub i32 %332, %131
  %334 = sub i32 %333, %136
  %335 = add i32 %334, %145
  %336 = add i32 %335, %152
  %337 = sub i32 %336, %156
  %338 = sub i32 %337, %160
  %339 = sub i32 %338, %169
  %340 = sub i32 %339, %182
  %341 = add i32 %340, %188
  %342 = sub i32 %341, %192
  %343 = sub i32 %342, %193
  %344 = add i32 %343, %197
  %345 = sub i32 %344, %205
  %346 = add i32 %345, %207
  %347 = add i32 %346, %209
  %348 = add i32 %347, %210
  %349 = sub i32 %348, %102
  %350 = add i32 %349, %218
  %351 = add i32 %350, %216
  %352 = add i32 %351, %213
  %353 = add i32 %352, %229
  %354 = icmp eq i32 %11, %353
  %355 = select i1 %354, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %356 = tail call i32 @puts(i8* nonnull dereferenceable(1) %355)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
