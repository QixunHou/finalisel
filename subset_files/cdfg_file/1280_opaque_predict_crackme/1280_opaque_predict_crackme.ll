; ModuleID = '../.././c_source_file/1280_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1280_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %2, -1
  %7 = or i32 %6, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %8, %1
  %10 = shl i32 %9, 2
  %11 = sub nuw nsw i32 -2, %10
  %12 = and i32 %4, %3
  %13 = xor i32 %12, -1
  %14 = xor i32 %4, -1
  %15 = xor i32 %3, -1
  %16 = or i32 %15, %4
  %17 = xor i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %18, -2
  %20 = or i32 %4, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %20, -1
  %23 = mul i32 %22, -6
  %24 = and i32 %2, %1
  %25 = and i32 %24, %0
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, %0
  %28 = xor i32 %25, %27
  %29 = xor i32 %0, -1
  %30 = xor i32 %1, -1
  %31 = and i32 %30, %2
  %32 = and i32 %31, %29
  %33 = or i32 %26, %29
  %34 = xor i32 %32, %33
  %35 = and i32 %6, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %1, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %36, %38
  %40 = or i32 %1, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %26, -1
  %43 = or i32 %42, %41
  %44 = or i32 %37, %2
  %45 = and i32 %31, %0
  %46 = or i32 %45, %27
  %47 = and i32 %2, %0
  %48 = xor i32 %2, %0
  %49 = or i32 %48, %30
  %50 = shl i32 %49, 1
  %51 = and i32 %1, %0
  %52 = or i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = or i32 %51, %53
  %55 = and i32 %6, %1
  %56 = and i32 %30, %0
  %57 = or i32 %56, %6
  %58 = or i32 %2, %1
  %59 = and i32 %58, %29
  %60 = xor i32 %25, -1
  %61 = xor i32 %59, %60
  %62 = xor i32 %27, -1
  %63 = xor i32 %45, %62
  %64 = or i32 %48, %37
  %65 = xor i32 %48, -1
  %66 = or i32 %65, %38
  %67 = and i32 %52, %30
  %68 = or i32 %26, %41
  %69 = xor i32 %47, -1
  %70 = and i32 %69, %1
  %71 = shl i32 %0, 1
  %72 = or i32 %24, %29
  %73 = or i32 %51, %2
  %74 = or i32 %48, %38
  %75 = shl i32 %74, 1
  %76 = and i32 %26, %0
  %77 = or i32 %51, %8
  %78 = or i32 %6, %1
  %79 = xor i32 %35, %78
  %80 = or i32 %55, %56
  %81 = or i32 %35, %24
  %82 = or i32 %48, %1
  %83 = xor i32 %58, %51
  %84 = or i32 %78, %29
  %85 = xor i32 %58, -1
  %86 = or i32 %85, %0
  %87 = or i32 %38, %2
  %88 = add i32 %1, 1
  %89 = or i32 %51, %65
  %90 = shl i32 %89, 1
  %91 = or i32 %58, %0
  %92 = or i32 %30, %0
  %93 = and i32 %92, %42
  %94 = xor i32 %56, -1
  %95 = and i32 %42, %94
  %96 = xor i32 %58, %0
  %97 = or i32 %30, %2
  %98 = xor i32 %97, %0
  %99 = or i32 %45, %98
  %100 = xor i32 %41, %2
  %101 = and i32 %52, %37
  %102 = shl i32 %101, 2
  %103 = or i32 %6, %41
  %104 = or i32 %41, %2
  %105 = xor i32 %78, -1
  %106 = or i32 %51, %105
  %107 = xor i32 %55, -1
  %108 = xor i32 %47, %107
  %109 = add i32 %2, 1
  %110 = or i32 %65, %41
  %111 = or i32 %85, %29
  %112 = or i32 %24, %56
  %113 = and i32 %26, %92
  %114 = shl i32 %113, 1
  %115 = and i32 %48, %92
  %116 = and i32 %40, %65
  %117 = xor i32 %92, -1
  %118 = or i32 %26, %117
  %119 = or i32 %55, %29
  %120 = or i32 %51, %42
  %121 = and i32 %40, %42
  %122 = and i32 %26, %29
  %123 = and i32 %40, %6
  %124 = or i32 %53, %38
  %125 = and i32 %26, %94
  %126 = or i32 %8, %30
  %127 = and i32 %107, %0
  %128 = shl i32 %127, 1
  %129 = or i32 %65, %1
  %130 = shl i32 %129, 1
  %131 = xor i32 %24, -1
  %132 = xor i32 %131, %0
  %133 = xor i32 %8, %1
  %134 = and i32 %6, %94
  %135 = shl i32 %134, 2
  %136 = xor i32 %85, %0
  %137 = or i32 %47, %55
  %138 = or i32 %35, %1
  %139 = and i32 %78, %0
  %140 = or i32 %8, %38
  %141 = shl i32 %140, 1
  %142 = xor i32 %35, %1
  %143 = and i32 %97, %29
  %144 = xor i32 %45, -1
  %145 = xor i32 %143, %144
  %146 = or i32 %37, %65
  %147 = xor i32 %122, %60
  %148 = or i32 %26, %56
  %149 = and i32 %58, %0
  %150 = xor i32 %96, 2147483647
  %151 = xor i32 %150, %25
  %152 = and i32 %6, %38
  %153 = or i32 %105, %29
  %154 = xor i32 %78, %51
  %155 = shl i32 %154, 1
  %156 = or i32 %51, %6
  %157 = or i32 %47, %1
  %158 = shl i32 %94, 1
  %159 = or i32 %117, %2
  %160 = shl i32 %107, 1
  %161 = xor i32 %107, %0
  %162 = xor i32 %98, %144
  %163 = or i32 %107, %0
  %164 = and i32 %24, %29
  %165 = xor i32 %164, -1
  %166 = xor i32 %76, %165
  %167 = and i32 %37, %6
  %168 = or i32 %26, %51
  %169 = or i32 %51, %85
  %170 = shl i32 %169, 1
  %171 = or i32 %47, %30
  %172 = xor i32 %52, %1
  %173 = xor i32 %42, %0
  %174 = or i32 %47, %117
  %175 = and i32 %97, %0
  %176 = or i32 %32, %175
  %177 = and i32 %26, %40
  %178 = or i32 %47, %41
  %179 = or i32 %24, %0
  %180 = and i32 %92, %6
  %181 = and i32 %78, %29
  %182 = or i32 %6, %38
  %183 = or i32 %48, %41
  %184 = xor i32 %51, -1
  %185 = and i32 %26, %184
  %186 = xor i32 %47, %58
  %187 = and i32 %7, %1
  %188 = or i32 %47, %37
  %189 = and i32 %6, %184
  %190 = or i32 %42, %117
  %191 = or i32 %37, %8
  %192 = or i32 %25, %62
  %193 = shl i32 %192, 1
  %194 = or i32 %25, %59
  %195 = xor i32 %40, %2
  %196 = xor i32 %47, %40
  %197 = xor i32 %149, %165
  %198 = or i32 %42, %29
  %199 = and i32 %48, %184
  %200 = or i32 %65, %30
  %201 = xor i32 %33, 2147483647
  %202 = or i32 %201, %32
  %203 = xor i32 %47, %92
  %204 = or i32 %56, %42
  %205 = or i32 %48, %117
  %206 = shl i32 %205, 1
  %207 = and i32 %48, %38
  %208 = and i32 %7, %37
  %209 = shl i32 %208, 1
  %210 = and i32 %36, %1
  %211 = xor i32 %35, %131
  %212 = or i32 %107, %29
  %213 = or i32 %47, %38
  %214 = xor i32 %105, %0
  %215 = or i32 %35, %30
  %216 = and i32 %65, %38
  %217 = and i32 %42, %0
  %218 = or i32 %25, %96
  %219 = and i32 %65, %1
  %220 = or i32 %6, %117
  %221 = and i32 %69, %30
  %222 = and i32 %184, %2
  %223 = xor i32 %56, %107
  %224 = or i32 %35, %38
  %225 = or i32 %26, %0
  %226 = xor i32 %45, %225
  %227 = and i32 %131, %0
  %228 = or i32 %55, %0
  %229 = xor i32 %78, %0
  %230 = and i32 %65, %30
  %231 = and i32 %92, %2
  %232 = or i32 %42, %0
  %233 = shl i32 %38, 1
  %234 = xor i32 %184, %2
  %235 = add i32 %40, 1
  %236 = and i32 %92, %65
  %237 = and i32 %52, %1
  %238 = and i32 %37, %69
  %239 = and i32 %65, %184
  %240 = shl i32 %239, 1
  %241 = and i32 %48, %94
  %242 = and i32 %40, %2
  %243 = shl i32 %242, 1
  %244 = xor i32 %225, -1
  %245 = or i32 %45, %244
  %246 = and i32 %131, %29
  %247 = or i32 %164, %149
  %248 = or i32 %48, %51
  %249 = and i32 %69, %38
  %250 = shl i32 %249, 1
  %251 = or i32 %56, %65
  %252 = and i32 %42, %184
  %253 = xor i32 %117, %2
  %254 = or i32 %105, %0
  %255 = xor i32 %92, %2
  %256 = or i32 %131, %29
  %257 = or i32 %65, %117
  %258 = xor i32 %52, %51
  %259 = shl i32 %258, 1
  %260 = xor i32 %51, %2
  %261 = xor i32 %24, %0
  %262 = xor i32 %175, 2147483647
  %263 = xor i32 %262, %32
  %264 = add i32 %7, 1
  %265 = or i32 %37, %6
  %266 = shl i32 %265, 1
  %267 = and i32 %65, %94
  %268 = or i32 %56, %2
  %269 = or i32 %25, %122
  %270 = and i32 %48, %30
  %271 = and i32 %7, %30
  %272 = and i32 %48, %40
  %273 = xor i32 %56, %131
  %274 = and i32 %38, %2
  %275 = and i32 %37, %2
  %276 = and i32 %37, %65
  %277 = xor i32 %36, %1
  %278 = and i32 %37, %36
  %279 = or i32 %164, %76
  %280 = xor i32 %7, %1
  %281 = and i32 %94, %2
  %282 = or i32 %53, %1
  %283 = xor i32 %55, %0
  %284 = and i32 %52, %38
  %285 = and i32 %42, %29
  %286 = xor i32 %53, %1
  %287 = shl i32 %286, 1
  %288 = xor i32 %56, %2
  %289 = xor i32 %7, %51
  %290 = xor i32 %69, %1
  %291 = or i32 %131, %0
  %292 = or i32 %45, %143
  %293 = and i32 %36, %30
  %294 = shl i32 %293, 1
  %295 = and i32 %107, %29
  %296 = add i32 %47, 1
  %297 = or i32 %78, %0
  %298 = or i32 %47, %85
  %299 = shl i32 %298, 1
  %300 = add i32 %58, 1
  %301 = xor i32 %94, %2
  %302 = or i32 %58, %29
  %303 = and i32 %48, %37
  %304 = add i32 %51, 1
  %305 = and i32 %7, %38
  %306 = or i32 %37, %53
  %307 = and i32 %48, %1
  %308 = or i32 %48, %56
  %309 = and i32 %85, %29
  %310 = and i32 %55, %29
  %311 = mul i32 %310, -14
  %312 = and i32 %85, %0
  %313 = shl i32 %312, 3
  %314 = and i32 %55, %0
  %315 = mul i32 %314, -12
  %316 = and i32 %105, %29
  %317 = shl i32 %164, 1
  %318 = and i32 %105, %0
  %319 = shl i32 %25, 4
  %320 = add i32 %281, %65
  %321 = add i32 %320, %100
  %322 = add i32 %321, %58
  %323 = add i32 %322, %271
  %324 = add i32 %323, %225
  %325 = add i32 %324, %227
  %326 = add i32 %325, %216
  %327 = add i32 %326, %196
  %328 = add i32 %327, %172
  %329 = add i32 %328, %161
  %330 = add i32 %329, %153
  %331 = add i32 %330, %111
  %332 = add i32 %331, %83
  %333 = add i32 %332, %81
  %334 = add i32 %333, %76
  %335 = add i32 %334, %66
  %336 = add i32 %335, %64
  %337 = add i32 %336, %43
  %338 = add i32 %337, %226
  %339 = add i32 %338, %202
  %340 = add i32 %339, %263
  %341 = add i32 %340, %151
  %342 = shl i32 %341, 1
  %343 = add i32 %264, %1
  %344 = add i32 %343, %251
  %345 = add i32 %344, %254
  %346 = add i32 %345, %86
  %347 = add i32 %346, %14
  %348 = mul i32 %347, 3
  %349 = sub i32 %316, %309
  %350 = sub i32 %349, %290
  %351 = sub i32 %350, %46
  %352 = sub i32 %351, %269
  %353 = mul i32 %352, 5
  %354 = add i32 %223, %173
  %355 = shl i32 %354, 2
  %356 = sub i32 -8, %0
  %357 = sub i32 %356, %71
  %358 = add i32 %357, %88
  %359 = add i32 %358, %109
  %360 = add i32 %359, %51
  %361 = add i32 %360, %40
  %362 = sub i32 %361, %2
  %363 = add i32 %362, %235
  %364 = sub i32 %363, %56
  %365 = add i32 %364, %304
  %366 = add i32 %365, %37
  %367 = sub i32 %366, %3
  %368 = sub i32 %367, %44
  %369 = add i32 %368, %47
  %370 = sub i32 %369, %55
  %371 = sub i32 %370, %57
  %372 = add i32 %371, %73
  %373 = sub i32 %372, %87
  %374 = add i32 %373, %42
  %375 = add i32 %374, %103
  %376 = sub i32 %375, %104
  %377 = add i32 %376, %123
  %378 = add i32 %377, %152
  %379 = add i32 %378, %156
  %380 = sub i32 %379, %158
  %381 = add i32 %380, %159
  %382 = sub i32 %381, %167
  %383 = sub i32 %382, %180
  %384 = sub i32 %383, %182
  %385 = sub i32 %384, %189
  %386 = add i32 %385, %195
  %387 = sub i32 %386, %26
  %388 = add i32 %387, %220
  %389 = sub i32 %388, %222
  %390 = sub i32 %389, %231
  %391 = sub i32 %390, %233
  %392 = sub i32 %391, %234
  %393 = sub i32 %392, %48
  %394 = sub i32 %393, %253
  %395 = sub i32 %394, %255
  %396 = add i32 %395, %7
  %397 = sub i32 %396, %260
  %398 = sub i32 %397, %268
  %399 = sub i32 %398, %274
  %400 = sub i32 %399, %275
  %401 = sub i32 %400, %288
  %402 = add i32 %401, %296
  %403 = add i32 %402, %300
  %404 = sub i32 %403, %301
  %405 = add i32 %404, %4
  %406 = add i32 %405, %39
  %407 = add i32 %406, %54
  %408 = add i32 %407, %67
  %409 = sub i32 %408, %68
  %410 = sub i32 %409, %70
  %411 = add i32 %410, %72
  %412 = sub i32 %411, %77
  %413 = add i32 %412, %79
  %414 = sub i32 %413, %80
  %415 = sub i32 %414, %82
  %416 = add i32 %415, %84
  %417 = sub i32 %416, %91
  %418 = add i32 %417, %93
  %419 = add i32 %418, %95
  %420 = sub i32 %419, %96
  %421 = add i32 %420, %27
  %422 = sub i32 %421, %106
  %423 = add i32 %422, %108
  %424 = add i32 %423, %110
  %425 = sub i32 %424, %112
  %426 = add i32 %425, %115
  %427 = sub i32 %426, %116
  %428 = sub i32 %427, %118
  %429 = sub i32 %428, %119
  %430 = sub i32 %429, %120
  %431 = add i32 %430, %121
  %432 = add i32 %431, %122
  %433 = sub i32 %432, %124
  %434 = add i32 %433, %125
  %435 = add i32 %434, %126
  %436 = add i32 %435, %33
  %437 = add i32 %436, %132
  %438 = sub i32 %437, %133
  %439 = sub i32 %438, %135
  %440 = add i32 %439, %136
  %441 = add i32 %440, %137
  %442 = sub i32 %441, %138
  %443 = add i32 %442, %139
  %444 = sub i32 %443, %142
  %445 = sub i32 %444, %146
  %446 = sub i32 %445, %148
  %447 = sub i32 %446, %149
  %448 = add i32 %447, %157
  %449 = sub i32 %448, %160
  %450 = sub i32 %449, %163
  %451 = add i32 %450, %168
  %452 = sub i32 %451, %171
  %453 = add i32 %452, %174
  %454 = add i32 %453, %177
  %455 = add i32 %454, %178
  %456 = sub i32 %455, %179
  %457 = add i32 %456, %181
  %458 = add i32 %457, %183
  %459 = add i32 %458, %185
  %460 = sub i32 %459, %186
  %461 = add i32 %460, %187
  %462 = add i32 %461, %188
  %463 = sub i32 %462, %190
  %464 = sub i32 %463, %191
  %465 = add i32 %464, %198
  %466 = add i32 %465, %199
  %467 = add i32 %466, %200
  %468 = add i32 %467, %203
  %469 = add i32 %468, %204
  %470 = sub i32 %469, %207
  %471 = sub i32 %470, %210
  %472 = add i32 %471, %211
  %473 = add i32 %472, %212
  %474 = add i32 %473, %213
  %475 = add i32 %474, %214
  %476 = sub i32 %475, %215
  %477 = sub i32 %476, %217
  %478 = add i32 %477, %219
  %479 = add i32 %478, %221
  %480 = sub i32 %479, %224
  %481 = add i32 %480, %228
  %482 = add i32 %481, %229
  %483 = sub i32 %482, %230
  %484 = add i32 %483, %232
  %485 = add i32 %484, %236
  %486 = add i32 %485, %237
  %487 = sub i32 %486, %238
  %488 = add i32 %487, %241
  %489 = sub i32 %488, %243
  %490 = sub i32 %489, %246
  %491 = sub i32 %490, %248
  %492 = add i32 %491, %252
  %493 = add i32 %492, %256
  %494 = sub i32 %493, %257
  %495 = sub i32 %494, %59
  %496 = sub i32 %495, %261
  %497 = sub i32 %496, %266
  %498 = sub i32 %497, %267
  %499 = sub i32 %498, %270
  %500 = sub i32 %499, %272
  %501 = add i32 %500, %273
  %502 = sub i32 %501, %276
  %503 = sub i32 %502, %277
  %504 = sub i32 %503, %278
  %505 = add i32 %504, %280
  %506 = sub i32 %505, %282
  %507 = add i32 %506, %283
  %508 = add i32 %507, %284
  %509 = sub i32 %508, %285
  %510 = sub i32 %509, %289
  %511 = add i32 %510, %291
  %512 = sub i32 %511, %295
  %513 = sub i32 %512, %297
  %514 = add i32 %513, %302
  %515 = sub i32 %514, %303
  %516 = add i32 %515, %305
  %517 = add i32 %516, %306
  %518 = sub i32 %517, %307
  %519 = sub i32 %518, %308
  %520 = add i32 %519, %318
  %521 = add i32 %520, %13
  %522 = add i32 %521, %16
  %523 = sub i32 %522, %28
  %524 = add i32 %523, %34
  %525 = sub i32 %524, %50
  %526 = add i32 %525, %61
  %527 = add i32 %526, %63
  %528 = sub i32 %527, %75
  %529 = sub i32 %528, %90
  %530 = sub i32 %529, %99
  %531 = sub i32 %530, %102
  %532 = sub i32 %531, %114
  %533 = sub i32 %532, %128
  %534 = sub i32 %533, %130
  %535 = sub i32 %534, %141
  %536 = add i32 %535, %145
  %537 = sub i32 %536, %147
  %538 = sub i32 %537, %155
  %539 = add i32 %538, %162
  %540 = sub i32 %539, %166
  %541 = sub i32 %540, %170
  %542 = sub i32 %541, %176
  %543 = add i32 %542, %194
  %544 = add i32 %543, %197
  %545 = sub i32 %544, %206
  %546 = sub i32 %545, %209
  %547 = add i32 %546, %218
  %548 = sub i32 %547, %240
  %549 = sub i32 %548, %245
  %550 = add i32 %549, %247
  %551 = sub i32 %550, %250
  %552 = sub i32 %551, %259
  %553 = add i32 %552, %279
  %554 = sub i32 %553, %287
  %555 = sub i32 %554, %292
  %556 = sub i32 %555, %294
  %557 = sub i32 %556, %299
  %558 = add i32 %557, %311
  %559 = add i32 %558, %313
  %560 = add i32 %559, %315
  %561 = sub i32 %560, %317
  %562 = sub i32 %561, %319
  %563 = sub i32 %562, %21
  %564 = add i32 %563, %23
  %565 = sub i32 %564, %193
  %566 = add i32 %565, %355
  %567 = add i32 %566, %19
  %568 = add i32 %567, %348
  %569 = add i32 %568, %353
  %570 = add i32 %569, %342
  %571 = icmp eq i32 %11, %570
  %572 = select i1 %571, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %573 = tail call i32 @puts(i8* nonnull dereferenceable(1) %572)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
