; ModuleID = '../.././c_source_file/0198_path_condition_crackme.c'
source_filename = "../.././c_source_file/0198_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = mul i32 %2, -2
  %8 = and i32 %2, %1
  %9 = and i32 %8, %0
  %10 = or i32 %2, %1
  %11 = xor i32 %10, %0
  %12 = or i32 %9, %11
  %13 = sub i32 %7, %12
  %14 = xor i32 %5, -1
  %15 = and i32 %14, %3
  %16 = xor i32 %15, %4
  %17 = xor i32 %5, %4
  %18 = add i32 %13, %17
  %19 = sub i32 %18, %16
  %20 = xor i32 %0, -1
  %21 = and i32 %8, %20
  %22 = xor i32 %2, %1
  %23 = and i32 %22, %0
  %24 = or i32 %21, %23
  %25 = xor i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = xor i32 %2, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %28, %26
  %30 = xor i32 %1, -1
  %31 = or i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %22, %32
  %34 = and i32 %30, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %35, %2
  %37 = and i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %38, %26
  %40 = xor i32 %2, -1
  %41 = and i32 %40, %0
  %42 = xor i32 %41, %1
  %43 = xor i32 %8, %0
  %44 = and i32 %1, %0
  %45 = or i32 %40, %1
  %46 = xor i32 %45, -1
  %47 = or i32 %44, %46
  %48 = or i32 %1, %0
  %49 = and i32 %48, %2
  %50 = or i32 %40, %0
  %51 = or i32 %45, %20
  %52 = xor i32 %48, -1
  %53 = or i32 %40, %52
  %54 = or i32 %22, %0
  %55 = xor i32 %31, %2
  %56 = and i32 %25, %38
  %57 = and i32 %27, %35
  %58 = shl i32 %57, 1
  %59 = or i32 %27, %34
  %60 = xor i32 %8, -1
  %61 = xor i32 %41, %60
  %62 = xor i32 %50, %44
  %63 = xor i32 %21, -1
  %64 = xor i32 %23, %63
  %65 = xor i32 %34, %60
  %66 = and i32 %40, %35
  %67 = shl i32 %66, 1
  %68 = xor i32 %10, -1
  %69 = or i32 %37, %68
  %70 = xor i32 %22, -1
  %71 = and i32 %70, %0
  %72 = or i32 %28, %30
  %73 = or i32 %44, %2
  %74 = or i32 %2, %0
  %75 = and i32 %74, %30
  %76 = or i32 %70, %32
  %77 = xor i32 %44, -1
  %78 = and i32 %28, %77
  %79 = shl i32 %78, 1
  %80 = or i32 %44, %70
  %81 = shl i32 %80, 1
  %82 = or i32 %34, %70
  %83 = and i32 %74, %1
  %84 = shl i32 %83, 1
  %85 = add i32 %22, 1
  %86 = and i32 %22, %20
  %87 = or i32 %9, %86
  %88 = or i32 %46, %20
  %89 = xor i32 %9, -1
  %90 = xor i32 %86, %89
  %91 = and i32 %38, %1
  %92 = or i32 %28, %26
  %93 = and i32 %27, %25
  %94 = and i32 %28, %35
  %95 = xor i32 %41, -1
  %96 = and i32 %95, %1
  %97 = or i32 %22, %20
  %98 = xor i32 %77, %2
  %99 = or i32 %27, %44
  %100 = and i32 %10, %0
  %101 = or i32 %21, %100
  %102 = shl i32 %101, 1
  %103 = and i32 %27, %31
  %104 = and i32 %40, %1
  %105 = xor i32 %104, -1
  %106 = xor i32 %34, %105
  %107 = xor i32 %45, %0
  %108 = and i32 %95, %26
  %109 = xor i32 %52, %2
  %110 = and i32 %40, %26
  %111 = or i32 %68, %20
  %112 = and i32 %70, %77
  %113 = xor i32 %74, -1
  %114 = xor i32 %113, %1
  %115 = shl i32 %114, 1
  %116 = and i32 %26, %2
  %117 = and i32 %22, %31
  %118 = and i32 %27, %77
  %119 = and i32 %30, %2
  %120 = and i32 %119, %0
  %121 = or i32 %30, %2
  %122 = and i32 %121, %20
  %123 = or i32 %120, %122
  %124 = or i32 %40, %26
  %125 = xor i32 %104, %0
  %126 = xor i32 %50, -1
  %127 = or i32 %25, %126
  %128 = or i32 %45, %0
  %129 = or i32 %10, %0
  %130 = xor i32 %22, %0
  %131 = or i32 %126, %1
  %132 = or i32 %60, %0
  %133 = and i32 %77, %2
  %134 = and i32 %48, %70
  %135 = add i32 %27, 1
  %136 = and i32 %45, %0
  %137 = and i32 %22, %77
  %138 = or i32 %27, %52
  %139 = or i32 %22, %52
  %140 = and i32 %27, %30
  %141 = and i32 %10, %20
  %142 = xor i32 %141, %89
  %143 = or i32 %126, %26
  %144 = or i32 %70, %52
  %145 = or i32 %37, %52
  %146 = and i32 %50, %26
  %147 = or i32 %44, %126
  %148 = or i32 %27, %25
  %149 = xor i32 %68, %0
  %150 = or i32 %34, %28
  %151 = shl i32 %150, 1
  %152 = or i32 %34, %40
  %153 = xor i32 %70, %0
  %154 = and i32 %50, %25
  %155 = xor i32 %121, %0
  %156 = or i32 %120, %155
  %157 = and i32 %105, %0
  %158 = xor i32 %126, %1
  %159 = or i32 %37, %26
  %160 = shl i32 %159, 1
  %161 = xor i32 %74, %1
  %162 = and i32 %25, %2
  %163 = or i32 %10, %20
  %164 = and i32 %119, %20
  %165 = xor i32 %164, %97
  %166 = shl i32 %165, 2
  %167 = xor i32 %38, %1
  %168 = and i32 %50, %30
  %169 = and i32 %28, %30
  %170 = or i32 %37, %25
  %171 = or i32 %9, %141
  %172 = or i32 %8, %20
  %173 = and i32 %121, %0
  %174 = xor i32 %173, -1
  %175 = xor i32 %164, %174
  %176 = or i32 %28, %1
  %177 = or i32 %41, %1
  %178 = xor i32 %48, %2
  %179 = add i32 %50, 1
  %180 = and i32 %60, %0
  %181 = or i32 %25, %40
  %182 = or i32 %27, %26
  %183 = or i32 %8, %34
  %184 = and i32 %27, %26
  %185 = xor i32 %130, -1
  %186 = xor i32 %120, %185
  %187 = or i32 %105, %0
  %188 = xor i32 %44, %2
  %189 = or i32 %60, %20
  %190 = and i32 %28, %1
  %191 = or i32 %40, %32
  %192 = xor i32 %37, %48
  %193 = xor i32 %37, %10
  %194 = and i32 %74, %25
  %195 = shl i32 %194, 1
  %196 = and i32 %22, %35
  %197 = shl i32 %196, 1
  %198 = add i32 %8, 1
  %199 = or i32 %8, %0
  %200 = and i32 %31, %2
  %201 = or i32 %44, %113
  %202 = shl i32 %104, 1
  %203 = xor i32 %100, %63
  %204 = xor i32 %54, 2147483647
  %205 = or i32 %204, %120
  %206 = shl i32 %31, 2
  %207 = or i32 %27, %32
  %208 = xor i32 %50, %1
  %209 = and i32 %22, %48
  %210 = shl i32 %209, 1
  %211 = or i32 %70, %20
  %212 = xor i32 %120, %54
  %213 = and i32 %68, %20
  %214 = shl i32 %213, 3
  %215 = and i32 %104, %20
  %216 = and i32 %68, %0
  %217 = and i32 %104, %0
  %218 = and i32 %46, %20
  %219 = mul i32 %218, -31
  %220 = mul i32 %21, -23
  %221 = and i32 %46, %0
  %222 = mul i32 %9, -12
  %223 = and i32 %5, %4
  %224 = xor i32 %223, -1
  %225 = xor i32 %15, %224
  %226 = xor i32 %3, -1
  %227 = add i32 %3, 1
  %228 = or i32 %226, %4
  %229 = and i32 %228, %14
  %230 = or i32 %5, %4
  %231 = xor i32 %226, %4
  %232 = and i32 %230, %231
  %233 = xor i32 %4, -1
  %234 = and i32 %5, %3
  %235 = or i32 %234, %233
  %236 = shl i32 %235, 1
  %237 = and i32 %226, %4
  %238 = xor i32 %237, -1
  %239 = and i32 %238, %5
  %240 = or i32 %15, %233
  %241 = or i32 %5, %3
  %242 = xor i32 %241, -1
  %243 = or i32 %242, %233
  %244 = xor i32 %5, %3
  %245 = or i32 %244, %237
  %246 = and i32 %231, %224
  %247 = and i32 %4, %3
  %248 = xor i32 %17, -1
  %249 = or i32 %247, %248
  %250 = and i32 %230, %226
  %251 = and i32 %242, %233
  %252 = and i32 %15, %233
  %253 = and i32 %242, %4
  %254 = and i32 %15, %4
  %255 = and i32 %226, %5
  %256 = and i32 %255, %233
  %257 = shl i32 %256, 1
  %258 = and i32 %234, %233
  %259 = and i32 %255, %4
  %260 = and i32 %234, %4
  %261 = sub i32 %116, %97
  %262 = add i32 %261, %246
  %263 = sub i32 %262, %254
  %264 = mul i32 %263, 5
  %265 = add i32 %215, %74
  %266 = add i32 %265, %144
  %267 = add i32 %266, %258
  %268 = mul i32 %267, 3
  %269 = add i32 %221, %216
  %270 = mul i32 %269, -13
  %271 = add i32 %200, -1
  %272 = add i32 %271, %27
  %273 = add i32 %272, %181
  %274 = add i32 %273, %162
  %275 = add i32 %274, %8
  %276 = add i32 %275, %207
  %277 = add i32 %276, %187
  %278 = add i32 %277, %184
  %279 = add i32 %278, %169
  %280 = add i32 %279, %140
  %281 = add i32 %280, %139
  %282 = add i32 %281, %134
  %283 = add i32 %282, %108
  %284 = add i32 %283, %106
  %285 = add i32 %284, %69
  %286 = add i32 %285, %65
  %287 = add i32 %286, %59
  %288 = add i32 %287, %205
  %289 = add i32 %288, %253
  %290 = add i32 %289, %260
  %291 = shl i32 %290, 1
  %292 = add i32 %30, %20
  %293 = sub i32 %292, %1
  %294 = add i32 %293, %32
  %295 = sub i32 %294, %48
  %296 = add i32 %295, %35
  %297 = sub i32 %296, %36
  %298 = sub i32 %297, %49
  %299 = sub i32 %298, %50
  %300 = sub i32 %299, %53
  %301 = sub i32 %300, %55
  %302 = add i32 %301, %73
  %303 = add i32 %302, %38
  %304 = add i32 %303, %85
  %305 = add i32 %304, %98
  %306 = add i32 %305, %109
  %307 = sub i32 %306, %110
  %308 = add i32 %307, %124
  %309 = sub i32 %308, %133
  %310 = add i32 %309, %135
  %311 = add i32 %310, %113
  %312 = add i32 %311, %46
  %313 = sub i32 %312, %152
  %314 = sub i32 %313, %178
  %315 = add i32 %314, %179
  %316 = sub i32 %315, %188
  %317 = sub i32 %316, %191
  %318 = add i32 %317, %198
  %319 = sub i32 %318, %206
  %320 = add i32 %319, %227
  %321 = sub i32 %320, %29
  %322 = add i32 %321, %33
  %323 = sub i32 %322, %39
  %324 = sub i32 %323, %42
  %325 = add i32 %324, %43
  %326 = add i32 %325, %47
  %327 = sub i32 %326, %51
  %328 = sub i32 %327, %54
  %329 = add i32 %328, %56
  %330 = add i32 %329, %61
  %331 = sub i32 %330, %62
  %332 = sub i32 %331, %67
  %333 = add i32 %332, %71
  %334 = add i32 %333, %72
  %335 = sub i32 %334, %75
  %336 = sub i32 %335, %76
  %337 = sub i32 %336, %82
  %338 = sub i32 %337, %88
  %339 = sub i32 %338, %91
  %340 = add i32 %339, %92
  %341 = add i32 %340, %93
  %342 = sub i32 %341, %94
  %343 = sub i32 %342, %96
  %344 = sub i32 %343, %99
  %345 = add i32 %344, %103
  %346 = add i32 %345, %107
  %347 = add i32 %346, %111
  %348 = add i32 %347, %112
  %349 = add i32 %348, %117
  %350 = sub i32 %349, %118
  %351 = sub i32 %350, %125
  %352 = add i32 %351, %127
  %353 = add i32 %352, %128
  %354 = add i32 %353, %129
  %355 = sub i32 %354, %130
  %356 = add i32 %355, %131
  %357 = add i32 %356, %132
  %358 = add i32 %357, %136
  %359 = sub i32 %358, %137
  %360 = add i32 %359, %138
  %361 = add i32 %360, %143
  %362 = add i32 %361, %145
  %363 = sub i32 %362, %146
  %364 = add i32 %363, %147
  %365 = sub i32 %364, %148
  %366 = add i32 %365, %149
  %367 = add i32 %366, %153
  %368 = sub i32 %367, %11
  %369 = add i32 %368, %154
  %370 = sub i32 %369, %157
  %371 = add i32 %370, %158
  %372 = add i32 %371, %161
  %373 = add i32 %372, %163
  %374 = sub i32 %373, %167
  %375 = sub i32 %374, %168
  %376 = sub i32 %375, %170
  %377 = add i32 %376, %172
  %378 = add i32 %377, %176
  %379 = add i32 %378, %177
  %380 = sub i32 %379, %180
  %381 = sub i32 %380, %182
  %382 = sub i32 %381, %183
  %383 = add i32 %382, %189
  %384 = sub i32 %383, %190
  %385 = add i32 %384, %192
  %386 = sub i32 %385, %193
  %387 = add i32 %386, %199
  %388 = sub i32 %387, %201
  %389 = sub i32 %388, %202
  %390 = add i32 %389, %208
  %391 = add i32 %390, %211
  %392 = add i32 %391, %217
  %393 = add i32 %392, %24
  %394 = sub i32 %393, %58
  %395 = sub i32 %394, %64
  %396 = sub i32 %395, %79
  %397 = sub i32 %396, %81
  %398 = sub i32 %397, %84
  %399 = sub i32 %398, %87
  %400 = add i32 %399, %90
  %401 = sub i32 %400, %115
  %402 = add i32 %401, %123
  %403 = sub i32 %402, %142
  %404 = sub i32 %403, %151
  %405 = sub i32 %404, %156
  %406 = sub i32 %405, %160
  %407 = sub i32 %406, %171
  %408 = sub i32 %407, %175
  %409 = sub i32 %408, %186
  %410 = sub i32 %409, %195
  %411 = sub i32 %410, %197
  %412 = add i32 %411, %203
  %413 = sub i32 %412, %210
  %414 = add i32 %413, %212
  %415 = sub i32 %414, %214
  %416 = add i32 %415, %219
  %417 = add i32 %416, %220
  %418 = add i32 %417, %222
  %419 = sub i32 %418, %102
  %420 = add i32 %419, %166
  %421 = sub i32 %420, %229
  %422 = sub i32 %421, %239
  %423 = add i32 %422, %270
  %424 = sub i32 %423, %225
  %425 = add i32 %424, %232
  %426 = add i32 %425, %240
  %427 = add i32 %426, %243
  %428 = add i32 %427, %245
  %429 = sub i32 %428, %249
  %430 = sub i32 %429, %250
  %431 = sub i32 %430, %251
  %432 = sub i32 %431, %252
  %433 = add i32 %432, %259
  %434 = sub i32 %433, %236
  %435 = sub i32 %434, %257
  %436 = add i32 %435, %264
  %437 = add i32 %436, %268
  %438 = add i32 %437, %291
  %439 = icmp eq i32 %19, %438
  %440 = select i1 %439, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %441 = tail call i32 @puts(i8* nonnull dereferenceable(1) %440)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
