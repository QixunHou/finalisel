digraph "DFG for'crackme' function" {
	Node0x1ed44a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1ed4510[shape=record, label="  %4 = add i32 %3, %1"];
	Node0x1ed4be0[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x1ed4c50[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x1ed4cf0[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1ed4d60[shape=record, label="  %8 = shl i32 %3, 1"];
	Node0x1ed4e00[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x1ed4e70[shape=record, label="  %10 = xor i32 %7, -2"];
	Node0x1ed4f10[shape=record, label="  %11 = xor i32 %1, 2147483647"];
	Node0x1ed4fb0[shape=record, label="  %12 = xor i32 %0, 1073741823"];
	Node0x1ed5020[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x1ed50c0[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x1ed5130[shape=record, label="  %15 = and i32 %11, %0"];
	Node0x1ed51a0[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x1ed5210[shape=record, label="  %17 = sub i32 %7, %0"];
	Node0x1ed5280[shape=record, label="  %18 = sub i32 %17, %14"];
	Node0x1ed52f0[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x1ed5360[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x1ed53d0[shape=record, label="  %21 = sub i32 %20, %16"];
	Node0x1ed5440[shape=record, label="  %22 = icmp eq i32 %21, %5"];
	Node0x1e75268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ed58e0[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x1ed5930[shape=record, label="  ret void"];
	Node0x1ed44a0 -> Node0x1ed4510;
	Node0x1ed4510 -> Node0x1ed4be0;
	Node0x1ed4be0 -> Node0x1ed4c50;
	Node0x1ed4c50 -> Node0x1ed4cf0;
	Node0x1ed4cf0 -> Node0x1ed4d60;
	Node0x1ed4d60 -> Node0x1ed4e00;
	Node0x1ed4e00 -> Node0x1ed4e70;
	Node0x1ed4e70 -> Node0x1ed4f10;
	Node0x1ed4f10 -> Node0x1ed4fb0;
	Node0x1ed4fb0 -> Node0x1ed5020;
	Node0x1ed5020 -> Node0x1ed50c0;
	Node0x1ed50c0 -> Node0x1ed5130;
	Node0x1ed5130 -> Node0x1ed51a0;
	Node0x1ed51a0 -> Node0x1ed5210;
	Node0x1ed5210 -> Node0x1ed5280;
	Node0x1ed5280 -> Node0x1ed52f0;
	Node0x1ed52f0 -> Node0x1ed5360;
	Node0x1ed5360 -> Node0x1ed53d0;
	Node0x1ed53d0 -> Node0x1ed5440;
	Node0x1ed5440 -> Node0x1e75268;
	Node0x1e75268 -> Node0x1ed58e0;
	Node0x1ed58e0 -> Node0x1ed5930;
edge [color=red]
	Node0x1ed44a0 -> Node0x1ed4510;
	Node0x1ed4510 -> Node0x1ed4be0;
	Node0x1ed4c50 -> Node0x1ed4cf0;
	Node0x1ed44a0 -> Node0x1ed4d60;
	Node0x1ed4d60 -> Node0x1ed4e00;
	Node0x1ed4cf0 -> Node0x1ed4e70;
	Node0x1ed4fb0 -> Node0x1ed5020;
	Node0x1ed5020 -> Node0x1ed50c0;
	Node0x1ed4f10 -> Node0x1ed5130;
	Node0x1ed5130 -> Node0x1ed51a0;
	Node0x1ed4cf0 -> Node0x1ed5210;
	Node0x1ed5210 -> Node0x1ed5280;
	Node0x1ed50c0 -> Node0x1ed5280;
	Node0x1ed5280 -> Node0x1ed52f0;
	Node0x1ed4e00 -> Node0x1ed52f0;
	Node0x1ed52f0 -> Node0x1ed5360;
	Node0x1ed4e70 -> Node0x1ed5360;
	Node0x1ed5360 -> Node0x1ed53d0;
	Node0x1ed51a0 -> Node0x1ed53d0;
	Node0x1ed53d0 -> Node0x1ed5440;
	Node0x1ed4be0 -> Node0x1ed5440;
	Node0x1ed5440 -> Node0x1e75268;
	Node0x1e75268 -> Node0x1ed58e0;
}
