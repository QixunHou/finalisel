; ModuleID = '../.././c_source_file/1252_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1252_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %6, -1
  %8 = or i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %0
  %11 = xor i32 %0, -1
  %12 = xor i32 %2, -1
  %13 = or i32 %12, %1
  %14 = xor i32 %13, -1
  %15 = or i32 %14, %11
  %16 = add i32 %10, %3
  %17 = sub i32 %15, %16
  %18 = add i32 %17, %7
  %19 = xor i32 %4, -1
  %20 = or i32 %19, %3
  %21 = xor i32 %4, %3
  %22 = or i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = xor i32 %20, -1
  %25 = and i32 %19, %3
  %26 = and i32 %1, %0
  %27 = xor i32 %26, %2
  %28 = xor i32 %1, -1
  %29 = or i32 %12, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %30, %28
  %32 = or i32 %28, %0
  %33 = xor i32 %32, -1
  %34 = or i32 %12, %33
  %35 = or i32 %1, %0
  %36 = and i32 %35, %12
  %37 = and i32 %12, %0
  %38 = or i32 %37, %28
  %39 = and i32 %28, %0
  %40 = xor i32 %39, -1
  %41 = xor i32 %40, %2
  %42 = and i32 %12, %1
  %43 = xor i32 %29, %1
  %44 = and i32 %2, %1
  %45 = xor i32 %44, -1
  %46 = xor i32 %45, %0
  %47 = xor i32 %8, %0
  %48 = or i32 %26, %12
  %49 = or i32 %42, %11
  %50 = or i32 %8, %0
  %51 = and i32 %28, %2
  %52 = and i32 %51, %0
  %53 = or i32 %28, %2
  %54 = xor i32 %53, %0
  %55 = or i32 %52, %54
  %56 = xor i32 %2, %1
  %57 = or i32 %56, %26
  %58 = and i32 %51, %11
  %59 = and i32 %53, %0
  %60 = xor i32 %59, -1
  %61 = xor i32 %58, %60
  %62 = and i32 %53, %11
  %63 = or i32 %52, %62
  %64 = and i32 %2, %0
  %65 = xor i32 %1, %0
  %66 = or i32 %64, %65
  %67 = xor i32 %65, -1
  %68 = or i32 %30, %67
  %69 = xor i32 %2, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %42, %0
  %72 = xor i32 %42, %0
  %73 = or i32 %26, %2
  %74 = or i32 %13, %11
  %75 = or i32 %69, %28
  %76 = and i32 %70, %1
  %77 = or i32 %2, %0
  %78 = and i32 %77, %65
  %79 = and i32 %29, %65
  %80 = xor i32 %77, -1
  %81 = or i32 %80, %1
  %82 = xor i32 %56, -1
  %83 = and i32 %82, %40
  %84 = or i32 %70, %1
  %85 = and i32 %69, %1
  %86 = xor i32 %42, -1
  %87 = xor i32 %86, %0
  %88 = and i32 %40, %2
  %89 = or i32 %44, %11
  %90 = or i32 %65, %70
  %91 = xor i32 %26, -1
  %92 = and i32 %56, %91
  %93 = and i32 %69, %65
  %94 = xor i32 %35, -1
  %95 = xor i32 %94, %2
  %96 = or i32 %65, %30
  %97 = xor i32 %64, -1
  %98 = or i32 %70, %94
  %99 = or i32 %64, %94
  %100 = xor i32 %37, %13
  %101 = or i32 %56, %11
  %102 = xor i32 %101, 2147483647
  %103 = or i32 %102, %58
  %104 = and i32 %77, %1
  %105 = and i32 %8, %11
  %106 = and i32 %32, %82
  %107 = or i32 %9, %11
  %108 = xor i32 %37, -1
  %109 = add i32 %37, 1
  %110 = or i32 %69, %39
  %111 = or i32 %44, %39
  %112 = or i32 %45, %0
  %113 = and i32 %69, %28
  %114 = and i32 %44, %0
  %115 = or i32 %114, %105
  %116 = or i32 %56, %0
  %117 = and i32 %56, %32
  %118 = xor i32 %29, %26
  %119 = or i32 %12, %67
  %120 = and i32 %32, %70
  %121 = or i32 %39, %70
  %122 = or i32 %82, %11
  %123 = or i32 %39, %82
  %124 = xor i32 %64, %1
  %125 = or i32 %8, %11
  %126 = xor i32 %56, %0
  %127 = xor i32 %114, %126
  %128 = or i32 %64, %1
  %129 = or i32 %65, %2
  %130 = shl i32 %129, 1
  %131 = or i32 %12, %94
  %132 = xor i32 %13, %0
  %133 = or i32 %56, %39
  %134 = or i32 %69, %67
  %135 = xor i32 %8, %26
  %136 = or i32 %64, %28
  %137 = and i32 %86, %0
  %138 = xor i32 %77, %1
  %139 = and i32 %13, %0
  %140 = or i32 %52, %126
  %141 = shl i32 %37, 1
  %142 = or i32 %44, %0
  %143 = or i32 %14, %0
  %144 = and i32 %45, %11
  %145 = or i32 %56, %94
  %146 = and i32 %56, %40
  %147 = xor i32 %39, %2
  %148 = or i32 %69, %26
  %149 = shl i32 %148, 1
  %150 = and i32 %56, %11
  %151 = or i32 %114, %150
  %152 = or i32 %39, %2
  %153 = or i32 %64, %42
  %154 = shl i32 %153, 1
  %155 = and i32 %69, %67
  %156 = and i32 %29, %67
  %157 = shl i32 %156, 1
  %158 = and i32 %35, %82
  %159 = or i32 %64, %67
  %160 = xor i32 %35, %2
  %161 = or i32 %80, %67
  %162 = or i32 %70, %28
  %163 = or i32 %65, %12
  %164 = xor i32 %30, %1
  %165 = or i32 %69, %94
  %166 = xor i32 %114, -1
  %167 = xor i32 %105, %166
  %168 = xor i32 %37, %45
  %169 = shl i32 %168, 1
  %170 = xor i32 %64, %35
  %171 = and i32 %29, %1
  %172 = add i32 %26, 1
  %173 = and i32 %70, %40
  %174 = xor i32 %39, %86
  %175 = xor i32 %62, -1
  %176 = xor i32 %52, %175
  %177 = and i32 %65, %12
  %178 = or i32 %37, %14
  %179 = or i32 %65, %80
  %180 = or i32 %39, %12
  %181 = add i32 %1, 1
  %182 = or i32 %69, %1
  %183 = shl i32 %182, 1
  %184 = xor i32 %32, %2
  %185 = or i32 %94, %2
  %186 = add i32 %42, 1
  %187 = and i32 %29, %28
  %188 = or i32 %67, %2
  %189 = xor i32 %13, %26
  %190 = or i32 %69, %65
  %191 = xor i32 %54, 2147483647
  %192 = xor i32 %191, %52
  %193 = shl i32 %192, 1
  %194 = or i32 %70, %67
  %195 = or i32 %70, %33
  %196 = shl i32 %1, 1
  %197 = or i32 %26, %30
  %198 = and i32 %12, %67
  %199 = shl i32 %198, 1
  %200 = and i32 %69, %91
  %201 = xor i32 %116, -1
  %202 = or i32 %52, %201
  %203 = xor i32 %91, %2
  %204 = shl i32 %203, 1
  %205 = and i32 %82, %0
  %206 = xor i32 %80, %1
  %207 = and i32 %69, %32
  %208 = and i32 %44, %11
  %209 = and i32 %56, %0
  %210 = or i32 %208, %209
  %211 = or i32 %56, %33
  %212 = shl i32 %211, 1
  %213 = xor i32 %208, -1
  %214 = xor i32 %209, %213
  %215 = xor i32 %82, %0
  %216 = and i32 %12, %40
  %217 = add i32 %32, 1
  %218 = and i32 %77, %67
  %219 = and i32 %35, %70
  %220 = or i32 %37, %44
  %221 = and i32 %69, %35
  %222 = xor i32 %64, %32
  %223 = xor i32 %14, %0
  %224 = and i32 %97, %67
  %225 = xor i32 %47, 2147483647
  %226 = xor i32 %225, %114
  %227 = shl i32 %226, 1
  %228 = xor i32 %97, %1
  %229 = and i32 %82, %11
  %230 = or i32 %26, %9
  %231 = xor i32 %33, %2
  %232 = and i32 %70, %67
  %233 = or i32 %26, %14
  %234 = shl i32 %233, 1
  %235 = and i32 %35, %2
  %236 = xor i32 %9, %0
  %237 = and i32 %91, %2
  %238 = or i32 %30, %1
  %239 = and i32 %86, %11
  %240 = and i32 %108, %1
  %241 = or i32 %86, %0
  %242 = and i32 %8, %0
  %243 = xor i32 %242, %213
  %244 = or i32 %82, %0
  %245 = or i32 %13, %0
  %246 = or i32 %45, %11
  %247 = and i32 %82, %91
  %248 = or i32 %26, %82
  %249 = or i32 %58, %59
  %250 = or i32 %80, %28
  %251 = xor i32 %150, %166
  %252 = xor i32 %37, %1
  %253 = and i32 %32, %12
  %254 = shl i32 %101, 1
  %255 = and i32 %65, %70
  %256 = or i32 %64, %33
  %257 = or i32 %37, %65
  %258 = and i32 %108, %67
  %259 = shl i32 %126, 2
  %260 = and i32 %97, %28
  %261 = xor i32 %58, %101
  %262 = or i32 %82, %94
  %263 = and i32 %70, %91
  %264 = or i32 %64, %9
  %265 = xor i32 %77, %26
  %266 = shl i32 %265, 1
  %267 = or i32 %86, %11
  %268 = xor i32 %126, -1
  %269 = xor i32 %52, %268
  %270 = shl i32 %269, 1
  %271 = or i32 %114, %47
  %272 = xor i32 %52, %116
  %273 = xor i32 %44, %0
  %274 = and i32 %70, %28
  %275 = and i32 %56, %35
  %276 = or i32 %69, %33
  %277 = and i32 %12, %91
  %278 = xor i32 %64, %8
  %279 = and i32 %108, %28
  %280 = or i32 %37, %67
  %281 = or i32 %208, %242
  %282 = or i32 %26, %70
  %283 = xor i32 %64, %86
  %284 = and i32 %97, %1
  %285 = or i32 %114, %268
  %286 = and i32 %32, %2
  %287 = and i32 %65, %2
  %288 = or i32 %82, %33
  %289 = or i32 %33, %2
  %290 = and i32 %77, %28
  %291 = or i32 %42, %39
  %292 = xor i32 %108, %1
  %293 = and i32 %67, %2
  %294 = and i32 %45, %0
  %295 = xor i32 %39, %45
  %296 = and i32 %65, %108
  %297 = or i32 %26, %80
  %298 = add i32 %29, 1
  %299 = and i32 %13, %11
  %300 = and i32 %9, %11
  %301 = mul i32 %300, -28
  %302 = and i32 %42, %11
  %303 = shl i32 %302, 4
  %304 = and i32 %9, %0
  %305 = and i32 %42, %0
  %306 = shl i32 %305, 4
  %307 = and i32 %14, %11
  %308 = mul i32 %208, -23
  %309 = and i32 %14, %0
  %310 = mul i32 %309, -15
  %311 = shl i32 %114, 4
  %312 = add i32 %29, %77
  %313 = add i32 %312, %41
  %314 = add i32 %313, %279
  %315 = add i32 %314, %278
  %316 = add i32 %315, %262
  %317 = add i32 %316, %257
  %318 = add i32 %317, %239
  %319 = add i32 %318, %236
  %320 = add i32 %319, %232
  %321 = add i32 %320, %228
  %322 = add i32 %321, %218
  %323 = add i32 %322, %195
  %324 = add i32 %323, %189
  %325 = add i32 %324, %179
  %326 = add i32 %325, %174
  %327 = add i32 %326, %170
  %328 = add i32 %327, %162
  %329 = add i32 %328, %139
  %330 = add i32 %329, %132
  %331 = add i32 %330, %125
  %332 = add i32 %331, %120
  %333 = add i32 %332, %118
  %334 = add i32 %333, %78
  %335 = add i32 %334, %68
  %336 = add i32 %335, %50
  %337 = add i32 %336, %47
  %338 = add i32 %337, %55
  %339 = add i32 %338, %103
  %340 = shl i32 %339, 1
  %341 = add i32 %35, %40
  %342 = add i32 %341, %160
  %343 = add i32 %342, %273
  %344 = sub i32 %343, %245
  %345 = sub i32 %344, %165
  %346 = sub i32 %345, %140
  %347 = mul i32 %346, 5
  %348 = sub i32 %35, %8
  %349 = add i32 %348, %295
  %350 = add i32 %349, %49
  %351 = add i32 %350, %46
  %352 = add i32 %351, %24
  %353 = mul i32 %352, 3
  %354 = add i32 %307, %304
  %355 = mul i32 %354, -6
  %356 = shl i32 %0, 1
  %357 = add i32 %356, %181
  %358 = sub i32 %357, %32
  %359 = add i32 %358, %39
  %360 = add i32 %359, %172
  %361 = sub i32 %360, %196
  %362 = add i32 %361, %217
  %363 = add i32 %362, %2
  %364 = add i32 %363, 2
  %365 = add i32 %364, %2
  %366 = sub i32 %365, %26
  %367 = sub i32 %366, %27
  %368 = sub i32 %367, %34
  %369 = sub i32 %368, %36
  %370 = add i32 %369, %8
  %371 = sub i32 %370, %42
  %372 = add i32 %371, %48
  %373 = sub i32 %372, %73
  %374 = add i32 %373, %88
  %375 = sub i32 %374, %95
  %376 = sub i32 %375, %44
  %377 = sub i32 %376, %13
  %378 = add i32 %377, %109
  %379 = add i32 %378, %14
  %380 = sub i32 %379, %119
  %381 = add i32 %380, %131
  %382 = add i32 %381, %82
  %383 = sub i32 %382, %147
  %384 = add i32 %383, %152
  %385 = add i32 %384, %45
  %386 = add i32 %385, %163
  %387 = sub i32 %386, %177
  %388 = sub i32 %387, %56
  %389 = add i32 %388, %180
  %390 = sub i32 %389, %184
  %391 = sub i32 %390, %185
  %392 = add i32 %391, %186
  %393 = sub i32 %392, %188
  %394 = add i32 %393, %216
  %395 = add i32 %394, %231
  %396 = add i32 %395, %235
  %397 = sub i32 %396, %237
  %398 = sub i32 %397, %253
  %399 = sub i32 %398, %277
  %400 = sub i32 %399, %286
  %401 = sub i32 %400, %287
  %402 = add i32 %401, %289
  %403 = add i32 %402, %293
  %404 = add i32 %403, %298
  %405 = add i32 %404, 1
  %406 = sub i32 %405, %31
  %407 = sub i32 %406, %38
  %408 = add i32 %407, %43
  %409 = sub i32 %408, %57
  %410 = add i32 %409, %66
  %411 = sub i32 %410, %71
  %412 = sub i32 %411, %72
  %413 = sub i32 %412, %74
  %414 = add i32 %413, %75
  %415 = add i32 %414, %76
  %416 = sub i32 %415, %79
  %417 = sub i32 %416, %81
  %418 = add i32 %417, %83
  %419 = add i32 %418, %84
  %420 = sub i32 %419, %85
  %421 = add i32 %420, %87
  %422 = add i32 %421, %89
  %423 = add i32 %422, %90
  %424 = sub i32 %423, %92
  %425 = add i32 %424, %93
  %426 = add i32 %425, %96
  %427 = sub i32 %426, %98
  %428 = add i32 %427, %99
  %429 = sub i32 %428, %100
  %430 = add i32 %429, %104
  %431 = add i32 %430, %105
  %432 = sub i32 %431, %106
  %433 = sub i32 %432, %107
  %434 = add i32 %433, %110
  %435 = sub i32 %434, %111
  %436 = add i32 %435, %112
  %437 = sub i32 %436, %113
  %438 = sub i32 %437, %116
  %439 = sub i32 %438, %117
  %440 = sub i32 %439, %121
  %441 = sub i32 %440, %122
  %442 = sub i32 %441, %123
  %443 = add i32 %442, %124
  %444 = sub i32 %443, %128
  %445 = sub i32 %444, %130
  %446 = add i32 %445, %133
  %447 = add i32 %446, %134
  %448 = sub i32 %447, %135
  %449 = sub i32 %448, %136
  %450 = add i32 %449, %137
  %451 = sub i32 %450, %138
  %452 = sub i32 %451, %141
  %453 = add i32 %452, %142
  %454 = sub i32 %453, %143
  %455 = sub i32 %454, %144
  %456 = sub i32 %455, %145
  %457 = add i32 %456, %146
  %458 = sub i32 %457, %155
  %459 = sub i32 %458, %158
  %460 = add i32 %459, %159
  %461 = add i32 %460, %161
  %462 = add i32 %461, %164
  %463 = add i32 %462, %171
  %464 = add i32 %463, %173
  %465 = add i32 %464, %178
  %466 = add i32 %465, %187
  %467 = sub i32 %466, %190
  %468 = sub i32 %467, %194
  %469 = add i32 %468, %197
  %470 = sub i32 %469, %199
  %471 = add i32 %470, %200
  %472 = sub i32 %471, %204
  %473 = add i32 %472, %205
  %474 = add i32 %473, %206
  %475 = sub i32 %474, %207
  %476 = sub i32 %475, %215
  %477 = add i32 %476, %219
  %478 = sub i32 %477, %220
  %479 = sub i32 %478, %221
  %480 = sub i32 %479, %222
  %481 = add i32 %480, %223
  %482 = add i32 %481, %224
  %483 = sub i32 %482, %229
  %484 = add i32 %483, %230
  %485 = sub i32 %484, %238
  %486 = add i32 %485, %240
  %487 = add i32 %486, %241
  %488 = sub i32 %487, %244
  %489 = add i32 %488, %246
  %490 = add i32 %489, %247
  %491 = add i32 %490, %248
  %492 = sub i32 %491, %209
  %493 = add i32 %492, %250
  %494 = sub i32 %493, %252
  %495 = add i32 %494, %255
  %496 = add i32 %495, %256
  %497 = sub i32 %496, %258
  %498 = sub i32 %497, %260
  %499 = add i32 %498, %263
  %500 = add i32 %499, %264
  %501 = add i32 %500, %267
  %502 = add i32 %501, %274
  %503 = sub i32 %502, %275
  %504 = sub i32 %503, %276
  %505 = add i32 %504, %280
  %506 = add i32 %505, %282
  %507 = add i32 %506, %283
  %508 = add i32 %507, %284
  %509 = add i32 %508, %288
  %510 = sub i32 %509, %290
  %511 = sub i32 %510, %291
  %512 = add i32 %511, %150
  %513 = sub i32 %512, %242
  %514 = add i32 %513, %292
  %515 = add i32 %514, %294
  %516 = add i32 %515, %296
  %517 = add i32 %516, %297
  %518 = sub i32 %517, %299
  %519 = add i32 %518, %20
  %520 = sub i32 %519, %21
  %521 = add i32 %520, %23
  %522 = add i32 %521, %25
  %523 = sub i32 %522, %6
  %524 = add i32 %523, %61
  %525 = add i32 %524, %63
  %526 = sub i32 %525, %115
  %527 = add i32 %526, %127
  %528 = sub i32 %527, %149
  %529 = sub i32 %528, %151
  %530 = sub i32 %529, %154
  %531 = sub i32 %530, %157
  %532 = sub i32 %531, %167
  %533 = sub i32 %532, %169
  %534 = sub i32 %533, %176
  %535 = sub i32 %534, %183
  %536 = sub i32 %535, %202
  %537 = add i32 %536, %210
  %538 = sub i32 %537, %212
  %539 = add i32 %538, %214
  %540 = sub i32 %539, %234
  %541 = sub i32 %540, %243
  %542 = sub i32 %541, %249
  %543 = sub i32 %542, %251
  %544 = sub i32 %543, %254
  %545 = sub i32 %544, %259
  %546 = add i32 %545, %261
  %547 = sub i32 %546, %266
  %548 = sub i32 %547, %271
  %549 = sub i32 %548, %272
  %550 = add i32 %549, %281
  %551 = sub i32 %550, %285
  %552 = add i32 %551, %301
  %553 = sub i32 %552, %303
  %554 = sub i32 %553, %306
  %555 = add i32 %554, %308
  %556 = add i32 %555, %310
  %557 = sub i32 %556, %311
  %558 = sub i32 %557, %270
  %559 = add i32 %558, %355
  %560 = sub i32 %559, %193
  %561 = sub i32 %560, %227
  %562 = add i32 %561, %353
  %563 = add i32 %562, %347
  %564 = add i32 %563, %340
  %565 = icmp eq i32 %18, %564
  %566 = select i1 %565, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %567 = tail call i32 @puts(i8* nonnull dereferenceable(1) %566)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
