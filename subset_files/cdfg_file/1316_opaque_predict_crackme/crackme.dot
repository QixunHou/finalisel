digraph "DFG for'crackme' function" {
	Node0x17074e0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x1707b90[shape=record, label="  %4 = sub i32 0, %3"];
	Node0x1707c50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1707cc0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x1707d30[shape=record, label="  %7 = or i32 %6, %1"];
	Node0x1707dd0[shape=record, label="  %8 = mul i32 %7, -2"];
	Node0x1707e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1707eb0[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1707f20[shape=record, label="  %11 = or i32 %5, %0"];
	Node0x1707fc0[shape=record, label="  %12 = shl i32 %3, 2"];
	Node0x1708060[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x17080d0[shape=record, label="  %14 = xor i32 %11, -1"];
	Node0x1708170[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x17081e0[shape=record, label="  %16 = shl i32 %9, 2"];
	Node0x1708250[shape=record, label="  %17 = sub i32 3, %9"];
	Node0x17082c0[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x1708330[shape=record, label="  %19 = add i32 %18, %11"];
	Node0x17083a0[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x1708410[shape=record, label="  %21 = add i32 %20, %15"];
	Node0x1708480[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x17084f0[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x1708560[shape=record, label="  %24 = icmp eq i32 %23, %4"];
	Node0x16a8268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1708a00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1708a50[shape=record, label="  ret void"];
	Node0x17074e0 -> Node0x1707b90;
	Node0x1707b90 -> Node0x1707c50;
	Node0x1707c50 -> Node0x1707cc0;
	Node0x1707cc0 -> Node0x1707d30;
	Node0x1707d30 -> Node0x1707dd0;
	Node0x1707dd0 -> Node0x1707e40;
	Node0x1707e40 -> Node0x1707eb0;
	Node0x1707eb0 -> Node0x1707f20;
	Node0x1707f20 -> Node0x1707fc0;
	Node0x1707fc0 -> Node0x1708060;
	Node0x1708060 -> Node0x17080d0;
	Node0x17080d0 -> Node0x1708170;
	Node0x1708170 -> Node0x17081e0;
	Node0x17081e0 -> Node0x1708250;
	Node0x1708250 -> Node0x17082c0;
	Node0x17082c0 -> Node0x1708330;
	Node0x1708330 -> Node0x17083a0;
	Node0x17083a0 -> Node0x1708410;
	Node0x1708410 -> Node0x1708480;
	Node0x1708480 -> Node0x17084f0;
	Node0x17084f0 -> Node0x1708560;
	Node0x1708560 -> Node0x16a8268;
	Node0x16a8268 -> Node0x1708a00;
	Node0x1708a00 -> Node0x1708a50;
edge [color=red]
	Node0x17074e0 -> Node0x1707b90;
	Node0x1707cc0 -> Node0x1707d30;
	Node0x1707d30 -> Node0x1707dd0;
	Node0x1707c50 -> Node0x1707f20;
	Node0x17074e0 -> Node0x1707fc0;
	Node0x1707fc0 -> Node0x1708060;
	Node0x1707f20 -> Node0x17080d0;
	Node0x17080d0 -> Node0x1708170;
	Node0x1707e40 -> Node0x17081e0;
	Node0x1707e40 -> Node0x1708250;
	Node0x1708250 -> Node0x17082c0;
	Node0x1707eb0 -> Node0x17082c0;
	Node0x17082c0 -> Node0x1708330;
	Node0x1707f20 -> Node0x1708330;
	Node0x1708330 -> Node0x17083a0;
	Node0x1707dd0 -> Node0x17083a0;
	Node0x17083a0 -> Node0x1708410;
	Node0x1708170 -> Node0x1708410;
	Node0x1708410 -> Node0x1708480;
	Node0x17081e0 -> Node0x1708480;
	Node0x1708480 -> Node0x17084f0;
	Node0x1708060 -> Node0x17084f0;
	Node0x17084f0 -> Node0x1708560;
	Node0x1707b90 -> Node0x1708560;
	Node0x1708560 -> Node0x16a8268;
	Node0x16a8268 -> Node0x1708a00;
}
