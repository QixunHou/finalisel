digraph "DFG for'crackme' function" {
	Node0xacb5a0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xacbc50[shape=record, label="  %4 = add i32 %0, 1"];
	Node0xacbd10[shape=record, label="  %5 = add i32 %4, %3"];
	Node0xacbd80[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0xacbdf0[shape=record, label="  %7 = and i32 %6, %0"];
	Node0xacbe60[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0xacbed0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xacbf40[shape=record, label="  %10 = or i32 %6, %0"];
	Node0xacbfb0[shape=record, label="  %11 = shl i32 %1, 1"];
	Node0xacc020[shape=record, label="  %12 = or i32 %1, %0"];
	Node0xacc090[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0xacc130[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0xacc1d0[shape=record, label="  %15 = mul i32 %3, 5"];
	Node0xacc240[shape=record, label="  %16 = sub i32 %6, %7"];
	Node0xacc2e0[shape=record, label="  %17 = mul i32 %16, 3"];
	Node0xacc350[shape=record, label="  %18 = add i32 %0, 3"];
	Node0xacc3c0[shape=record, label="  %19 = add i32 %18, %7"];
	Node0xacc430[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0xacc4a0[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0xacc510[shape=record, label="  %22 = sub i32 %21, %8"];
	Node0xacc580[shape=record, label="  %23 = add i32 %22, %12"];
	Node0xacc5f0[shape=record, label="  %24 = add i32 %23, %9"];
	Node0xacc660[shape=record, label="  %25 = add i32 %24, %15"];
	Node0xacc6d0[shape=record, label="  %26 = add i32 %25, %14"];
	Node0xacc740[shape=record, label="  %27 = add i32 %26, %17"];
	Node0xacc7b0[shape=record, label="  %28 = icmp eq i32 %5, %27"];
	Node0xa6c268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xaccc50[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xaccca0[shape=record, label="  ret void"];
	Node0xacb5a0 -> Node0xacbc50;
	Node0xacbc50 -> Node0xacbd10;
	Node0xacbd10 -> Node0xacbd80;
	Node0xacbd80 -> Node0xacbdf0;
	Node0xacbdf0 -> Node0xacbe60;
	Node0xacbe60 -> Node0xacbed0;
	Node0xacbed0 -> Node0xacbf40;
	Node0xacbf40 -> Node0xacbfb0;
	Node0xacbfb0 -> Node0xacc020;
	Node0xacc020 -> Node0xacc090;
	Node0xacc090 -> Node0xacc130;
	Node0xacc130 -> Node0xacc1d0;
	Node0xacc1d0 -> Node0xacc240;
	Node0xacc240 -> Node0xacc2e0;
	Node0xacc2e0 -> Node0xacc350;
	Node0xacc350 -> Node0xacc3c0;
	Node0xacc3c0 -> Node0xacc430;
	Node0xacc430 -> Node0xacc4a0;
	Node0xacc4a0 -> Node0xacc510;
	Node0xacc510 -> Node0xacc580;
	Node0xacc580 -> Node0xacc5f0;
	Node0xacc5f0 -> Node0xacc660;
	Node0xacc660 -> Node0xacc6d0;
	Node0xacc6d0 -> Node0xacc740;
	Node0xacc740 -> Node0xacc7b0;
	Node0xacc7b0 -> Node0xa6c268;
	Node0xa6c268 -> Node0xaccc50;
	Node0xaccc50 -> Node0xaccca0;
edge [color=red]
	Node0xacbc50 -> Node0xacbd10;
	Node0xacb5a0 -> Node0xacbd10;
	Node0xacbd80 -> Node0xacbdf0;
	Node0xacbe60 -> Node0xacbed0;
	Node0xacbd80 -> Node0xacbf40;
	Node0xacbf40 -> Node0xacc090;
	Node0xacc090 -> Node0xacc130;
	Node0xacb5a0 -> Node0xacc1d0;
	Node0xacbd80 -> Node0xacc240;
	Node0xacbdf0 -> Node0xacc240;
	Node0xacc240 -> Node0xacc2e0;
	Node0xacc350 -> Node0xacc3c0;
	Node0xacbdf0 -> Node0xacc3c0;
	Node0xacc3c0 -> Node0xacc430;
	Node0xacbf40 -> Node0xacc430;
	Node0xacc430 -> Node0xacc4a0;
	Node0xacbfb0 -> Node0xacc4a0;
	Node0xacc4a0 -> Node0xacc510;
	Node0xacbe60 -> Node0xacc510;
	Node0xacc510 -> Node0xacc580;
	Node0xacc020 -> Node0xacc580;
	Node0xacc580 -> Node0xacc5f0;
	Node0xacbed0 -> Node0xacc5f0;
	Node0xacc5f0 -> Node0xacc660;
	Node0xacc1d0 -> Node0xacc660;
	Node0xacc660 -> Node0xacc6d0;
	Node0xacc130 -> Node0xacc6d0;
	Node0xacc6d0 -> Node0xacc740;
	Node0xacc2e0 -> Node0xacc740;
	Node0xacbd10 -> Node0xacc7b0;
	Node0xacc740 -> Node0xacc7b0;
	Node0xacc7b0 -> Node0xa6c268;
	Node0xa6c268 -> Node0xaccc50;
}
