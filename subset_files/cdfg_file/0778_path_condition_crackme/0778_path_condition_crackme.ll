; ModuleID = '../.././c_source_file/0778_path_condition_crackme.c'
source_filename = "../.././c_source_file/0778_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = or i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %8, %1
  %10 = xor i32 %4, %3
  %11 = xor i32 %10, -1
  %12 = or i32 %11, %5
  %13 = and i32 %4, %3
  %14 = xor i32 %13, %5
  %15 = sub i32 %12, %9
  %16 = sub i32 %15, %14
  %17 = shl i32 %16, 1
  %18 = xor i32 %2, -1
  %19 = or i32 %18, %0
  %20 = xor i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = and i32 %19, %21
  %23 = shl i32 %22, 1
  %24 = xor i32 %1, -1
  %25 = xor i32 %19, -1
  %26 = or i32 %25, %24
  %27 = shl i32 %26, 2
  %28 = or i32 %24, %0
  %29 = xor i32 %2, %0
  %30 = and i32 %29, %28
  %31 = or i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %29, -1
  %34 = or i32 %33, %32
  %35 = xor i32 %0, -1
  %36 = xor i32 %2, %1
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %35
  %39 = xor i32 %32, %2
  %40 = and i32 %21, %2
  %41 = shl i32 %40, 1
  %42 = and i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = and i32 %1, %0
  %45 = or i32 %44, %18
  %46 = or i32 %8, %24
  %47 = or i32 %18, %1
  %48 = or i32 %47, %35
  %49 = and i32 %43, %1
  %50 = and i32 %24, %0
  %51 = or i32 %50, %37
  %52 = or i32 %37, %0
  %53 = and i32 %47, %0
  %54 = xor i32 %50, -1
  %55 = and i32 %29, %54
  %56 = shl i32 %55, 1
  %57 = xor i32 %44, -1
  %58 = and i32 %18, %57
  %59 = or i32 %2, %1
  %60 = or i32 %59, %35
  %61 = or i32 %44, %33
  %62 = and i32 %29, %20
  %63 = shl i32 %62, 1
  %64 = xor i32 %19, %1
  %65 = and i32 %2, %1
  %66 = xor i32 %65, -1
  %67 = xor i32 %66, %0
  %68 = and i32 %65, %0
  %69 = xor i32 %36, %0
  %70 = xor i32 %68, %69
  %71 = xor i32 %47, -1
  %72 = add i32 %47, 1
  %73 = xor i32 %42, %28
  %74 = and i32 %28, %2
  %75 = and i32 %29, %21
  %76 = xor i32 %59, %35
  %77 = xor i32 %76, %68
  %78 = and i32 %33, %57
  %79 = xor i32 %59, -1
  %80 = or i32 %44, %79
  %81 = xor i32 %28, -1
  %82 = or i32 %36, %81
  %83 = or i32 %29, %24
  %84 = shl i32 %83, 1
  %85 = and i32 %24, %2
  %86 = and i32 %85, %0
  %87 = or i32 %36, %0
  %88 = xor i32 %86, %87
  %89 = add i32 %29, 1
  %90 = and i32 %7, %1
  %91 = or i32 %18, %32
  %92 = and i32 %18, %0
  %93 = xor i32 %92, %1
  %94 = shl i32 %93, 1
  %95 = xor i32 %94, -2
  %96 = or i32 %42, %24
  %97 = or i32 %25, %21
  %98 = xor i32 %71, %0
  %99 = or i32 %92, %20
  %100 = and i32 %37, %54
  %101 = or i32 %79, %0
  %102 = xor i32 %68, %101
  %103 = and i32 %65, %35
  %104 = and i32 %36, %0
  %105 = or i32 %103, %104
  %106 = and i32 %20, %18
  %107 = shl i32 %42, 1
  %108 = and i32 %18, %1
  %109 = or i32 %108, %35
  %110 = or i32 %29, %1
  %111 = xor i32 %43, %1
  %112 = and i32 %7, %24
  %113 = or i32 %50, %2
  %114 = xor i32 %108, -1
  %115 = and i32 %114, %35
  %116 = and i32 %31, %37
  %117 = and i32 %31, %18
  %118 = or i32 %36, %35
  %119 = or i32 %59, %0
  %120 = or i32 %37, %32
  %121 = and i32 %29, %1
  %122 = and i32 %31, %2
  %123 = add i32 %20, 1
  %124 = and i32 %85, %35
  %125 = or i32 %24, %2
  %126 = and i32 %125, %0
  %127 = xor i32 %126, -1
  %128 = xor i32 %124, %127
  %129 = and i32 %36, %57
  %130 = or i32 %25, %1
  %131 = xor i32 %125, -1
  %132 = or i32 %131, %0
  %133 = xor i32 %86, %132
  %134 = and i32 %33, %1
  %135 = or i32 %20, %25
  %136 = or i32 %92, %1
  %137 = xor i32 %108, %0
  %138 = xor i32 %37, %0
  %139 = shl i32 %138, 1
  %140 = or i32 %79, %35
  %141 = and i32 %7, %20
  %142 = or i32 %42, %81
  %143 = xor i32 %25, %1
  %144 = and i32 %7, %21
  %145 = and i32 %43, %24
  %146 = or i32 %42, %108
  %147 = or i32 %21, %2
  %148 = or i32 %36, %44
  %149 = or i32 %71, %0
  %150 = and i32 %33, %21
  %151 = or i32 %92, %24
  %152 = and i32 %19, %1
  %153 = or i32 %42, %20
  %154 = and i32 %28, %33
  %155 = or i32 %42, %21
  %156 = xor i32 %50, %114
  %157 = or i32 %8, %21
  %158 = xor i32 %28, %2
  %159 = add i32 %0, 1
  %160 = or i32 %29, %81
  %161 = xor i32 %69, -1
  %162 = or i32 %68, %161
  %163 = and i32 %33, %24
  %164 = and i32 %79, %35
  %165 = and i32 %108, %35
  %166 = mul i32 %165, -30
  %167 = and i32 %79, %0
  %168 = and i32 %108, %0
  %169 = mul i32 %168, -24
  %170 = and i32 %71, %35
  %171 = mul i32 %170, -11
  %172 = mul i32 %68, -26
  %173 = xor i32 %5, -1
  %174 = and i32 %173, %4
  %175 = and i32 %5, %3
  %176 = or i32 %174, %175
  %177 = shl i32 %176, 1
  %178 = xor i32 %3, -1
  %179 = shl i32 %178, 1
  %180 = or i32 %5, %4
  %181 = and i32 %180, %10
  %182 = xor i32 %13, -1
  %183 = and i32 %182, %5
  %184 = or i32 %178, %4
  %185 = or i32 %5, %3
  %186 = xor i32 %185, %4
  %187 = xor i32 %5, %3
  %188 = xor i32 %187, -1
  %189 = or i32 %188, %4
  %190 = and i32 %5, %4
  %191 = and i32 %173, %3
  %192 = or i32 %190, %191
  %193 = or i32 %173, %4
  %194 = xor i32 %193, -1
  %195 = xor i32 %194, %3
  %196 = and i32 %178, %4
  %197 = xor i32 %5, %4
  %198 = or i32 %197, %196
  %199 = xor i32 %184, -1
  %200 = xor i32 %191, -1
  %201 = or i32 %200, %4
  %202 = shl i32 %201, 1
  %203 = or i32 %4, %3
  %204 = xor i32 %203, -1
  %205 = or i32 %204, %5
  %206 = or i32 %173, %199
  %207 = or i32 %188, %199
  %208 = xor i32 %4, -1
  %209 = and i32 %185, %208
  %210 = or i32 %187, %199
  %211 = or i32 %190, %3
  %212 = or i32 %194, %178
  %213 = xor i32 %174, %3
  %214 = or i32 %175, %208
  %215 = or i32 %173, %11
  %216 = and i32 %178, %5
  %217 = and i32 %216, %208
  %218 = or i32 %178, %5
  %219 = and i32 %218, %4
  %220 = or i32 %217, %219
  %221 = xor i32 %197, -1
  %222 = or i32 %10, %221
  %223 = shl i32 %222, 1
  %224 = and i32 %184, %173
  %225 = or i32 %173, %3
  %226 = xor i32 %225, %13
  %227 = or i32 %190, %11
  %228 = and i32 %193, %3
  %229 = and i32 %175, %208
  %230 = and i32 %187, %4
  %231 = xor i32 %229, -1
  %232 = xor i32 %230, %231
  %233 = and i32 %175, %4
  %234 = xor i32 %233, -1
  %235 = xor i32 %186, %234
  %236 = xor i32 %185, -1
  %237 = xor i32 %236, %4
  %238 = or i32 %187, %208
  %239 = xor i32 %217, %238
  %240 = or i32 %174, %11
  %241 = or i32 %185, %208
  %242 = or i32 %185, %4
  %243 = xor i32 %180, -1
  %244 = or i32 %10, %243
  %245 = and i32 %11, %5
  %246 = or i32 %174, %3
  %247 = or i32 %175, %196
  %248 = xor i32 %190, -1
  %249 = and i32 %248, %178
  %250 = xor i32 %184, %5
  %251 = shl i32 %250, 1
  %252 = or i32 %191, %196
  %253 = shl i32 %252, 1
  %254 = xor i32 %182, %5
  %255 = and i32 %200, %208
  %256 = or i32 %10, %173
  %257 = shl i32 %256, 1
  %258 = xor i32 %196, -1
  %259 = and i32 %187, %258
  %260 = xor i32 %243, %3
  %261 = shl i32 %260, 1
  %262 = and i32 %225, %208
  %263 = and i32 %197, %178
  %264 = and i32 %216, %4
  %265 = and i32 %218, %208
  %266 = xor i32 %264, -1
  %267 = xor i32 %265, %266
  %268 = xor i32 %175, %4
  %269 = shl i32 %268, 1
  %270 = xor i32 %190, %184
  %271 = shl i32 %270, 1
  %272 = and i32 %203, %188
  %273 = shl i32 %272, 1
  %274 = and i32 %10, %248
  %275 = xor i32 %204, %5
  %276 = and i32 %197, %11
  %277 = xor i32 %218, %4
  %278 = or i32 %264, %277
  %279 = and i32 %197, %3
  %280 = or i32 %196, %221
  %281 = and i32 %10, %5
  %282 = and i32 %185, %4
  %283 = or i32 %229, %282
  %284 = or i32 %190, %236
  %285 = shl i32 %284, 1
  %286 = or i32 %187, %4
  %287 = shl i32 %5, 1
  %288 = xor i32 %200, %4
  %289 = or i32 %13, %243
  %290 = or i32 %190, %178
  %291 = and i32 %197, %203
  %292 = or i32 %197, %199
  %293 = xor i32 %193, %3
  %294 = and i32 %200, %4
  %295 = or i32 %187, %13
  %296 = and i32 %197, %184
  %297 = and i32 %193, %178
  %298 = or i32 %221, %3
  %299 = and i32 %221, %258
  %300 = shl i32 %299, 1
  %301 = or i32 %236, %4
  %302 = xor i32 %193, %13
  %303 = and i32 %193, %10
  %304 = or i32 %243, %3
  %305 = xor i32 %225, -1
  %306 = or i32 %13, %305
  %307 = or i32 %221, %204
  %308 = and i32 %221, %3
  %309 = and i32 %187, %182
  %310 = and i32 %184, %221
  %311 = xor i32 %286, -1
  %312 = or i32 %264, %311
  %313 = xor i32 %196, %200
  %314 = and i32 %173, %258
  %315 = shl i32 %314, 1
  %316 = or i32 %197, %178
  %317 = or i32 %200, %208
  %318 = and i32 %188, %182
  %319 = or i32 %233, %186
  %320 = shl i32 %319, 1
  %321 = xor i32 %225, %4
  %322 = xor i32 %238, -1
  %323 = or i32 %217, %322
  %324 = xor i32 %175, -1
  %325 = or i32 %324, %208
  %326 = and i32 %197, %182
  %327 = or i32 %187, %204
  %328 = xor i32 %196, %324
  %329 = or i32 %188, %208
  %330 = add i32 %191, 1
  %331 = or i32 %196, %188
  %332 = or i32 %197, %11
  %333 = shl i32 %332, 1
  %334 = xor i32 %174, -1
  %335 = and i32 %10, %334
  %336 = xor i32 %185, %13
  %337 = shl i32 %336, 1
  %338 = or i32 %175, %4
  %339 = or i32 %221, %199
  %340 = xor i32 %187, %4
  %341 = xor i32 %340, -1
  %342 = or i32 %233, %341
  %343 = or i32 %225, %208
  %344 = xor i32 %277, %266
  %345 = or i32 %243, %11
  %346 = xor i32 %196, %5
  %347 = shl i32 %346, 1
  %348 = xor i32 %233, %340
  %349 = and i32 %173, %182
  %350 = or i32 %13, %5
  %351 = xor i32 %199, %5
  %352 = and i32 %203, %5
  %353 = xor i32 %264, %341
  %354 = xor i32 %190, %203
  %355 = or i32 %13, %194
  %356 = and i32 %188, %4
  %357 = and i32 %173, %11
  %358 = or i32 %190, %204
  %359 = xor i32 %219, -1
  %360 = xor i32 %217, %359
  %361 = and i32 %188, %258
  %362 = or i32 %13, %221
  %363 = or i32 %197, %10
  %364 = xor i32 %190, %200
  %365 = and i32 %197, %258
  %366 = xor i32 %282, %231
  %367 = and i32 %187, %208
  %368 = or i32 %174, %178
  %369 = or i32 %173, %204
  %370 = or i32 %194, %11
  %371 = and i32 %187, %184
  %372 = and i32 %221, %178
  %373 = or i32 %13, %173
  %374 = xor i32 %334, %3
  %375 = and i32 %187, %203
  %376 = xor i32 %367, %234
  %377 = xor i32 %258, %5
  %378 = or i32 %264, %265
  %379 = xor i32 %248, %3
  %380 = xor i32 %264, %286
  %381 = shl i32 %380, 1
  %382 = xor i32 %180, %3
  %383 = and i32 %197, %10
  %384 = and i32 %324, %4
  %385 = or i32 %197, %3
  %386 = or i32 %324, %4
  %387 = and i32 %203, %221
  %388 = and i32 %221, %11
  %389 = and i32 %188, %208
  %390 = xor i32 %209, %234
  %391 = or i32 %191, %4
  %392 = or i32 %221, %178
  %393 = shl i32 %392, 1
  %394 = xor i32 %305, %4
  %395 = or i32 %188, %204
  %396 = and i32 %334, %11
  %397 = and i32 %193, %11
  %398 = or i32 %190, %199
  %399 = and i32 %334, %178
  %400 = or i32 %243, %178
  %401 = and i32 %10, %173
  %402 = or i32 %187, %196
  %403 = or i32 %197, %204
  %404 = or i32 %194, %3
  %405 = or i32 %221, %11
  %406 = or i32 %10, %5
  %407 = or i32 %190, %10
  %408 = or i32 %13, %236
  %409 = shl i32 %408, 1
  %410 = and i32 %10, %221
  %411 = or i32 %197, %13
  %412 = or i32 %236, %208
  %413 = and i32 %180, %11
  %414 = or i32 %225, %4
  %415 = and i32 %221, %182
  %416 = or i32 %229, %230
  %417 = or i32 %174, %10
  %418 = or i32 %196, %173
  %419 = or i32 %174, %305
  %420 = and i32 %225, %4
  %421 = and i32 %184, %188
  %422 = xor i32 %203, %5
  %423 = or i32 %13, %188
  %424 = and i32 %248, %3
  %425 = and i32 %248, %11
  %426 = and i32 %184, %5
  %427 = shl i32 %305, 1
  %428 = xor i32 %188, %4
  %429 = and i32 %324, %208
  %430 = and i32 %180, %178
  %431 = or i32 %196, %5
  %432 = shl i32 %431, 1
  %433 = xor i32 %180, %13
  %434 = xor i32 %174, %324
  %435 = xor i32 %190, %185
  %436 = or i32 %264, %340
  %437 = and i32 %334, %3
  %438 = or i32 %233, %209
  %439 = and i32 %258, %5
  %440 = shl i32 %439, 1
  %441 = or i32 %199, %5
  %442 = or i32 %305, %4
  %443 = xor i32 %174, %225
  %444 = and i32 %203, %173
  %445 = or i32 %305, %208
  %446 = and i32 %180, %3
  %447 = and i32 %236, %208
  %448 = shl i32 %447, 3
  %449 = and i32 %191, %208
  %450 = shl i32 %449, 1
  %451 = and i32 %236, %4
  %452 = and i32 %191, %4
  %453 = mul i32 %452, 14
  %454 = and i32 %305, %208
  %455 = and i32 %305, %4
  %456 = mul i32 %455, 6
  %457 = mul i32 %233, 21
  %458 = sub i32 -2, %2
  %459 = add i32 %458, %45
  %460 = add i32 %459, %163
  %461 = add i32 %460, %148
  %462 = add i32 %461, %135
  %463 = add i32 %462, %97
  %464 = add i32 %463, %96
  %465 = add i32 %464, %75
  %466 = add i32 %465, %173
  %467 = add i32 %466, %182
  %468 = add i32 %467, %10
  %469 = add i32 %468, %248
  %470 = add i32 %469, %221
  %471 = add i32 %470, %187
  %472 = add i32 %471, %435
  %473 = add i32 %472, %421
  %474 = add i32 %473, %389
  %475 = add i32 %474, %383
  %476 = add i32 %475, %368
  %477 = add i32 %476, %325
  %478 = add i32 %477, %303
  %479 = add i32 %478, %294
  %480 = add i32 %479, %292
  %481 = add i32 %480, %291
  %482 = add i32 %481, %212
  %483 = add i32 %482, %209
  %484 = add i32 %483, %378
  %485 = shl i32 %484, 1
  %486 = add i32 %36, %43
  %487 = add i32 %486, %145
  %488 = add i32 %487, %137
  %489 = sub i32 %488, %78
  %490 = add i32 %489, %412
  %491 = sub i32 %490, %454
  %492 = add i32 %491, %396
  %493 = sub i32 %492, %227
  %494 = mul i32 %493, 5
  %495 = add i32 %117, %208
  %496 = add i32 %495, %46
  %497 = add i32 %496, %358
  %498 = add i32 %497, %229
  %499 = add i32 %498, %249
  %500 = shl i32 %499, 2
  %501 = add i32 %167, %164
  %502 = mul i32 %501, -20
  %503 = add i32 %39, %48
  %504 = sub i32 %503, %225
  %505 = add i32 %504, %451
  %506 = sub i32 %505, %385
  %507 = add i32 %506, %304
  %508 = sub i32 %507, %288
  %509 = add i32 %508, %242
  %510 = add i32 %509, %267
  %511 = mul i32 %510, 3
  %512 = add i32 %159, %0
  %513 = sub i32 %512, %50
  %514 = add i32 %513, %54
  %515 = add i32 %514, %123
  %516 = add i32 %515, %58
  %517 = add i32 %516, %72
  %518 = sub i32 %517, %74
  %519 = add i32 %518, %89
  %520 = sub i32 %519, %91
  %521 = sub i32 %520, %106
  %522 = sub i32 %521, %113
  %523 = add i32 %522, %66
  %524 = sub i32 %523, %122
  %525 = sub i32 %524, %92
  %526 = add i32 %525, %108
  %527 = add i32 %526, %147
  %528 = add i32 %527, %158
  %529 = add i32 %528, %47
  %530 = add i32 %529, %3
  %531 = sub i32 %530, %30
  %532 = add i32 %531, %34
  %533 = add i32 %532, %38
  %534 = sub i32 %533, %41
  %535 = sub i32 %534, %48
  %536 = sub i32 %535, %49
  %537 = add i32 %536, %51
  %538 = sub i32 %537, %52
  %539 = sub i32 %538, %53
  %540 = add i32 %539, %60
  %541 = add i32 %540, %61
  %542 = sub i32 %541, %64
  %543 = add i32 %542, %67
  %544 = add i32 %543, %73
  %545 = add i32 %544, %80
  %546 = sub i32 %545, %82
  %547 = sub i32 %546, %90
  %548 = add i32 %547, %98
  %549 = add i32 %548, %99
  %550 = add i32 %549, %100
  %551 = sub i32 %550, %107
  %552 = sub i32 %551, %109
  %553 = sub i32 %552, %110
  %554 = sub i32 %553, %111
  %555 = sub i32 %554, %112
  %556 = sub i32 %555, %115
  %557 = sub i32 %556, %116
  %558 = sub i32 %557, %118
  %559 = add i32 %558, %119
  %560 = add i32 %559, %120
  %561 = sub i32 %560, %121
  %562 = sub i32 %561, %101
  %563 = sub i32 %562, %129
  %564 = sub i32 %563, %130
  %565 = add i32 %564, %134
  %566 = add i32 %565, %136
  %567 = sub i32 %566, %140
  %568 = add i32 %567, %141
  %569 = sub i32 %568, %142
  %570 = add i32 %569, %143
  %571 = add i32 %570, %144
  %572 = add i32 %571, %146
  %573 = sub i32 %572, %149
  %574 = add i32 %573, %150
  %575 = sub i32 %574, %151
  %576 = add i32 %575, %152
  %577 = sub i32 %576, %153
  %578 = sub i32 %577, %154
  %579 = sub i32 %578, %155
  %580 = add i32 %579, %93
  %581 = add i32 %580, %156
  %582 = add i32 %581, %157
  %583 = sub i32 %582, %160
  %584 = add i32 %583, %103
  %585 = sub i32 %584, %179
  %586 = add i32 %585, %4
  %587 = sub i32 %586, %27
  %588 = add i32 %587, %23
  %589 = sub i32 %588, %56
  %590 = sub i32 %589, %63
  %591 = sub i32 %590, %70
  %592 = add i32 %591, %77
  %593 = sub i32 %592, %84
  %594 = add i32 %593, %88
  %595 = sub i32 %594, %102
  %596 = add i32 %595, %105
  %597 = sub i32 %596, %128
  %598 = add i32 %597, %133
  %599 = sub i32 %598, %139
  %600 = add i32 %599, %162
  %601 = add i32 %600, %166
  %602 = add i32 %601, %169
  %603 = add i32 %602, %171
  %604 = add i32 %603, %172
  %605 = add i32 %604, %10
  %606 = add i32 %605, 2
  %607 = sub i32 %606, %196
  %608 = sub i32 %607, %13
  %609 = sub i32 %608, %95
  %610 = add i32 %609, %183
  %611 = add i32 %610, %205
  %612 = sub i32 %611, %206
  %613 = sub i32 %612, %191
  %614 = add i32 %613, %190
  %615 = add i32 %614, %215
  %616 = sub i32 %615, %224
  %617 = add i32 %616, %245
  %618 = add i32 %617, %254
  %619 = add i32 %618, %174
  %620 = add i32 %619, %275
  %621 = add i32 %620, %197
  %622 = add i32 %621, %188
  %623 = sub i32 %622, %281
  %624 = sub i32 %623, %287
  %625 = add i32 %624, %330
  %626 = add i32 %625, %194
  %627 = add i32 %626, %324
  %628 = add i32 %627, %349
  %629 = sub i32 %628, %350
  %630 = sub i32 %629, %351
  %631 = add i32 %630, %352
  %632 = add i32 %631, %357
  %633 = add i32 %632, %369
  %634 = sub i32 %633, %175
  %635 = sub i32 %634, %373
  %636 = add i32 %635, %377
  %637 = add i32 %636, %401
  %638 = sub i32 %637, %193
  %639 = add i32 %638, %406
  %640 = add i32 %639, %418
  %641 = sub i32 %640, %422
  %642 = sub i32 %641, %426
  %643 = sub i32 %642, %441
  %644 = sub i32 %643, %444
  %645 = add i32 %644, %502
  %646 = add i32 %645, %181
  %647 = sub i32 %646, %186
  %648 = sub i32 %647, %189
  %649 = sub i32 %648, %192
  %650 = sub i32 %649, %195
  %651 = sub i32 %650, %198
  %652 = add i32 %651, %207
  %653 = sub i32 %652, %210
  %654 = sub i32 %653, %211
  %655 = sub i32 %654, %213
  %656 = add i32 %655, %214
  %657 = add i32 %656, %226
  %658 = add i32 %657, %228
  %659 = add i32 %658, %237
  %660 = add i32 %659, %240
  %661 = sub i32 %660, %241
  %662 = sub i32 %661, %244
  %663 = sub i32 %662, %246
  %664 = add i32 %663, %247
  %665 = sub i32 %664, %251
  %666 = sub i32 %665, %255
  %667 = sub i32 %666, %257
  %668 = sub i32 %667, %259
  %669 = sub i32 %668, %262
  %670 = sub i32 %669, %263
  %671 = sub i32 %670, %274
  %672 = sub i32 %671, %276
  %673 = add i32 %672, %279
  %674 = sub i32 %673, %280
  %675 = add i32 %674, %286
  %676 = add i32 %675, %289
  %677 = sub i32 %676, %290
  %678 = add i32 %677, %293
  %679 = add i32 %678, %295
  %680 = sub i32 %679, %296
  %681 = sub i32 %680, %297
  %682 = sub i32 %681, %298
  %683 = add i32 %682, %301
  %684 = sub i32 %683, %302
  %685 = add i32 %684, %230
  %686 = sub i32 %685, %306
  %687 = sub i32 %686, %307
  %688 = sub i32 %687, %308
  %689 = add i32 %688, %309
  %690 = sub i32 %689, %310
  %691 = sub i32 %690, %313
  %692 = sub i32 %691, %315
  %693 = sub i32 %692, %316
  %694 = add i32 %693, %317
  %695 = add i32 %694, %318
  %696 = sub i32 %695, %321
  %697 = sub i32 %696, %326
  %698 = add i32 %697, %327
  %699 = add i32 %698, %328
  %700 = add i32 %699, %329
  %701 = sub i32 %700, %331
  %702 = add i32 %701, %335
  %703 = add i32 %702, %338
  %704 = add i32 %703, %339
  %705 = sub i32 %704, %343
  %706 = add i32 %705, %345
  %707 = sub i32 %706, %347
  %708 = sub i32 %707, %354
  %709 = sub i32 %708, %355
  %710 = sub i32 %709, %356
  %711 = add i32 %710, %361
  %712 = sub i32 %711, %362
  %713 = sub i32 %712, %363
  %714 = add i32 %713, %364
  %715 = add i32 %714, %365
  %716 = sub i32 %715, %367
  %717 = sub i32 %716, %370
  %718 = sub i32 %717, %371
  %719 = add i32 %718, %372
  %720 = add i32 %719, %374
  %721 = sub i32 %720, %375
  %722 = sub i32 %721, %379
  %723 = sub i32 %722, %382
  %724 = add i32 %723, %384
  %725 = sub i32 %724, %386
  %726 = add i32 %725, %387
  %727 = sub i32 %726, %388
  %728 = add i32 %727, %340
  %729 = add i32 %728, %391
  %730 = sub i32 %729, %394
  %731 = sub i32 %730, %395
  %732 = add i32 %731, %397
  %733 = sub i32 %732, %398
  %734 = add i32 %733, %399
  %735 = add i32 %734, %400
  %736 = add i32 %735, %402
  %737 = add i32 %736, %403
  %738 = add i32 %737, %404
  %739 = sub i32 %738, %405
  %740 = sub i32 %739, %407
  %741 = add i32 %740, %410
  %742 = sub i32 %741, %411
  %743 = add i32 %742, %413
  %744 = sub i32 %743, %414
  %745 = sub i32 %744, %415
  %746 = sub i32 %745, %238
  %747 = sub i32 %746, %417
  %748 = add i32 %747, %419
  %749 = add i32 %748, %420
  %750 = add i32 %749, %423
  %751 = sub i32 %750, %424
  %752 = add i32 %751, %425
  %753 = sub i32 %752, %427
  %754 = sub i32 %753, %428
  %755 = sub i32 %754, %429
  %756 = add i32 %755, %430
  %757 = sub i32 %756, %432
  %758 = sub i32 %757, %433
  %759 = sub i32 %758, %434
  %760 = sub i32 %759, %437
  %761 = sub i32 %760, %282
  %762 = sub i32 %761, %440
  %763 = add i32 %762, %442
  %764 = add i32 %763, %443
  %765 = add i32 %764, %445
  %766 = add i32 %765, %446
  %767 = sub i32 %766, %177
  %768 = sub i32 %767, %202
  %769 = add i32 %768, %220
  %770 = sub i32 %769, %223
  %771 = sub i32 %770, %232
  %772 = sub i32 %771, %235
  %773 = sub i32 %772, %239
  %774 = sub i32 %773, %253
  %775 = sub i32 %774, %261
  %776 = sub i32 %775, %269
  %777 = sub i32 %776, %271
  %778 = sub i32 %777, %273
  %779 = add i32 %778, %278
  %780 = add i32 %779, %283
  %781 = sub i32 %780, %285
  %782 = sub i32 %781, %300
  %783 = sub i32 %782, %312
  %784 = add i32 %783, %323
  %785 = sub i32 %784, %333
  %786 = sub i32 %785, %337
  %787 = add i32 %786, %342
  %788 = sub i32 %787, %344
  %789 = sub i32 %788, %348
  %790 = add i32 %789, %353
  %791 = sub i32 %790, %360
  %792 = sub i32 %791, %366
  %793 = add i32 %792, %376
  %794 = sub i32 %793, %390
  %795 = sub i32 %794, %393
  %796 = sub i32 %795, %409
  %797 = sub i32 %796, %416
  %798 = sub i32 %797, %436
  %799 = add i32 %798, %438
  %800 = sub i32 %799, %448
  %801 = sub i32 %800, %450
  %802 = add i32 %801, %453
  %803 = add i32 %802, %456
  %804 = add i32 %803, %457
  %805 = sub i32 %804, %320
  %806 = sub i32 %805, %381
  %807 = add i32 %806, %500
  %808 = add i32 %807, %494
  %809 = add i32 %808, %511
  %810 = add i32 %809, %485
  %811 = icmp eq i32 %17, %810
  %812 = select i1 %811, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %813 = tail call i32 @puts(i8* nonnull dereferenceable(1) %812)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
