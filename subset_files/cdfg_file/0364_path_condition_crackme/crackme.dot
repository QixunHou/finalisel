digraph "DFG for'crackme' function" {
	Node0x2292bf0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x2292c60[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x2292d20[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x2292d90[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x2292e00[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x2292e70[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x2292ee0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x2292f80[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x2292ff0[shape=record, label="  %11 = add i32 %1, 1"];
	Node0x2293060[shape=record, label="  %12 = xor i32 %1, %0"];
	Node0x22930d0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x2293140[shape=record, label="  %14 = shl i32 %4, 1"];
	Node0x22931b0[shape=record, label="  %15 = or i32 %14, 1"];
	Node0x2293250[shape=record, label="  %16 = xor i32 %0, 1073741823"];
	Node0x22932c0[shape=record, label="  %17 = and i32 %16, %1"];
	Node0x2293360[shape=record, label="  %18 = shl i32 %17, 2"];
	Node0x2293400[shape=record, label="  %19 = mul i32 %6, -3"];
	Node0x2293470[shape=record, label="  %20 = sub i32 %11, %4"];
	Node0x22934e0[shape=record, label="  %21 = add i32 %20, %7"];
	Node0x2293550[shape=record, label="  %22 = sub i32 %21, %8"];
	Node0x22935c0[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x2293630[shape=record, label="  %24 = sub i32 %23, %18"];
	Node0x22936a0[shape=record, label="  %25 = add i32 %24, %19"];
	Node0x2293710[shape=record, label="  %26 = add i32 %25, %10"];
	Node0x2293780[shape=record, label="  %27 = add i32 %26, %15"];
	Node0x22937f0[shape=record, label="  %28 = icmp eq i32 %27, %3"];
	Node0x2233268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2293c90[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x2293ce0[shape=record, label="  ret void"];
	Node0x2292bf0 -> Node0x2292c60;
	Node0x2292c60 -> Node0x2292d20;
	Node0x2292d20 -> Node0x2292d90;
	Node0x2292d90 -> Node0x2292e00;
	Node0x2292e00 -> Node0x2292e70;
	Node0x2292e70 -> Node0x2292ee0;
	Node0x2292ee0 -> Node0x2292f80;
	Node0x2292f80 -> Node0x2292ff0;
	Node0x2292ff0 -> Node0x2293060;
	Node0x2293060 -> Node0x22930d0;
	Node0x22930d0 -> Node0x2293140;
	Node0x2293140 -> Node0x22931b0;
	Node0x22931b0 -> Node0x2293250;
	Node0x2293250 -> Node0x22932c0;
	Node0x22932c0 -> Node0x2293360;
	Node0x2293360 -> Node0x2293400;
	Node0x2293400 -> Node0x2293470;
	Node0x2293470 -> Node0x22934e0;
	Node0x22934e0 -> Node0x2293550;
	Node0x2293550 -> Node0x22935c0;
	Node0x22935c0 -> Node0x2293630;
	Node0x2293630 -> Node0x22936a0;
	Node0x22936a0 -> Node0x2293710;
	Node0x2293710 -> Node0x2293780;
	Node0x2293780 -> Node0x22937f0;
	Node0x22937f0 -> Node0x2233268;
	Node0x2233268 -> Node0x2293c90;
	Node0x2293c90 -> Node0x2293ce0;
edge [color=red]
	Node0x2292d20 -> Node0x2292d90;
	Node0x2292d90 -> Node0x2292e00;
	Node0x2292e70 -> Node0x2292ee0;
	Node0x2292ee0 -> Node0x2292f80;
	Node0x2293060 -> Node0x22930d0;
	Node0x2292c60 -> Node0x2293140;
	Node0x2293140 -> Node0x22931b0;
	Node0x2293250 -> Node0x22932c0;
	Node0x22932c0 -> Node0x2293360;
	Node0x2292d90 -> Node0x2293400;
	Node0x2292ff0 -> Node0x2293470;
	Node0x2292c60 -> Node0x2293470;
	Node0x2293470 -> Node0x22934e0;
	Node0x2292e00 -> Node0x22934e0;
	Node0x22934e0 -> Node0x2293550;
	Node0x2292e70 -> Node0x2293550;
	Node0x2293550 -> Node0x22935c0;
	Node0x22930d0 -> Node0x22935c0;
	Node0x22935c0 -> Node0x2293630;
	Node0x2293360 -> Node0x2293630;
	Node0x2293630 -> Node0x22936a0;
	Node0x2293400 -> Node0x22936a0;
	Node0x22936a0 -> Node0x2293710;
	Node0x2292f80 -> Node0x2293710;
	Node0x2293710 -> Node0x2293780;
	Node0x22931b0 -> Node0x2293780;
	Node0x2293780 -> Node0x22937f0;
	Node0x2292bf0 -> Node0x22937f0;
	Node0x22937f0 -> Node0x2233268;
	Node0x2233268 -> Node0x2293c90;
}
