; ModuleID = '../.././c_source_file/1654_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1654_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %0
  %7 = and i32 %6, %5
  %8 = xor i32 %0, -1
  %9 = or i32 %2, %1
  %10 = and i32 %9, %8
  %11 = shl i32 %10, 1
  %12 = add i32 %11, %7
  %13 = and i32 %2, %1
  %14 = and i32 %13, %8
  %15 = and i32 %9, %0
  %16 = or i32 %14, %15
  %17 = xor i32 %2, -1
  %18 = or i32 %1, %0
  %19 = and i32 %18, %17
  %20 = xor i32 %1, -1
  %21 = or i32 %20, %0
  %22 = and i32 %21, %2
  %23 = and i32 %20, %0
  %24 = xor i32 %23, %2
  %25 = and i32 %13, %0
  %26 = xor i32 %2, %1
  %27 = and i32 %26, %8
  %28 = xor i32 %25, -1
  %29 = xor i32 %27, %28
  %30 = or i32 %17, %0
  %31 = xor i32 %30, -1
  %32 = xor i32 %18, %2
  %33 = xor i32 %23, -1
  %34 = and i32 %26, %33
  %35 = xor i32 %33, %2
  %36 = xor i32 %9, -1
  %37 = or i32 %36, %0
  %38 = xor i32 %26, -1
  %39 = and i32 %21, %38
  %40 = and i32 %18, %38
  %41 = xor i32 %21, -1
  %42 = xor i32 %41, %2
  %43 = xor i32 %15, -1
  %44 = xor i32 %14, %43
  %45 = xor i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %17, %46
  %48 = or i32 %2, %0
  %49 = and i32 %48, %20
  %50 = or i32 %17, %41
  %51 = shl i32 %50, 1
  %52 = and i32 %26, %18
  %53 = xor i32 %13, -1
  %54 = or i32 %53, %8
  %55 = shl i32 %54, 1
  %56 = and i32 %2, %0
  %57 = xor i32 %18, -1
  %58 = or i32 %56, %57
  %59 = or i32 %31, %1
  %60 = or i32 %38, %8
  %61 = shl i32 %60, 1
  %62 = or i32 %31, %20
  %63 = xor i32 %6, -1
  %64 = or i32 %63, %1
  %65 = and i32 %30, %45
  %66 = and i32 %38, %0
  %67 = or i32 %4, %2
  %68 = and i32 %26, %5
  %69 = and i32 %33, %2
  %70 = shl i32 %9, 1
  %71 = xor i32 %9, %0
  %72 = xor i32 %71, 2147483647
  %73 = xor i32 %72, %25
  %74 = xor i32 %21, %2
  %75 = shl i32 %74, 2
  %76 = or i32 %6, %57
  %77 = or i32 %17, %1
  %78 = or i32 %77, %0
  %79 = and i32 %6, %33
  %80 = or i32 %31, %46
  %81 = and i32 %38, %33
  %82 = xor i32 %77, -1
  %83 = shl i32 %82, 1
  %84 = and i32 %17, %0
  %85 = xor i32 %84, -1
  %86 = and i32 %85, %46
  %87 = or i32 %84, %1
  %88 = xor i32 %82, %0
  %89 = xor i32 %48, %1
  %90 = and i32 %46, %2
  %91 = and i32 %26, %0
  %92 = or i32 %14, %91
  %93 = xor i32 %30, %4
  %94 = or i32 %84, %82
  %95 = xor i32 %56, -1
  %96 = xor i32 %95, %1
  %97 = and i32 %17, %1
  %98 = or i32 %97, %0
  %99 = and i32 %20, %2
  %100 = and i32 %99, %0
  %101 = or i32 %26, %0
  %102 = xor i32 %101, -1
  %103 = or i32 %100, %102
  %104 = and i32 %99, %8
  %105 = or i32 %20, %2
  %106 = and i32 %105, %0
  %107 = or i32 %104, %106
  %108 = and i32 %26, %21
  %109 = shl i32 %108, 1
  %110 = xor i32 %48, %4
  %111 = and i32 %17, %46
  %112 = or i32 %63, %46
  %113 = xor i32 %56, %9
  %114 = or i32 %84, %13
  %115 = xor i32 %97, -1
  %116 = xor i32 %23, %115
  %117 = and i32 %21, %63
  %118 = or i32 %17, %57
  %119 = xor i32 %100, %101
  %120 = xor i32 %56, %18
  %121 = or i32 %84, %46
  %122 = and i32 %63, %5
  %123 = or i32 %26, %41
  %124 = and i32 %63, %46
  %125 = and i32 %45, %95
  %126 = xor i32 %30, %1
  %127 = or i32 %25, %71
  %128 = or i32 %56, %41
  %129 = and i32 %85, %1
  %130 = or i32 %6, %4
  %131 = shl i32 %130, 1
  %132 = or i32 %45, %63
  %133 = xor i32 %23, %53
  %134 = shl i32 %6, 2
  %135 = or i32 %4, %63
  %136 = xor i32 %77, %0
  %137 = and i32 %6, %45
  %138 = shl i32 %91, 1
  %139 = or i32 %38, %0
  %140 = or i32 %57, %2
  %141 = or i32 %45, %2
  %142 = or i32 %38, %41
  %143 = xor i32 %4, %2
  %144 = shl i32 %143, 1
  %145 = or i32 %45, %31
  %146 = xor i32 %48, -1
  %147 = shl i32 %146, 1
  %148 = or i32 %45, %146
  %149 = xor i32 %36, %0
  %150 = or i32 %53, %0
  %151 = and i32 %21, %17
  %152 = or i32 %4, %17
  %153 = and i32 %45, %2
  %154 = xor i32 %56, %21
  %155 = or i32 %115, %8
  %156 = or i32 %26, %8
  %157 = xor i32 %77, %4
  %158 = and i32 %18, %2
  %159 = or i32 %36, %8
  %160 = xor i32 %26, %0
  %161 = or i32 %100, %160
  %162 = or i32 %6, %1
  %163 = and i32 %30, %46
  %164 = or i32 %45, %17
  %165 = or i32 %56, %36
  %166 = xor i32 %10, %28
  %167 = or i32 %23, %63
  %168 = or i32 %23, %38
  %169 = and i32 %48, %45
  %170 = and i32 %63, %1
  %171 = or i32 %46, %2
  %172 = and i32 %30, %1
  %173 = xor i32 %13, %0
  %174 = or i32 %13, %0
  %175 = and i32 %30, %20
  %176 = shl i32 %175, 1
  %177 = and i32 %36, %8
  %178 = and i32 %97, %8
  %179 = and i32 %36, %0
  %180 = mul i32 %179, -7
  %181 = and i32 %97, %0
  %182 = and i32 %82, %8
  %183 = mul i32 %182, -15
  %184 = and i32 %82, %0
  %185 = add i32 %177, %24
  %186 = add i32 %185, %25
  %187 = sub i32 %129, %186
  %188 = add i32 %187, %123
  %189 = add i32 %188, %68
  %190 = mul i32 %189, 3
  %191 = or i32 %184, %178
  %192 = mul i32 %191, -9
  %193 = sub i32 %8, %35
  %194 = mul i32 %193, 5
  %195 = sub i32 -2, %18
  %196 = add i32 %195, %21
  %197 = add i32 %196, %23
  %198 = add i32 %197, %171
  %199 = add i32 %198, %141
  %200 = add i32 %199, %53
  %201 = add i32 %200, %31
  %202 = add i32 %201, %14
  %203 = add i32 %202, %150
  %204 = add i32 %203, %135
  %205 = add i32 %204, %94
  %206 = add i32 %205, %87
  %207 = add i32 %206, %161
  %208 = add i32 %207, %73
  %209 = shl i32 %208, 1
  %210 = add i32 %0, 2
  %211 = add i32 %210, %20
  %212 = sub i32 %211, %1
  %213 = sub i32 %212, %45
  %214 = add i32 %213, %5
  %215 = add i32 %214, %33
  %216 = add i32 %215, %19
  %217 = sub i32 %216, %22
  %218 = sub i32 %217, %32
  %219 = add i32 %218, %42
  %220 = sub i32 %219, %47
  %221 = add i32 %220, %67
  %222 = sub i32 %221, %69
  %223 = sub i32 %222, %90
  %224 = add i32 %223, %30
  %225 = sub i32 %224, %111
  %226 = sub i32 %225, %13
  %227 = add i32 %226, %118
  %228 = add i32 %227, %36
  %229 = sub i32 %228, %140
  %230 = add i32 %229, %151
  %231 = sub i32 %230, %152
  %232 = sub i32 %231, %153
  %233 = sub i32 %232, %158
  %234 = add i32 %233, %164
  %235 = sub i32 %234, %34
  %236 = sub i32 %235, %37
  %237 = sub i32 %236, %39
  %238 = sub i32 %237, %40
  %239 = add i32 %238, %49
  %240 = sub i32 %239, %51
  %241 = add i32 %240, %52
  %242 = add i32 %241, %58
  %243 = sub i32 %242, %59
  %244 = add i32 %243, %62
  %245 = sub i32 %244, %64
  %246 = sub i32 %245, %65
  %247 = add i32 %246, %66
  %248 = sub i32 %247, %70
  %249 = sub i32 %248, %75
  %250 = sub i32 %249, %76
  %251 = sub i32 %250, %78
  %252 = sub i32 %251, %79
  %253 = add i32 %252, %80
  %254 = add i32 %253, %81
  %255 = sub i32 %254, %83
  %256 = sub i32 %255, %86
  %257 = sub i32 %256, %88
  %258 = add i32 %257, %89
  %259 = add i32 %258, %93
  %260 = add i32 %259, %96
  %261 = sub i32 %260, %98
  %262 = add i32 %261, %110
  %263 = add i32 %262, %112
  %264 = add i32 %263, %113
  %265 = sub i32 %264, %114
  %266 = sub i32 %265, %116
  %267 = add i32 %266, %117
  %268 = add i32 %267, %120
  %269 = add i32 %268, %121
  %270 = sub i32 %269, %122
  %271 = sub i32 %270, %124
  %272 = add i32 %271, %125
  %273 = add i32 %272, %126
  %274 = add i32 %273, %27
  %275 = add i32 %274, %128
  %276 = add i32 %275, %132
  %277 = sub i32 %276, %133
  %278 = add i32 %277, %134
  %279 = sub i32 %278, %136
  %280 = sub i32 %279, %137
  %281 = sub i32 %280, %139
  %282 = add i32 %281, %142
  %283 = sub i32 %282, %144
  %284 = sub i32 %283, %145
  %285 = sub i32 %284, %147
  %286 = sub i32 %285, %148
  %287 = add i32 %286, %149
  %288 = sub i32 %287, %101
  %289 = add i32 %288, %154
  %290 = add i32 %289, %155
  %291 = sub i32 %290, %156
  %292 = sub i32 %291, %157
  %293 = add i32 %292, %159
  %294 = add i32 %293, %162
  %295 = add i32 %294, %163
  %296 = sub i32 %295, %165
  %297 = sub i32 %296, %167
  %298 = add i32 %297, %168
  %299 = add i32 %298, %169
  %300 = sub i32 %299, %170
  %301 = add i32 %300, %172
  %302 = add i32 %301, %173
  %303 = add i32 %302, %174
  %304 = add i32 %303, %181
  %305 = add i32 %304, %16
  %306 = sub i32 %305, %29
  %307 = add i32 %306, %44
  %308 = sub i32 %307, %55
  %309 = sub i32 %308, %61
  %310 = sub i32 %309, %92
  %311 = sub i32 %310, %103
  %312 = sub i32 %311, %107
  %313 = sub i32 %312, %109
  %314 = sub i32 %313, %119
  %315 = sub i32 %314, %127
  %316 = sub i32 %315, %131
  %317 = sub i32 %316, %138
  %318 = sub i32 %317, %166
  %319 = sub i32 %318, %176
  %320 = add i32 %319, %180
  %321 = add i32 %320, %183
  %322 = add i32 %321, %194
  %323 = add i32 %322, %192
  %324 = add i32 %323, %190
  %325 = add i32 %324, %209
  %326 = icmp eq i32 %12, %325
  %327 = select i1 %326, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %328 = tail call i32 @puts(i8* nonnull dereferenceable(1) %327)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
