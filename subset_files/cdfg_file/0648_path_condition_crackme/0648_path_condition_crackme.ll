; ModuleID = '../.././c_source_file/0648_path_condition_crackme.c'
source_filename = "../.././c_source_file/0648_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %1
  %8 = xor i32 %7, %0
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %11, %2
  %13 = add i32 %8, %12
  %14 = xor i32 %5, -1
  %15 = or i32 %14, %4
  %16 = xor i32 %4, %3
  %17 = and i32 %15, %16
  %18 = mul i32 %17, -5
  %19 = sub i32 %18, %13
  %20 = xor i32 %2, %0
  %21 = or i32 %20, %9
  %22 = xor i32 %2, -1
  %23 = or i32 %22, %0
  %24 = and i32 %23, %9
  %25 = xor i32 %7, -1
  %26 = or i32 %10, %25
  %27 = or i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %2
  %30 = xor i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %23, %31
  %33 = xor i32 %0, -1
  %34 = and i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %22, %1
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %33
  %39 = or i32 %34, %37
  %40 = or i32 %7, %10
  %41 = xor i32 %20, -1
  %42 = and i32 %41, %35
  %43 = and i32 %2, %0
  %44 = or i32 %43, %30
  %45 = and i32 %22, %0
  %46 = and i32 %2, %1
  %47 = xor i32 %46, -1
  %48 = xor i32 %45, %47
  %49 = and i32 %23, %1
  %50 = or i32 %7, %28
  %51 = xor i32 %37, %0
  %52 = or i32 %25, %0
  %53 = or i32 %2, %1
  %54 = or i32 %53, %33
  %55 = or i32 %36, %33
  %56 = or i32 %9, %0
  %57 = xor i32 %43, %56
  %58 = or i32 %2, %0
  %59 = and i32 %58, %30
  %60 = xor i32 %56, -1
  %61 = xor i32 %60, %2
  %62 = and i32 %22, %31
  %63 = or i32 %20, %10
  %64 = and i32 %9, %2
  %65 = and i32 %64, %0
  %66 = or i32 %9, %2
  %67 = and i32 %66, %33
  %68 = or i32 %65, %67
  %69 = xor i32 %36, %0
  %70 = shl i32 %69, 1
  %71 = and i32 %46, %0
  %72 = and i32 %53, %33
  %73 = or i32 %71, %72
  %74 = or i32 %65, %8
  %75 = or i32 %45, %31
  %76 = and i32 %53, %0
  %77 = or i32 %7, %0
  %78 = xor i32 %43, %53
  %79 = and i32 %35, %2
  %80 = and i32 %25, %35
  %81 = xor i32 %58, -1
  %82 = or i32 %81, %31
  %83 = or i32 %25, %28
  %84 = or i32 %43, %28
  %85 = xor i32 %23, -1
  %86 = or i32 %41, %1
  %87 = shl i32 %86, 1
  %88 = and i32 %41, %1
  %89 = or i32 %25, %60
  %90 = and i32 %27, %41
  %91 = shl i32 %90, 1
  %92 = and i32 %36, %0
  %93 = or i32 %34, %2
  %94 = shl i32 %93, 1
  %95 = and i32 %22, %1
  %96 = xor i32 %95, -1
  %97 = and i32 %7, %33
  %98 = xor i32 %97, 2147483647
  %99 = xor i32 %98, %71
  %100 = xor i32 %27, %2
  %101 = or i32 %45, %46
  %102 = xor i32 %45, -1
  %103 = and i32 %102, %9
  %104 = and i32 %41, %31
  %105 = or i32 %95, %33
  %106 = and i32 %36, %33
  %107 = xor i32 %43, -1
  %108 = and i32 %30, %107
  %109 = and i32 %25, %33
  %110 = or i32 %36, %0
  %111 = and i32 %64, %33
  %112 = or i32 %7, %33
  %113 = xor i32 %111, %112
  %114 = xor i32 %10, %47
  %115 = or i32 %81, %9
  %116 = shl i32 %115, 1
  %117 = and i32 %7, %56
  %118 = shl i32 %117, 2
  %119 = and i32 %30, %2
  %120 = or i32 %46, %0
  %121 = and i32 %20, %9
  %122 = and i32 %25, %11
  %123 = and i32 %56, %41
  %124 = shl i32 %123, 1
  %125 = or i32 %20, %28
  %126 = or i32 %7, %34
  %127 = xor i32 %43, %27
  %128 = or i32 %7, %60
  %129 = shl i32 %128, 1
  %130 = xor i32 %85, %1
  %131 = and i32 %27, %22
  %132 = and i32 %46, %33
  %133 = and i32 %7, %0
  %134 = xor i32 %133, -1
  %135 = xor i32 %132, %134
  %136 = xor i32 %53, -1
  %137 = or i32 %43, %136
  %138 = or i32 %41, %60
  %139 = or i32 %96, %33
  %140 = and i32 %31, %2
  %141 = shl i32 %140, 1
  %142 = or i32 %20, %1
  %143 = xor i32 %34, %2
  %144 = and i32 %47, %33
  %145 = xor i32 %102, %1
  %146 = and i32 %41, %11
  %147 = and i32 %22, %11
  %148 = or i32 %43, %31
  %149 = or i32 %10, %2
  %150 = and i32 %7, %35
  %151 = and i32 %41, %9
  %152 = shl i32 %151, 1
  %153 = or i32 %30, %85
  %154 = or i32 %95, %10
  %155 = xor i32 %23, %34
  %156 = xor i32 %66, %0
  %157 = or i32 %65, %156
  %158 = shl i32 %157, 1
  %159 = and i32 %23, %30
  %160 = and i32 %27, %2
  %161 = xor i32 %45, %36
  %162 = or i32 %46, %10
  %163 = or i32 %136, %0
  %164 = or i32 %85, %9
  %165 = xor i32 %47, %0
  %166 = and i32 %66, %0
  %167 = or i32 %111, %166
  %168 = or i32 %47, %33
  %169 = or i32 %45, %9
  %170 = and i32 %20, %11
  %171 = xor i32 %65, -1
  %172 = xor i32 %67, %171
  %173 = or i32 %20, %30
  %174 = and i32 %20, %30
  %175 = or i32 %34, %85
  %176 = or i32 %95, %0
  %177 = and i32 %96, %0
  %178 = xor i32 %53, %0
  %179 = or i32 %71, %178
  %180 = shl i32 %179, 1
  %181 = xor i32 %8, %171
  %182 = or i32 %34, %22
  %183 = or i32 %53, %0
  %184 = or i32 %20, %60
  %185 = and i32 %20, %35
  %186 = add i32 %2, 1
  %187 = or i32 %30, %81
  %188 = shl i32 %187, 1
  %189 = or i32 %43, %60
  %190 = or i32 %34, %41
  %191 = xor i32 %71, -1
  %192 = xor i32 %72, %191
  %193 = or i32 %45, %30
  %194 = shl i32 %193, 1
  %195 = or i32 %34, %81
  %196 = or i32 %45, %1
  %197 = and i32 %58, %31
  %198 = or i32 %41, %9
  %199 = xor i32 %43, %1
  %200 = xor i32 %10, %2
  %201 = and i32 %27, %25
  %202 = and i32 %107, %1
  %203 = xor i32 %136, %0
  %204 = or i32 %45, %37
  %205 = and i32 %20, %27
  %206 = or i32 %25, %33
  %207 = shl i32 %31, 1
  %208 = or i32 %10, %41
  %209 = or i32 %34, %25
  %210 = xor i32 %71, %8
  %211 = or i32 %85, %31
  %212 = xor i32 %112, -1
  %213 = or i32 %111, %212
  %214 = xor i32 %96, %0
  %215 = shl i32 %214, 2
  %216 = xor i32 %95, %0
  %217 = shl i32 %216, 1
  %218 = or i32 %43, %9
  %219 = or i32 %96, %0
  %220 = and i32 %22, %35
  %221 = or i32 %71, %97
  %222 = or i32 %31, %2
  %223 = xor i32 %58, %34
  %224 = and i32 %56, %25
  %225 = xor i32 %178, %191
  %226 = and i32 %25, %0
  %227 = and i32 %30, %41
  %228 = and i32 %7, %11
  %229 = or i32 %136, %33
  %230 = and i32 %136, %33
  %231 = and i32 %95, %33
  %232 = and i32 %136, %0
  %233 = mul i32 %232, -19
  %234 = and i32 %95, %0
  %235 = shl i32 %234, 2
  %236 = and i32 %37, %33
  %237 = mul i32 %236, -6
  %238 = shl i32 %132, 2
  %239 = xor i32 %5, %3
  %240 = xor i32 %239, -1
  %241 = or i32 %240, %4
  %242 = and i32 %4, %3
  %243 = or i32 %14, %3
  %244 = xor i32 %243, %242
  %245 = xor i32 %4, -1
  %246 = xor i32 %3, -1
  %247 = and i32 %246, %5
  %248 = and i32 %247, %245
  %249 = or i32 %239, %245
  %250 = xor i32 %249, -1
  %251 = or i32 %248, %250
  %252 = and i32 %5, %3
  %253 = and i32 %252, %4
  %254 = or i32 %5, %3
  %255 = and i32 %254, %245
  %256 = or i32 %253, %255
  %257 = xor i32 %243, -1
  %258 = or i32 %257, %4
  %259 = and i32 %14, %3
  %260 = shl i32 %259, 1
  %261 = and i32 %14, %4
  %262 = xor i32 %261, -1
  %263 = and i32 %16, %262
  %264 = shl i32 %263, 1
  %265 = and i32 %247, %4
  %266 = or i32 %239, %4
  %267 = xor i32 %265, %266
  %268 = or i32 %242, %240
  %269 = xor i32 %254, %242
  %270 = or i32 %239, %242
  %271 = xor i32 %5, %4
  %272 = xor i32 %271, -1
  %273 = or i32 %242, %272
  %274 = or i32 %4, %3
  %275 = and i32 %274, %272
  %276 = xor i32 %259, -1
  %277 = xor i32 %276, %4
  %278 = xor i32 %254, -1
  %279 = or i32 %278, %4
  %280 = and i32 %274, %5
  %281 = and i32 %246, %4
  %282 = xor i32 %281, -1
  %283 = and i32 %239, %282
  %284 = or i32 %242, %14
  %285 = and i32 %240, %282
  %286 = or i32 %243, %245
  %287 = or i32 %276, %4
  %288 = xor i32 %281, %276
  %289 = xor i32 %243, %4
  %290 = xor i32 %16, -1
  %291 = or i32 %14, %290
  %292 = and i32 %5, %4
  %293 = xor i32 %292, %254
  %294 = xor i32 %15, -1
  %295 = or i32 %16, %294
  %296 = xor i32 %292, -1
  %297 = and i32 %296, %246
  %298 = and i32 %14, %282
  %299 = xor i32 %252, -1
  %300 = add i32 %252, 1
  %301 = xor i32 %242, -1
  %302 = and i32 %272, %301
  %303 = or i32 %271, %281
  %304 = shl i32 %303, 1
  %305 = or i32 %246, %4
  %306 = xor i32 %305, -1
  %307 = xor i32 %306, %5
  %308 = and i32 %15, %290
  %309 = shl i32 %296, 1
  %310 = xor i32 %274, -1
  %311 = or i32 %292, %310
  %312 = and i32 %271, %282
  %313 = and i32 %299, %245
  %314 = or i32 %5, %4
  %315 = xor i32 %314, %3
  %316 = or i32 %242, %257
  %317 = shl i32 %316, 1
  %318 = xor i32 %294, %3
  %319 = and i32 %274, %240
  %320 = xor i32 %253, %241
  %321 = or i32 %271, %306
  %322 = shl i32 %321, 1
  %323 = and i32 %305, %14
  %324 = or i32 %292, %278
  %325 = or i32 %271, %242
  %326 = and i32 %296, %3
  %327 = or i32 %240, %310
  %328 = or i32 %272, %310
  %329 = and i32 %239, %301
  %330 = and i32 %262, %3
  %331 = xor i32 %292, %274
  %332 = or i32 %261, %16
  %333 = or i32 %272, %290
  %334 = xor i32 %254, %4
  %335 = or i32 %271, %290
  %336 = xor i32 %262, %3
  %337 = or i32 %271, %16
  %338 = xor i32 %278, %4
  %339 = xor i32 %259, %4
  %340 = shl i32 %339, 1
  %341 = and i32 %276, %245
  %342 = xor i32 %296, %3
  %343 = xor i32 %257, %4
  %344 = and i32 %272, %246
  %345 = or i32 %239, %281
  %346 = or i32 %261, %246
  %347 = and i32 %299, %4
  %348 = and i32 %271, %305
  %349 = and i32 %16, %5
  %350 = or i32 %292, %3
  %351 = and i32 %243, %4
  %352 = xor i32 %239, %4
  %353 = xor i32 %352, -1
  %354 = or i32 %253, %353
  %355 = and i32 %305, %5
  %356 = xor i32 %292, %3
  %357 = or i32 %246, %5
  %358 = and i32 %357, %245
  %359 = or i32 %265, %358
  %360 = or i32 %299, %4
  %361 = or i32 %239, %310
  %362 = or i32 %281, %5
  %363 = and i32 %357, %4
  %364 = xor i32 %363, 2147483647
  %365 = xor i32 %364, %248
  %366 = or i32 %306, %5
  %367 = or i32 %243, %4
  %368 = and i32 %314, %16
  %369 = xor i32 %314, -1
  %370 = add i32 %314, 1
  %371 = and i32 %272, %282
  %372 = or i32 %290, %5
  %373 = and i32 %314, %3
  %374 = or i32 %369, %246
  %375 = and i32 %252, %245
  %376 = and i32 %239, %4
  %377 = or i32 %375, %376
  %378 = and i32 %240, %301
  %379 = shl i32 %378, 1
  %380 = or i32 %16, %14
  %381 = or i32 %242, %294
  %382 = or i32 %259, %245
  %383 = shl i32 %382, 1
  %384 = or i32 %240, %245
  %385 = shl i32 %274, 1
  %386 = or i32 %369, %290
  %387 = and i32 %278, %245
  %388 = mul i32 %387, -13
  %389 = and i32 %259, %245
  %390 = shl i32 %389, 1
  %391 = and i32 %278, %4
  %392 = and i32 %257, %245
  %393 = mul i32 %392, 10
  %394 = shl i32 %375, 3
  %395 = and i32 %257, %4
  %396 = add i32 %169, %28
  %397 = sub i32 %396, %138
  %398 = add i32 %397, %380
  %399 = sub i32 %398, %307
  %400 = add i32 %399, %320
  %401 = mul i32 %400, 3
  %402 = sub i32 %292, %71
  %403 = sub i32 %402, %391
  %404 = sub i32 %403, %395
  %405 = add i32 %404, %327
  %406 = mul i32 %405, 5
  %407 = sub i32 %230, %231
  %408 = mul i32 %407, 7
  %409 = add i32 %261, %48
  %410 = shl i32 %409, 2
  %411 = sub i32 -2, %56
  %412 = add i32 %411, %149
  %413 = add i32 %412, %25
  %414 = add i32 %413, %226
  %415 = add i32 %414, %224
  %416 = add i32 %415, %201
  %417 = add i32 %416, %199
  %418 = add i32 %417, %189
  %419 = add i32 %418, %183
  %420 = add i32 %419, %177
  %421 = add i32 %420, %161
  %422 = add i32 %421, %126
  %423 = add i32 %422, %109
  %424 = add i32 %423, %77
  %425 = add i32 %424, %44
  %426 = add i32 %425, %39
  %427 = add i32 %426, %14
  %428 = add i32 %427, %349
  %429 = add i32 %428, %291
  %430 = add i32 %429, %280
  %431 = add i32 %430, %99
  %432 = add i32 %431, %350
  %433 = add i32 %432, %333
  %434 = add i32 %433, %319
  %435 = add i32 %434, %283
  %436 = add i32 %435, %359
  %437 = add i32 %436, %365
  %438 = shl i32 %437, 1
  %439 = sub i32 %35, %0
  %440 = add i32 %439, %27
  %441 = add i32 %440, %11
  %442 = add i32 %441, %186
  %443 = sub i32 %442, %56
  %444 = sub i32 %443, %10
  %445 = sub i32 %444, %29
  %446 = add i32 %445, %61
  %447 = add i32 %446, %62
  %448 = sub i32 %447, %79
  %449 = sub i32 %448, %58
  %450 = add i32 %449, 1
  %451 = add i32 %450, %100
  %452 = sub i32 %451, %43
  %453 = sub i32 %452, %119
  %454 = add i32 %453, %41
  %455 = sub i32 %454, %131
  %456 = add i32 %455, %136
  %457 = add i32 %456, %143
  %458 = sub i32 %457, %53
  %459 = add i32 %458, %107
  %460 = sub i32 %459, %147
  %461 = add i32 %460, %160
  %462 = sub i32 %461, %182
  %463 = add i32 %462, %200
  %464 = sub i32 %463, %207
  %465 = sub i32 %464, %220
  %466 = add i32 %465, %222
  %467 = add i32 %466, 1
  %468 = sub i32 %467, %24
  %469 = add i32 %468, %21
  %470 = sub i32 %469, %26
  %471 = add i32 %470, %32
  %472 = sub i32 %471, %38
  %473 = add i32 %472, %40
  %474 = add i32 %473, %42
  %475 = sub i32 %474, %49
  %476 = add i32 %475, %50
  %477 = add i32 %476, %51
  %478 = sub i32 %477, %52
  %479 = add i32 %478, %54
  %480 = add i32 %479, %55
  %481 = add i32 %480, %57
  %482 = add i32 %481, %59
  %483 = sub i32 %482, %63
  %484 = sub i32 %483, %75
  %485 = sub i32 %484, %76
  %486 = add i32 %485, %78
  %487 = sub i32 %486, %80
  %488 = add i32 %487, %82
  %489 = sub i32 %488, %83
  %490 = add i32 %489, %84
  %491 = sub i32 %490, %88
  %492 = sub i32 %491, %89
  %493 = add i32 %492, %92
  %494 = sub i32 %493, %94
  %495 = add i32 %494, %101
  %496 = sub i32 %495, %103
  %497 = sub i32 %496, %104
  %498 = add i32 %497, %105
  %499 = add i32 %498, %106
  %500 = sub i32 %499, %108
  %501 = sub i32 %500, %110
  %502 = sub i32 %501, %114
  %503 = add i32 %502, %120
  %504 = add i32 %503, %121
  %505 = sub i32 %504, %122
  %506 = sub i32 %505, %125
  %507 = add i32 %506, %127
  %508 = sub i32 %507, %130
  %509 = add i32 %508, %137
  %510 = add i32 %509, %139
  %511 = sub i32 %510, %141
  %512 = sub i32 %511, %142
  %513 = add i32 %512, %144
  %514 = sub i32 %513, %145
  %515 = sub i32 %514, %146
  %516 = add i32 %515, %148
  %517 = sub i32 %516, %150
  %518 = add i32 %517, %153
  %519 = add i32 %518, %154
  %520 = sub i32 %519, %155
  %521 = add i32 %520, %159
  %522 = add i32 %521, %162
  %523 = sub i32 %522, %163
  %524 = add i32 %523, %164
  %525 = sub i32 %524, %165
  %526 = sub i32 %525, %168
  %527 = add i32 %526, %170
  %528 = add i32 %527, %173
  %529 = sub i32 %528, %174
  %530 = sub i32 %529, %175
  %531 = add i32 %530, %176
  %532 = add i32 %531, %184
  %533 = add i32 %532, %185
  %534 = add i32 %533, %190
  %535 = sub i32 %534, %72
  %536 = add i32 %535, %195
  %537 = add i32 %536, %196
  %538 = sub i32 %537, %197
  %539 = add i32 %538, %198
  %540 = sub i32 %539, %202
  %541 = sub i32 %540, %203
  %542 = add i32 %541, %204
  %543 = add i32 %542, %205
  %544 = add i32 %543, %206
  %545 = sub i32 %544, %208
  %546 = sub i32 %545, %209
  %547 = add i32 %546, %211
  %548 = sub i32 %547, %218
  %549 = sub i32 %548, %219
  %550 = add i32 %549, %223
  %551 = sub i32 %550, %227
  %552 = sub i32 %551, %228
  %553 = sub i32 %552, %229
  %554 = sub i32 %553, %4
  %555 = sub i32 %554, %68
  %556 = sub i32 %555, %70
  %557 = sub i32 %556, %73
  %558 = add i32 %557, %74
  %559 = sub i32 %558, %87
  %560 = sub i32 %559, %91
  %561 = add i32 %560, %113
  %562 = sub i32 %561, %116
  %563 = sub i32 %562, %118
  %564 = sub i32 %563, %124
  %565 = sub i32 %564, %129
  %566 = sub i32 %565, %135
  %567 = sub i32 %566, %152
  %568 = sub i32 %567, %167
  %569 = add i32 %568, %172
  %570 = sub i32 %569, %181
  %571 = sub i32 %570, %188
  %572 = add i32 %571, %192
  %573 = sub i32 %572, %194
  %574 = sub i32 %573, %210
  %575 = sub i32 %574, %213
  %576 = sub i32 %575, %215
  %577 = sub i32 %576, %217
  %578 = add i32 %577, %221
  %579 = sub i32 %578, %225
  %580 = add i32 %579, %233
  %581 = sub i32 %580, %235
  %582 = add i32 %581, %237
  %583 = sub i32 %582, %238
  %584 = sub i32 %583, %5
  %585 = sub i32 %584, %281
  %586 = add i32 %585, %242
  %587 = sub i32 %586, %158
  %588 = sub i32 %587, %180
  %589 = sub i32 %588, %284
  %590 = add i32 %589, %298
  %591 = add i32 %590, %300
  %592 = sub i32 %591, %323
  %593 = sub i32 %592, %314
  %594 = add i32 %593, 1
  %595 = sub i32 %594, %355
  %596 = sub i32 %595, %362
  %597 = add i32 %596, %366
  %598 = add i32 %597, %370
  %599 = add i32 %598, %372
  %600 = sub i32 %599, %385
  %601 = add i32 %600, %408
  %602 = sub i32 %601, %241
  %603 = add i32 %602, %244
  %604 = sub i32 %603, %258
  %605 = sub i32 %604, %260
  %606 = sub i32 %605, %268
  %607 = sub i32 %606, %269
  %608 = sub i32 %607, %270
  %609 = sub i32 %608, %273
  %610 = sub i32 %609, %275
  %611 = add i32 %610, %277
  %612 = sub i32 %611, %279
  %613 = add i32 %612, %285
  %614 = add i32 %613, %286
  %615 = add i32 %614, %287
  %616 = sub i32 %615, %288
  %617 = add i32 %616, %289
  %618 = sub i32 %617, %293
  %619 = add i32 %618, %295
  %620 = sub i32 %619, %297
  %621 = add i32 %620, %302
  %622 = add i32 %621, %308
  %623 = sub i32 %622, %309
  %624 = sub i32 %623, %311
  %625 = sub i32 %624, %312
  %626 = sub i32 %625, %313
  %627 = add i32 %626, %315
  %628 = add i32 %627, %318
  %629 = add i32 %628, %324
  %630 = add i32 %629, %325
  %631 = add i32 %630, %326
  %632 = sub i32 %631, %328
  %633 = sub i32 %632, %329
  %634 = sub i32 %633, %330
  %635 = add i32 %634, %331
  %636 = sub i32 %635, %332
  %637 = add i32 %636, %334
  %638 = sub i32 %637, %335
  %639 = sub i32 %638, %336
  %640 = add i32 %639, %337
  %641 = add i32 %640, %338
  %642 = add i32 %641, %341
  %643 = add i32 %642, %342
  %644 = sub i32 %643, %343
  %645 = add i32 %644, %344
  %646 = add i32 %645, %345
  %647 = sub i32 %646, %346
  %648 = sub i32 %647, %347
  %649 = sub i32 %648, %348
  %650 = sub i32 %649, %249
  %651 = sub i32 %650, %351
  %652 = sub i32 %651, %352
  %653 = add i32 %652, %356
  %654 = add i32 %653, %360
  %655 = add i32 %654, %361
  %656 = sub i32 %655, %367
  %657 = add i32 %656, %368
  %658 = add i32 %657, %371
  %659 = add i32 %658, %373
  %660 = add i32 %659, %374
  %661 = sub i32 %660, %381
  %662 = sub i32 %661, %384
  %663 = add i32 %662, %386
  %664 = add i32 %663, %253
  %665 = add i32 %664, %251
  %666 = sub i32 %665, %256
  %667 = sub i32 %666, %264
  %668 = sub i32 %667, %267
  %669 = sub i32 %668, %304
  %670 = sub i32 %669, %317
  %671 = sub i32 %670, %322
  %672 = sub i32 %671, %340
  %673 = sub i32 %672, %354
  %674 = add i32 %673, %377
  %675 = sub i32 %674, %379
  %676 = sub i32 %675, %383
  %677 = add i32 %676, %388
  %678 = sub i32 %677, %390
  %679 = add i32 %678, %393
  %680 = sub i32 %679, %394
  %681 = add i32 %680, %410
  %682 = add i32 %681, %406
  %683 = add i32 %682, %401
  %684 = add i32 %683, %438
  %685 = icmp eq i32 %19, %684
  %686 = select i1 %685, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %687 = tail call i32 @puts(i8* nonnull dereferenceable(1) %686)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
