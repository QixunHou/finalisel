digraph "DFG for'crackme' function" {
	Node0x206f580[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x206fc30[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x206fcf0[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x206fd60[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0x206fdd0[shape=record, label="  %7 = add i32 %3, %6"];
	Node0x206fe40[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x206feb0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x206ff20[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x206ff90[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0x2070030[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x20700d0[shape=record, label="  %13 = xor i32 %0, 2147483647"];
	Node0x2070140[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x20701b0[shape=record, label="  %15 = shl i32 %5, 1"];
	Node0x2070220[shape=record, label="  %16 = and i32 %1, %0"];
	Node0x2070290[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x2070300[shape=record, label="  %18 = add i32 %14, %0"];
	Node0x2070370[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x20703e0[shape=record, label="  %20 = sub i32 -3, %1"];
	Node0x2070450[shape=record, label="  %21 = add i32 %20, %8"];
	Node0x20704c0[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x2070530[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x20705a0[shape=record, label="  %24 = sub i32 %23, %15"];
	Node0x2070610[shape=record, label="  %25 = sub i32 %24, %17"];
	Node0x2070680[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x20706f0[shape=record, label="  %27 = icmp eq i32 %7, %26"];
	Node0x2010268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2070b90[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x2070be0[shape=record, label="  ret void"];
	Node0x206f580 -> Node0x206fc30;
	Node0x206fc30 -> Node0x206fcf0;
	Node0x206fcf0 -> Node0x206fd60;
	Node0x206fd60 -> Node0x206fdd0;
	Node0x206fdd0 -> Node0x206fe40;
	Node0x206fe40 -> Node0x206feb0;
	Node0x206feb0 -> Node0x206ff20;
	Node0x206ff20 -> Node0x206ff90;
	Node0x206ff90 -> Node0x2070030;
	Node0x2070030 -> Node0x20700d0;
	Node0x20700d0 -> Node0x2070140;
	Node0x2070140 -> Node0x20701b0;
	Node0x20701b0 -> Node0x2070220;
	Node0x2070220 -> Node0x2070290;
	Node0x2070290 -> Node0x2070300;
	Node0x2070300 -> Node0x2070370;
	Node0x2070370 -> Node0x20703e0;
	Node0x20703e0 -> Node0x2070450;
	Node0x2070450 -> Node0x20704c0;
	Node0x20704c0 -> Node0x2070530;
	Node0x2070530 -> Node0x20705a0;
	Node0x20705a0 -> Node0x2070610;
	Node0x2070610 -> Node0x2070680;
	Node0x2070680 -> Node0x20706f0;
	Node0x20706f0 -> Node0x2010268;
	Node0x2010268 -> Node0x2070b90;
	Node0x2070b90 -> Node0x2070be0;
edge [color=red]
	Node0x206fc30 -> Node0x206fcf0;
	Node0x206fcf0 -> Node0x206fd60;
	Node0x206f580 -> Node0x206fdd0;
	Node0x206fd60 -> Node0x206fdd0;
	Node0x206f580 -> Node0x206fe40;
	Node0x206feb0 -> Node0x206ff20;
	Node0x206feb0 -> Node0x206ff90;
	Node0x206ff90 -> Node0x2070030;
	Node0x20700d0 -> Node0x2070140;
	Node0x206fcf0 -> Node0x20701b0;
	Node0x2070220 -> Node0x2070290;
	Node0x2070140 -> Node0x2070300;
	Node0x2070300 -> Node0x2070370;
	Node0x20703e0 -> Node0x2070450;
	Node0x206fe40 -> Node0x2070450;
	Node0x2070450 -> Node0x20704c0;
	Node0x206ff20 -> Node0x20704c0;
	Node0x20704c0 -> Node0x2070530;
	Node0x2070030 -> Node0x2070530;
	Node0x2070530 -> Node0x20705a0;
	Node0x20701b0 -> Node0x20705a0;
	Node0x20705a0 -> Node0x2070610;
	Node0x2070290 -> Node0x2070610;
	Node0x2070610 -> Node0x2070680;
	Node0x2070370 -> Node0x2070680;
	Node0x206fdd0 -> Node0x20706f0;
	Node0x2070680 -> Node0x20706f0;
	Node0x20706f0 -> Node0x2010268;
	Node0x2010268 -> Node0x2070b90;
}
