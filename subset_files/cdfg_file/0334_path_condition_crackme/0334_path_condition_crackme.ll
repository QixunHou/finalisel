; ModuleID = '../.././c_source_file/0334_path_condition_crackme.c'
source_filename = "../.././c_source_file/0334_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = add i32 %7, 1
  %9 = xor i32 %1, -1
  %10 = and i32 %9, %2
  %11 = and i32 %10, %0
  %12 = or i32 %9, %2
  %13 = xor i32 %0, -1
  %14 = xor i32 %12, %13
  %15 = xor i32 %14, %11
  %16 = sub i32 %8, %15
  %17 = xor i32 %2, -1
  %18 = and i32 %17, %1
  %19 = or i32 %18, %0
  %20 = mul i32 %19, 5
  %21 = add i32 %16, %20
  %22 = xor i32 %4, %3
  %23 = or i32 %4, %3
  %24 = and i32 %4, %3
  %25 = xor i32 %24, -1
  %26 = xor i32 %3, -1
  %27 = shl i32 %23, 2
  %28 = xor i32 %27, -4
  %29 = and i32 %26, %4
  %30 = xor i32 %2, %1
  %31 = or i32 %30, %0
  %32 = xor i32 %31, 2147483647
  %33 = or i32 %32, %11
  %34 = or i32 %17, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %1, %0
  %37 = or i32 %36, %35
  %38 = and i32 %2, %0
  %39 = or i32 %38, %36
  %40 = or i32 %9, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %30, %41
  %43 = or i32 %35, %9
  %44 = xor i32 %30, -1
  %45 = or i32 %44, %0
  %46 = shl i32 %45, 1
  %47 = xor i32 %18, -1
  %48 = and i32 %47, %13
  %49 = and i32 %9, %0
  %50 = xor i32 %49, %47
  %51 = and i32 %44, %0
  %52 = shl i32 %51, 1
  %53 = or i32 %2, %1
  %54 = xor i32 %38, %53
  %55 = or i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %1
  %58 = or i32 %38, %9
  %59 = or i32 %1, %0
  %60 = and i32 %12, %13
  %61 = or i32 %11, %60
  %62 = xor i32 %49, -1
  %63 = xor i32 %62, %2
  %64 = and i32 %10, %13
  %65 = and i32 %12, %0
  %66 = or i32 %64, %65
  %67 = or i32 %17, %1
  %68 = and i32 %67, %13
  %69 = xor i32 %59, -1
  %70 = xor i32 %2, %0
  %71 = or i32 %70, %69
  %72 = and i32 %2, %1
  %73 = and i32 %72, %0
  %74 = and i32 %30, %13
  %75 = or i32 %73, %74
  %76 = and i32 %44, %13
  %77 = shl i32 %76, 1
  %78 = and i32 %17, %0
  %79 = xor i32 %72, -1
  %80 = xor i32 %78, %79
  %81 = and i32 %40, %44
  %82 = xor i32 %36, -1
  %83 = or i32 %70, %82
  %84 = or i32 %35, %82
  %85 = shl i32 %84, 1
  %86 = or i32 %78, %9
  %87 = and i32 %59, %44
  %88 = xor i32 %56, %1
  %89 = xor i32 %70, -1
  %90 = and i32 %89, %9
  %91 = xor i32 %38, -1
  %92 = xor i32 %91, %1
  %93 = xor i32 %53, %0
  %94 = or i32 %73, %93
  %95 = xor i32 %34, %1
  %96 = xor i32 %78, -1
  %97 = and i32 %96, %1
  %98 = and i32 %55, %82
  %99 = xor i32 %30, %0
  %100 = or i32 %11, %99
  %101 = shl i32 %100, 2
  %102 = and i32 %96, %9
  %103 = xor i32 %96, %1
  %104 = or i32 %69, %2
  %105 = or i32 %36, %17
  %106 = and i32 %30, %59
  %107 = xor i32 %99, -1
  %108 = or i32 %73, %107
  %109 = shl i32 %69, 1
  %110 = and i32 %36, %91
  %111 = xor i32 %44, %0
  %112 = and i32 %72, %13
  %113 = and i32 %53, %0
  %114 = or i32 %112, %113
  %115 = and i32 %36, %96
  %116 = and i32 %70, %59
  %117 = and i32 %79, %13
  %118 = shl i32 %117, 1
  %119 = and i32 %89, %1
  %120 = xor i32 %67, -1
  %121 = add i32 %67, 1
  %122 = and i32 %30, %62
  %123 = shl i32 %34, 1
  %124 = add i32 %40, 1
  %125 = and i32 %1, %0
  %126 = xor i32 %125, -1
  %127 = and i32 %30, %126
  %128 = xor i32 %73, -1
  %129 = xor i32 %93, %128
  %130 = or i32 %89, %9
  %131 = and i32 %40, %17
  %132 = or i32 %53, %0
  %133 = or i32 %30, %13
  %134 = xor i32 %64, %133
  %135 = or i32 %38, %41
  %136 = or i32 %70, %41
  %137 = and i32 %62, %2
  %138 = or i32 %36, %89
  %139 = and i32 %96, %82
  %140 = xor i32 %38, %47
  %141 = and i32 %55, %1
  %142 = and i32 %53, %13
  %143 = xor i32 %142, %128
  %144 = and i32 %47, %0
  %145 = shl i32 %144, 1
  %146 = xor i32 %11, %107
  %147 = xor i32 %38, %1
  %148 = or i32 %125, %44
  %149 = xor i32 %53, -1
  %150 = or i32 %38, %149
  %151 = or i32 %38, %69
  %152 = or i32 %125, %2
  %153 = xor i32 %18, %0
  %154 = xor i32 %35, %1
  %155 = xor i32 %55, %1
  %156 = or i32 %49, %17
  %157 = or i32 %17, %69
  %158 = or i32 %120, %0
  %159 = or i32 %30, %69
  %160 = xor i32 %78, %1
  %161 = or i32 %78, %120
  %162 = or i32 %70, %36
  %163 = and i32 %55, %36
  %164 = shl i32 %163, 1
  %165 = or i32 %49, %89
  %166 = xor i32 %41, %2
  %167 = and i32 %36, %89
  %168 = xor i32 %11, %31
  %169 = xor i32 %67, %0
  %170 = shl i32 %169, 1
  %171 = or i32 %78, %1
  %172 = and i32 %79, %0
  %173 = or i32 %72, %49
  %174 = shl i32 %173, 1
  %175 = xor i32 %125, %2
  %176 = or i32 %125, %89
  %177 = and i32 %91, %82
  %178 = or i32 %149, %0
  %179 = shl i32 %178, 2
  %180 = or i32 %125, %35
  %181 = or i32 %17, %41
  %182 = shl i32 %181, 1
  %183 = or i32 %18, %49
  %184 = and i32 %55, %9
  %185 = or i32 %89, %41
  %186 = or i32 %30, %125
  %187 = or i32 %89, %1
  %188 = xor i32 %40, %2
  %189 = xor i32 %113, -1
  %190 = xor i32 %112, %189
  %191 = xor i32 %65, 2147483647
  %192 = xor i32 %191, %64
  %193 = shl i32 %192, 1
  %194 = xor i32 %78, %67
  %195 = or i32 %73, %142
  %196 = and i32 %36, %2
  %197 = and i32 %70, %40
  %198 = or i32 %47, %0
  %199 = or i32 %41, %2
  %200 = and i32 %17, %126
  %201 = and i32 %89, %126
  %202 = or i32 %79, %13
  %203 = xor i32 %120, %0
  %204 = or i32 %49, %2
  %205 = and i32 %34, %36
  %206 = shl i32 %205, 1
  %207 = add i32 %70, 1
  %208 = or i32 %49, %44
  %209 = or i32 %35, %1
  %210 = or i32 %125, %17
  %211 = add i32 %36, 1
  %212 = and i32 %70, %62
  %213 = or i32 %56, %9
  %214 = xor i32 %38, %40
  %215 = or i32 %78, %72
  %216 = and i32 %34, %9
  %217 = xor i32 %38, %59
  %218 = xor i32 %47, %0
  %219 = or i32 %36, %56
  %220 = xor i32 %53, %125
  %221 = shl i32 %220, 1
  %222 = or i32 %78, %36
  %223 = and i32 %82, %2
  %224 = or i32 %79, %0
  %225 = shl i32 %224, 1
  %226 = or i32 %89, %82
  %227 = or i32 %125, %56
  %228 = xor i32 %59, %2
  %229 = or i32 %44, %69
  %230 = or i32 %149, %13
  %231 = and i32 %44, %62
  %232 = or i32 %72, %13
  %233 = and i32 %70, %1
  %234 = or i32 %56, %82
  %235 = and i32 %59, %17
  %236 = or i32 %82, %2
  %237 = and i32 %30, %0
  %238 = or i32 %44, %13
  %239 = shl i32 %238, 1
  %240 = or i32 %70, %49
  %241 = and i32 %89, %62
  %242 = or i32 %38, %82
  %243 = or i32 %30, %49
  %244 = or i32 %70, %9
  %245 = shl i32 %244, 1
  %246 = shl i32 %56, 1
  %247 = or i32 %67, %13
  %248 = xor i32 %126, %2
  %249 = and i32 %59, %89
  %250 = and i32 %17, %82
  %251 = and i32 %89, %82
  %252 = and i32 %40, %2
  %253 = xor i32 %149, %0
  %254 = and i32 %91, %1
  %255 = xor i32 %69, %2
  %256 = xor i32 %55, %125
  %257 = and i32 %149, %13
  %258 = and i32 %18, %13
  %259 = mul i32 %258, 6
  %260 = and i32 %149, %0
  %261 = shl i32 %260, 1
  %262 = and i32 %18, %0
  %263 = and i32 %120, %13
  %264 = and i32 %120, %0
  %265 = mul i32 %264, -7
  %266 = add i32 %104, %131
  %267 = sub i32 %266, %198
  %268 = add i32 %267, %187
  %269 = sub i32 %268, %186
  %270 = sub i32 %269, %29
  %271 = mul i32 %270, 3
  %272 = sub i32 %48, %73
  %273 = add i32 %272, %39
  %274 = sub i32 %273, %7
  %275 = add i32 %274, %108
  %276 = mul i32 %275, 5
  %277 = add i32 %263, %262
  %278 = mul i32 %277, -9
  %279 = add i32 %112, %257
  %280 = mul i32 %279, -23
  %281 = add i32 %86, %18
  %282 = shl i32 %281, 2
  %283 = add i32 %252, -1
  %284 = add i32 %283, %55
  %285 = add i32 %284, %3
  %286 = add i32 %285, %254
  %287 = add i32 %286, %243
  %288 = add i32 %287, %241
  %289 = add i32 %288, %233
  %290 = add i32 %289, %218
  %291 = add i32 %290, %213
  %292 = add i32 %291, %172
  %293 = add i32 %292, %148
  %294 = add i32 %293, %139
  %295 = add i32 %294, %138
  %296 = add i32 %295, %119
  %297 = add i32 %296, %99
  %298 = add i32 %297, %195
  %299 = add i32 %298, %61
  %300 = add i32 %299, %22
  %301 = add i32 %300, %33
  %302 = shl i32 %301, 1
  %303 = sub i32 -5, %49
  %304 = sub i32 %303, %59
  %305 = sub i32 %304, %36
  %306 = add i32 %305, %124
  %307 = add i32 %306, %40
  %308 = add i32 %307, %211
  %309 = add i32 %308, %26
  %310 = add i32 %309, %30
  %311 = sub i32 %310, %63
  %312 = add i32 %311, %105
  %313 = sub i32 %312, %109
  %314 = add i32 %313, %35
  %315 = add i32 %314, %121
  %316 = sub i32 %315, %137
  %317 = sub i32 %316, %53
  %318 = add i32 %317, %96
  %319 = add i32 %318, %152
  %320 = sub i32 %319, %156
  %321 = sub i32 %320, %157
  %322 = sub i32 %321, %166
  %323 = sub i32 %322, %175
  %324 = add i32 %323, %188
  %325 = sub i32 %324, %196
  %326 = sub i32 %325, %199
  %327 = add i32 %326, %200
  %328 = sub i32 %327, %204
  %329 = add i32 %328, %207
  %330 = sub i32 %329, %210
  %331 = add i32 %330, %223
  %332 = sub i32 %331, %228
  %333 = sub i32 %332, %235
  %334 = add i32 %333, %236
  %335 = sub i32 %334, %70
  %336 = add i32 %335, %248
  %337 = add i32 %336, %47
  %338 = sub i32 %337, %250
  %339 = add i32 %338, %255
  %340 = sub i32 %339, %4
  %341 = add i32 %340, %6
  %342 = add i32 %341, %37
  %343 = sub i32 %342, %42
  %344 = sub i32 %343, %43
  %345 = add i32 %344, %50
  %346 = sub i32 %345, %54
  %347 = add i32 %346, %57
  %348 = sub i32 %347, %58
  %349 = add i32 %348, %68
  %350 = add i32 %349, %71
  %351 = add i32 %350, %80
  %352 = add i32 %351, %81
  %353 = add i32 %352, %83
  %354 = sub i32 %353, %31
  %355 = add i32 %354, %87
  %356 = sub i32 %355, %88
  %357 = sub i32 %356, %90
  %358 = sub i32 %357, %92
  %359 = add i32 %358, %95
  %360 = sub i32 %359, %97
  %361 = sub i32 %360, %98
  %362 = add i32 %361, %93
  %363 = add i32 %362, %102
  %364 = sub i32 %363, %103
  %365 = add i32 %364, %106
  %366 = add i32 %365, %74
  %367 = sub i32 %366, %110
  %368 = sub i32 %367, %111
  %369 = add i32 %368, %115
  %370 = add i32 %369, %116
  %371 = add i32 %370, %122
  %372 = sub i32 %371, %123
  %373 = sub i32 %372, %127
  %374 = sub i32 %373, %130
  %375 = add i32 %374, %132
  %376 = add i32 %375, %135
  %377 = sub i32 %376, %136
  %378 = add i32 %377, %140
  %379 = add i32 %378, %141
  %380 = sub i32 %379, %142
  %381 = sub i32 %380, %147
  %382 = add i32 %381, %150
  %383 = add i32 %382, %151
  %384 = sub i32 %383, %153
  %385 = sub i32 %384, %154
  %386 = sub i32 %385, %155
  %387 = sub i32 %386, %158
  %388 = add i32 %387, %159
  %389 = sub i32 %388, %160
  %390 = add i32 %389, %161
  %391 = add i32 %390, %162
  %392 = add i32 %391, %165
  %393 = sub i32 %392, %167
  %394 = sub i32 %393, %171
  %395 = add i32 %394, %176
  %396 = add i32 %395, %177
  %397 = sub i32 %396, %180
  %398 = sub i32 %397, %182
  %399 = add i32 %398, %183
  %400 = sub i32 %399, %184
  %401 = add i32 %400, %185
  %402 = sub i32 %401, %194
  %403 = sub i32 %402, %197
  %404 = add i32 %403, %201
  %405 = add i32 %404, %202
  %406 = add i32 %405, %203
  %407 = sub i32 %406, %208
  %408 = sub i32 %407, %209
  %409 = sub i32 %408, %212
  %410 = sub i32 %409, %214
  %411 = add i32 %410, %215
  %412 = add i32 %411, %216
  %413 = add i32 %412, %217
  %414 = sub i32 %413, %219
  %415 = add i32 %414, %222
  %416 = sub i32 %415, %226
  %417 = sub i32 %416, %227
  %418 = add i32 %417, %229
  %419 = sub i32 %418, %230
  %420 = sub i32 %419, %231
  %421 = sub i32 %420, %232
  %422 = sub i32 %421, %234
  %423 = sub i32 %422, %237
  %424 = add i32 %423, %240
  %425 = add i32 %424, %242
  %426 = sub i32 %425, %246
  %427 = add i32 %426, %247
  %428 = sub i32 %427, %249
  %429 = add i32 %428, %251
  %430 = add i32 %429, %253
  %431 = add i32 %430, %256
  %432 = sub i32 %431, %23
  %433 = add i32 %432, %25
  %434 = sub i32 %433, %24
  %435 = sub i32 %434, %46
  %436 = sub i32 %435, %52
  %437 = add i32 %436, %66
  %438 = sub i32 %437, %75
  %439 = sub i32 %438, %77
  %440 = sub i32 %439, %85
  %441 = add i32 %440, %94
  %442 = sub i32 %441, %114
  %443 = sub i32 %442, %118
  %444 = add i32 %443, %129
  %445 = add i32 %444, %134
  %446 = add i32 %445, %143
  %447 = sub i32 %446, %145
  %448 = sub i32 %447, %146
  %449 = sub i32 %448, %164
  %450 = add i32 %449, %168
  %451 = sub i32 %450, %170
  %452 = sub i32 %451, %174
  %453 = sub i32 %452, %179
  %454 = sub i32 %453, %190
  %455 = sub i32 %454, %206
  %456 = sub i32 %455, %221
  %457 = sub i32 %456, %225
  %458 = sub i32 %457, %239
  %459 = sub i32 %458, %245
  %460 = add i32 %459, %259
  %461 = sub i32 %460, %261
  %462 = add i32 %461, %265
  %463 = sub i32 %462, %101
  %464 = add i32 %463, %278
  %465 = add i32 %464, %280
  %466 = add i32 %465, %282
  %467 = sub i32 %466, %28
  %468 = sub i32 %467, %193
  %469 = add i32 %468, %276
  %470 = add i32 %469, %271
  %471 = add i32 %470, %302
  %472 = icmp eq i32 %21, %471
  %473 = select i1 %472, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %474 = tail call i32 @puts(i8* nonnull dereferenceable(1) %473)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
