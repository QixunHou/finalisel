digraph "DFG for'main' function" {
	Node0x7a1328[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x7a13a8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x7a1438[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x7a1498[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x7a1548[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x7a1978[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x7a1a58[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x7a1b58[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x7a1c18[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x7a1cc8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x7a1d88[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x7a1e38[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x79c8a0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x7a2038[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x7a2fa8[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x7a3618[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x7a3678[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x7a36f0[shape=record, label="  %14 = and i32 %12, %11"];
	Node0x7a3760[shape=record, label="  %15 = and i32 %13, %10"];
	Node0x7a37d0[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x7a3840[shape=record, label="  %17 = sub i32 %16, %14"];
	Node0x7a38b0[shape=record, label="  %18 = xor i32 %12, -1"];
	Node0x7a3920[shape=record, label="  %19 = xor i32 %11, -1"];
	Node0x7a3990[shape=record, label="  %20 = and i32 %11, %18"];
	Node0x7a3a00[shape=record, label="  %21 = xor i32 %10, -1"];
	Node0x7a3a70[shape=record, label="  %22 = and i32 %13, %21"];
	Node0x7a3ae0[shape=record, label="  %23 = xor i32 %22, -1"];
	Node0x7a3b50[shape=record, label="  %24 = shl i32 %13, 1"];
	Node0x7a3bc0[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x7a3c30[shape=record, label="  %26 = or i32 %13, %10"];
	Node0x7a3ca0[shape=record, label="  %27 = shl i32 %26, 2"];
	Node0x7a3d10[shape=record, label="  %28 = or i32 %27, 3"];
	Node0x7a3d80[shape=record, label="  %29 = shl i32 %22, 1"];
	Node0x7a3df0[shape=record, label="  %30 = mul i32 %10, -3"];
	Node0x7a3e60[shape=record, label="  %31 = sub i32 %19, %10"];
	Node0x7a3ed0[shape=record, label="  %32 = add i32 %31, %30"];
	Node0x7a3f40[shape=record, label="  %33 = add i32 %32, %20"];
	Node0x7a3fb0[shape=record, label="  %34 = add i32 %33, %13"];
	Node0x7a4020[shape=record, label="  %35 = add i32 %34, %23"];
	Node0x7a4090[shape=record, label="  %36 = add i32 %35, %25"];
	Node0x7a4100[shape=record, label="  %37 = sub i32 %36, %29"];
	Node0x7a4170[shape=record, label="  %38 = add i32 %37, %28"];
	Node0x7a41e0[shape=record, label="  %39 = icmp eq i32 %17, %38"];
	Node0x7418b8[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7a4270[shape=record, label="  %41 = call i32 @puts(i8* nonnull dereferenceable(1) %40) #5"];
	Node0x7a4518[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x7a4678[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x7a4788[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x7a4898[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x7a4958[shape=record, label="  ret i32 0"];
	Node0x7a1328 -> Node0x7a13a8;
	Node0x7a13a8 -> Node0x7a1438;
	Node0x7a1438 -> Node0x7a1498;
	Node0x7a1498 -> Node0x7a1548;
	Node0x7a1548 -> Node0x7a1978;
	Node0x7a1978 -> Node0x7a1a58;
	Node0x7a1a58 -> Node0x7a1b58;
	Node0x7a1b58 -> Node0x7a1c18;
	Node0x7a1c18 -> Node0x7a1cc8;
	Node0x7a1cc8 -> Node0x7a1d88;
	Node0x7a1d88 -> Node0x7a1e38;
	Node0x7a1e38 -> Node0x79c8a0;
	Node0x79c8a0 -> Node0x7a2038;
	Node0x7a2038 -> Node0x7a2fa8;
	Node0x7a2fa8 -> Node0x7a3618;
	Node0x7a3618 -> Node0x7a3678;
	Node0x7a3678 -> Node0x7a36f0;
	Node0x7a36f0 -> Node0x7a3760;
	Node0x7a3760 -> Node0x7a37d0;
	Node0x7a37d0 -> Node0x7a3840;
	Node0x7a3840 -> Node0x7a38b0;
	Node0x7a38b0 -> Node0x7a3920;
	Node0x7a3920 -> Node0x7a3990;
	Node0x7a3990 -> Node0x7a3a00;
	Node0x7a3a00 -> Node0x7a3a70;
	Node0x7a3a70 -> Node0x7a3ae0;
	Node0x7a3ae0 -> Node0x7a3b50;
	Node0x7a3b50 -> Node0x7a3bc0;
	Node0x7a3bc0 -> Node0x7a3c30;
	Node0x7a3c30 -> Node0x7a3ca0;
	Node0x7a3ca0 -> Node0x7a3d10;
	Node0x7a3d10 -> Node0x7a3d80;
	Node0x7a3d80 -> Node0x7a3df0;
	Node0x7a3df0 -> Node0x7a3e60;
	Node0x7a3e60 -> Node0x7a3ed0;
	Node0x7a3ed0 -> Node0x7a3f40;
	Node0x7a3f40 -> Node0x7a3fb0;
	Node0x7a3fb0 -> Node0x7a4020;
	Node0x7a4020 -> Node0x7a4090;
	Node0x7a4090 -> Node0x7a4100;
	Node0x7a4100 -> Node0x7a4170;
	Node0x7a4170 -> Node0x7a41e0;
	Node0x7a41e0 -> Node0x7418b8;
	Node0x7418b8 -> Node0x7a4270;
	Node0x7a4270 -> Node0x7a4518;
	Node0x7a4518 -> Node0x7a4678;
	Node0x7a4678 -> Node0x7a4788;
	Node0x7a4788 -> Node0x7a4898;
	Node0x7a4898 -> Node0x7a4958;
edge [color=red]
	Node0x7a1328 -> Node0x7a1548;
	Node0x7a1548 -> Node0x7a1978;
	Node0x7a13a8 -> Node0x7a1a58;
	Node0x7a1a58 -> Node0x7a1b58;
	Node0x7a1438 -> Node0x7a1c18;
	Node0x7a1c18 -> Node0x7a1cc8;
	Node0x7a1498 -> Node0x7a1d88;
	Node0x7a1d88 -> Node0x7a1e38;
	Node0x7a1328 -> Node0x79c8a0;
	Node0x7a13a8 -> Node0x79c8a0;
	Node0x7a1438 -> Node0x79c8a0;
	Node0x7a1498 -> Node0x79c8a0;
	Node0x7a1328 -> Node0x7a2038;
	Node0x7a13a8 -> Node0x7a2fa8;
	Node0x7a1438 -> Node0x7a3618;
	Node0x7a1498 -> Node0x7a3678;
	Node0x7a3618 -> Node0x7a36f0;
	Node0x7a2fa8 -> Node0x7a36f0;
	Node0x7a3678 -> Node0x7a3760;
	Node0x7a2038 -> Node0x7a3760;
	Node0x7a3760 -> Node0x7a37d0;
	Node0x7a37d0 -> Node0x7a3840;
	Node0x7a36f0 -> Node0x7a3840;
	Node0x7a3618 -> Node0x7a38b0;
	Node0x7a2fa8 -> Node0x7a3920;
	Node0x7a2fa8 -> Node0x7a3990;
	Node0x7a38b0 -> Node0x7a3990;
	Node0x7a2038 -> Node0x7a3a00;
	Node0x7a3678 -> Node0x7a3a70;
	Node0x7a3a00 -> Node0x7a3a70;
	Node0x7a3a70 -> Node0x7a3ae0;
	Node0x7a3678 -> Node0x7a3b50;
	Node0x7a3b50 -> Node0x7a3bc0;
	Node0x7a3678 -> Node0x7a3c30;
	Node0x7a2038 -> Node0x7a3c30;
	Node0x7a3c30 -> Node0x7a3ca0;
	Node0x7a3ca0 -> Node0x7a3d10;
	Node0x7a3a70 -> Node0x7a3d80;
	Node0x7a2038 -> Node0x7a3df0;
	Node0x7a3920 -> Node0x7a3e60;
	Node0x7a2038 -> Node0x7a3e60;
	Node0x7a3e60 -> Node0x7a3ed0;
	Node0x7a3df0 -> Node0x7a3ed0;
	Node0x7a3ed0 -> Node0x7a3f40;
	Node0x7a3990 -> Node0x7a3f40;
	Node0x7a3f40 -> Node0x7a3fb0;
	Node0x7a3678 -> Node0x7a3fb0;
	Node0x7a3fb0 -> Node0x7a4020;
	Node0x7a3ae0 -> Node0x7a4020;
	Node0x7a4020 -> Node0x7a4090;
	Node0x7a3bc0 -> Node0x7a4090;
	Node0x7a4090 -> Node0x7a4100;
	Node0x7a3d80 -> Node0x7a4100;
	Node0x7a4100 -> Node0x7a4170;
	Node0x7a3d10 -> Node0x7a4170;
	Node0x7a3840 -> Node0x7a41e0;
	Node0x7a4170 -> Node0x7a41e0;
	Node0x7a41e0 -> Node0x7418b8;
	Node0x7418b8 -> Node0x7a4270;
	Node0x7a1d88 -> Node0x7a4518;
	Node0x7a1c18 -> Node0x7a4678;
	Node0x7a1a58 -> Node0x7a4788;
	Node0x7a1548 -> Node0x7a4898;
}
