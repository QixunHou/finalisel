digraph "DFG for'crackme' function" {
	Node0x79f870[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x79f8e0[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x79ff60[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x79ffd0[shape=record, label="  %8 = sub i32 %7, %5"];
	Node0x7a0040[shape=record, label="  %9 = xor i32 %2, -1"];
	Node0x7a00b0[shape=record, label="  %10 = xor i32 %1, -1"];
	Node0x7a0120[shape=record, label="  %11 = and i32 %9, %1"];
	Node0x7a0190[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0x7a0200[shape=record, label="  %13 = and i32 %12, %3"];
	Node0x7a0270[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x7a0310[shape=record, label="  %15 = shl i32 %3, 1"];
	Node0x7a03b0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x7a0420[shape=record, label="  %17 = or i32 %3, %0"];
	Node0x7a04c0[shape=record, label="  %18 = shl i32 %17, 2"];
	Node0x7a0560[shape=record, label="  %19 = or i32 %18, 3"];
	Node0x7a05d0[shape=record, label="  %20 = shl i32 %13, 1"];
	Node0x7a0670[shape=record, label="  %21 = mul i32 %0, -3"];
	Node0x7a06e0[shape=record, label="  %22 = sub i32 %10, %0"];
	Node0x7a0750[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x7a07c0[shape=record, label="  %24 = add i32 %23, %3"];
	Node0x7a0830[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x7a08a0[shape=record, label="  %26 = add i32 %25, %16"];
	Node0x7a0910[shape=record, label="  %27 = sub i32 %26, %20"];
	Node0x7a0980[shape=record, label="  %28 = add i32 %27, %19"];
	Node0x7a09f0[shape=record, label="  %29 = add i32 %28, %21"];
	Node0x7a0a60[shape=record, label="  %30 = icmp eq i32 %8, %29"];
	Node0x740268[shape=record, label="  %31 = select i1 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7a0f00[shape=record, label="  %32 = tail call i32 @puts(i8* nonnull dereferenceable(1) %31)"];
	Node0x7a1160[shape=record, label="  ret void"];
	Node0x79f870 -> Node0x79f8e0;
	Node0x79f8e0 -> Node0x79ff60;
	Node0x79ff60 -> Node0x79ffd0;
	Node0x79ffd0 -> Node0x7a0040;
	Node0x7a0040 -> Node0x7a00b0;
	Node0x7a00b0 -> Node0x7a0120;
	Node0x7a0120 -> Node0x7a0190;
	Node0x7a0190 -> Node0x7a0200;
	Node0x7a0200 -> Node0x7a0270;
	Node0x7a0270 -> Node0x7a0310;
	Node0x7a0310 -> Node0x7a03b0;
	Node0x7a03b0 -> Node0x7a0420;
	Node0x7a0420 -> Node0x7a04c0;
	Node0x7a04c0 -> Node0x7a0560;
	Node0x7a0560 -> Node0x7a05d0;
	Node0x7a05d0 -> Node0x7a0670;
	Node0x7a0670 -> Node0x7a06e0;
	Node0x7a06e0 -> Node0x7a0750;
	Node0x7a0750 -> Node0x7a07c0;
	Node0x7a07c0 -> Node0x7a0830;
	Node0x7a0830 -> Node0x7a08a0;
	Node0x7a08a0 -> Node0x7a0910;
	Node0x7a0910 -> Node0x7a0980;
	Node0x7a0980 -> Node0x7a09f0;
	Node0x7a09f0 -> Node0x7a0a60;
	Node0x7a0a60 -> Node0x740268;
	Node0x740268 -> Node0x7a0f00;
	Node0x7a0f00 -> Node0x7a1160;
edge [color=red]
	Node0x79f8e0 -> Node0x79ff60;
	Node0x79ff60 -> Node0x79ffd0;
	Node0x79f870 -> Node0x79ffd0;
	Node0x7a0040 -> Node0x7a0120;
	Node0x7a0190 -> Node0x7a0200;
	Node0x7a0200 -> Node0x7a0270;
	Node0x7a0310 -> Node0x7a03b0;
	Node0x7a0420 -> Node0x7a04c0;
	Node0x7a04c0 -> Node0x7a0560;
	Node0x7a0200 -> Node0x7a05d0;
	Node0x7a00b0 -> Node0x7a06e0;
	Node0x7a06e0 -> Node0x7a0750;
	Node0x7a0120 -> Node0x7a0750;
	Node0x7a0750 -> Node0x7a07c0;
	Node0x7a07c0 -> Node0x7a0830;
	Node0x7a0270 -> Node0x7a0830;
	Node0x7a0830 -> Node0x7a08a0;
	Node0x7a03b0 -> Node0x7a08a0;
	Node0x7a08a0 -> Node0x7a0910;
	Node0x7a05d0 -> Node0x7a0910;
	Node0x7a0910 -> Node0x7a0980;
	Node0x7a0560 -> Node0x7a0980;
	Node0x7a0980 -> Node0x7a09f0;
	Node0x7a0670 -> Node0x7a09f0;
	Node0x79ffd0 -> Node0x7a0a60;
	Node0x7a09f0 -> Node0x7a0a60;
	Node0x7a0a60 -> Node0x740268;
	Node0x740268 -> Node0x7a0f00;
}
