digraph "DFG for'crackme' function" {
	Node0x1cb3570[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1cb35e0[shape=record, label="  %4 = sub i32 %0, %3"];
	Node0x1cb36a0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x1cb3d20[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1cb3d90[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x1cb3e00[shape=record, label="  %8 = or i32 %6, %0"];
	Node0x1cb3ea0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1cb3f10[shape=record, label="  %10 = shl i32 %6, 1"];
	Node0x1cb3fb0[shape=record, label="  %11 = shl i32 %5, 2"];
	Node0x1cb4050[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1cb40f0[shape=record, label="  %13 = xor i32 %9, -2"];
	Node0x1cb4160[shape=record, label="  %14 = shl i32 %7, 2"];
	Node0x1cb41d0[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x1cb4240[shape=record, label="  %16 = shl i32 %15, 1"];
	Node0x1cb42b0[shape=record, label="  %17 = sub i32 %1, %0"];
	Node0x1cb4320[shape=record, label="  %18 = sub i32 %17, %3"];
	Node0x1cb4390[shape=record, label="  %19 = add i32 %18, %5"];
	Node0x1cb4400[shape=record, label="  %20 = add i32 %19, %7"];
	Node0x1cb4470[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0x1cb44e0[shape=record, label="  %22 = sub i32 %21, %9"];
	Node0x1cb4550[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x1cb45c0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x1cb4630[shape=record, label="  %25 = add i32 %24, %12"];
	Node0x1cb46a0[shape=record, label="  %26 = sub i32 %25, %13"];
	Node0x1cb4710[shape=record, label="  %27 = icmp eq i32 %4, %26"];
	Node0x1c54268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1cb4bb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1cb4c00[shape=record, label="  ret void"];
	Node0x1cb3570 -> Node0x1cb35e0;
	Node0x1cb35e0 -> Node0x1cb36a0;
	Node0x1cb36a0 -> Node0x1cb3d20;
	Node0x1cb3d20 -> Node0x1cb3d90;
	Node0x1cb3d90 -> Node0x1cb3e00;
	Node0x1cb3e00 -> Node0x1cb3ea0;
	Node0x1cb3ea0 -> Node0x1cb3f10;
	Node0x1cb3f10 -> Node0x1cb3fb0;
	Node0x1cb3fb0 -> Node0x1cb4050;
	Node0x1cb4050 -> Node0x1cb40f0;
	Node0x1cb40f0 -> Node0x1cb4160;
	Node0x1cb4160 -> Node0x1cb41d0;
	Node0x1cb41d0 -> Node0x1cb4240;
	Node0x1cb4240 -> Node0x1cb42b0;
	Node0x1cb42b0 -> Node0x1cb4320;
	Node0x1cb4320 -> Node0x1cb4390;
	Node0x1cb4390 -> Node0x1cb4400;
	Node0x1cb4400 -> Node0x1cb4470;
	Node0x1cb4470 -> Node0x1cb44e0;
	Node0x1cb44e0 -> Node0x1cb4550;
	Node0x1cb4550 -> Node0x1cb45c0;
	Node0x1cb45c0 -> Node0x1cb4630;
	Node0x1cb4630 -> Node0x1cb46a0;
	Node0x1cb46a0 -> Node0x1cb4710;
	Node0x1cb4710 -> Node0x1c54268;
	Node0x1c54268 -> Node0x1cb4bb0;
	Node0x1cb4bb0 -> Node0x1cb4c00;
edge [color=red]
	Node0x1cb3570 -> Node0x1cb35e0;
	Node0x1cb3d20 -> Node0x1cb3d90;
	Node0x1cb3d20 -> Node0x1cb3e00;
	Node0x1cb3e00 -> Node0x1cb3ea0;
	Node0x1cb3d20 -> Node0x1cb3f10;
	Node0x1cb36a0 -> Node0x1cb3fb0;
	Node0x1cb3fb0 -> Node0x1cb4050;
	Node0x1cb3ea0 -> Node0x1cb40f0;
	Node0x1cb3d90 -> Node0x1cb4160;
	Node0x1cb41d0 -> Node0x1cb4240;
	Node0x1cb42b0 -> Node0x1cb4320;
	Node0x1cb3570 -> Node0x1cb4320;
	Node0x1cb4320 -> Node0x1cb4390;
	Node0x1cb36a0 -> Node0x1cb4390;
	Node0x1cb4390 -> Node0x1cb4400;
	Node0x1cb3d90 -> Node0x1cb4400;
	Node0x1cb4400 -> Node0x1cb4470;
	Node0x1cb3f10 -> Node0x1cb4470;
	Node0x1cb4470 -> Node0x1cb44e0;
	Node0x1cb3ea0 -> Node0x1cb44e0;
	Node0x1cb44e0 -> Node0x1cb4550;
	Node0x1cb4160 -> Node0x1cb4550;
	Node0x1cb4550 -> Node0x1cb45c0;
	Node0x1cb4240 -> Node0x1cb45c0;
	Node0x1cb45c0 -> Node0x1cb4630;
	Node0x1cb4050 -> Node0x1cb4630;
	Node0x1cb4630 -> Node0x1cb46a0;
	Node0x1cb40f0 -> Node0x1cb46a0;
	Node0x1cb35e0 -> Node0x1cb4710;
	Node0x1cb46a0 -> Node0x1cb4710;
	Node0x1cb4710 -> Node0x1c54268;
	Node0x1c54268 -> Node0x1cb4bb0;
}
