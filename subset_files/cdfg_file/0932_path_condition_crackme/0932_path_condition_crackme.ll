; ModuleID = '../.././c_source_file/0932_path_condition_crackme.c'
source_filename = "../.././c_source_file/0932_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %2, %1
  %10 = or i32 %9, %8
  %11 = or i32 %4, %3
  %12 = xor i32 %11, -1
  %13 = or i32 %12, %5
  %14 = add i32 %13, %10
  %15 = xor i32 %4, -1
  %16 = xor i32 %5, %3
  %17 = xor i32 %16, -1
  %18 = and i32 %17, %15
  %19 = add i32 %14, %18
  %20 = sub i32 0, %19
  %21 = and i32 %7, %2
  %22 = and i32 %21, %0
  %23 = or i32 %7, %2
  %24 = xor i32 %23, %0
  %25 = or i32 %22, %24
  %26 = xor i32 %0, -1
  %27 = and i32 %2, %1
  %28 = and i32 %9, %0
  %29 = xor i32 %27, -1
  %30 = or i32 %29, %0
  %31 = xor i32 %28, %30
  %32 = xor i32 %9, 2147483647
  %33 = and i32 %32, %26
  %34 = or i32 %2, %0
  %35 = and i32 %34, %7
  %36 = xor i32 %1, %0
  %37 = xor i32 %2, %0
  %38 = or i32 %37, %36
  %39 = shl i32 %8, 1
  %40 = and i32 %27, %0
  %41 = and i32 %9, %26
  %42 = or i32 %40, %41
  %43 = or i32 %2, %1
  %44 = and i32 %43, %0
  %45 = xor i32 %44, %30
  %46 = xor i32 %27, 2147483647
  %47 = and i32 %46, %26
  %48 = xor i32 %43, -1
  %49 = and i32 %48, %26
  %50 = xor i32 %2, -1
  %51 = and i32 %50, %1
  %52 = and i32 %51, %26
  %53 = and i32 %48, %0
  %54 = and i32 %51, %0
  %55 = and i32 %21, %26
  %56 = and i32 %5, %3
  %57 = and i32 %56, %4
  %58 = or i32 %5, %3
  %59 = xor i32 %58, %4
  %60 = or i32 %57, %59
  %61 = and i32 %4, %3
  %62 = xor i32 %61, -1
  %63 = xor i32 %5, %4
  %64 = xor i32 %63, -1
  %65 = and i32 %64, %62
  %66 = xor i32 %5, -1
  %67 = or i32 %66, %4
  %68 = xor i32 %67, -1
  %69 = xor i32 %4, %3
  %70 = or i32 %69, %68
  %71 = shl i32 %70, 1
  %72 = and i32 %5, %4
  %73 = xor i32 %69, -1
  %74 = or i32 %72, %73
  %75 = xor i32 %3, -1
  %76 = or i32 %75, %4
  %77 = xor i32 %76, -1
  %78 = xor i32 %77, %5
  %79 = or i32 %61, %17
  %80 = xor i32 %72, -1
  %81 = xor i32 %72, %58
  %82 = and i32 %66, %3
  %83 = xor i32 %56, -1
  %84 = and i32 %83, %4
  %85 = or i32 %5, %4
  %86 = xor i32 %85, -1
  %87 = or i32 %86, %3
  %88 = or i32 %83, %15
  %89 = and i32 %75, %5
  %90 = and i32 %89, %15
  %91 = or i32 %16, %15
  %92 = xor i32 %91, -1
  %93 = or i32 %90, %92
  %94 = and i32 %85, %73
  %95 = xor i32 %76, %5
  %96 = or i32 %68, %75
  %97 = shl i32 %96, 1
  %98 = and i32 %75, %4
  %99 = xor i32 %98, -1
  %100 = and i32 %64, %99
  %101 = or i32 %16, %61
  %102 = or i32 %72, %12
  %103 = and i32 %76, %5
  %104 = and i32 %66, %4
  %105 = xor i32 %104, %3
  %106 = or i32 %64, %75
  %107 = and i32 %76, %64
  %108 = or i32 %66, %3
  %109 = and i32 %108, %4
  %110 = or i32 %58, %4
  %111 = or i32 %17, %77
  %112 = or i32 %64, %12
  %113 = and i32 %64, %73
  %114 = shl i32 %61, 2
  %115 = or i32 %72, %3
  %116 = xor i32 %86, %3
  %117 = xor i32 %17, %4
  %118 = or i32 %69, %5
  %119 = xor i32 %58, -1
  %120 = or i32 %119, %15
  %121 = or i32 %66, %77
  %122 = or i32 %73, %5
  %123 = and i32 %85, %75
  %124 = or i32 %86, %73
  %125 = shl i32 %124, 1
  %126 = xor i32 %108, %61
  %127 = shl i32 %126, 2
  %128 = or i32 %63, %73
  %129 = xor i32 %82, -1
  %130 = xor i32 %98, %129
  %131 = shl i32 %130, 1
  %132 = xor i32 %90, %91
  %133 = or i32 %75, %5
  %134 = and i32 %133, %4
  %135 = or i32 %90, %134
  %136 = or i32 %119, %4
  %137 = xor i32 %85, %61
  %138 = or i32 %72, %69
  %139 = xor i32 %72, %76
  %140 = or i32 %64, %73
  %141 = or i32 %72, %77
  %142 = shl i32 %141, 1
  %143 = and i32 %58, %15
  %144 = xor i32 %57, -1
  %145 = xor i32 %143, %144
  %146 = and i32 %67, %75
  %147 = or i32 %98, %66
  %148 = and i32 %63, %75
  %149 = xor i32 %108, -1
  %150 = or i32 %61, %149
  %151 = and i32 %63, %99
  %152 = or i32 %69, %64
  %153 = and i32 %62, %5
  %154 = shl i32 %153, 1
  %155 = and i32 %16, %99
  %156 = or i32 %104, %69
  %157 = and i32 %73, %5
  %158 = xor i32 %83, %4
  %159 = and i32 %56, %15
  %160 = and i32 %16, %4
  %161 = xor i32 %159, -1
  %162 = xor i32 %160, %161
  %163 = and i32 %17, %4
  %164 = or i32 %72, %82
  %165 = shl i32 %129, 1
  %166 = xor i32 %11, %5
  %167 = xor i32 %12, %5
  %168 = and i32 %99, %5
  %169 = or i32 %17, %15
  %170 = xor i32 %104, %108
  %171 = or i32 %72, %119
  %172 = or i32 %63, %98
  %173 = and i32 %83, %15
  %174 = or i32 %64, %3
  %175 = shl i32 %174, 1
  %176 = and i32 %69, %5
  %177 = or i32 %63, %75
  %178 = or i32 %61, %5
  %179 = xor i32 %56, %4
  %180 = or i32 %108, %4
  %181 = shl i32 %180, 2
  %182 = and i32 %64, %3
  %183 = and i32 %58, %4
  %184 = xor i32 %183, %161
  %185 = or i32 %57, %143
  %186 = and i32 %11, %17
  %187 = and i32 %16, %15
  %188 = or i32 %57, %187
  %189 = or i32 %16, %4
  %190 = shl i32 %189, 1
  %191 = or i32 %149, %15
  %192 = xor i32 %104, -1
  %193 = and i32 %69, %192
  %194 = and i32 %11, %64
  %195 = and i32 %11, %66
  %196 = or i32 %17, %4
  %197 = or i32 %58, %15
  %198 = and i32 %63, %3
  %199 = or i32 %61, %86
  %200 = add i32 %16, 1
  %201 = xor i32 %16, %4
  %202 = or i32 %56, %4
  %203 = and i32 %66, %99
  %204 = or i32 %129, %4
  %205 = xor i32 %134, -1
  %206 = xor i32 %90, %205
  %207 = xor i32 %104, %83
  %208 = xor i32 %201, -1
  %209 = or i32 %57, %208
  %210 = or i32 %77, %5
  %211 = shl i32 %210, 1
  %212 = xor i32 %57, %201
  %213 = xor i32 %129, %4
  %214 = shl i32 %213, 1
  %215 = xor i32 %67, %61
  %216 = shl i32 %215, 1
  %217 = add i32 %5, 1
  %218 = or i32 %104, %149
  %219 = and i32 %16, %62
  %220 = and i32 %64, %75
  %221 = shl i32 %220, 1
  %222 = and i32 %67, %3
  %223 = xor i32 %82, %4
  %224 = or i32 %61, %64
  %225 = shl i32 %224, 1
  %226 = and i32 %76, %17
  %227 = and i32 %129, %4
  %228 = or i32 %64, %77
  %229 = and i32 %63, %69
  %230 = or i32 %16, %77
  %231 = and i32 %66, %62
  %232 = shl i32 %231, 1
  %233 = and i32 %129, %15
  %234 = shl i32 %233, 2
  %235 = or i32 %104, %56
  %236 = or i32 %56, %98
  %237 = or i32 %63, %3
  %238 = and i32 %85, %3
  %239 = or i32 %129, %15
  %240 = shl i32 %3, 1
  %241 = and i32 %67, %73
  %242 = or i32 %72, %75
  %243 = shl i32 %242, 1
  %244 = and i32 %16, %76
  %245 = or i32 %56, %15
  %246 = and i32 %69, %80
  %247 = and i32 %17, %99
  %248 = or i32 %61, %68
  %249 = or i32 %63, %61
  %250 = or i32 %68, %73
  %251 = or i32 %63, %77
  %252 = xor i32 %67, %3
  %253 = and i32 %89, %4
  %254 = xor i32 %253, %208
  %255 = xor i32 %80, %3
  %256 = or i32 %63, %12
  %257 = or i32 %159, %183
  %258 = shl i32 %257, 1
  %259 = and i32 %16, %11
  %260 = add i32 %69, 1
  %261 = xor i32 %133, %4
  %262 = or i32 %253, %261
  %263 = shl i32 %58, 1
  %264 = xor i32 %85, %3
  %265 = or i32 %253, %201
  %266 = or i32 %159, %160
  %267 = or i32 %104, %3
  %268 = or i32 %86, %75
  %269 = and i32 %192, %3
  %270 = xor i32 %149, %4
  %271 = and i32 %66, %73
  %272 = xor i32 %62, %5
  %273 = and i32 %69, %66
  %274 = add i32 %108, 1
  %275 = and i32 %80, %73
  %276 = or i32 %104, %73
  %277 = or i32 %61, %66
  %278 = xor i32 %68, %3
  %279 = add i32 %56, 1
  %280 = add i32 %4, 1
  %281 = xor i32 %261, -1
  %282 = xor i32 %253, %281
  %283 = xor i32 %59, %144
  %284 = xor i32 %98, %5
  %285 = shl i32 %284, 1
  %286 = and i32 %63, %73
  %287 = xor i32 %133, -1
  %288 = or i32 %287, %4
  %289 = xor i32 %253, %288
  %290 = xor i32 %72, %129
  %291 = xor i32 %108, %4
  %292 = or i32 %108, %15
  %293 = or i32 %82, %15
  %294 = xor i32 %187, %144
  %295 = or i32 %98, %17
  %296 = and i32 %119, %15
  %297 = mul i32 %296, 21
  %298 = and i32 %82, %15
  %299 = mul i32 %298, 9
  %300 = and i32 %119, %4
  %301 = mul i32 %300, 13
  %302 = and i32 %82, %4
  %303 = and i32 %149, %15
  %304 = mul i32 %303, 15
  %305 = mul i32 %159, 6
  %306 = and i32 %149, %4
  %307 = mul i32 %306, 29
  %308 = mul i32 %57, 12
  %309 = sub i32 %53, %52
  %310 = sub i32 %309, %49
  %311 = sub i32 %310, %100
  %312 = add i32 %311, %249
  %313 = mul i32 %312, 3
  %314 = sub i32 %72, %227
  %315 = add i32 %314, %302
  %316 = sub i32 %315, %150
  %317 = mul i32 %316, 5
  %318 = add i32 %22, %99
  %319 = add i32 %318, %11
  %320 = shl i32 %319, 2
  %321 = add i32 %47, -1
  %322 = add i32 %321, %33
  %323 = add i32 %322, %82
  %324 = add i32 %323, %250
  %325 = add i32 %324, %245
  %326 = add i32 %325, %207
  %327 = add i32 %326, %204
  %328 = add i32 %327, %198
  %329 = add i32 %328, %164
  %330 = add i32 %329, %158
  %331 = add i32 %330, %128
  %332 = add i32 %331, %116
  %333 = add i32 %332, %107
  %334 = add i32 %333, %254
  %335 = shl i32 %334, 1
  %336 = sub i32 1, %39
  %337 = add i32 %336, %75
  %338 = sub i32 %337, %35
  %339 = sub i32 %338, %38
  %340 = add i32 %339, %54
  %341 = sub i32 %340, %55
  %342 = sub i32 %341, %4
  %343 = sub i32 %342, %240
  %344 = add i32 %343, %280
  %345 = sub i32 %344, %31
  %346 = sub i32 %345, %25
  %347 = add i32 %346, %42
  %348 = add i32 %347, %45
  %349 = add i32 %348, %69
  %350 = add i32 %349, %62
  %351 = add i32 %350, %217
  %352 = sub i32 %351, %98
  %353 = add i32 %352, %260
  %354 = sub i32 %353, %5
  %355 = sub i32 %354, %78
  %356 = add i32 %355, %80
  %357 = sub i32 %356, %95
  %358 = sub i32 %357, %103
  %359 = add i32 %358, %63
  %360 = add i32 %359, %56
  %361 = sub i32 %360, %114
  %362 = add i32 %361, %118
  %363 = sub i32 %362, %121
  %364 = add i32 %363, %122
  %365 = add i32 %364, %108
  %366 = add i32 %365, %147
  %367 = add i32 %366, %157
  %368 = add i32 %367, %166
  %369 = add i32 %368, %167
  %370 = sub i32 %369, %168
  %371 = add i32 %370, %104
  %372 = sub i32 %371, %176
  %373 = sub i32 %372, %178
  %374 = sub i32 %373, %195
  %375 = add i32 %374, %200
  %376 = add i32 %375, %203
  %377 = sub i32 %376, %271
  %378 = add i32 %377, %272
  %379 = add i32 %378, %273
  %380 = add i32 %379, %274
  %381 = add i32 %380, %277
  %382 = add i32 %381, %279
  %383 = add i32 %382, %65
  %384 = add i32 %383, %74
  %385 = sub i32 %384, %79
  %386 = sub i32 %385, %81
  %387 = sub i32 %386, %84
  %388 = add i32 %387, %87
  %389 = sub i32 %388, %88
  %390 = sub i32 %389, %94
  %391 = add i32 %390, %101
  %392 = add i32 %391, %102
  %393 = add i32 %392, %105
  %394 = add i32 %393, %106
  %395 = add i32 %394, %109
  %396 = add i32 %395, %110
  %397 = sub i32 %396, %111
  %398 = sub i32 %397, %112
  %399 = sub i32 %398, %113
  %400 = add i32 %399, %115
  %401 = sub i32 %400, %117
  %402 = sub i32 %401, %120
  %403 = add i32 %402, %123
  %404 = add i32 %403, %136
  %405 = sub i32 %404, %137
  %406 = add i32 %405, %138
  %407 = sub i32 %406, %139
  %408 = sub i32 %407, %140
  %409 = sub i32 %408, %146
  %410 = add i32 %409, %148
  %411 = add i32 %410, %151
  %412 = sub i32 %411, %152
  %413 = sub i32 %412, %154
  %414 = sub i32 %413, %155
  %415 = add i32 %414, %156
  %416 = sub i32 %415, %163
  %417 = sub i32 %416, %165
  %418 = sub i32 %417, %169
  %419 = sub i32 %418, %170
  %420 = sub i32 %419, %171
  %421 = sub i32 %420, %172
  %422 = add i32 %421, %173
  %423 = sub i32 %422, %177
  %424 = add i32 %423, %179
  %425 = add i32 %424, %182
  %426 = sub i32 %425, %186
  %427 = sub i32 %426, %191
  %428 = sub i32 %427, %193
  %429 = sub i32 %428, %194
  %430 = sub i32 %429, %196
  %431 = sub i32 %430, %197
  %432 = sub i32 %431, %199
  %433 = add i32 %432, %201
  %434 = add i32 %433, %202
  %435 = add i32 %434, %160
  %436 = sub i32 %435, %211
  %437 = add i32 %436, %143
  %438 = sub i32 %437, %218
  %439 = sub i32 %438, %219
  %440 = sub i32 %439, %222
  %441 = sub i32 %440, %223
  %442 = sub i32 %441, %183
  %443 = sub i32 %442, %226
  %444 = add i32 %443, %228
  %445 = add i32 %444, %229
  %446 = sub i32 %445, %230
  %447 = sub i32 %446, %232
  %448 = add i32 %447, %235
  %449 = add i32 %448, %236
  %450 = add i32 %449, %237
  %451 = sub i32 %450, %238
  %452 = add i32 %451, %239
  %453 = sub i32 %452, %241
  %454 = add i32 %453, %244
  %455 = add i32 %454, %246
  %456 = sub i32 %455, %247
  %457 = sub i32 %456, %248
  %458 = add i32 %457, %251
  %459 = add i32 %458, %252
  %460 = add i32 %459, %255
  %461 = add i32 %460, %256
  %462 = sub i32 %461, %259
  %463 = sub i32 %462, %263
  %464 = sub i32 %463, %264
  %465 = add i32 %464, %267
  %466 = sub i32 %465, %268
  %467 = add i32 %466, %269
  %468 = add i32 %467, %270
  %469 = add i32 %468, %275
  %470 = sub i32 %469, %276
  %471 = add i32 %470, %278
  %472 = sub i32 %471, %285
  %473 = sub i32 %472, %286
  %474 = sub i32 %473, %59
  %475 = add i32 %474, %290
  %476 = add i32 %475, %291
  %477 = sub i32 %476, %292
  %478 = sub i32 %477, %293
  %479 = add i32 %478, %295
  %480 = sub i32 %479, %60
  %481 = sub i32 %480, %71
  %482 = add i32 %481, %93
  %483 = sub i32 %482, %97
  %484 = sub i32 %483, %125
  %485 = sub i32 %484, %127
  %486 = sub i32 %485, %131
  %487 = add i32 %486, %132
  %488 = sub i32 %487, %135
  %489 = sub i32 %488, %142
  %490 = sub i32 %489, %145
  %491 = sub i32 %490, %162
  %492 = sub i32 %491, %175
  %493 = sub i32 %492, %181
  %494 = sub i32 %493, %184
  %495 = add i32 %494, %185
  %496 = add i32 %495, %188
  %497 = sub i32 %496, %190
  %498 = add i32 %497, %206
  %499 = add i32 %498, %209
  %500 = add i32 %499, %212
  %501 = sub i32 %500, %214
  %502 = sub i32 %501, %216
  %503 = sub i32 %502, %221
  %504 = sub i32 %503, %225
  %505 = sub i32 %504, %234
  %506 = sub i32 %505, %243
  %507 = add i32 %506, %262
  %508 = add i32 %507, %265
  %509 = sub i32 %508, %266
  %510 = sub i32 %509, %282
  %511 = sub i32 %510, %283
  %512 = add i32 %511, %289
  %513 = sub i32 %512, %294
  %514 = add i32 %513, %297
  %515 = add i32 %514, %299
  %516 = add i32 %515, %301
  %517 = add i32 %516, %304
  %518 = add i32 %517, %305
  %519 = add i32 %518, %307
  %520 = add i32 %519, %308
  %521 = add i32 %520, %320
  %522 = sub i32 %521, %258
  %523 = add i32 %522, %317
  %524 = add i32 %523, %313
  %525 = add i32 %524, %335
  %526 = icmp eq i32 %525, %20
  %527 = select i1 %526, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %528 = tail call i32 @puts(i8* nonnull dereferenceable(1) %527)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
