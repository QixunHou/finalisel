digraph "DFG for'crackme' function" {
	Node0x1ac0b80[shape=record, label="  %3 = add i32 %0, 1"];
	Node0x1ac0c20[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1ac0ce0[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x1ac0d50[shape=record, label="  %6 = mul i32 %5, 5"];
	Node0x1ac0dc0[shape=record, label="  %7 = add i32 %3, %6"];
	Node0x1ac0e30[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x1ac0ea0[shape=record, label="  %9 = sub i32 %8, %0"];
	Node0x1ac0f10[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x1ac0f80[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x1ac0ff0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1ac1060[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x1ac10d0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1ac1170[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x1ac1210[shape=record, label="  %16 = shl i32 %5, 2"];
	Node0x1ac12b0[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0x1ac1320[shape=record, label="  %18 = and i32 %4, %0"];
	Node0x1ac1390[shape=record, label="  %19 = shl i32 %18, 2"];
	Node0x1ac1430[shape=record, label="  %20 = mul i32 %11, 7"];
	Node0x1ac14a0[shape=record, label="  %21 = add i32 %15, %12"];
	Node0x1ac1510[shape=record, label="  %22 = add i32 %21, %19"];
	Node0x1ac1580[shape=record, label="  %23 = add i32 %22, %20"];
	Node0x1ac15f0[shape=record, label="  %24 = add i32 %23, %10"];
	Node0x1ac1660[shape=record, label="  %25 = sub i32 %24, %17"];
	Node0x1ac16d0[shape=record, label="  %26 = icmp eq i32 %7, %25"];
	Node0x1a61268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1ac1b70[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x1ac1bc0[shape=record, label="  ret void"];
	Node0x1ac0b80 -> Node0x1ac0c20;
	Node0x1ac0c20 -> Node0x1ac0ce0;
	Node0x1ac0ce0 -> Node0x1ac0d50;
	Node0x1ac0d50 -> Node0x1ac0dc0;
	Node0x1ac0dc0 -> Node0x1ac0e30;
	Node0x1ac0e30 -> Node0x1ac0ea0;
	Node0x1ac0ea0 -> Node0x1ac0f10;
	Node0x1ac0f10 -> Node0x1ac0f80;
	Node0x1ac0f80 -> Node0x1ac0ff0;
	Node0x1ac0ff0 -> Node0x1ac1060;
	Node0x1ac1060 -> Node0x1ac10d0;
	Node0x1ac10d0 -> Node0x1ac1170;
	Node0x1ac1170 -> Node0x1ac1210;
	Node0x1ac1210 -> Node0x1ac12b0;
	Node0x1ac12b0 -> Node0x1ac1320;
	Node0x1ac1320 -> Node0x1ac1390;
	Node0x1ac1390 -> Node0x1ac1430;
	Node0x1ac1430 -> Node0x1ac14a0;
	Node0x1ac14a0 -> Node0x1ac1510;
	Node0x1ac1510 -> Node0x1ac1580;
	Node0x1ac1580 -> Node0x1ac15f0;
	Node0x1ac15f0 -> Node0x1ac1660;
	Node0x1ac1660 -> Node0x1ac16d0;
	Node0x1ac16d0 -> Node0x1a61268;
	Node0x1a61268 -> Node0x1ac1b70;
	Node0x1ac1b70 -> Node0x1ac1bc0;
edge [color=red]
	Node0x1ac0c20 -> Node0x1ac0ce0;
	Node0x1ac0ce0 -> Node0x1ac0d50;
	Node0x1ac0b80 -> Node0x1ac0dc0;
	Node0x1ac0d50 -> Node0x1ac0dc0;
	Node0x1ac0e30 -> Node0x1ac0ea0;
	Node0x1ac0ea0 -> Node0x1ac0f10;
	Node0x1ac0f80 -> Node0x1ac0ff0;
	Node0x1ac1060 -> Node0x1ac10d0;
	Node0x1ac10d0 -> Node0x1ac1170;
	Node0x1ac0ce0 -> Node0x1ac1210;
	Node0x1ac1210 -> Node0x1ac12b0;
	Node0x1ac0c20 -> Node0x1ac1320;
	Node0x1ac1320 -> Node0x1ac1390;
	Node0x1ac0f80 -> Node0x1ac1430;
	Node0x1ac1170 -> Node0x1ac14a0;
	Node0x1ac0ff0 -> Node0x1ac14a0;
	Node0x1ac14a0 -> Node0x1ac1510;
	Node0x1ac1390 -> Node0x1ac1510;
	Node0x1ac1510 -> Node0x1ac1580;
	Node0x1ac1430 -> Node0x1ac1580;
	Node0x1ac1580 -> Node0x1ac15f0;
	Node0x1ac0f10 -> Node0x1ac15f0;
	Node0x1ac15f0 -> Node0x1ac1660;
	Node0x1ac12b0 -> Node0x1ac1660;
	Node0x1ac0dc0 -> Node0x1ac16d0;
	Node0x1ac1660 -> Node0x1ac16d0;
	Node0x1ac16d0 -> Node0x1a61268;
	Node0x1a61268 -> Node0x1ac1b70;
}
