; ModuleID = '../.././c_source_file/1421_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1421_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = or i32 %2, %0
  %6 = xor i32 %5, -1
  %7 = or i32 %6, %4
  %8 = sub i32 0, %7
  %9 = xor i32 %2, -1
  %10 = or i32 %9, %0
  %11 = and i32 %1, %0
  %12 = xor i32 %11, -1
  %13 = and i32 %9, %12
  %14 = and i32 %9, %0
  %15 = xor i32 %1, %0
  %16 = xor i32 %15, -1
  %17 = or i32 %14, %16
  %18 = shl i32 %17, 1
  %19 = or i32 %2, %1
  %20 = xor i32 %19, -1
  %21 = or i32 %11, %20
  %22 = and i32 %10, %1
  %23 = or i32 %14, %4
  %24 = or i32 %9, %1
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %0
  %27 = shl i32 %26, 1
  %28 = and i32 %2, %0
  %29 = and i32 %9, %1
  %30 = xor i32 %29, -1
  %31 = xor i32 %28, %30
  %32 = and i32 %4, %0
  %33 = or i32 %32, %2
  %34 = xor i32 %10, -1
  %35 = add i32 %10, 1
  %36 = xor i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %15, %37
  %39 = xor i32 %11, %2
  %40 = xor i32 %0, -1
  %41 = and i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %40
  %44 = or i32 %4, %0
  %45 = xor i32 %14, -1
  %46 = and i32 %15, %45
  %47 = and i32 %45, %1
  %48 = or i32 %25, %40
  %49 = or i32 %1, %0
  %50 = xor i32 %49, %2
  %51 = xor i32 %49, -1
  %52 = xor i32 %2, %1
  %53 = xor i32 %52, -1
  %54 = or i32 %53, %51
  %55 = shl i32 %54, 1
  %56 = or i32 %41, %40
  %57 = xor i32 %44, -1
  %58 = or i32 %57, %2
  %59 = xor i32 %10, %11
  %60 = add i32 %36, 1
  %61 = shl i32 %41, 1
  %62 = or i32 %37, %1
  %63 = xor i32 %5, %1
  %64 = shl i32 %63, 1
  %65 = xor i32 %12, %2
  %66 = or i32 %15, %9
  %67 = mul i32 %66, 3
  %68 = and i32 %24, %0
  %69 = or i32 %52, %51
  %70 = or i32 %19, %0
  %71 = shl i32 %70, 1
  %72 = xor i32 %24, %0
  %73 = or i32 %14, %41
  %74 = or i32 %52, %0
  %75 = and i32 %41, %40
  %76 = and i32 %52, %0
  %77 = or i32 %75, %76
  %78 = and i32 %15, %2
  %79 = xor i32 %41, %0
  %80 = and i32 %53, %0
  %81 = shl i32 %80, 1
  %82 = and i32 %52, %44
  %83 = or i32 %29, %40
  %84 = and i32 %19, %40
  %85 = or i32 %51, %2
  %86 = or i32 %34, %16
  %87 = or i32 %28, %51
  %88 = and i32 %52, %49
  %89 = and i32 %30, %40
  %90 = or i32 %20, %40
  %91 = and i32 %52, %12
  %92 = or i32 %32, %9
  %93 = xor i32 %42, %0
  %94 = and i32 %5, %4
  %95 = xor i32 %28, %49
  %96 = or i32 %9, %57
  %97 = xor i32 %19, %11
  %98 = shl i32 %97, 1
  %99 = or i32 %14, %1
  %100 = or i32 %36, %16
  %101 = or i32 %52, %11
  %102 = xor i32 %28, -1
  %103 = and i32 %102, %4
  %104 = and i32 %44, %53
  %105 = or i32 %11, %34
  %106 = and i32 %10, %15
  %107 = or i32 %9, %16
  %108 = shl i32 %107, 1
  %109 = or i32 %28, %15
  %110 = and i32 %37, %12
  %111 = and i32 %4, %2
  %112 = and i32 %111, %0
  %113 = or i32 %4, %2
  %114 = and i32 %113, %40
  %115 = xor i32 %112, -1
  %116 = xor i32 %114, %115
  %117 = or i32 %16, %2
  %118 = and i32 %36, %4
  %119 = or i32 %37, %4
  %120 = xor i32 %57, %2
  %121 = or i32 %34, %4
  %122 = or i32 %37, %57
  %123 = or i32 %36, %57
  %124 = and i32 %10, %16
  %125 = xor i32 %32, -1
  %126 = xor i32 %125, %2
  %127 = or i32 %36, %4
  %128 = or i32 %25, %0
  %129 = or i32 %53, %57
  %130 = or i32 %14, %15
  %131 = or i32 %15, %34
  %132 = or i32 %30, %40
  %133 = shl i32 %132, 1
  %134 = or i32 %11, %37
  %135 = or i32 %36, %1
  %136 = and i32 %41, %0
  %137 = xor i32 %19, %0
  %138 = xor i32 %137, -1
  %139 = xor i32 %136, %138
  %140 = and i32 %111, %40
  %141 = and i32 %113, %0
  %142 = or i32 %140, %141
  %143 = xor i32 %28, %19
  %144 = add i32 %52, 1
  %145 = or i32 %41, %0
  %146 = or i32 %28, %16
  %147 = or i32 %9, %51
  %148 = shl i32 %147, 2
  %149 = and i32 %49, %2
  %150 = shl i32 %42, 1
  %151 = xor i32 %28, %1
  %152 = xor i32 %112, %74
  %153 = or i32 %41, %32
  %154 = and i32 %42, %40
  %155 = and i32 %36, %15
  %156 = xor i32 %5, %11
  %157 = or i32 %53, %40
  %158 = or i32 %112, %114
  %159 = and i32 %37, %4
  %160 = xor i32 %76, -1
  %161 = xor i32 %75, %160
  %162 = or i32 %52, %40
  %163 = shl i32 %162, 1
  %164 = xor i32 %10, %1
  %165 = add i32 %5, 1
  %166 = and i32 %15, %102
  %167 = xor i32 %52, %0
  %168 = xor i32 %136, %167
  %169 = xor i32 %32, %2
  %170 = xor i32 %141, -1
  %171 = xor i32 %140, %170
  %172 = xor i32 %45, %1
  %173 = and i32 %36, %44
  %174 = or i32 %136, %137
  %175 = and i32 %53, %125
  %176 = and i32 %9, %16
  %177 = shl i32 %176, 1
  %178 = or i32 %15, %2
  %179 = xor i32 %14, %42
  %180 = xor i32 %30, %0
  %181 = xor i32 %113, %40
  %182 = xor i32 %181, %112
  %183 = and i32 %37, %1
  %184 = or i32 %28, %29
  %185 = xor i32 %14, %24
  %186 = xor i32 %32, %42
  %187 = or i32 %6, %1
  %188 = or i32 %28, %20
  %189 = and i32 %53, %12
  %190 = or i32 %36, %32
  %191 = and i32 %102, %1
  %192 = and i32 %36, %125
  %193 = shl i32 %192, 1
  %194 = or i32 %15, %6
  %195 = xor i32 %51, %2
  %196 = and i32 %52, %125
  %197 = or i32 %112, %167
  %198 = or i32 %34, %1
  %199 = or i32 %20, %0
  %200 = and i32 %49, %37
  %201 = xor i32 %102, %1
  %202 = shl i32 %167, 1
  %203 = and i32 %45, %16
  %204 = and i32 %5, %16
  %205 = or i32 %36, %51
  %206 = xor i32 %74, -1
  %207 = or i32 %112, %206
  %208 = or i32 %136, %84
  %209 = or i32 %14, %25
  %210 = xor i32 %24, %11
  %211 = or i32 %52, %57
  %212 = shl i32 %211, 1
  %213 = and i32 %37, %125
  %214 = and i32 %49, %9
  %215 = shl i32 %214, 2
  %216 = and i32 %45, %4
  %217 = and i32 %5, %1
  %218 = xor i32 %6, %1
  %219 = or i32 %24, %0
  %220 = or i32 %29, %32
  %221 = xor i32 %162, -1
  %222 = or i32 %140, %221
  %223 = and i32 %16, %2
  %224 = or i32 %6, %16
  %225 = or i32 %52, %32
  %226 = and i32 %44, %37
  %227 = xor i32 %28, %44
  %228 = xor i32 %140, %162
  %229 = xor i32 %29, %0
  %230 = and i32 %20, %40
  %231 = mul i32 %230, -18
  %232 = and i32 %29, %40
  %233 = shl i32 %232, 2
  %234 = and i32 %20, %0
  %235 = shl i32 %234, 3
  %236 = and i32 %29, %0
  %237 = and i32 %25, %40
  %238 = mul i32 %237, -6
  %239 = mul i32 %75, -22
  %240 = and i32 %25, %0
  %241 = mul i32 %240, -7
  %242 = add i32 %136, %155
  %243 = add i32 %242, %62
  %244 = mul i32 %243, 5
  %245 = add i32 %178, -1
  %246 = add i32 %245, %149
  %247 = add i32 %246, %85
  %248 = add i32 %247, %45
  %249 = sub i32 %248, %10
  %250 = add i32 %249, %227
  %251 = add i32 %250, %218
  %252 = add i32 %251, %209
  %253 = add i32 %252, %196
  %254 = add i32 %253, %173
  %255 = add i32 %254, %154
  %256 = add i32 %255, %146
  %257 = add i32 %256, %100
  %258 = add i32 %257, %90
  %259 = add i32 %258, %72
  %260 = add i32 %259, %68
  %261 = add i32 %260, %48
  %262 = add i32 %261, %158
  %263 = shl i32 %262, 1
  %264 = sub i32 1, %0
  %265 = sub i32 %264, %0
  %266 = sub i32 %265, %1
  %267 = add i32 %266, %4
  %268 = sub i32 %267, %44
  %269 = add i32 %268, %32
  %270 = add i32 %269, %9
  %271 = add i32 %270, %16
  %272 = sub i32 %271, %2
  %273 = add i32 %272, %13
  %274 = sub i32 %273, %33
  %275 = add i32 %274, %35
  %276 = add i32 %275, %39
  %277 = sub i32 %276, %50
  %278 = add i32 %277, %58
  %279 = add i32 %278, %60
  %280 = add i32 %279, %65
  %281 = add i32 %280, %78
  %282 = sub i32 %281, %14
  %283 = sub i32 %282, %29
  %284 = sub i32 %283, %92
  %285 = sub i32 %284, %96
  %286 = sub i32 %285, %117
  %287 = add i32 %286, %120
  %288 = add i32 %287, %126
  %289 = add i32 %288, %5
  %290 = add i32 %289, %144
  %291 = sub i32 %290, %36
  %292 = add i32 %291, %165
  %293 = sub i32 %292, %169
  %294 = sub i32 %293, %19
  %295 = sub i32 %294, %195
  %296 = add i32 %295, %30
  %297 = sub i32 %296, %223
  %298 = sub i32 %297, %21
  %299 = add i32 %298, %22
  %300 = sub i32 %299, %23
  %301 = sub i32 %300, %31
  %302 = sub i32 %301, %38
  %303 = sub i32 %302, %43
  %304 = add i32 %303, %46
  %305 = add i32 %304, %47
  %306 = add i32 %305, %56
  %307 = sub i32 %306, %59
  %308 = sub i32 %307, %61
  %309 = add i32 %308, %67
  %310 = sub i32 %309, %69
  %311 = sub i32 %310, %73
  %312 = sub i32 %311, %74
  %313 = add i32 %312, %79
  %314 = add i32 %313, %82
  %315 = sub i32 %314, %83
  %316 = add i32 %315, %84
  %317 = add i32 %316, %86
  %318 = add i32 %317, %87
  %319 = add i32 %318, %88
  %320 = add i32 %319, %89
  %321 = sub i32 %320, %91
  %322 = add i32 %321, %93
  %323 = add i32 %322, %94
  %324 = sub i32 %323, %95
  %325 = sub i32 %324, %99
  %326 = sub i32 %325, %101
  %327 = sub i32 %326, %103
  %328 = sub i32 %327, %104
  %329 = add i32 %328, %105
  %330 = add i32 %329, %106
  %331 = sub i32 %330, %108
  %332 = sub i32 %331, %109
  %333 = sub i32 %332, %110
  %334 = add i32 %333, %76
  %335 = sub i32 %334, %118
  %336 = sub i32 %335, %119
  %337 = sub i32 %336, %121
  %338 = sub i32 %337, %122
  %339 = add i32 %338, %123
  %340 = sub i32 %339, %124
  %341 = add i32 %340, %127
  %342 = add i32 %341, %128
  %343 = add i32 %342, %129
  %344 = add i32 %343, %130
  %345 = add i32 %344, %131
  %346 = add i32 %345, %134
  %347 = add i32 %346, %135
  %348 = add i32 %347, %143
  %349 = add i32 %348, %145
  %350 = add i32 %349, %148
  %351 = sub i32 %350, %150
  %352 = sub i32 %351, %151
  %353 = add i32 %352, %153
  %354 = sub i32 %353, %156
  %355 = add i32 %354, %157
  %356 = add i32 %355, %159
  %357 = add i32 %356, %137
  %358 = sub i32 %357, %164
  %359 = add i32 %358, %166
  %360 = sub i32 %359, %172
  %361 = sub i32 %360, %175
  %362 = sub i32 %361, %177
  %363 = sub i32 %362, %179
  %364 = sub i32 %363, %180
  %365 = add i32 %364, %183
  %366 = sub i32 %365, %184
  %367 = add i32 %366, %185
  %368 = add i32 %367, %186
  %369 = add i32 %368, %187
  %370 = add i32 %369, %188
  %371 = add i32 %370, %189
  %372 = add i32 %371, %190
  %373 = sub i32 %372, %191
  %374 = sub i32 %373, %194
  %375 = add i32 %374, %198
  %376 = sub i32 %375, %199
  %377 = add i32 %376, %200
  %378 = add i32 %377, %201
  %379 = add i32 %378, %203
  %380 = add i32 %379, %204
  %381 = add i32 %380, %205
  %382 = add i32 %381, %210
  %383 = sub i32 %382, %213
  %384 = sub i32 %383, %215
  %385 = sub i32 %384, %216
  %386 = sub i32 %385, %217
  %387 = add i32 %386, %219
  %388 = sub i32 %387, %220
  %389 = add i32 %388, %224
  %390 = sub i32 %389, %225
  %391 = sub i32 %390, %226
  %392 = sub i32 %391, %229
  %393 = sub i32 %392, %236
  %394 = sub i32 %393, %18
  %395 = sub i32 %394, %27
  %396 = sub i32 %395, %55
  %397 = sub i32 %396, %64
  %398 = sub i32 %397, %71
  %399 = sub i32 %398, %77
  %400 = sub i32 %399, %81
  %401 = sub i32 %400, %98
  %402 = sub i32 %401, %116
  %403 = sub i32 %402, %133
  %404 = add i32 %403, %139
  %405 = sub i32 %404, %142
  %406 = sub i32 %405, %152
  %407 = sub i32 %406, %161
  %408 = sub i32 %407, %163
  %409 = add i32 %408, %168
  %410 = add i32 %409, %171
  %411 = sub i32 %410, %174
  %412 = sub i32 %411, %182
  %413 = sub i32 %412, %193
  %414 = add i32 %413, %197
  %415 = sub i32 %414, %202
  %416 = add i32 %415, %207
  %417 = sub i32 %416, %208
  %418 = sub i32 %417, %212
  %419 = sub i32 %418, %222
  %420 = add i32 %419, %228
  %421 = add i32 %420, %231
  %422 = sub i32 %421, %233
  %423 = add i32 %422, %235
  %424 = add i32 %423, %238
  %425 = add i32 %424, %239
  %426 = add i32 %425, %241
  %427 = add i32 %426, %244
  %428 = add i32 %427, %263
  %429 = icmp eq i32 %428, %8
  %430 = select i1 %429, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %431 = tail call i32 @puts(i8* nonnull dereferenceable(1) %430)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
