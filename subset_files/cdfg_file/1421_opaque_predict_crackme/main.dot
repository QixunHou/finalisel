digraph "DFG for'main' function" {
	Node0x1d1f2c8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1d1f348[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1d1f3d8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x1d1f438[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x1d1f8b8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d1f998[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x1d1fa98[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1d1fb58[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x1d1fc08[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1d1fe68[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x1d1ff28[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1d20088[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1d200e8[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x1d25c80[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x1d25e88[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x1d25fe8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x1d260f8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1d261b8[shape=record, label="  ret i32 0"];
	Node0x1d1f2c8 -> Node0x1d1f348;
	Node0x1d1f348 -> Node0x1d1f3d8;
	Node0x1d1f3d8 -> Node0x1d1f438;
	Node0x1d1f438 -> Node0x1d1f8b8;
	Node0x1d1f8b8 -> Node0x1d1f998;
	Node0x1d1f998 -> Node0x1d1fa98;
	Node0x1d1fa98 -> Node0x1d1fb58;
	Node0x1d1fb58 -> Node0x1d1fc08;
	Node0x1d1fc08 -> Node0x1d1fe68;
	Node0x1d1fe68 -> Node0x1d1ff28;
	Node0x1d1ff28 -> Node0x1d20088;
	Node0x1d20088 -> Node0x1d200e8;
	Node0x1d200e8 -> Node0x1d25c80;
	Node0x1d25c80 -> Node0x1d25e88;
	Node0x1d25e88 -> Node0x1d25fe8;
	Node0x1d25fe8 -> Node0x1d260f8;
	Node0x1d260f8 -> Node0x1d261b8;
edge [color=red]
	Node0x1d1f2c8 -> Node0x1d1f438;
	Node0x1d1f438 -> Node0x1d1f8b8;
	Node0x1d1f348 -> Node0x1d1f998;
	Node0x1d1f998 -> Node0x1d1fa98;
	Node0x1d1f3d8 -> Node0x1d1fb58;
	Node0x1d1fb58 -> Node0x1d1fc08;
	Node0x1d1f2c8 -> Node0x1d1fe68;
	Node0x1d1f348 -> Node0x1d1fe68;
	Node0x1d1f3d8 -> Node0x1d1fe68;
	Node0x1d1f2c8 -> Node0x1d1ff28;
	Node0x1d1f348 -> Node0x1d20088;
	Node0x1d1f3d8 -> Node0x1d200e8;
	Node0x1d1ff28 -> Node0x1d25c80;
	Node0x1d20088 -> Node0x1d25c80;
	Node0x1d200e8 -> Node0x1d25c80;
	Node0x1d1fb58 -> Node0x1d25e88;
	Node0x1d1f998 -> Node0x1d25fe8;
	Node0x1d1f438 -> Node0x1d260f8;
}
