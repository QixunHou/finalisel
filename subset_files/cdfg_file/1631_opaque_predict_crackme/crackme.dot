digraph "DFG for'crackme' function" {
	Node0xa81090[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0xa81130[shape=record, label="  %6 = add i32 %3, 1"];
	Node0xa811a0[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0xa81210[shape=record, label="  %8 = and i32 %7, %3"];
	Node0xa812b0[shape=record, label="  %9 = shl i32 %8, 2"];
	Node0xa81350[shape=record, label="  %10 = xor i32 %9, -4"];
	Node0xa813c0[shape=record, label="  %11 = sub i32 %6, %10"];
	Node0xa81430[shape=record, label="  %12 = xor i32 %2, %1"];
	Node0xa814a0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0xa81510[shape=record, label="  %14 = or i32 %13, 1"];
	Node0xa81580[shape=record, label="  %15 = or i32 %2, %1"];
	Node0xa815f0[shape=record, label="  %16 = and i32 %2, %1"];
	Node0xa81660[shape=record, label="  %17 = and i32 %5, %1"];
	Node0xa816d0[shape=record, label="  %18 = or i32 %3, %0"];
	Node0xa81740[shape=record, label="  %19 = or i32 %7, %3"];
	Node0xa817b0[shape=record, label="  %20 = and i32 %3, %0"];
	Node0xa81820[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0xa81890[shape=record, label="  %22 = shl i32 %18, 1"];
	Node0xa81930[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0xa819a0[shape=record, label="  %24 = xor i32 %19, -1"];
	Node0xa81a40[shape=record, label="  %25 = mul i32 %8, 5"];
	Node0xa81ab0[shape=record, label="  %26 = add i32 %15, %0"];
	Node0xa81b20[shape=record, label="  %27 = add i32 %20, %1"];
	Node0xa81b90[shape=record, label="  %28 = sub i32 %27, %26"];
	Node0xa81c00[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0xa81c70[shape=record, label="  %30 = sub i32 1, %1"];
	Node0xa81ce0[shape=record, label="  %31 = add i32 %30, %16"];
	Node0xa81d50[shape=record, label="  %32 = sub i32 %31, %17"];
	Node0xa81fd0[shape=record, label="  %33 = sub i32 %32, %18"];
	Node0xa82040[shape=record, label="  %34 = sub i32 %33, %19"];
	Node0xa820b0[shape=record, label="  %35 = sub i32 %34, %21"];
	Node0xa82120[shape=record, label="  %36 = add i32 %35, %24"];
	Node0xa82190[shape=record, label="  %37 = add i32 %36, %14"];
	Node0xa82200[shape=record, label="  %38 = add i32 %37, %25"];
	Node0xa82270[shape=record, label="  %39 = sub i32 %38, %23"];
	Node0xa822e0[shape=record, label="  %40 = add i32 %39, %29"];
	Node0xa82350[shape=record, label="  %41 = icmp eq i32 %11, %40"];
	Node0xa21268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa827f0[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0xa82840[shape=record, label="  ret void"];
	Node0xa81090 -> Node0xa81130;
	Node0xa81130 -> Node0xa811a0;
	Node0xa811a0 -> Node0xa81210;
	Node0xa81210 -> Node0xa812b0;
	Node0xa812b0 -> Node0xa81350;
	Node0xa81350 -> Node0xa813c0;
	Node0xa813c0 -> Node0xa81430;
	Node0xa81430 -> Node0xa814a0;
	Node0xa814a0 -> Node0xa81510;
	Node0xa81510 -> Node0xa81580;
	Node0xa81580 -> Node0xa815f0;
	Node0xa815f0 -> Node0xa81660;
	Node0xa81660 -> Node0xa816d0;
	Node0xa816d0 -> Node0xa81740;
	Node0xa81740 -> Node0xa817b0;
	Node0xa817b0 -> Node0xa81820;
	Node0xa81820 -> Node0xa81890;
	Node0xa81890 -> Node0xa81930;
	Node0xa81930 -> Node0xa819a0;
	Node0xa819a0 -> Node0xa81a40;
	Node0xa81a40 -> Node0xa81ab0;
	Node0xa81ab0 -> Node0xa81b20;
	Node0xa81b20 -> Node0xa81b90;
	Node0xa81b90 -> Node0xa81c00;
	Node0xa81c00 -> Node0xa81c70;
	Node0xa81c70 -> Node0xa81ce0;
	Node0xa81ce0 -> Node0xa81d50;
	Node0xa81d50 -> Node0xa81fd0;
	Node0xa81fd0 -> Node0xa82040;
	Node0xa82040 -> Node0xa820b0;
	Node0xa820b0 -> Node0xa82120;
	Node0xa82120 -> Node0xa82190;
	Node0xa82190 -> Node0xa82200;
	Node0xa82200 -> Node0xa82270;
	Node0xa82270 -> Node0xa822e0;
	Node0xa822e0 -> Node0xa82350;
	Node0xa82350 -> Node0xa21268;
	Node0xa21268 -> Node0xa827f0;
	Node0xa827f0 -> Node0xa82840;
edge [color=red]
	Node0xa811a0 -> Node0xa81210;
	Node0xa81210 -> Node0xa812b0;
	Node0xa812b0 -> Node0xa81350;
	Node0xa81130 -> Node0xa813c0;
	Node0xa81350 -> Node0xa813c0;
	Node0xa81430 -> Node0xa814a0;
	Node0xa814a0 -> Node0xa81510;
	Node0xa81090 -> Node0xa81660;
	Node0xa811a0 -> Node0xa81740;
	Node0xa816d0 -> Node0xa81890;
	Node0xa81890 -> Node0xa81930;
	Node0xa81740 -> Node0xa819a0;
	Node0xa81210 -> Node0xa81a40;
	Node0xa81580 -> Node0xa81ab0;
	Node0xa817b0 -> Node0xa81b20;
	Node0xa81b20 -> Node0xa81b90;
	Node0xa81ab0 -> Node0xa81b90;
	Node0xa81b90 -> Node0xa81c00;
	Node0xa81c70 -> Node0xa81ce0;
	Node0xa815f0 -> Node0xa81ce0;
	Node0xa81ce0 -> Node0xa81d50;
	Node0xa81660 -> Node0xa81d50;
	Node0xa81d50 -> Node0xa81fd0;
	Node0xa816d0 -> Node0xa81fd0;
	Node0xa81fd0 -> Node0xa82040;
	Node0xa81740 -> Node0xa82040;
	Node0xa82040 -> Node0xa820b0;
	Node0xa81820 -> Node0xa820b0;
	Node0xa820b0 -> Node0xa82120;
	Node0xa819a0 -> Node0xa82120;
	Node0xa82120 -> Node0xa82190;
	Node0xa81510 -> Node0xa82190;
	Node0xa82190 -> Node0xa82200;
	Node0xa81a40 -> Node0xa82200;
	Node0xa82200 -> Node0xa82270;
	Node0xa81930 -> Node0xa82270;
	Node0xa82270 -> Node0xa822e0;
	Node0xa81c00 -> Node0xa822e0;
	Node0xa813c0 -> Node0xa82350;
	Node0xa822e0 -> Node0xa82350;
	Node0xa82350 -> Node0xa21268;
	Node0xa21268 -> Node0xa827f0;
}
