digraph "DFG for'crackme' function" {
	Node0x24ae130[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x24ae1a0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0x24ae210[shape=record, label="  %7 = or i32 %6, %3"];
	Node0x24ae280[shape=record, label="  %8 = sub i32 %0, %1"];
	Node0x24ae2f0[shape=record, label="  %9 = sub i32 %8, %7"];
	Node0x24ae390[shape=record, label="  %10 = xor i32 %1, 2147483647"];
	Node0x24ae400[shape=record, label="  %11 = xor i32 %10, %2"];
	Node0x24ae470[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x24ae4e0[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x24ae550[shape=record, label="  %14 = xor i32 %12, -1"];
	Node0x24ae5f0[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x24ae660[shape=record, label="  %16 = and i32 %5, %2"];
	Node0x24ae6d0[shape=record, label="  %17 = and i32 %13, %1"];
	Node0x24ae740[shape=record, label="  %18 = and i32 %3, %0"];
	Node0x24ae7b0[shape=record, label="  %19 = xor i32 %18, -1"];
	Node0x24ae820[shape=record, label="  %20 = and i32 %6, %3"];
	Node0x24ae890[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x24ae930[shape=record, label="  %22 = mul i32 %21, 5"];
	Node0x24ae9a0[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x24aea10[shape=record, label="  %24 = shl i32 %23, 3"];
	Node0x24aeab0[shape=record, label="  %25 = xor i32 %24, -8"];
	Node0x24aeb20[shape=record, label="  %26 = xor i32 %7, -1"];
	Node0x24aeb90[shape=record, label="  %27 = shl i32 %18, 3"];
	Node0x24aec00[shape=record, label="  %28 = add i32 %20, %26"];
	Node0x24aeca0[shape=record, label="  %29 = mul i32 %28, -6"];
	Node0x24aed10[shape=record, label="  %30 = sub i32 %3, %11"];
	Node0x24aedb0[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x24aee20[shape=record, label="  %32 = sub i32 %2, %0"];
	Node0x24af0a0[shape=record, label="  %33 = add i32 %32, %12"];
	Node0x24af110[shape=record, label="  %34 = sub i32 %33, %16"];
	Node0x24af180[shape=record, label="  %35 = sub i32 %34, %17"];
	Node0x24af1f0[shape=record, label="  %36 = add i32 %35, %15"];
	Node0x24af260[shape=record, label="  %37 = add i32 %36, %19"];
	Node0x24af2d0[shape=record, label="  %38 = add i32 %37, %23"];
	Node0x24af340[shape=record, label="  %39 = add i32 %38, %22"];
	Node0x24af3b0[shape=record, label="  %40 = sub i32 %39, %27"];
	Node0x24af420[shape=record, label="  %41 = add i32 %40, %31"];
	Node0x24af490[shape=record, label="  %42 = sub i32 %41, %25"];
	Node0x24af500[shape=record, label="  %43 = add i32 %42, %29"];
	Node0x24af570[shape=record, label="  %44 = icmp eq i32 %9, %43"];
	Node0x244e268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24afa10[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x24afa60[shape=record, label="  ret void"];
	Node0x24ae130 -> Node0x24ae1a0;
	Node0x24ae1a0 -> Node0x24ae210;
	Node0x24ae210 -> Node0x24ae280;
	Node0x24ae280 -> Node0x24ae2f0;
	Node0x24ae2f0 -> Node0x24ae390;
	Node0x24ae390 -> Node0x24ae400;
	Node0x24ae400 -> Node0x24ae470;
	Node0x24ae470 -> Node0x24ae4e0;
	Node0x24ae4e0 -> Node0x24ae550;
	Node0x24ae550 -> Node0x24ae5f0;
	Node0x24ae5f0 -> Node0x24ae660;
	Node0x24ae660 -> Node0x24ae6d0;
	Node0x24ae6d0 -> Node0x24ae740;
	Node0x24ae740 -> Node0x24ae7b0;
	Node0x24ae7b0 -> Node0x24ae820;
	Node0x24ae820 -> Node0x24ae890;
	Node0x24ae890 -> Node0x24ae930;
	Node0x24ae930 -> Node0x24ae9a0;
	Node0x24ae9a0 -> Node0x24aea10;
	Node0x24aea10 -> Node0x24aeab0;
	Node0x24aeab0 -> Node0x24aeb20;
	Node0x24aeb20 -> Node0x24aeb90;
	Node0x24aeb90 -> Node0x24aec00;
	Node0x24aec00 -> Node0x24aeca0;
	Node0x24aeca0 -> Node0x24aed10;
	Node0x24aed10 -> Node0x24aedb0;
	Node0x24aedb0 -> Node0x24aee20;
	Node0x24aee20 -> Node0x24af0a0;
	Node0x24af0a0 -> Node0x24af110;
	Node0x24af110 -> Node0x24af180;
	Node0x24af180 -> Node0x24af1f0;
	Node0x24af1f0 -> Node0x24af260;
	Node0x24af260 -> Node0x24af2d0;
	Node0x24af2d0 -> Node0x24af340;
	Node0x24af340 -> Node0x24af3b0;
	Node0x24af3b0 -> Node0x24af420;
	Node0x24af420 -> Node0x24af490;
	Node0x24af490 -> Node0x24af500;
	Node0x24af500 -> Node0x24af570;
	Node0x24af570 -> Node0x244e268;
	Node0x244e268 -> Node0x24afa10;
	Node0x24afa10 -> Node0x24afa60;
edge [color=red]
	Node0x24ae1a0 -> Node0x24ae210;
	Node0x24ae280 -> Node0x24ae2f0;
	Node0x24ae210 -> Node0x24ae2f0;
	Node0x24ae390 -> Node0x24ae400;
	Node0x24ae470 -> Node0x24ae550;
	Node0x24ae550 -> Node0x24ae5f0;
	Node0x24ae130 -> Node0x24ae660;
	Node0x24ae4e0 -> Node0x24ae6d0;
	Node0x24ae740 -> Node0x24ae7b0;
	Node0x24ae1a0 -> Node0x24ae820;
	Node0x24ae820 -> Node0x24ae890;
	Node0x24ae890 -> Node0x24ae930;
	Node0x24ae9a0 -> Node0x24aea10;
	Node0x24aea10 -> Node0x24aeab0;
	Node0x24ae210 -> Node0x24aeb20;
	Node0x24ae740 -> Node0x24aeb90;
	Node0x24ae820 -> Node0x24aec00;
	Node0x24aeb20 -> Node0x24aec00;
	Node0x24aec00 -> Node0x24aeca0;
	Node0x24ae400 -> Node0x24aed10;
	Node0x24aed10 -> Node0x24aedb0;
	Node0x24aee20 -> Node0x24af0a0;
	Node0x24ae470 -> Node0x24af0a0;
	Node0x24af0a0 -> Node0x24af110;
	Node0x24ae660 -> Node0x24af110;
	Node0x24af110 -> Node0x24af180;
	Node0x24ae6d0 -> Node0x24af180;
	Node0x24af180 -> Node0x24af1f0;
	Node0x24ae5f0 -> Node0x24af1f0;
	Node0x24af1f0 -> Node0x24af260;
	Node0x24ae7b0 -> Node0x24af260;
	Node0x24af260 -> Node0x24af2d0;
	Node0x24ae9a0 -> Node0x24af2d0;
	Node0x24af2d0 -> Node0x24af340;
	Node0x24ae930 -> Node0x24af340;
	Node0x24af340 -> Node0x24af3b0;
	Node0x24aeb90 -> Node0x24af3b0;
	Node0x24af3b0 -> Node0x24af420;
	Node0x24aedb0 -> Node0x24af420;
	Node0x24af420 -> Node0x24af490;
	Node0x24aeab0 -> Node0x24af490;
	Node0x24af490 -> Node0x24af500;
	Node0x24aeca0 -> Node0x24af500;
	Node0x24ae2f0 -> Node0x24af570;
	Node0x24af500 -> Node0x24af570;
	Node0x24af570 -> Node0x244e268;
	Node0x244e268 -> Node0x24afa10;
}
