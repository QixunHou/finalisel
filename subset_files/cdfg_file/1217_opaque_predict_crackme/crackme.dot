digraph "DFG for'crackme' function" {
	Node0x11de540[shape=record, label="  %3 = or i32 %1, %0"];
	Node0x11debf0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x11decb0[shape=record, label="  %5 = sub i32 %4, %3"];
	Node0x11ded20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x11ded90[shape=record, label="  %7 = and i32 %4, %0"];
	Node0x11dee00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x11dee70[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x11deee0[shape=record, label="  %10 = or i32 %4, %0"];
	Node0x11def50[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x11defc0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x11df030[shape=record, label="  %13 = xor i32 %3, -1"];
	Node0x11df0d0[shape=record, label="  %14 = mul i32 %13, 5"];
	Node0x11df170[shape=record, label="  %15 = mul i32 %9, -3"];
	Node0x11df1e0[shape=record, label="  %16 = add i32 %7, %0"];
	Node0x11df250[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x11df2f0[shape=record, label="  %18 = add i32 %1, 3"];
	Node0x11df360[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0x11df3d0[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x11df440[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x11df4b0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x11df520[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x11df590[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x11df600[shape=record, label="  %25 = add i32 %24, %17"];
	Node0x11df670[shape=record, label="  %26 = icmp eq i32 %6, %25"];
	Node0x117f268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x11dfb10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x11dfb60[shape=record, label="  ret void"];
	Node0x11de540 -> Node0x11debf0;
	Node0x11debf0 -> Node0x11decb0;
	Node0x11decb0 -> Node0x11ded20;
	Node0x11ded20 -> Node0x11ded90;
	Node0x11ded90 -> Node0x11dee00;
	Node0x11dee00 -> Node0x11dee70;
	Node0x11dee70 -> Node0x11deee0;
	Node0x11deee0 -> Node0x11def50;
	Node0x11def50 -> Node0x11defc0;
	Node0x11defc0 -> Node0x11df030;
	Node0x11df030 -> Node0x11df0d0;
	Node0x11df0d0 -> Node0x11df170;
	Node0x11df170 -> Node0x11df1e0;
	Node0x11df1e0 -> Node0x11df250;
	Node0x11df250 -> Node0x11df2f0;
	Node0x11df2f0 -> Node0x11df360;
	Node0x11df360 -> Node0x11df3d0;
	Node0x11df3d0 -> Node0x11df440;
	Node0x11df440 -> Node0x11df4b0;
	Node0x11df4b0 -> Node0x11df520;
	Node0x11df520 -> Node0x11df590;
	Node0x11df590 -> Node0x11df600;
	Node0x11df600 -> Node0x11df670;
	Node0x11df670 -> Node0x117f268;
	Node0x117f268 -> Node0x11dfb10;
	Node0x11dfb10 -> Node0x11dfb60;
edge [color=red]
	Node0x11debf0 -> Node0x11decb0;
	Node0x11de540 -> Node0x11decb0;
	Node0x11decb0 -> Node0x11ded20;
	Node0x11debf0 -> Node0x11ded90;
	Node0x11debf0 -> Node0x11deee0;
	Node0x11deee0 -> Node0x11def50;
	Node0x11def50 -> Node0x11defc0;
	Node0x11de540 -> Node0x11df030;
	Node0x11df030 -> Node0x11df0d0;
	Node0x11dee70 -> Node0x11df170;
	Node0x11ded90 -> Node0x11df1e0;
	Node0x11df1e0 -> Node0x11df250;
	Node0x11df2f0 -> Node0x11df360;
	Node0x11dee00 -> Node0x11df360;
	Node0x11df360 -> Node0x11df3d0;
	Node0x11dee70 -> Node0x11df3d0;
	Node0x11df3d0 -> Node0x11df440;
	Node0x11deee0 -> Node0x11df440;
	Node0x11df440 -> Node0x11df4b0;
	Node0x11defc0 -> Node0x11df4b0;
	Node0x11df4b0 -> Node0x11df520;
	Node0x11df0d0 -> Node0x11df520;
	Node0x11df520 -> Node0x11df590;
	Node0x11df170 -> Node0x11df590;
	Node0x11df590 -> Node0x11df600;
	Node0x11df250 -> Node0x11df600;
	Node0x11ded20 -> Node0x11df670;
	Node0x11df600 -> Node0x11df670;
	Node0x11df670 -> Node0x117f268;
	Node0x117f268 -> Node0x11dfb10;
}
