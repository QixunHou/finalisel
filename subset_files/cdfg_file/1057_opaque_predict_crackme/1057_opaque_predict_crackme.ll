; ModuleID = '../.././c_source_file/1057_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1057_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, %0
  %8 = xor i32 %2, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %7, %9
  %11 = and i32 %4, %3
  %12 = xor i32 %5, %3
  %13 = or i32 %12, %11
  %14 = sub i32 %10, %13
  %15 = shl i32 %14, 1
  %16 = xor i32 %5, -1
  %17 = or i32 %11, %16
  %18 = sub i32 %15, %17
  %19 = and i32 %1, %0
  %20 = xor i32 %19, -1
  %21 = and i32 %8, %20
  %22 = and i32 %8, %1
  %23 = shl i32 %22, 1
  %24 = xor i32 %2, -1
  %25 = and i32 %24, %0
  %26 = and i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = xor i32 %25, %27
  %29 = or i32 %24, %1
  %30 = or i32 %29, %0
  %31 = or i32 %27, %0
  %32 = xor i32 %1, -1
  %33 = xor i32 %0, -1
  %34 = or i32 %33, %1
  %35 = and i32 %8, %34
  %36 = and i32 %32, %2
  %37 = and i32 %36, %0
  %38 = xor i32 %2, %1
  %39 = xor i32 %38, %0
  %40 = or i32 %37, %39
  %41 = or i32 %25, %26
  %42 = xor i32 %29, -1
  %43 = or i32 %19, %42
  %44 = or i32 %1, %0
  %45 = xor i32 %44, %2
  %46 = and i32 %34, %24
  %47 = and i32 %33, %2
  %48 = xor i32 %47, %1
  %49 = and i32 %2, %0
  %50 = or i32 %2, %1
  %51 = xor i32 %49, %50
  %52 = and i32 %34, %9
  %53 = xor i32 %50, -1
  %54 = xor i32 %53, %0
  %55 = or i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %1
  %58 = and i32 %38, %0
  %59 = xor i32 %44, -1
  %60 = or i32 %38, %59
  %61 = or i32 %47, %1
  %62 = xor i32 %7, -1
  %63 = and i32 %24, %62
  %64 = and i32 %26, %0
  %65 = xor i32 %50, %0
  %66 = or i32 %64, %65
  %67 = or i32 %19, %2
  %68 = xor i32 %56, %1
  %69 = or i32 %7, %2
  %70 = and i32 %33, %1
  %71 = or i32 %8, %70
  %72 = or i32 %62, %2
  %73 = and i32 %24, %1
  %74 = xor i32 %73, -1
  %75 = and i32 %74, %33
  %76 = or i32 %24, %59
  %77 = and i32 %7, %24
  %78 = or i32 %50, %0
  %79 = shl i32 %78, 1
  %80 = xor i32 %27, %0
  %81 = and i32 %36, %33
  %82 = or i32 %32, %2
  %83 = and i32 %82, %0
  %84 = or i32 %81, %83
  %85 = and i32 %26, %33
  %86 = or i32 %85, %58
  %87 = and i32 %53, %33
  %88 = shl i32 %87, 3
  %89 = and i32 %73, %33
  %90 = mul i32 %89, -11
  %91 = and i32 %53, %0
  %92 = mul i32 %91, -12
  %93 = and i32 %73, %0
  %94 = mul i32 %93, -7
  %95 = and i32 %42, %33
  %96 = and i32 %42, %0
  %97 = shl i32 %96, 1
  %98 = or i32 %4, %3
  %99 = xor i32 %98, -1
  %100 = or i32 %12, %99
  %101 = and i32 %16, %4
  %102 = xor i32 %101, %3
  %103 = xor i32 %3, -1
  %104 = and i32 %103, %4
  %105 = xor i32 %104, -1
  %106 = xor i32 %12, -1
  %107 = and i32 %106, %105
  %108 = and i32 %103, %5
  %109 = and i32 %108, %4
  %110 = or i32 %103, %5
  %111 = xor i32 %110, %4
  %112 = xor i32 %109, -1
  %113 = xor i32 %111, %112
  %114 = or i32 %106, %4
  %115 = shl i32 %114, 2
  %116 = or i32 %103, %4
  %117 = xor i32 %5, %4
  %118 = xor i32 %117, -1
  %119 = and i32 %116, %118
  %120 = or i32 %16, %4
  %121 = and i32 %120, %3
  %122 = and i32 %98, %106
  %123 = xor i32 %106, %4
  %124 = and i32 %117, %116
  %125 = or i32 %109, %111
  %126 = xor i32 %101, -1
  %127 = xor i32 %126, %3
  %128 = and i32 %16, %3
  %129 = and i32 %98, %5
  %130 = or i32 %16, %3
  %131 = xor i32 %130, %4
  %132 = xor i32 %11, -1
  %133 = and i32 %12, %132
  %134 = or i32 %104, %5
  %135 = xor i32 %116, -1
  %136 = xor i32 %135, %5
  %137 = and i32 %5, %3
  %138 = xor i32 %137, -1
  %139 = xor i32 %104, %138
  %140 = and i32 %126, %103
  %141 = or i32 %104, %16
  %142 = xor i32 %12, %4
  %143 = xor i32 %142, %112
  %144 = xor i32 %4, %3
  %145 = xor i32 %144, -1
  %146 = and i32 %126, %145
  %147 = xor i32 %98, %5
  %148 = or i32 %118, %135
  %149 = shl i32 %148, 1
  %150 = or i32 %5, %4
  %151 = and i32 %150, %103
  %152 = shl i32 %151, 1
  %153 = and i32 %150, %3
  %154 = or i32 %12, %135
  %155 = xor i32 %120, -1
  %156 = or i32 %155, %3
  %157 = shl i32 %156, 2
  %158 = and i32 %150, %145
  %159 = or i32 %106, %135
  %160 = shl i32 %159, 1
  %161 = xor i32 %105, %5
  %162 = xor i32 %130, -1
  %163 = add i32 %130, 1
  %164 = and i32 %137, %4
  %165 = xor i32 %4, -1
  %166 = and i32 %12, %165
  %167 = xor i32 %164, -1
  %168 = xor i32 %166, %167
  %169 = xor i32 %128, -1
  %170 = xor i32 %104, %169
  %171 = and i32 %5, %4
  %172 = or i32 %171, %135
  %173 = xor i32 %171, %3
  %174 = or i32 %118, %103
  %175 = and i32 %108, %165
  %176 = and i32 %110, %4
  %177 = xor i32 %176, -1
  %178 = xor i32 %175, %177
  %179 = shl i32 %142, 1
  %180 = and i32 %16, %105
  %181 = add i32 %4, 1
  %182 = and i32 %98, %16
  %183 = or i32 %11, %106
  %184 = or i32 %5, %3
  %185 = and i32 %184, %165
  %186 = or i32 %164, %185
  %187 = or i32 %117, %144
  %188 = and i32 %116, %16
  %189 = and i32 %132, %5
  %190 = or i32 %184, %4
  %191 = xor i32 %150, -1
  %192 = or i32 %11, %191
  %193 = or i32 %11, %162
  %194 = and i32 %130, %4
  %195 = or i32 %101, %144
  %196 = xor i32 %116, %5
  %197 = xor i32 %130, %11
  %198 = xor i32 %184, -1
  %199 = or i32 %198, %165
  %200 = or i32 %12, %4
  %201 = xor i32 %200, -1
  %202 = or i32 %109, %201
  %203 = add i32 %117, 1
  %204 = and i32 %117, %132
  %205 = and i32 %118, %132
  %206 = and i32 %120, %144
  %207 = or i32 %16, %135
  %208 = and i32 %118, %105
  %209 = and i32 %150, %144
  %210 = or i32 %117, %145
  %211 = shl i32 %210, 1
  %212 = or i32 %144, %191
  %213 = and i32 %137, %165
  %214 = and i32 %12, %4
  %215 = or i32 %213, %214
  %216 = or i32 %128, %165
  %217 = or i32 %117, %11
  %218 = and i32 %106, %132
  %219 = shl i32 %218, 1
  %220 = or i32 %12, %165
  %221 = xor i32 %175, %220
  %222 = and i32 %118, %103
  %223 = shl i32 %117, 2
  %224 = or i32 %137, %165
  %225 = xor i32 %104, %5
  %226 = or i32 %117, %104
  %227 = shl i32 %226, 1
  %228 = and i32 %120, %103
  %229 = xor i32 %171, %169
  %230 = xor i32 %155, %3
  %231 = or i32 %118, %3
  %232 = xor i32 %171, -1
  %233 = and i32 %144, %232
  %234 = or i32 %184, %165
  %235 = or i32 %169, %165
  %236 = or i32 %171, %3
  %237 = or i32 %155, %145
  %238 = xor i32 %184, %4
  %239 = xor i32 %238, %167
  %240 = xor i32 %99, %5
  %241 = and i32 %105, %5
  %242 = and i32 %118, %145
  %243 = and i32 %12, %116
  %244 = or i32 %169, %4
  %245 = xor i32 %128, %4
  %246 = xor i32 %101, %130
  %247 = and i32 %118, %3
  %248 = or i32 %104, %106
  %249 = or i32 %171, %144
  %250 = and i32 %144, %16
  %251 = xor i32 %138, %4
  %252 = or i32 %191, %145
  %253 = xor i32 %198, %4
  %254 = add i32 %116, 1
  %255 = or i32 %164, %238
  %256 = or i32 %101, %145
  %257 = or i32 %106, %165
  %258 = and i32 %117, %145
  %259 = xor i32 %109, %200
  %260 = or i32 %11, %155
  %261 = or i32 %144, %118
  %262 = xor i32 %150, %3
  %263 = xor i32 %232, %3
  %264 = xor i32 %214, 2147483647
  %265 = xor i32 %264, %213
  %266 = and i32 %106, %165
  %267 = and i32 %110, %165
  %268 = or i32 %109, %267
  %269 = or i32 %175, %176
  %270 = or i32 %11, %5
  %271 = xor i32 %150, %11
  %272 = or i32 %198, %4
  %273 = shl i32 %272, 1
  %274 = and i32 %117, %98
  %275 = shl i32 %137, 1
  %276 = or i32 %101, %103
  %277 = shl i32 %276, 1
  %278 = or i32 %162, %4
  %279 = or i32 %118, %145
  %280 = or i32 %171, %198
  %281 = or i32 %144, %5
  %282 = xor i32 %164, %142
  %283 = or i32 %135, %5
  %284 = shl i32 %283, 1
  %285 = or i32 %130, %165
  %286 = or i32 %117, %135
  %287 = and i32 %232, %145
  %288 = xor i32 %169, %4
  %289 = xor i32 %171, %184
  %290 = xor i32 %220, -1
  %291 = or i32 %175, %290
  %292 = or i32 %164, %166
  %293 = xor i32 %132, %5
  %294 = or i32 %144, %16
  %295 = shl i32 %294, 2
  %296 = add i32 %171, 1
  %297 = xor i32 %11, %5
  %298 = and i32 %12, %105
  %299 = or i32 %109, %142
  %300 = and i32 %184, %4
  %301 = or i32 %213, %300
  %302 = or i32 %171, %99
  %303 = shl i32 %238, 1
  %304 = xor i32 %171, %116
  %305 = and i32 %145, %5
  %306 = shl i32 %198, 1
  %307 = or i32 %191, %103
  %308 = or i32 %118, %99
  %309 = or i32 %117, %99
  %310 = and i32 %116, %106
  %311 = or i32 %137, %104
  %312 = and i32 %16, %132
  %313 = and i32 %169, %4
  %314 = and i32 %117, %103
  %315 = shl i32 %314, 1
  %316 = and i32 %12, %98
  %317 = shl i32 %116, 1
  %318 = and i32 %138, %165
  %319 = or i32 %138, %165
  %320 = and i32 %130, %165
  %321 = shl i32 %320, 1
  %322 = xor i32 %300, -1
  %323 = xor i32 %213, %322
  %324 = and i32 %117, %144
  %325 = xor i32 %267, 2147483647
  %326 = xor i32 %325, %109
  %327 = or i32 %155, %103
  %328 = xor i32 %101, %138
  %329 = or i32 %117, %103
  %330 = and i32 %144, %5
  %331 = xor i32 %120, %11
  %332 = or i32 %171, %145
  %333 = or i32 %171, %128
  %334 = xor i32 %162, %4
  %335 = xor i32 %184, %11
  %336 = or i32 %191, %3
  %337 = and i32 %116, %5
  %338 = shl i32 %337, 1
  %339 = or i32 %11, %198
  %340 = or i32 %101, %137
  %341 = and i32 %117, %105
  %342 = and i32 %117, %3
  %343 = shl i32 %169, 1
  %344 = xor i32 %171, %98
  %345 = or i32 %101, %3
  %346 = or i32 %128, %4
  %347 = and i32 %169, %165
  %348 = and i32 %98, %118
  %349 = xor i32 %120, %3
  %350 = or i32 %162, %165
  %351 = or i32 %137, %4
  %352 = add i32 %12, 1
  %353 = or i32 %12, %104
  %354 = and i32 %126, %3
  %355 = and i32 %106, %4
  %356 = xor i32 %185, 2147483647
  %357 = xor i32 %356, %164
  %358 = and i32 %232, %3
  %359 = and i32 %144, %118
  %360 = shl i32 %12, 1
  %361 = or i32 %138, %4
  %362 = or i32 %130, %4
  %363 = and i32 %138, %4
  %364 = or i32 %11, %118
  %365 = shl i32 %364, 1
  %366 = or i32 %16, %145
  %367 = or i32 %144, %155
  %368 = or i32 %171, %103
  %369 = or i32 %101, %162
  %370 = or i32 %106, %99
  %371 = or i32 %104, %118
  %372 = or i32 %145, %5
  %373 = or i32 %99, %5
  %374 = shl i32 %220, 1
  %375 = and i32 %198, %165
  %376 = and i32 %128, %165
  %377 = and i32 %198, %4
  %378 = mul i32 %377, -9
  %379 = and i32 %128, %4
  %380 = mul i32 %379, 30
  %381 = and i32 %162, %165
  %382 = mul i32 %213, 26
  %383 = and i32 %162, %4
  %384 = mul i32 %383, 23
  %385 = add i32 %84, %132
  %386 = add i32 %385, %66
  %387 = add i32 %386, %366
  %388 = add i32 %387, %240
  %389 = add i32 %388, %188
  %390 = add i32 %389, %161
  %391 = add i32 %390, %368
  %392 = add i32 %391, %355
  %393 = add i32 %392, %166
  %394 = add i32 %393, %354
  %395 = add i32 %394, %286
  %396 = add i32 %395, %257
  %397 = add i32 %396, %236
  %398 = add i32 %397, %224
  %399 = add i32 %398, %205
  %400 = add i32 %399, %127
  %401 = add i32 %400, %268
  %402 = add i32 %401, %326
  %403 = add i32 %402, %357
  %404 = add i32 %403, %265
  %405 = shl i32 %404, 1
  %406 = add i32 %316, %297
  %407 = add i32 %406, %375
  %408 = add i32 %407, %252
  %409 = sub i32 %248, %408
  %410 = add i32 %409, %229
  %411 = mul i32 %410, 5
  %412 = sub i32 %144, %335
  %413 = sub i32 %412, %288
  %414 = sub i32 %413, %214
  %415 = sub i32 %414, %215
  %416 = mul i32 %415, 3
  %417 = add i32 %41, %76
  %418 = add i32 %417, %28
  %419 = add i32 %418, %174
  %420 = add i32 %419, %370
  %421 = shl i32 %420, 2
  %422 = sub i32 %376, %64
  %423 = mul i32 %422, 6
  %424 = sub i32 %381, %95
  %425 = mul i32 %424, 13
  %426 = add i32 %2, -3
  %427 = sub i32 %426, %26
  %428 = add i32 %427, %45
  %429 = add i32 %428, %46
  %430 = add i32 %429, %63
  %431 = add i32 %430, %67
  %432 = add i32 %431, %69
  %433 = sub i32 %432, %72
  %434 = add i32 %433, %77
  %435 = sub i32 %434, %3
  %436 = add i32 %435, %21
  %437 = sub i32 %436, %30
  %438 = add i32 %437, %31
  %439 = sub i32 %438, %35
  %440 = sub i32 %439, %43
  %441 = sub i32 %440, %48
  %442 = add i32 %441, %51
  %443 = add i32 %442, %52
  %444 = add i32 %443, %54
  %445 = sub i32 %444, %57
  %446 = add i32 %445, %58
  %447 = sub i32 %446, %60
  %448 = add i32 %447, %61
  %449 = add i32 %448, %68
  %450 = add i32 %449, %71
  %451 = sub i32 %450, %75
  %452 = add i32 %451, %80
  %453 = sub i32 %452, %85
  %454 = add i32 %453, %181
  %455 = add i32 %454, %4
  %456 = sub i32 %455, %23
  %457 = sub i32 %456, %40
  %458 = sub i32 %457, %79
  %459 = sub i32 %458, %86
  %460 = sub i32 %459, %88
  %461 = add i32 %460, %90
  %462 = add i32 %461, %92
  %463 = add i32 %462, %94
  %464 = sub i32 %463, %97
  %465 = sub i32 %464, %5
  %466 = add i32 %465, %254
  %467 = add i32 %466, %11
  %468 = add i32 %467, %145
  %469 = add i32 %468, %16
  %470 = add i32 %469, %128
  %471 = sub i32 %470, %129
  %472 = add i32 %471, %134
  %473 = sub i32 %472, %136
  %474 = add i32 %473, %141
  %475 = sub i32 %474, %147
  %476 = add i32 %475, %163
  %477 = sub i32 %476, %180
  %478 = add i32 %477, %182
  %479 = add i32 %478, %184
  %480 = sub i32 %479, %189
  %481 = add i32 %480, %196
  %482 = add i32 %481, %203
  %483 = sub i32 %482, %207
  %484 = sub i32 %483, %225
  %485 = sub i32 %484, %120
  %486 = add i32 %485, %138
  %487 = add i32 %486, %241
  %488 = add i32 %487, %250
  %489 = sub i32 %488, %171
  %490 = sub i32 %489, %270
  %491 = add i32 %490, %281
  %492 = add i32 %491, %293
  %493 = add i32 %492, %296
  %494 = add i32 %493, %305
  %495 = add i32 %494, %312
  %496 = sub i32 %495, %317
  %497 = add i32 %496, %155
  %498 = add i32 %497, %130
  %499 = add i32 %498, %330
  %500 = add i32 %499, %352
  %501 = add i32 %500, %372
  %502 = sub i32 %501, %373
  %503 = sub i32 %502, %100
  %504 = sub i32 %503, %102
  %505 = sub i32 %504, %107
  %506 = sub i32 %505, %119
  %507 = add i32 %506, %121
  %508 = sub i32 %507, %122
  %509 = sub i32 %508, %123
  %510 = add i32 %509, %124
  %511 = add i32 %510, %131
  %512 = add i32 %511, %133
  %513 = sub i32 %512, %139
  %514 = sub i32 %513, %140
  %515 = add i32 %514, %146
  %516 = add i32 %515, %153
  %517 = sub i32 %516, %154
  %518 = sub i32 %517, %158
  %519 = add i32 %518, %170
  %520 = sub i32 %519, %172
  %521 = add i32 %520, %173
  %522 = add i32 %521, %183
  %523 = add i32 %522, %187
  %524 = sub i32 %523, %190
  %525 = sub i32 %524, %192
  %526 = add i32 %525, %193
  %527 = add i32 %526, %194
  %528 = sub i32 %527, %195
  %529 = add i32 %528, %197
  %530 = sub i32 %529, %199
  %531 = sub i32 %530, %204
  %532 = add i32 %531, %206
  %533 = sub i32 %532, %208
  %534 = add i32 %533, %209
  %535 = sub i32 %534, %212
  %536 = sub i32 %535, %216
  %537 = sub i32 %536, %217
  %538 = sub i32 %537, %222
  %539 = sub i32 %538, %223
  %540 = add i32 %539, %185
  %541 = add i32 %540, %228
  %542 = add i32 %541, %230
  %543 = add i32 %542, %231
  %544 = add i32 %543, %233
  %545 = sub i32 %544, %234
  %546 = add i32 %545, %235
  %547 = sub i32 %546, %237
  %548 = add i32 %547, %242
  %549 = add i32 %548, %243
  %550 = sub i32 %549, %244
  %551 = sub i32 %550, %245
  %552 = add i32 %551, %246
  %553 = add i32 %552, %247
  %554 = sub i32 %553, %249
  %555 = add i32 %554, %251
  %556 = add i32 %555, %253
  %557 = add i32 %556, %256
  %558 = add i32 %557, %258
  %559 = sub i32 %558, %260
  %560 = sub i32 %559, %261
  %561 = sub i32 %560, %262
  %562 = sub i32 %561, %263
  %563 = add i32 %562, %266
  %564 = sub i32 %563, %271
  %565 = add i32 %564, %274
  %566 = sub i32 %565, %275
  %567 = sub i32 %566, %278
  %568 = add i32 %567, %279
  %569 = add i32 %568, %280
  %570 = sub i32 %569, %284
  %571 = sub i32 %570, %285
  %572 = add i32 %571, %287
  %573 = add i32 %572, %289
  %574 = sub i32 %573, %295
  %575 = sub i32 %574, %298
  %576 = add i32 %575, %302
  %577 = add i32 %576, %304
  %578 = sub i32 %577, %306
  %579 = sub i32 %578, %307
  %580 = add i32 %579, %308
  %581 = sub i32 %580, %309
  %582 = sub i32 %581, %310
  %583 = add i32 %582, %311
  %584 = sub i32 %583, %313
  %585 = add i32 %584, %318
  %586 = add i32 %585, %319
  %587 = add i32 %586, %324
  %588 = add i32 %587, %327
  %589 = sub i32 %588, %328
  %590 = sub i32 %589, %329
  %591 = add i32 %590, %331
  %592 = add i32 %591, %332
  %593 = add i32 %592, %333
  %594 = add i32 %593, %334
  %595 = sub i32 %594, %336
  %596 = sub i32 %595, %338
  %597 = sub i32 %596, %339
  %598 = sub i32 %597, %340
  %599 = add i32 %598, %341
  %600 = sub i32 %599, %342
  %601 = sub i32 %600, %343
  %602 = add i32 %601, %344
  %603 = add i32 %602, %345
  %604 = add i32 %603, %346
  %605 = add i32 %604, %347
  %606 = add i32 %605, %348
  %607 = add i32 %606, %349
  %608 = sub i32 %607, %350
  %609 = add i32 %608, %351
  %610 = sub i32 %609, %300
  %611 = add i32 %610, %353
  %612 = sub i32 %611, %358
  %613 = sub i32 %612, %359
  %614 = sub i32 %613, %360
  %615 = sub i32 %614, %361
  %616 = sub i32 %615, %362
  %617 = sub i32 %616, %363
  %618 = sub i32 %617, %200
  %619 = sub i32 %618, %367
  %620 = add i32 %619, %369
  %621 = sub i32 %620, %371
  %622 = sub i32 %621, %164
  %623 = sub i32 %622, %113
  %624 = sub i32 %623, %115
  %625 = sub i32 %624, %125
  %626 = add i32 %625, %143
  %627 = sub i32 %626, %149
  %628 = sub i32 %627, %152
  %629 = sub i32 %628, %157
  %630 = sub i32 %629, %160
  %631 = sub i32 %630, %168
  %632 = sub i32 %631, %178
  %633 = sub i32 %632, %179
  %634 = sub i32 %633, %186
  %635 = add i32 %634, %202
  %636 = sub i32 %635, %211
  %637 = sub i32 %636, %219
  %638 = sub i32 %637, %221
  %639 = sub i32 %638, %227
  %640 = add i32 %639, %239
  %641 = add i32 %640, %255
  %642 = add i32 %641, %259
  %643 = add i32 %642, %269
  %644 = sub i32 %643, %273
  %645 = sub i32 %644, %277
  %646 = add i32 %645, %282
  %647 = sub i32 %646, %291
  %648 = add i32 %647, %292
  %649 = sub i32 %648, %299
  %650 = sub i32 %649, %301
  %651 = sub i32 %650, %303
  %652 = sub i32 %651, %315
  %653 = sub i32 %652, %321
  %654 = sub i32 %653, %323
  %655 = sub i32 %654, %365
  %656 = sub i32 %655, %374
  %657 = add i32 %656, %378
  %658 = add i32 %657, %380
  %659 = add i32 %658, %382
  %660 = add i32 %659, %384
  %661 = add i32 %660, %423
  %662 = add i32 %661, %425
  %663 = add i32 %662, %421
  %664 = add i32 %663, %411
  %665 = add i32 %664, %416
  %666 = add i32 %665, %405
  %667 = icmp eq i32 %18, %666
  %668 = select i1 %667, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %669 = tail call i32 @puts(i8* nonnull dereferenceable(1) %668)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
