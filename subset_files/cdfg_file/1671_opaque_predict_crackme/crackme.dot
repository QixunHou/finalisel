digraph "DFG for'crackme' function" {
	Node0x7c7130[shape=record, label="  %5 = shl i32 %1, 1"];
	Node0x7c71a0[shape=record, label="  %6 = sub i32 %5, %3"];
	Node0x7c7210[shape=record, label="  %7 = xor i32 %2, %1"];
	Node0x7c72b0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x7c7320[shape=record, label="  %9 = xor i32 %2, -1"];
	Node0x7c7390[shape=record, label="  %10 = shl i32 %9, 1"];
	Node0x7c7400[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x7c74a0[shape=record, label="  %12 = xor i32 %1, 2147483647"];
	Node0x7c7510[shape=record, label="  %13 = and i32 %12, %2"];
	Node0x7c7580[shape=record, label="  %14 = and i32 %9, %1"];
	Node0x7c7620[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0x7c7690[shape=record, label="  %16 = and i32 %2, %1"];
	Node0x7c7700[shape=record, label="  %17 = xor i32 %3, %0"];
	Node0x7c7770[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x7c7810[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x7c7880[shape=record, label="  %20 = and i32 %3, %0"];
	Node0x7c78f0[shape=record, label="  %21 = shl i32 %3, 2"];
	Node0x7c7990[shape=record, label="  %22 = xor i32 %21, -4"];
	Node0x7c7a00[shape=record, label="  %23 = or i32 %3, %0"];
	Node0x7c7a70[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x7c7ae0[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x7c7b50[shape=record, label="  %26 = xor i32 %3, -1"];
	Node0x7c7bc0[shape=record, label="  %27 = and i32 %26, %0"];
	Node0x7c7c60[shape=record, label="  %28 = mul i32 %27, 5"];
	Node0x7c7cd0[shape=record, label="  %29 = shl i32 %20, 2"];
	Node0x7c7d40[shape=record, label="  %30 = sub i32 %13, %2"];
	Node0x7c7db0[shape=record, label="  %31 = add i32 %30, %16"];
	Node0x7c7e20[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0x7c80a0[shape=record, label="  %33 = sub i32 %8, %7"];
	Node0x7c8110[shape=record, label="  %34 = add i32 %33, %11"];
	Node0x7c8180[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x7c81f0[shape=record, label="  %36 = sub i32 %35, %17"];
	Node0x7c8260[shape=record, label="  %37 = add i32 %36, %20"];
	Node0x7c82d0[shape=record, label="  %38 = sub i32 %37, %22"];
	Node0x7c8340[shape=record, label="  %39 = add i32 %38, %28"];
	Node0x7c83b0[shape=record, label="  %40 = sub i32 %39, %29"];
	Node0x7c8420[shape=record, label="  %41 = add i32 %40, %19"];
	Node0x7c8490[shape=record, label="  %42 = add i32 %41, %25"];
	Node0x7c8500[shape=record, label="  %43 = add i32 %42, %32"];
	Node0x7c8570[shape=record, label="  %44 = icmp eq i32 %6, %43"];
	Node0x767268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x7c8a10[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x7c8a60[shape=record, label="  ret void"];
	Node0x7c7130 -> Node0x7c71a0;
	Node0x7c71a0 -> Node0x7c7210;
	Node0x7c7210 -> Node0x7c72b0;
	Node0x7c72b0 -> Node0x7c7320;
	Node0x7c7320 -> Node0x7c7390;
	Node0x7c7390 -> Node0x7c7400;
	Node0x7c7400 -> Node0x7c74a0;
	Node0x7c74a0 -> Node0x7c7510;
	Node0x7c7510 -> Node0x7c7580;
	Node0x7c7580 -> Node0x7c7620;
	Node0x7c7620 -> Node0x7c7690;
	Node0x7c7690 -> Node0x7c7700;
	Node0x7c7700 -> Node0x7c7770;
	Node0x7c7770 -> Node0x7c7810;
	Node0x7c7810 -> Node0x7c7880;
	Node0x7c7880 -> Node0x7c78f0;
	Node0x7c78f0 -> Node0x7c7990;
	Node0x7c7990 -> Node0x7c7a00;
	Node0x7c7a00 -> Node0x7c7a70;
	Node0x7c7a70 -> Node0x7c7ae0;
	Node0x7c7ae0 -> Node0x7c7b50;
	Node0x7c7b50 -> Node0x7c7bc0;
	Node0x7c7bc0 -> Node0x7c7c60;
	Node0x7c7c60 -> Node0x7c7cd0;
	Node0x7c7cd0 -> Node0x7c7d40;
	Node0x7c7d40 -> Node0x7c7db0;
	Node0x7c7db0 -> Node0x7c7e20;
	Node0x7c7e20 -> Node0x7c80a0;
	Node0x7c80a0 -> Node0x7c8110;
	Node0x7c8110 -> Node0x7c8180;
	Node0x7c8180 -> Node0x7c81f0;
	Node0x7c81f0 -> Node0x7c8260;
	Node0x7c8260 -> Node0x7c82d0;
	Node0x7c82d0 -> Node0x7c8340;
	Node0x7c8340 -> Node0x7c83b0;
	Node0x7c83b0 -> Node0x7c8420;
	Node0x7c8420 -> Node0x7c8490;
	Node0x7c8490 -> Node0x7c8500;
	Node0x7c8500 -> Node0x7c8570;
	Node0x7c8570 -> Node0x767268;
	Node0x767268 -> Node0x7c8a10;
	Node0x7c8a10 -> Node0x7c8a60;
edge [color=red]
	Node0x7c7130 -> Node0x7c71a0;
	Node0x7c7210 -> Node0x7c72b0;
	Node0x7c7320 -> Node0x7c7390;
	Node0x7c7390 -> Node0x7c7400;
	Node0x7c74a0 -> Node0x7c7510;
	Node0x7c7320 -> Node0x7c7580;
	Node0x7c7580 -> Node0x7c7620;
	Node0x7c7700 -> Node0x7c7770;
	Node0x7c7770 -> Node0x7c7810;
	Node0x7c78f0 -> Node0x7c7990;
	Node0x7c7a00 -> Node0x7c7a70;
	Node0x7c7a70 -> Node0x7c7ae0;
	Node0x7c7b50 -> Node0x7c7bc0;
	Node0x7c7bc0 -> Node0x7c7c60;
	Node0x7c7880 -> Node0x7c7cd0;
	Node0x7c7510 -> Node0x7c7d40;
	Node0x7c7d40 -> Node0x7c7db0;
	Node0x7c7690 -> Node0x7c7db0;
	Node0x7c7db0 -> Node0x7c7e20;
	Node0x7c72b0 -> Node0x7c80a0;
	Node0x7c7210 -> Node0x7c80a0;
	Node0x7c80a0 -> Node0x7c8110;
	Node0x7c7400 -> Node0x7c8110;
	Node0x7c8110 -> Node0x7c8180;
	Node0x7c7620 -> Node0x7c8180;
	Node0x7c8180 -> Node0x7c81f0;
	Node0x7c7700 -> Node0x7c81f0;
	Node0x7c81f0 -> Node0x7c8260;
	Node0x7c7880 -> Node0x7c8260;
	Node0x7c8260 -> Node0x7c82d0;
	Node0x7c7990 -> Node0x7c82d0;
	Node0x7c82d0 -> Node0x7c8340;
	Node0x7c7c60 -> Node0x7c8340;
	Node0x7c8340 -> Node0x7c83b0;
	Node0x7c7cd0 -> Node0x7c83b0;
	Node0x7c83b0 -> Node0x7c8420;
	Node0x7c7810 -> Node0x7c8420;
	Node0x7c8420 -> Node0x7c8490;
	Node0x7c7ae0 -> Node0x7c8490;
	Node0x7c8490 -> Node0x7c8500;
	Node0x7c7e20 -> Node0x7c8500;
	Node0x7c71a0 -> Node0x7c8570;
	Node0x7c8500 -> Node0x7c8570;
	Node0x7c8570 -> Node0x767268;
	Node0x767268 -> Node0x7c8a10;
}
