; ModuleID = '../.././c_source_file/0095_path_condition_crackme.c'
source_filename = "../.././c_source_file/0095_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %8, %1
  %10 = and i32 %5, %3
  %11 = or i32 %10, %4
  %12 = sub i32 %9, %11
  %13 = xor i32 %1, -1
  %14 = and i32 %13, %0
  %15 = and i32 %2, %1
  %16 = or i32 %15, %14
  %17 = or i32 %1, %0
  %18 = xor i32 %2, %1
  %19 = xor i32 %18, -1
  %20 = and i32 %17, %19
  %21 = or i32 %2, %0
  %22 = xor i32 %21, %1
  %23 = xor i32 %2, -1
  %24 = or i32 %13, %0
  %25 = and i32 %24, %23
  %26 = xor i32 %17, -1
  %27 = xor i32 %26, %2
  %28 = xor i32 %15, -1
  %29 = and i32 %28, %0
  %30 = xor i32 %1, %0
  %31 = xor i32 %30, -1
  %32 = and i32 %31, %2
  %33 = and i32 %17, %2
  %34 = and i32 %13, %2
  %35 = and i32 %34, %0
  %36 = or i32 %18, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %35, %37
  %39 = or i32 %8, %26
  %40 = xor i32 %0, -1
  %41 = and i32 %34, %40
  %42 = or i32 %18, %40
  %43 = xor i32 %41, %42
  %44 = shl i32 %43, 1
  %45 = and i32 %15, %40
  %46 = or i32 %2, %1
  %47 = and i32 %46, %0
  %48 = or i32 %45, %47
  %49 = and i32 %23, %0
  %50 = xor i32 %49, -1
  %51 = and i32 %50, %1
  %52 = and i32 %15, %0
  %53 = and i32 %46, %40
  %54 = or i32 %52, %53
  %55 = and i32 %23, %1
  %56 = xor i32 %55, -1
  %57 = xor i32 %14, %56
  %58 = and i32 %1, %0
  %59 = or i32 %18, %58
  %60 = xor i32 %24, -1
  %61 = or i32 %19, %60
  %62 = and i32 %2, %0
  %63 = or i32 %62, %26
  %64 = xor i32 %58, -1
  %65 = and i32 %8, %64
  %66 = xor i32 %62, -1
  %67 = and i32 %30, %66
  %68 = and i32 %17, %8
  %69 = xor i32 %14, -1
  %70 = and i32 %19, %69
  %71 = and i32 %18, %64
  %72 = and i32 %7, %1
  %73 = shl i32 %72, 1
  %74 = xor i32 %18, %0
  %75 = or i32 %35, %74
  %76 = or i32 %60, %2
  %77 = or i32 %28, %40
  %78 = shl i32 %77, 1
  %79 = or i32 %58, %19
  %80 = and i32 %7, %31
  %81 = or i32 %7, %31
  %82 = shl i32 %81, 1
  %83 = xor i32 %24, %2
  %84 = or i32 %23, %1
  %85 = and i32 %84, %40
  %86 = or i32 %19, %26
  %87 = and i32 %18, %17
  %88 = xor i32 %21, -1
  %89 = or i32 %88, %13
  %90 = or i32 %62, %55
  %91 = or i32 %18, %14
  %92 = xor i32 %84, %0
  %93 = or i32 %58, %23
  %94 = xor i32 %74, -1
  %95 = or i32 %52, %94
  %96 = and i32 %18, %24
  %97 = shl i32 %96, 1
  %98 = xor i32 %62, %24
  %99 = xor i32 %42, 2147483647
  %100 = or i32 %99, %41
  %101 = and i32 %19, %0
  %102 = or i32 %8, %13
  %103 = add i32 %24, 1
  %104 = and i32 %66, %31
  %105 = xor i32 %62, %46
  %106 = and i32 %7, %30
  %107 = xor i32 %46, -1
  %108 = or i32 %23, %0
  %109 = xor i32 %108, -1
  %110 = or i32 %18, %60
  %111 = and i32 %18, %40
  %112 = or i32 %52, %111
  %113 = shl i32 %112, 1
  %114 = xor i32 %14, %2
  %115 = shl i32 %114, 1
  %116 = xor i32 %60, %2
  %117 = xor i32 %56, %0
  %118 = or i32 %13, %2
  %119 = and i32 %118, %0
  %120 = xor i32 %119, -1
  %121 = xor i32 %41, %120
  %122 = or i32 %8, %31
  %123 = or i32 %15, %40
  %124 = and i32 %7, %17
  %125 = or i32 %30, %23
  %126 = xor i32 %46, %0
  %127 = xor i32 %126, -1
  %128 = xor i32 %52, %127
  %129 = and i32 %24, %19
  %130 = or i32 %49, %31
  %131 = xor i32 %107, %0
  %132 = or i32 %55, %40
  %133 = and i32 %69, %2
  %134 = xor i32 %108, %58
  %135 = and i32 %30, %50
  %136 = or i32 %7, %58
  %137 = shl i32 %136, 1
  %138 = or i32 %62, %107
  %139 = and i32 %21, %31
  %140 = or i32 %23, %60
  %141 = and i32 %50, %13
  %142 = or i32 %58, %2
  %143 = or i32 %30, %8
  %144 = or i32 %55, %14
  %145 = and i32 %7, %64
  %146 = xor i32 %49, %1
  %147 = or i32 %30, %109
  %148 = xor i32 %46, %58
  %149 = shl i32 %69, 1
  %150 = and i32 %108, %1
  %151 = or i32 %46, %0
  %152 = and i32 %55, %40
  %153 = and i32 %107, %0
  %154 = and i32 %55, %0
  %155 = xor i32 %84, -1
  %156 = and i32 %155, %40
  %157 = and i32 %155, %0
  %158 = xor i32 %4, -1
  %159 = xor i32 %5, -1
  %160 = or i32 %159, %3
  %161 = or i32 %160, %158
  %162 = or i32 %5, %3
  %163 = shl i32 %162, 1
  %164 = xor i32 %3, -1
  %165 = and i32 %164, %5
  %166 = and i32 %165, %4
  %167 = xor i32 %5, %3
  %168 = or i32 %167, %4
  %169 = xor i32 %166, %168
  %170 = and i32 %5, %4
  %171 = or i32 %164, %4
  %172 = xor i32 %171, -1
  %173 = or i32 %170, %172
  %174 = or i32 %4, %3
  %175 = xor i32 %174, -1
  %176 = xor i32 %5, %4
  %177 = or i32 %176, %175
  %178 = and i32 %4, %3
  %179 = or i32 %159, %4
  %180 = xor i32 %179, -1
  %181 = or i32 %178, %180
  %182 = and i32 %165, %158
  %183 = or i32 %167, %158
  %184 = xor i32 %182, %183
  %185 = or i32 %162, %4
  %186 = xor i32 %4, %3
  %187 = xor i32 %186, -1
  %188 = or i32 %180, %187
  %189 = and i32 %164, %4
  %190 = xor i32 %167, -1
  %191 = or i32 %189, %190
  %192 = or i32 %167, %172
  %193 = xor i32 %189, -1
  %194 = and i32 %176, %193
  %195 = shl i32 %194, 1
  %196 = and i32 %190, %158
  %197 = xor i32 %168, -1
  %198 = or i32 %166, %197
  %199 = or i32 %176, %172
  %200 = xor i32 %172, %5
  %201 = shl i32 %200, 2
  %202 = or i32 %5, %4
  %203 = or i32 %167, %189
  %204 = or i32 %167, %175
  %205 = xor i32 %162, %178
  %206 = shl i32 %205, 1
  %207 = and i32 %193, %5
  %208 = and i32 %10, %4
  %209 = and i32 %167, %158
  %210 = or i32 %208, %209
  %211 = xor i32 %178, -1
  %212 = or i32 %190, %175
  %213 = xor i32 %176, -1
  %214 = and i32 %174, %213
  %215 = shl i32 %214, 1
  %216 = and i32 %167, %211
  %217 = or i32 %159, %187
  %218 = xor i32 %160, -1
  %219 = or i32 %218, %158
  %220 = and i32 %160, %158
  %221 = xor i32 %162, -1
  %222 = or i32 %221, %158
  %223 = xor i32 %180, %3
  %224 = xor i32 %170, %171
  %225 = shl i32 %224, 1
  %226 = or i32 %159, %172
  %227 = or i32 %190, %4
  %228 = or i32 %178, %5
  %229 = shl i32 %187, 1
  %230 = or i32 %178, %213
  %231 = and i32 %159, %3
  %232 = or i32 %170, %231
  %233 = and i32 %167, %4
  %234 = xor i32 %189, %5
  %235 = and i32 %162, %158
  %236 = or i32 %172, %5
  %237 = or i32 %159, %175
  %238 = or i32 %213, %3
  %239 = or i32 %167, %178
  %240 = xor i32 %167, %4
  %241 = or i32 %166, %240
  %242 = and i32 %171, %159
  %243 = xor i32 %240, -1
  %244 = or i32 %208, %243
  %245 = xor i32 %10, -1
  %246 = or i32 %245, %4
  %247 = and i32 %171, %190
  %248 = xor i32 %170, -1
  %249 = xor i32 %248, %3
  %250 = or i32 %189, %213
  %251 = xor i32 %162, %4
  %252 = or i32 %208, %251
  %253 = shl i32 %252, 1
  %254 = and i32 %159, %211
  %255 = shl i32 %254, 1
  %256 = and i32 %10, %158
  %257 = or i32 %256, %233
  %258 = or i32 %178, %159
  %259 = and i32 %159, %4
  %260 = xor i32 %259, -1
  %261 = and i32 %260, %164
  %262 = or i32 %186, %159
  %263 = and i32 %171, %5
  %264 = and i32 %176, %174
  %265 = xor i32 %231, -1
  %266 = xor i32 %189, %265
  %267 = or i32 %213, %175
  %268 = or i32 %190, %158
  %269 = or i32 %178, %190
  %270 = or i32 %231, %4
  %271 = and i32 %162, %4
  %272 = xor i32 %271, -1
  %273 = xor i32 %256, %272
  %274 = or i32 %164, %5
  %275 = xor i32 %274, %4
  %276 = or i32 %166, %275
  %277 = and i32 %202, %187
  %278 = and i32 %190, %4
  %279 = or i32 %189, %5
  %280 = and i32 %202, %164
  %281 = add i32 %176, 1
  %282 = xor i32 %265, %4
  %283 = or i32 %259, %186
  %284 = and i32 %174, %190
  %285 = and i32 %213, %187
  %286 = shl i32 %271, 2
  %287 = or i32 %180, %3
  %288 = or i32 %175, %5
  %289 = shl i32 %288, 1
  %290 = and i32 %245, %4
  %291 = xor i32 %175, %5
  %292 = and i32 %202, %186
  %293 = and i32 %159, %193
  %294 = shl i32 %293, 1
  %295 = and i32 %213, %3
  %296 = and i32 %179, %186
  %297 = or i32 %162, %158
  %298 = xor i32 %170, %265
  %299 = or i32 %213, %172
  %300 = xor i32 %211, %5
  %301 = or i32 %186, %5
  %302 = or i32 %170, %175
  %303 = or i32 %245, %158
  %304 = and i32 %186, %213
  %305 = shl i32 %304, 1
  %306 = or i32 %221, %4
  %307 = or i32 %213, %164
  %308 = and i32 %265, %4
  %309 = shl i32 %167, 1
  %310 = or i32 %259, %164
  %311 = and i32 %248, %187
  %312 = xor i32 %245, %4
  %313 = and i32 %176, %186
  %314 = or i32 %170, %187
  %315 = and i32 %167, %174
  %316 = xor i32 %160, %4
  %317 = and i32 %176, %187
  %318 = and i32 %274, %4
  %319 = or i32 %182, %318
  %320 = and i32 %221, %158
  %321 = mul i32 %320, -15
  %322 = and i32 %231, %158
  %323 = and i32 %221, %4
  %324 = mul i32 %323, -20
  %325 = and i32 %231, %4
  %326 = and i32 %218, %158
  %327 = shl i32 %326, 3
  %328 = and i32 %218, %4
  %329 = shl i32 %328, 4
  %330 = mul i32 %208, -14
  %331 = add i32 %25, %84
  %332 = add i32 %331, %156
  %333 = add i32 %332, %111
  %334 = add i32 %333, %135
  %335 = add i32 %334, %131
  %336 = add i32 %335, %117
  %337 = add i32 %336, %104
  %338 = add i32 %337, %98
  %339 = add i32 %338, %87
  %340 = add i32 %339, %159
  %341 = add i32 %340, %186
  %342 = add i32 %341, %301
  %343 = add i32 %342, %100
  %344 = add i32 %343, %307
  %345 = add i32 %344, %317
  %346 = add i32 %345, %269
  %347 = add i32 %346, %232
  %348 = add i32 %347, %220
  %349 = add i32 %348, %177
  %350 = add i32 %349, %161
  %351 = shl i32 %350, 1
  %352 = sub i32 %52, %14
  %353 = sub i32 %352, %157
  %354 = sub i32 %353, %147
  %355 = sub i32 %354, %5
  %356 = add i32 %355, %188
  %357 = sub i32 %356, %264
  %358 = mul i32 %357, 3
  %359 = add i32 %300, %189
  %360 = add i32 %359, %311
  %361 = add i32 %360, %315
  %362 = add i32 %361, %295
  %363 = shl i32 %362, 2
  %364 = sub i32 %207, %262
  %365 = add i32 %364, %190
  %366 = mul i32 %365, 5
  %367 = add i32 %322, %154
  %368 = sub i32 %367, %325
  %369 = mul i32 %368, 6
  %370 = or i32 %45, %153
  %371 = mul i32 %370, 12
  %372 = sub i32 %152, %256
  %373 = mul i32 %372, 7
  %374 = add i32 %1, %0
  %375 = add i32 %374, %24
  %376 = sub i32 %103, %375
  %377 = add i32 %376, %2
  %378 = add i32 %377, %27
  %379 = add i32 %378, %32
  %380 = add i32 %379, %33
  %381 = add i32 %380, %76
  %382 = sub i32 %381, %83
  %383 = sub i32 %382, %93
  %384 = add i32 %383, %21
  %385 = add i32 %384, %109
  %386 = sub i32 %385, %116
  %387 = sub i32 %386, %125
  %388 = add i32 %387, %133
  %389 = sub i32 %388, %140
  %390 = add i32 %389, %142
  %391 = sub i32 %390, %149
  %392 = add i32 %391, %164
  %393 = add i32 %392, %20
  %394 = add i32 %393, %16
  %395 = sub i32 %394, %22
  %396 = sub i32 %395, %29
  %397 = add i32 %396, %39
  %398 = sub i32 %397, %51
  %399 = sub i32 %398, %53
  %400 = sub i32 %399, %57
  %401 = sub i32 %400, %59
  %402 = add i32 %401, %61
  %403 = add i32 %402, %63
  %404 = sub i32 %403, %65
  %405 = add i32 %404, %67
  %406 = add i32 %405, %68
  %407 = add i32 %406, %70
  %408 = add i32 %407, %71
  %409 = sub i32 %408, %79
  %410 = sub i32 %409, %80
  %411 = sub i32 %410, %85
  %412 = sub i32 %411, %86
  %413 = add i32 %412, %89
  %414 = add i32 %413, %90
  %415 = add i32 %414, %91
  %416 = add i32 %415, %92
  %417 = sub i32 %416, %101
  %418 = add i32 %417, %102
  %419 = add i32 %418, %105
  %420 = add i32 %419, %106
  %421 = sub i32 %420, %110
  %422 = sub i32 %421, %115
  %423 = add i32 %422, %122
  %424 = sub i32 %423, %123
  %425 = sub i32 %424, %124
  %426 = sub i32 %425, %129
  %427 = add i32 %426, %126
  %428 = sub i32 %427, %130
  %429 = sub i32 %428, %132
  %430 = sub i32 %429, %134
  %431 = add i32 %430, %138
  %432 = add i32 %431, %139
  %433 = add i32 %432, %141
  %434 = sub i32 %433, %143
  %435 = add i32 %434, %144
  %436 = sub i32 %435, %145
  %437 = sub i32 %436, %146
  %438 = add i32 %437, %148
  %439 = sub i32 %438, %150
  %440 = add i32 %439, %151
  %441 = add i32 %440, 1
  %442 = sub i32 %441, %38
  %443 = sub i32 %442, %48
  %444 = sub i32 %443, %54
  %445 = sub i32 %444, %73
  %446 = sub i32 %445, %75
  %447 = sub i32 %446, %78
  %448 = sub i32 %447, %82
  %449 = add i32 %448, %95
  %450 = sub i32 %449, %97
  %451 = add i32 %450, %121
  %452 = add i32 %451, %128
  %453 = sub i32 %452, %137
  %454 = add i32 %453, %174
  %455 = add i32 %454, %189
  %456 = add i32 %455, %174
  %457 = add i32 %456, 3
  %458 = sub i32 %457, %44
  %459 = sub i32 %458, %113
  %460 = sub i32 %459, %179
  %461 = add i32 %460, %202
  %462 = sub i32 %461, %217
  %463 = add i32 %462, %226
  %464 = add i32 %463, %228
  %465 = sub i32 %464, %229
  %466 = sub i32 %465, %234
  %467 = sub i32 %466, %236
  %468 = add i32 %467, %237
  %469 = add i32 %468, %242
  %470 = add i32 %469, %258
  %471 = add i32 %470, %263
  %472 = sub i32 %471, %279
  %473 = add i32 %472, %281
  %474 = sub i32 %473, %160
  %475 = add i32 %474, %291
  %476 = add i32 %475, %180
  %477 = add i32 %476, %371
  %478 = sub i32 %477, %163
  %479 = sub i32 %478, %173
  %480 = add i32 %479, %181
  %481 = sub i32 %480, %185
  %482 = add i32 %481, %191
  %483 = sub i32 %482, %192
  %484 = add i32 %483, %196
  %485 = add i32 %484, %199
  %486 = sub i32 %485, %201
  %487 = add i32 %486, %203
  %488 = sub i32 %487, %204
  %489 = add i32 %488, %212
  %490 = sub i32 %489, %216
  %491 = add i32 %490, %219
  %492 = add i32 %491, %222
  %493 = add i32 %492, %223
  %494 = add i32 %493, %227
  %495 = sub i32 %494, %230
  %496 = sub i32 %495, %233
  %497 = sub i32 %496, %235
  %498 = add i32 %497, %238
  %499 = add i32 %498, %239
  %500 = add i32 %499, %246
  %501 = add i32 %500, %247
  %502 = add i32 %501, %249
  %503 = add i32 %502, %250
  %504 = sub i32 %503, %255
  %505 = sub i32 %504, %261
  %506 = sub i32 %505, %266
  %507 = sub i32 %506, %267
  %508 = sub i32 %507, %268
  %509 = add i32 %508, %270
  %510 = sub i32 %509, %277
  %511 = add i32 %510, %278
  %512 = sub i32 %511, %280
  %513 = add i32 %512, %282
  %514 = sub i32 %513, %283
  %515 = add i32 %514, %284
  %516 = add i32 %515, %285
  %517 = add i32 %516, %287
  %518 = sub i32 %517, %289
  %519 = sub i32 %518, %290
  %520 = sub i32 %519, %292
  %521 = sub i32 %520, %294
  %522 = sub i32 %521, %296
  %523 = sub i32 %522, %297
  %524 = sub i32 %523, %298
  %525 = sub i32 %524, %299
  %526 = sub i32 %525, %302
  %527 = sub i32 %526, %303
  %528 = add i32 %527, %306
  %529 = add i32 %528, %308
  %530 = sub i32 %529, %309
  %531 = sub i32 %530, %310
  %532 = sub i32 %531, %209
  %533 = sub i32 %532, %312
  %534 = sub i32 %533, %313
  %535 = sub i32 %534, %314
  %536 = sub i32 %535, %316
  %537 = add i32 %536, %169
  %538 = add i32 %537, %184
  %539 = sub i32 %538, %195
  %540 = add i32 %539, %198
  %541 = sub i32 %540, %206
  %542 = sub i32 %541, %210
  %543 = sub i32 %542, %215
  %544 = sub i32 %543, %225
  %545 = add i32 %544, %241
  %546 = add i32 %545, %244
  %547 = add i32 %546, %257
  %548 = add i32 %547, %273
  %549 = add i32 %548, %276
  %550 = sub i32 %549, %286
  %551 = sub i32 %550, %305
  %552 = sub i32 %551, %319
  %553 = add i32 %552, %321
  %554 = add i32 %553, %324
  %555 = add i32 %554, %327
  %556 = add i32 %555, %329
  %557 = add i32 %556, %330
  %558 = sub i32 %557, %253
  %559 = add i32 %558, %366
  %560 = add i32 %559, %373
  %561 = add i32 %560, %369
  %562 = add i32 %561, %363
  %563 = add i32 %562, %358
  %564 = add i32 %563, %351
  %565 = icmp eq i32 %12, %564
  %566 = select i1 %565, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %567 = tail call i32 @puts(i8* nonnull dereferenceable(1) %566)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
