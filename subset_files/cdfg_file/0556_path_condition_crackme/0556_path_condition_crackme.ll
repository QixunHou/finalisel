; ModuleID = '../.././c_source_file/0556_path_condition_crackme.c'
source_filename = "../.././c_source_file/0556_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = or i32 %2, %1
  %9 = xor i32 %7, %8
  %10 = xor i32 %3, -1
  %11 = or i32 %10, %4
  %12 = xor i32 %5, %4
  %13 = and i32 %12, %11
  %14 = add i32 %13, %9
  %15 = sub i32 0, %14
  %16 = xor i32 %2, -1
  %17 = and i32 %16, %0
  %18 = xor i32 %17, -1
  %19 = and i32 %18, %1
  %20 = xor i32 %1, -1
  %21 = and i32 %20, %0
  %22 = and i32 %16, %1
  %23 = xor i32 %22, -1
  %24 = xor i32 %21, %23
  %25 = or i32 %20, %0
  %26 = xor i32 %25, %2
  %27 = xor i32 %2, %1
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %0
  %30 = or i32 %16, %0
  %31 = xor i32 %30, -1
  %32 = add i32 %30, 1
  %33 = xor i32 %7, -1
  %34 = and i32 %33, %20
  %35 = xor i32 %21, -1
  %36 = and i32 %16, %35
  %37 = xor i32 %0, -1
  %38 = and i32 %23, %37
  %39 = or i32 %2, %0
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %20
  %42 = xor i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %43
  %47 = shl i32 %46, 1
  %48 = and i32 %2, %1
  %49 = and i32 %48, %0
  %50 = and i32 %27, %37
  %51 = or i32 %49, %50
  %52 = and i32 %1, %0
  %53 = xor i32 %8, -1
  %54 = or i32 %52, %53
  %55 = xor i32 %25, -1
  %56 = or i32 %27, %55
  %57 = shl i32 %56, 1
  %58 = or i32 %55, %2
  %59 = xor i32 %27, %0
  %60 = or i32 %44, %42
  %61 = shl i32 %60, 1
  %62 = xor i32 %39, %52
  %63 = shl i32 %62, 1
  %64 = or i32 %27, %37
  %65 = shl i32 %64, 1
  %66 = and i32 %30, %42
  %67 = shl i32 %66, 2
  %68 = or i32 %22, %37
  %69 = add i32 %1, 1
  %70 = xor i32 %48, -1
  %71 = and i32 %20, %2
  %72 = and i32 %71, %0
  %73 = or i32 %27, %0
  %74 = xor i32 %72, %73
  %75 = or i32 %42, %31
  %76 = and i32 %28, %35
  %77 = or i32 %48, %0
  %78 = xor i32 %30, %52
  %79 = and i32 %8, %37
  %80 = or i32 %1, %0
  %81 = and i32 %80, %2
  %82 = or i32 %27, %52
  %83 = or i32 %42, %2
  %84 = or i32 %23, %37
  %85 = xor i32 %8, %52
  %86 = xor i32 %33, %1
  %87 = or i32 %52, %40
  %88 = and i32 %27, %0
  %89 = and i32 %43, %2
  %90 = and i32 %30, %1
  %91 = add i32 %17, 1
  %92 = xor i32 %17, %1
  %93 = xor i32 %80, %2
  %94 = and i32 %16, %43
  %95 = or i32 %16, %1
  %96 = or i32 %95, %0
  %97 = shl i32 %96, 2
  %98 = and i32 %28, %37
  %99 = xor i32 %80, -1
  %100 = xor i32 %99, %2
  %101 = or i32 %45, %20
  %102 = and i32 %25, %2
  %103 = or i32 %8, %37
  %104 = or i32 %16, %55
  %105 = xor i32 %70, %0
  %106 = and i32 %25, %45
  %107 = xor i32 %52, -1
  %108 = and i32 %27, %107
  %109 = or i32 %7, %99
  %110 = shl i32 %109, 1
  %111 = and i32 %39, %20
  %112 = shl i32 %39, 1
  %113 = or i32 %52, %16
  %114 = or i32 %52, %31
  %115 = or i32 %53, %0
  %116 = and i32 %45, %107
  %117 = or i32 %17, %42
  %118 = shl i32 %117, 1
  %119 = or i32 %22, %21
  %120 = xor i32 %95, -1
  %121 = or i32 %120, %0
  %122 = add i32 %27, 1
  %123 = and i32 %45, %43
  %124 = and i32 %71, %37
  %125 = xor i32 %124, %64
  %126 = and i32 %80, %45
  %127 = xor i32 %39, %1
  %128 = and i32 %25, %28
  %129 = xor i32 %21, %2
  %130 = or i32 %52, %2
  %131 = and i32 %28, %107
  %132 = add i32 %25, 1
  %133 = xor i32 %95, %0
  %134 = or i32 %52, %45
  %135 = and i32 %27, %35
  %136 = or i32 %48, %21
  %137 = or i32 %44, %1
  %138 = xor i32 %7, %1
  %139 = or i32 %28, %99
  %140 = and i32 %27, %80
  %141 = or i32 %23, %0
  %142 = or i32 %7, %42
  %143 = shl i32 %142, 1
  %144 = and i32 %30, %20
  %145 = or i32 %20, %2
  %146 = xor i32 %145, %0
  %147 = xor i32 %72, -1
  %148 = xor i32 %146, %147
  %149 = and i32 %48, %37
  %150 = and i32 %8, %0
  %151 = or i32 %149, %150
  %152 = or i32 %48, %37
  %153 = and i32 %107, %2
  %154 = or i32 %45, %55
  %155 = and i32 %39, %1
  %156 = and i32 %23, %0
  %157 = or i32 %53, %37
  %158 = xor i32 %7, %80
  %159 = and i32 %95, %37
  %160 = and i32 %95, %0
  %161 = xor i32 %49, %59
  %162 = and i32 %80, %16
  %163 = or i32 %16, %43
  %164 = xor i32 %120, %0
  %165 = xor i32 %64, -1
  %166 = or i32 %124, %165
  %167 = or i32 %70, %37
  %168 = shl i32 %167, 1
  %169 = and i32 %70, %37
  %170 = and i32 %44, %107
  %171 = and i32 %33, %1
  %172 = xor i32 %23, %0
  %173 = shl i32 %172, 1
  %174 = xor i32 %7, %23
  %175 = shl i32 %174, 1
  %176 = or i32 %17, %120
  %177 = shl i32 %176, 1
  %178 = or i32 %40, %1
  %179 = shl i32 %178, 2
  %180 = and i32 %42, %16
  %181 = xor i32 %30, %1
  %182 = or i32 %99, %2
  %183 = or i32 %44, %99
  %184 = and i32 %44, %25
  %185 = or i32 %42, %40
  %186 = and i32 %42, %45
  %187 = xor i32 %7, %25
  %188 = shl i32 %42, 1
  %189 = and i32 %39, %42
  %190 = xor i32 %8, %0
  %191 = or i32 %49, %190
  %192 = and i32 %145, %37
  %193 = xor i32 %192, %147
  %194 = or i32 %8, %0
  %195 = shl i32 %194, 1
  %196 = or i32 %44, %55
  %197 = and i32 %18, %20
  %198 = or i32 %149, %88
  %199 = and i32 %42, %33
  %200 = shl i32 %199, 1
  %201 = or i32 %72, %59
  %202 = shl i32 %201, 1
  %203 = and i32 %44, %80
  %204 = xor i32 %48, %0
  %205 = shl i32 %204, 1
  %206 = or i32 %7, %55
  %207 = or i32 %31, %20
  %208 = and i32 %44, %1
  %209 = or i32 %44, %21
  %210 = xor i32 %21, %70
  %211 = xor i32 %55, %2
  %212 = and i32 %27, %25
  %213 = shl i32 %99, 1
  %214 = and i32 %44, %35
  %215 = or i32 %17, %48
  %216 = or i32 %40, %43
  %217 = xor i32 %107, %2
  %218 = shl i32 %217, 1
  %219 = or i32 %44, %43
  %220 = and i32 %16, %107
  %221 = and i32 %80, %28
  %222 = or i32 %70, %0
  %223 = shl i32 %222, 1
  %224 = or i32 %72, %146
  %225 = add i32 %22, 1
  %226 = and i32 %45, %1
  %227 = xor i32 %22, %0
  %228 = or i32 %72, %192
  %229 = xor i32 %35, %2
  %230 = shl i32 %229, 1
  %231 = xor i32 %52, %2
  %232 = and i32 %145, %0
  %233 = xor i32 %232, -1
  %234 = xor i32 %124, %233
  %235 = or i32 %52, %120
  %236 = or i32 %52, %28
  %237 = xor i32 %79, 2147483647
  %238 = xor i32 %237, %49
  %239 = shl i32 %238, 1
  %240 = or i32 %21, %28
  %241 = and i32 %33, %43
  %242 = or i32 %27, %21
  %243 = or i32 %7, %1
  %244 = and i32 %30, %43
  %245 = or i32 %31, %1
  %246 = and i32 %45, %20
  %247 = or i32 %22, %0
  %248 = shl i32 %247, 1
  %249 = and i32 %39, %43
  %250 = or i32 %17, %43
  %251 = xor i32 %18, %1
  %252 = shl i32 %251, 1
  %253 = and i32 %44, %20
  %254 = or i32 %124, %232
  %255 = xor i32 %17, %70
  %256 = or i32 %28, %37
  %257 = xor i32 %150, -1
  %258 = xor i32 %149, %257
  %259 = xor i32 %95, %52
  %260 = shl i32 %259, 1
  %261 = or i32 %31, %43
  %262 = shl i32 %261, 1
  %263 = and i32 %44, %42
  %264 = and i32 %35, %2
  %265 = shl i32 %264, 2
  %266 = or i32 %21, %16
  %267 = and i32 %42, %18
  %268 = and i32 %45, %35
  %269 = xor i32 %59, %147
  %270 = and i32 %70, %0
  %271 = or i32 %7, %43
  %272 = or i32 %17, %1
  %273 = xor i32 %40, %1
  %274 = xor i32 %73, 2147483647
  %275 = or i32 %274, %72
  %276 = or i32 %7, %20
  %277 = or i32 %21, %45
  %278 = shl i32 %277, 1
  %279 = or i32 %16, %99
  %280 = xor i32 %17, %95
  %281 = or i32 %44, %20
  %282 = or i32 %17, %20
  %283 = and i32 %53, %37
  %284 = and i32 %22, %37
  %285 = mul i32 %284, 22
  %286 = and i32 %53, %0
  %287 = mul i32 %286, 19
  %288 = and i32 %22, %0
  %289 = mul i32 %288, 14
  %290 = and i32 %120, %37
  %291 = shl i32 %149, 4
  %292 = and i32 %120, %0
  %293 = mul i32 %292, 31
  %294 = mul i32 %49, 24
  %295 = xor i32 %4, -1
  %296 = and i32 %5, %3
  %297 = xor i32 %296, -1
  %298 = or i32 %297, %295
  %299 = xor i32 %5, -1
  %300 = and i32 %299, %4
  %301 = xor i32 %300, %3
  %302 = or i32 %5, %3
  %303 = xor i32 %302, -1
  %304 = or i32 %303, %295
  %305 = or i32 %5, %4
  %306 = xor i32 %305, -1
  %307 = or i32 %306, %3
  %308 = xor i32 %300, -1
  %309 = add i32 %300, 1
  %310 = or i32 %4, %3
  %311 = xor i32 %310, %5
  %312 = and i32 %5, %4
  %313 = xor i32 %11, -1
  %314 = or i32 %312, %313
  %315 = or i32 %300, %10
  %316 = add i32 %302, 1
  %317 = and i32 %10, %5
  %318 = and i32 %317, %4
  %319 = or i32 %10, %5
  %320 = xor i32 %319, %295
  %321 = xor i32 %320, %318
  %322 = xor i32 %317, %4
  %323 = xor i32 %295, %3
  %324 = xor i32 %12, -1
  %325 = and i32 %323, %324
  %326 = and i32 %323, %308
  %327 = or i32 %295, %3
  %328 = xor i32 %5, %3
  %329 = xor i32 %328, -1
  %330 = and i32 %327, %329
  %331 = or i32 %328, %4
  %332 = xor i32 %318, %331
  %333 = shl i32 %332, 1
  %334 = and i32 %303, %295
  %335 = and i32 %295, %3
  %336 = and i32 %335, %299
  %337 = and i32 %303, %4
  %338 = and i32 %317, %295
  %339 = shl i32 %338, 1
  %340 = and i32 %296, %295
  %341 = and i32 %296, %4
  %342 = add i32 %22, %279
  %343 = add i32 %342, %93
  %344 = add i32 %343, %36
  %345 = add i32 %344, %150
  %346 = add i32 %345, %236
  %347 = add i32 %346, %226
  %348 = add i32 %347, %219
  %349 = add i32 %348, %215
  %350 = add i32 %349, %207
  %351 = add i32 %350, %203
  %352 = add i32 %351, %197
  %353 = add i32 %352, %138
  %354 = add i32 %353, %136
  %355 = add i32 %354, %121
  %356 = add i32 %355, %108
  %357 = add i32 %356, %191
  %358 = add i32 %357, %125
  %359 = add i32 %358, %275
  %360 = add i32 %359, %336
  %361 = shl i32 %360, 1
  %362 = sub i32 %243, %216
  %363 = sub i32 %362, %169
  %364 = add i32 %363, %127
  %365 = sub i32 %364, %78
  %366 = sub i32 %365, %24
  %367 = add i32 %366, %341
  %368 = mul i32 %367, 5
  %369 = add i32 %290, %283
  %370 = mul i32 %369, 28
  %371 = xor i32 %83, -1
  %372 = add i32 %44, %371
  %373 = add i32 %372, %81
  %374 = add i32 %373, %87
  %375 = sub i32 %374, %241
  %376 = mul i32 %375, 3
  %377 = sub i32 %69, %0
  %378 = add i32 %377, %25
  %379 = add i32 %378, %107
  %380 = add i32 %379, %132
  %381 = sub i32 %380, %52
  %382 = sub i32 %381, %80
  %383 = sub i32 %382, %26
  %384 = add i32 %383, %32
  %385 = add i32 %384, %8
  %386 = add i32 %385, %58
  %387 = add i32 %386, %70
  %388 = add i32 %387, %89
  %389 = add i32 %388, %91
  %390 = add i32 %389, %94
  %391 = sub i32 %390, %100
  %392 = add i32 %391, %102
  %393 = add i32 %392, %104
  %394 = add i32 %393, %113
  %395 = add i32 %394, %122
  %396 = add i32 %395, %129
  %397 = sub i32 %396, %130
  %398 = add i32 %397, %40
  %399 = sub i32 %398, %48
  %400 = sub i32 %399, %153
  %401 = add i32 %400, %162
  %402 = add i32 %401, %163
  %403 = sub i32 %402, %180
  %404 = add i32 %403, %182
  %405 = sub i32 %404, %188
  %406 = sub i32 %405, %211
  %407 = sub i32 %406, %213
  %408 = add i32 %407, %220
  %409 = add i32 %408, %225
  %410 = sub i32 %409, %231
  %411 = add i32 %410, %266
  %412 = sub i32 %411, %30
  %413 = sub i32 %412, %17
  %414 = sub i32 %413, %19
  %415 = add i32 %414, %29
  %416 = sub i32 %415, %34
  %417 = sub i32 %416, %38
  %418 = add i32 %417, %41
  %419 = sub i32 %418, %54
  %420 = add i32 %419, %59
  %421 = add i32 %420, %68
  %422 = add i32 %421, %75
  %423 = sub i32 %422, %76
  %424 = sub i32 %423, %77
  %425 = add i32 %424, %79
  %426 = sub i32 %425, %82
  %427 = sub i32 %426, %84
  %428 = add i32 %427, %85
  %429 = add i32 %428, %86
  %430 = add i32 %429, %88
  %431 = sub i32 %430, %90
  %432 = sub i32 %431, %92
  %433 = sub i32 %432, %98
  %434 = sub i32 %433, %101
  %435 = sub i32 %434, %103
  %436 = sub i32 %435, %105
  %437 = add i32 %436, %106
  %438 = sub i32 %437, %111
  %439 = sub i32 %438, %112
  %440 = sub i32 %439, %114
  %441 = sub i32 %440, %115
  %442 = add i32 %441, %116
  %443 = sub i32 %442, %119
  %444 = sub i32 %443, %123
  %445 = add i32 %444, %126
  %446 = add i32 %445, %128
  %447 = sub i32 %446, %131
  %448 = add i32 %447, %133
  %449 = sub i32 %448, %134
  %450 = sub i32 %449, %135
  %451 = sub i32 %450, %137
  %452 = add i32 %451, %139
  %453 = sub i32 %452, %140
  %454 = sub i32 %453, %141
  %455 = add i32 %454, %144
  %456 = sub i32 %455, %152
  %457 = sub i32 %456, %154
  %458 = sub i32 %457, %155
  %459 = add i32 %458, %156
  %460 = add i32 %459, %157
  %461 = sub i32 %460, %158
  %462 = sub i32 %461, %159
  %463 = add i32 %462, %160
  %464 = add i32 %463, %164
  %465 = add i32 %464, %170
  %466 = sub i32 %465, %171
  %467 = add i32 %466, %181
  %468 = add i32 %467, %183
  %469 = sub i32 %468, %184
  %470 = add i32 %469, %185
  %471 = sub i32 %470, %186
  %472 = sub i32 %471, %187
  %473 = add i32 %472, %189
  %474 = add i32 %473, %196
  %475 = sub i32 %474, %206
  %476 = add i32 %475, %208
  %477 = add i32 %476, %209
  %478 = add i32 %477, %210
  %479 = add i32 %478, %212
  %480 = add i32 %479, %190
  %481 = sub i32 %480, %50
  %482 = add i32 %481, %214
  %483 = sub i32 %482, %218
  %484 = add i32 %483, %221
  %485 = sub i32 %484, %227
  %486 = sub i32 %485, %230
  %487 = sub i32 %486, %235
  %488 = sub i32 %487, %240
  %489 = sub i32 %488, %242
  %490 = add i32 %489, %244
  %491 = sub i32 %490, %245
  %492 = sub i32 %491, %246
  %493 = sub i32 %492, %249
  %494 = sub i32 %493, %250
  %495 = add i32 %494, %253
  %496 = sub i32 %495, %255
  %497 = sub i32 %496, %256
  %498 = sub i32 %497, %263
  %499 = sub i32 %498, %265
  %500 = add i32 %499, %267
  %501 = add i32 %500, %268
  %502 = sub i32 %501, %270
  %503 = sub i32 %502, %271
  %504 = sub i32 %503, %272
  %505 = add i32 %504, %273
  %506 = add i32 %505, %276
  %507 = sub i32 %506, %73
  %508 = add i32 %507, %280
  %509 = add i32 %508, %281
  %510 = add i32 %509, %282
  %511 = sub i32 %510, %47
  %512 = add i32 %511, %51
  %513 = sub i32 %512, %57
  %514 = sub i32 %513, %61
  %515 = sub i32 %514, %63
  %516 = sub i32 %515, %65
  %517 = sub i32 %516, %67
  %518 = add i32 %517, %74
  %519 = sub i32 %518, %97
  %520 = sub i32 %519, %110
  %521 = sub i32 %520, %118
  %522 = sub i32 %521, %143
  %523 = add i32 %522, %148
  %524 = add i32 %523, %151
  %525 = add i32 %524, %161
  %526 = add i32 %525, %166
  %527 = sub i32 %526, %168
  %528 = sub i32 %527, %173
  %529 = sub i32 %528, %175
  %530 = sub i32 %529, %177
  %531 = add i32 %530, %179
  %532 = sub i32 %531, %193
  %533 = sub i32 %532, %195
  %534 = sub i32 %533, %198
  %535 = sub i32 %534, %200
  %536 = sub i32 %535, %205
  %537 = sub i32 %536, %223
  %538 = sub i32 %537, %224
  %539 = add i32 %538, %228
  %540 = add i32 %539, %234
  %541 = sub i32 %540, %248
  %542 = sub i32 %541, %252
  %543 = sub i32 %542, %254
  %544 = add i32 %543, %258
  %545 = sub i32 %544, %260
  %546 = sub i32 %545, %262
  %547 = sub i32 %546, %269
  %548 = sub i32 %547, %278
  %549 = add i32 %548, %285
  %550 = add i32 %549, %287
  %551 = add i32 %550, %289
  %552 = add i32 %551, %291
  %553 = add i32 %552, %293
  %554 = add i32 %553, %294
  %555 = sub i32 %554, %202
  %556 = add i32 %555, %309
  %557 = add i32 %556, %311
  %558 = add i32 %557, %316
  %559 = add i32 %558, %370
  %560 = sub i32 %559, %239
  %561 = add i32 %560, %298
  %562 = add i32 %561, %301
  %563 = add i32 %562, %304
  %564 = sub i32 %563, %307
  %565 = sub i32 %564, %314
  %566 = add i32 %565, %315
  %567 = sub i32 %566, %322
  %568 = sub i32 %567, %325
  %569 = add i32 %568, %326
  %570 = add i32 %569, %330
  %571 = sub i32 %570, %334
  %572 = sub i32 %571, %337
  %573 = sub i32 %572, %340
  %574 = sub i32 %573, %321
  %575 = sub i32 %574, %339
  %576 = sub i32 %575, %333
  %577 = add i32 %576, %376
  %578 = add i32 %577, %368
  %579 = add i32 %578, %361
  %580 = icmp eq i32 %579, %15
  %581 = select i1 %580, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %582 = tail call i32 @puts(i8* nonnull dereferenceable(1) %581)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
