digraph "DFG for'crackme' function" {
	Node0x1a3e4e0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1a3e550[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x1a3e610[shape=record, label="  %5 = sub i32 %3, %4"];
	Node0x1a3e680[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x1a3ed00[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1a3ed70[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x1a3ede0[shape=record, label="  %9 = xor i32 %3, -1"];
	Node0x1a3ee50[shape=record, label="  %10 = xor i32 %1, -1"];
	Node0x1a3eec0[shape=record, label="  %11 = or i32 %10, %0"];
	Node0x1a3ef30[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x1a3efa0[shape=record, label="  %13 = xor i32 %4, -1"];
	Node0x1a3f040[shape=record, label="  %14 = mul i32 %13, -3"];
	Node0x1a3f0e0[shape=record, label="  %15 = shl i32 %11, 1"];
	Node0x1a3f180[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x1a3f1f0[shape=record, label="  %17 = sub i32 %8, %0"];
	Node0x1a3f260[shape=record, label="  %18 = sub i32 %17, %1"];
	Node0x1a3f2d0[shape=record, label="  %19 = add i32 %18, %7"];
	Node0x1a3f340[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x1a3f3b0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x1a3f420[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x1a3f490[shape=record, label="  %23 = sub i32 %22, %16"];
	Node0x1a3f500[shape=record, label="  %24 = icmp eq i32 %5, %23"];
	Node0x19df268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1a3f9a0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1a3f9f0[shape=record, label="  ret void"];
	Node0x1a3e4e0 -> Node0x1a3e550;
	Node0x1a3e550 -> Node0x1a3e610;
	Node0x1a3e610 -> Node0x1a3e680;
	Node0x1a3e680 -> Node0x1a3ed00;
	Node0x1a3ed00 -> Node0x1a3ed70;
	Node0x1a3ed70 -> Node0x1a3ede0;
	Node0x1a3ede0 -> Node0x1a3ee50;
	Node0x1a3ee50 -> Node0x1a3eec0;
	Node0x1a3eec0 -> Node0x1a3ef30;
	Node0x1a3ef30 -> Node0x1a3efa0;
	Node0x1a3efa0 -> Node0x1a3f040;
	Node0x1a3f040 -> Node0x1a3f0e0;
	Node0x1a3f0e0 -> Node0x1a3f180;
	Node0x1a3f180 -> Node0x1a3f1f0;
	Node0x1a3f1f0 -> Node0x1a3f260;
	Node0x1a3f260 -> Node0x1a3f2d0;
	Node0x1a3f2d0 -> Node0x1a3f340;
	Node0x1a3f340 -> Node0x1a3f3b0;
	Node0x1a3f3b0 -> Node0x1a3f420;
	Node0x1a3f420 -> Node0x1a3f490;
	Node0x1a3f490 -> Node0x1a3f500;
	Node0x1a3f500 -> Node0x19df268;
	Node0x19df268 -> Node0x1a3f9a0;
	Node0x1a3f9a0 -> Node0x1a3f9f0;
edge [color=red]
	Node0x1a3e4e0 -> Node0x1a3e610;
	Node0x1a3e550 -> Node0x1a3e610;
	Node0x1a3e680 -> Node0x1a3ed00;
	Node0x1a3e4e0 -> Node0x1a3ede0;
	Node0x1a3ee50 -> Node0x1a3eec0;
	Node0x1a3eec0 -> Node0x1a3ef30;
	Node0x1a3e550 -> Node0x1a3efa0;
	Node0x1a3efa0 -> Node0x1a3f040;
	Node0x1a3eec0 -> Node0x1a3f0e0;
	Node0x1a3f0e0 -> Node0x1a3f180;
	Node0x1a3ed70 -> Node0x1a3f1f0;
	Node0x1a3f1f0 -> Node0x1a3f260;
	Node0x1a3f260 -> Node0x1a3f2d0;
	Node0x1a3ed00 -> Node0x1a3f2d0;
	Node0x1a3f2d0 -> Node0x1a3f340;
	Node0x1a3ede0 -> Node0x1a3f340;
	Node0x1a3f340 -> Node0x1a3f3b0;
	Node0x1a3ef30 -> Node0x1a3f3b0;
	Node0x1a3f3b0 -> Node0x1a3f420;
	Node0x1a3f040 -> Node0x1a3f420;
	Node0x1a3f420 -> Node0x1a3f490;
	Node0x1a3f180 -> Node0x1a3f490;
	Node0x1a3e610 -> Node0x1a3f500;
	Node0x1a3f490 -> Node0x1a3f500;
	Node0x1a3f500 -> Node0x19df268;
	Node0x19df268 -> Node0x1a3f9a0;
}
