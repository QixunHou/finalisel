digraph "DFG for'main' function" {
	Node0x2017e98[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x2017f18[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x2017fa8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x2018008[shape=record, label="  %4 = alloca i32, align 4"];
	Node0x20180b8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0x20184e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x20185c8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0x20186c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x2018788[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0x2018838[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x20188f8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0x20189a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x20127f0[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0x2018ba8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x2019b18[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x201a188[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x201a1e8[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0x201a2f8[shape=record, label="  call void @crackme(i32 %10, i32 %11, i32 %12, i32 %13)"];
	Node0x201a558[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0x201a6b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0x201a7c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x201a8d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x201a998[shape=record, label="  ret i32 0"];
	Node0x2017e98 -> Node0x2017f18;
	Node0x2017f18 -> Node0x2017fa8;
	Node0x2017fa8 -> Node0x2018008;
	Node0x2018008 -> Node0x20180b8;
	Node0x20180b8 -> Node0x20184e8;
	Node0x20184e8 -> Node0x20185c8;
	Node0x20185c8 -> Node0x20186c8;
	Node0x20186c8 -> Node0x2018788;
	Node0x2018788 -> Node0x2018838;
	Node0x2018838 -> Node0x20188f8;
	Node0x20188f8 -> Node0x20189a8;
	Node0x20189a8 -> Node0x20127f0;
	Node0x20127f0 -> Node0x2018ba8;
	Node0x2018ba8 -> Node0x2019b18;
	Node0x2019b18 -> Node0x201a188;
	Node0x201a188 -> Node0x201a1e8;
	Node0x201a1e8 -> Node0x201a2f8;
	Node0x201a2f8 -> Node0x201a558;
	Node0x201a558 -> Node0x201a6b8;
	Node0x201a6b8 -> Node0x201a7c8;
	Node0x201a7c8 -> Node0x201a8d8;
	Node0x201a8d8 -> Node0x201a998;
edge [color=red]
	Node0x2017e98 -> Node0x20180b8;
	Node0x20180b8 -> Node0x20184e8;
	Node0x2017f18 -> Node0x20185c8;
	Node0x20185c8 -> Node0x20186c8;
	Node0x2017fa8 -> Node0x2018788;
	Node0x2018788 -> Node0x2018838;
	Node0x2018008 -> Node0x20188f8;
	Node0x20188f8 -> Node0x20189a8;
	Node0x2017e98 -> Node0x20127f0;
	Node0x2017f18 -> Node0x20127f0;
	Node0x2017fa8 -> Node0x20127f0;
	Node0x2018008 -> Node0x20127f0;
	Node0x2017e98 -> Node0x2018ba8;
	Node0x2017f18 -> Node0x2019b18;
	Node0x2017fa8 -> Node0x201a188;
	Node0x2018008 -> Node0x201a1e8;
	Node0x2018ba8 -> Node0x201a2f8;
	Node0x2019b18 -> Node0x201a2f8;
	Node0x201a188 -> Node0x201a2f8;
	Node0x201a1e8 -> Node0x201a2f8;
	Node0x20188f8 -> Node0x201a558;
	Node0x2018788 -> Node0x201a6b8;
	Node0x20185c8 -> Node0x201a7c8;
	Node0x20180b8 -> Node0x201a8d8;
}
