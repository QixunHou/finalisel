; ModuleID = '../.././c_source_file/0703_path_condition_crackme.c'
source_filename = "../.././c_source_file/0703_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = xor i32 %8, -1
  %10 = and i32 %9, %0
  %11 = xor i32 %2, %0
  %12 = and i32 %11, %1
  %13 = shl i32 %12, 1
  %14 = sub i32 %13, %10
  %15 = xor i32 %5, -1
  %16 = and i32 %15, %4
  %17 = or i32 %15, %3
  %18 = xor i32 %16, %17
  %19 = shl i32 %18, 1
  %20 = add i32 %14, %19
  %21 = and i32 %7, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %22, %1
  %24 = or i32 %7, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %25, %1
  %27 = xor i32 %1, -1
  %28 = and i32 %27, %0
  %29 = or i32 %28, %2
  %30 = and i32 %2, %0
  %31 = xor i32 %30, %9
  %32 = xor i32 %1, %0
  %33 = xor i32 %11, -1
  %34 = or i32 %32, %33
  %35 = and i32 %1, %0
  %36 = xor i32 %24, %35
  %37 = and i32 %27, %2
  %38 = and i32 %37, %0
  %39 = xor i32 %0, -1
  %40 = or i32 %27, %2
  %41 = and i32 %40, %39
  %42 = xor i32 %41, 2147483647
  %43 = xor i32 %42, %38
  %44 = shl i32 %43, 1
  %45 = and i32 %2, %1
  %46 = and i32 %45, %39
  %47 = or i32 %2, %1
  %48 = and i32 %47, %0
  %49 = xor i32 %46, -1
  %50 = xor i32 %48, %49
  %51 = or i32 %1, %0
  %52 = and i32 %51, %7
  %53 = and i32 %9, %39
  %54 = and i32 %45, %0
  %55 = xor i32 %2, %1
  %56 = and i32 %55, %39
  %57 = or i32 %54, %56
  %58 = or i32 %33, %1
  %59 = xor i32 %32, -1
  %60 = or i32 %21, %59
  %61 = xor i32 %45, -1
  %62 = and i32 %61, %0
  %63 = or i32 %32, %2
  %64 = or i32 %11, %35
  %65 = xor i32 %30, -1
  %66 = xor i32 %65, %1
  %67 = shl i32 %66, 1
  %68 = or i32 %8, %28
  %69 = or i32 %21, %27
  %70 = xor i32 %21, %61
  %71 = or i32 %11, %1
  %72 = shl i32 %71, 1
  %73 = and i32 %11, %51
  %74 = or i32 %7, %1
  %75 = or i32 %74, %39
  %76 = xor i32 %28, -1
  %77 = xor i32 %55, -1
  %78 = and i32 %77, %76
  %79 = or i32 %2, %0
  %80 = and i32 %79, %27
  %81 = or i32 %47, %0
  %82 = or i32 %25, %27
  %83 = or i32 %11, %32
  %84 = or i32 %28, %7
  %85 = and i32 %37, %39
  %86 = and i32 %40, %0
  %87 = or i32 %85, %86
  %88 = or i32 %35, %33
  %89 = xor i32 %28, %61
  %90 = or i32 %27, %0
  %91 = and i32 %55, %90
  %92 = and i32 %24, %32
  %93 = or i32 %55, %39
  %94 = xor i32 %85, %93
  %95 = or i32 %45, %0
  %96 = xor i32 %30, %90
  %97 = and i32 %55, %51
  %98 = and i32 %33, %59
  %99 = or i32 %55, %28
  %100 = shl i32 %99, 1
  %101 = and i32 %51, %2
  %102 = and i32 %11, %27
  %103 = and i32 %90, %7
  %104 = xor i32 %77, %0
  %105 = add i32 %24, 1
  %106 = xor i32 %47, -1
  %107 = and i32 %33, %76
  %108 = or i32 %30, %27
  %109 = and i32 %59, %2
  %110 = xor i32 %47, %0
  %111 = or i32 %54, %110
  %112 = or i32 %30, %106
  %113 = xor i32 %79, -1
  %114 = or i32 %35, %113
  %115 = and i32 %74, %39
  %116 = or i32 %28, %33
  %117 = or i32 %38, %41
  %118 = and i32 %79, %32
  %119 = or i32 %9, %39
  %120 = shl i32 %119, 1
  %121 = and i32 %55, %0
  %122 = xor i32 %121, %49
  %123 = or i32 %30, %1
  %124 = xor i32 %90, -1
  %125 = shl i32 %124, 1
  %126 = add i32 %79, 1
  %127 = xor i32 %55, %0
  %128 = xor i32 %127, 1073741823
  %129 = xor i32 %128, %38
  %130 = shl i32 %129, 2
  %131 = or i32 %61, %39
  %132 = xor i32 %51, -1
  %133 = or i32 %7, %132
  %134 = or i32 %59, %2
  %135 = xor i32 %79, %1
  %136 = xor i32 %9, %0
  %137 = and i32 %79, %59
  %138 = and i32 %7, %59
  %139 = or i32 %32, %25
  %140 = or i32 %47, %39
  %141 = and i32 %11, %90
  %142 = and i32 %61, %39
  %143 = and i32 %11, %59
  %144 = xor i32 %74, %0
  %145 = xor i32 %54, %127
  %146 = add i32 %30, 1
  %147 = and i32 %51, %33
  %148 = and i32 %76, %2
  %149 = or i32 %113, %1
  %150 = shl i32 %27, 1
  %151 = or i32 %45, %39
  %152 = or i32 %8, %39
  %153 = and i32 %22, %1
  %154 = xor i32 %74, -1
  %155 = or i32 %154, %39
  %156 = or i32 %21, %1
  %157 = xor i32 %93, -1
  %158 = or i32 %85, %157
  %159 = xor i32 %110, -1
  %160 = xor i32 %54, %159
  %161 = or i32 %46, %48
  %162 = xor i32 %90, %2
  %163 = or i32 %7, %59
  %164 = xor i32 %76, %2
  %165 = shl i32 %164, 1
  %166 = xor i32 %28, %9
  %167 = or i32 %32, %7
  %168 = and i32 %24, %1
  %169 = or i32 %21, %32
  %170 = and i32 %11, %32
  %171 = add i32 %28, 1
  %172 = and i32 %22, %59
  %173 = or i32 %11, %132
  %174 = or i32 %113, %59
  %175 = or i32 %106, %0
  %176 = or i32 %11, %28
  %177 = or i32 %77, %132
  %178 = and i32 %55, %76
  %179 = shl i32 %22, 1
  %180 = xor i32 %124, %2
  %181 = or i32 %21, %45
  %182 = and i32 %11, %76
  %183 = or i32 %30, %59
  %184 = and i32 %33, %27
  %185 = or i32 %8, %0
  %186 = xor i32 %35, -1
  %187 = add i32 %35, 1
  %188 = and i32 %55, %186
  %189 = or i32 %77, %0
  %190 = xor i32 %30, %51
  %191 = and i32 %65, %59
  %192 = xor i32 %30, %1
  %193 = and i32 %11, %186
  %194 = and i32 %47, %39
  %195 = or i32 %54, %194
  %196 = or i32 %33, %132
  %197 = or i32 %7, %124
  %198 = shl i32 %197, 1
  %199 = or i32 %30, %124
  %200 = and i32 %7, %186
  %201 = xor i32 %8, %0
  %202 = and i32 %106, %39
  %203 = shl i32 %202, 2
  %204 = and i32 %8, %39
  %205 = and i32 %106, %0
  %206 = mul i32 %205, 11
  %207 = and i32 %8, %0
  %208 = and i32 %154, %39
  %209 = shl i32 %208, 1
  %210 = mul i32 %46, 14
  %211 = and i32 %154, %0
  %212 = mul i32 %211, -7
  %213 = mul i32 %54, -18
  %214 = and i32 %4, %3
  %215 = xor i32 %17, -1
  %216 = or i32 %214, %215
  %217 = xor i32 %5, %3
  %218 = xor i32 %217, -1
  %219 = or i32 %214, %218
  %220 = xor i32 %17, %4
  %221 = xor i32 %3, -1
  %222 = and i32 %221, %5
  %223 = and i32 %222, %4
  %224 = or i32 %221, %5
  %225 = xor i32 %224, %4
  %226 = xor i32 %225, 2147483647
  %227 = xor i32 %226, %223
  %228 = and i32 %5, %3
  %229 = and i32 %228, %4
  %230 = xor i32 %217, %4
  %231 = xor i32 %229, %230
  %232 = and i32 %15, %3
  %233 = xor i32 %232, %4
  %234 = and i32 %221, %4
  %235 = xor i32 %234, -1
  %236 = xor i32 %5, %4
  %237 = xor i32 %236, -1
  %238 = and i32 %237, %235
  %239 = and i32 %5, %4
  %240 = xor i32 %239, -1
  %241 = xor i32 %4, %3
  %242 = xor i32 %241, -1
  %243 = and i32 %240, %242
  %244 = xor i32 %4, -1
  %245 = or i32 %228, %244
  %246 = or i32 %5, %4
  %247 = and i32 %246, %241
  %248 = or i32 %221, %4
  %249 = and i32 %217, %248
  %250 = or i32 %239, %232
  %251 = xor i32 %215, %4
  %252 = or i32 %5, %3
  %253 = and i32 %252, %4
  %254 = xor i32 %232, -1
  %255 = and i32 %254, %4
  %256 = or i32 %4, %3
  %257 = xor i32 %256, -1
  %258 = or i32 %236, %257
  %259 = or i32 %236, %214
  %260 = shl i32 %259, 1
  %261 = add i32 %17, 1
  %262 = or i32 %236, %3
  %263 = xor i32 %248, -1
  %264 = or i32 %218, %263
  %265 = or i32 %15, %4
  %266 = and i32 %265, %242
  %267 = xor i32 %246, %214
  %268 = and i32 %236, %3
  %269 = and i32 %217, %244
  %270 = xor i32 %228, -1
  %271 = xor i32 %16, %270
  %272 = shl i32 %271, 1
  %273 = xor i32 %257, %5
  %274 = or i32 %263, %5
  %275 = or i32 %217, %214
  %276 = xor i32 %239, %256
  %277 = or i32 %214, %5
  %278 = shl i32 %277, 1
  %279 = xor i32 %16, -1
  %280 = and i32 %279, %242
  %281 = or i32 %270, %4
  %282 = or i32 %239, %241
  %283 = and i32 %254, %244
  %284 = xor i32 %239, %254
  %285 = shl i32 %284, 1
  %286 = and i32 %235, %5
  %287 = and i32 %248, %218
  %288 = xor i32 %214, %5
  %289 = xor i32 %246, -1
  %290 = or i32 %241, %289
  %291 = xor i32 %252, %214
  %292 = xor i32 %263, %5
  %293 = and i32 %228, %244
  %294 = and i32 %217, %4
  %295 = or i32 %293, %294
  %296 = or i32 %218, %4
  %297 = xor i32 %265, %214
  %298 = and i32 %237, %242
  %299 = and i32 %237, %221
  %300 = and i32 %270, %244
  %301 = or i32 %234, %15
  %302 = or i32 %218, %257
  %303 = shl i32 %302, 1
  %304 = xor i32 %254, %4
  %305 = or i32 %15, %263
  %306 = and i32 %236, %241
  %307 = xor i32 %214, -1
  %308 = and i32 %307, %5
  %309 = and i32 %242, %5
  %310 = or i32 %236, %234
  %311 = or i32 %236, %242
  %312 = or i32 %236, %221
  %313 = and i32 %17, %4
  %314 = or i32 %217, %257
  %315 = add i32 %228, 1
  %316 = xor i32 %256, %5
  %317 = xor i32 %230, -1
  %318 = or i32 %229, %317
  %319 = xor i32 %252, -1
  %320 = or i32 %319, %4
  %321 = xor i32 %265, -1
  %322 = or i32 %321, %221
  %323 = or i32 %242, %5
  %324 = or i32 %237, %257
  %325 = xor i32 %270, %4
  %326 = or i32 %228, %4
  %327 = or i32 %239, %3
  %328 = or i32 %16, %242
  %329 = and i32 %236, %307
  %330 = or i32 %252, %244
  %331 = shl i32 %330, 1
  %332 = and i32 %246, %3
  %333 = and i32 %218, %4
  %334 = or i32 %239, %319
  %335 = or i32 %223, %225
  %336 = and i32 %241, %15
  %337 = and i32 %222, %244
  %338 = and i32 %224, %4
  %339 = xor i32 %338, -1
  %340 = xor i32 %337, %339
  %341 = and i32 %256, %237
  %342 = xor i32 %252, %4
  %343 = or i32 %229, %342
  %344 = xor i32 %16, %3
  %345 = and i32 %15, %242
  %346 = shl i32 %345, 1
  %347 = or i32 %254, %244
  %348 = or i32 %241, %5
  %349 = or i32 %217, %4
  %350 = xor i32 %349, 2147483647
  %351 = or i32 %350, %223
  %352 = or i32 %232, %244
  %353 = or i32 %16, %228
  %354 = or i32 %16, %241
  %355 = or i32 %270, %244
  %356 = shl i32 %355, 1
  %357 = and i32 %217, %307
  %358 = shl i32 %357, 1
  %359 = or i32 %319, %244
  %360 = shl i32 %359, 1
  %361 = or i32 %232, %4
  %362 = or i32 %214, %319
  %363 = or i32 %237, %263
  %364 = shl i32 %363, 1
  %365 = or i32 %16, %215
  %366 = and i32 %252, %244
  %367 = or i32 %229, %366
  %368 = and i32 %217, %235
  %369 = xor i32 %248, %5
  %370 = or i32 %289, %3
  %371 = xor i32 %239, %248
  %372 = or i32 %239, %263
  %373 = or i32 %237, %221
  %374 = and i32 %218, %235
  %375 = xor i32 %223, %317
  %376 = or i32 %217, %263
  %377 = and i32 %236, %256
  %378 = or i32 %17, %4
  %379 = and i32 %218, %307
  %380 = or i32 %241, %15
  %381 = and i32 %236, %242
  %382 = or i32 %214, %289
  %383 = add i32 %4, 1
  %384 = and i32 %246, %242
  %385 = xor i32 %319, %4
  %386 = or i32 %239, %257
  %387 = xor i32 %234, %270
  %388 = shl i32 %387, 1
  %389 = or i32 %237, %242
  %390 = and i32 %240, %3
  %391 = and i32 %241, %240
  %392 = xor i32 %265, %3
  %393 = shl i32 %392, 1
  %394 = or i32 %237, %3
  %395 = and i32 %256, %15
  %396 = and i32 %240, %221
  %397 = xor i32 %17, %214
  %398 = or i32 %239, %221
  %399 = xor i32 %239, %3
  %400 = xor i32 %234, %5
  %401 = or i32 %223, %230
  %402 = and i32 %236, %248
  %403 = and i32 %256, %218
  %404 = and i32 %236, %235
  %405 = or i32 %15, %242
  %406 = and i32 %224, %244
  %407 = xor i32 %406, -1
  %408 = xor i32 %223, %407
  %409 = and i32 %265, %241
  %410 = shl i32 %409, 1
  %411 = or i32 %214, %321
  %412 = or i32 %215, %244
  %413 = or i32 %257, %5
  %414 = and i32 %17, %244
  %415 = shl i32 %414, 1
  %416 = or i32 %214, %237
  %417 = xor i32 %307, %5
  %418 = and i32 %217, %256
  %419 = or i32 %252, %4
  %420 = and i32 %265, %221
  %421 = shl i32 %420, 1
  %422 = or i32 %223, %406
  %423 = shl i32 %422, 2
  %424 = xor i32 %366, 2147483647
  %425 = xor i32 %424, %229
  %426 = or i32 %289, %242
  %427 = and i32 %15, %307
  %428 = and i32 %15, %235
  %429 = and i32 %218, %244
  %430 = xor i32 %223, %349
  %431 = or i32 %234, %237
  %432 = and i32 %279, %3
  %433 = shl i32 %432, 1
  %434 = or i32 %241, %237
  %435 = and i32 %248, %237
  %436 = shl i32 %435, 1
  %437 = and i32 %248, %15
  %438 = or i32 %218, %244
  %439 = or i32 %215, %4
  %440 = and i32 %265, %3
  %441 = or i32 %228, %234
  %442 = xor i32 %246, %3
  %443 = or i32 %289, %221
  %444 = and i32 %319, %244
  %445 = and i32 %232, %244
  %446 = and i32 %319, %4
  %447 = mul i32 %446, -21
  %448 = and i32 %232, %4
  %449 = shl i32 %448, 3
  %450 = shl i32 %293, 4
  %451 = and i32 %215, %4
  %452 = mul i32 %451, -9
  %453 = mul i32 %229, -12
  %454 = add i32 %148, %163
  %455 = sub i32 %454, %204
  %456 = add i32 %455, %116
  %457 = sub i32 %456, %96
  %458 = add i32 %457, %362
  %459 = add i32 %458, %411
  %460 = mul i32 %459, 5
  %461 = add i32 %199, %126
  %462 = add i32 %461, %93
  %463 = sub i32 %462, %228
  %464 = add i32 %463, %439
  %465 = sub i32 %464, %304
  %466 = sub i32 %465, %335
  %467 = mul i32 %466, 3
  %468 = add i32 %380, %88
  %469 = add i32 %468, %324
  %470 = add i32 %469, %442
  %471 = shl i32 %470, 2
  %472 = add i32 %444, %207
  %473 = mul i32 %472, 6
  %474 = add i32 %90, -1
  %475 = add i32 %474, %59
  %476 = add i32 %475, %33
  %477 = add i32 %476, %101
  %478 = add i32 %477, %178
  %479 = add i32 %478, %135
  %480 = add i32 %479, %82
  %481 = add i32 %480, %68
  %482 = add i32 %481, %23
  %483 = add i32 %482, %57
  %484 = add i32 %483, %437
  %485 = add i32 %484, %336
  %486 = add i32 %485, %308
  %487 = add i32 %486, %274
  %488 = add i32 %487, %443
  %489 = add i32 %488, %412
  %490 = add i32 %489, %386
  %491 = add i32 %490, %373
  %492 = add i32 %491, %329
  %493 = add i32 %492, %322
  %494 = add i32 %493, %310
  %495 = add i32 %494, %299
  %496 = add i32 %495, %296
  %497 = add i32 %496, %287
  %498 = add i32 %497, %258
  %499 = add i32 %498, %430
  %500 = add i32 %499, %351
  %501 = add i32 %500, %425
  %502 = add i32 %501, %227
  %503 = shl i32 %502, 1
  %504 = add i32 %0, 2
  %505 = sub i32 %504, %1
  %506 = sub i32 %505, %2
  %507 = add i32 %506, %28
  %508 = sub i32 %507, %150
  %509 = add i32 %508, %171
  %510 = add i32 %509, %187
  %511 = sub i32 %510, %29
  %512 = add i32 %511, %52
  %513 = add i32 %512, %63
  %514 = add i32 %513, %21
  %515 = sub i32 %514, %84
  %516 = sub i32 %515, %45
  %517 = sub i32 %516, %79
  %518 = add i32 %517, %103
  %519 = add i32 %518, %105
  %520 = add i32 %519, %74
  %521 = sub i32 %520, %109
  %522 = sub i32 %521, %125
  %523 = sub i32 %522, %133
  %524 = add i32 %523, %134
  %525 = add i32 %524, %138
  %526 = add i32 %525, %146
  %527 = add i32 %526, %77
  %528 = sub i32 %527, %162
  %529 = add i32 %528, %167
  %530 = add i32 %529, %180
  %531 = sub i32 %530, %24
  %532 = add i32 %531, %9
  %533 = add i32 %532, %200
  %534 = add i32 %533, 1
  %535 = add i32 %534, %26
  %536 = sub i32 %535, %31
  %537 = sub i32 %536, %34
  %538 = add i32 %537, %36
  %539 = add i32 %538, %53
  %540 = sub i32 %539, %58
  %541 = add i32 %540, %60
  %542 = sub i32 %541, %62
  %543 = add i32 %542, %64
  %544 = add i32 %543, %69
  %545 = add i32 %544, %70
  %546 = sub i32 %545, %73
  %547 = sub i32 %546, %75
  %548 = add i32 %547, %78
  %549 = sub i32 %548, %80
  %550 = add i32 %549, %81
  %551 = sub i32 %550, %83
  %552 = add i32 %551, %89
  %553 = sub i32 %552, %91
  %554 = add i32 %553, %92
  %555 = sub i32 %554, %95
  %556 = add i32 %555, %97
  %557 = add i32 %556, %98
  %558 = add i32 %557, %102
  %559 = sub i32 %558, %104
  %560 = add i32 %559, %107
  %561 = sub i32 %560, %108
  %562 = sub i32 %561, %112
  %563 = add i32 %562, %114
  %564 = sub i32 %563, %115
  %565 = add i32 %564, %118
  %566 = sub i32 %565, %123
  %567 = add i32 %566, %56
  %568 = add i32 %567, %131
  %569 = sub i32 %568, %136
  %570 = add i32 %569, %137
  %571 = sub i32 %570, %139
  %572 = sub i32 %571, %140
  %573 = sub i32 %572, %110
  %574 = sub i32 %573, %141
  %575 = sub i32 %574, %142
  %576 = sub i32 %575, %143
  %577 = sub i32 %576, %144
  %578 = sub i32 %577, %147
  %579 = add i32 %578, %149
  %580 = add i32 %579, %151
  %581 = add i32 %580, %152
  %582 = sub i32 %581, %153
  %583 = add i32 %582, %155
  %584 = add i32 %583, %156
  %585 = sub i32 %584, %165
  %586 = add i32 %585, %166
  %587 = add i32 %586, %168
  %588 = sub i32 %587, %169
  %589 = sub i32 %588, %170
  %590 = sub i32 %589, %172
  %591 = add i32 %590, %173
  %592 = sub i32 %591, %174
  %593 = sub i32 %592, %175
  %594 = sub i32 %593, %176
  %595 = sub i32 %594, %177
  %596 = sub i32 %595, %179
  %597 = sub i32 %596, %181
  %598 = add i32 %597, %182
  %599 = add i32 %598, %183
  %600 = add i32 %599, %184
  %601 = sub i32 %600, %185
  %602 = sub i32 %601, %188
  %603 = add i32 %602, %189
  %604 = sub i32 %603, %190
  %605 = sub i32 %604, %191
  %606 = sub i32 %605, %192
  %607 = add i32 %606, %193
  %608 = sub i32 %607, %48
  %609 = add i32 %608, %196
  %610 = sub i32 %609, %198
  %611 = sub i32 %610, %201
  %612 = add i32 %611, %383
  %613 = add i32 %612, %50
  %614 = sub i32 %613, %67
  %615 = sub i32 %614, %72
  %616 = sub i32 %615, %87
  %617 = sub i32 %616, %94
  %618 = sub i32 %617, %100
  %619 = sub i32 %618, %111
  %620 = sub i32 %619, %117
  %621 = sub i32 %620, %120
  %622 = sub i32 %621, %122
  %623 = sub i32 %622, %145
  %624 = sub i32 %623, %158
  %625 = sub i32 %624, %160
  %626 = add i32 %625, %161
  %627 = add i32 %626, %195
  %628 = sub i32 %627, %203
  %629 = add i32 %628, %206
  %630 = sub i32 %629, %209
  %631 = add i32 %630, %210
  %632 = add i32 %631, %212
  %633 = add i32 %632, %213
  %634 = add i32 %633, %214
  %635 = add i32 %634, %257
  %636 = add i32 %635, %241
  %637 = add i32 %636, %261
  %638 = sub i32 %637, %273
  %639 = add i32 %638, %286
  %640 = add i32 %639, %288
  %641 = add i32 %640, %292
  %642 = sub i32 %641, %301
  %643 = sub i32 %642, %305
  %644 = sub i32 %643, %309
  %645 = add i32 %644, %315
  %646 = add i32 %645, %316
  %647 = add i32 %646, %289
  %648 = sub i32 %647, %323
  %649 = sub i32 %648, %232
  %650 = add i32 %649, %319
  %651 = sub i32 %650, %236
  %652 = add i32 %651, %348
  %653 = sub i32 %652, %369
  %654 = add i32 %653, %395
  %655 = add i32 %654, %16
  %656 = sub i32 %655, %400
  %657 = sub i32 %656, %405
  %658 = sub i32 %657, %17
  %659 = add i32 %658, %413
  %660 = add i32 %659, %417
  %661 = sub i32 %660, %246
  %662 = sub i32 %661, %427
  %663 = add i32 %662, %428
  %664 = add i32 %663, %237
  %665 = sub i32 %664, %44
  %666 = sub i32 %665, %130
  %667 = add i32 %666, %216
  %668 = sub i32 %667, %219
  %669 = add i32 %668, %220
  %670 = sub i32 %669, %233
  %671 = sub i32 %670, %238
  %672 = add i32 %671, %243
  %673 = add i32 %672, %245
  %674 = sub i32 %673, %247
  %675 = sub i32 %674, %249
  %676 = sub i32 %675, %250
  %677 = sub i32 %676, %251
  %678 = add i32 %677, %253
  %679 = add i32 %678, %255
  %680 = add i32 %679, %262
  %681 = add i32 %680, %264
  %682 = add i32 %681, %266
  %683 = add i32 %682, %267
  %684 = add i32 %683, %268
  %685 = sub i32 %684, %269
  %686 = sub i32 %685, %275
  %687 = sub i32 %686, %276
  %688 = sub i32 %687, %278
  %689 = add i32 %688, %280
  %690 = add i32 %689, %281
  %691 = add i32 %690, %282
  %692 = sub i32 %691, %283
  %693 = sub i32 %692, %290
  %694 = sub i32 %693, %291
  %695 = sub i32 %694, %297
  %696 = sub i32 %695, %298
  %697 = sub i32 %696, %300
  %698 = sub i32 %697, %306
  %699 = sub i32 %698, %311
  %700 = sub i32 %699, %312
  %701 = add i32 %700, %313
  %702 = sub i32 %701, %314
  %703 = add i32 %702, %320
  %704 = sub i32 %703, %230
  %705 = sub i32 %704, %325
  %706 = add i32 %705, %326
  %707 = sub i32 %706, %327
  %708 = sub i32 %707, %328
  %709 = add i32 %708, %332
  %710 = add i32 %709, %333
  %711 = add i32 %710, %334
  %712 = add i32 %711, %341
  %713 = add i32 %712, %344
  %714 = sub i32 %713, %346
  %715 = add i32 %714, %347
  %716 = add i32 %715, %352
  %717 = sub i32 %716, %353
  %718 = sub i32 %717, %354
  %719 = add i32 %718, %361
  %720 = sub i32 %719, %365
  %721 = sub i32 %720, %368
  %722 = sub i32 %721, %370
  %723 = sub i32 %722, %371
  %724 = sub i32 %723, %372
  %725 = sub i32 %724, %374
  %726 = sub i32 %725, %342
  %727 = add i32 %726, %376
  %728 = add i32 %727, %377
  %729 = add i32 %728, %378
  %730 = add i32 %729, %379
  %731 = add i32 %730, %381
  %732 = add i32 %731, %382
  %733 = sub i32 %732, %384
  %734 = sub i32 %733, %385
  %735 = sub i32 %734, %389
  %736 = sub i32 %735, %390
  %737 = sub i32 %736, %391
  %738 = add i32 %737, %394
  %739 = sub i32 %738, %349
  %740 = add i32 %739, %396
  %741 = add i32 %740, %397
  %742 = sub i32 %741, %398
  %743 = add i32 %742, %399
  %744 = add i32 %743, %402
  %745 = sub i32 %744, %403
  %746 = add i32 %745, %404
  %747 = add i32 %746, %294
  %748 = add i32 %747, %416
  %749 = add i32 %748, %418
  %750 = sub i32 %749, %419
  %751 = add i32 %750, %426
  %752 = sub i32 %751, %429
  %753 = sub i32 %752, %431
  %754 = sub i32 %753, %434
  %755 = add i32 %754, %438
  %756 = add i32 %755, %440
  %757 = add i32 %756, %441
  %758 = sub i32 %757, %445
  %759 = add i32 %758, %231
  %760 = sub i32 %759, %260
  %761 = sub i32 %760, %272
  %762 = sub i32 %761, %285
  %763 = sub i32 %762, %295
  %764 = sub i32 %763, %303
  %765 = sub i32 %764, %318
  %766 = sub i32 %765, %331
  %767 = add i32 %766, %340
  %768 = add i32 %767, %343
  %769 = sub i32 %768, %356
  %770 = sub i32 %769, %358
  %771 = sub i32 %770, %360
  %772 = sub i32 %771, %364
  %773 = sub i32 %772, %367
  %774 = sub i32 %773, %375
  %775 = sub i32 %774, %388
  %776 = sub i32 %775, %393
  %777 = sub i32 %776, %401
  %778 = sub i32 %777, %408
  %779 = sub i32 %778, %410
  %780 = sub i32 %779, %415
  %781 = sub i32 %780, %421
  %782 = sub i32 %781, %433
  %783 = sub i32 %782, %436
  %784 = add i32 %783, %447
  %785 = sub i32 %784, %449
  %786 = add i32 %785, %450
  %787 = add i32 %786, %452
  %788 = add i32 %787, %453
  %789 = sub i32 %788, %423
  %790 = add i32 %789, %473
  %791 = add i32 %790, %471
  %792 = add i32 %791, %460
  %793 = add i32 %792, %467
  %794 = add i32 %793, %503
  %795 = icmp eq i32 %20, %794
  %796 = select i1 %795, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %797 = tail call i32 @puts(i8* nonnull dereferenceable(1) %796)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
