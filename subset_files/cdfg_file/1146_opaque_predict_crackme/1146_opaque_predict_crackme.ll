; ModuleID = '../.././c_source_file/1146_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1146_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, %0
  %6 = or i32 %5, %4
  %7 = and i32 %4, %2
  %8 = and i32 %7, %0
  %9 = xor i32 %2, %1
  %10 = xor i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %8, %11
  %13 = sub i32 %6, %12
  %14 = xor i32 %2, -1
  %15 = or i32 %1, %0
  %16 = xor i32 %15, -1
  %17 = xor i32 %16, %2
  %18 = or i32 %4, %0
  %19 = xor i32 %18, -1
  %20 = xor i32 %5, -1
  %21 = or i32 %20, %19
  %22 = or i32 %9, %0
  %23 = xor i32 %8, %22
  %24 = and i32 %18, %14
  %25 = and i32 %2, %0
  %26 = or i32 %25, %16
  %27 = xor i32 %0, -1
  %28 = and i32 %14, %1
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %27
  %31 = or i32 %14, %0
  %32 = and i32 %31, %4
  %33 = or i32 %28, %27
  %34 = xor i32 %25, -1
  %35 = xor i32 %1, %0
  %36 = and i32 %35, %34
  %37 = and i32 %35, %20
  %38 = xor i32 %19, %2
  %39 = and i32 %20, %1
  %40 = or i32 %14, %1
  %41 = xor i32 %40, -1
  %42 = or i32 %41, %27
  %43 = xor i32 %35, -1
  %44 = and i32 %34, %43
  %45 = xor i32 %41, %0
  %46 = and i32 %1, %0
  %47 = or i32 %5, %46
  %48 = xor i32 %31, -1
  %49 = or i32 %48, %1
  %50 = and i32 %4, %0
  %51 = and i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = xor i32 %50, %52
  %54 = xor i32 %9, -1
  %55 = and i32 %54, %27
  %56 = shl i32 %55, 1
  %57 = or i32 %25, %43
  %58 = add i32 %51, 1
  %59 = and i32 %7, %27
  %60 = or i32 %4, %2
  %61 = and i32 %60, %0
  %62 = or i32 %59, %61
  %63 = or i32 %25, %35
  %64 = or i32 %46, %48
  %65 = or i32 %14, %16
  %66 = xor i32 %50, %29
  %67 = or i32 %28, %50
  %68 = shl i32 %67, 1
  %69 = and i32 %14, %0
  %70 = xor i32 %69, %52
  %71 = and i32 %51, %0
  %72 = or i32 %2, %1
  %73 = xor i32 %72, %0
  %74 = xor i32 %71, -1
  %75 = xor i32 %73, %74
  %76 = and i32 %5, %15
  %77 = xor i32 %61, -1
  %78 = xor i32 %59, %77
  %79 = or i32 %51, %0
  %80 = or i32 %71, %11
  %81 = or i32 %9, %50
  %82 = or i32 %16, %2
  %83 = and i32 %9, %0
  %84 = or i32 %2, %0
  %85 = and i32 %84, %1
  %86 = or i32 %5, %50
  %87 = or i32 %72, %27
  %88 = and i32 %15, %2
  %89 = and i32 %9, %15
  %90 = or i32 %8, %10
  %91 = xor i32 %84, -1
  %92 = or i32 %91, %4
  %93 = xor i32 %69, -1
  %94 = and i32 %93, %43
  %95 = or i32 %25, %4
  %96 = shl i32 %95, 1
  %97 = and i32 %15, %20
  %98 = shl i32 %97, 1
  %99 = or i32 %50, %20
  %100 = and i32 %60, %27
  %101 = or i32 %8, %100
  %102 = xor i32 %52, %0
  %103 = and i32 %9, %27
  %104 = or i32 %71, %103
  %105 = or i32 %5, %35
  %106 = and i32 %34, %4
  %107 = xor i32 %72, -1
  %108 = xor i32 %107, %0
  %109 = and i32 %5, %1
  %110 = and i32 %29, %0
  %111 = or i32 %54, %16
  %112 = shl i32 %111, 1
  %113 = or i32 %48, %43
  %114 = or i32 %20, %1
  %115 = xor i32 %46, -1
  %116 = and i32 %115, %2
  %117 = shl i32 %116, 1
  %118 = or i32 %71, %73
  %119 = or i32 %107, %0
  %120 = xor i32 %84, %46
  %121 = xor i32 %72, %46
  %122 = xor i32 %18, %2
  %123 = and i32 %54, %0
  %124 = xor i32 %22, 2147483647
  %125 = or i32 %124, %8
  %126 = or i32 %20, %16
  %127 = shl i32 %126, 1
  %128 = or i32 %50, %2
  %129 = xor i32 %50, %2
  %130 = xor i32 %50, -1
  %131 = and i32 %14, %130
  %132 = xor i32 %130, %2
  %133 = or i32 %69, %43
  %134 = or i32 %35, %48
  %135 = xor i32 %60, %0
  %136 = xor i32 %135, 1073741823
  %137 = xor i32 %136, %8
  %138 = shl i32 %137, 2
  %139 = and i32 %9, %18
  %140 = and i32 %18, %54
  %141 = or i32 %91, %43
  %142 = shl i32 %141, 1
  %143 = or i32 %25, %1
  %144 = or i32 %48, %4
  %145 = and i32 %72, %27
  %146 = xor i32 %28, %0
  %147 = and i32 %5, %130
  %148 = or i32 %14, %19
  %149 = xor i32 %15, %2
  %150 = xor i32 %40, %0
  %151 = xor i32 %31, %1
  %152 = or i32 %51, %50
  %153 = xor i32 %34, %1
  %154 = xor i32 %25, %29
  %155 = and i32 %9, %130
  %156 = and i32 %31, %43
  %157 = or i32 %9, %46
  %158 = or i32 %9, %27
  %159 = xor i32 %59, %158
  %160 = or i32 %69, %35
  %161 = and i32 %52, %0
  %162 = and i32 %5, %35
  %163 = xor i32 %103, %74
  %164 = and i32 %5, %4
  %165 = or i32 %35, %2
  %166 = and i32 %5, %115
  %167 = or i32 %72, %0
  %168 = or i32 %25, %19
  %169 = or i32 %29, %0
  %170 = add i32 %84, 1
  %171 = and i32 %130, %2
  %172 = and i32 %14, %115
  %173 = or i32 %43, %2
  %174 = or i32 %25, %107
  %175 = xor i32 %71, %10
  %176 = shl i32 %175, 1
  %177 = and i32 %84, %4
  %178 = shl i32 %41, 1
  %179 = xor i32 %46, %2
  %180 = and i32 %52, %27
  %181 = xor i32 %158, -1
  %182 = or i32 %59, %181
  %183 = and i32 %43, %2
  %184 = and i32 %15, %54
  %185 = and i32 %34, %1
  %186 = and i32 %31, %1
  %187 = or i32 %69, %1
  %188 = or i32 %35, %91
  %189 = xor i32 %69, %1
  %190 = and i32 %84, %43
  %191 = or i32 %5, %19
  %192 = and i32 %51, %27
  %193 = and i32 %72, %0
  %194 = xor i32 %193, -1
  %195 = xor i32 %192, %194
  %196 = xor i32 %93, %1
  %197 = or i32 %50, %14
  %198 = and i32 %31, %35
  %199 = and i32 %9, %115
  %200 = or i32 %41, %0
  %201 = and i32 %54, %115
  %202 = or i32 %20, %4
  %203 = and i32 %18, %2
  %204 = xor i32 %40, %46
  %205 = and i32 %54, %130
  %206 = add i32 %18, 1
  %207 = and i32 %35, %2
  %208 = or i32 %14, %43
  %209 = or i32 %46, %41
  %210 = xor i32 %91, %1
  %211 = or i32 %52, %27
  %212 = or i32 %51, %27
  %213 = or i32 %192, %83
  %214 = xor i32 %25, %1
  %215 = or i32 %50, %54
  %216 = or i32 %28, %0
  %217 = or i32 %5, %1
  %218 = and i32 %40, %0
  %219 = or i32 %52, %0
  %220 = and i32 %20, %115
  %221 = and i32 %5, %18
  %222 = xor i32 %25, %15
  %223 = xor i32 %84, %1
  %224 = and i32 %15, %14
  %225 = or i32 %35, %20
  %226 = xor i32 %54, %0
  %227 = or i32 %19, %2
  %228 = shl i32 %227, 1
  %229 = or i32 %46, %107
  %230 = and i32 %20, %130
  %231 = add i32 %50, 1
  %232 = or i32 %54, %27
  %233 = or i32 %46, %14
  %234 = or i32 %8, %135
  %235 = or i32 %9, %16
  %236 = and i32 %40, %27
  %237 = or i32 %35, %14
  %238 = shl i32 %237, 1
  %239 = xor i32 %145, %74
  %240 = and i32 %107, %27
  %241 = mul i32 %240, 15
  %242 = and i32 %28, %27
  %243 = mul i32 %242, 20
  %244 = and i32 %107, %0
  %245 = shl i32 %244, 2
  %246 = and i32 %28, %0
  %247 = shl i32 %246, 3
  %248 = and i32 %41, %27
  %249 = mul i32 %248, 11
  %250 = and i32 %41, %0
  %251 = mul i32 %250, 14
  %252 = shl i32 %71, 2
  %253 = add i32 %26, %148
  %254 = sub i32 %123, %253
  %255 = mul i32 %254, 5
  %256 = sub i32 %54, %132
  %257 = sub i32 %256, %155
  %258 = mul i32 %257, 3
  %259 = add i32 %207, %2
  %260 = add i32 %259, %129
  %261 = add i32 %260, %38
  %262 = add i32 %261, %204
  %263 = add i32 %262, %198
  %264 = add i32 %263, %191
  %265 = add i32 %264, %139
  %266 = add i32 %265, %105
  %267 = add i32 %266, %47
  %268 = add i32 %267, %42
  %269 = add i32 %268, %125
  %270 = shl i32 %269, 1
  %271 = add i32 %4, %0
  %272 = add i32 %271, %15
  %273 = add i32 %272, %46
  %274 = add i32 %273, %43
  %275 = sub i32 %274, %50
  %276 = sub i32 %275, %35
  %277 = add i32 %276, %206
  %278 = add i32 %277, %18
  %279 = add i32 %278, %231
  %280 = add i32 %279, %17
  %281 = add i32 %280, %24
  %282 = add i32 %281, %58
  %283 = add i32 %282, %65
  %284 = sub i32 %283, %82
  %285 = sub i32 %284, %88
  %286 = add i32 %285, %122
  %287 = sub i32 %286, %128
  %288 = sub i32 %287, %131
  %289 = add i32 %288, %29
  %290 = sub i32 %289, %149
  %291 = add i32 %290, %48
  %292 = sub i32 %291, %165
  %293 = add i32 %292, %170
  %294 = sub i32 %293, %171
  %295 = sub i32 %294, %25
  %296 = sub i32 %295, %172
  %297 = sub i32 %296, %173
  %298 = add i32 %297, %179
  %299 = add i32 %298, %34
  %300 = add i32 %299, %183
  %301 = sub i32 %300, %40
  %302 = sub i32 %301, %197
  %303 = sub i32 %302, %203
  %304 = add i32 %303, %208
  %305 = sub i32 %304, %224
  %306 = add i32 %305, %93
  %307 = add i32 %306, %233
  %308 = sub i32 %307, %9
  %309 = sub i32 %308, %21
  %310 = add i32 %309, %30
  %311 = sub i32 %310, %32
  %312 = sub i32 %311, %33
  %313 = sub i32 %312, %36
  %314 = sub i32 %313, %37
  %315 = add i32 %314, %39
  %316 = add i32 %315, %44
  %317 = sub i32 %316, %45
  %318 = sub i32 %317, %49
  %319 = add i32 %318, %53
  %320 = sub i32 %319, %57
  %321 = sub i32 %320, %63
  %322 = add i32 %321, %64
  %323 = add i32 %322, %66
  %324 = add i32 %323, %70
  %325 = add i32 %324, %76
  %326 = sub i32 %325, %79
  %327 = sub i32 %326, %81
  %328 = add i32 %327, %83
  %329 = add i32 %328, %85
  %330 = sub i32 %329, %86
  %331 = add i32 %330, %87
  %332 = add i32 %331, %89
  %333 = add i32 %332, %92
  %334 = add i32 %333, %94
  %335 = sub i32 %334, %99
  %336 = sub i32 %335, %102
  %337 = sub i32 %336, %106
  %338 = add i32 %337, %108
  %339 = sub i32 %338, %109
  %340 = sub i32 %339, %110
  %341 = sub i32 %340, %113
  %342 = sub i32 %341, %114
  %343 = sub i32 %342, %117
  %344 = sub i32 %343, %119
  %345 = sub i32 %344, %120
  %346 = add i32 %345, %121
  %347 = add i32 %346, %133
  %348 = sub i32 %347, %134
  %349 = sub i32 %348, %140
  %350 = add i32 %349, %143
  %351 = add i32 %350, %144
  %352 = sub i32 %351, %145
  %353 = add i32 %352, %146
  %354 = sub i32 %353, %147
  %355 = add i32 %354, %150
  %356 = add i32 %355, %151
  %357 = add i32 %356, %152
  %358 = add i32 %357, %153
  %359 = sub i32 %358, %154
  %360 = add i32 %359, %156
  %361 = sub i32 %360, %157
  %362 = add i32 %361, %160
  %363 = add i32 %362, %161
  %364 = sub i32 %363, %162
  %365 = add i32 %364, %164
  %366 = sub i32 %365, %166
  %367 = sub i32 %366, %167
  %368 = add i32 %367, %168
  %369 = sub i32 %368, %169
  %370 = sub i32 %369, %174
  %371 = add i32 %370, %177
  %372 = sub i32 %371, %178
  %373 = add i32 %372, %180
  %374 = add i32 %373, %184
  %375 = sub i32 %374, %185
  %376 = sub i32 %375, %186
  %377 = sub i32 %376, %22
  %378 = add i32 %377, %187
  %379 = sub i32 %378, %188
  %380 = add i32 %379, %189
  %381 = add i32 %380, %190
  %382 = add i32 %381, %196
  %383 = add i32 %382, %199
  %384 = sub i32 %383, %200
  %385 = sub i32 %384, %201
  %386 = add i32 %385, %202
  %387 = add i32 %386, %205
  %388 = add i32 %387, %73
  %389 = sub i32 %388, %209
  %390 = sub i32 %389, %210
  %391 = sub i32 %390, %211
  %392 = sub i32 %391, %212
  %393 = add i32 %392, %214
  %394 = sub i32 %393, %215
  %395 = add i32 %394, %216
  %396 = sub i32 %395, %217
  %397 = add i32 %396, %218
  %398 = add i32 %397, %193
  %399 = sub i32 %398, %219
  %400 = sub i32 %399, %220
  %401 = sub i32 %400, %221
  %402 = add i32 %401, %10
  %403 = add i32 %402, %222
  %404 = sub i32 %403, %158
  %405 = sub i32 %404, %223
  %406 = sub i32 %405, %225
  %407 = add i32 %406, %226
  %408 = sub i32 %407, %228
  %409 = add i32 %408, %229
  %410 = sub i32 %409, %230
  %411 = add i32 %410, %232
  %412 = add i32 %411, %235
  %413 = sub i32 %412, %236
  %414 = sub i32 %413, %238
  %415 = add i32 %414, %192
  %416 = sub i32 %415, %23
  %417 = sub i32 %416, %56
  %418 = add i32 %417, %62
  %419 = sub i32 %418, %68
  %420 = sub i32 %419, %75
  %421 = sub i32 %420, %78
  %422 = add i32 %421, %80
  %423 = sub i32 %422, %90
  %424 = sub i32 %423, %96
  %425 = sub i32 %424, %98
  %426 = add i32 %425, %101
  %427 = add i32 %426, %104
  %428 = sub i32 %427, %112
  %429 = add i32 %428, %118
  %430 = sub i32 %429, %127
  %431 = sub i32 %430, %142
  %432 = sub i32 %431, %159
  %433 = add i32 %432, %163
  %434 = sub i32 %433, %182
  %435 = add i32 %434, %195
  %436 = add i32 %435, %213
  %437 = sub i32 %436, %234
  %438 = add i32 %437, %239
  %439 = add i32 %438, %241
  %440 = add i32 %439, %243
  %441 = sub i32 %440, %245
  %442 = add i32 %441, %247
  %443 = add i32 %442, %249
  %444 = add i32 %443, %251
  %445 = sub i32 %444, %252
  %446 = sub i32 %445, %176
  %447 = add i32 %446, %138
  %448 = add i32 %447, %255
  %449 = add i32 %448, %258
  %450 = add i32 %449, %270
  %451 = icmp eq i32 %13, %450
  %452 = select i1 %451, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %453 = tail call i32 @puts(i8* nonnull dereferenceable(1) %452)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
