; ModuleID = '../.././c_source_file/0676_path_condition_crackme.c'
source_filename = "../.././c_source_file/0676_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = or i32 %8, %1
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %2
  %12 = and i32 %11, %0
  %13 = xor i32 %2, %1
  %14 = or i32 %13, %0
  %15 = xor i32 %14, -1
  %16 = or i32 %12, %15
  %17 = add i32 %16, %9
  %18 = xor i32 %3, -1
  %19 = or i32 %18, %4
  %20 = xor i32 %19, %5
  %21 = sub i32 %17, %20
  %22 = xor i32 %19, -1
  %23 = or i32 %22, %5
  %24 = sub i32 %21, %23
  %25 = or i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %10
  %28 = or i32 %10, %0
  %29 = xor i32 %13, -1
  %30 = and i32 %28, %29
  %31 = xor i32 %8, -1
  %32 = and i32 %31, %10
  %33 = or i32 %2, %1
  %34 = and i32 %33, %0
  %35 = and i32 %2, %0
  %36 = xor i32 %33, -1
  %37 = or i32 %35, %36
  %38 = shl i32 %37, 1
  %39 = xor i32 %0, -1
  %40 = and i32 %11, %39
  %41 = or i32 %13, %39
  %42 = xor i32 %41, -1
  %43 = or i32 %40, %42
  %44 = and i32 %10, %0
  %45 = or i32 %13, %44
  %46 = or i32 %1, %0
  %47 = xor i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %46, %48
  %50 = xor i32 %35, %1
  %51 = shl i32 %50, 1
  %52 = and i32 %47, %46
  %53 = xor i32 %28, -1
  %54 = xor i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = and i32 %31, %55
  %57 = shl i32 %56, 1
  %58 = and i32 %1, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %13, %59
  %61 = and i32 %7, %1
  %62 = xor i32 %61, -1
  %63 = or i32 %62, %0
  %64 = or i32 %7, %1
  %65 = xor i32 %64, -1
  %66 = xor i32 %28, %2
  %67 = or i32 %48, %1
  %68 = xor i32 %13, %0
  %69 = xor i32 %68, -1
  %70 = xor i32 %12, %69
  %71 = and i32 %2, %1
  %72 = and i32 %71, %39
  %73 = and i32 %13, %0
  %74 = or i32 %72, %73
  %75 = or i32 %7, %0
  %76 = xor i32 %75, -1
  %77 = or i32 %76, %1
  %78 = shl i32 %77, 1
  %79 = xor i32 %44, -1
  %80 = and i32 %13, %79
  %81 = xor i32 %35, %62
  %82 = and i32 %29, %0
  %83 = xor i32 %71, -1
  %84 = and i32 %83, %0
  %85 = and i32 %46, %7
  %86 = or i32 %13, %58
  %87 = and i32 %47, %1
  %88 = xor i32 %8, %1
  %89 = or i32 %10, %2
  %90 = and i32 %89, %39
  %91 = or i32 %12, %90
  %92 = or i32 %29, %0
  %93 = and i32 %62, %0
  %94 = xor i32 %8, %83
  %95 = and i32 %71, %0
  %96 = and i32 %33, %39
  %97 = xor i32 %95, -1
  %98 = xor i32 %96, %97
  %99 = xor i32 %65, %0
  %100 = add i32 %25, 1
  %101 = and i32 %7, %59
  %102 = or i32 %7, %53
  %103 = xor i32 %46, -1
  %104 = or i32 %35, %103
  %105 = and i32 %48, %59
  %106 = or i32 %58, %76
  %107 = and i32 %89, %0
  %108 = or i32 %40, %107
  %109 = and i32 %31, %1
  %110 = or i32 %48, %103
  %111 = or i32 %47, %10
  %112 = shl i32 %111, 1
  %113 = and i32 %64, %0
  %114 = or i32 %44, %48
  %115 = or i32 %47, %55
  %116 = or i32 %35, %61
  %117 = and i32 %47, %79
  %118 = shl i32 %117, 1
  %119 = or i32 %48, %10
  %120 = or i32 %35, %55
  %121 = and i32 %59, %2
  %122 = xor i32 %75, %58
  %123 = or i32 %61, %0
  %124 = xor i32 %36, %0
  %125 = and i32 %54, %2
  %126 = or i32 %58, %65
  %127 = add i32 %13, 1
  %128 = and i32 %75, %1
  %129 = xor i32 %26, %1
  %130 = and i32 %83, %39
  %131 = and i32 %28, %7
  %132 = or i32 %58, %36
  %133 = or i32 %76, %10
  %134 = and i32 %54, %48
  %135 = xor i32 %35, -1
  %136 = add i32 %35, 1
  %137 = and i32 %29, %79
  %138 = xor i32 %76, %1
  %139 = and i32 %48, %55
  %140 = xor i32 %64, %58
  %141 = and i32 %47, %54
  %142 = and i32 %55, %2
  %143 = xor i32 %46, %2
  %144 = shl i32 %143, 1
  %145 = shl i32 %0, 1
  %146 = or i32 %54, %7
  %147 = or i32 %29, %103
  %148 = shl i32 %147, 1
  %149 = xor i32 %89, %0
  %150 = or i32 %12, %149
  %151 = and i32 %13, %39
  %152 = xor i32 %44, %62
  %153 = shl i32 %152, 1
  %154 = or i32 %44, %7
  %155 = or i32 %29, %39
  %156 = shl i32 %48, 1
  %157 = or i32 %47, %58
  %158 = or i32 %48, %53
  %159 = xor i32 %33, %0
  %160 = xor i32 %159, 2147483647
  %161 = xor i32 %160, %95
  %162 = shl i32 %161, 1
  %163 = xor i32 %95, %68
  %164 = or i32 %54, %48
  %165 = and i32 %47, %10
  %166 = or i32 %76, %55
  %167 = and i32 %47, %28
  %168 = or i32 %8, %55
  %169 = and i32 %48, %79
  %170 = or i32 %35, %53
  %171 = and i32 %47, %59
  %172 = or i32 %95, %96
  %173 = shl i32 %172, 1
  %174 = and i32 %75, %10
  %175 = xor i32 %90, 2147483647
  %176 = xor i32 %175, %12
  %177 = shl i32 %176, 1
  %178 = and i32 %135, %10
  %179 = xor i32 %135, %1
  %180 = or i32 %33, %0
  %181 = xor i32 %33, %58
  %182 = or i32 %83, %0
  %183 = or i32 %54, %2
  %184 = xor i32 %58, %2
  %185 = shl i32 %184, 1
  %186 = and i32 %62, %39
  %187 = xor i32 %31, %1
  %188 = or i32 %36, %39
  %189 = or i32 %44, %29
  %190 = shl i32 %189, 1
  %191 = and i32 %47, %55
  %192 = xor i32 %79, %2
  %193 = or i32 %8, %71
  %194 = and i32 %54, %31
  %195 = shl i32 %194, 1
  %196 = or i32 %54, %26
  %197 = or i32 %71, %44
  %198 = and i32 %25, %1
  %199 = add i32 %61, 1
  %200 = or i32 %53, %2
  %201 = xor i32 %103, %2
  %202 = or i32 %47, %103
  %203 = or i32 %47, %44
  %204 = or i32 %83, %39
  %205 = or i32 %26, %1
  %206 = or i32 %58, %26
  %207 = shl i32 %206, 1
  %208 = or i32 %58, %48
  %209 = or i32 %8, %65
  %210 = shl i32 %209, 1
  %211 = or i32 %33, %39
  %212 = shl i32 %211, 1
  %213 = xor i32 %35, %33
  %214 = or i32 %58, %2
  %215 = and i32 %28, %2
  %216 = and i32 %64, %39
  %217 = or i32 %71, %39
  %218 = or i32 %64, %39
  %219 = xor i32 %8, %64
  %220 = xor i32 %75, %1
  %221 = and i32 %135, %55
  %222 = or i32 %65, %0
  %223 = shl i32 %222, 1
  %224 = and i32 %13, %46
  %225 = or i32 %44, %2
  %226 = shl i32 %225, 1
  %227 = and i32 %25, %10
  %228 = or i32 %62, %39
  %229 = or i32 %12, %68
  %230 = or i32 %48, %55
  %231 = or i32 %13, %103
  %232 = xor i32 %151, %97
  %233 = xor i32 %71, %0
  %234 = or i32 %54, %76
  %235 = and i32 %13, %28
  %236 = or i32 %35, %1
  %237 = and i32 %7, %55
  %238 = and i32 %29, %39
  %239 = shl i32 %238, 1
  %240 = or i32 %26, %55
  %241 = or i32 %29, %53
  %242 = or i32 %47, %1
  %243 = xor i32 %34, -1
  %244 = xor i32 %72, %243
  %245 = and i32 %25, %54
  %246 = and i32 %46, %2
  %247 = and i32 %75, %54
  %248 = and i32 %54, %135
  %249 = xor i32 %53, %2
  %250 = or i32 %7, %55
  %251 = shl i32 %250, 2
  %252 = or i32 %72, %34
  %253 = and i32 %79, %2
  %254 = shl i32 %253, 1
  %255 = or i32 %103, %2
  %256 = or i32 %8, %10
  %257 = and i32 %28, %48
  %258 = or i32 %61, %39
  %259 = or i32 %47, %53
  %260 = xor i32 %107, -1
  %261 = xor i32 %40, %260
  %262 = or i32 %35, %54
  %263 = and i32 %46, %29
  %264 = xor i32 %62, %0
  %265 = and i32 %54, %7
  %266 = or i32 %36, %0
  %267 = xor i32 %44, %2
  %268 = or i32 %95, %159
  %269 = xor i32 %25, %1
  %270 = xor i32 %59, %2
  %271 = and i32 %29, %59
  %272 = add i32 %71, 1
  %273 = and i32 %25, %55
  %274 = xor i32 %83, %0
  %275 = or i32 %13, %53
  %276 = xor i32 %149, -1
  %277 = xor i32 %12, %276
  %278 = or i32 %61, %44
  %279 = xor i32 %35, %28
  %280 = and i32 %48, %10
  %281 = or i32 %95, %69
  %282 = shl i32 %281, 1
  %283 = and i32 %48, %1
  %284 = xor i32 %35, %46
  %285 = shl i32 %284, 1
  %286 = or i32 %65, %39
  %287 = and i32 %75, %55
  %288 = or i32 %8, %54
  %289 = xor i32 %40, %41
  %290 = or i32 %35, %10
  %291 = and i32 %7, %79
  %292 = xor i32 %12, %14
  %293 = xor i32 %64, %0
  %294 = and i32 %36, %39
  %295 = and i32 %61, %39
  %296 = and i32 %36, %0
  %297 = and i32 %61, %0
  %298 = mul i32 %297, 24
  %299 = and i32 %65, %39
  %300 = and i32 %65, %0
  %301 = xor i32 %5, -1
  %302 = and i32 %301, %4
  %303 = and i32 %5, %3
  %304 = xor i32 %303, -1
  %305 = xor i32 %302, %304
  %306 = or i32 %5, %4
  %307 = and i32 %306, %3
  %308 = or i32 %4, %3
  %309 = and i32 %308, %5
  %310 = and i32 %4, %3
  %311 = xor i32 %310, %5
  %312 = xor i32 %4, -1
  %313 = and i32 %303, %312
  %314 = xor i32 %5, %3
  %315 = and i32 %314, %4
  %316 = xor i32 %315, -1
  %317 = xor i32 %313, %316
  %318 = xor i32 %4, %3
  %319 = and i32 %303, %4
  %320 = xor i32 %314, %4
  %321 = xor i32 %319, %320
  %322 = shl i32 %321, 2
  %323 = xor i32 %5, %4
  %324 = xor i32 %323, -1
  %325 = and i32 %318, %324
  %326 = xor i32 %310, -1
  %327 = and i32 %324, %326
  %328 = xor i32 %318, -1
  %329 = or i32 %301, %328
  %330 = and i32 %314, %308
  %331 = or i32 %314, %22
  %332 = and i32 %318, %5
  %333 = or i32 %301, %3
  %334 = xor i32 %333, -1
  %335 = or i32 %334, %312
  %336 = and i32 %18, %4
  %337 = and i32 %336, %5
  %338 = or i32 %18, %5
  %339 = xor i32 %338, %4
  %340 = or i32 %337, %339
  %341 = xor i32 %314, -1
  %342 = or i32 %341, %312
  %343 = and i32 %323, %18
  %344 = and i32 %301, %3
  %345 = xor i32 %306, %3
  %346 = xor i32 %308, -1
  %347 = or i32 %346, %5
  %348 = or i32 %323, %3
  %349 = and i32 %5, %4
  %350 = or i32 %349, %344
  %351 = or i32 %5, %3
  %352 = or i32 %351, %312
  %353 = shl i32 %352, 1
  %354 = and i32 %314, %312
  %355 = or i32 %323, %336
  %356 = xor i32 %355, -1
  %357 = xor i32 %337, -1
  %358 = xor i32 %320, %357
  %359 = or i32 %323, %346
  %360 = or i32 %336, %324
  %361 = or i32 %301, %4
  %362 = xor i32 %361, -1
  %363 = or i32 %318, %362
  %364 = and i32 %19, %324
  %365 = xor i32 %344, -1
  %366 = or i32 %365, %312
  %367 = and i32 %351, %312
  %368 = or i32 %324, %3
  %369 = shl i32 %368, 1
  %370 = xor i32 %367, -1
  %371 = xor i32 %319, %370
  %372 = xor i32 %306, -1
  %373 = or i32 %372, %18
  %374 = or i32 %301, %346
  %375 = shl i32 %374, 1
  %376 = or i32 %310, %372
  %377 = and i32 %328, %5
  %378 = xor i32 %336, -1
  %379 = or i32 %334, %4
  %380 = and i32 %308, %324
  %381 = and i32 %341, %4
  %382 = or i32 %313, %315
  %383 = xor i32 %349, %351
  %384 = shl i32 %383, 1
  %385 = or i32 %319, %367
  %386 = and i32 %308, %301
  %387 = or i32 %314, %336
  %388 = and i32 %301, %328
  %389 = shl i32 %351, 1
  %390 = and i32 %351, %4
  %391 = xor i32 %390, 2147483647
  %392 = xor i32 %391, %313
  %393 = or i32 %314, %4
  %394 = xor i32 %393, -1
  %395 = or i32 %337, %394
  %396 = xor i32 %304, %4
  %397 = xor i32 %302, %3
  %398 = or i32 %304, %4
  %399 = and i32 %361, %328
  %400 = and i32 %324, %3
  %401 = add i32 %333, 1
  %402 = xor i32 %351, -1
  %403 = add i32 %351, 1
  %404 = and i32 %341, %378
  %405 = xor i32 %346, %5
  %406 = xor i32 %349, -1
  %407 = xor i32 %406, %3
  %408 = and i32 %306, %328
  %409 = and i32 %323, %378
  %410 = or i32 %333, %4
  %411 = or i32 %323, %318
  %412 = xor i32 %339, %357
  %413 = or i32 %362, %328
  %414 = or i32 %323, %310
  %415 = shl i32 %414, 1
  %416 = or i32 %372, %3
  %417 = shl i32 %416, 1
  %418 = xor i32 %308, %5
  %419 = xor i32 %378, %5
  %420 = shl i32 %419, 1
  %421 = or i32 %341, %22
  %422 = or i32 %341, %4
  %423 = or i32 %349, %3
  %424 = or i32 %314, %312
  %425 = or i32 %302, %3
  %426 = or i32 %349, %22
  %427 = xor i32 %302, -1
  %428 = and i32 %318, %427
  %429 = and i32 %324, %328
  %430 = or i32 %302, %18
  %431 = or i32 %349, %328
  %432 = or i32 %310, %324
  %433 = or i32 %324, %328
  %434 = or i32 %303, %312
  %435 = and i32 %333, %4
  %436 = shl i32 %435, 1
  %437 = or i32 %302, %318
  %438 = and i32 %341, %326
  %439 = xor i32 %344, %4
  %440 = or i32 %333, %312
  %441 = or i32 %324, %18
  %442 = shl i32 %441, 1
  %443 = and i32 %406, %18
  %444 = and i32 %304, %312
  %445 = add i32 %323, 1
  %446 = and i32 %402, %312
  %447 = and i32 %344, %312
  %448 = and i32 %402, %4
  %449 = and i32 %344, %4
  %450 = and i32 %334, %312
  %451 = and i32 %334, %4
  %452 = add i32 %10, %39
  %453 = add i32 %452, %103
  %454 = add i32 %453, %18
  %455 = add i32 %454, %267
  %456 = add i32 %455, %183
  %457 = add i32 %456, %33
  %458 = add i32 %457, %35
  %459 = add i32 %458, %101
  %460 = add i32 %459, %271
  %461 = add i32 %460, %262
  %462 = add i32 %461, %234
  %463 = add i32 %462, %230
  %464 = add i32 %463, %227
  %465 = add i32 %464, %178
  %466 = add i32 %465, %174
  %467 = add i32 %466, %96
  %468 = add i32 %467, %126
  %469 = add i32 %468, %104
  %470 = add i32 %469, %52
  %471 = add i32 %470, %329
  %472 = add i32 %471, %323
  %473 = add i32 %472, %438
  %474 = add i32 %473, %431
  %475 = add i32 %474, %410
  %476 = add i32 %475, %408
  %477 = add i32 %476, %387
  %478 = add i32 %477, %367
  %479 = add i32 %478, %343
  %480 = add i32 %479, %330
  %481 = add i32 %480, %327
  %482 = add i32 %481, %392
  %483 = shl i32 %482, 1
  %484 = add i32 %47, %312
  %485 = add i32 %484, %290
  %486 = sub i32 %485, %165
  %487 = sub i32 %486, %116
  %488 = add i32 %487, %5
  %489 = add i32 %488, %70
  %490 = add i32 %489, %377
  %491 = sub i32 %490, %380
  %492 = sub i32 %491, %429
  %493 = mul i32 %492, 3
  %494 = sub i32 %72, %291
  %495 = sub i32 %494, %294
  %496 = sub i32 %495, %171
  %497 = add i32 %496, %155
  %498 = sub i32 %497, %305
  %499 = add i32 %498, %447
  %500 = mul i32 %499, 5
  %501 = sub i32 %296, %449
  %502 = sub i32 %501, %451
  %503 = sub i32 %502, %448
  %504 = sub i32 %503, %446
  %505 = mul i32 %504, 6
  %506 = sub i32 %300, %450
  %507 = sub i32 %506, %313
  %508 = mul i32 %507, 9
  %509 = add i32 %299, %95
  %510 = sub i32 %509, %319
  %511 = mul i32 %510, 7
  %512 = sub i32 1073741822, %2
  %513 = add i32 %512, %208
  %514 = add i32 %513, %361
  %515 = shl i32 %514, 2
  %516 = sub i32 %1, %145
  %517 = sub i32 %516, %58
  %518 = sub i32 %517, %54
  %519 = sub i32 %518, %58
  %520 = add i32 %519, %46
  %521 = sub i32 %520, %25
  %522 = add i32 %521, %66
  %523 = sub i32 %522, %85
  %524 = sub i32 %523, %61
  %525 = add i32 %524, %100
  %526 = add i32 %525, %102
  %527 = add i32 %526, %75
  %528 = add i32 %527, %121
  %529 = add i32 %528, %125
  %530 = add i32 %529, %127
  %531 = sub i32 %530, %131
  %532 = add i32 %531, %136
  %533 = add i32 %532, %71
  %534 = add i32 %533, %142
  %535 = add i32 %534, %36
  %536 = add i32 %535, %146
  %537 = sub i32 %536, %154
  %538 = add i32 %537, %192
  %539 = add i32 %538, %199
  %540 = add i32 %539, %200
  %541 = add i32 %540, %201
  %542 = sub i32 %541, %214
  %543 = sub i32 %542, %215
  %544 = add i32 %543, %237
  %545 = sub i32 %544, %246
  %546 = sub i32 %545, %249
  %547 = sub i32 %546, %255
  %548 = sub i32 %547, %265
  %549 = add i32 %548, %270
  %550 = add i32 %549, %272
  %551 = add i32 %550, %3
  %552 = add i32 %551, %30
  %553 = add i32 %552, %27
  %554 = sub i32 %553, %32
  %555 = sub i32 %554, %34
  %556 = add i32 %555, %45
  %557 = add i32 %556, %49
  %558 = add i32 %557, %60
  %559 = add i32 %558, %63
  %560 = sub i32 %559, %67
  %561 = sub i32 %560, %80
  %562 = add i32 %561, %81
  %563 = add i32 %562, %82
  %564 = sub i32 %563, %84
  %565 = add i32 %564, %86
  %566 = sub i32 %565, %87
  %567 = add i32 %566, %88
  %568 = sub i32 %567, %92
  %569 = sub i32 %568, %93
  %570 = add i32 %569, %94
  %571 = sub i32 %570, %99
  %572 = add i32 %571, %105
  %573 = sub i32 %572, %106
  %574 = add i32 %573, %109
  %575 = sub i32 %574, %110
  %576 = sub i32 %575, %113
  %577 = sub i32 %576, %114
  %578 = sub i32 %577, %115
  %579 = sub i32 %578, %119
  %580 = sub i32 %579, %120
  %581 = sub i32 %580, %122
  %582 = sub i32 %581, %123
  %583 = sub i32 %582, %124
  %584 = add i32 %583, %128
  %585 = add i32 %584, %129
  %586 = sub i32 %585, %130
  %587 = add i32 %586, %132
  %588 = sub i32 %587, %133
  %589 = add i32 %588, %134
  %590 = add i32 %589, %137
  %591 = add i32 %590, %138
  %592 = add i32 %591, %139
  %593 = sub i32 %592, %140
  %594 = sub i32 %593, %141
  %595 = sub i32 %594, %144
  %596 = add i32 %595, %151
  %597 = sub i32 %596, %156
  %598 = add i32 %597, %157
  %599 = sub i32 %598, %158
  %600 = sub i32 %599, %164
  %601 = sub i32 %600, %166
  %602 = sub i32 %601, %167
  %603 = add i32 %602, %168
  %604 = add i32 %603, %169
  %605 = sub i32 %604, %170
  %606 = add i32 %605, %14
  %607 = sub i32 %606, %179
  %608 = add i32 %607, %180
  %609 = sub i32 %608, %181
  %610 = sub i32 %609, %182
  %611 = sub i32 %610, %185
  %612 = add i32 %611, %186
  %613 = add i32 %612, %187
  %614 = add i32 %613, %188
  %615 = sub i32 %614, %191
  %616 = add i32 %615, %193
  %617 = sub i32 %616, %196
  %618 = sub i32 %617, %197
  %619 = add i32 %618, %198
  %620 = sub i32 %619, %202
  %621 = sub i32 %620, %203
  %622 = add i32 %621, %204
  %623 = add i32 %622, %205
  %624 = sub i32 %623, %213
  %625 = add i32 %624, %216
  %626 = add i32 %625, %217
  %627 = add i32 %626, %218
  %628 = sub i32 %627, %219
  %629 = sub i32 %628, %220
  %630 = sub i32 %629, %221
  %631 = sub i32 %630, %159
  %632 = sub i32 %631, %224
  %633 = sub i32 %632, %226
  %634 = sub i32 %633, %228
  %635 = add i32 %634, %231
  %636 = add i32 %635, %233
  %637 = sub i32 %636, %235
  %638 = add i32 %637, %236
  %639 = add i32 %638, %240
  %640 = add i32 %639, %241
  %641 = add i32 %640, %242
  %642 = sub i32 %641, %245
  %643 = sub i32 %642, %247
  %644 = sub i32 %643, %248
  %645 = sub i32 %644, %251
  %646 = sub i32 %645, %254
  %647 = sub i32 %646, %256
  %648 = add i32 %647, %257
  %649 = sub i32 %648, %258
  %650 = sub i32 %649, %259
  %651 = add i32 %650, %263
  %652 = add i32 %651, %264
  %653 = sub i32 %652, %266
  %654 = add i32 %653, %269
  %655 = sub i32 %654, %273
  %656 = add i32 %655, %274
  %657 = sub i32 %656, %68
  %658 = sub i32 %657, %275
  %659 = sub i32 %658, %278
  %660 = sub i32 %659, %279
  %661 = add i32 %660, %73
  %662 = add i32 %661, %280
  %663 = sub i32 %662, %283
  %664 = add i32 %663, %286
  %665 = sub i32 %664, %287
  %666 = add i32 %665, %288
  %667 = sub i32 %666, %293
  %668 = add i32 %667, %295
  %669 = add i32 %668, %4
  %670 = sub i32 %669, %38
  %671 = sub i32 %670, %43
  %672 = sub i32 %671, %51
  %673 = sub i32 %672, %57
  %674 = add i32 %673, %74
  %675 = sub i32 %674, %78
  %676 = add i32 %675, %91
  %677 = add i32 %676, %98
  %678 = add i32 %677, %108
  %679 = sub i32 %678, %112
  %680 = sub i32 %679, %118
  %681 = sub i32 %680, %148
  %682 = sub i32 %681, %150
  %683 = sub i32 %682, %153
  %684 = add i32 %683, %163
  %685 = sub i32 %684, %190
  %686 = sub i32 %685, %195
  %687 = sub i32 %686, %207
  %688 = sub i32 %687, %210
  %689 = sub i32 %688, %212
  %690 = sub i32 %689, %223
  %691 = sub i32 %690, %229
  %692 = add i32 %691, %232
  %693 = sub i32 %692, %239
  %694 = sub i32 %693, %244
  %695 = add i32 %694, %252
  %696 = sub i32 %695, %261
  %697 = add i32 %696, %268
  %698 = sub i32 %697, %277
  %699 = sub i32 %698, %285
  %700 = sub i32 %699, %289
  %701 = add i32 %700, %292
  %702 = add i32 %701, %298
  %703 = sub i32 %702, %318
  %704 = add i32 %703, %308
  %705 = add i32 %704, %378
  %706 = add i32 %705, %310
  %707 = add i32 %706, %301
  %708 = sub i32 %707, %173
  %709 = sub i32 %708, %282
  %710 = add i32 %709, %309
  %711 = add i32 %710, %311
  %712 = sub i32 %711, %332
  %713 = add i32 %712, %306
  %714 = add i32 %713, %344
  %715 = add i32 %714, %347
  %716 = sub i32 %715, %386
  %717 = sub i32 %716, %388
  %718 = add i32 %717, %401
  %719 = add i32 %718, %403
  %720 = sub i32 %719, %405
  %721 = sub i32 %720, %418
  %722 = add i32 %721, %341
  %723 = add i32 %722, %445
  %724 = sub i32 %723, %162
  %725 = sub i32 %724, %177
  %726 = add i32 %725, %307
  %727 = add i32 %726, %325
  %728 = sub i32 %727, %331
  %729 = sub i32 %728, %335
  %730 = sub i32 %729, %342
  %731 = sub i32 %730, %345
  %732 = add i32 %731, %348
  %733 = sub i32 %732, %350
  %734 = sub i32 %733, %354
  %735 = add i32 %734, %356
  %736 = sub i32 %735, %359
  %737 = sub i32 %736, %360
  %738 = sub i32 %737, %363
  %739 = add i32 %738, %364
  %740 = add i32 %739, %366
  %741 = sub i32 %740, %320
  %742 = add i32 %741, %373
  %743 = sub i32 %742, %375
  %744 = sub i32 %743, %376
  %745 = sub i32 %744, %379
  %746 = add i32 %745, %381
  %747 = sub i32 %746, %389
  %748 = sub i32 %747, %396
  %749 = sub i32 %748, %397
  %750 = add i32 %749, %398
  %751 = add i32 %750, %399
  %752 = add i32 %751, %400
  %753 = sub i32 %752, %404
  %754 = add i32 %753, %407
  %755 = sub i32 %754, %409
  %756 = add i32 %755, %411
  %757 = add i32 %756, %413
  %758 = sub i32 %757, %420
  %759 = sub i32 %758, %421
  %760 = sub i32 %759, %422
  %761 = add i32 %760, %423
  %762 = add i32 %761, %424
  %763 = sub i32 %762, %425
  %764 = add i32 %763, %426
  %765 = add i32 %764, %428
  %766 = sub i32 %765, %430
  %767 = sub i32 %766, %432
  %768 = add i32 %767, %433
  %769 = add i32 %768, %434
  %770 = add i32 %769, %437
  %771 = add i32 %770, %439
  %772 = sub i32 %771, %440
  %773 = add i32 %772, %443
  %774 = add i32 %773, %444
  %775 = add i32 %774, %317
  %776 = add i32 %775, %340
  %777 = sub i32 %776, %353
  %778 = add i32 %777, %358
  %779 = sub i32 %778, %369
  %780 = sub i32 %779, %371
  %781 = sub i32 %780, %382
  %782 = sub i32 %781, %384
  %783 = sub i32 %782, %385
  %784 = add i32 %783, %395
  %785 = sub i32 %784, %412
  %786 = sub i32 %785, %415
  %787 = sub i32 %786, %417
  %788 = sub i32 %787, %436
  %789 = sub i32 %788, %442
  %790 = sub i32 %789, %322
  %791 = add i32 %790, %508
  %792 = add i32 %791, %511
  %793 = add i32 %792, %515
  %794 = add i32 %793, %505
  %795 = add i32 %794, %500
  %796 = add i32 %795, %493
  %797 = add i32 %796, %483
  %798 = icmp eq i32 %24, %797
  %799 = select i1 %798, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %800 = tail call i32 @puts(i8* nonnull dereferenceable(1) %799)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
