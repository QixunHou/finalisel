; ModuleID = '../.././c_source_file/0888_path_condition_crackme.c'
source_filename = "../.././c_source_file/0888_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = and i32 %2, %1
  %10 = xor i32 %9, -1
  %11 = xor i32 %8, %10
  %12 = xor i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %0
  %15 = shl i32 %14, 1
  %16 = sub i32 %15, %11
  %17 = xor i32 %5, -1
  %18 = xor i32 %4, %3
  %19 = xor i32 %18, -1
  %20 = and i32 %17, %19
  %21 = sub i32 %16, %20
  %22 = and i32 %1, %0
  %23 = xor i32 %22, -1
  %24 = and i32 %23, %2
  %25 = or i32 %2, %1
  %26 = or i32 %25, %0
  %27 = xor i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %0
  %30 = or i32 %29, %28
  %31 = or i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %27, %32
  %34 = or i32 %7, %28
  %35 = or i32 %7, %1
  %36 = and i32 %35, %0
  %37 = or i32 %12, %0
  %38 = xor i32 %0, -1
  %39 = and i32 %25, %38
  %40 = and i32 %29, %27
  %41 = or i32 %13, %0
  %42 = shl i32 %41, 1
  %43 = and i32 %2, %0
  %44 = xor i32 %1, -1
  %45 = or i32 %44, %0
  %46 = xor i32 %43, %45
  %47 = or i32 %27, %2
  %48 = xor i32 %45, -1
  %49 = or i32 %12, %48
  %50 = and i32 %7, %1
  %51 = or i32 %50, %38
  %52 = or i32 %7, %0
  %53 = and i32 %52, %1
  %54 = or i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %29, %55
  %57 = and i32 %7, %23
  %58 = or i32 %13, %38
  %59 = xor i32 %45, %2
  %60 = xor i32 %25, -1
  %61 = xor i32 %60, %0
  %62 = and i32 %9, %0
  %63 = and i32 %12, %38
  %64 = or i32 %62, %63
  %65 = shl i32 %64, 1
  %66 = or i32 %43, %27
  %67 = xor i32 %29, -1
  %68 = or i32 %22, %67
  %69 = shl i32 %68, 1
  %70 = xor i32 %10, %0
  %71 = and i32 %44, %0
  %72 = xor i32 %71, %10
  %73 = or i32 %13, %48
  %74 = or i32 %35, %0
  %75 = and i32 %44, %2
  %76 = and i32 %75, %0
  %77 = xor i32 %76, %37
  %78 = xor i32 %8, -1
  %79 = and i32 %27, %78
  %80 = shl i32 %79, 1
  %81 = or i32 %22, %60
  %82 = or i32 %8, %1
  %83 = shl i32 %82, 1
  %84 = or i32 %43, %55
  %85 = or i32 %50, %0
  %86 = or i32 %8, %9
  %87 = or i32 %22, %7
  %88 = xor i32 %50, -1
  %89 = or i32 %88, %0
  %90 = xor i32 %88, %0
  %91 = shl i32 %90, 1
  %92 = xor i32 %22, %2
  %93 = and i32 %29, %23
  %94 = xor i32 %12, %0
  %95 = or i32 %76, %94
  %96 = xor i32 %52, -1
  %97 = shl i32 %96, 2
  %98 = and i32 %31, %27
  %99 = xor i32 %52, %1
  %100 = or i32 %71, %67
  %101 = add i32 %8, 1
  %102 = and i32 %12, %23
  %103 = or i32 %55, %2
  %104 = xor i32 %43, %54
  %105 = or i32 %71, %7
  %106 = xor i32 %31, %1
  %107 = xor i32 %71, -1
  %108 = and i32 %12, %107
  %109 = or i32 %22, %2
  %110 = and i32 %29, %107
  %111 = or i32 %22, %13
  %112 = or i32 %8, %28
  %113 = or i32 %67, %1
  %114 = add i32 %31, 1
  %115 = and i32 %54, %67
  %116 = xor i32 %32, %1
  %117 = add i32 %29, 1
  %118 = or i32 %60, %0
  %119 = and i32 %12, %45
  %120 = shl i32 %119, 1
  %121 = and i32 %9, %38
  %122 = and i32 %25, %0
  %123 = or i32 %121, %122
  %124 = and i32 %13, %107
  %125 = shl i32 %124, 1
  %126 = and i32 %75, %38
  %127 = or i32 %44, %2
  %128 = and i32 %127, %0
  %129 = xor i32 %128, 2147483647
  %130 = xor i32 %129, %126
  %131 = xor i32 %107, %2
  %132 = and i32 %10, %0
  %133 = xor i32 %23, %2
  %134 = xor i32 %48, %2
  %135 = shl i32 %134, 2
  %136 = and i32 %27, %2
  %137 = or i32 %22, %32
  %138 = xor i32 %71, %2
  %139 = shl i32 %138, 1
  %140 = or i32 %43, %28
  %141 = xor i32 %71, %88
  %142 = and i32 %88, %38
  %143 = xor i32 %8, %1
  %144 = and i32 %31, %1
  %145 = xor i32 %62, %94
  %146 = and i32 %12, %0
  %147 = or i32 %121, %146
  %148 = xor i32 %25, %0
  %149 = xor i32 %62, -1
  %150 = xor i32 %148, %149
  %151 = xor i32 %127, %0
  %152 = or i32 %76, %151
  %153 = xor i32 %35, %0
  %154 = or i32 %7, %48
  %155 = or i32 %29, %27
  %156 = or i32 %50, %71
  %157 = or i32 %22, %96
  %158 = xor i32 %50, %0
  %159 = or i32 %67, %48
  %160 = shl i32 %159, 1
  %161 = xor i32 %35, -1
  %162 = and i32 %7, %28
  %163 = or i32 %48, %2
  %164 = and i32 %54, %2
  %165 = xor i32 %52, %22
  %166 = xor i32 %94, 2147483647
  %167 = or i32 %166, %62
  %168 = shl i32 %94, 1
  %169 = and i32 %45, %7
  %170 = and i32 %78, %44
  %171 = or i32 %7, %55
  %172 = and i32 %28, %2
  %173 = shl i32 %172, 2
  %174 = or i32 %29, %1
  %175 = or i32 %28, %2
  %176 = xor i32 %43, %88
  %177 = or i32 %71, %2
  %178 = or i32 %29, %48
  %179 = xor i32 %63, %149
  %180 = or i32 %71, %13
  %181 = or i32 %43, %1
  %182 = or i32 %29, %44
  %183 = xor i32 %25, %22
  %184 = or i32 %12, %38
  %185 = and i32 %29, %54
  %186 = and i32 %54, %13
  %187 = or i32 %67, %28
  %188 = and i32 %29, %1
  %189 = xor i32 %39, %149
  %190 = and i32 %13, %38
  %191 = or i32 %10, %0
  %192 = and i32 %78, %1
  %193 = xor i32 %43, %1
  %194 = and i32 %52, %44
  %195 = or i32 %60, %38
  %196 = or i32 %35, %38
  %197 = or i32 %9, %38
  %198 = and i32 %10, %38
  %199 = shl i32 %198, 1
  %200 = or i32 %13, %55
  %201 = or i32 %67, %55
  %202 = and i32 %27, %67
  %203 = shl i32 %202, 1
  %204 = and i32 %67, %44
  %205 = xor i32 %37, -1
  %206 = or i32 %76, %205
  %207 = and i32 %54, %7
  %208 = xor i32 %31, %22
  %209 = xor i32 %161, %0
  %210 = xor i32 %9, %0
  %211 = and i32 %7, %107
  %212 = and i32 %107, %2
  %213 = or i32 %8, %161
  %214 = and i32 %12, %54
  %215 = or i32 %27, %67
  %216 = and i32 %29, %28
  %217 = xor i32 %96, %1
  %218 = shl i32 %217, 1
  %219 = or i32 %43, %60
  %220 = shl i32 %219, 1
  %221 = and i32 %67, %23
  %222 = xor i32 %43, -1
  %223 = and i32 %27, %222
  %224 = or i32 %62, %39
  %225 = or i32 %43, %48
  %226 = shl i32 %28, 1
  %227 = and i32 %45, %2
  %228 = and i32 %13, %23
  %229 = shl i32 %52, 1
  %230 = xor i32 %184, -1
  %231 = or i32 %126, %230
  %232 = or i32 %62, %148
  %233 = xor i32 %8, %35
  %234 = or i32 %9, %71
  %235 = and i32 %127, %38
  %236 = or i32 %76, %235
  %237 = and i32 %60, %38
  %238 = mul i32 %237, 14
  %239 = and i32 %50, %38
  %240 = mul i32 %239, 12
  %241 = and i32 %60, %0
  %242 = mul i32 %241, -9
  %243 = and i32 %50, %0
  %244 = and i32 %161, %38
  %245 = mul i32 %244, 21
  %246 = and i32 %161, %0
  %247 = mul i32 %62, 25
  %248 = and i32 %17, %4
  %249 = or i32 %248, %18
  %250 = or i32 %17, %3
  %251 = or i32 %5, %3
  %252 = xor i32 %251, -1
  %253 = xor i32 %252, %4
  %254 = or i32 %4, %3
  %255 = xor i32 %254, -1
  %256 = or i32 %17, %255
  %257 = xor i32 %255, %5
  %258 = xor i32 %3, -1
  %259 = and i32 %258, %4
  %260 = and i32 %17, %3
  %261 = or i32 %260, %259
  %262 = xor i32 %4, -1
  %263 = and i32 %262, %5
  %264 = xor i32 %263, %3
  %265 = or i32 %263, %18
  %266 = xor i32 %5, %3
  %267 = xor i32 %266, -1
  %268 = and i32 %267, %4
  %269 = shl i32 %268, 1
  %270 = or i32 %248, %3
  %271 = shl i32 %270, 1
  %272 = xor i32 %250, -1
  %273 = or i32 %272, %262
  %274 = shl i32 %273, 1
  %275 = and i32 %258, %5
  %276 = and i32 %275, %262
  %277 = or i32 %276, %268
  %278 = and i32 %5, %4
  %279 = xor i32 %278, -1
  %280 = xor i32 %279, %3
  %281 = shl i32 %280, 1
  %282 = and i32 %5, %3
  %283 = xor i32 %282, -1
  %284 = and i32 %4, %3
  %285 = or i32 %263, %284
  %286 = and i32 %266, %4
  %287 = or i32 %248, %258
  %288 = and i32 %267, %262
  %289 = and i32 %275, %4
  %290 = or i32 %266, %4
  %291 = xor i32 %289, %290
  %292 = or i32 %258, %4
  %293 = xor i32 %278, %292
  %294 = and i32 %279, %258
  %295 = and i32 %18, %5
  %296 = xor i32 %248, -1
  %297 = and i32 %296, %258
  %298 = or i32 %282, %4
  %299 = or i32 %18, %17
  %300 = xor i32 %278, %251
  %301 = or i32 %250, %262
  %302 = and i32 %254, %5
  %303 = shl i32 %302, 1
  %304 = or i32 %259, %17
  %305 = xor i32 %284, -1
  %306 = xor i32 %305, %5
  %307 = xor i32 %260, -1
  %308 = and i32 %307, %4
  %309 = and i32 %292, %17
  %310 = xor i32 %266, %4
  %311 = or i32 %289, %310
  %312 = xor i32 %260, %4
  %313 = or i32 %278, %19
  %314 = or i32 %5, %4
  %315 = xor i32 %314, -1
  %316 = or i32 %284, %315
  %317 = or i32 %307, %4
  %318 = or i32 %278, %252
  %319 = or i32 %278, %3
  %320 = or i32 %315, %19
  %321 = shl i32 %320, 2
  %322 = xor i32 %292, %5
  %323 = shl i32 %322, 1
  %324 = or i32 %266, %255
  %325 = xor i32 %278, %254
  %326 = and i32 %314, %258
  %327 = and i32 %283, %4
  %328 = xor i32 %5, %4
  %329 = xor i32 %328, -1
  %330 = and i32 %292, %329
  %331 = shl i32 %330, 1
  %332 = or i32 %251, %262
  %333 = xor i32 %292, -1
  %334 = or i32 %278, %333
  %335 = or i32 %284, %5
  %336 = and i32 %307, %262
  %337 = or i32 %329, %255
  %338 = or i32 %266, %333
  %339 = or i32 %258, %5
  %340 = and i32 %339, %4
  %341 = xor i32 %340, -1
  %342 = xor i32 %276, %341
  %343 = add i32 %278, 1
  %344 = or i32 %267, %262
  %345 = or i32 %284, %17
  %346 = or i32 %278, %260
  %347 = or i32 %18, %329
  %348 = shl i32 %347, 1
  %349 = xor i32 %278, %307
  %350 = shl i32 %349, 1
  %351 = xor i32 %251, %4
  %352 = shl i32 %351, 1
  %353 = xor i32 %339, -1
  %354 = or i32 %353, %4
  %355 = xor i32 %289, %354
  %356 = and i32 %282, %4
  %357 = and i32 %266, %262
  %358 = or i32 %356, %357
  %359 = shl i32 %358, 1
  %360 = and i32 %329, %305
  %361 = xor i32 %259, -1
  %362 = and i32 %328, %361
  %363 = xor i32 %250, %284
  %364 = xor i32 %314, %284
  %365 = or i32 %259, %267
  %366 = xor i32 %259, %5
  %367 = or i32 %260, %4
  %368 = and i32 %18, %329
  %369 = or i32 %328, %18
  %370 = and i32 %296, %3
  %371 = or i32 %278, %18
  %372 = xor i32 %314, %3
  %373 = and i32 %296, %19
  %374 = xor i32 %278, %3
  %375 = or i32 %329, %19
  %376 = and i32 %282, %262
  %377 = or i32 %376, %286
  %378 = or i32 %248, %272
  %379 = xor i32 %259, %283
  %380 = and i32 %305, %5
  %381 = xor i32 %310, -1
  %382 = or i32 %356, %381
  %383 = xor i32 %339, %262
  %384 = xor i32 %383, %289
  %385 = xor i32 %357, -1
  %386 = xor i32 %356, %385
  %387 = or i32 %278, %255
  %388 = or i32 %284, %252
  %389 = or i32 %263, %3
  %390 = and i32 %328, %19
  %391 = and i32 %329, %3
  %392 = shl i32 %391, 1
  %393 = add i32 %248, 1
  %394 = and i32 %292, %267
  %395 = xor i32 %248, %250
  %396 = xor i32 %251, %284
  %397 = or i32 %356, %351
  %398 = and i32 %283, %262
  %399 = and i32 %254, %329
  %400 = and i32 %361, %5
  %401 = xor i32 %290, -1
  %402 = or i32 %289, %401
  %403 = and i32 %328, %305
  %404 = and i32 %254, %17
  %405 = add i32 %251, 1
  %406 = xor i32 %248, %3
  %407 = xor i32 %267, %4
  %408 = or i32 %260, %262
  %409 = or i32 %267, %333
  %410 = or i32 %284, %272
  %411 = or i32 %328, %258
  %412 = or i32 %282, %262
  %413 = and i32 %18, %17
  %414 = or i32 %267, %255
  %415 = or i32 %267, %4
  %416 = add i32 %260, 1
  %417 = xor i32 %250, %4
  %418 = or i32 %17, %333
  %419 = and i32 %329, %258
  %420 = and i32 %266, %254
  %421 = xor i32 %315, %3
  %422 = and i32 %252, %262
  %423 = mul i32 %422, -7
  %424 = and i32 %260, %262
  %425 = mul i32 %424, 13
  %426 = and i32 %252, %4
  %427 = shl i32 %426, 1
  %428 = and i32 %260, %4
  %429 = mul i32 %428, -6
  %430 = and i32 %272, %262
  %431 = shl i32 %430, 2
  %432 = and i32 %272, %4
  %433 = mul i32 %356, 11
  %434 = add i32 %169, %22
  %435 = add i32 %434, %210
  %436 = add i32 %435, %196
  %437 = add i32 %436, %193
  %438 = add i32 %437, %191
  %439 = add i32 %438, %182
  %440 = add i32 %439, %144
  %441 = add i32 %440, %140
  %442 = add i32 %441, %137
  %443 = add i32 %442, %99
  %444 = add i32 %443, %37
  %445 = add i32 %444, %418
  %446 = add i32 %445, %267
  %447 = add i32 %446, %299
  %448 = add i32 %447, %167
  %449 = add i32 %448, %130
  %450 = add i32 %449, %412
  %451 = add i32 %450, %316
  %452 = add i32 %451, %312
  %453 = add i32 %452, %288
  %454 = add i32 %453, %397
  %455 = shl i32 %454, 1
  %456 = or i32 %43, %211
  %457 = sub i32 %243, %456
  %458 = add i32 %457, %26
  %459 = add i32 %458, %305
  %460 = sub i32 %459, %413
  %461 = add i32 %460, %335
  %462 = sub i32 %461, %398
  %463 = sub i32 %462, %432
  %464 = mul i32 %463, 5
  %465 = add i32 %294, %40
  %466 = add i32 %465, %318
  %467 = shl i32 %466, 2
  %468 = or i32 %246, %121
  %469 = shl i32 %468, 3
  %470 = sub i32 %35, %200
  %471 = add i32 %470, %115
  %472 = add i32 %471, %380
  %473 = sub i32 %472, %365
  %474 = sub i32 %473, %376
  %475 = add i32 %474, %344
  %476 = mul i32 %475, 3
  %477 = add i32 %22, %0
  %478 = add i32 %477, 5
  %479 = add i32 %478, %2
  %480 = sub i32 %479, %45
  %481 = add i32 %480, %48
  %482 = sub i32 %481, %27
  %483 = add i32 %482, %107
  %484 = add i32 %483, %24
  %485 = add i32 %484, %34
  %486 = sub i32 %485, %47
  %487 = add i32 %486, %57
  %488 = sub i32 %487, %59
  %489 = sub i32 %488, %87
  %490 = add i32 %489, %92
  %491 = add i32 %490, %101
  %492 = sub i32 %491, %103
  %493 = sub i32 %492, %105
  %494 = sub i32 %493, %109
  %495 = add i32 %494, %114
  %496 = add i32 %495, %117
  %497 = add i32 %496, %131
  %498 = sub i32 %497, %133
  %499 = sub i32 %498, %136
  %500 = sub i32 %499, %29
  %501 = sub i32 %500, %154
  %502 = add i32 %501, %10
  %503 = sub i32 %502, %162
  %504 = sub i32 %503, %163
  %505 = add i32 %504, %164
  %506 = add i32 %505, %171
  %507 = sub i32 %506, %175
  %508 = add i32 %507, %177
  %509 = add i32 %508, %60
  %510 = add i32 %509, %207
  %511 = sub i32 %510, %212
  %512 = sub i32 %511, %226
  %513 = sub i32 %512, %227
  %514 = add i32 %513, %88
  %515 = sub i32 %514, %3
  %516 = add i32 %515, %30
  %517 = sub i32 %516, %33
  %518 = add i32 %517, %36
  %519 = add i32 %518, %39
  %520 = sub i32 %519, %46
  %521 = sub i32 %520, %49
  %522 = sub i32 %521, %51
  %523 = add i32 %522, %53
  %524 = add i32 %523, %56
  %525 = add i32 %524, %58
  %526 = sub i32 %525, %61
  %527 = add i32 %526, %66
  %528 = sub i32 %527, %70
  %529 = sub i32 %528, %72
  %530 = add i32 %529, %73
  %531 = add i32 %530, %74
  %532 = sub i32 %531, %81
  %533 = add i32 %532, %84
  %534 = add i32 %533, %85
  %535 = sub i32 %534, %86
  %536 = add i32 %535, %89
  %537 = add i32 %536, %93
  %538 = sub i32 %537, %97
  %539 = add i32 %538, %98
  %540 = add i32 %539, %100
  %541 = sub i32 %540, %102
  %542 = sub i32 %541, %104
  %543 = sub i32 %542, %106
  %544 = add i32 %543, %108
  %545 = sub i32 %544, %110
  %546 = sub i32 %545, %111
  %547 = add i32 %546, %112
  %548 = sub i32 %547, %113
  %549 = sub i32 %548, %63
  %550 = sub i32 %549, %116
  %551 = sub i32 %550, %118
  %552 = add i32 %551, %132
  %553 = sub i32 %552, %135
  %554 = sub i32 %553, %139
  %555 = sub i32 %554, %141
  %556 = sub i32 %555, %142
  %557 = sub i32 %556, %143
  %558 = add i32 %557, %153
  %559 = add i32 %558, %155
  %560 = sub i32 %559, %156
  %561 = sub i32 %560, %157
  %562 = add i32 %561, %158
  %563 = add i32 %562, %165
  %564 = sub i32 %563, %170
  %565 = sub i32 %564, %173
  %566 = add i32 %565, %174
  %567 = sub i32 %566, %176
  %568 = add i32 %567, %178
  %569 = sub i32 %568, %180
  %570 = sub i32 %569, %181
  %571 = add i32 %570, %183
  %572 = sub i32 %571, %184
  %573 = sub i32 %572, %185
  %574 = add i32 %573, %186
  %575 = add i32 %574, %187
  %576 = sub i32 %575, %188
  %577 = sub i32 %576, %190
  %578 = sub i32 %577, %192
  %579 = add i32 %578, %194
  %580 = add i32 %579, %195
  %581 = add i32 %580, %197
  %582 = add i32 %581, %201
  %583 = add i32 %582, %204
  %584 = add i32 %583, %208
  %585 = sub i32 %584, %209
  %586 = sub i32 %585, %213
  %587 = sub i32 %586, %214
  %588 = add i32 %587, %215
  %589 = sub i32 %588, %216
  %590 = sub i32 %589, %221
  %591 = sub i32 %590, %223
  %592 = sub i32 %591, %225
  %593 = add i32 %592, %228
  %594 = sub i32 %593, %229
  %595 = sub i32 %594, %146
  %596 = add i32 %595, %233
  %597 = sub i32 %596, %234
  %598 = add i32 %597, %4
  %599 = sub i32 %598, %42
  %600 = sub i32 %599, %69
  %601 = sub i32 %600, %77
  %602 = sub i32 %601, %80
  %603 = sub i32 %602, %83
  %604 = sub i32 %603, %91
  %605 = add i32 %604, %95
  %606 = sub i32 %605, %120
  %607 = sub i32 %606, %123
  %608 = sub i32 %607, %125
  %609 = add i32 %608, %145
  %610 = add i32 %609, %147
  %611 = add i32 %610, %150
  %612 = add i32 %611, %152
  %613 = sub i32 %612, %160
  %614 = sub i32 %613, %168
  %615 = sub i32 %614, %179
  %616 = sub i32 %615, %189
  %617 = sub i32 %616, %199
  %618 = sub i32 %617, %203
  %619 = sub i32 %618, %206
  %620 = sub i32 %619, %218
  %621 = sub i32 %620, %220
  %622 = sub i32 %621, %224
  %623 = add i32 %622, %231
  %624 = sub i32 %623, %232
  %625 = add i32 %624, %236
  %626 = add i32 %625, %238
  %627 = add i32 %626, %240
  %628 = add i32 %627, %242
  %629 = add i32 %628, %245
  %630 = add i32 %629, %247
  %631 = sub i32 %630, %5
  %632 = sub i32 %631, %18
  %633 = add i32 %632, %259
  %634 = add i32 %633, %284
  %635 = sub i32 %634, %65
  %636 = add i32 %635, %250
  %637 = add i32 %636, %256
  %638 = add i32 %637, %257
  %639 = add i32 %638, %295
  %640 = add i32 %639, %304
  %641 = add i32 %640, %306
  %642 = sub i32 %641, %309
  %643 = sub i32 %642, %263
  %644 = sub i32 %643, %278
  %645 = add i32 %644, %260
  %646 = add i32 %645, %343
  %647 = sub i32 %646, %345
  %648 = add i32 %647, %366
  %649 = add i32 %648, %393
  %650 = sub i32 %649, %400
  %651 = sub i32 %650, %404
  %652 = add i32 %651, %405
  %653 = add i32 %652, %416
  %654 = add i32 %653, %469
  %655 = add i32 %654, %249
  %656 = sub i32 %655, %253
  %657 = sub i32 %656, %261
  %658 = add i32 %657, %264
  %659 = sub i32 %658, %265
  %660 = add i32 %659, %285
  %661 = add i32 %660, %286
  %662 = add i32 %661, %287
  %663 = sub i32 %662, %293
  %664 = add i32 %663, %297
  %665 = sub i32 %664, %298
  %666 = add i32 %665, %300
  %667 = sub i32 %666, %301
  %668 = sub i32 %667, %303
  %669 = sub i32 %668, %308
  %670 = sub i32 %669, %313
  %671 = sub i32 %670, %317
  %672 = sub i32 %671, %319
  %673 = sub i32 %672, %323
  %674 = sub i32 %673, %324
  %675 = add i32 %674, %325
  %676 = add i32 %675, %326
  %677 = add i32 %676, %327
  %678 = add i32 %677, %332
  %679 = sub i32 %678, %334
  %680 = add i32 %679, %336
  %681 = sub i32 %680, %337
  %682 = sub i32 %681, %338
  %683 = add i32 %682, %346
  %684 = add i32 %683, %360
  %685 = add i32 %684, %362
  %686 = sub i32 %685, %363
  %687 = add i32 %686, %364
  %688 = sub i32 %687, %367
  %689 = sub i32 %688, %368
  %690 = add i32 %689, %369
  %691 = sub i32 %690, %370
  %692 = sub i32 %691, %371
  %693 = add i32 %692, %372
  %694 = add i32 %693, %373
  %695 = sub i32 %694, %374
  %696 = add i32 %695, %375
  %697 = sub i32 %696, %378
  %698 = add i32 %697, %379
  %699 = add i32 %698, %387
  %700 = add i32 %699, %388
  %701 = sub i32 %700, %310
  %702 = sub i32 %701, %389
  %703 = sub i32 %702, %390
  %704 = add i32 %703, %394
  %705 = sub i32 %704, %395
  %706 = add i32 %705, %396
  %707 = sub i32 %706, %399
  %708 = add i32 %707, %403
  %709 = sub i32 %708, %406
  %710 = sub i32 %709, %407
  %711 = sub i32 %710, %408
  %712 = add i32 %711, %409
  %713 = sub i32 %712, %410
  %714 = add i32 %713, %411
  %715 = sub i32 %714, %414
  %716 = add i32 %715, %415
  %717 = sub i32 %716, %417
  %718 = add i32 %717, %419
  %719 = add i32 %718, %420
  %720 = add i32 %719, %421
  %721 = sub i32 %720, %269
  %722 = sub i32 %721, %271
  %723 = sub i32 %722, %274
  %724 = sub i32 %723, %277
  %725 = sub i32 %724, %281
  %726 = sub i32 %725, %291
  %727 = sub i32 %726, %311
  %728 = sub i32 %727, %321
  %729 = sub i32 %728, %331
  %730 = add i32 %729, %342
  %731 = sub i32 %730, %348
  %732 = sub i32 %731, %350
  %733 = sub i32 %732, %352
  %734 = add i32 %733, %355
  %735 = sub i32 %734, %377
  %736 = sub i32 %735, %382
  %737 = sub i32 %736, %384
  %738 = sub i32 %737, %386
  %739 = sub i32 %738, %392
  %740 = sub i32 %739, %402
  %741 = add i32 %740, %423
  %742 = add i32 %741, %425
  %743 = sub i32 %742, %427
  %744 = add i32 %743, %429
  %745 = sub i32 %744, %431
  %746 = add i32 %745, %433
  %747 = sub i32 %746, %359
  %748 = add i32 %747, %467
  %749 = add i32 %748, %476
  %750 = add i32 %749, %464
  %751 = add i32 %750, %455
  %752 = icmp eq i32 %21, %751
  %753 = select i1 %752, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %754 = tail call i32 @puts(i8* nonnull dereferenceable(1) %753)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
