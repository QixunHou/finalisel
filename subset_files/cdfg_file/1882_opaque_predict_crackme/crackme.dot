digraph "DFG for'crackme' function" {
	Node0x1d314b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1d31b60[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1d31c20[shape=record, label="  %5 = mul i32 %4, -4"];
	Node0x1d31cc0[shape=record, label="  %6 = shl i32 %1, 1"];
	Node0x1d31d30[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x1d31dd0[shape=record, label="  %8 = xor i32 %6, -2"];
	Node0x1d31e40[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x1d31eb0[shape=record, label="  %10 = or i32 %9, %1"];
	Node0x1d31f50[shape=record, label="  %11 = shl i32 %7, 2"];
	Node0x1d31fc0[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1d32030[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x1d320a0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x1d32110[shape=record, label="  %15 = sub i32 1, %0"];
	Node0x1d32180[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x1d321f0[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0x1d32260[shape=record, label="  %18 = add i32 %17, %8"];
	Node0x1d322d0[shape=record, label="  %19 = add i32 %18, %3"];
	Node0x1d32340[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0x1d323b0[shape=record, label="  %21 = sub i32 %20, %14"];
	Node0x1d32420[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0x1d32490[shape=record, label="  %23 = icmp eq i32 %5, %22"];
	Node0x1cd2268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d32930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x1d32980[shape=record, label="  ret void"];
	Node0x1d314b0 -> Node0x1d31b60;
	Node0x1d31b60 -> Node0x1d31c20;
	Node0x1d31c20 -> Node0x1d31cc0;
	Node0x1d31cc0 -> Node0x1d31d30;
	Node0x1d31d30 -> Node0x1d31dd0;
	Node0x1d31dd0 -> Node0x1d31e40;
	Node0x1d31e40 -> Node0x1d31eb0;
	Node0x1d31eb0 -> Node0x1d31f50;
	Node0x1d31f50 -> Node0x1d31fc0;
	Node0x1d31fc0 -> Node0x1d32030;
	Node0x1d32030 -> Node0x1d320a0;
	Node0x1d320a0 -> Node0x1d32110;
	Node0x1d32110 -> Node0x1d32180;
	Node0x1d32180 -> Node0x1d321f0;
	Node0x1d321f0 -> Node0x1d32260;
	Node0x1d32260 -> Node0x1d322d0;
	Node0x1d322d0 -> Node0x1d32340;
	Node0x1d32340 -> Node0x1d323b0;
	Node0x1d323b0 -> Node0x1d32420;
	Node0x1d32420 -> Node0x1d32490;
	Node0x1d32490 -> Node0x1cd2268;
	Node0x1cd2268 -> Node0x1d32930;
	Node0x1d32930 -> Node0x1d32980;
edge [color=red]
	Node0x1d314b0 -> Node0x1d31b60;
	Node0x1d31b60 -> Node0x1d31c20;
	Node0x1d31cc0 -> Node0x1d31dd0;
	Node0x1d31e40 -> Node0x1d31eb0;
	Node0x1d31d30 -> Node0x1d31f50;
	Node0x1d31f50 -> Node0x1d31fc0;
	Node0x1d32030 -> Node0x1d320a0;
	Node0x1d32110 -> Node0x1d32180;
	Node0x1d31cc0 -> Node0x1d32180;
	Node0x1d32180 -> Node0x1d321f0;
	Node0x1d31d30 -> Node0x1d321f0;
	Node0x1d321f0 -> Node0x1d32260;
	Node0x1d31dd0 -> Node0x1d32260;
	Node0x1d32260 -> Node0x1d322d0;
	Node0x1d314b0 -> Node0x1d322d0;
	Node0x1d322d0 -> Node0x1d32340;
	Node0x1d31eb0 -> Node0x1d32340;
	Node0x1d32340 -> Node0x1d323b0;
	Node0x1d320a0 -> Node0x1d323b0;
	Node0x1d323b0 -> Node0x1d32420;
	Node0x1d31fc0 -> Node0x1d32420;
	Node0x1d31c20 -> Node0x1d32490;
	Node0x1d32420 -> Node0x1d32490;
	Node0x1d32490 -> Node0x1cd2268;
	Node0x1cd2268 -> Node0x1d32930;
}
