; ModuleID = '../.././c_source_file/1234_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1234_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = and i32 %1, %0
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %7, %10
  %12 = add i32 %6, %11
  %13 = xor i32 %2, %0
  %14 = or i32 %13, %1
  %15 = sub i32 %12, %14
  %16 = xor i32 %4, %3
  %17 = and i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = xor i32 %4, -1
  %20 = and i32 %19, %3
  %21 = xor i32 %20, -1
  %22 = or i32 %19, %3
  %23 = or i32 %4, %3
  %24 = add i32 %23, 1
  %25 = shl i32 %17, 1
  %26 = and i32 %2, %1
  %27 = and i32 %26, %0
  %28 = or i32 %2, %1
  %29 = xor i32 %28, %0
  %30 = or i32 %27, %29
  %31 = xor i32 %13, -1
  %32 = or i32 %7, %31
  %33 = or i32 %10, %0
  %34 = xor i32 %1, -1
  %35 = and i32 %34, %2
  %36 = and i32 %35, %0
  %37 = xor i32 %2, %1
  %38 = or i32 %37, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %36, %39
  %41 = xor i32 %28, -1
  %42 = xor i32 %36, %38
  %43 = and i32 %2, %0
  %44 = and i32 %8, %1
  %45 = or i32 %43, %44
  %46 = or i32 %8, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %47, %1
  %49 = xor i32 %0, -1
  %50 = or i32 %34, %2
  %51 = and i32 %50, %49
  %52 = or i32 %36, %51
  %53 = xor i32 %9, %7
  %54 = or i32 %43, %41
  %55 = or i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = add i32 %55, 1
  %58 = and i32 %8, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %59, %1
  %61 = and i32 %37, %49
  %62 = or i32 %27, %61
  %63 = or i32 %58, %34
  %64 = xor i32 %43, %55
  %65 = or i32 %13, %7
  %66 = or i32 %34, %0
  %67 = xor i32 %66, -1
  %68 = xor i32 %37, -1
  %69 = or i32 %68, %67
  %70 = or i32 %2, %0
  %71 = xor i32 %70, -1
  %72 = or i32 %71, %34
  %73 = or i32 %44, %0
  %74 = shl i32 %73, 1
  %75 = xor i32 %1, %0
  %76 = xor i32 %75, -1
  %77 = or i32 %8, %76
  %78 = and i32 %70, %75
  %79 = or i32 %7, %2
  %80 = xor i32 %26, %0
  %81 = xor i32 %43, %66
  %82 = shl i32 %8, 1
  %83 = xor i32 %46, %7
  %84 = xor i32 %41, %0
  %85 = xor i32 %58, %1
  %86 = or i32 %37, %7
  %87 = xor i32 %50, %0
  %88 = xor i32 %36, -1
  %89 = xor i32 %87, %88
  %90 = or i32 %71, %1
  %91 = shl i32 %90, 1
  %92 = xor i32 %7, -1
  %93 = add i32 %7, 1
  %94 = or i32 %37, %67
  %95 = and i32 %59, %76
  %96 = and i32 %34, %0
  %97 = or i32 %26, %96
  %98 = xor i32 %43, -1
  %99 = and i32 %98, %1
  %100 = and i32 %35, %49
  %101 = and i32 %50, %0
  %102 = or i32 %100, %101
  %103 = or i32 %58, %1
  %104 = or i32 %68, %56
  %105 = shl i32 %104, 1
  %106 = xor i32 %26, -1
  %107 = or i32 %106, %49
  %108 = and i32 %37, %0
  %109 = and i32 %55, %8
  %110 = or i32 %8, %56
  %111 = xor i32 %27, -1
  %112 = xor i32 %61, %111
  %113 = and i32 %68, %0
  %114 = shl i32 %113, 1
  %115 = add i32 %58, 1
  %116 = xor i32 %70, %7
  %117 = or i32 %96, %31
  %118 = and i32 %55, %68
  %119 = or i32 %9, %49
  %120 = or i32 %75, %47
  %121 = and i32 %70, %1
  %122 = xor i32 %96, -1
  %123 = and i32 %8, %122
  %124 = xor i32 %92, %2
  %125 = shl i32 %58, 1
  %126 = xor i32 %122, %2
  %127 = or i32 %47, %34
  %128 = xor i32 %44, -1
  %129 = or i32 %128, %0
  %130 = or i32 %58, %10
  %131 = shl i32 %130, 2
  %132 = and i32 %75, %8
  %133 = and i32 %128, %0
  %134 = or i32 %31, %34
  %135 = or i32 %13, %56
  %136 = xor i32 %68, %0
  %137 = xor i32 %106, %0
  %138 = and i32 %106, %0
  %139 = and i32 %122, %2
  %140 = xor i32 %71, %1
  %141 = xor i32 %56, %2
  %142 = or i32 %41, %49
  %143 = xor i32 %70, %1
  %144 = or i32 %75, %2
  %145 = shl i32 %144, 1
  %146 = and i32 %66, %31
  %147 = xor i32 %37, %0
  %148 = xor i32 %27, %147
  %149 = add i32 %46, 1
  %150 = xor i32 %51, %88
  %151 = and i32 %68, %49
  %152 = or i32 %7, %8
  %153 = and i32 %75, %59
  %154 = or i32 %31, %1
  %155 = and i32 %31, %122
  %156 = and i32 %66, %68
  %157 = or i32 %13, %96
  %158 = or i32 %36, %87
  %159 = or i32 %7, %71
  %160 = or i32 %26, %49
  %161 = or i32 %43, %76
  %162 = and i32 %46, %76
  %163 = and i32 %75, %2
  %164 = and i32 %66, %8
  %165 = or i32 %56, %2
  %166 = or i32 %75, %31
  %167 = and i32 %55, %2
  %168 = or i32 %31, %76
  %169 = or i32 %37, %96
  %170 = and i32 %13, %75
  %171 = or i32 %37, %49
  %172 = xor i32 %171, -1
  %173 = or i32 %100, %172
  %174 = or i32 %58, %26
  %175 = and i32 %46, %1
  %176 = shl i32 %175, 1
  %177 = or i32 %71, %76
  %178 = xor i32 %10, %0
  %179 = xor i32 %67, %2
  %180 = or i32 %75, %71
  %181 = and i32 %31, %76
  %182 = xor i32 %47, %1
  %183 = xor i32 %98, %1
  %184 = and i32 %75, %98
  %185 = xor i32 %43, %28
  %186 = shl i32 %185, 1
  %187 = add i32 %96, 1
  %188 = xor i32 %9, %0
  %189 = or i32 %43, %56
  %190 = shl i32 %189, 1
  %191 = and i32 %70, %76
  %192 = xor i32 %96, %2
  %193 = xor i32 %58, %9
  %194 = xor i32 %59, %1
  %195 = xor i32 %29, 2147483647
  %196 = xor i32 %195, %27
  %197 = shl i32 %196, 1
  %198 = or i32 %7, %68
  %199 = and i32 %13, %76
  %200 = or i32 %26, %0
  %201 = and i32 %46, %75
  %202 = or i32 %36, %147
  %203 = shl i32 %202, 1
  %204 = and i32 %28, %0
  %205 = and i32 %37, %66
  %206 = or i32 %76, %2
  %207 = or i32 %28, %0
  %208 = and i32 %98, %34
  %209 = and i32 %26, %49
  %210 = xor i32 %108, -1
  %211 = xor i32 %209, %210
  %212 = and i32 %68, %122
  %213 = and i32 %37, %92
  %214 = or i32 %44, %96
  %215 = or i32 %43, %75
  %216 = and i32 %28, %49
  %217 = xor i32 %216, %111
  %218 = xor i32 %55, %2
  %219 = or i32 %13, %75
  %220 = or i32 %8, %67
  %221 = and i32 %98, %76
  %222 = and i32 %31, %92
  %223 = and i32 %31, %34
  %224 = add i32 %43, 1
  %225 = xor i32 %7, %2
  %226 = xor i32 %28, %7
  %227 = and i32 %13, %1
  %228 = and i32 %13, %66
  %229 = or i32 %41, %0
  %230 = and i32 %106, %49
  %231 = shl i32 %230, 1
  %232 = xor i32 %147, -1
  %233 = or i32 %27, %232
  %234 = or i32 %27, %216
  %235 = and i32 %31, %1
  %236 = or i32 %13, %67
  %237 = shl i32 %236, 1
  %238 = or i32 %68, %0
  %239 = and i32 %55, %31
  %240 = xor i32 %100, %171
  %241 = xor i32 %96, %106
  %242 = shl i32 %241, 1
  %243 = xor i32 %58, %106
  %244 = or i32 %96, %8
  %245 = or i32 %7, %47
  %246 = or i32 %10, %49
  %247 = or i32 %13, %76
  %248 = and i32 %76, %2
  %249 = or i32 %75, %8
  %250 = shl i32 %249, 1
  %251 = or i32 %96, %68
  %252 = or i32 %106, %0
  %253 = and i32 %66, %2
  %254 = or i32 %96, %2
  %255 = and i32 %37, %55
  %256 = xor i32 %44, %0
  %257 = shl i32 %256, 1
  %258 = and i32 %37, %122
  %259 = or i32 %13, %34
  %260 = or i32 %37, %56
  %261 = xor i32 %43, %128
  %262 = shl i32 %261, 1
  %263 = or i32 %43, %67
  %264 = and i32 %8, %92
  %265 = shl i32 %264, 1
  %266 = or i32 %31, %56
  %267 = shl i32 %266, 1
  %268 = or i32 %128, %49
  %269 = and i32 %75, %31
  %270 = xor i32 %66, %2
  %271 = and i32 %68, %92
  %272 = and i32 %13, %34
  %273 = shl i32 %272, 1
  %274 = shl i32 %7, 1
  %275 = and i32 %59, %34
  %276 = and i32 %9, %0
  %277 = and i32 %13, %55
  %278 = or i32 %209, %204
  %279 = and i32 %41, %49
  %280 = mul i32 %279, 19
  %281 = and i32 %44, %49
  %282 = and i32 %41, %0
  %283 = and i32 %44, %0
  %284 = mul i32 %283, 13
  %285 = and i32 %10, %49
  %286 = mul i32 %285, 9
  %287 = shl i32 %209, 1
  %288 = add i32 %28, %70
  %289 = add i32 %288, %124
  %290 = add i32 %289, %27
  %291 = add i32 %290, %275
  %292 = add i32 %291, %268
  %293 = add i32 %292, %251
  %294 = add i32 %293, %147
  %295 = add i32 %294, %180
  %296 = add i32 %295, %154
  %297 = add i32 %296, %117
  %298 = add i32 %297, %116
  %299 = add i32 %298, %84
  %300 = add i32 %299, %65
  %301 = add i32 %300, %64
  %302 = add i32 %301, %45
  %303 = add i32 %302, %148
  %304 = add i32 %303, %158
  %305 = add i32 %304, %22
  %306 = sub i32 %38, %244
  %307 = add i32 %306, %281
  %308 = add i32 %307, %205
  %309 = sub i32 %308, %181
  %310 = add i32 %309, %161
  %311 = mul i32 %310, 3
  %312 = add i32 %225, %253
  %313 = sub i32 %10, %312
  %314 = add i32 %313, %24
  %315 = mul i32 %314, 5
  %316 = sub i32 %305, %16
  %317 = shl i32 %316, 1
  %318 = shl i32 %2, 2
  %319 = add i32 %318, -4
  %320 = sub i32 2, %0
  %321 = add i32 %320, %49
  %322 = add i32 %321, %34
  %323 = add i32 %322, %57
  %324 = add i32 %323, %93
  %325 = add i32 %324, %96
  %326 = add i32 %325, %187
  %327 = add i32 %326, %41
  %328 = add i32 %327, %77
  %329 = add i32 %328, %43
  %330 = add i32 %329, %79
  %331 = sub i32 %330, %82
  %332 = sub i32 %331, %109
  %333 = add i32 %332, %110
  %334 = add i32 %333, %115
  %335 = add i32 %334, %123
  %336 = sub i32 %335, %126
  %337 = sub i32 %336, %132
  %338 = sub i32 %337, %139
  %339 = sub i32 %338, %141
  %340 = add i32 %339, %149
  %341 = add i32 %340, %152
  %342 = sub i32 %341, %163
  %343 = add i32 %342, %164
  %344 = sub i32 %343, %165
  %345 = sub i32 %344, %167
  %346 = sub i32 %345, %46
  %347 = sub i32 %346, %179
  %348 = sub i32 %347, %192
  %349 = add i32 %348, %206
  %350 = add i32 %349, %218
  %351 = add i32 %350, %220
  %352 = add i32 %351, %224
  %353 = add i32 %352, %37
  %354 = add i32 %353, %248
  %355 = add i32 %354, %254
  %356 = add i32 %355, %270
  %357 = add i32 %356, %9
  %358 = sub i32 %357, %274
  %359 = sub i32 %358, %4
  %360 = sub i32 %359, %32
  %361 = sub i32 %360, %33
  %362 = add i32 %361, %48
  %363 = sub i32 %362, %53
  %364 = add i32 %363, %54
  %365 = add i32 %364, %60
  %366 = sub i32 %365, %63
  %367 = add i32 %366, %61
  %368 = add i32 %367, %69
  %369 = sub i32 %368, %72
  %370 = add i32 %369, %78
  %371 = sub i32 %370, %80
  %372 = add i32 %371, %81
  %373 = add i32 %372, %83
  %374 = add i32 %373, %85
  %375 = sub i32 %374, %86
  %376 = sub i32 %375, %94
  %377 = add i32 %376, %95
  %378 = sub i32 %377, %97
  %379 = add i32 %378, %99
  %380 = add i32 %379, %103
  %381 = add i32 %380, %107
  %382 = sub i32 %381, %108
  %383 = add i32 %382, %118
  %384 = sub i32 %383, %119
  %385 = sub i32 %384, %120
  %386 = add i32 %385, %121
  %387 = sub i32 %386, %125
  %388 = add i32 %387, %127
  %389 = sub i32 %388, %129
  %390 = add i32 %389, %133
  %391 = sub i32 %390, %134
  %392 = sub i32 %391, %135
  %393 = sub i32 %392, %136
  %394 = sub i32 %393, %137
  %395 = sub i32 %394, %138
  %396 = sub i32 %395, %140
  %397 = sub i32 %396, %142
  %398 = add i32 %397, %143
  %399 = sub i32 %398, %145
  %400 = sub i32 %399, %146
  %401 = add i32 %400, %151
  %402 = add i32 %401, %153
  %403 = add i32 %402, %155
  %404 = add i32 %403, %156
  %405 = sub i32 %404, %157
  %406 = sub i32 %405, %159
  %407 = add i32 %406, %160
  %408 = sub i32 %407, %162
  %409 = sub i32 %408, %166
  %410 = sub i32 %409, %168
  %411 = add i32 %410, %169
  %412 = add i32 %411, %170
  %413 = add i32 %412, %174
  %414 = add i32 %413, %177
  %415 = sub i32 %414, %29
  %416 = sub i32 %415, %178
  %417 = sub i32 %416, %182
  %418 = sub i32 %417, %183
  %419 = add i32 %418, %184
  %420 = sub i32 %419, %188
  %421 = sub i32 %420, %191
  %422 = sub i32 %421, %193
  %423 = sub i32 %422, %194
  %424 = add i32 %423, %198
  %425 = sub i32 %424, %199
  %426 = add i32 %425, %200
  %427 = add i32 %426, %201
  %428 = add i32 %427, %204
  %429 = add i32 %428, %207
  %430 = sub i32 %429, %208
  %431 = sub i32 %430, %212
  %432 = add i32 %431, %213
  %433 = add i32 %432, %214
  %434 = sub i32 %433, %215
  %435 = add i32 %434, %219
  %436 = sub i32 %435, %221
  %437 = sub i32 %436, %222
  %438 = add i32 %437, %223
  %439 = add i32 %438, %226
  %440 = sub i32 %439, %227
  %441 = add i32 %440, %228
  %442 = sub i32 %441, %229
  %443 = sub i32 %442, %235
  %444 = sub i32 %443, %238
  %445 = add i32 %444, %239
  %446 = sub i32 %445, %243
  %447 = add i32 %446, %245
  %448 = sub i32 %447, %246
  %449 = sub i32 %448, %247
  %450 = sub i32 %449, %250
  %451 = add i32 %450, %252
  %452 = sub i32 %451, %255
  %453 = sub i32 %452, %258
  %454 = sub i32 %453, %216
  %455 = sub i32 %454, %259
  %456 = add i32 %455, %260
  %457 = sub i32 %456, %263
  %458 = sub i32 %457, %265
  %459 = add i32 %458, %269
  %460 = sub i32 %459, %271
  %461 = sub i32 %460, %276
  %462 = add i32 %461, %277
  %463 = add i32 %462, %282
  %464 = add i32 %463, %319
  %465 = add i32 %464, %18
  %466 = add i32 %465, %21
  %467 = sub i32 %466, %20
  %468 = sub i32 %467, %30
  %469 = add i32 %468, %40
  %470 = add i32 %469, %42
  %471 = sub i32 %470, %52
  %472 = sub i32 %471, %62
  %473 = sub i32 %472, %74
  %474 = add i32 %473, %89
  %475 = sub i32 %474, %91
  %476 = add i32 %475, %102
  %477 = sub i32 %476, %105
  %478 = sub i32 %477, %112
  %479 = sub i32 %478, %114
  %480 = sub i32 %479, %131
  %481 = sub i32 %480, %150
  %482 = sub i32 %481, %173
  %483 = sub i32 %482, %176
  %484 = sub i32 %483, %186
  %485 = sub i32 %484, %190
  %486 = add i32 %485, %211
  %487 = sub i32 %486, %217
  %488 = sub i32 %487, %231
  %489 = sub i32 %488, %233
  %490 = add i32 %489, %234
  %491 = sub i32 %490, %237
  %492 = add i32 %491, %240
  %493 = sub i32 %492, %242
  %494 = sub i32 %493, %257
  %495 = sub i32 %494, %262
  %496 = sub i32 %495, %267
  %497 = sub i32 %496, %273
  %498 = add i32 %497, %278
  %499 = add i32 %498, %280
  %500 = add i32 %499, %284
  %501 = add i32 %500, %286
  %502 = sub i32 %501, %287
  %503 = sub i32 %502, %25
  %504 = sub i32 %503, %203
  %505 = sub i32 %504, %197
  %506 = add i32 %505, %315
  %507 = add i32 %506, %311
  %508 = add i32 %507, %317
  %509 = icmp eq i32 %15, %508
  %510 = select i1 %509, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %511 = tail call i32 @puts(i8* nonnull dereferenceable(1) %510)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
