; ModuleID = '../.././c_source_file/1460_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1460_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = add i32 %4, 1
  %8 = xor i32 %4, %3
  %9 = shl i32 %8, 1
  %10 = xor i32 %2, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %11, %1
  %13 = or i32 %2, %0
  %14 = xor i32 %1, %0
  %15 = and i32 %13, %14
  %16 = sub i32 %7, %12
  %17 = sub i32 %16, %15
  %18 = sub i32 %17, %9
  %19 = or i32 %6, %3
  %20 = or i32 %4, %3
  %21 = and i32 %6, %3
  %22 = shl i32 %21, 1
  %23 = xor i32 %22, -2
  %24 = and i32 %4, %3
  %25 = shl i32 %20, 2
  %26 = xor i32 %25, -4
  %27 = shl i32 %19, 1
  %28 = xor i32 %27, -2
  %29 = or i32 %1, %0
  %30 = xor i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = and i32 %29, %31
  %33 = and i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = shl i32 %34, 1
  %36 = xor i32 %1, -1
  %37 = xor i32 %2, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %36
  %40 = and i32 %36, %2
  %41 = and i32 %40, %0
  %42 = or i32 %36, %2
  %43 = xor i32 %42, %0
  %44 = or i32 %41, %43
  %45 = or i32 %2, %1
  %46 = xor i32 %45, -1
  %47 = and i32 %36, %0
  %48 = xor i32 %47, -1
  %49 = and i32 %37, %48
  %50 = xor i32 %0, -1
  %51 = and i32 %10, %1
  %52 = xor i32 %51, -1
  %53 = and i32 %52, %50
  %54 = or i32 %36, %0
  %55 = xor i32 %54, -1
  %56 = or i32 %37, %55
  %57 = shl i32 %56, 1
  %58 = or i32 %10, %1
  %59 = xor i32 %58, -1
  %60 = and i32 %33, %0
  %61 = xor i32 %45, %0
  %62 = xor i32 %61, 2147483647
  %63 = xor i32 %62, %60
  %64 = and i32 %1, %0
  %65 = xor i32 %13, %64
  %66 = xor i32 %64, -1
  %67 = and i32 %38, %66
  %68 = and i32 %13, %36
  %69 = shl i32 %68, 1
  %70 = or i32 %37, %64
  %71 = xor i32 %66, %2
  %72 = and i32 %10, %0
  %73 = xor i32 %72, %58
  %74 = add i32 %30, 1
  %75 = xor i32 %29, -1
  %76 = xor i32 %75, %2
  %77 = and i32 %37, %29
  %78 = or i32 %59, %0
  %79 = xor i32 %11, -1
  %80 = or i32 %79, %36
  %81 = and i32 %33, %50
  %82 = and i32 %45, %0
  %83 = or i32 %81, %82
  %84 = xor i32 %47, %52
  %85 = and i32 %42, %50
  %86 = xor i32 %41, 2147483647
  %87 = xor i32 %86, %85
  %88 = xor i32 %31, %0
  %89 = xor i32 %14, -1
  %90 = or i32 %10, %89
  %91 = add i32 %2, 1
  %92 = xor i32 %30, %0
  %93 = xor i32 %60, %92
  %94 = and i32 %45, %50
  %95 = xor i32 %60, -1
  %96 = xor i32 %94, %95
  %97 = and i32 %54, %38
  %98 = and i32 %40, %50
  %99 = or i32 %30, %50
  %100 = xor i32 %98, %99
  %101 = xor i32 %72, -1
  %102 = xor i32 %101, %1
  %103 = shl i32 %102, 1
  %104 = and i32 %30, %29
  %105 = and i32 %30, %54
  %106 = and i32 %2, %0
  %107 = xor i32 %106, -1
  %108 = and i32 %107, %89
  %109 = and i32 %14, %101
  %110 = and i32 %107, %36
  %111 = shl i32 %110, 2
  %112 = or i32 %31, %75
  %113 = and i32 %13, %1
  %114 = or i32 %58, %50
  %115 = shl i32 %114, 1
  %116 = and i32 %89, %2
  %117 = xor i32 %106, %54
  %118 = or i32 %30, %0
  %119 = xor i32 %118, -1
  %120 = or i32 %41, %119
  %121 = or i32 %106, %36
  %122 = shl i32 %121, 1
  %123 = or i32 %64, %2
  %124 = and i32 %38, %48
  %125 = or i32 %106, %75
  %126 = or i32 %34, %0
  %127 = xor i32 %86, %43
  %128 = or i32 %45, %50
  %129 = and i32 %58, %50
  %130 = add i32 %47, 1
  %131 = or i32 %47, %31
  %132 = xor i32 %54, %2
  %133 = or i32 %37, %75
  %134 = or i32 %30, %55
  %135 = add i32 %106, 1
  %136 = and i32 %34, %0
  %137 = shl i32 %136, 1
  %138 = or i32 %52, %50
  %139 = or i32 %79, %89
  %140 = or i32 %106, %46
  %141 = xor i32 %45, %64
  %142 = or i32 %64, %46
  %143 = shl i32 %142, 1
  %144 = and i32 %30, %0
  %145 = and i32 %10, %48
  %146 = or i32 %31, %0
  %147 = and i32 %30, %66
  %148 = xor i32 %92, -1
  %149 = xor i32 %41, %148
  %150 = and i32 %30, %50
  %151 = or i32 %60, %150
  %152 = or i32 %14, %79
  %153 = or i32 %72, %33
  %154 = xor i32 %79, %1
  %155 = xor i32 %13, -1
  %156 = or i32 %155, %36
  %157 = xor i32 %46, %0
  %158 = shl i32 %157, 1
  %159 = or i32 %60, %94
  %160 = or i32 %64, %38
  %161 = xor i32 %58, %64
  %162 = and i32 %38, %89
  %163 = and i32 %11, %14
  %164 = and i32 %10, %89
  %165 = or i32 %72, %36
  %166 = or i32 %52, %0
  %167 = or i32 %14, %38
  %168 = xor i32 %82, -1
  %169 = xor i32 %81, %168
  %170 = or i32 %37, %36
  %171 = shl i32 %170, 1
  %172 = and i32 %34, %50
  %173 = or i32 %14, %155
  %174 = shl i32 %173, 1
  %175 = or i32 %75, %2
  %176 = or i32 %38, %89
  %177 = and i32 %31, %50
  %178 = and i32 %37, %36
  %179 = shl i32 %178, 1
  %180 = or i32 %64, %155
  %181 = or i32 %33, %50
  %182 = shl i32 %181, 2
  %183 = xor i32 %29, %2
  %184 = and i32 %37, %89
  %185 = xor i32 %33, %0
  %186 = and i32 %29, %2
  %187 = or i32 %155, %89
  %188 = and i32 %31, %48
  %189 = and i32 %31, %0
  %190 = xor i32 %106, %29
  %191 = xor i32 %106, %45
  %192 = or i32 %106, %14
  %193 = shl i32 %192, 1
  %194 = or i32 %60, %61
  %195 = or i32 %106, %1
  %196 = or i32 %41, %85
  %197 = or i32 %37, %47
  %198 = and i32 %14, %2
  %199 = shl i32 %198, 1
  %200 = or i32 %72, %59
  %201 = or i32 %64, %59
  %202 = and i32 %31, %66
  %203 = or i32 %38, %1
  %204 = and i32 %30, %48
  %205 = and i32 %11, %89
  %206 = or i32 %37, %1
  %207 = and i32 %42, %0
  %208 = xor i32 %207, 2147483647
  %209 = xor i32 %208, %98
  %210 = shl i32 %209, 1
  %211 = or i32 %38, %55
  %212 = or i32 %60, %148
  %213 = xor i32 %47, %2
  %214 = and i32 %29, %38
  %215 = or i32 %30, %75
  %216 = xor i32 %106, %52
  %217 = and i32 %107, %1
  %218 = or i32 %47, %2
  %219 = shl i32 %218, 1
  %220 = or i32 %46, %0
  %221 = shl i32 %220, 1
  %222 = and i32 %37, %66
  %223 = shl i32 %222, 1
  %224 = or i32 %64, %31
  %225 = shl i32 %224, 1
  %226 = xor i32 %150, %95
  %227 = and i32 %11, %36
  %228 = and i32 %46, %50
  %229 = and i32 %51, %50
  %230 = and i32 %46, %0
  %231 = and i32 %51, %0
  %232 = mul i32 %231, -7
  %233 = and i32 %59, %50
  %234 = and i32 %59, %0
  %235 = sub i32 %228, %229
  %236 = sub i32 %235, %215
  %237 = add i32 %236, %153
  %238 = sub i32 %237, %93
  %239 = mul i32 %238, 3
  %240 = sub i32 %233, %81
  %241 = add i32 %240, %133
  %242 = mul i32 %241, 5
  %243 = add i32 %24, %234
  %244 = shl i32 %243, 2
  %245 = add i32 %145, -1
  %246 = add i32 %245, %116
  %247 = add i32 %246, %3
  %248 = add i32 %247, %230
  %249 = add i32 %248, %204
  %250 = add i32 %249, %99
  %251 = add i32 %250, %185
  %252 = add i32 %251, %184
  %253 = add i32 %252, %152
  %254 = add i32 %253, %128
  %255 = add i32 %254, %126
  %256 = add i32 %255, %117
  %257 = add i32 %256, %32
  %258 = add i32 %257, %100
  %259 = add i32 %258, %87
  %260 = add i32 %259, %127
  %261 = add i32 %260, %63
  %262 = shl i32 %261, 1
  %263 = add i32 %0, %1
  %264 = add i32 %263, 3
  %265 = add i32 %264, %29
  %266 = sub i32 %265, %14
  %267 = add i32 %266, %91
  %268 = add i32 %267, %130
  %269 = add i32 %268, %89
  %270 = add i32 %269, %66
  %271 = sub i32 %270, %13
  %272 = add i32 %271, %46
  %273 = add i32 %272, %71
  %274 = add i32 %273, %74
  %275 = add i32 %274, %76
  %276 = add i32 %275, %90
  %277 = add i32 %276, %72
  %278 = add i32 %277, %123
  %279 = sub i32 %278, %132
  %280 = add i32 %279, %135
  %281 = sub i32 %280, %11
  %282 = sub i32 %281, %51
  %283 = add i32 %282, %164
  %284 = sub i32 %283, %175
  %285 = add i32 %284, %183
  %286 = add i32 %285, %186
  %287 = add i32 %286, %213
  %288 = add i32 %287, %4
  %289 = sub i32 %288, %35
  %290 = sub i32 %289, %39
  %291 = add i32 %290, %49
  %292 = sub i32 %291, %53
  %293 = add i32 %292, %65
  %294 = add i32 %293, %67
  %295 = add i32 %294, %70
  %296 = sub i32 %295, %73
  %297 = sub i32 %296, %77
  %298 = add i32 %297, %78
  %299 = add i32 %298, %80
  %300 = add i32 %299, %84
  %301 = add i32 %300, %88
  %302 = add i32 %301, %97
  %303 = sub i32 %302, %104
  %304 = sub i32 %303, %105
  %305 = sub i32 %304, %108
  %306 = add i32 %305, %109
  %307 = add i32 %306, %112
  %308 = sub i32 %307, %113
  %309 = sub i32 %308, %124
  %310 = sub i32 %309, %61
  %311 = sub i32 %310, %125
  %312 = add i32 %311, %129
  %313 = sub i32 %312, %131
  %314 = sub i32 %313, %134
  %315 = add i32 %314, %138
  %316 = add i32 %315, %139
  %317 = sub i32 %316, %140
  %318 = add i32 %317, %141
  %319 = sub i32 %318, %144
  %320 = sub i32 %319, %146
  %321 = add i32 %320, %147
  %322 = sub i32 %321, %154
  %323 = add i32 %322, %156
  %324 = add i32 %323, %160
  %325 = add i32 %324, %161
  %326 = add i32 %325, %162
  %327 = add i32 %326, %163
  %328 = sub i32 %327, %165
  %329 = sub i32 %328, %166
  %330 = add i32 %329, %167
  %331 = add i32 %330, %172
  %332 = add i32 %331, %176
  %333 = add i32 %332, %177
  %334 = add i32 %333, %180
  %335 = sub i32 %334, %187
  %336 = add i32 %335, %188
  %337 = sub i32 %336, %189
  %338 = add i32 %337, %190
  %339 = sub i32 %338, %191
  %340 = sub i32 %339, %195
  %341 = add i32 %340, %118
  %342 = add i32 %341, %197
  %343 = sub i32 %342, %199
  %344 = sub i32 %343, %200
  %345 = sub i32 %344, %201
  %346 = sub i32 %345, %202
  %347 = sub i32 %346, %203
  %348 = add i32 %347, %205
  %349 = add i32 %348, %206
  %350 = sub i32 %349, %211
  %351 = sub i32 %350, %214
  %352 = sub i32 %351, %216
  %353 = add i32 %352, %217
  %354 = sub i32 %353, %219
  %355 = add i32 %354, %92
  %356 = add i32 %355, %227
  %357 = sub i32 %356, %19
  %358 = sub i32 %357, %20
  %359 = sub i32 %358, %24
  %360 = sub i32 %359, %21
  %361 = add i32 %360, %44
  %362 = sub i32 %361, %57
  %363 = sub i32 %362, %69
  %364 = sub i32 %363, %83
  %365 = add i32 %364, %96
  %366 = sub i32 %365, %103
  %367 = sub i32 %366, %111
  %368 = sub i32 %367, %115
  %369 = sub i32 %368, %120
  %370 = sub i32 %369, %122
  %371 = sub i32 %370, %137
  %372 = sub i32 %371, %143
  %373 = sub i32 %372, %149
  %374 = sub i32 %373, %151
  %375 = sub i32 %374, %158
  %376 = sub i32 %375, %159
  %377 = add i32 %376, %169
  %378 = sub i32 %377, %171
  %379 = sub i32 %378, %174
  %380 = sub i32 %379, %179
  %381 = sub i32 %380, %182
  %382 = sub i32 %381, %193
  %383 = add i32 %382, %194
  %384 = add i32 %383, %196
  %385 = add i32 %384, %212
  %386 = sub i32 %385, %221
  %387 = sub i32 %386, %223
  %388 = sub i32 %387, %225
  %389 = add i32 %388, %226
  %390 = add i32 %389, %232
  %391 = sub i32 %390, %23
  %392 = add i32 %391, %26
  %393 = add i32 %392, %28
  %394 = sub i32 %393, %210
  %395 = add i32 %394, %242
  %396 = add i32 %395, %244
  %397 = add i32 %396, %239
  %398 = add i32 %397, %262
  %399 = icmp eq i32 %18, %398
  %400 = select i1 %399, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %401 = tail call i32 @puts(i8* nonnull dereferenceable(1) %400)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
