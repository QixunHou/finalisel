digraph "DFG for'crackme' function" {
	Node0x19775d0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1977c80[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1977d40[shape=record, label="  %5 = mul i32 %4, -4"];
	Node0x1977db0[shape=record, label="  %6 = add i32 %5, %3"];
	Node0x1977e20[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1977e90[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x1977f30[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1977fd0[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x1978040[shape=record, label="  %11 = or i32 %7, %0"];
	Node0x19780b0[shape=record, label="  %12 = and i32 %7, %0"];
	Node0x1978120[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x1978190[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x1978200[shape=record, label="  %15 = or i32 %1, %0"];
	Node0x1978270[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x1978310[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0x1978380[shape=record, label="  %18 = shl i32 %11, 1"];
	Node0x19783f0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x1978490[shape=record, label="  %20 = shl i32 %12, 2"];
	Node0x1978500[shape=record, label="  %21 = shl i32 %8, 2"];
	Node0x1978570[shape=record, label="  %22 = add i32 %11, %1"];
	Node0x19785e0[shape=record, label="  %23 = sub i32 %17, %22"];
	Node0x1978650[shape=record, label="  %24 = add i32 %23, %20"];
	Node0x19786c0[shape=record, label="  %25 = sub i32 %24, %21"];
	Node0x1978730[shape=record, label="  %26 = sub i32 %25, %10"];
	Node0x19787a0[shape=record, label="  %27 = add i32 %26, %14"];
	Node0x1978810[shape=record, label="  %28 = add i32 %27, %19"];
	Node0x1978880[shape=record, label="  %29 = icmp eq i32 %6, %28"];
	Node0x1918268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1978d20[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0x1978d70[shape=record, label="  ret void"];
	Node0x19775d0 -> Node0x1977c80;
	Node0x1977c80 -> Node0x1977d40;
	Node0x1977d40 -> Node0x1977db0;
	Node0x1977db0 -> Node0x1977e20;
	Node0x1977e20 -> Node0x1977e90;
	Node0x1977e90 -> Node0x1977f30;
	Node0x1977f30 -> Node0x1977fd0;
	Node0x1977fd0 -> Node0x1978040;
	Node0x1978040 -> Node0x19780b0;
	Node0x19780b0 -> Node0x1978120;
	Node0x1978120 -> Node0x1978190;
	Node0x1978190 -> Node0x1978200;
	Node0x1978200 -> Node0x1978270;
	Node0x1978270 -> Node0x1978310;
	Node0x1978310 -> Node0x1978380;
	Node0x1978380 -> Node0x19783f0;
	Node0x19783f0 -> Node0x1978490;
	Node0x1978490 -> Node0x1978500;
	Node0x1978500 -> Node0x1978570;
	Node0x1978570 -> Node0x19785e0;
	Node0x19785e0 -> Node0x1978650;
	Node0x1978650 -> Node0x19786c0;
	Node0x19786c0 -> Node0x1978730;
	Node0x1978730 -> Node0x19787a0;
	Node0x19787a0 -> Node0x1978810;
	Node0x1978810 -> Node0x1978880;
	Node0x1978880 -> Node0x1918268;
	Node0x1918268 -> Node0x1978d20;
	Node0x1978d20 -> Node0x1978d70;
edge [color=red]
	Node0x19775d0 -> Node0x1977c80;
	Node0x1977c80 -> Node0x1977d40;
	Node0x1977d40 -> Node0x1977db0;
	Node0x19775d0 -> Node0x1977db0;
	Node0x1977e90 -> Node0x1977f30;
	Node0x1977f30 -> Node0x1977fd0;
	Node0x1977e20 -> Node0x1978040;
	Node0x1977e20 -> Node0x19780b0;
	Node0x19780b0 -> Node0x1978120;
	Node0x1978120 -> Node0x1978190;
	Node0x1978200 -> Node0x1978270;
	Node0x1978270 -> Node0x1978310;
	Node0x1978040 -> Node0x1978380;
	Node0x1978380 -> Node0x19783f0;
	Node0x19780b0 -> Node0x1978490;
	Node0x1977e90 -> Node0x1978500;
	Node0x1978040 -> Node0x1978570;
	Node0x1978310 -> Node0x19785e0;
	Node0x1978570 -> Node0x19785e0;
	Node0x19785e0 -> Node0x1978650;
	Node0x1978490 -> Node0x1978650;
	Node0x1978650 -> Node0x19786c0;
	Node0x1978500 -> Node0x19786c0;
	Node0x19786c0 -> Node0x1978730;
	Node0x1977fd0 -> Node0x1978730;
	Node0x1978730 -> Node0x19787a0;
	Node0x1978190 -> Node0x19787a0;
	Node0x19787a0 -> Node0x1978810;
	Node0x19783f0 -> Node0x1978810;
	Node0x1977db0 -> Node0x1978880;
	Node0x1978810 -> Node0x1978880;
	Node0x1978880 -> Node0x1918268;
	Node0x1918268 -> Node0x1978d20;
}
