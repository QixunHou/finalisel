digraph "DFG for'crackme' function" {
	Node0x61ad70[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x61ade0[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x61ae80[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x61af20[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x61af90[shape=record, label="  %9 = or i32 %2, %1"];
	Node0x61b000[shape=record, label="  %10 = xor i32 %0, -1"];
	Node0x61b070[shape=record, label="  %11 = or i32 %10, %3"];
	Node0x61b110[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x61b180[shape=record, label="  %13 = and i32 %10, %3"];
	Node0x61b1f0[shape=record, label="  %14 = sub i32 1, %9"];
	Node0x61b260[shape=record, label="  %15 = add i32 %14, %13"];
	Node0x61b2d0[shape=record, label="  %16 = add i32 %15, %8"];
	Node0x61b340[shape=record, label="  %17 = add i32 %16, %12"];
	Node0x61b3b0[shape=record, label="  %18 = xor i32 %2, %1"];
	Node0x61b420[shape=record, label="  %19 = or i32 %5, %1"];
	Node0x61b490[shape=record, label="  %20 = and i32 %2, %1"];
	Node0x61b500[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x61b570[shape=record, label="  %22 = xor i32 %21, -2"];
	Node0x61b610[shape=record, label="  %23 = shl i32 %1, 2"];
	Node0x61b6b0[shape=record, label="  %24 = xor i32 %23, -4"];
	Node0x61b720[shape=record, label="  %25 = shl i32 %9, 3"];
	Node0x61b7c0[shape=record, label="  %26 = xor i32 %25, -8"];
	Node0x61b830[shape=record, label="  %27 = add i32 %19, 1"];
	Node0x61b8a0[shape=record, label="  %28 = shl i32 %20, 3"];
	Node0x61b910[shape=record, label="  %29 = or i32 %3, %0"];
	Node0x61b980[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x61b9f0[shape=record, label="  %31 = xor i32 %30, -2"];
	Node0x61ba60[shape=record, label="  %32 = shl i32 %11, 1"];
	Node0x61bce0[shape=record, label="  %33 = xor i32 %32, -2"];
	Node0x61bd50[shape=record, label="  %34 = sub i32 %6, %19"];
	Node0x61bdf0[shape=record, label="  %35 = mul i32 %34, 5"];
	Node0x61be60[shape=record, label="  %36 = add i32 %27, %18"];
	Node0x61bed0[shape=record, label="  %37 = mul i32 %36, 3"];
	Node0x61bf40[shape=record, label="  %38 = shl i32 %3, 1"];
	Node0x61bfb0[shape=record, label="  %39 = sub i32 3, %0"];
	Node0x61c020[shape=record, label="  %40 = add i32 %39, %2"];
	Node0x61c090[shape=record, label="  %41 = add i32 %40, %18"];
	Node0x61c100[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x61c170[shape=record, label="  %43 = sub i32 %42, %3"];
	Node0x61c1e0[shape=record, label="  %44 = add i32 %43, %28"];
	Node0x61c250[shape=record, label="  %45 = sub i32 %44, %22"];
	Node0x61c2c0[shape=record, label="  %46 = add i32 %45, %26"];
	Node0x61c330[shape=record, label="  %47 = add i32 %46, %30"];
	Node0x61c3a0[shape=record, label="  %48 = add i32 %47, %35"];
	Node0x61c410[shape=record, label="  %49 = add i32 %48, %37"];
	Node0x61c480[shape=record, label="  %50 = add i32 %49, %31"];
	Node0x61c4f0[shape=record, label="  %51 = sub i32 %50, %33"];
	Node0x61c560[shape=record, label="  %52 = add i32 %51, %38"];
	Node0x61c5d0[shape=record, label="  %53 = icmp eq i32 %17, %52"];
	Node0x5bb268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x61ca70[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x61cac0[shape=record, label="  ret void"];
	Node0x61ad70 -> Node0x61ade0;
	Node0x61ade0 -> Node0x61ae80;
	Node0x61ae80 -> Node0x61af20;
	Node0x61af20 -> Node0x61af90;
	Node0x61af90 -> Node0x61b000;
	Node0x61b000 -> Node0x61b070;
	Node0x61b070 -> Node0x61b110;
	Node0x61b110 -> Node0x61b180;
	Node0x61b180 -> Node0x61b1f0;
	Node0x61b1f0 -> Node0x61b260;
	Node0x61b260 -> Node0x61b2d0;
	Node0x61b2d0 -> Node0x61b340;
	Node0x61b340 -> Node0x61b3b0;
	Node0x61b3b0 -> Node0x61b420;
	Node0x61b420 -> Node0x61b490;
	Node0x61b490 -> Node0x61b500;
	Node0x61b500 -> Node0x61b570;
	Node0x61b570 -> Node0x61b610;
	Node0x61b610 -> Node0x61b6b0;
	Node0x61b6b0 -> Node0x61b720;
	Node0x61b720 -> Node0x61b7c0;
	Node0x61b7c0 -> Node0x61b830;
	Node0x61b830 -> Node0x61b8a0;
	Node0x61b8a0 -> Node0x61b910;
	Node0x61b910 -> Node0x61b980;
	Node0x61b980 -> Node0x61b9f0;
	Node0x61b9f0 -> Node0x61ba60;
	Node0x61ba60 -> Node0x61bce0;
	Node0x61bce0 -> Node0x61bd50;
	Node0x61bd50 -> Node0x61bdf0;
	Node0x61bdf0 -> Node0x61be60;
	Node0x61be60 -> Node0x61bed0;
	Node0x61bed0 -> Node0x61bf40;
	Node0x61bf40 -> Node0x61bfb0;
	Node0x61bfb0 -> Node0x61c020;
	Node0x61c020 -> Node0x61c090;
	Node0x61c090 -> Node0x61c100;
	Node0x61c100 -> Node0x61c170;
	Node0x61c170 -> Node0x61c1e0;
	Node0x61c1e0 -> Node0x61c250;
	Node0x61c250 -> Node0x61c2c0;
	Node0x61c2c0 -> Node0x61c330;
	Node0x61c330 -> Node0x61c3a0;
	Node0x61c3a0 -> Node0x61c410;
	Node0x61c410 -> Node0x61c480;
	Node0x61c480 -> Node0x61c4f0;
	Node0x61c4f0 -> Node0x61c560;
	Node0x61c560 -> Node0x61c5d0;
	Node0x61c5d0 -> Node0x5bb268;
	Node0x5bb268 -> Node0x61ca70;
	Node0x61ca70 -> Node0x61cac0;
edge [color=red]
	Node0x61ad70 -> Node0x61ade0;
	Node0x61ade0 -> Node0x61ae80;
	Node0x61ae80 -> Node0x61af20;
	Node0x61b000 -> Node0x61b070;
	Node0x61b070 -> Node0x61b110;
	Node0x61b000 -> Node0x61b180;
	Node0x61af90 -> Node0x61b1f0;
	Node0x61b1f0 -> Node0x61b260;
	Node0x61b180 -> Node0x61b260;
	Node0x61b260 -> Node0x61b2d0;
	Node0x61af20 -> Node0x61b2d0;
	Node0x61b2d0 -> Node0x61b340;
	Node0x61b110 -> Node0x61b340;
	Node0x61ad70 -> Node0x61b420;
	Node0x61b490 -> Node0x61b500;
	Node0x61b500 -> Node0x61b570;
	Node0x61b610 -> Node0x61b6b0;
	Node0x61af90 -> Node0x61b720;
	Node0x61b720 -> Node0x61b7c0;
	Node0x61b420 -> Node0x61b830;
	Node0x61b490 -> Node0x61b8a0;
	Node0x61b910 -> Node0x61b980;
	Node0x61b980 -> Node0x61b9f0;
	Node0x61b070 -> Node0x61ba60;
	Node0x61ba60 -> Node0x61bce0;
	Node0x61ade0 -> Node0x61bd50;
	Node0x61b420 -> Node0x61bd50;
	Node0x61bd50 -> Node0x61bdf0;
	Node0x61b830 -> Node0x61be60;
	Node0x61b3b0 -> Node0x61be60;
	Node0x61be60 -> Node0x61bed0;
	Node0x61bfb0 -> Node0x61c020;
	Node0x61c020 -> Node0x61c090;
	Node0x61b3b0 -> Node0x61c090;
	Node0x61c090 -> Node0x61c100;
	Node0x61b6b0 -> Node0x61c100;
	Node0x61c100 -> Node0x61c170;
	Node0x61c170 -> Node0x61c1e0;
	Node0x61b8a0 -> Node0x61c1e0;
	Node0x61c1e0 -> Node0x61c250;
	Node0x61b570 -> Node0x61c250;
	Node0x61c250 -> Node0x61c2c0;
	Node0x61b7c0 -> Node0x61c2c0;
	Node0x61c2c0 -> Node0x61c330;
	Node0x61b980 -> Node0x61c330;
	Node0x61c330 -> Node0x61c3a0;
	Node0x61bdf0 -> Node0x61c3a0;
	Node0x61c3a0 -> Node0x61c410;
	Node0x61bed0 -> Node0x61c410;
	Node0x61c410 -> Node0x61c480;
	Node0x61b9f0 -> Node0x61c480;
	Node0x61c480 -> Node0x61c4f0;
	Node0x61bce0 -> Node0x61c4f0;
	Node0x61c4f0 -> Node0x61c560;
	Node0x61bf40 -> Node0x61c560;
	Node0x61b340 -> Node0x61c5d0;
	Node0x61c560 -> Node0x61c5d0;
	Node0x61c5d0 -> Node0x5bb268;
	Node0x5bb268 -> Node0x61ca70;
}
