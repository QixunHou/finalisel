digraph "DFG for'crackme' function" {
	Node0x1df9b20[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x1df9bc0[shape=record, label="  %4 = add i32 %0, 2"];
	Node0x1df9c80[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x1df9cf0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x1df9d60[shape=record, label="  %7 = and i32 %6, %0"];
	Node0x1df9dd0[shape=record, label="  %8 = xor i32 %3, %1"];
	Node0x1df9e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x1df9eb0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1df9f20[shape=record, label="  %11 = shl i32 %5, 2"];
	Node0x1df9f90[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0x1dfa000[shape=record, label="  %13 = and i32 %3, %1"];
	Node0x1dfa0a0[shape=record, label="  %14 = mul i32 %13, -5"];
	Node0x1dfa140[shape=record, label="  %15 = mul i32 %0, -3"];
	Node0x1dfa1b0[shape=record, label="  %16 = sub i32 %1, %0"];
	Node0x1dfa220[shape=record, label="  %17 = add i32 %16, %5"];
	Node0x1dfa290[shape=record, label="  %18 = add i32 %17, %7"];
	Node0x1dfa300[shape=record, label="  %19 = add i32 %18, %8"];
	Node0x1dfa370[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x1dfa3e0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x1dfa450[shape=record, label="  %22 = sub i32 %21, %12"];
	Node0x1dfa4c0[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x1dfa530[shape=record, label="  %24 = icmp eq i32 %4, %23"];
	Node0x1d9a268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1dfa9d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x1dfaa20[shape=record, label="  ret void"];
	Node0x1df9b20 -> Node0x1df9bc0;
	Node0x1df9bc0 -> Node0x1df9c80;
	Node0x1df9c80 -> Node0x1df9cf0;
	Node0x1df9cf0 -> Node0x1df9d60;
	Node0x1df9d60 -> Node0x1df9dd0;
	Node0x1df9dd0 -> Node0x1df9e40;
	Node0x1df9e40 -> Node0x1df9eb0;
	Node0x1df9eb0 -> Node0x1df9f20;
	Node0x1df9f20 -> Node0x1df9f90;
	Node0x1df9f90 -> Node0x1dfa000;
	Node0x1dfa000 -> Node0x1dfa0a0;
	Node0x1dfa0a0 -> Node0x1dfa140;
	Node0x1dfa140 -> Node0x1dfa1b0;
	Node0x1dfa1b0 -> Node0x1dfa220;
	Node0x1dfa220 -> Node0x1dfa290;
	Node0x1dfa290 -> Node0x1dfa300;
	Node0x1dfa300 -> Node0x1dfa370;
	Node0x1dfa370 -> Node0x1dfa3e0;
	Node0x1dfa3e0 -> Node0x1dfa450;
	Node0x1dfa450 -> Node0x1dfa4c0;
	Node0x1dfa4c0 -> Node0x1dfa530;
	Node0x1dfa530 -> Node0x1d9a268;
	Node0x1d9a268 -> Node0x1dfa9d0;
	Node0x1dfa9d0 -> Node0x1dfaa20;
edge [color=red]
	Node0x1df9cf0 -> Node0x1df9d60;
	Node0x1df9b20 -> Node0x1df9dd0;
	Node0x1df9e40 -> Node0x1df9eb0;
	Node0x1df9c80 -> Node0x1df9f20;
	Node0x1df9f20 -> Node0x1df9f90;
	Node0x1df9b20 -> Node0x1dfa000;
	Node0x1dfa000 -> Node0x1dfa0a0;
	Node0x1dfa1b0 -> Node0x1dfa220;
	Node0x1df9c80 -> Node0x1dfa220;
	Node0x1dfa220 -> Node0x1dfa290;
	Node0x1df9d60 -> Node0x1dfa290;
	Node0x1dfa290 -> Node0x1dfa300;
	Node0x1df9dd0 -> Node0x1dfa300;
	Node0x1dfa300 -> Node0x1dfa370;
	Node0x1df9eb0 -> Node0x1dfa370;
	Node0x1dfa370 -> Node0x1dfa3e0;
	Node0x1dfa0a0 -> Node0x1dfa3e0;
	Node0x1dfa3e0 -> Node0x1dfa450;
	Node0x1df9f90 -> Node0x1dfa450;
	Node0x1dfa450 -> Node0x1dfa4c0;
	Node0x1dfa140 -> Node0x1dfa4c0;
	Node0x1df9bc0 -> Node0x1dfa530;
	Node0x1dfa4c0 -> Node0x1dfa530;
	Node0x1dfa530 -> Node0x1d9a268;
	Node0x1d9a268 -> Node0x1dfa9d0;
}
