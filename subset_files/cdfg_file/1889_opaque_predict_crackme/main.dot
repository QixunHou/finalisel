digraph "DFG for'main' function" {
	Node0x1dfabe8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x1dfac98[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x1dfad28[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x1dfb188[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1dfb268[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x1dfb388[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1dfb5c0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x1dfb678[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x1dfc5e8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x1dfcc70[shape=record, label="  %8 = xor i32 %6, -1"];
	Node0x1dfcce0[shape=record, label="  %9 = add i32 %6, 2"];
	Node0x1dfcd50[shape=record, label="  %10 = or i32 %7, %6"];
	Node0x1dfcdc0[shape=record, label="  %11 = xor i32 %7, -1"];
	Node0x1dfce30[shape=record, label="  %12 = and i32 %6, %11"];
	Node0x1dfcea0[shape=record, label="  %13 = xor i32 %7, %8"];
	Node0x1dfcf10[shape=record, label="  %14 = and i32 %7, %6"];
	Node0x1dfcf80[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x1dfcff0[shape=record, label="  %16 = shl i32 %10, 2"];
	Node0x1dfd060[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0x1dfd0d0[shape=record, label="  %18 = and i32 %7, %8"];
	Node0x1dfd140[shape=record, label="  %19 = mul i32 %18, -5"];
	Node0x1dfd1b0[shape=record, label="  %20 = mul i32 %6, -3"];
	Node0x1dfd220[shape=record, label="  %21 = sub i32 %7, %6"];
	Node0x1dfd290[shape=record, label="  %22 = add i32 %21, %20"];
	Node0x1dfd300[shape=record, label="  %23 = add i32 %22, %10"];
	Node0x1dfd370[shape=record, label="  %24 = add i32 %23, %12"];
	Node0x1dfd3e0[shape=record, label="  %25 = add i32 %24, %13"];
	Node0x1dfd450[shape=record, label="  %26 = add i32 %25, %15"];
	Node0x1dfd4c0[shape=record, label="  %27 = add i32 %26, %19"];
	Node0x1dfd530[shape=record, label="  %28 = sub i32 %27, %17"];
	Node0x1dfd5a0[shape=record, label="  %29 = icmp eq i32 %9, %28"];
	Node0x1d9b9d8[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1dfd630[shape=record, label="  %31 = call i32 @puts(i8* nonnull dereferenceable(1) %30) #5"];
	Node0x1dfd888[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x1dfd9e8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x1dfdaa8[shape=record, label="  ret i32 0"];
	Node0x1dfabe8 -> Node0x1dfac98;
	Node0x1dfac98 -> Node0x1dfad28;
	Node0x1dfad28 -> Node0x1dfb188;
	Node0x1dfb188 -> Node0x1dfb268;
	Node0x1dfb268 -> Node0x1dfb388;
	Node0x1dfb388 -> Node0x1dfb5c0;
	Node0x1dfb5c0 -> Node0x1dfb678;
	Node0x1dfb678 -> Node0x1dfc5e8;
	Node0x1dfc5e8 -> Node0x1dfcc70;
	Node0x1dfcc70 -> Node0x1dfcce0;
	Node0x1dfcce0 -> Node0x1dfcd50;
	Node0x1dfcd50 -> Node0x1dfcdc0;
	Node0x1dfcdc0 -> Node0x1dfce30;
	Node0x1dfce30 -> Node0x1dfcea0;
	Node0x1dfcea0 -> Node0x1dfcf10;
	Node0x1dfcf10 -> Node0x1dfcf80;
	Node0x1dfcf80 -> Node0x1dfcff0;
	Node0x1dfcff0 -> Node0x1dfd060;
	Node0x1dfd060 -> Node0x1dfd0d0;
	Node0x1dfd0d0 -> Node0x1dfd140;
	Node0x1dfd140 -> Node0x1dfd1b0;
	Node0x1dfd1b0 -> Node0x1dfd220;
	Node0x1dfd220 -> Node0x1dfd290;
	Node0x1dfd290 -> Node0x1dfd300;
	Node0x1dfd300 -> Node0x1dfd370;
	Node0x1dfd370 -> Node0x1dfd3e0;
	Node0x1dfd3e0 -> Node0x1dfd450;
	Node0x1dfd450 -> Node0x1dfd4c0;
	Node0x1dfd4c0 -> Node0x1dfd530;
	Node0x1dfd530 -> Node0x1dfd5a0;
	Node0x1dfd5a0 -> Node0x1d9b9d8;
	Node0x1d9b9d8 -> Node0x1dfd630;
	Node0x1dfd630 -> Node0x1dfd888;
	Node0x1dfd888 -> Node0x1dfd9e8;
	Node0x1dfd9e8 -> Node0x1dfdaa8;
edge [color=red]
	Node0x1dfabe8 -> Node0x1dfad28;
	Node0x1dfad28 -> Node0x1dfb188;
	Node0x1dfac98 -> Node0x1dfb268;
	Node0x1dfb268 -> Node0x1dfb388;
	Node0x1dfabe8 -> Node0x1dfb5c0;
	Node0x1dfac98 -> Node0x1dfb5c0;
	Node0x1dfabe8 -> Node0x1dfb678;
	Node0x1dfac98 -> Node0x1dfc5e8;
	Node0x1dfb678 -> Node0x1dfcc70;
	Node0x1dfb678 -> Node0x1dfcce0;
	Node0x1dfc5e8 -> Node0x1dfcd50;
	Node0x1dfb678 -> Node0x1dfcd50;
	Node0x1dfc5e8 -> Node0x1dfcdc0;
	Node0x1dfb678 -> Node0x1dfce30;
	Node0x1dfcdc0 -> Node0x1dfce30;
	Node0x1dfc5e8 -> Node0x1dfcea0;
	Node0x1dfcc70 -> Node0x1dfcea0;
	Node0x1dfc5e8 -> Node0x1dfcf10;
	Node0x1dfb678 -> Node0x1dfcf10;
	Node0x1dfcf10 -> Node0x1dfcf80;
	Node0x1dfcd50 -> Node0x1dfcff0;
	Node0x1dfcff0 -> Node0x1dfd060;
	Node0x1dfc5e8 -> Node0x1dfd0d0;
	Node0x1dfcc70 -> Node0x1dfd0d0;
	Node0x1dfd0d0 -> Node0x1dfd140;
	Node0x1dfb678 -> Node0x1dfd1b0;
	Node0x1dfc5e8 -> Node0x1dfd220;
	Node0x1dfb678 -> Node0x1dfd220;
	Node0x1dfd220 -> Node0x1dfd290;
	Node0x1dfd1b0 -> Node0x1dfd290;
	Node0x1dfd290 -> Node0x1dfd300;
	Node0x1dfcd50 -> Node0x1dfd300;
	Node0x1dfd300 -> Node0x1dfd370;
	Node0x1dfce30 -> Node0x1dfd370;
	Node0x1dfd370 -> Node0x1dfd3e0;
	Node0x1dfcea0 -> Node0x1dfd3e0;
	Node0x1dfd3e0 -> Node0x1dfd450;
	Node0x1dfcf80 -> Node0x1dfd450;
	Node0x1dfd450 -> Node0x1dfd4c0;
	Node0x1dfd140 -> Node0x1dfd4c0;
	Node0x1dfd4c0 -> Node0x1dfd530;
	Node0x1dfd060 -> Node0x1dfd530;
	Node0x1dfcce0 -> Node0x1dfd5a0;
	Node0x1dfd530 -> Node0x1dfd5a0;
	Node0x1dfd5a0 -> Node0x1d9b9d8;
	Node0x1d9b9d8 -> Node0x1dfd630;
	Node0x1dfb268 -> Node0x1dfd888;
	Node0x1dfad28 -> Node0x1dfd9e8;
}
