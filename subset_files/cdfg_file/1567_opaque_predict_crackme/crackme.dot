digraph "DFG for'crackme' function" {
	Node0x1e2d5a0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1e2dc50[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1e2dd10[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x1e2dd80[shape=record, label="  %6 = add i32 %4, %5"];
	Node0x1e2ddf0[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x1e2de60[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1e2ded0[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1e2df40[shape=record, label="  %10 = or i32 %7, %0"];
	Node0x1e2dfb0[shape=record, label="  %11 = and i32 %7, %0"];
	Node0x1e2e020[shape=record, label="  %12 = xor i32 %9, -1"];
	Node0x1e2e0c0[shape=record, label="  %13 = mul i32 %12, 5"];
	Node0x1e2e160[shape=record, label="  %14 = shl i32 %10, 2"];
	Node0x1e2e200[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0x1e2e2a0[shape=record, label="  %16 = mul i32 %11, 3"];
	Node0x1e2e310[shape=record, label="  %17 = shl i32 %3, 1"];
	Node0x1e2e380[shape=record, label="  %18 = sub i32 2, %0"];
	Node0x1e2e3f0[shape=record, label="  %19 = sub i32 %18, %1"];
	Node0x1e2e460[shape=record, label="  %20 = sub i32 %19, %8"];
	Node0x1e2e4d0[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x1e2e540[shape=record, label="  %22 = add i32 %21, %10"];
	Node0x1e2e5b0[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x1e2e620[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x1e2e690[shape=record, label="  %25 = add i32 %24, %16"];
	Node0x1e2e700[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x1e2e770[shape=record, label="  %27 = add i32 %26, %15"];
	Node0x1e2e7e0[shape=record, label="  %28 = icmp eq i32 %6, %27"];
	Node0x1dce268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1e2ec80[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x1e2ecd0[shape=record, label="  ret void"];
	Node0x1e2d5a0 -> Node0x1e2dc50;
	Node0x1e2dc50 -> Node0x1e2dd10;
	Node0x1e2dd10 -> Node0x1e2dd80;
	Node0x1e2dd80 -> Node0x1e2ddf0;
	Node0x1e2ddf0 -> Node0x1e2de60;
	Node0x1e2de60 -> Node0x1e2ded0;
	Node0x1e2ded0 -> Node0x1e2df40;
	Node0x1e2df40 -> Node0x1e2dfb0;
	Node0x1e2dfb0 -> Node0x1e2e020;
	Node0x1e2e020 -> Node0x1e2e0c0;
	Node0x1e2e0c0 -> Node0x1e2e160;
	Node0x1e2e160 -> Node0x1e2e200;
	Node0x1e2e200 -> Node0x1e2e2a0;
	Node0x1e2e2a0 -> Node0x1e2e310;
	Node0x1e2e310 -> Node0x1e2e380;
	Node0x1e2e380 -> Node0x1e2e3f0;
	Node0x1e2e3f0 -> Node0x1e2e460;
	Node0x1e2e460 -> Node0x1e2e4d0;
	Node0x1e2e4d0 -> Node0x1e2e540;
	Node0x1e2e540 -> Node0x1e2e5b0;
	Node0x1e2e5b0 -> Node0x1e2e620;
	Node0x1e2e620 -> Node0x1e2e690;
	Node0x1e2e690 -> Node0x1e2e700;
	Node0x1e2e700 -> Node0x1e2e770;
	Node0x1e2e770 -> Node0x1e2e7e0;
	Node0x1e2e7e0 -> Node0x1dce268;
	Node0x1dce268 -> Node0x1e2ec80;
	Node0x1e2ec80 -> Node0x1e2ecd0;
edge [color=red]
	Node0x1e2d5a0 -> Node0x1e2dc50;
	Node0x1e2dc50 -> Node0x1e2dd80;
	Node0x1e2dd10 -> Node0x1e2dd80;
	Node0x1e2ddf0 -> Node0x1e2de60;
	Node0x1e2ddf0 -> Node0x1e2df40;
	Node0x1e2ddf0 -> Node0x1e2dfb0;
	Node0x1e2ded0 -> Node0x1e2e020;
	Node0x1e2e020 -> Node0x1e2e0c0;
	Node0x1e2df40 -> Node0x1e2e160;
	Node0x1e2e160 -> Node0x1e2e200;
	Node0x1e2dfb0 -> Node0x1e2e2a0;
	Node0x1e2d5a0 -> Node0x1e2e310;
	Node0x1e2e380 -> Node0x1e2e3f0;
	Node0x1e2e3f0 -> Node0x1e2e460;
	Node0x1e2de60 -> Node0x1e2e460;
	Node0x1e2e460 -> Node0x1e2e4d0;
	Node0x1e2ded0 -> Node0x1e2e4d0;
	Node0x1e2e4d0 -> Node0x1e2e540;
	Node0x1e2df40 -> Node0x1e2e540;
	Node0x1e2e540 -> Node0x1e2e5b0;
	Node0x1e2dfb0 -> Node0x1e2e5b0;
	Node0x1e2e5b0 -> Node0x1e2e620;
	Node0x1e2e0c0 -> Node0x1e2e620;
	Node0x1e2e620 -> Node0x1e2e690;
	Node0x1e2e2a0 -> Node0x1e2e690;
	Node0x1e2e690 -> Node0x1e2e700;
	Node0x1e2e310 -> Node0x1e2e700;
	Node0x1e2e700 -> Node0x1e2e770;
	Node0x1e2e200 -> Node0x1e2e770;
	Node0x1e2dd80 -> Node0x1e2e7e0;
	Node0x1e2e770 -> Node0x1e2e7e0;
	Node0x1e2e7e0 -> Node0x1dce268;
	Node0x1dce268 -> Node0x1e2ec80;
}
