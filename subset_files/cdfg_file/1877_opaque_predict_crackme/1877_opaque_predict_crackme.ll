; ModuleID = '../.././c_source_file/1877_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1877_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = or i32 %9, %1
  %11 = mul i32 %10, -2
  %12 = xor i32 %1, -1
  %13 = xor i32 %2, %0
  %14 = or i32 %13, %12
  %15 = sub i32 %11, %14
  %16 = xor i32 %3, -1
  %17 = xor i32 %5, -1
  %18 = or i32 %17, %4
  %19 = xor i32 %18, -1
  %20 = or i32 %19, %16
  %21 = sub i32 %15, %20
  %22 = xor i32 %4, -1
  %23 = and i32 %5, %3
  %24 = and i32 %23, %22
  %25 = or i32 %5, %3
  %26 = and i32 %25, %4
  %27 = xor i32 %26, -1
  %28 = xor i32 %24, %27
  %29 = sub i32 %21, %28
  %30 = xor i32 %2, %1
  %31 = xor i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = add i32 %31, 1
  %34 = or i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %35, %32
  %37 = xor i32 %0, -1
  %38 = and i32 %7, %1
  %39 = or i32 %38, %37
  %40 = and i32 %13, %1
  %41 = and i32 %2, %0
  %42 = xor i32 %41, %1
  %43 = xor i32 %41, -1
  %44 = add i32 %41, 1
  %45 = xor i32 %38, -1
  %46 = or i32 %45, %0
  %47 = and i32 %2, %1
  %48 = and i32 %47, %37
  %49 = and i32 %30, %0
  %50 = xor i32 %49, -1
  %51 = xor i32 %48, %50
  %52 = and i32 %1, %0
  %53 = xor i32 %34, %52
  %54 = and i32 %12, %0
  %55 = and i32 %54, %2
  %56 = or i32 %30, %0
  %57 = xor i32 %55, %56
  %58 = or i32 %2, %1
  %59 = xor i32 %58, -1
  %60 = xor i32 %59, %0
  %61 = and i32 %30, %37
  %62 = and i32 %58, %0
  %63 = or i32 %48, %62
  %64 = or i32 %12, %0
  %65 = xor i32 %41, %64
  %66 = shl i32 %65, 1
  %67 = add i32 %38, 1
  %68 = xor i32 %64, %2
  %69 = xor i32 %30, -1
  %70 = and i32 %69, %37
  %71 = and i32 %43, %12
  %72 = xor i32 %13, -1
  %73 = and i32 %72, %32
  %74 = and i32 %58, %37
  %75 = or i32 %13, %32
  %76 = xor i32 %47, -1
  %77 = and i32 %76, %0
  %78 = or i32 %69, %0
  %79 = shl i32 %78, 1
  %80 = or i32 %1, %0
  %81 = and i32 %80, %69
  %82 = xor i32 %80, -1
  %83 = xor i32 %82, %2
  %84 = or i32 %41, %1
  %85 = or i32 %59, %0
  %86 = and i32 %47, %0
  %87 = xor i32 %30, %0
  %88 = xor i32 %87, -1
  %89 = or i32 %86, %88
  %90 = or i32 %69, %82
  %91 = and i32 %7, %0
  %92 = xor i32 %91, -1
  %93 = and i32 %92, %32
  %94 = or i32 %38, %0
  %95 = or i32 %7, %82
  %96 = or i32 %9, %12
  %97 = or i32 %7, %1
  %98 = xor i32 %91, %97
  %99 = or i32 %52, %9
  %100 = shl i32 %99, 1
  %101 = and i32 %13, %12
  %102 = or i32 %32, %2
  %103 = xor i32 %64, -1
  %104 = or i32 %69, %103
  %105 = or i32 %52, %59
  %106 = or i32 %86, %74
  %107 = or i32 %59, %37
  %108 = and i32 %80, %72
  %109 = and i32 %13, %31
  %110 = xor i32 %54, -1
  %111 = add i32 %54, 1
  %112 = xor i32 %52, -1
  %113 = and i32 %30, %112
  %114 = or i32 %13, %1
  %115 = or i32 %86, %61
  %116 = and i32 %13, %112
  %117 = xor i32 %97, -1
  %118 = or i32 %52, %117
  %119 = xor i32 %9, %1
  %120 = xor i32 %41, %80
  %121 = xor i32 %47, %0
  %122 = or i32 %54, %2
  %123 = xor i32 %86, %87
  %124 = or i32 %55, %87
  %125 = or i32 %52, %69
  %126 = or i32 %91, %117
  %127 = or i32 %13, %103
  %128 = and i32 %92, %1
  %129 = xor i32 %8, %52
  %130 = xor i32 %58, %0
  %131 = or i32 %45, %37
  %132 = and i32 %13, %80
  %133 = xor i32 %55, %88
  %134 = and i32 %7, %110
  %135 = and i32 %69, %112
  %136 = xor i32 %97, %52
  %137 = shl i32 %136, 1
  %138 = xor i32 %45, %0
  %139 = shl i32 %138, 1
  %140 = add i32 %30, 1
  %141 = or i32 %13, %52
  %142 = xor i32 %117, %0
  %143 = and i32 %64, %69
  %144 = and i32 %69, %0
  %145 = or i32 %7, %103
  %146 = xor i32 %110, %2
  %147 = xor i32 %41, %45
  %148 = or i32 %52, %2
  %149 = xor i32 %58, %52
  %150 = and i32 %64, %72
  %151 = and i32 %72, %1
  %152 = xor i32 %92, %1
  %153 = or i32 %52, %35
  %154 = shl i32 %153, 1
  %155 = and i32 %69, %110
  %156 = and i32 %112, %2
  %157 = or i32 %72, %1
  %158 = and i32 %97, %0
  %159 = or i32 %72, %32
  %160 = or i32 %117, %37
  %161 = or i32 %35, %12
  %162 = or i32 %91, %47
  %163 = and i32 %72, %12
  %164 = or i32 %13, %54
  %165 = shl i32 %164, 1
  %166 = or i32 %47, %0
  %167 = or i32 %41, %32
  %168 = shl i32 %167, 1
  %169 = xor i32 %97, %0
  %170 = or i32 %30, %54
  %171 = or i32 %47, %54
  %172 = xor i32 %54, %45
  %173 = or i32 %41, %103
  %174 = or i32 %9, %32
  %175 = and i32 %43, %32
  %176 = and i32 %7, %32
  %177 = and i32 %80, %2
  %178 = and i32 %80, %7
  %179 = or i32 %7, %32
  %180 = or i32 %12, %2
  %181 = xor i32 %180, %37
  %182 = xor i32 %181, %55
  %183 = and i32 %30, %80
  %184 = xor i32 %80, %2
  %185 = or i32 %72, %82
  %186 = or i32 %47, %37
  %187 = xor i32 %38, %0
  %188 = shl i32 %187, 1
  %189 = or i32 %117, %0
  %190 = or i32 %91, %31
  %191 = and i32 %34, %32
  %192 = shl i32 %191, 1
  %193 = xor i32 %61, -1
  %194 = xor i32 %86, %193
  %195 = or i32 %72, %103
  %196 = and i32 %59, %37
  %197 = and i32 %38, %37
  %198 = and i32 %59, %0
  %199 = mul i32 %198, 20
  %200 = and i32 %38, %0
  %201 = mul i32 %200, 30
  %202 = and i32 %117, %0
  %203 = mul i32 %86, 13
  %204 = and i32 %4, %3
  %205 = or i32 %5, %4
  %206 = xor i32 %205, %204
  %207 = or i32 %23, %4
  %208 = xor i32 %25, -1
  %209 = xor i32 %208, %4
  %210 = xor i32 %4, %3
  %211 = xor i32 %5, %4
  %212 = or i32 %211, %210
  %213 = xor i32 %23, -1
  %214 = or i32 %213, %22
  %215 = xor i32 %5, %3
  %216 = or i32 %215, %4
  %217 = and i32 %16, %5
  %218 = and i32 %217, %22
  %219 = or i32 %215, %22
  %220 = xor i32 %218, %219
  %221 = and i32 %213, %22
  %222 = xor i32 %210, -1
  %223 = and i32 %17, %222
  %224 = shl i32 %223, 1
  %225 = and i32 %18, %16
  %226 = xor i32 %211, -1
  %227 = and i32 %226, %222
  %228 = and i32 %17, %3
  %229 = xor i32 %228, -1
  %230 = shl i32 %229, 1
  %231 = xor i32 %228, %4
  %232 = or i32 %24, %26
  %233 = or i32 %17, %3
  %234 = xor i32 %233, -1
  %235 = xor i32 %234, %4
  %236 = and i32 %217, %4
  %237 = xor i32 %236, %216
  %238 = shl i32 %237, 1
  %239 = or i32 %204, %17
  %240 = add i32 %233, 1
  %241 = xor i32 %215, -1
  %242 = and i32 %241, %4
  %243 = shl i32 %242, 1
  %244 = and i32 %233, %22
  %245 = or i32 %4, %3
  %246 = xor i32 %245, -1
  %247 = or i32 %17, %246
  %248 = or i32 %204, %226
  %249 = xor i32 %204, -1
  %250 = and i32 %249, %5
  %251 = shl i32 %250, 1
  %252 = and i32 %17, %4
  %253 = xor i32 %252, %3
  %254 = and i32 %5, %4
  %255 = or i32 %254, %16
  %256 = xor i32 %215, %4
  %257 = or i32 %204, %234
  %258 = and i32 %23, %4
  %259 = and i32 %25, %22
  %260 = xor i32 %258, -1
  %261 = xor i32 %259, %260
  %262 = and i32 %229, %4
  %263 = xor i32 %19, %3
  %264 = shl i32 %263, 1
  %265 = and i32 %205, %3
  %266 = or i32 %241, %246
  %267 = and i32 %215, %249
  %268 = or i32 %246, %5
  %269 = or i32 %252, %210
  %270 = or i32 %16, %4
  %271 = and i32 %215, %270
  %272 = or i32 %254, %208
  %273 = and i32 %211, %210
  %274 = and i32 %245, %17
  %275 = xor i32 %254, -1
  %276 = and i32 %275, %222
  %277 = xor i32 %252, -1
  %278 = and i32 %277, %16
  %279 = and i32 %241, %249
  %280 = and i32 %18, %210
  %281 = and i32 %211, %249
  %282 = xor i32 %213, %4
  %283 = xor i32 %277, %3
  %284 = or i32 %23, %22
  %285 = and i32 %18, %222
  %286 = and i32 %16, %4
  %287 = or i32 %286, %5
  %288 = or i32 %222, %5
  %289 = and i32 %241, %22
  %290 = and i32 %245, %226
  %291 = or i32 %226, %246
  %292 = xor i32 %205, -1
  %293 = xor i32 %292, %3
  %294 = shl i32 %293, 1
  %295 = or i32 %16, %5
  %296 = xor i32 %295, %4
  %297 = or i32 %236, %296
  %298 = or i32 %241, %4
  %299 = xor i32 %245, %5
  %300 = xor i32 %254, %229
  %301 = xor i32 %286, -1
  %302 = and i32 %17, %301
  %303 = or i32 %204, %208
  %304 = add i32 %25, 1
  %305 = and i32 %211, %222
  %306 = xor i32 %18, %3
  %307 = and i32 %295, %4
  %308 = xor i32 %307, -1
  %309 = xor i32 %218, %308
  %310 = or i32 %228, %22
  %311 = shl i32 %310, 1
  %312 = xor i32 %270, -1
  %313 = or i32 %211, %312
  %314 = shl i32 %313, 1
  %315 = or i32 %254, %228
  %316 = or i32 %211, %204
  %317 = or i32 %226, %222
  %318 = xor i32 %296, -1
  %319 = xor i32 %236, %318
  %320 = or i32 %208, %22
  %321 = shl i32 %18, 1
  %322 = or i32 %312, %5
  %323 = and i32 %205, %16
  %324 = shl i32 %323, 1
  %325 = or i32 %215, %246
  %326 = xor i32 %270, %5
  %327 = and i32 %226, %3
  %328 = or i32 %226, %3
  %329 = or i32 %210, %17
  %330 = and i32 %222, %5
  %331 = xor i32 %216, 2147483647
  %332 = or i32 %331, %236
  %333 = shl i32 %332, 1
  %334 = or i32 %254, %246
  %335 = or i32 %215, %286
  %336 = and i32 %210, %275
  %337 = xor i32 %254, %245
  %338 = xor i32 %204, %5
  %339 = xor i32 %219, -1
  %340 = or i32 %218, %339
  %341 = and i32 %215, %245
  %342 = shl i32 %341, 1
  %343 = or i32 %210, %292
  %344 = and i32 %215, %22
  %345 = xor i32 %344, %260
  %346 = or i32 %258, %259
  %347 = xor i32 %254, %270
  %348 = add i32 %18, 1
  %349 = and i32 %277, %3
  %350 = shl i32 %344, 1
  %351 = or i32 %258, %344
  %352 = and i32 %301, %5
  %353 = xor i32 %233, %204
  %354 = shl i32 %353, 1
  %355 = or i32 %211, %3
  %356 = add i32 %254, 1
  %357 = and i32 %215, %4
  %358 = xor i32 %357, 2147483647
  %359 = xor i32 %358, %24
  %360 = shl i32 %359, 1
  %361 = or i32 %292, %222
  %362 = xor i32 %25, %204
  %363 = xor i32 %254, %25
  %364 = and i32 %233, %4
  %365 = and i32 %211, %245
  %366 = or i32 %286, %226
  %367 = and i32 %226, %16
  %368 = or i32 %241, %22
  %369 = xor i32 %258, %256
  %370 = and i32 %270, %226
  %371 = xor i32 %252, %213
  %372 = and i32 %213, %4
  %373 = shl i32 %372, 1
  %374 = or i32 %24, %357
  %375 = shl i32 %374, 1
  %376 = or i32 %210, %19
  %377 = or i32 %211, %222
  %378 = shl i32 %377, 1
  %379 = or i32 %215, %312
  %380 = and i32 %270, %241
  %381 = shl i32 %380, 2
  %382 = or i32 %215, %204
  %383 = or i32 %236, %256
  %384 = and i32 %229, %22
  %385 = or i32 %218, %307
  %386 = shl i32 %385, 1
  %387 = xor i32 %275, %3
  %388 = shl i32 %387, 1
  %389 = or i32 %252, %234
  %390 = or i32 %17, %222
  %391 = or i32 %228, %286
  %392 = or i32 %286, %241
  %393 = and i32 %245, %5
  %394 = or i32 %252, %23
  %395 = shl i32 %394, 1
  %396 = and i32 %210, %5
  %397 = or i32 %17, %312
  %398 = xor i32 %286, %213
  %399 = and i32 %208, %22
  %400 = mul i32 %399, 11
  %401 = and i32 %228, %22
  %402 = mul i32 %401, 12
  %403 = and i32 %208, %4
  %404 = mul i32 %403, 36
  %405 = and i32 %228, %4
  %406 = and i32 %234, %22
  %407 = mul i32 %24, 7
  %408 = and i32 %234, %4
  %409 = mul i32 %408, 10
  %410 = mul i32 %258, 14
  %411 = add i32 %92, %112
  %412 = add i32 %411, %156
  %413 = add i32 %412, %83
  %414 = add i32 %413, %174
  %415 = add i32 %414, %171
  %416 = add i32 %415, %155
  %417 = add i32 %416, %147
  %418 = add i32 %417, %142
  %419 = add i32 %418, %121
  %420 = add i32 %419, %36
  %421 = add i32 %420, %222
  %422 = add i32 %421, %254
  %423 = add i32 %422, %322
  %424 = add i32 %423, %299
  %425 = add i32 %424, %268
  %426 = add i32 %425, %320
  %427 = add i32 %426, %361
  %428 = add i32 %427, %291
  %429 = add i32 %428, %282
  %430 = add i32 %429, %273
  %431 = add i32 %430, %253
  %432 = add i32 %431, %244
  %433 = shl i32 %432, 1
  %434 = sub i32 %7, %145
  %435 = add i32 %434, %59
  %436 = add i32 %435, %67
  %437 = sub i32 %436, %48
  %438 = sub i32 %437, %127
  %439 = add i32 %438, %113
  %440 = sub i32 %439, %274
  %441 = mul i32 %440, 3
  %442 = sub i32 %197, %68
  %443 = sub i32 %442, %105
  %444 = sub i32 %443, %71
  %445 = add i32 %444, %304
  %446 = sub i32 %445, %391
  %447 = mul i32 %446, 5
  %448 = add i32 %116, %166
  %449 = add i32 %448, %262
  %450 = add i32 %449, %406
  %451 = shl i32 %450, 2
  %452 = add i32 %405, %196
  %453 = mul i32 %452, 21
  %454 = add i32 %1, %0
  %455 = mul i32 %454, -2
  %456 = add i32 %455, %33
  %457 = add i32 %456, %111
  %458 = sub i32 %457, %64
  %459 = add i32 %458, %31
  %460 = add i32 %459, %82
  %461 = sub i32 %460, %52
  %462 = add i32 %461, %30
  %463 = add i32 %462, %44
  %464 = add i32 %463, %95
  %465 = add i32 %464, %102
  %466 = add i32 %465, %122
  %467 = sub i32 %466, %91
  %468 = sub i32 %467, %134
  %469 = add i32 %468, %140
  %470 = sub i32 %469, %146
  %471 = sub i32 %470, %148
  %472 = sub i32 %471, %38
  %473 = add i32 %472, %176
  %474 = add i32 %473, %177
  %475 = add i32 %474, %178
  %476 = sub i32 %475, %179
  %477 = sub i32 %476, %184
  %478 = sub i32 %477, %3
  %479 = add i32 %478, %39
  %480 = sub i32 %479, %40
  %481 = add i32 %480, %42
  %482 = sub i32 %481, %46
  %483 = sub i32 %482, %53
  %484 = sub i32 %483, %60
  %485 = sub i32 %484, %61
  %486 = add i32 %485, %70
  %487 = add i32 %486, %73
  %488 = add i32 %487, %74
  %489 = sub i32 %488, %75
  %490 = sub i32 %489, %77
  %491 = add i32 %490, %81
  %492 = sub i32 %491, %84
  %493 = sub i32 %492, %85
  %494 = add i32 %493, %90
  %495 = add i32 %494, %93
  %496 = sub i32 %495, %94
  %497 = add i32 %496, %96
  %498 = add i32 %497, %98
  %499 = add i32 %498, %101
  %500 = add i32 %499, %56
  %501 = sub i32 %500, %104
  %502 = sub i32 %501, %107
  %503 = sub i32 %502, %108
  %504 = add i32 %503, %109
  %505 = sub i32 %504, %114
  %506 = add i32 %505, %118
  %507 = add i32 %506, %119
  %508 = sub i32 %507, %120
  %509 = sub i32 %508, %125
  %510 = add i32 %509, %126
  %511 = sub i32 %510, %62
  %512 = add i32 %511, %128
  %513 = sub i32 %512, %129
  %514 = add i32 %513, %130
  %515 = sub i32 %514, %131
  %516 = sub i32 %515, %132
  %517 = add i32 %516, %135
  %518 = sub i32 %517, %141
  %519 = add i32 %518, %143
  %520 = sub i32 %519, %144
  %521 = add i32 %520, %149
  %522 = sub i32 %521, %150
  %523 = add i32 %522, %151
  %524 = sub i32 %523, %152
  %525 = sub i32 %524, %157
  %526 = add i32 %525, %158
  %527 = add i32 %526, %159
  %528 = add i32 %527, %160
  %529 = sub i32 %528, %161
  %530 = add i32 %529, %162
  %531 = sub i32 %530, %163
  %532 = add i32 %531, %87
  %533 = sub i32 %532, %169
  %534 = sub i32 %533, %170
  %535 = sub i32 %534, %172
  %536 = sub i32 %535, %173
  %537 = add i32 %536, %175
  %538 = add i32 %537, %183
  %539 = add i32 %538, %185
  %540 = sub i32 %539, %186
  %541 = sub i32 %540, %189
  %542 = add i32 %541, %190
  %543 = sub i32 %542, %195
  %544 = add i32 %543, %202
  %545 = sub i32 %544, %51
  %546 = sub i32 %545, %57
  %547 = add i32 %546, %63
  %548 = sub i32 %547, %66
  %549 = sub i32 %548, %79
  %550 = add i32 %549, %89
  %551 = sub i32 %550, %100
  %552 = add i32 %551, %106
  %553 = sub i32 %552, %115
  %554 = add i32 %553, %123
  %555 = sub i32 %554, %124
  %556 = add i32 %555, %133
  %557 = sub i32 %556, %137
  %558 = sub i32 %557, %139
  %559 = sub i32 %558, %154
  %560 = sub i32 %559, %165
  %561 = sub i32 %560, %168
  %562 = add i32 %561, %182
  %563 = sub i32 %562, %188
  %564 = sub i32 %563, %192
  %565 = sub i32 %564, %194
  %566 = add i32 %565, %199
  %567 = add i32 %566, %201
  %568 = add i32 %567, %203
  %569 = sub i32 %568, %270
  %570 = sub i32 %569, %210
  %571 = sub i32 %570, %204
  %572 = sub i32 %571, %239
  %573 = add i32 %572, %240
  %574 = sub i32 %573, %247
  %575 = add i32 %574, %25
  %576 = add i32 %575, %228
  %577 = add i32 %576, %277
  %578 = sub i32 %577, %287
  %579 = add i32 %578, %288
  %580 = add i32 %579, %302
  %581 = sub i32 %580, %205
  %582 = sub i32 %581, %326
  %583 = sub i32 %582, %23
  %584 = sub i32 %583, %215
  %585 = add i32 %584, %329
  %586 = sub i32 %585, %330
  %587 = add i32 %586, %338
  %588 = add i32 %587, %348
  %589 = add i32 %588, %233
  %590 = add i32 %589, %352
  %591 = add i32 %590, %356
  %592 = sub i32 %591, %390
  %593 = sub i32 %592, %393
  %594 = sub i32 %593, %396
  %595 = sub i32 %594, %397
  %596 = add i32 %595, %211
  %597 = add i32 %596, %206
  %598 = sub i32 %597, %207
  %599 = add i32 %598, %209
  %600 = add i32 %599, %212
  %601 = add i32 %600, %214
  %602 = sub i32 %601, %216
  %603 = add i32 %602, %221
  %604 = sub i32 %603, %224
  %605 = sub i32 %604, %225
  %606 = sub i32 %605, %227
  %607 = sub i32 %606, %230
  %608 = sub i32 %607, %231
  %609 = sub i32 %608, %235
  %610 = sub i32 %609, %219
  %611 = add i32 %610, %248
  %612 = sub i32 %611, %251
  %613 = add i32 %612, %255
  %614 = add i32 %613, %256
  %615 = sub i32 %614, %257
  %616 = add i32 %615, %265
  %617 = add i32 %616, %266
  %618 = add i32 %617, %267
  %619 = sub i32 %618, %269
  %620 = add i32 %619, %271
  %621 = add i32 %620, %272
  %622 = add i32 %621, %276
  %623 = add i32 %622, %278
  %624 = sub i32 %623, %279
  %625 = add i32 %624, %280
  %626 = add i32 %625, %281
  %627 = sub i32 %626, %283
  %628 = sub i32 %627, %284
  %629 = add i32 %628, %285
  %630 = add i32 %629, %289
  %631 = sub i32 %630, %290
  %632 = sub i32 %631, %298
  %633 = sub i32 %632, %300
  %634 = add i32 %633, %303
  %635 = add i32 %634, %305
  %636 = add i32 %635, %306
  %637 = add i32 %636, %315
  %638 = sub i32 %637, %316
  %639 = add i32 %638, %317
  %640 = sub i32 %639, %321
  %641 = sub i32 %640, %325
  %642 = sub i32 %641, %327
  %643 = add i32 %642, %328
  %644 = add i32 %643, %334
  %645 = add i32 %644, %335
  %646 = add i32 %645, %336
  %647 = add i32 %646, %337
  %648 = sub i32 %647, %343
  %649 = add i32 %648, %259
  %650 = sub i32 %649, %347
  %651 = sub i32 %650, %349
  %652 = add i32 %651, %26
  %653 = add i32 %652, %355
  %654 = add i32 %653, %362
  %655 = add i32 %654, %363
  %656 = sub i32 %655, %364
  %657 = add i32 %656, %365
  %658 = sub i32 %657, %366
  %659 = add i32 %658, %367
  %660 = sub i32 %659, %357
  %661 = sub i32 %660, %368
  %662 = sub i32 %661, %370
  %663 = sub i32 %662, %371
  %664 = sub i32 %663, %376
  %665 = sub i32 %664, %379
  %666 = sub i32 %665, %382
  %667 = add i32 %666, %384
  %668 = add i32 %667, %389
  %669 = sub i32 %668, %392
  %670 = add i32 %669, %398
  %671 = add i32 %670, %220
  %672 = add i32 %671, %232
  %673 = sub i32 %672, %243
  %674 = add i32 %673, %261
  %675 = sub i32 %674, %264
  %676 = sub i32 %675, %294
  %677 = add i32 %676, %297
  %678 = sub i32 %677, %309
  %679 = sub i32 %678, %311
  %680 = sub i32 %679, %314
  %681 = add i32 %680, %319
  %682 = sub i32 %681, %324
  %683 = add i32 %682, %340
  %684 = sub i32 %683, %342
  %685 = sub i32 %684, %345
  %686 = sub i32 %685, %346
  %687 = sub i32 %686, %350
  %688 = sub i32 %687, %351
  %689 = sub i32 %688, %354
  %690 = sub i32 %689, %369
  %691 = sub i32 %690, %373
  %692 = sub i32 %691, %378
  %693 = sub i32 %692, %381
  %694 = sub i32 %693, %383
  %695 = sub i32 %694, %388
  %696 = sub i32 %695, %395
  %697 = add i32 %696, %400
  %698 = add i32 %697, %402
  %699 = add i32 %698, %404
  %700 = add i32 %699, %407
  %701 = add i32 %700, %409
  %702 = add i32 %701, %410
  %703 = sub i32 %702, %238
  %704 = sub i32 %703, %375
  %705 = sub i32 %704, %386
  %706 = add i32 %705, %453
  %707 = sub i32 %706, %333
  %708 = sub i32 %707, %360
  %709 = add i32 %708, %451
  %710 = add i32 %709, %447
  %711 = add i32 %710, %441
  %712 = add i32 %711, %433
  %713 = icmp eq i32 %29, %712
  %714 = select i1 %713, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %715 = tail call i32 @puts(i8* nonnull dereferenceable(1) %714)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
