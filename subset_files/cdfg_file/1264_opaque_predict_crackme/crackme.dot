digraph "DFG for'crackme' function" {
	Node0x21cd4c0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x21cdb70[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x21cdc30[shape=record, label="  %5 = and i32 %4, %0"];
	Node0x21cdca0[shape=record, label="  %6 = sub i32 %5, %3"];
	Node0x21cdd10[shape=record, label="  %7 = shl i32 %4, 1"];
	Node0x21cdd80[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x21cddf0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x21cde90[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x21cdf00[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x21cdfa0[shape=record, label="  %12 = xor i32 %0, 2147483647"];
	Node0x21ce010[shape=record, label="  %13 = and i32 %12, %1"];
	Node0x21ce080[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x21ce0f0[shape=record, label="  %15 = shl i32 %5, 1"];
	Node0x21ce160[shape=record, label="  %16 = add i32 %7, %1"];
	Node0x21ce1d0[shape=record, label="  %17 = sub i32 %16, %11"];
	Node0x21ce240[shape=record, label="  %18 = add i32 %17, %3"];
	Node0x21ce2b0[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x21ce320[shape=record, label="  %20 = sub i32 %19, %14"];
	Node0x21ce390[shape=record, label="  %21 = sub i32 %20, %15"];
	Node0x21ce400[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x21ce470[shape=record, label="  %23 = icmp eq i32 %6, %22"];
	Node0x216e268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x21ce910[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x21ce960[shape=record, label="  ret void"];
	Node0x21cd4c0 -> Node0x21cdb70;
	Node0x21cdb70 -> Node0x21cdc30;
	Node0x21cdc30 -> Node0x21cdca0;
	Node0x21cdca0 -> Node0x21cdd10;
	Node0x21cdd10 -> Node0x21cdd80;
	Node0x21cdd80 -> Node0x21cddf0;
	Node0x21cddf0 -> Node0x21cde90;
	Node0x21cde90 -> Node0x21cdf00;
	Node0x21cdf00 -> Node0x21cdfa0;
	Node0x21cdfa0 -> Node0x21ce010;
	Node0x21ce010 -> Node0x21ce080;
	Node0x21ce080 -> Node0x21ce0f0;
	Node0x21ce0f0 -> Node0x21ce160;
	Node0x21ce160 -> Node0x21ce1d0;
	Node0x21ce1d0 -> Node0x21ce240;
	Node0x21ce240 -> Node0x21ce2b0;
	Node0x21ce2b0 -> Node0x21ce320;
	Node0x21ce320 -> Node0x21ce390;
	Node0x21ce390 -> Node0x21ce400;
	Node0x21ce400 -> Node0x21ce470;
	Node0x21ce470 -> Node0x216e268;
	Node0x216e268 -> Node0x21ce910;
	Node0x21ce910 -> Node0x21ce960;
edge [color=red]
	Node0x21cdb70 -> Node0x21cdc30;
	Node0x21cdc30 -> Node0x21cdca0;
	Node0x21cd4c0 -> Node0x21cdca0;
	Node0x21cdb70 -> Node0x21cdd10;
	Node0x21cdd80 -> Node0x21cddf0;
	Node0x21cddf0 -> Node0x21cde90;
	Node0x21cdfa0 -> Node0x21ce010;
	Node0x21ce010 -> Node0x21ce080;
	Node0x21cdc30 -> Node0x21ce0f0;
	Node0x21cdd10 -> Node0x21ce160;
	Node0x21ce160 -> Node0x21ce1d0;
	Node0x21cdf00 -> Node0x21ce1d0;
	Node0x21ce1d0 -> Node0x21ce240;
	Node0x21cd4c0 -> Node0x21ce240;
	Node0x21ce240 -> Node0x21ce2b0;
	Node0x21cddf0 -> Node0x21ce2b0;
	Node0x21ce2b0 -> Node0x21ce320;
	Node0x21ce080 -> Node0x21ce320;
	Node0x21ce320 -> Node0x21ce390;
	Node0x21ce0f0 -> Node0x21ce390;
	Node0x21ce390 -> Node0x21ce400;
	Node0x21cde90 -> Node0x21ce400;
	Node0x21cdca0 -> Node0x21ce470;
	Node0x21ce400 -> Node0x21ce470;
	Node0x21ce470 -> Node0x216e268;
	Node0x216e268 -> Node0x21ce910;
}
