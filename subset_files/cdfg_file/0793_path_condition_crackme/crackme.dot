digraph "DFG for'crackme' function" {
	Node0x18efac0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x18efb30[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x18efbf0[shape=record, label="  %5 = sub i32 1, %0"];
	Node0x18efc60[shape=record, label="  %6 = add i32 %5, %4"];
	Node0x18efd00[shape=record, label="  %7 = mul i32 %3, -5"];
	Node0x18efd70[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x18efde0[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x18efe50[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x18efec0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x18eff30[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x18effd0[shape=record, label="  %13 = shl i32 %4, 2"];
	Node0x18f0070[shape=record, label="  %14 = mul i32 %8, -2"];
	Node0x18f00e0[shape=record, label="  %15 = sub i32 %12, %9"];
	Node0x18f0180[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0x18f01f0[shape=record, label="  %17 = add i32 %7, %0"];
	Node0x18f0260[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x18f02d0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x18f0340[shape=record, label="  %20 = add i32 %19, %14"];
	Node0x18f03b0[shape=record, label="  %21 = add i32 %20, %16"];
	Node0x18f0420[shape=record, label="  %22 = icmp eq i32 %6, %21"];
	Node0x1890268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x18f08c0[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x18f0910[shape=record, label="  ret void"];
	Node0x18efac0 -> Node0x18efb30;
	Node0x18efb30 -> Node0x18efbf0;
	Node0x18efbf0 -> Node0x18efc60;
	Node0x18efc60 -> Node0x18efd00;
	Node0x18efd00 -> Node0x18efd70;
	Node0x18efd70 -> Node0x18efde0;
	Node0x18efde0 -> Node0x18efe50;
	Node0x18efe50 -> Node0x18efec0;
	Node0x18efec0 -> Node0x18eff30;
	Node0x18eff30 -> Node0x18effd0;
	Node0x18effd0 -> Node0x18f0070;
	Node0x18f0070 -> Node0x18f00e0;
	Node0x18f00e0 -> Node0x18f0180;
	Node0x18f0180 -> Node0x18f01f0;
	Node0x18f01f0 -> Node0x18f0260;
	Node0x18f0260 -> Node0x18f02d0;
	Node0x18f02d0 -> Node0x18f0340;
	Node0x18f0340 -> Node0x18f03b0;
	Node0x18f03b0 -> Node0x18f0420;
	Node0x18f0420 -> Node0x1890268;
	Node0x1890268 -> Node0x18f08c0;
	Node0x18f08c0 -> Node0x18f0910;
edge [color=red]
	Node0x18efac0 -> Node0x18efb30;
	Node0x18efbf0 -> Node0x18efc60;
	Node0x18efb30 -> Node0x18efc60;
	Node0x18efac0 -> Node0x18efd00;
	Node0x18efde0 -> Node0x18efe50;
	Node0x18efec0 -> Node0x18eff30;
	Node0x18efb30 -> Node0x18effd0;
	Node0x18efd70 -> Node0x18f0070;
	Node0x18eff30 -> Node0x18f00e0;
	Node0x18efde0 -> Node0x18f00e0;
	Node0x18f00e0 -> Node0x18f0180;
	Node0x18efd00 -> Node0x18f01f0;
	Node0x18f01f0 -> Node0x18f0260;
	Node0x18efe50 -> Node0x18f0260;
	Node0x18f0260 -> Node0x18f02d0;
	Node0x18effd0 -> Node0x18f02d0;
	Node0x18f02d0 -> Node0x18f0340;
	Node0x18f0070 -> Node0x18f0340;
	Node0x18f0340 -> Node0x18f03b0;
	Node0x18f0180 -> Node0x18f03b0;
	Node0x18efc60 -> Node0x18f0420;
	Node0x18f03b0 -> Node0x18f0420;
	Node0x18f0420 -> Node0x1890268;
	Node0x1890268 -> Node0x18f08c0;
}
