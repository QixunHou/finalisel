digraph "DFG for'crackme' function" {
	Node0xac74b0[shape=record, label="  %3 = and i32 %1, %0"];
	Node0xac7520[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0xac75e0[shape=record, label="  %5 = sub i32 %4, %3"];
	Node0xac7c60[shape=record, label="  %6 = shl i32 %0, 1"];
	Node0xac7d00[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0xac7da0[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0xac7e10[shape=record, label="  %9 = or i32 %8, %0"];
	Node0xac7e80[shape=record, label="  %10 = or i32 %1, %0"];
	Node0xac7ef0[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0xac7f60[shape=record, label="  %12 = and i32 %8, %0"];
	Node0xac7fd0[shape=record, label="  %13 = add i32 %9, %8"];
	Node0xac8040[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0xac80b0[shape=record, label="  %15 = sub i32 %11, %0"];
	Node0xac8150[shape=record, label="  %16 = mul i32 %15, 3"];
	Node0xac81f0[shape=record, label="  %17 = add i32 %1, 2"];
	Node0xac8260[shape=record, label="  %18 = sub i32 %17, %7"];
	Node0xac82d0[shape=record, label="  %19 = add i32 %18, %10"];
	Node0xac8340[shape=record, label="  %20 = add i32 %19, %12"];
	Node0xac83b0[shape=record, label="  %21 = add i32 %20, %14"];
	Node0xac8420[shape=record, label="  %22 = add i32 %21, %16"];
	Node0xac8490[shape=record, label="  %23 = icmp eq i32 %5, %22"];
	Node0xa68268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xac8930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0xac8980[shape=record, label="  ret void"];
	Node0xac74b0 -> Node0xac7520;
	Node0xac7520 -> Node0xac75e0;
	Node0xac75e0 -> Node0xac7c60;
	Node0xac7c60 -> Node0xac7d00;
	Node0xac7d00 -> Node0xac7da0;
	Node0xac7da0 -> Node0xac7e10;
	Node0xac7e10 -> Node0xac7e80;
	Node0xac7e80 -> Node0xac7ef0;
	Node0xac7ef0 -> Node0xac7f60;
	Node0xac7f60 -> Node0xac7fd0;
	Node0xac7fd0 -> Node0xac8040;
	Node0xac8040 -> Node0xac80b0;
	Node0xac80b0 -> Node0xac8150;
	Node0xac8150 -> Node0xac81f0;
	Node0xac81f0 -> Node0xac8260;
	Node0xac8260 -> Node0xac82d0;
	Node0xac82d0 -> Node0xac8340;
	Node0xac8340 -> Node0xac83b0;
	Node0xac83b0 -> Node0xac8420;
	Node0xac8420 -> Node0xac8490;
	Node0xac8490 -> Node0xa68268;
	Node0xa68268 -> Node0xac8930;
	Node0xac8930 -> Node0xac8980;
edge [color=red]
	Node0xac7520 -> Node0xac75e0;
	Node0xac74b0 -> Node0xac75e0;
	Node0xac7c60 -> Node0xac7d00;
	Node0xac7da0 -> Node0xac7e10;
	Node0xac7e10 -> Node0xac7ef0;
	Node0xac7da0 -> Node0xac7f60;
	Node0xac7e10 -> Node0xac7fd0;
	Node0xac7da0 -> Node0xac7fd0;
	Node0xac7fd0 -> Node0xac8040;
	Node0xac7ef0 -> Node0xac80b0;
	Node0xac80b0 -> Node0xac8150;
	Node0xac81f0 -> Node0xac8260;
	Node0xac7d00 -> Node0xac8260;
	Node0xac8260 -> Node0xac82d0;
	Node0xac7e80 -> Node0xac82d0;
	Node0xac82d0 -> Node0xac8340;
	Node0xac7f60 -> Node0xac8340;
	Node0xac8340 -> Node0xac83b0;
	Node0xac8040 -> Node0xac83b0;
	Node0xac83b0 -> Node0xac8420;
	Node0xac8150 -> Node0xac8420;
	Node0xac75e0 -> Node0xac8490;
	Node0xac8420 -> Node0xac8490;
	Node0xac8490 -> Node0xa68268;
	Node0xa68268 -> Node0xac8930;
}
