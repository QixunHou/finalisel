digraph "DFG for'crackme' function" {
	Node0x1b73020[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x1b730c0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x1b73160[shape=record, label="  %7 = shl i32 %0, 2"];
	Node0x1b73200[shape=record, label="  %8 = add i32 %0, 1"];
	Node0x1b73270[shape=record, label="  %9 = sub i32 %8, %7"];
	Node0x1b732e0[shape=record, label="  %10 = add i32 %9, %2"];
	Node0x1b73350[shape=record, label="  %11 = add i32 %10, %6"];
	Node0x1b733c0[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x1b73430[shape=record, label="  %13 = or i32 %5, %1"];
	Node0x1b734a0[shape=record, label="  %14 = xor i32 %1, -1"];
	Node0x1b73510[shape=record, label="  %15 = xor i32 %14, %2"];
	Node0x1b73580[shape=record, label="  %16 = add i32 %12, 1"];
	Node0x1b735f0[shape=record, label="  %17 = xor i32 %3, -1"];
	Node0x1b73660[shape=record, label="  %18 = xor i32 %3, %0"];
	Node0x1b736d0[shape=record, label="  %19 = or i32 %17, %0"];
	Node0x1b73770[shape=record, label="  %20 = xor i32 %3, 1073741823"];
	Node0x1b737e0[shape=record, label="  %21 = and i32 %20, %0"];
	Node0x1b73850[shape=record, label="  %22 = shl i32 %21, 2"];
	Node0x1b738c0[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x1b73930[shape=record, label="  %24 = add i32 %16, %15"];
	Node0x1b739a0[shape=record, label="  %25 = add i32 %24, %13"];
	Node0x1b73a40[shape=record, label="  %26 = mul i32 %25, 3"];
	Node0x1b73ae0[shape=record, label="  %27 = mul i32 %1, -6"];
	Node0x1b73b50[shape=record, label="  %28 = sub i32 %1, %13"];
	Node0x1b73bf0[shape=record, label="  %29 = mul i32 %28, 5"];
	Node0x1b73c60[shape=record, label="  %30 = sub i32 %16, %3"];
	Node0x1b73cd0[shape=record, label="  %31 = add i32 %30, %17"];
	Node0x1b73d40[shape=record, label="  %32 = add i32 %31, %18"];
	Node0x1b73fc0[shape=record, label="  %33 = sub i32 %32, %19"];
	Node0x1b74030[shape=record, label="  %34 = sub i32 %33, %23"];
	Node0x1b740a0[shape=record, label="  %35 = add i32 %34, %27"];
	Node0x1b74110[shape=record, label="  %36 = add i32 %35, %29"];
	Node0x1b74180[shape=record, label="  %37 = sub i32 %36, %22"];
	Node0x1b741f0[shape=record, label="  %38 = add i32 %37, %26"];
	Node0x1b74260[shape=record, label="  %39 = icmp eq i32 %11, %38"];
	Node0x1b13268[shape=record, label="  %40 = select i1 %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1b74700[shape=record, label="  %41 = tail call i32 @puts(i8* nonnull dereferenceable(1) %40)"];
	Node0x1b74750[shape=record, label="  ret void"];
	Node0x1b73020 -> Node0x1b730c0;
	Node0x1b730c0 -> Node0x1b73160;
	Node0x1b73160 -> Node0x1b73200;
	Node0x1b73200 -> Node0x1b73270;
	Node0x1b73270 -> Node0x1b732e0;
	Node0x1b732e0 -> Node0x1b73350;
	Node0x1b73350 -> Node0x1b733c0;
	Node0x1b733c0 -> Node0x1b73430;
	Node0x1b73430 -> Node0x1b734a0;
	Node0x1b734a0 -> Node0x1b73510;
	Node0x1b73510 -> Node0x1b73580;
	Node0x1b73580 -> Node0x1b735f0;
	Node0x1b735f0 -> Node0x1b73660;
	Node0x1b73660 -> Node0x1b736d0;
	Node0x1b736d0 -> Node0x1b73770;
	Node0x1b73770 -> Node0x1b737e0;
	Node0x1b737e0 -> Node0x1b73850;
	Node0x1b73850 -> Node0x1b738c0;
	Node0x1b738c0 -> Node0x1b73930;
	Node0x1b73930 -> Node0x1b739a0;
	Node0x1b739a0 -> Node0x1b73a40;
	Node0x1b73a40 -> Node0x1b73ae0;
	Node0x1b73ae0 -> Node0x1b73b50;
	Node0x1b73b50 -> Node0x1b73bf0;
	Node0x1b73bf0 -> Node0x1b73c60;
	Node0x1b73c60 -> Node0x1b73cd0;
	Node0x1b73cd0 -> Node0x1b73d40;
	Node0x1b73d40 -> Node0x1b73fc0;
	Node0x1b73fc0 -> Node0x1b74030;
	Node0x1b74030 -> Node0x1b740a0;
	Node0x1b740a0 -> Node0x1b74110;
	Node0x1b74110 -> Node0x1b74180;
	Node0x1b74180 -> Node0x1b741f0;
	Node0x1b741f0 -> Node0x1b74260;
	Node0x1b74260 -> Node0x1b13268;
	Node0x1b13268 -> Node0x1b74700;
	Node0x1b74700 -> Node0x1b74750;
edge [color=red]
	Node0x1b73020 -> Node0x1b730c0;
	Node0x1b73200 -> Node0x1b73270;
	Node0x1b73160 -> Node0x1b73270;
	Node0x1b73270 -> Node0x1b732e0;
	Node0x1b732e0 -> Node0x1b73350;
	Node0x1b730c0 -> Node0x1b73350;
	Node0x1b73020 -> Node0x1b73430;
	Node0x1b734a0 -> Node0x1b73510;
	Node0x1b733c0 -> Node0x1b73580;
	Node0x1b735f0 -> Node0x1b736d0;
	Node0x1b73770 -> Node0x1b737e0;
	Node0x1b737e0 -> Node0x1b73850;
	Node0x1b73580 -> Node0x1b73930;
	Node0x1b73510 -> Node0x1b73930;
	Node0x1b73930 -> Node0x1b739a0;
	Node0x1b73430 -> Node0x1b739a0;
	Node0x1b739a0 -> Node0x1b73a40;
	Node0x1b73430 -> Node0x1b73b50;
	Node0x1b73b50 -> Node0x1b73bf0;
	Node0x1b73580 -> Node0x1b73c60;
	Node0x1b73c60 -> Node0x1b73cd0;
	Node0x1b735f0 -> Node0x1b73cd0;
	Node0x1b73cd0 -> Node0x1b73d40;
	Node0x1b73660 -> Node0x1b73d40;
	Node0x1b73d40 -> Node0x1b73fc0;
	Node0x1b736d0 -> Node0x1b73fc0;
	Node0x1b73fc0 -> Node0x1b74030;
	Node0x1b738c0 -> Node0x1b74030;
	Node0x1b74030 -> Node0x1b740a0;
	Node0x1b73ae0 -> Node0x1b740a0;
	Node0x1b740a0 -> Node0x1b74110;
	Node0x1b73bf0 -> Node0x1b74110;
	Node0x1b74110 -> Node0x1b74180;
	Node0x1b73850 -> Node0x1b74180;
	Node0x1b74180 -> Node0x1b741f0;
	Node0x1b73a40 -> Node0x1b741f0;
	Node0x1b73350 -> Node0x1b74260;
	Node0x1b741f0 -> Node0x1b74260;
	Node0x1b74260 -> Node0x1b13268;
	Node0x1b13268 -> Node0x1b74700;
}
