digraph "DFG for'crackme' function" {
	Node0xa255b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xa25c60[shape=record, label="  %4 = add i32 %3, 1"];
	Node0xa25d20[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xa25d90[shape=record, label="  %6 = shl i32 %1, 1"];
	Node0xa25e00[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0xa25e70[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xa25ee0[shape=record, label="  %9 = and i32 %7, %0"];
	Node0xa25f50[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xa25fc0[shape=record, label="  %11 = xor i32 %5, -1"];
	Node0xa26030[shape=record, label="  %12 = xor i32 %0, -1"];
	Node0xa260a0[shape=record, label="  %13 = and i32 %12, %1"];
	Node0xa26140[shape=record, label="  %14 = mul i32 %8, -5"];
	Node0xa261b0[shape=record, label="  %15 = add i32 %9, %11"];
	Node0xa26250[shape=record, label="  %16 = mul i32 %15, -6"];
	Node0xa262c0[shape=record, label="  %17 = add i32 %7, %0"];
	Node0xa26330[shape=record, label="  %18 = add i32 %17, %5"];
	Node0xa263a0[shape=record, label="  %19 = sub i32 %18, %3"];
	Node0xa26410[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0xa264b0[shape=record, label="  %21 = sub nuw nsw i32 -2, %6"];
	Node0xa26520[shape=record, label="  %22 = sub i32 %21, %8"];
	Node0xa26590[shape=record, label="  %23 = add i32 %22, %10"];
	Node0xa26600[shape=record, label="  %24 = sub i32 %23, %13"];
	Node0xa26670[shape=record, label="  %25 = add i32 %24, %14"];
	Node0xa266e0[shape=record, label="  %26 = add i32 %25, %16"];
	Node0xa26750[shape=record, label="  %27 = add i32 %26, %20"];
	Node0xa267c0[shape=record, label="  %28 = icmp eq i32 %4, %27"];
	Node0x9c6268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa26c60[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xa26cb0[shape=record, label="  ret void"];
	Node0xa255b0 -> Node0xa25c60;
	Node0xa25c60 -> Node0xa25d20;
	Node0xa25d20 -> Node0xa25d90;
	Node0xa25d90 -> Node0xa25e00;
	Node0xa25e00 -> Node0xa25e70;
	Node0xa25e70 -> Node0xa25ee0;
	Node0xa25ee0 -> Node0xa25f50;
	Node0xa25f50 -> Node0xa25fc0;
	Node0xa25fc0 -> Node0xa26030;
	Node0xa26030 -> Node0xa260a0;
	Node0xa260a0 -> Node0xa26140;
	Node0xa26140 -> Node0xa261b0;
	Node0xa261b0 -> Node0xa26250;
	Node0xa26250 -> Node0xa262c0;
	Node0xa262c0 -> Node0xa26330;
	Node0xa26330 -> Node0xa263a0;
	Node0xa263a0 -> Node0xa26410;
	Node0xa26410 -> Node0xa264b0;
	Node0xa264b0 -> Node0xa26520;
	Node0xa26520 -> Node0xa26590;
	Node0xa26590 -> Node0xa26600;
	Node0xa26600 -> Node0xa26670;
	Node0xa26670 -> Node0xa266e0;
	Node0xa266e0 -> Node0xa26750;
	Node0xa26750 -> Node0xa267c0;
	Node0xa267c0 -> Node0x9c6268;
	Node0x9c6268 -> Node0xa26c60;
	Node0xa26c60 -> Node0xa26cb0;
edge [color=red]
	Node0xa255b0 -> Node0xa25c60;
	Node0xa25e00 -> Node0xa25ee0;
	Node0xa25ee0 -> Node0xa25f50;
	Node0xa25d20 -> Node0xa25fc0;
	Node0xa26030 -> Node0xa260a0;
	Node0xa25e70 -> Node0xa26140;
	Node0xa25ee0 -> Node0xa261b0;
	Node0xa25fc0 -> Node0xa261b0;
	Node0xa261b0 -> Node0xa26250;
	Node0xa25e00 -> Node0xa262c0;
	Node0xa262c0 -> Node0xa26330;
	Node0xa25d20 -> Node0xa26330;
	Node0xa26330 -> Node0xa263a0;
	Node0xa255b0 -> Node0xa263a0;
	Node0xa263a0 -> Node0xa26410;
	Node0xa25d90 -> Node0xa264b0;
	Node0xa264b0 -> Node0xa26520;
	Node0xa25e70 -> Node0xa26520;
	Node0xa26520 -> Node0xa26590;
	Node0xa25f50 -> Node0xa26590;
	Node0xa26590 -> Node0xa26600;
	Node0xa260a0 -> Node0xa26600;
	Node0xa26600 -> Node0xa26670;
	Node0xa26140 -> Node0xa26670;
	Node0xa26670 -> Node0xa266e0;
	Node0xa26250 -> Node0xa266e0;
	Node0xa266e0 -> Node0xa26750;
	Node0xa26410 -> Node0xa26750;
	Node0xa25c60 -> Node0xa267c0;
	Node0xa26750 -> Node0xa267c0;
	Node0xa267c0 -> Node0x9c6268;
	Node0x9c6268 -> Node0xa26c60;
}
