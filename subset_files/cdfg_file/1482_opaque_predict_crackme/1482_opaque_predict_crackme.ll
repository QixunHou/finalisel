; ModuleID = '../.././c_source_file/1482_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1482_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %6, %3
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = xor i32 %2, %1
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %10
  %14 = xor i32 %2, -1
  %15 = or i32 %14, %0
  %16 = xor i32 %1, %0
  %17 = xor i32 %16, -1
  %18 = and i32 %15, %17
  %19 = sub i32 %13, %18
  %20 = add i32 %19, %7
  %21 = and i32 %6, %3
  %22 = or i32 %6, %3
  %23 = shl i32 %3, 1
  %24 = or i32 %4, %3
  %25 = xor i32 %24, -1
  %26 = shl i32 %22, 1
  %27 = xor i32 %26, -2
  %28 = and i32 %4, %3
  %29 = and i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %30, %1
  %32 = and i32 %8, %2
  %33 = and i32 %32, %0
  %34 = xor i32 %0, -1
  %35 = or i32 %8, %2
  %36 = and i32 %35, %34
  %37 = xor i32 %36, 2147483647
  %38 = xor i32 %37, %33
  %39 = shl i32 %38, 1
  %40 = or i32 %33, %36
  %41 = shl i32 %40, 2
  %42 = or i32 %29, %1
  %43 = xor i32 %11, %34
  %44 = xor i32 %33, %43
  %45 = or i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %16, %46
  %48 = xor i32 %12, %0
  %49 = or i32 %1, %0
  %50 = xor i32 %29, %49
  %51 = shl i32 %50, 1
  %52 = and i32 %2, %1
  %53 = and i32 %52, %0
  %54 = or i32 %2, %1
  %55 = and i32 %54, %34
  %56 = xor i32 %55, 2147483647
  %57 = xor i32 %56, %53
  %58 = shl i32 %57, 1
  %59 = and i32 %14, %1
  %60 = or i32 %59, %0
  %61 = shl i32 %60, 1
  %62 = and i32 %1, %0
  %63 = xor i32 %62, -1
  %64 = xor i32 %63, %2
  %65 = and i32 %30, %1
  %66 = xor i32 %2, %0
  %67 = xor i32 %66, -1
  %68 = or i32 %16, %67
  %69 = shl i32 %45, 1
  %70 = xor i32 %29, %1
  %71 = and i32 %66, %10
  %72 = shl i32 %71, 1
  %73 = or i32 %14, %1
  %74 = xor i32 %73, -1
  %75 = or i32 %74, %0
  %76 = or i32 %67, %17
  %77 = and i32 %45, %16
  %78 = shl i32 %30, 1
  %79 = xor i32 %54, %62
  %80 = and i32 %49, %2
  %81 = or i32 %8, %0
  %82 = xor i32 %81, -1
  %83 = or i32 %14, %82
  %84 = and i32 %66, %63
  %85 = or i32 %14, %17
  %86 = shl i32 %85, 1
  %87 = xor i32 %54, %0
  %88 = xor i32 %53, -1
  %89 = xor i32 %87, %88
  %90 = or i32 %11, %62
  %91 = xor i32 %49, -1
  %92 = or i32 %66, %91
  %93 = or i32 %66, %17
  %94 = shl i32 %93, 1
  %95 = or i32 %29, %17
  %96 = xor i32 %59, -1
  %97 = add i32 %59, 1
  %98 = and i32 %11, %63
  %99 = xor i32 %52, -1
  %100 = or i32 %99, %0
  %101 = and i32 %14, %17
  %102 = and i32 %54, %0
  %103 = and i32 %81, %12
  %104 = or i32 %66, %62
  %105 = and i32 %14, %0
  %106 = or i32 %105, %1
  %107 = or i32 %67, %1
  %108 = xor i32 %105, -1
  %109 = and i32 %16, %108
  %110 = and i32 %108, %17
  %111 = xor i32 %105, %99
  %112 = xor i32 %54, -1
  %113 = or i32 %112, %0
  %114 = and i32 %45, %1
  %115 = or i32 %52, %9
  %116 = and i32 %11, %0
  %117 = or i32 %9, %67
  %118 = or i32 %11, %9
  %119 = and i32 %67, %63
  %120 = shl i32 %34, 1
  %121 = or i32 %96, %0
  %122 = shl i32 %121, 1
  %123 = xor i32 %59, %0
  %124 = or i32 %67, %91
  %125 = and i32 %11, %34
  %126 = or i32 %53, %125
  %127 = or i32 %12, %34
  %128 = or i32 %46, %8
  %129 = or i32 %62, %112
  %130 = add i32 %45, 1
  %131 = xor i32 %125, %88
  %132 = and i32 %49, %14
  %133 = and i32 %12, %0
  %134 = or i32 %66, %16
  %135 = xor i32 %15, -1
  %136 = xor i32 %135, %1
  %137 = and i32 %17, %2
  %138 = shl i32 %137, 1
  %139 = xor i32 %15, %62
  %140 = and i32 %63, %2
  %141 = xor i32 %73, %0
  %142 = and i32 %67, %17
  %143 = and i32 %15, %16
  %144 = add i32 %62, 1
  %145 = xor i32 %112, %0
  %146 = and i32 %66, %17
  %147 = and i32 %81, %14
  %148 = or i32 %62, %135
  %149 = or i32 %46, %1
  %150 = and i32 %10, %2
  %151 = shl i32 %73, 1
  %152 = xor i32 %151, -1
  %153 = or i32 %53, %87
  %154 = and i32 %99, %34
  %155 = shl i32 %154, 1
  %156 = and i32 %12, %34
  %157 = and i32 %45, %8
  %158 = or i32 %66, %1
  %159 = and i32 %66, %8
  %160 = or i32 %14, %91
  %161 = or i32 %9, %14
  %162 = or i32 %17, %2
  %163 = or i32 %66, %9
  %164 = and i32 %66, %49
  %165 = xor i32 %105, %1
  %166 = and i32 %16, %14
  %167 = xor i32 %29, %54
  %168 = and i32 %96, %34
  %169 = xor i32 %10, %2
  %170 = or i32 %67, %8
  %171 = or i32 %59, %9
  %172 = shl i32 %171, 2
  %173 = and i32 %49, %67
  %174 = or i32 %62, %46
  %175 = or i32 %52, %34
  %176 = shl i32 %175, 1
  %177 = and i32 %96, %0
  %178 = and i32 %73, %0
  %179 = shl i32 %178, 1
  %180 = xor i32 %9, %99
  %181 = or i32 %16, %14
  %182 = or i32 %54, %34
  %183 = and i32 %32, %34
  %184 = or i32 %11, %34
  %185 = xor i32 %183, %184
  %186 = and i32 %35, %0
  %187 = xor i32 %186, -1
  %188 = xor i32 %183, %187
  %189 = or i32 %73, %0
  %190 = and i32 %52, %34
  %191 = xor i32 %116, 1073741823
  %192 = xor i32 %191, %190
  %193 = or i32 %9, %2
  %194 = xor i32 %52, %0
  %195 = and i32 %14, %63
  %196 = or i32 %29, %112
  %197 = or i32 %12, %91
  %198 = or i32 %190, %102
  %199 = shl i32 %198, 1
  %200 = or i32 %53, %43
  %201 = xor i32 %81, %2
  %202 = or i32 %62, %12
  %203 = or i32 %135, %1
  %204 = and i32 %11, %81
  %205 = or i32 %54, %0
  %206 = xor i32 %35, %0
  %207 = xor i32 %206, -1
  %208 = xor i32 %33, %207
  %209 = or i32 %62, %74
  %210 = and i32 %66, %16
  %211 = or i32 %62, %2
  %212 = and i32 %67, %8
  %213 = or i32 %29, %16
  %214 = xor i32 %73, %62
  %215 = or i32 %33, %206
  %216 = or i32 %29, %91
  %217 = and i32 %99, %0
  %218 = shl i32 %217, 1
  %219 = or i32 %11, %82
  %220 = add i32 %66, 1
  %221 = or i32 %29, %59
  %222 = and i32 %66, %81
  %223 = and i32 %112, %34
  %224 = mul i32 %223, -11
  %225 = and i32 %59, %34
  %226 = and i32 %112, %0
  %227 = and i32 %59, %0
  %228 = mul i32 %227, 23
  %229 = and i32 %74, %34
  %230 = mul i32 %229, 9
  %231 = and i32 %74, %0
  %232 = mul i32 %231, 13
  %233 = add i32 %66, %2
  %234 = add i32 %233, %226
  %235 = add i32 %234, %216
  %236 = add i32 %235, %210
  %237 = add i32 %236, %197
  %238 = add i32 %237, %189
  %239 = add i32 %238, %182
  %240 = add i32 %239, %177
  %241 = add i32 %240, %170
  %242 = add i32 %241, %167
  %243 = add i32 %242, %143
  %244 = add i32 %243, %142
  %245 = add i32 %244, %124
  %246 = add i32 %245, %110
  %247 = add i32 %246, %106
  %248 = add i32 %247, %103
  %249 = add i32 %248, %92
  %250 = add i32 %249, %68
  %251 = add i32 %250, %47
  %252 = add i32 %251, %21
  %253 = add i32 %252, %44
  %254 = shl i32 %253, 1
  %255 = sub i32 %149, %225
  %256 = sub i32 %255, %116
  %257 = add i32 %256, %102
  %258 = add i32 %257, %25
  %259 = add i32 %258, %28
  %260 = mul i32 %259, 3
  %261 = add i32 %190, %160
  %262 = sub i32 %261, %53
  %263 = sub i32 %262, %157
  %264 = sub i32 %263, %113
  %265 = mul i32 %264, 5
  %266 = add i32 %192, %194
  %267 = shl i32 %266, 2
  %268 = sub i32 2, %0
  %269 = sub i32 %268, %1
  %270 = sub i32 %269, %120
  %271 = add i32 %270, %17
  %272 = sub i32 %271, %81
  %273 = add i32 %272, %144
  %274 = sub i32 %273, %81
  %275 = add i32 %274, %3
  %276 = add i32 %275, %64
  %277 = sub i32 %276, %80
  %278 = add i32 %277, %83
  %279 = add i32 %278, %97
  %280 = sub i32 %279, %101
  %281 = add i32 %280, %11
  %282 = sub i32 %281, %15
  %283 = add i32 %282, %130
  %284 = sub i32 %283, %132
  %285 = sub i32 %284, %140
  %286 = add i32 %285, %147
  %287 = sub i32 %286, %150
  %288 = add i32 %287, %99
  %289 = add i32 %288, %108
  %290 = sub i32 %289, %161
  %291 = add i32 %290, %162
  %292 = add i32 %291, %166
  %293 = add i32 %292, %169
  %294 = sub i32 %293, %181
  %295 = add i32 %294, %193
  %296 = sub i32 %295, %29
  %297 = add i32 %296, %195
  %298 = sub i32 %297, %201
  %299 = sub i32 %298, %211
  %300 = add i32 %299, %220
  %301 = add i32 %300, %4
  %302 = sub i32 %301, %23
  %303 = add i32 %302, %31
  %304 = add i32 %303, %42
  %305 = add i32 %304, %48
  %306 = sub i32 %305, %65
  %307 = sub i32 %306, %69
  %308 = sub i32 %307, %70
  %309 = sub i32 %308, %75
  %310 = sub i32 %309, %76
  %311 = sub i32 %310, %77
  %312 = sub i32 %311, %78
  %313 = sub i32 %312, %79
  %314 = sub i32 %313, %84
  %315 = sub i32 %314, %86
  %316 = add i32 %315, %90
  %317 = sub i32 %316, %95
  %318 = add i32 %317, %98
  %319 = sub i32 %318, %100
  %320 = sub i32 %319, %104
  %321 = add i32 %320, %107
  %322 = sub i32 %321, %109
  %323 = sub i32 %322, %111
  %324 = sub i32 %323, %114
  %325 = add i32 %324, %115
  %326 = add i32 %325, %117
  %327 = sub i32 %326, %118
  %328 = add i32 %327, %119
  %329 = sub i32 %328, %123
  %330 = add i32 %329, %127
  %331 = add i32 %330, %128
  %332 = sub i32 %331, %129
  %333 = add i32 %332, %133
  %334 = sub i32 %333, %134
  %335 = sub i32 %334, %136
  %336 = sub i32 %335, %138
  %337 = add i32 %336, %139
  %338 = sub i32 %337, %141
  %339 = sub i32 %338, %145
  %340 = sub i32 %339, %146
  %341 = sub i32 %340, %148
  %342 = add i32 %341, %152
  %343 = sub i32 %342, %156
  %344 = add i32 %343, %158
  %345 = add i32 %344, %159
  %346 = add i32 %345, %163
  %347 = add i32 %346, %164
  %348 = add i32 %347, %165
  %349 = add i32 %348, %168
  %350 = sub i32 %349, %173
  %351 = add i32 %350, %174
  %352 = sub i32 %351, %180
  %353 = sub i32 %352, %184
  %354 = add i32 %353, %196
  %355 = sub i32 %354, %55
  %356 = sub i32 %355, %202
  %357 = add i32 %356, %203
  %358 = add i32 %357, %204
  %359 = sub i32 %358, %205
  %360 = add i32 %359, %209
  %361 = add i32 %360, %212
  %362 = add i32 %361, %213
  %363 = add i32 %362, %214
  %364 = sub i32 %363, %219
  %365 = add i32 %364, %221
  %366 = sub i32 %365, %222
  %367 = add i32 %366, %21
  %368 = add i32 %367, %22
  %369 = sub i32 %368, %51
  %370 = sub i32 %369, %61
  %371 = sub i32 %370, %72
  %372 = add i32 %371, %89
  %373 = sub i32 %372, %94
  %374 = sub i32 %373, %122
  %375 = sub i32 %374, %126
  %376 = sub i32 %375, %131
  %377 = sub i32 %376, %153
  %378 = sub i32 %377, %155
  %379 = sub i32 %378, %172
  %380 = sub i32 %379, %176
  %381 = sub i32 %380, %179
  %382 = sub i32 %381, %185
  %383 = sub i32 %382, %188
  %384 = add i32 %383, %200
  %385 = sub i32 %384, %208
  %386 = sub i32 %385, %215
  %387 = sub i32 %386, %218
  %388 = add i32 %387, %224
  %389 = add i32 %388, %228
  %390 = add i32 %389, %230
  %391 = add i32 %390, %232
  %392 = sub i32 %391, %41
  %393 = sub i32 %392, %199
  %394 = add i32 %393, %27
  %395 = sub i32 %394, %39
  %396 = sub i32 %395, %58
  %397 = add i32 %396, %267
  %398 = add i32 %397, %265
  %399 = add i32 %398, %260
  %400 = add i32 %399, %254
  %401 = icmp eq i32 %20, %400
  %402 = select i1 %401, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %403 = tail call i32 @puts(i8* nonnull dereferenceable(1) %402)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
