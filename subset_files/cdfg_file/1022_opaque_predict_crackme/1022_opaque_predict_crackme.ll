; ModuleID = '../.././c_source_file/1022_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1022_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = xor i32 %7, -1
  %9 = xor i32 %2, -1
  %10 = or i32 %9, %0
  %11 = and i32 %10, %1
  %12 = and i32 %9, %0
  %13 = xor i32 %12, -1
  %14 = xor i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = and i32 %13, %15
  %17 = add i32 %16, %11
  %18 = add i32 %17, %8
  %19 = xor i32 %3, -1
  %20 = and i32 %19, %4
  %21 = shl i32 %7, 1
  %22 = xor i32 %1, -1
  %23 = or i32 %22, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %24, %2
  %26 = xor i32 %0, -1
  %27 = or i32 %2, %1
  %28 = or i32 %27, %26
  %29 = and i32 %2, %1
  %30 = and i32 %29, %0
  %31 = xor i32 %2, %1
  %32 = and i32 %31, %26
  %33 = xor i32 %30, -1
  %34 = xor i32 %32, %33
  %35 = or i32 %1, %0
  %36 = and i32 %31, %35
  %37 = xor i32 %29, -1
  %38 = xor i32 %37, %0
  %39 = and i32 %1, %0
  %40 = or i32 %39, %2
  %41 = shl i32 %40, 1
  %42 = or i32 %9, %1
  %43 = xor i32 %42, %0
  %44 = xor i32 %2, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %39, %45
  %47 = shl i32 %46, 2
  %48 = and i32 %22, %2
  %49 = and i32 %48, %0
  %50 = or i32 %22, %2
  %51 = xor i32 %50, %0
  %52 = or i32 %49, %51
  %53 = and i32 %2, %0
  %54 = and i32 %9, %1
  %55 = or i32 %53, %54
  %56 = xor i32 %12, %42
  %57 = xor i32 %39, -1
  %58 = and i32 %45, %57
  %59 = or i32 %12, %15
  %60 = or i32 %2, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %61, %1
  %63 = and i32 %14, %9
  %64 = xor i32 %24, %2
  %65 = xor i32 %50, -1
  %66 = or i32 %65, %0
  %67 = xor i32 %49, %66
  %68 = xor i32 %31, %0
  %69 = xor i32 %68, -1
  %70 = xor i32 %49, %69
  %71 = xor i32 %54, -1
  %72 = or i32 %71, %0
  %73 = and i32 %44, %23
  %74 = and i32 %22, %0
  %75 = xor i32 %74, -1
  %76 = and i32 %31, %75
  %77 = and i32 %27, %0
  %78 = and i32 %60, %1
  %79 = and i32 %45, %75
  %80 = or i32 %39, %9
  %81 = xor i32 %35, -1
  %82 = or i32 %53, %81
  %83 = shl i32 %82, 1
  %84 = add i32 %60, 1
  %85 = xor i32 %39, %2
  %86 = or i32 %14, %61
  %87 = and i32 %48, %26
  %88 = or i32 %31, %26
  %89 = xor i32 %88, -1
  %90 = or i32 %87, %89
  %91 = xor i32 %31, -1
  %92 = and i32 %91, %26
  %93 = or i32 %74, %2
  %94 = xor i32 %42, %39
  %95 = xor i32 %53, -1
  %96 = xor i32 %95, %1
  %97 = xor i32 %53, %71
  %98 = and i32 %29, %26
  %99 = or i32 %98, %77
  %100 = and i32 %35, %91
  %101 = xor i32 %12, %37
  %102 = and i32 %27, %26
  %103 = or i32 %30, %102
  %104 = or i32 %30, %32
  %105 = xor i32 %27, -1
  %106 = xor i32 %105, %0
  %107 = or i32 %14, %2
  %108 = or i32 %81, %2
  %109 = xor i32 %71, %0
  %110 = or i32 %91, %0
  %111 = and i32 %95, %1
  %112 = xor i32 %10, -1
  %113 = or i32 %14, %112
  %114 = or i32 %61, %15
  %115 = shl i32 %114, 1
  %116 = add i32 %39, 1
  %117 = and i32 %75, %2
  %118 = and i32 %91, %0
  %119 = xor i32 %42, -1
  %120 = or i32 %12, %119
  %121 = and i32 %44, %14
  %122 = shl i32 %121, 1
  %123 = or i32 %53, %105
  %124 = xor i32 %87, %88
  %125 = or i32 %91, %24
  %126 = or i32 %44, %22
  %127 = shl i32 %126, 1
  %128 = or i32 %112, %15
  %129 = xor i32 %27, %0
  %130 = or i32 %30, %129
  %131 = or i32 %12, %14
  %132 = or i32 %31, %39
  %133 = shl i32 %132, 1
  %134 = or i32 %31, %0
  %135 = xor i32 %54, %0
  %136 = or i32 %61, %22
  %137 = and i32 %14, %2
  %138 = shl i32 %137, 1
  %139 = and i32 %37, %0
  %140 = or i32 %74, %91
  %141 = or i32 %71, %26
  %142 = and i32 %50, %0
  %143 = xor i32 %142, -1
  %144 = xor i32 %87, %143
  %145 = or i32 %29, %26
  %146 = or i32 %12, %1
  %147 = and i32 %23, %9
  %148 = xor i32 %112, %1
  %149 = or i32 %45, %81
  %150 = and i32 %13, %22
  %151 = shl i32 %150, 1
  %152 = or i32 %31, %81
  %153 = or i32 %44, %81
  %154 = shl i32 %26, 1
  %155 = or i32 %112, %1
  %156 = or i32 %42, %0
  %157 = and i32 %31, %57
  %158 = and i32 %44, %22
  %159 = xor i32 %10, %39
  %160 = and i32 %91, %75
  %161 = or i32 %14, %9
  %162 = xor i32 %49, %134
  %163 = or i32 %31, %74
  %164 = and i32 %44, %57
  %165 = and i32 %95, %22
  %166 = xor i32 %29, %0
  %167 = add i32 %31, 1
  %168 = and i32 %10, %22
  %169 = and i32 %91, %57
  %170 = shl i32 %169, 1
  %171 = or i32 %27, %0
  %172 = xor i32 %57, %2
  %173 = or i32 %53, %14
  %174 = or i32 %54, %74
  %175 = xor i32 %81, %2
  %176 = xor i32 %134, 1073741823
  %177 = or i32 %176, %49
  %178 = or i32 %45, %24
  %179 = xor i32 %35, %2
  %180 = xor i32 %53, %23
  %181 = xor i32 %12, %1
  %182 = shl i32 %181, 1
  %183 = and i32 %71, %0
  %184 = or i32 %45, %15
  %185 = and i32 %31, %0
  %186 = and i32 %60, %15
  %187 = and i32 %15, %2
  %188 = or i32 %53, %24
  %189 = or i32 %9, %81
  %190 = or i32 %45, %22
  %191 = xor i32 %91, %0
  %192 = or i32 %42, %26
  %193 = or i32 %39, %61
  %194 = or i32 %37, %26
  %195 = and i32 %71, %26
  %196 = or i32 %61, %1
  %197 = xor i32 %60, %1
  %198 = xor i32 %119, %0
  %199 = and i32 %45, %1
  %200 = or i32 %44, %24
  %201 = xor i32 %13, %1
  %202 = or i32 %119, %0
  %203 = and i32 %44, %1
  %204 = shl i32 %203, 1
  %205 = and i32 %31, %23
  %206 = and i32 %23, %91
  %207 = or i32 %39, %105
  %208 = or i32 %105, %26
  %209 = or i32 %44, %1
  %210 = xor i32 %10, %1
  %211 = or i32 %44, %39
  %212 = and i32 %14, %95
  %213 = or i32 %29, %0
  %214 = or i32 %105, %0
  %215 = and i32 %37, %26
  %216 = or i32 %44, %74
  %217 = xor i32 %102, %33
  %218 = add i32 %12, 1
  %219 = xor i32 %60, %39
  %220 = or i32 %9, %24
  %221 = shl i32 %220, 1
  %222 = or i32 %39, %112
  %223 = shl i32 %222, 1
  %224 = or i32 %119, %26
  %225 = and i32 %35, %45
  %226 = shl i32 %225, 1
  %227 = or i32 %12, %22
  %228 = or i32 %29, %74
  %229 = and i32 %105, %26
  %230 = mul i32 %229, 20
  %231 = and i32 %54, %26
  %232 = mul i32 %231, 23
  %233 = and i32 %105, %0
  %234 = shl i32 %233, 1
  %235 = and i32 %54, %0
  %236 = mul i32 %235, 21
  %237 = and i32 %119, %26
  %238 = mul i32 %98, 14
  %239 = and i32 %119, %0
  %240 = shl i32 %239, 3
  %241 = mul i32 %30, 6
  %242 = sub i32 %119, %158
  %243 = add i32 %242, %164
  %244 = sub i32 %243, %88
  %245 = mul i32 %244, 5
  %246 = add i32 %177, %237
  %247 = shl i32 %246, 2
  %248 = add i32 %118, %79
  %249 = mul i32 %248, 3
  %250 = sub i32 -2, %23
  %251 = add i32 %250, %187
  %252 = add i32 %251, %112
  %253 = add i32 %252, %227
  %254 = add i32 %253, %190
  %255 = add i32 %254, %166
  %256 = add i32 %255, %72
  %257 = add i32 %256, %38
  %258 = add i32 %257, %6
  %259 = add i32 %258, %103
  %260 = shl i32 %259, 1
  %261 = add i32 %154, %0
  %262 = sub i32 %116, %261
  %263 = add i32 %262, %81
  %264 = add i32 %263, %39
  %265 = add i32 %264, %74
  %266 = add i32 %265, 1
  %267 = sub i32 %266, %35
  %268 = add i32 %267, %3
  %269 = add i32 %268, %25
  %270 = sub i32 %269, %63
  %271 = sub i32 %270, %64
  %272 = sub i32 %271, %80
  %273 = add i32 %272, %84
  %274 = sub i32 %273, %85
  %275 = sub i32 %274, %93
  %276 = sub i32 %275, %44
  %277 = add i32 %276, %107
  %278 = sub i32 %277, %108
  %279 = add i32 %278, %117
  %280 = add i32 %279, %12
  %281 = add i32 %280, %29
  %282 = sub i32 %281, %147
  %283 = sub i32 %282, %161
  %284 = add i32 %283, %167
  %285 = add i32 %284, %172
  %286 = sub i32 %285, %175
  %287 = add i32 %286, %179
  %288 = sub i32 %287, %31
  %289 = sub i32 %288, %189
  %290 = add i32 %289, %53
  %291 = sub i32 %290, %54
  %292 = add i32 %291, %218
  %293 = add i32 %292, %4
  %294 = sub i32 %293, %28
  %295 = add i32 %294, %36
  %296 = sub i32 %295, %41
  %297 = add i32 %296, %43
  %298 = sub i32 %297, %55
  %299 = sub i32 %298, %56
  %300 = sub i32 %299, %58
  %301 = add i32 %300, %59
  %302 = add i32 %301, %62
  %303 = add i32 %302, %73
  %304 = add i32 %303, %76
  %305 = sub i32 %304, %77
  %306 = add i32 %305, %78
  %307 = sub i32 %306, %86
  %308 = add i32 %307, %92
  %309 = sub i32 %308, %94
  %310 = sub i32 %309, %96
  %311 = add i32 %310, %97
  %312 = add i32 %311, %100
  %313 = sub i32 %312, %101
  %314 = add i32 %313, %106
  %315 = sub i32 %314, %109
  %316 = sub i32 %315, %110
  %317 = add i32 %316, %111
  %318 = add i32 %317, %113
  %319 = add i32 %318, %120
  %320 = sub i32 %319, %123
  %321 = sub i32 %320, %102
  %322 = add i32 %321, %125
  %323 = add i32 %322, %128
  %324 = sub i32 %323, %131
  %325 = sub i32 %324, %134
  %326 = add i32 %325, %135
  %327 = add i32 %326, %136
  %328 = sub i32 %327, %138
  %329 = add i32 %328, %139
  %330 = sub i32 %329, %140
  %331 = add i32 %330, %141
  %332 = sub i32 %331, %145
  %333 = sub i32 %332, %146
  %334 = sub i32 %333, %148
  %335 = add i32 %334, %149
  %336 = sub i32 %335, %152
  %337 = add i32 %336, %153
  %338 = add i32 %337, %155
  %339 = sub i32 %338, %156
  %340 = add i32 %339, %157
  %341 = add i32 %340, %159
  %342 = sub i32 %341, %160
  %343 = add i32 %342, %163
  %344 = sub i32 %343, %165
  %345 = sub i32 %344, %168
  %346 = sub i32 %345, %129
  %347 = sub i32 %346, %171
  %348 = add i32 %347, %173
  %349 = sub i32 %348, %174
  %350 = add i32 %349, %178
  %351 = add i32 %350, %180
  %352 = sub i32 %351, %183
  %353 = sub i32 %352, %184
  %354 = add i32 %353, %185
  %355 = sub i32 %354, %186
  %356 = sub i32 %355, %188
  %357 = add i32 %356, %191
  %358 = sub i32 %357, %192
  %359 = add i32 %358, %193
  %360 = sub i32 %359, %194
  %361 = sub i32 %360, %195
  %362 = sub i32 %361, %196
  %363 = add i32 %362, %197
  %364 = sub i32 %363, %198
  %365 = sub i32 %364, %199
  %366 = add i32 %365, %200
  %367 = add i32 %366, %201
  %368 = add i32 %367, %202
  %369 = add i32 %368, %205
  %370 = add i32 %369, %206
  %371 = sub i32 %370, %207
  %372 = add i32 %371, %208
  %373 = add i32 %372, %209
  %374 = add i32 %373, %210
  %375 = sub i32 %374, %211
  %376 = add i32 %375, %68
  %377 = sub i32 %376, %212
  %378 = add i32 %377, %213
  %379 = add i32 %378, %214
  %380 = sub i32 %379, %215
  %381 = sub i32 %380, %216
  %382 = add i32 %381, %219
  %383 = sub i32 %382, %221
  %384 = sub i32 %383, %224
  %385 = add i32 %384, %228
  %386 = add i32 %385, %20
  %387 = sub i32 %386, %34
  %388 = sub i32 %387, %47
  %389 = sub i32 %388, %52
  %390 = add i32 %389, %67
  %391 = add i32 %390, %70
  %392 = sub i32 %391, %83
  %393 = add i32 %392, %90
  %394 = add i32 %393, %99
  %395 = add i32 %394, %104
  %396 = sub i32 %395, %115
  %397 = sub i32 %396, %122
  %398 = sub i32 %397, %124
  %399 = sub i32 %398, %127
  %400 = sub i32 %399, %130
  %401 = sub i32 %400, %133
  %402 = sub i32 %401, %144
  %403 = sub i32 %402, %151
  %404 = sub i32 %403, %162
  %405 = sub i32 %404, %170
  %406 = sub i32 %405, %182
  %407 = sub i32 %406, %204
  %408 = add i32 %407, %217
  %409 = sub i32 %408, %223
  %410 = sub i32 %409, %226
  %411 = add i32 %410, %230
  %412 = add i32 %411, %232
  %413 = sub i32 %412, %234
  %414 = add i32 %413, %236
  %415 = add i32 %414, %238
  %416 = add i32 %415, %240
  %417 = add i32 %416, %241
  %418 = sub i32 %417, %21
  %419 = add i32 %418, %249
  %420 = add i32 %419, %245
  %421 = add i32 %420, %247
  %422 = add i32 %421, %260
  %423 = icmp eq i32 %18, %422
  %424 = select i1 %423, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %425 = tail call i32 @puts(i8* nonnull dereferenceable(1) %424)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
