digraph "DFG for'crackme' function" {
	Node0x156da30[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x156daa0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x156db60[shape=record, label="  %5 = shl i32 %1, 1"];
	Node0x156dbd0[shape=record, label="  %6 = sub i32 %5, %4"];
	Node0x156dc40[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x156dce0[shape=record, label="  %8 = mul i32 %7, -3"];
	Node0x156dd50[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x156ddc0[shape=record, label="  %10 = add i32 %1, 1"];
	Node0x156de30[shape=record, label="  %11 = and i32 %3, %0"];
	Node0x156ded0[shape=record, label="  %12 = shl i32 %4, 2"];
	Node0x156df70[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x156dfe0[shape=record, label="  %14 = shl i32 %11, 1"];
	Node0x156e050[shape=record, label="  %15 = add i32 %9, %10"];
	Node0x156e0c0[shape=record, label="  %16 = add i32 %15, %8"];
	Node0x156e130[shape=record, label="  %17 = add i32 %16, %14"];
	Node0x156e1a0[shape=record, label="  %18 = add i32 %17, %13"];
	Node0x156e210[shape=record, label="  %19 = icmp eq i32 %6, %18"];
	Node0x150e268[shape=record, label="  %20 = select i1 %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x156e6b0[shape=record, label="  %21 = tail call i32 @puts(i8* nonnull dereferenceable(1) %20)"];
	Node0x156e700[shape=record, label="  ret void"];
	Node0x156da30 -> Node0x156daa0;
	Node0x156daa0 -> Node0x156db60;
	Node0x156db60 -> Node0x156dbd0;
	Node0x156dbd0 -> Node0x156dc40;
	Node0x156dc40 -> Node0x156dce0;
	Node0x156dce0 -> Node0x156dd50;
	Node0x156dd50 -> Node0x156ddc0;
	Node0x156ddc0 -> Node0x156de30;
	Node0x156de30 -> Node0x156ded0;
	Node0x156ded0 -> Node0x156df70;
	Node0x156df70 -> Node0x156dfe0;
	Node0x156dfe0 -> Node0x156e050;
	Node0x156e050 -> Node0x156e0c0;
	Node0x156e0c0 -> Node0x156e130;
	Node0x156e130 -> Node0x156e1a0;
	Node0x156e1a0 -> Node0x156e210;
	Node0x156e210 -> Node0x150e268;
	Node0x150e268 -> Node0x156e6b0;
	Node0x156e6b0 -> Node0x156e700;
edge [color=red]
	Node0x156da30 -> Node0x156daa0;
	Node0x156db60 -> Node0x156dbd0;
	Node0x156daa0 -> Node0x156dbd0;
	Node0x156dc40 -> Node0x156dce0;
	Node0x156da30 -> Node0x156de30;
	Node0x156daa0 -> Node0x156ded0;
	Node0x156ded0 -> Node0x156df70;
	Node0x156de30 -> Node0x156dfe0;
	Node0x156dd50 -> Node0x156e050;
	Node0x156ddc0 -> Node0x156e050;
	Node0x156e050 -> Node0x156e0c0;
	Node0x156dce0 -> Node0x156e0c0;
	Node0x156e0c0 -> Node0x156e130;
	Node0x156dfe0 -> Node0x156e130;
	Node0x156e130 -> Node0x156e1a0;
	Node0x156df70 -> Node0x156e1a0;
	Node0x156dbd0 -> Node0x156e210;
	Node0x156e1a0 -> Node0x156e210;
	Node0x156e210 -> Node0x150e268;
	Node0x150e268 -> Node0x156e6b0;
}
