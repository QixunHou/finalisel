; ModuleID = '../.././c_source_file/1934_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1934_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = mul i32 %4, -3
  %7 = xor i32 %2, %0
  %8 = and i32 %7, %1
  %9 = add i32 %6, %8
  %10 = xor i32 %4, %3
  %11 = xor i32 %10, -1
  %12 = or i32 %4, %3
  %13 = shl i32 %12, 2
  %14 = xor i32 %4, -1
  %15 = or i32 %14, %3
  %16 = and i32 %14, %3
  %17 = shl i32 %3, 1
  %18 = xor i32 %12, -1
  %19 = xor i32 %15, -1
  %20 = and i32 %4, %3
  %21 = xor i32 %7, -1
  %22 = or i32 %21, %1
  %23 = xor i32 %0, -1
  %24 = and i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = and i32 %25, %23
  %27 = or i32 %2, %1
  %28 = or i32 %27, %0
  %29 = shl i32 %28, 1
  %30 = xor i32 %1, -1
  %31 = and i32 %30, %0
  %32 = xor i32 %31, -1
  %33 = and i32 %32, %2
  %34 = and i32 %2, %0
  %35 = xor i32 %2, -1
  %36 = and i32 %35, %1
  %37 = xor i32 %36, -1
  %38 = xor i32 %34, %37
  %39 = or i32 %1, %0
  %40 = xor i32 %2, %1
  %41 = and i32 %40, %39
  %42 = xor i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %34, %43
  %45 = and i32 %1, %0
  %46 = xor i32 %40, -1
  %47 = or i32 %45, %46
  %48 = add i32 %40, 1
  %49 = xor i32 %39, -1
  %50 = or i32 %7, %49
  %51 = xor i32 %27, -1
  %52 = or i32 %51, %23
  %53 = xor i32 %37, %0
  %54 = or i32 %31, %46
  %55 = xor i32 %34, %39
  %56 = and i32 %21, %43
  %57 = and i32 %25, %0
  %58 = xor i32 %34, %1
  %59 = and i32 %42, %2
  %60 = and i32 %37, %0
  %61 = or i32 %40, %45
  %62 = or i32 %46, %0
  %63 = and i32 %40, %0
  %64 = shl i32 %63, 1
  %65 = shl i32 %43, 1
  %66 = and i32 %24, %0
  %67 = and i32 %27, %23
  %68 = or i32 %66, %67
  %69 = or i32 %34, %30
  %70 = shl i32 %69, 1
  %71 = or i32 %35, %43
  %72 = xor i32 %34, -1
  %73 = and i32 %72, %30
  %74 = or i32 %45, %21
  %75 = or i32 %21, %30
  %76 = and i32 %35, %0
  %77 = xor i32 %76, -1
  %78 = and i32 %42, %77
  %79 = or i32 %34, %49
  %80 = or i32 %35, %0
  %81 = xor i32 %80, %1
  %82 = and i32 %30, %2
  %83 = and i32 %82, %23
  %84 = or i32 %30, %2
  %85 = and i32 %84, %0
  %86 = or i32 %83, %85
  %87 = and i32 %27, %0
  %88 = or i32 %30, %0
  %89 = xor i32 %88, %2
  %90 = shl i32 %89, 1
  %91 = and i32 %39, %21
  %92 = and i32 %7, %88
  %93 = or i32 %7, %42
  %94 = or i32 %27, %23
  %95 = or i32 %35, %1
  %96 = xor i32 %95, %45
  %97 = xor i32 %85, -1
  %98 = xor i32 %83, %97
  %99 = xor i32 %46, %0
  %100 = and i32 %82, %0
  %101 = xor i32 %40, %23
  %102 = xor i32 %100, %101
  %103 = and i32 %88, %21
  %104 = xor i32 %32, %2
  %105 = or i32 %46, %49
  %106 = and i32 %80, %43
  %107 = or i32 %2, %0
  %108 = xor i32 %107, %1
  %109 = xor i32 %107, %45
  %110 = xor i32 %88, -1
  %111 = add i32 %88, 1
  %112 = or i32 %43, %2
  %113 = or i32 %35, %110
  %114 = xor i32 %45, -1
  %115 = and i32 %21, %114
  %116 = xor i32 %107, -1
  %117 = or i32 %42, %116
  %118 = shl i32 %117, 1
  %119 = or i32 %7, %31
  %120 = and i32 %72, %43
  %121 = and i32 %7, %32
  %122 = and i32 %114, %2
  %123 = xor i32 %34, %27
  %124 = xor i32 %95, -1
  %125 = xor i32 %124, %0
  %126 = shl i32 %125, 2
  %127 = or i32 %34, %42
  %128 = and i32 %42, %21
  %129 = xor i32 %31, %25
  %130 = or i32 %42, %21
  %131 = or i32 %40, %31
  %132 = or i32 %45, %116
  %133 = and i32 %72, %1
  %134 = or i32 %36, %23
  %135 = and i32 %107, %1
  %136 = and i32 %84, %23
  %137 = or i32 %100, %136
  %138 = and i32 %21, %1
  %139 = and i32 %80, %30
  %140 = and i32 %24, %23
  %141 = or i32 %140, %63
  %142 = xor i32 %31, %2
  %143 = and i32 %88, %2
  %144 = and i32 %107, %30
  %145 = or i32 %24, %0
  %146 = or i32 %40, %23
  %147 = xor i32 %83, %146
  %148 = xor i32 %76, %25
  %149 = or i32 %21, %110
  %150 = xor i32 %100, -1
  %151 = xor i32 %136, %150
  %152 = or i32 %116, %1
  %153 = or i32 %7, %43
  %154 = and i32 %39, %2
  %155 = or i32 %76, %30
  %156 = shl i32 %155, 1
  %157 = xor i32 %49, %2
  %158 = or i32 %40, %110
  %159 = and i32 %88, %35
  %160 = and i32 %46, %114
  %161 = xor i32 %31, %37
  %162 = and i32 %43, %2
  %163 = or i32 %42, %2
  %164 = xor i32 %140, -1
  %165 = xor i32 %87, %164
  %166 = or i32 %76, %43
  %167 = xor i32 %63, %164
  %168 = and i32 %7, %42
  %169 = and i32 %7, %30
  %170 = and i32 %39, %46
  %171 = shl i32 %88, 1
  %172 = and i32 %40, %23
  %173 = xor i32 %80, -1
  %174 = xor i32 %173, %1
  %175 = and i32 %77, %30
  %176 = or i32 %95, %0
  %177 = xor i32 %27, %45
  %178 = or i32 %49, %2
  %179 = shl i32 %178, 1
  %180 = xor i32 %95, %0
  %181 = or i32 %124, %0
  %182 = or i32 %36, %0
  %183 = shl i32 %182, 1
  %184 = and i32 %40, %32
  %185 = or i32 %37, %23
  %186 = shl i32 %185, 2
  %187 = add i32 %80, 1
  %188 = or i32 %45, %2
  %189 = or i32 %35, %49
  %190 = and i32 %7, %43
  %191 = or i32 %36, %31
  %192 = xor i32 %36, %0
  %193 = xor i32 %76, %1
  %194 = shl i32 %193, 1
  %195 = or i32 %46, %23
  %196 = and i32 %107, %42
  %197 = and i32 %88, %46
  %198 = and i32 %46, %0
  %199 = xor i32 %27, %0
  %200 = xor i32 %66, -1
  %201 = xor i32 %199, %200
  %202 = or i32 %25, %23
  %203 = or i32 %40, %0
  %204 = xor i32 %203, -1
  %205 = or i32 %100, %204
  %206 = or i32 %66, %172
  %207 = or i32 %31, %2
  %208 = and i32 %40, %88
  %209 = and i32 %77, %43
  %210 = and i32 %80, %42
  %211 = shl i32 %210, 1
  %212 = and i32 %46, %23
  %213 = and i32 %107, %43
  %214 = xor i32 %24, %0
  %215 = or i32 %24, %23
  %216 = add i32 %39, 1
  %217 = or i32 %42, %173
  %218 = or i32 %173, %1
  %219 = xor i32 %51, %0
  %220 = or i32 %21, %43
  %221 = xor i32 %76, %95
  %222 = and i32 %37, %23
  %223 = shl i32 %222, 1
  %224 = xor i32 %84, %23
  %225 = xor i32 %224, %100
  %226 = or i32 %76, %42
  %227 = shl i32 %226, 1
  %228 = and i32 %95, %23
  %229 = or i32 %76, %124
  %230 = and i32 %42, %72
  %231 = or i32 %76, %1
  %232 = or i32 %45, %124
  %233 = xor i32 %110, %2
  %234 = shl i32 %233, 2
  %235 = or i32 %66, %199
  %236 = xor i32 %34, %88
  %237 = and i32 %35, %43
  %238 = and i32 %42, %35
  %239 = or i32 %42, %35
  %240 = xor i32 %67, %200
  %241 = or i32 %31, %21
  %242 = and i32 %7, %39
  %243 = xor i32 %114, %2
  %244 = or i32 %66, %101
  %245 = or i32 %37, %0
  %246 = and i32 %77, %1
  %247 = or i32 %116, %30
  %248 = add i32 %36, 1
  %249 = and i32 %35, %114
  %250 = or i32 %7, %1
  %251 = shl i32 %25, 1
  %252 = or i32 %40, %49
  %253 = or i32 %116, %43
  %254 = and i32 %40, %114
  %255 = or i32 %173, %43
  %256 = or i32 %46, %110
  %257 = or i32 %34, %110
  %258 = or i32 %76, %24
  %259 = xor i32 %72, %1
  %260 = or i32 %124, %23
  %261 = and i32 %51, %23
  %262 = and i32 %36, %23
  %263 = shl i32 %262, 1
  %264 = and i32 %51, %0
  %265 = shl i32 %264, 1
  %266 = and i32 %36, %0
  %267 = mul i32 %140, -12
  %268 = and i32 %124, %0
  %269 = shl i32 %268, 3
  %270 = add i32 %35, %0
  %271 = add i32 %270, %116
  %272 = add i32 %271, %207
  %273 = add i32 %272, %77
  %274 = add i32 %273, %142
  %275 = add i32 %274, %242
  %276 = add i32 %275, %184
  %277 = add i32 %276, %177
  %278 = add i32 %277, %158
  %279 = add i32 %278, %109
  %280 = add i32 %279, %94
  %281 = add i32 %280, %73
  %282 = add i32 %281, %50
  %283 = add i32 %282, %41
  %284 = add i32 %283, %86
  %285 = shl i32 %284, 1
  %286 = add i32 %195, %209
  %287 = add i32 %286, %103
  %288 = add i32 %287, %18
  %289 = sub i32 %288, %244
  %290 = mul i32 %289, 3
  %291 = add i32 %220, %252
  %292 = add i32 %291, %215
  %293 = sub i32 %26, %292
  %294 = add i32 %293, %147
  %295 = mul i32 %294, 5
  %296 = add i32 %66, %19
  %297 = add i32 %296, %20
  %298 = mul i32 %297, 7
  %299 = add i32 %16, %266
  %300 = mul i32 %299, 11
  %301 = sub i32 5, %0
  %302 = sub i32 %301, %1
  %303 = add i32 %302, %30
  %304 = add i32 %303, %111
  %305 = add i32 %304, %2
  %306 = sub i32 %305, %31
  %307 = sub i32 %306, %45
  %308 = add i32 %307, %216
  %309 = add i32 %308, %32
  %310 = sub i32 %309, %42
  %311 = sub i32 %310, %3
  %312 = add i32 %311, %33
  %313 = add i32 %312, %48
  %314 = sub i32 %313, %36
  %315 = add i32 %314, %59
  %316 = sub i32 %315, %65
  %317 = add i32 %316, %71
  %318 = add i32 %317, %104
  %319 = add i32 %318, %107
  %320 = add i32 %319, %112
  %321 = sub i32 %320, %113
  %322 = sub i32 %321, %122
  %323 = sub i32 %322, %143
  %324 = sub i32 %323, %154
  %325 = sub i32 %324, %157
  %326 = sub i32 %325, %159
  %327 = add i32 %326, %80
  %328 = add i32 %327, %51
  %329 = sub i32 %328, %162
  %330 = add i32 %329, %163
  %331 = add i32 %330, %124
  %332 = sub i32 %331, %171
  %333 = add i32 %332, %24
  %334 = add i32 %333, %7
  %335 = add i32 %334, %187
  %336 = sub i32 %335, %188
  %337 = add i32 %336, %189
  %338 = add i32 %337, %40
  %339 = add i32 %338, %237
  %340 = sub i32 %339, %238
  %341 = add i32 %340, %239
  %342 = add i32 %341, %243
  %343 = add i32 %342, %248
  %344 = sub i32 %343, %249
  %345 = sub i32 %344, %17
  %346 = sub i32 %345, %22
  %347 = add i32 %346, %38
  %348 = add i32 %347, %44
  %349 = add i32 %348, %47
  %350 = add i32 %349, %52
  %351 = add i32 %350, %53
  %352 = sub i32 %351, %54
  %353 = add i32 %352, %55
  %354 = sub i32 %353, %56
  %355 = sub i32 %354, %57
  %356 = sub i32 %355, %58
  %357 = add i32 %356, %60
  %358 = sub i32 %357, %61
  %359 = add i32 %358, %62
  %360 = sub i32 %359, %74
  %361 = sub i32 %360, %75
  %362 = add i32 %361, %78
  %363 = add i32 %362, %79
  %364 = sub i32 %363, %81
  %365 = add i32 %364, %87
  %366 = sub i32 %365, %90
  %367 = add i32 %366, %91
  %368 = sub i32 %367, %92
  %369 = add i32 %368, %93
  %370 = add i32 %369, %96
  %371 = add i32 %370, %99
  %372 = add i32 %371, %105
  %373 = add i32 %372, %106
  %374 = sub i32 %373, %108
  %375 = sub i32 %374, %115
  %376 = add i32 %375, %119
  %377 = add i32 %376, %120
  %378 = sub i32 %377, %121
  %379 = add i32 %378, %123
  %380 = add i32 %379, %127
  %381 = add i32 %380, %128
  %382 = sub i32 %381, %129
  %383 = sub i32 %382, %130
  %384 = add i32 %383, %131
  %385 = sub i32 %384, %132
  %386 = add i32 %385, %133
  %387 = sub i32 %386, %134
  %388 = sub i32 %387, %135
  %389 = add i32 %388, %138
  %390 = sub i32 %389, %139
  %391 = add i32 %390, %144
  %392 = sub i32 %391, %145
  %393 = sub i32 %392, %148
  %394 = add i32 %393, %149
  %395 = add i32 %394, %152
  %396 = sub i32 %395, %153
  %397 = add i32 %396, %160
  %398 = sub i32 %397, %161
  %399 = sub i32 %398, %166
  %400 = sub i32 %399, %168
  %401 = add i32 %400, %169
  %402 = add i32 %401, %170
  %403 = sub i32 %402, %172
  %404 = add i32 %403, %174
  %405 = sub i32 %404, %175
  %406 = sub i32 %405, %176
  %407 = sub i32 %406, %179
  %408 = sub i32 %407, %180
  %409 = sub i32 %408, %181
  %410 = add i32 %409, %190
  %411 = add i32 %410, %191
  %412 = add i32 %411, %192
  %413 = sub i32 %412, %196
  %414 = add i32 %413, %197
  %415 = add i32 %414, %198
  %416 = sub i32 %415, %202
  %417 = sub i32 %416, %208
  %418 = sub i32 %417, %212
  %419 = sub i32 %418, %213
  %420 = sub i32 %419, %214
  %421 = add i32 %420, %217
  %422 = sub i32 %421, %218
  %423 = add i32 %422, %219
  %424 = add i32 %423, %221
  %425 = sub i32 %424, %228
  %426 = sub i32 %425, %229
  %427 = add i32 %426, %230
  %428 = add i32 %427, %231
  %429 = add i32 %428, %232
  %430 = sub i32 %429, %234
  %431 = add i32 %430, %236
  %432 = sub i32 %431, %241
  %433 = add i32 %432, %245
  %434 = add i32 %433, %246
  %435 = add i32 %434, %247
  %436 = sub i32 %435, %250
  %437 = sub i32 %436, %251
  %438 = sub i32 %437, %253
  %439 = sub i32 %438, %254
  %440 = add i32 %439, %255
  %441 = add i32 %440, %146
  %442 = add i32 %441, %256
  %443 = add i32 %442, %199
  %444 = add i32 %443, %257
  %445 = sub i32 %444, %258
  %446 = sub i32 %445, %259
  %447 = sub i32 %446, %260
  %448 = sub i32 %447, %261
  %449 = add i32 %448, %11
  %450 = add i32 %449, %15
  %451 = sub i32 %450, %10
  %452 = add i32 %451, %16
  %453 = sub i32 %452, %29
  %454 = sub i32 %453, %64
  %455 = add i32 %454, %68
  %456 = sub i32 %455, %70
  %457 = sub i32 %456, %98
  %458 = add i32 %457, %102
  %459 = sub i32 %458, %118
  %460 = sub i32 %459, %126
  %461 = sub i32 %460, %137
  %462 = sub i32 %461, %141
  %463 = sub i32 %462, %151
  %464 = sub i32 %463, %156
  %465 = sub i32 %464, %165
  %466 = sub i32 %465, %167
  %467 = sub i32 %466, %183
  %468 = add i32 %467, %186
  %469 = sub i32 %468, %194
  %470 = add i32 %469, %201
  %471 = add i32 %470, %205
  %472 = add i32 %471, %206
  %473 = sub i32 %472, %211
  %474 = sub i32 %473, %223
  %475 = sub i32 %474, %225
  %476 = sub i32 %475, %227
  %477 = sub i32 %476, %235
  %478 = add i32 %477, %240
  %479 = sub i32 %478, %263
  %480 = sub i32 %479, %265
  %481 = add i32 %480, %267
  %482 = add i32 %481, %269
  %483 = sub i32 %482, %13
  %484 = add i32 %483, %300
  %485 = add i32 %484, %298
  %486 = add i32 %485, %290
  %487 = add i32 %486, %295
  %488 = add i32 %487, %285
  %489 = icmp eq i32 %9, %488
  %490 = select i1 %489, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %491 = tail call i32 @puts(i8* nonnull dereferenceable(1) %490)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
