digraph "DFG for'crackme' function" {
	Node0x2127bb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x2127c20[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x2127ce0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x2127d50[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x2127dc0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x2127e30[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x2127ea0[shape=record, label="  %9 = add i32 %6, %8"];
	Node0x2127f10[shape=record, label="  %10 = or i32 %3, %0"];
	Node0x2127f80[shape=record, label="  %11 = xor i32 %1, %0"];
	Node0x2127ff0[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x2128090[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0x2128100[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x2128170[shape=record, label="  %15 = shl i32 %10, 1"];
	Node0x21281e0[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x2128250[shape=record, label="  %17 = shl i32 %4, 1"];
	Node0x21282c0[shape=record, label="  %18 = sub i32 %11, %1"];
	Node0x2128330[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x21283a0[shape=record, label="  %20 = sub i32 %10, %0"];
	Node0x2128410[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x2128480[shape=record, label="  %22 = sub i32 %21, %7"];
	Node0x21284f0[shape=record, label="  %23 = sub i32 %22, %17"];
	Node0x2128560[shape=record, label="  %24 = sub i32 %23, %14"];
	Node0x21285d0[shape=record, label="  %25 = sub i32 %24, %16"];
	Node0x2128640[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x21286b0[shape=record, label="  %27 = icmp eq i32 %9, %26"];
	Node0x20c8268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2128b50[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x2128ba0[shape=record, label="  ret void"];
	Node0x2127bb0 -> Node0x2127c20;
	Node0x2127c20 -> Node0x2127ce0;
	Node0x2127ce0 -> Node0x2127d50;
	Node0x2127d50 -> Node0x2127dc0;
	Node0x2127dc0 -> Node0x2127e30;
	Node0x2127e30 -> Node0x2127ea0;
	Node0x2127ea0 -> Node0x2127f10;
	Node0x2127f10 -> Node0x2127f80;
	Node0x2127f80 -> Node0x2127ff0;
	Node0x2127ff0 -> Node0x2128090;
	Node0x2128090 -> Node0x2128100;
	Node0x2128100 -> Node0x2128170;
	Node0x2128170 -> Node0x21281e0;
	Node0x21281e0 -> Node0x2128250;
	Node0x2128250 -> Node0x21282c0;
	Node0x21282c0 -> Node0x2128330;
	Node0x2128330 -> Node0x21283a0;
	Node0x21283a0 -> Node0x2128410;
	Node0x2128410 -> Node0x2128480;
	Node0x2128480 -> Node0x21284f0;
	Node0x21284f0 -> Node0x2128560;
	Node0x2128560 -> Node0x21285d0;
	Node0x21285d0 -> Node0x2128640;
	Node0x2128640 -> Node0x21286b0;
	Node0x21286b0 -> Node0x20c8268;
	Node0x20c8268 -> Node0x2128b50;
	Node0x2128b50 -> Node0x2128ba0;
edge [color=red]
	Node0x2127bb0 -> Node0x2127c20;
	Node0x2127c20 -> Node0x2127ce0;
	Node0x2127ce0 -> Node0x2127d50;
	Node0x2127dc0 -> Node0x2127e30;
	Node0x2127d50 -> Node0x2127ea0;
	Node0x2127e30 -> Node0x2127ea0;
	Node0x2127bb0 -> Node0x2127f10;
	Node0x2127ff0 -> Node0x2128090;
	Node0x2128090 -> Node0x2128100;
	Node0x2127f10 -> Node0x2128170;
	Node0x2128170 -> Node0x21281e0;
	Node0x2127c20 -> Node0x2128250;
	Node0x2127f80 -> Node0x21282c0;
	Node0x21282c0 -> Node0x2128330;
	Node0x2127f10 -> Node0x21283a0;
	Node0x21283a0 -> Node0x2128410;
	Node0x2127ff0 -> Node0x2128410;
	Node0x2128410 -> Node0x2128480;
	Node0x2127dc0 -> Node0x2128480;
	Node0x2128480 -> Node0x21284f0;
	Node0x2128250 -> Node0x21284f0;
	Node0x21284f0 -> Node0x2128560;
	Node0x2128100 -> Node0x2128560;
	Node0x2128560 -> Node0x21285d0;
	Node0x21281e0 -> Node0x21285d0;
	Node0x21285d0 -> Node0x2128640;
	Node0x2128330 -> Node0x2128640;
	Node0x2127ea0 -> Node0x21286b0;
	Node0x2128640 -> Node0x21286b0;
	Node0x21286b0 -> Node0x20c8268;
	Node0x20c8268 -> Node0x2128b50;
}
