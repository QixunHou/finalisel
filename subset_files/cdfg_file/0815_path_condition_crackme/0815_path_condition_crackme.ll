; ModuleID = '../.././c_source_file/0815_path_condition_crackme.c'
source_filename = "../.././c_source_file/0815_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %2, -1
  %9 = xor i32 %1, %0
  %10 = or i32 %9, %8
  %11 = or i32 %1, %0
  %12 = and i32 %11, %2
  %13 = sub i32 %12, %10
  %14 = add i32 %13, %7
  %15 = xor i32 %4, %3
  %16 = and i32 %4, %3
  %17 = xor i32 %16, -1
  %18 = xor i32 %3, -1
  %19 = or i32 %18, %4
  %20 = or i32 %4, %3
  %21 = xor i32 %20, -1
  %22 = xor i32 %7, -1
  %23 = and i32 %1, %0
  %24 = or i32 %8, %0
  %25 = xor i32 %24, %23
  %26 = and i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = xor i32 %1, -1
  %29 = and i32 %28, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %30, %2
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %33, %1
  %35 = or i32 %2, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %8, %0
  %38 = and i32 %2, %1
  %39 = or i32 %37, %38
  %40 = shl i32 %39, 1
  %41 = xor i32 %0, -1
  %42 = and i32 %8, %1
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %41
  %45 = or i32 %8, %1
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %41
  %48 = or i32 %43, %0
  %49 = or i32 %28, %0
  %50 = and i32 %49, %2
  %51 = xor i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = or i32 %52, %0
  %54 = or i32 %2, %1
  %55 = or i32 %54, %41
  %56 = add i32 %29, 1
  %57 = xor i32 %35, %23
  %58 = and i32 %32, %11
  %59 = or i32 %42, %0
  %60 = xor i32 %26, %49
  %61 = or i32 %54, %0
  %62 = xor i32 %11, %2
  %63 = and i32 %32, %28
  %64 = xor i32 %29, %2
  %65 = shl i32 %64, 1
  %66 = xor i32 %49, %2
  %67 = or i32 %38, %29
  %68 = xor i32 %9, -1
  %69 = or i32 %32, %68
  %70 = xor i32 %49, -1
  %71 = or i32 %8, %70
  %72 = and i32 %28, %2
  %73 = and i32 %72, %0
  %74 = xor i32 %51, %0
  %75 = xor i32 %74, -1
  %76 = xor i32 %73, %75
  %77 = shl i32 %76, 2
  %78 = xor i32 %46, %0
  %79 = or i32 %26, %68
  %80 = xor i32 %54, -1
  %81 = or i32 %80, %0
  %82 = or i32 %42, %41
  %83 = and i32 %51, %30
  %84 = and i32 %33, %68
  %85 = and i32 %33, %30
  %86 = xor i32 %37, -1
  %87 = or i32 %70, %2
  %88 = or i32 %23, %80
  %89 = and i32 %24, %1
  %90 = or i32 %37, %68
  %91 = xor i32 %11, -1
  %92 = or i32 %8, %91
  %93 = xor i32 %38, -1
  %94 = or i32 %93, %41
  %95 = and i32 %35, %28
  %96 = or i32 %23, %46
  %97 = xor i32 %35, %1
  %98 = and i32 %68, %2
  %99 = and i32 %52, %41
  %100 = and i32 %38, %41
  %101 = and i32 %54, %0
  %102 = xor i32 %101, -1
  %103 = xor i32 %100, %102
  %104 = and i32 %51, %11
  %105 = and i32 %9, %8
  %106 = and i32 %38, %0
  %107 = or i32 %106, %75
  %108 = and i32 %27, %1
  %109 = xor i32 %29, %93
  %110 = shl i32 %109, 1
  %111 = and i32 %11, %52
  %112 = xor i32 %36, %1
  %113 = shl i32 %112, 1
  %114 = and i32 %27, %68
  %115 = or i32 %51, %91
  %116 = or i32 %36, %68
  %117 = or i32 %46, %0
  %118 = and i32 %86, %28
  %119 = or i32 %32, %91
  %120 = shl i32 %54, 1
  %121 = and i32 %51, %41
  %122 = or i32 %106, %121
  %123 = or i32 %51, %41
  %124 = and i32 %9, %2
  %125 = shl i32 %124, 1
  %126 = and i32 %8, %30
  %127 = xor i32 %37, %45
  %128 = xor i32 %26, %54
  %129 = xor i32 %52, %0
  %130 = xor i32 %23, -1
  %131 = and i32 %130, %2
  %132 = xor i32 %54, %0
  %133 = xor i32 %24, -1
  %134 = or i32 %23, %133
  %135 = shl i32 %134, 1
  %136 = or i32 %80, %41
  %137 = xor i32 %43, %0
  %138 = or i32 %33, %68
  %139 = or i32 %52, %91
  %140 = xor i32 %38, %0
  %141 = add i32 %54, 1
  %142 = or i32 %9, %2
  %143 = xor i32 %45, %23
  %144 = and i32 %33, %28
  %145 = or i32 %51, %23
  %146 = and i32 %9, %86
  %147 = or i32 %28, %2
  %148 = xor i32 %147, -1
  %149 = or i32 %148, %0
  %150 = xor i32 %73, %149
  %151 = and i32 %72, %41
  %152 = and i32 %147, %0
  %153 = or i32 %151, %152
  %154 = shl i32 %8, 1
  %155 = shl i32 %23, 1
  %156 = or i32 %23, %36
  %157 = shl i32 %26, 1
  %158 = add i32 %1, 1
  %159 = and i32 %52, %130
  %160 = xor i32 %42, %0
  %161 = or i32 %32, %9
  %162 = or i32 %133, %68
  %163 = add i32 %23, 1
  %164 = or i32 %26, %28
  %165 = or i32 %23, %8
  %166 = xor i32 %106, %74
  %167 = or i32 %29, %33
  %168 = or i32 %36, %1
  %169 = or i32 %8, %68
  %170 = shl i32 %169, 1
  %171 = or i32 %51, %29
  %172 = and i32 %24, %9
  %173 = or i32 %26, %91
  %174 = xor i32 %130, %2
  %175 = and i32 %35, %1
  %176 = or i32 %133, %28
  %177 = xor i32 %24, %1
  %178 = or i32 %23, %2
  %179 = and i32 %32, %49
  %180 = or i32 %9, %133
  %181 = and i32 %32, %30
  %182 = or i32 %37, %1
  %183 = or i32 %33, %91
  %184 = and i32 %11, %8
  %185 = shl i32 %184, 1
  %186 = and i32 %93, %0
  %187 = xor i32 %37, %93
  %188 = or i32 %68, %2
  %189 = and i32 %49, %8
  %190 = and i32 %33, %130
  %191 = and i32 %86, %68
  %192 = and i32 %27, %28
  %193 = and i32 %30, %2
  %194 = shl i32 %193, 1
  %195 = xor i32 %123, -1
  %196 = or i32 %151, %195
  %197 = or i32 %73, %74
  %198 = add i32 %32, 1
  %199 = xor i32 %80, %0
  %200 = xor i32 %147, %41
  %201 = xor i32 %200, %73
  %202 = and i32 %24, %28
  %203 = xor i32 %27, %1
  %204 = or i32 %93, %0
  %205 = and i32 %43, %41
  %206 = or i32 %51, %0
  %207 = xor i32 %206, 2147483647
  %208 = or i32 %207, %73
  %209 = shl i32 %208, 1
  %210 = and i32 %32, %1
  %211 = or i32 %36, %28
  %212 = or i32 %52, %70
  %213 = shl i32 %212, 1
  %214 = and i32 %32, %9
  %215 = and i32 %80, %41
  %216 = and i32 %42, %41
  %217 = shl i32 %216, 4
  %218 = and i32 %80, %0
  %219 = shl i32 %218, 4
  %220 = and i32 %42, %0
  %221 = and i32 %46, %41
  %222 = mul i32 %221, -25
  %223 = shl i32 %100, 3
  %224 = and i32 %46, %0
  %225 = add i32 %133, %41
  %226 = add i32 %225, %98
  %227 = add i32 %226, %92
  %228 = add i32 %227, %62
  %229 = add i32 %228, %203
  %230 = add i32 %229, %180
  %231 = add i32 %230, %179
  %232 = add i32 %231, %177
  %233 = add i32 %232, %101
  %234 = add i32 %233, %162
  %235 = add i32 %234, %132
  %236 = add i32 %235, %129
  %237 = add i32 %236, %117
  %238 = add i32 %237, %115
  %239 = add i32 %238, %99
  %240 = add i32 %239, %63
  %241 = add i32 %240, %197
  %242 = shl i32 %241, 1
  %243 = add i32 %220, %86
  %244 = sub i32 %243, %106
  %245 = add i32 %244, %214
  %246 = mul i32 %245, 5
  %247 = add i32 %224, %215
  %248 = mul i32 %247, -18
  %249 = add i32 %16, %211
  %250 = shl i32 %249, 2
  %251 = add i32 %107, %191
  %252 = mul i32 %251, 3
  %253 = add i32 %158, %0
  %254 = add i32 %253, %9
  %255 = add i32 %254, %56
  %256 = add i32 %255, %49
  %257 = add i32 %256, %163
  %258 = sub i32 %257, %11
  %259 = add i32 %258, %27
  %260 = add i32 %259, %31
  %261 = add i32 %260, 1
  %262 = sub i32 %261, %50
  %263 = sub i32 %262, %66
  %264 = add i32 %263, %71
  %265 = sub i32 %264, %87
  %266 = sub i32 %265, %105
  %267 = sub i32 %266, %126
  %268 = add i32 %267, %131
  %269 = add i32 %268, %141
  %270 = sub i32 %269, %142
  %271 = sub i32 %270, %154
  %272 = sub i32 %271, %155
  %273 = sub i32 %272, %32
  %274 = add i32 %273, %165
  %275 = sub i32 %274, %174
  %276 = sub i32 %275, %178
  %277 = add i32 %276, %188
  %278 = sub i32 %277, %189
  %279 = add i32 %278, %52
  %280 = add i32 %279, %198
  %281 = add i32 %280, %6
  %282 = add i32 %281, %25
  %283 = sub i32 %282, %34
  %284 = add i32 %283, %44
  %285 = add i32 %284, %47
  %286 = sub i32 %285, %48
  %287 = sub i32 %286, %53
  %288 = add i32 %287, %55
  %289 = sub i32 %288, %57
  %290 = add i32 %289, %58
  %291 = add i32 %290, %59
  %292 = sub i32 %291, %60
  %293 = sub i32 %292, %61
  %294 = sub i32 %293, %65
  %295 = add i32 %294, %67
  %296 = add i32 %295, %69
  %297 = sub i32 %296, %78
  %298 = sub i32 %297, %79
  %299 = sub i32 %298, %81
  %300 = sub i32 %299, %82
  %301 = add i32 %300, %83
  %302 = sub i32 %301, %84
  %303 = add i32 %302, %85
  %304 = sub i32 %303, %88
  %305 = sub i32 %304, %89
  %306 = sub i32 %305, %90
  %307 = sub i32 %306, %94
  %308 = add i32 %307, %95
  %309 = add i32 %308, %96
  %310 = sub i32 %309, %97
  %311 = sub i32 %310, %104
  %312 = sub i32 %311, %108
  %313 = add i32 %312, %111
  %314 = sub i32 %313, %114
  %315 = add i32 %314, %116
  %316 = sub i32 %315, %118
  %317 = add i32 %316, %119
  %318 = sub i32 %317, %120
  %319 = add i32 %318, %123
  %320 = sub i32 %319, %125
  %321 = add i32 %320, %127
  %322 = sub i32 %321, %128
  %323 = add i32 %322, %121
  %324 = add i32 %323, %136
  %325 = add i32 %324, %137
  %326 = add i32 %325, %138
  %327 = add i32 %326, %139
  %328 = sub i32 %327, %140
  %329 = sub i32 %328, %143
  %330 = add i32 %329, %144
  %331 = sub i32 %330, %145
  %332 = sub i32 %331, %146
  %333 = add i32 %332, %156
  %334 = sub i32 %333, %157
  %335 = sub i32 %334, %159
  %336 = sub i32 %335, %160
  %337 = add i32 %336, %161
  %338 = add i32 %337, %164
  %339 = add i32 %338, %167
  %340 = add i32 %339, %168
  %341 = sub i32 %340, %170
  %342 = add i32 %341, %171
  %343 = add i32 %342, %172
  %344 = sub i32 %343, %173
  %345 = sub i32 %344, %175
  %346 = add i32 %345, %176
  %347 = sub i32 %346, %181
  %348 = add i32 %347, %182
  %349 = add i32 %348, %183
  %350 = sub i32 %349, %185
  %351 = add i32 %350, %186
  %352 = sub i32 %351, %187
  %353 = add i32 %352, %190
  %354 = sub i32 %353, %192
  %355 = sub i32 %354, %194
  %356 = add i32 %355, %199
  %357 = sub i32 %356, %202
  %358 = sub i32 %357, %204
  %359 = add i32 %358, %205
  %360 = sub i32 %359, %210
  %361 = add i32 %360, %15
  %362 = add i32 %361, %17
  %363 = sub i32 %362, %19
  %364 = sub i32 %363, %20
  %365 = add i32 %364, %21
  %366 = add i32 %365, %22
  %367 = sub i32 %366, %40
  %368 = sub i32 %367, %103
  %369 = sub i32 %368, %110
  %370 = sub i32 %369, %113
  %371 = add i32 %370, %122
  %372 = sub i32 %371, %135
  %373 = add i32 %372, %150
  %374 = sub i32 %373, %153
  %375 = sub i32 %374, %166
  %376 = add i32 %375, %196
  %377 = add i32 %376, %201
  %378 = sub i32 %377, %213
  %379 = sub i32 %378, %217
  %380 = sub i32 %379, %219
  %381 = add i32 %380, %222
  %382 = sub i32 %381, %223
  %383 = sub i32 %382, %77
  %384 = add i32 %383, %248
  %385 = sub i32 %384, %209
  %386 = add i32 %385, %250
  %387 = add i32 %386, %252
  %388 = add i32 %387, %246
  %389 = add i32 %388, %242
  %390 = icmp eq i32 %14, %389
  %391 = select i1 %390, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %392 = tail call i32 @puts(i8* nonnull dereferenceable(1) %391)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
