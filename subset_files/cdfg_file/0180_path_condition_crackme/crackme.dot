digraph "DFG for'crackme' function" {
	Node0x6b0570[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x6b0c20[shape=record, label="  %4 = mul i32 %3, -2"];
	Node0x6b0ce0[shape=record, label="  %5 = shl i32 %3, 1"];
	Node0x6b0d50[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x6b0dc0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x6b0e60[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x6b0ed0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x6b0f40[shape=record, label="  %10 = shl i32 %0, 1"];
	Node0x6b0fb0[shape=record, label="  %11 = xor i32 %10, -2"];
	Node0x6b1020[shape=record, label="  %12 = and i32 %8, %0"];
	Node0x6b1090[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x6b1100[shape=record, label="  %14 = xor i32 %7, -1"];
	Node0x6b11a0[shape=record, label="  %15 = mul i32 %14, -3"];
	Node0x6b1240[shape=record, label="  %16 = mul i32 %12, 5"];
	Node0x6b12b0[shape=record, label="  %17 = and i32 %1, %0"];
	Node0x6b1320[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x6b1390[shape=record, label="  %19 = sub i32 %14, %9"];
	Node0x6b1400[shape=record, label="  %20 = add i32 %19, %11"];
	Node0x6b1470[shape=record, label="  %21 = add i32 %20, %13"];
	Node0x6b14e0[shape=record, label="  %22 = add i32 %21, %4"];
	Node0x6b1550[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x6b15c0[shape=record, label="  %24 = add i32 %23, %16"];
	Node0x6b1630[shape=record, label="  %25 = sub i32 %24, %18"];
	Node0x6b16a0[shape=record, label="  %26 = add i32 %25, %6"];
	Node0x6b1710[shape=record, label="  %27 = icmp eq i32 %26, -1"];
	Node0x651268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x6b1bb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x6b1c00[shape=record, label="  ret void"];
	Node0x6b0570 -> Node0x6b0c20;
	Node0x6b0c20 -> Node0x6b0ce0;
	Node0x6b0ce0 -> Node0x6b0d50;
	Node0x6b0d50 -> Node0x6b0dc0;
	Node0x6b0dc0 -> Node0x6b0e60;
	Node0x6b0e60 -> Node0x6b0ed0;
	Node0x6b0ed0 -> Node0x6b0f40;
	Node0x6b0f40 -> Node0x6b0fb0;
	Node0x6b0fb0 -> Node0x6b1020;
	Node0x6b1020 -> Node0x6b1090;
	Node0x6b1090 -> Node0x6b1100;
	Node0x6b1100 -> Node0x6b11a0;
	Node0x6b11a0 -> Node0x6b1240;
	Node0x6b1240 -> Node0x6b12b0;
	Node0x6b12b0 -> Node0x6b1320;
	Node0x6b1320 -> Node0x6b1390;
	Node0x6b1390 -> Node0x6b1400;
	Node0x6b1400 -> Node0x6b1470;
	Node0x6b1470 -> Node0x6b14e0;
	Node0x6b14e0 -> Node0x6b1550;
	Node0x6b1550 -> Node0x6b15c0;
	Node0x6b15c0 -> Node0x6b1630;
	Node0x6b1630 -> Node0x6b16a0;
	Node0x6b16a0 -> Node0x6b1710;
	Node0x6b1710 -> Node0x651268;
	Node0x651268 -> Node0x6b1bb0;
	Node0x6b1bb0 -> Node0x6b1c00;
edge [color=red]
	Node0x6b0570 -> Node0x6b0c20;
	Node0x6b0570 -> Node0x6b0ce0;
	Node0x6b0ce0 -> Node0x6b0d50;
	Node0x6b0e60 -> Node0x6b0ed0;
	Node0x6b0f40 -> Node0x6b0fb0;
	Node0x6b0e60 -> Node0x6b1020;
	Node0x6b1020 -> Node0x6b1090;
	Node0x6b0dc0 -> Node0x6b1100;
	Node0x6b1100 -> Node0x6b11a0;
	Node0x6b1020 -> Node0x6b1240;
	Node0x6b12b0 -> Node0x6b1320;
	Node0x6b1100 -> Node0x6b1390;
	Node0x6b0ed0 -> Node0x6b1390;
	Node0x6b1390 -> Node0x6b1400;
	Node0x6b0fb0 -> Node0x6b1400;
	Node0x6b1400 -> Node0x6b1470;
	Node0x6b1090 -> Node0x6b1470;
	Node0x6b1470 -> Node0x6b14e0;
	Node0x6b0c20 -> Node0x6b14e0;
	Node0x6b14e0 -> Node0x6b1550;
	Node0x6b11a0 -> Node0x6b1550;
	Node0x6b1550 -> Node0x6b15c0;
	Node0x6b1240 -> Node0x6b15c0;
	Node0x6b15c0 -> Node0x6b1630;
	Node0x6b1320 -> Node0x6b1630;
	Node0x6b1630 -> Node0x6b16a0;
	Node0x6b0d50 -> Node0x6b16a0;
	Node0x6b16a0 -> Node0x6b1710;
	Node0x6b1710 -> Node0x651268;
	Node0x651268 -> Node0x6b1bb0;
}
