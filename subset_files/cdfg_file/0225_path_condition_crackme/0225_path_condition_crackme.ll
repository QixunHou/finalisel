; ModuleID = '../.././c_source_file/0225_path_condition_crackme.c'
source_filename = "../.././c_source_file/0225_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = shl i32 %6, 1
  %8 = xor i32 %2, -1
  %9 = and i32 %1, %0
  %10 = or i32 %9, %8
  %11 = sub i32 %10, %3
  %12 = add i32 %11, %7
  %13 = xor i32 %4, -1
  %14 = or i32 %13, %3
  %15 = mul i32 %14, -2
  %16 = xor i32 %7, -2
  %17 = sub i32 %15, %16
  %18 = or i32 %17, 1
  %19 = and i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = or i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = xor i32 %14, -1
  %25 = and i32 %13, %3
  %26 = xor i32 %1, -1
  %27 = and i32 %26, %0
  %28 = xor i32 %27, -1
  %29 = and i32 %8, %28
  %30 = and i32 %8, %0
  %31 = and i32 %2, %1
  %32 = xor i32 %31, -1
  %33 = xor i32 %30, %32
  %34 = xor i32 %0, -1
  %35 = and i32 %26, %2
  %36 = and i32 %35, %34
  %37 = xor i32 %2, %1
  %38 = or i32 %37, %34
  %39 = xor i32 %36, %38
  %40 = xor i32 %37, %0
  %41 = xor i32 %32, %0
  %42 = xor i32 %37, -1
  %43 = or i32 %42, %0
  %44 = xor i32 %31, %0
  %45 = or i32 %2, %0
  %46 = xor i32 %45, %9
  %47 = xor i32 %9, -1
  %48 = xor i32 %2, %0
  %49 = and i32 %48, %47
  %50 = shl i32 %49, 1
  %51 = or i32 %1, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %2, %1
  %54 = xor i32 %53, %9
  %55 = xor i32 %48, -1
  %56 = or i32 %9, %55
  %57 = and i32 %35, %0
  %58 = or i32 %26, %2
  %59 = xor i32 %58, %0
  %60 = xor i32 %59, 2147483647
  %61 = xor i32 %60, %57
  %62 = shl i32 %61, 1
  %63 = or i32 %8, %1
  %64 = or i32 %63, %34
  %65 = xor i32 %53, -1
  %66 = add i32 %53, 1
  %67 = and i32 %2, %0
  %68 = xor i32 %67, -1
  %69 = and i32 %68, %26
  %70 = and i32 %55, %47
  %71 = shl i32 %70, 2
  %72 = or i32 %48, %52
  %73 = and i32 %31, %34
  %74 = and i32 %53, %0
  %75 = xor i32 %73, -1
  %76 = xor i32 %74, %75
  %77 = or i32 %37, %0
  %78 = xor i32 %57, %77
  %79 = or i32 %30, %1
  %80 = or i32 %37, %52
  %81 = or i32 %26, %0
  %82 = xor i32 %81, -1
  %83 = xor i32 %82, %2
  %84 = or i32 %8, %0
  %85 = and i32 %84, %1
  %86 = and i32 %63, %34
  %87 = shl i32 %86, 1
  %88 = or i32 %42, %34
  %89 = shl i32 %48, 1
  %90 = or i32 %57, %59
  %91 = and i32 %31, %0
  %92 = and i32 %53, %34
  %93 = xor i32 %91, -1
  %94 = xor i32 %92, %93
  %95 = or i32 %27, %55
  %96 = shl i32 %95, 1
  %97 = xor i32 %84, %9
  %98 = xor i32 %40, -1
  %99 = or i32 %91, %98
  %100 = and i32 %8, %1
  %101 = xor i32 %100, -1
  %102 = add i32 %100, 1
  %103 = and i32 %37, %47
  %104 = or i32 %67, %100
  %105 = xor i32 %1, %0
  %106 = or i32 %105, %2
  %107 = shl i32 %106, 1
  %108 = and i32 %58, %34
  %109 = xor i32 %108, -1
  %110 = xor i32 %57, %109
  %111 = xor i32 %53, %0
  %112 = or i32 %91, %111
  %113 = shl i32 %112, 1
  %114 = xor i32 %84, -1
  %115 = xor i32 %114, %1
  %116 = or i32 %67, %105
  %117 = and i32 %32, %0
  %118 = or i32 %48, %26
  %119 = xor i32 %52, %2
  %120 = and i32 %68, %1
  %121 = and i32 %105, %68
  %122 = shl i32 %121, 1
  %123 = xor i32 %45, %1
  %124 = or i32 %31, %0
  %125 = xor i32 %28, %2
  %126 = xor i32 %105, -1
  %127 = and i32 %55, %126
  %128 = xor i32 %30, -1
  %129 = xor i32 %128, %1
  %130 = and i32 %37, %81
  %131 = or i32 %67, %26
  %132 = xor i32 %67, %51
  %133 = or i32 %101, %0
  %134 = xor i32 %63, -1
  %135 = xor i32 %134, %0
  %136 = or i32 %105, %8
  %137 = and i32 %105, %2
  %138 = and i32 %45, %26
  %139 = or i32 %9, %42
  %140 = and i32 %37, %28
  %141 = xor i32 %45, -1
  %142 = or i32 %141, %126
  %143 = or i32 %37, %82
  %144 = or i32 %57, %108
  %145 = shl i32 %144, 1
  %146 = xor i32 %27, %101
  %147 = shl i32 %146, 1
  %148 = or i32 %100, %0
  %149 = xor i32 %67, %101
  %150 = and i32 %51, %2
  %151 = add i32 %84, 1
  %152 = or i32 %9, %2
  %153 = xor i32 %100, %0
  %154 = and i32 %81, %2
  %155 = or i32 %42, %52
  %156 = and i32 %47, %2
  %157 = and i32 %101, %34
  %158 = xor i32 %141, %1
  %159 = xor i32 %65, %0
  %160 = xor i32 %101, %0
  %161 = or i32 %65, %0
  %162 = or i32 %9, %65
  %163 = and i32 %37, %0
  %164 = or i32 %30, %134
  %165 = xor i32 %84, %1
  %166 = and i32 %126, %2
  %167 = xor i32 %111, 2147483647
  %168 = xor i32 %167, %91
  %169 = shl i32 %168, 1
  %170 = or i32 %126, %2
  %171 = shl i32 %34, 1
  %172 = xor i32 %57, %98
  %173 = and i32 %8, %126
  %174 = or i32 %67, %65
  %175 = or i32 %73, %74
  %176 = and i32 %48, %1
  %177 = and i32 %48, %105
  %178 = shl i32 %45, 1
  %179 = or i32 %37, %9
  %180 = or i32 %53, %0
  %181 = or i32 %53, %34
  %182 = or i32 %52, %2
  %183 = and i32 %81, %42
  %184 = shl i32 %183, 1
  %185 = add i32 %30, 1
  %186 = or i32 %65, %34
  %187 = xor i32 %30, %63
  %188 = or i32 %57, %40
  %189 = xor i32 %68, %1
  %190 = shl i32 %189, 1
  %191 = or i32 %73, %163
  %192 = shl i32 %37, 1
  %193 = or i32 %48, %9
  %194 = or i32 %32, %34
  %195 = shl i32 %111, 1
  %196 = or i32 %114, %126
  %197 = or i32 %27, %2
  %198 = and i32 %128, %26
  %199 = or i32 %105, %114
  %200 = and i32 %105, %55
  %201 = and i32 %45, %126
  %202 = and i32 %105, %128
  %203 = or i32 %48, %82
  %204 = xor i32 %38, -1
  %205 = or i32 %36, %204
  %206 = xor i32 %63, %9
  %207 = or i32 %101, %34
  %208 = and i32 %68, %126
  %209 = or i32 %55, %26
  %210 = or i32 %67, %52
  %211 = or i32 %55, %82
  %212 = add i32 %1, 1
  %213 = and i32 %55, %28
  %214 = and i32 %48, %51
  %215 = or i32 %30, %31
  %216 = or i32 %8, %82
  %217 = and i32 %84, %126
  %218 = or i32 %100, %27
  %219 = xor i32 %67, %53
  %220 = add i32 %2, 1
  %221 = and i32 %81, %8
  %222 = and i32 %48, %81
  %223 = and i32 %48, %126
  %224 = or i32 %9, %134
  %225 = and i32 %42, %47
  %226 = xor i32 %81, %2
  %227 = or i32 %32, %0
  %228 = or i32 %55, %1
  %229 = xor i32 %63, %0
  %230 = or i32 %134, %34
  %231 = shl i32 %230, 1
  %232 = and i32 %84, %105
  %233 = shl i32 %232, 1
  %234 = and i32 %28, %2
  %235 = or i32 %100, %34
  %236 = or i32 %114, %26
  %237 = or i32 %30, %26
  %238 = or i32 %8, %52
  %239 = and i32 %128, %1
  %240 = or i32 %48, %126
  %241 = or i32 %48, %1
  %242 = or i32 %30, %105
  %243 = and i32 %48, %28
  %244 = or i32 %63, %0
  %245 = shl i32 %134, 1
  %246 = and i32 %55, %1
  %247 = and i32 %37, %34
  %248 = xor i32 %247, %93
  %249 = or i32 %82, %2
  %250 = xor i32 %67, %1
  %251 = or i32 %55, %52
  %252 = or i32 %31, %34
  %253 = or i32 %67, %82
  %254 = or i32 %141, %26
  %255 = or i32 %30, %126
  %256 = or i32 %67, %126
  %257 = and i32 %84, %26
  %258 = and i32 %51, %8
  %259 = and i32 %42, %34
  %260 = xor i32 %67, %81
  %261 = and i32 %42, %28
  %262 = and i32 %37, %51
  %263 = and i32 %51, %42
  %264 = and i32 %45, %1
  %265 = and i32 %101, %0
  %266 = or i32 %9, %141
  %267 = shl i32 %266, 1
  %268 = xor i32 %163, %75
  %269 = or i32 %114, %1
  %270 = shl i32 %269, 1
  %271 = or i32 %48, %27
  %272 = and i32 %32, %34
  %273 = or i32 %48, %105
  %274 = xor i32 %27, %32
  %275 = or i32 %141, %1
  %276 = and i32 %81, %55
  %277 = or i32 %27, %42
  %278 = and i32 %48, %26
  %279 = xor i32 %9, %2
  %280 = shl i32 %279, 1
  %281 = xor i32 %47, %2
  %282 = or i32 %37, %27
  %283 = and i32 %42, %0
  %284 = or i32 %91, %92
  %285 = xor i32 %42, %0
  %286 = shl i32 %285, 1
  %287 = and i32 %45, %105
  %288 = or i32 %105, %55
  %289 = shl i32 %288, 1
  %290 = and i32 %51, %55
  %291 = or i32 %67, %1
  %292 = or i32 %105, %141
  %293 = or i32 %55, %126
  %294 = shl i32 %293, 1
  %295 = or i32 %31, %27
  %296 = shl i32 %295, 1
  %297 = or i32 %134, %0
  %298 = xor i32 %51, %2
  %299 = and i32 %8, %47
  %300 = or i32 %42, %82
  %301 = xor i32 %77, -1
  %302 = or i32 %57, %301
  %303 = add i32 %37, 1
  %304 = or i32 %27, %8
  %305 = or i32 %8, %126
  %306 = and i32 %63, %0
  %307 = shl i32 %306, 1
  %308 = and i32 %105, %8
  %309 = or i32 %9, %114
  %310 = and i32 %58, %0
  %311 = or i32 %36, %310
  %312 = shl i32 %311, 1
  %313 = or i32 %91, %247
  %314 = xor i32 %27, %2
  %315 = shl i32 %314, 1
  %316 = and i32 %65, %34
  %317 = mul i32 %316, 24
  %318 = and i32 %100, %34
  %319 = mul i32 %318, 7
  %320 = and i32 %65, %0
  %321 = mul i32 %320, 10
  %322 = and i32 %100, %0
  %323 = mul i32 %322, 6
  %324 = and i32 %134, %34
  %325 = mul i32 %324, 27
  %326 = mul i32 %73, 34
  %327 = and i32 %134, %0
  %328 = mul i32 %327, 36
  %329 = mul i32 %91, 12
  %330 = add i32 %299, %28
  %331 = add i32 %330, %63
  %332 = add i32 %331, %137
  %333 = add i32 %332, %29
  %334 = add i32 %333, %300
  %335 = add i32 %334, %273
  %336 = add i32 %335, %261
  %337 = add i32 %336, %256
  %338 = add i32 %337, %201
  %339 = add i32 %338, %187
  %340 = add i32 %339, %142
  %341 = add i32 %340, %138
  %342 = add i32 %341, %135
  %343 = add i32 %342, %117
  %344 = add i32 %343, %72
  %345 = add i32 %344, %69
  %346 = add i32 %345, %172
  %347 = add i32 %346, %191
  %348 = add i32 %347, %78
  %349 = shl i32 %348, 1
  %350 = sub i32 %216, %304
  %351 = add i32 %350, %262
  %352 = sub i32 %351, %229
  %353 = sub i32 %352, %196
  %354 = sub i32 %353, %129
  %355 = add i32 %354, %103
  %356 = add i32 %355, %23
  %357 = add i32 %356, %19
  %358 = mul i32 %357, 5
  %359 = sub i32 %281, %238
  %360 = add i32 %359, %240
  %361 = add i32 %360, %77
  %362 = sub i32 %361, %235
  %363 = add i32 %362, %24
  %364 = add i32 %363, %25
  %365 = mul i32 %364, 3
  %366 = add i32 %222, %55
  %367 = shl i32 %366, 2
  %368 = xor i32 %171, -1
  %369 = add i32 %368, %0
  %370 = add i32 %369, %1
  %371 = add i32 %370, %212
  %372 = add i32 %371, %82
  %373 = add i32 %372, %126
  %374 = sub i32 %373, %81
  %375 = add i32 %374, %220
  %376 = sub i32 %375, %105
  %377 = add i32 %376, %9
  %378 = sub i32 %377, %27
  %379 = sub i32 %378, %2
  %380 = add i32 %379, %3
  %381 = add i32 %380, %66
  %382 = add i32 %381, %83
  %383 = add i32 %382, %84
  %384 = add i32 %383, %102
  %385 = sub i32 %384, %119
  %386 = sub i32 %385, %125
  %387 = sub i32 %386, %136
  %388 = add i32 %387, %150
  %389 = add i32 %388, %151
  %390 = add i32 %389, %152
  %391 = add i32 %390, %154
  %392 = sub i32 %391, %156
  %393 = add i32 %392, %166
  %394 = sub i32 %393, %170
  %395 = sub i32 %394, %173
  %396 = sub i32 %395, %182
  %397 = add i32 %396, %185
  %398 = sub i32 %397, %197
  %399 = add i32 %398, 1
  %400 = sub i32 %399, %31
  %401 = add i32 %400, %30
  %402 = sub i32 %401, %221
  %403 = sub i32 %402, %226
  %404 = add i32 %403, %234
  %405 = sub i32 %404, %53
  %406 = sub i32 %405, %249
  %407 = add i32 %406, %141
  %408 = sub i32 %407, %258
  %409 = add i32 %408, %100
  %410 = add i32 %409, %32
  %411 = sub i32 %410, %298
  %412 = add i32 %411, %303
  %413 = add i32 %412, %305
  %414 = add i32 %413, %308
  %415 = add i32 %414, 1
  %416 = add i32 %415, %33
  %417 = sub i32 %416, %40
  %418 = add i32 %417, %41
  %419 = add i32 %418, %43
  %420 = sub i32 %419, %44
  %421 = add i32 %420, %46
  %422 = sub i32 %421, %54
  %423 = sub i32 %422, %56
  %424 = sub i32 %423, %64
  %425 = sub i32 %424, %79
  %426 = sub i32 %425, %80
  %427 = add i32 %426, %85
  %428 = sub i32 %427, %88
  %429 = sub i32 %428, %89
  %430 = add i32 %429, %97
  %431 = sub i32 %430, %104
  %432 = sub i32 %431, %107
  %433 = sub i32 %432, %115
  %434 = add i32 %433, %116
  %435 = sub i32 %434, %118
  %436 = sub i32 %435, %120
  %437 = add i32 %436, %123
  %438 = sub i32 %437, %124
  %439 = add i32 %438, %127
  %440 = add i32 %439, %130
  %441 = sub i32 %440, %131
  %442 = add i32 %441, %132
  %443 = add i32 %442, %133
  %444 = sub i32 %443, %139
  %445 = add i32 %444, %92
  %446 = sub i32 %445, %140
  %447 = sub i32 %446, %143
  %448 = sub i32 %447, %148
  %449 = add i32 %448, %149
  %450 = add i32 %449, %153
  %451 = sub i32 %450, %155
  %452 = sub i32 %451, %157
  %453 = sub i32 %452, %158
  %454 = add i32 %453, %159
  %455 = sub i32 %454, %160
  %456 = add i32 %455, %161
  %457 = add i32 %456, %162
  %458 = sub i32 %457, %163
  %459 = sub i32 %458, %164
  %460 = sub i32 %459, %165
  %461 = sub i32 %460, %174
  %462 = add i32 %461, %176
  %463 = sub i32 %462, %177
  %464 = sub i32 %463, %178
  %465 = sub i32 %464, %179
  %466 = add i32 %465, %180
  %467 = sub i32 %466, %181
  %468 = add i32 %467, %186
  %469 = sub i32 %468, %192
  %470 = sub i32 %469, %193
  %471 = add i32 %470, %194
  %472 = add i32 %471, %38
  %473 = sub i32 %472, %198
  %474 = sub i32 %473, %199
  %475 = sub i32 %474, %200
  %476 = add i32 %475, %202
  %477 = sub i32 %476, %203
  %478 = add i32 %477, %206
  %479 = sub i32 %478, %207
  %480 = sub i32 %479, %208
  %481 = add i32 %480, %209
  %482 = sub i32 %481, %210
  %483 = add i32 %482, %211
  %484 = sub i32 %483, %74
  %485 = add i32 %484, %213
  %486 = sub i32 %485, %214
  %487 = sub i32 %486, %215
  %488 = add i32 %487, %217
  %489 = add i32 %488, %218
  %490 = add i32 %489, %219
  %491 = sub i32 %490, %223
  %492 = sub i32 %491, %224
  %493 = add i32 %492, %225
  %494 = add i32 %493, %227
  %495 = sub i32 %494, %228
  %496 = sub i32 %495, %236
  %497 = add i32 %496, %237
  %498 = add i32 %497, %239
  %499 = add i32 %498, %241
  %500 = add i32 %499, %242
  %501 = sub i32 %500, %243
  %502 = sub i32 %501, %244
  %503 = sub i32 %502, %245
  %504 = sub i32 %503, %246
  %505 = sub i32 %504, %250
  %506 = sub i32 %505, %251
  %507 = add i32 %506, %252
  %508 = sub i32 %507, %253
  %509 = add i32 %508, %254
  %510 = add i32 %509, %255
  %511 = sub i32 %510, %257
  %512 = sub i32 %511, %259
  %513 = add i32 %512, %247
  %514 = add i32 %513, %260
  %515 = add i32 %514, %263
  %516 = sub i32 %515, %264
  %517 = sub i32 %516, %265
  %518 = add i32 %517, %271
  %519 = sub i32 %518, %272
  %520 = sub i32 %519, %274
  %521 = add i32 %520, %275
  %522 = sub i32 %521, %276
  %523 = add i32 %522, %277
  %524 = sub i32 %523, %278
  %525 = sub i32 %524, %280
  %526 = sub i32 %525, %282
  %527 = add i32 %526, %283
  %528 = add i32 %527, %287
  %529 = sub i32 %528, %290
  %530 = add i32 %529, %291
  %531 = sub i32 %530, %292
  %532 = add i32 %531, %297
  %533 = add i32 %532, %309
  %534 = sub i32 %533, %315
  %535 = add i32 %534, %39
  %536 = sub i32 %535, %50
  %537 = sub i32 %536, %71
  %538 = add i32 %537, %76
  %539 = sub i32 %538, %87
  %540 = add i32 %539, %90
  %541 = add i32 %540, %94
  %542 = sub i32 %541, %96
  %543 = sub i32 %542, %99
  %544 = sub i32 %543, %110
  %545 = sub i32 %544, %122
  %546 = sub i32 %545, %147
  %547 = sub i32 %546, %175
  %548 = sub i32 %547, %184
  %549 = sub i32 %548, %188
  %550 = sub i32 %549, %190
  %551 = sub i32 %550, %195
  %552 = sub i32 %551, %205
  %553 = sub i32 %552, %231
  %554 = sub i32 %553, %233
  %555 = sub i32 %554, %248
  %556 = sub i32 %555, %267
  %557 = add i32 %556, %268
  %558 = sub i32 %557, %270
  %559 = add i32 %558, %284
  %560 = sub i32 %559, %286
  %561 = sub i32 %560, %289
  %562 = sub i32 %561, %294
  %563 = sub i32 %562, %296
  %564 = add i32 %563, %302
  %565 = sub i32 %564, %307
  %566 = sub i32 %565, %313
  %567 = add i32 %566, %317
  %568 = add i32 %567, %319
  %569 = add i32 %568, %321
  %570 = add i32 %569, %323
  %571 = add i32 %570, %325
  %572 = add i32 %571, %326
  %573 = add i32 %572, %328
  %574 = add i32 %573, %329
  %575 = sub i32 %574, %113
  %576 = sub i32 %575, %145
  %577 = sub i32 %576, %312
  %578 = add i32 %577, %367
  %579 = add i32 %578, %21
  %580 = sub i32 %579, %62
  %581 = sub i32 %580, %169
  %582 = add i32 %581, %18
  %583 = add i32 %582, %365
  %584 = add i32 %583, %358
  %585 = add i32 %584, %349
  %586 = icmp eq i32 %12, %585
  %587 = select i1 %586, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %588 = tail call i32 @puts(i8* nonnull dereferenceable(1) %587)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
