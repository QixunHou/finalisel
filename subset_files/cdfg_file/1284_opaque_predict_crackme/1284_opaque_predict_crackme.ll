; ModuleID = '../.././c_source_file/1284_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1284_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = or i32 %2, %0
  %7 = xor i32 %6, -1
  %8 = sub i32 %7, %3
  %9 = add i32 %8, %4
  %10 = or i32 %4, %3
  %11 = xor i32 %4, -1
  %12 = add i32 %4, 1
  %13 = xor i32 %4, %3
  %14 = xor i32 %13, -1
  %15 = or i32 %11, %3
  %16 = and i32 %4, %3
  %17 = xor i32 %10, -1
  %18 = xor i32 %15, -1
  %19 = and i32 %11, %3
  %20 = xor i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %2
  %23 = xor i32 %2, -1
  %24 = and i32 %1, %0
  %25 = xor i32 %24, -1
  %26 = and i32 %23, %25
  %27 = or i32 %23, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %24, %28
  %30 = xor i32 %1, -1
  %31 = or i32 %30, %0
  %32 = xor i32 %2, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %31, %33
  %35 = and i32 %23, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %20, %36
  %38 = xor i32 %31, %2
  %39 = and i32 %30, %0
  %40 = and i32 %2, %1
  %41 = or i32 %40, %39
  %42 = and i32 %40, %0
  %43 = xor i32 %0, -1
  %44 = or i32 %2, %1
  %45 = and i32 %44, %43
  %46 = xor i32 %42, -1
  %47 = xor i32 %45, %46
  %48 = xor i32 %25, %2
  %49 = xor i32 %31, -1
  %50 = or i32 %49, %2
  %51 = and i32 %2, %0
  %52 = or i32 %51, %30
  %53 = xor i32 %36, %1
  %54 = or i32 %35, %20
  %55 = and i32 %33, %1
  %56 = and i32 %23, %1
  %57 = xor i32 %56, -1
  %58 = and i32 %57, %43
  %59 = or i32 %23, %1
  %60 = xor i32 %59, -1
  %61 = or i32 %24, %60
  %62 = xor i32 %28, %1
  %63 = and i32 %20, %33
  %64 = or i32 %20, %33
  %65 = shl i32 %64, 1
  %66 = or i32 %20, %23
  %67 = xor i32 %35, %59
  %68 = shl i32 %67, 1
  %69 = or i32 %20, %28
  %70 = xor i32 %35, %1
  %71 = shl i32 %51, 1
  %72 = or i32 %28, %21
  %73 = and i32 %30, %2
  %74 = and i32 %73, %0
  %75 = or i32 %30, %2
  %76 = and i32 %75, %43
  %77 = or i32 %74, %76
  %78 = or i32 %32, %49
  %79 = xor i32 %2, %1
  %80 = or i32 %79, %24
  %81 = shl i32 %2, 1
  %82 = xor i32 %40, %0
  %83 = or i32 %35, %60
  %84 = xor i32 %44, -1
  %85 = xor i32 %84, %0
  %86 = xor i32 %51, -1
  %87 = and i32 %20, %86
  %88 = shl i32 %87, 2
  %89 = or i32 %35, %30
  %90 = xor i32 %49, %2
  %91 = or i32 %1, %0
  %92 = and i32 %32, %91
  %93 = xor i32 %39, -1
  %94 = and i32 %93, %2
  %95 = xor i32 %93, %2
  %96 = xor i32 %6, %1
  %97 = xor i32 %40, -1
  %98 = and i32 %97, %0
  %99 = and i32 %79, %31
  %100 = xor i32 %51, %31
  %101 = xor i32 %86, %1
  %102 = shl i32 %101, 1
  %103 = and i32 %20, %2
  %104 = or i32 %84, %43
  %105 = or i32 %35, %1
  %106 = xor i32 %44, %43
  %107 = xor i32 %106, %42
  %108 = or i32 %23, %21
  %109 = or i32 %24, %23
  %110 = xor i32 %79, -1
  %111 = and i32 %110, %0
  %112 = or i32 %33, %30
  %113 = shl i32 %112, 1
  %114 = xor i32 %57, %0
  %115 = shl i32 %114, 1
  %116 = or i32 %44, %0
  %117 = shl i32 %116, 2
  %118 = and i32 %91, %2
  %119 = and i32 %86, %1
  %120 = and i32 %110, %93
  %121 = or i32 %32, %24
  %122 = and i32 %32, %20
  %123 = or i32 %23, %49
  %124 = or i32 %84, %0
  %125 = or i32 %51, %21
  %126 = or i32 %110, %0
  %127 = or i32 %51, %1
  %128 = and i32 %57, %0
  %129 = or i32 %79, %0
  %130 = xor i32 %129, -1
  %131 = or i32 %74, %130
  %132 = and i32 %97, %43
  %133 = or i32 %35, %40
  %134 = or i32 %110, %43
  %135 = xor i32 %24, %2
  %136 = and i32 %91, %110
  %137 = shl i32 %136, 1
  %138 = xor i32 %7, %1
  %139 = or i32 %32, %20
  %140 = shl i32 %30, 1
  %141 = and i32 %32, %25
  %142 = and i32 %79, %93
  %143 = and i32 %44, %0
  %144 = or i32 %33, %1
  %145 = xor i32 %79, %0
  %146 = and i32 %27, %20
  %147 = and i32 %91, %23
  %148 = or i32 %74, %145
  %149 = or i32 %56, %0
  %150 = and i32 %6, %20
  %151 = or i32 %51, %20
  %152 = and i32 %32, %21
  %153 = or i32 %24, %33
  %154 = or i32 %20, %2
  %155 = or i32 %39, %33
  %156 = or i32 %79, %49
  %157 = and i32 %73, %43
  %158 = and i32 %75, %0
  %159 = or i32 %157, %158
  %160 = xor i32 %91, -1
  %161 = and i32 %32, %30
  %162 = or i32 %79, %39
  %163 = shl i32 %162, 1
  %164 = xor i32 %56, %0
  %165 = or i32 %33, %160
  %166 = xor i32 %97, %0
  %167 = xor i32 %91, %2
  %168 = or i32 %79, %43
  %169 = xor i32 %168, -1
  %170 = or i32 %157, %169
  %171 = and i32 %79, %43
  %172 = or i32 %42, %171
  %173 = xor i32 %27, %24
  %174 = xor i32 %51, %1
  %175 = and i32 %32, %93
  %176 = or i32 %57, %43
  %177 = shl i32 %176, 1
  %178 = or i32 %160, %2
  %179 = or i32 %56, %39
  %180 = add i32 %32, 1
  %181 = and i32 %59, %43
  %182 = and i32 %79, %91
  %183 = or i32 %33, %21
  %184 = or i32 %35, %21
  %185 = or i32 %40, %0
  %186 = or i32 %44, %43
  %187 = and i32 %6, %1
  %188 = or i32 %20, %7
  %189 = and i32 %31, %2
  %190 = and i32 %33, %21
  %191 = and i32 %31, %23
  %192 = and i32 %6, %30
  %193 = xor i32 %74, %129
  %194 = xor i32 %157, %168
  %195 = shl i32 %57, 1
  %196 = or i32 %60, %0
  %197 = and i32 %36, %30
  %198 = and i32 %79, %0
  %199 = and i32 %23, %93
  %200 = or i32 %51, %56
  %201 = and i32 %84, %43
  %202 = and i32 %56, %43
  %203 = mul i32 %202, -13
  %204 = and i32 %84, %0
  %205 = and i32 %56, %0
  %206 = mul i32 %205, -15
  %207 = and i32 %60, %43
  %208 = shl i32 %207, 3
  %209 = and i32 %40, %43
  %210 = and i32 %60, %0
  %211 = shl i32 %210, 2
  %212 = mul i32 %42, -17
  %213 = add i32 %90, %59
  %214 = add i32 %213, %50
  %215 = add i32 %214, %186
  %216 = add i32 %215, %183
  %217 = add i32 %216, %175
  %218 = add i32 %217, %166
  %219 = add i32 %218, %155
  %220 = add i32 %219, %92
  %221 = add i32 %220, %89
  %222 = add i32 %221, %37
  %223 = add i32 %222, %172
  %224 = sub i32 %196, %125
  %225 = add i32 %224, %111
  %226 = add i32 %225, %17
  %227 = mul i32 %226, 3
  %228 = sub i32 %48, %161
  %229 = sub i32 %228, %119
  %230 = add i32 %229, %18
  %231 = mul i32 %230, 5
  %232 = add i32 %182, %187
  %233 = add i32 %232, %19
  %234 = shl i32 %233, 2
  %235 = add i32 %223, %16
  %236 = shl i32 %235, 1
  %237 = add i32 %0, 2
  %238 = sub i32 %237, %1
  %239 = add i32 %238, %49
  %240 = sub i32 %239, %91
  %241 = add i32 %240, %93
  %242 = add i32 %241, %23
  %243 = sub i32 %242, %140
  %244 = add i32 %243, %160
  %245 = add i32 %244, %3
  %246 = sub i32 %245, %22
  %247 = sub i32 %246, %26
  %248 = sub i32 %247, %38
  %249 = sub i32 %248, %66
  %250 = sub i32 %249, %40
  %251 = sub i32 %250, %81
  %252 = add i32 %251, %44
  %253 = sub i32 %252, %94
  %254 = sub i32 %253, %95
  %255 = add i32 %254, %35
  %256 = add i32 %255, %103
  %257 = sub i32 %256, %108
  %258 = sub i32 %257, %109
  %259 = add i32 %258, %118
  %260 = add i32 %259, %6
  %261 = add i32 %260, %123
  %262 = add i32 %261, %32
  %263 = sub i32 %262, %135
  %264 = sub i32 %263, %79
  %265 = sub i32 %264, %147
  %266 = add i32 %265, %154
  %267 = add i32 %266, %167
  %268 = sub i32 %267, %178
  %269 = add i32 %268, %180
  %270 = add i32 %269, %189
  %271 = sub i32 %270, %191
  %272 = add i32 %271, %199
  %273 = add i32 %272, %12
  %274 = sub i32 %273, %29
  %275 = add i32 %274, %34
  %276 = sub i32 %275, %41
  %277 = add i32 %276, %52
  %278 = add i32 %277, %53
  %279 = add i32 %278, %54
  %280 = add i32 %279, %55
  %281 = sub i32 %280, %58
  %282 = add i32 %281, %61
  %283 = add i32 %282, %62
  %284 = sub i32 %283, %63
  %285 = add i32 %284, %69
  %286 = sub i32 %285, %70
  %287 = sub i32 %286, %71
  %288 = add i32 %287, %72
  %289 = add i32 %288, %78
  %290 = sub i32 %289, %80
  %291 = add i32 %290, %82
  %292 = sub i32 %291, %83
  %293 = add i32 %292, %85
  %294 = sub i32 %293, %96
  %295 = add i32 %294, %98
  %296 = sub i32 %295, %99
  %297 = sub i32 %296, %100
  %298 = add i32 %297, %104
  %299 = add i32 %298, %105
  %300 = add i32 %299, %45
  %301 = sub i32 %300, %120
  %302 = add i32 %301, %121
  %303 = sub i32 %302, %122
  %304 = add i32 %303, %124
  %305 = add i32 %304, %126
  %306 = add i32 %305, %127
  %307 = sub i32 %306, %128
  %308 = sub i32 %307, %132
  %309 = add i32 %308, %133
  %310 = add i32 %309, %134
  %311 = add i32 %310, %138
  %312 = add i32 %311, %139
  %313 = sub i32 %312, %141
  %314 = sub i32 %313, %142
  %315 = add i32 %314, %143
  %316 = add i32 %315, %144
  %317 = add i32 %316, %145
  %318 = sub i32 %317, %146
  %319 = add i32 %318, %149
  %320 = add i32 %319, %150
  %321 = add i32 %320, %151
  %322 = sub i32 %321, %152
  %323 = add i32 %322, %153
  %324 = sub i32 %323, %156
  %325 = add i32 %324, %164
  %326 = sub i32 %325, %165
  %327 = add i32 %326, %173
  %328 = sub i32 %327, %174
  %329 = sub i32 %328, %179
  %330 = add i32 %329, %181
  %331 = add i32 %330, %184
  %332 = sub i32 %331, %185
  %333 = add i32 %332, %188
  %334 = sub i32 %333, %190
  %335 = add i32 %334, %192
  %336 = sub i32 %335, %195
  %337 = sub i32 %336, %197
  %338 = add i32 %337, %168
  %339 = sub i32 %338, %198
  %340 = add i32 %339, %200
  %341 = add i32 %340, %201
  %342 = add i32 %341, %204
  %343 = add i32 %342, %209
  %344 = sub i32 %343, %10
  %345 = add i32 %344, %14
  %346 = sub i32 %345, %13
  %347 = sub i32 %346, %15
  %348 = sub i32 %347, %47
  %349 = sub i32 %348, %65
  %350 = sub i32 %349, %68
  %351 = sub i32 %350, %77
  %352 = sub i32 %351, %88
  %353 = sub i32 %352, %102
  %354 = sub i32 %353, %107
  %355 = sub i32 %354, %113
  %356 = sub i32 %355, %115
  %357 = sub i32 %356, %117
  %358 = sub i32 %357, %131
  %359 = sub i32 %358, %137
  %360 = add i32 %359, %148
  %361 = sub i32 %360, %159
  %362 = sub i32 %361, %163
  %363 = sub i32 %362, %170
  %364 = sub i32 %363, %177
  %365 = sub i32 %364, %193
  %366 = add i32 %365, %194
  %367 = add i32 %366, %203
  %368 = add i32 %367, %206
  %369 = add i32 %368, %208
  %370 = sub i32 %369, %211
  %371 = add i32 %370, %212
  %372 = add i32 %371, %234
  %373 = add i32 %372, %227
  %374 = add i32 %373, %231
  %375 = add i32 %374, %236
  %376 = icmp eq i32 %9, %375
  %377 = select i1 %376, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %378 = tail call i32 @puts(i8* nonnull dereferenceable(1) %377)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
