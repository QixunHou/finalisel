digraph "DFG for'crackme' function" {
	Node0x1c5c570[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1c5cc20[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1c5cce0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1c5cd50[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x1c5cdc0[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1c5ce60[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x1c5ced0[shape=record, label="  %9 = sub i32 %4, %8"];
	Node0x1c5cf40[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1c5cfb0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x1c5d020[shape=record, label="  %12 = or i32 %11, 1"];
	Node0x1c5d090[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x1c5d100[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x1c5d170[shape=record, label="  %15 = xor i32 %0, -1"];
	Node0x1c5d1e0[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x1c5d250[shape=record, label="  %17 = sub i32 %6, %16"];
	Node0x1c5d2f0[shape=record, label="  %18 = mul i32 %17, 3"];
	Node0x1c5d360[shape=record, label="  %19 = sub i32 %1, %10"];
	Node0x1c5d400[shape=record, label="  %20 = mul i32 %19, 5"];
	Node0x1c5d470[shape=record, label="  %21 = sub i32 1, %1"];
	Node0x1c5d4e0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x1c5d550[shape=record, label="  %23 = add i32 %22, %3"];
	Node0x1c5d5c0[shape=record, label="  %24 = add i32 %23, %12"];
	Node0x1c5d630[shape=record, label="  %25 = add i32 %24, %18"];
	Node0x1c5d6a0[shape=record, label="  %26 = add i32 %25, %20"];
	Node0x1c5d710[shape=record, label="  %27 = icmp eq i32 %9, %26"];
	Node0x1bfd268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1c5dbb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x1c5dc00[shape=record, label="  ret void"];
	Node0x1c5c570 -> Node0x1c5cc20;
	Node0x1c5cc20 -> Node0x1c5cce0;
	Node0x1c5cce0 -> Node0x1c5cd50;
	Node0x1c5cd50 -> Node0x1c5cdc0;
	Node0x1c5cdc0 -> Node0x1c5ce60;
	Node0x1c5ce60 -> Node0x1c5ced0;
	Node0x1c5ced0 -> Node0x1c5cf40;
	Node0x1c5cf40 -> Node0x1c5cfb0;
	Node0x1c5cfb0 -> Node0x1c5d020;
	Node0x1c5d020 -> Node0x1c5d090;
	Node0x1c5d090 -> Node0x1c5d100;
	Node0x1c5d100 -> Node0x1c5d170;
	Node0x1c5d170 -> Node0x1c5d1e0;
	Node0x1c5d1e0 -> Node0x1c5d250;
	Node0x1c5d250 -> Node0x1c5d2f0;
	Node0x1c5d2f0 -> Node0x1c5d360;
	Node0x1c5d360 -> Node0x1c5d400;
	Node0x1c5d400 -> Node0x1c5d470;
	Node0x1c5d470 -> Node0x1c5d4e0;
	Node0x1c5d4e0 -> Node0x1c5d550;
	Node0x1c5d550 -> Node0x1c5d5c0;
	Node0x1c5d5c0 -> Node0x1c5d630;
	Node0x1c5d630 -> Node0x1c5d6a0;
	Node0x1c5d6a0 -> Node0x1c5d710;
	Node0x1c5d710 -> Node0x1bfd268;
	Node0x1bfd268 -> Node0x1c5dbb0;
	Node0x1c5dbb0 -> Node0x1c5dc00;
edge [color=red]
	Node0x1c5c570 -> Node0x1c5cc20;
	Node0x1c5cce0 -> Node0x1c5cd50;
	Node0x1c5cd50 -> Node0x1c5cdc0;
	Node0x1c5cdc0 -> Node0x1c5ce60;
	Node0x1c5cc20 -> Node0x1c5ced0;
	Node0x1c5ce60 -> Node0x1c5ced0;
	Node0x1c5cf40 -> Node0x1c5cfb0;
	Node0x1c5cfb0 -> Node0x1c5d020;
	Node0x1c5d090 -> Node0x1c5d100;
	Node0x1c5d170 -> Node0x1c5d1e0;
	Node0x1c5cd50 -> Node0x1c5d250;
	Node0x1c5d1e0 -> Node0x1c5d250;
	Node0x1c5d250 -> Node0x1c5d2f0;
	Node0x1c5cf40 -> Node0x1c5d360;
	Node0x1c5d360 -> Node0x1c5d400;
	Node0x1c5d470 -> Node0x1c5d4e0;
	Node0x1c5d100 -> Node0x1c5d4e0;
	Node0x1c5d4e0 -> Node0x1c5d550;
	Node0x1c5c570 -> Node0x1c5d550;
	Node0x1c5d550 -> Node0x1c5d5c0;
	Node0x1c5d020 -> Node0x1c5d5c0;
	Node0x1c5d5c0 -> Node0x1c5d630;
	Node0x1c5d2f0 -> Node0x1c5d630;
	Node0x1c5d630 -> Node0x1c5d6a0;
	Node0x1c5d400 -> Node0x1c5d6a0;
	Node0x1c5ced0 -> Node0x1c5d710;
	Node0x1c5d6a0 -> Node0x1c5d710;
	Node0x1c5d710 -> Node0x1bfd268;
	Node0x1bfd268 -> Node0x1c5dbb0;
}
