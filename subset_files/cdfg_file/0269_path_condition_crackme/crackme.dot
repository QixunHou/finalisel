digraph "DFG for'crackme' function" {
	Node0x22d85b0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x22d8c60[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0x22d8d20[shape=record, label="  %5 = mul i32 %4, 3"];
	Node0x22d8d90[shape=record, label="  %6 = add i32 %3, %5"];
	Node0x22d8e00[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x22d8e70[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x22d8ee0[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x22d8f80[shape=record, label="  %10 = xor i32 %0, 2147483647"];
	Node0x22d8ff0[shape=record, label="  %11 = or i32 %10, %1"];
	Node0x22d9090[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x22d9130[shape=record, label="  %13 = mul i32 %1, 5"];
	Node0x22d91a0[shape=record, label="  %14 = xor i32 %7, -1"];
	Node0x22d9210[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x22d9280[shape=record, label="  %16 = and i32 %10, %1"];
	Node0x22d92f0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x22d9360[shape=record, label="  %18 = and i32 %1, %0"];
	Node0x22d9400[shape=record, label="  %19 = shl i32 %18, 2"];
	Node0x22d9470[shape=record, label="  %20 = add i32 %9, %0"];
	Node0x22d94e0[shape=record, label="  %21 = sub i32 %20, %7"];
	Node0x22d9550[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x22d95c0[shape=record, label="  %23 = add i32 %22, %13"];
	Node0x22d9630[shape=record, label="  %24 = sub i32 %23, %12"];
	Node0x22d96a0[shape=record, label="  %25 = add i32 %24, %15"];
	Node0x22d9710[shape=record, label="  %26 = add i32 %25, %17"];
	Node0x22d9780[shape=record, label="  %27 = sub i32 %26, %19"];
	Node0x22d97f0[shape=record, label="  %28 = icmp eq i32 %6, %27"];
	Node0x2279268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x22d9c90[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x22d9ce0[shape=record, label="  ret void"];
	Node0x22d85b0 -> Node0x22d8c60;
	Node0x22d8c60 -> Node0x22d8d20;
	Node0x22d8d20 -> Node0x22d8d90;
	Node0x22d8d90 -> Node0x22d8e00;
	Node0x22d8e00 -> Node0x22d8e70;
	Node0x22d8e70 -> Node0x22d8ee0;
	Node0x22d8ee0 -> Node0x22d8f80;
	Node0x22d8f80 -> Node0x22d8ff0;
	Node0x22d8ff0 -> Node0x22d9090;
	Node0x22d9090 -> Node0x22d9130;
	Node0x22d9130 -> Node0x22d91a0;
	Node0x22d91a0 -> Node0x22d9210;
	Node0x22d9210 -> Node0x22d9280;
	Node0x22d9280 -> Node0x22d92f0;
	Node0x22d92f0 -> Node0x22d9360;
	Node0x22d9360 -> Node0x22d9400;
	Node0x22d9400 -> Node0x22d9470;
	Node0x22d9470 -> Node0x22d94e0;
	Node0x22d94e0 -> Node0x22d9550;
	Node0x22d9550 -> Node0x22d95c0;
	Node0x22d95c0 -> Node0x22d9630;
	Node0x22d9630 -> Node0x22d96a0;
	Node0x22d96a0 -> Node0x22d9710;
	Node0x22d9710 -> Node0x22d9780;
	Node0x22d9780 -> Node0x22d97f0;
	Node0x22d97f0 -> Node0x2279268;
	Node0x2279268 -> Node0x22d9c90;
	Node0x22d9c90 -> Node0x22d9ce0;
edge [color=red]
	Node0x22d8c60 -> Node0x22d8d20;
	Node0x22d85b0 -> Node0x22d8d90;
	Node0x22d8d20 -> Node0x22d8d90;
	Node0x22d85b0 -> Node0x22d8e70;
	Node0x22d8f80 -> Node0x22d8ff0;
	Node0x22d8ff0 -> Node0x22d9090;
	Node0x22d8e00 -> Node0x22d91a0;
	Node0x22d91a0 -> Node0x22d9210;
	Node0x22d8f80 -> Node0x22d9280;
	Node0x22d9280 -> Node0x22d92f0;
	Node0x22d9360 -> Node0x22d9400;
	Node0x22d8ee0 -> Node0x22d9470;
	Node0x22d9470 -> Node0x22d94e0;
	Node0x22d8e00 -> Node0x22d94e0;
	Node0x22d94e0 -> Node0x22d9550;
	Node0x22d8e70 -> Node0x22d9550;
	Node0x22d9550 -> Node0x22d95c0;
	Node0x22d9130 -> Node0x22d95c0;
	Node0x22d95c0 -> Node0x22d9630;
	Node0x22d9090 -> Node0x22d9630;
	Node0x22d9630 -> Node0x22d96a0;
	Node0x22d9210 -> Node0x22d96a0;
	Node0x22d96a0 -> Node0x22d9710;
	Node0x22d92f0 -> Node0x22d9710;
	Node0x22d9710 -> Node0x22d9780;
	Node0x22d9400 -> Node0x22d9780;
	Node0x22d8d90 -> Node0x22d97f0;
	Node0x22d9780 -> Node0x22d97f0;
	Node0x22d97f0 -> Node0x2279268;
	Node0x2279268 -> Node0x22d9c90;
}
