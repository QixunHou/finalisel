digraph "DFG for'crackme' function" {
	Node0x536b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x536b90[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x536c50[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x536cc0[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x536d60[shape=record, label="  %7 = mul i32 %6, 5"];
	Node0x536dd0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x536e70[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0x536ee0[shape=record, label="  %10 = and i32 %1, %0"];
	Node0x536f50[shape=record, label="  %11 = xor i32 %4, -1"];
	Node0x536ff0[shape=record, label="  %12 = mul i32 %11, -3"];
	Node0x537060[shape=record, label="  %13 = and i32 %3, %0"];
	Node0x537100[shape=record, label="  %14 = mul i32 %13, -7"];
	Node0x5371a0[shape=record, label="  %15 = mul i32 %10, -9"];
	Node0x537210[shape=record, label="  %16 = add i32 %0, 1"];
	Node0x537280[shape=record, label="  %17 = add i32 %16, %9"];
	Node0x5372f0[shape=record, label="  %18 = sub i32 %17, %8"];
	Node0x537360[shape=record, label="  %19 = add i32 %18, %10"];
	Node0x5373d0[shape=record, label="  %20 = add i32 %19, %7"];
	Node0x537440[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x5374b0[shape=record, label="  %22 = add i32 %21, %14"];
	Node0x537520[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x537590[shape=record, label="  %24 = icmp eq i32 %23, %5"];
	Node0x4d7268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x537a30[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x537a80[shape=record, label="  ret void"];
	Node0x536b20 -> Node0x536b90;
	Node0x536b90 -> Node0x536c50;
	Node0x536c50 -> Node0x536cc0;
	Node0x536cc0 -> Node0x536d60;
	Node0x536d60 -> Node0x536dd0;
	Node0x536dd0 -> Node0x536e70;
	Node0x536e70 -> Node0x536ee0;
	Node0x536ee0 -> Node0x536f50;
	Node0x536f50 -> Node0x536ff0;
	Node0x536ff0 -> Node0x537060;
	Node0x537060 -> Node0x537100;
	Node0x537100 -> Node0x5371a0;
	Node0x5371a0 -> Node0x537210;
	Node0x537210 -> Node0x537280;
	Node0x537280 -> Node0x5372f0;
	Node0x5372f0 -> Node0x537360;
	Node0x537360 -> Node0x5373d0;
	Node0x5373d0 -> Node0x537440;
	Node0x537440 -> Node0x5374b0;
	Node0x5374b0 -> Node0x537520;
	Node0x537520 -> Node0x537590;
	Node0x537590 -> Node0x4d7268;
	Node0x4d7268 -> Node0x537a30;
	Node0x537a30 -> Node0x537a80;
edge [color=red]
	Node0x536b20 -> Node0x536b90;
	Node0x536b90 -> Node0x536c50;
	Node0x536cc0 -> Node0x536d60;
	Node0x536b90 -> Node0x536f50;
	Node0x536f50 -> Node0x536ff0;
	Node0x536b20 -> Node0x537060;
	Node0x537060 -> Node0x537100;
	Node0x536ee0 -> Node0x5371a0;
	Node0x537210 -> Node0x537280;
	Node0x536e70 -> Node0x537280;
	Node0x537280 -> Node0x5372f0;
	Node0x536dd0 -> Node0x5372f0;
	Node0x5372f0 -> Node0x537360;
	Node0x536ee0 -> Node0x537360;
	Node0x537360 -> Node0x5373d0;
	Node0x536d60 -> Node0x5373d0;
	Node0x5373d0 -> Node0x537440;
	Node0x536ff0 -> Node0x537440;
	Node0x537440 -> Node0x5374b0;
	Node0x537100 -> Node0x5374b0;
	Node0x5374b0 -> Node0x537520;
	Node0x5371a0 -> Node0x537520;
	Node0x537520 -> Node0x537590;
	Node0x536c50 -> Node0x537590;
	Node0x537590 -> Node0x4d7268;
	Node0x4d7268 -> Node0x537a30;
}
