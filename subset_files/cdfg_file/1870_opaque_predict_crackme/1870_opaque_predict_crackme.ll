; ModuleID = '../.././c_source_file/1870_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1870_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %3, -1
  %10 = and i32 %9, %4
  %11 = xor i32 %5, %4
  %12 = or i32 %11, %10
  %13 = shl i32 %12, 1
  %14 = sub i32 %13, %8
  %15 = and i32 %5, %3
  %16 = and i32 %15, %4
  %17 = xor i32 %5, %3
  %18 = xor i32 %17, %4
  %19 = xor i32 %18, -1
  %20 = or i32 %16, %19
  %21 = shl i32 %20, 2
  %22 = add i32 %14, %21
  %23 = xor i32 %1, -1
  %24 = xor i32 %2, %0
  %25 = or i32 %24, %23
  %26 = and i32 %23, %0
  %27 = and i32 %26, %2
  %28 = or i32 %7, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %27, %29
  %31 = xor i32 %2, -1
  %32 = or i32 %31, %0
  %33 = xor i32 %1, %0
  %34 = and i32 %32, %33
  %35 = xor i32 %0, -1
  %36 = or i32 %35, %2
  %37 = xor i32 %36, %1
  %38 = or i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %39, %1
  %41 = xor i32 %27, %28
  %42 = and i32 %2, %1
  %43 = and i32 %42, %0
  %44 = and i32 %7, %35
  %45 = xor i32 %43, -1
  %46 = xor i32 %44, %45
  %47 = and i32 %2, %0
  %48 = or i32 %2, %1
  %49 = xor i32 %47, %48
  %50 = xor i32 %42, -1
  %51 = and i32 %50, %35
  %52 = xor i32 %24, -1
  %53 = or i32 %52, %23
  %54 = or i32 %1, %0
  %55 = xor i32 %54, -1
  %56 = add i32 %54, 1
  %57 = and i32 %24, %54
  %58 = xor i32 %55, %2
  %59 = and i32 %48, %35
  %60 = or i32 %43, %59
  %61 = and i32 %31, %1
  %62 = xor i32 %61, -1
  %63 = and i32 %62, %35
  %64 = or i32 %23, %0
  %65 = and i32 %64, %52
  %66 = shl i32 %65, 1
  %67 = xor i32 %64, -1
  %68 = or i32 %67, %2
  %69 = and i32 %42, %35
  %70 = or i32 %69, %8
  %71 = xor i32 %48, -1
  %72 = or i32 %47, %71
  %73 = shl i32 %72, 1
  %74 = xor i32 %50, %0
  %75 = xor i32 %62, %0
  %76 = or i32 %43, %44
  %77 = xor i32 %48, %35
  %78 = xor i32 %77, %43
  %79 = or i32 %42, %26
  %80 = and i32 %1, %0
  %81 = or i32 %24, %80
  %82 = or i32 %33, %31
  %83 = xor i32 %38, %1
  %84 = xor i32 %67, %2
  %85 = xor i32 %26, -1
  %86 = xor i32 %85, %2
  %87 = xor i32 %47, %23
  %88 = xor i32 %33, -1
  %89 = and i32 %52, %88
  %90 = add i32 %64, 1
  %91 = or i32 %50, %0
  %92 = and i32 %31, %85
  %93 = or i32 %80, %39
  %94 = and i32 %54, %2
  %95 = and i32 %7, %85
  %96 = xor i32 %7, -1
  %97 = or i32 %96, %67
  %98 = or i32 %31, %1
  %99 = xor i32 %98, -1
  %100 = add i32 %98, 1
  %101 = or i32 %7, %26
  %102 = or i32 %52, %55
  %103 = shl i32 %88, 1
  %104 = or i32 %98, %35
  %105 = and i32 %32, %1
  %106 = or i32 %23, %2
  %107 = xor i32 %106, %35
  %108 = xor i32 %107, %27
  %109 = and i32 %24, %64
  %110 = and i32 %88, %2
  %111 = xor i32 %32, -1
  %112 = or i32 %33, %111
  %113 = or i32 %7, %55
  %114 = or i32 %7, %80
  %115 = and i32 %33, %52
  %116 = or i32 %111, %1
  %117 = xor i32 %47, %54
  %118 = xor i32 %99, %0
  %119 = or i32 %33, %39
  %120 = and i32 %54, %52
  %121 = and i32 %38, %23
  %122 = xor i32 %38, %80
  %123 = and i32 %71, %35
  %124 = shl i32 %123, 1
  %125 = and i32 %61, %35
  %126 = and i32 %71, %0
  %127 = and i32 %61, %0
  %128 = and i32 %99, %35
  %129 = and i32 %99, %0
  %130 = or i32 %9, %4
  %131 = xor i32 %130, %5
  %132 = shl i32 %131, 1
  %133 = or i32 %5, %4
  %134 = xor i32 %133, -1
  %135 = xor i32 %4, %3
  %136 = xor i32 %135, -1
  %137 = or i32 %136, %5
  %138 = xor i32 %5, -1
  %139 = and i32 %138, %3
  %140 = xor i32 %139, -1
  %141 = or i32 %140, %4
  %142 = xor i32 %4, -1
  %143 = and i32 %9, %5
  %144 = and i32 %143, %142
  %145 = or i32 %9, %5
  %146 = and i32 %145, %4
  %147 = xor i32 %146, -1
  %148 = xor i32 %144, %147
  %149 = xor i32 %11, -1
  %150 = or i32 %149, %136
  %151 = and i32 %149, %9
  %152 = and i32 %5, %4
  %153 = or i32 %152, %135
  %154 = or i32 %138, %3
  %155 = and i32 %154, %142
  %156 = xor i32 %152, -1
  %157 = and i32 %156, %3
  %158 = or i32 %5, %3
  %159 = xor i32 %158, %4
  %160 = or i32 %16, %159
  %161 = and i32 %138, %4
  %162 = xor i32 %154, -1
  %163 = or i32 %161, %162
  %164 = and i32 %130, %138
  %165 = or i32 %15, %142
  %166 = shl i32 %165, 1
  %167 = and i32 %140, %142
  %168 = xor i32 %140, %4
  %169 = xor i32 %161, -1
  %170 = and i32 %169, %9
  %171 = or i32 %138, %4
  %172 = and i32 %171, %9
  %173 = shl i32 %172, 1
  %174 = and i32 %154, %4
  %175 = or i32 %154, %142
  %176 = xor i32 %171, -1
  %177 = or i32 %135, %176
  %178 = xor i32 %15, -1
  %179 = or i32 %178, %142
  %180 = xor i32 %17, -1
  %181 = xor i32 %180, %4
  %182 = add i32 %17, 1
  %183 = or i32 %4, %3
  %184 = xor i32 %183, -1
  %185 = or i32 %149, %184
  %186 = and i32 %130, %149
  %187 = xor i32 %10, -1
  %188 = and i32 %17, %187
  %189 = and i32 %11, %187
  %190 = or i32 %144, %146
  %191 = and i32 %180, %142
  %192 = or i32 %17, %142
  %193 = and i32 %149, %3
  %194 = xor i32 %158, -1
  %195 = or i32 %152, %194
  %196 = xor i32 %130, -1
  %197 = or i32 %11, %196
  %198 = or i32 %149, %3
  %199 = or i32 %152, %3
  %200 = and i32 %11, %135
  %201 = and i32 %158, %142
  %202 = xor i32 %16, -1
  %203 = xor i32 %201, %202
  %204 = and i32 %130, %180
  %205 = xor i32 %161, %178
  %206 = or i32 %176, %3
  %207 = xor i32 %134, %3
  %208 = and i32 %4, %3
  %209 = xor i32 %154, %208
  %210 = or i32 %208, %180
  %211 = shl i32 %210, 1
  %212 = shl i32 %149, 1
  %213 = or i32 %149, %9
  %214 = and i32 %135, %149
  %215 = shl i32 %214, 1
  %216 = xor i32 %171, %3
  %217 = xor i32 %139, %4
  %218 = xor i32 %10, %140
  %219 = xor i32 %16, %18
  %220 = xor i32 %162, %4
  %221 = xor i32 %192, -1
  %222 = or i32 %144, %221
  %223 = or i32 %180, %196
  %224 = or i32 %208, %5
  %225 = shl i32 %224, 1
  %226 = xor i32 %159, %202
  %227 = and i32 %17, %4
  %228 = xor i32 %15, %4
  %229 = and i32 %17, %142
  %230 = or i32 %16, %229
  %231 = shl i32 %230, 1
  %232 = xor i32 %152, %3
  %233 = shl i32 %232, 1
  %234 = and i32 %143, %4
  %235 = xor i32 %145, %4
  %236 = or i32 %234, %235
  %237 = or i32 %139, %4
  %238 = or i32 %152, %9
  %239 = or i32 %17, %196
  %240 = and i32 %183, %5
  %241 = or i32 %161, %9
  %242 = xor i32 %235, -1
  %243 = xor i32 %234, %242
  %244 = or i32 %176, %9
  %245 = xor i32 %169, %3
  %246 = and i32 %133, %136
  %247 = or i32 %17, %10
  %248 = xor i32 %208, -1
  %249 = and i32 %248, %5
  %250 = or i32 %10, %180
  %251 = or i32 %158, %4
  %252 = or i32 %180, %142
  %253 = and i32 %11, %3
  %254 = or i32 %17, %184
  %255 = or i32 %138, %136
  %256 = shl i32 %255, 1
  %257 = xor i32 %187, %5
  %258 = or i32 %184, %5
  %259 = and i32 %149, %136
  %260 = or i32 %17, %4
  %261 = xor i32 %260, -1
  %262 = or i32 %234, %261
  %263 = and i32 %145, %142
  %264 = or i32 %234, %263
  %265 = add i32 %135, 1
  %266 = or i32 %135, %149
  %267 = or i32 %134, %136
  %268 = shl i32 %267, 2
  %269 = xor i32 %10, %178
  %270 = or i32 %161, %136
  %271 = and i32 %138, %187
  %272 = shl i32 %271, 1
  %273 = and i32 %15, %142
  %274 = and i32 %158, %4
  %275 = or i32 %273, %274
  %276 = add i32 %161, 1
  %277 = xor i32 %171, %208
  %278 = xor i32 %154, %4
  %279 = or i32 %161, %3
  %280 = xor i32 %144, %192
  %281 = shl i32 %171, 2
  %282 = and i32 %171, %3
  %283 = xor i32 %152, %158
  %284 = or i32 %138, %196
  %285 = shl i32 %130, 1
  %286 = and i32 %187, %5
  %287 = xor i32 %156, %3
  %288 = or i32 %139, %142
  %289 = and i32 %140, %4
  %290 = and i32 %169, %136
  %291 = or i32 %162, %142
  %292 = and i32 %11, %136
  %293 = shl i32 %292, 1
  %294 = and i32 %171, %135
  %295 = or i32 %273, %227
  %296 = or i32 %194, %4
  %297 = shl i32 %296, 2
  %298 = xor i32 %274, -1
  %299 = xor i32 %273, %298
  %300 = or i32 %162, %4
  %301 = xor i32 %263, 1073741823
  %302 = xor i32 %301, %234
  %303 = shl i32 %302, 2
  %304 = and i32 %183, %180
  %305 = or i32 %135, %138
  %306 = or i32 %16, %201
  %307 = or i32 %10, %149
  %308 = and i32 %178, %4
  %309 = xor i32 %10, %5
  %310 = and i32 %169, %3
  %311 = or i32 %11, %9
  %312 = xor i32 %208, %5
  %313 = xor i32 %152, %140
  %314 = or i32 %17, %208
  %315 = or i32 %11, %3
  %316 = xor i32 %234, %19
  %317 = add i32 %139, 1
  %318 = and i32 %171, %136
  %319 = xor i32 %176, %3
  %320 = and i32 %17, %248
  %321 = and i32 %11, %130
  %322 = xor i32 %133, %208
  %323 = and i32 %135, %138
  %324 = or i32 %180, %184
  %325 = or i32 %158, %142
  %326 = or i32 %11, %136
  %327 = and i32 %133, %9
  %328 = xor i32 %152, %183
  %329 = xor i32 %152, %130
  %330 = and i32 %133, %3
  %331 = and i32 %133, %135
  %332 = and i32 %178, %142
  %333 = or i32 %154, %4
  %334 = xor i32 %248, %5
  %335 = or i32 %208, %134
  %336 = and i32 %149, %187
  %337 = or i32 %15, %4
  %338 = or i32 %178, %4
  %339 = and i32 %138, %136
  %340 = shl i32 %339, 1
  %341 = and i32 %135, %5
  %342 = xor i32 %196, %5
  %343 = and i32 %11, %248
  %344 = or i32 %149, %196
  %345 = or i32 %11, %184
  %346 = xor i32 %194, %4
  %347 = and i32 %194, %142
  %348 = mul i32 %347, 26
  %349 = and i32 %139, %142
  %350 = and i32 %194, %4
  %351 = mul i32 %350, 11
  %352 = and i32 %139, %4
  %353 = mul i32 %352, 42
  %354 = and i32 %162, %142
  %355 = shl i32 %354, 4
  %356 = and i32 %162, %4
  %357 = mul i32 %356, 10
  %358 = mul i32 %16, 43
  %359 = sub i32 %276, %127
  %360 = sub i32 %359, %274
  %361 = add i32 %360, %216
  %362 = add i32 %361, %205
  %363 = add i32 %362, %151
  %364 = sub i32 %363, %262
  %365 = mul i32 %364, 5
  %366 = add i32 %126, %129
  %367 = add i32 %366, %125
  %368 = sub i32 %330, %367
  %369 = sub i32 %368, %315
  %370 = add i32 %369, %295
  %371 = mul i32 %370, 3
  %372 = add i32 %273, %349
  %373 = mul i32 %372, 17
  %374 = add i32 %327, %43
  %375 = shl i32 %374, 2
  %376 = add i32 %69, %128
  %377 = mul i32 %376, -7
  %378 = add i32 %58, -1
  %379 = add i32 %378, %121
  %380 = add i32 %379, %112
  %381 = add i32 %380, %101
  %382 = add i32 %381, %93
  %383 = add i32 %382, %63
  %384 = add i32 %383, %138
  %385 = add i32 %384, %76
  %386 = add i32 %385, %137
  %387 = add i32 %386, %134
  %388 = add i32 %387, %311
  %389 = add i32 %388, %344
  %390 = add i32 %389, %217
  %391 = add i32 %390, %204
  %392 = add i32 %391, %189
  %393 = add i32 %392, %179
  %394 = add i32 %393, %170
  %395 = add i32 %394, %150
  %396 = shl i32 %395, 1
  %397 = sub i32 %56, %1
  %398 = add i32 %397, %90
  %399 = sub i32 %398, %47
  %400 = sub i32 %399, %68
  %401 = add i32 %400, %61
  %402 = add i32 %401, %82
  %403 = sub i32 %402, %84
  %404 = sub i32 %403, %86
  %405 = sub i32 %404, %92
  %406 = add i32 %405, %48
  %407 = add i32 %406, %94
  %408 = add i32 %407, %100
  %409 = sub i32 %408, %103
  %410 = add i32 %409, %36
  %411 = add i32 %410, %110
  %412 = sub i32 %411, %3
  %413 = add i32 %412, %9
  %414 = add i32 %413, %25
  %415 = add i32 %414, %34
  %416 = sub i32 %415, %37
  %417 = sub i32 %416, %40
  %418 = add i32 %417, %49
  %419 = sub i32 %418, %51
  %420 = sub i32 %419, %53
  %421 = add i32 %420, %57
  %422 = add i32 %421, %74
  %423 = add i32 %422, %75
  %424 = sub i32 %423, %79
  %425 = sub i32 %424, %81
  %426 = sub i32 %425, %83
  %427 = add i32 %426, %87
  %428 = add i32 %427, %89
  %429 = sub i32 %428, %91
  %430 = add i32 %429, %95
  %431 = sub i32 %430, %97
  %432 = add i32 %431, %102
  %433 = add i32 %432, %104
  %434 = sub i32 %433, %105
  %435 = add i32 %434, %109
  %436 = add i32 %435, %113
  %437 = add i32 %436, %114
  %438 = sub i32 %437, %115
  %439 = sub i32 %438, %116
  %440 = add i32 %439, %117
  %441 = sub i32 %440, %118
  %442 = sub i32 %441, %44
  %443 = sub i32 %442, %119
  %444 = add i32 %443, %120
  %445 = sub i32 %444, %122
  %446 = add i32 %445, %142
  %447 = sub i32 %446, %4
  %448 = add i32 %447, %30
  %449 = sub i32 %448, %41
  %450 = add i32 %449, %46
  %451 = sub i32 %450, %60
  %452 = sub i32 %451, %66
  %453 = sub i32 %452, %70
  %454 = sub i32 %453, %73
  %455 = sub i32 %454, %78
  %456 = sub i32 %455, %108
  %457 = sub i32 %456, %124
  %458 = add i32 %457, %196
  %459 = add i32 %458, %265
  %460 = add i32 %459, %135
  %461 = sub i32 %460, %164
  %462 = add i32 %461, %182
  %463 = add i32 %462, %139
  %464 = sub i32 %463, %17
  %465 = sub i32 %464, %154
  %466 = add i32 %465, %15
  %467 = add i32 %466, %240
  %468 = sub i32 %467, %249
  %469 = add i32 %468, %257
  %470 = add i32 %469, %258
  %471 = sub i32 %470, %284
  %472 = sub i32 %471, %285
  %473 = add i32 %472, %286
  %474 = add i32 %473, %161
  %475 = add i32 %474, %305
  %476 = sub i32 %475, %309
  %477 = add i32 %476, %312
  %478 = add i32 %477, %317
  %479 = add i32 %478, %323
  %480 = add i32 %479, %334
  %481 = sub i32 %480, %341
  %482 = sub i32 %481, %342
  %483 = add i32 %482, %377
  %484 = sub i32 %483, %132
  %485 = sub i32 %484, %141
  %486 = add i32 %485, %153
  %487 = sub i32 %486, %155
  %488 = add i32 %487, %157
  %489 = sub i32 %488, %163
  %490 = sub i32 %489, %167
  %491 = sub i32 %490, %168
  %492 = add i32 %491, %174
  %493 = sub i32 %492, %175
  %494 = sub i32 %493, %177
  %495 = sub i32 %494, %181
  %496 = sub i32 %495, %185
  %497 = add i32 %496, %186
  %498 = add i32 %497, %188
  %499 = add i32 %498, %191
  %500 = sub i32 %499, %192
  %501 = add i32 %500, %193
  %502 = sub i32 %501, %195
  %503 = sub i32 %502, %197
  %504 = add i32 %503, %198
  %505 = sub i32 %504, %199
  %506 = sub i32 %505, %200
  %507 = sub i32 %506, %206
  %508 = add i32 %507, %159
  %509 = sub i32 %508, %207
  %510 = sub i32 %509, %209
  %511 = sub i32 %510, %212
  %512 = sub i32 %511, %213
  %513 = sub i32 %512, %218
  %514 = add i32 %513, %220
  %515 = add i32 %514, %223
  %516 = sub i32 %515, %225
  %517 = add i32 %516, %227
  %518 = sub i32 %517, %228
  %519 = sub i32 %518, %237
  %520 = sub i32 %519, %238
  %521 = sub i32 %520, %239
  %522 = sub i32 %521, %241
  %523 = add i32 %522, %244
  %524 = sub i32 %523, %245
  %525 = sub i32 %524, %246
  %526 = add i32 %525, %247
  %527 = sub i32 %526, %250
  %528 = add i32 %527, %251
  %529 = sub i32 %528, %252
  %530 = sub i32 %529, %253
  %531 = sub i32 %530, %254
  %532 = sub i32 %531, %256
  %533 = sub i32 %532, %259
  %534 = sub i32 %533, %266
  %535 = sub i32 %534, %269
  %536 = sub i32 %535, %270
  %537 = sub i32 %536, %272
  %538 = add i32 %537, %277
  %539 = add i32 %538, %278
  %540 = add i32 %539, %279
  %541 = sub i32 %540, %281
  %542 = add i32 %541, %282
  %543 = add i32 %542, %283
  %544 = add i32 %543, %287
  %545 = add i32 %544, %288
  %546 = add i32 %545, %289
  %547 = sub i32 %546, %290
  %548 = add i32 %547, %291
  %549 = sub i32 %548, %294
  %550 = add i32 %549, %300
  %551 = add i32 %550, %304
  %552 = add i32 %551, %307
  %553 = add i32 %552, %308
  %554 = add i32 %553, %310
  %555 = add i32 %554, %313
  %556 = sub i32 %555, %314
  %557 = sub i32 %556, %229
  %558 = sub i32 %557, %318
  %559 = sub i32 %558, %319
  %560 = add i32 %559, %320
  %561 = add i32 %560, %321
  %562 = add i32 %561, %322
  %563 = sub i32 %562, %324
  %564 = sub i32 %563, %325
  %565 = add i32 %564, %326
  %566 = sub i32 %565, %328
  %567 = sub i32 %566, %329
  %568 = sub i32 %567, %331
  %569 = sub i32 %568, %332
  %570 = add i32 %569, %333
  %571 = add i32 %570, %335
  %572 = sub i32 %571, %336
  %573 = sub i32 %572, %337
  %574 = add i32 %573, %338
  %575 = sub i32 %574, %18
  %576 = sub i32 %575, %340
  %577 = sub i32 %576, %343
  %578 = add i32 %577, %345
  %579 = add i32 %578, %346
  %580 = sub i32 %579, %148
  %581 = sub i32 %580, %160
  %582 = sub i32 %581, %166
  %583 = sub i32 %582, %173
  %584 = add i32 %583, %190
  %585 = sub i32 %584, %203
  %586 = sub i32 %585, %211
  %587 = sub i32 %586, %215
  %588 = add i32 %587, %219
  %589 = sub i32 %588, %222
  %590 = sub i32 %589, %226
  %591 = sub i32 %590, %233
  %592 = add i32 %591, %236
  %593 = sub i32 %592, %243
  %594 = sub i32 %593, %264
  %595 = sub i32 %594, %268
  %596 = sub i32 %595, %275
  %597 = sub i32 %596, %280
  %598 = sub i32 %597, %293
  %599 = sub i32 %598, %297
  %600 = add i32 %599, %299
  %601 = add i32 %600, %306
  %602 = sub i32 %601, %316
  %603 = add i32 %602, %348
  %604 = add i32 %603, %351
  %605 = add i32 %604, %353
  %606 = add i32 %605, %355
  %607 = add i32 %606, %357
  %608 = add i32 %607, %358
  %609 = sub i32 %608, %231
  %610 = add i32 %609, %373
  %611 = add i32 %610, %375
  %612 = sub i32 %611, %303
  %613 = add i32 %612, %371
  %614 = add i32 %613, %365
  %615 = add i32 %614, %396
  %616 = icmp eq i32 %22, %615
  %617 = select i1 %616, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %618 = tail call i32 @puts(i8* nonnull dereferenceable(1) %617)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
