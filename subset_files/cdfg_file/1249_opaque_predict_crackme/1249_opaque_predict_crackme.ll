; ModuleID = '../.././c_source_file/1249_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1249_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = shl i32 %0, 1
  %5 = xor i32 %1, -1
  %6 = and i32 %5, %0
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = or i32 %8, %6
  %10 = and i32 %1, %0
  %11 = or i32 %2, %1
  %12 = xor i32 %11, %10
  %13 = xor i32 %8, %0
  %14 = and i32 %2, %1
  %15 = and i32 %14, %0
  %16 = xor i32 %0, -1
  %17 = xor i32 %11, %16
  %18 = xor i32 %17, %15
  %19 = or i32 %7, %0
  %20 = xor i32 %1, %0
  %21 = and i32 %19, %20
  %22 = or i32 %2, %0
  %23 = xor i32 %22, -1
  %24 = or i32 %23, %1
  %25 = and i32 %11, %16
  %26 = xor i32 %6, -1
  %27 = xor i32 %2, %1
  %28 = and i32 %27, %26
  %29 = or i32 %6, %2
  %30 = and i32 %2, %0
  %31 = or i32 %30, %20
  %32 = or i32 %1, %0
  %33 = and i32 %32, %2
  %34 = shl i32 %33, 1
  %35 = xor i32 %19, -1
  %36 = or i32 %35, %1
  %37 = and i32 %7, %0
  %38 = or i32 %37, %1
  %39 = xor i32 %14, -1
  %40 = or i32 %39, %0
  %41 = shl i32 %40, 2
  %42 = or i32 %10, %2
  %43 = or i32 %7, %1
  %44 = xor i32 %43, -1
  %45 = or i32 %37, %44
  %46 = xor i32 %30, -1
  %47 = or i32 %27, %0
  %48 = xor i32 %2, %0
  %49 = xor i32 %48, -1
  %50 = or i32 %20, %49
  %51 = xor i32 %20, -1
  %52 = or i32 %37, %51
  %53 = xor i32 %8, -1
  %54 = and i32 %53, %0
  %55 = xor i32 %11, -1
  %56 = or i32 %55, %0
  %57 = or i32 %14, %0
  %58 = and i32 %49, %1
  %59 = or i32 %10, %7
  %60 = and i32 %5, %2
  %61 = and i32 %60, %0
  %62 = xor i32 %27, %0
  %63 = or i32 %61, %62
  %64 = or i32 %5, %0
  %65 = and i32 %64, %2
  %66 = shl i32 %65, 1
  %67 = xor i32 %32, -1
  %68 = xor i32 %27, -1
  %69 = or i32 %68, %67
  %70 = and i32 %14, %16
  %71 = and i32 %11, %0
  %72 = or i32 %70, %71
  %73 = xor i32 %30, %64
  %74 = add i32 %14, 1
  %75 = xor i32 %19, %1
  %76 = xor i32 %37, %43
  %77 = or i32 %51, %2
  %78 = xor i32 %43, %10
  %79 = or i32 %5, %2
  %80 = xor i32 %79, %16
  %81 = xor i32 %80, %61
  %82 = xor i32 %64, -1
  %83 = or i32 %82, %2
  %84 = xor i32 %37, -1
  %85 = and i32 %84, %5
  %86 = or i32 %30, %1
  %87 = or i32 %30, %8
  %88 = or i32 %35, %51
  %89 = xor i32 %64, %2
  %90 = or i32 %23, %51
  %91 = xor i32 %6, %53
  %92 = or i32 %67, %2
  %93 = and i32 %39, %16
  %94 = and i32 %20, %7
  %95 = or i32 %68, %82
  %96 = and i32 %84, %51
  %97 = or i32 %10, %68
  %98 = and i32 %48, %32
  %99 = or i32 %48, %1
  %100 = xor i32 %22, %10
  %101 = xor i32 %53, %0
  %102 = and i32 %64, %68
  %103 = xor i32 %14, %0
  %104 = shl i32 %103, 1
  %105 = xor i32 %26, %2
  %106 = xor i32 %44, %0
  %107 = and i32 %60, %16
  %108 = and i32 %79, %0
  %109 = xor i32 %108, -1
  %110 = xor i32 %107, %109
  %111 = or i32 %68, %0
  %112 = and i32 %27, %0
  %113 = and i32 %53, %16
  %114 = or i32 %20, %7
  %115 = and i32 %79, %16
  %116 = xor i32 %115, 1073741823
  %117 = xor i32 %116, %61
  %118 = shl i32 %117, 2
  %119 = xor i32 %15, -1
  %120 = xor i32 %25, %119
  %121 = and i32 %19, %51
  %122 = and i32 %32, %49
  %123 = shl i32 %122, 1
  %124 = and i32 %27, %64
  %125 = or i32 %11, %16
  %126 = add i32 %43, 1
  %127 = or i32 %30, %51
  %128 = or i32 %27, %16
  %129 = or i32 %20, %35
  %130 = and i32 %68, %16
  %131 = and i32 %19, %5
  %132 = or i32 %20, %23
  %133 = and i32 %48, %26
  %134 = xor i32 %10, %2
  %135 = xor i32 %22, %1
  %136 = xor i32 %46, %1
  %137 = and i32 %46, %1
  %138 = and i32 %49, %51
  %139 = and i32 %43, %0
  %140 = or i32 %27, %6
  %141 = and i32 %48, %20
  %142 = shl i32 %141, 1
  %143 = or i32 %49, %82
  %144 = or i32 %37, %14
  %145 = or i32 %10, %23
  %146 = or i32 %10, %44
  %147 = and i32 %22, %1
  %148 = shl i32 %147, 1
  %149 = and i32 %48, %51
  %150 = or i32 %14, %6
  %151 = shl i32 %150, 1
  %152 = or i32 %48, %20
  %153 = shl i32 %152, 1
  %154 = xor i32 %10, -1
  %155 = and i32 %68, %154
  %156 = xor i32 %84, %1
  %157 = and i32 %27, %16
  %158 = and i32 %49, %26
  %159 = or i32 %27, %67
  %160 = xor i32 %19, %10
  %161 = or i32 %39, %16
  %162 = or i32 %44, %16
  %163 = add i32 %6, 1
  %164 = or i32 %37, %20
  %165 = add i32 %10, 1
  %166 = or i32 %35, %5
  %167 = and i32 %43, %16
  %168 = xor i32 %30, %5
  %169 = and i32 %22, %5
  %170 = xor i32 %154, %2
  %171 = or i32 %8, %0
  %172 = and i32 %27, %32
  %173 = xor i32 %112, -1
  %174 = xor i32 %70, %173
  %175 = or i32 %49, %67
  %176 = shl i32 %175, 1
  %177 = and i32 %49, %154
  %178 = xor i32 %30, %32
  %179 = xor i32 %71, 2147483647
  %180 = xor i32 %179, %70
  %181 = shl i32 %180, 1
  %182 = and i32 %7, %154
  %183 = xor i32 %39, %0
  %184 = or i32 %30, %5
  %185 = or i32 %61, %115
  %186 = and i32 %19, %1
  %187 = and i32 %55, %16
  %188 = mul i32 %187, -15
  %189 = and i32 %8, %16
  %190 = shl i32 %189, 1
  %191 = and i32 %55, %0
  %192 = and i32 %8, %0
  %193 = and i32 %44, %16
  %194 = mul i32 %193, -12
  %195 = mul i32 %70, 7
  %196 = and i32 %44, %0
  %197 = mul i32 %196, -9
  %198 = shl i32 %15, 1
  %199 = add i32 %155, %77
  %200 = add i32 %199, %160
  %201 = add i32 %200, %146
  %202 = add i32 %201, %136
  %203 = add i32 %202, %135
  %204 = add i32 %203, %127
  %205 = add i32 %204, %91
  %206 = add i32 %205, %87
  %207 = add i32 %206, %54
  %208 = add i32 %207, %52
  %209 = shl i32 %208, 1
  %210 = add i32 %191, %164
  %211 = add i32 %210, %161
  %212 = sub i32 %211, %159
  %213 = sub i32 %212, %113
  %214 = sub i32 %213, %57
  %215 = mul i32 %214, 3
  %216 = sub i32 %134, %192
  %217 = mul i32 %216, 5
  %218 = sub i32 %6, %1
  %219 = add i32 %218, %67
  %220 = add i32 %219, %2
  %221 = add i32 %220, %163
  %222 = add i32 %221, %165
  %223 = sub i32 %222, %29
  %224 = sub i32 %223, %42
  %225 = add i32 %224, %46
  %226 = add i32 %225, %59
  %227 = add i32 %226, %74
  %228 = add i32 %227, %83
  %229 = sub i32 %228, %89
  %230 = sub i32 %229, %92
  %231 = sub i32 %230, %94
  %232 = sub i32 %231, %105
  %233 = sub i32 %232, %48
  %234 = add i32 %233, %11
  %235 = add i32 %234, %114
  %236 = add i32 %235, %126
  %237 = add i32 %236, %68
  %238 = add i32 %237, %170
  %239 = add i32 %238, %182
  %240 = sub i32 %239, %9
  %241 = add i32 %240, %12
  %242 = add i32 %241, %13
  %243 = sub i32 %242, %21
  %244 = add i32 %243, %24
  %245 = add i32 %244, %25
  %246 = sub i32 %245, %28
  %247 = sub i32 %246, %31
  %248 = sub i32 %247, %34
  %249 = sub i32 %248, %36
  %250 = sub i32 %249, %38
  %251 = add i32 %250, %45
  %252 = add i32 %251, %47
  %253 = sub i32 %252, %50
  %254 = add i32 %253, %56
  %255 = add i32 %254, %58
  %256 = sub i32 %255, %66
  %257 = add i32 %256, %69
  %258 = sub i32 %257, %73
  %259 = sub i32 %258, %75
  %260 = add i32 %259, %76
  %261 = sub i32 %260, %78
  %262 = add i32 %261, %85
  %263 = add i32 %262, %86
  %264 = sub i32 %263, %88
  %265 = sub i32 %264, %90
  %266 = add i32 %265, %93
  %267 = sub i32 %266, %95
  %268 = sub i32 %267, %96
  %269 = sub i32 %268, %97
  %270 = sub i32 %269, %98
  %271 = sub i32 %270, %99
  %272 = sub i32 %271, %100
  %273 = sub i32 %272, %101
  %274 = add i32 %273, %102
  %275 = sub i32 %274, %106
  %276 = add i32 %275, %111
  %277 = sub i32 %276, %112
  %278 = sub i32 %277, %121
  %279 = add i32 %278, %124
  %280 = sub i32 %279, %125
  %281 = add i32 %280, %128
  %282 = add i32 %281, %129
  %283 = add i32 %282, %130
  %284 = sub i32 %283, %131
  %285 = sub i32 %284, %132
  %286 = add i32 %285, %133
  %287 = add i32 %286, %137
  %288 = add i32 %287, %138
  %289 = add i32 %288, %139
  %290 = add i32 %289, %140
  %291 = sub i32 %290, %143
  %292 = sub i32 %291, %144
  %293 = add i32 %292, %145
  %294 = sub i32 %293, %149
  %295 = add i32 %294, %156
  %296 = sub i32 %295, %157
  %297 = sub i32 %296, %158
  %298 = sub i32 %297, %162
  %299 = sub i32 %298, %166
  %300 = add i32 %299, %167
  %301 = add i32 %300, %168
  %302 = sub i32 %301, %169
  %303 = sub i32 %302, %171
  %304 = add i32 %303, %172
  %305 = sub i32 %304, %177
  %306 = sub i32 %305, %178
  %307 = add i32 %306, %183
  %308 = add i32 %307, %184
  %309 = add i32 %308, %186
  %310 = add i32 %309, %18
  %311 = add i32 %310, %41
  %312 = add i32 %311, %63
  %313 = add i32 %312, %72
  %314 = sub i32 %313, %81
  %315 = sub i32 %314, %104
  %316 = add i32 %315, %110
  %317 = add i32 %316, %120
  %318 = sub i32 %317, %123
  %319 = sub i32 %318, %142
  %320 = sub i32 %319, %148
  %321 = sub i32 %320, %151
  %322 = sub i32 %321, %153
  %323 = add i32 %322, %174
  %324 = sub i32 %323, %176
  %325 = add i32 %324, %185
  %326 = add i32 %325, %188
  %327 = sub i32 %326, %190
  %328 = add i32 %327, %194
  %329 = add i32 %328, %195
  %330 = add i32 %329, %197
  %331 = sub i32 %330, %198
  %332 = add i32 %331, %217
  %333 = sub i32 %332, %118
  %334 = sub i32 %333, %181
  %335 = add i32 %334, %215
  %336 = add i32 %335, %209
  %337 = icmp eq i32 %4, %336
  %338 = select i1 %337, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %339 = tail call i32 @puts(i8* nonnull dereferenceable(1) %338)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
