digraph "DFG for'crackme' function" {
	Node0x14bcb20[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x14bcb90[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x14bcc50[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x14bccc0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x14bcd30[shape=record, label="  %7 = add i32 %6, %3"];
	Node0x14bcda0[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x14bce10[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x14bce80[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x14bcef0[shape=record, label="  %11 = xor i32 %5, -1"];
	Node0x14bcf90[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x14bd000[shape=record, label="  %13 = and i32 %4, %0"];
	Node0x14bd070[shape=record, label="  %14 = and i32 %1, %0"];
	Node0x14bd110[shape=record, label="  %15 = shl i32 %14, 2"];
	Node0x14bd180[shape=record, label="  %16 = add i32 %13, %10"];
	Node0x14bd220[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x14bd290[shape=record, label="  %18 = sub i32 2, %0"];
	Node0x14bd300[shape=record, label="  %19 = sub i32 %18, %8"];
	Node0x14bd370[shape=record, label="  %20 = add i32 %19, %9"];
	Node0x14bd3e0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x14bd450[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x14bd4c0[shape=record, label="  %23 = add i32 %22, %17"];
	Node0x14bd530[shape=record, label="  %24 = icmp eq i32 %7, %23"];
	Node0x145d268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x14bd9d0[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x14bda20[shape=record, label="  ret void"];
	Node0x14bcb20 -> Node0x14bcb90;
	Node0x14bcb90 -> Node0x14bcc50;
	Node0x14bcc50 -> Node0x14bccc0;
	Node0x14bccc0 -> Node0x14bcd30;
	Node0x14bcd30 -> Node0x14bcda0;
	Node0x14bcda0 -> Node0x14bce10;
	Node0x14bce10 -> Node0x14bce80;
	Node0x14bce80 -> Node0x14bcef0;
	Node0x14bcef0 -> Node0x14bcf90;
	Node0x14bcf90 -> Node0x14bd000;
	Node0x14bd000 -> Node0x14bd070;
	Node0x14bd070 -> Node0x14bd110;
	Node0x14bd110 -> Node0x14bd180;
	Node0x14bd180 -> Node0x14bd220;
	Node0x14bd220 -> Node0x14bd290;
	Node0x14bd290 -> Node0x14bd300;
	Node0x14bd300 -> Node0x14bd370;
	Node0x14bd370 -> Node0x14bd3e0;
	Node0x14bd3e0 -> Node0x14bd450;
	Node0x14bd450 -> Node0x14bd4c0;
	Node0x14bd4c0 -> Node0x14bd530;
	Node0x14bd530 -> Node0x145d268;
	Node0x145d268 -> Node0x14bd9d0;
	Node0x14bd9d0 -> Node0x14bda20;
edge [color=red]
	Node0x14bcb90 -> Node0x14bcc50;
	Node0x14bcc50 -> Node0x14bccc0;
	Node0x14bccc0 -> Node0x14bcd30;
	Node0x14bcb20 -> Node0x14bcd30;
	Node0x14bce10 -> Node0x14bce80;
	Node0x14bcc50 -> Node0x14bcef0;
	Node0x14bcef0 -> Node0x14bcf90;
	Node0x14bcb90 -> Node0x14bd000;
	Node0x14bd070 -> Node0x14bd110;
	Node0x14bd000 -> Node0x14bd180;
	Node0x14bce80 -> Node0x14bd180;
	Node0x14bd180 -> Node0x14bd220;
	Node0x14bd290 -> Node0x14bd300;
	Node0x14bcda0 -> Node0x14bd300;
	Node0x14bd300 -> Node0x14bd370;
	Node0x14bce10 -> Node0x14bd370;
	Node0x14bd370 -> Node0x14bd3e0;
	Node0x14bcf90 -> Node0x14bd3e0;
	Node0x14bd3e0 -> Node0x14bd450;
	Node0x14bd110 -> Node0x14bd450;
	Node0x14bd450 -> Node0x14bd4c0;
	Node0x14bd220 -> Node0x14bd4c0;
	Node0x14bcd30 -> Node0x14bd530;
	Node0x14bd4c0 -> Node0x14bd530;
	Node0x14bd530 -> Node0x145d268;
	Node0x145d268 -> Node0x14bd9d0;
}
