digraph "DFG for'crackme' function" {
	Node0xb49060[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0xb490d0[shape=record, label="  %6 = and i32 %3, %0"];
	Node0xb49140[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xb491e0[shape=record, label="  %8 = shl i32 %2, 1"];
	Node0xb49250[shape=record, label="  %9 = or i32 %8, 1"];
	Node0xb492c0[shape=record, label="  %10 = add i32 %9, %7"];
	Node0xb49330[shape=record, label="  %11 = and i32 %2, %1"];
	Node0xb493a0[shape=record, label="  %12 = or i32 %2, %1"];
	Node0xb49410[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0xb49480[shape=record, label="  %14 = xor i32 %2, %1"];
	Node0xb494f0[shape=record, label="  %15 = shl i32 %14, 1"];
	Node0xb49590[shape=record, label="  %16 = shl i32 %14, 2"];
	Node0xb49630[shape=record, label="  %17 = xor i32 %16, -4"];
	Node0xb496a0[shape=record, label="  %18 = xor i32 %12, -1"];
	Node0xb49740[shape=record, label="  %19 = mul i32 %18, 6"];
	Node0xb497e0[shape=record, label="  %20 = xor i32 %1, 536870911"];
	Node0xb49850[shape=record, label="  %21 = and i32 %20, %2"];
	Node0xb498f0[shape=record, label="  %22 = shl i32 %21, 3"];
	Node0xb49960[shape=record, label="  %23 = and i32 %5, %1"];
	Node0xb49a00[shape=record, label="  %24 = mul i32 %23, 7"];
	Node0xb49aa0[shape=record, label="  %25 = mul i32 %11, 10"];
	Node0xb49b10[shape=record, label="  %26 = xor i32 %0, -1"];
	Node0xb49b80[shape=record, label="  %27 = xor i32 %3, -1"];
	Node0xb49bf0[shape=record, label="  %28 = and i32 %26, %3"];
	Node0xb49c60[shape=record, label="  %29 = sub i32 3, %1"];
	Node0xb49cd0[shape=record, label="  %30 = add i32 %29, %11"];
	Node0xb49d40[shape=record, label="  %31 = add i32 %30, %27"];
	Node0xb49db0[shape=record, label="  %32 = sub i32 %31, %13"];
	Node0xb4a030[shape=record, label="  %33 = sub i32 %32, %15"];
	Node0xb4a0a0[shape=record, label="  %34 = add i32 %33, %19"];
	Node0xb4a110[shape=record, label="  %35 = add i32 %34, %22"];
	Node0xb4a180[shape=record, label="  %36 = add i32 %35, %24"];
	Node0xb4a1f0[shape=record, label="  %37 = add i32 %36, %25"];
	Node0xb4a260[shape=record, label="  %38 = add i32 %37, %28"];
	Node0xb4a2d0[shape=record, label="  %39 = sub i32 %38, %17"];
	Node0xb4a340[shape=record, label="  %40 = icmp eq i32 %10, %39"];
	Node0xae9268[shape=record, label="  %41 = select i1 %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb4a7e0[shape=record, label="  %42 = tail call i32 @puts(i8* nonnull dereferenceable(1) %41)"];
	Node0xb4a830[shape=record, label="  ret void"];
	Node0xb49060 -> Node0xb490d0;
	Node0xb490d0 -> Node0xb49140;
	Node0xb49140 -> Node0xb491e0;
	Node0xb491e0 -> Node0xb49250;
	Node0xb49250 -> Node0xb492c0;
	Node0xb492c0 -> Node0xb49330;
	Node0xb49330 -> Node0xb493a0;
	Node0xb493a0 -> Node0xb49410;
	Node0xb49410 -> Node0xb49480;
	Node0xb49480 -> Node0xb494f0;
	Node0xb494f0 -> Node0xb49590;
	Node0xb49590 -> Node0xb49630;
	Node0xb49630 -> Node0xb496a0;
	Node0xb496a0 -> Node0xb49740;
	Node0xb49740 -> Node0xb497e0;
	Node0xb497e0 -> Node0xb49850;
	Node0xb49850 -> Node0xb498f0;
	Node0xb498f0 -> Node0xb49960;
	Node0xb49960 -> Node0xb49a00;
	Node0xb49a00 -> Node0xb49aa0;
	Node0xb49aa0 -> Node0xb49b10;
	Node0xb49b10 -> Node0xb49b80;
	Node0xb49b80 -> Node0xb49bf0;
	Node0xb49bf0 -> Node0xb49c60;
	Node0xb49c60 -> Node0xb49cd0;
	Node0xb49cd0 -> Node0xb49d40;
	Node0xb49d40 -> Node0xb49db0;
	Node0xb49db0 -> Node0xb4a030;
	Node0xb4a030 -> Node0xb4a0a0;
	Node0xb4a0a0 -> Node0xb4a110;
	Node0xb4a110 -> Node0xb4a180;
	Node0xb4a180 -> Node0xb4a1f0;
	Node0xb4a1f0 -> Node0xb4a260;
	Node0xb4a260 -> Node0xb4a2d0;
	Node0xb4a2d0 -> Node0xb4a340;
	Node0xb4a340 -> Node0xae9268;
	Node0xae9268 -> Node0xb4a7e0;
	Node0xb4a7e0 -> Node0xb4a830;
edge [color=red]
	Node0xb490d0 -> Node0xb49140;
	Node0xb491e0 -> Node0xb49250;
	Node0xb49250 -> Node0xb492c0;
	Node0xb49140 -> Node0xb492c0;
	Node0xb493a0 -> Node0xb49410;
	Node0xb49480 -> Node0xb494f0;
	Node0xb49480 -> Node0xb49590;
	Node0xb49590 -> Node0xb49630;
	Node0xb493a0 -> Node0xb496a0;
	Node0xb496a0 -> Node0xb49740;
	Node0xb497e0 -> Node0xb49850;
	Node0xb49850 -> Node0xb498f0;
	Node0xb49060 -> Node0xb49960;
	Node0xb49960 -> Node0xb49a00;
	Node0xb49330 -> Node0xb49aa0;
	Node0xb49b10 -> Node0xb49bf0;
	Node0xb49c60 -> Node0xb49cd0;
	Node0xb49330 -> Node0xb49cd0;
	Node0xb49cd0 -> Node0xb49d40;
	Node0xb49b80 -> Node0xb49d40;
	Node0xb49d40 -> Node0xb49db0;
	Node0xb49410 -> Node0xb49db0;
	Node0xb49db0 -> Node0xb4a030;
	Node0xb494f0 -> Node0xb4a030;
	Node0xb4a030 -> Node0xb4a0a0;
	Node0xb49740 -> Node0xb4a0a0;
	Node0xb4a0a0 -> Node0xb4a110;
	Node0xb498f0 -> Node0xb4a110;
	Node0xb4a110 -> Node0xb4a180;
	Node0xb49a00 -> Node0xb4a180;
	Node0xb4a180 -> Node0xb4a1f0;
	Node0xb49aa0 -> Node0xb4a1f0;
	Node0xb4a1f0 -> Node0xb4a260;
	Node0xb49bf0 -> Node0xb4a260;
	Node0xb4a260 -> Node0xb4a2d0;
	Node0xb49630 -> Node0xb4a2d0;
	Node0xb492c0 -> Node0xb4a340;
	Node0xb4a2d0 -> Node0xb4a340;
	Node0xb4a340 -> Node0xae9268;
	Node0xae9268 -> Node0xb4a7e0;
}
