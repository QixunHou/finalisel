; ModuleID = '../.././c_source_file/1166_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1166_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %2, %0
  %5 = xor i32 %4, -1
  %6 = and i32 %5, %1
  %7 = mul i32 %6, -2
  %8 = xor i32 %2, -1
  %9 = or i32 %8, %1
  %10 = xor i32 %9, -1
  %11 = or i32 %10, %0
  %12 = add i32 %7, %11
  %13 = and i32 %1, %0
  %14 = or i32 %2, %1
  %15 = xor i32 %14, %13
  %16 = xor i32 %1, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %2, %0
  %19 = or i32 %18, %17
  %20 = or i32 %8, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %17
  %23 = or i32 %1, %0
  %24 = xor i32 %2, %1
  %25 = and i32 %24, %23
  %26 = xor i32 %1, -1
  %27 = and i32 %5, %26
  %28 = xor i32 %13, -1
  %29 = and i32 %24, %28
  %30 = or i32 %8, %17
  %31 = or i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = or i32 %16, %32
  %34 = or i32 %32, %26
  %35 = and i32 %8, %0
  %36 = or i32 %35, %26
  %37 = xor i32 %23, -1
  %38 = or i32 %24, %37
  %39 = xor i32 %32, %1
  %40 = and i32 %18, %28
  %41 = or i32 %24, %13
  %42 = xor i32 %0, -1
  %43 = and i32 %26, %2
  %44 = and i32 %43, %42
  %45 = or i32 %24, %42
  %46 = xor i32 %45, -1
  %47 = or i32 %44, %46
  %48 = add i32 %4, 1
  %49 = and i32 %43, %0
  %50 = xor i32 %24, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %49, %51
  %53 = or i32 %26, %2
  %54 = and i32 %53, %42
  %55 = xor i32 %54, -1
  %56 = xor i32 %49, %55
  %57 = or i32 %18, %37
  %58 = or i32 %10, %42
  %59 = and i32 %8, %1
  %60 = xor i32 %59, -1
  %61 = and i32 %60, %42
  %62 = shl i32 %61, 1
  %63 = or i32 %26, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %64, %2
  %66 = and i32 %2, %1
  %67 = or i32 %35, %66
  %68 = xor i32 %21, %1
  %69 = xor i32 %18, -1
  %70 = and i32 %69, %28
  %71 = shl i32 %70, 1
  %72 = and i32 %14, %0
  %73 = or i32 %13, %10
  %74 = and i32 %23, %69
  %75 = xor i32 %35, %1
  %76 = or i32 %4, %26
  %77 = and i32 %26, %0
  %78 = xor i32 %77, -1
  %79 = and i32 %24, %78
  %80 = xor i32 %4, %14
  %81 = xor i32 %14, -1
  %82 = or i32 %4, %81
  %83 = or i32 %16, %21
  %84 = xor i32 %31, %1
  %85 = shl i32 %84, 1
  %86 = and i32 %17, %2
  %87 = xor i32 %14, %0
  %88 = and i32 %66, %0
  %89 = xor i32 %88, %50
  %90 = xor i32 %35, -1
  %91 = and i32 %90, %17
  %92 = shl i32 %91, 1
  %93 = and i32 %16, %8
  %94 = xor i32 %90, %1
  %95 = shl i32 %94, 1
  %96 = xor i32 %13, %2
  %97 = or i32 %13, %81
  %98 = or i32 %69, %37
  %99 = or i32 %77, %8
  %100 = xor i32 %66, -1
  %101 = or i32 %100, %42
  %102 = shl i32 %101, 1
  %103 = or i32 %35, %10
  %104 = or i32 %66, %77
  %105 = or i32 %100, %0
  %106 = xor i32 %20, %13
  %107 = shl i32 %106, 1
  %108 = or i32 %18, %13
  %109 = and i32 %60, %0
  %110 = and i32 %69, %1
  %111 = and i32 %18, %1
  %112 = shl i32 %111, 2
  %113 = or i32 %77, %69
  %114 = or i32 %66, %0
  %115 = or i32 %60, %42
  %116 = or i32 %8, %64
  %117 = or i32 %4, %64
  %118 = and i32 %66, %42
  %119 = and i32 %24, %0
  %120 = or i32 %118, %119
  %121 = xor i32 %24, -1
  %122 = and i32 %121, %28
  %123 = shl i32 %122, 1
  %124 = shl i32 %16, 1
  %125 = and i32 %23, %8
  %126 = or i32 %37, %2
  %127 = xor i32 %77, %2
  %128 = and i32 %18, %63
  %129 = or i32 %4, %16
  %130 = and i32 %20, %17
  %131 = or i32 %18, %16
  %132 = xor i32 %77, %100
  %133 = or i32 %81, %0
  %134 = xor i32 %118, -1
  %135 = xor i32 %72, %134
  %136 = or i32 %21, %1
  %137 = or i32 %49, %54
  %138 = shl i32 %35, 1
  %139 = or i32 %59, %77
  %140 = and i32 %31, %26
  %141 = and i32 %20, %26
  %142 = shl i32 %141, 1
  %143 = or i32 %4, %59
  %144 = or i32 %24, %64
  %145 = shl i32 %144, 2
  %146 = xor i32 %4, %63
  %147 = and i32 %16, %2
  %148 = xor i32 %35, %100
  %149 = and i32 %28, %2
  %150 = and i32 %69, %17
  %151 = xor i32 %23, %2
  %152 = xor i32 %9, %13
  %153 = or i32 %59, %0
  %154 = shl i32 %153, 1
  %155 = and i32 %9, %42
  %156 = or i32 %9, %42
  %157 = or i32 %69, %64
  %158 = xor i32 %9, %0
  %159 = xor i32 %4, %1
  %160 = or i32 %69, %1
  %161 = or i32 %35, %1
  %162 = shl i32 %161, 1
  %163 = xor i32 %10, %0
  %164 = shl i32 %163, 1
  %165 = or i32 %13, %8
  %166 = and i32 %100, %42
  %167 = or i32 %32, %17
  %168 = xor i32 %35, %9
  %169 = or i32 %66, %42
  %170 = xor i32 %4, %60
  %171 = xor i32 %53, %0
  %172 = xor i32 %171, 2147483647
  %173 = xor i32 %172, %49
  %174 = shl i32 %173, 1
  %175 = or i32 %77, %2
  %176 = or i32 %8, %37
  %177 = or i32 %49, %171
  %178 = or i32 %88, %87
  %179 = xor i32 %60, %0
  %180 = shl i32 %179, 2
  %181 = or i32 %21, %26
  %182 = and i32 %24, %42
  %183 = shl i32 %182, 1
  %184 = xor i32 %28, %2
  %185 = or i32 %18, %1
  %186 = and i32 %14, %42
  %187 = xor i32 %88, -1
  %188 = xor i32 %186, %187
  %189 = or i32 %121, %42
  %190 = and i32 %20, %16
  %191 = or i32 %9, %0
  %192 = and i32 %23, %121
  %193 = and i32 %24, %63
  %194 = and i32 %18, %16
  %195 = or i32 %13, %32
  %196 = xor i32 %182, %187
  %197 = and i32 %78, %2
  %198 = or i32 %18, %26
  %199 = or i32 %69, %26
  %200 = and i32 %53, %0
  %201 = xor i32 %200, -1
  %202 = xor i32 %44, %201
  %203 = or i32 %17, %2
  %204 = and i32 %23, %2
  %205 = and i32 %16, %5
  %206 = add i32 %31, 1
  %207 = and i32 %31, %1
  %208 = and i32 %18, %23
  %209 = or i32 %16, %69
  %210 = or i32 %16, %8
  %211 = or i32 %4, %1
  %212 = or i32 %13, %121
  %213 = and i32 %18, %78
  %214 = or i32 %44, %200
  %215 = xor i32 %20, %1
  %216 = or i32 %121, %0
  %217 = or i32 %118, %72
  %218 = and i32 %8, %78
  %219 = and i32 %63, %121
  %220 = xor i32 %59, %0
  %221 = or i32 %69, %17
  %222 = and i32 %31, %16
  %223 = and i32 %121, %42
  %224 = shl i32 %223, 1
  %225 = or i32 %35, %17
  %226 = and i32 %16, %69
  %227 = and i32 %20, %1
  %228 = or i32 %18, %77
  %229 = or i32 %77, %121
  %230 = xor i32 %4, %23
  %231 = xor i32 %121, %0
  %232 = or i32 %13, %21
  %233 = xor i32 %78, %2
  %234 = or i32 %60, %0
  %235 = add i32 %77, 1
  %236 = or i32 %14, %42
  %237 = xor i32 %87, %187
  %238 = and i32 %8, %17
  %239 = xor i32 %37, %2
  %240 = or i32 %24, %0
  %241 = and i32 %63, %8
  %242 = xor i32 %81, %0
  %243 = or i32 %88, %182
  %244 = or i32 %49, %50
  %245 = shl i32 %37, 1
  %246 = and i32 %90, %26
  %247 = or i32 %64, %2
  %248 = or i32 %32, %1
  %249 = or i32 %18, %64
  %250 = xor i32 %66, %0
  %251 = shl i32 %250, 1
  %252 = and i32 %8, %28
  %253 = or i32 %35, %16
  %254 = or i32 %88, %51
  %255 = or i32 %4, %17
  %256 = and i32 %100, %0
  %257 = xor i32 %119, %134
  %258 = or i32 %88, %186
  %259 = or i32 %121, %64
  %260 = xor i32 %49, %240
  %261 = or i32 %16, %2
  %262 = and i32 %18, %26
  %263 = or i32 %121, %37
  %264 = and i32 %16, %90
  %265 = or i32 %4, %37
  %266 = or i32 %14, %0
  %267 = xor i32 %100, %0
  %268 = and i32 %121, %0
  %269 = and i32 %81, %42
  %270 = and i32 %59, %42
  %271 = and i32 %81, %0
  %272 = and i32 %59, %0
  %273 = and i32 %10, %42
  %274 = mul i32 %118, -17
  %275 = and i32 %10, %0
  %276 = mul i32 %275, 10
  %277 = add i32 %42, %1
  %278 = add i32 %277, %77
  %279 = add i32 %278, %23
  %280 = add i32 %279, %100
  %281 = add i32 %280, %238
  %282 = add i32 %281, %4
  %283 = add i32 %282, %203
  %284 = add i32 %283, %149
  %285 = add i32 %284, %9
  %286 = add i32 %285, %116
  %287 = add i32 %286, %96
  %288 = add i32 %287, %219
  %289 = add i32 %288, %234
  %290 = add i32 %289, %205
  %291 = add i32 %290, %158
  %292 = add i32 %291, %157
  %293 = add i32 %292, %117
  %294 = add i32 %293, %83
  %295 = add i32 %294, %75
  %296 = add i32 %295, %74
  %297 = add i32 %296, %58
  %298 = shl i32 %297, 1
  %299 = add i32 %90, %2
  %300 = add i32 %299, %269
  %301 = add i32 %300, %273
  %302 = sub i32 %301, %208
  %303 = sub i32 %302, %104
  %304 = mul i32 %303, 5
  %305 = sub i32 %271, %88
  %306 = mul i32 %305, 22
  %307 = sub i32 %272, %270
  %308 = mul i32 %307, 9
  %309 = add i32 %266, %1
  %310 = add i32 %309, %268
  %311 = sub i32 %310, %265
  %312 = sub i32 %311, %212
  %313 = add i32 %312, %156
  %314 = mul i32 %313, 3
  %315 = sub i32 1, %0
  %316 = sub i32 %315, %2
  %317 = add i32 %316, %235
  %318 = add i32 %317, %17
  %319 = sub i32 %318, %30
  %320 = add i32 %319, %48
  %321 = sub i32 %320, %65
  %322 = sub i32 %321, %66
  %323 = add i32 %322, %86
  %324 = sub i32 %323, %93
  %325 = sub i32 %324, %99
  %326 = add i32 %325, %10
  %327 = sub i32 %326, %124
  %328 = add i32 %327, %125
  %329 = sub i32 %328, %126
  %330 = sub i32 %329, %127
  %331 = sub i32 %330, %147
  %332 = sub i32 %331, %151
  %333 = add i32 %332, %165
  %334 = sub i32 %333, %175
  %335 = add i32 %334, %176
  %336 = add i32 %335, %18
  %337 = add i32 %336, %184
  %338 = sub i32 %337, %197
  %339 = add i32 %338, %60
  %340 = sub i32 %339, %204
  %341 = add i32 %340, %206
  %342 = sub i32 %341, %210
  %343 = add i32 %342, %218
  %344 = sub i32 %343, %233
  %345 = add i32 %344, %239
  %346 = sub i32 %345, %241
  %347 = sub i32 %346, %245
  %348 = sub i32 %347, %24
  %349 = add i32 %348, %247
  %350 = add i32 %349, %252
  %351 = add i32 %350, %121
  %352 = add i32 %351, %261
  %353 = sub i32 %352, %19
  %354 = sub i32 %353, %15
  %355 = add i32 %354, %22
  %356 = sub i32 %355, %25
  %357 = sub i32 %356, %27
  %358 = sub i32 %357, %29
  %359 = sub i32 %358, %33
  %360 = sub i32 %359, %34
  %361 = sub i32 %360, %36
  %362 = sub i32 %361, %38
  %363 = sub i32 %362, %39
  %364 = add i32 %363, %40
  %365 = add i32 %364, %41
  %366 = sub i32 %365, %57
  %367 = sub i32 %366, %67
  %368 = add i32 %367, %68
  %369 = add i32 %368, %72
  %370 = add i32 %369, %73
  %371 = add i32 %370, %76
  %372 = sub i32 %371, %79
  %373 = add i32 %372, %80
  %374 = sub i32 %373, %82
  %375 = add i32 %374, %87
  %376 = sub i32 %375, %97
  %377 = add i32 %376, %98
  %378 = add i32 %377, %103
  %379 = add i32 %378, %105
  %380 = add i32 %379, %108
  %381 = add i32 %380, %109
  %382 = sub i32 %381, %110
  %383 = sub i32 %382, %113
  %384 = sub i32 %383, %114
  %385 = sub i32 %384, %115
  %386 = sub i32 %385, %128
  %387 = sub i32 %386, %129
  %388 = add i32 %387, %130
  %389 = sub i32 %388, %131
  %390 = sub i32 %389, %132
  %391 = sub i32 %390, %133
  %392 = add i32 %391, %136
  %393 = sub i32 %392, %138
  %394 = sub i32 %393, %139
  %395 = sub i32 %394, %140
  %396 = add i32 %395, %143
  %397 = add i32 %396, %146
  %398 = add i32 %397, %148
  %399 = add i32 %398, %150
  %400 = sub i32 %399, %152
  %401 = add i32 %400, %155
  %402 = sub i32 %401, %159
  %403 = sub i32 %402, %160
  %404 = add i32 %403, %166
  %405 = add i32 %404, %167
  %406 = add i32 %405, %168
  %407 = sub i32 %406, %169
  %408 = sub i32 %407, %170
  %409 = add i32 %408, %181
  %410 = sub i32 %409, %185
  %411 = add i32 %410, %189
  %412 = add i32 %411, %190
  %413 = sub i32 %412, %191
  %414 = sub i32 %413, %192
  %415 = add i32 %414, %193
  %416 = add i32 %415, %194
  %417 = sub i32 %416, %195
  %418 = add i32 %417, %198
  %419 = add i32 %418, %199
  %420 = add i32 %419, %207
  %421 = add i32 %420, %209
  %422 = sub i32 %421, %211
  %423 = add i32 %422, %213
  %424 = add i32 %423, %215
  %425 = add i32 %424, %216
  %426 = add i32 %425, %220
  %427 = sub i32 %426, %221
  %428 = add i32 %427, %222
  %429 = add i32 %428, %45
  %430 = sub i32 %429, %225
  %431 = sub i32 %430, %226
  %432 = add i32 %431, %227
  %433 = sub i32 %432, %228
  %434 = add i32 %433, %229
  %435 = sub i32 %434, %230
  %436 = sub i32 %435, %231
  %437 = add i32 %436, %232
  %438 = sub i32 %437, %236
  %439 = sub i32 %438, %240
  %440 = add i32 %439, %242
  %441 = sub i32 %440, %246
  %442 = add i32 %441, %248
  %443 = add i32 %442, %249
  %444 = add i32 %443, %253
  %445 = sub i32 %444, %255
  %446 = sub i32 %445, %256
  %447 = add i32 %446, %259
  %448 = sub i32 %447, %262
  %449 = add i32 %448, %263
  %450 = sub i32 %449, %264
  %451 = sub i32 %450, %186
  %452 = sub i32 %451, %119
  %453 = sub i32 %452, %50
  %454 = sub i32 %453, %267
  %455 = add i32 %454, %47
  %456 = add i32 %455, %52
  %457 = sub i32 %456, %56
  %458 = sub i32 %457, %62
  %459 = sub i32 %458, %71
  %460 = sub i32 %459, %85
  %461 = sub i32 %460, %89
  %462 = sub i32 %461, %92
  %463 = sub i32 %462, %95
  %464 = sub i32 %463, %102
  %465 = sub i32 %464, %107
  %466 = add i32 %465, %112
  %467 = sub i32 %466, %120
  %468 = sub i32 %467, %123
  %469 = add i32 %468, %135
  %470 = sub i32 %469, %137
  %471 = sub i32 %470, %142
  %472 = sub i32 %471, %145
  %473 = sub i32 %472, %154
  %474 = sub i32 %473, %162
  %475 = sub i32 %474, %164
  %476 = sub i32 %475, %177
  %477 = sub i32 %476, %178
  %478 = sub i32 %477, %180
  %479 = sub i32 %478, %183
  %480 = sub i32 %479, %188
  %481 = sub i32 %480, %196
  %482 = add i32 %481, %202
  %483 = sub i32 %482, %214
  %484 = add i32 %483, %217
  %485 = sub i32 %484, %224
  %486 = sub i32 %485, %237
  %487 = sub i32 %486, %243
  %488 = sub i32 %487, %244
  %489 = sub i32 %488, %251
  %490 = add i32 %489, %254
  %491 = sub i32 %490, %257
  %492 = add i32 %491, %258
  %493 = add i32 %492, %260
  %494 = add i32 %493, %274
  %495 = add i32 %494, %276
  %496 = add i32 %495, %306
  %497 = add i32 %496, %308
  %498 = sub i32 %497, %174
  %499 = add i32 %498, %304
  %500 = add i32 %499, %314
  %501 = add i32 %500, %298
  %502 = icmp eq i32 %12, %501
  %503 = select i1 %502, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %504 = tail call i32 @puts(i8* nonnull dereferenceable(1) %503)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
