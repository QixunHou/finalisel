; ModuleID = '../.././c_source_file/1425_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1425_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %0
  %11 = and i32 %5, %3
  %12 = and i32 %11, %4
  %13 = xor i32 %4, -1
  %14 = or i32 %5, %3
  %15 = and i32 %14, %13
  %16 = xor i32 %12, -1
  %17 = xor i32 %15, %16
  %18 = add i32 %17, %10
  %19 = xor i32 %2, %1
  %20 = and i32 %19, %0
  %21 = xor i32 %2, %0
  %22 = xor i32 %21, -1
  %23 = or i32 %22, %1
  %24 = or i32 %2, %1
  %25 = and i32 %24, %0
  %26 = xor i32 %1, -1
  %27 = or i32 %26, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %28, %2
  %30 = and i32 %27, %7
  %31 = and i32 %2, %0
  %32 = xor i32 %31, %27
  %33 = and i32 %26, %0
  %34 = and i32 %33, %2
  %35 = or i32 %19, %0
  %36 = xor i32 %34, %35
  %37 = and i32 %7, %0
  %38 = or i32 %2, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %39, %1
  %41 = xor i32 %0, -1
  %42 = and i32 %2, %1
  %43 = and i32 %42, %41
  %44 = xor i32 %20, -1
  %45 = xor i32 %43, %44
  %46 = or i32 %42, %33
  %47 = xor i32 %31, -1
  %48 = and i32 %47, %26
  %49 = and i32 %42, %0
  %50 = xor i32 %24, -1
  %51 = or i32 %50, %0
  %52 = xor i32 %49, %51
  %53 = or i32 %7, %28
  %54 = or i32 %42, %41
  %55 = shl i32 %54, 1
  %56 = or i32 %37, %42
  %57 = xor i32 %1, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %7, %58
  %60 = or i32 %37, %58
  %61 = xor i32 %37, %1
  %62 = or i32 %1, %0
  %63 = xor i32 %62, -1
  %64 = or i32 %21, %63
  %65 = or i32 %9, %41
  %66 = and i32 %47, %58
  %67 = and i32 %57, %47
  %68 = xor i32 %33, -1
  %69 = and i32 %19, %68
  %70 = xor i32 %42, -1
  %71 = or i32 %70, %41
  %72 = or i32 %31, %58
  %73 = and i32 %1, %0
  %74 = or i32 %73, %50
  %75 = and i32 %22, %1
  %76 = shl i32 %41, 1
  %77 = xor i32 %42, %0
  %78 = or i32 %19, %41
  %79 = or i32 %73, %7
  %80 = shl i32 %79, 1
  %81 = xor i32 %24, %0
  %82 = xor i32 %81, -1
  %83 = xor i32 %49, %82
  %84 = or i32 %7, %1
  %85 = xor i32 %37, %84
  %86 = xor i32 %19, -1
  %87 = or i32 %86, %63
  %88 = or i32 %7, %0
  %89 = and i32 %88, %57
  %90 = or i32 %26, %2
  %91 = xor i32 %90, %41
  %92 = xor i32 %91, %34
  %93 = or i32 %49, %81
  %94 = and i32 %50, %41
  %95 = and i32 %8, %41
  %96 = shl i32 %95, 1
  %97 = and i32 %50, %0
  %98 = and i32 %8, %0
  %99 = xor i32 %84, -1
  %100 = and i32 %99, %41
  %101 = and i32 %99, %0
  %102 = or i32 %5, %4
  %103 = xor i32 %102, -1
  %104 = and i32 %5, %4
  %105 = xor i32 %104, -1
  %106 = xor i32 %4, %3
  %107 = xor i32 %106, -1
  %108 = and i32 %105, %107
  %109 = xor i32 %5, -1
  %110 = or i32 %109, %4
  %111 = and i32 %110, %3
  %112 = and i32 %109, %4
  %113 = xor i32 %112, -1
  %114 = and i32 %106, %113
  %115 = or i32 %14, %13
  %116 = or i32 %4, %3
  %117 = xor i32 %116, -1
  %118 = and i32 %116, %109
  %119 = xor i32 %3, -1
  %120 = or i32 %119, %4
  %121 = xor i32 %120, -1
  %122 = xor i32 %121, %5
  %123 = xor i32 %5, %4
  %124 = xor i32 %123, -1
  %125 = or i32 %106, %124
  %126 = or i32 %112, %3
  %127 = shl i32 %126, 1
  %128 = and i32 %124, %3
  %129 = or i32 %109, %3
  %130 = or i32 %129, %4
  %131 = and i32 %4, %3
  %132 = xor i32 %131, -1
  %133 = xor i32 %5, %3
  %134 = xor i32 %133, -1
  %135 = and i32 %134, %132
  %136 = and i32 %119, %4
  %137 = xor i32 %136, -1
  %138 = and i32 %134, %137
  %139 = or i32 %124, %119
  %140 = xor i32 %14, -1
  %141 = or i32 %140, %4
  %142 = or i32 %109, %107
  %143 = and i32 %116, %124
  %144 = shl i32 %143, 2
  %145 = and i32 %123, %120
  %146 = xor i32 %11, -1
  %147 = or i32 %146, %4
  %148 = and i32 %109, %107
  %149 = or i32 %112, %11
  %150 = xor i32 %129, %4
  %151 = shl i32 %150, 1
  %152 = and i32 %146, %4
  %153 = or i32 %121, %5
  %154 = or i32 %134, %13
  %155 = and i32 %102, %119
  %156 = and i32 %113, %3
  %157 = or i32 %131, %134
  %158 = xor i32 %146, %4
  %159 = xor i32 %133, %4
  %160 = shl i32 %159, 1
  %161 = and i32 %11, %13
  %162 = and i32 %133, %4
  %163 = or i32 %161, %162
  %164 = xor i32 %129, -1
  %165 = or i32 %164, %4
  %166 = xor i32 %12, %159
  %167 = xor i32 %162, -1
  %168 = xor i32 %161, %167
  %169 = and i32 %110, %106
  %170 = and i32 %119, %5
  %171 = and i32 %170, %4
  %172 = or i32 %171, %159
  %173 = or i32 %123, %131
  %174 = xor i32 %164, %4
  %175 = and i32 %109, %3
  %176 = or i32 %175, %136
  %177 = xor i32 %117, %5
  %178 = xor i32 %116, %5
  %179 = shl i32 %134, 1
  %180 = and i32 %123, %106
  %181 = or i32 %119, %5
  %182 = xor i32 %181, %4
  %183 = xor i32 %171, -1
  %184 = xor i32 %182, %183
  %185 = and i32 %181, %13
  %186 = or i32 %171, %185
  %187 = or i32 %104, %106
  %188 = or i32 %136, %109
  %189 = or i32 %136, %124
  %190 = or i32 %109, %121
  %191 = xor i32 %105, %3
  %192 = shl i32 %191, 1
  %193 = xor i32 %159, -1
  %194 = or i32 %12, %193
  %195 = or i32 %133, %4
  %196 = xor i32 %195, -1
  %197 = or i32 %171, %196
  %198 = and i32 %116, %5
  %199 = or i32 %123, %106
  %200 = or i32 %134, %117
  %201 = and i32 %133, %132
  %202 = or i32 %103, %3
  %203 = and i32 %170, %13
  %204 = and i32 %181, %4
  %205 = xor i32 %204, -1
  %206 = xor i32 %203, %205
  %207 = and i32 %102, %106
  %208 = xor i32 %137, %5
  %209 = xor i32 %175, -1
  %210 = and i32 %209, %4
  %211 = or i32 %131, %103
  %212 = and i32 %133, %120
  %213 = or i32 %123, %3
  %214 = or i32 %129, %13
  %215 = or i32 %112, %119
  %216 = or i32 %133, %136
  %217 = shl i32 %216, 1
  %218 = or i32 %131, %140
  %219 = shl i32 %218, 1
  %220 = and i32 %102, %3
  %221 = shl i32 %220, 1
  %222 = or i32 %136, %134
  %223 = or i32 %133, %13
  %224 = and i32 %14, %4
  %225 = or i32 %161, %224
  %226 = and i32 %124, %137
  %227 = or i32 %104, %3
  %228 = and i32 %137, %5
  %229 = xor i32 %110, -1
  %230 = or i32 %131, %229
  %231 = and i32 %105, %119
  %232 = xor i32 %103, %3
  %233 = and i32 %124, %132
  %234 = and i32 %133, %13
  %235 = or i32 %12, %234
  %236 = xor i32 %120, %5
  %237 = xor i32 %104, %3
  %238 = or i32 %209, %13
  %239 = add i32 %131, 1
  %240 = or i32 %12, %15
  %241 = or i32 %123, %117
  %242 = and i32 %209, %13
  %243 = add i32 %11, 1
  %244 = or i32 %171, %182
  %245 = or i32 %112, %106
  %246 = xor i32 %14, %4
  %247 = shl i32 %246, 1
  %248 = and i32 %133, %137
  %249 = and i32 %129, %13
  %250 = shl i32 %14, 1
  %251 = xor i32 %175, %4
  %252 = xor i32 %209, %4
  %253 = or i32 %107, %5
  %254 = or i32 %124, %117
  %255 = xor i32 %104, %14
  %256 = and i32 %105, %3
  %257 = and i32 %102, %107
  %258 = xor i32 %102, %3
  %259 = or i32 %106, %229
  %260 = xor i32 %110, %131
  %261 = or i32 %134, %121
  %262 = shl i32 %261, 1
  %263 = and i32 %124, %107
  %264 = or i32 %14, %4
  %265 = or i32 %164, %13
  %266 = or i32 %131, %109
  %267 = xor i32 %234, %16
  %268 = xor i32 %131, %5
  %269 = and i32 %120, %124
  %270 = or i32 %133, %117
  %271 = and i32 %124, %119
  %272 = xor i32 %129, %131
  %273 = xor i32 %223, -1
  %274 = or i32 %203, %273
  %275 = or i32 %134, %4
  %276 = or i32 %106, %5
  %277 = or i32 %136, %5
  %278 = or i32 %106, %103
  %279 = and i32 %107, %5
  %280 = or i32 %106, %109
  %281 = xor i32 %136, %146
  %282 = xor i32 %112, %146
  %283 = or i32 %123, %136
  %284 = shl i32 %283, 2
  %285 = xor i32 %185, %183
  %286 = or i32 %123, %119
  %287 = or i32 %175, %13
  %288 = and i32 %110, %119
  %289 = xor i32 %134, %4
  %290 = or i32 %124, %121
  %291 = add i32 %120, 1
  %292 = xor i32 %112, %129
  %293 = and i32 %140, %13
  %294 = mul i32 %293, -6
  %295 = and i32 %175, %13
  %296 = and i32 %140, %4
  %297 = shl i32 %296, 1
  %298 = and i32 %175, %4
  %299 = and i32 %164, %13
  %300 = and i32 %164, %4
  %301 = shl i32 %300, 1
  %302 = shl i32 %12, 1
  %303 = add i32 %47, %28
  %304 = add i32 %303, %30
  %305 = add i32 %304, %66
  %306 = add i32 %305, %120
  %307 = add i32 %306, %109
  %308 = add i32 %307, %131
  %309 = add i32 %308, %93
  %310 = add i32 %309, %208
  %311 = add i32 %310, %142
  %312 = add i32 %311, %103
  %313 = add i32 %312, %230
  %314 = add i32 %313, %149
  %315 = add i32 %314, %115
  %316 = add i32 %315, %172
  %317 = shl i32 %316, 1
  %318 = sub i32 %43, %101
  %319 = add i32 %318, %97
  %320 = sub i32 %319, %94
  %321 = sub i32 %320, %46
  %322 = mul i32 %321, 3
  %323 = add i32 %98, %100
  %324 = sub i32 %152, %323
  %325 = sub i32 %324, %232
  %326 = mul i32 %325, 5
  %327 = sub i32 %49, %298
  %328 = add i32 %327, %299
  %329 = mul i32 %328, 9
  %330 = add i32 %161, %295
  %331 = mul i32 %330, 13
  %332 = or i32 %212, %135
  %333 = shl i32 %332, 2
  %334 = xor i32 %76, -1
  %335 = sub i32 %334, %73
  %336 = add i32 %335, %29
  %337 = add i32 %336, %37
  %338 = sub i32 %337, %53
  %339 = sub i32 %338, %59
  %340 = add i32 %339, %8
  %341 = sub i32 %340, %3
  %342 = add i32 %341, %23
  %343 = add i32 %342, %20
  %344 = sub i32 %343, %25
  %345 = add i32 %344, %32
  %346 = sub i32 %345, %40
  %347 = sub i32 %346, %48
  %348 = sub i32 %347, %56
  %349 = sub i32 %348, %60
  %350 = sub i32 %349, %61
  %351 = add i32 %350, %64
  %352 = add i32 %351, %65
  %353 = sub i32 %352, %67
  %354 = add i32 %353, %69
  %355 = add i32 %354, %71
  %356 = add i32 %355, %72
  %357 = sub i32 %356, %74
  %358 = sub i32 %357, %75
  %359 = sub i32 %358, %77
  %360 = add i32 %359, %78
  %361 = sub i32 %360, %80
  %362 = add i32 %361, %85
  %363 = sub i32 %362, %87
  %364 = sub i32 %363, %89
  %365 = add i32 %364, %4
  %366 = sub i32 %365, %36
  %367 = add i32 %366, %45
  %368 = add i32 %367, %52
  %369 = sub i32 %368, %55
  %370 = add i32 %369, %83
  %371 = add i32 %370, %92
  %372 = sub i32 %371, %96
  %373 = add i32 %372, %117
  %374 = sub i32 %373, %5
  %375 = add i32 %374, %239
  %376 = add i32 %375, %291
  %377 = sub i32 %376, %118
  %378 = add i32 %377, %122
  %379 = add i32 %378, %148
  %380 = add i32 %379, %153
  %381 = add i32 %380, %133
  %382 = add i32 %381, %177
  %383 = sub i32 %382, %178
  %384 = add i32 %383, %188
  %385 = add i32 %384, %190
  %386 = add i32 %385, %198
  %387 = sub i32 %386, %175
  %388 = add i32 %387, %228
  %389 = add i32 %388, %236
  %390 = add i32 %389, %243
  %391 = sub i32 %390, %253
  %392 = add i32 %391, %110
  %393 = add i32 %392, %266
  %394 = sub i32 %393, %268
  %395 = sub i32 %394, %276
  %396 = add i32 %395, %277
  %397 = add i32 %396, %279
  %398 = add i32 %397, %280
  %399 = add i32 %398, %164
  %400 = sub i32 %399, %108
  %401 = add i32 %400, %111
  %402 = add i32 %401, %114
  %403 = add i32 %402, %125
  %404 = sub i32 %403, %128
  %405 = add i32 %404, %130
  %406 = add i32 %405, %138
  %407 = sub i32 %406, %139
  %408 = add i32 %407, %141
  %409 = sub i32 %408, %145
  %410 = add i32 %409, %147
  %411 = sub i32 %410, %154
  %412 = add i32 %411, %155
  %413 = add i32 %412, %156
  %414 = sub i32 %413, %157
  %415 = add i32 %414, %158
  %416 = add i32 %415, %165
  %417 = sub i32 %416, %169
  %418 = add i32 %417, %173
  %419 = sub i32 %418, %174
  %420 = sub i32 %419, %176
  %421 = sub i32 %420, %179
  %422 = add i32 %421, %180
  %423 = sub i32 %422, %187
  %424 = add i32 %423, %189
  %425 = sub i32 %424, %199
  %426 = add i32 %425, %200
  %427 = sub i32 %426, %201
  %428 = add i32 %427, %202
  %429 = sub i32 %428, %207
  %430 = sub i32 %429, %210
  %431 = add i32 %430, %211
  %432 = sub i32 %431, %213
  %433 = sub i32 %432, %214
  %434 = add i32 %433, %215
  %435 = add i32 %434, %222
  %436 = add i32 %435, %223
  %437 = add i32 %436, %226
  %438 = add i32 %437, %227
  %439 = add i32 %438, %231
  %440 = sub i32 %439, %233
  %441 = sub i32 %440, %237
  %442 = add i32 %441, %238
  %443 = add i32 %442, %195
  %444 = sub i32 %443, %241
  %445 = sub i32 %444, %224
  %446 = sub i32 %445, %242
  %447 = add i32 %446, %245
  %448 = sub i32 %447, %248
  %449 = sub i32 %448, %249
  %450 = sub i32 %449, %250
  %451 = sub i32 %450, %251
  %452 = sub i32 %451, %252
  %453 = sub i32 %452, %254
  %454 = sub i32 %453, %255
  %455 = add i32 %454, %256
  %456 = add i32 %455, %257
  %457 = sub i32 %456, %258
  %458 = sub i32 %457, %259
  %459 = sub i32 %458, %260
  %460 = add i32 %459, %263
  %461 = add i32 %460, %264
  %462 = sub i32 %461, %265
  %463 = add i32 %462, %269
  %464 = sub i32 %463, %270
  %465 = sub i32 %464, %271
  %466 = add i32 %465, %272
  %467 = add i32 %466, %275
  %468 = sub i32 %467, %278
  %469 = sub i32 %468, %281
  %470 = sub i32 %469, %282
  %471 = sub i32 %470, %286
  %472 = add i32 %471, %287
  %473 = add i32 %472, %288
  %474 = add i32 %473, %289
  %475 = sub i32 %474, %290
  %476 = sub i32 %475, %292
  %477 = sub i32 %476, %127
  %478 = sub i32 %477, %144
  %479 = sub i32 %478, %151
  %480 = sub i32 %479, %160
  %481 = add i32 %480, %163
  %482 = add i32 %481, %166
  %483 = sub i32 %482, %168
  %484 = sub i32 %483, %184
  %485 = sub i32 %484, %186
  %486 = sub i32 %485, %192
  %487 = sub i32 %486, %194
  %488 = add i32 %487, %197
  %489 = add i32 %488, %206
  %490 = sub i32 %489, %217
  %491 = sub i32 %490, %219
  %492 = sub i32 %491, %221
  %493 = sub i32 %492, %225
  %494 = sub i32 %493, %235
  %495 = sub i32 %494, %240
  %496 = sub i32 %495, %244
  %497 = sub i32 %496, %247
  %498 = sub i32 %497, %262
  %499 = sub i32 %498, %267
  %500 = add i32 %499, %274
  %501 = sub i32 %500, %284
  %502 = add i32 %501, %285
  %503 = add i32 %502, %294
  %504 = sub i32 %503, %297
  %505 = sub i32 %504, %301
  %506 = sub i32 %505, %302
  %507 = add i32 %506, %322
  %508 = add i32 %507, %331
  %509 = add i32 %508, %333
  %510 = add i32 %509, %329
  %511 = add i32 %510, %326
  %512 = add i32 %511, %317
  %513 = icmp eq i32 %18, %512
  %514 = select i1 %513, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %515 = tail call i32 @puts(i8* nonnull dereferenceable(1) %514)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
