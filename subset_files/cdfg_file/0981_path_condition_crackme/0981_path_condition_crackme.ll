; ModuleID = '../.././c_source_file/0981_path_condition_crackme.c'
source_filename = "../.././c_source_file/0981_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %3, -1
  %11 = and i32 %10, %4
  %12 = and i32 %5, %3
  %13 = xor i32 %12, -1
  %14 = xor i32 %11, %13
  %15 = xor i32 %11, -1
  %16 = sub i32 %11, %8
  %17 = shl i32 %16, 1
  %18 = sub i32 %17, %14
  %19 = xor i32 %1, -1
  %20 = or i32 %19, %0
  %21 = xor i32 %20, -1
  %22 = add i32 %20, 1
  %23 = xor i32 %2, %1
  %24 = and i32 %23, %0
  %25 = xor i32 %1, %0
  %26 = xor i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %25, %27
  %29 = and i32 %1, %0
  %30 = or i32 %7, %1
  %31 = xor i32 %30, %29
  %32 = and i32 %23, %20
  %33 = xor i32 %25, -1
  %34 = and i32 %27, %33
  %35 = and i32 %9, %1
  %36 = shl i32 %35, 1
  %37 = and i32 %26, %25
  %38 = shl i32 %37, 1
  %39 = and i32 %2, %1
  %40 = xor i32 %39, -1
  %41 = xor i32 %8, %40
  %42 = or i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %25, %43
  %45 = shl i32 %44, 1
  %46 = and i32 %33, %2
  %47 = or i32 %1, %0
  %48 = xor i32 %47, -1
  %49 = xor i32 %23, -1
  %50 = or i32 %49, %48
  %51 = or i32 %8, %33
  %52 = xor i32 %21, %2
  %53 = and i32 %2, %0
  %54 = xor i32 %53, %20
  %55 = and i32 %19, %2
  %56 = and i32 %55, %0
  %57 = or i32 %23, %0
  %58 = xor i32 %57, 2147483647
  %59 = or i32 %58, %56
  %60 = shl i32 %59, 1
  %61 = or i32 %43, %33
  %62 = or i32 %26, %29
  %63 = xor i32 %53, %1
  %64 = xor i32 %0, -1
  %65 = or i32 %49, %64
  %66 = xor i32 %23, %0
  %67 = xor i32 %66, -1
  %68 = xor i32 %56, %67
  %69 = or i32 %8, %1
  %70 = and i32 %7, %1
  %71 = xor i32 %70, -1
  %72 = or i32 %71, %0
  %73 = mul i32 %72, 5
  %74 = xor i32 %73, -1
  %75 = or i32 %27, %33
  %76 = or i32 %39, %0
  %77 = or i32 %7, %0
  %78 = and i32 %77, %19
  %79 = xor i32 %53, -1
  %80 = xor i32 %79, %1
  %81 = and i32 %79, %33
  %82 = xor i32 %77, -1
  %83 = or i32 %29, %82
  %84 = and i32 %40, %64
  %85 = and i32 %42, %33
  %86 = and i32 %19, %0
  %87 = xor i32 %86, -1
  %88 = and i32 %23, %87
  %89 = or i32 %27, %19
  %90 = xor i32 %87, %2
  %91 = and i32 %39, %64
  %92 = or i32 %91, %24
  %93 = or i32 %2, %1
  %94 = xor i32 %93, %29
  %95 = and i32 %71, %0
  %96 = or i32 %49, %0
  %97 = and i32 %93, %0
  %98 = or i32 %91, %97
  %99 = xor i32 %93, %0
  %100 = and i32 %27, %19
  %101 = or i32 %39, %64
  %102 = or i32 %21, %2
  %103 = or i32 %39, %86
  %104 = or i32 %93, %64
  %105 = or i32 %86, %7
  %106 = and i32 %39, %0
  %107 = or i32 %106, %99
  %108 = and i32 %79, %1
  %109 = or i32 %71, %64
  %110 = xor i32 %86, %40
  %111 = xor i32 %53, %47
  %112 = or i32 %8, %39
  %113 = xor i32 %29, -1
  %114 = and i32 %49, %113
  %115 = and i32 %55, %64
  %116 = or i32 %19, %2
  %117 = and i32 %116, %0
  %118 = or i32 %115, %117
  %119 = and i32 %25, %9
  %120 = xor i32 %77, %1
  %121 = and i32 %47, %27
  %122 = or i32 %82, %19
  %123 = shl i32 %122, 1
  %124 = or i32 %86, %27
  %125 = and i32 %49, %87
  %126 = and i32 %27, %87
  %127 = xor i32 %56, %57
  %128 = or i32 %82, %1
  %129 = or i32 %23, %29
  %130 = xor i32 %93, -1
  %131 = or i32 %29, %130
  %132 = or i32 %27, %1
  %133 = or i32 %29, %27
  %134 = or i32 %7, %48
  %135 = shl i32 %134, 1
  %136 = xor i32 %70, %0
  %137 = or i32 %53, %48
  %138 = xor i32 %91, -1
  %139 = xor i32 %24, %138
  %140 = xor i32 %113, %2
  %141 = xor i32 %8, %1
  %142 = and i32 %23, %64
  %143 = and i32 %77, %25
  %144 = or i32 %40, %64
  %145 = xor i32 %42, %1
  %146 = or i32 %26, %48
  %147 = or i32 %93, %0
  %148 = xor i32 %106, %66
  %149 = or i32 %49, %21
  %150 = xor i32 %82, %1
  %151 = shl i32 %150, 1
  %152 = and i32 %27, %1
  %153 = or i32 %82, %33
  %154 = xor i32 %130, %0
  %155 = or i32 %23, %48
  %156 = and i32 %93, %64
  %157 = or i32 %106, %156
  %158 = xor i32 %20, %2
  %159 = or i32 %23, %21
  %160 = xor i32 %106, -1
  %161 = xor i32 %99, %160
  %162 = or i32 %26, %19
  %163 = xor i32 %53, %71
  %164 = add i32 %26, 1
  %165 = and i32 %71, %64
  %166 = or i32 %33, %2
  %167 = and i32 %26, %33
  %168 = or i32 %43, %19
  %169 = or i32 %25, %82
  %170 = or i32 %53, %21
  %171 = add i32 %53, 1
  %172 = xor i32 %30, -1
  %173 = or i32 %25, %2
  %174 = and i32 %40, %0
  %175 = xor i32 %97, %138
  %176 = xor i32 %142, %160
  %177 = and i32 %20, %7
  %178 = xor i32 %49, %0
  %179 = shl i32 %178, 1
  %180 = and i32 %42, %1
  %181 = or i32 %23, %64
  %182 = xor i32 %115, %181
  %183 = xor i32 %42, %29
  %184 = or i32 %53, %19
  %185 = shl i32 %184, 1
  %186 = and i32 %26, %87
  %187 = xor i32 %116, -1
  %188 = or i32 %187, %0
  %189 = xor i32 %56, %188
  %190 = xor i32 %77, %29
  %191 = shl i32 %190, 1
  %192 = xor i32 %48, %2
  %193 = shl i32 %53, 1
  %194 = or i32 %56, %66
  %195 = or i32 %86, %2
  %196 = and i32 %87, %2
  %197 = add i32 %23, 1
  %198 = xor i32 %8, %30
  %199 = and i32 %20, %27
  %200 = or i32 %26, %21
  %201 = shl i32 %200, 1
  %202 = or i32 %29, %49
  %203 = and i32 %25, %79
  %204 = xor i32 %40, %0
  %205 = and i32 %42, %25
  %206 = or i32 %86, %49
  %207 = or i32 %30, %64
  %208 = and i32 %79, %19
  %209 = and i32 %49, %0
  %210 = xor i32 %86, %2
  %211 = add i32 %29, 1
  %212 = and i32 %7, %33
  %213 = shl i32 %0, 1
  %214 = and i32 %23, %113
  %215 = and i32 %20, %2
  %216 = and i32 %27, %113
  %217 = xor i32 %181, -1
  %218 = or i32 %115, %217
  %219 = and i32 %130, %64
  %220 = mul i32 %219, 13
  %221 = and i32 %70, %64
  %222 = and i32 %130, %0
  %223 = and i32 %70, %0
  %224 = mul i32 %223, 17
  %225 = and i32 %172, %64
  %226 = mul i32 %91, 19
  %227 = and i32 %172, %0
  %228 = shl i32 %227, 3
  %229 = mul i32 %106, 14
  %230 = xor i32 %4, -1
  %231 = or i32 %5, %3
  %232 = xor i32 %231, -1
  %233 = or i32 %232, %230
  %234 = and i32 %5, %4
  %235 = xor i32 %234, -1
  %236 = xor i32 %4, %3
  %237 = and i32 %236, %235
  %238 = or i32 %10, %4
  %239 = and i32 %238, %5
  %240 = and i32 %4, %3
  %241 = xor i32 %5, %3
  %242 = xor i32 %241, -1
  %243 = or i32 %240, %242
  %244 = and i32 %10, %5
  %245 = and i32 %244, %4
  %246 = xor i32 %241, %4
  %247 = xor i32 %245, -1
  %248 = xor i32 %246, %247
  %249 = xor i32 %236, -1
  %250 = or i32 %249, %5
  %251 = or i32 %4, %3
  %252 = xor i32 %5, %4
  %253 = xor i32 %252, -1
  %254 = and i32 %251, %253
  %255 = or i32 %5, %4
  %256 = xor i32 %255, -1
  %257 = xor i32 %256, %3
  %258 = shl i32 %257, 2
  %259 = xor i32 %5, -1
  %260 = or i32 %236, %259
  %261 = or i32 %252, %236
  %262 = shl i32 %261, 1
  %263 = xor i32 %234, %231
  %264 = or i32 %13, %230
  %265 = and i32 %252, %236
  %266 = shl i32 %265, 1
  %267 = or i32 %259, %4
  %268 = xor i32 %267, -1
  %269 = or i32 %268, %3
  %270 = and i32 %249, %5
  %271 = and i32 %238, %259
  %272 = and i32 %259, %3
  %273 = or i32 %272, %4
  %274 = and i32 %12, %4
  %275 = and i32 %241, %230
  %276 = xor i32 %275, 2147483647
  %277 = xor i32 %276, %274
  %278 = shl i32 %277, 1
  %279 = xor i32 %242, %4
  %280 = and i32 %259, %249
  %281 = and i32 %242, %230
  %282 = or i32 %259, %3
  %283 = and i32 %282, %4
  %284 = and i32 %244, %230
  %285 = or i32 %10, %5
  %286 = and i32 %285, %4
  %287 = xor i32 %286, -1
  %288 = xor i32 %284, %287
  %289 = xor i32 %272, -1
  %290 = or i32 %289, %4
  %291 = xor i32 %240, -1
  %292 = and i32 %259, %291
  %293 = and i32 %289, %230
  %294 = shl i32 %293, 1
  %295 = and i32 %13, %230
  %296 = and i32 %259, %4
  %297 = xor i32 %296, %13
  %298 = and i32 %252, %15
  %299 = xor i32 %11, %5
  %300 = and i32 %231, %4
  %301 = xor i32 %272, %4
  %302 = and i32 %235, %249
  %303 = and i32 %282, %230
  %304 = and i32 %267, %249
  %305 = and i32 %235, %3
  %306 = xor i32 %238, -1
  %307 = or i32 %241, %306
  %308 = or i32 %231, %4
  %309 = shl i32 %308, 1
  %310 = xor i32 %274, %246
  %311 = and i32 %285, %230
  %312 = or i32 %245, %311
  %313 = shl i32 %312, 1
  %314 = xor i32 %251, -1
  %315 = or i32 %241, %314
  %316 = or i32 %242, %4
  %317 = or i32 %252, %10
  %318 = or i32 %240, %256
  %319 = or i32 %234, %314
  %320 = xor i32 %234, %238
  %321 = or i32 %256, %10
  %322 = and i32 %253, %10
  %323 = or i32 %252, %249
  %324 = or i32 %253, %249
  %325 = xor i32 %240, %5
  %326 = xor i32 %234, %289
  %327 = or i32 %241, %240
  %328 = xor i32 %235, %3
  %329 = and i32 %267, %10
  %330 = xor i32 %282, -1
  %331 = or i32 %330, %4
  %332 = and i32 %252, %3
  %333 = shl i32 %332, 1
  %334 = or i32 %11, %242
  %335 = xor i32 %311, %247
  %336 = or i32 %296, %236
  %337 = and i32 %13, %4
  %338 = and i32 %12, %230
  %339 = xor i32 %300, -1
  %340 = xor i32 %338, %339
  %341 = or i32 %240, %330
  %342 = xor i32 %267, %3
  %343 = xor i32 %251, %5
  %344 = or i32 %11, %5
  %345 = or i32 %330, %230
  %346 = or i32 %284, %286
  %347 = or i32 %282, %230
  %348 = xor i32 %247, %4
  %349 = xor i32 %348, %285
  %350 = and i32 %231, %230
  %351 = or i32 %240, %5
  %352 = or i32 %231, %230
  %353 = or i32 %236, %256
  %354 = or i32 %11, %259
  %355 = xor i32 %296, -1
  %356 = and i32 %236, %355
  %357 = and i32 %255, %236
  %358 = and i32 %267, %236
  %359 = xor i32 %350, -1
  %360 = xor i32 %274, %359
  %361 = or i32 %282, %4
  %362 = or i32 %296, %3
  %363 = and i32 %236, %5
  %364 = or i32 %234, %272
  %365 = add i32 %238, 1
  %366 = xor i32 %232, %4
  %367 = shl i32 %366, 1
  %368 = xor i32 %296, %282
  %369 = or i32 %234, %306
  %370 = shl i32 %272, 1
  %371 = xor i32 %255, %3
  %372 = and i32 %267, %3
  %373 = xor i32 %314, %5
  %374 = or i32 %259, %306
  %375 = xor i32 %13, %4
  %376 = or i32 %256, %249
  %377 = xor i32 %15, %5
  %378 = and i32 %251, %242
  %379 = shl i32 %378, 1
  %380 = and i32 %251, %5
  %381 = and i32 %355, %3
  %382 = or i32 %296, %330
  %383 = xor i32 %234, %251
  %384 = xor i32 %282, %4
  %385 = shl i32 %384, 2
  %386 = and i32 %15, %5
  %387 = xor i32 %268, %3
  %388 = and i32 %238, %242
  %389 = or i32 %236, %5
  %390 = and i32 %253, %15
  %391 = or i32 %268, %249
  %392 = or i32 %240, %253
  %393 = and i32 %241, %238
  %394 = or i32 %234, %10
  %395 = and i32 %252, %249
  %396 = or i32 %252, %240
  %397 = or i32 %252, %314
  %398 = xor i32 %12, %4
  %399 = or i32 %268, %10
  %400 = and i32 %251, %259
  %401 = or i32 %296, %249
  %402 = and i32 %242, %4
  %403 = or i32 %284, %402
  %404 = xor i32 %231, %4
  %405 = or i32 %274, %404
  %406 = add i32 %296, 1
  %407 = and i32 %241, %251
  %408 = or i32 %234, %249
  %409 = or i32 %241, %11
  %410 = shl i32 %314, 2
  %411 = and i32 %289, %4
  %412 = or i32 %241, %4
  %413 = xor i32 %245, %412
  %414 = or i32 %12, %11
  %415 = or i32 %234, %236
  %416 = and i32 %242, %291
  %417 = or i32 %253, %10
  %418 = or i32 %272, %11
  %419 = or i32 %11, %253
  %420 = and i32 %241, %15
  %421 = xor i32 %355, %3
  %422 = and i32 %255, %3
  %423 = and i32 %355, %249
  %424 = and i32 %255, %10
  %425 = xor i32 %255, %240
  %426 = xor i32 %267, %240
  %427 = shl i32 %426, 1
  %428 = or i32 %274, %350
  %429 = or i32 %259, %314
  %430 = shl i32 %429, 1
  %431 = or i32 %234, %3
  %432 = xor i32 %11, %289
  %433 = shl i32 %432, 1
  %434 = xor i32 %330, %4
  %435 = and i32 %232, %230
  %436 = and i32 %272, %230
  %437 = and i32 %232, %4
  %438 = and i32 %272, %4
  %439 = shl i32 %438, 1
  %440 = and i32 %330, %230
  %441 = mul i32 %440, 7
  %442 = mul i32 %338, 18
  %443 = and i32 %330, %4
  %444 = mul i32 %274, 28
  %445 = add i32 %210, %22
  %446 = add i32 %445, %196
  %447 = add i32 %446, %140
  %448 = add i32 %447, %105
  %449 = add i32 %448, %230
  %450 = add i32 %449, %222
  %451 = add i32 %450, %214
  %452 = add i32 %451, %205
  %453 = add i32 %452, %180
  %454 = add i32 %453, %142
  %455 = add i32 %454, %109
  %456 = add i32 %455, %103
  %457 = add i32 %456, %89
  %458 = add i32 %457, %81
  %459 = add i32 %458, %76
  %460 = add i32 %459, %291
  %461 = add i32 %460, %194
  %462 = add i32 %461, %98
  %463 = add i32 %462, %282
  %464 = add i32 %463, %256
  %465 = add i32 %464, %250
  %466 = add i32 %465, %418
  %467 = add i32 %466, %422
  %468 = add i32 %467, %408
  %469 = add i32 %468, %392
  %470 = add i32 %469, %357
  %471 = add i32 %470, %342
  %472 = add i32 %471, %305
  %473 = add i32 %472, %302
  %474 = add i32 %473, %300
  %475 = add i32 %474, %237
  %476 = shl i32 %475, 1
  %477 = sub i32 %172, %83
  %478 = sub i32 %477, %157
  %479 = add i32 %478, %436
  %480 = add i32 %479, %443
  %481 = add i32 %480, %435
  %482 = sub i32 %481, %423
  %483 = sub i32 %482, %390
  %484 = sub i32 %483, %341
  %485 = mul i32 %484, 5
  %486 = add i32 %399, %195
  %487 = shl i32 %486, 2
  %488 = sub i32 -2, %3
  %489 = sub i32 %488, %177
  %490 = add i32 %489, %168
  %491 = sub i32 %490, %107
  %492 = add i32 %491, %343
  %493 = add i32 %492, %270
  %494 = sub i32 %493, %434
  %495 = add i32 %494, %437
  %496 = sub i32 %495, %303
  %497 = mul i32 %496, 3
  %498 = sub i32 %19, %1
  %499 = sub i32 %498, %213
  %500 = add i32 %499, %29
  %501 = add i32 %500, %48
  %502 = sub i32 %501, %25
  %503 = sub i32 %502, %20
  %504 = add i32 %503, %86
  %505 = add i32 %504, %7
  %506 = add i32 %505, %33
  %507 = add i32 %506, %211
  %508 = add i32 %507, %30
  %509 = sub i32 %508, %46
  %510 = add i32 %509, %52
  %511 = add i32 %510, %8
  %512 = add i32 %511, %90
  %513 = add i32 %512, %23
  %514 = add i32 %513, %102
  %515 = sub i32 %514, %39
  %516 = add i32 %515, %40
  %517 = sub i32 %516, %26
  %518 = sub i32 %517, %158
  %519 = add i32 %518, %164
  %520 = add i32 %519, %166
  %521 = add i32 %520, %171
  %522 = sub i32 %521, %173
  %523 = sub i32 %522, %192
  %524 = add i32 %523, %197
  %525 = add i32 %524, %43
  %526 = sub i32 %525, %212
  %527 = add i32 %526, %215
  %528 = add i32 %527, %24
  %529 = sub i32 %528, %28
  %530 = add i32 %529, %31
  %531 = sub i32 %530, %32
  %532 = sub i32 %531, %34
  %533 = add i32 %532, %41
  %534 = add i32 %533, %50
  %535 = sub i32 %534, %51
  %536 = sub i32 %535, %54
  %537 = sub i32 %536, %61
  %538 = sub i32 %537, %62
  %539 = sub i32 %538, %63
  %540 = add i32 %539, %65
  %541 = add i32 %540, %69
  %542 = sub i32 %541, %75
  %543 = add i32 %542, %78
  %544 = add i32 %543, %80
  %545 = add i32 %544, %84
  %546 = add i32 %545, %85
  %547 = add i32 %546, %88
  %548 = add i32 %547, %94
  %549 = sub i32 %548, %95
  %550 = sub i32 %549, %96
  %551 = sub i32 %550, %99
  %552 = sub i32 %551, %100
  %553 = sub i32 %552, %101
  %554 = sub i32 %553, %104
  %555 = sub i32 %554, %108
  %556 = sub i32 %555, %110
  %557 = sub i32 %556, %111
  %558 = sub i32 %557, %112
  %559 = sub i32 %558, %114
  %560 = sub i32 %559, %119
  %561 = add i32 %560, %120
  %562 = add i32 %561, %121
  %563 = sub i32 %562, %124
  %564 = sub i32 %563, %125
  %565 = sub i32 %564, %126
  %566 = sub i32 %565, %97
  %567 = sub i32 %566, %128
  %568 = sub i32 %567, %129
  %569 = sub i32 %568, %131
  %570 = add i32 %569, %132
  %571 = sub i32 %570, %133
  %572 = sub i32 %571, %135
  %573 = add i32 %572, %136
  %574 = sub i32 %573, %137
  %575 = add i32 %574, %141
  %576 = add i32 %575, %143
  %577 = add i32 %576, %144
  %578 = sub i32 %577, %145
  %579 = add i32 %578, %146
  %580 = sub i32 %579, %147
  %581 = add i32 %580, %149
  %582 = add i32 %581, %152
  %583 = sub i32 %582, %153
  %584 = sub i32 %583, %154
  %585 = sub i32 %584, %155
  %586 = add i32 %585, %159
  %587 = sub i32 %586, %162
  %588 = add i32 %587, %163
  %589 = add i32 %588, %165
  %590 = add i32 %589, %57
  %591 = sub i32 %590, %167
  %592 = add i32 %591, %169
  %593 = add i32 %592, %170
  %594 = sub i32 %593, %174
  %595 = sub i32 %594, %183
  %596 = add i32 %595, %186
  %597 = add i32 %596, %181
  %598 = sub i32 %597, %193
  %599 = add i32 %598, %198
  %600 = sub i32 %599, %156
  %601 = sub i32 %600, %199
  %602 = add i32 %601, %202
  %603 = sub i32 %602, %203
  %604 = add i32 %603, %204
  %605 = sub i32 %604, %206
  %606 = sub i32 %605, %207
  %607 = sub i32 %606, %66
  %608 = add i32 %607, %208
  %609 = sub i32 %608, %209
  %610 = add i32 %609, %216
  %611 = add i32 %610, %221
  %612 = sub i32 %611, %225
  %613 = sub i32 %612, %36
  %614 = sub i32 %613, %38
  %615 = sub i32 %614, %45
  %616 = add i32 %615, %68
  %617 = add i32 %616, %74
  %618 = add i32 %617, %92
  %619 = add i32 %618, %118
  %620 = sub i32 %619, %123
  %621 = add i32 %620, %127
  %622 = sub i32 %621, %139
  %623 = add i32 %622, %148
  %624 = sub i32 %623, %151
  %625 = sub i32 %624, %161
  %626 = sub i32 %625, %175
  %627 = add i32 %626, %176
  %628 = sub i32 %627, %179
  %629 = add i32 %628, %182
  %630 = sub i32 %629, %185
  %631 = add i32 %630, %189
  %632 = sub i32 %631, %191
  %633 = sub i32 %632, %201
  %634 = add i32 %633, %218
  %635 = add i32 %634, %220
  %636 = add i32 %635, %224
  %637 = add i32 %636, %226
  %638 = sub i32 %637, %228
  %639 = add i32 %638, %229
  %640 = add i32 %639, %11
  %641 = add i32 %640, %238
  %642 = sub i32 %641, %236
  %643 = add i32 %642, %249
  %644 = add i32 %643, %365
  %645 = sub i32 %644, %5
  %646 = add i32 %645, %251
  %647 = sub i32 %646, %240
  %648 = sub i32 %647, %239
  %649 = sub i32 %648, %260
  %650 = add i32 %649, %253
  %651 = sub i32 %650, %271
  %652 = sub i32 %651, %280
  %653 = sub i32 %652, %252
  %654 = add i32 %653, %292
  %655 = sub i32 %654, %12
  %656 = sub i32 %655, %299
  %657 = sub i32 %656, %255
  %658 = sub i32 %657, %231
  %659 = add i32 %658, %325
  %660 = sub i32 %659, %344
  %661 = sub i32 %660, %351
  %662 = sub i32 %661, %354
  %663 = sub i32 %662, %363
  %664 = add i32 %663, %234
  %665 = sub i32 %664, %373
  %666 = add i32 %665, %374
  %667 = add i32 %666, %377
  %668 = add i32 %667, %380
  %669 = add i32 %668, %386
  %670 = sub i32 %669, %389
  %671 = add i32 %670, %330
  %672 = sub i32 %671, %296
  %673 = add i32 %672, %400
  %674 = add i32 %673, %406
  %675 = sub i32 %674, %410
  %676 = sub i32 %675, %60
  %677 = sub i32 %676, %233
  %678 = add i32 %677, %243
  %679 = add i32 %678, %254
  %680 = add i32 %679, %263
  %681 = sub i32 %680, %264
  %682 = sub i32 %681, %269
  %683 = sub i32 %682, %273
  %684 = sub i32 %683, %279
  %685 = add i32 %684, %281
  %686 = add i32 %685, %283
  %687 = add i32 %686, %290
  %688 = sub i32 %687, %295
  %689 = add i32 %688, %297
  %690 = add i32 %689, %298
  %691 = sub i32 %690, %301
  %692 = sub i32 %691, %304
  %693 = sub i32 %692, %307
  %694 = add i32 %693, %315
  %695 = add i32 %694, %316
  %696 = add i32 %695, %317
  %697 = add i32 %696, %318
  %698 = sub i32 %697, %319
  %699 = add i32 %698, %320
  %700 = add i32 %699, %321
  %701 = sub i32 %700, %322
  %702 = sub i32 %701, %323
  %703 = add i32 %702, %324
  %704 = add i32 %703, %326
  %705 = add i32 %704, %327
  %706 = sub i32 %705, %328
  %707 = sub i32 %706, %329
  %708 = sub i32 %707, %331
  %709 = sub i32 %708, %334
  %710 = sub i32 %709, %336
  %711 = add i32 %710, %337
  %712 = add i32 %711, %345
  %713 = add i32 %712, %347
  %714 = sub i32 %713, %350
  %715 = sub i32 %714, %352
  %716 = sub i32 %715, %353
  %717 = sub i32 %716, %356
  %718 = sub i32 %717, %358
  %719 = sub i32 %718, %361
  %720 = sub i32 %719, %362
  %721 = sub i32 %720, %364
  %722 = sub i32 %721, %368
  %723 = sub i32 %722, %369
  %724 = sub i32 %723, %370
  %725 = sub i32 %724, %371
  %726 = sub i32 %725, %372
  %727 = add i32 %726, %375
  %728 = add i32 %727, %376
  %729 = add i32 %728, %381
  %730 = add i32 %729, %382
  %731 = add i32 %730, %383
  %732 = sub i32 %731, %387
  %733 = sub i32 %732, %388
  %734 = sub i32 %733, %391
  %735 = add i32 %734, %393
  %736 = sub i32 %735, %394
  %737 = add i32 %736, %395
  %738 = sub i32 %737, %396
  %739 = sub i32 %738, %397
  %740 = add i32 %739, %398
  %741 = add i32 %740, %401
  %742 = add i32 %741, %407
  %743 = sub i32 %742, %409
  %744 = sub i32 %743, %411
  %745 = sub i32 %744, %414
  %746 = sub i32 %745, %415
  %747 = add i32 %746, %416
  %748 = add i32 %747, %417
  %749 = add i32 %748, %419
  %750 = sub i32 %749, %420
  %751 = sub i32 %750, %421
  %752 = add i32 %751, %424
  %753 = add i32 %752, %425
  %754 = sub i32 %753, %430
  %755 = add i32 %754, %431
  %756 = sub i32 %755, %246
  %757 = add i32 %756, %275
  %758 = add i32 %757, %248
  %759 = sub i32 %758, %258
  %760 = sub i32 %759, %262
  %761 = sub i32 %760, %266
  %762 = add i32 %761, %288
  %763 = sub i32 %762, %294
  %764 = sub i32 %763, %309
  %765 = sub i32 %764, %310
  %766 = sub i32 %765, %333
  %767 = sub i32 %766, %335
  %768 = add i32 %767, %340
  %769 = sub i32 %768, %346
  %770 = add i32 %769, %349
  %771 = add i32 %770, %360
  %772 = sub i32 %771, %367
  %773 = sub i32 %772, %379
  %774 = sub i32 %773, %385
  %775 = sub i32 %774, %403
  %776 = sub i32 %775, %405
  %777 = add i32 %776, %413
  %778 = sub i32 %777, %427
  %779 = sub i32 %778, %428
  %780 = sub i32 %779, %433
  %781 = sub i32 %780, %439
  %782 = add i32 %781, %441
  %783 = add i32 %782, %442
  %784 = add i32 %783, %444
  %785 = sub i32 %784, %313
  %786 = add i32 %785, %487
  %787 = sub i32 %786, %278
  %788 = add i32 %787, %485
  %789 = add i32 %788, %497
  %790 = add i32 %789, %476
  %791 = icmp eq i32 %18, %790
  %792 = select i1 %791, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %793 = tail call i32 @puts(i8* nonnull dereferenceable(1) %792)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
