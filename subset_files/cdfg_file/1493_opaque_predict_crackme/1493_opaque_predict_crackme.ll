; ModuleID = '../.././c_source_file/1493_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1493_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %2, -1
  %9 = and i32 %8, %0
  %10 = or i32 %8, %1
  %11 = xor i32 %10, -1
  %12 = or i32 %9, %11
  %13 = xor i32 %0, -1
  %14 = xor i32 %2, %1
  %15 = and i32 %14, %13
  %16 = sub i32 %12, %15
  %17 = sub i32 %16, %7
  %18 = xor i32 %4, %3
  %19 = and i32 %6, %3
  %20 = xor i32 %19, -1
  %21 = or i32 %4, %3
  %22 = shl i32 %21, 3
  %23 = xor i32 %22, -8
  %24 = add i32 %7, 1
  %25 = and i32 %4, %3
  %26 = and i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %8, %27
  %29 = or i32 %1, %0
  %30 = xor i32 %1, %0
  %31 = xor i32 %2, %0
  %32 = and i32 %31, %30
  %33 = and i32 %2, %0
  %34 = or i32 %2, %1
  %35 = xor i32 %33, %34
  %36 = or i32 %8, %0
  %37 = xor i32 %36, %26
  %38 = xor i32 %31, -1
  %39 = or i32 %38, %1
  %40 = and i32 %14, %29
  %41 = and i32 %30, %38
  %42 = shl i32 %41, 1
  %43 = or i32 %11, %0
  %44 = and i32 %8, %1
  %45 = xor i32 %44, %0
  %46 = and i32 %2, %1
  %47 = and i32 %46, %0
  %48 = and i32 %34, %13
  %49 = or i32 %47, %48
  %50 = xor i32 %29, -1
  %51 = or i32 %34, %0
  %52 = xor i32 %1, -1
  %53 = or i32 %9, %52
  %54 = or i32 %14, %0
  %55 = shl i32 %54, 1
  %56 = xor i32 %30, -1
  %57 = or i32 %8, %56
  %58 = or i32 %31, %30
  %59 = and i32 %29, %8
  %60 = or i32 %33, %1
  %61 = or i32 %2, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %30, %62
  %64 = xor i32 %46, -1
  %65 = or i32 %64, %0
  %66 = xor i32 %33, -1
  %67 = and i32 %66, %56
  %68 = and i32 %31, %56
  %69 = xor i32 %36, -1
  %70 = or i32 %69, %56
  %71 = xor i32 %14, -1
  %72 = and i32 %29, %71
  %73 = shl i32 %33, 1
  %74 = or i32 %52, %0
  %75 = and i32 %31, %74
  %76 = or i32 %44, %0
  %77 = xor i32 %44, -1
  %78 = shl i32 %77, 1
  %79 = and i32 %31, %29
  %80 = or i32 %31, %26
  %81 = xor i32 %34, %0
  %82 = xor i32 %47, -1
  %83 = xor i32 %81, %82
  %84 = xor i32 %74, -1
  %85 = or i32 %71, %84
  %86 = or i32 %33, %50
  %87 = or i32 %71, %13
  %88 = xor i32 %9, %64
  %89 = or i32 %8, %50
  %90 = and i32 %61, %1
  %91 = xor i32 %9, %10
  %92 = xor i32 %34, -1
  %93 = or i32 %26, %92
  %94 = xor i32 %9, -1
  %95 = and i32 %94, %56
  %96 = xor i32 %15, %82
  %97 = and i32 %74, %2
  %98 = or i32 %84, %2
  %99 = or i32 %33, %44
  %100 = xor i32 %14, %0
  %101 = xor i32 %47, %100
  %102 = and i32 %77, %0
  %103 = and i32 %52, %0
  %104 = xor i32 %103, -1
  %105 = and i32 %71, %104
  %106 = or i32 %47, %15
  %107 = or i32 %30, %8
  %108 = or i32 %14, %84
  %109 = shl i32 %108, 1
  %110 = and i32 %74, %38
  %111 = or i32 %62, %52
  %112 = or i32 %14, %13
  %113 = and i32 %61, %30
  %114 = xor i32 %71, %0
  %115 = and i32 %10, %13
  %116 = or i32 %33, %52
  %117 = or i32 %71, %0
  %118 = shl i32 %48, 1
  %119 = xor i32 %36, %1
  %120 = and i32 %46, %13
  %121 = and i32 %34, %0
  %122 = xor i32 %120, -1
  %123 = xor i32 %121, %122
  %124 = xor i32 %29, %2
  %125 = and i32 %66, %1
  %126 = or i32 %30, %2
  %127 = or i32 %46, %103
  %128 = and i32 %30, %66
  %129 = or i32 %62, %1
  %130 = shl i32 %129, 2
  %131 = and i32 %52, %2
  %132 = and i32 %131, %0
  %133 = or i32 %52, %2
  %134 = and i32 %133, %13
  %135 = xor i32 %132, -1
  %136 = xor i32 %134, %135
  %137 = xor i32 %61, %26
  %138 = xor i32 %77, %0
  %139 = xor i32 %133, %0
  %140 = xor i32 %139, %135
  %141 = xor i32 %33, %74
  %142 = or i32 %10, %13
  %143 = and i32 %94, %52
  %144 = xor i32 %69, %1
  %145 = or i32 %11, %13
  %146 = and i32 %71, %27
  %147 = and i32 %29, %38
  %148 = xor i32 %33, %1
  %149 = and i32 %31, %1
  %150 = shl i32 %149, 1
  %151 = or i32 %33, %56
  %152 = and i32 %36, %52
  %153 = and i32 %94, %1
  %154 = and i32 %30, %94
  %155 = shl i32 %154, 1
  %156 = or i32 %14, %26
  %157 = and i32 %14, %0
  %158 = xor i32 %157, %122
  %159 = or i32 %132, %139
  %160 = and i32 %56, %2
  %161 = and i32 %36, %56
  %162 = and i32 %36, %30
  %163 = and i32 %8, %104
  %164 = or i32 %31, %1
  %165 = or i32 %120, %121
  %166 = add i32 %14, 1
  %167 = xor i32 %33, %29
  %168 = shl i32 %167, 1
  %169 = xor i32 %103, %64
  %170 = or i32 %26, %69
  %171 = and i32 %38, %56
  %172 = xor i32 %84, %2
  %173 = or i32 %26, %62
  %174 = or i32 %64, %13
  %175 = or i32 %9, %46
  %176 = shl i32 %175, 2
  %177 = or i32 %30, %38
  %178 = or i32 %92, %13
  %179 = and i32 %104, %2
  %180 = xor i32 %46, %0
  %181 = shl i32 %180, 1
  %182 = xor i32 %54, -1
  %183 = or i32 %132, %182
  %184 = or i32 %50, %2
  %185 = or i32 %26, %2
  %186 = xor i32 %92, %0
  %187 = shl i32 %186, 1
  %188 = or i32 %9, %56
  %189 = xor i32 %10, %0
  %190 = xor i32 %104, %2
  %191 = or i32 %38, %52
  %192 = or i32 %33, %30
  %193 = shl i32 %192, 1
  %194 = or i32 %31, %56
  %195 = xor i32 %103, %77
  %196 = or i32 %120, %157
  %197 = or i32 %33, %84
  %198 = shl i32 %197, 1
  %199 = and i32 %38, %1
  %200 = or i32 %10, %0
  %201 = or i32 %31, %50
  %202 = or i32 %9, %1
  %203 = or i32 %62, %56
  %204 = xor i32 %33, %77
  %205 = and i32 %131, %13
  %206 = xor i32 %112, -1
  %207 = or i32 %205, %206
  %208 = and i32 %74, %8
  %209 = xor i32 %66, %1
  %210 = and i32 %31, %52
  %211 = or i32 %31, %84
  %212 = and i32 %38, %52
  %213 = and i32 %133, %0
  %214 = or i32 %205, %213
  %215 = xor i32 %9, %1
  %216 = or i32 %92, %0
  %217 = or i32 %132, %134
  %218 = add i32 %33, 1
  %219 = or i32 %47, %81
  %220 = xor i32 %50, %2
  %221 = and i32 %30, %2
  %222 = or i32 %44, %103
  %223 = or i32 %103, %38
  %224 = or i32 %26, %38
  %225 = or i32 %46, %0
  %226 = or i32 %38, %50
  %227 = and i32 %38, %104
  %228 = and i32 %27, %2
  %229 = and i32 %92, %13
  %230 = mul i32 %229, -20
  %231 = and i32 %44, %13
  %232 = mul i32 %231, -9
  %233 = and i32 %92, %0
  %234 = and i32 %44, %0
  %235 = and i32 %11, %13
  %236 = mul i32 %120, -10
  %237 = and i32 %11, %0
  %238 = mul i32 %237, 13
  %239 = sub i32 %200, %234
  %240 = add i32 %239, %146
  %241 = sub i32 %240, %110
  %242 = sub i32 %241, %86
  %243 = add i32 %242, %24
  %244 = sub i32 %243, %25
  %245 = mul i32 %244, 5
  %246 = add i32 %225, %89
  %247 = sub i32 %75, %246
  %248 = add i32 %247, %217
  %249 = mul i32 %248, 3
  %250 = add i32 %19, %233
  %251 = mul i32 %250, -7
  %252 = add i32 %26, -1
  %253 = add i32 %252, %74
  %254 = add i32 %253, %221
  %255 = add i32 %254, %220
  %256 = add i32 %255, %11
  %257 = add i32 %256, %44
  %258 = add i32 %257, %202
  %259 = add i32 %258, %47
  %260 = add i32 %259, %199
  %261 = add i32 %260, %195
  %262 = add i32 %261, %191
  %263 = add i32 %262, %173
  %264 = add i32 %263, %119
  %265 = add i32 %264, %95
  %266 = add i32 %265, %88
  %267 = add i32 %266, %76
  %268 = add i32 %267, %68
  %269 = add i32 %268, %63
  %270 = add i32 %269, %39
  %271 = shl i32 %270, 1
  %272 = add i32 %0, -4
  %273 = sub i32 %272, %1
  %274 = add i32 %273, %27
  %275 = add i32 %274, %28
  %276 = sub i32 %275, %57
  %277 = add i32 %276, %59
  %278 = sub i32 %277, %97
  %279 = sub i32 %278, %98
  %280 = add i32 %279, %107
  %281 = sub i32 %280, %34
  %282 = sub i32 %281, %124
  %283 = sub i32 %282, %126
  %284 = add i32 %283, %160
  %285 = sub i32 %284, %163
  %286 = add i32 %285, %166
  %287 = add i32 %286, %38
  %288 = sub i32 %287, %172
  %289 = add i32 %288, %10
  %290 = sub i32 %289, %179
  %291 = sub i32 %290, %184
  %292 = sub i32 %291, %185
  %293 = sub i32 %292, %190
  %294 = add i32 %293, %208
  %295 = add i32 %294, %92
  %296 = add i32 %295, %218
  %297 = add i32 %296, %94
  %298 = sub i32 %297, %36
  %299 = add i32 %298, %228
  %300 = sub i32 %299, %4
  %301 = add i32 %300, %6
  %302 = sub i32 %301, %32
  %303 = add i32 %302, %35
  %304 = sub i32 %303, %37
  %305 = add i32 %304, %40
  %306 = add i32 %305, %43
  %307 = sub i32 %306, %45
  %308 = sub i32 %307, %51
  %309 = add i32 %308, %53
  %310 = add i32 %309, %58
  %311 = sub i32 %310, %60
  %312 = sub i32 %311, %65
  %313 = add i32 %312, %67
  %314 = sub i32 %313, %70
  %315 = add i32 %314, %72
  %316 = sub i32 %315, %73
  %317 = sub i32 %316, %78
  %318 = add i32 %317, %79
  %319 = add i32 %318, %80
  %320 = add i32 %319, %85
  %321 = sub i32 %320, %87
  %322 = add i32 %321, %90
  %323 = add i32 %322, %91
  %324 = sub i32 %323, %93
  %325 = sub i32 %324, %99
  %326 = sub i32 %325, %102
  %327 = sub i32 %326, %105
  %328 = sub i32 %327, %111
  %329 = sub i32 %328, %112
  %330 = sub i32 %329, %113
  %331 = add i32 %330, %114
  %332 = add i32 %331, %115
  %333 = sub i32 %332, %116
  %334 = sub i32 %333, %117
  %335 = add i32 %334, %125
  %336 = add i32 %335, %81
  %337 = add i32 %336, %127
  %338 = add i32 %337, %128
  %339 = add i32 %338, %137
  %340 = sub i32 %339, %138
  %341 = sub i32 %340, %141
  %342 = add i32 %341, %142
  %343 = add i32 %342, %143
  %344 = add i32 %343, %144
  %345 = add i32 %344, %145
  %346 = add i32 %345, %147
  %347 = add i32 %346, %148
  %348 = sub i32 %347, %151
  %349 = add i32 %348, %152
  %350 = add i32 %349, %153
  %351 = sub i32 %350, %156
  %352 = add i32 %351, %161
  %353 = sub i32 %352, %162
  %354 = add i32 %353, %164
  %355 = sub i32 %354, %169
  %356 = sub i32 %355, %170
  %357 = add i32 %356, %171
  %358 = sub i32 %357, %174
  %359 = sub i32 %358, %177
  %360 = sub i32 %359, %178
  %361 = add i32 %360, %100
  %362 = sub i32 %361, %188
  %363 = sub i32 %362, %189
  %364 = sub i32 %363, %194
  %365 = add i32 %364, %201
  %366 = add i32 %365, %203
  %367 = add i32 %366, %204
  %368 = add i32 %367, %209
  %369 = add i32 %368, %210
  %370 = sub i32 %369, %211
  %371 = sub i32 %370, %212
  %372 = add i32 %371, %215
  %373 = add i32 %372, %216
  %374 = sub i32 %373, %222
  %375 = add i32 %374, %223
  %376 = sub i32 %375, %224
  %377 = add i32 %376, %226
  %378 = sub i32 %377, %227
  %379 = add i32 %378, %235
  %380 = add i32 %379, %18
  %381 = add i32 %380, %20
  %382 = sub i32 %381, %21
  %383 = sub i32 %382, %42
  %384 = add i32 %383, %49
  %385 = sub i32 %384, %55
  %386 = add i32 %385, %83
  %387 = add i32 %386, %96
  %388 = sub i32 %387, %101
  %389 = add i32 %388, %106
  %390 = sub i32 %389, %109
  %391 = sub i32 %390, %118
  %392 = add i32 %391, %123
  %393 = add i32 %392, %130
  %394 = add i32 %393, %136
  %395 = sub i32 %394, %140
  %396 = sub i32 %395, %150
  %397 = sub i32 %396, %155
  %398 = add i32 %397, %158
  %399 = sub i32 %398, %159
  %400 = add i32 %399, %165
  %401 = sub i32 %400, %168
  %402 = sub i32 %401, %176
  %403 = sub i32 %402, %181
  %404 = sub i32 %403, %183
  %405 = sub i32 %404, %187
  %406 = sub i32 %405, %193
  %407 = add i32 %406, %196
  %408 = sub i32 %407, %198
  %409 = sub i32 %408, %207
  %410 = sub i32 %409, %214
  %411 = sub i32 %410, %219
  %412 = add i32 %411, %230
  %413 = add i32 %412, %232
  %414 = add i32 %413, %236
  %415 = add i32 %414, %238
  %416 = sub i32 %415, %23
  %417 = add i32 %416, %251
  %418 = add i32 %417, %249
  %419 = add i32 %418, %245
  %420 = add i32 %419, %271
  %421 = icmp eq i32 %17, %420
  %422 = select i1 %421, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %423 = tail call i32 @puts(i8* nonnull dereferenceable(1) %422)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
