digraph "DFG for'crackme' function" {
	Node0x1947ae0[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1948160[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x19481d0[shape=record, label="  %7 = sub i32 %2, %6"];
	Node0x1948240[shape=record, label="  %8 = shl i32 %3, 1"];
	Node0x19482b0[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0x1948320[shape=record, label="  %10 = xor i32 %3, %0"];
	Node0x1948390[shape=record, label="  %11 = sub i32 %9, %10"];
	Node0x1948400[shape=record, label="  %12 = and i32 %2, %1"];
	Node0x1948470[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x1948510[shape=record, label="  %14 = xor i32 %2, -1"];
	Node0x1948580[shape=record, label="  %15 = or i32 %14, %1"];
	Node0x1948620[shape=record, label="  %16 = xor i32 %6, -2"];
	Node0x1948690[shape=record, label="  %17 = shl i32 %15, 1"];
	Node0x1948700[shape=record, label="  %18 = xor i32 %17, -2"];
	Node0x1948770[shape=record, label="  %19 = and i32 %14, %1"];
	Node0x19487e0[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x1948850[shape=record, label="  %21 = and i32 %3, %0"];
	Node0x19488c0[shape=record, label="  %22 = xor i32 %10, -1"];
	Node0x1948930[shape=record, label="  %23 = xor i32 %0, -1"];
	Node0x19489a0[shape=record, label="  %24 = or i32 %23, %3"];
	Node0x1948a10[shape=record, label="  %25 = or i32 %3, %0"];
	Node0x1948a80[shape=record, label="  %26 = and i32 %23, %3"];
	Node0x1948b20[shape=record, label="  %27 = shl i32 %26, 2"];
	Node0x1948bc0[shape=record, label="  %28 = mul i32 %21, -5"];
	Node0x1948c30[shape=record, label="  %29 = shl i32 %13, 1"];
	Node0x1948cd0[shape=record, label="  %30 = add i32 %12, 3"];
	Node0x1948d40[shape=record, label="  %31 = sub i32 %30, %15"];
	Node0x1948db0[shape=record, label="  %32 = add i32 %31, %3"];
	Node0x1949030[shape=record, label="  %33 = sub i32 %32, %20"];
	Node0x19490a0[shape=record, label="  %34 = add i32 %33, %21"];
	Node0x1949110[shape=record, label="  %35 = add i32 %34, %22"];
	Node0x1949180[shape=record, label="  %36 = add i32 %35, %24"];
	Node0x19491f0[shape=record, label="  %37 = add i32 %36, %25"];
	Node0x1949260[shape=record, label="  %38 = add i32 %37, %29"];
	Node0x19492d0[shape=record, label="  %39 = add i32 %38, %16"];
	Node0x1949340[shape=record, label="  %40 = sub i32 %39, %18"];
	Node0x19493b0[shape=record, label="  %41 = sub i32 %40, %27"];
	Node0x1949420[shape=record, label="  %42 = add i32 %41, %28"];
	Node0x1949490[shape=record, label="  %43 = icmp eq i32 %11, %42"];
	Node0x18e8268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1949930[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0x1949980[shape=record, label="  ret void"];
	Node0x1947ae0 -> Node0x1948160;
	Node0x1948160 -> Node0x19481d0;
	Node0x19481d0 -> Node0x1948240;
	Node0x1948240 -> Node0x19482b0;
	Node0x19482b0 -> Node0x1948320;
	Node0x1948320 -> Node0x1948390;
	Node0x1948390 -> Node0x1948400;
	Node0x1948400 -> Node0x1948470;
	Node0x1948470 -> Node0x1948510;
	Node0x1948510 -> Node0x1948580;
	Node0x1948580 -> Node0x1948620;
	Node0x1948620 -> Node0x1948690;
	Node0x1948690 -> Node0x1948700;
	Node0x1948700 -> Node0x1948770;
	Node0x1948770 -> Node0x19487e0;
	Node0x19487e0 -> Node0x1948850;
	Node0x1948850 -> Node0x19488c0;
	Node0x19488c0 -> Node0x1948930;
	Node0x1948930 -> Node0x19489a0;
	Node0x19489a0 -> Node0x1948a10;
	Node0x1948a10 -> Node0x1948a80;
	Node0x1948a80 -> Node0x1948b20;
	Node0x1948b20 -> Node0x1948bc0;
	Node0x1948bc0 -> Node0x1948c30;
	Node0x1948c30 -> Node0x1948cd0;
	Node0x1948cd0 -> Node0x1948d40;
	Node0x1948d40 -> Node0x1948db0;
	Node0x1948db0 -> Node0x1949030;
	Node0x1949030 -> Node0x19490a0;
	Node0x19490a0 -> Node0x1949110;
	Node0x1949110 -> Node0x1949180;
	Node0x1949180 -> Node0x19491f0;
	Node0x19491f0 -> Node0x1949260;
	Node0x1949260 -> Node0x19492d0;
	Node0x19492d0 -> Node0x1949340;
	Node0x1949340 -> Node0x19493b0;
	Node0x19493b0 -> Node0x1949420;
	Node0x1949420 -> Node0x1949490;
	Node0x1949490 -> Node0x18e8268;
	Node0x18e8268 -> Node0x1949930;
	Node0x1949930 -> Node0x1949980;
edge [color=red]
	Node0x1947ae0 -> Node0x1948160;
	Node0x1948160 -> Node0x19481d0;
	Node0x19481d0 -> Node0x19482b0;
	Node0x1948240 -> Node0x19482b0;
	Node0x19482b0 -> Node0x1948390;
	Node0x1948320 -> Node0x1948390;
	Node0x1948510 -> Node0x1948580;
	Node0x1948160 -> Node0x1948620;
	Node0x1948580 -> Node0x1948690;
	Node0x1948690 -> Node0x1948700;
	Node0x1948510 -> Node0x1948770;
	Node0x1948770 -> Node0x19487e0;
	Node0x1948320 -> Node0x19488c0;
	Node0x1948930 -> Node0x19489a0;
	Node0x1948930 -> Node0x1948a80;
	Node0x1948a80 -> Node0x1948b20;
	Node0x1948850 -> Node0x1948bc0;
	Node0x1948470 -> Node0x1948c30;
	Node0x1948400 -> Node0x1948cd0;
	Node0x1948cd0 -> Node0x1948d40;
	Node0x1948580 -> Node0x1948d40;
	Node0x1948d40 -> Node0x1948db0;
	Node0x1948db0 -> Node0x1949030;
	Node0x19487e0 -> Node0x1949030;
	Node0x1949030 -> Node0x19490a0;
	Node0x1948850 -> Node0x19490a0;
	Node0x19490a0 -> Node0x1949110;
	Node0x19488c0 -> Node0x1949110;
	Node0x1949110 -> Node0x1949180;
	Node0x19489a0 -> Node0x1949180;
	Node0x1949180 -> Node0x19491f0;
	Node0x1948a10 -> Node0x19491f0;
	Node0x19491f0 -> Node0x1949260;
	Node0x1948c30 -> Node0x1949260;
	Node0x1949260 -> Node0x19492d0;
	Node0x1948620 -> Node0x19492d0;
	Node0x19492d0 -> Node0x1949340;
	Node0x1948700 -> Node0x1949340;
	Node0x1949340 -> Node0x19493b0;
	Node0x1948b20 -> Node0x19493b0;
	Node0x19493b0 -> Node0x1949420;
	Node0x1948bc0 -> Node0x1949420;
	Node0x1948390 -> Node0x1949490;
	Node0x1949420 -> Node0x1949490;
	Node0x1949490 -> Node0x18e8268;
	Node0x18e8268 -> Node0x1949930;
}
