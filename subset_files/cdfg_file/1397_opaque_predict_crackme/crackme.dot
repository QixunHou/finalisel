digraph "DFG for'crackme' function" {
	Node0x106b9e0[shape=record, label="  %3 = xor i32 %1, 2147483647"];
	Node0x106ba50[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x106bb10[shape=record, label="  %5 = xor i32 %1, %0"];
	Node0x106bb80[shape=record, label="  %6 = add i32 %4, %5"];
	Node0x106bbf0[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x106bc60[shape=record, label="  %8 = or i32 %1, %0"];
	Node0x106bcd0[shape=record, label="  %9 = shl i32 %5, 1"];
	Node0x106bd70[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x106bde0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x106be80[shape=record, label="  %12 = add i32 %1, 2"];
	Node0x106bef0[shape=record, label="  %13 = sub i32 %12, %8"];
	Node0x106bf60[shape=record, label="  %14 = add i32 %13, %11"];
	Node0x106bfd0[shape=record, label="  %15 = add i32 %14, %7"];
	Node0x106c040[shape=record, label="  %16 = add i32 %15, %10"];
	Node0x106c0b0[shape=record, label="  %17 = icmp eq i32 %16, %0"];
	Node0x100c268[shape=record, label="  %18 = select i1 %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x106c550[shape=record, label="  %19 = tail call i32 @puts(i8* nonnull dereferenceable(1) %18)"];
	Node0x106c5a0[shape=record, label="  ret void"];
	Node0x106b9e0 -> Node0x106ba50;
	Node0x106ba50 -> Node0x106bb10;
	Node0x106bb10 -> Node0x106bb80;
	Node0x106bb80 -> Node0x106bbf0;
	Node0x106bbf0 -> Node0x106bc60;
	Node0x106bc60 -> Node0x106bcd0;
	Node0x106bcd0 -> Node0x106bd70;
	Node0x106bd70 -> Node0x106bde0;
	Node0x106bde0 -> Node0x106be80;
	Node0x106be80 -> Node0x106bef0;
	Node0x106bef0 -> Node0x106bf60;
	Node0x106bf60 -> Node0x106bfd0;
	Node0x106bfd0 -> Node0x106c040;
	Node0x106c040 -> Node0x106c0b0;
	Node0x106c0b0 -> Node0x100c268;
	Node0x100c268 -> Node0x106c550;
	Node0x106c550 -> Node0x106c5a0;
edge [color=red]
	Node0x106b9e0 -> Node0x106ba50;
	Node0x106ba50 -> Node0x106bb80;
	Node0x106bb10 -> Node0x106bb80;
	Node0x106bb80 -> Node0x106bbf0;
	Node0x106bb10 -> Node0x106bcd0;
	Node0x106bcd0 -> Node0x106bd70;
	Node0x106be80 -> Node0x106bef0;
	Node0x106bc60 -> Node0x106bef0;
	Node0x106bef0 -> Node0x106bf60;
	Node0x106bde0 -> Node0x106bf60;
	Node0x106bf60 -> Node0x106bfd0;
	Node0x106bbf0 -> Node0x106bfd0;
	Node0x106bfd0 -> Node0x106c040;
	Node0x106bd70 -> Node0x106c040;
	Node0x106c040 -> Node0x106c0b0;
	Node0x106c0b0 -> Node0x100c268;
	Node0x100c268 -> Node0x106c550;
}
