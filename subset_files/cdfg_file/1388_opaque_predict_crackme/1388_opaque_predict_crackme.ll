; ModuleID = '../.././c_source_file/1388_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1388_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %2, %0
  %11 = and i32 %10, %9
  %12 = xor i32 %2, -1
  %13 = or i32 %12, %1
  %14 = xor i32 %13, -1
  %15 = xor i32 %14, %0
  %16 = add i32 %11, 1
  %17 = sub i32 %16, %15
  %18 = add i32 %17, %7
  %19 = or i32 %4, %3
  %20 = add i32 %4, 1
  %21 = xor i32 %3, -1
  %22 = xor i32 %4, %3
  %23 = shl i32 %22, 1
  %24 = xor i32 %19, -1
  %25 = and i32 %21, %4
  %26 = mul i32 %25, 6
  %27 = mul i32 %7, 9
  %28 = and i32 %4, %3
  %29 = xor i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %0
  %32 = xor i32 %1, %0
  %33 = and i32 %32, %2
  %34 = or i32 %1, %0
  %35 = xor i32 %34, -1
  %36 = or i32 %30, %35
  %37 = and i32 %12, %0
  %38 = or i32 %37, %32
  %39 = and i32 %12, %1
  %40 = xor i32 %39, -1
  %41 = xor i32 %40, %0
  %42 = and i32 %40, %0
  %43 = and i32 %1, %0
  %44 = xor i32 %43, %2
  %45 = xor i32 %0, -1
  %46 = and i32 %8, %2
  %47 = and i32 %46, %45
  %48 = or i32 %8, %2
  %49 = and i32 %48, %0
  %50 = or i32 %47, %49
  %51 = shl i32 %50, 1
  %52 = and i32 %2, %1
  %53 = xor i32 %52, -1
  %54 = or i32 %2, %1
  %55 = xor i32 %54, -1
  %56 = or i32 %55, %45
  %57 = and i32 %2, %0
  %58 = or i32 %57, %32
  %59 = and i32 %8, %0
  %60 = or i32 %59, %30
  %61 = xor i32 %57, -1
  %62 = and i32 %61, %1
  %63 = xor i32 %13, %43
  %64 = shl i32 %63, 1
  %65 = xor i32 %9, -1
  %66 = or i32 %12, %65
  %67 = and i32 %29, %34
  %68 = shl i32 %67, 1
  %69 = xor i32 %59, %53
  %70 = shl i32 %69, 1
  %71 = xor i32 %52, %0
  %72 = shl i32 %71, 1
  %73 = and i32 %52, %45
  %74 = and i32 %29, %0
  %75 = xor i32 %73, -1
  %76 = xor i32 %74, %75
  %77 = xor i32 %10, -1
  %78 = or i32 %77, %8
  %79 = xor i32 %57, %1
  %80 = and i32 %54, %45
  %81 = and i32 %9, %77
  %82 = shl i32 %81, 1
  %83 = xor i32 %57, %40
  %84 = and i32 %77, %8
  %85 = shl i32 %84, 2
  %86 = or i32 %52, %0
  %87 = or i32 %39, %0
  %88 = or i32 %10, %59
  %89 = or i32 %2, %0
  %90 = xor i32 %32, -1
  %91 = and i32 %89, %90
  %92 = and i32 %46, %0
  %93 = or i32 %29, %0
  %94 = xor i32 %92, %93
  %95 = or i32 %77, %1
  %96 = xor i32 %89, -1
  %97 = or i32 %43, %96
  %98 = xor i32 %43, -1
  %99 = and i32 %30, %98
  %100 = or i32 %54, %0
  %101 = xor i32 %29, %0
  %102 = or i32 %92, %101
  %103 = add i32 %9, 1
  %104 = and i32 %34, %77
  %105 = and i32 %52, %0
  %106 = xor i32 %105, %101
  %107 = or i32 %12, %0
  %108 = and i32 %107, %1
  %109 = xor i32 %39, %0
  %110 = xor i32 %37, -1
  %111 = and i32 %110, %90
  %112 = xor i32 %59, %2
  %113 = and i32 %107, %90
  %114 = and i32 %9, %2
  %115 = and i32 %29, %45
  %116 = xor i32 %105, -1
  %117 = xor i32 %115, %116
  %118 = xor i32 %53, %0
  %119 = or i32 %12, %35
  %120 = or i32 %13, %45
  %121 = or i32 %10, %35
  %122 = xor i32 %59, -1
  %123 = and i32 %12, %122
  %124 = or i32 %37, %8
  %125 = or i32 %52, %45
  %126 = xor i32 %89, %43
  %127 = and i32 %48, %45
  %128 = or i32 %92, %127
  %129 = or i32 %57, %90
  %130 = or i32 %39, %59
  %131 = or i32 %10, %90
  %132 = shl i32 %131, 1
  %133 = and i32 %13, %0
  %134 = and i32 %77, %90
  %135 = xor i32 %122, %2
  %136 = or i32 %105, %80
  %137 = shl i32 %136, 1
  %138 = and i32 %53, %0
  %139 = shl i32 %96, 1
  %140 = xor i32 %9, %2
  %141 = or i32 %77, %90
  %142 = and i32 %10, %90
  %143 = and i32 %13, %45
  %144 = or i32 %105, %115
  %145 = and i32 %12, %98
  %146 = xor i32 %37, %13
  %147 = add i32 %10, 1
  %148 = and i32 %77, %98
  %149 = shl i32 %148, 1
  %150 = or i32 %29, %59
  %151 = shl i32 %150, 1
  %152 = shl i32 %14, 1
  %153 = xor i32 %107, -1
  %154 = and i32 %61, %90
  %155 = xor i32 %57, %9
  %156 = xor i32 %101, -1
  %157 = xor i32 %92, %156
  %158 = xor i32 %153, %1
  %159 = xor i32 %49, -1
  %160 = xor i32 %47, %159
  %161 = xor i32 %34, %2
  %162 = and i32 %54, %0
  %163 = xor i32 %162, %75
  %164 = or i32 %59, %2
  %165 = and i32 %9, %12
  %166 = or i32 %14, %45
  %167 = or i32 %153, %1
  %168 = or i32 %43, %2
  %169 = xor i32 %13, %0
  %170 = and i32 %10, %98
  %171 = or i32 %40, %45
  %172 = or i32 %10, %8
  %173 = or i32 %37, %52
  %174 = or i32 %37, %14
  %175 = and i32 %32, %61
  %176 = xor i32 %80, %116
  %177 = and i32 %34, %12
  %178 = or i32 %77, %35
  %179 = and i32 %34, %30
  %180 = or i32 %29, %35
  %181 = or i32 %29, %43
  %182 = or i32 %57, %55
  %183 = or i32 %37, %1
  %184 = or i32 %53, %0
  %185 = xor i32 %30, %0
  %186 = or i32 %43, %153
  %187 = or i32 %32, %12
  %188 = or i32 %29, %65
  %189 = or i32 %32, %77
  %190 = or i32 %73, %74
  %191 = or i32 %35, %2
  %192 = shl i32 %34, 1
  %193 = or i32 %43, %14
  %194 = or i32 %30, %0
  %195 = xor i32 %93, -1
  %196 = or i32 %92, %195
  %197 = and i32 %10, %8
  %198 = and i32 %30, %122
  %199 = or i32 %96, %8
  %200 = and i32 %10, %1
  %201 = and i32 %32, %110
  %202 = and i32 %98, %2
  %203 = or i32 %43, %77
  %204 = or i32 %90, %2
  %205 = or i32 %52, %59
  %206 = xor i32 %61, %1
  %207 = or i32 %40, %0
  %208 = or i32 %73, %162
  %209 = and i32 %77, %1
  %210 = or i32 %14, %0
  %211 = or i32 %77, %65
  %212 = xor i32 %89, %1
  %213 = and i32 %107, %8
  %214 = and i32 %89, %32
  %215 = and i32 %77, %122
  %216 = or i32 %57, %8
  %217 = or i32 %39, %45
  %218 = xor i32 %37, %53
  %219 = or i32 %10, %65
  %220 = or i32 %37, %90
  %221 = or i32 %29, %45
  %222 = xor i32 %221, -1
  %223 = or i32 %47, %222
  %224 = or i32 %13, %0
  %225 = xor i32 %59, %40
  %226 = or i32 %59, %12
  %227 = and i32 %34, %2
  %228 = or i32 %30, %45
  %229 = add i32 %43, 1
  %230 = xor i32 %35, %2
  %231 = and i32 %29, %98
  %232 = and i32 %32, %12
  %233 = or i32 %43, %55
  %234 = or i32 %43, %30
  %235 = and i32 %90, %2
  %236 = shl i32 %235, 1
  %237 = or i32 %96, %1
  %238 = shl i32 %237, 1
  %239 = or i32 %32, %153
  %240 = xor i32 %127, 2147483647
  %241 = xor i32 %240, %92
  %242 = shl i32 %241, 1
  %243 = xor i32 %107, %43
  %244 = and i32 %29, %9
  %245 = shl i32 %244, 1
  %246 = and i32 %110, %8
  %247 = xor i32 %55, %0
  %248 = xor i32 %54, %0
  %249 = xor i32 %248, %116
  %250 = xor i32 %48, %0
  %251 = or i32 %92, %250
  %252 = xor i32 %250, -1
  %253 = xor i32 %92, %252
  %254 = or i32 %153, %8
  %255 = add i32 %37, 1
  %256 = or i32 %10, %32
  %257 = or i32 %153, %90
  %258 = and i32 %10, %32
  %259 = and i32 %40, %45
  %260 = or i32 %105, %248
  %261 = shl i32 %260, 1
  %262 = or i32 %30, %65
  %263 = or i32 %53, %45
  %264 = and i32 %122, %2
  %265 = shl i32 %264, 1
  %266 = xor i32 %57, %34
  %267 = or i32 %105, %156
  %268 = xor i32 %98, %2
  %269 = and i32 %12, %90
  %270 = and i32 %32, %77
  %271 = shl i32 %1, 1
  %272 = and i32 %110, %1
  %273 = xor i32 %47, %221
  %274 = and i32 %55, %45
  %275 = mul i32 %274, -29
  %276 = and i32 %39, %45
  %277 = and i32 %55, %0
  %278 = mul i32 %277, -21
  %279 = and i32 %39, %0
  %280 = mul i32 %279, -17
  %281 = and i32 %14, %45
  %282 = mul i32 %281, -18
  %283 = and i32 %14, %0
  %284 = sub i32 -2, %32
  %285 = add i32 %284, %268
  %286 = add i32 %285, %30
  %287 = add i32 %286, %10
  %288 = add i32 %287, %13
  %289 = add i32 %288, %283
  %290 = add i32 %289, %270
  %291 = add i32 %290, %233
  %292 = add i32 %291, %215
  %293 = add i32 %292, %214
  %294 = add i32 %293, %115
  %295 = add i32 %294, %212
  %296 = add i32 %295, %211
  %297 = add i32 %296, %205
  %298 = add i32 %297, %166
  %299 = add i32 %298, %120
  %300 = add i32 %299, %95
  %301 = sub i32 %300, %19
  %302 = shl i32 %301, 1
  %303 = sub i32 %140, %52
  %304 = sub i32 %303, %73
  %305 = sub i32 %304, %162
  %306 = add i32 %305, %228
  %307 = sub i32 %306, %179
  %308 = sub i32 %307, %175
  %309 = add i32 %308, %28
  %310 = add i32 %309, %251
  %311 = mul i32 %310, 5
  %312 = add i32 %121, %105
  %313 = add i32 %312, %24
  %314 = mul i32 %313, 3
  %315 = add i32 %91, %53
  %316 = shl i32 %315, 2
  %317 = sub i32 %9, %1
  %318 = add i32 %317, %103
  %319 = sub i32 %318, %2
  %320 = add i32 %319, %43
  %321 = add i32 %320, %35
  %322 = add i32 %321, %229
  %323 = sub i32 %322, %32
  %324 = sub i32 %323, %271
  %325 = add i32 %324, %21
  %326 = sub i32 %325, %33
  %327 = add i32 %326, %44
  %328 = add i32 %327, %66
  %329 = add i32 %328, %61
  %330 = add i32 %329, %112
  %331 = sub i32 %330, %114
  %332 = sub i32 %331, %119
  %333 = add i32 %332, %37
  %334 = add i32 %333, %123
  %335 = add i32 %334, %135
  %336 = sub i32 %335, %39
  %337 = add i32 %336, %145
  %338 = add i32 %337, %147
  %339 = add i32 %338, %153
  %340 = add i32 %339, %161
  %341 = add i32 %340, %164
  %342 = sub i32 %341, %165
  %343 = add i32 %342, %89
  %344 = sub i32 %343, %168
  %345 = sub i32 %344, %29
  %346 = add i32 %345, %177
  %347 = add i32 %346, %187
  %348 = sub i32 %347, %191
  %349 = sub i32 %348, %192
  %350 = add i32 %349, %40
  %351 = add i32 %350, %202
  %352 = sub i32 %351, %204
  %353 = add i32 %352, %226
  %354 = add i32 %353, %227
  %355 = sub i32 %354, %230
  %356 = add i32 %355, %232
  %357 = sub i32 %356, %57
  %358 = add i32 %357, %255
  %359 = sub i32 %358, %269
  %360 = add i32 %359, %20
  %361 = sub i32 %360, %31
  %362 = add i32 %361, %36
  %363 = add i32 %362, %38
  %364 = sub i32 %363, %41
  %365 = sub i32 %364, %42
  %366 = add i32 %365, %56
  %367 = sub i32 %366, %58
  %368 = sub i32 %367, %60
  %369 = sub i32 %368, %62
  %370 = add i32 %369, %78
  %371 = add i32 %370, %79
  %372 = add i32 %371, %80
  %373 = add i32 %372, %83
  %374 = sub i32 %373, %86
  %375 = add i32 %374, %87
  %376 = add i32 %375, %88
  %377 = add i32 %376, %97
  %378 = sub i32 %377, %99
  %379 = add i32 %378, %100
  %380 = add i32 %379, %104
  %381 = add i32 %380, %108
  %382 = add i32 %381, %109
  %383 = add i32 %382, %111
  %384 = sub i32 %383, %113
  %385 = sub i32 %384, %118
  %386 = sub i32 %385, %124
  %387 = sub i32 %386, %125
  %388 = sub i32 %387, %126
  %389 = add i32 %388, %129
  %390 = sub i32 %389, %130
  %391 = add i32 %390, %133
  %392 = add i32 %391, %134
  %393 = sub i32 %392, %138
  %394 = sub i32 %393, %139
  %395 = sub i32 %394, %141
  %396 = sub i32 %395, %142
  %397 = sub i32 %396, %143
  %398 = add i32 %397, %146
  %399 = sub i32 %398, %152
  %400 = add i32 %399, %154
  %401 = sub i32 %400, %155
  %402 = sub i32 %401, %158
  %403 = add i32 %402, %74
  %404 = sub i32 %403, %167
  %405 = add i32 %404, %169
  %406 = add i32 %405, %170
  %407 = sub i32 %406, %171
  %408 = add i32 %407, %172
  %409 = add i32 %408, %173
  %410 = add i32 %409, %174
  %411 = add i32 %410, %178
  %412 = add i32 %411, %180
  %413 = sub i32 %412, %181
  %414 = sub i32 %413, %182
  %415 = add i32 %414, %183
  %416 = add i32 %415, %184
  %417 = add i32 %416, %185
  %418 = add i32 %417, %186
  %419 = sub i32 %418, %188
  %420 = add i32 %419, %189
  %421 = sub i32 %420, %193
  %422 = sub i32 %421, %93
  %423 = sub i32 %422, %194
  %424 = add i32 %423, %197
  %425 = add i32 %424, %198
  %426 = sub i32 %425, %199
  %427 = add i32 %426, %200
  %428 = add i32 %427, %201
  %429 = sub i32 %428, %203
  %430 = add i32 %429, %206
  %431 = add i32 %430, %207
  %432 = add i32 %431, %209
  %433 = sub i32 %432, %210
  %434 = add i32 %433, %213
  %435 = add i32 %434, %216
  %436 = sub i32 %435, %217
  %437 = sub i32 %436, %218
  %438 = sub i32 %437, %219
  %439 = add i32 %438, %220
  %440 = add i32 %439, %224
  %441 = sub i32 %440, %225
  %442 = add i32 %441, %231
  %443 = sub i32 %442, %234
  %444 = sub i32 %443, %236
  %445 = sub i32 %444, %239
  %446 = sub i32 %445, %243
  %447 = add i32 %446, %246
  %448 = add i32 %447, %247
  %449 = add i32 %448, %254
  %450 = sub i32 %449, %256
  %451 = add i32 %450, %257
  %452 = sub i32 %451, %258
  %453 = sub i32 %452, %259
  %454 = sub i32 %453, %262
  %455 = sub i32 %454, %263
  %456 = sub i32 %455, %265
  %457 = add i32 %456, %266
  %458 = sub i32 %457, %272
  %459 = sub i32 %458, %276
  %460 = sub i32 %459, %64
  %461 = sub i32 %460, %68
  %462 = sub i32 %461, %70
  %463 = sub i32 %462, %72
  %464 = sub i32 %463, %76
  %465 = sub i32 %464, %82
  %466 = sub i32 %465, %85
  %467 = add i32 %466, %94
  %468 = sub i32 %467, %102
  %469 = sub i32 %468, %106
  %470 = sub i32 %469, %117
  %471 = sub i32 %470, %128
  %472 = sub i32 %471, %132
  %473 = add i32 %472, %144
  %474 = sub i32 %473, %149
  %475 = sub i32 %474, %151
  %476 = sub i32 %475, %157
  %477 = sub i32 %476, %160
  %478 = sub i32 %477, %163
  %479 = add i32 %478, %176
  %480 = add i32 %479, %190
  %481 = add i32 %480, %196
  %482 = sub i32 %481, %208
  %483 = sub i32 %482, %223
  %484 = sub i32 %483, %238
  %485 = sub i32 %484, %245
  %486 = sub i32 %485, %249
  %487 = sub i32 %486, %253
  %488 = sub i32 %487, %267
  %489 = sub i32 %488, %273
  %490 = add i32 %489, %275
  %491 = add i32 %490, %278
  %492 = add i32 %491, %280
  %493 = add i32 %492, %282
  %494 = sub i32 %493, %23
  %495 = add i32 %494, %26
  %496 = add i32 %495, %27
  %497 = sub i32 %496, %51
  %498 = sub i32 %497, %137
  %499 = sub i32 %498, %261
  %500 = add i32 %499, %316
  %501 = sub i32 %500, %242
  %502 = add i32 %501, %314
  %503 = add i32 %502, %311
  %504 = add i32 %503, %302
  %505 = icmp eq i32 %18, %504
  %506 = select i1 %505, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %507 = tail call i32 @puts(i8* nonnull dereferenceable(1) %506)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
