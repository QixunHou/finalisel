; ModuleID = '../.././c_source_file/0861_path_condition_crackme.c'
source_filename = "../.././c_source_file/0861_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = and i32 %2, %1
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %0
  %11 = and i32 %8, %0
  %12 = or i32 %2, %1
  %13 = xor i32 %12, %0
  %14 = or i32 %11, %13
  %15 = add i32 %14, %10
  %16 = shl i32 %15, 1
  %17 = add i32 %7, %6
  %18 = add i32 %17, %16
  %19 = or i32 %4, %3
  %20 = xor i32 %3, -1
  %21 = and i32 %4, %3
  %22 = xor i32 %19, -1
  %23 = xor i32 %7, -1
  %24 = and i32 %6, %3
  %25 = xor i32 %2, %0
  %26 = or i32 %25, %1
  %27 = xor i32 %0, -1
  %28 = xor i32 %1, -1
  %29 = and i32 %28, %2
  %30 = and i32 %29, %27
  %31 = or i32 %28, %2
  %32 = and i32 %31, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %30, %33
  %35 = and i32 %1, %0
  %36 = xor i32 %12, %35
  %37 = xor i32 %2, -1
  %38 = or i32 %37, %0
  %39 = xor i32 %38, -1
  %40 = xor i32 %1, %0
  %41 = or i32 %40, %39
  %42 = or i32 %2, %0
  %43 = xor i32 %42, -1
  %44 = or i32 %43, %28
  %45 = and i32 %37, %0
  %46 = xor i32 %45, -1
  %47 = xor i32 %46, %1
  %48 = xor i32 %12, -1
  %49 = or i32 %35, %48
  %50 = or i32 %28, %0
  %51 = xor i32 %50, -1
  %52 = xor i32 %2, %1
  %53 = or i32 %52, %51
  %54 = or i32 %52, %35
  %55 = or i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %52, %56
  %58 = xor i32 %25, -1
  %59 = and i32 %55, %58
  %60 = and i32 %52, %27
  %61 = xor i32 %60, -1
  %62 = xor i32 %11, %61
  %63 = and i32 %58, %28
  %64 = xor i32 %43, %1
  %65 = and i32 %50, %58
  %66 = shl i32 %65, 1
  %67 = and i32 %25, %55
  %68 = xor i32 %45, %1
  %69 = shl i32 %68, 1
  %70 = and i32 %28, %0
  %71 = or i32 %25, %70
  %72 = xor i32 %42, %1
  %73 = xor i32 %40, -1
  %74 = or i32 %43, %73
  %75 = and i32 %8, %27
  %76 = and i32 %12, %0
  %77 = xor i32 %76, -1
  %78 = xor i32 %75, %77
  %79 = xor i32 %52, -1
  %80 = or i32 %79, %0
  %81 = and i32 %52, %55
  %82 = or i32 %58, %1
  %83 = or i32 %48, %0
  %84 = and i32 %2, %0
  %85 = or i32 %84, %48
  %86 = shl i32 %85, 1
  %87 = xor i32 %70, -1
  %88 = or i32 %37, %1
  %89 = xor i32 %88, %35
  %90 = and i32 %12, %27
  %91 = or i32 %84, %73
  %92 = or i32 %37, %73
  %93 = or i32 %9, %0
  %94 = and i32 %58, %1
  %95 = shl i32 %50, 1
  %96 = and i32 %29, %0
  %97 = xor i32 %31, %0
  %98 = or i32 %96, %97
  %99 = or i32 %25, %40
  %100 = xor i32 %88, -1
  %101 = or i32 %35, %100
  %102 = and i32 %87, %2
  %103 = or i32 %43, %1
  %104 = xor i32 %88, %0
  %105 = and i32 %52, %0
  %106 = or i32 %58, %51
  %107 = and i32 %9, %0
  %108 = and i32 %40, %37
  %109 = or i32 %58, %56
  %110 = or i32 %40, %58
  %111 = or i32 %52, %27
  %112 = xor i32 %111, -1
  %113 = or i32 %30, %112
  %114 = and i32 %42, %1
  %115 = or i32 %48, %27
  %116 = and i32 %37, %73
  %117 = or i32 %11, %90
  %118 = or i32 %45, %1
  %119 = or i32 %9, %27
  %120 = and i32 %37, %1
  %121 = xor i32 %120, -1
  %122 = and i32 %121, %27
  %123 = and i32 %42, %73
  %124 = and i32 %9, %27
  %125 = or i32 %79, %51
  %126 = xor i32 %84, %12
  %127 = or i32 %40, %2
  %128 = shl i32 %127, 1
  %129 = or i32 %45, %73
  %130 = xor i32 %38, %35
  %131 = xor i32 %52, %0
  %132 = xor i32 %131, -1
  %133 = or i32 %11, %132
  %134 = or i32 %84, %56
  %135 = xor i32 %56, %2
  %136 = and i32 %40, %58
  %137 = or i32 %88, %27
  %138 = xor i32 %30, %111
  %139 = xor i32 %35, -1
  %140 = and i32 %37, %139
  %141 = or i32 %40, %43
  %142 = or i32 %51, %2
  %143 = or i32 %120, %27
  %144 = xor i32 %42, %35
  %145 = xor i32 %120, %0
  %146 = or i32 %79, %56
  %147 = and i32 %38, %73
  %148 = and i32 %50, %37
  %149 = xor i32 %70, %121
  %150 = and i32 %37, %87
  %151 = and i32 %52, %139
  %152 = or i32 %52, %0
  %153 = or i32 %84, %40
  %154 = xor i32 %96, %152
  %155 = or i32 %45, %40
  %156 = or i32 %39, %1
  %157 = or i32 %25, %73
  %158 = and i32 %121, %0
  %159 = and i32 %79, %27
  %160 = and i32 %139, %2
  %161 = and i32 %55, %2
  %162 = xor i32 %51, %2
  %163 = xor i32 %70, %9
  %164 = or i32 %37, %56
  %165 = or i32 %70, %37
  %166 = and i32 %88, %27
  %167 = shl i32 %166, 1
  %168 = xor i32 %84, -1
  %169 = add i32 %84, 1
  %170 = or i32 %100, %0
  %171 = add i32 %42, 1
  %172 = and i32 %58, %73
  %173 = and i32 %25, %40
  %174 = xor i32 %8, %0
  %175 = xor i32 %168, %1
  %176 = or i32 %35, %79
  %177 = or i32 %25, %51
  %178 = or i32 %8, %27
  %179 = and i32 %25, %73
  %180 = and i32 %73, %2
  %181 = and i32 %88, %0
  %182 = or i32 %120, %0
  %183 = and i32 %168, %28
  %184 = xor i32 %11, %131
  %185 = and i32 %25, %28
  %186 = xor i32 %105, 1073741823
  %187 = xor i32 %186, %75
  %188 = xor i32 %35, %2
  %189 = or i32 %75, %105
  %190 = or i32 %84, %120
  %191 = and i32 %48, %27
  %192 = and i32 %120, %27
  %193 = and i32 %48, %0
  %194 = mul i32 %193, -14
  %195 = and i32 %120, %0
  %196 = shl i32 %195, 2
  %197 = and i32 %100, %27
  %198 = mul i32 %197, -13
  %199 = and i32 %100, %0
  %200 = shl i32 %11, 2
  %201 = add i32 %190, %2
  %202 = add i32 %201, %13
  %203 = add i32 %202, %173
  %204 = add i32 %203, %144
  %205 = add i32 %204, %118
  %206 = add i32 %205, %114
  %207 = add i32 %206, %106
  %208 = add i32 %207, %105
  %209 = add i32 %208, %83
  %210 = add i32 %209, %67
  %211 = add i32 %210, %64
  %212 = add i32 %211, %26
  %213 = add i32 %212, %21
  %214 = shl i32 %213, 1
  %215 = add i32 %172, %155
  %216 = sub i32 %146, %215
  %217 = add i32 %216, %129
  %218 = mul i32 %217, 5
  %219 = add i32 %24, %108
  %220 = sub i32 %219, %133
  %221 = mul i32 %220, 3
  %222 = sub i32 %191, %75
  %223 = mul i32 %222, 9
  %224 = add i32 %187, %52
  %225 = shl i32 %224, 2
  %226 = add i32 %70, 2
  %227 = add i32 %226, %70
  %228 = add i32 %227, %56
  %229 = add i32 %228, %20
  %230 = add i32 %229, %39
  %231 = sub i32 %230, %84
  %232 = sub i32 %231, %92
  %233 = sub i32 %232, %95
  %234 = sub i32 %233, %102
  %235 = add i32 %234, %58
  %236 = add i32 %235, %116
  %237 = add i32 %236, %46
  %238 = sub i32 %237, %12
  %239 = add i32 %238, %135
  %240 = sub i32 %239, %140
  %241 = add i32 %240, %142
  %242 = sub i32 %241, %148
  %243 = sub i32 %242, %150
  %244 = sub i32 %243, %160
  %245 = sub i32 %244, %161
  %246 = add i32 %245, %162
  %247 = sub i32 %246, %120
  %248 = sub i32 %247, %164
  %249 = add i32 %248, %165
  %250 = add i32 %249, %169
  %251 = add i32 %250, %171
  %252 = add i32 %251, %88
  %253 = add i32 %252, %180
  %254 = sub i32 %253, %188
  %255 = sub i32 %254, %4
  %256 = add i32 %255, %36
  %257 = add i32 %256, %41
  %258 = sub i32 %257, %44
  %259 = sub i32 %258, %47
  %260 = add i32 %259, %49
  %261 = add i32 %260, %53
  %262 = add i32 %261, %54
  %263 = add i32 %262, %57
  %264 = add i32 %263, %59
  %265 = sub i32 %264, %63
  %266 = add i32 %265, %71
  %267 = add i32 %266, %72
  %268 = sub i32 %267, %74
  %269 = add i32 %268, %80
  %270 = add i32 %269, %81
  %271 = sub i32 %270, %82
  %272 = add i32 %271, %89
  %273 = sub i32 %272, %90
  %274 = sub i32 %273, %91
  %275 = sub i32 %274, %93
  %276 = add i32 %275, %94
  %277 = sub i32 %276, %99
  %278 = sub i32 %277, %101
  %279 = add i32 %278, %103
  %280 = sub i32 %279, %104
  %281 = add i32 %280, %107
  %282 = sub i32 %281, %109
  %283 = sub i32 %282, %110
  %284 = add i32 %283, %115
  %285 = sub i32 %284, %119
  %286 = add i32 %285, %122
  %287 = sub i32 %286, %76
  %288 = sub i32 %287, %123
  %289 = sub i32 %288, %124
  %290 = add i32 %289, %125
  %291 = add i32 %290, %126
  %292 = sub i32 %291, %128
  %293 = sub i32 %292, %130
  %294 = add i32 %293, %134
  %295 = sub i32 %294, %136
  %296 = sub i32 %295, %137
  %297 = sub i32 %296, %141
  %298 = add i32 %297, %143
  %299 = add i32 %298, %145
  %300 = sub i32 %299, %147
  %301 = sub i32 %300, %149
  %302 = sub i32 %301, %151
  %303 = add i32 %302, %152
  %304 = sub i32 %303, %153
  %305 = add i32 %304, %156
  %306 = add i32 %305, %157
  %307 = add i32 %306, %158
  %308 = sub i32 %307, %159
  %309 = add i32 %308, %131
  %310 = sub i32 %309, %163
  %311 = sub i32 %310, %170
  %312 = add i32 %311, %174
  %313 = sub i32 %312, %175
  %314 = sub i32 %313, %176
  %315 = sub i32 %314, %177
  %316 = sub i32 %315, %178
  %317 = sub i32 %316, %179
  %318 = sub i32 %317, %181
  %319 = sub i32 %318, %182
  %320 = add i32 %319, %183
  %321 = sub i32 %320, %185
  %322 = sub i32 %321, %60
  %323 = sub i32 %322, %192
  %324 = add i32 %323, %199
  %325 = sub i32 %324, %19
  %326 = add i32 %325, %21
  %327 = add i32 %326, %22
  %328 = add i32 %327, %23
  %329 = sub i32 %328, %34
  %330 = sub i32 %329, %62
  %331 = sub i32 %330, %66
  %332 = sub i32 %331, %69
  %333 = add i32 %332, %78
  %334 = sub i32 %333, %86
  %335 = add i32 %334, %98
  %336 = add i32 %335, %113
  %337 = add i32 %336, %117
  %338 = add i32 %337, %138
  %339 = sub i32 %338, %154
  %340 = sub i32 %339, %167
  %341 = add i32 %340, %184
  %342 = add i32 %341, %189
  %343 = add i32 %342, %194
  %344 = sub i32 %343, %196
  %345 = add i32 %344, %198
  %346 = sub i32 %345, %200
  %347 = add i32 %346, %223
  %348 = add i32 %347, %218
  %349 = add i32 %348, %221
  %350 = add i32 %349, %225
  %351 = add i32 %350, %214
  %352 = icmp eq i32 %18, %351
  %353 = select i1 %352, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %354 = tail call i32 @puts(i8* nonnull dereferenceable(1) %353)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
