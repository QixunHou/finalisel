; ModuleID = '../.././c_source_file/0893_path_condition_crackme.c'
source_filename = "../.././c_source_file/0893_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %2, -1
  %8 = and i32 %7, %1
  %9 = xor i32 %8, -1
  %10 = xor i32 %9, %0
  %11 = xor i32 %0, -1
  %12 = xor i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = and i32 %13, %11
  %15 = sub i32 1, %10
  %16 = add i32 %15, %14
  %17 = add i32 %16, %6
  %18 = xor i32 %4, -1
  %19 = shl i32 %18, 1
  %20 = or i32 %19, 1
  %21 = or i32 %4, %3
  %22 = shl i32 %21, 1
  %23 = and i32 %18, %3
  %24 = xor i32 %23, -1
  %25 = xor i32 %22, -2
  %26 = xor i32 %3, -1
  %27 = and i32 %26, %4
  %28 = shl i32 %6, 1
  %29 = and i32 %1, %0
  %30 = xor i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = or i32 %29, %31
  %33 = or i32 %2, %1
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %0
  %36 = xor i32 %1, %0
  %37 = and i32 %36, %31
  %38 = and i32 %12, %0
  %39 = and i32 %2, %0
  %40 = xor i32 %1, -1
  %41 = or i32 %40, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %39, %42
  %44 = xor i32 %29, -1
  %45 = and i32 %7, %44
  %46 = xor i32 %42, %2
  %47 = or i32 %29, %34
  %48 = or i32 %2, %0
  %49 = and i32 %48, %36
  %50 = or i32 %1, %0
  %51 = and i32 %50, %31
  %52 = and i32 %2, %1
  %53 = or i32 %52, %0
  %54 = and i32 %13, %44
  %55 = and i32 %40, %2
  %56 = and i32 %55, %0
  %57 = or i32 %12, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %56, %58
  %60 = and i32 %40, %0
  %61 = or i32 %60, %13
  %62 = or i32 %30, %1
  %63 = add i32 %41, 1
  %64 = and i32 %30, %36
  %65 = and i32 %52, %11
  %66 = and i32 %33, %0
  %67 = or i32 %65, %66
  %68 = shl i32 %67, 1
  %69 = xor i32 %52, -1
  %70 = or i32 %69, %0
  %71 = or i32 %8, %60
  %72 = xor i32 %12, %0
  %73 = or i32 %56, %72
  %74 = or i32 %7, %1
  %75 = or i32 %40, %2
  %76 = and i32 %75, %11
  %77 = or i32 %56, %76
  %78 = and i32 %12, %11
  %79 = or i32 %7, %0
  %80 = xor i32 %79, -1
  %81 = and i32 %52, %0
  %82 = xor i32 %78, -1
  %83 = xor i32 %81, %82
  %84 = and i32 %7, %0
  %85 = xor i32 %84, -1
  %86 = xor i32 %85, %1
  %87 = and i32 %13, %0
  %88 = and i32 %30, %50
  %89 = shl i32 %88, 1
  %90 = and i32 %55, %11
  %91 = and i32 %75, %0
  %92 = or i32 %90, %91
  %93 = xor i32 %48, -1
  %94 = or i32 %93, %40
  %95 = or i32 %12, %11
  %96 = xor i32 %95, -1
  %97 = or i32 %90, %96
  %98 = or i32 %84, %1
  %99 = xor i32 %74, -1
  %100 = xor i32 %99, %0
  %101 = shl i32 %100, 1
  %102 = xor i32 %48, %1
  %103 = xor i32 %50, -1
  %104 = xor i32 %103, %2
  %105 = xor i32 %60, -1
  %106 = and i32 %7, %105
  %107 = xor i32 %90, %95
  %108 = xor i32 %74, %0
  %109 = or i32 %39, %40
  %110 = add i32 %12, 1
  %111 = or i32 %29, %80
  %112 = and i32 %48, %40
  %113 = or i32 %52, %11
  %114 = and i32 %48, %1
  %115 = or i32 %69, %11
  %116 = shl i32 %115, 1
  %117 = and i32 %69, %11
  %118 = xor i32 %29, %2
  %119 = and i32 %36, %2
  %120 = or i32 %12, %29
  %121 = xor i32 %72, -1
  %122 = xor i32 %56, %121
  %123 = and i32 %30, %44
  %124 = or i32 %81, %121
  %125 = or i32 %30, %42
  %126 = or i32 %13, %42
  %127 = or i32 %7, %42
  %128 = or i32 %30, %40
  %129 = shl i32 %128, 1
  %130 = xor i32 %74, %29
  %131 = shl i32 %130, 1
  %132 = xor i32 %75, %0
  %133 = xor i32 %132, -1
  %134 = xor i32 %56, %133
  %135 = or i32 %13, %11
  %136 = or i32 %34, %11
  %137 = shl i32 %136, 1
  %138 = or i32 %74, %0
  %139 = shl i32 %138, 1
  %140 = xor i32 %84, %69
  %141 = or i32 %74, %11
  %142 = or i32 %9, %11
  %143 = xor i32 %13, %0
  %144 = or i32 %29, %99
  %145 = or i32 %8, %0
  %146 = and i32 %36, %85
  %147 = shl i32 %52, 1
  %148 = xor i32 %48, %29
  %149 = and i32 %50, %7
  %150 = or i32 %7, %103
  %151 = xor i32 %105, %2
  %152 = and i32 %12, %41
  %153 = xor i32 %39, -1
  %154 = and i32 %85, %1
  %155 = or i32 %12, %60
  %156 = or i32 %33, %0
  %157 = or i32 %33, %11
  %158 = xor i32 %34, %0
  %159 = or i32 %52, %60
  %160 = or i32 %65, %38
  %161 = and i32 %9, %11
  %162 = and i32 %153, %40
  %163 = or i32 %13, %103
  %164 = and i32 %50, %2
  %165 = xor i32 %36, -1
  %166 = and i32 %7, %165
  %167 = or i32 %93, %165
  %168 = shl i32 %167, 1
  %169 = xor i32 %79, %29
  %170 = xor i32 %33, %0
  %171 = or i32 %81, %170
  %172 = xor i32 %153, %1
  %173 = or i32 %60, %7
  %174 = or i32 %31, %1
  %175 = or i32 %7, %165
  %176 = xor i32 %93, %1
  %177 = or i32 %103, %2
  %178 = and i32 %79, %40
  %179 = or i32 %80, %40
  %180 = or i32 %29, %7
  %181 = or i32 %36, %31
  %182 = shl i32 %181, 1
  %183 = xor i32 %39, %50
  %184 = and i32 %9, %0
  %185 = xor i32 %80, %1
  %186 = and i32 %79, %1
  %187 = xor i32 %60, %69
  %188 = or i32 %39, %1
  %189 = shl i32 %188, 1
  %190 = or i32 %30, %29
  %191 = or i32 %84, %165
  %192 = xor i32 %44, %2
  %193 = and i32 %30, %165
  %194 = xor i32 %81, %35
  %195 = or i32 %30, %60
  %196 = shl i32 %195, 1
  %197 = xor i32 %84, %74
  %198 = shl i32 %197, 1
  %199 = xor i32 %39, %1
  %200 = xor i32 %39, %41
  %201 = and i32 %30, %105
  %202 = and i32 %41, %13
  %203 = or i32 %39, %165
  %204 = xor i32 %69, %0
  %205 = or i32 %31, %42
  %206 = xor i32 %38, 2147483647
  %207 = xor i32 %206, %65
  %208 = or i32 %42, %2
  %209 = xor i32 %41, %2
  %210 = xor i32 %39, %9
  %211 = shl i32 %7, 1
  %212 = or i32 %80, %1
  %213 = or i32 %36, %80
  %214 = and i32 %36, %153
  %215 = or i32 %81, %78
  %216 = or i32 %12, %42
  %217 = or i32 %84, %52
  %218 = and i32 %12, %105
  %219 = or i32 %31, %40
  %220 = shl i32 %219, 1
  %221 = and i32 %74, %0
  %222 = and i32 %69, %0
  %223 = or i32 %31, %103
  %224 = or i32 %36, %7
  %225 = and i32 %36, %7
  %226 = xor i32 %84, %1
  %227 = shl i32 %226, 1
  %228 = xor i32 %60, %9
  %229 = and i32 %79, %36
  %230 = or i32 %29, %2
  %231 = and i32 %31, %40
  %232 = xor i32 %91, -1
  %233 = xor i32 %90, %232
  %234 = or i32 %36, %2
  %235 = and i32 %79, %165
  %236 = shl i32 %235, 2
  %237 = or i32 %8, %11
  %238 = shl i32 %237, 1
  %239 = or i32 %30, %103
  %240 = add i32 %48, 1
  %241 = and i32 %48, %165
  %242 = xor i32 %81, %72
  %243 = shl i32 %242, 2
  %244 = xor i32 %50, %2
  %245 = and i32 %41, %7
  %246 = or i32 %80, %165
  %247 = or i32 %84, %99
  %248 = or i32 %9, %0
  %249 = and i32 %30, %41
  %250 = or i32 %56, %132
  %251 = shl i32 %250, 1
  %252 = or i32 %165, %2
  %253 = and i32 %85, %40
  %254 = and i32 %30, %40
  %255 = or i32 %39, %34
  %256 = or i32 %60, %31
  %257 = or i32 %39, %36
  %258 = and i32 %41, %2
  %259 = or i32 %39, %8
  %260 = and i32 %34, %11
  %261 = and i32 %8, %11
  %262 = shl i32 %261, 2
  %263 = and i32 %34, %0
  %264 = and i32 %8, %0
  %265 = mul i32 %264, 7
  %266 = and i32 %99, %11
  %267 = mul i32 %266, -13
  %268 = mul i32 %65, -14
  %269 = and i32 %99, %0
  %270 = mul i32 %269, -20
  %271 = mul i32 %81, 12
  %272 = add i32 %60, %36
  %273 = add i32 %272, %106
  %274 = add i32 %273, %257
  %275 = add i32 %274, %239
  %276 = add i32 %275, %216
  %277 = add i32 %276, %213
  %278 = add i32 %277, %162
  %279 = add i32 %278, %152
  %280 = add i32 %279, %102
  %281 = add i32 %280, %98
  %282 = add i32 %281, %51
  %283 = add i32 %282, %37
  %284 = add i32 %283, %92
  %285 = add i32 %284, %207
  %286 = shl i32 %285, 1
  %287 = sub i32 %208, %32
  %288 = add i32 %287, %107
  %289 = add i32 %288, %160
  %290 = mul i32 %289, 5
  %291 = add i32 %166, %85
  %292 = shl i32 %291, 2
  %293 = add i32 %209, -1
  %294 = add i32 %293, %173
  %295 = sub i32 %294, %263
  %296 = add i32 %295, %204
  %297 = add i32 %296, %183
  %298 = sub i32 %297, %135
  %299 = sub i32 %298, %27
  %300 = sub i32 %299, %23
  %301 = mul i32 %300, 3
  %302 = sub i32 2, %0
  %303 = add i32 %302, %11
  %304 = add i32 %303, %1
  %305 = add i32 %304, %63
  %306 = sub i32 %305, %29
  %307 = sub i32 %306, %41
  %308 = add i32 %307, %2
  %309 = add i32 %308, %165
  %310 = add i32 %309, %105
  %311 = sub i32 %310, %45
  %312 = sub i32 %311, %46
  %313 = add i32 %312, %31
  %314 = sub i32 %313, %74
  %315 = add i32 %314, %84
  %316 = add i32 %315, %104
  %317 = add i32 %316, %110
  %318 = sub i32 %317, %8
  %319 = add i32 %318, %118
  %320 = sub i32 %319, %119
  %321 = sub i32 %320, %127
  %322 = sub i32 %321, %149
  %323 = add i32 %322, %150
  %324 = add i32 %323, %151
  %325 = add i32 %324, %153
  %326 = add i32 %325, %164
  %327 = add i32 %326, %69
  %328 = add i32 %327, %12
  %329 = sub i32 %328, %175
  %330 = add i32 %329, %177
  %331 = add i32 %330, %180
  %332 = add i32 %331, %99
  %333 = sub i32 %332, %39
  %334 = add i32 %333, %192
  %335 = sub i32 %334, %211
  %336 = add i32 %335, %224
  %337 = sub i32 %336, %225
  %338 = add i32 %337, %9
  %339 = add i32 %338, %230
  %340 = add i32 %339, %234
  %341 = add i32 %340, %240
  %342 = sub i32 %341, %244
  %343 = add i32 %342, %245
  %344 = sub i32 %343, %252
  %345 = sub i32 %344, %258
  %346 = add i32 %345, %4
  %347 = add i32 %346, %35
  %348 = sub i32 %347, %38
  %349 = add i32 %348, %43
  %350 = sub i32 %349, %47
  %351 = add i32 %350, %49
  %352 = sub i32 %351, %53
  %353 = add i32 %352, %54
  %354 = add i32 %353, %61
  %355 = add i32 %354, %62
  %356 = add i32 %355, %64
  %357 = add i32 %356, %70
  %358 = sub i32 %357, %71
  %359 = sub i32 %358, %78
  %360 = sub i32 %359, %86
  %361 = add i32 %360, %87
  %362 = sub i32 %361, %94
  %363 = sub i32 %362, %108
  %364 = add i32 %363, %109
  %365 = add i32 %364, %111
  %366 = sub i32 %365, %112
  %367 = sub i32 %366, %113
  %368 = sub i32 %367, %114
  %369 = add i32 %368, %117
  %370 = sub i32 %369, %120
  %371 = sub i32 %370, %123
  %372 = add i32 %371, %125
  %373 = add i32 %372, %126
  %374 = sub i32 %373, %140
  %375 = sub i32 %374, %141
  %376 = sub i32 %375, %142
  %377 = sub i32 %376, %143
  %378 = add i32 %377, %144
  %379 = sub i32 %378, %145
  %380 = sub i32 %379, %72
  %381 = sub i32 %380, %146
  %382 = sub i32 %381, %147
  %383 = add i32 %382, %148
  %384 = sub i32 %383, %154
  %385 = add i32 %384, %155
  %386 = add i32 %385, %156
  %387 = sub i32 %386, %157
  %388 = sub i32 %387, %158
  %389 = sub i32 %388, %159
  %390 = add i32 %389, %161
  %391 = sub i32 %390, %163
  %392 = sub i32 %391, %169
  %393 = sub i32 %392, %172
  %394 = sub i32 %393, %174
  %395 = add i32 %394, %176
  %396 = add i32 %395, %178
  %397 = add i32 %396, %179
  %398 = sub i32 %397, %184
  %399 = sub i32 %398, %185
  %400 = sub i32 %399, %186
  %401 = add i32 %400, %187
  %402 = sub i32 %401, %190
  %403 = add i32 %402, %191
  %404 = sub i32 %403, %193
  %405 = add i32 %404, %199
  %406 = sub i32 %405, %200
  %407 = add i32 %406, %201
  %408 = add i32 %407, %202
  %409 = sub i32 %408, %203
  %410 = add i32 %409, %170
  %411 = add i32 %410, %205
  %412 = add i32 %411, %57
  %413 = add i32 %412, %210
  %414 = sub i32 %413, %212
  %415 = add i32 %414, %214
  %416 = sub i32 %415, %217
  %417 = add i32 %416, %218
  %418 = sub i32 %417, %221
  %419 = sub i32 %418, %222
  %420 = sub i32 %419, %223
  %421 = add i32 %420, %228
  %422 = sub i32 %421, %229
  %423 = add i32 %422, %231
  %424 = add i32 %423, %66
  %425 = add i32 %424, %241
  %426 = sub i32 %425, %246
  %427 = sub i32 %426, %247
  %428 = sub i32 %427, %248
  %429 = sub i32 %428, %249
  %430 = add i32 %429, %253
  %431 = add i32 %430, %254
  %432 = add i32 %431, %255
  %433 = add i32 %432, %256
  %434 = sub i32 %433, %259
  %435 = sub i32 %434, %260
  %436 = add i32 %435, %24
  %437 = sub i32 %436, %59
  %438 = sub i32 %437, %73
  %439 = add i32 %438, %77
  %440 = add i32 %439, %83
  %441 = sub i32 %440, %89
  %442 = add i32 %441, %97
  %443 = sub i32 %442, %101
  %444 = sub i32 %443, %116
  %445 = sub i32 %444, %122
  %446 = sub i32 %445, %124
  %447 = sub i32 %446, %129
  %448 = sub i32 %447, %131
  %449 = add i32 %448, %134
  %450 = sub i32 %449, %137
  %451 = sub i32 %450, %139
  %452 = sub i32 %451, %168
  %453 = add i32 %452, %171
  %454 = sub i32 %453, %182
  %455 = sub i32 %454, %189
  %456 = sub i32 %455, %194
  %457 = sub i32 %456, %196
  %458 = sub i32 %457, %198
  %459 = sub i32 %458, %215
  %460 = sub i32 %459, %220
  %461 = sub i32 %460, %227
  %462 = sub i32 %461, %233
  %463 = sub i32 %462, %236
  %464 = sub i32 %463, %238
  %465 = sub i32 %464, %262
  %466 = add i32 %465, %265
  %467 = add i32 %466, %267
  %468 = add i32 %467, %268
  %469 = add i32 %468, %270
  %470 = add i32 %469, %271
  %471 = add i32 %470, %292
  %472 = add i32 %471, %20
  %473 = add i32 %472, %22
  %474 = sub i32 %473, %28
  %475 = sub i32 %474, %68
  %476 = sub i32 %475, %243
  %477 = sub i32 %476, %251
  %478 = sub i32 %477, %25
  %479 = add i32 %478, %290
  %480 = add i32 %479, %301
  %481 = add i32 %480, %286
  %482 = icmp eq i32 %17, %481
  %483 = select i1 %482, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %484 = tail call i32 @puts(i8* nonnull dereferenceable(1) %483)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
