digraph "DFG for'crackme' function" {
	Node0x117bbe0[shape=record, label="  %3 = shl i32 %1, 1"];
	Node0x117bc50[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x117bd10[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x117bd80[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x117bdf0[shape=record, label="  %7 = add i32 %6, %3"];
	Node0x117be90[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x117bf00[shape=record, label="  %9 = or i32 %8, %0"];
	Node0x117bf70[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x117bfe0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x117c050[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x117c0c0[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x117c130[shape=record, label="  %14 = or i32 %13, %1"];
	Node0x117c1d0[shape=record, label="  %15 = mul i32 %14, -3"];
	Node0x117c270[shape=record, label="  %16 = shl i32 %9, 3"];
	Node0x117c310[shape=record, label="  %17 = xor i32 %16, -8"];
	Node0x117c380[shape=record, label="  %18 = shl i32 %12, 1"];
	Node0x117c3f0[shape=record, label="  %19 = xor i32 %18, -2"];
	Node0x117c460[shape=record, label="  %20 = add i32 %8, %0"];
	Node0x117c4d0[shape=record, label="  %21 = add i32 %20, %9"];
	Node0x117c540[shape=record, label="  %22 = sub i32 %21, %10"];
	Node0x117c5b0[shape=record, label="  %23 = add i32 %22, %11"];
	Node0x117c620[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x117c690[shape=record, label="  %25 = add i32 %24, %5"];
	Node0x117c700[shape=record, label="  %26 = add i32 %25, %19"];
	Node0x117c770[shape=record, label="  %27 = add i32 %26, %17"];
	Node0x117c7e0[shape=record, label="  %28 = icmp eq i32 %7, %27"];
	Node0x111c268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x117cc80[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x117ccd0[shape=record, label="  ret void"];
	Node0x117bbe0 -> Node0x117bc50;
	Node0x117bc50 -> Node0x117bd10;
	Node0x117bd10 -> Node0x117bd80;
	Node0x117bd80 -> Node0x117bdf0;
	Node0x117bdf0 -> Node0x117be90;
	Node0x117be90 -> Node0x117bf00;
	Node0x117bf00 -> Node0x117bf70;
	Node0x117bf70 -> Node0x117bfe0;
	Node0x117bfe0 -> Node0x117c050;
	Node0x117c050 -> Node0x117c0c0;
	Node0x117c0c0 -> Node0x117c130;
	Node0x117c130 -> Node0x117c1d0;
	Node0x117c1d0 -> Node0x117c270;
	Node0x117c270 -> Node0x117c310;
	Node0x117c310 -> Node0x117c380;
	Node0x117c380 -> Node0x117c3f0;
	Node0x117c3f0 -> Node0x117c460;
	Node0x117c460 -> Node0x117c4d0;
	Node0x117c4d0 -> Node0x117c540;
	Node0x117c540 -> Node0x117c5b0;
	Node0x117c5b0 -> Node0x117c620;
	Node0x117c620 -> Node0x117c690;
	Node0x117c690 -> Node0x117c700;
	Node0x117c700 -> Node0x117c770;
	Node0x117c770 -> Node0x117c7e0;
	Node0x117c7e0 -> Node0x111c268;
	Node0x111c268 -> Node0x117cc80;
	Node0x117cc80 -> Node0x117ccd0;
edge [color=red]
	Node0x117bc50 -> Node0x117bd10;
	Node0x117bd10 -> Node0x117bd80;
	Node0x117bd80 -> Node0x117bdf0;
	Node0x117bbe0 -> Node0x117bdf0;
	Node0x117be90 -> Node0x117bf00;
	Node0x117bf70 -> Node0x117bfe0;
	Node0x117c0c0 -> Node0x117c130;
	Node0x117c130 -> Node0x117c1d0;
	Node0x117bf00 -> Node0x117c270;
	Node0x117c270 -> Node0x117c310;
	Node0x117c050 -> Node0x117c380;
	Node0x117c380 -> Node0x117c3f0;
	Node0x117be90 -> Node0x117c460;
	Node0x117c460 -> Node0x117c4d0;
	Node0x117bf00 -> Node0x117c4d0;
	Node0x117c4d0 -> Node0x117c540;
	Node0x117bf70 -> Node0x117c540;
	Node0x117c540 -> Node0x117c5b0;
	Node0x117bfe0 -> Node0x117c5b0;
	Node0x117c5b0 -> Node0x117c620;
	Node0x117c1d0 -> Node0x117c620;
	Node0x117c620 -> Node0x117c690;
	Node0x117bd10 -> Node0x117c690;
	Node0x117c690 -> Node0x117c700;
	Node0x117c3f0 -> Node0x117c700;
	Node0x117c700 -> Node0x117c770;
	Node0x117c310 -> Node0x117c770;
	Node0x117bdf0 -> Node0x117c7e0;
	Node0x117c770 -> Node0x117c7e0;
	Node0x117c7e0 -> Node0x111c268;
	Node0x111c268 -> Node0x117cc80;
}
