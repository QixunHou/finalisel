; ModuleID = '../.././c_source_file/1611_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1611_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = or i32 %2, %1
  %11 = and i32 %10, %0
  %12 = xor i32 %9, -1
  %13 = xor i32 %11, %12
  %14 = sub i32 %6, %13
  %15 = xor i32 %4, -1
  %16 = add i32 %4, 1
  %17 = or i32 %4, %3
  %18 = or i32 %15, %3
  %19 = shl i32 %6, 1
  %20 = xor i32 %19, -2
  %21 = and i32 %4, %3
  %22 = shl i32 %21, 2
  %23 = xor i32 %22, -4
  %24 = shl i32 %17, 1
  %25 = xor i32 %24, -2
  %26 = xor i32 %18, -1
  %27 = and i32 %15, %3
  %28 = and i32 %1, %0
  %29 = or i32 %2, %0
  %30 = xor i32 %29, %28
  %31 = or i32 %1, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %10, -1
  %34 = or i32 %33, %7
  %35 = xor i32 %2, -1
  %36 = or i32 %35, %1
  %37 = or i32 %36, %7
  %38 = and i32 %35, %1
  %39 = xor i32 %38, -1
  %40 = add i32 %38, 1
  %41 = xor i32 %1, -1
  %42 = and i32 %41, %2
  %43 = and i32 %42, %0
  %44 = or i32 %41, %2
  %45 = and i32 %44, %7
  %46 = or i32 %43, %45
  %47 = and i32 %42, %7
  %48 = xor i32 %2, %1
  %49 = or i32 %48, %7
  %50 = xor i32 %47, %49
  %51 = and i32 %41, %0
  %52 = and i32 %2, %0
  %53 = or i32 %41, %0
  %54 = xor i32 %52, %53
  %55 = xor i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = xor i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = and i32 %58, %56
  %60 = and i32 %31, %35
  %61 = shl i32 %60, 1
  %62 = xor i32 %48, %0
  %63 = xor i32 %62, -1
  %64 = xor i32 %43, %63
  %65 = shl i32 %64, 1
  %66 = xor i32 %52, %31
  %67 = and i32 %53, %2
  %68 = or i32 %51, %35
  %69 = and i32 %35, %0
  %70 = xor i32 %69, %36
  %71 = shl i32 %70, 1
  %72 = xor i32 %53, -1
  %73 = add i32 %53, 1
  %74 = or i32 %36, %0
  %75 = xor i32 %51, -1
  %76 = xor i32 %75, %2
  %77 = xor i32 %36, -1
  %78 = or i32 %77, %0
  %79 = or i32 %58, %56
  %80 = and i32 %8, %0
  %81 = or i32 %80, %63
  %82 = or i32 %57, %1
  %83 = and i32 %48, %7
  %84 = or i32 %80, %83
  %85 = shl i32 %31, 1
  %86 = or i32 %38, %0
  %87 = xor i32 %29, -1
  %88 = or i32 %87, %41
  %89 = xor i32 %31, %2
  %90 = shl i32 %89, 1
  %91 = xor i32 %80, 2147483647
  %92 = xor i32 %91, %83
  %93 = shl i32 %92, 1
  %94 = xor i32 %49, -1
  %95 = or i32 %47, %94
  %96 = or i32 %87, %56
  %97 = or i32 %57, %51
  %98 = and i32 %48, %53
  %99 = or i32 %58, %32
  %100 = shl i32 %99, 1
  %101 = and i32 %48, %31
  %102 = xor i32 %80, %62
  %103 = shl i32 %102, 2
  %104 = and i32 %57, %41
  %105 = and i32 %29, %56
  %106 = or i32 %33, %0
  %107 = and i32 %57, %75
  %108 = or i32 %57, %72
  %109 = xor i32 %28, -1
  %110 = and i32 %109, %2
  %111 = xor i32 %69, -1
  %112 = and i32 %58, %75
  %113 = or i32 %57, %28
  %114 = xor i32 %53, %2
  %115 = or i32 %48, %72
  %116 = add i32 %51, 1
  %117 = xor i32 %52, -1
  %118 = and i32 %55, %117
  %119 = xor i32 %52, %39
  %120 = or i32 %35, %0
  %121 = xor i32 %120, %1
  %122 = and i32 %10, %7
  %123 = or i32 %35, %32
  %124 = and i32 %57, %1
  %125 = and i32 %48, %0
  %126 = or i32 %9, %125
  %127 = or i32 %55, %2
  %128 = and i32 %29, %1
  %129 = or i32 %48, %0
  %130 = xor i32 %43, %129
  %131 = xor i32 %51, %2
  %132 = xor i32 %8, %0
  %133 = and i32 %120, %1
  %134 = xor i32 %87, %1
  %135 = and i32 %48, %75
  %136 = and i32 %55, %2
  %137 = xor i32 %120, -1
  %138 = or i32 %28, %137
  %139 = and i32 %57, %55
  %140 = and i32 %35, %56
  %141 = or i32 %38, %7
  %142 = or i32 %87, %1
  %143 = xor i32 %8, -1
  %144 = add i32 %8, 1
  %145 = xor i32 %44, %0
  %146 = or i32 %43, %145
  %147 = and i32 %29, %41
  %148 = or i32 %52, %55
  %149 = and i32 %53, %35
  %150 = or i32 %55, %137
  %151 = xor i32 %43, -1
  %152 = xor i32 %45, %151
  %153 = or i32 %69, %8
  %154 = and i32 %39, %0
  %155 = shl i32 %154, 1
  %156 = or i32 %57, %32
  %157 = xor i32 %111, %1
  %158 = xor i32 %48, -1
  %159 = and i32 %158, %75
  %160 = or i32 %56, %2
  %161 = shl i32 %160, 2
  %162 = xor i32 %29, %1
  %163 = xor i32 %69, %1
  %164 = and i32 %44, %0
  %165 = xor i32 %164, -1
  %166 = xor i32 %47, %165
  %167 = and i32 %31, %158
  %168 = or i32 %51, %2
  %169 = or i32 %48, %28
  %170 = shl i32 %169, 1
  %171 = and i32 %39, %7
  %172 = and i32 %57, %31
  %173 = or i32 %137, %56
  %174 = or i32 %28, %77
  %175 = or i32 %143, %0
  %176 = xor i32 %52, %1
  %177 = or i32 %52, %32
  %178 = or i32 %10, %7
  %179 = shl i32 %178, 1
  %180 = xor i32 %137, %1
  %181 = and i32 %48, %109
  %182 = shl i32 %181, 1
  %183 = or i32 %158, %0
  %184 = shl i32 %183, 1
  %185 = or i32 %77, %7
  %186 = or i32 %58, %41
  %187 = xor i32 %129, -1
  %188 = or i32 %43, %187
  %189 = or i32 %9, %11
  %190 = or i32 %47, %164
  %191 = and i32 %35, %75
  %192 = or i32 %158, %72
  %193 = xor i32 %28, %2
  %194 = xor i32 %143, %0
  %195 = or i32 %51, %58
  %196 = xor i32 %91, %122
  %197 = shl i32 %196, 1
  %198 = or i32 %55, %58
  %199 = xor i32 %32, %2
  %200 = or i32 %55, %87
  %201 = shl i32 %200, 1
  %202 = and i32 %120, %56
  %203 = or i32 %28, %2
  %204 = or i32 %10, %0
  %205 = xor i32 %39, %0
  %206 = and i32 %53, %58
  %207 = or i32 %28, %33
  %208 = xor i32 %51, %39
  %209 = or i32 %39, %7
  %210 = or i32 %38, %51
  %211 = or i32 %35, %72
  %212 = and i32 %56, %2
  %213 = or i32 %28, %58
  %214 = and i32 %111, %56
  %215 = or i32 %43, %62
  %216 = or i32 %80, %122
  %217 = or i32 %35, %56
  %218 = or i32 %8, %51
  %219 = and i32 %29, %55
  %220 = or i32 %8, %0
  %221 = or i32 %52, %56
  %222 = and i32 %111, %1
  %223 = shl i32 %222, 1
  %224 = xor i32 %36, %0
  %225 = xor i32 %38, %0
  %226 = xor i32 %72, %2
  %227 = or i32 %52, %38
  %228 = and i32 %55, %111
  %229 = or i32 %55, %35
  %230 = and i32 %57, %53
  %231 = or i32 %52, %1
  %232 = and i32 %120, %55
  %233 = or i32 %48, %51
  %234 = shl i32 %233, 1
  %235 = xor i32 %51, %143
  %236 = or i32 %51, %158
  %237 = and i32 %117, %1
  %238 = add i32 %2, 1
  %239 = xor i32 %10, %0
  %240 = xor i32 %239, -1
  %241 = xor i32 %80, %240
  %242 = and i32 %143, %0
  %243 = or i32 %52, %33
  %244 = or i32 %69, %55
  %245 = or i32 %137, %1
  %246 = or i32 %158, %32
  %247 = or i32 %52, %41
  %248 = and i32 %31, %58
  %249 = xor i32 %125, %12
  %250 = and i32 %53, %158
  %251 = add i32 %36, 1
  %252 = or i32 %72, %2
  %253 = shl i32 %252, 2
  %254 = or i32 %39, %0
  %255 = and i32 %75, %2
  %256 = or i32 %57, %55
  %257 = shl i32 %256, 2
  %258 = and i32 %58, %1
  %259 = xor i32 %145, %151
  %260 = or i32 %28, %87
  %261 = xor i32 %10, %28
  %262 = or i32 %57, %41
  %263 = or i32 %58, %1
  %264 = or i32 %28, %35
  %265 = xor i32 %36, %28
  %266 = or i32 %52, %72
  %267 = and i32 %111, %41
  %268 = shl i32 %267, 2
  %269 = and i32 %35, %109
  %270 = and i32 %31, %2
  %271 = or i32 %69, %56
  %272 = and i32 %117, %41
  %273 = and i32 %55, %35
  %274 = and i32 %58, %41
  %275 = or i32 %57, %56
  %276 = shl i32 %275, 1
  %277 = or i32 %69, %41
  %278 = and i32 %57, %109
  %279 = xor i32 %117, %1
  %280 = xor i32 %120, %28
  %281 = and i32 %57, %56
  %282 = and i32 %33, %7
  %283 = mul i32 %282, 12
  %284 = and i32 %38, %7
  %285 = mul i32 %284, 22
  %286 = and i32 %33, %0
  %287 = and i32 %38, %0
  %288 = mul i32 %287, 19
  %289 = and i32 %77, %7
  %290 = mul i32 %289, 23
  %291 = mul i32 %9, 9
  %292 = and i32 %77, %0
  %293 = mul i32 %292, 26
  %294 = mul i32 %80, -6
  %295 = add i32 %48, %58
  %296 = add i32 %295, %199
  %297 = add i32 %296, %140
  %298 = sub i32 %52, %68
  %299 = sub i32 %298, %260
  %300 = add i32 %299, %242
  %301 = sub i32 %300, %157
  %302 = sub i32 %301, %130
  %303 = mul i32 %302, 3
  %304 = add i32 %147, %286
  %305 = add i32 %304, %26
  %306 = sub i32 %305, %21
  %307 = mul i32 %306, 5
  %308 = add i32 %297, %3
  %309 = add i32 %308, %263
  %310 = add i32 %309, %247
  %311 = add i32 %310, %230
  %312 = add i32 %311, %172
  %313 = add i32 %312, %162
  %314 = add i32 %313, %156
  %315 = add i32 %314, %153
  %316 = add i32 %315, %150
  %317 = add i32 %316, %128
  %318 = add i32 %317, %62
  %319 = add i32 %318, %113
  %320 = add i32 %319, %59
  %321 = add i32 %320, %224
  %322 = add i32 %321, %84
  %323 = add i32 %322, %216
  %324 = shl i32 %323, 1
  %325 = add i32 %142, 1073741823
  %326 = add i32 %325, %37
  %327 = add i32 %326, %27
  %328 = shl i32 %327, 2
  %329 = sub i32 %51, %31
  %330 = add i32 %329, %73
  %331 = add i32 %330, %2
  %332 = sub i32 %331, %28
  %333 = add i32 %332, %116
  %334 = add i32 %333, %109
  %335 = sub i32 %334, %55
  %336 = add i32 %335, %238
  %337 = sub i32 %336, %53
  %338 = add i32 %337, %40
  %339 = add i32 %338, %67
  %340 = sub i32 %339, %76
  %341 = sub i32 %340, %85
  %342 = add i32 %341, %57
  %343 = sub i32 %342, %110
  %344 = add i32 %343, %114
  %345 = sub i32 %344, %123
  %346 = sub i32 %345, %127
  %347 = add i32 %346, %131
  %348 = sub i32 %347, %136
  %349 = add i32 %348, %36
  %350 = add i32 %349, %144
  %351 = add i32 %350, %149
  %352 = add i32 %351, %158
  %353 = add i32 %352, %8
  %354 = sub i32 %353, %168
  %355 = sub i32 %354, %191
  %356 = sub i32 %355, %193
  %357 = sub i32 %356, %203
  %358 = sub i32 %357, %211
  %359 = add i32 %358, %212
  %360 = add i32 %359, %33
  %361 = sub i32 %360, %217
  %362 = add i32 %361, %226
  %363 = sub i32 %362, %10
  %364 = add i32 %363, %229
  %365 = add i32 %364, %251
  %366 = sub i32 %365, %255
  %367 = add i32 %366, %264
  %368 = add i32 %367, %269
  %369 = add i32 %368, %270
  %370 = sub i32 %369, %273
  %371 = add i32 %370, %4
  %372 = add i32 %371, %16
  %373 = sub i32 %372, %30
  %374 = add i32 %373, %34
  %375 = sub i32 %374, %54
  %376 = sub i32 %375, %61
  %377 = add i32 %376, %66
  %378 = sub i32 %377, %74
  %379 = sub i32 %378, %78
  %380 = sub i32 %379, %79
  %381 = sub i32 %380, %49
  %382 = add i32 %381, %82
  %383 = add i32 %382, %86
  %384 = sub i32 %383, %88
  %385 = sub i32 %384, %90
  %386 = add i32 %385, %96
  %387 = add i32 %386, %97
  %388 = sub i32 %387, %98
  %389 = sub i32 %388, %101
  %390 = add i32 %389, %104
  %391 = add i32 %390, %105
  %392 = add i32 %391, %106
  %393 = sub i32 %392, %107
  %394 = sub i32 %393, %108
  %395 = add i32 %394, %112
  %396 = sub i32 %395, %115
  %397 = sub i32 %396, %118
  %398 = add i32 %397, %119
  %399 = sub i32 %398, %121
  %400 = add i32 %399, %122
  %401 = add i32 %400, %11
  %402 = sub i32 %401, %124
  %403 = sub i32 %402, %132
  %404 = sub i32 %403, %133
  %405 = add i32 %404, %134
  %406 = add i32 %405, %135
  %407 = add i32 %406, %138
  %408 = sub i32 %407, %139
  %409 = sub i32 %408, %141
  %410 = sub i32 %409, %148
  %411 = add i32 %410, %159
  %412 = sub i32 %411, %161
  %413 = sub i32 %412, %163
  %414 = add i32 %413, %167
  %415 = sub i32 %414, %171
  %416 = sub i32 %415, %173
  %417 = sub i32 %416, %174
  %418 = add i32 %417, %175
  %419 = add i32 %418, %176
  %420 = add i32 %419, %177
  %421 = add i32 %420, %180
  %422 = sub i32 %421, %185
  %423 = add i32 %422, %186
  %424 = add i32 %423, %125
  %425 = sub i32 %424, %192
  %426 = sub i32 %425, %194
  %427 = add i32 %426, %195
  %428 = add i32 %427, %198
  %429 = sub i32 %428, %202
  %430 = sub i32 %429, %204
  %431 = sub i32 %430, %205
  %432 = sub i32 %431, %206
  %433 = sub i32 %432, %207
  %434 = sub i32 %433, %208
  %435 = add i32 %434, %209
  %436 = sub i32 %435, %210
  %437 = add i32 %436, %213
  %438 = sub i32 %437, %214
  %439 = add i32 %438, %218
  %440 = sub i32 %439, %219
  %441 = add i32 %440, %220
  %442 = add i32 %441, %221
  %443 = sub i32 %442, %225
  %444 = add i32 %443, %227
  %445 = sub i32 %444, %228
  %446 = sub i32 %445, %231
  %447 = sub i32 %446, %232
  %448 = sub i32 %447, %235
  %449 = sub i32 %448, %236
  %450 = add i32 %449, %237
  %451 = add i32 %450, %243
  %452 = add i32 %451, %244
  %453 = add i32 %452, %245
  %454 = sub i32 %453, %246
  %455 = sub i32 %454, %83
  %456 = sub i32 %455, %248
  %457 = add i32 %456, %250
  %458 = sub i32 %457, %253
  %459 = add i32 %458, %254
  %460 = add i32 %459, %258
  %461 = add i32 %460, %261
  %462 = add i32 %461, %262
  %463 = add i32 %462, %265
  %464 = sub i32 %463, %266
  %465 = sub i32 %464, %239
  %466 = sub i32 %465, %271
  %467 = sub i32 %466, %272
  %468 = sub i32 %467, %274
  %469 = sub i32 %468, %277
  %470 = sub i32 %469, %278
  %471 = sub i32 %470, %279
  %472 = add i32 %471, %280
  %473 = add i32 %472, %281
  %474 = sub i32 %473, %17
  %475 = add i32 %474, %18
  %476 = sub i32 %475, %46
  %477 = sub i32 %476, %50
  %478 = sub i32 %477, %71
  %479 = add i32 %478, %81
  %480 = sub i32 %479, %95
  %481 = sub i32 %480, %100
  %482 = add i32 %481, %126
  %483 = sub i32 %482, %146
  %484 = sub i32 %483, %152
  %485 = sub i32 %484, %155
  %486 = add i32 %485, %166
  %487 = sub i32 %486, %170
  %488 = sub i32 %487, %179
  %489 = sub i32 %488, %182
  %490 = sub i32 %489, %184
  %491 = add i32 %490, %188
  %492 = sub i32 %491, %189
  %493 = sub i32 %492, %190
  %494 = sub i32 %493, %201
  %495 = add i32 %494, %215
  %496 = sub i32 %495, %223
  %497 = sub i32 %496, %234
  %498 = sub i32 %497, %241
  %499 = add i32 %498, %249
  %500 = sub i32 %499, %257
  %501 = sub i32 %500, %259
  %502 = sub i32 %501, %268
  %503 = sub i32 %502, %276
  %504 = add i32 %503, %283
  %505 = add i32 %504, %285
  %506 = add i32 %505, %288
  %507 = add i32 %506, %290
  %508 = add i32 %507, %291
  %509 = add i32 %508, %293
  %510 = add i32 %509, %294
  %511 = sub i32 %510, %65
  %512 = sub i32 %511, %103
  %513 = add i32 %512, %20
  %514 = sub i32 %513, %23
  %515 = add i32 %514, %25
  %516 = sub i32 %515, %93
  %517 = sub i32 %516, %197
  %518 = add i32 %517, %307
  %519 = add i32 %518, %328
  %520 = add i32 %519, %303
  %521 = add i32 %520, %324
  %522 = icmp eq i32 %14, %521
  %523 = select i1 %522, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %524 = tail call i32 @puts(i8* nonnull dereferenceable(1) %523)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
