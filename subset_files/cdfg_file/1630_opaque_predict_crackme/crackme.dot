digraph "DFG for'crackme' function" {
	Node0x1379af0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1379b60[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1379c20[shape=record, label="  %5 = sub i32 0, %4"];
	Node0x1379c90[shape=record, label="  %6 = and i32 %3, %0"];
	Node0x1379d00[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1379da0[shape=record, label="  %8 = add i32 %1, 1"];
	Node0x1379e10[shape=record, label="  %9 = xor i32 %1, %0"];
	Node0x1379e80[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1379ef0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1379f90[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x137a000[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x137a070[shape=record, label="  %14 = add i32 %6, %8"];
	Node0x137a110[shape=record, label="  %15 = mul i32 %14, 5"];
	Node0x137a180[shape=record, label="  %16 = add i32 %0, %1"];
	Node0x137a1f0[shape=record, label="  %17 = sub i32 %7, %16"];
	Node0x137a260[shape=record, label="  %18 = add i32 %17, %9"];
	Node0x137a2d0[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0x137a340[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x137a3b0[shape=record, label="  %21 = add i32 %20, %12"];
	Node0x137a420[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x137a490[shape=record, label="  %23 = icmp eq i32 %22, %5"];
	Node0x131a268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x137a930[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x137a980[shape=record, label="  ret void"];
	Node0x1379af0 -> Node0x1379b60;
	Node0x1379b60 -> Node0x1379c20;
	Node0x1379c20 -> Node0x1379c90;
	Node0x1379c90 -> Node0x1379d00;
	Node0x1379d00 -> Node0x1379da0;
	Node0x1379da0 -> Node0x1379e10;
	Node0x1379e10 -> Node0x1379e80;
	Node0x1379e80 -> Node0x1379ef0;
	Node0x1379ef0 -> Node0x1379f90;
	Node0x1379f90 -> Node0x137a000;
	Node0x137a000 -> Node0x137a070;
	Node0x137a070 -> Node0x137a110;
	Node0x137a110 -> Node0x137a180;
	Node0x137a180 -> Node0x137a1f0;
	Node0x137a1f0 -> Node0x137a260;
	Node0x137a260 -> Node0x137a2d0;
	Node0x137a2d0 -> Node0x137a340;
	Node0x137a340 -> Node0x137a3b0;
	Node0x137a3b0 -> Node0x137a420;
	Node0x137a420 -> Node0x137a490;
	Node0x137a490 -> Node0x131a268;
	Node0x131a268 -> Node0x137a930;
	Node0x137a930 -> Node0x137a980;
edge [color=red]
	Node0x1379af0 -> Node0x1379b60;
	Node0x1379b60 -> Node0x1379c20;
	Node0x1379af0 -> Node0x1379c90;
	Node0x1379c90 -> Node0x1379d00;
	Node0x1379e80 -> Node0x1379ef0;
	Node0x1379ef0 -> Node0x1379f90;
	Node0x1379c90 -> Node0x137a070;
	Node0x1379da0 -> Node0x137a070;
	Node0x137a070 -> Node0x137a110;
	Node0x1379d00 -> Node0x137a1f0;
	Node0x137a180 -> Node0x137a1f0;
	Node0x137a1f0 -> Node0x137a260;
	Node0x1379e10 -> Node0x137a260;
	Node0x137a260 -> Node0x137a2d0;
	Node0x1379e80 -> Node0x137a2d0;
	Node0x137a2d0 -> Node0x137a340;
	Node0x137a000 -> Node0x137a340;
	Node0x137a340 -> Node0x137a3b0;
	Node0x1379f90 -> Node0x137a3b0;
	Node0x137a3b0 -> Node0x137a420;
	Node0x137a110 -> Node0x137a420;
	Node0x137a420 -> Node0x137a490;
	Node0x1379c20 -> Node0x137a490;
	Node0x137a490 -> Node0x131a268;
	Node0x131a268 -> Node0x137a930;
}
