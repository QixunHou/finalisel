digraph "DFG for'crackme' function" {
	Node0x848b50[shape=record, label="  %3 = add i32 %0, 1"];
	Node0x848bc0[shape=record, label="  %4 = xor i32 %1, %0"];
	Node0x848c80[shape=record, label="  %5 = shl i32 %4, 1"];
	Node0x848cf0[shape=record, label="  %6 = xor i32 %5, -2"];
	Node0x848d90[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x848e00[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x848e70[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x848ee0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x848f50[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x848fc0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x849030[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x8490a0[shape=record, label="  %14 = sub i32 %8, %13"];
	Node0x849140[shape=record, label="  %15 = mul i32 %14, 3"];
	Node0x8491b0[shape=record, label="  %16 = add i32 %0, %1"];
	Node0x849250[shape=record, label="  %17 = add i32 %16, 2"];
	Node0x8492c0[shape=record, label="  %18 = add i32 %17, %1"];
	Node0x849330[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x8493a0[shape=record, label="  %20 = sub i32 %19, %4"];
	Node0x849410[shape=record, label="  %21 = sub i32 %20, %10"];
	Node0x849480[shape=record, label="  %22 = add i32 %21, %6"];
	Node0x8494f0[shape=record, label="  %23 = sub i32 %22, %12"];
	Node0x849560[shape=record, label="  %24 = add i32 %23, %15"];
	Node0x8495d0[shape=record, label="  %25 = icmp eq i32 %3, %24"];
	Node0x7e9268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x849a70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x849ac0[shape=record, label="  ret void"];
	Node0x848b50 -> Node0x848bc0;
	Node0x848bc0 -> Node0x848c80;
	Node0x848c80 -> Node0x848cf0;
	Node0x848cf0 -> Node0x848d90;
	Node0x848d90 -> Node0x848e00;
	Node0x848e00 -> Node0x848e70;
	Node0x848e70 -> Node0x848ee0;
	Node0x848ee0 -> Node0x848f50;
	Node0x848f50 -> Node0x848fc0;
	Node0x848fc0 -> Node0x849030;
	Node0x849030 -> Node0x8490a0;
	Node0x8490a0 -> Node0x849140;
	Node0x849140 -> Node0x8491b0;
	Node0x8491b0 -> Node0x849250;
	Node0x849250 -> Node0x8492c0;
	Node0x8492c0 -> Node0x849330;
	Node0x849330 -> Node0x8493a0;
	Node0x8493a0 -> Node0x849410;
	Node0x849410 -> Node0x849480;
	Node0x849480 -> Node0x8494f0;
	Node0x8494f0 -> Node0x849560;
	Node0x849560 -> Node0x8495d0;
	Node0x8495d0 -> Node0x7e9268;
	Node0x7e9268 -> Node0x849a70;
	Node0x849a70 -> Node0x849ac0;
edge [color=red]
	Node0x848bc0 -> Node0x848c80;
	Node0x848c80 -> Node0x848cf0;
	Node0x848d90 -> Node0x848e00;
	Node0x848e00 -> Node0x848e70;
	Node0x848ee0 -> Node0x848f50;
	Node0x848f50 -> Node0x848fc0;
	Node0x848e00 -> Node0x8490a0;
	Node0x849030 -> Node0x8490a0;
	Node0x8490a0 -> Node0x849140;
	Node0x8491b0 -> Node0x849250;
	Node0x849250 -> Node0x8492c0;
	Node0x8492c0 -> Node0x849330;
	Node0x848e70 -> Node0x849330;
	Node0x849330 -> Node0x8493a0;
	Node0x848bc0 -> Node0x8493a0;
	Node0x8493a0 -> Node0x849410;
	Node0x848ee0 -> Node0x849410;
	Node0x849410 -> Node0x849480;
	Node0x848cf0 -> Node0x849480;
	Node0x849480 -> Node0x8494f0;
	Node0x848fc0 -> Node0x8494f0;
	Node0x8494f0 -> Node0x849560;
	Node0x849140 -> Node0x849560;
	Node0x848b50 -> Node0x8495d0;
	Node0x849560 -> Node0x8495d0;
	Node0x8495d0 -> Node0x7e9268;
	Node0x7e9268 -> Node0x849a70;
}
