digraph "DFG for'crackme' function" {
	Node0xaa0570[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xaa0c20[shape=record, label="  %4 = sub i32 0, %3"];
	Node0xaa0ce0[shape=record, label="  %5 = and i32 %1, %0"];
	Node0xaa0d50[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0xaa0df0[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0xaa0e90[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0xaa0f00[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0xaa0f70[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0xaa0fe0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0xaa1050[shape=record, label="  %12 = xor i32 %3, -1"];
	Node0xaa10c0[shape=record, label="  %13 = or i32 %8, %0"];
	Node0xaa1130[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0xaa11a0[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xaa1210[shape=record, label="  %16 = and i32 %8, %0"];
	Node0xaa12b0[shape=record, label="  %17 = mul i32 %5, 3"];
	Node0xaa1320[shape=record, label="  %18 = shl i32 %1, 1"];
	Node0xaa1390[shape=record, label="  %19 = add i32 %18, %10"];
	Node0xaa1400[shape=record, label="  %20 = add i32 %19, %11"];
	Node0xaa1470[shape=record, label="  %21 = sub i32 %12, %20"];
	Node0xaa14e0[shape=record, label="  %22 = sub i32 %21, %13"];
	Node0xaa1550[shape=record, label="  %23 = sub i32 %22, %16"];
	Node0xaa15c0[shape=record, label="  %24 = add i32 %23, %17"];
	Node0xaa1630[shape=record, label="  %25 = add i32 %24, %7"];
	Node0xaa16a0[shape=record, label="  %26 = add i32 %25, %15"];
	Node0xaa1710[shape=record, label="  %27 = icmp eq i32 %26, %4"];
	Node0xa41268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xaa1bb0[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0xaa1c00[shape=record, label="  ret void"];
	Node0xaa0570 -> Node0xaa0c20;
	Node0xaa0c20 -> Node0xaa0ce0;
	Node0xaa0ce0 -> Node0xaa0d50;
	Node0xaa0d50 -> Node0xaa0df0;
	Node0xaa0df0 -> Node0xaa0e90;
	Node0xaa0e90 -> Node0xaa0f00;
	Node0xaa0f00 -> Node0xaa0f70;
	Node0xaa0f70 -> Node0xaa0fe0;
	Node0xaa0fe0 -> Node0xaa1050;
	Node0xaa1050 -> Node0xaa10c0;
	Node0xaa10c0 -> Node0xaa1130;
	Node0xaa1130 -> Node0xaa11a0;
	Node0xaa11a0 -> Node0xaa1210;
	Node0xaa1210 -> Node0xaa12b0;
	Node0xaa12b0 -> Node0xaa1320;
	Node0xaa1320 -> Node0xaa1390;
	Node0xaa1390 -> Node0xaa1400;
	Node0xaa1400 -> Node0xaa1470;
	Node0xaa1470 -> Node0xaa14e0;
	Node0xaa14e0 -> Node0xaa1550;
	Node0xaa1550 -> Node0xaa15c0;
	Node0xaa15c0 -> Node0xaa1630;
	Node0xaa1630 -> Node0xaa16a0;
	Node0xaa16a0 -> Node0xaa1710;
	Node0xaa1710 -> Node0xa41268;
	Node0xa41268 -> Node0xaa1bb0;
	Node0xaa1bb0 -> Node0xaa1c00;
edge [color=red]
	Node0xaa0570 -> Node0xaa0c20;
	Node0xaa0ce0 -> Node0xaa0d50;
	Node0xaa0d50 -> Node0xaa0df0;
	Node0xaa0f00 -> Node0xaa0f70;
	Node0xaa0570 -> Node0xaa1050;
	Node0xaa0e90 -> Node0xaa10c0;
	Node0xaa10c0 -> Node0xaa1130;
	Node0xaa1130 -> Node0xaa11a0;
	Node0xaa0e90 -> Node0xaa1210;
	Node0xaa0ce0 -> Node0xaa12b0;
	Node0xaa1320 -> Node0xaa1390;
	Node0xaa0f70 -> Node0xaa1390;
	Node0xaa1390 -> Node0xaa1400;
	Node0xaa0fe0 -> Node0xaa1400;
	Node0xaa1050 -> Node0xaa1470;
	Node0xaa1400 -> Node0xaa1470;
	Node0xaa1470 -> Node0xaa14e0;
	Node0xaa10c0 -> Node0xaa14e0;
	Node0xaa14e0 -> Node0xaa1550;
	Node0xaa1210 -> Node0xaa1550;
	Node0xaa1550 -> Node0xaa15c0;
	Node0xaa12b0 -> Node0xaa15c0;
	Node0xaa15c0 -> Node0xaa1630;
	Node0xaa0df0 -> Node0xaa1630;
	Node0xaa1630 -> Node0xaa16a0;
	Node0xaa11a0 -> Node0xaa16a0;
	Node0xaa16a0 -> Node0xaa1710;
	Node0xaa0c20 -> Node0xaa1710;
	Node0xaa1710 -> Node0xa41268;
	Node0xa41268 -> Node0xaa1bb0;
}
