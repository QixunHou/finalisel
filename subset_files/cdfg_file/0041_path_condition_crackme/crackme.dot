digraph "DFG for'crackme' function" {
	Node0xace1b0[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xace220[shape=record, label="  %6 = and i32 %3, %0"];
	Node0xace290[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xace300[shape=record, label="  %8 = add i32 %7, %5"];
	Node0xace370[shape=record, label="  %9 = xor i32 %2, %1"];
	Node0xace3e0[shape=record, label="  %10 = or i32 %2, %1"];
	Node0xace450[shape=record, label="  %11 = and i32 %2, %1"];
	Node0xace4c0[shape=record, label="  %12 = xor i32 %2, -1"];
	Node0xace530[shape=record, label="  %13 = or i32 %12, %1"];
	Node0xace5d0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0xace670[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xace6e0[shape=record, label="  %16 = and i32 %12, %1"];
	Node0xace750[shape=record, label="  %17 = shl i32 %11, 1"];
	Node0xace7c0[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0xace830[shape=record, label="  %19 = and i32 %18, %3"];
	Node0xace8a0[shape=record, label="  %20 = or i32 %3, %0"];
	Node0xace910[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0xace980[shape=record, label="  %22 = shl i32 %3, 1"];
	Node0xace9f0[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0xacea90[shape=record, label="  %24 = mul i32 %0, 3"];
	Node0xaceb00[shape=record, label="  %25 = xor i32 %20, -1"];
	Node0xaceba0[shape=record, label="  %26 = mul i32 %25, 7"];
	Node0xacec10[shape=record, label="  %27 = xor i32 %3, -1"];
	Node0xacec80[shape=record, label="  %28 = and i32 %27, %0"];
	Node0xaced20[shape=record, label="  %29 = shl i32 %19, 2"];
	Node0xacedc0[shape=record, label="  %30 = add i32 %0, 4"];
	Node0xacee30[shape=record, label="  %31 = add i32 %30, %24"];
	Node0xaceea0[shape=record, label="  %32 = sub i32 %31, %2"];
	Node0xacf120[shape=record, label="  %33 = add i32 %32, %11"];
	Node0xacf190[shape=record, label="  %34 = add i32 %33, %13"];
	Node0xacf200[shape=record, label="  %35 = sub i32 %34, %9"];
	Node0xacf270[shape=record, label="  %36 = add i32 %35, %10"];
	Node0xacf2e0[shape=record, label="  %37 = sub i32 %36, %16"];
	Node0xacf350[shape=record, label="  %38 = sub i32 %37, %17"];
	Node0xacf3c0[shape=record, label="  %39 = add i32 %38, %19"];
	Node0xacf430[shape=record, label="  %40 = sub i32 %39, %22"];
	Node0xacf4a0[shape=record, label="  %41 = add i32 %40, %28"];
	Node0xacf510[shape=record, label="  %42 = add i32 %41, %15"];
	Node0xacf580[shape=record, label="  %43 = add i32 %42, %21"];
	Node0xacf5f0[shape=record, label="  %44 = sub i32 %43, %23"];
	Node0xacf660[shape=record, label="  %45 = add i32 %44, %26"];
	Node0xacf6d0[shape=record, label="  %46 = add i32 %45, %29"];
	Node0xacf740[shape=record, label="  %47 = icmp eq i32 %8, %46"];
	Node0xa6e268[shape=record, label="  %48 = select i1 %47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xacfbe0[shape=record, label="  %49 = tail call i32 @puts(i8* nonnull dereferenceable(1) %48)"];
	Node0xacfc30[shape=record, label="  ret void"];
	Node0xace1b0 -> Node0xace220;
	Node0xace220 -> Node0xace290;
	Node0xace290 -> Node0xace300;
	Node0xace300 -> Node0xace370;
	Node0xace370 -> Node0xace3e0;
	Node0xace3e0 -> Node0xace450;
	Node0xace450 -> Node0xace4c0;
	Node0xace4c0 -> Node0xace530;
	Node0xace530 -> Node0xace5d0;
	Node0xace5d0 -> Node0xace670;
	Node0xace670 -> Node0xace6e0;
	Node0xace6e0 -> Node0xace750;
	Node0xace750 -> Node0xace7c0;
	Node0xace7c0 -> Node0xace830;
	Node0xace830 -> Node0xace8a0;
	Node0xace8a0 -> Node0xace910;
	Node0xace910 -> Node0xace980;
	Node0xace980 -> Node0xace9f0;
	Node0xace9f0 -> Node0xacea90;
	Node0xacea90 -> Node0xaceb00;
	Node0xaceb00 -> Node0xaceba0;
	Node0xaceba0 -> Node0xacec10;
	Node0xacec10 -> Node0xacec80;
	Node0xacec80 -> Node0xaced20;
	Node0xaced20 -> Node0xacedc0;
	Node0xacedc0 -> Node0xacee30;
	Node0xacee30 -> Node0xaceea0;
	Node0xaceea0 -> Node0xacf120;
	Node0xacf120 -> Node0xacf190;
	Node0xacf190 -> Node0xacf200;
	Node0xacf200 -> Node0xacf270;
	Node0xacf270 -> Node0xacf2e0;
	Node0xacf2e0 -> Node0xacf350;
	Node0xacf350 -> Node0xacf3c0;
	Node0xacf3c0 -> Node0xacf430;
	Node0xacf430 -> Node0xacf4a0;
	Node0xacf4a0 -> Node0xacf510;
	Node0xacf510 -> Node0xacf580;
	Node0xacf580 -> Node0xacf5f0;
	Node0xacf5f0 -> Node0xacf660;
	Node0xacf660 -> Node0xacf6d0;
	Node0xacf6d0 -> Node0xacf740;
	Node0xacf740 -> Node0xa6e268;
	Node0xa6e268 -> Node0xacfbe0;
	Node0xacfbe0 -> Node0xacfc30;
edge [color=red]
	Node0xace220 -> Node0xace290;
	Node0xace290 -> Node0xace300;
	Node0xace1b0 -> Node0xace300;
	Node0xace4c0 -> Node0xace530;
	Node0xace530 -> Node0xace5d0;
	Node0xace5d0 -> Node0xace670;
	Node0xace4c0 -> Node0xace6e0;
	Node0xace450 -> Node0xace750;
	Node0xace7c0 -> Node0xace830;
	Node0xace8a0 -> Node0xace910;
	Node0xace980 -> Node0xace9f0;
	Node0xace8a0 -> Node0xaceb00;
	Node0xaceb00 -> Node0xaceba0;
	Node0xacec10 -> Node0xacec80;
	Node0xace830 -> Node0xaced20;
	Node0xacedc0 -> Node0xacee30;
	Node0xacea90 -> Node0xacee30;
	Node0xacee30 -> Node0xaceea0;
	Node0xaceea0 -> Node0xacf120;
	Node0xace450 -> Node0xacf120;
	Node0xacf120 -> Node0xacf190;
	Node0xace530 -> Node0xacf190;
	Node0xacf190 -> Node0xacf200;
	Node0xace370 -> Node0xacf200;
	Node0xacf200 -> Node0xacf270;
	Node0xace3e0 -> Node0xacf270;
	Node0xacf270 -> Node0xacf2e0;
	Node0xace6e0 -> Node0xacf2e0;
	Node0xacf2e0 -> Node0xacf350;
	Node0xace750 -> Node0xacf350;
	Node0xacf350 -> Node0xacf3c0;
	Node0xace830 -> Node0xacf3c0;
	Node0xacf3c0 -> Node0xacf430;
	Node0xace980 -> Node0xacf430;
	Node0xacf430 -> Node0xacf4a0;
	Node0xacec80 -> Node0xacf4a0;
	Node0xacf4a0 -> Node0xacf510;
	Node0xace670 -> Node0xacf510;
	Node0xacf510 -> Node0xacf580;
	Node0xace910 -> Node0xacf580;
	Node0xacf580 -> Node0xacf5f0;
	Node0xace9f0 -> Node0xacf5f0;
	Node0xacf5f0 -> Node0xacf660;
	Node0xaceba0 -> Node0xacf660;
	Node0xacf660 -> Node0xacf6d0;
	Node0xaced20 -> Node0xacf6d0;
	Node0xace300 -> Node0xacf740;
	Node0xacf6d0 -> Node0xacf740;
	Node0xacf740 -> Node0xa6e268;
	Node0xa6e268 -> Node0xacfbe0;
}
