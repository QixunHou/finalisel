; ModuleID = '../.././c_source_file/1337_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1337_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = and i32 %4, %0
  %6 = xor i32 %2, %0
  %7 = or i32 %6, %5
  %8 = shl i32 %7, 1
  %9 = and i32 %2, %1
  %10 = and i32 %9, %0
  %11 = xor i32 %2, %1
  %12 = xor i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %10, %13
  %15 = shl i32 %14, 2
  %16 = add i32 %15, %8
  %17 = or i32 %4, %0
  %18 = xor i32 %17, %2
  %19 = or i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %1, %0
  %22 = xor i32 %21, -1
  %23 = or i32 %22, %2
  %24 = xor i32 %2, -1
  %25 = and i32 %24, %1
  %26 = xor i32 %25, -1
  %27 = or i32 %26, %0
  %28 = xor i32 %0, -1
  %29 = and i32 %4, %2
  %30 = and i32 %29, %28
  %31 = or i32 %4, %2
  %32 = and i32 %31, %0
  %33 = xor i32 %32, -1
  %34 = xor i32 %30, %33
  %35 = xor i32 %6, -1
  %36 = or i32 %35, %22
  %37 = and i32 %35, %4
  %38 = and i32 %2, %0
  %39 = or i32 %38, %21
  %40 = or i32 %24, %1
  %41 = and i32 %40, %28
  %42 = xor i32 %38, -1
  %43 = and i32 %42, %1
  %44 = or i32 %2, %1
  %45 = xor i32 %44, %0
  %46 = or i32 %10, %45
  %47 = and i32 %24, %0
  %48 = xor i32 %40, -1
  %49 = or i32 %47, %48
  %50 = and i32 %17, %24
  %51 = or i32 %9, %28
  %52 = shl i32 %51, 1
  %53 = and i32 %26, %28
  %54 = xor i32 %26, %0
  %55 = xor i32 %47, -1
  %56 = and i32 %55, %4
  %57 = or i32 %24, %0
  %58 = and i32 %57, %4
  %59 = shl i32 %58, 1
  %60 = and i32 %40, %0
  %61 = or i32 %40, %28
  %62 = xor i32 %57, -1
  %63 = or i32 %21, %62
  %64 = xor i32 %9, -1
  %65 = or i32 %64, %28
  %66 = xor i32 %11, -1
  %67 = xor i32 %66, %0
  %68 = add i32 %11, 1
  %69 = or i32 %1, %0
  %70 = xor i32 %69, -1
  %71 = or i32 %35, %70
  %72 = and i32 %17, %35
  %73 = xor i32 %5, -1
  %74 = and i32 %11, %73
  %75 = and i32 %6, %73
  %76 = or i32 %30, %32
  %77 = and i32 %66, %28
  %78 = or i32 %11, %28
  %79 = and i32 %35, %1
  %80 = xor i32 %44, -1
  %81 = or i32 %38, %80
  %82 = xor i32 %17, -1
  %83 = or i32 %6, %82
  %84 = or i32 %35, %1
  %85 = or i32 %38, %1
  %86 = and i32 %6, %21
  %87 = and i32 %44, %28
  %88 = xor i32 %10, -1
  %89 = xor i32 %87, %88
  %90 = and i32 %17, %66
  %91 = xor i32 %47, %64
  %92 = or i32 %62, %1
  %93 = xor i32 %20, %1
  %94 = and i32 %1, %0
  %95 = xor i32 %40, %94
  %96 = or i32 %94, %66
  %97 = shl i32 %96, 1
  %98 = shl i32 %35, 1
  %99 = or i32 %35, %4
  %100 = and i32 %21, %35
  %101 = shl i32 %100, 1
  %102 = xor i32 %57, %1
  %103 = xor i32 %25, %0
  %104 = xor i32 %5, %26
  %105 = xor i32 %10, %12
  %106 = xor i32 %48, %0
  %107 = xor i32 %78, -1
  %108 = or i32 %30, %107
  %109 = or i32 %66, %82
  %110 = or i32 %94, %2
  %111 = shl i32 %110, 1
  %112 = xor i32 %45, %88
  %113 = and i32 %11, %0
  %114 = xor i32 %9, %0
  %115 = and i32 %11, %28
  %116 = or i32 %10, %115
  %117 = shl i32 %116, 1
  %118 = xor i32 %38, %1
  %119 = shl i32 %118, 1
  %120 = and i32 %29, %0
  %121 = xor i32 %31, %0
  %122 = or i32 %120, %121
  %123 = or i32 %25, %0
  %124 = or i32 %38, %4
  %125 = or i32 %11, %82
  %126 = and i32 %69, %2
  %127 = or i32 %47, %4
  %128 = xor i32 %121, -1
  %129 = xor i32 %120, %128
  %130 = or i32 %62, %4
  %131 = xor i32 %55, %1
  %132 = and i32 %19, %22
  %133 = or i32 %11, %5
  %134 = xor i32 %94, -1
  %135 = and i32 %134, %2
  %136 = or i32 %5, %66
  %137 = or i32 %44, %0
  %138 = or i32 %66, %28
  %139 = and i32 %6, %1
  %140 = or i32 %11, %70
  %141 = or i32 %24, %22
  %142 = shl i32 %141, 1
  %143 = xor i32 %73, %2
  %144 = or i32 %70, %2
  %145 = and i32 %35, %22
  %146 = or i32 %11, %0
  %147 = xor i32 %146, -1
  %148 = or i32 %120, %147
  %149 = and i32 %31, %28
  %150 = or i32 %120, %149
  %151 = add i32 %21, 1
  %152 = or i32 %21, %35
  %153 = or i32 %20, %22
  %154 = shl i32 %153, 2
  %155 = xor i32 %5, %64
  %156 = or i32 %47, %22
  %157 = and i32 %24, %73
  %158 = shl i32 %157, 1
  %159 = and i32 %9, %28
  %160 = and i32 %44, %0
  %161 = or i32 %159, %160
  %162 = add i32 %47, 1
  %163 = xor i32 %57, %94
  %164 = xor i32 %40, %0
  %165 = or i32 %47, %1
  %166 = xor i32 %30, %78
  %167 = shl i32 %57, 2
  %168 = and i32 %57, %1
  %169 = xor i32 %38, %44
  %170 = or i32 %24, %82
  %171 = shl i32 %17, 1
  %172 = and i32 %73, %2
  %173 = xor i32 %42, %1
  %174 = or i32 %25, %28
  %175 = and i32 %26, %0
  %176 = and i32 %55, %22
  %177 = or i32 %48, %28
  %178 = and i32 %6, %22
  %179 = shl i32 %178, 1
  %180 = and i32 %57, %21
  %181 = or i32 %159, %113
  %182 = or i32 %80, %0
  %183 = shl i32 %182, 2
  %184 = xor i32 %160, -1
  %185 = xor i32 %159, %184
  %186 = or i32 %48, %0
  %187 = xor i32 %149, 1073741823
  %188 = xor i32 %187, %120
  %189 = shl i32 %188, 2
  %190 = and i32 %69, %66
  %191 = or i32 %21, %24
  %192 = or i32 %10, %87
  %193 = or i32 %5, %35
  %194 = and i32 %64, %0
  %195 = xor i32 %5, %2
  %196 = and i32 %55, %1
  %197 = or i32 %6, %4
  %198 = xor i32 %94, %2
  %199 = xor i32 %38, %26
  %200 = or i32 %11, %94
  %201 = or i32 %6, %1
  %202 = xor i32 %120, %13
  %203 = add i32 %25, 1
  %204 = and i32 %57, %22
  %205 = xor i32 %62, %1
  %206 = and i32 %11, %134
  %207 = and i32 %6, %17
  %208 = xor i32 %19, %94
  %209 = and i32 %21, %24
  %210 = or i32 %66, %70
  %211 = or i32 %44, %28
  %212 = or i32 %6, %22
  %213 = and i32 %19, %4
  %214 = shl i32 %213, 2
  %215 = xor i32 %38, %69
  %216 = xor i32 %38, %17
  %217 = and i32 %19, %1
  %218 = and i32 %19, %21
  %219 = and i32 %64, %28
  %220 = or i32 %40, %0
  %221 = xor i32 %134, %2
  %222 = or i32 %94, %20
  %223 = and i32 %35, %73
  %224 = or i32 %9, %0
  %225 = or i32 %64, %0
  %226 = and i32 %24, %22
  %227 = shl i32 %226, 1
  %228 = and i32 %21, %2
  %229 = xor i32 %82, %2
  %230 = and i32 %6, %134
  %231 = or i32 %35, %82
  %232 = or i32 %6, %70
  %233 = xor i32 %80, %0
  %234 = and i32 %80, %28
  %235 = mul i32 %234, 26
  %236 = and i32 %25, %28
  %237 = and i32 %80, %0
  %238 = mul i32 %237, 11
  %239 = and i32 %25, %0
  %240 = mul i32 %239, 42
  %241 = and i32 %48, %28
  %242 = shl i32 %241, 4
  %243 = and i32 %48, %0
  %244 = mul i32 %243, 10
  %245 = mul i32 %10, 43
  %246 = sub i32 %162, %160
  %247 = add i32 %246, %102
  %248 = add i32 %247, %91
  %249 = add i32 %248, %37
  %250 = sub i32 %249, %148
  %251 = mul i32 %250, 5
  %252 = sub i32 %217, %201
  %253 = add i32 %252, %181
  %254 = mul i32 %253, 3
  %255 = add i32 %159, %236
  %256 = mul i32 %255, 17
  %257 = sub i32 -2, %2
  %258 = add i32 %257, %23
  %259 = sub i32 %258, %18
  %260 = add i32 %259, %20
  %261 = add i32 %260, %197
  %262 = add i32 %261, %231
  %263 = add i32 %262, %103
  %264 = add i32 %263, %90
  %265 = add i32 %264, %75
  %266 = add i32 %265, %65
  %267 = add i32 %266, %56
  %268 = add i32 %267, %36
  %269 = shl i32 %268, 1
  %270 = shl i32 %0, 1
  %271 = add i32 %270, %1
  %272 = sub i32 %4, %271
  %273 = add i32 %272, %82
  %274 = add i32 %273, %151
  %275 = add i32 %274, %21
  %276 = sub i32 %275, %50
  %277 = add i32 %276, %68
  %278 = add i32 %277, %25
  %279 = sub i32 %278, %11
  %280 = sub i32 %279, %40
  %281 = add i32 %280, %9
  %282 = add i32 %281, %126
  %283 = sub i32 %282, %135
  %284 = add i32 %283, %143
  %285 = add i32 %284, %144
  %286 = sub i32 %285, %170
  %287 = sub i32 %286, %171
  %288 = add i32 %287, %172
  %289 = add i32 %288, %47
  %290 = add i32 %289, %191
  %291 = sub i32 %290, %195
  %292 = add i32 %291, %198
  %293 = add i32 %292, %203
  %294 = add i32 %293, %209
  %295 = add i32 %294, %221
  %296 = sub i32 %295, %228
  %297 = sub i32 %296, %229
  %298 = sub i32 %297, %27
  %299 = add i32 %298, %39
  %300 = sub i32 %299, %41
  %301 = add i32 %300, %43
  %302 = sub i32 %301, %49
  %303 = sub i32 %302, %53
  %304 = sub i32 %303, %54
  %305 = add i32 %304, %60
  %306 = sub i32 %305, %61
  %307 = sub i32 %306, %63
  %308 = sub i32 %307, %67
  %309 = sub i32 %308, %71
  %310 = add i32 %309, %72
  %311 = add i32 %310, %74
  %312 = add i32 %311, %77
  %313 = sub i32 %312, %78
  %314 = add i32 %313, %79
  %315 = sub i32 %314, %81
  %316 = sub i32 %315, %83
  %317 = add i32 %316, %84
  %318 = sub i32 %317, %85
  %319 = sub i32 %318, %86
  %320 = sub i32 %319, %92
  %321 = add i32 %320, %45
  %322 = sub i32 %321, %93
  %323 = sub i32 %322, %95
  %324 = sub i32 %323, %98
  %325 = sub i32 %324, %99
  %326 = sub i32 %325, %104
  %327 = add i32 %326, %106
  %328 = add i32 %327, %109
  %329 = sub i32 %328, %111
  %330 = add i32 %329, %113
  %331 = sub i32 %330, %114
  %332 = sub i32 %331, %123
  %333 = sub i32 %332, %124
  %334 = sub i32 %333, %125
  %335 = sub i32 %334, %127
  %336 = add i32 %335, %130
  %337 = sub i32 %336, %131
  %338 = sub i32 %337, %132
  %339 = add i32 %338, %133
  %340 = sub i32 %339, %136
  %341 = add i32 %340, %137
  %342 = sub i32 %341, %138
  %343 = sub i32 %342, %139
  %344 = sub i32 %343, %140
  %345 = sub i32 %344, %142
  %346 = sub i32 %345, %145
  %347 = sub i32 %346, %152
  %348 = sub i32 %347, %155
  %349 = sub i32 %348, %156
  %350 = sub i32 %349, %158
  %351 = add i32 %350, %163
  %352 = add i32 %351, %164
  %353 = add i32 %352, %165
  %354 = sub i32 %353, %167
  %355 = add i32 %354, %168
  %356 = add i32 %355, %169
  %357 = add i32 %356, %173
  %358 = add i32 %357, %174
  %359 = add i32 %358, %175
  %360 = sub i32 %359, %176
  %361 = add i32 %360, %177
  %362 = sub i32 %361, %180
  %363 = add i32 %362, %186
  %364 = add i32 %363, %190
  %365 = add i32 %364, %193
  %366 = add i32 %365, %194
  %367 = add i32 %366, %196
  %368 = add i32 %367, %199
  %369 = sub i32 %368, %200
  %370 = sub i32 %369, %115
  %371 = sub i32 %370, %204
  %372 = sub i32 %371, %205
  %373 = add i32 %372, %206
  %374 = add i32 %373, %207
  %375 = add i32 %374, %208
  %376 = sub i32 %375, %210
  %377 = sub i32 %376, %211
  %378 = add i32 %377, %212
  %379 = sub i32 %378, %215
  %380 = sub i32 %379, %216
  %381 = sub i32 %380, %218
  %382 = sub i32 %381, %219
  %383 = add i32 %382, %220
  %384 = add i32 %383, %222
  %385 = sub i32 %384, %223
  %386 = sub i32 %385, %224
  %387 = add i32 %386, %225
  %388 = sub i32 %387, %12
  %389 = sub i32 %388, %227
  %390 = sub i32 %389, %230
  %391 = add i32 %390, %232
  %392 = add i32 %391, %233
  %393 = sub i32 %392, %34
  %394 = sub i32 %393, %46
  %395 = sub i32 %394, %52
  %396 = sub i32 %395, %59
  %397 = add i32 %396, %76
  %398 = sub i32 %397, %89
  %399 = sub i32 %398, %97
  %400 = sub i32 %399, %101
  %401 = add i32 %400, %105
  %402 = sub i32 %401, %108
  %403 = sub i32 %402, %112
  %404 = sub i32 %403, %119
  %405 = add i32 %404, %122
  %406 = sub i32 %405, %129
  %407 = sub i32 %406, %150
  %408 = sub i32 %407, %154
  %409 = sub i32 %408, %161
  %410 = sub i32 %409, %166
  %411 = sub i32 %410, %179
  %412 = sub i32 %411, %183
  %413 = add i32 %412, %185
  %414 = add i32 %413, %192
  %415 = sub i32 %414, %202
  %416 = add i32 %415, %214
  %417 = add i32 %416, %235
  %418 = add i32 %417, %238
  %419 = add i32 %418, %240
  %420 = add i32 %419, %242
  %421 = add i32 %420, %244
  %422 = add i32 %421, %245
  %423 = sub i32 %422, %117
  %424 = add i32 %423, %256
  %425 = sub i32 %424, %189
  %426 = add i32 %425, %254
  %427 = add i32 %426, %251
  %428 = add i32 %427, %269
  %429 = icmp eq i32 %16, %428
  %430 = select i1 %429, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %431 = tail call i32 @puts(i8* nonnull dereferenceable(1) %430)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
