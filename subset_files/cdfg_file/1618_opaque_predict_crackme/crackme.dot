digraph "DFG for'crackme' function" {
	Node0xb51ca0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xb51d60[shape=record, label="  %5 = or i32 %4, %0"];
	Node0xb51dd0[shape=record, label="  %6 = xor i32 %2, %1"];
	Node0xb51e40[shape=record, label="  %7 = and i32 %6, %5"];
	Node0xb51eb0[shape=record, label="  %8 = xor i32 %2, -1"];
	Node0xb51f20[shape=record, label="  %9 = and i32 %8, %0"];
	Node0xb51f90[shape=record, label="  %10 = and i32 %2, %1"];
	Node0xb52000[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0xb52070[shape=record, label="  %12 = xor i32 %9, %11"];
	Node0xb520e0[shape=record, label="  %13 = and i32 %2, %0"];
	Node0xb52150[shape=record, label="  %14 = xor i32 %13, %5"];
	Node0xb521c0[shape=record, label="  %15 = or i32 %8, %1"];
	Node0xb52230[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0xb522a0[shape=record, label="  %17 = or i32 %9, %16"];
	Node0xb52310[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0xb52380[shape=record, label="  %19 = or i32 %13, %1"];
	Node0xb523f0[shape=record, label="  %20 = or i32 %9, %4"];
	Node0xb52460[shape=record, label="  %21 = or i32 %8, %0"];
	Node0xb524d0[shape=record, label="  %22 = and i32 %21, %1"];
	Node0xb52540[shape=record, label="  %23 = xor i32 %0, -1"];
	Node0xb525b0[shape=record, label="  %24 = and i32 %6, %23"];
	Node0xb52620[shape=record, label="  %25 = and i32 %1, %0"];
	Node0xb52690[shape=record, label="  %26 = xor i32 %2, %0"];
	Node0xb52700[shape=record, label="  %27 = or i32 %26, %25"];
	Node0xb52770[shape=record, label="  %28 = and i32 %8, %1"];
	Node0xb527e0[shape=record, label="  %29 = and i32 %28, %23"];
	Node0xb52880[shape=record, label="  %30 = shl i32 %29, 2"];
	Node0xb528f0[shape=record, label="  %31 = or i32 %2, %1"];
	Node0xb52990[shape=record, label="  %32 = xor i32 %31, 2147483647"];
	Node0xb52c10[shape=record, label="  %33 = and i32 %32, %0"];
	Node0xb52c80[shape=record, label="  %34 = and i32 %28, %0"];
	Node0xb52cf0[shape=record, label="  %35 = and i32 %16, %23"];
	Node0xb52d60[shape=record, label="  %36 = and i32 %10, %23"];
	Node0xb52dd0[shape=record, label="  %37 = and i32 %16, %0"];
	Node0xb52e40[shape=record, label="  %38 = shl i32 %37, 2"];
	Node0xb52eb0[shape=record, label="  %39 = and i32 %10, %0"];
	Node0xb52f50[shape=record, label="  %40 = mul i32 %39, -3"];
	Node0xb52fc0[shape=record, label="  %41 = add i32 %34, %35"];
	Node0xb53030[shape=record, label="  %42 = add i32 %41, %22"];
	Node0xb530a0[shape=record, label="  %43 = add i32 %42, %33"];
	Node0xb53110[shape=record, label="  %44 = shl i32 %43, 1"];
	Node0xb53180[shape=record, label="  %45 = sub i32 %15, %14"];
	Node0xb531f0[shape=record, label="  %46 = add i32 %45, %12"];
	Node0xb53260[shape=record, label="  %47 = sub i32 %46, %19"];
	Node0xb532d0[shape=record, label="  %48 = sub i32 %47, %20"];
	Node0xb53340[shape=record, label="  %49 = add i32 %48, %24"];
	Node0xb533b0[shape=record, label="  %50 = add i32 %49, %27"];
	Node0xb53420[shape=record, label="  %51 = sub i32 %50, %36"];
	Node0xb53490[shape=record, label="  %52 = sub i32 %51, %18"];
	Node0xb53500[shape=record, label="  %53 = sub i32 %52, %30"];
	Node0xb53570[shape=record, label="  %54 = add i32 %53, %38"];
	Node0xb535e0[shape=record, label="  %55 = add i32 %54, %40"];
	Node0xb53650[shape=record, label="  %56 = add i32 %55, %44"];
	Node0xb536c0[shape=record, label="  %57 = icmp eq i32 %7, %56"];
	Node0xaf2268[shape=record, label="  %58 = select i1 %57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xb53b60[shape=record, label="  %59 = tail call i32 @puts(i8* nonnull dereferenceable(1) %58)"];
	Node0xb53bb0[shape=record, label="  ret void"];
	Node0xb51ca0 -> Node0xb51d60;
	Node0xb51d60 -> Node0xb51dd0;
	Node0xb51dd0 -> Node0xb51e40;
	Node0xb51e40 -> Node0xb51eb0;
	Node0xb51eb0 -> Node0xb51f20;
	Node0xb51f20 -> Node0xb51f90;
	Node0xb51f90 -> Node0xb52000;
	Node0xb52000 -> Node0xb52070;
	Node0xb52070 -> Node0xb520e0;
	Node0xb520e0 -> Node0xb52150;
	Node0xb52150 -> Node0xb521c0;
	Node0xb521c0 -> Node0xb52230;
	Node0xb52230 -> Node0xb522a0;
	Node0xb522a0 -> Node0xb52310;
	Node0xb52310 -> Node0xb52380;
	Node0xb52380 -> Node0xb523f0;
	Node0xb523f0 -> Node0xb52460;
	Node0xb52460 -> Node0xb524d0;
	Node0xb524d0 -> Node0xb52540;
	Node0xb52540 -> Node0xb525b0;
	Node0xb525b0 -> Node0xb52620;
	Node0xb52620 -> Node0xb52690;
	Node0xb52690 -> Node0xb52700;
	Node0xb52700 -> Node0xb52770;
	Node0xb52770 -> Node0xb527e0;
	Node0xb527e0 -> Node0xb52880;
	Node0xb52880 -> Node0xb528f0;
	Node0xb528f0 -> Node0xb52990;
	Node0xb52990 -> Node0xb52c10;
	Node0xb52c10 -> Node0xb52c80;
	Node0xb52c80 -> Node0xb52cf0;
	Node0xb52cf0 -> Node0xb52d60;
	Node0xb52d60 -> Node0xb52dd0;
	Node0xb52dd0 -> Node0xb52e40;
	Node0xb52e40 -> Node0xb52eb0;
	Node0xb52eb0 -> Node0xb52f50;
	Node0xb52f50 -> Node0xb52fc0;
	Node0xb52fc0 -> Node0xb53030;
	Node0xb53030 -> Node0xb530a0;
	Node0xb530a0 -> Node0xb53110;
	Node0xb53110 -> Node0xb53180;
	Node0xb53180 -> Node0xb531f0;
	Node0xb531f0 -> Node0xb53260;
	Node0xb53260 -> Node0xb532d0;
	Node0xb532d0 -> Node0xb53340;
	Node0xb53340 -> Node0xb533b0;
	Node0xb533b0 -> Node0xb53420;
	Node0xb53420 -> Node0xb53490;
	Node0xb53490 -> Node0xb53500;
	Node0xb53500 -> Node0xb53570;
	Node0xb53570 -> Node0xb535e0;
	Node0xb535e0 -> Node0xb53650;
	Node0xb53650 -> Node0xb536c0;
	Node0xb536c0 -> Node0xaf2268;
	Node0xaf2268 -> Node0xb53b60;
	Node0xb53b60 -> Node0xb53bb0;
edge [color=red]
	Node0xb51ca0 -> Node0xb51d60;
	Node0xb51dd0 -> Node0xb51e40;
	Node0xb51d60 -> Node0xb51e40;
	Node0xb51eb0 -> Node0xb51f20;
	Node0xb51f90 -> Node0xb52000;
	Node0xb51f20 -> Node0xb52070;
	Node0xb52000 -> Node0xb52070;
	Node0xb520e0 -> Node0xb52150;
	Node0xb51d60 -> Node0xb52150;
	Node0xb51eb0 -> Node0xb521c0;
	Node0xb521c0 -> Node0xb52230;
	Node0xb51f20 -> Node0xb522a0;
	Node0xb52230 -> Node0xb522a0;
	Node0xb522a0 -> Node0xb52310;
	Node0xb520e0 -> Node0xb52380;
	Node0xb51f20 -> Node0xb523f0;
	Node0xb51ca0 -> Node0xb523f0;
	Node0xb51eb0 -> Node0xb52460;
	Node0xb52460 -> Node0xb524d0;
	Node0xb51dd0 -> Node0xb525b0;
	Node0xb52540 -> Node0xb525b0;
	Node0xb52690 -> Node0xb52700;
	Node0xb52620 -> Node0xb52700;
	Node0xb51eb0 -> Node0xb52770;
	Node0xb52770 -> Node0xb527e0;
	Node0xb52540 -> Node0xb527e0;
	Node0xb527e0 -> Node0xb52880;
	Node0xb528f0 -> Node0xb52990;
	Node0xb52990 -> Node0xb52c10;
	Node0xb52770 -> Node0xb52c80;
	Node0xb52230 -> Node0xb52cf0;
	Node0xb52540 -> Node0xb52cf0;
	Node0xb51f90 -> Node0xb52d60;
	Node0xb52540 -> Node0xb52d60;
	Node0xb52230 -> Node0xb52dd0;
	Node0xb52dd0 -> Node0xb52e40;
	Node0xb51f90 -> Node0xb52eb0;
	Node0xb52eb0 -> Node0xb52f50;
	Node0xb52c80 -> Node0xb52fc0;
	Node0xb52cf0 -> Node0xb52fc0;
	Node0xb52fc0 -> Node0xb53030;
	Node0xb524d0 -> Node0xb53030;
	Node0xb53030 -> Node0xb530a0;
	Node0xb52c10 -> Node0xb530a0;
	Node0xb530a0 -> Node0xb53110;
	Node0xb521c0 -> Node0xb53180;
	Node0xb52150 -> Node0xb53180;
	Node0xb53180 -> Node0xb531f0;
	Node0xb52070 -> Node0xb531f0;
	Node0xb531f0 -> Node0xb53260;
	Node0xb52380 -> Node0xb53260;
	Node0xb53260 -> Node0xb532d0;
	Node0xb523f0 -> Node0xb532d0;
	Node0xb532d0 -> Node0xb53340;
	Node0xb525b0 -> Node0xb53340;
	Node0xb53340 -> Node0xb533b0;
	Node0xb52700 -> Node0xb533b0;
	Node0xb533b0 -> Node0xb53420;
	Node0xb52d60 -> Node0xb53420;
	Node0xb53420 -> Node0xb53490;
	Node0xb52310 -> Node0xb53490;
	Node0xb53490 -> Node0xb53500;
	Node0xb52880 -> Node0xb53500;
	Node0xb53500 -> Node0xb53570;
	Node0xb52e40 -> Node0xb53570;
	Node0xb53570 -> Node0xb535e0;
	Node0xb52f50 -> Node0xb535e0;
	Node0xb535e0 -> Node0xb53650;
	Node0xb53110 -> Node0xb53650;
	Node0xb51e40 -> Node0xb536c0;
	Node0xb53650 -> Node0xb536c0;
	Node0xb536c0 -> Node0xaf2268;
	Node0xaf2268 -> Node0xb53b60;
}
