digraph "DFG for'crackme' function" {
	Node0x10e4af0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x10e4b60[shape=record, label="  %4 = xor i32 %3, %1"];
	Node0x10e4c20[shape=record, label="  %5 = mul i32 %4, 3"];
	Node0x10e4c90[shape=record, label="  %6 = or i32 %1, %0"];
	Node0x10e4d00[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x10e4d70[shape=record, label="  %8 = or i32 %3, %1"];
	Node0x10e4de0[shape=record, label="  %9 = or i32 %7, %0"];
	Node0x10e4e50[shape=record, label="  %10 = shl i32 %6, 3"];
	Node0x10e4ef0[shape=record, label="  %11 = xor i32 %10, -8"];
	Node0x10e4f60[shape=record, label="  %12 = and i32 %1, %0"];
	Node0x10e5000[shape=record, label="  %13 = shl i32 %12, 2"];
	Node0x10e5070[shape=record, label="  %14 = sub i32 %0, %9"];
	Node0x10e5110[shape=record, label="  %15 = mul i32 %14, 5"];
	Node0x10e51b0[shape=record, label="  %16 = shl i32 %1, 1"];
	Node0x10e5220[shape=record, label="  %17 = sub i32 %8, %16"];
	Node0x10e5290[shape=record, label="  %18 = add i32 %17, %6"];
	Node0x10e5300[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x10e5370[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x10e53e0[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x10e5450[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x10e54c0[shape=record, label="  %23 = icmp eq i32 %5, %22"];
	Node0x1085268[shape=record, label="  %24 = select i1 %23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10e5960[shape=record, label="  %25 = tail call i32 @puts(i8* nonnull dereferenceable(1) %24)"];
	Node0x10e59b0[shape=record, label="  ret void"];
	Node0x10e4af0 -> Node0x10e4b60;
	Node0x10e4b60 -> Node0x10e4c20;
	Node0x10e4c20 -> Node0x10e4c90;
	Node0x10e4c90 -> Node0x10e4d00;
	Node0x10e4d00 -> Node0x10e4d70;
	Node0x10e4d70 -> Node0x10e4de0;
	Node0x10e4de0 -> Node0x10e4e50;
	Node0x10e4e50 -> Node0x10e4ef0;
	Node0x10e4ef0 -> Node0x10e4f60;
	Node0x10e4f60 -> Node0x10e5000;
	Node0x10e5000 -> Node0x10e5070;
	Node0x10e5070 -> Node0x10e5110;
	Node0x10e5110 -> Node0x10e51b0;
	Node0x10e51b0 -> Node0x10e5220;
	Node0x10e5220 -> Node0x10e5290;
	Node0x10e5290 -> Node0x10e5300;
	Node0x10e5300 -> Node0x10e5370;
	Node0x10e5370 -> Node0x10e53e0;
	Node0x10e53e0 -> Node0x10e5450;
	Node0x10e5450 -> Node0x10e54c0;
	Node0x10e54c0 -> Node0x1085268;
	Node0x1085268 -> Node0x10e5960;
	Node0x10e5960 -> Node0x10e59b0;
edge [color=red]
	Node0x10e4af0 -> Node0x10e4b60;
	Node0x10e4b60 -> Node0x10e4c20;
	Node0x10e4af0 -> Node0x10e4d70;
	Node0x10e4d00 -> Node0x10e4de0;
	Node0x10e4c90 -> Node0x10e4e50;
	Node0x10e4e50 -> Node0x10e4ef0;
	Node0x10e4f60 -> Node0x10e5000;
	Node0x10e4de0 -> Node0x10e5070;
	Node0x10e5070 -> Node0x10e5110;
	Node0x10e4d70 -> Node0x10e5220;
	Node0x10e51b0 -> Node0x10e5220;
	Node0x10e5220 -> Node0x10e5290;
	Node0x10e4c90 -> Node0x10e5290;
	Node0x10e5290 -> Node0x10e5300;
	Node0x10e4de0 -> Node0x10e5300;
	Node0x10e5300 -> Node0x10e5370;
	Node0x10e5000 -> Node0x10e5370;
	Node0x10e5370 -> Node0x10e53e0;
	Node0x10e4ef0 -> Node0x10e53e0;
	Node0x10e53e0 -> Node0x10e5450;
	Node0x10e5110 -> Node0x10e5450;
	Node0x10e4c20 -> Node0x10e54c0;
	Node0x10e5450 -> Node0x10e54c0;
	Node0x10e54c0 -> Node0x1085268;
	Node0x1085268 -> Node0x10e5960;
}
