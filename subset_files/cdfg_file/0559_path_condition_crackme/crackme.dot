digraph "DFG for'crackme' function" {
	Node0x23d5b20[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x23d5b90[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x23d5c50[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0x23d5cc0[shape=record, label="  %6 = mul i32 %5, -2"];
	Node0x23d5d30[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x23d5dd0[shape=record, label="  %8 = or i32 %6, 1"];
	Node0x23d5e40[shape=record, label="  %9 = and i32 %1, %0"];
	Node0x23d5ee0[shape=record, label="  %10 = shl i32 %9, 2"];
	Node0x23d5f80[shape=record, label="  %11 = xor i32 %10, -4"];
	Node0x23d5ff0[shape=record, label="  %12 = xor i32 %7, %1"];
	Node0x23d6060[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x23d60d0[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x23d6140[shape=record, label="  %15 = add i32 %9, %14"];
	Node0x23d61e0[shape=record, label="  %16 = mul i32 %15, -3"];
	Node0x23d6250[shape=record, label="  %17 = add i32 %4, %3"];
	Node0x23d62c0[shape=record, label="  %18 = shl i32 %17, 1"];
	Node0x23d6330[shape=record, label="  %19 = sub i32 %7, %0"];
	Node0x23d63a0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x23d6410[shape=record, label="  %21 = sub i32 %20, %11"];
	Node0x23d6480[shape=record, label="  %22 = add i32 %21, %16"];
	Node0x23d64f0[shape=record, label="  %23 = add i32 %22, %18"];
	Node0x23d6560[shape=record, label="  %24 = icmp eq i32 %8, %23"];
	Node0x2376268[shape=record, label="  %25 = select i1 %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x23d6a00[shape=record, label="  %26 = tail call i32 @puts(i8* nonnull dereferenceable(1) %25)"];
	Node0x23d6a50[shape=record, label="  ret void"];
	Node0x23d5b20 -> Node0x23d5b90;
	Node0x23d5b90 -> Node0x23d5c50;
	Node0x23d5c50 -> Node0x23d5cc0;
	Node0x23d5cc0 -> Node0x23d5d30;
	Node0x23d5d30 -> Node0x23d5dd0;
	Node0x23d5dd0 -> Node0x23d5e40;
	Node0x23d5e40 -> Node0x23d5ee0;
	Node0x23d5ee0 -> Node0x23d5f80;
	Node0x23d5f80 -> Node0x23d5ff0;
	Node0x23d5ff0 -> Node0x23d6060;
	Node0x23d6060 -> Node0x23d60d0;
	Node0x23d60d0 -> Node0x23d6140;
	Node0x23d6140 -> Node0x23d61e0;
	Node0x23d61e0 -> Node0x23d6250;
	Node0x23d6250 -> Node0x23d62c0;
	Node0x23d62c0 -> Node0x23d6330;
	Node0x23d6330 -> Node0x23d63a0;
	Node0x23d63a0 -> Node0x23d6410;
	Node0x23d6410 -> Node0x23d6480;
	Node0x23d6480 -> Node0x23d64f0;
	Node0x23d64f0 -> Node0x23d6560;
	Node0x23d6560 -> Node0x2376268;
	Node0x2376268 -> Node0x23d6a00;
	Node0x23d6a00 -> Node0x23d6a50;
edge [color=red]
	Node0x23d5b20 -> Node0x23d5b90;
	Node0x23d5b90 -> Node0x23d5c50;
	Node0x23d5c50 -> Node0x23d5cc0;
	Node0x23d5cc0 -> Node0x23d5dd0;
	Node0x23d5e40 -> Node0x23d5ee0;
	Node0x23d5ee0 -> Node0x23d5f80;
	Node0x23d5d30 -> Node0x23d5ff0;
	Node0x23d6060 -> Node0x23d60d0;
	Node0x23d5e40 -> Node0x23d6140;
	Node0x23d60d0 -> Node0x23d6140;
	Node0x23d6140 -> Node0x23d61e0;
	Node0x23d5b90 -> Node0x23d6250;
	Node0x23d5b20 -> Node0x23d6250;
	Node0x23d6250 -> Node0x23d62c0;
	Node0x23d5d30 -> Node0x23d6330;
	Node0x23d6330 -> Node0x23d63a0;
	Node0x23d5ff0 -> Node0x23d63a0;
	Node0x23d63a0 -> Node0x23d6410;
	Node0x23d5f80 -> Node0x23d6410;
	Node0x23d6410 -> Node0x23d6480;
	Node0x23d61e0 -> Node0x23d6480;
	Node0x23d6480 -> Node0x23d64f0;
	Node0x23d62c0 -> Node0x23d64f0;
	Node0x23d5dd0 -> Node0x23d6560;
	Node0x23d64f0 -> Node0x23d6560;
	Node0x23d6560 -> Node0x2376268;
	Node0x2376268 -> Node0x23d6a00;
}
