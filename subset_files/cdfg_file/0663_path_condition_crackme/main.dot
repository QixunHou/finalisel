digraph "DFG for'main' function" {
	Node0xd3d3e8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xd3d468[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xd3d4f8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xd3d558[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0xd3d9d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xd3dab8[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0xd3dbb8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xd3dc78[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0xd3dd28[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xd3df88[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0xd3e048[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xd3e1a8[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xd3e208[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xd3fd50[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0xd3ff58[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xd400b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xd401c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xd40288[shape=record, label="  ret i32 0"];
	Node0xd3d3e8 -> Node0xd3d468;
	Node0xd3d468 -> Node0xd3d4f8;
	Node0xd3d4f8 -> Node0xd3d558;
	Node0xd3d558 -> Node0xd3d9d8;
	Node0xd3d9d8 -> Node0xd3dab8;
	Node0xd3dab8 -> Node0xd3dbb8;
	Node0xd3dbb8 -> Node0xd3dc78;
	Node0xd3dc78 -> Node0xd3dd28;
	Node0xd3dd28 -> Node0xd3df88;
	Node0xd3df88 -> Node0xd3e048;
	Node0xd3e048 -> Node0xd3e1a8;
	Node0xd3e1a8 -> Node0xd3e208;
	Node0xd3e208 -> Node0xd3fd50;
	Node0xd3fd50 -> Node0xd3ff58;
	Node0xd3ff58 -> Node0xd400b8;
	Node0xd400b8 -> Node0xd401c8;
	Node0xd401c8 -> Node0xd40288;
edge [color=red]
	Node0xd3d3e8 -> Node0xd3d558;
	Node0xd3d558 -> Node0xd3d9d8;
	Node0xd3d468 -> Node0xd3dab8;
	Node0xd3dab8 -> Node0xd3dbb8;
	Node0xd3d4f8 -> Node0xd3dc78;
	Node0xd3dc78 -> Node0xd3dd28;
	Node0xd3d3e8 -> Node0xd3df88;
	Node0xd3d468 -> Node0xd3df88;
	Node0xd3d4f8 -> Node0xd3df88;
	Node0xd3d3e8 -> Node0xd3e048;
	Node0xd3d468 -> Node0xd3e1a8;
	Node0xd3d4f8 -> Node0xd3e208;
	Node0xd3e048 -> Node0xd3fd50;
	Node0xd3e1a8 -> Node0xd3fd50;
	Node0xd3e208 -> Node0xd3fd50;
	Node0xd3dc78 -> Node0xd3ff58;
	Node0xd3dab8 -> Node0xd400b8;
	Node0xd3d558 -> Node0xd401c8;
}
