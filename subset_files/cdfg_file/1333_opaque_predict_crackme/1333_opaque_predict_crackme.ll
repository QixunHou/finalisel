; ModuleID = '../.././c_source_file/1333_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1333_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %0, -1
  %10 = or i32 %2, %1
  %11 = and i32 %10, %9
  %12 = or i32 %8, %11
  %13 = and i32 %4, %3
  %14 = xor i32 %5, %3
  %15 = xor i32 %14, -1
  %16 = or i32 %13, %15
  %17 = sub i32 %16, %12
  %18 = xor i32 %1, -1
  %19 = and i32 %18, %2
  %20 = and i32 %19, %0
  %21 = or i32 %18, %2
  %22 = xor i32 %21, %9
  %23 = xor i32 %22, %20
  %24 = or i32 %1, %0
  %25 = or i32 %2, %0
  %26 = xor i32 %25, 2147483647
  %27 = xor i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %26, %28
  %30 = and i32 %7, %9
  %31 = and i32 %10, %0
  %32 = or i32 %30, %31
  %33 = or i32 %18, %0
  %34 = xor i32 %2, %0
  %35 = and i32 %34, %33
  %36 = xor i32 %2, -1
  %37 = and i32 %18, %0
  %38 = or i32 %37, %36
  %39 = xor i32 %37, -1
  %40 = add i32 %37, 1
  %41 = xor i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = and i32 %24, %42
  %44 = and i32 %1, %0
  %45 = or i32 %10, %0
  %46 = and i32 %2, %0
  %47 = and i32 %36, %0
  %48 = or i32 %47, %27
  %49 = xor i32 %34, -1
  %50 = or i32 %49, %28
  %51 = and i32 %33, %42
  %52 = shl i32 %51, 2
  %53 = and i32 %36, %1
  %54 = xor i32 %53, -1
  %55 = xor i32 %46, %54
  %56 = xor i32 %25, %1
  %57 = and i32 %49, %18
  %58 = xor i32 %24, 2147483647
  %59 = or i32 %46, %58
  %60 = or i32 %36, %1
  %61 = and i32 %60, %9
  %62 = xor i32 %44, -1
  %63 = xor i32 %62, %2
  %64 = and i32 %34, %27
  %65 = or i32 %54, %9
  %66 = and i32 %36, %62
  %67 = xor i32 %60, -1
  %68 = or i32 %44, %67
  %69 = xor i32 %7, 1073741823
  %70 = xor i32 %37, %69
  %71 = shl i32 %70, 2
  %72 = xor i32 %60, %0
  %73 = xor i32 %33, -1
  %74 = add i32 %33, 1
  %75 = xor i32 %10, %0
  %76 = or i32 %8, %75
  %77 = or i32 %36, %0
  %78 = xor i32 %77, -1
  %79 = or i32 %44, %78
  %80 = or i32 %41, %73
  %81 = or i32 %67, %9
  %82 = xor i32 %25, %44
  %83 = shl i32 %9, 1
  %84 = or i32 %46, %18
  %85 = and i32 %19, %9
  %86 = and i32 %21, %0
  %87 = or i32 %85, %86
  %88 = and i32 %36, %28
  %89 = add i32 %7, 1
  %90 = add i32 %41, 1
  %91 = or i32 %41, %0
  %92 = xor i32 %20, %91
  %93 = xor i32 %37, %54
  %94 = xor i32 %47, -1
  %95 = and i32 %27, %94
  %96 = xor i32 %46, -1
  %97 = xor i32 %96, %1
  %98 = shl i32 %97, 1
  %99 = and i32 %39, %2
  %100 = or i32 %78, %18
  %101 = xor i32 %11, -1
  %102 = xor i32 %8, %101
  %103 = xor i32 %39, %2
  %104 = xor i32 %94, %1
  %105 = and i32 %24, %36
  %106 = xor i32 %54, %0
  %107 = and i32 %27, %96
  %108 = and i32 %41, %0
  %109 = or i32 %30, %108
  %110 = and i32 %33, %2
  %111 = or i32 %36, %73
  %112 = and i32 %41, %39
  %113 = add i32 %46, 1
  %114 = xor i32 %41, 2147483647
  %115 = and i32 %114, %0
  %116 = or i32 %115, %85
  %117 = shl i32 %116, 1
  %118 = xor i32 %67, %0
  %119 = xor i32 %10, -1
  %120 = and i32 %119, %9
  %121 = and i32 %53, %9
  %122 = and i32 %119, %0
  %123 = and i32 %67, %9
  %124 = shl i32 %30, 3
  %125 = and i32 %67, %0
  %126 = xor i32 %4, -1
  %127 = xor i32 %3, -1
  %128 = and i32 %127, %5
  %129 = and i32 %128, %126
  %130 = or i32 %14, %126
  %131 = xor i32 %129, %130
  %132 = xor i32 %5, -1
  %133 = and i32 %128, %4
  %134 = or i32 %14, %4
  %135 = xor i32 %134, -1
  %136 = or i32 %133, %135
  %137 = and i32 %5, %3
  %138 = xor i32 %137, %4
  %139 = shl i32 %138, 1
  %140 = and i32 %127, %4
  %141 = xor i32 %140, -1
  %142 = xor i32 %141, %5
  %143 = and i32 %137, %4
  %144 = or i32 %5, %3
  %145 = xor i32 %144, %4
  %146 = or i32 %143, %145
  %147 = or i32 %132, %3
  %148 = xor i32 %147, -1
  %149 = or i32 %148, %4
  %150 = xor i32 %133, %134
  %151 = shl i32 %150, 1
  %152 = and i32 %5, %4
  %153 = xor i32 %4, %3
  %154 = xor i32 %153, -1
  %155 = or i32 %152, %154
  %156 = or i32 %4, %3
  %157 = and i32 %14, %156
  %158 = or i32 %132, %154
  %159 = or i32 %5, %4
  %160 = and i32 %159, %153
  %161 = xor i32 %14, %4
  %162 = or i32 %127, %4
  %163 = xor i32 %162, -1
  %164 = or i32 %132, %163
  %165 = and i32 %144, %126
  %166 = or i32 %143, %165
  %167 = xor i32 %5, %4
  %168 = xor i32 %167, -1
  %169 = and i32 %168, %141
  %170 = or i32 %127, %5
  %171 = and i32 %170, %4
  %172 = or i32 %129, %171
  %173 = xor i32 %144, -1
  %174 = or i32 %13, %173
  %175 = and i32 %14, %126
  %176 = or i32 %168, %154
  %177 = shl i32 %176, 1
  %178 = xor i32 %143, -1
  %179 = xor i32 %145, %178
  %180 = xor i32 %152, %3
  %181 = xor i32 %165, %178
  %182 = xor i32 %152, -1
  %183 = and i32 %153, %182
  %184 = and i32 %168, %154
  %185 = shl i32 %184, 2
  %186 = xor i32 %159, -1
  %187 = or i32 %13, %186
  %188 = and i32 %162, %132
  %189 = or i32 %152, %173
  %190 = xor i32 %137, -1
  %191 = and i32 %190, %126
  %192 = and i32 %167, %154
  %193 = and i32 %132, %4
  %194 = xor i32 %193, -1
  %195 = and i32 %194, %3
  %196 = and i32 %132, %141
  %197 = and i32 %154, %5
  %198 = xor i32 %163, %5
  %199 = and i32 %132, %3
  %200 = xor i32 %199, -1
  %201 = or i32 %200, %4
  %202 = xor i32 %156, -1
  %203 = or i32 %152, %202
  %204 = or i32 %163, %5
  %205 = or i32 %167, %140
  %206 = xor i32 %152, %200
  %207 = xor i32 %13, -1
  %208 = or i32 %199, %126
  %209 = or i32 %14, %140
  %210 = shl i32 %209, 1
  %211 = and i32 %190, %4
  %212 = and i32 %182, %127
  %213 = and i32 %159, %3
  %214 = shl i32 %213, 1
  %215 = xor i32 %175, %178
  %216 = and i32 %194, %154
  %217 = or i32 %132, %4
  %218 = xor i32 %217, -1
  %219 = or i32 %153, %132
  %220 = or i32 %193, %148
  %221 = and i32 %147, %126
  %222 = shl i32 %221, 1
  %223 = xor i32 %140, %190
  %224 = shl i32 %223, 1
  %225 = or i32 %168, %3
  %226 = or i32 %13, %132
  %227 = xor i32 %173, %4
  %228 = and i32 %15, %126
  %229 = xor i32 %217, %13
  %230 = and i32 %15, %141
  %231 = shl i32 %230, 1
  %232 = or i32 %152, %163
  %233 = or i32 %137, %140
  %234 = and i32 %147, %4
  %235 = and i32 %200, %4
  %236 = xor i32 %148, %4
  %237 = shl i32 %236, 1
  %238 = or i32 %140, %132
  %239 = shl i32 %238, 1
  %240 = or i32 %132, %202
  %241 = and i32 %14, %141
  %242 = and i32 %217, %154
  %243 = and i32 %137, %126
  %244 = and i32 %14, %4
  %245 = xor i32 %243, -1
  %246 = xor i32 %244, %245
  %247 = and i32 %141, %5
  %248 = and i32 %153, %194
  %249 = or i32 %173, %126
  %250 = and i32 %156, %5
  %251 = and i32 %162, %168
  %252 = shl i32 %251, 1
  %253 = or i32 %144, %126
  %254 = xor i32 %194, %3
  %255 = xor i32 %161, -1
  %256 = or i32 %143, %255
  %257 = or i32 %15, %202
  %258 = xor i32 %193, %147
  %259 = xor i32 %147, %13
  %260 = or i32 %193, %3
  %261 = or i32 %202, %5
  %262 = add i32 %137, 1
  %263 = and i32 %162, %5
  %264 = and i32 %194, %127
  %265 = shl i32 %167, 2
  %266 = or i32 %13, %168
  %267 = xor i32 %218, %3
  %268 = or i32 %15, %163
  %269 = xor i32 %13, %5
  %270 = or i32 %243, %244
  %271 = xor i32 %193, %190
  %272 = or i32 %137, %126
  %273 = shl i32 %272, 1
  %274 = or i32 %152, %3
  %275 = xor i32 %159, %13
  %276 = xor i32 %200, %4
  %277 = shl i32 %276, 1
  %278 = and i32 %162, %15
  %279 = and i32 %15, %4
  %280 = and i32 %167, %207
  %281 = xor i32 %144, %13
  %282 = and i32 %14, %162
  %283 = shl i32 %282, 1
  %284 = xor i32 %156, %5
  %285 = or i32 %15, %4
  %286 = xor i32 %147, %4
  %287 = or i32 %199, %4
  %288 = or i32 %148, %126
  %289 = and i32 %167, %153
  %290 = and i32 %144, %4
  %291 = or i32 %243, %290
  %292 = or i32 %133, %161
  %293 = or i32 %167, %153
  %294 = and i32 %167, %156
  %295 = or i32 %186, %3
  %296 = xor i32 %152, %162
  %297 = and i32 %153, %5
  %298 = or i32 %13, %5
  %299 = and i32 %217, %153
  %300 = or i32 %186, %154
  %301 = xor i32 %140, %200
  %302 = or i32 %193, %154
  %303 = or i32 %218, %127
  %304 = shl i32 %303, 1
  %305 = and i32 %153, %168
  %306 = or i32 %218, %154
  %307 = or i32 %167, %154
  %308 = or i32 %199, %140
  %309 = or i32 %152, %127
  %310 = or i32 %152, %199
  %311 = or i32 %137, %4
  %312 = and i32 %159, %154
  %313 = and i32 %217, %3
  %314 = xor i32 %199, %4
  %315 = or i32 %153, %218
  %316 = or i32 %190, %126
  %317 = and i32 %167, %162
  %318 = shl i32 %186, 1
  %319 = xor i32 %186, %3
  %320 = xor i32 %170, %4
  %321 = xor i32 %133, -1
  %322 = xor i32 %320, %321
  %323 = xor i32 %290, %245
  %324 = shl i32 %173, 1
  %325 = and i32 %182, %154
  %326 = or i32 %143, %175
  %327 = or i32 %153, %168
  %328 = xor i32 %162, %5
  %329 = and i32 %156, %168
  %330 = or i32 %154, %5
  %331 = shl i32 %330, 1
  %332 = or i32 %147, %4
  %333 = and i32 %167, %127
  %334 = and i32 %170, %126
  %335 = or i32 %133, %334
  %336 = shl i32 %335, 1
  %337 = xor i32 %334, %321
  %338 = or i32 %167, %13
  %339 = and i32 %200, %126
  %340 = and i32 %14, %207
  %341 = and i32 %182, %3
  %342 = or i32 %140, %5
  %343 = or i32 %144, %4
  %344 = or i32 %168, %127
  %345 = xor i32 %202, %5
  %346 = and i32 %15, %207
  %347 = shl i32 %346, 2
  %348 = or i32 %168, %202
  %349 = or i32 %133, %320
  %350 = and i32 %207, %5
  %351 = shl i32 %350, 2
  %352 = or i32 %14, %163
  %353 = shl i32 %352, 1
  %354 = or i32 %190, %4
  %355 = or i32 %152, %153
  %356 = or i32 %193, %153
  %357 = and i32 %132, %207
  %358 = or i32 %153, %186
  %359 = and i32 %168, %3
  %360 = or i32 %218, %3
  %361 = or i32 %153, %5
  %362 = add i32 %4, 1
  %363 = or i32 %14, %13
  %364 = or i32 %168, %163
  %365 = or i32 %193, %127
  %366 = xor i32 %133, %255
  %367 = or i32 %186, %127
  %368 = and i32 %156, %132
  %369 = and i32 %167, %141
  %370 = and i32 %168, %207
  %371 = xor i32 %217, %3
  %372 = xor i32 %152, %144
  %373 = shl i32 %372, 1
  %374 = or i32 %167, %202
  %375 = and i32 %153, %132
  %376 = and i32 %217, %127
  %377 = and i32 %156, %15
  %378 = shl i32 %134, 1
  %379 = xor i32 %143, %161
  %380 = or i32 %193, %137
  %381 = or i32 %13, %148
  %382 = or i32 %173, %4
  %383 = and i32 %167, %3
  %384 = or i32 %167, %127
  %385 = or i32 %13, %218
  %386 = and i32 %132, %154
  %387 = or i32 %140, %168
  %388 = or i32 %140, %15
  %389 = or i32 %147, %126
  %390 = xor i32 %15, %4
  %391 = or i32 %167, %163
  %392 = and i32 %173, %126
  %393 = mul i32 %392, 20
  %394 = and i32 %199, %126
  %395 = and i32 %173, %4
  %396 = and i32 %199, %4
  %397 = mul i32 %396, 9
  %398 = and i32 %148, %126
  %399 = mul i32 %398, 25
  %400 = mul i32 %243, 17
  %401 = and i32 %148, %4
  %402 = mul i32 %401, 21
  %403 = add i32 %105, %2
  %404 = add i32 %403, %67
  %405 = add i32 %404, %122
  %406 = add i32 %405, %118
  %407 = add i32 %406, %107
  %408 = add i32 %407, %93
  %409 = add i32 %408, %59
  %410 = add i32 %409, %140
  %411 = add i32 %410, %132
  %412 = add i32 %411, %32
  %413 = add i32 %412, %29
  %414 = add i32 %413, %386
  %415 = add i32 %414, %194
  %416 = add i32 %415, %182
  %417 = add i32 %416, %168
  %418 = add i32 %417, %15
  %419 = add i32 %418, %198
  %420 = add i32 %419, %148
  %421 = add i32 %420, %380
  %422 = add i32 %421, %302
  %423 = add i32 %422, %301
  %424 = add i32 %423, %294
  %425 = add i32 %424, %205
  %426 = add i32 %425, %201
  %427 = add i32 %426, %270
  %428 = add i32 %427, %379
  %429 = add i32 %428, %146
  %430 = add i32 %429, %131
  %431 = shl i32 %430, 1
  %432 = add i32 %297, %125
  %433 = sub i32 %343, %432
  %434 = add i32 %433, %143
  %435 = sub i32 %434, %264
  %436 = mul i32 %435, 5
  %437 = sub i32 %120, %8
  %438 = mul i32 %437, 6
  %439 = add i32 %63, -1
  %440 = add i32 %439, %121
  %441 = sub i32 %440, %112
  %442 = add i32 %441, %290
  %443 = sub i32 %442, %388
  %444 = sub i32 %443, %229
  %445 = sub i32 %444, %212
  %446 = sub i32 %445, %189
  %447 = mul i32 %446, 3
  %448 = sub i32 1, %83
  %449 = add i32 %448, %24
  %450 = add i32 %449, %40
  %451 = sub i32 %450, %44
  %452 = add i32 %451, %74
  %453 = add i32 %452, %38
  %454 = add i32 %453, %46
  %455 = sub i32 %454, %66
  %456 = add i32 %455, %88
  %457 = add i32 %456, %89
  %458 = add i32 %457, %90
  %459 = add i32 %458, %60
  %460 = sub i32 %459, %77
  %461 = add i32 %460, %99
  %462 = add i32 %461, %103
  %463 = sub i32 %462, %110
  %464 = add i32 %463, %111
  %465 = add i32 %464, %113
  %466 = sub i32 %465, %35
  %467 = sub i32 %466, %43
  %468 = add i32 %467, %45
  %469 = sub i32 %468, %48
  %470 = add i32 %469, %50
  %471 = add i32 %470, %55
  %472 = add i32 %471, %56
  %473 = sub i32 %472, %57
  %474 = sub i32 %473, %61
  %475 = add i32 %474, %64
  %476 = sub i32 %475, %65
  %477 = sub i32 %476, %68
  %478 = sub i32 %477, %72
  %479 = add i32 %478, %79
  %480 = sub i32 %479, %80
  %481 = add i32 %480, %81
  %482 = add i32 %481, %82
  %483 = add i32 %482, %84
  %484 = sub i32 %483, %95
  %485 = sub i32 %484, %100
  %486 = sub i32 %485, %104
  %487 = add i32 %486, %106
  %488 = add i32 %487, %123
  %489 = add i32 %488, %4
  %490 = add i32 %489, %362
  %491 = sub i32 %490, %23
  %492 = sub i32 %491, %52
  %493 = sub i32 %492, %71
  %494 = add i32 %493, %76
  %495 = sub i32 %494, %87
  %496 = sub i32 %495, %92
  %497 = sub i32 %496, %98
  %498 = sub i32 %497, %102
  %499 = add i32 %498, %109
  %500 = sub i32 %499, %124
  %501 = add i32 %500, %141
  %502 = add i32 %501, %163
  %503 = add i32 %502, %207
  %504 = sub i32 %503, %162
  %505 = add i32 %504, %5
  %506 = sub i32 %505, %13
  %507 = add i32 %506, %142
  %508 = sub i32 %507, %158
  %509 = sub i32 %508, %164
  %510 = sub i32 %509, %144
  %511 = sub i32 %510, %188
  %512 = add i32 %511, %196
  %513 = sub i32 %512, %152
  %514 = add i32 %513, %197
  %515 = sub i32 %514, %159
  %516 = sub i32 %515, %204
  %517 = add i32 %516, %219
  %518 = sub i32 %517, %226
  %519 = sub i32 %518, %14
  %520 = add i32 %519, %240
  %521 = sub i32 %520, %247
  %522 = sub i32 %521, %250
  %523 = sub i32 %522, %261
  %524 = add i32 %523, %262
  %525 = add i32 %524, %263
  %526 = sub i32 %525, %269
  %527 = sub i32 %526, %199
  %528 = add i32 %527, %284
  %529 = sub i32 %528, %298
  %530 = add i32 %529, %193
  %531 = sub i32 %530, %328
  %532 = add i32 %531, %137
  %533 = sub i32 %532, %342
  %534 = sub i32 %533, %345
  %535 = sub i32 %534, %357
  %536 = add i32 %535, %361
  %537 = add i32 %536, %147
  %538 = add i32 %537, %368
  %539 = sub i32 %538, %375
  %540 = add i32 %539, %438
  %541 = sub i32 %540, %117
  %542 = add i32 %541, %149
  %543 = add i32 %542, %155
  %544 = add i32 %543, %157
  %545 = add i32 %544, %160
  %546 = add i32 %545, %161
  %547 = add i32 %546, %169
  %548 = add i32 %547, %174
  %549 = add i32 %548, %175
  %550 = add i32 %549, %180
  %551 = add i32 %550, %183
  %552 = add i32 %551, %187
  %553 = sub i32 %552, %191
  %554 = sub i32 %553, %192
  %555 = sub i32 %554, %195
  %556 = add i32 %555, %203
  %557 = add i32 %556, %206
  %558 = add i32 %557, %208
  %559 = sub i32 %558, %211
  %560 = sub i32 %559, %216
  %561 = add i32 %560, %220
  %562 = sub i32 %561, %225
  %563 = add i32 %562, %227
  %564 = add i32 %563, %228
  %565 = sub i32 %564, %232
  %566 = sub i32 %565, %233
  %567 = sub i32 %566, %234
  %568 = sub i32 %567, %235
  %569 = sub i32 %568, %239
  %570 = sub i32 %569, %241
  %571 = add i32 %570, %242
  %572 = add i32 %571, %248
  %573 = sub i32 %572, %249
  %574 = add i32 %573, %253
  %575 = sub i32 %574, %254
  %576 = add i32 %575, %257
  %577 = add i32 %576, %244
  %578 = add i32 %577, %258
  %579 = add i32 %578, %259
  %580 = sub i32 %579, %260
  %581 = sub i32 %580, %265
  %582 = sub i32 %581, %266
  %583 = sub i32 %582, %267
  %584 = add i32 %583, %268
  %585 = sub i32 %584, %271
  %586 = add i32 %585, %274
  %587 = sub i32 %586, %275
  %588 = sub i32 %587, %278
  %589 = add i32 %588, %279
  %590 = add i32 %589, %280
  %591 = add i32 %590, %281
  %592 = sub i32 %591, %285
  %593 = add i32 %592, %286
  %594 = add i32 %593, %287
  %595 = sub i32 %594, %288
  %596 = add i32 %595, %289
  %597 = add i32 %596, %293
  %598 = add i32 %597, %295
  %599 = add i32 %598, %296
  %600 = add i32 %599, %299
  %601 = sub i32 %600, %300
  %602 = sub i32 %601, %305
  %603 = sub i32 %602, %306
  %604 = sub i32 %603, %307
  %605 = sub i32 %604, %308
  %606 = add i32 %605, %309
  %607 = add i32 %606, %310
  %608 = add i32 %607, %311
  %609 = sub i32 %608, %312
  %610 = sub i32 %609, %313
  %611 = sub i32 %610, %314
  %612 = add i32 %611, %315
  %613 = add i32 %612, %316
  %614 = sub i32 %613, %317
  %615 = sub i32 %614, %318
  %616 = sub i32 %615, %319
  %617 = sub i32 %616, %324
  %618 = sub i32 %617, %325
  %619 = sub i32 %618, %327
  %620 = sub i32 %619, %329
  %621 = sub i32 %620, %331
  %622 = add i32 %621, %332
  %623 = add i32 %622, %333
  %624 = sub i32 %623, %338
  %625 = add i32 %624, %339
  %626 = sub i32 %625, %340
  %627 = sub i32 %626, %341
  %628 = sub i32 %627, %165
  %629 = add i32 %628, %344
  %630 = sub i32 %629, %348
  %631 = sub i32 %630, %351
  %632 = add i32 %631, %354
  %633 = add i32 %632, %130
  %634 = sub i32 %633, %355
  %635 = add i32 %634, %356
  %636 = sub i32 %635, %358
  %637 = add i32 %636, %359
  %638 = add i32 %637, %360
  %639 = sub i32 %638, %363
  %640 = sub i32 %639, %364
  %641 = add i32 %640, %365
  %642 = sub i32 %641, %367
  %643 = sub i32 %642, %369
  %644 = add i32 %643, %370
  %645 = add i32 %644, %371
  %646 = add i32 %645, %374
  %647 = sub i32 %646, %376
  %648 = sub i32 %647, %377
  %649 = sub i32 %648, %381
  %650 = sub i32 %649, %382
  %651 = sub i32 %650, %145
  %652 = add i32 %651, %383
  %653 = add i32 %652, %384
  %654 = sub i32 %653, %385
  %655 = add i32 %654, %387
  %656 = add i32 %655, %389
  %657 = add i32 %656, %390
  %658 = sub i32 %657, %391
  %659 = add i32 %658, %394
  %660 = add i32 %659, %395
  %661 = sub i32 %660, %136
  %662 = sub i32 %661, %139
  %663 = sub i32 %662, %166
  %664 = add i32 %663, %172
  %665 = sub i32 %664, %177
  %666 = sub i32 %665, %179
  %667 = add i32 %666, %181
  %668 = add i32 %667, %185
  %669 = sub i32 %668, %210
  %670 = sub i32 %669, %214
  %671 = sub i32 %670, %215
  %672 = sub i32 %671, %222
  %673 = sub i32 %672, %224
  %674 = sub i32 %673, %231
  %675 = sub i32 %674, %237
  %676 = add i32 %675, %246
  %677 = sub i32 %676, %252
  %678 = sub i32 %677, %256
  %679 = sub i32 %678, %273
  %680 = sub i32 %679, %277
  %681 = sub i32 %680, %283
  %682 = sub i32 %681, %291
  %683 = sub i32 %682, %292
  %684 = sub i32 %683, %304
  %685 = add i32 %684, %322
  %686 = sub i32 %685, %323
  %687 = sub i32 %686, %326
  %688 = sub i32 %687, %337
  %689 = sub i32 %688, %347
  %690 = sub i32 %689, %349
  %691 = sub i32 %690, %353
  %692 = sub i32 %691, %366
  %693 = sub i32 %692, %373
  %694 = sub i32 %693, %378
  %695 = add i32 %694, %393
  %696 = add i32 %695, %397
  %697 = add i32 %696, %399
  %698 = add i32 %697, %400
  %699 = add i32 %698, %402
  %700 = sub i32 %699, %151
  %701 = sub i32 %700, %336
  %702 = add i32 %701, %436
  %703 = add i32 %702, %447
  %704 = add i32 %703, %431
  %705 = icmp eq i32 %17, %704
  %706 = select i1 %705, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %707 = tail call i32 @puts(i8* nonnull dereferenceable(1) %706)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
