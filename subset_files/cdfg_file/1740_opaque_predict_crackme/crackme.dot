digraph "DFG for'crackme' function" {
	Node0x1245b50[shape=record, label="  %3 = sub i32 -3, %0"];
	Node0x1245bf0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0x1245cb0[shape=record, label="  %5 = xor i32 %4, %0"];
	Node0x1245d20[shape=record, label="  %6 = or i32 %4, %0"];
	Node0x1245d90[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x1245e00[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x1245ea0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x1245f10[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1245f80[shape=record, label="  %11 = and i32 %4, %0"];
	Node0x1246020[shape=record, label="  %12 = shl i32 %6, 2"];
	Node0x12460c0[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x1246130[shape=record, label="  %14 = shl i32 %7, 2"];
	Node0x12461a0[shape=record, label="  %15 = shl i32 %11, 1"];
	Node0x1246210[shape=record, label="  %16 = sub i32 1, %0"];
	Node0x1246280[shape=record, label="  %17 = sub i32 %16, %1"];
	Node0x12462f0[shape=record, label="  %18 = add i32 %17, %5"];
	Node0x1246360[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x12463d0[shape=record, label="  %20 = sub i32 %19, %10"];
	Node0x1246440[shape=record, label="  %21 = add i32 %20, %14"];
	Node0x12464b0[shape=record, label="  %22 = add i32 %21, %15"];
	Node0x1246520[shape=record, label="  %23 = add i32 %22, %9"];
	Node0x1246590[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x1246600[shape=record, label="  %25 = icmp eq i32 %3, %24"];
	Node0x11e6268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1246aa0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1246af0[shape=record, label="  ret void"];
	Node0x1245b50 -> Node0x1245bf0;
	Node0x1245bf0 -> Node0x1245cb0;
	Node0x1245cb0 -> Node0x1245d20;
	Node0x1245d20 -> Node0x1245d90;
	Node0x1245d90 -> Node0x1245e00;
	Node0x1245e00 -> Node0x1245ea0;
	Node0x1245ea0 -> Node0x1245f10;
	Node0x1245f10 -> Node0x1245f80;
	Node0x1245f80 -> Node0x1246020;
	Node0x1246020 -> Node0x12460c0;
	Node0x12460c0 -> Node0x1246130;
	Node0x1246130 -> Node0x12461a0;
	Node0x12461a0 -> Node0x1246210;
	Node0x1246210 -> Node0x1246280;
	Node0x1246280 -> Node0x12462f0;
	Node0x12462f0 -> Node0x1246360;
	Node0x1246360 -> Node0x12463d0;
	Node0x12463d0 -> Node0x1246440;
	Node0x1246440 -> Node0x12464b0;
	Node0x12464b0 -> Node0x1246520;
	Node0x1246520 -> Node0x1246590;
	Node0x1246590 -> Node0x1246600;
	Node0x1246600 -> Node0x11e6268;
	Node0x11e6268 -> Node0x1246aa0;
	Node0x1246aa0 -> Node0x1246af0;
edge [color=red]
	Node0x1245bf0 -> Node0x1245cb0;
	Node0x1245bf0 -> Node0x1245d20;
	Node0x1245d90 -> Node0x1245e00;
	Node0x1245e00 -> Node0x1245ea0;
	Node0x1245bf0 -> Node0x1245f80;
	Node0x1245d20 -> Node0x1246020;
	Node0x1246020 -> Node0x12460c0;
	Node0x1245d90 -> Node0x1246130;
	Node0x1245f80 -> Node0x12461a0;
	Node0x1246210 -> Node0x1246280;
	Node0x1246280 -> Node0x12462f0;
	Node0x1245cb0 -> Node0x12462f0;
	Node0x12462f0 -> Node0x1246360;
	Node0x1245d20 -> Node0x1246360;
	Node0x1246360 -> Node0x12463d0;
	Node0x1245f10 -> Node0x12463d0;
	Node0x12463d0 -> Node0x1246440;
	Node0x1246130 -> Node0x1246440;
	Node0x1246440 -> Node0x12464b0;
	Node0x12461a0 -> Node0x12464b0;
	Node0x12464b0 -> Node0x1246520;
	Node0x1245ea0 -> Node0x1246520;
	Node0x1246520 -> Node0x1246590;
	Node0x12460c0 -> Node0x1246590;
	Node0x1245b50 -> Node0x1246600;
	Node0x1246590 -> Node0x1246600;
	Node0x1246600 -> Node0x11e6268;
	Node0x11e6268 -> Node0x1246aa0;
}
