digraph "DFG for'crackme' function" {
	Node0x236eac0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x236eb30[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x236ebf0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x236ec60[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x236ecd0[shape=record, label="  %7 = shl i32 %5, 1"];
	Node0x236ed70[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x236ee10[shape=record, label="  %9 = shl i32 %6, 2"];
	Node0x236eeb0[shape=record, label="  %10 = xor i32 %9, -4"];
	Node0x236ef20[shape=record, label="  %11 = and i32 %3, %0"];
	Node0x236efc0[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x236f030[shape=record, label="  %13 = shl i32 %4, 1"];
	Node0x236f0a0[shape=record, label="  %14 = sub i32 2, %1"];
	Node0x236f110[shape=record, label="  %15 = add i32 %14, %4"];
	Node0x236f180[shape=record, label="  %16 = sub i32 %15, %5"];
	Node0x236f1f0[shape=record, label="  %17 = add i32 %16, %6"];
	Node0x236f260[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x236f2d0[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x236f340[shape=record, label="  %20 = add i32 %19, %8"];
	Node0x236f3b0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x236f420[shape=record, label="  %22 = icmp eq i32 %21, %3"];
	Node0x230f268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x236f8c0[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0x236f910[shape=record, label="  ret void"];
	Node0x236eac0 -> Node0x236eb30;
	Node0x236eb30 -> Node0x236ebf0;
	Node0x236ebf0 -> Node0x236ec60;
	Node0x236ec60 -> Node0x236ecd0;
	Node0x236ecd0 -> Node0x236ed70;
	Node0x236ed70 -> Node0x236ee10;
	Node0x236ee10 -> Node0x236eeb0;
	Node0x236eeb0 -> Node0x236ef20;
	Node0x236ef20 -> Node0x236efc0;
	Node0x236efc0 -> Node0x236f030;
	Node0x236f030 -> Node0x236f0a0;
	Node0x236f0a0 -> Node0x236f110;
	Node0x236f110 -> Node0x236f180;
	Node0x236f180 -> Node0x236f1f0;
	Node0x236f1f0 -> Node0x236f260;
	Node0x236f260 -> Node0x236f2d0;
	Node0x236f2d0 -> Node0x236f340;
	Node0x236f340 -> Node0x236f3b0;
	Node0x236f3b0 -> Node0x236f420;
	Node0x236f420 -> Node0x230f268;
	Node0x230f268 -> Node0x236f8c0;
	Node0x236f8c0 -> Node0x236f910;
edge [color=red]
	Node0x236eac0 -> Node0x236ec60;
	Node0x236ebf0 -> Node0x236ecd0;
	Node0x236ecd0 -> Node0x236ed70;
	Node0x236ec60 -> Node0x236ee10;
	Node0x236ee10 -> Node0x236eeb0;
	Node0x236eac0 -> Node0x236ef20;
	Node0x236ef20 -> Node0x236efc0;
	Node0x236eb30 -> Node0x236f030;
	Node0x236f0a0 -> Node0x236f110;
	Node0x236eb30 -> Node0x236f110;
	Node0x236f110 -> Node0x236f180;
	Node0x236ebf0 -> Node0x236f180;
	Node0x236f180 -> Node0x236f1f0;
	Node0x236ec60 -> Node0x236f1f0;
	Node0x236f1f0 -> Node0x236f260;
	Node0x236efc0 -> Node0x236f260;
	Node0x236f260 -> Node0x236f2d0;
	Node0x236f030 -> Node0x236f2d0;
	Node0x236f2d0 -> Node0x236f340;
	Node0x236ed70 -> Node0x236f340;
	Node0x236f340 -> Node0x236f3b0;
	Node0x236eeb0 -> Node0x236f3b0;
	Node0x236f3b0 -> Node0x236f420;
	Node0x236eac0 -> Node0x236f420;
	Node0x236f420 -> Node0x230f268;
	Node0x230f268 -> Node0x236f8c0;
}
