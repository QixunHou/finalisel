; ModuleID = '../.././c_source_file/0519_path_condition_crackme.c'
source_filename = "../.././c_source_file/0519_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = xor i32 %3, -1
  %8 = or i32 %7, %4
  %9 = xor i32 %1, -1
  %10 = or i32 %9, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %1
  %13 = or i32 %12, %11
  %14 = shl i32 %13, 1
  %15 = xor i32 %2, %0
  %16 = xor i32 %15, -1
  %17 = or i32 %15, %1
  %18 = add i32 %17, %8
  %19 = add i32 %18, %14
  %20 = and i32 %4, %3
  %21 = shl i32 %3, 1
  %22 = or i32 %6, %3
  %23 = or i32 %4, %3
  %24 = xor i32 %7, %4
  %25 = shl i32 %23, 1
  %26 = xor i32 %25, -2
  %27 = xor i32 %2, -1
  %28 = or i32 %27, %0
  %29 = xor i32 %28, -1
  %30 = or i32 %29, %9
  %31 = or i32 %2, %0
  %32 = xor i32 %31, -1
  %33 = xor i32 %1, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %32, %34
  %36 = and i32 %27, %0
  %37 = or i32 %36, %9
  %38 = or i32 %1, %0
  %39 = xor i32 %38, %2
  %40 = or i32 %36, %34
  %41 = xor i32 %0, -1
  %42 = and i32 %9, %2
  %43 = and i32 %42, %41
  %44 = or i32 %12, %41
  %45 = xor i32 %43, %44
  %46 = and i32 %28, %1
  %47 = or i32 %27, %1
  %48 = or i32 %47, %41
  %49 = xor i32 %38, -1
  %50 = xor i32 %12, -1
  %51 = or i32 %50, %49
  %52 = and i32 %1, %0
  %53 = xor i32 %28, %52
  %54 = xor i32 %47, -1
  %55 = or i32 %52, %54
  %56 = and i32 %2, %0
  %57 = xor i32 %56, -1
  %58 = and i32 %42, %0
  %59 = or i32 %12, %0
  %60 = xor i32 %58, %59
  %61 = or i32 %33, %16
  %62 = and i32 %27, %1
  %63 = xor i32 %62, -1
  %64 = or i32 %63, %41
  %65 = and i32 %28, %9
  %66 = or i32 %36, %54
  %67 = or i32 %2, %1
  %68 = xor i32 %67, -1
  %69 = or i32 %68, %41
  %70 = xor i32 %63, %0
  %71 = and i32 %9, %0
  %72 = or i32 %62, %71
  %73 = or i32 %33, %2
  %74 = and i32 %2, %1
  %75 = or i32 %36, %74
  %76 = shl i32 %75, 1
  %77 = xor i32 %52, -1
  %78 = xor i32 %77, %2
  %79 = or i32 %71, %27
  %80 = xor i32 %36, -1
  %81 = and i32 %33, %80
  %82 = xor i32 %71, -1
  %83 = and i32 %12, %82
  %84 = or i32 %52, %32
  %85 = shl i32 %84, 1
  %86 = and i32 %80, %9
  %87 = and i32 %82, %2
  %88 = and i32 %34, %2
  %89 = shl i32 %88, 1
  %90 = and i32 %38, %27
  %91 = and i32 %77, %2
  %92 = xor i32 %49, %2
  %93 = and i32 %47, %41
  %94 = xor i32 %32, %1
  %95 = and i32 %16, %34
  %96 = shl i32 %95, 1
  %97 = or i32 %9, %2
  %98 = xor i32 %97, %0
  %99 = xor i32 %98, -1
  %100 = xor i32 %58, %99
  %101 = or i32 %63, %0
  %102 = and i32 %63, %41
  %103 = and i32 %33, %16
  %104 = xor i32 %71, %2
  %105 = xor i32 %12, %0
  %106 = xor i32 %36, %1
  %107 = and i32 %74, %41
  %108 = and i32 %12, %0
  %109 = or i32 %107, %108
  %110 = and i32 %12, %10
  %111 = or i32 %52, %27
  %112 = or i32 %68, %0
  %113 = or i32 %16, %1
  %114 = or i32 %71, %16
  %115 = shl i32 %114, 1
  %116 = xor i32 %54, %0
  %117 = xor i32 %74, -1
  %118 = and i32 %117, %41
  %119 = or i32 %36, %33
  %120 = and i32 %31, %1
  %121 = add i32 %2, 1
  %122 = and i32 %31, %33
  %123 = or i32 %71, %50
  %124 = or i32 %15, %11
  %125 = or i32 %16, %11
  %126 = and i32 %80, %1
  %127 = and i32 %74, %0
  %128 = xor i32 %127, %105
  %129 = and i32 %50, %77
  %130 = or i32 %27, %34
  %131 = and i32 %57, %1
  %132 = or i32 %33, %29
  %133 = shl i32 %132, 1
  %134 = and i32 %31, %34
  %135 = and i32 %15, %10
  %136 = or i32 %74, %41
  %137 = and i32 %33, %2
  %138 = or i32 %74, %0
  %139 = and i32 %16, %77
  %140 = shl i32 %139, 1
  %141 = or i32 %27, %49
  %142 = and i32 %57, %34
  %143 = or i32 %58, %98
  %144 = shl i32 %143, 1
  %145 = or i32 %15, %9
  %146 = and i32 %38, %50
  %147 = and i32 %27, %34
  %148 = or i32 %56, %62
  %149 = or i32 %52, %29
  %150 = or i32 %49, %2
  %151 = or i32 %15, %71
  %152 = or i32 %56, %11
  %153 = and i32 %50, %41
  %154 = xor i32 %47, %0
  %155 = and i32 %12, %41
  %156 = or i32 %127, %155
  %157 = xor i32 %155, 2147483647
  %158 = xor i32 %157, %127
  %159 = shl i32 %158, 1
  %160 = xor i32 %57, %1
  %161 = and i32 %15, %9
  %162 = shl i32 %161, 1
  %163 = or i32 %56, %1
  %164 = or i32 %34, %2
  %165 = or i32 %50, %41
  %166 = xor i32 %44, -1
  %167 = or i32 %43, %166
  %168 = xor i32 %11, %2
  %169 = add i32 %15, 1
  %170 = shl i32 %68, 1
  %171 = or i32 %117, %0
  %172 = shl i32 %171, 1
  %173 = xor i32 %52, %2
  %174 = or i32 %36, %1
  %175 = and i32 %50, %82
  %176 = and i32 %27, %82
  %177 = shl i32 %176, 1
  %178 = or i32 %16, %9
  %179 = or i32 %71, %2
  %180 = shl i32 %179, 1
  %181 = or i32 %62, %0
  %182 = and i32 %15, %38
  %183 = shl i32 %182, 2
  %184 = or i32 %50, %0
  %185 = xor i32 %28, %1
  %186 = or i32 %12, %71
  %187 = or i32 %15, %33
  %188 = and i32 %31, %9
  %189 = xor i32 %117, %0
  %190 = xor i32 %97, -1
  %191 = or i32 %190, %0
  %192 = xor i32 %58, %191
  %193 = xor i32 %80, %1
  %194 = xor i32 %31, %52
  %195 = xor i32 %36, %47
  %196 = or i32 %52, %50
  %197 = shl i32 %196, 2
  %198 = and i32 %15, %33
  %199 = add i32 %36, 1
  %200 = or i32 %16, %34
  %201 = and i32 %38, %16
  %202 = or i32 %117, %41
  %203 = or i32 %12, %52
  %204 = xor i32 %105, -1
  %205 = or i32 %127, %204
  %206 = xor i32 %71, %63
  %207 = or i32 %47, %0
  %208 = or i32 %52, %68
  %209 = xor i32 %68, %0
  %210 = or i32 %32, %1
  %211 = and i32 %33, %57
  %212 = or i32 %56, %49
  %213 = xor i32 %56, %38
  %214 = and i32 %67, %0
  %215 = shl i32 %214, 1
  %216 = and i32 %68, %41
  %217 = and i32 %62, %41
  %218 = mul i32 %217, 12
  %219 = and i32 %68, %0
  %220 = mul i32 %219, 13
  %221 = and i32 %62, %0
  %222 = mul i32 %221, 21
  %223 = and i32 %54, %41
  %224 = and i32 %54, %0
  %225 = mul i32 %224, 10
  %226 = shl i32 %127, 4
  %227 = sub i32 %223, %188
  %228 = add i32 %227, %113
  %229 = add i32 %228, %66
  %230 = mul i32 %229, 5
  %231 = sub i32 %169, %90
  %232 = add i32 %231, %216
  %233 = sub i32 %232, %60
  %234 = mul i32 %233, 3
  %235 = add i32 %23, %211
  %236 = shl i32 %235, 2
  %237 = add i32 %130, -1
  %238 = add i32 %237, %92
  %239 = add i32 %238, %73
  %240 = add i32 %239, %107
  %241 = add i32 %240, %189
  %242 = add i32 %241, %185
  %243 = add i32 %242, %131
  %244 = add i32 %243, %123
  %245 = add i32 %244, %83
  %246 = add i32 %245, %61
  %247 = add i32 %246, %48
  %248 = add i32 %247, %128
  %249 = add i32 %248, %20
  %250 = shl i32 %249, 1
  %251 = add i32 %10, 4
  %252 = sub i32 %251, %33
  %253 = add i32 %252, %121
  %254 = add i32 %253, %10
  %255 = add i32 %254, %38
  %256 = sub i32 %255, %2
  %257 = sub i32 %256, %39
  %258 = sub i32 %257, %78
  %259 = sub i32 %258, %79
  %260 = sub i32 %259, %87
  %261 = add i32 %260, %91
  %262 = sub i32 %261, %104
  %263 = sub i32 %262, %111
  %264 = sub i32 %263, %62
  %265 = add i32 %264, %47
  %266 = add i32 %265, %50
  %267 = add i32 %266, %137
  %268 = sub i32 %267, %141
  %269 = add i32 %268, %147
  %270 = sub i32 %269, %150
  %271 = sub i32 %270, %164
  %272 = add i32 %271, %168
  %273 = sub i32 %272, %173
  %274 = add i32 %273, %199
  %275 = sub i32 %274, %4
  %276 = sub i32 %275, %21
  %277 = add i32 %276, %6
  %278 = add i32 %277, %30
  %279 = add i32 %278, %35
  %280 = add i32 %279, %37
  %281 = add i32 %280, %40
  %282 = add i32 %281, %46
  %283 = add i32 %282, %51
  %284 = add i32 %283, %53
  %285 = add i32 %284, %55
  %286 = sub i32 %285, %64
  %287 = add i32 %286, %65
  %288 = sub i32 %287, %69
  %289 = add i32 %288, %70
  %290 = add i32 %289, %72
  %291 = add i32 %290, %81
  %292 = add i32 %291, %86
  %293 = sub i32 %292, %59
  %294 = sub i32 %293, %89
  %295 = add i32 %294, %93
  %296 = sub i32 %295, %94
  %297 = sub i32 %296, %101
  %298 = add i32 %297, %102
  %299 = sub i32 %298, %103
  %300 = add i32 %299, %105
  %301 = sub i32 %300, %106
  %302 = add i32 %301, %44
  %303 = sub i32 %302, %110
  %304 = sub i32 %303, %112
  %305 = add i32 %304, %116
  %306 = sub i32 %305, %118
  %307 = sub i32 %306, %119
  %308 = add i32 %307, %120
  %309 = sub i32 %308, %122
  %310 = sub i32 %309, %124
  %311 = sub i32 %310, %125
  %312 = add i32 %311, %126
  %313 = add i32 %312, %129
  %314 = add i32 %313, %134
  %315 = add i32 %314, %135
  %316 = sub i32 %315, %136
  %317 = add i32 %316, %138
  %318 = sub i32 %317, %142
  %319 = sub i32 %318, %145
  %320 = sub i32 %319, %146
  %321 = sub i32 %320, %148
  %322 = sub i32 %321, %149
  %323 = sub i32 %322, %151
  %324 = sub i32 %323, %152
  %325 = add i32 %324, %153
  %326 = add i32 %325, %154
  %327 = add i32 %326, %160
  %328 = sub i32 %327, %108
  %329 = sub i32 %328, %163
  %330 = add i32 %329, %165
  %331 = sub i32 %330, %170
  %332 = sub i32 %331, %174
  %333 = add i32 %332, %175
  %334 = sub i32 %333, %177
  %335 = add i32 %334, %178
  %336 = sub i32 %335, %180
  %337 = sub i32 %336, %181
  %338 = add i32 %337, %184
  %339 = add i32 %338, %186
  %340 = sub i32 %339, %187
  %341 = sub i32 %340, %193
  %342 = add i32 %341, %194
  %343 = sub i32 %342, %195
  %344 = add i32 %343, %198
  %345 = sub i32 %344, %200
  %346 = sub i32 %345, %201
  %347 = add i32 %346, %202
  %348 = sub i32 %347, %203
  %349 = sub i32 %348, %206
  %350 = sub i32 %349, %207
  %351 = sub i32 %350, %208
  %352 = add i32 %351, %209
  %353 = sub i32 %352, %210
  %354 = add i32 %353, %212
  %355 = add i32 %354, %213
  %356 = sub i32 %355, %22
  %357 = add i32 %356, %24
  %358 = add i32 %357, %45
  %359 = sub i32 %358, %76
  %360 = sub i32 %359, %85
  %361 = sub i32 %360, %96
  %362 = sub i32 %361, %100
  %363 = add i32 %362, %109
  %364 = sub i32 %363, %115
  %365 = sub i32 %364, %133
  %366 = sub i32 %365, %140
  %367 = add i32 %366, %156
  %368 = sub i32 %367, %162
  %369 = add i32 %368, %167
  %370 = sub i32 %369, %172
  %371 = sub i32 %370, %183
  %372 = sub i32 %371, %192
  %373 = sub i32 %372, %197
  %374 = sub i32 %373, %205
  %375 = sub i32 %374, %215
  %376 = add i32 %375, %218
  %377 = add i32 %376, %220
  %378 = add i32 %377, %222
  %379 = add i32 %378, %225
  %380 = add i32 %379, %226
  %381 = sub i32 %380, %144
  %382 = add i32 %381, %26
  %383 = sub i32 %382, %159
  %384 = add i32 %383, %236
  %385 = add i32 %384, %230
  %386 = add i32 %385, %234
  %387 = add i32 %386, %250
  %388 = icmp eq i32 %19, %387
  %389 = select i1 %388, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %390 = tail call i32 @puts(i8* nonnull dereferenceable(1) %389)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
