digraph "DFG for'crackme' function" {
	Node0x208a0c0[shape=record, label="  %5 = mul i32 %2, -2"];
	Node0x208a160[shape=record, label="  %6 = or i32 %5, 1"];
	Node0x208a1d0[shape=record, label="  %7 = add i32 %6, %1"];
	Node0x208a240[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x208a2e0[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x208a350[shape=record, label="  %10 = add i32 %7, %9"];
	Node0x208a3c0[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x208a430[shape=record, label="  %12 = and i32 %11, %1"];
	Node0x208a4a0[shape=record, label="  %13 = add i32 %12, 1"];
	Node0x208a510[shape=record, label="  %14 = or i32 %11, %1"];
	Node0x208a580[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x208a5f0[shape=record, label="  %16 = xor i32 %15, -1"];
	Node0x208a690[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x208a700[shape=record, label="  %18 = xor i32 %14, -1"];
	Node0x208a770[shape=record, label="  %19 = xor i32 %0, -1"];
	Node0x208a810[shape=record, label="  %20 = mul i32 %19, -3"];
	Node0x208a880[shape=record, label="  %21 = xor i32 %3, %0"];
	Node0x208a8f0[shape=record, label="  %22 = or i32 %3, %0"];
	Node0x208a960[shape=record, label="  %23 = and i32 %19, %3"];
	Node0x208a9d0[shape=record, label="  %24 = xor i32 %22, -1"];
	Node0x208aa70[shape=record, label="  %25 = mul i32 %24, 6"];
	Node0x208aae0[shape=record, label="  %26 = add i32 %13, %1"];
	Node0x208ab50[shape=record, label="  %27 = add i32 %26, %3"];
	Node0x208abc0[shape=record, label="  %28 = add i32 %27, %23"];
	Node0x208ac30[shape=record, label="  %29 = add i32 %28, %21"];
	Node0x208aca0[shape=record, label="  %30 = shl i32 %29, 1"];
	Node0x208ad10[shape=record, label="  %31 = add i32 %1, 5"];
	Node0x208ad80[shape=record, label="  %32 = add i32 %31, %20"];
	Node0x208b000[shape=record, label="  %33 = sub i32 %32, %14"];
	Node0x208b070[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x208b0e0[shape=record, label="  %35 = add i32 %34, %18"];
	Node0x208b150[shape=record, label="  %36 = add i32 %35, %17"];
	Node0x208b1c0[shape=record, label="  %37 = add i32 %36, %22"];
	Node0x208b230[shape=record, label="  %38 = sub i32 %37, %23"];
	Node0x208b2a0[shape=record, label="  %39 = sub i32 %38, %8"];
	Node0x208b310[shape=record, label="  %40 = add i32 %39, %25"];
	Node0x208b380[shape=record, label="  %41 = add i32 %40, %30"];
	Node0x208b3f0[shape=record, label="  %42 = icmp eq i32 %10, %41"];
	Node0x202a268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x208b890[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x208b8e0[shape=record, label="  ret void"];
	Node0x208a0c0 -> Node0x208a160;
	Node0x208a160 -> Node0x208a1d0;
	Node0x208a1d0 -> Node0x208a240;
	Node0x208a240 -> Node0x208a2e0;
	Node0x208a2e0 -> Node0x208a350;
	Node0x208a350 -> Node0x208a3c0;
	Node0x208a3c0 -> Node0x208a430;
	Node0x208a430 -> Node0x208a4a0;
	Node0x208a4a0 -> Node0x208a510;
	Node0x208a510 -> Node0x208a580;
	Node0x208a580 -> Node0x208a5f0;
	Node0x208a5f0 -> Node0x208a690;
	Node0x208a690 -> Node0x208a700;
	Node0x208a700 -> Node0x208a770;
	Node0x208a770 -> Node0x208a810;
	Node0x208a810 -> Node0x208a880;
	Node0x208a880 -> Node0x208a8f0;
	Node0x208a8f0 -> Node0x208a960;
	Node0x208a960 -> Node0x208a9d0;
	Node0x208a9d0 -> Node0x208aa70;
	Node0x208aa70 -> Node0x208aae0;
	Node0x208aae0 -> Node0x208ab50;
	Node0x208ab50 -> Node0x208abc0;
	Node0x208abc0 -> Node0x208ac30;
	Node0x208ac30 -> Node0x208aca0;
	Node0x208aca0 -> Node0x208ad10;
	Node0x208ad10 -> Node0x208ad80;
	Node0x208ad80 -> Node0x208b000;
	Node0x208b000 -> Node0x208b070;
	Node0x208b070 -> Node0x208b0e0;
	Node0x208b0e0 -> Node0x208b150;
	Node0x208b150 -> Node0x208b1c0;
	Node0x208b1c0 -> Node0x208b230;
	Node0x208b230 -> Node0x208b2a0;
	Node0x208b2a0 -> Node0x208b310;
	Node0x208b310 -> Node0x208b380;
	Node0x208b380 -> Node0x208b3f0;
	Node0x208b3f0 -> Node0x202a268;
	Node0x202a268 -> Node0x208b890;
	Node0x208b890 -> Node0x208b8e0;
edge [color=red]
	Node0x208a0c0 -> Node0x208a160;
	Node0x208a160 -> Node0x208a1d0;
	Node0x208a240 -> Node0x208a2e0;
	Node0x208a1d0 -> Node0x208a350;
	Node0x208a2e0 -> Node0x208a350;
	Node0x208a3c0 -> Node0x208a430;
	Node0x208a430 -> Node0x208a4a0;
	Node0x208a3c0 -> Node0x208a510;
	Node0x208a580 -> Node0x208a5f0;
	Node0x208a5f0 -> Node0x208a690;
	Node0x208a510 -> Node0x208a700;
	Node0x208a770 -> Node0x208a810;
	Node0x208a770 -> Node0x208a960;
	Node0x208a8f0 -> Node0x208a9d0;
	Node0x208a9d0 -> Node0x208aa70;
	Node0x208a4a0 -> Node0x208aae0;
	Node0x208aae0 -> Node0x208ab50;
	Node0x208ab50 -> Node0x208abc0;
	Node0x208a960 -> Node0x208abc0;
	Node0x208abc0 -> Node0x208ac30;
	Node0x208a880 -> Node0x208ac30;
	Node0x208ac30 -> Node0x208aca0;
	Node0x208ad10 -> Node0x208ad80;
	Node0x208a810 -> Node0x208ad80;
	Node0x208ad80 -> Node0x208b000;
	Node0x208a510 -> Node0x208b000;
	Node0x208b000 -> Node0x208b070;
	Node0x208a580 -> Node0x208b070;
	Node0x208b070 -> Node0x208b0e0;
	Node0x208a700 -> Node0x208b0e0;
	Node0x208b0e0 -> Node0x208b150;
	Node0x208a690 -> Node0x208b150;
	Node0x208b150 -> Node0x208b1c0;
	Node0x208a8f0 -> Node0x208b1c0;
	Node0x208b1c0 -> Node0x208b230;
	Node0x208a960 -> Node0x208b230;
	Node0x208b230 -> Node0x208b2a0;
	Node0x208a240 -> Node0x208b2a0;
	Node0x208b2a0 -> Node0x208b310;
	Node0x208aa70 -> Node0x208b310;
	Node0x208b310 -> Node0x208b380;
	Node0x208aca0 -> Node0x208b380;
	Node0x208a350 -> Node0x208b3f0;
	Node0x208b380 -> Node0x208b3f0;
	Node0x208b3f0 -> Node0x202a268;
	Node0x202a268 -> Node0x208b890;
}
