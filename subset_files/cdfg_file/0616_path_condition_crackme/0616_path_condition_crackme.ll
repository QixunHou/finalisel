; ModuleID = '../.././c_source_file/0616_path_condition_crackme.c'
source_filename = "../.././c_source_file/0616_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, %3
  %7 = shl i32 %6, 1
  %8 = or i32 %7, 1
  %9 = xor i32 %1, -1
  %10 = or i32 %2, %0
  %11 = and i32 %10, %9
  %12 = xor i32 %2, -1
  %13 = and i32 %9, %0
  %14 = or i32 %13, %12
  %15 = add i32 %14, %3
  %16 = add i32 %15, %11
  %17 = add i32 %16, %8
  %18 = xor i32 %4, -1
  %19 = or i32 %18, %3
  %20 = shl i32 %19, 1
  %21 = or i32 %4, %3
  %22 = and i32 %4, %3
  %23 = xor i32 %22, -1
  %24 = shl i32 %21, 3
  %25 = or i32 %24, 7
  %26 = xor i32 %20, -2
  %27 = and i32 %18, %3
  %28 = mul i32 %27, -6
  %29 = shl i32 %22, 2
  %30 = and i32 %2, %1
  %31 = and i32 %30, %0
  %32 = xor i32 %0, -1
  %33 = or i32 %2, %1
  %34 = and i32 %33, %32
  %35 = or i32 %31, %34
  %36 = xor i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %9
  %39 = or i32 %12, %1
  %40 = xor i32 %39, -1
  %41 = or i32 %40, %0
  %42 = or i32 %1, %0
  %43 = xor i32 %42, -1
  %44 = xor i32 %2, %1
  %45 = xor i32 %44, -1
  %46 = or i32 %45, %43
  %47 = shl i32 %46, 1
  %48 = and i32 %39, %32
  %49 = and i32 %12, %0
  %50 = or i32 %49, %40
  %51 = and i32 %42, %37
  %52 = and i32 %2, %0
  %53 = xor i32 %52, -1
  %54 = and i32 %53, %9
  %55 = and i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = and i32 %56, %2
  %58 = xor i32 %44, %0
  %59 = xor i32 %31, %58
  %60 = or i32 %9, %0
  %61 = xor i32 %60, -1
  %62 = or i32 %44, %61
  %63 = shl i32 %62, 1
  %64 = xor i32 %1, %0
  %65 = or i32 %52, %64
  %66 = xor i32 %10, -1
  %67 = or i32 %66, %9
  %68 = or i32 %45, %0
  %69 = xor i32 %33, %55
  %70 = or i32 %55, %12
  %71 = or i32 %49, %1
  %72 = or i32 %37, %1
  %73 = or i32 %12, %0
  %74 = xor i32 %73, %1
  %75 = xor i32 %64, -1
  %76 = or i32 %12, %75
  %77 = or i32 %37, %75
  %78 = and i32 %36, %1
  %79 = xor i32 %49, -1
  %80 = and i32 %79, %9
  %81 = or i32 %13, %45
  %82 = shl i32 %81, 1
  %83 = xor i32 %60, %2
  %84 = or i32 %52, %43
  %85 = and i32 %12, %1
  %86 = xor i32 %85, -1
  %87 = xor i32 %86, %0
  %88 = xor i32 %39, %55
  %89 = and i32 %60, %2
  %90 = or i32 %66, %75
  %91 = add i32 %85, 1
  %92 = xor i32 %73, -1
  %93 = or i32 %92, %75
  %94 = or i32 %64, %12
  %95 = shl i32 %94, 1
  %96 = and i32 %64, %79
  %97 = or i32 %37, %61
  %98 = or i32 %36, %1
  %99 = or i32 %37, %9
  %100 = and i32 %10, %75
  %101 = and i32 %37, %75
  %102 = xor i32 %61, %2
  %103 = and i32 %42, %2
  %104 = xor i32 %92, %1
  %105 = or i32 %52, %61
  %106 = add i32 %52, 1
  %107 = or i32 %55, %66
  %108 = or i32 %44, %43
  %109 = shl i32 %108, 1
  %110 = xor i32 %30, -1
  %111 = or i32 %110, %32
  %112 = or i32 %39, %32
  %113 = and i32 %39, %0
  %114 = xor i32 %13, -1
  %115 = or i32 %30, %0
  %116 = or i32 %64, %2
  %117 = and i32 %36, %9
  %118 = and i32 %36, %60
  %119 = xor i32 %33, -1
  %120 = or i32 %119, %32
  %121 = or i32 %52, %1
  %122 = and i32 %10, %1
  %123 = xor i32 %42, %2
  %124 = xor i32 %40, %0
  %125 = or i32 %49, %75
  %126 = or i32 %37, %43
  %127 = and i32 %110, %32
  %128 = or i32 %92, %9
  %129 = or i32 %33, %32
  %130 = and i32 %9, %2
  %131 = and i32 %130, %0
  %132 = or i32 %9, %2
  %133 = xor i32 %132, %0
  %134 = or i32 %131, %133
  %135 = xor i32 %49, %110
  %136 = xor i32 %49, %39
  %137 = and i32 %64, %12
  %138 = xor i32 %66, %1
  %139 = or i32 %110, %0
  %140 = xor i32 %119, %0
  %141 = shl i32 %140, 1
  %142 = and i32 %44, %60
  %143 = and i32 %60, %12
  %144 = or i32 %45, %61
  %145 = and i32 %64, %2
  %146 = shl i32 %145, 1
  %147 = and i32 %37, %1
  %148 = or i32 %12, %61
  %149 = or i32 %52, %119
  %150 = shl i32 %149, 1
  %151 = or i32 %92, %1
  %152 = shl i32 %56, 2
  %153 = and i32 %64, %37
  %154 = shl i32 %153, 1
  %155 = xor i32 %52, %33
  %156 = or i32 %44, %13
  %157 = or i32 %36, %9
  %158 = xor i32 %33, %0
  %159 = xor i32 %31, -1
  %160 = xor i32 %158, %159
  %161 = and i32 %44, %32
  %162 = shl i32 %161, 1
  %163 = or i32 %40, %32
  %164 = or i32 %55, %119
  %165 = or i32 %52, %85
  %166 = xor i32 %45, %0
  %167 = or i32 %61, %2
  %168 = and i32 %73, %9
  %169 = or i32 %36, %61
  %170 = or i32 %36, %13
  %171 = xor i32 %73, %55
  %172 = or i32 %31, %161
  %173 = and i32 %30, %32
  %174 = and i32 %44, %0
  %175 = or i32 %173, %174
  %176 = and i32 %42, %12
  %177 = and i32 %130, %32
  %178 = or i32 %44, %32
  %179 = xor i32 %177, %178
  %180 = xor i32 %10, %1
  %181 = or i32 %33, %0
  %182 = or i32 %85, %0
  %183 = xor i32 %52, %1
  %184 = and i32 %114, %2
  %185 = and i32 %110, %0
  %186 = and i32 %36, %114
  %187 = and i32 %12, %75
  %188 = and i32 %12, %56
  %189 = and i32 %36, %64
  %190 = xor i32 %13, %110
  %191 = add i32 %39, 1
  %192 = and i32 %86, %0
  %193 = shl i32 %43, 1
  %194 = or i32 %86, %0
  %195 = and i32 %36, %75
  %196 = and i32 %73, %75
  %197 = and i32 %44, %42
  %198 = or i32 %12, %43
  %199 = and i32 %73, %64
  %200 = or i32 %119, %0
  %201 = or i32 %64, %92
  %202 = xor i32 %39, %0
  %203 = or i32 %52, %9
  %204 = xor i32 %52, %60
  %205 = xor i32 %110, %0
  %206 = xor i32 %43, %2
  %207 = or i32 %66, %1
  %208 = and i32 %64, %53
  %209 = or i32 %131, %58
  %210 = or i32 %55, %92
  %211 = xor i32 %178, -1
  %212 = or i32 %177, %211
  %213 = or i32 %64, %66
  %214 = or i32 %36, %43
  %215 = and i32 %132, %0
  %216 = xor i32 %215, 2147483647
  %217 = xor i32 %216, %177
  %218 = shl i32 %217, 1
  %219 = and i32 %53, %1
  %220 = or i32 %36, %64
  %221 = or i32 %55, %2
  %222 = and i32 %12, %114
  %223 = and i32 %37, %114
  %224 = shl i32 %61, 2
  %225 = or i32 %44, %55
  %226 = or i32 %44, %0
  %227 = xor i32 %131, %226
  %228 = xor i32 %174, 2147483647
  %229 = xor i32 %228, %173
  %230 = shl i32 %229, 1
  %231 = xor i32 %226, -1
  %232 = or i32 %131, %231
  %233 = or i32 %36, %55
  %234 = shl i32 %233, 1
  %235 = and i32 %45, %32
  %236 = and i32 %44, %114
  %237 = xor i32 %56, %2
  %238 = and i32 %86, %32
  %239 = or i32 %49, %9
  %240 = or i32 %39, %0
  %241 = xor i32 %13, %2
  %242 = add i32 %0, 1
  %243 = or i32 %30, %32
  %244 = or i32 %49, %30
  %245 = and i32 %42, %45
  %246 = xor i32 %114, %2
  %247 = xor i32 %55, %2
  %248 = xor i32 %58, -1
  %249 = or i32 %31, %248
  %250 = or i32 %64, %37
  %251 = shl i32 %250, 1
  %252 = xor i32 %52, %86
  %253 = and i32 %36, %56
  %254 = xor i32 %10, %55
  %255 = shl i32 %254, 1
  %256 = and i32 %33, %0
  %257 = shl i32 %256, 1
  %258 = or i32 %45, %32
  %259 = or i32 %55, %40
  %260 = shl i32 %259, 1
  %261 = xor i32 %85, %0
  %262 = and i32 %45, %0
  %263 = or i32 %173, %256
  %264 = or i32 %30, %13
  %265 = xor i32 %161, %159
  %266 = add i32 %10, 1
  %267 = xor i32 %131, %248
  %268 = and i32 %53, %75
  %269 = and i32 %79, %75
  %270 = or i32 %86, %32
  %271 = and i32 %119, %32
  %272 = and i32 %85, %32
  %273 = and i32 %119, %0
  %274 = and i32 %85, %0
  %275 = mul i32 %274, -28
  %276 = and i32 %40, %32
  %277 = shl i32 %276, 4
  %278 = and i32 %40, %0
  %279 = mul i32 %278, -11
  %280 = mul i32 %31, -19
  %281 = add i32 %247, -1
  %282 = add i32 %281, %206
  %283 = add i32 %282, %188
  %284 = add i32 %283, %184
  %285 = add i32 %284, %137
  %286 = add i32 %285, %30
  %287 = add i32 %286, %83
  %288 = add i32 %287, %182
  %289 = add i32 %288, %171
  %290 = add i32 %289, %168
  %291 = add i32 %290, %147
  %292 = add i32 %291, %115
  %293 = add i32 %292, %111
  %294 = add i32 %293, %84
  %295 = add i32 %294, %72
  %296 = add i32 %295, %209
  %297 = add i32 %296, %263
  %298 = add i32 %297, %134
  %299 = shl i32 %298, 1
  %300 = sub i32 %200, %202
  %301 = sub i32 %300, %139
  %302 = add i32 %301, %107
  %303 = mul i32 %302, 5
  %304 = add i32 %173, %271
  %305 = mul i32 %304, -9
  %306 = add i32 %174, %100
  %307 = shl i32 %306, 2
  %308 = add i32 %137, %272
  %309 = add i32 %308, %273
  %310 = add i32 %309, %264
  %311 = add i32 %310, %18
  %312 = mul i32 %311, 3
  %313 = add i32 %242, %0
  %314 = add i32 %313, 1
  %315 = sub i32 %314, %13
  %316 = add i32 %315, %114
  %317 = add i32 %316, %60
  %318 = sub i32 %317, %55
  %319 = sub i32 %318, %57
  %320 = sub i32 %319, %70
  %321 = add i32 %320, %10
  %322 = sub i32 %321, %76
  %323 = sub i32 %322, %89
  %324 = add i32 %323, %91
  %325 = add i32 %324, %39
  %326 = add i32 %325, %102
  %327 = add i32 %326, %103
  %328 = add i32 %327, %106
  %329 = sub i32 %328, %116
  %330 = sub i32 %329, %123
  %331 = add i32 %330, %37
  %332 = add i32 %331, %143
  %333 = sub i32 %332, %148
  %334 = sub i32 %333, %152
  %335 = add i32 %334, %45
  %336 = sub i32 %335, %167
  %337 = add i32 %336, %176
  %338 = sub i32 %337, %52
  %339 = sub i32 %338, %187
  %340 = add i32 %339, %191
  %341 = sub i32 %340, %193
  %342 = sub i32 %341, %198
  %343 = sub i32 %342, %33
  %344 = add i32 %343, %92
  %345 = sub i32 %344, %221
  %346 = add i32 %345, %222
  %347 = sub i32 %346, %224
  %348 = sub i32 %347, %237
  %349 = sub i32 %348, %36
  %350 = sub i32 %349, %241
  %351 = add i32 %350, %246
  %352 = add i32 %351, %266
  %353 = add i32 %352, %38
  %354 = add i32 %353, %41
  %355 = add i32 %354, %48
  %356 = sub i32 %355, %50
  %357 = add i32 %356, %51
  %358 = sub i32 %357, %54
  %359 = add i32 %358, %65
  %360 = sub i32 %359, %67
  %361 = add i32 %360, %68
  %362 = add i32 %361, %69
  %363 = sub i32 %362, %71
  %364 = sub i32 %363, %74
  %365 = add i32 %364, %77
  %366 = add i32 %365, %78
  %367 = sub i32 %366, %80
  %368 = add i32 %367, %87
  %369 = sub i32 %368, %88
  %370 = add i32 %369, %90
  %371 = add i32 %370, %93
  %372 = sub i32 %371, %95
  %373 = sub i32 %372, %96
  %374 = sub i32 %373, %97
  %375 = sub i32 %374, %98
  %376 = sub i32 %375, %99
  %377 = add i32 %376, %101
  %378 = add i32 %377, %104
  %379 = add i32 %378, %105
  %380 = add i32 %379, %112
  %381 = sub i32 %380, %113
  %382 = sub i32 %381, %117
  %383 = sub i32 %382, %118
  %384 = add i32 %383, %120
  %385 = add i32 %384, %121
  %386 = add i32 %385, %122
  %387 = sub i32 %386, %124
  %388 = sub i32 %387, %125
  %389 = add i32 %388, %126
  %390 = sub i32 %389, %127
  %391 = sub i32 %390, %128
  %392 = add i32 %391, %129
  %393 = add i32 %392, %135
  %394 = add i32 %393, %136
  %395 = add i32 %394, %138
  %396 = sub i32 %395, %34
  %397 = add i32 %396, %142
  %398 = add i32 %397, %144
  %399 = sub i32 %398, %146
  %400 = sub i32 %399, %151
  %401 = add i32 %400, %155
  %402 = add i32 %401, %156
  %403 = add i32 %402, %157
  %404 = add i32 %403, %163
  %405 = sub i32 %404, %164
  %406 = add i32 %405, %165
  %407 = add i32 %406, %166
  %408 = add i32 %407, %169
  %409 = add i32 %408, %170
  %410 = sub i32 %409, %180
  %411 = sub i32 %410, %181
  %412 = sub i32 %411, %183
  %413 = sub i32 %412, %185
  %414 = add i32 %413, %58
  %415 = sub i32 %414, %186
  %416 = sub i32 %415, %189
  %417 = sub i32 %416, %190
  %418 = add i32 %417, %192
  %419 = add i32 %418, %194
  %420 = sub i32 %419, %195
  %421 = sub i32 %420, %196
  %422 = add i32 %421, %197
  %423 = sub i32 %422, %199
  %424 = add i32 %423, %201
  %425 = add i32 %424, %203
  %426 = sub i32 %425, %204
  %427 = sub i32 %426, %205
  %428 = add i32 %427, %207
  %429 = sub i32 %428, %208
  %430 = sub i32 %429, %210
  %431 = add i32 %430, %213
  %432 = add i32 %431, %214
  %433 = add i32 %432, %219
  %434 = add i32 %433, %158
  %435 = add i32 %434, %220
  %436 = sub i32 %435, %223
  %437 = sub i32 %436, %225
  %438 = add i32 %437, %235
  %439 = add i32 %438, %236
  %440 = sub i32 %439, %238
  %441 = sub i32 %440, %239
  %442 = add i32 %441, %240
  %443 = sub i32 %442, %243
  %444 = add i32 %443, %244
  %445 = sub i32 %444, %245
  %446 = add i32 %445, %252
  %447 = add i32 %446, %253
  %448 = sub i32 %447, %258
  %449 = sub i32 %448, %261
  %450 = sub i32 %449, %262
  %451 = add i32 %450, %178
  %452 = add i32 %451, %268
  %453 = add i32 %452, %269
  %454 = add i32 %453, %270
  %455 = add i32 %454, %21
  %456 = add i32 %455, %23
  %457 = sub i32 %456, %35
  %458 = sub i32 %457, %47
  %459 = add i32 %458, %59
  %460 = sub i32 %459, %63
  %461 = sub i32 %460, %82
  %462 = sub i32 %461, %109
  %463 = sub i32 %462, %141
  %464 = sub i32 %463, %150
  %465 = sub i32 %464, %154
  %466 = add i32 %465, %160
  %467 = sub i32 %466, %162
  %468 = sub i32 %467, %172
  %469 = sub i32 %468, %175
  %470 = add i32 %469, %179
  %471 = sub i32 %470, %212
  %472 = add i32 %471, %227
  %473 = add i32 %472, %232
  %474 = sub i32 %473, %234
  %475 = add i32 %474, %249
  %476 = sub i32 %475, %251
  %477 = sub i32 %476, %255
  %478 = sub i32 %477, %257
  %479 = sub i32 %478, %260
  %480 = add i32 %479, %265
  %481 = add i32 %480, %267
  %482 = add i32 %481, %275
  %483 = add i32 %482, %277
  %484 = add i32 %483, %279
  %485 = add i32 %484, %280
  %486 = add i32 %485, %20
  %487 = add i32 %486, %28
  %488 = sub i32 %487, %29
  %489 = add i32 %488, %305
  %490 = add i32 %489, %307
  %491 = add i32 %490, %25
  %492 = sub i32 %491, %26
  %493 = sub i32 %492, %218
  %494 = sub i32 %493, %230
  %495 = add i32 %494, %303
  %496 = add i32 %495, %312
  %497 = add i32 %496, %299
  %498 = icmp eq i32 %17, %497
  %499 = select i1 %498, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %500 = tail call i32 @puts(i8* nonnull dereferenceable(1) %499)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
