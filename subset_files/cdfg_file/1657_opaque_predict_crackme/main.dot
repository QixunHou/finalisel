digraph "DFG for'main' function" {
	Node0xc7b368[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xc7b3e8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xc7b478[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0xc7b8d8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0xc7b9b8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0xc7bad8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xc7bd10[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0xc7bdc8[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xc7cd38[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xc7d3c0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0xc7d430[shape=record, label="  %9 = or i32 %6, %8"];
	Node0xc7d4a0[shape=record, label="  %10 = or i32 %7, %6"];
	Node0xc7d510[shape=record, label="  %11 = shl i32 %9, 1"];
	Node0xc7d580[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xc7d5f0[shape=record, label="  %13 = add i32 %9, %6"];
	Node0xc7d660[shape=record, label="  %14 = sub i32 %13, %10"];
	Node0xc7d6d0[shape=record, label="  %15 = add i32 %14, %12"];
	Node0xc7d740[shape=record, label="  %16 = icmp eq i32 %15, -1"];
	Node0xc1c9d8[shape=record, label="  %17 = select i1 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc7d7d0[shape=record, label="  %18 = call i32 @puts(i8* nonnull dereferenceable(1) %17) #5"];
	Node0xc7da28[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0xc7db88[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0xc7dc48[shape=record, label="  ret i32 0"];
	Node0xc7b368 -> Node0xc7b3e8;
	Node0xc7b3e8 -> Node0xc7b478;
	Node0xc7b478 -> Node0xc7b8d8;
	Node0xc7b8d8 -> Node0xc7b9b8;
	Node0xc7b9b8 -> Node0xc7bad8;
	Node0xc7bad8 -> Node0xc7bd10;
	Node0xc7bd10 -> Node0xc7bdc8;
	Node0xc7bdc8 -> Node0xc7cd38;
	Node0xc7cd38 -> Node0xc7d3c0;
	Node0xc7d3c0 -> Node0xc7d430;
	Node0xc7d430 -> Node0xc7d4a0;
	Node0xc7d4a0 -> Node0xc7d510;
	Node0xc7d510 -> Node0xc7d580;
	Node0xc7d580 -> Node0xc7d5f0;
	Node0xc7d5f0 -> Node0xc7d660;
	Node0xc7d660 -> Node0xc7d6d0;
	Node0xc7d6d0 -> Node0xc7d740;
	Node0xc7d740 -> Node0xc1c9d8;
	Node0xc1c9d8 -> Node0xc7d7d0;
	Node0xc7d7d0 -> Node0xc7da28;
	Node0xc7da28 -> Node0xc7db88;
	Node0xc7db88 -> Node0xc7dc48;
edge [color=red]
	Node0xc7b368 -> Node0xc7b478;
	Node0xc7b478 -> Node0xc7b8d8;
	Node0xc7b3e8 -> Node0xc7b9b8;
	Node0xc7b9b8 -> Node0xc7bad8;
	Node0xc7b368 -> Node0xc7bd10;
	Node0xc7b3e8 -> Node0xc7bd10;
	Node0xc7b368 -> Node0xc7bdc8;
	Node0xc7b3e8 -> Node0xc7cd38;
	Node0xc7cd38 -> Node0xc7d3c0;
	Node0xc7bdc8 -> Node0xc7d430;
	Node0xc7d3c0 -> Node0xc7d430;
	Node0xc7cd38 -> Node0xc7d4a0;
	Node0xc7bdc8 -> Node0xc7d4a0;
	Node0xc7d430 -> Node0xc7d510;
	Node0xc7d510 -> Node0xc7d580;
	Node0xc7d430 -> Node0xc7d5f0;
	Node0xc7bdc8 -> Node0xc7d5f0;
	Node0xc7d5f0 -> Node0xc7d660;
	Node0xc7d4a0 -> Node0xc7d660;
	Node0xc7d660 -> Node0xc7d6d0;
	Node0xc7d580 -> Node0xc7d6d0;
	Node0xc7d6d0 -> Node0xc7d740;
	Node0xc7d740 -> Node0xc1c9d8;
	Node0xc1c9d8 -> Node0xc7d7d0;
	Node0xc7b9b8 -> Node0xc7da28;
	Node0xc7b478 -> Node0xc7db88;
}
