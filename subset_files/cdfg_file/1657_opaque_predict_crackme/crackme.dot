digraph "DFG for'crackme' function" {
	Node0xc7a8b0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xc7a920[shape=record, label="  %4 = or i32 %3, %0"];
	Node0xc7a9e0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0xc7aa50[shape=record, label="  %6 = shl i32 %4, 1"];
	Node0xc7aaf0[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0xc7ab60[shape=record, label="  %8 = add i32 %4, %0"];
	Node0xc7abd0[shape=record, label="  %9 = sub i32 %8, %5"];
	Node0xc7ac40[shape=record, label="  %10 = add i32 %9, %7"];
	Node0xc7acb0[shape=record, label="  %11 = icmp eq i32 %10, -1"];
	Node0xc1b388[shape=record, label="  %12 = select i1 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc7b150[shape=record, label="  %13 = tail call i32 @puts(i8* nonnull dereferenceable(1) %12)"];
	Node0xc7b1a0[shape=record, label="  ret void"];
	Node0xc7a8b0 -> Node0xc7a920;
	Node0xc7a920 -> Node0xc7a9e0;
	Node0xc7a9e0 -> Node0xc7aa50;
	Node0xc7aa50 -> Node0xc7aaf0;
	Node0xc7aaf0 -> Node0xc7ab60;
	Node0xc7ab60 -> Node0xc7abd0;
	Node0xc7abd0 -> Node0xc7ac40;
	Node0xc7ac40 -> Node0xc7acb0;
	Node0xc7acb0 -> Node0xc1b388;
	Node0xc1b388 -> Node0xc7b150;
	Node0xc7b150 -> Node0xc7b1a0;
edge [color=red]
	Node0xc7a8b0 -> Node0xc7a920;
	Node0xc7a920 -> Node0xc7aa50;
	Node0xc7aa50 -> Node0xc7aaf0;
	Node0xc7a920 -> Node0xc7ab60;
	Node0xc7ab60 -> Node0xc7abd0;
	Node0xc7a9e0 -> Node0xc7abd0;
	Node0xc7abd0 -> Node0xc7ac40;
	Node0xc7aaf0 -> Node0xc7ac40;
	Node0xc7ac40 -> Node0xc7acb0;
	Node0xc7acb0 -> Node0xc1b388;
	Node0xc1b388 -> Node0xc7b150;
}
