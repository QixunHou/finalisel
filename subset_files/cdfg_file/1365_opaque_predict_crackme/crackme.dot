digraph "DFG for'crackme' function" {
	Node0x98ff90[shape=record, label="  %4 = xor i32 %2, -1"];
	Node0x990050[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x9900c0[shape=record, label="  %6 = and i32 %5, %2"];
	Node0x990130[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x9901a0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x990210[shape=record, label="  %9 = or i32 %6, %8"];
	Node0x990280[shape=record, label="  %10 = and i32 %4, %0"];
	Node0x9902f0[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x990360[shape=record, label="  %12 = or i32 %10, %11"];
	Node0x9903d0[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x990440[shape=record, label="  %14 = or i32 %2, %0"];
	Node0x9904b0[shape=record, label="  %15 = xor i32 %14, %13"];
	Node0x990520[shape=record, label="  %16 = or i32 %5, %1"];
	Node0x990590[shape=record, label="  %17 = and i32 %16, %2"];
	Node0x990600[shape=record, label="  %18 = or i32 %10, %7"];
	Node0x990670[shape=record, label="  %19 = or i32 %10, %1"];
	Node0x9906e0[shape=record, label="  %20 = or i32 %2, %1"];
	Node0x990750[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x9907c0[shape=record, label="  %22 = and i32 %21, %5"];
	Node0x990830[shape=record, label="  %23 = and i32 %4, %1"];
	Node0x9908a0[shape=record, label="  %24 = and i32 %23, %5"];
	Node0x990910[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x990980[shape=record, label="  %26 = and i32 %21, %0"];
	Node0x9909f0[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x990a60[shape=record, label="  %28 = and i32 %23, %0"];
	Node0x990ad0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x990b40[shape=record, label="  %30 = xor i32 %1, -1"];
	Node0x990bb0[shape=record, label="  %31 = and i32 %6, %30"];
	Node0x990c50[shape=record, label="  %32 = mul i32 %31, 3"];
	Node0x990ed0[shape=record, label="  %33 = add i32 %15, %17"];
	Node0x990f40[shape=record, label="  %34 = sub i32 %12, %33"];
	Node0x990fb0[shape=record, label="  %35 = add i32 %34, %18"];
	Node0x991020[shape=record, label="  %36 = add i32 %35, %19"];
	Node0x991090[shape=record, label="  %37 = add i32 %36, %22"];
	Node0x991100[shape=record, label="  %38 = sub i32 %37, %25"];
	Node0x991170[shape=record, label="  %39 = sub i32 %38, %27"];
	Node0x9911e0[shape=record, label="  %40 = sub i32 %39, %29"];
	Node0x991250[shape=record, label="  %41 = add i32 %40, %32"];
	Node0x9912c0[shape=record, label="  %42 = icmp eq i32 %9, %41"];
	Node0x930268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x991760[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x9917b0[shape=record, label="  ret void"];
	Node0x98ff90 -> Node0x990050;
	Node0x990050 -> Node0x9900c0;
	Node0x9900c0 -> Node0x990130;
	Node0x990130 -> Node0x9901a0;
	Node0x9901a0 -> Node0x990210;
	Node0x990210 -> Node0x990280;
	Node0x990280 -> Node0x9902f0;
	Node0x9902f0 -> Node0x990360;
	Node0x990360 -> Node0x9903d0;
	Node0x9903d0 -> Node0x990440;
	Node0x990440 -> Node0x9904b0;
	Node0x9904b0 -> Node0x990520;
	Node0x990520 -> Node0x990590;
	Node0x990590 -> Node0x990600;
	Node0x990600 -> Node0x990670;
	Node0x990670 -> Node0x9906e0;
	Node0x9906e0 -> Node0x990750;
	Node0x990750 -> Node0x9907c0;
	Node0x9907c0 -> Node0x990830;
	Node0x990830 -> Node0x9908a0;
	Node0x9908a0 -> Node0x990910;
	Node0x990910 -> Node0x990980;
	Node0x990980 -> Node0x9909f0;
	Node0x9909f0 -> Node0x990a60;
	Node0x990a60 -> Node0x990ad0;
	Node0x990ad0 -> Node0x990b40;
	Node0x990b40 -> Node0x990bb0;
	Node0x990bb0 -> Node0x990c50;
	Node0x990c50 -> Node0x990ed0;
	Node0x990ed0 -> Node0x990f40;
	Node0x990f40 -> Node0x990fb0;
	Node0x990fb0 -> Node0x991020;
	Node0x991020 -> Node0x991090;
	Node0x991090 -> Node0x991100;
	Node0x991100 -> Node0x991170;
	Node0x991170 -> Node0x9911e0;
	Node0x9911e0 -> Node0x991250;
	Node0x991250 -> Node0x9912c0;
	Node0x9912c0 -> Node0x930268;
	Node0x930268 -> Node0x991760;
	Node0x991760 -> Node0x9917b0;
edge [color=red]
	Node0x990050 -> Node0x9900c0;
	Node0x990130 -> Node0x9901a0;
	Node0x9900c0 -> Node0x990210;
	Node0x9901a0 -> Node0x990210;
	Node0x98ff90 -> Node0x990280;
	Node0x990280 -> Node0x990360;
	Node0x9902f0 -> Node0x990360;
	Node0x990440 -> Node0x9904b0;
	Node0x9903d0 -> Node0x9904b0;
	Node0x990050 -> Node0x990520;
	Node0x990520 -> Node0x990590;
	Node0x990280 -> Node0x990600;
	Node0x990130 -> Node0x990600;
	Node0x990280 -> Node0x990670;
	Node0x9906e0 -> Node0x990750;
	Node0x990750 -> Node0x9907c0;
	Node0x990050 -> Node0x9907c0;
	Node0x98ff90 -> Node0x990830;
	Node0x990830 -> Node0x9908a0;
	Node0x990050 -> Node0x9908a0;
	Node0x9908a0 -> Node0x990910;
	Node0x990750 -> Node0x990980;
	Node0x990980 -> Node0x9909f0;
	Node0x990830 -> Node0x990a60;
	Node0x990a60 -> Node0x990ad0;
	Node0x9900c0 -> Node0x990bb0;
	Node0x990b40 -> Node0x990bb0;
	Node0x990bb0 -> Node0x990c50;
	Node0x9904b0 -> Node0x990ed0;
	Node0x990590 -> Node0x990ed0;
	Node0x990360 -> Node0x990f40;
	Node0x990ed0 -> Node0x990f40;
	Node0x990f40 -> Node0x990fb0;
	Node0x990600 -> Node0x990fb0;
	Node0x990fb0 -> Node0x991020;
	Node0x990670 -> Node0x991020;
	Node0x991020 -> Node0x991090;
	Node0x9907c0 -> Node0x991090;
	Node0x991090 -> Node0x991100;
	Node0x990910 -> Node0x991100;
	Node0x991100 -> Node0x991170;
	Node0x9909f0 -> Node0x991170;
	Node0x991170 -> Node0x9911e0;
	Node0x990ad0 -> Node0x9911e0;
	Node0x9911e0 -> Node0x991250;
	Node0x990c50 -> Node0x991250;
	Node0x990210 -> Node0x9912c0;
	Node0x991250 -> Node0x9912c0;
	Node0x9912c0 -> Node0x930268;
	Node0x930268 -> Node0x991760;
}
