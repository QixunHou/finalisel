digraph "DFG for'crackme' function" {
	Node0x4f2b70[shape=record, label="  %5 = and i32 %3, %0"];
	Node0x4f31f0[shape=record, label="  %6 = add i32 %1, 1"];
	Node0x4f3260[shape=record, label="  %7 = add i32 %6, %5"];
	Node0x4f32d0[shape=record, label="  %8 = and i32 %2, %1"];
	Node0x4f3370[shape=record, label="  %9 = xor i32 %2, -1"];
	Node0x4f33e0[shape=record, label="  %10 = or i32 %9, %1"];
	Node0x4f3450[shape=record, label="  %11 = and i32 %9, %1"];
	Node0x4f34c0[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x4f3530[shape=record, label="  %13 = xor i32 %2, %1"];
	Node0x4f35d0[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x4f3640[shape=record, label="  %15 = or i32 %2, %1"];
	Node0x4f36e0[shape=record, label="  %16 = shl i32 %10, 3"];
	Node0x4f3780[shape=record, label="  %17 = xor i32 %16, -8"];
	Node0x4f37f0[shape=record, label="  %18 = xor i32 %3, %0"];
	Node0x4f3860[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x4f38d0[shape=record, label="  %20 = xor i32 %0, -1"];
	Node0x4f3940[shape=record, label="  %21 = or i32 %20, %3"];
	Node0x4f39b0[shape=record, label="  %22 = or i32 %3, %0"];
	Node0x4f3a20[shape=record, label="  %23 = shl i32 %22, 1"];
	Node0x4f3ac0[shape=record, label="  %24 = xor i32 %23, -2"];
	Node0x4f3b30[shape=record, label="  %25 = shl i32 %21, 1"];
	Node0x4f3ba0[shape=record, label="  %26 = xor i32 %25, -2"];
	Node0x4f3c10[shape=record, label="  %27 = sub i32 %11, %2"];
	Node0x4f3c80[shape=record, label="  %28 = add i32 %27, %8"];
	Node0x4f3d20[shape=record, label="  %29 = mul i32 %28, 5"];
	Node0x4f3d90[shape=record, label="  %30 = shl i32 %3, 2"];
	Node0x4f3e00[shape=record, label="  %31 = sub i32 2, %2"];
	Node0x4f3e70[shape=record, label="  %32 = add i32 %31, %8"];
	Node0x4f40f0[shape=record, label="  %33 = sub i32 %32, %10"];
	Node0x4f4160[shape=record, label="  %34 = add i32 %33, %12"];
	Node0x4f41d0[shape=record, label="  %35 = add i32 %34, %15"];
	Node0x4f4240[shape=record, label="  %36 = sub i32 %35, %3"];
	Node0x4f42b0[shape=record, label="  %37 = sub i32 %36, %14"];
	Node0x4f4320[shape=record, label="  %38 = add i32 %37, %18"];
	Node0x4f4390[shape=record, label="  %39 = sub i32 %38, %21"];
	Node0x4f4400[shape=record, label="  %40 = add i32 %39, %17"];
	Node0x4f4470[shape=record, label="  %41 = sub i32 %40, %19"];
	Node0x4f44e0[shape=record, label="  %42 = add i32 %41, %24"];
	Node0x4f4550[shape=record, label="  %43 = add i32 %42, %26"];
	Node0x4f45c0[shape=record, label="  %44 = add i32 %43, %29"];
	Node0x4f4630[shape=record, label="  %45 = add i32 %44, %30"];
	Node0x4f46a0[shape=record, label="  %46 = icmp eq i32 %7, %45"];
	Node0x493268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x4f4b40[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x4f4b90[shape=record, label="  ret void"];
	Node0x4f2b70 -> Node0x4f31f0;
	Node0x4f31f0 -> Node0x4f3260;
	Node0x4f3260 -> Node0x4f32d0;
	Node0x4f32d0 -> Node0x4f3370;
	Node0x4f3370 -> Node0x4f33e0;
	Node0x4f33e0 -> Node0x4f3450;
	Node0x4f3450 -> Node0x4f34c0;
	Node0x4f34c0 -> Node0x4f3530;
	Node0x4f3530 -> Node0x4f35d0;
	Node0x4f35d0 -> Node0x4f3640;
	Node0x4f3640 -> Node0x4f36e0;
	Node0x4f36e0 -> Node0x4f3780;
	Node0x4f3780 -> Node0x4f37f0;
	Node0x4f37f0 -> Node0x4f3860;
	Node0x4f3860 -> Node0x4f38d0;
	Node0x4f38d0 -> Node0x4f3940;
	Node0x4f3940 -> Node0x4f39b0;
	Node0x4f39b0 -> Node0x4f3a20;
	Node0x4f3a20 -> Node0x4f3ac0;
	Node0x4f3ac0 -> Node0x4f3b30;
	Node0x4f3b30 -> Node0x4f3ba0;
	Node0x4f3ba0 -> Node0x4f3c10;
	Node0x4f3c10 -> Node0x4f3c80;
	Node0x4f3c80 -> Node0x4f3d20;
	Node0x4f3d20 -> Node0x4f3d90;
	Node0x4f3d90 -> Node0x4f3e00;
	Node0x4f3e00 -> Node0x4f3e70;
	Node0x4f3e70 -> Node0x4f40f0;
	Node0x4f40f0 -> Node0x4f4160;
	Node0x4f4160 -> Node0x4f41d0;
	Node0x4f41d0 -> Node0x4f4240;
	Node0x4f4240 -> Node0x4f42b0;
	Node0x4f42b0 -> Node0x4f4320;
	Node0x4f4320 -> Node0x4f4390;
	Node0x4f4390 -> Node0x4f4400;
	Node0x4f4400 -> Node0x4f4470;
	Node0x4f4470 -> Node0x4f44e0;
	Node0x4f44e0 -> Node0x4f4550;
	Node0x4f4550 -> Node0x4f45c0;
	Node0x4f45c0 -> Node0x4f4630;
	Node0x4f4630 -> Node0x4f46a0;
	Node0x4f46a0 -> Node0x493268;
	Node0x493268 -> Node0x4f4b40;
	Node0x4f4b40 -> Node0x4f4b90;
edge [color=red]
	Node0x4f31f0 -> Node0x4f3260;
	Node0x4f2b70 -> Node0x4f3260;
	Node0x4f3370 -> Node0x4f33e0;
	Node0x4f3370 -> Node0x4f3450;
	Node0x4f3450 -> Node0x4f34c0;
	Node0x4f3530 -> Node0x4f35d0;
	Node0x4f33e0 -> Node0x4f36e0;
	Node0x4f36e0 -> Node0x4f3780;
	Node0x4f37f0 -> Node0x4f3860;
	Node0x4f38d0 -> Node0x4f3940;
	Node0x4f39b0 -> Node0x4f3a20;
	Node0x4f3a20 -> Node0x4f3ac0;
	Node0x4f3940 -> Node0x4f3b30;
	Node0x4f3b30 -> Node0x4f3ba0;
	Node0x4f3450 -> Node0x4f3c10;
	Node0x4f3c10 -> Node0x4f3c80;
	Node0x4f32d0 -> Node0x4f3c80;
	Node0x4f3c80 -> Node0x4f3d20;
	Node0x4f3e00 -> Node0x4f3e70;
	Node0x4f32d0 -> Node0x4f3e70;
	Node0x4f3e70 -> Node0x4f40f0;
	Node0x4f33e0 -> Node0x4f40f0;
	Node0x4f40f0 -> Node0x4f4160;
	Node0x4f34c0 -> Node0x4f4160;
	Node0x4f4160 -> Node0x4f41d0;
	Node0x4f3640 -> Node0x4f41d0;
	Node0x4f41d0 -> Node0x4f4240;
	Node0x4f4240 -> Node0x4f42b0;
	Node0x4f35d0 -> Node0x4f42b0;
	Node0x4f42b0 -> Node0x4f4320;
	Node0x4f37f0 -> Node0x4f4320;
	Node0x4f4320 -> Node0x4f4390;
	Node0x4f3940 -> Node0x4f4390;
	Node0x4f4390 -> Node0x4f4400;
	Node0x4f3780 -> Node0x4f4400;
	Node0x4f4400 -> Node0x4f4470;
	Node0x4f3860 -> Node0x4f4470;
	Node0x4f4470 -> Node0x4f44e0;
	Node0x4f3ac0 -> Node0x4f44e0;
	Node0x4f44e0 -> Node0x4f4550;
	Node0x4f3ba0 -> Node0x4f4550;
	Node0x4f4550 -> Node0x4f45c0;
	Node0x4f3d20 -> Node0x4f45c0;
	Node0x4f45c0 -> Node0x4f4630;
	Node0x4f3d90 -> Node0x4f4630;
	Node0x4f3260 -> Node0x4f46a0;
	Node0x4f4630 -> Node0x4f46a0;
	Node0x4f46a0 -> Node0x493268;
	Node0x493268 -> Node0x4f4b40;
}
