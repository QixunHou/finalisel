digraph "DFG for'crackme' function" {
	Node0xc73b80[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xc73bf0[shape=record, label="  %4 = and i32 %3, %0"];
	Node0xc73cb0[shape=record, label="  %5 = xor i32 %4, -1"];
	Node0xc73d20[shape=record, label="  %6 = and i32 %1, %0"];
	Node0xc73d90[shape=record, label="  %7 = or i32 %3, %0"];
	Node0xc73e00[shape=record, label="  %8 = or i32 %1, %0"];
	Node0xc73e70[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xc73f10[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0xc73fb0[shape=record, label="  %11 = shl i32 %7, 2"];
	Node0xc74050[shape=record, label="  %12 = xor i32 %11, -4"];
	Node0xc740c0[shape=record, label="  %13 = shl i32 %4, 2"];
	Node0xc74160[shape=record, label="  %14 = mul i32 %6, 6"];
	Node0xc741d0[shape=record, label="  %15 = mul i32 %0, -2"];
	Node0xc74240[shape=record, label="  %16 = sub i32 1, %1"];
	Node0xc742b0[shape=record, label="  %17 = add i32 %16, %3"];
	Node0xc74320[shape=record, label="  %18 = add i32 %17, %15"];
	Node0xc74390[shape=record, label="  %19 = add i32 %18, %6"];
	Node0xc74400[shape=record, label="  %20 = sub i32 %19, %7"];
	Node0xc74470[shape=record, label="  %21 = sub i32 %20, %8"];
	Node0xc744e0[shape=record, label="  %22 = add i32 %21, %13"];
	Node0xc74550[shape=record, label="  %23 = add i32 %22, %14"];
	Node0xc745c0[shape=record, label="  %24 = add i32 %23, %10"];
	Node0xc74630[shape=record, label="  %25 = add i32 %24, %12"];
	Node0xc746a0[shape=record, label="  %26 = icmp eq i32 %25, %5"];
	Node0xc14268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xc74b40[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0xc74b90[shape=record, label="  ret void"];
	Node0xc73b80 -> Node0xc73bf0;
	Node0xc73bf0 -> Node0xc73cb0;
	Node0xc73cb0 -> Node0xc73d20;
	Node0xc73d20 -> Node0xc73d90;
	Node0xc73d90 -> Node0xc73e00;
	Node0xc73e00 -> Node0xc73e70;
	Node0xc73e70 -> Node0xc73f10;
	Node0xc73f10 -> Node0xc73fb0;
	Node0xc73fb0 -> Node0xc74050;
	Node0xc74050 -> Node0xc740c0;
	Node0xc740c0 -> Node0xc74160;
	Node0xc74160 -> Node0xc741d0;
	Node0xc741d0 -> Node0xc74240;
	Node0xc74240 -> Node0xc742b0;
	Node0xc742b0 -> Node0xc74320;
	Node0xc74320 -> Node0xc74390;
	Node0xc74390 -> Node0xc74400;
	Node0xc74400 -> Node0xc74470;
	Node0xc74470 -> Node0xc744e0;
	Node0xc744e0 -> Node0xc74550;
	Node0xc74550 -> Node0xc745c0;
	Node0xc745c0 -> Node0xc74630;
	Node0xc74630 -> Node0xc746a0;
	Node0xc746a0 -> Node0xc14268;
	Node0xc14268 -> Node0xc74b40;
	Node0xc74b40 -> Node0xc74b90;
edge [color=red]
	Node0xc73b80 -> Node0xc73bf0;
	Node0xc73bf0 -> Node0xc73cb0;
	Node0xc73b80 -> Node0xc73d90;
	Node0xc73e00 -> Node0xc73e70;
	Node0xc73e70 -> Node0xc73f10;
	Node0xc73d90 -> Node0xc73fb0;
	Node0xc73fb0 -> Node0xc74050;
	Node0xc73bf0 -> Node0xc740c0;
	Node0xc73d20 -> Node0xc74160;
	Node0xc74240 -> Node0xc742b0;
	Node0xc73b80 -> Node0xc742b0;
	Node0xc742b0 -> Node0xc74320;
	Node0xc741d0 -> Node0xc74320;
	Node0xc74320 -> Node0xc74390;
	Node0xc73d20 -> Node0xc74390;
	Node0xc74390 -> Node0xc74400;
	Node0xc73d90 -> Node0xc74400;
	Node0xc74400 -> Node0xc74470;
	Node0xc73e00 -> Node0xc74470;
	Node0xc74470 -> Node0xc744e0;
	Node0xc740c0 -> Node0xc744e0;
	Node0xc744e0 -> Node0xc74550;
	Node0xc74160 -> Node0xc74550;
	Node0xc74550 -> Node0xc745c0;
	Node0xc73f10 -> Node0xc745c0;
	Node0xc745c0 -> Node0xc74630;
	Node0xc74050 -> Node0xc74630;
	Node0xc74630 -> Node0xc746a0;
	Node0xc73cb0 -> Node0xc746a0;
	Node0xc746a0 -> Node0xc14268;
	Node0xc14268 -> Node0xc74b40;
}
