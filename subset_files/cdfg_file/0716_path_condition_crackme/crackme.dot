digraph "DFG for'crackme' function" {
	Node0x1052410[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x1052ac0[shape=record, label="  %4 = xor i32 %3, -1"];
	Node0x1052b80[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1052bf0[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x1052c60[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1052cd0[shape=record, label="  %8 = add i32 %7, %4"];
	Node0x1052d40[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1052db0[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1052e20[shape=record, label="  %11 = xor i32 %9, -1"];
	Node0x1052ec0[shape=record, label="  %12 = mul i32 %11, 3"];
	Node0x1052f30[shape=record, label="  %13 = xor i32 %6, -1"];
	Node0x1052fa0[shape=record, label="  %14 = shl i32 %0, 1"];
	Node0x1053010[shape=record, label="  %15 = sub i32 %0, %9"];
	Node0x1053080[shape=record, label="  %16 = add i32 %15, %10"];
	Node0x10530f0[shape=record, label="  %17 = add i32 %16, %13"];
	Node0x1053160[shape=record, label="  %18 = add i32 %17, %12"];
	Node0x10531d0[shape=record, label="  %19 = add i32 %18, %14"];
	Node0x1053240[shape=record, label="  %20 = icmp eq i32 %8, %19"];
	Node0xff3268[shape=record, label="  %21 = select i1 %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10536e0[shape=record, label="  %22 = tail call i32 @puts(i8* nonnull dereferenceable(1) %21)"];
	Node0x1053730[shape=record, label="  ret void"];
	Node0x1052410 -> Node0x1052ac0;
	Node0x1052ac0 -> Node0x1052b80;
	Node0x1052b80 -> Node0x1052bf0;
	Node0x1052bf0 -> Node0x1052c60;
	Node0x1052c60 -> Node0x1052cd0;
	Node0x1052cd0 -> Node0x1052d40;
	Node0x1052d40 -> Node0x1052db0;
	Node0x1052db0 -> Node0x1052e20;
	Node0x1052e20 -> Node0x1052ec0;
	Node0x1052ec0 -> Node0x1052f30;
	Node0x1052f30 -> Node0x1052fa0;
	Node0x1052fa0 -> Node0x1053010;
	Node0x1053010 -> Node0x1053080;
	Node0x1053080 -> Node0x10530f0;
	Node0x10530f0 -> Node0x1053160;
	Node0x1053160 -> Node0x10531d0;
	Node0x10531d0 -> Node0x1053240;
	Node0x1053240 -> Node0xff3268;
	Node0xff3268 -> Node0x10536e0;
	Node0x10536e0 -> Node0x1053730;
edge [color=red]
	Node0x1052410 -> Node0x1052ac0;
	Node0x1052b80 -> Node0x1052bf0;
	Node0x1052bf0 -> Node0x1052c60;
	Node0x1052c60 -> Node0x1052cd0;
	Node0x1052ac0 -> Node0x1052cd0;
	Node0x1052d40 -> Node0x1052e20;
	Node0x1052e20 -> Node0x1052ec0;
	Node0x1052bf0 -> Node0x1052f30;
	Node0x1052d40 -> Node0x1053010;
	Node0x1053010 -> Node0x1053080;
	Node0x1052db0 -> Node0x1053080;
	Node0x1053080 -> Node0x10530f0;
	Node0x1052f30 -> Node0x10530f0;
	Node0x10530f0 -> Node0x1053160;
	Node0x1052ec0 -> Node0x1053160;
	Node0x1053160 -> Node0x10531d0;
	Node0x1052fa0 -> Node0x10531d0;
	Node0x1052cd0 -> Node0x1053240;
	Node0x10531d0 -> Node0x1053240;
	Node0x1053240 -> Node0xff3268;
	Node0xff3268 -> Node0x10536e0;
}
