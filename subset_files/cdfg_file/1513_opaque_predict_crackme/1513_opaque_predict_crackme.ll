; ModuleID = '../.././c_source_file/1513_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1513_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %2
  %10 = and i32 %9, %7
  %11 = or i32 %8, %2
  %12 = and i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = xor i32 %10, %13
  %15 = xor i32 %4, %3
  %16 = xor i32 %15, -1
  %17 = xor i32 %5, %4
  %18 = and i32 %17, %16
  %19 = sub i32 %18, %14
  %20 = and i32 %1, %0
  %21 = xor i32 %20, -1
  %22 = xor i32 %2, %0
  %23 = and i32 %22, %21
  %24 = xor i32 %1, %0
  %25 = xor i32 %22, -1
  %26 = and i32 %24, %25
  %27 = xor i32 %2, -1
  %28 = and i32 %27, %0
  %29 = xor i32 %28, -1
  %30 = add i32 %28, 1
  %31 = and i32 %2, %0
  %32 = or i32 %2, %1
  %33 = xor i32 %31, %32
  %34 = xor i32 %24, -1
  %35 = or i32 %28, %34
  %36 = or i32 %2, %0
  %37 = and i32 %36, %8
  %38 = and i32 %8, %0
  %39 = or i32 %38, %2
  %40 = xor i32 %21, %2
  %41 = xor i32 %2, %1
  %42 = xor i32 %41, -1
  %43 = or i32 %42, %7
  %44 = or i32 %41, %38
  %45 = xor i32 %36, -1
  %46 = or i32 %24, %45
  %47 = and i32 %27, %21
  %48 = add i32 %41, 1
  %49 = or i32 %8, %0
  %50 = xor i32 %49, %2
  %51 = or i32 %20, %45
  %52 = or i32 %27, %0
  %53 = xor i32 %52, -1
  %54 = and i32 %2, %1
  %55 = or i32 %54, %0
  %56 = or i32 %38, %27
  %57 = and i32 %52, %1
  %58 = or i32 %53, %8
  %59 = mul i32 %58, -5
  %60 = xor i32 %49, -1
  %61 = or i32 %41, %60
  %62 = or i32 %41, %7
  %63 = xor i32 %41, %0
  %64 = xor i32 %45, %1
  %65 = or i32 %27, %1
  %66 = and i32 %65, %0
  %67 = and i32 %52, %8
  %68 = or i32 %32, %0
  %69 = or i32 %45, %34
  %70 = or i32 %25, %1
  %71 = or i32 %1, %0
  %72 = and i32 %71, %25
  %73 = and i32 %24, %27
  %74 = xor i32 %32, -1
  %75 = or i32 %20, %74
  %76 = or i32 %24, %53
  %77 = or i32 %24, %2
  %78 = xor i32 %74, %0
  %79 = xor i32 %38, -1
  %80 = xor i32 %79, %2
  %81 = xor i32 %31, -1
  %82 = add i32 %31, 1
  %83 = and i32 %54, %0
  %84 = xor i32 %63, -1
  %85 = or i32 %83, %84
  %86 = or i32 %54, %38
  %87 = and i32 %27, %1
  %88 = xor i32 %87, -1
  %89 = add i32 %87, 1
  %90 = or i32 %28, %24
  %91 = or i32 %31, %1
  %92 = or i32 %34, %2
  %93 = and i32 %9, %0
  %94 = and i32 %11, %7
  %95 = or i32 %93, %94
  %96 = xor i32 %65, -1
  %97 = or i32 %28, %96
  %98 = and i32 %25, %79
  %99 = and i32 %27, %79
  %100 = xor i32 %54, -1
  %101 = or i32 %100, %7
  %102 = and i32 %79, %2
  %103 = or i32 %41, %0
  %104 = xor i32 %103, -1
  %105 = or i32 %93, %104
  %106 = xor i32 %94, -1
  %107 = xor i32 %93, %106
  %108 = and i32 %49, %42
  %109 = or i32 %22, %20
  %110 = xor i32 %54, %0
  %111 = xor i32 %71, -1
  %112 = or i32 %31, %111
  %113 = xor i32 %65, %20
  %114 = or i32 %22, %38
  %115 = or i32 %25, %34
  %116 = or i32 %27, %111
  %117 = or i32 %96, %7
  %118 = add i32 %65, 1
  %119 = or i32 %20, %53
  %120 = xor i32 %36, %20
  %121 = and i32 %81, %1
  %122 = and i32 %29, %34
  %123 = and i32 %88, %0
  %124 = or i32 %20, %25
  %125 = or i32 %87, %38
  %126 = and i32 %25, %34
  %127 = or i32 %87, %7
  %128 = and i32 %24, %29
  %129 = or i32 %20, %27
  %130 = or i32 %22, %34
  %131 = and i32 %32, %7
  %132 = xor i32 %65, %0
  %133 = shl i32 %132, 1
  %134 = xor i32 %28, %65
  %135 = and i32 %41, %7
  %136 = or i32 %83, %135
  %137 = or i32 %28, %54
  %138 = shl i32 %137, 1
  %139 = or i32 %65, %0
  %140 = and i32 %81, %34
  %141 = and i32 %71, %2
  %142 = and i32 %71, %27
  %143 = and i32 %54, %7
  %144 = and i32 %41, %0
  %145 = xor i32 %143, -1
  %146 = xor i32 %144, %145
  %147 = and i32 %22, %1
  %148 = or i32 %54, %7
  %149 = xor i32 %52, %20
  %150 = xor i32 %38, %100
  %151 = xor i32 %32, %0
  %152 = or i32 %83, %151
  %153 = xor i32 %38, %2
  %154 = or i32 %20, %42
  %155 = xor i32 %42, %0
  %156 = or i32 %111, %2
  %157 = or i32 %22, %60
  %158 = or i32 %24, %27
  %159 = shl i32 %158, 1
  %160 = xor i32 %53, %1
  %161 = xor i32 %88, %0
  %162 = or i32 %87, %0
  %163 = or i32 %10, %12
  %164 = or i32 %27, %34
  %165 = add i32 %36, 1
  %166 = or i32 %22, %8
  %167 = add i32 %24, 1
  %168 = and i32 %22, %49
  %169 = and i32 %36, %1
  %170 = xor i32 %20, %2
  %171 = or i32 %74, %7
  %172 = and i32 %25, %21
  %173 = or i32 %41, %111
  %174 = xor i32 %93, %103
  %175 = shl i32 %174, 1
  %176 = and i32 %32, %0
  %177 = xor i32 %176, %145
  %178 = or i32 %22, %111
  %179 = and i32 %22, %34
  %180 = and i32 %29, %1
  %181 = xor i32 %52, %1
  %182 = xor i32 %32, %20
  %183 = and i32 %22, %79
  %184 = xor i32 %111, %2
  %185 = and i32 %41, %79
  %186 = xor i32 %29, %1
  %187 = or i32 %24, %25
  %188 = shl i32 %187, 1
  %189 = and i32 %29, %8
  %190 = and i32 %74, %7
  %191 = shl i32 %190, 1
  %192 = and i32 %87, %7
  %193 = mul i32 %192, -11
  %194 = and i32 %74, %0
  %195 = and i32 %87, %0
  %196 = shl i32 %195, 2
  %197 = and i32 %96, %7
  %198 = shl i32 %143, 1
  %199 = and i32 %96, %0
  %200 = shl i32 %83, 1
  %201 = or i32 %17, %15
  %202 = xor i32 %4, -1
  %203 = xor i32 %5, -1
  %204 = or i32 %203, %3
  %205 = and i32 %204, %202
  %206 = xor i32 %3, -1
  %207 = and i32 %206, %5
  %208 = and i32 %207, %4
  %209 = xor i32 %5, %3
  %210 = or i32 %209, %4
  %211 = xor i32 %208, %210
  %212 = and i32 %207, %202
  %213 = or i32 %206, %5
  %214 = and i32 %213, %4
  %215 = xor i32 %214, 2147483647
  %216 = xor i32 %215, %212
  %217 = or i32 %4, %3
  %218 = and i32 %217, %203
  %219 = or i32 %16, %5
  %220 = or i32 %203, %4
  %221 = and i32 %220, %15
  %222 = shl i32 %221, 2
  %223 = and i32 %5, %4
  %224 = or i32 %5, %3
  %225 = xor i32 %224, -1
  %226 = or i32 %223, %225
  %227 = xor i32 %209, -1
  %228 = and i32 %217, %227
  %229 = or i32 %225, %4
  %230 = and i32 %206, %4
  %231 = xor i32 %230, -1
  %232 = xor i32 %17, -1
  %233 = and i32 %232, %231
  %234 = and i32 %5, %3
  %235 = and i32 %234, %202
  %236 = and i32 %209, %4
  %237 = or i32 %235, %236
  %238 = or i32 %230, %232
  %239 = xor i32 %204, -1
  %240 = add i32 %204, 1
  %241 = or i32 %206, %4
  %242 = and i32 %241, %227
  %243 = xor i32 %220, %206
  %244 = and i32 %4, %3
  %245 = or i32 %5, %4
  %246 = xor i32 %245, %244
  %247 = and i32 %203, %3
  %248 = xor i32 %247, %231
  %249 = or i32 %209, %202
  %250 = xor i32 %212, %249
  %251 = or i32 %234, %230
  %252 = and i32 %17, %3
  %253 = or i32 %204, %4
  %254 = and i32 %232, %3
  %255 = xor i32 %209, %4
  %256 = or i32 %208, %255
  %257 = and i32 %234, %4
  %258 = and i32 %209, %202
  %259 = or i32 %257, %258
  %260 = and i32 %220, %16
  %261 = and i32 %203, %231
  %262 = xor i32 %234, -1
  %263 = and i32 %262, %4
  %264 = or i32 %209, %230
  %265 = xor i32 %241, 2147483647
  %266 = or i32 %265, %5
  %267 = xor i32 %220, %244
  %268 = xor i32 %217, -1
  %269 = or i32 %227, %268
  %270 = xor i32 %224, %244
  %271 = and i32 %247, %202
  %272 = and i32 %225, %4
  %273 = and i32 %247, %4
  %274 = mul i32 %273, -13
  %275 = and i32 %239, %202
  %276 = mul i32 %235, -7
  %277 = and i32 %239, %4
  %278 = add i32 %80, %92
  %279 = add i32 %278, %186
  %280 = add i32 %279, %131
  %281 = add i32 %280, %130
  %282 = add i32 %281, %120
  %283 = add i32 %282, %110
  %284 = add i32 %283, %97
  %285 = add i32 %197, %199
  %286 = add i32 %285, %194
  %287 = add i32 %286, %277
  %288 = mul i32 %287, -6
  %289 = add i32 %218, %136
  %290 = add i32 %289, %257
  %291 = shl i32 %290, 2
  %292 = add i32 %248, %181
  %293 = add i32 %292, %271
  %294 = mul i32 %293, -3
  %295 = add i32 %284, %113
  %296 = add i32 %295, %95
  %297 = add i32 %296, %266
  %298 = add i32 %297, %229
  %299 = add i32 %298, %205
  %300 = add i32 %299, %216
  %301 = shl i32 %300, 1
  %302 = sub i32 -2, %0
  %303 = sub i32 %302, %24
  %304 = add i32 %303, %27
  %305 = add i32 %304, %38
  %306 = add i32 %305, %167
  %307 = add i32 %306, %30
  %308 = add i32 %307, %39
  %309 = add i32 %308, %40
  %310 = sub i32 %309, %47
  %311 = add i32 %310, %48
  %312 = add i32 %311, %50
  %313 = add i32 %312, %53
  %314 = sub i32 %313, %56
  %315 = add i32 %314, %73
  %316 = add i32 %315, %77
  %317 = add i32 %316, %82
  %318 = add i32 %317, %89
  %319 = add i32 %318, %99
  %320 = sub i32 %319, %102
  %321 = sub i32 %320, %116
  %322 = add i32 %321, %118
  %323 = add i32 %322, %129
  %324 = add i32 %323, %100
  %325 = sub i32 %324, %141
  %326 = sub i32 %325, %142
  %327 = add i32 %326, %153
  %328 = sub i32 %327, %41
  %329 = add i32 %328, %156
  %330 = add i32 %329, %65
  %331 = sub i32 %330, %164
  %332 = add i32 %331, %165
  %333 = sub i32 %332, %170
  %334 = sub i32 %333, %54
  %335 = add i32 %334, %184
  %336 = sub i32 %335, %26
  %337 = sub i32 %336, %23
  %338 = add i32 %337, %33
  %339 = sub i32 %338, %35
  %340 = add i32 %339, %37
  %341 = add i32 %340, %43
  %342 = sub i32 %341, %44
  %343 = add i32 %342, %46
  %344 = sub i32 %343, %51
  %345 = sub i32 %344, %55
  %346 = add i32 %345, %57
  %347 = sub i32 %346, %61
  %348 = sub i32 %347, %62
  %349 = add i32 %348, %63
  %350 = sub i32 %349, %64
  %351 = sub i32 %350, %66
  %352 = add i32 %351, %67
  %353 = sub i32 %352, %68
  %354 = sub i32 %353, %69
  %355 = add i32 %354, %70
  %356 = sub i32 %355, %72
  %357 = add i32 %356, %75
  %358 = add i32 %357, %76
  %359 = sub i32 %358, %78
  %360 = add i32 %359, %86
  %361 = sub i32 %360, %90
  %362 = add i32 %361, %91
  %363 = add i32 %362, %98
  %364 = add i32 %363, %101
  %365 = sub i32 %364, %108
  %366 = sub i32 %365, %109
  %367 = sub i32 %366, %112
  %368 = add i32 %367, %114
  %369 = add i32 %368, %115
  %370 = add i32 %369, %117
  %371 = add i32 %370, %119
  %372 = sub i32 %371, %121
  %373 = sub i32 %372, %122
  %374 = add i32 %373, %123
  %375 = add i32 %374, %124
  %376 = add i32 %375, %125
  %377 = sub i32 %376, %126
  %378 = add i32 %377, %127
  %379 = sub i32 %378, %128
  %380 = add i32 %379, %134
  %381 = add i32 %380, %139
  %382 = sub i32 %381, %140
  %383 = add i32 %382, %147
  %384 = sub i32 %383, %148
  %385 = add i32 %384, %149
  %386 = sub i32 %385, %150
  %387 = add i32 %386, %154
  %388 = add i32 %387, %155
  %389 = add i32 %388, %157
  %390 = sub i32 %389, %159
  %391 = sub i32 %390, %160
  %392 = sub i32 %391, %161
  %393 = add i32 %392, %162
  %394 = sub i32 %393, %166
  %395 = add i32 %394, %168
  %396 = sub i32 %395, %169
  %397 = add i32 %396, %171
  %398 = add i32 %397, %172
  %399 = sub i32 %398, %173
  %400 = sub i32 %399, %178
  %401 = add i32 %400, %179
  %402 = add i32 %401, %180
  %403 = sub i32 %402, %182
  %404 = sub i32 %403, %183
  %405 = add i32 %404, %185
  %406 = add i32 %405, %189
  %407 = add i32 %406, %59
  %408 = sub i32 %407, %85
  %409 = add i32 %408, %105
  %410 = add i32 %409, %107
  %411 = sub i32 %410, %133
  %412 = sub i32 %411, %138
  %413 = sub i32 %412, %146
  %414 = sub i32 %413, %152
  %415 = add i32 %414, %163
  %416 = add i32 %415, %177
  %417 = sub i32 %416, %188
  %418 = sub i32 %417, %191
  %419 = add i32 %418, %193
  %420 = sub i32 %419, %196
  %421 = sub i32 %420, %198
  %422 = sub i32 %421, %200
  %423 = sub i32 %422, %175
  %424 = add i32 %423, %219
  %425 = add i32 %424, %209
  %426 = add i32 %425, %240
  %427 = add i32 %426, %17
  %428 = sub i32 %427, %261
  %429 = add i32 %428, %201
  %430 = add i32 %429, %226
  %431 = sub i32 %430, %228
  %432 = sub i32 %431, %233
  %433 = sub i32 %432, %238
  %434 = sub i32 %433, %242
  %435 = add i32 %434, %243
  %436 = add i32 %435, %246
  %437 = add i32 %436, %251
  %438 = sub i32 %437, %252
  %439 = sub i32 %438, %253
  %440 = sub i32 %439, %254
  %441 = add i32 %440, %260
  %442 = add i32 %441, %263
  %443 = add i32 %442, %264
  %444 = sub i32 %443, %267
  %445 = sub i32 %444, %269
  %446 = add i32 %445, %270
  %447 = sub i32 %446, %272
  %448 = sub i32 %447, %275
  %449 = sub i32 %448, %211
  %450 = sub i32 %449, %222
  %451 = add i32 %450, %237
  %452 = add i32 %451, %250
  %453 = sub i32 %452, %256
  %454 = sub i32 %453, %259
  %455 = add i32 %454, %274
  %456 = add i32 %455, %276
  %457 = add i32 %456, %291
  %458 = add i32 %457, %294
  %459 = add i32 %458, %288
  %460 = add i32 %459, %301
  %461 = icmp eq i32 %19, %460
  %462 = select i1 %461, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %463 = tail call i32 @puts(i8* nonnull dereferenceable(1) %462)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
