digraph "DFG for'crackme' function" {
	Node0x141bb50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x141bbc0[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x141bc80[shape=record, label="  %5 = and i32 %1, %0"];
	Node0x141bcf0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x141bd90[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x141be00[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x141be70[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x141bee0[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x141bf50[shape=record, label="  %11 = and i32 %3, %0"];
	Node0x141bff0[shape=record, label="  %12 = shl i32 %10, 2"];
	Node0x141c090[shape=record, label="  %13 = xor i32 %12, -4"];
	Node0x141c100[shape=record, label="  %14 = shl i32 %11, 2"];
	Node0x141c170[shape=record, label="  %15 = shl i32 %5, 2"];
	Node0x141c1e0[shape=record, label="  %16 = add i32 %4, %0"];
	Node0x141c250[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x141c2c0[shape=record, label="  %18 = sub i32 %10, %11"];
	Node0x141c330[shape=record, label="  %19 = sub i32 %18, %9"];
	Node0x141c3a0[shape=record, label="  %20 = sub i32 %19, %14"];
	Node0x141c410[shape=record, label="  %21 = sub i32 %20, %15"];
	Node0x141c480[shape=record, label="  %22 = add i32 %21, %7"];
	Node0x141c4f0[shape=record, label="  %23 = sub i32 %22, %13"];
	Node0x141c560[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x141c5d0[shape=record, label="  %25 = icmp eq i32 %24, %1"];
	Node0x13bc268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x141ca70[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x141cac0[shape=record, label="  ret void"];
	Node0x141bb50 -> Node0x141bbc0;
	Node0x141bbc0 -> Node0x141bc80;
	Node0x141bc80 -> Node0x141bcf0;
	Node0x141bcf0 -> Node0x141bd90;
	Node0x141bd90 -> Node0x141be00;
	Node0x141be00 -> Node0x141be70;
	Node0x141be70 -> Node0x141bee0;
	Node0x141bee0 -> Node0x141bf50;
	Node0x141bf50 -> Node0x141bff0;
	Node0x141bff0 -> Node0x141c090;
	Node0x141c090 -> Node0x141c100;
	Node0x141c100 -> Node0x141c170;
	Node0x141c170 -> Node0x141c1e0;
	Node0x141c1e0 -> Node0x141c250;
	Node0x141c250 -> Node0x141c2c0;
	Node0x141c2c0 -> Node0x141c330;
	Node0x141c330 -> Node0x141c3a0;
	Node0x141c3a0 -> Node0x141c410;
	Node0x141c410 -> Node0x141c480;
	Node0x141c480 -> Node0x141c4f0;
	Node0x141c4f0 -> Node0x141c560;
	Node0x141c560 -> Node0x141c5d0;
	Node0x141c5d0 -> Node0x13bc268;
	Node0x13bc268 -> Node0x141ca70;
	Node0x141ca70 -> Node0x141cac0;
edge [color=red]
	Node0x141bb50 -> Node0x141bbc0;
	Node0x141bc80 -> Node0x141bcf0;
	Node0x141bcf0 -> Node0x141bd90;
	Node0x141be00 -> Node0x141be70;
	Node0x141bb50 -> Node0x141bf50;
	Node0x141bee0 -> Node0x141bff0;
	Node0x141bff0 -> Node0x141c090;
	Node0x141bf50 -> Node0x141c100;
	Node0x141bc80 -> Node0x141c170;
	Node0x141bbc0 -> Node0x141c1e0;
	Node0x141c1e0 -> Node0x141c250;
	Node0x141bee0 -> Node0x141c2c0;
	Node0x141bf50 -> Node0x141c2c0;
	Node0x141c2c0 -> Node0x141c330;
	Node0x141be70 -> Node0x141c330;
	Node0x141c330 -> Node0x141c3a0;
	Node0x141c100 -> Node0x141c3a0;
	Node0x141c3a0 -> Node0x141c410;
	Node0x141c170 -> Node0x141c410;
	Node0x141c410 -> Node0x141c480;
	Node0x141bd90 -> Node0x141c480;
	Node0x141c480 -> Node0x141c4f0;
	Node0x141c090 -> Node0x141c4f0;
	Node0x141c4f0 -> Node0x141c560;
	Node0x141c250 -> Node0x141c560;
	Node0x141c560 -> Node0x141c5d0;
	Node0x141c5d0 -> Node0x13bc268;
	Node0x13bc268 -> Node0x141ca70;
}
