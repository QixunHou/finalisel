digraph "DFG for'crackme' function" {
	Node0x16a2f90[shape=record, label="  %4 = xor i32 %2, -1"];
	Node0x16a3050[shape=record, label="  %5 = xor i32 %0, -1"];
	Node0x16a30c0[shape=record, label="  %6 = and i32 %5, %2"];
	Node0x16a3130[shape=record, label="  %7 = xor i32 %1, %0"];
	Node0x16a31a0[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x16a3210[shape=record, label="  %9 = or i32 %6, %8"];
	Node0x16a3280[shape=record, label="  %10 = and i32 %4, %0"];
	Node0x16a32f0[shape=record, label="  %11 = and i32 %2, %1"];
	Node0x16a3360[shape=record, label="  %12 = or i32 %10, %11"];
	Node0x16a33d0[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x16a3440[shape=record, label="  %14 = or i32 %2, %0"];
	Node0x16a34b0[shape=record, label="  %15 = xor i32 %14, %13"];
	Node0x16a3520[shape=record, label="  %16 = or i32 %5, %1"];
	Node0x16a3590[shape=record, label="  %17 = and i32 %16, %2"];
	Node0x16a3600[shape=record, label="  %18 = or i32 %10, %7"];
	Node0x16a3670[shape=record, label="  %19 = or i32 %10, %1"];
	Node0x16a36e0[shape=record, label="  %20 = or i32 %2, %1"];
	Node0x16a3750[shape=record, label="  %21 = xor i32 %20, -1"];
	Node0x16a37c0[shape=record, label="  %22 = and i32 %21, %5"];
	Node0x16a3830[shape=record, label="  %23 = and i32 %4, %1"];
	Node0x16a38a0[shape=record, label="  %24 = and i32 %23, %5"];
	Node0x16a3910[shape=record, label="  %25 = shl i32 %24, 1"];
	Node0x16a3980[shape=record, label="  %26 = and i32 %21, %0"];
	Node0x16a39f0[shape=record, label="  %27 = shl i32 %26, 1"];
	Node0x16a3a60[shape=record, label="  %28 = and i32 %23, %0"];
	Node0x16a3ad0[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x16a3b40[shape=record, label="  %30 = xor i32 %1, -1"];
	Node0x16a3bb0[shape=record, label="  %31 = and i32 %6, %30"];
	Node0x16a3c50[shape=record, label="  %32 = mul i32 %31, 3"];
	Node0x16a3ed0[shape=record, label="  %33 = add i32 %15, %17"];
	Node0x16a3f40[shape=record, label="  %34 = sub i32 %12, %33"];
	Node0x16a3fb0[shape=record, label="  %35 = add i32 %34, %18"];
	Node0x16a4020[shape=record, label="  %36 = add i32 %35, %19"];
	Node0x16a4090[shape=record, label="  %37 = add i32 %36, %22"];
	Node0x16a4100[shape=record, label="  %38 = sub i32 %37, %25"];
	Node0x16a4170[shape=record, label="  %39 = sub i32 %38, %27"];
	Node0x16a41e0[shape=record, label="  %40 = sub i32 %39, %29"];
	Node0x16a4250[shape=record, label="  %41 = add i32 %40, %32"];
	Node0x16a42c0[shape=record, label="  %42 = icmp eq i32 %9, %41"];
	Node0x1643268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16a4760[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x16a47b0[shape=record, label="  ret void"];
	Node0x16a2f90 -> Node0x16a3050;
	Node0x16a3050 -> Node0x16a30c0;
	Node0x16a30c0 -> Node0x16a3130;
	Node0x16a3130 -> Node0x16a31a0;
	Node0x16a31a0 -> Node0x16a3210;
	Node0x16a3210 -> Node0x16a3280;
	Node0x16a3280 -> Node0x16a32f0;
	Node0x16a32f0 -> Node0x16a3360;
	Node0x16a3360 -> Node0x16a33d0;
	Node0x16a33d0 -> Node0x16a3440;
	Node0x16a3440 -> Node0x16a34b0;
	Node0x16a34b0 -> Node0x16a3520;
	Node0x16a3520 -> Node0x16a3590;
	Node0x16a3590 -> Node0x16a3600;
	Node0x16a3600 -> Node0x16a3670;
	Node0x16a3670 -> Node0x16a36e0;
	Node0x16a36e0 -> Node0x16a3750;
	Node0x16a3750 -> Node0x16a37c0;
	Node0x16a37c0 -> Node0x16a3830;
	Node0x16a3830 -> Node0x16a38a0;
	Node0x16a38a0 -> Node0x16a3910;
	Node0x16a3910 -> Node0x16a3980;
	Node0x16a3980 -> Node0x16a39f0;
	Node0x16a39f0 -> Node0x16a3a60;
	Node0x16a3a60 -> Node0x16a3ad0;
	Node0x16a3ad0 -> Node0x16a3b40;
	Node0x16a3b40 -> Node0x16a3bb0;
	Node0x16a3bb0 -> Node0x16a3c50;
	Node0x16a3c50 -> Node0x16a3ed0;
	Node0x16a3ed0 -> Node0x16a3f40;
	Node0x16a3f40 -> Node0x16a3fb0;
	Node0x16a3fb0 -> Node0x16a4020;
	Node0x16a4020 -> Node0x16a4090;
	Node0x16a4090 -> Node0x16a4100;
	Node0x16a4100 -> Node0x16a4170;
	Node0x16a4170 -> Node0x16a41e0;
	Node0x16a41e0 -> Node0x16a4250;
	Node0x16a4250 -> Node0x16a42c0;
	Node0x16a42c0 -> Node0x1643268;
	Node0x1643268 -> Node0x16a4760;
	Node0x16a4760 -> Node0x16a47b0;
edge [color=red]
	Node0x16a3050 -> Node0x16a30c0;
	Node0x16a3130 -> Node0x16a31a0;
	Node0x16a30c0 -> Node0x16a3210;
	Node0x16a31a0 -> Node0x16a3210;
	Node0x16a2f90 -> Node0x16a3280;
	Node0x16a3280 -> Node0x16a3360;
	Node0x16a32f0 -> Node0x16a3360;
	Node0x16a3440 -> Node0x16a34b0;
	Node0x16a33d0 -> Node0x16a34b0;
	Node0x16a3050 -> Node0x16a3520;
	Node0x16a3520 -> Node0x16a3590;
	Node0x16a3280 -> Node0x16a3600;
	Node0x16a3130 -> Node0x16a3600;
	Node0x16a3280 -> Node0x16a3670;
	Node0x16a36e0 -> Node0x16a3750;
	Node0x16a3750 -> Node0x16a37c0;
	Node0x16a3050 -> Node0x16a37c0;
	Node0x16a2f90 -> Node0x16a3830;
	Node0x16a3830 -> Node0x16a38a0;
	Node0x16a3050 -> Node0x16a38a0;
	Node0x16a38a0 -> Node0x16a3910;
	Node0x16a3750 -> Node0x16a3980;
	Node0x16a3980 -> Node0x16a39f0;
	Node0x16a3830 -> Node0x16a3a60;
	Node0x16a3a60 -> Node0x16a3ad0;
	Node0x16a30c0 -> Node0x16a3bb0;
	Node0x16a3b40 -> Node0x16a3bb0;
	Node0x16a3bb0 -> Node0x16a3c50;
	Node0x16a34b0 -> Node0x16a3ed0;
	Node0x16a3590 -> Node0x16a3ed0;
	Node0x16a3360 -> Node0x16a3f40;
	Node0x16a3ed0 -> Node0x16a3f40;
	Node0x16a3f40 -> Node0x16a3fb0;
	Node0x16a3600 -> Node0x16a3fb0;
	Node0x16a3fb0 -> Node0x16a4020;
	Node0x16a3670 -> Node0x16a4020;
	Node0x16a4020 -> Node0x16a4090;
	Node0x16a37c0 -> Node0x16a4090;
	Node0x16a4090 -> Node0x16a4100;
	Node0x16a3910 -> Node0x16a4100;
	Node0x16a4100 -> Node0x16a4170;
	Node0x16a39f0 -> Node0x16a4170;
	Node0x16a4170 -> Node0x16a41e0;
	Node0x16a3ad0 -> Node0x16a41e0;
	Node0x16a41e0 -> Node0x16a4250;
	Node0x16a3c50 -> Node0x16a4250;
	Node0x16a3210 -> Node0x16a42c0;
	Node0x16a4250 -> Node0x16a42c0;
	Node0x16a42c0 -> Node0x1643268;
	Node0x1643268 -> Node0x16a4760;
}
