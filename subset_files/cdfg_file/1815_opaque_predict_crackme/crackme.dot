digraph "DFG for'crackme' function" {
	Node0xa9a300[shape=record, label="  %3 = add i32 %1, %0"];
	Node0xa9a9b0[shape=record, label="  %4 = xor i32 %1, -1"];
	Node0xa9aa70[shape=record, label="  %5 = or i32 %4, %0"];
	Node0xa9aae0[shape=record, label="  %6 = xor i32 %0, -1"];
	Node0xa9ab50[shape=record, label="  %7 = and i32 %6, %1"];
	Node0xa9abc0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xa9ac30[shape=record, label="  %9 = or i32 %1, %0"];
	Node0xa9aca0[shape=record, label="  %10 = add i32 %7, 1"];
	Node0xa9ad10[shape=record, label="  %11 = add i32 %10, %5"];
	Node0xa9ad80[shape=record, label="  %12 = add i32 %11, %8"];
	Node0xa9adf0[shape=record, label="  %13 = add i32 %12, %9"];
	Node0xa9ae60[shape=record, label="  %14 = icmp eq i32 %3, %13"];
	Node0xa3b388[shape=record, label="  %15 = select i1 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xa9b300[shape=record, label="  %16 = tail call i32 @puts(i8* nonnull dereferenceable(1) %15)"];
	Node0xa9b350[shape=record, label="  ret void"];
	Node0xa9a300 -> Node0xa9a9b0;
	Node0xa9a9b0 -> Node0xa9aa70;
	Node0xa9aa70 -> Node0xa9aae0;
	Node0xa9aae0 -> Node0xa9ab50;
	Node0xa9ab50 -> Node0xa9abc0;
	Node0xa9abc0 -> Node0xa9ac30;
	Node0xa9ac30 -> Node0xa9aca0;
	Node0xa9aca0 -> Node0xa9ad10;
	Node0xa9ad10 -> Node0xa9ad80;
	Node0xa9ad80 -> Node0xa9adf0;
	Node0xa9adf0 -> Node0xa9ae60;
	Node0xa9ae60 -> Node0xa3b388;
	Node0xa3b388 -> Node0xa9b300;
	Node0xa9b300 -> Node0xa9b350;
edge [color=red]
	Node0xa9a9b0 -> Node0xa9aa70;
	Node0xa9aae0 -> Node0xa9ab50;
	Node0xa9ab50 -> Node0xa9aca0;
	Node0xa9aca0 -> Node0xa9ad10;
	Node0xa9aa70 -> Node0xa9ad10;
	Node0xa9ad10 -> Node0xa9ad80;
	Node0xa9abc0 -> Node0xa9ad80;
	Node0xa9ad80 -> Node0xa9adf0;
	Node0xa9ac30 -> Node0xa9adf0;
	Node0xa9a300 -> Node0xa9ae60;
	Node0xa9adf0 -> Node0xa9ae60;
	Node0xa9ae60 -> Node0xa3b388;
	Node0xa3b388 -> Node0xa9b300;
}
