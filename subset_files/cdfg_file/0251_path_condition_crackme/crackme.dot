digraph "DFG for'crackme' function" {
	Node0x585bc0[shape=record, label="  %3 = mul i32 %0, 3"];
	Node0x585c30[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x585cf0[shape=record, label="  %5 = add i32 %3, 1"];
	Node0x585d60[shape=record, label="  %6 = add i32 %5, %4"];
	Node0x585e00[shape=record, label="  %7 = xor i32 %1, -1"];
	Node0x585e70[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x585ee0[shape=record, label="  %9 = add i32 %8, 1"];
	Node0x585f50[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x585fc0[shape=record, label="  %11 = shl i32 %1, 1"];
	Node0x586060[shape=record, label="  %12 = shl i32 %7, 2"];
	Node0x5860d0[shape=record, label="  %13 = or i32 %1, %0"];
	Node0x586140[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x5861e0[shape=record, label="  %15 = xor i32 %0, 2147483647"];
	Node0x586250[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x5862f0[shape=record, label="  %17 = mul i32 %4, 7"];
	Node0x586360[shape=record, label="  %18 = add i32 %8, %14"];
	Node0x586400[shape=record, label="  %19 = mul i32 %18, -3"];
	Node0x586470[shape=record, label="  %20 = add i32 %16, %9"];
	Node0x5864e0[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x586550[shape=record, label="  %22 = sub i32 %10, %11"];
	Node0x5865c0[shape=record, label="  %23 = add i32 %22, %12"];
	Node0x586630[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x5866a0[shape=record, label="  %25 = add i32 %24, %19"];
	Node0x586710[shape=record, label="  %26 = add i32 %25, %21"];
	Node0x586780[shape=record, label="  %27 = icmp eq i32 %6, %26"];
	Node0x526268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x586c20[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x586c70[shape=record, label="  ret void"];
	Node0x585bc0 -> Node0x585c30;
	Node0x585c30 -> Node0x585cf0;
	Node0x585cf0 -> Node0x585d60;
	Node0x585d60 -> Node0x585e00;
	Node0x585e00 -> Node0x585e70;
	Node0x585e70 -> Node0x585ee0;
	Node0x585ee0 -> Node0x585f50;
	Node0x585f50 -> Node0x585fc0;
	Node0x585fc0 -> Node0x586060;
	Node0x586060 -> Node0x5860d0;
	Node0x5860d0 -> Node0x586140;
	Node0x586140 -> Node0x5861e0;
	Node0x5861e0 -> Node0x586250;
	Node0x586250 -> Node0x5862f0;
	Node0x5862f0 -> Node0x586360;
	Node0x586360 -> Node0x586400;
	Node0x586400 -> Node0x586470;
	Node0x586470 -> Node0x5864e0;
	Node0x5864e0 -> Node0x586550;
	Node0x586550 -> Node0x5865c0;
	Node0x5865c0 -> Node0x586630;
	Node0x586630 -> Node0x5866a0;
	Node0x5866a0 -> Node0x586710;
	Node0x586710 -> Node0x586780;
	Node0x586780 -> Node0x526268;
	Node0x526268 -> Node0x586c20;
	Node0x586c20 -> Node0x586c70;
edge [color=red]
	Node0x585bc0 -> Node0x585cf0;
	Node0x585cf0 -> Node0x585d60;
	Node0x585c30 -> Node0x585d60;
	Node0x585e00 -> Node0x585e70;
	Node0x585e70 -> Node0x585ee0;
	Node0x585e00 -> Node0x586060;
	Node0x5860d0 -> Node0x586140;
	Node0x5861e0 -> Node0x586250;
	Node0x585c30 -> Node0x5862f0;
	Node0x585e70 -> Node0x586360;
	Node0x586140 -> Node0x586360;
	Node0x586360 -> Node0x586400;
	Node0x586250 -> Node0x586470;
	Node0x585ee0 -> Node0x586470;
	Node0x586470 -> Node0x5864e0;
	Node0x585f50 -> Node0x586550;
	Node0x585fc0 -> Node0x586550;
	Node0x586550 -> Node0x5865c0;
	Node0x586060 -> Node0x5865c0;
	Node0x5865c0 -> Node0x586630;
	Node0x5862f0 -> Node0x586630;
	Node0x586630 -> Node0x5866a0;
	Node0x586400 -> Node0x5866a0;
	Node0x5866a0 -> Node0x586710;
	Node0x5864e0 -> Node0x586710;
	Node0x585d60 -> Node0x586780;
	Node0x586710 -> Node0x586780;
	Node0x586780 -> Node0x526268;
	Node0x526268 -> Node0x586c20;
}
