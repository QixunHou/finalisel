digraph "DFG for'main' function" {
	Node0xff9b98[shape=record, label="  %1 = alloca i32, align 4"];
	Node0xff9c18[shape=record, label="  %2 = alloca i32, align 4"];
	Node0xff9ca8[shape=record, label="  %3 = alloca i32, align 4"];
	Node0xff9d08[shape=record, label="  %4 = alloca i32, align 4"];
	Node0xff9db8[shape=record, label="  %5 = bitcast i32* %1 to i8*"];
	Node0xffa1e8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xffa2c8[shape=record, label="  %6 = bitcast i32* %2 to i8*"];
	Node0xffa3c8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xffa488[shape=record, label="  %7 = bitcast i32* %3 to i8*"];
	Node0xffa538[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xffa5f8[shape=record, label="  %8 = bitcast i32* %4 to i8*"];
	Node0xffa6a8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xff4b30[shape=record, label="  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4)"];
	Node0xffa8a8[shape=record, label="  %10 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0xffb818[shape=record, label="  %11 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0xffbe88[shape=record, label="  %12 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0xffbee8[shape=record, label="  %13 = load i32, i32* %4, align 4, !tbaa !2"];
	Node0xffbf60[shape=record, label="  %14 = or i32 %12, %11"];
	Node0xffbfd0[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0xffc040[shape=record, label="  %16 = xor i32 %10, -1"];
	Node0xffc0b0[shape=record, label="  %17 = or i32 %13, %16"];
	Node0xffc120[shape=record, label="  %18 = add i32 %17, %15"];
	Node0xffc190[shape=record, label="  %19 = xor i32 %12, -1"];
	Node0xffc200[shape=record, label="  %20 = xor i32 %11, %19"];
	Node0xffc270[shape=record, label="  %21 = and i32 %11, %19"];
	Node0xffc2e0[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0xffc350[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0xffc3c0[shape=record, label="  %24 = mul i32 %15, 6"];
	Node0xffc430[shape=record, label="  %25 = xor i32 %11, 2147483647"];
	Node0xffc4a0[shape=record, label="  %26 = and i32 %25, %12"];
	Node0xffc510[shape=record, label="  %27 = and i32 %12, %11"];
	Node0xffc580[shape=record, label="  %28 = shl i32 %27, 2"];
	Node0xffc5f0[shape=record, label="  %29 = xor i32 %13, 2147483647"];
	Node0xffc660[shape=record, label="  %30 = or i32 %29, %10"];
	Node0xffc6d0[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0xffc740[shape=record, label="  %32 = xor i32 %13, %10"];
	Node0xffc7b0[shape=record, label="  %33 = xor i32 %32, -1"];
	Node0xffc820[shape=record, label="  %34 = or i32 %13, %10"];
	Node0xffc890[shape=record, label="  %35 = shl i32 %34, 1"];
	Node0xffc900[shape=record, label="  %36 = xor i32 %35, -2"];
	Node0xffc970[shape=record, label="  %37 = xor i32 %17, -1"];
	Node0xffc9e0[shape=record, label="  %38 = sub i32 %37, %20"];
	Node0xffca50[shape=record, label="  %39 = mul i32 %38, 3"];
	Node0xffcac0[shape=record, label="  %40 = add i32 %26, %13"];
	Node0xffcb30[shape=record, label="  %41 = shl i32 %40, 1"];
	Node0xffcba0[shape=record, label="  %42 = sub i32 %11, %21"];
	Node0xffcc10[shape=record, label="  %43 = add i32 %42, %24"];
	Node0xffcc80[shape=record, label="  %44 = add i32 %43, %28"];
	Node0xffccf0[shape=record, label="  %45 = sub i32 %44, %32"];
	Node0xffcd60[shape=record, label="  %46 = add i32 %45, %33"];
	Node0xffcdd0[shape=record, label="  %47 = sub i32 %46, %23"];
	Node0xffce40[shape=record, label="  %48 = add i32 %47, %41"];
	Node0xffceb0[shape=record, label="  %49 = sub i32 %48, %31"];
	Node0xffcf20[shape=record, label="  %50 = add i32 %49, %36"];
	Node0xffcf90[shape=record, label="  %51 = add i32 %50, %39"];
	Node0xffd000[shape=record, label="  %52 = icmp eq i32 %18, %51"];
	Node0xf998b8[shape=record, label="  %53 = select i1 %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xffd090[shape=record, label="  %54 = call i32 @puts(i8* nonnull dereferenceable(1) %53) #5"];
	Node0xffd338[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5"];
	Node0xffd498[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5"];
	Node0xffd5a8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0xffd6b8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0xffd778[shape=record, label="  ret i32 0"];
	Node0xff9b98 -> Node0xff9c18;
	Node0xff9c18 -> Node0xff9ca8;
	Node0xff9ca8 -> Node0xff9d08;
	Node0xff9d08 -> Node0xff9db8;
	Node0xff9db8 -> Node0xffa1e8;
	Node0xffa1e8 -> Node0xffa2c8;
	Node0xffa2c8 -> Node0xffa3c8;
	Node0xffa3c8 -> Node0xffa488;
	Node0xffa488 -> Node0xffa538;
	Node0xffa538 -> Node0xffa5f8;
	Node0xffa5f8 -> Node0xffa6a8;
	Node0xffa6a8 -> Node0xff4b30;
	Node0xff4b30 -> Node0xffa8a8;
	Node0xffa8a8 -> Node0xffb818;
	Node0xffb818 -> Node0xffbe88;
	Node0xffbe88 -> Node0xffbee8;
	Node0xffbee8 -> Node0xffbf60;
	Node0xffbf60 -> Node0xffbfd0;
	Node0xffbfd0 -> Node0xffc040;
	Node0xffc040 -> Node0xffc0b0;
	Node0xffc0b0 -> Node0xffc120;
	Node0xffc120 -> Node0xffc190;
	Node0xffc190 -> Node0xffc200;
	Node0xffc200 -> Node0xffc270;
	Node0xffc270 -> Node0xffc2e0;
	Node0xffc2e0 -> Node0xffc350;
	Node0xffc350 -> Node0xffc3c0;
	Node0xffc3c0 -> Node0xffc430;
	Node0xffc430 -> Node0xffc4a0;
	Node0xffc4a0 -> Node0xffc510;
	Node0xffc510 -> Node0xffc580;
	Node0xffc580 -> Node0xffc5f0;
	Node0xffc5f0 -> Node0xffc660;
	Node0xffc660 -> Node0xffc6d0;
	Node0xffc6d0 -> Node0xffc740;
	Node0xffc740 -> Node0xffc7b0;
	Node0xffc7b0 -> Node0xffc820;
	Node0xffc820 -> Node0xffc890;
	Node0xffc890 -> Node0xffc900;
	Node0xffc900 -> Node0xffc970;
	Node0xffc970 -> Node0xffc9e0;
	Node0xffc9e0 -> Node0xffca50;
	Node0xffca50 -> Node0xffcac0;
	Node0xffcac0 -> Node0xffcb30;
	Node0xffcb30 -> Node0xffcba0;
	Node0xffcba0 -> Node0xffcc10;
	Node0xffcc10 -> Node0xffcc80;
	Node0xffcc80 -> Node0xffccf0;
	Node0xffccf0 -> Node0xffcd60;
	Node0xffcd60 -> Node0xffcdd0;
	Node0xffcdd0 -> Node0xffce40;
	Node0xffce40 -> Node0xffceb0;
	Node0xffceb0 -> Node0xffcf20;
	Node0xffcf20 -> Node0xffcf90;
	Node0xffcf90 -> Node0xffd000;
	Node0xffd000 -> Node0xf998b8;
	Node0xf998b8 -> Node0xffd090;
	Node0xffd090 -> Node0xffd338;
	Node0xffd338 -> Node0xffd498;
	Node0xffd498 -> Node0xffd5a8;
	Node0xffd5a8 -> Node0xffd6b8;
	Node0xffd6b8 -> Node0xffd778;
edge [color=red]
	Node0xff9b98 -> Node0xff9db8;
	Node0xff9db8 -> Node0xffa1e8;
	Node0xff9c18 -> Node0xffa2c8;
	Node0xffa2c8 -> Node0xffa3c8;
	Node0xff9ca8 -> Node0xffa488;
	Node0xffa488 -> Node0xffa538;
	Node0xff9d08 -> Node0xffa5f8;
	Node0xffa5f8 -> Node0xffa6a8;
	Node0xff9b98 -> Node0xff4b30;
	Node0xff9c18 -> Node0xff4b30;
	Node0xff9ca8 -> Node0xff4b30;
	Node0xff9d08 -> Node0xff4b30;
	Node0xff9b98 -> Node0xffa8a8;
	Node0xff9c18 -> Node0xffb818;
	Node0xff9ca8 -> Node0xffbe88;
	Node0xff9d08 -> Node0xffbee8;
	Node0xffbe88 -> Node0xffbf60;
	Node0xffb818 -> Node0xffbf60;
	Node0xffbf60 -> Node0xffbfd0;
	Node0xffa8a8 -> Node0xffc040;
	Node0xffbee8 -> Node0xffc0b0;
	Node0xffc040 -> Node0xffc0b0;
	Node0xffc0b0 -> Node0xffc120;
	Node0xffbfd0 -> Node0xffc120;
	Node0xffbe88 -> Node0xffc190;
	Node0xffb818 -> Node0xffc200;
	Node0xffc190 -> Node0xffc200;
	Node0xffb818 -> Node0xffc270;
	Node0xffc190 -> Node0xffc270;
	Node0xffc270 -> Node0xffc2e0;
	Node0xffc2e0 -> Node0xffc350;
	Node0xffbfd0 -> Node0xffc3c0;
	Node0xffb818 -> Node0xffc430;
	Node0xffc430 -> Node0xffc4a0;
	Node0xffbe88 -> Node0xffc4a0;
	Node0xffbe88 -> Node0xffc510;
	Node0xffb818 -> Node0xffc510;
	Node0xffc510 -> Node0xffc580;
	Node0xffbee8 -> Node0xffc5f0;
	Node0xffc5f0 -> Node0xffc660;
	Node0xffa8a8 -> Node0xffc660;
	Node0xffc660 -> Node0xffc6d0;
	Node0xffbee8 -> Node0xffc740;
	Node0xffa8a8 -> Node0xffc740;
	Node0xffc740 -> Node0xffc7b0;
	Node0xffbee8 -> Node0xffc820;
	Node0xffa8a8 -> Node0xffc820;
	Node0xffc820 -> Node0xffc890;
	Node0xffc890 -> Node0xffc900;
	Node0xffc0b0 -> Node0xffc970;
	Node0xffc970 -> Node0xffc9e0;
	Node0xffc200 -> Node0xffc9e0;
	Node0xffc9e0 -> Node0xffca50;
	Node0xffc4a0 -> Node0xffcac0;
	Node0xffbee8 -> Node0xffcac0;
	Node0xffcac0 -> Node0xffcb30;
	Node0xffb818 -> Node0xffcba0;
	Node0xffc270 -> Node0xffcba0;
	Node0xffcba0 -> Node0xffcc10;
	Node0xffc3c0 -> Node0xffcc10;
	Node0xffcc10 -> Node0xffcc80;
	Node0xffc580 -> Node0xffcc80;
	Node0xffcc80 -> Node0xffccf0;
	Node0xffc740 -> Node0xffccf0;
	Node0xffccf0 -> Node0xffcd60;
	Node0xffc7b0 -> Node0xffcd60;
	Node0xffcd60 -> Node0xffcdd0;
	Node0xffc350 -> Node0xffcdd0;
	Node0xffcdd0 -> Node0xffce40;
	Node0xffcb30 -> Node0xffce40;
	Node0xffce40 -> Node0xffceb0;
	Node0xffc6d0 -> Node0xffceb0;
	Node0xffceb0 -> Node0xffcf20;
	Node0xffc900 -> Node0xffcf20;
	Node0xffcf20 -> Node0xffcf90;
	Node0xffca50 -> Node0xffcf90;
	Node0xffc120 -> Node0xffd000;
	Node0xffcf90 -> Node0xffd000;
	Node0xffd000 -> Node0xf998b8;
	Node0xf998b8 -> Node0xffd090;
	Node0xffa5f8 -> Node0xffd338;
	Node0xffa488 -> Node0xffd498;
	Node0xffa2c8 -> Node0xffd5a8;
	Node0xff9db8 -> Node0xffd6b8;
}
