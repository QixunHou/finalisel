digraph "DFG for'crackme' function" {
	Node0xff7b00[shape=record, label="  %5 = or i32 %2, %1"];
	Node0xff8180[shape=record, label="  %6 = xor i32 %5, -1"];
	Node0xff81f0[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0xff8260[shape=record, label="  %8 = or i32 %7, %3"];
	Node0xff82d0[shape=record, label="  %9 = add i32 %8, %6"];
	Node0xff8340[shape=record, label="  %10 = xor i32 %2, -1"];
	Node0xff83b0[shape=record, label="  %11 = xor i32 %10, %1"];
	Node0xff8420[shape=record, label="  %12 = and i32 %10, %1"];
	Node0xff84c0[shape=record, label="  %13 = shl i32 %12, 1"];
	Node0xff8560[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0xff8600[shape=record, label="  %15 = mul i32 %6, 6"];
	Node0xff86a0[shape=record, label="  %16 = xor i32 %1, 2147483647"];
	Node0xff8710[shape=record, label="  %17 = and i32 %16, %2"];
	Node0xff8780[shape=record, label="  %18 = and i32 %2, %1"];
	Node0xff8820[shape=record, label="  %19 = shl i32 %18, 2"];
	Node0xff8890[shape=record, label="  %20 = xor i32 %3, 2147483647"];
	Node0xff8900[shape=record, label="  %21 = or i32 %20, %0"];
	Node0xff8970[shape=record, label="  %22 = shl i32 %21, 1"];
	Node0xff89e0[shape=record, label="  %23 = xor i32 %3, %0"];
	Node0xff8a50[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0xff8ac0[shape=record, label="  %25 = or i32 %3, %0"];
	Node0xff8b30[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0xff8ba0[shape=record, label="  %27 = xor i32 %26, -2"];
	Node0xff8c10[shape=record, label="  %28 = xor i32 %8, -1"];
	Node0xff8c80[shape=record, label="  %29 = sub i32 %28, %11"];
	Node0xff8d20[shape=record, label="  %30 = mul i32 %29, 3"];
	Node0xff8d90[shape=record, label="  %31 = add i32 %17, %3"];
	Node0xff8e00[shape=record, label="  %32 = shl i32 %31, 1"];
	Node0xff9080[shape=record, label="  %33 = sub i32 %1, %12"];
	Node0xff90f0[shape=record, label="  %34 = add i32 %33, %15"];
	Node0xff9160[shape=record, label="  %35 = add i32 %34, %19"];
	Node0xff91d0[shape=record, label="  %36 = sub i32 %35, %23"];
	Node0xff9240[shape=record, label="  %37 = add i32 %36, %24"];
	Node0xff92b0[shape=record, label="  %38 = sub i32 %37, %14"];
	Node0xff9320[shape=record, label="  %39 = add i32 %38, %32"];
	Node0xff9390[shape=record, label="  %40 = sub i32 %39, %22"];
	Node0xff9400[shape=record, label="  %41 = add i32 %40, %27"];
	Node0xff9470[shape=record, label="  %42 = add i32 %41, %30"];
	Node0xff94e0[shape=record, label="  %43 = icmp eq i32 %9, %42"];
	Node0xf98268[shape=record, label="  %44 = select i1 %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xff9980[shape=record, label="  %45 = tail call i32 @puts(i8* nonnull dereferenceable(1) %44)"];
	Node0xff99d0[shape=record, label="  ret void"];
	Node0xff7b00 -> Node0xff8180;
	Node0xff8180 -> Node0xff81f0;
	Node0xff81f0 -> Node0xff8260;
	Node0xff8260 -> Node0xff82d0;
	Node0xff82d0 -> Node0xff8340;
	Node0xff8340 -> Node0xff83b0;
	Node0xff83b0 -> Node0xff8420;
	Node0xff8420 -> Node0xff84c0;
	Node0xff84c0 -> Node0xff8560;
	Node0xff8560 -> Node0xff8600;
	Node0xff8600 -> Node0xff86a0;
	Node0xff86a0 -> Node0xff8710;
	Node0xff8710 -> Node0xff8780;
	Node0xff8780 -> Node0xff8820;
	Node0xff8820 -> Node0xff8890;
	Node0xff8890 -> Node0xff8900;
	Node0xff8900 -> Node0xff8970;
	Node0xff8970 -> Node0xff89e0;
	Node0xff89e0 -> Node0xff8a50;
	Node0xff8a50 -> Node0xff8ac0;
	Node0xff8ac0 -> Node0xff8b30;
	Node0xff8b30 -> Node0xff8ba0;
	Node0xff8ba0 -> Node0xff8c10;
	Node0xff8c10 -> Node0xff8c80;
	Node0xff8c80 -> Node0xff8d20;
	Node0xff8d20 -> Node0xff8d90;
	Node0xff8d90 -> Node0xff8e00;
	Node0xff8e00 -> Node0xff9080;
	Node0xff9080 -> Node0xff90f0;
	Node0xff90f0 -> Node0xff9160;
	Node0xff9160 -> Node0xff91d0;
	Node0xff91d0 -> Node0xff9240;
	Node0xff9240 -> Node0xff92b0;
	Node0xff92b0 -> Node0xff9320;
	Node0xff9320 -> Node0xff9390;
	Node0xff9390 -> Node0xff9400;
	Node0xff9400 -> Node0xff9470;
	Node0xff9470 -> Node0xff94e0;
	Node0xff94e0 -> Node0xf98268;
	Node0xf98268 -> Node0xff9980;
	Node0xff9980 -> Node0xff99d0;
edge [color=red]
	Node0xff7b00 -> Node0xff8180;
	Node0xff81f0 -> Node0xff8260;
	Node0xff8260 -> Node0xff82d0;
	Node0xff8180 -> Node0xff82d0;
	Node0xff8340 -> Node0xff83b0;
	Node0xff8340 -> Node0xff8420;
	Node0xff8420 -> Node0xff84c0;
	Node0xff84c0 -> Node0xff8560;
	Node0xff8180 -> Node0xff8600;
	Node0xff86a0 -> Node0xff8710;
	Node0xff8780 -> Node0xff8820;
	Node0xff8890 -> Node0xff8900;
	Node0xff8900 -> Node0xff8970;
	Node0xff89e0 -> Node0xff8a50;
	Node0xff8ac0 -> Node0xff8b30;
	Node0xff8b30 -> Node0xff8ba0;
	Node0xff8260 -> Node0xff8c10;
	Node0xff8c10 -> Node0xff8c80;
	Node0xff83b0 -> Node0xff8c80;
	Node0xff8c80 -> Node0xff8d20;
	Node0xff8710 -> Node0xff8d90;
	Node0xff8d90 -> Node0xff8e00;
	Node0xff8420 -> Node0xff9080;
	Node0xff9080 -> Node0xff90f0;
	Node0xff8600 -> Node0xff90f0;
	Node0xff90f0 -> Node0xff9160;
	Node0xff8820 -> Node0xff9160;
	Node0xff9160 -> Node0xff91d0;
	Node0xff89e0 -> Node0xff91d0;
	Node0xff91d0 -> Node0xff9240;
	Node0xff8a50 -> Node0xff9240;
	Node0xff9240 -> Node0xff92b0;
	Node0xff8560 -> Node0xff92b0;
	Node0xff92b0 -> Node0xff9320;
	Node0xff8e00 -> Node0xff9320;
	Node0xff9320 -> Node0xff9390;
	Node0xff8970 -> Node0xff9390;
	Node0xff9390 -> Node0xff9400;
	Node0xff8ba0 -> Node0xff9400;
	Node0xff9400 -> Node0xff9470;
	Node0xff8d20 -> Node0xff9470;
	Node0xff82d0 -> Node0xff94e0;
	Node0xff9470 -> Node0xff94e0;
	Node0xff94e0 -> Node0xf98268;
	Node0xf98268 -> Node0xff9980;
}
