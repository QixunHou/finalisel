; ModuleID = '../.././c_source_file/0871_path_condition_crackme.c'
source_filename = "../.././c_source_file/0871_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = or i32 %1, %0
  %5 = xor i32 %4, -1
  %6 = xor i32 %2, %1
  %7 = xor i32 %6, -1
  %8 = or i32 %7, %5
  %9 = and i32 %2, %1
  %10 = and i32 %9, %0
  %11 = xor i32 %0, -1
  %12 = or i32 %2, %1
  %13 = and i32 %12, %11
  %14 = or i32 %10, %13
  %15 = and i32 %6, %0
  %16 = and i32 %2, %0
  %17 = or i32 %16, %5
  %18 = shl i32 %17, 1
  %19 = xor i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = and i32 %4, %20
  %22 = and i32 %19, %1
  %23 = xor i32 %2, -1
  %24 = and i32 %23, %1
  %25 = or i32 %24, %11
  %26 = shl i32 %25, 1
  %27 = or i32 %16, %24
  %28 = xor i32 %1, -1
  %29 = or i32 %28, %0
  %30 = xor i32 %29, -1
  %31 = or i32 %7, %30
  %32 = xor i32 %1, %0
  %33 = xor i32 %32, -1
  %34 = and i32 %33, %2
  %35 = and i32 %28, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %19, %36
  %38 = or i32 %23, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %6, %35
  %41 = or i32 %7, %11
  %42 = xor i32 %16, -1
  %43 = and i32 %42, %1
  %44 = or i32 %23, %1
  %45 = xor i32 %44, %0
  %46 = add i32 %0, 1
  %47 = or i32 %2, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %48, %28
  %50 = shl i32 %7, 1
  %51 = xor i32 %4, %2
  %52 = and i32 %1, %0
  %53 = or i32 %52, %7
  %54 = shl i32 %53, 1
  %55 = and i32 %7, %11
  %56 = xor i32 %12, -1
  %57 = or i32 %52, %56
  %58 = xor i32 %36, %2
  %59 = and i32 %9, %11
  %60 = and i32 %12, %0
  %61 = xor i32 %60, -1
  %62 = xor i32 %59, %61
  %63 = and i32 %23, %0
  %64 = xor i32 %63, -1
  %65 = xor i32 %64, %1
  %66 = xor i32 %9, -1
  %67 = and i32 %66, %11
  %68 = shl i32 %67, 2
  %69 = and i32 %28, %2
  %70 = and i32 %69, %0
  %71 = or i32 %28, %2
  %72 = and i32 %71, %11
  %73 = or i32 %70, %72
  %74 = or i32 %52, %2
  %75 = shl i32 %74, 1
  %76 = or i32 %23, %30
  %77 = xor i32 %5, %2
  %78 = and i32 %4, %23
  %79 = or i32 %19, %30
  %80 = shl i32 %79, 1
  %81 = or i32 %9, %11
  %82 = or i32 %63, %1
  %83 = add i32 %12, 1
  %84 = or i32 %32, %20
  %85 = add i32 %16, 1
  %86 = and i32 %42, %28
  %87 = xor i32 %12, %11
  %88 = xor i32 %87, %10
  %89 = and i32 %69, %11
  %90 = and i32 %71, %0
  %91 = or i32 %89, %90
  %92 = and i32 %20, %28
  %93 = xor i32 %44, %52
  %94 = xor i32 %52, -1
  %95 = and i32 %19, %94
  %96 = add i32 %35, 1
  %97 = or i32 %20, %30
  %98 = or i32 %48, %33
  %99 = or i32 %24, %0
  %100 = or i32 %20, %1
  %101 = and i32 %20, %94
  %102 = or i32 %20, %33
  %103 = or i32 %35, %23
  %104 = or i32 %6, %52
  %105 = xor i32 %30, %2
  %106 = and i32 %19, %32
  %107 = or i32 %52, %48
  %108 = xor i32 %6, %0
  %109 = xor i32 %10, %108
  %110 = or i32 %52, %39
  %111 = xor i32 %71, %0
  %112 = or i32 %70, %111
  %113 = and i32 %29, %2
  %114 = xor i32 %47, %1
  %115 = or i32 %16, %1
  %116 = or i32 %44, %0
  %117 = or i32 %6, %0
  %118 = or i32 %32, %48
  %119 = or i32 %6, %11
  %120 = and i32 %32, %23
  %121 = and i32 %64, %33
  %122 = or i32 %16, %28
  %123 = add i32 %4, 1
  %124 = and i32 %64, %1
  %125 = shl i32 %124, 1
  %126 = and i32 %20, %33
  %127 = shl i32 %23, 1
  %128 = and i32 %47, %28
  %129 = xor i32 %63, %66
  %130 = and i32 %44, %0
  %131 = xor i32 %42, %1
  %132 = or i32 %39, %28
  %133 = xor i32 %117, -1
  %134 = or i32 %70, %133
  %135 = xor i32 %44, -1
  %136 = or i32 %135, %11
  %137 = or i32 %35, %7
  %138 = and i32 %32, %20
  %139 = or i32 %135, %0
  %140 = shl i32 %139, 1
  %141 = xor i32 %24, %36
  %142 = xor i32 %108, -1
  %143 = xor i32 %70, %142
  %144 = xor i32 %29, %2
  %145 = xor i32 %35, %66
  %146 = or i32 %16, %30
  %147 = or i32 %19, %33
  %148 = shl i32 %147, 1
  %149 = or i32 %63, %135
  %150 = or i32 %19, %32
  %151 = and i32 %38, %33
  %152 = or i32 %19, %52
  %153 = or i32 %24, %35
  %154 = shl i32 %153, 1
  %155 = and i32 %4, %2
  %156 = or i32 %66, %11
  %157 = and i32 %7, %0
  %158 = and i32 %19, %4
  %159 = or i32 %35, %2
  %160 = and i32 %32, %64
  %161 = and i32 %23, %36
  %162 = xor i32 %9, %0
  %163 = or i32 %32, %23
  %164 = or i32 %44, %11
  %165 = xor i32 %48, %1
  %166 = or i32 %63, %33
  %167 = and i32 %29, %20
  %168 = or i32 %6, %30
  %169 = and i32 %44, %11
  %170 = xor i32 %16, %1
  %171 = and i32 %23, %33
  %172 = xor i32 %119, 2147483647
  %173 = or i32 %172, %89
  %174 = shl i32 %173, 1
  %175 = or i32 %39, %1
  %176 = shl i32 %175, 2
  %177 = or i32 %52, %135
  %178 = xor i32 %24, %0
  %179 = and i32 %56, %11
  %180 = and i32 %24, %11
  %181 = and i32 %56, %0
  %182 = shl i32 %181, 3
  %183 = and i32 %24, %0
  %184 = mul i32 %183, 17
  %185 = and i32 %135, %11
  %186 = mul i32 %59, 15
  %187 = and i32 %135, %0
  %188 = mul i32 %187, -12
  %189 = add i32 %159, %161
  %190 = add i32 %189, %24
  %191 = add i32 %190, %58
  %192 = sub i32 %83, %76
  %193 = add i32 %192, %95
  %194 = add i32 %193, %169
  %195 = sub i32 %194, %22
  %196 = mul i32 %195, 5
  %197 = add i32 %51, %105
  %198 = sub i32 %104, %197
  %199 = mul i32 %198, 3
  %200 = sub i32 %185, %180
  %201 = mul i32 %200, 6
  %202 = add i32 %179, %20
  %203 = shl i32 %202, 2
  %204 = add i32 %191, %120
  %205 = add i32 %204, %168
  %206 = add i32 %205, %178
  %207 = add i32 %206, %167
  %208 = add i32 %207, %145
  %209 = add i32 %208, %114
  %210 = add i32 %209, %92
  %211 = add i32 %210, %82
  %212 = add i32 %211, %57
  %213 = add i32 %212, %41
  %214 = shl i32 %213, 1
  %215 = add i32 %46, %0
  %216 = add i32 %215, %28
  %217 = add i32 %216, %2
  %218 = add i32 %217, %33
  %219 = sub i32 %218, %29
  %220 = add i32 %219, %35
  %221 = add i32 %220, %96
  %222 = add i32 %221, %123
  %223 = add i32 %222, %52
  %224 = add i32 %223, %4
  %225 = add i32 %224, %34
  %226 = add i32 %225, %39
  %227 = add i32 %226, %6
  %228 = add i32 %227, %77
  %229 = add i32 %228, %78
  %230 = add i32 %229, %85
  %231 = add i32 %230, %63
  %232 = sub i32 %231, %103
  %233 = add i32 %232, %113
  %234 = sub i32 %233, %127
  %235 = add i32 %234, %66
  %236 = add i32 %235, %144
  %237 = add i32 %236, %48
  %238 = add i32 %237, %155
  %239 = add i32 %238, %135
  %240 = add i32 %239, %163
  %241 = sub i32 %240, %12
  %242 = sub i32 %241, %171
  %243 = sub i32 %242, %15
  %244 = add i32 %243, %21
  %245 = add i32 %244, %27
  %246 = add i32 %245, %31
  %247 = sub i32 %246, %37
  %248 = sub i32 %247, %40
  %249 = add i32 %248, %43
  %250 = add i32 %249, %45
  %251 = add i32 %250, %49
  %252 = sub i32 %251, %50
  %253 = sub i32 %252, %55
  %254 = add i32 %253, %65
  %255 = sub i32 %254, %75
  %256 = add i32 %255, %81
  %257 = add i32 %256, %84
  %258 = add i32 %257, %86
  %259 = sub i32 %258, %93
  %260 = add i32 %259, %97
  %261 = add i32 %260, %98
  %262 = sub i32 %261, %99
  %263 = add i32 %262, %100
  %264 = sub i32 %263, %101
  %265 = sub i32 %264, %102
  %266 = add i32 %265, %106
  %267 = add i32 %266, %107
  %268 = add i32 %267, %110
  %269 = sub i32 %268, %115
  %270 = sub i32 %269, %116
  %271 = sub i32 %270, %117
  %272 = sub i32 %271, %118
  %273 = sub i32 %272, %119
  %274 = sub i32 %273, %121
  %275 = add i32 %274, %122
  %276 = sub i32 %275, %126
  %277 = add i32 %276, %128
  %278 = add i32 %277, %129
  %279 = sub i32 %278, %130
  %280 = add i32 %279, %131
  %281 = sub i32 %280, %132
  %282 = sub i32 %281, %136
  %283 = sub i32 %282, %137
  %284 = add i32 %283, %138
  %285 = sub i32 %284, %141
  %286 = sub i32 %285, %146
  %287 = sub i32 %286, %149
  %288 = add i32 %287, %150
  %289 = add i32 %288, %151
  %290 = add i32 %289, %152
  %291 = sub i32 %290, %156
  %292 = sub i32 %291, %157
  %293 = sub i32 %292, %158
  %294 = add i32 %293, %160
  %295 = sub i32 %294, %162
  %296 = sub i32 %295, %164
  %297 = sub i32 %296, %165
  %298 = add i32 %297, %166
  %299 = sub i32 %298, %170
  %300 = sub i32 %299, %60
  %301 = add i32 %300, %177
  %302 = sub i32 %301, %14
  %303 = sub i32 %302, %18
  %304 = sub i32 %303, %26
  %305 = sub i32 %304, %54
  %306 = add i32 %305, %62
  %307 = sub i32 %306, %68
  %308 = sub i32 %307, %73
  %309 = sub i32 %308, %80
  %310 = sub i32 %309, %88
  %311 = sub i32 %310, %91
  %312 = add i32 %311, %109
  %313 = add i32 %312, %112
  %314 = sub i32 %313, %125
  %315 = sub i32 %314, %134
  %316 = sub i32 %315, %140
  %317 = add i32 %316, %143
  %318 = sub i32 %317, %148
  %319 = sub i32 %318, %154
  %320 = sub i32 %319, %176
  %321 = add i32 %320, %182
  %322 = add i32 %321, %184
  %323 = add i32 %322, %186
  %324 = add i32 %323, %188
  %325 = add i32 %324, %201
  %326 = add i32 %325, %203
  %327 = sub i32 %326, %174
  %328 = add i32 %327, %199
  %329 = add i32 %328, %196
  %330 = add i32 %329, %214
  %331 = icmp eq i32 %8, %330
  %332 = select i1 %331, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %333 = tail call i32 @puts(i8* nonnull dereferenceable(1) %332)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
