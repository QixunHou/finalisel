digraph "DFG for'crackme' function" {
	Node0xcfc490[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0xcfcb40[shape=record, label="  %4 = add i32 %3, 1"];
	Node0xcfcc00[shape=record, label="  %5 = xor i32 %1, 2147483647"];
	Node0xcfcc70[shape=record, label="  %6 = and i32 %5, %0"];
	Node0xcfcce0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0xcfcd50[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xcfcdc0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0xcfce60[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0xcfced0[shape=record, label="  %11 = shl i32 %7, 1"];
	Node0xcfcf40[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xcfcfb0[shape=record, label="  %13 = shl i32 %6, 1"];
	Node0xcfd020[shape=record, label="  %14 = sub i32 1, %0"];
	Node0xcfd090[shape=record, label="  %15 = add i32 %14, %1"];
	Node0xcfd100[shape=record, label="  %16 = sub i32 %15, %3"];
	Node0xcfd170[shape=record, label="  %17 = sub i32 %16, %7"];
	Node0xcfd1e0[shape=record, label="  %18 = add i32 %17, %8"];
	Node0xcfd250[shape=record, label="  %19 = add i32 %18, %13"];
	Node0xcfd2c0[shape=record, label="  %20 = add i32 %19, %10"];
	Node0xcfd330[shape=record, label="  %21 = sub i32 %20, %12"];
	Node0xcfd3a0[shape=record, label="  %22 = icmp eq i32 %4, %21"];
	Node0xc9d268[shape=record, label="  %23 = select i1 %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xcfd840[shape=record, label="  %24 = tail call i32 @puts(i8* nonnull dereferenceable(1) %23)"];
	Node0xcfd890[shape=record, label="  ret void"];
	Node0xcfc490 -> Node0xcfcb40;
	Node0xcfcb40 -> Node0xcfcc00;
	Node0xcfcc00 -> Node0xcfcc70;
	Node0xcfcc70 -> Node0xcfcce0;
	Node0xcfcce0 -> Node0xcfcd50;
	Node0xcfcd50 -> Node0xcfcdc0;
	Node0xcfcdc0 -> Node0xcfce60;
	Node0xcfce60 -> Node0xcfced0;
	Node0xcfced0 -> Node0xcfcf40;
	Node0xcfcf40 -> Node0xcfcfb0;
	Node0xcfcfb0 -> Node0xcfd020;
	Node0xcfd020 -> Node0xcfd090;
	Node0xcfd090 -> Node0xcfd100;
	Node0xcfd100 -> Node0xcfd170;
	Node0xcfd170 -> Node0xcfd1e0;
	Node0xcfd1e0 -> Node0xcfd250;
	Node0xcfd250 -> Node0xcfd2c0;
	Node0xcfd2c0 -> Node0xcfd330;
	Node0xcfd330 -> Node0xcfd3a0;
	Node0xcfd3a0 -> Node0xc9d268;
	Node0xc9d268 -> Node0xcfd840;
	Node0xcfd840 -> Node0xcfd890;
edge [color=red]
	Node0xcfc490 -> Node0xcfcb40;
	Node0xcfcc00 -> Node0xcfcc70;
	Node0xcfcd50 -> Node0xcfcdc0;
	Node0xcfcdc0 -> Node0xcfce60;
	Node0xcfcce0 -> Node0xcfced0;
	Node0xcfced0 -> Node0xcfcf40;
	Node0xcfcc70 -> Node0xcfcfb0;
	Node0xcfd020 -> Node0xcfd090;
	Node0xcfd090 -> Node0xcfd100;
	Node0xcfc490 -> Node0xcfd100;
	Node0xcfd100 -> Node0xcfd170;
	Node0xcfcce0 -> Node0xcfd170;
	Node0xcfd170 -> Node0xcfd1e0;
	Node0xcfcd50 -> Node0xcfd1e0;
	Node0xcfd1e0 -> Node0xcfd250;
	Node0xcfcfb0 -> Node0xcfd250;
	Node0xcfd250 -> Node0xcfd2c0;
	Node0xcfce60 -> Node0xcfd2c0;
	Node0xcfd2c0 -> Node0xcfd330;
	Node0xcfcf40 -> Node0xcfd330;
	Node0xcfcb40 -> Node0xcfd3a0;
	Node0xcfd330 -> Node0xcfd3a0;
	Node0xcfd3a0 -> Node0xc9d268;
	Node0xc9d268 -> Node0xcfd840;
}
