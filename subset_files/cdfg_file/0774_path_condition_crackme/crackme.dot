digraph "DFG for'crackme' function" {
	Node0x1417be0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1417c50[shape=record, label="  %4 = and i32 %3, %0"];
	Node0x1417d10[shape=record, label="  %5 = add i32 %4, 1"];
	Node0x1417d80[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x1417df0[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0x1417e60[shape=record, label="  %8 = or i32 %3, %0"];
	Node0x1417ed0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x1417f40[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1417fb0[shape=record, label="  %11 = or i32 %1, %0"];
	Node0x1418020[shape=record, label="  %12 = shl i32 %3, 1"];
	Node0x1418090[shape=record, label="  %13 = xor i32 %11, -1"];
	Node0x1418130[shape=record, label="  %14 = xor i32 %9, -2"];
	Node0x14181a0[shape=record, label="  %15 = shl i32 %0, 1"];
	Node0x1418210[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x14182b0[shape=record, label="  %17 = shl i32 %0, 2"];
	Node0x1418320[shape=record, label="  %18 = sub i32 1, %1"];
	Node0x1418390[shape=record, label="  %19 = add i32 %18, %16"];
	Node0x1418400[shape=record, label="  %20 = add i32 %19, %7"];
	Node0x1418470[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x14184e0[shape=record, label="  %22 = sub i32 %21, %11"];
	Node0x1418550[shape=record, label="  %23 = sub i32 %22, %12"];
	Node0x14185c0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0x1418630[shape=record, label="  %25 = sub i32 %24, %9"];
	Node0x14186a0[shape=record, label="  %26 = sub i32 %25, %14"];
	Node0x1418710[shape=record, label="  %27 = add i32 %26, %17"];
	Node0x1418780[shape=record, label="  %28 = icmp eq i32 %5, %27"];
	Node0x13b8268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1418c20[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x1418c70[shape=record, label="  ret void"];
	Node0x1417be0 -> Node0x1417c50;
	Node0x1417c50 -> Node0x1417d10;
	Node0x1417d10 -> Node0x1417d80;
	Node0x1417d80 -> Node0x1417df0;
	Node0x1417df0 -> Node0x1417e60;
	Node0x1417e60 -> Node0x1417ed0;
	Node0x1417ed0 -> Node0x1417f40;
	Node0x1417f40 -> Node0x1417fb0;
	Node0x1417fb0 -> Node0x1418020;
	Node0x1418020 -> Node0x1418090;
	Node0x1418090 -> Node0x1418130;
	Node0x1418130 -> Node0x14181a0;
	Node0x14181a0 -> Node0x1418210;
	Node0x1418210 -> Node0x14182b0;
	Node0x14182b0 -> Node0x1418320;
	Node0x1418320 -> Node0x1418390;
	Node0x1418390 -> Node0x1418400;
	Node0x1418400 -> Node0x1418470;
	Node0x1418470 -> Node0x14184e0;
	Node0x14184e0 -> Node0x1418550;
	Node0x1418550 -> Node0x14185c0;
	Node0x14185c0 -> Node0x1418630;
	Node0x1418630 -> Node0x14186a0;
	Node0x14186a0 -> Node0x1418710;
	Node0x1418710 -> Node0x1418780;
	Node0x1418780 -> Node0x13b8268;
	Node0x13b8268 -> Node0x1418c20;
	Node0x1418c20 -> Node0x1418c70;
edge [color=red]
	Node0x1417be0 -> Node0x1417c50;
	Node0x1417c50 -> Node0x1417d10;
	Node0x1417d80 -> Node0x1417df0;
	Node0x1417be0 -> Node0x1417e60;
	Node0x1417e60 -> Node0x1417ed0;
	Node0x1417be0 -> Node0x1418020;
	Node0x1417fb0 -> Node0x1418090;
	Node0x1417ed0 -> Node0x1418130;
	Node0x14181a0 -> Node0x1418210;
	Node0x1418320 -> Node0x1418390;
	Node0x1418210 -> Node0x1418390;
	Node0x1418390 -> Node0x1418400;
	Node0x1417df0 -> Node0x1418400;
	Node0x1418400 -> Node0x1418470;
	Node0x1417f40 -> Node0x1418470;
	Node0x1418470 -> Node0x14184e0;
	Node0x1417fb0 -> Node0x14184e0;
	Node0x14184e0 -> Node0x1418550;
	Node0x1418020 -> Node0x1418550;
	Node0x1418550 -> Node0x14185c0;
	Node0x1418090 -> Node0x14185c0;
	Node0x14185c0 -> Node0x1418630;
	Node0x1417ed0 -> Node0x1418630;
	Node0x1418630 -> Node0x14186a0;
	Node0x1418130 -> Node0x14186a0;
	Node0x14186a0 -> Node0x1418710;
	Node0x14182b0 -> Node0x1418710;
	Node0x1417d10 -> Node0x1418780;
	Node0x1418710 -> Node0x1418780;
	Node0x1418780 -> Node0x13b8268;
	Node0x13b8268 -> Node0x1418c20;
}
