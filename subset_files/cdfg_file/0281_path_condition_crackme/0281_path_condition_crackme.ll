; ModuleID = '../.././c_source_file/0281_path_condition_crackme.c'
source_filename = "../.././c_source_file/0281_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %2, %0
  %6 = or i32 %5, %4
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = or i32 %2, %1
  %10 = xor i32 %9, %0
  %11 = or i32 %8, %10
  %12 = shl i32 %11, 1
  %13 = sub i32 %12, %6
  %14 = and i32 %1, %0
  %15 = xor i32 %2, -1
  %16 = or i32 %15, %1
  %17 = xor i32 %16, %14
  %18 = and i32 %4, %2
  %19 = and i32 %15, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %4, -1
  %22 = and i32 %20, %21
  %23 = xor i32 %2, %1
  %24 = xor i32 %23, -1
  %25 = or i32 %14, %24
  %26 = and i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = shl i32 %27, 1
  %29 = or i32 %16, %0
  %30 = xor i32 %1, -1
  %31 = or i32 %30, %0
  %32 = and i32 %5, %31
  %33 = shl i32 %32, 1
  %34 = or i32 %2, %0
  %35 = xor i32 %34, -1
  %36 = xor i32 %35, %1
  %37 = xor i32 %5, -1
  %38 = or i32 %37, %1
  %39 = and i32 %34, %30
  %40 = and i32 %15, %21
  %41 = and i32 %5, %30
  %42 = or i32 %35, %1
  %43 = shl i32 %42, 1
  %44 = and i32 %23, %31
  %45 = and i32 %31, %37
  %46 = or i32 %7, %0
  %47 = and i32 %30, %2
  %48 = and i32 %47, %0
  %49 = xor i32 %0, -1
  %50 = or i32 %30, %2
  %51 = and i32 %50, %49
  %52 = or i32 %48, %51
  %53 = and i32 %30, %0
  %54 = xor i32 %53, -1
  %55 = and i32 %23, %54
  %56 = and i32 %4, %37
  %57 = and i32 %15, %1
  %58 = or i32 %26, %57
  %59 = and i32 %34, %4
  %60 = shl i32 %59, 1
  %61 = xor i32 %23, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %48, %62
  %64 = shl i32 %63, 1
  %65 = and i32 %21, %2
  %66 = shl i32 %65, 1
  %67 = xor i32 %16, -1
  %68 = or i32 %14, %67
  %69 = xor i32 %20, %1
  %70 = shl i32 %0, 1
  %71 = add i32 %1, 1
  %72 = or i32 %53, %24
  %73 = xor i32 %8, %61
  %74 = or i32 %8, %62
  %75 = or i32 %26, %1
  %76 = or i32 %35, %21
  %77 = xor i32 %14, -1
  %78 = xor i32 %77, %2
  %79 = and i32 %37, %1
  %80 = or i32 %1, %0
  %81 = xor i32 %80, -1
  %82 = or i32 %15, %81
  %83 = and i32 %23, %49
  %84 = or i32 %5, %1
  %85 = or i32 %15, %0
  %86 = xor i32 %85, %1
  %87 = shl i32 %86, 2
  %88 = xor i32 %26, %1
  %89 = or i32 %7, %53
  %90 = and i32 %27, %30
  %91 = and i32 %15, %54
  %92 = or i32 %14, %2
  %93 = and i32 %31, %15
  %94 = shl i32 %93, 1
  %95 = xor i32 %51, 2147483647
  %96 = xor i32 %95, %48
  %97 = shl i32 %96, 1
  %98 = or i32 %19, %67
  %99 = or i32 %14, %37
  %100 = xor i32 %9, -1
  %101 = or i32 %100, %49
  %102 = or i32 %23, %0
  %103 = xor i32 %7, %0
  %104 = and i32 %54, %2
  %105 = xor i32 %10, -1
  %106 = xor i32 %8, %105
  %107 = or i32 %81, %2
  %108 = xor i32 %16, %0
  %109 = or i32 %24, %49
  %110 = xor i32 %100, %0
  %111 = xor i32 %31, -1
  %112 = or i32 %37, %111
  %113 = or i32 %53, %37
  %114 = or i32 %14, %15
  %115 = xor i32 %7, -1
  %116 = and i32 %115, %49
  %117 = or i32 %115, %0
  %118 = or i32 %23, %14
  %119 = shl i32 %118, 2
  %120 = xor i32 %85, -1
  %121 = xor i32 %120, %1
  %122 = or i32 %15, %21
  %123 = and i32 %31, %2
  %124 = and i32 %5, %4
  %125 = and i32 %34, %1
  %126 = or i32 %26, %111
  %127 = xor i32 %24, %0
  %128 = or i32 %5, %81
  %129 = and i32 %7, %49
  %130 = and i32 %9, %0
  %131 = xor i32 %130, -1
  %132 = xor i32 %129, %131
  %133 = and i32 %27, %1
  %134 = mul i32 %133, -5
  %135 = or i32 %24, %0
  %136 = xor i32 %81, %2
  %137 = xor i32 %14, %2
  %138 = or i32 %9, %49
  %139 = and i32 %47, %49
  %140 = and i32 %50, %0
  %141 = xor i32 %140, -1
  %142 = xor i32 %139, %141
  %143 = and i32 %20, %30
  %144 = or i32 %35, %30
  %145 = or i32 %5, %30
  %146 = xor i32 %50, %0
  %147 = or i32 %48, %146
  %148 = and i32 %23, %80
  %149 = or i32 %120, %1
  %150 = shl i32 %149, 1
  %151 = xor i32 %57, -1
  %152 = or i32 %151, %0
  %153 = shl i32 %35, 1
  %154 = or i32 %19, %30
  %155 = or i32 %21, %2
  %156 = shl i32 %155, 1
  %157 = and i32 %80, %24
  %158 = and i32 %5, %1
  %159 = or i32 %57, %49
  %160 = and i32 %80, %15
  %161 = or i32 %19, %21
  %162 = xor i32 %85, %14
  %163 = shl i32 %77, 1
  %164 = and i32 %85, %21
  %165 = shl i32 %164, 1
  %166 = xor i32 %19, %1
  %167 = and i32 %34, %21
  %168 = xor i32 %34, %14
  %169 = or i32 %67, %0
  %170 = xor i32 %111, %2
  %171 = and i32 %24, %49
  %172 = and i32 %85, %1
  %173 = or i32 %23, %49
  %174 = xor i32 %173, -1
  %175 = or i32 %139, %174
  %176 = or i32 %23, %111
  %177 = and i32 %115, %0
  %178 = add i32 %85, 1
  %179 = or i32 %67, %49
  %180 = xor i32 %115, %0
  %181 = or i32 %24, %81
  %182 = or i32 %4, %120
  %183 = or i32 %7, %49
  %184 = or i32 %5, %21
  %185 = xor i32 %80, %2
  %186 = xor i32 %9, %14
  %187 = and i32 %5, %77
  %188 = or i32 %53, %15
  %189 = and i32 %77, %2
  %190 = or i32 %23, %81
  %191 = or i32 %4, %15
  %192 = xor i32 %26, %80
  %193 = and i32 %24, %77
  %194 = or i32 %9, %0
  %195 = or i32 %14, %35
  %196 = and i32 %37, %77
  %197 = shl i32 %173, 1
  %198 = shl i32 %81, 1
  %199 = and i32 %5, %80
  %200 = or i32 %57, %53
  %201 = or i32 %53, %2
  %202 = shl i32 %201, 1
  %203 = or i32 %48, %61
  %204 = and i32 %24, %0
  %205 = or i32 %14, %100
  %206 = or i32 %26, %4
  %207 = or i32 %19, %7
  %208 = xor i32 %53, %115
  %209 = or i32 %151, %49
  %210 = or i32 %115, %49
  %211 = shl i32 %210, 2
  %212 = and i32 %5, %54
  %213 = shl i32 %212, 1
  %214 = xor i32 %19, %115
  %215 = and i32 %37, %21
  %216 = and i32 %16, %0
  %217 = or i32 %111, %2
  %218 = or i32 %26, %100
  %219 = shl i32 %218, 1
  %220 = or i32 %4, %37
  %221 = and i32 %24, %54
  %222 = xor i32 %53, %151
  %223 = or i32 %8, %83
  %224 = and i32 %80, %37
  %225 = or i32 %100, %0
  %226 = xor i32 %8, %225
  %227 = mul i32 %226, 3
  %228 = or i32 %129, %130
  %229 = xor i32 %139, %173
  %230 = and i32 %15, %77
  %231 = or i32 %19, %4
  %232 = and i32 %31, %24
  %233 = shl i32 %232, 1
  %234 = or i32 %24, %111
  %235 = xor i32 %26, %9
  %236 = or i32 %19, %1
  %237 = xor i32 %67, %0
  %238 = shl i32 %237, 1
  %239 = or i32 %57, %0
  %240 = or i32 %26, %81
  %241 = or i32 %37, %30
  %242 = or i32 %4, %2
  %243 = xor i32 %31, %2
  %244 = and i32 %100, %49
  %245 = mul i32 %244, 20
  %246 = and i32 %57, %49
  %247 = mul i32 %246, 11
  %248 = and i32 %100, %0
  %249 = and i32 %57, %0
  %250 = mul i32 %249, 26
  %251 = and i32 %67, %49
  %252 = shl i32 %251, 5
  %253 = mul i32 %129, 35
  %254 = and i32 %67, %0
  %255 = mul i32 %254, 9
  %256 = add i32 %216, %78
  %257 = add i32 %256, %220
  %258 = add i32 %257, %196
  %259 = add i32 %258, %192
  %260 = add i32 %259, %181
  %261 = add i32 %260, %126
  %262 = add i32 %261, %90
  %263 = add i32 %262, %75
  %264 = add i32 %263, %45
  %265 = shl i32 %264, 1
  %266 = add i32 %8, %248
  %267 = mul i32 %266, 13
  %268 = shl i32 %68, 2
  %269 = add i32 %268, -4
  %270 = add i32 %1, -2
  %271 = sub i32 %270, %70
  %272 = add i32 %271, %71
  %273 = add i32 %272, %14
  %274 = add i32 %273, %15
  %275 = add i32 %274, %80
  %276 = add i32 %275, %18
  %277 = sub i32 %276, %40
  %278 = sub i32 %277, %82
  %279 = sub i32 %278, %34
  %280 = sub i32 %279, %91
  %281 = add i32 %280, %92
  %282 = add i32 %281, %104
  %283 = sub i32 %282, %107
  %284 = sub i32 %283, %114
  %285 = add i32 %284, %100
  %286 = sub i32 %285, %122
  %287 = sub i32 %286, %123
  %288 = sub i32 %287, %136
  %289 = sub i32 %288, %137
  %290 = add i32 %289, %160
  %291 = sub i32 %290, %7
  %292 = add i32 %291, %151
  %293 = add i32 %292, %85
  %294 = sub i32 %293, %163
  %295 = sub i32 %294, %16
  %296 = sub i32 %295, %170
  %297 = sub i32 %296, %9
  %298 = add i32 %297, %178
  %299 = sub i32 %298, %185
  %300 = add i32 %299, %188
  %301 = sub i32 %300, %189
  %302 = sub i32 %301, %191
  %303 = sub i32 %302, %198
  %304 = sub i32 %303, %23
  %305 = sub i32 %304, %217
  %306 = add i32 %305, %24
  %307 = add i32 %306, %230
  %308 = add i32 %307, %242
  %309 = add i32 %308, %243
  %310 = sub i32 %309, %17
  %311 = sub i32 %310, %22
  %312 = add i32 %311, %25
  %313 = sub i32 %312, %28
  %314 = sub i32 %313, %29
  %315 = sub i32 %314, %36
  %316 = sub i32 %315, %38
  %317 = sub i32 %316, %39
  %318 = sub i32 %317, %41
  %319 = add i32 %318, %44
  %320 = sub i32 %319, %46
  %321 = add i32 %320, %55
  %322 = add i32 %321, %56
  %323 = add i32 %322, %58
  %324 = sub i32 %323, %66
  %325 = sub i32 %324, %69
  %326 = add i32 %325, %72
  %327 = add i32 %326, %76
  %328 = add i32 %327, %79
  %329 = sub i32 %328, %83
  %330 = sub i32 %329, %84
  %331 = sub i32 %330, %88
  %332 = add i32 %331, %10
  %333 = sub i32 %332, %89
  %334 = sub i32 %333, %94
  %335 = add i32 %334, %98
  %336 = add i32 %335, %99
  %337 = sub i32 %336, %101
  %338 = add i32 %337, %102
  %339 = add i32 %338, %103
  %340 = add i32 %339, %108
  %341 = sub i32 %340, %109
  %342 = sub i32 %341, %110
  %343 = sub i32 %342, %112
  %344 = sub i32 %343, %113
  %345 = add i32 %344, %116
  %346 = add i32 %345, %117
  %347 = add i32 %346, %121
  %348 = sub i32 %347, %124
  %349 = add i32 %348, %125
  %350 = sub i32 %349, %127
  %351 = add i32 %350, %128
  %352 = add i32 %351, %135
  %353 = sub i32 %352, %138
  %354 = sub i32 %353, %143
  %355 = add i32 %354, %144
  %356 = sub i32 %355, %145
  %357 = add i32 %356, %148
  %358 = sub i32 %357, %152
  %359 = sub i32 %358, %153
  %360 = sub i32 %359, %154
  %361 = sub i32 %360, %156
  %362 = add i32 %361, %157
  %363 = sub i32 %362, %158
  %364 = add i32 %363, %159
  %365 = add i32 %364, %161
  %366 = add i32 %365, %162
  %367 = add i32 %366, %166
  %368 = sub i32 %367, %167
  %369 = sub i32 %368, %168
  %370 = add i32 %369, %169
  %371 = sub i32 %370, %171
  %372 = sub i32 %371, %172
  %373 = add i32 %372, %176
  %374 = add i32 %373, %177
  %375 = sub i32 %374, %179
  %376 = add i32 %375, %180
  %377 = sub i32 %376, %182
  %378 = sub i32 %377, %183
  %379 = sub i32 %378, %184
  %380 = add i32 %379, %186
  %381 = add i32 %380, %187
  %382 = sub i32 %381, %190
  %383 = add i32 %382, %193
  %384 = sub i32 %383, %194
  %385 = sub i32 %384, %195
  %386 = sub i32 %385, %199
  %387 = sub i32 %386, %200
  %388 = sub i32 %387, %202
  %389 = sub i32 %388, %204
  %390 = sub i32 %389, %205
  %391 = sub i32 %390, %206
  %392 = sub i32 %391, %207
  %393 = add i32 %392, %208
  %394 = add i32 %393, %209
  %395 = add i32 %394, %214
  %396 = add i32 %395, %215
  %397 = sub i32 %396, %221
  %398 = sub i32 %397, %222
  %399 = add i32 %398, %224
  %400 = add i32 %399, %130
  %401 = add i32 %400, %231
  %402 = add i32 %401, %234
  %403 = sub i32 %402, %235
  %404 = sub i32 %403, %236
  %405 = add i32 %404, %239
  %406 = add i32 %405, %240
  %407 = add i32 %406, %241
  %408 = sub i32 %407, %33
  %409 = sub i32 %408, %43
  %410 = sub i32 %409, %52
  %411 = sub i32 %410, %60
  %412 = sub i32 %411, %73
  %413 = sub i32 %412, %74
  %414 = sub i32 %413, %87
  %415 = sub i32 %414, %106
  %416 = sub i32 %415, %119
  %417 = sub i32 %416, %132
  %418 = add i32 %417, %134
  %419 = add i32 %418, %142
  %420 = add i32 %419, %147
  %421 = sub i32 %420, %150
  %422 = sub i32 %421, %165
  %423 = sub i32 %422, %175
  %424 = sub i32 %423, %197
  %425 = sub i32 %424, %203
  %426 = sub i32 %425, %211
  %427 = sub i32 %426, %213
  %428 = sub i32 %427, %219
  %429 = sub i32 %428, %223
  %430 = sub i32 %429, %228
  %431 = sub i32 %430, %229
  %432 = sub i32 %431, %233
  %433 = sub i32 %432, %238
  %434 = add i32 %433, %245
  %435 = add i32 %434, %247
  %436 = add i32 %435, %250
  %437 = add i32 %436, %252
  %438 = add i32 %437, %253
  %439 = add i32 %438, %255
  %440 = sub i32 %439, %64
  %441 = add i32 %440, %227
  %442 = add i32 %441, %267
  %443 = add i32 %442, %269
  %444 = sub i32 %443, %97
  %445 = add i32 %444, %265
  %446 = icmp eq i32 %13, %445
  %447 = select i1 %446, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %448 = tail call i32 @puts(i8* nonnull dereferenceable(1) %447)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
