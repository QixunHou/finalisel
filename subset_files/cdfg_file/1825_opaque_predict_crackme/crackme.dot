digraph "DFG for'crackme' function" {
	Node0x58bb80[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x58bc20[shape=record, label="  %4 = add i32 %1, 1"];
	Node0x58bce0[shape=record, label="  %5 = or i32 %3, %0"];
	Node0x58bd50[shape=record, label="  %6 = sub i32 %4, %5"];
	Node0x58bdc0[shape=record, label="  %7 = and i32 %1, %0"];
	Node0x58be30[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x58bea0[shape=record, label="  %9 = shl i32 %0, 1"];
	Node0x58bf10[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x58bf80[shape=record, label="  %11 = add i32 %10, %8"];
	Node0x58bff0[shape=record, label="  %12 = or i32 %1, %0"];
	Node0x58c060[shape=record, label="  %13 = sub i32 %11, %12"];
	Node0x58c0d0[shape=record, label="  %14 = and i32 %3, %0"];
	Node0x58c140[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x58c1b0[shape=record, label="  %16 = add i32 %13, %15"];
	Node0x58c220[shape=record, label="  %17 = xor i32 %12, -1"];
	Node0x58c2c0[shape=record, label="  %18 = mul i32 %17, -6"];
	Node0x58c330[shape=record, label="  %19 = xor i32 %5, -1"];
	Node0x58c3d0[shape=record, label="  %20 = mul i32 %19, -3"];
	Node0x58c440[shape=record, label="  %21 = shl i32 %14, 1"];
	Node0x58c4b0[shape=record, label="  %22 = sub i32 %16, %7"];
	Node0x58c520[shape=record, label="  %23 = add i32 %22, %18"];
	Node0x58c590[shape=record, label="  %24 = add i32 %23, %20"];
	Node0x58c600[shape=record, label="  %25 = sub i32 %24, %21"];
	Node0x58c670[shape=record, label="  %26 = icmp eq i32 %6, %25"];
	Node0x52c268[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x58cb10[shape=record, label="  %28 = tail call i32 @puts(i8* nonnull dereferenceable(1) %27)"];
	Node0x58cb60[shape=record, label="  ret void"];
	Node0x58bb80 -> Node0x58bc20;
	Node0x58bc20 -> Node0x58bce0;
	Node0x58bce0 -> Node0x58bd50;
	Node0x58bd50 -> Node0x58bdc0;
	Node0x58bdc0 -> Node0x58be30;
	Node0x58be30 -> Node0x58bea0;
	Node0x58bea0 -> Node0x58bf10;
	Node0x58bf10 -> Node0x58bf80;
	Node0x58bf80 -> Node0x58bff0;
	Node0x58bff0 -> Node0x58c060;
	Node0x58c060 -> Node0x58c0d0;
	Node0x58c0d0 -> Node0x58c140;
	Node0x58c140 -> Node0x58c1b0;
	Node0x58c1b0 -> Node0x58c220;
	Node0x58c220 -> Node0x58c2c0;
	Node0x58c2c0 -> Node0x58c330;
	Node0x58c330 -> Node0x58c3d0;
	Node0x58c3d0 -> Node0x58c440;
	Node0x58c440 -> Node0x58c4b0;
	Node0x58c4b0 -> Node0x58c520;
	Node0x58c520 -> Node0x58c590;
	Node0x58c590 -> Node0x58c600;
	Node0x58c600 -> Node0x58c670;
	Node0x58c670 -> Node0x52c268;
	Node0x52c268 -> Node0x58cb10;
	Node0x58cb10 -> Node0x58cb60;
edge [color=red]
	Node0x58bb80 -> Node0x58bce0;
	Node0x58bc20 -> Node0x58bd50;
	Node0x58bce0 -> Node0x58bd50;
	Node0x58bdc0 -> Node0x58be30;
	Node0x58bea0 -> Node0x58bf10;
	Node0x58bf10 -> Node0x58bf80;
	Node0x58be30 -> Node0x58bf80;
	Node0x58bf80 -> Node0x58c060;
	Node0x58bff0 -> Node0x58c060;
	Node0x58bb80 -> Node0x58c0d0;
	Node0x58c0d0 -> Node0x58c140;
	Node0x58c060 -> Node0x58c1b0;
	Node0x58c140 -> Node0x58c1b0;
	Node0x58bff0 -> Node0x58c220;
	Node0x58c220 -> Node0x58c2c0;
	Node0x58bce0 -> Node0x58c330;
	Node0x58c330 -> Node0x58c3d0;
	Node0x58c0d0 -> Node0x58c440;
	Node0x58c1b0 -> Node0x58c4b0;
	Node0x58bdc0 -> Node0x58c4b0;
	Node0x58c4b0 -> Node0x58c520;
	Node0x58c2c0 -> Node0x58c520;
	Node0x58c520 -> Node0x58c590;
	Node0x58c3d0 -> Node0x58c590;
	Node0x58c590 -> Node0x58c600;
	Node0x58c440 -> Node0x58c600;
	Node0x58bd50 -> Node0x58c670;
	Node0x58c600 -> Node0x58c670;
	Node0x58c670 -> Node0x52c268;
	Node0x52c268 -> Node0x58cb10;
}
