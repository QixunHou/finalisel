digraph "DFG for'main' function" {
	Node0x58cd28[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x58cda8[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x58ce38[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x58d298[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x58d378[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x58d498[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x58d6d0[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x58d788[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x58e6f8[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x58ed80[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x58edf0[shape=record, label="  %9 = add i32 %7, 1"];
	Node0x58ee60[shape=record, label="  %10 = or i32 %6, %8"];
	Node0x58eed0[shape=record, label="  %11 = sub i32 %9, %10"];
	Node0x58ef40[shape=record, label="  %12 = and i32 %7, %6"];
	Node0x58efb0[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x58f020[shape=record, label="  %14 = shl i32 %6, 1"];
	Node0x58f090[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x58f100[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x58f170[shape=record, label="  %17 = or i32 %7, %6"];
	Node0x58f1e0[shape=record, label="  %18 = sub i32 %16, %17"];
	Node0x58f250[shape=record, label="  %19 = and i32 %6, %8"];
	Node0x58f2c0[shape=record, label="  %20 = xor i32 %19, -1"];
	Node0x58f330[shape=record, label="  %21 = add i32 %18, %20"];
	Node0x58f3a0[shape=record, label="  %22 = xor i32 %17, -1"];
	Node0x58f410[shape=record, label="  %23 = mul i32 %22, -6"];
	Node0x58f480[shape=record, label="  %24 = xor i32 %10, -1"];
	Node0x58f4f0[shape=record, label="  %25 = mul i32 %24, -3"];
	Node0x58f560[shape=record, label="  %26 = shl i32 %19, 1"];
	Node0x58f5d0[shape=record, label="  %27 = sub i32 %21, %12"];
	Node0x58f640[shape=record, label="  %28 = add i32 %27, %23"];
	Node0x58f6b0[shape=record, label="  %29 = add i32 %28, %25"];
	Node0x58f720[shape=record, label="  %30 = sub i32 %29, %26"];
	Node0x58f790[shape=record, label="  %31 = icmp eq i32 %11, %30"];
	Node0x52d9d8[shape=record, label="  %32 = select i1 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x58fa30[shape=record, label="  %33 = call i32 @puts(i8* nonnull dereferenceable(1) %32) #5"];
	Node0x58fc88[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x58fde8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x58fea8[shape=record, label="  ret i32 0"];
	Node0x58cd28 -> Node0x58cda8;
	Node0x58cda8 -> Node0x58ce38;
	Node0x58ce38 -> Node0x58d298;
	Node0x58d298 -> Node0x58d378;
	Node0x58d378 -> Node0x58d498;
	Node0x58d498 -> Node0x58d6d0;
	Node0x58d6d0 -> Node0x58d788;
	Node0x58d788 -> Node0x58e6f8;
	Node0x58e6f8 -> Node0x58ed80;
	Node0x58ed80 -> Node0x58edf0;
	Node0x58edf0 -> Node0x58ee60;
	Node0x58ee60 -> Node0x58eed0;
	Node0x58eed0 -> Node0x58ef40;
	Node0x58ef40 -> Node0x58efb0;
	Node0x58efb0 -> Node0x58f020;
	Node0x58f020 -> Node0x58f090;
	Node0x58f090 -> Node0x58f100;
	Node0x58f100 -> Node0x58f170;
	Node0x58f170 -> Node0x58f1e0;
	Node0x58f1e0 -> Node0x58f250;
	Node0x58f250 -> Node0x58f2c0;
	Node0x58f2c0 -> Node0x58f330;
	Node0x58f330 -> Node0x58f3a0;
	Node0x58f3a0 -> Node0x58f410;
	Node0x58f410 -> Node0x58f480;
	Node0x58f480 -> Node0x58f4f0;
	Node0x58f4f0 -> Node0x58f560;
	Node0x58f560 -> Node0x58f5d0;
	Node0x58f5d0 -> Node0x58f640;
	Node0x58f640 -> Node0x58f6b0;
	Node0x58f6b0 -> Node0x58f720;
	Node0x58f720 -> Node0x58f790;
	Node0x58f790 -> Node0x52d9d8;
	Node0x52d9d8 -> Node0x58fa30;
	Node0x58fa30 -> Node0x58fc88;
	Node0x58fc88 -> Node0x58fde8;
	Node0x58fde8 -> Node0x58fea8;
edge [color=red]
	Node0x58cd28 -> Node0x58ce38;
	Node0x58ce38 -> Node0x58d298;
	Node0x58cda8 -> Node0x58d378;
	Node0x58d378 -> Node0x58d498;
	Node0x58cd28 -> Node0x58d6d0;
	Node0x58cda8 -> Node0x58d6d0;
	Node0x58cd28 -> Node0x58d788;
	Node0x58cda8 -> Node0x58e6f8;
	Node0x58e6f8 -> Node0x58ed80;
	Node0x58e6f8 -> Node0x58edf0;
	Node0x58d788 -> Node0x58ee60;
	Node0x58ed80 -> Node0x58ee60;
	Node0x58edf0 -> Node0x58eed0;
	Node0x58ee60 -> Node0x58eed0;
	Node0x58e6f8 -> Node0x58ef40;
	Node0x58d788 -> Node0x58ef40;
	Node0x58ef40 -> Node0x58efb0;
	Node0x58d788 -> Node0x58f020;
	Node0x58f020 -> Node0x58f090;
	Node0x58f090 -> Node0x58f100;
	Node0x58efb0 -> Node0x58f100;
	Node0x58e6f8 -> Node0x58f170;
	Node0x58d788 -> Node0x58f170;
	Node0x58f100 -> Node0x58f1e0;
	Node0x58f170 -> Node0x58f1e0;
	Node0x58d788 -> Node0x58f250;
	Node0x58ed80 -> Node0x58f250;
	Node0x58f250 -> Node0x58f2c0;
	Node0x58f1e0 -> Node0x58f330;
	Node0x58f2c0 -> Node0x58f330;
	Node0x58f170 -> Node0x58f3a0;
	Node0x58f3a0 -> Node0x58f410;
	Node0x58ee60 -> Node0x58f480;
	Node0x58f480 -> Node0x58f4f0;
	Node0x58f250 -> Node0x58f560;
	Node0x58f330 -> Node0x58f5d0;
	Node0x58ef40 -> Node0x58f5d0;
	Node0x58f5d0 -> Node0x58f640;
	Node0x58f410 -> Node0x58f640;
	Node0x58f640 -> Node0x58f6b0;
	Node0x58f4f0 -> Node0x58f6b0;
	Node0x58f6b0 -> Node0x58f720;
	Node0x58f560 -> Node0x58f720;
	Node0x58eed0 -> Node0x58f790;
	Node0x58f720 -> Node0x58f790;
	Node0x58f790 -> Node0x52d9d8;
	Node0x52d9d8 -> Node0x58fa30;
	Node0x58d378 -> Node0x58fc88;
	Node0x58ce38 -> Node0x58fde8;
}
