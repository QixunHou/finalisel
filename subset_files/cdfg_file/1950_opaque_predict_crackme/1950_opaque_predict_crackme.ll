; ModuleID = '../.././c_source_file/1950_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1950_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = or i32 %4, %0
  %6 = xor i32 %5, -1
  %7 = xor i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = or i32 %8, %6
  %10 = xor i32 %2, %1
  %11 = mul i32 %10, 5
  %12 = add i32 %9, %11
  %13 = xor i32 %2, -1
  %14 = and i32 %1, %0
  %15 = xor i32 %14, -1
  %16 = and i32 %13, %15
  %17 = or i32 %2, %1
  %18 = xor i32 %17, %0
  %19 = xor i32 %0, -1
  %20 = and i32 %13, %1
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %19
  %23 = or i32 %1, %0
  %24 = and i32 %7, %23
  %25 = and i32 %4, %0
  %26 = xor i32 %25, -1
  %27 = or i32 %6, %2
  %28 = or i32 %13, %1
  %29 = or i32 %28, %19
  %30 = and i32 %4, %2
  %31 = and i32 %30, %0
  %32 = or i32 %4, %2
  %33 = and i32 %32, %19
  %34 = or i32 %31, %33
  %35 = or i32 %25, %2
  %36 = or i32 %10, %25
  %37 = and i32 %2, %0
  %38 = xor i32 %37, %5
  %39 = and i32 %2, %1
  %40 = or i32 %39, %0
  %41 = or i32 %13, %0
  %42 = xor i32 %41, %1
  %43 = xor i32 %23, -1
  %44 = or i32 %43, %2
  %45 = xor i32 %1, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %2, %0
  %48 = xor i32 %47, %1
  %49 = xor i32 %10, -1
  %50 = xor i32 %49, %0
  %51 = add i32 %2, 1
  %52 = or i32 %8, %1
  %53 = xor i32 %37, -1
  %54 = and i32 %53, %4
  %55 = and i32 %39, %19
  %56 = and i32 %10, %0
  %57 = or i32 %55, %56
  %58 = xor i32 %28, -1
  %59 = or i32 %14, %58
  %60 = and i32 %8, %4
  %61 = xor i32 %53, %1
  %62 = or i32 %7, %6
  %63 = or i32 %10, %43
  %64 = and i32 %23, %8
  %65 = and i32 %13, %46
  %66 = shl i32 %65, 1
  %67 = and i32 %8, %1
  %68 = or i32 %20, %19
  %69 = and i32 %10, %15
  %70 = or i32 %14, %49
  %71 = xor i32 %21, %0
  %72 = shl i32 %71, 1
  %73 = and i32 %39, %0
  %74 = and i32 %10, %19
  %75 = or i32 %73, %74
  %76 = xor i32 %41, -1
  %77 = or i32 %45, %76
  %78 = xor i32 %47, -1
  %79 = or i32 %45, %78
  %80 = or i32 %7, %46
  %81 = xor i32 %37, %23
  %82 = or i32 %49, %19
  %83 = shl i32 %82, 2
  %84 = and i32 %23, %13
  %85 = add i32 %7, 1
  %86 = or i32 %7, %14
  %87 = and i32 %28, %0
  %88 = xor i32 %17, -1
  %89 = add i32 %17, 1
  %90 = or i32 %10, %0
  %91 = xor i32 %90, -1
  %92 = or i32 %31, %91
  %93 = or i32 %8, %46
  %94 = xor i32 %25, %2
  %95 = and i32 %23, %49
  %96 = xor i32 %39, -1
  %97 = xor i32 %96, %0
  %98 = shl i32 %97, 1
  %99 = and i32 %53, %46
  %100 = xor i32 %88, %0
  %101 = or i32 %25, %49
  %102 = or i32 %37, %4
  %103 = or i32 %14, %78
  %104 = and i32 %7, %46
  %105 = and i32 %13, %0
  %106 = xor i32 %105, -1
  %107 = and i32 %106, %1
  %108 = or i32 %37, %20
  %109 = or i32 %88, %0
  %110 = shl i32 %109, 1
  %111 = and i32 %41, %46
  %112 = add i32 %37, 1
  %113 = xor i32 %20, %0
  %114 = and i32 %5, %13
  %115 = add i32 %105, 1
  %116 = or i32 %7, %4
  %117 = xor i32 %15, %2
  %118 = and i32 %5, %8
  %119 = add i32 %20, 1
  %120 = xor i32 %41, %14
  %121 = shl i32 %120, 1
  %122 = and i32 %53, %1
  %123 = and i32 %10, %5
  %124 = or i32 %25, %13
  %125 = shl i32 %124, 1
  %126 = xor i32 %47, %14
  %127 = or i32 %8, %4
  %128 = or i32 %8, %43
  %129 = shl i32 %128, 1
  %130 = and i32 %106, %46
  %131 = shl i32 %130, 1
  %132 = or i32 %37, %1
  %133 = xor i32 %31, -1
  %134 = xor i32 %33, %133
  %135 = or i32 %46, %2
  %136 = and i32 %47, %4
  %137 = xor i32 %73, -1
  %138 = xor i32 %18, %137
  %139 = or i32 %105, %4
  %140 = shl i32 %139, 1
  %141 = or i32 %73, %18
  %142 = xor i32 %10, %0
  %143 = xor i32 %142, -1
  %144 = xor i32 %31, %143
  %145 = and i32 %49, %26
  %146 = or i32 %37, %88
  %147 = xor i32 %37, %17
  %148 = or i32 %49, %43
  %149 = and i32 %45, %53
  %150 = and i32 %17, %0
  %151 = or i32 %78, %1
  %152 = or i32 %17, %0
  %153 = shl i32 %152, 1
  %154 = xor i32 %76, %1
  %155 = or i32 %25, %8
  %156 = shl i32 %155, 1
  %157 = and i32 %96, %0
  %158 = xor i32 %39, %0
  %159 = xor i32 %78, %1
  %160 = or i32 %78, %46
  %161 = or i32 %49, %6
  %162 = or i32 %105, %1
  %163 = or i32 %76, %1
  %164 = or i32 %20, %0
  %165 = and i32 %28, %19
  %166 = xor i32 %150, -1
  %167 = xor i32 %55, %166
  %168 = xor i32 %25, %21
  %169 = or i32 %88, %19
  %170 = or i32 %76, %4
  %171 = and i32 %47, %46
  %172 = shl i32 %171, 1
  %173 = or i32 %45, %2
  %174 = shl i32 %2, 1
  %175 = and i32 %10, %26
  %176 = xor i32 %105, %1
  %177 = and i32 %47, %45
  %178 = and i32 %7, %15
  %179 = or i32 %14, %13
  %180 = and i32 %5, %2
  %181 = or i32 %55, %150
  %182 = or i32 %13, %46
  %183 = or i32 %105, %45
  %184 = shl i32 %183, 1
  %185 = or i32 %7, %43
  %186 = or i32 %105, %58
  %187 = xor i32 %14, %2
  %188 = or i32 %31, %142
  %189 = xor i32 %105, %28
  %190 = and i32 %41, %4
  %191 = shl i32 %190, 1
  %192 = add i32 %23, 1
  %193 = xor i32 %28, %0
  %194 = and i32 %7, %1
  %195 = xor i32 %5, %2
  %196 = shl i32 %195, 1
  %197 = xor i32 %106, %1
  %198 = and i32 %41, %45
  %199 = xor i32 %37, %1
  %200 = or i32 %7, %1
  %201 = and i32 %41, %1
  %202 = and i32 %21, %0
  %203 = or i32 %58, %0
  %204 = and i32 %21, %19
  %205 = shl i32 %204, 1
  %206 = xor i32 %25, %96
  %207 = shl i32 %76, 2
  %208 = add i32 %39, 1
  %209 = or i32 %13, %43
  %210 = and i32 %45, %106
  %211 = or i32 %37, %6
  %212 = xor i32 %43, %2
  %213 = xor i32 %32, %0
  %214 = xor i32 %213, %133
  %215 = and i32 %47, %1
  %216 = xor i32 %6, %2
  %217 = xor i32 %28, %14
  %218 = or i32 %78, %4
  %219 = or i32 %7, %45
  %220 = and i32 %17, %19
  %221 = or i32 %73, %220
  %222 = and i32 %45, %8
  %223 = and i32 %7, %4
  %224 = and i32 %96, %19
  %225 = or i32 %14, %8
  %226 = and i32 %30, %19
  %227 = or i32 %10, %19
  %228 = xor i32 %226, %227
  %229 = or i32 %7, %25
  %230 = shl i32 %229, 1
  %231 = and i32 %45, %2
  %232 = and i32 %10, %23
  %233 = and i32 %7, %45
  %234 = or i32 %39, %25
  %235 = xor i32 %220, %137
  %236 = or i32 %17, %19
  %237 = and i32 %7, %26
  %238 = or i32 %14, %88
  %239 = or i32 %76, %46
  %240 = and i32 %8, %26
  %241 = shl i32 %49, 1
  %242 = or i32 %105, %39
  %243 = xor i32 %26, %2
  %244 = and i32 %106, %4
  %245 = and i32 %23, %2
  %246 = xor i32 %74, 2147483647
  %247 = xor i32 %246, %73
  %248 = shl i32 %247, 1
  %249 = or i32 %37, %43
  %250 = xor i32 %31, %90
  %251 = add i32 %47, 1
  %252 = or i32 %37, %46
  %253 = and i32 %45, %13
  %254 = xor i32 %37, %21
  %255 = or i32 %14, %2
  %256 = shl i32 %255, 1
  %257 = or i32 %73, %143
  %258 = or i32 %14, %76
  %259 = xor i32 %73, %142
  %260 = shl i32 %259, 1
  %261 = and i32 %8, %15
  %262 = or i32 %39, %19
  %263 = or i32 %49, %0
  %264 = shl i32 %47, 1
  %265 = or i32 %28, %0
  %266 = or i32 %96, %0
  %267 = and i32 %7, %5
  %268 = and i32 %8, %46
  %269 = shl i32 %268, 1
  %270 = or i32 %105, %46
  %271 = xor i32 %17, %14
  %272 = or i32 %58, %19
  %273 = and i32 %13, %26
  %274 = xor i32 %227, -1
  %275 = or i32 %226, %274
  %276 = or i32 %45, %8
  %277 = or i32 %21, %0
  %278 = and i32 %32, %0
  %279 = xor i32 %278, -1
  %280 = xor i32 %226, %279
  %281 = or i32 %226, %278
  %282 = and i32 %49, %0
  %283 = and i32 %26, %2
  %284 = xor i32 %105, %96
  %285 = shl i32 %284, 1
  %286 = xor i32 %56, 2147483647
  %287 = xor i32 %286, %55
  %288 = shl i32 %287, 1
  %289 = and i32 %15, %2
  %290 = and i32 %5, %49
  %291 = or i32 %10, %14
  %292 = or i32 %13, %6
  %293 = or i32 %20, %25
  %294 = or i32 %37, %45
  %295 = or i32 %31, %213
  %296 = xor i32 %23, %2
  %297 = or i32 %10, %6
  %298 = and i32 %46, %2
  %299 = or i32 %45, %13
  %300 = shl i32 %14, 1
  %301 = and i32 %88, %19
  %302 = mul i32 %301, 12
  %303 = and i32 %20, %19
  %304 = mul i32 %303, -14
  %305 = and i32 %88, %0
  %306 = and i32 %20, %0
  %307 = shl i32 %306, 3
  %308 = and i32 %58, %19
  %309 = shl i32 %308, 4
  %310 = mul i32 %55, -22
  %311 = and i32 %58, %0
  %312 = shl i32 %311, 2
  %313 = add i32 %4, %0
  %314 = add i32 %313, %23
  %315 = add i32 %314, %45
  %316 = add i32 %315, %20
  %317 = add i32 %316, %17
  %318 = add i32 %317, %105
  %319 = add i32 %318, %117
  %320 = add i32 %319, %94
  %321 = add i32 %320, %271
  %322 = add i32 %321, %265
  %323 = add i32 %322, %237
  %324 = add i32 %323, %225
  %325 = add i32 %324, %202
  %326 = add i32 %325, %175
  %327 = add i32 %326, %161
  %328 = add i32 %327, %148
  %329 = add i32 %328, %108
  %330 = add i32 %329, %86
  %331 = add i32 %330, %144
  %332 = shl i32 %331, 1
  %333 = add i32 %249, %234
  %334 = sub i32 %333, %123
  %335 = add i32 %334, %111
  %336 = sub i32 %335, %79
  %337 = add i32 %336, %38
  %338 = mul i32 %337, 3
  %339 = sub i32 %305, %73
  %340 = mul i32 %339, 7
  %341 = sub i32 %211, %157
  %342 = mul i32 %341, 5
  %343 = add i32 %267, %28
  %344 = shl i32 %343, 2
  %345 = sub i32 %1, %0
  %346 = add i32 %345, %46
  %347 = add i32 %346, %51
  %348 = add i32 %347, %6
  %349 = sub i32 %348, %5
  %350 = add i32 %349, %192
  %351 = add i32 %350, %15
  %352 = sub i32 %351, %16
  %353 = add i32 %352, %27
  %354 = sub i32 %353, %35
  %355 = add i32 %354, %44
  %356 = add i32 %355, %39
  %357 = add i32 %356, %84
  %358 = add i32 %357, %85
  %359 = add i32 %358, %89
  %360 = add i32 %359, %112
  %361 = sub i32 %360, %114
  %362 = add i32 %361, %115
  %363 = add i32 %362, %119
  %364 = sub i32 %363, %135
  %365 = sub i32 %364, %7
  %366 = add i32 %365, %173
  %367 = sub i32 %366, %174
  %368 = add i32 %367, %179
  %369 = sub i32 %368, %180
  %370 = sub i32 %369, %182
  %371 = add i32 %370, %187
  %372 = add i32 %371, %208
  %373 = add i32 %372, %209
  %374 = add i32 %373, %212
  %375 = add i32 %374, %216
  %376 = add i32 %375, %231
  %377 = sub i32 %376, %243
  %378 = add i32 %377, %245
  %379 = add i32 %378, %251
  %380 = sub i32 %379, %253
  %381 = add i32 %380, %41
  %382 = sub i32 %381, %273
  %383 = add i32 %382, %283
  %384 = add i32 %383, %289
  %385 = add i32 %384, %292
  %386 = sub i32 %385, %37
  %387 = add i32 %386, %58
  %388 = sub i32 %387, %296
  %389 = add i32 %388, %298
  %390 = add i32 %389, %299
  %391 = sub i32 %390, %300
  %392 = add i32 %391, %18
  %393 = add i32 %392, %22
  %394 = sub i32 %393, %24
  %395 = sub i32 %394, %29
  %396 = add i32 %395, %36
  %397 = sub i32 %396, %40
  %398 = add i32 %397, %42
  %399 = add i32 %398, %48
  %400 = add i32 %399, %50
  %401 = sub i32 %400, %52
  %402 = sub i32 %401, %54
  %403 = sub i32 %402, %59
  %404 = add i32 %403, %60
  %405 = sub i32 %404, %61
  %406 = add i32 %405, %62
  %407 = add i32 %406, %63
  %408 = add i32 %407, %64
  %409 = sub i32 %408, %66
  %410 = sub i32 %409, %67
  %411 = sub i32 %410, %68
  %412 = add i32 %411, %69
  %413 = add i32 %412, %70
  %414 = add i32 %413, %77
  %415 = sub i32 %414, %80
  %416 = sub i32 %415, %81
  %417 = add i32 %416, %87
  %418 = add i32 %417, %93
  %419 = sub i32 %418, %95
  %420 = add i32 %419, %99
  %421 = add i32 %420, %100
  %422 = sub i32 %421, %101
  %423 = add i32 %422, %102
  %424 = add i32 %423, %103
  %425 = add i32 %424, %104
  %426 = add i32 %425, %107
  %427 = add i32 %426, %113
  %428 = add i32 %427, %116
  %429 = add i32 %428, %118
  %430 = add i32 %429, %122
  %431 = sub i32 %430, %125
  %432 = add i32 %431, %126
  %433 = sub i32 %432, %127
  %434 = sub i32 %433, %132
  %435 = sub i32 %434, %136
  %436 = sub i32 %435, %145
  %437 = sub i32 %436, %146
  %438 = add i32 %437, %147
  %439 = add i32 %438, %149
  %440 = sub i32 %439, %150
  %441 = add i32 %440, %151
  %442 = add i32 %441, %154
  %443 = add i32 %442, %158
  %444 = sub i32 %443, %159
  %445 = add i32 %444, %160
  %446 = sub i32 %445, %162
  %447 = add i32 %446, %163
  %448 = sub i32 %447, %164
  %449 = add i32 %448, %165
  %450 = sub i32 %449, %168
  %451 = add i32 %450, %169
  %452 = add i32 %451, %56
  %453 = add i32 %452, %170
  %454 = sub i32 %453, %176
  %455 = sub i32 %454, %90
  %456 = add i32 %455, %177
  %457 = add i32 %456, %178
  %458 = sub i32 %457, %142
  %459 = sub i32 %458, %185
  %460 = sub i32 %459, %186
  %461 = sub i32 %460, %189
  %462 = add i32 %461, %193
  %463 = add i32 %462, %194
  %464 = sub i32 %463, %196
  %465 = sub i32 %464, %197
  %466 = sub i32 %465, %198
  %467 = add i32 %466, %199
  %468 = sub i32 %467, %200
  %469 = add i32 %468, %201
  %470 = add i32 %469, %203
  %471 = add i32 %470, %206
  %472 = sub i32 %471, %207
  %473 = add i32 %472, %210
  %474 = sub i32 %473, %215
  %475 = add i32 %474, %217
  %476 = add i32 %475, %218
  %477 = add i32 %476, %219
  %478 = sub i32 %477, %222
  %479 = sub i32 %478, %223
  %480 = sub i32 %479, %224
  %481 = add i32 %480, %232
  %482 = add i32 %481, %233
  %483 = add i32 %482, %236
  %484 = sub i32 %483, %238
  %485 = add i32 %484, %239
  %486 = add i32 %485, %240
  %487 = sub i32 %486, %241
  %488 = add i32 %487, %242
  %489 = sub i32 %488, %244
  %490 = sub i32 %489, %74
  %491 = add i32 %490, %252
  %492 = add i32 %491, %254
  %493 = sub i32 %492, %256
  %494 = sub i32 %493, %220
  %495 = add i32 %494, %258
  %496 = add i32 %495, %261
  %497 = sub i32 %496, %262
  %498 = add i32 %497, %263
  %499 = sub i32 %498, %264
  %500 = add i32 %499, %266
  %501 = sub i32 %500, %270
  %502 = sub i32 %501, %272
  %503 = add i32 %502, %227
  %504 = sub i32 %503, %276
  %505 = sub i32 %504, %277
  %506 = sub i32 %505, %282
  %507 = add i32 %506, %290
  %508 = add i32 %507, %291
  %509 = add i32 %508, %293
  %510 = add i32 %509, %294
  %511 = sub i32 %510, %297
  %512 = sub i32 %511, %34
  %513 = sub i32 %512, %57
  %514 = sub i32 %513, %72
  %515 = sub i32 %514, %75
  %516 = sub i32 %515, %83
  %517 = add i32 %516, %92
  %518 = sub i32 %517, %98
  %519 = sub i32 %518, %110
  %520 = sub i32 %519, %121
  %521 = sub i32 %520, %129
  %522 = sub i32 %521, %131
  %523 = sub i32 %522, %134
  %524 = sub i32 %523, %138
  %525 = sub i32 %524, %140
  %526 = add i32 %525, %141
  %527 = sub i32 %526, %153
  %528 = sub i32 %527, %156
  %529 = sub i32 %528, %167
  %530 = sub i32 %529, %172
  %531 = sub i32 %530, %181
  %532 = sub i32 %531, %184
  %533 = add i32 %532, %188
  %534 = sub i32 %533, %191
  %535 = sub i32 %534, %205
  %536 = add i32 %535, %214
  %537 = sub i32 %536, %221
  %538 = add i32 %537, %228
  %539 = sub i32 %538, %230
  %540 = add i32 %539, %235
  %541 = sub i32 %540, %250
  %542 = add i32 %541, %257
  %543 = sub i32 %542, %269
  %544 = sub i32 %543, %275
  %545 = add i32 %544, %280
  %546 = sub i32 %545, %281
  %547 = sub i32 %546, %285
  %548 = add i32 %547, %295
  %549 = add i32 %548, %302
  %550 = add i32 %549, %304
  %551 = sub i32 %550, %307
  %552 = add i32 %551, %309
  %553 = add i32 %552, %310
  %554 = sub i32 %553, %312
  %555 = sub i32 %554, %260
  %556 = add i32 %555, %340
  %557 = add i32 %556, %342
  %558 = add i32 %557, %344
  %559 = sub i32 %558, %248
  %560 = sub i32 %559, %288
  %561 = add i32 %560, %338
  %562 = add i32 %561, %332
  %563 = icmp eq i32 %12, %562
  %564 = select i1 %563, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %565 = tail call i32 @puts(i8* nonnull dereferenceable(1) %564)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
