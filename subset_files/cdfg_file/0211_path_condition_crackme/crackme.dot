digraph "DFG for'crackme' function" {
	Node0x1d42a00[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1d42a70[shape=record, label="  %4 = or i32 %3, %0"];
	Node0x1d42b30[shape=record, label="  %5 = shl i32 %3, 1"];
	Node0x1d42ba0[shape=record, label="  %6 = xor i32 %1, %0"];
	Node0x1d42c10[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x1d42cb0[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x1d42d20[shape=record, label="  %9 = or i32 %1, %0"];
	Node0x1d42d90[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x1d42e00[shape=record, label="  %11 = and i32 %3, %0"];
	Node0x1d42e70[shape=record, label="  %12 = and i32 %1, %0"];
	Node0x1d42f10[shape=record, label="  %13 = mul i32 %12, 3"];
	Node0x1d42f80[shape=record, label="  %14 = add i32 %5, %10"];
	Node0x1d42ff0[shape=record, label="  %15 = sub i32 %14, %11"];
	Node0x1d43060[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x1d430d0[shape=record, label="  %17 = sub i32 %16, %8"];
	Node0x1d43140[shape=record, label="  %18 = icmp eq i32 %4, %17"];
	Node0x1ce3268[shape=record, label="  %19 = select i1 %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1d435e0[shape=record, label="  %20 = tail call i32 @puts(i8* nonnull dereferenceable(1) %19)"];
	Node0x1d43630[shape=record, label="  ret void"];
	Node0x1d42a00 -> Node0x1d42a70;
	Node0x1d42a70 -> Node0x1d42b30;
	Node0x1d42b30 -> Node0x1d42ba0;
	Node0x1d42ba0 -> Node0x1d42c10;
	Node0x1d42c10 -> Node0x1d42cb0;
	Node0x1d42cb0 -> Node0x1d42d20;
	Node0x1d42d20 -> Node0x1d42d90;
	Node0x1d42d90 -> Node0x1d42e00;
	Node0x1d42e00 -> Node0x1d42e70;
	Node0x1d42e70 -> Node0x1d42f10;
	Node0x1d42f10 -> Node0x1d42f80;
	Node0x1d42f80 -> Node0x1d42ff0;
	Node0x1d42ff0 -> Node0x1d43060;
	Node0x1d43060 -> Node0x1d430d0;
	Node0x1d430d0 -> Node0x1d43140;
	Node0x1d43140 -> Node0x1ce3268;
	Node0x1ce3268 -> Node0x1d435e0;
	Node0x1d435e0 -> Node0x1d43630;
edge [color=red]
	Node0x1d42a00 -> Node0x1d42a70;
	Node0x1d42a00 -> Node0x1d42b30;
	Node0x1d42ba0 -> Node0x1d42c10;
	Node0x1d42c10 -> Node0x1d42cb0;
	Node0x1d42d20 -> Node0x1d42d90;
	Node0x1d42a00 -> Node0x1d42e00;
	Node0x1d42e70 -> Node0x1d42f10;
	Node0x1d42b30 -> Node0x1d42f80;
	Node0x1d42d90 -> Node0x1d42f80;
	Node0x1d42f80 -> Node0x1d42ff0;
	Node0x1d42e00 -> Node0x1d42ff0;
	Node0x1d42ff0 -> Node0x1d43060;
	Node0x1d42f10 -> Node0x1d43060;
	Node0x1d43060 -> Node0x1d430d0;
	Node0x1d42cb0 -> Node0x1d430d0;
	Node0x1d42a70 -> Node0x1d43140;
	Node0x1d430d0 -> Node0x1d43140;
	Node0x1d43140 -> Node0x1ce3268;
	Node0x1ce3268 -> Node0x1d435e0;
}
