digraph "DFG for'crackme' function" {
	Node0x640360[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x640a10[shape=record, label="  %4 = shl i32 %0, 1"];
	Node0x640ad0[shape=record, label="  %5 = sub i32 %3, %4"];
	Node0x640b40[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x640bb0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x640c20[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x640c90[shape=record, label="  %9 = xor i32 %0, -1"];
	Node0x640d00[shape=record, label="  %10 = and i32 %9, %1"];
	Node0x640da0[shape=record, label="  %11 = mul i32 %10, 3"];
	Node0x640e10[shape=record, label="  %12 = sub i32 %6, %1"];
	Node0x640e80[shape=record, label="  %13 = add i32 %12, %3"];
	Node0x640ef0[shape=record, label="  %14 = sub i32 %13, %8"];
	Node0x640f60[shape=record, label="  %15 = add i32 %14, %11"];
	Node0x640fd0[shape=record, label="  %16 = icmp eq i32 %5, %15"];
	Node0x5e1268[shape=record, label="  %17 = select i1 %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x641470[shape=record, label="  %18 = tail call i32 @puts(i8* nonnull dereferenceable(1) %17)"];
	Node0x6414c0[shape=record, label="  ret void"];
	Node0x640360 -> Node0x640a10;
	Node0x640a10 -> Node0x640ad0;
	Node0x640ad0 -> Node0x640b40;
	Node0x640b40 -> Node0x640bb0;
	Node0x640bb0 -> Node0x640c20;
	Node0x640c20 -> Node0x640c90;
	Node0x640c90 -> Node0x640d00;
	Node0x640d00 -> Node0x640da0;
	Node0x640da0 -> Node0x640e10;
	Node0x640e10 -> Node0x640e80;
	Node0x640e80 -> Node0x640ef0;
	Node0x640ef0 -> Node0x640f60;
	Node0x640f60 -> Node0x640fd0;
	Node0x640fd0 -> Node0x5e1268;
	Node0x5e1268 -> Node0x641470;
	Node0x641470 -> Node0x6414c0;
edge [color=red]
	Node0x640360 -> Node0x640ad0;
	Node0x640a10 -> Node0x640ad0;
	Node0x640bb0 -> Node0x640c20;
	Node0x640c90 -> Node0x640d00;
	Node0x640d00 -> Node0x640da0;
	Node0x640b40 -> Node0x640e10;
	Node0x640e10 -> Node0x640e80;
	Node0x640360 -> Node0x640e80;
	Node0x640e80 -> Node0x640ef0;
	Node0x640c20 -> Node0x640ef0;
	Node0x640ef0 -> Node0x640f60;
	Node0x640da0 -> Node0x640f60;
	Node0x640ad0 -> Node0x640fd0;
	Node0x640f60 -> Node0x640fd0;
	Node0x640fd0 -> Node0x5e1268;
	Node0x5e1268 -> Node0x641470;
}
