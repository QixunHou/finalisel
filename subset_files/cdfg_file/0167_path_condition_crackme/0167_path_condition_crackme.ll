; ModuleID = '../.././c_source_file/0167_path_condition_crackme.c'
source_filename = "../.././c_source_file/0167_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = mul i32 %6, -2
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %0
  %10 = xor i32 %2, -1
  %11 = and i32 %10, %1
  %12 = xor i32 %11, -1
  %13 = xor i32 %9, %12
  %14 = add i32 %7, %13
  %15 = xor i32 %0, -1
  %16 = and i32 %2, %1
  %17 = and i32 %16, %15
  %18 = or i32 %2, %1
  %19 = and i32 %18, %0
  %20 = xor i32 %19, -1
  %21 = xor i32 %17, %20
  %22 = mul i32 %21, 5
  %23 = add i32 %14, %22
  %24 = and i32 %6, %3
  %25 = shl i32 %24, 1
  %26 = xor i32 %25, -2
  %27 = shl i32 %4, 1
  %28 = xor i32 %27, -1
  %29 = or i32 %4, %3
  %30 = xor i32 %4, %3
  %31 = or i32 %6, %3
  %32 = xor i32 %29, -1
  %33 = mul i32 %32, -7
  %34 = shl i32 %31, 1
  %35 = xor i32 %34, -2
  %36 = and i32 %4, %3
  %37 = shl i32 %36, 2
  %38 = and i32 %10, %0
  %39 = or i32 %10, %1
  %40 = xor i32 %38, %39
  %41 = shl i32 %40, 1
  %42 = xor i32 %1, %0
  %43 = xor i32 %2, %0
  %44 = xor i32 %43, -1
  %45 = and i32 %42, %44
  %46 = shl i32 %45, 1
  %47 = xor i32 %46, -1
  %48 = or i32 %1, %0
  %49 = xor i32 %2, %1
  %50 = xor i32 %49, -1
  %51 = and i32 %48, %50
  %52 = shl i32 %51, 1
  %53 = or i32 %8, %0
  %54 = and i32 %53, %44
  %55 = and i32 %8, %2
  %56 = and i32 %55, %0
  %57 = or i32 %49, %0
  %58 = xor i32 %56, %57
  %59 = xor i32 %16, -1
  %60 = xor i32 %9, %59
  %61 = shl i32 %60, 1
  %62 = or i32 %43, %9
  %63 = and i32 %39, %15
  %64 = or i32 %9, %50
  %65 = or i32 %10, %0
  %66 = xor i32 %65, -1
  %67 = xor i32 %42, -1
  %68 = or i32 %66, %67
  %69 = and i32 %1, %0
  %70 = xor i32 %65, %69
  %71 = or i32 %11, %15
  %72 = shl i32 %71, 1
  %73 = xor i32 %49, %0
  %74 = or i32 %56, %73
  %75 = and i32 %42, %10
  %76 = or i32 %9, %2
  %77 = and i32 %55, %15
  %78 = or i32 %8, %2
  %79 = and i32 %78, %0
  %80 = or i32 %77, %79
  %81 = shl i32 %80, 1
  %82 = or i32 %9, %44
  %83 = or i32 %49, %15
  %84 = xor i32 %59, %0
  %85 = or i32 %16, %0
  %86 = shl i32 %85, 2
  %87 = xor i32 %16, %0
  %88 = or i32 %2, %0
  %89 = xor i32 %88, -1
  %90 = or i32 %42, %89
  %91 = and i32 %53, %10
  %92 = and i32 %88, %8
  %93 = and i32 %2, %0
  %94 = xor i32 %93, -1
  %95 = or i32 %67, %2
  %96 = or i32 %11, %9
  %97 = or i32 %38, %16
  %98 = or i32 %93, %42
  %99 = and i32 %49, %53
  %100 = and i32 %44, %8
  %101 = and i32 %59, %0
  %102 = or i32 %44, %1
  %103 = or i32 %69, %66
  %104 = xor i32 %88, %1
  %105 = and i32 %49, %15
  %106 = and i32 %16, %0
  %107 = xor i32 %106, -1
  %108 = xor i32 %105, %107
  %109 = or i32 %38, %42
  %110 = or i32 %11, %0
  %111 = xor i32 %53, -1
  %112 = or i32 %49, %111
  %113 = and i32 %65, %1
  %114 = xor i32 %106, %73
  %115 = shl i32 %114, 1
  %116 = xor i32 %39, -1
  %117 = or i32 %38, %116
  %118 = or i32 %116, %15
  %119 = or i32 %69, %44
  %120 = xor i32 %9, -1
  %121 = and i32 %43, %120
  %122 = xor i32 %73, -1
  %123 = xor i32 %56, %122
  %124 = or i32 %106, %122
  %125 = xor i32 %48, -1
  %126 = or i32 %93, %125
  %127 = shl i32 %126, 1
  %128 = xor i32 %18, %69
  %129 = shl i32 %128, 1
  %130 = or i32 %111, %2
  %131 = shl i32 %130, 2
  %132 = or i32 %39, %15
  %133 = or i32 %10, %111
  %134 = or i32 %44, %125
  %135 = and i32 %18, %15
  %136 = xor i32 %135, %107
  %137 = or i32 %66, %8
  %138 = xor i32 %18, %0
  %139 = or i32 %106, %138
  %140 = and i32 %42, %94
  %141 = or i32 %16, %15
  %142 = or i32 %69, %50
  %143 = or i32 %106, %135
  %144 = xor i32 %57, -1
  %145 = or i32 %56, %144
  %146 = or i32 %12, %0
  %147 = and i32 %53, %50
  %148 = and i32 %12, %15
  %149 = xor i32 %38, %59
  %150 = shl i32 %149, 1
  %151 = and i32 %10, %120
  %152 = or i32 %44, %67
  %153 = and i32 %49, %120
  %154 = and i32 %43, %53
  %155 = or i32 %17, %19
  %156 = and i32 %88, %67
  %157 = shl i32 %156, 1
  %158 = and i32 %49, %0
  %159 = xor i32 %78, %0
  %160 = or i32 %56, %159
  %161 = or i32 %16, %9
  %162 = or i32 %93, %111
  %163 = or i32 %49, %9
  %164 = or i32 %43, %111
  %165 = xor i32 %18, -1
  %166 = xor i32 %165, %0
  %167 = xor i32 %69, -1
  %168 = and i32 %43, %167
  %169 = shl i32 %65, 1
  %170 = xor i32 %69, %2
  %171 = and i32 %88, %42
  %172 = and i32 %44, %167
  %173 = add i32 %39, 1
  %174 = and i32 %49, %48
  %175 = or i32 %39, %0
  %176 = xor i32 %65, %1
  %177 = and i32 %65, %42
  %178 = and i32 %48, %44
  %179 = or i32 %38, %1
  %180 = or i32 %42, %44
  %181 = shl i32 %180, 1
  %182 = xor i32 %111, %2
  %183 = or i32 %42, %10
  %184 = or i32 %125, %2
  %185 = or i32 %50, %111
  %186 = and i32 %44, %120
  %187 = and i32 %43, %8
  %188 = and i32 %43, %67
  %189 = and i32 %88, %1
  %190 = add i32 %88, 1
  %191 = xor i32 %93, %53
  %192 = shl i32 %191, 1
  %193 = add i32 %2, 1
  %194 = or i32 %69, %165
  %195 = xor i32 %167, %2
  %196 = add i32 %9, 1
  %197 = or i32 %10, %125
  %198 = xor i32 %50, %0
  %199 = xor i32 %53, %2
  %200 = and i32 %49, %167
  %201 = or i32 %50, %15
  %202 = and i32 %43, %48
  %203 = and i32 %50, %15
  %204 = or i32 %69, %10
  %205 = or i32 %43, %8
  %206 = xor i32 %38, -1
  %207 = and i32 %42, %206
  %208 = and i32 %165, %15
  %209 = shl i32 %208, 2
  %210 = and i32 %11, %15
  %211 = mul i32 %210, 22
  %212 = and i32 %165, %0
  %213 = mul i32 %212, 11
  %214 = and i32 %11, %0
  %215 = mul i32 %214, 6
  %216 = and i32 %116, %15
  %217 = mul i32 %216, 12
  %218 = shl i32 %17, 3
  %219 = and i32 %116, %0
  %220 = mul i32 %219, 9
  %221 = add i32 %64, %142
  %222 = sub i32 %221, %24
  %223 = mul i32 %222, 5
  %224 = add i32 %106, %148
  %225 = shl i32 %224, 2
  %226 = sub i32 %16, %70
  %227 = mul i32 %226, 3
  %228 = add i32 %203, -1
  %229 = add i32 %228, %205
  %230 = add i32 %229, %185
  %231 = add i32 %230, %158
  %232 = add i32 %231, %152
  %233 = add i32 %232, %113
  %234 = add i32 %233, %105
  %235 = add i32 %234, %100
  %236 = add i32 %235, %99
  %237 = add i32 %236, %97
  %238 = add i32 %237, %92
  %239 = add i32 %238, %84
  %240 = add i32 %239, %83
  %241 = add i32 %240, %82
  %242 = shl i32 %241, 1
  %243 = sub i32 %15, %9
  %244 = sub i32 %243, %42
  %245 = add i32 %244, %193
  %246 = add i32 %245, %196
  %247 = sub i32 %246, %39
  %248 = add i32 %247, %75
  %249 = sub i32 %248, %76
  %250 = add i32 %249, %38
  %251 = sub i32 %250, %91
  %252 = add i32 %251, %94
  %253 = sub i32 %252, %95
  %254 = add i32 %253, %66
  %255 = sub i32 %254, %133
  %256 = add i32 %255, %151
  %257 = sub i32 %256, %170
  %258 = add i32 %257, %173
  %259 = add i32 %258, %182
  %260 = sub i32 %259, %43
  %261 = add i32 %260, %183
  %262 = add i32 %261, %88
  %263 = sub i32 %262, %184
  %264 = add i32 %263, %190
  %265 = add i32 %264, %195
  %266 = sub i32 %265, %197
  %267 = add i32 %266, %199
  %268 = add i32 %267, %204
  %269 = add i32 %268, %54
  %270 = add i32 %269, %62
  %271 = sub i32 %270, %63
  %272 = sub i32 %271, %68
  %273 = add i32 %272, %87
  %274 = add i32 %273, %90
  %275 = sub i32 %274, %96
  %276 = sub i32 %275, %98
  %277 = sub i32 %276, %101
  %278 = add i32 %277, %102
  %279 = add i32 %278, %103
  %280 = sub i32 %279, %104
  %281 = sub i32 %280, %109
  %282 = sub i32 %281, %110
  %283 = sub i32 %282, %112
  %284 = sub i32 %283, %117
  %285 = add i32 %284, %118
  %286 = sub i32 %285, %119
  %287 = add i32 %286, %121
  %288 = sub i32 %287, %131
  %289 = sub i32 %288, %132
  %290 = sub i32 %289, %134
  %291 = sub i32 %290, %137
  %292 = add i32 %291, %140
  %293 = add i32 %292, %141
  %294 = add i32 %293, %146
  %295 = add i32 %294, %147
  %296 = add i32 %295, %138
  %297 = sub i32 %296, %153
  %298 = sub i32 %297, %154
  %299 = sub i32 %298, %161
  %300 = add i32 %299, %162
  %301 = sub i32 %300, %163
  %302 = sub i32 %301, %164
  %303 = add i32 %302, %166
  %304 = add i32 %303, %168
  %305 = sub i32 %304, %169
  %306 = sub i32 %305, %171
  %307 = add i32 %306, %172
  %308 = sub i32 %307, %174
  %309 = sub i32 %308, %175
  %310 = sub i32 %309, %176
  %311 = add i32 %310, %177
  %312 = sub i32 %311, %178
  %313 = sub i32 %312, %179
  %314 = sub i32 %313, %186
  %315 = add i32 %314, %187
  %316 = add i32 %315, %188
  %317 = sub i32 %316, %189
  %318 = sub i32 %317, %194
  %319 = sub i32 %318, %198
  %320 = add i32 %319, %200
  %321 = sub i32 %320, %201
  %322 = add i32 %321, %202
  %323 = add i32 %322, %207
  %324 = sub i32 %323, %73
  %325 = add i32 %324, %28
  %326 = add i32 %325, %29
  %327 = sub i32 %326, %30
  %328 = add i32 %327, %31
  %329 = sub i32 %328, %41
  %330 = add i32 %329, %47
  %331 = sub i32 %330, %52
  %332 = sub i32 %331, %58
  %333 = sub i32 %332, %61
  %334 = sub i32 %333, %72
  %335 = add i32 %334, %74
  %336 = sub i32 %335, %86
  %337 = add i32 %336, %108
  %338 = sub i32 %337, %123
  %339 = add i32 %338, %124
  %340 = sub i32 %339, %127
  %341 = sub i32 %340, %129
  %342 = sub i32 %341, %136
  %343 = add i32 %342, %139
  %344 = sub i32 %343, %143
  %345 = add i32 %344, %145
  %346 = sub i32 %345, %150
  %347 = sub i32 %346, %155
  %348 = sub i32 %347, %157
  %349 = add i32 %348, %160
  %350 = sub i32 %349, %181
  %351 = sub i32 %350, %192
  %352 = sub i32 %351, %209
  %353 = add i32 %352, %211
  %354 = add i32 %353, %213
  %355 = add i32 %354, %215
  %356 = add i32 %355, %217
  %357 = sub i32 %356, %218
  %358 = add i32 %357, %220
  %359 = add i32 %358, %33
  %360 = sub i32 %359, %37
  %361 = sub i32 %360, %81
  %362 = sub i32 %361, %115
  %363 = add i32 %362, %225
  %364 = add i32 %363, %227
  %365 = add i32 %364, %26
  %366 = sub i32 %365, %35
  %367 = add i32 %366, %223
  %368 = add i32 %367, %242
  %369 = icmp eq i32 %23, %368
  %370 = select i1 %369, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %371 = tail call i32 @puts(i8* nonnull dereferenceable(1) %370)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
