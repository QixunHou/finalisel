digraph "DFG for'crackme' function" {
	Node0x200a9c0[shape=record, label="  %4 = and i32 %2, %0"];
	Node0x200aa80[shape=record, label="  %5 = xor i32 %4, %1"];
	Node0x200b100[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x200b170[shape=record, label="  %7 = xor i32 %2, -1"];
	Node0x200b1e0[shape=record, label="  %8 = and i32 %7, %0"];
	Node0x200b250[shape=record, label="  %9 = or i32 %8, %6"];
	Node0x200b2c0[shape=record, label="  %10 = sub i32 %5, %9"];
	Node0x200b330[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x200b3a0[shape=record, label="  %12 = and i32 %11, %0"];
	Node0x200b410[shape=record, label="  %13 = xor i32 %0, -1"];
	Node0x200b480[shape=record, label="  %14 = and i32 %13, %1"];
	Node0x200b4f0[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x200b560[shape=record, label="  %16 = or i32 %15, %7"];
	Node0x200b5d0[shape=record, label="  %17 = or i32 %2, %1"];
	Node0x200b640[shape=record, label="  %18 = xor i32 %17, -1"];
	Node0x200b6b0[shape=record, label="  %19 = and i32 %18, %13"];
	Node0x200b750[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x200b7c0[shape=record, label="  %21 = and i32 %7, %1"];
	Node0x200b830[shape=record, label="  %22 = and i32 %21, %13"];
	Node0x200b8a0[shape=record, label="  %23 = and i32 %18, %0"];
	Node0x200b910[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x200b980[shape=record, label="  %25 = and i32 %21, %0"];
	Node0x200b9f0[shape=record, label="  %26 = shl i32 %25, 1"];
	Node0x200ba60[shape=record, label="  %27 = and i32 %6, %2"];
	Node0x200bad0[shape=record, label="  %28 = and i32 %27, %13"];
	Node0x200bb40[shape=record, label="  %29 = and i32 %2, %1"];
	Node0x200bbb0[shape=record, label="  %30 = and i32 %29, %13"];
	Node0x200bc20[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x200bc90[shape=record, label="  %32 = and i32 %27, %0"];
	Node0x200bf10[shape=record, label="  %33 = and i32 %29, %0"];
	Node0x200bf80[shape=record, label="  %34 = sub i32 %16, %14"];
	Node0x200bff0[shape=record, label="  %35 = add i32 %34, %12"];
	Node0x200c060[shape=record, label="  %36 = add i32 %35, %22"];
	Node0x200c0d0[shape=record, label="  %37 = sub i32 %36, %28"];
	Node0x200c140[shape=record, label="  %38 = sub i32 %37, %32"];
	Node0x200c1b0[shape=record, label="  %39 = sub i32 %38, %33"];
	Node0x200c220[shape=record, label="  %40 = sub i32 %39, %20"];
	Node0x200c290[shape=record, label="  %41 = sub i32 %40, %24"];
	Node0x200c300[shape=record, label="  %42 = sub i32 %41, %26"];
	Node0x200c370[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x200c3e0[shape=record, label="  %44 = icmp eq i32 %10, %43"];
	Node0x1fab268[shape=record, label="  %45 = select i1 %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x200c880[shape=record, label="  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) %45)"];
	Node0x200c8d0[shape=record, label="  ret void"];
	Node0x200a9c0 -> Node0x200aa80;
	Node0x200aa80 -> Node0x200b100;
	Node0x200b100 -> Node0x200b170;
	Node0x200b170 -> Node0x200b1e0;
	Node0x200b1e0 -> Node0x200b250;
	Node0x200b250 -> Node0x200b2c0;
	Node0x200b2c0 -> Node0x200b330;
	Node0x200b330 -> Node0x200b3a0;
	Node0x200b3a0 -> Node0x200b410;
	Node0x200b410 -> Node0x200b480;
	Node0x200b480 -> Node0x200b4f0;
	Node0x200b4f0 -> Node0x200b560;
	Node0x200b560 -> Node0x200b5d0;
	Node0x200b5d0 -> Node0x200b640;
	Node0x200b640 -> Node0x200b6b0;
	Node0x200b6b0 -> Node0x200b750;
	Node0x200b750 -> Node0x200b7c0;
	Node0x200b7c0 -> Node0x200b830;
	Node0x200b830 -> Node0x200b8a0;
	Node0x200b8a0 -> Node0x200b910;
	Node0x200b910 -> Node0x200b980;
	Node0x200b980 -> Node0x200b9f0;
	Node0x200b9f0 -> Node0x200ba60;
	Node0x200ba60 -> Node0x200bad0;
	Node0x200bad0 -> Node0x200bb40;
	Node0x200bb40 -> Node0x200bbb0;
	Node0x200bbb0 -> Node0x200bc20;
	Node0x200bc20 -> Node0x200bc90;
	Node0x200bc90 -> Node0x200bf10;
	Node0x200bf10 -> Node0x200bf80;
	Node0x200bf80 -> Node0x200bff0;
	Node0x200bff0 -> Node0x200c060;
	Node0x200c060 -> Node0x200c0d0;
	Node0x200c0d0 -> Node0x200c140;
	Node0x200c140 -> Node0x200c1b0;
	Node0x200c1b0 -> Node0x200c220;
	Node0x200c220 -> Node0x200c290;
	Node0x200c290 -> Node0x200c300;
	Node0x200c300 -> Node0x200c370;
	Node0x200c370 -> Node0x200c3e0;
	Node0x200c3e0 -> Node0x1fab268;
	Node0x1fab268 -> Node0x200c880;
	Node0x200c880 -> Node0x200c8d0;
edge [color=red]
	Node0x200a9c0 -> Node0x200aa80;
	Node0x200b170 -> Node0x200b1e0;
	Node0x200b1e0 -> Node0x200b250;
	Node0x200b100 -> Node0x200b250;
	Node0x200aa80 -> Node0x200b2c0;
	Node0x200b250 -> Node0x200b2c0;
	Node0x200b330 -> Node0x200b3a0;
	Node0x200b410 -> Node0x200b480;
	Node0x200b4f0 -> Node0x200b560;
	Node0x200b170 -> Node0x200b560;
	Node0x200b5d0 -> Node0x200b640;
	Node0x200b640 -> Node0x200b6b0;
	Node0x200b410 -> Node0x200b6b0;
	Node0x200b6b0 -> Node0x200b750;
	Node0x200b170 -> Node0x200b7c0;
	Node0x200b7c0 -> Node0x200b830;
	Node0x200b410 -> Node0x200b830;
	Node0x200b640 -> Node0x200b8a0;
	Node0x200b8a0 -> Node0x200b910;
	Node0x200b7c0 -> Node0x200b980;
	Node0x200b980 -> Node0x200b9f0;
	Node0x200b100 -> Node0x200ba60;
	Node0x200ba60 -> Node0x200bad0;
	Node0x200b410 -> Node0x200bad0;
	Node0x200bb40 -> Node0x200bbb0;
	Node0x200b410 -> Node0x200bbb0;
	Node0x200bbb0 -> Node0x200bc20;
	Node0x200ba60 -> Node0x200bc90;
	Node0x200bb40 -> Node0x200bf10;
	Node0x200b560 -> Node0x200bf80;
	Node0x200b480 -> Node0x200bf80;
	Node0x200bf80 -> Node0x200bff0;
	Node0x200b3a0 -> Node0x200bff0;
	Node0x200bff0 -> Node0x200c060;
	Node0x200b830 -> Node0x200c060;
	Node0x200c060 -> Node0x200c0d0;
	Node0x200bad0 -> Node0x200c0d0;
	Node0x200c0d0 -> Node0x200c140;
	Node0x200bc90 -> Node0x200c140;
	Node0x200c140 -> Node0x200c1b0;
	Node0x200bf10 -> Node0x200c1b0;
	Node0x200c1b0 -> Node0x200c220;
	Node0x200b750 -> Node0x200c220;
	Node0x200c220 -> Node0x200c290;
	Node0x200b910 -> Node0x200c290;
	Node0x200c290 -> Node0x200c300;
	Node0x200b9f0 -> Node0x200c300;
	Node0x200c300 -> Node0x200c370;
	Node0x200bc20 -> Node0x200c370;
	Node0x200b2c0 -> Node0x200c3e0;
	Node0x200c370 -> Node0x200c3e0;
	Node0x200c3e0 -> Node0x1fab268;
	Node0x1fab268 -> Node0x200c880;
}
