; ModuleID = '../.././c_source_file/0199_path_condition_crackme.c'
source_filename = "../.././c_source_file/0199_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %0, -1
  %8 = and i32 %2, %1
  %9 = and i32 %8, %7
  %10 = xor i32 %2, %1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = xor i32 %9, %12
  %14 = xor i32 %3, -1
  %15 = or i32 %14, %4
  %16 = xor i32 %15, -1
  %17 = or i32 %16, %5
  %18 = sub i32 %17, %13
  %19 = xor i32 %5, -1
  %20 = and i32 %19, %3
  %21 = xor i32 %20, -1
  %22 = add i32 %18, %21
  %23 = xor i32 %1, -1
  %24 = or i32 %23, %0
  %25 = xor i32 %2, %0
  %26 = and i32 %25, %24
  %27 = or i32 %1, %0
  %28 = and i32 %25, %27
  %29 = and i32 %23, %0
  %30 = or i32 %29, %2
  %31 = xor i32 %27, 2147483647
  %32 = xor i32 %2, -1
  %33 = xor i32 %1, %0
  %34 = or i32 %33, %32
  %35 = xor i32 %29, -1
  %36 = and i32 %25, %35
  %37 = and i32 %23, %2
  %38 = and i32 %37, %0
  %39 = or i32 %23, %2
  %40 = and i32 %39, %7
  %41 = or i32 %38, %40
  %42 = or i32 %10, %7
  %43 = xor i32 %8, %0
  %44 = and i32 %27, %2
  %45 = or i32 %32, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %1
  %48 = or i32 %25, %31
  %49 = shl i32 %48, 1
  %50 = xor i32 %24, -1
  %51 = xor i32 %25, -1
  %52 = or i32 %51, %50
  %53 = and i32 %2, %0
  %54 = xor i32 %53, %24
  %55 = xor i32 %33, -1
  %56 = or i32 %46, %55
  %57 = or i32 %25, %33
  %58 = xor i32 %10, -1
  %59 = and i32 %58, %35
  %60 = or i32 %2, %0
  %61 = and i32 %1, %0
  %62 = or i32 %37, %61
  %63 = xor i32 %35, %2
  %64 = or i32 %29, %58
  %65 = xor i32 %61, -1
  %66 = and i32 %65, %2
  %67 = or i32 %2, %1
  %68 = xor i32 %67, -1
  %69 = xor i32 %68, %0
  %70 = shl i32 %68, 1
  %71 = xor i32 %53, %1
  %72 = and i32 %32, %65
  %73 = and i32 %32, %0
  %74 = or i32 %73, %1
  %75 = and i32 %8, %0
  %76 = and i32 %10, %7
  %77 = or i32 %75, %76
  %78 = shl i32 %77, 1
  %79 = or i32 %25, %50
  %80 = and i32 %33, %32
  %81 = and i32 %45, %1
  %82 = shl i32 %81, 1
  %83 = or i32 %29, %32
  %84 = add i32 %24, 1
  %85 = shl i32 %43, 1
  %86 = xor i32 %85, -2
  %87 = xor i32 %67, %0
  %88 = or i32 %75, %87
  %89 = and i32 %24, %2
  %90 = or i32 %33, %51
  %91 = shl i32 %90, 1
  %92 = and i32 %60, %55
  %93 = or i32 %53, %23
  %94 = xor i32 %73, -1
  %95 = and i32 %94, %23
  %96 = add i32 %25, 1
  %97 = and i32 %37, %7
  %98 = and i32 %39, %0
  %99 = xor i32 %98, -1
  %100 = xor i32 %97, %99
  %101 = or i32 %25, %61
  %102 = xor i32 %60, %1
  %103 = or i32 %61, %68
  %104 = and i32 %68, %7
  %105 = shl i32 %104, 1
  %106 = and i32 %32, %1
  %107 = and i32 %106, %7
  %108 = and i32 %68, %0
  %109 = and i32 %106, %0
  %110 = mul i32 %109, -6
  %111 = shl i32 %97, 2
  %112 = shl i32 %9, 1
  %113 = shl i32 %75, 2
  %114 = xor i32 %5, %4
  %115 = and i32 %114, %15
  %116 = xor i32 %4, -1
  %117 = and i32 %14, %5
  %118 = and i32 %117, %116
  %119 = or i32 %14, %5
  %120 = and i32 %119, %4
  %121 = or i32 %118, %120
  %122 = and i32 %14, %4
  %123 = xor i32 %122, -1
  %124 = xor i32 %114, -1
  %125 = and i32 %124, %123
  %126 = xor i32 %5, %3
  %127 = or i32 %126, %116
  %128 = or i32 %19, %3
  %129 = or i32 %128, %4
  %130 = and i32 %4, %3
  %131 = or i32 %5, %3
  %132 = xor i32 %131, %130
  %133 = add i32 %4, 1
  %134 = or i32 %5, %4
  %135 = and i32 %134, %3
  %136 = and i32 %19, %4
  %137 = xor i32 %136, -1
  %138 = and i32 %137, %3
  %139 = and i32 %5, %3
  %140 = xor i32 %139, -1
  %141 = or i32 %140, %4
  %142 = and i32 %5, %4
  %143 = xor i32 %142, -1
  %144 = shl i32 %143, 1
  %145 = xor i32 %118, %127
  %146 = or i32 %19, %16
  %147 = or i32 %4, %3
  %148 = and i32 %147, %124
  %149 = xor i32 %4, %3
  %150 = and i32 %149, %5
  %151 = or i32 %142, %3
  %152 = xor i32 %131, -1
  %153 = or i32 %130, %152
  %154 = and i32 %117, %4
  %155 = xor i32 %119, %4
  %156 = xor i32 %155, -1
  %157 = xor i32 %154, %156
  %158 = and i32 %139, %4
  %159 = and i32 %126, %116
  %160 = xor i32 %158, -1
  %161 = xor i32 %159, %160
  %162 = or i32 %149, %124
  %163 = or i32 %19, %4
  %164 = xor i32 %163, -1
  %165 = xor i32 %164, %3
  %166 = xor i32 %126, -1
  %167 = and i32 %166, %4
  %168 = shl i32 %167, 1
  %169 = xor i32 %128, %130
  %170 = shl i32 %137, 1
  %171 = xor i32 %130, -1
  %172 = and i32 %124, %171
  %173 = xor i32 %166, %4
  %174 = xor i32 %149, -1
  %175 = and i32 %134, %174
  %176 = xor i32 %134, %130
  %177 = or i32 %21, %4
  %178 = xor i32 %147, %5
  %179 = xor i32 %163, %130
  %180 = xor i32 %128, -1
  %181 = or i32 %152, %4
  %182 = or i32 %122, %5
  %183 = and i32 %163, %174
  %184 = xor i32 %20, %4
  %185 = or i32 %136, %149
  %186 = xor i32 %142, %147
  %187 = add i32 %139, 1
  %188 = and i32 %15, %124
  %189 = shl i32 %188, 1
  %190 = and i32 %114, %174
  %191 = add i32 %122, 1
  %192 = or i32 %126, %4
  %193 = xor i32 %154, %192
  %194 = and i32 %126, %171
  %195 = and i32 %137, %14
  %196 = and i32 %128, %116
  %197 = and i32 %166, %123
  %198 = or i32 %136, %174
  %199 = or i32 %124, %16
  %200 = and i32 %149, %124
  %201 = and i32 %15, %166
  %202 = and i32 %131, %4
  %203 = or i32 %130, %124
  %204 = or i32 %124, %3
  %205 = xor i32 %21, %4
  %206 = xor i32 %171, %5
  %207 = or i32 %114, %122
  %208 = xor i32 %139, %4
  %209 = or i32 %142, %20
  %210 = xor i32 %147, -1
  %211 = or i32 %210, %5
  %212 = and i32 %149, %137
  %213 = or i32 %149, %164
  %214 = or i32 %174, %5
  %215 = and i32 %119, %116
  %216 = or i32 %154, %215
  %217 = and i32 %139, %116
  %218 = or i32 %217, %202
  %219 = and i32 %21, %4
  %220 = or i32 %126, %210
  %221 = or i32 %142, %16
  %222 = and i32 %124, %174
  %223 = and i32 %131, %116
  %224 = or i32 %158, %223
  %225 = xor i32 %163, %3
  %226 = and i32 %114, %149
  %227 = or i32 %166, %210
  %228 = and i32 %137, %174
  %229 = xor i32 %123, %5
  %230 = or i32 %130, %5
  %231 = xor i32 %142, %15
  %232 = or i32 %130, %19
  %233 = and i32 %126, %147
  %234 = shl i32 %233, 1
  %235 = xor i32 %122, %21
  %236 = and i32 %147, %166
  %237 = or i32 %152, %116
  %238 = xor i32 %134, -1
  %239 = xor i32 %238, %3
  %240 = or i32 %130, %166
  %241 = shl i32 %240, 1
  %242 = or i32 %142, %174
  %243 = and i32 %166, %171
  %244 = xor i32 %126, %4
  %245 = xor i32 %244, -1
  %246 = xor i32 %154, %245
  %247 = or i32 %154, %155
  %248 = or i32 %128, %116
  %249 = or i32 %164, %174
  %250 = or i32 %130, %180
  %251 = or i32 %20, %122
  %252 = shl i32 %251, 1
  %253 = shl i32 %139, 1
  %254 = xor i32 %158, %244
  %255 = shl i32 %254, 1
  %256 = or i32 %164, %3
  %257 = or i32 %142, %149
  %258 = or i32 %149, %19
  %259 = or i32 %180, %4
  %260 = xor i32 %136, %128
  %261 = or i32 %166, %4
  %262 = and i32 %163, %3
  %263 = or i32 %114, %3
  %264 = xor i32 %215, 2147483647
  %265 = xor i32 %264, %154
  %266 = or i32 %136, %180
  %267 = and i32 %21, %116
  %268 = or i32 %131, %4
  %269 = or i32 %114, %16
  %270 = and i32 %19, %174
  %271 = xor i32 %131, %4
  %272 = xor i32 %271, %160
  %273 = xor i32 %122, %140
  %274 = or i32 %136, %139
  %275 = or i32 %124, %14
  %276 = shl i32 %275, 1
  %277 = and i32 %149, %19
  %278 = or i32 %122, %124
  %279 = xor i32 %217, -1
  %280 = xor i32 %202, %279
  %281 = and i32 %163, %149
  %282 = or i32 %180, %116
  %283 = or i32 %164, %14
  %284 = shl i32 %283, 2
  %285 = xor i32 %192, 2147483647
  %286 = or i32 %285, %154
  %287 = and i32 %114, %14
  %288 = and i32 %128, %4
  %289 = or i32 %142, %152
  %290 = or i32 %126, %122
  %291 = xor i32 %130, %5
  %292 = or i32 %238, %3
  %293 = and i32 %143, %14
  %294 = or i32 %130, %238
  %295 = and i32 %114, %147
  %296 = or i32 %158, %271
  %297 = and i32 %134, %149
  %298 = shl i32 %297, 1
  %299 = xor i32 %143, %3
  %300 = and i32 %126, %123
  %301 = and i32 %126, %15
  %302 = or i32 %122, %166
  %303 = shl i32 %302, 1
  %304 = xor i32 %142, %3
  %305 = or i32 %140, %116
  %306 = and i32 %126, %4
  %307 = or i32 %217, %306
  %308 = or i32 %166, %16
  %309 = or i32 %142, %14
  %310 = and i32 %124, %14
  %311 = and i32 %19, %171
  %312 = or i32 %139, %4
  %313 = shl i32 %312, 1
  %314 = xor i32 %134, %3
  %315 = and i32 %114, %123
  %316 = xor i32 %15, %5
  %317 = and i32 %143, %174
  %318 = xor i32 %128, %4
  %319 = or i32 %114, %210
  %320 = xor i32 %120, -1
  %321 = xor i32 %118, %320
  %322 = or i32 %124, %174
  %323 = or i32 %158, %159
  %324 = or i32 %126, %130
  %325 = or i32 %139, %122
  %326 = xor i32 %137, %3
  %327 = or i32 %136, %3
  %328 = or i32 %158, %245
  %329 = xor i32 %142, %21
  %330 = or i32 %142, %210
  %331 = shl i32 %131, 1
  %332 = and i32 %140, %116
  %333 = and i32 %134, %14
  %334 = xor i32 %306, %279
  %335 = and i32 %114, %3
  %336 = or i32 %114, %14
  %337 = xor i32 %223, %160
  %338 = xor i32 %136, %3
  %339 = xor i32 %122, %5
  %340 = and i32 %147, %19
  %341 = or i32 %19, %210
  %342 = and i32 %15, %19
  %343 = shl i32 %342, 1
  %344 = and i32 %163, %14
  %345 = shl i32 %344, 1
  %346 = xor i32 %16, %5
  %347 = shl i32 %346, 1
  %348 = and i32 %143, %3
  %349 = shl i32 %348, 1
  %350 = or i32 %154, %244
  %351 = xor i32 %140, %4
  %352 = add i32 %163, 1
  %353 = or i32 %20, %116
  %354 = xor i32 %136, %140
  %355 = or i32 %20, %4
  %356 = or i32 %124, %210
  %357 = and i32 %140, %4
  %358 = and i32 %124, %3
  %359 = xor i32 %210, %5
  %360 = and i32 %19, %123
  %361 = shl i32 %192, 1
  %362 = and i32 %147, %5
  %363 = or i32 %139, %116
  %364 = shl i32 %363, 2
  %365 = or i32 %114, %174
  %366 = shl i32 %122, 1
  %367 = and i32 %114, %171
  %368 = xor i32 %152, %4
  %369 = add i32 %114, 1
  %370 = or i32 %126, %16
  %371 = or i32 %19, %174
  %372 = and i32 %174, %5
  %373 = and i32 %171, %5
  %374 = xor i32 %127, -1
  %375 = or i32 %118, %374
  %376 = add i32 %147, 1
  %377 = or i32 %131, %116
  %378 = xor i32 %142, %131
  %379 = and i32 %149, %143
  %380 = shl i32 %379, 1
  %381 = and i32 %166, %116
  %382 = or i32 %136, %14
  %383 = or i32 %166, %116
  %384 = or i32 %149, %5
  %385 = and i32 %123, %5
  %386 = shl i32 %385, 1
  %387 = or i32 %149, %238
  %388 = and i32 %152, %116
  %389 = mul i32 %388, 20
  %390 = and i32 %20, %116
  %391 = mul i32 %390, 26
  %392 = and i32 %152, %4
  %393 = mul i32 %392, 17
  %394 = and i32 %20, %4
  %395 = and i32 %180, %116
  %396 = mul i32 %395, 10
  %397 = mul i32 %217, 34
  %398 = and i32 %180, %4
  %399 = mul i32 %398, 13
  %400 = mul i32 %158, 25
  %401 = sub i32 %107, %44
  %402 = add i32 %401, %92
  %403 = add i32 %402, %180
  %404 = add i32 %403, %324
  %405 = sub i32 %404, %325
  %406 = mul i32 %405, 3
  %407 = add i32 %339, %369
  %408 = sub i32 %407, %237
  %409 = add i32 %408, %394
  %410 = add i32 %409, %195
  %411 = mul i32 %410, 5
  %412 = sub i32 -2, %27
  %413 = add i32 %412, %60
  %414 = add i32 %413, %34
  %415 = add i32 %414, %59
  %416 = add i32 %415, %373
  %417 = add i32 %416, %371
  %418 = add i32 %417, %238
  %419 = add i32 %418, %311
  %420 = add i32 %419, %229
  %421 = add i32 %420, %211
  %422 = add i32 %421, %128
  %423 = add i32 %422, %178
  %424 = add i32 %423, %136
  %425 = add i32 %424, %333
  %426 = add i32 %425, %330
  %427 = add i32 %426, %299
  %428 = add i32 %427, %290
  %429 = add i32 %428, %248
  %430 = add i32 %429, %243
  %431 = add i32 %430, %212
  %432 = add i32 %431, %207
  %433 = add i32 %432, %204
  %434 = add i32 %433, %196
  %435 = add i32 %434, %190
  %436 = add i32 %435, %121
  %437 = add i32 %436, %265
  %438 = add i32 %437, %286
  %439 = shl i32 %438, 1
  %440 = sub i32 1, %0
  %441 = add i32 %440, %84
  %442 = sub i32 %441, %30
  %443 = add i32 %442, %63
  %444 = sub i32 %443, %66
  %445 = add i32 %444, %72
  %446 = add i32 %445, %80
  %447 = add i32 %446, %83
  %448 = add i32 %447, %89
  %449 = add i32 %448, %96
  %450 = add i32 %449, 1
  %451 = sub i32 %450, %28
  %452 = sub i32 %451, %26
  %453 = add i32 %452, %36
  %454 = sub i32 %453, %11
  %455 = sub i32 %454, %42
  %456 = add i32 %455, %43
  %457 = sub i32 %456, %47
  %458 = sub i32 %457, %52
  %459 = sub i32 %458, %54
  %460 = add i32 %459, %56
  %461 = add i32 %460, %57
  %462 = add i32 %461, %62
  %463 = add i32 %462, %64
  %464 = sub i32 %463, %69
  %465 = sub i32 %464, %70
  %466 = sub i32 %465, %71
  %467 = add i32 %466, %74
  %468 = add i32 %467, %79
  %469 = sub i32 %468, %93
  %470 = add i32 %469, %95
  %471 = add i32 %470, %101
  %472 = sub i32 %471, %102
  %473 = sub i32 %472, %103
  %474 = sub i32 %473, %108
  %475 = add i32 %474, %38
  %476 = add i32 %475, %133
  %477 = add i32 %476, %4
  %478 = add i32 %477, %41
  %479 = sub i32 %478, %49
  %480 = sub i32 %479, %82
  %481 = sub i32 %480, %88
  %482 = sub i32 %481, %91
  %483 = add i32 %482, %100
  %484 = sub i32 %483, %105
  %485 = add i32 %484, %110
  %486 = sub i32 %485, %111
  %487 = sub i32 %486, %112
  %488 = add i32 %487, %113
  %489 = sub i32 %488, %5
  %490 = add i32 %489, %191
  %491 = sub i32 %490, %5
  %492 = add i32 %491, %16
  %493 = add i32 %492, %147
  %494 = add i32 %493, %376
  %495 = sub i32 %494, %78
  %496 = sub i32 %495, %86
  %497 = sub i32 %496, %146
  %498 = sub i32 %497, %150
  %499 = sub i32 %498, %134
  %500 = add i32 %499, %182
  %501 = add i32 %500, %187
  %502 = sub i32 %501, %206
  %503 = sub i32 %502, %214
  %504 = add i32 %503, %163
  %505 = add i32 %504, %230
  %506 = add i32 %505, %232
  %507 = add i32 %506, %258
  %508 = add i32 %507, %270
  %509 = add i32 %508, %277
  %510 = sub i32 %509, %291
  %511 = add i32 %510, %166
  %512 = sub i32 %511, %20
  %513 = add i32 %512, %114
  %514 = sub i32 %513, %316
  %515 = sub i32 %514, %340
  %516 = sub i32 %515, %341
  %517 = sub i32 %516, %142
  %518 = add i32 %517, %152
  %519 = add i32 %518, %352
  %520 = sub i32 %519, %359
  %521 = sub i32 %520, %360
  %522 = add i32 %521, %362
  %523 = sub i32 %522, %366
  %524 = sub i32 %523, %372
  %525 = sub i32 %524, %126
  %526 = sub i32 %525, %384
  %527 = sub i32 %526, %115
  %528 = sub i32 %527, %125
  %529 = add i32 %528, %127
  %530 = add i32 %529, %129
  %531 = add i32 %530, %132
  %532 = sub i32 %531, %135
  %533 = add i32 %532, %138
  %534 = add i32 %533, %141
  %535 = sub i32 %534, %144
  %536 = sub i32 %535, %148
  %537 = add i32 %536, %151
  %538 = add i32 %537, %153
  %539 = add i32 %538, %162
  %540 = sub i32 %539, %165
  %541 = sub i32 %540, %169
  %542 = sub i32 %541, %170
  %543 = sub i32 %542, %172
  %544 = sub i32 %543, %173
  %545 = sub i32 %544, %175
  %546 = sub i32 %545, %176
  %547 = sub i32 %546, %177
  %548 = sub i32 %547, %179
  %549 = add i32 %548, %181
  %550 = sub i32 %549, %183
  %551 = add i32 %550, %184
  %552 = sub i32 %551, %185
  %553 = sub i32 %552, %186
  %554 = sub i32 %553, %194
  %555 = sub i32 %554, %197
  %556 = sub i32 %555, %198
  %557 = add i32 %556, %199
  %558 = sub i32 %557, %200
  %559 = sub i32 %558, %201
  %560 = add i32 %559, %202
  %561 = add i32 %560, %203
  %562 = sub i32 %561, %205
  %563 = sub i32 %562, %208
  %564 = add i32 %563, %209
  %565 = sub i32 %564, %213
  %566 = add i32 %565, %219
  %567 = add i32 %566, %220
  %568 = sub i32 %567, %221
  %569 = sub i32 %568, %222
  %570 = sub i32 %569, %225
  %571 = add i32 %570, %226
  %572 = sub i32 %571, %227
  %573 = add i32 %572, %228
  %574 = sub i32 %573, %231
  %575 = add i32 %574, %235
  %576 = sub i32 %575, %236
  %577 = sub i32 %576, %239
  %578 = add i32 %577, %242
  %579 = add i32 %578, %249
  %580 = sub i32 %579, %250
  %581 = sub i32 %580, %253
  %582 = sub i32 %581, %256
  %583 = add i32 %582, %257
  %584 = sub i32 %583, %259
  %585 = sub i32 %584, %260
  %586 = sub i32 %585, %261
  %587 = sub i32 %586, %262
  %588 = add i32 %587, %263
  %589 = add i32 %588, %266
  %590 = add i32 %589, %267
  %591 = sub i32 %590, %159
  %592 = add i32 %591, %268
  %593 = sub i32 %592, %269
  %594 = sub i32 %593, %273
  %595 = sub i32 %594, %274
  %596 = sub i32 %595, %278
  %597 = add i32 %596, %281
  %598 = sub i32 %597, %282
  %599 = add i32 %598, %287
  %600 = sub i32 %599, %288
  %601 = sub i32 %600, %289
  %602 = sub i32 %601, %292
  %603 = add i32 %602, %293
  %604 = add i32 %603, %294
  %605 = sub i32 %604, %295
  %606 = add i32 %605, %300
  %607 = add i32 %606, %301
  %608 = add i32 %607, %304
  %609 = sub i32 %608, %305
  %610 = sub i32 %609, %308
  %611 = sub i32 %610, %309
  %612 = add i32 %611, %310
  %613 = add i32 %612, %244
  %614 = add i32 %613, %314
  %615 = add i32 %614, %315
  %616 = sub i32 %615, %317
  %617 = sub i32 %616, %318
  %618 = add i32 %617, %319
  %619 = sub i32 %618, %322
  %620 = sub i32 %619, %326
  %621 = sub i32 %620, %327
  %622 = sub i32 %621, %271
  %623 = sub i32 %622, %329
  %624 = sub i32 %623, %331
  %625 = add i32 %624, %332
  %626 = sub i32 %625, %306
  %627 = sub i32 %626, %335
  %628 = add i32 %627, %336
  %629 = add i32 %628, %338
  %630 = sub i32 %629, %343
  %631 = sub i32 %630, %347
  %632 = sub i32 %631, %351
  %633 = add i32 %632, %353
  %634 = add i32 %633, %354
  %635 = add i32 %634, %355
  %636 = sub i32 %635, %356
  %637 = add i32 %636, %357
  %638 = add i32 %637, %358
  %639 = add i32 %638, %365
  %640 = add i32 %639, %367
  %641 = add i32 %640, %368
  %642 = sub i32 %641, %370
  %643 = sub i32 %642, %377
  %644 = sub i32 %643, %378
  %645 = add i32 %644, %381
  %646 = sub i32 %645, %382
  %647 = sub i32 %646, %383
  %648 = sub i32 %647, %386
  %649 = sub i32 %648, %387
  %650 = sub i32 %649, %145
  %651 = add i32 %650, %157
  %652 = add i32 %651, %161
  %653 = sub i32 %652, %168
  %654 = sub i32 %653, %189
  %655 = add i32 %654, %193
  %656 = add i32 %655, %216
  %657 = sub i32 %656, %218
  %658 = sub i32 %657, %224
  %659 = sub i32 %658, %234
  %660 = sub i32 %659, %241
  %661 = sub i32 %660, %246
  %662 = add i32 %661, %247
  %663 = sub i32 %662, %252
  %664 = add i32 %663, %272
  %665 = sub i32 %664, %276
  %666 = add i32 %665, %280
  %667 = sub i32 %666, %284
  %668 = sub i32 %667, %296
  %669 = sub i32 %668, %298
  %670 = sub i32 %669, %303
  %671 = add i32 %670, %307
  %672 = sub i32 %671, %313
  %673 = add i32 %672, %321
  %674 = sub i32 %673, %323
  %675 = add i32 %674, %328
  %676 = sub i32 %675, %334
  %677 = sub i32 %676, %337
  %678 = sub i32 %677, %345
  %679 = sub i32 %678, %349
  %680 = sub i32 %679, %350
  %681 = sub i32 %680, %361
  %682 = sub i32 %681, %364
  %683 = add i32 %682, %375
  %684 = sub i32 %683, %380
  %685 = add i32 %684, %389
  %686 = add i32 %685, %391
  %687 = add i32 %686, %393
  %688 = add i32 %687, %396
  %689 = add i32 %688, %397
  %690 = add i32 %689, %399
  %691 = add i32 %690, %400
  %692 = sub i32 %691, %255
  %693 = add i32 %692, %411
  %694 = add i32 %693, %406
  %695 = add i32 %694, %439
  %696 = icmp eq i32 %22, %695
  %697 = select i1 %696, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %698 = tail call i32 @puts(i8* nonnull dereferenceable(1) %697)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
