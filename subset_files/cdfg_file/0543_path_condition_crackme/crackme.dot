digraph "DFG for'crackme' function" {
	Node0x22f6a80[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x22f6af0[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x22f6b60[shape=record, label="  %7 = sub i32 %6, %5"];
	Node0x22f71e0[shape=record, label="  %8 = xor i32 %2, -1"];
	Node0x22f7250[shape=record, label="  %9 = and i32 %8, %1"];
	Node0x22f72c0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0x22f7360[shape=record, label="  %11 = shl i32 %1, 1"];
	Node0x22f7400[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x22f7470[shape=record, label="  %13 = or i32 %2, %1"];
	Node0x22f7510[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x22f75b0[shape=record, label="  %15 = or i32 %14, 3"];
	Node0x22f7620[shape=record, label="  %16 = shl i32 %9, 1"];
	Node0x22f76c0[shape=record, label="  %17 = xor i32 %0, 2147483647"];
	Node0x22f7730[shape=record, label="  %18 = and i32 %17, %3"];
	Node0x22f77a0[shape=record, label="  %19 = xor i32 %3, %0"];
	Node0x22f7810[shape=record, label="  %20 = shl i32 %19, 1"];
	Node0x22f7880[shape=record, label="  %21 = xor i32 %19, -1"];
	Node0x22f78f0[shape=record, label="  %22 = shl i32 %6, 1"];
	Node0x22f7960[shape=record, label="  %23 = xor i32 %22, -2"];
	Node0x22f79d0[shape=record, label="  %24 = xor i32 %3, -1"];
	Node0x22f7a40[shape=record, label="  %25 = and i32 %24, %0"];
	Node0x22f7ab0[shape=record, label="  %26 = shl i32 %18, 1"];
	Node0x22f7b20[shape=record, label="  %27 = sub i32 %25, %2"];
	Node0x22f7b90[shape=record, label="  %28 = mul i32 %27, 3"];
	Node0x22f7c00[shape=record, label="  %29 = xor i32 %0, -1"];
	Node0x22f7c70[shape=record, label="  %30 = add i32 %29, %1"];
	Node0x22f7ce0[shape=record, label="  %31 = sub i32 %30, %2"];
	Node0x22f7d50[shape=record, label="  %32 = add i32 %31, %10"];
	Node0x22f7fd0[shape=record, label="  %33 = add i32 %32, %12"];
	Node0x22f8040[shape=record, label="  %34 = sub i32 %33, %16"];
	Node0x22f80b0[shape=record, label="  %35 = add i32 %34, %21"];
	Node0x22f8120[shape=record, label="  %36 = add i32 %35, %15"];
	Node0x22f8190[shape=record, label="  %37 = sub i32 %36, %20"];
	Node0x22f8200[shape=record, label="  %38 = add i32 %37, %26"];
	Node0x22f8270[shape=record, label="  %39 = sub i32 %38, %23"];
	Node0x22f82e0[shape=record, label="  %40 = add i32 %39, %28"];
	Node0x22f8350[shape=record, label="  %41 = icmp eq i32 %7, %40"];
	Node0x2297268[shape=record, label="  %42 = select i1 %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x22f87f0[shape=record, label="  %43 = tail call i32 @puts(i8* nonnull dereferenceable(1) %42)"];
	Node0x22f8840[shape=record, label="  ret void"];
	Node0x22f6a80 -> Node0x22f6af0;
	Node0x22f6af0 -> Node0x22f6b60;
	Node0x22f6b60 -> Node0x22f71e0;
	Node0x22f71e0 -> Node0x22f7250;
	Node0x22f7250 -> Node0x22f72c0;
	Node0x22f72c0 -> Node0x22f7360;
	Node0x22f7360 -> Node0x22f7400;
	Node0x22f7400 -> Node0x22f7470;
	Node0x22f7470 -> Node0x22f7510;
	Node0x22f7510 -> Node0x22f75b0;
	Node0x22f75b0 -> Node0x22f7620;
	Node0x22f7620 -> Node0x22f76c0;
	Node0x22f76c0 -> Node0x22f7730;
	Node0x22f7730 -> Node0x22f77a0;
	Node0x22f77a0 -> Node0x22f7810;
	Node0x22f7810 -> Node0x22f7880;
	Node0x22f7880 -> Node0x22f78f0;
	Node0x22f78f0 -> Node0x22f7960;
	Node0x22f7960 -> Node0x22f79d0;
	Node0x22f79d0 -> Node0x22f7a40;
	Node0x22f7a40 -> Node0x22f7ab0;
	Node0x22f7ab0 -> Node0x22f7b20;
	Node0x22f7b20 -> Node0x22f7b90;
	Node0x22f7b90 -> Node0x22f7c00;
	Node0x22f7c00 -> Node0x22f7c70;
	Node0x22f7c70 -> Node0x22f7ce0;
	Node0x22f7ce0 -> Node0x22f7d50;
	Node0x22f7d50 -> Node0x22f7fd0;
	Node0x22f7fd0 -> Node0x22f8040;
	Node0x22f8040 -> Node0x22f80b0;
	Node0x22f80b0 -> Node0x22f8120;
	Node0x22f8120 -> Node0x22f8190;
	Node0x22f8190 -> Node0x22f8200;
	Node0x22f8200 -> Node0x22f8270;
	Node0x22f8270 -> Node0x22f82e0;
	Node0x22f82e0 -> Node0x22f8350;
	Node0x22f8350 -> Node0x2297268;
	Node0x2297268 -> Node0x22f87f0;
	Node0x22f87f0 -> Node0x22f8840;
edge [color=red]
	Node0x22f6af0 -> Node0x22f6b60;
	Node0x22f6a80 -> Node0x22f6b60;
	Node0x22f71e0 -> Node0x22f7250;
	Node0x22f7250 -> Node0x22f72c0;
	Node0x22f7360 -> Node0x22f7400;
	Node0x22f7470 -> Node0x22f7510;
	Node0x22f7510 -> Node0x22f75b0;
	Node0x22f7250 -> Node0x22f7620;
	Node0x22f76c0 -> Node0x22f7730;
	Node0x22f77a0 -> Node0x22f7810;
	Node0x22f77a0 -> Node0x22f7880;
	Node0x22f6af0 -> Node0x22f78f0;
	Node0x22f78f0 -> Node0x22f7960;
	Node0x22f79d0 -> Node0x22f7a40;
	Node0x22f7730 -> Node0x22f7ab0;
	Node0x22f7a40 -> Node0x22f7b20;
	Node0x22f7b20 -> Node0x22f7b90;
	Node0x22f7c00 -> Node0x22f7c70;
	Node0x22f7c70 -> Node0x22f7ce0;
	Node0x22f7ce0 -> Node0x22f7d50;
	Node0x22f72c0 -> Node0x22f7d50;
	Node0x22f7d50 -> Node0x22f7fd0;
	Node0x22f7400 -> Node0x22f7fd0;
	Node0x22f7fd0 -> Node0x22f8040;
	Node0x22f7620 -> Node0x22f8040;
	Node0x22f8040 -> Node0x22f80b0;
	Node0x22f7880 -> Node0x22f80b0;
	Node0x22f80b0 -> Node0x22f8120;
	Node0x22f75b0 -> Node0x22f8120;
	Node0x22f8120 -> Node0x22f8190;
	Node0x22f7810 -> Node0x22f8190;
	Node0x22f8190 -> Node0x22f8200;
	Node0x22f7ab0 -> Node0x22f8200;
	Node0x22f8200 -> Node0x22f8270;
	Node0x22f7960 -> Node0x22f8270;
	Node0x22f8270 -> Node0x22f82e0;
	Node0x22f7b90 -> Node0x22f82e0;
	Node0x22f6b60 -> Node0x22f8350;
	Node0x22f82e0 -> Node0x22f8350;
	Node0x22f8350 -> Node0x2297268;
	Node0x2297268 -> Node0x22f87f0;
}
