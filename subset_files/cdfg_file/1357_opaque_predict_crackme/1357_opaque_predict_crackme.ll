; ModuleID = '../.././c_source_file/1357_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1357_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = xor i32 %7, -1
  %9 = or i32 %4, %3
  %10 = shl i32 %9, 1
  %11 = xor i32 %0, -1
  %12 = xor i32 %1, -1
  %13 = and i32 %12, %2
  %14 = and i32 %13, %11
  %15 = or i32 %12, %2
  %16 = and i32 %15, %0
  %17 = xor i32 %16, -1
  %18 = xor i32 %14, %17
  %19 = sub i32 %8, %18
  %20 = add i32 %19, %10
  %21 = xor i32 %4, %3
  %22 = or i32 %6, %3
  %23 = and i32 %4, %3
  %24 = xor i32 %23, -1
  %25 = xor i32 %21, -1
  %26 = xor i32 %10, -2
  %27 = shl i32 %22, 2
  %28 = xor i32 %27, -4
  %29 = and i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %2, %0
  %32 = and i32 %31, %30
  %33 = xor i32 %1, %0
  %34 = xor i32 %31, -1
  %35 = and i32 %33, %34
  %36 = xor i32 %2, -1
  %37 = and i32 %36, %0
  %38 = xor i32 %37, -1
  %39 = add i32 %37, 1
  %40 = and i32 %2, %0
  %41 = or i32 %2, %1
  %42 = xor i32 %40, %41
  %43 = xor i32 %33, -1
  %44 = or i32 %37, %43
  %45 = or i32 %2, %0
  %46 = and i32 %45, %12
  %47 = and i32 %12, %0
  %48 = or i32 %47, %2
  %49 = xor i32 %30, %2
  %50 = xor i32 %2, %1
  %51 = xor i32 %50, -1
  %52 = or i32 %51, %11
  %53 = or i32 %50, %47
  %54 = xor i32 %45, -1
  %55 = or i32 %33, %54
  %56 = and i32 %36, %30
  %57 = add i32 %50, 1
  %58 = or i32 %12, %0
  %59 = xor i32 %58, %2
  %60 = or i32 %29, %54
  %61 = or i32 %36, %0
  %62 = xor i32 %61, -1
  %63 = and i32 %2, %1
  %64 = or i32 %63, %0
  %65 = or i32 %47, %36
  %66 = and i32 %61, %1
  %67 = or i32 %62, %12
  %68 = mul i32 %67, -5
  %69 = xor i32 %58, -1
  %70 = or i32 %50, %69
  %71 = or i32 %50, %11
  %72 = xor i32 %50, %0
  %73 = xor i32 %54, %1
  %74 = or i32 %36, %1
  %75 = and i32 %74, %0
  %76 = and i32 %61, %12
  %77 = or i32 %41, %0
  %78 = or i32 %54, %43
  %79 = or i32 %34, %1
  %80 = or i32 %1, %0
  %81 = and i32 %80, %34
  %82 = and i32 %33, %36
  %83 = xor i32 %41, -1
  %84 = or i32 %29, %83
  %85 = or i32 %33, %62
  %86 = or i32 %33, %2
  %87 = xor i32 %83, %0
  %88 = xor i32 %47, -1
  %89 = xor i32 %88, %2
  %90 = xor i32 %40, -1
  %91 = add i32 %40, 1
  %92 = and i32 %63, %0
  %93 = xor i32 %72, -1
  %94 = or i32 %92, %93
  %95 = or i32 %63, %47
  %96 = and i32 %36, %1
  %97 = xor i32 %96, -1
  %98 = add i32 %96, 1
  %99 = or i32 %37, %33
  %100 = or i32 %40, %1
  %101 = or i32 %43, %2
  %102 = and i32 %13, %0
  %103 = and i32 %15, %11
  %104 = or i32 %102, %103
  %105 = xor i32 %74, -1
  %106 = or i32 %37, %105
  %107 = and i32 %34, %88
  %108 = and i32 %36, %88
  %109 = xor i32 %63, -1
  %110 = or i32 %109, %11
  %111 = and i32 %88, %2
  %112 = or i32 %50, %0
  %113 = xor i32 %112, -1
  %114 = or i32 %102, %113
  %115 = xor i32 %103, -1
  %116 = xor i32 %102, %115
  %117 = and i32 %58, %51
  %118 = or i32 %31, %29
  %119 = xor i32 %63, %0
  %120 = xor i32 %80, -1
  %121 = or i32 %40, %120
  %122 = xor i32 %74, %29
  %123 = or i32 %31, %47
  %124 = or i32 %34, %43
  %125 = or i32 %36, %120
  %126 = or i32 %105, %11
  %127 = add i32 %74, 1
  %128 = or i32 %29, %62
  %129 = xor i32 %45, %29
  %130 = and i32 %90, %1
  %131 = and i32 %38, %43
  %132 = and i32 %97, %0
  %133 = or i32 %29, %34
  %134 = or i32 %96, %47
  %135 = and i32 %34, %43
  %136 = or i32 %96, %11
  %137 = and i32 %33, %38
  %138 = or i32 %29, %36
  %139 = or i32 %31, %43
  %140 = and i32 %41, %11
  %141 = xor i32 %74, %0
  %142 = shl i32 %141, 1
  %143 = xor i32 %37, %74
  %144 = and i32 %50, %11
  %145 = or i32 %92, %144
  %146 = shl i32 %145, 2
  %147 = or i32 %37, %63
  %148 = shl i32 %147, 1
  %149 = or i32 %74, %0
  %150 = and i32 %90, %43
  %151 = and i32 %80, %2
  %152 = and i32 %80, %36
  %153 = and i32 %63, %11
  %154 = and i32 %50, %0
  %155 = xor i32 %153, -1
  %156 = xor i32 %154, %155
  %157 = and i32 %31, %1
  %158 = or i32 %63, %11
  %159 = xor i32 %61, %29
  %160 = xor i32 %47, %109
  %161 = xor i32 %41, %0
  %162 = or i32 %92, %161
  %163 = xor i32 %47, %2
  %164 = or i32 %29, %51
  %165 = xor i32 %51, %0
  %166 = or i32 %120, %2
  %167 = or i32 %31, %69
  %168 = or i32 %33, %36
  %169 = shl i32 %168, 1
  %170 = xor i32 %62, %1
  %171 = xor i32 %97, %0
  %172 = or i32 %96, %0
  %173 = or i32 %14, %16
  %174 = or i32 %36, %43
  %175 = add i32 %45, 1
  %176 = or i32 %31, %12
  %177 = add i32 %33, 1
  %178 = and i32 %31, %58
  %179 = and i32 %45, %1
  %180 = xor i32 %29, %2
  %181 = or i32 %83, %11
  %182 = and i32 %34, %30
  %183 = or i32 %50, %120
  %184 = xor i32 %102, %112
  %185 = shl i32 %184, 1
  %186 = and i32 %41, %0
  %187 = xor i32 %186, %155
  %188 = or i32 %31, %120
  %189 = and i32 %31, %43
  %190 = and i32 %38, %1
  %191 = xor i32 %61, %1
  %192 = mul i32 %191, -3
  %193 = xor i32 %41, %29
  %194 = and i32 %31, %88
  %195 = xor i32 %120, %2
  %196 = and i32 %50, %88
  %197 = xor i32 %38, %1
  %198 = or i32 %33, %34
  %199 = shl i32 %198, 1
  %200 = and i32 %38, %12
  %201 = and i32 %83, %11
  %202 = shl i32 %201, 1
  %203 = and i32 %96, %11
  %204 = mul i32 %203, -11
  %205 = and i32 %83, %0
  %206 = and i32 %96, %0
  %207 = shl i32 %206, 2
  %208 = and i32 %105, %11
  %209 = shl i32 %153, 1
  %210 = and i32 %105, %0
  %211 = shl i32 %92, 1
  %212 = add i32 %89, %101
  %213 = add i32 %212, %197
  %214 = add i32 %213, %140
  %215 = add i32 %214, %139
  %216 = add i32 %215, %129
  %217 = add i32 %216, %119
  %218 = add i32 %217, %106
  %219 = add i32 %210, %208
  %220 = add i32 %219, %205
  %221 = mul i32 %220, -6
  %222 = add i32 %218, %122
  %223 = add i32 %222, %23
  %224 = add i32 %223, %104
  %225 = shl i32 %224, 1
  %226 = sub i32 %11, %33
  %227 = add i32 %226, %36
  %228 = add i32 %227, %47
  %229 = add i32 %228, %177
  %230 = add i32 %229, %39
  %231 = add i32 %230, %48
  %232 = add i32 %231, %49
  %233 = sub i32 %232, %56
  %234 = add i32 %233, %57
  %235 = add i32 %234, %59
  %236 = add i32 %235, %62
  %237 = sub i32 %236, %65
  %238 = add i32 %237, %82
  %239 = add i32 %238, %86
  %240 = add i32 %239, %91
  %241 = add i32 %240, %98
  %242 = add i32 %241, %108
  %243 = sub i32 %242, %111
  %244 = sub i32 %243, %125
  %245 = add i32 %244, %127
  %246 = add i32 %245, %138
  %247 = add i32 %246, %109
  %248 = sub i32 %247, %151
  %249 = sub i32 %248, %152
  %250 = add i32 %249, %163
  %251 = sub i32 %250, %50
  %252 = add i32 %251, %166
  %253 = add i32 %252, %74
  %254 = sub i32 %253, %174
  %255 = add i32 %254, %175
  %256 = sub i32 %255, %180
  %257 = sub i32 %256, %63
  %258 = add i32 %257, %195
  %259 = add i32 %258, %6
  %260 = sub i32 %259, %32
  %261 = sub i32 %260, %35
  %262 = add i32 %261, %42
  %263 = sub i32 %262, %44
  %264 = add i32 %263, %46
  %265 = add i32 %264, %52
  %266 = sub i32 %265, %53
  %267 = add i32 %266, %55
  %268 = sub i32 %267, %60
  %269 = sub i32 %268, %64
  %270 = add i32 %269, %66
  %271 = sub i32 %270, %70
  %272 = sub i32 %271, %71
  %273 = add i32 %272, %72
  %274 = sub i32 %273, %73
  %275 = sub i32 %274, %75
  %276 = add i32 %275, %76
  %277 = sub i32 %276, %77
  %278 = sub i32 %277, %78
  %279 = add i32 %278, %79
  %280 = sub i32 %279, %81
  %281 = add i32 %280, %84
  %282 = add i32 %281, %85
  %283 = sub i32 %282, %87
  %284 = add i32 %283, %95
  %285 = sub i32 %284, %99
  %286 = add i32 %285, %100
  %287 = add i32 %286, %107
  %288 = add i32 %287, %110
  %289 = sub i32 %288, %117
  %290 = sub i32 %289, %118
  %291 = sub i32 %290, %121
  %292 = add i32 %291, %123
  %293 = add i32 %292, %124
  %294 = add i32 %293, %126
  %295 = add i32 %294, %128
  %296 = sub i32 %295, %130
  %297 = sub i32 %296, %131
  %298 = add i32 %297, %132
  %299 = add i32 %298, %133
  %300 = add i32 %299, %134
  %301 = sub i32 %300, %135
  %302 = add i32 %301, %136
  %303 = sub i32 %302, %137
  %304 = add i32 %303, %143
  %305 = add i32 %304, %149
  %306 = sub i32 %305, %150
  %307 = add i32 %306, %157
  %308 = sub i32 %307, %158
  %309 = add i32 %308, %159
  %310 = sub i32 %309, %160
  %311 = add i32 %310, %164
  %312 = add i32 %311, %165
  %313 = add i32 %312, %167
  %314 = sub i32 %313, %169
  %315 = sub i32 %314, %170
  %316 = sub i32 %315, %171
  %317 = add i32 %316, %172
  %318 = sub i32 %317, %176
  %319 = add i32 %318, %178
  %320 = sub i32 %319, %179
  %321 = add i32 %320, %181
  %322 = add i32 %321, %182
  %323 = sub i32 %322, %183
  %324 = sub i32 %323, %188
  %325 = add i32 %324, %189
  %326 = add i32 %325, %190
  %327 = sub i32 %326, %193
  %328 = sub i32 %327, %194
  %329 = add i32 %328, %196
  %330 = add i32 %329, %200
  %331 = sub i32 %330, %21
  %332 = add i32 %331, %22
  %333 = add i32 %332, %24
  %334 = add i32 %333, %25
  %335 = add i32 %334, %7
  %336 = add i32 %335, %68
  %337 = sub i32 %336, %94
  %338 = add i32 %337, %114
  %339 = add i32 %338, %116
  %340 = sub i32 %339, %142
  %341 = sub i32 %340, %148
  %342 = sub i32 %341, %156
  %343 = sub i32 %342, %162
  %344 = add i32 %343, %173
  %345 = add i32 %344, %187
  %346 = add i32 %345, %192
  %347 = sub i32 %346, %199
  %348 = sub i32 %347, %202
  %349 = add i32 %348, %204
  %350 = sub i32 %349, %207
  %351 = sub i32 %350, %209
  %352 = sub i32 %351, %211
  %353 = add i32 %352, %146
  %354 = sub i32 %353, %185
  %355 = sub i32 %354, %26
  %356 = add i32 %355, %28
  %357 = add i32 %356, %221
  %358 = add i32 %357, %225
  %359 = icmp eq i32 %20, %358
  %360 = select i1 %359, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %361 = tail call i32 @puts(i8* nonnull dereferenceable(1) %360)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
