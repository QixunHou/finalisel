digraph "DFG for'crackme' function" {
	Node0x2490aa0[shape=record, label="  %3 = sub i32 0, %1"];
	Node0x2490b10[shape=record, label="  %4 = and i32 %1, %0"];
	Node0x2490bd0[shape=record, label="  %5 = xor i32 %1, 2147483647"];
	Node0x2490c40[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x2490cb0[shape=record, label="  %7 = or i32 %1, %0"];
	Node0x2490d20[shape=record, label="  %8 = xor i32 %1, %0"];
	Node0x2490dc0[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x2490e60[shape=record, label="  %10 = xor i32 %9, -2"];
	Node0x2490ed0[shape=record, label="  %11 = shl i32 %7, 1"];
	Node0x2490f40[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x2490fe0[shape=record, label="  %13 = shl i32 %4, 2"];
	Node0x2491050[shape=record, label="  %14 = shl i32 %6, 1"];
	Node0x24910c0[shape=record, label="  %15 = add i32 %4, %0"];
	Node0x2491130[shape=record, label="  %16 = add i32 %15, %7"];
	Node0x24911a0[shape=record, label="  %17 = sub i32 %13, %16"];
	Node0x2491210[shape=record, label="  %18 = add i32 %17, %14"];
	Node0x2491280[shape=record, label="  %19 = sub i32 %18, %10"];
	Node0x24912f0[shape=record, label="  %20 = add i32 %19, %12"];
	Node0x2491360[shape=record, label="  %21 = icmp eq i32 %20, %3"];
	Node0x2431268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2491800[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x2491850[shape=record, label="  ret void"];
	Node0x2490aa0 -> Node0x2490b10;
	Node0x2490b10 -> Node0x2490bd0;
	Node0x2490bd0 -> Node0x2490c40;
	Node0x2490c40 -> Node0x2490cb0;
	Node0x2490cb0 -> Node0x2490d20;
	Node0x2490d20 -> Node0x2490dc0;
	Node0x2490dc0 -> Node0x2490e60;
	Node0x2490e60 -> Node0x2490ed0;
	Node0x2490ed0 -> Node0x2490f40;
	Node0x2490f40 -> Node0x2490fe0;
	Node0x2490fe0 -> Node0x2491050;
	Node0x2491050 -> Node0x24910c0;
	Node0x24910c0 -> Node0x2491130;
	Node0x2491130 -> Node0x24911a0;
	Node0x24911a0 -> Node0x2491210;
	Node0x2491210 -> Node0x2491280;
	Node0x2491280 -> Node0x24912f0;
	Node0x24912f0 -> Node0x2491360;
	Node0x2491360 -> Node0x2431268;
	Node0x2431268 -> Node0x2491800;
	Node0x2491800 -> Node0x2491850;
edge [color=red]
	Node0x2490bd0 -> Node0x2490c40;
	Node0x2490d20 -> Node0x2490dc0;
	Node0x2490dc0 -> Node0x2490e60;
	Node0x2490cb0 -> Node0x2490ed0;
	Node0x2490ed0 -> Node0x2490f40;
	Node0x2490b10 -> Node0x2490fe0;
	Node0x2490c40 -> Node0x2491050;
	Node0x2490b10 -> Node0x24910c0;
	Node0x24910c0 -> Node0x2491130;
	Node0x2490cb0 -> Node0x2491130;
	Node0x2490fe0 -> Node0x24911a0;
	Node0x2491130 -> Node0x24911a0;
	Node0x24911a0 -> Node0x2491210;
	Node0x2491050 -> Node0x2491210;
	Node0x2491210 -> Node0x2491280;
	Node0x2490e60 -> Node0x2491280;
	Node0x2491280 -> Node0x24912f0;
	Node0x2490f40 -> Node0x24912f0;
	Node0x24912f0 -> Node0x2491360;
	Node0x2490aa0 -> Node0x2491360;
	Node0x2491360 -> Node0x2431268;
	Node0x2431268 -> Node0x2491800;
}
