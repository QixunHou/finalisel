digraph "DFG for'crackme' function" {
	Node0x14924e0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x1492b90[shape=record, label="  %4 = shl i32 %3, 1"];
	Node0x1492c50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x1492cc0[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x1492d30[shape=record, label="  %7 = sub i32 %4, %6"];
	Node0x1492da0[shape=record, label="  %8 = and i32 %5, %0"];
	Node0x1492e10[shape=record, label="  %9 = add i32 %8, 1"];
	Node0x1492e80[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x1492ef0[shape=record, label="  %11 = xor i32 %10, -1"];
	Node0x1492f60[shape=record, label="  %12 = xor i32 %6, -1"];
	Node0x1492fd0[shape=record, label="  %13 = and i32 %1, %0"];
	Node0x1493070[shape=record, label="  %14 = shl i32 %13, 2"];
	Node0x14930e0[shape=record, label="  %15 = add i32 %12, %11"];
	Node0x1493150[shape=record, label="  %16 = add i32 %15, %9"];
	Node0x14931f0[shape=record, label="  %17 = mul i32 %16, 5"];
	Node0x1493260[shape=record, label="  %18 = sub i32 1, %0"];
	Node0x14932d0[shape=record, label="  %19 = add i32 %18, %1"];
	Node0x1493340[shape=record, label="  %20 = add i32 %19, %3"];
	Node0x14933b0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x1493420[shape=record, label="  %22 = add i32 %21, %8"];
	Node0x1493490[shape=record, label="  %23 = add i32 %22, %14"];
	Node0x1493500[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x1493570[shape=record, label="  %25 = icmp eq i32 %7, %24"];
	Node0x1433268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1493a10[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1493a60[shape=record, label="  ret void"];
	Node0x14924e0 -> Node0x1492b90;
	Node0x1492b90 -> Node0x1492c50;
	Node0x1492c50 -> Node0x1492cc0;
	Node0x1492cc0 -> Node0x1492d30;
	Node0x1492d30 -> Node0x1492da0;
	Node0x1492da0 -> Node0x1492e10;
	Node0x1492e10 -> Node0x1492e80;
	Node0x1492e80 -> Node0x1492ef0;
	Node0x1492ef0 -> Node0x1492f60;
	Node0x1492f60 -> Node0x1492fd0;
	Node0x1492fd0 -> Node0x1493070;
	Node0x1493070 -> Node0x14930e0;
	Node0x14930e0 -> Node0x1493150;
	Node0x1493150 -> Node0x14931f0;
	Node0x14931f0 -> Node0x1493260;
	Node0x1493260 -> Node0x14932d0;
	Node0x14932d0 -> Node0x1493340;
	Node0x1493340 -> Node0x14933b0;
	Node0x14933b0 -> Node0x1493420;
	Node0x1493420 -> Node0x1493490;
	Node0x1493490 -> Node0x1493500;
	Node0x1493500 -> Node0x1493570;
	Node0x1493570 -> Node0x1433268;
	Node0x1433268 -> Node0x1493a10;
	Node0x1493a10 -> Node0x1493a60;
edge [color=red]
	Node0x14924e0 -> Node0x1492b90;
	Node0x1492c50 -> Node0x1492cc0;
	Node0x1492b90 -> Node0x1492d30;
	Node0x1492cc0 -> Node0x1492d30;
	Node0x1492c50 -> Node0x1492da0;
	Node0x1492da0 -> Node0x1492e10;
	Node0x1492e80 -> Node0x1492ef0;
	Node0x1492cc0 -> Node0x1492f60;
	Node0x1492fd0 -> Node0x1493070;
	Node0x1492f60 -> Node0x14930e0;
	Node0x1492ef0 -> Node0x14930e0;
	Node0x14930e0 -> Node0x1493150;
	Node0x1492e10 -> Node0x1493150;
	Node0x1493150 -> Node0x14931f0;
	Node0x1493260 -> Node0x14932d0;
	Node0x14932d0 -> Node0x1493340;
	Node0x14924e0 -> Node0x1493340;
	Node0x1493340 -> Node0x14933b0;
	Node0x1492e80 -> Node0x14933b0;
	Node0x14933b0 -> Node0x1493420;
	Node0x1492da0 -> Node0x1493420;
	Node0x1493420 -> Node0x1493490;
	Node0x1493070 -> Node0x1493490;
	Node0x1493490 -> Node0x1493500;
	Node0x14931f0 -> Node0x1493500;
	Node0x1492d30 -> Node0x1493570;
	Node0x1493500 -> Node0x1493570;
	Node0x1493570 -> Node0x1433268;
	Node0x1433268 -> Node0x1493a10;
}
