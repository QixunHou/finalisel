digraph "DFG for'crackme' function" {
	Node0xd84b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0xd84bc0[shape=record, label="  %4 = xor i32 %0, -1"];
	Node0xd84c80[shape=record, label="  %5 = add i32 %3, %4"];
	Node0xd84cf0[shape=record, label="  %6 = and i32 %3, %0"];
	Node0xd84d60[shape=record, label="  %7 = xor i32 %6, -1"];
	Node0xd84dd0[shape=record, label="  %8 = and i32 %1, %0"];
	Node0xd84e40[shape=record, label="  %9 = or i32 %1, %0"];
	Node0xd84eb0[shape=record, label="  %10 = or i32 %3, %0"];
	Node0xd84f20[shape=record, label="  %11 = shl i32 %9, 1"];
	Node0xd84fc0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xd85030[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0xd850a0[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0xd85140[shape=record, label="  %15 = shl i32 %6, 2"];
	Node0xd851b0[shape=record, label="  %16 = sub i32 2, %0"];
	Node0xd85220[shape=record, label="  %17 = add i32 %16, %1"];
	Node0xd85290[shape=record, label="  %18 = add i32 %17, %7"];
	Node0xd85300[shape=record, label="  %19 = add i32 %18, %8"];
	Node0xd85370[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0xd853e0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0xd85450[shape=record, label="  %22 = add i32 %21, %15"];
	Node0xd854c0[shape=record, label="  %23 = add i32 %22, %12"];
	Node0xd85530[shape=record, label="  %24 = add i32 %23, %14"];
	Node0xd855a0[shape=record, label="  %25 = icmp eq i32 %5, %24"];
	Node0xd25268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xd85a40[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0xd85a90[shape=record, label="  ret void"];
	Node0xd84b50 -> Node0xd84bc0;
	Node0xd84bc0 -> Node0xd84c80;
	Node0xd84c80 -> Node0xd84cf0;
	Node0xd84cf0 -> Node0xd84d60;
	Node0xd84d60 -> Node0xd84dd0;
	Node0xd84dd0 -> Node0xd84e40;
	Node0xd84e40 -> Node0xd84eb0;
	Node0xd84eb0 -> Node0xd84f20;
	Node0xd84f20 -> Node0xd84fc0;
	Node0xd84fc0 -> Node0xd85030;
	Node0xd85030 -> Node0xd850a0;
	Node0xd850a0 -> Node0xd85140;
	Node0xd85140 -> Node0xd851b0;
	Node0xd851b0 -> Node0xd85220;
	Node0xd85220 -> Node0xd85290;
	Node0xd85290 -> Node0xd85300;
	Node0xd85300 -> Node0xd85370;
	Node0xd85370 -> Node0xd853e0;
	Node0xd853e0 -> Node0xd85450;
	Node0xd85450 -> Node0xd854c0;
	Node0xd854c0 -> Node0xd85530;
	Node0xd85530 -> Node0xd855a0;
	Node0xd855a0 -> Node0xd25268;
	Node0xd25268 -> Node0xd85a40;
	Node0xd85a40 -> Node0xd85a90;
edge [color=red]
	Node0xd84b50 -> Node0xd84c80;
	Node0xd84bc0 -> Node0xd84c80;
	Node0xd84b50 -> Node0xd84cf0;
	Node0xd84cf0 -> Node0xd84d60;
	Node0xd84b50 -> Node0xd84eb0;
	Node0xd84e40 -> Node0xd84f20;
	Node0xd84f20 -> Node0xd84fc0;
	Node0xd84eb0 -> Node0xd85030;
	Node0xd85030 -> Node0xd850a0;
	Node0xd84cf0 -> Node0xd85140;
	Node0xd851b0 -> Node0xd85220;
	Node0xd85220 -> Node0xd85290;
	Node0xd84d60 -> Node0xd85290;
	Node0xd85290 -> Node0xd85300;
	Node0xd84dd0 -> Node0xd85300;
	Node0xd85300 -> Node0xd85370;
	Node0xd84e40 -> Node0xd85370;
	Node0xd85370 -> Node0xd853e0;
	Node0xd84eb0 -> Node0xd853e0;
	Node0xd853e0 -> Node0xd85450;
	Node0xd85140 -> Node0xd85450;
	Node0xd85450 -> Node0xd854c0;
	Node0xd84fc0 -> Node0xd854c0;
	Node0xd854c0 -> Node0xd85530;
	Node0xd850a0 -> Node0xd85530;
	Node0xd84c80 -> Node0xd855a0;
	Node0xd85530 -> Node0xd855a0;
	Node0xd855a0 -> Node0xd25268;
	Node0xd25268 -> Node0xd85a40;
}
