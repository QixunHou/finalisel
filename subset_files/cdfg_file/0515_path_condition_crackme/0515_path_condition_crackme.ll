; ModuleID = '../.././c_source_file/0515_path_condition_crackme.c'
source_filename = "../.././c_source_file/0515_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = mul i32 %7, -2
  %9 = xor i32 %2, -1
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %0
  %12 = or i32 %11, %9
  %13 = xor i32 %11, -1
  %14 = xor i32 %13, %2
  %15 = sub i32 %12, %14
  %16 = add i32 %15, %8
  %17 = xor i32 %3, -1
  %18 = xor i32 %4, %3
  %19 = shl i32 %6, 1
  %20 = and i32 %6, %3
  %21 = shl i32 %20, 2
  %22 = xor i32 %21, -4
  %23 = or i32 %4, %3
  %24 = xor i32 %23, -1
  %25 = shl i32 %20, 1
  %26 = and i32 %2, %0
  %27 = or i32 %9, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %28, %10
  %30 = xor i32 %2, %0
  %31 = and i32 %30, %10
  %32 = or i32 %1, %0
  %33 = and i32 %32, %9
  %34 = and i32 %2, %1
  %35 = and i32 %34, %0
  %36 = xor i32 %0, -1
  %37 = or i32 %2, %1
  %38 = and i32 %37, %36
  %39 = or i32 %35, %38
  %40 = xor i32 %37, -1
  %41 = or i32 %40, %36
  %42 = shl i32 %41, 1
  %43 = or i32 %9, %1
  %44 = or i32 %43, %0
  %45 = xor i32 %2, %1
  %46 = and i32 %45, %36
  %47 = xor i32 %35, -1
  %48 = xor i32 %46, %47
  %49 = and i32 %9, %1
  %50 = xor i32 %49, -1
  %51 = or i32 %50, %0
  %52 = or i32 %49, %11
  %53 = or i32 %2, %0
  %54 = and i32 %53, %10
  %55 = and i32 %1, %0
  %56 = xor i32 %34, -1
  %57 = and i32 %56, %36
  %58 = xor i32 %32, -1
  %59 = or i32 %30, %58
  %60 = or i32 %49, %36
  %61 = xor i32 %1, %0
  %62 = xor i32 %61, -1
  %63 = xor i32 %30, -1
  %64 = or i32 %63, %62
  %65 = xor i32 %37, %0
  %66 = xor i32 %65, %47
  %67 = xor i32 %26, -1
  %68 = and i32 %67, %62
  %69 = and i32 %30, %62
  %70 = and i32 %9, %0
  %71 = or i32 %70, %61
  %72 = or i32 %30, %10
  %73 = and i32 %43, %36
  %74 = xor i32 %49, %0
  %75 = or i32 %11, %2
  %76 = add i32 %32, 1
  %77 = and i32 %67, %10
  %78 = or i32 %43, %36
  %79 = and i32 %27, %1
  %80 = xor i32 %43, -1
  %81 = or i32 %80, %36
  %82 = or i32 %63, %58
  %83 = xor i32 %80, %0
  %84 = and i32 %34, %36
  %85 = and i32 %45, %0
  %86 = or i32 %84, %85
  %87 = and i32 %10, %2
  %88 = and i32 %87, %0
  %89 = xor i32 %45, %0
  %90 = xor i32 %89, -1
  %91 = xor i32 %88, %90
  %92 = shl i32 %91, 1
  %93 = xor i32 %53, -1
  %94 = or i32 %93, %62
  %95 = xor i32 %34, %0
  %96 = or i32 %10, %0
  %97 = xor i32 %96, -1
  %98 = or i32 %26, %97
  %99 = xor i32 %97, %2
  %100 = and i32 %50, %0
  %101 = and i32 %32, %2
  %102 = xor i32 %56, %0
  %103 = shl i32 %102, 1
  %104 = xor i32 %93, %1
  %105 = xor i32 %55, %2
  %106 = or i32 %45, %11
  %107 = and i32 %53, %62
  %108 = or i32 %10, %2
  %109 = and i32 %108, %36
  %110 = xor i32 %109, -1
  %111 = xor i32 %88, %110
  %112 = xor i32 %43, %0
  %113 = and i32 %45, %13
  %114 = or i32 %55, %80
  %115 = xor i32 %26, %32
  %116 = and i32 %61, %67
  %117 = xor i32 %70, -1
  %118 = and i32 %117, %62
  %119 = xor i32 %55, -1
  %120 = and i32 %9, %119
  %121 = shl i32 %120, 1
  %122 = or i32 %35, %90
  %123 = or i32 %45, %0
  %124 = xor i32 %27, %1
  %125 = xor i32 %45, -1
  %126 = or i32 %125, %58
  %127 = or i32 %45, %36
  %128 = shl i32 %127, 1
  %129 = shl i32 %2, 1
  %130 = xor i32 %50, %0
  %131 = and i32 %117, %10
  %132 = xor i32 %43, %55
  %133 = and i32 %67, %1
  %134 = xor i32 %58, %2
  %135 = add i32 %45, 1
  %136 = shl i32 %1, 1
  %137 = or i32 %45, %55
  %138 = and i32 %30, %96
  %139 = shl i32 %138, 1
  %140 = xor i32 %28, %1
  %141 = or i32 %125, %36
  %142 = xor i32 %53, %55
  %143 = and i32 %45, %119
  %144 = xor i32 %40, %0
  %145 = shl i32 %144, 2
  %146 = and i32 %37, %0
  %147 = and i32 %63, %13
  %148 = or i32 %125, %0
  %149 = or i32 %55, %93
  %150 = shl i32 %149, 1
  %151 = or i32 %30, %1
  %152 = or i32 %125, %97
  %153 = and i32 %62, %2
  %154 = shl i32 %153, 1
  %155 = and i32 %32, %63
  %156 = shl i32 %27, 1
  %157 = or i32 %26, %61
  %158 = shl i32 %157, 1
  %159 = or i32 %30, %62
  %160 = or i32 %63, %97
  %161 = xor i32 %0, 2147483647
  %162 = xor i32 %161, %108
  %163 = xor i32 %162, %88
  %164 = shl i32 %163, 1
  %165 = and i32 %117, %1
  %166 = and i32 %30, %61
  %167 = or i32 %35, %46
  %168 = or i32 %61, %28
  %169 = or i32 %49, %0
  %170 = xor i32 %88, %123
  %171 = or i32 %45, %97
  %172 = or i32 %30, %61
  %173 = and i32 %32, %125
  %174 = or i32 %26, %62
  %175 = and i32 %50, %36
  %176 = and i32 %45, %32
  %177 = or i32 %34, %36
  %178 = or i32 %11, %63
  %179 = or i32 %50, %36
  %180 = or i32 %9, %97
  %181 = or i32 %26, %10
  %182 = and i32 %87, %36
  %183 = xor i32 %127, -1
  %184 = or i32 %182, %183
  %185 = and i32 %96, %125
  %186 = xor i32 %84, -1
  %187 = xor i32 %146, %186
  %188 = and i32 %61, %9
  %189 = and i32 %45, %96
  %190 = and i32 %63, %119
  %191 = and i32 %30, %119
  %192 = or i32 %56, %36
  %193 = or i32 %70, %10
  %194 = or i32 %80, %0
  %195 = or i32 %28, %62
  %196 = or i32 %34, %11
  %197 = or i32 %45, %58
  %198 = or i32 %63, %1
  %199 = and i32 %30, %32
  %200 = and i32 %43, %0
  %201 = or i32 %37, %0
  %202 = shl i32 %201, 1
  %203 = shl i32 %36, 1
  %204 = or i32 %35, %65
  %205 = or i32 %97, %2
  %206 = and i32 %9, %13
  %207 = add i32 %43, 1
  %208 = and i32 %108, %0
  %209 = xor i32 %208, -1
  %210 = xor i32 %182, %209
  %211 = and i32 %27, %62
  %212 = or i32 %9, %62
  %213 = and i32 %30, %1
  %214 = or i32 %62, %2
  %215 = and i32 %125, %119
  %216 = or i32 %88, %109
  %217 = xor i32 %117, %1
  %218 = shl i32 %217, 1
  %219 = and i32 %61, %2
  %220 = shl i32 %50, 1
  %221 = or i32 %63, %10
  %222 = and i32 %119, %2
  %223 = xor i32 %32, %2
  %224 = and i32 %96, %9
  %225 = xor i32 %37, %55
  %226 = or i32 %182, %208
  %227 = xor i32 %27, %55
  %228 = or i32 %30, %55
  %229 = and i32 %63, %10
  %230 = or i32 %93, %1
  %231 = shl i32 %0, 1
  %232 = xor i32 %119, %2
  %233 = and i32 %61, %63
  %234 = or i32 %26, %1
  %235 = xor i32 %11, %50
  %236 = and i32 %53, %61
  %237 = or i32 %26, %49
  %238 = xor i32 %35, %89
  %239 = and i32 %27, %10
  %240 = or i32 %30, %11
  %241 = and i32 %9, %62
  %242 = or i32 %56, %0
  %243 = or i32 %26, %40
  %244 = and i32 %53, %1
  %245 = and i32 %13, %2
  %246 = shl i32 %61, 1
  %247 = or i32 %55, %28
  %248 = or i32 %40, %0
  %249 = or i32 %84, %146
  %250 = xor i32 %85, %186
  %251 = and i32 %96, %2
  %252 = xor i32 %26, %37
  %253 = or i32 %55, %2
  %254 = or i32 %70, %62
  %255 = shl i32 %254, 1
  %256 = or i32 %70, %80
  %257 = or i32 %70, %34
  %258 = or i32 %55, %63
  %259 = and i32 %63, %62
  %260 = and i32 %125, %0
  %261 = or i32 %58, %2
  %262 = xor i32 %123, -1
  %263 = or i32 %88, %262
  %264 = or i32 %61, %9
  %265 = or i32 %28, %1
  %266 = and i32 %125, %13
  %267 = xor i32 %11, %56
  %268 = xor i32 %26, %1
  %269 = and i32 %96, %63
  %270 = or i32 %55, %40
  %271 = and i32 %56, %0
  %272 = xor i32 %70, %43
  %273 = xor i32 %70, %1
  %274 = or i32 %55, %125
  %275 = xor i32 %11, %2
  %276 = or i32 %9, %58
  %277 = shl i32 %276, 1
  %278 = xor i32 %53, %1
  %279 = shl i32 %32, 1
  %280 = xor i32 %125, %0
  %281 = xor i32 %26, %50
  %282 = shl i32 %281, 1
  %283 = and i32 %61, %117
  %284 = or i32 %55, %9
  %285 = or i32 %30, %97
  %286 = or i32 %88, %89
  %287 = add i32 %61, 1
  %288 = and i32 %63, %1
  %289 = xor i32 %70, %56
  %290 = or i32 %37, %36
  %291 = or i32 %61, %63
  %292 = add i32 %2, 1
  %293 = and i32 %125, %36
  %294 = or i32 %11, %125
  %295 = shl i32 %28, 1
  %296 = xor i32 %38, %47
  %297 = or i32 %61, %2
  %298 = shl i32 %297, 1
  %299 = and i32 %40, %36
  %300 = mul i32 %299, -12
  %301 = and i32 %49, %36
  %302 = and i32 %40, %0
  %303 = mul i32 %302, -15
  %304 = and i32 %49, %0
  %305 = mul i32 %304, -13
  %306 = and i32 %80, %36
  %307 = shl i32 %306, 3
  %308 = mul i32 %84, -9
  %309 = and i32 %80, %0
  %310 = shl i32 %309, 2
  %311 = mul i32 %35, -7
  %312 = sub i32 %223, %294
  %313 = sub i32 %312, %301
  %314 = sub i32 %313, %269
  %315 = sub i32 %314, %174
  %316 = add i32 %315, %44
  %317 = mul i32 %316, 5
  %318 = sub i32 %248, %171
  %319 = add i32 %318, %114
  %320 = add i32 %319, %29
  %321 = add i32 %320, %24
  %322 = mul i32 %321, 3
  %323 = add i32 %264, %251
  %324 = shl i32 %323, 2
  %325 = sub i32 -2, %34
  %326 = add i32 %325, %275
  %327 = add i32 %326, %30
  %328 = add i32 %327, %241
  %329 = add i32 %328, %232
  %330 = add i32 %329, %101
  %331 = add i32 %330, %293
  %332 = add i32 %331, %289
  %333 = add i32 %332, %278
  %334 = add i32 %333, %272
  %335 = add i32 %334, %267
  %336 = add i32 %335, %266
  %337 = add i32 %336, %265
  %338 = add i32 %337, %259
  %339 = add i32 %338, %228
  %340 = add i32 %339, %176
  %341 = add i32 %340, %165
  %342 = add i32 %341, %148
  %343 = add i32 %342, %132
  %344 = add i32 %343, %130
  %345 = add i32 %344, %118
  %346 = add i32 %345, %79
  %347 = add i32 %346, %72
  %348 = add i32 %347, %71
  %349 = add i32 %348, %226
  %350 = add i32 %349, %249
  %351 = shl i32 %350, 1
  %352 = sub i32 3, %1
  %353 = sub i32 %352, %203
  %354 = sub i32 %353, %231
  %355 = add i32 %354, %76
  %356 = sub i32 %355, %136
  %357 = add i32 %356, %97
  %358 = add i32 %357, %13
  %359 = sub i32 %358, %11
  %360 = sub i32 %359, %96
  %361 = add i32 %360, %287
  %362 = add i32 %361, %292
  %363 = add i32 %362, %17
  %364 = sub i32 %363, %26
  %365 = sub i32 %364, %33
  %366 = sub i32 %365, %49
  %367 = add i32 %366, %75
  %368 = sub i32 %367, %99
  %369 = add i32 %368, %105
  %370 = sub i32 %369, %129
  %371 = sub i32 %370, %134
  %372 = add i32 %371, %135
  %373 = add i32 %372, %45
  %374 = add i32 %373, %34
  %375 = add i32 %374, %180
  %376 = add i32 %375, %43
  %377 = sub i32 %376, %188
  %378 = add i32 %377, %63
  %379 = sub i32 %378, %205
  %380 = add i32 %379, %206
  %381 = add i32 %380, %207
  %382 = sub i32 %381, %212
  %383 = add i32 %382, %214
  %384 = sub i32 %383, %70
  %385 = sub i32 %384, %219
  %386 = sub i32 %385, %222
  %387 = add i32 %386, %224
  %388 = sub i32 %387, %245
  %389 = sub i32 %388, %246
  %390 = sub i32 %389, %37
  %391 = sub i32 %390, %253
  %392 = add i32 %391, %261
  %393 = sub i32 %392, %279
  %394 = add i32 %393, %284
  %395 = add i32 %394, %4
  %396 = add i32 %395, %31
  %397 = add i32 %396, %51
  %398 = sub i32 %397, %52
  %399 = sub i32 %398, %54
  %400 = sub i32 %399, %57
  %401 = add i32 %400, %59
  %402 = sub i32 %401, %60
  %403 = add i32 %402, %64
  %404 = sub i32 %403, %68
  %405 = sub i32 %404, %69
  %406 = sub i32 %405, %73
  %407 = add i32 %406, %74
  %408 = sub i32 %407, %77
  %409 = add i32 %408, %78
  %410 = add i32 %409, %81
  %411 = sub i32 %410, %82
  %412 = sub i32 %411, %83
  %413 = sub i32 %412, %94
  %414 = sub i32 %413, %95
  %415 = add i32 %414, %98
  %416 = add i32 %415, %100
  %417 = add i32 %416, %104
  %418 = sub i32 %417, %106
  %419 = add i32 %418, %107
  %420 = add i32 %419, %112
  %421 = sub i32 %420, %113
  %422 = sub i32 %421, %115
  %423 = sub i32 %422, %116
  %424 = sub i32 %423, %121
  %425 = add i32 %424, %38
  %426 = sub i32 %425, %123
  %427 = sub i32 %426, %65
  %428 = add i32 %427, %124
  %429 = sub i32 %428, %126
  %430 = add i32 %429, %131
  %431 = add i32 %430, %133
  %432 = add i32 %431, %46
  %433 = add i32 %432, %137
  %434 = add i32 %433, %140
  %435 = add i32 %434, %141
  %436 = add i32 %435, %142
  %437 = sub i32 %436, %143
  %438 = sub i32 %437, %146
  %439 = sub i32 %438, %147
  %440 = sub i32 %439, %151
  %441 = add i32 %440, %152
  %442 = sub i32 %441, %154
  %443 = sub i32 %442, %155
  %444 = sub i32 %443, %156
  %445 = add i32 %444, %159
  %446 = add i32 %445, %160
  %447 = sub i32 %446, %166
  %448 = sub i32 %447, %168
  %449 = add i32 %448, %169
  %450 = add i32 %449, %172
  %451 = add i32 %450, %173
  %452 = sub i32 %451, %175
  %453 = add i32 %452, %89
  %454 = sub i32 %453, %177
  %455 = add i32 %454, %178
  %456 = add i32 %455, %179
  %457 = sub i32 %456, %181
  %458 = sub i32 %457, %185
  %459 = add i32 %458, %189
  %460 = add i32 %459, %190
  %461 = add i32 %460, %191
  %462 = sub i32 %461, %192
  %463 = sub i32 %462, %193
  %464 = sub i32 %463, %194
  %465 = add i32 %464, %195
  %466 = add i32 %465, %196
  %467 = add i32 %466, %197
  %468 = sub i32 %467, %198
  %469 = sub i32 %468, %199
  %470 = add i32 %469, %200
  %471 = sub i32 %470, %211
  %472 = sub i32 %471, %213
  %473 = add i32 %472, %215
  %474 = sub i32 %473, %220
  %475 = add i32 %474, %221
  %476 = sub i32 %475, %225
  %477 = add i32 %476, %227
  %478 = add i32 %477, %229
  %479 = sub i32 %478, %230
  %480 = sub i32 %479, %233
  %481 = add i32 %480, %234
  %482 = sub i32 %481, %235
  %483 = sub i32 %482, %236
  %484 = add i32 %483, %237
  %485 = add i32 %484, %239
  %486 = add i32 %485, %240
  %487 = add i32 %486, %242
  %488 = add i32 %487, %243
  %489 = add i32 %488, %244
  %490 = sub i32 %489, %247
  %491 = sub i32 %490, %252
  %492 = add i32 %491, %256
  %493 = add i32 %492, %257
  %494 = add i32 %493, %258
  %495 = add i32 %494, %260
  %496 = sub i32 %495, %268
  %497 = add i32 %496, %270
  %498 = sub i32 %497, %271
  %499 = add i32 %498, %273
  %500 = sub i32 %499, %274
  %501 = sub i32 %500, %85
  %502 = sub i32 %501, %277
  %503 = add i32 %502, %280
  %504 = sub i32 %503, %283
  %505 = sub i32 %504, %285
  %506 = add i32 %505, %288
  %507 = sub i32 %506, %290
  %508 = sub i32 %507, %291
  %509 = sub i32 %508, %295
  %510 = sub i32 %509, %298
  %511 = add i32 %510, %18
  %512 = sub i32 %511, %19
  %513 = add i32 %512, %23
  %514 = sub i32 %513, %39
  %515 = sub i32 %514, %42
  %516 = add i32 %515, %48
  %517 = add i32 %516, %66
  %518 = add i32 %517, %86
  %519 = sub i32 %518, %103
  %520 = add i32 %519, %111
  %521 = add i32 %520, %122
  %522 = sub i32 %521, %128
  %523 = sub i32 %522, %139
  %524 = sub i32 %523, %145
  %525 = sub i32 %524, %150
  %526 = sub i32 %525, %158
  %527 = sub i32 %526, %167
  %528 = add i32 %527, %170
  %529 = add i32 %528, %184
  %530 = add i32 %529, %187
  %531 = sub i32 %530, %202
  %532 = add i32 %531, %204
  %533 = add i32 %532, %210
  %534 = sub i32 %533, %216
  %535 = sub i32 %534, %218
  %536 = sub i32 %535, %238
  %537 = add i32 %536, %250
  %538 = sub i32 %537, %255
  %539 = add i32 %538, %263
  %540 = sub i32 %539, %282
  %541 = sub i32 %540, %286
  %542 = add i32 %541, %296
  %543 = add i32 %542, %300
  %544 = add i32 %543, %303
  %545 = add i32 %544, %305
  %546 = add i32 %545, %307
  %547 = add i32 %546, %308
  %548 = sub i32 %547, %310
  %549 = add i32 %548, %311
  %550 = add i32 %549, %324
  %551 = sub i32 %550, %25
  %552 = sub i32 %551, %92
  %553 = sub i32 %552, %22
  %554 = sub i32 %553, %164
  %555 = add i32 %554, %317
  %556 = add i32 %555, %322
  %557 = add i32 %556, %351
  %558 = icmp eq i32 %16, %557
  %559 = select i1 %558, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %560 = tail call i32 @puts(i8* nonnull dereferenceable(1) %559)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
