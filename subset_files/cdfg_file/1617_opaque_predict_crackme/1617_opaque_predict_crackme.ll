; ModuleID = '../.././c_source_file/1617_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1617_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %2, %1
  %5 = and i32 %2, %0
  %6 = xor i32 %5, -1
  %7 = and i32 %6, %1
  %8 = shl i32 %7, 1
  %9 = sub i32 %4, %8
  %10 = xor i32 %1, -1
  %11 = and i32 %10, %0
  %12 = xor i32 %11, -1
  %13 = and i32 %12, %2
  %14 = xor i32 %2, -1
  %15 = and i32 %1, %0
  %16 = or i32 %15, %14
  %17 = or i32 %14, %0
  %18 = xor i32 %17, %15
  %19 = or i32 %5, %10
  %20 = or i32 %10, %0
  %21 = xor i32 %20, -1
  %22 = or i32 %5, %21
  %23 = xor i32 %1, %0
  %24 = and i32 %23, %2
  %25 = xor i32 %2, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %26, %1
  %28 = or i32 %25, %21
  %29 = or i32 %14, %1
  %30 = xor i32 %29, %0
  %31 = shl i32 %30, 1
  %32 = or i32 %1, %0
  %33 = xor i32 %23, -1
  %34 = or i32 %33, %2
  %35 = or i32 %26, %21
  %36 = xor i32 %15, -1
  %37 = and i32 %25, %36
  %38 = xor i32 %6, %1
  %39 = and i32 %14, %0
  %40 = and i32 %2, %1
  %41 = xor i32 %40, -1
  %42 = xor i32 %39, %41
  %43 = xor i32 %0, -1
  %44 = and i32 %40, %43
  %45 = and i32 %4, %0
  %46 = or i32 %44, %45
  %47 = or i32 %39, %23
  %48 = xor i32 %4, -1
  %49 = and i32 %20, %48
  %50 = or i32 %2, %0
  %51 = xor i32 %50, -1
  %52 = add i32 %50, 1
  %53 = and i32 %10, %2
  %54 = and i32 %53, %0
  %55 = or i32 %10, %2
  %56 = and i32 %55, %43
  %57 = xor i32 %56, 2147483647
  %58 = xor i32 %57, %54
  %59 = and i32 %32, %48
  %60 = xor i32 %48, %0
  %61 = xor i32 %5, %32
  %62 = or i32 %4, %43
  %63 = or i32 %2, %1
  %64 = xor i32 %63, -1
  %65 = or i32 %15, %64
  %66 = xor i32 %29, -1
  %67 = or i32 %39, %66
  %68 = and i32 %4, %36
  %69 = or i32 %63, %43
  %70 = or i32 %4, %0
  %71 = xor i32 %54, %70
  %72 = or i32 %51, %33
  %73 = shl i32 %72, 2
  %74 = and i32 %4, %43
  %75 = xor i32 %39, -1
  %76 = and i32 %40, %0
  %77 = xor i32 %4, %0
  %78 = xor i32 %76, %77
  %79 = and i32 %25, %20
  %80 = or i32 %54, %56
  %81 = and i32 %32, %2
  %82 = xor i32 %32, -1
  %83 = or i32 %25, %82
  %84 = and i32 %25, %23
  %85 = or i32 %39, %1
  %86 = shl i32 %85, 1
  %87 = and i32 %14, %36
  %88 = xor i32 %17, -1
  %89 = or i32 %88, %10
  %90 = or i32 %11, %14
  %91 = xor i32 %45, -1
  %92 = xor i32 %44, %91
  %93 = or i32 %15, %51
  %94 = and i32 %14, %33
  %95 = and i32 %50, %23
  %96 = shl i32 %95, 1
  %97 = or i32 %15, %66
  %98 = and i32 %14, %1
  %99 = xor i32 %55, %0
  %100 = or i32 %54, %99
  %101 = shl i32 %100, 1
  %102 = or i32 %4, %82
  %103 = xor i32 %98, -1
  %104 = xor i32 %103, %0
  %105 = xor i32 %70, -1
  %106 = or i32 %54, %105
  %107 = or i32 %25, %33
  %108 = and i32 %63, %43
  %109 = or i32 %76, %108
  %110 = xor i32 %12, %2
  %111 = or i32 %5, %33
  %112 = or i32 %5, %98
  %113 = and i32 %50, %10
  %114 = xor i32 %64, %0
  %115 = shl i32 %114, 1
  %116 = xor i32 %76, -1
  %117 = xor i32 %108, %116
  %118 = xor i32 %20, %2
  %119 = xor i32 %40, %0
  %120 = shl i32 %119, 1
  %121 = or i32 %64, %0
  %122 = or i32 %11, %48
  %123 = or i32 %40, %43
  %124 = xor i32 %32, %2
  %125 = or i32 %103, %43
  %126 = and i32 %20, %14
  %127 = xor i32 %5, %103
  %128 = and i32 %17, %10
  %129 = or i32 %5, %82
  %130 = or i32 %64, %43
  %131 = add i32 %23, 1
  %132 = xor i32 %63, %0
  %133 = or i32 %76, %132
  %134 = or i32 %5, %23
  %135 = and i32 %23, %26
  %136 = or i32 %63, %0
  %137 = and i32 %75, %10
  %138 = and i32 %50, %1
  %139 = or i32 %15, %2
  %140 = and i32 %103, %0
  %141 = or i32 %21, %2
  %142 = xor i32 %82, %2
  %143 = xor i32 %5, %1
  %144 = and i32 %4, %32
  %145 = and i32 %17, %1
  %146 = or i32 %23, %88
  %147 = add i32 %98, 1
  %148 = xor i32 %36, %2
  %149 = xor i32 %98, %0
  %150 = and i32 %53, %43
  %151 = and i32 %55, %0
  %152 = xor i32 %151, 2147483647
  %153 = xor i32 %152, %150
  %154 = or i32 %26, %33
  %155 = xor i32 %75, %1
  %156 = xor i32 %150, %62
  %157 = or i32 %25, %1
  %158 = shl i32 %17, 1
  %159 = and i32 %23, %14
  %160 = or i32 %15, %26
  %161 = xor i32 %63, %15
  %162 = or i32 %66, %0
  %163 = and i32 %41, %0
  %164 = add i32 %20, 1
  %165 = or i32 %98, %11
  %166 = xor i32 %50, %15
  %167 = and i32 %25, %1
  %168 = or i32 %23, %26
  %169 = and i32 %41, %43
  %170 = and i32 %23, %6
  %171 = or i32 %23, %51
  %172 = xor i32 %132, 2147483647
  %173 = xor i32 %172, %76
  %174 = xor i32 %11, %2
  %175 = and i32 %63, %0
  %176 = or i32 %44, %175
  %177 = and i32 %6, %33
  %178 = or i32 %29, %43
  %179 = shl i32 %175, 1
  %180 = or i32 %25, %11
  %181 = or i32 %54, %77
  %182 = and i32 %29, %43
  %183 = or i32 %76, %74
  %184 = or i32 %26, %10
  %185 = or i32 %40, %0
  %186 = or i32 %4, %15
  %187 = xor i32 %77, -1
  %188 = or i32 %76, %187
  %189 = xor i32 %5, %20
  %190 = or i32 %39, %10
  %191 = shl i32 %190, 1
  %192 = and i32 %33, %2
  %193 = shl i32 %192, 1
  %194 = or i32 %39, %40
  %195 = and i32 %29, %0
  %196 = or i32 %98, %43
  %197 = xor i32 %99, -1
  %198 = xor i32 %54, %197
  %199 = or i32 %23, %14
  %200 = xor i32 %15, %2
  %201 = shl i32 %200, 1
  %202 = or i32 %150, %151
  %203 = and i32 %48, %36
  %204 = or i32 %48, %82
  %205 = shl i32 %204, 1
  %206 = and i32 %48, %0
  %207 = and i32 %25, %32
  %208 = add i32 %11, 1
  %209 = and i32 %75, %1
  %210 = and i32 %50, %33
  %211 = shl i32 %210, 1
  %212 = and i32 %36, %2
  %213 = or i32 %14, %21
  %214 = shl i32 %213, 1
  %215 = xor i32 %62, -1
  %216 = or i32 %150, %215
  %217 = or i32 %4, %11
  %218 = or i32 %25, %10
  %219 = xor i32 %29, %15
  %220 = shl i32 %219, 1
  %221 = or i32 %14, %33
  %222 = or i32 %26, %1
  %223 = or i32 %40, %11
  %224 = xor i32 %74, %116
  %225 = or i32 %5, %64
  %226 = and i32 %6, %10
  %227 = and i32 %103, %43
  %228 = shl i32 %227, 1
  %229 = or i32 %15, %48
  %230 = and i32 %4, %20
  %231 = or i32 %103, %0
  %232 = or i32 %11, %26
  %233 = or i32 %51, %1
  %234 = or i32 %25, %15
  %235 = and i32 %14, %12
  %236 = xor i32 %66, %0
  %237 = or i32 %48, %43
  %238 = or i32 %98, %0
  %239 = and i32 %26, %10
  %240 = or i32 %48, %21
  %241 = xor i32 %88, %1
  %242 = shl i32 %241, 1
  %243 = or i32 %4, %21
  %244 = add i32 %5, 1
  %245 = xor i32 %39, %1
  %246 = or i32 %14, %82
  %247 = or i32 %51, %10
  %248 = shl i32 %247, 1
  %249 = and i32 %20, %2
  %250 = or i32 %23, %2
  %251 = shl i32 %250, 2
  %252 = and i32 %20, %26
  %253 = shl i32 %252, 1
  %254 = xor i32 %11, %103
  %255 = or i32 %39, %33
  %256 = and i32 %26, %12
  %257 = or i32 %5, %1
  %258 = or i32 %82, %2
  %259 = and i32 %25, %10
  %260 = and i32 %26, %36
  %261 = or i32 %29, %0
  %262 = and i32 %48, %12
  %263 = xor i32 %39, %29
  %264 = and i32 %17, %23
  %265 = xor i32 %54, %187
  %266 = and i32 %25, %33
  %267 = xor i32 %17, %1
  %268 = xor i32 %51, %1
  %269 = shl i32 %268, 1
  %270 = and i32 %48, %43
  %271 = shl i32 %270, 1
  %272 = or i32 %88, %1
  %273 = or i32 %11, %2
  %274 = xor i32 %50, %1
  %275 = and i32 %64, %43
  %276 = shl i32 %275, 2
  %277 = and i32 %98, %43
  %278 = mul i32 %277, -7
  %279 = and i32 %64, %0
  %280 = mul i32 %279, -6
  %281 = and i32 %98, %0
  %282 = mul i32 %281, 17
  %283 = and i32 %66, %43
  %284 = mul i32 %283, 10
  %285 = shl i32 %44, 2
  %286 = and i32 %66, %0
  %287 = add i32 %36, %43
  %288 = add i32 %287, %82
  %289 = add i32 %288, %39
  %290 = add i32 %289, %41
  %291 = sub i32 %290, %13
  %292 = add i32 %291, %263
  %293 = add i32 %292, %256
  %294 = add i32 %293, %239
  %295 = add i32 %294, %222
  %296 = add i32 %295, %132
  %297 = add i32 %296, %170
  %298 = add i32 %297, %161
  %299 = add i32 %298, %145
  %300 = add i32 %299, %143
  %301 = add i32 %300, %138
  %302 = add i32 %301, %130
  %303 = add i32 %302, %121
  %304 = add i32 %303, %113
  %305 = add i32 %304, %107
  %306 = add i32 %305, %74
  %307 = add i32 %306, %18
  %308 = add i32 %307, %80
  %309 = add i32 %308, %153
  %310 = add i32 %309, %173
  %311 = add i32 %310, %58
  %312 = shl i32 %311, 1
  %313 = add i32 %286, %29
  %314 = add i32 %313, %260
  %315 = add i32 %314, %238
  %316 = sub i32 %315, %189
  %317 = sub i32 %316, %184
  %318 = sub i32 %317, %181
  %319 = sub i32 %318, %202
  %320 = mul i32 %319, 3
  %321 = add i32 %255, %168
  %322 = shl i32 %321, 2
  %323 = sub i32 %76, %93
  %324 = mul i32 %323, 5
  %325 = shl i32 %1, 1
  %326 = add i32 %325, %32
  %327 = add i32 %326, %15
  %328 = sub i32 %2, %327
  %329 = add i32 %328, %131
  %330 = add i32 %329, %20
  %331 = add i32 %330, %164
  %332 = add i32 %331, %23
  %333 = add i32 %332, %208
  %334 = add i32 %333, %16
  %335 = add i32 %334, %24
  %336 = add i32 %335, %34
  %337 = add i32 %336, %5
  %338 = add i32 %337, %52
  %339 = add i32 %338, %75
  %340 = sub i32 %339, %81
  %341 = sub i32 %340, %50
  %342 = add i32 %341, %48
  %343 = sub i32 %342, %87
  %344 = sub i32 %343, %90
  %345 = sub i32 %344, %94
  %346 = add i32 %345, %98
  %347 = sub i32 %346, %110
  %348 = add i32 %347, %25
  %349 = add i32 %348, %118
  %350 = sub i32 %349, %124
  %351 = sub i32 %350, %126
  %352 = add i32 %351, %139
  %353 = add i32 %352, %141
  %354 = add i32 %353, %142
  %355 = add i32 %354, %147
  %356 = sub i32 %355, %148
  %357 = add i32 %356, %64
  %358 = sub i32 %357, %159
  %359 = add i32 %358, %174
  %360 = add i32 %359, %199
  %361 = add i32 %360, %66
  %362 = sub i32 %361, %212
  %363 = add i32 %362, %221
  %364 = add i32 %363, %40
  %365 = sub i32 %364, %235
  %366 = add i32 %365, %244
  %367 = add i32 %366, %246
  %368 = sub i32 %367, %249
  %369 = sub i32 %368, %258
  %370 = add i32 %369, %273
  %371 = add i32 %370, %19
  %372 = add i32 %371, %22
  %373 = add i32 %372, %27
  %374 = sub i32 %373, %28
  %375 = add i32 %374, %35
  %376 = sub i32 %375, %37
  %377 = add i32 %376, %38
  %378 = sub i32 %377, %42
  %379 = sub i32 %378, %47
  %380 = add i32 %379, %49
  %381 = sub i32 %380, %59
  %382 = add i32 %381, %60
  %383 = sub i32 %382, %61
  %384 = add i32 %383, %62
  %385 = add i32 %384, %65
  %386 = add i32 %385, %67
  %387 = sub i32 %386, %68
  %388 = sub i32 %387, %69
  %389 = add i32 %388, %79
  %390 = sub i32 %389, %83
  %391 = sub i32 %390, %84
  %392 = add i32 %391, %89
  %393 = add i32 %392, %97
  %394 = sub i32 %393, %102
  %395 = add i32 %394, %104
  %396 = sub i32 %395, %111
  %397 = sub i32 %396, %112
  %398 = add i32 %397, %122
  %399 = add i32 %398, %123
  %400 = add i32 %399, %125
  %401 = add i32 %400, %127
  %402 = sub i32 %401, %128
  %403 = add i32 %402, %129
  %404 = sub i32 %403, %134
  %405 = add i32 %404, %135
  %406 = add i32 %405, %136
  %407 = add i32 %406, %137
  %408 = sub i32 %407, %140
  %409 = add i32 %408, %144
  %410 = add i32 %409, %146
  %411 = add i32 %410, %149
  %412 = sub i32 %411, %154
  %413 = add i32 %412, %155
  %414 = add i32 %413, %157
  %415 = sub i32 %414, %158
  %416 = sub i32 %415, %160
  %417 = sub i32 %416, %162
  %418 = sub i32 %417, %163
  %419 = sub i32 %418, %165
  %420 = sub i32 %419, %166
  %421 = add i32 %420, %167
  %422 = add i32 %421, %169
  %423 = add i32 %422, %171
  %424 = sub i32 %423, %177
  %425 = add i32 %424, %77
  %426 = sub i32 %425, %178
  %427 = sub i32 %426, %180
  %428 = sub i32 %427, %182
  %429 = add i32 %428, %185
  %430 = add i32 %429, %186
  %431 = sub i32 %430, %193
  %432 = add i32 %431, %194
  %433 = sub i32 %432, %195
  %434 = add i32 %433, %196
  %435 = sub i32 %434, %201
  %436 = add i32 %435, %203
  %437 = add i32 %436, %45
  %438 = add i32 %437, %206
  %439 = add i32 %438, %207
  %440 = add i32 %439, %209
  %441 = sub i32 %440, %214
  %442 = sub i32 %441, %217
  %443 = sub i32 %442, %218
  %444 = sub i32 %443, %223
  %445 = add i32 %444, %225
  %446 = sub i32 %445, %226
  %447 = sub i32 %446, %229
  %448 = sub i32 %447, %230
  %449 = sub i32 %448, %231
  %450 = add i32 %449, %232
  %451 = sub i32 %450, %233
  %452 = add i32 %451, %234
  %453 = sub i32 %452, %236
  %454 = add i32 %453, %237
  %455 = sub i32 %454, %240
  %456 = sub i32 %455, %243
  %457 = sub i32 %456, %245
  %458 = sub i32 %457, %251
  %459 = sub i32 %458, %254
  %460 = sub i32 %459, %257
  %461 = add i32 %460, %259
  %462 = add i32 %461, %261
  %463 = sub i32 %462, %262
  %464 = add i32 %463, %264
  %465 = sub i32 %464, %266
  %466 = sub i32 %465, %267
  %467 = sub i32 %466, %272
  %468 = sub i32 %467, %274
  %469 = sub i32 %468, %31
  %470 = sub i32 %469, %46
  %471 = add i32 %470, %71
  %472 = sub i32 %471, %73
  %473 = sub i32 %472, %78
  %474 = sub i32 %473, %86
  %475 = add i32 %474, %92
  %476 = sub i32 %475, %96
  %477 = sub i32 %476, %106
  %478 = add i32 %477, %109
  %479 = sub i32 %478, %115
  %480 = add i32 %479, %117
  %481 = sub i32 %480, %120
  %482 = add i32 %481, %133
  %483 = sub i32 %482, %156
  %484 = sub i32 %483, %176
  %485 = sub i32 %484, %179
  %486 = sub i32 %485, %183
  %487 = add i32 %486, %188
  %488 = sub i32 %487, %191
  %489 = sub i32 %488, %198
  %490 = sub i32 %489, %205
  %491 = sub i32 %490, %211
  %492 = add i32 %491, %216
  %493 = sub i32 %492, %220
  %494 = sub i32 %493, %224
  %495 = sub i32 %494, %228
  %496 = sub i32 %495, %242
  %497 = sub i32 %496, %248
  %498 = sub i32 %497, %253
  %499 = sub i32 %498, %265
  %500 = sub i32 %499, %269
  %501 = sub i32 %500, %271
  %502 = sub i32 %501, %276
  %503 = add i32 %502, %278
  %504 = add i32 %503, %280
  %505 = add i32 %504, %282
  %506 = add i32 %505, %284
  %507 = sub i32 %506, %285
  %508 = sub i32 %507, %101
  %509 = add i32 %508, %322
  %510 = add i32 %509, %324
  %511 = add i32 %510, %320
  %512 = add i32 %511, %312
  %513 = icmp eq i32 %9, %512
  %514 = select i1 %513, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %515 = tail call i32 @puts(i8* nonnull dereferenceable(1) %514)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
