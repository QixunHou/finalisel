digraph "DFG for'crackme' function" {
	Node0x1610c40[shape=record, label="  %4 = xor i32 %2, -1"];
	Node0x1610d00[shape=record, label="  %5 = or i32 %4, %0"];
	Node0x1610d70[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x1610de0[shape=record, label="  %7 = or i32 %2, %0"];
	Node0x1610e50[shape=record, label="  %8 = and i32 %7, %1"];
	Node0x1610ec0[shape=record, label="  %9 = xor i32 %1, -1"];
	Node0x1610f30[shape=record, label="  %10 = xor i32 %2, %0"];
	Node0x1610fa0[shape=record, label="  %11 = or i32 %10, %9"];
	Node0x1611010[shape=record, label="  %12 = or i32 %2, %1"];
	Node0x1611080[shape=record, label="  %13 = xor i32 %12, %0"];
	Node0x16110f0[shape=record, label="  %14 = and i32 %2, %0"];
	Node0x1611160[shape=record, label="  %15 = xor i32 %14, -1"];
	Node0x16111d0[shape=record, label="  %16 = and i32 %15, %9"];
	Node0x1611240[shape=record, label="  %17 = xor i32 %15, %1"];
	Node0x16112b0[shape=record, label="  %18 = xor i32 %10, -1"];
	Node0x1611320[shape=record, label="  %19 = and i32 %18, %1"];
	Node0x1611390[shape=record, label="  %20 = or i32 %1, %0"];
	Node0x1611400[shape=record, label="  %21 = xor i32 %2, %1"];
	Node0x1611470[shape=record, label="  %22 = xor i32 %21, 2147483647"];
	Node0x16114e0[shape=record, label="  %23 = and i32 %22, %20"];
	Node0x1611580[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x16115f0[shape=record, label="  %25 = and i32 %14, %9"];
	Node0x1611660[shape=record, label="  %26 = xor i32 %21, %0"];
	Node0x16116d0[shape=record, label="  %27 = or i32 %25, %26"];
	Node0x1611740[shape=record, label="  %28 = and i32 %20, %2"];
	Node0x16117b0[shape=record, label="  %29 = and i32 %2, %1"];
	Node0x1611820[shape=record, label="  %30 = xor i32 %0, -1"];
	Node0x1611890[shape=record, label="  %31 = xor i32 %29, %30"];
	Node0x1611900[shape=record, label="  %32 = and i32 %4, %1"];
	Node0x1611b80[shape=record, label="  %33 = and i32 %32, %30"];
	Node0x1611bf0[shape=record, label="  %34 = xor i32 %12, -1"];
	Node0x1611c60[shape=record, label="  %35 = and i32 %34, %0"];
	Node0x1611cd0[shape=record, label="  %36 = and i32 %32, %0"];
	Node0x1611d40[shape=record, label="  %37 = and i32 %29, %0"];
	Node0x1611de0[shape=record, label="  %38 = mul i32 %37, -3"];
	Node0x1611e50[shape=record, label="  %39 = add i32 %11, %28"];
	Node0x1611ec0[shape=record, label="  %40 = sub i32 %8, %39"];
	Node0x1611f30[shape=record, label="  %41 = sub i32 %40, %13"];
	Node0x1611fa0[shape=record, label="  %42 = sub i32 %41, %16"];
	Node0x1612010[shape=record, label="  %43 = add i32 %42, %17"];
	Node0x1612080[shape=record, label="  %44 = sub i32 %43, %19"];
	Node0x16120f0[shape=record, label="  %45 = add i32 %44, %31"];
	Node0x1612160[shape=record, label="  %46 = add i32 %45, %33"];
	Node0x16121d0[shape=record, label="  %47 = sub i32 %46, %35"];
	Node0x1612240[shape=record, label="  %48 = add i32 %47, %36"];
	Node0x16122b0[shape=record, label="  %49 = add i32 %48, %25"];
	Node0x1612320[shape=record, label="  %50 = add i32 %49, %27"];
	Node0x1612390[shape=record, label="  %51 = add i32 %50, %38"];
	Node0x1612400[shape=record, label="  %52 = add i32 %51, %24"];
	Node0x1612470[shape=record, label="  %53 = icmp eq i32 %6, %52"];
	Node0x15b1268[shape=record, label="  %54 = select i1 %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1612910[shape=record, label="  %55 = tail call i32 @puts(i8* nonnull dereferenceable(1) %54)"];
	Node0x1612960[shape=record, label="  ret void"];
	Node0x1610c40 -> Node0x1610d00;
	Node0x1610d00 -> Node0x1610d70;
	Node0x1610d70 -> Node0x1610de0;
	Node0x1610de0 -> Node0x1610e50;
	Node0x1610e50 -> Node0x1610ec0;
	Node0x1610ec0 -> Node0x1610f30;
	Node0x1610f30 -> Node0x1610fa0;
	Node0x1610fa0 -> Node0x1611010;
	Node0x1611010 -> Node0x1611080;
	Node0x1611080 -> Node0x16110f0;
	Node0x16110f0 -> Node0x1611160;
	Node0x1611160 -> Node0x16111d0;
	Node0x16111d0 -> Node0x1611240;
	Node0x1611240 -> Node0x16112b0;
	Node0x16112b0 -> Node0x1611320;
	Node0x1611320 -> Node0x1611390;
	Node0x1611390 -> Node0x1611400;
	Node0x1611400 -> Node0x1611470;
	Node0x1611470 -> Node0x16114e0;
	Node0x16114e0 -> Node0x1611580;
	Node0x1611580 -> Node0x16115f0;
	Node0x16115f0 -> Node0x1611660;
	Node0x1611660 -> Node0x16116d0;
	Node0x16116d0 -> Node0x1611740;
	Node0x1611740 -> Node0x16117b0;
	Node0x16117b0 -> Node0x1611820;
	Node0x1611820 -> Node0x1611890;
	Node0x1611890 -> Node0x1611900;
	Node0x1611900 -> Node0x1611b80;
	Node0x1611b80 -> Node0x1611bf0;
	Node0x1611bf0 -> Node0x1611c60;
	Node0x1611c60 -> Node0x1611cd0;
	Node0x1611cd0 -> Node0x1611d40;
	Node0x1611d40 -> Node0x1611de0;
	Node0x1611de0 -> Node0x1611e50;
	Node0x1611e50 -> Node0x1611ec0;
	Node0x1611ec0 -> Node0x1611f30;
	Node0x1611f30 -> Node0x1611fa0;
	Node0x1611fa0 -> Node0x1612010;
	Node0x1612010 -> Node0x1612080;
	Node0x1612080 -> Node0x16120f0;
	Node0x16120f0 -> Node0x1612160;
	Node0x1612160 -> Node0x16121d0;
	Node0x16121d0 -> Node0x1612240;
	Node0x1612240 -> Node0x16122b0;
	Node0x16122b0 -> Node0x1612320;
	Node0x1612320 -> Node0x1612390;
	Node0x1612390 -> Node0x1612400;
	Node0x1612400 -> Node0x1612470;
	Node0x1612470 -> Node0x15b1268;
	Node0x15b1268 -> Node0x1612910;
	Node0x1612910 -> Node0x1612960;
edge [color=red]
	Node0x1610c40 -> Node0x1610d00;
	Node0x1610d00 -> Node0x1610d70;
	Node0x1610de0 -> Node0x1610e50;
	Node0x1610f30 -> Node0x1610fa0;
	Node0x1610ec0 -> Node0x1610fa0;
	Node0x1611010 -> Node0x1611080;
	Node0x16110f0 -> Node0x1611160;
	Node0x1611160 -> Node0x16111d0;
	Node0x1610ec0 -> Node0x16111d0;
	Node0x1611160 -> Node0x1611240;
	Node0x1610f30 -> Node0x16112b0;
	Node0x16112b0 -> Node0x1611320;
	Node0x1611400 -> Node0x1611470;
	Node0x1611470 -> Node0x16114e0;
	Node0x1611390 -> Node0x16114e0;
	Node0x16114e0 -> Node0x1611580;
	Node0x16110f0 -> Node0x16115f0;
	Node0x1610ec0 -> Node0x16115f0;
	Node0x1611400 -> Node0x1611660;
	Node0x16115f0 -> Node0x16116d0;
	Node0x1611660 -> Node0x16116d0;
	Node0x1611390 -> Node0x1611740;
	Node0x16117b0 -> Node0x1611890;
	Node0x1611820 -> Node0x1611890;
	Node0x1610c40 -> Node0x1611900;
	Node0x1611900 -> Node0x1611b80;
	Node0x1611820 -> Node0x1611b80;
	Node0x1611010 -> Node0x1611bf0;
	Node0x1611bf0 -> Node0x1611c60;
	Node0x1611900 -> Node0x1611cd0;
	Node0x16117b0 -> Node0x1611d40;
	Node0x1611d40 -> Node0x1611de0;
	Node0x1610fa0 -> Node0x1611e50;
	Node0x1611740 -> Node0x1611e50;
	Node0x1610e50 -> Node0x1611ec0;
	Node0x1611e50 -> Node0x1611ec0;
	Node0x1611ec0 -> Node0x1611f30;
	Node0x1611080 -> Node0x1611f30;
	Node0x1611f30 -> Node0x1611fa0;
	Node0x16111d0 -> Node0x1611fa0;
	Node0x1611fa0 -> Node0x1612010;
	Node0x1611240 -> Node0x1612010;
	Node0x1612010 -> Node0x1612080;
	Node0x1611320 -> Node0x1612080;
	Node0x1612080 -> Node0x16120f0;
	Node0x1611890 -> Node0x16120f0;
	Node0x16120f0 -> Node0x1612160;
	Node0x1611b80 -> Node0x1612160;
	Node0x1612160 -> Node0x16121d0;
	Node0x1611c60 -> Node0x16121d0;
	Node0x16121d0 -> Node0x1612240;
	Node0x1611cd0 -> Node0x1612240;
	Node0x1612240 -> Node0x16122b0;
	Node0x16115f0 -> Node0x16122b0;
	Node0x16122b0 -> Node0x1612320;
	Node0x16116d0 -> Node0x1612320;
	Node0x1612320 -> Node0x1612390;
	Node0x1611de0 -> Node0x1612390;
	Node0x1612390 -> Node0x1612400;
	Node0x1611580 -> Node0x1612400;
	Node0x1610d70 -> Node0x1612470;
	Node0x1612400 -> Node0x1612470;
	Node0x1612470 -> Node0x15b1268;
	Node0x15b1268 -> Node0x1612910;
}
