digraph "DFG for'crackme' function" {
	Node0x24cabb0[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x24cac20[shape=record, label="  %4 = xor i32 %3, %0"];
	Node0x24cace0[shape=record, label="  %5 = add i32 %4, %3"];
	Node0x24cad50[shape=record, label="  %6 = or i32 %3, %0"];
	Node0x24cadc0[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x24cae30[shape=record, label="  %8 = shl i32 %7, 1"];
	Node0x24caed0[shape=record, label="  %9 = xor i32 %8, -2"];
	Node0x24caf40[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x24cafb0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x24cb020[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x24cb0c0[shape=record, label="  %13 = shl i32 %10, 2"];
	Node0x24cb160[shape=record, label="  %14 = xor i32 %13, -4"];
	Node0x24cb1d0[shape=record, label="  %15 = shl i32 %6, 1"];
	Node0x24cb240[shape=record, label="  %16 = xor i32 %15, -2"];
	Node0x24cb2e0[shape=record, label="  %17 = mul i32 %7, 3"];
	Node0x24cb380[shape=record, label="  %18 = mul i32 %11, 6"];
	Node0x24cb3f0[shape=record, label="  %19 = add i32 %6, %0"];
	Node0x24cb460[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x24cb4d0[shape=record, label="  %21 = sub i32 %12, %20"];
	Node0x24cb540[shape=record, label="  %22 = add i32 %21, %17"];
	Node0x24cb5b0[shape=record, label="  %23 = add i32 %22, %18"];
	Node0x24cb620[shape=record, label="  %24 = sub i32 %23, %9"];
	Node0x24cb690[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x24cb700[shape=record, label="  %26 = add i32 %25, %16"];
	Node0x24cb770[shape=record, label="  %27 = icmp eq i32 %5, %26"];
	Node0x246b268[shape=record, label="  %28 = select i1 %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x24cbc10[shape=record, label="  %29 = tail call i32 @puts(i8* nonnull dereferenceable(1) %28)"];
	Node0x24cbc60[shape=record, label="  ret void"];
	Node0x24cabb0 -> Node0x24cac20;
	Node0x24cac20 -> Node0x24cace0;
	Node0x24cace0 -> Node0x24cad50;
	Node0x24cad50 -> Node0x24cadc0;
	Node0x24cadc0 -> Node0x24cae30;
	Node0x24cae30 -> Node0x24caed0;
	Node0x24caed0 -> Node0x24caf40;
	Node0x24caf40 -> Node0x24cafb0;
	Node0x24cafb0 -> Node0x24cb020;
	Node0x24cb020 -> Node0x24cb0c0;
	Node0x24cb0c0 -> Node0x24cb160;
	Node0x24cb160 -> Node0x24cb1d0;
	Node0x24cb1d0 -> Node0x24cb240;
	Node0x24cb240 -> Node0x24cb2e0;
	Node0x24cb2e0 -> Node0x24cb380;
	Node0x24cb380 -> Node0x24cb3f0;
	Node0x24cb3f0 -> Node0x24cb460;
	Node0x24cb460 -> Node0x24cb4d0;
	Node0x24cb4d0 -> Node0x24cb540;
	Node0x24cb540 -> Node0x24cb5b0;
	Node0x24cb5b0 -> Node0x24cb620;
	Node0x24cb620 -> Node0x24cb690;
	Node0x24cb690 -> Node0x24cb700;
	Node0x24cb700 -> Node0x24cb770;
	Node0x24cb770 -> Node0x246b268;
	Node0x246b268 -> Node0x24cbc10;
	Node0x24cbc10 -> Node0x24cbc60;
edge [color=red]
	Node0x24cabb0 -> Node0x24cac20;
	Node0x24cac20 -> Node0x24cace0;
	Node0x24cabb0 -> Node0x24cace0;
	Node0x24cabb0 -> Node0x24cad50;
	Node0x24cabb0 -> Node0x24cadc0;
	Node0x24cadc0 -> Node0x24cae30;
	Node0x24cae30 -> Node0x24caed0;
	Node0x24cafb0 -> Node0x24cb020;
	Node0x24caf40 -> Node0x24cb0c0;
	Node0x24cb0c0 -> Node0x24cb160;
	Node0x24cad50 -> Node0x24cb1d0;
	Node0x24cb1d0 -> Node0x24cb240;
	Node0x24cadc0 -> Node0x24cb2e0;
	Node0x24cafb0 -> Node0x24cb380;
	Node0x24cad50 -> Node0x24cb3f0;
	Node0x24cb3f0 -> Node0x24cb460;
	Node0x24caf40 -> Node0x24cb460;
	Node0x24cb020 -> Node0x24cb4d0;
	Node0x24cb460 -> Node0x24cb4d0;
	Node0x24cb4d0 -> Node0x24cb540;
	Node0x24cb2e0 -> Node0x24cb540;
	Node0x24cb540 -> Node0x24cb5b0;
	Node0x24cb380 -> Node0x24cb5b0;
	Node0x24cb5b0 -> Node0x24cb620;
	Node0x24caed0 -> Node0x24cb620;
	Node0x24cb620 -> Node0x24cb690;
	Node0x24cb160 -> Node0x24cb690;
	Node0x24cb690 -> Node0x24cb700;
	Node0x24cb240 -> Node0x24cb700;
	Node0x24cace0 -> Node0x24cb770;
	Node0x24cb700 -> Node0x24cb770;
	Node0x24cb770 -> Node0x246b268;
	Node0x246b268 -> Node0x24cbc10;
}
