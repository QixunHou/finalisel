; ModuleID = '../.././c_source_file/1095_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1095_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, %0
  %5 = xor i32 %1, -1
  %6 = and i32 %5, %0
  %7 = xor i32 %2, %0
  %8 = or i32 %7, %6
  %9 = shl i32 %8, 1
  %10 = add i32 %9, %4
  %11 = xor i32 %2, %1
  %12 = and i32 %11, %0
  %13 = or i32 %1, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %14, %2
  %16 = xor i32 %4, -1
  %17 = or i32 %16, %2
  %18 = xor i32 %7, -1
  %19 = or i32 %18, %14
  %20 = xor i32 %2, -1
  %21 = or i32 %5, %0
  %22 = xor i32 %21, -1
  %23 = or i32 %20, %22
  %24 = xor i32 %0, -1
  %25 = or i32 %20, %1
  %26 = or i32 %25, %24
  %27 = and i32 %2, %1
  %28 = and i32 %27, %24
  %29 = or i32 %28, %12
  %30 = and i32 %5, %2
  %31 = and i32 %30, %24
  %32 = or i32 %11, %24
  %33 = xor i32 %31, %32
  %34 = xor i32 %27, -1
  %35 = or i32 %34, %0
  %36 = or i32 %2, %1
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %0
  %39 = shl i32 %38, 1
  %40 = and i32 %1, %0
  %41 = xor i32 %40, -1
  %42 = and i32 %21, %20
  %43 = or i32 %20, %16
  %44 = xor i32 %6, %34
  %45 = or i32 %40, %18
  %46 = xor i32 %41, %2
  %47 = and i32 %2, %0
  %48 = or i32 %47, %37
  %49 = xor i32 %11, -1
  %50 = or i32 %49, %24
  %51 = and i32 %20, %0
  %52 = xor i32 %51, -1
  %53 = and i32 %52, %1
  %54 = and i32 %25, %0
  %55 = and i32 %20, %1
  %56 = xor i32 %55, -1
  %57 = or i32 %56, %0
  %58 = or i32 %20, %0
  %59 = xor i32 %58, -1
  %60 = or i32 %59, %5
  %61 = or i32 %4, %18
  %62 = add i32 %58, 1
  %63 = or i32 %40, %37
  %64 = or i32 %2, %0
  %65 = and i32 %64, %5
  %66 = and i32 %16, %2
  %67 = shl i32 %25, 1
  %68 = and i32 %34, %0
  %69 = or i32 %40, %59
  %70 = or i32 %11, %6
  %71 = and i32 %27, %0
  %72 = xor i32 %11, %0
  %73 = xor i32 %71, %72
  %74 = shl i32 %73, 1
  %75 = or i32 %7, %1
  %76 = or i32 %55, %0
  %77 = xor i32 %59, %1
  %78 = and i32 %49, %0
  %79 = or i32 %40, %49
  %80 = or i32 %47, %5
  %81 = or i32 %49, %0
  %82 = xor i32 %51, %25
  %83 = or i32 %11, %22
  %84 = and i32 %13, %2
  %85 = or i32 %47, %55
  %86 = and i32 %13, %20
  %87 = or i32 %40, %20
  %88 = and i32 %36, %24
  %89 = or i32 %71, %88
  %90 = or i32 %4, %20
  %91 = or i32 %11, %14
  %92 = or i32 %47, %1
  %93 = shl i32 %92, 1
  %94 = or i32 %4, %59
  %95 = xor i32 %36, %0
  %96 = or i32 %71, %95
  %97 = and i32 %36, %0
  %98 = and i32 %7, %13
  %99 = or i32 %7, %22
  %100 = xor i32 %64, %1
  %101 = xor i32 %25, -1
  %102 = or i32 %101, %24
  %103 = and i32 %21, %18
  %104 = and i32 %7, %21
  %105 = shl i32 %104, 2
  %106 = and i32 %4, %18
  %107 = xor i32 %12, -1
  %108 = xor i32 %28, %107
  %109 = shl i32 %49, 1
  %110 = and i32 %58, %4
  %111 = xor i32 %6, -1
  %112 = xor i32 %34, %0
  %113 = or i32 %6, %49
  %114 = shl i32 %113, 1
  %115 = and i32 %18, %1
  %116 = shl i32 %115, 1
  %117 = xor i32 %47, %36
  %118 = or i32 %7, %5
  %119 = and i32 %30, %0
  %120 = or i32 %5, %2
  %121 = and i32 %120, %24
  %122 = or i32 %119, %121
  %123 = or i32 %22, %2
  %124 = or i32 %11, %0
  %125 = or i32 %18, %1
  %126 = xor i32 %124, -1
  %127 = or i32 %119, %126
  %128 = xor i32 %64, -1
  %129 = or i32 %128, %16
  %130 = or i32 %4, %2
  %131 = xor i32 %47, %56
  %132 = xor i32 %47, 2147483647
  %133 = and i32 %132, %16
  %134 = shl i32 %133, 1
  %135 = xor i32 %120, %0
  %136 = or i32 %119, %135
  %137 = xor i32 %71, %81
  %138 = and i32 %7, %5
  %139 = and i32 %20, %41
  %140 = and i32 %58, %5
  %141 = and i32 %11, %21
  %142 = or i32 %47, %14
  %143 = and i32 %41, %2
  %144 = or i32 %128, %1
  %145 = and i32 %56, %0
  %146 = xor i32 %135, -1
  %147 = xor i32 %119, %146
  %148 = and i32 %52, %5
  %149 = or i32 %47, %22
  %150 = and i32 %7, %41
  %151 = and i32 %4, %2
  %152 = shl i32 %151, 1
  %153 = and i32 %18, %111
  %154 = shl i32 %153, 1
  %155 = and i32 %58, %1
  %156 = shl i32 %155, 1
  %157 = and i32 %13, %49
  %158 = and i32 %18, %41
  %159 = and i32 %64, %1
  %160 = xor i32 %119, %124
  %161 = or i32 %47, %16
  %162 = or i32 %128, %5
  %163 = and i32 %25, %24
  %164 = or i32 %49, %14
  %165 = and i32 %58, %16
  %166 = and i32 %49, %24
  %167 = and i32 %4, %20
  %168 = xor i32 %32, -1
  %169 = or i32 %31, %168
  %170 = and i32 %18, %5
  %171 = or i32 %36, %0
  %172 = or i32 %56, %24
  %173 = and i32 %18, %16
  %174 = xor i32 %52, %1
  %175 = and i32 %7, %1
  %176 = xor i32 %22, %2
  %177 = xor i32 %40, %2
  %178 = xor i32 %49, %0
  %179 = and i32 %11, %13
  %180 = or i32 %51, %101
  %181 = xor i32 %58, %40
  %182 = xor i32 %51, %34
  %183 = and i32 %7, %111
  %184 = and i32 %11, %41
  %185 = and i32 %37, %24
  %186 = and i32 %55, %24
  %187 = and i32 %37, %0
  %188 = mul i32 %187, 5
  %189 = and i32 %55, %0
  %190 = and i32 %101, %24
  %191 = shl i32 %190, 1
  %192 = and i32 %101, %0
  %193 = mul i32 %192, -9
  %194 = mul i32 %71, -6
  %195 = sub i32 -2, %2
  %196 = add i32 %195, %130
  %197 = add i32 %196, %43
  %198 = add i32 %197, %129
  %199 = add i32 %198, %148
  %200 = add i32 %199, %118
  %201 = add i32 %200, %95
  %202 = add i32 %201, %77
  %203 = add i32 %202, %44
  %204 = shl i32 %203, 1
  %205 = add i32 %186, %185
  %206 = mul i32 %205, -12
  %207 = add i32 %27, %52
  %208 = sub i32 %207, %69
  %209 = add i32 %208, %137
  %210 = mul i32 %209, 3
  %211 = sub i32 1, %2
  %212 = add i32 %211, %15
  %213 = add i32 %212, %17
  %214 = add i32 %213, %23
  %215 = add i32 %214, %42
  %216 = add i32 %215, %46
  %217 = add i32 %216, %62
  %218 = add i32 %217, %66
  %219 = add i32 %218, %58
  %220 = add i32 %219, %84
  %221 = sub i32 %220, %86
  %222 = sub i32 %221, %87
  %223 = sub i32 %222, %90
  %224 = add i32 %223, %123
  %225 = sub i32 %224, %139
  %226 = sub i32 %225, %143
  %227 = add i32 %226, %167
  %228 = sub i32 %227, %55
  %229 = add i32 %228, %18
  %230 = sub i32 %229, %176
  %231 = sub i32 %230, %177
  %232 = add i32 %231, %34
  %233 = add i32 %232, %12
  %234 = add i32 %233, %19
  %235 = sub i32 %234, %26
  %236 = sub i32 %235, %35
  %237 = add i32 %236, %45
  %238 = add i32 %237, %48
  %239 = sub i32 %238, %50
  %240 = sub i32 %239, %53
  %241 = add i32 %240, %54
  %242 = add i32 %241, %57
  %243 = sub i32 %242, %60
  %244 = add i32 %243, %61
  %245 = add i32 %244, %63
  %246 = sub i32 %245, %65
  %247 = sub i32 %246, %67
  %248 = sub i32 %247, %68
  %249 = sub i32 %248, %70
  %250 = add i32 %249, %75
  %251 = sub i32 %250, %76
  %252 = add i32 %251, %78
  %253 = add i32 %252, %79
  %254 = sub i32 %253, %80
  %255 = sub i32 %254, %81
  %256 = add i32 %255, %82
  %257 = sub i32 %256, %83
  %258 = add i32 %257, %85
  %259 = add i32 %258, %91
  %260 = add i32 %259, %94
  %261 = add i32 %260, %97
  %262 = sub i32 %261, %98
  %263 = add i32 %262, %99
  %264 = add i32 %263, %100
  %265 = add i32 %264, %102
  %266 = add i32 %265, %103
  %267 = add i32 %266, %106
  %268 = sub i32 %267, %109
  %269 = add i32 %268, %110
  %270 = sub i32 %269, %112
  %271 = sub i32 %270, %117
  %272 = add i32 %271, %124
  %273 = add i32 %272, %125
  %274 = sub i32 %273, %131
  %275 = add i32 %274, %138
  %276 = sub i32 %275, %140
  %277 = add i32 %276, %141
  %278 = add i32 %277, %142
  %279 = sub i32 %278, %144
  %280 = sub i32 %279, %145
  %281 = add i32 %280, %149
  %282 = sub i32 %281, %150
  %283 = sub i32 %282, %152
  %284 = sub i32 %283, %157
  %285 = sub i32 %284, %158
  %286 = sub i32 %285, %159
  %287 = sub i32 %286, %161
  %288 = add i32 %287, %162
  %289 = sub i32 %288, %163
  %290 = sub i32 %289, %164
  %291 = add i32 %290, %165
  %292 = add i32 %291, %166
  %293 = sub i32 %292, %170
  %294 = add i32 %293, %171
  %295 = sub i32 %294, %172
  %296 = add i32 %295, %173
  %297 = sub i32 %296, %174
  %298 = add i32 %297, %175
  %299 = sub i32 %298, %178
  %300 = sub i32 %299, %179
  %301 = sub i32 %300, %180
  %302 = add i32 %301, %181
  %303 = add i32 %302, %182
  %304 = sub i32 %303, %72
  %305 = add i32 %304, %183
  %306 = sub i32 %305, %184
  %307 = sub i32 %306, %189
  %308 = add i32 %307, %29
  %309 = add i32 %308, %33
  %310 = sub i32 %309, %39
  %311 = add i32 %310, %89
  %312 = sub i32 %311, %93
  %313 = add i32 %312, %96
  %314 = sub i32 %313, %105
  %315 = sub i32 %314, %108
  %316 = sub i32 %315, %114
  %317 = sub i32 %316, %116
  %318 = sub i32 %317, %122
  %319 = sub i32 %318, %127
  %320 = add i32 %319, %136
  %321 = add i32 %320, %147
  %322 = sub i32 %321, %154
  %323 = sub i32 %322, %156
  %324 = sub i32 %323, %160
  %325 = sub i32 %324, %169
  %326 = add i32 %325, %188
  %327 = sub i32 %326, %191
  %328 = add i32 %327, %193
  %329 = add i32 %328, %194
  %330 = sub i32 %329, %74
  %331 = sub i32 %330, %134
  %332 = add i32 %331, %206
  %333 = add i32 %332, %210
  %334 = add i32 %333, %204
  %335 = icmp eq i32 %10, %334
  %336 = select i1 %335, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %337 = tail call i32 @puts(i8* nonnull dereferenceable(1) %336)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
