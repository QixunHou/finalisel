digraph "DFG for'crackme' function" {
	Node0x1aeeaa0[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1aef120[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1aef190[shape=record, label="  %7 = add i32 %2, 1"];
	Node0x1aef200[shape=record, label="  %8 = sub i32 %7, %6"];
	Node0x1aef270[shape=record, label="  %9 = and i32 %2, %1"];
	Node0x1aef2e0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0x1aef380[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x1aef3f0[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x1aef490[shape=record, label="  %13 = xor i32 %6, -2"];
	Node0x1aef500[shape=record, label="  %14 = shl i32 %12, 1"];
	Node0x1aef570[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0x1aef5e0[shape=record, label="  %16 = and i32 %11, %1"];
	Node0x1aef650[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x1aef6f0[shape=record, label="  %18 = shl i32 %0, 2"];
	Node0x1aef760[shape=record, label="  %19 = xor i32 %0, -1"];
	Node0x1aef7d0[shape=record, label="  %20 = or i32 %3, %0"];
	Node0x1aef840[shape=record, label="  %21 = shl i32 %20, 1"];
	Node0x1aef8b0[shape=record, label="  %22 = and i32 %19, %3"];
	Node0x1aef920[shape=record, label="  %23 = or i32 %19, %3"];
	Node0x1aef990[shape=record, label="  %24 = xor i32 %23, -1"];
	Node0x1aefa30[shape=record, label="  %25 = mul i32 %24, 6"];
	Node0x1aefaa0[shape=record, label="  %26 = and i32 %3, %0"];
	Node0x1aefb40[shape=record, label="  %27 = mul i32 %26, 5"];
	Node0x1aefbb0[shape=record, label="  %28 = add i32 %22, %10"];
	Node0x1aefc20[shape=record, label="  %29 = shl i32 %28, 1"];
	Node0x1aefcc0[shape=record, label="  %30 = add i32 %0, 3"];
	Node0x1aefd30[shape=record, label="  %31 = sub i32 %30, %18"];
	Node0x1aefda0[shape=record, label="  %32 = add i32 %31, %9"];
	Node0x1af0020[shape=record, label="  %33 = sub i32 %32, %12"];
	Node0x1af0090[shape=record, label="  %34 = sub i32 %33, %17"];
	Node0x1af0100[shape=record, label="  %35 = add i32 %34, %23"];
	Node0x1af0170[shape=record, label="  %36 = add i32 %35, %13"];
	Node0x1af01e0[shape=record, label="  %37 = sub i32 %36, %15"];
	Node0x1af0250[shape=record, label="  %38 = sub i32 %37, %21"];
	Node0x1af02c0[shape=record, label="  %39 = add i32 %38, %25"];
	Node0x1af0330[shape=record, label="  %40 = add i32 %39, %27"];
	Node0x1af03a0[shape=record, label="  %41 = add i32 %40, %29"];
	Node0x1af0410[shape=record, label="  %42 = icmp eq i32 %8, %41"];
	Node0x1a8f268[shape=record, label="  %43 = select i1 %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1af08b0[shape=record, label="  %44 = tail call i32 @puts(i8* nonnull dereferenceable(1) %43)"];
	Node0x1af0900[shape=record, label="  ret void"];
	Node0x1aeeaa0 -> Node0x1aef120;
	Node0x1aef120 -> Node0x1aef190;
	Node0x1aef190 -> Node0x1aef200;
	Node0x1aef200 -> Node0x1aef270;
	Node0x1aef270 -> Node0x1aef2e0;
	Node0x1aef2e0 -> Node0x1aef380;
	Node0x1aef380 -> Node0x1aef3f0;
	Node0x1aef3f0 -> Node0x1aef490;
	Node0x1aef490 -> Node0x1aef500;
	Node0x1aef500 -> Node0x1aef570;
	Node0x1aef570 -> Node0x1aef5e0;
	Node0x1aef5e0 -> Node0x1aef650;
	Node0x1aef650 -> Node0x1aef6f0;
	Node0x1aef6f0 -> Node0x1aef760;
	Node0x1aef760 -> Node0x1aef7d0;
	Node0x1aef7d0 -> Node0x1aef840;
	Node0x1aef840 -> Node0x1aef8b0;
	Node0x1aef8b0 -> Node0x1aef920;
	Node0x1aef920 -> Node0x1aef990;
	Node0x1aef990 -> Node0x1aefa30;
	Node0x1aefa30 -> Node0x1aefaa0;
	Node0x1aefaa0 -> Node0x1aefb40;
	Node0x1aefb40 -> Node0x1aefbb0;
	Node0x1aefbb0 -> Node0x1aefc20;
	Node0x1aefc20 -> Node0x1aefcc0;
	Node0x1aefcc0 -> Node0x1aefd30;
	Node0x1aefd30 -> Node0x1aefda0;
	Node0x1aefda0 -> Node0x1af0020;
	Node0x1af0020 -> Node0x1af0090;
	Node0x1af0090 -> Node0x1af0100;
	Node0x1af0100 -> Node0x1af0170;
	Node0x1af0170 -> Node0x1af01e0;
	Node0x1af01e0 -> Node0x1af0250;
	Node0x1af0250 -> Node0x1af02c0;
	Node0x1af02c0 -> Node0x1af0330;
	Node0x1af0330 -> Node0x1af03a0;
	Node0x1af03a0 -> Node0x1af0410;
	Node0x1af0410 -> Node0x1a8f268;
	Node0x1a8f268 -> Node0x1af08b0;
	Node0x1af08b0 -> Node0x1af0900;
edge [color=red]
	Node0x1aeeaa0 -> Node0x1aef120;
	Node0x1aef190 -> Node0x1aef200;
	Node0x1aef120 -> Node0x1aef200;
	Node0x1aef380 -> Node0x1aef3f0;
	Node0x1aef120 -> Node0x1aef490;
	Node0x1aef3f0 -> Node0x1aef500;
	Node0x1aef500 -> Node0x1aef570;
	Node0x1aef380 -> Node0x1aef5e0;
	Node0x1aef5e0 -> Node0x1aef650;
	Node0x1aef7d0 -> Node0x1aef840;
	Node0x1aef760 -> Node0x1aef8b0;
	Node0x1aef760 -> Node0x1aef920;
	Node0x1aef920 -> Node0x1aef990;
	Node0x1aef990 -> Node0x1aefa30;
	Node0x1aefaa0 -> Node0x1aefb40;
	Node0x1aef8b0 -> Node0x1aefbb0;
	Node0x1aef2e0 -> Node0x1aefbb0;
	Node0x1aefbb0 -> Node0x1aefc20;
	Node0x1aefcc0 -> Node0x1aefd30;
	Node0x1aef6f0 -> Node0x1aefd30;
	Node0x1aefd30 -> Node0x1aefda0;
	Node0x1aef270 -> Node0x1aefda0;
	Node0x1aefda0 -> Node0x1af0020;
	Node0x1aef3f0 -> Node0x1af0020;
	Node0x1af0020 -> Node0x1af0090;
	Node0x1aef650 -> Node0x1af0090;
	Node0x1af0090 -> Node0x1af0100;
	Node0x1aef920 -> Node0x1af0100;
	Node0x1af0100 -> Node0x1af0170;
	Node0x1aef490 -> Node0x1af0170;
	Node0x1af0170 -> Node0x1af01e0;
	Node0x1aef570 -> Node0x1af01e0;
	Node0x1af01e0 -> Node0x1af0250;
	Node0x1aef840 -> Node0x1af0250;
	Node0x1af0250 -> Node0x1af02c0;
	Node0x1aefa30 -> Node0x1af02c0;
	Node0x1af02c0 -> Node0x1af0330;
	Node0x1aefb40 -> Node0x1af0330;
	Node0x1af0330 -> Node0x1af03a0;
	Node0x1aefc20 -> Node0x1af03a0;
	Node0x1aef200 -> Node0x1af0410;
	Node0x1af03a0 -> Node0x1af0410;
	Node0x1af0410 -> Node0x1a8f268;
	Node0x1a8f268 -> Node0x1af08b0;
}
