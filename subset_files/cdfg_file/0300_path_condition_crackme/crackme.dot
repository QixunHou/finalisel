digraph "DFG for'crackme' function" {
	Node0xcb7730[shape=record, label="  %5 = and i32 %2, %1"];
	Node0xcb7db0[shape=record, label="  %6 = xor i32 %3, -1"];
	Node0xcb7e50[shape=record, label="  %7 = add i32 %0, 2"];
	Node0xcb7ec0[shape=record, label="  %8 = add i32 %7, %2"];
	Node0xcb7f30[shape=record, label="  %9 = add i32 %8, %5"];
	Node0xcb7fa0[shape=record, label="  %10 = xor i32 %2, %1"];
	Node0xcb8040[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0xcb80e0[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0xcb8150[shape=record, label="  %13 = shl i32 %10, 2"];
	Node0xcb81c0[shape=record, label="  %14 = shl i32 %1, 1"];
	Node0xcb8230[shape=record, label="  %15 = xor i32 %14, -2"];
	Node0xcb82a0[shape=record, label="  %16 = xor i32 %2, -1"];
	Node0xcb8310[shape=record, label="  %17 = or i32 %16, %1"];
	Node0xcb8380[shape=record, label="  %18 = or i32 %2, %1"];
	Node0xcb83f0[shape=record, label="  %19 = shl i32 %17, 1"];
	Node0xcb8460[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0xcb84d0[shape=record, label="  %21 = and i32 %16, %1"];
	Node0xcb8540[shape=record, label="  %22 = xor i32 %0, -1"];
	Node0xcb85b0[shape=record, label="  %23 = or i32 %3, %0"];
	Node0xcb8620[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0xcb8690[shape=record, label="  %25 = xor i32 %3, %0"];
	Node0xcb8700[shape=record, label="  %26 = xor i32 %25, -1"];
	Node0xcb8770[shape=record, label="  %27 = and i32 %22, %3"];
	Node0xcb87e0[shape=record, label="  %28 = xor i32 %27, -1"];
	Node0xcb8850[shape=record, label="  %29 = xor i32 %23, -1"];
	Node0xcb88c0[shape=record, label="  %30 = shl i32 %27, 1"];
	Node0xcb8960[shape=record, label="  %31 = mul i32 %0, -3"];
	Node0xcb89d0[shape=record, label="  %32 = add i32 %21, %29"];
	Node0xcb8c80[shape=record, label="  %33 = mul i32 %32, -5"];
	Node0xcb8cf0[shape=record, label="  %34 = sub i32 %16, %0"];
	Node0xcb8d60[shape=record, label="  %35 = sub i32 %34, %15"];
	Node0xcb8dd0[shape=record, label="  %36 = sub i32 %35, %17"];
	Node0xcb8e40[shape=record, label="  %37 = add i32 %36, %18"];
	Node0xcb8eb0[shape=record, label="  %38 = sub i32 %37, %3"];
	Node0xcb8f20[shape=record, label="  %39 = add i32 %38, %6"];
	Node0xcb8f90[shape=record, label="  %40 = add i32 %39, %13"];
	Node0xcb9000[shape=record, label="  %41 = add i32 %40, %26"];
	Node0xcb9070[shape=record, label="  %42 = sub i32 %41, %25"];
	Node0xcb90e0[shape=record, label="  %43 = add i32 %42, %28"];
	Node0xcb9150[shape=record, label="  %44 = add i32 %43, %12"];
	Node0xcb91c0[shape=record, label="  %45 = sub i32 %44, %20"];
	Node0xcb9230[shape=record, label="  %46 = add i32 %45, %24"];
	Node0xcb92a0[shape=record, label="  %47 = sub i32 %46, %30"];
	Node0xcb9310[shape=record, label="  %48 = add i32 %47, %31"];
	Node0xcb9380[shape=record, label="  %49 = add i32 %48, %33"];
	Node0xcb93f0[shape=record, label="  %50 = icmp eq i32 %9, %49"];
	Node0xc58268[shape=record, label="  %51 = select i1 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xcb9890[shape=record, label="  %52 = tail call i32 @puts(i8* nonnull dereferenceable(1) %51)"];
	Node0xcb98e0[shape=record, label="  ret void"];
	Node0xcb7730 -> Node0xcb7db0;
	Node0xcb7db0 -> Node0xcb7e50;
	Node0xcb7e50 -> Node0xcb7ec0;
	Node0xcb7ec0 -> Node0xcb7f30;
	Node0xcb7f30 -> Node0xcb7fa0;
	Node0xcb7fa0 -> Node0xcb8040;
	Node0xcb8040 -> Node0xcb80e0;
	Node0xcb80e0 -> Node0xcb8150;
	Node0xcb8150 -> Node0xcb81c0;
	Node0xcb81c0 -> Node0xcb8230;
	Node0xcb8230 -> Node0xcb82a0;
	Node0xcb82a0 -> Node0xcb8310;
	Node0xcb8310 -> Node0xcb8380;
	Node0xcb8380 -> Node0xcb83f0;
	Node0xcb83f0 -> Node0xcb8460;
	Node0xcb8460 -> Node0xcb84d0;
	Node0xcb84d0 -> Node0xcb8540;
	Node0xcb8540 -> Node0xcb85b0;
	Node0xcb85b0 -> Node0xcb8620;
	Node0xcb8620 -> Node0xcb8690;
	Node0xcb8690 -> Node0xcb8700;
	Node0xcb8700 -> Node0xcb8770;
	Node0xcb8770 -> Node0xcb87e0;
	Node0xcb87e0 -> Node0xcb8850;
	Node0xcb8850 -> Node0xcb88c0;
	Node0xcb88c0 -> Node0xcb8960;
	Node0xcb8960 -> Node0xcb89d0;
	Node0xcb89d0 -> Node0xcb8c80;
	Node0xcb8c80 -> Node0xcb8cf0;
	Node0xcb8cf0 -> Node0xcb8d60;
	Node0xcb8d60 -> Node0xcb8dd0;
	Node0xcb8dd0 -> Node0xcb8e40;
	Node0xcb8e40 -> Node0xcb8eb0;
	Node0xcb8eb0 -> Node0xcb8f20;
	Node0xcb8f20 -> Node0xcb8f90;
	Node0xcb8f90 -> Node0xcb9000;
	Node0xcb9000 -> Node0xcb9070;
	Node0xcb9070 -> Node0xcb90e0;
	Node0xcb90e0 -> Node0xcb9150;
	Node0xcb9150 -> Node0xcb91c0;
	Node0xcb91c0 -> Node0xcb9230;
	Node0xcb9230 -> Node0xcb92a0;
	Node0xcb92a0 -> Node0xcb9310;
	Node0xcb9310 -> Node0xcb9380;
	Node0xcb9380 -> Node0xcb93f0;
	Node0xcb93f0 -> Node0xc58268;
	Node0xc58268 -> Node0xcb9890;
	Node0xcb9890 -> Node0xcb98e0;
edge [color=red]
	Node0xcb7e50 -> Node0xcb7ec0;
	Node0xcb7ec0 -> Node0xcb7f30;
	Node0xcb7730 -> Node0xcb7f30;
	Node0xcb7fa0 -> Node0xcb8040;
	Node0xcb8040 -> Node0xcb80e0;
	Node0xcb7fa0 -> Node0xcb8150;
	Node0xcb81c0 -> Node0xcb8230;
	Node0xcb82a0 -> Node0xcb8310;
	Node0xcb8310 -> Node0xcb83f0;
	Node0xcb83f0 -> Node0xcb8460;
	Node0xcb82a0 -> Node0xcb84d0;
	Node0xcb85b0 -> Node0xcb8620;
	Node0xcb8690 -> Node0xcb8700;
	Node0xcb8540 -> Node0xcb8770;
	Node0xcb8770 -> Node0xcb87e0;
	Node0xcb85b0 -> Node0xcb8850;
	Node0xcb8770 -> Node0xcb88c0;
	Node0xcb84d0 -> Node0xcb89d0;
	Node0xcb8850 -> Node0xcb89d0;
	Node0xcb89d0 -> Node0xcb8c80;
	Node0xcb82a0 -> Node0xcb8cf0;
	Node0xcb8cf0 -> Node0xcb8d60;
	Node0xcb8230 -> Node0xcb8d60;
	Node0xcb8d60 -> Node0xcb8dd0;
	Node0xcb8310 -> Node0xcb8dd0;
	Node0xcb8dd0 -> Node0xcb8e40;
	Node0xcb8380 -> Node0xcb8e40;
	Node0xcb8e40 -> Node0xcb8eb0;
	Node0xcb8eb0 -> Node0xcb8f20;
	Node0xcb7db0 -> Node0xcb8f20;
	Node0xcb8f20 -> Node0xcb8f90;
	Node0xcb8150 -> Node0xcb8f90;
	Node0xcb8f90 -> Node0xcb9000;
	Node0xcb8700 -> Node0xcb9000;
	Node0xcb9000 -> Node0xcb9070;
	Node0xcb8690 -> Node0xcb9070;
	Node0xcb9070 -> Node0xcb90e0;
	Node0xcb87e0 -> Node0xcb90e0;
	Node0xcb90e0 -> Node0xcb9150;
	Node0xcb80e0 -> Node0xcb9150;
	Node0xcb9150 -> Node0xcb91c0;
	Node0xcb8460 -> Node0xcb91c0;
	Node0xcb91c0 -> Node0xcb9230;
	Node0xcb8620 -> Node0xcb9230;
	Node0xcb9230 -> Node0xcb92a0;
	Node0xcb88c0 -> Node0xcb92a0;
	Node0xcb92a0 -> Node0xcb9310;
	Node0xcb8960 -> Node0xcb9310;
	Node0xcb9310 -> Node0xcb9380;
	Node0xcb8c80 -> Node0xcb9380;
	Node0xcb7f30 -> Node0xcb93f0;
	Node0xcb9380 -> Node0xcb93f0;
	Node0xcb93f0 -> Node0xc58268;
	Node0xc58268 -> Node0xcb9890;
}
