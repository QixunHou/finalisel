; ModuleID = '../.././c_source_file/0521_path_condition_crackme.c'
source_filename = "../.././c_source_file/0521_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = xor i32 %1, -1
  %5 = xor i32 %2, -1
  %6 = and i32 %5, %0
  %7 = xor i32 %6, -1
  %8 = sub i32 %6, %1
  %9 = xor i32 %0, -1
  %10 = and i32 %4, %2
  %11 = and i32 %10, %9
  %12 = or i32 %4, %2
  %13 = and i32 %12, %0
  %14 = xor i32 %13, -1
  %15 = xor i32 %11, %14
  %16 = or i32 %5, %0
  %17 = xor i32 %16, %1
  %18 = and i32 %2, %1
  %19 = or i32 %1, %0
  %20 = xor i32 %2, %1
  %21 = and i32 %20, %19
  %22 = and i32 %18, %0
  %23 = xor i32 %20, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %22, %24
  %26 = xor i32 %22, %23
  %27 = xor i32 %2, %0
  %28 = and i32 %27, %1
  %29 = shl i32 %28, 1
  %30 = or i32 %5, %1
  %31 = xor i32 %30, -1
  %32 = and i32 %1, %0
  %33 = or i32 %2, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %32, %34
  %36 = and i32 %5, %1
  %37 = xor i32 %36, -1
  %38 = and i32 %37, %0
  %39 = add i32 %36, 1
  %40 = and i32 %4, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %41, %2
  %43 = and i32 %18, %9
  %44 = and i32 %20, %0
  %45 = or i32 %43, %44
  %46 = or i32 %34, %1
  %47 = or i32 %2, %1
  %48 = and i32 %47, %9
  %49 = or i32 %22, %48
  %50 = shl i32 %30, 2
  %51 = or i32 %4, %0
  %52 = xor i32 %51, %2
  %53 = xor i32 %1, %0
  %54 = and i32 %33, %53
  %55 = and i32 %10, %0
  %56 = and i32 %12, %9
  %57 = or i32 %55, %56
  %58 = or i32 %37, %0
  %59 = xor i32 %51, -1
  %60 = or i32 %5, %59
  %61 = or i32 %31, %0
  %62 = xor i32 %53, -1
  %63 = add i32 %53, 1
  %64 = xor i32 %32, -1
  %65 = and i32 %27, %64
  %66 = shl i32 %65, 1
  %67 = xor i32 %47, %0
  %68 = shl i32 %67, 1
  %69 = xor i32 %20, -1
  %70 = or i32 %40, %69
  %71 = and i32 %2, %0
  %72 = or i32 %71, %59
  %73 = xor i32 %6, %30
  %74 = xor i32 %71, -1
  %75 = and i32 %74, %4
  %76 = and i32 %16, %53
  %77 = xor i32 %74, %1
  %78 = shl i32 %77, 1
  %79 = or i32 %27, %59
  %80 = xor i32 %71, %51
  %81 = or i32 %59, %2
  %82 = shl i32 %81, 1
  %83 = or i32 %36, %0
  %84 = and i32 %19, %5
  %85 = or i32 %32, %2
  %86 = xor i32 %32, %2
  %87 = shl i32 %86, 1
  %88 = and i32 %69, %0
  %89 = xor i32 %27, -1
  %90 = and i32 %51, %89
  %91 = xor i32 %18, %0
  %92 = or i32 %69, %9
  %93 = xor i32 %16, -1
  %94 = or i32 %32, %93
  %95 = xor i32 %19, -1
  %96 = or i32 %95, %2
  %97 = and i32 %20, %9
  %98 = xor i32 %22, -1
  %99 = xor i32 %97, %98
  %100 = or i32 %31, %9
  %101 = shl i32 %100, 1
  %102 = xor i32 %59, %2
  %103 = xor i32 %36, %0
  %104 = or i32 %20, %40
  %105 = xor i32 %69, %0
  %106 = and i32 %20, %64
  %107 = xor i32 %47, -1
  %108 = or i32 %107, %0
  %109 = shl i32 %108, 1
  %110 = or i32 %37, %9
  %111 = and i32 %89, %64
  %112 = or i32 %107, %9
  %113 = xor i32 %31, %0
  %114 = or i32 %22, %97
  %115 = or i32 %11, %13
  %116 = or i32 %93, %62
  %117 = or i32 %40, %5
  %118 = or i32 %18, %9
  %119 = and i32 %51, %69
  %120 = or i32 %93, %1
  %121 = xor i32 %37, %0
  %122 = or i32 %36, %9
  %123 = xor i32 %71, %19
  %124 = or i32 %71, %1
  %125 = or i32 %27, %4
  %126 = or i32 %89, %95
  %127 = shl i32 %126, 1
  %128 = or i32 %27, %95
  %129 = or i32 %71, %62
  %130 = shl i32 %129, 1
  %131 = xor i32 %16, %32
  %132 = add i32 %32, 1
  %133 = and i32 %7, %4
  %134 = add i32 %2, 1
  %135 = xor i32 %71, %1
  %136 = and i32 %7, %62
  %137 = or i32 %32, %5
  %138 = and i32 %53, %5
  %139 = shl i32 %41, 1
  %140 = or i32 %40, %2
  %141 = and i32 %89, %1
  %142 = or i32 %89, %4
  %143 = xor i32 %33, %32
  %144 = or i32 %20, %59
  %145 = or i32 %27, %53
  %146 = or i32 %55, %23
  %147 = xor i32 %40, %37
  %148 = and i32 %62, %2
  %149 = shl i32 %148, 1
  %150 = or i32 %6, %53
  %151 = and i32 %27, %19
  %152 = or i32 %6, %18
  %153 = or i32 %32, %31
  %154 = shl i32 %153, 1
  %155 = and i32 %51, %5
  %156 = and i32 %89, %4
  %157 = or i32 %34, %62
  %158 = or i32 %27, %32
  %159 = xor i32 %95, %2
  %160 = xor i32 %44, -1
  %161 = xor i32 %43, %160
  %162 = or i32 %47, %0
  %163 = xor i32 %30, %32
  %164 = or i32 %20, %95
  %165 = xor i32 %55, %24
  %166 = shl i32 %165, 2
  %167 = xor i32 %19, %2
  %168 = shl i32 %167, 1
  %169 = xor i32 %40, %2
  %170 = or i32 %71, %95
  %171 = add i32 %71, 1
  %172 = xor i32 %18, -1
  %173 = xor i32 %6, %172
  %174 = and i32 %89, %62
  %175 = and i32 %69, %41
  %176 = xor i32 %6, %1
  %177 = shl i32 %176, 1
  %178 = and i32 %33, %62
  %179 = or i32 %5, %95
  %180 = shl i32 %93, 1
  %181 = and i32 %20, %41
  %182 = and i32 %5, %41
  %183 = or i32 %27, %1
  %184 = shl i32 %183, 2
  %185 = or i32 %93, %4
  %186 = shl i32 %185, 1
  %187 = and i32 %53, %74
  %188 = shl i32 %187, 1
  %189 = or i32 %40, %89
  %190 = and i32 %33, %1
  %191 = xor i32 %172, %0
  %192 = shl i32 %191, 1
  %193 = xor i32 %30, %0
  %194 = and i32 %27, %62
  %195 = or i32 %6, %62
  %196 = or i32 %71, %53
  %197 = and i32 %19, %89
  %198 = xor i32 %93, %1
  %199 = or i32 %18, %0
  %200 = and i32 %5, %62
  %201 = or i32 %172, %9
  %202 = or i32 %22, %67
  %203 = and i32 %7, %1
  %204 = xor i32 %67, %98
  %205 = xor i32 %40, %172
  %206 = shl i32 %205, 1
  %207 = and i32 %69, %64
  %208 = or i32 %53, %5
  %209 = xor i32 %48, %98
  %210 = and i32 %19, %69
  %211 = xor i32 %47, %32
  %212 = or i32 %20, %0
  %213 = and i32 %27, %51
  %214 = or i32 %6, %31
  %215 = shl i32 %214, 1
  %216 = or i32 %89, %59
  %217 = or i32 %30, %9
  %218 = or i32 %172, %0
  %219 = or i32 %20, %9
  %220 = xor i32 %11, %219
  %221 = or i32 %34, %4
  %222 = and i32 %27, %53
  %223 = or i32 %27, %40
  %224 = xor i32 %107, %0
  %225 = shl i32 %224, 1
  %226 = and i32 %30, %9
  %227 = shl i32 %226, 2
  %228 = xor i32 %34, %1
  %229 = and i32 %74, %62
  %230 = xor i32 %219, -1
  %231 = or i32 %11, %230
  %232 = xor i32 %64, %2
  %233 = add i32 %51, 1
  %234 = or i32 %6, %4
  %235 = xor i32 %0, 2147483647
  %236 = xor i32 %235, %12
  %237 = xor i32 %236, %55
  %238 = shl i32 %237, 1
  %239 = and i32 %16, %1
  %240 = and i32 %69, %9
  %241 = xor i32 %212, -1
  %242 = or i32 %55, %241
  %243 = or i32 %20, %32
  %244 = and i32 %107, %9
  %245 = mul i32 %244, 21
  %246 = and i32 %36, %9
  %247 = mul i32 %246, 40
  %248 = and i32 %107, %0
  %249 = mul i32 %248, 35
  %250 = and i32 %36, %0
  %251 = mul i32 %250, 12
  %252 = and i32 %31, %9
  %253 = mul i32 %252, 30
  %254 = mul i32 %43, 25
  %255 = and i32 %31, %0
  %256 = mul i32 %255, 31
  %257 = mul i32 %22, 39
  %258 = add i32 %169, %2
  %259 = add i32 %258, %213
  %260 = add i32 %259, %189
  %261 = add i32 %260, %156
  %262 = add i32 %261, %133
  %263 = add i32 %262, %120
  %264 = add i32 %263, %116
  %265 = add i32 %264, %76
  %266 = add i32 %265, %46
  %267 = add i32 %266, %38
  %268 = add i32 %267, %114
  %269 = shl i32 %268, 1
  %270 = sub i32 %134, %102
  %271 = add i32 %270, %122
  %272 = sub i32 %271, %124
  %273 = add i32 %272, %121
  %274 = mul i32 %273, 5
  %275 = add i32 %200, %132
  %276 = mul i32 %275, 3
  %277 = add i32 %51, %1
  %278 = add i32 %277, %63
  %279 = add i32 %278, %53
  %280 = add i32 %279, %32
  %281 = add i32 %280, %233
  %282 = sub i32 %281, %18
  %283 = add i32 %282, %31
  %284 = add i32 %283, %39
  %285 = sub i32 %284, %42
  %286 = add i32 %285, %52
  %287 = add i32 %286, %60
  %288 = add i32 %287, %84
  %289 = add i32 %288, %47
  %290 = sub i32 %289, %85
  %291 = sub i32 %290, %96
  %292 = sub i32 %291, %117
  %293 = add i32 %292, %137
  %294 = sub i32 %293, %138
  %295 = sub i32 %294, %139
  %296 = sub i32 %295, %140
  %297 = add i32 %296, %155
  %298 = sub i32 %297, %159
  %299 = add i32 %298, %171
  %300 = add i32 %299, %179
  %301 = sub i32 %300, %182
  %302 = sub i32 %301, %208
  %303 = add i32 %302, %16
  %304 = sub i32 %303, %232
  %305 = add i32 %304, %27
  %306 = sub i32 %305, %6
  %307 = sub i32 %306, %17
  %308 = add i32 %307, %21
  %309 = add i32 %308, %35
  %310 = sub i32 %309, %50
  %311 = sub i32 %310, %54
  %312 = sub i32 %311, %58
  %313 = sub i32 %312, %61
  %314 = add i32 %313, %70
  %315 = sub i32 %314, %72
  %316 = sub i32 %315, %73
  %317 = sub i32 %316, %75
  %318 = add i32 %317, %79
  %319 = sub i32 %318, %80
  %320 = sub i32 %319, %82
  %321 = sub i32 %320, %83
  %322 = sub i32 %321, %87
  %323 = sub i32 %322, %88
  %324 = add i32 %323, %90
  %325 = add i32 %324, %91
  %326 = sub i32 %325, %92
  %327 = add i32 %326, %94
  %328 = sub i32 %327, %103
  %329 = add i32 %328, %104
  %330 = sub i32 %329, %105
  %331 = sub i32 %330, %106
  %332 = add i32 %331, %110
  %333 = sub i32 %332, %111
  %334 = add i32 %333, %112
  %335 = sub i32 %334, %113
  %336 = sub i32 %335, %118
  %337 = sub i32 %336, %119
  %338 = sub i32 %337, %123
  %339 = sub i32 %338, %125
  %340 = add i32 %339, %128
  %341 = sub i32 %340, %131
  %342 = add i32 %341, %135
  %343 = sub i32 %342, %136
  %344 = sub i32 %343, %141
  %345 = add i32 %344, %142
  %346 = add i32 %345, %143
  %347 = sub i32 %346, %144
  %348 = sub i32 %347, %145
  %349 = add i32 %348, %147
  %350 = sub i32 %349, %149
  %351 = add i32 %350, %150
  %352 = sub i32 %351, %151
  %353 = sub i32 %352, %152
  %354 = add i32 %353, %157
  %355 = sub i32 %354, %158
  %356 = add i32 %355, %162
  %357 = sub i32 %356, %163
  %358 = add i32 %357, %164
  %359 = sub i32 %358, %168
  %360 = sub i32 %359, %170
  %361 = sub i32 %360, %173
  %362 = sub i32 %361, %174
  %363 = add i32 %362, %175
  %364 = sub i32 %363, %178
  %365 = sub i32 %364, %180
  %366 = sub i32 %365, %181
  %367 = add i32 %366, %190
  %368 = sub i32 %367, %193
  %369 = add i32 %368, %194
  %370 = sub i32 %369, %195
  %371 = sub i32 %370, %196
  %372 = add i32 %371, %197
  %373 = sub i32 %372, %198
  %374 = sub i32 %373, %199
  %375 = add i32 %374, %201
  %376 = sub i32 %375, %203
  %377 = add i32 %376, %207
  %378 = add i32 %377, %210
  %379 = add i32 %378, %211
  %380 = add i32 %379, %212
  %381 = sub i32 %380, %216
  %382 = sub i32 %381, %217
  %383 = add i32 %382, %218
  %384 = sub i32 %383, %221
  %385 = sub i32 %384, %97
  %386 = add i32 %385, %222
  %387 = sub i32 %386, %223
  %388 = sub i32 %387, %228
  %389 = sub i32 %388, %229
  %390 = add i32 %389, %234
  %391 = add i32 %390, %239
  %392 = add i32 %391, %240
  %393 = add i32 %392, %243
  %394 = add i32 %393, %15
  %395 = sub i32 %394, %25
  %396 = add i32 %395, %26
  %397 = sub i32 %396, %29
  %398 = sub i32 %397, %45
  %399 = add i32 %398, %49
  %400 = sub i32 %399, %57
  %401 = sub i32 %400, %66
  %402 = sub i32 %401, %68
  %403 = sub i32 %402, %78
  %404 = sub i32 %403, %99
  %405 = sub i32 %404, %101
  %406 = sub i32 %405, %109
  %407 = sub i32 %406, %115
  %408 = sub i32 %407, %127
  %409 = sub i32 %408, %130
  %410 = sub i32 %409, %146
  %411 = sub i32 %410, %154
  %412 = sub i32 %411, %161
  %413 = sub i32 %412, %177
  %414 = sub i32 %413, %184
  %415 = sub i32 %414, %186
  %416 = sub i32 %415, %188
  %417 = sub i32 %416, %192
  %418 = sub i32 %417, %202
  %419 = sub i32 %418, %204
  %420 = sub i32 %419, %206
  %421 = add i32 %420, %209
  %422 = sub i32 %421, %215
  %423 = add i32 %422, %220
  %424 = sub i32 %423, %225
  %425 = sub i32 %424, %227
  %426 = add i32 %425, %231
  %427 = add i32 %426, %242
  %428 = add i32 %427, %245
  %429 = add i32 %428, %247
  %430 = add i32 %429, %249
  %431 = add i32 %430, %251
  %432 = add i32 %431, %253
  %433 = add i32 %432, %254
  %434 = add i32 %433, %256
  %435 = add i32 %434, %257
  %436 = add i32 %435, %276
  %437 = add i32 %436, %166
  %438 = sub i32 %437, %238
  %439 = add i32 %438, %274
  %440 = add i32 %439, %269
  %441 = icmp eq i32 %8, %440
  %442 = select i1 %441, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %443 = tail call i32 @puts(i8* nonnull dereferenceable(1) %442)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
