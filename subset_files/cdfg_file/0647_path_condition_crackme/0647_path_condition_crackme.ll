; ModuleID = '../.././c_source_file/0647_path_condition_crackme.c'
source_filename = "../.././c_source_file/0647_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = and i32 %4, %3
  %7 = xor i32 %2, -1
  %8 = xor i32 %1, %0
  %9 = and i32 %8, %7
  %10 = xor i32 %1, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %11, %2
  %13 = shl i32 %12, 1
  %14 = sub i32 1, %9
  %15 = sub i32 %14, %13
  %16 = add i32 %15, %6
  %17 = xor i32 %4, %3
  %18 = xor i32 %4, -1
  %19 = or i32 %18, %3
  %20 = xor i32 %17, -1
  %21 = xor i32 %3, -1
  %22 = and i32 %18, %3
  %23 = shl i32 %22, 1
  %24 = xor i32 %23, -2
  %25 = or i32 %4, %3
  %26 = shl i32 %25, 2
  %27 = xor i32 %26, -4
  %28 = add i32 %19, 1
  %29 = shl i32 %6, 2
  %30 = and i32 %2, %0
  %31 = xor i32 %30, -1
  %32 = xor i32 %31, %1
  %33 = and i32 %7, %1
  %34 = xor i32 %33, -1
  %35 = or i32 %34, %0
  %36 = xor i32 %0, -1
  %37 = and i32 %10, %2
  %38 = and i32 %37, %36
  %39 = or i32 %10, %2
  %40 = and i32 %39, %0
  %41 = xor i32 %40, -1
  %42 = xor i32 %38, %41
  %43 = or i32 %2, %0
  %44 = and i32 %43, %10
  %45 = shl i32 %44, 1
  %46 = or i32 %2, %1
  %47 = or i32 %46, %0
  %48 = xor i32 %43, -1
  %49 = xor i32 %8, -1
  %50 = or i32 %48, %49
  %51 = and i32 %37, %0
  %52 = xor i32 %2, %1
  %53 = xor i32 %52, %0
  %54 = xor i32 %53, -1
  %55 = xor i32 %51, %54
  %56 = shl i32 %55, 1
  %57 = and i32 %7, %0
  %58 = or i32 %57, %10
  %59 = shl i32 %58, 1
  %60 = and i32 %49, %2
  %61 = or i32 %8, %2
  %62 = xor i32 %11, -1
  %63 = or i32 %30, %62
  %64 = and i32 %1, %0
  %65 = or i32 %7, %0
  %66 = xor i32 %65, %64
  %67 = xor i32 %52, -1
  %68 = and i32 %67, %0
  %69 = xor i32 %2, %0
  %70 = and i32 %69, %10
  %71 = and i32 %8, %2
  %72 = and i32 %65, %10
  %73 = and i32 %69, %49
  %74 = add i32 %33, 1
  %75 = and i32 %2, %1
  %76 = xor i32 %75, -1
  %77 = and i32 %76, %0
  %78 = or i32 %7, %1
  %79 = xor i32 %78, -1
  %80 = or i32 %64, %79
  %81 = and i32 %10, %0
  %82 = xor i32 %81, -1
  %83 = and i32 %7, %82
  %84 = and i32 %65, %1
  %85 = xor i32 %64, -1
  %86 = xor i32 %69, -1
  %87 = and i32 %86, %85
  %88 = or i32 %75, %81
  %89 = xor i32 %57, %78
  %90 = or i32 %1, %0
  %91 = and i32 %69, %90
  %92 = xor i32 %46, -1
  %93 = or i32 %64, %92
  %94 = and i32 %69, %1
  %95 = or i32 %76, %0
  %96 = or i32 %69, %64
  %97 = xor i32 %90, -1
  %98 = or i32 %86, %97
  %99 = and i32 %52, %11
  %100 = shl i32 %99, 1
  %101 = xor i32 %34, %0
  %102 = or i32 %78, %0
  %103 = shl i32 %102, 1
  %104 = and i32 %75, %0
  %105 = and i32 %46, %36
  %106 = xor i32 %104, -1
  %107 = xor i32 %105, %106
  %108 = add i32 %81, 1
  %109 = xor i32 %43, %1
  %110 = or i32 %46, %36
  %111 = or i32 %8, %7
  %112 = xor i32 %85, %2
  %113 = or i32 %52, %0
  %114 = xor i32 %113, -1
  %115 = or i32 %51, %114
  %116 = xor i32 %46, %0
  %117 = or i32 %104, %116
  %118 = and i32 %52, %90
  %119 = or i32 %30, %8
  %120 = and i32 %67, %85
  %121 = and i32 %11, %86
  %122 = or i32 %79, %0
  %123 = xor i32 %30, %1
  %124 = and i32 %69, %82
  %125 = xor i32 %51, %113
  %126 = shl i32 %125, 2
  %127 = or i32 %62, %2
  %128 = or i32 %81, %2
  %129 = and i32 %43, %8
  %130 = or i32 %86, %62
  %131 = shl i32 %7, 1
  %132 = or i32 %104, %105
  %133 = or i32 %81, %86
  %134 = or i32 %69, %10
  %135 = or i32 %52, %64
  %136 = and i32 %76, %36
  %137 = shl i32 %136, 1
  %138 = xor i32 %65, %1
  %139 = xor i32 %104, %53
  %140 = shl i32 %139, 1
  %141 = xor i32 %30, %34
  %142 = or i32 %64, %48
  %143 = shl i32 %142, 1
  %144 = and i32 %86, %1
  %145 = or i32 %81, %7
  %146 = xor i32 %30, %11
  %147 = xor i32 %57, -1
  %148 = and i32 %147, %10
  %149 = or i32 %30, %10
  %150 = or i32 %30, %49
  %151 = or i32 %64, %7
  %152 = or i32 %97, %2
  %153 = xor i32 %65, -1
  %154 = add i32 %65, 1
  %155 = or i32 %86, %10
  %156 = or i32 %7, %62
  %157 = or i32 %92, %36
  %158 = add i32 %8, 1
  %159 = or i32 %34, %36
  %160 = or i32 %79, %36
  %161 = or i32 %52, %97
  %162 = shl i32 %161, 1
  %163 = shl i32 %46, 1
  %164 = and i32 %39, %36
  %165 = xor i32 %51, -1
  %166 = xor i32 %164, %165
  %167 = and i32 %11, %7
  %168 = xor i32 %90, %2
  %169 = xor i32 %81, %76
  %170 = or i32 %7, %49
  %171 = shl i32 %170, 1
  %172 = and i32 %43, %1
  %173 = or i32 %49, %2
  %174 = and i32 %78, %0
  %175 = and i32 %34, %36
  %176 = xor i32 %43, %64
  %177 = or i32 %67, %62
  %178 = xor i32 %48, %1
  %179 = xor i32 %79, %0
  %180 = or i32 %8, %48
  %181 = xor i32 %39, %0
  %182 = or i32 %51, %181
  %183 = xor i32 %92, %0
  %184 = or i32 %69, %62
  %185 = or i32 %48, %10
  %186 = and i32 %147, %1
  %187 = and i32 %90, %2
  %188 = and i32 %75, %36
  %189 = and i32 %46, %0
  %190 = xor i32 %188, -1
  %191 = xor i32 %189, %190
  %192 = and i32 %52, %85
  %193 = or i32 %86, %1
  %194 = shl i32 %193, 1
  %195 = and i32 %7, %85
  %196 = or i32 %67, %0
  %197 = add i32 %43, 1
  %198 = xor i32 %116, %106
  %199 = xor i32 %78, %0
  %200 = and i32 %86, %10
  %201 = xor i32 %57, %76
  %202 = or i32 %69, %49
  %203 = and i32 %69, %11
  %204 = and i32 %52, %0
  %205 = xor i32 %204, %190
  %206 = add i32 %57, 1
  %207 = and i32 %147, %49
  %208 = or i32 %188, %204
  %209 = and i32 %82, %2
  %210 = or i32 %52, %36
  %211 = shl i32 %210, 1
  %212 = or i32 %7, %97
  %213 = and i32 %43, %49
  %214 = xor i32 %82, %2
  %215 = and i32 %31, %10
  %216 = or i32 %86, %49
  %217 = or i32 %92, %0
  %218 = and i32 %85, %2
  %219 = and i32 %86, %82
  %220 = and i32 %69, %8
  %221 = xor i32 %75, %0
  %222 = shl i32 %221, 1
  %223 = or i32 %33, %0
  %224 = xor i32 %81, %2
  %225 = or i32 %30, %92
  %226 = or i32 %64, %153
  %227 = xor i32 %30, %46
  %228 = or i32 %52, %62
  %229 = or i32 %33, %81
  %230 = shl i32 %76, 1
  %231 = or i32 %8, %86
  %232 = or i32 %57, %49
  %233 = shl i32 %232, 1
  %234 = xor i32 %78, %64
  %235 = xor i32 %38, %210
  %236 = xor i32 %62, %2
  %237 = add i32 %52, 1
  %238 = and i32 %8, %31
  %239 = or i32 %30, %33
  %240 = or i32 %30, %1
  %241 = xor i32 %210, -1
  %242 = or i32 %38, %241
  %243 = xor i32 %64, %2
  %244 = or i32 %78, %36
  %245 = or i32 %48, %1
  %246 = or i32 %64, %2
  %247 = and i32 %65, %49
  %248 = shl i32 %247, 1
  %249 = or i32 %104, %54
  %250 = and i32 %7, %49
  %251 = xor i32 %153, %1
  %252 = and i32 %78, %36
  %253 = or i32 %67, %36
  %254 = and i32 %86, %49
  %255 = add i32 %90, 1
  %256 = and i32 %31, %1
  %257 = or i32 %81, %67
  %258 = and i32 %52, %36
  %259 = and i32 %90, %7
  %260 = or i32 %69, %8
  %261 = and i32 %8, %86
  %262 = and i32 %52, %82
  %263 = or i32 %33, %36
  %264 = shl i32 %263, 2
  %265 = or i32 %51, %53
  %266 = xor i32 %81, %34
  %267 = or i32 %8, %153
  %268 = or i32 %64, %67
  %269 = or i32 %153, %49
  %270 = or i32 %57, %8
  %271 = and i32 %67, %82
  %272 = and i32 %34, %0
  %273 = and i32 %90, %86
  %274 = add i32 %11, 1
  %275 = xor i32 %76, %0
  %276 = and i32 %69, %85
  %277 = or i32 %67, %97
  %278 = shl i32 %277, 1
  %279 = or i32 %69, %97
  %280 = shl i32 %279, 2
  %281 = and i32 %90, %67
  %282 = or i32 %75, %0
  %283 = or i32 %69, %1
  %284 = and i32 %67, %36
  %285 = and i32 %31, %49
  %286 = xor i32 %147, %1
  %287 = or i32 %188, %189
  %288 = xor i32 %258, 2147483647
  %289 = xor i32 %288, %104
  %290 = shl i32 %289, 1
  %291 = xor i32 %46, %64
  %292 = or i32 %51, %164
  %293 = shl i32 %292, 1
  %294 = or i32 %75, %36
  %295 = xor i32 %67, %0
  %296 = xor i32 %181, %165
  %297 = or i32 %76, %36
  %298 = or i32 %57, %1
  %299 = or i32 %153, %1
  %300 = xor i32 %57, %1
  %301 = and i32 %11, %67
  %302 = xor i32 %33, %0
  %303 = and i32 %11, %2
  %304 = or i32 %52, %81
  %305 = or i32 %153, %10
  %306 = shl i32 %90, 1
  %307 = or i32 %57, %79
  %308 = or i32 %69, %81
  %309 = or i32 %104, %258
  %310 = and i32 %8, %147
  %311 = xor i32 %97, %2
  %312 = shl i32 %311, 1
  %313 = or i32 %38, %40
  %314 = xor i32 %30, %90
  %315 = or i32 %64, %86
  %316 = or i32 %30, %97
  %317 = and i32 %33, %36
  %318 = mul i32 %317, -28
  %319 = and i32 %92, %0
  %320 = and i32 %33, %0
  %321 = and i32 %79, %36
  %322 = mul i32 %321, 18
  %323 = and i32 %79, %0
  %324 = mul i32 %323, -17
  %325 = mul i32 %104, -13
  %326 = add i32 %167, %64
  %327 = add i32 %326, %112
  %328 = add i32 %327, %83
  %329 = add i32 %328, %3
  %330 = add i32 %329, %316
  %331 = add i32 %330, %302
  %332 = add i32 %331, %297
  %333 = add i32 %332, %273
  %334 = add i32 %333, %270
  %335 = add i32 %334, %268
  %336 = add i32 %335, %266
  %337 = add i32 %336, %260
  %338 = add i32 %337, %254
  %339 = add i32 %338, %253
  %340 = add i32 %339, %239
  %341 = add i32 %340, %234
  %342 = add i32 %341, %203
  %343 = add i32 %342, %200
  %344 = add i32 %343, %157
  %345 = add i32 %344, %84
  %346 = add i32 %345, %72
  %347 = add i32 %346, %68
  %348 = add i32 %347, %50
  %349 = add i32 %348, %235
  %350 = shl i32 %349, 1
  %351 = sub i32 %65, %61
  %352 = add i32 %351, %227
  %353 = sub i32 %352, %188
  %354 = add i32 %353, %199
  %355 = add i32 %354, %172
  %356 = add i32 %355, %109
  %357 = sub i32 %356, %73
  %358 = mul i32 %357, 5
  %359 = sub i32 %86, %214
  %360 = add i32 %359, %225
  %361 = add i32 %360, %144
  %362 = sub i32 %361, %98
  %363 = add i32 %362, %28
  %364 = mul i32 %363, 3
  %365 = sub i32 %320, %319
  %366 = mul i32 %365, 14
  %367 = add i32 %47, %79
  %368 = shl i32 %367, 2
  %369 = sub i32 3, %2
  %370 = add i32 %369, %108
  %371 = add i32 %370, %158
  %372 = add i32 %371, %8
  %373 = sub i32 %372, %81
  %374 = add i32 %373, %85
  %375 = add i32 %374, %255
  %376 = add i32 %375, %274
  %377 = add i32 %376, %21
  %378 = sub i32 %377, %60
  %379 = add i32 %378, %31
  %380 = add i32 %379, %71
  %381 = add i32 %380, %74
  %382 = sub i32 %381, %111
  %383 = sub i32 %382, %33
  %384 = sub i32 %383, %127
  %385 = sub i32 %384, %128
  %386 = sub i32 %385, %131
  %387 = sub i32 %386, %145
  %388 = add i32 %387, %151
  %389 = add i32 %388, %152
  %390 = add i32 %389, %154
  %391 = add i32 %390, %156
  %392 = add i32 %391, %57
  %393 = add i32 %392, %92
  %394 = sub i32 %393, %168
  %395 = add i32 %394, %52
  %396 = sub i32 %395, %173
  %397 = add i32 %396, %43
  %398 = sub i32 %397, %187
  %399 = add i32 %398, %195
  %400 = add i32 %399, %197
  %401 = add i32 %400, %206
  %402 = add i32 %401, %209
  %403 = add i32 %402, %212
  %404 = add i32 %403, %218
  %405 = add i32 %404, %224
  %406 = sub i32 %405, %236
  %407 = add i32 %406, %237
  %408 = sub i32 %407, %30
  %409 = sub i32 %408, %243
  %410 = sub i32 %409, %246
  %411 = sub i32 %410, %250
  %412 = sub i32 %411, %259
  %413 = sub i32 %412, %75
  %414 = sub i32 %413, %69
  %415 = add i32 %414, %303
  %416 = sub i32 %415, %306
  %417 = sub i32 %416, %32
  %418 = sub i32 %417, %35
  %419 = add i32 %418, %63
  %420 = add i32 %419, %66
  %421 = add i32 %420, %70
  %422 = sub i32 %421, %77
  %423 = sub i32 %422, %80
  %424 = add i32 %423, %87
  %425 = sub i32 %424, %88
  %426 = add i32 %425, %89
  %427 = sub i32 %426, %91
  %428 = sub i32 %427, %93
  %429 = add i32 %428, %94
  %430 = add i32 %429, %95
  %431 = add i32 %430, %96
  %432 = add i32 %431, %101
  %433 = sub i32 %432, %110
  %434 = add i32 %433, %118
  %435 = add i32 %434, %119
  %436 = sub i32 %435, %120
  %437 = add i32 %436, %121
  %438 = add i32 %437, %122
  %439 = sub i32 %438, %123
  %440 = add i32 %439, %124
  %441 = sub i32 %440, %129
  %442 = add i32 %441, %130
  %443 = add i32 %442, %133
  %444 = add i32 %443, %134
  %445 = sub i32 %444, %135
  %446 = add i32 %445, %138
  %447 = sub i32 %446, %141
  %448 = sub i32 %447, %146
  %449 = sub i32 %448, %148
  %450 = add i32 %449, %149
  %451 = sub i32 %450, %150
  %452 = add i32 %451, %155
  %453 = add i32 %452, %159
  %454 = sub i32 %453, %160
  %455 = sub i32 %454, %163
  %456 = sub i32 %455, %169
  %457 = sub i32 %456, %171
  %458 = add i32 %457, %174
  %459 = sub i32 %458, %175
  %460 = add i32 %459, %176
  %461 = sub i32 %460, %177
  %462 = add i32 %461, %178
  %463 = add i32 %462, %179
  %464 = add i32 %463, %180
  %465 = add i32 %464, %183
  %466 = add i32 %465, %184
  %467 = sub i32 %466, %185
  %468 = add i32 %467, %186
  %469 = add i32 %468, %192
  %470 = sub i32 %469, %196
  %471 = add i32 %470, %201
  %472 = sub i32 %471, %202
  %473 = sub i32 %472, %207
  %474 = sub i32 %473, %213
  %475 = add i32 %474, %215
  %476 = sub i32 %475, %216
  %477 = sub i32 %476, %217
  %478 = add i32 %477, %219
  %479 = add i32 %478, %220
  %480 = sub i32 %479, %223
  %481 = add i32 %480, %113
  %482 = add i32 %481, %226
  %483 = add i32 %482, %228
  %484 = add i32 %483, %229
  %485 = sub i32 %484, %230
  %486 = add i32 %485, %231
  %487 = sub i32 %486, %238
  %488 = sub i32 %487, %240
  %489 = sub i32 %488, %244
  %490 = sub i32 %489, %245
  %491 = add i32 %490, %204
  %492 = sub i32 %491, %116
  %493 = sub i32 %492, %251
  %494 = add i32 %493, %189
  %495 = add i32 %494, %252
  %496 = add i32 %495, %256
  %497 = sub i32 %496, %257
  %498 = add i32 %497, %258
  %499 = add i32 %498, %261
  %500 = add i32 %499, %262
  %501 = add i32 %500, %267
  %502 = add i32 %501, %269
  %503 = add i32 %502, %271
  %504 = add i32 %503, %272
  %505 = add i32 %504, %275
  %506 = add i32 %505, %276
  %507 = sub i32 %506, %281
  %508 = sub i32 %507, %282
  %509 = sub i32 %508, %283
  %510 = add i32 %509, %284
  %511 = add i32 %510, %285
  %512 = add i32 %511, %286
  %513 = sub i32 %512, %291
  %514 = add i32 %513, %294
  %515 = add i32 %514, %295
  %516 = add i32 %515, %298
  %517 = sub i32 %516, %299
  %518 = add i32 %517, %300
  %519 = sub i32 %518, %301
  %520 = add i32 %519, %53
  %521 = add i32 %520, %304
  %522 = sub i32 %521, %105
  %523 = add i32 %522, %305
  %524 = sub i32 %523, %307
  %525 = add i32 %524, %308
  %526 = add i32 %525, %310
  %527 = sub i32 %526, %312
  %528 = sub i32 %527, %314
  %529 = add i32 %528, %315
  %530 = sub i32 %529, %17
  %531 = sub i32 %530, %19
  %532 = add i32 %531, %20
  %533 = sub i32 %532, %22
  %534 = sub i32 %533, %42
  %535 = sub i32 %534, %45
  %536 = sub i32 %535, %59
  %537 = sub i32 %536, %100
  %538 = sub i32 %537, %103
  %539 = add i32 %538, %107
  %540 = add i32 %539, %115
  %541 = add i32 %540, %117
  %542 = add i32 %541, %132
  %543 = sub i32 %542, %137
  %544 = sub i32 %543, %143
  %545 = sub i32 %544, %162
  %546 = add i32 %545, %166
  %547 = add i32 %546, %182
  %548 = sub i32 %547, %191
  %549 = sub i32 %548, %194
  %550 = sub i32 %549, %198
  %551 = sub i32 %550, %205
  %552 = sub i32 %551, %208
  %553 = sub i32 %552, %211
  %554 = sub i32 %553, %222
  %555 = sub i32 %554, %233
  %556 = sub i32 %555, %242
  %557 = sub i32 %556, %248
  %558 = sub i32 %557, %249
  %559 = sub i32 %558, %264
  %560 = add i32 %559, %265
  %561 = sub i32 %560, %278
  %562 = sub i32 %561, %280
  %563 = add i32 %562, %287
  %564 = add i32 %563, %296
  %565 = add i32 %564, %309
  %566 = sub i32 %565, %313
  %567 = add i32 %566, %318
  %568 = add i32 %567, %322
  %569 = add i32 %568, %324
  %570 = add i32 %569, %325
  %571 = sub i32 %570, %29
  %572 = sub i32 %571, %56
  %573 = sub i32 %572, %126
  %574 = sub i32 %573, %140
  %575 = sub i32 %574, %293
  %576 = add i32 %575, %366
  %577 = add i32 %576, %368
  %578 = add i32 %577, %24
  %579 = sub i32 %578, %27
  %580 = sub i32 %579, %290
  %581 = add i32 %580, %364
  %582 = add i32 %581, %358
  %583 = add i32 %582, %350
  %584 = icmp eq i32 %16, %583
  %585 = select i1 %584, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %586 = tail call i32 @puts(i8* nonnull dereferenceable(1) %585)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
