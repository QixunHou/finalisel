digraph "DFG for'crackme' function" {
	Node0xddb5a0[shape=record, label="  %3 = or i32 %1, %0"];
	Node0xddbc50[shape=record, label="  %4 = sub i32 0, %3"];
	Node0xddbd10[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0xddbd80[shape=record, label="  %6 = or i32 %5, %0"];
	Node0xddbe20[shape=record, label="  %7 = shl i32 %1, 1"];
	Node0xddbec0[shape=record, label="  %8 = shl i32 %0, 2"];
	Node0xddbf30[shape=record, label="  %9 = and i32 %5, %0"];
	Node0xddbfa0[shape=record, label="  %10 = xor i32 %9, -1"];
	Node0xddc010[shape=record, label="  %11 = xor i32 %5, %0"];
	Node0xddc080[shape=record, label="  %12 = xor i32 %3, -1"];
	Node0xddc120[shape=record, label="  %13 = mul i32 %12, -5"];
	Node0xddc190[shape=record, label="  %14 = xor i32 %6, -1"];
	Node0xddc230[shape=record, label="  %15 = mul i32 %14, -6"];
	Node0xddc2d0[shape=record, label="  %16 = shl i32 %9, 3"];
	Node0xddc340[shape=record, label="  %17 = and i32 %1, %0"];
	Node0xddc3e0[shape=record, label="  %18 = mul i32 %17, -12"];
	Node0xddc480[shape=record, label="  %19 = add i32 %8, -2"];
	Node0xddc4f0[shape=record, label="  %20 = add i32 %19, %7"];
	Node0xddc560[shape=record, label="  %21 = add i32 %20, %6"];
	Node0xddc5d0[shape=record, label="  %22 = add i32 %21, %10"];
	Node0xddc640[shape=record, label="  %23 = add i32 %22, %11"];
	Node0xddc6b0[shape=record, label="  %24 = add i32 %23, %13"];
	Node0xddc720[shape=record, label="  %25 = add i32 %24, %15"];
	Node0xddc790[shape=record, label="  %26 = sub i32 %25, %16"];
	Node0xddc800[shape=record, label="  %27 = add i32 %26, %18"];
	Node0xddc870[shape=record, label="  %28 = icmp eq i32 %27, %4"];
	Node0xd7c268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0xddcd10[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0xddcd60[shape=record, label="  ret void"];
	Node0xddb5a0 -> Node0xddbc50;
	Node0xddbc50 -> Node0xddbd10;
	Node0xddbd10 -> Node0xddbd80;
	Node0xddbd80 -> Node0xddbe20;
	Node0xddbe20 -> Node0xddbec0;
	Node0xddbec0 -> Node0xddbf30;
	Node0xddbf30 -> Node0xddbfa0;
	Node0xddbfa0 -> Node0xddc010;
	Node0xddc010 -> Node0xddc080;
	Node0xddc080 -> Node0xddc120;
	Node0xddc120 -> Node0xddc190;
	Node0xddc190 -> Node0xddc230;
	Node0xddc230 -> Node0xddc2d0;
	Node0xddc2d0 -> Node0xddc340;
	Node0xddc340 -> Node0xddc3e0;
	Node0xddc3e0 -> Node0xddc480;
	Node0xddc480 -> Node0xddc4f0;
	Node0xddc4f0 -> Node0xddc560;
	Node0xddc560 -> Node0xddc5d0;
	Node0xddc5d0 -> Node0xddc640;
	Node0xddc640 -> Node0xddc6b0;
	Node0xddc6b0 -> Node0xddc720;
	Node0xddc720 -> Node0xddc790;
	Node0xddc790 -> Node0xddc800;
	Node0xddc800 -> Node0xddc870;
	Node0xddc870 -> Node0xd7c268;
	Node0xd7c268 -> Node0xddcd10;
	Node0xddcd10 -> Node0xddcd60;
edge [color=red]
	Node0xddb5a0 -> Node0xddbc50;
	Node0xddbd10 -> Node0xddbd80;
	Node0xddbd10 -> Node0xddbf30;
	Node0xddbf30 -> Node0xddbfa0;
	Node0xddbd10 -> Node0xddc010;
	Node0xddb5a0 -> Node0xddc080;
	Node0xddc080 -> Node0xddc120;
	Node0xddbd80 -> Node0xddc190;
	Node0xddc190 -> Node0xddc230;
	Node0xddbf30 -> Node0xddc2d0;
	Node0xddc340 -> Node0xddc3e0;
	Node0xddbec0 -> Node0xddc480;
	Node0xddc480 -> Node0xddc4f0;
	Node0xddbe20 -> Node0xddc4f0;
	Node0xddc4f0 -> Node0xddc560;
	Node0xddbd80 -> Node0xddc560;
	Node0xddc560 -> Node0xddc5d0;
	Node0xddbfa0 -> Node0xddc5d0;
	Node0xddc5d0 -> Node0xddc640;
	Node0xddc010 -> Node0xddc640;
	Node0xddc640 -> Node0xddc6b0;
	Node0xddc120 -> Node0xddc6b0;
	Node0xddc6b0 -> Node0xddc720;
	Node0xddc230 -> Node0xddc720;
	Node0xddc720 -> Node0xddc790;
	Node0xddc2d0 -> Node0xddc790;
	Node0xddc790 -> Node0xddc800;
	Node0xddc3e0 -> Node0xddc800;
	Node0xddc800 -> Node0xddc870;
	Node0xddbc50 -> Node0xddc870;
	Node0xddc870 -> Node0xd7c268;
	Node0xd7c268 -> Node0xddcd10;
}
