; ModuleID = '../.././c_source_file/1559_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1559_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = xor i32 %1, -1
  %9 = or i32 %8, %0
  %10 = xor i32 %9, -1
  %11 = or i32 %7, %10
  %12 = xor i32 %4, %3
  %13 = xor i32 %5, %4
  %14 = or i32 %13, %12
  %15 = add i32 %14, %11
  %16 = or i32 %7, %8
  %17 = xor i32 %0, -1
  %18 = xor i32 %2, -1
  %19 = and i32 %18, %1
  %20 = or i32 %19, %17
  %21 = xor i32 %2, %1
  %22 = xor i32 %21, -1
  %23 = add i32 %21, 1
  %24 = or i32 %18, %0
  %25 = xor i32 %1, %0
  %26 = xor i32 %25, -1
  %27 = and i32 %24, %26
  %28 = xor i32 %2, %0
  %29 = and i32 %28, %25
  %30 = and i32 %2, %1
  %31 = xor i32 %30, -1
  %32 = xor i32 %31, %0
  %33 = shl i32 %32, 1
  %34 = add i32 %9, 1
  %35 = and i32 %28, %26
  %36 = or i32 %18, %26
  %37 = and i32 %18, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %38, %26
  %40 = shl i32 %39, 1
  %41 = and i32 %1, %0
  %42 = or i32 %41, %22
  %43 = and i32 %22, %0
  %44 = or i32 %18, %1
  %45 = xor i32 %44, %41
  %46 = xor i32 %41, -1
  %47 = and i32 %22, %46
  %48 = and i32 %8, %0
  %49 = xor i32 %48, -1
  %50 = and i32 %49, %2
  %51 = xor i32 %44, -1
  %52 = or i32 %51, %17
  %53 = and i32 %28, %46
  %54 = xor i32 %7, -1
  %55 = and i32 %54, %26
  %56 = or i32 %7, %26
  %57 = shl i32 %56, 1
  %58 = and i32 %28, %9
  %59 = or i32 %48, %22
  %60 = or i32 %1, %0
  %61 = xor i32 %60, -1
  %62 = shl i32 %61, 1
  %63 = xor i32 %24, -1
  %64 = xor i32 %63, %1
  %65 = or i32 %28, %41
  %66 = and i32 %30, %17
  %67 = and i32 %21, %0
  %68 = or i32 %66, %67
  %69 = and i32 %26, %2
  %70 = or i32 %37, %25
  %71 = xor i32 %28, -1
  %72 = or i32 %71, %26
  %73 = or i32 %2, %1
  %74 = xor i32 %73, %0
  %75 = or i32 %63, %26
  %76 = xor i32 %73, -1
  %77 = or i32 %76, %0
  %78 = and i32 %60, %22
  %79 = or i32 %22, %61
  %80 = or i32 %2, %0
  %81 = xor i32 %80, -1
  %82 = or i32 %25, %81
  %83 = shl i32 %24, 1
  %84 = xor i32 %76, %0
  %85 = shl i32 %84, 1
  %86 = xor i32 %19, %0
  %87 = shl i32 %86, 1
  %88 = xor i32 %37, %31
  %89 = or i32 %7, %1
  %90 = add i32 %25, 1
  %91 = xor i32 %19, -1
  %92 = xor i32 %91, %0
  %93 = or i32 %73, %17
  %94 = or i32 %41, %81
  %95 = or i32 %30, %0
  %96 = or i32 %81, %26
  %97 = xor i32 %30, %0
  %98 = xor i32 %7, %1
  %99 = and i32 %8, %2
  %100 = and i32 %99, %0
  %101 = or i32 %21, %0
  %102 = xor i32 %100, %101
  %103 = and i32 %71, %46
  %104 = or i32 %91, %0
  %105 = shl i32 %104, 1
  %106 = and i32 %31, %0
  %107 = shl i32 %106, 1
  %108 = add i32 %44, 1
  %109 = or i32 %81, %8
  %110 = or i32 %7, %76
  %111 = shl i32 %110, 1
  %112 = xor i32 %7, %60
  %113 = and i32 %25, %71
  %114 = shl i32 %113, 1
  %115 = or i32 %76, %17
  %116 = and i32 %91, %17
  %117 = or i32 %25, %63
  %118 = or i32 %31, %17
  %119 = and i32 %24, %25
  %120 = and i32 %28, %8
  %121 = or i32 %21, %61
  %122 = and i32 %71, %49
  %123 = and i32 %24, %1
  %124 = xor i32 %37, %1
  %125 = and i32 %30, %0
  %126 = and i32 %21, %17
  %127 = xor i32 %125, -1
  %128 = xor i32 %126, %127
  %129 = or i32 %30, %48
  %130 = xor i32 %7, %73
  %131 = or i32 %25, %18
  %132 = and i32 %9, %18
  %133 = xor i32 %80, %41
  %134 = and i32 %18, %26
  %135 = and i32 %21, %9
  %136 = shl i32 %135, 1
  %137 = xor i32 %21, %0
  %138 = and i32 %9, %22
  %139 = add i32 %41, 1
  %140 = and i32 %71, %8
  %141 = and i32 %44, %17
  %142 = shl i32 %141, 1
  %143 = and i32 %99, %17
  %144 = or i32 %8, %2
  %145 = and i32 %144, %0
  %146 = or i32 %143, %145
  %147 = shl i32 %91, 1
  %148 = shl i32 %60, 1
  %149 = and i32 %28, %60
  %150 = xor i32 %74, %127
  %151 = xor i32 %73, %41
  %152 = and i32 %25, %54
  %153 = xor i32 %80, %1
  %154 = or i32 %18, %61
  %155 = xor i32 %101, -1
  %156 = or i32 %100, %155
  %157 = and i32 %73, %0
  %158 = or i32 %66, %157
  %159 = and i32 %21, %49
  %160 = or i32 %41, %63
  %161 = or i32 %7, %25
  %162 = xor i32 %24, %1
  %163 = shl i32 %49, 1
  %164 = and i32 %28, %49
  %165 = and i32 %144, %17
  %166 = xor i32 %165, 2147483647
  %167 = xor i32 %166, %100
  %168 = or i32 %10, %2
  %169 = or i32 %22, %10
  %170 = or i32 %48, %71
  %171 = or i32 %21, %17
  %172 = xor i32 %143, %171
  %173 = or i32 %28, %26
  %174 = or i32 %28, %8
  %175 = or i32 %71, %1
  %176 = shl i32 %175, 1
  %177 = and i32 %21, %46
  %178 = and i32 %60, %18
  %179 = xor i32 %44, %0
  %180 = xor i32 %37, %44
  %181 = and i32 %71, %26
  %182 = or i32 %7, %19
  %183 = or i32 %19, %48
  %184 = and i32 %38, %1
  %185 = xor i32 %144, %0
  %186 = or i32 %100, %185
  %187 = xor i32 %125, %137
  %188 = or i32 %125, %74
  %189 = and i32 %21, %60
  %190 = or i32 %71, %61
  %191 = xor i32 %137, -1
  %192 = or i32 %125, %191
  %193 = and i32 %25, %18
  %194 = and i32 %91, %0
  %195 = or i32 %28, %25
  %196 = or i32 %30, %17
  %197 = or i32 %21, %10
  %198 = or i32 %37, %8
  %199 = add i32 %37, 1
  %200 = or i32 %28, %1
  %201 = xor i32 %41, %2
  %202 = or i32 %41, %18
  %203 = or i32 %37, %26
  %204 = and i32 %25, %2
  %205 = xor i32 %7, %91
  %206 = or i32 %7, %61
  %207 = xor i32 %145, -1
  %208 = xor i32 %143, %207
  %209 = and i32 %38, %8
  %210 = xor i32 %38, %1
  %211 = and i32 %60, %2
  %212 = xor i32 %46, %2
  %213 = or i32 %71, %10
  %214 = or i32 %51, %0
  %215 = and i32 %54, %8
  %216 = xor i32 %60, %2
  %217 = and i32 %80, %26
  %218 = and i32 %73, %17
  %219 = or i32 %125, %218
  %220 = shl i32 %219, 1
  %221 = or i32 %28, %10
  %222 = and i32 %25, %38
  %223 = or i32 %63, %1
  %224 = xor i32 %48, %31
  %225 = xor i32 %67, -1
  %226 = xor i32 %66, %225
  %227 = and i32 %18, %49
  %228 = and i32 %24, %8
  %229 = or i32 %61, %2
  %230 = xor i32 %9, %2
  %231 = xor i32 %48, %2
  %232 = or i32 %100, %165
  %233 = and i32 %22, %49
  %234 = or i32 %44, %17
  %235 = or i32 %26, %2
  %236 = or i32 %41, %51
  %237 = or i32 %63, %8
  %238 = xor i32 %10, %2
  %239 = or i32 %48, %2
  %240 = xor i32 %185, -1
  %241 = xor i32 %100, %240
  %242 = or i32 %25, %2
  %243 = shl i32 %242, 1
  %244 = or i32 %31, %0
  %245 = and i32 %80, %1
  %246 = or i32 %28, %61
  %247 = or i32 %37, %30
  %248 = or i32 %37, %51
  %249 = and i32 %44, %0
  %250 = or i32 %41, %76
  %251 = shl i32 %250, 1
  %252 = and i32 %71, %1
  %253 = xor i32 %54, %1
  %254 = xor i32 %48, %91
  %255 = and i32 %54, %1
  %256 = and i32 %31, %17
  %257 = or i32 %44, %0
  %258 = add i32 %73, 1
  %259 = xor i32 %171, -1
  %260 = or i32 %143, %259
  %261 = xor i32 %218, %127
  %262 = xor i32 %24, %41
  %263 = add i32 %7, 1
  %264 = or i32 %91, %17
  %265 = or i32 %28, %48
  %266 = xor i32 %51, %0
  %267 = or i32 %37, %1
  %268 = or i32 %100, %137
  %269 = shl i32 %268, 1
  %270 = and i32 %76, %17
  %271 = mul i32 %270, 6
  %272 = and i32 %19, %17
  %273 = and i32 %76, %0
  %274 = and i32 %19, %0
  %275 = shl i32 %274, 2
  %276 = and i32 %51, %17
  %277 = mul i32 %276, -19
  %278 = and i32 %51, %0
  %279 = mul i32 %278, 14
  %280 = xor i32 %4, -1
  %281 = and i32 %5, %3
  %282 = and i32 %281, %280
  %283 = or i32 %5, %3
  %284 = and i32 %283, %4
  %285 = or i32 %282, %284
  %286 = xor i32 %3, -1
  %287 = and i32 %280, %3
  %288 = xor i32 %5, %3
  %289 = or i32 %288, %287
  %290 = shl i32 %289, 1
  %291 = and i32 %286, %5
  %292 = and i32 %291, %4
  %293 = or i32 %286, %5
  %294 = xor i32 %293, %4
  %295 = or i32 %292, %294
  %296 = and i32 %288, %4
  %297 = xor i32 %296, -1
  %298 = xor i32 %282, %297
  %299 = or i32 %5, %4
  %300 = and i32 %299, %286
  %301 = and i32 %286, %4
  %302 = xor i32 %5, -1
  %303 = and i32 %302, %3
  %304 = xor i32 %303, -1
  %305 = xor i32 %301, %304
  %306 = and i32 %5, %4
  %307 = xor i32 %306, -1
  %308 = and i32 %307, %3
  %309 = and i32 %4, %3
  %310 = xor i32 %299, -1
  %311 = or i32 %309, %310
  %312 = and i32 %280, %5
  %313 = or i32 %291, %309
  %314 = xor i32 %288, %4
  %315 = or i32 %292, %314
  %316 = xor i32 %301, -1
  %317 = xor i32 %281, %316
  %318 = and i32 %304, %4
  %319 = or i32 %4, %3
  %320 = xor i32 %13, -1
  %321 = and i32 %319, %320
  %322 = and i32 %319, %302
  %323 = xor i32 %12, 2147483647
  %324 = or i32 %13, %323
  %325 = shl i32 %324, 1
  %326 = and i32 %281, %4
  %327 = and i32 %288, %280
  %328 = or i32 %326, %327
  %329 = or i32 %13, %287
  %330 = xor i32 %283, -1
  %331 = and i32 %330, %280
  %332 = and i32 %303, %280
  %333 = and i32 %330, %4
  %334 = and i32 %303, %4
  %335 = and i32 %291, %280
  %336 = add i32 %41, %18
  %337 = add i32 %336, %71
  %338 = add i32 %337, %231
  %339 = add i32 %338, %229
  %340 = add i32 %339, %21
  %341 = add i32 %340, %193
  %342 = add i32 %341, %134
  %343 = add i32 %342, %236
  %344 = add i32 %343, %221
  %345 = add i32 %344, %213
  %346 = add i32 %345, %197
  %347 = add i32 %346, %164
  %348 = add i32 %347, %140
  %349 = add i32 %348, %124
  %350 = add i32 %349, %120
  %351 = add i32 %350, %119
  %352 = add i32 %351, %115
  %353 = add i32 %352, %101
  %354 = add i32 %353, %42
  %355 = add i32 %354, %301
  %356 = add i32 %355, %188
  %357 = add i32 %356, %146
  %358 = add i32 %357, %167
  %359 = shl i32 %358, 1
  %360 = sub i32 %50, %125
  %361 = sub i32 %360, %267
  %362 = add i32 %361, %217
  %363 = sub i32 %362, %209
  %364 = add i32 %363, %205
  %365 = sub i32 %364, %192
  %366 = sub i32 %365, %317
  %367 = sub i32 %366, %298
  %368 = mul i32 %367, 3
  %369 = add i32 %248, %66
  %370 = sub i32 %126, %369
  %371 = sub i32 %370, %152
  %372 = add i32 %371, %151
  %373 = add i32 %372, %282
  %374 = mul i32 %373, 5
  %375 = sub i32 %334, %272
  %376 = add i32 %375, %335
  %377 = add i32 %376, %331
  %378 = mul i32 %377, 9
  %379 = add i32 %326, %333
  %380 = mul i32 %379, 7
  %381 = sub i32 %332, %273
  %382 = mul i32 %381, 10
  %383 = add i32 %121, %132
  %384 = shl i32 %383, 2
  %385 = shl i32 %1, 1
  %386 = sub i32 %34, %385
  %387 = add i32 %386, %90
  %388 = sub i32 %387, %9
  %389 = add i32 %388, %139
  %390 = sub i32 %389, %48
  %391 = add i32 %390, %25
  %392 = add i32 %391, %23
  %393 = add i32 %392, %36
  %394 = sub i32 %393, %62
  %395 = sub i32 %394, %69
  %396 = add i32 %395, %108
  %397 = sub i32 %396, %131
  %398 = add i32 %397, %37
  %399 = sub i32 %398, %148
  %400 = add i32 %399, %154
  %401 = sub i32 %400, %163
  %402 = add i32 %401, %168
  %403 = sub i32 %402, %178
  %404 = add i32 %403, %73
  %405 = add i32 %404, %80
  %406 = add i32 %405, %199
  %407 = sub i32 %406, %201
  %408 = add i32 %407, %202
  %409 = sub i32 %408, %204
  %410 = add i32 %409, %211
  %411 = sub i32 %410, %7
  %412 = add i32 %411, %212
  %413 = sub i32 %412, %216
  %414 = sub i32 %413, %227
  %415 = add i32 %414, %230
  %416 = sub i32 %415, %235
  %417 = sub i32 %416, %238
  %418 = add i32 %417, %239
  %419 = add i32 %418, %63
  %420 = add i32 %419, %258
  %421 = add i32 %420, %263
  %422 = add i32 %421, %20
  %423 = add i32 %422, %16
  %424 = add i32 %423, %27
  %425 = add i32 %424, %29
  %426 = add i32 %425, %35
  %427 = add i32 %426, %43
  %428 = sub i32 %427, %45
  %429 = add i32 %428, %47
  %430 = add i32 %429, %52
  %431 = add i32 %430, %53
  %432 = add i32 %431, %55
  %433 = sub i32 %432, %58
  %434 = add i32 %433, %59
  %435 = sub i32 %434, %64
  %436 = sub i32 %435, %65
  %437 = add i32 %436, %70
  %438 = sub i32 %437, %72
  %439 = add i32 %438, %74
  %440 = sub i32 %439, %75
  %441 = add i32 %440, %77
  %442 = add i32 %441, %78
  %443 = add i32 %442, %79
  %444 = sub i32 %443, %82
  %445 = sub i32 %444, %83
  %446 = sub i32 %445, %88
  %447 = add i32 %446, %89
  %448 = sub i32 %447, %92
  %449 = add i32 %448, %93
  %450 = add i32 %449, %94
  %451 = add i32 %450, %95
  %452 = add i32 %451, %96
  %453 = add i32 %452, %97
  %454 = sub i32 %453, %98
  %455 = add i32 %454, %103
  %456 = sub i32 %455, %109
  %457 = sub i32 %456, %112
  %458 = sub i32 %457, %116
  %459 = sub i32 %458, %117
  %460 = sub i32 %459, %118
  %461 = sub i32 %460, %122
  %462 = add i32 %461, %123
  %463 = sub i32 %462, %67
  %464 = sub i32 %463, %129
  %465 = add i32 %464, %130
  %466 = sub i32 %465, %133
  %467 = sub i32 %466, %137
  %468 = sub i32 %467, %138
  %469 = sub i32 %468, %147
  %470 = sub i32 %469, %149
  %471 = add i32 %470, %153
  %472 = add i32 %471, %159
  %473 = sub i32 %472, %160
  %474 = add i32 %473, %161
  %475 = add i32 %474, %162
  %476 = add i32 %475, %169
  %477 = sub i32 %476, %170
  %478 = add i32 %477, %173
  %479 = add i32 %478, %174
  %480 = add i32 %479, %177
  %481 = sub i32 %480, %179
  %482 = add i32 %481, %180
  %483 = add i32 %482, %181
  %484 = add i32 %483, %182
  %485 = add i32 %484, %183
  %486 = sub i32 %485, %184
  %487 = add i32 %486, %189
  %488 = sub i32 %487, %190
  %489 = add i32 %488, %194
  %490 = sub i32 %489, %195
  %491 = sub i32 %490, %196
  %492 = sub i32 %491, %198
  %493 = sub i32 %492, %200
  %494 = sub i32 %493, %203
  %495 = sub i32 %494, %206
  %496 = add i32 %495, %157
  %497 = add i32 %496, %210
  %498 = sub i32 %497, %214
  %499 = add i32 %498, %215
  %500 = add i32 %499, %222
  %501 = add i32 %500, %223
  %502 = add i32 %501, %224
  %503 = sub i32 %502, %228
  %504 = add i32 %503, %233
  %505 = add i32 %504, %234
  %506 = sub i32 %505, %237
  %507 = sub i32 %506, %171
  %508 = add i32 %507, %221
  %509 = sub i32 %508, %243
  %510 = add i32 %509, %244
  %511 = add i32 %510, %245
  %512 = sub i32 %511, %246
  %513 = sub i32 %512, %247
  %514 = add i32 %513, %249
  %515 = sub i32 %514, %252
  %516 = add i32 %515, %253
  %517 = add i32 %516, %254
  %518 = sub i32 %517, %255
  %519 = sub i32 %518, %256
  %520 = add i32 %519, %257
  %521 = sub i32 %520, %262
  %522 = add i32 %521, %264
  %523 = add i32 %522, %265
  %524 = add i32 %523, %266
  %525 = sub i32 %524, %33
  %526 = sub i32 %525, %40
  %527 = sub i32 %526, %57
  %528 = sub i32 %527, %68
  %529 = sub i32 %528, %85
  %530 = sub i32 %529, %87
  %531 = sub i32 %530, %102
  %532 = sub i32 %531, %105
  %533 = sub i32 %532, %107
  %534 = sub i32 %533, %111
  %535 = sub i32 %534, %114
  %536 = add i32 %535, %128
  %537 = sub i32 %536, %136
  %538 = sub i32 %537, %142
  %539 = sub i32 %538, %150
  %540 = sub i32 %539, %156
  %541 = sub i32 %540, %158
  %542 = sub i32 %541, %172
  %543 = sub i32 %542, %176
  %544 = add i32 %543, %186
  %545 = add i32 %544, %187
  %546 = sub i32 %545, %208
  %547 = add i32 %546, %226
  %548 = add i32 %547, %232
  %549 = add i32 %548, %241
  %550 = sub i32 %549, %251
  %551 = add i32 %550, %260
  %552 = sub i32 %551, %261
  %553 = add i32 %552, %271
  %554 = sub i32 %553, %275
  %555 = add i32 %554, %277
  %556 = add i32 %555, %279
  %557 = sub i32 %556, %220
  %558 = sub i32 %557, %269
  %559 = add i32 %558, %312
  %560 = sub i32 %559, %322
  %561 = add i32 %560, %384
  %562 = add i32 %561, %300
  %563 = sub i32 %562, %305
  %564 = add i32 %563, %308
  %565 = sub i32 %564, %311
  %566 = add i32 %565, %313
  %567 = sub i32 %566, %318
  %568 = add i32 %567, %321
  %569 = sub i32 %568, %329
  %570 = sub i32 %569, %285
  %571 = sub i32 %570, %290
  %572 = add i32 %571, %295
  %573 = sub i32 %572, %315
  %574 = sub i32 %573, %325
  %575 = add i32 %574, %328
  %576 = add i32 %575, %380
  %577 = add i32 %576, %382
  %578 = add i32 %577, %378
  %579 = add i32 %578, %374
  %580 = add i32 %579, %368
  %581 = add i32 %580, %359
  %582 = icmp eq i32 %15, %581
  %583 = select i1 %582, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %584 = tail call i32 @puts(i8* nonnull dereferenceable(1) %583)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
