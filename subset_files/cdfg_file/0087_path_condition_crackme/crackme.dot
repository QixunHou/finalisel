digraph "DFG for'crackme' function" {
	Node0x59c5d0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x59cc80[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x59cd40[shape=record, label="  %5 = shl i32 %1, 1"];
	Node0x59cdb0[shape=record, label="  %6 = xor i32 %1, -1"];
	Node0x59ce20[shape=record, label="  %7 = or i32 %6, %0"];
	Node0x59ce90[shape=record, label="  %8 = and i32 %1, %0"];
	Node0x59cf00[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x59cf70[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x59cfe0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x59d080[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x59d0f0[shape=record, label="  %13 = xor i32 %7, -1"];
	Node0x59d190[shape=record, label="  %14 = mul i32 %13, -3"];
	Node0x59d200[shape=record, label="  %15 = and i32 %6, %0"];
	Node0x59d2a0[shape=record, label="  %16 = shl i32 %15, 2"];
	Node0x59d310[shape=record, label="  %17 = shl i32 %8, 2"];
	Node0x59d380[shape=record, label="  %18 = add i32 %0, 2"];
	Node0x59d3f0[shape=record, label="  %19 = add i32 %18, %6"];
	Node0x59d460[shape=record, label="  %20 = add i32 %19, %5"];
	Node0x59d4d0[shape=record, label="  %21 = add i32 %20, %3"];
	Node0x59d540[shape=record, label="  %22 = add i32 %21, %7"];
	Node0x59d5b0[shape=record, label="  %23 = add i32 %22, %9"];
	Node0x59d620[shape=record, label="  %24 = add i32 %23, %10"];
	Node0x59d690[shape=record, label="  %25 = add i32 %24, %14"];
	Node0x59d700[shape=record, label="  %26 = sub i32 %25, %16"];
	Node0x59d770[shape=record, label="  %27 = sub i32 %26, %17"];
	Node0x59d7e0[shape=record, label="  %28 = sub i32 %27, %12"];
	Node0x59d850[shape=record, label="  %29 = icmp eq i32 %4, %28"];
	Node0x53d268[shape=record, label="  %30 = select i1 %29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x59dcf0[shape=record, label="  %31 = tail call i32 @puts(i8* nonnull dereferenceable(1) %30)"];
	Node0x59dd40[shape=record, label="  ret void"];
	Node0x59c5d0 -> Node0x59cc80;
	Node0x59cc80 -> Node0x59cd40;
	Node0x59cd40 -> Node0x59cdb0;
	Node0x59cdb0 -> Node0x59ce20;
	Node0x59ce20 -> Node0x59ce90;
	Node0x59ce90 -> Node0x59cf00;
	Node0x59cf00 -> Node0x59cf70;
	Node0x59cf70 -> Node0x59cfe0;
	Node0x59cfe0 -> Node0x59d080;
	Node0x59d080 -> Node0x59d0f0;
	Node0x59d0f0 -> Node0x59d190;
	Node0x59d190 -> Node0x59d200;
	Node0x59d200 -> Node0x59d2a0;
	Node0x59d2a0 -> Node0x59d310;
	Node0x59d310 -> Node0x59d380;
	Node0x59d380 -> Node0x59d3f0;
	Node0x59d3f0 -> Node0x59d460;
	Node0x59d460 -> Node0x59d4d0;
	Node0x59d4d0 -> Node0x59d540;
	Node0x59d540 -> Node0x59d5b0;
	Node0x59d5b0 -> Node0x59d620;
	Node0x59d620 -> Node0x59d690;
	Node0x59d690 -> Node0x59d700;
	Node0x59d700 -> Node0x59d770;
	Node0x59d770 -> Node0x59d7e0;
	Node0x59d7e0 -> Node0x59d850;
	Node0x59d850 -> Node0x53d268;
	Node0x53d268 -> Node0x59dcf0;
	Node0x59dcf0 -> Node0x59dd40;
edge [color=red]
	Node0x59c5d0 -> Node0x59cc80;
	Node0x59cdb0 -> Node0x59ce20;
	Node0x59ce90 -> Node0x59cf00;
	Node0x59cf70 -> Node0x59cfe0;
	Node0x59cfe0 -> Node0x59d080;
	Node0x59ce20 -> Node0x59d0f0;
	Node0x59d0f0 -> Node0x59d190;
	Node0x59cdb0 -> Node0x59d200;
	Node0x59d200 -> Node0x59d2a0;
	Node0x59ce90 -> Node0x59d310;
	Node0x59d380 -> Node0x59d3f0;
	Node0x59cdb0 -> Node0x59d3f0;
	Node0x59d3f0 -> Node0x59d460;
	Node0x59cd40 -> Node0x59d460;
	Node0x59d460 -> Node0x59d4d0;
	Node0x59c5d0 -> Node0x59d4d0;
	Node0x59d4d0 -> Node0x59d540;
	Node0x59ce20 -> Node0x59d540;
	Node0x59d540 -> Node0x59d5b0;
	Node0x59cf00 -> Node0x59d5b0;
	Node0x59d5b0 -> Node0x59d620;
	Node0x59cf70 -> Node0x59d620;
	Node0x59d620 -> Node0x59d690;
	Node0x59d190 -> Node0x59d690;
	Node0x59d690 -> Node0x59d700;
	Node0x59d2a0 -> Node0x59d700;
	Node0x59d700 -> Node0x59d770;
	Node0x59d310 -> Node0x59d770;
	Node0x59d770 -> Node0x59d7e0;
	Node0x59d080 -> Node0x59d7e0;
	Node0x59cc80 -> Node0x59d850;
	Node0x59d7e0 -> Node0x59d850;
	Node0x59d850 -> Node0x53d268;
	Node0x53d268 -> Node0x59dcf0;
}
