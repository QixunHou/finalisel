digraph "DFG for'crackme' function" {
	Node0x10f4870[shape=record, label="  %5 = xor i32 %2, %1"];
	Node0x10f48e0[shape=record, label="  %6 = and i32 %2, %1"];
	Node0x10f4f60[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x10f4fd0[shape=record, label="  %8 = or i32 %7, %3"];
	Node0x10f5040[shape=record, label="  %9 = add i32 %8, %6"];
	Node0x10f50e0[shape=record, label="  %10 = sub i32 0, %9"];
	Node0x10f5150[shape=record, label="  %11 = xor i32 %2, -1"];
	Node0x10f51c0[shape=record, label="  %12 = or i32 %11, %1"];
	Node0x10f5230[shape=record, label="  %13 = and i32 %11, %1"];
	Node0x10f52d0[shape=record, label="  %14 = shl i32 %13, 1"];
	Node0x10f5340[shape=record, label="  %15 = xor i32 %3, %0"];
	Node0x10f53b0[shape=record, label="  %16 = and i32 %7, %3"];
	Node0x10f5450[shape=record, label="  %17 = mul i32 %16, -3"];
	Node0x10f54c0[shape=record, label="  %18 = add i32 %15, %1"];
	Node0x10f5530[shape=record, label="  %19 = shl i32 %18, 1"];
	Node0x10f55d0[shape=record, label="  %20 = sub i32 2, %1"];
	Node0x10f5640[shape=record, label="  %21 = sub i32 %20, %2"];
	Node0x10f56b0[shape=record, label="  %22 = add i32 %21, %11"];
	Node0x10f5720[shape=record, label="  %23 = sub i32 %22, %12"];
	Node0x10f5790[shape=record, label="  %24 = add i32 %23, %5"];
	Node0x10f5800[shape=record, label="  %25 = sub i32 %24, %14"];
	Node0x10f5870[shape=record, label="  %26 = add i32 %25, %16"];
	Node0x10f58e0[shape=record, label="  %27 = add i32 %26, %8"];
	Node0x10f5950[shape=record, label="  %28 = add i32 %27, %17"];
	Node0x10f59c0[shape=record, label="  %29 = add i32 %28, %19"];
	Node0x10f5a30[shape=record, label="  %30 = icmp eq i32 %29, %10"];
	Node0x1095268[shape=record, label="  %31 = select i1 %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x10f5ed0[shape=record, label="  %32 = tail call i32 @puts(i8* nonnull dereferenceable(1) %31)"];
	Node0x10f6130[shape=record, label="  ret void"];
	Node0x10f4870 -> Node0x10f48e0;
	Node0x10f48e0 -> Node0x10f4f60;
	Node0x10f4f60 -> Node0x10f4fd0;
	Node0x10f4fd0 -> Node0x10f5040;
	Node0x10f5040 -> Node0x10f50e0;
	Node0x10f50e0 -> Node0x10f5150;
	Node0x10f5150 -> Node0x10f51c0;
	Node0x10f51c0 -> Node0x10f5230;
	Node0x10f5230 -> Node0x10f52d0;
	Node0x10f52d0 -> Node0x10f5340;
	Node0x10f5340 -> Node0x10f53b0;
	Node0x10f53b0 -> Node0x10f5450;
	Node0x10f5450 -> Node0x10f54c0;
	Node0x10f54c0 -> Node0x10f5530;
	Node0x10f5530 -> Node0x10f55d0;
	Node0x10f55d0 -> Node0x10f5640;
	Node0x10f5640 -> Node0x10f56b0;
	Node0x10f56b0 -> Node0x10f5720;
	Node0x10f5720 -> Node0x10f5790;
	Node0x10f5790 -> Node0x10f5800;
	Node0x10f5800 -> Node0x10f5870;
	Node0x10f5870 -> Node0x10f58e0;
	Node0x10f58e0 -> Node0x10f5950;
	Node0x10f5950 -> Node0x10f59c0;
	Node0x10f59c0 -> Node0x10f5a30;
	Node0x10f5a30 -> Node0x1095268;
	Node0x1095268 -> Node0x10f5ed0;
	Node0x10f5ed0 -> Node0x10f6130;
edge [color=red]
	Node0x10f4f60 -> Node0x10f4fd0;
	Node0x10f4fd0 -> Node0x10f5040;
	Node0x10f48e0 -> Node0x10f5040;
	Node0x10f5040 -> Node0x10f50e0;
	Node0x10f5150 -> Node0x10f51c0;
	Node0x10f5150 -> Node0x10f5230;
	Node0x10f5230 -> Node0x10f52d0;
	Node0x10f4f60 -> Node0x10f53b0;
	Node0x10f53b0 -> Node0x10f5450;
	Node0x10f5340 -> Node0x10f54c0;
	Node0x10f54c0 -> Node0x10f5530;
	Node0x10f55d0 -> Node0x10f5640;
	Node0x10f5640 -> Node0x10f56b0;
	Node0x10f5150 -> Node0x10f56b0;
	Node0x10f56b0 -> Node0x10f5720;
	Node0x10f51c0 -> Node0x10f5720;
	Node0x10f5720 -> Node0x10f5790;
	Node0x10f4870 -> Node0x10f5790;
	Node0x10f5790 -> Node0x10f5800;
	Node0x10f52d0 -> Node0x10f5800;
	Node0x10f5800 -> Node0x10f5870;
	Node0x10f53b0 -> Node0x10f5870;
	Node0x10f5870 -> Node0x10f58e0;
	Node0x10f4fd0 -> Node0x10f58e0;
	Node0x10f58e0 -> Node0x10f5950;
	Node0x10f5450 -> Node0x10f5950;
	Node0x10f5950 -> Node0x10f59c0;
	Node0x10f5530 -> Node0x10f59c0;
	Node0x10f59c0 -> Node0x10f5a30;
	Node0x10f50e0 -> Node0x10f5a30;
	Node0x10f5a30 -> Node0x1095268;
	Node0x1095268 -> Node0x10f5ed0;
}
