; ModuleID = '../.././c_source_file/0043_path_condition_crackme.c'
source_filename = "../.././c_source_file/0043_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = and i32 %7, %0
  %9 = xor i32 %0, -1
  %10 = xor i32 %2, %1
  %11 = and i32 %10, %9
  %12 = or i32 %8, %11
  %13 = or i32 %2, %1
  %14 = and i32 %13, %9
  %15 = sub i32 %12, %14
  %16 = xor i32 %3, -1
  %17 = and i32 %16, %5
  %18 = and i32 %17, %4
  %19 = xor i32 %4, -1
  %20 = or i32 %16, %5
  %21 = xor i32 %20, -1
  %22 = or i32 %21, %4
  %23 = xor i32 %18, %22
  %24 = add i32 %15, %23
  %25 = and i32 %5, %3
  %26 = and i32 %25, %4
  %27 = or i32 %5, %3
  %28 = and i32 %27, %19
  %29 = xor i32 %28, 2147483647
  %30 = xor i32 %29, %26
  %31 = shl i32 %30, 1
  %32 = sub i32 %24, %31
  %33 = xor i32 %1, -1
  %34 = xor i32 %2, -1
  %35 = and i32 %34, %0
  %36 = xor i32 %35, -1
  %37 = and i32 %36, %33
  %38 = or i32 %33, %0
  %39 = xor i32 %38, %2
  %40 = or i32 %2, %0
  %41 = and i32 %40, %1
  %42 = xor i32 %36, %1
  %43 = shl i32 %42, 1
  %44 = and i32 %33, %2
  %45 = and i32 %44, %9
  %46 = or i32 %10, %9
  %47 = xor i32 %46, -1
  %48 = or i32 %45, %47
  %49 = and i32 %36, %1
  %50 = and i32 %1, %0
  %51 = xor i32 %40, -1
  %52 = or i32 %50, %51
  %53 = or i32 %13, %0
  %54 = add i32 %40, 1
  %55 = xor i32 %1, %0
  %56 = xor i32 %55, -1
  %57 = xor i32 %2, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %58, %56
  %60 = and i32 %33, %0
  %61 = xor i32 %7, -1
  %62 = xor i32 %60, %61
  %63 = and i32 %13, %0
  %64 = shl i32 %63, 1
  %65 = and i32 %2, %0
  %66 = and i32 %34, %1
  %67 = xor i32 %66, -1
  %68 = xor i32 %65, %67
  %69 = or i32 %65, %55
  %70 = shl i32 %69, 1
  %71 = or i32 %35, %56
  %72 = and i32 %40, %55
  %73 = and i32 %61, %0
  %74 = or i32 %7, %60
  %75 = xor i32 %13, -1
  %76 = or i32 %50, %75
  %77 = and i32 %57, %1
  %78 = and i32 %38, %58
  %79 = and i32 %44, %0
  %80 = xor i32 %10, %0
  %81 = or i32 %79, %80
  %82 = and i32 %56, %2
  %83 = xor i32 %50, -1
  %84 = and i32 %58, %83
  %85 = and i32 %58, %33
  %86 = xor i32 %38, -1
  %87 = or i32 %34, %86
  %88 = or i32 %1, %0
  %89 = xor i32 %10, -1
  %90 = and i32 %88, %89
  %91 = or i32 %35, %55
  %92 = shl i32 %91, 2
  %93 = or i32 %34, %0
  %94 = and i32 %93, %33
  %95 = or i32 %65, %56
  %96 = xor i32 %65, -1
  %97 = and i32 %55, %96
  %98 = or i32 %61, %9
  %99 = and i32 %57, %33
  %100 = and i32 %38, %89
  %101 = or i32 %50, %34
  %102 = xor i32 %51, %1
  %103 = and i32 %7, %9
  %104 = and i32 %10, %0
  %105 = or i32 %103, %104
  %106 = or i32 %57, %55
  %107 = or i32 %57, %56
  %108 = or i32 %66, %60
  %109 = shl i32 %2, 1
  %110 = add i32 %57, 1
  %111 = add i32 %10, 1
  %112 = xor i32 %80, -1
  %113 = or i32 %8, %112
  %114 = xor i32 %60, -1
  %115 = and i32 %114, %2
  %116 = or i32 %66, %0
  %117 = xor i32 %83, %2
  %118 = xor i32 %67, %0
  %119 = and i32 %93, %55
  %120 = or i32 %67, %9
  %121 = xor i32 %7, %0
  %122 = xor i32 %13, %50
  %123 = add i32 %38, 1
  %124 = xor i32 %14, 2147483647
  %125 = xor i32 %124, %8
  %126 = shl i32 %125, 1
  %127 = xor i32 %93, -1
  %128 = or i32 %127, %1
  %129 = xor i32 %65, %88
  %130 = or i32 %57, %33
  %131 = xor i32 %88, -1
  %132 = or i32 %131, %2
  %133 = xor i32 %93, %50
  %134 = and i32 %36, %56
  %135 = or i32 %58, %33
  %136 = and i32 %88, %34
  %137 = or i32 %33, %2
  %138 = xor i32 %137, %0
  %139 = xor i32 %79, -1
  %140 = xor i32 %138, %139
  %141 = and i32 %38, %2
  %142 = or i32 %34, %1
  %143 = xor i32 %142, %0
  %144 = shl i32 %114, 1
  %145 = and i32 %137, %9
  %146 = or i32 %79, %145
  %147 = xor i32 %127, %1
  %148 = xor i32 %65, %1
  %149 = xor i32 %142, -1
  %150 = or i32 %149, %9
  %151 = shl i32 %150, 1
  %152 = and i32 %34, %56
  %153 = or i32 %51, %1
  %154 = and i32 %34, %114
  %155 = or i32 %8, %14
  %156 = xor i32 %45, %46
  %157 = or i32 %35, %149
  %158 = or i32 %89, %131
  %159 = and i32 %89, %114
  %160 = shl i32 %159, 1
  %161 = or i32 %58, %1
  %162 = or i32 %10, %131
  %163 = or i32 %7, %0
  %164 = or i32 %10, %0
  %165 = xor i32 %79, %164
  %166 = xor i32 %114, %2
  %167 = or i32 %149, %0
  %168 = and i32 %57, %38
  %169 = shl i32 %36, 1
  %170 = and i32 %58, %114
  %171 = xor i32 %60, %67
  %172 = or i32 %56, %2
  %173 = or i32 %75, %9
  %174 = and i32 %10, %114
  %175 = shl i32 %174, 1
  %176 = add i32 %0, 1
  %177 = or i32 %51, %33
  %178 = or i32 %89, %9
  %179 = xor i32 %142, %50
  %180 = and i32 %40, %33
  %181 = or i32 %89, %86
  %182 = and i32 %55, %58
  %183 = and i32 %58, %56
  %184 = or i32 %13, %9
  %185 = and i32 %34, %83
  %186 = or i32 %35, %1
  %187 = and i32 %57, %88
  %188 = or i32 %50, %58
  %189 = shl i32 %188, 1
  %190 = or i32 %60, %58
  %191 = shl i32 %190, 1
  %192 = add i32 %66, 1
  %193 = or i32 %57, %86
  %194 = and i32 %40, %56
  %195 = shl i32 %194, 1
  %196 = or i32 %58, %86
  %197 = shl i32 %196, 1
  %198 = or i32 %51, %56
  %199 = or i32 %57, %60
  %200 = and i32 %67, %0
  %201 = and i32 %142, %9
  %202 = xor i32 %96, %1
  %203 = xor i32 %35, %61
  %204 = or i32 %35, %33
  %205 = xor i32 %145, %139
  %206 = and i32 %89, %83
  %207 = or i32 %58, %131
  %208 = and i32 %88, %2
  %209 = or i32 %65, %131
  %210 = or i32 %67, %0
  %211 = and i32 %67, %9
  %212 = and i32 %10, %83
  %213 = or i32 %55, %2
  %214 = or i32 %142, %9
  %215 = add i32 %93, 1
  %216 = or i32 %10, %50
  %217 = or i32 %65, %86
  %218 = xor i32 %13, %0
  %219 = or i32 %8, %218
  %220 = add i32 %65, 1
  %221 = shl i32 %66, 1
  %222 = and i32 %38, %34
  %223 = or i32 %142, %0
  %224 = or i32 %10, %60
  %225 = shl i32 %224, 1
  %226 = or i32 %55, %34
  %227 = and i32 %57, %114
  %228 = and i32 %10, %38
  %229 = shl i32 %228, 1
  %230 = and i32 %61, %9
  %231 = and i32 %57, %83
  %232 = and i32 %142, %0
  %233 = shl i32 %232, 1
  %234 = xor i32 %8, -1
  %235 = xor i32 %218, %234
  %236 = and i32 %96, %33
  %237 = shl i32 %131, 1
  %238 = and i32 %96, %56
  %239 = xor i32 %88, %2
  %240 = or i32 %60, %89
  %241 = or i32 %7, %9
  %242 = and i32 %55, %2
  %243 = or i32 %66, %9
  %244 = or i32 %55, %51
  %245 = and i32 %58, %1
  %246 = add i32 %13, 1
  %247 = xor i32 %11, %234
  %248 = xor i32 %65, %38
  %249 = xor i32 %61, %0
  %250 = or i32 %57, %131
  %251 = xor i32 %131, %2
  %252 = xor i32 %8, %80
  %253 = or i32 %61, %0
  %254 = and i32 %57, %56
  %255 = or i32 %50, %127
  %256 = or i32 %89, %0
  %257 = shl i32 %256, 1
  %258 = or i32 %79, %138
  %259 = xor i32 %35, %1
  %260 = and i32 %83, %2
  %261 = xor i32 %89, %0
  %262 = or i32 %50, %89
  %263 = and i32 %96, %1
  %264 = and i32 %10, %88
  %265 = xor i32 %103, -1
  %266 = xor i32 %104, %265
  %267 = and i32 %93, %56
  %268 = shl i32 %267, 1
  %269 = xor i32 %35, %142
  %270 = or i32 %65, %75
  %271 = and i32 %55, %34
  %272 = or i32 %50, %149
  %273 = and i32 %57, %55
  %274 = or i32 %86, %2
  %275 = xor i32 %164, -1
  %276 = or i32 %79, %275
  %277 = xor i32 %63, %265
  %278 = or i32 %50, %2
  %279 = or i32 %35, %7
  %280 = xor i32 %60, %2
  %281 = xor i32 %86, %2
  %282 = add i32 %7, 1
  %283 = and i32 %137, %0
  %284 = xor i32 %283, 1073741823
  %285 = xor i32 %284, %45
  %286 = or i32 %57, %1
  %287 = xor i32 %40, %1
  %288 = or i32 %103, %63
  %289 = or i32 %65, %33
  %290 = shl i32 %289, 1
  %291 = or i32 %34, %131
  %292 = or i32 %55, %58
  %293 = and i32 %75, %9
  %294 = and i32 %66, %9
  %295 = and i32 %75, %0
  %296 = mul i32 %295, -10
  %297 = and i32 %66, %0
  %298 = mul i32 %297, -21
  %299 = and i32 %149, %9
  %300 = mul i32 %103, -23
  %301 = and i32 %149, %0
  %302 = xor i32 %5, -1
  %303 = and i32 %302, %3
  %304 = xor i32 %303, -1
  %305 = and i32 %304, %4
  %306 = or i32 %16, %4
  %307 = xor i32 %306, -1
  %308 = xor i32 %5, %3
  %309 = xor i32 %308, -1
  %310 = or i32 %309, %307
  %311 = or i32 %303, %4
  %312 = and i32 %306, %309
  %313 = and i32 %16, %4
  %314 = or i32 %313, %309
  %315 = xor i32 %307, %5
  %316 = or i32 %308, %4
  %317 = xor i32 %20, %19
  %318 = xor i32 %317, %18
  %319 = and i32 %4, %3
  %320 = xor i32 %319, -1
  %321 = add i32 %319, 1
  %322 = xor i32 %303, %4
  %323 = shl i32 %322, 1
  %324 = xor i32 %308, %4
  %325 = xor i32 %324, %26
  %326 = xor i32 %5, %4
  %327 = or i32 %326, %307
  %328 = xor i32 %4, %3
  %329 = and i32 %328, %5
  %330 = or i32 %326, %3
  %331 = xor i32 %326, -1
  %332 = or i32 %331, %307
  %333 = or i32 %326, %313
  %334 = xor i32 %328, -1
  %335 = or i32 %334, %5
  %336 = xor i32 %25, -1
  %337 = or i32 %336, %4
  %338 = or i32 %302, %4
  %339 = and i32 %338, %328
  %340 = and i32 %320, %5
  %341 = or i32 %328, %331
  %342 = or i32 %5, %4
  %343 = xor i32 %342, -1
  %344 = shl i32 %343, 1
  %345 = xor i32 %313, %336
  %346 = and i32 %331, %16
  %347 = and i32 %302, %4
  %348 = xor i32 %347, -1
  %349 = and i32 %328, %348
  %350 = or i32 %27, %19
  %351 = and i32 %17, %19
  %352 = and i32 %309, %4
  %353 = or i32 %351, %352
  %354 = or i32 %302, %3
  %355 = xor i32 %354, -1
  %356 = or i32 %347, %355
  %357 = or i32 %347, %334
  %358 = or i32 %26, %28
  %359 = xor i32 %343, %3
  %360 = shl i32 %359, 1
  %361 = and i32 %5, %4
  %362 = xor i32 %361, -1
  %363 = and i32 %362, %334
  %364 = xor i32 %338, -1
  %365 = or i32 %328, %364
  %366 = shl i32 %365, 1
  %367 = xor i32 %25, %4
  %368 = shl i32 %367, 1
  %369 = and i32 %326, %3
  %370 = or i32 %4, %3
  %371 = xor i32 %370, -1
  %372 = or i32 %302, %371
  %373 = shl i32 %372, 1
  %374 = or i32 %303, %313
  %375 = xor i32 %361, %306
  %376 = or i32 %309, %19
  %377 = and i32 %308, %306
  %378 = shl i32 %377, 1
  %379 = or i32 %319, %364
  %380 = or i32 %364, %3
  %381 = add i32 %306, 1
  %382 = xor i32 %371, %5
  %383 = xor i32 %313, -1
  %384 = and i32 %383, %5
  %385 = or i32 %361, %328
  %386 = or i32 %304, %4
  %387 = or i32 %347, %25
  %388 = and i32 %338, %3
  %389 = xor i32 %338, %319
  %390 = xor i32 %319, %5
  %391 = and i32 %328, %362
  %392 = or i32 %319, %309
  %393 = or i32 %347, %328
  %394 = and i32 %302, %320
  %395 = or i32 %313, %302
  %396 = xor i32 %362, %3
  %397 = or i32 %326, %334
  %398 = or i32 %336, %19
  %399 = xor i32 %347, %354
  %400 = or i32 %343, %334
  %401 = or i32 %25, %313
  %402 = xor i32 %306, %5
  %403 = and i32 %338, %16
  %404 = or i32 %331, %371
  %405 = xor i32 %27, -1
  %406 = and i32 %405, %19
  %407 = and i32 %303, %19
  %408 = and i32 %405, %4
  %409 = and i32 %303, %4
  %410 = and i32 %355, %19
  %411 = shl i32 %410, 3
  %412 = and i32 %25, %19
  %413 = and i32 %355, %4
  %414 = add i32 %55, %0
  %415 = add i32 %414, %152
  %416 = add i32 %415, %273
  %417 = add i32 %416, %269
  %418 = add i32 %417, %253
  %419 = add i32 %418, %227
  %420 = add i32 %419, %217
  %421 = add i32 %420, %211
  %422 = add i32 %421, %193
  %423 = add i32 %422, %161
  %424 = add i32 %423, %148
  %425 = add i32 %424, %133
  %426 = add i32 %425, %128
  %427 = add i32 %426, %106
  %428 = add i32 %427, %94
  %429 = add i32 %428, %77
  %430 = add i32 %429, %72
  %431 = sub i32 %255, %340
  %432 = add i32 %431, %335
  %433 = sub i32 %432, %407
  %434 = sub i32 %433, %412
  %435 = sub i32 %434, %357
  %436 = add i32 %435, %333
  %437 = mul i32 %436, 5
  %438 = add i32 %299, %192
  %439 = add i32 %438, %301
  %440 = add i32 %439, %250
  %441 = add i32 %440, %158
  %442 = sub i32 %441, %122
  %443 = sub i32 %442, %99
  %444 = mul i32 %443, 3
  %445 = add i32 %285, %108
  %446 = add i32 %445, %403
  %447 = add i32 %446, %409
  %448 = shl i32 %447, 2
  %449 = add i32 %413, %406
  %450 = mul i32 %449, -11
  %451 = sub i32 %8, %26
  %452 = mul i32 %451, 13
  %453 = add i32 %294, %293
  %454 = mul i32 %453, 6
  %455 = add i32 %430, %46
  %456 = add i32 %455, %341
  %457 = add i32 %456, %389
  %458 = add i32 %457, %332
  %459 = add i32 %458, %311
  %460 = shl i32 %459, 1
  %461 = add i32 %176, %1
  %462 = add i32 %461, %123
  %463 = sub i32 %462, %50
  %464 = add i32 %463, %38
  %465 = sub i32 %464, %60
  %466 = add i32 %465, %56
  %467 = add i32 %466, %88
  %468 = add i32 %467, %39
  %469 = add i32 %468, %54
  %470 = add i32 %469, %82
  %471 = sub i32 %470, %87
  %472 = sub i32 %471, %101
  %473 = add i32 %472, %57
  %474 = sub i32 %473, %109
  %475 = add i32 %474, %110
  %476 = add i32 %475, %111
  %477 = add i32 %476, %115
  %478 = add i32 %477, %117
  %479 = sub i32 %478, %13
  %480 = add i32 %479, %93
  %481 = sub i32 %480, %132
  %482 = add i32 %481, %136
  %483 = add i32 %482, %141
  %484 = sub i32 %483, %144
  %485 = sub i32 %484, %35
  %486 = sub i32 %485, %154
  %487 = add i32 %486, %166
  %488 = sub i32 %487, %172
  %489 = sub i32 %488, %185
  %490 = sub i32 %489, %208
  %491 = add i32 %490, %213
  %492 = add i32 %491, %215
  %493 = add i32 %492, %220
  %494 = add i32 %493, %222
  %495 = sub i32 %494, %226
  %496 = add i32 %495, %10
  %497 = sub i32 %496, %237
  %498 = add i32 %497, %239
  %499 = add i32 %498, %242
  %500 = add i32 %499, %246
  %501 = sub i32 %500, %251
  %502 = sub i32 %501, %260
  %503 = add i32 %502, %65
  %504 = add i32 %503, %7
  %505 = add i32 %504, %271
  %506 = sub i32 %505, %274
  %507 = add i32 %506, %278
  %508 = sub i32 %507, %142
  %509 = add i32 %508, %280
  %510 = add i32 %509, %281
  %511 = add i32 %510, %282
  %512 = sub i32 %511, %291
  %513 = add i32 %512, %3
  %514 = add i32 %513, %37
  %515 = sub i32 %514, %41
  %516 = add i32 %515, %49
  %517 = sub i32 %516, %52
  %518 = sub i32 %517, %53
  %519 = sub i32 %518, %59
  %520 = add i32 %519, %62
  %521 = add i32 %520, %68
  %522 = add i32 %521, %71
  %523 = add i32 %522, %73
  %524 = sub i32 %523, %74
  %525 = add i32 %524, %76
  %526 = add i32 %525, %78
  %527 = sub i32 %526, %84
  %528 = add i32 %527, %85
  %529 = add i32 %528, %90
  %530 = add i32 %529, %95
  %531 = add i32 %530, %97
  %532 = add i32 %531, %98
  %533 = add i32 %532, %100
  %534 = sub i32 %533, %102
  %535 = add i32 %534, %107
  %536 = sub i32 %535, %116
  %537 = add i32 %536, %118
  %538 = add i32 %537, %119
  %539 = sub i32 %538, %120
  %540 = add i32 %539, %121
  %541 = add i32 %540, %129
  %542 = sub i32 %541, %130
  %543 = sub i32 %542, %134
  %544 = sub i32 %543, %135
  %545 = sub i32 %544, %143
  %546 = sub i32 %545, %147
  %547 = sub i32 %546, %80
  %548 = sub i32 %547, %153
  %549 = add i32 %548, %157
  %550 = add i32 %549, %162
  %551 = sub i32 %550, %163
  %552 = sub i32 %551, %167
  %553 = sub i32 %552, %168
  %554 = sub i32 %553, %169
  %555 = sub i32 %554, %170
  %556 = add i32 %555, %171
  %557 = add i32 %556, %104
  %558 = sub i32 %557, %173
  %559 = sub i32 %558, %177
  %560 = add i32 %559, %178
  %561 = add i32 %560, %179
  %562 = add i32 %561, %180
  %563 = sub i32 %562, %181
  %564 = add i32 %563, %182
  %565 = sub i32 %564, %183
  %566 = add i32 %565, %184
  %567 = add i32 %566, %186
  %568 = sub i32 %567, %187
  %569 = add i32 %568, %198
  %570 = add i32 %569, %199
  %571 = add i32 %570, %200
  %572 = add i32 %571, %201
  %573 = add i32 %572, %202
  %574 = sub i32 %573, %203
  %575 = add i32 %574, %204
  %576 = sub i32 %575, %206
  %577 = add i32 %576, %207
  %578 = sub i32 %577, %209
  %579 = add i32 %578, %210
  %580 = add i32 %579, %212
  %581 = add i32 %580, %214
  %582 = sub i32 %581, %216
  %583 = sub i32 %582, %221
  %584 = sub i32 %583, %223
  %585 = sub i32 %584, %230
  %586 = sub i32 %585, %231
  %587 = sub i32 %586, %11
  %588 = add i32 %587, %236
  %589 = add i32 %588, %238
  %590 = add i32 %589, %240
  %591 = sub i32 %590, %241
  %592 = sub i32 %591, %243
  %593 = add i32 %592, %244
  %594 = sub i32 %593, %245
  %595 = sub i32 %594, %248
  %596 = add i32 %595, %249
  %597 = sub i32 %596, %254
  %598 = add i32 %597, %259
  %599 = add i32 %598, %261
  %600 = add i32 %599, %262
  %601 = add i32 %600, %263
  %602 = add i32 %601, %264
  %603 = sub i32 %602, %270
  %604 = sub i32 %603, %272
  %605 = sub i32 %604, %279
  %606 = add i32 %605, %286
  %607 = add i32 %606, %287
  %608 = sub i32 %607, %164
  %609 = sub i32 %608, %292
  %610 = add i32 %609, %4
  %611 = sub i32 %610, %43
  %612 = sub i32 %611, %48
  %613 = sub i32 %612, %64
  %614 = sub i32 %613, %70
  %615 = sub i32 %614, %81
  %616 = sub i32 %615, %92
  %617 = add i32 %616, %105
  %618 = add i32 %617, %113
  %619 = sub i32 %618, %140
  %620 = add i32 %619, %146
  %621 = sub i32 %620, %151
  %622 = sub i32 %621, %155
  %623 = sub i32 %622, %156
  %624 = sub i32 %623, %160
  %625 = add i32 %624, %165
  %626 = sub i32 %625, %175
  %627 = sub i32 %626, %189
  %628 = sub i32 %627, %191
  %629 = sub i32 %628, %195
  %630 = sub i32 %629, %197
  %631 = add i32 %630, %205
  %632 = add i32 %631, %219
  %633 = sub i32 %632, %225
  %634 = sub i32 %633, %229
  %635 = sub i32 %634, %233
  %636 = add i32 %635, %235
  %637 = add i32 %636, %247
  %638 = sub i32 %637, %252
  %639 = sub i32 %638, %257
  %640 = add i32 %639, %258
  %641 = sub i32 %640, %266
  %642 = sub i32 %641, %268
  %643 = sub i32 %642, %276
  %644 = sub i32 %643, %277
  %645 = add i32 %644, %288
  %646 = sub i32 %645, %290
  %647 = add i32 %646, %296
  %648 = add i32 %647, %298
  %649 = add i32 %648, %300
  %650 = add i32 %649, %321
  %651 = add i32 %650, %381
  %652 = add i32 %651, %315
  %653 = sub i32 %652, %329
  %654 = add i32 %653, %338
  %655 = sub i32 %654, %361
  %656 = add i32 %655, %382
  %657 = add i32 %656, %384
  %658 = add i32 %657, %331
  %659 = sub i32 %658, %390
  %660 = add i32 %659, %394
  %661 = sub i32 %660, %395
  %662 = sub i32 %661, %402
  %663 = sub i32 %662, %347
  %664 = add i32 %663, %454
  %665 = sub i32 %664, %126
  %666 = sub i32 %665, %305
  %667 = sub i32 %666, %310
  %668 = add i32 %667, %312
  %669 = add i32 %668, %314
  %670 = sub i32 %669, %316
  %671 = sub i32 %670, %327
  %672 = sub i32 %671, %330
  %673 = add i32 %672, %337
  %674 = add i32 %673, %339
  %675 = sub i32 %674, %344
  %676 = add i32 %675, %345
  %677 = sub i32 %676, %346
  %678 = add i32 %677, %349
  %679 = sub i32 %678, %350
  %680 = sub i32 %679, %356
  %681 = sub i32 %680, %363
  %682 = add i32 %681, %369
  %683 = sub i32 %682, %373
  %684 = sub i32 %683, %374
  %685 = sub i32 %684, %375
  %686 = add i32 %685, %376
  %687 = add i32 %686, %28
  %688 = sub i32 %687, %379
  %689 = sub i32 %688, %380
  %690 = sub i32 %689, %352
  %691 = add i32 %690, %385
  %692 = sub i32 %691, %386
  %693 = add i32 %692, %387
  %694 = add i32 %693, %388
  %695 = sub i32 %694, %391
  %696 = add i32 %695, %392
  %697 = sub i32 %696, %393
  %698 = sub i32 %697, %396
  %699 = add i32 %698, %397
  %700 = add i32 %699, %398
  %701 = add i32 %700, %399
  %702 = add i32 %701, %400
  %703 = add i32 %702, %401
  %704 = add i32 %703, %404
  %705 = sub i32 %704, %408
  %706 = add i32 %705, %318
  %707 = sub i32 %706, %323
  %708 = sub i32 %707, %325
  %709 = add i32 %708, %353
  %710 = add i32 %709, %358
  %711 = sub i32 %710, %360
  %712 = sub i32 %711, %366
  %713 = sub i32 %712, %368
  %714 = sub i32 %713, %378
  %715 = add i32 %714, %411
  %716 = add i32 %715, %450
  %717 = add i32 %716, %452
  %718 = add i32 %717, %444
  %719 = add i32 %718, %448
  %720 = add i32 %719, %437
  %721 = add i32 %720, %460
  %722 = icmp eq i32 %32, %721
  %723 = select i1 %722, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %724 = tail call i32 @puts(i8* nonnull dereferenceable(1) %723)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
