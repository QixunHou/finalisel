digraph "DFG for'crackme' function" {
	Node0x1f26b50[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x1f26bf0[shape=record, label="  %4 = add i32 %1, 1"];
	Node0x1f26cb0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x1f26d20[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x1f26d90[shape=record, label="  %7 = or i32 %3, %0"];
	Node0x1f26e00[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x1f26e70[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x1f26ee0[shape=record, label="  %10 = xor i32 %1, %0"];
	Node0x1f26f50[shape=record, label="  %11 = xor i32 %5, -1"];
	Node0x1f26fc0[shape=record, label="  %12 = mul i32 %11, -6"];
	Node0x1f27030[shape=record, label="  %13 = xor i32 %7, -1"];
	Node0x1f270d0[shape=record, label="  %14 = shl i32 %8, 3"];
	Node0x1f27140[shape=record, label="  %15 = and i32 %1, %0"];
	Node0x1f271b0[shape=record, label="  %16 = add i32 %15, %13"];
	Node0x1f27250[shape=record, label="  %17 = mul i32 %16, -7"];
	Node0x1f272f0[shape=record, label="  %18 = add i32 %7, -3"];
	Node0x1f27360[shape=record, label="  %19 = add i32 %18, %9"];
	Node0x1f273d0[shape=record, label="  %20 = add i32 %19, %10"];
	Node0x1f27440[shape=record, label="  %21 = add i32 %20, %6"];
	Node0x1f274b0[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x1f27520[shape=record, label="  %23 = sub i32 %22, %14"];
	Node0x1f27590[shape=record, label="  %24 = add i32 %23, %17"];
	Node0x1f27600[shape=record, label="  %25 = icmp eq i32 %4, %24"];
	Node0x1ec7268[shape=record, label="  %26 = select i1 %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x1f27aa0[shape=record, label="  %27 = tail call i32 @puts(i8* nonnull dereferenceable(1) %26)"];
	Node0x1f27af0[shape=record, label="  ret void"];
	Node0x1f26b50 -> Node0x1f26bf0;
	Node0x1f26bf0 -> Node0x1f26cb0;
	Node0x1f26cb0 -> Node0x1f26d20;
	Node0x1f26d20 -> Node0x1f26d90;
	Node0x1f26d90 -> Node0x1f26e00;
	Node0x1f26e00 -> Node0x1f26e70;
	Node0x1f26e70 -> Node0x1f26ee0;
	Node0x1f26ee0 -> Node0x1f26f50;
	Node0x1f26f50 -> Node0x1f26fc0;
	Node0x1f26fc0 -> Node0x1f27030;
	Node0x1f27030 -> Node0x1f270d0;
	Node0x1f270d0 -> Node0x1f27140;
	Node0x1f27140 -> Node0x1f271b0;
	Node0x1f271b0 -> Node0x1f27250;
	Node0x1f27250 -> Node0x1f272f0;
	Node0x1f272f0 -> Node0x1f27360;
	Node0x1f27360 -> Node0x1f273d0;
	Node0x1f273d0 -> Node0x1f27440;
	Node0x1f27440 -> Node0x1f274b0;
	Node0x1f274b0 -> Node0x1f27520;
	Node0x1f27520 -> Node0x1f27590;
	Node0x1f27590 -> Node0x1f27600;
	Node0x1f27600 -> Node0x1ec7268;
	Node0x1ec7268 -> Node0x1f27aa0;
	Node0x1f27aa0 -> Node0x1f27af0;
edge [color=red]
	Node0x1f26cb0 -> Node0x1f26d20;
	Node0x1f26b50 -> Node0x1f26d90;
	Node0x1f26b50 -> Node0x1f26e00;
	Node0x1f26e00 -> Node0x1f26e70;
	Node0x1f26cb0 -> Node0x1f26f50;
	Node0x1f26f50 -> Node0x1f26fc0;
	Node0x1f26d90 -> Node0x1f27030;
	Node0x1f26e00 -> Node0x1f270d0;
	Node0x1f27140 -> Node0x1f271b0;
	Node0x1f27030 -> Node0x1f271b0;
	Node0x1f271b0 -> Node0x1f27250;
	Node0x1f26d90 -> Node0x1f272f0;
	Node0x1f272f0 -> Node0x1f27360;
	Node0x1f26e70 -> Node0x1f27360;
	Node0x1f27360 -> Node0x1f273d0;
	Node0x1f26ee0 -> Node0x1f273d0;
	Node0x1f273d0 -> Node0x1f27440;
	Node0x1f26d20 -> Node0x1f27440;
	Node0x1f27440 -> Node0x1f274b0;
	Node0x1f26fc0 -> Node0x1f274b0;
	Node0x1f274b0 -> Node0x1f27520;
	Node0x1f270d0 -> Node0x1f27520;
	Node0x1f27520 -> Node0x1f27590;
	Node0x1f27250 -> Node0x1f27590;
	Node0x1f26bf0 -> Node0x1f27600;
	Node0x1f27590 -> Node0x1f27600;
	Node0x1f27600 -> Node0x1ec7268;
	Node0x1ec7268 -> Node0x1f27aa0;
}
