digraph "DFG for'crackme' function" {
	Node0x860bf0[shape=record, label="  %3 = xor i32 %0, -1"];
	Node0x860c90[shape=record, label="  %4 = shl i32 %0, 1"];
	Node0x860d50[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x860dc0[shape=record, label="  %6 = and i32 %5, %0"];
	Node0x860e30[shape=record, label="  %7 = shl i32 %6, 1"];
	Node0x860ea0[shape=record, label="  %8 = xor i32 %7, -2"];
	Node0x860f10[shape=record, label="  %9 = shl i32 %5, 1"];
	Node0x860f80[shape=record, label="  %10 = or i32 %1, %0"];
	Node0x860ff0[shape=record, label="  %11 = and i32 %1, %0"];
	Node0x861060[shape=record, label="  %12 = xor i32 %11, -1"];
	Node0x8610d0[shape=record, label="  %13 = shl i32 %10, 1"];
	Node0x861140[shape=record, label="  %14 = xor i32 %13, -2"];
	Node0x8611e0[shape=record, label="  %15 = xor i32 %0, 2147483647"];
	Node0x861250[shape=record, label="  %16 = and i32 %15, %1"];
	Node0x8612c0[shape=record, label="  %17 = shl i32 %16, 1"];
	Node0x861360[shape=record, label="  %18 = sub i32 2, %4"];
	Node0x8613d0[shape=record, label="  %19 = sub i32 %18, %1"];
	Node0x861440[shape=record, label="  %20 = sub i32 %19, %9"];
	Node0x8614b0[shape=record, label="  %21 = add i32 %20, %10"];
	Node0x861520[shape=record, label="  %22 = add i32 %21, %12"];
	Node0x861590[shape=record, label="  %23 = sub i32 %22, %17"];
	Node0x861600[shape=record, label="  %24 = add i32 %23, %7"];
	Node0x861670[shape=record, label="  %25 = add i32 %24, %8"];
	Node0x8616e0[shape=record, label="  %26 = add i32 %25, %14"];
	Node0x861750[shape=record, label="  %27 = add i32 %26, %13"];
	Node0x8617c0[shape=record, label="  %28 = icmp eq i32 %27, %3"];
	Node0x801268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x861c60[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x861cb0[shape=record, label="  ret void"];
	Node0x860bf0 -> Node0x860c90;
	Node0x860c90 -> Node0x860d50;
	Node0x860d50 -> Node0x860dc0;
	Node0x860dc0 -> Node0x860e30;
	Node0x860e30 -> Node0x860ea0;
	Node0x860ea0 -> Node0x860f10;
	Node0x860f10 -> Node0x860f80;
	Node0x860f80 -> Node0x860ff0;
	Node0x860ff0 -> Node0x861060;
	Node0x861060 -> Node0x8610d0;
	Node0x8610d0 -> Node0x861140;
	Node0x861140 -> Node0x8611e0;
	Node0x8611e0 -> Node0x861250;
	Node0x861250 -> Node0x8612c0;
	Node0x8612c0 -> Node0x861360;
	Node0x861360 -> Node0x8613d0;
	Node0x8613d0 -> Node0x861440;
	Node0x861440 -> Node0x8614b0;
	Node0x8614b0 -> Node0x861520;
	Node0x861520 -> Node0x861590;
	Node0x861590 -> Node0x861600;
	Node0x861600 -> Node0x861670;
	Node0x861670 -> Node0x8616e0;
	Node0x8616e0 -> Node0x861750;
	Node0x861750 -> Node0x8617c0;
	Node0x8617c0 -> Node0x801268;
	Node0x801268 -> Node0x861c60;
	Node0x861c60 -> Node0x861cb0;
edge [color=red]
	Node0x860d50 -> Node0x860dc0;
	Node0x860dc0 -> Node0x860e30;
	Node0x860e30 -> Node0x860ea0;
	Node0x860d50 -> Node0x860f10;
	Node0x860ff0 -> Node0x861060;
	Node0x860f80 -> Node0x8610d0;
	Node0x8610d0 -> Node0x861140;
	Node0x8611e0 -> Node0x861250;
	Node0x861250 -> Node0x8612c0;
	Node0x860c90 -> Node0x861360;
	Node0x861360 -> Node0x8613d0;
	Node0x8613d0 -> Node0x861440;
	Node0x860f10 -> Node0x861440;
	Node0x861440 -> Node0x8614b0;
	Node0x860f80 -> Node0x8614b0;
	Node0x8614b0 -> Node0x861520;
	Node0x861060 -> Node0x861520;
	Node0x861520 -> Node0x861590;
	Node0x8612c0 -> Node0x861590;
	Node0x861590 -> Node0x861600;
	Node0x860e30 -> Node0x861600;
	Node0x861600 -> Node0x861670;
	Node0x860ea0 -> Node0x861670;
	Node0x861670 -> Node0x8616e0;
	Node0x861140 -> Node0x8616e0;
	Node0x8616e0 -> Node0x861750;
	Node0x8610d0 -> Node0x861750;
	Node0x861750 -> Node0x8617c0;
	Node0x860bf0 -> Node0x8617c0;
	Node0x8617c0 -> Node0x801268;
	Node0x801268 -> Node0x861c60;
}
