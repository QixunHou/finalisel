digraph "DFG for'crackme' function" {
	Node0x2348150[shape=record, label="  %5 = xor i32 %2, -1"];
	Node0x23481c0[shape=record, label="  %6 = and i32 %5, %1"];
	Node0x2348260[shape=record, label="  %7 = add i32 %6, 1"];
	Node0x23482d0[shape=record, label="  %8 = xor i32 %3, %0"];
	Node0x2348340[shape=record, label="  %9 = sub i32 %7, %8"];
	Node0x23483b0[shape=record, label="  %10 = and i32 %2, %1"];
	Node0x2348420[shape=record, label="  %11 = xor i32 %2, %1"];
	Node0x2348490[shape=record, label="  %12 = add i32 %2, 1"];
	Node0x2348500[shape=record, label="  %13 = or i32 %2, %1"];
	Node0x2348570[shape=record, label="  %14 = xor i32 %13, -1"];
	Node0x23485e0[shape=record, label="  %15 = xor i32 %1, -1"];
	Node0x2348650[shape=record, label="  %16 = and i32 %15, %2"];
	Node0x23486c0[shape=record, label="  %17 = shl i32 %0, 1"];
	Node0x2348730[shape=record, label="  %18 = xor i32 %0, -1"];
	Node0x23487a0[shape=record, label="  %19 = or i32 %18, %3"];
	Node0x2348810[shape=record, label="  %20 = and i32 %3, %0"];
	Node0x2348880[shape=record, label="  %21 = or i32 %3, %0"];
	Node0x23488f0[shape=record, label="  %22 = and i32 %18, %3"];
	Node0x2348990[shape=record, label="  %23 = shl i32 %21, 2"];
	Node0x2348a30[shape=record, label="  %24 = xor i32 %23, -4"];
	Node0x2348aa0[shape=record, label="  %25 = xor i32 %19, -1"];
	Node0x2348b40[shape=record, label="  %26 = mul i32 %25, 5"];
	Node0x2348be0[shape=record, label="  %27 = mul i32 %20, 6"];
	Node0x2348c50[shape=record, label="  %28 = add i32 %22, %14"];
	Node0x2348cf0[shape=record, label="  %29 = mul i32 %28, 3"];
	Node0x2348d60[shape=record, label="  %30 = add i32 %11, %6"];
	Node0x2348dd0[shape=record, label="  %31 = shl i32 %30, 1"];
	Node0x2348e40[shape=record, label="  %32 = sub i32 6, %17"];
	Node0x23490c0[shape=record, label="  %33 = add i32 %32, %2"];
	Node0x2349130[shape=record, label="  %34 = add i32 %33, %12"];
	Node0x23491a0[shape=record, label="  %35 = add i32 %34, %10"];
	Node0x2349210[shape=record, label="  %36 = sub i32 %35, %16"];
	Node0x2349280[shape=record, label="  %37 = sub i32 %36, %19"];
	Node0x23492f0[shape=record, label="  %38 = add i32 %37, %20"];
	Node0x2349360[shape=record, label="  %39 = sub i32 %38, %21"];
	Node0x23493d0[shape=record, label="  %40 = add i32 %39, %22"];
	Node0x2349440[shape=record, label="  %41 = add i32 %40, %26"];
	Node0x23494b0[shape=record, label="  %42 = add i32 %41, %27"];
	Node0x2349520[shape=record, label="  %43 = add i32 %42, %31"];
	Node0x2349590[shape=record, label="  %44 = add i32 %43, %24"];
	Node0x2349600[shape=record, label="  %45 = add i32 %44, %29"];
	Node0x2349670[shape=record, label="  %46 = icmp eq i32 %9, %45"];
	Node0x22e8268[shape=record, label="  %47 = select i1 %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x2349b10[shape=record, label="  %48 = tail call i32 @puts(i8* nonnull dereferenceable(1) %47)"];
	Node0x2349b60[shape=record, label="  ret void"];
	Node0x2348150 -> Node0x23481c0;
	Node0x23481c0 -> Node0x2348260;
	Node0x2348260 -> Node0x23482d0;
	Node0x23482d0 -> Node0x2348340;
	Node0x2348340 -> Node0x23483b0;
	Node0x23483b0 -> Node0x2348420;
	Node0x2348420 -> Node0x2348490;
	Node0x2348490 -> Node0x2348500;
	Node0x2348500 -> Node0x2348570;
	Node0x2348570 -> Node0x23485e0;
	Node0x23485e0 -> Node0x2348650;
	Node0x2348650 -> Node0x23486c0;
	Node0x23486c0 -> Node0x2348730;
	Node0x2348730 -> Node0x23487a0;
	Node0x23487a0 -> Node0x2348810;
	Node0x2348810 -> Node0x2348880;
	Node0x2348880 -> Node0x23488f0;
	Node0x23488f0 -> Node0x2348990;
	Node0x2348990 -> Node0x2348a30;
	Node0x2348a30 -> Node0x2348aa0;
	Node0x2348aa0 -> Node0x2348b40;
	Node0x2348b40 -> Node0x2348be0;
	Node0x2348be0 -> Node0x2348c50;
	Node0x2348c50 -> Node0x2348cf0;
	Node0x2348cf0 -> Node0x2348d60;
	Node0x2348d60 -> Node0x2348dd0;
	Node0x2348dd0 -> Node0x2348e40;
	Node0x2348e40 -> Node0x23490c0;
	Node0x23490c0 -> Node0x2349130;
	Node0x2349130 -> Node0x23491a0;
	Node0x23491a0 -> Node0x2349210;
	Node0x2349210 -> Node0x2349280;
	Node0x2349280 -> Node0x23492f0;
	Node0x23492f0 -> Node0x2349360;
	Node0x2349360 -> Node0x23493d0;
	Node0x23493d0 -> Node0x2349440;
	Node0x2349440 -> Node0x23494b0;
	Node0x23494b0 -> Node0x2349520;
	Node0x2349520 -> Node0x2349590;
	Node0x2349590 -> Node0x2349600;
	Node0x2349600 -> Node0x2349670;
	Node0x2349670 -> Node0x22e8268;
	Node0x22e8268 -> Node0x2349b10;
	Node0x2349b10 -> Node0x2349b60;
edge [color=red]
	Node0x2348150 -> Node0x23481c0;
	Node0x23481c0 -> Node0x2348260;
	Node0x2348260 -> Node0x2348340;
	Node0x23482d0 -> Node0x2348340;
	Node0x2348500 -> Node0x2348570;
	Node0x23485e0 -> Node0x2348650;
	Node0x2348730 -> Node0x23487a0;
	Node0x2348730 -> Node0x23488f0;
	Node0x2348880 -> Node0x2348990;
	Node0x2348990 -> Node0x2348a30;
	Node0x23487a0 -> Node0x2348aa0;
	Node0x2348aa0 -> Node0x2348b40;
	Node0x2348810 -> Node0x2348be0;
	Node0x23488f0 -> Node0x2348c50;
	Node0x2348570 -> Node0x2348c50;
	Node0x2348c50 -> Node0x2348cf0;
	Node0x2348420 -> Node0x2348d60;
	Node0x23481c0 -> Node0x2348d60;
	Node0x2348d60 -> Node0x2348dd0;
	Node0x23486c0 -> Node0x2348e40;
	Node0x2348e40 -> Node0x23490c0;
	Node0x23490c0 -> Node0x2349130;
	Node0x2348490 -> Node0x2349130;
	Node0x2349130 -> Node0x23491a0;
	Node0x23483b0 -> Node0x23491a0;
	Node0x23491a0 -> Node0x2349210;
	Node0x2348650 -> Node0x2349210;
	Node0x2349210 -> Node0x2349280;
	Node0x23487a0 -> Node0x2349280;
	Node0x2349280 -> Node0x23492f0;
	Node0x2348810 -> Node0x23492f0;
	Node0x23492f0 -> Node0x2349360;
	Node0x2348880 -> Node0x2349360;
	Node0x2349360 -> Node0x23493d0;
	Node0x23488f0 -> Node0x23493d0;
	Node0x23493d0 -> Node0x2349440;
	Node0x2348b40 -> Node0x2349440;
	Node0x2349440 -> Node0x23494b0;
	Node0x2348be0 -> Node0x23494b0;
	Node0x23494b0 -> Node0x2349520;
	Node0x2348dd0 -> Node0x2349520;
	Node0x2349520 -> Node0x2349590;
	Node0x2348a30 -> Node0x2349590;
	Node0x2349590 -> Node0x2349600;
	Node0x2348cf0 -> Node0x2349600;
	Node0x2348340 -> Node0x2349670;
	Node0x2349600 -> Node0x2349670;
	Node0x2349670 -> Node0x22e8268;
	Node0x22e8268 -> Node0x2349b10;
}
