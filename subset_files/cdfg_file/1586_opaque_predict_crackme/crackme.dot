digraph "DFG for'crackme' function" {
	Node0x8825a0[shape=record, label="  %3 = xor i32 %1, %0"];
	Node0x882610[shape=record, label="  %4 = or i32 %1, %0"];
	Node0x882ce0[shape=record, label="  %5 = mul i32 %4, -2"];
	Node0x882d50[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x882df0[shape=record, label="  %7 = or i32 %5, 1"];
	Node0x882e90[shape=record, label="  %8 = xor i32 %1, -1"];
	Node0x882f00[shape=record, label="  %9 = shl i32 %8, 1"];
	Node0x882f70[shape=record, label="  %10 = and i32 %8, %0"];
	Node0x882fe0[shape=record, label="  %11 = shl i32 %10, 1"];
	Node0x883050[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x8830c0[shape=record, label="  %13 = xor i32 %3, -1"];
	Node0x883160[shape=record, label="  %14 = shl i32 %4, 2"];
	Node0x883200[shape=record, label="  %15 = xor i32 %14, -4"];
	Node0x883270[shape=record, label="  %16 = xor i32 %0, -1"];
	Node0x8832e0[shape=record, label="  %17 = and i32 %16, %1"];
	Node0x883380[shape=record, label="  %18 = mul i32 %17, 6"];
	Node0x8833f0[shape=record, label="  %19 = add i32 %10, %0"];
	Node0x883490[shape=record, label="  %20 = mul i32 %19, 3"];
	Node0x883500[shape=record, label="  %21 = sub i32 %6, %9"];
	Node0x883570[shape=record, label="  %22 = add i32 %21, %13"];
	Node0x8835e0[shape=record, label="  %23 = add i32 %22, %18"];
	Node0x883650[shape=record, label="  %24 = add i32 %23, %7"];
	Node0x8836c0[shape=record, label="  %25 = sub i32 %24, %12"];
	Node0x883730[shape=record, label="  %26 = add i32 %25, %15"];
	Node0x8837a0[shape=record, label="  %27 = add i32 %26, %20"];
	Node0x883810[shape=record, label="  %28 = icmp eq i32 %3, %27"];
	Node0x823268[shape=record, label="  %29 = select i1 %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x883cb0[shape=record, label="  %30 = tail call i32 @puts(i8* nonnull dereferenceable(1) %29)"];
	Node0x883d00[shape=record, label="  ret void"];
	Node0x8825a0 -> Node0x882610;
	Node0x882610 -> Node0x882ce0;
	Node0x882ce0 -> Node0x882d50;
	Node0x882d50 -> Node0x882df0;
	Node0x882df0 -> Node0x882e90;
	Node0x882e90 -> Node0x882f00;
	Node0x882f00 -> Node0x882f70;
	Node0x882f70 -> Node0x882fe0;
	Node0x882fe0 -> Node0x883050;
	Node0x883050 -> Node0x8830c0;
	Node0x8830c0 -> Node0x883160;
	Node0x883160 -> Node0x883200;
	Node0x883200 -> Node0x883270;
	Node0x883270 -> Node0x8832e0;
	Node0x8832e0 -> Node0x883380;
	Node0x883380 -> Node0x8833f0;
	Node0x8833f0 -> Node0x883490;
	Node0x883490 -> Node0x883500;
	Node0x883500 -> Node0x883570;
	Node0x883570 -> Node0x8835e0;
	Node0x8835e0 -> Node0x883650;
	Node0x883650 -> Node0x8836c0;
	Node0x8836c0 -> Node0x883730;
	Node0x883730 -> Node0x8837a0;
	Node0x8837a0 -> Node0x883810;
	Node0x883810 -> Node0x823268;
	Node0x823268 -> Node0x883cb0;
	Node0x883cb0 -> Node0x883d00;
edge [color=red]
	Node0x882610 -> Node0x882ce0;
	Node0x882ce0 -> Node0x882df0;
	Node0x882e90 -> Node0x882f00;
	Node0x882e90 -> Node0x882f70;
	Node0x882f70 -> Node0x882fe0;
	Node0x882fe0 -> Node0x883050;
	Node0x8825a0 -> Node0x8830c0;
	Node0x882610 -> Node0x883160;
	Node0x883160 -> Node0x883200;
	Node0x883270 -> Node0x8832e0;
	Node0x8832e0 -> Node0x883380;
	Node0x882f70 -> Node0x8833f0;
	Node0x8833f0 -> Node0x883490;
	Node0x882d50 -> Node0x883500;
	Node0x882f00 -> Node0x883500;
	Node0x883500 -> Node0x883570;
	Node0x8830c0 -> Node0x883570;
	Node0x883570 -> Node0x8835e0;
	Node0x883380 -> Node0x8835e0;
	Node0x8835e0 -> Node0x883650;
	Node0x882df0 -> Node0x883650;
	Node0x883650 -> Node0x8836c0;
	Node0x883050 -> Node0x8836c0;
	Node0x8836c0 -> Node0x883730;
	Node0x883200 -> Node0x883730;
	Node0x883730 -> Node0x8837a0;
	Node0x883490 -> Node0x8837a0;
	Node0x8825a0 -> Node0x883810;
	Node0x8837a0 -> Node0x883810;
	Node0x883810 -> Node0x823268;
	Node0x823268 -> Node0x883cb0;
}
