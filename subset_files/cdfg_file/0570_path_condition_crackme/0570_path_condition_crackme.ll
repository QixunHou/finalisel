; ModuleID = '../.././c_source_file/0570_path_condition_crackme.c'
source_filename = "../.././c_source_file/0570_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = and i32 %4, %3
  %10 = xor i32 %9, -1
  %11 = shl i32 %10, 1
  %12 = add i32 %11, %8
  %13 = xor i32 %5, -1
  %14 = or i32 %13, %3
  %15 = xor i32 %14, %9
  %16 = sub i32 %12, %15
  %17 = xor i32 %0, -1
  %18 = and i32 %2, %1
  %19 = and i32 %18, %17
  %20 = or i32 %2, %1
  %21 = and i32 %20, %0
  %22 = or i32 %19, %21
  %23 = xor i32 %1, -1
  %24 = and i32 %23, %2
  %25 = and i32 %24, %17
  %26 = xor i32 %2, %1
  %27 = xor i32 %26, -1
  %28 = and i32 %27, %0
  %29 = or i32 %25, %28
  %30 = or i32 %2, %0
  %31 = xor i32 %30, %1
  %32 = and i32 %1, %0
  %33 = or i32 %26, %32
  %34 = xor i32 %2, -1
  %35 = and i32 %34, %0
  %36 = xor i32 %35, -1
  %37 = xor i32 %36, %1
  %38 = xor i32 %1, %0
  %39 = xor i32 %38, -1
  %40 = or i32 %8, %39
  %41 = or i32 %35, %23
  %42 = shl i32 %41, 1
  %43 = or i32 %8, %1
  %44 = or i32 %1, %0
  %45 = xor i32 %44, -1
  %46 = or i32 %34, %45
  %47 = shl i32 %46, 1
  %48 = or i32 %23, %0
  %49 = and i32 %48, %2
  %50 = shl i32 %49, 1
  %51 = and i32 %38, %2
  %52 = xor i32 %27, %0
  %53 = and i32 %24, %0
  %54 = or i32 %23, %2
  %55 = and i32 %54, %17
  %56 = or i32 %53, %55
  %57 = or i32 %18, %17
  %58 = and i32 %2, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %59, %39
  %61 = and i32 %23, %0
  %62 = or i32 %26, %61
  %63 = and i32 %34, %1
  %64 = xor i32 %63, -1
  %65 = and i32 %64, %0
  %66 = xor i32 %61, -1
  %67 = and i32 %7, %66
  %68 = xor i32 %32, -1
  %69 = and i32 %68, %2
  %70 = and i32 %64, %17
  %71 = or i32 %34, %0
  %72 = and i32 %71, %39
  %73 = and i32 %34, %66
  %74 = and i32 %18, %0
  %75 = or i32 %27, %0
  %76 = xor i32 %74, %75
  %77 = or i32 %27, %17
  %78 = or i32 %34, %1
  %79 = xor i32 %35, %78
  %80 = and i32 %7, %39
  %81 = and i32 %7, %48
  %82 = or i32 %26, %0
  %83 = and i32 %7, %23
  %84 = shl i32 %83, 1
  %85 = xor i32 %63, %0
  %86 = and i32 %30, %23
  %87 = xor i32 %30, -1
  %88 = or i32 %87, %1
  %89 = or i32 %7, %45
  %90 = xor i32 %61, %2
  %91 = xor i32 %20, -1
  %92 = or i32 %32, %91
  %93 = shl i32 %92, 2
  %94 = or i32 %38, %87
  %95 = and i32 %71, %38
  %96 = shl i32 %17, 1
  %97 = xor i32 %58, %44
  %98 = shl i32 %97, 1
  %99 = xor i32 %18, -1
  %100 = and i32 %99, %17
  %101 = and i32 %7, %68
  %102 = shl i32 %101, 1
  %103 = or i32 %32, %27
  %104 = shl i32 %103, 1
  %105 = or i32 %8, %45
  %106 = xor i32 %48, -1
  %107 = or i32 %27, %106
  %108 = and i32 %27, %68
  %109 = xor i32 %20, %0
  %110 = or i32 %26, %106
  %111 = xor i32 %32, %2
  %112 = xor i32 %26, %0
  %113 = xor i32 %112, %74
  %114 = or i32 %34, %39
  %115 = xor i32 %78, %32
  %116 = shl i32 %115, 2
  %117 = and i32 %36, %1
  %118 = or i32 %7, %39
  %119 = or i32 %18, %0
  %120 = and i32 %91, %17
  %121 = mul i32 %120, 28
  %122 = and i32 %63, %17
  %123 = and i32 %91, %0
  %124 = mul i32 %123, 14
  %125 = and i32 %63, %0
  %126 = mul i32 %125, 10
  %127 = xor i32 %78, -1
  %128 = and i32 %127, %17
  %129 = mul i32 %19, 19
  %130 = and i32 %127, %0
  %131 = and i32 %14, %4
  %132 = or i32 %4, %3
  %133 = xor i32 %5, %4
  %134 = and i32 %133, %132
  %135 = xor i32 %5, %3
  %136 = or i32 %135, %9
  %137 = and i32 %135, %4
  %138 = xor i32 %3, -1
  %139 = or i32 %138, %4
  %140 = xor i32 %133, -1
  %141 = and i32 %139, %140
  %142 = and i32 %13, %4
  %143 = or i32 %142, %138
  %144 = xor i32 %14, %4
  %145 = or i32 %5, %4
  %146 = and i32 %145, %138
  %147 = and i32 %13, %3
  %148 = xor i32 %139, -1
  %149 = add i32 %139, 1
  %150 = and i32 %133, %10
  %151 = and i32 %138, %4
  %152 = and i32 %5, %3
  %153 = xor i32 %152, -1
  %154 = xor i32 %151, %153
  %155 = or i32 %5, %3
  %156 = or i32 %133, %3
  %157 = xor i32 %4, %3
  %158 = xor i32 %157, -1
  %159 = and i32 %140, %158
  %160 = or i32 %153, %4
  %161 = xor i32 %132, -1
  %162 = xor i32 %161, %5
  %163 = shl i32 %162, 1
  %164 = and i32 %152, %4
  %165 = xor i32 %155, %4
  %166 = or i32 %164, %165
  %167 = and i32 %5, %4
  %168 = xor i32 %167, -1
  %169 = and i32 %168, %3
  %170 = or i32 %135, %151
  %171 = or i32 %155, %4
  %172 = shl i32 %171, 1
  %173 = and i32 %138, %5
  %174 = and i32 %173, %4
  %175 = xor i32 %135, %4
  %176 = or i32 %174, %175
  %177 = and i32 %140, %3
  %178 = or i32 %135, %4
  %179 = xor i32 %174, %178
  %180 = xor i32 %14, -1
  %181 = add i32 %14, 1
  %182 = xor i32 %135, -1
  %183 = or i32 %182, %4
  %184 = xor i32 %145, -1
  %185 = xor i32 %184, %3
  %186 = xor i32 %174, 2147483647
  %187 = xor i32 %186, %175
  %188 = and i32 %145, %158
  %189 = shl i32 %188, 2
  %190 = or i32 %147, %151
  %191 = or i32 %135, %148
  %192 = xor i32 %151, -1
  %193 = and i32 %135, %192
  %194 = or i32 %9, %182
  %195 = shl i32 %194, 1
  %196 = xor i32 %182, %4
  %197 = xor i32 %165, -1
  %198 = xor i32 %164, %197
  %199 = or i32 %13, %158
  %200 = xor i32 %4, -1
  %201 = and i32 %173, %200
  %202 = or i32 %138, %5
  %203 = and i32 %202, %4
  %204 = xor i32 %203, 2147483647
  %205 = xor i32 %204, %201
  %206 = shl i32 %205, 1
  %207 = and i32 %140, %138
  %208 = and i32 %14, %200
  %209 = shl i32 %208, 1
  %210 = or i32 %167, %148
  %211 = xor i32 %139, %5
  %212 = xor i32 %202, %4
  %213 = or i32 %174, %212
  %214 = shl i32 %213, 1
  %215 = xor i32 %164, %175
  %216 = xor i32 %167, %139
  %217 = shl i32 %216, 2
  %218 = and i32 %13, %158
  %219 = and i32 %155, %4
  %220 = and i32 %135, %200
  %221 = or i32 %13, %4
  %222 = and i32 %221, %138
  %223 = add i32 %5, 1
  %224 = add i32 %3, 1
  %225 = xor i32 %221, -1
  %226 = or i32 %225, %138
  %227 = xor i32 %147, -1
  %228 = xor i32 %151, %227
  %229 = xor i32 %145, %9
  %230 = and i32 %152, %200
  %231 = or i32 %230, %219
  %232 = or i32 %167, %147
  %233 = and i32 %227, %4
  %234 = shl i32 %233, 1
  %235 = xor i32 %10, %5
  %236 = or i32 %135, %200
  %237 = xor i32 %236, -1
  %238 = or i32 %201, %237
  %239 = xor i32 %227, %4
  %240 = and i32 %145, %3
  %241 = or i32 %227, %200
  %242 = and i32 %135, %132
  %243 = or i32 %161, %5
  %244 = xor i32 %137, -1
  %245 = xor i32 %230, %244
  %246 = xor i32 %153, %4
  %247 = xor i32 %167, %155
  %248 = xor i32 %142, -1
  %249 = and i32 %157, %248
  %250 = xor i32 %147, %4
  %251 = xor i32 %248, %3
  %252 = or i32 %14, %200
  %253 = or i32 %167, %138
  %254 = or i32 %157, %184
  %255 = or i32 %157, %13
  %256 = and i32 %157, %140
  %257 = and i32 %182, %4
  %258 = xor i32 %9, %5
  %259 = shl i32 %258, 1
  %260 = and i32 %182, %10
  %261 = or i32 %9, %225
  %262 = and i32 %133, %3
  %263 = and i32 %168, %138
  %264 = and i32 %153, %200
  %265 = or i32 %140, %158
  %266 = or i32 %142, %157
  %267 = and i32 %248, %158
  %268 = or i32 %133, %157
  %269 = shl i32 %268, 1
  %270 = and i32 %155, %200
  %271 = or i32 %164, %270
  %272 = or i32 %151, %13
  %273 = or i32 %152, %151
  %274 = or i32 %182, %148
  %275 = or i32 %230, %137
  %276 = and i32 %132, %140
  %277 = or i32 %201, %203
  %278 = and i32 %135, %139
  %279 = or i32 %14, %4
  %280 = shl i32 %279, 1
  %281 = xor i32 %168, %3
  %282 = shl i32 %281, 1
  %283 = or i32 %133, %138
  %284 = or i32 %157, %140
  %285 = and i32 %133, %192
  %286 = or i32 %151, %182
  %287 = shl i32 %236, 1
  %288 = and i32 %132, %13
  %289 = or i32 %152, %4
  %290 = and i32 %227, %200
  %291 = or i32 %157, %225
  %292 = and i32 %202, %200
  %293 = or i32 %174, %292
  %294 = and i32 %192, %5
  %295 = xor i32 %155, -1
  %296 = or i32 %167, %295
  %297 = or i32 %180, %4
  %298 = or i32 %140, %138
  %299 = xor i32 %180, %4
  %300 = shl i32 %299, 1
  %301 = and i32 %140, %10
  %302 = or i32 %225, %158
  %303 = xor i32 %151, %5
  %304 = or i32 %182, %161
  %305 = xor i32 %145, %3
  %306 = or i32 %133, %151
  %307 = or i32 %167, %161
  %308 = and i32 %221, %158
  %309 = and i32 %13, %10
  %310 = or i32 %167, %157
  %311 = or i32 %295, %4
  %312 = or i32 %133, %9
  %313 = shl i32 %248, 1
  %314 = add i32 %133, 1
  %315 = and i32 %248, %138
  %316 = and i32 %153, %4
  %317 = or i32 %152, %200
  %318 = and i32 %139, %5
  %319 = and i32 %132, %182
  %320 = or i32 %140, %161
  %321 = and i32 %13, %192
  %322 = or i32 %184, %138
  %323 = and i32 %133, %157
  %324 = or i32 %9, %295
  %325 = add i32 %152, 1
  %326 = or i32 %133, %158
  %327 = xor i32 %221, %9
  %328 = or i32 %225, %3
  %329 = or i32 %167, %3
  %330 = xor i32 %186, %212
  %331 = or i32 %9, %180
  %332 = and i32 %295, %200
  %333 = and i32 %147, %200
  %334 = and i32 %295, %4
  %335 = and i32 %147, %4
  %336 = mul i32 %335, 21
  %337 = and i32 %180, %200
  %338 = and i32 %180, %4
  %339 = mul i32 %338, 27
  %340 = add i32 %111, %63
  %341 = add i32 %340, %69
  %342 = add i32 %341, %130
  %343 = add i32 %342, %119
  %344 = add i32 %343, %107
  %345 = add i32 %344, %95
  %346 = add i32 %345, %62
  %347 = add i32 %346, %31
  %348 = sub i32 %347, %22
  %349 = add i32 %348, %321
  %350 = add i32 %349, %225
  %351 = add i32 %350, %147
  %352 = add i32 %351, %164
  %353 = add i32 %352, %331
  %354 = add i32 %353, %322
  %355 = add i32 %354, %289
  %356 = add i32 %355, %278
  %357 = add i32 %356, %273
  %358 = add i32 %357, %254
  %359 = add i32 %358, %251
  %360 = add i32 %359, %175
  %361 = add i32 %360, %226
  %362 = add i32 %361, %207
  %363 = add i32 %362, %176
  %364 = add i32 %363, %187
  %365 = add i32 %364, %330
  %366 = shl i32 %365, 1
  %367 = sub i32 %128, %108
  %368 = add i32 %367, %325
  %369 = add i32 %368, %247
  %370 = add i32 %369, %260
  %371 = add i32 %370, %246
  %372 = mul i32 %371, 3
  %373 = sub i32 %192, %88
  %374 = sub i32 %373, %135
  %375 = add i32 %374, %257
  %376 = add i32 %375, %230
  %377 = sub i32 %376, %242
  %378 = mul i32 %377, 5
  %379 = or i32 %334, %333
  %380 = shl i32 %379, 3
  %381 = add i32 %320, %134
  %382 = shl i32 %381, 2
  %383 = add i32 %337, %74
  %384 = mul i32 %383, 12
  %385 = add i32 %332, %122
  %386 = mul i32 %385, 7
  %387 = xor i32 %96, -1
  %388 = add i32 %387, %1
  %389 = add i32 %388, %48
  %390 = add i32 %389, %61
  %391 = sub i32 %390, %51
  %392 = sub i32 %391, %35
  %393 = add i32 %392, %73
  %394 = sub i32 %393, %58
  %395 = add i32 %394, %90
  %396 = sub i32 %395, %114
  %397 = add i32 %396, %224
  %398 = add i32 %397, %3
  %399 = add i32 %398, %33
  %400 = sub i32 %399, %37
  %401 = sub i32 %400, %40
  %402 = add i32 %401, %43
  %403 = sub i32 %402, %47
  %404 = sub i32 %403, %50
  %405 = sub i32 %404, %52
  %406 = sub i32 %405, %57
  %407 = add i32 %406, %60
  %408 = sub i32 %407, %65
  %409 = add i32 %408, %67
  %410 = sub i32 %409, %70
  %411 = add i32 %410, %72
  %412 = add i32 %411, %77
  %413 = sub i32 %412, %79
  %414 = add i32 %413, %80
  %415 = add i32 %414, %81
  %416 = sub i32 %415, %82
  %417 = sub i32 %416, %85
  %418 = add i32 %417, %86
  %419 = sub i32 %418, %89
  %420 = sub i32 %419, %94
  %421 = add i32 %420, %100
  %422 = sub i32 %421, %105
  %423 = sub i32 %422, %109
  %424 = sub i32 %423, %110
  %425 = add i32 %424, %117
  %426 = sub i32 %425, %118
  %427 = sub i32 %426, %4
  %428 = add i32 %427, %200
  %429 = add i32 %428, %29
  %430 = sub i32 %429, %42
  %431 = sub i32 %430, %56
  %432 = sub i32 %431, %76
  %433 = sub i32 %432, %84
  %434 = sub i32 %433, %93
  %435 = sub i32 %434, %98
  %436 = sub i32 %435, %102
  %437 = sub i32 %436, %104
  %438 = add i32 %437, %113
  %439 = sub i32 %438, %116
  %440 = add i32 %439, %121
  %441 = add i32 %440, %124
  %442 = add i32 %441, %126
  %443 = add i32 %442, %129
  %444 = add i32 %443, %149
  %445 = add i32 %444, %161
  %446 = add i32 %445, %223
  %447 = sub i32 %446, %157
  %448 = add i32 %447, %5
  %449 = add i32 %448, %158
  %450 = sub i32 %449, %9
  %451 = sub i32 %450, %155
  %452 = add i32 %451, %142
  %453 = add i32 %452, %181
  %454 = add i32 %453, %184
  %455 = sub i32 %454, %199
  %456 = add i32 %455, %152
  %457 = add i32 %456, %211
  %458 = add i32 %457, %218
  %459 = add i32 %458, %235
  %460 = sub i32 %459, %145
  %461 = sub i32 %460, %243
  %462 = add i32 %461, %14
  %463 = sub i32 %462, %255
  %464 = add i32 %463, %272
  %465 = add i32 %464, %288
  %466 = add i32 %465, %294
  %467 = add i32 %466, %147
  %468 = add i32 %467, %303
  %469 = sub i32 %468, %309
  %470 = add i32 %469, %314
  %471 = sub i32 %470, %318
  %472 = add i32 %471, %131
  %473 = add i32 %472, %136
  %474 = add i32 %473, %137
  %475 = add i32 %474, %141
  %476 = add i32 %475, %143
  %477 = sub i32 %476, %144
  %478 = add i32 %477, %146
  %479 = add i32 %478, %150
  %480 = sub i32 %479, %154
  %481 = sub i32 %480, %156
  %482 = add i32 %481, %159
  %483 = sub i32 %482, %160
  %484 = sub i32 %483, %163
  %485 = add i32 %484, %169
  %486 = sub i32 %485, %170
  %487 = sub i32 %486, %177
  %488 = sub i32 %487, %183
  %489 = sub i32 %488, %185
  %490 = sub i32 %489, %190
  %491 = add i32 %490, %191
  %492 = sub i32 %491, %193
  %493 = sub i32 %492, %196
  %494 = add i32 %493, %210
  %495 = add i32 %494, %219
  %496 = add i32 %495, %220
  %497 = add i32 %496, %222
  %498 = sub i32 %497, %228
  %499 = sub i32 %498, %229
  %500 = sub i32 %499, %232
  %501 = sub i32 %500, %239
  %502 = sub i32 %501, %240
  %503 = sub i32 %502, %241
  %504 = add i32 %503, %249
  %505 = sub i32 %504, %250
  %506 = add i32 %505, %252
  %507 = sub i32 %506, %253
  %508 = add i32 %507, %256
  %509 = sub i32 %508, %259
  %510 = sub i32 %509, %178
  %511 = add i32 %510, %261
  %512 = add i32 %511, %262
  %513 = sub i32 %512, %263
  %514 = sub i32 %513, %264
  %515 = add i32 %514, %265
  %516 = sub i32 %515, %266
  %517 = add i32 %516, %267
  %518 = sub i32 %517, %274
  %519 = sub i32 %518, %276
  %520 = sub i32 %519, %283
  %521 = sub i32 %520, %284
  %522 = sub i32 %521, %285
  %523 = sub i32 %522, %286
  %524 = add i32 %523, %290
  %525 = sub i32 %524, %291
  %526 = sub i32 %525, %296
  %527 = sub i32 %526, %297
  %528 = sub i32 %527, %298
  %529 = add i32 %528, %301
  %530 = sub i32 %529, %302
  %531 = sub i32 %530, %304
  %532 = add i32 %531, %305
  %533 = add i32 %532, %306
  %534 = sub i32 %533, %307
  %535 = sub i32 %534, %308
  %536 = sub i32 %535, %310
  %537 = sub i32 %536, %165
  %538 = add i32 %537, %311
  %539 = sub i32 %538, %312
  %540 = sub i32 %539, %313
  %541 = add i32 %540, %315
  %542 = sub i32 %541, %316
  %543 = add i32 %542, %317
  %544 = add i32 %543, %319
  %545 = add i32 %544, %323
  %546 = add i32 %545, %324
  %547 = sub i32 %546, %326
  %548 = sub i32 %547, %327
  %549 = sub i32 %548, %328
  %550 = sub i32 %549, %329
  %551 = add i32 %550, %166
  %552 = sub i32 %551, %172
  %553 = add i32 %552, %179
  %554 = sub i32 %553, %189
  %555 = sub i32 %554, %195
  %556 = sub i32 %555, %198
  %557 = sub i32 %556, %209
  %558 = sub i32 %557, %215
  %559 = sub i32 %558, %217
  %560 = sub i32 %559, %231
  %561 = sub i32 %560, %234
  %562 = sub i32 %561, %238
  %563 = add i32 %562, %245
  %564 = sub i32 %563, %269
  %565 = add i32 %564, %271
  %566 = add i32 %565, %275
  %567 = add i32 %566, %277
  %568 = sub i32 %567, %280
  %569 = sub i32 %568, %282
  %570 = sub i32 %569, %287
  %571 = sub i32 %570, %293
  %572 = sub i32 %571, %300
  %573 = add i32 %572, %336
  %574 = add i32 %573, %339
  %575 = sub i32 %574, %214
  %576 = add i32 %575, %380
  %577 = add i32 %576, %382
  %578 = add i32 %577, %384
  %579 = add i32 %578, %386
  %580 = sub i32 %579, %206
  %581 = add i32 %580, %372
  %582 = add i32 %581, %378
  %583 = add i32 %582, %366
  %584 = icmp eq i32 %16, %583
  %585 = select i1 %584, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %586 = tail call i32 @puts(i8* nonnull dereferenceable(1) %585)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
