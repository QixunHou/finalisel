; ModuleID = '../.././c_source_file/1202_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1202_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = add i32 %3, 1
  %7 = xor i32 %4, %3
  %8 = or i32 %2, %0
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = sub i32 %6, %11
  %13 = add i32 %12, %7
  %14 = xor i32 %4, -1
  %15 = or i32 %14, %3
  %16 = or i32 %4, %3
  %17 = and i32 %4, %3
  %18 = shl i32 %17, 1
  %19 = xor i32 %18, -2
  %20 = and i32 %14, %3
  %21 = shl i32 %20, 1
  %22 = xor i32 %21, -2
  %23 = shl i32 %16, 1
  %24 = xor i32 %23, -2
  %25 = add i32 %15, 1
  %26 = and i32 %2, %0
  %27 = xor i32 %26, -1
  %28 = and i32 %9, %27
  %29 = or i32 %1, %0
  %30 = xor i32 %29, -1
  %31 = xor i32 %2, %1
  %32 = or i32 %31, %30
  %33 = xor i32 %2, %0
  %34 = and i32 %33, %10
  %35 = shl i32 %34, 1
  %36 = xor i32 %2, -1
  %37 = and i32 %36, %0
  %38 = xor i32 %37, -1
  %39 = and i32 %38, %10
  %40 = and i32 %2, %1
  %41 = and i32 %40, %0
  %42 = xor i32 %0, -1
  %43 = or i32 %2, %1
  %44 = and i32 %43, %42
  %45 = or i32 %41, %44
  %46 = shl i32 %45, 1
  %47 = or i32 %33, %1
  %48 = xor i32 %38, %1
  %49 = xor i32 %33, -1
  %50 = and i32 %49, %10
  %51 = and i32 %8, %1
  %52 = and i32 %1, %0
  %53 = or i32 %36, %1
  %54 = xor i32 %53, -1
  %55 = or i32 %52, %54
  %56 = xor i32 %1, -1
  %57 = or i32 %56, %0
  %58 = xor i32 %57, -1
  %59 = or i32 %26, %58
  %60 = xor i32 %31, %0
  %61 = xor i32 %60, -1
  %62 = or i32 %41, %61
  %63 = shl i32 %62, 1
  %64 = or i32 %33, %56
  %65 = or i32 %52, %36
  %66 = and i32 %49, %1
  %67 = shl i32 %66, 1
  %68 = or i32 %31, %58
  %69 = xor i32 %43, -1
  %70 = or i32 %69, %0
  %71 = xor i32 %52, -1
  %72 = and i32 %36, %71
  %73 = shl i32 %72, 1
  %74 = or i32 %9, %36
  %75 = shl i32 %74, 1
  %76 = or i32 %31, %42
  %77 = and i32 %56, %2
  %78 = and i32 %77, %42
  %79 = or i32 %56, %2
  %80 = and i32 %79, %0
  %81 = or i32 %78, %80
  %82 = xor i32 %37, %53
  %83 = xor i32 %43, %0
  %84 = or i32 %41, %83
  %85 = xor i32 %53, %0
  %86 = xor i32 %31, -1
  %87 = and i32 %86, %71
  %88 = and i32 %36, %1
  %89 = or i32 %88, %0
  %90 = shl i32 %89, 1
  %91 = or i32 %54, %42
  %92 = and i32 %56, %0
  %93 = or i32 %92, %86
  %94 = and i32 %49, %71
  %95 = and i32 %77, %0
  %96 = or i32 %31, %0
  %97 = xor i32 %96, -1
  %98 = or i32 %95, %97
  %99 = and i32 %57, %86
  %100 = xor i32 %92, -1
  %101 = and i32 %31, %100
  %102 = and i32 %31, %0
  %103 = or i32 %33, %58
  %104 = and i32 %31, %71
  %105 = or i32 %58, %2
  %106 = and i32 %31, %29
  %107 = xor i32 %57, %2
  %108 = or i32 %26, %9
  %109 = and i32 %31, %42
  %110 = or i32 %41, %109
  %111 = shl i32 %110, 2
  %112 = xor i32 %26, %29
  %113 = shl i32 %112, 1
  %114 = xor i32 %88, -1
  %115 = and i32 %114, %42
  %116 = and i32 %43, %0
  %117 = or i32 %54, %0
  %118 = or i32 %33, %9
  %119 = shl i32 %118, 1
  %120 = or i32 %36, %0
  %121 = and i32 %120, %56
  %122 = and i32 %120, %9
  %123 = or i32 %95, %60
  %124 = or i32 %10, %2
  %125 = and i32 %33, %1
  %126 = or i32 %43, %0
  %127 = and i32 %120, %1
  %128 = or i32 %37, %54
  %129 = and i32 %86, %0
  %130 = and i32 %40, %42
  %131 = or i32 %130, %102
  %132 = or i32 %69, %42
  %133 = xor i32 %52, %2
  %134 = and i32 %71, %2
  %135 = or i32 %30, %2
  %136 = xor i32 %8, -1
  %137 = or i32 %136, %10
  %138 = or i32 %49, %10
  %139 = or i32 %52, %69
  %140 = or i32 %33, %52
  %141 = xor i32 %43, %52
  %142 = or i32 %86, %58
  %143 = xor i32 %120, -1
  %144 = or i32 %143, %56
  %145 = or i32 %31, %92
  %146 = shl i32 %145, 1
  %147 = xor i32 %40, -1
  %148 = or i32 %147, %42
  %149 = or i32 %52, %2
  %150 = or i32 %26, %56
  %151 = and i32 %36, %10
  %152 = xor i32 %95, %96
  %153 = and i32 %36, %100
  %154 = or i32 %49, %1
  %155 = or i32 %136, %1
  %156 = and i32 %9, %36
  %157 = and i32 %79, %42
  %158 = or i32 %95, %157
  %159 = shl i32 %158, 2
  %160 = or i32 %26, %1
  %161 = or i32 %33, %10
  %162 = shl i32 %29, 1
  %163 = and i32 %29, %2
  %164 = or i32 %52, %143
  %165 = xor i32 %26, %114
  %166 = or i32 %52, %136
  %167 = or i32 %9, %49
  %168 = add i32 %40, 1
  %169 = and i32 %86, %100
  %170 = shl i32 %169, 2
  %171 = xor i32 %58, %2
  %172 = shl i32 %171, 1
  %173 = and i32 %33, %29
  %174 = and i32 %33, %100
  %175 = and i32 %29, %49
  %176 = and i32 %53, %42
  %177 = xor i32 %78, %76
  %178 = or i32 %52, %86
  %179 = or i32 %26, %69
  %180 = xor i32 %157, -1
  %181 = xor i32 %95, %180
  %182 = xor i32 %92, %2
  %183 = and i32 %8, %56
  %184 = or i32 %52, %49
  %185 = xor i32 %41, %60
  %186 = shl i32 %185, 1
  %187 = and i32 %8, %9
  %188 = or i32 %143, %10
  %189 = or i32 %49, %58
  %190 = or i32 %147, %0
  %191 = or i32 %130, %116
  %192 = or i32 %92, %2
  %193 = or i32 %26, %30
  %194 = xor i32 %40, %0
  %195 = xor i32 %71, %2
  %196 = shl i32 %195, 1
  %197 = xor i32 %109, -1
  %198 = xor i32 %41, %197
  %199 = and i32 %57, %2
  %200 = and i32 %27, %56
  %201 = xor i32 %120, %52
  %202 = and i32 %33, %56
  %203 = and i32 %53, %0
  %204 = or i32 %36, %30
  %205 = xor i32 %92, %114
  %206 = add i32 %57, 1
  %207 = xor i32 %143, %1
  %208 = shl i32 %57, 1
  %209 = and i32 %120, %10
  %210 = shl i32 %120, 1
  %211 = or i32 %114, %0
  %212 = or i32 %40, %42
  %213 = xor i32 %147, %0
  %214 = xor i32 %29, %2
  %215 = shl i32 %214, 1
  %216 = or i32 %9, %143
  %217 = or i32 %33, %92
  %218 = xor i32 %54, %0
  %219 = or i32 %86, %30
  %220 = shl i32 %219, 1
  %221 = or i32 %136, %56
  %222 = and i32 %147, %0
  %223 = or i32 %37, %56
  %224 = and i32 %9, %49
  %225 = shl i32 %224, 1
  %226 = shl i32 %40, 1
  %227 = xor i32 %88, %0
  %228 = or i32 %49, %30
  %229 = xor i32 %95, %61
  %230 = xor i32 %69, %0
  %231 = and i32 %38, %1
  %232 = shl i32 %231, 1
  %233 = xor i32 %53, %52
  %234 = or i32 %33, %30
  %235 = shl i32 %234, 1
  %236 = xor i32 %92, %147
  %237 = shl i32 %236, 1
  %238 = xor i32 %37, %147
  %239 = xor i32 %79, %0
  %240 = or i32 %95, %239
  %241 = and i32 %27, %10
  %242 = or i32 %40, %0
  %243 = xor i32 %27, %1
  %244 = or i32 %26, %88
  %245 = xor i32 %8, %52
  %246 = add i32 %8, 1
  %247 = or i32 %88, %92
  %248 = or i32 %143, %1
  %249 = xor i32 %120, %1
  %250 = xor i32 %76, -1
  %251 = or i32 %78, %250
  %252 = add i32 %31, 1
  %253 = and i32 %86, %42
  %254 = and i32 %31, %57
  %255 = or i32 %40, %92
  %256 = xor i32 %30, %2
  %257 = xor i32 %116, -1
  %258 = xor i32 %130, %257
  %259 = and i32 %57, %49
  %260 = and i32 %69, %42
  %261 = shl i32 %260, 1
  %262 = and i32 %88, %42
  %263 = mul i32 %262, 18
  %264 = and i32 %69, %0
  %265 = and i32 %88, %0
  %266 = mul i32 %265, -9
  %267 = and i32 %54, %42
  %268 = mul i32 %267, -12
  %269 = and i32 %54, %0
  %270 = shl i32 %41, 2
  %271 = add i32 %92, %42
  %272 = add i32 %271, %143
  %273 = add i32 %272, %253
  %274 = add i32 %273, %244
  %275 = add i32 %274, %241
  %276 = add i32 %275, %230
  %277 = add i32 %276, %212
  %278 = add i32 %277, %175
  %279 = add i32 %278, %60
  %280 = add i32 %279, %167
  %281 = add i32 %280, %148
  %282 = add i32 %281, %121
  %283 = add i32 %282, %117
  %284 = add i32 %283, %106
  %285 = add i32 %284, %101
  %286 = add i32 %285, %76
  %287 = add i32 %286, %59
  %288 = add i32 %287, %131
  %289 = shl i32 %288, 1
  %290 = sub i32 %206, %130
  %291 = sub i32 %290, %184
  %292 = add i32 %291, %144
  %293 = sub i32 %292, %123
  %294 = add i32 %293, %240
  %295 = add i32 %294, %25
  %296 = mul i32 %295, 3
  %297 = add i32 %207, %70
  %298 = sub i32 %297, %28
  %299 = mul i32 %298, 5
  %300 = sub i32 %264, %269
  %301 = mul i32 %300, 6
  %302 = add i32 %0, 2
  %303 = sub i32 %302, %1
  %304 = sub i32 %303, %2
  %305 = add i32 %304, %36
  %306 = add i32 %305, %100
  %307 = add i32 %306, %52
  %308 = add i32 %307, %3
  %309 = sub i32 %308, %65
  %310 = sub i32 %309, %105
  %311 = add i32 %310, %107
  %312 = add i32 %311, %124
  %313 = add i32 %312, %8
  %314 = add i32 %313, %53
  %315 = add i32 %314, %133
  %316 = add i32 %315, %134
  %317 = sub i32 %316, %135
  %318 = add i32 %317, %149
  %319 = sub i32 %318, %151
  %320 = sub i32 %319, %153
  %321 = add i32 %320, %114
  %322 = add i32 %321, %43
  %323 = sub i32 %322, %156
  %324 = sub i32 %323, %162
  %325 = add i32 %324, %163
  %326 = add i32 %325, %168
  %327 = sub i32 %326, %182
  %328 = sub i32 %327, %192
  %329 = sub i32 %328, %199
  %330 = sub i32 %329, %204
  %331 = sub i32 %330, %208
  %332 = sub i32 %331, %37
  %333 = add i32 %332, %38
  %334 = sub i32 %333, %26
  %335 = add i32 %334, %246
  %336 = add i32 %335, %252
  %337 = add i32 %336, %256
  %338 = add i32 %337, %4
  %339 = sub i32 %338, %32
  %340 = add i32 %339, %39
  %341 = add i32 %340, %47
  %342 = sub i32 %341, %48
  %343 = add i32 %342, %50
  %344 = add i32 %343, %51
  %345 = sub i32 %344, %55
  %346 = add i32 %345, %64
  %347 = add i32 %346, %68
  %348 = sub i32 %347, %73
  %349 = sub i32 %348, %75
  %350 = add i32 %349, %82
  %351 = add i32 %350, %85
  %352 = sub i32 %351, %87
  %353 = sub i32 %352, %91
  %354 = sub i32 %353, %93
  %355 = sub i32 %354, %94
  %356 = add i32 %355, %99
  %357 = sub i32 %356, %102
  %358 = sub i32 %357, %103
  %359 = add i32 %358, %104
  %360 = sub i32 %359, %108
  %361 = sub i32 %360, %115
  %362 = sub i32 %361, %116
  %363 = add i32 %362, %122
  %364 = add i32 %363, %125
  %365 = add i32 %364, %126
  %366 = sub i32 %365, %127
  %367 = add i32 %366, %128
  %368 = sub i32 %367, %129
  %369 = sub i32 %368, %132
  %370 = sub i32 %369, %137
  %371 = add i32 %370, %138
  %372 = sub i32 %371, %139
  %373 = add i32 %372, %140
  %374 = add i32 %373, %141
  %375 = add i32 %374, %142
  %376 = add i32 %375, %150
  %377 = sub i32 %376, %154
  %378 = sub i32 %377, %155
  %379 = sub i32 %378, %160
  %380 = add i32 %379, %161
  %381 = sub i32 %380, %164
  %382 = add i32 %381, %165
  %383 = sub i32 %382, %166
  %384 = sub i32 %383, %172
  %385 = sub i32 %384, %173
  %386 = sub i32 %385, %174
  %387 = add i32 %386, %176
  %388 = add i32 %387, %178
  %389 = add i32 %388, %179
  %390 = sub i32 %389, %183
  %391 = add i32 %390, %44
  %392 = sub i32 %391, %187
  %393 = sub i32 %392, %188
  %394 = sub i32 %393, %189
  %395 = add i32 %394, %190
  %396 = sub i32 %395, %193
  %397 = add i32 %396, %194
  %398 = sub i32 %397, %196
  %399 = sub i32 %398, %200
  %400 = sub i32 %399, %201
  %401 = sub i32 %400, %202
  %402 = add i32 %401, %203
  %403 = add i32 %402, %205
  %404 = add i32 %403, %209
  %405 = sub i32 %404, %210
  %406 = add i32 %405, %211
  %407 = add i32 %406, %213
  %408 = sub i32 %407, %215
  %409 = add i32 %408, %216
  %410 = add i32 %409, %217
  %411 = add i32 %410, %218
  %412 = add i32 %411, %221
  %413 = add i32 %412, %222
  %414 = sub i32 %413, %223
  %415 = sub i32 %414, %226
  %416 = sub i32 %415, %227
  %417 = sub i32 %416, %228
  %418 = sub i32 %417, %96
  %419 = add i32 %418, %233
  %420 = sub i32 %419, %238
  %421 = add i32 %420, %242
  %422 = add i32 %421, %243
  %423 = add i32 %422, %245
  %424 = add i32 %423, %247
  %425 = add i32 %424, %248
  %426 = sub i32 %425, %249
  %427 = sub i32 %426, %254
  %428 = add i32 %427, %255
  %429 = add i32 %428, %259
  %430 = sub i32 %429, %15
  %431 = sub i32 %430, %16
  %432 = add i32 %431, %7
  %433 = add i32 %432, %20
  %434 = sub i32 %433, %35
  %435 = sub i32 %434, %67
  %436 = sub i32 %435, %81
  %437 = add i32 %436, %84
  %438 = sub i32 %437, %90
  %439 = sub i32 %438, %98
  %440 = sub i32 %439, %113
  %441 = sub i32 %440, %119
  %442 = sub i32 %441, %146
  %443 = add i32 %442, %152
  %444 = sub i32 %443, %170
  %445 = sub i32 %444, %177
  %446 = sub i32 %445, %181
  %447 = sub i32 %446, %191
  %448 = add i32 %447, %198
  %449 = sub i32 %448, %220
  %450 = sub i32 %449, %225
  %451 = add i32 %450, %229
  %452 = sub i32 %451, %232
  %453 = sub i32 %452, %235
  %454 = sub i32 %453, %237
  %455 = sub i32 %454, %251
  %456 = add i32 %455, %258
  %457 = sub i32 %456, %261
  %458 = add i32 %457, %263
  %459 = add i32 %458, %266
  %460 = add i32 %459, %268
  %461 = sub i32 %460, %270
  %462 = sub i32 %461, %46
  %463 = sub i32 %462, %63
  %464 = add i32 %463, %111
  %465 = sub i32 %464, %159
  %466 = sub i32 %465, %186
  %467 = add i32 %466, %301
  %468 = add i32 %467, %19
  %469 = add i32 %468, %22
  %470 = sub i32 %469, %24
  %471 = add i32 %470, %299
  %472 = add i32 %471, %296
  %473 = add i32 %472, %289
  %474 = icmp eq i32 %13, %473
  %475 = select i1 %474, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %476 = tail call i32 @puts(i8* nonnull dereferenceable(1) %475)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
