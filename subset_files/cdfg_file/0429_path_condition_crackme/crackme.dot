digraph "DFG for'crackme' function" {
	Node0x205c930[shape=record, label="  %5 = and i32 %2, %1"];
	Node0x205cfb0[shape=record, label="  %6 = shl i32 %5, 1"];
	Node0x205d050[shape=record, label="  %7 = xor i32 %6, -2"];
	Node0x205d0c0[shape=record, label="  %8 = and i32 %3, %0"];
	Node0x205d160[shape=record, label="  %9 = xor i32 %8, -1"];
	Node0x205d1d0[shape=record, label="  %10 = add i32 %7, %9"];
	Node0x205d240[shape=record, label="  %11 = or i32 %2, %1"];
	Node0x205d2b0[shape=record, label="  %12 = shl i32 %11, 1"];
	Node0x205d320[shape=record, label="  %13 = xor i32 %12, -2"];
	Node0x205d390[shape=record, label="  %14 = xor i32 %0, -1"];
	Node0x205d400[shape=record, label="  %15 = or i32 %14, %3"];
	Node0x205d470[shape=record, label="  %16 = and i32 %14, %3"];
	Node0x205d4e0[shape=record, label="  %17 = xor i32 %16, -1"];
	Node0x205d550[shape=record, label="  %18 = or i32 %3, %0"];
	Node0x205d5c0[shape=record, label="  %19 = shl i32 %15, 1"];
	Node0x205d630[shape=record, label="  %20 = xor i32 %19, -2"];
	Node0x205d6a0[shape=record, label="  %21 = sub i32 %16, %5"];
	Node0x205d740[shape=record, label="  %22 = mul i32 %21, 3"];
	Node0x205d7b0[shape=record, label="  %23 = add i32 %1, 1"];
	Node0x205d820[shape=record, label="  %24 = add i32 %23, %2"];
	Node0x205d890[shape=record, label="  %25 = add i32 %24, %11"];
	Node0x205d900[shape=record, label="  %26 = sub i32 %25, %3"];
	Node0x205d970[shape=record, label="  %27 = add i32 %26, %15"];
	Node0x205d9e0[shape=record, label="  %28 = add i32 %27, %17"];
	Node0x205da50[shape=record, label="  %29 = sub i32 %28, %18"];
	Node0x205dac0[shape=record, label="  %30 = add i32 %29, %8"];
	Node0x205db30[shape=record, label="  %31 = add i32 %30, %13"];
	Node0x205dba0[shape=record, label="  %32 = add i32 %31, %20"];
	Node0x205de20[shape=record, label="  %33 = add i32 %32, %22"];
	Node0x205de90[shape=record, label="  %34 = icmp eq i32 %10, %33"];
	Node0x1ffd268[shape=record, label="  %35 = select i1 %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x205e330[shape=record, label="  %36 = tail call i32 @puts(i8* nonnull dereferenceable(1) %35)"];
	Node0x205e380[shape=record, label="  ret void"];
	Node0x205c930 -> Node0x205cfb0;
	Node0x205cfb0 -> Node0x205d050;
	Node0x205d050 -> Node0x205d0c0;
	Node0x205d0c0 -> Node0x205d160;
	Node0x205d160 -> Node0x205d1d0;
	Node0x205d1d0 -> Node0x205d240;
	Node0x205d240 -> Node0x205d2b0;
	Node0x205d2b0 -> Node0x205d320;
	Node0x205d320 -> Node0x205d390;
	Node0x205d390 -> Node0x205d400;
	Node0x205d400 -> Node0x205d470;
	Node0x205d470 -> Node0x205d4e0;
	Node0x205d4e0 -> Node0x205d550;
	Node0x205d550 -> Node0x205d5c0;
	Node0x205d5c0 -> Node0x205d630;
	Node0x205d630 -> Node0x205d6a0;
	Node0x205d6a0 -> Node0x205d740;
	Node0x205d740 -> Node0x205d7b0;
	Node0x205d7b0 -> Node0x205d820;
	Node0x205d820 -> Node0x205d890;
	Node0x205d890 -> Node0x205d900;
	Node0x205d900 -> Node0x205d970;
	Node0x205d970 -> Node0x205d9e0;
	Node0x205d9e0 -> Node0x205da50;
	Node0x205da50 -> Node0x205dac0;
	Node0x205dac0 -> Node0x205db30;
	Node0x205db30 -> Node0x205dba0;
	Node0x205dba0 -> Node0x205de20;
	Node0x205de20 -> Node0x205de90;
	Node0x205de90 -> Node0x1ffd268;
	Node0x1ffd268 -> Node0x205e330;
	Node0x205e330 -> Node0x205e380;
edge [color=red]
	Node0x205c930 -> Node0x205cfb0;
	Node0x205cfb0 -> Node0x205d050;
	Node0x205d0c0 -> Node0x205d160;
	Node0x205d050 -> Node0x205d1d0;
	Node0x205d160 -> Node0x205d1d0;
	Node0x205d240 -> Node0x205d2b0;
	Node0x205d2b0 -> Node0x205d320;
	Node0x205d390 -> Node0x205d400;
	Node0x205d390 -> Node0x205d470;
	Node0x205d470 -> Node0x205d4e0;
	Node0x205d400 -> Node0x205d5c0;
	Node0x205d5c0 -> Node0x205d630;
	Node0x205d470 -> Node0x205d6a0;
	Node0x205c930 -> Node0x205d6a0;
	Node0x205d6a0 -> Node0x205d740;
	Node0x205d7b0 -> Node0x205d820;
	Node0x205d820 -> Node0x205d890;
	Node0x205d240 -> Node0x205d890;
	Node0x205d890 -> Node0x205d900;
	Node0x205d900 -> Node0x205d970;
	Node0x205d400 -> Node0x205d970;
	Node0x205d970 -> Node0x205d9e0;
	Node0x205d4e0 -> Node0x205d9e0;
	Node0x205d9e0 -> Node0x205da50;
	Node0x205d550 -> Node0x205da50;
	Node0x205da50 -> Node0x205dac0;
	Node0x205d0c0 -> Node0x205dac0;
	Node0x205dac0 -> Node0x205db30;
	Node0x205d320 -> Node0x205db30;
	Node0x205db30 -> Node0x205dba0;
	Node0x205d630 -> Node0x205dba0;
	Node0x205dba0 -> Node0x205de20;
	Node0x205d740 -> Node0x205de20;
	Node0x205d1d0 -> Node0x205de90;
	Node0x205de20 -> Node0x205de90;
	Node0x205de90 -> Node0x1ffd268;
	Node0x1ffd268 -> Node0x205e330;
}
