; ModuleID = '../.././c_source_file/0534_path_condition_crackme.c'
source_filename = "../.././c_source_file/0534_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %0
  %8 = xor i32 %7, -1
  %9 = xor i32 %1, %0
  %10 = xor i32 %9, -1
  %11 = and i32 %8, %10
  %12 = xor i32 %1, -1
  %13 = and i32 %12, %2
  %14 = and i32 %13, %0
  %15 = xor i32 %0, -1
  %16 = or i32 %12, %2
  %17 = xor i32 %16, 2147483647
  %18 = or i32 %17, %0
  %19 = xor i32 %18, %14
  %20 = shl i32 %19, 1
  %21 = sub i32 %11, %20
  %22 = and i32 %5, %3
  %23 = xor i32 %22, -1
  %24 = or i32 %23, %4
  %25 = sub i32 %21, %24
  %26 = and i32 %22, %4
  %27 = xor i32 %4, -1
  %28 = xor i32 %5, %3
  %29 = and i32 %28, %27
  %30 = or i32 %26, %29
  %31 = sub i32 %25, %30
  %32 = xor i32 %2, -1
  %33 = or i32 %12, %0
  %34 = xor i32 %33, -1
  %35 = or i32 %32, %34
  %36 = xor i32 %2, %1
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %0
  %39 = or i32 %2, %0
  %40 = or i32 %32, %0
  %41 = and i32 %40, %12
  %42 = and i32 %2, %1
  %43 = and i32 %42, %0
  %44 = or i32 %2, %1
  %45 = and i32 %44, %15
  %46 = or i32 %43, %45
  %47 = or i32 %1, %0
  %48 = xor i32 %47, -1
  %49 = or i32 %36, %48
  %50 = xor i32 %2, %0
  %51 = or i32 %50, %48
  %52 = and i32 %12, %0
  %53 = xor i32 %52, %2
  %54 = xor i32 %44, -1
  %55 = or i32 %54, %0
  %56 = and i32 %50, %1
  %57 = shl i32 %56, 1
  %58 = xor i32 %42, %0
  %59 = shl i32 %58, 1
  %60 = and i32 %32, %0
  %61 = xor i32 %60, -1
  %62 = and i32 %32, %1
  %63 = xor i32 %62, -1
  %64 = xor i32 %52, %63
  %65 = and i32 %13, %15
  %66 = or i32 %36, %15
  %67 = xor i32 %65, %66
  %68 = xor i32 %52, -1
  %69 = and i32 %32, %68
  %70 = or i32 %36, %52
  %71 = and i32 %47, %32
  %72 = and i32 %1, %0
  %73 = xor i32 %44, %72
  %74 = xor i32 %42, -1
  %75 = or i32 %74, %0
  %76 = xor i32 %39, -1
  %77 = or i32 %76, %12
  %78 = xor i32 %7, %33
  %79 = mul i32 %78, 3
  %80 = xor i32 %79, -1
  %81 = or i32 %36, %0
  %82 = xor i32 %81, 2147483647
  %83 = or i32 %82, %14
  %84 = shl i32 %83, 1
  %85 = xor i32 %72, -1
  %86 = and i32 %32, %85
  %87 = shl i32 %86, 1
  %88 = and i32 %32, %10
  %89 = xor i32 %39, %72
  %90 = xor i32 %16, %0
  %91 = or i32 %14, %90
  %92 = xor i32 %7, %47
  %93 = and i32 %40, %1
  %94 = shl i32 %93, 1
  %95 = xor i32 %39, %1
  %96 = shl i32 %95, 1
  %97 = xor i32 %50, -1
  %98 = or i32 %97, %12
  %99 = or i32 %7, %9
  %100 = xor i32 %7, %44
  %101 = xor i32 %74, %0
  %102 = and i32 %47, %97
  %103 = and i32 %10, %2
  %104 = or i32 %62, %15
  %105 = and i32 %36, %0
  %106 = shl i32 %105, 1
  %107 = or i32 %9, %2
  %108 = or i32 %50, %52
  %109 = xor i32 %85, %2
  %110 = xor i32 %8, %1
  %111 = and i32 %68, %2
  %112 = or i32 %62, %52
  %113 = or i32 %36, %34
  %114 = or i32 %42, %15
  %115 = xor i32 %40, %72
  %116 = or i32 %52, %2
  %117 = shl i32 %116, 1
  %118 = xor i32 %60, %1
  %119 = and i32 %9, %32
  %120 = and i32 %50, %10
  %121 = xor i32 %40, -1
  %122 = or i32 %121, %10
  %123 = add i32 %0, 1
  %124 = xor i32 %7, %63
  %125 = and i32 %47, %37
  %126 = xor i32 %36, %15
  %127 = xor i32 %126, %14
  %128 = or i32 %50, %1
  %129 = and i32 %85, %2
  %130 = or i32 %74, %15
  %131 = and i32 %54, %15
  %132 = shl i32 %131, 2
  %133 = and i32 %62, %15
  %134 = and i32 %54, %0
  %135 = mul i32 %134, -13
  %136 = and i32 %62, %0
  %137 = shl i32 %65, 1
  %138 = and i32 %42, %15
  %139 = mul i32 %14, -6
  %140 = mul i32 %43, -9
  %141 = xor i32 %3, -1
  %142 = and i32 %141, %5
  %143 = and i32 %142, %4
  %144 = or i32 %141, %5
  %145 = xor i32 %144, 2147483647
  %146 = xor i32 %145, %4
  %147 = xor i32 %146, %143
  %148 = and i32 %4, %3
  %149 = xor i32 %28, -1
  %150 = or i32 %148, %149
  %151 = shl i32 %150, 1
  %152 = or i32 %5, %4
  %153 = xor i32 %152, %148
  %154 = shl i32 %153, 1
  %155 = xor i32 %5, %4
  %156 = xor i32 %155, -1
  %157 = or i32 %156, %3
  %158 = and i32 %28, %4
  %159 = or i32 %155, %141
  %160 = xor i32 %5, -1
  %161 = or i32 %160, %3
  %162 = xor i32 %161, %148
  %163 = or i32 %5, %3
  %164 = and i32 %163, %27
  %165 = shl i32 %164, 1
  %166 = or i32 %141, %4
  %167 = xor i32 %166, -1
  %168 = or i32 %156, %167
  %169 = and i32 %160, %4
  %170 = xor i32 %169, -1
  %171 = and i32 %170, %3
  %172 = xor i32 %149, %4
  %173 = or i32 %4, %3
  %174 = xor i32 %173, -1
  %175 = or i32 %156, %174
  %176 = and i32 %23, %4
  %177 = xor i32 %152, -1
  %178 = or i32 %148, %177
  %179 = xor i32 %23, %4
  %180 = or i32 %28, %4
  %181 = xor i32 %143, %180
  %182 = and i32 %5, %4
  %183 = xor i32 %163, -1
  %184 = or i32 %182, %183
  %185 = and i32 %141, %4
  %186 = or i32 %185, %160
  %187 = or i32 %182, %174
  %188 = xor i32 %148, -1
  %189 = xor i32 %188, %5
  %190 = or i32 %182, %3
  %191 = or i32 %22, %4
  %192 = xor i32 %182, -1
  %193 = xor i32 %192, %3
  %194 = and i32 %149, %188
  %195 = and i32 %173, %160
  %196 = and i32 %160, %3
  %197 = xor i32 %196, -1
  %198 = xor i32 %185, %197
  %199 = or i32 %28, %27
  %200 = or i32 %197, %27
  %201 = and i32 %22, %27
  %202 = or i32 %201, %158
  %203 = or i32 %28, %148
  %204 = and i32 %28, %166
  %205 = shl i32 %197, 1
  %206 = or i32 %160, %4
  %207 = xor i32 %206, %148
  %208 = xor i32 %206, %3
  %209 = xor i32 %163, %4
  %210 = or i32 %169, %3
  %211 = xor i32 %4, %3
  %212 = or i32 %211, %160
  %213 = xor i32 %161, -1
  %214 = xor i32 %213, %4
  %215 = and i32 %192, %3
  %216 = and i32 %142, %27
  %217 = and i32 %144, %4
  %218 = or i32 %216, %217
  %219 = xor i32 %182, %173
  %220 = or i32 %169, %211
  %221 = xor i32 %206, -1
  %222 = or i32 %211, %221
  %223 = xor i32 %170, %3
  %224 = or i32 %161, %27
  %225 = or i32 %148, %213
  %226 = xor i32 %211, -1
  %227 = and i32 %152, %226
  %228 = or i32 %169, %213
  %229 = and i32 %173, %156
  %230 = or i32 %177, %141
  %231 = xor i32 %22, %4
  %232 = and i32 %23, %27
  %233 = shl i32 %232, 1
  %234 = or i32 %163, %4
  %235 = or i32 %145, %4
  %236 = xor i32 %235, %143
  %237 = shl i32 %236, 1
  %238 = and i32 %155, %166
  %239 = and i32 %188, %5
  %240 = or i32 %177, %226
  %241 = or i32 %185, %156
  %242 = xor i32 %182, %163
  %243 = shl i32 %242, 2
  %244 = or i32 %185, %149
  %245 = and i32 %206, %226
  %246 = shl i32 %245, 1
  %247 = and i32 %155, %173
  %248 = add i32 %28, 1
  %249 = or i32 %155, %148
  %250 = or i32 %167, %5
  %251 = or i32 %26, %209
  %252 = or i32 %148, %183
  %253 = xor i32 %161, %4
  %254 = or i32 %28, %185
  %255 = or i32 %22, %27
  %256 = add i32 %3, 1
  %257 = xor i32 %152, %3
  %258 = xor i32 %28, %4
  %259 = or i32 %143, %258
  %260 = and i32 %149, %4
  %261 = xor i32 %169, %3
  %262 = add i32 %173, 1
  %263 = xor i32 %26, %258
  %264 = shl i32 %263, 2
  %265 = xor i32 %169, %161
  %266 = or i32 %196, %185
  %267 = and i32 %206, %141
  %268 = or i32 %148, %160
  %269 = or i32 %148, %221
  %270 = and i32 %192, %226
  %271 = or i32 %28, %174
  %272 = xor i32 %174, %5
  %273 = shl i32 %272, 1
  %274 = shl i32 %28, 1
  %275 = and i32 %211, %5
  %276 = and i32 %160, %188
  %277 = and i32 %160, %226
  %278 = and i32 %173, %149
  %279 = and i32 %156, %188
  %280 = or i32 %169, %226
  %281 = or i32 %156, %141
  %282 = xor i32 %148, %5
  %283 = or i32 %183, %4
  %284 = shl i32 %283, 1
  %285 = or i32 %177, %3
  %286 = xor i32 %221, %3
  %287 = or i32 %211, %177
  %288 = and i32 %155, %3
  %289 = or i32 %169, %22
  %290 = shl i32 %289, 1
  %291 = xor i32 %209, -1
  %292 = xor i32 %26, %291
  %293 = xor i32 %185, -1
  %294 = and i32 %156, %293
  %295 = and i32 %170, %226
  %296 = xor i32 %158, -1
  %297 = xor i32 %201, %296
  %298 = and i32 %163, %4
  %299 = xor i32 %298, 2147483647
  %300 = xor i32 %299, %201
  %301 = or i32 %155, %211
  %302 = or i32 %148, %5
  %303 = xor i32 %182, %3
  %304 = or i32 %182, %226
  %305 = shl i32 %304, 1
  %306 = or i32 %213, %4
  %307 = and i32 %166, %5
  %308 = and i32 %166, %160
  %309 = and i32 %155, %226
  %310 = shl i32 %309, 1
  %311 = xor i32 %217, -1
  %312 = xor i32 %216, %311
  %313 = or i32 %211, %5
  %314 = and i32 %155, %141
  %315 = and i32 %206, %3
  %316 = or i32 %155, %167
  %317 = or i32 %155, %174
  %318 = or i32 %26, %164
  %319 = or i32 %22, %185
  %320 = and i32 %197, %27
  %321 = xor i32 %166, %5
  %322 = or i32 %160, %167
  %323 = xor i32 %185, %5
  %324 = or i32 %155, %3
  %325 = and i32 %197, %4
  %326 = xor i32 %197, %4
  %327 = xor i32 %196, %4
  %328 = and i32 %156, %3
  %329 = and i32 %28, %188
  %330 = and i32 %160, %293
  %331 = or i32 %149, %4
  %332 = add i32 %169, 1
  %333 = and i32 %161, %4
  %334 = xor i32 %185, %23
  %335 = xor i32 %182, %166
  %336 = shl i32 %335, 1
  %337 = and i32 %192, %141
  %338 = and i32 %152, %3
  %339 = and i32 %183, %27
  %340 = and i32 %196, %27
  %341 = shl i32 %340, 1
  %342 = and i32 %183, %4
  %343 = and i32 %196, %4
  %344 = mul i32 %343, 14
  %345 = and i32 %213, %27
  %346 = and i32 %213, %4
  %347 = add i32 %112, %120
  %348 = add i32 %347, %101
  %349 = add i32 %348, %41
  %350 = add i32 %349, %166
  %351 = add i32 %350, %327
  %352 = add i32 %351, %324
  %353 = add i32 %352, %287
  %354 = add i32 %353, %281
  %355 = add i32 %354, %278
  %356 = add i32 %355, %271
  %357 = add i32 %356, %269
  %358 = add i32 %357, %249
  %359 = add i32 %358, %227
  %360 = add i32 %359, %220
  %361 = add i32 %360, %209
  %362 = add i32 %361, %208
  %363 = add i32 %362, %207
  %364 = add i32 %363, %218
  %365 = add i32 %364, %147
  %366 = add i32 %365, %300
  %367 = shl i32 %366, 1
  %368 = add i32 %110, %123
  %369 = sub i32 %368, %211
  %370 = add i32 %369, %307
  %371 = sub i32 %370, %326
  %372 = add i32 %371, %345
  %373 = add i32 %372, %295
  %374 = sub i32 %373, %223
  %375 = mul i32 %374, 3
  %376 = sub i32 %195, %133
  %377 = sub i32 %376, %184
  %378 = sub i32 %377, %333
  %379 = mul i32 %378, 5
  %380 = add i32 %201, %138
  %381 = mul i32 %380, 11
  %382 = sub i32 %339, %136
  %383 = mul i32 %382, 7
  %384 = add i32 %40, 1073741823
  %385 = add i32 %384, %75
  %386 = add i32 %385, %282
  %387 = add i32 %386, %342
  %388 = shl i32 %387, 2
  %389 = sub i32 %52, %1
  %390 = add i32 %389, %33
  %391 = sub i32 %390, %2
  %392 = sub i32 %391, %35
  %393 = sub i32 %392, %53
  %394 = add i32 %393, %61
  %395 = sub i32 %394, %69
  %396 = add i32 %395, %71
  %397 = sub i32 %396, %88
  %398 = sub i32 %397, %42
  %399 = add i32 %398, %97
  %400 = sub i32 %399, %103
  %401 = sub i32 %400, %107
  %402 = sub i32 %401, %109
  %403 = sub i32 %402, %111
  %404 = add i32 %403, %119
  %405 = sub i32 %404, %129
  %406 = add i32 %405, %3
  %407 = add i32 %406, %256
  %408 = sub i32 %407, %38
  %409 = sub i32 %408, %49
  %410 = add i32 %409, %51
  %411 = add i32 %410, %55
  %412 = add i32 %411, %64
  %413 = add i32 %412, %70
  %414 = add i32 %413, %73
  %415 = sub i32 %414, %77
  %416 = sub i32 %415, %87
  %417 = add i32 %416, %89
  %418 = add i32 %417, %92
  %419 = sub i32 %418, %98
  %420 = add i32 %419, %99
  %421 = add i32 %420, %100
  %422 = add i32 %421, %102
  %423 = sub i32 %422, %104
  %424 = add i32 %423, %108
  %425 = sub i32 %424, %113
  %426 = sub i32 %425, %114
  %427 = sub i32 %426, %115
  %428 = sub i32 %427, %117
  %429 = sub i32 %428, %118
  %430 = add i32 %429, %122
  %431 = add i32 %430, %124
  %432 = sub i32 %431, %125
  %433 = add i32 %432, %128
  %434 = add i32 %433, %130
  %435 = sub i32 %434, %46
  %436 = sub i32 %435, %57
  %437 = sub i32 %436, %59
  %438 = sub i32 %437, %67
  %439 = add i32 %438, %80
  %440 = sub i32 %439, %91
  %441 = sub i32 %440, %94
  %442 = sub i32 %441, %96
  %443 = sub i32 %442, %106
  %444 = add i32 %443, %127
  %445 = sub i32 %444, %132
  %446 = add i32 %445, %135
  %447 = sub i32 %446, %137
  %448 = add i32 %447, %139
  %449 = add i32 %448, %140
  %450 = add i32 %449, %148
  %451 = sub i32 %450, %185
  %452 = add i32 %451, %262
  %453 = add i32 %452, %5
  %454 = add i32 %453, %293
  %455 = sub i32 %454, %173
  %456 = sub i32 %455, %22
  %457 = add i32 %456, %186
  %458 = sub i32 %457, %189
  %459 = sub i32 %458, %212
  %460 = sub i32 %459, %239
  %461 = add i32 %460, %248
  %462 = sub i32 %461, %250
  %463 = sub i32 %462, %268
  %464 = sub i32 %463, %275
  %465 = add i32 %464, %276
  %466 = add i32 %465, %277
  %467 = sub i32 %466, %302
  %468 = add i32 %467, %308
  %469 = sub i32 %468, %313
  %470 = sub i32 %469, %321
  %471 = sub i32 %470, %322
  %472 = add i32 %471, %323
  %473 = sub i32 %472, %155
  %474 = add i32 %473, %221
  %475 = add i32 %474, %330
  %476 = add i32 %475, %332
  %477 = sub i32 %476, %84
  %478 = sub i32 %477, %157
  %479 = sub i32 %478, %158
  %480 = add i32 %479, %159
  %481 = add i32 %480, %162
  %482 = add i32 %481, %168
  %483 = add i32 %482, %171
  %484 = add i32 %483, %172
  %485 = sub i32 %484, %175
  %486 = sub i32 %485, %176
  %487 = sub i32 %486, %178
  %488 = add i32 %487, %179
  %489 = add i32 %488, %187
  %490 = add i32 %489, %190
  %491 = sub i32 %490, %191
  %492 = add i32 %491, %193
  %493 = add i32 %492, %194
  %494 = sub i32 %493, %198
  %495 = add i32 %494, %199
  %496 = sub i32 %495, %200
  %497 = sub i32 %496, %203
  %498 = add i32 %497, %204
  %499 = sub i32 %498, %205
  %500 = sub i32 %499, %210
  %501 = add i32 %500, %214
  %502 = sub i32 %501, %215
  %503 = sub i32 %502, %219
  %504 = sub i32 %503, %222
  %505 = add i32 %504, %224
  %506 = sub i32 %505, %225
  %507 = add i32 %506, %228
  %508 = add i32 %507, %229
  %509 = sub i32 %508, %230
  %510 = sub i32 %509, %231
  %511 = sub i32 %510, %234
  %512 = sub i32 %511, %238
  %513 = sub i32 %512, %240
  %514 = add i32 %513, %241
  %515 = add i32 %514, %244
  %516 = sub i32 %515, %247
  %517 = sub i32 %516, %252
  %518 = add i32 %517, %253
  %519 = sub i32 %518, %254
  %520 = add i32 %519, %255
  %521 = add i32 %520, %257
  %522 = add i32 %521, %260
  %523 = sub i32 %522, %261
  %524 = sub i32 %523, %265
  %525 = add i32 %524, %266
  %526 = add i32 %525, %267
  %527 = sub i32 %526, %270
  %528 = sub i32 %527, %273
  %529 = sub i32 %528, %274
  %530 = sub i32 %529, %279
  %531 = add i32 %530, %280
  %532 = sub i32 %531, %285
  %533 = sub i32 %532, %286
  %534 = add i32 %533, %29
  %535 = add i32 %534, %288
  %536 = sub i32 %535, %294
  %537 = sub i32 %536, %301
  %538 = sub i32 %537, %303
  %539 = add i32 %538, %306
  %540 = sub i32 %539, %314
  %541 = add i32 %540, %315
  %542 = sub i32 %541, %258
  %543 = add i32 %542, %316
  %544 = add i32 %543, %317
  %545 = add i32 %544, %319
  %546 = sub i32 %545, %320
  %547 = add i32 %546, %325
  %548 = add i32 %547, %328
  %549 = add i32 %548, %298
  %550 = sub i32 %549, %329
  %551 = sub i32 %550, %331
  %552 = add i32 %551, %334
  %553 = sub i32 %552, %337
  %554 = sub i32 %553, %338
  %555 = add i32 %554, %346
  %556 = add i32 %555, %26
  %557 = sub i32 %556, %151
  %558 = sub i32 %557, %154
  %559 = sub i32 %558, %165
  %560 = sub i32 %559, %181
  %561 = sub i32 %560, %202
  %562 = sub i32 %561, %233
  %563 = sub i32 %562, %243
  %564 = sub i32 %563, %246
  %565 = sub i32 %564, %251
  %566 = add i32 %565, %259
  %567 = sub i32 %566, %284
  %568 = sub i32 %567, %290
  %569 = add i32 %568, %292
  %570 = sub i32 %569, %297
  %571 = sub i32 %570, %305
  %572 = sub i32 %571, %310
  %573 = add i32 %572, %312
  %574 = add i32 %573, %318
  %575 = sub i32 %574, %336
  %576 = sub i32 %575, %341
  %577 = add i32 %576, %344
  %578 = sub i32 %577, %264
  %579 = add i32 %578, %381
  %580 = add i32 %579, %383
  %581 = sub i32 %580, %237
  %582 = add i32 %581, %379
  %583 = add i32 %582, %388
  %584 = add i32 %583, %375
  %585 = add i32 %584, %367
  %586 = icmp eq i32 %31, %585
  %587 = select i1 %586, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %588 = tail call i32 @puts(i8* nonnull dereferenceable(1) %587)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
