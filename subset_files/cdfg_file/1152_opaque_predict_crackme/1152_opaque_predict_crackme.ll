; ModuleID = '../.././c_source_file/1152_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1152_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = and i32 %2, %1
  %8 = xor i32 %7, -1
  %9 = add i32 %7, 1
  %10 = or i32 %1, %0
  %11 = xor i32 %10, -1
  %12 = xor i32 %2, %1
  %13 = xor i32 %12, -1
  %14 = or i32 %13, %11
  %15 = sub i32 %9, %14
  %16 = or i32 %4, %3
  %17 = xor i32 %16, -1
  %18 = xor i32 %17, %5
  %19 = shl i32 %18, 1
  %20 = sub i32 %15, %19
  %21 = or i32 %2, %0
  %22 = xor i32 %21, -1
  %23 = xor i32 %1, %0
  %24 = xor i32 %23, -1
  %25 = or i32 %22, %24
  %26 = xor i32 %1, -1
  %27 = or i32 %26, %0
  %28 = xor i32 %27, -1
  %29 = or i32 %2, %1
  %30 = xor i32 %29, -1
  %31 = add i32 %29, 1
  %32 = xor i32 %7, %0
  %33 = add i32 %21, 1
  %34 = xor i32 %0, -1
  %35 = and i32 %7, %34
  %36 = and i32 %29, %0
  %37 = xor i32 %35, 2147483647
  %38 = xor i32 %37, %36
  %39 = xor i32 %2, -1
  %40 = or i32 %39, %0
  %41 = xor i32 %40, -1
  %42 = or i32 %23, %41
  %43 = and i32 %26, %0
  %44 = xor i32 %43, -1
  %45 = xor i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = and i32 %46, %44
  %48 = shl i32 %47, 1
  %49 = and i32 %26, %2
  %50 = and i32 %49, %0
  %51 = or i32 %12, %0
  %52 = xor i32 %51, -1
  %53 = or i32 %50, %52
  %54 = and i32 %39, %1
  %55 = xor i32 %54, -1
  %56 = xor i32 %43, %55
  %57 = or i32 %22, %26
  %58 = and i32 %1, %0
  %59 = xor i32 %40, %58
  %60 = and i32 %39, %0
  %61 = or i32 %60, %23
  %62 = or i32 %23, %46
  %63 = shl i32 %62, 1
  %64 = and i32 %39, %24
  %65 = and i32 %2, %0
  %66 = xor i32 %65, -1
  %67 = and i32 %66, %1
  %68 = or i32 %23, %2
  %69 = or i32 %28, %2
  %70 = shl i32 %69, 1
  %71 = or i32 %39, %1
  %72 = xor i32 %71, -1
  %73 = or i32 %58, %72
  %74 = and i32 %71, %0
  %75 = xor i32 %60, -1
  %76 = and i32 %75, %24
  %77 = or i32 %26, %2
  %78 = and i32 %77, %34
  %79 = xor i32 %50, -1
  %80 = xor i32 %78, %79
  %81 = or i32 %72, %34
  %82 = shl i32 %81, 1
  %83 = xor i32 %11, %2
  %84 = xor i32 %43, %8
  %85 = and i32 %45, %1
  %86 = or i32 %29, %0
  %87 = xor i32 %58, -1
  %88 = and i32 %13, %87
  %89 = xor i32 %21, %1
  %90 = or i32 %45, %11
  %91 = and i32 %23, %2
  %92 = or i32 %41, %26
  %93 = and i32 %10, %46
  %94 = and i32 %40, %1
  %95 = and i32 %39, %44
  %96 = xor i32 %65, %29
  %97 = and i32 %23, %66
  %98 = or i32 %58, %39
  %99 = xor i32 %65, %10
  %100 = or i32 %65, %30
  %101 = shl i32 %100, 1
  %102 = or i32 %71, %0
  %103 = or i32 %45, %58
  %104 = shl i32 %103, 1
  %105 = and i32 %45, %27
  %106 = and i32 %21, %1
  %107 = or i32 %60, %24
  %108 = and i32 %49, %34
  %109 = and i32 %77, %0
  %110 = or i32 %108, %109
  %111 = xor i32 %12, %0
  %112 = or i32 %50, %111
  %113 = and i32 %27, %2
  %114 = and i32 %12, %34
  %115 = shl i32 %114, 1
  %116 = and i32 %12, %87
  %117 = or i32 %41, %24
  %118 = or i32 %55, %34
  %119 = xor i32 %77, %0
  %120 = or i32 %50, %119
  %121 = xor i32 %13, %0
  %122 = shl i32 %121, 1
  %123 = and i32 %45, %44
  %124 = shl i32 %123, 1
  %125 = xor i32 %22, %1
  %126 = and i32 %45, %87
  %127 = or i32 %50, %78
  %128 = and i32 %71, %34
  %129 = and i32 %24, %2
  %130 = or i32 %12, %34
  %131 = xor i32 %130, 2147483647
  %132 = or i32 %131, %108
  %133 = shl i32 %132, 1
  %134 = and i32 %10, %39
  %135 = or i32 %58, %46
  %136 = or i32 %55, %0
  %137 = xor i32 %119, %79
  %138 = xor i32 %71, %58
  %139 = and i32 %12, %27
  %140 = xor i32 %8, %0
  %141 = and i32 %45, %23
  %142 = add i32 %71, 1
  %143 = and i32 %12, %0
  %144 = xor i32 %37, %143
  %145 = or i32 %45, %24
  %146 = or i32 %13, %28
  %147 = or i32 %43, %13
  %148 = and i32 %46, %24
  %149 = xor i32 %41, %1
  %150 = and i32 %45, %26
  %151 = xor i32 %87, %2
  %152 = shl i32 %151, 2
  %153 = xor i32 %65, %27
  %154 = or i32 %13, %0
  %155 = or i32 %60, %7
  %156 = xor i32 %155, -1
  %157 = or i32 %72, %0
  %158 = or i32 %45, %43
  %159 = or i32 %60, %72
  %160 = or i32 %58, %22
  %161 = or i32 %65, %1
  %162 = xor i32 %44, %2
  %163 = or i32 %60, %1
  %164 = or i32 %12, %43
  %165 = and i32 %40, %26
  %166 = or i32 %39, %24
  %167 = and i32 %40, %23
  %168 = or i32 %7, %43
  %169 = xor i32 %71, %0
  %170 = xor i32 %40, %1
  %171 = or i32 %30, %34
  %172 = add i32 %12, 1
  %173 = or i32 %35, %36
  %174 = or i32 %12, %11
  %175 = and i32 %55, %34
  %176 = or i32 %46, %11
  %177 = and i32 %45, %10
  %178 = xor i32 %60, %8
  %179 = shl i32 %1, 1
  %180 = and i32 %30, %34
  %181 = shl i32 %180, 2
  %182 = and i32 %54, %34
  %183 = mul i32 %182, 6
  %184 = and i32 %30, %0
  %185 = shl i32 %184, 1
  %186 = and i32 %54, %0
  %187 = and i32 %72, %34
  %188 = mul i32 %35, 11
  %189 = and i32 %72, %0
  %190 = and i32 %7, %0
  %191 = xor i32 %5, -1
  %192 = and i32 %191, %4
  %193 = xor i32 %192, -1
  %194 = and i32 %193, %3
  %195 = xor i32 %4, -1
  %196 = and i32 %5, %3
  %197 = and i32 %196, %195
  %198 = or i32 %5, %3
  %199 = and i32 %198, %4
  %200 = or i32 %197, %199
  %201 = and i32 %196, %4
  %202 = and i32 %198, %195
  %203 = or i32 %201, %202
  %204 = xor i32 %198, -1
  %205 = add i32 %198, 1
  %206 = and i32 %5, %4
  %207 = xor i32 %206, -1
  %208 = xor i32 %4, %3
  %209 = and i32 %208, %207
  %210 = and i32 %4, %3
  %211 = xor i32 %210, -1
  %212 = xor i32 %3, -1
  %213 = and i32 %212, %4
  %214 = xor i32 %213, %5
  %215 = shl i32 %214, 1
  %216 = or i32 %191, %4
  %217 = xor i32 %216, -1
  %218 = or i32 %217, %212
  %219 = or i32 %5, %4
  %220 = xor i32 %208, -1
  %221 = and i32 %219, %220
  %222 = shl i32 %221, 2
  %223 = xor i32 %219, -1
  %224 = or i32 %223, %220
  %225 = shl i32 %224, 1
  %226 = xor i32 %5, %4
  %227 = or i32 %226, %220
  %228 = shl i32 %227, 1
  %229 = and i32 %191, %220
  %230 = xor i32 %217, %3
  %231 = xor i32 %198, %210
  %232 = or i32 %212, %4
  %233 = xor i32 %232, %5
  %234 = xor i32 %226, -1
  %235 = or i32 %213, %234
  %236 = and i32 %212, %5
  %237 = and i32 %236, %195
  %238 = or i32 %212, %5
  %239 = and i32 %238, %4
  %240 = xor i32 %239, -1
  %241 = xor i32 %237, %240
  %242 = and i32 %191, %3
  %243 = xor i32 %242, -1
  %244 = or i32 %243, %4
  %245 = xor i32 %5, %3
  %246 = and i32 %245, %4
  %247 = and i32 %207, %212
  %248 = xor i32 %202, -1
  %249 = xor i32 %201, %248
  %250 = xor i32 %198, %4
  %251 = or i32 %201, %250
  %252 = or i32 %208, %5
  %253 = and i32 %226, %232
  %254 = or i32 %245, %195
  %255 = xor i32 %254, -1
  %256 = or i32 %237, %255
  %257 = xor i32 %196, -1
  %258 = or i32 %257, %4
  %259 = or i32 %204, %4
  %260 = or i32 %192, %220
  %261 = xor i32 %213, -1
  %262 = and i32 %226, %261
  %263 = or i32 %245, %210
  %264 = or i32 %192, %196
  %265 = xor i32 %245, -1
  %266 = xor i32 %265, %4
  %267 = shl i32 %266, 1
  %268 = xor i32 %193, %3
  %269 = xor i32 %206, %243
  %270 = and i32 %236, %4
  %271 = xor i32 %238, %4
  %272 = or i32 %270, %271
  %273 = shl i32 %272, 1
  %274 = and i32 %208, %5
  %275 = or i32 %237, %239
  %276 = and i32 %16, %234
  %277 = or i32 %191, %3
  %278 = or i32 %277, %195
  %279 = or i32 %191, %17
  %280 = shl i32 %4, 1
  %281 = xor i32 %204, %4
  %282 = or i32 %257, %195
  %283 = xor i32 %210, %5
  %284 = xor i32 %277, -1
  %285 = or i32 %192, %284
  %286 = shl i32 %285, 1
  %287 = xor i32 %206, %3
  %288 = xor i32 %206, %232
  %289 = and i32 %257, %4
  %290 = add i32 %206, 1
  %291 = and i32 %219, %212
  %292 = and i32 %216, %208
  %293 = and i32 %245, %211
  %294 = and i32 %216, %212
  %295 = xor i32 %216, %210
  %296 = or i32 %191, %220
  %297 = xor i32 %232, -1
  %298 = or i32 %265, %297
  %299 = and i32 %208, %234
  %300 = or i32 %210, %5
  %301 = xor i32 %246, -1
  %302 = xor i32 %197, %301
  %303 = and i32 %207, %220
  %304 = and i32 %193, %220
  %305 = or i32 %213, %191
  %306 = or i32 %223, %3
  %307 = shl i32 %306, 1
  %308 = xor i32 %250, 2147483647
  %309 = xor i32 %308, %201
  %310 = shl i32 %284, 2
  %311 = or i32 %234, %220
  %312 = and i32 %234, %3
  %313 = or i32 %243, %195
  %314 = or i32 %245, %4
  %315 = xor i32 %314, -1
  %316 = or i32 %270, %315
  %317 = and i32 %234, %211
  %318 = or i32 %208, %234
  %319 = or i32 %217, %3
  %320 = and i32 %226, %220
  %321 = and i32 %219, %208
  %322 = xor i32 %270, -1
  %323 = xor i32 %271, %322
  %324 = and i32 %232, %265
  %325 = or i32 %245, %297
  %326 = xor i32 %284, %4
  %327 = shl i32 %326, 2
  %328 = or i32 %192, %208
  %329 = xor i32 %207, %3
  %330 = xor i32 %245, %4
  %331 = xor i32 %330, %322
  %332 = or i32 %210, %265
  %333 = and i32 %261, %5
  %334 = add i32 %16, 1
  %335 = and i32 %232, %191
  %336 = or i32 %206, %17
  %337 = add i32 %5, 1
  %338 = or i32 %210, %217
  %339 = or i32 %206, %3
  %340 = shl i32 %339, 1
  %341 = xor i32 %196, %4
  %342 = xor i32 %216, %3
  %343 = or i32 %234, %3
  %344 = or i32 %223, %212
  %345 = or i32 %226, %212
  %346 = or i32 %213, %5
  %347 = or i32 %226, %17
  %348 = or i32 %242, %195
  %349 = or i32 %192, %212
  %350 = and i32 %191, %211
  %351 = or i32 %245, %213
  %352 = or i32 %234, %297
  %353 = shl i32 %352, 1
  %354 = and i32 %277, %195
  %355 = and i32 %245, %16
  %356 = add i32 %192, 1
  %357 = xor i32 %213, %243
  %358 = or i32 %226, %213
  %359 = xor i32 %270, %314
  %360 = and i32 %208, %191
  %361 = or i32 %210, %223
  %362 = and i32 %238, %195
  %363 = or i32 %270, %362
  %364 = xor i32 %237, %254
  %365 = and i32 %220, %5
  %366 = or i32 %198, %4
  %367 = or i32 %208, %223
  %368 = xor i32 %201, %330
  %369 = add i32 %242, 1
  %370 = xor i32 %242, %4
  %371 = and i32 %191, %261
  %372 = and i32 %204, %195
  %373 = and i32 %242, %195
  %374 = and i32 %204, %4
  %375 = and i32 %242, %4
  %376 = shl i32 %375, 1
  %377 = and i32 %284, %195
  %378 = and i32 %284, %4
  %379 = mul i32 %378, -15
  %380 = sub i32 %186, %146
  %381 = sub i32 %380, %97
  %382 = add i32 %381, %76
  %383 = sub i32 %382, %67
  %384 = add i32 %383, %356
  %385 = add i32 %384, %377
  %386 = add i32 %385, %275
  %387 = mul i32 %386, 3
  %388 = add i32 %187, %46
  %389 = add i32 %388, %99
  %390 = add i32 %389, %274
  %391 = add i32 %390, %269
  %392 = add i32 %391, %355
  %393 = mul i32 %392, 5
  %394 = sub i32 %372, %374
  %395 = mul i32 %394, 10
  %396 = sub i32 %190, %197
  %397 = mul i32 %396, 9
  %398 = sub i32 %201, %189
  %399 = mul i32 %398, 14
  %400 = add i32 %264, %134
  %401 = shl i32 %400, 2
  %402 = add i32 %165, -1
  %403 = add i32 %402, %106
  %404 = add i32 %403, %92
  %405 = add i32 %404, %51
  %406 = add i32 %405, %305
  %407 = add i32 %406, %300
  %408 = add i32 %407, %144
  %409 = add i32 %408, %38
  %410 = add i32 %409, %367
  %411 = add i32 %410, %358
  %412 = add i32 %411, %303
  %413 = add i32 %412, %289
  %414 = add i32 %413, %253
  %415 = add i32 %414, %246
  %416 = add i32 %415, %194
  %417 = add i32 %416, %309
  %418 = shl i32 %417, 1
  %419 = sub i32 1, %179
  %420 = add i32 %419, %31
  %421 = add i32 %420, %33
  %422 = add i32 %421, %64
  %423 = sub i32 %422, %68
  %424 = add i32 %423, %83
  %425 = sub i32 %424, %91
  %426 = sub i32 %425, %95
  %427 = sub i32 %426, %98
  %428 = add i32 %427, %21
  %429 = add i32 %428, %113
  %430 = sub i32 %429, %129
  %431 = add i32 %430, %142
  %432 = add i32 %431, %55
  %433 = sub i32 %432, %12
  %434 = add i32 %433, %162
  %435 = add i32 %434, %29
  %436 = sub i32 %435, %166
  %437 = sub i32 %436, %54
  %438 = add i32 %437, %172
  %439 = sub i32 %438, %25
  %440 = add i32 %439, %32
  %441 = add i32 %440, %42
  %442 = add i32 %441, %56
  %443 = add i32 %442, %57
  %444 = add i32 %443, %59
  %445 = add i32 %444, %61
  %446 = sub i32 %445, %70
  %447 = sub i32 %446, %73
  %448 = add i32 %447, %74
  %449 = add i32 %448, %84
  %450 = add i32 %449, %85
  %451 = sub i32 %450, %86
  %452 = add i32 %451, %88
  %453 = sub i32 %452, %89
  %454 = sub i32 %453, %90
  %455 = add i32 %454, %93
  %456 = sub i32 %455, %94
  %457 = sub i32 %456, %96
  %458 = sub i32 %457, %102
  %459 = add i32 %458, %105
  %460 = sub i32 %459, %107
  %461 = sub i32 %460, %116
  %462 = sub i32 %461, %117
  %463 = sub i32 %462, %118
  %464 = sub i32 %463, %125
  %465 = sub i32 %464, %126
  %466 = add i32 %465, %128
  %467 = add i32 %466, %135
  %468 = sub i32 %467, %136
  %469 = add i32 %468, %138
  %470 = add i32 %469, %139
  %471 = sub i32 %470, %140
  %472 = add i32 %471, %141
  %473 = sub i32 %472, %145
  %474 = add i32 %473, %147
  %475 = add i32 %474, %148
  %476 = add i32 %475, %149
  %477 = add i32 %476, %150
  %478 = sub i32 %477, %152
  %479 = sub i32 %478, %153
  %480 = add i32 %479, %154
  %481 = add i32 %480, %156
  %482 = sub i32 %481, %157
  %483 = add i32 %482, %158
  %484 = add i32 %483, %159
  %485 = add i32 %484, %160
  %486 = add i32 %485, %36
  %487 = add i32 %486, %161
  %488 = sub i32 %487, %163
  %489 = sub i32 %488, %164
  %490 = add i32 %489, %167
  %491 = sub i32 %490, %168
  %492 = add i32 %491, %169
  %493 = add i32 %492, %170
  %494 = sub i32 %493, %171
  %495 = sub i32 %494, %111
  %496 = sub i32 %495, %174
  %497 = add i32 %496, %175
  %498 = add i32 %497, %176
  %499 = sub i32 %498, %130
  %500 = sub i32 %499, %177
  %501 = add i32 %500, %178
  %502 = sub i32 %501, %48
  %503 = add i32 %502, %53
  %504 = sub i32 %503, %63
  %505 = sub i32 %504, %80
  %506 = sub i32 %505, %82
  %507 = sub i32 %506, %101
  %508 = sub i32 %507, %104
  %509 = add i32 %508, %110
  %510 = add i32 %509, %112
  %511 = sub i32 %510, %115
  %512 = add i32 %511, %120
  %513 = sub i32 %512, %122
  %514 = sub i32 %513, %124
  %515 = sub i32 %514, %127
  %516 = add i32 %515, %137
  %517 = sub i32 %516, %173
  %518 = sub i32 %517, %181
  %519 = add i32 %518, %183
  %520 = sub i32 %519, %185
  %521 = add i32 %520, %188
  %522 = add i32 %521, %211
  %523 = add i32 %522, %16
  %524 = sub i32 %523, %280
  %525 = add i32 %524, %208
  %526 = add i32 %525, %334
  %527 = add i32 %526, %337
  %528 = add i32 %527, %261
  %529 = add i32 %528, %205
  %530 = add i32 %529, %206
  %531 = sub i32 %530, %229
  %532 = sub i32 %531, %233
  %533 = add i32 %532, %226
  %534 = add i32 %533, %252
  %535 = sub i32 %534, %242
  %536 = sub i32 %535, %279
  %537 = add i32 %536, %283
  %538 = add i32 %537, %290
  %539 = sub i32 %538, %296
  %540 = add i32 %539, %217
  %541 = sub i32 %540, %333
  %542 = add i32 %541, %335
  %543 = sub i32 %542, %346
  %544 = add i32 %543, %350
  %545 = sub i32 %544, %360
  %546 = add i32 %545, %365
  %547 = add i32 %546, %369
  %548 = sub i32 %547, %371
  %549 = sub i32 %548, %133
  %550 = add i32 %549, %209
  %551 = sub i32 %550, %215
  %552 = add i32 %551, %218
  %553 = sub i32 %552, %230
  %554 = add i32 %553, %231
  %555 = add i32 %554, %235
  %556 = add i32 %555, %244
  %557 = add i32 %556, %247
  %558 = add i32 %557, %258
  %559 = sub i32 %558, %259
  %560 = add i32 %559, %260
  %561 = add i32 %560, %262
  %562 = sub i32 %561, %263
  %563 = add i32 %562, %268
  %564 = add i32 %563, %276
  %565 = add i32 %564, %278
  %566 = sub i32 %565, %281
  %567 = sub i32 %566, %282
  %568 = sub i32 %567, %287
  %569 = add i32 %568, %288
  %570 = add i32 %569, %291
  %571 = sub i32 %570, %292
  %572 = sub i32 %571, %293
  %573 = sub i32 %572, %294
  %574 = sub i32 %573, %295
  %575 = sub i32 %574, %298
  %576 = add i32 %575, %299
  %577 = add i32 %576, %304
  %578 = sub i32 %577, %310
  %579 = sub i32 %578, %311
  %580 = add i32 %579, %312
  %581 = sub i32 %580, %313
  %582 = add i32 %581, %317
  %583 = sub i32 %582, %318
  %584 = add i32 %583, %319
  %585 = add i32 %584, %320
  %586 = add i32 %585, %321
  %587 = sub i32 %586, %324
  %588 = add i32 %587, %325
  %589 = sub i32 %588, %328
  %590 = sub i32 %589, %329
  %591 = sub i32 %590, %332
  %592 = sub i32 %591, %336
  %593 = sub i32 %592, %338
  %594 = sub i32 %593, %341
  %595 = sub i32 %594, %342
  %596 = add i32 %595, %343
  %597 = sub i32 %596, %344
  %598 = sub i32 %597, %345
  %599 = add i32 %598, %347
  %600 = add i32 %599, %348
  %601 = add i32 %600, %349
  %602 = add i32 %601, %351
  %603 = add i32 %602, %354
  %604 = sub i32 %603, %357
  %605 = sub i32 %604, %361
  %606 = add i32 %605, %366
  %607 = add i32 %606, %370
  %608 = sub i32 %607, %373
  %609 = add i32 %608, %200
  %610 = sub i32 %609, %203
  %611 = sub i32 %610, %222
  %612 = sub i32 %611, %225
  %613 = sub i32 %612, %228
  %614 = sub i32 %613, %241
  %615 = add i32 %614, %249
  %616 = sub i32 %615, %251
  %617 = sub i32 %616, %256
  %618 = sub i32 %617, %267
  %619 = sub i32 %618, %286
  %620 = sub i32 %619, %302
  %621 = sub i32 %620, %307
  %622 = add i32 %621, %316
  %623 = add i32 %622, %323
  %624 = sub i32 %623, %327
  %625 = sub i32 %624, %331
  %626 = sub i32 %625, %340
  %627 = sub i32 %626, %353
  %628 = add i32 %627, %359
  %629 = sub i32 %628, %363
  %630 = sub i32 %629, %364
  %631 = add i32 %630, %368
  %632 = sub i32 %631, %376
  %633 = add i32 %632, %379
  %634 = sub i32 %633, %273
  %635 = add i32 %634, %395
  %636 = add i32 %635, %397
  %637 = add i32 %636, %399
  %638 = add i32 %637, %401
  %639 = add i32 %638, %393
  %640 = add i32 %639, %387
  %641 = add i32 %640, %418
  %642 = icmp eq i32 %20, %641
  %643 = select i1 %642, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %644 = tail call i32 @puts(i8* nonnull dereferenceable(1) %643)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
