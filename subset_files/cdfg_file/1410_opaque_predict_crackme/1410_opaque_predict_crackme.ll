; ModuleID = '../.././c_source_file/1410_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1410_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %1, -1
  %8 = and i32 %7, %0
  %9 = xor i32 %8, -1
  %10 = xor i32 %2, %0
  %11 = and i32 %10, %9
  %12 = xor i32 %4, -1
  %13 = xor i32 %5, -1
  %14 = and i32 %13, %3
  %15 = or i32 %14, %12
  %16 = shl i32 %15, 1
  %17 = sub i32 %11, %16
  %18 = or i32 %2, %0
  %19 = xor i32 %18, -1
  %20 = or i32 %19, %1
  %21 = and i32 %1, %0
  %22 = xor i32 %21, %2
  %23 = and i32 %2, %0
  %24 = xor i32 %2, -1
  %25 = and i32 %24, %1
  %26 = or i32 %23, %25
  %27 = shl i32 %26, 1
  %28 = xor i32 %1, %0
  %29 = or i32 %28, %19
  %30 = xor i32 %10, -1
  %31 = or i32 %28, %30
  %32 = and i32 %30, %9
  %33 = xor i32 %0, -1
  %34 = or i32 %2, %1
  %35 = or i32 %34, %33
  %36 = and i32 %18, %28
  %37 = or i32 %24, %0
  %38 = xor i32 %37, -1
  %39 = or i32 %38, %1
  %40 = xor i32 %21, -1
  %41 = xor i32 %2, %1
  %42 = and i32 %41, %40
  %43 = and i32 %2, %1
  %44 = or i32 %43, %0
  %45 = xor i32 %28, -1
  %46 = or i32 %38, %45
  %47 = or i32 %23, %1
  %48 = xor i32 %40, %2
  %49 = and i32 %37, %7
  %50 = or i32 %19, %7
  %51 = and i32 %10, %1
  %52 = xor i32 %19, %1
  %53 = and i32 %10, %28
  %54 = or i32 %1, %0
  %55 = and i32 %54, %2
  %56 = or i32 %10, %8
  %57 = and i32 %43, %33
  %58 = and i32 %34, %0
  %59 = or i32 %57, %58
  %60 = xor i32 %34, %0
  %61 = xor i32 %41, -1
  %62 = or i32 %61, %0
  %63 = or i32 %24, %45
  %64 = xor i32 %61, %0
  %65 = shl i32 %64, 1
  %66 = xor i32 %41, %0
  %67 = or i32 %61, %33
  %68 = shl i32 %67, 1
  %69 = or i32 %30, %1
  %70 = and i32 %24, %40
  %71 = xor i32 %54, -1
  %72 = or i32 %24, %71
  %73 = or i32 %24, %1
  %74 = xor i32 %73, %21
  %75 = shl i32 %30, 1
  %76 = or i32 %7, %0
  %77 = xor i32 %76, -1
  %78 = or i32 %30, %77
  %79 = or i32 %23, %45
  %80 = xor i32 %23, %34
  %81 = and i32 %37, %1
  %82 = xor i32 %23, %54
  %83 = shl i32 %82, 1
  %84 = add i32 %76, 1
  %85 = or i32 %21, %24
  %86 = xor i32 %25, -1
  %87 = xor i32 %8, %86
  %88 = and i32 %9, %2
  %89 = and i32 %30, %7
  %90 = shl i32 %89, 1
  %91 = or i32 %73, %33
  %92 = shl i32 %91, 1
  %93 = or i32 %25, %0
  %94 = and i32 %41, %0
  %95 = xor i32 %57, -1
  %96 = xor i32 %94, %95
  %97 = or i32 %10, %7
  %98 = and i32 %7, %2
  %99 = and i32 %98, %0
  %100 = or i32 %7, %2
  %101 = xor i32 %100, -1
  %102 = or i32 %101, %0
  %103 = xor i32 %99, %102
  %104 = and i32 %24, %0
  %105 = xor i32 %104, -1
  %106 = add i32 %104, 1
  %107 = or i32 %104, %45
  %108 = or i32 %23, %28
  %109 = xor i32 %37, %1
  %110 = or i32 %99, %66
  %111 = and i32 %43, %0
  %112 = and i32 %41, %33
  %113 = or i32 %111, %112
  %114 = and i32 %10, %45
  %115 = shl i32 %114, 1
  %116 = or i32 %21, %61
  %117 = xor i32 %23, %86
  %118 = shl i32 %117, 1
  %119 = and i32 %61, %0
  %120 = and i32 %28, %24
  %121 = shl i32 %120, 1
  %122 = xor i32 %23, -1
  %123 = and i32 %28, %122
  %124 = shl i32 %123, 1
  %125 = or i32 %19, %45
  %126 = shl i32 %125, 1
  %127 = and i32 %54, %30
  %128 = shl i32 %127, 1
  %129 = and i32 %18, %1
  %130 = or i32 %71, %2
  %131 = xor i32 %73, -1
  %132 = or i32 %131, %33
  %133 = shl i32 %132, 2
  %134 = or i32 %23, %71
  %135 = shl i32 %134, 1
  %136 = or i32 %8, %61
  %137 = or i32 %41, %8
  %138 = and i32 %30, %45
  %139 = xor i32 %73, %0
  %140 = xor i32 %77, %2
  %141 = or i32 %10, %1
  %142 = and i32 %28, %30
  %143 = or i32 %111, %60
  %144 = and i32 %105, %45
  %145 = or i32 %28, %38
  %146 = xor i32 %18, %21
  %147 = and i32 %41, %9
  %148 = xor i32 %86, %0
  %149 = or i32 %30, %7
  %150 = xor i32 %34, %21
  %151 = add i32 %8, 1
  %152 = or i32 %25, %33
  %153 = xor i32 %25, %0
  %154 = and i32 %76, %24
  %155 = shl i32 %154, 1
  %156 = or i32 %24, %77
  %157 = xor i32 %99, -1
  %158 = xor i32 %66, %157
  %159 = xor i32 %43, -1
  %160 = xor i32 %104, %159
  %161 = xor i32 %100, %33
  %162 = xor i32 %161, %99
  %163 = and i32 %54, %24
  %164 = and i32 %98, %33
  %165 = and i32 %100, %0
  %166 = xor i32 %165, 2147483647
  %167 = xor i32 %166, %164
  %168 = shl i32 %167, 1
  %169 = or i32 %41, %0
  %170 = xor i32 %34, -1
  %171 = or i32 %170, %0
  %172 = and i32 %54, %61
  %173 = and i32 %122, %1
  %174 = and i32 %37, %45
  %175 = and i32 %159, %0
  %176 = or i32 %131, %0
  %177 = and i32 %105, %1
  %178 = or i32 %159, %0
  %179 = or i32 %77, %2
  %180 = xor i32 %99, %169
  %181 = xor i32 %60, -1
  %182 = xor i32 %111, %181
  %183 = or i32 %34, %0
  %184 = and i32 %18, %7
  %185 = or i32 %21, %19
  %186 = xor i32 %58, %95
  %187 = xor i32 %169, -1
  %188 = or i32 %99, %187
  %189 = and i32 %10, %40
  %190 = and i32 %30, %40
  %191 = and i32 %10, %76
  %192 = shl i32 %191, 1
  %193 = xor i32 %18, %1
  %194 = and i32 %10, %7
  %195 = shl i32 %194, 1
  %196 = xor i32 %104, %1
  %197 = and i32 %86, %0
  %198 = or i32 %104, %131
  %199 = and i32 %170, %33
  %200 = and i32 %25, %33
  %201 = and i32 %170, %0
  %202 = mul i32 %201, -11
  %203 = and i32 %131, %33
  %204 = and i32 %131, %0
  %205 = shl i32 %204, 3
  %206 = shl i32 %111, 3
  %207 = xor i32 %14, -1
  %208 = and i32 %207, %4
  %209 = xor i32 %5, %3
  %210 = and i32 %209, %12
  %211 = xor i32 %3, -1
  %212 = and i32 %211, %4
  %213 = xor i32 %5, %4
  %214 = or i32 %213, %212
  %215 = or i32 %13, %3
  %216 = or i32 %215, %4
  %217 = and i32 %207, %12
  %218 = or i32 %211, %4
  %219 = xor i32 %218, %5
  %220 = and i32 %5, %4
  %221 = xor i32 %220, -1
  %222 = and i32 %221, %211
  %223 = and i32 %209, %218
  %224 = xor i32 %4, %3
  %225 = xor i32 %224, -1
  %226 = and i32 %221, %225
  %227 = xor i32 %207, %4
  %228 = xor i32 %218, -1
  %229 = or i32 %13, %228
  %230 = shl i32 %207, 1
  %231 = and i32 %5, %3
  %232 = or i32 %231, %12
  %233 = and i32 %231, %4
  %234 = xor i32 %210, -1
  %235 = xor i32 %233, %234
  %236 = or i32 %209, %212
  %237 = xor i32 %231, 1073741823
  %238 = or i32 %237, %4
  %239 = shl i32 %238, 2
  %240 = xor i32 %215, -1
  %241 = or i32 %240, %4
  %242 = and i32 %224, %13
  %243 = and i32 %213, %225
  %244 = or i32 %213, %3
  %245 = shl i32 %244, 1
  %246 = or i32 %5, %3
  %247 = and i32 %224, %5
  %248 = and i32 %231, %12
  %249 = and i32 %209, %4
  %250 = or i32 %248, %249
  %251 = xor i32 %14, %4
  %252 = xor i32 %212, -1
  %253 = and i32 %209, %252
  %254 = or i32 %224, %5
  %255 = xor i32 %246, -1
  %256 = and i32 %255, %12
  %257 = and i32 %14, %12
  %258 = shl i32 %257, 1
  %259 = and i32 %255, %4
  %260 = and i32 %14, %4
  %261 = and i32 %240, %12
  %262 = shl i32 %248, 1
  %263 = and i32 %240, %4
  %264 = sub i32 %199, %8
  %265 = sub i32 %264, %261
  %266 = add i32 %265, %233
  %267 = sub i32 %266, %260
  %268 = add i32 %267, %259
  %269 = mul i32 %268, 3
  %270 = sub i32 %196, %57
  %271 = add i32 %270, %53
  %272 = mul i32 %271, 5
  %273 = add i32 %203, %200
  %274 = mul i32 %273, 9
  %275 = add i32 %130, -1
  %276 = add i32 %275, %63
  %277 = add i32 %276, %198
  %278 = add i32 %277, %108
  %279 = add i32 %278, %79
  %280 = add i32 %279, %74
  %281 = add i32 %280, %62
  %282 = add i32 %281, %51
  %283 = add i32 %282, %39
  %284 = add i32 %283, %143
  %285 = add i32 %284, %110
  %286 = add i32 %285, %59
  %287 = add i32 %286, %216
  %288 = add i32 %287, %232
  %289 = shl i32 %288, 1
  %290 = sub i32 %33, %0
  %291 = add i32 %290, 1
  %292 = add i32 %291, %28
  %293 = add i32 %292, %84
  %294 = sub i32 %293, %54
  %295 = add i32 %294, %151
  %296 = add i32 %295, %76
  %297 = sub i32 %296, %2
  %298 = sub i32 %297, %22
  %299 = add i32 %298, %48
  %300 = add i32 %299, %55
  %301 = add i32 %300, %70
  %302 = add i32 %301, %72
  %303 = add i32 %302, %85
  %304 = sub i32 %303, %88
  %305 = add i32 %304, %106
  %306 = sub i32 %305, %43
  %307 = sub i32 %306, %140
  %308 = add i32 %307, %156
  %309 = sub i32 %308, %163
  %310 = sub i32 %309, %179
  %311 = add i32 %310, %122
  %312 = add i32 %311, %38
  %313 = add i32 %312, %20
  %314 = sub i32 %313, %29
  %315 = sub i32 %314, %31
  %316 = sub i32 %315, %32
  %317 = sub i32 %316, %35
  %318 = add i32 %317, %36
  %319 = add i32 %318, %42
  %320 = add i32 %319, %44
  %321 = add i32 %320, %46
  %322 = add i32 %321, %47
  %323 = add i32 %322, %49
  %324 = sub i32 %323, %50
  %325 = sub i32 %324, %52
  %326 = sub i32 %325, %56
  %327 = sub i32 %326, %60
  %328 = sub i32 %327, %66
  %329 = add i32 %328, %69
  %330 = sub i32 %329, %75
  %331 = add i32 %330, %78
  %332 = sub i32 %331, %80
  %333 = sub i32 %332, %81
  %334 = sub i32 %333, %87
  %335 = add i32 %334, %93
  %336 = add i32 %335, %97
  %337 = sub i32 %336, %107
  %338 = sub i32 %337, %94
  %339 = add i32 %338, %109
  %340 = add i32 %339, %116
  %341 = add i32 %340, %119
  %342 = sub i32 %341, %121
  %343 = sub i32 %342, %129
  %344 = add i32 %343, %136
  %345 = add i32 %344, %137
  %346 = sub i32 %345, %138
  %347 = sub i32 %346, %139
  %348 = sub i32 %347, %141
  %349 = add i32 %348, %142
  %350 = add i32 %349, %144
  %351 = sub i32 %350, %145
  %352 = add i32 %351, %146
  %353 = sub i32 %352, %147
  %354 = add i32 %353, %148
  %355 = add i32 %354, %149
  %356 = sub i32 %355, %150
  %357 = add i32 %356, %152
  %358 = sub i32 %357, %153
  %359 = sub i32 %358, %155
  %360 = sub i32 %359, %160
  %361 = sub i32 %360, %169
  %362 = add i32 %361, %171
  %363 = sub i32 %362, %172
  %364 = add i32 %363, %173
  %365 = add i32 %364, %174
  %366 = sub i32 %365, %175
  %367 = add i32 %366, %176
  %368 = add i32 %367, %177
  %369 = add i32 %368, %178
  %370 = sub i32 %369, %183
  %371 = sub i32 %370, %184
  %372 = sub i32 %371, %185
  %373 = add i32 %372, %189
  %374 = sub i32 %373, %190
  %375 = sub i32 %374, %193
  %376 = sub i32 %375, %197
  %377 = sub i32 %376, %27
  %378 = sub i32 %377, %65
  %379 = sub i32 %378, %68
  %380 = sub i32 %379, %83
  %381 = sub i32 %380, %90
  %382 = sub i32 %381, %92
  %383 = add i32 %382, %96
  %384 = add i32 %383, %103
  %385 = add i32 %384, %113
  %386 = sub i32 %385, %115
  %387 = sub i32 %386, %118
  %388 = sub i32 %387, %124
  %389 = sub i32 %388, %126
  %390 = sub i32 %389, %128
  %391 = sub i32 %390, %133
  %392 = sub i32 %391, %135
  %393 = sub i32 %392, %158
  %394 = sub i32 %393, %162
  %395 = add i32 %394, %180
  %396 = add i32 %395, %182
  %397 = add i32 %396, %186
  %398 = sub i32 %397, %188
  %399 = sub i32 %398, %192
  %400 = sub i32 %399, %195
  %401 = add i32 %400, %202
  %402 = add i32 %401, %205
  %403 = sub i32 %402, %206
  %404 = add i32 %403, %219
  %405 = sub i32 %404, %229
  %406 = sub i32 %405, %242
  %407 = sub i32 %406, %246
  %408 = sub i32 %407, %247
  %409 = add i32 %408, %254
  %410 = add i32 %409, %274
  %411 = sub i32 %410, %168
  %412 = sub i32 %411, %208
  %413 = add i32 %412, %210
  %414 = add i32 %413, %214
  %415 = add i32 %414, %217
  %416 = sub i32 %415, %222
  %417 = add i32 %416, %223
  %418 = add i32 %417, %226
  %419 = sub i32 %418, %227
  %420 = sub i32 %419, %230
  %421 = add i32 %420, %236
  %422 = add i32 %421, %241
  %423 = add i32 %422, %243
  %424 = add i32 %423, %251
  %425 = add i32 %424, %253
  %426 = sub i32 %425, %256
  %427 = add i32 %426, %263
  %428 = add i32 %427, %272
  %429 = add i32 %428, %235
  %430 = sub i32 %429, %245
  %431 = sub i32 %430, %250
  %432 = sub i32 %431, %258
  %433 = sub i32 %432, %262
  %434 = sub i32 %433, %239
  %435 = add i32 %434, %269
  %436 = add i32 %435, %289
  %437 = icmp eq i32 %17, %436
  %438 = select i1 %437, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %439 = tail call i32 @puts(i8* nonnull dereferenceable(1) %438)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
