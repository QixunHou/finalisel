; ModuleID = '../.././c_source_file/0244_path_condition_crackme.c'
source_filename = "../.././c_source_file/0244_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = or i32 %6, %3
  %8 = xor i32 %1, -1
  %9 = and i32 %8, %2
  %10 = and i32 %9, %0
  %11 = xor i32 %2, %1
  %12 = or i32 %11, %0
  %13 = xor i32 %12, -1
  %14 = or i32 %10, %13
  %15 = sub i32 %14, %7
  %16 = or i32 %4, %3
  %17 = xor i32 %4, %3
  %18 = and i32 %6, %3
  %19 = shl i32 %18, 1
  %20 = xor i32 %2, -1
  %21 = and i32 %20, %0
  %22 = xor i32 %21, -1
  %23 = and i32 %22, %1
  %24 = and i32 %1, %0
  %25 = or i32 %2, %1
  %26 = xor i32 %25, %24
  %27 = xor i32 %1, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = and i32 %30, %28
  %32 = xor i32 %24, -1
  %33 = and i32 %2, %1
  %34 = and i32 %33, %0
  %35 = xor i32 %0, -1
  %36 = and i32 %25, %35
  %37 = xor i32 %34, -1
  %38 = xor i32 %36, %37
  %39 = xor i32 %33, %0
  %40 = xor i32 %11, -1
  %41 = and i32 %40, %32
  %42 = and i32 %33, %35
  %43 = and i32 %11, %0
  %44 = or i32 %42, %43
  %45 = and i32 %29, %27
  %46 = or i32 %20, %1
  %47 = or i32 %46, %0
  %48 = and i32 %9, %35
  %49 = or i32 %8, %2
  %50 = and i32 %49, %0
  %51 = xor i32 %50, 1073741823
  %52 = xor i32 %51, %48
  %53 = shl i32 %52, 2
  %54 = or i32 %20, %0
  %55 = xor i32 %54, %24
  %56 = and i32 %49, %35
  %57 = or i32 %10, %56
  %58 = and i32 %2, %0
  %59 = xor i32 %58, -1
  %60 = and i32 %59, %1
  %61 = or i32 %8, %0
  %62 = xor i32 %61, -1
  %63 = or i32 %58, %62
  %64 = or i32 %1, %0
  %65 = and i32 %64, %20
  %66 = and i32 %30, %8
  %67 = or i32 %48, %50
  %68 = or i32 %11, %62
  %69 = and i32 %61, %20
  %70 = and i32 %54, %8
  %71 = xor i32 %64, %2
  %72 = and i32 %11, %35
  %73 = or i32 %46, %35
  %74 = xor i32 %10, -1
  %75 = xor i32 %56, %74
  %76 = add i32 %61, 1
  %77 = xor i32 %25, -1
  %78 = or i32 %77, %35
  %79 = or i32 %40, %0
  %80 = xor i32 %72, %37
  %81 = and i32 %20, %1
  %82 = xor i32 %81, -1
  %83 = xor i32 %82, %0
  %84 = and i32 %8, %0
  %85 = xor i32 %84, -1
  %86 = and i32 %40, %85
  %87 = xor i32 %54, -1
  %88 = or i32 %87, %28
  %89 = or i32 %58, %77
  %90 = xor i32 %33, -1
  %91 = xor i32 %21, %90
  %92 = or i32 %29, %28
  %93 = and i32 %82, %0
  %94 = xor i32 %11, %0
  %95 = xor i32 %94, -1
  %96 = or i32 %34, %95
  %97 = or i32 %81, %84
  %98 = and i32 %22, %8
  %99 = or i32 %82, %35
  %100 = or i32 %2, %0
  %101 = xor i32 %100, -1
  %102 = or i32 %101, %1
  %103 = and i32 %54, %28
  %104 = xor i32 %77, %0
  %105 = xor i32 %59, %1
  %106 = and i32 %100, %8
  %107 = or i32 %101, %8
  %108 = or i32 %82, %0
  %109 = xor i32 %54, %1
  %110 = xor i32 %58, %25
  %111 = xor i32 %101, %1
  %112 = or i32 %34, %72
  %113 = xor i32 %46, -1
  %114 = or i32 %21, %113
  %115 = and i32 %100, %28
  %116 = shl i32 %115, 1
  %117 = xor i32 %64, -1
  %118 = or i32 %20, %117
  %119 = shl i32 %118, 1
  %120 = and i32 %61, %30
  %121 = xor i32 %46, %0
  %122 = xor i32 %49, %0
  %123 = xor i32 %122, %74
  %124 = or i32 %30, %8
  %125 = or i32 %21, %27
  %126 = or i32 %27, %30
  %127 = xor i32 %58, %61
  %128 = and i32 %61, %2
  %129 = and i32 %30, %1
  %130 = or i32 %40, %117
  %131 = or i32 %34, %36
  %132 = and i32 %85, %2
  %133 = and i32 %20, %85
  %134 = shl i32 %133, 1
  %135 = or i32 %24, %20
  %136 = or i32 %25, %35
  %137 = or i32 %40, %35
  %138 = or i32 %11, %35
  %139 = xor i32 %138, -1
  %140 = or i32 %48, %139
  %141 = and i32 %59, %28
  %142 = or i32 %77, %0
  %143 = and i32 %29, %28
  %144 = xor i32 %10, %12
  %145 = xor i32 %100, %1
  %146 = add i32 %100, 1
  %147 = and i32 %40, %0
  %148 = and i32 %28, %2
  %149 = and i32 %27, %22
  %150 = shl i32 %149, 1
  %151 = xor i32 %58, %82
  %152 = or i32 %24, %2
  %153 = and i32 %100, %27
  %154 = or i32 %29, %117
  %155 = add i32 %27, 1
  %156 = xor i32 %58, %64
  %157 = xor i32 %90, %0
  %158 = or i32 %87, %1
  %159 = or i32 %33, %35
  %160 = or i32 %28, %2
  %161 = xor i32 %32, %2
  %162 = and i32 %100, %1
  %163 = or i32 %30, %1
  %164 = or i32 %11, %117
  %165 = or i32 %90, %35
  %166 = and i32 %64, %2
  %167 = or i32 %21, %33
  %168 = and i32 %29, %85
  %169 = shl i32 %168, 1
  %170 = and i32 %11, %85
  %171 = or i32 %21, %1
  %172 = or i32 %20, %28
  %173 = xor i32 %84, %90
  %174 = or i32 %101, %28
  %175 = or i32 %58, %27
  %176 = or i32 %84, %20
  %177 = xor i32 %61, %2
  %178 = or i32 %84, %40
  %179 = and i32 %64, %40
  %180 = or i32 %33, %84
  %181 = or i32 %21, %28
  %182 = shl i32 %181, 1
  %183 = and i32 %29, %1
  %184 = and i32 %46, %35
  %185 = xor i32 %40, %0
  %186 = xor i32 %34, %94
  %187 = shl i32 %1, 1
  %188 = or i32 %29, %84
  %189 = or i32 %113, %0
  %190 = or i32 %58, %8
  %191 = or i32 %84, %30
  %192 = shl i32 %33, 1
  %193 = xor i32 %10, %95
  %194 = or i32 %24, %87
  %195 = add i32 %81, 1
  %196 = or i32 %30, %62
  %197 = or i32 %58, %1
  %198 = or i32 %84, %2
  %199 = xor i32 %81, %0
  %200 = or i32 %58, %81
  %201 = or i32 %29, %1
  %202 = shl i32 %201, 1
  %203 = or i32 %24, %101
  %204 = shl i32 %203, 1
  %205 = or i32 %29, %27
  %206 = or i32 %11, %84
  %207 = xor i32 %100, %24
  %208 = and i32 %29, %61
  %209 = and i32 %20, %32
  %210 = shl i32 %209, 1
  %211 = or i32 %81, %0
  %212 = or i32 %81, %35
  %213 = shl i32 %24, 1
  %214 = and i32 %30, %32
  %215 = and i32 %40, %35
  %216 = shl i32 %215, 1
  %217 = xor i32 %25, %0
  %218 = xor i32 %217, %37
  %219 = and i32 %46, %0
  %220 = or i32 %11, %24
  %221 = xor i32 %48, %138
  %222 = shl i32 %30, 1
  %223 = and i32 %54, %1
  %224 = and i32 %11, %64
  %225 = xor i32 %84, %82
  %226 = xor i32 %84, %2
  %227 = xor i32 %21, %1
  %228 = or i32 %34, %217
  %229 = and i32 %11, %61
  %230 = shl i32 %229, 1
  %231 = or i32 %24, %40
  %232 = or i32 %27, %2
  %233 = and i32 %25, %0
  %234 = or i32 %42, %233
  %235 = xor i32 %46, %24
  %236 = xor i32 %117, %2
  %237 = shl i32 %43, 1
  %238 = xor i32 %233, 2147483647
  %239 = xor i32 %238, %42
  %240 = shl i32 %239, 1
  %241 = and i32 %32, %2
  %242 = and i32 %90, %35
  %243 = and i32 %22, %28
  %244 = or i32 %87, %8
  %245 = or i32 %24, %77
  %246 = xor i32 %43, -1
  %247 = xor i32 %42, %246
  %248 = or i32 %29, %8
  %249 = or i32 %24, %30
  %250 = xor i32 %58, %1
  %251 = shl i32 %250, 2
  %252 = and i32 %61, %40
  %253 = and i32 %29, %8
  %254 = or i32 %58, %28
  %255 = and i32 %64, %30
  %256 = xor i32 %62, %2
  %257 = or i32 %58, %117
  %258 = add i32 %33, 1
  %259 = and i32 %90, %0
  %260 = or i32 %10, %122
  %261 = or i32 %62, %2
  %262 = xor i32 %87, %1
  %263 = or i32 %10, %94
  %264 = shl i32 %263, 1
  %265 = and i32 %27, %2
  %266 = or i32 %30, %28
  %267 = and i32 %20, %28
  %268 = and i32 %27, %30
  %269 = and i32 %54, %27
  %270 = shl i32 %269, 1
  %271 = or i32 %20, %62
  %272 = or i32 %90, %0
  %273 = or i32 %21, %8
  %274 = or i32 %27, %101
  %275 = or i32 %27, %20
  %276 = xor i32 %113, %0
  %277 = shl i32 %276, 1
  %278 = and i32 %30, %85
  %279 = and i32 %77, %35
  %280 = mul i32 %279, -36
  %281 = and i32 %81, %35
  %282 = and i32 %77, %0
  %283 = mul i32 %282, -22
  %284 = and i32 %81, %0
  %285 = mul i32 %284, -10
  %286 = and i32 %113, %35
  %287 = and i32 %113, %0
  %288 = mul i32 %34, -20
  %289 = add i32 %29, %261
  %290 = add i32 %289, %87
  %291 = add i32 %290, %177
  %292 = add i32 %291, %172
  %293 = add i32 %292, %274
  %294 = add i32 %293, %252
  %295 = add i32 %294, %248
  %296 = add i32 %295, %242
  %297 = add i32 %296, %233
  %298 = add i32 %297, %223
  %299 = add i32 %298, %212
  %300 = add i32 %299, %184
  %301 = add i32 %300, %175
  %302 = add i32 %301, %167
  %303 = add i32 %302, %154
  %304 = add i32 %303, %136
  %305 = add i32 %304, %125
  %306 = add i32 %305, %114
  %307 = add i32 %306, %86
  %308 = add i32 %307, %83
  %309 = add i32 %308, %79
  %310 = add i32 %309, %73
  %311 = add i32 %310, %70
  %312 = add i32 %311, %63
  %313 = add i32 %312, %96
  %314 = add i32 %313, %144
  %315 = shl i32 %314, 1
  %316 = add i32 %58, %236
  %317 = sub i32 %316, %180
  %318 = sub i32 %317, %286
  %319 = add i32 %318, %142
  %320 = sub i32 %319, %104
  %321 = mul i32 %320, 5
  %322 = or i32 %287, %42
  %323 = mul i32 %322, -26
  %324 = add i32 %185, %26
  %325 = shl i32 %324, 2
  %326 = sub i32 %64, %81
  %327 = sub i32 %326, %100
  %328 = add i32 %327, %66
  %329 = add i32 %328, %89
  %330 = mul i32 %329, 3
  %331 = sub i32 %1, %24
  %332 = add i32 %331, %76
  %333 = add i32 %332, %27
  %334 = add i32 %333, %84
  %335 = add i32 %334, %64
  %336 = add i32 %335, %61
  %337 = add i32 %336, %155
  %338 = sub i32 %337, %2
  %339 = sub i32 %338, %187
  %340 = add i32 %339, %20
  %341 = sub i32 %340, %65
  %342 = add i32 %341, %69
  %343 = sub i32 %342, %71
  %344 = add i32 %343, %54
  %345 = sub i32 %344, %46
  %346 = add i32 %345, %21
  %347 = add i32 %346, %128
  %348 = add i32 %347, %132
  %349 = add i32 %348, %135
  %350 = add i32 %349, %146
  %351 = add i32 %350, %59
  %352 = sub i32 %351, %148
  %353 = sub i32 %352, %152
  %354 = add i32 %353, %160
  %355 = add i32 %354, %161
  %356 = add i32 %355, %166
  %357 = add i32 %356, %176
  %358 = add i32 %357, %195
  %359 = add i32 %358, %198
  %360 = sub i32 %359, %213
  %361 = sub i32 %360, %226
  %362 = sub i32 %361, %232
  %363 = sub i32 %362, %11
  %364 = sub i32 %363, %241
  %365 = add i32 %364, %256
  %366 = add i32 %365, %258
  %367 = sub i32 %366, %265
  %368 = add i32 %367, %267
  %369 = add i32 %368, %271
  %370 = sub i32 %369, %275
  %371 = sub i32 %370, %4
  %372 = sub i32 %371, %23
  %373 = add i32 %372, %31
  %374 = sub i32 %373, %39
  %375 = sub i32 %374, %41
  %376 = add i32 %375, %45
  %377 = add i32 %376, %47
  %378 = sub i32 %377, %55
  %379 = sub i32 %378, %60
  %380 = sub i32 %379, %68
  %381 = sub i32 %380, %72
  %382 = sub i32 %381, %78
  %383 = add i32 %382, %88
  %384 = add i32 %383, %91
  %385 = add i32 %384, %12
  %386 = add i32 %385, %92
  %387 = sub i32 %386, %93
  %388 = sub i32 %387, %97
  %389 = sub i32 %388, %98
  %390 = sub i32 %389, %99
  %391 = add i32 %390, %102
  %392 = sub i32 %391, %103
  %393 = add i32 %392, %105
  %394 = sub i32 %393, %106
  %395 = sub i32 %394, %107
  %396 = add i32 %395, %108
  %397 = add i32 %396, %109
  %398 = add i32 %397, %110
  %399 = sub i32 %398, %111
  %400 = sub i32 %399, %119
  %401 = add i32 %400, %120
  %402 = add i32 %401, %121
  %403 = add i32 %402, %124
  %404 = sub i32 %403, %126
  %405 = sub i32 %404, %127
  %406 = sub i32 %405, %129
  %407 = sub i32 %406, %130
  %408 = sub i32 %407, %134
  %409 = sub i32 %408, %137
  %410 = sub i32 %409, %141
  %411 = add i32 %410, %143
  %412 = sub i32 %411, %145
  %413 = add i32 %412, %147
  %414 = add i32 %413, %151
  %415 = sub i32 %414, %153
  %416 = add i32 %415, %156
  %417 = add i32 %416, %157
  %418 = sub i32 %417, %158
  %419 = sub i32 %418, %159
  %420 = add i32 %419, %162
  %421 = sub i32 %420, %163
  %422 = sub i32 %421, %164
  %423 = sub i32 %422, %165
  %424 = sub i32 %423, %170
  %425 = add i32 %424, %171
  %426 = add i32 %425, %173
  %427 = add i32 %426, %174
  %428 = add i32 %427, %178
  %429 = add i32 %428, %179
  %430 = add i32 %429, %183
  %431 = add i32 %430, %188
  %432 = sub i32 %431, %189
  %433 = sub i32 %432, %190
  %434 = add i32 %433, %191
  %435 = sub i32 %434, %192
  %436 = sub i32 %435, %194
  %437 = sub i32 %436, %196
  %438 = add i32 %437, %197
  %439 = sub i32 %438, %199
  %440 = add i32 %439, %200
  %441 = add i32 %440, %205
  %442 = sub i32 %441, %206
  %443 = sub i32 %442, %207
  %444 = sub i32 %443, %208
  %445 = sub i32 %444, %210
  %446 = sub i32 %445, %211
  %447 = add i32 %446, %214
  %448 = sub i32 %447, %219
  %449 = sub i32 %448, %220
  %450 = sub i32 %449, %222
  %451 = sub i32 %450, %217
  %452 = sub i32 %451, %224
  %453 = sub i32 %452, %225
  %454 = sub i32 %453, %227
  %455 = sub i32 %454, %231
  %456 = add i32 %455, %235
  %457 = add i32 %456, %36
  %458 = sub i32 %457, %243
  %459 = add i32 %458, %244
  %460 = sub i32 %459, %245
  %461 = add i32 %460, %249
  %462 = add i32 %461, %253
  %463 = add i32 %462, %254
  %464 = add i32 %463, %255
  %465 = sub i32 %464, %257
  %466 = add i32 %465, %259
  %467 = add i32 %466, %138
  %468 = add i32 %467, %262
  %469 = add i32 %468, %266
  %470 = sub i32 %469, %268
  %471 = add i32 %470, %272
  %472 = add i32 %471, %273
  %473 = add i32 %472, %278
  %474 = add i32 %473, %281
  %475 = add i32 %474, %16
  %476 = add i32 %475, %17
  %477 = add i32 %476, %38
  %478 = sub i32 %477, %44
  %479 = sub i32 %478, %57
  %480 = add i32 %479, %67
  %481 = sub i32 %480, %75
  %482 = add i32 %481, %80
  %483 = sub i32 %482, %112
  %484 = sub i32 %483, %116
  %485 = sub i32 %484, %123
  %486 = add i32 %485, %131
  %487 = add i32 %486, %140
  %488 = sub i32 %487, %150
  %489 = sub i32 %488, %169
  %490 = sub i32 %489, %182
  %491 = add i32 %490, %186
  %492 = add i32 %491, %193
  %493 = sub i32 %492, %202
  %494 = sub i32 %493, %204
  %495 = sub i32 %494, %216
  %496 = sub i32 %495, %218
  %497 = sub i32 %496, %221
  %498 = add i32 %497, %228
  %499 = sub i32 %498, %230
  %500 = sub i32 %499, %234
  %501 = sub i32 %500, %237
  %502 = sub i32 %501, %247
  %503 = sub i32 %502, %251
  %504 = add i32 %503, %260
  %505 = sub i32 %504, %270
  %506 = sub i32 %505, %277
  %507 = add i32 %506, %280
  %508 = add i32 %507, %283
  %509 = add i32 %508, %285
  %510 = add i32 %509, %288
  %511 = sub i32 %510, %19
  %512 = sub i32 %511, %264
  %513 = add i32 %512, %323
  %514 = add i32 %513, %325
  %515 = sub i32 %514, %53
  %516 = sub i32 %515, %240
  %517 = add i32 %516, %321
  %518 = add i32 %517, %330
  %519 = add i32 %518, %315
  %520 = icmp eq i32 %15, %519
  %521 = select i1 %520, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %522 = tail call i32 @puts(i8* nonnull dereferenceable(1) %521)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
