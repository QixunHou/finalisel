; ModuleID = '../.././c_source_file/1366_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1366_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [15 x i8] c"%d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = xor i32 %4, -1
  %7 = and i32 %6, %3
  %8 = xor i32 %7, -1
  %9 = and i32 %2, %0
  %10 = xor i32 %1, -1
  %11 = or i32 %10, %0
  %12 = xor i32 %9, %11
  %13 = sub i32 %8, %12
  %14 = xor i32 %4, %3
  %15 = xor i32 %14, -1
  %16 = xor i32 %3, -1
  %17 = and i32 %4, %3
  %18 = xor i32 %17, -1
  %19 = or i32 %4, %3
  %20 = shl i32 %19, 1
  %21 = xor i32 %20, -2
  %22 = and i32 %16, %4
  %23 = shl i32 %7, 1
  %24 = or i32 %2, %0
  %25 = xor i32 %24, -1
  %26 = xor i32 %1, %0
  %27 = xor i32 %26, -1
  %28 = or i32 %25, %27
  %29 = xor i32 %2, -1
  %30 = and i32 %26, %29
  %31 = and i32 %11, %29
  %32 = and i32 %2, %1
  %33 = xor i32 %32, -1
  %34 = or i32 %33, %0
  %35 = shl i32 %34, 1
  %36 = xor i32 %2, %0
  %37 = xor i32 %36, -1
  %38 = or i32 %37, %10
  %39 = xor i32 %0, -1
  %40 = and i32 %10, %0
  %41 = and i32 %29, %1
  %42 = or i32 %41, %40
  %43 = or i32 %29, %1
  %44 = xor i32 %43, -1
  %45 = xor i32 %44, %0
  %46 = or i32 %1, %0
  %47 = xor i32 %46, -1
  %48 = or i32 %9, %47
  %49 = and i32 %1, %0
  %50 = xor i32 %43, %49
  %51 = xor i32 %2, %1
  %52 = xor i32 %51, -1
  %53 = xor i32 %52, %0
  %54 = and i32 %10, %2
  %55 = and i32 %54, %0
  %56 = xor i32 %51, %0
  %57 = or i32 %55, %56
  %58 = and i32 %32, %0
  %59 = or i32 %2, %1
  %60 = and i32 %59, %39
  %61 = or i32 %58, %60
  %62 = or i32 %51, %0
  %63 = xor i32 %62, -1
  %64 = or i32 %55, %63
  %65 = xor i32 %40, %33
  %66 = xor i32 %11, -1
  %67 = or i32 %37, %66
  %68 = and i32 %36, %1
  %69 = xor i32 %41, -1
  %70 = and i32 %69, %39
  %71 = and i32 %26, %2
  %72 = and i32 %54, %39
  %73 = or i32 %10, %2
  %74 = and i32 %73, %0
  %75 = xor i32 %74, -1
  %76 = xor i32 %72, %75
  %77 = and i32 %52, %0
  %78 = or i32 %52, %66
  %79 = xor i32 %40, %69
  %80 = xor i32 %11, %2
  %81 = xor i32 %40, -1
  %82 = and i32 %36, %81
  %83 = or i32 %41, %0
  %84 = and i32 %29, %0
  %85 = xor i32 %84, -1
  %86 = xor i32 %49, -1
  %87 = xor i32 %86, %2
  %88 = and i32 %36, %86
  %89 = xor i32 %9, -1
  %90 = add i32 %9, 1
  %91 = and i32 %46, %52
  %92 = or i32 %29, %0
  %93 = xor i32 %92, -1
  %94 = or i32 %93, %1
  %95 = xor i32 %81, %2
  %96 = xor i32 %59, -1
  %97 = or i32 %9, %96
  %98 = or i32 %49, %37
  %99 = shl i32 %98, 1
  %100 = or i32 %27, %2
  %101 = and i32 %92, %10
  %102 = and i32 %46, %29
  %103 = or i32 %51, %39
  %104 = xor i32 %103, -1
  %105 = or i32 %72, %104
  %106 = xor i32 %72, %103
  %107 = or i32 %51, %49
  %108 = xor i32 %24, %1
  %109 = or i32 %43, %39
  %110 = and i32 %43, %39
  %111 = shl i32 %110, 1
  %112 = xor i32 %69, %0
  %113 = or i32 %29, %47
  %114 = and i32 %26, %85
  %115 = or i32 %44, %0
  %116 = xor i32 %9, %1
  %117 = and i32 %92, %27
  %118 = and i32 %81, %2
  %119 = or i32 %37, %27
  %120 = xor i32 %32, %0
  %121 = xor i32 %84, %43
  %122 = and i32 %52, %86
  %123 = or i32 %36, %10
  %124 = or i32 %36, %1
  %125 = and i32 %85, %27
  %126 = or i32 %26, %25
  %127 = and i32 %37, %10
  %128 = and i32 %11, %37
  %129 = xor i32 %59, %0
  %130 = or i32 %58, %129
  %131 = xor i32 %96, %0
  %132 = and i32 %85, %1
  %133 = shl i32 %59, 1
  %134 = and i32 %73, %39
  %135 = xor i32 %134, -1
  %136 = xor i32 %55, %135
  %137 = or i32 %36, %66
  %138 = shl i32 %137, 1
  %139 = or i32 %84, %32
  %140 = and i32 %89, %27
  %141 = or i32 %9, %10
  %142 = or i32 %9, %26
  %143 = xor i32 %92, %49
  %144 = or i32 %26, %2
  %145 = and i32 %51, %39
  %146 = xor i32 %58, -1
  %147 = xor i32 %145, %146
  %148 = or i32 %52, %0
  %149 = and i32 %89, %10
  %150 = or i32 %37, %47
  %151 = or i32 %58, %145
  %152 = or i32 %96, %39
  %153 = and i32 %26, %37
  %154 = xor i32 %85, %1
  %155 = or i32 %84, %44
  %156 = and i32 %43, %0
  %157 = and i32 %36, %46
  %158 = or i32 %40, %2
  %159 = and i32 %32, %39
  %160 = and i32 %51, %0
  %161 = xor i32 %159, -1
  %162 = xor i32 %160, %161
  %163 = or i32 %36, %47
  %164 = add i32 %59, 1
  %165 = or i32 %32, %0
  %166 = or i32 %59, %0
  %167 = shl i32 %166, 1
  %168 = or i32 %69, %39
  %169 = or i32 %55, %134
  %170 = or i32 %32, %40
  %171 = and i32 %11, %52
  %172 = shl i32 %171, 1
  %173 = or i32 %9, %27
  %174 = xor i32 %56, -1
  %175 = xor i32 %55, %174
  %176 = and i32 %36, %26
  %177 = or i32 %66, %2
  %178 = and i32 %11, %2
  %179 = or i32 %44, %39
  %180 = xor i32 %47, %2
  %181 = shl i32 %180, 1
  %182 = or i32 %49, %93
  %183 = and i32 %33, %0
  %184 = xor i32 %59, %49
  %185 = or i32 %159, %160
  %186 = and i32 %51, %81
  %187 = or i32 %69, %0
  %188 = or i32 %41, %39
  %189 = or i32 %52, %39
  %190 = or i32 %33, %39
  %191 = shl i32 %190, 1
  %192 = or i32 %84, %1
  %193 = or i32 %51, %40
  %194 = or i32 %93, %27
  %195 = add i32 %46, 1
  %196 = add i32 %26, 1
  %197 = xor i32 %9, %69
  %198 = shl i32 %197, 1
  %199 = and i32 %37, %1
  %200 = shl i32 %199, 1
  %201 = and i32 %46, %37
  %202 = xor i32 %49, %2
  %203 = or i32 %49, %44
  %204 = or i32 %84, %27
  %205 = or i32 %49, %96
  %206 = and i32 %26, %89
  %207 = or i32 %49, %2
  %208 = or i32 %9, %66
  %209 = or i32 %9, %41
  %210 = xor i32 %9, %59
  %211 = or i32 %25, %1
  %212 = or i32 %52, %47
  %213 = and i32 %29, %27
  %214 = shl i32 %213, 1
  %215 = or i32 %84, %26
  %216 = and i32 %52, %39
  %217 = shl i32 %216, 1
  %218 = xor i32 %129, %146
  %219 = and i32 %46, %2
  %220 = xor i32 %89, %1
  %221 = and i32 %59, %0
  %222 = xor i32 %221, %161
  %223 = or i32 %58, %174
  %224 = and i32 %89, %1
  %225 = or i32 %93, %10
  %226 = and i32 %24, %26
  %227 = or i32 %29, %27
  %228 = or i32 %36, %26
  %229 = xor i32 %93, %1
  %230 = xor i32 %60, %146
  %231 = or i32 %43, %0
  %232 = add i32 %40, 1
  %233 = xor i32 %55, %62
  %234 = add i32 %92, 1
  %235 = or i32 %36, %40
  %236 = and i32 %51, %86
  %237 = xor i32 %84, %1
  %238 = shl i32 %9, 1
  %239 = xor i32 %43, %0
  %240 = or i32 %47, %2
  %241 = shl i32 %240, 1
  %242 = and i32 %86, %2
  %243 = xor i32 %58, %56
  %244 = and i32 %52, %81
  %245 = xor i32 %33, %0
  %246 = or i32 %32, %39
  %247 = and i32 %37, %27
  %248 = or i32 %25, %10
  %249 = shl i32 %248, 1
  %250 = and i32 %36, %10
  %251 = or i32 %159, %221
  %252 = shl i32 %251, 2
  %253 = or i32 %26, %37
  %254 = or i32 %51, %66
  %255 = and i32 %29, %81
  %256 = or i32 %59, %39
  %257 = and i32 %36, %27
  %258 = xor i32 %46, %2
  %259 = or i32 %9, %1
  %260 = xor i32 %25, %1
  %261 = add i32 %43, 1
  %262 = xor i32 %84, %33
  %263 = or i32 %36, %27
  %264 = and i32 %24, %1
  %265 = and i32 %24, %10
  %266 = or i32 %40, %37
  %267 = and i32 %24, %27
  %268 = or i32 %26, %29
  %269 = xor i32 %73, %0
  %270 = xor i32 %269, 2147483647
  %271 = xor i32 %270, %55
  %272 = or i32 %49, %25
  %273 = and i32 %36, %11
  %274 = or i32 %96, %0
  %275 = shl i32 %274, 1
  %276 = or i32 %36, %49
  %277 = shl i32 %276, 1
  %278 = or i32 %49, %29
  %279 = or i32 %26, %93
  %280 = or i32 %72, %74
  %281 = xor i32 %40, %2
  %282 = or i32 %40, %52
  %283 = and i32 %92, %26
  %284 = or i32 %55, %269
  %285 = and i32 %37, %81
  %286 = and i32 %51, %46
  %287 = add i32 %51, 1
  %288 = and i32 %69, %0
  %289 = shl i32 %84, 1
  %290 = and i32 %29, %86
  %291 = and i32 %85, %10
  %292 = shl i32 %291, 1
  %293 = and i32 %37, %86
  %294 = xor i32 %66, %2
  %295 = or i32 %40, %29
  %296 = and i32 %27, %2
  %297 = shl i32 %296, 1
  %298 = and i32 %96, %39
  %299 = mul i32 %298, -15
  %300 = and i32 %41, %39
  %301 = shl i32 %300, 5
  %302 = and i32 %96, %0
  %303 = mul i32 %302, -24
  %304 = and i32 %44, %39
  %305 = mul i32 %159, -13
  %306 = and i32 %44, %0
  %307 = mul i32 %306, -14
  %308 = mul i32 %58, -9
  %309 = add i32 %235, %37
  %310 = add i32 %309, %187
  %311 = sub i32 %310, %131
  %312 = sub i32 %311, %17
  %313 = mul i32 %312, 3
  %314 = sub i32 %88, %94
  %315 = add i32 %314, %67
  %316 = sub i32 %315, %48
  %317 = mul i32 %316, 5
  %318 = add i32 %259, %219
  %319 = add i32 %318, %293
  %320 = shl i32 %319, 2
  %321 = sub i32 -2, %1
  %322 = add i32 %321, %29
  %323 = add i32 %322, %268
  %324 = add i32 %323, %92
  %325 = add i32 %324, %102
  %326 = add i32 %325, %30
  %327 = add i32 %326, %288
  %328 = add i32 %327, %267
  %329 = add i32 %328, %246
  %330 = add i32 %329, %160
  %331 = add i32 %330, %211
  %332 = add i32 %331, %192
  %333 = add i32 %332, %179
  %334 = add i32 %333, %128
  %335 = add i32 %334, %121
  %336 = add i32 %335, %60
  %337 = add i32 %336, %56
  %338 = add i32 %337, %50
  %339 = add i32 %338, %38
  %340 = add i32 %339, %28
  %341 = add i32 %340, %284
  %342 = sub i32 %341, %14
  %343 = add i32 %342, %271
  %344 = shl i32 %343, 1
  %345 = add i32 %49, %1
  %346 = add i32 %345, 2
  %347 = add i32 %346, %40
  %348 = add i32 %347, %195
  %349 = sub i32 %348, %2
  %350 = add i32 %349, %196
  %351 = add i32 %350, %49
  %352 = add i32 %351, %232
  %353 = add i32 %352, %11
  %354 = add i32 %353, %46
  %355 = sub i32 %354, %31
  %356 = sub i32 %355, %71
  %357 = add i32 %356, %80
  %358 = add i32 %357, %85
  %359 = sub i32 %358, %87
  %360 = add i32 %359, %90
  %361 = add i32 %360, %95
  %362 = add i32 %361, %100
  %363 = sub i32 %362, %113
  %364 = sub i32 %363, %36
  %365 = sub i32 %364, %118
  %366 = sub i32 %365, %144
  %367 = add i32 %366, %158
  %368 = add i32 %367, %164
  %369 = add i32 %368, %177
  %370 = sub i32 %369, %178
  %371 = add i32 %370, %51
  %372 = sub i32 %371, %202
  %373 = sub i32 %372, %207
  %374 = sub i32 %373, %43
  %375 = sub i32 %374, %227
  %376 = add i32 %375, %234
  %377 = add i32 %376, %242
  %378 = sub i32 %377, %255
  %379 = sub i32 %378, %258
  %380 = sub i32 %379, %32
  %381 = add i32 %380, %261
  %382 = add i32 %381, %278
  %383 = sub i32 %382, %281
  %384 = add i32 %383, %33
  %385 = add i32 %384, %287
  %386 = sub i32 %385, %290
  %387 = add i32 %386, %294
  %388 = add i32 %387, %295
  %389 = add i32 %388, %42
  %390 = sub i32 %389, %45
  %391 = add i32 %390, %53
  %392 = add i32 %391, %65
  %393 = add i32 %392, %68
  %394 = sub i32 %393, %70
  %395 = add i32 %394, %77
  %396 = add i32 %395, %78
  %397 = add i32 %396, %79
  %398 = sub i32 %397, %82
  %399 = sub i32 %398, %83
  %400 = sub i32 %399, %91
  %401 = add i32 %400, %97
  %402 = add i32 %401, %101
  %403 = add i32 %402, %107
  %404 = sub i32 %403, %108
  %405 = sub i32 %404, %103
  %406 = sub i32 %405, %109
  %407 = add i32 %406, %112
  %408 = sub i32 %407, %114
  %409 = add i32 %408, %115
  %410 = sub i32 %409, %116
  %411 = sub i32 %410, %117
  %412 = sub i32 %411, %119
  %413 = add i32 %412, %120
  %414 = add i32 %413, %122
  %415 = add i32 %414, %123
  %416 = add i32 %415, %124
  %417 = add i32 %416, %125
  %418 = add i32 %417, %126
  %419 = sub i32 %418, %127
  %420 = add i32 %419, %132
  %421 = sub i32 %420, %133
  %422 = add i32 %421, %139
  %423 = sub i32 %422, %140
  %424 = add i32 %423, %141
  %425 = sub i32 %424, %142
  %426 = add i32 %425, %143
  %427 = add i32 %426, %148
  %428 = add i32 %427, %149
  %429 = add i32 %428, %150
  %430 = add i32 %429, %152
  %431 = add i32 %430, %153
  %432 = add i32 %431, %154
  %433 = sub i32 %432, %155
  %434 = sub i32 %433, %156
  %435 = add i32 %434, %157
  %436 = add i32 %435, %163
  %437 = sub i32 %436, %165
  %438 = add i32 %437, %168
  %439 = sub i32 %438, %170
  %440 = add i32 %439, %173
  %441 = add i32 %440, %176
  %442 = sub i32 %441, %181
  %443 = add i32 %442, %182
  %444 = sub i32 %443, %183
  %445 = sub i32 %444, %184
  %446 = add i32 %445, %186
  %447 = sub i32 %446, %188
  %448 = add i32 %447, %189
  %449 = sub i32 %448, %193
  %450 = add i32 %449, %194
  %451 = sub i32 %450, %201
  %452 = sub i32 %451, %145
  %453 = sub i32 %452, %203
  %454 = add i32 %453, %204
  %455 = sub i32 %454, %205
  %456 = add i32 %455, %206
  %457 = sub i32 %456, %208
  %458 = add i32 %457, %209
  %459 = add i32 %458, %210
  %460 = sub i32 %459, %212
  %461 = sub i32 %460, %214
  %462 = sub i32 %461, %215
  %463 = sub i32 %462, %220
  %464 = add i32 %463, %224
  %465 = sub i32 %464, %225
  %466 = sub i32 %465, %226
  %467 = add i32 %466, %228
  %468 = sub i32 %467, %229
  %469 = sub i32 %468, %231
  %470 = sub i32 %469, %236
  %471 = add i32 %470, %237
  %472 = sub i32 %471, %238
  %473 = sub i32 %472, %239
  %474 = sub i32 %473, %241
  %475 = add i32 %474, %244
  %476 = add i32 %475, %245
  %477 = add i32 %476, %247
  %478 = add i32 %477, %250
  %479 = sub i32 %478, %253
  %480 = sub i32 %479, %254
  %481 = add i32 %480, %256
  %482 = sub i32 %481, %257
  %483 = add i32 %482, %260
  %484 = add i32 %483, %262
  %485 = sub i32 %484, %263
  %486 = add i32 %485, %264
  %487 = add i32 %486, %265
  %488 = add i32 %487, %266
  %489 = sub i32 %488, %129
  %490 = sub i32 %489, %272
  %491 = sub i32 %490, %273
  %492 = sub i32 %491, %221
  %493 = add i32 %492, %279
  %494 = add i32 %493, %282
  %495 = add i32 %494, %283
  %496 = sub i32 %495, %285
  %497 = add i32 %496, %286
  %498 = sub i32 %497, %289
  %499 = sub i32 %498, %297
  %500 = sub i32 %499, %304
  %501 = add i32 %500, %15
  %502 = add i32 %501, %18
  %503 = sub i32 %502, %22
  %504 = sub i32 %503, %35
  %505 = add i32 %504, %57
  %506 = sub i32 %505, %61
  %507 = sub i32 %506, %64
  %508 = add i32 %507, %76
  %509 = sub i32 %508, %99
  %510 = add i32 %509, %105
  %511 = sub i32 %510, %106
  %512 = sub i32 %511, %111
  %513 = add i32 %512, %130
  %514 = sub i32 %513, %136
  %515 = sub i32 %514, %138
  %516 = sub i32 %515, %147
  %517 = add i32 %516, %151
  %518 = add i32 %517, %162
  %519 = sub i32 %518, %167
  %520 = sub i32 %519, %169
  %521 = sub i32 %520, %172
  %522 = add i32 %521, %175
  %523 = add i32 %522, %185
  %524 = sub i32 %523, %191
  %525 = sub i32 %524, %198
  %526 = sub i32 %525, %200
  %527 = sub i32 %526, %217
  %528 = add i32 %527, %218
  %529 = add i32 %528, %222
  %530 = sub i32 %529, %223
  %531 = sub i32 %530, %230
  %532 = add i32 %531, %233
  %533 = add i32 %532, %243
  %534 = sub i32 %533, %249
  %535 = sub i32 %534, %275
  %536 = sub i32 %535, %277
  %537 = add i32 %536, %280
  %538 = sub i32 %537, %292
  %539 = add i32 %538, %299
  %540 = sub i32 %539, %301
  %541 = add i32 %540, %303
  %542 = add i32 %541, %305
  %543 = add i32 %542, %307
  %544 = add i32 %543, %308
  %545 = add i32 %544, %20
  %546 = sub i32 %545, %23
  %547 = sub i32 %546, %252
  %548 = sub i32 %547, %21
  %549 = add i32 %548, %320
  %550 = add i32 %549, %317
  %551 = add i32 %550, %313
  %552 = add i32 %551, %344
  %553 = icmp eq i32 %13, %552
  %554 = select i1 %553, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %555 = tail call i32 @puts(i8* nonnull dereferenceable(1) %554)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5)
  %12 = load i32, i32* %1, align 4, !tbaa !2
  %13 = load i32, i32* %2, align 4, !tbaa !2
  %14 = load i32, i32* %3, align 4, !tbaa !2
  %15 = load i32, i32* %4, align 4, !tbaa !2
  %16 = load i32, i32* %5, align 4, !tbaa !2
  call void @crackme(i32 %12, i32 %13, i32 %14, i32 %15, i32 %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
