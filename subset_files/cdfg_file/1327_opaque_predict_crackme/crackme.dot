digraph "DFG for'crackme' function" {
	Node0x6b5300[shape=record, label="  %3 = and i32 %1, %0"];
	Node0x6b59b0[shape=record, label="  %4 = add i32 %3, 1"];
	Node0x6b5a70[shape=record, label="  %5 = xor i32 %1, -1"];
	Node0x6b5ae0[shape=record, label="  %6 = or i32 %5, %0"];
	Node0x6b5b50[shape=record, label="  %7 = sub i32 %4, %6"];
	Node0x6b5bc0[shape=record, label="  %8 = xor i32 %0, -1"];
	Node0x6b5c30[shape=record, label="  %9 = or i32 %8, %1"];
	Node0x6b5cd0[shape=record, label="  %10 = add i32 %0, 3"];
	Node0x6b5d40[shape=record, label="  %11 = add i32 %10, %1"];
	Node0x6b5db0[shape=record, label="  %12 = add i32 %11, %9"];
	Node0x6b5e20[shape=record, label="  %13 = sub i32 %12, %3"];
	Node0x6b5e90[shape=record, label="  %14 = icmp eq i32 %7, %13"];
	Node0x656388[shape=record, label="  %15 = select i1 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x6b6330[shape=record, label="  %16 = tail call i32 @puts(i8* nonnull dereferenceable(1) %15)"];
	Node0x6b6380[shape=record, label="  ret void"];
	Node0x6b5300 -> Node0x6b59b0;
	Node0x6b59b0 -> Node0x6b5a70;
	Node0x6b5a70 -> Node0x6b5ae0;
	Node0x6b5ae0 -> Node0x6b5b50;
	Node0x6b5b50 -> Node0x6b5bc0;
	Node0x6b5bc0 -> Node0x6b5c30;
	Node0x6b5c30 -> Node0x6b5cd0;
	Node0x6b5cd0 -> Node0x6b5d40;
	Node0x6b5d40 -> Node0x6b5db0;
	Node0x6b5db0 -> Node0x6b5e20;
	Node0x6b5e20 -> Node0x6b5e90;
	Node0x6b5e90 -> Node0x656388;
	Node0x656388 -> Node0x6b6330;
	Node0x6b6330 -> Node0x6b6380;
edge [color=red]
	Node0x6b5300 -> Node0x6b59b0;
	Node0x6b5a70 -> Node0x6b5ae0;
	Node0x6b59b0 -> Node0x6b5b50;
	Node0x6b5ae0 -> Node0x6b5b50;
	Node0x6b5bc0 -> Node0x6b5c30;
	Node0x6b5cd0 -> Node0x6b5d40;
	Node0x6b5d40 -> Node0x6b5db0;
	Node0x6b5c30 -> Node0x6b5db0;
	Node0x6b5db0 -> Node0x6b5e20;
	Node0x6b5300 -> Node0x6b5e20;
	Node0x6b5b50 -> Node0x6b5e90;
	Node0x6b5e20 -> Node0x6b5e90;
	Node0x6b5e90 -> Node0x656388;
	Node0x656388 -> Node0x6b6330;
}
