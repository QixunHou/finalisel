; ModuleID = '../.././c_source_file/1505_opaque_predict_crackme.c'
source_filename = "../.././c_source_file/1505_opaque_predict_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [18 x i8] c"%d %d %d %d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = xor i32 %2, -1
  %8 = or i32 %7, %0
  %9 = and i32 %8, %1
  %10 = and i32 %5, %3
  %11 = or i32 %10, %4
  %12 = sub i32 %9, %11
  %13 = xor i32 %5, -1
  %14 = or i32 %13, %4
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %3
  %17 = add i32 %12, %16
  %18 = xor i32 %1, -1
  %19 = or i32 %2, %0
  %20 = xor i32 %19, -1
  %21 = or i32 %20, %1
  %22 = and i32 %2, %0
  %23 = shl i32 %22, 1
  %24 = and i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = xor i32 %0, -1
  %27 = or i32 %2, %1
  %28 = and i32 %27, %26
  %29 = xor i32 %8, -1
  %30 = or i32 %29, %18
  %31 = or i32 %22, %1
  %32 = or i32 %1, %0
  %33 = and i32 %7, %1
  %34 = xor i32 %33, -1
  %35 = and i32 %34, %26
  %36 = and i32 %18, %0
  %37 = xor i32 %36, %34
  %38 = and i32 %8, %18
  %39 = xor i32 %19, %1
  %40 = xor i32 %22, %32
  %41 = xor i32 %1, %0
  %42 = xor i32 %41, -1
  %43 = or i32 %22, %42
  %44 = shl i32 %43, 1
  %45 = xor i32 %2, %0
  %46 = xor i32 %45, -1
  %47 = or i32 %46, %18
  %48 = or i32 %18, %0
  %49 = and i32 %45, %48
  %50 = and i32 %1, %0
  %51 = xor i32 %50, -1
  %52 = and i32 %51, %2
  %53 = or i32 %7, %1
  %54 = xor i32 %53, %0
  %55 = shl i32 %54, 1
  %56 = and i32 %24, %0
  %57 = or i32 %56, %28
  %58 = xor i32 %22, -1
  %59 = and i32 %58, %18
  %60 = and i32 %7, %42
  %61 = or i32 %29, %1
  %62 = shl i32 %61, 1
  %63 = and i32 %19, %41
  %64 = or i32 %53, %26
  %65 = or i32 %26, %2
  %66 = and i32 %65, %18
  %67 = or i32 %33, %0
  %68 = xor i32 %27, -1
  %69 = or i32 %68, %26
  %70 = and i32 %42, %2
  %71 = xor i32 %36, -1
  %72 = and i32 %7, %71
  %73 = and i32 %27, %0
  %74 = xor i32 %48, -1
  %75 = or i32 %7, %74
  %76 = xor i32 %18, %2
  %77 = and i32 %76, %32
  %78 = xor i32 %32, -1
  %79 = or i32 %46, %78
  %80 = and i32 %68, %26
  %81 = and i32 %68, %0
  %82 = mul i32 %81, -14
  %83 = and i32 %33, %0
  %84 = xor i32 %53, -1
  %85 = and i32 %84, %26
  %86 = and i32 %24, %26
  %87 = and i32 %84, %0
  %88 = and i32 %13, %3
  %89 = xor i32 %88, -1
  %90 = xor i32 %89, %4
  %91 = and i32 %4, %3
  %92 = or i32 %5, %4
  %93 = xor i32 %92, %91
  %94 = xor i32 %14, %3
  %95 = shl i32 %94, 1
  %96 = xor i32 %3, -1
  %97 = xor i32 %5, %4
  %98 = and i32 %97, %96
  %99 = xor i32 %4, %3
  %100 = xor i32 %99, -1
  %101 = or i32 %100, %5
  %102 = xor i32 %4, -1
  %103 = or i32 %5, %3
  %104 = xor i32 %103, -1
  %105 = or i32 %104, %102
  %106 = and i32 %92, %3
  %107 = xor i32 %97, -1
  %108 = or i32 %99, %107
  %109 = and i32 %96, %4
  %110 = or i32 %10, %109
  %111 = and i32 %13, %4
  %112 = or i32 %13, %3
  %113 = xor i32 %111, %112
  %114 = and i32 %112, %102
  %115 = xor i32 %112, -1
  %116 = or i32 %111, %115
  %117 = shl i32 %116, 1
  %118 = and i32 %96, %5
  %119 = and i32 %118, %102
  %120 = xor i32 %5, %3
  %121 = xor i32 %120, -1
  %122 = and i32 %121, %4
  %123 = or i32 %119, %122
  %124 = xor i32 %92, -1
  %125 = or i32 %91, %124
  %126 = and i32 %5, %4
  %127 = or i32 %126, %96
  %128 = shl i32 %127, 1
  %129 = xor i32 %15, %3
  %130 = shl i32 %129, 1
  %131 = and i32 %97, %100
  %132 = xor i32 %109, -1
  %133 = and i32 %121, %132
  %134 = and i32 %118, %4
  %135 = or i32 %120, %4
  %136 = xor i32 %135, -1
  %137 = or i32 %134, %136
  %138 = xor i32 %111, -1
  %139 = and i32 %138, %3
  %140 = or i32 %96, %4
  %141 = xor i32 %140, -1
  %142 = or i32 %13, %141
  %143 = or i32 %89, %4
  %144 = xor i32 %103, %91
  %145 = and i32 %89, %102
  %146 = or i32 %109, %5
  %147 = shl i32 %146, 1
  %148 = xor i32 %10, -1
  %149 = or i32 %148, %4
  %150 = or i32 %96, %5
  %151 = xor i32 %150, %4
  %152 = or i32 %134, %151
  %153 = and i32 %14, %100
  %154 = xor i32 %112, %4
  %155 = or i32 %97, %96
  %156 = and i32 %89, %4
  %157 = or i32 %124, %100
  %158 = or i32 %4, %3
  %159 = xor i32 %91, -1
  %160 = and i32 %13, %159
  %161 = xor i32 %126, -1
  %162 = xor i32 %161, %3
  %163 = and i32 %10, %4
  %164 = xor i32 %103, %4
  %165 = xor i32 %164, 2147483647
  %166 = xor i32 %165, %163
  %167 = shl i32 %166, 1
  %168 = or i32 %15, %96
  %169 = xor i32 %91, %5
  %170 = xor i32 %126, %3
  %171 = or i32 %10, %102
  %172 = and i32 %161, %100
  %173 = and i32 %13, %100
  %174 = and i32 %161, %96
  %175 = and i32 %148, %4
  %176 = xor i32 %158, -1
  %177 = or i32 %121, %176
  %178 = or i32 %111, %96
  %179 = or i32 %97, %176
  %180 = and i32 %120, %140
  %181 = and i32 %107, %96
  %182 = and i32 %140, %121
  %183 = xor i32 %138, %3
  %184 = shl i32 %183, 1
  %185 = or i32 %111, %10
  %186 = and i32 %97, %132
  %187 = and i32 %121, %102
  %188 = and i32 %120, %158
  %189 = or i32 %13, %176
  %190 = or i32 %126, %99
  %191 = xor i32 %120, %4
  %192 = xor i32 %163, %191
  %193 = or i32 %97, %109
  %194 = xor i32 %109, %89
  %195 = or i32 %97, %99
  %196 = or i32 %97, %91
  %197 = and i32 %14, %3
  %198 = or i32 %120, %176
  %199 = and i32 %103, %4
  %200 = and i32 %99, %107
  %201 = xor i32 %176, %5
  %202 = xor i32 %134, %135
  %203 = or i32 %103, %4
  %204 = or i32 %97, %100
  %205 = xor i32 %132, %5
  %206 = shl i32 %164, 1
  %207 = and i32 %10, %102
  %208 = and i32 %120, %4
  %209 = xor i32 %208, 2147483647
  %210 = xor i32 %209, %207
  %211 = shl i32 %141, 1
  %212 = and i32 %97, %159
  %213 = and i32 %107, %132
  %214 = or i32 %121, %4
  %215 = or i32 %126, %104
  %216 = or i32 %107, %141
  %217 = xor i32 %109, %148
  %218 = or i32 %109, %13
  %219 = xor i32 %121, %4
  %220 = xor i32 %159, %5
  %221 = and i32 %158, %121
  %222 = and i32 %150, %102
  %223 = or i32 %134, %222
  %224 = shl i32 %88, 1
  %225 = xor i32 %191, -1
  %226 = xor i32 %134, %225
  %227 = or i32 %97, %141
  %228 = or i32 %112, %102
  %229 = shl i32 %228, 1
  %230 = or i32 %120, %91
  %231 = and i32 %138, %96
  %232 = and i32 %120, %132
  %233 = or i32 %97, %3
  %234 = and i32 %107, %159
  %235 = or i32 %88, %102
  %236 = or i32 %115, %4
  %237 = and i32 %158, %5
  %238 = xor i32 %111, %148
  %239 = and i32 %104, %102
  %240 = mul i32 %239, -15
  %241 = and i32 %88, %102
  %242 = shl i32 %241, 2
  %243 = and i32 %104, %4
  %244 = and i32 %88, %4
  %245 = and i32 %115, %102
  %246 = mul i32 %207, 10
  %247 = and i32 %115, %4
  %248 = add i32 %24, %51
  %249 = add i32 %248, %158
  %250 = add i32 %249, %218
  %251 = add i32 %250, %169
  %252 = add i32 %251, %163
  %253 = add i32 %252, %178
  %254 = add i32 %253, %154
  %255 = add i32 %254, %153
  %256 = add i32 %255, %149
  %257 = add i32 %256, %202
  %258 = add i32 %257, %210
  %259 = shl i32 %258, 1
  %260 = sub i32 %56, %86
  %261 = add i32 %260, %83
  %262 = add i32 %261, %148
  %263 = sub i32 %262, %185
  %264 = sub i32 %263, %219
  %265 = mul i32 %264, 3
  %266 = sub i32 %49, %73
  %267 = add i32 %266, %131
  %268 = mul i32 %267, 5
  %269 = add i32 %247, %245
  %270 = mul i32 %269, -6
  %271 = add i32 %244, %85
  %272 = mul i32 %271, -9
  %273 = add i32 %87, %67
  %274 = shl i32 %273, 2
  %275 = sub i32 -2, %0
  %276 = add i32 %275, %18
  %277 = sub i32 %276, %32
  %278 = add i32 %277, %19
  %279 = add i32 %278, %25
  %280 = sub i32 %279, %52
  %281 = sub i32 %280, %60
  %282 = add i32 %281, %70
  %283 = sub i32 %282, %72
  %284 = add i32 %283, %75
  %285 = sub i32 %284, %21
  %286 = sub i32 %285, %23
  %287 = sub i32 %286, %28
  %288 = sub i32 %287, %30
  %289 = add i32 %288, %31
  %290 = add i32 %289, %35
  %291 = add i32 %290, %37
  %292 = sub i32 %291, %38
  %293 = sub i32 %292, %39
  %294 = sub i32 %293, %40
  %295 = add i32 %294, %47
  %296 = add i32 %295, %59
  %297 = add i32 %296, %63
  %298 = sub i32 %297, %64
  %299 = add i32 %298, %66
  %300 = add i32 %299, %69
  %301 = add i32 %300, %77
  %302 = sub i32 %301, %79
  %303 = sub i32 %302, %80
  %304 = add i32 %303, %4
  %305 = sub i32 %304, %44
  %306 = sub i32 %305, %55
  %307 = add i32 %306, %57
  %308 = sub i32 %307, %62
  %309 = add i32 %308, %82
  %310 = sub i32 %309, %5
  %311 = add i32 %310, %101
  %312 = add i32 %311, %92
  %313 = sub i32 %312, %142
  %314 = add i32 %313, %160
  %315 = add i32 %314, %173
  %316 = sub i32 %315, %189
  %317 = add i32 %316, %201
  %318 = add i32 %317, %205
  %319 = sub i32 %318, %211
  %320 = add i32 %319, %220
  %321 = add i32 %320, %14
  %322 = sub i32 %321, %237
  %323 = add i32 %322, %274
  %324 = sub i32 %323, %90
  %325 = sub i32 %324, %93
  %326 = add i32 %325, %98
  %327 = sub i32 %326, %105
  %328 = sub i32 %327, %106
  %329 = sub i32 %328, %108
  %330 = sub i32 %329, %110
  %331 = sub i32 %330, %113
  %332 = add i32 %331, %114
  %333 = sub i32 %332, %125
  %334 = add i32 %333, %133
  %335 = sub i32 %334, %139
  %336 = add i32 %335, %143
  %337 = add i32 %336, %144
  %338 = add i32 %337, %145
  %339 = sub i32 %338, %147
  %340 = sub i32 %339, %155
  %341 = add i32 %340, %156
  %342 = add i32 %341, %157
  %343 = add i32 %342, %162
  %344 = add i32 %343, %168
  %345 = add i32 %344, %170
  %346 = sub i32 %345, %171
  %347 = add i32 %346, %122
  %348 = add i32 %347, %172
  %349 = sub i32 %348, %174
  %350 = sub i32 %349, %175
  %351 = sub i32 %350, %177
  %352 = sub i32 %351, %135
  %353 = add i32 %352, %179
  %354 = add i32 %353, %180
  %355 = add i32 %354, %181
  %356 = add i32 %355, %182
  %357 = add i32 %356, %186
  %358 = sub i32 %357, %187
  %359 = sub i32 %358, %188
  %360 = sub i32 %359, %190
  %361 = sub i32 %360, %193
  %362 = add i32 %361, %194
  %363 = sub i32 %362, %195
  %364 = sub i32 %363, %196
  %365 = sub i32 %364, %197
  %366 = add i32 %365, %198
  %367 = add i32 %366, %199
  %368 = add i32 %367, %200
  %369 = add i32 %368, %203
  %370 = sub i32 %369, %204
  %371 = add i32 %370, %212
  %372 = add i32 %371, %213
  %373 = add i32 %372, %214
  %374 = sub i32 %373, %215
  %375 = sub i32 %374, %216
  %376 = add i32 %375, %217
  %377 = add i32 %376, %221
  %378 = sub i32 %377, %224
  %379 = add i32 %378, %227
  %380 = sub i32 %379, %230
  %381 = sub i32 %380, %231
  %382 = sub i32 %381, %232
  %383 = sub i32 %382, %233
  %384 = add i32 %383, %234
  %385 = add i32 %384, %235
  %386 = sub i32 %385, %236
  %387 = add i32 %386, %238
  %388 = add i32 %387, %243
  %389 = sub i32 %388, %95
  %390 = sub i32 %389, %117
  %391 = sub i32 %390, %123
  %392 = sub i32 %391, %128
  %393 = sub i32 %392, %130
  %394 = sub i32 %393, %137
  %395 = add i32 %394, %152
  %396 = sub i32 %395, %184
  %397 = sub i32 %396, %192
  %398 = sub i32 %397, %206
  %399 = add i32 %398, %223
  %400 = add i32 %399, %226
  %401 = sub i32 %400, %229
  %402 = add i32 %401, %240
  %403 = sub i32 %402, %242
  %404 = add i32 %403, %246
  %405 = add i32 %404, %270
  %406 = add i32 %405, %272
  %407 = sub i32 %406, %167
  %408 = add i32 %407, %268
  %409 = add i32 %408, %265
  %410 = add i32 %409, %259
  %411 = icmp eq i32 %17, %410
  %412 = select i1 %411, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %413 = tail call i32 @puts(i8* nonnull dereferenceable(1) %412)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #5
  %8 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #5
  %9 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #5
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6)
  %14 = load i32, i32* %1, align 4, !tbaa !2
  %15 = load i32, i32* %2, align 4, !tbaa !2
  %16 = load i32, i32* %3, align 4, !tbaa !2
  %17 = load i32, i32* %4, align 4, !tbaa !2
  %18 = load i32, i32* %5, align 4, !tbaa !2
  %19 = load i32, i32* %6, align 4, !tbaa !2
  call void @crackme(i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
