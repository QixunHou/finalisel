digraph "DFG for'crackme' function" {
	Node0x1158b40[shape=record, label="  %5 = or i32 %2, %1"];
	Node0x1158bb0[shape=record, label="  %6 = add i32 %5, %1"];
	Node0x1159230[shape=record, label="  %7 = xor i32 %0, -1"];
	Node0x11592a0[shape=record, label="  %8 = xor i32 %3, -1"];
	Node0x1159310[shape=record, label="  %9 = or i32 %8, %0"];
	Node0x1159380[shape=record, label="  %10 = sub i32 %6, %9"];
	Node0x11593f0[shape=record, label="  %11 = or i32 %7, %3"];
	Node0x1159460[shape=record, label="  %12 = add i32 %10, %11"];
	Node0x11594d0[shape=record, label="  %13 = xor i32 %2, -1"];
	Node0x1159540[shape=record, label="  %14 = or i32 %13, %1"];
	Node0x11595b0[shape=record, label="  %15 = and i32 %2, %1"];
	Node0x1159650[shape=record, label="  %16 = shl i32 %1, 1"];
	Node0x11596f0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x1159760[shape=record, label="  %18 = and i32 %13, %1"];
	Node0x11597d0[shape=record, label="  %19 = xor i32 %5, -1"];
	Node0x1159840[shape=record, label="  %20 = xor i32 %14, -1"];
	Node0x11598e0[shape=record, label="  %21 = mul i32 %20, 6"];
	Node0x1159980[shape=record, label="  %22 = shl i32 %18, 2"];
	Node0x11599f0[shape=record, label="  %23 = and i32 %3, %0"];
	Node0x1159a60[shape=record, label="  %24 = shl i32 %23, 1"];
	Node0x1159ad0[shape=record, label="  %25 = xor i32 %24, -2"];
	Node0x1159b40[shape=record, label="  %26 = xor i32 %7, %3"];
	Node0x1159bb0[shape=record, label="  %27 = xor i32 %11, -1"];
	Node0x1159c20[shape=record, label="  %28 = shl i32 %3, 1"];
	Node0x1159c90[shape=record, label="  %29 = add i32 %15, %19"];
	Node0x1159d30[shape=record, label="  %30 = mul i32 %29, 5"];
	Node0x1159da0[shape=record, label="  %31 = sub i32 5, %0"];
	Node0x1159e10[shape=record, label="  %32 = sub i32 %31, %2"];
	Node0x115a090[shape=record, label="  %33 = sub i32 %32, %14"];
	Node0x115a100[shape=record, label="  %34 = add i32 %33, %15"];
	Node0x115a170[shape=record, label="  %35 = sub i32 %34, %17"];
	Node0x115a1e0[shape=record, label="  %36 = add i32 %35, %18"];
	Node0x115a250[shape=record, label="  %37 = add i32 %36, %21"];
	Node0x115a2c0[shape=record, label="  %38 = add i32 %37, %22"];
	Node0x115a330[shape=record, label="  %39 = add i32 %38, %26"];
	Node0x115a3a0[shape=record, label="  %40 = add i32 %39, %27"];
	Node0x115a410[shape=record, label="  %41 = add i32 %40, %23"];
	Node0x115a480[shape=record, label="  %42 = add i32 %41, %28"];
	Node0x115a4f0[shape=record, label="  %43 = add i32 %42, %30"];
	Node0x115a560[shape=record, label="  %44 = add i32 %43, %25"];
	Node0x115a5d0[shape=record, label="  %45 = icmp eq i32 %12, %44"];
	Node0x10f9268[shape=record, label="  %46 = select i1 %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x115aa70[shape=record, label="  %47 = tail call i32 @puts(i8* nonnull dereferenceable(1) %46)"];
	Node0x115aac0[shape=record, label="  ret void"];
	Node0x1158b40 -> Node0x1158bb0;
	Node0x1158bb0 -> Node0x1159230;
	Node0x1159230 -> Node0x11592a0;
	Node0x11592a0 -> Node0x1159310;
	Node0x1159310 -> Node0x1159380;
	Node0x1159380 -> Node0x11593f0;
	Node0x11593f0 -> Node0x1159460;
	Node0x1159460 -> Node0x11594d0;
	Node0x11594d0 -> Node0x1159540;
	Node0x1159540 -> Node0x11595b0;
	Node0x11595b0 -> Node0x1159650;
	Node0x1159650 -> Node0x11596f0;
	Node0x11596f0 -> Node0x1159760;
	Node0x1159760 -> Node0x11597d0;
	Node0x11597d0 -> Node0x1159840;
	Node0x1159840 -> Node0x11598e0;
	Node0x11598e0 -> Node0x1159980;
	Node0x1159980 -> Node0x11599f0;
	Node0x11599f0 -> Node0x1159a60;
	Node0x1159a60 -> Node0x1159ad0;
	Node0x1159ad0 -> Node0x1159b40;
	Node0x1159b40 -> Node0x1159bb0;
	Node0x1159bb0 -> Node0x1159c20;
	Node0x1159c20 -> Node0x1159c90;
	Node0x1159c90 -> Node0x1159d30;
	Node0x1159d30 -> Node0x1159da0;
	Node0x1159da0 -> Node0x1159e10;
	Node0x1159e10 -> Node0x115a090;
	Node0x115a090 -> Node0x115a100;
	Node0x115a100 -> Node0x115a170;
	Node0x115a170 -> Node0x115a1e0;
	Node0x115a1e0 -> Node0x115a250;
	Node0x115a250 -> Node0x115a2c0;
	Node0x115a2c0 -> Node0x115a330;
	Node0x115a330 -> Node0x115a3a0;
	Node0x115a3a0 -> Node0x115a410;
	Node0x115a410 -> Node0x115a480;
	Node0x115a480 -> Node0x115a4f0;
	Node0x115a4f0 -> Node0x115a560;
	Node0x115a560 -> Node0x115a5d0;
	Node0x115a5d0 -> Node0x10f9268;
	Node0x10f9268 -> Node0x115aa70;
	Node0x115aa70 -> Node0x115aac0;
edge [color=red]
	Node0x1158b40 -> Node0x1158bb0;
	Node0x11592a0 -> Node0x1159310;
	Node0x1158bb0 -> Node0x1159380;
	Node0x1159310 -> Node0x1159380;
	Node0x1159230 -> Node0x11593f0;
	Node0x1159380 -> Node0x1159460;
	Node0x11593f0 -> Node0x1159460;
	Node0x11594d0 -> Node0x1159540;
	Node0x1159650 -> Node0x11596f0;
	Node0x11594d0 -> Node0x1159760;
	Node0x1158b40 -> Node0x11597d0;
	Node0x1159540 -> Node0x1159840;
	Node0x1159840 -> Node0x11598e0;
	Node0x1159760 -> Node0x1159980;
	Node0x11599f0 -> Node0x1159a60;
	Node0x1159a60 -> Node0x1159ad0;
	Node0x1159230 -> Node0x1159b40;
	Node0x11593f0 -> Node0x1159bb0;
	Node0x11595b0 -> Node0x1159c90;
	Node0x11597d0 -> Node0x1159c90;
	Node0x1159c90 -> Node0x1159d30;
	Node0x1159da0 -> Node0x1159e10;
	Node0x1159e10 -> Node0x115a090;
	Node0x1159540 -> Node0x115a090;
	Node0x115a090 -> Node0x115a100;
	Node0x11595b0 -> Node0x115a100;
	Node0x115a100 -> Node0x115a170;
	Node0x11596f0 -> Node0x115a170;
	Node0x115a170 -> Node0x115a1e0;
	Node0x1159760 -> Node0x115a1e0;
	Node0x115a1e0 -> Node0x115a250;
	Node0x11598e0 -> Node0x115a250;
	Node0x115a250 -> Node0x115a2c0;
	Node0x1159980 -> Node0x115a2c0;
	Node0x115a2c0 -> Node0x115a330;
	Node0x1159b40 -> Node0x115a330;
	Node0x115a330 -> Node0x115a3a0;
	Node0x1159bb0 -> Node0x115a3a0;
	Node0x115a3a0 -> Node0x115a410;
	Node0x11599f0 -> Node0x115a410;
	Node0x115a410 -> Node0x115a480;
	Node0x1159c20 -> Node0x115a480;
	Node0x115a480 -> Node0x115a4f0;
	Node0x1159d30 -> Node0x115a4f0;
	Node0x115a4f0 -> Node0x115a560;
	Node0x1159ad0 -> Node0x115a560;
	Node0x1159460 -> Node0x115a5d0;
	Node0x115a560 -> Node0x115a5d0;
	Node0x115a5d0 -> Node0x10f9268;
	Node0x10f9268 -> Node0x115aa70;
}
