; ModuleID = '../.././c_source_file/0948_path_condition_crackme.c'
source_filename = "../.././c_source_file/0948_path_condition_crackme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str.2 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@str = private unnamed_addr constant [4 x i8] c"bad\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"good\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local void @crackme(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = and i32 %1, %0
  %5 = xor i32 %2, -1
  %6 = or i32 %5, %0
  %7 = xor i32 %6, %4
  %8 = and i32 %5, %0
  %9 = xor i32 %8, -1
  %10 = and i32 %9, %1
  %11 = sub i32 %10, %7
  %12 = or i32 %5, %1
  %13 = xor i32 %12, %4
  %14 = and i32 %5, %1
  %15 = xor i32 %14, -1
  %16 = or i32 %15, %0
  %17 = xor i32 %12, -1
  %18 = add i32 %12, 1
  %19 = or i32 %2, %1
  %20 = xor i32 %19, -1
  %21 = xor i32 %20, %0
  %22 = xor i32 %1, -1
  %23 = or i32 %22, %0
  %24 = xor i32 %2, %1
  %25 = xor i32 %24, -1
  %26 = and i32 %23, %25
  %27 = and i32 %22, %0
  %28 = xor i32 %27, -1
  %29 = xor i32 %2, %0
  %30 = xor i32 %29, -1
  %31 = add i32 %29, 1
  %32 = xor i32 %6, -1
  %33 = xor i32 %32, %1
  %34 = add i32 %24, 1
  %35 = xor i32 %1, %0
  %36 = or i32 %8, %35
  %37 = or i32 %4, %32
  %38 = and i32 %2, %1
  %39 = or i32 %38, %27
  %40 = shl i32 %39, 1
  %41 = xor i32 %35, -1
  %42 = and i32 %9, %41
  %43 = and i32 %38, %0
  %44 = xor i32 %24, %0
  %45 = xor i32 %43, %44
  %46 = xor i32 %23, %2
  %47 = and i32 %25, %28
  %48 = xor i32 %0, -1
  %49 = xor i32 %38, -1
  %50 = or i32 %49, %48
  %51 = shl i32 %50, 1
  %52 = and i32 %25, %48
  %53 = and i32 %35, %2
  %54 = and i32 %29, %41
  %55 = and i32 %2, %0
  %56 = xor i32 %55, -1
  %57 = or i32 %24, %4
  %58 = shl i32 %2, 1
  %59 = or i32 %2, %0
  %60 = xor i32 %59, -1
  %61 = add i32 %59, 1
  %62 = or i32 %29, %1
  %63 = or i32 %4, %60
  %64 = xor i32 %4, -1
  %65 = and i32 %25, %64
  %66 = and i32 %22, %2
  %67 = and i32 %66, %48
  %68 = or i32 %22, %2
  %69 = and i32 %68, %0
  %70 = or i32 %67, %69
  %71 = and i32 %24, %0
  %72 = or i32 %19, %48
  %73 = xor i32 %9, %1
  %74 = shl i32 %73, 2
  %75 = or i32 %25, %0
  %76 = or i32 %35, %2
  %77 = shl i32 %76, 1
  %78 = or i32 %27, %5
  %79 = or i32 %4, %17
  %80 = or i32 %41, %2
  %81 = xor i32 %8, %49
  %82 = or i32 %1, %0
  %83 = shl i32 %82, 1
  %84 = and i32 %24, %48
  %85 = xor i32 %43, -1
  %86 = xor i32 %84, %85
  %87 = and i32 %15, %48
  %88 = or i32 %35, %32
  %89 = shl i32 %88, 1
  %90 = and i32 %30, %28
  %91 = xor i32 %23, -1
  %92 = xor i32 %91, %2
  %93 = and i32 %82, %25
  %94 = shl i32 %84, 1
  %95 = xor i32 %82, %2
  %96 = or i32 %24, %48
  %97 = xor i32 %67, %96
  %98 = and i32 %24, %64
  %99 = or i32 %20, %48
  %100 = and i32 %29, %64
  %101 = xor i32 %82, -1
  %102 = or i32 %101, %2
  %103 = shl i32 %102, 1
  %104 = and i32 %19, %48
  %105 = shl i32 %104, 1
  %106 = add i32 %1, 1
  %107 = xor i32 %64, %2
  %108 = shl i32 %107, 2
  %109 = or i32 %4, %25
  %110 = or i32 %32, %41
  %111 = xor i32 %8, %12
  %112 = or i32 %24, %101
  %113 = xor i32 %55, %15
  %114 = xor i32 %60, %1
  %115 = xor i32 %38, %0
  %116 = and i32 %66, %0
  %117 = xor i32 %44, -1
  %118 = xor i32 %116, %117
  %119 = or i32 %12, %48
  %120 = and i32 %59, %35
  %121 = xor i32 %56, %1
  %122 = and i32 %29, %22
  %123 = or i32 %35, %60
  %124 = shl i32 %123, 1
  %125 = and i32 %29, %28
  %126 = or i32 %32, %22
  %127 = xor i32 %55, %23
  %128 = xor i32 %25, %0
  %129 = or i32 %38, %48
  %130 = or i32 %55, %91
  %131 = and i32 %29, %23
  %132 = shl i32 %131, 1
  %133 = or i32 %5, %101
  %134 = shl i32 %133, 1
  %135 = and i32 %6, %41
  %136 = and i32 %56, %41
  %137 = and i32 %5, %28
  %138 = xor i32 %55, %1
  %139 = and i32 %56, %1
  %140 = and i32 %35, %5
  %141 = and i32 %5, %41
  %142 = or i32 %8, %38
  %143 = and i32 %24, %23
  %144 = or i32 %29, %27
  %145 = xor i32 %8, %1
  %146 = and i32 %41, %2
  %147 = or i32 %15, %48
  %148 = or i32 %14, %27
  %149 = and i32 %5, %64
  %150 = xor i32 %6, %1
  %151 = shl i32 %150, 1
  %152 = and i32 %59, %1
  %153 = or i32 %5, %41
  %154 = and i32 %23, %30
  %155 = or i32 %55, %41
  %156 = shl i32 %155, 1
  %157 = and i32 %29, %1
  %158 = or i32 %20, %0
  %159 = and i32 %19, %0
  %160 = xor i32 %19, %0
  %161 = and i32 %35, %56
  %162 = and i32 %38, %48
  %163 = or i32 %162, %71
  %164 = or i32 %19, %0
  %165 = or i32 %29, %41
  %166 = or i32 %8, %22
  %167 = xor i32 %104, %85
  %168 = or i32 %8, %1
  %169 = or i32 %29, %91
  %170 = xor i32 %27, %2
  %171 = shl i32 %170, 1
  %172 = xor i32 %96, -1
  %173 = or i32 %67, %172
  %174 = or i32 %17, %48
  %175 = and i32 %24, %82
  %176 = shl i32 %35, 1
  %177 = or i32 %32, %1
  %178 = xor i32 %68, %0
  %179 = or i32 %116, %178
  %180 = or i32 %14, %0
  %181 = shl i32 %180, 1
  %182 = or i32 %29, %4
  %183 = xor i32 %69, -1
  %184 = xor i32 %67, %183
  %185 = and i32 %35, %30
  %186 = or i32 %43, %160
  %187 = or i32 %25, %101
  %188 = and i32 %68, %48
  %189 = or i32 %116, %188
  %190 = or i32 %38, %0
  %191 = xor i32 %17, %0
  %192 = and i32 %6, %22
  %193 = or i32 %24, %0
  %194 = xor i32 %193, 1073741823
  %195 = or i32 %194, %116
  %196 = shl i32 %195, 2
  %197 = or i32 %27, %30
  %198 = or i32 %25, %48
  %199 = and i32 %29, %82
  %200 = xor i32 %49, %0
  %201 = or i32 %30, %1
  %202 = xor i32 %4, %2
  %203 = or i32 %55, %1
  %204 = xor i32 %116, %193
  %205 = or i32 %24, %91
  %206 = xor i32 %101, %2
  %207 = and i32 %23, %5
  %208 = and i32 %20, %48
  %209 = and i32 %14, %48
  %210 = mul i32 %209, 6
  %211 = and i32 %20, %0
  %212 = mul i32 %211, -20
  %213 = and i32 %14, %0
  %214 = shl i32 %213, 3
  %215 = and i32 %17, %48
  %216 = and i32 %17, %0
  %217 = mul i32 %43, 7
  %218 = add i32 %91, %48
  %219 = add i32 %218, %101
  %220 = add i32 %219, %153
  %221 = add i32 %220, %15
  %222 = add i32 %221, %78
  %223 = add i32 %222, %215
  %224 = add i32 %223, %205
  %225 = add i32 %224, %201
  %226 = add i32 %225, %166
  %227 = add i32 %226, %160
  %228 = add i32 %227, %154
  %229 = add i32 %228, %152
  %230 = add i32 %229, %148
  %231 = add i32 %230, %143
  %232 = add i32 %231, %136
  %233 = add i32 %232, %127
  %234 = add i32 %233, %122
  %235 = add i32 %234, %100
  %236 = add i32 %235, %99
  %237 = add i32 %236, %93
  %238 = add i32 %237, %47
  %239 = add i32 %238, %45
  %240 = shl i32 %239, 1
  %241 = add i32 %42, %18
  %242 = add i32 %241, %192
  %243 = mul i32 %242, 5
  %244 = sub i32 %216, %208
  %245 = mul i32 %244, 13
  %246 = add i32 %207, %170
  %247 = add i32 %246, %29
  %248 = sub i32 %247, %109
  %249 = add i32 %248, %173
  %250 = mul i32 %249, 3
  %251 = sub i32 1, %0
  %252 = add i32 %251, %106
  %253 = add i32 %252, %41
  %254 = add i32 %253, %31
  %255 = add i32 %254, %34
  %256 = add i32 %255, %8
  %257 = add i32 %256, %46
  %258 = add i32 %257, %53
  %259 = sub i32 %258, %58
  %260 = add i32 %259, %61
  %261 = add i32 %260, %38
  %262 = sub i32 %261, %80
  %263 = sub i32 %262, %83
  %264 = add i32 %263, %92
  %265 = sub i32 %264, %95
  %266 = sub i32 %265, %137
  %267 = add i32 %266, %140
  %268 = sub i32 %267, %141
  %269 = sub i32 %268, %146
  %270 = add i32 %269, %149
  %271 = sub i32 %270, %24
  %272 = sub i32 %271, %176
  %273 = sub i32 %272, %19
  %274 = sub i32 %273, %202
  %275 = add i32 %274, %206
  %276 = add i32 %275, %16
  %277 = add i32 %276, %13
  %278 = sub i32 %277, %21
  %279 = sub i32 %278, %26
  %280 = sub i32 %279, %33
  %281 = add i32 %280, %36
  %282 = add i32 %281, %37
  %283 = add i32 %282, %52
  %284 = sub i32 %283, %54
  %285 = sub i32 %284, %57
  %286 = sub i32 %285, %62
  %287 = sub i32 %286, %63
  %288 = sub i32 %287, %65
  %289 = add i32 %288, %71
  %290 = sub i32 %289, %72
  %291 = sub i32 %290, %75
  %292 = sub i32 %291, %77
  %293 = sub i32 %292, %79
  %294 = add i32 %293, %81
  %295 = add i32 %294, %87
  %296 = add i32 %295, %90
  %297 = sub i32 %296, %98
  %298 = sub i32 %297, %103
  %299 = add i32 %298, %108
  %300 = sub i32 %299, %110
  %301 = sub i32 %300, %111
  %302 = add i32 %301, %112
  %303 = add i32 %302, %113
  %304 = sub i32 %303, %114
  %305 = add i32 %304, %115
  %306 = sub i32 %305, %119
  %307 = sub i32 %306, %120
  %308 = sub i32 %307, %121
  %309 = add i32 %308, %125
  %310 = add i32 %309, %126
  %311 = sub i32 %310, %128
  %312 = sub i32 %311, %129
  %313 = sub i32 %312, %130
  %314 = sub i32 %313, %134
  %315 = sub i32 %314, %135
  %316 = add i32 %315, %138
  %317 = add i32 %316, %139
  %318 = add i32 %317, %142
  %319 = sub i32 %318, %44
  %320 = sub i32 %319, %144
  %321 = sub i32 %320, %145
  %322 = sub i32 %321, %147
  %323 = add i32 %322, %157
  %324 = add i32 %323, %158
  %325 = add i32 %324, %159
  %326 = sub i32 %325, %161
  %327 = add i32 %326, %164
  %328 = add i32 %327, %165
  %329 = sub i32 %328, %168
  %330 = add i32 %329, %169
  %331 = sub i32 %330, %171
  %332 = sub i32 %331, %174
  %333 = add i32 %332, %175
  %334 = sub i32 %333, %177
  %335 = add i32 %334, %182
  %336 = add i32 %335, %185
  %337 = add i32 %336, %187
  %338 = add i32 %337, %190
  %339 = sub i32 %338, %191
  %340 = add i32 %339, %197
  %341 = sub i32 %340, %198
  %342 = add i32 %341, %199
  %343 = sub i32 %342, %200
  %344 = add i32 %343, %203
  %345 = sub i32 %344, %162
  %346 = sub i32 %345, %40
  %347 = sub i32 %346, %51
  %348 = sub i32 %347, %70
  %349 = sub i32 %348, %74
  %350 = add i32 %349, %86
  %351 = sub i32 %350, %89
  %352 = sub i32 %351, %94
  %353 = add i32 %352, %97
  %354 = sub i32 %353, %105
  %355 = add i32 %354, %118
  %356 = sub i32 %355, %124
  %357 = sub i32 %356, %132
  %358 = sub i32 %357, %151
  %359 = sub i32 %358, %156
  %360 = add i32 %359, %163
  %361 = add i32 %360, %167
  %362 = add i32 %361, %179
  %363 = sub i32 %362, %181
  %364 = sub i32 %363, %184
  %365 = add i32 %364, %186
  %366 = sub i32 %365, %189
  %367 = sub i32 %366, %204
  %368 = add i32 %367, %210
  %369 = add i32 %368, %212
  %370 = sub i32 %369, %214
  %371 = add i32 %370, %217
  %372 = add i32 %371, %245
  %373 = sub i32 %372, %196
  %374 = add i32 %373, %243
  %375 = add i32 %374, %250
  %376 = add i32 %375, %240
  %377 = icmp eq i32 %11, %376
  %378 = select i1 %377, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)
  %379 = tail call i32 @puts(i8* nonnull dereferenceable(1) %378)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #1 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)
  %8 = load i32, i32* %1, align 4, !tbaa !2
  %9 = load i32, i32* %2, align 4, !tbaa !2
  %10 = load i32, i32* %3, align 4, !tbaa !2
  call void @crackme(i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare dso_local i32 @__isoc99_scanf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 10.0.1-++20200708122807+ef32c611aa2-1~exp1~20200707223407.61 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
