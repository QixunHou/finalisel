digraph "DFG for'main' function" {
	Node0x2402188[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x2402208[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x2402298[shape=record, label="  %3 = alloca i32, align 4"];
	Node0x24022f8[shape=record, label="  %4 = bitcast i32* %1 to i8*"];
	Node0x2402778[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x2402858[shape=record, label="  %5 = bitcast i32* %2 to i8*"];
	Node0x2402958[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x2402a18[shape=record, label="  %6 = bitcast i32* %3 to i8*"];
	Node0x2402ac8[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x2402d28[shape=record, label="  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2, i32* nonnull %3)"];
	Node0x2402de8[shape=record, label="  %8 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x2402f48[shape=record, label="  %9 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x2402fa8[shape=record, label="  %10 = load i32, i32* %3, align 4, !tbaa !2"];
	Node0x2408670[shape=record, label="  call void @crackme(i32 %8, i32 %9, i32 %10)"];
	Node0x2408878[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5"];
	Node0x24089d8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5"];
	Node0x2408ae8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x2408ba8[shape=record, label="  ret i32 0"];
	Node0x2402188 -> Node0x2402208;
	Node0x2402208 -> Node0x2402298;
	Node0x2402298 -> Node0x24022f8;
	Node0x24022f8 -> Node0x2402778;
	Node0x2402778 -> Node0x2402858;
	Node0x2402858 -> Node0x2402958;
	Node0x2402958 -> Node0x2402a18;
	Node0x2402a18 -> Node0x2402ac8;
	Node0x2402ac8 -> Node0x2402d28;
	Node0x2402d28 -> Node0x2402de8;
	Node0x2402de8 -> Node0x2402f48;
	Node0x2402f48 -> Node0x2402fa8;
	Node0x2402fa8 -> Node0x2408670;
	Node0x2408670 -> Node0x2408878;
	Node0x2408878 -> Node0x24089d8;
	Node0x24089d8 -> Node0x2408ae8;
	Node0x2408ae8 -> Node0x2408ba8;
edge [color=red]
	Node0x2402188 -> Node0x24022f8;
	Node0x24022f8 -> Node0x2402778;
	Node0x2402208 -> Node0x2402858;
	Node0x2402858 -> Node0x2402958;
	Node0x2402298 -> Node0x2402a18;
	Node0x2402a18 -> Node0x2402ac8;
	Node0x2402188 -> Node0x2402d28;
	Node0x2402208 -> Node0x2402d28;
	Node0x2402298 -> Node0x2402d28;
	Node0x2402188 -> Node0x2402de8;
	Node0x2402208 -> Node0x2402f48;
	Node0x2402298 -> Node0x2402fa8;
	Node0x2402de8 -> Node0x2408670;
	Node0x2402f48 -> Node0x2408670;
	Node0x2402fa8 -> Node0x2408670;
	Node0x2402a18 -> Node0x2408878;
	Node0x2402858 -> Node0x24089d8;
	Node0x24022f8 -> Node0x2408ae8;
}
