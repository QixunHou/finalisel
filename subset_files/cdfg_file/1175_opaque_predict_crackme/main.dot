digraph "DFG for'main' function" {
	Node0x16b49a8[shape=record, label="  %1 = alloca i32, align 4"];
	Node0x16b4a28[shape=record, label="  %2 = alloca i32, align 4"];
	Node0x16b4ab8[shape=record, label="  %3 = bitcast i32* %1 to i8*"];
	Node0x16b4f18[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x16b4ff8[shape=record, label="  %4 = bitcast i32* %2 to i8*"];
	Node0x16b5118[shape=record, label="  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x16b5350[shape=record, label="  %5 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %1, i32* nonnull %2)"];
	Node0x16b5408[shape=record, label="  %6 = load i32, i32* %1, align 4, !tbaa !2"];
	Node0x16b6378[shape=record, label="  %7 = load i32, i32* %2, align 4, !tbaa !2"];
	Node0x16b6a00[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x16b6a70[shape=record, label="  %9 = xor i32 %6, %8"];
	Node0x16b6ae0[shape=record, label="  %10 = or i32 %7, %6"];
	Node0x16b6b50[shape=record, label="  %11 = and i32 %7, %6"];
	Node0x16b6bc0[shape=record, label="  %12 = and i32 %6, %8"];
	Node0x16b6c30[shape=record, label="  %13 = xor i32 %12, -1"];
	Node0x16b6ca0[shape=record, label="  %14 = or i32 %6, %8"];
	Node0x16b6d10[shape=record, label="  %15 = xor i32 %10, -1"];
	Node0x16b6d80[shape=record, label="  %16 = shl i32 %14, 1"];
	Node0x16b6df0[shape=record, label="  %17 = xor i32 %16, -2"];
	Node0x16b6e60[shape=record, label="  %18 = shl i32 %12, 1"];
	Node0x16b6ed0[shape=record, label="  %19 = sub i32 %7, %6"];
	Node0x16b6f40[shape=record, label="  %20 = add i32 %19, %13"];
	Node0x16b6fb0[shape=record, label="  %21 = add i32 %20, %11"];
	Node0x16b7020[shape=record, label="  %22 = sub i32 %21, %14"];
	Node0x16b7090[shape=record, label="  %23 = add i32 %22, %15"];
	Node0x16b7100[shape=record, label="  %24 = add i32 %23, %18"];
	Node0x16b7170[shape=record, label="  %25 = sub i32 %24, %17"];
	Node0x16b71e0[shape=record, label="  %26 = icmp eq i32 %25, %9"];
	Node0x16559d8[shape=record, label="  %27 = select i1 %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16b7270[shape=record, label="  %28 = call i32 @puts(i8* nonnull dereferenceable(1) %27) #5"];
	Node0x16b74c8[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5"];
	Node0x16b7628[shape=record, label="  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #5"];
	Node0x16b76e8[shape=record, label="  ret i32 0"];
	Node0x16b49a8 -> Node0x16b4a28;
	Node0x16b4a28 -> Node0x16b4ab8;
	Node0x16b4ab8 -> Node0x16b4f18;
	Node0x16b4f18 -> Node0x16b4ff8;
	Node0x16b4ff8 -> Node0x16b5118;
	Node0x16b5118 -> Node0x16b5350;
	Node0x16b5350 -> Node0x16b5408;
	Node0x16b5408 -> Node0x16b6378;
	Node0x16b6378 -> Node0x16b6a00;
	Node0x16b6a00 -> Node0x16b6a70;
	Node0x16b6a70 -> Node0x16b6ae0;
	Node0x16b6ae0 -> Node0x16b6b50;
	Node0x16b6b50 -> Node0x16b6bc0;
	Node0x16b6bc0 -> Node0x16b6c30;
	Node0x16b6c30 -> Node0x16b6ca0;
	Node0x16b6ca0 -> Node0x16b6d10;
	Node0x16b6d10 -> Node0x16b6d80;
	Node0x16b6d80 -> Node0x16b6df0;
	Node0x16b6df0 -> Node0x16b6e60;
	Node0x16b6e60 -> Node0x16b6ed0;
	Node0x16b6ed0 -> Node0x16b6f40;
	Node0x16b6f40 -> Node0x16b6fb0;
	Node0x16b6fb0 -> Node0x16b7020;
	Node0x16b7020 -> Node0x16b7090;
	Node0x16b7090 -> Node0x16b7100;
	Node0x16b7100 -> Node0x16b7170;
	Node0x16b7170 -> Node0x16b71e0;
	Node0x16b71e0 -> Node0x16559d8;
	Node0x16559d8 -> Node0x16b7270;
	Node0x16b7270 -> Node0x16b74c8;
	Node0x16b74c8 -> Node0x16b7628;
	Node0x16b7628 -> Node0x16b76e8;
edge [color=red]
	Node0x16b49a8 -> Node0x16b4ab8;
	Node0x16b4ab8 -> Node0x16b4f18;
	Node0x16b4a28 -> Node0x16b4ff8;
	Node0x16b4ff8 -> Node0x16b5118;
	Node0x16b49a8 -> Node0x16b5350;
	Node0x16b4a28 -> Node0x16b5350;
	Node0x16b49a8 -> Node0x16b5408;
	Node0x16b4a28 -> Node0x16b6378;
	Node0x16b6378 -> Node0x16b6a00;
	Node0x16b5408 -> Node0x16b6a70;
	Node0x16b6a00 -> Node0x16b6a70;
	Node0x16b6378 -> Node0x16b6ae0;
	Node0x16b5408 -> Node0x16b6ae0;
	Node0x16b6378 -> Node0x16b6b50;
	Node0x16b5408 -> Node0x16b6b50;
	Node0x16b5408 -> Node0x16b6bc0;
	Node0x16b6a00 -> Node0x16b6bc0;
	Node0x16b6bc0 -> Node0x16b6c30;
	Node0x16b5408 -> Node0x16b6ca0;
	Node0x16b6a00 -> Node0x16b6ca0;
	Node0x16b6ae0 -> Node0x16b6d10;
	Node0x16b6ca0 -> Node0x16b6d80;
	Node0x16b6d80 -> Node0x16b6df0;
	Node0x16b6bc0 -> Node0x16b6e60;
	Node0x16b6378 -> Node0x16b6ed0;
	Node0x16b5408 -> Node0x16b6ed0;
	Node0x16b6ed0 -> Node0x16b6f40;
	Node0x16b6c30 -> Node0x16b6f40;
	Node0x16b6f40 -> Node0x16b6fb0;
	Node0x16b6b50 -> Node0x16b6fb0;
	Node0x16b6fb0 -> Node0x16b7020;
	Node0x16b6ca0 -> Node0x16b7020;
	Node0x16b7020 -> Node0x16b7090;
	Node0x16b6d10 -> Node0x16b7090;
	Node0x16b7090 -> Node0x16b7100;
	Node0x16b6e60 -> Node0x16b7100;
	Node0x16b7100 -> Node0x16b7170;
	Node0x16b6df0 -> Node0x16b7170;
	Node0x16b7170 -> Node0x16b71e0;
	Node0x16b6a70 -> Node0x16b71e0;
	Node0x16b71e0 -> Node0x16559d8;
	Node0x16559d8 -> Node0x16b7270;
	Node0x16b4ff8 -> Node0x16b74c8;
	Node0x16b4ab8 -> Node0x16b7628;
}
