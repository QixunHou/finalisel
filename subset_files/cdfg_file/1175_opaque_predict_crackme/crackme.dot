digraph "DFG for'crackme' function" {
	Node0x16b3a90[shape=record, label="  %3 = xor i32 %1, -1"];
	Node0x16b3b00[shape=record, label="  %4 = xor i32 %3, %0"];
	Node0x16b3bc0[shape=record, label="  %5 = or i32 %1, %0"];
	Node0x16b3c30[shape=record, label="  %6 = and i32 %1, %0"];
	Node0x16b3ca0[shape=record, label="  %7 = and i32 %3, %0"];
	Node0x16b3d10[shape=record, label="  %8 = xor i32 %7, -1"];
	Node0x16b3d80[shape=record, label="  %9 = or i32 %3, %0"];
	Node0x16b3df0[shape=record, label="  %10 = xor i32 %5, -1"];
	Node0x16b3e60[shape=record, label="  %11 = shl i32 %9, 1"];
	Node0x16b3f00[shape=record, label="  %12 = xor i32 %11, -2"];
	Node0x16b3f70[shape=record, label="  %13 = shl i32 %7, 1"];
	Node0x16b3fe0[shape=record, label="  %14 = sub i32 %1, %0"];
	Node0x16b4050[shape=record, label="  %15 = add i32 %14, %8"];
	Node0x16b40c0[shape=record, label="  %16 = add i32 %15, %6"];
	Node0x16b4130[shape=record, label="  %17 = sub i32 %16, %9"];
	Node0x16b41a0[shape=record, label="  %18 = add i32 %17, %10"];
	Node0x16b4210[shape=record, label="  %19 = add i32 %18, %13"];
	Node0x16b4280[shape=record, label="  %20 = sub i32 %19, %12"];
	Node0x16b42f0[shape=record, label="  %21 = icmp eq i32 %20, %4"];
	Node0x1654268[shape=record, label="  %22 = select i1 %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0)"];
	Node0x16b4790[shape=record, label="  %23 = tail call i32 @puts(i8* nonnull dereferenceable(1) %22)"];
	Node0x16b47e0[shape=record, label="  ret void"];
	Node0x16b3a90 -> Node0x16b3b00;
	Node0x16b3b00 -> Node0x16b3bc0;
	Node0x16b3bc0 -> Node0x16b3c30;
	Node0x16b3c30 -> Node0x16b3ca0;
	Node0x16b3ca0 -> Node0x16b3d10;
	Node0x16b3d10 -> Node0x16b3d80;
	Node0x16b3d80 -> Node0x16b3df0;
	Node0x16b3df0 -> Node0x16b3e60;
	Node0x16b3e60 -> Node0x16b3f00;
	Node0x16b3f00 -> Node0x16b3f70;
	Node0x16b3f70 -> Node0x16b3fe0;
	Node0x16b3fe0 -> Node0x16b4050;
	Node0x16b4050 -> Node0x16b40c0;
	Node0x16b40c0 -> Node0x16b4130;
	Node0x16b4130 -> Node0x16b41a0;
	Node0x16b41a0 -> Node0x16b4210;
	Node0x16b4210 -> Node0x16b4280;
	Node0x16b4280 -> Node0x16b42f0;
	Node0x16b42f0 -> Node0x1654268;
	Node0x1654268 -> Node0x16b4790;
	Node0x16b4790 -> Node0x16b47e0;
edge [color=red]
	Node0x16b3a90 -> Node0x16b3b00;
	Node0x16b3a90 -> Node0x16b3ca0;
	Node0x16b3ca0 -> Node0x16b3d10;
	Node0x16b3a90 -> Node0x16b3d80;
	Node0x16b3bc0 -> Node0x16b3df0;
	Node0x16b3d80 -> Node0x16b3e60;
	Node0x16b3e60 -> Node0x16b3f00;
	Node0x16b3ca0 -> Node0x16b3f70;
	Node0x16b3fe0 -> Node0x16b4050;
	Node0x16b3d10 -> Node0x16b4050;
	Node0x16b4050 -> Node0x16b40c0;
	Node0x16b3c30 -> Node0x16b40c0;
	Node0x16b40c0 -> Node0x16b4130;
	Node0x16b3d80 -> Node0x16b4130;
	Node0x16b4130 -> Node0x16b41a0;
	Node0x16b3df0 -> Node0x16b41a0;
	Node0x16b41a0 -> Node0x16b4210;
	Node0x16b3f70 -> Node0x16b4210;
	Node0x16b4210 -> Node0x16b4280;
	Node0x16b3f00 -> Node0x16b4280;
	Node0x16b4280 -> Node0x16b42f0;
	Node0x16b3b00 -> Node0x16b42f0;
	Node0x16b42f0 -> Node0x1654268;
	Node0x1654268 -> Node0x16b4790;
}
